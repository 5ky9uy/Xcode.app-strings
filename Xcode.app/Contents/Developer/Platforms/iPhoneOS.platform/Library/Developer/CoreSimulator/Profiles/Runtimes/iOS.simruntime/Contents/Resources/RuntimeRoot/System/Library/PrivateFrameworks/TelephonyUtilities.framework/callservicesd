handle
handleWithTUHandle:
setHandle:
tokenPrefixedURI
setTokenPrefixedURI:
unsafeData
setUnsafeData:
encryptedData
setEncryptedData:
tuHandle
initWithHandle:tokenPrefixedURI:data:encryptedData:
tuVoucher
voucherWithTUVoucher:
T@"TUVoucher",R,N
description
dictionaryRepresentation
stringWithFormat:
dictionary
numberWithUnsignedInt:
setObject:forKey:
numberWithUnsignedLongLong:
setAvcIdentifier:
allocWithZone:
init
copyWithZone:
isMemberOfClass:
isEqual:
hash
setVersion:
setHasVersion:
hasVersion
setIdentifier:
setHasIdentifier:
hasIdentifier
hasAvcIdentifier
readFrom:
writeTo:
copyTo:
mergeFrom:
version
identifier
avcIdentifier
.cxx_destruct
_identifier
_avcIdentifier
_version
_has
TB,N
TI,N,V_version
TQ,N,V_identifier
TB,R,N
T@"NSString",&,N,V_avcIdentifier
removeAllObjects
addObject:
count
objectAtIndex:
addPseudonym:
countByEnumeratingWithState:objects:count:
pseudonymsCount
clearPseudonyms
pseudonymAtIndex:
pseudonymType
pseudonyms
setPseudonyms:
_pseudonyms
T@"NSMutableArray",&,N,V_pseudonyms
setPublicKey:
setConversationMessageBytes:
hasPublicKey
hasConversationMessageBytes
publicKey
conversationMessageBytes
_conversationMessageBytes
_publicKey
T@"NSData",&,N,V_publicKey
T@"NSData",&,N,V_conversationMessageBytes
hasLink
link
tuConversationLink
T@"TUConversationLink",R,C,N
setType:
setConversationGroupUUID:
linkWithTUConversationLink:includeGroupUUID:
setLink:
setEncryptedMessage:
setEnclosedEncryptedType:
hasType
type
hasIsLetMeInApproved
isLetMeInApproved
invitationPreferences
tuInvitationPreference
copy
conversationGroupUUIDString
initWithUUIDString:
UUIDString
setConversationGroupUUIDString:
invitationPreferenceWithTUConversationInvitationPreference:
addInvitationPreferences:
initWithType:groupUUID:link:
initWithEncryptedMessage:enclosedType:link:
constitutesLetMeInApproval
tuInvitationPreferences
conversationGroupUUID
setTUInvitationPreferences:
T@"NSSet",C,N,SsetTUInvitationPreferences:
T@"NSUUID",&,N
hasCreationDateEpochTime
creationDateEpochTime
dateWithTimeIntervalSince1970:
hasPseudonymExpirationDateEpochTime
pseudonymExpirationDateEpochTime
invitedHandles
pseudonym
groupUUID
originatorTUHandle
linkName
linkLifetimeScope
initWithPseudonym:publicKey:groupUUID:originatorHandle:creationDate:expirationDate:invitedMemberHandles:locallyCreated:linkName:linkLifetimeScope:
hasGeneratorDescriptor
generatorDescriptor
hasGeneratorID
hasGeneratorVersion
generatorID
generatorVersion
initWithIdentifier:revision:handle:
initWithGroupUUID:originator:pseudonym:publicKey:
hasIsActivated
isActivated
setActivated:
setLinkLifetimeScope:
setCreationDate:
setExpirationDate:
setInvitedHandles:
hasPrivateKey
privateKey
setPrivateKey:
hasLinkName
setName:
hasGroupUUIDString
groupUUIDString
hasOriginatorHandle
originatorHandle
setPseudonym:
setLinkName:
setGroupUUIDString:
setOriginatorHandle:
invitedMemberHandles
arrayWithCapacity:
tuConversationLinkDescriptor
T@"TUConversationLink",R,N
T@"TUConversationLinkDescriptor",R,N
T@"NSUUID",R,N
T@"TUHandle",R,N
initWithCapacity:
numberWithDouble:
numberWithBool:
addInvitedHandles:
invitedHandlesCount
clearInvitedHandles
invitedHandlesAtIndex:
setGeneratorDescriptor:
invitedHandlesType
hasPseudonym
setCreationDateEpochTime:
setHasCreationDateEpochTime:
setPseudonymExpirationDateEpochTime:
setHasPseudonymExpirationDateEpochTime:
setIsActivated:
setHasIsActivated:
setHasLinkLifetimeScope:
hasLinkLifetimeScope
linkLifetimeScopeAsString:
StringAsLinkLifetimeScope:
_creationDateEpochTime
_pseudonymExpirationDateEpochTime
_generatorDescriptor
_groupUUIDString
_invitedHandles
_linkLifetimeScope
_linkName
_originatorHandle
_privateKey
_pseudonym
_isActivated
T@"NSString",&,N,V_pseudonym
T@"NSData",&,N,V_privateKey
T@"NSMutableArray",&,N,V_invitedHandles
Td,N,V_creationDateEpochTime
T@"NSString",&,N,V_groupUUIDString
T@"CSDMessagingHandle",&,N,V_originatorHandle
Td,N,V_pseudonymExpirationDateEpochTime
TB,N,V_isActivated
T@"CSDMessagingConversationLinkGeneratorDescriptor",&,N,V_generatorDescriptor
T@"NSString",&,N,V_linkName
Ti,N,V_linkLifetimeScope
isEqualToString:
idsDestination
isLightweightMember
destinationWithStringURI:isLightWeight:
value
IDSFormattedDestinationID
audioVideoMode
destinationWithTUConversationMember:
destinationWithTUConversationParticipant:
callStateController
relayMessagingController
callController
sharedInstance
_allCalls
allCalls
setCallStateController:
_callStateController
T@"CSDCallStateController",&,N,V_callStateController
T@"CSDRelayMessagingController",R,N
T@"CSDCallController",R,N
T@"NSArray",R,N
initWithCallCenterObserver:
setTriggers:
setDelegate:
_updateCurrentOrientationValue
setOrientationEventsEnabled:
setPassiveOrientationEvents:
defaultCenter
removeObserver:
dealloc
accelerometer
currentDeviceOrientation
setCurrentOrientation:
provider
isSystemProvider
isVideo
callStatus
callCenterObserver
callContainer
currentVideoCalls
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
accelerometer:didAccelerateWithTimeStamp:x:y:z:eventType:
accelerometer:didChangeDeviceOrientation:
callCenterObserver:callChanged:
callsChangedForCallCenterObserver:
setCallCenterObserver:
currentOrientation
_accelerometer
_callCenterObserver
_currentOrientation
T@"<CSDCallCenterObserver>",&,N,V_callCenterObserver
Tq,N,V_currentOrientation
T@"BKSAccelerometer",R,N,V_accelerometer
sharedInstanceWithQueue:
initWithQueue:
strongToStrongObjectsMapTable
handleCallStatusChanged:
addObserver:selector:name:object:
handleSessionStateChanged:
beginTransactionIfNecessaryForObject:withReason:
endTransactionIfNecessaryForObject:
queue
openTransactions
objectForKey:
stringByAppendingFormat:
UTF8String
removeObjectForKey:
object
status
state
T@"CSDTransactionManager",R,N
_openTransactions
_queue
T@"NSMapTable",R,N,V_openTransactions
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
initWithFormat:arguments:
simulateCrashReportWithReason:pid:code:
simulateCrashReportFromPID:withKillCode:usingReasonWithFormat:
simulateCrashReportWithFormat:
bundleIdentifier
invalidate
name
initWithBundleIdentifier:flags:reason:name:withHandler:
setProcessAssertion:
processAssertionNameForBundleIdentifier:
initWithBundleIdentifier:flags:reason:name:
processAssertionWithBundleIdentifier:
initWithBundleIdentifier:
acquireWithCompletionHandler:
processAssertion
_bundleIdentifier
_processAssertion
T@"BKSProcessAssertion",&,N,V_processAssertion
T@"NSString",R,C,N,V_bundleIdentifier
initWithClientUUID:serialQueue:
startedCapturingLocalVideo:
stoppedCapturingLocalVideo:
conferenceProvider
setState:
setConfiguration:
conferenceProviderCreationBlock
configuration
clientUUID
setConferenceProvider:
deviceRole
reportingHierarchyToken
initializeNewCallWithDeviceRole:reportingHierarchyToken:
requiresInviteDictionary
localPortraitAspectRatio
localLandscapeAspectRatio
setLocalPortraitAspectRatio:localLandscapeAspectRatio:
setLocalInviteDictionary:
_sendDelegateFinishedPreparing
_setEndedWithReason:error:
remoteInviteDictionary
callID
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
isCaller
capabilities
socket
startConnectionAsCaller:capabilities:socket:error:
destination
startConnectionAsCaller:remoteInviteDictionary:capabilities:destination:error:
date
timeIntervalSince1970
_setUpDidStartTimeout
_stop
capturingLocalVideo
stop
setCapturingLocalVideo:
cancel
sendData:
setPeerReportingIdentifier:sessionIdentifier:
setEndedReason:
setEndedError:
_sendDelegateEndedWithReason:error:
inputAudioPowerSpectrumToken
outputAudioPowerSpectrumToken
setRemoteInviteDictionary:
setCaller:
setDateStartedConnecting:
setDateConnected:
setDateEnded:
_isMuted
isMicrophoneMuted
setMicrophoneMuted:
_sendDelegateMutedChanged
_isSendingAudio
isAudioPaused
setAudioPaused:
isSendingAudio
_isSendingAudioData
setSendingAudio:
_isSendingVideo
_isSendingVideoExpected
boolValue
isVideoPaused
setVideoPaused:
setSendingVideoExpected:
isVideoPausedToStart
setIsVideoPausedToStart:
updateCapabilities:
setCapabilities:
setRemoteVideoPresentationSize:
setRemoteVideoPresentationState:
connectionTimeout
setDeviceRole:
delegate
delegateQueue
conferenceFinishedPreparing:
_performDelegateCallback:
conferenceStarted:
conference:endedWithReason:error:
connectionClosedForConference:
mutedChangedForConference:
sendingAudioChangedForConference:
receivedFirstRemoteFrameForConference:
remoteVideoPausedForConference:
conference:remoteMediaStalled:
conference:inputFrequencyLevelChangedTo:
conference:outputFrequencyLevelChangedTo:
conference:inputLevelChangedTo:
conference:outputLevelChangedTo:
conference:changedBytesOfDataUsed:
conference:didReceiveData:forCallID:
code
_sendDelegateStarted
_endedReasonForDidStopError:error:
objectForKeyedSubscript:
integerValue
_sendDelegateBytesOfDataUsageChanged:
_sendDelegateConnectionClosed
_sendDelegateInputFrequencyLevelChanged:
_sendDelegateOutputFrequencyLevelChanged:
_sendDelegateInputLevelChanged:
_sendDelegateOutputLevelChanged:
_sendDelegateSendingAudioChanged
setHasReceivedFirstRemoteFrame:
_sendDelegateReceivedFirstRemoteFrame
setRemoteVideoPaused:
_sendDelegateRemoteVideoPaused
_sendDelegateRemoteMediaStalled:
_sendDelegateReceivedData:forCallID:
conferenceProvider:didStartSession:error:
conferenceProvider:didStopWithError:callMetadata:
connectionClosedForConferenceProvider:
serverDiedForConferenceProvider:
conferenceProvider:updateInputFrequencyLevel:
conferenceProvider:updateOutputFrequencyLevel:
conferenceProvider:updateInputLevel:
conferenceProvider:updateOutputLevel:
conferenceProvider:didPauseAudio:error:
conferenceProvider:didPauseVideo:error:
conferenceProviderReceivedFirstRemoteFrame:
conferenceProvider:remoteVideoPaused:
conferenceProvider:remoteMediaStalled:
conferenceProvider:didReceiveData:forCallID:
prepareWithConfiguration:
startConnectionWithTransport:
setRemoteIDSDestinationURI:crossDeviceIdentifier:
setDelegateQueue:
localInviteDictionary
setConnectionTimeout:
endedReason
endedError
dateStartedConnecting
dateConnected
dateEnded
isMuted
setMuted:
isSendingAudioData
setSendingAudioData:
hasReceivedFirstRemoteFrame
isSendingVideo
setSendingVideo:
isRemoteVideoPaused
remoteVideoPresentationSize
remoteVideoPresentationState
T@"<CSDAVConferenceDelegate>",W,N
T@"NSObject<OS_dispatch_queue>",&,N
T@"NSDictionary",R,C,N
T@"NSDictionary",C,N
Tq,R,N
caller
TB,N,GisCaller
Td,N
Ti,N
Ti,R,N
T@"NSError",R,N
T@"NSDate",R,N
muted
TB,N,GisMuted
sendingAudio
TB,N,GisSendingAudio
sendingAudioData
TB,N,GisSendingAudioData
sendingVideo
TB,N,GisSendingVideo
remoteVideoPaused
TB,R,N,GisRemoteVideoPaused
T{CGSize=dd},N
TI,N
isSendingVideoExpected
setQueue:
setConferenceProviderCreationBlock:
_hasReceivedFirstRemoteFrame
_remoteVideoPaused
_capturingLocalVideo
_state
_remoteVideoPresentationState
_delegate
_delegateQueue
_connectionTimeout
_dateConnected
_dateEnded
_dateStartedConnecting
_sendingVideoExpected
_localInviteDictionary
_endedReason
_endedError
_configuration
_conferenceProvider
_conferenceProviderCreationBlock
_remoteVideoPresentationSize
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSDictionary",C,N,V_localInviteDictionary
Ti,N,V_state
Tq,N,V_endedReason
T@"NSError",&,N,V_endedError
T@"NSDate",&,N,V_dateStartedConnecting
T@"NSDate",&,N,V_dateConnected
T@"NSDate",&,N,V_dateEnded
TB,N,V_hasReceivedFirstRemoteFrame
TB,N,GisRemoteVideoPaused,V_remoteVideoPaused
TB,N,V_capturingLocalVideo
T@"CSDAVConferenceConfiguration",&,N,V_configuration
T@"<CSDAVConferenceProvider>",&,N,V_conferenceProvider
T@?,C,N,V_conferenceProviderCreationBlock
sendingVideoExpected
T@"NSNumber",&,N,GisSendingVideoExpected,V_sendingVideoExpected
T@"<CSDAVConferenceDelegate>",W,N,V_delegate
T@"NSObject<OS_dispatch_queue>",&,N,V_delegateQueue
Td,N,V_connectionTimeout
T{CGSize=dd},N,V_remoteVideoPresentationSize
TI,N,V_remoteVideoPresentationState
setClientUUID:
setReportingHierarchyToken:
setRequiresInviteDictionary:
setLocalLandscapeAspectRatio:
setLocalPortraitAspectRatio:
_caller
_requiresInviteDictionary
_capabilities
_clientUUID
_reportingHierarchyToken
_remoteInviteDictionary
_localLandscapeAspectRatio
_localPortraitAspectRatio
TB,N,GisCaller,V_caller
T@"VCCapabilities",&,N,V_capabilities
T@"NSUUID",&,N,V_clientUUID
T@"RTCSecureHierarchyToken",&,N,V_reportingHierarchyToken
TB,N,V_requiresInviteDictionary
T@"NSDictionary",C,N,V_remoteInviteDictionary
T{CGSize=dd},N,V_localLandscapeAspectRatio
T{CGSize=dd},N,V_localPortraitAspectRatio
initWithDictionaryRepresentation:
UUID
initWithHandoffIdentifier:
setOutgoing:
initWithType:value:
setRemoteHandle:
setContext:
mutableCopy
context
isOutgoing
setObject:forKeyedSubscript:
remoteHandle
initWithHandoffActivityUserInfo:
handoffActivityUserInfo
providerIdentifierForHandoffActivityUserInfo:
setAvcData:
setAssociation:
hasHandle
hasAvcData
setIsMomentsAvailable:
setHasIsMomentsAvailable:
hasIsMomentsAvailable
setIsScreenSharingAvailable:
setHasIsScreenSharingAvailable:
hasIsScreenSharingAvailable
setIsGondolaCallingAvailable:
setHasIsGondolaCallingAvailable:
hasIsGondolaCallingAvailable
setIsMirageAvailable:
setHasIsMirageAvailable:
hasIsMirageAvailable
setIsLightweight:
setHasIsLightweight:
hasIsLightweight
setSharePlayProtocolVersion:
setHasSharePlayProtocolVersion:
hasSharePlayProtocolVersion
setOptions:
setHasOptions:
hasOptions
setIsGFTDowngradeToOneToOneAvailable:
setHasIsGFTDowngradeToOneToOneAvailable:
hasIsGFTDowngradeToOneToOneAvailable
setGuestModeEnabled:
setHasGuestModeEnabled:
hasGuestModeEnabled
hasAssociation
setIsUPlusNDowngradeAvailable:
setHasIsUPlusNDowngradeAvailable:
hasIsUPlusNDowngradeAvailable
avMode
setAvMode:
setHasAvMode:
hasAvMode
avModeAsString:
StringAsAvMode:
avcData
isMomentsAvailable
isScreenSharingAvailable
isGondolaCallingAvailable
isMirageAvailable
isLightweight
sharePlayProtocolVersion
options
isGFTDowngradeToOneToOneAvailable
guestModeEnabled
association
isUPlusNDowngradeAvailable
_association
_avMode
_avcData
_handle
_options
_sharePlayProtocolVersion
_guestModeEnabled
_isGFTDowngradeToOneToOneAvailable
_isGondolaCallingAvailable
_isLightweight
_isMirageAvailable
_isMomentsAvailable
_isScreenSharingAvailable
_isUPlusNDowngradeAvailable
T@"CSDMessagingHandle",&,N,V_handle
T@"NSData",&,N,V_avcData
TB,N,V_isMomentsAvailable
TB,N,V_isScreenSharingAvailable
TB,N,V_isGondolaCallingAvailable
TB,N,V_isMirageAvailable
TB,N,V_isLightweight
TI,N,V_sharePlayProtocolVersion
TI,N,V_options
TB,N,V_isGFTDowngradeToOneToOneAvailable
TB,N,V_guestModeEnabled
T@"CSDMessagingConversationParticipantAssociation",&,N,V_association
TB,N,V_isUPlusNDowngradeAvailable
Ti,N,V_avMode
handleType
messagingHandleTypeFor:
setHandleType:
notificationStyles
setNotificationStyles:
hasHandleType
hasNotificationStyles
tuHandleType
initWithHandleType:notificationStyles:
T@"TUConversationInvitationPreference",R,N
protoProtocolVersion
setProtoProtocolVersion:
protoWantsVideo
setProtoWantsVideo:
protoSenderMuteUplink
setProtoSenderMuteUplink:
protoMomentsV2Available
setProtoMomentsV2Available:
protoShouldSuppressInCallUI
setProtoShouldSuppressInCallUI:
setProtocolVersion:
protocolVersion
wantsVideo
setWantsVideo:
senderMuteUplink
setSenderMuteUplink:
setMomentsAvailable:
shouldSuppressInCallUI
setShouldSuppressInCallUI:
addProtocolVersion
momentsAvailable
TB,N,GisMomentsAvailable
initWithQueue:featureFlags:
callStatusChanged:
callContinuityChanged:
shouldSuppressRingtoneChanged:
callStartedConnecting:
callConnected:
callIsUplinkMutedChanged:
callIsSendingVideoChanged:
providerManager
addDelegate:queue:
conversationManager
updateCallHandoffRegistration
updateAppHistoryActivityForCall
updateHandoffActivityState
updateSuppressRingtoneActivityListeningState
removeDelegate:
supportsPrimaryCalling
activityCommunicator
stopListeningForActivityType:dynamicIdentifier:
providers
handoffIdentifiers
listenForActivityType:dynamicIdentifier:
currentCalls
firstObject
isHostedOnCurrentDevice
isEndpointOnCurrentDevice
handoffDynamicIdentifier
activityWithType:dynamicIdentifier:userInfo:
handoffActivity
endHandoffActivity
broadcastActivity:
setHandoffActivity:
stopBroadcastingActivity:
wasDeclined
startSuppressRingtoneActivityBroadcastingForCall:
broadcastActivity:withTimeout:shouldPrioritize:
shouldSuppressRingtone
callPassingTest:
featureFlags
conversationHandoffEnabled
isDefaultProvider
queuedActivitiesOfType:
localParticipantIdentifier
tu_conversationHandoffDynamicIdentifierWithGroupUUID:participantIdentifier:uplinkMuted:sendingVideo:
dynamicIdentifier
containsString:
isFaceTimeProvider
disconnectedReason
handoffRecipientParticipant
activeConversations
callGroupUUID
unsignedLongLongValue
allConversationHandoffDynamicIdentifierPossibilitiesForGroupUUID:participantIdentifier:
isAnyOtherAccountDeviceActive
activeRemoteParticipants
isLocalAccountHandle
unionSet:
anyObject
containsObject:
stopListeningForActivityType:matchingDynamicIdentifierSubstring:
arrayWithObjects:count:
setWithArray:
currentAudioAndVideoCalls
localizedLabel
isoCountryCode
displayName
dictionaryWithCapacity:
appHistoryActivityWithTitle:subtitle:keywords:userInfo:
startSuppressRingtoneActivityBroadcastingIfNecessaryForCallWithStatusChange:
processStatusChangeAsHandedOffIfNecessaryForCall:
ringtoneSuppressedRemotely
updateAudioVideoHandoffPreferencesForCall:
isConversation
isUplinkMuted
updateHandoffAdvertisementForConversation:fromOldConversation:uplinkMuted:sendingVideo:
componentsSeparatedByString:
lastObject
audioAndVideoCallsWithStatus:
suppressRingtoneDueToRemoteSuppression
tu_handoffEligibility
setOriginatingDeviceType:
postNotificationName:object:userInfo:
postNotificationName:object:
updateHandoffRegistrationForConversation:fromOldConversation:
deregisterHandoffIdentifiersForConversation:
providersChangedForProviderManager:
receivedBroadcastedActivityType:dynamicIdentifier:originatingDeviceType:
stoppedReceivingActivityType:dynamicIdentifier:
conversationsChangedForConversationManager:
conversationManager:stateChangedForConversation:
conversationManager:stateChangedForConversation:fromOldConversation:
conversationManager:letMeInRequestStateChangedForConversation:
conversationManager:letMeInRequestStateChangedForConversation:fromOldConversation:
conversationManager:localVideoToggledForConversation:
conversationManager:localVideoToggledForConversation:fromOldConversation:
conversationManager:remoteMembersChangedForConversation:
conversationManager:remoteMembersChangedForConversation:fromOldConversation:
conversationManager:pendingMembersChangedForConversation:
conversationManager:pendingMembersChangedForConversation:fromOldConversation:
conversationManager:kickedMembersChangedForConversation:
conversationManager:kickedMembersChangedForConversation:fromOldConversation:
conversationManager:rejectedMembersChangedForConversation:
conversationManager:rejectedMembersChangedForConversation:fromOldConversation:
conversationManager:otherInvitedHandlesChangedForConversation:
conversationManager:otherInvitedHandlesChangedForConversation:fromOldConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:
conversationManager:activitySessionsChangedForConversation:
conversationManager:activitySessionsChangedForConversation:fromOldConversation:
conversationManager:oneToOneModeChangedForConversation:
conversationManager:oneToOneModeChangedForConversation:fromOldConversation:
conversationManager:avModeChangedForConversation:
conversationManager:avModeChangedForConversation:fromOldConversation:
conversationManager:removedActiveConversation:
conversationManager:addedActiveConversation:
conversationManager:didChangeActivatedLinks:
conversationManager:linkChangedForConversation:
conversationManager:linkChangedForConversation:fromOldConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:fromOldConversation:
conversationManager:conversation:requestedScreenShareForParticipant:
serverDisconnectedForConversationManager:
conversationManager:migratingFromConversation:toConversation:
conversationManager:conversation:receivedActivitySessionEvent:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
conversationManager:changedActivityAuthorizationForBundleIdentifier:
conversationManager:conversation:participant:addedNotice:
conversationManager:conversation:addedMembersLocally:
conversationManager:conversation:buzzedMember:
conversationManager:conversationUpdatedMessagesGroupName:
conversationManager:conversationUpdatedMessagesGroupName:fromOldConversation:
conversationManager:conversation:updatedMessagesGroupPhoto:
conversationManager:conversationUpdatedMessagesGroupUUID:
conversationManager:updatedIncomingPendingConversations:
conversationManager:trackedPendingMember:forConversationLink:
conversationManager:conversation:launchStateChanged:forActivitySession:
conversationManager:remoteScreenShareAttributesChanged:isLocallySharing:
conversationManager:remoteScreenShareEndedWithReason:
conversationManager:ignoreLMIRequestsChangedForConversation:
conversationManager:conversation:didChangeStateForActivitySession:
conversationManager:conversation:didChangeSceneAssociationForActivitySession:
conversationManager:sharePlayAvailableChanged:
conversationManager:screenSharingAvailableChanged:
conversationManager:handoffEligibilityChangedForConversation:
conversationManager:handoffEligibilityChangedToConversation:fromPreviousConversation:
conversationManager:systemActivitySessionsChangedForConversation:
conversationManager:systemActivitySessionsChangedForConversation:fromOldConversation:
T@"CSDUserActivityManager",R,N
setActivityCommunicator:
_activityCommunicator
_handoffActivity
_featureFlags
T@"CSDUserActivityCommunicator",&,N,V_activityCommunicator
T@"CSDUserActivity",&,N,V_handoffActivity
T@"TUFeatureFlags",R,N,V_featureFlags
tu_defaults
silenceUnknownCallersEnabled
maxJunkLevel
isTelephonyProvider
uniqueProxyIdentifier
length
isUnknownCall:
isKnownCaller
setIsKnownCaller:
isSilenceUnknownCallersEnabled
junkConfidence
containsRestrictedHandle:
containsOutgoingRestrictedHandle:forBundleIdentifier:performSynchronously:
containsRecentsRestrictedHandle:
filterStatusForAddresses:withBundleIdentifier:
isUnknownAddress:normalizedAddress:forBundleIdentifier:
shouldFilterIncomingCall:
shouldRestrictAddresses:forBundleIdentifier:performSynchronously:
willRestrictAddresses:forBundleIdentifier:
csd_UUIDv5ForString:
csd_UUIDv5
messageSendTime
typeString
appendFormat:
block
reportingController:statusChangedForCall:totalCallCount:
reportingController:callEnteredForeground:
allCallsBackgroundedForReportingController:
reportingController:relayMessageReceived:fromPairedDevice:
reportingController:transactionGroupCompleted:
reportingController:providerFailedWithAction:forCall:
reportingController:capturedMomentsUsageReport:
reportingController:pickedRoute:forCall:
reportingController:timedOutPickingRoute:forCall:
reportingController:callUUID:withUserScore:
reportingController:addedActiveConversation:
reportingController:stateChangedForConversation:
reportingController:letMeInRequestStateChangedForConversation:
reportingController:removedActiveConversation:
reportingController:activeRemoteParticipantsChangedForConversation:
reportingController:remoteMembersChangedForConversation:
reportingController:AVCBlobRecoveryStartedForConversation:
reportingController:AVCBlobRecoveryTimedOutForConversation:
reportingController:receivedIDSReports:forConversation:
reportingController:receivedIDSReports:forSessionWithUUID:
reportingController:receivedIDSChat:
reportingController:receivedGroupActivitesReports:forConversation:
reportingController:messageRetryStartedForConversation:
reportingController:messageRetryFailedForConversation:
reportingController:messageRetrySucceededForConversation:
reportingController:avcBlobRequestMessageRetryStartedForConversation:
reportingController:avcBlobRequestMessageRetryFailedForConversation:
reportingController:avcBlobRequestMessageRetrySucceededForConversation:
reportingController:receivedReports:forConversation:
reportingController:receivedChat:
reportingController:receivedReports:forSessionWithUUID:
reportingController:voipAppFailedToPostIncomingCall:
reportingController:voipAppBecameDisabledFromLaunching:
reportingController:voipPushDroppedOnTheFloor:
reportingController:createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:
reportingController:createConversationReportingSessionForConversation:
reportingController:didEndSession:startDate:endDate:
reportingController:addedActivatedLink:
reportingController:receivedLetMeInRequestForConversation:
reportingController:sentLetMeInResponseForConversation:isApproved:
dataSource
setDataSource:
T@"<CSDReporterDataSource>",W,N
setBlock:
_block
T@?,C,N,V_block
routeController
initWithQueue:routeController:callCenterObserver:interfaceOrientationObserver:proximitySensorObserver:voiceOverObserver:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
orientation
setInterfaceOrientationPortrait:
setHandler:
activeInterfaceOrientationWithCompletion:
addDelegate:
voiceOverObserver
isEnabled
shouldRouteToSpeakerWithProximity
updateProximitySensorState
setProximitySensorEnabled:
proximityChangeHandler
updateVoiceOverRoutingForCurrentProximityState
proximityDetectionMode
setProximityDetectionMode:
boolForKey:
isInterfaceOrientationPortrait
isProximitySensorCovered
anyCallPassesTest:
isRTT
isTTY
supportsCurrentPlatform
pickedRoute
isReceiver
isSpeaker
voiceOverRunningDeterminationHandler
shouldEnableProximitySensor
receiverRoute
pickRoute:
voiceOverTouchShouldRouteToSpeakerDeterminationHandler
speakerRoute
setProximitySensorCovered:
donateBiomeSignalIfNecessary
initWithIdentifier:context:
donateSignalWithCompletion:
proximitySensorObserver:didChangeCovered:
routesChangedForRouteController:
initWithQueue:proximitySensorObserver:voiceOverObserver:
isProximitySensorEnabled
interfaceOrientationObserver
proximitySensorObserver
setVoiceOverRunningDeterminationHandler:
setVoiceOverTouchShouldRouteToSpeakerDeterminationHandler:
setProximityChangeHandler:
_interfaceOrientationPortrait
_proximitySensorCovered
_proximityDetectionMode
_routeController
_interfaceOrientationObserver
_proximitySensorObserver
_voiceOverObserver
_voiceOverRunningDeterminationHandler
_voiceOverTouchShouldRouteToSpeakerDeterminationHandler
_proximityChangeHandler
T@"<CSDCallCenterObserver>",R,N,V_callCenterObserver
T@"TURouteController",R,N,V_routeController
T@"<CSDOrientationObserver>",R,N,V_interfaceOrientationObserver
T@"<CSDProximitySensorObserver>",R,N,V_proximitySensorObserver
T@"<CSDVoiceOverObserver>",R,N,V_voiceOverObserver
interfaceOrientationPortrait
TB,N,GisInterfaceOrientationPortrait,V_interfaceOrientationPortrait
Ti,N,V_proximityDetectionMode
proximitySensorCovered
TB,N,GisProximitySensorCovered,V_proximitySensorCovered
proximitySensorEnabled
TB,R,N,GisProximitySensorEnabled
T@?,C,N,V_voiceOverRunningDeterminationHandler
T@?,C,N,V_voiceOverTouchShouldRouteToSpeakerDeterminationHandler
T@?,C,N,V_proximityChangeHandler
conferenceID
hasPrefix:
substringFromIndex:
GUID
dataUploaded
dataDownloaded
initWithIDSChat:
setFaceTimeTransportType:
isRemoteMomentsAvailable
setRemoteMomentsAvailable:
otherIMHandle
initWithDestinationID:
setSupportsHolding:
setSupportsGrouping:
setSupportsUngrouping:
setSupportsDTMF:
setRequiresInCallSounds:
setCrossDeviceIdentifier:
setAudioInterruptionProvider:
setAudioInterruptionOperationMode:
setAudioCategory:
updatePropertiesForVideo:
remoteMembers
setRemoteParticipantHandles:
remoteParticipantHandles
setParticipantGroupUUID:
isLocallyCreated
isOneToOneModeEnabled
setConversation:
isScreenEnabled
sharePlaySupported
activitySessions
isUsingAirplay
activity
isScreenSharingActivity
setMediaPlaybackOnExternalDevice:
setMixesVoiceWithMedia:
setIgnoresBluetoothDeviceUID:
selectiveSharingSessionUUID
setWindowUUID:
setScreenShareAttributes:
numberWithInteger:
stringValue
numberValue
setHasVideo:
hasVideo
setAudioMode:
initWithFaceTimeIDSChat:
initWithIMAVChat:
initWithTUConversation:
faceTimeTransportType
localizedHandoffRecipientDeviceCategory
setLocalizedHandoffRecipientDeviceCategory:
setHandoffRecipientParticipant:
Tq,N
remoteMomentsAvailable
TB,R,N,GisRemoteMomentsAvailable
T@"NSString",C,N
T@"NSNumber",C,N
orderedSet
facetimeService
callService
supportsDisplayingFaceTimeAudioCalls
supportsDisplayingFaceTimeVideoCalls
daemonConnected:
handleChatStateChanged:
handleChatFirstRemoteFrameArrived:
handleChatInvitationSent:
handleChatCallInfoChangedNotification:
handleChatConferenceIDChangedNotification:
handleChatConferenceMetadataUpdated:
handleChatMayRequireBreakBeforeMakeChanged:
handleChatInFrequencyChangedNotification:
handleChatOutFrequencyChangedNotification:
setIMAVCapabilities:toCaps:
setupIMAVController
setBlockIncomingInvitationsDuringCall:
setBlockMultipleIncomingInvitations:
_requestPendingInvites
requestPendingACInvitations
requestPendingVCInvitations
cachedChats
chatWithUUID:
removeObject:
_endChatWithUUID:withEndedReason:
endChatWithReason:
imAccountForActionBlock
isRegistered
imHandleWithID:
isRelay
callUUID
initOutgoingTo:isVideo:isRelayed:GUID:
setConnectionTimeoutTime:
faceTimeProvider
isUpgrade
setInvitationTimeoutTime:
_setLocalLandscapeAspectRatio:localPortraitAspectRatio:forChat:
invite:additionalPeers:excludingPushTokens:
registerChat:
isComplete
reportCallWithUUID:updated:
fulfill
faceTimeDemuxerDelegate
providerDelegate:callWithUUID:startedConnectingAtDate:
reportOutgoingCallWithUUID:connectedAtDate:
pendingCallActionsOfClass:withCallUUID:
fulfillWithDateConnected:
fail
trace:
_updateProviderForConnectingChat:
_updateProviderForConnectedChat:
_updateProviderForEndedChat:
failureContextForChat:
providerDelegate:callWithUUID:endedAtDate:withReason:failureContext:
setFailureReason:
supportsWLAN
allowAnyNetwork
supportsNonWiFiCalling
supportsNonWiFiFaceTime
localizedStringForKey:value:table:
setTitle:
setMessage:
setHasWiFiSettingsRemediation:
setHasCellularSettingsRemediation:
setHasDateAndTimeSettingsRemediation:
setHasLocationSettingsRemediation:
destinationIdIsPhoneNumber
setProviderErrorCode:
isLocalParticipant
avChat
reportOutgoingCallWithUUID:sentInvitationAtDate:
_activeCallID
setVideoStreamToken:
reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
mayRequireBreakBeforeMake
setMayRequireBreakBeforeMake:
inFrequencyLevel
reportCallWithUUID:changedFrequencyData:forDirection:
outFrequencyLevel
declineInvitationWithResponse:
reportNewIncomingCallWithUUID:update:completion:
setProvider:
_setUpListeners
providerDidBegin
endChat
downgradeToAudio
setIsSendingVideo:
acceptInvitation
isOnHold
setIsSendingAudio:
videoPresentationSize
videoPresentationState
IMAVChatRemoteVideoPresentationStateFromCXVideoPresentationState:
isRelaying
setRelayed:
setMute:
invitedToIMAVChat:
createdOutgoingIMAVChat:
inviteFailedFromIMHandle:reason:
providerDidReset:
providerDidBegin:
provider:executeTransaction:
provider:performStartCallAction:
provider:performAnswerCallAction:
provider:performEndCallAction:
provider:performSetHeldCallAction:
provider:performSetMutedCallAction:
provider:performSetGroupCallAction:
provider:performPlayDTMFCallAction:
provider:timedOutPerformingAction:
provider:didActivateAudioSession:
provider:didDeactivateAudioSession:
provider:performSendMMIOrUSSDCodeAction:
provider:performJoinCallAction:
provider:performSetTTYTypeCallAction:
provider:performSetSendingVideoCallAction:
provider:performSetSharingScreenCallAction:
provider:performSetScreenShareAttributesCallAction:
provider:performEnableVideoCallAction:
provider:performSetRelayingCallAction:
provider:performPullCallAction:
provider:performSetVideoPresentationSizeCallAction:
provider:performSetVideoPresentationStateCallAction:
isManagingCallWithUUID:
hasCallStartedConnectingWithUUID:
upgradeSessionUUIDForCallWithUUID:
endCallWithUUIDAsAnsweredElsewhere:
endCallWithUUIDAsDeclinedElsewhere:
endCallWithUUIDAsLocalHangup:
endCallWithUUID:
inviteIMAVPeersWithAction:tokensToExclude:joinCallActionToFulfill:
setFaceTimeDemuxerDelegate:
setProviderDidBegin:
setImAccountForActionBlock:
setCachedChats:
accessorLock
_accessorLock
_faceTimeDemuxerDelegate
_providerDidBegin
_imAccountForActionBlock
_provider
_cachedChats
T@"CXProvider",&,N,V_provider
T@"NSMutableOrderedSet",&,N,V_cachedChats
T{os_unfair_lock_s=I},R,N,V_accessorLock
T@"<CSDFaceTimeProviderDelegateManagerDelegate>",W,N,V_faceTimeDemuxerDelegate
T@?,C,N,V_providerDidBegin
T@?,C,N,V_imAccountForActionBlock
initWithSerialQueue:
callHistoryControllerClientXPCInterface
setRemoteObjectInterface:
callHistoryControllerServerXPCInterface
setExportedInterface:
setExportedObject:
setRequiredConnectionCapability:
setInterruptionHandler:
setInvalidationHandler:
clientManager
asynchronousExportedObjectProxy
setAsynchronousServer:
synchronousExportedObjectProxy
setSynchronousServer:
startListeningOnMachServiceWithName:
notifyClientsToConnectIfNecessary
addLocalClientObject:
removeLocalClientObject:
callHistoryController
recentCallsDeleted:
allCallHistoryDeleted
registerClient:
unregisterClient:
initWithCallHistoryController:
clientsShouldConnectToken
setClientsShouldConnectToken:
_clientsShouldConnectToken
_callHistoryController
_clientManager
T@"CSDCallHistoryController",R,N,V_callHistoryController
T@"CSDClientManager",R,N,V_clientManager
Ti,N,V_clientsShouldConnectToken
initWithName:
faceTimeIMAccountCallerIDChanged:
callerID
account:aliasesChanged:
initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:activity:link:report:fromStorage:avMode:applicationController:featureFlags:systemStateObserver:
distantPast
initWithIdentifier:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:
createStagedActivitySessionForActivity:
setRemoteMembers:
pendingMembers
setOtherInvitedHandles:
array
newHierarchyTokenFromParentToken:
setReportingHierarchySubToken:
reportingHierarchySubToken
initWithTransportToken:delegate:queue:reportingHierarchyToken:oneToOneModeEnabled:avMode:report:
requestActiveParticipants
unknownProvider
addObserver:withQueue:
localMember
setWithObject:
addRequiredCapabilities:requiredLackOfCapabilities:
messagesGroupUUID
hasReceivedLetMeInRequest
letMeInRequestState
ignoreLMIRequests
avcSessionToken
avcSessionIdentifier
hasJoined
isAudioEnabled
isVideoEnabled
kickedMembers
rejectedMembers
otherInvitedHandles
allObjects
componentsJoinedByString:
lightweightMembers
memberIdentifiers
activeLightweightParticipants
report
virtualParticipants
tuActivitySessions
tuSystemActivitySessions
handoffEligibility
splitSessionSecondary
localLightweightSecondaryMember
appendString:
setByAddingObjectsFromSet:
activeRemoteParticipantsByIdentifier
allValues
activeLightweightParticipantsByIdentifier
initWithUUID:groupUUID:provider:
setHasReceivedLetMeInRequest:
setLetMeInRequestState:
setMessagesGroupUUID:
setAvcSessionToken:
setAvcSessionIdentifier:
setAudioEnabled:
setVideoEnabled:
setScreenEnabled:
setLocallyCreated:
setHasJoined:
initiator
setInitiator:
setPendingMembers:
setKickedMembers:
setRejectedMembers:
setIgnoreLMIRequests:
messagesGroupName
setMessagesGroupName:
maxVideoDecodesAllowed
setMaxVideoDecodesAllowed:
setReport:
setLocalMember:
setLocalParticipantIdentifier:
localParticipantAssociation
setLocalParticipantAssociation:
isOneToOneHandoffOngoing
setOneToOneHandoffOngoing:
setHandoffEligibility:
setOneToOneModeEnabled:
setActivitySessions:
setSystemActivitySessions:
stagedActivitySession
setStagedActivitySession:
setVideo:
setVirtualParticipants:
setInvitationPreferences:
setLightweightMembers:
isFromStorage
setFromStorage:
failureContext
setConversationFailureContext:
setIsAnyOtherAccountDeviceActive:
isMirageEnabled
setMirageEnabled:
setWithCapacity:
tuConversationParticipant
aTVHandoff
setActiveRemoteParticipants:
setActiveLightweightParticipants:
supportedMediaTypes
setSupportedMediaTypes:
additionalVideoRepresentation
setAdditionalVideoRepresentation:
avcSession
sessionIdentifier
sessionToken
idsSession
isAudioReady
setRemoteMemberHandles:
localParticipantDataToSendToDestinationIDs:
initWithIdentifier:handle:avcData:
faceTimeInviteDemuxer
destinationIDsCanUseV2Blobs:
localParticipantDataWithVersion:
expanseEnabled
forceExpanseEnabled
_expanseEnabled
sharePlaySystemStateObserver
setActivitySessionManager:
virtualParticipantsByPluginName
remoteMemberHandles
destinationIdIsEmailAddress
setUplinkMuted:
expectedAudioEnabled
setExpectedAudioEnabled:
expectedVideoEnabled
expectedScreenEnabled
setExpectedVideoEnabled:
setScreenEnabled:attributes:
setExpectedScreenEnabled:
conversationChanged:
expectedVideoPaused
setExpectedVideoPaused:
expectedAudioPaused
setAudioPaused:forParticipantWithIdentifier:
setExpectedAudioPaused:
setRelaying:
localParticipant
setParticipantType:forLocalConversationParticipant:
avcSessionInProgress
setAvcSessionInProgress:
localParticipantType
conversation:didChangeLocalParticipant:
avLessSharePlayEnabled
expectedAdditionalParticipantRepresentation
setExpectedAdditionalParticipantRepresentation:
conversationOneToOneModeEnabled
destinationIdIsTemporary
updateLocalAspectRatiosForOneToOneModeEnabled:
isEquivalentToHandle:
kickMember:
activitySessionManager
setHandedOff:
faceTimeShowInCallUIURL
faceTimeShowSystemCallControlsURL
_launchApplicationsForActivitiesIfNecessary
presentationState
setPresentationState:
presentationRect
setPresentationRect:
setGridDisplayMode:
videoDeviceController
lightweightPrimary
lightweightPrimaryParticipantIdentifier
setSplitSessionSecondary:
setAudioVideoMode:
removeParticipant:
allowsVideo
allowsScreenSharing
addParticipant:withVideoEnabled:screenEnabled:
setServerProvidedParticipantIdentifiers:
setServerProvidedLightweightParticipantIdentifiers:
refreshActiveParticipantsList
serverBag
rebroadcastTimeThreshold
setRebroadcastTimeThreshold:
conversation:addedActiveParticipant:
_cancelInFlightAVCBlobRecoveryIfNecessary
activeParticipants
removeParticipantWithIdentifier:fromHandle:
supportsScreenSharing
audioRoutePolicyManager
isEqualToHandle:
leave
conversation:removedActiveParticipant:
uPlusNDowngrade
switchBackToOneToOneIfPossible
beginParticipantUpdates
videoQuality
visibility
prominence
spatialPosition
isInCanvas
participantIdentifier
setVideoQuality:visibility:prominence:spatialPosition:isInCanvas:forParticipantWithIdentifier:
commitParticipantUpdates
setCurrentParticipantPresentationContexts:
pluginName
updateVirtualParticipantIdentifier:
_registerPluginsIfNecessary
minusSet:
setLocalLightweightSecondaryMember:
removeParticipantsForMember:
removeActivitySessionIfNecessary
removeMembers:fromExistingMembers:activeParticipants:triggeredLocally:
addRemoteMembers:otherInvitedHandles:invitationPreferences:addingFromLetMeIn:triggeredLocally:
_allowMember:
joinedFromLetMeIn
memberHandlesAwaitingInvitesToLink
setValidationSource:
setLightweightPrimary:
setLightweightPrimaryParticipantIdentifier:
activitySessionWithCSDConversationActivitySession:fromConversation:forStorage:
activitySessionWithTUConversationActivitySession:fromConversation:forStorage:
setWithSet:
isJoined
localParticipantData
setScreenSharingAvailable:
setGondolaCallingAvailable:
gftDowngradeToOneToOne
setGftDowngradeToOneToOneAvailable:
setUPlusNDowngradeAvailable:
setMirageAvailable:
addMembers:toExistingMembers:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:requiredCapabilities:messagesGroupUUID:messagesGroupName:addingFromLetMeIn:triggeredLocally:highlightIdentifier:stagedActivitySession:avMode:
applicationLaunchPolicyManager
tuConversation
updateAllowedHandlesForConversation:
conversation:addedMembers:triggeredLocally:
trustedFromHandle
setTrustedFromHandle:
pendingMemberHandles
nickname
initWithHandle:nickname:
setPendingMemberHandles:
expirationDate
setInvitedMemberHandles:
leaveActivitySessionWithUUID:
presentSessionDismissalAlertForActivitySessionUUID:allowingCancellation:completionHandler:
removeActivitySessionWithUUID:usingHandle:
_launchApplicationForActivityIfNecessary:
updateScreenEnabledForRemoteParticipants:
postUserNotificationForUnsupportedScreenSharingActivity:alternateReponseHandler:
activityIdentifier
localBundleIDForActivityIdentifier:
setBundleIdentifier:
memberWithHandle:
isValidated
originator
setIsLightweightPrimaryInitiated:
isLightweightPrimaryInitiated
createActivitySessionWithTuActivitySession:
isLocallyInitiated
_launchApplicationDueToActivityCreation:
tuConversationActivitySession
setUsingAirplay:forActivitySessionWithUUID:
currentServerTimeDate
setTimestamp:
metadata
saveImageToDisk
initWithActivity:locallyInitiated:timestamp:isFirstJoin:
setStagedActivitySessionForActivitySession:
_launchApplicationsForActivitiesIfNecessary:
containsMemberWithHandle:
removeActivitySessionWithUUID:usingTerminatingHandle:
timestamp
compare:
_launchApplicationForActivityIfNecessary:shouldForeground:
allowSharePlay
applicationContext
isSystemActivity
shouldAutoLaunchAppForActivity:onConversation:
sendManualLaunchNeededEventWithActivitySession:
conversation:appLaunchState:forActivitySession:
permitJoin
launchAppForActivitySession:options:completion:
mainDisplay
bounds
avcSessionCreationBlock
localCapabilities
setLightweight:
isGreenTea
_reportConversationFailedWithProviderEndedReason:
_startIDSSessionWithContext:
participantAssociation
setupNewAVCSession:
setAvcSession:
wantsStagingArea
representsTransitionFromPending
continueHandoffAudioRouteForIdentifier:
setParticipantAssociation:
sendLocalParticipantData:
setAudioReady:
_startAVCSessionIfNecessary
_beginTimeoutForLeavingConversationWithReason:
setDownlinkMuted:forParticipantWithIdentifier:
stopSelectiveSharingSession
resetSessions
activeIDSDestination
conversation:sendDeclineMessageToParticipantDestination:
tu_firstObjectPassingTest:
pendingKickedMembersByIdentifier
removeRemoteMembers:triggeredLocally:
pendingAllowedMembers
allowMember:
setAudioAndVideoMuted:forParticipantWithIdentifier:
individualAudioVideoToggleEnabled
setAudioEnabled:forParticipantWithIdentifier:
setVideoEnabled:forParticipantWithIdentifier:
initWithHandle:
reducedInfoMembers:
isEqualToSet:
requiredCapabilities
requiredLackOfCapabilities
initWithIdentifier:handle:
stableBundleIdentifierForLocalBundleIdentifier:
dataUsingEncoding:
setIDSAliasingSalt:onContainer:
addAliasesToConversationContainer:withSalt:
virtualParticipantConfig
setIdsAliasingSalt:
setVirtualParticipantConfig:
unreliableMessengerConfig
setUnreliableMessengerConfig:
isSharePlayVersionCheckEnabled
numberWithUnsignedInteger:
maxRemoteMirageParticipants
integerForKey:
isInitiator
participantDestinationIDs
joinUsingContext:localParticipantAVCData:members:otherInvitedHandles:participantDestinationIDs:link:report:stagedActivitySession:
conversationDidTriggerJoin:
start
cleanUpIDSSessionState
_cancelTimeoutForLeavingConversation
restart
timeoutBlock
setTimeoutBlock:
sessionCleanupTimeout
activeParticipantDestinationsByIdentifier
inflightAVCBlobRecoveryBlocksByIdentifier
AVCBlobRecoveryGracePeriod
avcBlobRecoveryStartedForConversation:
avcBlobRecoveryTimedOutForConversation:
AVCBlobRecoveryTimeout
conversation:requestAVCBlobForParticipantDestination:completion:
allKeys
serverProvidedParticipantIdentifiers
isWaitingToPruneParticipants
setWaitingToPruneParticipants:
activeParticipantPruningTimeout
serverProvidedLightweightParticipantIdentifiers
participantRefreshBlock
setParticipantRefreshBlock:
activeParticipantRefreshDelay
setProviderEndedReason:
setFailureContext:
conversation:failedWithContext:
normalizedValue
caseInsensitiveCompare:
sortUsingSelector:
SHA1HexString
dictionaryWithObjects:forKeys:count:
registerPluginWithOptions:
switchBackToOneToOneIfPossibleUsingDelay:
downgradeToOneToOneAfterDelayBlock
setDowngradeToOneToOneAfterDelayBlock:
audioRoutesByParticipantIdentifier
continueHandoffAudioRouteNotification
setMemberIdentifiers:
setLocalParticipantAudioVideoMode:
createSelectiveSharingSessionIfNecessary
conversationConnectionDidStart:
setStreamToken:
setScreenToken:
setCaptionsToken:
conversationInvalidated:
_reportConversationFailedWithFailureReason:providerEndedReason:
activeLightweightParticipantDestinationsByIdentifier
normalizedHandleWithDestinationID:
setActiveIDSDestination:
setActiveParticipantDestinationsByIdentifier:
reviveOrInvalidateCachedConversationIfNecessary
_requestAVCBlobsIfNecessary
_pruneRemoteParticipantsIfNecessary
setActiveLightweightParticipantDestinationsByIdentifier:
broadcastLocalParticipantData
startAudio
setParticipantType:forRemoteConversationMemberDestinations:
idsReportsReceived:forConversation:
setKickMemberRetryCount:
initWithSet:
kickedParticipants
addRemoteMembers:otherInvitedHandles:triggeredLocally:
kickMemberRetryCount
maxKickMemberRetries
maxActiveParticipantFetchRetries
setPendingKickedMembersByIdentifier:
initWithIdentifier:pluginName:
addVirtualParticipant:
removeVirtualParticipant:
refreshDataCryptors
initWithData:
participantURI
_stripFZIDPrefix
csdConversationParticipant
addActiveParticipant:
userInfo
intValue
executeSessionDidStart
_errorToAVCProviderEndedReason:defaultProviderReason:
lastRebroadcastTime
timeIntervalSinceDate:
setLastRebroadcastTime:
_cleanUpFromAVCSessionFailure
screenShareAttributes
defaultAttributes
resetSelectiveSharingSessionContent
conversation:changedBytesOfDataUsed:
reconnect
conversation:updatedActiveParticipant:
allParticipantsSupportSharePlay
displaySharePlayUnableToStartAlert
conversation:updatedActiveParticipantWithScreenSharing:
resetNonScreenSharingSessions
currentParticipantPresentationContexts
updateParticipantPresentationContexts:
setAudioPriority:
setVideoPriority:
conversation:mediaPrioritiesChangedForParticipant:
setRemoteAudioEnabled:
conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
setRemoteVideoEnabled:
conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
setScreenEnabled:forParticipantWithIdentifier:
notificationDisplayInformationForAudioPolicyManager:activity:conversation:
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
setUsesNotificationCenter:
setRepresentedApplicationBundle:
response
switchToSpeakerRouteIfNecessary
addUserNotification:listener:completionHandler:
conversation:activitySessionChanged:
conversation:receivedActivitySessionEvent:
requestDataCryptorForTopic:completionHandler:
requestEncryptionKeyForParticipants:topic:
participantIDForAlias:salt:
remoteParticipantForIdentifier:
participantIDForAlias:salt:completion:
conversation:activityChangedOnSession:
didEndSession:startDate:endDate:
conversation:activitySessionRemoved:userOriginated:
activitySessionManager:activitySessionChanged:
conversation:didChangeStateForActivitySession:
conversation:didChangeSceneAssociationForActivitySession:
session:receivedActiveParticipantDestinationsByIdentifier:
session:receivedActiveLightweightParticipantDestinationsByIdentifier:
session:didJoinGroup:participantIdentifiers:error:
session:didLeaveGroupWithError:
sessionDidTerminate:
session:endedWithError:reason:
session:didReceiveLocalParticipantType:error:
session:didReceiveReport:
session:didReceiveKickedParticipantIDs:withCode:withType:isTruncated:
session:didRegisterPluginAllocationInfo:
session:didUnregisterPluginAllocationInfo:
sessionDidReceiveKeyUpdate:
session:didReceiveDataBlob:forParticipant:
activitySessionManager:activitySessionIsJoinable:
activitySessionManager:activityChangedOnSession:
activitySessionManager:receivedActivitySessionEvent:
activitySessionManager:fetchDataCryptorForTopic:completionHandler:
activitySessionManager:requestEncryptionKeysForParticipants:topicName:
activitySessionManager:localParticipantWithParticipantIdentifier:bundleIdentifier:
activitySessionManager:activeRemoteParticipantWithParticipantIdentifier:bundleIdentifier:
activitySessionManager:activeRemoteParticipantWithParticipantIdentifier:bundleIdentifier:completionHandler:
activitySessionManagerRequestedCallTypeStringForLogging:
activitySessionManager:sessionUnjoined:startDate:endDate:
activitySessionManager:requestForegroundPresentationForActivity:
activitySessionManager:activitySessionRemoved:userOriginated:
activitySessionManager:activitySessionStateChanged:oldState:
activitySessionManager:activitySessionAssociatedSceneChanged:
audioPolicyManager:sharePlayAllowedStateChanged:
session:didStart:error:
session:didDetectError:
session:didStopWithError:
session:changedLocalAudioEnabled:didSucceed:error:
session:changedLocalVideoEnabled:didSucceed:error:
session:changedScreenEnabled:didSucceed:error:
session:changedLocalAudioPaused:didSucceed:error:
session:changedLocalVideoPaused:didSucceed:error:
session:changedOneToOneModeEnabled:didSucceed:error:
session:changedBytesOfDataUsed:
session:changedAdditionalVideoRepresentation:didSucceed:error:
session:screenCaptureDidStart:withError:
serverDisconnectedForSession:
sessionShouldReconnect:
remoteParticipantWithIdentifier:updatedAudioEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedVideoEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedScreenEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedAudioEnabled:updatedVideoEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedAudioPaused:streamToken:
remoteParticipantWithIdentifier:didChangeAudioPriority:videoPriority:
remoteParticipantWithIdentifier:updatedRemoteAudioEnabled:
remoteParticipantWithIdentifier:updatedRemoteVideoEnabled:
remoteParticipantWithIdentifier:updatedAdditionalVideoRepresentation:
initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:activity:link:report:fromStorage:avMode:applicationController:
localConversationParticipantWithDataToSendToDestinationIDs:
setForceExpanseEnabled:
memberHandlesEligibleForLinkApproval
registerMessagesGroupAssociation
setConversationGridDisplayMode:
setParticipantAudioVideoMode:forParticipant:
updateMemberValidationSource:source:
updateMessagesGroupName:
addPendingMembers:triggeredLocally:
removePendingMembers:triggeredLocally:
setConversationLink:allowUpdate:
presentDismissalAlertForActivitySessionWithUUID:
createActivitySession:
setUsingAirplay:forActivitySessionUUID:
joinUsingContext:
setRemoteParticipantsDownlinkMuted:
isRepresentedByRemoteMembers:andLink:
capabilitySendMessageOptions
remoteParticipantForHandle:
remoteMemberForHandle:
addAliasesToConversationContainer:forBundleIdentifier:
_stableExpanseIdentifier
setParticipantType:forRemoteMemberDestinations:
isCaptioningEnable
setActiveLightweightParticipantsByIdentifier:
setKickedParticipants:
setPendingAllowedMembers:
setApplicationLaunchPolicyManager:
setAudioRoutePolicyManager:
setSharePlaySystemStateObserver:
setMemberHandlesAwaitingInvitesToLink:
setServerBag:
setAvcSessionCreationBlock:
setAudioRoutesByParticipantIdentifier:
_relaying
_fromStorage
_video
_hasReceivedLetMeInRequest
_locallyCreated
_hasJoined
_ignoreLMIRequests
_captioningEnabled
_waitingToPruneParticipants
_avcSessionInProgress
_forceExpanseEnabled
_memberIdentifiers
_UUID
_groupUUID
_link
_messagesGroupUUID
_letMeInRequestState
_localLightweightSecondaryMember
_initiator
_localMember
_remoteMembers
_lightweightMembers
_pendingMembers
_kickedMembers
_rejectedMembers
_otherInvitedHandles
_supportedMediaTypes
_stagedActivitySession
_messagesGroupName
_activitySessionManager
_report
_localParticipantAssociation
_handoffEligibility
_activeRemoteParticipantsByIdentifier
_activeLightweightParticipantsByIdentifier
_kickedParticipants
_idsSession
_avcSession
_expectedAudioEnabled
_expectedVideoEnabled
_expectedScreenEnabled
_expectedVideoPaused
_expectedAudioPaused
_expectedAdditionalParticipantRepresentation
_activeParticipantDestinationsByIdentifier
_activeLightweightParticipantDestinationsByIdentifier
_serverProvidedParticipantIdentifiers
_serverProvidedLightweightParticipantIdentifiers
_lastRebroadcastTime
_rebroadcastTimeThreshold
_videoDeviceController
_virtualParticipantsByPluginName
_faceTimeInviteDemuxer
_pendingKickedMembersByIdentifier
_pendingAllowedMembers
_kickMemberRetryCount
_currentParticipantPresentationContexts
_splitSessionSecondary
_applicationLaunchPolicyManager
_audioRoutePolicyManager
_sharePlaySystemStateObserver
_downgradeToOneToOneAfterDelayBlock
_remoteMemberHandles
_pendingMemberHandles
_memberHandlesAwaitingInvitesToLink
_serverBag
_avcSessionCreationBlock
_reportingHierarchySubToken
_inflightAVCBlobRecoveryBlocksByIdentifier
_timeoutBlock
_participantRefreshBlock
_invitationPreferences
_screenShareAttributes
_audioRoutesByParticipantIdentifier
_failureContext
T@"<TUFeatureFlags>",R,N,V_featureFlags
Tq,N,V_state
TB,N,GhasJoined,V_hasJoined
T@"NSMutableDictionary",R,N,V_activeRemoteParticipantsByIdentifier
T@"NSMutableDictionary",&,N,V_activeLightweightParticipantsByIdentifier
T@"NSMutableSet",&,N,V_kickedParticipants
T@"NSUUID",&,N,V_messagesGroupUUID
T@"CSDIDSGroupSession",R,N,V_idsSession
T@"<CSDAVCSession>",&,N,V_avcSession
T@"NSNumber",&,N,V_expectedAudioEnabled
T@"NSNumber",&,N,V_expectedVideoEnabled
T@"NSNumber",&,N,V_expectedScreenEnabled
T@"NSNumber",&,N,V_expectedVideoPaused
T@"NSNumber",&,N,V_expectedAudioPaused
T@"NSNumber",&,N,V_expectedAdditionalParticipantRepresentation
T@"NSDictionary",C,N,V_activeParticipantDestinationsByIdentifier
T@"NSDictionary",C,N,V_activeLightweightParticipantDestinationsByIdentifier
T@"NSSet",C,N,V_serverProvidedParticipantIdentifiers
T@"NSSet",C,N,V_serverProvidedLightweightParticipantIdentifiers
waitingToPruneParticipants
TB,N,GisWaitingToPruneParticipants,V_waitingToPruneParticipants
T@"NSDate",C,N,V_lastRebroadcastTime
TQ,N,V_rebroadcastTimeThreshold
T@"TUVideoDeviceController",R,N,V_videoDeviceController
oneToOneModeEnabled
TB,N,GisOneToOneModeEnabled
T@"NSMutableDictionary",R,N,V_virtualParticipantsByPluginName
T@"CSDFaceTimeInviteDemuxer",R,N,V_faceTimeInviteDemuxer
T@"NSMutableDictionary",&,N,V_pendingKickedMembersByIdentifier
T@"NSMutableSet",&,N,V_pendingAllowedMembers
TQ,N,V_kickMemberRetryCount
T@"NSArray",&,N,V_currentParticipantPresentationContexts
T@"CSDConversationParticipant",&,N,V_splitSessionSecondary
T@"TUConversationMember",&,N,V_localLightweightSecondaryMember
T@"CPApplicationPolicyManager",&,N,V_applicationLaunchPolicyManager
T@"CPAudioRoutePolicyManager",&,N,V_audioRoutePolicyManager
T@"CPSystemStateObserver",&,N,V_sharePlaySystemStateObserver
T@"TUConversationActivitySession",&,N,V_stagedActivitySession
T@?,C,N,V_downgradeToOneToOneAfterDelayBlock
T@"TUConversationLink",&,N,V_link
T@"NSSet",C,N,V_remoteMembers
T@"NSSet",C,N,V_pendingMembers
T@"NSSet",C,N,V_kickedMembers
T@"NSSet",C,N,V_rejectedMembers
T@"NSSet",C,N,V_otherInvitedHandles
T@"NSSet",C,N,V_lightweightMembers
T@"NSSet",C,N,V_remoteMemberHandles
T@"NSSet",C,N,V_pendingMemberHandles
T@"NSMutableArray",C,N,V_memberHandlesAwaitingInvitesToLink
T@"<CSDConversationServerBag>",&,N,V_serverBag
T@?,C,N,V_avcSessionCreationBlock
T@"NSObject",&,N,V_reportingHierarchyToken
T@"NSObject",&,N,V_reportingHierarchySubToken
T@"NSMutableDictionary",R,C,N,V_inflightAVCBlobRecoveryBlocksByIdentifier
T@?,C,N,V_timeoutBlock
T@?,C,N,V_participantRefreshBlock
TB,N,V_avcSessionInProgress
TB,N,V_forceExpanseEnabled
T@"NSSet",C,N,V_invitationPreferences
T@"TUCallScreenShareAttributes",N,V_screenShareAttributes
T@"TUConversationProvider",&,N,V_provider
T@"NSMutableDictionary",&,N,V_audioRoutesByParticipantIdentifier
T@"TUConversationParticipant",R,N
T@"CXCallFailureContext",&,N,V_failureContext
T@"<CSDConversationDelegate>",W,N,V_delegate
T@"NSUUID",R,N,V_UUID
T@"NSUUID",R,N,V_groupUUID
TB,N,V_hasReceivedLetMeInRequest
Tq,N,V_letMeInRequestState
TQ,R,N
audioReady
TB,R,N,GisAudioReady
locallyCreated
TB,R,N,GisLocallyCreated,V_locallyCreated
T@"TUHandle",R,N,V_initiator
T@"TUConversationMember",R,N,V_localMember
T@"NSSet",R,C,N
TB,N,V_ignoreLMIRequests
T@"NSArray",C,N,V_supportedMediaTypes
fromStorage
TB,N,GisFromStorage,V_fromStorage
T@"NSString",C,N,V_messagesGroupName
T@"NSSet",C,N,V_memberIdentifiers
T@"TUConversation",R,C,N
uplinkMuted
TB,N,GisUplinkMuted
videoEnabled
TB,N,GisVideoEnabled
screenEnabled
TB,R,N,GisScreenEnabled
audioEnabled
TB,N,GisAudioEnabled
videoPaused
TB,N,GisVideoPaused
audioPaused
TB,N,GisAudioPaused
relaying
TB,N,GisRelaying,V_relaying
video
TB,N,GisVideo,V_video
TQ,N,V_avMode
captioningEnabled
TB,R,N,GisCaptioningEnable,V_captioningEnabled
T{CGRect={CGPoint=dd}{CGSize=dd}},N
T@"NSDictionary",R,N
mirageEnabled
TB,R,N,GisMirageEnabled
T@"CPActivitySessionManager",&,N,V_activitySessionManager
T@"TUConversationReport",R,N,V_report
T@"NSSet",R,N
T@"TUConversationParticipantAssociation",C,N,V_localParticipantAssociation
oneToOneHandoffOngoing
TB,R,N,GisOneToOneHandoffOngoing
T@"TUConversationHandoffEligibility",C,N,V_handoffEligibility
handleActiveAccountsChanged:
_handlePairedDeviceChangedFrom:to:
setHasSupportsHolding:
hasSupportsHolding
setHasSupportsGrouping:
hasSupportsGrouping
setHasSupportsUngrouping:
hasSupportsUngrouping
setHasSupportsDTMF:
hasSupportsDTMF
setSupportsUnambiguousMultiPartyState:
setHasSupportsUnambiguousMultiPartyState:
hasSupportsUnambiguousMultiPartyState
setSupportsAddCall:
setHasSupportsAddCall:
hasSupportsAddCall
setSupportsSendingToVoicemail:
setHasSupportsSendingToVoicemail:
hasSupportsSendingToVoicemail
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
_supportsAddCall
_supportsDTMF
_supportsGrouping
_supportsHolding
_supportsSendingToVoicemail
_supportsUnambiguousMultiPartyState
_supportsUngrouping
TB,N,V_supportsHolding
TB,N,V_supportsGrouping
TB,N,V_supportsUngrouping
TB,N,V_supportsDTMF
TB,N,V_supportsUnambiguousMultiPartyState
TB,N,V_supportsAddCall
TB,N,V_supportsSendingToVoicemail
callWithUniqueProxyIdentifier:
initWithRelayMessage:outgoing:
setCallDelegatesIfNeeded:
hostCallCreationTime
setHostCreationTime:
setHostMessageSendTime:
setClientMessageReceiveTime:
cannotBeAnswered
setEndpointOnCurrentDevice:
cannotRelayAudioOrVideoOnPairedDevice
setCannotRelayAudioOrVideo:
propertiesChangedForCall:
displayContext
displayContextByMergingWithDisplayContext:
setDisplayContext:
updateWithRelayMessage:
callsHostedElsewhere
setLocallyDisconnectedWithReasonIfNone:
setLocallyDisconnectedWithReasonIfNone:stopConference:
stopConferenceForIdentifier:
setLocallyConnected
callModel
setModel:
setWantsHoldMusic:
protoCalls
isEqualToCall:
updateRelayCall:
initWithUniqueProxyIdentifier:endpointOnCurrentDevice:
hardPauseDigits
setHardPauseDigits:
hardPauseDigitsState
setHardPauseDigitsState:
setLocallyConnecting
hasCurrentCalls
pullRemotelyHostedCallsForMessage:completion:
callCapabilitiesState
updatePairedHostDeviceCallCapabilitiesState:
callProviderManager
tuProviders
registerPairedHostDeviceProviders:
needsManualInCallSounds
setNeedsManualInCallSounds:
soundRegion
setSoundRegion:
setLocallyHasSentInvitation
isTinCanProvider
remoteUplinkMutedSetTime
isRemoteUplinkMuted
setRemoteUplinkMuted:
setRemoteUplinkMutedSetTime:
routes
tuRoute
pairedHostDeviceRouteController
handleUpdatedPairedHostDeviceRoutes:
isFailureExpected
setFailureExpected:
supportsEmergencyFallback
setSupportsEmergencyFallback:
supportsTTYWithVoice
setSupportsTTYWithVoice:
initWithIdentifier:
inviteData
relayInviteDictionary
becomeEndpointForPullFromRemoteDevice
prepareConferenceConnection:remoteInviteDictionary:completion:
handleIncomingCallMessageFromHost:fromPairedDevice:
handleCallDialedMessageFromHost:fromPairedDevice:
handleCallAnsweredElsewhereMessageFromHost:fromPairedDevice:
handleCallDisconnectedMessageFromHost:
handleCallConnectedMessageFromHost:
handlePullRelayingCallsMessageFromHost:fromPairedDevice:
handleResetWantsHoldMusicFromHost:
handleUpdateCallModelMessageFromHost:
handleDeviceUnavailableMessageFromHost:
handleResetStateMessageFromHost:fromPairedDevice:
handleHardPauseDigitsAvailabilityMessageFromHost:
handleUpdateRemoteCallStateMessageFromHost:
handleCallStartedConnectingMessageFromHost:
handlePushHostedCallsMessageFromHost:completion:
handleUpdateCallContextAvailableMessageFromHost:
handleNeedsManualInCallSoundsChangeMessageFromHost:
handleInvitationSentMessageFromHost:
handleUpdateCallDisplayContextMessageFromHost:
handleUpdateRemoteUplinkMutedMessageFromHost:
handleUpdateRoutesMessageFromHost:
handleUpdateSupportsTTYWithVoiceMessageFromHost:
handleUpdateFailureExpectedMessageFromHost:
handleUpdateSupportsEmergencyFallbackMessageFromHost:
initWithType:
setDestinationID:
setService:
setUniqueProxyIdentifier:
setSourceIdentifier:
setDTMFKey:
setDisconnectedReason:
enumerateKeysAndObjectsUsingBlock:
pairedDeviceExists
setMessageSendTime:
receivedMessageType
tuProvider
initWithProvider:
sourceIdentifier
setAudioSourceIdentifier:
isVoicemail
setDialType:
isEmergency
isSOS
setSOS:
localSenderIdentityUUID
setLocalSenderIdentityUUID:
localSenderIdentityAccountUUID
setLocalSenderIdentityAccountUUID:
telephonyProvider
senderIdentityForAccountUUID:
ttyType
setTtyType:
originatingUIType
setOriginatingUIType:
contactIdentifier
setContactIdentifier:
protoService
setProtoService:
protoWantsHoldMusic
setProtoWantsHoldMusic:
protoDisconnectedReason
setProtoDisconnectedReason:
protoCannotBeAnswered
setProtoCannotBeAnswered:
protoDTMFKey
bytes
dataWithBytes:length:
setProtoDTMFKey:
protoVoicemail
setProtoVoicemail:
hardPauseState
setHardPauseState:
protoShouldSuppressRingtone
setProtoShouldSuppressRingtone:
protoNeedsManualInCallSounds
setProtoNeedsManualInCallSounds:
protoCannotRelayAudioOrVideoOnPairedDevice
setProtoCannotRelayAudioOrVideoOnPairedDevice:
protoExpectedEndpointOnMessagingDevice
setProtoExpectedEndpointOnMessagingDevice:
initWithCallCapabilitiesState:
setProtoCallCapabilitiesState:
protoCallCapabilitiesState
protoEmergency
setProtoEmergency:
protoFailureExpected
setProtoFailureExpected:
protoSupportsEmergencyFallback
setProtoSupportsEmergencyFallback:
protoSOS
setProtoSOS:
protoUplinkMuted
setProtoUplinkMuted:
protoRemoteUplinkMuted
setProtoRemoteUplinkMuted:
protoCallModel
protoCallModelState
holdAllowed
mergeable
takingCallsPrivateAllowed
ambiguityState
addCallAllowed
sendToVoicemailAllowed
setProtoCallModel:
setProtoCallModelState:
setAmbiguityState:
setSwappable:
setMergeable:
setHoldAllowed:
setAddCallAllowed:
setTakingCallsPrivateAllowed:
setHardPauseAvailable:
setEndAndAnswerAllowed:
isHoldAndAnswerAllowed
setHoldAndAnswerAllowed:
setSendToVoicemailAllowed:
initWithCall:
addProtoCall:
destinationID
setProviders:
protoProvider
service
providerWithService:video:
setProtoProvider:
serviceForProvider:video:
hasProtoVideo
protoVideo
setProtoVideo:
protoDisplayContext
initWithCallDisplayContext:
setProtoDisplayContext:
endpointIDSDestinationURIs
destinationWithURI:
destinationWithDestinations:
destinationURIs
setEndpointIDSDestinationURIs:
localSenderIdentityUUIDString
setLocalSenderIdentityUUIDString:
localSenderIdentityAccountUUIDString
setLocalSenderIdentityAccountUUIDString:
addRemoteParticipantHandles:
protoTTYType
setProtoTTYType:
protoSupportsTTYWithVoice
setProtoSupportsTTYWithVoice:
setProtoPriority:
protoOriginatingUIType
setProtoOriginatingUIType:
initWithDictionary:
initWithType:uniqueProxyIdentifier:
receivedMessageTypeString
dialRequest
wantsHoldMusic
setCannotBeAnswered:
DTMFKey
setVoicemail:
customizeForProtocolVersion:
setShouldSuppressRingtone:
setCannotRelayAudioOrVideoOnPairedDevice:
isExpectedEndpointOnMessagingDevice
setExpectedEndpointOnMessagingDevice:
setCallCapabilitiesState:
setEmergency:
setCallModel:
addCall:
setTuHandle:
setTuProviders:
setTuProvider:
setTuProvider:isVideo:
endpointIDSDestination
setEndpointIDSDestination:
remoteParticipantTUHandles
setRemoteParticipantTUHandles:
priority
setPriority:
T@"NSString",R,C,N
T@"TUDialRequest",R,N
TC,N
voicemail
TB,N,GisVoicemail
expectedEndpointOnMessagingDevice
TB,N,GisExpectedEndpointOnMessagingDevice
T@"TUCallCapabilitiesState",&,N
emergency
TB,N,GisEmergency
failureExpected
TB,N,GisFailureExpected
TB,N,GisSOS,SsetSOS:
T@"TUCallModel",&,N
T@"TUHandle",&,N
T@"NSArray",&,N
TB,N,GisVideo
T@"TUCallProvider",&,N
T@"TUCallDisplayContext",&,N
remoteUplinkMuted
TB,N,GisRemoteUplinkMuted
T@"IDSDestination",&,N
T@"NSSet",C,N
setValue:
setIsoCountryCode:
setHasType:
typeAsString:
StringAsType:
hasValue
hasIsoCountryCode
_isoCountryCode
_type
_value
Ti,N,V_type
T@"NSString",&,N,V_value
T@"NSString",&,N,V_isoCountryCode
setSender:
setAudioRouteUniqueIdentifier:
hasSender
hasAudioRouteUniqueIdentifier
sender
audioRouteUniqueIdentifier
_audioRouteUniqueIdentifier
_sender
T@"CSDMessagingConversationParticipant",&,N,V_sender
T@"NSString",&,N,V_audioRouteUniqueIdentifier
setContextIdentifier:
actionDescription
setActionDescription:
ongoingDescription
setOngoingDescription:
completedDescription
setCompletedDescription:
hasContextIdentifier
hasActionDescription
hasOngoingDescription
hasCompletedDescription
contextIdentifier
initWithContextIdentifier:actionDescription:ongoingDescription:completedDescription:
tuConversationActivityContext
activityContextWithTUActivityContext:
T@"TUConversationActivityContext",R,N
conversationID
setConversationID:
timebase
timeIntervalSinceReferenceDate
setTimebase:
hasConversationID
initWithTimeIntervalSinceReferenceDate:
initWithTimeIntervalSince1970:
initWithConversationID:timebase:
initWithTUConversationReport:
tuConversationReport
T@"TUConversationReport",R,C,N
setFeatureFlags:
initWithUniqueProxyIdentifier:configuration:
isHeld
callUpdateWithDefaultValuesSet
providerSource
processIdentifier
initWithBundleIdentifier:pid:
systemMuteStatusChanged:
activeConversationWithRemoteMembers:andLink:
resolvedAudioVideoMode
sanitizedCallUpdate
updateWithCallUpdate:
baseDestinationID
initOutgoingWithUniqueProxyIdentifier:backingCallSourceIdentifier:callUpdate:isVideo:endpointOnCurrentDevice:originatingUIType:
initWithDialRequest:
endpointOnCurrentDevice
initWithStartCallAction:
initWithJoinConversationRequest:
conversationLink
expanseProvider
usesSystemMuting
sharedAudioSystemController
setUnderlyingUplinkMuted:
propertiesChanged
updateWithCallUpdate:notifyDelegate:
mergedCallUpdate
updateWithUpdate:
hasSet
activeRemoteParticipantForCallUpdate:
setActiveRemoteParticipant:
activeRemoteParticipant
sandboxExtendedImageURL
localizedCallerImageURL
imageURLForCXSandboxExtendedURL:
isSharingScreen
mixesVoiceWithMedia
mediaPlaybackOnExternalDevice
model
verificationStatus
setVerificationStatus:
identificationCategory
setIdentificationCategory:
setJunkConfidence:
tuScreenShareAttributesForScreenAttributes:
handleUpdatedPropertiesAfterChangesInBlock:
hasStartedOutgoing
failureReason
hasStartedConnecting
setProviderFailureReasonIfNecessary:
endedReasonUserInfoForCall:
providerErrorCode
providerEndedReason
localizedCallerName
participantGroupUUID
callHistoryIdentifier
crossDeviceIdentifier
pauseDigitsQueue
originalPauseDigitsString
stringByAppendingString:
normalizedEmailAddressHandleForValue:
normalizedGenericHandleForValue:
normalizedPhoneNumberHandleForValue:isoCountryCode:
isUsingBaseband
isWiFiCallingCurrentlyAvailable
isBlocked
videoStreamToken
ISOCountryCode
senderIdentityForUUID:
accountUUID
activeRemoteParticipantHandles
tuHandlesWithHandles:
audioInterruptionProvider
audioInterruptionOperationMode
audioInterruptionProviderType
audioSessionID
retrieveSessionWithID:
audioCategory
proxyAVAudioSession
category
audioMode
mode
requiresInCallSounds
inCallSoundRegion
ignoresBluetoothDeviceUID
bluetoothAudioFormat
handoffContext
handoffIdentifier
prefersExclusiveAccessToCellularNetwork
isMutuallyExclusiveCall
providerCallDelegate
backingCallSourceIdentifier
providerWithIdentifier:
hasEnded
hasConnected
isIncoming
nextPauseDigits
isHardPause
digits
hasQueuedHardPauseDigits
isUnderlyingUplinkMuted
isDownlinkMuted
backingCallSource
auditToken
providerContext
unsignedIntegerValue
serviceStatus
_sendSoftPauseDigitsIfNecessary
uniqueProxyIdentifierUUID
initWithCallUUID:relaying:
performCallAction:forCall:
setTTYType:
setBluetoothAudioFormat:
isVideoUpgradeFromCall:
initWithCallUUID:handle:
setRelay:
setUpgrade:
isRedial
setRetry:
dialType
dialWithRequest:displayContext:
callSourceForDialRequest:
setBackingCallSource:
startCallActionWithDialRequest:
performStartCallAction:forCall:
callSourceForJoinConversationRequest:
setShouldAcceptDateConnectedProviderUpdates:
setWantsStagingArea:
joinedFromLink
isJoiningConversationWithLink
setJoinedFromLink:
audioSourceIdentifier
joinCallAction
prioritizedSenderIdentities
setCallerID:
setAssociationIdentifier:
setAssociationAVCIdentifier:
notificationStylesByHandleType
setNotificationStylesByHandleType:
answerWithRequest:
pauseVideoToStart
initWithCallUUID:
behavior
setDowngradeToAudio:
setPauseVideoToStart:
hold
_setIsOnHold:
unhold
isPTT
initWithCallUUID:onHold:
dequeueAllPauseDigits
groupWithOtherCall:
initWithCallUUID:callUUIDToGroupWith:
ungroup
disconnectWithReason:
initWithCallUUID:sendingVideo:
cxScreenShareAttributesForCallAttributes:
initWithCallUUID:attributes:
setSharingScreen:
initWithCallUUID:sharingScreen:
captureCapabilities
deviceFamily
setDeviceFamily:
style
setStyle:
displayID
setDisplayID:
frameRate
setFrameRate:
isWindowed
setWindowed:
windowUUID
displayScale
setDisplayScale:
scaleFactor
setScaleFactor:
originalResolution
setOriginalResolution:
setAttributes:
initWithCallUUID:muted:
initWithCallUUID:ttyType:
muteSessionInput:error:
setDownlinkMuted:
_sendDTMFDigits:type:
stringWithCharacters:length:
initWithCallUUID:videoPresentationSize:
initWithCallUUID:videoPresentationState:
dequeueNextPauseDigits
initWithCallUUID:digits:type:
isConnected
handleAudioSessionActivationStateChangedTo:
setImageURL:
csd_isSymbolicLink
lastPathComponent
relativePath
initFileURLWithPath:
initWithName:error:
createLinkIfNecessaryWithFilename:toURL:error:
sandboxExtensionHandle
pauseDigitsQueueChanged:
initIncomingWithBackingCallSource:UUID:update:
initOutgoingWithUpdate:callUUID:backingCallSource:isExpanseProvider:
initOutgoingWithDialRequest:
initOutgoingWithRequestedStartCallAction:backingCallSource:
initOutgoingWithJoinConversationRequest:
initWithHandoffContext:backingCallSource:
updateForDisconnection
endedReasonUserInfo
callerNameFromNetwork
isThirdPartyVideo
callStatusFromUnderlyingSource
providerProcessIdentifier
providerAuditToken
initialLinkType
spatialAudioSourceIdentifier
setHeld:
setCallGroupUUID:
joinConversationWithRequest:
setSharingScreen:attributes:
sendHardPauseDigits
playRemoteDTMFToneForKey:
imageURL
isExpanseProvider
setProviderCallDelegate:
shouldAcceptDateConnectedProviderUpdates
providerDisplayMonitor
setMergedCallUpdate:
setPauseDigitsQueue:
_outgoing
_wantsStagingArea
_sharingScreen
_expanseProvider
_mixesVoiceWithMedia
_mediaPlaybackOnExternalDevice
_held
_sendingVideo
_underlyingUplinkMuted
_shouldAcceptDateConnectedProviderUpdates
_ttyType
_originatingUIType
_activeRemoteParticipant
_imageURL
_bluetoothAudioFormat
_providerCallDelegate
_backingCallSource
_providerSource
_providerDisplayMonitor
_backingCallSourceIdentifier
_mergedCallUpdate
_pauseDigitsQueue
T@"NSString",R,C,N,V_backingCallSourceIdentifier
T@"CXCallSource",&,N,V_backingCallSource
T@"CXCallUpdate",&,N,V_mergedCallUpdate
T@"CSDPauseDigitsQueue",&,N,V_pauseDigitsQueue
TB,N,V_wantsStagingArea
Ti,R,N,V_originatingUIType
T@"AVAudioSession",R,N
TB,N,V_shouldAcceptDateConnectedProviderUpdates
T@"<CSDProviderCallDelegate>",W,N,V_providerCallDelegate
T@"CXAbstractProviderSource",R,N,V_providerSource
T@"TUParticipant",C,N,V_activeRemoteParticipant
held
TB,N,GisHeld,V_held
Ti,N,V_ttyType
Tq,N,V_bluetoothAudioFormat
T@"NSUUID",C,N
TB,N,V_sendingVideo
underlyingUplinkMuted
TB,N,GisUnderlyingUplinkMuted,V_underlyingUplinkMuted
TB,R,N,V_mixesVoiceWithMedia
TB,R,N,V_mediaPlaybackOnExternalDevice
TB,R,N,GisExpanseProvider,V_expanseProvider
T@"CSDProviderDisplayMonitor",R,N,V_providerDisplayMonitor
handleCallHasStartedOutgoingChangedNotification:
handleCallStatusChangedNotification:
handleCallStartedConnectingNotification:
handleCallConnectedNotification:
handleCallMayRequireBreakBeforeMakeChangedNotification:
handleCallWantsHoldMusicChangedNotification:
callIsOnHoldChangedNotification:
handleCallOneToOneModeChangedNotification:
handleCallUpgradedToVideoNotification:
breakBeforeMakeTimeout
_handleLockStateChanged
callDurationLimitTimer
_handleCallHasStartedOutgoingChanged:
_handleCallStatusChanged:
_handleCallStartedConnecting:
_handleCallConnected:
_handleCallMayRequireBreakBeforeMakeChanged:
_handleCallWantsHoldMusicChanged:
removeLinksForFilenamesNotInArray:error:
callCenter
senderIdentityCapabilitiesWithUUID:
supportsSimultaneousVoiceAndData
nonWifiFaceTimeAvailable
wiFiActiveAndReachable
doubleValue
_handleAudioReadyForCall:
_setUpCallDurationLimitIfNecessary
_updateCallMutingForHoldMusic
disconnectCall:
wantsBreakBeforeMakeForCall:
_disconnectOrPullExistingCallsForCallIfNecessary:
_pushCallToAlternateDestinationIfNecessary:
_notifyCLTMOfIncomingCall
unsuppressRingtoneIfNecessary
timeoutTimer
_ringingTimerForCallWithIdentifier:
setTimeoutTimer:
_cleanCallMediaCache
setHeySiriEnabled:
leaveConversationWithUUID:
disconnectActiveCallsBasedOnCallStatusForCall:
pullRelayingCallsFromClient
disconnectAllCallsBesides:
enableEmergencyModeIfNecessaryForCall:
leaveAVLessConversationsIfNecessary
_setUpBreakBeforeMakeTimeoutIfNecessaryForCall:
sharedMonitor
enableEmergencyModeWithError:
requestCLTMThrottleUncapToken
pushHostedCallsToDestination:
endpointRapportMediaSystemIdentifier
endpointRapportEffectiveIdentifier
pickRouteForRapportDeviceWithMediaSystemIdentifier:effectiveIdentifier:
setUpBreakBeforeMakeTimeout
routeManager
isCarPlayRouteAvailable
uplinkWasExplicitlyMuted
hasRestrictionsInRetailEnvironment
_handleCallDurationTimerFired
setCallDurationLimitTimer:
callsPassingTest:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
isAudioMutedForHoldMusic
setAudioMutedForHoldMusic:
disconnectAllCalls
Td,R,N
initWithCallCenter:
setRequestCLTMThrottleUncapToken:
lockStateNotificationToken
setLockStateNotificationToken:
setSetUpBreakBeforeMakeTimeout:
_audioMutedForHoldMusic
_requestCLTMThrottleUncapToken
_lockStateNotificationToken
_callCenter
_callDurationLimitTimer
_setUpBreakBeforeMakeTimeout
T@"NSObject<OS_dispatch_source>",&,V_callDurationLimitTimer
audioMutedForHoldMusic
TB,N,GisAudioMutedForHoldMusic,V_audioMutedForHoldMusic
Ti,N,V_requestCLTMThrottleUncapToken
Ti,N,V_lockStateNotificationToken
T@"TUCallCenter",R,N,V_callCenter
T@"<CSDCallContainer>",R,N
T@"CSDRouteManager",R,N
T@?,C,N,V_setUpBreakBeforeMakeTimeout
temporaryGroupUUID
approverHandle
setPendingConversation:
initWithConversationLink:localMember:queue:
dateCreated
letMeInKeyAgreement
setLetMeInKeyAgreement:
setApproverHandle:
_videoEnabled
_audioEnabled
_uplinkMuted
_temporaryGroupUUID
_dateCreated
_conversationGroupUUID
_letMeInKeyAgreement
_approverHandle
T@"NSUUID",&,N,V_conversationGroupUUID
T@"CSDLetMeInRequestorKeyAgreement",&,N,V_letMeInKeyAgreement
T@"TUHandle",&,N,V_approverHandle
T@"NSUUID",R,N,V_temporaryGroupUUID
T@"NSDate",R,N,V_dateCreated
TB,N,GisVideoEnabled,V_videoEnabled
TB,N,GisAudioEnabled,V_audioEnabled
TB,N,GisUplinkMuted,V_uplinkMuted
TB,R,N,GisVideo,V_video
deviceType
initWithResolver:withSystemStatusPublisher:queue:
resolvedCall
shouldOpenInCallServiceForCall:
shouldDisplaySystemCallControls
shouldDisplayHandoffEligibleConversationControls
displaySystemCallControlsByURL
displayHandoffEligibleNearbyByURL
openInCallServiceByURL
openVoIPAppWithBundleIdentifier:
handleUserInteractionsWithBlock:
updateStatusBar
resolver
resolvedDescriptor
updateAttributionsForDescriptor:
currentDescriptor
setCurrentDescriptor:
systemStatusPublisher
removeCallDescriptor:
addCallDescriptor:
updateVolatileDataWithBlock:
openUIServiceWithURL:
faceTimeShowHandoffEligibleNearbyURL
_supportslaunchingInCallApplicationForIncomingCall
setFrontBoardOptions:
defaultWorkspace
openApplicationWithBundleIdentifier:configuration:completionHandler:
isDeviceSupported
resolutionChangedForResolver:
deviceSupported
TB,R,N,GisDeviceSupported
setResolver:
_resolver
_systemStatusPublisher
_currentDescriptor
T@"<CSDStatusBarResolver>",&,N,V_resolver
T@"STCallingStatusDomainPublisher",R,N,V_systemStatusPublisher
T@"STCallingStatusDomainCallDescriptor",&,N,V_currentDescriptor
neighborhoodActivityClientXPCInterface
neighborhoodActivityServerXPCInterface
conduit
nearbyTVDevices
activeSplitSessionTVDevice
inviteTV:toConversation:completion:
disconnectTV:completion:
currentClient
sessionApprovalClient
setSessionApprovalClient:
performBlockOnClients:
tvDeviceAppeared:
performBlockWithClients:
tvDeviceDisappeared:
splitSessionStarted:
splitSessionEnded:
objectForBlock
approveSplitSessionForConversation:requestedFromDevice:pullContext:completion:
cancelSplitSessionApproval
canApproveSessions
approveSplitSessionFor:from:pullContext:completion:
nearbyTVDevicesWithCompletion:
activeSplitSessionTVDeviceWithCompletion:
inviteTVDevice:toConversation:completion:
disconnectTVDevice:completion:
registerSplitSessionApprovalEnabled:
initWithConduit:
_conduit
_sessionApprovalClient
T@"CSDNeighborhoodActivityConduit",R,N,V_conduit
T@"CSDClient",W,N,V_sessionApprovalClient
modelIdentifier
setModelIdentifier:
uniqueIDOverride
setUniqueID:
linkedUserURIs
setLinkedUserURIs:
isDefaultPairedDevice
setDefaultPairedDevice:
supportsRestrictingSecondaryCalling
setSupportsRestrictingSecondaryCalling:
initWithIDSDevice:
initWithUUID:carrierPhoneNumbers:
uuid
carrierPhoneNumbers
_uuid
_carrierPhoneNumbers
T@"NSUUID",R,C,N,V_uuid
T@"NSArray",R,C,N,V_carrierPhoneNumbers
fetchServiceProviders
predicateWithBlock:
filteredArrayUsingPredicate:
didChangeServiceProvidersForCarrierBundlePhoneNumberProviderController:
telephonyClient
getSubscriptionInfoWithError:
subscriptionsInUse
domain
carrierNumbersForSubscriptionContext:
arrayOfStringsForKeyHierarchy:subscriptionContext:error:
initWithBundleType:
copyCarrierBundleValue:keyHierarchy:bundleType:error:
objectForKeyHierarchy:subscriptionContext:error:
setServiceProviders:
subscriptionInfoDidChange
activeSubscriptionsDidChange
simLessSubscriptionsDidChange
dualSimCapabilityDidChange
serviceProviders
serviceProvidersWithCarrierNumbers
carrierBundleChange:
_serviceProviders
_telephonyClient
T@"CoreTelephonyClient",R,N,V_telephonyClient
T@"NSArray",C,N,V_serviceProviders
T@"<CSDCarrierBundlePhoneNumberProviderControllerDelegate>",W,N,V_delegate
T@"NSArray",R,C,N
setUpSession
session
groupID
isAVLess
account
initWithAccount:options:
setSession:
setDelegate:queue:
sessionEndedReason
sessionID
setPreferences:
joinWithOptions:
setParticipantDestinationIDs:
updateMembers:withContext:triggeredLocally:
initWithRequiredCapabilities:requiredMissingCapabilities:
updateMembers:withContext:messagingCapabilities:triggeredLocally:
updateParticipantData:withContext:
leaveGroupSession
reconnectUPlusOneSession
manageDesignatedMembers:withType:
requestEncryptionKeyForParticipants:
setRequiredCapabilities:requiredLackOfCapabilities:
addObjectsFromArray:
sessionIDAliasWithSalt:
setGroupUUID:
createAliasForParticipantID:salt:
getParticipantIDForAlias:salt:completionHandler:
removeRequiredCapabilities:requiredLackOfCapabilities:
updateParticipantType:members:withContext:triggeredLocally:
sessionProviderDidTerminate:
sessionProvider:endedWithReason:error:
participantIDs
sessionProvider:didJoinGroupWithParticipantIdentifiers:localParticipantIdentifier:error:
sessionProvider:didLeaveGroupWithError:
sessionProvider:didReceiveActiveParticipants:success:
sessionProvider:didReceiveActiveLightweightParticipants:success:
sessionProvider:didReceiveReport:
sessionProvider:didReceiveKickedParticipantIDs:withCode:withType:isTruncated:
sessionProvider:didReceiveLocalParticipantType:error:
sessionProvider:didRegisterPluginAllocationInfo:
sessionProvider:didUnregisterPluginAllocationInfo:
sessionProviderDidReceiveKeyUpdate:
sessionProvider:didReceiveDataBlob:forParticipant:
groupSessionDidTerminate:
groupSessionEnded:withReason:error:
sessionDidJoinGroup:participantsInfo:error:
sessionDidJoinGroup:participantInfo:error:
sessionDidJoinGroup:participantUpdate:error:
sessionDidLeaveGroup:error:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
session:didReceiveActiveParticipants:success:
session:didReceiveActiveLightweightParticipants:success:
session:didReceiveBlockedParticipantIDs:withCode:isTruncated:
session:didReceiveBlockedParticipantIDs:withCode:withType:isTruncated:
session:didReceiveQueryBlockedParticipantIDs:withCode:isTruncated:
session:didRemoveParticipantIDs:withCode:isTruncated:
sessionDidReceiveParticipantUpgrade:participantType:error:
participantUpdatedForSession:
session:didReceivePluginAllocationInfo:
sessiondidReceiveKeyUpdate:
session:didReceiveServerErrorCode:
session:receivedInvitationAcceptFromID:
session:receivedInvitationDeclineFromID:
session:receivedInvitationCancelFromID:
sessionStarted:
sessionEnded:
sessionEnded:withReason:error:
session:didReceiveData:
session:receivedInvitationAcceptFromID:withData:
session:receivedInvitationDeclineFromID:withData:
session:receivedInvitationCancelFromID:withData:
session:receivedSessionMessageFromID:withData:
session:receivedSessionEndFromID:withData:
session:invitationSentToTokens:
session:invitationSentToTokens:shouldBreakBeforeMake:
updateParticipantDestinationIDs:withContextData:triggeredLocally:
updateParticipantDestinationIDs:withContextData:requiredCapabilities:requiredLackOfCapabilities:triggeredLocally:
sendParticipantData:
kickParticipants:
allowParticipants:
setParticipantType:forLocalMemberDestination:
avLess
TB,R,N,GisAVLess
T@"<CSDIDSGroupSessionProviderDelegate>",W,N
TI,R,N
initWithGroupID:participantDestinationIDs:callerID:account:queue:isOneToOneModeEnabled:isLightweightMember:avLess:
_avLess
_isOneToOneModeEnabled
_isLightweightMember
_session
_participantDestinationIDs
_groupID
_account
_callerID
T@"IDSGroupSession",&,N,V_session
T@"NSString",R,C,N,V_groupID
T@"IDSAccount",R,N,V_account
TB,R,N,V_isOneToOneModeEnabled
TB,R,N,V_isLightweightMember
T@"NSString",R,C,N,V_callerID
T@"NSArray",C,N,V_participantDestinationIDs
TB,R,N,GisAVLess,V_avLess
T@"<CSDIDSGroupSessionProviderDelegate>",W,N,V_delegate
data
setData:
completion
setCompletion:
_data
_completion
T@"NSData",&,N,V_data
T@?,C,N,V_completion
initWithSessionProvider:isInitiator:remoteProtocolVersion:
sessionProvider
setStreamPreferences:
initWithSessionProvider:isInitiator:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:
numberWithInt:
runBlocksPendingTransportAvailability:
removePendingData
transport
remoteDestination
setRemoteDestination:
remoteDevice
setRemoteDevice:
identifiers
allIdentifiers
blocksPendingTransportAvailability
performBlockOnTransportAvailability:
hasStarted
hasReceivedAccept
acceptPayloadData
runBlocksPendingTransportAvailabilityIfNecessary:
pendingData
sendData:waitUntilConnected:completion:
pendData:completion:
sendData:toDestinations:
_sendInvitationWithData:declineOnError:alwaysSendData:
_acceptInvitationWithData:alwaysSendData:
_cancelInvitationWithData:reason:alwaysSendData:
_declineInvitationWithData:alwaysSendData:
sessionProviderStarted:
sendPendingData
setHasStarted:
setHasReceivedAccept:
setAcceptPayloadData:
deviceForFromID:
session:receivedInvitationAcceptWithData:fromDestination:device:
session:receivedInvitationCancelWithData:fromDestination:device:
session:receivedInvitationDeclineWithData:fromDestination:device:
session:receivedData:fromDestination:device:
initAsInitiatorWithSessionProvider:identifiers:
initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:
hasIdentifier:
addIdentifier:
addIdentifiers:
removeIdentifier:
removeIdentifiers:
mergeSession:
sendData:toDestinations:completion:
sendDataAndSendInvitationIfNecessary:declineOnError:
sendDataAndAcceptInvitationIfNecessary:
sendDataAndCancelInvitationIfNecessary:
sendDataAndDeclineInvitationIfNecessary:
prepareToEnd
sessionProvider:receivedInvitationAcceptFromID:withData:
sessionProvider:receivedInvitationCancelFromID:withData:
sessionProvider:receivedInvitationDeclineFromID:withData:
sessionProvider:receivedSessionMessageFromID:withData:
_hasStarted
_hasReceivedAccept
_remoteDestination
_remoteDevice
_pendingData
_identifiers
_blocksPendingTransportAvailability
_acceptPayloadData
T@"IDSDestination",&,N,V_remoteDestination
T@"IDSDevice",&,N,V_remoteDevice
T@"NSMutableArray",R,N,V_pendingData
T@"NSMutableSet",R,N,V_identifiers
T@"NSMutableArray",R,N,V_blocksPendingTransportAvailability
TB,N,V_hasStarted
TB,N,V_hasReceivedAccept
T@"NSData",C,N,V_acceptPayloadData
T@"<CSDRelayIDSDualSessionDelegate>",W,N,V_delegate
T@"<CSDCallHistoryControllerDelegate>",&,N,V_delegate
setUpdateMessage:
setCheckInMessage:
setRecoverMessage:
hasUpdateMessage
hasCheckInMessage
hasRecoverMessage
updateMessage
checkInMessage
recoverMessage
_checkInMessage
_recoverMessage
_updateMessage
T@"CSDMessagingLinkSyncUpdateMessage",&,N,V_updateMessage
T@"CSDMessagingLinkSyncCheckInMessage",&,N,V_checkInMessage
T@"CSDMessagingLinkSyncRecoverMessage",&,N,V_recoverMessage
handleIDSDeviceListChangedNotification:
_updateDefaultPairedDeviceUniqueIDDefault
_updateThumperCallingPreferences
_checkIfDevicesShouldBeUnenrolled
initWithDomain:
domainAccessor
boolForKey:keyExistsAndHasValidFormat:
setBool:forKey:
synchronize
removeReminderNotificationOnSecondaryDevice
showEmergencyAddressDisclaimerOnSecondaryDevice
removeEmergencyAddressDisclaimerOnSecondaryDevice
areCTCapabilitiesValid
thumperCallingCapabilitiesStateByUUID
publiclyAccessibleCopy
accountID
thumperCapabilitiesStatesForPreferenceKey:
isAssociated
isSupported
supportsDefaultPairedDevice
enrollDefaultPairedDeviceForAccountID:
unenrollDefaultPairedDeviceForAccountID:
showReminderNotificationOnSecondaryDevice
saveThumperCapabilitiesStates:forPreferenceKey:
defaultPairedDevice
removeThumperRegisteredDeviceID:forThumperAccountID:
enrollDefaultPairedDevice
devices
valueForKey:
localThumperAccounts
allowedSecondaryDeviceIDs
secondaryThumperAccounts
csd_unknownContextInfoForAccountID:
supportsThumperCallingOverCellularData
countForIdentifier:
requestPinFromPrimaryDevice
removeNotificationsForServiceIdentifier:
preferencesURL
archivedDataWithError:
unarchivedObjectFromData:error:
thumperCallingCapabilitiesStateForAccountID:
shouldEnrollDefaultPairedDeviceForAccountID:
addThumperRegisteredDeviceID:forThumperAccountID:
shouldUnenrollDefaultPairedDeviceForAccountID:
isThumperRegisteredDeviceID:forThumperAccountID:
thumperCallingAllowedOnDefaultPairedDeviceDefault
didChangeTelephonyCallingSupport
didChangeFaceTimeAudioCallingSupport
didChangeFaceTimeVideoCallingSupport
didChangeFaceTimeCallingAvailability
didChangeRelayCallingCapabilities
didChangeRelayCallingAvailability
didChangeOutgoingRelayCallerID
didChangeCloudCallingDevices
didAddCapabilitiesForSenderIdentityWithUUID:
didRemoveCapabilitiesForSenderIdentityWithUUID:
didChangeVoLTECallingCapabilitiesForSenderIdentityWithUUID:
didChangeWiFiCallingCapabilitiesForSenderIdentityWithUUID:
didChangeThumperCallingCapabilitiesForSenderIdentityWithUUID:
didChangeWiFiCallingProvisionalURLForSenderIdentityWithUUID:
didChangeThumperCallingProvisionalURLForSenderIdentityWithUUID:
didChangeEmergencyCallbackMode
didChangeEmergencyCallbackPossible
didChangeRelayCallingFeatures
updateState
setThumperCallingAllowedOnDefaultPairedDeviceDefault:
_thumperIsNoLongerSupportedForAccountID:
_thumperIsNowEnabledForAccountID:
_thumperIsNoLongerEnabledForAccountID:
setDomainAccessor:
_dataSource
_domainAccessor
T@"NPSDomainAccessor",&,N,V_domainAccessor
T@"<CSDThumperCapabilitiesMonitorDataSource>",W,N,V_dataSource
isInvitation
upgradeSessionUUID
setInvitation:
setRepresentsTransitionFromPending:
setUpgradeSessionUUID:
collaborationIdentifier
setCollaborationIdentifier:
_invitation
_shouldSuppressInCallUI
_videoPaused
_representsTransitionFromPending
_upgrade
_momentsAvailable
_mirageAvailable
_gftDowngradeToOneToOneAvailable
_uPlusNDowngradeAvailable
_lightweight
_oneToOneModeEnabled
_upgradeSessionUUID
_participantAssociation
_collaborationIdentifier
invitation
TB,N,GisInvitation,V_invitation
TB,N,V_shouldSuppressInCallUI
TB,N,GisVideoPaused,V_videoPaused
TB,N,V_representsTransitionFromPending
upgrade
TB,N,GisUpgrade,V_upgrade
TB,N,GisInitiator,V_initiator
TB,N,GisMomentsAvailable,V_momentsAvailable
mirageAvailable
TB,N,GisMirageAvailable,V_mirageAvailable
gftDowngradeToOneToOneAvailable
TB,N,GisGFTDowngradeToOneToOneAvailable,V_gftDowngradeToOneToOneAvailable
uPlusNDowngradeAvailable
TB,N,GisUPlusNDowngradeAvailable,V_uPlusNDowngradeAvailable
lightweight
TB,N,GisLightweight,V_lightweight
T@"NSUUID",C,N,V_messagesGroupUUID
T@"NSUUID",C,N,V_upgradeSessionUUID
TB,N,GisOneToOneModeEnabled,V_oneToOneModeEnabled
T@"NSSet",&,N,V_invitationPreferences
TQ,N,V_sharePlayProtocolVersion
T@"TUConversationParticipantAssociation",C,N,V_participantAssociation
T@"NSString",C,N,V_collaborationIdentifier
addServiceDelegate:queue:
devicesChanged:
callerIDChanged:
addListenerID:forService:
serviceAvailabilityChanged:
_faceTimeAudioAvailability
_faceTimeVideoAvailability
_updateOutgoingCallerID
removeListenerID:forService:
faceTimeIDMatchesAppleID
outgoingCallerID
accountsChanged
updateOutgoingCallerIDAndSendDelegateCallbacksIfNecessary
faceTimeAvailabilityChanged
iCloudAccount
isActive
profileID
isEqualToIgnoringCase:
availabilityForListenerID:forService:
outgoingCallerIDChanged
isValidOutgoingCallerID:
availableOutgoingRelayCallerIDs
objectsPassingTest:
vettedAliases
indexesOfObjectsPassingTest:
firstIndex
objectAtIndexedSubscript:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:messageContext:
service:account:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
service:account:incomingTopLevelMessage:fromID:messageContext:
service:token:time:error:
service:didFlushCacheForRemoteURI:fromURI:guid:
service:didHintCheckingTransportLogWithReason:
service:didUpdatePseudonymsWithChanges:
isFaceTimeAudioAvailable
isFaceTimeVideoAvailable
setOutgoingCallerID:
_outgoingCallerID
T@"NSString",C,N,V_outgoingCallerID
T@"<CSDAccountsControllerDelegate>",W,N,V_delegate
faceTimeAudioAvailable
TB,R,N,GisFaceTimeAudioAvailable
faceTimeVideoAvailable
TB,R,N,GisFaceTimeVideoAvailable
shouldUseSocketForTransport
setIsAudioEnabled:
invitationTimeOut
setInvitationTimeOut:
sendSessionMessage:
sendSessionMessage:toDestinations:
sendInvitationWithData:declineOnError:
acceptInvitationWithData:
cancelInvitationWithData:
cancelInvitationWithRemoteEndedReasonOverride:
declineInvitationWithData:
reconnectSession
endSession
idsReportsReceived:forSessionWithUUID:
sessionProvider:invitationSentToPushTokens:shouldBreakBeforeMake:
invitationTimeout
setInvitationTimeout:
T@"<CSDIDSDualSessionProviderDelegate>",W,N
initWithSession:queue:
T@"IDSSession",R,N,V_session
T@"<CSDIDSDualSessionProviderDelegate>",W,N,V_delegate
initWithDigits:isHardPause:
setDigits:
setHardPause:
_hardPause
_digits
T@"NSString",C,N,V_digits
hardPause
TB,N,GisHardPause,V_hardPause
conversationProviderManagerClientXPCInterface
conversationProviderManagerServerXPCInterface
conversationProviderForIdentifier:
generatePseudonymHandleForConversationProvider:expiryDuration:URI:completionHandler:
renewPseudonymHandle:forConversationProvider:expirationDate:completionHandler:
revokePseudonymHandle:forConversationProvider:completionHandler:
doesHandle:correspondToConversationProvider:completionHandler:
startTrackingClient:forProviderIdentifier:
errorForUnregisteredProviderIdentifier:
registerConversationProvider:completionHandler:
conversationProviderForIdentifier:completionHandler:
conversationProviders:
registerForCallbacksForProvider:completionHandler:
initWithConversationProviderManager:
_providerManager
T@"CSDConversationProviderManager",R,N,V_providerManager
setGeneratorID:
setGeneratorVersion:
initWithIdentifier:version:
csdConversationLinkGeneratorDescriptor
generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:
T@"CSDConversationLinkGeneratorDescriptor",R,N
accountType
aliasStrings
regionBasePhoneNumber
csd_ISOCountryCode
label
setLabel:
initWithHandle:label:isSuggested:
tuLabeledHandle
handleWithTULabeledHandle:
T@"TULabeledHandle",R,N
callProviderManagerClientXPCInterface
callProviderManagerServerXPCInterface
isRemote
providersByIdentifierForRemoteClients:
localProvidersByIdentifierForRemoteClients:
pairedHostDeviceProvidersByIdentifierForRemoteClients:
providersByIdentifierForClient:
localProvidersByIdentifierForClient:
pairedHostDeviceProvidersByIdentifierForClient:
donateUserIntentForProviderWithIdentifier:
launchAppForDialRequest:completion:
updateProvidersByIdentifier:localProvidersByIdentifier:pairedHostDeviceProvidersByIdentifier:
performBlockOnClients:coalescedByIdentifier:
providersByIdentifier:
launchAppForDialRequest:reply:
initWithProviderManager:
T@"CSDCallProviderManager",R,N,V_providerManager
setNickname:
setLightweightPrimaryParticipantID:
associationVoucher
validationSource
setAssociationVoucher:
lightweightPrimaryParticipantID
setIsLightweightMember:
tuAssociationForHandle:
tuConversationMember
memberWithTUConversationMember:
T@"TUConversationMember",R,N
csd_applicationRecordForBundleIdentifier:
machOUUIDs
initWithSession:remoteHandle:wantsVideo:
createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:
conference
dateReceivedFirstRemoteFrame
hasSentInvitation
invitedPushTokens
underlyingErrorCode
remoteFromID
chatEnded:
localPortraitAspectRatioForChat:
setIsKeyExchangeEnabled:
setIsVideoEnabled:
setIsDuplexAudioOnly:
setIsRelayForced:
setIsRelayEnabled:
shouldStartAudioPaused
setIsAudioPausedToStart:
shouldStartVideoPaused
_setLocalAspectRatiosForVideoAspectRatioDescriptor:
setInviteCompletion:
prepareConference
cancelInvitationWithReason:
declineInvitation
cancelOrDeclineInvitation
_handlePushTokensInvited:didSendInvitation:didCancelInvitation:
setShouldStartAudioPaused:
setShouldStartVideoPaused:
chatStartedConnecting:
conferenceCreationBlock
setConference:
faceTimeAppUUID
inviteCompletion
setInvitedPushTokens:
setHasSentInvitation:
chatSentInvitation:
_setDateEndedIfNecessary
_stripPotentialTokenURIWithToken:
faceTimeInviteDictionary
hasProtoUpgradeSessionUUID
protoUpgradeSessionUUID
hasProtoWantsVideo
isWiFiAllowedForChat:
setWiFiAllowed:
isCellularDataAllowedForChat:
setCellularDataAllowed:
isCellularDataPreferredForChat:
setCellularDataPreferred:
initWithFaceTimeInviteDictionary:
setInviteData:
setProtoUpgradeSessionUUID:
isMomentsAvailableForChat:
sendInvitationWithData:
chatConnected:
setDateReceivedFirstRemoteFrame:
chat:inputFrequencyLevelChangedTo:
chat:outputFrequencyLevelChangedTo:
chat:inputLevelChangedTo:
chat:outputLevelChangedTo:
chat:changedBytesOfDataUsed:
chat:receivedData:
session:endedWithReason:
session:invitationSentToPushTokens:shouldBreakBeforeMake:
session:receivedInvitationAcceptWithData:
session:receivedInvitationDeclineWithData:
session:receivedInvitationCancelWithData:
session:receivedData:
startWithVideoAspectRatioDescriptor:inviteCompletion:
answerWithVideoAspectRatioDescriptor:
cancelInvitationWithAnsweredElsewhere
cancelInvitationWithDeclinedElsewhere
cancelInvitationWithLocalHangup
sendDataUnreliably:
sessionUUID
T@"<CSDIDSChatDelegate>",W,N
T@"NSString",R,N
outgoing
TB,R,N,GisOutgoing
T@"CXCallFailureContext",R,N
connected
TB,R,N,GisConnected
TB,N,GisRelaying
TB,N,GisRemoteMomentsAvailable
T@"NSUUID",R,C,N
initIncomingWithSession:remoteHandle:wantsVideo:remoteInviteDictionary:
initOutgoingWithSession:UUID:remoteHandle:wantsVideo:isRelaying:
setConferenceCreationBlock:
_remoteUplinkMuted
_remoteMomentsAvailable
_muted
_shouldStartAudioPaused
_shouldStartVideoPaused
_mayRequireBreakBeforeMake
_hasSentInvitation
_localSenderIdentityUUID
_conference
_dateReceivedFirstRemoteFrame
_invitedPushTokens
_inviteCompletion
_conferenceCreationBlock
T@"<CSDAVConference>",&,N,V_conference
T@"CSDExternalIDSDualSession",R,N,V_session
TB,N,V_shouldStartAudioPaused
TB,N,V_shouldStartVideoPaused
TB,N,V_mayRequireBreakBeforeMake
TB,N,V_hasSentInvitation
T@"NSDate",&,N,V_dateReceivedFirstRemoteFrame
T@"NSDictionary",R,C,N,V_remoteInviteDictionary
T@"NSArray",C,N,V_invitedPushTokens
T@?,C,N,V_inviteCompletion
T@?,C,N,V_conferenceCreationBlock
T@"<CSDIDSChatDelegate>",W,N,V_delegate
T@"TUHandle",R,N,V_handle
TB,R,N,GisOutgoing,V_outgoing
TB,N,GisMuted,V_muted
TB,N,GisRemoteUplinkMuted,V_remoteUplinkMuted
TB,N,GisRemoteMomentsAvailable,V_remoteMomentsAvailable
T@"NSUUID",C,N,V_localSenderIdentityUUID
_actionDescription
_completedDescription
_contextIdentifier
_ongoingDescription
T@"NSString",&,N,V_contextIdentifier
T@"NSString",&,N,V_actionDescription
T@"NSString",&,N,V_ongoingDescription
T@"NSString",&,N,V_completedDescription
setManager:
performBlockAfterFirstUnlock:
beginMatchingExtensions
beginDailyMaintenanceWithActivity:
manager
compactStoreWithCompletionHandler:
countOfNotificationsReceived
setCountOfNotificationsReceived:
synchronizeExtensionsWithCompletionHandler:
callDirectoryNSExtensionManager:extensionsChanged:
deviceLockObserver
nsExtensionManager
_deviceLockObserver
_manager
_nsExtensionManager
_countOfNotificationsReceived
T@"<CSDDeviceLockStateObserver>",R,N,V_deviceLockObserver
T@"CXCallDirectoryManager",&,N,V_manager
T@"CXCallDirectoryNSExtensionManager",R,N,V_nsExtensionManager
TQ,N,V_countOfNotificationsReceived
setMutuallyExclusiveCall:
initWithTinCanIDSChat:
isCSCallingAvailable
setCsCallingAvailable:
isVoLTECallingAvailable
setVoLTECallingAvailable:
isWifiCallingAvailable
setWiFiCallingAvailable:
isEmergencyCallingOnWifiAllowed
setWiFiEmergencyCallingAllowed:
isEmergencyCallingOnWifiAvailable
setWiFiEmergencyCallingAvailable:
isWiFiCallingAvailable
isWiFiEmergencyCallingAllowed
isWiFiEmergencyCallingAvailable
callCapabilitiesForCTCallCapabilities:
callCapabilitiesForCallManagementStateInfo:
_csCallingAvailable
_voLTECallingAvailable
_wiFiCallingAvailable
_wiFiEmergencyCallingAllowed
_wiFiEmergencyCallingAvailable
csCallingAvailable
TB,N,GisCSCallingAvailable,V_csCallingAvailable
voLTECallingAvailable
TB,N,GisVoLTECallingAvailable,V_voLTECallingAvailable
wiFiCallingAvailable
TB,N,GisWiFiCallingAvailable,V_wiFiCallingAvailable
wiFiEmergencyCallingAllowed
TB,N,GisWiFiEmergencyCallingAllowed,V_wiFiEmergencyCallingAllowed
wiFiEmergencyCallingAvailable
TB,N,GisWiFiEmergencyCallingAvailable,V_wiFiEmergencyCallingAvailable
streamTokenForStreamGroupID:
captionsToken
numberWithFloat:
addOtherUniqueProxyIdentifiers:
addProviders:
addRoutes:
addEndpointIDSDestinationURIs:
setOBSOLETEConferenceIdentifier:
setCallerNameFromNetwork:
protoCallsCount
clearProtoCalls
protoCallAtIndex:
setDummyPayload:
otherUniqueProxyIdentifiersCount
clearOtherUniqueProxyIdentifiers
otherUniqueProxyIdentifiersAtIndex:
providersCount
clearProviders
providersAtIndex:
remoteParticipantHandlesCount
clearRemoteParticipantHandles
remoteParticipantHandlesAtIndex:
routesCount
clearRoutes
routesAtIndex:
setRoute:
endpointIDSDestinationURIsCount
clearEndpointIDSDestinationURIs
endpointIDSDestinationURIsAtIndex:
protoCallType
otherUniqueProxyIdentifiersType
providersType
remoteParticipantHandlesType
routesType
endpointIDSDestinationURIsType
hasUniqueProxyIdentifier
hasDestinationID
hasSourceIdentifier
hasProtoCallModelState
setHasProtoService:
hasProtoService
setHasProtoWantsHoldMusic:
hasProtoWantsHoldMusic
setHasProtoCannotBeAnswered:
hasProtoCannotBeAnswered
hasProtoDTMFKey
setHasProtoDisconnectedReason:
hasProtoDisconnectedReason
hasOBSOLETEConferenceIdentifier
setHasProtoVoicemail:
hasProtoVoicemail
hasCallerNameFromNetwork
hasHardPauseDigits
setHasHardPauseState:
hasHardPauseState
setReceivedMessageType:
setHasReceivedMessageType:
hasReceivedMessageType
receivedMessageTypeAsString:
StringAsReceivedMessageType:
setHasProtoProtocolVersion:
hasProtoProtocolVersion
setHasProtoShouldSuppressRingtone:
hasProtoShouldSuppressRingtone
hasDummyPayload
setHostCallCreationTime:
setHasHostCallCreationTime:
hasHostCallCreationTime
setHasMessageSendTime:
hasMessageSendTime
setHasProtoNeedsManualInCallSounds:
hasProtoNeedsManualInCallSounds
setHasProtoCannotRelayAudioOrVideoOnPairedDevice:
hasProtoCannotRelayAudioOrVideoOnPairedDevice
setHasProtoExpectedEndpointOnMessagingDevice:
hasProtoExpectedEndpointOnMessagingDevice
hasContactIdentifier
hasProtoCallCapabilitiesState
setProtoSoundRegion:
setHasProtoSoundRegion:
hasProtoSoundRegion
setHasProtoEmergency:
hasProtoEmergency
hasProtoCallModel
setHasProtoSOS:
hasProtoSOS
hasProtoDisplayContext
hasInviteData
hasProtoProvider
setHasProtoVideo:
setHasProtoUplinkMuted:
hasProtoUplinkMuted
setHasProtoRemoteUplinkMuted:
hasProtoRemoteUplinkMuted
setSystemVolume:
setHasSystemVolume:
hasSystemVolume
hasLocalSenderIdentityUUIDString
hasLocalSenderIdentityAccountUUIDString
setHasProtoTTYType:
hasProtoTTYType
setHasProtoSupportsTTYWithVoice:
hasProtoSupportsTTYWithVoice
requestActionType
setRequestActionType:
setHasRequestActionType:
hasRequestActionType
requestActionTypeAsString:
StringAsRequestActionType:
hasRoute
setHasProtoPriority:
hasProtoPriority
setHasProtoOriginatingUIType:
hasProtoOriginatingUIType
setHasProtoFailureExpected:
hasProtoFailureExpected
setHasProtoSupportsEmergencyFallback:
hasProtoSupportsEmergencyFallback
oBSOLETEConferenceIdentifier
setProtoCalls:
dummyPayload
protoSoundRegion
otherUniqueProxyIdentifiers
setOtherUniqueProxyIdentifiers:
systemVolume
setRoutes:
route
protoPriority
_hostCallCreationTime
_messageSendTime
_callerNameFromNetwork
_contactIdentifier
_destinationID
_dummyPayload
_endpointIDSDestinationURIs
_hardPauseDigits
_hardPauseState
_inviteData
_localSenderIdentityAccountUUIDString
_localSenderIdentityUUIDString
_oBSOLETEConferenceIdentifier
_otherUniqueProxyIdentifiers
_protoCallCapabilitiesState
_protoCallModel
_protoCallModelState
_protoCalls
_protoDTMFKey
_protoDisconnectedReason
_protoDisplayContext
_protoOriginatingUIType
_protoPriority
_protoProtocolVersion
_protoProvider
_protoService
_protoSoundRegion
_protoTTYType
_providers
_receivedMessageType
_remoteParticipantHandles
_requestActionType
_route
_routes
_sourceIdentifier
_systemVolume
_uniqueProxyIdentifier
_protoCannotBeAnswered
_protoCannotRelayAudioOrVideoOnPairedDevice
_protoEmergency
_protoExpectedEndpointOnMessagingDevice
_protoFailureExpected
_protoNeedsManualInCallSounds
_protoRemoteUplinkMuted
_protoSOS
_protoShouldSuppressRingtone
_protoSupportsEmergencyFallback
_protoSupportsTTYWithVoice
_protoUplinkMuted
_protoVideo
_protoVoicemail
_protoWantsHoldMusic
T@"NSString",&,N,V_uniqueProxyIdentifier
T@"NSString",&,N,V_destinationID
T@"NSString",&,N,V_sourceIdentifier
T@"CSDMessagingCallModelState",&,N,V_protoCallModelState
TI,N,V_protoService
TB,N,V_protoWantsHoldMusic
TB,N,V_protoCannotBeAnswered
T@"NSData",&,N,V_protoDTMFKey
TI,N,V_protoDisconnectedReason
T@"NSString",&,N,V_oBSOLETEConferenceIdentifier
TB,N,V_protoVoicemail
T@"NSString",&,N,V_callerNameFromNetwork
T@"NSMutableArray",&,N,V_protoCalls
T@"NSString",&,N,V_hardPauseDigits
TI,N,V_hardPauseState
Ti,N,V_receivedMessageType
TI,N,V_protoProtocolVersion
TB,N,V_protoShouldSuppressRingtone
T@"NSData",&,N,V_dummyPayload
Td,N,V_hostCallCreationTime
Td,N,V_messageSendTime
TB,N,V_protoNeedsManualInCallSounds
TB,N,V_protoCannotRelayAudioOrVideoOnPairedDevice
TB,N,V_protoExpectedEndpointOnMessagingDevice
T@"NSString",&,N,V_contactIdentifier
T@"CSDMessagingCallCapabilitiesState",&,N,V_protoCallCapabilitiesState
TI,N,V_protoSoundRegion
TB,N,V_protoEmergency
T@"NSMutableArray",&,N,V_otherUniqueProxyIdentifiers
T@"CSDMessagingCallModel",&,N,V_protoCallModel
TB,N,V_protoSOS
T@"NSMutableArray",&,N,V_providers
T@"CSDMessagingCallDisplayContext",&,N,V_protoDisplayContext
T@"CSDMessagingAVConferenceInviteData",&,N,V_inviteData
T@"CSDMessagingCallProvider",&,N,V_protoProvider
TB,N,V_protoVideo
TB,N,V_protoUplinkMuted
TB,N,V_protoRemoteUplinkMuted
Tf,N,V_systemVolume
T@"NSString",&,N,V_localSenderIdentityUUIDString
T@"NSMutableArray",&,N,V_remoteParticipantHandles
T@"NSString",&,N,V_localSenderIdentityAccountUUIDString
TI,N,V_protoTTYType
TB,N,V_protoSupportsTTYWithVoice
Ti,N,V_requestActionType
T@"NSMutableArray",&,N,V_routes
T@"CSDMessagingRoute",&,N,V_route
T@"NSMutableArray",&,N,V_endpointIDSDestinationURIs
TI,N,V_protoPriority
TI,N,V_protoOriginatingUIType
TB,N,V_protoFailureExpected
TB,N,V_protoSupportsEmergencyFallback
serviceForClientIdentifier:
_callFilterIdentifier
behaviorResolutionService
resolveBehaviorForEventDetails:error:
interruptionSuppression
setFilterBlock:
isDestinationIDAllowedThroughDoNotDisturb:providerIdentifier:
networkCountryCode
_behaviorResolutionService
_callProviderManager
T@"DNDEventBehaviorResolutionService",R,N,V_behaviorResolutionService
T@"TUCallProviderManager",R,N,V_callProviderManager
exceptionWithName:reason:userInfo:
raise
addHandoffIdentifier:
addEmergencyLabeledHandles:
addPrioritizedSenderIdentities:
addEmergencyHandles:
setLocalizedName:
setBundleURLString:
setRingtoneSoundURLString:
setOriginalRingtoneSoundURLString:
handoffIdentifiersCount
clearHandoffIdentifiers
handoffIdentifierAtIndex:
protoSupportedHandleTypesCount
clearProtoSupportedHandleTypes
protoSupportedHandleTypeAtIndex:
addProtoSupportedHandleType:
emergencyLabeledHandlesCount
clearEmergencyLabeledHandles
emergencyLabeledHandlesAtIndex:
prioritizedSenderIdentitiesCount
clearPrioritizedSenderIdentities
prioritizedSenderIdentitiesAtIndex:
emergencyHandlesCount
clearEmergencyHandles
emergencyHandlesAtIndex:
handoffIdentifierType
emergencyLabeledHandlesType
prioritizedSenderIdentitiesType
emergencyHandlesType
hasLocalizedName
hasBundleURLString
setMaximumCallGroups:
setHasMaximumCallGroups:
hasMaximumCallGroups
setMaximumCallsPerCallGroup:
setHasMaximumCallsPerCallGroup:
hasMaximumCallsPerCallGroup
setSupportsAudioOnly:
setHasSupportsAudioOnly:
hasSupportsAudioOnly
setSupportsAudioAndVideo:
setHasSupportsAudioAndVideo:
hasSupportsAudioAndVideo
setSupportsEmergency:
setHasSupportsEmergency:
hasSupportsEmergency
setSupportsVoicemail:
setHasSupportsVoicemail:
hasSupportsVoicemail
hasRingtoneSoundURLString
hasOriginalRingtoneSoundURLString
protoSupportedHandleTypes
setProtoSupportedHandleTypes:count:
setSupportsRecents:
setHasSupportsRecents:
hasSupportsRecents
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
setHandoffIdentifiers:
emergencyLabeledHandles
setEmergencyLabeledHandles:
supportsRecents
setPrioritizedSenderIdentities:
emergencyHandles
setEmergencyHandles:
_protoSupportedHandleTypes
_bundleURLString
_emergencyHandles
_emergencyLabeledHandles
_handoffIdentifiers
_localizedName
_maximumCallGroups
_maximumCallsPerCallGroup
_originalRingtoneSoundURLString
_prioritizedSenderIdentities
_ringtoneSoundURLString
_supportsAudioAndVideo
_supportsAudioOnly
_supportsEmergency
_supportsRecents
_supportsVoicemail
T@"NSString",&,N,V_identifier
T@"NSString",&,N,V_localizedName
T@"NSString",&,N,V_bundleURLString
TI,N,V_maximumCallGroups
TI,N,V_maximumCallsPerCallGroup
TB,N,V_supportsAudioOnly
TB,N,V_supportsAudioAndVideo
TB,N,V_supportsEmergency
TB,N,V_supportsVoicemail
T@"NSString",&,N,V_ringtoneSoundURLString
T@"NSString",&,N,V_originalRingtoneSoundURLString
T@"NSMutableArray",&,N,V_handoffIdentifiers
T^I,R,N
T@"NSMutableArray",&,N,V_emergencyLabeledHandles
TB,N,V_supportsRecents
T@"NSMutableArray",&,N,V_prioritizedSenderIdentities
T@"NSMutableArray",&,N,V_emergencyHandles
initWithQueue:callContainer:sessionMessenger:
_handleConferenceConnectionWillClose:
_handleConferenceConnectionDidClose:
_handleConferenceConnectionDidReceiveData:
dialingIDSDevice
sessionMessenger
prepareConnectedSessionsToEnd
endEndingSessions
clientMessagingDelegate
commonMessagingDelegate
handleSetUplinkMutedMessage:
setDialingIDSDevice:
isPairedDevice
outgoingRelayCallerID
deviceWithActiveSession
pairedDevice
identifiersForSessionInvitationWithMessage:
initWithRelayInviteDictionary:
sendMessage:andAcceptInvitationIfNecessaryForIdentifier:
cancelOrDeclineInvitationForIdentifier:
pairedDeviceMessenger
sendMessage:completionHandler:
sendMessage:andStartSessionIfNecessaryForIdentifier:toDevicesSupportingProvider:withTimeout:
prepareConferenceForCall:remoteInviteDictionary:completion:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:completionHandler:
_shouldSendToPairedIDSDevice
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier:
sendMessage:wantsAcknowledgement:completionHandler:
sendMessage:forIdentifier:
sendData:throughConferenceForIdentifier:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
sendDialCallFailedForUniqueProxyIdentifier:withDisconnectedReason:
deviceForService:
isGuest
canReceiveMessagesForCallProvider:
sendCallAnsweredElsewhereMessageToClientForCall:
hostMessagingDelegate
sendMessage:andStartSessionIfNecessaryForIdentifiers:toDestination:timeout:completionHandler:
pushHostedCallsForRemoteInviteDictionary:destination:completion:
initWithTURoute:
_updateDialingIDSDevice
sendMessage:andStartSessionIfNecessaryForIdentifier:toDestination:timeout:completionHandler:
disconnectCall:withReason:
cannotRelayAudioOrVideo
sessionProtocolVersionForIdentifier:
callWithStatus:
sendHoldCallMessageToHostForCall:
sendAnswerCallMessageToHostForCall:
sendMessage:timeout:wantsAcknowledgement:maximumRetryAttempts:completionHandler:
sendMessage:forIdentifier:toDestinations:
canReceiveRelayedCalls
shouldProcessRelayMessageOfType:
reportRelayMessageReceived:fromPairedDevice:
shouldScreenTimeRestrictMessage:
sendDialCallFailedForScreenTimeForUniqueProxyIdentifier:
_handleRetrievedLocalInviteDictionary:forMessage:
handleDialCallMessageFromClient:destination:device:completion:
handleAnswerCallMessageFromClient:destination:device:
handlePlayDTMFToneForKeyMessage:
handleHoldCallMessageFromClient:
handleUnholdCallMessageFromClient:
handleGroupCallMessageFromClient:
handleUngroupCallMessageFromClient:
handleDisconnectCallMessageFromClient:
handleSwapCallsMessageFromClient:
handleEndActiveAndAnswerMessageFromClient:
handleEndHeldAndAnswerMessageFromClient:
handleDisconnectCurrentCallAndActivateHeldMessageFromClient:
handleDisconnectAllCallsMessageFromClient:
handleSendHardPauseDigitsMessageFromClient:
handleSuppressRingtoneMessage:
handleRequestCallContextMessageFromClient:
handlePullHostedCallsMessageFromClient:destination:completion:
handlePushRelayingCallsMessageFromClient:
handleHoldActiveAndAnswerMessageFromClient:
handleUpdateSystemVolumeMessageFromHost:
handleSetTTYTypeMessage:
handleRequestActionMessage:
handlePickRouteMessageFromClient:
shouldDeclineSessionInviteWithMessageWhenRelayIsDisabled:
_callsWithUniqueProxyIdentifiers:
messagingConnectionEndedForCalls:didStartConnecting:
messagingConnectionFailedForCalls:didStartConnecting:
messagingConnectionCouldNotEstablishLinkForCalls:didStartConnecting:
_shouldDeclineSessionInviteWithMessage:
allowCallForDestinationID:providerIdentifier:
allowCallForDestinationID
shouldPreferRelayOverDirectSecondaryCallingForProvider:isVideo:
isDirectTelephonyCallingCurrentlyAvailable
isDirectFaceTimeAudioCallingCurrentlyAvailable
isDirectFaceTimeVideoCallingCurrentlyAvailable
callFilterController
bundleIdentifierForProvider:
performBlockOnTransportAvailability:forIdentifier:
prepareSessionToEndForIdentifier:
messenger:handledMessage:fromDestination:device:
messengerConnectionEnded:forIdentifiers:didStartConnecting:
messengerConnectionFailed:forIdentifiers:didStartConnecting:
messengerConnectionCouldNotEstablishLink:forIdentifiers:didStartConnecting:
shouldDeclineSecondSessionInviteWithMessage:
shouldIgnoreSessionInviteWithMessage:fromDestination:
timeoutForInvitationWithMessage:
_relayInvitationTimeoutForTimeout:
sendIncomingCallMessageToClientForCall:cannotBeAnswered:cannotRelayAudioOrVideoOnPairedDevice:
sendCallDialedMessageToClientForCall:
sendCallDisconnectedMessageToClientForCall:
sendCallConnectedMessageToClientForCall:
sendResetWantsHoldMusicMessageToClientForCall:
sendUpdateCallDisplayContextMessageToClientForCall:
sendUpdateFailureExpectedMessageToClientForCall:
sendUpdateSupportsEmergencyFallbackToClientForCall:
sendUpdateRemoteUplinkMutedCallMessageToClientForCall:
sendUpdateSupportsTTYWithVoiceCallMessageToClientForCall:
sendUpdateCallModelMessageToClientForCall:
sendDeviceUnavailableMessageToClientForUniqueProxyIdentifier:
sendPullRelayingCallsMessageToClient
sendResetStateMessageToClient
sendHardPauseAvailabilityMessageToClientForState:digits:
sendUpdateRemoteCallStateMessageToClient
sendCallStartedConnectingMessageToClientForCall:
sendDialCallFailedForUniqueProxyIdentifier:
sendPushCallsMessageToClientDestination:
sendUpdateCallContextMessageToClientForCallProviderManager:
sendNeedsManualInCallSoundsChangeMessageToClientForCall:
sendInvitationSentMessageToClientForCall:
sendUpdateRoutesMessageToClientForRoutes:
sendDialCallMessageToHostForCall:completionHandler:
sendDisconnectCallMessageToHostForCall:
sendUnholdCallMessageToHostForCall:
sendGroupCallMessageToHostForCall:otherCall:
sendUngroupCallMessageToHostForCall:
sendSwapCallsMessageToHost
sendEndActiveAndAnswerCallMessageToHostForCall:
sendEndHeldAndAnswerCallMessageToHostForCall:
sendHoldActiveAndAnswerCallMessageToHostForCall:
sendDisconnectCurrentCallAndActivateHeldMessageToHostForDisconnectedCall:
sendDisconnectAllCallsMessageToHostForDisconnectedCall:
sendSendHardPauseDigitsMessageToHostForCall:
sendRequestCallStateMessageToHost
sendPullCallsMessageToHost
sendPushRelayingCallsMessageToHostForSourceIdentifier:
sendUpdateRemoteUplinkMutedCallMessageToHostForCall:
sendPickRouteMessageToHostForRoute:
sendPlayDTMFToneForKeyMessageForCall:DTMFKey:
sendSetTTYTypeCallMessageForCall:ttyType:
sendSetUplinkMutedCallMessageForCall:uplinkMuted:
sendSuppressRingtoneMessageForCall:
sendUpdateSystemVolumeForCall:volume:
requestAnswerForRequest:forCall:
prepareToDisconnectMessagingConnectionForCall:
disconnectMessagingConnectionForCall:
setClientMessagingDelegate:
setHostMessagingDelegate:
setCommonMessagingDelegate:
_clientMessagingDelegate
_hostMessagingDelegate
_commonMessagingDelegate
_sessionMessenger
_pairedDeviceMessenger
_dialingIDSDevice
T@"CSDRelayIDSSessionMessenger",R,N,V_sessionMessenger
T@"CSDRelayPairedDeviceMessenger",R,N,V_pairedDeviceMessenger
T@"IDSDevice",&,N,V_dialingIDSDevice
T@"<CSDCallContainer>",R,N,V_callCenter
T@"<CSDRelayMessagingControllerDelegate>",W,N,V_delegate
T@"<CSDRelayMessagingControllerClientMessagingDelegate>",W,N,V_clientMessagingDelegate
T@"<CSDRelayMessagingControllerHostMessagingDelegate>",W,N,V_hostMessagingDelegate
T@"<CSDRelayMessagingControllerCommonMessagingDelegate>",W,N,V_commonMessagingDelegate
setMediaBlob:
setCallInfoBlob:
setSKEBlob:
mediaBlob
callInfoBlob
sKEBlob
_setUpSandbox
recentsController
clearNotificationsIfNecessary
voipApplicationController
handleApplicationUninstalledNotification:
applicationPolicyManager
setSignalHandlerDispatchSources:
_observeSignal:usingHandler:
setUserConfiguration:
setDeviceLockStateObserver:
deviceLockStateObserver
perform
setVoiceOverObserver:
setCallStateMonitor:
setRelayMessagingController:
addReporter:
isFaceTimePhotosXPCServiceEnabled
setMomentsController:
momentsController
setStatusBarManager:
setHandoffAudioController:
setCallDirectoryManager:
setVoipApplicationController:
setRelayClientController:
relayClientController
setRelayHostController:
relayHostController
setRelayCommonController:
relayCommonController
setApplicationPolicyManager:
setProximitySensorObserver:
setProximityController:
setRaiseToAnswerController:
initWithVoiceOverObserver:
setAudioController:
audioController
_setUpLanguageChangeListener
initWithCallFilterController:
signalHandlerDispatchSources
string
stringWithUTF8String:
_setUpTemporaryDirectory
userConfiguration
propertiesDidChangeForConfiguration:
conversationProviderManagerXPCServer
conversationProviderManager
callStateMonitor
callDirectoryManager
userNotificationController
setUserNotificationController:
orientationMonitor
setOrientationMonitor:
proximityController
raiseToAnswerController
powerAssertionManager
setPowerAssertionManager:
handoffAudioController
statusBarManager
_conversationProviderManagerXPCServer
_conversationProviderManager
_callStateMonitor
_relayMessagingController
_relayClientController
_relayHostController
_relayCommonController
_callDirectoryManager
_voipApplicationController
_momentsController
_userConfiguration
_userNotificationController
_signalHandlerDispatchSources
_deviceLockStateObserver
_orientationMonitor
_proximityController
_raiseToAnswerController
_powerAssertionManager
_audioController
_handoffAudioController
_statusBarManager
_applicationPolicyManager
T@"<TUFeatureFlags>",&,N,V_featureFlags
T@"CSDConversationProviderManagerXPCServer",R,N,V_conversationProviderManagerXPCServer
T@"CSDConversationProviderManager",R,N,V_conversationProviderManager
T@"CSDCallStateMonitor",&,N,V_callStateMonitor
T@"CSDRelayMessagingController",&,N,V_relayMessagingController
T@"CSDRelayClientController",&,N,V_relayClientController
T@"CSDRelayHostController",&,N,V_relayHostController
T@"CSDRelayCommonController",&,N,V_relayCommonController
T@"CSDCallDirectoryManager",&,N,V_callDirectoryManager
T@"CSDVoIPApplicationController",&,N,V_voipApplicationController
T@"CSDMomentsController",&,N,V_momentsController
T@"TUUserConfiguration",&,N,V_userConfiguration
T@"CSDUserNotificationController",&,N,V_userNotificationController
T@"CSDVoiceOverObserver",&,N,V_voiceOverObserver
T@"NSMutableArray",&,N,V_signalHandlerDispatchSources
T@"CSDDeviceLockStateObserver",&,N,V_deviceLockStateObserver
T@"CSDOrientationMonitor",&,N,V_orientationMonitor
T@"CSDProximityController",&,N,V_proximityController
T@"CSDProximitySensorObserver",&,N,V_proximitySensorObserver
T@"CSDRaiseToAnswerController",&,N,V_raiseToAnswerController
T@"CSDPowerAssertionManager",&,N,V_powerAssertionManager
T@"CSDAudioController",&,N,V_audioController
T@"CSDHandoffAudioController",&,N,V_handoffAudioController
T@"CSDStatusBarManager",&,N,V_statusBarManager
T@"CPApplicationPolicyManager",&,N,V_applicationPolicyManager
initWithCapabilities:queue:
mutableChats
phoneNumberWithDigits:countryCode:
unformattedInternationalRepresentation
isWiFiAvailable
isWiFiAllowed
isCellularDataAvailable
isCellularDataAllowed
shouldOverrideNetworkAsAvailable
handleWithDestinationID:
serviceIdentifier
initWithUUID:isVideo:handle:
shouldAcceptIncomingInvite
callUpdateForPendingChat:
reportCallWithUUID:endedAtDate:reason:
setRequiresAuthentication:
incomingSessionProviderGenerator
initAsReceiverWithSessionProvider:remoteFromID:remoteProtocolVersion:
waitingChatWithHandle:isOutgoing:
incomingChatGenerator
callUpdateForChat:
loginID
updateCacheWithChat:
TUCallRemoteVideoPresentationStateFromCXVideoPresentationState:
isCellularDataPreferred
reportCallWithUUID:changedMeterLevel:forDirection:
handleByFullyQualifyingHandle:usingCountryCode:
chats
setIncomingSessionProviderGenerator:
setIncomingChatGenerator:
_shouldOverrideNetworkAsAvailable
_mutableChats
_incomingSessionProviderGenerator
_incomingChatGenerator
T@"<CSDIDSProviderDelegateCapabilities>",R,N,V_capabilities
T@"NSMutableOrderedSet",R,N,V_mutableChats
TB,R,N,V_shouldOverrideNetworkAsAvailable
T@?,C,N,V_incomingSessionProviderGenerator
T@?,C,N,V_incomingChatGenerator
hasSKEBlob
hasMediaBlob
hasCallInfoBlob
_callInfoBlob
_mediaBlob
_sKEBlob
T@"NSData",&,N,V_sKEBlob
T@"NSData",&,N,V_mediaBlob
T@"NSData",&,N,V_callInfoBlob
initWithSessionProvider:
propertiesDescription
remoteProtocolVersionNumber
setHasStartedConnecting:
setHasConnected:
setRemoteProtocolVersionNumber:
initWithSocket:
initWithDestination:
setInitialLinkType:
initAsInitiatorWithSessionProvider:
initAsReceiverWithSessionProvider:remoteProtocolVersion:
remoteProtocolVersion
setReceiverProtocolVersion:
sendInvitation
cancelInvitation
_hasStartedConnecting
_hasConnected
_remoteProtocolVersionNumber
_sessionProvider
T@"NSNumber",&,N,V_remoteProtocolVersionNumber
Ti,N,V_endedReason
TB,N,V_hasStartedConnecting
TB,N,V_hasConnected
T@"<CSDIDSDualSessionProvider>",R,N,V_sessionProvider
T@"<CSDIDSDualSessionDelegate>",W,N,V_delegate
TB,R,N,GisInitiator,V_initiator
T@"CSDIDSTransport",R,N
T@"<CSDRelayIDSMessengerDelegate>",W,N,V_delegate
doesNotRecognizeSelector:
phoneNumberMCCToISOCountryCodeTransformBlock
initWithAccountID:primaryDeviceID:phoneNumberURI:availableDeviceSlots:allowedSecondaryDeviceIDs:
primaryDeviceID
phoneNumberURI
availableDeviceSlots
isEqualToAccount:
setPhoneNumberMCCToISOCountryCodeTransformBlock:
mutableCopyWithZone:
T@?,C,N
containsRegisteredDeviceID:
setAccountID:
setPrimaryDeviceID:
setPhoneNumberURI:
setAvailableDeviceSlots:
setAllowedSecondaryDeviceIDs:
_accountID
_primaryDeviceID
_phoneNumberURI
_availableDeviceSlots
_allowedSecondaryDeviceIDs
T@"NSString",C,N,V_accountID
T@"NSString",C,N,V_primaryDeviceID
T@"NSString",C,N,V_phoneNumberURI
Tq,N,V_availableDeviceSlots
T@"NSSet",C,N,V_allowedSecondaryDeviceIDs
T@"NSString",C,D,N
Tq,D,N
T@"NSSet",C,D,N
isLoaded
startBagLoad
canSend
initWithAccount:destinations:options:
accounts
isAccountActive
isQuickRelaySupported
facetimeIDSServiceGenerator
accountWithUUID:service:
isRetry
outgoingSessionProviderGenerator
outgoingChatGenerator
initWithAction:
providerDelegate:requestedTransaction:completion:
ISOCountryCodeForChat:
setISOCountryCode:
callForConversation:withSessionToken:
canUpgradeChat:
upgradeChatIfNecessary:
isEqualToData:
chatsPendingUpgrade
instancesRespondToSelector:
chatReceived:
setAccounts:
telephonySenderIdentities
updateProviderConfigurationWithAccounts:senderIdentities:
setTelephonySenderIdentities:
matchingSim
SIMIdentifier
updateProviderConfigurationWithAccounts:
inviteIDSPeersWithAction:destinations:joinCallActionToFulfill:completion:
upgradeCallForConversation:withSessionToken:
ISOCountryCodeForCallWithUUID:
isUpgradingCallWithUUID:
updateProviderConfigurationWithSenderIdentities:
setFacetimeIDSServiceGenerator:
setIsAccountActive:
setOutgoingSessionProviderGenerator:
setOutgoingChatGenerator:
upgradeTimeout
setUpgradeTimeout:
_accounts
_telephonySenderIdentities
_chatsPendingUpgrade
_facetimeIDSServiceGenerator
_isAccountActive
_outgoingSessionProviderGenerator
_outgoingChatGenerator
_upgradeTimeout
T@"NSSet",C,N,V_accounts
T@"<CSDFaceTimeIDSProviderDelegateCapabilities>",R,N,V_capabilities
T@"NSOrderedSet",C,N,V_telephonySenderIdentities
T@"NSMutableSet",R,N,V_chatsPendingUpgrade
T@"<CSDFaceTimeIDSProviderDelegateServerBag>",&,N,V_serverBag
T@?,C,N,V_facetimeIDSServiceGenerator
T@?,C,N,V_isAccountActive
T@?,C,N,V_outgoingSessionProviderGenerator
T@?,C,N,V_outgoingChatGenerator
Td,N,V_upgradeTimeout
setIdentifierUUIDString:
setApplicationContext:
setActivityIdentifier:
setActivityContext:
setUpdatedDateEpochTime:
fallbackApplicationName
setFallbackApplicationName:
setIsSystemActivity:
setTimestampAsTimeIntervalSinceReferenceDate:
title
subTitle
setSubtitle:
fallbackURL
absoluteString
setFallbackURL:
supportsContinuationOnTV
setSupportsContinuationOnTV:
preferredBroadcastingAttributes
setPreferredBroadcastingAttributes:
sceneAssociationBehavior
targetContentIdentifier
setTargetContentIdentifier:
shouldAssociateScene
setShouldAssociateScene:
setSceneAssociationBehavior:
setActivityMetadata:
setFromHandle:
imageData
setImage:
defaultBehavior
activityMetadata
hasSceneAssociationBehavior
initWithTargetContentIdentifier:shouldAssociateScene:
activityContext
URLWithString:
subtitle
image
initWithContext:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:preferredBroadcastingAttributes:sceneAssociationBehavior:
identifierUUIDString
initWithBundleIdentifier:metadata:applicationContext:uuid:activityIdentifier:fallbackApplicationName:
setOriginator:
fromHandle
setSystemActivity:
hasTimestampAsTimeIntervalSinceReferenceDate
timestampAsTimeIntervalSinceReferenceDate
dateWithTimeIntervalSinceReferenceDate:
updatedDateEpochTime
sanitizedCopy
tuConversationActivity
activityWithCSDConversationActivity:fromConversation:forStorage:
activityWithCSDConversationActivity:handle:
T@"TUConversationActivity",R,N
initWithUniqueProxyIdentifier:
setBehavior:
playLocalDTMFToneForKey:
uplinkMutedSetTime
setUplinkMutedSetTime:
setActiveCategoryVolume:
handleRequestedAnswerMessage:withBehavior:
initWithService:
transferFileAtTemporaryURL:toDestinations:withMetadata:
URLByDeletingLastPathComponent
defaultManager
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
path
fileExistsAtPath:isDirectory:
performFileCopierOperation:onInputURL:outputURL:completion:
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
clientFileURLByIdentifier
cleanUpTemporaryFileIfExistsForClientFileURL:
fileTransferer:didTransferFileAtURL:successfully:
temporaryFileURLByClientFileURL
zipDirectoryAtURL:completion:
copyFileAtURL:toTemporaryFileWithName:
fileTransferer:didReceiveResourcesAtURL:withMetadata:isZipped:fromIDSDestination:
stringByAppendingPathComponent:
fileURLWithPath:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
copyItemAtURL:toURL:error:
renamedResourceURL:withName:
moveItemAtURL:toURL:error:
pathComponents
removeLastObject
fileURLWithPathComponents:
removeItemAtURL:error:
stringByAppendingPathExtension:
didErrorOccur
cleanup
initWithInputURL:outputURL:identifier:operation:completionBlock:queue:
deleteContentsAtURL:
renameResourceAtURL:toResourceWithName:
transferFileAtURL:toDestinations:withMetadata:
unzipArchiveAtURL:completion:
T@"<CSDFileTransferringDelegate>",W,N
transferFileAtSandboxExtendedURL:toDestinations:withMetadata:
_service
_clientFileURLByIdentifier
_temporaryFileURLByClientFileURL
T@"IDSService",&,N,V_service
T@"NSMutableDictionary",R,N,V_clientFileURLByIdentifier
T@"NSMutableDictionary",R,N,V_temporaryFileURLByClientFileURL
T@"<CSDFileTransferringDelegate>",W,N,V_delegate
initWithSerialQueue:timeout:
serialQueue
callSourceWithIdentifier:
_waitForCallSourceWithIdentifier:completion:
pendingCompletions
timeout
fetchCallSourceForIdentifier:completion:
handleCallSourcesChanged
setSerialQueue:
setTimeout:
setPendingCompletions:
_serialQueue
_timeout
_pendingCompletions
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
Td,N,V_timeout
T@"NSMutableDictionary",&,N,V_pendingCompletions
T@"<CSDCallSourceFetcherDataSource>",W,N,V_dataSource
rangeOfString:
normalizedDeviceType
setRelayCallingEnabled:forDeviceWithID:
setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:
setThumperCallingAllowed:onSecondaryDeviceWithID:
updateUINotification
arrayWithObject:
dictionaryWithObjectsAndKeys:
responseInformation
setRelayCallingEnabled:
setThumperCallingEnabled:
supportsPhoneCalls
uriForFromID:
ctServiceType
serviceDescription
displayPinMessageForDevice:completionHandler:
enrollDevice:forSenderIdentityUUID:
unenrollDevice:
displayServiceConfirmationWithCompletionHandler:
displayPinRequestFailure
displayIncomingPinCode:fromID:completionHandler:
pinCodeEnteredSuccessfully:cancelled:onPrimaryDevice:
resetOneTimeMessage
_thumperCallingAllowedOnDefaultPairedDeviceDefault
TB,N,V_thumperCallingAllowedOnDefaultPairedDeviceDefault
setProtoStatus:
setHasProtoStatus:
hasProtoStatus
setProtoConferenced:
setHasProtoConferenced:
hasProtoConferenced
setProtoTimeConnected:
setHasProtoTimeConnected:
hasProtoTimeConnected
setProtoOutgoing:
setHasProtoOutgoing:
hasProtoOutgoing
setProtoHasSentInvitation:
setHasProtoHasSentInvitation:
hasProtoHasSentInvitation
protoStatus
protoConferenced
protoTimeConnected
protoOutgoing
protoHasSentInvitation
_protoTimeConnected
_protoStatus
_protoConferenced
_protoHasSentInvitation
_protoOutgoing
TI,N,V_protoStatus
TB,N,V_protoConferenced
Td,N,V_protoTimeConnected
TB,N,V_protoOutgoing
TB,N,V_protoHasSentInvitation
callRelaySupport
canBeAnsweredWithAudioOrVideoRelayWithRequest:
canOnlyBeAnsweredWithoutAudioOrVideoRelayWithRequest:
hasRelaySupport:
relayDelegate
localProviderWithIdentifier:
relayCall:didGroupWithOtherCall:
relayCallDidUngroup:
isMutedForIdentifier:
setMuted:forIdentifier:
isSendingAudioForIdentifier:
setSendingAudio:forIdentifier:
inputAudioPowerSpectrumTokenForIdentifier:
outputAudioPowerSpectrumTokenForIdentifier:
spatialAudioSourceIdentifierForIdentifier:
setCallStatus:
relayCallDidDial:
isConnecting
relayCall:didAnswerWithRequest:
relayCallDidDisconnect:
relayCallConferenceDidStartSuccessfullyForIncomingAnsweredCall:
relayCallConferenceFailedToStart:
relayCallConferenceDidStop:cleanly:error:
startConferenceForIdentifier:usingTransport:remoteInviteDictionary:didStartHandler:didStopHandler:
relayCallConferenceDidStartSuccessfullyForOutgoingDialedCall:
relayCallConferenceDidStartSuccessfullyForPulledCall:
relayCallDidHold:
relayCallDidUnhold:
relayCall:didPlayLocalDTMFToneForKey:
relayCallDidSendHardPauseDigits:
relayCallDidBecomeEndpointForPull:
dateStartedOutgoing
setDateStartedOutgoing:
dateSentInvitation
setDateSentInvitation:
prepareToStopConferenceForIdentifier:
canBeAnsweredWithRequest:
localProvider
startConferenceForAnsweredCallWithTransport:remoteInviteDictionary:
startConferenceForDialedCallWithTransport:remoteInviteDictionary:
startConferenceForPulledCallWithTransport:remoteInviteDictionary:
stopConference
setLocallyHasStartedOutgoing
setRelayDelegate:
_voicemail
_emergency
_failureExpected
_supportsEmergencyFallback
_sos
_needsManualInCallSounds
_supportsTTYWithVoice
_cannotRelayAudioOrVideo
_callStatus
_callGroupUUID
_displayContext
_initialLinkType
_localSenderIdentityAccountUUID
_relayDelegate
T@"<CSDRelayCallDelegate>",W,N,V_relayDelegate
T@"TUHandle",&,N,V_handle
T@"NSString",C,N,V_isoCountryCode
Ti,N,V_callStatus
T@"NSUUID",C,N,V_callGroupUUID
T@"TUCallProvider",&,N,V_provider
TB,N,GisOutgoing,V_outgoing
TB,N,GisVoicemail,V_voicemail
TB,N,GisEmergency,V_emergency
TB,N,GisFailureExpected,V_failureExpected
TB,N,V_supportsEmergencyFallback
TB,N,GisSOS,SsetSOS:,V_sos
T@"NSString",C,N,V_callerNameFromNetwork
TB,N,V_needsManualInCallSounds
T@"TUCallDisplayContext",C,N,V_displayContext
TB,N,V_cannotRelayAudioOrVideo
TQ,N,V_initialLinkType
T@"TUCallProvider",R,N
T@"NSUUID",&,N,V_localSenderIdentityUUID
T@"NSUUID",&,N,V_localSenderIdentityAccountUUID
T@"NSSet",C,N,V_remoteParticipantHandles
TB,N,V_supportsTTYWithVoice
Ti,N,V_originatingUIType
callHistoryManagerClientXPCInterface
callHistoryManagerServerXPCInterface
callHistoryManager
updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:
recentCallsDidChangeForCallHistoryManager:
initWithManager:
_callHistoryManager
T@"CSDCallHistoryManager",R,N,V_callHistoryManager
_parsePauseDigitsFromDestinationID:
pauseDigits
removeObjectAtIndex:
characterSetWithCharactersInString:
formUnionWithCharacterSet:
rangeOfCharacterFromSet:options:range:
substringWithRange:
characterAtIndex:
characterIsMember:
insertObject:atIndex:
setBaseDestinationID:
setOriginalPauseDigitsString:
setPauseDigits:
_baseDestinationID
_originalPauseDigitsString
_pauseDigits
T@"NSString",C,N,V_baseDestinationID
T@"NSString",C,N,V_originalPauseDigitsString
T@"NSMutableArray",&,N,V_pauseDigits
T@"<CSDPauseDigitsQueueDelegate>",W,N,V_delegate
T@"CSDPauseDigits",R,N
initWithObject:queue:
processName
processBundleIdentifier
valueForEntitlement:
entitledCapabilities
connection
remoteObjectProxy
targetWithPid:
attributeWithDomain:name:
initWithExplanation:target:attributes:
supportsClientAssertions
isEntitledForCapability:
newProcessAssertion
acquireWithError:
acquireAssertionIfNecessary
addBarrierBlock:
initWithConnection:queue:
performBlockAfterCoalescing:
setSupportsClientAssertions:
_supportsClientAssertions
_processIdentifier
_processName
_processBundleIdentifier
_entitledCapabilities
T@"NSXPCConnection",R,N
T@"NSSet",R,C,N,V_entitledCapabilities
T@"RBSAssertion",&,N,V_processAssertion
TB,N,V_supportsClientAssertions
sharedUtilityProvider
utilityProvider
currentPreferredTransportMethod
transportMethod
T@"RTTTelephonyUtilities",R,N
bundleURL
ringtoneSoundURL
originalRingtoneSoundURL
supportedHandleTypes
setSupportedHandleTypes:
setEmergencyTUHandles:
setEmergencyTULabeledHandles:
setPrioritizedTUSenderIdentities:
setBundleURL:
isFileURL
bundleWithURL:
setRingtoneSoundURL:
setOriginalRingtoneSoundURL:
emergencyTUHandles
emergencyTULabeledHandles
prioritizedTUSenderIdentities
unsignedIntValue
orderedSetWithCapacity:
tuSenderIdentity
initWithTUSenderIdentity:
T@"TUCallProvider",R,C,N
T@"NSArray",C,N
T@"NSOrderedSet",C,N,SsetPrioritizedTUSenderIdentities:
removeServiceDelegate:
identifiersWaitingForAcknowledgement
pairedDeviceUniqueIDOverrideExists
_sendMessageOptionsWithTimeout:wantsAcknowledgement:
sendData:toDestinations:priority:options:identifier:error:
_retryReliableMessageWithIdentifierIfNecessary:message:timeout:maximumRetryAttempts:
setIdentifiersWaitingForAcknowledgement:
_identifiersWaitingForAcknowledgement
T@"NSMutableSet",&,N,V_identifiersWaitingForAcknowledgement
hasTargetContentIdentifier
setHasShouldAssociateScene:
hasShouldAssociateScene
_targetContentIdentifier
_shouldAssociateScene
T@"NSString",&,N,V_targetContentIdentifier
TB,N,V_shouldAssociateScene
givenName
setGivenName:
middleName
setMiddleName:
familyName
setFamilyName:
namePrefix
setNamePrefix:
nameSuffix
setNameSuffix:
phoneticRepresentation
setPhoneticRepresentation:
initWithPersonNameComponents:
personNameComponents
T@"NSPersonNameComponents",R,C,N
setRemoteIDSDestination:
setInputAudioPowerSpectrumToken:
setOutputAudioPowerSpectrumToken:
setSpatialAudioSourceIdentifier:
remoteIDSDestination
T@"CXCallUpdate",R,C,N
setProviderSource:
_endpointOnCurrentDevice
TB,N,GisEndpointOnCurrentDevice,V_endpointOnCurrentDevice
T@"CXAbstractProviderSource",&,N,V_providerSource
addMembers:
addOtherInvitedHandles:
addLightweightMembers:
membersCount
clearMembers
membersAtIndex:
setMessagesGroupUUIDString:
setActivitySession:
setProviderIdentifier:
otherInvitedHandlesCount
clearOtherInvitedHandles
otherInvitedHandlesAtIndex:
lightweightMembersCount
clearLightweightMembers
lightweightMembersAtIndex:
membersType
otherInvitedHandlesType
lightweightMembersType
hasMessage
hasMessagesGroupUUIDString
hasMessagesGroupName
hasActivitySession
hasProviderIdentifier
setHasVideoEnabled:
hasVideoEnabled
hasParticipantAssociation
hasCollaborationIdentifier
members
setMembers:
message
messagesGroupUUIDString
activitySession
providerIdentifier
_activitySession
_members
_message
_messagesGroupUUIDString
_providerIdentifier
T@"NSMutableArray",&,N,V_members
T@"CSDMessagingConversationMessage",&,N,V_message
T@"NSString",&,N,V_messagesGroupUUIDString
T@"NSString",&,N,V_messagesGroupName
T@"CSDMessagingConversationActivitySession",&,N,V_activitySession
TB,N,V_video
T@"NSString",&,N,V_providerIdentifier
T@"NSMutableArray",&,N,V_otherInvitedHandles
T@"NSMutableArray",&,N,V_lightweightMembers
TB,N,V_videoEnabled
T@"CSDMessagingConversationParticipantAssociation",&,N,V_participantAssociation
T@"NSString",&,N,V_collaborationIdentifier
sharedPhotoLibrary
creationRequestForAsset
setShouldMoveFile:
addResourceWithType:fileURL:options:
placeholderForCreatedAsset
localIdentifier
performChanges:completionHandler:
saveLivePhotoWithPhotoURL:videoURL:completion:
saveVideoWithURL:completion:
tuConversationParticipantAssociation
participantAssociationWithTUConversationParticipantAssociation:
T@"TUConversationParticipantAssociation",R,C,N
callStateContext
_registerCallStopEvent
_registerCallStartEventForCall:
visibilityContext
_registerCallBackgroundedEvent
_registerCallForegroundedEventForCall:
eventBlock
_contextDictionaryWithCall:
setCallStateContext:
_registerEventWithContext:status:
setVisibilityContext:
_bundleIdentifierForCall:
setEventBlock:
_eventBlock
_callStateContext
_visibilityContext
T@"NSDictionary",&,N,V_callStateContext
T@"NSDictionary",&,N,V_visibilityContext
T@?,C,N,V_eventBlock
initWithCallSource:queue:featureFlags:shouldUseIDSDemuxer:
initWithReportingController:cpApplicationController:invitationResolver:
initWithConversationManager:featureFlags:
initWithQueue:conversationManager:
setMessageProxy:
initWithDataSource:parentQueue:
initWithDataSource:
initWithApplicationController:queue:
addObserver:queue:
initWithConversationManager:queue:invitationResolver:
beginListeningOnService:
generateAllInactiveLinks
providerConfiguration
initWithConfiguration:callSource:
conversationManagerXPCServer
setSupportsVideo:
setWithObjects:
faceTimeIDSProviderDelegate
reportAudioFinishedForCallWithUUID:
delayedActionsByCallUUID
callDataSource
_callWithUUID:
reportOutgoingCallWithUUID:startedConnectingAtDate:
providerDelegate:endOtherProvidersCallWithUUID:
faceTimeConversationProviderDelegate
faceTimeIMAVProviderDelegate
reportCallWithUUID:failedAtDate:withContext:
reportCallWithUUID:endedAtDate:privateReason:
deferReportingAudioFinishedForCallWithUUID:
requestTransaction:completion:
groupFaceTimeServiceProviderDelegate
shouldUseIDSDemuxer
provider:performStartCallAction:shouldUseIDSDemuxer:
initiateModernFTInviteForAction:destinations:excludedIMAVDestinations:joinCallActionToFulfill:
_createDelayedActionListIfNecessary:
arrayWithArray:
initWithCallUUID:groupUUID:
setRemotePushTokens:
callerIDHandleForSenderIdentityUUID:
provider:performJoinCallAction:shouldUseIDSDemuxer:
_processDelayedActionList:provider:
idsPeersForHandle:video:completionHandler:
associationIdentifier
conversationProviderIdentifier
tuConversationProviderForIdentifier:
providerDelegate:requestedUpgradeToExistingCallForConversation:withSessionToken:completion:
providerDelegate:isExclusivelyManagingCallWithUUID:
providerDelegate:callWithUUID:connectedAtDate:
initWithCallSource:queue:
conversationManagerHost
cpBiomeStreamDonator
applicationMonitor
conduitXPCServer
setFaceTimeInviteDemuxer:
setFaceTimeIDSProviderDelegate:
setFaceTimeIMAVProviderDelegate:
setFaceTimeConversationProviderDelegate:
setGroupFaceTimeServiceProviderDelegate:
setCallDataSource:
_shouldUseIDSDemuxer
_conversationManagerXPCServer
_conversationManagerHost
_cpBiomeStreamDonator
_applicationMonitor
_conduitXPCServer
_delayedActionsByCallUUID
_faceTimeIDSProviderDelegate
_faceTimeIMAVProviderDelegate
_faceTimeConversationProviderDelegate
_groupFaceTimeServiceProviderDelegate
_conversationManager
_callDataSource
T@"CSDConversationManagerXPCServer",R,N,V_conversationManagerXPCServer
T@"CPConversationManagerHost",R,N,V_conversationManagerHost
T@"CPBiomeSessionDonator",R,N,V_cpBiomeStreamDonator
T@"CPApplicationMonitor",R,N,V_applicationMonitor
T@"CSDNeighborhoodActivityConduitXPCServer",R,N,V_conduitXPCServer
TB,R,N,V_shouldUseIDSDemuxer
T@"CXProvider",R,N,V_provider
T@"NSMutableDictionary",R,N,V_delayedActionsByCallUUID
T@"CSDFaceTimeInviteDemuxer",&,N,V_faceTimeInviteDemuxer
T@"CSDFaceTimeIDSProviderDelegate",&,N,V_faceTimeIDSProviderDelegate
T@"CSDFaceTimeIMAVProviderDelegate",&,N,V_faceTimeIMAVProviderDelegate
T@"CSDFaceTimeConversationProviderDelegate",&,N,V_faceTimeConversationProviderDelegate
T@"CSDGFTServiceConversationProviderDelegate",&,N,V_groupFaceTimeServiceProviderDelegate
T@"CSDConversationManager",R,N,V_conversationManager
T@"CSDProviderCallDataSource",W,N,V_callDataSource
initWithMessage:assertion:applicationShouldPostIncomingCall:
applicationShouldPostIncomingCall
assertion
_applicationShouldPostIncomingCall
_assertion
TB,R,N,V_applicationShouldPostIncomingCall
T@"BKSProcessAssertion",R,N,V_assertion
T@"CSDVoIPApplicationMessage",R,N,V_message
environment
pushKitClient
networkExtensionClient
voipToken
pendingPushKitVoIPMessageContexts
pendingNetworkExtensionMessageContexts
applicationRecord
entitlements
objectForKey:ofClass:
csd_hasVoIPBackgroundMode
csd_hasVoIPNetworkExtensionEntitlement
SDKVersion
_deliverVoIPTokenToApplication
_deliverPendingPushKitPayloadsToApplication
_deliverPendingNetworkExtensionPayloadsToApplication
setVoipToken:
transportType
voipRegistrationSucceededWithDeviceToken:
voipPayloadReceived:mustPostCall:withCompletionHandler:
voipRegistrationFailed
_deliverMessageContext:
payload
voipNetworkExtensionPayloadReceived:mustPostCall:withCompletionHandler:
voipNetworkExtensionRegistrationFailed
pushEnvironmentAccordingToLaunchServices
hasVoIPBackgroundMode
hasVoIPNetworkExtensionEntitlement
requiresStrictPolicyEnforcement
setPushKitClient:
setNetworkExtensionClient:
deliverVoIPToken:
unsetVoIPToken
deliverMessage:withAssertion:applicationShouldPostIncomingCall:
setEnvironment:
_environment
_voipToken
_pushKitClient
_networkExtensionClient
_pendingPushKitVoIPMessageContexts
_pendingNetworkExtensionMessageContexts
T@"NSMutableArray",R,N,V_pendingPushKitVoIPMessageContexts
T@"NSMutableArray",R,N,V_pendingNetworkExtensionMessageContexts
T@"NSData",C,N,V_voipToken
T@"NSString",C,N,V_environment
T@"CSDClient",&,N,V_pushKitClient
T@"CSDClient",&,N,V_networkExtensionClient
compare:options:
setActivity:
hasIdentifierUUIDString
hasActivity
_activity
_identifierUUIDString
T@"NSString",&,N,V_identifierUUIDString
T@"CSDMessagingConversationActivity",&,N,V_activity
hasNamePrefix
hasGivenName
hasMiddleName
hasFamilyName
hasNameSuffix
hasNickname
hasPhoneticRepresentation
_familyName
_givenName
_middleName
_namePrefix
_nameSuffix
_nickname
_phoneticRepresentation
T@"NSString",&,N,V_namePrefix
T@"NSString",&,N,V_givenName
T@"NSString",&,N,V_middleName
T@"NSString",&,N,V_familyName
T@"NSString",&,N,V_nameSuffix
T@"NSString",&,N,V_nickname
T@"CSDMessagingPersonNameComponents",&,N,V_phoneticRepresentation
addLink:
linksCount
clearLinks
linkAtIndex:
linkType
links
setLinks:
_links
T@"NSMutableArray",&,N,V_links
initWithCallCenterObserver:inCallServiceProcessObserver:springBoardProcessObserver:callCenter:featureFlags:queue:
springBoardProcessObserver
processIdentifiersForBundleIdentifier:
handleSpringBoardPIDChanged:
setProcessStateChanged:
processStatesForBundleIdentifier:completion:
inCallServiceProcessObserver
setInCallServiceProcessState:
updateResolvedDescriptor
inCallServiceProcessState
springBoardPID
setSpringBoardPID:
typedIdentifier
resolvedConversation
activeConversationForCall:
initWithCallType:callState:copresenceActivityType:
setResolvedDescriptor:
callDurationUpdateTimer
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setCallDurationUpdateTimer:
callDuration
resolvedAVLessConversation
resolvedHandoffEligibleConversation
handoffEligibleConversation
callProviderSupportsSystemControls
conversationStateSupportsSystemControls
callStatusSupportsSystemControls
T@"<CSDStatusBarResolverDelegate>",W,N
T@"CSDCall",R
T@"TUConversation",R,N
T@"STCallingStatusDomainCallDescriptor",R,N
_inCallServiceProcessObserver
_springBoardProcessObserver
_callDurationUpdateTimer
_resolvedDescriptor
_inCallServiceProcessState
_springBoardPID
T@"<CSDProcessObserverProtocol>",R,N,V_inCallServiceProcessObserver
T@"<CSDProcessObserverProtocol>",R,N,V_springBoardProcessObserver
T@"NSTimer",&,N,V_callDurationUpdateTimer
T@"STCallingStatusDomainCallDescriptor",&,N,V_resolvedDescriptor
Tq,N,V_inCallServiceProcessState
T@"NSNumber",N,V_springBoardPID
T@"<CSDStatusBarResolverDelegate>",W,N,V_delegate
uplinkMutedStatusChanged:
activeConferenceConnectionForIdentifier:
conferenceConnections
isPreparedToStop
setDidPrepareHandler:
invokeDidPrepareIfNecessary:
_prepareConferenceForConferenceConnection:remoteInviteDictionary:
setTransport:
setDidStartHandler:
setDidStopHandler:
activeConference
setConferenceActiveForIdentifier:
invokeDidStartIfNecessary:error:
isHost
setUsingBaseband:
setAudioDisabled:
isAudioDisabled
updateConferenceForIdentifier:isUsingBaseband:disableAudio:
setPreparedToStop:
_conferenceConnectionsForConference:
prepareToStopTimeout
_cleanUpAllConferenceConnectionsForConference:withError:
conferenceConnectionForIdentifier:
_cleanUpConferenceConnection:error:
errorWithDomain:code:userInfo:
invokeDidStopIfNecessary:error:
_stopConference:
conferencesAwaitingConnectionClose
_postDidCloseNotificationForConference:
closeConnectionTimeout
_postDidCloseNotificationForConferenceIfNecessary:
T@"CSDRelayConferenceInterface",R,N
setConferenceConnections:
setConferencesAwaitingConnectionClose:
setCloseConnectionTimeout:
setPrepareToStopTimeout:
_conferenceConnections
_conferencesAwaitingConnectionClose
_closeConnectionTimeout
_prepareToStopTimeout
T@"NSMutableArray",&,N,V_conferenceConnections
T@"NSMutableSet",&,N,V_conferencesAwaitingConnectionClose
T@"<CSDAVConference>",R,N
Td,N,V_closeConnectionTimeout
Td,N,V_prepareToStopTimeout
URLForDirectory:inDomain:appropriateForURL:create:error:
URLByAppendingPathComponent:isDirectory:
URLByStandardizingPath
initWithName:fileManager:error:
urlForFilename:
fileManager
fileExistsAtPath:
getResourceValue:forKey:error:
initWithDomain:code:userInfo:
setURL:
setFileManager:
_URL
_fileManager
T@"NSFileManager",&,N,V_fileManager
T@"NSURL",&,N,V_URL
accountsSupportSecondaryCalling
displayMismatchedAccountsNotification
pinExchangeDelegate
sendIDSAction:toDevice:
allIDSTelephonyDevices
uniqueID
idsDeviceFromUniqueID:
sendApprovalDisplayPinToDevice:
removeErrorNotifications
_numberForKey:
numberFromString:
isEqualToNumber:
displayPinErrorNotification
sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:
pendingCodesToDevicesForApproval
randomSixDigitCode
sendIDSAction:toDevices:
_FTCopyGzippedData
dictionaryWithObject:forKey:
__imSetFromArray
sendMessage:fromAccount:toDestinations:priority:options:identifier:error:
setOutgoingPinRequestIdentifier:
displayErrorNotificationWithMessage:
_FTDecompressData
isHSATrusted
outgoingPinRequestIdentifier
isRelayCallingEnabledForDeviceWithID:
sendPinCodeAndPromptForResponseToDevice:forSenderIdentityUUID:
cancelPinRequests
handlePINCodeEnteredSuccessfully:canceled:fromDevice:isPrimaryDevice:
initWithDelegate:
requestPinFromDevice:
displaySlotsFullNotification
setPendingCodesToDevicesForApproval:
setPinExchangeDelegate:
_pendingCodesToDevicesForApproval
_pinExchangeDelegate
_outgoingPinRequestIdentifier
T@"NSMutableDictionary",&,V_pendingCodesToDevicesForApproval
T@"<CSDPinExchangeDelegate>",&,V_pinExchangeDelegate
T@"NSString",C,V_outgoingPinRequestIdentifier
setPrimaryHandle:
setPrimaryAvcIdentifier:
setAssociatedPseudonym:
hasPrimaryHandle
setPrimaryIdentifier:
setHasPrimaryIdentifier:
hasPrimaryIdentifier
hasPrimaryAvcIdentifier
hasAssociatedPseudonym
hasConversationGroupUUIDString
primaryHandle
primaryIdentifier
primaryAvcIdentifier
associatedPseudonym
_primaryIdentifier
_associatedPseudonym
_conversationGroupUUIDString
_primaryAvcIdentifier
_primaryHandle
T@"CSDMessagingHandle",&,N,V_primaryHandle
TQ,N,V_primaryIdentifier
T@"NSString",&,N,V_primaryAvcIdentifier
T@"CSDMessagingHandle",&,N,V_associatedPseudonym
T@"NSString",&,N,V_conversationGroupUUIDString
initWithRelayService:thumperService:
callCapabilitiesClientXPCInterface
callCapabilitiesServerXPCInterface
initWithBundleIdentifiers:queue:
processObserver
clients
deviceListChanged:
deviceCapabilityChanged:
_initializePairedHostDeviceState
_updateState
thumperCapabilitiesMonitor
telephonyCallCapabilities
accountsController
pairedHostDeviceState
xpcListener
capabilityStateUpdated:
_isWatchDevice
setPairedHostDeviceState:
_updateDynamicCapabilitiesAndUpdateClients
_updateClientsWithState
_savePairedHostDeviceState
_setRelayCallingEnabled:
_setRelayCallingEnabled:forDeviceWithID:
_setWiFiCallingEnabled:forSenderIdentityWithUUID:
_setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:
_setVoLTECallingEnabled:forSenderIdentityWithUUID:
_setThumperCallingEnabled:forSenderIdentityWithUUID:
_setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:
_setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:
endEmergencyCallbackMode
invalidateAndRefreshWiFiCallingCapabilitiesForSenderIdentityWithUUID:
invalidateAndRefreshThumperCallingCapabilitiesForSenderIdentityWithUUID:
_primaryThumperAccountRequiringAvailableDeviceSlots
thumperService
deviceWithUniqueID:
thumperPinExchangeController
_updateHostingAndDisplayingSupport
senderIdentityCapabilitiesStateByUUID
thumperCallingCapabilitiesState
secondaryThumperAccountForAccountID:
senderIdentityUUID
approvedSecondaryDeviceIDs
_updateCallAvailability
_updateRelayCapabilities
_updateCTCapabilities
_supportsPrimaryCalling
setSupportsPrimaryCalling:
_supportsBasebandCalling
setSupportsBasebandCalling:
_supportsCellularData
setSupportsCellularData:
_supportsDisplayingTelephonyCalls
setSupportsDisplayingTelephonyCalls:
_supportsDisplayingFaceTimeAudioCalls
setSupportsDisplayingFaceTimeAudioCalls:
_supportsDisplayingFaceTimeVideoCalls
setSupportsDisplayingFaceTimeVideoCalls:
isTelephonyDevice
_defaultOverrideForDisableDefault:forceDefault:
supportsCellularData
inProcess_isCallingSupported
faceTimeSupported
setFaceTimeAudioAvailable:
setFaceTimeVideoAvailable:
areCapabilitiesValid
setCtCapabilitiesValid:
isEmergencyCallbackModeEnabled
setEmergencyCallbackModeEnabled:
isEmergencyCallbackPossible
setEmergencyCallbackPossible:
wiFiCallingCapabilitiesState
setSupported:
voLTECallingCapabilitiesState
_supportsThumperCallingUsingSenderIdentityCapabilitiesState:
_isThumperCallingAllowedForCurrentDeviceUsingSenderIdentityCapabilitiesState:
setApproved:
isRelayCallingEnabled
isApproved
setEnabled:
supportsBasebandCalling
setSupportsSimultaneousVoiceAndData:
setSenderIdentityCapabilitiesStateByUUID:
_primaryThumperAccountRequiringMatchingCallerID
isThumperCallingSupportedForAccountID:
setThumperCallingAssociatedAccountID:
setWiFiCallingEnabled:forSenderIdentityWithUUID:
setVoLTECallingEnabled:forSenderIdentityWithUUID:
isRoamingEnabled
setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:
setThumperCallingEnabled:forSenderIdentityWithUUID:
cloudCallingDevices
telephonySubscriptionLabelIdentifierForSenderIdentityUUID:
isServiceEnabledForTelephonySubscriptionLabelIdentifier:
supportsRelayCalling
localDeviceID
_primaryThumperAccountRequiringMatchingCallerID:requiringAvailableDeviceSlots:
primaryThumperAccountUsingDevices:outgoingCallerIDURI:requireMatchingCallerIDURI:requireAvailableDeviceSlots:
_supportsRelayCalling
setSupportsRelayCalling:
_accountsMatchForSecondaryCalling
setAccountsMatchForSecondaryCalling:
relayService
setRelayCallingFeaturesEnabled:
isNearby
setRelayCallingAvailability:
setSupportsFaceTimeAudioRelayCalling:
setSupportsFaceTimeVideoRelayCalling:
setAccountsSupportSecondaryCalling:
_isAudioAccessoryDevice
_relayCallingEnabledDefault
accountsMatchForSecondaryCalling
_deviceExistsThatSupportsRelayCallingWithoutLocalRelayCallingEnabled
setSupportsTelephonyRelayCalling:
_relayCallingDisabledForDeviceIDDefault
setRelayCallingDisabledForDeviceID:
setOutgoingRelayCallerID:
_cloudCallingDevices
setCloudCallingDevices:
defaultPairedDeviceExists
telephonyCapableDeviceExists
relayCapableDeviceExists
sortedArrayUsingComparator:
supportsRelayCallingWithoutLocalRelayCallingEnabled
_setRelayCallingEnabledDefault:
relayCallingDisabledForDeviceID
_setRelayCallingEnabledDefault:forDeviceWithID:
setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:
invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:
invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:
cancelPinRequestFromPrimaryDevice
callCapabilitiesState:
telephonyCallCapabilitiesChanged
T@"CSDCallCapabilities",R,N
thumperPushHandler
_xpcListener
_processObserver
_accountsController
_telephonyCallCapabilities
_thumperPushHandler
_thumperPinExchangeController
_thumperCapabilitiesMonitor
_relayService
_thumperService
_pairedHostDeviceState
T@"NSXPCListener",R,N,V_xpcListener
T@"<CSDProcessObserverProtocol>",R,N,V_processObserver
T@"CSDAccountsController",R,N,V_accountsController
T@"CSDTelephonyCallCapabilities",R,N,V_telephonyCallCapabilities
T@"CSDThumperPushHandler",R,N,V_thumperPushHandler
T@"CSDPinExchangeController",R,N,V_thumperPinExchangeController
T@"CSDThumperCapabilitiesMonitor",R,N,V_thumperCapabilitiesMonitor
T@"<CSDIDSService>",R,N,V_relayService
T@"<CSDIDSService>",R,N,V_thumperService
T@"TUCallCapabilitiesState",&,N,V_state
T@"TUCallCapabilitiesState",&,N,V_pairedHostDeviceState
T@"TUCallCapabilitiesState",R,N
isValid
setDialRequest:
isDialAssisted
setWasDialAssisted:
initWithDisplayContext:call:serialQueue:
setDynamicDisplayContext:
dynamicDisplayContext
setCompletionHandler:
relayClientTransport
transitionStatus
setTransitionStatus:
wasDialAssisted
faceTimeIDStatus
setFaceTimeIDStatus:
setUplinkWasExplicitlyMuted:
shouldOverrideCallStatus
callStatusFromOverride
_refreshFaceTimeIDSStatusIfNecessary
faceTimeIDStatusRefreshed
setFaceTimeIDStatusRefreshed:
currentIDStatusForDestination:service:listenerID:queue:completionBlock:
initWithCall:contactIdentifier:serialQueue:
initWithUUID:
setOnHold:
setHasEnded:
setHostedOnCurrentDevice:
hasAudioInterruption
transmissionState
setHasAudioInterruption:
displayContextChanged:
disconnect
updateWithProxyCall:
setRelayClientTransport:
setTransmissionState:
silencingUserInfo
cxCall
hasAudioFinished
setHasAudioFinished:
bytesOfDataUsed
setBytesOfDataUsed:
expectedRelayClientDestination
setExpectedRelayClientDestination:
setSilencingUserInfo:
_isKnownCaller
_joinedFromLink
_uplinkWasExplicitlyMuted
_hasAudioInterruption
_hasAudioFinished
_ignoresBluetoothDeviceUID
_faceTimeIDStatusRefreshed
_junkConfidence
_identificationCategory
_dialRequest
_dateStartedOutgoing
_bytesOfDataUsed
_uplinkMutedSetTime
_remoteUplinkMutedSetTime
_activeRemoteParticipants
_relayClientTransport
_expectedRelayClientDestination
_timeoutTimer
_transmissionState
_dynamicDisplayContext
_silencingUserInfo
T@"TUDialRequest",&,N,V_dialRequest
T@"TUDynamicCallDisplayContext",&,N,V_dynamicDisplayContext
TB,N,V_faceTimeIDStatusRefreshed
T@"NSMutableDictionary",&,N,V_silencingUserInfo
T@"<CSDCallDelegate>",W,N,V_delegate
T@"CSDCallDataSource",W,N,V_dataSource
T@"NSDate",&,N,V_dateStartedOutgoing
TB,N,V_uplinkWasExplicitlyMuted
TB,N,V_isSendingAudio
TB,N,V_hasAudioInterruption
TB,N,V_hasAudioFinished
TB,R,N,V_ignoresBluetoothDeviceUID
TB,R,N,GisOneToOneModeEnabled,V_oneToOneModeEnabled
T{?=[8I]},R,N
T@"CXCall",R,N
Tq,N,V_bytesOfDataUsed
TQ,R,N,V_initialLinkType
Tq,N,V_identificationCategory
Tq,N,V_junkConfidence
TB,N,V_isKnownCaller
TB,N,V_joinedFromLink
Td,N,V_uplinkMutedSetTime
Td,N,V_remoteUplinkMutedSetTime
T@"NSSet",C,N,V_activeRemoteParticipants
T@"CSDIDSTransport",&,N,V_relayClientTransport
T@"IDSDestination",&,N,V_expectedRelayClientDestination
T@"NSObject<OS_dispatch_source>",&,N,V_timeoutTimer
Tq,N,V_transmissionState
audioDeviceController
_initializeAudioRouteCollections
_initializeAutomaticCarDNDStatusIfNecessary
_updatePickableRoutes
_updateCarPlayDeviceConnected
sharedAVSystemController
setAttribute:forKey:error:
pickableRoutesDidChangeNotification:
preferredExternalRouteDidChangeNotification:
carPlayIsConnectedChanged:
mediaServicesWereResetNotification:
_audioRouteCollectionForCall:
isAnyRouteAvailableWithUniqueIdentifier:
preferredRoute
isCarPlayDeviceConnected
audioRouteCollections
isInEarAudioRouteAvailable
preferredAndActiveRoute
isAnyRouteAvailableWithBluetoothEndpointType:
_postNotificationName:
updatePickableRoutes
initWithCategory:mode:
isPreferredDevice
setAudioRouteCollections:
automaticCarDNDStatus
fetchAutomaticDNDAssertionWithReply:
setCarModeActive:
setStatusChangeObserver:
setAutomaticCarDNDStatus:
attributeForKey:
setCarPlayDeviceConnected:
audioDeviceControllerDeviceListChanged:
audioDeviceControllerMutedTalkerDidStart:
audioDeviceControllerMutedTalkerDidEnd:
isAnyRouteAvailableWithUniqueIdentifier:forCall:
preferredAndActiveRouteForCall:
preferredRouteForCall:
isEligibleRouteAvailableForCall:
isAnyVehicleRouteAvailableForCall:
isEligibleRouteAvailable
isCarModeActive
isAnyVehicleRouteAvailableForAnyCall
isAnyBluetoothHeadphoneRouteAvailableForAnyCall
eligibleRouteAvailable
TB,R,N,GisEligibleRouteAvailable
carModeActive
TB,R,N,GisCarModeActive
carPlayRouteAvailable
TB,R,N,GisCarPlayRouteAvailable
anyVehicleRouteAvailableForAnyCall
TB,R,N,GisAnyVehicleRouteAvailableForAnyCall
anyBluetoothHeadphoneRouteAvailableForAnyCall
TB,R,N,GisAnyBluetoothHeadphoneRouteAvailableForAnyCall
_isAnyAudioDevicePreferred
_carPlayDeviceConnected
_carModeActive
_audioRouteCollections
_automaticCarDNDStatus
T@"NSDictionary",C,N,V_audioRouteCollections
carPlayDeviceConnected
TB,N,GisCarPlayDeviceConnected,V_carPlayDeviceConnected
T@"CARAutomaticDNDStatus",&,N,V_automaticCarDNDStatus
TB,N,GisCarModeActive,V_carModeActive
initWithUUID:andAccountID:andSlot:
slotID
csd_isTelephony
csd_isThumper
csd_isUnknown
csd_telephony
TB,R,N,Gcsd_isTelephony
csd_thumper
TB,R,N,Gcsd_isThumper
csd_unknown
TB,R,N,Gcsd_isUnknown
hasLightweightPrimary
setHasLightweightPrimaryParticipantID:
hasLightweightPrimaryParticipantID
setHasValidationSource:
hasValidationSource
validationSourceAsString:
StringAsValidationSource:
hasAssociationVoucher
_lightweightPrimaryParticipantID
_associationVoucher
_lightweightPrimary
_validationSource
T@"CSDMessagingHandle",&,N,V_lightweightPrimary
TQ,N,V_lightweightPrimaryParticipantID
Ti,N,V_validationSource
T@"CSDMessagingVoucher",&,N,V_associationVoucher
addRemoteMembers:
addActiveRemoteParticipants:
addActivitySessions:
addActiveLightweightParticipants:
setUUIDString:
remoteMembersCount
clearRemoteMembers
remoteMembersAtIndex:
activeRemoteParticipantsCount
clearActiveRemoteParticipants
activeRemoteParticipantsAtIndex:
activitySessionsCount
clearActivitySessions
activitySessionsAtIndex:
setReportData:
setConversationProviderIdentifier:
activeLightweightParticipantsCount
clearActiveLightweightParticipants
activeLightweightParticipantsAtIndex:
setHighlightIdentifier:
remoteMembersType
activeRemoteParticipantsType
activitySessionsType
activeLightweightParticipantsType
hasUUIDString
setHasLocallyCreated:
hasLocallyCreated
hasInitiator
hasLocalMember
hasReportData
hasConversationProviderIdentifier
hasHighlightIdentifier
hasStagedActivitySession
uUIDString
reportData
highlightIdentifier
_activeLightweightParticipants
_activitySessions
_conversationProviderIdentifier
_highlightIdentifier
_reportData
_uUIDString
T@"NSString",&,N,V_uUIDString
TB,N,V_locallyCreated
T@"CSDMessagingHandle",&,N,V_initiator
T@"CSDMessagingConversationMember",&,N,V_localMember
T@"NSMutableArray",&,N,V_remoteMembers
T@"NSMutableArray",&,N,V_activeRemoteParticipants
T@"NSMutableArray",&,N,V_activitySessions
T@"CSDMessagingConversationLink",&,N,V_link
T@"CSDMessagingConversationReport",&,N,V_reportData
T@"NSString",&,N,V_conversationProviderIdentifier
T@"NSMutableArray",&,N,V_activeLightweightParticipants
T@"NSString",&,N,V_highlightIdentifier
T@"CSDMessagingConversationActivitySession",&,N,V_stagedActivitySession
setHasTimebase:
hasTimebase
_timebase
_conversationID
T@"NSString",&,N,V_conversationID
Td,N,V_timebase
initWithQueue:reportingController:persistenceController:linkManager:cpApplicationController:invitationResolver:pendingMembershipTracker:featureFlags:
setMessenger:
weakToStrongObjectsMapTable
initWithDelegate:queue:
initWithDataSource:queue:
initWithFeatureFlags:
addDelegate:withQueue:
retreiveActiveConversations
removeNonIndefiniteLinks
linkManager
validateAllLinks
setupPendingConversationCleanupTimer
cpApplicationController
idsFromID
sendData:fromAccount:toDestinations:priority:options:identifier:error:
mutableSendDataCallbacksByRequestIdentifiers
_runCallbackIfNecessaryForMessage:
pushTokenForSelf
aliases
activeLocalHandlesForProvider
localCallerIDForProvider
isValidLocalHandle:forProvider:
handleConversationHandoffRecommendationChangedNotification:
handleConversationHandoffRouteIdentifierChangedNotification:
routeIdentifierChangedNotification
activeLocalHandles
isValidLocalHandle:activeLocalHandles:provider:
isHandleLocalPseudonym:provider:
isHandleStringLocalPseudonym:provider:
destinationIdIsPseudonym
initWithPrefixedURI:
pseudonymForPseudonymURI:
callerIDForLocalMember:forProvider:
deviceDestinationsWithCapability:
stringByReplacingOccurrencesOfString:withString:
groupSessionProviderCreationBlock
accountWithCallerID:
initWithGroupSessionProvider:
conversationCreationBlock
reportingController
createConversationReportingSession:
mutableConversationsByUUID
persistenceController
updateConversation:
mutablePendingConversationsByPseudonym
isEqualToConversationProvider:
conversationWithGroupUUID:
isEquivalentToConversationLink:
activatedConversationLinks
findConversationLinkMatchingPseudonym:
createConversationWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:activity:link:report:fromStorage:avMode:provider:
createActivitySession:onConversation:fromHandle:
delegateToQueue
conversationManager:conversation:receivedMessage:fromHandle:withUpdate:
shouldHandleUpdateForProvider:
conversationManager:reportedNewIncomingConversation:fromHandle:
conversationManager:avModeChanged:toAVMode:forConversation:
conversationManager:removedConversationWithUUID:
_incomingPendingConversationsByGroupUUID
conversationManager:updateIncomingPendingConversationsByGroupUUID:
initWithDescriptor:
notifyDelegatesOfChangedLink:conversation:
_linksEnabled
conversationManager:conversationChanged:
conversationManager:activatedConversationLinksChanged:
activatedLinksWithCompletionHandler:
conversationManager:reportedLetMeInRejectedForPendingConversation:
conversationManager:reportedInvalidLinkForPendingConversation:
participantWithCSDConversationParticipant:
addActiveParticipants:
sendData:onConversation:toHandle:isBlobResponse:
updateConversationHandoffEligibility:
setJoinedMetadata:
sendDataBlock
initWithSessionUUID:originator:type:
conversationNoticeManger
stringGUID
createActivitySessionOnConversation:
hasEncryptedMessage
hasEnclosedEncryptedType
enclosedEncryptedType
handleEncryptedLetMeInRequest:fromHandle:context:
handleEncryptedLetMeInResponse:fromHandle:context:
csd_pseudonym
encryptedMessage
handleReceivedLetMeInRequest:toPseudonym:fromHandle:responseKeyData:
decryptLetMeInRequest:pseudonym:fromHandle:completionHandler:
pendingConversationWithPseudonym:
isExhausted
decryptLetMeInResponse:pseudonym:requestorKeyAgreement:
handleReceivedLetMeInResponse:pendingConversation:fromHandle:
deviceSupport
receivedLetMeInRequestForConversation:
sendLetMeInResponseToPendingMember:forConversation:usingResponseKeyData:approved:callback:
letMeInResponseInvitationPreferences
sendInvitationMessageToMember:forConversation:includeAllAttributes:invitationPreferences:additionalOptions:
webNicknameLengthLimit
substringToIndex:
initWithHandle:nickname:joinedFromLetMeIn:
pendingMembershipTracker
handleNewPendingMember:responseKey:forConversation:withLink:
getLinkDescriptorWithPseudonym:includeInactive:completionHandler:
isEqualToConversationLink:
notifyDelegatesOfLetMeInRejectedForPendingConversation:
storeReceivedLink:fromHandle:isUpdate:completionHandler:
removeLink:completionHandler:
letMeInDelegationHandle
sharedPrivacyManager
isIncomingCommunicationBlockedForHandle:
letMeInDelegationUUID
handleDelegatedPendingMember:forConversation:withGroupUUID:from:transactionUUID:
handleRemoteApprovalOfMember:forConversation:from:transactionUUID:
handleRemoteRejectionOfMember:forConversation:from:transactionUUID:
creationDate
isValidLocalHandle:
joinedMetadata
addEntriesFromDictionary:
sendData:onConversation:toDestinationID:fromMember:additionalOptions:isBlobResponse:callback:
sendData:onConversation:toMember:additionalOptions:
broadcastData:onConversation:additionalOptions:
temporaryFilePath
writeToFile:options:error:
broadcastFile:onConversation:additionalOptions:
removeItemAtPath:error:
addAddedMembers:
participantUpdateType
clientContextData
tuLightweightMembers
memberExistsForParticipantDestination:members:
tuConversationMembers
verifyMessageIntentKeyFromContext:message:
verifyKickMemberPermittedFromHandle:message:
verifyActivitySessionOriginatorFromHandle:message:
verifyBlobResponseFromHandle:message:existingConversation:
verifyLightweightMessageTypeFromHandle:message:existingConversation:
verifyEndorseRepresentsMemberFromHandle:message:existingConversation:
addedMembers
verifyGroupSessionParticipantUpdateAllowedFromHandle:participantUpdate:message:existingConversation:lightweightMembers:
verifyAllLightweightmembersAssociated:remoteMembers:
removedMembers
publicIntentAction
pendingMembersByGroup
initWithUUID:groupUUID:
conversationLinkDescriptorsWithGroupUUIDs:error:
conversationsByUUIDIncludingStorageConversations:
mutablePseudonymsByCallUUID
dictionaryWithDictionary:
autoSharePlayEnabled
authorizedBundleIdentifiers
observerToQueue
lockStateObserver
initWithIdsService:
initWithVoucherManager:
conversationWithGroupUUID:orRepresentedByRemoteMembers:andLink:
retrievePendingMembersFor:
enumerateActiveConversations:
removeAllConversations
createConversationIfNecessaryWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:link:activity:avMode:provider:
localCallerID
mutablePseudonymsByRequestIdentifiers
encryptLetMeInRequest:link:completionHandler:
setIsLetMeInApproved:
encryptLetMeInResponse:pseudonym:responseKeyData:
sentLetMeInRequestForConversation:isApproved:
sendData:onConversation:toMember:
setScreenEnabled:screenShareAttributes:forConversationWithUUID:
screenSharingActivityManager
startActivitySessionFor:with:
stopActivitySession
notifyDelegatesOfAVModeChanged:toAVMode:forConversation:
screenCaptureQueue
broadcastAttributes:
addRemoteMembers:otherInvitedHandles:toConversationWithUUID:
addInvitedMemberHandlesFromAddedRemoteMembers:toConversationLink:
maybeAddComplementaryAssociationVoucherFor:toLocalMemberOf:completion:
voucherManager
sign:as:completion:
addInvitedMemberHandles:toConversationLink:completionHandler:
activeConversation
allowScreenSharing
_displaySharePlayUnableToStartWithMessage:
conversationManager:conversationUpdateMessagesGroupPhoto:
postSessionStartedForSession:originator:conversation:
isStaticActivity
sendMessage:forConversation:withActivitySession:
broadcastImageForSession:onConversation:
tu_UUIDv5ForString:namespaceUUID:
initWithActivity:uuid:locallyInitiated:timestamp:isFirstJoin:
createCPActivitySessionForActivitySession:onConversationWithUUID:
isPlaceholderActivity
activityAuthorizationManager
requestAuthorizationForApplicationWithBundleIdentifier:preparing:completionHandler:
sharePlayWithAirplayEnabled
sendMessage:forConversation:withActivitySession:additionalOptions:
setAuthorization:forBundleID:
setAutoSharePlayEnabled:
launchApplicationForActivitySessionUUID:forceBackground:completionHandler:
conversationManager:joinConversationWithRequest:
mochiEnabled
sendManualLaunchAttemptEventWithActivitySession:
requestAuthorizationForApplicationLaunchWithActivity:completionHandler:
revokeBackgroundAuthorizationForBundleID:
invitationResolver
shouldShowInvitationRingingUIForConversation:handle:invitationMessagePreferences:
conversationManager:avModeChanged:toAVMode:forParticipantWithHandle:forConversation:
setLocalParticipantAudioVideoMode:forConversationUUID:
updateActivitySessionWithUUID:activity:
hasImage
_FTOptionallyDecompressData
updateActivityImage:
setImageData:
imageTranscoder
generatePreviewImageFromData:completionHandler:
isGuestModeSupported
incomingCallInvitationPreferences
broadcastData:onConversation:
latestRemoteAttributes
getActiveLinksWithCreatedOnly:completionHandler:
_getActivatedLinkWithHandle:updateGroupUUID:updateInvitedHandles:
setConversationLink:forConversation:replyToCompletionHandler:
generateLinkWithGroupUUID:invitedHandles:originatorHandle:linkLifetimeScope:completionHandler:
getInactiveLinkForHandle:
isHandleStringLocalPseudonym:
activateLinkForPseudonym:updateGroupUUID:updateInvitedHandles:
generateInactiveLinkFor:afterActivation:
generateAllInactiveLinksFor:
sendMessagesForCreatedOrChangedLink:conversation:messageType:
generateLinkWithInvitedHandles:originatorHandle:linkLifetimeScope:completionHandler:
addInvitedHandles:pseudonym:completionHandler:
sendMessagesForInvalidatedLink:
invalidateLinkWithPseudonym:completionHandler:
renewLinkWithPseudonym:expirationDate:completionHandler:
checkLinkValidityWithPseudonym:completionHandler:
getInactiveLinkForHandle:completionHandler:
activateLinkForPseudonym:completionHandler:
setLinkName:forLink:completionHandler:
scheduleConversationLinkCheckInInitial:
recoverLinksForPseudonyms:
linkSyncStateWithIncludeLinks:completion:
setJoinedFromLetMeIn:
handleLocalApprovalOfMember:forConversation:
handleLocalRejectionOfMember:forConversation:
fetchUpcomingNoticeFromQueue
activateConversationNoticeWithActionURL:bundleIdentifier:
removeConversationNoticeWithUUID:
groupActivitiesReportsReceived:forConversation:
callsWithGroupUUID:
mutableConversationsRequestingUpgrade
pendingConversationCleanupTimer
setPendingConversationCleanupTimer:
cleanupExpiredPendingConversations
timeIntervalSinceNow
removeConversation:
clearPendingMembershipFor:
notifyDelegatesOfRemovedConversationWithUUID:
csd_localizedDeviceCategory
conversationManager:reportedHandedOffConversation:replacedByIdentifier:lastPresentationState:localizedHandoffRecipientDeviceCategory:
conversationManager:conversation:addedActiveParticipant:
conversationManager:conversation:removedActiveParticipant:
conversationManager:conversationScreenSharingChanged:forParticipant:
conversationManager:conversation:mediaPrioritiesDidChangeForParticipant:
sendData:onConversation:toDestinationID:
conversationManager:conversation:failedWithContext:
supportsMultipleActivitySessions
setScreenEnabled:forConversationWithUUID:
conversationManager:conversation:appLaunchState:forActivitySession:
conversationManager:conversation:changedBytesOfDataUsed:
terminatingHandle
postEndEventForSession:originator:conversation:
broadcastLightweightEndorsementForAddedMembers:onConversation:
notifyDelegatesOfInvalidLinkForPendingConversation:
initWithUUID:handle:
messageProxy
shouldIgnoreIDSResource:metadata:fromID:context:
outgoingResponseIdentifier
dataWithContentsOfURL:
_service:account:incomingData:fromID:context:attemptCount:
shouldIgnoreIDSMessage:fromID:context:
storageGuid
processGroupSessionParticipantUpdate:context:
handleEncryptedMessageWithin:fromHandle:context:
handleReceivedLMIDelegateMessage:fromHandle:
handleReceivedLinkCreatedOrChangedMessage:fromHandle:
handleReceivedLinkInvalidatedMessage:fromHandle:
fromServerStorage
handleReceivedUpdateJoinedMetadataMessage:fromHandle:
messageRetryMaxAttempts
messageRetryIntervalMillis
messageRetryStartedForConversation:
avcBlobRequestMessageRetryStartedForConversation:
messageRetryFailedForConversation:
avcBlobRequestMessageRetryFailedForConversation:
messageRetrySucceededForConversation:
avcBlobRequestMessageRetrySucceededForConversation:
shouldAcceptMessageFromHandle:messageContext:message:existingConversation:
notifyDelegatesOfMessage:fromHandle:forConversation:withUpdate:
handleConversation:receivedAVCBlobRequest:fromHandle:
handleConversation:receivedAVCBlobResponse:fromHandle:
handleConversation:receivedActivitySession:fromHandle:
handleConversation:removeActivitySession:fromHandle:
handleConversation:updateActivity:fromHandle:
handleConversation:updateActivityImage:fromHandle:
handleConversation:addHighlight:fromHandle:
handleConversation:removeHighlight:fromHandle:
handleConversation:receivedEndorsementForMember:fromHandle:
handleConversation:updateGuestMode:fromHandle:
handleConversation:participantUpdateMessage:fromNormalizedHandle:
handleConversation:registerMessagesGroupUUIDMessage:fromNormalizedHandle:
proxyGroupUpdate:forConversationManager:
sanitizeAndProcessParticipantUpdate:context:
participantUpdateSanitizer
sanitize:completion:
participantDestinationID
memberExistsForParticipantDestination:groupSessionParticipantUpdate:
addedMembersCount
senderCorrelationIdentifier
processJoinUpdate:fromHandle:senderCorrelationIdentifier:
handleParticipantWithIdentifier:leftConversationWithGroupUUID:fromHandle:
processUpdateMembersUpdate:fromHandle:
processParticipantDataUpdate:fromHandle:
participantData
initWithIdentifier:handle:avcData:senderCorrelationIdentifier:
allAliases
setLocalAccountHandle:
handleParticipants:joinedConversationWithUpdate:joinContext:fromHandle:
pushToken
arrayByAddingObjectsFromArray:
providerForIdentifier:
localMemberForProvider:fromHandle:members:lightweightMembers:activeLocalHandles:
otherInvitedTUHandles
maximumNumberOfInvitedMembers
conversationWithGroupUUID:orMemberIdentifiers:orRemoteMembers:andLink:andVideo:
shouldAcceptMembershipUpdateFromHandle:joinContext:participantUpdate:existingConversation:
pickInitiatorFromParticipants:forUpdate:
fromServer
invitationPreferencesCount
transitionConversationWithUUID:toNewGroupUUID:remoteMembers:localMember:lightweightMembers:fromHandle:
shouldShowInvitationRingingUIForConversation:handle:
dateWithTimeIntervalSinceNow:
serverDate
notifyDelegatesOfNewConversation:fromHandle:
removePendingMemberMatchingActiveParticipant:conversation:
prepareAdditionOfActiveParticipant:toInvitedMembersForLinkOnConversation:
stopTrackingPendingMember:forConversation:triggeredLocally:
removeObjectsInArray:
isPseudonym
notifyDelegatesOfChangedLinkDescriptors:
handleRemovedLinkDescriptors:
conversationLinkForGroupUUID:
notifyDelegatesOfTrackedPendingMember:forConversationLink:
notifyDelegatesOfUpdatePendingConversations
noteDismissedHandle:completionHandle:
_sendDelegationMessageTo:conversation:link:transactionUUID:forMember:withMessage:
setLetMeInDelegationHandle:
setLetMeInDelegationUUID:
notifyDelegatesOfRemoteScreenShareAttributes:isLocallySharing:
startObservingSessions
notifyDelegatesOfRemoteScreenShareEndedWithReason:
conversationManager:activityAuthorizationChangedForBundleIdentifier:
conversationManager:sharePlayAllowedChanged:
conversationManager:screenSharingAllowedChanged:
allActiveConversationParticipantsSupportSharePlay
sendDelegationMessageTo:conversation:link:transactionUUID:forMember:
sendDelegationResponseMessageTo:conversation:transactionUUID:forMember:withResponse:
pendingMembershipTracker:willAdd:to:using:
pendingMembershipTracker:willNotAdd:to:using:
pendingMembershipTracker:didTrack:forGroupUUID:
noticeManager:conversation:participant:addedNotice:
linkManager:updatedLinkDescriptorsFromSync:
linkManager:removedLinkDescriptorsFromIDSSignal:
linkManager:updatedLinkDescriptorsFromIDSSignal:
linkManager:removedLinkDescriptorsFromValidityCheck:
screenSharingActivityManager:receivedUpdatedRemoteAttributes:isLocallySharing:
screenSharingActivityManager:invalidatedSessionWithReason:wasLocallySharing:
applicationPolicyManager:authorizationChangedForBundleIdentifier:
systemStateObserver:sharePlayAllowedStateChanged:
systemStateObserver:screenSharingAllowedStateChanged:
addRemoteMembers:toConversationWithUUID:
createActivitySession:onConversationWithUUID:withCompletion:
setActivityAuthorization:forBundleID:
leaveActivitySession:onConversationWithUUID:
requestActivityAuthorizationForApplicationWithBundleIdentifier:completionHandler:
updateParticipantPresentationContexts:onConversationWithUUID:
buzzMember:conversationUUID:
kickMember:conversationUUID:
setDownlinkMuted:forRemoteParticipantsOnConversationWithUUID:
revokeBackgroundPipAuthorizationsForBundleID:
includeMetricsReport:onConversationWithUUID:
conversationsByUUID
conversationsByGroupUUID
activityAuthorizedBundleIdentifiers
T@"CPActivityAuthorizationManager",R,N
T@"<CPSystemStateObserver>",R,N
initWithQueue:reportingController:persistenceController:linkManager:invitationResolver:pendingMembershipTracker:featureFlags:
senderIdentityUUIDForCallerIDHandle:
callerIDForLocalMember:
pendingConversationUUIDWithPseudonym:
removePendingConversationWithPseudonym:
removeAllPendingConversations
conversationWithGroupUUID:andProvider:
conversationRepresentedByRemoteMembers:andLink:
activeApprovedConversationWithLink:
conversationLinkForPseudonym:
sendData:onConversation:toDestinationID:fromMember:
sendData:onConversation:toHandle:
incomingPendingConversationsByGroupUUID
pseudonymsByCallUUID
activityAuthorizedBundleIdentifierState
findOrCreateConversationWithGroupUUID:messagesGroupUUID:remoteMembers:otherInvitedHandles:localMember:remotePushTokens:link:activity:avMode:conversationProvider:
joinExistingConversationWithUUID:context:
initiatePendingConversationForLink:localMember:isVideoEnabled:
requestLetMeInApprovalForPseudonym:
updateLetMeInRequestState:addLink:forConversationWithUUID:
startAudioForConversationWithUUID:
leaveAllConversations
addPseudonym:forCallUUID:
removePseudonym:forCallUUID:
setUplinkMuted:forConversationWithUUID:
setVideo:forConversationWithUUID:
sendVideoUpgradeMessageforConversationWithUUID:
setVideoEnabled:forConversationWithUUID:
setUplinkMuted:forPendingConversationWithUUID:
setVideoEnabled:forPendingConversationWithUUID:
setVideoPaused:forConversationWithUUID:
setAudioPaused:forConversationWithUUID:
setRelaying:forConversationWithUUID:
isConversationWithUUIDRelaying:
presentationStateForConversationWithUUID:
setPresentationState:forConversationWithUUID:
setPresentationRect:forConversationWithUUID:
setGridDisplayMode:forConversationWithUUID:
setScreenShareAttributes:forConversationWithUUID:
removeRemoteMembers:fromConversationWithUUID:
isSharePlayAvailable
updateMessagesGroupName:onConversationWithUUID:
updateMessagesGroupPhotoOnConversationWithUUID:
endActivitySession:onConversationWithUUID:
presentDismissalAlertForActivitySessionWithUUID:onConversationWithUUID:
setUsingAirplay:onActivitySession:onConversationWithUUID:
launchApplicationForActivitySessionUUID:completionHandler:
setAdditionalVideoRepresentation:conversationUUID:
processUpdatedNickname:forHandle:conversationUUID:
setAudioEnabled:forRemoteParticipantWithIdentifier:conversationUUID:
setVideoEnabled:forRemoteParticipantWithIdentifier:conversationUUID:
updateLocalMemberNickname:conversationUUID:
getLatestRemoteScreenShareAttributesWithCompletionHandler:
generateLinkForConversationUUID:completionHandler:
generateLinkWithInvitedMemberHandles:linkLifetimeScope:completionHandler:
invalidateLink:completionHandler:
renewLink:expirationDate:reason:completionHandler:
checkLinkValidity:completionHandler:
getInactiveLinkWithCompletionHandler:
activateLink:completionHandler:
setLinkName:forConversationLink:completionHandler:
linkSyncStateIncludeLinks:WithCompletion:
approvePendingMember:forConversationUUID:
rejectPendingMember:forConversationUUID:
setIgnoreLetMeInRequests:forConversationUUID:
fetchUpcomingNoticeWithCompletionHandler:
setMessagesGroupName:onConversationWithUUID:
removeConversationWithUUID:
registerMessagesGroupUUIDForConversationUUID:
processProxiedMessage:fromID:context:
processProxiedResource:metadata:fromID:context:
processProxiedGroupUpdate:
setPendingMembershipTracker:
setDelegateToQueue:
setObserverToQueue:
setCallProviderManager:
setLinkManager:
setInvitationResolver:
setVoucherManager:
setParticipantUpdateSanitizer:
setGroupSessionProviderCreationBlock:
setDeviceSupport:
setConversationCreationBlock:
setSendDataBlock:
setConversationProviderManager:
setActiveLocalHandles:
setActiveLocalHandlesForProvider:
setLocalCallerID:
setLocalCallerIDForProvider:
setImageTranscoder:
setActivityAuthorizationManager:
_pendingMembershipTracker
_mutableConversationsByUUID
_mutablePendingConversationsByPseudonym
_mutablePseudonymsByCallUUID
_mutablePseudonymsByRequestIdentifiers
_mutableSendDataCallbacksByRequestIdentifiers
_mutableConversationsRequestingUpgrade
_pendingConversationCleanupTimer
_delegateToQueue
_observerToQueue
_screenSharingActivityManager
_persistenceController
_lockStateObserver
_linkManager
_reportingController
_conversationNoticeManger
_invitationResolver
_screenCaptureQueue
_voucherManager
_participantUpdateSanitizer
_groupSessionProviderCreationBlock
_deviceSupport
_conversationCreationBlock
_sendDataBlock
_activeLocalHandles
_activeLocalHandlesForProvider
_localCallerID
_localCallerIDForProvider
_imageTranscoder
_cpApplicationController
_activityAuthorizationManager
_messageProxy
T@"CSDPendingMembershipTracker",&,N,V_pendingMembershipTracker
T@"NSMutableDictionary",R,N,V_mutableConversationsByUUID
T@"NSMutableDictionary",R,N,V_mutablePendingConversationsByPseudonym
T@"NSMutableDictionary",R,N,V_mutablePseudonymsByCallUUID
T@"NSMutableDictionary",R,N,V_mutablePseudonymsByRequestIdentifiers
T@"NSMutableDictionary",R,N,V_mutableSendDataCallbacksByRequestIdentifiers
T@"NSMutableSet",R,N,V_mutableConversationsRequestingUpgrade
T@"NSObject<OS_dispatch_source>",&,N,V_pendingConversationCleanupTimer
T@"NSMapTable",&,N,V_delegateToQueue
T@"NSMapTable",&,N,V_observerToQueue
T@"CSDScreenSharingActivityManager",R,N,V_screenSharingActivityManager
T@"CSDConversationPersistenceController",R,N,V_persistenceController
T@"CSDDeviceLockStateObserver",R,N,V_lockStateObserver
T@"TUCallProviderManager",&,N,V_callProviderManager
T@"CSDConversationLinkManager",&,N,V_linkManager
T@"CSDReportingController",R,N,V_reportingController
T@"CSDConversationNoticeManager",R,N,V_conversationNoticeManger
T@"CSDSharedConversationServerBag",&,N,V_serverBag
T@"<CSDConversationInvitationResolving>",&,N,V_invitationResolver
T@"NSMutableDictionary",R,N,V_screenCaptureQueue
T@"<CSDVoucherManager>",&,N,V_voucherManager
T@"<CSDParticipantUpdateSanitizer>",&,N,V_participantUpdateSanitizer
T@"CSDIDSService",&,N,V_service
T@?,C,N,V_groupSessionProviderCreationBlock
T@"FTDeviceSupport",&,N,V_deviceSupport
T@?,C,N,V_conversationCreationBlock
T@?,C,N,V_sendDataBlock
T@"CSDConversationProviderManager",&,N,V_conversationProviderManager
T@?,C,N,V_activeLocalHandles
T@?,C,N,V_activeLocalHandlesForProvider
T@?,C,N,V_localCallerID
T@?,C,N,V_localCallerIDForProvider
T@"CSDSecureImageTranscoder",&,N,V_imageTranscoder
T@"CPApplicationController",R,N,V_cpApplicationController
T@"CPActivityAuthorizationManager",&,N,V_activityAuthorizationManager
T@"<CSDConduitIDSProxy>",W,N,V_messageProxy
sharePlayAvailable
TB,R,N,GisSharePlayAvailable
screenSharingAvailable
TB,R,N,GisScreenSharingAvailable
hasTokenPrefixedURI
hasUnsafeData
hasEncryptedData
_encryptedData
_tokenPrefixedURI
_unsafeData
T@"NSString",&,N,V_tokenPrefixedURI
T@"NSData",&,N,V_unsafeData
T@"NSData",&,N,V_encryptedData
setLocalParticipantUUID:
setCallerId:
handleTypeForTUHandle:
fileURLWithPath:isDirectory:
setUniqueId:
setDuration:
setMediaType:
setServiceProvider:
setDate:
setRead:
setDisconnectedCause:
filteredOutReason
setFilteredOutReason:
isJunk
setCallerIdAvailability:
setTimeToEstablish:
providerForRecentCall:
predicateWithFormat:
predicateForFilteringOutFaceTimeAudioCalls
localParticipantUUID
outgoingLocalParticipantUUID
setOutgoingLocalParticipantUUID:
initWithBundleIdentifier:allowPlaceholder:error:
objectForKey:ofClass:valuesOfClass:
executableURL
T@"NSString",R
T@"NSURL",R
UIBackgroundModes
setHasProtoWantsVideo:
setOBSOLETEProtoMomentsAvailable:
setHasOBSOLETEProtoMomentsAvailable:
hasOBSOLETEProtoMomentsAvailable
setHasProtoSenderMuteUplink:
hasProtoSenderMuteUplink
setHasProtoShouldSuppressInCallUI:
hasProtoShouldSuppressInCallUI
setHasProtoMomentsV2Available:
hasProtoMomentsV2Available
oBSOLETEProtoMomentsAvailable
_protoUpgradeSessionUUID
_oBSOLETEProtoMomentsAvailable
_protoMomentsV2Available
_protoSenderMuteUplink
_protoShouldSuppressInCallUI
_protoWantsVideo
TB,N,V_protoWantsVideo
TB,N,V_oBSOLETEProtoMomentsAvailable
TB,N,V_protoSenderMuteUplink
TB,N,V_protoShouldSuppressInCallUI
TB,N,V_protoMomentsV2Available
T@"NSString",&,N,V_protoUpgradeSessionUUID
isPreferred
isPreferredAndActive
setCategory:
setMode:
predicateForPreferredRoute
_routePassingTest:
_anyRoutePassesTest:
isWirelessHeadset
isAirTunes
isCarAudio
isBluetooth
bluetoothEndpointType
uniqueIdentifier
predicateForInEarAudioRoute
enumerateObjectsUsingBlock:
enumerateRoutesInvokingBlock:forRoutesPassingTest:
isReceiverRouteAvailable
isSpeakerRouteAvailable
isWirelessHeadsetRouteAvailable
isAirTunesRouteAvailable
isCarAudioRouteAvailable
isBluetoothRouteAvailable
isAnyPreferredRouteAvailableAndActive
_setRoutesFromRouteDictionaries:
_category
_mode
T@"NSString",&,N,V_category
T@"NSString",&,N,V_mode
T@"NSArray",C,N,V_routes
receiverRouteAvailable
TB,R,N,GisReceiverRouteAvailable
speakerRouteAvailable
TB,R,N,GisSpeakerRouteAvailable
wirelessHeadsetAvailable
TB,R,N,GisWirelessHeadsetRouteAvailable
airTunesRouteAvailable
TB,R,N,GisAirTunesRouteAvailable
carAudioRouteAvailable
TB,R,N,GisCarAudioRouteAvailable
bluetoothRouteAvailable
TB,R,N,GisBluetoothRouteAvailable
T@"TURoute",R,N
inEarAudioRouteAvailable
TB,R,N,GisInEarAudioRouteAvailable
setMetadata:
hasApplicationContext
hasBundleIdentifier
hasActivityIdentifier
hasMetadata
hasActivityContext
setHasUpdatedDateEpochTime:
hasUpdatedDateEpochTime
hasFallbackApplicationName
hasActivityMetadata
setHasIsSystemActivity:
hasIsSystemActivity
setHasTimestampAsTimeIntervalSinceReferenceDate:
hasFromHandle
_timestampAsTimeIntervalSinceReferenceDate
_updatedDateEpochTime
_activityContext
_activityIdentifier
_activityMetadata
_applicationContext
_fallbackApplicationName
_fromHandle
_metadata
_isSystemActivity
T@"NSData",&,N,V_applicationContext
T@"NSString",&,N,V_bundleIdentifier
T@"NSString",&,N,V_activityIdentifier
T@"NSData",&,N,V_metadata
T@"CSDMessagingConversationActivityContext",&,N,V_activityContext
Td,N,V_updatedDateEpochTime
T@"NSString",&,N,V_fallbackApplicationName
T@"CSDMessagingConversationActivityMetadata",&,N,V_activityMetadata
TB,N,V_isSystemActivity
Td,N,V_timestampAsTimeIntervalSinceReferenceDate
T@"CSDMessagingHandle",&,N,V_fromHandle
setHasHandleType:
handleTypeAsString:
StringAsHandleType:
setHasNotificationStyles:
_handleType
_notificationStyles
Ti,N,V_handleType
TI,N,V_notificationStyles
setHasFaceTimeAudioAvailable:
hasFaceTimeAudioAvailable
setHasFaceTimeVideoAvailable:
hasFaceTimeVideoAvailable
_faceTimeAudioAvailable
_faceTimeVideoAvailable
TB,N,V_faceTimeAudioAvailable
TB,N,V_faceTimeVideoAvailable
setStatus:
isConferenced
setConferenced:
conferenced
TB,N,GisConferenced
TB,N,GisOutgoing
T@"NSDate",&,N
acquireProcessAssertionForBundleIdentifier:completion:
processAssertions
countForObject:
invalidateProcessAssertionForBundleIdentifier:completion:
acquireProcessAssertionForBundleIdentifier:
invalidateProcessAssertionForBundleIdentifier:
setProcessAssertions:
_processAssertions
T@"NSCountedSet",&,N,V_processAssertions
initForReadingWithError:
initWithDataSource:deviceLockObserver:callCenterObserver:callDirectoryStoreBuilder:queue:
_callFilterBlock
emergencyProvider
setCallDirectoryStore:
callDirectoryAllowsCallFromSourceAddress:
_doNotDisturbAllowsCallFromSourceAddress:providerIdentifier:
isOnEmergencyCall
emergencyProviderIdentifier
callDirectoryAllowsCallFromSourceAddress:countryCode:
callDirectoryStore
_callDirectoryPhoneNumberVariantsForSourceAddress:countryCode:
containsBlockingEntryForEnabledExtensionWithPhoneNumberInArray:error:
initWithDigits:countryCode:
callDirectorySanitizer
canonicalizedPhoneNumber:
ITUCountryCodeForISOCountryCode:
setOnEmergencyCall:
twoTimeCallthroughInterval
setTwoTimeCallthroughInterval:
_onEmergencyCall
_twoTimeCallthroughInterval
_callDirectoryStore
_emergencyProviderIdentifier
_callDirectorySanitizer
T@"CSDIncomingCallFilterDataSource",&,N,V_dataSource
onEmergencyCall
TB,N,GisOnEmergencyCall,V_onEmergencyCall
T@"NSString",R,C,N,V_emergencyProviderIdentifier
T@"CXCallDirectorySanitizer",R,N,V_callDirectorySanitizer
T@"CXCallDirectoryStore",&,N,V_callDirectoryStore
Td,N,V_twoTimeCallthroughInterval
accountStore
aa_primaryAppleAccount
username
isSignedIntoiCloud
_accountStore
T@"ACAccountStore",R,N,V_accountStore
signedIntoiCloud
TB,R,N,GisSignedIntoiCloud
initWithCallCenterObserver:transactionManager:queue:
_callHistoryChanged:
_addPendingCallToCallHistory:
_callConnected:
_handleCallHistoryChanged
_markReadRecentCallsMatchingHandle:
recentsManager
predicateForCallsWithStatusRead:
callsWithPredicate:limit:offset:batchSize:
clearReadNotificationsIgnoringHandleIds:
cachedCalls
updateBytesOfDataUsedFor:with:
_callHistoryTransactionObjectWithIdentifier:
_endTransactionForObjectAfterCallHistoryDatabaseChanges:
mediaType
cachedCallUUIDsToConversationAVMode
addToCallHistory:
transactionObjectsAwaitingCallHistory
transactionManager
predicateForCallsWithRemoteParticipantCount:
predicateForCallsWithRemoteParticipantHandle:
andPredicateWithSubpredicates:
predicateFormat
setRead:forCallsWithPredicate:completion:
predicateForCallsWithAnyServiceProviders:
notPredicateWithSubpredicate:
deleteCallsWithPredicate:completion:
_canAddCallToCallHistory:
_addCallToCallHistory:
updateBytesOfDataUsed:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
_conversationProviderForCall:
incomingCallFilter
_incomingCallFilter
_transactionManager
_recentsManager
_transactionObjectsAwaitingCallHistory
_cachedCalls
_cachedCallUUIDsToConversationAVMode
T@"<CSDTransactionManager>",R,N,V_transactionManager
T@"CHManager",R,N,V_recentsManager
T@"<CSDUserNotificationDelegate>",R,W,N,V_delegate
T@"NSMutableArray",R,N,V_transactionObjectsAwaitingCallHistory
T@"NSMutableDictionary",R,N,V_cachedCalls
T@"NSMutableDictionary",R,N,V_cachedCallUUIDsToConversationAVMode
T@"CSDIncomingCallFilter",R,N,V_incomingCallFilter
setHasGeneratorVersion:
_generatorID
_generatorVersion
T@"NSString",&,N,V_generatorID
TI,N,V_generatorVersion
preferences
_updateSessionPreferences
_preferences
T@"<CSDIDSSessionProvider>",R,N,V_sessionProvider
T@"NSMutableDictionary",R,N,V_preferences
wiFiAllowed
TB,N,GisWiFiAllowed
cellularDataAllowed
TB,N,GisCellularDataAllowed
cellularDataPreferred
TB,N,GisCellularDataPreferred
addContactIdentifiers:
setProtoPersonNameComponents:
setSuggestedName:
setCompanyName:
setMapName:
setLocation:
setContactName:
setContactLabel:
setCallDirectoryLabel:
setCallDirectoryLocalizedExtensionContainingAppName:
setCallDirectoryExtensionIdentifier:
contactIdentifiersCount
clearContactIdentifiers
contactIdentifiersAtIndex:
contactIdentifiersType
hasName
hasProtoPersonNameComponents
hasSuggestedName
hasLabel
hasCompanyName
hasMapName
hasLocation
hasContactName
hasContactLabel
hasCallDirectoryLabel
hasCallDirectoryLocalizedExtensionContainingAppName
hasCallDirectoryExtensionIdentifier
protoPersonNameComponents
suggestedName
companyName
mapName
location
contactName
contactLabel
callDirectoryLabel
callDirectoryLocalizedExtensionContainingAppName
callDirectoryExtensionIdentifier
contactIdentifiers
setContactIdentifiers:
_callDirectoryExtensionIdentifier
_callDirectoryLabel
_callDirectoryLocalizedExtensionContainingAppName
_companyName
_contactIdentifiers
_contactLabel
_contactName
_label
_location
_mapName
_name
_protoPersonNameComponents
_suggestedName
T@"NSString",&,N,V_name
T@"CSDMessagingPersonNameComponents",&,N,V_protoPersonNameComponents
T@"NSString",&,N,V_suggestedName
T@"NSString",&,N,V_label
T@"NSString",&,N,V_companyName
T@"NSString",&,N,V_mapName
T@"NSString",&,N,V_location
T@"NSString",&,N,V_contactName
T@"NSString",&,N,V_contactLabel
T@"NSString",&,N,V_callDirectoryLabel
T@"NSString",&,N,V_callDirectoryLocalizedExtensionContainingAppName
T@"NSString",&,N,V_callDirectoryExtensionIdentifier
T@"NSMutableArray",&,N,V_contactIdentifiers
setActivityQueue:
setListeningIdentifiersByActivityType:
setBestAppSuggestionManager:
bestAppSuggestionManager
activityQueue
userActivity
activityType
activityTypeForUserActivityTypeString:
broadcastActivity:withTimeout:
_broadcastActivity:withTimeout:shouldPrioritize:
_stopBroadcastingActivity:
_listenForActivityType:dynamicIdentifier:
_stopListeningForActivityType:dynamicIdentifier:
_stopListeningForActivityType:matchingDynamicIdentifierSubstring:
becomeCurrent
_updateCurrentlyBroadcastedActivity
registerActivityType:dynamicIdentifier:
_trackListenedActivityType:dynamicIdentifier:
activityTypeRequiresBestAppSuggestionListener:
listeningIdentifiersByActivityType
startListeningForBestAppSuggestions
unregisterActivityType:dynamicIdentifier:
_untrackListenedActivityType:dynamicIdentifier:
_stopListeningForBestAppSuggestionIfAppropriate
_untrackListenedActivityType:matchingDynamicIdentifierSubstring:
stopListeningForBestAppSuggestions
mostRecentBestAppSuggestion
setMostRecentBestAppSuggestion:
originatingDeviceType
bestAppSuggestionMayHaveChanged
bestAppSuggestionChanged:
bestAppSuggestionChanged:withAdditionalSuggestions:
connectionInterrupted
currentlyBroadcastedActivity
setCurrentlyBroadcastedActivity:
_activityQueue
_currentlyBroadcastedActivity
_bestAppSuggestionManager
_mostRecentBestAppSuggestion
_listeningIdentifiersByActivityType
T@"NSMutableOrderedSet",&,N,V_activityQueue
T@"CSDUserActivity",&,N,V_currentlyBroadcastedActivity
T@"UABestAppSuggestionManager",&,N,V_bestAppSuggestionManager
T@"UABestAppSuggestion",&,N,V_mostRecentBestAppSuggestion
T@"NSMutableDictionary",&,N,V_listeningIdentifiersByActivityType
T@"<CSDUserActivityCommunicatorDelegate>",W,N,V_delegate
migrateAnnounceCalls
migrateConversationLinkBaseURL
announceCalls
initWithSuiteName:
setAnnounceCalls:
conversationLinkBaseURL
stringForKey:
initWithString:
setConversationLinkBaseURL:
T@"TUUserConfiguration",R,N,V_userConfiguration
initWithGroupSessionProvider:featureFlags:
setTuConversationMembers:
setOtherInvitedTUHandles:
numberWithLong:
callTypeForJoinContext:
participantWithCSDConversationJoinContext:
addRemovedMembers:
sharedManager
faceTimeMultiwayAvailabilityForDestination:
isWebCapableFaceTimeAvailableForDestination:
addMembers:toExistingMembers:participantDestinationIDs:webDestinationIDs:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:
queryHasWebOnlyEndpointsForDestinations:completionBlock:
setJoined:
idsDestinations
participantPushToken
setLocalParticipantType:
setRetryCount:
idsDestinationForActiveParticipant:
retryCount
setLightweightRetryCount:
lightweightRetryCount
_joined
_localParticipantType
_localParticipantIdentifier
_retryCount
_lightweightRetryCount
T@"<CSDIDSGroupSessionProvider>",R,N,V_sessionProvider
joined
TB,N,GisJoined,V_joined
TQ,N,V_localParticipantIdentifier
TS,N,V_localParticipantType
TQ,N,V_retryCount
TQ,N,V_lightweightRetryCount
T@"<CSDIDSGroupSessionDelegate>",W,N,V_delegate
callServicesClientXPCInterface
callServicesServerXPCInterface
wantsCallDisconnectionOnInvalidation
wantsCallStopStreamingOnInvalidation
sharedInstanceWithQueue:server:shouldRegister:
callServicesInterface
registerWithCompletionHandler:
initWithCallStateController:queue:
setRelayCallDataSource:
initWithDataSources:queue:
updateClientsWithCall:
updateAudioArbitration
setCallChanged:
_launchInCallApplicationForExistingCall
setCarPlayScreenConnectionChanged:
_handleRelayCallingChanged
makeLocalRouteController
_updateBluetoothAudioFormatIfNecessaryDueToMVMChange:
localRouteController
routesByUniqueIdentifier
handleLocalRoutesByUniqueIdentifierUpdated:
handleRoutesByUniqueIdentifierUpdated:
setRoutesDidChangeHandler:
reportRouteWasPicked:
setRouteWasPickedHandler:
reportTimedOutPickingRoute:
setTimedOutPickingRouteHandler:
makePairedHostDeviceRouteController
handlePairedHostDeviceRoutesByUniqueIdentifierUpdated:
_handleCallStatusChangedNotification:
_handleCSDRelayIDSActiveAccountsChanged:
_handleCSDRelayPairedDeviceConnectedNotification:
_handlePreferredRouteChangedNotification:
_handleCallStartedOutgoingNotification:
_handleCallStartedConnectingNotification:
_handleCallConnectedNotification:
_handleNeedsManualInCallSoundsChangedNotification:
_handleCallWantsHoldMusicChangedNotification:
_handleCallShouldSuppressRingtoneChangedNotification:
_handleCallModelChangedNotification:
_handleResetCallStateNotification:
_handleHardPauseStateChangedNotification:
_handleCallIsUsingBasebandChangedNotification:
_handleInvitationSentNotification:
_handleCallDisplayContextChangedNotification:
_handleUpdateRemoteUplinkMutedChangedNotification:
_handleTUCallSupportsTTYWithVoiceChangedNotification:
_handleTUCallTTYTypeChangedNotification:
_handleMixesVoiceWithMediaChangedNotification:
_handleFailureExpectedChangedNotification:
_handleSupportsEmergencyFallbackChangedNotification:
_handleCarPlayControlEventNotification:
_handleAudioSessionInterruptionNotification:
callHistoryManagerXPCServer
callProviderManagerXPCServer
shouldHandleSecureMicrophoneEvents
performDisconnectAllCalls
registerSecureMicrophoneEngagedHandler:
providerCallDataSource
supportsRelayingToOtherDevices
areRelayCallingFeaturesEnabled
_requestCallStateFromHost
callsWithAnEndpointElsewhere
carPlayManager
isCarPlayConnected
shouldHandleCarPlayControlEvents
_answerIncomingCallAsConversation:
_answerIncomingCall:withBehavior:
disconnectCurrentCallAndActivateHeld
currentCallCount
swapCalls
unholdCall:
holdCall:
initWithConversation:
setUUID:
joinConversationWithConversationRequest:
faceTimeLaunchForIncomingCallURL
currentProxyCalls
proxyCallWithCall:
isProcessSuspended
faceTimeNeedsBackgroundLaunchURL
wantsCallNotificationsDisabledWhileSuspended
eligibleCallsByFilteringCalls:forClient:
isCallEligible:forClient:
handleCurrentCallsChanged:callDisconnected:
handleFrequencyChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
wantsFrequencyChangeNotifications
arrayByApplyingSelector:
filterClientsUsingPredicate:andPerformBlock:coalescedByIdentifier:
handleMeterLevelChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
resetCallProvisionalStates
sendClientsNotificationName:forCall:userInfo:
handleNotificationName:forCallWithUniqueProxyIdentifier:userInfo:
registerForSecureMicEvents
_launchInCallApplicationForIncomingCallIfNecessary:
_handleRingingCallStatusChangeForHostedCall:
_handleSendingCallStatusChangeForHostedCall:
_launchInCallApplicationForOutgoingConversationIfNecessary:
_launchInCallApplicationForOutgoingCallIfNecessary:
_handleDisconnectedCallStatusChangeForHostedCall:
_handleDisconnectedCallStatusChangeForVoicemailCall
_updateRoutesForDisconnectedCall
_handleActiveCallStatusChangeForHostedCall:
_handleHeldCallStatusChangeForHostedCall:
_handleConnectingCallStatusChangeForHostedCall:
_endProxyCallsForConnectingVideoCall
_handleConnectedCallStatusChangeForHostedCall:
performPushHostedCallsToDestination:
performPullRelayingCallsFromClientAndUpdateEndpoint:updateExpectedDestination:
getActivePairedDevice
supportsCapability:
shouldRelayToOtherDevices
_nonRingingCallExistsOnThisDevice
clearState
expanseBTSwitchingEnabled
setCurrentlyTrackedA2DPRouteIdentifier:
isCurrentlyPicked
isBluetoothLE
isA2DPRoute
currentlyTrackedA2DPRouteIdentifier
registerCall:
relayCallDataSource
relayCallDelegate
outgoingCallFromDialRequest:
dateAnsweredOrDialed
dateDialed
setDateAnsweredOrDialed:
callWithCallUUID:
holdCalls:whileUnholdingCalls:
groupCalls:withCalls:
ungroupCall:fromOtherCallsInGroup:
addCalls:forIdentifier:
dataSources
callsForDataSource:identifier:
performEndActiveAndAnswerCall:withRequest:
performEndHeldAndAnswerCall:withRequest:
performHoldActiveAndAnswerCall:withRequest:
performAnswerCallAsVideoUpgrade:withRequest:
performAnswerCallAsAudioDowngrade:withRequest:
callWithUniqueProxyIdentifier:fromCallsToAnswer:
disconnectCalls:whileHoldingCalls:andUnholdingCalls:andUngroupingCalls:
answerCall:withRequest:whileDisconnectingActiveCalls:
answerCall:withRequest:whileDisconnectingHeldCalls:andHoldingCalls:
currentlyPickedRouteIdForCategory:andMode:
sourceIdentifierForRouteID:
answerCall:withRequest:whileHoldingActiveCalls:
disconnectCall:whileUngroupingCall:
disconnectAllCalls:
sendMMIOrUSSDCodeWithRequest:
setTTYType:forCalls:
setUplinkMuted:forCalls:
pullCallWithHandoffActivityUserInfo:completion:
allCallsPassTest:
callForClient:usingCall:
currentCallsForClient:
_dial:displayContext:completion:
performDialCall:displayContext:
performAnswerCall:withRequest:
performHoldCall:
performUnholdCall:
initWithCallUUID:videoEnabled:
performDisconnectCall:
performGroupCall:withCall:
performUngroupCall:
performSwapCalls
performPlayDTMFToneForCall:key:
performDisconnectCurrentCallAndActivateHeld
performSetTTYType:forCall:
performPushRelayingCallsToHostWithSourceIdentifier:
performPullCallFromClientUsingHandoffActivityUserInfo:completion:
performSendMMIOrUSSDCodeWithRequest:
performSetUplinkMuted:forCall:
isInCallUIActive
performPullHostedCallsFromPairedHostDevice
performUpdateCallWithProxy:
reportCallEnteredForeground:
reportAllCallsBackgrounded
switchBluetoothAudioFormats
stringWithCString:encoding:
_fetchUserActivityWithUUID:completionHandler:
sendUserScoreToRTCReporting:withScore:
performJoinConversation:
setCurrentAudioInputDeviceToDeviceWithUID:
setCurrentAudioOutputDeviceToDeviceWithUID:
pickRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
_handleMessagingConnectionEndForCalls:withDisconnectedReason:didStartConnecting:
fetchCurrentProcessStatesForBundleIdentifier:
answerCallWithRequest:
holdCallWithUniqueProxyIdentifier:
unholdCallWithUniqueProxyIdentifier:
requestVideoUpgradeForCallWithUniqueProxyIdentifier:
disconnectCallWithUniqueProxyIdentifier:
groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:
ungroupCallWithUniqueProxyIdentifier:
playDTMFToneForCallWithUniqueProxyIdentifier:key:
setTTYType:forCallWithUniqueProxyIdentifier:
pushRelayingCallsToHostWithSourceIdentifier:
pullHostedCallsFromPairedHostDevice
sendHardPauseDigitsForCallWithUniqueProxyIdentifier:
updateCallWithProxy:
enteredForegroundForCallWithUniqueProxyIdentifier:
willEnterBackgroundForAllCalls
enteredBackgroundForAllCalls
setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:
setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:
setUplinkMuted:forCallWithUniqueProxyIdentifier:
setDownlinkMuted:forCallWithUniqueProxyIdentifier:
setIsSendingVideo:forCallWithUniqueProxyIdentifier:
setMixesVoiceWithMedia:forCallWithUniqueProxyIdentifier:
setSharingScreen:forCallWithUniqueProxyIdentifier:
setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:
setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:
setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:
shouldSuppressInCallStatusBar:
shouldAllowRingingCallStatusIndicator:
activateInCallUIWithActivityContinuationIdentifier:
requestInitialState:
dialWithRequest:reply:
pullCallFromClientUsingHandoffActivityUserInfo:reply:
reportLocalPreviewStoppedForCallWithUniqueProxyIdentifier:
setClientCapabilities:
localRoutesByUniqueIdentifier:
pairedHostDeviceRoutesByUniqueIdentifier:
pickLocalRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
pickPairedHostDeviceRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
willRestrictAddresses:forBundleIdentifier:reply:
containsRestrictedHandle:forBundleIdentifier:performSynchronously:reply:
shouldRestrictAddresses:forBundleIdentifier:performSynchronously:reply:
filterStatusForAddresses:forBundleIdentifier:reply:
policyForAddresses:forBundleIdentifier:reply:
isUnknownAddress:normalizedAddress:forBundleIdentifier:reply:
updateClientsWithFrequency:inDirection:forCalls:
updateClientsWithMeterLevel:inDirection:forCalls:
resetClientCallProvisionalStates
sendClientsNotificationName:
sendClientsNotificationName:forCall:
_handleFaceTimeAvailabilityChangedNotification:
isTrackingVoIPCallForBundleIdentifier:
audioArbitrationController
setAudioArbitrationController:
carPlayHardwareControlsBroadcaster
clientInvalidationHandler
setClientInvalidationHandler:
setShouldHandleSecureMicrophoneEvents:
_callController
_recentsController
_audioArbitrationController
_localRouteController
_pairedHostDeviceRouteController
_currentlyTrackedA2DPRouteIdentifier
_callHistoryManagerXPCServer
_callProviderManagerXPCServer
_relayCallDataSource
_relayCallDelegate
_carPlayHardwareControlsBroadcaster
_carPlayManager
_clientInvalidationHandler
_providerCallDataSource
_shouldHandleSecureMicrophoneEvents
T@"NSString",C,N,V_currentlyTrackedA2DPRouteIdentifier
T@"CSDCallHistoryManagerXPCServer",R,N,V_callHistoryManagerXPCServer
T@"CSDCallProviderManagerXPCServer",R,N,V_callProviderManagerXPCServer
T@"CSDRelayCallDataSource",R,N,V_relayCallDataSource
T@"CSDRelayCallDelegate",R,N,V_relayCallDelegate
T@"TUCarPlayHardwareControlsBroadcaster",R,N,V_carPlayHardwareControlsBroadcaster
T@"CSDCarPlayManager",R,N,V_carPlayManager
T@?,C,N,V_clientInvalidationHandler
T@"CSDProviderCallDataSource",R,N,V_providerCallDataSource
T@"NSNumber",&,N,V_shouldHandleSecureMicrophoneEvents
T@"CSDCallProviderManager",R,N,V_callProviderManager
T@"CSDCallController",R,N,V_callController
T@"CSDCallFilterController",R,N
T@"CSDRecentsController",R,N,V_recentsController
T@"CSDAudioArbitrationController",&,N,V_audioArbitrationController
T@"CSDRouteController",R,N,V_localRouteController
T@"CSDRouteController",R,N,V_pairedHostDeviceRouteController
T@"TUCallCenter",R,N
_handleDeviceFirstUnlockNotification
setCallback:
initWithNotifyObserver:queue:
hasBeenUnlocked
hasBeenUnlockedBlock
setHasBeenUnlocked:
_refreshHasBeenUnlocked
notifyObserver
endObserving
firstUnlockCallbacks
isObserving
beginObserving
setHasBeenUnlockedBlock:
setFirstUnlockCallbacks:
setNotifyObserver:
_hasBeenUnlocked
_hasBeenUnlockedBlock
_firstUnlockCallbacks
_notifyObserver
T@"NSMutableArray",&,N,V_firstUnlockCallbacks
TB,N,V_hasBeenUnlocked
T@"<TUNotifyObserver>",&,N,V_notifyObserver
T@?,C,N,V_hasBeenUnlockedBlock
setPersonNameComponents:
T@"TUCallDisplayContext",R,N
initWithBundleIDs:states:
setApplicationState:forBundleIdentifier:
applicationStateForBundleIdentifier:
bundleIdentifierToApplicationState
arrayByAddingObject:
applicationStateMonitor
updateInterestedBundleIDs:states:
fetchApplicationStateForBundleIdentifier:
applicationStateForApplication:
isRunningForegroundForVoIPApplication:
addVoIPApplication:
removeVoIPApplication:
_bundleIdentifierToApplicationState
_applicationStateMonitor
T@"NSMutableDictionary",R,N,V_bundleIdentifierToApplicationState
T@"BKSApplicationStateMonitor",R,N,V_applicationStateMonitor
bundleIdentifierToVoIPApplication
setNetworkExtensionClientManager:
interfaceWithProtocol:
networkExtensionClientManager
registerVoIPNetworkExtension
setPushKitClientManager:
pushKitClientManager
voipRegister
voipUnregister
_apsConnectionForEnvironment:
_removeAllApplicationsFromKillCountsDictionary
_pruneUninstalledAppPushTopics
removeOutstandingMessagesForBundleIdentifier:
_findOrCreateApplicationWithBundleIdentifier:
_removeApplicationFromKillCountsDictionary:
_unregisterPushApplication:inEnvironment:pushType:destroyApp:
developmentConnection
productionConnection
removeFromRunLoop
_registerNetworkExtensionApplicationWithBundleIdentifier:client:
_registerForPushTokenWithType:client:
_unregisterForPushTokenWithType:client:
topicFromBundleId:forType:
requestTokenForTopic:identifier:
bundleIdFromTopic:
topic
initWithTransportType:payload:
openApplicationWithBundleIdentifier:message:
voipAppFailedToPostIncomingCall:
voipAppBecameDisabledFromLaunching:
_pruneUninstalledAppPushTopicsForConnection:
enabledTopics
_removeTopic:fromConnection:
_createAPSConnectionForEnvironment:namedDelegatePort:
initWithEnvironmentName:namedDelegatePort:queue:
_registerPushApplicationWithBundleIdentifier:client:environment:pushType:
_setEnabledTopics:
invalidateTokenForTopic:identifier:
outstandingMessages
_isApplicationPreventedFromBeingLaunched:
voipPushDroppedOnTheFloor:
_appHasOngoingCall:
containsAnyOutstandingMessageForBundleIdentifier:
addOutstandingMessage:forBundleIdentifier:
acquire
containsOutstandingMessage:forBundleIdentifier:
identityForEmbeddedApplicationIdentifier:
predicateMatchingIdentity:
setReportType:
setExceptionDomain:
setExceptionCode:
initWithPredicate:context:
execute:
_incrementKillCountForApplication:
cx_errorWithCode:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
networkExtensionMessageControllerHost:didReceiveIncomingMessage:forBundleIdentifier:
notificationServiceExtensionHost:didReceiveIncomingMessage:forBundleIdentifier:reply:
noteReportedNewIncomingVoIPCallForBundleIdentifier:
setProductionConnection:
setDevelopmentConnection:
networkExtensionMessageHost
nseMessageHost
setBundleIdentifierToVoIPApplication:
_networkExtensionClientManager
_pushKitClientManager
_productionConnection
_developmentConnection
_networkExtensionMessageHost
_nseMessageHost
_bundleIdentifierToVoIPApplication
_outstandingMessages
T@"CSDClientManager",&,N,V_networkExtensionClientManager
T@"CSDClientManager",&,N,V_pushKitClientManager
T@"APSConnection",&,N,V_productionConnection
T@"APSConnection",&,N,V_developmentConnection
T@"CXNetworkExtensionMessageControllerHost",R,N,V_networkExtensionMessageHost
T@"CXNotificationServiceExtensionVoIPXPCHost",R,N,V_nseMessageHost
T@"NSMutableDictionary",&,N,V_bundleIdentifierToVoIPApplication
T@"CSDVoIPApplicationMonitor",R,N,V_applicationMonitor
T@"NSMutableDictionary",R,N,V_outstandingMessages
T@"CSDCallStateController",W,N,V_callStateController
setSessionUUID:
setSessionEventType:
item
setItem:
queueItemType
setQueueItemType:
setActionURL:
remoteParticipantForLightweightParticipantHandle:
optionsWithDictionary:
openApplication:withOptions:completion:
T@"<CSDConversationNoticeDelegate>",R,W,N,V_delegate
T@"FBSOpenApplicationService",R,N,V_service
properties
hasBeenExpiredForAtLeast:
csd_isExpired
streamToken
screenToken
isRemoteAudioEnabled
isRemoteVideoEnabled
isGuestModeEnabled
initWithIdentifier:handle:senderCorrelationIdentifier:
audioPriority
videoPriority
isEqualToParticipant:
isEqualToCapabilities:
initWithIDSDictionaryRepresentation:
idsDictionaryRepresentation
_screenEnabled
_audioPaused
_localAccountHandle
_remoteAudioEnabled
_remoteVideoEnabled
_audioVideoMode
_additionalVideoRepresentation
_streamToken
_screenToken
_captionsToken
_audioPriority
_videoPriority
_activeIDSDestination
_senderCorrelationIdentifier
TQ,R,N,V_identifier
T@"TUHandle",R,C,N,V_handle
T@"NSData",R,C,N,V_avcData
TB,N,GisScreenEnabled,V_screenEnabled
TB,N,GisAudioPaused,V_audioPaused
T@"TUConversationParticipantCapabilities",C,N,V_capabilities
TQ,N,V_audioVideoMode
Tq,N,V_additionalVideoRepresentation
localAccountHandle
TB,N,GisLocalAccountHandle,V_localAccountHandle
Tq,N,V_streamToken
Tq,N,V_screenToken
Tq,N,V_captionsToken
Tq,N,V_audioPriority
Tq,N,V_videoPriority
T@"NSString",C,N,V_avcIdentifier
remoteAudioEnabled
TB,N,GisRemoteAudioEnabled,V_remoteAudioEnabled
remoteVideoEnabled
TB,N,GisRemoteVideoEnabled,V_remoteVideoEnabled
T@"NSString",C,N,V_activeIDSDestination
T@"TUConversationParticipant",R,C,N
T@"TUConversationParticipantAssociation",C,N,V_association
TB,R,N,GisPseudonym,V_pseudonym
T@"NSString",R,C,N,V_senderCorrelationIdentifier
TB,N,GisGuestModeEnabled,V_guestModeEnabled
dataSourceToIdentifierToCalls
setDataSourceToIdentifierToCalls:
_dataSourceToIdentifierToCalls
T@"NSMapTable",&,N,V_dataSourceToIdentifierToCalls
setSandboxExtensionHandle:
iconTemplateImageData
setIconTemplateImageData:
supportsVideo
includesCallsInRecents
setAudioSessionID:
supportedTUHandleTypes
setSupportsCurrentPlatform:
supportsRinging
setSupportsRinging:
initWithCallSource:configuration:
identifiersWithPendingCoalescingBlocks
blockToExecuteAfterPendingCoalescingBlocksByIdentifier
performBlock:coalescedByIdentifier:
processInfo
mainBundle
processHandle
identifierWithPid:
handleForIdentifier:error:
setProcessHandle:
currentState
taskState
performBlock:
setObject:
supportsMessagesGroupProviding
setSupportsMessagesGroupProviding:
setIdentifiersWithPendingCoalescingBlocks:
setBlockToExecuteAfterPendingCoalescingBlocksByIdentifier:
_supportsMessagesGroupProviding
_object
_identifiersWithPendingCoalescingBlocks
_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
_processHandle
T@,&,N,V_object
T@"NSMutableSet",&,N,V_identifiersWithPendingCoalescingBlocks
T@"NSMutableDictionary",&,N,V_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
T@"RBSProcessHandle",&,N,V_processHandle
T@,R,N
remote
TB,R,N,GisRemote
T@"TUCallServicesClientCapabilities",&,N,V_capabilities
processSuspended
TB,R,N,GisProcessSuspended
TB,N,V_supportsMessagesGroupProviding
hasFallbackURL
setHasSupportsContinuationOnTV:
hasSupportsContinuationOnTV
hasTitle
hasSubtitle
setHasPreferredBroadcastingAttributes:
hasPreferredBroadcastingAttributes
_fallbackURL
_image
_preferredBroadcastingAttributes
_sceneAssociationBehavior
_subtitle
_title
_supportsContinuationOnTV
T@"NSString",&,N,V_fallbackURL
TB,N,V_supportsContinuationOnTV
T@"NSString",&,N,V_title
T@"NSString",&,N,V_subtitle
T@"NSData",&,N,V_image
TI,N,V_preferredBroadcastingAttributes
T@"CSDMessagingConversationActivitySceneAssociationBehavior",&,N,V_sceneAssociationBehavior
accountDescription
shortLabel
serviceName
initWithUUID:accountUUID:localizedName:localizedShortName:localizedServiceName:handle:
T@"TUSenderIdentity",R,N
conversationManagerClientXPCInterface
conversationManagerServerXPCInterface
_filter:withClient:
_shouldSend:
clientsPassingTest:
getMessagesGroupDetailsForMessagesGroupUUID:completionHandler:
conversation:addedMembersLocally:
conversation:buzzedMember:
conversationUpdatedMessagesGroupPhoto:
updateIncomingPendingConversationsByGroupUUID:
updateActivatedConversationLinks:
notifyClientsOfConversationsByGroupUUIDUpdate
updateConversationsByGroupUUID:
mediaPrioritiesChangedForConversation:
conversation:participant:addedNotice:
updateActivityAuthorizedBundleIdentifierState:
receivedTrackedPendingMember:forConversationLink:
remoteScreenShareAttributesChanged:isLocallySharing:
remoteScreenShareEndedWithReason:
sharePlayAvailableChanged:
screenSharingAvailableChanged:
updateConversationWithUUID:participantPresentationContexts:
getMessagesGroupDetailsForConversationUUID:completionHandler:
conversationsByGroupUUID:
incomingPendingConversationsByGroupUUID:
pseudonymsByCallUUID:
activityAuthorizedBundleIdentifierState:
activatedConversationLinks:
createActivitySession:onConversationWithUUID:
setActivityAuthorization:forBundleIdentifier:
setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:
refreshActiveConversations
getSharePlayAvailableWithCompletionHandler:
getScreenSharingAvailableWithCompletionHandler:
setScreenEnabled:withScreenShareAttributes:forConversationWithUUID:
initWithDataSource:serialQueue:
initWithDataSource:serialQueue:featureFlags:
retrieveSavedProvidersByIdentifier
localProvidersByIdentifier
registeredLocalProvidersByIdentifier
pairedHostDeviceProvidersByIdentifier
registeredPairedHostDeviceProvidersByIdentifier
_unregisterUninstalledProvidersAndNotify:
_updateProvidersByIdentifierAndNotify:
isRelayCallingGuaranteed
setProvidersByIdentifier:
providersByIdentifier
isProviderInstalled:
setRegisteredLocalProvidersByIdentifier:
userIntentManager
donateUserIntentForCallProviderIdentifier:
_providersByIdentifierByFilteringForRemoteClientsFromProvidersByIdentifier:
uniqueRingtoneSoundLinkFilenameWithOriginalFilename:
isSymbolicLinkAtURL:
createLinkIfNecessaryWithFilename:toURL:
isEqualToCallProvider:
removeLinksForFilenamesNotInArray:
setRegisteredPairedHostDeviceProvidersByIdentifier:
_donateUserIntentForProviderWithIdentifier:
validateUserIntentForCallSource:
providerIdentifiersForExistingCalls
isDevicePasscodeLocked
dialAssistedDialRequestForDialRequest:
appShouldUseDeprecatedCallingIntents:
userActivityUsingDeprecatedCallingIntents:
openUserActivity:usingApplicationWithBundleIdentifier:frontBoardOptions:completion:
compatibilityObject
plugInKitPlugins
relayCallingStateChangedForDataSource:
installedProvidersChangedForDataSource:
registerLocalProvider:
_userIntentManager
_localProvidersByIdentifier
_pairedHostDeviceProvidersByIdentifier
_providersByIdentifier
T@"<CSDCallProviderManagerDataSource>",R,N,V_dataSource
T@"NSMutableDictionary",R,N,V_localProvidersByIdentifier
T@"NSMutableDictionary",R,N,V_pairedHostDeviceProvidersByIdentifier
T@"NSDictionary",C,N,V_providersByIdentifier
T@"CSDUserIntentManager",R,N,V_userIntentManager
handleFailureInFunction:file:lineNumber:description:
setCallUUID:forConversationUUID:
callUUIDsByConversationUUID
recentlyDeletedCallUUIDsByConversationUUID
conversationUUIDsWaitingForRemoteJoin
cleanUpConversationIfNecessaryForConversationUUID:failureContext:
setWaitingToJoin:forConversationUUID:
handleInvitationMessage:forConversation:fromHandle:
handleUpgradeMessage:forConversation:fromHandle:withUpdate:
handleRespondedElsewhereMessage:forConversation:fromHandle:
handleNicknameUpdateMessage:forConversation:fromHandle:withUpdate:
handleDeclineMessage:forConversation:fromHandle:withUpdate:
handleRemoveMembersMessage:forConversation:
handleReceivedVideoUpgradeMessage:forConversation:fromHandle:
isAutomaticUpgradingEnabled
participantUpdateSubtype
associateCallUUID:withConversationUUID:waitingToJoin:
handles
declineRemoteDevicesForConversation:reason:
reportNewIncomingCallForConversation:fromHandle:
handleInvitationMessageForLetMeIn:forConversation:pendingConversation:link:fromHandle:
enqueueOrStartAudioForConversationUUID:
setConversationUUID:forCallUUID:
updateNetworkCriticalStateIfNecessary
handleRespondedElsewhereMessage:forConversation:fromHandle:withAliases:
conversationUUIDsByCallUUID
isWaitingForRemoteJoinForConversationUUID:
isUnansweredOutgoingOneToOneConversation:
shouldStartRingingTimeoutForConversation:handle:
setWaitingForRemoteJoin:forConversationUUID:
conversationUUIDsUpgradedFromAVLess
cleanupConversationWithCallUUID:
declineConversation:reason:destinations:
performJoinCallAction:
conversationUUIDsAwaitingActiveAudioSession
reportNewOutgoingCallWithUUID:update:
startOutgoingOneToOneTimeoutIfNecessary:
activeRemoteParticipantCXHandles
setActiveRemoteParticipantHandles:
fullfillPendingJoinActionsForCallUUIDIfNecessary:
isEligibleForCall
_isWaitingToJoinForConversationUUID:
launchScreenSharingAppIfNecessary
handleMessage:forConversation:fromHandle:withUpdate:
removeActiveAudioSessionObjectForConversationWithUUID:
_failConversation:failureReason:providerEndedReason:
leaveConversation:withCallUUID:reason:
hasActiveAudioSession
setAudioSessionActive:
isEquivalentToPseudonym:andPublicKey:
initWithPseudonym:publicKey:groupUUID:originatorHandle:
isLetMeIn
canCreateConversations
proceedToJoinForConversation:action:
proceedToNewPendingConversationForLink:action:
setIsOtherInvitedHandle:
joinCallActivity
tuActivity
remotePushTokens
isPendingConversation
leaveConversationForCallUUID:endedReason:
declineRemoteMembersForConversation:reason:
isManagingPendingConversationForCallWithUUID:
pendingConversationUUIDForCallWithUUID:
attributes
callScreenShareAttributesForAction:
shouldHandleProvider:
handleScreenShareMessage:forConversation:fromHandle:withUpdate:
_findPendingConversationWithCallUUID:
shouldHandleProviderWithIdentifier:
_conversationUUIDsWaitingForRemoteJoin
_conversationUUIDsUpgradedFromAVLess
_recentlyDeletedCallUUIDsByConversationUUID
T@"NSMutableDictionary",R,N,V_recentlyDeletedCallUUIDsByConversationUUID
T@"NSMutableSet",R,N,V_conversationUUIDsWaitingForRemoteJoin
T@"NSMutableSet",R,N,V_conversationUUIDsUpgradedFromAVLess
initWithPriority:
setDetectingRaiseToAnswer:
incomingCall
answerCall:
isGestureServiceAvailable
isRaiseToEarGestureSupported
raiseToEarGestureManager
gestureHandler
raiseToEarGestureHandler
setGestureHandler:
isRaiseToEarGestureEnabled
updateDetectingRaiseToAnswer
isDetectingRaiseToAnswer
setRaiseToEarGestureManager:
_raiseToEarGestureManager
_raiseToEarGestureHandler
T@"CMGestureManager",&,N,V_raiseToEarGestureManager
T@?,R,C,N,V_raiseToEarGestureHandler
detectingRaiseToAnswer
TB,N,GisDetectingRaiseToAnswer
handlesWithTUHandles:
isProviderForeground:
toID
_conferenceTransport:didStopForCall:cleanly:error:
isEqualToTransport:
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
dialWithRequest:completion:
anyCallIsEndpointOnCurrentDevice
setHost:
_answerHostedCall:completionHandler:
groupCall:withOtherCall:
ungroupCall:
endActiveAndAnswerCall:
endHeldAndAnswerCall:
holdActiveAndAnswerCall:
_userActivityTypeStringForActivityType:
_initWithTypeIdentifier:suggestedActionType:options:
_setContentType:
setEligibleForSearch:
setEligibleForPublicIndexing:
setEligibleForHandoff:
_setSubtitle:
_setContentUserAction:
setKeywords:
setUserActivity:
setUserInfo:
_initWithUserActivityType:dynamicActivityType:options:
setDynamicIdentifier:
activityTypeSupportsDynamicIdentifierRegistration:
_registerUserActivityType:dynamicActivityType:
_unregisterUserActivityType:dynamicActivityType:
addUserInfoEntriesFromDictionary:
setNeedsSave:
resignCurrent
_userActivity
_dynamicIdentifier
T@"NSUserActivity",&,N,V_userActivity
T@"NSString",&,N,V_dynamicIdentifier
handleApplicationUnregisteredNotification:
relayCallingAvailability
defaultProviders
_providersForPreferenceKey:
_saveProviders:forPreferenceKey:
openUserActivity:usingApplicationRecord:configuration:completionHandler:
attributesOfItemAtPath:error:
ringtonesSandboxExtensionDirectory
applicationState
isInstalled
setProviderIdentifiersForExistingCalls:
T@"<CSDCallProviderManagerDataSourceDelegate>",W,N
relayCallingGuaranteed
TB,R,N,GisRelayCallingGuaranteed
devicePasscodeLocked
TB,R,N,GisDevicePasscodeLocked
_ringtonesSandboxExtensionDirectory
_providerIdentifiersForExistingCalls
T@"CSDSandboxExtensionDirectory",R,N,V_ringtonesSandboxExtensionDirectory
T@"CSDCallCenterObserver",R,N,V_callCenterObserver
T@"NSSet",C,N,V_providerIdentifiersForExistingCalls
T@"<CSDCallProviderManagerDataSourceDelegate>",W,N,V_delegate
photoRequestFailureCount
setPhotoRequestFailureCount:
requestTimeoutBlockByTransactionID
requestStartDateByTransactionID
reportDataCollectionCompleteIfNecessary
photoRequestDurations
photoRequestSuccessCount
setPhotoRequestSuccessCount:
setHasCleanedUp:
hasCleanedUp
availability
fuzzyPhotoRequestSuccessCount
fuzzyPhotoRequestFailureCount
medianRequestDuration
meanRequestDuration
initWithAvailability:photoRequestSuccessCount:photoRequestFailureCount:medianRequestDuration:meanRequestDuration:
momentsReportingSession:didGenerateUsageReport:
bucketedInteger:
medianFromNumbers:
meanFromDoubleNumbers:
sortDescriptorWithKey:ascending:
sortedArrayUsingDescriptors:
initWithStreamToken:
registeredStreamWithAvailability:
didStartRequestWithTransactionID:
didReceiveResultsWithTransactionID:
didCleanUp
setAvailability:
_hasCleanedUp
_availability
_photoRequestSuccessCount
_photoRequestFailureCount
_requestTimeoutBlockByTransactionID
_requestStartDateByTransactionID
_photoRequestDurations
Ti,N,V_availability
TQ,N,V_photoRequestSuccessCount
TQ,N,V_photoRequestFailureCount
TB,N,V_hasCleanedUp
T@"NSMutableDictionary",R,N,V_requestTimeoutBlockByTransactionID
T@"NSMutableDictionary",R,N,V_requestStartDateByTransactionID
T@"NSMutableArray",R,N,V_photoRequestDurations
T@"<CSDMomentsReportingSessionDelegate>",W,N,V_delegate
Tq,R,N,V_streamToken
shouldTraceSingposts
initWithParticipantID:data:delegate:queue:
defaultConfiguration
setConversationTimeBase:
initWithTransportToken:configuration:delegate:queue:
initWithDelegate:withConfig:
initWithSessionCreationBlock:transportToken:delegate:queue:reportingHierarchyToken:avMode:captureSessionCreationBlock:
defaultSessionMode
setSessionMode:
negotiationDataForProtocolVersion:
valueWithRect:
currentDeviceFamily
isAudioMuted
setAudioMuted:
defaultScreenShareAttributes
isOneToOneEnabled
setOneToOneModeEnabled:withCompletionBlock:
presentationInfo
setPresentationInfo:
presentationLayoutForGridDisplayMode:
setIsWindowed:
setSelectiveScreenUUID:
setScreenCaptureDisplayID:
avcScreenCapture
stopCapture
captureSessionQueue
addBlockToCaptureSessionQueue:
sessionUpdateCompletionQueue
setOneToOneEnabled:
avcScreenCaptureConfigurationForScreenAttributes:
setAvcScreenCapture:
captureSessionCreationBlock
startCapture
updateConfiguration:
remoteParticipantsByIdentifier
avcSessionParticipantCreationBlock
setVideoPositionalInfo:
addParticipant:
pendingRemovedParticipantsByID
setVideoQuality:
setVisibilityIndex:
setProminenceIndex:
beginParticipantConfiguration
endParticipantConfiguration
setHasCalledStop:
session:didStopWithError:metadata:
hasCalledStop
participantID
videoToken
mediaTypesAffectingAdditionalVideoRepresentation
isRemoteScreenEnabledForParticipant:
remoteScreenEnabled
participant:audioEnabled:didSucceed:error:
participant:videoEnabled:didSucceed:error:
participant:screenEnabled:didSucceed:error:
participant:remoteAudioEnabledDidChange:
participant:remoteVideoEnabledDidChange:
participant:remoteScreenEnabledDidChange:
participant:audioPaused:didSucceed:error:
participant:videoPaused:didSucceed:error:
participant:remoteAudioPausedDidChange:
participant:remoteVideoPausedDidChange:
participant:mediaPrioritiesDidChange:
participant:mediaStateDidChange:forMediaType:didSucceed:error:
participant:remoteMediaStateDidChange:forMediaType:
participant:spatialAudioSourceIDDidChange:
screenCapture:didStop:withError:
screenCapture:didStart:withError:
serverDidDisconnect:
session:uplinkRateAdaptationInfoDidChange:
session:downlinkRateAdaptationInfoDidChange:
sessionServerDidDisconnect:
session:addParticipant:didSucceed:error:
session:removeParticipant:didSucceed:error:
session:didUpdate:configuration:error:
session:audioEnabled:didSucceed:error:
session:videoEnabled:didSucceed:error:
session:screenEnabled:didSucceed:error:
session:audioPaused:didSucceed:error:
session:videoPaused:didSucceed:error:
session:mediaStateDidChange:forMediaType:didSucceed:error:
session:frequencyLevelsDidChange:
session:mediaPrioritiesDidChange:
session:oneToOneEnabled:didSucceed:error:
T@"NSData",R,C,N
TB,N,GisAudioReady
T@"AVCSessionConfiguration",R,N
T@"TUCallScreenShareAttributes",R,N
setCaptureCapabilities:
setAvcSessionParticipantCreationBlock:
_audioReady
_hasCalledStop
_captureCapabilities
_remoteParticipantsByIdentifier
_pendingRemovedParticipantsByID
_sessionUpdateCompletionQueue
_captureSessionQueue
_captureSessionCreationBlock
_avcScreenCapture
_avcSessionParticipantCreationBlock
T@"AVCSession",R,N,V_session
T@"<CSDAVCSessionDelegate>",R,W,N,V_delegate
T@"NSMutableDictionary",R,N,V_remoteParticipantsByIdentifier
T@"NSMutableDictionary",R,N,V_pendingRemovedParticipantsByID
T@"NSMutableArray",R,N,V_sessionUpdateCompletionQueue
T@"NSMutableArray",R,N,V_captureSessionQueue
T@?,R,C,N,V_captureSessionCreationBlock
TB,N,V_hasCalledStop
T@"AVCScreenCapture",&,N,V_avcScreenCapture
TC,N,V_captureCapabilities
T@?,C,N,V_avcSessionParticipantCreationBlock
TB,N,GisAudioReady,V_audioReady
T@"CSDConversationParticipant",R,N
initWithSessionProvider:isInitiator:remoteFromID:remoteProtocolVersion:
receivedInvitationAccept
setReceivedInvitationAccept:
setRemoteFromID:
_receivedInvitationAccept
_remoteFromID
T@"NSString",C,N,V_remoteFromID
TB,N,V_receivedInvitationAccept
hasCellularSettingsRemediation
hasWiFiSettingsRemediation
hasDateAndTimeSettingsRemediation
hasLocationSettingsRemediation
didPrepareHandler
didStartHandler
setReceivedSuccessfulDidStart:
didStopHandler
receivedSuccessfulDidStart
_host
_usingBaseband
_audioDisabled
_receivedSuccessfulDidStart
_preparedToStop
_transport
_didPrepareHandler
_didStartHandler
_didStopHandler
TB,N,V_receivedSuccessfulDidStart
T@"NSString",C,N,V_identifier
T@"CSDIDSTransport",&,N,V_transport
host
TB,N,GisHost,V_host
usingBaseband
TB,N,GisUsingBaseband,V_usingBaseband
audioDisabled
TB,N,GisAudioDisabled,V_audioDisabled
T@"VCCapabilities",R,C,N
preparedToStop
TB,N,GisPreparedToStop,V_preparedToStop
T@?,C,N,V_didPrepareHandler
T@?,C,N,V_didStartHandler
T@?,C,N,V_didStopHandler
initWithQueue:shouldRegisterForECBMNotification:
initWithQueue:coreTelephonyClient:emergencyCallbackCapabilities:
setEmergencyCallbackCapabilitiesDidChange:
emergencyCallbackCapabilities
localThumperDeviceID
emergencyCallbackPossible
_subscriptionWithUUID:
coreTelephonyClient
setSubscription:capability:enabled:info:
subscriptions
lastSavedAccountIDByCapability
associatedThumperAccountID
setCapability:enabled:info:
addSecondaryThumperDeviceWithIDSDeviceIdentifier:toSubscription:
removeSecondaryThumperDeviceWithIDSDeviceIdentifier:fromSubscription:
invalidateProvisioningURL
recheckAccountStatusForSubscription:capability:
labelID
csCallingCapabilitiesState
setCurrentlyAvailable:
setEmergencySupported:
setEmergencyCurrentlyAvailable:
initWithCapabilityInfo:
setVoLTECallingCapabilitiesState:
setWiFiCallingCapabilitiesState:
setAssociated:
telephonySubscriptions
preferredVoiceSubscriptionUUID
setSupportsDefaultPairedDevice:
setThumperCallingCapabilitiesState:
_updateSystemCapabilitiesStateForSubscription:capabilitiesState:
_updateCallCapabilitiesForSubscription:capabilitiesState:
_updateThumperAccountState
_updateSubscriptions
_senderIdentityCapabilitiesStateForSubscription:
initWithSenderIdentityUUID:
setApprovedSecondaryDeviceIDs:
setLocalDeviceID:
setSubscriptions:
_updateEmergencyCallbackModeEnabledState
callCapabilitiesForSubscription:
setCallCapabilities:forSenderIdentityCapabilitiesState:
capabilityInfoForSubscription:capability:
setCapabilityInfo:forSubscription:senderIdentityCapabilitiesState:
systemCapabilitiesForSubscription:
thumperDeviceInfo
setCapabilitiesValid:
uppercaseString
setLocalThumperDeviceID:
setLocalThumperAccounts:
setSecondaryThumperAccounts:
setAssociatedThumperAccountID:
shouldUpdateSubscriptions
isEqualToArray:
subscriptionsDidChangeForClient:
client:subscription:callCapabilitiesDidChange:
client:capabilitiesDidChange:
client:subscription:capabilitiesDidChange:
emergencyCallbackModeDidChangeForAllSubscriptionsForClient:
invalidateAndRefreshVoLTECallingCapabilitiesForSenderIdentityWithUUID:
secondaryThumperAccountForRegisteredDeviceID:
_capabilitiesValid
_emergencyCallbackModeEnabled
_secondaryThumperAccounts
_senderIdentityCapabilitiesStateByUUID
_localThumperDeviceID
_subscriptions
_lastSavedAccountIDByCapability
_coreTelephonyClient
_emergencyCallbackCapabilities
_localThumperAccounts
capabilitiesValid
TB,N,GareCapabilitiesValid,V_capabilitiesValid
T@"NSSet",C,N,V_subscriptions
T@"NSDictionary",C,N,V_senderIdentityCapabilitiesStateByUUID
T@"NSMutableDictionary",R,N,V_lastSavedAccountIDByCapability
T@"CSDCoreTelephonyClient",R,N,V_coreTelephonyClient
T@"<CSDEmergencyCallbackCapabilities>",R,N,V_emergencyCallbackCapabilities
T@"NSString",C,N,V_localThumperDeviceID
T@"NSArray",C,N,V_localThumperAccounts
T@"NSArray",C,N,V_secondaryThumperAccounts
emergencyCallbackModeEnabled
TB,N,GisEmergencyCallbackModeEnabled,V_emergencyCallbackModeEnabled
T@"<CSDTelephonyCallCapabilitiesDelegate>",W,N,V_delegate
TB,R,N,GisEmergencyCallbackPossible
setUniqueIdentifier:
hasUniqueIdentifier
setDeviceType:
setHasDeviceType:
hasDeviceType
deviceTypeAsString:
StringAsDeviceType:
setProtoCurrentlyPicked:
setHasProtoCurrentlyPicked:
hasProtoCurrentlyPicked
setProtoGuest:
setHasProtoGuest:
hasProtoGuest
setProtoSupportsRelay:
setHasProtoSupportsRelay:
hasProtoSupportsRelay
protoCurrentlyPicked
protoGuest
protoSupportsRelay
_deviceType
_uniqueIdentifier
_protoCurrentlyPicked
_protoGuest
_protoSupportsRelay
T@"NSString",&,N,V_uniqueIdentifier
Ti,N,V_deviceType
TB,N,V_protoCurrentlyPicked
TB,N,V_protoGuest
TB,N,V_protoSupportsRelay
providerIdentifierToProvider
initWithInt:
pidToProviderIdentifiers
createProcessMonitorIfNecessary:forClient:
beginListeningBlock
registerWithIDSWithCompletionHandler:
gftaasPseudonymsEnabled:
errorForDisabledPseudonyms
generatePseudonymHandleForConversationWithExpiryDuration:URI:completionHandler:
renewPseudonymHandle:expirationDate:completionHandler:
revokePseudonymHandle:completionHandler:
isPseudonymHandleForProvider:completionHandler:
pidToProcessHandle
monitorForDeath:
T@"CSDConversationProviderManager",R,N
providerIdentifiersForClient:
serviceForProvider:
setBeginListeningBlock:
_beginListeningBlock
_providerIdentifierToProvider
_pidToProviderIdentifiers
_pidToProcessHandle
T@"NSMutableDictionary",R,N,V_providerIdentifierToProvider
T@"NSMutableDictionary",R,N,V_pidToProviderIdentifiers
T@"NSMutableDictionary",R,N,V_pidToProcessHandle
T@?,C,N,V_beginListeningBlock
dtmfSoundPlayer
attemptToPlayKey:
_setAllCallsToHeldExceptCall:
_dtmfSoundPlayer
T@"TUDTMFSoundPlayer",R,N,V_dtmfSoundPlayer
activeParticipantsCount
clearActiveParticipants
activeParticipantsAtIndex:
clearAddedMembers
addedMembersAtIndex:
clearInvitationPreferences
invitationPreferencesAtIndex:
removedMembersCount
clearRemovedMembers
removedMembersAtIndex:
activeParticipantsType
addedMembersType
invitationPreferencesType
removedMembersType
setHasShouldSuppressInCallUI:
hasShouldSuppressInCallUI
setHasDisconnectedReason:
hasDisconnectedReason
setHasIsLetMeInApproved:
hasLetMeInDelegationHandle
hasLetMeInDelegationUUID
setHasEnclosedEncryptedType:
enclosedEncryptedTypeAsString:
StringAsEnclosedEncryptedType:
hasJoinedMetadata
setActiveParticipants:
setAddedMembers:
setRemovedMembers:
_activeParticipants
_addedMembers
_disconnectedReason
_enclosedEncryptedType
_encryptedMessage
_joinedMetadata
_letMeInDelegationHandle
_letMeInDelegationUUID
_removedMembers
_isLetMeInApproved
T@"NSMutableArray",&,N,V_activeParticipants
T@"NSMutableArray",&,N,V_addedMembers
TI,N,V_disconnectedReason
TB,N,V_isLetMeInApproved
T@"CSDMessagingEncryptedConversationMessage",&,N,V_encryptedMessage
T@"NSString",&,N,V_letMeInDelegationHandle
T@"NSString",&,N,V_letMeInDelegationUUID
Ti,N,V_enclosedEncryptedType
T@"NSMutableArray",&,N,V_invitationPreferences
T@"NSMutableArray",&,N,V_removedMembers
T@"CSDMessagingConversationJoinedMetadata",&,N,V_joinedMetadata
setTURouteDeviceType:
setCurrentlyPicked:
setGuest:
supportsRelay
setSupportsRelay:
initWithUniqueIdentifier:name:
tuRouteDeviceType
Tq,N,SsetTURouteDeviceType:
currentlyPicked
TB,N,GisCurrentlyPicked
guest
TB,N,GisGuest
imDaemonDidConnect:
connectToDaemon
initWithService:account:accessGroup:
_initializeLastKnownCallerID
faceTimeIMAccount
hasAlias:
addAlias:
validationStatusForAlias:
validationErrorReasonForAlias:
setDisplayName:
setIMDaemonConnected:
preferredAccountChanged:
displayNameChanged:
keychainItem
readPasswordAndReturnError:
_saveLastKnownFaceTimeCallerID
removeCallerIDFromPreferences
savePassword:error:
isIMDaemonConnected
account:registrationStatusInfoChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
account:pseudonymsChanged:
refreshRegistrationForAccount:
T@"CSDFaceTimeIMAccount",R,N
updateCallerID:
_IMDaemonConnected
_keychainItem
T@"NSString",C,N,V_callerID
IMDaemonConnected
TB,N,GisIMDaemonConnected,V_IMDaemonConnected
T@"CSDKeychainPasswordItem",R,N,V_keychainItem
mockCallFromBlock:
updateWithCall:
setMockProvider:
setMockHandle:
setMockCallStatus:
setMockUniqueProxyIdentifier:
setMockCallUUID:
setMockHostedOnCurrentDevice:
setMockCallerNameFromNetwork:
setMockUsingBaseband:
setMockVoicemail:
setMockContactIdentifiers:
setMockNeedsManualInCallSounds:
setMockPrefersExclusiveAccessToCellularNetwork:
setMockTTYType:
setMockSupportsTTYWithVoice:
setMockIsThirdPartyVideo:
setMockVideoStreamToken:
setMockConversation:
setMockFailureExpected:
setMockSupportsEmergencyFallback:
setMockDateConnected:
hostOnCurrentDevice
setMockEndpointOnCurrentDevice:
mockCall
setMockService:
setMockIsVideo:
setMockIsVideoPaused:
setMockBlocked:
setMockCallDuration:
setMockEmergency:
mockSupportsEmergencyFallback
setMockOutgoing:
setMockConferenced:
setMockDisconnectedReason:
setMockLocalizedLabel:
setMockCompanyName:
setMockBytesOfDataUsed:
subtype
setMockSubtype:
setMockAudioCategory:
setMockAudioMode:
setMockCallGroupUUID:
setMockProviderContext:
setMockProviderErrorCode:
setMockDisplayContext:
setMockHasStartedOutgoing:
setMockHasSentInvitation:
setMockConnecting:
setMockConnected:
setMockUplinkWasExplicitlyMuted:
setMockMayRequireBreakBeforeMake:
setMockAudioInterruptionProviderType:
setMockDisplayName:
setMockDateCreated:
setMockProviderProcessIdentifier:
audioInterruptionActivationStateObserver
setMockAudioInterruptionActivationStateObserver:
setMockBackingCallSource:
setMockInitialLinkType:
setMockCallRelaySupport:
setMockShouldSuppressInCallUI:
setMockJunkConfidence:
setMockKnownCaller:
_mockIsVideo
_mockIsVideoPaused
_mockHostedOnCurrentDevice
_mockEndpointOnCurrentDevice
_mockBlocked
_mockVoicemail
_mockEmergency
_mockFailureExpected
_mockSupportsEmergencyFallback
_mockSOS
_mockOutgoing
_mockConferenced
_mockUsingBaseband
_mockSupportsTTYWithVoice
_mockNeedsManualInCallSounds
_mockHasStartedOutgoing
_mockHasSentInvitation
_mockConnecting
_mockConnected
_mockUplinkMuted
_mockUplinkWasExplicitlyMuted
_mockMayRequireBreakBeforeMake
_mockPrefersExclusiveAccessToCellularNetwork
_mockIsThirdPartyVideo
_mockShouldSuppressInCallUI
_mockKnownCaller
_mockConversation
_mockService
_mockCallStatus
_mockTTYType
_mockDisconnectedReason
_mockSubtype
_mockProviderProcessIdentifier
_mockCallRelaySupport
_mockUniqueProxyIdentifier
_mockCallDuration
_mockHandle
_mockLocalizedLabel
_mockCompanyName
_mockCallUUID
_mockCallerNameFromNetwork
_mockBytesOfDataUsed
_mockAudioCategory
_mockAudioMode
_mockCallGroupUUID
_mockProvider
_mockProviderContext
_mockProviderErrorCode
_mockDisplayContext
_mockVideoStreamToken
_mockAudioInterruptionProviderType
_mockDisplayName
_mockContactIdentifiers
_mockDateCreated
_mockDateConnected
_mockAudioInterruptionActivationStateObserver
_mockBackingCallSource
_mockInitialLinkType
_mockJunkConfidence
mockService
Ti,N,Gservice,V_mockService
mockCallStatus
Ti,N,GcallStatus,V_mockCallStatus
mockUniqueProxyIdentifier
T@"NSString",C,N,GuniqueProxyIdentifier,V_mockUniqueProxyIdentifier
mockIsVideo
TB,N,GisVideo,V_mockIsVideo
mockIsVideoPaused
TB,N,GisVideoPaused,V_mockIsVideoPaused
mockHostedOnCurrentDevice
TB,N,GisHostedOnCurrentDevice,V_mockHostedOnCurrentDevice
mockEndpointOnCurrentDevice
TB,N,GisEndpointOnCurrentDevice,V_mockEndpointOnCurrentDevice
mockBlocked
TB,N,GisBlocked,V_mockBlocked
mockVoicemail
TB,N,GisVoicemail,V_mockVoicemail
mockCallDuration
Td,N,GcallDuration,V_mockCallDuration
mockEmergency
TB,N,GisEmergency,V_mockEmergency
mockFailureExpected
TB,N,GisFailureExpected,V_mockFailureExpected
TB,N,V_mockSupportsEmergencyFallback
mockSOS
TB,N,GisSOS,SsetSOS:,V_mockSOS
mockOutgoing
TB,N,GisOutgoing,V_mockOutgoing
mockConferenced
TB,N,GisConferenced,V_mockConferenced
mockUsingBaseband
TB,N,GisUsingBaseband,V_mockUsingBaseband
mockTTYType
Ti,N,GttyType,V_mockTTYType
mockSupportsTTYWithVoice
TB,N,GsupportsTTYWithVoice,V_mockSupportsTTYWithVoice
mockDisconnectedReason
Ti,N,GdisconnectedReason,V_mockDisconnectedReason
mockHandle
T@"TUHandle",&,N,Ghandle,V_mockHandle
mockLocalizedLabel
T@"NSString",C,N,GlocalizedLabel,V_mockLocalizedLabel
mockCompanyName
T@"NSString",C,N,GcompanyName,V_mockCompanyName
mockCallUUID
T@"NSString",C,N,GcallUUID,V_mockCallUUID
mockCallerNameFromNetwork
T@"NSString",C,N,GcallerNameFromNetwork,V_mockCallerNameFromNetwork
mockBytesOfDataUsed
Tq,N,GbytesOfDataUsed,V_mockBytesOfDataUsed
mockSubtype
Ti,N,Gsubtype,V_mockSubtype
mockNeedsManualInCallSounds
TB,N,GneedsManualInCallSounds,V_mockNeedsManualInCallSounds
mockAudioCategory
T@"NSString",C,N,GaudioCategory,V_mockAudioCategory
mockAudioMode
T@"NSString",C,N,GaudioMode,V_mockAudioMode
mockCallGroupUUID
T@"NSUUID",C,N,GcallGroupUUID,V_mockCallGroupUUID
mockProvider
T@"TUCallProvider",C,N,Gprovider,V_mockProvider
mockProviderContext
T@"NSDictionary",C,N,GproviderContext,V_mockProviderContext
mockProviderErrorCode
Tq,N,GproviderErrorCode,V_mockProviderErrorCode
mockDisplayContext
T@"TUCallDisplayContext",C,N,GdisplayContext,V_mockDisplayContext
mockHasStartedOutgoing
TB,N,GhasStartedOutgoing,V_mockHasStartedOutgoing
mockHasSentInvitation
TB,N,GhasSentInvitation,V_mockHasSentInvitation
mockConnecting
TB,N,GisConnecting,V_mockConnecting
mockConnected
TB,N,GisConnected,V_mockConnected
mockUplinkMuted
TB,N,GisUplinkMuted,SsetUplinkMuted:,V_mockUplinkMuted
mockUplinkWasExplicitlyMuted
TB,N,GuplinkWasExplicitlyMuted,V_mockUplinkWasExplicitlyMuted
mockVideoStreamToken
Tq,N,GvideoStreamToken,V_mockVideoStreamToken
mockMayRequireBreakBeforeMake
TB,N,GmayRequireBreakBeforeMake,V_mockMayRequireBreakBeforeMake
mockAudioInterruptionProviderType
Tq,N,GaudioInterruptionProviderType,V_mockAudioInterruptionProviderType
mockDisplayName
T@"NSString",C,N,GdisplayName,V_mockDisplayName
mockPrefersExclusiveAccessToCellularNetwork
TB,N,GprefersExclusiveAccessToCellularNetwork,V_mockPrefersExclusiveAccessToCellularNetwork
mockContactIdentifiers
T@"NSArray",C,N,GcontactIdentifiers,V_mockContactIdentifiers
mockDateCreated
T@"NSDate",&,N,GdateCreated,V_mockDateCreated
mockDateConnected
T@"NSDate",&,N,GdateConnected,V_mockDateConnected
mockProviderProcessIdentifier
Ti,N,GproviderProcessIdentifier,V_mockProviderProcessIdentifier
mockAudioInterruptionActivationStateObserver
T@"<CXAudioSessionActivationStateObserver>",&,N,GaudioInterruptionActivationStateObserver,V_mockAudioInterruptionActivationStateObserver
mockBackingCallSource
T@"CXCallSource",&,N,GbackingCallSource,V_mockBackingCallSource
mockIsThirdPartyVideo
TB,N,GisThirdPartyVideo,V_mockIsThirdPartyVideo
mockInitialLinkType
TQ,N,GinitialLinkType,V_mockInitialLinkType
mockCallRelaySupport
Ti,N,GcallRelaySupport,V_mockCallRelaySupport
mockShouldSuppressInCallUI
TB,N,GshouldSuppressInCallUI,V_mockShouldSuppressInCallUI
mockJunkConfidence
Tq,N,GjunkConfidence,V_mockJunkConfidence
mockKnownCaller
TB,N,GisKnownCaller,V_mockKnownCaller
mockConversation
TB,N,GisConversation,V_mockConversation
initWithObjectsAndKeys:
ctEmergencyCallbackModeStatusChangedWithUserInfo:
client
getActiveContexts:
_isNSErrorFatal:
activeContexts
voicePreferred
_isCTErrorFatal:
getPhoneServicesDeviceInfo:
getCallCapabilities:error:
context:getCapability:status:with:
context:getSystemCapabilities:
setLegacyCapability:enabled:capabilityInformation:
context:setCapability:enabled:with:
context:addPhoneServicesDevice:withCompletion:
context:removePhoneServicesDevice:withCompletion:
context:recheckPhoneServicesAccountStatus:
mobileCountryCodeForSubscription:error:
mobileNetworkCodeForSubscription:error:
ISOCountryCodeForMobileCountryCode:mobileNetworkCode:
mobileCodesToISOCountryCode
copyMobileCountryCode:error:
copyMobileNetworkCode:error:
setActiveContexts:
context:capabilitiesChanged:
phoneServicesCapabilitiesChanged:
ISOCountryCodeForSubscriptionUUID:
T@"<CSDCoreTelephonyClientDelegate>",W,N
TB,R,N,GisEmergencyCallbackModeEnabled
legacySystemCapabilities
legacyAddSecondaryThumperDeviceWithIDSDeviceIdentifier:
legacyRemoveSecondaryThumperDeviceWithIDSDeviceIdentifier:
legacyRecheckAccountStatusForCapability:
callCapabilitiesChanged:capabilities:
_client
_activeContexts
_mobileCodesToISOCountryCode
T@"CoreTelephonyClient",R,N,V_client
T@"CTXPCContexts",C,N,V_activeContexts
T@"NSMutableDictionary",R,N,V_mobileCodesToISOCountryCode
T@"<CSDCoreTelephonyClientDelegate>",W,N,V_delegate
activitySessionWithTUConversationActivitySession:fromConversation:
activitySessionWithCSDConversationActivitySession:fromConversation:
T@"TUConversationActivitySession",R,N
conversationFailureContext
anyActiveParticipantHasAV
eligibleForCall
TB,R,N,GisEligibleForCall
activityWithTUConversationActivity:
setJoinCallActivity:
sendLetMeInRequest
setLetMeIn:
setJoiningConversationWithLink:
T@"CXJoinCallAction",R,N
serializedData
initWithBundleIdentifier:metadata:applicationContext:activityIdentifier:
activityMetadataWithDataBlob:
initWithMetadata:applicationContext:uuid:activityIdentifier:
setHasAmbiguityState:
hasAmbiguityState
setHasSwappable:
hasSwappable
setHasMergeable:
hasMergeable
setHasHoldAllowed:
hasHoldAllowed
setHasAddCallAllowed:
hasAddCallAllowed
setHasTakingCallsPrivateAllowed:
hasTakingCallsPrivateAllowed
setHasHardPauseAvailable:
hasHardPauseAvailable
setHasEndAndAnswerAllowed:
hasEndAndAnswerAllowed
setHasHoldAndAnswerAllowed:
hasHoldAndAnswerAllowed
setHasSendToVoicemailAllowed:
hasSendToVoicemailAllowed
swappable
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
_ambiguityState
_addCallAllowed
_endAndAnswerAllowed
_hardPauseAvailable
_holdAllowed
_holdAndAnswerAllowed
_mergeable
_sendToVoicemailAllowed
_swappable
_takingCallsPrivateAllowed
TI,N,V_ambiguityState
TB,N,V_swappable
TB,N,V_mergeable
TB,N,V_holdAllowed
TB,N,V_addCallAllowed
TB,N,V_takingCallsPrivateAllowed
TB,N,V_hardPauseAvailable
TB,N,V_endAndAnswerAllowed
TB,N,V_holdAndAnswerAllowed
TB,N,V_sendToVoicemailAllowed
setAccountUUID:
localizedShortName
setLocalizedShortName:
localizedServiceName
setLocalizedServiceName:
protoUUID
setProtoUUID:
accountUUIDString
setAccountUUIDString:
hasProtoUUID
hasLocalizedShortName
hasAccountUUIDString
hasLocalizedServiceName
_accountUUIDString
_localizedServiceName
_localizedShortName
_protoUUID
T@"NSString",&,N,V_protoUUID
T@"NSString",&,N,V_localizedShortName
T@"NSString",&,N,V_accountUUIDString
T@"NSString",&,N,V_localizedServiceName
setPrimary:
initWithQueue:block:
stringRepresentationForTUCallDisconnectedReason:
stringForSignatureType:
stringForIDSSessionEndedReason:
stringForIMAVChatEndedReason:
allTUConversationMembers
reportingControllerServerXPCInterface
reporters
currentAudioAndVideoCallCount
calls
reportingSessionByStreamToken
registeredStream:withAvailability:
didCleanUpForStream:
didStartRequestForStream:withTransactionID:
didReceiveResultsForStream:withTransactionID:
conversationUUIDs
momentsController:registeredStream:withAvailability:
momentsController:didCleanUpForStream:
momentsController:didStartRequestForStream:withTransactionID:
momentsController:didReceiveResultsForStream:withTransactionID:
T@"CSDReportingController",R,N
reportTransactionGroupCompleted:
reportProviderFailedWithAction:forCall:
registeredStream:withAvailability:reply:
didCleanUpForStream:reply:
didStartRequestForStream:withTransactionID:reply:
didReceiveResultsForStream:withTransactionID:reply:
conversationManager:addedActivatedLink:
setReporters:
_reporters
_reportingSessionByStreamToken
_conversationUUIDs
T@"NSMutableArray",&,N,V_reporters
T@"NSMutableDictionary",R,N,V_reportingSessionByStreamToken
T@"NSMutableSet",R,N,V_conversationUUIDs
updateEnabled
handleAXSVoiceOverTouchEnabledNotification:
performAsynchronousBlock:
removeObserver:name:object:
performSynchronousBlock:
voiceOverObserver:didChangeEnabled:
enabled
TB,R,N,GisEnabled
_enabled
T@"NSMapTable",R,N,V_delegateToQueue
TB,N,GisEnabled,V_enabled
filters
tu_containsObjectPassingTest:
addCallFilter:
removeCallFilter:
_filters
T@"NSMutableArray",R,N,V_filters
addGeneratorDescriptors:
generatorDescriptorsCount
clearGeneratorDescriptors
generatorDescriptorsAtIndex:
generatorDescriptorsType
setShouldCheckAllGenerators:
setHasShouldCheckAllGenerators:
hasShouldCheckAllGenerators
shouldCheckAllGenerators
generatorDescriptors
setGeneratorDescriptors:
_generatorDescriptors
_shouldCheckAllGenerators
TB,N,V_shouldCheckAllGenerators
T@"NSMutableArray",&,N,V_generatorDescriptors
initWithCHManager:
initWithCHManager:queue:
handleCallHistoryDatabaseChangedNotification:
delegateController
chManager
setOutgoingLocalParticipantUUID:forRecentCallsMatchingPredicate:
enumerateDelegatesUsingBlock:
_chManager
_delegateController
T@"<CSDCHManager>",R,N,V_chManager
T@"TUDelegateController<CSDCallHistoryManagerDelegate>",R,N,V_delegateController
pseudonymFeatureID
supportsLinks
supportsSharePlay
initWithServiceName:
setBundleID:
setPseudonymFeatureID:
initWithConfiguration:
prefixedURI
provisionPseudonymForHandle:featureID:scopeID:expiryDuration:allowedServices:completionHandler:
renewPseudonymString:expirationDate:completionHandler:
revokePseudonymString:completionHandler:
checkValidityForSelfPseudonymString:
tuConversationProvider
callerIDAccount
_supportsLinks
_supportsSharePlay
_supportsVideo
_tuProvider
_pseudonymFeatureID
T@"NSString",R,C,N,V_pseudonymFeatureID
TB,R,N,V_supportsLinks
TB,R,N,V_supportsSharePlay
TB,R,N,V_supportsVideo
T@"CSDIDSService",C,N,V_service
T@"<CSDConversationProviderDelegate>",R,N,V_delegate
T@"NSString",R,C,N,V_identifier
T@"TUConversationProvider",R,C,N,V_tuProvider
initWithName:service:
initWithName:service:queryController:
addRegistrationDelegate:queue:
_update
idsService
anyActiveAccount
accountMatchingSimIdentifier:
accountForTelephonySubscriptionLabelIdentifier:
valueForCapability:
accountInfo
telephoneNumber
pseudonymPropertiesWithFeatureID:scopeID:expiryDurationInSeconds:
initWithUnprefixedURI:
provisionPseudonymForURI:withProperties:completion:
pseudonymForPseudonymString:
pseudonymURIMap
revokePseudonym:completionHandler:
revokePseudonym:completion:
renewPseudonym:expirationDate:completionHandler:
renewPseudonym:forUpdatedExpiryEpoch:completion:
idsQueryController
refreshIDStatusForDestination:service:listenerID:queue:completionBlock:
_noteAction:onHandle:completionHandle:
URIWithPrefixedURI:
FZIDType
reportAction:ofTempURI:fromURI:withCompletion:
removeRegistrationDelegate:
activeAccountsChangedForService:
changeType
service:pseudonymRemoved:
service:pseudonymUpdated:
accountController:accountAdded:
accountController:accountUpdated:
accountController:accountRemoved:
accountController:accountEnabled:
accountController:accountDisabled:
devicesWithCapability:
countryCode
hasActiveAccounts
localDeviceUniqueID
T@"<CSDIDSServiceDependencies>",R,N
T@"IDSDevice",R,N
T@"IDSAccount",R,N
T@"CSDIDSService",R,N
idsDeviceID
checkValidityForPseudonymString:completion:
noteApprovedHandle:completionHandle:
update
accountController
setIdsQueryController:
setTelephonyCapableDeviceExists:
setRelayCapableDeviceExists:
setDevices:
setPairedDevice:
setAvailableOutgoingRelayCallerIDs:
_telephonyCapableDeviceExists
_relayCapableDeviceExists
_accountController
_idsService
_idsQueryController
_devices
_pairedDevice
_defaultPairedDevice
_availableOutgoingRelayCallerIDs
T@"IDSAccountController",R,N,V_accountController
T@"IDSService",R,N,V_idsService
T@"IDSIDQueryController",&,N,V_idsQueryController
T@"<IDSServicePseudonymDelegate>",&,N,V_delegate
TB,N,V_telephonyCapableDeviceExists
TB,N,V_relayCapableDeviceExists
T@"NSArray",&,N,V_devices
T@"IDSDevice",&,N,V_pairedDevice
T@"IDSDevice",&,N,V_defaultPairedDevice
T@"NSSet",&,N,V_availableOutgoingRelayCallerIDs
T@"NSString",R,C,N,V_name
T@"IDSService",R,N
pairedDeviceUniqueIDOverride
isWatchDevice
isAudioAccessoryDevice
isDeviceInAltMode
TB,R,N,GisPairedDevice
audioAccessoryDevice
TB,R,N,GisAudioAccessoryDevice
deviceInAltMode
TB,R,N,GisDeviceInAltMode
callbackDestinationID
callbackISOCountryCode
senderDestinationID
senderISOCountryCode
csd_callbackHandle
csd_senderHandle
activeSessionForIdentifier:
currentSession
_createSessionToDevices:
_createSessionToDestinations:
initWithAccount:destinations:transportType:
sessions
_createSessionToAllDevicesSupportingProvider:
destinationWithActiveSession
_startSession:withMessage:identifiers:timeout:declineOnError:
_sendMessage:andCancelInvitationIfNecessaryForSession:
_sendMessage:andDeclineInvitationIfNecessaryForSession:
sendMessage:forIdentifier:toDestinations:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
sendMessage:customizedForRemoteProtocolVersion:completionHandler:
sessionForIdentifier:
_destroySession:
waitingSession
acceptInvitationForIdentifier:
setSessions:
_sessions
T@"IDSDestination",R,N
T@"CSDRelayIDSDualSession",R,N
T@"NSMutableArray",&,N,V_sessions
T@"<CSDRelayIDSSessionMessengerDelegate>",W,D,N
initWithQueue:fileTransferController:mediaAssetManager:callCenterObserver:
initWithStreamToken:requesterID:delegate:dispatchQueue:
momentsControllerClientXPCInterface
momentsControllerServerXPCInterface
handleClientDisconnected:
streamTokensByCSDClient
unregisterStreamToken:
isMomentsDisabled
isFaceTimePhotosAvailable
sessionsByToken
moments
newRequestWithMediaType:mode:requesteeID:
transactionID
initWithAVCRequest:session:
setActiveRequest:forTransactionID:
_startTimeoutForMomentsRequestWithTransactionID:
startWithError:
sessionForTransactionID:
activeRequestsByTransactionID
avcRequest
endWithError:
availabilityWithRemoteAvailable:
momentsGenerator
initWithMoments:remoteIDSDestinations:callCenterObserver:
setRemoteIDSDestinations:
initWithAvailability:supportedMediaTypes:
cleanUpForMomentIfNecessary:
didUpdateCapabilities:forVideoStreamToken:
requesterID
willCaptureRemoteRequestFromRequesterID:
initWithStreamToken:requesterID:
remoteRequesterIDSDestinationFor:
remoteIDSDestinations
pathExtension
lowercaseString
URLByAppendingPathExtension:
_transferFileAtURL:forSession:request:
_handleReceivedVideoURL:
remoteRequesteeIDSDestinationFor:
fileTransferController
_handleReceivedResourcesAtDirectoryURL:
removeActiveRequestForTransactionID:
shouldPreserveMomentsFile
setIsRegistered:
activeRequestCount
pendingRequestCount
contentsOfDirectoryAtURL:
urlFromResources:withExtension:
initWithPhotosAppAssetIdentifier:
handleRequestResultWithMomentDescriptor:
_saveLivePhotoWithPhotoURL:videoURL:completion:
_saveVideoWithURL:completion:
mediaAssetManager
momentsRequestTimeout
didReceiveLocallyRequestedMomentDescriptor:
isRegionBlocked
setLocalCapabilities:
moments:capabilitiesDidChange:
moments:didFinishRequest:error:
moments:didStartProcessingRequest:error:
moments:didEndProcessingRequest:stillImageURL:movieURL:error:
momentsServerDidDisconnect:
registerXPCClientWithReply:
registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:reply:
unregisterStreamToken:reply:
startRequestWithMediaType:forStreamToken:requesteeID:reply:
endRequestWithTransactionID:reply:
T@"<CSDMomentsControllerLocalCapabilities>",&,N
faceTimePhotosAvailable
TB,R,N,GisFaceTimePhotosAvailable
momentsClient
setMomentsGenerator:
_fileTransferController
_mediaAssetManager
_sessionsByToken
_streamTokensByCSDClient
_momentsClient
_momentsGenerator
T@"<CSDFileTransferring>",R,N,V_fileTransferController
T@"<CSDMediaAssetManaging>",R,N,V_mediaAssetManager
T@"NSMutableDictionary",R,N,V_sessionsByToken
T@"NSMapTable",R,N,V_streamTokensByCSDClient
T@"<TUMomentsControllerXPCClient>",R,N,V_momentsClient
T@"<CSDMomentsServerBag>",&,N,V_serverBag
T@?,C,N,V_momentsGenerator
T@"<CSDMomentsControllerDelegate>",W,N,V_delegate
initWithClientUUID:transportType:
isInputFrequencyMeteringEnabled
setInputFrequencyMeteringEnabled:
isOutputFrequencyMeteringEnabled
setOutputFrequencyMeteringEnabled:
getIsSendingAudio:callID:error:
setSendingAudio:callID:error:
getIsAudioPaused:callID:error:
setPauseAudio:callID:error:
getIsVideoPaused:callID:error:
setPauseVideo:callID:error:
setConferenceVisualRectangle:forCallID:
setConferenceState:forCallID:
setPeerReportingIdentifier:sessionIdentifier:forCallID:
setCallID:
startConnectionWithCallID:inviteData:isCaller:capabilities:destination:error:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:error:
stopCallID:
cancelCallID:
updateCapabilities:forCallID:
sendData:forCallID:encrypted:
conference:withCallID:remoteMediaStalled:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:updateInputFrequencyLevel:
conference:updateOutputFrequencyLevel:
conference:receivedFirstRemoteFrameForCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteAudioPaused:callID:
conference:remoteVideoPaused:callID:
serverDiedForConference:
conference:inititiateRelayRequest:requestDict:
conference:sendRelayUpdate:updateDict:
conference:cancelRelayRequest:requestDict:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:networkHint:
conference:localIPChange:withCallID:
conference:didStartSession:withCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:withCallID:isSendingAudio:error:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:didReceiveARPLData:withCallID:
conference:didChangeLocalVariablesForCallID:
conference:remoteAudioEnabled:forCallID:
conference:localAudioEnabled:forCallID:error:
conference:remoteCallingModeChanged:forCallID:
conference:reinitializeCallForCallID:
conference:closeConnectionForCallID:
conference:updateInputMeterLevel:
conference:updateOutputMeterLevel:
conference:isRemoteAudioBelowThreshold:
T@"<CSDAVConferenceProviderDelegate>",W,N
inputFrequencyMeteringEnabled
TB,N,GisInputFrequencyMeteringEnabled
outputFrequencyMeteringEnabled
TB,N,GisOutputFrequencyMeteringEnabled
microphoneMuted
TB,N,GisMicrophoneMuted
_callID
T@"AVConference",R,N,V_conference
Tq,N,V_callID
T@"<CSDAVConferenceProviderDelegate>",W,N,Vdelegate
call
setCall:
completionHandler
_call
_completionHandler
T@"CSDProviderCall",&,N,V_call
T@?,C,N,V_completionHandler
initWithDelegate:delegateQueue:
initWithIdentifier:bundleIdentifier:
addCallSource:
shouldTrackCall:
callControllerHost
addOrUpdateCall:
removeCall:
startTrackingCall:
processAssertionManager
stopTrackingCall:
callSourceManager
failOutstandingActionsForCallWithUUID:
faceTimeProviderDelegate
callGroupUUIDToCalls
setDeferCommittingTransactions:
_commitUncommittedTransactions
commitUncommittedTransactions
allActions
_endCall:
cx_incomingCallErrorWithCode:
dateStarted
callUUIDToGroupWith
_providerForCallSource:
_callWithUUID:controllableByCallSource:
_relayCallWithUUID:
_actionRequiresReasonableUserIntent:
cx_requestTransactionErrorWithCode:
_callGroupsWithBackingCallSource:
actions
_shouldAllowRequestedAction:forCallSource:shouldValidateUserIntent:error:
_shouldAllowRequestedTransaction:forCallSource:error:
_performRequestedTransaction:onCallSource:
_callWithUUID:backingCallSource:
addAction:toUncommittedTransactionForCallSource:
_addSupplementalActionsForRequestedTransaction:onCallSource:
answerCall:withRequest:whileDisconnectingCalls:andHoldingCalls:
_deferCommittingTransactionsUntilAfterRunningBlock:
setCode:
setSenderIdentityUUID:
setHandoffContext:
pendingPulledCallContexts
telephonyCallSource
faceTimeCallSource
tinCanCallSource
callSources
deferCommittingTransactions
currentCallGroups
_ISOCountryCodeForCall:
_ISOCountryCodeForCallWithUUID:provider:callUpdate:
_endMutuallyExclusiveCalls:
dndAllowsCall
isFromBlockList
_shouldBlockIfScreenSharing
shouldPreferRelayOverDirectSecondaryCalling
requiresAuthentication
pendingCallsToChatUUIDs
shouldFilterCall
callSource:reportedCallWithUUID:endedAtDate:privateReason:failureContext:
_identifiersForCalls:
expediteDeferredEndInterruptionForCallWithUUID:
handleFrequencyDataChanged:inDirection:forCalls:
handleMeterLevelChanged:inDirection:forCalls:
handleBytesOfDataUsedChanged:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
_processRequestedTransaction:fromCallSource:completion:
_allowRevertingStateForCompletedTransactionGroup:
_processCompletedCallAction:forCall:allowRevertingState:
callSourceFetcher
callClass
callControllerHost:clientWithIdentifier:requestedTransaction:completion:
callSource:registeredWithConfiguration:
callSource:reportedNewIncomingCallWithUUID:update:completion:
callSource:reportedCallWithUUID:updated:
callSource:reportedOutgoingCallWithUUID:sentInvitationAtDate:
callSource:reportedOutgoingCallWithUUID:startedConnectingAtDate:
callSource:reportedOutgoingCallWithUUID:connectedAtDate:
callSource:reportedNewOutgoingCallWithUUID:update:
callSource:reportedAudioFinishedForCallWithUUID:
callSource:reportedCallWithUUID:changedFrequencyData:forDirection:
callSource:reportedCallWithUUID:changedMeterLevel:forDirection:
callSource:reportedCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
callSource:requestedTransaction:completion:
callSourceManager:completedTransactionGroup:
callSourcesChangedForCallSourceManager:
callSource:shouldProcessAction:error:
performCallActions:forCall:
setCallFilterController:
tinCanProviderDelegate
setRouteManager:
setDndAllowsCall:
setShouldPreferRelayOverDirectSecondaryCalling:
setShouldFilterCall:
_deferCommittingTransactions
_faceTimeProviderDelegate
_callFilterController
_processAssertionManager
_callControllerHost
_faceTimeCallSource
_tinCanCallSource
_tinCanProviderDelegate
_callSourceFetcher
_pendingCallsToChatUUIDs
_pendingPulledCallContexts
_callSourceManager
_routeManager
_dndAllowsCall
_shouldPreferRelayOverDirectSecondaryCalling
_shouldFilterCall
T@"CSDVoIPProcessAssertionManager",R,N,V_processAssertionManager
T@"CXCallControllerHost",R,N,V_callControllerHost
TB,N,V_deferCommittingTransactions
T@"CXCallSource",R,N
T@"CXInProcessCallSource",R,N,V_faceTimeCallSource
T@"CXInProcessCallSource",R,N,V_tinCanCallSource
T@"<CXProviderDelegatePrivate>",R,N,V_tinCanProviderDelegate
T@"CSDCallSourceFetcher",R,N,V_callSourceFetcher
T@"CSDCallFilterController",&,N,V_callFilterController
T@"NSMutableDictionary",R,N,V_pendingCallsToChatUUIDs
T@"NSMutableDictionary",R,N,V_pendingPulledCallContexts
T@"CXCallSourceManager",R,N,V_callSourceManager
T@"CSDRelayCallDataSource",W,N,V_relayCallDataSource
T@"<CSDRouteManager>",&,N,V_routeManager
T@?,C,N,V_dndAllowsCall
T@?,C,N,V_supportsPrimaryCalling
T@?,C,N,V_shouldPreferRelayOverDirectSecondaryCalling
T@?,C,N,V_shouldFilterCall
T@"CSDFaceTimeProviderDelegate",R,N,V_faceTimeProviderDelegate
T@"CSDCallProviderManager",&,N,V_callProviderManager
queueContext
initWithExportedObject:
setClientManager:
setSynchronous:
clientsByObject
isLocalClientActive
currentConnection
requiredConnectionCapability
setMachServiceName:
initWithMachServiceName:
setXpcListener:
resume
setAsynchronousExportedObjectProxy:
setSynchronousExportedObjectProxy:
addClient:
removeClient:
_performBlock:onClients:coalescedByIdentifier:
filterClientsUsingPredicate:andPerformBlock:
performBlockOnQueue:andWait:
remoteObjectInterface
exportedInterface
exportedObject
interruptionHandler
_connectionEndedHandlerForXPCClient:withCustomBlock:
invalidationHandler
_setQueue:
setTarget:
setLocalClientActive:
invoke
_updatedQOSBlockForBlock:
retainArguments
machServiceName
_xpcClientForConnection:
isClientAllowed:
listener:shouldAcceptNewConnection:
clientsEntitledForCapability:
filterClientsEntitledForCapability:andPerformBlock:
performBlockOnQueue:
_performBlock:onClients:
handleInvocation:synchronously:
_localClientActive
_remoteObjectInterface
_exportedInterface
_interruptionHandler
_invalidationHandler
_asynchronousExportedObjectProxy
_synchronousExportedObjectProxy
_exportedObject
_requiredConnectionCapability
_clientsByObject
_machServiceName
T^v,R,N
T@"NSMapTable",R,N,V_clientsByObject
localClientActive
TB,N,GisLocalClientActive,V_localClientActive
T@"NSString",&,N,V_machServiceName
T@"NSXPCListener",&,N,V_xpcListener
T@,&,N,V_asynchronousExportedObjectProxy
T@,&,N,V_synchronousExportedObjectProxy
T@"CSDClient",R,N
T@"NSXPCInterface",&,N,V_remoteObjectInterface
T@"NSXPCInterface",&,N,V_exportedInterface
T@,&,N,V_exportedObject
T@?,C,N,V_interruptionHandler
T@?,C,N,V_invalidationHandler
T@"NSString",C,N,V_requiredConnectionCapability
methodSignatureForSelector:
isSynchronous
forwardInvocation:
_synchronous
T@"CSDClientManager",W,N,V_clientManager
synchronous
TB,N,GisSynchronous,V_synchronous
T@,R,N,V_exportedObject
strongToWeakObjectsMapTable
currentCallSet
uniqueProxyIdentifierToCallTableSemaphore
uniqueProxyIdentifierToCallTable
_postClientNotificationName:forCall:userInfo:
T#,R,N
shouldRegisterCall:
postClientNotificationName:
postClientNotificationName:forCall:
postClientNotificationName:forCall:userInfo:
setUniqueProxyIdentifierToCallTable:
setUniqueProxyIdentifierToCallTableSemaphore:
setCurrentCallSet:
_uniqueProxyIdentifierToCallTable
_uniqueProxyIdentifierToCallTableSemaphore
_currentCallSet
T@"NSMapTable",&,N,V_uniqueProxyIdentifierToCallTable
T@"NSObject<OS_dispatch_semaphore>",&,N,V_uniqueProxyIdentifierToCallTableSemaphore
T@"NSMutableOrderedSet",&,N,V_currentCallSet
T@"CSDCallStateController",R,W,N,V_callStateController
updateCovered
initWithNotificationName:queue:callback:
setCovered:
isCovered
covered
TB,R,N,GisCovered
coveredNotifyObserver
setCoveredNotifyObserver:
_covered
_coveredNotifyObserver
TB,N,GisCovered,V_covered
T@"TUDelegateController",R,N,V_delegateController
T@"<TUNotifyObserver>",&,N,V_coveredNotifyObserver
T@"NSOrderedSet",R,C,N
initWithQueue:conversationManager:networkSupport:serverBag:featureFlags:invitationResolver:
conversationUUIDsWaitingToJoin
networkSupport
setEnableCriticalReliability:
startAudioForConversationsIfNecessary
enqueueConversationWaitingForAudioWithConversationUUID:
usesAudioSession
isAudioSessionActive
callUUIDsUpgradedForAVMode
reportNewIncomingCallForConversation:fromHandle:callUUID:
validNetworkReachable
pendingTransactions
associationAVCIdentifier
isWaitingToJoinForConversationUUID:
callUUIDForConversationUUID:
conversationUUIDForCallUUID:
_audioSessionActive
_conversationUUIDsWaitingToJoin
_callUUIDsByConversationUUID
_conversationUUIDsByCallUUID
_callUUIDsUpgradedForAVMode
_networkSupport
_conversationUUIDsAwaitingActiveAudioSession
T@"NSMutableSet",R,N,V_conversationUUIDsWaitingToJoin
T@"FTNetworkSupport",R,N,V_networkSupport
T@"<CSDConversationServerBag>",R,N,V_serverBag
T@"NSMutableDictionary",R,N,V_callUUIDsByConversationUUID
T@"NSMutableDictionary",R,N,V_conversationUUIDsByCallUUID
T@"NSMutableSet",R,N,V_conversationUUIDsAwaitingActiveAudioSession
T@"NSMutableSet",R,N,V_callUUIDsUpgradedForAVMode
audioSessionActive
TB,N,GisAudioSessionActive,V_audioSessionActive
handleLocalFrequencyChanged:
handleRemoteFrequencyChanged:
handleLocalMeterLevelChanged:
handleRemoteMeterLevelChanged:
handleMutedChanged:
handleSendingAudioChanged:
floatValue
csd_stringWithCSDVoIPApplicationMessageTransportType:
isEqualToMessage:
_payload
_transportType
T@"NSUUID",R,N,V_uuid
T@"NSDictionary",R,C,N,V_payload
Tq,R,N,V_transportType
_socket
_destination
Ti,R,N,V_type
Ti,R,N,V_socket
T@"NSString",R,C,N,V_destination
currentRunLoop
triggers
callChanged
shouldShowInvitationUserNotificationForConversation:handle:
add:
isModernGFTEnabled
linkPseudonymExpiry
inactiveLinkPseudonymExpiry
inactiveLinkCacheLimit
linkSyncRecoverFailureLimit
linkSyncRecoverTimeLimit
activityIdentifierBundleIDMapping
isExpanseConduitProxyEnabled
neighborhoodActivityConduitTimeout
conversationLinkDescriptorDataSourceDelegate
setConversationLinkDescriptorDataSourceDelegate:
addConversationLinkDescriptors:error:
addConversationLinkDescriptors:completion:
addOrUpdateConversationLinkDescriptors:error:
addOrUpdateConversationLinkDescriptors:completion:
conversationLinkDescriptorCountWithPredicate:error:
conversationLinkDescriptorCountWithPredicate:completion:
conversationLinkDescriptorsWithPredicate:limit:offset:error:
conversationLinkDescriptorsWithPredicate:limit:offset:completion:
removeConversationLinkDescriptorsWithPredicate:error:
removeConversationLinkDescriptorsWithPredicate:completion:
setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setName:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setName:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
shouldForceVerificationFailures
isSignificantChangeFromAttributes:
defaultDisplayScale
defaultScaleFactor
verify:completion:
vouchingEnabled
uNNotificationsMacOSEnabled
sharePlayDisabled
sharePlayDiscoverabilityEnabled
ftvSpatialAudioEnabled
FTUserScore
livePhotoXPCServiceEnabled
nonInterruptingCalls
qrPluginEncryptionEnabled
unreliableMessengerEnabled
TTRBannerEnabled
suggestionsReloadForSelectedRecipients
requestA2DPOverIncomingCalls
screenCaptureKitEnabled
continuityCaptureEnabled
greenTeaLinksEnabled
updatedBannersEnabled
screenSharingCALayerHostMode
collaborationStateChanged:forHighlightIdentifier:onConversationUUID:
requesteeID
rejectWithError:
tu_contactsForContactHandles:keyDescriptors:error:
tu_contactsForHandles:keyDescriptors:error:
unifiedContactWithIdentifier:keysToFetch:error:
unifiedContactsMatchingPredicate:keysToFetch:error:
personFromContact:
contactForIdentifier:keysToFetch:
contactForDestinationId:keysToFetch:
phoneNumber
isDefaultVoiceSIM
slot
mobileCountryCode
mobileNetworkCode
incomingCalls
displayedCalls
displayedAudioAndVideoCalls
conferenceParticipantCalls
callsHostedOrAnEndpointElsewhere
callsOnDefaultPairedDevice
callsWithStatus:
incomingVideoCall
activeVideoCall
currentVideoCall
videoCallWithStatus:
audioOrVideoCallWithStatus:
displayedCallFromCalls:
countOfCallsPassingTest:
currentVideoCallCount
callCountOnDefaultPairedDevice
hasCurrentAudioCalls
hasCurrentVideoCalls
anyCallIsHostedOnCurrentDevice
allCallsAreOfService:
currentAudioAndVideoCallGroups
callGroupsOnDefaultPairedDevice
callPassingTest:sortedUsingComparator:
displayedCall
conferenceCall
frontmostCall
frontmostAudioOrVideoCall
existingCallsHaveMultipleProviders
supportsSecureCoding
encodeWithCoder:
initWithCoder:
initWithCapabilities:callSource:queue:
initWithContactsDataSource:
labeledHandlesForContactWithIdentifier:
setIncludesCallsInRecents:
tinCanProvider
setTopic:
setShouldIgnoreRingerSwitch:
alertWithConfiguration:
play
emergencyCallbackCapabilitiesDidChange
isHomePodFamily
destinationWithDevice:
isVisible
currentLayout
elements
configurationForDefaultMainDisplayMonitor
monitorWithConfiguration:
handleTrigger:
handleSharePlayTrigger:
momentsStartedRemoteCapture:
handlePendingMessageDidReceiveInviteNotification:
faceTimeAppViewLinkDetailsURLForPseudonym:
continueHandoffForConversationWithEligibility:
executeFetchRequest:
contactStore
actionWithIdentifier:title:options:
categoryWithIdentifier:actions:intentIdentifiers:options:
categoryWithIdentifier:actions:intentIdentifiers:hiddenPreviewsBodyPlaceholder:options:
setCategoryIdentifier:
localizedDeviceCategory
setBody:
setNotificationProviderIdentifier:
tu_conversationHandoffDynamicIdentifierForEligibility:
joinRequestForApplicableConversationWithHandoffEligibility:
requestWithIdentifier:content:trigger:
setDestinations:
setDefaultActionURL:
setActiveParticipantHandles:
setSound:
soundWithAlertType:
setAlertTopic:
incomingPendingConversations
supportsConversations
setInterruptionLevel:
setThreadIdentifier:
initWithConversationLink:otherInvitedHandles:sendLetMeInRequest:
standardInvitationPreferencesForLink
getDeliveredNotificationsWithCompletionHandler:
request
destinations
setShouldSuppressDefaultAction:
displayFirstName
URLForResource:withExtension:
setCategory:mode:options:error:
setActive:withOptions:error:
setVolume:
activeParticipantHandles
notificationProviderIdentifier
content
setShouldIgnoreDowntime:
trigger
requestWithIdentifier:content:trigger:destinations:
notification
actionIdentifier
setAudioSessionProperties:
setMixingVoiceWithMediaEnabled:
startAudioSessionWithCompletionHandler:
initWithBool:
tu_dataForAuditToken:
opaqueSessionID
setActivationContext:error:
overrideOutputAudioPort:error:
interruptionPriority
deactivateAndSetInterruptionPriority:error:
setInterruptionPriority:error:
setHostProcessAttribution:error:
setMXSessionProperty:value:error:
currentProcessIdentifier
processStateChanged
processStateChangedWithBundleID
setProcessStateChangedWithBundleID:
processStatesForBundleIdentifier:
fetchCurrentProcessStatesForBundleIdentifier:completion:
processStatesForCallSource:
mostElevatedApplicationStateForPID:
applicationInfoForApplication:
handlePendingMessageDidReceiveCancelNotification:
destinationWithRapportPublicIdentifier:
messenger
setDateReceivedLetMeIn:
initWithUnsignedLongLong:
temporaryDirectory
archivedDataWithRootObject:requiringSecureCoding:error:
fromID
serverTimestamp
originalTimestamp
initWithContentsOfURL:options:error:
knownIdentifiersByHandleType
initWithInteger:
flags
setDestinationDevice:
setFlags:
setPasswordType:
setPromptForPasswordHandler:
setAuthCompletionHandler:
activateWithCompletion:
destinationDevice
tryPassword:
allowContactsOnly
userContext
keyPathForActiveCall
setObject:forContextualKeyPath:responseQueue:withCompletion:
calleeHandlesKey
groupIDKey
groupNameKey
calleeContactIDsKey
bundleIDKey
initWithCalls:
isPhoneCallAudioCategory:
otherSessionsRequestNoRingtoneInterruption
pickRoute:error:
getPickableRoutesForCategory:mode:completion:
bestGuessPickableRoutesForAnyCall
pickableRoutesForTTY
mainQueue
addObserverForName:object:queue:usingBlock:
stopAudioSession
resetAudioSessionOutputPortOverride
stopPlaying
setCurrentAttributionKey:andApp:
alertDidBeginPlaying:
setShouldRepeat:
setExternalToneFileURL:
setVibrationIdentifier:
setToneIdentifier:
sound
vibration
ignoreMute
callAlert
playWithCompletionHandler:
setPlaybackObserver:
activatedLinks
doubleForKey:
tu_predicateForConversationLinkDescriptorsWithPseudonym:
tu_predicateForConversationLinkDescriptorsWithGroupUUID:
tu_predicateForConversationLinkDescriptorsWithActivated:
orPredicateWithSubpredicates:
tu_predicateForConversationLinkDescriptorsWithOriginatorHandle:
tu_predicateForConversationLinkDescriptorsWithExpirationDateAfter:
tu_predicateForConversationLinkDescriptorsWithPrivateKey:
initWithLimit:timeLimit:
verifySignedData:matchesExpectedData:withTokenURI:forAlgorithm:completion:
signData:withAlgorithm:completion:
sendMessageWithDictionary:error:
JSONObjectWithData:options:error:
initWithChar:
initWithSessionInfo:userInfo:frameworksToCheck:
startConfigurationWithCompletionHandler:
__swift_objectForKeyedSubscript:
isFaceTimePhotosRestricted
isFaceTimePhotosEnabled
isPermittedToUseBluetoothAccessories
isPermittedToUsePrivateAPI
callInteractionsDidChangeForManager:
handleCallHistoryDatabaseChangedWithNotification:
predicateForCallsWithUniqueID:
predicateForCallsWithAnyMediaTypes:
iconWithSystemImageName:
actionWithIdentifier:title:options:icon:
_resetCache
intent
contentByUpdatingWithProvider:error:
setShouldAuthenticateDefaultAction:
setShouldBackgroundDefaultAction:
defaultActionURL
disconnectedCause
stringFromContact:style:
assumedIdentity
setAssumedIdentity:
descriptorForRequiredKeysForStyle:
contactsByHandleForCalls:keyDescriptors:error:
setPerformDialAssist:
setPerformLocalDialAssist:
setDialAssisted:
initWithRemoteMembers:otherInvitedHandles:
predicateForCallsBetweenStartDate:endDate:
callerNetworkName
notificationThreadIdentifier
callerIdIsBlocked
interaction
uniqueId
callCountWithPredicate:
speechSynthesizer:didStartSpeechUtterance:
speechSynthesizer:didFinishSpeechUtterance:
speechSynthesizer:didCancelSpeechUtterance:
setMixToUplink:
setNumberOfLoops:
initWithContentsOfURL:error:
setUsesApplicationAudioSession:
audioQueueFlags
setAudioQueueFlags:
setRate:
speakUtterance:
isPlaying
isSpeaking
stopSpeakingAtBoundary:
speechSynthesizer:didPauseSpeechUtterance:
speechSynthesizer:didContinueSpeechUtterance:
speechSynthesizer:willSpeakRangeOfSpeechString:utterance:
carPlayScreenConnectionChanged
sessionDidConnect:
sessionDidDisconnect:
setSessionObserver:
waitForSessionInitialization
startedConnectionAttemptOnTransport:
cancelledConnectionAttemptOnTransport:
session:didUpdateConfiguration:
rectValue
setActiveRequestsByTransactionID:
localSenderIdentity
contains:
initWithKeysToFetch:
predicateForContactsMatchingHandleStrings:
setPredicate:
executeFetchRequest:error:
storeWithOptions:
suggestedNamesForDestinationID:onlySignificant:error:
__swift_setObject:forKeyedSubscript:
routesDidChangeHandler
routeWasPickedHandler
timedOutPickingRouteHandler
audioRouteInformationChangedWithNotification:
audioInterruptionPropertiesChangedWithNotification:
idsDeviceIdentifier
publicIdentifier
mediaSystemIdentifier
mediaSystemName
effectiveIdentifier
localDevice
setLocalDeviceUpdatedHandler:
setDeviceFoundHandler:
setDeviceLostHandler:
setDeviceChangedHandler:
dataActiveAndReachable
wifiAllowedForBundleId:
cellularDataEnabledForBundleId:
initWithArray:
isWiredHeadset
isWiredHeadphones
revision
standardUserDefaults
underLimitForItem:
noteItem:
dataWithPropertyList:format:options:error:
currentIDStatusForDestinations:service:listenerID:queue:completionBlock:
requiredIDStatusForDestinations:service:listenerID:queue:completionBlock:
currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:
__imHexString
multiwaySupported
multiwayBlocked
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
momentCapturedForStreamToken:requesterID:reply:
userNotificationProviderServerXPCInterface
voicemailsChangedWithNotification:
onlineStatusChangedWithNotification:
subscriptionStateChangedWithNotification:
setBadgeString:withCompletionHandler:
removeDeliveredNotificationsWithIdentifiers:
replaceContentForRequestWithIdentifier:replacementContent:completionHandler:
addNotificationRequest:withCompletionHandler:
setNotificationCategories:
setWantsNotificationResponsesDelivered
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
voicemailInfoAvailableNotification:voicemailInfo:
getVoicemailInfo:completion:
setAttachments:
initWithContactProvider:
voicemailStartCallIntentByHandleForHandles:
hasAudio
setAudio:
attachmentWithIdentifier:URL:options:error:
isVoiceMailMWI
available
trashVoicemail:
countOfVoicemailsPassingTest:
mailboxType
isRead
messagesForMailboxType:limit:offset:error:
messagesForMailboxType:read:limit:offset:error:
dataForVoicemailWithIdentifier:
isTranscriptionEnabled
isSubscribed
isOnline
isMessageWaiting
contacts
transcriptionState
dataURL
duration
voicemailDatabaseReset:
predicateForCallsWithStatusOriginated:
predicateForCallsWithRemoteParticipantHandleValue:
predicateForCallsWithRemoteParticipantHandleNormalizedValue:
initWithType:value:normalizedValue:
startTrackingCollaborationIdentifier:collaborationURL:cloudKitAppBundleIDs:isLocallyAdded:toConversationUUID:completionHandler:
highlightAdded:applicationRecord:cloudKitAppBundleIDs:isLocallyAdded:toConversationUUID:
highlightRemoved:
highlightOpened:
documentStateForHighlightIdentifier:
appLinksWithURL:limit:error:
targetApplicationRecord
currentSIMsWithError:
initWithSoundType:provider:video:region:
attemptToPlayDescriptor:completion:
sendEventID:event:destinationID:options:completion:
registerEventID:options:handler:
registerRequestID:options:handler:
mediaRouteIdentifier
activeDevices
sendRequestID:request:destinationID:options:responseHandler:
verifiedIdentity
controlFlags
setControlFlags:
moments:didEndProcessingRequest:url:error:
stringGUIDForObject:
deleteItemAndReturnError:
handleContinueHandoffAudioRouteNotification:
keyEnumerator
initWithBytesNoCopy:length:freeWhenDone:
base64EncodedStringWithOptions:
isEquivalentToDeviceHandle:
kickMember:conversation:
ams_sharedAccountStore
ams_activeiCloudAccount
ams_activeiTunesAccount
ams_altDSID
addRemoteMembers:toConversation:
initWithName:knownIdentifiers:deviceModel:
isEligibleForHandoff
mapTableWithKeyOptions:valueOptions:
plistRepresentation
Additions
CSDMessagingConversationParticipantAssociation
NSCopying
CSDMessagingLinkSyncRecoverMessage
CSDMessagingEncryptedConversationMessage
CSDMessagingConversationLink
CSDRelayController
CSDOrientationMonitor
BKSAccelerometerDelegate
NSObject
CSDCallCenterObserverDelegate
CSDTransactionManager
CSDCrashReporter
CSDVoIPProcessAssertion
CSDAVConference
CSDAVConferenceProviderDelegate
CSDAVConferenceConfiguration
CSDMessagingConversationParticipant
CSDUserActivityManager
TUCallProviderManagerDelegate
CSDUserActivityCommunicatorDelegate
TUConversationManagerDelegate
CSDUnknownCallFilter
CSDCallFilter
CSDAggregateDictionaryReporter
CSDReporter
CSDProximityController
CSDProximitySensorObserverDelegate
TUDelegate
TURouteControllerDelegate
FaceTime
CSDFaceTimeIMAVProviderDelegate
IMAVControllerDelegate
CSDDualFaceTimeProviderDelegate
CSDFaceTimeProviderDelegate
CXProviderDelegatePrivate
CXProviderDelegate
CSDCallHistoryControllerXPCServer
TUCallHistoryControllerXPCServer
CSDFaceTimeIDSService
CSDConversation
CSDIDSGroupSessionDelegate
CPActivitySessionManagerDelegate
CPAudioPolicyStateObserver
CSDAVCSessionDelegate
CSDRelayIDSService
CSDMessagingCallModel
CSDRelayClientController
CSDRelayMessagingControllerClientMessagingDelegate
CSDMessagingHandle
CSDMessagingConversationJoinedMetadata
CSDProviderCall
CSDPauseDigitsQueueDelegate
CSDCallStateMonitor
CSDPendingConversation
CSDStatusBarManager
CSDStatusBarResolverDelegate
CSDNeighborhoodActivityConduitXPCServer
CSDNeighborhoodActivityConduitDelegate
TUNeighborhoodActivityConduitXPCServer
CSDAdditions
CSDCarrierBundlePhoneNumberProvider
CSDCarrierBundlePhoneNumberProviderController
CoreTelephonyClientDelegate
CSDIDSGroupSessionProvider
IDSGroupSessionDelegate
IDSSessionDelegatePrivate
IDSSessionDelegate
CSDIDSSessionProvider
CSDRelayIDSDualSessionData
CSDRelayIDSDualSession
CSDCallHistoryController
CSDMessagingLinkSyncMessage
CSDThumperCapabilitiesMonitor
TUCallCapabilitiesDelegatePrivate
TUCallCapabilitiesDelegate
CSDConversationJoinContext
CSDAccountsController
IDSServiceDelegatePrivate
IDSServiceDelegate
CSDIDSDualSessionProvider
CSDPauseDigits
CSDConversationProviderManagerXPCServer
TUConversationProviderManagerXPCServer
CSDCallProviderManagerXPCServer
TUCallProviderManagerXPCServer
CSDCallProviderManagerDelegate
CSDFaceTimeVideoIDSService
CSDIDSChat
CSDIDSDualSessionDelegate
CSDAVConferenceDelegate
CSDMessagingConversationActivityContext
CSDCallDirectoryManager
CXCallDirectoryNSExtensionManagerDelegate
TinCan
CSDCTCallCapabilities
CSDMessagingRelayMessage
CSDIncomingCallFilterDataSource
CSDMessagingCallProvider
CSDRelayMessagingController
CSDRelayIDSMessengerDelegate
CSDRelayIDSSessionMessengerDelegate
CSDDaemon
TUConfigurationDelegate
CSDAbstractIDSProviderDelegate
CSDIDSChatDelegate
CSDMessagingAVConferenceInviteData
CSDIDSDualSession
CSDIDSDualSessionProviderDelegate
CSDRelayIDSMessenger
CSDThumperAccount
NSMutableCopying
CSDMutableThumperAccount
CSDFaceTimeIDSProviderDelegate
CSDRelayCommonController
CSDRelayMessagingControllerCommonMessagingDelegate
CSDFileTransferController
CSDFileTransferring
CSDCallSourceFetcher
CSDThumperPushHandlerAdditions
CSDThumperPushHandler
CSDPinExchangeDelegate
CSDMessagingCall
CSDRelayCall
CSDCallHistoryManagerXPCServer
CSDCallHistoryManagerDelegate
TUCallHistoryManagerXPCServer
CSDPauseDigitsQueue
CSDXPCClient
CSDTTYProviderObserver
CSDRelayPairedDeviceMessenger
CSDMessagingConversationActivitySceneAssociationBehavior
CSDProviderCallConfiguration
CSDMessagingConversationParticipantDidJoinContext
CSDMediaAssetManager
CSDMediaAssetManaging
CSDPowerLogReporter
CSDFaceTimeProviderDelegateManagerDelegate
CSDVoIPApplicationMessageContext
PKVoIPXPCClient
CXNetworkExtensionVoIPXPCClient
CSDVoIPApplication
CSDMessagingConversationActivitySession
CSDMessagingPersonNameComponents
CSDMessagingLinkSyncUpdateMessage
CSDStatusBarResolver
CSDRelayConferenceInterface
CSDSandboxExtensionDirectory
CSDPinExchangeController
CSDMessagingMemberAssociationClaim
CSDCallCapabilities
TUCallCapabilitiesXPCServer
TUCallCapabilitiesXPCServerActions
CSDAccountsControllerDelegate
CSDTelephonyCallCapabilitiesDelegate
CSDThumperCapabilitiesMonitorDataSource
CSDBlockedCallFilter
CSDCall
TUDynamicCallDisplayContextDelegate
CXAudioSessionActivationStateObserver
CSDRouteManager
TUAudioDeviceControllerDelegate
CSDMessagingConversationMember
CSDMessagingConversation
CSDMessagingConversationReport
CSDConversationManager
CSDConversationDelegate
CSDPendingMembershipTrackerMessenger
CSDPendingMembershipTrackerDelegate
CSDConversationNoticeDelegate
CSDConversationLinkManagerDelegate
CSDScreenSharingActivityManagerDelegate
CPApplicationPolicyManagerDelegate
CPSystemStateObserverObserver
CPConversationManagerDataSource
CSDMessagingVoucher
CSDCHRecentCall
CSDApplicationRecord
CSDMessagingCallMessage
CSDAudioRouteCollection
CSDFaceTimeAudioIDSService
CSDMessagingConversationActivity
CSDMessagingConversationInvitationPreference
VoIPApplicationAdditions
CSDMessagingCallCapabilitiesState
CSDVoIPProcessAssertionManager
CSDIncomingCallFilter
CSDAppleIDUtilities
CSDRecentsController
CSDMessagingConversationLinkGeneratorDescriptor
CSDIDSSession
CSDMessagingCallDisplayContext
CSDUserActivityCommunicator
UABestAppSuggestionManagerDelegate
CSDUserConfigurationMigrator
CSDThumperIDSService
CSDIDSGroupSession
CSDIDSGroupSessionProviderDelegate
CSDCallStateController
TUCallServicesXPCServer
TUCallCenterXPCServer
TUCallServicesProxyCallActions
TUCallServicesClientCapabilitiesXPCServer
TUAudioDeviceControllerXPCServer
TURouteControllerXPCServer
TUCallFilterControllerXPCServer
CSDRelayMessagingControllerDelegate
CSDCallDelegate
CSDDeviceLockStateObserver
CSDVoIPApplicationMonitor
CXNetworkExtensionVoIPXPCServer
PKVoIPXPCServer
CSDVoIPApplicationController
APSConnectionDelegate
CXNetworkExtensionMessageControllerHostDelegate
CXNotificationServiceExtensionHostDelegate
CSDConversationNoticeManager
CSDConversationParticipant
CSDCallDataSourceMap
CSDMessagingLabeledHandle
CSDClient
CSDMessagingConversationActivityMetadata
CSDConversationManagerXPCServer
TUConversationManagerXPCServer
TUConversationMediaControllerXPCServer
TUConversationMessagesGroupProviderXPCServer
CSDConversationManagerDelegate
CSDCallProviderManager
CSDCallProviderManagerDataSourceDelegate
CSDFaceTimeConversationProviderDelegate
CSDRaiseToAnswerController
CSDGFTServiceConversationProviderDelegate
CSDRelayHostController
CSDRelayMessagingControllerHostMessagingDelegate
CSDUserActivity
CSDCallProviderManagerDataSource
CSDMomentsReportingSession
CSDSignposts
CSDAVCSession
AVCSessionParticipantDelegate
AVCScreenCaptureDelegate
AVCSessionDelegate
AVCRateAdaptationDelegate
CSDExternalIDSDualSession
CSDRelayConferenceConnection
CSDTelephonyCallCapabilities
CSDCoreTelephonyClientDelegate
CSDMessagingRoute
CSDConversationProviderManager
CSDRelayCallDelegate
CSDMessagingConversationMessage
CSDFaceTimeIMAccount
IDSAccountRegistrationDelegate
CSDMockCall
CSDCoreTelephonyClient
CoreTelephonyClientCapabilitiesDelegate
CSDMessagingCallModelState
CSDMessagingSenderIdentity
CSDABCReporter
CSDReportingController
CSDMomentsReportingSessionDelegate
CSDReporterDataSource
CSDMomentsControllerDelegate
CSDVoiceOverObserver
CSDCallFilterController
CSDMessagingLinkSyncCheckInMessage
CSDCallHistoryManager
CSDConversationProvider
CSDIDSService
IDSAccountControllerDelegate
Messaging
CSDRelayIDSSessionMessenger
CSDRelayIDSDualSessionDelegate
CSDMomentsController
CSDFileTransferringDelegate
CSDAVCMomentsDelegate
TUMomentsControllerXPCServer
CSDAVConferenceProvider
AVConferenceDelegate
CSDPulledCallContext
CSDProviderCallDataSource
CXCallControllerHostDelegate
CSDCallSourceFetcherDataSource
CXCallSourceManagerDelegate
CXCallSourceUpdates
CSDProviderCallDelegate
CSDClientManager
NSXPCListenerDelegate
CSDClientManagerExportedObjectProxy
CSDCallDataSource
CSDProximitySensorObserver
CSDAbstractFaceTimeConversationProviderDelegate
CSDAbstractFaceTimeConversationProviderDelegateProtocol
CSDRelayCallDataSource
CSDVoIPApplicationMessage
CSDVoIPApplicationMessageAdditions
CSDIDSTransport
@16@0:8
@24@0:8@16
@24@0:8^{_NSZone=}16
v20@0:8I16
v20@0:8B16
B16@0:8
v24@0:8Q16
B24@0:8@16
v24@0:8@16
Q16@0:8
I16@0:8
v16@0:8
@"NSString"
{?="identifier"b1"version"b1}
#16@0:8
@24@0:8Q16
@"NSMutableArray"
{?="version"b1}
@"NSData"
@36@0:8i16@20@28
@36@0:8@16i24@28
@28@0:8@16B24
v24@0:8d16
i16@0:8
v20@0:8i16
@20@0:8i16
i24@0:8@16
d16@0:8
@"CSDMessagingConversationLinkGeneratorDescriptor"
@"CSDMessagingHandle"
{?="creationDateEpochTime"b1"pseudonymExpirationDateEpochTime"b1"linkLifetimeScope"b1"isActivated"b1}
@"CSDCallStateController"
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16d24f32f36f40i44
v32@0:8@16q24
v48@0:8@"BKSAccelerometer"16d24f32f36f40i44
v32@0:8@"BKSAccelerometer"16q24
v32@0:8@16@24
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
q16@0:8
v24@0:8q16
@"BKSAccelerometer"
@"<CSDCallCenterObserver>"
v32@0:8@16@"NSString"24
@"NSMapTable"
@"NSObject<OS_dispatch_queue>"
v32@0:8@16i24I28
v32@0:8i16I20@24
v24@0:8@?16
@"BKSProcessAssertion"
v36@0:8@16B24@28
v40@0:8@16@24@32
v28@0:8@16f24
v28@0:8@16B24
v40@0:8@16@24q32
v36@0:8@"<CSDAVConferenceProvider>"16B24@"NSError"28
v40@0:8@"<CSDAVConferenceProvider>"16@"NSError"24@"NSDictionary"32
v24@0:8@"<CSDAVConferenceProvider>"16
v32@0:8@"<CSDAVConferenceProvider>"16@"NSData"24
v28@0:8@"<CSDAVConferenceProvider>"16f24
v28@0:8@"<CSDAVConferenceProvider>"16B24
v40@0:8@"<CSDAVConferenceProvider>"16@"NSData"24q32
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
v24@0:8@"CSDAVConferenceConfiguration"16
v24@0:8@"CSDIDSTransport"16
v24@0:8@"VCCapabilities"16
v24@0:8@"NSData"16
v32@0:8@"NSString"16@"NSString"24
@"<CSDAVConferenceDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceDelegate>"16
@"NSObject<OS_dispatch_queue>"16@0:8
v24@0:8@"NSObject<OS_dispatch_queue>"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
@"NSError"16@0:8
@"NSDate"16@0:8
v32@0:8q16@24
v20@0:8f16
q32@0:8@16^@24
@?16@0:8
@"<CSDAVConferenceDelegate>"
@"NSDate"
@"NSNumber"
@"NSDictionary"
@"NSError"
@"CSDAVConferenceConfiguration"
@"<CSDAVConferenceProvider>"
{CGSize="width"d"height"d}
@"VCCapabilities"
@"NSUUID"
@"RTCSecureHierarchyToken"
@"CSDMessagingConversationParticipantAssociation"
{?="identifier"b1"avMode"b1"options"b1"sharePlayProtocolVersion"b1"version"b1"guestModeEnabled"b1"isGFTDowngradeToOneToOneAvailable"b1"isGondolaCallingAvailable"b1"isLightweight"b1"isMirageAvailable"b1"isMomentsAvailable"b1"isScreenSharingAvailable"b1"isUPlusNDowngradeAvailable"b1}
i24@0:8q16
@32@0:8@16Q24
v24@0:8@"TUCallProviderManager"16
v36@0:8I16@20@28
v28@0:8I16@20
v36@0:8I16@"NSString"20@"NSString"28
v28@0:8I16@"NSString"20
v44@0:8@16@24Q32B40
v48@0:8@16@24@32@40
v48@0:8@16@24Q32@40
v36@0:8@16@24B32
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
@32@0:8@16@24
v40@0:8@16@24B32B36
@"CSDUserActivityCommunicator"
@"CSDUserActivity"
@"TUFeatureFlags"
B36@0:8@16@24B32
q32@0:8@16@24
B40@0:8@16@24@32
B32@0:8@16@24
B24@0:8@"TUHandle"16
B36@0:8@"TUHandle"16@"NSString"24B32
q32@0:8@"NSArray"16@"NSString"24
B24@0:8@"CSDCall"16
B40@0:8@"NSString"16@"NSString"24@"NSString"32
B36@0:8@"NSArray"16@"NSString"24B32
B32@0:8@"NSArray"16@"NSString"24
v40@0:8@16@24Q32
v36@0:8@16@24i32
v44@0:8@16@24@32B40
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
v32@0:8@"CSDReportingController"16@"CSDMomentsUsageReport"24
v40@0:8@"CSDReportingController"16@"TURoute"24@"CSDCall"32
v36@0:8@"CSDReportingController"16@"NSString"24i32
v32@0:8@"CSDReportingController"16@"TUConversation"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"TUConversation"32
v40@0:8@"CSDReportingController"16@"NSArray"24@"NSUUID"32
v32@0:8@"CSDReportingController"16@"CSDIDSChat"24
v32@0:8@"CSDReportingController"16@"NSString"24
v44@0:8@"CSDReportingController"16@"NSUUID"24@"RTCSecureHierarchyToken"32B40
v48@0:8@"CSDReportingController"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v32@0:8@"CSDReportingController"16@"TUConversationLink"24
v36@0:8@"CSDReportingController"16@"TUConversation"24B32
@"<CSDReporterDataSource>"16@0:8
v24@0:8@"<CSDReporterDataSource>"16
v28@0:8@"<CSDProximitySensorObserver>"16B24
v24@0:8@"TURouteController"16
@40@0:8@16@24@32
@64@0:8@16@24@32@40@48@56
@"TURouteController"
@"<CSDOrientationObserver>"
@"<CSDProximitySensorObserver>"
@"<CSDVoiceOverObserver>"
v24@0:8@"IMAVChat"16
v32@0:8@"IMHandle"16q24
v24@0:8@"CXProvider"16
B32@0:8@"CXProvider"16@"CXTransaction"24
v32@0:8@"CXProvider"16@"CXStartCallAction"24
v32@0:8@"CXProvider"16@"CXAnswerCallAction"24
v32@0:8@"CXProvider"16@"CXEndCallAction"24
v32@0:8@"CXProvider"16@"CXSetHeldCallAction"24
v32@0:8@"CXProvider"16@"CXSetMutedCallAction"24
v32@0:8@"CXProvider"16@"CXSetGroupCallAction"24
v32@0:8@"CXProvider"16@"CXPlayDTMFCallAction"24
v32@0:8@"CXProvider"16@"CXAction"24
v32@0:8@"CXProvider"16@"AVAudioSession"24
v32@0:8@"CXProvider"16@"CXSendMMIOrUSSDCodeAction"24
v32@0:8@"CXProvider"16@"CXJoinCallAction"24
v32@0:8@"CXProvider"16@"CXSetTTYTypeCallAction"24
v32@0:8@"CXProvider"16@"CXSetSendingVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetSharingScreenCallAction"24
v32@0:8@"CXProvider"16@"CXSetScreenShareAttributesCallAction"24
v32@0:8@"CXProvider"16@"CXEnableVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetRelayingCallAction"24
v32@0:8@"CXProvider"16@"CXPullCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationSizeCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationStateCallAction"24
B24@0:8@"NSUUID"16
@"NSUUID"24@0:8@"NSUUID"16
v24@0:8@"NSUUID"16
v28@0:8@16I24
v56@0:8{CGSize=dd}16{CGSize=dd}32@48
I24@0:8q16
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<CSDFaceTimeProviderDelegateManagerDelegate>"
@"CXProvider"
@"NSMutableOrderedSet"
Vv24@0:8@16
Vv24@0:8@"NSArray"16
v24@0:8@"<TUCallHistoryControllerXPCClient>"16
@"CSDCallHistoryController"
@"CSDClientManager"
v44@0:8@16B24@28@36
v36@0:8@16@24I32
v36@0:8@16S24@28
v44@0:8@16@24I32S36B40
v32@0:8@"CSDIDSGroupSession"16@"NSDictionary"24
v44@0:8@"CSDIDSGroupSession"16B24@"NSSet"28@"NSError"36
v32@0:8@"CSDIDSGroupSession"16@"NSError"24
v24@0:8@"CSDIDSGroupSession"16
v36@0:8@"CSDIDSGroupSession"16@"NSError"24I32
v36@0:8@"CSDIDSGroupSession"16S24@"NSError"28
v32@0:8@"CSDIDSGroupSession"16@"NSArray"24
v44@0:8@"CSDIDSGroupSession"16@"NSArray"24I32S36B40
v40@0:8@"CSDIDSGroupSession"16@"NSData"24@"IDSGroupSessionActiveParticipant"32
v40@0:8@16@24@?32
@40@0:8@16Q24@32
v48@0:8@16Q24@32@?40
v32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24
B32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24
v32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivityEvent"24
v40@0:8@"<CPActivitySessionManager>"16@"NSString"24@?<v@?@>32
v40@0:8@"<CPActivitySessionManager>"16@"NSArray"24@"NSString"32
@"TUConversationParticipant"40@0:8@"<CPActivitySessionManager>"16Q24@"NSString"32
v48@0:8@"<CPActivitySessionManager>"16Q24@"NSString"32@?<v@?@"TUConversationParticipant">40
@"NSString"24@0:8@"<CPActivitySessionManager>"16
v48@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v36@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24B32
v40@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24Q32
v28@0:8@"<CPAudioRoutePolicyManager>"16B24
v40@0:8@16B24B28@32
v44@0:8@16q24B32@36
v52@0:8Q16B24q28q36q44
v56@0:8Q16B24B28q32q40q48
v36@0:8Q16B24q28
v40@0:8Q16q24q32
v28@0:8Q16B24
v32@0:8Q16q24
v36@0:8@"<CSDAVCSession>"16B24@"NSError"28
v32@0:8@"<CSDAVCSession>"16@"NSError"24
v40@0:8@"<CSDAVCSession>"16B24B28@"NSError"32
v32@0:8@"<CSDAVCSession>"16q24
v44@0:8@"<CSDAVCSession>"16q24B32@"NSError"36
v24@0:8@"<CSDAVCSession>"16
@152@0:8@16@24@32@40@48B56@60@68@76@84@92@100@108@116@124B132Q136@144
@168@0:8@16@24@32@40@48B56@60@68@76@84@92@100@108@116@124B132Q136@144@152@160
v28@0:8B16@20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v32@0:8Q16@24
v48@0:8@16@24@32B40B44
B28@0:8@16B24
@20@0:8B16
v28@0:8B16Q20
v32@0:8q16Q24
v28@0:8S16@20
i28@0:8@16i24
v32@0:8@16@?24
@"NSSet"
@"<CSDConversationDelegate>"
@"TUConversationLink"
@"TUConversationMember"
@"TUHandle"
@"NSArray"
@"TUConversationActivitySession"
@"CPActivitySessionManager"
@"TUConversationReport"
@"TUConversationParticipantAssociation"
@"TUConversationHandoffEligibility"
@"<TUFeatureFlags>"
@"NSMutableDictionary"
@"NSMutableSet"
@"CSDIDSGroupSession"
@"<CSDAVCSession>"
@"TUVideoDeviceController"
@"CSDFaceTimeInviteDemuxer"
@"CSDConversationParticipant"
@"CPApplicationPolicyManager"
@"CPAudioRoutePolicyManager"
@"CPSystemStateObserver"
@"<CSDConversationServerBag>"
@"NSObject"
@"TUCallScreenShareAttributes"
@"TUConversationProvider"
@"CXCallFailureContext"
{?="supportsAddCall"b1"supportsDTMF"b1"supportsGrouping"b1"supportsHolding"b1"supportsSendingToVoicemail"b1"supportsUnambiguousMultiPartyState"b1"supportsUngrouping"b1}
v28@0:8@"CSDMessagingRelayMessage"16B24
v24@0:8@"CSDMessagingRelayMessage"16
v32@0:8@"CSDMessagingRelayMessage"16@?<v@?@"NSDictionary">24
@28@0:8i16@20
C16@0:8
v20@0:8C16
{?="type"b1}
@"CSDMessagingConversationParticipant"
v24@0:8@"CSDPauseDigitsQueue"16
@52@0:8@16@24@32B40B44i48
@44@0:8@16@24@32B40
{?=[8I]}16@0:8
@"TUParticipant"
@"NSURL"
@"<CSDProviderCallDelegate>"
@"CXCallSource"
@"CXAbstractProviderSource"
@"CSDProviderDisplayMonitor"
@"CXCallUpdate"
@"CSDPauseDigitsQueue"
@"TUCallCenter"
@"NSObject<OS_dispatch_source>"
@"CSDLetMeInRequestorKeyAgreement"
v24@0:8@"<CSDStatusBarResolver>"16
@"<CSDStatusBarResolver>"
@"STCallingStatusDomainPublisher"
@"STCallingStatusDomainCallDescriptor"
v48@0:8@16@24q32@?40
v24@0:8@"TUNearbyDeviceHandle"16
v48@0:8@"TUConversation"16@"TUNearbyDeviceHandle"24q32@?<v@?B@"NSError">40
v24@0:8@?<v@?@"NSSet"@"NSError">16
v24@0:8@?<v@?@"TUNearbyDeviceHandle"@"NSError">16
v40@0:8@"TUNearbyDeviceHandle"16@"NSUUID"24@?<v@?B@"NSError">32
v32@0:8@"TUNearbyDeviceHandle"16@?<v@?B@"NSError">24
v24@0:8@"<TUNeighborhoodActivityConduitXPCClient>"16
@"CSDNeighborhoodActivityConduit"
@"CSDClient"
@40@0:8@16@24^@32
@"<CSDCarrierBundlePhoneNumberProviderControllerDelegate>"
@"CoreTelephonyClient"
v36@0:8@16I24@28
v40@0:8@16@24I32B36
v24@0:8@"IDSGroupSession"16
v36@0:8@"IDSGroupSession"16I24@"NSError"28
v40@0:8@"IDSGroupSession"16@"NSArray"24@"NSError"32
v40@0:8@"IDSGroupSession"16@"NSDictionary"24@"NSError"32
v40@0:8@"IDSGroupSession"16@"IDSGroupSessionParticipantUpdate"24@"NSError"32
v32@0:8@"IDSGroupSession"16@"NSError"24
v32@0:8@"IDSGroupSession"16@"NSDictionary"24
v36@0:8@"IDSGroupSession"16@"NSArray"24B32
v40@0:8@"IDSGroupSession"16@"NSArray"24I32B36
v44@0:8@"IDSGroupSession"16@"NSArray"24I32S36B40
v36@0:8@"IDSGroupSession"16S24@"NSError"28
v32@0:8@"IDSGroupSession"16@"NSArray"24
v40@0:8@"IDSGroupSession"16@"NSData"24@"IDSGroupSessionActiveParticipant"32
v28@0:8@"IDSGroupSession"16I24
v32@0:8@"IDSSession"16@"NSString"24
v24@0:8@"IDSSession"16
v36@0:8@"IDSSession"16I24@"NSError"28
v32@0:8@"NSString"16@"NSData"24
v32@0:8@"IDSSession"16@"NSArray"24
v40@0:8@"IDSSession"16@"NSString"24@"NSData"32
v32@0:8@"IDSSession"16@"NSSet"24
v36@0:8@"IDSSession"16@"NSSet"24B32
v52@0:8@16@24@32@40B48
Q32@0:8Q16@24
v40@0:8Q16@24@?32
v36@0:8@"NSArray"16@"NSData"24B32
v52@0:8@"NSArray"16@"NSData"24@"NSArray"32@"NSArray"40B48
v24@0:8@"NSArray"16
v32@0:8@"NSString"16@?<v@?@>24
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"TUConversationActivitySessionContainer"16@"NSData"24
Q32@0:8Q16@"NSData"24
v40@0:8Q16@"NSData"24@?<v@?Q>32
v32@0:8@"NSSet"16@"NSSet"24
v28@0:8S16@"<IDSDestinationProtocol>"20
v28@0:8S16@"NSArray"20
@"<CSDIDSGroupSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSGroupSessionProviderDelegate>"16
@"NSArray"16@0:8
@"NSSet"16@0:8
@68@0:8@16@24@32@40@48B56B60B64
@"IDSGroupSession"
@"<CSDIDSGroupSessionProviderDelegate>"
@"IDSAccount"
@36@0:8@16B24@28
@60@0:8@16B24@28@36@44@52
@52@0:8@16@24@32i40@44
v36@0:8@16B24@?28
@"<CSDRelayIDSDualSessionDelegate>"
@"IDSDestination"
@"IDSDevice"
@"<CSDCallHistoryControllerDelegate>"
@"CSDMessagingLinkSyncCheckInMessage"
@"CSDMessagingLinkSyncRecoverMessage"
@"CSDMessagingLinkSyncUpdateMessage"
{?="type"b1"version"b1}
v32@0:8@16^{__CFString=}24
@24@0:8^{__CFString=}16
@"<CSDThumperCapabilitiesMonitorDataSource>"
@"NPSDomainAccessor"
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
v68@0:8@16@24@32@40q48@56B64
v76@0:8@16@24@32@40q48@56B64@68
v72@0:8@16@24@32@40@48@56@64
v48@0:8@16@24d32@40
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v76@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64@"IDSMessageContext"68
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v48@0:8@"IDSService"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSService"16q24
@"<CSDAccountsControllerDelegate>"
v32@0:8@"NSData"16@"NSSet"24
v28@0:8@"NSData"16B24
@"<CSDIDSDualSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSDualSessionProviderDelegate>"16
@"<CSDIDSDualSessionProviderDelegate>"
@"IDSSession"
Vv32@0:8@16@?24
Vv24@0:8@?16
Vv48@0:8@16d24@32@?40
Vv48@0:8@16@24@32@?40
Vv40@0:8@16@24@?32
Vv32@0:8@"NSString"16@?<v@?@"TUConversationProvider">24
Vv24@0:8@?<v@?@"NSArray">16
Vv32@0:8@"NSString"16@?<v@?@"NSError">24
Vv32@0:8@"TUConversationProvider"16@?<v@?@"NSError">24
Vv48@0:8@"TUConversationProvider"16d24@"NSString"32@?<v@?@"TUHandle"@"NSDate"@"NSError">40
Vv48@0:8@"TUHandle"16@"TUConversationProvider"24@"NSDate"32@?<v@?B@"NSDate"@"NSError">40
Vv40@0:8@"TUHandle"16@"TUConversationProvider"24@?<v@?B@"NSError">32
v24@0:8@"<TUConversationProviderManagerXPCClient>"16
@"CSDConversationProviderManager"
Vv24@0:8@?<v@?@"NSDictionary"@"NSDictionary"@"NSDictionary">16
Vv24@0:8@"NSString"16
Vv32@0:8@"TUDialRequest"16@?<v@?@"NSError">24
v24@0:8@"<TUCallProviderManagerXPCClient>"16
v24@0:8@"CSDCallProviderManager"16
@"CSDCallProviderManager"
v28@0:8@16i24
v28@0:8@"CSDIDSDualSession"16i24
v24@0:8@"CSDIDSDualSession"16
v36@0:8@"CSDIDSDualSession"16@"NSArray"24B32
v32@0:8@"CSDIDSDualSession"16@"NSData"24
v40@0:8@16q24@32
v24@0:8@"<CSDAVConference>"16
v40@0:8@"<CSDAVConference>"16q24@"NSError"32
v28@0:8@"<CSDAVConference>"16B24
v32@0:8@"<CSDAVConference>"16@"NSData"24
v28@0:8@"<CSDAVConference>"16f24
v32@0:8@"<CSDAVConference>"16q24
v40@0:8@"<CSDAVConference>"16@"NSData"24q32
v32@0:8@"<CXVideoAspectRatioDescriptor>"16@?<v@?@"NSArray"B>24
v24@0:8@"<CXVideoAspectRatioDescriptor>"16
@"<CSDIDSChatDelegate>"16@0:8
v24@0:8@"<CSDIDSChatDelegate>"16
@"NSUUID"16@0:8
@"TUHandle"16@0:8
@"CXCallFailureContext"16@0:8
@36@0:8@16@24B32
@44@0:8@16@24B32@36
@48@0:8@16@24@32B40B44
v32@0:8@16B24B28
@"<CSDIDSChatDelegate>"
@"CSDExternalIDSDualSession"
@"<CSDAVConference>"
v32@0:8@"CXCallDirectoryNSExtensionManager"16@"NSArray"24
@"<CSDDeviceLockStateObserver>"
@"CXCallDirectoryManager"
@"CXCallDirectoryNSExtensionManager"
f16@0:8
@"CSDMessagingAVConferenceInviteData"
@"CSDMessagingCallCapabilitiesState"
@"CSDMessagingCallModel"
@"CSDMessagingCallModelState"
@"CSDMessagingCallDisplayContext"
@"CSDMessagingCallProvider"
@"CSDMessagingRoute"
{?="hostCallCreationTime"b1"messageSendTime"b1"hardPauseState"b1"protoDisconnectedReason"b1"protoOriginatingUIType"b1"protoPriority"b1"protoProtocolVersion"b1"protoService"b1"protoSoundRegion"b1"protoTTYType"b1"receivedMessageType"b1"requestActionType"b1"systemVolume"b1"type"b1"protoCannotBeAnswered"b1"protoCannotRelayAudioOrVideoOnPairedDevice"b1"protoEmergency"b1"protoExpectedEndpointOnMessagingDevice"b1"protoFailureExpected"b1"protoNeedsManualInCallSounds"b1"protoRemoteUplinkMuted"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoSupportsEmergencyFallback"b1"protoSupportsTTYWithVoice"b1"protoUplinkMuted"b1"protoVideo"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8@?<q@?@"NSString"@"NSString">16
B32@0:8@"NSString"16@"NSString"24
@"DNDEventBehaviorResolutionService"
@"TUCallProviderManager"
^I16@0:8
I24@0:8Q16
v32@0:8^I16Q24
{?="list"^I"count"Q"size"Q}
{?="maximumCallGroups"b1"maximumCallsPerCallGroup"b1"supportsAudioAndVideo"b1"supportsAudioOnly"b1"supportsEmergency"b1"supportsRecents"b1"supportsVoicemail"b1}
v48@0:8@"CSDRelayIDSMessenger"16@"CSDMessagingRelayMessage"24@"IDSDestination"32@"IDSDevice"40
v36@0:8@"CSDRelayIDSMessenger"16@"NSArray"24B32
q24@0:8@16
B24@0:8@"CSDMessagingRelayMessage"16
B32@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24
q24@0:8@"CSDMessagingRelayMessage"16
@"NSArray"24@0:8@"CSDMessagingRelayMessage"16
q24@0:8q16
v28@0:8i16@20
v28@0:8@16C24
B20@0:8i16
v32@0:8@?16@24
@"<CSDRelayMessagingControllerDelegate>"
@"<CSDRelayMessagingControllerClientMessagingDelegate>"
@"<CSDRelayMessagingControllerHostMessagingDelegate>"
@"<CSDRelayMessagingControllerCommonMessagingDelegate>"
@"CSDRelayIDSSessionMessenger"
@"CSDRelayPairedDeviceMessenger"
@"<CSDCallContainer>"
v24@0:8@"TUConfiguration"16
v28@0:8i16@?20
@"CSDConversationProviderManagerXPCServer"
@"CSDCallStateMonitor"
@"CSDRelayMessagingController"
@"CSDRelayClientController"
@"CSDRelayHostController"
@"CSDRelayCommonController"
@"CSDCallDirectoryManager"
@"CSDVoIPApplicationController"
@"CSDMomentsController"
@"TUUserConfiguration"
@"CSDUserNotificationController"
@"CSDVoiceOverObserver"
@"CSDDeviceLockStateObserver"
@"CSDOrientationMonitor"
@"CSDProximityController"
@"CSDProximitySensorObserver"
@"CSDRaiseToAnswerController"
@"CSDPowerAssertionManager"
@"CSDAudioController"
@"CSDHandoffAudioController"
@"CSDStatusBarManager"
{CGSize=dd}24@0:8@16
B24@0:8@"<CSDIDSChat>"16
{CGSize=dd}24@0:8@"<CSDIDSChat>"16
v24@0:8@"<CSDIDSChat>"16
v32@0:8@"<CSDIDSChat>"16@"NSData"24
v28@0:8@"<CSDIDSChat>"16f24
v32@0:8@"<CSDIDSChat>"16q24
@"<CSDIDSProviderDelegateCapabilities>"
v40@0:8@"<CSDIDSDualSessionProvider>"16@"NSString"24@"NSData"32
v24@0:8@"<CSDIDSDualSessionProvider>"16
v36@0:8@"<CSDIDSDualSessionProvider>"16@"NSSet"24B32
v36@0:8@"<CSDIDSDualSessionProvider>"16I24@"NSError"28
@28@0:8@16i24
v32@0:8@16i24B28
@"<CSDIDSDualSessionDelegate>"
@"<CSDIDSDualSessionProvider>"
@"<CSDRelayIDSMessengerDelegate>"
@56@0:8@16@24@32q40@48
v48@0:8@16@24@32@?40
@"<CSDFaceTimeIDSProviderDelegateCapabilities>"
@"NSOrderedSet"
@"<CSDFaceTimeIDSProviderDelegateServerBag>"
v40@0:8@"NSURL"16@"NSSet"24@"NSDictionary"32
v32@0:8@"NSURL"16@?<v@?@"NSURL">24
@"<CSDFileTransferringDelegate>"16@0:8
v24@0:8@"<CSDFileTransferringDelegate>"16
v48@0:8Q16@24@32@?40
@"<CSDFileTransferringDelegate>"
@"IDSService"
@32@0:8@16d24
@"<CSDCallSourceFetcherDataSource>"
r^{__CFString=}16@0:8
v32@0:8B16B20@24
v32@0:8@"IDSDevice"16@?<v@?B@"NSString">24
v32@0:8@"IDSDevice"16@"NSUUID"24
v24@0:8@"IDSDevice"16
v24@0:8@?<v@?B>16
v40@0:8@"NSNumber"16@"NSString"24@?<v@?B>32
v32@0:8B16B20@"IDSDevice"24
{?="protoTimeConnected"b1"protoDisconnectedReason"b1"protoOriginatingUIType"b1"protoService"b1"protoSoundRegion"b1"protoStatus"b1"protoTTYType"b1"protoConferenced"b1"protoEmergency"b1"protoFailureExpected"b1"protoHasSentInvitation"b1"protoNeedsManualInCallSounds"b1"protoOutgoing"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoSupportsEmergencyFallback"b1"protoSupportsTTYWithVoice"b1"protoUplinkMuted"b1"protoVideo"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8i16B20
@"TUCallProvider"
@"TUCallDisplayContext"
@"<CSDRelayCallDelegate>"
v24@0:8@"CSDCallHistoryManager"16
Vv32@0:8@16@24
Vv32@0:8@"NSUUID"16@"NSUUID"24
v24@0:8@"<TUCallHistoryManagerXPCClient>"16
@"CSDCallHistoryManager"
@"<CSDPauseDigitsQueueDelegate>"
@"RBSAssertion"
@28@0:8d16B24
v48@0:8@16@24d32Q40
v52@0:8@16d24B32Q36@?44
{?="shouldAssociateScene"b1}
@"CSDMessagingConversationActivitySession"
@"CSDMessagingConversationMessage"
{?="sharePlayProtocolVersion"b1"version"b1"isGFTDowngradeToOneToOneAvailable"b1"isGondolaCallingAvailable"b1"isLightweight"b1"isMirageAvailable"b1"isMomentsAvailable"b1"isScreenSharingAvailable"b1"isUPlusNDowngradeAvailable"b1"video"b1"videoEnabled"b1}
v40@0:8@"NSURL"16@"NSURL"24@?<v@?@"NSString"@"NSError">32
v32@0:8@"NSURL"16@?<v@?@"NSString"@"NSError">24
v56@0:8@16@24@32q40@48
v40@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32
v56@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"<CSDDualFaceTimeProviderDelegate>"16@"CXTransaction"24@?<v@?@"NSError">32
v48@0:8@"<CSDFaceTimeProviderDelegate>"16@"TUConversation"24@"NSData"32@?<v@?@"NSUUID"BBB@"NSUUID"@"TUHandle"@"NSString">40
B32@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24
@"CSDConversationManagerXPCServer"
@"CPConversationManagerHost"
@"CPBiomeSessionDonator"
@"CPApplicationMonitor"
@"CSDNeighborhoodActivityConduitXPCServer"
@"CSDFaceTimeIDSProviderDelegate"
@"CSDFaceTimeIMAVProviderDelegate"
@"CSDFaceTimeConversationProviderDelegate"
@"CSDGFTServiceConversationProviderDelegate"
@"CSDConversationManager"
@"CSDProviderCallDataSource"
@"CSDVoIPApplicationMessage"
v36@0:8@"NSDictionary"16B24@?<v@?>28
@"CSDMessagingConversationActivity"
{?="creationDateEpochTime"b1}
@"CSDMessagingPersonNameComponents"
@"<CSDStatusBarResolverDelegate>"16@0:8
v24@0:8@"<CSDStatusBarResolverDelegate>"16
@"CSDCall"16@0:8
@"TUConversation"16@0:8
@"STCallingStatusDomainCallDescriptor"16@0:8
@"<CSDStatusBarResolverDelegate>"
@"<CSDProcessObserverProtocol>"
@"NSTimer"
v56@0:8@16@24@32@?40@?48
@32@0:8@16^@24
B32@0:8@16^@24
@"NSFileManager"
v36@0:8B16B20@24B32
@"<CSDPinExchangeDelegate>"
{?="primaryIdentifier"b1"type"b1"version"b1}
Vv20@0:8B16
Vv28@0:8B16@20
Vv36@0:8B16@20@28
Vv28@0:8B16@"NSString"20
Vv28@0:8B16@"NSUUID"20
Vv36@0:8B16@"NSString"20@"NSUUID"28
Vv24@0:8@"NSUUID"16
Vv24@0:8@?<v@?@"TUCallCapabilitiesState">16
v24@0:8@"<TUCallCapabilitiesXPCClient>"16
@"CSDThumperAccount"24@0:8@"NSString"16
@"TUThumperCTCapabilitiesState"24@0:8@"NSString"16
C32@0:8@16@24
v36@0:8B16@20@28
@24@0:8B16B20
@"NSXPCListener"
@"CSDAccountsController"
@"CSDTelephonyCallCapabilities"
@"CSDThumperPushHandler"
@"CSDPinExchangeController"
@"CSDThumperCapabilitiesMonitor"
@"<CSDIDSService>"
@"TUCallCapabilitiesState"
v24@0:8@"TUDynamicCallDisplayContext"16
Vv24@0:8@"NSNumber"16
@"<CSDCallDelegate>"
@"CSDCallDataSource"
@"TUDialRequest"
@"CSDIDSTransport"
@"TUDynamicCallDisplayContext"
v24@0:8@"TUAudioDeviceController"16
B32@0:8@"NSString"16@"TUCall"24
@"TURoute"24@0:8@"TUCall"16
B24@0:8@"TUCall"16
@"CARAutomaticDNDStatus"
@"CSDMessagingVoucher"
{?="lightweightPrimaryParticipantID"b1"validationSource"b1"version"b1}
@"CSDMessagingConversationLink"
@"CSDMessagingConversationMember"
@"CSDMessagingConversationReport"
{?="avMode"b1"version"b1"locallyCreated"b1}
{?="timebase"b1}
v36@0:8@16Q24B32
v40@0:8@16Q24@32
v24@0:8@"CSDConversation"16
v32@0:8@"CSDConversation"16@"TUConversationParticipant"24
v32@0:8@"CSDConversation"16@"CXCallFailureContext"24
v32@0:8@"CSDConversation"16@"CSDConversationParticipant"24
v40@0:8@"CSDConversation"16@"NSString"24@?<v@?B>32
v32@0:8@"CSDConversation"16@"NSString"24
v32@0:8@"CSDConversation"16@"TUConversationActivityEvent"24
v36@0:8@"CSDConversation"16Q24B32
v32@0:8@"CSDConversation"16@"TUConversationActivitySession"24
v40@0:8@"CSDConversation"16Q24@"TUConversationActivitySession"32
v32@0:8@"CSDConversation"16q24
v36@0:8@"CSDConversation"16@"NSSet"24B32
v36@0:8@"CSDConversation"16@"TUConversationActivitySession"24B32
v56@0:8@"NSSet"16@"CSDConversation"24@"TUConversationLink"32@"NSUUID"40@"TUConversationMember"48
v52@0:8@"NSSet"16@"CSDConversation"24@"NSUUID"32@"TUConversationMember"40B48
v48@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"CSDConversation"32@"NSData"40
v40@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"NSUUID"32
v48@0:8@"CSDConversationNoticeManager"16@"CSDConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v32@0:8@"CSDConversationLinkManager"16@"NSArray"24
v36@0:8@"CSDScreenSharingActivityManager"16@"<TUScreenShareAttributes>"24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"NSError"24B32
v32@0:8@"<CPApplicationPolicyManager>"16@"NSString"24
v28@0:8@"<CPSystemStateObserver>"16B24
v32@0:8@"NSSet"16@"NSUUID"24
v40@0:8@"TUConversationActivity"16@"NSUUID"24@?<v@?@"TUConversationActivitySession">32
v28@0:8B16@"NSString"20
v32@0:8@"TUConversationActivitySession"16@"NSUUID"24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@"NSUUID"24
v32@0:8@"TUConversationMember"16@"NSUUID"24
v28@0:8B16@"NSUUID"20
v24@0:8@"NSString"16
v32@0:8@"<CPConversationManagerDataSourceObserver>"16@"NSObject<OS_dispatch_queue>"24
v32@0:8@"TUConversationActivitySessionContainer"16@"NSString"24
v32@0:8@"NSDictionary"16@"NSUUID"24
@"CPActivityAuthorizationManager"16@0:8
@"<CPSystemStateObserver>"16@0:8
@72@0:8@16@24@32@40@48@56@64
@80@0:8@16@24@32@40@48@56@64@72
@56@0:8@16@24@32@40@48
@144@0:8@16@24@32B40@44@52@60@68@76@84@92@100@108@116B124Q128@136
@124@0:8@16@24@32B40@44@52@60@68@76@84@92@100Q108@116
@52@0:8@16@24@32@40B48
v40@0:8Q16Q24@32
B36@0:8@16@24i32
B68@0:8@16@24@32@40@48B56@?60
B48@0:8@16@24@32@40
B44@0:8@16@24@32B40
B56@0:8@16@24@32@40@48
@96@0:8@16@24@32@40@48@56@64@72Q80@88
v52@0:8@16@24@32B40@?44
v40@0:8q16@24@32
v52@0:8@16@24B32@36@44
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
v36@0:8B16Q20@28
v28@0:8B16@?20
v40@0:8@16q24@?32
v48@0:8@16@24Q32@?40
v64@0:8@16@24@32@40@48Q56
v40@0:8Q16@24@32
@"CSDPendingMembershipTracker"
@"CSDScreenSharingActivityManager"
@"CSDConversationPersistenceController"
@"CSDConversationLinkManager"
@"CSDReportingController"
@"CSDConversationNoticeManager"
@"CSDSharedConversationServerBag"
@"<CSDConversationInvitationResolving>"
@"<CSDVoucherManager>"
@"<CSDParticipantUpdateSanitizer>"
@"CSDIDSService"
@"FTDeviceSupport"
@"CSDSecureImageTranscoder"
@"CPApplicationController"
@"CPActivityAuthorizationManager"
@"<CSDConduitIDSProxy>"
@"NSURL"16@0:8
{?="protoProtocolVersion"b1"type"b1"oBSOLETEProtoMomentsAvailable"b1"protoMomentsV2Available"b1"protoSenderMuteUplink"b1"protoShouldSuppressInCallUI"b1"protoWantsVideo"b1}
B24@0:8q16
v32@0:8@?16@?24
@24@0:8@?16
B24@0:8@?16
@"CSDMessagingConversationActivityContext"
@"CSDMessagingConversationActivityMetadata"
{?="timestampAsTimeIntervalSinceReferenceDate"b1"updatedDateEpochTime"b1"isSystemActivity"b1}
{?="handleType"b1"notificationStyles"b1"version"b1}
{?="faceTimeAudioAvailable"b1"faceTimeVideoAvailable"b1}
@"NSCountedSet"
@56@0:8@16@24@32@?40@48
@"CXCallDirectoryStore"
@"CSDIncomingCallFilterDataSource"
@"CXCallDirectorySanitizer"
@"ACAccountStore"
@"CSDIncomingCallFilter"
@"<CSDTransactionManager>"
@"CHManager"
@"<CSDUserNotificationDelegate>"
{?="generatorVersion"b1}
@"<CSDIDSSessionProvider>"
v24@0:8@"UABestAppSuggestion"16
v32@0:8@"UABestAppSuggestion"16@"NSSet"24
@20@0:8I16
v32@0:8@16d24
v36@0:8@16d24B32
@28@0:8I16@20
@"<CSDUserActivityCommunicatorDelegate>"
@"UABestAppSuggestionManager"
@"UABestAppSuggestion"
v36@0:8@"<CSDIDSGroupSessionProvider>"16I24@"NSError"28
v24@0:8@"<CSDIDSGroupSessionProvider>"16
v48@0:8@"<CSDIDSGroupSessionProvider>"16@"NSDictionary"24Q32@"NSError"40
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSError"24
v36@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24B32
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24
v44@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24I32S36B40
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSDictionary"24
v36@0:8@"<CSDIDSGroupSessionProvider>"16S24@"NSError"28
v40@0:8@"<CSDIDSGroupSessionProvider>"16@"NSData"24@"IDSGroupSessionActiveParticipant"32
v80@0:8@16@24@32@40@48@56@64@72
v136@0:8@16@24@32@40@48@56@64@72@80@88@96B104B108@112@120Q128
v96@0:8@16@24@32@40@48@56@64@72@80@88
Q24@0:8@16
S16@0:8
v20@0:8S16
@"<CSDIDSGroupSessionDelegate>"
@"<CSDIDSGroupSessionProvider>"
Vv28@0:8@16C24
Vv28@0:8i16@20
Vv40@0:8@16{CGSize=dd}24
Vv28@0:8@16i24
Vv32@0:8@16q24
Vv24@0:8@"TUAnswerRequest"16
Vv32@0:8@"NSString"16@"NSString"24
Vv28@0:8@"NSString"16C24
Vv28@0:8i16@"NSString"20
Vv24@0:8@"IDSDestination"16
Vv24@0:8@"TUProxyCall"16
Vv40@0:8@"NSString"16{CGSize=dd}24
Vv28@0:8@"NSString"16i24
Vv24@0:8@"TUDialRequest"16
Vv32@0:8@"NSString"16@"TUCallScreenShareAttributes"24
Vv36@0:8B16@"TUCallScreenShareAttributes"20@"NSString"28
Vv32@0:8@"NSString"16q24
Vv32@0:8@"TUDialRequest"16@"TUCallDisplayContext"24
Vv32@0:8@"TUDialRequest"16@?<v@?@"TUCall"@"NSArray">24
Vv24@0:8@"TUJoinConversationRequest"16
Vv32@0:8@"NSDictionary"16@?<v@?@"TUCall"@"NSArray">24
Vv24@0:8@"TUCallServicesClientCapabilities"16
Vv28@0:8@16B24
Vv24@0:8@?<v@?@"NSDictionary">16
Vv28@0:8@"NSString"16B24
Vv44@0:8@16@24B32@?36
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?B>32
Vv44@0:8@"TUHandle"16@"NSString"24B32@?<v@?B>36
Vv44@0:8@"NSSet"16@"NSString"24B32@?<v@?B>36
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?Q>32
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?@"NSDictionary">32
Vv48@0:8@"NSString"16@"NSString"24@"NSString"32@?<v@?B>40
v28@0:8@"NSArray"16B24
@"CSDCallController"16@0:8
v24@0:8@"CSDCall"16
v36@0:8@16i24@28
v32@0:8f16i20@24
v24@0:8B16B20
@"CSDCallController"
@"CSDRecentsController"
@"CSDAudioArbitrationController"
@"CSDRouteController"
@"CSDCallHistoryManagerXPCServer"
@"CSDCallProviderManagerXPCServer"
@"CSDRelayCallDataSource"
@"CSDRelayCallDelegate"
@"TUCarPlayHardwareControlsBroadcaster"
@"CSDCarPlayManager"
v24@0:8@?<v@?>16
@"<TUNotifyObserver>"
@"BKSApplicationStateMonitor"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v40@0:8@"CXNetworkExtensionMessageControllerHost"16@"NSDictionary"24@"NSString"32
v48@0:8@"CXNotificationServiceExtensionVoIPXPCHost"16@"NSDictionary"24@"NSString"32@?<v@?@"NSError">40
v44@0:8@16@24@32i40
v40@0:8@16@24i32B36
@"APSConnection"
@"CXNetworkExtensionMessageControllerHost"
@"CXNotificationServiceExtensionVoIPXPCHost"
@"CSDVoIPApplicationMonitor"
@"<CSDConversationNoticeDelegate>"
@"FBSOpenApplicationService"
@48@0:8Q16@24@32@40
@40@0:8Q16@24@32
@"TUConversationParticipantCapabilities"
@"TUCallServicesClientCapabilities"
@"RBSProcessHandle"
@"CSDMessagingConversationActivitySceneAssociationBehavior"
{?="preferredBroadcastingAttributes"b1"supportsContinuationOnTV"b1}
Vv32@0:8@"NSUUID"16@"NSArray"24
Vv32@0:8@"NSUUID"16@?<v@?@"NSString"@"NSString"@"NSError">24
Vv40@0:8@16@24@32
Vv36@0:8@16B24@?28
Vv36@0:8B16Q20@28
Vv32@0:8q16@24
Vv32@0:8Q16@24
Vv28@0:8B16@?20
Vv40@0:8@16q24@?32
Vv48@0:8@16@24Q32@?40
Vv24@0:8@?<v@?@"NSSet">16
Vv40@0:8@"NSSet"16@"NSSet"24@"NSUUID"32
Vv32@0:8@"TUConversationActivitySession"16@"NSUUID"24
Vv32@0:8@"TUConversationActivity"16@"NSUUID"24
Vv32@0:8@"NSUUID"16@?<v@?@"NSError">24
Vv36@0:8@"NSUUID"16B24@?<v@?@"NSError">28
Vv36@0:8B16@"TUConversationActivitySession"20@"NSUUID"28
Vv36@0:8B16Q20@"NSUUID"28
Vv32@0:8@"TUConversationMember"16@"NSUUID"24
Vv32@0:8q16@"NSUUID"24
Vv32@0:8@"NSString"16@"NSUUID"24
Vv32@0:8Q16@"NSUUID"24
Vv24@0:8@?<v@?B>16
Vv24@0:8@?<v@?@"<TUScreenShareAttributes>">16
Vv28@0:8B16@?<v@?@"NSSet"@"NSError">20
Vv32@0:8@"NSUUID"16@?<v@?@"TUConversationLink"@"NSError">24
Vv40@0:8@"NSSet"16q24@?<v@?@"TUConversationLink"@"NSError">32
Vv40@0:8@"NSSet"16@"TUConversationLink"24@?<v@?@"TUConversationLink"@"NSError">32
Vv32@0:8@"TUConversationLink"16@?<v@?B@"NSError">24
Vv48@0:8@"TUConversationLink"16@"NSDate"24Q32@?<v@?B@"NSError">40
Vv32@0:8@"TUConversationLink"16@?<v@?B@"NSDate"@"NSError">24
Vv24@0:8@?<v@?@"TUConversationLink"@"NSError">16
Vv40@0:8@"NSString"16@"TUConversationLink"24@?<v@?@"TUConversationLink"@"NSError">32
Vv28@0:8B16@?<v@?@"NSString">20
Vv36@0:8B16@"TUScreenShareAttributes"20@"NSUUID"28
Vv32@0:8@"NSURL"16@24
Vv24@0:8@?<v@?@"TUConversationNotice"@"NSError">16
v24@0:8@"<TUConversationManagerXPCClient>"16
v52@0:8@16@24Q32i40@44
v56@0:8@16Q24Q32@40@48
v48@0:8@16Q24Q32@40
v32@0:8@"CSDConversationManager"16@"TUConversation"24
v32@0:8@"CSDConversationManager"16@"TUJoinConversationRequest"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v32@0:8@"CSDConversationManager"16@"NSUUID"24
v56@0:8@"CSDConversationManager"16@"TUConversation"24@"CSDMessagingConversationMessage"32@"TUHandle"40@"<CSDGroupSessionParticipantUpdateProtocol>"48
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"CXCallFailureContext"32
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUHandle"32
v32@0:8@"CSDConversationManager"16@"NSArray"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"CSDConversationManager"16@"TUConversation"24Q32B40
v48@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationMember"32
v48@0:8@"CSDConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24q32
v32@0:8@"CSDConversationManager"16@"NSString"24
v40@0:8@"CSDConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v32@0:8@"CSDConversationManager"16@"NSDictionary"24
v52@0:8@"CSDConversationManager"16@"TUConversation"24Q32i40@"NSString"44
v56@0:8@"CSDConversationManager"16Q24Q32@"TUHandle"40@"TUConversation"48
v48@0:8@"CSDConversationManager"16Q24Q32@"TUConversation"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v36@0:8@"CSDConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"CSDConversationManager"16@"NSError"24
v28@0:8@"CSDConversationManager"16B24
B24@0:8@"TUConversationProvider"16
v24@0:8@"<CSDCallProviderManagerDataSource>"16
@"CSDUserIntentManager"
@"<CSDCallProviderManagerDataSource>"
v40@0:8@16q24q32
@"CMGestureManager"
v40@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@"IDSDevice"32
v48@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@"IDSDevice"32@?<v@?B@"NSDictionary">40
v40@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@?<v@?@"NSDictionary">32
v40@0:8@"NSDictionary"16@"IDSDestination"24@?<v@?@"NSDictionary">32
v44@0:8@16@24B32@36
@48@0:8@16@24@32@40
@36@0:8I16@20@28
B20@0:8I16
I24@0:8@16
@"NSUserActivity"
@"TUDialRequest"24@0:8@"TUDialRequest"16
v48@0:8@"NSUserActivity"16@"NSString"24@"NSDictionary"32@?<v@?B@"NSError">40
B24@0:8@"NSURL"16
@"NSURL"32@0:8@"NSString"16@"NSURL"24
B24@0:8@"TUCallProvider"16
@"<CSDCallProviderManagerDataSourceDelegate>"16@0:8
v24@0:8@"<CSDCallProviderManagerDataSourceDelegate>"16
v32@0:8@16r^{__CFString=}24
@24@0:8r^{__CFString=}16
@"<CSDCallProviderManagerDataSourceDelegate>"
@"CSDSandboxExtensionDirectory"
@"CSDCallCenterObserver"
d24@0:8@16
Q24@0:8Q16
@24@0:8q16
@"<CSDMomentsReportingSessionDelegate>"
v44@0:8@16I24I28B32@36
v32@0:8@16I24I28
v32@0:8@16Q24
v40@0:8@"AVCSessionParticipant"16B24B28@"NSError"32
v28@0:8@"AVCSessionParticipant"16B24
v32@0:8@"AVCSessionParticipant"16@"NSDictionary"24
v44@0:8@"AVCSessionParticipant"16I24I28B32@"NSError"36
v32@0:8@"AVCSessionParticipant"16I24I28
v32@0:8@"AVCSessionParticipant"16Q24
v36@0:8@"AVCScreenCapture"16B24@"NSError"28
v24@0:8@"AVCScreenCapture"16
v32@0:8@"AVCSession"16@"NSDictionary"24
v36@0:8@"AVCSession"16B24@"NSError"28
v24@0:8@"AVCSession"16
v44@0:8@"AVCSession"16@"AVCSessionParticipant"24B32@"NSError"36
v44@0:8@"AVCSession"16B24@"AVCSessionConfiguration"28@"NSError"36
v40@0:8@"AVCSession"16B24B28@"NSError"32
v44@0:8@"AVCSession"16I24I28B32@"NSError"36
v32@0:8@"AVCSession"16@"NSData"24
v32@0:8@"AVCSession"16@"NSError"24
v40@0:8@"AVCSession"16@"NSError"24@"NSDictionary"32
v84@0:8Q16@24@32{CGRect={CGPoint=dd}{CGSize=dd}}40B72Q76
@"NSData"24@0:8Q16
v24@0:8@"<TUScreenShareAttributes>"16
v28@0:8B16@"<TUScreenShareAttributes>"20
v32@0:8@"CSDConversationParticipant"16B24B28
v24@0:8@"CSDConversationParticipant"16
v84@0:8Q16@"NSNumber"24@"NSNumber"32{CGRect={CGPoint=dd}{CGSize=dd}}40B72Q76
@"NSData"16@0:8
@72@0:8@?16@24@32@40@48Q56@?64
@68@0:8@16@24@32@40B48Q52@60
@"AVCSession"
@"<CSDAVCSessionDelegate>"
@"AVCScreenCapture"
@44@0:8@16B24@28@36
@36@0:8@16@24i32
v24@0:8@"<CSDCoreTelephonyClient>"16
v40@0:8@"<CSDCoreTelephonyClient>"16@"CTXPCContextInfo"24@"CSDCTCallCapabilities"32
v32@0:8@"<CSDCoreTelephonyClient>"16@"NSDictionary"24
v40@0:8@"<CSDCoreTelephonyClient>"16@"CTXPCContextInfo"24@"NSDictionary"32
@40@0:8@16@24B32B36
@"<CSDTelephonyCallCapabilitiesDelegate>"
@"CSDCoreTelephonyClient"
@"<CSDEmergencyCallbackCapabilities>"
{?="deviceType"b1"protoCurrentlyPicked"b1"protoGuest"b1"protoSupportsRelay"b1}
v48@0:8@16d24@32@?40
@"TUCallProvider"24@0:8@"NSString"16
v24@0:8@"CSDRelayCall"16
v32@0:8@"CSDRelayCall"16@"TUAnswerRequest"24
v32@0:8@"CSDRelayCall"16@"TUCall"24
v28@0:8@"CSDRelayCall"16C24
v36@0:8@"CSDRelayCall"16B24@"NSError"28
@"TUDTMFSoundPlayer"
@"CSDMessagingEncryptedConversationMessage"
@"CSDMessagingConversationJoinedMetadata"
{?="avMode"b1"disconnectedReason"b1"enclosedEncryptedType"b1"type"b1"version"b1"guestModeEnabled"b1"isLetMeInApproved"b1"shouldSuppressInCallUI"b1}
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSArray"24
@"CSDKeychainPasswordItem"
@"<CXAudioSessionActivationStateObserver>"
B24@0:8{?=ii}16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSDictionary"24
@"CSDCTCallCapabilities"24@0:8@"CTXPCContextInfo"16
@"NSDictionary"32@0:8@"CTXPCContextInfo"16@"NSString"24
@"NSDictionary"24@0:8@"CTXPCContextInfo"16
v36@0:8@"NSString"16B24@"NSDictionary"28
v44@0:8@"CTXPCContextInfo"16@"NSString"24B32@"NSDictionary"36
v32@0:8@"NSString"16@"CTXPCContextInfo"24
v32@0:8@"CTXPCContextInfo"16@"NSString"24
@"NSString"24@0:8@"NSUUID"16
@"<CSDCoreTelephonyClientDelegate>"16@0:8
v24@0:8@"<CSDCoreTelephonyClientDelegate>"16
@"<CSDCoreTelephonyClientDelegate>"
@"CTXPCContexts"
{?="ambiguityState"b1"addCallAllowed"b1"endAndAnswerAllowed"b1"hardPauseAvailable"b1"holdAllowed"b1"holdAndAnswerAllowed"b1"mergeable"b1"sendToVoicemailAllowed"b1"swappable"b1"takingCallsPrivateAllowed"b1}
@32@0:8@16@?24
v32@0:8@"CSDMomentsReportingSession"16@"CSDMomentsUsageReport"24
v36@0:8@16q24i32
v36@0:8@"CSDMomentsController"16q24i32
v32@0:8@"CSDMomentsController"16q24
v40@0:8@"CSDMomentsController"16q24@"NSString"32
v28@0:8q16i24
v36@0:8q16i24@?28
v32@0:8q16@?24
v40@0:8q16@24@?32
{?="version"b1"shouldCheckAllGenerators"b1}
@"<CSDCHManager>"
@"TUDelegateController<CSDCallHistoryManagerDelegate>"
v40@0:8d16@24@?32
@"<CSDConversationProviderDelegate>"
v32@0:8@"IDSAccountController"16@"IDSAccount"24
B72@0:8@16@24@32q40@48^@56^@64
@"IDSDevice"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"<IDSServiceDelegatePrivate>"16@"NSObject<OS_dispatch_queue>"24
v24@0:8@"<IDSServiceDelegatePrivate>"16
B24@0:8@"NSString"16
B72@0:8@"NSData"16@"IDSAccount"24@"NSSet"32q40@"NSDictionary"48^@56^@64
@"<CSDIDSServiceDependencies>"16@0:8
@"IDSDevice"16@0:8
@"IDSAccount"16@0:8
v64@0:8@16@24@32d40@48@?56
@"IDSAccountController"
@"IDSIDQueryController"
@"<IDSServicePseudonymDelegate>"
v48@0:8@"CSDIDSDualSession"16@"NSData"24@"IDSDestination"32@"IDSDevice"40
v52@0:8@16@24@32q40B48
v48@0:8@16@24@32q40
v56@0:8@16@24@32q40@?48
v40@0:8@16@?24@?32
v48@0:8@16@24@?32@?40
v52@0:8@16@24@?32B40@?44
v60@0:8@16@24@32@?40B48@?52
v52@0:8@"<CSDFileTransferring>"16@"NSURL"24@"NSDictionary"32B40@"NSString"44
v36@0:8@"<CSDFileTransferring>"16@"NSURL"24B32
v28@0:8@"<CSDAVCMoments>"16I24
v40@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSError"32
v56@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSURL"32@"NSURL"40@"NSError"48
v24@0:8@"<CSDAVCMoments>"16
Vv52@0:8q16@24@32B40@?44
Vv32@0:8q16@?24
Vv44@0:8i16q20@28@?36
Vv24@0:8@?<v@?>16
Vv52@0:8q16@"NSString"24@"NSDictionary"32B40@?<v@?@"TUMomentsCapabilities"@"NSError">44
Vv32@0:8q16@?<v@?@"NSError">24
Vv44@0:8i16q20@"NSString"28@?<v@?@"NSString"@"NSError">36
v24@0:8@"<TUMomentsControllerXPCClient>"16
i20@0:8B16
@"<CSDMomentsControllerDelegate>"
@"<CSDFileTransferring>"
@"<CSDMediaAssetManaging>"
@"<TUMomentsControllerXPCClient>"
@"<CSDMomentsServerBag>"
v36@0:8@16q24B32
v36@0:8@16B24q28
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v48@0:8@16q24@32@40
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v48@0:8{CGSize=dd}16{CGSize=dd}32
B28@0:8i16@20
B52@0:8B16@20@28@36^@44
B40@0:8B16@20i28^@32
v56@0:8q16@24d32@?40@48
B28@0:8i16@"RTCSecureHierarchyToken"20
B52@0:8B16@"NSDictionary"20@"VCCapabilities"28@"NSString"36^@44
B40@0:8B16@"VCCapabilities"20i28^@32
v56@0:8q16@"NSDictionary"24d32@?<v@?@"NSDictionary"@"NSError">40@"NSObject<OS_dispatch_queue>"48
@"<CSDAVConferenceProviderDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceProviderDelegate>"16
@"<CSDAVConferenceProviderDelegate>"
@"AVConference"
@"CSDProviderCall"
v48@0:8@"CXCallControllerHost"16@"NSString"24@"CXTransaction"32@?<v@?@"NSError">40
@"CXCallSource"24@0:8@"NSString"16
v44@0:8@16@24f32q36
v32@0:8@"CXCallSource"16@"CXProviderConfiguration"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32@?<v@?@"NSError">40
v40@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32
v56@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32
v32@0:8@"CXCallSource"16@"NSUUID"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSData"32q40
v44@0:8@"CXCallSource"16@"NSUUID"24f32q36
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSString"32q40
v40@0:8@"CXCallSource"16@"CXTransaction"24@?<v@?@"NSError">32
B40@0:8@16@24^@32
v32@0:8@"CXCallSourceManager"16@"CXTransactionGroup"24
v24@0:8@"CXCallSourceManager"16
B40@0:8@"CXCallSource"16@"CXAction"24^@32
@"CXCallSource"24@0:8@"TUDialRequest"16
@"CXCallSource"24@0:8@"TUJoinConversationRequest"16
v32@0:8@"CXCallAction"16@"CSDProviderCall"24
v32@0:8@"NSArray"16@"CSDProviderCall"24
v32@0:8@"CXStartCallAction"16@"CSDProviderCall"24
B44@0:8@16@24B32^@36
@"CSDFaceTimeProviderDelegate"
@"CSDCallFilterController"
@"CSDVoIPProcessAssertionManager"
@"CXCallControllerHost"
@"CXInProcessCallSource"
@"<CXProviderDelegatePrivate>"
@"CSDCallSourceFetcher"
@"CXCallSourceManager"
@"<CSDRouteManager>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v40@0:8@?16@?24@32
^v16@0:8
v28@0:8@?16B24
v40@0:8@?16@24@32
@?32@0:8@16@?24
@?24@0:8@?16
@"NSXPCInterface"
@"NSObject<OS_dispatch_semaphore>"
v32@0:8@"<CSDProximitySensorObserverDelegate>"16@"NSObject<OS_dispatch_queue>"24
v24@0:8@"<CSDProximitySensorObserverDelegate>"16
@"TUDelegateController"
@"FTNetworkSupport"
@32@0:8q16@24
%@ %@
avcIdentifier
pseudonym
publicKey
conversationMessageBytes
privateKey
invitedHandles
creationDateEpochTime
groupUUIDString
originatorHandle
pseudonymExpirationDateEpochTime
isActivated
generatorDescriptor
linkName
linkLifetimeScope
Indefinite
CallDuration
(unknown: %i)
CSDTransactionManager
TUCallCenter_allCalls
com.apple.calls.callservicesd.
%@:%@
handleCallStatusChanged
handleSessionStateChanged
%@-%@
com.apple.telephonyutilities.callservicesdaemon.csdavconference
@"<CSDAVConferenceProvider>"24@?0@"NSUUID"8@"NSObject<OS_dispatch_queue>"16
<%@ %p state=%d conference=%@>
v24@?0@"NSDictionary"8@"NSError"16
<%@ %p caller=%d capabilities=%@ deviceRole=%d>
TUCallUserActivityCTInfoKey
TUCallUserActivityServiceKey
kCTCallDirection
kCTCallDirectionOutgoing
kCTCallDirectionIncoming
kCTCallPhoneNumber
com.apple.coretelephony
handle
avcData
isMomentsAvailable
isScreenSharingAvailable
isGondolaCallingAvailable
isMirageAvailable
isLightweight
sharePlayProtocolVersion
options
isGFTDowngradeToOneToOneAvailable
guestModeEnabled
association
isUPlusNDowngradeAvailable
avMode
None
Audio
Video
-[CSDUserActivityManager conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:]
-[CSDUserActivityManager conversationManager:addedActiveConversation:]
v24@?0@"NSString"8d16
ADClientSetValueForDistributionKey
AggregateDictionary
%@.%@.%f
ForceDisableCallProximity
com.apple.mobilephone.talking-with-phone-away-from-face-without-speaker
CSDProximityController.m
Invalid parameter not satisfying: %@
callCenterObserver != nil
interfaceOrientationObserver != nil
routeController != nil
proximitySensorObserver != nil
queue != nil
voiceOverObserver != nil
v16@?0@"FBSOrientationUpdate"8
B8@?0
v12@?0i8
ConferenceID:
kMXSessionAudioCategory_PlayAndRecord_NoBluetooth
MediaExperience
kMXSessionAudioMode_VoiceChat
kMXSessionAudioMode_VideoChat
@"IMAccount"16@?0@"CXStartCallAction"8
IMPreferredAccountForService
IMCore
IMDaemonDidConnectNotification
IMAVCore
IMAVChatStateChangedNotification
IMAVChatParticipantReceivedFirstFrameNotification
IMAVChatParticipantInvitationDeliveredNotification
IMAVChatParticipantCallInfoChangedNotification
IMAVChatConferenceIDChangedNotification
IMAVChatConferenceMetadataUpdatedNotification
IMAVChatMayRequireBreakBeforeMakeChangedNotification
IMAVChatParticipantInFrequencyChangedNotification
IMAVChatParticipantOutFrequencyChangedNotification
IMAVController
IMAVChat
_NSStringDescriptionForIMAVChatEndedReason
CALL_FAILED_NO_NETWORK_CONNECTION_TITLE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_WIFI_MESSAGE
ALERT_VIDEO_FAILED_TITLE
CALL_FAILED_TITLE
ALERT_VIDEO_FAILED_BAD_NONCE_TIMESTAMP
CALL_FAILED_BAD_NONCE_TIMESTAMP
ALERT_VIDEO_FAILED_UPDATE_LOCATION_MESSAGE
CALL_FAILED_UPDATE_LOCATION_MESSAGE
ALERT_VIDEO_FAILED_REGION_INFO_INSUFFICIENT
CALL_FAILED_REGION_INFO_INSUFFICIENT
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NUMBER
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NAME
ALERT_VIDEO_NOT_AVAILABLE_TITLE
CALL_NOT_AVAILABLE_TITLE
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NUMBER
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NUMBER
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NAME
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NAME
com.apple.telephonyutilities.callservicesd.callhistorycontrollerxpcserver
v16@?0@"CSDClient"8
com.apple.telephonyutilities.callservicesdaemon.callhistorycontroller
CSDCallHistoryControllerClientsShouldConnectNotification
MaxRemoteMirageParticipantsOverride
@"<CSDAVCSession>"44@?0@"NSString"8@"<CSDAVCSessionDelegate>"16@"NSObject<OS_dispatch_queue>"24B32@"TUConversationReport"36
<%@ %p
 UUID=%@
 groupUUID=%@
 link=%@
 messagesGroupUUID=%@
 state=%ld
 hasReceivedLetMeInRequest=%ld
 letMeInRequestState=%ld
 ignoreLMIRequests=%d
 avcSessionToken=%ld
 avcSessionIdentifier=%@
 isLocallyCreated=%d
 hasJoined=%d
 isUplinkMuted=%d
 video=%d
 isAudioEnabled=%d
 isVideoEnabled=%d
 isScreenEnabled=%d
 oneToOneModeEnabled=%d
 localMember=%@
 remoteMembers=%@
 pendingMembers=%@
 kickedMembers=%@
 rejectedMembers=%@
 otherInvitedHandles=%@
 lightweightMembers=%@
 memberIdentifiers=%@
 activeRemoteParticipants=%@
 activeLightweightParticipants=%@
 report=%@
 virtualParticipants=%@
 provider=%@
 tuActivitySessions=%@
 tuSystemActivitySessions=%@
 handoffEligibility=%@
 splitSessionSecondary=%@
 localLightweightSecondaryMember=%@
 invitationPreferences=%@
 avMode=%ld
PubSub
CADisplay
QuartzCore
Trying to setup new AVCSession without tearing down previous session first. Please file a bug to [FaceTime Core - TelephonyUtilities | All].
Calling -[CSDConversation leave]
B16@?0@"CSDConversationParticipant"8
Cleaning up from AVCSession failure.
Timed out waiting for sessions to end in leaving state (left conversation for reason: %@). Please file a bug on [TelephonyUtilities | New Bugs] so we can direct it to the appropriate team.
B16@?0@"TUConversationMember"8
NSErrorUserInfoDetailedError
AVCSession started but we weren't trying to join the conversation.
AVCSession failed to start.
%@.%@
v16@?0@"IMUserNotification"8
v16@?0Q8
CSDRelayIDSActiveAccountsChanged
CSDRelayPairedDeviceConnectedNotification
com.apple.private.alloy.phonecontinuity
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
destinationID
uniqueProxyIdentifier
sourceIdentifier
wantsHoldMusic
dtmfKey
disconnectedReason
v32@?0@"NSString"8@16^B24
NoAction
IncomingCall
DialCall
CallDialed
AnswerCall
CallAnsweredElsewhere
CallDisconnected
PlayDTMFToneForKey
CallConnected
DisconnectCall
PullRelayingCalls
HoldCall
UnholdCall
GroupCall
UngroupCall
ResetWantsHoldMusic
SwapCalls
UpdateCallModel
DeviceUnavailable
EndActiveAndAnswer
EndHeldAndAnswer
DisconnectCurrentCallAndActivateHeld
DisconnectAllCalls
ResetState
HardPauseDigitsAvailability
SendHardPauseDigits
UpdateRemoteCallState
SuppressRingtone
RequestCallContext
CallStartedConnecting
PushHostedCalls
PullHostedCalls
PushRelayingCalls
UpdateCallContext
NeedsManualInCallSoundsChange
InvitationSent
HoldActiveAndAnswer
UpdateCallDisplayContext
SetUplinkMuted
UpdateRemoteUplinkMuted
UpdateSystemVolume
UpdateSupportsTTYWithVoice
SetTTYType
RequestAction
UpdateRoutes
PickRoute
DowngradeToAudio
UpdateFailureExpected
UpdateSupportsEmergencyFallback
value
isoCountryCode
Generic
PhoneNumber
EmailAddress
sender
audioRouteUniqueIdentifier
com.apple.telephonyutilities.callservicesd.FaceTimeProvider
/stock
com.apple.request.hipuncap
com.apple.springboard.passcodeLockedOrBlocked
v16@?0@?<v@?>8
gk-invitation-break-before-make-timeout
StoreDemoMode
com.apple.demo-settings
RetailDemoNotification
CALL_ENDED
CALL_ENDED_DEMO_EXPLANATION
 temporaryGroupUUID=%@
 conversationGroupUUID=%@
 approverHandle=%@
 isVideo=%d
ShouldSuppress
ShouldAllow
com.apple.telephonyutilities.callservicesd.statusbarmanager
v16@?0@"STCallingStatusDomainUserInteraction"8
v16@?0@"STMutableCallingStatusDomainData"8
com.apple.callservicesd.neighborhoodConduit.xpcServer
com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities
v24@?0@"CSDClient"8@"<TUNeighborhoodActivityConduitXPCClient>"16
v16@?0@"<TUNeighborhoodActivityConduitXPCClient>"8
CSDCarrierBundlePhoneNumberProviderController
B24@?0@"CSDCarrierBundlePhoneNumberProvider"8@"NSDictionary"16
SilenceUnknownCallersOverrideList
CSDRelayIDSDualSession.m
Use another initializer instead
forceBTClassic
non-nil
updateMessage
checkInMessage
recoverMessage
Unknown
Update
CheckIn
Recover
com.apple.telephonyutilities.callservicesd.thumpercapabilitiesmonitor
NPSDomainAccessor
NanoPreferencesSync
thumperCallingAllowedOnDefaultPairedDevice
thumperCallingCapabilitiesStates
PreviousDefaultPairedDeviceUniqueID
uniqueIDOverride
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumpersupported
THUMPER_CALLING
NOT_NOW
TURN_ON
MAKE_RECEIVE_THUMPER_CELLULAR_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_CELLULAR
MAKE_RECEIVE_THUMPER
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumperenabled
THUMPER_EMERGENCY_ADDRESS_INFO_TITLE
THUMPER_EMERGENCY_ADDRESS_INFO_MESSAGE
PREFERENCES_BUTTON_TITLE
PSFaceTimeSettingsDetail
Preferences
<%@ %p 
%@=%d
%@=%@
%@=%lu
com.apple.telephonyutilities.callservicesd.accountscontroller
    faceTimeIDMatchesAppleID: %@
    faceTimeAudioAvailability: %ld
    faceTimeVideoAvailability: %ld
    outgoingCallerID: %@
B24@?0@"NSString"8^B16
B32@?0@"NSString"8Q16^B24
IMStringIsPhoneNumber
IMFoundation
CSDPauseDigits.m
%s is not available. Use a designated initializer instead.
-[CSDPauseDigits init]
<%@ %p digits=%@ isHardPause=%d>
com.apple.telephonyutilities.callservicesd.conversationprovidermanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.conversationprovidermanager
CSDConversationManagerClientsShouldConnectNotification
com.apple.telephonyutilities.callservicesd.callprovidermanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.callprovidermanager
v24@?0@"CSDClient"8@"<TUCallProviderManagerXPCClient>"16
com.apple.private.alloy.facetime.video
@"CSDAVConference"8@?0
CSDIDSChat.m
Cannot create an incoming chat with an outgoing session: %@
Cannot create an outgoing chat with an incoming session: %@
disableFaceTimeKeyExchange
Invite
contextIdentifier
actionDescription
ongoingDescription
completedDescription
com.apple.telephonyutilities.callservicesd.calldirectorymaintenance.daily
v16@?0@"NSObject<OS_xpc_object>"8
extensionsChangedForCallDirectoryExtensionManager-%lu
CXCallDirectoryNSExtensionManagerDelegate
protoCallModelState
protoService
protoWantsHoldMusic
protoCannotBeAnswered
protoDTMFKey
protoDisconnectedReason
OBSOLETE_conferenceIdentifier
protoVoicemail
callerNameFromNetwork
protoCall
hardPauseDigits
hardPauseState
receivedMessageType
protoProtocolVersion
protoShouldSuppressRingtone
dummyPayload
hostCallCreationTime
messageSendTime
protoNeedsManualInCallSounds
protoCannotRelayAudioOrVideoOnPairedDevice
protoExpectedEndpointOnMessagingDevice
contactIdentifier
protoCallCapabilitiesState
protoSoundRegion
protoEmergency
otherUniqueProxyIdentifiers
protoCallModel
protoSOS
protoDisplayContext
inviteData
protoProvider
protoVideo
protoUplinkMuted
protoRemoteUplinkMuted
systemVolume
localSenderIdentityUUIDString
localSenderIdentityAccountUUIDString
protoTTYType
protoSupportsTTYWithVoice
requestActionType
routes
route
endpointIDSDestinationURIs
protoPriority
protoOriginatingUIType
protoFailureExpected
protoSupportsEmergencyFallback
%@.%@.%p
idx (%lu) is out of range (%lu)
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
handoffIdentifier
protoSupportedHandleType
emergencyLabeledHandles
supportsRecents
prioritizedSenderIdentities
emergencyHandles
    dialingIDSDevice: %@
@"CSDMessagingRelayMessage"8@?0
v20@?0i8^B12
v20@?0B8@"NSDictionary"12
com.apple.notifyd.matching
com.apple.telephonyutilities.callservicesd.kFZACAppBundleIdentifierLaunchNotification
com.apple.distnoted.matching
com.apple.callhistory.save.distributed.notification
com.apple.telephonyutilities.callservicesdaemon.app-installed
com.apple.telephonyutilities.callservicesdaemon.app-uninstalled
com.apple.CTTelephonyCenter
com.apple.telephonyutilities.callservicesd.reportingcontroller
proximity-sensor
com.apple.telephonyutilities.callservicesdaemon.connectionrequest
com.apple.telephonyutilities.callservicesd.calls
com.apple.language.changed
CSDIDSPendingChatKey
CSDIDSPendingCallKey
CSDIDSPendingChatUUIDKey
CSDIDSPendingMessageDidReceiveInviteNotification
CSDIDSPendingMessageDidReceiveCancelNotification
CSDGroupIDSPendingMessageDidReceiveInviteNotification
@"<CSDIDSDualSessionProvider>"24@?0@"IDSSession"8@"NSObject<OS_dispatch_queue>"16
NetworkAvailabilityCheckOverrideValue
allowed
ignored
audio
SKEBlob
mediaBlob
callInfoBlob
CSDIDSDualSessionStateChangedNotification
CSDIDSDualSession.m
-[CSDIDSDualSession init]
%@ isInitiator=%d state=%d remoteProtocolVersion=%@>
%@=%ld
@"NSString"16@?0@"NSString"8
CSDFaceTimeIDSProviderDelegate.m
%s is not available. Use an available initializer instead.
-[CSDFaceTimeIDSProviderDelegate init]
@"<CSDIDSService>"12@?0B8
B16@?0@"IDSAccount"8
@"<CSDIDSDualSessionProvider>"40@?0@"IDSAccount"8@"NSSet"16@"NSDictionary"24@"NSObject<OS_dispatch_queue>"32
@"<CSDIDSChat>"48@?0@"CSDExternalIDSDualSession"8@"NSUUID"16@"TUHandle"24B32B36@"NSUUID"40
CSDFileTransferringMetadataKeyIsDirectory
CSDFileTransferringMetadataKeyUserData
com.apple.telephonyutilities.callservicesd.csdfiletransfercontroller
v16@?0@"NSURL"8
directory
file
v16@?0@"IMFileCopier"8
CSDCallSourceFetcher.m
%s is not available. Use another initializer instead.
-[CSDCallSourceFetcher init]
iPod
IPOD
iPad
IPAD
iPhone
IPHONE
THUMPER_SERVICE_NAME
ENTER_CODE_FOR_%@
ALLOW
CANCEL
PrimaryDeviceNotification
THUMPER_PUSH_HANDLER_CONSENT_ALERT_MESSAGE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_TITLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_ENABLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_CANCEL
SecondaryDeviceNotification
RECEIVE_THUMPER_CALLS_FROM_PHONE_NUMBER_ENTER_CODE_%@_%@
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_TITLE
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_MESSAGE
protoStatus
protoConferenced
protoTimeConnected
protoOutgoing
protoHasSentInvitation
kMXSessionAudioMode_RemoteVoiceChat
com.apple.telephonyutilities.callservicesd.callhistorymanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.callhistorymanager
-[CSDCallHistoryManagerXPCServer updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:]
CSDPauseDigitsQueue.m
-[CSDPauseDigitsQueue init]
 baseDestinationID=%@
 originalPauseDigitsString=%@
 pauseDigits=%@
** TUAssertion failure: %@
callservicesd is attempting to create an XPC client for itself.
CSDXPCClient.m
%@ entitlementCapabilities=%@
IPCHack
UI process assertion for message handling
RTTTelephonyUtilities
RTTUtilities
targetContentIdentifier
shouldAssociateScene
CSDIDSInitialLinkTypeKey
CSDIDSInputAudioPowerSpectrumTokenKey
CSDIDSOutputAudioPowerSpectrumTokenKey
CSDIDSSpatialAudioSourceIdentifierKey
message
messagesGroupUUIDString
messagesGroupName
activitySession
providerIdentifier
otherInvitedHandles
lightweightMembers
videoEnabled
participantAssociation
collaborationIdentifier
PHPhotoLibrary
Photos
PHAssetCreationRequest
PHAssetResourceCreationOptions
CallState
status
bundleID
providerContext
hostedOnCurrentDevice
endpointOnCurrentDevice
callStart
callStop
callForegrounded
callBackgrounded
GroupSessionEventEnded
timestamp
timestampEnd
CSDFaceTimeProviderDelegate.m
-[CSDFaceTimeProviderDelegate init]
v24@?0@"NSArray"8@"NSArray"16
-[CSDVoIPApplication init] is not supported. Use -[CSDVoIPApplication initWithBundleIdentifier:] instead
CSDVoIPApplication.m
<%@ %p bundleIdentifier=%@ environment=%@ pushKitClient=%@ networkExtensionClient=%@ token=%@ pendingPKMessageContextCount=%lu pendingNetworkExtensionContextsCount=%lu>
aps-environment
com.apple.developer.pushkit.unrestricted-voip
com.apple.developer.pushkit.unrestricted-voip-regulatory
com.apple.developer.pushkit.unrestricted-voip.ptt
com.apple.developer.pushkit.unrestricted-voip.temporary
13.0
15.0
15.4
identifierUUIDString
activity
givenName
middleName
nameSuffix
phoneticRepresentation
link
v20@?0i8q12
v16@?0@"TUConversation"8
-[CSDStatusBarResolver conversationManager:removedActiveConversation:]
-[CSDStatusBarResolver conversationManager:addedActiveConversation:]
-[CSDStatusBarResolver conversationManager:stateChangedForConversation:]
-[CSDStatusBarResolver conversationManager:activitySessionsChangedForConversation:]
-[CSDStatusBarResolver conversationManager:activeRemoteParticipantsChangedForConversation:]
-[CSDStatusBarResolver conversationManager:localVideoToggledForConversation:]
-[CSDStatusBarResolver conversationManager:handoffEligibilityChangedForConversation:]
CSDRelayConferenceLocalFrequencyChangedNotification
CSDRelayConferenceRemoteFrequencyChangedNotification
CSDRelayConferenceLocalMeterLevelChangedNotification
CSDRelayConferenceRemoteMeterLevelChangedNotification
CSDRelayConferenceMutedChangedNotification
CSDRelayConferenceSendingAudioChangedNotification
CSDRelayConferenceConnectionWillCloseNotification
CSDRelayConferenceConnectionDidCloseNotification
CSDRelayConferenceConnectionDidReceiveDataNotification
CSDRelayConferenceConnectionDidReceiveDataNotificationDataKey
com.apple.telephonyutilities
Conference cleaned up before handling a didStart with error: %@
CallServices
Images
CSDSandboxExtensionDirectory.m
-[CSDSandboxExtensionDirectory init]
CSDPinExchangeCompressedDataKey
CSDPinExchangeActionKey
CSDPinExchangeCallerIDKey
CSDPinExchangePinKey
CSDPinExchangeActionRequestPIN
CSDPinExchangeActionSendPIN
CSDPinExchangeActionOneTimeReminder
CSDPinExchangeActionApproved
CSDPinExchangeActionUnapproved
CSDPinExchangeActionCancelledPrimary
CSDPinExchangeActionCancelledSecondary
v20@?0B8@"NSString"12
com.apple.telephonyutilities.callservicesd.pinexchangeerror
INCORRECT_PIN_ENTERED
THUMPER_MISMATCHED_ACCOUNTS
MAX_SLOTS_FILLED
primaryHandle
primaryIdentifier
primaryAvcIdentifier
associatedPseudonym
conversationGroupUUIDString
com.apple.telephonyutilities.callservicesd.callcapabilities
com.apple.telephonyutilities.callservicesdaemon.callcapabilities
State: %@
Telephony capabilities: %@
Accounts controller: %@
Paired Host Device State: %@
v24@?0@"CSDClient"8@"<TUCallCapabilitiesXPCClient>"16
-[CSDCallCapabilities setRelayCallingEnabled:]
-[CSDCallCapabilities setRelayCallingEnabled:forDeviceWithID:]
-[CSDCallCapabilities setWiFiCallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setVoLTECallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:]
-[CSDCallCapabilities endEmergencyCallbackMode]
-[CSDCallCapabilities invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:]
-[CSDCallCapabilities invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:]
-[CSDCallCapabilities requestPinFromPrimaryDevice]
-[CSDCallCapabilities cancelPinRequestFromPrimaryDevice]
disableSupportsPrimaryCalling
forceSupportsPrimaryCalling
telephony
disableSupportsBasebandCalling
forceSupportsBasebandCalling
disableSupportsCellularData
forceSupportsCellularData
disableDisplayingTelephonyCallSupport
forceDisplayingTelephonyCallSupport
disableDisplayingFaceTimeAudioCallSupport
forceDisplayingFaceTimeAudioCallSupport
disableDisplayingFaceTimeVideoCallSupport
forceDisplayingFaceTimeVideoCallSupport
disableCanEnableWiFiCalling
forceCanEnableWiFiCalling
disableCanEnableVoLTECalling
forceCanEnableVoLTECalling
disableCanEnableThumperCalling
forceCanEnableThumperCalling
q24@?0@"TUCloudCallingDevice"8@"TUCloudCallingDevice"16
relayCallingDisabled
relayCallingDisabledForDeviceID
pairedHostDeviceState
CSDSharePlayMediaDidHandoffNotification
CSDSharePlayRemoteActivityDidChangeNotification
CSDCallMayRequireBreakBeforeMakeChangedNotification
CSDCallHasStartedOutgoingChangedNotification
CSDCallHasAudioInterruptionChangedNotification
CSDCallAudioInterruptionPropertiesChangedNotification
CSDCallLocalPreviewStoppedNotification
CSDCallsWillEnterBackgroundNotification
CSDCallEnteredForegroundNotification
CSDCallRemoteParticipantJoinedNotification
CSDCallRemoteParticipantLeftNotification
CSDCallOneToOneModeChangedNotification
CSDMediaPlaybackOnExternalDeviceChangedNotification
CSDCallTransmissionStateChangedNotification
CSDCallMetricsKnownContact
CSDCallMetricsSiriSuggested
CSDCallMetricsReturnedCall
CSDCallMetricsOwnNumber
CSDCallMetricsVerifiedAppleCare
CSDCallMetricsCarrierNumber
CSDCall.m
dialRequest is invalid: %@
SFCoordinatedAlertRequest
Sharing
v28@?0@"NSError"8B16@"NSDictionary"20
v16@?0q8
CSDRouteManagerPreferredRouteChangedNotification
com.apple.telephonyutilities.callservicesd.routemanager
AVAudioSessionMediaServicesWereResetNotification
AVFoundation
PhoneCall
StarkCapability
lightweightPrimary
lightweightPrimaryParticipantID
validationSource
associationVoucher
Endorsement
Vouched
UUIDString
locallyCreated
initiator
localMember
remoteMembers
activeRemoteParticipants
activitySessions
reportData
conversationProviderIdentifier
activeLightweightParticipants
highlightIdentifier
stagedActivitySession
conversationID
timebase
com.apple.telephonyutilities.callservicesd.conversationmanager
@"CSDIDSGroupSessionProvider"64@?0@"NSString"8@"NSArray"16@"NSString"24@"IDSAccount"32@"NSObject<OS_dispatch_queue>"40B48@"TUConversationMember"52B60
@"CSDConversation"136@?0@"NSObject<OS_dispatch_queue>"8@"NSUUID"16@"NSUUID"24@"CSDIDSGroupSession"32@"NSUUID"40B48@"TUConversationMember"52@"TUHandle"60@"NSSet"68@"NSSet"76@"NSSet"84@"NSSet"92@"TUConversationActivity"100@"TUConversationLink"108@"TUConversationReport"116B124Q128
B72@?0@"NSData"8@"IDSAccount"16@"NSSet"24@"TUConversationMember"32@"NSDictionary"40^@48@?<v@?>56@"TUConversationProvider"64
@"NSSet"16@?0@"TUConversationProvider"8
@"NSSet"8@?0
@"TUHandle"8@?0
@"TUHandle"16@?0@"TUConversationProvider"8
supports-self-one-to-one-invites
self-token:
token:
v32@?0@"CSDMessagingConversationMessage"8@"NSData"16@"NSError"24
v24@?0@"TUConversationLinkDescriptor"8@"NSError"16
v24@?0@"TUConversationLink"8@"NSError"16
v132@?0@"NSUUID"8@"NSUUID"16@"NSUUID"24B32@"TUConversationMember"36@"TUHandle"44@"NSArray"52@"NSArray"60@"NSArray"68@"NSArray"76@"TUConversationLink"84@"TUConversationReport"92@"NSArray"100@"NSString"108@"CSDMessagingConversationActivitySession"116Q124
v32@?0@"NSUUID"8@"CSDConversation"16^B24
v32@?0@"CSDMessagingEncryptedConversationMessage"8@"CSDLetMeInRequestorKeyAgreement"16@"NSError"24
v24@?0@"TUVoucher"8@"NSError"16
SHAREPLAY_INCOMPATIBLE_MESSAGE
SHAREPLAY_INCOMPATIBLE_TITLE
Failed to find conversation with activitySession
SharePlay not allowed
v24@?0@"NSSet"8@"NSError"16
v16@?0@"IDSGroupSessionParticipantUpdate"8
Invitation
Upgrade
AddMember
ResendAVCBlobRequest
ResendAVCBlobResponse
RespondedElsewhere
AddActivitySession
Decline
LetMeInRequest
LinkCreated
NicknameUpdated
EncryptedConversationMessage
LetMeInDelegation
LetMeInDelegationResponse
LetMeInResponse
RemoveMember
RemoveActivitySession
RequestVideoUpgrade
UpdateActivity
LinkInvalidated
AddLightweightMember
LinkChanged
UpdateActivityImage
GuestModeUpdated
Endorse
AddHighlight
RemoveHighlight
UpdateJoinedMetadata
ParticipantUpdated
RegisterMessagesGroupUUID
tokenPrefixedURI
unsafeData
encryptedData
This call's call history identifier is nil
CHRecentCall_CSD.m
!(call_category == %@ && service_provider == %@)
voip
com.apple.developer.networking.networkextension
app-push-provider
protoWantsVideo
OBSOLETE_protoMomentsAvailable
protoSenderMuteUplink
protoShouldSuppressInCallUI
protoMomentsV2Available
protoUpgradeSessionUUID
B16@?0@"TURoute"8
<%@ %p category=%@ mode=%@>
v32@?0@"TURoute"8Q16^B24
v24@?0@"TURoute"8^B16
com.apple.private.alloy.facetime.audio
applicationContext
activityIdentifier
activityContext
updatedDateEpochTime
fallbackApplicationName
activityMetadata
isSystemActivity
timestampAsTimeIntervalSinceReferenceDate
fromHandle
handleType
notificationStyles
faceTimeAudioAvailable
faceTimeVideoAvailable
00000000-0000-0000-0000-000000000000
com.apple.telephonyutilities.callservicesd.incomingcallfilter
@"CXCallDirectoryStore"8@?0
q24@?0@"NSString"8@"NSString"16
%ld%@
callerId
generatorID
generatorVersion
CSDIDSSession.m
-[CSDIDSSession init]
<%@ %p %@>
UUID=%@
name
protoPersonNameComponents
suggestedName
companyName
mapName
location
contactName
contactLabel
callDirectoryLabel
callDirectoryLocalizedExtensionContainingAppName
callDirectoryExtensionIdentifier
contactIdentifiers
com.apple.telephonyutilities.callservicesd.useractivitycommunicator
announcements
GondolaLinkOverrideBaseURL
com.apple.private.alloy.phone.auth
-[CSDIDSGroupSession addMembers:toExistingMembers:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:requiredCapabilities:messagesGroupUUID:messagesGroupName:addingFromLetMeIn:triggeredLocally:highlightIdentifier:stagedActivitySession:avMode:]
v24@?0@"CSDClient"8@"<TUCallServicesXPCClient>"16
com.apple.telephonyutilities.callservicesdaemon.callstatecontroller
7UhDrmrZozgwO+3AgUbHxw
%@-%d
B16@?0@"CSDClient"8
NRPairedDeviceRegistry
NanoRegistry
282F1EE6-A144-4106-AFFB-2BDB5B59FD0D
com.apple.telephonyutilities.callservicesdaemon.voicemailcallended
callsToHold
callsToUnhold
callsToDisconnect
v16@?0@"TUCall"8
-[CSDCallStateController dialWithRequest:reply:]
-[CSDCallStateController dialWithRequest:displayContext:]
-[CSDCallStateController answerCallWithRequest:]
-[CSDCallStateController holdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController unholdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController requestVideoUpgradeForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController disconnectCallWithUniqueProxyIdentifier:]
-[CSDCallStateController groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:]
-[CSDCallStateController ungroupCallWithUniqueProxyIdentifier:]
-[CSDCallStateController swapCalls]
-[CSDCallStateController playDTMFToneForCallWithUniqueProxyIdentifier:key:]
-[CSDCallStateController disconnectCurrentCallAndActivateHeld]
-[CSDCallStateController disconnectAllCalls]
-[CSDCallStateController setTTYType:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pullRelayingCallsFromClient]
-[CSDCallStateController pushRelayingCallsToHostWithSourceIdentifier:]
-[CSDCallStateController pullCallFromClientUsingHandoffActivityUserInfo:reply:]
-[CSDCallStateController sendMMIOrUSSDCodeWithRequest:]
-[CSDCallStateController setUplinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setDownlinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setIsSendingVideo:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setMixesVoiceWithMedia:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setSharingScreen:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pushHostedCallsToDestination:]
-[CSDCallStateController pullHostedCallsFromPairedHostDevice]
-[CSDCallStateController sendHardPauseDigitsForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController updateCallWithProxy:]
-[CSDCallStateController enteredForegroundForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController willEnterBackgroundForAllCalls]
-[CSDCallStateController enteredBackgroundForAllCalls]
-[CSDCallStateController setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:]
-[CSDCallStateController setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:]
-[CSDCallStateController setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:]
-[CSDCallStateController setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:]
-[CSDCallStateController shouldSuppressInCallStatusBar:]
-[CSDCallStateController shouldAllowRingingCallStatusIndicator:]
v24@?0@"NSUserActivity"8@"NSError"16
-[CSDCallStateController activateInCallUIWithActivityContinuationIdentifier:]
-[CSDCallStateController joinConversationWithRequest:]
-[CSDCallStateController setCurrentAudioInputDeviceToDeviceWithUID:]
-[CSDCallStateController setCurrentAudioOutputDeviceToDeviceWithUID:]
-[CSDCallStateController localRoutesByUniqueIdentifier:]
-[CSDCallStateController pairedHostDeviceRoutesByUniqueIdentifier:]
-[CSDCallStateController pickLocalRouteWithUniqueIdentifier:shouldWaitUntilAvailable:]
-[CSDCallStateController pickPairedHostDeviceRouteWithUniqueIdentifier:shouldWaitUntilAvailable:]
-[CSDCallStateController containsRestrictedHandle:forBundleIdentifier:performSynchronously:reply:]
-[CSDCallStateController policyForAddresses:forBundleIdentifier:reply:]
-[CSDCallStateController willRestrictAddresses:forBundleIdentifier:reply:]
-[CSDCallStateController shouldRestrictAddresses:forBundleIdentifier:performSynchronously:reply:]
-[CSDCallStateController isUnknownAddress:normalizedAddress:forBundleIdentifier:reply:]
-[CSDCallStateController filterStatusForAddresses:forBundleIdentifier:reply:]
B24@?0@"TUCall"8@"NSDictionary"16
com.apple.telephonyutilities.callservicesd.voipapplicationcontroller
com.apple.callkit.networkextension.voip
com.apple.networkextension.voip.launch
com.apple.telephonyutilities.callservicesdaemon.voip
com.apple.pushkit.launch.voip
com.apple.telephonyutilities.callservicesd.csdvoipapplicationcontroller.daily
bundleIDs
CSDVoIPApplicationKillCounts
com.apple.telephonyutilities.callservicesdaemon.voip.push
com.apple.telephonyutilities.callservicesdaemon.voip.push.development
v24@?0@"BSProcessHandle"8@"NSError"16
 identifier=%llu
 handle=%@
 isMuted=%d
 isMomentsAvailable=%d
 streamToken=%ld
 screenToken=%ld
 captionsToken=%ld
 avcIdentifier=%@
 capabilities=%@
 isAudioPaused=%d
 isRemoteAudioEnabled=%d
 isRemoteVideoEnabled=%d
 isLightweight=%d
 isLocalAccountHandle=%d
 association=%@
 isGuestModeEnabled=%d
<%@: %p %@>
object=%@ processIdentifier=%d processName=%@ processBundleIdentifier=%@
fallbackURL
supportsContinuationOnTV
title
subtitle
image
preferredBroadcastingAttributes
sceneAssociationBehavior
com.apple.telephonyutilities.callservicesd.conversationmanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.conversationmanager
-[CSDConversationManagerXPCServer createActivitySession:onConversationWithUUID:]
v16@?0@"TUConversationActivitySession"8
-[CSDConversationManagerXPCServer setUsingAirplay:onActivitySession:onConversationWithUUID:]
Conversation is not associated with a Messages group
No messages group details provider available
v24@?0@"CSDClient"8@"<TUConversationManagerXPCClient>"16
com.apple.telephonyutilities.callservicesd.callprovidermanager
Cannot launch app for dial request with a system provider: %@
Cannot launch app for invalid dial request: %@
NSSet<NSString *> *_INSupportedIntentsByExtensions(NSArray<LSPlugInKitProxy *> *__strong, NSError *__autoreleasing *)
CSDCallProviderManager.m
INSupportedIntentsByExtensions
void *IntentsLibrary(void)
v52@?0@"NSUUID"8B16B20B24@"NSUUID"28@"TUHandle"36@"NSString"44
incomingCallRaiseToAnswerEnabledKey
CMGestureManager
CoreMotion
v24@?0@"CSDIDSTransport"8@"NSDictionary"16
SBSLaunchApplicationWithIdentifier
SpringBoardServices
access-calls
modify-calls
modify-status-bar
access-call-capabilities
modify-call-capabilities
access-call-history
modify-call-history
access-moments
modify-moments
modify-usernotifications
modify-reports
override-activity-verification
register-gft-service
needs-ui-assertion
access-media-priorities
modify-activity-session-airplay
Entitlement check: In %s, client %@ lacks capability '%@'
CSDUserActivityConversationHandoffRecommendationChangedNotification
com.apple.telephonyutilities.suppressringtone
 activityType=%@
 dynamicIdentifier=%@
 activityUserInfo=%@
registeredProviders
registeredProvidersVersion
registeredRelayProviders
Ringtones
com.apple.LaunchServices.applicationUnregistered
com.apple.telephonyutilities.callservicesd.csdmomentsreportingsession
CSDMomentsReportingSession.m
-[CSDMomentsReportingSession init]
self
shouldTraceSignposts
@"AVCSessionParticipant"16@?0@"CSDConversationParticipant"8
@"AVCSession"32@?0@"NSString"8@"NSObject<NSCopying>"16@"NSObject<OS_dispatch_queue>"24
@"AVCScreenCapture"16@?0@"AVCScreenCaptureConfiguration"8
CSDAVCSessionError
avcKeySessionSentBytes
avcKeySessionReceivedBytes
CSDExternalIDSDualSession.m
<display_name>
CELLULAR_SETTINGS
prefs:root=MOBILE_DATA_SETTINGS_ID
WLAN_SETTINGS
WIFI_SETTINGS
prefs:root=WIFI
SETTINGS
prefs:root=General&path=DATE_AND_TIME
prefs:root=FACETIME&path=LOCATION&guid=%@
%s is unavailable, call another initializer instead.
-[CSDRelayConferenceConnection init]
CSDRelayConferenceConnection.m
 identifier=%@
 transport=%@
 isHost=%d
 isUsingBaseband=%d
 isAudioDisabled=%d
 receivedSuccessfulDidStart=%d
 isPreparedToStop=%d
<%@ %p>
    Are capabilities valid: %@
    Sender identity capabilities: %@
    Emergency callback capabilities: %@
    Thumper local device ID: %@
    Thumper local accounts: %@
    Thumper secondary accounts: %@
disabled
q24@?0@"CSDThumperAccount"8@"CSDThumperAccount"16
uniqueIdentifier
deviceType
protoCurrentlyPicked
protoGuest
protoSupportsRelay
AirPods
BeatsSolo
BeatsX
Powerbeats
BeatsStudio
HomePod
iMac
MacBook
MacMini
MacPro
Watch
HomePodStereoPair
iPadPro
PowerbeatsPro
BeatsSoloPro
AirPodsPro
Powerbeats4
HeadPods
BeatsX2
HomePodMini
HomePodMiniStereoPair
BeatsStudioBuds
BeatsFitPro
AirPods3
CSDConversationProviderManager
Already registered provider for identifier: %@
Did not register GFT Provider with identifier: %@
Pseudonym creation is not enabled
v24@?0@"RBSProcessHandle"8@"RBSProcessExitContext"16
v16@?0B8B12
activeParticipants
addedMembers
isLetMeInApproved
encryptedMessage
letMeInDelegationHandle
letMeInDelegationUUID
enclosedEncryptedType
invitationPreferences
removedMembers
joinedMetadata
Default
IDSMessageProxy
CSDFaceTimeIMAccountCallerIDChangedNotification
lastKnownFaceTimeCallerID
com.apple.telephonyutilities.callservicesd
com.apple.telephonyutilities.callservicesd.facetimeimaccount
v16@?0^{__CFDictionary=}8
ambiguityState
swappable
mergeable
holdAllowed
addCallAllowed
takingCallsPrivateAllowed
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
sendToVoicemailAllowed
protoUUID
localizedShortName
accountUUIDString
localizedServiceName
v32@?0@"NSString"8@"NSString"16@"NSDictionary"24
nilCallProvider
CallUUID
Unknown Dial Failure for Conversation
Unknown Call Failure for Conversation
Mediaserverd crash
No AVC error reason given
AVC session did not start
AVC audio client did not start
AVC blob recovery timeout
RelayFailedConferenceFailed
RelayFailedNoRelayDevice
ComponentCrashed
RelayFailedRelayDeviceRelayNotEnabled
NoLocalLink
CallFailed
DialFailed
AccountUnsupported
NetworkUnsupported
ProviderCrashed
MediaStartFailed
MediaServerCrashed
NoReason
Disconnected
ReceiverDeclined
LocalUnanswered
RemoteUnanswered
InitiatorCancelled
CouldNotConnect
RemoteEnded
NoLocalData
NoRemoteData
FailedToOpenSocket
LocalHangup
RemoteHangup
NoLocalNetwork
MissingRemoteInfo
NoRemoteNetwork
EncryptionSetupFailed
EncryptionFailed
DecryptionFailed
SystemInternalError
NoRemotePackets
ReceiverBusy
SystemUnsupported
QRConfigurationError
SKEConfigurationError
QRAllocbindTimeout
QRUnallocbindTimeout
QRConnectedTimeout
AcceptedElsewhere
DeclinedElsewhere
AliasDeactivated
AllocatorParseError
AllocatorInvalidField
AllocatorInternalError
AllocatorServerBusy
AllocatorMissingKey
AllocatorBadSignature
AllocatorRateLimitExceeded
AllocatorUnknownError
InitialMkMDistributionFailure
JoinNotificationDistributionFailure
QRAllocateRequestTimeout
IdleClient
ParticipantBlockedListed
AllocatorBlockUPlusOneSession
AbortedByCaller
AbortedByReceiver
ReceiverOffline
HostHangup
Shutdown
LocalNetworkUnsupported
RemoteNetworkUnsupported
SystemComponentCrashed
CouldNotInvite
CouldNotRespond
CouldNotCancel
CouldNotSendUpdate
CouldNotSendAVMessage
CallLocalUnanswered
CallRemoteUnanswered
CallDeclinedElsewhere
CallFiltered
RemoteUserDoesNotExist
RemoteUserIncompatible
LocalUserIncompatible
CallerAccountInvalid
CallerAccountNeedsUpdate
Call Failure
com.apple.telephonyutilities.callservicesdaemon.reportingcontroller
B16@?0@"<CSDCallFilter>"8
shouldCheckAllGenerators
generatorDescriptors
A910C931-A590-41EF-A783-910BFBE500B3
com.apple.telephonyutilities.callservicesd.callhistorymanager
outgoingLocalParticipantUUID == %@
v32@?0@"<CSDCallHistoryManagerDelegate>"8@"NSObject<OS_dispatch_queue>"16^B24
CSDIDSDeviceListChangedNotification
CSDIDSServiceCallerIDChangedNotification
CSDIDSServiceQueryListenerID
CSDIDSService.m
All CSDIDSService subclasses must override +sharedInstance
com.apple.telephonyutilities.callservicesd.%@
    devices: %@
    availableOutgoingRelayCallerIDs: %@
    defaultPairedDevice: %@
    pairedDevice: %@
    telephonyCapableDeviceExists: %@
    relayCapableDeviceExists: %@
", "
pairedDeviceUniqueIDOverride
AudioAccessory
v24@?0@"CSDIDSTransport"8@"NSData"16
com.apple.callservicesdaemon.csdmomentscontroller
PreserveFaceTimePhotosFiles
CSDMomentsControllerStartedRemoteCaptureNotification
CSDMomentsControllerStartedLocalVideoCaptureNotification
CSDMomentsControllerStoppedLocalVideoCaptureNotification
CSDMomentsControllerMetadataKeyTransactionID
heic
lp_image
lp_movie
com.apple.telephonyutilities.callservicesd.csdmomentscontroller
@"<CSDAVCMoments>"40@?0q8@"NSString"16@"<CSDAVCMomentsDelegate>"24@"NSObject<OS_dispatch_queue>"32
com.apple.telephonyutilities.callservicesdaemon.momentscontroller
Could not start request for mediaType: %d streamToken: %ld. -[AVCMoments newRequestWithMediaType:] returned nil.
Could not start request for mediaType: %d streamToken: %ld. No session has been registered for requested stream token.
Asked to start moments request with invalid media type %d
Asked to start moments request but moments is disabled by server bag
-[CSDMomentsController startRequestWithMediaType:forStreamToken:requesteeID:reply:]
Could not find request for transaction ID %@
-[CSDMomentsController endRequestWithTransactionID:reply:]
-[CSDMomentsController registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:reply:]
-[CSDMomentsController unregisterStreamToken:reply:]
v24@?0@"CSDClient"8@"<TUMomentsControllerXPCClient>"16
v16@?0@"NSString"8
v24@?0@"NSString"8@"NSError"16
@"TUICFQueryResult"24@?0@"NSString"8@"NSString"16
B20@?0@"TUCallProvider"8B16
B16@?0@"CSDCall"8
com.apple.telephonyutilities.callservicesd.TinCan
Not allowing requested %@ because user intent could not be reasonably validated to gain access to the microphone while in the background.
v16@?0@"CXCallSource"8
We have an active XPC connection but no corresponding CSDClient
CSDClientManager.m
B24@?0@8@"NSDictionary"16
com.apple.TUCallCenter
CSDCallDataSource.m
All CSDCallDataSource subclasses must override +callClass
com.apple.backboard.proximity.changed
v32@?0@"<CSDProximitySensorObserverDelegate>"8@"NSObject<OS_dispatch_queue>"16^B24
CSDVoIPApplicationMessageTransportTypeUnknown
CSDVoIPApplicationMessageTransportTypeNetworkExtension
CSDVoIPApplicationMessageTransportTypePushKitVoIP
<%@ %p type=%d
 socket=%d
 destination=%@
 initialLinkType=%lu
 remoteDestination=%@
 remoteDeviceUniqueIdentifier=%@
callservicesd launched
join
viewCall
requestScreenShare
continueActivity
viewLinkDetails
continueHandoff
let-me-join
FaceTime
Phone
com.apple.TVWatchList
com.apple.TVMusic
com.apple.mobilenotes
callBack
sendMessage
deviceFamily
style
displayScale
scaleFactor
originalWidth
originalHeight
com.apple.InCallService
MPVoicemailDeleteMessageBulletinBoardActionIdentifier
MPCallBulletinBoardActionIdentifier
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
GeneratorDescriptor
RTCCSDRelayDeviceRoute
AnyAudioInterruptionProvider
AVAudioSessionInterruptionProvider
CSDIDSDualSessionProvider
v20@0:8B16
v24@0:8q16
v20@0:8I16
T@"<CSDIDSDualSessionProviderDelegate>",N,W
endedReason
TI,N,R
shouldUseSocketForTransport
TB,N,R
socket
Ti,N,R
destination
T@"NSString",N,R
initialLinkType
audioEnabled
TB,N
invitationTimeout
Tq,N
@"<CSDIDSDualSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSDualSessionProviderDelegate>"16
@"NSString"16@0:8
v24@0:8@"NSDictionary"16
v24@0:8@"NSData"16
v32@0:8@"NSData"16@"NSSet"24
v28@0:8@"NSData"16B24
CSDIDSChat
v32@0:8{CGSize=dd}16
v20@0:8i16
T@"<CSDIDSChatDelegate>",N,W
UUID
T@"NSUUID",N,R
sessionUUID
T@"TUHandle",N,R
hasSentInvitation
dateStartedConnecting
T@"NSDate",N,R
dateConnected
dateEnded
outgoing
video
mayRequireBreakBeforeMake
videoStreamToken
inputAudioPowerSpectrumToken
outputAudioPowerSpectrumToken
spatialAudioSourceIdentifier
crossDeviceIdentifier
remoteFromID
failureContext
T@"CXCallFailureContext",N,R
upgradeSessionUUID
T@"NSUUID",N,C
muted
sendingAudio
sendingAudioData
sendingVideo
relaying
remoteUplinkMuted
remoteMomentsAvailable
shouldSuppressInCallUI
localSenderIdentityUUID
@"<CSDIDSChatDelegate>"16@0:8
v24@0:8@"<CSDIDSChatDelegate>"16
@"NSUUID"16@0:8
@"TUHandle"16@0:8
@"NSDate"16@0:8
@"CXCallFailureContext"16@0:8
v24@0:8@"NSUUID"16
v32@0:8@"<CXVideoAspectRatioDescriptor>"16@?<v@?@"NSArray"B>24
v24@0:8@"<CXVideoAspectRatioDescriptor>"16
faceTimeAppUUID
CSDCallCenterObserver
T@"<CSDCallCenterObserverDelegate>",N,&
triggers
T@"<CSDCallContainer>",N,R
@"<CSDCallCenterObserverDelegate>"16@0:8
v24@0:8@"<CSDCallCenterObserverDelegate>"16
@?<v@?@"CSDCall"Q>16@0:8
v24@0:8@?<v@?@"CSDCall"Q>16
@"<CSDCallContainer>"16@0:8
@"TUConversation"24@0:8@"TUCall"16
CSDCallContainer
CSDCallCenterObserverDelegate
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
CSDConversationInvitationResolving
B40@0:8@16@24@32
B32@0:8@"TUConversation"16@"TUHandle"24
B40@0:8@"TUConversation"16@"TUHandle"24@"NSSet"32
CSDPendingMembershipTrackerMessenger
v56@0:8@16@24@32@40@48
v52@0:8@16@24@32@40B48
v56@0:8@"NSSet"16@"CSDConversation"24@"TUConversationLink"32@"NSUUID"40@"TUConversationMember"48
v52@0:8@"NSSet"16@"CSDConversation"24@"NSUUID"32@"TUConversationMember"40B48
CSDPendingMembershipTrackerDelegate
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v48@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"CSDConversation"32@"NSData"40
v40@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"NSUUID"32
CSDDirtyCallManager
@?<v@?@"CSDCall">16@0:8
v24@0:8@?<v@?@"CSDCall">16
v24@0:8@"CSDCall"16
CSDConversationServerBag
activeParticipantPruningTimeout
sessionCleanupTimeout
AVCBlobRecoveryGracePeriod
AVCBlobRecoveryTimeout
rebroadcastTimeThreshold
activeParticipantRefreshDelay
automaticUpgradingEnabled
modernGFTEnabled
sharePlayVersionCheckEnabled
maxActiveParticipantFetchRetries
maxKickMemberRetries
linkPseudonymExpiry
inactiveLinkPseudonymExpiry
inactiveLinkCacheLimit
webNicknameLengthLimit
linkSyncRecoverFailureLimit
linkSyncRecoverTimeLimit
activityIdentifierBundleIDMapping
T@"NSDictionary",N,R
messageRetryMaxAttempts
messageRetryIntervalMillis
expanseConduitProxyEnabled
gftDowngradeToOneToOneAvailable
maxRemoteMirageParticipants
uPlusNDowngradeAvailable
neighborhoodActivityConduitTimeout
guestModeSupported
@"NSDictionary"16@0:8
@"NSString"24@0:8@"NSString"16
B24@0:8@"NSString"16
TUConversationLinkDescriptorDataSource
B32@0:8@16^@24
Q32@0:8@16^@24
@48@0:8@16Q24Q32^@40
v48@0:8@16Q24Q32@?40
Q44@0:8B16q20@28^@36
v44@0:8B16q20@28@?36
Q48@0:8@16q24@32^@40
v48@0:8@16q24@32@?40
conversationLinkDescriptorDataSourceDelegate
T@"<TUConversationLinkDescriptorDataSourceDelegate>",N,&
@"<TUConversationLinkDescriptorDataSourceDelegate>"16@0:8
v24@0:8@"<TUConversationLinkDescriptorDataSourceDelegate>"16
B32@0:8@"NSArray"16^@24
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
Q32@0:8@"NSPredicate"16^@24
v32@0:8@"NSPredicate"16@?<v@?Q@"NSError">24
@"NSArray"48@0:8@"NSPredicate"16Q24Q32^@40
v48@0:8@"NSPredicate"16Q24Q32@?<v@?@"NSArray"@"NSError">40
Q44@0:8B16q20@"NSPredicate"28^@36
v44@0:8B16q20@"NSPredicate"28@?<v@?Q@"NSError">36
Q48@0:8@"NSDate"16q24@"NSPredicate"32^@40
v48@0:8@"NSDate"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
Q48@0:8@"NSSet"16q24@"NSPredicate"32^@40
v48@0:8@"NSSet"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
Q48@0:8@"NSString"16q24@"NSPredicate"32^@40
v48@0:8@"NSString"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
CSDConversationLinkManagerDelegate
v32@0:8@"CSDConversationLinkManager"16@"NSArray"24
TUVouchingEnablement
shouldForceVerificationFailures
CSDIDSService
B72@0:8@16@24@32q40@48^@56^@64
T@"<CSDIDSServiceDependencies>",N,R
allAliases
devices
callerID
countryCode
telephonyCapableDeviceExists
relayCapableDeviceExists
defaultPairedDeviceExists
pairedDeviceExists
hasActiveAccounts
defaultPairedDevice
T@"IDSDevice",N,R
pairedDevice
availableOutgoingRelayCallerIDs
T@"NSSet",N,R
localDeviceUniqueID
account
T@"IDSAccount",N,R
@"<CSDIDSServiceDependencies>"16@0:8
@"NSArray"16@0:8
@"IDSDevice"16@0:8
@"NSSet"16@0:8
@"IDSAccount"16@0:8
@"IDSDevice"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"<IDSServiceDelegatePrivate>"16@"OS_dispatch_queue"24
v24@0:8@"<IDSServiceDelegatePrivate>"16
B72@0:8@"NSData"16@"IDSAccount"24@"NSSet"32q40@"NSDictionary"48^@56^@64
OS_nw_activity
CSDScreenSharingActivityManagerDelegate
v36@0:8@16@24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"<TUScreenShareAttributes>"24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"NSError"24B32
TUScreenShareAttributes
T@"NSNumber",N,&
originalResolution
T@"NSValue",N,&
frameRate
displayID
windowed
windowUUID
@"NSNumber"16@0:8
v24@0:8@"NSNumber"16
@"NSValue"16@0:8
v24@0:8@"NSValue"16
B24@0:8@"<TUScreenShareAttributes>"16
currentDeviceFamily
defaultDisplayScale
T@"NSNumber",N,R
defaultScaleFactor
CSDAVCMoments
@48@0:8q16@24@32@40
@32@0:8C16C20@24
T@"<CSDAVCMomentsDelegate>",N,R
streamToken
capabilities
activeRequestCount
pendingRequestCount
@"<CSDAVCMomentsDelegate>"16@0:8
@48@0:8q16@"NSString"24@"<CSDAVCMomentsDelegate>"32@"OS_dispatch_queue"40
@"<CSDAVCMomentsRequest>"32@0:8C16C20@"NSString"24
CSDVoucherManager
v40@0:8@16@24@?32
v40@0:8@"NSData"16@"TUHandle"24@?<v@?@"TUVoucher"@"NSError">32
v32@0:8@"TUVoucher"16@?<v@?B@"NSError">24
CSDTTYProviderObserver
transportMethod
TUFeatureFlags
conversationOneToOneModeEnabled
conversationHandoffEnabled
vouchingEnabled
uNNotificationsMacOSEnabled
expanseEnabled
sharePlayDisabled
sharePlayDiscoverabilityEnabled
sharePlayWithAirplayEnabled
ftvSpatialAudioEnabled
FTUserScore
livePhotoXPCServiceEnabled
nonInterruptingCalls
qrPluginEncryptionEnabled
unreliableMessengerEnabled
supportsScreenSharing
individualAudioVideoToggleEnabled
expanseBTSwitchingEnabled
TTRBannerEnabled
aTVHandoff
suggestionsReloadForSelectedRecipients
gftDowngradeToOneToOne
uPlusNDowngrade
requestA2DPOverIncomingCalls
mochiEnabled
screenCaptureKitEnabled
avLessSharePlayEnabled
continuityCaptureEnabled
greenTeaLinksEnabled
updatedBannersEnabled
screenSharingCALayerHostMode
_TtP13callservicesd36CSDCollaborationStateManagerDelegate_
v40@0:8q16@24@32
T@"OS_dispatch_queue",N,R
@"OS_dispatch_queue"16@0:8
v40@0:8q16@"NSString"24@"NSUUID"32
CSDAVCMomentsDelegate
v28@0:8@"<CSDAVCMoments>"16I24
v40@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSError"32
v56@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSURL"32@"NSURL"40@"NSError"48
v24@0:8@"<CSDAVCMoments>"16
CSDAVCMomentsRequest
C16@0:8
transactionID
mediaType
TC,N,R
requesterID
requesteeID
CSDNeighborhoodActivityConduitDelegate
v48@0:8@16@24q32@?40
v24@0:8@"TUNearbyDeviceHandle"16
v48@0:8@"TUConversation"16@"TUNearbyDeviceHandle"24q32@?<v@?B@"NSError">40
TUContactsDataSource
@40@0:8@16@24^@32
r^v24@0:8@16
@"NSDictionary"40@0:8@"NSArray"16@"NSArray"24^@32
@"CNContact"40@0:8@"NSString"16@"NSArray"24^@32
@"NSArray"40@0:8@"NSPredicate"16@"NSArray"24^@32
r^v24@0:8@"CNContact"16
@"CNContact"32@0:8@"NSString"16@"NSArray"24
OS_dispatch_source_timer
IDSCTSIM
SIMIdentifier
phoneNumber
label
isDefaultVoiceSIM
slot
mobileCountryCode
mobileNetworkCode
CNKeyDescriptor
OS_xpc_object
CSDIDSSessionProvider
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
TUCallContainer
@24@0:8@?16
@20@0:8i16
Q24@0:8@?16
B24@0:8@?16
B20@0:8i16
currentCalls
currentVideoCalls
currentAudioAndVideoCalls
incomingCalls
displayedCalls
displayedAudioAndVideoCalls
conferenceParticipantCalls
callsHostedElsewhere
callsWithAnEndpointElsewhere
callsHostedOrAnEndpointElsewhere
callsOnDefaultPairedDevice
incomingCall
T@"TUCall",N,R
incomingVideoCall
activeVideoCall
currentVideoCall
currentCallCount
currentVideoCallCount
currentAudioAndVideoCallCount
callCountOnDefaultPairedDevice
hasCurrentCalls
hasCurrentAudioCalls
hasCurrentVideoCalls
anyCallIsHostedOnCurrentDevice
anyCallIsEndpointOnCurrentDevice
currentCallGroups
currentAudioAndVideoCallGroups
callGroupsOnDefaultPairedDevice
@"NSArray"24@0:8@?<B@?@"TUCall">16
@"NSArray"20@0:8i16
@"NSArray"24@0:8@"NSUUID"16
@"TUCall"24@0:8@?<B@?@"TUCall">16
@"TUCall"16@0:8
@"TUCall"20@0:8i16
@"TUCall"24@0:8@"NSString"16
@"TUCall"24@0:8@"NSArray"16
Q24@0:8@?<B@?@"TUCall">16
B24@0:8@?<B@?@"TUCall">16
TUCallContainerPrivate
@32@0:8@?16@?24
_allCalls
displayedCall
conferenceCall
frontmostCall
frontmostAudioOrVideoCall
existingCallsHaveMultipleProviders
@"TUCall"32@0:8@?<B@?@"TUCall">16@?<q@?@@>24
NSSecureCoding
supportsSecureCoding
OS_dispatch_source
NSCopying
@24@0:8^{_NSZone=}16
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
_TtC13callservicesd28AnyAudioInterruptionProvider
boxed
_beginOrUpdate
_end
_resetState
_activeDescriptor
Sending updated policy for %s: %{bool}d
Sending policy infos: %s
No policy info to send, skipping
CSDTinCanIDSProviderDelegate
@40@0:8@16@24@32
isAccountActive
isDestinationValid
destinationsGenerator
outgoingSessionProviderGenerator
outgoingChatGenerator
contactsDataProvider
@"<CSDIDSChat>"36@?0@"CSDExternalIDSDualSession"8@"TUHandle"16B24@"NSDictionary"28
callservicesd.TinCanIDSProviderDelegate
init(capabilities:queue:)
CSDMessagingCallMessage could not be read
Received TinCan message: %@
TinCan message was of unknown type %@: %@
Could not find chat for set muted action  %@. All chats: %@
Sending TinCan message for sender mute uplink: %@
Failing action: %@ since its not relaying
Could not find chat for set relaying action  %@. All chats: %@
Cannot start TinCan IDS chat using service %@ because account is not active
Cannot start TinCan IDS chat using handle because IDS destination was invalid
Created TinCan session to destinations %@ with options: %@
Starting TinCan IDS chat: %@
v20@?0@"NSArray"8B16
Tried to make an outgoing call when we already had a ringing call with the same destination
TinCan IDS chat was canceled
SenderMuteUplink
Server bag does not support quick relay since current version is unspecified
qr-invitations-enabled
Server bag does not support quick relay since minimum version is unspecified
quickRelaySupported
CSDFaceTimeIDSProviderDelegateServerBag
loaded
B24@0:8@16
Q16@0:8
superclass
description
CSDUserIntentManager
v24@0:8@16
privateAPIValidator
$__lazy_storage_$_applicationStateValidator
donatedIntentValidator
backgroundBluetoothAccessValidator
mediaRemoteStateValidator
Validating intent for call source: %@ callSourceHasReasonableUserIntent: %@ isUserIntentConfident: %@ (%@)
Playing alert for background mic access: %@
callservicesd.UserIntentManager
init()
Enabling file protection class for conversation persistence storage
Cannot cast value: %@ to type: %@
CSDEmergencyCallbackCapabilities
_emergencyCallbackPossible
emergencyCallbackCapabilitiesDidChange
preventDetachAfterEmergencyCallTimeoutDeterminationHandler
dispatchAfterHandler
dispatchCancelHandler
callCenterObserver
preventDetachAfterEmergencyCallTimeoutWorkItem
emergencyCallbackPossible
callservicesd.EmergencyCallbackCapabilities
v24@?0@"CSDCall"8Q16
Starting prevent detach after emergency call timer with timeout of %d seconds. Marking emergency callback possible
Prevent detach after emergency call timer fired. Marking emergency callback as no longer possible
_CTServerConnectionCarrierSettingsCopyValue - encountered error %d %d
PreventDetachAfterEmergencyCallTimer
@?<v@?>16@0:8
v24@0:8@?<v@?>16
_TtC13callservicesdP33_7D766AEB715565F6893650EFEF7EA3D422OneShotCancellationBox
lock
state
CSDPowerAssertionManager
powerAssertion
powerAssertionDescription
acquirePowerAssertionHandler
releasePowerAssertionHandler
com.apple.telephonyUtilities.callservicesd.HomePodRelay
B16@?0@"TUCall"8
PowerAssertionManager: Call relayed to HomePod, call=%@
releasing PowerAssertion %@
acquired PowerAssertion %@
_TtC13callservicesd32AudioInterruptionProviderFactory
AudioAccessory5,1
callservicesd.LetMeInRequestorKeyAgreement
CSDLetMeInRequestorKeyAgreement
B16@0:8
v16@0:8
localKey
requestKey
responseKey
isExhausted
Failed to derive let me in requestor's public key from the locally-generated private key.
Failed to retrieve combined data from encrypted LMI response.
CSDProviderDisplayMonitor
@28@0:8@16i24
provider
displayLayoutMonitor
$__lazy_storage_$_processObserver
isVisible
callservicesd.ProviderDisplayMonitor
com.apple.telephonyutilities.callservicesd.providerdisplaymonitor
HoldMusicDescriptor()
callservicesd
silenceUnknownCallersEnabled
maxJunkLevel
v24@0:8Q16
v24@0:8@?16
callContainerClosure
notificationCenter
T@"<CSDCallCenterObserverDelegate>",N,W,Vdelegate
TQ,N,Vtriggers
Could not retrieve conversation from notification %@
Could not retrieve call with conversation group UUID %@
Received notification %@ for unrecognized trigger
Call not specified in notification %@
TQ,N
NSObject
#16@0:8
_TtC13callservicesd33GroupFaceTimeNotificationProvider
conversationManager
ftNetworkSupport
invitationResolver
notificationIdentifiersByConversationUUID
carPlayNotificationIdentifiersByConversationUUID
faceTimeNotificationCenter
facetimeIsShowingOnScreen
unlockAndOpenSensitiveURL
localizeConversationName
localizeHandleName
localizeHandleNameWithConversation
notificationType
categories
replace
removeNotification
updateBadgeValue
Unknown notification response received
continueActivity action for notification: %@
Ignoring notification response %@ because a pseudonym is missing/could not be typecasted in userInfo
Failed to construct FaceTime app URL to view link details
Launching FaceTime for notification response via url %@
handoffDynamicIdentifier
Ignoring notification response %@ because a handoff dynamic identifier is missing/could not be typecasted in userInfo
MAYBE_NICKNAME_%@
TelephonyUtilities
group-facetime-invite
group-facetime-participant-join
ACCEPT_SHARE_SCREEN_REQUEST
group-facetime-participant-screenshare-request
group-facetime-moments-request
group-facetime-let-me-in-approved
VIEW_LINK_DETAILS
group-facetime-let-me-in-request-pre-conversation
group-facetime-handoff-eligibility
Replacing handoff eligible nearby notification from old conversation UUID %@ to new conversation UUID %@
conversation-handoff-nearby
Not posting handoff nearby notification for conversation %@ because it did not have handoff eligibility
FACETIME_AUDIO_SERVICE
MOVE_CALL_TO_THIS
Posting notification request %@ for handoff eligible conversation UUID %@ nearby
FACETIME_SERVICE
Not posting user notification for handoff eligible conversation %@ because there's already a local non-waiting conversation
Ignoring adding notification request %@ since valid network is not reachable
Handoff eligibility changed for %@
Removing handoff eligible nearby notification for conversation UUID %@
In response to conversations changed, we determined that we should post an invite notification for conversation UUID %@
Posting notification request for conversation UUID %@ with content %@
JOIN_FACETIME_CALL
GFT_PARTICIPANT_REQUESTING_SHARE_SCREEN
Removing handoff notification as there are no handoff-eligible conversations left
No notification for conversation UUID %@
Tracked pending member changed, but not a locally owned link -- ignoring %@ %@
Failed to determine conversation link for pending member notification with conversation %@ and conversationLink %@
Not posting pending member notification becaue Group FaceTime is not supported (GreenTea device or doesn't support multiway)
GFT_LET_ME_IN_REQUESTED
authorizationRequest-
v16@?0@"NSArray"8
Skip posting pending member notification because hasJoined: %{BOOL}d, ignoreLMIRequests: %{BOOL}d for conversation: %@
Replacing notification id %@ with content %@
Not posting LMI approval notification because the conversation is currently showing on screen
GFT_LET_ME_IN_GRANTED
Removing invite notification for conversation UUID %@ with notification identifier
Conversation UUID %@ had a state change, and we determined that we should post an invite notification
Handling notification for pending message did receive invite: %@
Did not find expected pending chat information
momentsStartedRemoteCapture received invalid notification object: %@
could not find conversation for notification stream token: %@
FACETIME_PHOTO_SUCCESS_REMOTE_CAPTURE
FACETIME_PHOTO_NOTIFICATION_TITLE
could not find participant for participant in conversation: %@ for requesterID: %@
Handle momentsStartedRemoteCapture in-app
could not find conversation or call for notification stream token: %@
com.apple.facetime
callservicesd/GroupFaceTimeNotificationProvider.swift
TUConversationManagerDelegate
v44@0:8@16@24Q32B40
v48@0:8@16@24Q32@40
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
_TtC13callservicesd29SoundDescriptorActionResolver
deviceIsHomePod
playersForSounds
Error creating audio player for %@ sound: %@
CSDFaceTimeLivePhotosIDSService
@16@0:8
sharedInstance
T@"CSDFaceTimeLivePhotosIDSService",N,R
com.apple.private.alloy.facetime.lp
remoteParticipantHandles
activeParticipantHandles
notificationProviderIdentifier
T@"NSArray",N,C
T@"NSString",N,C
_TtC13callservicesd33AVAudioClientInterruptionProvider
activeDescriptor
Setting audio session properties: %@
Setting audio mixing: %@
Setting mode to A2DP: %@
Starting audio session
v20@?0B8@"NSError"12
Setting descriptor to be active since it requested an expedited activation: %@
Failed to start audio session: %@
Successfully started audio session
kAUVoiceIOProperty_OperationMode
kAUVoiceIOProperty_MediaPlaybackOnExternalDevice
kMXSessionProperty_PrefersToPlayDuringWombat
kMXSession_HostProcessAttributionKey_BundleID
kMXSession_HostProcessAttributionKey_AuditToken
kMXSessionProperty_HostProcessAttribution
kMXSessionProperty_CreateSpeakerDevice
kMXSessionProperty_InitiationDescription
kMXSessionProperty_ClientPriority
kMXSessionProperty_AudioMode
kMXSessionProperty_AudioCategory
CSDFaceTimeMultiwayIDSService
T@"CSDFaceTimeMultiwayIDSService",N,R
com.apple.private.alloy.facetime.multi
_TtC13callservicesd34AVAudioSessionInterruptionProvider
audioSession
isLocal
_activationContext
Setting audio activation context: %@ for provider %@
Error setting audio activation context to %@ for provider %@: %@
Successfully set audio activation context
Error overriding output audio port to AVAudioSessionPortOverrideNone: %@
Deactivating and setting audio interruption priority: %ld for provider %@
Error deactivating and setting audio interruption priority to %ld for provider %@: %@
Successfully deactivated and set audio interruption priority
Setting audio interruption priority: %ld for provider %@ category %@ mode %@
Error setting audio interruption priority to %ld for provider %@: %@
Successfully set audio interruption priority
Setting audio active: %@ options: %ld for provider %@ category %@ mode %@
Error setting audio active to %@ for provider %@: %@
Did not deactivate audio successfully, but error code was %d so assuming success
Successfully set audio active: %@ options: %ld
Requesting audio session be attributed to %@
Requesting audio session enable audio during Wombat
Setting audio category: %@ mode: %@ for provider %@
Error setting audio category to %@ and mode to %@ for provider %@: %@
Successfully set audio mode
.foregroundRunning
.backgroundRunning
.backgroundSuspended
CSDProcessObserver
@32@0:8@16@24
i16@0:8
@?16@0:8
processInfoByBundleIdentifier
applicationMonitor
processStateChanged
processStateChangedWithBundleID
currentProcessIdentifier
T@?,N,C
v16@?0@"NSDictionary"8
callservicesd.ProcessObserver
v28@?0@"NSString"8i16q20
CSDProcessObserverProtocol
@?<v@?iq>16@0:8
v24@0:8@?<v@?iq>16
@?<v@?@"NSString"iq>16@0:8
v24@0:8@?<v@?@"NSString"iq>16
@"NSDictionary"24@0:8@"NSString"16
v32@0:8@"NSString"16@?<v@?@"NSDictionary">24
_TtC13callservicesd28FaceTimeNotificationProvider
openURL
%@ does not handle response with identifier %@
Handling notification %@
Did not find expected pending chat uuid information
facetime-invite-first-unlock
FACETIME_%@_CALL_FIRST_UNLOCK_%@_BODY
FACETIME_CALL_FIRST_UNLOCK_TITLE_%@
callservicesd.FaceTimeNotificationProvider
CSDSharedConversationServerBag
d16@0:8
fitnessPlusAppBundleID
fitnessPlusDaemonBundleID
TQ,N,R
activity-identifier-to-bundleIDs
Server bag does not have a value for %@, so returning the default one of %@ seconds.
Got %@ from server bag with a value of: %@
com.apple.tv.watch-together
com.apple.music.listenTogether
com.apple.notes.collaborate-activity
com.apple.Fitness
com.apple.fitcored.session
gftaas-pseudonyms-enabled-%@
guest-mode-supported
neighborhood-activity-conduit-timeout
qr-session-uPlusN-downgrade-available
max-remote-mirage-participants
qr-session-gft-downgrade-available
expanse-conduit-proxy-enabled
receive-message-retry-interval-millis
receive-message-retry-max-attempts
Couldn't find bundleID %@ in activityIdentifierMap %@
No bundleID specified, but fallback is specified
link-sync-recover-time-limit
link-sync-recover-failure-limit
web-nickname-length-limit
inactive-link-cache-limit
inactive-link-pseudonym-expiry
link-pseudonym-expiry
qr-kick-member-retries
qr-active-participant-fetch-retries
shareplay-version-check-enabled
qr-session-supports-modern-gft
qr-session-ft-upgrade-enabled
qr-session-participant-refresh-delay
qr-session-rebroadcast-threshold
qr-session-avc-blob-recovery-timeout
qr-session-avc-blob-recovery-grace-period
qr-session-cleanup-timeout
qr-participant-prune-timeout
v32@0:8@16@24
routesDidChangeHandler
didPickRouteHandler
didDeselectAllRoutesHandler
supportsPrimaryCalling
hasRelayiCloudAccount
idsDeviceForIDSDeviceIdentifier
queue
nearbyDeviceMonitor
idsDeviceDestinationResolver
nearbyDeviceRoutes
activeRelayClientTransport
currentCallsSupportNearbyDevices
route: %@
Could not find route to pick for %@. All nearby device routes: %@
Updating activeRelayClientTransport to %@
Updating nearby device routes using devices: %@
Current calls do not support nearby devices (%@) or device doesn't support primary calling (%@)
Could not convert NearbyDevice to NearbyDeviceRoute: %@
filtering out device: %@
Error activating companion link client: %@
callservicesd.NearbyDeviceRouteProvider
callChanged
dirtyCallsArray
dirtyCallsSet
callservicesd.DirtyCallManager
Adding call %@ to dirty calls pool
Asked to dispatch drain the pool
Draining pool with dirty calls: %@
v16@?0@"CSDCall"8
CSDPendingMembershipTracker
messenger
delegate
serverBag
T@"<CSDPendingMembershipTrackerMessenger>",N,W,Vmessenger
T@"<CSDPendingMembershipTrackerDelegate>",N,W,Vdelegate
_TtC13callservicesd37MemoryPendingMembershipTrackerStorage
underlyingStorage
_TtC13callservicesdP33_29A092E378431E19BF8C7D5BE1CFB24A26SharedPendingMembershipBag
Removed group from pending membership tracker storage {underlyingStorage: %@}
Remoted info from pending membership tracker storage {underlyingStorage: %@}
Added info to pending membership tracker storage {underlyingStorage: %@}
No info matching local user action -- ignoring {uuid: %@, handle: %@}
Processing local user action for pending member {info: %@, action: %@, member: %@, conversation.groupUUID: %@}
Local user action for pending member attempted, disabled -- ignoring
No info matching remote user action -- ignoring {uuid: %@, handle: %@}
Processing remote user action for pending member {info: %@, action: %@, member: %@, from: %@, transactionUUID: %@, conversation.groupUUID: %@}
Client remote action does not match what we expect -- ignoring {sender: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Hosted remote action does not match what we expect -- ignoring {expectedDestinations: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Hosted remote action is from a kicked handle -- ignoring {kickedHandles: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Remote user action for pending member attempted, disabled -- ignoring
lmi-delegation-disabled
Issue storing delegated pending membership info -- aborting {error: %@}
Attempting to track delegated pending member, disabled -- ignoring
Neither a conversation nor a link with handles was specified -- ignoring
Issue storing pending membership info -- aborting {error: %@}
Track pending member, delegation disabled
Filtered in the following active handles from list of members eligible for link approval: %@
active handles: %@
members eligible for link approval: %@
Attempting to track pending member, disabled -- ignoring
No handed off info for device target for IDS proxying
New participant IDs: %s
New joinContext: %@
Lightweight primary: %s
Protobuf member: %@
Adding split-session target to member list of proxied update
Inspecting join context for target %@: %@
Asked to proxy IDS session group participant update
Ignoring IDS session group participant update coming from proxy target
_TtC13callservicesd15IDSMessageProxy
subject
cancellables
target
buffer
proxiedMessageCount
buffering
B48@0:8@16@24@32@40
Sending RPC event: %s %s
IDS resource proxy: failed to read from resource URL. Error=%s
Unexpected error preserving %s as %s: %s
Existing IDS proxy timer found. Canceling it and making a new one.
Setting IDS proxy timeout of %ld seconds
Timing out IDS proxy
Cleaning up IDS proxy
Feature has been disabled by the server.
Creating IDS message proxy
IDS message proxy already exists
No handedoff info for device targeted for IDS proxying
Asked to proxy IDS resource at %s from %s, guid %{private,mask.hash}s
Ignoring message ID %{private,mask.hash}s, sender is our proxy target.
Asked to proxy IDS message from %s, guid %{private,mask.hash}s
CSDConduitIDSProxy
B40@0:8@"NSData"16@"NSString"24@"IDSMessageContext"32
B48@0:8@"NSURL"16@"NSDictionary"24@"NSString"32@"IDSMessageContext"40
v32@0:8@"<CSDGroupSessionParticipantUpdateProtocol>"16@"CSDConversationManager"24
_TtCC13callservicesd20CompanionLinkManager24AuthenticationController
clientsPendingAuthentication
v16@?0I8i12
v16@?0@"NSError"8
Started CompanionLink for device authentication
Failed to start CompanionLink for device authentication: %s
Successfully authenticated device %@
Error authenticating device: %s
v8@?0
Unable to prompt for password entry - no destination device!
PAIRING_CODE_ENTRY_MESSAGE
PAIRING_CODE_TITLE
PAIRING_CODE_ENTRY_HINT
PAIRING_CODE_ENTRY_ACCEPT_BUTTON
PAIRING_CODE_ENTRY_CANCEL_BUTTON
Failed to create CFUserNotification for password entry. Error: %s
User cancelled pairing entry
Received entered PIN %s
Prompting user for password for device %@
PAIRING_CODE_ENTRY_MESSAGE_FMT
CSDDuetDonater
v40@0:8@16@24Q32
maxDuration
unknownShortCallSignal
knownCallerSignal
junkCallSignal
linkCreatedSignal
silenceUnknownCallersEnabledObserver
callservicesd.DuetDonater
donate junkCallSignal event call=%@ error=%@
donate known caller mode event context=%@ error=%@
donate unknownShortCallSignal event call=%@ error=%@
donated call context data=%@ for call=%@
link created signal event error=%@
com.apple.telephonyUtilities.unknownShortCall
com.apple.telephonyUtilities.knownCallerMode
com.apple.telephonyUtilities.junkCallReceived
com.apple.facetime.call-link-created
v36@0:8@16@24i32
v44@0:8@16@24@32B40
dataSource
T@"<CSDReporterDataSource>",N,W
@"<CSDReporterDataSource>"16@0:8
v24@0:8@"<CSDReporterDataSource>"16
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
v32@0:8@"CSDReportingController"16@"CSDMomentsUsageReport"24
v40@0:8@"CSDReportingController"16@"TURoute"24@"CSDCall"32
v36@0:8@"CSDReportingController"16@"NSString"24i32
v32@0:8@"CSDReportingController"16@"TUConversation"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"TUConversation"32
v40@0:8@"CSDReportingController"16@"NSArray"24@"NSUUID"32
v32@0:8@"CSDReportingController"16@"CSDIDSChat"24
v32@0:8@"CSDReportingController"16@"NSString"24
v44@0:8@"CSDReportingController"16@"NSUUID"24@"RTCSecureHierarchyToken"32B40
v48@0:8@"CSDReportingController"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v32@0:8@"CSDReportingController"16@"TUConversationLink"24
v36@0:8@"CSDReportingController"16@"TUConversation"24B32
@32@0:8:16@24
com.apple.callservicesd.CompanionRpcErrorDomain
_TtC13callservicesd21CompanionRpcMessenger
<CompanionRpcDefinition: 
<CompanionEventDefinition: 
com.apple.callservicesd.idsProxyMessage
com.apple.callservicesd.policyInfoUpdated
com.apple.callservicesd.requestDisconnect
com.apple.callservicesd.joiningNotification
com.apple.callservicesd.contactInfoUpdate
com.apple.callservicesd.requestDeviceHandle
com.apple.callservicesd.activitySessionAvailable
com.apple.callservicesd.activitySessionNotAvailable
com.apple.callservicesd.cancelAddMember
com.apple.callservicesd.tvLaunched
com.apple.callservicesd.requestAddMember
MessageDictionary
Unknown; see NSUnderlyingErrorKey
Protobuf decoding failed
Protobuf encoding failed
Invalid message content
_TtC13callservicesd23EmptyDescriptorProvider
CSDCallController
callStateController
dataSources
dirtyCallManager
T@"CSDCallStateController",N,W,VcallStateController
callContainer
callservicesd.CallController
resolver
audioInterruptionProviderPool
ringtoneProvider
soundProvider
holdMusicProvider
discoveryModeProvider
deferredEndWorkItem
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
mediaServicesWereResetObserver
audioSessionInterruptionObserver
audioController
callservicesd.CSDAudioController
callUUID: %@
Attempted to expedite deferred end interruption block prematurely, so pending the UUID %@
Expediting deferred end interruption work item
com.apple.telephonyutilities.callservicesd.audiocontroller
v16@?0@"NSNotification"8
notification: %@
Other interruption ended so re-interrupting if necessary
Resetting state
Setting audio mixing: false
Stopping audio session
resolutionChangedHandler closure invoked
oldDescriptor: %@ descriptor: %@ notifyUnconditionally: %@
Ending interruption immediately since there is no longer a resolved descriptor
Stopping sound playback
Ending discovery mode
An end interruption was deferred but we were asked to update to a new descriptor, so canceling the deferred end
Deferring end interruption by %.2f sec, since descriptor has an interruption deferred end descriptor and there is no pending expedited end interruption
Ending interruption immediately, since descriptor has an interruption deferred end descriptor and there is a pending expedite for UUID %@
Decreasing priority of other AVAudioSession interruption provider %@ to Default
updating mic attribution to bundle %@
No provider returned for descriptor %@
No existing proxy AVAudioSession interruption provider for ID %u, creating a new one
Created AVAudioSession interruption provider %@
Starting discovery mode
Asked to begin or update playback of hold music but new descriptor is equal to activeDescriptor so doing nothing
speechSynthesizerEventHandler invoked
Hold music provider speech synthesizer finished utterance, but hold music provider is no longer active, so not invoking playback continuation
Hold music provider speech synthesizer finished utterance, and hold music provider is still active, so invoking playback continuation
Sound playback completed and we had a deferred end descriptor, so expediting end interruption for call with UUID %@
Requested to end playback, stopping alert: %@
factory
localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
avAudioClientInterruptionProvider
CSDMomentsUsageReport
@52@0:8i16q20q28d36d44
availability
photoRequestSuccessCount
photoRequestFailureCount
medianRequestDuration
meanRequestDuration
Ti,N,R,Vavailability
Tq,N,R,VphotoRequestSuccessCount
Tq,N,R,VphotoRequestFailureCount
Td,N,R,VmedianRequestDuration
Td,N,R,VmeanRequestDuration
callservicesd.MomentsUsageReport
MomentsUsageReport (Availability: 
_TtC13callservicesd37RingtoneProviderAlertPlaybackObserver
didBeginPlaying
_TtC13callservicesd16RingtoneProvider
contactStore
currentAlert
endedPlayingSemaphore
alertGenerator
playbackObserverGenerator
Alert configuration has changed, but unable to create TLAlert using configuration %@
Requested to begin or update playback, but alert configuration is unchanged so doing nothing
Alert configuration has changed, playing alert %@
Playback finished with completion type %@ for alert %@
Playback failed for alert %@: %@
Started playing alert: %@
Setting shouldIgnoreRingerSwitch: %@
Setting externalToneFileURL: %@
Setting vibrationIdentifier: %@
Setting toneIdentifier: %@
From provider, using externalToneFileURL %@
From activity alert %@, using tone %@, vibration %@, bypass ringer %@
Contact retrieval failed for contact identifier %@: %@
v24@?0q8@"NSError"16
TLAlertPlaybackObserver
v24@0:8@"TLAlert"16
CSDConversationLinkManager
v56@0:8@16@24@32q40@?48
v44@0:8@16@24B32@?36
v28@0:8B16@?20
v32@0:8@16@?24
v36@0:8@16B24@?28
@32@0:8@16^@24
v48@0:8@16@24@32@?40
service
renewPseudonymTask
linkSyncManager
generateKeyAgreement
T@"<CSDConversationLinkManagerDelegate>",N,&,Vdelegate
activatedConversationLinks
activatedLinks
T@"NSArray",N,R
ConversationLinkSync: Failed to persist links %@ {error: %@}
ConversationLinkSync: Finished persisting to data source {acquiredLinks: %@}
Informed by IDS that pseudonym was updated.  Updating expiration date in database.
Updating expiration of conversation link with pseudonym %@ failed, unable to find link with error %@
Saving expiration date for pseudonym %@ failed with error %@
Informed by IDS that pseudonym was removed.  Purging link from data source.
Removal of invalid conversation link with pseudonym %@ failed, unable to find link with error %@
Removal of invalid conversation link with pseudonym %@ failed with error %@
GondolaPseudonymExpiryDuration
Could not create mutable descriptor from descriptor %@
Unknown handle type used for invited handle %@
Asking to renew pseudonym for %@
Failed to create mutable descriptor for descriptor %@
No IDS unique ID found, cannot schedule renew.
Could not find index of our own uniqueID, aborting...
The local device (%@) generated this link, sending renew request now.
v28@?0B8@"NSDate"12@"NSError"20
Updated expiration date for pseudonym %@ to %@
Cannot normalize value for originator handle %@
Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when initializing the private key?
Provisioning pseudonym to generate link for groupUUID: %@, originatorHandle: %@, invitedHandles: %@, isActivated: %@, linkLifetimeScope: %@
v24@?0@"IDSPseudonym"8@"NSError"16
Failed to provision pseudonym with error from IDS, pseudonym was nil
Successfully provisioned pseudonym %@ and link descriptor %@
Failed to provision pseudonym with error from IDS: %@
v24@?0@"NSArray"8@"NSError"16
Failed to encrypt let me in response because either the type was wrong (%@), missing the link (%@), or approval was not specified (%@)
Failed to retrieve link with error %@
Failed to retrieve link
Failed to initialize key agreement from link's private key, or private key is absent, aborting.
Failed to retrieve the data bytes from the let me in response, or failed to init a CSDMessagingEncryptedConversationMessage
Failed to encrypt let me in response, aborting.
Checking validity of pseudonym %@
Asked to check validity of link for pseudonym %@ but none was found.
Could not retrieve IDS pseudonym object for pseudonym string %@
Removing invalid conversation link with pseudonym %@
Removing conversation link for pseudonym %@
Invalidating pseudonym %@
Asked to invalidate link for pseudonym %@ but none was found.
Removing link with pseudonym %@ from storage without invalidating as it's not locally created
Asking IDS to revoke pseudonym %@ because it was locally generated for link being invalidated
Pseudonym invalidation failed with error %@
validateAllLinks: No active accounts on the service, skipping link validation for now
validateAllLinks: Checking for invalid links
No descriptors fetched -- validation over {error: %@}
validateAllLinks: Links must be newer than date %@
validateAllLinks: We have some invalid links to cleanup {count: %@, pseudonyms: %@}
validateAllLinks: Finished removing invalid links {count: %@, error: %@}
Asked for inactive link, returning: %@
Count of inactive links (%{public}@) reached the cache limit (%{public}@); not provisioning another.
Fetching conversation link descriptor count failed with error %@
%@ provisioned inactive link %@
More inactive links exist than needed -- not generating %@
Exception caught when trying to activate link %@
In activating link, setting invitedHandles to %@
In activating link, updating the groupUUID from %@ to %@
Asked to renew link for pseudonym %@ but none was found.
Link manager asked to generate link for groupUUID %@ with invitedHandles: %@
Refusing generation of a link descriptor for groupUUID %@ as one already exists %@ (error: %@)
Fetch attempt with error %@
Failed to add invited member handles with error %@
Cannot add invited member handles for pseudonym %@ because no link matching this pseudonym was found
Failed to decrypt conversation message because the encrypted message either was missing the public key (%@) or missing the encrypted bytes (%@)
Failed to decrypt let me in response because the requestor's key agreement has already been used to decrypt a response.
Failed to decrypt let me in response, aborting.
Failed to decrypt let me in request, aborting.
Failed to encrypt let me in request because either the type was wrong (%@) or missing the link (%@)
Failed to retrieve the data bytes from the let me in request, or failed to init a CSDMessagingEncryptedConversationMessage
Failed to generate keypair for let me in requestor, aborting.
Failed to encrypt let me in request, aborting.
Asked to set link name for pseudonym %@ but none was found.
Saving link name for pseudonym %@ failed with error %@
Updated link name for pseudonym %@
Link manager asked to generate TUConversationLinkDescriptor for received TUConversationLink %@ (not locally owned)
Received link %@ missing required field
%@ already existed and isUpdate: NO, ignoring
Failed to persist link %@
Link manager asked to generate link with invitedHandles: %@, originatorHandle: %@
ConversationLinkSyncManager
ConversationLinkSync: ConversationLinkSyncManager init
v16@?0@"<OS_xpc_object>"8
ConversationLinkCheckInActivity
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
callservicesd.ConversationLinkManagerErrorType
IDSServicePseudonymDelegate
v32@0:8@"CSDIDSService"16@"IDSPseudonym"24
v24@0:8@"CSDIDSService"16
CSDTinCanIDSService
T@"CSDTinCanIDSService",N,R
com.apple.private.alloy.tincan.audio
CSDVoucherManagerImpl
vouchingEnablement
idsPushHandler
timeout
verificationCache
Verification forced to be false.
Token URI did not match handle.
Vouching is disabled.
Encrypted data was not returned.
Failed to create URI.
Operation timed out.
callservicesd.VoucherManagerImpl
Failed to verify %@ because the token prefixed URI did not come from the handle.
Failed to verify %@ because we couldn't create a URI.
Requested to verify %@.
Failed to verify %@ with error %s
Successfully verified %@.
v24@?0@"NSData"8@"NSError"16
Failed to sign data (%ld) because encrypted data was missing from response (without an error).
Successfully signed data (%ld) into %@.
Failed to sign data (%ld) due to error %s.
com.apple.callservicesd.VoucherManager.completions
Initializing VoucherManager.
callservicesd.VoucherManagerError
moments-disabled
moments-request-timeout
callservicesd1
momentsDisabled
momentsRequestTimeout
Td,N,R
CSDMomentsServerBag
@24@0:8:16
CSDRTCReporter
relayDeviceRouteChangesByCallUUID
groupUUIDToConversationReportingSessions
conversationUUIDToConversationReport
groupUUIDToConversationInfo
callUUIDToCallReportingSessions
callUUIDToGFTCallReportingSessions
callUUIDtoConversationUUID
conversationGroupUUIDToCallUUID
callUUIDtoConversationGroupUUID
uuidToNWActivity
uuidToNWActivityConnecting
idsSessionUUIDToChatUUIDs
callInfosPendingScoreForCallUUIDs
userScoreEnabled
appleIDUtilities
callservicesd.RTCReporter
UserScore: ReportController: reached RTCReporter with current UUID: %@
UserScore: call UUID does not exist
UserScore: session was RTCReporting object session was nil
UserScore: session RTCCSDCallInfo object was nil
RTCReporter: Reporting message with session %@ userInfo %@
RTCReporter: Error while sending message with error: %@
com.apple.telephonyutilites.phone
bundleIdentifier
telephonyutilities
RTCReporter: Failed to create reporting session with sessionInfo: %@, userInfo: %@
RTCReporter: Created reporting session %@ with sessionInfo: %@, userInfo: %@
RTCReporter: Dropping GroupActivities reports, could not find session for conversation uuid %@
RTCReporter: received an IDS metrics report for IDS session %@ corresponding to call %@
RTCReporter: recorded mapping for IDS session %@ corresponding to call %@
RTCReporter removing ReportingSession for %@
RTCReporter: remapped call=%@ to callUUIDToCallReportingSessions=%@
RTCReporter: multiway call reporting session %@
RTCReporter: no reporting token for call, skipping session creation (for now)
RTCReporter: Creating multiway call %@ reporting session for conversation UUID %@
RTCReporter: multiway call reporting session already exists for uuid %@
multiwayconference
RTCReporter: Creating conversation reporting session for conversation uuid %@
RTCReporter: conversation reporting session exists for uuid %@
RTCReporter: call.status=%@ uuid=%@
RTCReporter: callUUIDToCallReportingSessions=%@
RTCReporter: callUUIDToGFTCallReportingSessions=%@
com.apple.telephonyutilites.facetime
RTCReporter: Creating call reporting session for 1:1 FT call UUID %@
RTCReporter: one-to-one call reporting session already exists for uuid %@
_TtC13callservicesd14RTCCSDCallInfo
callUUID
durationMs
relativeEnd
bucketedDuration
endReason
providerErrorCode
providerEndedReason
setupTimeMs
connectionTimeMs
relay
incoming
connected
currentlyGrouped
relayDeviceRouteChanges
filteredOutReason
verficationStatus
knownCallerStatus
isOwnNumber
isConversation
fromLink
returnedCall
isSiriSuggested
isKnownContact
isVerifiedAppleCare
isSignedIntoiCloud
junkConfidence
identificationCategory
isKnownCaller
userScore
callservicesd.RTCCSDCallInfo
Starting screen sharing activity for handle %@ with initial attributes %@
callservicesd.ScreenSharingActivityManager
Screen sharing manager ignoring CarPlay connection attempt since we don't have a joined session
SCREENSHARING_END_CARPLAY_TITLE
SCREENSHARING_END_CARPLAY_MESSAGE_%@
SCREENSHARING_END_CARPLAY_BUTTON
CSDScreenSharingActivityManager
subscriptionsById
sessionsById
remoteAttributesById
observer
featureFlags
carPlayObserver
T@"<CSDScreenSharingActivityManagerDelegate>",N,W,Vdelegate
latestRemoteAttributes
T@"<TUScreenShareAttributes>",N,R
Not ending ScreenSharing because user didn't choose to end
Ending ScreenSharing since user tapped the end button
Unable to send updated attributes %@ over screen sharing activity
Sending remote attributes %@ to %@ (screen sharing activity session id: %@)
Failed to send attributes %@ for screen sharing activity with error %@
End screen sharing activity session (id: %@)
Screen sharing activity manager notifying delegate of session %@ ending
Started observer for screen sharing activity sessions
Received new screen sharing activity session %@ with activity %@
Because we received new screen sharing activity session (id: %@), ending old session %@
Received initial remote attributes %@ from screen sharing activity (id: %@)
Received remote attributes message %@ from sender %@ for screen sharing activity (id: %@)
Screen sharing activity session (id: %@) reached unknown state %@
Screen sharing activity session (id: %@) joined
Screen sharing activity session (id: %@) invalidated with reason: %@
Screen sharing activity session (id: %@) waiting
Transitioned to non-joined from joined state for locally-initiated screen sharing activity, ending (id: %@)
conduit.IDSProxyMessage
conduit.ContactInfo
namePrefix
familyName
nickname
imageData
conduit.StartedSessionEvent
identifier
userAccountInfoData
memberAssociationPrimaryInfo
conduit.EndedSessionEvent
conduit.ContactUpdateEvent
identifierHash
contacts
conduit.JoinEvent
policyInfos
conduit.TVLaunchedEvent
conduit.CancelAddMemberEvent
conversationIdentifier
conduit.PolicyInfoUpdatedEvent
conduit.AddMemberRequest
memberToken
context
associationVoucherData
PointOfPlayback
ControlCenterWithActivity
ControlCenterWithoutActivity
conduit.AddMemberResponse
conduit.DeviceTokenRequest
conduit.DeviceTokenResponse
deviceToken
conduit.DisconnectRequest
conduit.DisconnectResponse
success
conduit.MemberAssociationPrimaryInfo
conversationGroupUuidString
handleData
supportedTypes
Expanse
rawData
groupUpdate
resource
conduit.IDSProxyMessage.RawData
messageData
fromID
conduit.IDSProxyMessage.Resource
resourceData
metadata
conduit.IDSProxyMessage.GroupUpdate
isInitiator
groupUUID
participantID
participantDestinationID
updateType
updateSubtype
fromServer
serverDate
participantData
clientContextData
members
participantIDs
relaySessionID
conduit.IDSProxyMessage.ParticipantIDList
identifiers
canReceiveRelayedCalls
CSDMomentsControllerLocalCapabilities
enabled
regionBlocked
v12@?0I8
CSDMomentsNotification
@32@0:8Q16@24
TQ,N,R,VstreamToken
callservicesd.MomentsNotification
_TtC13callservicesd31CallHistoryNotificationProvider
callInteractionManager
callHistoryDataSource
callProviderManager
pendingCallIdentifiers
supportedMediaTypes
supportedProviders
mostRecentCallDate
inCallServiceProcessObserver
supportsDisplayingFaceTimeAudioCalls
dialRecentCall
findConversationLink
[WARN] Could not find recent call with identifier: %@
%@ count: %d isAmbiguous: %d
allowOutgoingCallsWhenLocked
com.apple.mobilephone
ACTION_TITLE_CALL_BACK
ACTION_TITLE_SEND_MESSAGE
InCallService changed to non-running state (%@); updating posted notifications
Could not retrieve date of most recent call for notification provider %@
Notifiction provider %@ found missed calls %@
Adding notification request %@ for missed call %@
CHRecentCallIdentifier
CNContactIdentifier
Cound not retrieve interaction; using original notification content for call with identifier %@
Retrieved interaction; retrieving intent for call with identifier %@
Cound not retrieve start call intent from %
Retrieved start call intent; updating notification content for call with identifier %@
Could not update notification content; using original notification content for call with identifier %@
TUDialRequestURL
Recent call was a silenced unknown caller; displaying notification as an alert (%@)
MISSED_CALL_MESSAGE
Encountered undefined FaceTime media type %@
MISSED_FACETIME_VIDEO_CALL
MISSED_FACETIME_AUDIO_CALL
Most recent call date is now %@ for notification provider %@
Skipping update of call history notification; InCallService process state is foreground running. %@
Performed join conversation request: %@
Performed dial request: %@
Performing dial request: %@ ended in error: %@
Failed to open URL %@#. Error %@
notificationType: 
supportedMediaTypes: 
supportedProviders: 
%@ is handling %@
Updating call history badge count for notification provider %@
Call interactions changed
callservicesd/CallHistoryNotificationProvider.swift
CHCallInteractionManagerDelegate
v24@0:8@"<CHCallInteractionManager>"16
CHDelegate
Failed to derive public key from public key data, ignoring let me in
SoundDescriptor(
CSDFaceTimeSyncIDSService
T@"CSDFaceTimeSyncIDSService",N,R
com.apple.private.alloy.facetime.sync
_TtC13callservicesd17HoldMusicProvider
speechSynthesizerEventHandler
speechSynthesizer
audioPlayer
canceled speech synthesizer utterance
finished speech synthesizer utterance
No audio player could be created, so unable to begin playing hold music
Failed to start playing hold music
Successfully started playing hold music
Error retrieving file URL for hold music sound file
Error creating AVAudioPlayer with fileURL %@: %@
Created hold music audio player with URL %@
started speech synthesizer utterance
ANSWER_AND_HOLD_OUTGOING_MESSAGE
Speaking utterance %@
Ending hold music
Ending hold message
AVSpeechSynthesizerDelegate
v48@0:8@16{_NSRange=QQ}24@40
v32@0:8@"AVSpeechSynthesizer"16@"AVSpeechUtterance"24
v48@0:8@"AVSpeechSynthesizer"16{_NSRange=QQ}24@"AVSpeechUtterance"40
CSDCarPlayManager
carSessionQueue
carSessionStatus
carPlayScreenConnectionChanged
isCarPlayConnected
com.apple.calls.queues.carSessionStatus
v12@?0B8
CARSessionObserving
v24@0:8@"CARSession"16
v32@0:8@"CARSession"16@"CARSessionConfiguration"24
_TtC13callservicesd34CodableRemoteScreenShareAttributes
@24@0:8@16
sharerHandleValue
currentRemoteAttributes
_TtC13callservicesd22RTCCSDRelayDeviceRoute
type
failed
callservicesd.RTCCSDRelayDeviceRoute
CSDMomentsControllerSession
moments
remoteIDSDestinations
isRegistered
activeRequestsByTransactionID
T@"<CSDAVCMoments>",N,R,Vmoments
T@"NSDictionary",N,C
TB,N,VisRegistered
callservicesd.MomentsControllerSession
MomentsControllerSession: no streamtoken found
MomentsControllerSession: FaceTime 1:1
MomentsControllerSession: GroupFaceTime
remoteIDSDestinations=
activeRequestsByTransactionID=
CSDContactsCallFilter
appleCareHandles
carrierBundleController
%@ serviceProviderUUID: %@ carrierPhoneNumbers: %@
%@ carrierBundleNumbers=%@
%@ null call handle, should not reach here: call=%@
%@ Contact fetch failed with the following error %@
%@ Found contact (%@) or suggested contact (%@) or isVerifiedAppleCare (%@) or isCarrierBundlePhoneNumber (%@)
%@ Did not find contact or suggested contact; call filter will not allow call %@
%@ call filter will allow call %@
com.apple.calls.callservicesd
CompanionLinkManager
ParticipantUpdateSanitizer
NeighborhoodActivityCore
_TtC13callservicesd29ConversationLinkCryptoManager
FT-LMI-ResponseKey
FT-LMI-RequestKey
CSDRouteController
v28@0:8@16B24
_routesByUniqueIdentifier
routeWasPickedHandler
timedOutPickingRouteHandler
routeProviders
pendingRouteContext
pickWhenAvailableRouteIdentifier
pendingPickedRouteTimeout
routesByUniqueIdentifier
callservicesd.RouteController
routes: %@
Stopping waiting for route identifier %@ to become available
Could not find route to pick with unique identifier %@. All routes: %@
Will pick route identifier %@ when it becomes available to pick
Clearing out pickWhenAvailable route identifier %@ because user is picking available route %@
Timed out waiting for route to become picked: %@
Updated routes from %@ to %@
pickWhenAvailable route identifier %@ did become available, picking now...
Route identifier %@ did not become available in %@ seconds
v16@?0@"TURoute"8
com.apple.telephonyutilities.callservicesd.pairedhostdeviceroutecontroller
com.apple.telephonyutilities.callservicesd.localroutecontroller
v16@?0@"RPCompanionLinkDevice"8
v20@?0@"RPCompanionLinkDevice"8I16
Device changed: %@
Lost nearby device: %@
Found nearby device: %@
Local device updated
callservicesd/TUCallContainerProtocol_CSD.swift
Fatal error
Call is not a CSDCall: 
CSDTinCanIDSProviderDelegateCapabilities
cellularDataAllowed
CSDIDSProviderDelegateCapabilities
wiFiAvailable
wiFiAllowed
cellularDataAvailable
cellularDataPreferred
q16@0:8
CSDConversationInvitationResolver
B32@0:8@16@24
deviceInvitationPreferences
CSDConversationPersistenceController
storage
lockStateObserver
activeConversationsListKey
Removing active conversation with cache key: %@
Adding active conversation with cache key: %@
Expected an active conversation for key %@ but found nothing. Cleaning up cached conversation.
Cannot create CSDMessagingConversation from data in cache for key: %@. Cleaning up cached conversation
Missing fields on conversation from cache %@. Cleaning up cached conversation.
Removing conversation with UUID: %@ from cache.
Error creating CSDMessagingConversation to cache from conversation with UUID: %@.
Caching conversation with UUID: %@
Missing fields on conversation from cache %@. Returning a nil conversation.
callservicesd.ConversationPersistenceController
AudioDescriptor(
interruptionDescriptor: 
interruptionDeferredEndDescriptor: 
ringtoneDescriptor: 
soundDescriptorAction: 
holdMusicDescriptor: 
discoveryModeDescriptor: 
_TtC13callservicesd29PairedHostDeviceRouteProvider
pairedHostDeviceRoutes
Could not find route to pick for %@. All paired host device routes: %@
callservicesd.PairedHostDeviceRouteProvider
RingtoneDescriptor(
contactIdentifier=
providerRingtoneSoundURL=
CSDIDSPendingChat
@36@0:8@16B24@28
isVideo
TB,N,R,VisVideo
T@"TUHandle",N,R,Vhandle
CSDGroupIDSPendingChat
callservicesd.GroupIDSPendingChat
callservicesd.IDSPendingChat
CSDParticipantUpdateSanitizerImpl
completionQueue
voucherManager
callservicesd.ParticipantUpdateSanitizerImpl
Unable to identify context from participant update %@.
Dropping association voucher for member %s that does not have an association claim as its payload.
Dropping association voucher for member %s that makes claim for different conversation.
Dropping association voucher for member %s because the voucher is for a different handle.
Starting sanitization of %@.
Failed to verify voucher on member %s with error %s.
Verified voucher on member %s.
Finished sanitization of %@.
IDSGroupSessionParticipantUpdateClientContextDataKey
com.apple.callservicesd.ParticipantUpdateSanitizer.completions
Initializing ParticipantUpdateSanitizer.
CSDParticipantUpdateSanitizer
v32@0:8@"IDSGroupSessionParticipantUpdate"16@?<v@?@"IDSGroupSessionParticipantUpdate">24
CSDConversationLinkGeneratorDescriptor
@32@0:8@16q24
version
Tq,N,Vversion
Tq,N,R
callservicesd.GeneratorDescriptor
_TtC13callservicesd13AudioResolver
ttyProviderObserver
localAudioSystemProvider
deviceSupportsRingtone
lastPlayedSoundDate
lastPlayedSoundType
soundDescriptorActionResolver
resolvedDescriptor
resolutionChangedHandler
Unable to create interruption descriptor for call %@
Not creating interruption for call: %@, deviceSupportsRingtone: %@ shouldSuppressRingtone: %@  holdMusicDescriptor: %@
Not playing sound %@ becaus the same sound was played less than 2s ago
Other session requested no ringtone interruption, ending currentDescriptor(context:) method for call %@
CSDFaceTimeIDSProviderDelegateCapabilities
momentsAvailable
items
timeProvider
_TtC13callservicesd23LocalAudioRouteProvider
audioRoutes
callAudioCategory
callAudioMode
lastUserPickedRoute
callAudioInterruptionState
hasActiveAudioSession
Could not find route to pick for %@. All audio routes: %@
Failed to pick audio route %@: %@
Call does not have audio interruption so setting prematurely selected audio route to %@
callservicesd.LocalAudioRouteProvider
Updating audio information using call: %@; callHasAudioInterruption: %@
Audio category change from %@ -> %@ mode %@ -> %@ does not require route re-pick
Re-picking last user picked route: %@
Audio category change from %@ -> %@ mode %@ -> %@ currentlyPickedRoute: %@ shouldPickLastUserPickedRoute: %@
Updated audio routes: %@
Clearing last user picked route
Unable to create audio route from route dictionary: %@
Picking prematurely selected audio route now that audio interruption has begun: %@
TUAudioSystemControllerDelegate
nearbyDeviceProvider
devicesChangedHandler
devicesByEffectiveIdentifier
callservicesd.NearbyDeviceMonitor
_TtC13callservicesd27ConversationLinkSyncManager
interactor
recoverRateLimiter
recoverResponseRateLimiter
messageQueue
_TtC13callservicesd39ConversationLinkSyncManagerMessageQueue
intervalCalculator
actionByType
_TtC13callservicesdP33_735B00354BCC442560C6AD87FDD3101213IDSInteractor
knownDestinations
ConversationLinkSync: Ignoring devicesChanged signal from IDSService because destinations are the same {service: %@}
callservicesd.IDSInteractor
ConversationLinkSync: Incoming sync message, invalid fromID -- dropping {fromID: %@}
ConversationLinkSync: Incoming sync message, invalid destinationID -- dropping {fromID: %@}
ConversationLinkSync: Incoming sync message, unknown destinationID -- dropping {destinationID: %@, self.service.allAliases: %@}
ConversationLinkSync: Incoming sync message, invalid data -- dropping {data: %@}
ConversationLinkSync: Incoming sync message, data no protobuf -- dropping
ConversationLinkSync: Incoming sync message, processing {fromID: %@, destinationID: %@}
ConversationLinkSync: Incoming sync message, type was unknown {syncMessage: %@}
ConversationLinkSync: Incoming sync message, type was recover but message was missing recoverMessage {syncMessage: %@}
ConversationLinkSync: Incoming sync message, type was update but message was missing updateMessage {syncMessage: %@}
ConversationLinkSync: Incoming sync message, type was checkIn but message was missing checkInMessage {syncMessage: %@}
ConversationLinkSync: enqueue action {messageType: %@, destinations: %@, mode: %@, hasExisting: %@}
ConversationLinkSync: Scheduled action {interval: %@}
ConversationLinkSync: devices changed making sure we send a check in to them as well {deviceDestinations: %@}
currentRevisions
localGeneratorIdentifier
GondolaLatestVersion
localLatestGeneratedVersion
countByGenerator
originatorRevision
originatorIdentifier
ConversationLinkSync: No pseudonyms found in recover -- dropping {recover: %@, from: %@}
ConversationLinkSync: Processing recover, asked to check for links matching pseudonyms {pseudonyms: %@, from: %@}
ConversationLinkSync: Excluding pseudonym from recover response as it is at rate limit {pseudonym: %@}
ConversationLinkSync: No pseudonyms remain after rate limiting, not sending recover response {pseudonyms: %@}
ConversationLinkSync: Did not find link descriptors for pseudonyms -- nothing to send in response {pseudonyms: %@}
ConversationLinkSync: Found link descriptors for pseudonyms specified in recover -- sending update {linkDescriptors: %@, pseudonyms: %@}
ConversationLinkSync: Excluding pseudonym from recover message as it is at rate limit {pseudonym: %@}
ConversationLinkSync: No pseudonyms remain after rate limiting, not sending message {pseudonyms: %@}
ConversationLinkSync: Sending recover {to: %@, pseudonyms: %@}
ConversationLinkSync: Failed sending recover! {to: %@, error: %@}
ConversationLinkSync: Sent recover {to: %@, idsIdentifier: %@}
ConversationLinkSync: Processing update, unable to convert descriptors -- dropping {update: %@}
ConversationLinkSync: Processing update, got links {links: %@}
ConversationLinkSync: Sending link update {to: %@, linksToSend: %@}
ConversationLinkSync: Failed sending update! {to: %@, error: %@}
ConversationLinkSync: Sent link update {to: %@, idsIdentifier: %@}
GondolaLastAccountsChangedState
ConversationLinkSync: checkAccountStateForCheckIn called {activeAccounts: %@, lastAccountsChangedState: %@}
ConversationLinkSync: missing devices, waiting until devices appear {activeAccounts: %@, interactor.deviceDestinations.isEmpty: %@}
ConversationLinkSync: Processing check in, unable to convert descriptors -- dropping {from: %@}
ConversationLinkSync: Processing check in, calculated differences {from: %@, shouldCheckIn: %@, needToSendUpdate: %@, shouldCheckAllGenerators: %@}
ConversationLinkSync: Check in differences %@
ConversationLinkSync: Processing check in, no differences -- done {from: %@, generatorDescriptors: %@}
ConversationLinkSync: Performing check in {dest: %@, message: %@}
ConversationLinkSync: Failed sending check in! {dest: %@, error: %@}
ConversationLinkSync: Sent check in {to: %@, idsIdentifier: %@}
ConversationLinkSync: scheduleCheckIn called {scheduleMode: %@, deviceDestinations: %@, type: %@}
ConversationLinkSync: scheduleRecover called {deviceDestinations: %@, pseudonyms: %@}
ConversationLinkSync: scheduleCheckInIfNeeded called
ConversationLinkSync: State dump
ConversationLinkSync: Failed to create state dump {error: %@}
ConversationLinkSync: check in activity fired
ConversationLinkSync: check in activity scheduled {criteria: %@}
GondolaCheckInIntervalOverride
ConversationLinkSync: randomCheckInInterval: calculated {interval: %@, scheduleMode: %@}
ConversationLinkSync: randomCheckInInterval: defaults overriding {overrideInterval: %@}
<CheckInDiff; remoteMissingIdentifiers = 
; localMissingIdentifiers = 
; localDescriptorsBehindRemote = 
; remoteDescriptorsBehindLocal = 
IDSServiceDelegate
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
IDSServiceDelegatePrivate
v68@0:8@16@24@32@40q48@56B64
v76@0:8@16@24@32@40q48@56B64@68
v72@0:8@16@24@32@40@48@56@64
v48@0:8@16@24d32@40
v32@0:8@16q24
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v76@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64@"IDSMessageContext"68
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v48@0:8@"IDSService"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSService"16q24
CSDFaceTimeInviteDemuxer
idsQueryController
$__lazy_storage_$_supportsConversationOneToOneModeEnabled
$__lazy_storage_$_pushTokenForSelf
Current IDStatus results: %@ service: %@
Querying currentRemoteDevices %@ service: %@
Current remote device results: %@ for destinationIDs: %@, service: %@
Required IDStatus results: %@ service: %@
com.apple.telephonyutilities.callservicesd.faceTimeInviteDemuxer
AudioInterruptionDescriptor(
activationContext=
wantsExpeditedAudioSession=
mediaPlaybackOnExternalDevice=
CXAudioSessionActivationStateObserver
Vv24@0:8@16
Vv24@0:8@"NSNumber"16
CSDSecureImageTranscoder
v32@0:8@"NSData"16@?<v@?@"NSData"@"NSError">24
blastDoor
Attempting to generate preview of image after writing to URL: %s
SharePlayActivityImages
Error creating temporary images directory: %s
CSDUserNotificationController
callFilterController
phoneNotificationCenter
providersByIdentifier
providers
clientManager
v40@0:8q16@24@?32
Received response %@
Could not find notification provider for action
callservicesd.UserNotificationController
com.apple.telephonyutilities.callservicesd.usernotificationcontroller
Creating XPC endpoint for User notifications
Loaded user notification controller
com.apple.telephonyutilities.callservicesdaemon.usernotificationprovider
Started broadcasting User notifications mach service with %@
Setting badge string to %@ on notificationCenter %@ for notification type %@
APPLICATION_BADGE_UNKNOWN
APPLICATION_BADGE_UNKNOWN_COUNT
Successfully set badge string to %@
Error setting badge string to %@
Replacing notification with identifier %@ from %@
Successfully replaced notification with identifier: %@
Error while replacing notification: %@
Removing notification with identifier %@ from %@
Not posting notification since it is restricted by the call filter
Adding notification request %@ to %@
Successfully posted notification with identifier: %@
Error while posting notification: %@
com.apple.calls.conversationkit.multiwayviewcontroller.icsonscreenchangednotification.isonscreen
com.apple.calls.conversationkit.multiwayviewcontroller.icsonscreenchangednotification.isoffscreen
UNUserNotificationCenterDelegate
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
TUUserNotificationsProviderXPCServer
Vv40@0:8q16@24@?32
Vv40@0:8q16@"NSString"24@?<v@?@"NSError">32
_TtC13callservicesd21DiscoveryModeProvider
_TtC13callservicesd29VoicemailNotificationProvider
telephonyClient
voicemailDataSource
postedVoicemailIdentifiers
pendingVoicemailIdentifiers
mostRecentVoicemailDate
mostRecentNonVisualVoicemailDate
localizeVoicemailName
callbackVoicemail
unsubscribedVoicemailInfoForUUID
Could not find voicemail with identifier: %lu
No current unsubscribed voicemail info, attempting to update...
Subscribed to enhanced voicemail; unread message count is %lu
v36@?0B8@"NSNumber"12@"NSString"20@"NSError"28
Updating voicemail info for uuid %@ to available: %@, count: %@
ACTION_TITLE_VOICEMAIL_MESSAGE_DELETE
Subscription status changed: %@
Removing all voicemail notifications. Current notification identifiers: %@
Online status changed: %@
Voicemails changed: %@
Could not retrieve date of most recent voicemail for notification provider %@
Voicemail is not subscribed
Voicemail store changed, and we found the following voicemail messages we were waiting for: %@
Retrieving messages delivered after %@
Received %lu new voicemails since date %@
Voicemail store changed, but we did not find any voicemail messages we were waiting for. Waiting for: %@
Asked to post %lu voicemails
Adding notification with count: %lu
NEW_VOICEMAIL_FORMAT
nonvisualvoicemail
VMVoicemailIdentifier
voicemailDuration
[WARN] Could not generate dial request URL for voicemail: %@
Cound not retrieve voicemail message; using original notification content for voicemail message with identifier %@
Cound not retrieve intent; using original notification content for voicemail message with identifier %@
Retrieved intent; updating notification content for voicemail message with identifier %@
Could not update notification content; using original notification content for voicemail message with identifier %@
Attempt to create a notification attachment for file at %@ failed with error %@
Most recent voicemail date is now %@ for notification provider %@
Voicemail is not MWI - Ignoring voicemailInfoAvailableNotification
Handling voicemailInfoAvailableNotification voicemailInfo: %@, context: %@
callservicesd/VoicemailNotificationProvider.swift
B16@?0@"VMVoicemail"8
Retrieving voicemail messages failed with error %@
Retrieving inbox voicemail messages failed with error %@
CoreTelephonyClientVoicemailDelegate
v24@0:8@"CTXPCServiceSubscriptionContext"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTVoicemailInfoType"24
CSDCallHistoryCallFilter
usTollFreePrefixes
callHistoryManager
%@ Fetching call history calls matching predicate %@
%@ Could not create call history handle from call %@
%@ Found call history call; call filter will allow call %@
%@ Did not find call history call; call filter will not allow call %@
_TtC13callservicesd28CSDCollaborationStateManager
v60@0:8@16@24@32B40@44@?52
q24@0:8@16
highlightIdentifierOpened
highlightIdentifierToBundleID
bundleIDToHighlightIdentifier
highlightIdentifierToConversationUUID
highlightIdentifierNoAppInstalled
processObserver
T@"<_TtP13callservicesd36CSDCollaborationStateManagerDelegate_>",N,&,Vdelegate
T@"OS_dispatch_queue",N,&,Vqueue
CSDCollaborationStateManager: Failed to update document state for %s because no conversation UUID is registered for it
CSDCollaborationStateManager: Checking whether to update delegate with currentDocumentState: %s oldState: %s
CSDCollaborationStateManager received update for %s isRunning: %s
CSDCollaborationStateManager state for %s is %s
CSDCollaborationStateManager opened collaboration: %s
CSDCollaborationStateManager stopped tracking %s
callservicesd.CSDCollaborationStateManager
CSDCollaborationStateManager has no bundleID
CSDCollaborationStateManager started tracking %s with bundleID %s
CSDCollaborationStateManager potential bundleIDs %s
CSDCollaborationStateManager could not create a url from %s for highlight identifier %s
CSDCollaborationStateManager finished adding %s with state: %s
CSDCollaborationStateManager started tracking %s with application record: %s
Failed to get appLink with error: %s, url: %s
Collaboration identifier is already tracked, returning from CSDCollaborationStateManager
CSDCollaborationStateManager received update for %s with state %s
CSDOwnNumberCallFilter
idsCTAdapter
%@ Call is not the same number as subscriber; OwnNumberCallFilter will allow call %@
%@ Call is the same number as subscriber; OwnNumberCallFilter will not allow call %@
%@ call is verified; will allow call %@
%@ isSilenceUnknownCallersEnabled: %d
DiscoveryModeDescriptor()
_TtC13callservicesd13SoundProvider
player
Asked to begin or update playback of sound with descriptor %@ but no TUCallSoundPlayerDescriptor could be determined, so not playing
Attempt to play call sound player descriptor %@ returned false
Asked to begin or update playback of sound but new descriptor is equal to activeDescriptor so doing nothing
AudioInterruptionDeferredEndDescriptor(
_TtC13callservicesd33ConversationLinkDescriptorManager
GondolaGeneratedIdentifier
GondolaSyncedVersion
ConversationLinkSync: localGeneratorIdentifier: No local or IDS identifier -- starting with a local one {locallyGeneratedIdentifier: %@}
ConversationLinkSync: localGeneratorIdentifier: Mismatched local identifiers -- resetting {identifierToExpect: %@, persistedLocalIdentifier: %@}
_TtC13callservicesd22RTCCSDConversationInfo
uuid
relativeStart
conversationBaseTime
hasLink
isPending
duration
uPlusOneModeAtStart
uPlusOneModeAtEnd
maximumMemberCount
initialMemberCount
finalMemberCount
maxNumberOfParticipants
AVCBlobRecoveryAttempts
AVCBlobRecoveryTimeouts
numberLMIRequests
numberLMIApprovals
numberLMIDismissals
messageRetryAttempts
messageRetryFailures
messageRetrySuccesses
avcBlobRecoveryMessageRetryAttempts
avcBlobRecoveryMessageRetryFailures
avcBlobRecoveryMessageRetrySuccesses
hasHadActiveParticipants
cumulativeTimeAlone
timeAloneAtEnd
lastTimeNotAlone
callservicesd.RTCCSDConversationInfo
_TtC13callservicesd20CompanionLinkManager
client
authenticationController
activated
deviceUpdatedPublisher
deviceFoundPublisher
deviceLostPublisher
deviceChangedPublisher
stateHandle
messagePublishers
eventPublishers
_TtCC13callservicesd20CompanionLinkManager14DeviceProvider
manager
Sending event %s to %s : %s, options: %s
Event '%s' successfully delivered
Error sending %s: %s
v24@?0@"NSDictionary"8@"NSDictionary"16
Event '%{public}s' publisher cancelled.
Event '%{public}s' publisher finished.
Event '%{public}s' publisher failed: %{public}s
Received event '%{public}s', params: %s, %s
v32@?0@"NSDictionary"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSDictionary"@"NSError">24
Message '%{public}s' publisher cancelled.
Message '%{public}s' publisher finished.
Message '%{public}s' publisher failed: %{public}s
Received message '%{public}s', params: %s, %s
callservicesd/Combine_OneShotSink.swift
Already subscribed
Error waiting for authenticated device to reappear: %s
Found authenticated device. Device: %@
Activated CompanionLink
Failed to activate CompanionLink
Sending request %s to %s : %s, options: %s
v32@?0@"NSDictionary"8@"NSDictionary"16@"NSError"24
Received response for request %s from %s : %s, options: %s, error: %s
Authentication completed -- waiting for device to reappear
Device %@ is already authenticated
com.apple.TelephonyUtilities.CompanionLinkManager
Failed to create state dump: %s
Error encoding user account info: %s
iCloudAccountToken
iTunesAccountToken
homeUserIdentifierTokens
_TtC13callservicesd13CSDAVCMoments
I16@0:8
T@"<CSDAVCMomentsDelegate>",N,W,Vdelegate
v28@0:8@16I24
callservicesd.CSDAVCMoments
AVCMomentsDelegate
v28@0:8@"AVCMoments"16I24
v40@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSError"32
v56@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSURL"32@"NSURL"40@"NSError"48
v48@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSURL"32@"NSError"40
v24@0:8@"AVCMoments"16
CSDAnalyticsReporter
v40@0:8@16@24q32
com.apple.Callservicesd.callEndStatus
@"NSDictionary"8@?0
Logging end call to core analytics: %s
call_info_source
call_directory_provider_bundle_id
is_currently_grouped
provider_ended_reason
telephony_transport_type
face_time_transport_type
connection_time_ms
Connection time is negative, %s is likely processing a callkit action incorrectly
kCallSubTypeWifi
kCallSubTypeVoLTE
kCallSubTypeTelephony
manualLaunchAttempted
Logged manual launch attempt event for session: %s
com.apple.shareplay.manualActivityInteractions
needsManualLaunch
Logged manual launch needed event for session: %s
com.apple.callservicesd.shareplay.push-to-tv
Send SharePlay push to TV event
CSDReporter
CSDKeychainPasswordItem
@24@0:8^@16
B24@0:8^@16
accessGroup
callservicesd.KeychainPasswordItem
Successfully deleted item from keychain
No item found. Added new item to keychain
Saved item to keychain
CSDHandoffAudioController
routeIdentifierChangedNotification
continueHandoffAudioRouteNotification
callCenterQueue
routeController
pickedRouteUniqueIdentifier
HandoffAudioController: Could not parse audio route identifier from continue handoff notification: %@
HandoffAudioController: Continuing handoff of audio route with identifier %@
HandoffAudioController: Could not take audio route with identifier %@ active because either it could not be found as a valid route
HandoffAudioController: Picked route changed to: %@
HandoffAudioController: Conversation become joined, current route is %@
HandoffAudioController: Not triggering route change notification for handoff in response to conversation becoming joined, as a non-bluetooth route is in use: %@
com.apple.telephonyutilities.callservicesd.handoffaudiocontroller
CSDHandoffAudioControllerContinueHandoffAudioRouteNotification
CSDHandoffAudioControllerRouteIdentifierChangedNotification
TURouteControllerDelegate
v24@0:8@"TURouteController"16
TUAudioDeviceControllerDelegate
v24@0:8@"TUAudioDeviceController"16
CSDMomentsRequest
avcRequest
session
T@"<CSDAVCMomentsRequest>",N,R,VavcRequest
T@"CSDMomentsControllerSession",N,R,Vsession
callservicesd.MomentsRequest
Failed to find matching device for %@
Device %@ is not authenticated - starting auth flow
Failed to find handed off conversation info for device: %@
Failed to disconnect device: %@ because its associated conversation (%s) could not be found.
No effectiveID stored in handoff state. Kicking TV.
Disconnecting device with handle: %@
Disconnecting. Handed off conversations: %s
callservicesd.NeighborhoodActivityConduit
CSDNeighborhoodActivityConduit
conversationServerBag
idsService
delegatesToQueues
networkSupport
handedOffConversations
joinApprovalState
localTVDevices
joinCompletionSubjects
pendingJoinConversationIDs
activeConversationUpdateSubject
activeConversationUpdateCancellablesByDeviceID
messageProxy
idsProxyCleanupTimer
conversationIDsWithActivities
contactForwardingCanceler
T@"OS_dispatch_queue",N,R,Vqueue
nearbyTVDevices
activeSplitSessionTVDevice
T@"TUNearbyDeviceHandle",N,R
tv has left conversation %{private,mask.hash}s
tv is in this conversation
Pushing contacts
Notifying successful join
Join completions: %s
tv has joined conversation %{private,mask.hash}s
activeParticipants = %s
Waiting for tv on this conversation
Pending join IDs: %s
Remote participants changed for %{private,mask.hash}s: %s, lightweight participants: %s
Pushing %ld contacts to split-session device
Kicking split-session device %s
Left conversation: %s
Conversation state change for %{private,mask.hash}s: %s -> %s)
Joined conversation: %{private,mask.hash}s
Disconnecting idHash %s; info = %s
Sending RPC: %s %s
Invalid message content: %s
RPC response: %s %s
<Conversation Gone>
Participant %s left conversation %s on device %@
Failed to authenticate device: %@, error: %s
Unable to generate member association primary info for conversation %s.
Current activity doesn't support handoff, rejecting push attempt
HANDOFF_UNSUPPORTED_TITLE
Handoff unsupported alert title
HANDOFF_UNSUPPORTED_MESSAGE_PUSH
Handoff unsupported alert message (push side)
Presenting alert: %s / %s
Insufficient info to revoke pending invitation for: %@
Handed off conversations: %s
Removed handed off conversation with effective ID: %s
Revoking invitation for TV %@, error: %s
User Account Info - iCloudAltDSID: %{bool}d, iTunesAltDSID: %{bool}d
No effectiveIdentifier in handle %@
Adding remote participant with device token: %{private,mask.hash}s and handle: %@
Conversation has no local member to use as lightweight primary
Assigning lightweight primary %{private,mask.hash}@, participant ID %{private,mask.hash}llu
Handle strings: %s
Fetching contacts for handles: %s
Removing delegate %s
New delegate %s
com.apple.callservicesd.NearbyActivityRegistrar
Initialized NeighborhoodActivityConduit
activeConversationUpdate
CSD Conduit State
TV device appeared: %s / %s / %{private}s
New device appeared. ID: %{private}s. Now %ld devices total
New device appeared. ID: %{private}s MRID: %{private}s Model: %s Name: %{private}s
Error in event handler for '%{public}s': %s
No request options to resolve sending device handle
Could not resolve senderID or verified identity for device handle for request options: %s
Resolved verified identity %s to sending device %@
Resolved senderID %s to sending device %@
Resolved IDS ID %s to sending device %@
Incoming RPC event: %s %s
Received message from unauthenticated client, ignoring
Error in message handler for '%{public}s': %s
Incoming RPC: %s %s
Sending RPC response: %s %s
Activity %s from %s doesn't support handoff, rejecting.
Checking eligibility of activity: %@
TV is hijacking session. Skipping check of existing activity.
Requesting split-session approval from %s
Approval result: %{bool}d
Error requesting split-session approval: %s
Play on Apple
Allow Apple TV to join current activity?
 to join current activity?
Unexpected failure of CFUserNotificationDisplayAlert(): %s: %s
Unexpected CFUserNotification response flags: %s
Device disappeared. ID: %{private}s MRID: %{private}s Model: %s Name: %{private}s
?__C
RPDeviceChangeFlags
TUCallSoundPlayerSoundType
CHRecentCallMediaType
TUMomentsAvailability
Triggers
NCSDCallCenterObserverTriggers
os_unfair_lock_s
CTError
TUCallVerificationStatus
TUCallFilteredOutReason
TUConversationState
TUNearbyConversationPullContext
TUNearbyDeviceHandleType
CFString
NCFStringRef
__C_Synthesized
TUNeighborhoodActivityConduitError
VMMailboxType
HandleType
NCXHandleType
CSDAudioInterruptionProviderType
os_state_data_s
TUConversationLinkLifetimeScope
Name
NNSNotificationName
TUConversationAVMode
CHHandleType
CHRecentCallTTYType
TUHandleType
TUCollaborationDocumentState
TUCallFaceTimeTransportType
TUCallDisconnectedReason
MRPlaybackState
TUCallSoundRegion
TURouteDeviceType
AXSDefaultRouteForCall
audit_token_t
CSDAudioInterruptionOperationMode
Mode
NAVAudioSessionMode
Category
NAVAudioSessionCategory
Foundation
CallKit
CoreFoundation
Code
NTUNeighborhoodActivityConduitError
os_state_data_decoder_s
__Unnamed_union___Anonymous_field1
os_state_data_type_t
RPCompanionLinkClient
CompanionLinkMessenger
CompanionLink
CompanionLinkAuthenticationError
CompanionLinkAuthenticationResult
callservicesd
AudioInterruptionProvider
AnyAudioInterruptionProvider
AudioInterruptionPriorityProvider
AudioInterruptionProviderSetActiveOptions
AudioInterruptionProviderIdentifier
AudioInterruptionPriority
DescriptorResolver
DescriptorType
TinCanIDSProviderDelegate
UserIntentManager
NSUserDefaults
ConversationPersistenceStorage
EmergencyCallbackCapabilities
OneShotCancellationBox
State
PowerAssertionManager
AudioInterruptionProviderFactoryProtocol
AVAudioSessionInterruptionProviderType AVAudioClientInterruptionProviderType
AudioInterruptionProviderFactory
NearbyDeviceRoute
LetMeInRequestorKeyAgreement
ChangeTrackingDescriptorResolver
UpdateContext
ProviderDisplayMonitor
Provider
HoldMusicDescriptor
CallCenterObserver
callservicesd
GroupFaceTimeNotificationProvider
SoundDescriptorActionResolver
Sound
FaceTimeLivePhotosIDSService
UNNotificationResponse
callservicesd
UserNotificationProvider
UserNotificationResponse
NotificationType
AVAudioClientInterruptionProvider
FaceTimeMultiwayIDSService
AVAudioSessionInterruptionProvider
callservicesd
ProcessState
ProcessObserver
callservicesd
FaceTimeNotificationProvider
NSNumberConvertible
SharedConversationServerBag
CSDIDSService
IDSDeviceDestinationResolver
NearbyDeviceRouteProvider
DirtyCallManager
PendingMembershipTrackerServerBag
PendingMembershipTrackerStorage
PendingMembershipTracker
MemoryPendingMembershipTrackerStorage
SharedPendingMembershipBag
PendingMembershipInfo
UserAction
Errors
Mode
callservicesd
IDSMessageProxy
BufferedMessage
AuthenticationController
DuetDonater
allowContactsOnly
CompanionRpcMessenger
ReplyableInfo
CompanionRpcError
MessageInfo
CompanionRpcDefinition
CompanionEventDefinition
DescriptorProvider
DescriptorType
EmptyDescriptorProvider
EmptyDescriptor
CallController
TUAudioSystemController
LocalAudioSystemProvider
AudioActivationContext
SoundDescriptorAction
AudioController
CSDAudioController
AudioInterruptionProviderPool
MomentsUsageReport
TLAlert
callservicesd
RingtoneProviderAlertPlaybackObserver
RingtoneProviderAlert
RingtoneProviderProtocol
RingtoneProvider
RouteProvider
DeselectableRouteProvider
PairedHostDeviceRouteTrackingRouteProvider
^@callservicesd
ConversationLinkManager
ConversationLinkManagerErrorType
TinCanIDSService
VoucherManagerImpl
VerificationQuery
VoucherManagerError
RTCReporter
CallInfoPendingScore
RTCReporterInfo
RTCCSDCallInfo
CodingKeys
ScreenSharingActivityManagerProviding
ScreenSharingActivityManager
ScreenSharingActivityManagerErrors
Resource
GroupUpdate
RawData
OneOf_Message
NCProtoIDSProxyMessage
NCProtoContactInfo
NCProtoStartedSessionEvent
NCProtoEndedSessionEvent
NCProtoContactUpdateEvent
NCProtoJoinEvent
NCProtoTVLaunchedEvent
NCProtoCancelAddMemberEvent
NCProtoPolicyInfoUpdatedEvent
NCProtoAddMemberRequest
NearbyConversationPullContext
NCProtoAddMemberResponse
NCProtoDeviceTokenRequest
NCProtoDeviceTokenResponse
NCProtoDisconnectRequest
NCProtoDisconnectResponse
NCProtoMemberAssociationPrimaryInfo
MemberAssociationType
ParticipantIDList
MomentsControllerLocalCapabilities
UserIntentValidator
BackgroundBluetoothAccessValidator
DonatedIntentValidator
ApplicationStateValidator
PrivateAPIValidator
MediaRemoteStateValidator
UserIntentValidationResult
MomentsNotification
MbP?
CHManager
CHRecentCall
callservicesd
CallHistoryDataSource
RecentCall
CallHistoryNotificationProvider
ConversationLinkKeyAgreement
SoundDescriptor
FaceTimeSyncIDSService
callservicesd
HoldMusicProviderProtocol
HoldMusicProvider
SpeechSynthesizerEvent
callservicesd
CarPlayManager
CodableRemoteScreenShareAttributes
ScreenSharingActivity
CodingKeys
RTCCSDRelayDeviceRoute
RTCCSDAudioRouteType
CodingKeys
MomentsControllerSession
ContactsCallFilter
ConversationLinkCryptoManager
ConversationLinkCryptoErrorType
RouteController
PendingRouteContext
TinCanIDSProviderDelegateCapabilities
IDSProviderDelegateCapabilities
ConversationInvitationResolver
InvitationPreferencesPriority
ConversationPersistenceController
AudioDescriptor
PairedHostDeviceRouteProvider
RingtoneDescriptor
IDSPendingChat
GroupIDSPendingChat
ParticipantUpdateSanitizerImpl
DescriptorTrackingProvider
GeneratorDescriptor
AudioResolverProtocol
AudioResolver
Context
FaceTimeIDSProviderDelegateCapabilities
Cache
CacheItem
callservicesd
LocalAudioRouteProvider
CallAudioInterruptionState
RPCompanionLinkClient
RPCompanionLinkDevice
NearbyDevice
NearbyDeviceProvider
DeviceType
NearbyDeviceMonitor
ConversationLinkSyncManagerDelegate
ConversationLinkSyncManagerDataSource
ConversationLinkSyncManager
ConversationLinkSyncManagerMessageQueue
IDSInteractorDelegate
IDSInteractor
Action
MessageType
ScheduleMode
CheckInType
CheckInDiff
ConversationLinkDataSourceTUWrapper
EnqueueMode
IDSInteractorError
FaceTimeInviteDemuxer
CSDCall
AudioInterruptionActivationStateObserver
AudioInterruptionDescriptor
ProviderType
SecureImageTranscoder
BlastDoorInterface
SimulatorBlastDoorInterface
BlastDoorError
UNUserNotificationCenter
callservicesd
UserNotificationCenter
UserNotificationController
DiscoveryModeProviderProtocol
DiscoveryModeProvider
VMVoicemail
VMVoicemailManager
callservicesd
VoicemailDataSource
Voicemail
VoicemailNotificationProvider
CallHistoryCallFilter
CSDCollaborationStateManager
OwnNumberCallFilter
DiscoveryModeDescriptor
SoundProviderProtocol
SoundProvider
AudioInterruptionDeferredEndDescriptor
ConversationLinkDescriptorManager
RTCCSDConversationInfo
CodingKeys
CompanionLinkManager
DeviceProvider
UserAccountInfo
CodingKeys
callservicesd
CSDAVCMoments
AnalyticsReporter
KeychainPasswordItem
KeychainError
ASCIIStringConvertible
callservicesd
HandoffAudioController
MomentsRequest
NeighborhoodActivityConduit
ApprovalState
ConversationUpdateEvent
HandedOffConversationInfo
InitParams
enabled: %d
accelerometer orientation changed to %ld
Beginning transaction for %@. Transaction count is now %lu. Added transaction: %@
Ending transaction for %@. Transaction count is now %lu. Ended transaction: %@
CSD encountered a fault with reason: %@
Invalidating process assertion for %@
Preparing conference with configuration: %@
Initializing new callID with device role %d
Fetched local invite dictionary: %@
Error fetching local invite dictionary %@: %@
Fetching local invite dictionary using remote invite dictionary %@
Failed to initialize a new call with device role %d.
Failed to create an AVConference instance. This usually happens when the AVConference SPI can't communicate with mediaserverd over XPC
[WARN] Attempted to prepare conference which has already started preparing (state=%d)
transport: %@ self.configuration: %@
Successfully started connection with configuration=%@ (timestamp: %f)
Failed to start connection with configuration=%@: %@
[WARN] Attempted to start conference which has not been prepared (state=%d)
[WARN] Conference does not exist
Delaying stop on conference...
Calling stop on conference %@
Calling cancel on conference %@
[WARN] Attempted to cancel a conference that has already started connecting: %@
Setting remote invite dictionary from %@ to %@
Setting caller from %d to %d
Attempting to set state to %d, which precedes current state %d
Setting microphoneMuted to %d for %@
Setting sendingAudio to %d
Setting sendingAudioData to %d
Setting conferenceProvider videoPaused to %d
Setting sendingVideo to %d
State is %d, updating isVideoPausedToStart from %d to %d
Updating capabilities from: %@ to %@
Setting remoteVideoPresentationSize from %@ to %@
Setting remoteVideoPresentationState from %d to %d
Conference didStart timeout fired
Updating device role from %d to %d
conference=%@ didStartSession=%d error=%@
Successfully started session
Session is connected, setting videoPaused to expected value: %d
[WARN] Session is already past Connected state, not sending delegate started
Failed to start session. error=%@
didStopError=%@ callMetadata=%@
AVConference stopped in failure: %{public}@
Sending delegate bytesOfDataUsageChanged: %ld
didPauseAudio=%d error=%@
didPauseVideo=%d error=%@
Not setting sendingVideoExpected to nil since our state is %d
Video was set to didPauseVideo: %d sendingVideoExpected: %@. Setting sendingVideo to sendingVideoExpected
remoteVideoPaused=%d
remoteMediaStalled=%d
Server died for conference provider %@
Registering to handle call handoff activity type with dynamic identifier %@ for provider %@
Frontmost call is hosted here ...
... and it is an endpoint here ...
... and we are a secondary device ...
... using a broadcast activity with dynamic identifier: %@.
[WARN] ... but no dynamic identifier could be found (%d) or no handoff user info exists (%d). Not broadcasting frontmost call
... but we are a primary device. Not broadcasting frontmost call
... and it is being relayed elsewhere. Using a local activity
Beginning handoff activity %@ for call %@
Ending handoff activity: %@
Broadcasting suppress ringtone activity for declined call: %@
After conversation %@ was handed off elsewhere, re-registering for handoff advertisement for participant %llu so that it can be handed off back
Began app history activity %@ for call %@
Broadcasting suppress ringtone activity for call that suppressed its ringtone: %@
Broadcasting suppress ringtone activity for incoming call that started connecting: %@
[WARN] User activity manager aware of change to audio-video state (mic muted: %@, camera enabled: %@), but call didn't meet criteria (call is non-nil: %@, call is conversation: %@, call has groupUUID: %@, call is active: %@)
User activity manager aware of change to audio-video state (mic muted: %@, camera enabled: %@) for call backed by conversation with groupUUID: %@
[WARN] User activity manager aware of change to audio-video state (mic muted: %@, camera enabled: %@), but could not find conversation for call with groupUUID: %@
Received broadcast for activity type %d and destination ID %@. Suppressing ringtone due to remote suppression for call %@
Received broadcast for activity type %d but ignoring it because its destination ID (%@) does not match this ringing call's desination ID (%@)
[WARN] Cannot process received broadcast for conversation handoff activity type because it did not have a dynamic identifier set.
[WARN] User activity manager could not parse eligibility from dynamicIdentifier %@
%s: Updating handoff registration for conversation UUID %@
No more conversations, unregistering all conversation handoff dynamic identifiers
%@ isSilenceUnknownCallersEnabled: %d
%@ maxJunkLevel: %ld
Not a telephony call; call filter will allow call with identifier %@
%@ call does not have a valid handle, by definition this is an unknown caller call %@
%@ shouldFilterIncoming call=%@ unknownCaller=%d isSilenceUnknownCallersEnabled=%d shouldBlockJunk=%ld
Calling ADClientSetValueForDistributionKey() with key %@ and value %f
Asking BackBoard to set the proximity detection mode to (%u).
Proximity detection should be %d since isReceiver: %d, isSpeaker: %d, isVoiceOverRunning: %d
Proximity detection should be disabled; eligible audio call does not exist
Proximity detection should be disabled; video call exists
Proximity detection should be disabled; isInterfaceOrientationPortrait: %d, isProximitySensorCovered: %d
Handling proximity sensor covered changed to %d
VoiceOver is enabled and the proximity sensor is covered, changing the audio route from speaker to receiver.
VoiceOver is enabled and the proximity sensor is uncovered, changing the audio route from receiver to speaker.
Updating proximity sensor state; calls changed.
Updating proximity sensor state; sensor covered changed.
Updating proximity sensor state; audio routes changed.
TipKit: Logging Biome signal for phone away from face without speaker.
[WARN] Tried to get the call history identifier for this call (%@) but no conference ID was available (%@), we'll fall back to another method (GUID = %@). This call may now not sync properly between devices.
This chat's conferenceID and GUID are nil or empty, we cannot create a safe call history identifier
[WARN] Could not weak link notification string '%@'. Not observing notifications for it.
Calling endChatWithReason on chat %@ with reason %ld
Asked to end chat with UUID: %@, reason: (%ld) but could not find it
Using account %@
Inviting handle %@ excluding push tokens %@
Registering imav chat %@
Could not initiate FaceTime call - No chat returned for handle %@ with account %@
Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
Could not initiate FaceTime Call - Account %@ not registered
Legacy chat with matching UUID connected; attempting to fulfill pending answer call action %@
Legacy chat did not provide a connection date; Could not fulfill answer call action %@
[WARN] No pending answer call actions found with UUID: %@
Failing answer call action for chat because it ended before connecting: %@
Using call ended reason remote hangup because ended reason is %@
Using call ended reason answered elsewhere because ended reason is %@
Using call ended reason declined elsewhere because ended reason is %@
Using call ended reason unanswered because ended reason is %@
Using call ended reason failed because ended reason is %@
Incoming call was denied with error %@ so declining chat with IMAVResponseFilteredCall: %@
Calling acceptInvitation on chat %@
Not accepting invitation to chat %@ since it is already Connected
Calling endChat on chat %@
Calling setIsSendingAudio with %d for chat %@
Not holding chat %@ since it is not yet Connected
Calling setIsSendingVideo with %d for chat %@
Calling setRemoteVideoPresentationSize with %@ for call %@
Calling setRemoteVideoPresentationState with %ld for chat %@
Calling setRelayed with %d for chat %@
Calling setMuted with %d for chat %@
Creating CSDCallHistoryControllerXPCServer
XPC connection interrupted from client %@
XPC connection invalidated from client %@ for CSDCallHistoryControllerXPCServer
deallocing CallHistoryControllerXPCServer
invalidating CallHistoryControllerXPCServer
NOTIFYING CLIENTS TO CONNECT
recent calls deleted: %@
All recent calls deleted
Requesting remote active participants for cached conversation with UUID: %@
Setting audioEnabled to %d
Ignoring to set videoEnabled since conversation is relaying
Setting videoEnabled to %d
Setting screenEnabled to %d, screenShareAttributes: %@
Setting videoPaused to %d
Setting screenShareAttributes to %@
Error setting screenShareAttributes when screen is not enabled
Setting audioPaused to %d
Stopping session since local av mode is switching to none
Conversation UUID: %@ asked to register messages group association
Ignoring to set additional video representation since conversation is relaying
Setting additional video representation to %ld
Setting oneToOneModeEnabled to %d
Kicking previous participant on conversation UUID: %@ participant: %@
Ignoring splitSessionSecondary since we aren't joined into the conversation UUID: %@ state: (%tu)
Failed to return to HomeScreen %@
Adding participant: %@
Found member: %@ representing participant: %@
AddedParticipant %@ for member: %@ is representing our localMember
Removing active participant and replacing it with one with the same identifier but a newer AVC data blob.
New participant blob's audioVideoMode is different than our current audioVideoMode. AVModeUpdates need to happen with the explicit ParticipantUpdate message. Resetting to known audioVideoMode
[WARN] Conversation already contains participant with no change in AVC data: %@
Removing participants for member: %@ on conversation UUID: %@ participants: %@
Failed to find participant %@ on conversation %@
Removing participant with identifier: %lu  handle: %@
 Found matching handle %lu: %@
Removing splitSessionSecondary: %@
Leaving conversation because lightweightPrimary left on conversation UUID: %@ participant: %@ localMember: %@
Local participant %llu was associated with participant %@ who is now being removed. Clearing local participant association.
Remote participant %llu was associated with participant %@ who is now being removed. Clearing participant association for %llu.
No active remote participants left, requesting to move back to oneToOne=0
[WARN] removeParticipantWithIdentifier:fromHandle: Not removing participant handle (%@) didn't match, with identifier %lu: %@
[WARN] removeParticipantWithIdentifier:fromHandle: Could not find participant with identifier %lu: %@
Adding virtual participant: %@
Trying to add virtual participant for plugin %@ with different identifier %llu: %@
Removing virtual participant: %@
[WARN] Trying to remove virtual participant for plugin %@ with different identifier %llu: %@
[WARN] Could not find virtual participant for plugin %@: %@
conversation: %@ remove remoteMembers triggeredLocally: %d
UUID: %@ remove remoteMembers: %@
[WARN] No members were removed to conversation: %@
UUID: %@ groupUUID: %@ remoteMembers: %@ triggeredLocally: %d
UUID: %@ otherInvitedHandles: %@
UUID: %@ invitationPreferences: %@
Handle %@ should be considered for addition as an invited member handle if not kicked
Conversation UUID %@ already contains member with handle %@, filtering out.
[WARN] No new members were added to conversation UUID: %@
Updating member validation source for: %@ to source: %ld
Found member to update validation state: %@
We found an activity originated from now validated member %@ updating activity
Couldn't find member %@ to update validation source for
add pendingMembers: %@ triggeredLocally: %d
Conversation UUID %@ already contains pending member with handle %@, filtering out from addition list.
remove pendingMembers: %@ triggeredLocally: %d
Conversation with UUID %@ does not have pending member with handle %@, filtering out from removal list.
[WARN] Ignoring new link %@ as conversation link already set to %@
Link on conversation UUID %@ was already set to %@, but this setting allows for updates, setting the link name to %@, the expiration date to %@, and the invited handles to %@
leaveActivitySessionWithUUID: %@
[WARN] Dropping request to remove activitySession because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
Finding activitySession with UUID: %@ to present dismissal alert
Session dismissal alert for activitySessionUUID %@ success: %@
removeActivitySessionWithUUID: %@
Not launching screen sharing app
User chose to take no action
activitySession: %@
[WARN] Dropping new activitySession because Expanse features are disabled. Please upgrade to a later release to re-enable Expanse features.
[WARN] Dropping new activitySession because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
BundleID override: %@
Attempting to create Activity with trustedFromHandle: %@ on trusted lightweight member: %@. Overriding to lightweightPrimary. %@
isLightweightPrimaryInitiated: %d
Not launching app for locally started activity %@
Asked to create staged activitySession for activity: %@
[WARN] Failed to create staged activitySession since we can't replace an activitySession with a staged activitySession.
Successfully created staged activitySession: %@
Attempting to set staged activitySession: %@
Trusted from handle %@ not found in membership list for activitySession ID: %@ on conversation %@
Not launching app as we are not joined into this conversation
Not launching app as SharePlay is not allowed
[WARN] Activity with identifier %@ is missing application context.
Not launching app for system activity: %@
Not launching app as we are not in an eligible activitySession state: %@
Not launching app as the activitySession has already been joined: %@
Request to launch %@ for conversation with UUID: %@ allowing auto-launch: %@
Attempting to launch app in background w/ PiP
Launched pip for activity %@ error %@
Found locally initiated screen sharing activity session %@, ending session
Trying to setup new AVCSession without tearing down previous session first.
avcSessionCreationBlock
Joining CSDConversation self: %@ context: %@
GreenTea devices are not supported for this conversation with UUID: %@
Copying invitation preferences to locally-created conversation from join context: %@
Bypassing AVCSession creation because localMember is lightweight %@
Creating CSDAVCSession with transport token %@
This device is joining a U+1 FaceTime call to complete a handoff from a different participant, setting oneToOneModeEnabled to NO.
Created CSDAVCSession %@
Not joining IDS group session because wantsStagingArea is true, instead moving to preparing state
Failed to create CSDAVCSession
[WARN] Not joining conversation because it isn't waiting or preparing: %@
[WARN] Not sending local participant data, no AVCSession: %@
self UUID: %@ audioReady: %d audioPaused: %d audioEnabled: %d
[WARN] Not starting audio for conversation because it isn't joining/joined: %@
[WARN] Not starting audio for conversation because avmode is .none %@
self UUID: %@
Leaving CSDIDSGroupSession: %@
[WARN] Not leaving conversation because it isn't joining/joined: %@
Kicking member on conversation UUID: %@ member: %@
Aliased session %@ to %@ for bundle identifier %@
Not enforcing shareplay version check due to server over-ride
[WARN] One or more participant on %@ is on an older share play protocol %@ version %@
[WARN] Not joining IDS session as state (%tu) is not joining on conversation: %@
Sending U+1 join context to subset of participants: %@
idsSessionJoin
Starting %@
avcSessionStart
Skipped starting session since session start is already in progress %@
Skipped starting session since isJoined:%@ audioReady:%@ isRelaying:%@ isAVLess:%@ isLocalParticipantNormal: %@
[WARN] Timed out waiting for session to stop after %@, moving to waiting state and cleaning up.
Timed out waiting for conversation to leave, but it's not in state leaving (instead is in %i).
Timed out requesting AVC blob for participant with identifier: %@
Replacing existing recovery timeout for participant with identifier %@
Setting up AVC blob recovery timeout for participant with identifier %@
Cancelling in flight AVC blob recovery for participant with identifier %@
Pruning remote participants as necessary, current server identifiers: %@
_stableExpanseIdentifier %@ for %@ 
Checking if oneToOne->1 downgrade available with state: %tu oneToOneMode: %d remoteMembers.count: %lu activeRemoteMembersCount: %lu useDelay: %d
Screen sharing has ended but not requesting to move back to U+1 mode since localDowngradeAvailable:%d remoteDowngradeAvailable:%d
Delayed downgrade triggered, checking if we're still eligible
Screen sharing has ended and we only have 1 remote participant, requesting to move back to U+1 mode
Did not retrieve a route identifier for participant identifier %llu
Retrieved route identifier %@ for participant identifier %llu
didJoinGroup: %d error: %@
Joining conversation without AVC session for lightweight device
Failed to join group: %@
didLeaveGroupWithError: %@
CSDIDSGroupSession %@ failed to leave group for conversation UUID %@: %@
endedWithError: %@ reason: %d
Kicked from the conversation, cleaning up
Invalidating cached conversation: %@, no remote active participants were found.
Activating cached conversation with UUID: %@ since %lu remote participants were still found to be active.
IDSGroupSession for %@ did terminate unexpectedly, reporting conversation failure for %@
Requested audio/video mode changed for conversation %@ failed with error %@
We've changed participant types to type: %d but our AVMode is: %lu. Not performing client side interaction for mismatched types
Stopping session since local participant type is Lightweight avcSessionInProgress %@ avcSession: %@
Downgraded from AV -> AVLess, but didn't have AVCSession yet. Creating an AVCSession.
Rebroadcasting AVC data to other members of this group to since we transitioned to lightweight and setup a new AVCSession.
Starting session since local participant type is Normal
didReceiveKickedParticipantIDs: %@
When kicking participantID %@ we found participant %@ with no member in %@
updating kickedMembers to %@
updating pendingAllowedMembers to %@
[WARN] didReceiveKickedParticipantIDstype: %hu unexpected
Retrying kicked members: retries: %lu pendingKickedMembers: %@
Retrying allowed members: retries: %lu pendingAllowedMembers: %@
[WARN] Not retrying to kickMembers, max retry count (%lu) reached
[WARN] Kicking turned off on the server, resetting state
didReceiveDataBlob for participant: %@
didReceiveDataBlob adding csdConversationParticipant: %@
[WARN] Not processing didReceiveDataBlob because unable to create handle from URI: %@
AVCProviderEndReason=%d error.code=%d detailedError=%d
AVCProviderEndReason=%d, this should not happen
No error with a failed start from AVC using %d
Found expectedVideoEnabled: %@, updating value to match state
Found expectedAdditionalParticipantRepresentation: %@, updating value to match state
didStart: %d error: %@
Not in the joining state so not moving to joined
Failed to start CSDAVCSession: %@
CSDAVCSession failed to start while we're already leaving a U+1 call. Treat this as a leave and clean up the conversation
didDetectError: %@
Rebroadcasting AVC data to other members of this group to attempt to recover from error (last rebroadcast time was %f).
Not attempting to rebroadcast message since state was not in join (was %d)
CSDAVCSession didStopWithError: %@
AVCSession %@ stopped in failure for conversation UUID %@: %@
AVCSession %@ stopped for remote hangup. Ignoring this signal.
AVCSession %@ stopped, cleaning up IDSSession state
CSDAVCSession stopped for downgrade to AVModeNone, setting up new not started AVCSession
Setting GFT conversation back to default state of video=1
CSDAVCSession %@ server did disconnect for conversation UUID %@
Detected AVCSession server disconnect, but we're in AVLess. Re-creating an AVCSession and re-distributing blob.
changedLocalAudioEnabled=%d
Failed to set localAudioEnabled (%d): didSucceed (%d): error: %@
Audio was set to audioEnabled: %d self.expectedAudioEnabled.boolValue: %@. Setting audioEnabled to self.expectedAudioEnabled.boolValue
changedLocalVideoEnabled=%d
Failed to set localVideoEnabled (%d): didSucceed (%d): error: %@
[WARN] Skipping to set localVideoEnabled (%d) error: %@
Video was set to videoEnabled: %d self.expectedVideoEnabled.boolValue: %@. Setting videoEnabled to self.expectedVideoEnabled.boolValue
changedScreenEnabled=%d
Failed to set screenEnabled (%d): didSucceed (%d): error: %@
Screen was set to screenEnabled: %d self.expectedScreenEnabled.boolValue: %@. Setting screenEnabled to self.expectedScreenEnabled.boolValue
changedLocalAudioPaused=%d
Failed to set localAudioPaused (%d): didSucceed (%d): error: %@
Audio paused was set to audioPaused: %d self.expectedAudioPaused.boolValue: %@. Setting audioPaused to self.expectedAudioPaused.boolValue
changedLocalVideoPaused=%d
Failed to set localVideoPaused (%d): didSucceed (%d): error: %@
Video paused was set to videoPaused: %d self.expectedVideoPaused.boolValue: %@. Setting videoPaused to self.expectedVideoPaused.boolValue
changedOneToOneModeEnabled=%d
oneToOneModeEnabled is disabled because a 3rd participant that joined is replacing another participant for handoff
User requested videoPaused=true in a U+1 call, since we're moving out of U+1 state, setting videoEnabled=false for parity
changedBytesOfDataUsed=%ld
changedAdditionalVideoRepresentation=%ld
Failed to set additionalVideoRepresentation (%ld): didSucceed (%d): error: %@
sessionShouldReconnect=%@
Skipping reconnect since one to one mode is disabled
[WARN] Unknown participant with identifier: %llu
[WARN] All active participants in the call are not on minimum supported shareplay version
Conversation screen sharing about to change to screen enabled: %@ conversation: %@ 
 participant: %@
[WARN] Stopping screen on local device since one of the remote participants sharing their screen %@
Resetting non screen sharing sessions as one of the remote participants started screen sharing %@
[WARN] Stopping screen on local device capture failed to start for conversation UUID: %@
[WARN] Unknown participant with identifier: %llu activeRemoteParticipants: %@
Updating screenEnabled on all remote participants to: %@
sharePlayAllowedStateChanged: %@
Stopping screen on local device since route does not support share play
Leaving activity session for screen sharing since route does not support share play
user requested to switch to speaker route
Did get session unjoined callback startDate %@ endDate %@ session %@
Setting appLaunchState to needsLaunch
CSDConversation setting appLaunchState to needsLaunch %@
CSDConversation received activity session removed: %@
Setting the application state to background for joined activity session: %@
CSDConversation associated scene changed for %@
Ignoring %@ message because we already have a call with this uniqueProxyIdentifier: %@
We already have a call for this %@ message: %@. Updating it with new values
Creating new call for %@ message
[WARN] Ignoring %@ message because no call exists for %@ and the message is not from the paired device
[WARN] Could not find call with uniqueProxyIdentifier %@. All current calls: %@
Call answered elsewhere message had no uniqueProxyIdentifier set. Using current calls
Resetting call %@ with protoCall %@
Not resetting call %@ with protoCall %@ because they are equal
Creating new call with protoCall %@
Existing call no longer exists and is not sending: %@
handleUpdateRemoteCallStateMessageFromHost %@
Updating call %@ with protoCall %@
Not updating call %@ with protoCall %@ because they are equal
[WARN] Received %@ message, but we already have some calls
Ignoring %@ because messageSendTime (%f) <= call.remoteUplinkMutedSetTime (%f)
Pulling remotely hosted call: %@
Failed to prepare conference for pull message %@ and call %@
Fetching localSenderIdenity for localSenderIdentityAccountUUID %@
Replacing hardPauseDigits '%@' with '%@' since protocolVersion is %d
Replacing soundRegion %ld with %ld since protocolVersion is %d
Created pause digits queue: %@
Setting disconnected reason to dial failed because call is outgoing but has not started outgoing
Setting disconnected reason to remote hangup because ended reason is %ld
Setting disconnected reason to remote hangup because call has started connecting and ended reason is %ld
Setting disconnected reason to remote hangup because outgoing call has not started connecting and ended reason is %ld but call is a telephony call
Setting disconnected reason to remote unavailable because outgoing call has not started connecting and ended reason is %ld
Setting disconnected reason to answered elsewhere because ended reason is %ld
Setting disconnected reason to declined elsewhere because ended reason is %ld
Setting disconnected reason to handed off because ended reason is %ld
Setting disconnected reason to user busy because ended reason is %ld
Setting disconnected reason to call failed because failure reason is %ld
Setting disconnected reason to account unsupported because failure reason is %ld
Setting disconnected reason to network unsupported because failure reason is %ld
Setting disconnected reason to provider crashed because failure reason is %ld
Setting disconnected reason to media start failed because failure reason is %ld
Setting disconnected reason to media server crashed because failure reason is %ld
Setting disconnected reason to other secondary device in use because failure reason is %ld
Setting disconnected reason to kicked because failure reason is %ld
Setting disconnected reason to rejected because failure reason is %ld
Setting disconnected reason to invalid conversation link because failure reason is %ld
Setting disconnected reason to conversation links disabled because failure reason is %ld
Setting disconnected reason to no destinations available because failure reason is %ld
Setting disconnected reason to call failed because ended reason is %ld
Failed to find a call source to dial with for dial request: %@
CSDProviderCall joinConversationWithRequest: %@
LMI: FT Provider: %@ Sender identities: %@
Join request specifies invitation preferences: %@
attributes: %@
AVAudioSession muteSessionInput: %d for %@
Failed AVAudioSession muteSessionInput error: %@
for call: %@ pauseDigitsQueue: %@
[WARN] Next pause digits are not hard pause
[WARN] No next pause digits exist
for call: %@ key: %d
for call: %@ remoteVideoPresentationSize: %@
for call: %@ remoteVideoPresentationState: %d
Dequeueing next pause digits
Sending pause digits: %@ type: %ld
Found queued soft pause digits: %@
for pauseDigitsQueue: %@
[WARN] Symbolic link found for URL %@
[WARN] Could not determine source file for URL %@
[WARN] Not copying generic image
[WARN] Could not determine destination file for URL %@
Creating sandbox extension directory '%@' failed with error %@
Copying URL '%@' to filename '%@'failed with error %@
Releasing sandbox extension handle
Break before make timeout: %lfs
Removing image files failed with error %@
Determined wants break before make is %@ (supportsSimultaneousVoiceAndData: %@, nonWifiFaceTimeAvailable: %@, wiFiActiveAndReachable: %@) for call %@
Could not determine whether device wants break before make; could not obtain sender identity capabilities for call %@
Could not determine whether device wants break before make; could not obtain local sender identity for call %@
Call started outgoing: %@
Disconnecting video call because another call started outgoing: %@
Disconnecting call using the baseband because a video call started outgoing and wantsBreakBeforeMake=YES: %@
All calls ended. Setting uplink and downlink muted to NO
Call started connecting: %@
Leaving converstion since we have call that is getting connected: %@
%@ is handling %@
Pulling relaying calls from client since one to one mode changed for relaying calls
Call upgraded to video: %@
Video call connected: %@
Requesting to disconnect all calls besides: %@
Disconnecting call because it is not compatible with call %@: %@
Ending current active call %@ because call %@ is going to go active
Reporting emergency call to screen time
There was an error enabling emergency mode. Enabled successfully (%d) Error: %@
Posting CLTM notification %@ and setting state to %llu
Requesting to pull call %@ because its continuity state is different from call %@
Disconnecting call %@ because its continuity state is different from call %@
An endpointIDSDestination %@ is present for call %@ so pushing all hosted calls to that destination
An endpointRapportMediaSystemIdentifier="%@" or endpointRapportEffectiveIdentifier="%@" is present on dial request for call %@ so attempting to pick matching route
Setting up break before make timeout for call: %@
Disconnecting call because video call is still sending and break before make timeout fired: %@
CarPlay is not connected; muting uplink for RTT call %@
CarPlay is connected; unmuting uplink for RTT call %@
Setting uplink muted for TinCan call %@
Starting ringing timer for call with identifier %@
Exceeded ringing duration of %llu seconds; disconnecting call with identifier %@
[WARN] Store demo mode enabled. Limiting certain calls
Starting call duration limit timer as we are in a retail environment
Stopping call duration limit timer
Disconnecting restricted calls because the limited call duration timer fired: %@
Found active call needing hold music: %@
Hold music enabled - call is active so muting uplink and downlink
Hold music disabled - unmuting uplink and downlink
Disconnecting all calls since we have an AVLess conversation that is Joined: %@
handleUserInteractionWithBlock: shouldOpenInCallService: %d shouldDisplaySystemCallControls: %d callUUID: %@
updating descriptor old: %{public}@ new: %{public}@
TUOpenURLWithCompletion result: %@, error: %@
Encountered error while opening URL: %@
Punching out to app with bundle identifier %@
Successfully launched application with bundle identifier %@
Attempt to open application with bundle identifier %@ failed with error %@
XPC connection invalidated from client %@
Approval client enabled: %d, %@
Client deregistered itself as split-session approver
Ignoring deregistration; sender is not current approver
No session approval clients registered
Split session approval client: %@
Approval client unexpectedly nil!
Retrieving subscription information failed with error %@ for %@.
added service provider uuid=%@ carrierPhoneNumbers=%@
Retrieved carrier phone number '%@' for subscription %@
Retrieving carrier phone number for subscription %@ failed with error %@
Carrier bundle changed for subscription context %@.
Subscription info changed
Creating IDSGroupSession with options: %@
preferences: %@
options: %@
participantDestinationIDs: %@ contextData: %@ triggeredLocally: %d
participantDestinationIDs: %@ contextData: %@ requiredCapabilities: %@ requiredLackOfCapabilities: %@ triggeredLocally: %d
Sending participantData: %@
session: %@
session: %@, options: %@
session: %@, requestDataCryptor: %@
session: %@, requestEncryptionKeyForParticipants: %@ topic: %@
session: %@, setRequiredCapabilities: %@ requiredLackOfCapabilities: %@
session: %@, removeRequiredCapabilities: %@ requiredLackOfCapabilities: %@
session: %@, addAliasesToConversationContainer: %@ salt: %@
session: %@, participantIDForAlias: %llu salt: %@
session: %@ doesn't support async participantID fetching, falling back to sync form.
session: %@ updating participant type: %hu destinations: %@
self: %@ not running pending blocks yet because self.hasStarted=%d self.hasReceivedAccept=%d self.isInitiator=%d
self: %@ running block %@ with transport %@ and %@ accept payload data
self: %@ pending block on transport availability: %@
[WARN] Transport availability block timed out: %@
sendData self: %@
Session %@ is not connected and waitUntilConnected is YES. Pending data
Session %@ is not connected but waitUntilConnected is NO. Sending data
Session %@ is connected. Sending data
Session %@ is ending/ended. Dropping data on the floor
self: %@ destinations: %@
Session %@ is waiting. Sending data
Session %@ is not waiting. Dropping data on the floor
self: %@ data: %@
Setting session %@ to ending for prepareToEnd
Not setting session %@ to ending for prepareToEnd because session is not connected
Received invitation ACCEPT with data for session %@ from (fromID=%@) destination %@ device %@
Received invitation CANCEL with data for session %@ from (fromID=%@) destination %@ device %@
Received invitation DECLINE with data for session %@ from (fromID=%@) destination %@ device %@
Received session MESSAGE for session %@ from (fromID=%@) destination %@ device %@
Recent calls deleted: %@
thumperCallingAllowedOnDefaultPairedDeviceDefault keyExists: %d isAllowed: %d
Setting %@ default to %d
Error synchronizing NPS defaults: %@
Dismissing Thumper available notification on secondary device for account ID %@
Displaying Thumper enabled disclaimer on secondary device for account ID %@
Dismissing Thumper enabled disclaimer on secondary device for account ID %@
Could not obtain Thumper account identifier for sender identity UUID %@ from data source capabilities state %@
Comparing cached Thumper capabilities state %@ with data source capabilities state %@
Should show Thumper available notification for account ID %@
Default paired device unique ID was %@ and is now %@
Check if devices should be enrolled now that the default paired device changed.
Checking to see if any devices have been removed from this iCloud account.
Device with the uniqueID %@ will be unpaired from Thumper because it is no longer on the IDSService.
%@ is handling add capabilities for sender identity UUID %@
Thumper calling preferences update initiated by add capabilities for sender identity UUID %@
Skipping Thumper preferences update; Thumper capabilities state does not exist for UUID %@
%@ is handling remove capabilities for sender identity UUID %@
Thumper calling preferences update initiated by remove capabilities for sender identity UUID %@
Skipping Thumper calling preferences update; unknown context info found for sender identity UUID %@
%@ is handling change Thumper calling capabilities for sender identity with UUID %@
Show a reminder to the user that thumper is now available.
User requested to Turn On Thumper calling
[WARN] Not adding user notification because we are already displaying one
Removing existing reminder notification
Show a disclaimer to the user about their emergency address info now that thumper is enabled.
Emergency Address disclaimer: Preferences button pressed, open URL (%@).
Removing existing emergency address disclaimer
Archiving Thumper capabilities state object failed with error %@
Unarchiving Thumper capabilities state object failed with error %@
Archived object was of unexpected class %@: %@
Prefereces object was of unexpected class %@: %@
Initializing %@
FaceTime Audio availability is %ld. FaceTime Video availability is %ld
Initialized %@
Active accounts changed for service %@: %@
Received caller ID changed notification: %@
Received service availability changed notification: %@
Received devices changed notification: %@
FaceTime iCloud account is %@ (isActive=%d, profileID=%@) and relay iCloud account is %@ (isActive=%d, profileID=%@)
FaceTime caller ID %@ is not a valid outgoing relay caller ID
Attempting to find a valid outgoing caller ID in set of available outgoing caller IDs %@
Selected outgoing caller ID %@ from list of available outgoing caller IDs %@
Could not automatically select an outgoing caller ID; multiple telephone numbers are listed in the set of available outgoing caller IDs %@
Attempting to find a valid outgoing caller ID in list of vetted account aliases %@
Selected outgoing caller ID %@ from list of vetted account aliases %@
Could not automatically select an outgoing caller ID; multiple telephone numbers are listed in the set of vetted account aliases IDs %@
Outgoing Caller ID is %@
streamPreferences: %@
XPC connection invalidated from client %@ for CSDConversationProviderManagerXPCServer
deallocing ProviderManagerXPCServer
invalidating ProviderManagerXPCServer
conversationProviderForIdentifier: %@
generatePseudonymHandleForConversationProviderURI: %@
renewPseudonymHandle: %@
revokePseudonymHandle: %@
doesHandleCorrespondToConversationProvider: %@
registerForCallbacksForProvider received over XPC with providerIdentifier: %@
registerConversationProvider received over XPC with provider: %@
callProviderIdentifier: %@
dialRequest: %@
Could not determine UUID for FaceTime app bundle identifier %@
Setting disconnected reason to call failed because invitation was sent but no push tokens were available to receive the invitation for call %@
Setting disconnected reason to call failed because CSDIDSDualSession ended reason is %ld for call %@
Using call ended reason answered elsewhere because CSDIDSDualSession ended reason is %ld
Using call ended reason declined elsewhere because CSDIDSDualSession ended reason is %ld
Using call ended reason unanswered because CSDIDSDualSession ended reason is %ld
Using call ended reason remote ended because CSDIDSDualSession ended reason is %ld
Setting disconnected reason to call failed because CSDAVConference ended reason is %ld for call %@
Using call ended reason remote ended because CSDAVConference ended reason is %ld
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@
[WARN] Disabling key exchange because %@ default is set to YES
videoAspectRatioDescriptor: %@
Canceling session
Declining session
end self: %@
Stopping conference
Ending session
for call %@
Setting isSendingAudio to %d for chat %@
Conference has not been created yet. Updating shouldStartAudioPaused to %d
Setting isSendingAudioData to %d for chat %@
Setting isSendingVideo to %d for chat %@
Conference has not been created yet. Updating shouldStartVideoPaused to %d
Setting relaying from %d to %d for chat %@
transport: %@
sessionStarted: %@
Not starting connection because conference state is %d
session %@ invitationSentToPushTokens %@ shouldBreakBeforeMake %d
session %@ endedWithReason %d
session %@ receivedInvitationAcceptWithData %@
[WARN] Ignoring invitation accept since chat is incoming %@
[WARN] Ignoring invitation accept since there is no remote from ID set on the session.
Dropping invitation accept since there is no remote push token provided.
Dropping invitation accept since the remote push token was not one of the ones we invited.
[WARN] Ignoring incoming accept since accompanying message was nil
[WARN] Ignoring incoming message since message with type=%@ was not invite.
Error while creating UUID from protoUUID: %@
[WARN] Not setting upgradeSessionUUID for message: %@ self.upgradeSessionUUID: %@
Not starting connecting because session state is %d and conference state is %d
session %@ receivedInvitationDeclineWithData %@
session %@ receivedInvitationCancelWithData %@
session %@ receivedData (data is %@)
message: %@
[WARN] First frame not received after %f seconds for %@
reason=%ld error=%@
Remote media stalled for chat: %@. Reconnecting IDS session.
Device first unlock block invoked, initializing CXCallDirectoryManager...
XPC activity checked in. Criteria: %@
Setting activity state to XPC_ACTIVITY_STATE_CONTINUE
Error setting activity state to XPC_ACTIVITY_STATE_CONTINUE
Beginning daily maintenance with activity %@
Successfully compacted store
Error compacting store: %@
Setting activity state to XPC_ACTIVITY_STATE_DONE
Error setting activity state to XPC_ACTIVITY_STATE_DONE
Error synchronizing call directory extensions: %@
Successfully synchronized call directory extensions
Extensions changed for Call Directory NSExtensionManager %@, but we do not have a CXCallDirectoryManager (perhaps because device is not yet unlocked) so cannot synchronize
isDestinationIDAllowedThroughDoNotDisturb: provider=%@
isDestinationIDAllowedThroughDoNotDisturb: bundleID=%@
isDestinationIDAllowedThroughDoNotDisturb: eventDetails=%@
[WARN] Error encountered resolving behavior via DND. Defaulting isDestinationIDAllowedThroughDoNotDisturb to YES. error=%@
Handling %@ by preparing connected sessions to end
Handling %@ by ending ending sessions
CSDMessagingCallMessage could not be read
Handling %@ with message: %@ latency: %llu
CSDMessagingCallMessage is of unsupported type: %d
Updating dialingIDSDevice using device list %@
A paired device exists, so using that as the dialing device: %@
[WARN] We found two devices with matching linkedUserURIs (arbitrarily choosing the first): %@ and %@
A device exists with a linkedUserURI that matches Caller ID %@, so using that as the dialing device: %@
[WARN] Could not find a dialingIDSDevice. No paired devices exist and no devices that support phone calls and have a linkedUserURI for %@ exist.
Could not retrieve local invite dictionary for message: %@
(IDSMessaging Host->Client) sendIncomingCallMessageToClientForCall: %@
Call cannot be answered. Only notifying the paired device
[WARN] Failed to prepare conference for call %@. Not sending incoming call message to relay clients
Not sending out incoming call invitation because call is no longer ringing: %@
(IDSMessaging Host->Client) sendCallDialedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallAnsweredElsewhereMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallDisconnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallConnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendResetWantsHoldMusicMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallDisplayContextMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateFailureExpectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateSupportsEmergencyFallbackToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateRemoteUplinkMutedCallMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateSupportsTTYWithVoiceCallMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallModelMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDeviceUnavailableMessageToClient
(IDSMessaging Host->Client) sendPullRelayingCallsMessageToClient
(IDSMessaging Host->Client) sendResetStateMessageToClient
(IDSMessaging Host->Client) sendHardPauseAvailabilityMessageToClientForState %d digits: %@
(IDSMessaging Host->Client) sendUpdateRemoteCallStateMessageToClient
(IDSMessaging Host->Client) sendCallStartedConnectingMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDialCallFailedForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendDialCallFailedForScreenTimeForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendPushCallsMessageToClientDestination: %@
Allowing call: %@ to be pushed to destination: %@
Skipping call: %@ to track for pushing to destination: %@
Found no calls to send sendPushCallsMessageToClientDestination
(IDSMessaging Host->Client) Sending UpdateCallContext message: %@
(IDSMessaging Host->Client) sendNeedsManualInCallSoundsChangeMessageToClientForCall: %@
(IDSMessaging Host->Client) sendInvitationSentMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateRoutesMessageToClientForRoutes: %@
(IDSMessaging Client->Host) sendDialCallMessageToHostForCall: %@
No dialing IDS device found. If we aren't already in a session, this dial call attempt will fail.
Failed to prepare conference for call %@. Disconnecting call with conference failed
Not sending out dial call invitation because call is no longer sending: %@
(IDSMessaging Client->Host) sendAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendUnholdCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendGroupCallMessageToHostForCall: %@ otherCall: %@
(IDSMessaging Client->Host) sendUngroupCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendSwapCallsMessageToHost
(IDSMessaging Client->Host) sendEndActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendEndHeldAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCurrentCallAndActivateHeldToHost
(IDSMessaging Client->Host) sendDisconnectAllCallsToHost
(IDSMessaging Client->Host) sendSendHardPauseDigitsMessageToHost
(IDSMessaging Client->Host) sendRequestCallStateMessageToHost
(IDSMessaging Client->Host) sendPullCallsMessageToHost
[WARN] Failed to prepare conference while pulling calls
(IDSMessaging Client->Host) sendPushRelayingCallsMessageToHostForSourceIdentifier: %@
(IDSMessaging Host->Client) sendUpdateRemoteUplinkMutedCallMessageToHostForCall: %@
(IDSMessaging Host->Client) sendPickRouteMessageToHostForRoute: %@
(IDSMessaging Client<->Host) sendSetTTYTypeCallMessageForCall: %@ ttyType: %d
(IDSMessaging Client<->Host) sendSetUplinkMutedCallMessageForCall: %@ uplinkMuted: %d
(IDSMessaging Client<->Host) sendSuppressRingtoneMessageForCall
(IDSMessaging Client<->Host) sendUpdateSystemVolumeForCall: %@
[WARN] We determined that device is null and destination: %@ is not guest. Ignoring incoming message: %@
Handle incoming %@ message: %@
[WARN] We determined that device: %@ cannot process messages for provider %@. Ignoring incoming message: %@
[WARN] Screen Time restricted the call for dial call message with destinationID %@ and provider: %@ is emergency: (%d)
[WARN] Ignoring %@ relay message since our device does not suppport processing messages of that type.
Messaging device can't receive relayed calls ...
... and we were told to decline the session invite. Declining incoming %@ message: %@
... and we were told not to decline the session invite. Ignoring incoming %@ message: %@
[WARN] Setting should ignore session to YES for %@ message because message is from a guest destination and this device is not an AudioAccessory
Query result: %@ for handle: %@ provider: %@
[WARN] Setting should ignore session to YES because TUICFInterface allowCall = NO for destinationID %@ and provider %@
[WARN] Setting should ignore session to YES because a call exists with sending status: %@
[WARN] Setting should ignore session to YES because screen time filtered message for destinationID %@ and provider %@ with emergency (%d)
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is Telephony, and isDirectTelephonyCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is FaceTime Audio, and isDirectFaceTimeAudioCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is FaceTime Video, and isDirectFaceTimeVideoCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is TinCan, and isDirectFaceTimeAudioCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because no calls exist with an endpoint on the current device: %@
Launched by IMDaemon notification
Launched by application installed notification
Launched by application uninstalled notification
Could not create notification for XPC event %@
Caught SIGINFO. Dumping debug info.
Caught SIGUSR1
Caught SIGUSR2
Created call center: %@
Performing user configuration migration
Did not find default to enable LivePhotoXPCService - using old moments stack
Initialized CSDDaemon
Calling xpc_transaction_exit_clean() due to language change
failed to initialize temporary directory (%d): %s
failed to resolve temporary directory (%d): %s
User configuration changed
Used country code '%@' to determine international phone number representation: %@
Determined that invite should be %@ - (isWiFiAvailable=%d isWiFiAllowed=%d isCellularDataAvailable=%d isCellularDataAllowed=%d shouldOverrideNetworkAsAvailable=%d)
Invite received for service %@ account %@ from (fromID=%@) with context: %@
Recieved pending message of type %ld
Incoming call was denied with error %@ so ignoring chat: %@
Not handling pending message of type: %ld
Invite received for session %@ account %@ from (fromID=%@) with data: %@
Declining this invite because we found a sending chat with the same destination: %@
Incoming call was denied with error %@ so declining chat: %@
Ignoring incoming invite since shouldAcceptIncomingInvite is %d
Ignoring incoming invite since message with type=%@ was not an invite.
[WARN] Ignoring incoming invite since accompanying message was nil
provider: %@
Calling answer on chat %@
Not accepting invitation to call %@ since it is already Connected
Calling end on chat %@
Setting sendingAudio to YES for chat %@
Setting sendingAudio to NO for chat %@
Chat with matching UUID connected; attempting to fulfill pending answer call action %@
Chat did not provide a connection date; Failing answer call action %@
Failing answer call action for call because it disconnected before connecting: %@
[WARN] called for session %@ that was not the initiator (%d) or that already had a version set (%d)
sendInvitation self: %@
Session %@ is waiting. Sending invitation
Session %@ is not waiting. Not sending invitation
acceptInvitation self: %@
Session %@ is waiting. Accepting invitation
Session %@ is not waiting. Not accepting invitation
cancelInvitation self: %@
Session %@ is waiting. Canceling invitation
[WARN] Asked to cancel invitation with non-nil data and a concrete cancel reason, but that combination is unsupported
Session %@ is not waiting. Not canceling invitation
declineInvitation self: %@
Session %@ is waiting. Declining invitation
Session %@ is not waiting. Not declining invitation
reconnectSession self: %@
Session %@ started (shouldUseSocketForTransport: %d socket: %d, destination: %@)
Received invitation SENT for session %@ with tokens %@ shouldBreakBeforeMake %d
Session %@ ended with reason %d: %@
Session %@ appears to have ended with an unanswered reason: %d
Session %@ appears to have ended with a local hangup reason: %d
Session %@ appears to have ended with a remote hangup reason: %d
Session %@ appears to have ended with an accepted elsewhere reason: %d
Session %@ appears to have ended with a declined elsewhere reason: %d
Session %@ appears to have ended with a fatal reason: %d
Session %@ appears to have ended due to mismatched networks reason: %d
Received invitation ACCEPT with data for session %@ from %@
Received invitation CANCEL with data for session %@ from %@
Received invitation DECLINE with data for session %@ from %@
Received session MESSAGE for session %@ from %@
Found matching account: %@ for uuid: %@
Found matching account: %@ for uuid: %@ but it was not active and cannot be used for FaceTime.
[WARN] Server bag does not support quick relay
Server bag is not loaded. Assuming we can make a FaceTime call over quick relay
Starting FaceTime IDS chat using account: %@ destinations: %@ options: %@
Cannot start FaceTime IDS chat using handle %@ because IDS destination was '%@'
Cannot start FaceTime IDS chat using service %@ because account is not active: %@
Tried to make an outgoing call when we already had a ringing call with the same destination: %@
Requesting transaction to answer already-ringing call
Requested transaction to answer already-ringing call with UUID %@ failed with error %@
Successfully requested transaction to answer already-ringing call
[WARN] Not attempting to use IDSSession for outgoing FT call because server bag does not allow quick relay invitations
[WARN] Found a chat to upgrade: %@
Unable to convert to remoteIDSToken: %@
Unable to find existing chat for conversation: %@
Found existing chat: %@ for conversation: %@
[WARN] Failing action %@ we determined that chat %@ cannot be upgraded.
%@ Auto-upgrading because chatToUpgrade is %@, isConnected: %d, isVideo: %d, isSendingVideo: %d, isSendingAudio: %d isChatPendingUpgrade: %d
Upgrading chat: %@
Ending chat that is being upgraded: %@
[WARN] Could not find chat with UUID %@. All chats: %@
Found chat with UUID %@. Ending it: %@
Matching sender identities %@ to IDS accounts %@
Updating FaceTime provider with configuration %@
service: %@ activeAccountsChanged: %@
Ignoring %@ because messageSendTime (%f) <= call.uplinkMutedSetTime (%f)
[WARN] Ignoring received request action message because it has a request action type we don't know how to handle: %@
transferFileAtURL: %@, destinations: %@
placing unzip results into folder %@
new directory urls: %@, unzippedDirectoryURL: %@
Error retrieving contents of directory at URL %@: %@
temporaryClientFileURL: %@, destinations: %@
Sending resource at URL %@ to destinations %@ with metadata %@
Successfully started sending resource with identifier %@
Failed to start sending resource with identifier %@: %@
%@ doesn't exist at client file url: %@
incomingResourceURL: %@ metadata: %@ fromID: %@
Copied resource to temporary URL: %@
successfully sent file with identifier: %@
failed to send file with identifier: %@, error: %@
[WARN] Unexpected nil clientFileURL for service: %@, account: %@, identifier: %@, didSendWithSuccess: %d, error: %@, clientFileURLByIdentifier: %@
Failed to copy URL at %@ to %@: %@
Failed to create directory at URL %@: %@
Error moving url %@ to %@: %@
Deleted contents at URL: %@
Failed to delete contents at URL %@: %@
Zipping directory at URL: %@, output to: %@
Error zipping directory at URL %@ to output URL %@
operation: %ld, inputURL: %@, outputURL: %@
Error occurred during IMFileCopierOperation type %ld on inputURL %@ and outputURL %@
completed operation: %ld, inputURL: %@, outputURL: %@
deleting temporary file at URL: %@
Calling fetch completion block for call source with identifier %@
Waiting for call source with identifier %@
[WARN] Timed out waiting for call source with identifier %@ to check in
[WARN] Couldn't identify device type based on model identifier (%@)
Enabling relay calling on secondary device %@.
Activating Thumper calling on secondary device %@ for telephony subscription with UUID %@.
User notification has been completed with response %lu and entered PIN %@
Showing service confirmation dialog to user
Requesting pin from iPhone
Canceling pin request from iPhone
PIN code entered with success=%d cancelled=%d
Device Pin Exchange received an incoming approval request
[WARN] We received an incoming pin code alert from a non-telephony device: %@
User tapped cancel on the Pin Display Alert
Request for pin exchange failed
[WARN] Ignoring request to group call because it is already grouped: %@
[WARN] Ignoring request to ungroup call because it isn't grouped: %@
Setting uplinkMuted to %d for call %@
Started conference successfully for answered relay call %@
[WARN] Failed to start conference connection when answering call %@: %@
Conference connection stopped (cleanly=%d) for answered call %@: %@
Started conference successfully for dialed relay call %@
[WARN] Failed to start conference connection when dialing call %@: %@
Conference connection stopped (cleanly=%d) for dialed call %@: %@
Started conference successfully for pulled relay call %@
Failed to start conference connection when pulling call %@: %@
Conference connection stopped (cleanly=%d) for pulled call %@: %@
[WARN] Ignoring request to hold call because it is already held: %@
[WARN] Ignoring request to unhold call because it isn't held: %@
Entitlement for key '%@' is non-nil but is of class %@ rather than an NSArray (%@), so assuming process %@ has no entitlements
Failed to grab assertion for process %@, reason: %@
[WARN] Cannot create emergencyTUHandle from CSDMessagingHandle %@
[WARN] Cannot create emergencyTULabeledHandle from CSDMessagingLabeledHandle %@
Received acknowledgement for message with identifier: %@. Removing from waiting messages.
[WARN] Received acknowledgement for unknown message with identifier: %@
Received successful didSend for message with identifier %@ using account %@
Received unsuccessful didSend for message with identifier %@ using account %@: %@
Incoming message of type %@ from destination %@ device %@: %@
[WARN] Received message %@ from device %@ but it is not the default paired device
[WARN] No device found for fromID %@. All devices: %@
[WARN] Removing IDSSendMessageOptionForceLocalDeliveryKey key from sendMessage options because pairedDeviceUniqueIDOverride exists
Not attempting retry since message is no longer waiting for acknowledgement: %@
[WARN] Not attempting retry since we are out of retry attempts for %@ message with identifier: %@
Retrying message send with identifier: %@
Sending %@ message with identifier %@ and options %@ to destinations %@
identifier %@ message %@
Successfully sent %@ message
Setting up reliable message delivery for %@ message with identifier: %@ and retry attempts left: %lu
Failed to send %@ message: %@
[WARN] No paired device, so unable to send message %@
photoURL: %@ videoURL: %@
saved photo with localIdentifier: %@ error: %@
saveVideoWithURL: %@
Saved video with localIdentifier: %@ error: %@
Processing delayed actions:%@
Not processing delayed actions because we no longer have a call
providerDelegate: %@ callUUID: %@ dateStartedConnecting: %@
Ending call since dataSource is not tracking any call for callUUID: %@
providerDelegate: %@ callUUID: %@ dateConnected: %@
providerDelegate: %@ callUUID: %@ dateEnded: %@ endedReason: %ld failureContext: %@
Ending call with UUID %@ on other provider delegate %@ because ended reason was %ld
providerDelegate: %@ transaction: %@
providerDelegate: %@ ending callUUID %@
[WARN] action: %@
modernFTDestinations: %@
gftOneToOneDestinations: %@
Created join call action: %@ for gftOneToOneDestinations: %@
Can't perform start call action since queries did not return any destinations
Skipping to invite remote destinations since we don't have a call tracking any longer
Invited push tokens via IDS: %@ wasCanceled: %d
No longer handling call with UUID %@, requesting end
Could not initiate FaceTime call - No IDS or IMAV call returned for handle %@
Not sending IMAV invites because IDS session was canceled
Perform join call with action UUID: %@
Failing join call action since it does not meet join call action requirements
Failing join call action since we are already pending a join on this same call UUID elsewhere.
Failing join call action isVideo: NO and videoEnabled: YES
Updated to action: %@
Found a IMAV chat that is being tracked for action: %@
Created start call action: %@ for modernFTDestinations: %@
Can't perform join call action since queries did not return any destinations
Sending JoinCallAction to FaceTimeConversationProviderDelegate- action: %@
Sending JoinCallAction to CSDGFTServiceConversationProviderDelegate- action: %@
[WARN] No provider delegate is managing call for action %@
Delaying action %@
Asked to deliver voip token %@ to application %@
Asked to deliver message %p to application %@
[WARN] Message transport type is unknown; cannot enqueue message %@
Delivering voip token %@ to application %@
Pending VoIP token delivery until a connection exists
Delivering %lu network extension payload(s) to application %@
Pending Network Extension payload deliveries until a connection exists
Delivering %lu VoIP payload(s) to application %@
Pending PushKit VoIP payload deliveries until a connection exists
Invalidating process assertion for bundle identifier %@ from completion handler
[WARN] Message transport type is unknown; cannot deliver message %@
[WARN] InCallService has multiple process identifiers: %@
InCallService process state is now %ld
Initialized inCallServiceProcessState to %ld
Started tracking SpringBoard process with PID %@
SpringBoard process has changed PID from %@ to %@
conversation: %@ activitySessions.count: %lu
sendingCall %d activeCall %d heldCall %d disconnectingCall %d ringingCall %d bargeCall %d
resolvedAVLessConversation groupUUID: %@
callsChangedForCallCenterObserver
%s: Updating status bar triggered by removedActiveConversation for conversation UUID %@
%s: Updating status bar triggered by addedActiveConversation for conversation UUID %@
%s: Updating status bar triggered by stateChangedForConversation for conversation UUID %@
%s: Updating status bar triggered by activitySessionsChangedForConversation for conversation UUID %@
%s: Updating status bar triggered by activeRemoteParticipantsChangedForConversation for conversation UUID %@
%s: Updating status bar triggered by localVideoToggledForConversation for conversation UUID %@
%s: Updating status bar triggered by handoffEligibilityChangedForConversation for conversation UUID %@
Setting muted to %d for %@
[WARN] setMuted:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Setting sending audio to %d for %@
[WARN] setSendingAudio:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Asked to prepare conference connection %@ remoteInviteDictionary %@
Not preparing a new conference because another conference already exists: %@
Attempted to prepare a new conference connection with the same identifier as an existing conference connection: %@
Asked to start conference for identifier %@
We already have an active conference. Invoking this conference connection's didStart immediately
Did not find conference connection to start for identifier %@. All conference connections: %@
Asked to send data to conference for identifier %@
Asked to update conference for identifier %@ with isUsingBaseband=%d disableAudio=%d
Updating device role for identifier %@ to %d
Did not find conference connection for identifier %@. All conference connections: %@
Setting conference connection active: %@
Asked to prepare to stop conference for identifier %@
Pausing audio and setting up timeout for conference connection: %@
It's been %fs since asked to prepare to stop conference and conference connection still exists: %@. Forcefully cleaning up all conference connections for conference %@
Asked to stop conference for identifier %@
Cleaning up conference connection %@
Also cleaning up conference connection which is already prepared to stop %@
reason: %ld error: %@
Relay conference ended in failure (reason: %ld): %@
Setting up close connection timeout because conference ended reason was normal
[WARN] Timed out waiting for conference %@ to close connection after receiving end
[WARN] Unable to get URL for filename '%@'
[WARN] Unable to get standardized URL for URL '%@'
Setting up Pin Exchange controller
Requesting PIN from device %@
[WARN] accountsSupportSecondaryCalling=NO. Displaying mismatched accounts notification
Canceling all PIN requests
[WARN] Could not find device for unique ID %@
The entered PIN code is correct
Activated Thumper for requesting device %@
[WARN] The entered PIN code is incorrect, could not register device.
The user entered no code... or the code entered was not an NSString
We were unable to send the PIN to the other device to be displayed, Sorry
Sending a PIN code to device %@ to display to enroll them into Thumper
[WARN] Ignoring request to send PIN code because we already have one pending for device with unique ID %@
Could not obtain caller ID from Thumper IDS service %@
Sending IDS action %@ to device %@ with message %@
Thumper IDS action sent to device with success: %@ error: %@ identifier: %@
[WARN] Displaying PIN error notification
[WARN] Displaying mismatched accounts notification
[WARN] Displaying slots full notification
Received message for service %@ from device %@ (isHSATrusted=%d): %@
Ignoring pin request: There is already a pending pin request that has not yet completed.
One sender identity exists; continuing Thumper registration using UUID %@
Multiple sender identities exist; checking whether caller ID %@ matches a sender identity in %@
[WARN] Aborting Thumper registration; multiple sender identities exist but caller ID not supplied
Aborting Thumper registration; could not obtain sender identities from call provider %@.
Device requesting PIN is HSA trusted. Forgoing PIN exchange and enrolling the device immediately
Received request to enroll device %@ in Thumper for sender identity with UUID %@
[WARN] Aborting Thumper registration; could not obtain sender identity UUID.
Received didSendWithSuccess=YES for message with identifier %@
Received didSendWithSuccess=NO for message with identifier %@: %@
InCallService has changed process state to %ld
InCallService has been suspended; invalidating its XPC client connections.
Initialized capability state: %@
Updating clients with new call capabilities state: %@
Updating paired host device state
TUCallCapabilitiesXPCServer - callCapabilitiesState request from %@
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d forDeviceWithID: %@
TUCallCapabilitiesXPCServer - setWiFiCallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setWiFiCallingRoamingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setVoLTECallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowed: %d secondaryDeviceID: %@ senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowedOnDefaultPairedDevice: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - endEmergencyCallbackMode
TUCallCapabilitiesXPCServer - invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityUUID: %@
TUCallCapabilitiesXPCServer - invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityUUID: %@
TUCallCapabilitiesXPCServer - requestPinFromPrimaryDevice
Using the following account for the PIN request: %@
No device found for account %@. All accounts: %@
[WARN] No primary Thumper account found for PIN request. This should only happen because an account exists but has no empty device slots. All accounts: %@
TUCallCapabilitiesXPCServer - cancelPinRequestFromPrimaryDevice
Received device list changed notification: %@
Received device capability changed notification: %@
Received accounts changed delegate callback
Received FaceTime availability changed delegate callback
Received outgoingCallerIDChanged delegate callback
Disabling Thumper for subscription with UUID %@
Received telephonyCallCapabilitiesChanged delegate callback
[WARN] Disabling support because %@ was set to YES
[WARN] Enabling support because %@ was set to YES
Found primary Thumper account ID %@
Thumper calling is not supported for account ID %@
Setting associated Thumper account ID %@
_setWiFiCallingEnabled: asking to change value from %d to %d
_setWiFiCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setVoLTECallingEnabled: asking to change value from %d to %d
_setVoLTECallingEnabled: not updating value. Is currently %d and asked to set to %d
_setWiFiCallingRoamingEnabled: asking to change value from %d to %d
_setWiFiCallingRoamingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingEnabled: asking to change value from %d to %d
_setThumperCallingEnabled: not updating value. Is currently %d and asked to set to %d
Changing Thumper calling allowed value from %d to %d on secondary device ID %@
[WARN] Not changing Thumper calling allowed value. No device slots remain for this device. Displaying notification to the user
[WARN] Could not set Thumper calling allowed for secondary device with identifier %@; unable to retrieve local Thumper account from call capabilities %@
[WARN] Could not retrieve account ID from Thumper capabilities %@
_setThumperCallingAllowed: not updating value. Is currently %d and asked to set to %d on secondary device ID %@
[WARN] Could not find Thumper capabilities for sender identity UUID %@
[WARN] No cloud calling device appears to be a default paired device: %@. Ignoring setThumperCallingAllowedOnDefaultPairedDevice request
[WARN] Could not obtain UUID from sender identity capabilities state %@
defaultPairedDeviceExists: %d
telephonyDeviceExists: %d, relayCapableDeviceExists: %d, defaultPairedDeviceExists: %d
_setRelayCallingEnabledDefault: changing value to %d
_setRelayCallingEnabled: Changing value from %d to %d
_setRelayCallingEnabled: Not updating value. Is currently %d and asked to set to %d
setRelayCallingEnabledDefault:forDeviceWithID: changing value to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Changing value from %d to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Not updating value. Is currently %d and asked to set to %d for %@
Initialized pairedHostDeviceState: %@
[WARN] Could not de-serialize pairedHostDeviceStateData %@
[WARN] Saved pairedHostDeviceStateData was not an NSData type (class=%@): %@
No saved paired host device state found
Initializing new paired host device state with all values set to NO
_supportslaunchingInCallApplicationForIncomingCall: %d
dialRequest: %@ displayContext: %@
Coordinated alert request came back with bestIsMe: %d info: %@ error: %@
Starting coordinated alert request to determine ringtone un-suppression: %@
faceTimeIDSStatus for destinationID: %@ is: %@
Invalidating display context for %@
Posting %@ because relayClientTransport changed from %@ to %@ for %@
Posting %@ because mayRequireBreakBeforeMake changed from %d to %d for %@
Posting %@ because hasStartedOutgoing changed from %d to %d for %@
Posting %@ because hasAudioInterruption changed from %d to %d for %@
activeRemoteParticipants changed from %@ to %@ for %@
Posting %@
Audio device list changed
[WARN] No audio route collection found in audioRouteCollections: %@ for audio category %@ and audio mode %@ for call %@
Found preferred AVAudioDevice: %@
Requesting initial state of CarKit's DND assertion
Received initial CarKit DND assertion: %d
Unable to fetch CarKit DND assertion: %@
Updating isCarModeActive to %d
[WARN] Timeout occured fetching CarPlay do not disturb status.
Updating isCarPlayDeviceConnected to %d
Device first unlock block invoked, attempting to retrieve active conversations
Sent message with identifier %@ to %@
Error sending message: %@
Using local callerID: nil, could not get strong self
Using local callerID: %@
Could not find caller ID when creating conversation
UUID: %@ groupUUID: %@ localMember: %@ fromStorage: %d report: %@
UUID: %@ remoteMembers: %@
Asked to invite specific conversationUUID: %@ participantDestinationIDs: %@
localDeviceDestination: %@ oneToOneModeCapableLocalDestinations: %@
conversationUUID: %@ participantDestinationIDs: %@
UUID: %@ groupUUD: %@ localMember: %@
Transitioning conversation %@ to new groupUUID: %@
[WARN] Ignoring request to transition to new group UUID since an existing conversation does not exist.
[WARN] Cannot transition to a different group UUID that does not have the same set of remote members.
[WARN] Cannot transition to a different group UUID that does not have the same set of lightweight members.
[WARN] Dropping request to transition since sender is not in the members list that was given.
[WARN] Failed to create newActivitySession for activitySession %@ on conversation: %@
Delegate should handle conversation update: %@ for provider: %@
notifyDelegatesOfChangedLinkDescriptors: -- no link descriptors, not updating delegates
Retrieving conversation links failed with error %@
Sending message: %@ to: %@
[WARN] No local participant for conversation UUID: %@
[WARN] handleConversation:receivedAVCBlobResponse:fromHandle: %@ <!===> %@
[WARN] handleConversation:receivedAVCBlobResponse:fromHandle: Could not find participant in message: %@
Handoff changed to advertise %@ for identifier %llu, uplink muted %@, sending video %@
Handoff changed without eligibility, so stopping advertising
Handoff eligibility added to conversation: %@
Handoff eligibility removed from conversation: %@
Ignoring route identifier change for handoff as no conversations are currently joined.
Conversation manager alerted to new selected audio route ID %@, letting my other devices know for conversation UUID %@
Conversation manager alerted to unselected audio route, letting my other devices know for conversation UUID %@
Sending UpdateJoinedMetadata message %@ to my other devices: %@
Dropping session started event because session %@ has system activity
Posting session started event from participant %@ for session %@
Dropping session ended event because session %@ has system activity
Posting session ended event from participant %@ for session %@
Asked to create ActivitySession %@ on conversation UUID: %@ with trusted fromHandle: %@
[WARN] Conversation message of type Encrypted received with either no encryptedMessage or enclosedEncryptedType. Dropping message.
[WARN] ConversationMessage of type Encrypted with enclosed type of %d which we do not have support for, dropping.
Received Encrypted message with enclosed type of LetMeInRequest from handle %@
[WARN] Could not retrieve a pseudonym string from the message context.
[WARN] Let Me In request was not sent to a pseudonym. Dropping message.
Could not decrypt let me in request with error %@
[WARN] Decrypted conversation message but was not a let me in request: messageType: %d
[WARN] Provided link is %@, which was not a valid TUConversationLink.
Received Encrypted message with enclosed type of LetMeInResponse from handle %@
[WARN] No pending conversation found for link %@
[WARN] Pending conversation's let me in request state is %ld instead of Requested
[WARN] Pending conversation's let me in key agreement is either nil (%@) or exhausted (%@)
[WARN] Let Me In response was not sent to a pseudonym. Dropping message.
[WARN] Could not decrypt let me in response
[WARN] Decrypted conversation message but was not a let me in response messageType: %d
Could not find link for pseudonym %@, dropping let me in request. Error: %@
Dismissing let me in because link has originator handle of %@, which is not one of our active local handles %@
[WARN] GreenTea device does not support multiple remote members. remoteMembers = %@
Let me in requestor %@ is a handle that has already been kicked, rejecting let me in. conversation.kickedMembers: %@
Let me in requestor %@ is a handle that has already been rejected, rejecting let me in. conversation.rejectedMembers: %@
Let me in requestor %@ is a handle that is already a member of the call; Let Me In not required. conversation.remoteMembers: %@
[WARN] Ignoring let me in response message, as it is missing a groupUUID (%{public}@), missing a link (%{public}@), or does not specify approval/rejection (%{public}@): %@
[WARN] Let me in response is not for the provided pending conversation. Ignoring.
[WARN] Let me in response is not from the pseudonym defined in the link %@, instead is from %@
Finished processing let me in response (approved: %{public}@) for groupUUID: %@. Approver handle is %@.
Not sufficiently formed link created/changed message, type: %d hasLink: %d linkGroupUUID: %@ conversationGroupUUID: %@
[WARN] Invalid TUConversationLink for link created/changed message (it was nil)
[WARN] Sender %@ did not match link's originator handle %@ for link created/changed message %@
[WARN] Link already exists on conversation %@ for link created message %@
[WARN] GreenTea device does not support link created/changed message because invitedMemberHandles > 1, message: %@
[WARN] Sender %@ is not part of conversation UUID %@.
[In-Advance] Received link created/changed message from %@ with link %@
[WARN] GreenTea device does not support link creation message %@ because invitedMemberHandles > 1
Failed to persist received link to data store with error %@
[Ongoing] Received link created/changed (update: %{public}@) message for conversation UUID %@ from %@ with linkDescriptor %@
[WARN] Did not set conversation link %@ to conversation UUID %@
[In-Advance] Link successfully stored (update: %{public}@) from %@ with linkDescriptor %@
Not sufficiently formed link invalidation message %@
[WARN] Invalid TUConversationLink for link invalidation message %@
[WARN] Sender %@ did not match link's originator handle %@ for link invalidation message %@
We are not tracking any stored link for link invalidation message %@
Failed to remove received link from data store with error %@
[WARN] Dismissing let me in delegation because no groupUUID was set
[WARN] Dismissing let me in delegation because the forHandle is blocked {forHandle: %@, fromHandle: %@}
Received LMI delegation, unable to parse forHandle -- ignoring! {fromHandle: %@, message.letMeInDelegationHandle: %@}
Received LMI delegation, unable to parse transactionUUID -- ignoring! {fromHandle: %@, message.letMeInDelegationUUID: %@}
Received LMI delegation message! {fromHandle: %@, forHandle: %@, transactionUUID: %@}
[WARN] Dismissing let me in delegation response because no conversation was found for link's groupUUID: %@
Received LMI delegation response, unable to parse transactionUUID -- ignoring! {fromHandle: %@, message.letMeInDelegationUUID: %@}
Received LMI delegation response message, without letMeInApproval -- dropping! {fromHandle: %@, forHandle: %@, transactionUUID: %@}
Received LMI delegation response message! {fromHandle: %@, forHandle: %@, transactionUUID: %@, message.letMeInApproval: %@}
No invited members or conversation members were specified; no need to send messages (link: %@, conversation UUID: %@)
[WARN] UpdateJoinedMetadata conversation message was sent by a non-local handle %@, dropping message.
[WARN] UpdateJoinedMetadata conversation message was missing a group UUID, dropping message.
[WARN] UpdateJoinedMetadata conversation message was missing a joined metadata object, dropping message.
[WARN] UpdateJoinedMetadata conversation message was missing a valid participant, dropping message.
[WARN] No conversation was found for group UUID %@, dropping UpdateJoinedMetadata message.
[WARN] Could not find a matching participant for sender %@, dropping UpdateJoinedMetadata message.
Per UpdateJoinedMetadata message, the local user was using %@ audio route from another device with participant identifier %llu in conversation UUID %@
Per UpdateJoinedMetadata message, the local user was using a default audio route from another device with participant identifier %llu in conversation UUID %@; no need to track a route.
Sending data from: %@ to: %@
blob response, removing %@ from options: %@
[WARN] Could not convert %@ to IDS destination
Failed broadcasting file. Missing local member on conversation: %@
Broadcasting file from: %@ to: %@
Error broadcasting image %@
Sent broadcast image message with id %@
Missing local member on conversation: %@
Broadcasting data from: %@ to: %@
conversation: %@ broadcastImageForSession: %@
Error transmitting activity session %@ image. Failed to write to path %@ with error %@
(broadcastImageForSession activity UUID: %@ success: %d).
Failed to delete image file after sending image for session %@ error %@
conversation: %@ broadcastLightweightEndorsementForAddedMembers: %@
conversation: %@ has a splitSessionSecondary (%@), sending verification push
(success: %d).
[WARN] Couldn't create handle from participant destination identifier %@
[WARN] Couldn't find participant destination identifier %@ in members %@
[WARN] Couldn't decode message due to invalid data length.
[WARN] Couldn't decode message due to invalid groupUUID
[WARN] Couldn't find conversation with groupUUID %@
[WARN] Received unknown participant update message
[WARN] Unable to find members from message
Message doesn't have intent key set, dropping message
Kick message not permitted, dropping message
Invalid activity session update, dropping message
Invalid blob respnose, dropping message
Message type not permitted for member type, dropping message
Invalid vouching message, dropping message
Update type & payload not allowed fromHandle: %@
Not all lightweightMembers have an associated lightweightPrimary in the conversation, dropping message fromHandle: %@
Received an empty message of type: %@
FromHandle: %@ is trying to kick itself (%@)
Originator not set on message type: %@
Originator on message (%@) is not equal to fromHandle: %@
Message has an unrecognized type, dropping message
blob response verification can't function without an existing conversation
Received an invalid count of participants on type: %@
Failed to get participant from BlobResponse message
FromHandle: %@ is trying to add a different participant handle (%@)
FromHandle: %@ is trying to add a lightweight participant, but we can't find the lightweightMember
Couldn't find member for fromID: %@
Member: %@ doesn't have a primary
Lightweight member %@ doesn't have their primary in the conversation
Rejecting join update since we don't have an existing conversation, fromHandle: %@
Rejecting join update since it is trying to add members to the conversation, fromHandle: %@
Rejecting update since its trying to add a lightweightMember not associated with their device, member: %@ fromHandle: %@
Member verification can't function without an existing conversation
Invalid amount of members trying to be vouched (%lu)
FromID: %@ attempting to vouch for an invalid member %@
No local lightweightMember found for handle trying to be vouched
FromHandle: %@ trying to vouch for another member's lightweightMember
Refreshing active pariticpants for active conversations
[WARN] _incomingPendingConversationsByGroupUUID: issue fetching links for pending incoming {error: %@}
CSDConversationManager beginning to listen on service:%@
[WARN] Not adding cached conversation with UUID %@ because we already added equivalent conversation with UUID %@
Reviving cached conversation with groupUUID: %@ remoteMembers: %@ lightweightMembers: %@
[WARN] Failed to create newActivitySession for activitySession %@
Failed to create activitySession from persistence since we couldn't find the trusted fromHandle on activitySession: %@
shouldClearDefaults: %d - Removing all conversations
groupUUID: %@ remoteMembers: %@
Found existing conversation %@ but not reusing it since it's leaving and we're trying to join a U+1 call
No conversation currently exists to join: %d, so creating a new one isConversationVideoUpgrade: %d
[WARN] The request specified that local member %@ should be used, but the useable handles for FaceTime are %@. We cannot proceed with a handle that's not registered for FaceTime on this device.
Unable to create local member. Caller ID: %@
Found existing conversation with UUID: %@
Activating cached conversation from storage with UUID: %@ as someone seems to be interested in it.
joinExistingConversationWithUUID: %@ context: %@
[WARN] Could not find conversation with UUID: %@
Ignoring request to join conversation with UUID: %@ since conversation is already joined
Request to join conversation is trying to change avMode on conversation UUID: %@
[WARN] Leaving existing conversation with UUID: %@ in favor of new conversation with UUID: %@
Updating context to use isOneToOneModeEnabled=true %@
LMI: Creating pending conversation for link: %@, localMember: %@
LMI: Cannot find pending conversation for pseudonym %@
LMI: Requesting membership in pending conversation for link %@
LMI: Could not encrypt let me in request with error %@
Error sending request to join conversation
Sent let me in request for link %@
LMI: Notifying pending member %@ of our response (approved: %@) to their let me in for conversation UUID %@
[WARN] Response key missing from LMI response; cannot encrypt to send without. Aborting.
LetMeInResponse message assembled as %@
LMI: Could not encrypt let me in response
Error sending request to join conversation.
Sent let me in response (approved: %@) for pending member %@
[WARN] Could not find conversation with UUID %@. All conversation UUIDs: %@
Sending invitation message %@
UUID: %@
[WARN] Could not find conversation with UUID %@. All conversations UUIDs: %@
oneToOneMode is not enabled - ignoring to send video upgrade message
Updating pending conversation with pseudonym: %@, conversation group UUID: %@
Setting screen enabled %@ with attributes %@ for conversation UUID: %@
Upgrading to Audio mode since screenEnabled is YES
Removing all pending screenEnabled blocks since screenEnabled=NO
Unable to find conversation with UUID: %@
conversationUUID: %@ remoteMembers: %@
[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@
conversationUUID: %@ otherInvitedHandles: %@
GreenTea devices are not supported to have this GFT conversation UUID: %@
Attempted to add remote members without an active voucher manager.
Signed complementary association voucher for member %@: %@
Failed to sign complementary association voucher for member %@ due to error: %@
Not adding %@ to invited member handles of link because destinationIdIsTemporary(%@), destinationIdIsPseudonym(%@), or handle is the originator of link (%@)
Not adding %@ to invited member handles of link because it is already an invited member handle of the link
Not adding any of the following members to the invited handles of the link: %@
Displaying SharePlay not supported alert with message: %@
[WARN] Not displaying SharePlay not supported alert because SharePlay features are disabled.
conversationUUID: %@ update messagesGroupName: %@
conversationUUID: %@ update group photo
ConversationManager asked to create activitySession for activitySession: %@ on conversation UUID: %@
Failed to create CPActivitySession for activitySession: %@
Not broadcasting activity session creation for static activity
conversationUUID: %@ activity: %@
[WARN] User declined authorization to create activity session for activity: %@
leave conversationUUID: %@ activitySession: %@
end conversationUUID: %@ activitySession: %@
Asked to present dismissal alert for activitySessionUUID: %@ conversationUUID: %@
SharePlayWithAirplay ff is turned off, not changing activity session airplay state
Setting using airplay: %{public}@ on activity session: %@
Setting activity authorization %d for %@
Setting auto expanse enabled %@
Received launchApplication request for UUID: %@ forceBackground: %@
Launch request for UUID: %@ is trying to activate a staged activitySession. %@
Tried to launch placeholder activity.
Failed to find conversation that has activitySession %@
Not launching application because SharePlay is not allowed
Not requesting authorization since we don't have a CPActivitySession for: %@
Failed to request authorization error: %@
Authorizing session UUID: %@
Requesting activity authorization for %@
Revoking background authorization for bundle ID for %@
[WARN] Ignoring message %@ because a participant was not specified.
[WARN] Ignoring message %@ because multiple participants were specified.
[WARN] Ignoring participant update message %@ because participant handle %@ does not match message sender %@.
Received participant update message to downgrade, but we're in a U+1 call so we should also downgrade!
Received message from %@ to associate conversation %@ with messages group
[WARN] Message did not contain a valid activitySession.
Received remove activity session message %@ from %@
Unable to decode UUID from activitySession %@
Updating activities from message: %@
Updating activity images from message: %@
[WARN] Not updating activity, couldn't find activitySession || stagedActivitySession with UUID: %@
[WARN] Not updating activity, no activity UUID was provided in message: %@
Not updating activity because handle: %@ isn't the originator of the activity: %@
No image provided in update message for activity: %@
Error while generating preview image for activity session: %@
[WARN] Not updating image for activity UUID: %@ activity session currently has different activity UUID: %@
Updating activity image for activity session with UUID: %@
Updating activity image for staged activity session: %@
Received endorsement message: %@
Received new activity for conversation %@
Not adding activity session, as not all participants are on the latest SharePlay version
Sending conversation back since new activitySession doesn't support aTV handoff. session: %@
Failed to add activitySession: %@ to conversation UUID: %@
Not posting start session event. Could not find participant for handle %@ for session %@
Ignoring guest mode message since guest mode is not currently supported
Message did not contain updated guest mode state
Received guest mode update for participant in conversation %@
Ignoring guest mode update message because the from-handle %@ did not match any active remote participants %@
conversationUUID: %@ presentationContexts: %@
conversationUUID: %@ member: %@
Kicking member %@ from conversation %@
conversationUUID: %@ additionalVideoRepresentation: %ld
[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
[WARN] Ignoring nickname update message because the from-handle %@ could not be normalized.
Received nickname update message, set nickname to "%@" from handle %@ for conversation UUID %@
Ignoring nickname update message because the from-handle %@ did not match any remote members %@
conversationUUID: %@ downlinkMuted: %d
coversationUUID: %@ participantid: %llu audioEnabled: %d
[WARN] Could not find conversation with conversationUUID %@. All conversations: %@
conversationUUID: %@ participantid: %llu videoEnabled: %d
Ignoring local member's nickname update request because their nickname "%@" is already identical
conversationUUID: %@ set local member's nickname to %@, previously %@
Asked to get latest remote attributes, returning: %@
Retrieved %lu conversation link descriptors %@
Failed to retrieve links with error %@
Received request from TU client to generate link for conversation UUID: %@
GreenTea devices cannot generate conversation links for Group FaceTime (remoteMembers > 1)
Conversation was initiated from messages, a link cannot be generated in this case. {messagesGroupUUID: %@}
Link for conversation with UUID %@ already exists.
Failed to generate link for groupUUID %@ with error %@
Fetched non-local inactive link %@
Failed to fetch inactive link, generating new links for %@
Link generation complete, returning to completionHandler for: %@
Did not set conversation link as one already existed: %@
Received request from TU client to generate link with invitedMemberHandles: %@
GreenTea devices cannot generate conversation links for Group FaceTime (invitedMemberHandles > 1)
[WARN] No invited member handles were of eligible handle types and/or had normalized values, canceling link generation
[WARN] Local user has no active handles, cannot proceed with link generation
We activated an inactive link, returning that.
Creation of converation link with groupUUID %@ invited handles %@ failed with error %@
Adding invited handles %@ to %@ failed with error %@
Not invalidating link since it's not being tracked by our link manager.
Asked to invalidate link %@
Renewing link for reason %lu
Failed to renew link %@ with error %@
Generating cache of inactive links for originator handle %@
Asked to retrieve inactive link for handle %@
Failed to fetch inactive link, generating more for handle %@
Asked to activate conversation link %@
Asked to set name "%@" for link %@
[WARN] Link name setting provided error %@
Link name successfully set for updated link %@
TU client asked to schedule a syncing of activated conversation links {initial: %@}
Sending recovery messages to local user's other devices in an attempt to recover links for pseudonyms %@
TU client asked for link sync state {includeLinks: %@}
For conversationUUID: %@, user has approved let me in for pending member: %@
[WARN] Failed to approve let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
For conversationUUID: %@, user has rejected let me in for pending member: %@
[WARN] Failed to reject let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
For conversationUUID: %@, user has requested to ignore all LMI requests.
[WARN] Failed to ignore let me in requests. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
conversationUUID: %@ messagesGroupName: %@
%ld conversationLink should be removed, not needed anymore %@
conversationLink was removed since it was not needed anymore {pseudonym: %@, success: %@, error: %@}
removeConversationWithUUID: %@
[WARN] Could not find conversation for container with UUID %@. All conversation UUIDs: %@
includeMetricsReport onConversationWithUUID: %@
[WARN] Dropping metrics report, could not find conversation with conversationUUID %@. All conversation UUIDs: %@
Requested avMode -> none, but leaving instead since this is a 1:1 or screensharing call
Requesting to disconnect call %@
Found conversation that we want to register the messagesGroupUUID on
Couldn't find conversation UUID %@ to register messagesGroupUUID on
setupPendingConversationCleanupTimer: %f %f %@
cleanupExpiredPendingConversations: %f %@
conversationChanged: %@
conversationConnectionDidStart UUID: %@
conversationInvalidated UUID: %@
conversationLink should be removed after call was invalidated %@
conversationLink finished removing after call was invalidated {success: %@, error: %@}
conversation: %@ addedActiveParticipant: %@
At least one participant in conversation %@ does not support SharePlay. Invalidating session %@
Conversation UUID %@ was continued on another device as participant %@, leaving...
Added participant %@ is a handoff continuation for identifier %llu, but my local identifier is %llu. Not leaving.
There was no participant association for added participant: %@
executing queued up screenEnabled block since local participant mode changed
For AVLess to AV upgrade of conversation UUID %@, sending an AddActivitySession message to devices lacking AVLess support: %@
conversation: %@ removedActiveParticipant: %@
conversation: %@ participant: %@
Requesting AVC blob for %@
Sending decline message for %@
conversation UUID: %@ activitySessionChanged: %@
Disabling screensharing since another session: %@ became active
Scene association changed for activity session: %@
App launch state changed to: %lu for activity session: %@ on conversation with UUID: %@
conversation: %@ activityChangedOnSession: %@
(success: %d)
Did send activity removal message successfully? %d
Not posting session ended event. Error finding participant for end session %@
conversation: %@ addedMembers: %@ triggeredLocally: %@
Found staged ActivitySession on conversation. Distributing image. %@
Found ActivitySession on conversation. Distributing image. %@
conversation: %@ triggered join.
Let me in request was sent to invalid pseudonym %@, ending pending conversation
Running callback for message %@, which has been received by the IDS daemon
[WARN] service:account:incomingData:fromID:context: Empty from ID. Dropping message.
Ignoring IDS resource; already received via conduit IDS proxy.
Received resource URL with identifier %@ from %@
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty from ID. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty data. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty CSDMessagingConversationMessage. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Got unsupported messaged type %@. Dropping message.
service:account:incomingData:fromID:context: already proxied IDS message with ID %{mask.hash}@, ignoring.
service:account:incomingData:fromID:context: receiving IDS message from %{mask.hash}@ with ID %{mask.hash}@
service:account:incomingData:fromID:context: receiving proxied IDS message from %{mask.hash}@ with ID %{mask.hash}@
service:account:incomingResourceAtURL:metadata:fromID:context: receiving proxied IDS resource from %{mask.hash}@ with ID %{mask.hash}@
received proxied group participant update
Received message with identifier %@ from %@ Attempt count %@
[WARN] service:account:incomingData:fromID:context: Empty data. Dropping message.
[WARN] Received CSDMessagingConversationMessage with Type of %@
[WARN] service:account:incomingData:fromID:context: Empty destinationID after IDSCopyRawAddressForDestination. Dropping message.
[WARN] service:account:incomingData:fromID:context: Could not create TUHandle from destinationID. Dropping message.
[WARN] Dropping let me in request or response because it was not encrypted
[WARN] Dropping let me in delegation request or response because it has the wrong intent {publicIntentAction: %@}
[WARN] Received LetMeInDelegation with Intent of {publicIntentAction: %@, messageIntent: %llu}
[WARN] service:account:incomingData:fromID:context: Empty CSDMessagingConversationMessage. Dropping message.
[WARN] service:account:incomingData:fromID:context: Could not create group UUID from string. Dropping message.
[WARN] No conversation found for groupUUID %@
Updating "fromStorage" on conversation with UUID: %@ since there are still active remote participants.
Not updating "fromStorage" on conversation with UUID: %@ since conversation.isFromStorage: %d, and context.fromServerStorage: %d
Looking for handle: %@ in existingConversation: %@
fromID found in both the remoteMembers & lightweightMembers list. Rejecting message.
Dropping message since the type %@ is not allowed for lightweightMembers
[WARN] Could not find matching handle: %@  in existingConversation.
[WARN] Will retry message again after %@ ms
[WARN] Exhausted retry attempts for message. Dropping message after %@ attempts
Message verification failed, dropping message.
[WARN] Received Invitation conversation message from server storage for conversation where that was also retrieved from server storage. Not notifying delegates of this Invitation message. {message: %@, context: %@, conversationUUID: %@}
Group participant update received
Attempted to sanitize participant update without an initialized sanitizer.
[WARN] processGroupSessionParticipantUpdate: Empty groupSessionParticipantUpdate
[WARN] processGroupSessionParticipantUpdate: Empty groupSessionParticipantUpdate.participantDestinationID
Group session participant update received: %@ participantIdentifiers: %@
Participant update from %@, type: %lu, participants: %@
[WARN] Unable to find fromHandle.
[WARN] processGroupSessionParticipantUpdate: GFT message recieved on a green tea device - dropping message
Leaving conversation that is not supported on GreenTea devices: %@
Received participant join context
processJoinUpdate: Received nil when trying to convert data to participant join context
[WARN] processUpdateMembersUpdate: Empty updateMembersUpdate.clientContextData
Received nil when trying to convert data to participant join context
[WARN] processParticipantDataUpdate: Empty participantDataUpdate.groupUUID
[WARN] processParticipantDataUpdate: Empty participantDataUpdate.participantDestinationID
[WARN] processParticipantDataUpdate: Empty participant
[WARN] Could not find conversation with groupUUID %@. All conversation UUIDs: %@
[WARN] handleParticipants:joinedConversationWithUpdate:joinContext: Empty joinContext
[WARN] handleParticipants:joinedConversationWithUpdate:joinContext: Empty participantUpdate.groupUUID
Join context: %@
members: %@
lightweightMembers: %@
addedMembers: %@
addedLightweightMembers: %@
activeLocalHandles: %@
receivedLocalMember: %@
Received local member: %@
[WARN] Dropping conversation with groupUUID %@ since it has %tu remote members which is greater than the maximum allowed of %tu.
[WARN] We received a message from %@, which was in the remote members list given in the message, but not in the existing conversation UUID: %@. Dropping message.
[WARN] We received a message from %@, which was in the remote members list but from a different device; treating as new conversation
Membership update message failed verification. Dropping fromHandle: %@
Identified let me in approval for pending conversation group UUID: %@
Pending conversation %@ found, but the groupUUID does not match (%{public}@) or the let me in request state is not Requested (%{public}@)
Determined video for new conversation should be %{public}@
Attached invitation preferences found in message: %@
No invitation preferences were set on the message
[WARN] Could not create new activity session for activity session %@ and conversation UUID %@
Ignoring message for group UUID %@
Updating provider on conversation with UUID %@ with provider %@
Activating cached conversation with UUID: %@ since participants are joining.
Updating remoteMembers for conversation with UUID: %@
Downgrading U+1 call to audio because remote party joined as audio-only (remote members count is 1, join context had video=NO, and conversation had video=YES)
[WARN] Couldn't set staged activity session %@ on conversation UUID %@
Could not find local member from activeLocalHandles: %@
Could not find local member from activeLocalHandles: %@, remoteAndLightweightMembers: %@
Received empty set for remote members
Participant with identifier: %llu left conversation with groupUUID: %@
[WARN] handleParticipantWithIdentifier:leftConversationWithGroupUUID: empty groupUUID
[WARN] Could not find conversation for group UUID %@
Active participant %@ was still listed as a pending member %@ for conversation UUID %@; did we miss an approval delegation notice?
It would have been time to add LMI approved handle %@ on conversation UUID %@ to link's invited members, but they were kicked.
Adding LMI approved handle %@ to invited member handles for link %@ after their kick timeout elapsed for conversation UUID %@
Removing handles %@ from handles awaiting link invites as we have scheduled the block to add them if not kicked
Using group session initiator as conversation initiator: %@
Picked initiator for conversation: %@
linkManager:updatedLinksFromSync: -- updating delegates {linkDescriptors.count: %d}
linkManager:removedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}
linkManager:updatedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}
linkManager:removedLinkDescriptorsFromValidityCheck: -- updating delegates {linkDescriptors.count: %d}
Membership tracker prompted response for pending member! {member: %@, conversation UUID: %@}
Membership tracker retained pending member because conversation does not yet exist {member: %@, groupUUID: %@}
No link was found; ignoring tracked pending member {member: %@, groupUUID: %@}
Membership not adding pending member! {member: %@}
Membership reported rejection {member: %@, error: %@}
Asked to send delegation message!
Asked to send delegation response message! {withResponse: %@}
LMI: Unable to send delegation message without conversation or link
Not sending delegation message because no handles were specified! {groupUUID: %@, transactionUUID: %@, pendingMember: %@}
Asked to send delegation message {handles: %@, groupUUID: %@, transactionUUID: %@, pendingMember: %@}
Error sending delegate to join conversation.
Sent delegation request!!!
Notifying delegates of received remote attributes %@ (isLocallySharing: %@)
Asking screen sharing activity manager to resume observing after invalidation
Disabling screensharing forConversationWithUUID:%@ since screen sharing session got invalidated
SharePlay allowed: %@
Screen sharing allowed: %@
Attempt to retrieve application record for bundle identifier %@ failed with error: %@
[WARN] Unable to create audio route from route dictionary: %@
Issuing request to acquire process assertion for bundle identifier: %@
Acquiring process assertion for bundle identifier %@
Acquired initial process assertion for bundle identifier %@
Failed to acquire process assertion for bundle identifier %@
Incremented count of process assertion for bundle identifier %@ to %lu
Received request to invalidate process assertion with bundle identifier: %@
Decremented count of process assertion for bundle identifier %@ to %lu
Initialized CXCallDirectoryStore for reading
Unable to initialize CXCallDirectoryStore for reading: %@
Device first unlock block invoked, attempting to initialize CXCallDirectoryStore...
Incoming call filter block called with sourceAddress: %@ providerIdentifier: %@
Blocking call with sourceAddress %@ since callDirectoryAllowsCallFromSourceAddress returned NO
Disallowing call with sourceAddress %@ since _doNotDisturbAllowsCallFromSourceAddress returned NO
DND - onEmergencyCall: %d providerIdentifier: %@
Not allowing call because DND is enabled for %@
phoneNumberVariants: %@
Error checking if call directory database contains blocking entry for source address %@: %@
Disallowing call from source address %@ since blocked by call directory
Call history changed: %@
Call connected. Marking all calls as read.
bytesOfDataUsed: %ld uniqueProxyIdentifier: %@ callHistoryIdentifier: %@
Call still exists so updating its bytes of data used: %@
No call still exists so updating bytes of data used via CHManager
Writing recent call to history: %@
Writing recent pending call to history: %@
Adding transaction object to transactionObjectsAwaitingCallHistory: %@
[WARN] Ending transaction for %@ because we timed out waiting for a call history database changed notification
Set %ld recent calls as read using matching predicate '%@'.
Deleted %ld recent calls matching predicate %@
self: %@ wiFiAllowed: %d
self: %@ cellularDataAllowed: %d
self: %@ cellularDataPreferred: %d
self: %@ clientUUID: %@
Updated currently broadcasted activity to %@
Queueing activity at beginning of queue: %@ (timeout: %f)
Queueing activity at end of queue: %@ (timeout: %f)
Dequeueing activity: %@
This method expects a non-nil dynamic identifier, but a nil one was providied
Registered to listen for activity type %d and dynamic identifier %@ and started listening for best app suggestions, now tracking: %@
Registered to listen for activity type %d and dynamic identifier %@, now tracking: %@
Unregistered to listen for activity type %d and dynamic identifier %@, now tracking: %@
This method expects a non-nil dynamic identifier substring, but a nil one was providied
Unregistering dynamic identifiers of type %d, matching substring %@: %@
Unregistered to listen for activity type %d, now tracking: %@
Stopped listening for best app suggestions
Best app suggestion changed to %@
Firing delegate callback for stopped activity type %d (%@) and dynamicIdentifier %@
Firing delegate callback with activity type %d (%@) and dynamicIdentifier %@
Migrator is looking for legacy Announce Calls setting in %@
Migrator found legacy Announce Calls setting %@
Migrator did not find legacy Announce Calls setting in %@
Migrator is looking for legacy Conversation Link Base URL setting in %@
Migrator found legacy Conversation Link Base URL setting %@
Migrator did not find legacy Conversation Link Base URL setting in %@
Joining with participantJoinContext: %@
sending dataBlob participant: %@
Querying for capabilities of call members using native destinations: %@
Query for capabilities returned any destinations with web only endpoints: %@
%s: Conversation report = %@
requestActiveParticipants self: %@
leave self: %@
registerPluginWithOptions:%@ self: %@
restart self: %@
reconnect self: %@
member: %@
requestDataCryptorForTopic: %@ self: %@
requestEncryptionKeyForParticipants: %@ topic: %@ self: %@
addAliasesToConversationContainer: %@ salt: %@ self: %@
participantIDForAlias: %llu salt: %@ self: %@
addRequiredCapabilities: %@ requiredLackOfCapabilities: %@ self: %@
setting local participant type: %ld memberDestination: %@
setting participant type: %ld memberDestinations: %@
sessionProvider: %@ reason: %d error: %@
sessionProvider: %@ participantIDs: %@ localParticipantID: %llu error: %@
sessionProvider: %@ error: %@
sessionProvider: %@ participantType: %ld error: %@
sessionProviderDidTerminate: %@
sessionProvider: %@ activeParticipants: %@ success: %d
[WARN] Received an error for active remote participants
[WARN] Retrying requestActiveParticipants, retry_count=%lu
[WARN] Not retrying requestActiveParticipants, max retry count (%lu) reached
sessionProvider: %@ didReceiveActiveLightweightParticipants: %@ success: %d
[WARN] Retrying requestActiveLightweightParticipants, retry_count=%lu
[WARN] Not retrying requestActiveLightweightParticipants, max retry count (%lu) reached
XPC connection invalidated from client: %@ capabilities: %@
Disconnecting all calls because wantsCallDisconnectionOnInvalidation=YES for %@
Setting isSendingVideo:NO isSharingScreen:NO on call: %@ because wantsCallStopStreamingOnInvalidation=YES for %@
CarPlay screen is now %d
Received AVAudioClient secure microphone interruption
Registered for registerSecureMicrophoneEngagedHandler
Relay capabilities enabled
Relay capabilities disabled
Disconnecting relaying call because relay calling is no longer enabled: %@
Disconnecting call being relayed elsewhere because relay calling is no longer enabled: %@
Received AudioSession Interruption notification: %@
Determined that audio interruption was caused due to built in mic muted, ending all calls
Received hardware control: %@
Updating calls in response to hardware control: incomingCall %@, activeCall %@, heldCall %@
Answering incoming call: %@, %@
Answering incoming call as conversation: %@, %@
Opening URL for incoming call: %@
Encountered error while opening URL: %@ for call: %@
Disconnecting call because there wont be a UI to host the call: %@
Not opening URL %@ because outgoing call is provided by SharePlay.
Opening URL: %@ for outgoing call
Disconnecting proxy call because a video call started connecting: %@
Updating clients with call: %@
Requesting to background launch InCallService
Ignoring call update for client %@ because it's suspended
Updating client %@ with disconnected call: %@ calls: %@
Updating client %@ with calls: %@
notification: %@
Pushing all calls to device with destination %@ because an eligible audio route is not available and we found a call hosted here with its expected endpoint on another device: %@
Pulling all calls from relay client device because a an eligible audio route is available and we found a call with an endpoint elsewhere: %@
Non-ringing call found on device: %@. All calls: %@
Ignoring ringing call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d) or a vehicle route is available (%d) or call is TTY (%d) or call is conversation (%d) or shouldRelayTinCanCall (%d)
Not sending out call started connecting message because call is already disconnected: %@
Not sending out call connected message because call is already disconnected: %@
Sending voicemail call ended notification %@
Picked route %@ changed to A2DP, so muting
Picked route changed from %@ to %@, setting call's bluetooth audio format back to automatic
Received nil call from outgoingCallFromProxyCall: for dial request %@ and displayContext %@
current calls are %@
[WARN] Ignoring request to performUngroupCall because the call is not grouped
[WARN] Ignoring request to performSwapCalls because either there is no active call (%d), there is no held call (%d), or an active call exists that cannot be held (%d)
An endpointRapportMediaSystemIdentifier="%@" or endpointRapportEffectiveIdentifier="%@" is present on answer request for call with identifier %@ so attempting to pick matching route
Performing end active calls and answer ringing call %@ for answer request %@
Aborting end active calls and answer ringing call; answer request does not specify a call to answer.
Aborting end active calls and answer ringing call; could not find any ringing calls to answer.
Aborting end active calls and answer ringing call; could not find ringing call with identifier %@
Aborting end active calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting end active calls and answer ringing call; ringing call %@ does not contain a data source.
Performing end held calls and answer ringing call %@ for answer request %@
Aborting end held calls and answer ringing call; answer request does not specify a call to answer.
Aborting end held calls and answer ringing call; could not find any ringing calls to answer.
Aborting end held calls and answer ringing call; could not find ringing call with identifier %@
Aborting end held calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting end held calls and answer ringing call; ringing call %@ does not contain a data source.
Performing hold active calls and answer ringing call %@ for answer request %@
Aborting hold active calls and answer ringing call; answer request does not specify a call to answer.
Aborting hold active calls and answer ringing call; could not find any ringing calls to answer.
Aborting hold active calls and answer ringing call; could not find ringing call with identifier %@
Aborting hold active calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting hold active calls and answer ringing call; ringing call %@ does not contain a data source.
Changed sourceIdentifier of answerRequest to %@
   ... sending calls were found so adding them to list of calls to disconnect: %@
   ... and adding held calls to the list of calls to unhold: %@
   ... and not unholding held calls because there are active calls %@ or ringing calls %@
   ... no sending calls were found so adding all active calls to list of calls to disconnect: %@
   ... no sending or active calls were found so adding all held calls to list of calls to disconnect: %@
   ... and moving call %@ from call to unhold to call to disconnect because a disconnected call from the same provider doesn't support unambiguous multi-party state: %@
Handoff context did not include any handoff payload. Assuming this is for a relay call
[WARN] Ignoring request to performPushHostedCallsToDestination %@ because not all calls are hosted here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because not all calls are not hosted here and not an endpoint here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because no paired device exists
Disconnecting call with disconnected reason %d: %@
Disconnecting call normally since it was outgoing (%d) or was never connecting to relay (%d): %@
Dialed call: %@
answerRequest: %@
Attempting to answer a Walkie-Talkie call whose endpoint is not Apple Watch; aborting answer request %@ for call %@
Performing answer request %@ for call %@
[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@
Holding call with identifier: %@
Unholding call with identifier: %@
Requesting video upgrade for call with identifier: %@
Requesting to disconnect call %@ since also requesting call %@ to upgrade to video
Disconnecting call with identifier: %@
Grouping calls with identifiers %@ %@
[WARN] Asked to group call with data source %@ with another call with a different data source %@
[WARN] Could not find call for uniqueProxyIdentifier %@ (%d) or could not find call for otherUniqueProxyIdentifier %@ (%d)
Ungrouping call with identifier: %@
Swapping calls
Playing DTMF tone for call with identifier: %@ key: %d
Disconnecting current call and activating held call
Disconnecting all calls
Setting TTY type to %d for call with identifier %@
Pulling relaying calls from client
Pushing relaying calls to host with source identifier: %@
Pulling calls from client using handoff info %@
Sending MMI or USSD code for dial request: %@
Setting uplink muted (%d) for call with identifier %@
Setting downlink muted (%d) for call with identifier %@
Setting is sending video (%d) for call with identifier %@
Not updating isSendingVideo: %d since not showing in-call ui
Settings mixes voice with media (%d) for call with identifier %@
Setting sharing screen (%d) for call with identifier %@
Pusing hosted calls to destination %@
Pulling calls hosted on paired device
Sending hard pause digits for call with identifier %@
Updating call with proxy call %@
Entered foreground for call with identifier %@
Entering background for all calls
Entered background for all calls
Setting remote video presentation size to %@ for call with identifier %@
Setting remote video presentation state to %d for call with identifier %@
Setting screen share attributes to %@ for call with identifier %@
Setting screen sharing to (%d) and attributes to %@ for call with identifier %@
Setting Bluetooth audio format to %ld for call with identifier %@
Setting should suppress in-call status bar to %@
Setting should allow ringing call status indicator to %@
Processing SpringBoard request to continue user activity with identifier: %@
Initiating request to pull call for user activity %@
Lauching in-call application; pulled call with identifier %@ for user activity %@
Failed to pull call for user activity %@
Retrieving user activity with identifier %@ failed with error %@
CSDCallStateController: sendUserScoreToRTCReporting with UUID: %@ and Score: %d
CSDCallStateController: joinConversationWithRequest: %@
Setting current audio input to device with UID %@
Setting current audio output to device with UID %@
Picking local route with identifier: %@
Picking paired device with identifier %@
clientCapabilities: %@
Messaging connection ended for calls %@. Disconnecting calls that are an endpoint here but are not hosted here.
Messaging connection failed for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Messaging connection could not establish link for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Requesting initial state for client %@
uniqueProxyIdentifier %@
hasBeenUnlocked changing from %d to %d
Device has been unlocked, so invoking block immediately
Device has not been unlocked, so storing block to be performed upon first unlock
Device has not been unlocked and is not yet observing device lock changes, so beginning to observe device lock changes
Could not obtain application state from user info dictionary %@
Could not obtain bundle identifier from user info dictionary %@
[WARN] Could not obtain bundle identifier from VoIP application %@
XPC network extension connection interrupted from client %@
XPC network extension connection invalidated from client %@
XPC PushKit connection interrupted from client %@
XPC PushKit connection invalidated from client %@
Handling %@
Received request to register VoIP Network Extension for client process with bundle identifier %@
Registering VoIP Network Extension for application with bundle identifier %@
[WARN] Ignoring request to register VoIP Network Extension; could not obtain a bundle identifier from client process %@
[WARN] Aborting register request for VoIP Network Extension; entitlement was not found on client %@
for connection: %@ publicToken: %@
Requesting token for topic %@ for bundle ID %@
[WARN] No environment found for connection %@
for connection: %@ token: %@ topic: %@ identifier: %@
for connection: %@ message: %@
Received incoming APS message from application with bundle identifier %@ and topic %@
Resetting all CSDVoIPApplicationController kill counts
LSApplicationRecord had error %@ when looking up bundle identifiers, can't complete nightly VOIP topic reconciliation
We found an enabled VOIP topic for %@ that is no longer installed. Invalidating its push token
[WARN] Ran nightly VOIP reconciliation and found %d discrepencies
Ran nightly VOIP reconciliation and didn't find any discrepencies.
[WARN] No APS connection found for environment %@
Registering client process %@ with bundle identifier %@ for NetworkExtension VoIP
Aborting NetworkExtension VoIP registration; application with bundle identifier %@ does not have the required entitlement and background mode (VoIP Background Mode: %d, VoIP Network Extension Entitlement: %d)
Asked to register bundle ID %@ with APS environment %@ for VoIP type %@
[WARN] Ignoring voipRegister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d) type %d
[WARN] Ignoring %{public}@ unregister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
Registering client process %@ with bundle identifier %@ for PushKit %{public}@ in environment %@
Environment was %@ but is now %@. Flushing out old registration with previous environment
Aborting PushKit registration for app %@ for type %d because no APS connection exists for the environment (%@)
Aborting PushKit registration for application with bundle identifier %@ because it lacks the voip background mode
Requesting token for topic %@
Setting enabled topics from %@ to %@
Unregistering application %@ from PushKit %{public}@ in environment %@
Supplied environment was nil. Inferring it as %@
Disabling topic %@ and invalidating its token for connection %@
Disabling topic %@ and invalidating its token for all connections
Received incoming network extension message from application with bundle identifier %@
Application %@ will not be launched because it failed to report an incoming call too many times or repeatedly crashed. However because the app is foreground, delivering VOIP payload anyway.
Application %@ will not be launched because it failed to report an incoming call too many times (or repeatedly crashed.)
Attempting to open application %@ and acquire a process assertion
Dropping incoming message because the bundle ID failed to launch
Dropping incoming message because the bundle ID did not launch in time
Successfully opened application
Successfully took out process assertion
Dropping incoming message because the process assertion could not be acquired
Invalidating process assertion for bundle ID %@ from timeout
Killing VoIP app %@ because it failed to post an incoming call in time.
Unable to terminate %@ with error %@
[WARN] No existing VoIP application found for bundle ID %@
Aborting request application with bundle identifier %@ does not have the required background mode (VoIP Background Mode: %d)
Ignoring event for session %@, since the activity is a system group activity
Received TUConversationActivityEvent: %@
Dropping notice %@ because of invalid bundleID
Notice %@ is from a lightweightMember, trying to translate
Posting notice: %@ for event: %@
Fetching notices is a no-op
Activating conversation notice with URL: %@ and bundleID %@
Attempt to open application with bundle identifier %@ url: %@ failed with error %@
Successfully opened URL %@ for bundle: %@
[WARN] Error activating conversation notice. Could not find action url %@ or bundleID %@
Removing conversation notice is a no-op
Not creating activitySession -- bundleID not available
[WARN] Could not find conversation with conversationUUID %@
[WARN] Conversation with conversationUUID %@ is not associated with a Messages group
[WARN] No Messages group provider was registered
Device first unlock block invoked, attempting to retrieve saved providers
Loaded registered providers
Loaded registered local providers: %@
Loaded registered relay providers: %@
Updating current providers to %@
Unregistering provider because its application is no longer installed: %@
Donating user intent to call provider with identifier: %@
Releasing sandboxExtensionHandle for provider: %@
[WARN] Skipping Sandboxing URL as the passed in URL turns out to be a symbolic link: %@
Updating provider from %@ to %@
Updating relay provider from %@ to %@
Device is passcode locked (%d) or existing call has different provider (%d). Indicating activity should open in background.
Device is NOT passcode locked. Indicating activity should open in foreground.
Opening user activity %@ for bundle identifier %@ with options %@
Successfully opened user activity %@ for bundle identifier %@
Failed to open user activity %@ for bundle identifier %@: %@
Could not get LSApplicationRecord for app %{public}@ to determine intent support. Using %{public}@.
App %{public}@ supports %{public}@.
[WARN] App %{public}@ does not support %{public}@, using deprecated %{public}@ and %{public}@.
App %{public}@ does not declare support for any dialing intents. Using %{public}@ or %{public}@. Error: %@
Received %@ conversation message for %@
[WARN] Not handling received Decline message from %@ since we are already in a joined conversation with UUID: %@
[WARN] Ignoring nickname update message %@ because message doesn't have a nickname set.
[WARN] Not honoring screen sharing message
[WARN] Dropping video upgrade message, since member is not part of conversation.
[WARN] Conversation %@ is not in the correct state. Dropping message.
[WARN] No call is being tracked, dropping message for conversation: %@
[WARN] Not handling upgrade message for conversation since upgrades are currently disabled.
[WARN] Not upgrading conversation since there was no join update attached.
[WARN] Not upgrading conversation since the join update has an incorrect subtype.
[WARN] Not upgrading conversation as message is missing upgrade token.
[WARN] Not upgrading conversation as message is missing remote token.
Error while creating UUID from %@
[WARN] Did not receive protoUpgradeSessionUUID part of message %@
Current callUUID: %@, upgradeSessionUUID: %@, conversationUpgradeSessionUUID: %@, existingHandle: %@, upgradeMessageHandle: %@, participantDestination: %@, fromDestination: %@
Starting audio for conversation with conversationUUID %@
Determined that current uplink is muted - muting conversation %@
This is a U+1 invite sent by the local account from a different device, not ringing on the local device for conversation: %@
[WARN] Ignoring incoming invitation message for %@ because invitation preferences requested no-ring. conversation.invitationPreferences=%{public}@, message.tuInvitationPreferences=%{public}@
Ignoring incoming invitation message for %@ since we are already tracking this with call %@
[WARN] Ignoring incoming invitation (LMI approval) because message's group UUID %@ did not match the pending conversation's expected group UUID %@. (link: %@)
[WARN] Ignoring incoming invitation (LMI approval) because it was sent from handle %@ instead of expected approverHandle %@
[WARN] Ignoring incoming invitation (LMI approval) because message's link %@ did not match the link the user tapped (pendingConversation: %@)
LMI: Shuttling in to new conversation and stopping the pending one (moving callUUID %@ to new conversation).
Setting uplinkMuted for conversation: %@ since pendingConversation:%@ has uplinkMuted
[WARN] Ignoring responded elsewhere message since it was not sent from a valid handle.
[WARN] Ignoring responded elsewhere message since is did not come from the originator (%@) or one of our aliases: %@.
[WARN] Ignoring message that we've responded elsewhere for conversation %@ since the conversation is already joining or is joined.
Downgrading local participant since remote participant did not upgrade before the timeout: %@
Ending unanswered outgoing call for conversation with UUID: %@
Successfully sent message with identifier: %@ handle:%@ account: %@
Mode changing fromMode %lu, toMode: %lu, conversationUUID: %@
Mode changing from None, Started tracking callUUID: %@ conversationUUID: %@
Mode changing to None, Stopping tracking callUUID: %@ conversationUUID: %@
Found that a remote user had upgraded to video, upgrading our local conversation to video
conversationChanged for U+1 call with avMode=video remote participant, upgrading CXCallUpdate to video=1
Unable to report outgoing call connected; Leaving conversation since could not find call UUID for conversation: %@
Unable to report outgoing call started connecting; could not find call UUID for conversation: %@
Conversation screen sharing changed: %@ 
 participant: %@
Conversation with UUID %@ failed with context: %@
Exiting addedActiveParticipant callback early since conversation with UUID %@ has been removed - current conversations are %@
Reporting call as connecting and isConversation=true since conversation (state: %ld LMI state: %ld) with UUID %@: addedActiveParticipant %@.
Not reporting a U+1 call as connecting when active participant is added since it is going through LMI flow (state %ld and LMI state %ld) and should not connect until user presses join in the staging area; conversation UUID %@: addedActiveParticipant %@.
Ending call since U+1 conversation with UUID %@: removedActiveParticipant %@.
[WARN] Couldn't find call to end for conversation %@. Falling back to leaving conversation directly.
Ending callUUID:%@ with conversation with UUID %@:
[WARN] Could not fail conversation with reason %ld callUUID not found for conversation UUID %@
[WARN] Could not report conversation as continued as could not find call for conversation UUID %@
Returning to the Home Screen now that conversation %@ has been handed off elsewhere.
Failed to return to the Home Screen after conversation %@ was handed off elsewhere (with error: %@)
Successfully returned to the Home Screen after conversation %@ was handed off elsewhere.
Not returning to the Home Screen after conversation %@ was handed off elsewhere because call was either in PIP or backgrounded when it ended.
Joining conversation for answer call action: %@
No conversation with UUID: %@
performAction UUID:%@
[WARN] GFT calls are not allowed on GreeTea devices
LMI: This pseudonym is mine, but couldn't find the link - triggering link recovery and failing the action {pseudonym: %@}
No link was found
LMI: Could not assemble link for pseudonym %@ and publicKey %@
letMeIn: %@
Joining from links is disabled by server bag value, failing pending conversation %@
LMI: Asking CSDConversationManager to request let me in approval for pseudonym: %@
Can't use existing conversation %@ because its initiator %@ is not us, not the link creator %@, and not an invited handle to the link %@. Falling back to LMI request/response flow.
There's already an ongoing conversation %@ with the same groupUUID as the link %@, but the conversation does not have the same link %@
Even though we have the information needed to create a conversation with this link, none of our currently active handles are the link creator %@ or one of the invited handles %@. Falling back to LMI request/response flow.
[WARN] Skipping member with handle %@ because it already exists in seen handles: %@
LMI: Reporting LMI call with UUID: %@ update: %@
pseudonymsByCallUUID: %@, conversationsByUUID: %@
Removing pending conversation with pseudonym %@ and callUUID %@
action: %@
Failing action: %@ since conversation: %@ did not meet conditions
[WARN] Cannot enable video because conversations do not allow video on this device
conversation is not eligible for CXSetSendingVideoCallAction since it does not support video
conversation is not eligible for CXSetSendingVideoCallAction since its relaying else where
Group conversation has presentation state %d so requesting to unpause video
[WARN] Could not find conversation for sendingVideo call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
All active participants do not have minimum supported screen sharing version
Device does not support screensharing
conversation %@ is not eligible for CXSetSharingScreenCallAction since its relaying else where
conversation %@ is not eligible for CXSetSharingScreenCallAction since its not joined yet
[WARN] Could not find conversation for screen share call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
conversation %@ is not eligible for CXEnableVideoCallAction since its not joined yet
[WARN] Could not find conversation for enableVideo call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
[WARN] Could not find conversation for set video presentation state action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
[WARN] Could not find conversation for relaying call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
checked result: %@ if CSDFaceTimeConversationProviderDelegate should handle provider: %@
Raise to ear gesture detected, answering incoming call.
[WARN] bundleIdentifer: %@ not in the foreground, failing join call action
Performing end call action %@
[WARN] Could not find conversation for end call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
checked result: %@ if CSDGFTServiceConversationProviderDelegate should handle provider: %@
Failed to start conference connection for answered call %@: %@. Disconnecting call with relay failed
Transport did not become available for answered call %@
Conference connection ended for call %@. Disconnecting call normally
Conference connection failed for call %@: %@. Disconnecting call with relay failed
Not disconnecting call because this conference transport is %@ but the call's current relay client transport is %@
Received did stop for call that is already disconnecting/disconnected
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
For received dial call message, the dial request is SOS, so disconnecting all existing calls immediately.
Dialing without relay because cannotRelayAudioOrVideoOnPairedDevice is set (%d) or an eligible route is available (%d)
Nil call returned when dialing call. Notifying client of failed dial call for %@
Dialing with relay. isTinCanProvider: %d, message.hasSourceIdentifier: %d, message.cannotRelayAudioOrVideoOnPairedDevice: %d, eligibleRouteAvailable: %d
Nil call returned when dialing call. Notifying client of failed dial call for %@ 
Failed to start conference connection for dialed call uniqueProxyIdentifier %@: %@.
Conference connection stopped (cleanly=%d) for dialed call uniqueProxyIdentifier %@: %@
[WARN] Received %@ message, but the transport didn't become available
[WARN] Received %@ message, but we already have some non-relaying calls. Sending device busy message.
Answering without relay because wantsHoldMusic is set (%d) or cannotRelayAudioOrVideoOnPairedDevice is set (%d)
[WARN] Could not find call with other uniqueProxyIdentifier %@. All current calls: %@
No other unique proxy identifiers included. Assuming legacy behavior
[WARN] Could not find another call to group with. All calls: %@
No call was specified with SendHardPauseDigits message...
...so sending hard pause digits for call %@
...and no hosted call was found with TUHardPauseDigitsStateDigitsAvailable, so not sending hard pause digits
Setting sourceIdentifier to %@ for all calls before pulling
Opening URL for handled pushRelayingCalls message from client: %@
[WARN] Could not find any audio route with source identifier %@. Ignoring push relaying calls request
[WARN] Asked to pull relaying calls from client when no calls with an endpoint elsewhere exist. All calls: %@
Pushing hosted call: %@
Conference did not start successfully when pushing call. Resetting endpointOnCurrent device to YES for %@
Socket did not become available when pushing call. Resetting endpointOnCurrent device to YES for %@
Failed to prepare conference for pushing hosted call %@
[WARN] %@
[WARN] Bad activity type: %d
Registering for %@ user activity type and dynamic identifier %@
[WARN] Asked to register for activity type %@ (%d), but that is not supported
Unregistering for %@ user activity type and dynamic identifier %@
[WARN] Asked to unregister for activity type %@ (%d), but that is not supported
Beginning advertising user activity as current: %@
Stopping advertising user activity as current, without invalidating: %@
Invalidating user activity: %@
Error creating '%@' sandbox extension directory: %@
[WARN] Not loading registered providers because current registered providers version is %ld and minimum version is %d
registeredLocalProvidersByIdentifier: %@
registeredPairedHostDeviceProvidersByIdentifier: %@
Error while querying file attributes: %@
Error creating link to source URL '%@' with filename '%@': %@
Error removing links for filenames not in array (%@): %@
Could not deserialize data to TUCallProvider instance: %@
Registered providers object was of unexpected class %@: %@
Request timed out for transaction ID: %@
[WARN] Received results for timed out transaction with ID %@
Updating session to videoEnabled=NO after creation since current device or call does not support video
Received nil AVCSession creation block
uplinkMuted: %d
audioEnabled: %d
setVideo: %d
[WARN] Switching to video is currently not supported
videoEnabled: %d
Device does not support screen sharing with camera on, also updating screenEnabled
videoPaused: %d
audioPaused: %d
presentationState: %d
presentationRect: (%f, %f, %f, %f)
[WARN] Device doesn't support setting additional video representation
setting presentationLayout: (%u)
screenEnabled is not supported - returning
screenEnabled:%d screenShareAttributes: %@
Stopped capture of %@
[WARN] Device does not support screen sharing, ignoring to set screenEnabled
Device does not support screen sharing with camera on, also updating videoEnabled
Not setting screenEnabled since oneToOneModeEnabled is YES
Queueing completion block to execute after updating oneToOneEnabled: %d
oneToOneEnabled: %d
Started capture of %@ with configuration: %@
Queueing capture completion block to execute after current capture session is stopped
screenShareAttributes: %@
relaying: %d
addParticipant: %@ videoEnabled: %d screenEnabled: %d
[WARN] Ignoring request to add participant %@ because they're already in the conversation
removeParticipant: %@
[WARN] Could not find participant %lu in the active participant list, but they're in the list of pending removals
[WARN] Could not find participant with identifier %lu all participants: %@
identifier: %llu downlinkMuted: %d
Unknown participant identifier %llu current participants: %@
identifier: %llu audioEnabled: %d
identifier: %lu audioPaused: %d
Unknown participant identifier %lu current participants: %@
identifier: %lu videoEnabled: %d
identifier: %lu screenEnabled: %d
identifier: %llu audioAndVideoMuted: %d
identifier: %lu videoQuality: %lu visibility: %lu prominence: %lu positionalInfo: <flags: %u, position: (x: %f, y: %f, z: %f, w: %f, h: %f)>
Calling stop on screen capture
error: %@
AVCSession %@ server did disconnect
addParticipant: %@ didSucceed: %d error: %@
addParticipant: %@ Active remote participants: %@
Got captions token: %lu for participant %@
Failed to add participant %@: %@
removeParticipant: %@ didSucceed: %d error: %@
Failed to remove participant %@: %@
removeParticipant: %@ Active remote participants: %@
didUpdate: %d configuration: %@ error: %@
Failed to update session with configuration %@: %@
audioEnabled: %d didSucceed: %d error: %@
Failed to set local audio enabled (%d): %@
videoEnabled: %d didSucceed: %d error: %@
Failed to set local video enabled (%d): %@
screenEnabled: %d didSucceed: %d error: %@
Failed to set local screenEnabled (%d): %@
audioPaused: %d didSucceed: %d error: %@
Failed to set local audio paused (%d): %@
videoPaused: %d didSucceed: %d error: %@
Failed to set local video paused (%d): %@
oneToOneEnabled: %d didSucceed: %d error: %@
Failed to set oneToOneEnabled (%d): %@
executing queued up block since oneToOneEnabled succeeded
mediaStateDidChange: %d forMediaType: %d didSucceed: %d error: %@
participant: %@ audioEnabled: %d didSucceed: %d error: %@
participant: %@ videoEnabled: %d didSucceed: %d error: %@
participant: %@ remoteAudioEnabledDidChange: %d
participant: %@ remoteVideoEnabledDidChange: %d
participant: %@ remoteAudioPausedDidChange: %d
participant: %@ screenEnabled: %d didSucceed: %d remoteScreenEnabled: %d
participant: %@ remoteScreenEnabledDidChange: %d participantScreenEnabled: %d
participant: %@ remoteMediaStateDidChange: %d forMediaType: %d
screenCapture: %@ didStart: %d, captureWithError: %@
screenCapture: %@ didStop: %d, captureWithError: %@
executing queued up block since capture session stop succeeded
self: %@ reason: %d
[WARN] Ignoring invitation accept since we have previously processed one.
Secondary Thumper accounts changed from %@ to %@
[WARN] Skipping device %@ because uniqueIDOverride is nil
Attempting to find primary Thumper account in accounts: %@ devices: %@ outgoingCallerIDURI: %@
Found default paired device; setting primary Thumper account to %@
Found matching outgoing caller ID %@; setting primary Thumper account to %@
No primary Thumper account found for outgoingRelayCallerID %@ but requireMatchingCallerID is NO. Arbitrarily choosing last Thumper account from list: %@
[WARN] Could not find subscription with UUID %@. All subscriptions: %@
Associated Thumper account ID changed from "%@" to "%@"
Comparing specified Thumper account ID %@ to cached associated Thumper account ID %@
Sending CommCenter a request to set associated Thumper account ID to "%@"
Received request to set capability information %@ capabilityInfo for subscription %@
Updating VoLTE capability state with %@
Updating VoWiFi capability state with %@
Updating Thumper capability state with %@
Retrieved new telephony call capabilities for subscription %@: %@
Retrieved new system capabilities for subscription %@: %@
Setting new emergency callback mode %@.
Updating Thumper account state with %@
Updated local Thumper device ID to %@
[WARN] Could not initialize Thumper account with Thumper account dictionary: %@
Updated local Thumper accounts to %@
Updated secondary Thumper accounts to %@
Found associated Thumper account ID; updated associated Thumper account ID to %@
Found matching secondary Thumper account; updated associated Thumper account ID to %@
Subscriptions changed for client: %@
Subscription cache requires an update; associated Thumper account ID changed
Subscription cache requires an update; secondary Thumper accounts changed
Determined if endpoint should be on current device: %@; hasRelaySupport: %@, anyOtherCallHasAnEndpointElsewhere: %@, relayCall.isSOS: %@
Asked to dial call %@ but the host was unavailable
Asked to dial call %@ but the session was unavailable
[WARN] Transport did not become available when dialing call %@
Setting endpoint elsewhere for call because it can't be answered with audio or video relay: %@
Transport did not become available when answering call %@
Transport did not become available when pulling call. Resetting endpointOnCurrent device to NO for %@
Opening URL for handled pushHostedCalls message from host: %@
Disconnecting call with conference failed disconnected reason: %@
Not disconnecting call for failed conference start because it is not an endpoint here: %@
Not disconnecting call for conference didStop because it is not an endpoint here: %@
Adding %@ as an alias on account %@
Failed to add alias %@ to account %@. Validation status: %ld, validation error reason: %ld, vetted aliases: %@
Updating display name to %@ on account %@
Received IMDaemon connected notification: %@
Received preferred account changed notification: %@
Received display name changed notification: %@
Loaded last known FaceTime caller ID as %@
[WARN] Could not find lastKnownFaceTimeCallerID in keychain, error: %@
Querying Preferences to see if it exists
Found lastKnownFaceTimeCallerID: %@ in Preferences
[WARN] lastKnownFaceTimeCallerID not found in Preferences either
Removing callerID Preferences value
Saving last known FaceTime caller ID as %@
Error while saving _callerID %@
FaceTime caller ID changed from %@ to %@
Deferring FaceTime caller ID refresh until connected to IMDaemon
%@ account %@ aliases changed %@
Failed to get active contexts from client %@: %@
Error getting emergency callback mode (domain=%d, code=%d)
Failed to get Thumper device info: %@
Failed to get call capabilities: %@
Failed to get capability info for subscription %@: %@
Failed to get system capabilities for subscription %@: %@
Calling -[CoreTelephonyClient context:setCapability:enabled:with:completion:] with capability: %@ enabled: %d info: %@
Failed to set enabled=%d for capability %@ with info %@: %@
Calling -[CoreTelephonyClient context:addPhoneServicesDevice:withCompletion:] with idsDeviceIdentifier: %@
Failed to add secondary Thumper device with IDS device identifier %@: %@
Calling -[CoreTelephonyClient context:removePhoneServicesDevice:withCompletion:] with idsDeviceIdentifier: %@
Failed to remove secondary Thumper device with IDS device identifier %@: %@
Calling -[CoreTelephonyClient context:recheckPhoneServicesAccountStatus:] with capability: %@
Calling _CTServerConnectionEnableEmergencyCallBackMode() with %@
Calling _CTServerConnectionSetCapabilityExtended() with capability: %@ value: %d capabilityInformation: %@
Error setting capability for %@ calling (domain=%d, code=%d)
Error getting system capabilities (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAddDevice() with capability: %@ idsDeviceIdentifier: %@
Error adding device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesRemoveDevice() with capability: %@ idsDeviceIdentifier: %@
Error removing device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAccountStatusChanged() and _CTServerConnectionSendBarrier() with capability: %@
Retrieved mobile country code %@ and mobile network code %@ for subscription %@
Failed to get mobile network code for subscription %@: %@
Failed to get mobile country code for subscription %@: %@
Could not find a subscription matching the specified UUID %@
Error getting ISO country code (domain=%d, code=%d)
Retrieved ISO country code %@ for mobile country code %@ and mobile network code %@
Received delegate callback callCapabilitiesChanged: with context: %@ info: %@
Received context:capabilitiesChanged: with context: %@ info: %@
%@ is handling phoneServicesCapabilitiesChanged: with userInfo %@
Received kCTEmergencyCallBackModeStatusNotification with userInfo %@
Not allowing creation since activitySession doesn't support aTV handoff. session: %@
Attempted to decode association voucher for handle (%@) that is either both or neither of the primary (%@) and associated (%@) handles.
Call status changed for call: %@
for call: %@
for message: %@
transactionGroup: %@
with action: %@ for call %@
route: %@
call: %@
createConversationReportingSession using conversation: %@
reporter: %@
chat=%@
groupActivitiesReports received for conversation %@
blob recovery started for conversation %@
blob recovery timed out for conversation %@
message retry started for conversation %@
message retry failed for conversation %@
message retry succeeded for conversation %@
avc blob request message retry started for conversation %@
avc blob request message retry failed for conversation %@
avc blob request message retry succeeded for conversation %@
VoIP app %@ failed to post incoming call
VoIP app %@ no longer eligible to launch
VoIP push for app %@ dropped on the floor
receivedLetMeInRequestForConversation: %@
sentLetMeInRequestForConversation: %@ isApproved: %d
Send User Score to RTCReporting with UUID:%@ and Score:%d
Send activity session ended with startDate %@ endDate%@ session %@
Reporting %@
%@ reported blocked call with UUID %@
%@ reported known call with UUID %@
%@ is handling %@.
%@ initialized for service %@ with the following devices: %@
Determining country code using account info %@
Asking IDS to generated a pseudonym for unprefixedURI: %@ and properties: %@
[WARN] IDS failed to retrieve pseudonym with error %@
No IDSPseudonym matching string %@ was found. All pseudonym URIs: %@
Asking IDS to revoke pseudonym: %@
Asking IDS to renew pseudonym: %@
%@: Active accounts changed
%@: Devices changed
%@: Nearby devices changed
%@: Told that a pseudonym was added to our account.
%@ updated state: defaultPairedDeviceExists=%d, pairedDeviceExists=%d, telephonyCapableDeviceExists=%d, relayCapableDeviceExists=%d, availableOutgoingRelayCallerIDs=%@ deviceNames="%@"
[WARN] Could not find session for identifier %@ to perform block on transport availability for. Dropping this block on the floor
No devices found that support call provider %@. Not creating a session.
Creating session to devices: %@
[WARN] destination for device returned a nil value, so we are going to skip creating a session to it: %@
Creating session to destinations: %@
Would have created a session to an empty destination set. Returning a nil session
Destroying session %@
Asked to prepare session to end for identifier %@
Asked to prepare connected sessions to end
Accepting session for identifier %@
Canceling/declining session for identifier %@
Asked to end ending sessions
sendMessageAndStartSessionIfNecessary for service %@ and message type %@: %@
No session exists. Starting a new one by inviting all devices that support provider %@
A session exists with a destination/device that supports provider %@: %@
We'll send this message via the existing session
Starting another session to the device
Starting another session to the destination
[WARN] A session exists, but it's with a device that doesn't support provider %@. Not starting a new session
Did not create session
sendMessageAndStartSessionIfNecessary for message type %@: %@
Not starting a new session for identifier %@ because an active session for the identifier already exists: %@
No IDSSession exists. Starting a new one by inviting to destination %@
[WARN] No IDSSession exists, and given device is nil. We can't start this session
A session exists: %@
Sending the message through the existing session
Starting a new session to the destination of the device with an active session
[WARN] Cannot start a new session, no valid destination
sendMessage:andAcceptInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session for identifier is %@
A current session already exists: %@
Sending the message through the current session
Sending the message through the current session and declining this one %@
No current session already exists, so sending the message through this session %@
Could not determine session to accept for identifier %@ and message %@. All sessions: %@
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session has multiple identifiers: %@. Removing identifier %@ and not canceling/declining
_sendMessage:andCancelInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
_sendMessage:andDeclineInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
for message type: %@ identifier: %@ destinations: %@ waitUntilConnected: %d
identifier: %@ message: %@
sendMessage through session %@ for message type %@ to destinations %@: %@
sendMessage through session %@ for message type %@: %@
Not sending message because protocolVersionCustomizationBlock's preventMessageSend was set to YES for message type %@: %@
No session available to send message type %@: %@
Invite received for session %@ from (fromID=%@) destination %@ device %@ with message %@ (timestamp: %f)
... and it's from the same destination that we have an active session with (%d) or it's from the same device that we have an active session with (%d) or we don't have a session (%d)
... so we are going to handle the session's message
... but we were told to ignore the invite
... but there was no accompanying message so just ignoring the invite
... but it is from a different device than the one that we have an active session with
... and we were told to decline the invite
... and we were NOT told to decline the invite, so just ignoring it
Session ended with reason %d
Notifying delegate of connection end
[WARN] Notifying delegate of connection failure
[WARN] Notifying delegate that connection could not establish link
Not notifying delegate of messenger connection end because a different active session with the same identifier exists: %@
Received invitation accept with no data payload.
Received invitation cancel with no data payload. Assuming the invitation was answered elsewhere
Received invitation decline with no data payload. Assuming invitation was accepted by sending a message through another session
videoStreamToken: %ld
Moments XPC connection interrupted from client %@
Moments XPC connection invalidated from client %@
handle disconnect for client: %@
mediaType: %d, token: %ld localVideoRecordingEnabled: %d
Successfully started AVCMomentsRequest: %@, transactionID %@
Failed to start AVCMomentsRequest: %@, error: %@
transactionID: %@
Successfully ended request %@
Failed to end request %@: %@
Registering stream token %ld, requesterID %@ and remoteIDSDestinations %@ with new moments object
Registered new moments object %@ with supported media types: %@
unexpected supportedMediaTypes: %@, moments: %@, streamToken: %ld
[WARN] FaceTime Photos availability is %d but remoteIDSDestination is nil so changing availability to Unavailabile
FaceTime Photos is not available. Availability is %d
updating remoteIDSDestinations and returning registered session: %@ for streamToken: %ld
Asked to unregister stream token: %ld
didFinish request: %@, error: %@
new capabilities: %u
didStartProcessing request: %@
Received moments didStartProcessingRequest but moments is disabled by server bag or default
Failed to start processing request: %@
didEndProcessing request: %@, stillImageURL: %@ movieURL: %@
Ignoring processing end of request because moments is disabled by server bag or default
Failed to find session for moments stream token: %ldl
failed to find remoteIDSDestination from request: %@ in session remoteIDSDestinations: %@
Did not receive both parts of Live Photo for request: %@
Media files for Live Photo do not have the correct path extensions. stillImageURL: %@ movieURL: %@
Received an error staging the still photo: %@
Did not receive movie URL for request: %@
Received an invalid request transaction ID: %@
Received an error creating the temporary directory: %@
Received an error staging the movie file: %@
moment server disconnected: %@
url: %@ metadata: %@ isZipped: %d fromIDSDestination: %@
session: %@ request: %@ remoteIDSDestination: %@
Unzipped resource to URL: %@
Failed to unzip file at URL %@
Received non-zipped resource at %@
Received moments resource from IDS destination %@ but expected %@
Could not convert remote IDS destination %@ (token=%@) and/or from IDS destination %@ (token=%@) to token data
Received moments resource with unknown transaction ID %@. All sessions: %@
Received moments resource with missing transaction ID in metadata: %@
Received moments resource but moments is disabled by server bag or default
file url: %@ was not sent successfully
Preserving file at URL: %@
Could not retrieve contents of dictionary at URL %@: %@
Unregistering stream token: %ld
Cleaning up state for moment: %@
Delaying cleanup because moment is still registered (%d) or has outstanding requests (%lu)
url: %@ session: %@ request: %@
url: %@
Could not determine both photo URL and video URL from contents of directory: %@
Resources directory URL %@ does not exist
_handleReceivedVideoURL: %@
saving live photo with photo url: %@ video url: %@
Error saving resources with photo url: %@ video url: %@
Saving video with url: %@
Error saving resources with video url: %@
[WARN] Timeout reached for active request for transaction ID %@
momentDescriptor: %@
Initializing AVConference with client UUID %@
[WARN] Error calling getIsSendingAudio: %@
[WARN] Error calling setSendingAudio: %@
[WARN] Error calling getIsAudioPaused: %@
Setting pause audio to %d for %@
[WARN] Error calling setPauseAudio: %@
[WARN] Error calling getIsVideoPaused: %@
Setting pause video to %d for %@
[WARN] Error calling setPauseVideo: %@
Setting conference visual rectangle of size %@ for %@
Setting conference state %@ for %@
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@ for %@
Setting peer reporting identifer %@ and session identifier %@ for %@
Failed to initialize a new call with device role %d. Got callID=%ld
Starting AVConference connection with isCaller=%d callID=%ld remoteInviteDictionary=%@ capabilities=%@ destination=%@
Starting AVConference connection with isCaller=%d callID=%ld capabilities=%@ socket=%d
Stopping AVConference with callID=%ld
Canceling AVConference with callID=%ld
conference=%@ didStartSession=%d userInfo=%@
callID=%ld error=%@
callID=%ld error=%@ callMetadata=%@
callID=%ld
screenAttributes=%@ callID=%ld
videoAttributes=%@ callID=%ld
callID=%ld didPauseAudio=%d error=%@
didPause=%d callID=%ld
callID=%ld didPauseVideo=%d error=%@
[WARN] callID=%ld isStalled=%d
AVConference server died
callID=%ld parameters=%@
callID=%ld isDegraded=%d isRemoteVideo=%d
[WARN] callID=%ld isNetworkBad=%d
callID=%ld didReceiveData=%@
Ignoring to add %@ call since it is TinCan (%d) or PTT Barge Call (%d).
[WARN] Ending mutually exclusive call with uPI %@ because we have a newer incoming call that can not co-exist with it.
_endMutuallyExclusiveCalls: update=%@
Found multiple existing mutually exclusive calls.  Ending call %@
Ignoring mutually exclusive update
_endMutuallyExclusiveCalls: mutuallyExclusiveCall=%@, error=%@
Start call action fulfilled: %@
Start call action failed: %@
Join call action fulfilled: %@
Join call action failed: %@
Answer call action fulfilled: %@
Answer call action failed: %@
End call action fulfilled: %@
End call action failed: %@
Set held call action fulfilled: %@
[WARN] Set held call action failed but reverting state is allowed: %@
Set held call action failed and reverting state is not allowed: %@
Set group call action fulfilled: %@
Could not find call to group with for set group call action: %@. All call: %@
[WARN] Set group call action failed but reverting state is allowed: %@
Play DTMF call action fulfilled: %@
Play DTMF call action failed: %@
Set sending video call action fulfilled: %@
Set sending video call action failed: %@
Set muted call action fulfilled: %@
Set muted call action failed: %@
Set tty call action fulfilled: %@
Set tty call action failed: %@
Set relaying call action failed: %@
[WARN] Set relaying call action failed: %@
Action fulfilled: %@
Action failed: %@
[WARN] Not allowing requested %@ because user intent could not be validated for call source with identifier: %@
[WARN] Not allowing requested start call action because a call with same UUID already exists callWithUUID: %@, relayCallWithUUID: %@
[WARN] Not allowing requested start call action because call source %@ is at the maximum call group count of %lu: %@
[WARN] Not allowing requested action because no call was found to group with for action %@ and call source %@. All calls: %@
[WARN] Not allowing requested answer call action because a relay call with same UUID already exists: %@
[WARN] Not allowing requested action because no call was found for call UUID %@ and call source %@. All calls: %@
[WARN] Not allowing requested action because action is not allowed to be requested: %@
[WARN] Not allowing requested transaction because it is empty: %@
Allowing requested transaction: %@
[WARN] Not allowing requested transaction: %@
Dialing new call due to requested start call action: %@
Adding supplemental set held call action for existing call %@
Could not serialize handoffActivityUserInfo into a CXHandoffContext: %@
[WARN] Could not determine call source for dial request: %@. All call sources: %@
Asked to perform action %@ for call %@
Sending %@ for existing call with uniqueProxyIdentifierUUID=%@ callGroupsAllowsHold=%d supportsHolding=%d
Asked to perform start call action %@ for call %@
Call source %@ registered with configuration %@
Error while determining process action for callSource: %@, action: %@
Received add incoming call request from call source %@ with UUID %@ update %@
Query result: %@ for handle: %@ callSource: %@
[WARN] Returning error for add incoming call request because it was on the block list
[WARN] Blocking call because we are screen sharing and don't want to let that notification come through
[WARN] Returning error for add incoming call request because call did not pass DND filter. CarMode (%d) BT Audio Route (%d), CarPlay (%d)
[WARN] Returning error for add incoming call request because it is a direct call to a secondary device and relay calling is preferred over direct calling
[WARN] Update requires additional authentication before it can be answered
[WARN] There is an error: %@, but we are still asked to report call to clients
[WARN] Ignoring add incoming call request because a call already exists with the same UUID: existingCall: %@, relayCallWithUUID: %@
Call source %@ updated call with UUID %@ with update %@
[WARN] Sending %@ for existing call with uniqueProxyIdentifierUUID=%@ since it cannot co-exist with ongoing calls.
[WARN] No call found for call source %@ and UUID %@. All calls: %@
Call source %@ ended call with UUID %@ with ended at date %@ with reason %ld failure context %@
[WARN] Deferring acknowledgement of VoIP call with UUID %@ ended until minimum ring duration has passed
Setting callGroupUUID to nil for orphaned grouped call %@
[WARN] Call %@ already has a date ended
Call source %@ sent invitation for outgoing call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date started outgoing
[WARN] Call with UUID %@ is not outgoing
Call source %@ started connecting call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date started connecting
Call source %@ connected outgoing call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date connected
[WARN] Call with %@ is not outgoing
Call source %@ finished audio for call with UUID %@
Found call %@ for UUID %@, so setting hasAudioFinished
Did not find a call for UUID %@, so expediting deferred end interruption instead
Call source %@ received call with UUID: %@ crossDeviceIdentifier %@ bytesOfDataUsed %ld
Call source %@ received requested transaction %@
Call source manager %@ completed transaction group %@
Pull call action fulfilled: %@
Pull call action failed: %@
Could not find pulled call context for completed pull call action %@. All contexts: %@
Call action completed for call: %@
[WARN] Could not find call for completed call action: %@. All calls: %@
Action completed: %@
Call sources changed: %@
Ending call %@ since its backing call source %@ is no longer connected
Call controller host %@ requested transaction %@ for connection with identifier: %@
Using call source %@ for requested transaction %@
[WARN] Not allowing requested transaction because no call source was found. All call sources: %@
Marking all calls as changed because providers changed
machServiceName: %@ newConnection: %@
Accepting XPC client for %@: %@
Rejecting client for %@ because it lacks the %@ capability: %@
Started tracking call: %@
Stopped tracking call: %@
Asked to answer call %@ while disconnecting calls %@ and holding calls %@
Asked to hold calls %@ while unholding calls %@
Asked to group calls %@ with calls %@
Asked to ungroup call %@ from other calls in group %@
Asked to disconnect call %@ while ungrouping call %@
Asked to disconnect all calls %@
Asked to disconnect calls %@ while holding calls %@ and unholding calls %@ and ungrouping calls %@
Asked to set TTY type to %d for calls %@
Asked to set uplink muted to %d for calls %@
handleCallStatusChanged %@
bytesOfDataUsed: %ld callHistoryIdentifier: %@
[WARN] Invalid TUHandle generated from CXLabelHandle %@
[WARN] Invalid TULabeledHandle generated from CXLabelHandle %@
[WARN] Invalid TUSenderIdentity generated from CXSenderIdentity %@
Setting enableCriticalReliability %@
%@ should not handle conversation: %@
Conversation manager reported a new incoming conversation %@ from handle %@
Ignoring new conversation %@ since we are already tracking this with call %@
Skipping to report a new call since we already have a call with UUID: %@ for conversationUUID: %@
Conversation is not call eligible; will not report incoming call for conversation with UUID %@
Not reporting call since validNetworkReachable is false
Incoming invite is from an avMode=video participant, upgrading CXCallUpdate to video=1
Ending ringing call for conversation with UUID: %@
Could not report new multiway call from %@: %@
Also going to fulfill start call actions: %@ since we are exclusively managing this call
endCallWithUUIDAsAnsweredElsewhere: %@
endCallWithUUIDAsDeclinedElsewhere: %@
endCallWithUUIDAsLocalHangup: %@
Reporting call failure for conversation with conversationUUID %@ and callUUID %@
Found an extra conversation that needs to be cleaned up: %@
[WARN] Asked to clean up conversation from our list but could not find it in conversation manager list: %@ callUUID: %@
Not leaving conversation but stopped tracking callUUID: %@ for conversationUUID: %@
Invitation preferences were set on the action, using those for the join context: %@
Invitation preferences weren't set on the action but existed on the conversation, using those for the join context: %@
Setting uplinkMuted for action: %@ conversation: %@
Asked to hold relay calls %@ while unholding relay calls %@
Asked to answer relay call %@ while disconnecting active relay calls %@
[WARN] Ignoring request to answer call because canBeAnswered is NO: %@
Asked to answer relay call %@ while disconnecting held relay calls %@ and holding relay calls %@
Asked to answer relay call %@ while holding relay calls %@
Asked to group relay calls %@ with relay calls %@
Asked to ungroup relay call %@ from other relay calls in group %@
Asked to disconnect relay call %@ while ungrouping relay call %@
Asked to disconnect relay calls %@
Asked to disconnect relay calls %@ while holding relay calls %@ and unholding relay calls %@ and ungrouping calls %@
Received notification: %@
softlink:r:path:/System/Library/Frameworks/Intents.framework/Intents
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
ySo22UNNotificationCategoryCG
ySSG
ySo34TUConversationInvitationPreferenceCG
ySo8TUHandleCG
ySo20TUConversationMemberCG
So8NSStringC
_A7At
_A63At
So7NSErrorC
$ss21_ObjectiveCBridgeableP
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
$s13callservicesd22CompanionLinkMessengerP
$s13callservicesd13CompanionLinkP
_pSg
$s13callservicesd25AudioInterruptionProviderP
14DescriptorType
Sgyc
$s13callservicesd33AudioInterruptionPriorityProviderP
$s13callservicesd18DescriptorProviderP
x2id_t
$s13callservicesd18DescriptorResolverP
ySS_SbtG
ySSSbG
So30CSDAbstractIDSProviderDelegateC
SbSo17CXStartCallActionC_
ShySSGSo17CXStartCallActionC_
So22TUContactsDataProviderCtc
So25CSDIDSDualSessionProvider_p
_ShySSGSDySSypGSo17OS_dispatch_queueCtc
So10CSDIDSChat_pSo25CSDExternalIDSDualSessionC_
So17CXStartCallActionCS2btc
So22TUContactsDataProviderC
So17OS_dispatch_queueC
So19CXInProcessProviderC
So25CSDExternalIDSDualSessionCSo8TUHandleCSbSo12NSDictionaryCSo10CSDIDSChat_pIeyByyyya_
So25CSDExternalIDSDualSessionCSo8TUHandleCSbSDySS
GSo10CSDIDSChat_pIegggygo_
So10CSDIDSChat_p
SaySo10CSDIDSChat_pG
ySS_yptG
ShySSG
SDySSypG
So17CXStartCallActionC
ypSg
So8NSObjectC
ySS_SSGSg
ySS_SSG
ySSG
$s13callservicesd30ConversationPersistenceStorageP
$s13callservicesd37EmergencyCallbackCapabilitiesProtocolP
yycSg
yyXlGSgGc
ySi_So17OS_dispatch_queueC
So21CSDCallCenterObserver_p
SgXw
IeyB_
So16IMPowerAssertionCSg
So21CSDCallCenterObserver_pSg
So17TURouteControllerCSg
SgXw
$s13callservicesd40AudioInterruptionProviderFactoryProtocolP
37AVAudioClientInterruptionProviderType
38AVAudioSessionInterruptionProviderType
So14IDSDestinationC
$s13callservicesd32ChangeTrackingDescriptorResolverP
So23FBSDisplayLayoutMonitorC
$s13callservicesd26CallCenterObserverProtocolP
$s13callservicesd26CallCenterObserverDelegateP
So16CSDCallContainer_pyc
So20NSNotificationCenterC
So29CSDCallCenterObserverDelegate_pSgXw
ySo7CSDCallC_
tcSg
So7CSDCallC
IeyByy_
So21TUConversationManagerC
So16FTNetworkSupportC
So34CSDConversationInvitationResolving_p
So14TUFeatureFlagsC
So24UNUserNotificationCenterC
SSSo14TUConversationCc
SSSo8TUHandleCc
SSSo8TUHandleC_So14TUConversationCtc
ShySo22UNNotificationCategoryCG
ySo21UNNotificationRequestCcSg
ySS_So21UNNotificationContentCtcSg
ySScSg
ySSG
ySo20TUConversationMemberC_G
SaySSG
Sg_ABt
So14TUConversationCSg
So18TUConversationLinkCSg
SgXw
SgXwz_Xx
So21UNNotificationRequestC
So13AVAudioPlayerCG
10descriptor_t
SgSo7CSDCallC_
So7CSDCallC
SgIeggyr_
So21CSDFaceTimeIDSServiceC
$s13callservicesd24UserNotificationProviderP
$s13callservicesd24UserNotificationResponseP
So21OS_dispatch_semaphoreCSg
SSSg
ySDySSypGG
SaySDySSypGG
So14AVAudioSessionC
So14AVAudioSessionCSg
$s13callservicesd23ProcessObserverProtocolP
SDySSSDy
So26BKSApplicationStateMonitorC
tcSg
ySS_
tcSg
_SitG
SiGIegg_
SgXw
So12NSDictionaryCIeyBy_
So8NSStringC
IeyByyy_
IeyByy_
$s13callservicesd19NSNumberConvertibleP
SDySSSDyS2SGG
ySS_SDyS2SGtG
ySS_SStG
SDyS2SG
$s13callservicesd28IDSDeviceDestinationResolverP
Sbyc
So9IDSDeviceCSgSSc
So15CSDIDSTransportCSg
G0R0_
$s13callservicesd24DirtyCallManagerProtocolP
ySo7CSDCallCcSg
SaySo7CSDCallCG
ShySo7CSDCallCG
So7CSDCallCIeyBy_
$s13callservicesd33PendingMembershipTrackerServerBagP
$s13callservicesd32PendingMembershipTrackerDelegateP
$s13callservicesd33PendingMembershipTrackerMessengerP
$s13callservicesd31PendingMembershipTrackerStorageP
So36CSDPendingMembershipTrackerMessenger_pSgXw
So35CSDPendingMembershipTrackerDelegate_pSgXw
SDySS
So20TUConversationMemberC
3key_SDySS
G5valuetSg
3key_SDySS
G5valuet
ShySo8TUHandleCG
ySo26CSDConversationParticipantC_G
SaySo20TUConversationMemberCG
SaySo20TUConversationMemberCGG
ShySo8TUHandleCG18delegatedToMembers_
11responseKeyt
So8TUHandleC6sender_t
SaySo8NSNumberCG
So8NSObjectCSg
So8TUHandleCSg
_SDy
ypGSSSo17IDSMessageContextCt
ySo7TURouteCG
yyXlG
_ypt
ySo11NSPredicateCG
ySo20UNNotificationActionCG
ySSSo8NSObjectCG
ySSSo8NSStringCG
yS2SG
ySo8TUHandleCG
ySo24UNNotificationAttachmentCG
_Sb9available_Si5counttt
Sb9available_Si5counttG
ShySo22UNNotificationCategoryCGG
ySo12CHRecentCallCG
ySo15CNKeyDescriptor_pG
ySo20TUConversationMemberCG
SaySo11IDSEndpointCG
ySaySo11IDSEndpointCGG
ySo11IDSEndpointCG
ySo9IDSDeviceCG
ySo28TUConversationLinkDescriptorCG
ySo47CSDMessagingConversationLinkGeneratorDescriptorCG
So7CSDCallCSg
ySo7CSDCallCSgG
ySo12TUAudioRouteCG
ySo30CSDMessagingConversationMemberCG
ySo26CSDConversationParticipantCG
ySo21RPCompanionLinkDeviceCG
ySSSaySo9CNContactCGG
ySb_
_pSgtc
yySb_
_pSgtcG
ySo18TUConversationLinkCG
SgSo7CSDCallC_
So13AVAudioPlayerCG
ySo7CSDCallCG
_yptG
ySSSDyS2SGG
ySS_SSGt
ySS_SSGG
SgXw
_ypt
ySSSo9CNContactCG
ySo8NSStringCG
ySDy
ypG5event_ADSg7optionst
_pGG
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGG
ySSypG
SS_ypt
_So23TUScreenShareAttributes_pt
So23TUScreenShareAttributes_pG
_Shy
ySo8NSNumberCG
ySSSaySo8NSNumberCGG
yypG
ySo25TUConversationParticipantCG
GSpySo8NSObjectCSgGSgSpyypGSgytIeglllr_
ShySo21RPCompanionLinkClientCG
So21RPCompanionLinkDeviceC
ySo21RPCompanionLinkDeviceC
_pGIegg_
SgXw
SgXwz_Xx
So21RPCompanionLinkClientC
_pGIegg_
_yptG
ySiG
SaySiG
So7CSDCallC
So12TUCallCenterC
SDySSypGSg
So6TUCallCSg
ySo8TUHandleC_G
So14NSUserDefaultsC
ypGSg
So12NSDictionaryC
$ss12IdentifiableP
So22CSDCallStateControllerCSgXw
SaySo17CSDCallDataSourceCG
So19CSDDirtyCallManager_p
SgXw
$s13callservicesd24LocalAudioSystemProviderP
SS3key_yp5valuetSg
ySSSDy
ySSyXlG
ySDy
ypG5event_ACSg7optionst
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pG
ySSSiG
ySSSaySo28TUConversationLinkDescriptorCGG
ySSSay
ySSSo7TURouteCG
ySSSo21RPCompanionLinkDeviceCG
So12RTCReportingCG
So14OS_nw_activity_pG
So20TUConversationReportCG
So14OS_nw_activity_p
SDySS
SDySS
ySo8NSNumberCSSG
So23TUScreenShareAttributes_p
_AAt
38AVAudioSessionInterruptionProviderType
37AVAudioClientInterruptionProviderType
yq_q0_q1_G
Sdyc
GSgXw
_pSg
$s13callservicesd21RingtoneProviderAlertP
$s13callservicesd24RingtoneProviderProtocolP
So14CNContactStoreC
_pSg
So21OS_dispatch_semaphoreC
_pSgSo20TLAlertConfigurationCc
So15CNKeyDescriptor_p
$s13callservicesd13RouteProviderP
$s13callservicesd25DeselectableRouteProviderP
$s13callservicesd029PairedHostDeviceRouteTrackingE8ProviderP
$s13callservicesd31ConversationLinkManagerDelegateP
So13CSDIDSServiceC
So24CSDConversationServerBag_p
So38TUConversationLinkDescriptorDataSource_p
So34CSDConversationLinkManagerDelegate_pSg
SaySo28TUConversationLinkDescriptorCG
So12IDSPseudonymC
So28TUConversationLinkDescriptorC
_pSgIegyg_Sg
So35TUMutableConversationLinkDescriptorC
SnySiG
ySnySiGG
ShySo8TUHandleCGSg
So18TUConversationLinkCSg
_pSgIeggg_
So8TUHandleC
So28TUConversationLinkDescriptorCSg
_pSgIeggg_
_pSgIegyng_Sg
So18TUConversationLinkC
ySaySo28TUConversationLinkDescriptorCGG
ySaySo28TUConversationLinkDescriptorCGGSSG
SSSo11NSPredicateCIegnr_
ShySo18TUConversationLinkCGSg
_pSgIeggg_
SaySo18TUConversationLinkCGSg
_pSgIeggg_
So31CSDMessagingConversationMessageCSgSo6NSDataCSgSo7NSErrorCSgIeyByyy_
So31CSDMessagingConversationMessageCSg
_pSgIegggg_
So40CSDMessagingEncryptedConversationMessageC
_A13At
So18TUConversationLinkCSg
_pSgIeggg_Sg
So18TUConversationLinkCSgSo7NSErrorCSgIeyByy_
So6NSDateCSgSo7NSErrorCSgIeyByyy_
So7NSErrorCSgIeyByy_
So28TUConversationLinkDescriptorCSgSo7NSErrorCSgIeyByy_
So5NSSetCSgSo7NSErrorCSgIeyByy_
So7NSArrayCSgSo7NSErrorCSgIeyByy_
SgXw
$s13callservicesd14VoucherManagerP
So20TUVouchingEnablement_p
So13CSDIDSService_p
So14IDSPushHandlerC
SayySb_
_pSgtcG
_pSgIegyg_
So9TUVoucherC
_pSgIegyg_Sgz_Xx
So9TUVoucherCSgSo7NSErrorCSgIeyByy_
_pSgIeggg_Sg
So9TUVoucherCSg
_pSgIeggg_
_pSgIeggg_Sgz_Xx
SDySSSay
So12RTCReportingCG
So20TUConversationReportCG
So14OS_nw_activity_pG
SDySS
So19CSDAppleIDUtilitiesC
So12RTCReportingCSg
So14TUConversationC
So10CSDIDSChatC
SaySo6TUCallCG
So7TURouteC
So22CSDReportingControllerC
So23RTCSecureHierarchyTokenC
$s13callservicesd15RTCReporterInfoP
SiSg
SdSg
SbSg
$s13callservicesd37ScreenSharingActivityManagerProvidingP
$s13callservicesd36ScreenSharingActivityManagerDelegateP
So39CSDScreenSharingActivityManagerDelegate_pSgXw
So23TUScreenShareAttributes_pG
3key_
G5valuetSg
3key_
G5valuet
_GSg
SgXw
_G_G
SgXwz_Xx
Ieggn_
SDySS
SDySS
$ss12CaseIterableP
ySi_
SS3key_
5valuetSg
SS3key_
5valuet
Sg_ABt
Sg_ABt
_AAt
SS3key_
5valuetSg
SS3key_
5valuet
SS3key_
5valuetSg
SS3key_
5valuet
SDySSSbG
SDySS
$s13callservicesd19UserIntentValidatorP
z_Xx
_pXp
$s13callservicesd21CallHistoryDataSourceP
$s13callservicesd10RecentCallP
So24CHCallInteractionManagerC
So21TUCallProviderManagerC
_pcSg
So18TUConversationLinkCSg
SgcSg
ySuG
SaySo9CNContactCG
ySo8CHHandleCG
_pSg
So13TUDialRequestC
So7NSErrorCSg
ySo18TUConversationLinkCG
ySo7CSDCallCG
ySo21RPCompanionLinkClientCG
ySo20TUNearbyDeviceHandleCG
ySo25TUConversationParticipantCG
_pSg
So14TUCallProviderC
Sg_ABt
Sg_ABt
Sg_ABt
Sg_ABt
Sg_ABt
_GSg_ADt
$s13callservicesd25HoldMusicProviderProtocolP
So19AVSpeechSynthesizerCSg
So13AVAudioPlayerCSg
SgXw
So16CARSessionStatusC
ySbcSg
SgXw
IeyBy_
So27TUCallScreenShareAttributesC
So13CSDAVCMoments_p
SDySS
So20CSDUnknownCallFilterC
So38TUContactsDataProviderAppleCareHandlesC
So45CSDCarrierBundlePhoneNumberProviderControllerC
SDySSSaySo9CNContactCGG
SDySSSo7TURouteCG
ySo7TURouteCcSg
SaySo7TURouteCG
So7TURouteCIeyBy_
SgXw
SgXwz_Xx
ySo21RPCompanionLinkClientCG
ySo21RPCompanionLinkClientCG
ySo21RPCompanionLinkClientCGSgXw
SaySo21RPCompanionLinkDeviceCG
ySo21RPCompanionLinkClientCGSgXw
So21RPCompanionLinkDeviceCIegn_
So21RPCompanionLinkDeviceC
Iegny_
So7CSDCallCSbIggd_
So6TUCallCSbIggd_
$s13callservicesd31ConversationInvitationResolvingP
ShySo34TUConversationInvitationPreferenceCG
yShySo34TUConversationInvitationPreferenceCG_
_pSg
So26CSDDeviceLockStateObserverCSg
A2ASgSbSo20TUConversationMemberCSo8TUHandleCSayADGAGSayAFGSaySo26CSDConversationParticipantCGSo0A4LinkCSgSo0A6ReportCSaySo39CSDMessagingConversationActivitySessionCGSSSgARSg
Iegnnnygggggggggggy_
So15CSDConversationC
ShySo26CSDConversationParticipantCG
ShySo20TUConversationMemberCG
So6NSUUIDCA2BSg
So20TUConversationMemberCSo8TUHandleCSo7NSArrayCA3JSo0B4LinkCSgSo0B6ReportCAJSo8NSStringCSgSo39CSDMessagingConversationActivitySessionCSg
IeyByyyyyyyyyyyyyyyy_
_pSgIegr_
SgXw
SgXwz_Xx
$s13callservicesd26ParticipantUpdateSanitizerP
So17CSDVoucherManager_p
So32IDSGroupSessionParticipantUpdateCIeyBy_
So30CSDMessagingConversationMemberC
So49CSDMessagingConversationParticipantDidJoinContextC
So32IDSGroupSessionParticipantUpdateCIegg_
So32IDSGroupSessionParticipantUpdateC
Ieg_
So17OS_dispatch_groupC
$s13callservicesd26DescriptorTrackingProviderP
$s13callservicesd21AudioResolverProtocolP
14DescriptorType
So22CSDTTYProviderObserver_p
So14TUFeatureFlags_p
Sg_ABSbtcSg
SgXw
SDyx
yx_xGG
qd__
SaySo12TUAudioRouteCG
So12TUAudioRouteCSg
So12TUAudioRouteC
SaySo12TUAudioRouteCGz_Xx
$s13callservicesd20NearbyDeviceProviderP
$s13callservicesd12NearbyDeviceP
10DeviceType
SDySS10DeviceType
$s13callservicesd35ConversationLinkSyncManagerDelegateP
$s13callservicesd37ConversationLinkSyncManagerDataSourceP
_pSgXw
So14IDSRateLimiterCySo8NSStringCG
SdSi_
$s13callservicesd21IDSInteractorDelegate33_735B00354BCC442560C6AD87FDD31012LLP
_pSgXw
So24OS_dispatch_source_timer_p
So10IDSServiceCSg
SgXw
SgXwz_Xx
SSIegg_
ySS__G
SDySSSiG
SaySayypGG
So14NSMutableArrayCSg
SaySo47CSDMessagingConversationLinkGeneratorDescriptorCG
So27CSDMessagingLinkSyncMessageCSg
SaySSGSg
So13OS_xpc_object_p
So20IDSIDQueryControllerC
SSSgSg
So7NSArrayCABIeyByy_
SaySSGAAIeggg_
SaySo11IDSEndpointCGIegg_
3key_yp5valuet
$s13callservicesd40AudioInterruptionActivationStateObserverP
G10identifier_t
$s13callservicesd18BlastDoorInterfaceP
ScPSg
So6NSDataC
So6NSDataCSgSo7NSErrorCSgIeyByy_
IeghH_
ytIeghHr_
ypXp
$s13callservicesd22UserNotificationCenterP
So23CSDCallFilterControllerC
SDySS
So16CSDClientManagerCyyXlyXlGSg
So22UNNotificationResponseC
_ShySo22UNNotificationCategoryCGtG
SgXw
SgXwz_Xx
So16CSDClientManagerC
SgXw
$s13callservicesd29DiscoveryModeProviderProtocolP
$s13callservicesd19VoicemailDataSourceP
$s13callservicesd9VoicemailP
So19CoreTelephonyClientC
ShySuG
Sb9available_Si5counttG
_pSg
3key_Sb9available_Si5countt5valuetSg
3key_Sb9available_Si5countt5valuet
SaySo8TUHandleCG
ShySo25TUConversationParticipantCG
SaySo25TUConversationParticipantCG
So9CHManagerC
$s13callservicesd36CSDCollaborationStateManagerDelegateP
13callservicesd36CSDCollaborationStateManagerDelegate_pSg
SDySS
SgXw
SgXwz_Xx
So7NSErrorCSgIeyByy_
So19LSApplicationRecordCSg
So20CSDBlockedCallFilterC
So12IDSCTAdapterC
So8IDSCTSIM_p
$s13callservicesd21SoundProviderProtocolP
So17TUCallSoundPlayerC
ySo21RPCompanionLinkDeviceC
ySo21RPCompanionLinkDeviceC_
SDySS
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pGG
SDySS
ySDy
ypG5event_ACSg7optionst
_pGG
Sg11localUpdate_AB5foundAB4lostAB7changedt
ySDy
ypG5event_ADSg7optionst
_pGG
y_AAy_
ySDy
ypG5event_ADSg7optionst
_pGGG
SgXw
SgXwz_Xx
_pGIegg_
ypGABSgIeggg_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGG
y_AAy_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGGG
ypGABSgA2C
_pSgIegggg_Iegggg_
ypGSgAC
_pSgytIegnnnr_
So12NSDictionaryCSgACSo7NSErrorCSgIeyByyy_
ypGSgAC
_pSgIegggg_
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
GAKG
So21RPCompanionLinkDeviceCSg
Iegn_
_pSgIegg_Sg
_pIegn_
Iegn_
_pGSo17OS_dispatch_queueCG
ySDy
ypGSg8response_AD7optionst
_pGIegn_
ySDy
ypGSg8response_AD7optionst
_pGIegg_
Sb_yttIegn_
AE_pGG
GAE_pGGSo17OS_dispatch_queueCG
Iegn_
ypGIegn_
_p_G
AE_pGGGSDy
ypGG
ySbAD_pGSo17OS_dispatch_queueCGG
ytIegn_
_pGSo17OS_dispatch_queueCG
SaySDyS2SGG
So10AVCMomentsCSg
So21CSDAVCMomentsDelegate_pSgXw
SDySSSo8NSObjectCGSg
ySS_So8NSStringCtG
SDySSyXlG
6status_t
$s13callservicesd22ASCIIStringConvertibleP
SgXw
SgXwz_Xx
So7TURouteCSg
So17TURouteControllerC
So20CSDAVCMomentsRequest_p
So38CSDNeighborhoodActivityConduitDelegate_p
SgXwz_Xx
So20TUNearbyDeviceHandleC
$s13callservicesd35NeighborhoodActivityConduitDelegateP
So10NSMapTableCySo38CSDNeighborhoodActivityConduitDelegate_pSo17OS_dispatch_queueCG
ShySo20TUNearbyDeviceHandleCG
So20TUContactsDataSource_p
SDySS
So24OS_dispatch_source_timer_pSg
yShySo8TUHandleCG
ySS_SSGG
_AAt
ySuG
ySi5count_Sb11isAmbiguoustG
Si5count_Sb11isAmbiguoust
ySaySo7TURouteCGG
ySaySo7CSDCallCGG
ySo25TUConversationParticipantC_G
So38CSDNeighborhoodActivityConduitDelegate_pIegg_
_pGSo17OS_dispatch_queueCG
_pGSo17OS_dispatch_queueCGAEG
ySDy
_p_G
ySDy
ypGSg8response_AE7optionst
yAdH_p_GG
ySDy
ypGSg8response_AF7optionst
yAeI_p_GGAfG_AfHtG
ySDy
ypGSg8response_AG7optionst
yAfJ_p_GGAgH_AgItG
ySDy
ypGSg8response_AH7optionst
yAgK_p_GGAhI_AhJtG
GGAK_pG
ySDy
ypGSg8response_AC7optionst
ySDy
ypGSg8response_AD7optionst
AC_pGG
AD_pGG
GAD_pGG
_pGIgg_Iegy_
_pGIegg_Iegg_
_pGIegn_
_A15At
yShySo8TUHandleCG
yShySo8TUHandleCG
GGSayAEGG
yShySo8TUHandleCG
GGSDySS
yShySo8TUHandleCG
GGSDySS
GGSo17OS_dispatch_queueCG
yShySo8TUHandleCG
GGSDySS
GGSo17OS_dispatch_queueCGG
_pGSo17OS_dispatch_queueCG
_pGSo17OS_dispatch_queueCGAEG
ySDy
ypGSg8response_AG7optionst
yAfJ_p_GGAgH_AgItG
ySDy
ypGSg8response_AH7optionst
yAgK_p_GGAhI_AhJtG
GGAK_pG
ySo20TUNearbyDeviceHandleC_G
SaySDy
ypGG
ySDy
ypGG
GACG
GADGG
GAEGGSo17OS_dispatch_queueCG
Xoz_Xx
ySDy
ypG5event_ADSg7optionst
_pGSo17OS_dispatch_queueCG
ySDy
ypG5event_ACSg7optionst
So20TUNearbyDeviceHandleCSg
_pIegngzo_
ySDy
ypG5event_ADSg7optionst
_pGSo17OS_dispatch_queueCG
So20TUNearbyDeviceHandleCSg
_pIegngzo_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pG
_pGSo17OS_dispatch_queueCG
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pG
So20TUNearbyDeviceHandleCSg
_pGIegngo_
_pGG
_p_G
AD_pGGG
_p_G
So20TUNearbyDeviceHandleCSg
_pGSo17OS_dispatch_queueCG
_pGIegn_
_p_G
_pGIegg_
ySDyS2SGG
domain
error
_os_unfair_lock_opaque
rawValue
RawValue
ArrayLiteralElement
Element
_rawValue
osd_type
__Anonymous_field1
osd_decoder
osd_title
_nsError
_ObjectiveCType
Code
_ErrorType
osdd_library
osdd_type
authenticationFailed
operationNotSupported
insufficientDeviceInfo
authenticatedDeviceNotFound
alreadyAuthenticated
authenticationCompleted
boxed
_beginOrUpdate
_end
_resetState
_activeDescriptor
rawValue
ArrayLiteralElement
RawValue
Element
DescriptorType
default
high
proxy
local
isAccountActive
isDestinationValid
destinationsGenerator
outgoingSessionProviderGenerator
outgoingChatGenerator
contactsDataProvider
queue
queue
privateAPIValidator
$__lazy_storage_$_applicationStateValidator
donatedIntentValidator
backgroundBluetoothAccessValidator
mediaRemoteStateValidator
_emergencyCallbackPossible
emergencyCallbackCapabilitiesDidChange
preventDetachAfterEmergencyCallTimeoutDeterminationHandler
dispatchAfterHandler
dispatchCancelHandler
queue
callCenterObserver
preventDetachAfterEmergencyCallTimeoutWorkItem
lock
state
subscribed
initialized
cancelled
powerAssertion
powerAssertionDescription
callCenterObserver
routeController
acquirePowerAssertionHandler
releasePowerAssertionHandler
AVAudioSessionInterruptionProviderType
AVAudioClientInterruptionProviderType
uniqueIdentifier
name
deviceType
isCurrentlyPicked
idsDestination
localKey
requestKey
responseKey
provider
queue
displayLayoutMonitor
$__lazy_storage_$_processObserver
bundleIdentifier
callContainerClosure
notificationCenter
delegate
triggers
callChanged
queue
conversationManager
ftNetworkSupport
invitationResolver
featureFlags
notificationIdentifiersByConversationUUID
carPlayNotificationIdentifiersByConversationUUID
faceTimeNotificationCenter
facetimeIsShowingOnScreen
openURL
unlockAndOpenSensitiveURL
localizeConversationName
localizeHandleName
localizeHandleNameWithConversation
notificationType
categories
replace
removeNotification
updateBadgeValue
callCenterObserver
deviceIsHomePod
playersForSounds
letMeJoin
RawValue
FaceTime
Phone
RawValue
activeDescriptor
DescriptorType
audioSession
isLocal
_activationContext
activeDescriptor
DescriptorType
RawValue
queue
processInfoByBundleIdentifier
applicationMonitor
processStateChanged
processStateChangedWithBundleID
updateBadgeValue
queue
openURL
localizeHandleName
notificationType
categories
replace
removeNotification
fitnessPlusAppBundleID
fitnessPlusDaemonBundleID
routesDidChangeHandler
didPickRouteHandler
didDeselectAllRoutesHandler
supportsPrimaryCalling
hasRelayiCloudAccount
idsDeviceForIDSDeviceIdentifier
queue
callCenterObserver
nearbyDeviceMonitor
idsDeviceDestinationResolver
conversationManager
nearbyDeviceRoutes
activeRelayClientTransport
currentCallsSupportNearbyDevices
callChanged
queue
dirtyCallsArray
dirtyCallsSet
messenger
delegate
storage
serverBag
underlyingStorage
transactionUUID
mode
member
dateCreated
Host
Client
invalidHandle
Rejection
Approval
subject
cancellables
messenger
target
buffer
proxiedMessageCount
buffering
proto
resource
clientsPendingAuthentication
queue
maxDuration
unknownShortCallSignal
knownCallerSignal
junkCallSignal
linkCreatedSignal
silenceUnknownCallersEnabledObserver
link
message
options
protobufEncodeError
protobufDecodeError
invalidMessageContent
unknown
request
response
DescriptorType
callStateController
callChanged
dataSources
dirtyCallManager
callOutgoing
accessibilityDefaultRoute
audioSourceKey
ignoresBluetoothDeviceUID
beginOrUpdate
preserve
queue
resolver
audioInterruptionProviderPool
ringtoneProvider
soundProvider
holdMusicProvider
discoveryModeProvider
notificationCenter
deferredEndWorkItem
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
mediaServicesWereResetObserver
audioSessionInterruptionObserver
audioController
factory
localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
avAudioClientInterruptionProvider
availability
photoRequestSuccessCount
photoRequestFailureCount
medianRequestDuration
meanRequestDuration
didBeginPlaying
contactStore
currentAlert
endedPlayingSemaphore
alertGenerator
playbackObserverGenerator
DescriptorType
service
serverBag
renewPseudonymTask
dataSource
linkSyncManager
generateKeyAgreement
delegate
RawValue
completionQueue
vouchingEnablement
idsService
idsPushHandler
timeout
verificationCache
finished
pending
RawValue
queue
relayDeviceRouteChangesByCallUUID
groupUUIDToConversationReportingSessions
conversationUUIDToConversationReport
groupUUIDToConversationInfo
callUUIDToCallReportingSessions
callUUIDToGFTCallReportingSessions
callUUIDtoConversationUUID
conversationGroupUUIDToCallUUID
callUUIDtoConversationGroupUUID
uuidToNWActivity
uuidToNWActivityConnecting
idsSessionUUIDToChatUUIDs
callInfosPendingScoreForCallUUIDs
userScoreEnabled
appleIDUtilities
callInfo
rtcReporting
callUUID
durationMs
relativeStart
relativeEnd
bucketedDuration
endReason
providerErrorCode
providerEndedReason
setupTimeMs
connectionTimeMs
relay
incoming
connected
currentlyGrouped
relayDeviceRouteChanges
filteredOutReason
verficationStatus
knownCallerStatus
isOwnNumber
isConversation
fromLink
returnedCall
isSiriSuggested
isKnownContact
isVerifiedAppleCare
isSignedIntoiCloud
junkConfidence
identificationCategory
isKnownCaller
userScore
delegate
subscriptionsById
sessionsById
remoteAttributesById
messenger
observer
featureFlags
carPlayObserver
unknown
message
unknownFields
rawData
groupUpdate
resource
messageData
fromID
context
isInitiator
groupUuid
participantID
participantDestinationID
updateType
updateSubtype
fromServer
serverDate
participantData
clientContextData
members
participantIds
relaySessionID
resourceData
metadata
AllCases
identifiers
policyInfos
identifierHash
userAccountInfoData
contacts
identifier
_memberAssociationPrimaryInfo
namePrefix
givenName
middleName
familyName
nameSuffix
nickname
imageData
conversationIdentifier
deviceToken
_associationVoucherData
success
memberToken
UNRECOGNIZED
unknown
pointOfPlayback
controlCenterWithActivity
controlCenterWithoutActivity
supportedTypes
_conversationGroupUuidString
_handleData
_identifier
_avcIdentifier
expanse
RawValue
timeout
isAmbiguous
processObserver
donatedIntentCache
validator
isValid
streamToken
requesterID
queue
callInteractionManager
callHistoryDataSource
callProviderManager
pendingCallIdentifiers
supportedMediaTypes
supportedProviders
mostRecentCallDate
inCallServiceProcessObserver
supportsDisplayingFaceTimeAudioCalls
openURL
dialRecentCall
findConversationLink
featureFlags
notificationType
replace
removeNotification
updateBadgeValue
privateKey
soundType
provider
isVideo
region
uuid
speechSynthesizerEventHandler
activeDescriptor
speechSynthesizer
audioPlayer
finishedUtterance
startedUtterance
canceledUtterance
DescriptorType
carSessionQueue
carSessionStatus
carPlayScreenConnectionChanged
sharerHandleValue
currentRemoteAttributes
deviceFamily
style
displayScale
scaleFactor
originalWidth
originalHeight
RawValue
type
failed
iPhone
iPad
iPod
watch
audioAccessory
RawValue
moments
remoteIDSDestinations
isRegistered
activeRequestsByTransactionID
callCenterObserver
contactStore
appleCareHandles
carrierBundleController
invalidPublicKeyData
requestKeyExhausted
responseKeyExhausted
cryptoFailed
_routesByUniqueIdentifier
routesDidChangeHandler
routeWasPickedHandler
timedOutPickingRouteHandler
queue
routeProviders
pendingRouteContext
pickWhenAvailableRouteIdentifier
pendingPickedRouteTimeout
route
routeProvider
deviceInvitationPreferences
required
optional
queue
storage
lockStateObserver
interruptionDescriptor
interruptionDeferredEndDescriptor
ringtoneDescriptor
soundDescriptorAction
holdMusicDescriptor
discoveryModeDescriptor
queue
routesDidChangeHandler
pairedHostDeviceRoutes
contactIdentifier
providerRingtoneSoundURL
uuid
isVideo
handle
completionQueue
vouchingEnablement
voucherManager
identifier
version
queue
callCenterObserver
ttyProviderObserver
localAudioSystemProvider
deviceSupportsRingtone
featureFlags
lastPlayedSoundDate
lastPlayedSoundType
soundDescriptorActionResolver
resolvedDescriptor
resolutionChangedHandler
DescriptorType
UpdateContext
call
triggers
items
timeProvider
expiration
item
routesDidChangeHandler
audioRoutes
queue
localAudioSystemProvider
callCenterObserver
ttyProviderObserver
callAudioCategory
callAudioMode
lastUserPickedRoute
callAudioInterruptionState
inactiveWithPrematurelySelectedRoute
inactive
active
DeviceType
queue
nearbyDeviceProvider
devicesChangedHandler
devicesByEffectiveIdentifier
delegate
dataSource
interactor
serverBag
recoverRateLimiter
recoverResponseRateLimiter
messageQueue
queue
stateHandle
intervalCalculator
actionByType
service
knownDestinations
immediate
delayedShort
delayedLong
checkIn
timer
destinations
currentIndex
failedSending
replacing
appendingNew
newOnly
TUDataSource
remoteMissingIdentifiers
localMissingIdentifiers
localDescriptorsBehindRemote
remoteDescriptorsBehindLocal
delta
initial
featureFlags
queue
idsQueryController
serverBag
$__lazy_storage_$_supportsConversationOneToOneModeEnabled
$__lazy_storage_$_pushTokenForSelf
providerType
category
mode
activationContext
priority
wantsHoldMusic
mediaPlaybackOnExternalDevice
wantsMixingVoiceWithMedia
wantsExpeditedAudioSession
wantsA2DP
operationMode
activationStateObserver
callProviderAuditToken
callProviderBundleIdentifier
requiresPublishingDynamicMicAttribution
avAudioSession
avAudioClient
blastDoor
typeMismatch
emptyResult
callFilterController
phoneNotificationCenter
faceTimeNotificationCenter
providersByIdentifier
queue
providers
clientManager
DescriptorType
queue
telephonyClient
contactStore
voicemailDataSource
postedVoicemailIdentifiers
pendingVoicemailIdentifiers
mostRecentVoicemailDate
mostRecentNonVisualVoicemailDate
localizeVoicemailName
callbackVoicemail
openURL
unsubscribedVoicemailInfoForUUID
notificationType
replace
removeNotification
updateBadgeValue
usTollFreePrefixes
callHistoryManager
delegate
queue
highlightIdentifierOpened
highlightIdentifierToBundleID
bundleIDToHighlightIdentifier
highlightIdentifierToConversationUUID
highlightIdentifierNoAppInstalled
processObserver
idsCTAdapter
activeDescriptor
player
DescriptorType
callUUID
lock
uuid
relativeStart
conversationBaseTime
hasLink
isPending
relativeEnd
duration
uPlusOneModeAtStart
uPlusOneModeAtEnd
maximumMemberCount
initialMemberCount
finalMemberCount
maxNumberOfParticipants
AVCBlobRecoveryAttempts
AVCBlobRecoveryTimeouts
numberLMIRequests
numberLMIApprovals
numberLMIDismissals
messageRetryAttempts
messageRetryFailures
messageRetrySuccesses
avcBlobRecoveryMessageRetryAttempts
avcBlobRecoveryMessageRetryFailures
avcBlobRecoveryMessageRetrySuccesses
timebase
hasHadActiveParticipants
cumulativeTimeAlone
timeAloneAtEnd
lastTimeNotAlone
queue
client
authenticationController
activated
deviceUpdatedPublisher
deviceFoundPublisher
deviceLostPublisher
deviceChangedPublisher
cancellables
stateHandle
messagePublishers
eventPublishers
manager
DeviceType
nonce
iCloudAccountToken
iTunesAccountToken
homeUserIdentifierTokens
moments
delegate
service
accessGroup
account
unhandledError
noPassword
unexpectedPasswordData
unexpectedItemData
queue
callCenterQueue
conversationManager
routeController
pickedRouteUniqueIdentifier
avcRequest
session
messenger
cancellables
queue
conversationManager
conversationServerBag
idsService
vouchingEnablement
voucherManager
delegatesToQueues
featureFlags
networkSupport
handedOffConversations
joinApprovalState
localTVDevices
joinCompletionSubjects
contactStore
pendingJoinConversationIDs
activeConversationUpdateSubject
activeConversationUpdateCancellablesByDeviceID
messageProxy
idsProxyCleanupTimer
conversationIDsWithActivities
stateHandle
contactForwardingCanceler
device
member
conversationUUID
conversationGroupUUIDHash
knownParticipantsPublisher
began
ended
none
requested
cancelled
link
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>Application-Group</key>
<array>
<string>com.apple.callhistory</string>
</array>
<key>BSServiceDomains</key>
<dict>
<key>com.apple.callkit</key>
<dict>
<key>MachName</key>
<string>com.apple.callkit.service</string>
<key>Services</key>
<dict>
<key>com.apple.callkit.service.channel</key>
<dict/>
</dict>
</dict>
</dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>callservicesd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.TelephonyUtilities</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>callservicesd</string>
<key>CFBundlePackageType</key>
<string>FMWK</string>
<key>CFBundleShortVersionString</key>
<string>1.0</string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>20A5283l</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.0</string>
<key>DTSDKBuild</key>
<string>20A5283l</string>
<key>DTSDKName</key>
<string>iphonesimulator16.0.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A6200i</string>
<key>LSBackgroundOnly</key>
<true/>
<key>MinimumOSVersion</key>
<string>16.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
<key>_CFBundleUseAppleLocalizations</key>
<true/>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.telephonyutilities.callservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>development</string>
<key>com.apple.CallHistory.sync.allow</key>
<true/>
<key>com.apple.CallKit.call-directory</key>
<array>
<string>synchronize-extensions</string>
<string>compact-store</string>
<string>query-identification-entries</string>
</array>
<key>com.apple.CallKit.call-directory.extension-host</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>phone</string>
<string>voice</string>
<string>identity</string>
<string>data-usage</string>
<string>data-allowed</string>
<string>data-allowed-write</string>
<string>carrier-space</string>
<string>carrier-settings</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.FaceTime.CallLaunch</key>
<true/>
<key>com.apple.FaceTime.FTConversationService</key>
<array>
<string>access-conversation-links</string>
<string>modify-conversation-links</string>
<string>access-conversation-links</string>
</array>
<key>com.apple.FaceTime.NoPrompt</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.appletv.pbs.user-profiles</key>
<true/>
<key>com.apple.appletv.pbs.user-profiles.select</key>
<true/>
<key>com.apple.assistant.settings</key>
<true/>
<key>com.apple.backboardd.launchapplications</key>
<true/>
<key>com.apple.backboardd.proximityDetection</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coreduetd.knowledge</key>
<true/>
<key>com.apple.coreduetd.people</key>
<true/>
<key>com.apple.coremedia.allow-protected-content-playback</key>
<true/>
<key>com.apple.coremedia.captureassertionservice</key>
<array>
<string>modify-assertion</string>
</array>
<key>com.apple.corespeech.supportheysiriwhenrecord</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.developer.group-session</key>
<true/>
<key>com.apple.developer.notificationcenter-identifiers</key>
<array>
<string>com.apple.facetime</string>
<string>com.apple.Photos</string>
</array>
<key>com.apple.duet.expertcenter.consumer</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.imagent</key>
<true/>
<key>com.apple.imagent.av</key>
<true/>
<key>com.apple.messages.nicknames</key>
<true/>
<key>com.apple.multitasking.termination</key>
<true/>
<key>com.apple.multitasking.voipassertions</key>
<true/>
<key>com.apple.nano.nanoregistry.generalaccess</key>
<true/>
<key>com.apple.pegasus.backgroundPIPServiceEntitlement</key>
<true/>
<key>com.apple.private.CallHistory.read-write</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.phoneNumberResolver</string>
</array>
<key>com.apple.private.attentionawareness</key>
<true/>
<key>com.apple.private.attentionawareness.poll</key>
<true/>
<key>com.apple.private.attribution.explicitly-assumed-identities</key>
<array>
<dict>
<key>type</key>
<string>bundleID</string>
<key>value</key>
<string>com.apple.facetime</string>
</dict>
<dict>
<key>type</key>
<string>bundleID</string>
<key>value</key>
<string>com.apple.mobilephone</string>
</dict>
<dict>
<key>type</key>
<string>path</string>
<key>value</key>
<string>/System/Library/PrivateFrameworks/TelephonyUtilities.framework/callservicesd</string>
</dict>
</array>
<key>com.apple.private.biome.read-write</key>
<array>
<string>GroupActivitySession</string>
</array>
<key>com.apple.private.canGetAppLinkInfo</key>
<true/>
<key>com.apple.private.carkit.dnd</key>
<true/>
<key>com.apple.private.contacts</key>
<true/>
<key>com.apple.private.copresence</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coreaudio.mxsessionPropertyPipe</key>
<true/>
<key>com.apple.private.coremedia.interruptions.phonecallpriority.allow</key>
<true/>
<key>com.apple.private.coreservices.canalwaysadvertise</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.coreservices.canopenactivity</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.LSAlwaysPick</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.bestappsuggestion</key>
<true/>
<key>com.apple.private.dmd.emergency-mode</key>
<true/>
<key>com.apple.private.dmd.policy</key>
<true/>
<key>com.apple.private.donotdisturb.behavior.resolution.client-identifiers</key>
<array>
<string>com.apple.telephonyutilities.callservicesd</string>
</array>
<key>com.apple.private.externalaccessory.showallaccessories</key>
<true/>
<key>com.apple.private.game-center</key>
<array>
<string>Account</string>
<string>Authenticate</string>
<string>Multiplayer</string>
<string>TurnBasedMultiplayer</string>
<string>GameStats</string>
</array>
<key>com.apple.private.game-center.bypass-authentication</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.icfcallserver</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.lp</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.ess</string>
<string>com.apple.private.alloy.phone.auth</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.messaging.high-priority</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.lp</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.phone.auth</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.registration</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.ids.self-session</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.session</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.session-private</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.imavcore.imavagent</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.necp.match</key>
<true/>
<key>com.apple.private.notificationcenter-system</key>
<array>
<dict>
<key>identifier</key>
<string>com.apple.SystemNote</string>
</dict>
</array>
<key>com.apple.private.notificationcenter.internalpushclient</key>
<true/>
<key>com.apple.private.notificationcenterui.alerts</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.screen-time</key>
<true/>
<key>com.apple.private.security.storage.CallHistory</key>
<true/>
<key>com.apple.private.security.storage.Messages</key>
<true/>
<key>com.apple.private.security.storage.Voicemail</key>
<true/>
<key>com.apple.private.suggestions.contacts</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string>kTCCServicePhotos</string>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceMicrophone</string>
<string>kTCCServiceWillow</string>
</array>
<key>com.apple.private.tcc.manager.check-by-audit-token</key>
<array>
<string>kTCCServiceBluetoothAlways</string>
</array>
<key>com.apple.private.tcc.manager.get-identity-for-credential</key>
<true/>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.facetime</string>
<string>com.apple.mobilephone</string>
</array>
<key>com.apple.runningboard.assertions.callservicesd</key>
<true/>
<key>com.apple.runningboard.process-state</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.carkit.service</string>
<string>com.apple.coreduetd.people</string>
<string>com.apple.fairplayd.versioned</string>
<string>com.apple.biome.PublicStreamAccessService</string>
<string>com.apple.imtransferservices.IMTransferAgent</string>
<string>com.apple.adid</string>
<string>com.apple.group-activities.conversationmanagerhost</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.gamed</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.InCallService</string>
<string>com.apple.suggestions</string>
<string>com.apple.ScreenTimeAgent</string>
<string>com.apple.VideoConference</string>
<string>com.apple.VideoProcessing</string>
<string>com.apple.ClarityUI</string>
<string>com.apple.ClarityUI.PhoneFaceTime</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<string>com.apple.TelephonyUtilities.sharePlayAppPolicies</string>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.personal-information.addressbook</key>
<true/>
<key>com.apple.security.temporary-exception.shared-preference.read-only</key>
<array>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.selectivesharing.session_system</key>
<true/>
<key>com.apple.siri.external_request</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.inCallPresentation</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.springboard.statusbarstyleoverrides</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.systemstatus.activityattribution</key>
<true/>
<key>com.apple.systemstatus.publisher.domains</key>
<array>
<string>calling</string>
</array>
<key>com.apple.videoconference.allow-conferencing</key>
<true/>
<key>com.apple.visualvoicemail.client</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>callservicesd</string>
</array>
</dict>
</plist>
com.apple.tv
macOS
com.apple.TV
tvOS
fallback
com.apple.tv
com.apple.Music
macOS
com.apple.Music
tvOS
fallback
com.apple.Music
macOS
com.apple.Notes
tvOS
fallback
+1800
+1888
+1877
+1866
+1855
+1844
Additions
CSDMessagingConversationParticipantAssociation
NSCopying
CSDMessagingLinkSyncRecoverMessage
CSDMessagingEncryptedConversationMessage
CSDMessagingConversationLink
CSDRelayController
CSDOrientationMonitor
BKSAccelerometerDelegate
NSObject
CSDCallCenterObserverDelegate
CSDTransactionManager
CSDCrashReporter
CSDVoIPProcessAssertion
CSDAVConference
CSDAVConferenceProviderDelegate
CSDAVConferenceConfiguration
CSDMessagingConversationParticipant
CSDUserActivityManager
TUCallProviderManagerDelegate
CSDUserActivityCommunicatorDelegate
TUConversationManagerDelegate
CSDUnknownCallFilter
CSDCallFilter
CSDAggregateDictionaryReporter
CSDReporter
CSDProximityController
CSDProximitySensorObserverDelegate
TUDelegate
TURouteControllerDelegate
FaceTime
CSDFaceTimeIMAVProviderDelegate
IMAVControllerDelegate
CSDDualFaceTimeProviderDelegate
CSDFaceTimeProviderDelegate
CXProviderDelegatePrivate
CXProviderDelegate
CSDCallHistoryControllerXPCServer
TUCallHistoryControllerXPCServer
CSDFaceTimeIDSService
CSDConversation
CSDIDSGroupSessionDelegate
CPActivitySessionManagerDelegate
CPAudioPolicyStateObserver
CSDAVCSessionDelegate
CSDRelayIDSService
CSDMessagingCallModel
CSDRelayClientController
CSDRelayMessagingControllerClientMessagingDelegate
CSDMessagingHandle
CSDMessagingConversationJoinedMetadata
CSDProviderCall
CSDPauseDigitsQueueDelegate
CSDCallStateMonitor
CSDPendingConversation
CSDStatusBarManager
CSDStatusBarResolverDelegate
CSDNeighborhoodActivityConduitXPCServer
CSDNeighborhoodActivityConduitDelegate
TUNeighborhoodActivityConduitXPCServer
CSDAdditions
CSDCarrierBundlePhoneNumberProvider
CSDCarrierBundlePhoneNumberProviderController
CoreTelephonyClientDelegate
CSDIDSGroupSessionProvider
IDSGroupSessionDelegate
IDSSessionDelegatePrivate
IDSSessionDelegate
CSDIDSSessionProvider
CSDRelayIDSDualSessionData
CSDRelayIDSDualSession
CSDCallHistoryController
CSDMessagingLinkSyncMessage
CSDThumperCapabilitiesMonitor
TUCallCapabilitiesDelegatePrivate
TUCallCapabilitiesDelegate
CSDConversationJoinContext
CSDAccountsController
IDSServiceDelegatePrivate
IDSServiceDelegate
CSDIDSDualSessionProvider
CSDPauseDigits
CSDConversationProviderManagerXPCServer
TUConversationProviderManagerXPCServer
CSDCallProviderManagerXPCServer
TUCallProviderManagerXPCServer
CSDCallProviderManagerDelegate
CSDFaceTimeVideoIDSService
CSDIDSChat
CSDIDSDualSessionDelegate
CSDAVConferenceDelegate
CSDMessagingConversationActivityContext
CSDCallDirectoryManager
CXCallDirectoryNSExtensionManagerDelegate
TinCan
CSDCTCallCapabilities
CSDMessagingRelayMessage
CSDIncomingCallFilterDataSource
CSDMessagingCallProvider
CSDRelayMessagingController
CSDRelayIDSMessengerDelegate
CSDRelayIDSSessionMessengerDelegate
CSDDaemon
TUConfigurationDelegate
CSDAbstractIDSProviderDelegate
CSDIDSChatDelegate
CSDMessagingAVConferenceInviteData
CSDIDSDualSession
CSDIDSDualSessionProviderDelegate
CSDRelayIDSMessenger
CSDThumperAccount
NSMutableCopying
CSDMutableThumperAccount
CSDFaceTimeIDSProviderDelegate
CSDRelayCommonController
CSDRelayMessagingControllerCommonMessagingDelegate
CSDFileTransferController
CSDFileTransferring
CSDCallSourceFetcher
CSDThumperPushHandlerAdditions
CSDThumperPushHandler
CSDPinExchangeDelegate
CSDMessagingCall
CSDRelayCall
CSDCallHistoryManagerXPCServer
CSDCallHistoryManagerDelegate
TUCallHistoryManagerXPCServer
CSDPauseDigitsQueue
CSDXPCClient
CSDTTYProviderObserver
CSDRelayPairedDeviceMessenger
CSDMessagingConversationActivitySceneAssociationBehavior
CSDProviderCallConfiguration
CSDMessagingConversationParticipantDidJoinContext
CSDMediaAssetManager
CSDMediaAssetManaging
CSDPowerLogReporter
CSDFaceTimeProviderDelegateManagerDelegate
CSDVoIPApplicationMessageContext
PKVoIPXPCClient
CXNetworkExtensionVoIPXPCClient
CSDVoIPApplication
CSDMessagingConversationActivitySession
CSDMessagingPersonNameComponents
CSDMessagingLinkSyncUpdateMessage
CSDStatusBarResolver
CSDRelayConferenceInterface
CSDSandboxExtensionDirectory
CSDPinExchangeController
CSDMessagingMemberAssociationClaim
CSDCallCapabilities
TUCallCapabilitiesXPCServer
TUCallCapabilitiesXPCServerActions
CSDAccountsControllerDelegate
CSDTelephonyCallCapabilitiesDelegate
CSDThumperCapabilitiesMonitorDataSource
CSDBlockedCallFilter
CSDCall
TUDynamicCallDisplayContextDelegate
CXAudioSessionActivationStateObserver
CSDRouteManager
TUAudioDeviceControllerDelegate
CSDMessagingConversationMember
CSDMessagingConversation
CSDMessagingConversationReport
CSDConversationManager
CSDConversationDelegate
CSDPendingMembershipTrackerMessenger
CSDPendingMembershipTrackerDelegate
CSDConversationNoticeDelegate
CSDConversationLinkManagerDelegate
CSDScreenSharingActivityManagerDelegate
CPApplicationPolicyManagerDelegate
CPSystemStateObserverObserver
CPConversationManagerDataSource
CSDMessagingVoucher
CSDCHRecentCall
CSDApplicationRecord
CSDMessagingCallMessage
CSDAudioRouteCollection
CSDFaceTimeAudioIDSService
CSDMessagingConversationActivity
CSDMessagingConversationInvitationPreference
VoIPApplicationAdditions
CSDMessagingCallCapabilitiesState
CSDVoIPProcessAssertionManager
CSDIncomingCallFilter
CSDAppleIDUtilities
CSDRecentsController
CSDMessagingConversationLinkGeneratorDescriptor
CSDIDSSession
CSDMessagingCallDisplayContext
CSDUserActivityCommunicator
UABestAppSuggestionManagerDelegate
CSDUserConfigurationMigrator
CSDThumperIDSService
CSDIDSGroupSession
CSDIDSGroupSessionProviderDelegate
CSDCallStateController
TUCallServicesXPCServer
TUCallCenterXPCServer
TUCallServicesProxyCallActions
TUCallServicesClientCapabilitiesXPCServer
TUAudioDeviceControllerXPCServer
TURouteControllerXPCServer
TUCallFilterControllerXPCServer
CSDRelayMessagingControllerDelegate
CSDCallDelegate
CSDDeviceLockStateObserver
CSDVoIPApplicationMonitor
CXNetworkExtensionVoIPXPCServer
PKVoIPXPCServer
CSDVoIPApplicationController
APSConnectionDelegate
CXNetworkExtensionMessageControllerHostDelegate
CXNotificationServiceExtensionHostDelegate
CSDConversationNoticeManager
CSDConversationParticipant
CSDCallDataSourceMap
CSDMessagingLabeledHandle
CSDClient
CSDMessagingConversationActivityMetadata
CSDConversationManagerXPCServer
TUConversationManagerXPCServer
TUConversationMediaControllerXPCServer
TUConversationMessagesGroupProviderXPCServer
CSDConversationManagerDelegate
CSDCallProviderManager
CSDCallProviderManagerDataSourceDelegate
CSDFaceTimeConversationProviderDelegate
CSDRaiseToAnswerController
CSDGFTServiceConversationProviderDelegate
CSDRelayHostController
CSDRelayMessagingControllerHostMessagingDelegate
CSDUserActivity
CSDCallProviderManagerDataSource
CSDMomentsReportingSession
CSDSignposts
CSDAVCSession
AVCSessionParticipantDelegate
AVCScreenCaptureDelegate
AVCSessionDelegate
AVCRateAdaptationDelegate
CSDExternalIDSDualSession
CSDRelayConferenceConnection
CSDTelephonyCallCapabilities
CSDCoreTelephonyClientDelegate
CSDMessagingRoute
CSDConversationProviderManager
CSDRelayCallDelegate
CSDMessagingConversationMessage
CSDFaceTimeIMAccount
IDSAccountRegistrationDelegate
CSDMockCall
CSDCoreTelephonyClient
CoreTelephonyClientCapabilitiesDelegate
CSDMessagingCallModelState
CSDMessagingSenderIdentity
CSDABCReporter
CSDReportingController
CSDMomentsReportingSessionDelegate
CSDReporterDataSource
CSDMomentsControllerDelegate
CSDVoiceOverObserver
CSDCallFilterController
CSDMessagingLinkSyncCheckInMessage
CSDCallHistoryManager
CSDConversationProvider
CSDIDSService
IDSAccountControllerDelegate
Messaging
CSDRelayIDSSessionMessenger
CSDRelayIDSDualSessionDelegate
CSDMomentsController
CSDFileTransferringDelegate
CSDAVCMomentsDelegate
TUMomentsControllerXPCServer
CSDAVConferenceProvider
AVConferenceDelegate
CSDPulledCallContext
CSDProviderCallDataSource
CXCallControllerHostDelegate
CSDCallSourceFetcherDataSource
CXCallSourceManagerDelegate
CXCallSourceUpdates
CSDProviderCallDelegate
CSDClientManager
NSXPCListenerDelegate
CSDClientManagerExportedObjectProxy
CSDCallDataSource
CSDProximitySensorObserver
CSDAbstractFaceTimeConversationProviderDelegate
CSDAbstractFaceTimeConversationProviderDelegateProtocol
CSDRelayCallDataSource
CSDVoIPApplicationMessage
CSDVoIPApplicationMessageAdditions
CSDIDSTransport
FZIDType
GUID
URIWithPrefixedURI:
URLByAppendingPathComponent:
URLByAppendingPathComponent:isDirectory:
URLByAppendingPathExtension:
URLByDeletingLastPathComponent
URLByStandardizingPath
_activeCallID
ITUCountryCodeForISOCountryCode:
SDKVersion
SHA1HexString
UIBackgroundModes
URLForDirectory:inDomain:appropriateForURL:create:error:
URLWithString:
UTF8String
UUIDString
_FTCopyGzippedData
_FTDecompressData
_FTOptionallyDecompressData
__imSetFromArray
_fetchUserActivityWithUUID:completionHandler:
_initWithTypeIdentifier:suggestedActionType:options:
_initWithUserActivityType:dynamicActivityType:options:
_numberForKey:
_registerUserActivityType:dynamicActivityType:
_setContentType:
_setContentUserAction:
_setEnabledTopics:
_setQueue:
_setSubtitle:
_stripFZIDPrefix
_stripPotentialTokenURIWithToken:
_unregisterUserActivityType:dynamicActivityType:
aa_primaryAppleAccount
absoluteString
accountDescription
accountInfo
accountMatchingSimIdentifier:
accountType
accountsMatchForSecondaryCalling
accountsSupportSecondaryCalling
acquire
acquireWithError:
actions
activeConversationWithRemoteMembers:andLink:
activeInterfaceOrientationWithCompletion:
activeRemoteParticipantHandles
activityMetadataWithDataBlob:
activityType
addAction:toUncommittedTransactionForCallSource:
addAlias:
addBarrierBlock:
addCallDescriptor:
addCallSource:
addDelegate:withQueue:
addEntriesFromDictionary:
addListenerID:forService:
addObject:
addObjectsFromArray:
addObserver:withQueue:
addOrUpdateCall:
addParticipant:
addRegistrationDelegate:queue:
addResourceWithType:fileURL:options:
addToCallHistory:
addUserNotification:listener:completionHandler:
aliasStrings
aliases
allActions
allKeys
allObjects
allValues
allocWithZone:
allowAnyNetwork
allowCallForDestinationID
allowCallForDestinationID:providerIdentifier:
allowScreenSharing
allowSharePlay
allowsVideo
announceCalls
answerCall:
anyObject
appendFormat:
appendString:
applicationState
applicationStateForApplication:
approveSplitSessionForConversation:requestedFromDevice:pullContext:completion:
approvedSecondaryDeviceIDs
archivedDataWithError:
areCTCapabilitiesValid
areRelayCallingFeaturesEnabled
array
arrayByAddingObject:
arrayByAddingObjectsFromArray:
arrayByApplyingSelector:
arrayWithArray:
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:count:
associationAVCIdentifier
associationIdentifier
attemptToPlayKey:
attributeForKey:
attributeWithDomain:name:
attributes
attributesOfItemAtPath:error:
audioInterruptionProvider
audioSourceIdentifier
auditToken
authorizedBundleIdentifiers
autoSharePlayEnabled
avChat
availabilityForListenerID:forService:
beginMatchingExtensions
beginObserving
beginParticipantConfiguration
behavior
bluetoothEndpointType
boolForKey:keyExistsAndHasValidFormat:
bounds
bundleURL
bundleWithURL:
bytes
callCapabilitiesClientXPCInterface
callCapabilitiesServerXPCInterface
callHistoryControllerClientXPCInterface
callHistoryControllerServerXPCInterface
callHistoryManagerClientXPCInterface
callHistoryManagerServerXPCInterface
callProviderManagerClientXPCInterface
callProviderManagerServerXPCInterface
callService
callServicesClientXPCInterface
callServicesInterface
callServicesServerXPCInterface
callSources
callUUIDToGroupWith
callUpdateWithDefaultValuesSet
callbackISOCountryCode
canCreateConversations
canSend
cancelCallID:
canonicalizedPhoneNumber:
changeType
characterAtIndex:
characterIsMember:
characterSetWithCharactersInString:
cleanup
clearReadNotificationsIgnoringHandleIds:
cloudCallingDevices
commitUncommittedTransactions
compactStoreWithCompletionHandler:
compare:options:
compatibilityObject
componentsJoinedByString:
componentsSeparatedByString:
conferenceID
connectToDaemon
containsBlockingEntryForEnabledExtensionWithPhoneNumberInArray:error:
containsObject:
containsString:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
context:addPhoneServicesDevice:withCompletion:
context:getCapability:status:with:
context:getSystemCapabilities:
context:recheckPhoneServicesAccountStatus:
context:removePhoneServicesDevice:withCompletion:
context:setCapability:enabled:with:
conversation:participant:addedNotice:
conversationFailureContext
conversationLink
conversationLinkBaseURL
conversationManagerClientXPCInterface
conversationManagerServerXPCInterface
conversationProviderManagerClientXPCInterface
conversationProviderManagerServerXPCInterface
copyCarrierBundleValue:keyHierarchy:bundleType:error:
copyMobileCountryCode:error:
copyMobileNetworkCode:error:
countByEnumeratingWithState:objects:count:
countForIdentifier:
countForObject:
createActivitySessionWithTuActivitySession:
createAliasForParticipantID:salt:
creationRequestForAsset
csCallingCapabilitiesState
currentConnection
currentDeviceOrientation
currentHandler
currentIDStatusForDestination:service:listenerID:queue:completionBlock:
currentPreferredTransportMethod
currentServerTimeDate
currentState
currentlyPickedRouteIdForCategory:andMode:
cx_errorWithCode:
cx_incomingCallErrorWithCode:
cx_requestTransactionErrorWithCode:
dataDownloaded
dataUploaded
dataUsingEncoding:
dataWithBytes:length:
dataWithContentsOfURL:
dateAnsweredOrDialed
dateDialed
dateStarted
dateWithTimeIntervalSince1970:
dateWithTimeIntervalSinceNow:
dateWithTimeIntervalSinceReferenceDate:
declineInvitationWithResponse:
defaultBehavior
defaultProviders
defaultWorkspace
deleteCallsWithPredicate:completion:
destinationIdIsEmailAddress
destinationIdIsPhoneNumber
destinationIdIsPseudonym
destinationWithDestinations:
destinationWithStringURI:isLightWeight:
destinationWithURI:
dialType
dialWithRequest:completion:
dictionary
dictionaryWithCapacity:
dictionaryWithDictionary:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
didChangeServiceProvidersForCarrierBundlePhoneNumberProviderController:
didErrorOccur
didReceiveLocallyRequestedMomentDescriptor:
didUpdateCapabilities:forVideoStreamToken:
disconnectCall:
disconnectCall:withReason:
displayContextByMergingWithDisplayContext:
distantPast
doesNotRecognizeSelector:
downgradeToAudio
emergencyProvider
enableEmergencyModeWithError:
enabledTopics
endActiveAndAnswerCall:
endChat
endChatWithReason:
endHeldAndAnswerCall:
endObserving
endParticipantConfiguration
endSession
endpointRapportEffectiveIdentifier
endpointRapportMediaSystemIdentifier
entitlements
enumerateDelegatesUsingBlock:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsUsingBlock:
errorWithDomain:code:userInfo:
exceptionWithName:reason:userInfo:
execute:
faceTimeLaunchForIncomingCallURL
faceTimeMultiwayAvailabilityForDestination:
faceTimeNeedsBackgroundLaunchURL
faceTimeShowHandoffEligibleNearbyURL
faceTimeShowSystemCallControlsURL
faceTimeSupported
facetimeService
failOutstandingActionsForCallWithUUID:
failureReason
fetchAutomaticDNDAssertionWithReply:
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileURLWithPath:
fileURLWithPath:isDirectory:
fileURLWithPathComponents:
filteredArrayUsingPredicate:
firstIndex
firstObject
floatValue
formUnionWithCharacterSet:
fulfillWithDateConnected:
gestureHandler
getActiveContexts:
getActivePairedDevice
getIsAudioPaused:callID:error:
getIsSendingAudio:callID:error:
getIsVideoPaused:callID:error:
getMessagesGroupDetailsForMessagesGroupUUID:completionHandler:
getPhoneServicesDeviceInfo:
getResourceValue:forKey:error:
groupCall:withOtherCall:
handleCurrentCallsChanged:callDisconnected:
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
handleForIdentifier:error:
handleLocalRoutesByUniqueIdentifierUpdated:
handleNotificationName:forCallWithUniqueProxyIdentifier:userInfo:
handlePairedHostDeviceRoutesByUniqueIdentifierUpdated:
handleUserInteractionsWithBlock:
handoffContext
handoffEligibleConversation
handoffIdentifier
hasAlias:
hasBeenExpiredForAtLeast:
hasCellularSettingsRemediation
hasDateAndTimeSettingsRemediation
hasLocationSettingsRemediation
hasPrefix:
hasRestrictionsInRetailEnvironment
hasSet
hasWiFiSettingsRemediation
holdActiveAndAnswerCall:
holdCall:
hostOnCurrentDevice
iconTemplateImageData
identifierWithPid:
identityForEmbeddedApplicationIdentifier:
idsDestinations
idsFromID
imHandleWithID:
imageData
inCallSoundRegion
inFrequencyLevel
inProcess_isCallingSupported
includesCallsInRecents
incomingCallInvitationPreferences
indexesOfObjectsPassingTest:
initFileURLWithPath:
initForReadingWithError:
initOutgoingTo:isVideo:isRelayed:GUID:
initWithAccount:destinations:transportType:
initWithAccount:options:
initWithAction:
initWithActivity:locallyInitiated:timestamp:isFirstJoin:
initWithActivity:uuid:locallyInitiated:timestamp:isFirstJoin:
initWithApplicationController:queue:
initWithAvailability:supportedMediaTypes:
initWithBundleIdentifier:flags:reason:name:
initWithBundleIdentifier:flags:reason:name:withHandler:
initWithBundleIdentifier:metadata:applicationContext:activityIdentifier:
initWithBundleIdentifier:metadata:applicationContext:uuid:activityIdentifier:fallbackApplicationName:
initWithBundleType:
initWithCall:contactIdentifier:serialQueue:
initWithCallType:callState:copresenceActivityType:
initWithCallUUID:
initWithCallUUID:attributes:
initWithCallUUID:callUUIDToGroupWith:
initWithCallUUID:digits:type:
initWithCallUUID:groupUUID:
initWithCallUUID:handle:
initWithCallUUID:muted:
initWithCallUUID:onHold:
initWithCallUUID:relaying:
initWithCallUUID:sendingVideo:
initWithCallUUID:sharingScreen:
initWithCallUUID:ttyType:
initWithCallUUID:videoEnabled:
initWithCallUUID:videoPresentationSize:
initWithCallUUID:videoPresentationState:
initWithCapabilityInfo:
initWithCapacity:
initWithClientUUID:transportType:
initWithContext:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:preferredBroadcastingAttributes:sceneAssociationBehavior:
initWithContextIdentifier:actionDescription:ongoingDescription:completedDescription:
initWithConversationID:timebase:
initWithDataSource:parentQueue:
initWithDataSource:queue:
initWithDelegate:delegateQueue:
initWithDelegate:withConfig:
initWithDigits:countryCode:
initWithDisplayContext:call:serialQueue:
initWithDomain:
initWithEnvironmentName:namedDelegatePort:queue:
initWithExplanation:target:attributes:
initWithFormat:arguments:
initWithHandle:label:isSuggested:
initWithHandle:nickname:joinedFromLetMeIn:
initWithHandleType:notificationStyles:
initWithHandoffIdentifier:
initWithIdentifier:bundleIdentifier:
initWithIdentifier:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:
initWithIdentifier:handle:
initWithIdentifier:handle:senderCorrelationIdentifier:
initWithIdentifier:pluginName:
initWithInputURL:outputURL:identifier:operation:completionBlock:queue:
initWithInt:
initWithMachServiceName:
initWithMetadata:applicationContext:uuid:activityIdentifier:
initWithNotificationName:queue:callback:
initWithObjectsAndKeys:
initWithParticipantID:data:delegate:queue:
initWithPhotosAppAssetIdentifier:
initWithPredicate:context:
initWithPriority:
initWithPseudonym:publicKey:groupUUID:originatorHandle:
initWithPseudonym:publicKey:groupUUID:originatorHandle:creationDate:expirationDate:invitedMemberHandles:locallyCreated:linkName:linkLifetimeScope:
initWithRequiredCapabilities:requiredMissingCapabilities:
initWithSenderIdentityUUID:
initWithServiceName:
initWithSessionUUID:originator:type:
initWithSet:
initWithTargetContentIdentifier:shouldAssociateScene:
initWithTimeIntervalSince1970:
initWithTimeIntervalSinceReferenceDate:
initWithTransportToken:configuration:delegate:queue:
initWithUUID:
initWithUUID:accountUUID:localizedName:localizedShortName:localizedServiceName:handle:
initWithUUID:andAccountID:andSlot:
initWithUUID:groupUUID:
initWithUUID:groupUUID:provider:
initWithUUIDString:
initWithUnprefixedURI:
insertObject:atIndex:
interfaceWithProtocol:
interruptionSuppression
invalidateProvisioningURL
invalidateTokenForTopic:identifier:
invitationTimeOut
invite:additionalPeers:excludingPushTokens:
invoke
isA2DPRoute
isAirTunes
isApproved
isAssociated
isAudioMuted
isBluetoothLE
isCarAudio
isComplete
isDefaultPairedDevice
isDefaultProvider
isDialAssisted
isDirectFaceTimeAudioCallingCurrentlyAvailable
isDirectFaceTimeVideoCallingCurrentlyAvailable
isDirectTelephonyCallingCurrentlyAvailable
isEmergencyCallingOnWifiAllowed
isEmergencyCallingOnWifiAvailable
isEqualToArray:
isEqualToCallProvider:
isEqualToCapabilities:
isEqualToConversationLink:
isEqualToData:
isEqualToIgnoringCase:
isEqualToNumber:
isEqualToSet:
isEqualToString:
isEquivalentToConversationLink:
isEquivalentToPseudonym:andPublicKey:
isFileURL
isFromBlockList
isGestureServiceAvailable
isGreenTea
isHSATrusted
isHoldAndAnswerAllowed
isInCanvas
isIncomingCommunicationBlockedForHandle:
isInstalled
isJoiningConversationWithLink
isLetMeIn
isLightweightPrimaryInitiated
isLocalParticipant
isLocallyInitiated
isNearby
isObserving
isOneToOneEnabled
isPlaceholderActivity
isPreferred
isPreferredAndActive
isPreferredDevice
isRedial
isRelayCallingEnabled
isRelayCallingEnabledForDeviceWithID:
isRetry
isRoamingEnabled
isScreenSharingActivity
isStaticActivity
isSupported
isTelephonyDevice
isTinCanProvider
isUsingAirplay
isValid
isValidated
isVideoPausedToStart
isWebCapableFaceTimeAvailableForDestination:
isWiFiCallingCurrentlyAvailable
isWifiCallingAvailable
isWirelessHeadset
item
joinCallActivity
joinConversationWithConversationRequest:
joinedFromLetMeIn
labelID
lastObject
lastPathComponent
launchAppForActivitySession:options:completion:
leaveGroupSession
length
letMeInResponseInvitationPreferences
lightweightPrimaryParticipantIdentifier
linkedUserURIs
localDeviceID
localIdentifier
localizedCallerImageURL
localizedCallerName
localizedStringForKey:value:table:
loginID
lowercaseString
machOUUIDs
mainBundle
mainDisplay
manageDesignatedMembers:withType:
matchingSim
maximumNumberOfInvitedMembers
minusSet:
momentsControllerClientXPCInterface
momentsControllerServerXPCInterface
monitorForDeath:
moveItemAtURL:toURL:error:
muteSessionInput:error:
negotiationDataForProtocolVersion:
neighborhoodActivityClientXPCInterface
neighborhoodActivityServerXPCInterface
notificationDisplayInformationForAudioPolicyManager:activity:conversation:
notificationStylesByHandleType
numberFromString:
numberValue
numberWithBool:
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithInteger:
numberWithLong:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLongLong:
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:ofClass:
objectForKey:ofClass:valuesOfClass:
objectForKeyedSubscript:
objectsPassingTest:
openApplication:withOptions:completion:
openApplicationWithBundleIdentifier:configuration:completionHandler:
openUserActivity:usingApplicationRecord:configuration:completionHandler:
optionsWithDictionary:
orderedSet
orderedSetWithCapacity:
orientation
originalRingtoneSoundURL
originatingDeviceType
otherIMHandle
outFrequencyLevel
outgoingRelayCallerID
participantID
participantPushToken
participantURI
path
pathComponents
pathExtension
pauseVideoToStart
pendingCallActionsOfClass:withCallUUID:
pendingTransactions
performChanges:completionHandler:
permitJoin
phoneNumberWithDigits:countryCode:
pickRouteForRapportDeviceWithMediaSystemIdentifier:effectiveIdentifier:
placeholderForCreatedAsset
plugInKitPlugins
pluginName
postNotificationName:object:userInfo:
predicateForCallsWithRemoteParticipantHandle:
predicateForInEarAudioRoute
predicateForPreferredRoute
predicateFormat
predicateMatchingIdentity:
predicateWithBlock:
predicateWithFormat:
preferencesURL
presentSessionDismissalAlertForActivitySessionUUID:allowingCancellation:completionHandler:
presentationInfo
processInfo
profileID
prominence
providerForIdentifier:
providerWithService:video:
provisionPseudonymForURI:withProperties:completion:
proxyCallWithCall:
pseudonymForPseudonymURI:
pseudonymPropertiesWithFeatureID:scopeID:expiryDurationInSeconds:
pseudonymURIMap
publiclyAccessibleCopy
queryHasWebOnlyEndpointsForDestinations:completionBlock:
queueItemType
raise
rangeOfCharacterFromSet:options:range:
rangeOfString:
refreshDataCryptors
refreshIDStatusForDestination:service:listenerID:queue:completionBlock:
regionBasePhoneNumber
registerSecureMicrophoneEngagedHandler:
relativePath
relayCallingAvailability
relayCallingDisabledForDeviceID
remoteHandle
remoteObjectProxy
remoteParticipantForLightweightParticipantHandle:
remotePushTokens
removeActivitySessionWithUUID:usingHandle:
removeAllObjects
removeCall:
removeCallDescriptor:
removeFromRunLoop
removeItemAtPath:error:
removeLastObject
removeListenerID:forService:
removeNotificationsForServiceIdentifier:
removeObject:
removeObjectAtIndex:
removeObjectsInArray:
removeObserver:name:object:
removeRegistrationDelegate:
renewPseudonym:forUpdatedExpiryEpoch:completion:
reportAction:ofTempURI:fromURI:withCompletion:
reportAudioFinishedForCallWithUUID:
reportCallWithUUID:changedFrequencyData:forDirection:
reportCallWithUUID:changedMeterLevel:forDirection:
reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
reportCallWithUUID:endedAtDate:reason:
reportCallWithUUID:failedAtDate:withContext:
reportNewIncomingCallWithUUID:update:completion:
reportNewOutgoingCallWithUUID:update:
reportOutgoingCallWithUUID:connectedAtDate:
reportOutgoingCallWithUUID:sentInvitationAtDate:
reportingControllerServerXPCInterface
requestAuthorizationForApplicationLaunchWithActivity:completionHandler:
requestAuthorizationForApplicationWithBundleIdentifier:preparing:completionHandler:
requestEncryptionKeyForParticipants:
requestPendingACInvitations
requestPendingVCInvitations
requestTokenForTopic:identifier:
requestTransaction:completion:
requiresAuthentication
requiresInCallSounds
resetNonScreenSharingSessions
resetSessions
resolveBehaviorForEventDetails:error:
resolvedAudioVideoMode
response
responseInformation
resume
retainArguments
revokeBackgroundAuthorizationForBundleID:
revokePseudonym:completion:
ringtoneSuppressedRemotely
sandboxExtendedImageURL
sandboxExtensionHandle
sanitizedCopy
saveImageToDisk
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
selectiveSharingSessionUUID
sendData:forCallID:encrypted:
sendLetMeInRequest
sendMessage:fromAccount:toDestinations:priority:options:identifier:error:
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
sendSessionMessage:
sendSessionMessage:toDestinations:
senderISOCountryCode
senderIdentityCapabilitiesWithUUID:
senderIdentityForAccountUUID:
senderIdentityForUUID:
senderIdentityUUID
serializedData
serviceForClientIdentifier:
serviceForProvider:video:
serviceIdentifier
serviceName
sessionEndedReason
sessionID
sessionIDAliasWithSalt:
setAccountsMatchForSecondaryCalling:
setAccountsSupportSecondaryCalling:
setActionURL:
setActiveCategoryVolume:
setActiveRemoteParticipantHandles:
setAnnounceCalls:
setApproved:
setApprovedSecondaryDeviceIDs:
setAssociated:
setAssociationAVCIdentifier:
setAssociationIdentifier:
setAsynchronousServer:
setAttribute:forKey:error:
setAttributes:
setAudioCategory:
setAudioInterruptionOperationMode:
setAudioInterruptionProvider:
setAudioMode:
setAudioMuted:
setAudioSessionID:
setAudioSourceIdentifier:
setAuthorization:forBundleID:
setAvcSessionIdentifier:
setAvcSessionToken:
setBehavior:
setBlockIncomingInvitationsDuringCall:
setBlockMultipleIncomingInvitations:
setBundleID:
setBundleURL:
setByAddingObjectsFromSet:
setCallback:
setCallerId:
setCallerIdAvailability:
setClientMessageReceiveTime:
setCloudCallingDevices:
setCode:
setConferenceState:forCallID:
setConferenceVisualRectangle:forCallID:
setConnectionTimeoutTime:
setContext:
setConversation:
setConversationFailureContext:
setConversationLinkBaseURL:
setConversationTimeBase:
setCrossDeviceIdentifier:
setCtCapabilitiesValid:
setCurrentlyAvailable:
setDateAnsweredOrDialed:
setDialType:
setDisconnectedCause:
setDisplayName:
setDowngradeToAudio:
setDuration:
setEligibleForHandoff:
setEligibleForPublicIndexing:
setEligibleForSearch:
setEmergencyCallbackPossible:
setEmergencyCurrentlyAvailable:
setEmergencySupported:
setEnableCriticalReliability:
setExceptionCode:
setExceptionDomain:
setFailureReason:
setFrontBoardOptions:
setGestureHandler:
setGondolaCallingAvailable:
setHandedOff:
setHandoffContext:
setHasDateAndTimeSettingsRemediation:
setHasEnded:
setHasLocationSettingsRemediation:
setHasWiFiSettingsRemediation:
setHostCreationTime:
setHostMessageSendTime:
setHostedOnCurrentDevice:
setIMAVCapabilities:toCaps:
setISOCountryCode:
setIconTemplateImageData:
setIdsAliasingSalt:
setIgnoresBluetoothDeviceUID:
setImageData:
setImageURL:
setInvitationTimeOut:
setInvitationTimeoutTime:
setInvitedMemberHandles:
setIsAnyOtherAccountDeviceActive:
setIsAudioEnabled:
setIsAudioPausedToStart:
setIsDuplexAudioOnly:
setIsKeyExchangeEnabled:
setIsLightweightPrimaryInitiated:
setIsOtherInvitedHandle:
setIsRelayEnabled:
setIsRelayForced:
setIsVideoEnabled:
setIsVideoPausedToStart:
setIsWindowed:
setItem:
setJoinCallActivity:
setJoinedFromLetMeIn:
setJoiningConversationWithLink:
setKeywords:
setLetMeIn:
setLinkedUserURIs:
setLocalDeviceID:
setMaxVideoDecodesAllowed:
setMediaType:
setMirageEnabled:
setModelIdentifier:
setMute:
setNeedsSave:
setNotificationStylesByHandleType:
setObject:forKeyedSubscript:
setOnHold:
setOneToOneEnabled:
setOneToOneHandoffOngoing:
setOriginalRingtoneSoundURL:
setOriginatingDeviceType:
setOutgoingLocalParticipantUUID:forRecentCallsMatchingPredicate:
setOutgoingRelayCallerID:
setParticipantGroupUUID:
setPassiveOrientationEvents:
setPauseAudio:callID:error:
setPauseVideo:callID:error:
setPauseVideoToStart:
setPeerReportingIdentifier:sessionIdentifier:forCallID:
setPendingConversation:
setPersonNameComponents:
setPresentationInfo:
setPrimary:
setProminenceIndex:
setProviderEndedReason:
setProviderErrorCode:
setPseudonymFeatureID:
setQueueItemType:
setRead:
setRead:forCallsWithPredicate:completion:
setRelay:
setRelayCallingAvailability:
setRelayCallingDisabledForDeviceID:
setRelayCallingFeaturesEnabled:
setRelayed:
setRemoteHandle:
setRemotePushTokens:
setReport:
setReportType:
setRequiresAuthentication:
setRepresentedApplicationBundle:
setRequiresInCallSounds:
setRetry:
setRingtoneSoundURL:
setSandboxExtensionHandle:
setScreenCaptureDisplayID:
setScreenSharingAvailable:
setSelectiveScreenUUID:
setSenderIdentityUUID:
setSendingAudio:callID:error:
setServiceProvider:
setSessionEventType:
setSessionMode:
setSessionUUID:
setShouldMoveFile:
setStatusChangeObserver:
setSupported:
setSupportsBasebandCalling:
setSupportsCellularData:
setSupportsDefaultPairedDevice:
setSupportsDisplayingFaceTimeAudioCalls:
setSupportsDisplayingFaceTimeVideoCalls:
setSupportsDisplayingTelephonyCalls:
setSupportsFaceTimeAudioRelayCalling:
setSupportsFaceTimeVideoRelayCalling:
setSupportsRelayCalling:
setSupportsRestrictingSecondaryCalling:
setSupportsRinging:
setSupportsSimultaneousVoiceAndData:
setSupportsTelephonyRelayCalling:
setSupportsVideo:
setSynchronousServer:
setSystemActivity:
setSystemActivitySessions:
setTarget:
setThumperCallingAllowed:onSecondaryDeviceWithID:
setThumperCallingCapabilitiesState:
setThumperCallingEnabled:
setTimeToEstablish:
setTimestamp:
setTrustedFromHandle:
setUniqueID:
setUniqueId:
setUnreliableMessengerConfig:
setUsesNotificationCenter:
setUsingAirplay:forActivitySessionWithUUID:
setVerificationStatus:
setVideoPositionalInfo:
setVideoQuality:
setVideoStreamToken:
setVirtualParticipantConfig:
setVirtualParticipants:
setVisibilityIndex:
setVoLTECallingCapabilitiesState:
setWiFiCallingCapabilitiesState:
setWithArray:
setWithCapacity:
setWithObject:
setWithObjects:
setWithSet:
setupIMAVController
sharePlaySupported
sharedAVSystemController
sharedInstanceWithQueue:server:shouldRegister:
sharedManager
sharedMonitor
sharedPhotoLibrary
sharedPrivacyManager
sharedUtilityProvider
shortLabel
shouldAutoLaunchAppForActivity:onConversation:
shouldPreferRelayOverDirectSecondaryCallingForProvider:isVideo:
slotID
sortDescriptorWithKey:ascending:
sortUsingSelector:
sortedArrayUsingComparator:
sortedArrayUsingDescriptors:
sourceIdentifierForRouteID:
spatialPosition
startCapture
startConnectionWithCallID:inviteData:isCaller:capabilities:destination:error:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:error:
startListeningForBestAppSuggestions
stopCallID:
stopCapture
stopListeningForBestAppSuggestions
streamTokenForStreamGroupID:
string
stringByAppendingFormat:
stringByAppendingPathComponent:
stringByAppendingPathExtension:
stringByAppendingString:
stringByReplacingOccurrencesOfString:withString:
stringForKey:
stringGUID
stringValue
stringWithCString:encoding:
stringWithCharacters:length:
stringWithFormat:
stringWithUTF8String:
strongToStrongObjectsMapTable
strongToWeakObjectsMapTable
subTitle
subscriptionsInUse
substringFromIndex:
substringToIndex:
substringWithRange:
supportsBasebandCalling
supportsCapability:
supportsCellularData
supportsDefaultPairedDevice
supportsDisplayingFaceTimeVideoCalls
supportsMultipleActivitySessions
supportsNonWiFiCalling
supportsNonWiFiFaceTime
supportsPhoneCalls
supportsRelayCalling
supportsRelayingToOtherDevices
supportsSimultaneousVoiceAndData
supportsThumperCallingOverCellularData
supportsWLAN
suppressRingtoneDueToRemoteSuppression
switchBluetoothAudioFormats
switchToSpeakerRouteIfNecessary
synchronizeExtensionsWithCompletionHandler:
targetWithPid:
taskState
telephoneNumber
terminatingHandle
thumperCallingCapabilitiesState
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timestamp
topic
transitionStatus
trustedFromHandle
tu_UUIDv5ForString:namespaceUUID:
tu_containsObjectPassingTest:
tu_conversationHandoffDynamicIdentifierWithGroupUUID:participantIdentifier:uplinkMuted:sendingVideo:
tu_firstObjectPassingTest:
typedIdentifier
unarchivedObjectFromData:error:
unformattedInternationalRepresentation
ungroupCall:
unholdCall:
unionSet:
unknownProvider
unreliableMessengerConfig
unsignedIntValue
updateActivityImage:
updateActivitySessionWithUUID:activity:
updateAllowedHandlesForConversation:
updateBytesOfDataUsedFor:with:
updateCapabilities:forCallID:
updateConfiguration:
updateMembers:withContext:messagingCapabilities:triggeredLocally:
updateMembers:withContext:triggeredLocally:
updateParticipantType:members:withContext:triggeredLocally:
updateVirtualParticipantIdentifier:
updateVolatileDataWithBlock:
updateWithUpdate:
uppercaseString
uriForFromID:
userActivityUsingDeprecatedCallingIntents:
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
username
validationErrorReasonForAlias:
validationStatusForAlias:
vettedAliases
videoPresentationSize
videoPresentationState
videoQuality
videoToken
virtualParticipantConfig
visibility
voLTECallingCapabilitiesState
voicePreferred
wantsCallDisconnectionOnInvalidation
wantsCallNotificationsDisabledWhileSuspended
wantsCallStopStreamingOnInvalidation
wantsFrequencyChangeNotifications
wasDeclined
wasDialAssisted
weakToStrongObjectsMapTable
wiFiCallingCapabilitiesState
willCaptureRemoteRequestFromRequesterID:
writeToFile:options:error:
ISOCountryCode
tuVoucher
voucherWithTUVoucher:
T@"TUVoucher",R,N
description
copyWithZone:
setVersion:
setHasVersion:
hasVersion
setIdentifier:
setHasIdentifier:
hasIdentifier
hasAvcIdentifier
dictionaryRepresentation
readFrom:
writeTo:
copyTo:
isEqual:
hash
mergeFrom:
version
identifier
avcIdentifier
setAvcIdentifier:
.cxx_destruct
_identifier
_avcIdentifier
_version
_has
TB,N
TI,N,V_version
TQ,N,V_identifier
TB,R,N
T@"NSString",&,N,V_avcIdentifier
pseudonymType
clearPseudonyms
addPseudonym:
pseudonymsCount
pseudonymAtIndex:
pseudonyms
setPseudonyms:
_pseudonyms
T@"NSMutableArray",&,N,V_pseudonyms
hasPublicKey
hasConversationMessageBytes
publicKey
setPublicKey:
conversationMessageBytes
setConversationMessageBytes:
_conversationMessageBytes
_publicKey
T@"NSData",&,N,V_publicKey
T@"NSData",&,N,V_conversationMessageBytes
tuConversationLink
T@"TUConversationLink",R,C,N
initWithType:groupUUID:link:
initWithEncryptedMessage:enclosedType:link:
constitutesLetMeInApproval
tuInvitationPreferences
conversationGroupUUID
setConversationGroupUUID:
setTUInvitationPreferences:
T@"NSSet",C,N,SsetTUInvitationPreferences:
T@"NSUUID",&,N
tuConversationLinkDescriptor
groupUUID
originatorTUHandle
linkWithTUConversationLink:includeGroupUUID:
T@"TUConversationLink",R,N
T@"TUConversationLinkDescriptor",R,N
T@"NSUUID",R,N
T@"TUHandle",R,N
invitedHandlesType
hasPseudonym
hasPrivateKey
clearInvitedHandles
addInvitedHandles:
invitedHandlesCount
invitedHandlesAtIndex:
setCreationDateEpochTime:
setHasCreationDateEpochTime:
hasCreationDateEpochTime
hasGroupUUIDString
hasOriginatorHandle
setPseudonymExpirationDateEpochTime:
setHasPseudonymExpirationDateEpochTime:
hasPseudonymExpirationDateEpochTime
setIsActivated:
setHasIsActivated:
hasIsActivated
hasGeneratorDescriptor
hasLinkName
linkLifetimeScope
setLinkLifetimeScope:
setHasLinkLifetimeScope:
hasLinkLifetimeScope
linkLifetimeScopeAsString:
StringAsLinkLifetimeScope:
pseudonym
setPseudonym:
privateKey
setPrivateKey:
invitedHandles
setInvitedHandles:
creationDateEpochTime
groupUUIDString
setGroupUUIDString:
originatorHandle
setOriginatorHandle:
pseudonymExpirationDateEpochTime
isActivated
generatorDescriptor
setGeneratorDescriptor:
linkName
setLinkName:
_creationDateEpochTime
_pseudonymExpirationDateEpochTime
_generatorDescriptor
_groupUUIDString
_invitedHandles
_linkLifetimeScope
_linkName
_originatorHandle
_privateKey
_pseudonym
_isActivated
T@"NSString",&,N,V_pseudonym
T@"NSData",&,N,V_privateKey
T@"NSMutableArray",&,N,V_invitedHandles
Td,N,V_creationDateEpochTime
T@"NSString",&,N,V_groupUUIDString
T@"CSDMessagingHandle",&,N,V_originatorHandle
Td,N,V_pseudonymExpirationDateEpochTime
TB,N,V_isActivated
T@"CSDMessagingConversationLinkGeneratorDescriptor",&,N,V_generatorDescriptor
T@"NSString",&,N,V_linkName
Ti,N,V_linkLifetimeScope
destinationWithTUConversationMember:
destinationWithTUConversationParticipant:
relayMessagingController
callController
allCalls
callStateController
setCallStateController:
_callStateController
T@"CSDCallStateController",&,N,V_callStateController
T@"CSDRelayMessagingController",R,N
T@"CSDCallController",R,N
T@"NSArray",R,N
init
dealloc
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
accelerometer:didAccelerateWithTimeStamp:x:y:z:eventType:
accelerometer:didChangeDeviceOrientation:
callCenterObserver:callChanged:
callsChangedForCallCenterObserver:
initWithCallCenterObserver:
_updateCurrentOrientationValue
setOrientationEventsEnabled:
accelerometer
callCenterObserver
setCallCenterObserver:
currentOrientation
setCurrentOrientation:
_accelerometer
_callCenterObserver
_currentOrientation
T@"<CSDCallCenterObserver>",&,N,V_callCenterObserver
Tq,N,V_currentOrientation
T@"BKSAccelerometer",R,N,V_accelerometer
handleCallStatusChanged:
handleSessionStateChanged:
sharedInstance
sharedInstanceWithQueue:
beginTransactionIfNecessaryForObject:withReason:
endTransactionIfNecessaryForObject:
T@"CSDTransactionManager",R,N
initWithQueue:
openTransactions
queue
_openTransactions
_queue
T@"NSMapTable",R,N,V_openTransactions
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
simulateCrashReportWithReason:pid:code:
simulateCrashReportFromPID:withKillCode:usingReasonWithFormat:
simulateCrashReportWithFormat:
processAssertionWithBundleIdentifier:
processAssertionNameForBundleIdentifier:
initWithBundleIdentifier:
acquireWithCompletionHandler:
name
bundleIdentifier
processAssertion
setProcessAssertion:
_bundleIdentifier
_processAssertion
T@"BKSProcessAssertion",&,N,V_processAssertion
T@"NSString",R,C,N,V_bundleIdentifier
startedCapturingLocalVideo:
stoppedCapturingLocalVideo:
conferenceFinishedPreparing:
conferenceStarted:
conference:endedWithReason:error:
connectionClosedForConference:
mutedChangedForConference:
sendingAudioChangedForConference:
receivedFirstRemoteFrameForConference:
remoteVideoPausedForConference:
conference:remoteMediaStalled:
conference:inputFrequencyLevelChangedTo:
conference:outputFrequencyLevelChangedTo:
conference:inputLevelChangedTo:
conference:outputLevelChangedTo:
conference:changedBytesOfDataUsed:
conference:didReceiveData:forCallID:
conferenceProvider:didStartSession:error:
conferenceProvider:didStopWithError:callMetadata:
connectionClosedForConferenceProvider:
serverDiedForConferenceProvider:
conferenceProvider:updateInputFrequencyLevel:
conferenceProvider:updateOutputFrequencyLevel:
conferenceProvider:updateInputLevel:
conferenceProvider:updateOutputLevel:
conferenceProvider:didPauseAudio:error:
conferenceProvider:didPauseVideo:error:
conferenceProviderReceivedFirstRemoteFrame:
conferenceProvider:remoteVideoPaused:
conferenceProvider:remoteMediaStalled:
conferenceProvider:didReceiveData:forCallID:
prepareWithConfiguration:
startConnectionWithTransport:
stop
cancel
updateCapabilities:
sendData:
setRemoteIDSDestinationURI:crossDeviceIdentifier:
delegate
setDelegate:
delegateQueue
setDelegateQueue:
localInviteDictionary
remoteInviteDictionary
setRemoteInviteDictionary:
callID
isCaller
setCaller:
connectionTimeout
setConnectionTimeout:
deviceRole
setDeviceRole:
state
endedReason
endedError
dateStartedConnecting
dateConnected
dateEnded
isMuted
setMuted:
isSendingAudio
setSendingAudio:
isSendingAudioData
setSendingAudioData:
hasReceivedFirstRemoteFrame
isSendingVideo
setSendingVideo:
isRemoteVideoPaused
remoteVideoPresentationSize
setRemoteVideoPresentationSize:
remoteVideoPresentationState
setRemoteVideoPresentationState:
inputAudioPowerSpectrumToken
outputAudioPowerSpectrumToken
T@"<CSDAVConferenceDelegate>",W,N
T@"NSObject<OS_dispatch_queue>",&,N
T@"NSDictionary",R,C,N
T@"NSDictionary",C,N
Tq,R,N
caller
TB,N,GisCaller
Td,N
Ti,N
Ti,R,N
T@"NSError",R,N
T@"NSDate",R,N
muted
TB,N,GisMuted
sendingAudio
TB,N,GisSendingAudio
sendingAudioData
TB,N,GisSendingAudioData
sendingVideo
TB,N,GisSendingVideo
remoteVideoPaused
TB,R,N,GisRemoteVideoPaused
T{CGSize=dd},N
TI,N
_stop
_setEndedWithReason:error:
setDateConnected:
setDateEnded:
setDateStartedConnecting:
setState:
_isMuted
_isSendingAudio
_isSendingAudioData
_isSendingVideo
isSendingVideoExpected
_isSendingVideoExpected
setSendingVideoExpected:
_setUpDidStartTimeout
_performDelegateCallback:
_sendDelegateFinishedPreparing
_sendDelegateStarted
_sendDelegateEndedWithReason:error:
_sendDelegateConnectionClosed
_sendDelegateMutedChanged
_sendDelegateSendingAudioChanged
_sendDelegateReceivedFirstRemoteFrame
_sendDelegateRemoteVideoPaused
_sendDelegateRemoteMediaStalled:
_sendDelegateInputFrequencyLevelChanged:
_sendDelegateOutputFrequencyLevelChanged:
_sendDelegateInputLevelChanged:
_sendDelegateOutputLevelChanged:
_sendDelegateBytesOfDataUsageChanged:
_sendDelegateReceivedData:forCallID:
_endedReasonForDidStopError:error:
setQueue:
setLocalInviteDictionary:
setEndedReason:
setEndedError:
setHasReceivedFirstRemoteFrame:
setRemoteVideoPaused:
capturingLocalVideo
setCapturingLocalVideo:
configuration
setConfiguration:
conferenceProvider
setConferenceProvider:
conferenceProviderCreationBlock
setConferenceProviderCreationBlock:
_hasReceivedFirstRemoteFrame
_remoteVideoPaused
_capturingLocalVideo
_state
_remoteVideoPresentationState
_delegate
_delegateQueue
_connectionTimeout
_dateConnected
_dateEnded
_dateStartedConnecting
_sendingVideoExpected
_localInviteDictionary
_endedReason
_endedError
_configuration
_conferenceProvider
_conferenceProviderCreationBlock
_remoteVideoPresentationSize
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSDictionary",C,N,V_localInviteDictionary
Ti,N,V_state
Tq,N,V_endedReason
T@"NSError",&,N,V_endedError
T@"NSDate",&,N,V_dateStartedConnecting
T@"NSDate",&,N,V_dateConnected
T@"NSDate",&,N,V_dateEnded
TB,N,V_hasReceivedFirstRemoteFrame
TB,N,GisRemoteVideoPaused,V_remoteVideoPaused
TB,N,V_capturingLocalVideo
T@"CSDAVConferenceConfiguration",&,N,V_configuration
T@"<CSDAVConferenceProvider>",&,N,V_conferenceProvider
T@?,C,N,V_conferenceProviderCreationBlock
sendingVideoExpected
T@"NSNumber",&,N,GisSendingVideoExpected,V_sendingVideoExpected
T@"<CSDAVConferenceDelegate>",W,N,V_delegate
T@"NSObject<OS_dispatch_queue>",&,N,V_delegateQueue
Td,N,V_connectionTimeout
T{CGSize=dd},N,V_remoteVideoPresentationSize
TI,N,V_remoteVideoPresentationState
capabilities
setCapabilities:
clientUUID
setClientUUID:
reportingHierarchyToken
setReportingHierarchyToken:
requiresInviteDictionary
setRequiresInviteDictionary:
localLandscapeAspectRatio
setLocalLandscapeAspectRatio:
localPortraitAspectRatio
setLocalPortraitAspectRatio:
_caller
_requiresInviteDictionary
_capabilities
_clientUUID
_reportingHierarchyToken
_remoteInviteDictionary
_localLandscapeAspectRatio
_localPortraitAspectRatio
TB,N,GisCaller,V_caller
T@"VCCapabilities",&,N,V_capabilities
T@"NSUUID",&,N,V_clientUUID
T@"RTCSecureHierarchyToken",&,N,V_reportingHierarchyToken
TB,N,V_requiresInviteDictionary
T@"NSDictionary",C,N,V_remoteInviteDictionary
T{CGSize=dd},N,V_localLandscapeAspectRatio
T{CGSize=dd},N,V_localPortraitAspectRatio
initWithHandoffActivityUserInfo:
handoffActivityUserInfo
providerIdentifierForHandoffActivityUserInfo:
hasHandle
hasAvcData
setIsMomentsAvailable:
setHasIsMomentsAvailable:
hasIsMomentsAvailable
setIsScreenSharingAvailable:
setHasIsScreenSharingAvailable:
hasIsScreenSharingAvailable
setIsGondolaCallingAvailable:
setHasIsGondolaCallingAvailable:
hasIsGondolaCallingAvailable
setIsMirageAvailable:
setHasIsMirageAvailable:
hasIsMirageAvailable
setIsLightweight:
setHasIsLightweight:
hasIsLightweight
setSharePlayProtocolVersion:
setHasSharePlayProtocolVersion:
hasSharePlayProtocolVersion
setOptions:
setHasOptions:
hasOptions
setIsGFTDowngradeToOneToOneAvailable:
setHasIsGFTDowngradeToOneToOneAvailable:
hasIsGFTDowngradeToOneToOneAvailable
setGuestModeEnabled:
setHasGuestModeEnabled:
hasGuestModeEnabled
hasAssociation
setIsUPlusNDowngradeAvailable:
setHasIsUPlusNDowngradeAvailable:
hasIsUPlusNDowngradeAvailable
avMode
setAvMode:
setHasAvMode:
hasAvMode
avModeAsString:
StringAsAvMode:
handle
setHandle:
avcData
setAvcData:
isMomentsAvailable
isScreenSharingAvailable
isGondolaCallingAvailable
isMirageAvailable
isLightweight
sharePlayProtocolVersion
options
isGFTDowngradeToOneToOneAvailable
guestModeEnabled
association
setAssociation:
isUPlusNDowngradeAvailable
_association
_avMode
_avcData
_handle
_options
_sharePlayProtocolVersion
_guestModeEnabled
_isGFTDowngradeToOneToOneAvailable
_isGondolaCallingAvailable
_isLightweight
_isMirageAvailable
_isMomentsAvailable
_isScreenSharingAvailable
_isUPlusNDowngradeAvailable
T@"CSDMessagingHandle",&,N,V_handle
T@"NSData",&,N,V_avcData
TB,N,V_isMomentsAvailable
TB,N,V_isScreenSharingAvailable
TB,N,V_isGondolaCallingAvailable
TB,N,V_isMirageAvailable
TB,N,V_isLightweight
TI,N,V_sharePlayProtocolVersion
TI,N,V_options
TB,N,V_isGFTDowngradeToOneToOneAvailable
TB,N,V_guestModeEnabled
T@"CSDMessagingConversationParticipantAssociation",&,N,V_association
TB,N,V_isUPlusNDowngradeAvailable
Ti,N,V_avMode
tuInvitationPreference
tuHandleType
invitationPreferenceWithTUConversationInvitationPreference:
messagingHandleTypeFor:
T@"TUConversationInvitationPreference",R,N
protocolVersion
setProtocolVersion:
wantsVideo
setWantsVideo:
senderMuteUplink
setSenderMuteUplink:
setMomentsAvailable:
shouldSuppressInCallUI
setShouldSuppressInCallUI:
addProtocolVersion
momentsAvailable
TB,N,GisMomentsAvailable
callStatusChanged:
callContinuityChanged:
shouldSuppressRingtoneChanged:
callStartedConnecting:
callConnected:
callIsUplinkMutedChanged:
callIsSendingVideoChanged:
allConversationHandoffDynamicIdentifierPossibilitiesForGroupUUID:participantIdentifier:
providersChangedForProviderManager:
receivedBroadcastedActivityType:dynamicIdentifier:originatingDeviceType:
stoppedReceivingActivityType:dynamicIdentifier:
conversationsChangedForConversationManager:
conversationManager:stateChangedForConversation:
conversationManager:stateChangedForConversation:fromOldConversation:
conversationManager:letMeInRequestStateChangedForConversation:
conversationManager:letMeInRequestStateChangedForConversation:fromOldConversation:
conversationManager:localVideoToggledForConversation:
conversationManager:localVideoToggledForConversation:fromOldConversation:
conversationManager:remoteMembersChangedForConversation:
conversationManager:remoteMembersChangedForConversation:fromOldConversation:
conversationManager:pendingMembersChangedForConversation:
conversationManager:pendingMembersChangedForConversation:fromOldConversation:
conversationManager:kickedMembersChangedForConversation:
conversationManager:kickedMembersChangedForConversation:fromOldConversation:
conversationManager:rejectedMembersChangedForConversation:
conversationManager:rejectedMembersChangedForConversation:fromOldConversation:
conversationManager:otherInvitedHandlesChangedForConversation:
conversationManager:otherInvitedHandlesChangedForConversation:fromOldConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:
conversationManager:activitySessionsChangedForConversation:
conversationManager:activitySessionsChangedForConversation:fromOldConversation:
conversationManager:oneToOneModeChangedForConversation:
conversationManager:oneToOneModeChangedForConversation:fromOldConversation:
conversationManager:avModeChangedForConversation:
conversationManager:avModeChangedForConversation:fromOldConversation:
conversationManager:removedActiveConversation:
conversationManager:addedActiveConversation:
conversationManager:didChangeActivatedLinks:
conversationManager:linkChangedForConversation:
conversationManager:linkChangedForConversation:fromOldConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:fromOldConversation:
conversationManager:conversation:requestedScreenShareForParticipant:
serverDisconnectedForConversationManager:
conversationManager:migratingFromConversation:toConversation:
conversationManager:conversation:receivedActivitySessionEvent:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
conversationManager:changedActivityAuthorizationForBundleIdentifier:
conversationManager:conversation:participant:addedNotice:
conversationManager:conversation:addedMembersLocally:
conversationManager:conversation:buzzedMember:
conversationManager:conversationUpdatedMessagesGroupName:
conversationManager:conversationUpdatedMessagesGroupName:fromOldConversation:
conversationManager:conversation:updatedMessagesGroupPhoto:
conversationManager:conversationUpdatedMessagesGroupUUID:
conversationManager:updatedIncomingPendingConversations:
conversationManager:trackedPendingMember:forConversationLink:
conversationManager:conversation:launchStateChanged:forActivitySession:
conversationManager:remoteScreenShareAttributesChanged:isLocallySharing:
conversationManager:remoteScreenShareEndedWithReason:
conversationManager:ignoreLMIRequestsChangedForConversation:
conversationManager:conversation:didChangeStateForActivitySession:
conversationManager:conversation:didChangeSceneAssociationForActivitySession:
conversationManager:sharePlayAvailableChanged:
conversationManager:screenSharingAvailableChanged:
conversationManager:handoffEligibilityChangedForConversation:
conversationManager:handoffEligibilityChangedToConversation:fromPreviousConversation:
conversationManager:systemActivitySessionsChangedForConversation:
conversationManager:systemActivitySessionsChangedForConversation:fromOldConversation:
T@"CSDUserActivityManager",R,N
initWithQueue:featureFlags:
updateCallHandoffRegistration
updateHandoffActivityState
endHandoffActivity
startSuppressRingtoneActivityBroadcastingIfNecessaryForCallWithStatusChange:
startSuppressRingtoneActivityBroadcastingForCall:
updateSuppressRingtoneActivityListeningState
updateHandoffAdvertisementForConversation:fromOldConversation:uplinkMuted:sendingVideo:
processStatusChangeAsHandedOffIfNecessaryForCall:
updateHandoffRegistrationForConversation:fromOldConversation:
deregisterHandoffIdentifiersForConversation:
updateAppHistoryActivityForCall
updateAudioVideoHandoffPreferencesForCall:
activityCommunicator
setActivityCommunicator:
handoffActivity
setHandoffActivity:
featureFlags
_activityCommunicator
_handoffActivity
_featureFlags
T@"CSDUserActivityCommunicator",&,N,V_activityCommunicator
T@"CSDUserActivity",&,N,V_handoffActivity
T@"TUFeatureFlags",R,N,V_featureFlags
containsRestrictedHandle:
containsOutgoingRestrictedHandle:forBundleIdentifier:performSynchronously:
containsRecentsRestrictedHandle:
filterStatusForAddresses:withBundleIdentifier:
isUnknownCall:
isUnknownAddress:normalizedAddress:forBundleIdentifier:
shouldFilterIncomingCall:
shouldRestrictAddresses:forBundleIdentifier:performSynchronously:
willRestrictAddresses:forBundleIdentifier:
isSilenceUnknownCallersEnabled
maxJunkLevel
csd_UUIDv5
reportingController:statusChangedForCall:totalCallCount:
reportingController:callEnteredForeground:
allCallsBackgroundedForReportingController:
reportingController:relayMessageReceived:fromPairedDevice:
reportingController:transactionGroupCompleted:
reportingController:providerFailedWithAction:forCall:
reportingController:capturedMomentsUsageReport:
reportingController:pickedRoute:forCall:
reportingController:timedOutPickingRoute:forCall:
reportingController:callUUID:withUserScore:
reportingController:addedActiveConversation:
reportingController:stateChangedForConversation:
reportingController:letMeInRequestStateChangedForConversation:
reportingController:removedActiveConversation:
reportingController:activeRemoteParticipantsChangedForConversation:
reportingController:remoteMembersChangedForConversation:
reportingController:AVCBlobRecoveryStartedForConversation:
reportingController:AVCBlobRecoveryTimedOutForConversation:
reportingController:receivedIDSReports:forConversation:
reportingController:receivedIDSReports:forSessionWithUUID:
reportingController:receivedIDSChat:
reportingController:receivedGroupActivitesReports:forConversation:
reportingController:messageRetryStartedForConversation:
reportingController:messageRetryFailedForConversation:
reportingController:messageRetrySucceededForConversation:
reportingController:avcBlobRequestMessageRetryStartedForConversation:
reportingController:avcBlobRequestMessageRetryFailedForConversation:
reportingController:avcBlobRequestMessageRetrySucceededForConversation:
reportingController:receivedReports:forConversation:
reportingController:receivedChat:
reportingController:receivedReports:forSessionWithUUID:
reportingController:voipAppFailedToPostIncomingCall:
reportingController:voipAppBecameDisabledFromLaunching:
reportingController:voipPushDroppedOnTheFloor:
reportingController:createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:
reportingController:createConversationReportingSessionForConversation:
reportingController:didEndSession:startDate:endDate:
reportingController:addedActivatedLink:
reportingController:receivedLetMeInRequestForConversation:
reportingController:sentLetMeInResponseForConversation:isApproved:
dataSource
setDataSource:
T@"<CSDReporterDataSource>",W,N
block
setBlock:
_block
T@?,C,N,V_block
proximitySensorObserver:didChangeCovered:
routesChangedForRouteController:
initWithQueue:proximitySensorObserver:voiceOverObserver:
initWithQueue:routeController:callCenterObserver:interfaceOrientationObserver:proximitySensorObserver:voiceOverObserver:
isInterfaceOrientationPortrait
setInterfaceOrientationPortrait:
proximityDetectionMode
setProximityDetectionMode:
isProximitySensorCovered
setProximitySensorCovered:
isProximitySensorEnabled
setProximitySensorEnabled:
shouldEnableProximitySensor
updateProximitySensorState
updateVoiceOverRoutingForCurrentProximityState
donateBiomeSignalIfNecessary
routeController
interfaceOrientationObserver
proximitySensorObserver
voiceOverObserver
voiceOverRunningDeterminationHandler
setVoiceOverRunningDeterminationHandler:
voiceOverTouchShouldRouteToSpeakerDeterminationHandler
setVoiceOverTouchShouldRouteToSpeakerDeterminationHandler:
proximityChangeHandler
setProximityChangeHandler:
_interfaceOrientationPortrait
_proximitySensorCovered
_proximityDetectionMode
_routeController
_interfaceOrientationObserver
_proximitySensorObserver
_voiceOverObserver
_voiceOverRunningDeterminationHandler
_voiceOverTouchShouldRouteToSpeakerDeterminationHandler
_proximityChangeHandler
T@"<CSDCallCenterObserver>",R,N,V_callCenterObserver
T@"TURouteController",R,N,V_routeController
T@"<CSDOrientationObserver>",R,N,V_interfaceOrientationObserver
T@"<CSDProximitySensorObserver>",R,N,V_proximitySensorObserver
T@"<CSDVoiceOverObserver>",R,N,V_voiceOverObserver
interfaceOrientationPortrait
TB,N,GisInterfaceOrientationPortrait,V_interfaceOrientationPortrait
Ti,N,V_proximityDetectionMode
proximitySensorCovered
TB,N,GisProximitySensorCovered,V_proximitySensorCovered
proximitySensorEnabled
TB,R,N,GisProximitySensorEnabled
T@?,C,N,V_voiceOverRunningDeterminationHandler
T@?,C,N,V_voiceOverTouchShouldRouteToSpeakerDeterminationHandler
T@?,C,N,V_proximityChangeHandler
initWithFaceTimeIDSChat:
initWithIMAVChat:
initWithTUConversation:
faceTimeTransportType
setFaceTimeTransportType:
isRemoteMomentsAvailable
setRemoteMomentsAvailable:
localizedHandoffRecipientDeviceCategory
setLocalizedHandoffRecipientDeviceCategory:
handoffRecipientParticipant
setHandoffRecipientParticipant:
updatePropertiesForVideo:
Tq,N
remoteMomentsAvailable
TB,R,N,GisRemoteMomentsAvailable
T@"NSString",C,N
T@"NSNumber",C,N
daemonConnected:
handleChatStateChanged:
handleChatFirstRemoteFrameArrived:
handleChatInvitationSent:
handleChatCallInfoChangedNotification:
handleChatConferenceIDChangedNotification:
handleChatConferenceMetadataUpdated:
handleChatMayRequireBreakBeforeMakeChanged:
handleChatInFrequencyChangedNotification:
handleChatOutFrequencyChangedNotification:
invitedToIMAVChat:
createdOutgoingIMAVChat:
inviteFailedFromIMHandle:reason:
providerDidReset:
providerDidBegin:
provider:executeTransaction:
provider:performStartCallAction:
provider:performAnswerCallAction:
provider:performEndCallAction:
provider:performSetHeldCallAction:
provider:performSetMutedCallAction:
provider:performSetGroupCallAction:
provider:performPlayDTMFCallAction:
provider:timedOutPerformingAction:
provider:didActivateAudioSession:
provider:didDeactivateAudioSession:
provider:performSendMMIOrUSSDCodeAction:
provider:performJoinCallAction:
provider:performSetTTYTypeCallAction:
provider:performSetSendingVideoCallAction:
provider:performSetSharingScreenCallAction:
provider:performSetScreenShareAttributesCallAction:
provider:performEnableVideoCallAction:
provider:performSetRelayingCallAction:
provider:performPullCallAction:
provider:performSetVideoPresentationSizeCallAction:
provider:performSetVideoPresentationStateCallAction:
isManagingCallWithUUID:
hasCallStartedConnectingWithUUID:
upgradeSessionUUIDForCallWithUUID:
endCallWithUUIDAsAnsweredElsewhere:
endCallWithUUIDAsDeclinedElsewhere:
endCallWithUUIDAsLocalHangup:
endCallWithUUID:
_setUpListeners
_requestPendingInvites
chatWithUUID:
registerChat:
_endChatWithUUID:withEndedReason:
inviteIMAVPeersWithAction:tokensToExclude:joinCallActionToFulfill:
_setLocalLandscapeAspectRatio:localPortraitAspectRatio:forChat:
IMAVChatRemoteVideoPresentationStateFromCXVideoPresentationState:
_updateProviderForConnectingChat:
_updateProviderForConnectedChat:
_updateProviderForEndedChat:
failureContextForChat:
faceTimeDemuxerDelegate
setFaceTimeDemuxerDelegate:
providerDidBegin
setProviderDidBegin:
imAccountForActionBlock
setImAccountForActionBlock:
provider
setProvider:
cachedChats
setCachedChats:
accessorLock
_accessorLock
_faceTimeDemuxerDelegate
_providerDidBegin
_imAccountForActionBlock
_provider
_cachedChats
T@"CXProvider",&,N,V_provider
T@"NSMutableOrderedSet",&,N,V_cachedChats
T{os_unfair_lock_s=I},R,N,V_accessorLock
T@"<CSDFaceTimeProviderDelegateManagerDelegate>",W,N,V_faceTimeDemuxerDelegate
T@?,C,N,V_providerDidBegin
T@?,C,N,V_imAccountForActionBlock
recentCallsDeleted:
allCallHistoryDeleted
registerClient:
unregisterClient:
initWithCallHistoryController:
invalidate
notifyClientsToConnectIfNecessary
callHistoryController
clientManager
clientsShouldConnectToken
setClientsShouldConnectToken:
_clientsShouldConnectToken
_callHistoryController
_clientManager
T@"CSDCallHistoryController",R,N,V_callHistoryController
T@"CSDClientManager",R,N,V_clientManager
Ti,N,V_clientsShouldConnectToken
initWithName:
faceTimeIMAccountCallerIDChanged:
account:aliasesChanged:
callerID
caseInsensitiveCompare:
session:receivedActiveParticipantDestinationsByIdentifier:
session:receivedActiveLightweightParticipantDestinationsByIdentifier:
session:didJoinGroup:participantIdentifiers:error:
session:didLeaveGroupWithError:
sessionDidTerminate:
session:endedWithError:reason:
session:didReceiveLocalParticipantType:error:
session:didReceiveReport:
session:didReceiveKickedParticipantIDs:withCode:withType:isTruncated:
session:didRegisterPluginAllocationInfo:
session:didUnregisterPluginAllocationInfo:
sessionDidReceiveKeyUpdate:
session:didReceiveDataBlob:forParticipant:
activitySessionManager:activitySessionChanged:
activitySessionManager:activitySessionIsJoinable:
activitySessionManager:activityChangedOnSession:
activitySessionManager:receivedActivitySessionEvent:
activitySessionManager:fetchDataCryptorForTopic:completionHandler:
activitySessionManager:requestEncryptionKeysForParticipants:topicName:
activitySessionManager:localParticipantWithParticipantIdentifier:bundleIdentifier:
activitySessionManager:activeRemoteParticipantWithParticipantIdentifier:bundleIdentifier:
activitySessionManager:activeRemoteParticipantWithParticipantIdentifier:bundleIdentifier:completionHandler:
activitySessionManagerRequestedCallTypeStringForLogging:
activitySessionManager:sessionUnjoined:startDate:endDate:
activitySessionManager:requestForegroundPresentationForActivity:
activitySessionManager:activitySessionRemoved:userOriginated:
activitySessionManager:activitySessionStateChanged:oldState:
activitySessionManager:activitySessionAssociatedSceneChanged:
audioPolicyManager:sharePlayAllowedStateChanged:
session:didStart:error:
session:didDetectError:
session:didStopWithError:
session:changedLocalAudioEnabled:didSucceed:error:
session:changedLocalVideoEnabled:didSucceed:error:
session:changedScreenEnabled:didSucceed:error:
session:changedLocalAudioPaused:didSucceed:error:
session:changedLocalVideoPaused:didSucceed:error:
session:changedOneToOneModeEnabled:didSucceed:error:
session:changedBytesOfDataUsed:
session:changedAdditionalVideoRepresentation:didSucceed:error:
session:screenCaptureDidStart:withError:
serverDisconnectedForSession:
sessionShouldReconnect:
remoteParticipantWithIdentifier:updatedAudioEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedVideoEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedScreenEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedAudioEnabled:updatedVideoEnabled:streamToken:screenToken:captionsToken:
remoteParticipantWithIdentifier:updatedAudioPaused:streamToken:
remoteParticipantWithIdentifier:didChangeAudioPriority:videoPriority:
remoteParticipantWithIdentifier:updatedRemoteAudioEnabled:
remoteParticipantWithIdentifier:updatedRemoteVideoEnabled:
remoteParticipantWithIdentifier:updatedAdditionalVideoRepresentation:
initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:activity:link:report:fromStorage:avMode:applicationController:
initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:activity:link:report:fromStorage:avMode:applicationController:featureFlags:systemStateObserver:
activeParticipants
activeRemoteParticipants
activeLightweightParticipants
isAnyOtherAccountDeviceActive
tuConversation
avcSessionIdentifier
avcSessionToken
localParticipantIdentifier
maxVideoDecodesAllowed
isAudioReady
setRemoteMembers:
localConversationParticipantWithDataToSendToDestinationIDs:
localParticipantData
localParticipantDataToSendToDestinationIDs:
_expanseEnabled
setForceExpanseEnabled:
virtualParticipants
memberHandlesEligibleForLinkApproval
isUplinkMuted
setUplinkMuted:
isAudioEnabled
setAudioEnabled:
isVideoEnabled
isScreenEnabled
setVideoEnabled:
setScreenEnabled:attributes:
isVideoPaused
setVideoPaused:
setScreenShareAttributes:
isAudioPaused
setAudioPaused:
isRelaying
setRelaying:
setLocalParticipantAudioVideoMode:
registerMessagesGroupAssociation
setVideo:
isVideo
additionalVideoRepresentation
setAdditionalVideoRepresentation:
isOneToOneModeEnabled
isOneToOneHandoffOngoing
setOneToOneModeEnabled:
setSplitSessionSecondary:
presentationState
setPresentationState:
presentationRect
setPresentationRect:
setConversationGridDisplayMode:
updateLocalAspectRatiosForOneToOneModeEnabled:
isFromStorage
setFromStorage:
memberIdentifiers
setMemberIdentifiers:
addActiveParticipant:
removeParticipantsForMember:
setParticipantAudioVideoMode:forParticipant:
allowsScreenSharing
removeParticipantWithIdentifier:fromHandle:
updateParticipantPresentationContexts:
addVirtualParticipant:
removeVirtualParticipant:
removeRemoteMembers:triggeredLocally:
addRemoteMembers:otherInvitedHandles:triggeredLocally:
addRemoteMembers:otherInvitedHandles:invitationPreferences:addingFromLetMeIn:triggeredLocally:
updateMemberValidationSource:source:
updateMessagesGroupName:
addPendingMembers:triggeredLocally:
removePendingMembers:triggeredLocally:
setConversationLink:allowUpdate:
leaveActivitySessionWithUUID:
presentDismissalAlertForActivitySessionWithUUID:
removeActivitySessionWithUUID:usingTerminatingHandle:
_launchApplicationDueToActivityCreation:
createActivitySession:
setUsingAirplay:forActivitySessionUUID:
createStagedActivitySessionForActivity:
setStagedActivitySessionForActivitySession:
_launchApplicationsForActivitiesIfNecessary
removeActivitySessionIfNecessary
_launchApplicationsForActivitiesIfNecessary:
_launchApplicationForActivityIfNecessary:
_launchApplicationForActivityIfNecessary:shouldForeground:
activitySessions
tuActivitySessions
tuSystemActivitySessions
createSelectiveSharingSessionIfNecessary
resetSelectiveSharingSessionContent
stopSelectiveSharingSession
setupNewAVCSession:
joinUsingContext:
broadcastLocalParticipantData
startAudio
leave
kickMember:
_allowMember:
setRemoteParticipantsDownlinkMuted:
setAudioEnabled:forParticipantWithIdentifier:
setVideoEnabled:forParticipantWithIdentifier:
reducedInfoMembers:
isRepresentedByRemoteMembers:andLink:
memberWithHandle:
containsMemberWithHandle:
capabilitySendMessageOptions
addRequiredCapabilities:requiredLackOfCapabilities:
remoteParticipantForHandle:
remoteParticipantForIdentifier:
remoteMemberForHandle:
localParticipant
addAliasesToConversationContainer:forBundleIdentifier:
setIDSAliasingSalt:onContainer:
allParticipantsSupportSharePlay
isMirageEnabled
_startIDSSessionWithContext:
_startAVCSessionIfNecessary
_cleanUpFromAVCSessionFailure
cleanUpIDSSessionState
_beginTimeoutForLeavingConversationWithReason:
_cancelTimeoutForLeavingConversation
_requestAVCBlobsIfNecessary
_cancelInFlightAVCBlobRecoveryIfNecessary
_pruneRemoteParticipantsIfNecessary
refreshActiveParticipantsList
_reportConversationFailedWithFailureReason:providerEndedReason:
_reportConversationFailedWithProviderEndedReason:
_stableExpanseIdentifier
_registerPluginsIfNecessary
switchBackToOneToOneIfPossible
switchBackToOneToOneIfPossibleUsingDelay:
continueHandoffAudioRouteForIdentifier:
reviveOrInvalidateCachedConversationIfNecessary
setParticipantType:forRemoteMemberDestinations:
_errorToAVCProviderEndedReason:defaultProviderReason:
executeSessionDidStart
updateScreenEnabledForRemoteParticipants:
postUserNotificationForUnsupportedScreenSharingActivity:alternateReponseHandler:
UUID
link
setLink:
messagesGroupUUID
setMessagesGroupUUID:
hasReceivedLetMeInRequest
setHasReceivedLetMeInRequest:
letMeInRequestState
setLetMeInRequestState:
isLocallyCreated
localLightweightSecondaryMember
setLocalLightweightSecondaryMember:
hasJoined
setHasJoined:
initiator
localMember
remoteMembers
lightweightMembers
setLightweightMembers:
pendingMembers
setPendingMembers:
kickedMembers
setKickedMembers:
rejectedMembers
setRejectedMembers:
otherInvitedHandles
setOtherInvitedHandles:
ignoreLMIRequests
setIgnoreLMIRequests:
supportedMediaTypes
setSupportedMediaTypes:
stagedActivitySession
setStagedActivitySession:
messagesGroupName
setMessagesGroupName:
isCaptioningEnable
activitySessionManager
setActivitySessionManager:
report
localParticipantAssociation
setLocalParticipantAssociation:
handoffEligibility
setHandoffEligibility:
activeRemoteParticipantsByIdentifier
activeLightweightParticipantsByIdentifier
setActiveLightweightParticipantsByIdentifier:
kickedParticipants
setKickedParticipants:
idsSession
avcSession
setAvcSession:
expectedAudioEnabled
setExpectedAudioEnabled:
expectedVideoEnabled
setExpectedVideoEnabled:
expectedScreenEnabled
setExpectedScreenEnabled:
expectedVideoPaused
setExpectedVideoPaused:
expectedAudioPaused
setExpectedAudioPaused:
expectedAdditionalParticipantRepresentation
setExpectedAdditionalParticipantRepresentation:
activeParticipantDestinationsByIdentifier
setActiveParticipantDestinationsByIdentifier:
activeLightweightParticipantDestinationsByIdentifier
setActiveLightweightParticipantDestinationsByIdentifier:
serverProvidedParticipantIdentifiers
setServerProvidedParticipantIdentifiers:
serverProvidedLightweightParticipantIdentifiers
setServerProvidedLightweightParticipantIdentifiers:
isWaitingToPruneParticipants
setWaitingToPruneParticipants:
lastRebroadcastTime
setLastRebroadcastTime:
rebroadcastTimeThreshold
setRebroadcastTimeThreshold:
videoDeviceController
virtualParticipantsByPluginName
faceTimeInviteDemuxer
pendingKickedMembersByIdentifier
setPendingKickedMembersByIdentifier:
pendingAllowedMembers
setPendingAllowedMembers:
kickMemberRetryCount
setKickMemberRetryCount:
currentParticipantPresentationContexts
setCurrentParticipantPresentationContexts:
splitSessionSecondary
applicationLaunchPolicyManager
setApplicationLaunchPolicyManager:
audioRoutePolicyManager
setAudioRoutePolicyManager:
sharePlaySystemStateObserver
setSharePlaySystemStateObserver:
downgradeToOneToOneAfterDelayBlock
setDowngradeToOneToOneAfterDelayBlock:
remoteMemberHandles
setRemoteMemberHandles:
pendingMemberHandles
setPendingMemberHandles:
memberHandlesAwaitingInvitesToLink
setMemberHandlesAwaitingInvitesToLink:
serverBag
setServerBag:
avcSessionCreationBlock
setAvcSessionCreationBlock:
reportingHierarchySubToken
setReportingHierarchySubToken:
inflightAVCBlobRecoveryBlocksByIdentifier
timeoutBlock
setTimeoutBlock:
participantRefreshBlock
setParticipantRefreshBlock:
avcSessionInProgress
setAvcSessionInProgress:
forceExpanseEnabled
invitationPreferences
setInvitationPreferences:
screenShareAttributes
audioRoutesByParticipantIdentifier
setAudioRoutesByParticipantIdentifier:
failureContext
setFailureContext:
_relaying
_fromStorage
_video
_hasReceivedLetMeInRequest
_locallyCreated
_hasJoined
_ignoreLMIRequests
_captioningEnabled
_waitingToPruneParticipants
_avcSessionInProgress
_forceExpanseEnabled
_memberIdentifiers
_UUID
_groupUUID
_link
_messagesGroupUUID
_letMeInRequestState
_localLightweightSecondaryMember
_initiator
_localMember
_remoteMembers
_lightweightMembers
_pendingMembers
_kickedMembers
_rejectedMembers
_otherInvitedHandles
_supportedMediaTypes
_stagedActivitySession
_messagesGroupName
_activitySessionManager
_report
_localParticipantAssociation
_handoffEligibility
_activeRemoteParticipantsByIdentifier
_activeLightweightParticipantsByIdentifier
_kickedParticipants
_idsSession
_avcSession
_expectedAudioEnabled
_expectedVideoEnabled
_expectedScreenEnabled
_expectedVideoPaused
_expectedAudioPaused
_expectedAdditionalParticipantRepresentation
_activeParticipantDestinationsByIdentifier
_activeLightweightParticipantDestinationsByIdentifier
_serverProvidedParticipantIdentifiers
_serverProvidedLightweightParticipantIdentifiers
_lastRebroadcastTime
_rebroadcastTimeThreshold
_videoDeviceController
_virtualParticipantsByPluginName
_faceTimeInviteDemuxer
_pendingKickedMembersByIdentifier
_pendingAllowedMembers
_kickMemberRetryCount
_currentParticipantPresentationContexts
_splitSessionSecondary
_applicationLaunchPolicyManager
_audioRoutePolicyManager
_sharePlaySystemStateObserver
_downgradeToOneToOneAfterDelayBlock
_remoteMemberHandles
_pendingMemberHandles
_memberHandlesAwaitingInvitesToLink
_serverBag
_avcSessionCreationBlock
_reportingHierarchySubToken
_inflightAVCBlobRecoveryBlocksByIdentifier
_timeoutBlock
_participantRefreshBlock
_invitationPreferences
_screenShareAttributes
_audioRoutesByParticipantIdentifier
_failureContext
T@"<TUFeatureFlags>",R,N,V_featureFlags
Tq,N,V_state
TB,N,GhasJoined,V_hasJoined
T@"NSMutableDictionary",R,N,V_activeRemoteParticipantsByIdentifier
T@"NSMutableDictionary",&,N,V_activeLightweightParticipantsByIdentifier
T@"NSMutableSet",&,N,V_kickedParticipants
T@"NSUUID",&,N,V_messagesGroupUUID
T@"CSDIDSGroupSession",R,N,V_idsSession
T@"<CSDAVCSession>",&,N,V_avcSession
T@"NSNumber",&,N,V_expectedAudioEnabled
T@"NSNumber",&,N,V_expectedVideoEnabled
T@"NSNumber",&,N,V_expectedScreenEnabled
T@"NSNumber",&,N,V_expectedVideoPaused
T@"NSNumber",&,N,V_expectedAudioPaused
T@"NSNumber",&,N,V_expectedAdditionalParticipantRepresentation
T@"NSDictionary",C,N,V_activeParticipantDestinationsByIdentifier
T@"NSDictionary",C,N,V_activeLightweightParticipantDestinationsByIdentifier
T@"NSSet",C,N,V_serverProvidedParticipantIdentifiers
T@"NSSet",C,N,V_serverProvidedLightweightParticipantIdentifiers
waitingToPruneParticipants
TB,N,GisWaitingToPruneParticipants,V_waitingToPruneParticipants
T@"NSDate",C,N,V_lastRebroadcastTime
TQ,N,V_rebroadcastTimeThreshold
T@"TUVideoDeviceController",R,N,V_videoDeviceController
oneToOneModeEnabled
TB,N,GisOneToOneModeEnabled
T@"NSMutableDictionary",R,N,V_virtualParticipantsByPluginName
T@"CSDFaceTimeInviteDemuxer",R,N,V_faceTimeInviteDemuxer
T@"NSMutableDictionary",&,N,V_pendingKickedMembersByIdentifier
T@"NSMutableSet",&,N,V_pendingAllowedMembers
TQ,N,V_kickMemberRetryCount
T@"NSArray",&,N,V_currentParticipantPresentationContexts
T@"CSDConversationParticipant",&,N,V_splitSessionSecondary
T@"TUConversationMember",&,N,V_localLightweightSecondaryMember
T@"CPApplicationPolicyManager",&,N,V_applicationLaunchPolicyManager
T@"CPAudioRoutePolicyManager",&,N,V_audioRoutePolicyManager
T@"CPSystemStateObserver",&,N,V_sharePlaySystemStateObserver
T@"TUConversationActivitySession",&,N,V_stagedActivitySession
T@?,C,N,V_downgradeToOneToOneAfterDelayBlock
T@"TUConversationLink",&,N,V_link
T@"NSSet",C,N,V_remoteMembers
T@"NSSet",C,N,V_pendingMembers
T@"NSSet",C,N,V_kickedMembers
T@"NSSet",C,N,V_rejectedMembers
T@"NSSet",C,N,V_otherInvitedHandles
T@"NSSet",C,N,V_lightweightMembers
T@"NSSet",C,N,V_remoteMemberHandles
T@"NSSet",C,N,V_pendingMemberHandles
T@"NSMutableArray",C,N,V_memberHandlesAwaitingInvitesToLink
T@"<CSDConversationServerBag>",&,N,V_serverBag
T@?,C,N,V_avcSessionCreationBlock
T@"NSObject",&,N,V_reportingHierarchyToken
T@"NSObject",&,N,V_reportingHierarchySubToken
T@"NSMutableDictionary",R,C,N,V_inflightAVCBlobRecoveryBlocksByIdentifier
T@?,C,N,V_timeoutBlock
T@?,C,N,V_participantRefreshBlock
TB,N,V_avcSessionInProgress
TB,N,V_forceExpanseEnabled
T@"NSSet",C,N,V_invitationPreferences
T@"TUCallScreenShareAttributes",N,V_screenShareAttributes
T@"TUConversationProvider",&,N,V_provider
T@"NSMutableDictionary",&,N,V_audioRoutesByParticipantIdentifier
T@"TUConversationParticipant",R,N
T@"CXCallFailureContext",&,N,V_failureContext
T@"<CSDConversationDelegate>",W,N,V_delegate
T@"NSUUID",R,N,V_UUID
T@"NSUUID",R,N,V_groupUUID
TB,N,V_hasReceivedLetMeInRequest
Tq,N,V_letMeInRequestState
TQ,R,N
audioReady
TB,R,N,GisAudioReady
locallyCreated
TB,R,N,GisLocallyCreated,V_locallyCreated
T@"TUHandle",R,N,V_initiator
T@"TUConversationMember",R,N,V_localMember
T@"NSSet",R,C,N
TB,N,V_ignoreLMIRequests
T@"NSArray",C,N,V_supportedMediaTypes
fromStorage
TB,N,GisFromStorage,V_fromStorage
T@"NSString",C,N,V_messagesGroupName
T@"NSSet",C,N,V_memberIdentifiers
T@"TUConversation",R,C,N
uplinkMuted
TB,N,GisUplinkMuted
videoEnabled
TB,N,GisVideoEnabled
screenEnabled
TB,R,N,GisScreenEnabled
audioEnabled
TB,N,GisAudioEnabled
videoPaused
TB,N,GisVideoPaused
audioPaused
TB,N,GisAudioPaused
relaying
TB,N,GisRelaying,V_relaying
video
TB,N,GisVideo,V_video
TQ,N,V_avMode
captioningEnabled
TB,R,N,GisCaptioningEnable,V_captioningEnabled
T{CGRect={CGPoint=dd}{CGSize=dd}},N
T@"NSDictionary",R,N
mirageEnabled
TB,R,N,GisMirageEnabled
T@"CPActivitySessionManager",&,N,V_activitySessionManager
T@"TUConversationReport",R,N,V_report
T@"NSSet",R,N
T@"TUConversationParticipantAssociation",C,N,V_localParticipantAssociation
oneToOneHandoffOngoing
TB,R,N,GisOneToOneHandoffOngoing
T@"TUConversationHandoffEligibility",C,N,V_handoffEligibility
handleActiveAccountsChanged:
_handlePairedDeviceChangedFrom:to:
setSupportsHolding:
setHasSupportsHolding:
hasSupportsHolding
setSupportsGrouping:
setHasSupportsGrouping:
hasSupportsGrouping
setSupportsUngrouping:
setHasSupportsUngrouping:
hasSupportsUngrouping
setSupportsDTMF:
setHasSupportsDTMF:
hasSupportsDTMF
setSupportsUnambiguousMultiPartyState:
setHasSupportsUnambiguousMultiPartyState:
hasSupportsUnambiguousMultiPartyState
setSupportsAddCall:
setHasSupportsAddCall:
hasSupportsAddCall
setSupportsSendingToVoicemail:
setHasSupportsSendingToVoicemail:
hasSupportsSendingToVoicemail
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
_supportsAddCall
_supportsDTMF
_supportsGrouping
_supportsHolding
_supportsSendingToVoicemail
_supportsUnambiguousMultiPartyState
_supportsUngrouping
TB,N,V_supportsHolding
TB,N,V_supportsGrouping
TB,N,V_supportsUngrouping
TB,N,V_supportsDTMF
TB,N,V_supportsUnambiguousMultiPartyState
TB,N,V_supportsAddCall
TB,N,V_supportsSendingToVoicemail
handleIncomingCallMessageFromHost:fromPairedDevice:
handleCallDialedMessageFromHost:fromPairedDevice:
handleCallAnsweredElsewhereMessageFromHost:fromPairedDevice:
handleCallDisconnectedMessageFromHost:
handleCallConnectedMessageFromHost:
handlePullRelayingCallsMessageFromHost:fromPairedDevice:
handleResetWantsHoldMusicFromHost:
handleUpdateCallModelMessageFromHost:
handleDeviceUnavailableMessageFromHost:
handleResetStateMessageFromHost:fromPairedDevice:
handleHardPauseDigitsAvailabilityMessageFromHost:
handleUpdateRemoteCallStateMessageFromHost:
handleCallStartedConnectingMessageFromHost:
handlePushHostedCallsMessageFromHost:completion:
handleUpdateCallContextAvailableMessageFromHost:
handleNeedsManualInCallSoundsChangeMessageFromHost:
handleInvitationSentMessageFromHost:
handleUpdateCallDisplayContextMessageFromHost:
handleUpdateRemoteUplinkMutedMessageFromHost:
handleUpdateRoutesMessageFromHost:
handleUpdateSupportsTTYWithVoiceMessageFromHost:
handleUpdateFailureExpectedMessageFromHost:
handleUpdateSupportsEmergencyFallbackMessageFromHost:
pullRemotelyHostedCallsForMessage:completion:
callWithUniqueProxyIdentifier:
initWithDictionary:
initWithType:
initWithType:uniqueProxyIdentifier:
typeString
receivedMessageTypeString
dialRequest
service
setService:
wantsHoldMusic
setWantsHoldMusic:
disconnectedReason
setDisconnectedReason:
cannotBeAnswered
setCannotBeAnswered:
DTMFKey
setDTMFKey:
isVoicemail
setVoicemail:
hardPauseDigitsState
setHardPauseDigitsState:
customizeForProtocolVersion:
shouldSuppressRingtone
setShouldSuppressRingtone:
needsManualInCallSounds
setNeedsManualInCallSounds:
cannotRelayAudioOrVideoOnPairedDevice
setCannotRelayAudioOrVideoOnPairedDevice:
isExpectedEndpointOnMessagingDevice
setExpectedEndpointOnMessagingDevice:
soundRegion
setSoundRegion:
setCallCapabilitiesState:
callCapabilitiesState
isEmergency
setEmergency:
isFailureExpected
setFailureExpected:
supportsEmergencyFallback
setSupportsEmergencyFallback:
isSOS
setSOS:
isRemoteUplinkMuted
setRemoteUplinkMuted:
callModel
setCallModel:
addCall:
setTuHandle:
tuHandle
tuProviders
setTuProviders:
tuProvider
setTuProvider:
setTuProvider:isVideo:
displayContext
setDisplayContext:
endpointIDSDestination
setEndpointIDSDestination:
localSenderIdentityUUID
setLocalSenderIdentityUUID:
localSenderIdentityAccountUUID
setLocalSenderIdentityAccountUUID:
remoteParticipantTUHandles
setRemoteParticipantTUHandles:
ttyType
setTtyType:
supportsTTYWithVoice
setSupportsTTYWithVoice:
priority
setPriority:
originatingUIType
setOriginatingUIType:
T@"NSString",R,C,N
T@"TUDialRequest",R,N
TC,N
voicemail
TB,N,GisVoicemail
expectedEndpointOnMessagingDevice
TB,N,GisExpectedEndpointOnMessagingDevice
T@"TUCallCapabilitiesState",&,N
emergency
TB,N,GisEmergency
failureExpected
TB,N,GisFailureExpected
TB,N,GisSOS,SsetSOS:
T@"TUCallModel",&,N
T@"TUHandle",&,N
T@"NSArray",&,N
TB,N,GisVideo
T@"TUCallProvider",&,N
T@"TUCallDisplayContext",&,N
remoteUplinkMuted
TB,N,GisRemoteUplinkMuted
T@"IDSDestination",&,N
T@"NSSet",C,N
type
setType:
setHasType:
hasType
typeAsString:
StringAsType:
hasValue
hasIsoCountryCode
value
setValue:
isoCountryCode
setIsoCountryCode:
_isoCountryCode
_type
_value
Ti,N,V_type
T@"NSString",&,N,V_value
T@"NSString",&,N,V_isoCountryCode
hasSender
hasAudioRouteUniqueIdentifier
sender
setSender:
audioRouteUniqueIdentifier
setAudioRouteUniqueIdentifier:
_audioRouteUniqueIdentifier
_sender
T@"CSDMessagingConversationParticipant",&,N,V_sender
T@"NSString",&,N,V_audioRouteUniqueIdentifier
tuConversationActivityContext
activityContextWithTUActivityContext:
T@"TUConversationActivityContext",R,N
initWithTUConversationReport:
tuConversationReport
T@"TUConversationReport",R,C,N
initWithUniqueProxyIdentifier:endpointOnCurrentDevice:
systemMuteStatusChanged:
callHistoryIdentifier
remoteParticipantHandles
setEndpointOnCurrentDevice:
setBluetoothAudioFormat:
setMixesVoiceWithMedia:
setMediaPlaybackOnExternalDevice:
dialWithRequest:displayContext:
answerWithRequest:
hold
unhold
groupWithOtherCall:
ungroup
disconnectWithReason:
setSharingScreen:
handleAudioSessionActivationStateChangedTo:
pauseDigitsQueueChanged:
initWithUniqueProxyIdentifier:configuration:
initIncomingWithBackingCallSource:UUID:update:
initOutgoingWithUniqueProxyIdentifier:backingCallSourceIdentifier:callUpdate:isVideo:endpointOnCurrentDevice:originatingUIType:
initOutgoingWithUpdate:callUUID:backingCallSource:isExpanseProvider:
initOutgoingWithDialRequest:
initOutgoingWithRequestedStartCallAction:backingCallSource:
initOutgoingWithJoinConversationRequest:
initWithHandoffContext:backingCallSource:
updateWithCallUpdate:
updateWithCallUpdate:notifyDelegate:
updateForDisconnection
endedReasonUserInfo
providerErrorCode
providerEndedReason
callerNameFromNetwork
callGroupUUID
isUsingBaseband
isBlocked
isThirdPartyVideo
videoStreamToken
audioInterruptionProviderType
audioInterruptionOperationMode
proxyAVAudioSession
audioCategory
audioMode
mixesVoiceWithMedia
ignoresBluetoothDeviceUID
providerContext
bluetoothAudioFormat
handoffDynamicIdentifier
mayRequireBreakBeforeMake
prefersExclusiveAccessToCellularNetwork
isMutuallyExclusiveCall
isConversation
callStatusFromUnderlyingSource
hasStartedConnecting
hasConnected
hasEnded
hardPauseDigits
isDownlinkMuted
providerProcessIdentifier
providerAuditToken
initialLinkType
spatialAudioSourceIdentifier
serviceStatus
usesSystemMuting
setHeld:
setOutgoing:
setCallGroupUUID:
setTTYType:
startCallActionWithDialRequest:
joinConversationWithRequest:
_setIsOnHold:
setProviderFailureReasonIfNecessary:
setIsSendingVideo:
setSharingScreen:attributes:
setUnderlyingUplinkMuted:
setDownlinkMuted:
sendHardPauseDigits
playRemoteDTMFToneForKey:
dequeueNextPauseDigits
cxScreenShareAttributesForCallAttributes:
tuScreenShareAttributesForScreenAttributes:
_sendDTMFDigits:type:
_sendSoftPauseDigitsIfNecessary
activeRemoteParticipantForCallUpdate:
imageURLForCXSandboxExtendedURL:
activeRemoteParticipant
setActiveRemoteParticipant:
imageURL
isOutgoing
wantsStagingArea
setWantsStagingArea:
isSharingScreen
isExpanseProvider
mediaPlaybackOnExternalDevice
providerCallDelegate
setProviderCallDelegate:
backingCallSource
setBackingCallSource:
providerSource
isHeld
isUnderlyingUplinkMuted
shouldAcceptDateConnectedProviderUpdates
setShouldAcceptDateConnectedProviderUpdates:
providerDisplayMonitor
backingCallSourceIdentifier
mergedCallUpdate
setMergedCallUpdate:
pauseDigitsQueue
setPauseDigitsQueue:
_outgoing
_wantsStagingArea
_sharingScreen
_expanseProvider
_mixesVoiceWithMedia
_mediaPlaybackOnExternalDevice
_held
_sendingVideo
_underlyingUplinkMuted
_shouldAcceptDateConnectedProviderUpdates
_ttyType
_originatingUIType
_activeRemoteParticipant
_imageURL
_bluetoothAudioFormat
_providerCallDelegate
_backingCallSource
_providerSource
_providerDisplayMonitor
_backingCallSourceIdentifier
_mergedCallUpdate
_pauseDigitsQueue
T@"NSString",R,C,N,V_backingCallSourceIdentifier
T@"CXCallSource",&,N,V_backingCallSource
T@"CXCallUpdate",&,N,V_mergedCallUpdate
T@"CSDPauseDigitsQueue",&,N,V_pauseDigitsQueue
TB,N,V_wantsStagingArea
Ti,R,N,V_originatingUIType
T@"AVAudioSession",R,N
TB,N,V_shouldAcceptDateConnectedProviderUpdates
T@"<CSDProviderCallDelegate>",W,N,V_providerCallDelegate
T@"CXAbstractProviderSource",R,N,V_providerSource
T@"TUParticipant",C,N,V_activeRemoteParticipant
held
TB,N,GisHeld,V_held
Ti,N,V_ttyType
Tq,N,V_bluetoothAudioFormat
T@"NSUUID",C,N
TB,N,V_sendingVideo
underlyingUplinkMuted
TB,N,GisUnderlyingUplinkMuted,V_underlyingUplinkMuted
TB,R,N,V_mixesVoiceWithMedia
TB,R,N,V_mediaPlaybackOnExternalDevice
expanseProvider
TB,R,N,GisExpanseProvider,V_expanseProvider
T@"CSDProviderDisplayMonitor",R,N,V_providerDisplayMonitor
handleCallHasStartedOutgoingChangedNotification:
handleCallStatusChangedNotification:
handleCallStartedConnectingNotification:
handleCallConnectedNotification:
handleCallMayRequireBreakBeforeMakeChangedNotification:
handleCallWantsHoldMusicChangedNotification:
callIsOnHoldChangedNotification:
handleCallOneToOneModeChangedNotification:
handleCallUpgradedToVideoNotification:
breakBeforeMakeTimeout
Td,R,N
initWithCallCenter:
_cleanCallMediaCache
callContainer
routeManager
wantsBreakBeforeMakeForCall:
_handleCallHasStartedOutgoingChanged:
_handleCallStatusChanged:
_handleCallStartedConnecting:
leaveAVLessConversationsIfNecessary
_handleCallConnected:
disconnectAllCallsBesides:
disconnectActiveCallsBasedOnCallStatusForCall:
_handleCallMayRequireBreakBeforeMakeChanged:
_handleCallWantsHoldMusicChanged:
enableEmergencyModeIfNecessaryForCall:
_handleLockStateChanged
_notifyCLTMOfIncomingCall
_disconnectOrPullExistingCallsForCallIfNecessary:
_pushCallToAlternateDestinationIfNecessary:
_setUpBreakBeforeMakeTimeoutIfNecessaryForCall:
_handleAudioReadyForCall:
_ringingTimerForCallWithIdentifier:
_setUpCallDurationLimitIfNecessary
_handleCallDurationTimerFired
_updateCallMutingForHoldMusic
setHeySiriEnabled:
callCenter
callDurationLimitTimer
setCallDurationLimitTimer:
isAudioMutedForHoldMusic
setAudioMutedForHoldMusic:
requestCLTMThrottleUncapToken
setRequestCLTMThrottleUncapToken:
lockStateNotificationToken
setLockStateNotificationToken:
setUpBreakBeforeMakeTimeout
setSetUpBreakBeforeMakeTimeout:
_audioMutedForHoldMusic
_requestCLTMThrottleUncapToken
_lockStateNotificationToken
_callCenter
_callDurationLimitTimer
_setUpBreakBeforeMakeTimeout
T@"NSObject<OS_dispatch_source>",&,V_callDurationLimitTimer
audioMutedForHoldMusic
TB,N,GisAudioMutedForHoldMusic,V_audioMutedForHoldMusic
Ti,N,V_requestCLTMThrottleUncapToken
Ti,N,V_lockStateNotificationToken
T@"TUCallCenter",R,N,V_callCenter
T@"<CSDCallContainer>",R,N
T@"CSDRouteManager",R,N
T@?,C,N,V_setUpBreakBeforeMakeTimeout
initWithConversationLink:localMember:queue:
temporaryGroupUUID
dateCreated
letMeInKeyAgreement
setLetMeInKeyAgreement:
approverHandle
setApproverHandle:
_videoEnabled
_audioEnabled
_uplinkMuted
_temporaryGroupUUID
_dateCreated
_conversationGroupUUID
_letMeInKeyAgreement
_approverHandle
T@"NSUUID",&,N,V_conversationGroupUUID
T@"CSDLetMeInRequestorKeyAgreement",&,N,V_letMeInKeyAgreement
T@"TUHandle",&,N,V_approverHandle
T@"NSUUID",R,N,V_temporaryGroupUUID
T@"NSDate",R,N,V_dateCreated
TB,N,GisVideoEnabled,V_videoEnabled
TB,N,GisAudioEnabled,V_audioEnabled
TB,N,GisUplinkMuted,V_uplinkMuted
TB,R,N,GisVideo,V_video
isDeviceSupported
resolutionChangedForResolver:
deviceSupported
TB,R,N,GisDeviceSupported
initWithResolver:withSystemStatusPublisher:queue:
shouldOpenInCallServiceForCall:
updateStatusBar
updateAttributionsForDescriptor:
displaySystemCallControlsByURL
displayHandoffEligibleNearbyByURL
openInCallServiceByURL
openUIServiceWithURL:
openVoIPAppWithBundleIdentifier:
resolver
setResolver:
systemStatusPublisher
currentDescriptor
setCurrentDescriptor:
_resolver
_systemStatusPublisher
_currentDescriptor
T@"<CSDStatusBarResolver>",&,N,V_resolver
T@"STCallingStatusDomainPublisher",R,N,V_systemStatusPublisher
T@"STCallingStatusDomainCallDescriptor",&,N,V_currentDescriptor
cancelSplitSessionApproval
tvDeviceAppeared:
tvDeviceDisappeared:
splitSessionStarted:
splitSessionEnded:
canApproveSessions
approveSplitSessionFor:from:pullContext:completion:
nearbyTVDevicesWithCompletion:
activeSplitSessionTVDeviceWithCompletion:
inviteTVDevice:toConversation:completion:
disconnectTVDevice:completion:
registerSplitSessionApprovalEnabled:
initWithConduit:
performBlockWithClients:
conduit
sessionApprovalClient
setSessionApprovalClient:
_conduit
_sessionApprovalClient
T@"CSDNeighborhoodActivityConduit",R,N,V_conduit
T@"CSDClient",W,N,V_sessionApprovalClient
initWithIDSDevice:
initWithUUID:carrierPhoneNumbers:
uuid
carrierPhoneNumbers
_uuid
_carrierPhoneNumbers
T@"NSUUID",R,C,N,V_uuid
T@"NSArray",R,C,N,V_carrierPhoneNumbers
subscriptionInfoDidChange
activeSubscriptionsDidChange
simLessSubscriptionsDidChange
dualSimCapabilityDidChange
serviceProviders
serviceProvidersWithCarrierNumbers
setServiceProviders:
fetchServiceProviders
carrierNumbersForSubscriptionContext:
objectForKeyHierarchy:subscriptionContext:error:
arrayOfStringsForKeyHierarchy:subscriptionContext:error:
carrierBundleChange:
telephonyClient
_serviceProviders
_telephonyClient
T@"CoreTelephonyClient",R,N,V_telephonyClient
T@"NSArray",C,N,V_serviceProviders
T@"<CSDCarrierBundlePhoneNumberProviderControllerDelegate>",W,N,V_delegate
T@"NSArray",R,C,N
updateParticipantData:withContext:
reconnectUPlusOneSession
registerPluginWithOptions:
setRequiredCapabilities:requiredLackOfCapabilities:
getParticipantIDForAlias:salt:completionHandler:
groupSessionDidTerminate:
groupSessionEnded:withReason:error:
sessionDidJoinGroup:participantsInfo:error:
sessionDidJoinGroup:participantInfo:error:
sessionDidJoinGroup:participantUpdate:error:
sessionDidLeaveGroup:error:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
session:didReceiveActiveParticipants:success:
session:didReceiveActiveLightweightParticipants:success:
session:didReceiveBlockedParticipantIDs:withCode:isTruncated:
session:didReceiveBlockedParticipantIDs:withCode:withType:isTruncated:
session:didReceiveQueryBlockedParticipantIDs:withCode:isTruncated:
session:didRemoveParticipantIDs:withCode:isTruncated:
sessionDidReceiveParticipantUpgrade:participantType:error:
participantUpdatedForSession:
session:didReceivePluginAllocationInfo:
sessiondidReceiveKeyUpdate:
session:didReceiveServerErrorCode:
session:receivedInvitationAcceptFromID:
session:receivedInvitationDeclineFromID:
session:receivedInvitationCancelFromID:
sessionStarted:
sessionEnded:
sessionEnded:withReason:error:
session:didReceiveData:
session:receivedInvitationAcceptFromID:withData:
session:receivedInvitationDeclineFromID:withData:
session:receivedInvitationCancelFromID:withData:
session:receivedSessionMessageFromID:withData:
session:receivedSessionEndFromID:withData:
session:invitationSentToTokens:
session:invitationSentToTokens:shouldBreakBeforeMake:
setPreferences:
joinWithOptions:
updateParticipantDestinationIDs:withContextData:triggeredLocally:
updateParticipantDestinationIDs:withContextData:requiredCapabilities:requiredLackOfCapabilities:triggeredLocally:
sendParticipantData:
restart
reconnect
requestActiveParticipants
kickParticipants:
allowParticipants:
requestDataCryptorForTopic:completionHandler:
requestEncryptionKeyForParticipants:topic:
addAliasesToConversationContainer:withSalt:
participantIDForAlias:salt:
participantIDForAlias:salt:completion:
setParticipantType:forLocalMemberDestination:
isAVLess
participantDestinationIDs
destination
requiredCapabilities
requiredLackOfCapabilities
avLess
TB,R,N,GisAVLess
T@"<CSDIDSGroupSessionProviderDelegate>",W,N
TI,R,N
initWithGroupID:participantDestinationIDs:callerID:account:queue:isOneToOneModeEnabled:isLightweightMember:avLess:
setUpSession
session
removeRequiredCapabilities:requiredLackOfCapabilities:
setSession:
setParticipantDestinationIDs:
groupID
account
isLightweightMember
_avLess
_isOneToOneModeEnabled
_isLightweightMember
_session
_participantDestinationIDs
_groupID
_account
_callerID
T@"IDSGroupSession",&,N,V_session
T@"NSString",R,C,N,V_groupID
T@"IDSAccount",R,N,V_account
TB,R,N,V_isOneToOneModeEnabled
TB,R,N,V_isLightweightMember
T@"NSString",R,C,N,V_callerID
T@"NSArray",C,N,V_participantDestinationIDs
TB,R,N,GisAVLess,V_avLess
T@"<CSDIDSGroupSessionProviderDelegate>",W,N,V_delegate
data
setData:
completion
setCompletion:
_data
_completion
T@"NSData",&,N,V_data
T@?,C,N,V_completion
initWithSessionProvider:isInitiator:remoteProtocolVersion:
transport
sessionProviderStarted:
sessionProvider:endedWithReason:error:
initWithSessionProvider:isInitiator:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:
initAsInitiatorWithSessionProvider:identifiers:
initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:
allIdentifiers
hasIdentifier:
addIdentifier:
addIdentifiers:
removeIdentifier:
removeIdentifiers:
mergeSession:
runBlocksPendingTransportAvailabilityIfNecessary:
runBlocksPendingTransportAvailability:
performBlockOnTransportAvailability:
pendData:completion:
sendPendingData
removePendingData
sendData:waitUntilConnected:completion:
sendData:toDestinations:completion:
sendDataAndSendInvitationIfNecessary:declineOnError:
sendDataAndAcceptInvitationIfNecessary:
sendDataAndCancelInvitationIfNecessary:
sendDataAndDeclineInvitationIfNecessary:
prepareToEnd
sessionProvider:receivedInvitationAcceptFromID:withData:
sessionProvider:receivedInvitationCancelFromID:withData:
sessionProvider:receivedInvitationDeclineFromID:withData:
sessionProvider:receivedSessionMessageFromID:withData:
remoteDestination
setRemoteDestination:
remoteDevice
setRemoteDevice:
pendingData
identifiers
blocksPendingTransportAvailability
hasStarted
setHasStarted:
hasReceivedAccept
setHasReceivedAccept:
acceptPayloadData
setAcceptPayloadData:
_hasStarted
_hasReceivedAccept
_remoteDestination
_remoteDevice
_pendingData
_identifiers
_blocksPendingTransportAvailability
_acceptPayloadData
T@"IDSDestination",&,N,V_remoteDestination
T@"IDSDevice",&,N,V_remoteDevice
T@"NSMutableArray",R,N,V_pendingData
T@"NSMutableSet",R,N,V_identifiers
T@"NSMutableArray",R,N,V_blocksPendingTransportAvailability
TB,N,V_hasStarted
TB,N,V_hasReceivedAccept
T@"NSData",C,N,V_acceptPayloadData
T@"<CSDRelayIDSDualSessionDelegate>",W,N,V_delegate
T@"<CSDCallHistoryControllerDelegate>",&,N,V_delegate
hasUpdateMessage
hasCheckInMessage
hasRecoverMessage
updateMessage
setUpdateMessage:
checkInMessage
setCheckInMessage:
recoverMessage
setRecoverMessage:
_checkInMessage
_recoverMessage
_updateMessage
T@"CSDMessagingLinkSyncUpdateMessage",&,N,V_updateMessage
T@"CSDMessagingLinkSyncCheckInMessage",&,N,V_checkInMessage
T@"CSDMessagingLinkSyncRecoverMessage",&,N,V_recoverMessage
handleIDSDeviceListChangedNotification:
didChangeTelephonyCallingSupport
didChangeFaceTimeAudioCallingSupport
didChangeFaceTimeVideoCallingSupport
didChangeFaceTimeCallingAvailability
didChangeRelayCallingCapabilities
didChangeRelayCallingAvailability
didChangeOutgoingRelayCallerID
didChangeCloudCallingDevices
didAddCapabilitiesForSenderIdentityWithUUID:
didRemoveCapabilitiesForSenderIdentityWithUUID:
didChangeVoLTECallingCapabilitiesForSenderIdentityWithUUID:
didChangeWiFiCallingCapabilitiesForSenderIdentityWithUUID:
didChangeThumperCallingCapabilitiesForSenderIdentityWithUUID:
didChangeWiFiCallingProvisionalURLForSenderIdentityWithUUID:
didChangeThumperCallingProvisionalURLForSenderIdentityWithUUID:
didChangeEmergencyCallbackMode
didChangeEmergencyCallbackPossible
didChangeRelayCallingFeatures
updateState
domainAccessor
thumperCallingAllowedOnDefaultPairedDeviceDefault
setThumperCallingAllowedOnDefaultPairedDeviceDefault:
_thumperIsNoLongerSupportedForAccountID:
_thumperIsNowEnabledForAccountID:
_thumperIsNoLongerEnabledForAccountID:
_updateThumperCallingPreferences
_updateDefaultPairedDeviceUniqueIDDefault
_checkIfDevicesShouldBeUnenrolled
showReminderNotificationOnSecondaryDevice
removeReminderNotificationOnSecondaryDevice
showEmergencyAddressDisclaimerOnSecondaryDevice
removeEmergencyAddressDisclaimerOnSecondaryDevice
saveThumperCapabilitiesStates:forPreferenceKey:
thumperCapabilitiesStatesForPreferenceKey:
enrollDefaultPairedDevice
enrollDefaultPairedDeviceForAccountID:
unenrollDefaultPairedDeviceForAccountID:
shouldEnrollDefaultPairedDeviceForAccountID:
shouldUnenrollDefaultPairedDeviceForAccountID:
setDomainAccessor:
_dataSource
_domainAccessor
T@"NPSDomainAccessor",&,N,V_domainAccessor
T@"<CSDThumperCapabilitiesMonitorDataSource>",W,N,V_dataSource
isInvitation
isUpgrade
upgradeSessionUUID
participantAssociation
setInvitation:
representsTransitionFromPending
setRepresentsTransitionFromPending:
setUpgrade:
isInitiator
setInitiator:
setMirageAvailable:
setGftDowngradeToOneToOneAvailable:
setUPlusNDowngradeAvailable:
setLightweight:
setUpgradeSessionUUID:
setParticipantAssociation:
collaborationIdentifier
setCollaborationIdentifier:
_invitation
_shouldSuppressInCallUI
_videoPaused
_representsTransitionFromPending
_upgrade
_momentsAvailable
_mirageAvailable
_gftDowngradeToOneToOneAvailable
_uPlusNDowngradeAvailable
_lightweight
_oneToOneModeEnabled
_upgradeSessionUUID
_participantAssociation
_collaborationIdentifier
invitation
TB,N,GisInvitation,V_invitation
TB,N,V_shouldSuppressInCallUI
TB,N,GisVideoPaused,V_videoPaused
TB,N,V_representsTransitionFromPending
upgrade
TB,N,GisUpgrade,V_upgrade
TB,N,GisInitiator,V_initiator
TB,N,GisMomentsAvailable,V_momentsAvailable
mirageAvailable
TB,N,GisMirageAvailable,V_mirageAvailable
gftDowngradeToOneToOneAvailable
TB,N,GisGFTDowngradeToOneToOneAvailable,V_gftDowngradeToOneToOneAvailable
uPlusNDowngradeAvailable
TB,N,GisUPlusNDowngradeAvailable,V_uPlusNDowngradeAvailable
lightweight
TB,N,GisLightweight,V_lightweight
T@"NSUUID",C,N,V_messagesGroupUUID
T@"NSUUID",C,N,V_upgradeSessionUUID
TB,N,GisOneToOneModeEnabled,V_oneToOneModeEnabled
T@"NSSet",&,N,V_invitationPreferences
TQ,N,V_sharePlayProtocolVersion
T@"TUConversationParticipantAssociation",C,N,V_participantAssociation
T@"NSString",C,N,V_collaborationIdentifier
devicesChanged:
callerIDChanged:
serviceAvailabilityChanged:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:messageContext:
service:account:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
service:account:incomingTopLevelMessage:fromID:messageContext:
service:token:time:error:
service:didFlushCacheForRemoteURI:fromURI:guid:
service:didHintCheckingTransportLogWithReason:
service:didUpdatePseudonymsWithChanges:
faceTimeIDMatchesAppleID
isFaceTimeAudioAvailable
isFaceTimeVideoAvailable
outgoingCallerID
_faceTimeAudioAvailability
_faceTimeVideoAvailability
updateOutgoingCallerIDAndSendDelegateCallbacksIfNecessary
_updateOutgoingCallerID
isValidOutgoingCallerID:
setOutgoingCallerID:
_outgoingCallerID
T@"NSString",C,N,V_outgoingCallerID
T@"<CSDAccountsControllerDelegate>",W,N,V_delegate
faceTimeAudioAvailable
TB,R,N,GisFaceTimeAudioAvailable
faceTimeVideoAvailable
TB,R,N,GisFaceTimeVideoAvailable
setStreamPreferences:
sendData:toDestinations:
sendInvitationWithData:declineOnError:
acceptInvitationWithData:
cancelInvitationWithData:
cancelInvitationWithRemoteEndedReasonOverride:
declineInvitationWithData:
reconnectSession
shouldUseSocketForTransport
socket
invitationTimeout
setInvitationTimeout:
T@"<CSDIDSDualSessionProviderDelegate>",W,N
initWithSession:queue:
T@"IDSSession",R,N,V_session
T@"<CSDIDSDualSessionProviderDelegate>",W,N,V_delegate
initWithDigits:isHardPause:
digits
setDigits:
isHardPause
setHardPause:
_hardPause
_digits
T@"NSString",C,N,V_digits
hardPause
TB,N,GisHardPause,V_hardPause
conversationProviderForIdentifier:completionHandler:
conversationProviders:
registerForCallbacksForProvider:completionHandler:
registerConversationProvider:completionHandler:
generatePseudonymHandleForConversationProvider:expiryDuration:URI:completionHandler:
renewPseudonymHandle:forConversationProvider:expirationDate:completionHandler:
revokePseudonymHandle:forConversationProvider:completionHandler:
doesHandle:correspondToConversationProvider:completionHandler:
initWithConversationProviderManager:
providerManager
_providerManager
T@"CSDConversationProviderManager",R,N,V_providerManager
csdConversationLinkGeneratorDescriptor
generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:
T@"CSDConversationLinkGeneratorDescriptor",R,N
csd_ISOCountryCode
tuLabeledHandle
handleWithTULabeledHandle:
T@"TULabeledHandle",R,N
updateProvidersByIdentifier:localProvidersByIdentifier:pairedHostDeviceProvidersByIdentifier:
providersByIdentifier:
donateUserIntentForProviderWithIdentifier:
launchAppForDialRequest:reply:
initWithProviderManager:
providersByIdentifierForClient:
localProvidersByIdentifierForClient:
pairedHostDeviceProvidersByIdentifierForClient:
T@"CSDCallProviderManager",R,N,V_providerManager
tuConversationMember
memberWithTUConversationMember:
T@"TUConversationMember",R,N
chatEnded:
chatStartedConnecting:
chatSentInvitation:
isMomentsAvailableForChat:
chatConnected:
chat:inputFrequencyLevelChangedTo:
chat:outputFrequencyLevelChangedTo:
chat:inputLevelChangedTo:
chat:outputLevelChangedTo:
chat:changedBytesOfDataUsed:
chat:receivedData:
faceTimeAppUUID
session:endedWithReason:
session:invitationSentToPushTokens:shouldBreakBeforeMake:
session:receivedInvitationAcceptWithData:
session:receivedInvitationDeclineWithData:
session:receivedInvitationCancelWithData:
session:receivedData:
startWithVideoAspectRatioDescriptor:inviteCompletion:
answerWithVideoAspectRatioDescriptor:
cancelInvitationWithAnsweredElsewhere
cancelInvitationWithDeclinedElsewhere
cancelInvitationWithLocalHangup
sendDataUnreliably:
sessionUUID
hasSentInvitation
crossDeviceIdentifier
remoteFromID
isConnected
T@"<CSDIDSChatDelegate>",W,N
T@"NSString",R,N
outgoing
TB,R,N,GisOutgoing
T@"CXCallFailureContext",R,N
connected
TB,R,N,GisConnected
TB,N,GisRelaying
TB,N,GisRemoteMomentsAvailable
T@"NSUUID",R,C,N
initWithSession:remoteHandle:wantsVideo:
initIncomingWithSession:remoteHandle:wantsVideo:remoteInviteDictionary:
initOutgoingWithSession:UUID:remoteHandle:wantsVideo:isRelaying:
_setDateEndedIfNecessary
_setLocalAspectRatiosForVideoAspectRatioDescriptor:
cancelOrDeclineInvitation
prepareConference
_handlePushTokensInvited:didSendInvitation:didCancelInvitation:
conference
setConference:
shouldStartAudioPaused
setShouldStartAudioPaused:
shouldStartVideoPaused
setShouldStartVideoPaused:
setMayRequireBreakBeforeMake:
setHasSentInvitation:
dateReceivedFirstRemoteFrame
setDateReceivedFirstRemoteFrame:
invitedPushTokens
setInvitedPushTokens:
inviteCompletion
setInviteCompletion:
conferenceCreationBlock
setConferenceCreationBlock:
_remoteUplinkMuted
_remoteMomentsAvailable
_muted
_shouldStartAudioPaused
_shouldStartVideoPaused
_mayRequireBreakBeforeMake
_hasSentInvitation
_localSenderIdentityUUID
_conference
_dateReceivedFirstRemoteFrame
_invitedPushTokens
_inviteCompletion
_conferenceCreationBlock
T@"<CSDAVConference>",&,N,V_conference
T@"CSDExternalIDSDualSession",R,N,V_session
TB,N,V_shouldStartAudioPaused
TB,N,V_shouldStartVideoPaused
TB,N,V_mayRequireBreakBeforeMake
TB,N,V_hasSentInvitation
T@"NSDate",&,N,V_dateReceivedFirstRemoteFrame
T@"NSDictionary",R,C,N,V_remoteInviteDictionary
T@"NSArray",C,N,V_invitedPushTokens
T@?,C,N,V_inviteCompletion
T@?,C,N,V_conferenceCreationBlock
T@"<CSDIDSChatDelegate>",W,N,V_delegate
T@"TUHandle",R,N,V_handle
TB,R,N,GisOutgoing,V_outgoing
TB,N,GisMuted,V_muted
TB,N,GisRemoteUplinkMuted,V_remoteUplinkMuted
TB,N,GisRemoteMomentsAvailable,V_remoteMomentsAvailable
T@"NSUUID",C,N,V_localSenderIdentityUUID
hasContextIdentifier
hasActionDescription
hasOngoingDescription
hasCompletedDescription
contextIdentifier
setContextIdentifier:
actionDescription
setActionDescription:
ongoingDescription
setOngoingDescription:
completedDescription
setCompletedDescription:
_actionDescription
_completedDescription
_contextIdentifier
_ongoingDescription
T@"NSString",&,N,V_contextIdentifier
T@"NSString",&,N,V_actionDescription
T@"NSString",&,N,V_ongoingDescription
T@"NSString",&,N,V_completedDescription
callDirectoryNSExtensionManager:extensionsChanged:
beginDailyMaintenanceWithActivity:
deviceLockObserver
manager
setManager:
nsExtensionManager
countOfNotificationsReceived
setCountOfNotificationsReceived:
_deviceLockObserver
_manager
_nsExtensionManager
_countOfNotificationsReceived
T@"<CSDDeviceLockStateObserver>",R,N,V_deviceLockObserver
T@"CXCallDirectoryManager",&,N,V_manager
T@"CXCallDirectoryNSExtensionManager",R,N,V_nsExtensionManager
TQ,N,V_countOfNotificationsReceived
initWithTinCanIDSChat:
isCSCallingAvailable
isVoLTECallingAvailable
isWiFiCallingAvailable
isWiFiEmergencyCallingAllowed
isWiFiEmergencyCallingAvailable
callCapabilitiesForCTCallCapabilities:
callCapabilitiesForCallManagementStateInfo:
setCsCallingAvailable:
setVoLTECallingAvailable:
setWiFiCallingAvailable:
setWiFiEmergencyCallingAllowed:
setWiFiEmergencyCallingAvailable:
_csCallingAvailable
_voLTECallingAvailable
_wiFiCallingAvailable
_wiFiEmergencyCallingAllowed
_wiFiEmergencyCallingAvailable
csCallingAvailable
TB,N,GisCSCallingAvailable,V_csCallingAvailable
voLTECallingAvailable
TB,N,GisVoLTECallingAvailable,V_voLTECallingAvailable
wiFiCallingAvailable
TB,N,GisWiFiCallingAvailable,V_wiFiCallingAvailable
wiFiEmergencyCallingAllowed
TB,N,GisWiFiEmergencyCallingAllowed,V_wiFiEmergencyCallingAllowed
wiFiEmergencyCallingAvailable
TB,N,GisWiFiEmergencyCallingAvailable,V_wiFiEmergencyCallingAvailable
captionsToken
protoCallType
otherUniqueProxyIdentifiersType
providersType
remoteParticipantHandlesType
routesType
endpointIDSDestinationURIsType
hasUniqueProxyIdentifier
hasDestinationID
hasSourceIdentifier
hasProtoCallModelState
setProtoService:
setHasProtoService:
hasProtoService
setProtoWantsHoldMusic:
setHasProtoWantsHoldMusic:
hasProtoWantsHoldMusic
setProtoCannotBeAnswered:
setHasProtoCannotBeAnswered:
hasProtoCannotBeAnswered
hasProtoDTMFKey
setProtoDisconnectedReason:
setHasProtoDisconnectedReason:
hasProtoDisconnectedReason
hasOBSOLETEConferenceIdentifier
setProtoVoicemail:
setHasProtoVoicemail:
hasProtoVoicemail
hasCallerNameFromNetwork
clearProtoCalls
addProtoCall:
protoCallsCount
protoCallAtIndex:
hasHardPauseDigits
setHardPauseState:
setHasHardPauseState:
hasHardPauseState
receivedMessageType
setReceivedMessageType:
setHasReceivedMessageType:
hasReceivedMessageType
receivedMessageTypeAsString:
StringAsReceivedMessageType:
setProtoProtocolVersion:
setHasProtoProtocolVersion:
hasProtoProtocolVersion
setProtoShouldSuppressRingtone:
setHasProtoShouldSuppressRingtone:
hasProtoShouldSuppressRingtone
hasDummyPayload
setHostCallCreationTime:
setHasHostCallCreationTime:
hasHostCallCreationTime
setMessageSendTime:
setHasMessageSendTime:
hasMessageSendTime
setProtoNeedsManualInCallSounds:
setHasProtoNeedsManualInCallSounds:
hasProtoNeedsManualInCallSounds
setProtoCannotRelayAudioOrVideoOnPairedDevice:
setHasProtoCannotRelayAudioOrVideoOnPairedDevice:
hasProtoCannotRelayAudioOrVideoOnPairedDevice
setProtoExpectedEndpointOnMessagingDevice:
setHasProtoExpectedEndpointOnMessagingDevice:
hasProtoExpectedEndpointOnMessagingDevice
hasContactIdentifier
hasProtoCallCapabilitiesState
setProtoSoundRegion:
setHasProtoSoundRegion:
hasProtoSoundRegion
setProtoEmergency:
setHasProtoEmergency:
hasProtoEmergency
clearOtherUniqueProxyIdentifiers
addOtherUniqueProxyIdentifiers:
otherUniqueProxyIdentifiersCount
otherUniqueProxyIdentifiersAtIndex:
hasProtoCallModel
setProtoSOS:
setHasProtoSOS:
hasProtoSOS
clearProviders
addProviders:
providersCount
providersAtIndex:
hasProtoDisplayContext
hasInviteData
hasProtoProvider
setProtoVideo:
setHasProtoVideo:
hasProtoVideo
setProtoUplinkMuted:
setHasProtoUplinkMuted:
hasProtoUplinkMuted
setProtoRemoteUplinkMuted:
setHasProtoRemoteUplinkMuted:
hasProtoRemoteUplinkMuted
setSystemVolume:
setHasSystemVolume:
hasSystemVolume
hasLocalSenderIdentityUUIDString
clearRemoteParticipantHandles
addRemoteParticipantHandles:
remoteParticipantHandlesCount
remoteParticipantHandlesAtIndex:
hasLocalSenderIdentityAccountUUIDString
setProtoTTYType:
setHasProtoTTYType:
hasProtoTTYType
setProtoSupportsTTYWithVoice:
setHasProtoSupportsTTYWithVoice:
hasProtoSupportsTTYWithVoice
requestActionType
setRequestActionType:
setHasRequestActionType:
hasRequestActionType
requestActionTypeAsString:
StringAsRequestActionType:
clearRoutes
addRoutes:
routesCount
routesAtIndex:
hasRoute
clearEndpointIDSDestinationURIs
addEndpointIDSDestinationURIs:
endpointIDSDestinationURIsCount
endpointIDSDestinationURIsAtIndex:
setProtoPriority:
setHasProtoPriority:
hasProtoPriority
setProtoOriginatingUIType:
setHasProtoOriginatingUIType:
hasProtoOriginatingUIType
setProtoFailureExpected:
setHasProtoFailureExpected:
hasProtoFailureExpected
setProtoSupportsEmergencyFallback:
setHasProtoSupportsEmergencyFallback:
hasProtoSupportsEmergencyFallback
uniqueProxyIdentifier
setUniqueProxyIdentifier:
destinationID
setDestinationID:
sourceIdentifier
setSourceIdentifier:
protoCallModelState
setProtoCallModelState:
protoService
protoWantsHoldMusic
protoCannotBeAnswered
protoDTMFKey
setProtoDTMFKey:
protoDisconnectedReason
oBSOLETEConferenceIdentifier
setOBSOLETEConferenceIdentifier:
protoVoicemail
setCallerNameFromNetwork:
protoCalls
setProtoCalls:
setHardPauseDigits:
hardPauseState
protoProtocolVersion
protoShouldSuppressRingtone
dummyPayload
setDummyPayload:
hostCallCreationTime
messageSendTime
protoNeedsManualInCallSounds
protoCannotRelayAudioOrVideoOnPairedDevice
protoExpectedEndpointOnMessagingDevice
contactIdentifier
setContactIdentifier:
protoCallCapabilitiesState
setProtoCallCapabilitiesState:
protoSoundRegion
protoEmergency
otherUniqueProxyIdentifiers
setOtherUniqueProxyIdentifiers:
protoCallModel
setProtoCallModel:
protoSOS
providers
setProviders:
protoDisplayContext
setProtoDisplayContext:
inviteData
setInviteData:
protoProvider
setProtoProvider:
protoVideo
protoUplinkMuted
protoRemoteUplinkMuted
systemVolume
localSenderIdentityUUIDString
setLocalSenderIdentityUUIDString:
setRemoteParticipantHandles:
localSenderIdentityAccountUUIDString
setLocalSenderIdentityAccountUUIDString:
protoTTYType
protoSupportsTTYWithVoice
routes
setRoutes:
route
setRoute:
endpointIDSDestinationURIs
setEndpointIDSDestinationURIs:
protoPriority
protoOriginatingUIType
protoFailureExpected
protoSupportsEmergencyFallback
_hostCallCreationTime
_messageSendTime
_callerNameFromNetwork
_contactIdentifier
_destinationID
_dummyPayload
_endpointIDSDestinationURIs
_hardPauseDigits
_hardPauseState
_inviteData
_localSenderIdentityAccountUUIDString
_localSenderIdentityUUIDString
_oBSOLETEConferenceIdentifier
_otherUniqueProxyIdentifiers
_protoCallCapabilitiesState
_protoCallModel
_protoCallModelState
_protoCalls
_protoDTMFKey
_protoDisconnectedReason
_protoDisplayContext
_protoOriginatingUIType
_protoPriority
_protoProtocolVersion
_protoProvider
_protoService
_protoSoundRegion
_protoTTYType
_providers
_receivedMessageType
_remoteParticipantHandles
_requestActionType
_route
_routes
_sourceIdentifier
_systemVolume
_uniqueProxyIdentifier
_protoCannotBeAnswered
_protoCannotRelayAudioOrVideoOnPairedDevice
_protoEmergency
_protoExpectedEndpointOnMessagingDevice
_protoFailureExpected
_protoNeedsManualInCallSounds
_protoRemoteUplinkMuted
_protoSOS
_protoShouldSuppressRingtone
_protoSupportsEmergencyFallback
_protoSupportsTTYWithVoice
_protoUplinkMuted
_protoVideo
_protoVoicemail
_protoWantsHoldMusic
T@"NSString",&,N,V_uniqueProxyIdentifier
T@"NSString",&,N,V_destinationID
T@"NSString",&,N,V_sourceIdentifier
T@"CSDMessagingCallModelState",&,N,V_protoCallModelState
TI,N,V_protoService
TB,N,V_protoWantsHoldMusic
TB,N,V_protoCannotBeAnswered
T@"NSData",&,N,V_protoDTMFKey
TI,N,V_protoDisconnectedReason
T@"NSString",&,N,V_oBSOLETEConferenceIdentifier
TB,N,V_protoVoicemail
T@"NSString",&,N,V_callerNameFromNetwork
T@"NSMutableArray",&,N,V_protoCalls
T@"NSString",&,N,V_hardPauseDigits
TI,N,V_hardPauseState
Ti,N,V_receivedMessageType
TI,N,V_protoProtocolVersion
TB,N,V_protoShouldSuppressRingtone
T@"NSData",&,N,V_dummyPayload
Td,N,V_hostCallCreationTime
Td,N,V_messageSendTime
TB,N,V_protoNeedsManualInCallSounds
TB,N,V_protoCannotRelayAudioOrVideoOnPairedDevice
TB,N,V_protoExpectedEndpointOnMessagingDevice
T@"NSString",&,N,V_contactIdentifier
T@"CSDMessagingCallCapabilitiesState",&,N,V_protoCallCapabilitiesState
TI,N,V_protoSoundRegion
TB,N,V_protoEmergency
T@"NSMutableArray",&,N,V_otherUniqueProxyIdentifiers
T@"CSDMessagingCallModel",&,N,V_protoCallModel
TB,N,V_protoSOS
T@"NSMutableArray",&,N,V_providers
T@"CSDMessagingCallDisplayContext",&,N,V_protoDisplayContext
T@"CSDMessagingAVConferenceInviteData",&,N,V_inviteData
T@"CSDMessagingCallProvider",&,N,V_protoProvider
TB,N,V_protoVideo
TB,N,V_protoUplinkMuted
TB,N,V_protoRemoteUplinkMuted
Tf,N,V_systemVolume
T@"NSString",&,N,V_localSenderIdentityUUIDString
T@"NSMutableArray",&,N,V_remoteParticipantHandles
T@"NSString",&,N,V_localSenderIdentityAccountUUIDString
TI,N,V_protoTTYType
TB,N,V_protoSupportsTTYWithVoice
Ti,N,V_requestActionType
T@"NSMutableArray",&,N,V_routes
T@"CSDMessagingRoute",&,N,V_route
T@"NSMutableArray",&,N,V_endpointIDSDestinationURIs
TI,N,V_protoPriority
TI,N,V_protoOriginatingUIType
TB,N,V_protoFailureExpected
TB,N,V_protoSupportsEmergencyFallback
setFilterBlock:
isDestinationIDAllowedThroughDoNotDisturb:providerIdentifier:
_callFilterIdentifier
networkCountryCode
behaviorResolutionService
callProviderManager
_behaviorResolutionService
_callProviderManager
T@"DNDEventBehaviorResolutionService",R,N,V_behaviorResolutionService
T@"TUCallProviderManager",R,N,V_callProviderManager
handoffIdentifierType
emergencyLabeledHandlesType
prioritizedSenderIdentitiesType
emergencyHandlesType
hasLocalizedName
hasBundleURLString
setMaximumCallGroups:
setHasMaximumCallGroups:
hasMaximumCallGroups
setMaximumCallsPerCallGroup:
setHasMaximumCallsPerCallGroup:
hasMaximumCallsPerCallGroup
setSupportsAudioOnly:
setHasSupportsAudioOnly:
hasSupportsAudioOnly
setSupportsAudioAndVideo:
setHasSupportsAudioAndVideo:
hasSupportsAudioAndVideo
setSupportsEmergency:
setHasSupportsEmergency:
hasSupportsEmergency
setSupportsVoicemail:
setHasSupportsVoicemail:
hasSupportsVoicemail
hasRingtoneSoundURLString
hasOriginalRingtoneSoundURLString
clearHandoffIdentifiers
addHandoffIdentifier:
handoffIdentifiersCount
handoffIdentifierAtIndex:
protoSupportedHandleTypesCount
protoSupportedHandleTypes
clearProtoSupportedHandleTypes
addProtoSupportedHandleType:
protoSupportedHandleTypeAtIndex:
setProtoSupportedHandleTypes:count:
clearEmergencyLabeledHandles
addEmergencyLabeledHandles:
emergencyLabeledHandlesCount
emergencyLabeledHandlesAtIndex:
setSupportsRecents:
setHasSupportsRecents:
hasSupportsRecents
clearPrioritizedSenderIdentities
addPrioritizedSenderIdentities:
prioritizedSenderIdentitiesCount
prioritizedSenderIdentitiesAtIndex:
clearEmergencyHandles
addEmergencyHandles:
emergencyHandlesCount
emergencyHandlesAtIndex:
localizedName
setLocalizedName:
bundleURLString
setBundleURLString:
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
setRingtoneSoundURLString:
originalRingtoneSoundURLString
setOriginalRingtoneSoundURLString:
handoffIdentifiers
setHandoffIdentifiers:
emergencyLabeledHandles
setEmergencyLabeledHandles:
supportsRecents
prioritizedSenderIdentities
setPrioritizedSenderIdentities:
emergencyHandles
setEmergencyHandles:
_protoSupportedHandleTypes
_bundleURLString
_emergencyHandles
_emergencyLabeledHandles
_handoffIdentifiers
_localizedName
_maximumCallGroups
_maximumCallsPerCallGroup
_originalRingtoneSoundURLString
_prioritizedSenderIdentities
_ringtoneSoundURLString
_supportsAudioAndVideo
_supportsAudioOnly
_supportsEmergency
_supportsRecents
_supportsVoicemail
T@"NSString",&,N,V_identifier
T@"NSString",&,N,V_localizedName
T@"NSString",&,N,V_bundleURLString
TI,N,V_maximumCallGroups
TI,N,V_maximumCallsPerCallGroup
TB,N,V_supportsAudioOnly
TB,N,V_supportsAudioAndVideo
TB,N,V_supportsEmergency
TB,N,V_supportsVoicemail
T@"NSString",&,N,V_ringtoneSoundURLString
T@"NSString",&,N,V_originalRingtoneSoundURLString
T@"NSMutableArray",&,N,V_handoffIdentifiers
T^I,R,N
T@"NSMutableArray",&,N,V_emergencyLabeledHandles
TB,N,V_supportsRecents
T@"NSMutableArray",&,N,V_prioritizedSenderIdentities
T@"NSMutableArray",&,N,V_emergencyHandles
_handleConferenceConnectionWillClose:
_handleConferenceConnectionDidClose:
_handleConferenceConnectionDidReceiveData:
messenger:handledMessage:fromDestination:device:
messengerConnectionEnded:forIdentifiers:didStartConnecting:
messengerConnectionFailed:forIdentifiers:didStartConnecting:
messengerConnectionCouldNotEstablishLink:forIdentifiers:didStartConnecting:
shouldDeclineSecondSessionInviteWithMessage:
shouldDeclineSessionInviteWithMessageWhenRelayIsDisabled:
shouldIgnoreSessionInviteWithMessage:fromDestination:
timeoutForInvitationWithMessage:
identifiersForSessionInvitationWithMessage:
initWithQueue:callContainer:sessionMessenger:
_relayInvitationTimeoutForTimeout:
_updateDialingIDSDevice
_shouldSendToPairedIDSDevice
_callsWithUniqueProxyIdentifiers:
_handleRetrievedLocalInviteDictionary:forMessage:
sendIncomingCallMessageToClientForCall:cannotBeAnswered:cannotRelayAudioOrVideoOnPairedDevice:
sendCallDialedMessageToClientForCall:
sendCallAnsweredElsewhereMessageToClientForCall:
sendCallDisconnectedMessageToClientForCall:
sendCallConnectedMessageToClientForCall:
sendResetWantsHoldMusicMessageToClientForCall:
sendUpdateCallDisplayContextMessageToClientForCall:
sendUpdateFailureExpectedMessageToClientForCall:
sendUpdateSupportsEmergencyFallbackToClientForCall:
sendUpdateRemoteUplinkMutedCallMessageToClientForCall:
sendUpdateSupportsTTYWithVoiceCallMessageToClientForCall:
sendUpdateCallModelMessageToClientForCall:
sendDeviceUnavailableMessageToClientForUniqueProxyIdentifier:
sendPullRelayingCallsMessageToClient
sendResetStateMessageToClient
sendHardPauseAvailabilityMessageToClientForState:digits:
sendUpdateRemoteCallStateMessageToClient
sendCallStartedConnectingMessageToClientForCall:
sendDialCallFailedForUniqueProxyIdentifier:
sendDialCallFailedForScreenTimeForUniqueProxyIdentifier:
sendDialCallFailedForUniqueProxyIdentifier:withDisconnectedReason:
sendPushCallsMessageToClientDestination:
sendUpdateCallContextMessageToClientForCallProviderManager:
sendNeedsManualInCallSoundsChangeMessageToClientForCall:
sendInvitationSentMessageToClientForCall:
sendUpdateRoutesMessageToClientForRoutes:
sendDialCallMessageToHostForCall:completionHandler:
sendAnswerCallMessageToHostForCall:
sendDisconnectCallMessageToHostForCall:
sendHoldCallMessageToHostForCall:
sendUnholdCallMessageToHostForCall:
sendGroupCallMessageToHostForCall:otherCall:
sendUngroupCallMessageToHostForCall:
sendSwapCallsMessageToHost
sendEndActiveAndAnswerCallMessageToHostForCall:
sendEndHeldAndAnswerCallMessageToHostForCall:
sendHoldActiveAndAnswerCallMessageToHostForCall:
sendDisconnectCurrentCallAndActivateHeldMessageToHostForDisconnectedCall:
sendDisconnectAllCallsMessageToHostForDisconnectedCall:
sendSendHardPauseDigitsMessageToHostForCall:
sendRequestCallStateMessageToHost
sendPullCallsMessageToHost
sendPushRelayingCallsMessageToHostForSourceIdentifier:
sendUpdateRemoteUplinkMutedCallMessageToHostForCall:
sendPickRouteMessageToHostForRoute:
sendPlayDTMFToneForKeyMessageForCall:DTMFKey:
sendSetTTYTypeCallMessageForCall:ttyType:
sendSetUplinkMutedCallMessageForCall:uplinkMuted:
sendSuppressRingtoneMessageForCall:
sendUpdateSystemVolumeForCall:volume:
requestAnswerForRequest:forCall:
_shouldDeclineSessionInviteWithMessage:
shouldProcessRelayMessageOfType:
shouldScreenTimeRestrictMessage:
bundleIdentifierForProvider:
performBlockOnTransportAvailability:forIdentifier:
prepareToDisconnectMessagingConnectionForCall:
disconnectMessagingConnectionForCall:
clientMessagingDelegate
setClientMessagingDelegate:
hostMessagingDelegate
setHostMessagingDelegate:
commonMessagingDelegate
setCommonMessagingDelegate:
sessionMessenger
pairedDeviceMessenger
dialingIDSDevice
setDialingIDSDevice:
_clientMessagingDelegate
_hostMessagingDelegate
_commonMessagingDelegate
_sessionMessenger
_pairedDeviceMessenger
_dialingIDSDevice
T@"CSDRelayIDSSessionMessenger",R,N,V_sessionMessenger
T@"CSDRelayPairedDeviceMessenger",R,N,V_pairedDeviceMessenger
T@"IDSDevice",&,N,V_dialingIDSDevice
T@"<CSDCallContainer>",R,N,V_callCenter
T@"<CSDRelayMessagingControllerDelegate>",W,N,V_delegate
T@"<CSDRelayMessagingControllerClientMessagingDelegate>",W,N,V_clientMessagingDelegate
T@"<CSDRelayMessagingControllerHostMessagingDelegate>",W,N,V_hostMessagingDelegate
T@"<CSDRelayMessagingControllerCommonMessagingDelegate>",W,N,V_commonMessagingDelegate
initWithRelayInviteDictionary:
initWithFaceTimeInviteDictionary:
relayInviteDictionary
faceTimeInviteDictionary
propertiesDidChangeForConfiguration:
_observeSignal:usingHandler:
_setUpLanguageChangeListener
_setUpTemporaryDirectory
_setUpSandbox
setFeatureFlags:
conversationProviderManagerXPCServer
conversationProviderManager
callStateMonitor
setCallStateMonitor:
setRelayMessagingController:
relayClientController
setRelayClientController:
relayHostController
setRelayHostController:
relayCommonController
setRelayCommonController:
callDirectoryManager
setCallDirectoryManager:
voipApplicationController
setVoipApplicationController:
momentsController
setMomentsController:
userConfiguration
setUserConfiguration:
userNotificationController
setUserNotificationController:
setVoiceOverObserver:
signalHandlerDispatchSources
setSignalHandlerDispatchSources:
deviceLockStateObserver
setDeviceLockStateObserver:
orientationMonitor
setOrientationMonitor:
proximityController
setProximityController:
setProximitySensorObserver:
raiseToAnswerController
setRaiseToAnswerController:
powerAssertionManager
setPowerAssertionManager:
audioController
setAudioController:
handoffAudioController
setHandoffAudioController:
statusBarManager
setStatusBarManager:
applicationPolicyManager
setApplicationPolicyManager:
_conversationProviderManagerXPCServer
_conversationProviderManager
_callStateMonitor
_relayMessagingController
_relayClientController
_relayHostController
_relayCommonController
_callDirectoryManager
_voipApplicationController
_momentsController
_userConfiguration
_userNotificationController
_signalHandlerDispatchSources
_deviceLockStateObserver
_orientationMonitor
_proximityController
_raiseToAnswerController
_powerAssertionManager
_audioController
_handoffAudioController
_statusBarManager
_applicationPolicyManager
T@"<TUFeatureFlags>",&,N,V_featureFlags
T@"CSDConversationProviderManagerXPCServer",R,N,V_conversationProviderManagerXPCServer
T@"CSDConversationProviderManager",R,N,V_conversationProviderManager
T@"CSDCallStateMonitor",&,N,V_callStateMonitor
T@"CSDRelayMessagingController",&,N,V_relayMessagingController
T@"CSDRelayClientController",&,N,V_relayClientController
T@"CSDRelayHostController",&,N,V_relayHostController
T@"CSDRelayCommonController",&,N,V_relayCommonController
T@"CSDCallDirectoryManager",&,N,V_callDirectoryManager
T@"CSDVoIPApplicationController",&,N,V_voipApplicationController
T@"CSDMomentsController",&,N,V_momentsController
T@"TUUserConfiguration",&,N,V_userConfiguration
T@"CSDUserNotificationController",&,N,V_userNotificationController
T@"CSDVoiceOverObserver",&,N,V_voiceOverObserver
T@"NSMutableArray",&,N,V_signalHandlerDispatchSources
T@"CSDDeviceLockStateObserver",&,N,V_deviceLockStateObserver
T@"CSDOrientationMonitor",&,N,V_orientationMonitor
T@"CSDProximityController",&,N,V_proximityController
T@"CSDProximitySensorObserver",&,N,V_proximitySensorObserver
T@"CSDRaiseToAnswerController",&,N,V_raiseToAnswerController
T@"CSDPowerAssertionManager",&,N,V_powerAssertionManager
T@"CSDAudioController",&,N,V_audioController
T@"CSDHandoffAudioController",&,N,V_handoffAudioController
T@"CSDStatusBarManager",&,N,V_statusBarManager
T@"CPApplicationPolicyManager",&,N,V_applicationPolicyManager
handleByFullyQualifyingHandle:usingCountryCode:
isWiFiAllowedForChat:
isCellularDataAllowedForChat:
isCellularDataPreferredForChat:
localPortraitAspectRatioForChat:
initWithCapabilities:queue:
chats
updateCacheWithChat:
shouldAcceptIncomingInvite
callUpdateForPendingChat:
waitingChatWithHandle:isOutgoing:
TUCallRemoteVideoPresentationStateFromCXVideoPresentationState:
callUpdateForChat:
mutableChats
shouldOverrideNetworkAsAvailable
incomingSessionProviderGenerator
setIncomingSessionProviderGenerator:
incomingChatGenerator
setIncomingChatGenerator:
_shouldOverrideNetworkAsAvailable
_mutableChats
_incomingSessionProviderGenerator
_incomingChatGenerator
T@"<CSDIDSProviderDelegateCapabilities>",R,N,V_capabilities
T@"NSMutableOrderedSet",R,N,V_mutableChats
TB,R,N,V_shouldOverrideNetworkAsAvailable
T@?,C,N,V_incomingSessionProviderGenerator
T@?,C,N,V_incomingChatGenerator
hasSKEBlob
hasMediaBlob
hasCallInfoBlob
sKEBlob
setSKEBlob:
mediaBlob
setMediaBlob:
callInfoBlob
setCallInfoBlob:
_callInfoBlob
_mediaBlob
_sKEBlob
T@"NSData",&,N,V_sKEBlob
T@"NSData",&,N,V_mediaBlob
T@"NSData",&,N,V_callInfoBlob
initWithSessionProvider:
propertiesDescription
sessionProvider:invitationSentToPushTokens:shouldBreakBeforeMake:
initAsInitiatorWithSessionProvider:
initAsReceiverWithSessionProvider:remoteProtocolVersion:
underlyingErrorCode
remoteProtocolVersion
setReceiverProtocolVersion:
sendInvitation
_sendInvitationWithData:declineOnError:alwaysSendData:
acceptInvitation
_acceptInvitationWithData:alwaysSendData:
cancelInvitation
_cancelInvitationWithData:reason:alwaysSendData:
declineInvitation
_declineInvitationWithData:alwaysSendData:
setHasStartedConnecting:
setHasConnected:
remoteProtocolVersionNumber
setRemoteProtocolVersionNumber:
sessionProvider
_hasStartedConnecting
_hasConnected
_remoteProtocolVersionNumber
_sessionProvider
T@"NSNumber",&,N,V_remoteProtocolVersionNumber
Ti,N,V_endedReason
TB,N,V_hasStartedConnecting
TB,N,V_hasConnected
T@"<CSDIDSDualSessionProvider>",R,N,V_sessionProvider
T@"<CSDIDSDualSessionDelegate>",W,N,V_delegate
TB,R,N,GisInitiator,V_initiator
T@"CSDIDSTransport",R,N
sendMessage:completionHandler:
T@"<CSDRelayIDSMessengerDelegate>",W,N,V_delegate
accountID
primaryDeviceID
phoneNumberURI
availableDeviceSlots
allowedSecondaryDeviceIDs
phoneNumberMCCToISOCountryCodeTransformBlock
setPhoneNumberMCCToISOCountryCodeTransformBlock:
mutableCopyWithZone:
T@?,C,N
initWithDictionaryRepresentation:
initWithAccountID:primaryDeviceID:phoneNumberURI:availableDeviceSlots:allowedSecondaryDeviceIDs:
isEqualToAccount:
containsRegisteredDeviceID:
setAccountID:
setPrimaryDeviceID:
setPhoneNumberURI:
setAvailableDeviceSlots:
setAllowedSecondaryDeviceIDs:
_accountID
_primaryDeviceID
_phoneNumberURI
_availableDeviceSlots
_allowedSecondaryDeviceIDs
T@"NSString",C,N,V_accountID
T@"NSString",C,N,V_primaryDeviceID
T@"NSString",C,N,V_phoneNumberURI
Tq,N,V_availableDeviceSlots
T@"NSSet",C,N,V_allowedSecondaryDeviceIDs
T@"NSString",C,D,N
Tq,D,N
T@"NSSet",C,D,N
accountWithUUID:service:
inviteIDSPeersWithAction:destinations:joinCallActionToFulfill:completion:
upgradeCallForConversation:withSessionToken:
callForConversation:withSessionToken:
ISOCountryCodeForCallWithUUID:
ISOCountryCodeForChat:
isUpgradingCallWithUUID:
canUpgradeChat:
upgradeChatIfNecessary:
updateProviderConfigurationWithAccounts:
updateProviderConfigurationWithSenderIdentities:
updateProviderConfigurationWithAccounts:senderIdentities:
accounts
setAccounts:
telephonySenderIdentities
setTelephonySenderIdentities:
chatsPendingUpgrade
facetimeIDSServiceGenerator
setFacetimeIDSServiceGenerator:
isAccountActive
setIsAccountActive:
outgoingSessionProviderGenerator
setOutgoingSessionProviderGenerator:
outgoingChatGenerator
setOutgoingChatGenerator:
upgradeTimeout
setUpgradeTimeout:
_accounts
_telephonySenderIdentities
_chatsPendingUpgrade
_facetimeIDSServiceGenerator
_isAccountActive
_outgoingSessionProviderGenerator
_outgoingChatGenerator
_upgradeTimeout
T@"NSSet",C,N,V_accounts
T@"<CSDFaceTimeIDSProviderDelegateCapabilities>",R,N,V_capabilities
T@"NSOrderedSet",C,N,V_telephonySenderIdentities
T@"NSMutableSet",R,N,V_chatsPendingUpgrade
T@"<CSDFaceTimeIDSProviderDelegateServerBag>",&,N,V_serverBag
T@?,C,N,V_facetimeIDSServiceGenerator
T@?,C,N,V_isAccountActive
T@?,C,N,V_outgoingSessionProviderGenerator
T@?,C,N,V_outgoingChatGenerator
Td,N,V_upgradeTimeout
tuConversationActivity
activityWithCSDConversationActivity:fromConversation:forStorage:
activityWithCSDConversationActivity:handle:
T@"TUConversationActivity",R,N
handlePlayDTMFToneForKeyMessage:
handleSetTTYTypeMessage:
handleSetUplinkMutedMessage:
handleSuppressRingtoneMessage:
handleUpdateSystemVolumeMessageFromHost:
handleRequestActionMessage:
handleRequestedAnswerMessage:withBehavior:
copyFileAtURL:toTemporaryFileWithName:
renameResourceAtURL:toResourceWithName:
renamedResourceURL:withName:
deleteContentsAtURL:
transferFileAtURL:toDestinations:withMetadata:
unzipArchiveAtURL:completion:
T@"<CSDFileTransferringDelegate>",W,N
initWithService:
transferFileAtSandboxExtendedURL:toDestinations:withMetadata:
transferFileAtTemporaryURL:toDestinations:withMetadata:
zipDirectoryAtURL:completion:
performFileCopierOperation:onInputURL:outputURL:completion:
cleanUpTemporaryFileIfExistsForClientFileURL:
clientFileURLByIdentifier
temporaryFileURLByClientFileURL
_service
_clientFileURLByIdentifier
_temporaryFileURLByClientFileURL
T@"IDSService",&,N,V_service
T@"NSMutableDictionary",R,N,V_clientFileURLByIdentifier
T@"NSMutableDictionary",R,N,V_temporaryFileURLByClientFileURL
T@"<CSDFileTransferringDelegate>",W,N,V_delegate
initWithSerialQueue:
initWithSerialQueue:timeout:
fetchCallSourceForIdentifier:completion:
handleCallSourcesChanged
_waitForCallSourceWithIdentifier:completion:
serialQueue
setSerialQueue:
timeout
setTimeout:
pendingCompletions
setPendingCompletions:
_serialQueue
_timeout
_pendingCompletions
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
Td,N,V_timeout
T@"NSMutableDictionary",&,N,V_pendingCompletions
T@"<CSDCallSourceFetcherDataSource>",W,N,V_dataSource
normalizedDeviceType
ctServiceType
serviceDescription
displayPinMessageForDevice:completionHandler:
enrollDevice:forSenderIdentityUUID:
unenrollDevice:
displayServiceConfirmationWithCompletionHandler:
displayPinRequestFailure
displayIncomingPinCode:fromID:completionHandler:
pinCodeEnteredSuccessfully:cancelled:onPrimaryDevice:
resetOneTimeMessage
updateUINotification
_thumperCallingAllowedOnDefaultPairedDeviceDefault
TB,N,V_thumperCallingAllowedOnDefaultPairedDeviceDefault
setProtoStatus:
setHasProtoStatus:
hasProtoStatus
setProtoConferenced:
setHasProtoConferenced:
hasProtoConferenced
setProtoTimeConnected:
setHasProtoTimeConnected:
hasProtoTimeConnected
setProtoOutgoing:
setHasProtoOutgoing:
hasProtoOutgoing
setProtoHasSentInvitation:
setHasProtoHasSentInvitation:
hasProtoHasSentInvitation
protoStatus
protoConferenced
protoTimeConnected
protoOutgoing
protoHasSentInvitation
_protoTimeConnected
_protoStatus
_protoConferenced
_protoHasSentInvitation
_protoOutgoing
TI,N,V_protoStatus
TB,N,V_protoConferenced
Td,N,V_protoTimeConnected
TB,N,V_protoOutgoing
TB,N,V_protoHasSentInvitation
callRelaySupport
initWithRelayMessage:outgoing:
updateWithRelayMessage:
callUUID
isHostedOnCurrentDevice
canBeAnsweredWithRequest:
canBeAnsweredWithAudioOrVideoRelayWithRequest:
canOnlyBeAnsweredWithoutAudioOrVideoRelayWithRequest:
localProvider
supportsDisplayingFaceTimeAudioCalls
setCallStatus:
setIsSendingAudio:
startConferenceForAnsweredCallWithTransport:remoteInviteDictionary:
startConferenceForDialedCallWithTransport:remoteInviteDictionary:
startConferenceForPulledCallWithTransport:remoteInviteDictionary:
stopConference
playLocalDTMFToneForKey:
becomeEndpointForPullFromRemoteDevice
setLocallyHasStartedOutgoing
setLocallyHasSentInvitation
setLocallyConnecting
setLocallyConnected
setLocallyDisconnectedWithReasonIfNone:
setLocallyDisconnectedWithReasonIfNone:stopConference:
callStatus
setInitialLinkType:
relayDelegate
setRelayDelegate:
cannotRelayAudioOrVideo
setCannotRelayAudioOrVideo:
_voicemail
_emergency
_failureExpected
_supportsEmergencyFallback
_sos
_needsManualInCallSounds
_supportsTTYWithVoice
_cannotRelayAudioOrVideo
_callStatus
_callGroupUUID
_displayContext
_initialLinkType
_localSenderIdentityAccountUUID
_relayDelegate
T@"<CSDRelayCallDelegate>",W,N,V_relayDelegate
T@"TUHandle",&,N,V_handle
T@"NSString",C,N,V_isoCountryCode
Ti,N,V_callStatus
T@"NSUUID",C,N,V_callGroupUUID
T@"TUCallProvider",&,N,V_provider
TB,N,GisOutgoing,V_outgoing
TB,N,GisVoicemail,V_voicemail
TB,N,GisEmergency,V_emergency
TB,N,GisFailureExpected,V_failureExpected
TB,N,V_supportsEmergencyFallback
TB,N,GisSOS,SsetSOS:,V_sos
T@"NSString",C,N,V_callerNameFromNetwork
TB,N,V_needsManualInCallSounds
T@"TUCallDisplayContext",C,N,V_displayContext
TB,N,V_cannotRelayAudioOrVideo
TQ,N,V_initialLinkType
T@"TUCallProvider",R,N
T@"NSUUID",&,N,V_localSenderIdentityUUID
T@"NSUUID",&,N,V_localSenderIdentityAccountUUID
T@"NSSet",C,N,V_remoteParticipantHandles
TB,N,V_supportsTTYWithVoice
Ti,N,V_originatingUIType
recentCallsDidChangeForCallHistoryManager:
updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:
initWithManager:
callHistoryManager
_callHistoryManager
T@"CSDCallHistoryManager",R,N,V_callHistoryManager
initWithDestinationID:
nextPauseDigits
hasQueuedHardPauseDigits
dequeueAllPauseDigits
_parsePauseDigitsFromDestinationID:
baseDestinationID
setBaseDestinationID:
originalPauseDigitsString
setOriginalPauseDigitsString:
pauseDigits
setPauseDigits:
_baseDestinationID
_originalPauseDigitsString
_pauseDigits
T@"NSString",C,N,V_baseDestinationID
T@"NSString",C,N,V_originalPauseDigitsString
T@"NSMutableArray",&,N,V_pauseDigits
T@"<CSDPauseDigitsQueueDelegate>",W,N,V_delegate
T@"CSDPauseDigits",R,N
initWithObject:queue:
initWithConnection:queue:
connection
isRemote
objectForBlock
newProcessAssertion
acquireAssertionIfNecessary
performBlockAfterCoalescing:
isEntitledForCapability:
valueForEntitlement:
processIdentifier
processName
processBundleIdentifier
supportsClientAssertions
setSupportsClientAssertions:
entitledCapabilities
_supportsClientAssertions
_processIdentifier
_processName
_processBundleIdentifier
_entitledCapabilities
T@"NSXPCConnection",R,N
T@"NSSet",R,C,N,V_entitledCapabilities
T@"RBSAssertion",&,N,V_processAssertion
TB,N,V_supportsClientAssertions
transportMethod
utilityProvider
T@"RTTTelephonyUtilities",R,N
initWithProvider:
supportedHandleTypes
setSupportedHandleTypes:
emergencyTUHandles
setEmergencyTUHandles:
emergencyTULabeledHandles
setEmergencyTULabeledHandles:
prioritizedTUSenderIdentities
setPrioritizedTUSenderIdentities:
T@"TUCallProvider",R,C,N
T@"NSArray",C,N
T@"NSOrderedSet",C,N,SsetPrioritizedTUSenderIdentities:
_sendMessageOptionsWithTimeout:wantsAcknowledgement:
_retryReliableMessageWithIdentifierIfNecessary:message:timeout:maximumRetryAttempts:
sendMessage:wantsAcknowledgement:completionHandler:
sendMessage:timeout:wantsAcknowledgement:maximumRetryAttempts:completionHandler:
identifiersWaitingForAcknowledgement
setIdentifiersWaitingForAcknowledgement:
_identifiersWaitingForAcknowledgement
T@"NSMutableSet",&,N,V_identifiersWaitingForAcknowledgement
hasTargetContentIdentifier
setShouldAssociateScene:
setHasShouldAssociateScene:
hasShouldAssociateScene
targetContentIdentifier
setTargetContentIdentifier:
shouldAssociateScene
_targetContentIdentifier
_shouldAssociateScene
T@"NSString",&,N,V_targetContentIdentifier
TB,N,V_shouldAssociateScene
initWithPersonNameComponents:
personNameComponents
T@"NSPersonNameComponents",R,C,N
initWithIDSChat:
initWithStartCallAction:
initWithDialRequest:
initWithJoinConversationRequest:
sanitizedCallUpdate
remoteIDSDestination
setRemoteIDSDestination:
setInputAudioPowerSpectrumToken:
setOutputAudioPowerSpectrumToken:
setSpatialAudioSourceIdentifier:
T@"CXCallUpdate",R,C,N
isEndpointOnCurrentDevice
setProviderSource:
_endpointOnCurrentDevice
endpointOnCurrentDevice
TB,N,GisEndpointOnCurrentDevice,V_endpointOnCurrentDevice
T@"CXAbstractProviderSource",&,N,V_providerSource
membersType
otherInvitedHandlesType
lightweightMembersType
clearMembers
addMembers:
membersCount
membersAtIndex:
hasMessage
hasMessagesGroupUUIDString
hasMessagesGroupName
hasActivitySession
setHasVideo:
hasVideo
hasProviderIdentifier
clearOtherInvitedHandles
addOtherInvitedHandles:
otherInvitedHandlesCount
otherInvitedHandlesAtIndex:
clearLightweightMembers
addLightweightMembers:
lightweightMembersCount
lightweightMembersAtIndex:
setHasVideoEnabled:
hasVideoEnabled
hasParticipantAssociation
hasCollaborationIdentifier
members
setMembers:
message
setMessage:
messagesGroupUUIDString
setMessagesGroupUUIDString:
activitySession
setActivitySession:
providerIdentifier
setProviderIdentifier:
_activitySession
_members
_message
_messagesGroupUUIDString
_providerIdentifier
T@"NSMutableArray",&,N,V_members
T@"CSDMessagingConversationMessage",&,N,V_message
T@"NSString",&,N,V_messagesGroupUUIDString
T@"NSString",&,N,V_messagesGroupName
T@"CSDMessagingConversationActivitySession",&,N,V_activitySession
TB,N,V_video
T@"NSString",&,N,V_providerIdentifier
T@"NSMutableArray",&,N,V_otherInvitedHandles
T@"NSMutableArray",&,N,V_lightweightMembers
TB,N,V_videoEnabled
T@"CSDMessagingConversationParticipantAssociation",&,N,V_participantAssociation
T@"NSString",&,N,V_collaborationIdentifier
saveLivePhotoWithPhotoURL:videoURL:completion:
saveVideoWithURL:completion:
tuConversationParticipantAssociation
participantAssociationWithTUConversationParticipantAssociation:
T@"TUConversationParticipantAssociation",R,C,N
_registerEventWithContext:status:
_registerCallStartEventForCall:
_registerCallStopEvent
_registerCallForegroundedEventForCall:
_registerCallBackgroundedEvent
_contextDictionaryWithCall:
_bundleIdentifierForCall:
eventBlock
setEventBlock:
callStateContext
setCallStateContext:
visibilityContext
setVisibilityContext:
_eventBlock
_callStateContext
_visibilityContext
T@"NSDictionary",&,N,V_callStateContext
T@"NSDictionary",&,N,V_visibilityContext
T@?,C,N,V_eventBlock
providerDelegate:callWithUUID:startedConnectingAtDate:
providerDelegate:callWithUUID:endedAtDate:withReason:failureContext:
providerDelegate:requestedTransaction:completion:
providerDelegate:requestedUpgradeToExistingCallForConversation:withSessionToken:completion:
providerDelegate:isExclusivelyManagingCallWithUUID:
providerDelegate:callWithUUID:connectedAtDate:
initWithCallSource:queue:
initWithCallSource:queue:featureFlags:shouldUseIDSDemuxer:
providerConfiguration
deferReportingAudioFinishedForCallWithUUID:
_createDelayedActionListIfNecessary:
_processDelayedActionList:provider:
providerDelegate:endOtherProvidersCallWithUUID:
provider:performStartCallAction:shouldUseIDSDemuxer:
initiateModernFTInviteForAction:destinations:excludedIMAVDestinations:joinCallActionToFulfill:
provider:performJoinCallAction:shouldUseIDSDemuxer:
conversationManagerXPCServer
conversationManagerHost
cpBiomeStreamDonator
applicationMonitor
conduitXPCServer
shouldUseIDSDemuxer
delayedActionsByCallUUID
setFaceTimeInviteDemuxer:
faceTimeIDSProviderDelegate
setFaceTimeIDSProviderDelegate:
faceTimeIMAVProviderDelegate
setFaceTimeIMAVProviderDelegate:
faceTimeConversationProviderDelegate
setFaceTimeConversationProviderDelegate:
groupFaceTimeServiceProviderDelegate
setGroupFaceTimeServiceProviderDelegate:
conversationManager
callDataSource
setCallDataSource:
_shouldUseIDSDemuxer
_conversationManagerXPCServer
_conversationManagerHost
_cpBiomeStreamDonator
_applicationMonitor
_conduitXPCServer
_delayedActionsByCallUUID
_faceTimeIDSProviderDelegate
_faceTimeIMAVProviderDelegate
_faceTimeConversationProviderDelegate
_groupFaceTimeServiceProviderDelegate
_conversationManager
_callDataSource
T@"CSDConversationManagerXPCServer",R,N,V_conversationManagerXPCServer
T@"CPConversationManagerHost",R,N,V_conversationManagerHost
T@"CPBiomeSessionDonator",R,N,V_cpBiomeStreamDonator
T@"CPApplicationMonitor",R,N,V_applicationMonitor
T@"CSDNeighborhoodActivityConduitXPCServer",R,N,V_conduitXPCServer
TB,R,N,V_shouldUseIDSDemuxer
T@"CXProvider",R,N,V_provider
T@"NSMutableDictionary",R,N,V_delayedActionsByCallUUID
T@"CSDFaceTimeInviteDemuxer",&,N,V_faceTimeInviteDemuxer
T@"CSDFaceTimeIDSProviderDelegate",&,N,V_faceTimeIDSProviderDelegate
T@"CSDFaceTimeIMAVProviderDelegate",&,N,V_faceTimeIMAVProviderDelegate
T@"CSDFaceTimeConversationProviderDelegate",&,N,V_faceTimeConversationProviderDelegate
T@"CSDGFTServiceConversationProviderDelegate",&,N,V_groupFaceTimeServiceProviderDelegate
T@"CSDConversationManager",R,N,V_conversationManager
T@"CSDProviderCallDataSource",W,N,V_callDataSource
initWithMessage:assertion:applicationShouldPostIncomingCall:
applicationShouldPostIncomingCall
assertion
_applicationShouldPostIncomingCall
_assertion
TB,R,N,V_applicationShouldPostIncomingCall
T@"BKSProcessAssertion",R,N,V_assertion
T@"CSDVoIPApplicationMessage",R,N,V_message
voipRegistrationSucceededWithDeviceToken:
voipPayloadReceived:mustPostCall:withCompletionHandler:
voipRegistrationFailed
voipNetworkExtensionPayloadReceived:mustPostCall:withCompletionHandler:
voipNetworkExtensionRegistrationFailed
applicationRecord
pushEnvironmentAccordingToLaunchServices
hasVoIPBackgroundMode
hasVoIPNetworkExtensionEntitlement
requiresStrictPolicyEnforcement
setPushKitClient:
setNetworkExtensionClient:
deliverVoIPToken:
unsetVoIPToken
deliverMessage:withAssertion:applicationShouldPostIncomingCall:
_deliverVoIPTokenToApplication
_deliverPendingNetworkExtensionPayloadsToApplication
_deliverPendingPushKitPayloadsToApplication
_deliverMessageContext:
environment
setEnvironment:
voipToken
setVoipToken:
pushKitClient
networkExtensionClient
pendingPushKitVoIPMessageContexts
pendingNetworkExtensionMessageContexts
_environment
_voipToken
_pushKitClient
_networkExtensionClient
_pendingPushKitVoIPMessageContexts
_pendingNetworkExtensionMessageContexts
T@"NSMutableArray",R,N,V_pendingPushKitVoIPMessageContexts
T@"NSMutableArray",R,N,V_pendingNetworkExtensionMessageContexts
T@"NSData",C,N,V_voipToken
T@"NSString",C,N,V_environment
T@"CSDClient",&,N,V_pushKitClient
T@"CSDClient",&,N,V_networkExtensionClient
hasIdentifierUUIDString
hasActivity
identifierUUIDString
setIdentifierUUIDString:
activity
setActivity:
_activity
_identifierUUIDString
T@"NSString",&,N,V_identifierUUIDString
T@"CSDMessagingConversationActivity",&,N,V_activity
hasNamePrefix
hasGivenName
hasMiddleName
hasFamilyName
hasNameSuffix
hasNickname
hasPhoneticRepresentation
namePrefix
setNamePrefix:
givenName
setGivenName:
middleName
setMiddleName:
familyName
setFamilyName:
nameSuffix
setNameSuffix:
nickname
setNickname:
phoneticRepresentation
setPhoneticRepresentation:
_familyName
_givenName
_middleName
_namePrefix
_nameSuffix
_nickname
_phoneticRepresentation
T@"NSString",&,N,V_namePrefix
T@"NSString",&,N,V_givenName
T@"NSString",&,N,V_middleName
T@"NSString",&,N,V_familyName
T@"NSString",&,N,V_nameSuffix
T@"NSString",&,N,V_nickname
T@"CSDMessagingPersonNameComponents",&,N,V_phoneticRepresentation
linkType
clearLinks
addLink:
linksCount
linkAtIndex:
links
setLinks:
_links
T@"NSMutableArray",&,N,V_links
updateResolvedDescriptor
resolvedCall
resolvedConversation
resolvedDescriptor
shouldDisplaySystemCallControls
shouldDisplayHandoffEligibleConversationControls
T@"<CSDStatusBarResolverDelegate>",W,N
T@"CSDCall",R
T@"TUConversation",R,N
T@"STCallingStatusDomainCallDescriptor",R,N
initWithCallCenterObserver:inCallServiceProcessObserver:springBoardProcessObserver:callCenter:featureFlags:queue:
handleSpringBoardPIDChanged:
resolvedAVLessConversation
resolvedHandoffEligibleConversation
callProviderSupportsSystemControls
conversationStateSupportsSystemControls
callStatusSupportsSystemControls
inCallServiceProcessObserver
springBoardProcessObserver
callDurationUpdateTimer
setCallDurationUpdateTimer:
setResolvedDescriptor:
inCallServiceProcessState
setInCallServiceProcessState:
springBoardPID
setSpringBoardPID:
_inCallServiceProcessObserver
_springBoardProcessObserver
_callDurationUpdateTimer
_resolvedDescriptor
_inCallServiceProcessState
_springBoardPID
T@"<CSDProcessObserverProtocol>",R,N,V_inCallServiceProcessObserver
T@"<CSDProcessObserverProtocol>",R,N,V_springBoardProcessObserver
T@"NSTimer",&,N,V_callDurationUpdateTimer
T@"STCallingStatusDomainCallDescriptor",&,N,V_resolvedDescriptor
Tq,N,V_inCallServiceProcessState
T@"NSNumber",N,V_springBoardPID
T@"<CSDStatusBarResolverDelegate>",W,N,V_delegate
uplinkMutedStatusChanged:
T@"CSDRelayConferenceInterface",R,N
isMutedForIdentifier:
setMuted:forIdentifier:
isSendingAudioForIdentifier:
inputAudioPowerSpectrumTokenForIdentifier:
outputAudioPowerSpectrumTokenForIdentifier:
spatialAudioSourceIdentifierForIdentifier:
setSendingAudio:forIdentifier:
prepareConferenceConnection:remoteInviteDictionary:completion:
prepareConferenceForCall:remoteInviteDictionary:completion:
startConferenceForIdentifier:usingTransport:remoteInviteDictionary:didStartHandler:didStopHandler:
sendData:throughConferenceForIdentifier:
updateConferenceForIdentifier:isUsingBaseband:disableAudio:
setConferenceActiveForIdentifier:
prepareToStopConferenceForIdentifier:
stopConferenceForIdentifier:
activeConferenceConnectionForIdentifier:
conferenceConnectionForIdentifier:
_conferenceConnectionsForConference:
activeConference
_prepareConferenceForConferenceConnection:remoteInviteDictionary:
_cleanUpAllConferenceConnectionsForConference:withError:
_cleanUpConferenceConnection:error:
_stopConference:
_postDidCloseNotificationForConferenceIfNecessary:
_postDidCloseNotificationForConference:
conferenceConnections
setConferenceConnections:
conferencesAwaitingConnectionClose
setConferencesAwaitingConnectionClose:
closeConnectionTimeout
setCloseConnectionTimeout:
prepareToStopTimeout
setPrepareToStopTimeout:
_conferenceConnections
_conferencesAwaitingConnectionClose
_closeConnectionTimeout
_prepareToStopTimeout
T@"NSMutableArray",&,N,V_conferenceConnections
T@"NSMutableSet",&,N,V_conferencesAwaitingConnectionClose
T@"<CSDAVConference>",R,N
Td,N,V_closeConnectionTimeout
Td,N,V_prepareToStopTimeout
initWithName:fileManager:error:
initWithName:error:
createLinkIfNecessaryWithFilename:toURL:error:
removeLinksForFilenamesNotInArray:error:
urlForFilename:
setURL:
fileManager
setFileManager:
_URL
_fileManager
T@"NSFileManager",&,N,V_fileManager
T@"NSURL",&,N,V_URL
initWithDelegate:
requestPinFromDevice:
cancelPinRequests
idsDeviceFromUniqueID:
allIDSTelephonyDevices
sendPinCodeAndPromptForResponseToDevice:forSenderIdentityUUID:
sendApprovalDisplayPinToDevice:
sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:
sendIDSAction:toDevice:
sendIDSAction:toDevices:
randomSixDigitCode
displayErrorNotificationWithMessage:
removeErrorNotifications
displayPinErrorNotification
displayMismatchedAccountsNotification
displaySlotsFullNotification
handlePINCodeEnteredSuccessfully:canceled:fromDevice:isPrimaryDevice:
pendingCodesToDevicesForApproval
setPendingCodesToDevicesForApproval:
pinExchangeDelegate
setPinExchangeDelegate:
outgoingPinRequestIdentifier
setOutgoingPinRequestIdentifier:
_pendingCodesToDevicesForApproval
_pinExchangeDelegate
_outgoingPinRequestIdentifier
T@"NSMutableDictionary",&,V_pendingCodesToDevicesForApproval
T@"<CSDPinExchangeDelegate>",&,V_pinExchangeDelegate
T@"NSString",C,V_outgoingPinRequestIdentifier
hasPrimaryHandle
setPrimaryIdentifier:
setHasPrimaryIdentifier:
hasPrimaryIdentifier
hasPrimaryAvcIdentifier
hasAssociatedPseudonym
hasConversationGroupUUIDString
primaryHandle
setPrimaryHandle:
primaryIdentifier
primaryAvcIdentifier
setPrimaryAvcIdentifier:
associatedPseudonym
setAssociatedPseudonym:
conversationGroupUUIDString
setConversationGroupUUIDString:
_primaryIdentifier
_associatedPseudonym
_conversationGroupUUIDString
_primaryAvcIdentifier
_primaryHandle
T@"CSDMessagingHandle",&,N,V_primaryHandle
TQ,N,V_primaryIdentifier
T@"NSString",&,N,V_primaryAvcIdentifier
T@"CSDMessagingHandle",&,N,V_associatedPseudonym
T@"NSString",&,N,V_conversationGroupUUIDString
deviceListChanged:
deviceCapabilityChanged:
capabilityStateUpdated:
setRelayCallingEnabled:
setRelayCallingEnabled:forDeviceWithID:
setWiFiCallingEnabled:forSenderIdentityWithUUID:
setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:
setVoLTECallingEnabled:forSenderIdentityWithUUID:
setThumperCallingEnabled:forSenderIdentityWithUUID:
setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:
setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:
invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:
invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:
requestPinFromPrimaryDevice
cancelPinRequestFromPrimaryDevice
endEmergencyCallbackMode
callCapabilitiesState:
accountsChanged
faceTimeAvailabilityChanged
outgoingCallerIDChanged
telephonyCallCapabilitiesChanged
secondaryThumperAccountForAccountID:
thumperCallingCapabilitiesStateForAccountID:
isThumperRegisteredDeviceID:forThumperAccountID:
addThumperRegisteredDeviceID:forThumperAccountID:
removeThumperRegisteredDeviceID:forThumperAccountID:
localThumperAccounts
secondaryThumperAccounts
thumperCallingCapabilitiesStateByUUID
T@"CSDCallCapabilities",R,N
initWithRelayService:thumperService:
_updateClientsWithState
updatePairedHostDeviceCallCapabilitiesState:
_updateState
_updateHostingAndDisplayingSupport
_defaultOverrideForDisableDefault:forceDefault:
_supportsPrimaryCalling
_supportsBasebandCalling
_supportsCellularData
_supportsDisplayingTelephonyCalls
_supportsDisplayingFaceTimeAudioCalls
_supportsDisplayingFaceTimeVideoCalls
_updateCallAvailability
_updateDynamicCapabilitiesAndUpdateClients
_updateCTCapabilities
isThumperCallingSupportedForAccountID:
_setWiFiCallingEnabled:forSenderIdentityWithUUID:
_setVoLTECallingEnabled:forSenderIdentityWithUUID:
_setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:
_setThumperCallingEnabled:forSenderIdentityWithUUID:
_setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:
_setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:
_supportsThumperCallingUsingSenderIdentityCapabilitiesState:
_isThumperCallingAllowedForCurrentDeviceUsingSenderIdentityCapabilitiesState:
_primaryThumperAccountRequiringMatchingCallerID
_primaryThumperAccountRequiringAvailableDeviceSlots
_primaryThumperAccountRequiringMatchingCallerID:requiringAvailableDeviceSlots:
_updateRelayCapabilities
_supportsRelayCalling
_accountsMatchForSecondaryCalling
_cloudCallingDevices
_deviceExistsThatSupportsRelayCallingWithoutLocalRelayCallingEnabled
_relayCallingEnabledDefault
_setRelayCallingEnabledDefault:
_setRelayCallingEnabled:
_relayCallingDisabledForDeviceIDDefault
_setRelayCallingEnabledDefault:forDeviceWithID:
_setRelayCallingEnabled:forDeviceWithID:
_isWatchDevice
_isAudioAccessoryDevice
_initializePairedHostDeviceState
_savePairedHostDeviceState
_supportslaunchingInCallApplicationForIncomingCall
xpcListener
processObserver
accountsController
telephonyCallCapabilities
thumperPushHandler
thumperPinExchangeController
thumperCapabilitiesMonitor
relayService
thumperService
pairedHostDeviceState
setPairedHostDeviceState:
_xpcListener
_processObserver
_accountsController
_telephonyCallCapabilities
_thumperPushHandler
_thumperPinExchangeController
_thumperCapabilitiesMonitor
_relayService
_thumperService
_pairedHostDeviceState
T@"NSXPCListener",R,N,V_xpcListener
T@"<CSDProcessObserverProtocol>",R,N,V_processObserver
T@"CSDAccountsController",R,N,V_accountsController
T@"CSDTelephonyCallCapabilities",R,N,V_telephonyCallCapabilities
T@"CSDThumperPushHandler",R,N,V_thumperPushHandler
T@"CSDPinExchangeController",R,N,V_thumperPinExchangeController
T@"CSDThumperCapabilitiesMonitor",R,N,V_thumperCapabilitiesMonitor
T@"<CSDIDSService>",R,N,V_relayService
T@"<CSDIDSService>",R,N,V_thumperService
T@"TUCallCapabilitiesState",&,N,V_state
T@"TUCallCapabilitiesState",&,N,V_pairedHostDeviceState
T@"TUCallCapabilitiesState",R,N
setTransitionStatus:
setWasDialAssisted:
setFaceTimeIDStatus:
setModel:
setDateSentInvitation:
faceTimeIDStatus
displayContextChanged:
disconnect
unsuppressRingtoneIfNecessary
updateWithProxyCall:
setHasAudioInterruption:
setRelayClientTransport:
setDateStartedOutgoing:
setIsKnownCaller:
setTimeoutTimer:
setTransmissionState:
shouldOverrideCallStatus
callStatusFromOverride
hasStartedOutgoing
_refreshFaceTimeIDSStatusIfNecessary
silencingUserInfo
cxCall
propertiesChanged
handleUpdatedPropertiesAfterChangesInBlock:
junkConfidence
setJunkConfidence:
identificationCategory
setIdentificationCategory:
isKnownCaller
joinedFromLink
setJoinedFromLink:
setDialRequest:
dateStartedOutgoing
uplinkWasExplicitlyMuted
setUplinkWasExplicitlyMuted:
hasAudioInterruption
hasAudioFinished
setHasAudioFinished:
bytesOfDataUsed
setBytesOfDataUsed:
uplinkMutedSetTime
setUplinkMutedSetTime:
remoteUplinkMutedSetTime
setRemoteUplinkMutedSetTime:
setActiveRemoteParticipants:
relayClientTransport
expectedRelayClientDestination
setExpectedRelayClientDestination:
timeoutTimer
transmissionState
dynamicDisplayContext
setDynamicDisplayContext:
faceTimeIDStatusRefreshed
setFaceTimeIDStatusRefreshed:
setSilencingUserInfo:
_isKnownCaller
_joinedFromLink
_uplinkWasExplicitlyMuted
_hasAudioInterruption
_hasAudioFinished
_ignoresBluetoothDeviceUID
_faceTimeIDStatusRefreshed
_junkConfidence
_identificationCategory
_dialRequest
_dateStartedOutgoing
_bytesOfDataUsed
_uplinkMutedSetTime
_remoteUplinkMutedSetTime
_activeRemoteParticipants
_relayClientTransport
_expectedRelayClientDestination
_timeoutTimer
_transmissionState
_dynamicDisplayContext
_silencingUserInfo
T@"TUDialRequest",&,N,V_dialRequest
T@"TUDynamicCallDisplayContext",&,N,V_dynamicDisplayContext
TB,N,V_faceTimeIDStatusRefreshed
T@"NSMutableDictionary",&,N,V_silencingUserInfo
T@"<CSDCallDelegate>",W,N,V_delegate
T@"CSDCallDataSource",W,N,V_dataSource
T@"NSDate",&,N,V_dateStartedOutgoing
TB,N,V_uplinkWasExplicitlyMuted
TB,N,V_isSendingAudio
TB,N,V_hasAudioInterruption
TB,N,V_hasAudioFinished
TB,R,N,V_ignoresBluetoothDeviceUID
TB,R,N,GisOneToOneModeEnabled,V_oneToOneModeEnabled
T{?=[8I]},R,N
T@"CXCall",R,N
Tq,N,V_bytesOfDataUsed
TQ,R,N,V_initialLinkType
Tq,N,V_identificationCategory
Tq,N,V_junkConfidence
TB,N,V_isKnownCaller
TB,N,V_joinedFromLink
Td,N,V_uplinkMutedSetTime
Td,N,V_remoteUplinkMutedSetTime
T@"NSSet",C,N,V_activeRemoteParticipants
T@"CSDIDSTransport",&,N,V_relayClientTransport
T@"IDSDestination",&,N,V_expectedRelayClientDestination
T@"NSObject<OS_dispatch_source>",&,N,V_timeoutTimer
Tq,N,V_transmissionState
pickableRoutesDidChangeNotification:
preferredExternalRouteDidChangeNotification:
carPlayIsConnectedChanged:
mediaServicesWereResetNotification:
audioDeviceControllerDeviceListChanged:
audioDeviceControllerMutedTalkerDidStart:
audioDeviceControllerMutedTalkerDidEnd:
isAnyRouteAvailableWithUniqueIdentifier:forCall:
preferredAndActiveRouteForCall:
preferredRouteForCall:
isEligibleRouteAvailableForCall:
isAnyVehicleRouteAvailableForCall:
isEligibleRouteAvailable
isCarModeActive
isCarPlayRouteAvailable
isAnyVehicleRouteAvailableForAnyCall
isAnyBluetoothHeadphoneRouteAvailableForAnyCall
eligibleRouteAvailable
TB,R,N,GisEligibleRouteAvailable
carModeActive
TB,R,N,GisCarModeActive
carPlayRouteAvailable
TB,R,N,GisCarPlayRouteAvailable
anyVehicleRouteAvailableForAnyCall
TB,R,N,GisAnyVehicleRouteAvailableForAnyCall
anyBluetoothHeadphoneRouteAvailableForAnyCall
TB,R,N,GisAnyBluetoothHeadphoneRouteAvailableForAnyCall
_postNotificationName:
_updatePickableRoutes
_audioRouteCollectionForCall:
_isAnyAudioDevicePreferred
_initializeAudioRouteCollections
_initializeAutomaticCarDNDStatusIfNecessary
_updateCarPlayDeviceConnected
audioRouteCollections
setAudioRouteCollections:
isCarPlayDeviceConnected
setCarPlayDeviceConnected:
automaticCarDNDStatus
setAutomaticCarDNDStatus:
setCarModeActive:
_carPlayDeviceConnected
_carModeActive
_audioRouteCollections
_automaticCarDNDStatus
T@"NSDictionary",C,N,V_audioRouteCollections
carPlayDeviceConnected
TB,N,GisCarPlayDeviceConnected,V_carPlayDeviceConnected
T@"CARAutomaticDNDStatus",&,N,V_automaticCarDNDStatus
TB,N,GisCarModeActive,V_carModeActive
csd_isTelephony
csd_isThumper
csd_isUnknown
csd_unknownContextInfoForAccountID:
csd_telephony
TB,R,N,Gcsd_isTelephony
csd_thumper
TB,R,N,Gcsd_isThumper
csd_unknown
TB,R,N,Gcsd_isUnknown
hasLightweightPrimary
setLightweightPrimaryParticipantID:
setHasLightweightPrimaryParticipantID:
hasLightweightPrimaryParticipantID
validationSource
setValidationSource:
setHasValidationSource:
hasValidationSource
validationSourceAsString:
StringAsValidationSource:
hasAssociationVoucher
lightweightPrimary
setLightweightPrimary:
lightweightPrimaryParticipantID
associationVoucher
setAssociationVoucher:
_lightweightPrimaryParticipantID
_associationVoucher
_lightweightPrimary
_validationSource
T@"CSDMessagingHandle",&,N,V_lightweightPrimary
TQ,N,V_lightweightPrimaryParticipantID
Ti,N,V_validationSource
T@"CSDMessagingVoucher",&,N,V_associationVoucher
remoteMembersType
activeRemoteParticipantsType
activitySessionsType
activeLightweightParticipantsType
hasUUIDString
setLocallyCreated:
setHasLocallyCreated:
hasLocallyCreated
hasInitiator
hasLocalMember
clearRemoteMembers
addRemoteMembers:
remoteMembersCount
remoteMembersAtIndex:
clearActiveRemoteParticipants
addActiveRemoteParticipants:
activeRemoteParticipantsCount
activeRemoteParticipantsAtIndex:
clearActivitySessions
addActivitySessions:
activitySessionsCount
activitySessionsAtIndex:
hasLink
hasReportData
hasConversationProviderIdentifier
clearActiveLightweightParticipants
addActiveLightweightParticipants:
activeLightweightParticipantsCount
activeLightweightParticipantsAtIndex:
hasHighlightIdentifier
hasStagedActivitySession
uUIDString
setUUIDString:
setLocalMember:
setActivitySessions:
reportData
setReportData:
conversationProviderIdentifier
setConversationProviderIdentifier:
setActiveLightweightParticipants:
highlightIdentifier
setHighlightIdentifier:
_activeLightweightParticipants
_activitySessions
_conversationProviderIdentifier
_highlightIdentifier
_reportData
_uUIDString
T@"NSString",&,N,V_uUIDString
TB,N,V_locallyCreated
T@"CSDMessagingHandle",&,N,V_initiator
T@"CSDMessagingConversationMember",&,N,V_localMember
T@"NSMutableArray",&,N,V_remoteMembers
T@"NSMutableArray",&,N,V_activeRemoteParticipants
T@"NSMutableArray",&,N,V_activitySessions
T@"CSDMessagingConversationLink",&,N,V_link
T@"CSDMessagingConversationReport",&,N,V_reportData
T@"NSString",&,N,V_conversationProviderIdentifier
T@"NSMutableArray",&,N,V_activeLightweightParticipants
T@"NSString",&,N,V_highlightIdentifier
T@"CSDMessagingConversationActivitySession",&,N,V_stagedActivitySession
hasConversationID
setTimebase:
setHasTimebase:
hasTimebase
conversationID
setConversationID:
timebase
_timebase
_conversationID
T@"NSString",&,N,V_conversationID
Td,N,V_timebase
handleConversationHandoffRecommendationChangedNotification:
handleConversationHandoffRouteIdentifierChangedNotification:
conversationManager:conversation:receivedMessage:fromHandle:withUpdate:
shouldHandleUpdateForProvider:
conversationManager:reportedNewIncomingConversation:fromHandle:
conversationManager:avModeChanged:toAVMode:forConversation:
conversationManager:removedConversationWithUUID:
conversationManager:updateIncomingPendingConversationsByGroupUUID:
conversationManager:activatedConversationLinksChanged:
conversationManager:reportedLetMeInRejectedForPendingConversation:
conversationManager:reportedInvalidLinkForPendingConversation:
conversationManager:conversationUpdateMessagesGroupPhoto:
conversationManager:joinConversationWithRequest:
conversationManager:avModeChanged:toAVMode:forParticipantWithHandle:forConversation:
conversationManager:conversationChanged:
conversationManager:reportedHandedOffConversation:replacedByIdentifier:lastPresentationState:localizedHandoffRecipientDeviceCategory:
conversationManager:conversation:addedActiveParticipant:
conversationManager:conversation:removedActiveParticipant:
conversationManager:conversationScreenSharingChanged:forParticipant:
conversationManager:conversation:mediaPrioritiesDidChangeForParticipant:
conversationManager:conversation:failedWithContext:
conversationManager:conversation:appLaunchState:forActivitySession:
conversationManager:conversation:changedBytesOfDataUsed:
conversationManager:activityAuthorizationChangedForBundleIdentifier:
conversationManager:sharePlayAllowedChanged:
conversationManager:screenSharingAllowedChanged:
conversationChanged:
conversationConnectionDidStart:
conversationInvalidated:
conversation:didChangeLocalParticipant:
conversation:failedWithContext:
conversation:addedActiveParticipant:
conversation:removedActiveParticipant:
conversation:updatedActiveParticipant:
conversation:updatedActiveParticipantWithScreenSharing:
conversation:mediaPrioritiesChangedForParticipant:
conversation:requestAVCBlobForParticipantDestination:completion:
conversation:sendDeclineMessageToParticipantDestination:
conversation:receivedActivitySessionEvent:
conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
conversation:activitySessionChanged:
conversation:didChangeStateForActivitySession:
conversation:didChangeSceneAssociationForActivitySession:
conversation:appLaunchState:forActivitySession:
conversation:activityChangedOnSession:
conversation:changedBytesOfDataUsed:
conversation:addedMembers:triggeredLocally:
conversation:activitySessionRemoved:userOriginated:
displaySharePlayUnableToStartAlert
conversationDidTriggerJoin:
allActiveConversationParticipantsSupportSharePlay
sendDelegationMessageTo:conversation:link:transactionUUID:forMember:
sendDelegationResponseMessageTo:conversation:transactionUUID:forMember:withResponse:
pendingMembershipTracker:willAdd:to:using:
pendingMembershipTracker:willNotAdd:to:using:
pendingMembershipTracker:didTrack:forGroupUUID:
noticeManager:conversation:participant:addedNotice:
linkManager:updatedLinkDescriptorsFromSync:
linkManager:removedLinkDescriptorsFromIDSSignal:
linkManager:updatedLinkDescriptorsFromIDSSignal:
linkManager:removedLinkDescriptorsFromValidityCheck:
screenSharingActivityManager:receivedUpdatedRemoteAttributes:isLocallySharing:
screenSharingActivityManager:invalidatedSessionWithReason:wasLocallySharing:
applicationPolicyManager:authorizationChangedForBundleIdentifier:
systemStateObserver:sharePlayAllowedStateChanged:
systemStateObserver:screenSharingAllowedStateChanged:
addRemoteMembers:toConversationWithUUID:
createActivitySession:onConversationWithUUID:withCompletion:
setActivityAuthorization:forBundleID:
leaveActivitySession:onConversationWithUUID:
requestActivityAuthorizationForApplicationWithBundleIdentifier:completionHandler:
updateParticipantPresentationContexts:onConversationWithUUID:
buzzMember:conversationUUID:
kickMember:conversationUUID:
setDownlinkMuted:forRemoteParticipantsOnConversationWithUUID:
revokeBackgroundPipAuthorizationsForBundleID:
addObserver:queue:
includeMetricsReport:onConversationWithUUID:
conversationsByUUID
conversationsByGroupUUID
activityAuthorizedBundleIdentifiers
activityAuthorizationManager
T@"CPActivityAuthorizationManager",R,N
T@"<CPSystemStateObserver>",R,N
initWithReportingController:cpApplicationController:invitationResolver:
initWithQueue:reportingController:persistenceController:linkManager:invitationResolver:pendingMembershipTracker:featureFlags:
initWithQueue:reportingController:persistenceController:linkManager:cpApplicationController:invitationResolver:pendingMembershipTracker:featureFlags:
isValidLocalHandle:forProvider:
isValidLocalHandle:
isValidLocalHandle:activeLocalHandles:provider:
isHandleLocalPseudonym:provider:
isHandleStringLocalPseudonym:
isHandleStringLocalPseudonym:provider:
senderIdentityUUIDForCallerIDHandle:
callerIDHandleForSenderIdentityUUID:
callerIDForLocalMember:forProvider:
callerIDForLocalMember:
localMemberForProvider:fromHandle:members:lightweightMembers:activeLocalHandles:
createConversationWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:activity:link:report:fromStorage:avMode:provider:
pendingConversationUUIDWithPseudonym:
removePendingConversationWithPseudonym:
removeAllPendingConversations
activeConversation
conversationWithGroupUUID:andProvider:
conversationWithGroupUUID:
conversationWithGroupUUID:orRepresentedByRemoteMembers:andLink:
conversationRepresentedByRemoteMembers:andLink:
activeApprovedConversationWithLink:
pendingConversationWithPseudonym:
findConversationLinkMatchingPseudonym:
conversationLinkForPseudonym:
conversationLinkForGroupUUID:
createConversationIfNecessaryWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:link:activity:avMode:provider:
transitionConversationWithUUID:toNewGroupUUID:remoteMembers:localMember:lightweightMembers:fromHandle:
conversationWithGroupUUID:orMemberIdentifiers:orRemoteMembers:andLink:andVideo:
notifyDelegatesOfMessage:fromHandle:forConversation:withUpdate:
notifyDelegatesOfNewConversation:fromHandle:
notifyDelegatesOfAVModeChanged:toAVMode:forConversation:
notifyDelegatesOfRemovedConversationWithUUID:
notifyDelegatesOfTrackedPendingMember:forConversationLink:
notifyDelegatesOfUpdatePendingConversations
notifyDelegatesOfChangedLinkDescriptors:
notifyDelegatesOfChangedLink:conversation:
notifyDelegatesOfRemoteScreenShareAttributes:isLocallySharing:
notifyDelegatesOfRemoteScreenShareEndedWithReason:
notifyDelegatesOfLetMeInRejectedForPendingConversation:
notifyDelegatesOfInvalidLinkForPendingConversation:
handleConversation:receivedAVCBlobRequest:fromHandle:
handleConversation:receivedAVCBlobResponse:fromHandle:
updateConversationHandoffEligibility:
postSessionStartedForSession:originator:conversation:
postEndEventForSession:originator:conversation:
_linksEnabled
temporaryFilePath
createActivitySession:onConversation:fromHandle:
handleEncryptedMessageWithin:fromHandle:context:
handleEncryptedLetMeInRequest:fromHandle:context:
handleEncryptedLetMeInResponse:fromHandle:context:
handleReceivedLetMeInRequest:toPseudonym:fromHandle:responseKeyData:
handleReceivedLetMeInResponse:pendingConversation:fromHandle:
handleReceivedLinkCreatedOrChangedMessage:fromHandle:
handleReceivedLinkInvalidatedMessage:fromHandle:
handleReceivedLMIDelegateMessage:fromHandle:
sendMessagesForCreatedOrChangedLink:conversation:messageType:
sendMessagesForInvalidatedLink:
handleReceivedUpdateJoinedMetadataMessage:fromHandle:
sendData:onConversation:toDestinationID:fromMember:additionalOptions:isBlobResponse:callback:
sendData:onConversation:toDestinationID:fromMember:
sendData:onConversation:toDestinationID:
sendData:onConversation:toHandle:
sendData:onConversation:toHandle:isBlobResponse:
sendData:onConversation:toMember:additionalOptions:
sendData:onConversation:toMember:
broadcastFile:onConversation:additionalOptions:
broadcastData:onConversation:additionalOptions:
broadcastData:onConversation:
broadcastImageForSession:onConversation:
broadcastLightweightEndorsementForAddedMembers:onConversation:
memberExistsForParticipantDestination:members:
memberExistsForParticipantDestination:groupSessionParticipantUpdate:
shouldAcceptMessageFromHandle:messageContext:message:existingConversation:
shouldAcceptMembershipUpdateFromHandle:joinContext:participantUpdate:existingConversation:
verifyKickMemberPermittedFromHandle:message:
verifyActivitySessionOriginatorFromHandle:message:
verifyMessageIntentKeyFromContext:message:
verifyBlobResponseFromHandle:message:existingConversation:
verifyAllLightweightmembersAssociated:remoteMembers:
verifyGroupSessionParticipantUpdateAllowedFromHandle:participantUpdate:message:existingConversation:lightweightMembers:
verifyLightweightMessageTypeFromHandle:message:existingConversation:
verifyEndorseRepresentsMemberFromHandle:message:existingConversation:
incomingPendingConversationsByGroupUUID
_incomingPendingConversationsByGroupUUID
pseudonymsByCallUUID
conversationsByUUIDIncludingStorageConversations:
activatedConversationLinks
activityAuthorizedBundleIdentifierState
addDelegate:queue:
removeDelegate:
beginListeningOnService:
retreiveActiveConversations
removeAllConversations
findOrCreateConversationWithGroupUUID:messagesGroupUUID:remoteMembers:otherInvitedHandles:localMember:remotePushTokens:link:activity:avMode:conversationProvider:
joinExistingConversationWithUUID:context:
initiatePendingConversationForLink:localMember:isVideoEnabled:
requestLetMeInApprovalForPseudonym:
sendLetMeInResponseToPendingMember:forConversation:usingResponseKeyData:approved:callback:
updateLetMeInRequestState:addLink:forConversationWithUUID:
sendInvitationMessageToMember:forConversation:includeAllAttributes:invitationPreferences:additionalOptions:
startAudioForConversationWithUUID:
leaveConversationWithUUID:
leaveAllConversations
addPseudonym:forCallUUID:
removePseudonym:forCallUUID:
setUplinkMuted:forConversationWithUUID:
setVideo:forConversationWithUUID:
sendVideoUpgradeMessageforConversationWithUUID:
setVideoEnabled:forConversationWithUUID:
setUplinkMuted:forPendingConversationWithUUID:
setVideoEnabled:forPendingConversationWithUUID:
setScreenEnabled:forConversationWithUUID:
setScreenEnabled:screenShareAttributes:forConversationWithUUID:
setVideoPaused:forConversationWithUUID:
setAudioPaused:forConversationWithUUID:
setRelaying:forConversationWithUUID:
isConversationWithUUIDRelaying:
presentationStateForConversationWithUUID:
setPresentationState:forConversationWithUUID:
setPresentationRect:forConversationWithUUID:
setGridDisplayMode:forConversationWithUUID:
setScreenShareAttributes:forConversationWithUUID:
removeRemoteMembers:fromConversationWithUUID:
addRemoteMembers:otherInvitedHandles:toConversationWithUUID:
maybeAddComplementaryAssociationVoucherFor:toLocalMemberOf:completion:
addInvitedMemberHandlesFromAddedRemoteMembers:toConversationLink:
isSharePlayAvailable
_displaySharePlayUnableToStartWithMessage:
updateMessagesGroupName:onConversationWithUUID:
updateMessagesGroupPhotoOnConversationWithUUID:
deviceSupport
createCPActivitySessionForActivitySession:onConversationWithUUID:
endActivitySession:onConversationWithUUID:
presentDismissalAlertForActivitySessionWithUUID:onConversationWithUUID:
setUsingAirplay:onActivitySession:onConversationWithUUID:
sendMessage:forConversation:withActivitySession:
sendMessage:forConversation:withActivitySession:additionalOptions:
setAutoSharePlayEnabled:
launchApplicationForActivitySessionUUID:completionHandler:
launchApplicationForActivitySessionUUID:forceBackground:completionHandler:
handleConversation:participantUpdateMessage:fromNormalizedHandle:
handleConversation:registerMessagesGroupUUIDMessage:fromNormalizedHandle:
handleConversation:removeActivitySession:fromHandle:
handleConversation:updateActivity:fromHandle:
handleConversation:addHighlight:fromHandle:
handleConversation:removeHighlight:fromHandle:
handleConversation:updateActivityImage:fromHandle:
handleConversation:receivedEndorsementForMember:fromHandle:
handleConversation:receivedActivitySession:fromHandle:
handleConversation:updateGuestMode:fromHandle:
setAdditionalVideoRepresentation:conversationUUID:
processUpdatedNickname:forHandle:conversationUUID:
setAudioEnabled:forRemoteParticipantWithIdentifier:conversationUUID:
setVideoEnabled:forRemoteParticipantWithIdentifier:conversationUUID:
updateLocalMemberNickname:conversationUUID:
getLatestRemoteScreenShareAttributesWithCompletionHandler:
getActiveLinksWithCreatedOnly:completionHandler:
generateLinkForConversationUUID:completionHandler:
_getActivatedLinkWithHandle:updateGroupUUID:updateInvitedHandles:
setConversationLink:forConversation:replyToCompletionHandler:
generateLinkWithInvitedMemberHandles:linkLifetimeScope:completionHandler:
addInvitedMemberHandles:toConversationLink:completionHandler:
invalidateLink:completionHandler:
renewLink:expirationDate:reason:completionHandler:
checkLinkValidity:completionHandler:
generateAllInactiveLinks
getInactiveLinkWithCompletionHandler:
activateLink:completionHandler:
setLinkName:forConversationLink:completionHandler:
scheduleConversationLinkCheckInInitial:
recoverLinksForPseudonyms:
linkSyncStateIncludeLinks:WithCompletion:
approvePendingMember:forConversationUUID:
rejectPendingMember:forConversationUUID:
setIgnoreLetMeInRequests:forConversationUUID:
fetchUpcomingNoticeWithCompletionHandler:
activateConversationNoticeWithActionURL:bundleIdentifier:
removeConversationNoticeWithUUID:
setMessagesGroupName:onConversationWithUUID:
removeNonIndefiniteLinks
removeConversationWithUUID:
setLocalParticipantAudioVideoMode:forConversationUUID:
registerMessagesGroupUUIDForConversationUUID:
setupPendingConversationCleanupTimer
cleanupExpiredPendingConversations
_runCallbackIfNecessaryForMessage:
processProxiedMessage:fromID:context:
processProxiedResource:metadata:fromID:context:
processProxiedGroupUpdate:
_service:account:incomingData:fromID:context:attemptCount:
sanitizeAndProcessParticipantUpdate:context:
processGroupSessionParticipantUpdate:context:
processJoinUpdate:fromHandle:senderCorrelationIdentifier:
pushTokenForSelf
processUpdateMembersUpdate:fromHandle:
processParticipantDataUpdate:fromHandle:
handleParticipants:joinedConversationWithUpdate:joinContext:fromHandle:
handleParticipantWithIdentifier:leftConversationWithGroupUUID:fromHandle:
removePendingMemberMatchingActiveParticipant:conversation:
prepareAdditionOfActiveParticipant:toInvitedMembersForLinkOnConversation:
pickInitiatorFromParticipants:forUpdate:
handleRemovedLinkDescriptors:
_sendDelegationMessageTo:conversation:link:transactionUUID:forMember:withMessage:
pendingMembershipTracker
setPendingMembershipTracker:
mutableConversationsByUUID
mutablePendingConversationsByPseudonym
mutablePseudonymsByCallUUID
mutablePseudonymsByRequestIdentifiers
mutableSendDataCallbacksByRequestIdentifiers
mutableConversationsRequestingUpgrade
pendingConversationCleanupTimer
setPendingConversationCleanupTimer:
delegateToQueue
setDelegateToQueue:
observerToQueue
setObserverToQueue:
screenSharingActivityManager
persistenceController
lockStateObserver
setCallProviderManager:
linkManager
setLinkManager:
reportingController
conversationNoticeManger
invitationResolver
setInvitationResolver:
screenCaptureQueue
voucherManager
setVoucherManager:
participantUpdateSanitizer
setParticipantUpdateSanitizer:
groupSessionProviderCreationBlock
setGroupSessionProviderCreationBlock:
setDeviceSupport:
conversationCreationBlock
setConversationCreationBlock:
sendDataBlock
setSendDataBlock:
setConversationProviderManager:
activeLocalHandles
setActiveLocalHandles:
activeLocalHandlesForProvider
setActiveLocalHandlesForProvider:
localCallerID
setLocalCallerID:
localCallerIDForProvider
setLocalCallerIDForProvider:
imageTranscoder
setImageTranscoder:
cpApplicationController
setActivityAuthorizationManager:
messageProxy
setMessageProxy:
_pendingMembershipTracker
_mutableConversationsByUUID
_mutablePendingConversationsByPseudonym
_mutablePseudonymsByCallUUID
_mutablePseudonymsByRequestIdentifiers
_mutableSendDataCallbacksByRequestIdentifiers
_mutableConversationsRequestingUpgrade
_pendingConversationCleanupTimer
_delegateToQueue
_observerToQueue
_screenSharingActivityManager
_persistenceController
_lockStateObserver
_linkManager
_reportingController
_conversationNoticeManger
_invitationResolver
_screenCaptureQueue
_voucherManager
_participantUpdateSanitizer
_groupSessionProviderCreationBlock
_deviceSupport
_conversationCreationBlock
_sendDataBlock
_activeLocalHandles
_activeLocalHandlesForProvider
_localCallerID
_localCallerIDForProvider
_imageTranscoder
_cpApplicationController
_activityAuthorizationManager
_messageProxy
T@"CSDPendingMembershipTracker",&,N,V_pendingMembershipTracker
T@"NSMutableDictionary",R,N,V_mutableConversationsByUUID
T@"NSMutableDictionary",R,N,V_mutablePendingConversationsByPseudonym
T@"NSMutableDictionary",R,N,V_mutablePseudonymsByCallUUID
T@"NSMutableDictionary",R,N,V_mutablePseudonymsByRequestIdentifiers
T@"NSMutableDictionary",R,N,V_mutableSendDataCallbacksByRequestIdentifiers
T@"NSMutableSet",R,N,V_mutableConversationsRequestingUpgrade
T@"NSObject<OS_dispatch_source>",&,N,V_pendingConversationCleanupTimer
T@"NSMapTable",&,N,V_delegateToQueue
T@"NSMapTable",&,N,V_observerToQueue
T@"CSDScreenSharingActivityManager",R,N,V_screenSharingActivityManager
T@"CSDConversationPersistenceController",R,N,V_persistenceController
T@"CSDDeviceLockStateObserver",R,N,V_lockStateObserver
T@"TUCallProviderManager",&,N,V_callProviderManager
T@"CSDConversationLinkManager",&,N,V_linkManager
T@"CSDReportingController",R,N,V_reportingController
T@"CSDConversationNoticeManager",R,N,V_conversationNoticeManger
T@"CSDSharedConversationServerBag",&,N,V_serverBag
T@"<CSDConversationInvitationResolving>",&,N,V_invitationResolver
T@"NSMutableDictionary",R,N,V_screenCaptureQueue
T@"<CSDVoucherManager>",&,N,V_voucherManager
T@"<CSDParticipantUpdateSanitizer>",&,N,V_participantUpdateSanitizer
T@"CSDIDSService",&,N,V_service
T@?,C,N,V_groupSessionProviderCreationBlock
T@"FTDeviceSupport",&,N,V_deviceSupport
T@?,C,N,V_conversationCreationBlock
T@?,C,N,V_sendDataBlock
T@"CSDConversationProviderManager",&,N,V_conversationProviderManager
T@?,C,N,V_activeLocalHandles
T@?,C,N,V_activeLocalHandlesForProvider
T@?,C,N,V_localCallerID
T@?,C,N,V_localCallerIDForProvider
T@"CSDSecureImageTranscoder",&,N,V_imageTranscoder
T@"CPApplicationController",R,N,V_cpApplicationController
T@"CPActivityAuthorizationManager",&,N,V_activityAuthorizationManager
T@"<CSDConduitIDSProxy>",W,N,V_messageProxy
sharePlayAvailable
TB,R,N,GisSharePlayAvailable
screenSharingAvailable
TB,R,N,GisScreenSharingAvailable
hasTokenPrefixedURI
hasUnsafeData
hasEncryptedData
tokenPrefixedURI
setTokenPrefixedURI:
unsafeData
setUnsafeData:
encryptedData
setEncryptedData:
_encryptedData
_tokenPrefixedURI
_unsafeData
T@"NSString",&,N,V_tokenPrefixedURI
T@"NSData",&,N,V_unsafeData
T@"NSData",&,N,V_encryptedData
initWithCall:
predicateForFilteringOutFaceTimeAudioCalls
localParticipantUUID
setLocalParticipantUUID:
outgoingLocalParticipantUUID
setOutgoingLocalParticipantUUID:
csd_hasVoIPBackgroundMode
csd_hasVoIPNetworkExtensionEntitlement
csd_applicationRecordForBundleIdentifier:
executableURL
T@"NSString",R
T@"NSURL",R
setProtoWantsVideo:
setHasProtoWantsVideo:
hasProtoWantsVideo
setOBSOLETEProtoMomentsAvailable:
setHasOBSOLETEProtoMomentsAvailable:
hasOBSOLETEProtoMomentsAvailable
setProtoSenderMuteUplink:
setHasProtoSenderMuteUplink:
hasProtoSenderMuteUplink
setProtoShouldSuppressInCallUI:
setHasProtoShouldSuppressInCallUI:
hasProtoShouldSuppressInCallUI
setProtoMomentsV2Available:
setHasProtoMomentsV2Available:
hasProtoMomentsV2Available
hasProtoUpgradeSessionUUID
protoWantsVideo
oBSOLETEProtoMomentsAvailable
protoSenderMuteUplink
protoShouldSuppressInCallUI
protoMomentsV2Available
protoUpgradeSessionUUID
setProtoUpgradeSessionUUID:
_protoUpgradeSessionUUID
_oBSOLETEProtoMomentsAvailable
_protoMomentsV2Available
_protoSenderMuteUplink
_protoShouldSuppressInCallUI
_protoWantsVideo
TB,N,V_protoWantsVideo
TB,N,V_oBSOLETEProtoMomentsAvailable
TB,N,V_protoSenderMuteUplink
TB,N,V_protoShouldSuppressInCallUI
TB,N,V_protoMomentsV2Available
T@"NSString",&,N,V_protoUpgradeSessionUUID
initWithCallCapabilitiesState:
initWithCategory:mode:
preferredRoute
preferredAndActiveRoute
isReceiverRouteAvailable
isSpeakerRouteAvailable
isWirelessHeadsetRouteAvailable
isAirTunesRouteAvailable
isCarAudioRouteAvailable
isBluetoothRouteAvailable
isAnyRouteAvailableWithBluetoothEndpointType:
isAnyRouteAvailableWithUniqueIdentifier:
isAnyPreferredRouteAvailableAndActive
isInEarAudioRouteAvailable
enumerateRoutesInvokingBlock:forRoutesPassingTest:
_routePassingTest:
_anyRoutePassesTest:
updatePickableRoutes
_setRoutesFromRouteDictionaries:
category
setCategory:
mode
setMode:
_category
_mode
T@"NSString",&,N,V_category
T@"NSString",&,N,V_mode
T@"NSArray",C,N,V_routes
receiverRouteAvailable
TB,R,N,GisReceiverRouteAvailable
speakerRouteAvailable
TB,R,N,GisSpeakerRouteAvailable
wirelessHeadsetAvailable
TB,R,N,GisWirelessHeadsetRouteAvailable
airTunesRouteAvailable
TB,R,N,GisAirTunesRouteAvailable
carAudioRouteAvailable
TB,R,N,GisCarAudioRouteAvailable
bluetoothRouteAvailable
TB,R,N,GisBluetoothRouteAvailable
T@"TURoute",R,N
inEarAudioRouteAvailable
TB,R,N,GisInEarAudioRouteAvailable
hasApplicationContext
hasBundleIdentifier
hasActivityIdentifier
hasMetadata
hasActivityContext
setUpdatedDateEpochTime:
setHasUpdatedDateEpochTime:
hasUpdatedDateEpochTime
hasFallbackApplicationName
hasActivityMetadata
setIsSystemActivity:
setHasIsSystemActivity:
hasIsSystemActivity
setTimestampAsTimeIntervalSinceReferenceDate:
setHasTimestampAsTimeIntervalSinceReferenceDate:
hasTimestampAsTimeIntervalSinceReferenceDate
hasFromHandle
applicationContext
setApplicationContext:
setBundleIdentifier:
activityIdentifier
setActivityIdentifier:
metadata
setMetadata:
activityContext
setActivityContext:
updatedDateEpochTime
fallbackApplicationName
setFallbackApplicationName:
activityMetadata
setActivityMetadata:
isSystemActivity
timestampAsTimeIntervalSinceReferenceDate
fromHandle
setFromHandle:
_timestampAsTimeIntervalSinceReferenceDate
_updatedDateEpochTime
_activityContext
_activityIdentifier
_activityMetadata
_applicationContext
_fallbackApplicationName
_fromHandle
_metadata
_isSystemActivity
T@"NSData",&,N,V_applicationContext
T@"NSString",&,N,V_bundleIdentifier
T@"NSString",&,N,V_activityIdentifier
T@"NSData",&,N,V_metadata
T@"CSDMessagingConversationActivityContext",&,N,V_activityContext
Td,N,V_updatedDateEpochTime
T@"NSString",&,N,V_fallbackApplicationName
T@"CSDMessagingConversationActivityMetadata",&,N,V_activityMetadata
TB,N,V_isSystemActivity
Td,N,V_timestampAsTimeIntervalSinceReferenceDate
T@"CSDMessagingHandle",&,N,V_fromHandle
handleType
setHandleType:
setHasHandleType:
hasHandleType
handleTypeAsString:
StringAsHandleType:
setNotificationStyles:
setHasNotificationStyles:
hasNotificationStyles
notificationStyles
_handleType
_notificationStyles
Ti,N,V_handleType
TI,N,V_notificationStyles
setFaceTimeAudioAvailable:
setHasFaceTimeAudioAvailable:
hasFaceTimeAudioAvailable
setFaceTimeVideoAvailable:
setHasFaceTimeVideoAvailable:
hasFaceTimeVideoAvailable
_faceTimeAudioAvailable
_faceTimeVideoAvailable
TB,N,V_faceTimeAudioAvailable
TB,N,V_faceTimeVideoAvailable
status
setStatus:
isConferenced
setConferenced:
updateRelayCall:
isEqualToCall:
conferenced
TB,N,GisConferenced
TB,N,GisOutgoing
T@"NSDate",&,N
acquireProcessAssertionForBundleIdentifier:
acquireProcessAssertionForBundleIdentifier:completion:
invalidateProcessAssertionForBundleIdentifier:
invalidateProcessAssertionForBundleIdentifier:completion:
processAssertions
setProcessAssertions:
_processAssertions
T@"NSCountedSet",&,N,V_processAssertions
initWithDataSource:deviceLockObserver:callCenterObserver:callDirectoryStoreBuilder:queue:
_callFilterBlock
_doNotDisturbAllowsCallFromSourceAddress:providerIdentifier:
callDirectoryAllowsCallFromSourceAddress:
callDirectoryAllowsCallFromSourceAddress:countryCode:
_callDirectoryPhoneNumberVariantsForSourceAddress:countryCode:
isOnEmergencyCall
setOnEmergencyCall:
twoTimeCallthroughInterval
setTwoTimeCallthroughInterval:
callDirectoryStore
setCallDirectoryStore:
emergencyProviderIdentifier
callDirectorySanitizer
_onEmergencyCall
_twoTimeCallthroughInterval
_callDirectoryStore
_emergencyProviderIdentifier
_callDirectorySanitizer
T@"CSDIncomingCallFilterDataSource",&,N,V_dataSource
onEmergencyCall
TB,N,GisOnEmergencyCall,V_onEmergencyCall
T@"NSString",R,C,N,V_emergencyProviderIdentifier
T@"CXCallDirectorySanitizer",R,N,V_callDirectorySanitizer
T@"CXCallDirectoryStore",&,N,V_callDirectoryStore
Td,N,V_twoTimeCallthroughInterval
isSignedIntoiCloud
accountStore
_accountStore
T@"ACAccountStore",R,N,V_accountStore
signedIntoiCloud
TB,R,N,GisSignedIntoiCloud
_callHistoryChanged:
_addPendingCallToCallHistory:
_callConnected:
initWithCallCenterObserver:transactionManager:queue:
clearNotificationsIfNecessary
updateBytesOfDataUsed:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
_addCallToCallHistory:
_handleCallHistoryChanged
_conversationProviderForCall:
_canAddCallToCallHistory:
_callHistoryTransactionObjectWithIdentifier:
_endTransactionForObjectAfterCallHistoryDatabaseChanges:
_markReadRecentCallsMatchingHandle:
incomingCallFilter
transactionManager
recentsManager
transactionObjectsAwaitingCallHistory
cachedCalls
cachedCallUUIDsToConversationAVMode
_incomingCallFilter
_transactionManager
_recentsManager
_transactionObjectsAwaitingCallHistory
_cachedCalls
_cachedCallUUIDsToConversationAVMode
T@"<CSDTransactionManager>",R,N,V_transactionManager
T@"CHManager",R,N,V_recentsManager
T@"<CSDUserNotificationDelegate>",R,W,N,V_delegate
T@"NSMutableArray",R,N,V_transactionObjectsAwaitingCallHistory
T@"NSMutableDictionary",R,N,V_cachedCalls
T@"NSMutableDictionary",R,N,V_cachedCallUUIDsToConversationAVMode
T@"CSDIncomingCallFilter",R,N,V_incomingCallFilter
hasGeneratorID
setGeneratorVersion:
setHasGeneratorVersion:
hasGeneratorVersion
generatorID
setGeneratorID:
generatorVersion
_generatorID
_generatorVersion
T@"NSString",&,N,V_generatorID
TI,N,V_generatorVersion
_updateSessionPreferences
isWiFiAllowed
setWiFiAllowed:
isCellularDataAllowed
setCellularDataAllowed:
isCellularDataPreferred
setCellularDataPreferred:
preferences
_preferences
T@"<CSDIDSSessionProvider>",R,N,V_sessionProvider
T@"NSMutableDictionary",R,N,V_preferences
wiFiAllowed
TB,N,GisWiFiAllowed
cellularDataAllowed
TB,N,GisCellularDataAllowed
cellularDataPreferred
TB,N,GisCellularDataPreferred
contactIdentifiersType
hasName
hasProtoPersonNameComponents
hasSuggestedName
hasLabel
hasCompanyName
hasMapName
hasLocation
hasContactName
hasContactLabel
hasCallDirectoryLabel
hasCallDirectoryLocalizedExtensionContainingAppName
hasCallDirectoryExtensionIdentifier
clearContactIdentifiers
addContactIdentifiers:
contactIdentifiersCount
contactIdentifiersAtIndex:
setName:
protoPersonNameComponents
setProtoPersonNameComponents:
suggestedName
setSuggestedName:
label
setLabel:
companyName
setCompanyName:
mapName
setMapName:
location
setLocation:
contactName
setContactName:
contactLabel
setContactLabel:
callDirectoryLabel
setCallDirectoryLabel:
callDirectoryLocalizedExtensionContainingAppName
setCallDirectoryLocalizedExtensionContainingAppName:
callDirectoryExtensionIdentifier
setCallDirectoryExtensionIdentifier:
contactIdentifiers
setContactIdentifiers:
_callDirectoryExtensionIdentifier
_callDirectoryLabel
_callDirectoryLocalizedExtensionContainingAppName
_companyName
_contactIdentifiers
_contactLabel
_contactName
_label
_location
_mapName
_name
_protoPersonNameComponents
_suggestedName
T@"NSString",&,N,V_name
T@"CSDMessagingPersonNameComponents",&,N,V_protoPersonNameComponents
T@"NSString",&,N,V_suggestedName
T@"NSString",&,N,V_label
T@"NSString",&,N,V_companyName
T@"NSString",&,N,V_mapName
T@"NSString",&,N,V_location
T@"NSString",&,N,V_contactName
T@"NSString",&,N,V_contactLabel
T@"NSString",&,N,V_callDirectoryLabel
T@"NSString",&,N,V_callDirectoryLocalizedExtensionContainingAppName
T@"NSString",&,N,V_callDirectoryExtensionIdentifier
T@"NSMutableArray",&,N,V_contactIdentifiers
bestAppSuggestionMayHaveChanged
bestAppSuggestionChanged:
bestAppSuggestionChanged:withAdditionalSuggestions:
connectionInterrupted
currentlyBroadcastedActivity
queuedActivitiesOfType:
broadcastActivity:
broadcastActivity:withTimeout:
broadcastActivity:withTimeout:shouldPrioritize:
stopBroadcastingActivity:
listenForActivityType:dynamicIdentifier:
stopListeningForActivityType:dynamicIdentifier:
stopListeningForActivityType:matchingDynamicIdentifierSubstring:
_updateCurrentlyBroadcastedActivity
_broadcastActivity:withTimeout:shouldPrioritize:
_stopBroadcastingActivity:
_listenForActivityType:dynamicIdentifier:
_stopListeningForActivityType:dynamicIdentifier:
_stopListeningForActivityType:matchingDynamicIdentifierSubstring:
_stopListeningForBestAppSuggestionIfAppropriate
_trackListenedActivityType:dynamicIdentifier:
_untrackListenedActivityType:dynamicIdentifier:
_untrackListenedActivityType:matchingDynamicIdentifierSubstring:
activityQueue
setActivityQueue:
setCurrentlyBroadcastedActivity:
bestAppSuggestionManager
setBestAppSuggestionManager:
mostRecentBestAppSuggestion
setMostRecentBestAppSuggestion:
listeningIdentifiersByActivityType
setListeningIdentifiersByActivityType:
_activityQueue
_currentlyBroadcastedActivity
_bestAppSuggestionManager
_mostRecentBestAppSuggestion
_listeningIdentifiersByActivityType
T@"NSMutableOrderedSet",&,N,V_activityQueue
T@"CSDUserActivity",&,N,V_currentlyBroadcastedActivity
T@"UABestAppSuggestionManager",&,N,V_bestAppSuggestionManager
T@"UABestAppSuggestion",&,N,V_mostRecentBestAppSuggestion
T@"NSMutableDictionary",&,N,V_listeningIdentifiersByActivityType
T@"<CSDUserActivityCommunicatorDelegate>",W,N,V_delegate
perform
migrateAnnounceCalls
migrateConversationLinkBaseURL
T@"TUUserConfiguration",R,N,V_userConfiguration
sessionProviderDidTerminate:
sessionProvider:didJoinGroupWithParticipantIdentifiers:localParticipantIdentifier:error:
sessionProvider:didLeaveGroupWithError:
sessionProvider:didReceiveActiveParticipants:success:
sessionProvider:didReceiveActiveLightweightParticipants:success:
sessionProvider:didReceiveReport:
sessionProvider:didReceiveKickedParticipantIDs:withCode:withType:isTruncated:
sessionProvider:didRegisterPluginAllocationInfo:
sessionProvider:didUnregisterPluginAllocationInfo:
sessionProviderDidReceiveKeyUpdate:
sessionProvider:didReceiveLocalParticipantType:error:
sessionProvider:didReceiveDataBlob:forParticipant:
initWithGroupSessionProvider:featureFlags:
initWithGroupSessionProvider:
idsDestination
joinUsingContext:localParticipantAVCData:members:otherInvitedHandles:participantDestinationIDs:link:report:stagedActivitySession:
removeMembers:fromExistingMembers:activeParticipants:triggeredLocally:
addMembers:toExistingMembers:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:requiredCapabilities:messagesGroupUUID:messagesGroupName:addingFromLetMeIn:triggeredLocally:highlightIdentifier:stagedActivitySession:avMode:
addMembers:toExistingMembers:participantDestinationIDs:webDestinationIDs:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:
sendLocalParticipantData:
allowMember:
setParticipantType:forLocalConversationParticipant:
setParticipantType:forRemoteConversationMemberDestinations:
idsDestinationForActiveParticipant:
callTypeForJoinContext:
isJoined
setJoined:
setLocalParticipantIdentifier:
localParticipantType
setLocalParticipantType:
retryCount
setRetryCount:
lightweightRetryCount
setLightweightRetryCount:
_joined
_localParticipantType
_localParticipantIdentifier
_retryCount
_lightweightRetryCount
T@"<CSDIDSGroupSessionProvider>",R,N,V_sessionProvider
joined
TB,N,GisJoined,V_joined
TQ,N,V_localParticipantIdentifier
TS,N,V_localParticipantType
TQ,N,V_retryCount
TQ,N,V_lightweightRetryCount
T@"<CSDIDSGroupSessionDelegate>",W,N,V_delegate
handleRoutesByUniqueIdentifierUpdated:
_handleCallStatusChangedNotification:
_handleCSDRelayIDSActiveAccountsChanged:
_handleCSDRelayPairedDeviceConnectedNotification:
_handlePreferredRouteChangedNotification:
_handleCallStartedOutgoingNotification:
_handleCallStartedConnectingNotification:
_handleCallConnectedNotification:
_handleNeedsManualInCallSoundsChangedNotification:
_handleCallWantsHoldMusicChangedNotification:
_handleCallShouldSuppressRingtoneChangedNotification:
_handleCallModelChangedNotification:
_handleResetCallStateNotification:
_handleHardPauseStateChangedNotification:
_handleCallIsUsingBasebandChangedNotification:
_handleInvitationSentNotification:
_handleCallDisplayContextChangedNotification:
_handleUpdateRemoteUplinkMutedChangedNotification:
_handleTUCallSupportsTTYWithVoiceChangedNotification:
_handleTUCallTTYTypeChangedNotification:
_handleMixesVoiceWithMediaChangedNotification:
_handleFailureExpectedChangedNotification:
_handleSupportsEmergencyFallbackChangedNotification:
_handleCarPlayControlEventNotification:
_handleAudioSessionInterruptionNotification:
handleFrequencyChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
handleMeterLevelChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
resetCallProvisionalStates
answerCallWithRequest:
holdCallWithUniqueProxyIdentifier:
unholdCallWithUniqueProxyIdentifier:
requestVideoUpgradeForCallWithUniqueProxyIdentifier:
disconnectCallWithUniqueProxyIdentifier:
groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:
ungroupCallWithUniqueProxyIdentifier:
swapCalls
playDTMFToneForCallWithUniqueProxyIdentifier:key:
disconnectCurrentCallAndActivateHeld
disconnectAllCalls
setTTYType:forCallWithUniqueProxyIdentifier:
pullRelayingCallsFromClient
pushRelayingCallsToHostWithSourceIdentifier:
pushHostedCallsToDestination:
pullHostedCallsFromPairedHostDevice
sendHardPauseDigitsForCallWithUniqueProxyIdentifier:
updateCallWithProxy:
enteredForegroundForCallWithUniqueProxyIdentifier:
willEnterBackgroundForAllCalls
enteredBackgroundForAllCalls
setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:
setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:
sendMMIOrUSSDCodeWithRequest:
setUplinkMuted:forCallWithUniqueProxyIdentifier:
setDownlinkMuted:forCallWithUniqueProxyIdentifier:
setIsSendingVideo:forCallWithUniqueProxyIdentifier:
setMixesVoiceWithMedia:forCallWithUniqueProxyIdentifier:
setSharingScreen:forCallWithUniqueProxyIdentifier:
setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:
setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:
setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:
shouldSuppressInCallStatusBar:
shouldAllowRingingCallStatusIndicator:
activateInCallUIWithActivityContinuationIdentifier:
sendUserScoreToRTCReporting:withScore:
requestInitialState:
dialWithRequest:reply:
pullCallFromClientUsingHandoffActivityUserInfo:reply:
reportLocalPreviewStoppedForCallWithUniqueProxyIdentifier:
setClientCapabilities:
setCurrentAudioInputDeviceToDeviceWithUID:
setCurrentAudioOutputDeviceToDeviceWithUID:
localRoutesByUniqueIdentifier:
pairedHostDeviceRoutesByUniqueIdentifier:
pickLocalRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
pickPairedHostDeviceRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
willRestrictAddresses:forBundleIdentifier:reply:
containsRestrictedHandle:forBundleIdentifier:performSynchronously:reply:
shouldRestrictAddresses:forBundleIdentifier:performSynchronously:reply:
filterStatusForAddresses:forBundleIdentifier:reply:
policyForAddresses:forBundleIdentifier:reply:
isUnknownAddress:normalizedAddress:forBundleIdentifier:reply:
messagingConnectionEndedForCalls:didStartConnecting:
messagingConnectionFailedForCalls:didStartConnecting:
messagingConnectionCouldNotEstablishLinkForCalls:didStartConnecting:
propertiesChangedForCall:
registerForSecureMicEvents
shouldHandleSecureMicrophoneEvents
callFilterController
shouldRelayToOtherDevices
_handleRelayCallingChanged
_requestCallStateFromHost
shouldHandleCarPlayControlEvents
_answerIncomingCall:withBehavior:
_answerIncomingCallAsConversation:
_launchInCallApplicationForIncomingCallIfNecessary:
_launchInCallApplicationForOutgoingConversationIfNecessary:
_launchInCallApplicationForOutgoingCallIfNecessary:
_launchInCallApplicationForExistingCall
_endProxyCallsForConnectingVideoCall
updateClientsWithCall:
eligibleCallsByFilteringCalls:forClient:
isCallEligible:forClient:
updateClientsWithFrequency:inDirection:forCalls:
updateClientsWithMeterLevel:inDirection:forCalls:
resetClientCallProvisionalStates
sendClientsNotificationName:
sendClientsNotificationName:forCall:
sendClientsNotificationName:forCall:userInfo:
_handleFaceTimeAvailabilityChangedNotification:
_nonRingingCallExistsOnThisDevice
_handleRingingCallStatusChangeForHostedCall:
_handleSendingCallStatusChangeForHostedCall:
_handleConnectingCallStatusChangeForHostedCall:
_handleConnectedCallStatusChangeForHostedCall:
_handleActiveCallStatusChangeForHostedCall:
_handleHeldCallStatusChangeForHostedCall:
_handleDisconnectedCallStatusChangeForVoicemailCall
_updateRoutesForDisconnectedCall
_handleDisconnectedCallStatusChangeForHostedCall:
_updateBluetoothAudioFormatIfNecessaryDueToMVMChange:
outgoingCallFromDialRequest:
setCallDelegatesIfNeeded:
performDialCall:displayContext:
performJoinConversation:
performHoldCall:
performUnholdCall:
performGroupCall:withCall:
performUngroupCall:
performSwapCalls
performAnswerCall:withRequest:
callWithUniqueProxyIdentifier:fromCallsToAnswer:
performEndActiveAndAnswerCall:withRequest:
performEndHeldAndAnswerCall:withRequest:
performHoldActiveAndAnswerCall:withRequest:
performAnswerCallAsVideoUpgrade:withRequest:
performAnswerCallAsAudioDowngrade:withRequest:
performDisconnectCall:
performDisconnectCurrentCallAndActivateHeld
performDisconnectAllCalls
performPullRelayingCallsFromClientAndUpdateEndpoint:updateExpectedDestination:
performSendMMIOrUSSDCodeWithRequest:
performPlayDTMFToneForCall:key:
performSetTTYType:forCall:
performSetUplinkMuted:forCall:
performPullCallFromClientUsingHandoffActivityUserInfo:completion:
performPushRelayingCallsToHostWithSourceIdentifier:
performPushHostedCallsToDestination:
performPullHostedCallsFromPairedHostDevice
performUpdateCallWithProxy:
_handleMessagingConnectionEndForCalls:withDisconnectedReason:didStartConnecting:
_dial:displayContext:completion:
currentProxyCalls
callForClient:usingCall:
currentCallsForClient:
isTrackingVoIPCallForBundleIdentifier:
updateAudioArbitration
isInCallUIActive
recentsController
audioArbitrationController
setAudioArbitrationController:
localRouteController
pairedHostDeviceRouteController
currentlyTrackedA2DPRouteIdentifier
setCurrentlyTrackedA2DPRouteIdentifier:
callHistoryManagerXPCServer
callProviderManagerXPCServer
relayCallDataSource
relayCallDelegate
carPlayHardwareControlsBroadcaster
carPlayManager
clientInvalidationHandler
setClientInvalidationHandler:
providerCallDataSource
setShouldHandleSecureMicrophoneEvents:
_callController
_recentsController
_audioArbitrationController
_localRouteController
_pairedHostDeviceRouteController
_currentlyTrackedA2DPRouteIdentifier
_callHistoryManagerXPCServer
_callProviderManagerXPCServer
_relayCallDataSource
_relayCallDelegate
_carPlayHardwareControlsBroadcaster
_carPlayManager
_clientInvalidationHandler
_providerCallDataSource
_shouldHandleSecureMicrophoneEvents
T@"NSString",C,N,V_currentlyTrackedA2DPRouteIdentifier
T@"CSDCallHistoryManagerXPCServer",R,N,V_callHistoryManagerXPCServer
T@"CSDCallProviderManagerXPCServer",R,N,V_callProviderManagerXPCServer
T@"CSDRelayCallDataSource",R,N,V_relayCallDataSource
T@"CSDRelayCallDelegate",R,N,V_relayCallDelegate
T@"TUCarPlayHardwareControlsBroadcaster",R,N,V_carPlayHardwareControlsBroadcaster
T@"CSDCarPlayManager",R,N,V_carPlayManager
T@?,C,N,V_clientInvalidationHandler
T@"CSDProviderCallDataSource",R,N,V_providerCallDataSource
T@"NSNumber",&,N,V_shouldHandleSecureMicrophoneEvents
T@"CSDCallProviderManager",R,N,V_callProviderManager
T@"CSDCallController",R,N,V_callController
T@"CSDCallFilterController",R,N
T@"CSDRecentsController",R,N,V_recentsController
T@"CSDAudioArbitrationController",&,N,V_audioArbitrationController
T@"CSDRouteController",R,N,V_localRouteController
T@"CSDRouteController",R,N,V_pairedHostDeviceRouteController
T@"TUCallCenter",R,N
performBlockAfterFirstUnlock:
initWithNotifyObserver:queue:
_refreshHasBeenUnlocked
_handleDeviceFirstUnlockNotification
hasBeenUnlockedBlock
setHasBeenUnlockedBlock:
firstUnlockCallbacks
setFirstUnlockCallbacks:
hasBeenUnlocked
setHasBeenUnlocked:
notifyObserver
setNotifyObserver:
_hasBeenUnlocked
_hasBeenUnlockedBlock
_firstUnlockCallbacks
_notifyObserver
T@"NSMutableArray",&,N,V_firstUnlockCallbacks
TB,N,V_hasBeenUnlocked
T@"<TUNotifyObserver>",&,N,V_notifyObserver
T@?,C,N,V_hasBeenUnlockedBlock
initWithCallDisplayContext:
T@"TUCallDisplayContext",R,N
isRunningForegroundForVoIPApplication:
addVoIPApplication:
removeVoIPApplication:
applicationStateForBundleIdentifier:
setApplicationState:forBundleIdentifier:
fetchApplicationStateForBundleIdentifier:
bundleIdentifierToApplicationState
applicationStateMonitor
_bundleIdentifierToApplicationState
_applicationStateMonitor
T@"NSMutableDictionary",R,N,V_bundleIdentifierToApplicationState
T@"BKSApplicationStateMonitor",R,N,V_applicationStateMonitor
registerVoIPNetworkExtension
voipRegister
voipUnregister
bundleIdFromTopic:
topicFromBundleId:forType:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
networkExtensionMessageControllerHost:didReceiveIncomingMessage:forBundleIdentifier:
notificationServiceExtensionHost:didReceiveIncomingMessage:forBundleIdentifier:reply:
noteReportedNewIncomingVoIPCallForBundleIdentifier:
handleApplicationUninstalledNotification:
_removeAllApplicationsFromKillCountsDictionary
_removeApplicationFromKillCountsDictionary:
_incrementKillCountForApplication:
_isApplicationPreventedFromBeingLaunched:
_appHasOngoingCall:
_findOrCreateApplicationWithBundleIdentifier:
_pruneUninstalledAppPushTopics
_pruneUninstalledAppPushTopicsForConnection:
_apsConnectionForEnvironment:
_createAPSConnectionForEnvironment:namedDelegatePort:
_registerNetworkExtensionApplicationWithBundleIdentifier:client:
_registerForPushTokenWithType:client:
_unregisterForPushTokenWithType:client:
_registerPushApplicationWithBundleIdentifier:client:environment:pushType:
_unregisterPushApplication:inEnvironment:pushType:destroyApp:
_removeTopic:fromConnection:
addOutstandingMessage:forBundleIdentifier:
containsAnyOutstandingMessageForBundleIdentifier:
containsOutstandingMessage:forBundleIdentifier:
removeOutstandingMessagesForBundleIdentifier:
openApplicationWithBundleIdentifier:message:
networkExtensionClientManager
setNetworkExtensionClientManager:
pushKitClientManager
setPushKitClientManager:
productionConnection
setProductionConnection:
developmentConnection
setDevelopmentConnection:
networkExtensionMessageHost
nseMessageHost
bundleIdentifierToVoIPApplication
setBundleIdentifierToVoIPApplication:
outstandingMessages
_networkExtensionClientManager
_pushKitClientManager
_productionConnection
_developmentConnection
_networkExtensionMessageHost
_nseMessageHost
_bundleIdentifierToVoIPApplication
_outstandingMessages
T@"CSDClientManager",&,N,V_networkExtensionClientManager
T@"CSDClientManager",&,N,V_pushKitClientManager
T@"APSConnection",&,N,V_productionConnection
T@"APSConnection",&,N,V_developmentConnection
T@"CXNetworkExtensionMessageControllerHost",R,N,V_networkExtensionMessageHost
T@"CXNotificationServiceExtensionVoIPXPCHost",R,N,V_nseMessageHost
T@"NSMutableDictionary",&,N,V_bundleIdentifierToVoIPApplication
T@"CSDVoIPApplicationMonitor",R,N,V_applicationMonitor
T@"NSMutableDictionary",R,N,V_outstandingMessages
T@"CSDCallStateController",W,N,V_callStateController
initWithDelegate:queue:
fetchUpcomingNoticeFromQueue
T@"<CSDConversationNoticeDelegate>",R,W,N,V_delegate
T@"FBSOpenApplicationService",R,N,V_service
csd_isExpired
initWithIdentifier:handle:avcData:senderCorrelationIdentifier:
initWithIdentifier:handle:avcData:
initWithIDSDictionaryRepresentation:
tuConversationParticipant
idsDictionaryRepresentation
isEqualToParticipant:
setScreenEnabled:
audioVideoMode
setAudioVideoMode:
isLocalAccountHandle
setLocalAccountHandle:
streamToken
setStreamToken:
screenToken
setScreenToken:
setCaptionsToken:
audioPriority
setAudioPriority:
videoPriority
setVideoPriority:
isRemoteAudioEnabled
setRemoteAudioEnabled:
isRemoteVideoEnabled
setRemoteVideoEnabled:
activeIDSDestination
setActiveIDSDestination:
isPseudonym
senderCorrelationIdentifier
isGuestModeEnabled
_screenEnabled
_audioPaused
_localAccountHandle
_remoteAudioEnabled
_remoteVideoEnabled
_audioVideoMode
_additionalVideoRepresentation
_streamToken
_screenToken
_captionsToken
_audioPriority
_videoPriority
_activeIDSDestination
_senderCorrelationIdentifier
TQ,R,N,V_identifier
T@"TUHandle",R,C,N,V_handle
T@"NSData",R,C,N,V_avcData
TB,N,GisScreenEnabled,V_screenEnabled
TB,N,GisAudioPaused,V_audioPaused
T@"TUConversationParticipantCapabilities",C,N,V_capabilities
TQ,N,V_audioVideoMode
Tq,N,V_additionalVideoRepresentation
localAccountHandle
TB,N,GisLocalAccountHandle,V_localAccountHandle
Tq,N,V_streamToken
Tq,N,V_screenToken
Tq,N,V_captionsToken
Tq,N,V_audioPriority
Tq,N,V_videoPriority
T@"NSString",C,N,V_avcIdentifier
remoteAudioEnabled
TB,N,GisRemoteAudioEnabled,V_remoteAudioEnabled
remoteVideoEnabled
TB,N,GisRemoteVideoEnabled,V_remoteVideoEnabled
T@"NSString",C,N,V_activeIDSDestination
T@"TUConversationParticipant",R,C,N
T@"TUConversationParticipantAssociation",C,N,V_association
TB,R,N,GisPseudonym,V_pseudonym
T@"NSString",R,C,N,V_senderCorrelationIdentifier
TB,N,GisGuestModeEnabled,V_guestModeEnabled
dataSources
addCalls:forIdentifier:
callsForDataSource:identifier:
dataSourceToIdentifierToCalls
setDataSourceToIdentifierToCalls:
_dataSourceToIdentifierToCalls
T@"NSMapTable",&,N,V_dataSourceToIdentifierToCalls
initWithCallSource:configuration:
performBlock:
performBlock:coalescedByIdentifier:
isProcessSuspended
object
setObject:
supportsMessagesGroupProviding
setSupportsMessagesGroupProviding:
identifiersWithPendingCoalescingBlocks
setIdentifiersWithPendingCoalescingBlocks:
blockToExecuteAfterPendingCoalescingBlocksByIdentifier
setBlockToExecuteAfterPendingCoalescingBlocksByIdentifier:
processHandle
setProcessHandle:
_supportsMessagesGroupProviding
_object
_identifiersWithPendingCoalescingBlocks
_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
_processHandle
T@,&,N,V_object
T@"NSMutableSet",&,N,V_identifiersWithPendingCoalescingBlocks
T@"NSMutableDictionary",&,N,V_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
T@"RBSProcessHandle",&,N,V_processHandle
T@,R,N
remote
TB,R,N,GisRemote
T@"TUCallServicesClientCapabilities",&,N,V_capabilities
processSuspended
TB,R,N,GisProcessSuspended
TB,N,V_supportsMessagesGroupProviding
hasFallbackURL
setSupportsContinuationOnTV:
setHasSupportsContinuationOnTV:
hasSupportsContinuationOnTV
hasTitle
hasSubtitle
hasImage
setPreferredBroadcastingAttributes:
setHasPreferredBroadcastingAttributes:
hasPreferredBroadcastingAttributes
hasSceneAssociationBehavior
fallbackURL
setFallbackURL:
supportsContinuationOnTV
title
setTitle:
subtitle
setSubtitle:
image
setImage:
preferredBroadcastingAttributes
sceneAssociationBehavior
setSceneAssociationBehavior:
_fallbackURL
_image
_preferredBroadcastingAttributes
_sceneAssociationBehavior
_subtitle
_title
_supportsContinuationOnTV
T@"NSString",&,N,V_fallbackURL
TB,N,V_supportsContinuationOnTV
T@"NSString",&,N,V_title
T@"NSString",&,N,V_subtitle
T@"NSData",&,N,V_image
TI,N,V_preferredBroadcastingAttributes
T@"CSDMessagingConversationActivitySceneAssociationBehavior",&,N,V_sceneAssociationBehavior
tuSenderIdentity
T@"TUSenderIdentity",R,N
conversation:addedMembersLocally:
conversation:buzzedMember:
conversationUpdatedMessagesGroupPhoto:
updateIncomingPendingConversationsByGroupUUID:
updateActivatedConversationLinks:
updateConversationsByGroupUUID:
mediaPrioritiesChangedForConversation:
updateActivityAuthorizedBundleIdentifierState:
receivedTrackedPendingMember:forConversationLink:
remoteScreenShareAttributesChanged:isLocallySharing:
remoteScreenShareEndedWithReason:
sharePlayAvailableChanged:
screenSharingAvailableChanged:
updateConversationWithUUID:participantPresentationContexts:
getMessagesGroupDetailsForConversationUUID:completionHandler:
conversationsByGroupUUID:
incomingPendingConversationsByGroupUUID:
pseudonymsByCallUUID:
activityAuthorizedBundleIdentifierState:
activatedConversationLinks:
createActivitySession:onConversationWithUUID:
setActivityAuthorization:forBundleIdentifier:
setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:
refreshActiveConversations
getSharePlayAvailableWithCompletionHandler:
getScreenSharingAvailableWithCompletionHandler:
setScreenEnabled:withScreenShareAttributes:forConversationWithUUID:
initWithConversationManager:featureFlags:
_shouldSend:
_filter:withClient:
notifyClientsOfConversationsByGroupUUIDUpdate
_providersByIdentifierByFilteringForRemoteClientsFromProvidersByIdentifier:
relayCallingStateChangedForDataSource:
installedProvidersChangedForDataSource:
initWithDataSource:serialQueue:
initWithDataSource:serialQueue:featureFlags:
retrieveSavedProvidersByIdentifier
_updateProvidersByIdentifierAndNotify:
_unregisterUninstalledProvidersAndNotify:
uniqueRingtoneSoundLinkFilenameWithOriginalFilename:
_donateUserIntentForProviderWithIdentifier:
providersByIdentifierForRemoteClients:
localProvidersByIdentifierForRemoteClients:
pairedHostDeviceProvidersByIdentifierForRemoteClients:
registerLocalProvider:
registerPairedHostDeviceProviders:
validateUserIntentForCallSource:
launchAppForDialRequest:completion:
appShouldUseDeprecatedCallingIntents:
userIntentManager
localProvidersByIdentifier
pairedHostDeviceProvidersByIdentifier
providersByIdentifier
setProvidersByIdentifier:
_userIntentManager
_localProvidersByIdentifier
_pairedHostDeviceProvidersByIdentifier
_providersByIdentifier
T@"<CSDCallProviderManagerDataSource>",R,N,V_dataSource
T@"NSMutableDictionary",R,N,V_localProvidersByIdentifier
T@"NSMutableDictionary",R,N,V_pairedHostDeviceProvidersByIdentifier
T@"NSDictionary",C,N,V_providersByIdentifier
T@"CSDUserIntentManager",R,N,V_userIntentManager
initWithConversationManager:queue:invitationResolver:
setCallUUID:forConversationUUID:
cleanUpConversationIfNecessaryForConversationUUID:failureContext:
leaveConversationForCallUUID:endedReason:
leaveConversation:withCallUUID:reason:
callScreenShareAttributesForAction:
isWaitingForRemoteJoinForConversationUUID:
conversationUUIDsWaitingForRemoteJoin
setWaitingForRemoteJoin:forConversationUUID:
handleMessage:forConversation:fromHandle:withUpdate:
handleDeclineMessage:forConversation:fromHandle:withUpdate:
handleNicknameUpdateMessage:forConversation:fromHandle:withUpdate:
handleScreenShareMessage:forConversation:fromHandle:withUpdate:
handleReceivedVideoUpgradeMessage:forConversation:fromHandle:
handleUpgradeMessage:forConversation:fromHandle:withUpdate:
handleRemoveMembersMessage:forConversation:
handleInvitationMessage:forConversation:fromHandle:
handleInvitationMessageForLetMeIn:forConversation:pendingConversation:link:fromHandle:
handleRespondedElsewhereMessage:forConversation:fromHandle:withAliases:
handleRespondedElsewhereMessage:forConversation:fromHandle:
startOutgoingOneToOneTimeoutIfNecessary:
isUnansweredOutgoingOneToOneConversation:
declineRemoteDevicesForConversation:reason:
declineRemoteMembersForConversation:reason:
declineConversation:reason:destinations:
_failConversation:failureReason:providerEndedReason:
performJoinCallAction:
proceedToNewPendingConversationForLink:action:
_findPendingConversationWithCallUUID:
cleanupConversationWithCallUUID:
launchScreenSharingAppIfNecessary
conversationUUIDsUpgradedFromAVLess
shouldHandleProvider:
shouldHandleProviderWithIdentifier:
recentlyDeletedCallUUIDsByConversationUUID
_conversationUUIDsWaitingForRemoteJoin
_conversationUUIDsUpgradedFromAVLess
_recentlyDeletedCallUUIDsByConversationUUID
T@"NSMutableDictionary",R,N,V_recentlyDeletedCallUUIDsByConversationUUID
T@"NSMutableSet",R,N,V_conversationUUIDsWaitingForRemoteJoin
T@"NSMutableSet",R,N,V_conversationUUIDsUpgradedFromAVLess
handleWithTUHandle:
isRaiseToEarGestureSupported
isRaiseToEarGestureEnabled
isDetectingRaiseToAnswer
setDetectingRaiseToAnswer:
updateDetectingRaiseToAnswer
raiseToEarGestureManager
setRaiseToEarGestureManager:
raiseToEarGestureHandler
_raiseToEarGestureManager
_raiseToEarGestureHandler
T@"CMGestureManager",&,N,V_raiseToEarGestureManager
T@?,R,C,N,V_raiseToEarGestureHandler
detectingRaiseToAnswer
TB,N,GisDetectingRaiseToAnswer
tuHandlesWithHandles:
handlesWithTUHandles:
isProviderForeground:
csd_pseudonym
handleAnswerCallMessageFromClient:destination:device:
handleDialCallMessageFromClient:destination:device:completion:
handleDisconnectCallMessageFromClient:
handleHoldCallMessageFromClient:
handleUnholdCallMessageFromClient:
handleGroupCallMessageFromClient:
handleUngroupCallMessageFromClient:
handleSwapCallsMessageFromClient:
handleEndActiveAndAnswerMessageFromClient:
handleEndHeldAndAnswerMessageFromClient:
handleHoldActiveAndAnswerMessageFromClient:
handleDisconnectCurrentCallAndActivateHeldMessageFromClient:
handleDisconnectAllCallsMessageFromClient:
handleSendHardPauseDigitsMessageFromClient:
handleRequestCallContextMessageFromClient:
handlePullHostedCallsMessageFromClient:destination:completion:
handlePushRelayingCallsMessageFromClient:
handlePickRouteMessageFromClient:
pushHostedCallsForRemoteInviteDictionary:destination:completion:
_answerHostedCall:completionHandler:
_conferenceTransport:didStopForCall:cleanly:error:
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
appHistoryActivityWithTitle:subtitle:keywords:userInfo:
activityWithType:dynamicIdentifier:userInfo:
registerActivityType:dynamicIdentifier:
unregisterActivityType:dynamicIdentifier:
activityTypeSupportsDynamicIdentifierRegistration:
activityTypeRequiresBestAppSuggestionListener:
activityTypeForUserActivityTypeString:
_userActivityTypeStringForActivityType:
addUserInfoEntriesFromDictionary:
becomeCurrent
resignCurrent
userActivity
setUserActivity:
dynamicIdentifier
setDynamicIdentifier:
_userActivity
_dynamicIdentifier
T@"NSUserActivity",&,N,V_userActivity
T@"NSString",&,N,V_dynamicIdentifier
handleApplicationUnregisteredNotification:
dialAssistedDialRequestForDialRequest:
openUserActivity:usingApplicationWithBundleIdentifier:frontBoardOptions:completion:
isSymbolicLinkAtURL:
createLinkIfNecessaryWithFilename:toURL:
removeLinksForFilenamesNotInArray:
isProviderInstalled:
isRelayCallingGuaranteed
registeredLocalProvidersByIdentifier
setRegisteredLocalProvidersByIdentifier:
registeredPairedHostDeviceProvidersByIdentifier
setRegisteredPairedHostDeviceProvidersByIdentifier:
isDevicePasscodeLocked
providerIdentifiersForExistingCalls
T@"<CSDCallProviderManagerDataSourceDelegate>",W,N
relayCallingGuaranteed
TB,R,N,GisRelayCallingGuaranteed
devicePasscodeLocked
TB,R,N,GisDevicePasscodeLocked
_saveProviders:forPreferenceKey:
_providersForPreferenceKey:
ringtonesSandboxExtensionDirectory
setProviderIdentifiersForExistingCalls:
_ringtonesSandboxExtensionDirectory
_providerIdentifiersForExistingCalls
T@"CSDSandboxExtensionDirectory",R,N,V_ringtonesSandboxExtensionDirectory
T@"CSDCallCenterObserver",R,N,V_callCenterObserver
T@"NSSet",C,N,V_providerIdentifiersForExistingCalls
T@"<CSDCallProviderManagerDataSourceDelegate>",W,N,V_delegate
medianFromNumbers:
meanFromDoubleNumbers:
bucketedInteger:
initWithStreamToken:
registeredStreamWithAvailability:
didStartRequestWithTransactionID:
didReceiveResultsWithTransactionID:
didCleanUp
reportDataCollectionCompleteIfNecessary
fuzzyPhotoRequestFailureCount
fuzzyPhotoRequestSuccessCount
medianRequestDuration
meanRequestDuration
availability
setAvailability:
photoRequestSuccessCount
setPhotoRequestSuccessCount:
photoRequestFailureCount
setPhotoRequestFailureCount:
hasCleanedUp
setHasCleanedUp:
requestTimeoutBlockByTransactionID
requestStartDateByTransactionID
photoRequestDurations
_hasCleanedUp
_availability
_photoRequestSuccessCount
_photoRequestFailureCount
_requestTimeoutBlockByTransactionID
_requestStartDateByTransactionID
_photoRequestDurations
Ti,N,V_availability
TQ,N,V_photoRequestSuccessCount
TQ,N,V_photoRequestFailureCount
TB,N,V_hasCleanedUp
T@"NSMutableDictionary",R,N,V_requestTimeoutBlockByTransactionID
T@"NSMutableDictionary",R,N,V_requestStartDateByTransactionID
T@"NSMutableArray",R,N,V_photoRequestDurations
T@"<CSDMomentsReportingSessionDelegate>",W,N,V_delegate
Tq,R,N,V_streamToken
shouldTraceSingposts
trace:
remoteScreenEnabled
defaultConfiguration
defaultSessionMode
defaultScreenShareAttributes
mediaTypesAffectingAdditionalVideoRepresentation
avcScreenCaptureConfigurationForScreenAttributes:
participant:audioEnabled:didSucceed:error:
participant:videoEnabled:didSucceed:error:
participant:screenEnabled:didSucceed:error:
participant:remoteAudioEnabledDidChange:
participant:remoteVideoEnabledDidChange:
participant:remoteScreenEnabledDidChange:
participant:audioPaused:didSucceed:error:
participant:videoPaused:didSucceed:error:
participant:remoteAudioPausedDidChange:
participant:remoteVideoPausedDidChange:
participant:mediaPrioritiesDidChange:
participant:mediaStateDidChange:forMediaType:didSucceed:error:
participant:remoteMediaStateDidChange:forMediaType:
participant:spatialAudioSourceIDDidChange:
screenCapture:didStop:withError:
screenCapture:didStart:withError:
serverDidDisconnect:
session:uplinkRateAdaptationInfoDidChange:
session:downlinkRateAdaptationInfoDidChange:
sessionServerDidDisconnect:
session:addParticipant:didSucceed:error:
session:removeParticipant:didSucceed:error:
session:didUpdate:configuration:error:
session:audioEnabled:didSucceed:error:
session:videoEnabled:didSucceed:error:
session:screenEnabled:didSucceed:error:
session:audioPaused:didSucceed:error:
session:videoPaused:didSucceed:error:
session:mediaStateDidChange:forMediaType:didSucceed:error:
session:frequencyLevelsDidChange:
session:mediaPrioritiesDidChange:
session:oneToOneEnabled:didSucceed:error:
session:didStopWithError:metadata:
localParticipantDataWithVersion:
addParticipant:withVideoEnabled:screenEnabled:
removeParticipant:
setDownlinkMuted:forParticipantWithIdentifier:
setScreenEnabled:forParticipantWithIdentifier:
setAudioAndVideoMuted:forParticipantWithIdentifier:
setAudioPaused:forParticipantWithIdentifier:
setVideoQuality:visibility:prominence:spatialPosition:isInCanvas:forParticipantWithIdentifier:
setGridDisplayMode:
beginParticipantUpdates
commitParticipantUpdates
start
sessionIdentifier
sessionToken
setAudioReady:
T@"NSData",R,C,N
TB,N,GisAudioReady
T@"AVCSessionConfiguration",R,N
T@"TUCallScreenShareAttributes",R,N
initWithSessionCreationBlock:transportToken:delegate:queue:reportingHierarchyToken:avMode:captureSessionCreationBlock:
initWithTransportToken:delegate:queue:reportingHierarchyToken:oneToOneModeEnabled:avMode:report:
presentationLayoutForGridDisplayMode:
setOneToOneModeEnabled:withCompletionBlock:
addBlockToCaptureSessionQueue:
isRemoteScreenEnabledForParticipant:
remoteParticipantsByIdentifier
pendingRemovedParticipantsByID
sessionUpdateCompletionQueue
captureSessionQueue
captureSessionCreationBlock
hasCalledStop
setHasCalledStop:
avcScreenCapture
setAvcScreenCapture:
captureCapabilities
setCaptureCapabilities:
avcSessionParticipantCreationBlock
setAvcSessionParticipantCreationBlock:
_audioReady
_hasCalledStop
_captureCapabilities
_remoteParticipantsByIdentifier
_pendingRemovedParticipantsByID
_sessionUpdateCompletionQueue
_captureSessionQueue
_captureSessionCreationBlock
_avcScreenCapture
_avcSessionParticipantCreationBlock
T@"AVCSession",R,N,V_session
T@"<CSDAVCSessionDelegate>",R,W,N,V_delegate
T@"NSMutableDictionary",R,N,V_remoteParticipantsByIdentifier
T@"NSMutableDictionary",R,N,V_pendingRemovedParticipantsByID
T@"NSMutableArray",R,N,V_sessionUpdateCompletionQueue
T@"NSMutableArray",R,N,V_captureSessionQueue
T@?,R,C,N,V_captureSessionCreationBlock
TB,N,V_hasCalledStop
T@"AVCScreenCapture",&,N,V_avcScreenCapture
TC,N,V_captureCapabilities
T@?,C,N,V_avcSessionParticipantCreationBlock
TB,N,GisAudioReady,V_audioReady
csdConversationParticipant
participantWithCSDConversationJoinContext:
participantWithCSDConversationParticipant:
T@"CSDConversationParticipant",R,N
initWithSessionProvider:isInitiator:remoteFromID:remoteProtocolVersion:
initAsReceiverWithSessionProvider:remoteFromID:remoteProtocolVersion:
sendInvitationWithData:
cancelInvitationWithReason:
setRemoteFromID:
receivedInvitationAccept
setReceivedInvitationAccept:
_receivedInvitationAccept
_remoteFromID
T@"NSString",C,N,V_remoteFromID
TB,N,V_receivedInvitationAccept
endedReasonUserInfoForCall:
initWithIdentifier:
invokeDidPrepareIfNecessary:
invokeDidStartIfNecessary:error:
invokeDidStopIfNecessary:error:
setTransport:
isHost
setHost:
setUsingBaseband:
isAudioDisabled
setAudioDisabled:
receivedSuccessfulDidStart
setReceivedSuccessfulDidStart:
isPreparedToStop
setPreparedToStop:
didPrepareHandler
setDidPrepareHandler:
didStartHandler
setDidStartHandler:
didStopHandler
setDidStopHandler:
_host
_usingBaseband
_audioDisabled
_receivedSuccessfulDidStart
_preparedToStop
_transport
_didPrepareHandler
_didStartHandler
_didStopHandler
TB,N,V_receivedSuccessfulDidStart
T@"NSString",C,N,V_identifier
T@"CSDIDSTransport",&,N,V_transport
host
TB,N,GisHost,V_host
usingBaseband
TB,N,GisUsingBaseband,V_usingBaseband
audioDisabled
TB,N,GisAudioDisabled,V_audioDisabled
T@"VCCapabilities",R,C,N
preparedToStop
TB,N,GisPreparedToStop,V_preparedToStop
T@?,C,N,V_didPrepareHandler
T@?,C,N,V_didStartHandler
T@?,C,N,V_didStopHandler
subscriptionsDidChangeForClient:
client:subscription:callCapabilitiesDidChange:
client:capabilitiesDidChange:
client:subscription:capabilitiesDidChange:
emergencyCallbackModeDidChangeForAllSubscriptionsForClient:
initWithQueue:coreTelephonyClient:emergencyCallbackCapabilities:
areCapabilitiesValid
setSecondaryThumperAccounts:
isEmergencyCallbackModeEnabled
isEmergencyCallbackPossible
primaryThumperAccountUsingDevices:outgoingCallerIDURI:requireMatchingCallerIDURI:requireAvailableDeviceSlots:
associatedThumperAccountID
setAssociatedThumperAccountID:
setThumperCallingAssociatedAccountID:
invalidateAndRefreshWiFiCallingCapabilitiesForSenderIdentityWithUUID:
invalidateAndRefreshVoLTECallingCapabilitiesForSenderIdentityWithUUID:
invalidateAndRefreshThumperCallingCapabilitiesForSenderIdentityWithUUID:
secondaryThumperAccountForRegisteredDeviceID:
telephonySubscriptionLabelIdentifierForSenderIdentityUUID:
setCallCapabilities:forSenderIdentityCapabilitiesState:
setCapabilityInfo:forSubscription:senderIdentityCapabilitiesState:
_subscriptionWithUUID:
_updateSubscriptions
_updateCallCapabilitiesForSubscription:capabilitiesState:
_senderIdentityCapabilitiesStateForSubscription:
_updateSystemCapabilitiesStateForSubscription:capabilitiesState:
_updateEmergencyCallbackModeEnabledState
_updateThumperAccountState
shouldUpdateSubscriptions
senderIdentityCapabilitiesStateByUUID
setSenderIdentityCapabilitiesStateByUUID:
localThumperDeviceID
setLocalThumperDeviceID:
setCapabilitiesValid:
subscriptions
setSubscriptions:
lastSavedAccountIDByCapability
coreTelephonyClient
emergencyCallbackCapabilities
setLocalThumperAccounts:
setEmergencyCallbackModeEnabled:
_capabilitiesValid
_emergencyCallbackModeEnabled
_secondaryThumperAccounts
_senderIdentityCapabilitiesStateByUUID
_localThumperDeviceID
_subscriptions
_lastSavedAccountIDByCapability
_coreTelephonyClient
_emergencyCallbackCapabilities
_localThumperAccounts
capabilitiesValid
TB,N,GareCapabilitiesValid,V_capabilitiesValid
T@"NSSet",C,N,V_subscriptions
T@"NSDictionary",C,N,V_senderIdentityCapabilitiesStateByUUID
T@"NSMutableDictionary",R,N,V_lastSavedAccountIDByCapability
T@"CSDCoreTelephonyClient",R,N,V_coreTelephonyClient
T@"<CSDEmergencyCallbackCapabilities>",R,N,V_emergencyCallbackCapabilities
T@"NSString",C,N,V_localThumperDeviceID
T@"NSArray",C,N,V_localThumperAccounts
T@"NSArray",C,N,V_secondaryThumperAccounts
emergencyCallbackModeEnabled
TB,N,GisEmergencyCallbackModeEnabled,V_emergencyCallbackModeEnabled
T@"<CSDTelephonyCallCapabilitiesDelegate>",W,N,V_delegate
emergencyCallbackPossible
TB,R,N,GisEmergencyCallbackPossible
hasUniqueIdentifier
deviceType
setDeviceType:
setHasDeviceType:
hasDeviceType
deviceTypeAsString:
StringAsDeviceType:
setProtoCurrentlyPicked:
setHasProtoCurrentlyPicked:
hasProtoCurrentlyPicked
setProtoGuest:
setHasProtoGuest:
hasProtoGuest
setProtoSupportsRelay:
setHasProtoSupportsRelay:
hasProtoSupportsRelay
uniqueIdentifier
setUniqueIdentifier:
protoCurrentlyPicked
protoGuest
protoSupportsRelay
_deviceType
_uniqueIdentifier
_protoCurrentlyPicked
_protoGuest
_protoSupportsRelay
T@"NSString",&,N,V_uniqueIdentifier
Ti,N,V_deviceType
TB,N,V_protoCurrentlyPicked
TB,N,V_protoGuest
TB,N,V_protoSupportsRelay
errorForUnregisteredProviderIdentifier:
errorForDisabledPseudonyms
T@"CSDConversationProviderManager",R,N
startTrackingClient:forProviderIdentifier:
providerIdentifiersForClient:
conversationProviderForIdentifier:
tuConversationProviderForIdentifier:
serviceForProvider:
setBeginListeningBlock:
createProcessMonitorIfNecessary:forClient:
beginListeningBlock
providerIdentifierToProvider
pidToProviderIdentifiers
pidToProcessHandle
_beginListeningBlock
_providerIdentifierToProvider
_pidToProviderIdentifiers
_pidToProcessHandle
T@"NSMutableDictionary",R,N,V_providerIdentifierToProvider
T@"NSMutableDictionary",R,N,V_pidToProviderIdentifiers
T@"NSMutableDictionary",R,N,V_pidToProcessHandle
T@?,C,N,V_beginListeningBlock
localProviderWithIdentifier:
relayCallDidDial:
relayCall:didAnswerWithRequest:
relayCallDidDisconnect:
relayCallDidHold:
relayCallDidUnhold:
relayCall:didGroupWithOtherCall:
relayCallDidUngroup:
relayCallDidBecomeEndpointForPull:
relayCall:didPlayLocalDTMFToneForKey:
relayCallDidSendHardPauseDigits:
relayCallConferenceDidStartSuccessfullyForIncomingAnsweredCall:
relayCallConferenceDidStartSuccessfullyForOutgoingDialedCall:
relayCallConferenceDidStartSuccessfullyForPulledCall:
relayCallConferenceFailedToStart:
relayCallConferenceDidStop:cleanly:error:
_setAllCallsToHeldExceptCall:
dtmfSoundPlayer
_dtmfSoundPlayer
T@"TUDTMFSoundPlayer",R,N,V_dtmfSoundPlayer
activeParticipantsType
addedMembersType
invitationPreferencesType
removedMembersType
setHasShouldSuppressInCallUI:
hasShouldSuppressInCallUI
clearActiveParticipants
addActiveParticipants:
activeParticipantsCount
activeParticipantsAtIndex:
clearAddedMembers
addAddedMembers:
addedMembersCount
addedMembersAtIndex:
setHasDisconnectedReason:
hasDisconnectedReason
setIsLetMeInApproved:
setHasIsLetMeInApproved:
hasIsLetMeInApproved
hasEncryptedMessage
hasLetMeInDelegationHandle
hasLetMeInDelegationUUID
enclosedEncryptedType
setEnclosedEncryptedType:
setHasEnclosedEncryptedType:
hasEnclosedEncryptedType
enclosedEncryptedTypeAsString:
StringAsEnclosedEncryptedType:
clearInvitationPreferences
addInvitationPreferences:
invitationPreferencesCount
invitationPreferencesAtIndex:
clearRemovedMembers
addRemovedMembers:
removedMembersCount
removedMembersAtIndex:
hasJoinedMetadata
setActiveParticipants:
addedMembers
setAddedMembers:
isLetMeInApproved
encryptedMessage
setEncryptedMessage:
letMeInDelegationHandle
setLetMeInDelegationHandle:
letMeInDelegationUUID
setLetMeInDelegationUUID:
removedMembers
setRemovedMembers:
joinedMetadata
setJoinedMetadata:
_activeParticipants
_addedMembers
_disconnectedReason
_enclosedEncryptedType
_encryptedMessage
_joinedMetadata
_letMeInDelegationHandle
_letMeInDelegationUUID
_removedMembers
_isLetMeInApproved
T@"NSMutableArray",&,N,V_activeParticipants
T@"NSMutableArray",&,N,V_addedMembers
TI,N,V_disconnectedReason
TB,N,V_isLetMeInApproved
T@"CSDMessagingEncryptedConversationMessage",&,N,V_encryptedMessage
T@"NSString",&,N,V_letMeInDelegationHandle
T@"NSString",&,N,V_letMeInDelegationUUID
Ti,N,V_enclosedEncryptedType
T@"NSMutableArray",&,N,V_invitationPreferences
T@"NSMutableArray",&,N,V_removedMembers
T@"CSDMessagingConversationJoinedMetadata",&,N,V_joinedMetadata
csd_localizedDeviceCategory
initWithTURoute:
tuRoute
tuRouteDeviceType
setTURouteDeviceType:
isCurrentlyPicked
setCurrentlyPicked:
isGuest
setGuest:
supportsRelay
setSupportsRelay:
Tq,N,SsetTURouteDeviceType:
currentlyPicked
TB,N,GisCurrentlyPicked
guest
TB,N,GisGuest
handleTypeForTUHandle:
csd_isSymbolicLink
imDaemonDidConnect:
preferredAccountChanged:
displayNameChanged:
account:registrationStatusInfoChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
account:pseudonymsChanged:
refreshRegistrationForAccount:
T@"CSDFaceTimeIMAccount",R,N
updateCallerID:
_initializeLastKnownCallerID
removeCallerIDFromPreferences
_saveLastKnownFaceTimeCallerID
faceTimeIMAccount
setCallerID:
isIMDaemonConnected
setIMDaemonConnected:
keychainItem
_IMDaemonConnected
_keychainItem
T@"NSString",C,N,V_callerID
IMDaemonConnected
TB,N,GisIMDaemonConnected,V_IMDaemonConnected
T@"CSDKeychainPasswordItem",R,N,V_keychainItem
initWithUniqueProxyIdentifier:
updateWithCall:
mockCall
mockCallFromBlock:
setMockCallStatus:
setMockService:
setMockUniqueProxyIdentifier:
setMockIsVideo:
setMockIsVideoPaused:
setMockHostedOnCurrentDevice:
setMockEndpointOnCurrentDevice:
setMockBlocked:
setMockVoicemail:
callDuration
setMockCallDuration:
setMockEmergency:
setMockFailureExpected:
mockSupportsEmergencyFallback
setMockSupportsEmergencyFallback:
setMockOutgoing:
setMockConferenced:
setMockUsingBaseband:
setMockTTYType:
setMockSupportsTTYWithVoice:
setMockDisconnectedReason:
setMockHandle:
localizedLabel
setMockLocalizedLabel:
setMockCompanyName:
setMockCallUUID:
setMockCallerNameFromNetwork:
setMockBytesOfDataUsed:
subtype
setMockSubtype:
setMockNeedsManualInCallSounds:
setMockAudioCategory:
setMockAudioMode:
setMockCallGroupUUID:
setMockProvider:
setMockProviderContext:
setMockProviderErrorCode:
setMockDisplayContext:
setMockHasStartedOutgoing:
setMockHasSentInvitation:
isConnecting
setMockConnecting:
setMockConnected:
setMockUplinkWasExplicitlyMuted:
setMockVideoStreamToken:
setMockMayRequireBreakBeforeMake:
setMockAudioInterruptionProviderType:
displayName
setMockDisplayName:
setMockPrefersExclusiveAccessToCellularNetwork:
setMockContactIdentifiers:
setMockDateCreated:
setMockDateConnected:
setMockProviderProcessIdentifier:
audioInterruptionActivationStateObserver
setMockAudioInterruptionActivationStateObserver:
setMockBackingCallSource:
setMockIsThirdPartyVideo:
setMockInitialLinkType:
setMockCallRelaySupport:
setMockShouldSuppressInCallUI:
setMockJunkConfidence:
setMockKnownCaller:
setMockConversation:
_mockIsVideo
_mockIsVideoPaused
_mockHostedOnCurrentDevice
_mockEndpointOnCurrentDevice
_mockBlocked
_mockVoicemail
_mockEmergency
_mockFailureExpected
_mockSupportsEmergencyFallback
_mockSOS
_mockOutgoing
_mockConferenced
_mockUsingBaseband
_mockSupportsTTYWithVoice
_mockNeedsManualInCallSounds
_mockHasStartedOutgoing
_mockHasSentInvitation
_mockConnecting
_mockConnected
_mockUplinkMuted
_mockUplinkWasExplicitlyMuted
_mockMayRequireBreakBeforeMake
_mockPrefersExclusiveAccessToCellularNetwork
_mockIsThirdPartyVideo
_mockShouldSuppressInCallUI
_mockKnownCaller
_mockConversation
_mockService
_mockCallStatus
_mockTTYType
_mockDisconnectedReason
_mockSubtype
_mockProviderProcessIdentifier
_mockCallRelaySupport
_mockUniqueProxyIdentifier
_mockCallDuration
_mockHandle
_mockLocalizedLabel
_mockCompanyName
_mockCallUUID
_mockCallerNameFromNetwork
_mockBytesOfDataUsed
_mockAudioCategory
_mockAudioMode
_mockCallGroupUUID
_mockProvider
_mockProviderContext
_mockProviderErrorCode
_mockDisplayContext
_mockVideoStreamToken
_mockAudioInterruptionProviderType
_mockDisplayName
_mockContactIdentifiers
_mockDateCreated
_mockDateConnected
_mockAudioInterruptionActivationStateObserver
_mockBackingCallSource
_mockInitialLinkType
_mockJunkConfidence
mockService
Ti,N,Gservice,V_mockService
mockCallStatus
Ti,N,GcallStatus,V_mockCallStatus
mockUniqueProxyIdentifier
T@"NSString",C,N,GuniqueProxyIdentifier,V_mockUniqueProxyIdentifier
mockIsVideo
TB,N,GisVideo,V_mockIsVideo
mockIsVideoPaused
TB,N,GisVideoPaused,V_mockIsVideoPaused
mockHostedOnCurrentDevice
TB,N,GisHostedOnCurrentDevice,V_mockHostedOnCurrentDevice
mockEndpointOnCurrentDevice
TB,N,GisEndpointOnCurrentDevice,V_mockEndpointOnCurrentDevice
mockBlocked
TB,N,GisBlocked,V_mockBlocked
mockVoicemail
TB,N,GisVoicemail,V_mockVoicemail
mockCallDuration
Td,N,GcallDuration,V_mockCallDuration
mockEmergency
TB,N,GisEmergency,V_mockEmergency
mockFailureExpected
TB,N,GisFailureExpected,V_mockFailureExpected
TB,N,V_mockSupportsEmergencyFallback
mockSOS
TB,N,GisSOS,SsetSOS:,V_mockSOS
mockOutgoing
TB,N,GisOutgoing,V_mockOutgoing
mockConferenced
TB,N,GisConferenced,V_mockConferenced
mockUsingBaseband
TB,N,GisUsingBaseband,V_mockUsingBaseband
mockTTYType
Ti,N,GttyType,V_mockTTYType
mockSupportsTTYWithVoice
TB,N,GsupportsTTYWithVoice,V_mockSupportsTTYWithVoice
mockDisconnectedReason
Ti,N,GdisconnectedReason,V_mockDisconnectedReason
mockHandle
T@"TUHandle",&,N,Ghandle,V_mockHandle
mockLocalizedLabel
T@"NSString",C,N,GlocalizedLabel,V_mockLocalizedLabel
mockCompanyName
T@"NSString",C,N,GcompanyName,V_mockCompanyName
mockCallUUID
T@"NSString",C,N,GcallUUID,V_mockCallUUID
mockCallerNameFromNetwork
T@"NSString",C,N,GcallerNameFromNetwork,V_mockCallerNameFromNetwork
mockBytesOfDataUsed
Tq,N,GbytesOfDataUsed,V_mockBytesOfDataUsed
mockSubtype
Ti,N,Gsubtype,V_mockSubtype
mockNeedsManualInCallSounds
TB,N,GneedsManualInCallSounds,V_mockNeedsManualInCallSounds
mockAudioCategory
T@"NSString",C,N,GaudioCategory,V_mockAudioCategory
mockAudioMode
T@"NSString",C,N,GaudioMode,V_mockAudioMode
mockCallGroupUUID
T@"NSUUID",C,N,GcallGroupUUID,V_mockCallGroupUUID
mockProvider
T@"TUCallProvider",C,N,Gprovider,V_mockProvider
mockProviderContext
T@"NSDictionary",C,N,GproviderContext,V_mockProviderContext
mockProviderErrorCode
Tq,N,GproviderErrorCode,V_mockProviderErrorCode
mockDisplayContext
T@"TUCallDisplayContext",C,N,GdisplayContext,V_mockDisplayContext
mockHasStartedOutgoing
TB,N,GhasStartedOutgoing,V_mockHasStartedOutgoing
mockHasSentInvitation
TB,N,GhasSentInvitation,V_mockHasSentInvitation
mockConnecting
TB,N,GisConnecting,V_mockConnecting
mockConnected
TB,N,GisConnected,V_mockConnected
mockUplinkMuted
TB,N,GisUplinkMuted,SsetUplinkMuted:,V_mockUplinkMuted
mockUplinkWasExplicitlyMuted
TB,N,GuplinkWasExplicitlyMuted,V_mockUplinkWasExplicitlyMuted
mockVideoStreamToken
Tq,N,GvideoStreamToken,V_mockVideoStreamToken
mockMayRequireBreakBeforeMake
TB,N,GmayRequireBreakBeforeMake,V_mockMayRequireBreakBeforeMake
mockAudioInterruptionProviderType
Tq,N,GaudioInterruptionProviderType,V_mockAudioInterruptionProviderType
mockDisplayName
T@"NSString",C,N,GdisplayName,V_mockDisplayName
mockPrefersExclusiveAccessToCellularNetwork
TB,N,GprefersExclusiveAccessToCellularNetwork,V_mockPrefersExclusiveAccessToCellularNetwork
mockContactIdentifiers
T@"NSArray",C,N,GcontactIdentifiers,V_mockContactIdentifiers
mockDateCreated
T@"NSDate",&,N,GdateCreated,V_mockDateCreated
mockDateConnected
T@"NSDate",&,N,GdateConnected,V_mockDateConnected
mockProviderProcessIdentifier
Ti,N,GproviderProcessIdentifier,V_mockProviderProcessIdentifier
mockAudioInterruptionActivationStateObserver
T@"<CXAudioSessionActivationStateObserver>",&,N,GaudioInterruptionActivationStateObserver,V_mockAudioInterruptionActivationStateObserver
mockBackingCallSource
T@"CXCallSource",&,N,GbackingCallSource,V_mockBackingCallSource
mockIsThirdPartyVideo
TB,N,GisThirdPartyVideo,V_mockIsThirdPartyVideo
mockInitialLinkType
TQ,N,GinitialLinkType,V_mockInitialLinkType
mockCallRelaySupport
Ti,N,GcallRelaySupport,V_mockCallRelaySupport
mockShouldSuppressInCallUI
TB,N,GshouldSuppressInCallUI,V_mockShouldSuppressInCallUI
mockJunkConfidence
Tq,N,GjunkConfidence,V_mockJunkConfidence
mockKnownCaller
TB,N,GisKnownCaller,V_mockKnownCaller
mockConversation
TB,N,GisConversation,V_mockConversation
getCallCapabilities:error:
_isCTErrorFatal:
_isNSErrorFatal:
context:capabilitiesChanged:
phoneServicesCapabilitiesChanged:
callCapabilitiesForSubscription:
capabilityInfoForSubscription:capability:
systemCapabilitiesForSubscription:
setCapability:enabled:info:
setSubscription:capability:enabled:info:
addSecondaryThumperDeviceWithIDSDeviceIdentifier:toSubscription:
removeSecondaryThumperDeviceWithIDSDeviceIdentifier:fromSubscription:
recheckAccountStatusForSubscription:capability:
ISOCountryCodeForSubscriptionUUID:
preferredVoiceSubscriptionUUID
telephonySubscriptions
thumperDeviceInfo
T@"<CSDCoreTelephonyClientDelegate>",W,N
TB,R,N,GisEmergencyCallbackModeEnabled
initWithQueue:shouldRegisterForECBMNotification:
activeContexts
setLegacyCapability:enabled:capabilityInformation:
legacySystemCapabilities
legacyAddSecondaryThumperDeviceWithIDSDeviceIdentifier:
legacyRemoveSecondaryThumperDeviceWithIDSDeviceIdentifier:
legacyRecheckAccountStatusForCapability:
ISOCountryCodeForMobileCountryCode:mobileNetworkCode:
mobileCountryCodeForSubscription:error:
mobileNetworkCodeForSubscription:error:
callCapabilitiesChanged:capabilities:
ctEmergencyCallbackModeStatusChangedWithUserInfo:
client
setActiveContexts:
mobileCodesToISOCountryCode
_client
_activeContexts
_mobileCodesToISOCountryCode
T@"CoreTelephonyClient",R,N,V_client
T@"CTXPCContexts",C,N,V_activeContexts
T@"NSMutableDictionary",R,N,V_mobileCodesToISOCountryCode
T@"<CSDCoreTelephonyClientDelegate>",W,N,V_delegate
tuConversationActivitySession
createActivitySessionOnConversation:
activitySessionWithTUConversationActivitySession:fromConversation:forStorage:
activitySessionWithTUConversationActivitySession:fromConversation:
activitySessionWithCSDConversationActivitySession:fromConversation:forStorage:
activitySessionWithCSDConversationActivitySession:fromConversation:
T@"TUConversationActivitySession",R,N
isEligibleForCall
anyActiveParticipantHasAV
activeRemoteParticipantCXHandles
eligibleForCall
TB,R,N,GisEligibleForCall
joinCallAction
T@"CXJoinCallAction",R,N
tuActivity
activityWithTUConversationActivity:
setAmbiguityState:
setHasAmbiguityState:
hasAmbiguityState
setSwappable:
setHasSwappable:
hasSwappable
setMergeable:
setHasMergeable:
hasMergeable
setHoldAllowed:
setHasHoldAllowed:
hasHoldAllowed
setAddCallAllowed:
setHasAddCallAllowed:
hasAddCallAllowed
setTakingCallsPrivateAllowed:
setHasTakingCallsPrivateAllowed:
hasTakingCallsPrivateAllowed
setHardPauseAvailable:
setHasHardPauseAvailable:
hasHardPauseAvailable
setEndAndAnswerAllowed:
setHasEndAndAnswerAllowed:
hasEndAndAnswerAllowed
setHoldAndAnswerAllowed:
setHasHoldAndAnswerAllowed:
hasHoldAndAnswerAllowed
setSendToVoicemailAllowed:
setHasSendToVoicemailAllowed:
hasSendToVoicemailAllowed
ambiguityState
swappable
mergeable
holdAllowed
addCallAllowed
takingCallsPrivateAllowed
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
sendToVoicemailAllowed
_ambiguityState
_addCallAllowed
_endAndAnswerAllowed
_hardPauseAvailable
_holdAllowed
_holdAndAnswerAllowed
_mergeable
_sendToVoicemailAllowed
_swappable
_takingCallsPrivateAllowed
TI,N,V_ambiguityState
TB,N,V_swappable
TB,N,V_mergeable
TB,N,V_holdAllowed
TB,N,V_addCallAllowed
TB,N,V_takingCallsPrivateAllowed
TB,N,V_hardPauseAvailable
TB,N,V_endAndAnswerAllowed
TB,N,V_holdAndAnswerAllowed
TB,N,V_sendToVoicemailAllowed
initWithTUSenderIdentity:
setUUID:
accountUUID
setAccountUUID:
hasProtoUUID
hasLocalizedShortName
hasAccountUUIDString
hasLocalizedServiceName
protoUUID
setProtoUUID:
localizedShortName
setLocalizedShortName:
accountUUIDString
setAccountUUIDString:
localizedServiceName
setLocalizedServiceName:
_accountUUIDString
_localizedServiceName
_localizedShortName
_protoUUID
T@"NSString",&,N,V_protoUUID
T@"NSString",&,N,V_localizedShortName
T@"NSString",&,N,V_accountUUIDString
T@"NSString",&,N,V_localizedServiceName
tuAssociationForHandle:
initWithQueue:block:
stringRepresentationForTUCallDisconnectedReason:
stringForIDSSessionEndedReason:
stringForIMAVChatEndedReason:
stringForSignatureType:
allTUConversationMembers
tuConversationMembers
setTuConversationMembers:
otherInvitedTUHandles
setOtherInvitedTUHandles:
tuLightweightMembers
momentsReportingSession:didGenerateUsageReport:
calls
momentsController:registeredStream:withAvailability:
momentsController:didCleanUpForStream:
momentsController:didStartRequestForStream:withTransactionID:
momentsController:didReceiveResultsForStream:withTransactionID:
T@"CSDReportingController",R,N
addReporter:
reportCallEnteredForeground:
reportAllCallsBackgrounded
reportRelayMessageReceived:fromPairedDevice:
reportTransactionGroupCompleted:
reportProviderFailedWithAction:forCall:
reportRouteWasPicked:
reportTimedOutPickingRoute:
createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:
createConversationReportingSession:
idsReportsReceived:forConversation:
idsReportsReceived:forSessionWithUUID:
chatReceived:
groupActivitiesReportsReceived:forConversation:
avcBlobRecoveryStartedForConversation:
avcBlobRecoveryTimedOutForConversation:
messageRetryStartedForConversation:
messageRetryFailedForConversation:
messageRetrySucceededForConversation:
avcBlobRequestMessageRetryStartedForConversation:
avcBlobRequestMessageRetryFailedForConversation:
avcBlobRequestMessageRetrySucceededForConversation:
voipAppFailedToPostIncomingCall:
voipAppBecameDisabledFromLaunching:
voipPushDroppedOnTheFloor:
receivedLetMeInRequestForConversation:
sentLetMeInRequestForConversation:isApproved:
didEndSession:startDate:endDate:
registeredStream:withAvailability:
didCleanUpForStream:
didStartRequestForStream:withTransactionID:
didReceiveResultsForStream:withTransactionID:
registeredStream:withAvailability:reply:
didCleanUpForStream:reply:
didStartRequestForStream:withTransactionID:reply:
didReceiveResultsForStream:withTransactionID:reply:
conversationManager:addedActivatedLink:
reporters
setReporters:
reportingSessionByStreamToken
conversationUUIDs
_reporters
_reportingSessionByStreamToken
_conversationUUIDs
T@"NSMutableArray",&,N,V_reporters
T@"NSMutableDictionary",R,N,V_reportingSessionByStreamToken
T@"NSMutableSet",R,N,V_conversationUUIDs
handleAXSVoiceOverTouchEnabledNotification:
voiceOverObserver:didChangeEnabled:
isEnabled
shouldRouteToSpeakerWithProximity
enabled
TB,R,N,GisEnabled
setEnabled:
performSynchronousBlock:
performAsynchronousBlock:
updateEnabled
_enabled
T@"NSMapTable",R,N,V_delegateToQueue
TB,N,GisEnabled,V_enabled
addCallFilter:
removeCallFilter:
filters
_filters
T@"NSMutableArray",R,N,V_filters
generatorDescriptorsType
setShouldCheckAllGenerators:
setHasShouldCheckAllGenerators:
hasShouldCheckAllGenerators
clearGeneratorDescriptors
addGeneratorDescriptors:
generatorDescriptorsCount
generatorDescriptorsAtIndex:
shouldCheckAllGenerators
generatorDescriptors
setGeneratorDescriptors:
_generatorDescriptors
_shouldCheckAllGenerators
TB,N,V_shouldCheckAllGenerators
T@"NSMutableArray",&,N,V_generatorDescriptors
csd_UUIDv5ForString:
handleCallHistoryDatabaseChangedNotification:
initWithCHManager:
initWithCHManager:queue:
chManager
delegateController
_chManager
_delegateController
T@"<CSDCHManager>",R,N,V_chManager
T@"TUDelegateController<CSDCallHistoryManagerDelegate>",R,N,V_delegateController
tuConversationProvider
registerWithIDSWithCompletionHandler:
callerIDAccount
generatePseudonymHandleForConversationWithExpiryDuration:URI:completionHandler:
renewPseudonymHandle:expirationDate:completionHandler:
revokePseudonymHandle:completionHandler:
isPseudonymHandleForProvider:completionHandler:
pseudonymFeatureID
supportsLinks
supportsSharePlay
supportsVideo
_supportsLinks
_supportsSharePlay
_supportsVideo
_tuProvider
_pseudonymFeatureID
T@"NSString",R,C,N,V_pseudonymFeatureID
TB,R,N,V_supportsLinks
TB,R,N,V_supportsSharePlay
TB,R,N,V_supportsVideo
T@"CSDIDSService",C,N,V_service
T@"<CSDConversationProviderDelegate>",R,N,V_delegate
T@"NSString",R,C,N,V_identifier
T@"TUConversationProvider",R,C,N,V_tuProvider
accountController:accountAdded:
accountController:accountUpdated:
accountController:accountRemoved:
accountController:accountEnabled:
accountController:accountDisabled:
deviceWithUniqueID:
deviceForFromID:
devicesWithCapability:
deviceDestinationsWithCapability:
addServiceDelegate:queue:
removeServiceDelegate:
isServiceEnabledForTelephonySubscriptionLabelIdentifier:
sendData:fromAccount:toDestinations:priority:options:identifier:error:
allAliases
devices
countryCode
telephonyCapableDeviceExists
relayCapableDeviceExists
defaultPairedDeviceExists
pairedDeviceExists
hasActiveAccounts
defaultPairedDevice
pairedDevice
availableOutgoingRelayCallerIDs
localDeviceUniqueID
T@"<CSDIDSServiceDependencies>",R,N
T@"IDSDevice",R,N
T@"IDSAccount",R,N
T@"CSDIDSService",R,N
initWithName:service:
initWithName:service:queryController:
anyActiveAccount
accountWithCallerID:
idsDeviceID
accountForTelephonySubscriptionLabelIdentifier:
provisionPseudonymForHandle:featureID:scopeID:expiryDuration:allowedServices:completionHandler:
revokePseudonymString:completionHandler:
revokePseudonym:completionHandler:
renewPseudonymString:expirationDate:completionHandler:
renewPseudonym:expirationDate:completionHandler:
checkValidityForPseudonymString:completion:
checkValidityForSelfPseudonymString:
pseudonymForPseudonymString:
noteApprovedHandle:completionHandle:
noteDismissedHandle:completionHandle:
_noteAction:onHandle:completionHandle:
update
_update
accountController
idsService
idsQueryController
setIdsQueryController:
setTelephonyCapableDeviceExists:
setRelayCapableDeviceExists:
setDevices:
setPairedDevice:
setDefaultPairedDevice:
setAvailableOutgoingRelayCallerIDs:
_telephonyCapableDeviceExists
_relayCapableDeviceExists
_accountController
_idsService
_idsQueryController
_devices
_pairedDevice
_defaultPairedDevice
_availableOutgoingRelayCallerIDs
T@"IDSAccountController",R,N,V_accountController
T@"IDSService",R,N,V_idsService
T@"IDSIDQueryController",&,N,V_idsQueryController
T@"<IDSServicePseudonymDelegate>",&,N,V_delegate
TB,N,V_telephonyCapableDeviceExists
TB,N,V_relayCapableDeviceExists
T@"NSArray",&,N,V_devices
T@"IDSDevice",&,N,V_pairedDevice
T@"IDSDevice",&,N,V_defaultPairedDevice
T@"NSSet",&,N,V_availableOutgoingRelayCallerIDs
T@"NSString",R,C,N,V_name
T@"IDSService",R,N
isPairedDevice
isWatchDevice
isAudioAccessoryDevice
supportsRestrictingSecondaryCalling
supportsRelayCallingWithoutLocalRelayCallingEnabled
canReceiveRelayedCalls
canReceiveMessagesForCallProvider:
pairedDeviceUniqueIDOverride
pairedDeviceUniqueIDOverrideExists
isDeviceInAltMode
TB,R,N,GisPairedDevice
audioAccessoryDevice
TB,R,N,GisAudioAccessoryDevice
deviceInAltMode
TB,R,N,GisDeviceInAltMode
csd_callbackHandle
csd_senderHandle
session:receivedInvitationAcceptWithData:fromDestination:device:
session:receivedInvitationDeclineWithData:fromDestination:device:
session:receivedInvitationCancelWithData:fromDestination:device:
session:receivedData:fromDestination:device:
destinationWithActiveSession
deviceWithActiveSession
_createSessionToAllDevicesSupportingProvider:
_createSessionToDevices:
_createSessionToDestinations:
_destroySession:
waitingSession
currentSession
activeSessionForIdentifier:
sessionForIdentifier:
sessionProtocolVersionForIdentifier:
prepareSessionToEndForIdentifier:
prepareConnectedSessionsToEnd
acceptInvitationForIdentifier:
cancelOrDeclineInvitationForIdentifier:
endEndingSessions
_startSession:withMessage:identifiers:timeout:declineOnError:
sendMessage:andStartSessionIfNecessaryForIdentifier:toDevicesSupportingProvider:withTimeout:
sendMessage:andStartSessionIfNecessaryForIdentifier:toDestination:timeout:completionHandler:
sendMessage:andStartSessionIfNecessaryForIdentifiers:toDestination:timeout:completionHandler:
sendMessage:andAcceptInvitationIfNecessaryForIdentifier:
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier:
_sendMessage:andCancelInvitationIfNecessaryForSession:
_sendMessage:andDeclineInvitationIfNecessaryForSession:
sendMessage:forIdentifier:
sendMessage:forIdentifier:toDestinations:
sendMessage:customizedForRemoteProtocolVersion:completionHandler:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:completionHandler:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
sendMessage:forIdentifier:toDestinations:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
sessions
setSessions:
_sessions
T@"IDSDestination",R,N
T@"CSDRelayIDSDualSession",R,N
T@"NSMutableArray",&,N,V_sessions
T@"<CSDRelayIDSSessionMessengerDelegate>",W,D,N
isFaceTimePhotosAvailable
localCapabilities
setLocalCapabilities:
shouldPreserveMomentsFile
fileTransferer:didReceiveResourcesAtURL:withMetadata:isZipped:fromIDSDestination:
fileTransferer:didTransferFileAtURL:successfully:
moments:capabilitiesDidChange:
moments:didFinishRequest:error:
moments:didStartProcessingRequest:error:
moments:didEndProcessingRequest:stillImageURL:movieURL:error:
momentsServerDidDisconnect:
registerXPCClientWithReply:
registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:reply:
unregisterStreamToken:reply:
startRequestWithMediaType:forStreamToken:requesteeID:reply:
endRequestWithTransactionID:reply:
T@"<CSDMomentsControllerLocalCapabilities>",&,N
faceTimePhotosAvailable
TB,R,N,GisFaceTimePhotosAvailable
initWithQueue:fileTransferController:mediaAssetManager:callCenterObserver:
handleClientDisconnected:
contentsOfDirectoryAtURL:
urlFromResources:withExtension:
unregisterStreamToken:
cleanUpForMomentIfNecessary:
_transferFileAtURL:forSession:request:
_handleReceivedResourcesAtDirectoryURL:
_handleReceivedVideoURL:
_saveLivePhotoWithPhotoURL:videoURL:completion:
_saveVideoWithURL:completion:
_startTimeoutForMomentsRequestWithTransactionID:
sessionForTransactionID:
handleRequestResultWithMomentDescriptor:
availabilityWithRemoteAvailable:
fileTransferController
mediaAssetManager
sessionsByToken
streamTokensByCSDClient
momentsClient
momentsGenerator
setMomentsGenerator:
_fileTransferController
_mediaAssetManager
_sessionsByToken
_streamTokensByCSDClient
_momentsClient
_momentsGenerator
T@"<CSDFileTransferring>",R,N,V_fileTransferController
T@"<CSDMediaAssetManaging>",R,N,V_mediaAssetManager
T@"NSMutableDictionary",R,N,V_sessionsByToken
T@"NSMapTable",R,N,V_streamTokensByCSDClient
T@"<TUMomentsControllerXPCClient>",R,N,V_momentsClient
T@"<CSDMomentsServerBag>",&,N,V_serverBag
T@?,C,N,V_momentsGenerator
T@"<CSDMomentsControllerDelegate>",W,N,V_delegate
conference:withCallID:remoteMediaStalled:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:updateInputFrequencyLevel:
conference:updateOutputFrequencyLevel:
conference:receivedFirstRemoteFrameForCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteAudioPaused:callID:
conference:remoteVideoPaused:callID:
serverDiedForConference:
conference:inititiateRelayRequest:requestDict:
conference:sendRelayUpdate:updateDict:
conference:cancelRelayRequest:requestDict:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:networkHint:
conference:localIPChange:withCallID:
conference:didStartSession:withCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:withCallID:isSendingAudio:error:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:didReceiveARPLData:withCallID:
conference:didChangeLocalVariablesForCallID:
conference:remoteAudioEnabled:forCallID:
conference:localAudioEnabled:forCallID:error:
conference:remoteCallingModeChanged:forCallID:
conference:reinitializeCallForCallID:
conference:closeConnectionForCallID:
conference:updateInputMeterLevel:
conference:updateOutputMeterLevel:
conference:isRemoteAudioBelowThreshold:
setLocalPortraitAspectRatio:localLandscapeAspectRatio:
initializeNewCallWithDeviceRole:reportingHierarchyToken:
startConnectionAsCaller:remoteInviteDictionary:capabilities:destination:error:
startConnectionAsCaller:capabilities:socket:error:
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
setPeerReportingIdentifier:sessionIdentifier:
isInputFrequencyMeteringEnabled
setInputFrequencyMeteringEnabled:
isOutputFrequencyMeteringEnabled
setOutputFrequencyMeteringEnabled:
isMicrophoneMuted
setMicrophoneMuted:
T@"<CSDAVConferenceProviderDelegate>",W,N
inputFrequencyMeteringEnabled
TB,N,GisInputFrequencyMeteringEnabled
outputFrequencyMeteringEnabled
TB,N,GisOutputFrequencyMeteringEnabled
microphoneMuted
TB,N,GisMicrophoneMuted
initWithClientUUID:serialQueue:
setCallID:
_callID
T@"AVConference",R,N,V_conference
Tq,N,V_callID
T@"<CSDAVConferenceProviderDelegate>",W,N,Vdelegate
call
setCall:
completionHandler
setCompletionHandler:
_call
_completionHandler
T@"CSDProviderCall",&,N,V_call
T@?,C,N,V_completionHandler
initWithCallStateController:queue:
registerCall:
startTrackingCall:
stopTrackingCall:
answerCall:withRequest:whileDisconnectingCalls:andHoldingCalls:
holdCalls:whileUnholdingCalls:
groupCalls:withCalls:
ungroupCall:fromOtherCallsInGroup:
disconnectCalls:whileHoldingCalls:andUnholdingCalls:andUngroupingCalls:
setUplinkMuted:forCalls:
setTTYType:forCalls:
callClass
callControllerHost:clientWithIdentifier:requestedTransaction:completion:
callSourceWithIdentifier:
callSource:registeredWithConfiguration:
callSource:reportedNewIncomingCallWithUUID:update:completion:
callSource:reportedCallWithUUID:updated:
callSource:reportedCallWithUUID:endedAtDate:privateReason:failureContext:
callSource:reportedOutgoingCallWithUUID:sentInvitationAtDate:
callSource:reportedOutgoingCallWithUUID:startedConnectingAtDate:
callSource:reportedOutgoingCallWithUUID:connectedAtDate:
callSource:reportedNewOutgoingCallWithUUID:update:
callSource:reportedAudioFinishedForCallWithUUID:
callSource:reportedCallWithUUID:changedFrequencyData:forDirection:
callSource:reportedCallWithUUID:changedMeterLevel:forDirection:
callSource:reportedCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
callSource:requestedTransaction:completion:
callSourceManager:completedTransactionGroup:
callSourcesChangedForCallSourceManager:
callSource:shouldProcessAction:error:
callSourceForDialRequest:
callSourceForJoinConversationRequest:
providerWithIdentifier:
performCallAction:forCall:
performCallActions:forCall:
performStartCallAction:forCall:
callGroupUUIDToCalls
telephonyCallSource
_callWithUUID:
_relayCallWithUUID:
_callWithUUID:backingCallSource:
_callWithUUID:controllableByCallSource:
_callGroupsWithBackingCallSource:
_providerForCallSource:
_ISOCountryCodeForCall:
_ISOCountryCodeForCallWithUUID:provider:callUpdate:
_identifiersForCalls:
_shouldBlockIfScreenSharing
_deferCommittingTransactionsUntilAfterRunningBlock:
_commitUncommittedTransactions
_allowRevertingStateForCompletedTransactionGroup:
_endCall:
_endMutuallyExclusiveCalls:
_processCompletedCallAction:forCall:allowRevertingState:
_actionRequiresReasonableUserIntent:
_shouldAllowRequestedAction:forCallSource:shouldValidateUserIntent:error:
_shouldAllowRequestedTransaction:forCallSource:error:
_processRequestedTransaction:fromCallSource:completion:
_performRequestedTransaction:onCallSource:
_addSupplementalActionsForRequestedTransaction:onCallSource:
pullCallWithHandoffActivityUserInfo:completion:
faceTimeProviderDelegate
setCallFilterController:
processAssertionManager
callControllerHost
deferCommittingTransactions
setDeferCommittingTransactions:
faceTimeCallSource
tinCanCallSource
tinCanProviderDelegate
callSourceFetcher
pendingCallsToChatUUIDs
pendingPulledCallContexts
callSourceManager
setRelayCallDataSource:
setRouteManager:
dndAllowsCall
setDndAllowsCall:
supportsPrimaryCalling
setSupportsPrimaryCalling:
shouldPreferRelayOverDirectSecondaryCalling
setShouldPreferRelayOverDirectSecondaryCalling:
shouldFilterCall
setShouldFilterCall:
_deferCommittingTransactions
_faceTimeProviderDelegate
_callFilterController
_processAssertionManager
_callControllerHost
_faceTimeCallSource
_tinCanCallSource
_tinCanProviderDelegate
_callSourceFetcher
_pendingCallsToChatUUIDs
_pendingPulledCallContexts
_callSourceManager
_routeManager
_dndAllowsCall
_shouldPreferRelayOverDirectSecondaryCalling
_shouldFilterCall
T@"CSDVoIPProcessAssertionManager",R,N,V_processAssertionManager
T@"CXCallControllerHost",R,N,V_callControllerHost
TB,N,V_deferCommittingTransactions
T@"CXCallSource",R,N
T@"CXInProcessCallSource",R,N,V_faceTimeCallSource
T@"CXInProcessCallSource",R,N,V_tinCanCallSource
T@"<CXProviderDelegatePrivate>",R,N,V_tinCanProviderDelegate
T@"CSDCallSourceFetcher",R,N,V_callSourceFetcher
T@"CSDCallFilterController",&,N,V_callFilterController
T@"NSMutableDictionary",R,N,V_pendingCallsToChatUUIDs
T@"NSMutableDictionary",R,N,V_pendingPulledCallContexts
T@"CXCallSourceManager",R,N,V_callSourceManager
T@"CSDRelayCallDataSource",W,N,V_relayCallDataSource
T@"<CSDRouteManager>",&,N,V_routeManager
T@?,C,N,V_dndAllowsCall
T@?,C,N,V_supportsPrimaryCalling
T@?,C,N,V_shouldPreferRelayOverDirectSecondaryCalling
T@?,C,N,V_shouldFilterCall
T@"CSDFaceTimeProviderDelegate",R,N,V_faceTimeProviderDelegate
T@"CSDCallProviderManager",&,N,V_callProviderManager
listener:shouldAcceptNewConnection:
isLocalClientActive
setLocalClientActive:
remoteObjectInterface
setRemoteObjectInterface:
exportedInterface
setExportedInterface:
interruptionHandler
setInterruptionHandler:
invalidationHandler
setInvalidationHandler:
asynchronousExportedObjectProxy
setAsynchronousExportedObjectProxy:
synchronousExportedObjectProxy
setSynchronousExportedObjectProxy:
exportedObject
setExportedObject:
clients
currentClient
isClientAllowed:
startListeningOnMachServiceWithName:
addLocalClientObject:
removeLocalClientObject:
addClient:
removeClient:
clientsPassingTest:
clientsEntitledForCapability:
performBlockOnClients:
filterClientsUsingPredicate:andPerformBlock:
filterClientsEntitledForCapability:andPerformBlock:
performBlockOnClients:coalescedByIdentifier:
filterClientsUsingPredicate:andPerformBlock:coalescedByIdentifier:
queueContext
performBlockOnQueue:
performBlockOnQueue:andWait:
_performBlock:onClients:
_performBlock:onClients:coalescedByIdentifier:
_xpcClientForConnection:
_connectionEndedHandlerForXPCClient:withCustomBlock:
_updatedQOSBlockForBlock:
handleInvocation:synchronously:
requiredConnectionCapability
setRequiredConnectionCapability:
clientsByObject
machServiceName
setMachServiceName:
setXpcListener:
_localClientActive
_remoteObjectInterface
_exportedInterface
_interruptionHandler
_invalidationHandler
_asynchronousExportedObjectProxy
_synchronousExportedObjectProxy
_exportedObject
_requiredConnectionCapability
_clientsByObject
_machServiceName
T^v,R,N
T@"NSMapTable",R,N,V_clientsByObject
localClientActive
TB,N,GisLocalClientActive,V_localClientActive
T@"NSString",&,N,V_machServiceName
T@"NSXPCListener",&,N,V_xpcListener
T@,&,N,V_asynchronousExportedObjectProxy
T@,&,N,V_synchronousExportedObjectProxy
T@"CSDClient",R,N
T@"NSXPCInterface",&,N,V_remoteObjectInterface
T@"NSXPCInterface",&,N,V_exportedInterface
T@,&,N,V_exportedObject
T@?,C,N,V_interruptionHandler
T@?,C,N,V_invalidationHandler
T@"NSString",C,N,V_requiredConnectionCapability
initWithExportedObject:
methodSignatureForSelector:
forwardInvocation:
setClientManager:
isSynchronous
setSynchronous:
_synchronous
T@"CSDClientManager",W,N,V_clientManager
synchronous
TB,N,GisSynchronous,V_synchronous
T@,R,N,V_exportedObject
T#,R,N
shouldTrackCall:
shouldRegisterCall:
answerCall:withRequest:whileDisconnectingHeldCalls:andHoldingCalls:
answerCall:withRequest:whileDisconnectingActiveCalls:
answerCall:withRequest:whileHoldingActiveCalls:
disconnectCall:whileUngroupingCall:
disconnectAllCalls:
handleBytesOfDataUsedChanged:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
handleFrequencyDataChanged:inDirection:forCalls:
handleMeterLevelChanged:inDirection:forCalls:
postClientNotificationName:
postClientNotificationName:forCall:
postClientNotificationName:forCall:userInfo:
_postClientNotificationName:forCall:userInfo:
uniqueProxyIdentifierToCallTable
setUniqueProxyIdentifierToCallTable:
uniqueProxyIdentifierToCallTableSemaphore
setUniqueProxyIdentifierToCallTableSemaphore:
currentCallSet
setCurrentCallSet:
_uniqueProxyIdentifierToCallTable
_uniqueProxyIdentifierToCallTableSemaphore
_currentCallSet
T@"NSMapTable",&,N,V_uniqueProxyIdentifierToCallTable
T@"NSObject<OS_dispatch_semaphore>",&,N,V_uniqueProxyIdentifierToCallTableSemaphore
T@"NSMutableOrderedSet",&,N,V_currentCallSet
T@"CSDCallStateController",R,W,N,V_callStateController
isCovered
covered
TB,R,N,GisCovered
setCovered:
updateCovered
coveredNotifyObserver
setCoveredNotifyObserver:
_covered
_coveredNotifyObserver
TB,N,GisCovered,V_covered
T@"TUDelegateController",R,N,V_delegateController
T@"<TUNotifyObserver>",&,N,V_coveredNotifyObserver
supportedTUHandleTypes
T@"NSOrderedSet",R,C,N
initWithQueue:conversationManager:networkSupport:serverBag:featureFlags:invitationResolver:
conversationUUIDsWaitingToJoin
isWaitingToJoinForConversationUUID:
_isWaitingToJoinForConversationUUID:
setWaitingToJoin:forConversationUUID:
callUUIDsByConversationUUID
callUUIDForConversationUUID:
removeActiveAudioSessionObjectForConversationWithUUID:
updateNetworkCriticalStateIfNecessary
conversationUUIDsByCallUUID
conversationUUIDForCallUUID:
setConversationUUID:forCallUUID:
networkSupport
usesAudioSession
enqueueConversationWaitingForAudioWithConversationUUID:
enqueueOrStartAudioForConversationUUID:
startAudioForConversationsIfNecessary
associateCallUUID:withConversationUUID:waitingToJoin:
reportNewIncomingCallForConversation:fromHandle:
reportNewIncomingCallForConversation:fromHandle:callUUID:
fullfillPendingJoinActionsForCallUUIDIfNecessary:
isManagingPendingConversationForCallWithUUID:
pendingConversationUUIDForCallWithUUID:
proceedToJoinForConversation:action:
callUUIDsUpgradedForAVMode
conversationUUIDsAwaitingActiveAudioSession
isAudioSessionActive
setAudioSessionActive:
_audioSessionActive
_conversationUUIDsWaitingToJoin
_callUUIDsByConversationUUID
_conversationUUIDsByCallUUID
_callUUIDsUpgradedForAVMode
_networkSupport
_conversationUUIDsAwaitingActiveAudioSession
T@"NSMutableSet",R,N,V_conversationUUIDsWaitingToJoin
T@"FTNetworkSupport",R,N,V_networkSupport
T@"<CSDConversationServerBag>",R,N,V_serverBag
T@"NSMutableDictionary",R,N,V_callUUIDsByConversationUUID
T@"NSMutableDictionary",R,N,V_conversationUUIDsByCallUUID
T@"NSMutableSet",R,N,V_conversationUUIDsAwaitingActiveAudioSession
T@"NSMutableSet",R,N,V_callUUIDsUpgradedForAVMode
audioSessionActive
TB,N,GisAudioSessionActive,V_audioSessionActive
handleLocalFrequencyChanged:
handleRemoteFrequencyChanged:
handleLocalMeterLevelChanged:
handleRemoteMeterLevelChanged:
handleMutedChanged:
handleSendingAudioChanged:
transportType
payload
initWithTransportType:payload:
isEqualToMessage:
_payload
_transportType
T@"NSUUID",R,N,V_uuid
T@"NSDictionary",R,C,N,V_payload
Tq,R,N,V_transportType
csd_stringWithCSDVoIPApplicationMessageTransportType:
initWithSocket:
initWithDestination:
isEqualToTransport:
_socket
_destination
Ti,R,N,V_type
Ti,R,N,V_socket
T@"NSString",R,C,N,V_destination
currentRunLoop
triggers
setTriggers:
callChanged
setCallChanged:
activeConversationForCall:
shouldShowInvitationUserNotificationForConversation:handle:
shouldShowInvitationRingingUIForConversation:handle:
shouldShowInvitationRingingUIForConversation:handle:invitationMessagePreferences:
shouldStartRingingTimeoutForConversation:handle:
add:
activeParticipantPruningTimeout
sessionCleanupTimeout
AVCBlobRecoveryGracePeriod
AVCBlobRecoveryTimeout
activeParticipantRefreshDelay
isAutomaticUpgradingEnabled
isModernGFTEnabled
isSharePlayVersionCheckEnabled
maxActiveParticipantFetchRetries
maxKickMemberRetries
linkPseudonymExpiry
inactiveLinkPseudonymExpiry
inactiveLinkCacheLimit
webNicknameLengthLimit
linkSyncRecoverFailureLimit
linkSyncRecoverTimeLimit
activityIdentifierBundleIDMapping
localBundleIDForActivityIdentifier:
stableBundleIdentifierForLocalBundleIdentifier:
messageRetryMaxAttempts
messageRetryIntervalMillis
isExpanseConduitProxyEnabled
maxRemoteMirageParticipants
neighborhoodActivityConduitTimeout
isGuestModeSupported
gftaasPseudonymsEnabled:
conversationLinkDescriptorDataSourceDelegate
setConversationLinkDescriptorDataSourceDelegate:
addConversationLinkDescriptors:error:
addConversationLinkDescriptors:completion:
addOrUpdateConversationLinkDescriptors:error:
addOrUpdateConversationLinkDescriptors:completion:
conversationLinkDescriptorCountWithPredicate:error:
conversationLinkDescriptorCountWithPredicate:completion:
conversationLinkDescriptorsWithPredicate:limit:offset:error:
conversationLinkDescriptorsWithPredicate:limit:offset:completion:
removeConversationLinkDescriptorsWithPredicate:error:
removeConversationLinkDescriptorsWithPredicate:completion:
setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setName:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setName:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
shouldForceVerificationFailures
deviceFamily
setDeviceFamily:
style
setStyle:
displayScale
setDisplayScale:
scaleFactor
setScaleFactor:
originalResolution
setOriginalResolution:
frameRate
setFrameRate:
displayID
setDisplayID:
isWindowed
setWindowed:
windowUUID
setWindowUUID:
isSignificantChangeFromAttributes:
currentDeviceFamily
defaultDisplayScale
defaultScaleFactor
defaultAttributes
activeRequestCount
pendingRequestCount
initWithStreamToken:requesterID:delegate:dispatchQueue:
newRequestWithMediaType:mode:requesteeID:
sign:as:completion:
verify:completion:
conversationOneToOneModeEnabled
conversationHandoffEnabled
vouchingEnabled
uNNotificationsMacOSEnabled
expanseEnabled
sharePlayDisabled
sharePlayDiscoverabilityEnabled
sharePlayWithAirplayEnabled
ftvSpatialAudioEnabled
FTUserScore
livePhotoXPCServiceEnabled
nonInterruptingCalls
qrPluginEncryptionEnabled
unreliableMessengerEnabled
supportsScreenSharing
individualAudioVideoToggleEnabled
expanseBTSwitchingEnabled
TTRBannerEnabled
aTVHandoff
suggestionsReloadForSelectedRecipients
gftDowngradeToOneToOne
uPlusNDowngrade
requestA2DPOverIncomingCalls
mochiEnabled
screenCaptureKitEnabled
avLessSharePlayEnabled
continuityCaptureEnabled
greenTeaLinksEnabled
updatedBannersEnabled
screenSharingCALayerHostMode
collaborationStateChanged:forHighlightIdentifier:onConversationUUID:
transactionID
mediaType
requesterID
requesteeID
startWithError:
endWithError:
rejectWithError:
tu_contactsForContactHandles:keyDescriptors:error:
tu_contactsForHandles:keyDescriptors:error:
unifiedContactWithIdentifier:keysToFetch:error:
unifiedContactsMatchingPredicate:keysToFetch:error:
personFromContact:
contactForIdentifier:keysToFetch:
contactForDestinationId:keysToFetch:
SIMIdentifier
phoneNumber
isDefaultVoiceSIM
slot
mobileCountryCode
mobileNetworkCode
callsPassingTest:
currentCalls
currentVideoCalls
currentAudioAndVideoCalls
incomingCalls
displayedCalls
displayedAudioAndVideoCalls
conferenceParticipantCalls
callsHostedElsewhere
callsWithAnEndpointElsewhere
callsHostedOrAnEndpointElsewhere
callsOnDefaultPairedDevice
callsWithStatus:
audioAndVideoCallsWithStatus:
callsWithGroupUUID:
callPassingTest:
incomingCall
incomingVideoCall
activeVideoCall
currentVideoCall
callWithStatus:
videoCallWithStatus:
audioOrVideoCallWithStatus:
callWithCallUUID:
displayedCallFromCalls:
countOfCallsPassingTest:
currentCallCount
currentVideoCallCount
currentAudioAndVideoCallCount
callCountOnDefaultPairedDevice
anyCallPassesTest:
allCallsPassTest:
hasCurrentCalls
hasCurrentAudioCalls
hasCurrentVideoCalls
anyCallIsHostedOnCurrentDevice
anyCallIsEndpointOnCurrentDevice
allCallsAreOfService:
currentCallGroups
currentAudioAndVideoCallGroups
callGroupsOnDefaultPairedDevice
_allCalls
callPassingTest:sortedUsingComparator:
displayedCall
conferenceCall
frontmostCall
frontmostAudioOrVideoCall
existingCallsHaveMultipleProviders
supportsSecureCoding
encodeWithCoder:
initWithCoder:
boolValue
initWithCapabilities:callSource:queue:
initWithConfiguration:callSource:
initWithContactsDataSource:
setDelegate:queue:
IDSFormattedDestinationID
labeledHandlesForContactWithIdentifier:
initWithAccount:destinations:options:
isActive
setIncludesCallsInRecents:
setSupportsCurrentPlatform:
initWithData:
reportCallWithUUID:updated:
instancesRespondToSelector:
reportCallWithUUID:endedAtDate:privateReason:
reportOutgoingCallWithUUID:startedConnectingAtDate:
fail
tinCanProvider
isRelay
fulfill
setMutuallyExclusiveCall:
objectForKey:
compare:
isQuickRelaySupported
isLoaded
startBagLoad
donateUserIntentForCallProviderIdentifier:
setTopic:
setShouldIgnoreRingerSwitch:
alertWithConfiguration:
play
initWithBundleIdentifiers:queue:
initWithSuiteName:
synchronize
valueForKey:
setObject:forKey:
emergencyCallbackCapabilitiesDidChange
setEmergencyCallbackCapabilitiesDidChange:
pickedRoute
isHomePodFamily
isFaceTimeProvider
isTelephonyProvider
destinationWithDevice:
uniqueIDOverride
modelIdentifier
isExhausted
initWithBundleIdentifier:pid:
isVisible
currentLayout
elements
configurationForDefaultMainDisplayMonitor
monitorWithConfiguration:
silenceUnknownCallersEnabled
boolForKey:
integerForKey:
handleTrigger:
handleSharePlayTrigger:
defaultCenter
removeObserver:
addObserver:selector:name:object:
momentsStartedRemoteCapture:
handlePendingMessageDidReceiveInviteNotification:
faceTimeShowInCallUIURL
activeConversations
initWithConversation:
faceTimeAppViewLinkDetailsURLForPseudonym:
tu_handoffEligibility
continueHandoffForConversationWithEligibility:
destinationIdIsTemporary
initWithHandle:
executeFetchRequest:
isEquivalentToHandle:
contactStore
actionWithIdentifier:title:options:
categoryWithIdentifier:actions:intentIdentifiers:options:
categoryWithIdentifier:actions:intentIdentifiers:hiddenPreviewsBodyPlaceholder:options:
setCategoryIdentifier:
localizedDeviceCategory
setBody:
setNotificationProviderIdentifier:
tu_conversationHandoffDynamicIdentifierForEligibility:
userInfo
setUserInfo:
normalizedValue
joinRequestForApplicableConversationWithHandoffEligibility:
requestWithIdentifier:content:trigger:
setDestinations:
setDefaultActionURL:
validNetworkReachable
setActiveParticipantHandles:
handles
setSound:
soundWithAlertType:
setAlertTopic:
incomingPendingConversations
supportsConversations
setInterruptionLevel:
setThreadIdentifier:
initWithConversationLink:otherInvitedHandles:sendLetMeInRequest:
standardInvitationPreferencesForLink
setExpirationDate:
getDeliveredNotificationsWithCompletionHandler:
request
destinations
setShouldSuppressDefaultAction:
displayFirstName
supportsCurrentPlatform
isPTT
URLForResource:withExtension:
setCategory:mode:options:error:
setActive:withOptions:error:
setVolume:
isVideoUpgradeFromCall:
supportsRinging
activeParticipantHandles
notificationProviderIdentifier
content
mutableCopy
setShouldIgnoreDowntime:
trigger
requestWithIdentifier:content:trigger:destinations:
notification
actionIdentifier
setAudioSessionProperties:
setMixingVoiceWithMediaEnabled:
startAudioSessionWithCompletionHandler:
code
domain
initWithBool:
tu_dataForAuditToken:
opaqueSessionID
setActivationContext:error:
overrideOutputAudioPort:error:
interruptionPriority
deactivateAndSetInterruptionPriority:error:
setInterruptionPriority:error:
setHostProcessAttribution:error:
setMXSessionProperty:value:error:
currentProcessIdentifier
processStateChanged
setProcessStateChanged:
processStateChangedWithBundleID
setProcessStateChangedWithBundleID:
processIdentifiersForBundleIdentifier:
processStatesForBundleIdentifier:
processStatesForBundleIdentifier:completion:
fetchCurrentProcessStatesForBundleIdentifier:
fetchCurrentProcessStatesForBundleIdentifier:completion:
processStatesForCallSource:
updateInterestedBundleIDs:states:
mostElevatedApplicationStateForPID:
applicationInfoForApplication:
intValue
initWithBundleIDs:states:
setHandler:
handlePendingMessageDidReceiveCancelNotification:
unsignedIntegerValue
initWithUniqueIdentifier:name:
copy
hasRelaySupport:
isSystemProvider
destinationWithRapportPublicIdentifier:
iCloudAccount
messenger
setMessenger:
stopTrackingPendingMember:forConversation:triggeredLocally:
clearPendingMembershipFor:
retrievePendingMembersFor:
pendingMembersByGroup
handleNewPendingMember:responseKey:forConversation:withLink:
handleDelegatedPendingMember:forConversation:withGroupUUID:from:transactionUUID:
handleRemoteApprovalOfMember:forConversation:from:transactionUUID:
handleRemoteRejectionOfMember:forConversation:from:transactionUUID:
handleLocalApprovalOfMember:forConversation:
handleLocalRejectionOfMember:forConversation:
setDateReceivedLetMeIn:
invitedMemberHandles
participantDestinationID
clientContextData
participantIDs
initWithUnsignedLongLong:
shouldIgnoreIDSMessage:fromID:context:
shouldIgnoreIDSResource:metadata:fromID:context:
proxyGroupUpdate:forConversationManager:
defaultManager
temporaryDirectory
storageGuid
copyItemAtURL:toURL:error:
archivedDataWithRootObject:requiringSecureCoding:error:
outgoingResponseIdentifier
fromID
toID
publicIntentAction
fromServerStorage
serverTimestamp
originalTimestamp
doubleValue
initWithContentsOfURL:options:error:
removeItemAtURL:error:
participantIdentifier
participantUpdateType
participantUpdateSubtype
fromServer
serverDate
participantData
unsignedLongLongValue
knownIdentifiersByHandleType
initWithInteger:
flags
setDestinationDevice:
setFlags:
setPasswordType:
setPromptForPasswordHandler:
setAuthCompletionHandler:
activateWithCompletion:
destinationDevice
tryPassword:
allowContactsOnly
isIncoming
initWithIdentifier:context:
donateSignalWithCompletion:
isJunk
tu_defaults
userContext
keyPathForActiveCall
setObject:forContextualKeyPath:responseQueue:withCompletion:
calleeHandlesKey
groupIDKey
groupNameKey
calleeContactIDsKey
bundleIDKey
initWithDataSources:queue:
initWithCalls:
isPhoneCallAudioCategory:
otherSessionsRequestNoRingtoneInterruption
pickRoute:error:
getPickableRoutesForCategory:mode:completion:
bestGuessPickableRoutesForAnyCall
pickableRoutesForTTY
isTTY
initWithVoiceOverObserver:
expediteDeferredEndInterruptionForCallWithUUID:
mainQueue
addObserverForName:object:queue:usingBlock:
stopAudioSession
resetAudioSessionOutputPortOverride
stopPlaying
setCurrentAttributionKey:andApp:
retrieveSessionWithID:
postNotificationName:object:
initWithAvailability:photoRequestSuccessCount:photoRequestFailureCount:medianRequestDuration:meanRequestDuration:
alertDidBeginPlaying:
setShouldRepeat:
setExternalToneFileURL:
setVibrationIdentifier:
setToneIdentifier:
sound
vibration
ignoreMute
callAlert
playWithCompletionHandler:
setPlaybackObserver:
activatedLinks
activatedLinksWithCompletionHandler:
generateLinkWithGroupUUID:invitedHandles:originatorHandle:linkLifetimeScope:completionHandler:
generateLinkWithInvitedHandles:originatorHandle:linkLifetimeScope:completionHandler:
storeReceivedLink:fromHandle:isUpdate:completionHandler:
activateLinkForPseudonym:completionHandler:
activateLinkForPseudonym:updateGroupUUID:updateInvitedHandles:
generateAllInactiveLinksFor:
generateInactiveLinkFor:afterActivation:
getInactiveLinkForHandle:completionHandler:
getInactiveLinkForHandle:
getLinkDescriptorWithPseudonym:includeInactive:completionHandler:
conversationLinkDescriptorsWithGroupUUIDs:error:
validateAllLinks
invalidateLinkWithPseudonym:completionHandler:
removeLink:completionHandler:
renewLinkWithPseudonym:expirationDate:completionHandler:
checkLinkValidityWithPseudonym:completionHandler:
setLinkName:forLink:completionHandler:
encryptLetMeInRequest:link:completionHandler:
encryptLetMeInResponse:pseudonym:responseKeyData:
decryptLetMeInRequest:pseudonym:fromHandle:completionHandler:
decryptLetMeInResponse:pseudonym:requestorKeyAgreement:
addInvitedHandles:pseudonym:completionHandler:
linkSyncStateWithIncludeLinks:completion:
service:pseudonymRemoved:
service:pseudonymUpdated:
activeAccountsChangedForService:
prefixedURI
properties
expirationDate
originator
initWithIdentifier:revision:handle:
setOriginator:
doubleForKey:
initWithDescriptor:
normalizedPhoneNumberHandleForValue:isoCountryCode:
normalizedGenericHandleForValue:
normalizedEmailAddressHandleForValue:
initWithDomain:code:userInfo:
uniqueID
initWithGroupUUID:originator:pseudonym:publicKey:
setActivated:
setCreationDate:
tu_predicateForConversationLinkDescriptorsWithPseudonym:
tu_predicateForConversationLinkDescriptorsWithGroupUUID:
tu_predicateForConversationLinkDescriptorsWithActivated:
andPredicateWithSubpredicates:
orPredicateWithSubpredicates:
creationDate
tu_predicateForConversationLinkDescriptorsWithOriginatorHandle:
tu_predicateForConversationLinkDescriptorsWithExpirationDateAfter:
setGroupUUID:
tu_predicateForConversationLinkDescriptorsWithPrivateKey:
notPredicateWithSubpredicate:
initWithLimit:timeLimit:
initWithIdsService:
initWithPrefixedURI:
verifySignedData:matchesExpectedData:withTokenURI:forAlgorithm:completion:
signData:withAlgorithm:completion:
pushToken
initWithHandle:tokenPrefixedURI:data:encryptedData:
isMomentsDisabled
momentsRequestTimeout
sendMessageWithDictionary:error:
JSONObjectWithData:options:error:
initWithChar:
initWithSessionInfo:userInfo:frameworksToCheck:
startConfigurationWithCompletionHandler:
uniqueProxyIdentifierUUID
newHierarchyTokenFromParentToken:
dateSentInvitation
filteredOutReason
verificationStatus
__swift_objectForKeyedSubscript:
initWithFeatureFlags:
latestRemoteAttributes
startObservingSessions
startActivitySessionFor:with:
stopActivitySession
broadcastAttributes:
deviceForService:
destinationURIs
isRegionBlocked
isFaceTimePhotosRestricted
isFaceTimePhotosEnabled
isPermittedToUseBluetoothAccessories
isPermittedToUsePrivateAPI
initWithStreamToken:requesterID:
callInteractionsDidChangeForManager:
handleCallHistoryDatabaseChangedWithNotification:
predicateForCallsWithUniqueID:
predicateForCallsWithStatusRead:
predicateForCallsWithAnyServiceProviders:
predicateForCallsWithAnyMediaTypes:
iconWithSystemImageName:
actionWithIdentifier:title:options:icon:
_resetCache
setDate:
intent
contentByUpdatingWithProvider:error:
setShouldAuthenticateDefaultAction:
setShouldBackgroundDefaultAction:
participantGroupUUID
defaultActionURL
disconnectedCause
stringFromContact:style:
providerForRecentCall:
assumedIdentity
setAssumedIdentity:
initWithConfiguration:
initWithDataSource:
descriptorForRequiredKeysForStyle:
contactsByHandleForCalls:keyDescriptors:error:
setPerformDialAssist:
setPerformLocalDialAssist:
setDialAssisted:
initWithType:value:
initWithRemoteMembers:otherInvitedHandles:
normalizedHandleWithDestinationID:
faceTimeProvider
predicateForCallsBetweenStartDate:endDate:
callerNetworkName
notificationThreadIdentifier
callerIdIsBlocked
interaction
uniqueId
date
callsWithPredicate:limit:offset:batchSize:
callCountWithPredicate:
speechSynthesizer:didStartSpeechUtterance:
speechSynthesizer:didFinishSpeechUtterance:
speechSynthesizer:didCancelSpeechUtterance:
setMixToUplink:
setNumberOfLoops:
initWithContentsOfURL:error:
setUsesApplicationAudioSession:
audioQueueFlags
setAudioQueueFlags:
initWithString:
setRate:
speakUtterance:
isPlaying
isSpeaking
stopSpeakingAtBoundary:
speechSynthesizer:didPauseSpeechUtterance:
speechSynthesizer:didContinueSpeechUtterance:
speechSynthesizer:willSpeakRangeOfSpeechString:utterance:
carPlayScreenConnectionChanged
setCarPlayScreenConnectionChanged:
isCarPlayConnected
sessionDidConnect:
sessionDidDisconnect:
setSessionObserver:
waitForSessionInitialization
startedConnectionAttemptOnTransport:
cancelledConnectionAttemptOnTransport:
session:didUpdateConfiguration:
valueWithRect:
rectValue
moments
remoteIDSDestinations
setRemoteIDSDestinations:
isRegistered
setIsRegistered:
activeRequestsByTransactionID
setActiveRequestsByTransactionID:
initWithMoments:remoteIDSDestinations:callCenterObserver:
remoteRequesteeIDSDestinationFor:
remoteRequesterIDSDestinationFor:
setActiveRequest:forTransactionID:
removeActiveRequestForTransactionID:
localSenderIdentity
contains:
initWithKeysToFetch:
predicateForContactsMatchingHandleStrings:
setPredicate:
executeFetchRequest:error:
storeWithOptions:
suggestedNamesForDestinationID:onlySignificant:error:
__swift_setObject:forKeyedSubscript:
makeLocalRouteController
makePairedHostDeviceRouteController
routesByUniqueIdentifier
routesDidChangeHandler
setRoutesDidChangeHandler:
routeWasPickedHandler
setRouteWasPickedHandler:
timedOutPickingRouteHandler
setTimedOutPickingRouteHandler:
pickRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
clearState
handleUpdatedPairedHostDeviceRoutes:
sharedAudioSystemController
audioRouteInformationChangedWithNotification:
audioInterruptionPropertiesChangedWithNotification:
idsDeviceIdentifier
model
publicIdentifier
mediaSystemIdentifier
mediaSystemName
effectiveIdentifier
localDevice
setLocalDeviceUpdatedHandler:
setDeviceFoundHandler:
setDeviceLostHandler:
setDeviceChangedHandler:
isWiFiAvailable
isCellularDataAvailable
nonWifiFaceTimeAvailable
dataActiveAndReachable
wifiAllowedForBundleId:
wiFiActiveAndReachable
cellularDataEnabledForBundleId:
updateConversation:
removeConversation:
enumerateActiveConversations:
initWithArray:
ringtoneSoundURL
initWithUUID:isVideo:handle:
initWithUUID:handle:
initWithVoucherManager:
sanitize:completion:
isEqualToHandle:
initWithIdentifier:version:
hasActiveAudioSession
isBluetooth
isWiredHeadset
isWiredHeadphones
sendData:toDestinations:priority:options:identifier:error:
revision
standardUserDefaults
underLimitForItem:
noteItem:
setBool:forKey:
dataWithPropertyList:format:options:error:
idsPeersForHandle:video:completionHandler:
destinationIDsCanUseV2Blobs:
currentIDStatusForDestinations:service:listenerID:queue:completionBlock:
requiredIDStatusForDestinations:service:listenerID:queue:completionBlock:
currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:
valueForCapability:
__imHexString
multiwaySupported
multiwayBlocked
isOnHold
audioSessionID
generatePreviewImageFromData:completionHandler:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
initWithCallFilterController:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
momentCapturedForStreamToken:requesterID:reply:
isFaceTimePhotosXPCServiceEnabled
userNotificationProviderServerXPCInterface
voicemailsChangedWithNotification:
onlineStatusChangedWithNotification:
subscriptionStateChangedWithNotification:
registerWithCompletionHandler:
setBadgeString:withCompletionHandler:
removeDeliveredNotificationsWithIdentifiers:
replaceContentForRequestWithIdentifier:replacementContent:completionHandler:
addNotificationRequest:withCompletionHandler:
setNotificationCategories:
setWantsNotificationResponsesDelivered
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
voicemailInfoAvailableNotification:voicemailInfo:
getSubscriptionInfoWithError:
getVoicemailInfo:completion:
integerValue
setAttachments:
initWithContactProvider:
voicemailStartCallIntentByHandleForHandles:
hasAudio
setAudio:
attachmentWithIdentifier:URL:options:error:
isVoiceMailMWI
count
available
handleWithDestinationID:
trashVoicemail:
countOfVoicemailsPassingTest:
mailboxType
isRead
messagesForMailboxType:limit:offset:error:
messagesForMailboxType:read:limit:offset:error:
dataForVoicemailWithIdentifier:
isTranscriptionEnabled
isSubscribed
isOnline
isMessageWaiting
callbackDestinationID
senderDestinationID
telephonyProvider
contacts
transcriptionState
dataURL
duration
voicemailDatabaseReset:
predicateForCallsWithStatusOriginated:
predicateForCallsWithRemoteParticipantCount:
predicateForCallsWithRemoteParticipantHandleValue:
predicateForCallsWithRemoteParticipantHandleNormalizedValue:
initWithType:value:normalizedValue:
startTrackingCollaborationIdentifier:collaborationURL:cloudKitAppBundleIDs:isLocallyAdded:toConversationUUID:completionHandler:
highlightAdded:applicationRecord:cloudKitAppBundleIDs:isLocallyAdded:toConversationUUID:
highlightRemoved:
highlightOpened:
documentStateForHighlightIdentifier:
initWithBundleIdentifier:allowPlaceholder:error:
appLinksWithURL:limit:error:
targetApplicationRecord
setFilteredOutReason:
currentSIMsWithError:
initWithSoundType:provider:video:region:
attemptToPlayDescriptor:completion:
isPendingConversation
sendEventID:event:destinationID:options:completion:
registerEventID:options:handler:
registerRequestID:options:handler:
mediaRouteIdentifier
activeDevices
sendRequestID:request:destinationID:options:responseHandler:
verifiedIdentity
controlFlags
setControlFlags:
moments:didEndProcessingRequest:url:error:
sendManualLaunchNeededEventWithActivitySession:
sendManualLaunchAttemptEventWithActivitySession:
stringGUIDForObject:
isRTT
context
initWithService:account:accessGroup:
readPasswordAndReturnError:
savePassword:error:
deleteItemAndReturnError:
audioDeviceController
handleContinueHandoffAudioRouteNotification:
receiverRoute
speakerRoute
routeIdentifierChangedNotification
continueHandoffAudioRouteNotification
pickRoute:
isReceiver
isSpeaker
addDelegate:
avcRequest
initWithAVCRequest:session:
initWithQueue:conversationManager:
nearbyTVDevices
activeSplitSessionTVDevice
inviteTV:toConversation:completion:
disconnectTV:completion:
keyEnumerator
initWithBytesNoCopy:length:freeWhenDone:
base64EncodedStringWithOptions:
isEquivalentToDeviceHandle:
kickMember:conversation:
ams_sharedAccountStore
ams_activeiCloudAccount
ams_activeiTunesAccount
ams_altDSID
initWithHandle:nickname:
setIsLightweightMember:
addRemoteMembers:toConversation:
setLightweightPrimaryParticipantIdentifier:
initWithName:knownIdentifiers:deviceModel:
isEligibleForHandoff
removeObjectForKey:
mapTableWithKeyOptions:valueOptions:
plistRepresentation
@16@0:8
@24@0:8@16
@24@0:8^{_NSZone=}16
v20@0:8I16
v20@0:8B16
B16@0:8
v24@0:8Q16
B24@0:8@16
v24@0:8@16
Q16@0:8
I16@0:8
v16@0:8
@"NSString"
{?="identifier"b1"version"b1}
#16@0:8
@24@0:8Q16
@"NSMutableArray"
{?="version"b1}
@"NSData"
@36@0:8i16@20@28
@36@0:8@16i24@28
@28@0:8@16B24
v24@0:8d16
i16@0:8
v20@0:8i16
@20@0:8i16
i24@0:8@16
d16@0:8
@"CSDMessagingConversationLinkGeneratorDescriptor"
@"CSDMessagingHandle"
{?="creationDateEpochTime"b1"pseudonymExpirationDateEpochTime"b1"linkLifetimeScope"b1"isActivated"b1}
@"CSDCallStateController"
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16d24f32f36f40i44
v32@0:8@16q24
v48@0:8@"BKSAccelerometer"16d24f32f36f40i44
v32@0:8@"BKSAccelerometer"16q24
v32@0:8@16@24
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
q16@0:8
v24@0:8q16
@"BKSAccelerometer"
@"<CSDCallCenterObserver>"
v32@0:8@16@"NSString"24
@"NSMapTable"
@"NSObject<OS_dispatch_queue>"
v32@0:8@16i24I28
v32@0:8i16I20@24
v24@0:8@?16
@"BKSProcessAssertion"
v36@0:8@16B24@28
v40@0:8@16@24@32
v28@0:8@16f24
v28@0:8@16B24
v40@0:8@16@24q32
v36@0:8@"<CSDAVConferenceProvider>"16B24@"NSError"28
v40@0:8@"<CSDAVConferenceProvider>"16@"NSError"24@"NSDictionary"32
v24@0:8@"<CSDAVConferenceProvider>"16
v32@0:8@"<CSDAVConferenceProvider>"16@"NSData"24
v28@0:8@"<CSDAVConferenceProvider>"16f24
v28@0:8@"<CSDAVConferenceProvider>"16B24
v40@0:8@"<CSDAVConferenceProvider>"16@"NSData"24q32
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
v24@0:8@"CSDAVConferenceConfiguration"16
v24@0:8@"CSDIDSTransport"16
v24@0:8@"VCCapabilities"16
v24@0:8@"NSData"16
v32@0:8@"NSString"16@"NSString"24
@"<CSDAVConferenceDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceDelegate>"16
@"NSObject<OS_dispatch_queue>"16@0:8
v24@0:8@"NSObject<OS_dispatch_queue>"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
@"NSError"16@0:8
@"NSDate"16@0:8
v32@0:8q16@24
v20@0:8f16
q32@0:8@16^@24
@?16@0:8
@"<CSDAVConferenceDelegate>"
@"NSDate"
@"NSNumber"
@"NSDictionary"
@"NSError"
@"CSDAVConferenceConfiguration"
@"<CSDAVConferenceProvider>"
{CGSize="width"d"height"d}
@"VCCapabilities"
@"NSUUID"
@"RTCSecureHierarchyToken"
@"CSDMessagingConversationParticipantAssociation"
{?="identifier"b1"avMode"b1"options"b1"sharePlayProtocolVersion"b1"version"b1"guestModeEnabled"b1"isGFTDowngradeToOneToOneAvailable"b1"isGondolaCallingAvailable"b1"isLightweight"b1"isMirageAvailable"b1"isMomentsAvailable"b1"isScreenSharingAvailable"b1"isUPlusNDowngradeAvailable"b1}
i24@0:8q16
@32@0:8@16Q24
v24@0:8@"TUCallProviderManager"16
v36@0:8I16@20@28
v28@0:8I16@20
v36@0:8I16@"NSString"20@"NSString"28
v28@0:8I16@"NSString"20
v44@0:8@16@24Q32B40
v48@0:8@16@24@32@40
v48@0:8@16@24Q32@40
v36@0:8@16@24B32
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
@32@0:8@16@24
v40@0:8@16@24B32B36
@"CSDUserActivityCommunicator"
@"CSDUserActivity"
@"TUFeatureFlags"
B36@0:8@16@24B32
q32@0:8@16@24
B40@0:8@16@24@32
B32@0:8@16@24
B24@0:8@"TUHandle"16
B36@0:8@"TUHandle"16@"NSString"24B32
q32@0:8@"NSArray"16@"NSString"24
B24@0:8@"CSDCall"16
B40@0:8@"NSString"16@"NSString"24@"NSString"32
B36@0:8@"NSArray"16@"NSString"24B32
B32@0:8@"NSArray"16@"NSString"24
v40@0:8@16@24Q32
v36@0:8@16@24i32
v44@0:8@16@24@32B40
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
v32@0:8@"CSDReportingController"16@"CSDMomentsUsageReport"24
v40@0:8@"CSDReportingController"16@"TURoute"24@"CSDCall"32
v36@0:8@"CSDReportingController"16@"NSString"24i32
v32@0:8@"CSDReportingController"16@"TUConversation"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"TUConversation"32
v40@0:8@"CSDReportingController"16@"NSArray"24@"NSUUID"32
v32@0:8@"CSDReportingController"16@"CSDIDSChat"24
v32@0:8@"CSDReportingController"16@"NSString"24
v44@0:8@"CSDReportingController"16@"NSUUID"24@"RTCSecureHierarchyToken"32B40
v48@0:8@"CSDReportingController"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v32@0:8@"CSDReportingController"16@"TUConversationLink"24
v36@0:8@"CSDReportingController"16@"TUConversation"24B32
@"<CSDReporterDataSource>"16@0:8
v24@0:8@"<CSDReporterDataSource>"16
v28@0:8@"<CSDProximitySensorObserver>"16B24
v24@0:8@"TURouteController"16
@40@0:8@16@24@32
@64@0:8@16@24@32@40@48@56
@"TURouteController"
@"<CSDOrientationObserver>"
@"<CSDProximitySensorObserver>"
@"<CSDVoiceOverObserver>"
v24@0:8@"IMAVChat"16
v32@0:8@"IMHandle"16q24
v24@0:8@"CXProvider"16
B32@0:8@"CXProvider"16@"CXTransaction"24
v32@0:8@"CXProvider"16@"CXStartCallAction"24
v32@0:8@"CXProvider"16@"CXAnswerCallAction"24
v32@0:8@"CXProvider"16@"CXEndCallAction"24
v32@0:8@"CXProvider"16@"CXSetHeldCallAction"24
v32@0:8@"CXProvider"16@"CXSetMutedCallAction"24
v32@0:8@"CXProvider"16@"CXSetGroupCallAction"24
v32@0:8@"CXProvider"16@"CXPlayDTMFCallAction"24
v32@0:8@"CXProvider"16@"CXAction"24
v32@0:8@"CXProvider"16@"AVAudioSession"24
v32@0:8@"CXProvider"16@"CXSendMMIOrUSSDCodeAction"24
v32@0:8@"CXProvider"16@"CXJoinCallAction"24
v32@0:8@"CXProvider"16@"CXSetTTYTypeCallAction"24
v32@0:8@"CXProvider"16@"CXSetSendingVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetSharingScreenCallAction"24
v32@0:8@"CXProvider"16@"CXSetScreenShareAttributesCallAction"24
v32@0:8@"CXProvider"16@"CXEnableVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetRelayingCallAction"24
v32@0:8@"CXProvider"16@"CXPullCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationSizeCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationStateCallAction"24
B24@0:8@"NSUUID"16
@"NSUUID"24@0:8@"NSUUID"16
v24@0:8@"NSUUID"16
v28@0:8@16I24
v56@0:8{CGSize=dd}16{CGSize=dd}32@48
I24@0:8q16
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<CSDFaceTimeProviderDelegateManagerDelegate>"
@"CXProvider"
@"NSMutableOrderedSet"
Vv24@0:8@16
Vv24@0:8@"NSArray"16
v24@0:8@"<TUCallHistoryControllerXPCClient>"16
@"CSDCallHistoryController"
@"CSDClientManager"
v44@0:8@16B24@28@36
v36@0:8@16@24I32
v36@0:8@16S24@28
v44@0:8@16@24I32S36B40
v32@0:8@"CSDIDSGroupSession"16@"NSDictionary"24
v44@0:8@"CSDIDSGroupSession"16B24@"NSSet"28@"NSError"36
v32@0:8@"CSDIDSGroupSession"16@"NSError"24
v24@0:8@"CSDIDSGroupSession"16
v36@0:8@"CSDIDSGroupSession"16@"NSError"24I32
v36@0:8@"CSDIDSGroupSession"16S24@"NSError"28
v32@0:8@"CSDIDSGroupSession"16@"NSArray"24
v44@0:8@"CSDIDSGroupSession"16@"NSArray"24I32S36B40
v40@0:8@"CSDIDSGroupSession"16@"NSData"24@"IDSGroupSessionActiveParticipant"32
v40@0:8@16@24@?32
@40@0:8@16Q24@32
v48@0:8@16Q24@32@?40
v32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24
B32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24
v32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivityEvent"24
v40@0:8@"<CPActivitySessionManager>"16@"NSString"24@?<v@?@>32
v40@0:8@"<CPActivitySessionManager>"16@"NSArray"24@"NSString"32
@"TUConversationParticipant"40@0:8@"<CPActivitySessionManager>"16Q24@"NSString"32
v48@0:8@"<CPActivitySessionManager>"16Q24@"NSString"32@?<v@?@"TUConversationParticipant">40
@"NSString"24@0:8@"<CPActivitySessionManager>"16
v48@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v36@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24B32
v40@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24Q32
v28@0:8@"<CPAudioRoutePolicyManager>"16B24
v40@0:8@16B24B28@32
v44@0:8@16q24B32@36
v52@0:8Q16B24q28q36q44
v56@0:8Q16B24B28q32q40q48
v36@0:8Q16B24q28
v40@0:8Q16q24q32
v28@0:8Q16B24
v32@0:8Q16q24
v36@0:8@"<CSDAVCSession>"16B24@"NSError"28
v32@0:8@"<CSDAVCSession>"16@"NSError"24
v40@0:8@"<CSDAVCSession>"16B24B28@"NSError"32
v32@0:8@"<CSDAVCSession>"16q24
v44@0:8@"<CSDAVCSession>"16q24B32@"NSError"36
v24@0:8@"<CSDAVCSession>"16
@152@0:8@16@24@32@40@48B56@60@68@76@84@92@100@108@116@124B132Q136@144
@168@0:8@16@24@32@40@48B56@60@68@76@84@92@100@108@116@124B132Q136@144@152@160
v28@0:8B16@20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v32@0:8Q16@24
v48@0:8@16@24@32B40B44
B28@0:8@16B24
@20@0:8B16
v28@0:8B16Q20
v32@0:8q16Q24
v28@0:8S16@20
i28@0:8@16i24
v32@0:8@16@?24
@"NSSet"
@"<CSDConversationDelegate>"
@"TUConversationLink"
@"TUConversationMember"
@"TUHandle"
@"NSArray"
@"TUConversationActivitySession"
@"CPActivitySessionManager"
@"TUConversationReport"
@"TUConversationParticipantAssociation"
@"TUConversationHandoffEligibility"
@"<TUFeatureFlags>"
@"NSMutableDictionary"
@"NSMutableSet"
@"CSDIDSGroupSession"
@"<CSDAVCSession>"
@"TUVideoDeviceController"
@"CSDFaceTimeInviteDemuxer"
@"CSDConversationParticipant"
@"CPApplicationPolicyManager"
@"CPAudioRoutePolicyManager"
@"CPSystemStateObserver"
@"<CSDConversationServerBag>"
@"NSObject"
@"TUCallScreenShareAttributes"
@"TUConversationProvider"
@"CXCallFailureContext"
{?="supportsAddCall"b1"supportsDTMF"b1"supportsGrouping"b1"supportsHolding"b1"supportsSendingToVoicemail"b1"supportsUnambiguousMultiPartyState"b1"supportsUngrouping"b1}
v28@0:8@"CSDMessagingRelayMessage"16B24
v24@0:8@"CSDMessagingRelayMessage"16
v32@0:8@"CSDMessagingRelayMessage"16@?<v@?@"NSDictionary">24
@28@0:8i16@20
C16@0:8
v20@0:8C16
{?="type"b1}
@"CSDMessagingConversationParticipant"
v24@0:8@"CSDPauseDigitsQueue"16
@52@0:8@16@24@32B40B44i48
@44@0:8@16@24@32B40
{?=[8I]}16@0:8
@"TUParticipant"
@"NSURL"
@"<CSDProviderCallDelegate>"
@"CXCallSource"
@"CXAbstractProviderSource"
@"CSDProviderDisplayMonitor"
@"CXCallUpdate"
@"CSDPauseDigitsQueue"
@"TUCallCenter"
@"NSObject<OS_dispatch_source>"
@"CSDLetMeInRequestorKeyAgreement"
v24@0:8@"<CSDStatusBarResolver>"16
@"<CSDStatusBarResolver>"
@"STCallingStatusDomainPublisher"
@"STCallingStatusDomainCallDescriptor"
v48@0:8@16@24q32@?40
v24@0:8@"TUNearbyDeviceHandle"16
v48@0:8@"TUConversation"16@"TUNearbyDeviceHandle"24q32@?<v@?B@"NSError">40
v24@0:8@?<v@?@"NSSet"@"NSError">16
v24@0:8@?<v@?@"TUNearbyDeviceHandle"@"NSError">16
v40@0:8@"TUNearbyDeviceHandle"16@"NSUUID"24@?<v@?B@"NSError">32
v32@0:8@"TUNearbyDeviceHandle"16@?<v@?B@"NSError">24
v24@0:8@"<TUNeighborhoodActivityConduitXPCClient>"16
@"CSDNeighborhoodActivityConduit"
@"CSDClient"
@40@0:8@16@24^@32
@"<CSDCarrierBundlePhoneNumberProviderControllerDelegate>"
@"CoreTelephonyClient"
v36@0:8@16I24@28
v40@0:8@16@24I32B36
v24@0:8@"IDSGroupSession"16
v36@0:8@"IDSGroupSession"16I24@"NSError"28
v40@0:8@"IDSGroupSession"16@"NSArray"24@"NSError"32
v40@0:8@"IDSGroupSession"16@"NSDictionary"24@"NSError"32
v40@0:8@"IDSGroupSession"16@"IDSGroupSessionParticipantUpdate"24@"NSError"32
v32@0:8@"IDSGroupSession"16@"NSError"24
v32@0:8@"IDSGroupSession"16@"NSDictionary"24
v36@0:8@"IDSGroupSession"16@"NSArray"24B32
v40@0:8@"IDSGroupSession"16@"NSArray"24I32B36
v44@0:8@"IDSGroupSession"16@"NSArray"24I32S36B40
v36@0:8@"IDSGroupSession"16S24@"NSError"28
v32@0:8@"IDSGroupSession"16@"NSArray"24
v40@0:8@"IDSGroupSession"16@"NSData"24@"IDSGroupSessionActiveParticipant"32
v28@0:8@"IDSGroupSession"16I24
v32@0:8@"IDSSession"16@"NSString"24
v24@0:8@"IDSSession"16
v36@0:8@"IDSSession"16I24@"NSError"28
v32@0:8@"NSString"16@"NSData"24
v32@0:8@"IDSSession"16@"NSArray"24
v40@0:8@"IDSSession"16@"NSString"24@"NSData"32
v32@0:8@"IDSSession"16@"NSSet"24
v36@0:8@"IDSSession"16@"NSSet"24B32
v52@0:8@16@24@32@40B48
Q32@0:8Q16@24
v40@0:8Q16@24@?32
v36@0:8@"NSArray"16@"NSData"24B32
v52@0:8@"NSArray"16@"NSData"24@"NSArray"32@"NSArray"40B48
v24@0:8@"NSArray"16
v32@0:8@"NSString"16@?<v@?@>24
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"TUConversationActivitySessionContainer"16@"NSData"24
Q32@0:8Q16@"NSData"24
v40@0:8Q16@"NSData"24@?<v@?Q>32
v32@0:8@"NSSet"16@"NSSet"24
v28@0:8S16@"<IDSDestinationProtocol>"20
v28@0:8S16@"NSArray"20
@"<CSDIDSGroupSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSGroupSessionProviderDelegate>"16
@"NSArray"16@0:8
@"NSSet"16@0:8
@68@0:8@16@24@32@40@48B56B60B64
@"IDSGroupSession"
@"<CSDIDSGroupSessionProviderDelegate>"
@"IDSAccount"
@36@0:8@16B24@28
@60@0:8@16B24@28@36@44@52
@52@0:8@16@24@32i40@44
v36@0:8@16B24@?28
@"<CSDRelayIDSDualSessionDelegate>"
@"IDSDestination"
@"IDSDevice"
@"<CSDCallHistoryControllerDelegate>"
@"CSDMessagingLinkSyncCheckInMessage"
@"CSDMessagingLinkSyncRecoverMessage"
@"CSDMessagingLinkSyncUpdateMessage"
{?="type"b1"version"b1}
v32@0:8@16^{__CFString=}24
@24@0:8^{__CFString=}16
@"<CSDThumperCapabilitiesMonitorDataSource>"
@"NPSDomainAccessor"
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
v68@0:8@16@24@32@40q48@56B64
v76@0:8@16@24@32@40q48@56B64@68
v72@0:8@16@24@32@40@48@56@64
v48@0:8@16@24d32@40
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v76@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64@"IDSMessageContext"68
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v48@0:8@"IDSService"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSService"16q24
@"<CSDAccountsControllerDelegate>"
v32@0:8@"NSData"16@"NSSet"24
v28@0:8@"NSData"16B24
@"<CSDIDSDualSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSDualSessionProviderDelegate>"16
@"<CSDIDSDualSessionProviderDelegate>"
@"IDSSession"
Vv32@0:8@16@?24
Vv24@0:8@?16
Vv48@0:8@16d24@32@?40
Vv48@0:8@16@24@32@?40
Vv40@0:8@16@24@?32
Vv32@0:8@"NSString"16@?<v@?@"TUConversationProvider">24
Vv24@0:8@?<v@?@"NSArray">16
Vv32@0:8@"NSString"16@?<v@?@"NSError">24
Vv32@0:8@"TUConversationProvider"16@?<v@?@"NSError">24
Vv48@0:8@"TUConversationProvider"16d24@"NSString"32@?<v@?@"TUHandle"@"NSDate"@"NSError">40
Vv48@0:8@"TUHandle"16@"TUConversationProvider"24@"NSDate"32@?<v@?B@"NSDate"@"NSError">40
Vv40@0:8@"TUHandle"16@"TUConversationProvider"24@?<v@?B@"NSError">32
v24@0:8@"<TUConversationProviderManagerXPCClient>"16
@"CSDConversationProviderManager"
Vv24@0:8@?<v@?@"NSDictionary"@"NSDictionary"@"NSDictionary">16
Vv24@0:8@"NSString"16
Vv32@0:8@"TUDialRequest"16@?<v@?@"NSError">24
v24@0:8@"<TUCallProviderManagerXPCClient>"16
v24@0:8@"CSDCallProviderManager"16
@"CSDCallProviderManager"
v28@0:8@16i24
v28@0:8@"CSDIDSDualSession"16i24
v24@0:8@"CSDIDSDualSession"16
v36@0:8@"CSDIDSDualSession"16@"NSArray"24B32
v32@0:8@"CSDIDSDualSession"16@"NSData"24
v40@0:8@16q24@32
v24@0:8@"<CSDAVConference>"16
v40@0:8@"<CSDAVConference>"16q24@"NSError"32
v28@0:8@"<CSDAVConference>"16B24
v32@0:8@"<CSDAVConference>"16@"NSData"24
v28@0:8@"<CSDAVConference>"16f24
v32@0:8@"<CSDAVConference>"16q24
v40@0:8@"<CSDAVConference>"16@"NSData"24q32
v32@0:8@"<CXVideoAspectRatioDescriptor>"16@?<v@?@"NSArray"B>24
v24@0:8@"<CXVideoAspectRatioDescriptor>"16
@"<CSDIDSChatDelegate>"16@0:8
v24@0:8@"<CSDIDSChatDelegate>"16
@"NSUUID"16@0:8
@"TUHandle"16@0:8
@"CXCallFailureContext"16@0:8
@36@0:8@16@24B32
@44@0:8@16@24B32@36
@48@0:8@16@24@32B40B44
v32@0:8@16B24B28
@"<CSDIDSChatDelegate>"
@"CSDExternalIDSDualSession"
@"<CSDAVConference>"
v32@0:8@"CXCallDirectoryNSExtensionManager"16@"NSArray"24
@"<CSDDeviceLockStateObserver>"
@"CXCallDirectoryManager"
@"CXCallDirectoryNSExtensionManager"
f16@0:8
@"CSDMessagingAVConferenceInviteData"
@"CSDMessagingCallCapabilitiesState"
@"CSDMessagingCallModel"
@"CSDMessagingCallModelState"
@"CSDMessagingCallDisplayContext"
@"CSDMessagingCallProvider"
@"CSDMessagingRoute"
{?="hostCallCreationTime"b1"messageSendTime"b1"hardPauseState"b1"protoDisconnectedReason"b1"protoOriginatingUIType"b1"protoPriority"b1"protoProtocolVersion"b1"protoService"b1"protoSoundRegion"b1"protoTTYType"b1"receivedMessageType"b1"requestActionType"b1"systemVolume"b1"type"b1"protoCannotBeAnswered"b1"protoCannotRelayAudioOrVideoOnPairedDevice"b1"protoEmergency"b1"protoExpectedEndpointOnMessagingDevice"b1"protoFailureExpected"b1"protoNeedsManualInCallSounds"b1"protoRemoteUplinkMuted"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoSupportsEmergencyFallback"b1"protoSupportsTTYWithVoice"b1"protoUplinkMuted"b1"protoVideo"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8@?<q@?@"NSString"@"NSString">16
B32@0:8@"NSString"16@"NSString"24
@"DNDEventBehaviorResolutionService"
@"TUCallProviderManager"
^I16@0:8
I24@0:8Q16
v32@0:8^I16Q24
{?="list"^I"count"Q"size"Q}
{?="maximumCallGroups"b1"maximumCallsPerCallGroup"b1"supportsAudioAndVideo"b1"supportsAudioOnly"b1"supportsEmergency"b1"supportsRecents"b1"supportsVoicemail"b1}
v48@0:8@"CSDRelayIDSMessenger"16@"CSDMessagingRelayMessage"24@"IDSDestination"32@"IDSDevice"40
v36@0:8@"CSDRelayIDSMessenger"16@"NSArray"24B32
q24@0:8@16
B24@0:8@"CSDMessagingRelayMessage"16
B32@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24
q24@0:8@"CSDMessagingRelayMessage"16
@"NSArray"24@0:8@"CSDMessagingRelayMessage"16
q24@0:8q16
v28@0:8i16@20
v28@0:8@16C24
B20@0:8i16
v32@0:8@?16@24
@"<CSDRelayMessagingControllerDelegate>"
@"<CSDRelayMessagingControllerClientMessagingDelegate>"
@"<CSDRelayMessagingControllerHostMessagingDelegate>"
@"<CSDRelayMessagingControllerCommonMessagingDelegate>"
@"CSDRelayIDSSessionMessenger"
@"CSDRelayPairedDeviceMessenger"
@"<CSDCallContainer>"
v24@0:8@"TUConfiguration"16
v28@0:8i16@?20
@"CSDConversationProviderManagerXPCServer"
@"CSDCallStateMonitor"
@"CSDRelayMessagingController"
@"CSDRelayClientController"
@"CSDRelayHostController"
@"CSDRelayCommonController"
@"CSDCallDirectoryManager"
@"CSDVoIPApplicationController"
@"CSDMomentsController"
@"TUUserConfiguration"
@"CSDUserNotificationController"
@"CSDVoiceOverObserver"
@"CSDDeviceLockStateObserver"
@"CSDOrientationMonitor"
@"CSDProximityController"
@"CSDProximitySensorObserver"
@"CSDRaiseToAnswerController"
@"CSDPowerAssertionManager"
@"CSDAudioController"
@"CSDHandoffAudioController"
@"CSDStatusBarManager"
{CGSize=dd}24@0:8@16
B24@0:8@"<CSDIDSChat>"16
{CGSize=dd}24@0:8@"<CSDIDSChat>"16
v24@0:8@"<CSDIDSChat>"16
v32@0:8@"<CSDIDSChat>"16@"NSData"24
v28@0:8@"<CSDIDSChat>"16f24
v32@0:8@"<CSDIDSChat>"16q24
@"<CSDIDSProviderDelegateCapabilities>"
v40@0:8@"<CSDIDSDualSessionProvider>"16@"NSString"24@"NSData"32
v24@0:8@"<CSDIDSDualSessionProvider>"16
v36@0:8@"<CSDIDSDualSessionProvider>"16@"NSSet"24B32
v36@0:8@"<CSDIDSDualSessionProvider>"16I24@"NSError"28
@28@0:8@16i24
v32@0:8@16i24B28
@"<CSDIDSDualSessionDelegate>"
@"<CSDIDSDualSessionProvider>"
@"<CSDRelayIDSMessengerDelegate>"
@56@0:8@16@24@32q40@48
v48@0:8@16@24@32@?40
@"<CSDFaceTimeIDSProviderDelegateCapabilities>"
@"NSOrderedSet"
@"<CSDFaceTimeIDSProviderDelegateServerBag>"
v40@0:8@"NSURL"16@"NSSet"24@"NSDictionary"32
v32@0:8@"NSURL"16@?<v@?@"NSURL">24
@"<CSDFileTransferringDelegate>"16@0:8
v24@0:8@"<CSDFileTransferringDelegate>"16
v48@0:8Q16@24@32@?40
@"<CSDFileTransferringDelegate>"
@"IDSService"
@32@0:8@16d24
@"<CSDCallSourceFetcherDataSource>"
r^{__CFString=}16@0:8
v32@0:8B16B20@24
v32@0:8@"IDSDevice"16@?<v@?B@"NSString">24
v32@0:8@"IDSDevice"16@"NSUUID"24
v24@0:8@"IDSDevice"16
v24@0:8@?<v@?B>16
v40@0:8@"NSNumber"16@"NSString"24@?<v@?B>32
v32@0:8B16B20@"IDSDevice"24
{?="protoTimeConnected"b1"protoDisconnectedReason"b1"protoOriginatingUIType"b1"protoService"b1"protoSoundRegion"b1"protoStatus"b1"protoTTYType"b1"protoConferenced"b1"protoEmergency"b1"protoFailureExpected"b1"protoHasSentInvitation"b1"protoNeedsManualInCallSounds"b1"protoOutgoing"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoSupportsEmergencyFallback"b1"protoSupportsTTYWithVoice"b1"protoUplinkMuted"b1"protoVideo"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8i16B20
@"TUCallProvider"
@"TUCallDisplayContext"
@"<CSDRelayCallDelegate>"
v24@0:8@"CSDCallHistoryManager"16
Vv32@0:8@16@24
Vv32@0:8@"NSUUID"16@"NSUUID"24
v24@0:8@"<TUCallHistoryManagerXPCClient>"16
@"CSDCallHistoryManager"
@"<CSDPauseDigitsQueueDelegate>"
@"RBSAssertion"
@28@0:8d16B24
v48@0:8@16@24d32Q40
v52@0:8@16d24B32Q36@?44
{?="shouldAssociateScene"b1}
@"CSDMessagingConversationActivitySession"
@"CSDMessagingConversationMessage"
{?="sharePlayProtocolVersion"b1"version"b1"isGFTDowngradeToOneToOneAvailable"b1"isGondolaCallingAvailable"b1"isLightweight"b1"isMirageAvailable"b1"isMomentsAvailable"b1"isScreenSharingAvailable"b1"isUPlusNDowngradeAvailable"b1"video"b1"videoEnabled"b1}
v40@0:8@"NSURL"16@"NSURL"24@?<v@?@"NSString"@"NSError">32
v32@0:8@"NSURL"16@?<v@?@"NSString"@"NSError">24
v56@0:8@16@24@32q40@48
v40@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32
v56@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"<CSDDualFaceTimeProviderDelegate>"16@"CXTransaction"24@?<v@?@"NSError">32
v48@0:8@"<CSDFaceTimeProviderDelegate>"16@"TUConversation"24@"NSData"32@?<v@?@"NSUUID"BBB@"NSUUID"@"TUHandle"@"NSString">40
B32@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24
@"CSDConversationManagerXPCServer"
@"CPConversationManagerHost"
@"CPBiomeSessionDonator"
@"CPApplicationMonitor"
@"CSDNeighborhoodActivityConduitXPCServer"
@"CSDFaceTimeIDSProviderDelegate"
@"CSDFaceTimeIMAVProviderDelegate"
@"CSDFaceTimeConversationProviderDelegate"
@"CSDGFTServiceConversationProviderDelegate"
@"CSDConversationManager"
@"CSDProviderCallDataSource"
@"CSDVoIPApplicationMessage"
v36@0:8@"NSDictionary"16B24@?<v@?>28
@"CSDMessagingConversationActivity"
{?="creationDateEpochTime"b1}
@"CSDMessagingPersonNameComponents"
@"<CSDStatusBarResolverDelegate>"16@0:8
v24@0:8@"<CSDStatusBarResolverDelegate>"16
@"CSDCall"16@0:8
@"TUConversation"16@0:8
@"STCallingStatusDomainCallDescriptor"16@0:8
@"<CSDStatusBarResolverDelegate>"
@"<CSDProcessObserverProtocol>"
@"NSTimer"
v56@0:8@16@24@32@?40@?48
@32@0:8@16^@24
B32@0:8@16^@24
@"NSFileManager"
v36@0:8B16B20@24B32
@"<CSDPinExchangeDelegate>"
{?="primaryIdentifier"b1"type"b1"version"b1}
Vv20@0:8B16
Vv28@0:8B16@20
Vv36@0:8B16@20@28
Vv28@0:8B16@"NSString"20
Vv28@0:8B16@"NSUUID"20
Vv36@0:8B16@"NSString"20@"NSUUID"28
Vv24@0:8@"NSUUID"16
Vv24@0:8@?<v@?@"TUCallCapabilitiesState">16
v24@0:8@"<TUCallCapabilitiesXPCClient>"16
@"CSDThumperAccount"24@0:8@"NSString"16
@"TUThumperCTCapabilitiesState"24@0:8@"NSString"16
C32@0:8@16@24
v36@0:8B16@20@28
@24@0:8B16B20
@"NSXPCListener"
@"CSDAccountsController"
@"CSDTelephonyCallCapabilities"
@"CSDThumperPushHandler"
@"CSDPinExchangeController"
@"CSDThumperCapabilitiesMonitor"
@"<CSDIDSService>"
@"TUCallCapabilitiesState"
v24@0:8@"TUDynamicCallDisplayContext"16
Vv24@0:8@"NSNumber"16
@"<CSDCallDelegate>"
@"CSDCallDataSource"
@"TUDialRequest"
@"CSDIDSTransport"
@"TUDynamicCallDisplayContext"
v24@0:8@"TUAudioDeviceController"16
B32@0:8@"NSString"16@"TUCall"24
@"TURoute"24@0:8@"TUCall"16
B24@0:8@"TUCall"16
@"CARAutomaticDNDStatus"
@"CSDMessagingVoucher"
{?="lightweightPrimaryParticipantID"b1"validationSource"b1"version"b1}
@"CSDMessagingConversationLink"
@"CSDMessagingConversationMember"
@"CSDMessagingConversationReport"
{?="avMode"b1"version"b1"locallyCreated"b1}
{?="timebase"b1}
v36@0:8@16Q24B32
v40@0:8@16Q24@32
v24@0:8@"CSDConversation"16
v32@0:8@"CSDConversation"16@"TUConversationParticipant"24
v32@0:8@"CSDConversation"16@"CXCallFailureContext"24
v32@0:8@"CSDConversation"16@"CSDConversationParticipant"24
v40@0:8@"CSDConversation"16@"NSString"24@?<v@?B>32
v32@0:8@"CSDConversation"16@"NSString"24
v32@0:8@"CSDConversation"16@"TUConversationActivityEvent"24
v36@0:8@"CSDConversation"16Q24B32
v32@0:8@"CSDConversation"16@"TUConversationActivitySession"24
v40@0:8@"CSDConversation"16Q24@"TUConversationActivitySession"32
v32@0:8@"CSDConversation"16q24
v36@0:8@"CSDConversation"16@"NSSet"24B32
v36@0:8@"CSDConversation"16@"TUConversationActivitySession"24B32
v56@0:8@"NSSet"16@"CSDConversation"24@"TUConversationLink"32@"NSUUID"40@"TUConversationMember"48
v52@0:8@"NSSet"16@"CSDConversation"24@"NSUUID"32@"TUConversationMember"40B48
v48@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"CSDConversation"32@"NSData"40
v40@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"NSUUID"32
v48@0:8@"CSDConversationNoticeManager"16@"CSDConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v32@0:8@"CSDConversationLinkManager"16@"NSArray"24
v36@0:8@"CSDScreenSharingActivityManager"16@"<TUScreenShareAttributes>"24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"NSError"24B32
v32@0:8@"<CPApplicationPolicyManager>"16@"NSString"24
v28@0:8@"<CPSystemStateObserver>"16B24
v32@0:8@"NSSet"16@"NSUUID"24
v40@0:8@"TUConversationActivity"16@"NSUUID"24@?<v@?@"TUConversationActivitySession">32
v28@0:8B16@"NSString"20
v32@0:8@"TUConversationActivitySession"16@"NSUUID"24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@"NSUUID"24
v32@0:8@"TUConversationMember"16@"NSUUID"24
v28@0:8B16@"NSUUID"20
v24@0:8@"NSString"16
v32@0:8@"<CPConversationManagerDataSourceObserver>"16@"NSObject<OS_dispatch_queue>"24
v32@0:8@"TUConversationActivitySessionContainer"16@"NSString"24
v32@0:8@"NSDictionary"16@"NSUUID"24
@"CPActivityAuthorizationManager"16@0:8
@"<CPSystemStateObserver>"16@0:8
@72@0:8@16@24@32@40@48@56@64
@80@0:8@16@24@32@40@48@56@64@72
@56@0:8@16@24@32@40@48
@144@0:8@16@24@32B40@44@52@60@68@76@84@92@100@108@116B124Q128@136
@124@0:8@16@24@32B40@44@52@60@68@76@84@92@100Q108@116
@52@0:8@16@24@32@40B48
v40@0:8Q16Q24@32
B36@0:8@16@24i32
B68@0:8@16@24@32@40@48B56@?60
B48@0:8@16@24@32@40
B44@0:8@16@24@32B40
B56@0:8@16@24@32@40@48
@96@0:8@16@24@32@40@48@56@64@72Q80@88
v52@0:8@16@24@32B40@?44
v40@0:8q16@24@32
v52@0:8@16@24B32@36@44
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
v36@0:8B16Q20@28
v28@0:8B16@?20
v40@0:8@16q24@?32
v48@0:8@16@24Q32@?40
v64@0:8@16@24@32@40@48Q56
v40@0:8Q16@24@32
@"CSDPendingMembershipTracker"
@"CSDScreenSharingActivityManager"
@"CSDConversationPersistenceController"
@"CSDConversationLinkManager"
@"CSDReportingController"
@"CSDConversationNoticeManager"
@"CSDSharedConversationServerBag"
@"<CSDConversationInvitationResolving>"
@"<CSDVoucherManager>"
@"<CSDParticipantUpdateSanitizer>"
@"CSDIDSService"
@"FTDeviceSupport"
@"CSDSecureImageTranscoder"
@"CPApplicationController"
@"CPActivityAuthorizationManager"
@"<CSDConduitIDSProxy>"
@"NSURL"16@0:8
{?="protoProtocolVersion"b1"type"b1"oBSOLETEProtoMomentsAvailable"b1"protoMomentsV2Available"b1"protoSenderMuteUplink"b1"protoShouldSuppressInCallUI"b1"protoWantsVideo"b1}
B24@0:8q16
v32@0:8@?16@?24
@24@0:8@?16
B24@0:8@?16
@"CSDMessagingConversationActivityContext"
@"CSDMessagingConversationActivityMetadata"
{?="timestampAsTimeIntervalSinceReferenceDate"b1"updatedDateEpochTime"b1"isSystemActivity"b1}
{?="handleType"b1"notificationStyles"b1"version"b1}
{?="faceTimeAudioAvailable"b1"faceTimeVideoAvailable"b1}
@"NSCountedSet"
@56@0:8@16@24@32@?40@48
@"CXCallDirectoryStore"
@"CSDIncomingCallFilterDataSource"
@"CXCallDirectorySanitizer"
@"ACAccountStore"
@"CSDIncomingCallFilter"
@"<CSDTransactionManager>"
@"CHManager"
@"<CSDUserNotificationDelegate>"
{?="generatorVersion"b1}
@"<CSDIDSSessionProvider>"
v24@0:8@"UABestAppSuggestion"16
v32@0:8@"UABestAppSuggestion"16@"NSSet"24
@20@0:8I16
v32@0:8@16d24
v36@0:8@16d24B32
@28@0:8I16@20
@"<CSDUserActivityCommunicatorDelegate>"
@"UABestAppSuggestionManager"
@"UABestAppSuggestion"
v36@0:8@"<CSDIDSGroupSessionProvider>"16I24@"NSError"28
v24@0:8@"<CSDIDSGroupSessionProvider>"16
v48@0:8@"<CSDIDSGroupSessionProvider>"16@"NSDictionary"24Q32@"NSError"40
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSError"24
v36@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24B32
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24
v44@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24I32S36B40
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSDictionary"24
v36@0:8@"<CSDIDSGroupSessionProvider>"16S24@"NSError"28
v40@0:8@"<CSDIDSGroupSessionProvider>"16@"NSData"24@"IDSGroupSessionActiveParticipant"32
v80@0:8@16@24@32@40@48@56@64@72
v136@0:8@16@24@32@40@48@56@64@72@80@88@96B104B108@112@120Q128
v96@0:8@16@24@32@40@48@56@64@72@80@88
Q24@0:8@16
S16@0:8
v20@0:8S16
@"<CSDIDSGroupSessionDelegate>"
@"<CSDIDSGroupSessionProvider>"
Vv28@0:8@16C24
Vv28@0:8i16@20
Vv40@0:8@16{CGSize=dd}24
Vv28@0:8@16i24
Vv32@0:8@16q24
Vv24@0:8@"TUAnswerRequest"16
Vv32@0:8@"NSString"16@"NSString"24
Vv28@0:8@"NSString"16C24
Vv28@0:8i16@"NSString"20
Vv24@0:8@"IDSDestination"16
Vv24@0:8@"TUProxyCall"16
Vv40@0:8@"NSString"16{CGSize=dd}24
Vv28@0:8@"NSString"16i24
Vv24@0:8@"TUDialRequest"16
Vv32@0:8@"NSString"16@"TUCallScreenShareAttributes"24
Vv36@0:8B16@"TUCallScreenShareAttributes"20@"NSString"28
Vv32@0:8@"NSString"16q24
Vv32@0:8@"TUDialRequest"16@"TUCallDisplayContext"24
Vv32@0:8@"TUDialRequest"16@?<v@?@"TUCall"@"NSArray">24
Vv24@0:8@"TUJoinConversationRequest"16
Vv32@0:8@"NSDictionary"16@?<v@?@"TUCall"@"NSArray">24
Vv24@0:8@"TUCallServicesClientCapabilities"16
Vv28@0:8@16B24
Vv24@0:8@?<v@?@"NSDictionary">16
Vv28@0:8@"NSString"16B24
Vv44@0:8@16@24B32@?36
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?B>32
Vv44@0:8@"TUHandle"16@"NSString"24B32@?<v@?B>36
Vv44@0:8@"NSSet"16@"NSString"24B32@?<v@?B>36
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?Q>32
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?@"NSDictionary">32
Vv48@0:8@"NSString"16@"NSString"24@"NSString"32@?<v@?B>40
v28@0:8@"NSArray"16B24
@"CSDCallController"16@0:8
v24@0:8@"CSDCall"16
v36@0:8@16i24@28
v32@0:8f16i20@24
v24@0:8B16B20
@"CSDCallController"
@"CSDRecentsController"
@"CSDAudioArbitrationController"
@"CSDRouteController"
@"CSDCallHistoryManagerXPCServer"
@"CSDCallProviderManagerXPCServer"
@"CSDRelayCallDataSource"
@"CSDRelayCallDelegate"
@"TUCarPlayHardwareControlsBroadcaster"
@"CSDCarPlayManager"
v24@0:8@?<v@?>16
@"<TUNotifyObserver>"
@"BKSApplicationStateMonitor"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v40@0:8@"CXNetworkExtensionMessageControllerHost"16@"NSDictionary"24@"NSString"32
v48@0:8@"CXNotificationServiceExtensionVoIPXPCHost"16@"NSDictionary"24@"NSString"32@?<v@?@"NSError">40
v44@0:8@16@24@32i40
v40@0:8@16@24i32B36
@"APSConnection"
@"CXNetworkExtensionMessageControllerHost"
@"CXNotificationServiceExtensionVoIPXPCHost"
@"CSDVoIPApplicationMonitor"
@"<CSDConversationNoticeDelegate>"
@"FBSOpenApplicationService"
@48@0:8Q16@24@32@40
@40@0:8Q16@24@32
@"TUConversationParticipantCapabilities"
@"TUCallServicesClientCapabilities"
@"RBSProcessHandle"
@"CSDMessagingConversationActivitySceneAssociationBehavior"
{?="preferredBroadcastingAttributes"b1"supportsContinuationOnTV"b1}
Vv32@0:8@"NSUUID"16@"NSArray"24
Vv32@0:8@"NSUUID"16@?<v@?@"NSString"@"NSString"@"NSError">24
Vv40@0:8@16@24@32
Vv36@0:8@16B24@?28
Vv36@0:8B16Q20@28
Vv32@0:8q16@24
Vv32@0:8Q16@24
Vv28@0:8B16@?20
Vv40@0:8@16q24@?32
Vv48@0:8@16@24Q32@?40
Vv24@0:8@?<v@?@"NSSet">16
Vv40@0:8@"NSSet"16@"NSSet"24@"NSUUID"32
Vv32@0:8@"TUConversationActivitySession"16@"NSUUID"24
Vv32@0:8@"TUConversationActivity"16@"NSUUID"24
Vv32@0:8@"NSUUID"16@?<v@?@"NSError">24
Vv36@0:8@"NSUUID"16B24@?<v@?@"NSError">28
Vv36@0:8B16@"TUConversationActivitySession"20@"NSUUID"28
Vv36@0:8B16Q20@"NSUUID"28
Vv32@0:8@"TUConversationMember"16@"NSUUID"24
Vv32@0:8q16@"NSUUID"24
Vv32@0:8@"NSString"16@"NSUUID"24
Vv32@0:8Q16@"NSUUID"24
Vv24@0:8@?<v@?B>16
Vv24@0:8@?<v@?@"<TUScreenShareAttributes>">16
Vv28@0:8B16@?<v@?@"NSSet"@"NSError">20
Vv32@0:8@"NSUUID"16@?<v@?@"TUConversationLink"@"NSError">24
Vv40@0:8@"NSSet"16q24@?<v@?@"TUConversationLink"@"NSError">32
Vv40@0:8@"NSSet"16@"TUConversationLink"24@?<v@?@"TUConversationLink"@"NSError">32
Vv32@0:8@"TUConversationLink"16@?<v@?B@"NSError">24
Vv48@0:8@"TUConversationLink"16@"NSDate"24Q32@?<v@?B@"NSError">40
Vv32@0:8@"TUConversationLink"16@?<v@?B@"NSDate"@"NSError">24
Vv24@0:8@?<v@?@"TUConversationLink"@"NSError">16
Vv40@0:8@"NSString"16@"TUConversationLink"24@?<v@?@"TUConversationLink"@"NSError">32
Vv28@0:8B16@?<v@?@"NSString">20
Vv36@0:8B16@"TUScreenShareAttributes"20@"NSUUID"28
Vv32@0:8@"NSURL"16@24
Vv24@0:8@?<v@?@"TUConversationNotice"@"NSError">16
v24@0:8@"<TUConversationManagerXPCClient>"16
v52@0:8@16@24Q32i40@44
v56@0:8@16Q24Q32@40@48
v48@0:8@16Q24Q32@40
v32@0:8@"CSDConversationManager"16@"TUConversation"24
v32@0:8@"CSDConversationManager"16@"TUJoinConversationRequest"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v32@0:8@"CSDConversationManager"16@"NSUUID"24
v56@0:8@"CSDConversationManager"16@"TUConversation"24@"CSDMessagingConversationMessage"32@"TUHandle"40@"<CSDGroupSessionParticipantUpdateProtocol>"48
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"CXCallFailureContext"32
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUHandle"32
v32@0:8@"CSDConversationManager"16@"NSArray"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"CSDConversationManager"16@"TUConversation"24Q32B40
v48@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationMember"32
v48@0:8@"CSDConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24q32
v32@0:8@"CSDConversationManager"16@"NSString"24
v40@0:8@"CSDConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v32@0:8@"CSDConversationManager"16@"NSDictionary"24
v52@0:8@"CSDConversationManager"16@"TUConversation"24Q32i40@"NSString"44
v56@0:8@"CSDConversationManager"16Q24Q32@"TUHandle"40@"TUConversation"48
v48@0:8@"CSDConversationManager"16Q24Q32@"TUConversation"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v36@0:8@"CSDConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"CSDConversationManager"16@"NSError"24
v28@0:8@"CSDConversationManager"16B24
B24@0:8@"TUConversationProvider"16
v24@0:8@"<CSDCallProviderManagerDataSource>"16
@"CSDUserIntentManager"
@"<CSDCallProviderManagerDataSource>"
v40@0:8@16q24q32
@"CMGestureManager"
v40@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@"IDSDevice"32
v48@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@"IDSDevice"32@?<v@?B@"NSDictionary">40
v40@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@?<v@?@"NSDictionary">32
v40@0:8@"NSDictionary"16@"IDSDestination"24@?<v@?@"NSDictionary">32
v44@0:8@16@24B32@36
@48@0:8@16@24@32@40
@36@0:8I16@20@28
B20@0:8I16
I24@0:8@16
@"NSUserActivity"
@"TUDialRequest"24@0:8@"TUDialRequest"16
v48@0:8@"NSUserActivity"16@"NSString"24@"NSDictionary"32@?<v@?B@"NSError">40
B24@0:8@"NSURL"16
@"NSURL"32@0:8@"NSString"16@"NSURL"24
B24@0:8@"TUCallProvider"16
@"<CSDCallProviderManagerDataSourceDelegate>"16@0:8
v24@0:8@"<CSDCallProviderManagerDataSourceDelegate>"16
v32@0:8@16r^{__CFString=}24
@24@0:8r^{__CFString=}16
@"<CSDCallProviderManagerDataSourceDelegate>"
@"CSDSandboxExtensionDirectory"
@"CSDCallCenterObserver"
d24@0:8@16
Q24@0:8Q16
@24@0:8q16
@"<CSDMomentsReportingSessionDelegate>"
v44@0:8@16I24I28B32@36
v32@0:8@16I24I28
v32@0:8@16Q24
v40@0:8@"AVCSessionParticipant"16B24B28@"NSError"32
v28@0:8@"AVCSessionParticipant"16B24
v32@0:8@"AVCSessionParticipant"16@"NSDictionary"24
v44@0:8@"AVCSessionParticipant"16I24I28B32@"NSError"36
v32@0:8@"AVCSessionParticipant"16I24I28
v32@0:8@"AVCSessionParticipant"16Q24
v36@0:8@"AVCScreenCapture"16B24@"NSError"28
v24@0:8@"AVCScreenCapture"16
v32@0:8@"AVCSession"16@"NSDictionary"24
v36@0:8@"AVCSession"16B24@"NSError"28
v24@0:8@"AVCSession"16
v44@0:8@"AVCSession"16@"AVCSessionParticipant"24B32@"NSError"36
v44@0:8@"AVCSession"16B24@"AVCSessionConfiguration"28@"NSError"36
v40@0:8@"AVCSession"16B24B28@"NSError"32
v44@0:8@"AVCSession"16I24I28B32@"NSError"36
v32@0:8@"AVCSession"16@"NSData"24
v32@0:8@"AVCSession"16@"NSError"24
v40@0:8@"AVCSession"16@"NSError"24@"NSDictionary"32
v84@0:8Q16@24@32{CGRect={CGPoint=dd}{CGSize=dd}}40B72Q76
@"NSData"24@0:8Q16
v24@0:8@"<TUScreenShareAttributes>"16
v28@0:8B16@"<TUScreenShareAttributes>"20
v32@0:8@"CSDConversationParticipant"16B24B28
v24@0:8@"CSDConversationParticipant"16
v84@0:8Q16@"NSNumber"24@"NSNumber"32{CGRect={CGPoint=dd}{CGSize=dd}}40B72Q76
@"NSData"16@0:8
@72@0:8@?16@24@32@40@48Q56@?64
@68@0:8@16@24@32@40B48Q52@60
@"AVCSession"
@"<CSDAVCSessionDelegate>"
@"AVCScreenCapture"
@44@0:8@16B24@28@36
@36@0:8@16@24i32
v24@0:8@"<CSDCoreTelephonyClient>"16
v40@0:8@"<CSDCoreTelephonyClient>"16@"CTXPCContextInfo"24@"CSDCTCallCapabilities"32
v32@0:8@"<CSDCoreTelephonyClient>"16@"NSDictionary"24
v40@0:8@"<CSDCoreTelephonyClient>"16@"CTXPCContextInfo"24@"NSDictionary"32
@40@0:8@16@24B32B36
@"<CSDTelephonyCallCapabilitiesDelegate>"
@"CSDCoreTelephonyClient"
@"<CSDEmergencyCallbackCapabilities>"
{?="deviceType"b1"protoCurrentlyPicked"b1"protoGuest"b1"protoSupportsRelay"b1}
v48@0:8@16d24@32@?40
@"TUCallProvider"24@0:8@"NSString"16
v24@0:8@"CSDRelayCall"16
v32@0:8@"CSDRelayCall"16@"TUAnswerRequest"24
v32@0:8@"CSDRelayCall"16@"TUCall"24
v28@0:8@"CSDRelayCall"16C24
v36@0:8@"CSDRelayCall"16B24@"NSError"28
@"TUDTMFSoundPlayer"
@"CSDMessagingEncryptedConversationMessage"
@"CSDMessagingConversationJoinedMetadata"
{?="avMode"b1"disconnectedReason"b1"enclosedEncryptedType"b1"type"b1"version"b1"guestModeEnabled"b1"isLetMeInApproved"b1"shouldSuppressInCallUI"b1}
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSArray"24
@"CSDKeychainPasswordItem"
@"<CXAudioSessionActivationStateObserver>"
B24@0:8{?=ii}16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSDictionary"24
@"CSDCTCallCapabilities"24@0:8@"CTXPCContextInfo"16
@"NSDictionary"32@0:8@"CTXPCContextInfo"16@"NSString"24
@"NSDictionary"24@0:8@"CTXPCContextInfo"16
v36@0:8@"NSString"16B24@"NSDictionary"28
v44@0:8@"CTXPCContextInfo"16@"NSString"24B32@"NSDictionary"36
v32@0:8@"NSString"16@"CTXPCContextInfo"24
v32@0:8@"CTXPCContextInfo"16@"NSString"24
@"NSString"24@0:8@"NSUUID"16
@"<CSDCoreTelephonyClientDelegate>"16@0:8
v24@0:8@"<CSDCoreTelephonyClientDelegate>"16
@"<CSDCoreTelephonyClientDelegate>"
@"CTXPCContexts"
{?="ambiguityState"b1"addCallAllowed"b1"endAndAnswerAllowed"b1"hardPauseAvailable"b1"holdAllowed"b1"holdAndAnswerAllowed"b1"mergeable"b1"sendToVoicemailAllowed"b1"swappable"b1"takingCallsPrivateAllowed"b1}
@32@0:8@16@?24
v32@0:8@"CSDMomentsReportingSession"16@"CSDMomentsUsageReport"24
v36@0:8@16q24i32
v36@0:8@"CSDMomentsController"16q24i32
v32@0:8@"CSDMomentsController"16q24
v40@0:8@"CSDMomentsController"16q24@"NSString"32
v28@0:8q16i24
v36@0:8q16i24@?28
v32@0:8q16@?24
v40@0:8q16@24@?32
{?="version"b1"shouldCheckAllGenerators"b1}
@"<CSDCHManager>"
@"TUDelegateController<CSDCallHistoryManagerDelegate>"
v40@0:8d16@24@?32
@"<CSDConversationProviderDelegate>"
v32@0:8@"IDSAccountController"16@"IDSAccount"24
B72@0:8@16@24@32q40@48^@56^@64
@"IDSDevice"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"<IDSServiceDelegatePrivate>"16@"NSObject<OS_dispatch_queue>"24
v24@0:8@"<IDSServiceDelegatePrivate>"16
B24@0:8@"NSString"16
B72@0:8@"NSData"16@"IDSAccount"24@"NSSet"32q40@"NSDictionary"48^@56^@64
@"<CSDIDSServiceDependencies>"16@0:8
@"IDSDevice"16@0:8
@"IDSAccount"16@0:8
v64@0:8@16@24@32d40@48@?56
@"IDSAccountController"
@"IDSIDQueryController"
@"<IDSServicePseudonymDelegate>"
v48@0:8@"CSDIDSDualSession"16@"NSData"24@"IDSDestination"32@"IDSDevice"40
v52@0:8@16@24@32q40B48
v48@0:8@16@24@32q40
v56@0:8@16@24@32q40@?48
v40@0:8@16@?24@?32
v48@0:8@16@24@?32@?40
v52@0:8@16@24@?32B40@?44
v60@0:8@16@24@32@?40B48@?52
v52@0:8@"<CSDFileTransferring>"16@"NSURL"24@"NSDictionary"32B40@"NSString"44
v36@0:8@"<CSDFileTransferring>"16@"NSURL"24B32
v28@0:8@"<CSDAVCMoments>"16I24
v40@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSError"32
v56@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSURL"32@"NSURL"40@"NSError"48
v24@0:8@"<CSDAVCMoments>"16
Vv52@0:8q16@24@32B40@?44
Vv32@0:8q16@?24
Vv44@0:8i16q20@28@?36
Vv24@0:8@?<v@?>16
Vv52@0:8q16@"NSString"24@"NSDictionary"32B40@?<v@?@"TUMomentsCapabilities"@"NSError">44
Vv32@0:8q16@?<v@?@"NSError">24
Vv44@0:8i16q20@"NSString"28@?<v@?@"NSString"@"NSError">36
v24@0:8@"<TUMomentsControllerXPCClient>"16
i20@0:8B16
@"<CSDMomentsControllerDelegate>"
@"<CSDFileTransferring>"
@"<CSDMediaAssetManaging>"
@"<TUMomentsControllerXPCClient>"
@"<CSDMomentsServerBag>"
v36@0:8@16q24B32
v36@0:8@16B24q28
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v48@0:8@16q24@32@40
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v48@0:8{CGSize=dd}16{CGSize=dd}32
B28@0:8i16@20
B52@0:8B16@20@28@36^@44
B40@0:8B16@20i28^@32
v56@0:8q16@24d32@?40@48
B28@0:8i16@"RTCSecureHierarchyToken"20
B52@0:8B16@"NSDictionary"20@"VCCapabilities"28@"NSString"36^@44
B40@0:8B16@"VCCapabilities"20i28^@32
v56@0:8q16@"NSDictionary"24d32@?<v@?@"NSDictionary"@"NSError">40@"NSObject<OS_dispatch_queue>"48
@"<CSDAVConferenceProviderDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceProviderDelegate>"16
@"<CSDAVConferenceProviderDelegate>"
@"AVConference"
@"CSDProviderCall"
v48@0:8@"CXCallControllerHost"16@"NSString"24@"CXTransaction"32@?<v@?@"NSError">40
@"CXCallSource"24@0:8@"NSString"16
v44@0:8@16@24f32q36
v32@0:8@"CXCallSource"16@"CXProviderConfiguration"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32@?<v@?@"NSError">40
v40@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32
v56@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32
v32@0:8@"CXCallSource"16@"NSUUID"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSData"32q40
v44@0:8@"CXCallSource"16@"NSUUID"24f32q36
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSString"32q40
v40@0:8@"CXCallSource"16@"CXTransaction"24@?<v@?@"NSError">32
B40@0:8@16@24^@32
v32@0:8@"CXCallSourceManager"16@"CXTransactionGroup"24
v24@0:8@"CXCallSourceManager"16
B40@0:8@"CXCallSource"16@"CXAction"24^@32
@"CXCallSource"24@0:8@"TUDialRequest"16
@"CXCallSource"24@0:8@"TUJoinConversationRequest"16
v32@0:8@"CXCallAction"16@"CSDProviderCall"24
v32@0:8@"NSArray"16@"CSDProviderCall"24
v32@0:8@"CXStartCallAction"16@"CSDProviderCall"24
B44@0:8@16@24B32^@36
@"CSDFaceTimeProviderDelegate"
@"CSDCallFilterController"
@"CSDVoIPProcessAssertionManager"
@"CXCallControllerHost"
@"CXInProcessCallSource"
@"<CXProviderDelegatePrivate>"
@"CSDCallSourceFetcher"
@"CXCallSourceManager"
@"<CSDRouteManager>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v40@0:8@?16@?24@32
^v16@0:8
v28@0:8@?16B24
v40@0:8@?16@24@32
@?32@0:8@16@?24
@?24@0:8@?16
@"NSXPCInterface"
@"NSObject<OS_dispatch_semaphore>"
v32@0:8@"<CSDProximitySensorObserverDelegate>"16@"NSObject<OS_dispatch_queue>"24
v24@0:8@"<CSDProximitySensorObserverDelegate>"16
@"TUDelegateController"
@"FTNetworkSupport"
@32@0:8q16@24
%@ %@
avcIdentifier
pseudonym
publicKey
conversationMessageBytes
privateKey
invitedHandles
creationDateEpochTime
groupUUIDString
originatorHandle
pseudonymExpirationDateEpochTime
isActivated
generatorDescriptor
linkName
linkLifetimeScope
Indefinite
CallDuration
(unknown: %i)
CSDTransactionManager
TUCallCenter_allCalls
com.apple.calls.callservicesd.
%@:%@
handleCallStatusChanged
handleSessionStateChanged
%@-%@
com.apple.telephonyutilities.callservicesdaemon.csdavconference
@"<CSDAVConferenceProvider>"24@?0@"NSUUID"8@"NSObject<OS_dispatch_queue>"16
<%@ %p state=%d conference=%@>
v24@?0@"NSDictionary"8@"NSError"16
<%@ %p caller=%d capabilities=%@ deviceRole=%d>
TUCallUserActivityCTInfoKey
TUCallUserActivityServiceKey
kCTCallDirection
kCTCallDirectionOutgoing
kCTCallDirectionIncoming
kCTCallPhoneNumber
com.apple.coretelephony
handle
avcData
isMomentsAvailable
isScreenSharingAvailable
isGondolaCallingAvailable
isMirageAvailable
isLightweight
sharePlayProtocolVersion
options
isGFTDowngradeToOneToOneAvailable
guestModeEnabled
association
isUPlusNDowngradeAvailable
avMode
None
Audio
Video
-[CSDUserActivityManager conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:]
-[CSDUserActivityManager conversationManager:addedActiveConversation:]
v24@?0@"NSString"8d16
ADClientSetValueForDistributionKey
AggregateDictionary
%@.%@.%f
ForceDisableCallProximity
com.apple.mobilephone.talking-with-phone-away-from-face-without-speaker
CSDProximityController.m
Invalid parameter not satisfying: %@
callCenterObserver != nil
interfaceOrientationObserver != nil
routeController != nil
proximitySensorObserver != nil
queue != nil
voiceOverObserver != nil
v16@?0@"FBSOrientationUpdate"8
B8@?0
v12@?0i8
ConferenceID:
kMXSessionAudioCategory_PlayAndRecord_NoBluetooth
MediaExperience
kMXSessionAudioMode_VoiceChat
kMXSessionAudioMode_VideoChat
@"IMAccount"16@?0@"CXStartCallAction"8
IMPreferredAccountForService
IMCore
IMDaemonDidConnectNotification
IMAVCore
IMAVChatStateChangedNotification
IMAVChatParticipantReceivedFirstFrameNotification
IMAVChatParticipantInvitationDeliveredNotification
IMAVChatParticipantCallInfoChangedNotification
IMAVChatConferenceIDChangedNotification
IMAVChatConferenceMetadataUpdatedNotification
IMAVChatMayRequireBreakBeforeMakeChangedNotification
IMAVChatParticipantInFrequencyChangedNotification
IMAVChatParticipantOutFrequencyChangedNotification
IMAVController
IMAVChat
_NSStringDescriptionForIMAVChatEndedReason
CALL_FAILED_NO_NETWORK_CONNECTION_TITLE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_WIFI_MESSAGE
ALERT_VIDEO_FAILED_TITLE
CALL_FAILED_TITLE
ALERT_VIDEO_FAILED_BAD_NONCE_TIMESTAMP
CALL_FAILED_BAD_NONCE_TIMESTAMP
ALERT_VIDEO_FAILED_UPDATE_LOCATION_MESSAGE
CALL_FAILED_UPDATE_LOCATION_MESSAGE
ALERT_VIDEO_FAILED_REGION_INFO_INSUFFICIENT
CALL_FAILED_REGION_INFO_INSUFFICIENT
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NUMBER
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NAME
ALERT_VIDEO_NOT_AVAILABLE_TITLE
CALL_NOT_AVAILABLE_TITLE
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NUMBER
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NUMBER
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NAME
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NAME
com.apple.telephonyutilities.callservicesd.callhistorycontrollerxpcserver
v16@?0@"CSDClient"8
com.apple.telephonyutilities.callservicesdaemon.callhistorycontroller
CSDCallHistoryControllerClientsShouldConnectNotification
MaxRemoteMirageParticipantsOverride
@"<CSDAVCSession>"44@?0@"NSString"8@"<CSDAVCSessionDelegate>"16@"NSObject<OS_dispatch_queue>"24B32@"TUConversationReport"36
<%@ %p
 UUID=%@
 groupUUID=%@
 link=%@
 messagesGroupUUID=%@
 state=%ld
 hasReceivedLetMeInRequest=%ld
 letMeInRequestState=%ld
 ignoreLMIRequests=%d
 avcSessionToken=%ld
 avcSessionIdentifier=%@
 isLocallyCreated=%d
 hasJoined=%d
 isUplinkMuted=%d
 video=%d
 isAudioEnabled=%d
 isVideoEnabled=%d
 isScreenEnabled=%d
 oneToOneModeEnabled=%d
 localMember=%@
 remoteMembers=%@
 pendingMembers=%@
 kickedMembers=%@
 rejectedMembers=%@
 otherInvitedHandles=%@
 lightweightMembers=%@
 memberIdentifiers=%@
 activeRemoteParticipants=%@
 activeLightweightParticipants=%@
 report=%@
 virtualParticipants=%@
 provider=%@
 tuActivitySessions=%@
 tuSystemActivitySessions=%@
 handoffEligibility=%@
 splitSessionSecondary=%@
 localLightweightSecondaryMember=%@
 invitationPreferences=%@
 avMode=%ld
PubSub
CADisplay
QuartzCore
Trying to setup new AVCSession without tearing down previous session first. Please file a bug to [FaceTime Core - TelephonyUtilities | All].
Calling -[CSDConversation leave]
B16@?0@"CSDConversationParticipant"8
Cleaning up from AVCSession failure.
Timed out waiting for sessions to end in leaving state (left conversation for reason: %@). Please file a bug on [TelephonyUtilities | New Bugs] so we can direct it to the appropriate team.
B16@?0@"TUConversationMember"8
NSErrorUserInfoDetailedError
AVCSession started but we weren't trying to join the conversation.
AVCSession failed to start.
%@.%@
v16@?0@"IMUserNotification"8
v16@?0Q8
CSDRelayIDSActiveAccountsChanged
CSDRelayPairedDeviceConnectedNotification
com.apple.private.alloy.phonecontinuity
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
destinationID
uniqueProxyIdentifier
sourceIdentifier
wantsHoldMusic
dtmfKey
disconnectedReason
v32@?0@"NSString"8@16^B24
NoAction
IncomingCall
DialCall
CallDialed
AnswerCall
CallAnsweredElsewhere
CallDisconnected
PlayDTMFToneForKey
CallConnected
DisconnectCall
PullRelayingCalls
HoldCall
UnholdCall
GroupCall
UngroupCall
ResetWantsHoldMusic
SwapCalls
UpdateCallModel
DeviceUnavailable
EndActiveAndAnswer
EndHeldAndAnswer
DisconnectCurrentCallAndActivateHeld
DisconnectAllCalls
ResetState
HardPauseDigitsAvailability
SendHardPauseDigits
UpdateRemoteCallState
SuppressRingtone
RequestCallContext
CallStartedConnecting
PushHostedCalls
PullHostedCalls
PushRelayingCalls
UpdateCallContext
NeedsManualInCallSoundsChange
InvitationSent
HoldActiveAndAnswer
UpdateCallDisplayContext
SetUplinkMuted
UpdateRemoteUplinkMuted
UpdateSystemVolume
UpdateSupportsTTYWithVoice
SetTTYType
RequestAction
UpdateRoutes
PickRoute
DowngradeToAudio
UpdateFailureExpected
UpdateSupportsEmergencyFallback
value
isoCountryCode
Generic
PhoneNumber
EmailAddress
sender
audioRouteUniqueIdentifier
com.apple.telephonyutilities.callservicesd.FaceTimeProvider
/stock
com.apple.request.hipuncap
com.apple.springboard.passcodeLockedOrBlocked
v16@?0@?<v@?>8
gk-invitation-break-before-make-timeout
StoreDemoMode
com.apple.demo-settings
RetailDemoNotification
CALL_ENDED
CALL_ENDED_DEMO_EXPLANATION
 temporaryGroupUUID=%@
 conversationGroupUUID=%@
 approverHandle=%@
 isVideo=%d
ShouldSuppress
ShouldAllow
com.apple.telephonyutilities.callservicesd.statusbarmanager
v16@?0@"STCallingStatusDomainUserInteraction"8
v16@?0@"STMutableCallingStatusDomainData"8
com.apple.callservicesd.neighborhoodConduit.xpcServer
com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities
v24@?0@"CSDClient"8@"<TUNeighborhoodActivityConduitXPCClient>"16
v16@?0@"<TUNeighborhoodActivityConduitXPCClient>"8
CSDCarrierBundlePhoneNumberProviderController
B24@?0@"CSDCarrierBundlePhoneNumberProvider"8@"NSDictionary"16
SilenceUnknownCallersOverrideList
CSDRelayIDSDualSession.m
Use another initializer instead
forceBTClassic
non-nil
updateMessage
checkInMessage
recoverMessage
Unknown
Update
CheckIn
Recover
com.apple.telephonyutilities.callservicesd.thumpercapabilitiesmonitor
NPSDomainAccessor
NanoPreferencesSync
thumperCallingAllowedOnDefaultPairedDevice
thumperCallingCapabilitiesStates
PreviousDefaultPairedDeviceUniqueID
uniqueIDOverride
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumpersupported
THUMPER_CALLING
NOT_NOW
TURN_ON
MAKE_RECEIVE_THUMPER_CELLULAR_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_CELLULAR
MAKE_RECEIVE_THUMPER
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumperenabled
THUMPER_EMERGENCY_ADDRESS_INFO_TITLE
THUMPER_EMERGENCY_ADDRESS_INFO_MESSAGE
PREFERENCES_BUTTON_TITLE
PSFaceTimeSettingsDetail
Preferences
<%@ %p 
%@=%d
%@=%@
%@=%lu
com.apple.telephonyutilities.callservicesd.accountscontroller
    faceTimeIDMatchesAppleID: %@
    faceTimeAudioAvailability: %ld
    faceTimeVideoAvailability: %ld
    outgoingCallerID: %@
B24@?0@"NSString"8^B16
B32@?0@"NSString"8Q16^B24
IMStringIsPhoneNumber
IMFoundation
CSDPauseDigits.m
%s is not available. Use a designated initializer instead.
-[CSDPauseDigits init]
<%@ %p digits=%@ isHardPause=%d>
com.apple.telephonyutilities.callservicesd.conversationprovidermanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.conversationprovidermanager
CSDConversationManagerClientsShouldConnectNotification
com.apple.telephonyutilities.callservicesd.callprovidermanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.callprovidermanager
v24@?0@"CSDClient"8@"<TUCallProviderManagerXPCClient>"16
com.apple.private.alloy.facetime.video
@"CSDAVConference"8@?0
CSDIDSChat.m
Cannot create an incoming chat with an outgoing session: %@
Cannot create an outgoing chat with an incoming session: %@
disableFaceTimeKeyExchange
Invite
contextIdentifier
actionDescription
ongoingDescription
completedDescription
com.apple.telephonyutilities.callservicesd.calldirectorymaintenance.daily
v16@?0@"NSObject<OS_xpc_object>"8
extensionsChangedForCallDirectoryExtensionManager-%lu
CXCallDirectoryNSExtensionManagerDelegate
protoCallModelState
protoService
protoWantsHoldMusic
protoCannotBeAnswered
protoDTMFKey
protoDisconnectedReason
OBSOLETE_conferenceIdentifier
protoVoicemail
callerNameFromNetwork
protoCall
hardPauseDigits
hardPauseState
receivedMessageType
protoProtocolVersion
protoShouldSuppressRingtone
dummyPayload
hostCallCreationTime
messageSendTime
protoNeedsManualInCallSounds
protoCannotRelayAudioOrVideoOnPairedDevice
protoExpectedEndpointOnMessagingDevice
contactIdentifier
protoCallCapabilitiesState
protoSoundRegion
protoEmergency
otherUniqueProxyIdentifiers
protoCallModel
protoSOS
protoDisplayContext
inviteData
protoProvider
protoVideo
protoUplinkMuted
protoRemoteUplinkMuted
systemVolume
localSenderIdentityUUIDString
localSenderIdentityAccountUUIDString
protoTTYType
protoSupportsTTYWithVoice
requestActionType
routes
route
endpointIDSDestinationURIs
protoPriority
protoOriginatingUIType
protoFailureExpected
protoSupportsEmergencyFallback
%@.%@.%p
idx (%lu) is out of range (%lu)
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
handoffIdentifier
protoSupportedHandleType
emergencyLabeledHandles
supportsRecents
prioritizedSenderIdentities
emergencyHandles
    dialingIDSDevice: %@
@"CSDMessagingRelayMessage"8@?0
v20@?0i8^B12
v20@?0B8@"NSDictionary"12
com.apple.notifyd.matching
com.apple.telephonyutilities.callservicesd.kFZACAppBundleIdentifierLaunchNotification
com.apple.distnoted.matching
com.apple.callhistory.save.distributed.notification
com.apple.telephonyutilities.callservicesdaemon.app-installed
com.apple.telephonyutilities.callservicesdaemon.app-uninstalled
com.apple.CTTelephonyCenter
com.apple.telephonyutilities.callservicesd.reportingcontroller
proximity-sensor
com.apple.telephonyutilities.callservicesdaemon.connectionrequest
com.apple.telephonyutilities.callservicesd.calls
com.apple.language.changed
CSDIDSPendingChatKey
CSDIDSPendingCallKey
CSDIDSPendingChatUUIDKey
CSDIDSPendingMessageDidReceiveInviteNotification
CSDIDSPendingMessageDidReceiveCancelNotification
CSDGroupIDSPendingMessageDidReceiveInviteNotification
@"<CSDIDSDualSessionProvider>"24@?0@"IDSSession"8@"NSObject<OS_dispatch_queue>"16
NetworkAvailabilityCheckOverrideValue
allowed
ignored
audio
SKEBlob
mediaBlob
callInfoBlob
CSDIDSDualSessionStateChangedNotification
CSDIDSDualSession.m
-[CSDIDSDualSession init]
%@ isInitiator=%d state=%d remoteProtocolVersion=%@>
%@=%ld
@"NSString"16@?0@"NSString"8
CSDFaceTimeIDSProviderDelegate.m
%s is not available. Use an available initializer instead.
-[CSDFaceTimeIDSProviderDelegate init]
@"<CSDIDSService>"12@?0B8
B16@?0@"IDSAccount"8
@"<CSDIDSDualSessionProvider>"40@?0@"IDSAccount"8@"NSSet"16@"NSDictionary"24@"NSObject<OS_dispatch_queue>"32
@"<CSDIDSChat>"48@?0@"CSDExternalIDSDualSession"8@"NSUUID"16@"TUHandle"24B32B36@"NSUUID"40
CSDFileTransferringMetadataKeyIsDirectory
CSDFileTransferringMetadataKeyUserData
com.apple.telephonyutilities.callservicesd.csdfiletransfercontroller
v16@?0@"NSURL"8
directory
file
v16@?0@"IMFileCopier"8
CSDCallSourceFetcher.m
%s is not available. Use another initializer instead.
-[CSDCallSourceFetcher init]
iPod
IPOD
iPad
IPAD
iPhone
IPHONE
THUMPER_SERVICE_NAME
ENTER_CODE_FOR_%@
ALLOW
CANCEL
PrimaryDeviceNotification
THUMPER_PUSH_HANDLER_CONSENT_ALERT_MESSAGE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_TITLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_ENABLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_CANCEL
SecondaryDeviceNotification
RECEIVE_THUMPER_CALLS_FROM_PHONE_NUMBER_ENTER_CODE_%@_%@
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_TITLE
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_MESSAGE
protoStatus
protoConferenced
protoTimeConnected
protoOutgoing
protoHasSentInvitation
kMXSessionAudioMode_RemoteVoiceChat
com.apple.telephonyutilities.callservicesd.callhistorymanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.callhistorymanager
-[CSDCallHistoryManagerXPCServer updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:]
CSDPauseDigitsQueue.m
-[CSDPauseDigitsQueue init]
 baseDestinationID=%@
 originalPauseDigitsString=%@
 pauseDigits=%@
** TUAssertion failure: %@
callservicesd is attempting to create an XPC client for itself.
CSDXPCClient.m
%@ entitlementCapabilities=%@
IPCHack
UI process assertion for message handling
RTTTelephonyUtilities
RTTUtilities
targetContentIdentifier
shouldAssociateScene
CSDIDSInitialLinkTypeKey
CSDIDSInputAudioPowerSpectrumTokenKey
CSDIDSOutputAudioPowerSpectrumTokenKey
CSDIDSSpatialAudioSourceIdentifierKey
message
messagesGroupUUIDString
messagesGroupName
activitySession
providerIdentifier
otherInvitedHandles
lightweightMembers
videoEnabled
participantAssociation
collaborationIdentifier
PHPhotoLibrary
Photos
PHAssetCreationRequest
PHAssetResourceCreationOptions
CallState
status
bundleID
providerContext
hostedOnCurrentDevice
endpointOnCurrentDevice
callStart
callStop
callForegrounded
callBackgrounded
GroupSessionEventEnded
timestamp
timestampEnd
CSDFaceTimeProviderDelegate.m
-[CSDFaceTimeProviderDelegate init]
v24@?0@"NSArray"8@"NSArray"16
-[CSDVoIPApplication init] is not supported. Use -[CSDVoIPApplication initWithBundleIdentifier:] instead
CSDVoIPApplication.m
<%@ %p bundleIdentifier=%@ environment=%@ pushKitClient=%@ networkExtensionClient=%@ token=%@ pendingPKMessageContextCount=%lu pendingNetworkExtensionContextsCount=%lu>
aps-environment
com.apple.developer.pushkit.unrestricted-voip
com.apple.developer.pushkit.unrestricted-voip-regulatory
com.apple.developer.pushkit.unrestricted-voip.ptt
com.apple.developer.pushkit.unrestricted-voip.temporary
13.0
15.0
15.4
identifierUUIDString
activity
givenName
middleName
nameSuffix
phoneticRepresentation
link
v20@?0i8q12
v16@?0@"TUConversation"8
-[CSDStatusBarResolver conversationManager:removedActiveConversation:]
-[CSDStatusBarResolver conversationManager:addedActiveConversation:]
-[CSDStatusBarResolver conversationManager:stateChangedForConversation:]
-[CSDStatusBarResolver conversationManager:activitySessionsChangedForConversation:]
-[CSDStatusBarResolver conversationManager:activeRemoteParticipantsChangedForConversation:]
-[CSDStatusBarResolver conversationManager:localVideoToggledForConversation:]
-[CSDStatusBarResolver conversationManager:handoffEligibilityChangedForConversation:]
CSDRelayConferenceLocalFrequencyChangedNotification
CSDRelayConferenceRemoteFrequencyChangedNotification
CSDRelayConferenceLocalMeterLevelChangedNotification
CSDRelayConferenceRemoteMeterLevelChangedNotification
CSDRelayConferenceMutedChangedNotification
CSDRelayConferenceSendingAudioChangedNotification
CSDRelayConferenceConnectionWillCloseNotification
CSDRelayConferenceConnectionDidCloseNotification
CSDRelayConferenceConnectionDidReceiveDataNotification
CSDRelayConferenceConnectionDidReceiveDataNotificationDataKey
com.apple.telephonyutilities
Conference cleaned up before handling a didStart with error: %@
CallServices
Images
CSDSandboxExtensionDirectory.m
-[CSDSandboxExtensionDirectory init]
CSDPinExchangeCompressedDataKey
CSDPinExchangeActionKey
CSDPinExchangeCallerIDKey
CSDPinExchangePinKey
CSDPinExchangeActionRequestPIN
CSDPinExchangeActionSendPIN
CSDPinExchangeActionOneTimeReminder
CSDPinExchangeActionApproved
CSDPinExchangeActionUnapproved
CSDPinExchangeActionCancelledPrimary
CSDPinExchangeActionCancelledSecondary
v20@?0B8@"NSString"12
com.apple.telephonyutilities.callservicesd.pinexchangeerror
INCORRECT_PIN_ENTERED
THUMPER_MISMATCHED_ACCOUNTS
MAX_SLOTS_FILLED
primaryHandle
primaryIdentifier
primaryAvcIdentifier
associatedPseudonym
conversationGroupUUIDString
com.apple.telephonyutilities.callservicesd.callcapabilities
com.apple.telephonyutilities.callservicesdaemon.callcapabilities
State: %@
Telephony capabilities: %@
Accounts controller: %@
Paired Host Device State: %@
v24@?0@"CSDClient"8@"<TUCallCapabilitiesXPCClient>"16
-[CSDCallCapabilities setRelayCallingEnabled:]
-[CSDCallCapabilities setRelayCallingEnabled:forDeviceWithID:]
-[CSDCallCapabilities setWiFiCallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setVoLTECallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:]
-[CSDCallCapabilities endEmergencyCallbackMode]
-[CSDCallCapabilities invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:]
-[CSDCallCapabilities invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:]
-[CSDCallCapabilities requestPinFromPrimaryDevice]
-[CSDCallCapabilities cancelPinRequestFromPrimaryDevice]
disableSupportsPrimaryCalling
forceSupportsPrimaryCalling
telephony
disableSupportsBasebandCalling
forceSupportsBasebandCalling
disableSupportsCellularData
forceSupportsCellularData
disableDisplayingTelephonyCallSupport
forceDisplayingTelephonyCallSupport
disableDisplayingFaceTimeAudioCallSupport
forceDisplayingFaceTimeAudioCallSupport
disableDisplayingFaceTimeVideoCallSupport
forceDisplayingFaceTimeVideoCallSupport
disableCanEnableWiFiCalling
forceCanEnableWiFiCalling
disableCanEnableVoLTECalling
forceCanEnableVoLTECalling
disableCanEnableThumperCalling
forceCanEnableThumperCalling
q24@?0@"TUCloudCallingDevice"8@"TUCloudCallingDevice"16
relayCallingDisabled
relayCallingDisabledForDeviceID
pairedHostDeviceState
CSDSharePlayMediaDidHandoffNotification
CSDSharePlayRemoteActivityDidChangeNotification
CSDCallMayRequireBreakBeforeMakeChangedNotification
CSDCallHasStartedOutgoingChangedNotification
CSDCallHasAudioInterruptionChangedNotification
CSDCallAudioInterruptionPropertiesChangedNotification
CSDCallLocalPreviewStoppedNotification
CSDCallsWillEnterBackgroundNotification
CSDCallEnteredForegroundNotification
CSDCallRemoteParticipantJoinedNotification
CSDCallRemoteParticipantLeftNotification
CSDCallOneToOneModeChangedNotification
CSDMediaPlaybackOnExternalDeviceChangedNotification
CSDCallTransmissionStateChangedNotification
CSDCallMetricsKnownContact
CSDCallMetricsSiriSuggested
CSDCallMetricsReturnedCall
CSDCallMetricsOwnNumber
CSDCallMetricsVerifiedAppleCare
CSDCallMetricsCarrierNumber
CSDCall.m
dialRequest is invalid: %@
SFCoordinatedAlertRequest
Sharing
v28@?0@"NSError"8B16@"NSDictionary"20
v16@?0q8
CSDRouteManagerPreferredRouteChangedNotification
com.apple.telephonyutilities.callservicesd.routemanager
AVAudioSessionMediaServicesWereResetNotification
AVFoundation
PhoneCall
StarkCapability
lightweightPrimary
lightweightPrimaryParticipantID
validationSource
associationVoucher
Endorsement
Vouched
UUIDString
locallyCreated
initiator
localMember
remoteMembers
activeRemoteParticipants
activitySessions
reportData
conversationProviderIdentifier
activeLightweightParticipants
highlightIdentifier
stagedActivitySession
conversationID
timebase
com.apple.telephonyutilities.callservicesd.conversationmanager
@"CSDIDSGroupSessionProvider"64@?0@"NSString"8@"NSArray"16@"NSString"24@"IDSAccount"32@"NSObject<OS_dispatch_queue>"40B48@"TUConversationMember"52B60
@"CSDConversation"136@?0@"NSObject<OS_dispatch_queue>"8@"NSUUID"16@"NSUUID"24@"CSDIDSGroupSession"32@"NSUUID"40B48@"TUConversationMember"52@"TUHandle"60@"NSSet"68@"NSSet"76@"NSSet"84@"NSSet"92@"TUConversationActivity"100@"TUConversationLink"108@"TUConversationReport"116B124Q128
B72@?0@"NSData"8@"IDSAccount"16@"NSSet"24@"TUConversationMember"32@"NSDictionary"40^@48@?<v@?>56@"TUConversationProvider"64
@"NSSet"16@?0@"TUConversationProvider"8
@"NSSet"8@?0
@"TUHandle"8@?0
@"TUHandle"16@?0@"TUConversationProvider"8
supports-self-one-to-one-invites
self-token:
token:
v32@?0@"CSDMessagingConversationMessage"8@"NSData"16@"NSError"24
v24@?0@"TUConversationLinkDescriptor"8@"NSError"16
v24@?0@"TUConversationLink"8@"NSError"16
v132@?0@"NSUUID"8@"NSUUID"16@"NSUUID"24B32@"TUConversationMember"36@"TUHandle"44@"NSArray"52@"NSArray"60@"NSArray"68@"NSArray"76@"TUConversationLink"84@"TUConversationReport"92@"NSArray"100@"NSString"108@"CSDMessagingConversationActivitySession"116Q124
v32@?0@"NSUUID"8@"CSDConversation"16^B24
v32@?0@"CSDMessagingEncryptedConversationMessage"8@"CSDLetMeInRequestorKeyAgreement"16@"NSError"24
v24@?0@"TUVoucher"8@"NSError"16
SHAREPLAY_INCOMPATIBLE_MESSAGE
SHAREPLAY_INCOMPATIBLE_TITLE
Failed to find conversation with activitySession
SharePlay not allowed
v24@?0@"NSSet"8@"NSError"16
v16@?0@"IDSGroupSessionParticipantUpdate"8
Invitation
Upgrade
AddMember
ResendAVCBlobRequest
ResendAVCBlobResponse
RespondedElsewhere
AddActivitySession
Decline
LetMeInRequest
LinkCreated
NicknameUpdated
EncryptedConversationMessage
LetMeInDelegation
LetMeInDelegationResponse
LetMeInResponse
RemoveMember
RemoveActivitySession
RequestVideoUpgrade
UpdateActivity
LinkInvalidated
AddLightweightMember
LinkChanged
UpdateActivityImage
GuestModeUpdated
Endorse
AddHighlight
RemoveHighlight
UpdateJoinedMetadata
ParticipantUpdated
RegisterMessagesGroupUUID
tokenPrefixedURI
unsafeData
encryptedData
This call's call history identifier is nil
CHRecentCall_CSD.m
!(call_category == %@ && service_provider == %@)
voip
com.apple.developer.networking.networkextension
app-push-provider
protoWantsVideo
OBSOLETE_protoMomentsAvailable
protoSenderMuteUplink
protoShouldSuppressInCallUI
protoMomentsV2Available
protoUpgradeSessionUUID
B16@?0@"TURoute"8
<%@ %p category=%@ mode=%@>
v32@?0@"TURoute"8Q16^B24
v24@?0@"TURoute"8^B16
com.apple.private.alloy.facetime.audio
applicationContext
activityIdentifier
activityContext
updatedDateEpochTime
fallbackApplicationName
activityMetadata
isSystemActivity
timestampAsTimeIntervalSinceReferenceDate
fromHandle
handleType
notificationStyles
faceTimeAudioAvailable
faceTimeVideoAvailable
00000000-0000-0000-0000-000000000000
com.apple.telephonyutilities.callservicesd.incomingcallfilter
@"CXCallDirectoryStore"8@?0
q24@?0@"NSString"8@"NSString"16
%ld%@
callerId
generatorID
generatorVersion
CSDIDSSession.m
-[CSDIDSSession init]
<%@ %p %@>
UUID=%@
name
protoPersonNameComponents
suggestedName
companyName
mapName
location
contactName
contactLabel
callDirectoryLabel
callDirectoryLocalizedExtensionContainingAppName
callDirectoryExtensionIdentifier
contactIdentifiers
com.apple.telephonyutilities.callservicesd.useractivitycommunicator
announcements
GondolaLinkOverrideBaseURL
com.apple.private.alloy.phone.auth
-[CSDIDSGroupSession addMembers:toExistingMembers:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:requiredCapabilities:messagesGroupUUID:messagesGroupName:addingFromLetMeIn:triggeredLocally:highlightIdentifier:stagedActivitySession:avMode:]
v24@?0@"CSDClient"8@"<TUCallServicesXPCClient>"16
com.apple.telephonyutilities.callservicesdaemon.callstatecontroller
7UhDrmrZozgwO+3AgUbHxw
%@-%d
B16@?0@"CSDClient"8
NRPairedDeviceRegistry
NanoRegistry
282F1EE6-A144-4106-AFFB-2BDB5B59FD0D
com.apple.telephonyutilities.callservicesdaemon.voicemailcallended
callsToHold
callsToUnhold
callsToDisconnect
v16@?0@"TUCall"8
-[CSDCallStateController dialWithRequest:reply:]
-[CSDCallStateController dialWithRequest:displayContext:]
-[CSDCallStateController answerCallWithRequest:]
-[CSDCallStateController holdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController unholdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController requestVideoUpgradeForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController disconnectCallWithUniqueProxyIdentifier:]
-[CSDCallStateController groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:]
-[CSDCallStateController ungroupCallWithUniqueProxyIdentifier:]
-[CSDCallStateController swapCalls]
-[CSDCallStateController playDTMFToneForCallWithUniqueProxyIdentifier:key:]
-[CSDCallStateController disconnectCurrentCallAndActivateHeld]
-[CSDCallStateController disconnectAllCalls]
-[CSDCallStateController setTTYType:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pullRelayingCallsFromClient]
-[CSDCallStateController pushRelayingCallsToHostWithSourceIdentifier:]
-[CSDCallStateController pullCallFromClientUsingHandoffActivityUserInfo:reply:]
-[CSDCallStateController sendMMIOrUSSDCodeWithRequest:]
-[CSDCallStateController setUplinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setDownlinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setIsSendingVideo:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setMixesVoiceWithMedia:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setSharingScreen:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pushHostedCallsToDestination:]
-[CSDCallStateController pullHostedCallsFromPairedHostDevice]
-[CSDCallStateController sendHardPauseDigitsForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController updateCallWithProxy:]
-[CSDCallStateController enteredForegroundForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController willEnterBackgroundForAllCalls]
-[CSDCallStateController enteredBackgroundForAllCalls]
-[CSDCallStateController setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:]
-[CSDCallStateController setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:]
-[CSDCallStateController setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:]
-[CSDCallStateController setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:]
-[CSDCallStateController shouldSuppressInCallStatusBar:]
-[CSDCallStateController shouldAllowRingingCallStatusIndicator:]
v24@?0@"NSUserActivity"8@"NSError"16
-[CSDCallStateController activateInCallUIWithActivityContinuationIdentifier:]
-[CSDCallStateController joinConversationWithRequest:]
-[CSDCallStateController setCurrentAudioInputDeviceToDeviceWithUID:]
-[CSDCallStateController setCurrentAudioOutputDeviceToDeviceWithUID:]
-[CSDCallStateController localRoutesByUniqueIdentifier:]
-[CSDCallStateController pairedHostDeviceRoutesByUniqueIdentifier:]
-[CSDCallStateController pickLocalRouteWithUniqueIdentifier:shouldWaitUntilAvailable:]
-[CSDCallStateController pickPairedHostDeviceRouteWithUniqueIdentifier:shouldWaitUntilAvailable:]
-[CSDCallStateController containsRestrictedHandle:forBundleIdentifier:performSynchronously:reply:]
-[CSDCallStateController policyForAddresses:forBundleIdentifier:reply:]
-[CSDCallStateController willRestrictAddresses:forBundleIdentifier:reply:]
-[CSDCallStateController shouldRestrictAddresses:forBundleIdentifier:performSynchronously:reply:]
-[CSDCallStateController isUnknownAddress:normalizedAddress:forBundleIdentifier:reply:]
-[CSDCallStateController filterStatusForAddresses:forBundleIdentifier:reply:]
B24@?0@"TUCall"8@"NSDictionary"16
com.apple.telephonyutilities.callservicesd.voipapplicationcontroller
com.apple.callkit.networkextension.voip
com.apple.networkextension.voip.launch
com.apple.telephonyutilities.callservicesdaemon.voip
com.apple.pushkit.launch.voip
com.apple.telephonyutilities.callservicesd.csdvoipapplicationcontroller.daily
bundleIDs
CSDVoIPApplicationKillCounts
com.apple.telephonyutilities.callservicesdaemon.voip.push
com.apple.telephonyutilities.callservicesdaemon.voip.push.development
v24@?0@"BSProcessHandle"8@"NSError"16
 identifier=%llu
 handle=%@
 isMuted=%d
 isMomentsAvailable=%d
 streamToken=%ld
 screenToken=%ld
 captionsToken=%ld
 avcIdentifier=%@
 capabilities=%@
 isAudioPaused=%d
 isRemoteAudioEnabled=%d
 isRemoteVideoEnabled=%d
 isLightweight=%d
 isLocalAccountHandle=%d
 association=%@
 isGuestModeEnabled=%d
<%@: %p %@>
object=%@ processIdentifier=%d processName=%@ processBundleIdentifier=%@
fallbackURL
supportsContinuationOnTV
title
subtitle
image
preferredBroadcastingAttributes
sceneAssociationBehavior
com.apple.telephonyutilities.callservicesd.conversationmanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.conversationmanager
-[CSDConversationManagerXPCServer createActivitySession:onConversationWithUUID:]
v16@?0@"TUConversationActivitySession"8
-[CSDConversationManagerXPCServer setUsingAirplay:onActivitySession:onConversationWithUUID:]
Conversation is not associated with a Messages group
No messages group details provider available
v24@?0@"CSDClient"8@"<TUConversationManagerXPCClient>"16
com.apple.telephonyutilities.callservicesd.callprovidermanager
Cannot launch app for dial request with a system provider: %@
Cannot launch app for invalid dial request: %@
NSSet<NSString *> *_INSupportedIntentsByExtensions(NSArray<LSPlugInKitProxy *> *__strong, NSError *__autoreleasing *)
CSDCallProviderManager.m
INSupportedIntentsByExtensions
void *IntentsLibrary(void)
v52@?0@"NSUUID"8B16B20B24@"NSUUID"28@"TUHandle"36@"NSString"44
incomingCallRaiseToAnswerEnabledKey
CMGestureManager
CoreMotion
v24@?0@"CSDIDSTransport"8@"NSDictionary"16
SBSLaunchApplicationWithIdentifier
SpringBoardServices
access-calls
modify-calls
modify-status-bar
access-call-capabilities
modify-call-capabilities
access-call-history
modify-call-history
access-moments
modify-moments
modify-usernotifications
modify-reports
override-activity-verification
register-gft-service
needs-ui-assertion
access-media-priorities
modify-activity-session-airplay
Entitlement check: In %s, client %@ lacks capability '%@'
CSDUserActivityConversationHandoffRecommendationChangedNotification
com.apple.telephonyutilities.suppressringtone
 activityType=%@
 dynamicIdentifier=%@
 activityUserInfo=%@
registeredProviders
registeredProvidersVersion
registeredRelayProviders
Ringtones
com.apple.LaunchServices.applicationUnregistered
com.apple.telephonyutilities.callservicesd.csdmomentsreportingsession
CSDMomentsReportingSession.m
-[CSDMomentsReportingSession init]
self
shouldTraceSignposts
@"AVCSessionParticipant"16@?0@"CSDConversationParticipant"8
@"AVCSession"32@?0@"NSString"8@"NSObject<NSCopying>"16@"NSObject<OS_dispatch_queue>"24
@"AVCScreenCapture"16@?0@"AVCScreenCaptureConfiguration"8
CSDAVCSessionError
avcKeySessionSentBytes
avcKeySessionReceivedBytes
CSDExternalIDSDualSession.m
<display_name>
CELLULAR_SETTINGS
prefs:root=MOBILE_DATA_SETTINGS_ID
WLAN_SETTINGS
WIFI_SETTINGS
prefs:root=WIFI
SETTINGS
prefs:root=General&path=DATE_AND_TIME
prefs:root=FACETIME&path=LOCATION&guid=%@
%s is unavailable, call another initializer instead.
-[CSDRelayConferenceConnection init]
CSDRelayConferenceConnection.m
 identifier=%@
 transport=%@
 isHost=%d
 isUsingBaseband=%d
 isAudioDisabled=%d
 receivedSuccessfulDidStart=%d
 isPreparedToStop=%d
<%@ %p>
    Are capabilities valid: %@
    Sender identity capabilities: %@
    Emergency callback capabilities: %@
    Thumper local device ID: %@
    Thumper local accounts: %@
    Thumper secondary accounts: %@
disabled
q24@?0@"CSDThumperAccount"8@"CSDThumperAccount"16
uniqueIdentifier
deviceType
protoCurrentlyPicked
protoGuest
protoSupportsRelay
AirPods
BeatsSolo
BeatsX
Powerbeats
BeatsStudio
HomePod
iMac
MacBook
MacMini
MacPro
Watch
HomePodStereoPair
iPadPro
PowerbeatsPro
BeatsSoloPro
AirPodsPro
Powerbeats4
HeadPods
BeatsX2
HomePodMini
HomePodMiniStereoPair
BeatsStudioBuds
BeatsFitPro
AirPods3
CSDConversationProviderManager
Already registered provider for identifier: %@
Did not register GFT Provider with identifier: %@
Pseudonym creation is not enabled
v24@?0@"RBSProcessHandle"8@"RBSProcessExitContext"16
v16@?0B8B12
activeParticipants
addedMembers
isLetMeInApproved
encryptedMessage
letMeInDelegationHandle
letMeInDelegationUUID
enclosedEncryptedType
invitationPreferences
removedMembers
joinedMetadata
Default
IDSMessageProxy
CSDFaceTimeIMAccountCallerIDChangedNotification
lastKnownFaceTimeCallerID
com.apple.telephonyutilities.callservicesd
com.apple.telephonyutilities.callservicesd.facetimeimaccount
v16@?0^{__CFDictionary=}8
ambiguityState
swappable
mergeable
holdAllowed
addCallAllowed
takingCallsPrivateAllowed
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
sendToVoicemailAllowed
protoUUID
localizedShortName
accountUUIDString
localizedServiceName
v32@?0@"NSString"8@"NSString"16@"NSDictionary"24
nilCallProvider
CallUUID
Unknown Dial Failure for Conversation
Unknown Call Failure for Conversation
Mediaserverd crash
No AVC error reason given
AVC session did not start
AVC audio client did not start
AVC blob recovery timeout
RelayFailedConferenceFailed
RelayFailedNoRelayDevice
ComponentCrashed
RelayFailedRelayDeviceRelayNotEnabled
NoLocalLink
CallFailed
DialFailed
AccountUnsupported
NetworkUnsupported
ProviderCrashed
MediaStartFailed
MediaServerCrashed
NoReason
Disconnected
ReceiverDeclined
LocalUnanswered
RemoteUnanswered
InitiatorCancelled
CouldNotConnect
RemoteEnded
NoLocalData
NoRemoteData
FailedToOpenSocket
LocalHangup
RemoteHangup
NoLocalNetwork
MissingRemoteInfo
NoRemoteNetwork
EncryptionSetupFailed
EncryptionFailed
DecryptionFailed
SystemInternalError
NoRemotePackets
ReceiverBusy
SystemUnsupported
QRConfigurationError
SKEConfigurationError
QRAllocbindTimeout
QRUnallocbindTimeout
QRConnectedTimeout
AcceptedElsewhere
DeclinedElsewhere
AliasDeactivated
AllocatorParseError
AllocatorInvalidField
AllocatorInternalError
AllocatorServerBusy
AllocatorMissingKey
AllocatorBadSignature
AllocatorRateLimitExceeded
AllocatorUnknownError
InitialMkMDistributionFailure
JoinNotificationDistributionFailure
QRAllocateRequestTimeout
IdleClient
ParticipantBlockedListed
AllocatorBlockUPlusOneSession
AbortedByCaller
AbortedByReceiver
ReceiverOffline
HostHangup
Shutdown
LocalNetworkUnsupported
RemoteNetworkUnsupported
SystemComponentCrashed
CouldNotInvite
CouldNotRespond
CouldNotCancel
CouldNotSendUpdate
CouldNotSendAVMessage
CallLocalUnanswered
CallRemoteUnanswered
CallDeclinedElsewhere
CallFiltered
RemoteUserDoesNotExist
RemoteUserIncompatible
LocalUserIncompatible
CallerAccountInvalid
CallerAccountNeedsUpdate
Call Failure
com.apple.telephonyutilities.callservicesdaemon.reportingcontroller
B16@?0@"<CSDCallFilter>"8
shouldCheckAllGenerators
generatorDescriptors
A910C931-A590-41EF-A783-910BFBE500B3
com.apple.telephonyutilities.callservicesd.callhistorymanager
outgoingLocalParticipantUUID == %@
v32@?0@"<CSDCallHistoryManagerDelegate>"8@"NSObject<OS_dispatch_queue>"16^B24
CSDIDSDeviceListChangedNotification
CSDIDSServiceCallerIDChangedNotification
CSDIDSServiceQueryListenerID
CSDIDSService.m
All CSDIDSService subclasses must override +sharedInstance
com.apple.telephonyutilities.callservicesd.%@
    devices: %@
    availableOutgoingRelayCallerIDs: %@
    defaultPairedDevice: %@
    pairedDevice: %@
    telephonyCapableDeviceExists: %@
    relayCapableDeviceExists: %@
", "
pairedDeviceUniqueIDOverride
AudioAccessory
v24@?0@"CSDIDSTransport"8@"NSData"16
com.apple.callservicesdaemon.csdmomentscontroller
PreserveFaceTimePhotosFiles
CSDMomentsControllerStartedRemoteCaptureNotification
CSDMomentsControllerStartedLocalVideoCaptureNotification
CSDMomentsControllerStoppedLocalVideoCaptureNotification
CSDMomentsControllerMetadataKeyTransactionID
heic
lp_image
lp_movie
com.apple.telephonyutilities.callservicesd.csdmomentscontroller
@"<CSDAVCMoments>"40@?0q8@"NSString"16@"<CSDAVCMomentsDelegate>"24@"NSObject<OS_dispatch_queue>"32
com.apple.telephonyutilities.callservicesdaemon.momentscontroller
Could not start request for mediaType: %d streamToken: %ld. -[AVCMoments newRequestWithMediaType:] returned nil.
Could not start request for mediaType: %d streamToken: %ld. No session has been registered for requested stream token.
Asked to start moments request with invalid media type %d
Asked to start moments request but moments is disabled by server bag
-[CSDMomentsController startRequestWithMediaType:forStreamToken:requesteeID:reply:]
Could not find request for transaction ID %@
-[CSDMomentsController endRequestWithTransactionID:reply:]
-[CSDMomentsController registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:reply:]
-[CSDMomentsController unregisterStreamToken:reply:]
v24@?0@"CSDClient"8@"<TUMomentsControllerXPCClient>"16
v16@?0@"NSString"8
v24@?0@"NSString"8@"NSError"16
@"TUICFQueryResult"24@?0@"NSString"8@"NSString"16
B20@?0@"TUCallProvider"8B16
B16@?0@"CSDCall"8
com.apple.telephonyutilities.callservicesd.TinCan
Not allowing requested %@ because user intent could not be reasonably validated to gain access to the microphone while in the background.
v16@?0@"CXCallSource"8
We have an active XPC connection but no corresponding CSDClient
CSDClientManager.m
B24@?0@8@"NSDictionary"16
com.apple.TUCallCenter
CSDCallDataSource.m
All CSDCallDataSource subclasses must override +callClass
com.apple.backboard.proximity.changed
v32@?0@"<CSDProximitySensorObserverDelegate>"8@"NSObject<OS_dispatch_queue>"16^B24
CSDVoIPApplicationMessageTransportTypeUnknown
CSDVoIPApplicationMessageTransportTypeNetworkExtension
CSDVoIPApplicationMessageTransportTypePushKitVoIP
<%@ %p type=%d
 socket=%d
 destination=%@
 initialLinkType=%lu
 remoteDestination=%@
 remoteDeviceUniqueIdentifier=%@
callservicesd launched
join
viewCall
requestScreenShare
continueActivity
viewLinkDetails
continueHandoff
let-me-join
FaceTime
Phone
com.apple.TVWatchList
com.apple.TVMusic
com.apple.mobilenotes
callBack
sendMessage
deviceFamily
style
displayScale
scaleFactor
originalWidth
originalHeight
com.apple.InCallService
MPVoicemailDeleteMessageBulletinBoardActionIdentifier
MPCallBulletinBoardActionIdentifier
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
GeneratorDescriptor
RTCCSDRelayDeviceRoute
AnyAudioInterruptionProvider
AVAudioSessionInterruptionProvider
CSDIDSDualSessionProvider
v20@0:8B16
v24@0:8q16
v20@0:8I16
T@"<CSDIDSDualSessionProviderDelegate>",N,W
endedReason
TI,N,R
shouldUseSocketForTransport
TB,N,R
socket
Ti,N,R
destination
T@"NSString",N,R
initialLinkType
audioEnabled
TB,N
invitationTimeout
Tq,N
@"<CSDIDSDualSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSDualSessionProviderDelegate>"16
@"NSString"16@0:8
v24@0:8@"NSDictionary"16
v24@0:8@"NSData"16
v32@0:8@"NSData"16@"NSSet"24
v28@0:8@"NSData"16B24
CSDIDSChat
v32@0:8{CGSize=dd}16
v20@0:8i16
T@"<CSDIDSChatDelegate>",N,W
UUID
T@"NSUUID",N,R
sessionUUID
T@"TUHandle",N,R
hasSentInvitation
dateStartedConnecting
T@"NSDate",N,R
dateConnected
dateEnded
outgoing
video
mayRequireBreakBeforeMake
videoStreamToken
inputAudioPowerSpectrumToken
outputAudioPowerSpectrumToken
spatialAudioSourceIdentifier
crossDeviceIdentifier
remoteFromID
failureContext
T@"CXCallFailureContext",N,R
upgradeSessionUUID
T@"NSUUID",N,C
muted
sendingAudio
sendingAudioData
sendingVideo
relaying
remoteUplinkMuted
remoteMomentsAvailable
shouldSuppressInCallUI
localSenderIdentityUUID
@"<CSDIDSChatDelegate>"16@0:8
v24@0:8@"<CSDIDSChatDelegate>"16
@"NSUUID"16@0:8
@"TUHandle"16@0:8
@"NSDate"16@0:8
@"CXCallFailureContext"16@0:8
v24@0:8@"NSUUID"16
v32@0:8@"<CXVideoAspectRatioDescriptor>"16@?<v@?@"NSArray"B>24
v24@0:8@"<CXVideoAspectRatioDescriptor>"16
faceTimeAppUUID
CSDCallCenterObserver
T@"<CSDCallCenterObserverDelegate>",N,&
triggers
T@"<CSDCallContainer>",N,R
@"<CSDCallCenterObserverDelegate>"16@0:8
v24@0:8@"<CSDCallCenterObserverDelegate>"16
@?<v@?@"CSDCall"Q>16@0:8
v24@0:8@?<v@?@"CSDCall"Q>16
@"<CSDCallContainer>"16@0:8
@"TUConversation"24@0:8@"TUCall"16
CSDCallContainer
CSDCallCenterObserverDelegate
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
CSDConversationInvitationResolving
B40@0:8@16@24@32
B32@0:8@"TUConversation"16@"TUHandle"24
B40@0:8@"TUConversation"16@"TUHandle"24@"NSSet"32
CSDPendingMembershipTrackerMessenger
v56@0:8@16@24@32@40@48
v52@0:8@16@24@32@40B48
v56@0:8@"NSSet"16@"CSDConversation"24@"TUConversationLink"32@"NSUUID"40@"TUConversationMember"48
v52@0:8@"NSSet"16@"CSDConversation"24@"NSUUID"32@"TUConversationMember"40B48
CSDPendingMembershipTrackerDelegate
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v48@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"CSDConversation"32@"NSData"40
v40@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"NSUUID"32
CSDDirtyCallManager
@?<v@?@"CSDCall">16@0:8
v24@0:8@?<v@?@"CSDCall">16
v24@0:8@"CSDCall"16
CSDConversationServerBag
activeParticipantPruningTimeout
sessionCleanupTimeout
AVCBlobRecoveryGracePeriod
AVCBlobRecoveryTimeout
rebroadcastTimeThreshold
activeParticipantRefreshDelay
automaticUpgradingEnabled
modernGFTEnabled
sharePlayVersionCheckEnabled
maxActiveParticipantFetchRetries
maxKickMemberRetries
linkPseudonymExpiry
inactiveLinkPseudonymExpiry
inactiveLinkCacheLimit
webNicknameLengthLimit
linkSyncRecoverFailureLimit
linkSyncRecoverTimeLimit
activityIdentifierBundleIDMapping
T@"NSDictionary",N,R
messageRetryMaxAttempts
messageRetryIntervalMillis
expanseConduitProxyEnabled
gftDowngradeToOneToOneAvailable
maxRemoteMirageParticipants
uPlusNDowngradeAvailable
neighborhoodActivityConduitTimeout
guestModeSupported
@"NSDictionary"16@0:8
@"NSString"24@0:8@"NSString"16
B24@0:8@"NSString"16
TUConversationLinkDescriptorDataSource
B32@0:8@16^@24
Q32@0:8@16^@24
@48@0:8@16Q24Q32^@40
v48@0:8@16Q24Q32@?40
Q44@0:8B16q20@28^@36
v44@0:8B16q20@28@?36
Q48@0:8@16q24@32^@40
v48@0:8@16q24@32@?40
conversationLinkDescriptorDataSourceDelegate
T@"<TUConversationLinkDescriptorDataSourceDelegate>",N,&
@"<TUConversationLinkDescriptorDataSourceDelegate>"16@0:8
v24@0:8@"<TUConversationLinkDescriptorDataSourceDelegate>"16
B32@0:8@"NSArray"16^@24
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
Q32@0:8@"NSPredicate"16^@24
v32@0:8@"NSPredicate"16@?<v@?Q@"NSError">24
@"NSArray"48@0:8@"NSPredicate"16Q24Q32^@40
v48@0:8@"NSPredicate"16Q24Q32@?<v@?@"NSArray"@"NSError">40
Q44@0:8B16q20@"NSPredicate"28^@36
v44@0:8B16q20@"NSPredicate"28@?<v@?Q@"NSError">36
Q48@0:8@"NSDate"16q24@"NSPredicate"32^@40
v48@0:8@"NSDate"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
Q48@0:8@"NSSet"16q24@"NSPredicate"32^@40
v48@0:8@"NSSet"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
Q48@0:8@"NSString"16q24@"NSPredicate"32^@40
v48@0:8@"NSString"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
CSDConversationLinkManagerDelegate
v32@0:8@"CSDConversationLinkManager"16@"NSArray"24
TUVouchingEnablement
shouldForceVerificationFailures
CSDIDSService
B72@0:8@16@24@32q40@48^@56^@64
T@"<CSDIDSServiceDependencies>",N,R
allAliases
devices
callerID
countryCode
telephonyCapableDeviceExists
relayCapableDeviceExists
defaultPairedDeviceExists
pairedDeviceExists
hasActiveAccounts
defaultPairedDevice
T@"IDSDevice",N,R
pairedDevice
availableOutgoingRelayCallerIDs
T@"NSSet",N,R
localDeviceUniqueID
account
T@"IDSAccount",N,R
@"<CSDIDSServiceDependencies>"16@0:8
@"NSArray"16@0:8
@"IDSDevice"16@0:8
@"NSSet"16@0:8
@"IDSAccount"16@0:8
@"IDSDevice"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"<IDSServiceDelegatePrivate>"16@"OS_dispatch_queue"24
v24@0:8@"<IDSServiceDelegatePrivate>"16
B72@0:8@"NSData"16@"IDSAccount"24@"NSSet"32q40@"NSDictionary"48^@56^@64
OS_nw_activity
CSDScreenSharingActivityManagerDelegate
v36@0:8@16@24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"<TUScreenShareAttributes>"24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"NSError"24B32
TUScreenShareAttributes
T@"NSNumber",N,&
originalResolution
T@"NSValue",N,&
frameRate
displayID
windowed
windowUUID
@"NSNumber"16@0:8
v24@0:8@"NSNumber"16
@"NSValue"16@0:8
v24@0:8@"NSValue"16
B24@0:8@"<TUScreenShareAttributes>"16
currentDeviceFamily
defaultDisplayScale
T@"NSNumber",N,R
defaultScaleFactor
CSDAVCMoments
@48@0:8q16@24@32@40
@32@0:8C16C20@24
T@"<CSDAVCMomentsDelegate>",N,R
streamToken
capabilities
activeRequestCount
pendingRequestCount
@"<CSDAVCMomentsDelegate>"16@0:8
@48@0:8q16@"NSString"24@"<CSDAVCMomentsDelegate>"32@"OS_dispatch_queue"40
@"<CSDAVCMomentsRequest>"32@0:8C16C20@"NSString"24
CSDVoucherManager
v40@0:8@16@24@?32
v40@0:8@"NSData"16@"TUHandle"24@?<v@?@"TUVoucher"@"NSError">32
v32@0:8@"TUVoucher"16@?<v@?B@"NSError">24
CSDTTYProviderObserver
transportMethod
TUFeatureFlags
conversationOneToOneModeEnabled
conversationHandoffEnabled
vouchingEnabled
uNNotificationsMacOSEnabled
expanseEnabled
sharePlayDisabled
sharePlayDiscoverabilityEnabled
sharePlayWithAirplayEnabled
ftvSpatialAudioEnabled
FTUserScore
livePhotoXPCServiceEnabled
nonInterruptingCalls
qrPluginEncryptionEnabled
unreliableMessengerEnabled
supportsScreenSharing
individualAudioVideoToggleEnabled
expanseBTSwitchingEnabled
TTRBannerEnabled
aTVHandoff
suggestionsReloadForSelectedRecipients
gftDowngradeToOneToOne
uPlusNDowngrade
requestA2DPOverIncomingCalls
mochiEnabled
screenCaptureKitEnabled
avLessSharePlayEnabled
continuityCaptureEnabled
greenTeaLinksEnabled
updatedBannersEnabled
screenSharingCALayerHostMode
_TtP13callservicesd36CSDCollaborationStateManagerDelegate_
v40@0:8q16@24@32
T@"OS_dispatch_queue",N,R
@"OS_dispatch_queue"16@0:8
v40@0:8q16@"NSString"24@"NSUUID"32
CSDAVCMomentsDelegate
v28@0:8@"<CSDAVCMoments>"16I24
v40@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSError"32
v56@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSURL"32@"NSURL"40@"NSError"48
v24@0:8@"<CSDAVCMoments>"16
CSDAVCMomentsRequest
C16@0:8
transactionID
mediaType
TC,N,R
requesterID
requesteeID
CSDNeighborhoodActivityConduitDelegate
v48@0:8@16@24q32@?40
v24@0:8@"TUNearbyDeviceHandle"16
v48@0:8@"TUConversation"16@"TUNearbyDeviceHandle"24q32@?<v@?B@"NSError">40
TUContactsDataSource
@40@0:8@16@24^@32
r^v24@0:8@16
@"NSDictionary"40@0:8@"NSArray"16@"NSArray"24^@32
@"CNContact"40@0:8@"NSString"16@"NSArray"24^@32
@"NSArray"40@0:8@"NSPredicate"16@"NSArray"24^@32
r^v24@0:8@"CNContact"16
@"CNContact"32@0:8@"NSString"16@"NSArray"24
OS_dispatch_source_timer
IDSCTSIM
SIMIdentifier
phoneNumber
label
isDefaultVoiceSIM
slot
mobileCountryCode
mobileNetworkCode
CNKeyDescriptor
OS_xpc_object
CSDIDSSessionProvider
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
TUCallContainer
@24@0:8@?16
@20@0:8i16
Q24@0:8@?16
B24@0:8@?16
B20@0:8i16
currentCalls
currentVideoCalls
currentAudioAndVideoCalls
incomingCalls
displayedCalls
displayedAudioAndVideoCalls
conferenceParticipantCalls
callsHostedElsewhere
callsWithAnEndpointElsewhere
callsHostedOrAnEndpointElsewhere
callsOnDefaultPairedDevice
incomingCall
T@"TUCall",N,R
incomingVideoCall
activeVideoCall
currentVideoCall
currentCallCount
currentVideoCallCount
currentAudioAndVideoCallCount
callCountOnDefaultPairedDevice
hasCurrentCalls
hasCurrentAudioCalls
hasCurrentVideoCalls
anyCallIsHostedOnCurrentDevice
anyCallIsEndpointOnCurrentDevice
currentCallGroups
currentAudioAndVideoCallGroups
callGroupsOnDefaultPairedDevice
@"NSArray"24@0:8@?<B@?@"TUCall">16
@"NSArray"20@0:8i16
@"NSArray"24@0:8@"NSUUID"16
@"TUCall"24@0:8@?<B@?@"TUCall">16
@"TUCall"16@0:8
@"TUCall"20@0:8i16
@"TUCall"24@0:8@"NSString"16
@"TUCall"24@0:8@"NSArray"16
Q24@0:8@?<B@?@"TUCall">16
B24@0:8@?<B@?@"TUCall">16
TUCallContainerPrivate
@32@0:8@?16@?24
_allCalls
displayedCall
conferenceCall
frontmostCall
frontmostAudioOrVideoCall
existingCallsHaveMultipleProviders
@"TUCall"32@0:8@?<B@?@"TUCall">16@?<q@?@@>24
NSSecureCoding
supportsSecureCoding
OS_dispatch_source
NSCopying
@24@0:8^{_NSZone=}16
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
_TtC13callservicesd28AnyAudioInterruptionProvider
boxed
_beginOrUpdate
_end
_resetState
_activeDescriptor
Sending updated policy for %s: %{bool}d
Sending policy infos: %s
No policy info to send, skipping
CSDTinCanIDSProviderDelegate
@40@0:8@16@24@32
isAccountActive
isDestinationValid
destinationsGenerator
outgoingSessionProviderGenerator
outgoingChatGenerator
contactsDataProvider
@"<CSDIDSChat>"36@?0@"CSDExternalIDSDualSession"8@"TUHandle"16B24@"NSDictionary"28
callservicesd.TinCanIDSProviderDelegate
init(capabilities:queue:)
CSDMessagingCallMessage could not be read
Received TinCan message: %@
TinCan message was of unknown type %@: %@
Could not find chat for set muted action  %@. All chats: %@
Sending TinCan message for sender mute uplink: %@
Failing action: %@ since its not relaying
Could not find chat for set relaying action  %@. All chats: %@
Cannot start TinCan IDS chat using service %@ because account is not active
Cannot start TinCan IDS chat using handle because IDS destination was invalid
Created TinCan session to destinations %@ with options: %@
Starting TinCan IDS chat: %@
v20@?0@"NSArray"8B16
Tried to make an outgoing call when we already had a ringing call with the same destination
TinCan IDS chat was canceled
SenderMuteUplink
Server bag does not support quick relay since current version is unspecified
qr-invitations-enabled
Server bag does not support quick relay since minimum version is unspecified
quickRelaySupported
CSDFaceTimeIDSProviderDelegateServerBag
loaded
B24@0:8@16
Q16@0:8
superclass
description
CSDUserIntentManager
v24@0:8@16
privateAPIValidator
$__lazy_storage_$_applicationStateValidator
donatedIntentValidator
backgroundBluetoothAccessValidator
mediaRemoteStateValidator
Validating intent for call source: %@ callSourceHasReasonableUserIntent: %@ isUserIntentConfident: %@ (%@)
Playing alert for background mic access: %@
callservicesd.UserIntentManager
init()
Enabling file protection class for conversation persistence storage
Cannot cast value: %@ to type: %@
CSDEmergencyCallbackCapabilities
_emergencyCallbackPossible
emergencyCallbackCapabilitiesDidChange
preventDetachAfterEmergencyCallTimeoutDeterminationHandler
dispatchAfterHandler
dispatchCancelHandler
callCenterObserver
preventDetachAfterEmergencyCallTimeoutWorkItem
emergencyCallbackPossible
callservicesd.EmergencyCallbackCapabilities
v24@?0@"CSDCall"8Q16
Starting prevent detach after emergency call timer with timeout of %d seconds. Marking emergency callback possible
Prevent detach after emergency call timer fired. Marking emergency callback as no longer possible
_CTServerConnectionCarrierSettingsCopyValue - encountered error %d %d
PreventDetachAfterEmergencyCallTimer
@?<v@?>16@0:8
v24@0:8@?<v@?>16
_TtC13callservicesdP33_7D766AEB715565F6893650EFEF7EA3D422OneShotCancellationBox
lock
state
CSDPowerAssertionManager
powerAssertion
powerAssertionDescription
acquirePowerAssertionHandler
releasePowerAssertionHandler
com.apple.telephonyUtilities.callservicesd.HomePodRelay
B16@?0@"TUCall"8
PowerAssertionManager: Call relayed to HomePod, call=%@
releasing PowerAssertion %@
acquired PowerAssertion %@
_TtC13callservicesd32AudioInterruptionProviderFactory
AudioAccessory5,1
callservicesd.LetMeInRequestorKeyAgreement
CSDLetMeInRequestorKeyAgreement
B16@0:8
v16@0:8
localKey
requestKey
responseKey
isExhausted
Failed to derive let me in requestor's public key from the locally-generated private key.
Failed to retrieve combined data from encrypted LMI response.
CSDProviderDisplayMonitor
@28@0:8@16i24
provider
displayLayoutMonitor
$__lazy_storage_$_processObserver
isVisible
callservicesd.ProviderDisplayMonitor
com.apple.telephonyutilities.callservicesd.providerdisplaymonitor
HoldMusicDescriptor()
callservicesd
silenceUnknownCallersEnabled
maxJunkLevel
v24@0:8Q16
v24@0:8@?16
callContainerClosure
notificationCenter
T@"<CSDCallCenterObserverDelegate>",N,W,Vdelegate
TQ,N,Vtriggers
Could not retrieve conversation from notification %@
Could not retrieve call with conversation group UUID %@
Received notification %@ for unrecognized trigger
Call not specified in notification %@
TQ,N
NSObject
#16@0:8
_TtC13callservicesd33GroupFaceTimeNotificationProvider
conversationManager
ftNetworkSupport
invitationResolver
notificationIdentifiersByConversationUUID
carPlayNotificationIdentifiersByConversationUUID
faceTimeNotificationCenter
facetimeIsShowingOnScreen
unlockAndOpenSensitiveURL
localizeConversationName
localizeHandleName
localizeHandleNameWithConversation
notificationType
categories
replace
removeNotification
updateBadgeValue
Unknown notification response received
continueActivity action for notification: %@
Ignoring notification response %@ because a pseudonym is missing/could not be typecasted in userInfo
Failed to construct FaceTime app URL to view link details
Launching FaceTime for notification response via url %@
handoffDynamicIdentifier
Ignoring notification response %@ because a handoff dynamic identifier is missing/could not be typecasted in userInfo
MAYBE_NICKNAME_%@
TelephonyUtilities
group-facetime-invite
group-facetime-participant-join
ACCEPT_SHARE_SCREEN_REQUEST
group-facetime-participant-screenshare-request
group-facetime-moments-request
group-facetime-let-me-in-approved
VIEW_LINK_DETAILS
group-facetime-let-me-in-request-pre-conversation
group-facetime-handoff-eligibility
Replacing handoff eligible nearby notification from old conversation UUID %@ to new conversation UUID %@
conversation-handoff-nearby
Not posting handoff nearby notification for conversation %@ because it did not have handoff eligibility
FACETIME_AUDIO_SERVICE
MOVE_CALL_TO_THIS
Posting notification request %@ for handoff eligible conversation UUID %@ nearby
FACETIME_SERVICE
Not posting user notification for handoff eligible conversation %@ because there's already a local non-waiting conversation
Ignoring adding notification request %@ since valid network is not reachable
Handoff eligibility changed for %@
Removing handoff eligible nearby notification for conversation UUID %@
In response to conversations changed, we determined that we should post an invite notification for conversation UUID %@
Posting notification request for conversation UUID %@ with content %@
JOIN_FACETIME_CALL
GFT_PARTICIPANT_REQUESTING_SHARE_SCREEN
Removing handoff notification as there are no handoff-eligible conversations left
No notification for conversation UUID %@
Tracked pending member changed, but not a locally owned link -- ignoring %@ %@
Failed to determine conversation link for pending member notification with conversation %@ and conversationLink %@
Not posting pending member notification becaue Group FaceTime is not supported (GreenTea device or doesn't support multiway)
GFT_LET_ME_IN_REQUESTED
authorizationRequest-
v16@?0@"NSArray"8
Skip posting pending member notification because hasJoined: %{BOOL}d, ignoreLMIRequests: %{BOOL}d for conversation: %@
Replacing notification id %@ with content %@
Not posting LMI approval notification because the conversation is currently showing on screen
GFT_LET_ME_IN_GRANTED
Removing invite notification for conversation UUID %@ with notification identifier
Conversation UUID %@ had a state change, and we determined that we should post an invite notification
Handling notification for pending message did receive invite: %@
Did not find expected pending chat information
momentsStartedRemoteCapture received invalid notification object: %@
could not find conversation for notification stream token: %@
FACETIME_PHOTO_SUCCESS_REMOTE_CAPTURE
FACETIME_PHOTO_NOTIFICATION_TITLE
could not find participant for participant in conversation: %@ for requesterID: %@
Handle momentsStartedRemoteCapture in-app
could not find conversation or call for notification stream token: %@
com.apple.facetime
callservicesd/GroupFaceTimeNotificationProvider.swift
TUConversationManagerDelegate
v44@0:8@16@24Q32B40
v48@0:8@16@24Q32@40
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
_TtC13callservicesd29SoundDescriptorActionResolver
deviceIsHomePod
playersForSounds
Error creating audio player for %@ sound: %@
CSDFaceTimeLivePhotosIDSService
@16@0:8
sharedInstance
T@"CSDFaceTimeLivePhotosIDSService",N,R
com.apple.private.alloy.facetime.lp
remoteParticipantHandles
activeParticipantHandles
notificationProviderIdentifier
T@"NSArray",N,C
T@"NSString",N,C
_TtC13callservicesd33AVAudioClientInterruptionProvider
activeDescriptor
Setting audio session properties: %@
Setting audio mixing: %@
Setting mode to A2DP: %@
Starting audio session
v20@?0B8@"NSError"12
Setting descriptor to be active since it requested an expedited activation: %@
Failed to start audio session: %@
Successfully started audio session
kAUVoiceIOProperty_OperationMode
kAUVoiceIOProperty_MediaPlaybackOnExternalDevice
kMXSessionProperty_PrefersToPlayDuringWombat
kMXSession_HostProcessAttributionKey_BundleID
kMXSession_HostProcessAttributionKey_AuditToken
kMXSessionProperty_HostProcessAttribution
kMXSessionProperty_CreateSpeakerDevice
kMXSessionProperty_InitiationDescription
kMXSessionProperty_ClientPriority
kMXSessionProperty_AudioMode
kMXSessionProperty_AudioCategory
CSDFaceTimeMultiwayIDSService
T@"CSDFaceTimeMultiwayIDSService",N,R
com.apple.private.alloy.facetime.multi
_TtC13callservicesd34AVAudioSessionInterruptionProvider
audioSession
isLocal
_activationContext
Setting audio activation context: %@ for provider %@
Error setting audio activation context to %@ for provider %@: %@
Successfully set audio activation context
Error overriding output audio port to AVAudioSessionPortOverrideNone: %@
Deactivating and setting audio interruption priority: %ld for provider %@
Error deactivating and setting audio interruption priority to %ld for provider %@: %@
Successfully deactivated and set audio interruption priority
Setting audio interruption priority: %ld for provider %@ category %@ mode %@
Error setting audio interruption priority to %ld for provider %@: %@
Successfully set audio interruption priority
Setting audio active: %@ options: %ld for provider %@ category %@ mode %@
Error setting audio active to %@ for provider %@: %@
Did not deactivate audio successfully, but error code was %d so assuming success
Successfully set audio active: %@ options: %ld
Requesting audio session be attributed to %@
Requesting audio session enable audio during Wombat
Setting audio category: %@ mode: %@ for provider %@
Error setting audio category to %@ and mode to %@ for provider %@: %@
Successfully set audio mode
.foregroundRunning
.backgroundRunning
.backgroundSuspended
CSDProcessObserver
@32@0:8@16@24
i16@0:8
@?16@0:8
processInfoByBundleIdentifier
applicationMonitor
processStateChanged
processStateChangedWithBundleID
currentProcessIdentifier
T@?,N,C
v16@?0@"NSDictionary"8
callservicesd.ProcessObserver
v28@?0@"NSString"8i16q20
CSDProcessObserverProtocol
@?<v@?iq>16@0:8
v24@0:8@?<v@?iq>16
@?<v@?@"NSString"iq>16@0:8
v24@0:8@?<v@?@"NSString"iq>16
@"NSDictionary"24@0:8@"NSString"16
v32@0:8@"NSString"16@?<v@?@"NSDictionary">24
_TtC13callservicesd28FaceTimeNotificationProvider
openURL
%@ does not handle response with identifier %@
Handling notification %@
Did not find expected pending chat uuid information
facetime-invite-first-unlock
FACETIME_%@_CALL_FIRST_UNLOCK_%@_BODY
FACETIME_CALL_FIRST_UNLOCK_TITLE_%@
callservicesd.FaceTimeNotificationProvider
CSDSharedConversationServerBag
d16@0:8
fitnessPlusAppBundleID
fitnessPlusDaemonBundleID
TQ,N,R
activity-identifier-to-bundleIDs
Server bag does not have a value for %@, so returning the default one of %@ seconds.
Got %@ from server bag with a value of: %@
com.apple.tv.watch-together
com.apple.music.listenTogether
com.apple.notes.collaborate-activity
com.apple.Fitness
com.apple.fitcored.session
gftaas-pseudonyms-enabled-%@
guest-mode-supported
neighborhood-activity-conduit-timeout
qr-session-uPlusN-downgrade-available
max-remote-mirage-participants
qr-session-gft-downgrade-available
expanse-conduit-proxy-enabled
receive-message-retry-interval-millis
receive-message-retry-max-attempts
Couldn't find bundleID %@ in activityIdentifierMap %@
No bundleID specified, but fallback is specified
link-sync-recover-time-limit
link-sync-recover-failure-limit
web-nickname-length-limit
inactive-link-cache-limit
inactive-link-pseudonym-expiry
link-pseudonym-expiry
qr-kick-member-retries
qr-active-participant-fetch-retries
shareplay-version-check-enabled
qr-session-supports-modern-gft
qr-session-ft-upgrade-enabled
qr-session-participant-refresh-delay
qr-session-rebroadcast-threshold
qr-session-avc-blob-recovery-timeout
qr-session-avc-blob-recovery-grace-period
qr-session-cleanup-timeout
qr-participant-prune-timeout
v32@0:8@16@24
routesDidChangeHandler
didPickRouteHandler
didDeselectAllRoutesHandler
supportsPrimaryCalling
hasRelayiCloudAccount
idsDeviceForIDSDeviceIdentifier
queue
nearbyDeviceMonitor
idsDeviceDestinationResolver
nearbyDeviceRoutes
activeRelayClientTransport
currentCallsSupportNearbyDevices
route: %@
Could not find route to pick for %@. All nearby device routes: %@
Updating activeRelayClientTransport to %@
Updating nearby device routes using devices: %@
Current calls do not support nearby devices (%@) or device doesn't support primary calling (%@)
Could not convert NearbyDevice to NearbyDeviceRoute: %@
filtering out device: %@
Error activating companion link client: %@
callservicesd.NearbyDeviceRouteProvider
callChanged
dirtyCallsArray
dirtyCallsSet
callservicesd.DirtyCallManager
Adding call %@ to dirty calls pool
Asked to dispatch drain the pool
Draining pool with dirty calls: %@
v16@?0@"CSDCall"8
CSDPendingMembershipTracker
messenger
delegate
serverBag
T@"<CSDPendingMembershipTrackerMessenger>",N,W,Vmessenger
T@"<CSDPendingMembershipTrackerDelegate>",N,W,Vdelegate
_TtC13callservicesd37MemoryPendingMembershipTrackerStorage
underlyingStorage
_TtC13callservicesdP33_29A092E378431E19BF8C7D5BE1CFB24A26SharedPendingMembershipBag
Removed group from pending membership tracker storage {underlyingStorage: %@}
Remoted info from pending membership tracker storage {underlyingStorage: %@}
Added info to pending membership tracker storage {underlyingStorage: %@}
No info matching local user action -- ignoring {uuid: %@, handle: %@}
Processing local user action for pending member {info: %@, action: %@, member: %@, conversation.groupUUID: %@}
Local user action for pending member attempted, disabled -- ignoring
No info matching remote user action -- ignoring {uuid: %@, handle: %@}
Processing remote user action for pending member {info: %@, action: %@, member: %@, from: %@, transactionUUID: %@, conversation.groupUUID: %@}
Client remote action does not match what we expect -- ignoring {sender: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Hosted remote action does not match what we expect -- ignoring {expectedDestinations: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Hosted remote action is from a kicked handle -- ignoring {kickedHandles: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Remote user action for pending member attempted, disabled -- ignoring
lmi-delegation-disabled
Issue storing delegated pending membership info -- aborting {error: %@}
Attempting to track delegated pending member, disabled -- ignoring
Neither a conversation nor a link with handles was specified -- ignoring
Issue storing pending membership info -- aborting {error: %@}
Track pending member, delegation disabled
Filtered in the following active handles from list of members eligible for link approval: %@
active handles: %@
members eligible for link approval: %@
Attempting to track pending member, disabled -- ignoring
No handed off info for device target for IDS proxying
New participant IDs: %s
New joinContext: %@
Lightweight primary: %s
Protobuf member: %@
Adding split-session target to member list of proxied update
Inspecting join context for target %@: %@
Asked to proxy IDS session group participant update
Ignoring IDS session group participant update coming from proxy target
_TtC13callservicesd15IDSMessageProxy
subject
cancellables
target
buffer
proxiedMessageCount
buffering
B48@0:8@16@24@32@40
Sending RPC event: %s %s
IDS resource proxy: failed to read from resource URL. Error=%s
Unexpected error preserving %s as %s: %s
Existing IDS proxy timer found. Canceling it and making a new one.
Setting IDS proxy timeout of %ld seconds
Timing out IDS proxy
Cleaning up IDS proxy
Feature has been disabled by the server.
Creating IDS message proxy
IDS message proxy already exists
No handedoff info for device targeted for IDS proxying
Asked to proxy IDS resource at %s from %s, guid %{private,mask.hash}s
Ignoring message ID %{private,mask.hash}s, sender is our proxy target.
Asked to proxy IDS message from %s, guid %{private,mask.hash}s
CSDConduitIDSProxy
B40@0:8@"NSData"16@"NSString"24@"IDSMessageContext"32
B48@0:8@"NSURL"16@"NSDictionary"24@"NSString"32@"IDSMessageContext"40
v32@0:8@"<CSDGroupSessionParticipantUpdateProtocol>"16@"CSDConversationManager"24
_TtCC13callservicesd20CompanionLinkManager24AuthenticationController
clientsPendingAuthentication
v16@?0I8i12
v16@?0@"NSError"8
Started CompanionLink for device authentication
Failed to start CompanionLink for device authentication: %s
Successfully authenticated device %@
Error authenticating device: %s
v8@?0
Unable to prompt for password entry - no destination device!
PAIRING_CODE_ENTRY_MESSAGE
PAIRING_CODE_TITLE
PAIRING_CODE_ENTRY_HINT
PAIRING_CODE_ENTRY_ACCEPT_BUTTON
PAIRING_CODE_ENTRY_CANCEL_BUTTON
Failed to create CFUserNotification for password entry. Error: %s
User cancelled pairing entry
Received entered PIN %s
Prompting user for password for device %@
PAIRING_CODE_ENTRY_MESSAGE_FMT
CSDDuetDonater
v40@0:8@16@24Q32
maxDuration
unknownShortCallSignal
knownCallerSignal
junkCallSignal
linkCreatedSignal
silenceUnknownCallersEnabledObserver
callservicesd.DuetDonater
donate junkCallSignal event call=%@ error=%@
donate known caller mode event context=%@ error=%@
donate unknownShortCallSignal event call=%@ error=%@
donated call context data=%@ for call=%@
link created signal event error=%@
com.apple.telephonyUtilities.unknownShortCall
com.apple.telephonyUtilities.knownCallerMode
com.apple.telephonyUtilities.junkCallReceived
com.apple.facetime.call-link-created
v36@0:8@16@24i32
v44@0:8@16@24@32B40
dataSource
T@"<CSDReporterDataSource>",N,W
@"<CSDReporterDataSource>"16@0:8
v24@0:8@"<CSDReporterDataSource>"16
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
v32@0:8@"CSDReportingController"16@"CSDMomentsUsageReport"24
v40@0:8@"CSDReportingController"16@"TURoute"24@"CSDCall"32
v36@0:8@"CSDReportingController"16@"NSString"24i32
v32@0:8@"CSDReportingController"16@"TUConversation"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"TUConversation"32
v40@0:8@"CSDReportingController"16@"NSArray"24@"NSUUID"32
v32@0:8@"CSDReportingController"16@"CSDIDSChat"24
v32@0:8@"CSDReportingController"16@"NSString"24
v44@0:8@"CSDReportingController"16@"NSUUID"24@"RTCSecureHierarchyToken"32B40
v48@0:8@"CSDReportingController"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v32@0:8@"CSDReportingController"16@"TUConversationLink"24
v36@0:8@"CSDReportingController"16@"TUConversation"24B32
@32@0:8:16@24
com.apple.callservicesd.CompanionRpcErrorDomain
_TtC13callservicesd21CompanionRpcMessenger
<CompanionRpcDefinition: 
<CompanionEventDefinition: 
com.apple.callservicesd.idsProxyMessage
com.apple.callservicesd.policyInfoUpdated
com.apple.callservicesd.requestDisconnect
com.apple.callservicesd.joiningNotification
com.apple.callservicesd.contactInfoUpdate
com.apple.callservicesd.requestDeviceHandle
com.apple.callservicesd.activitySessionAvailable
com.apple.callservicesd.activitySessionNotAvailable
com.apple.callservicesd.cancelAddMember
com.apple.callservicesd.tvLaunched
com.apple.callservicesd.requestAddMember
MessageDictionary
Unknown; see NSUnderlyingErrorKey
Protobuf decoding failed
Protobuf encoding failed
Invalid message content
_TtC13callservicesd23EmptyDescriptorProvider
CSDCallController
callStateController
dataSources
dirtyCallManager
T@"CSDCallStateController",N,W,VcallStateController
callContainer
callservicesd.CallController
resolver
audioInterruptionProviderPool
ringtoneProvider
soundProvider
holdMusicProvider
discoveryModeProvider
deferredEndWorkItem
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
mediaServicesWereResetObserver
audioSessionInterruptionObserver
audioController
callservicesd.CSDAudioController
callUUID: %@
Attempted to expedite deferred end interruption block prematurely, so pending the UUID %@
Expediting deferred end interruption work item
com.apple.telephonyutilities.callservicesd.audiocontroller
v16@?0@"NSNotification"8
notification: %@
Other interruption ended so re-interrupting if necessary
Resetting state
Setting audio mixing: false
Stopping audio session
resolutionChangedHandler closure invoked
oldDescriptor: %@ descriptor: %@ notifyUnconditionally: %@
Ending interruption immediately since there is no longer a resolved descriptor
Stopping sound playback
Ending discovery mode
An end interruption was deferred but we were asked to update to a new descriptor, so canceling the deferred end
Deferring end interruption by %.2f sec, since descriptor has an interruption deferred end descriptor and there is no pending expedited end interruption
Ending interruption immediately, since descriptor has an interruption deferred end descriptor and there is a pending expedite for UUID %@
Decreasing priority of other AVAudioSession interruption provider %@ to Default
updating mic attribution to bundle %@
No provider returned for descriptor %@
No existing proxy AVAudioSession interruption provider for ID %u, creating a new one
Created AVAudioSession interruption provider %@
Starting discovery mode
Asked to begin or update playback of hold music but new descriptor is equal to activeDescriptor so doing nothing
speechSynthesizerEventHandler invoked
Hold music provider speech synthesizer finished utterance, but hold music provider is no longer active, so not invoking playback continuation
Hold music provider speech synthesizer finished utterance, and hold music provider is still active, so invoking playback continuation
Sound playback completed and we had a deferred end descriptor, so expediting end interruption for call with UUID %@
Requested to end playback, stopping alert: %@
factory
localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
avAudioClientInterruptionProvider
CSDMomentsUsageReport
@52@0:8i16q20q28d36d44
availability
photoRequestSuccessCount
photoRequestFailureCount
medianRequestDuration
meanRequestDuration
Ti,N,R,Vavailability
Tq,N,R,VphotoRequestSuccessCount
Tq,N,R,VphotoRequestFailureCount
Td,N,R,VmedianRequestDuration
Td,N,R,VmeanRequestDuration
callservicesd.MomentsUsageReport
MomentsUsageReport (Availability: 
_TtC13callservicesd37RingtoneProviderAlertPlaybackObserver
didBeginPlaying
_TtC13callservicesd16RingtoneProvider
contactStore
currentAlert
endedPlayingSemaphore
alertGenerator
playbackObserverGenerator
Alert configuration has changed, but unable to create TLAlert using configuration %@
Requested to begin or update playback, but alert configuration is unchanged so doing nothing
Alert configuration has changed, playing alert %@
Playback finished with completion type %@ for alert %@
Playback failed for alert %@: %@
Started playing alert: %@
Setting shouldIgnoreRingerSwitch: %@
Setting externalToneFileURL: %@
Setting vibrationIdentifier: %@
Setting toneIdentifier: %@
From provider, using externalToneFileURL %@
From activity alert %@, using tone %@, vibration %@, bypass ringer %@
Contact retrieval failed for contact identifier %@: %@
v24@?0q8@"NSError"16
TLAlertPlaybackObserver
v24@0:8@"TLAlert"16
CSDConversationLinkManager
v56@0:8@16@24@32q40@?48
v44@0:8@16@24B32@?36
v28@0:8B16@?20
v32@0:8@16@?24
v36@0:8@16B24@?28
@32@0:8@16^@24
v48@0:8@16@24@32@?40
service
renewPseudonymTask
linkSyncManager
generateKeyAgreement
T@"<CSDConversationLinkManagerDelegate>",N,&,Vdelegate
activatedConversationLinks
activatedLinks
T@"NSArray",N,R
ConversationLinkSync: Failed to persist links %@ {error: %@}
ConversationLinkSync: Finished persisting to data source {acquiredLinks: %@}
Informed by IDS that pseudonym was updated.  Updating expiration date in database.
Updating expiration of conversation link with pseudonym %@ failed, unable to find link with error %@
Saving expiration date for pseudonym %@ failed with error %@
Informed by IDS that pseudonym was removed.  Purging link from data source.
Removal of invalid conversation link with pseudonym %@ failed, unable to find link with error %@
Removal of invalid conversation link with pseudonym %@ failed with error %@
GondolaPseudonymExpiryDuration
Could not create mutable descriptor from descriptor %@
Unknown handle type used for invited handle %@
Asking to renew pseudonym for %@
Failed to create mutable descriptor for descriptor %@
No IDS unique ID found, cannot schedule renew.
Could not find index of our own uniqueID, aborting...
The local device (%@) generated this link, sending renew request now.
v28@?0B8@"NSDate"12@"NSError"20
Updated expiration date for pseudonym %@ to %@
Cannot normalize value for originator handle %@
Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when initializing the private key?
Provisioning pseudonym to generate link for groupUUID: %@, originatorHandle: %@, invitedHandles: %@, isActivated: %@, linkLifetimeScope: %@
v24@?0@"IDSPseudonym"8@"NSError"16
Failed to provision pseudonym with error from IDS, pseudonym was nil
Successfully provisioned pseudonym %@ and link descriptor %@
Failed to provision pseudonym with error from IDS: %@
v24@?0@"NSArray"8@"NSError"16
Failed to encrypt let me in response because either the type was wrong (%@), missing the link (%@), or approval was not specified (%@)
Failed to retrieve link with error %@
Failed to retrieve link
Failed to initialize key agreement from link's private key, or private key is absent, aborting.
Failed to retrieve the data bytes from the let me in response, or failed to init a CSDMessagingEncryptedConversationMessage
Failed to encrypt let me in response, aborting.
Checking validity of pseudonym %@
Asked to check validity of link for pseudonym %@ but none was found.
Could not retrieve IDS pseudonym object for pseudonym string %@
Removing invalid conversation link with pseudonym %@
Removing conversation link for pseudonym %@
Invalidating pseudonym %@
Asked to invalidate link for pseudonym %@ but none was found.
Removing link with pseudonym %@ from storage without invalidating as it's not locally created
Asking IDS to revoke pseudonym %@ because it was locally generated for link being invalidated
Pseudonym invalidation failed with error %@
validateAllLinks: No active accounts on the service, skipping link validation for now
validateAllLinks: Checking for invalid links
No descriptors fetched -- validation over {error: %@}
validateAllLinks: Links must be newer than date %@
validateAllLinks: We have some invalid links to cleanup {count: %@, pseudonyms: %@}
validateAllLinks: Finished removing invalid links {count: %@, error: %@}
Asked for inactive link, returning: %@
Count of inactive links (%{public}@) reached the cache limit (%{public}@); not provisioning another.
Fetching conversation link descriptor count failed with error %@
%@ provisioned inactive link %@
More inactive links exist than needed -- not generating %@
Exception caught when trying to activate link %@
In activating link, setting invitedHandles to %@
In activating link, updating the groupUUID from %@ to %@
Asked to renew link for pseudonym %@ but none was found.
Link manager asked to generate link for groupUUID %@ with invitedHandles: %@
Refusing generation of a link descriptor for groupUUID %@ as one already exists %@ (error: %@)
Fetch attempt with error %@
Failed to add invited member handles with error %@
Cannot add invited member handles for pseudonym %@ because no link matching this pseudonym was found
Failed to decrypt conversation message because the encrypted message either was missing the public key (%@) or missing the encrypted bytes (%@)
Failed to decrypt let me in response because the requestor's key agreement has already been used to decrypt a response.
Failed to decrypt let me in response, aborting.
Failed to decrypt let me in request, aborting.
Failed to encrypt let me in request because either the type was wrong (%@) or missing the link (%@)
Failed to retrieve the data bytes from the let me in request, or failed to init a CSDMessagingEncryptedConversationMessage
Failed to generate keypair for let me in requestor, aborting.
Failed to encrypt let me in request, aborting.
Asked to set link name for pseudonym %@ but none was found.
Saving link name for pseudonym %@ failed with error %@
Updated link name for pseudonym %@
Link manager asked to generate TUConversationLinkDescriptor for received TUConversationLink %@ (not locally owned)
Received link %@ missing required field
%@ already existed and isUpdate: NO, ignoring
Failed to persist link %@
Link manager asked to generate link with invitedHandles: %@, originatorHandle: %@
ConversationLinkSyncManager
ConversationLinkSync: ConversationLinkSyncManager init
v16@?0@"<OS_xpc_object>"8
ConversationLinkCheckInActivity
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
callservicesd.ConversationLinkManagerErrorType
IDSServicePseudonymDelegate
v32@0:8@"CSDIDSService"16@"IDSPseudonym"24
v24@0:8@"CSDIDSService"16
CSDTinCanIDSService
T@"CSDTinCanIDSService",N,R
com.apple.private.alloy.tincan.audio
CSDVoucherManagerImpl
vouchingEnablement
idsPushHandler
timeout
verificationCache
Verification forced to be false.
Token URI did not match handle.
Vouching is disabled.
Encrypted data was not returned.
Failed to create URI.
Operation timed out.
callservicesd.VoucherManagerImpl
Failed to verify %@ because the token prefixed URI did not come from the handle.
Failed to verify %@ because we couldn't create a URI.
Requested to verify %@.
Failed to verify %@ with error %s
Successfully verified %@.
v24@?0@"NSData"8@"NSError"16
Failed to sign data (%ld) because encrypted data was missing from response (without an error).
Successfully signed data (%ld) into %@.
Failed to sign data (%ld) due to error %s.
com.apple.callservicesd.VoucherManager.completions
Initializing VoucherManager.
callservicesd.VoucherManagerError
moments-disabled
moments-request-timeout
callservicesd1
momentsDisabled
momentsRequestTimeout
Td,N,R
CSDMomentsServerBag
@24@0:8:16
CSDRTCReporter
relayDeviceRouteChangesByCallUUID
groupUUIDToConversationReportingSessions
conversationUUIDToConversationReport
groupUUIDToConversationInfo
callUUIDToCallReportingSessions
callUUIDToGFTCallReportingSessions
callUUIDtoConversationUUID
conversationGroupUUIDToCallUUID
callUUIDtoConversationGroupUUID
uuidToNWActivity
uuidToNWActivityConnecting
idsSessionUUIDToChatUUIDs
callInfosPendingScoreForCallUUIDs
userScoreEnabled
appleIDUtilities
callservicesd.RTCReporter
UserScore: ReportController: reached RTCReporter with current UUID: %@
UserScore: call UUID does not exist
UserScore: session was RTCReporting object session was nil
UserScore: session RTCCSDCallInfo object was nil
RTCReporter: Reporting message with session %@ userInfo %@
RTCReporter: Error while sending message with error: %@
com.apple.telephonyutilites.phone
bundleIdentifier
telephonyutilities
RTCReporter: Failed to create reporting session with sessionInfo: %@, userInfo: %@
RTCReporter: Created reporting session %@ with sessionInfo: %@, userInfo: %@
RTCReporter: Dropping GroupActivities reports, could not find session for conversation uuid %@
RTCReporter: received an IDS metrics report for IDS session %@ corresponding to call %@
RTCReporter: recorded mapping for IDS session %@ corresponding to call %@
RTCReporter removing ReportingSession for %@
RTCReporter: remapped call=%@ to callUUIDToCallReportingSessions=%@
RTCReporter: multiway call reporting session %@
RTCReporter: no reporting token for call, skipping session creation (for now)
RTCReporter: Creating multiway call %@ reporting session for conversation UUID %@
RTCReporter: multiway call reporting session already exists for uuid %@
multiwayconference
RTCReporter: Creating conversation reporting session for conversation uuid %@
RTCReporter: conversation reporting session exists for uuid %@
RTCReporter: call.status=%@ uuid=%@
RTCReporter: callUUIDToCallReportingSessions=%@
RTCReporter: callUUIDToGFTCallReportingSessions=%@
com.apple.telephonyutilites.facetime
RTCReporter: Creating call reporting session for 1:1 FT call UUID %@
RTCReporter: one-to-one call reporting session already exists for uuid %@
_TtC13callservicesd14RTCCSDCallInfo
callUUID
durationMs
relativeEnd
bucketedDuration
endReason
providerErrorCode
providerEndedReason
setupTimeMs
connectionTimeMs
relay
incoming
connected
currentlyGrouped
relayDeviceRouteChanges
filteredOutReason
verficationStatus
knownCallerStatus
isOwnNumber
isConversation
fromLink
returnedCall
isSiriSuggested
isKnownContact
isVerifiedAppleCare
isSignedIntoiCloud
junkConfidence
identificationCategory
isKnownCaller
userScore
callservicesd.RTCCSDCallInfo
Starting screen sharing activity for handle %@ with initial attributes %@
callservicesd.ScreenSharingActivityManager
Screen sharing manager ignoring CarPlay connection attempt since we don't have a joined session
SCREENSHARING_END_CARPLAY_TITLE
SCREENSHARING_END_CARPLAY_MESSAGE_%@
SCREENSHARING_END_CARPLAY_BUTTON
CSDScreenSharingActivityManager
subscriptionsById
sessionsById
remoteAttributesById
observer
featureFlags
carPlayObserver
T@"<CSDScreenSharingActivityManagerDelegate>",N,W,Vdelegate
latestRemoteAttributes
T@"<TUScreenShareAttributes>",N,R
Not ending ScreenSharing because user didn't choose to end
Ending ScreenSharing since user tapped the end button
Unable to send updated attributes %@ over screen sharing activity
Sending remote attributes %@ to %@ (screen sharing activity session id: %@)
Failed to send attributes %@ for screen sharing activity with error %@
End screen sharing activity session (id: %@)
Screen sharing activity manager notifying delegate of session %@ ending
Started observer for screen sharing activity sessions
Received new screen sharing activity session %@ with activity %@
Because we received new screen sharing activity session (id: %@), ending old session %@
Received initial remote attributes %@ from screen sharing activity (id: %@)
Received remote attributes message %@ from sender %@ for screen sharing activity (id: %@)
Screen sharing activity session (id: %@) reached unknown state %@
Screen sharing activity session (id: %@) joined
Screen sharing activity session (id: %@) invalidated with reason: %@
Screen sharing activity session (id: %@) waiting
Transitioned to non-joined from joined state for locally-initiated screen sharing activity, ending (id: %@)
conduit.IDSProxyMessage
conduit.ContactInfo
namePrefix
familyName
nickname
imageData
conduit.StartedSessionEvent
identifier
userAccountInfoData
memberAssociationPrimaryInfo
conduit.EndedSessionEvent
conduit.ContactUpdateEvent
identifierHash
contacts
conduit.JoinEvent
policyInfos
conduit.TVLaunchedEvent
conduit.CancelAddMemberEvent
conversationIdentifier
conduit.PolicyInfoUpdatedEvent
conduit.AddMemberRequest
memberToken
context
associationVoucherData
PointOfPlayback
ControlCenterWithActivity
ControlCenterWithoutActivity
conduit.AddMemberResponse
conduit.DeviceTokenRequest
conduit.DeviceTokenResponse
deviceToken
conduit.DisconnectRequest
conduit.DisconnectResponse
success
conduit.MemberAssociationPrimaryInfo
conversationGroupUuidString
handleData
supportedTypes
Expanse
rawData
groupUpdate
resource
conduit.IDSProxyMessage.RawData
messageData
fromID
conduit.IDSProxyMessage.Resource
resourceData
metadata
conduit.IDSProxyMessage.GroupUpdate
isInitiator
groupUUID
participantID
participantDestinationID
updateType
updateSubtype
fromServer
serverDate
participantData
clientContextData
members
participantIDs
relaySessionID
conduit.IDSProxyMessage.ParticipantIDList
identifiers
canReceiveRelayedCalls
CSDMomentsControllerLocalCapabilities
enabled
regionBlocked
v12@?0I8
CSDMomentsNotification
@32@0:8Q16@24
TQ,N,R,VstreamToken
callservicesd.MomentsNotification
_TtC13callservicesd31CallHistoryNotificationProvider
callInteractionManager
callHistoryDataSource
callProviderManager
pendingCallIdentifiers
supportedMediaTypes
supportedProviders
mostRecentCallDate
inCallServiceProcessObserver
supportsDisplayingFaceTimeAudioCalls
dialRecentCall
findConversationLink
[WARN] Could not find recent call with identifier: %@
%@ count: %d isAmbiguous: %d
allowOutgoingCallsWhenLocked
com.apple.mobilephone
ACTION_TITLE_CALL_BACK
ACTION_TITLE_SEND_MESSAGE
InCallService changed to non-running state (%@); updating posted notifications
Could not retrieve date of most recent call for notification provider %@
Notifiction provider %@ found missed calls %@
Adding notification request %@ for missed call %@
CHRecentCallIdentifier
CNContactIdentifier
Cound not retrieve interaction; using original notification content for call with identifier %@
Retrieved interaction; retrieving intent for call with identifier %@
Cound not retrieve start call intent from %
Retrieved start call intent; updating notification content for call with identifier %@
Could not update notification content; using original notification content for call with identifier %@
TUDialRequestURL
Recent call was a silenced unknown caller; displaying notification as an alert (%@)
MISSED_CALL_MESSAGE
Encountered undefined FaceTime media type %@
MISSED_FACETIME_VIDEO_CALL
MISSED_FACETIME_AUDIO_CALL
Most recent call date is now %@ for notification provider %@
Skipping update of call history notification; InCallService process state is foreground running. %@
Performed join conversation request: %@
Performed dial request: %@
Performing dial request: %@ ended in error: %@
Failed to open URL %@#. Error %@
notificationType: 
supportedMediaTypes: 
supportedProviders: 
%@ is handling %@
Updating call history badge count for notification provider %@
Call interactions changed
callservicesd/CallHistoryNotificationProvider.swift
CHCallInteractionManagerDelegate
v24@0:8@"<CHCallInteractionManager>"16
CHDelegate
Failed to derive public key from public key data, ignoring let me in
SoundDescriptor(
CSDFaceTimeSyncIDSService
T@"CSDFaceTimeSyncIDSService",N,R
com.apple.private.alloy.facetime.sync
_TtC13callservicesd17HoldMusicProvider
speechSynthesizerEventHandler
speechSynthesizer
audioPlayer
canceled speech synthesizer utterance
finished speech synthesizer utterance
No audio player could be created, so unable to begin playing hold music
Failed to start playing hold music
Successfully started playing hold music
Error retrieving file URL for hold music sound file
Error creating AVAudioPlayer with fileURL %@: %@
Created hold music audio player with URL %@
started speech synthesizer utterance
ANSWER_AND_HOLD_OUTGOING_MESSAGE
Speaking utterance %@
Ending hold music
Ending hold message
AVSpeechSynthesizerDelegate
v48@0:8@16{_NSRange=QQ}24@40
v32@0:8@"AVSpeechSynthesizer"16@"AVSpeechUtterance"24
v48@0:8@"AVSpeechSynthesizer"16{_NSRange=QQ}24@"AVSpeechUtterance"40
CSDCarPlayManager
carSessionQueue
carSessionStatus
carPlayScreenConnectionChanged
isCarPlayConnected
com.apple.calls.queues.carSessionStatus
v12@?0B8
CARSessionObserving
v24@0:8@"CARSession"16
v32@0:8@"CARSession"16@"CARSessionConfiguration"24
_TtC13callservicesd34CodableRemoteScreenShareAttributes
@24@0:8@16
sharerHandleValue
currentRemoteAttributes
_TtC13callservicesd22RTCCSDRelayDeviceRoute
type
failed
callservicesd.RTCCSDRelayDeviceRoute
CSDMomentsControllerSession
moments
remoteIDSDestinations
isRegistered
activeRequestsByTransactionID
T@"<CSDAVCMoments>",N,R,Vmoments
T@"NSDictionary",N,C
TB,N,VisRegistered
callservicesd.MomentsControllerSession
MomentsControllerSession: no streamtoken found
MomentsControllerSession: FaceTime 1:1
MomentsControllerSession: GroupFaceTime
remoteIDSDestinations=
activeRequestsByTransactionID=
CSDContactsCallFilter
appleCareHandles
carrierBundleController
%@ serviceProviderUUID: %@ carrierPhoneNumbers: %@
%@ carrierBundleNumbers=%@
%@ null call handle, should not reach here: call=%@
%@ Contact fetch failed with the following error %@
%@ Found contact (%@) or suggested contact (%@) or isVerifiedAppleCare (%@) or isCarrierBundlePhoneNumber (%@)
%@ Did not find contact or suggested contact; call filter will not allow call %@
%@ call filter will allow call %@
com.apple.calls.callservicesd
CompanionLinkManager
ParticipantUpdateSanitizer
NeighborhoodActivityCore
_TtC13callservicesd29ConversationLinkCryptoManager
FT-LMI-ResponseKey
FT-LMI-RequestKey
CSDRouteController
v28@0:8@16B24
_routesByUniqueIdentifier
routeWasPickedHandler
timedOutPickingRouteHandler
routeProviders
pendingRouteContext
pickWhenAvailableRouteIdentifier
pendingPickedRouteTimeout
routesByUniqueIdentifier
callservicesd.RouteController
routes: %@
Stopping waiting for route identifier %@ to become available
Could not find route to pick with unique identifier %@. All routes: %@
Will pick route identifier %@ when it becomes available to pick
Clearing out pickWhenAvailable route identifier %@ because user is picking available route %@
Timed out waiting for route to become picked: %@
Updated routes from %@ to %@
pickWhenAvailable route identifier %@ did become available, picking now...
Route identifier %@ did not become available in %@ seconds
v16@?0@"TURoute"8
com.apple.telephonyutilities.callservicesd.pairedhostdeviceroutecontroller
com.apple.telephonyutilities.callservicesd.localroutecontroller
v16@?0@"RPCompanionLinkDevice"8
v20@?0@"RPCompanionLinkDevice"8I16
Device changed: %@
Lost nearby device: %@
Found nearby device: %@
Local device updated
callservicesd/TUCallContainerProtocol_CSD.swift
Fatal error
Call is not a CSDCall: 
CSDTinCanIDSProviderDelegateCapabilities
cellularDataAllowed
CSDIDSProviderDelegateCapabilities
wiFiAvailable
wiFiAllowed
cellularDataAvailable
cellularDataPreferred
q16@0:8
CSDConversationInvitationResolver
B32@0:8@16@24
deviceInvitationPreferences
CSDConversationPersistenceController
storage
lockStateObserver
activeConversationsListKey
Removing active conversation with cache key: %@
Adding active conversation with cache key: %@
Expected an active conversation for key %@ but found nothing. Cleaning up cached conversation.
Cannot create CSDMessagingConversation from data in cache for key: %@. Cleaning up cached conversation
Missing fields on conversation from cache %@. Cleaning up cached conversation.
Removing conversation with UUID: %@ from cache.
Error creating CSDMessagingConversation to cache from conversation with UUID: %@.
Caching conversation with UUID: %@
Missing fields on conversation from cache %@. Returning a nil conversation.
callservicesd.ConversationPersistenceController
AudioDescriptor(
interruptionDescriptor: 
interruptionDeferredEndDescriptor: 
ringtoneDescriptor: 
soundDescriptorAction: 
holdMusicDescriptor: 
discoveryModeDescriptor: 
_TtC13callservicesd29PairedHostDeviceRouteProvider
pairedHostDeviceRoutes
Could not find route to pick for %@. All paired host device routes: %@
callservicesd.PairedHostDeviceRouteProvider
RingtoneDescriptor(
contactIdentifier=
providerRingtoneSoundURL=
CSDIDSPendingChat
@36@0:8@16B24@28
isVideo
TB,N,R,VisVideo
T@"TUHandle",N,R,Vhandle
CSDGroupIDSPendingChat
callservicesd.GroupIDSPendingChat
callservicesd.IDSPendingChat
CSDParticipantUpdateSanitizerImpl
completionQueue
voucherManager
callservicesd.ParticipantUpdateSanitizerImpl
Unable to identify context from participant update %@.
Dropping association voucher for member %s that does not have an association claim as its payload.
Dropping association voucher for member %s that makes claim for different conversation.
Dropping association voucher for member %s because the voucher is for a different handle.
Starting sanitization of %@.
Failed to verify voucher on member %s with error %s.
Verified voucher on member %s.
Finished sanitization of %@.
IDSGroupSessionParticipantUpdateClientContextDataKey
com.apple.callservicesd.ParticipantUpdateSanitizer.completions
Initializing ParticipantUpdateSanitizer.
CSDParticipantUpdateSanitizer
v32@0:8@"IDSGroupSessionParticipantUpdate"16@?<v@?@"IDSGroupSessionParticipantUpdate">24
CSDConversationLinkGeneratorDescriptor
@32@0:8@16q24
version
Tq,N,Vversion
Tq,N,R
callservicesd.GeneratorDescriptor
_TtC13callservicesd13AudioResolver
ttyProviderObserver
localAudioSystemProvider
deviceSupportsRingtone
lastPlayedSoundDate
lastPlayedSoundType
soundDescriptorActionResolver
resolvedDescriptor
resolutionChangedHandler
Unable to create interruption descriptor for call %@
Not creating interruption for call: %@, deviceSupportsRingtone: %@ shouldSuppressRingtone: %@  holdMusicDescriptor: %@
Not playing sound %@ becaus the same sound was played less than 2s ago
Other session requested no ringtone interruption, ending currentDescriptor(context:) method for call %@
CSDFaceTimeIDSProviderDelegateCapabilities
momentsAvailable
items
timeProvider
_TtC13callservicesd23LocalAudioRouteProvider
audioRoutes
callAudioCategory
callAudioMode
lastUserPickedRoute
callAudioInterruptionState
hasActiveAudioSession
Could not find route to pick for %@. All audio routes: %@
Failed to pick audio route %@: %@
Call does not have audio interruption so setting prematurely selected audio route to %@
callservicesd.LocalAudioRouteProvider
Updating audio information using call: %@; callHasAudioInterruption: %@
Audio category change from %@ -> %@ mode %@ -> %@ does not require route re-pick
Re-picking last user picked route: %@
Audio category change from %@ -> %@ mode %@ -> %@ currentlyPickedRoute: %@ shouldPickLastUserPickedRoute: %@
Updated audio routes: %@
Clearing last user picked route
Unable to create audio route from route dictionary: %@
Picking prematurely selected audio route now that audio interruption has begun: %@
TUAudioSystemControllerDelegate
nearbyDeviceProvider
devicesChangedHandler
devicesByEffectiveIdentifier
callservicesd.NearbyDeviceMonitor
_TtC13callservicesd27ConversationLinkSyncManager
interactor
recoverRateLimiter
recoverResponseRateLimiter
messageQueue
_TtC13callservicesd39ConversationLinkSyncManagerMessageQueue
intervalCalculator
actionByType
_TtC13callservicesdP33_735B00354BCC442560C6AD87FDD3101213IDSInteractor
knownDestinations
ConversationLinkSync: Ignoring devicesChanged signal from IDSService because destinations are the same {service: %@}
callservicesd.IDSInteractor
ConversationLinkSync: Incoming sync message, invalid fromID -- dropping {fromID: %@}
ConversationLinkSync: Incoming sync message, invalid destinationID -- dropping {fromID: %@}
ConversationLinkSync: Incoming sync message, unknown destinationID -- dropping {destinationID: %@, self.service.allAliases: %@}
ConversationLinkSync: Incoming sync message, invalid data -- dropping {data: %@}
ConversationLinkSync: Incoming sync message, data no protobuf -- dropping
ConversationLinkSync: Incoming sync message, processing {fromID: %@, destinationID: %@}
ConversationLinkSync: Incoming sync message, type was unknown {syncMessage: %@}
ConversationLinkSync: Incoming sync message, type was recover but message was missing recoverMessage {syncMessage: %@}
ConversationLinkSync: Incoming sync message, type was update but message was missing updateMessage {syncMessage: %@}
ConversationLinkSync: Incoming sync message, type was checkIn but message was missing checkInMessage {syncMessage: %@}
ConversationLinkSync: enqueue action {messageType: %@, destinations: %@, mode: %@, hasExisting: %@}
ConversationLinkSync: Scheduled action {interval: %@}
ConversationLinkSync: devices changed making sure we send a check in to them as well {deviceDestinations: %@}
currentRevisions
localGeneratorIdentifier
GondolaLatestVersion
localLatestGeneratedVersion
countByGenerator
originatorRevision
originatorIdentifier
ConversationLinkSync: No pseudonyms found in recover -- dropping {recover: %@, from: %@}
ConversationLinkSync: Processing recover, asked to check for links matching pseudonyms {pseudonyms: %@, from: %@}
ConversationLinkSync: Excluding pseudonym from recover response as it is at rate limit {pseudonym: %@}
ConversationLinkSync: No pseudonyms remain after rate limiting, not sending recover response {pseudonyms: %@}
ConversationLinkSync: Did not find link descriptors for pseudonyms -- nothing to send in response {pseudonyms: %@}
ConversationLinkSync: Found link descriptors for pseudonyms specified in recover -- sending update {linkDescriptors: %@, pseudonyms: %@}
ConversationLinkSync: Excluding pseudonym from recover message as it is at rate limit {pseudonym: %@}
ConversationLinkSync: No pseudonyms remain after rate limiting, not sending message {pseudonyms: %@}
ConversationLinkSync: Sending recover {to: %@, pseudonyms: %@}
ConversationLinkSync: Failed sending recover! {to: %@, error: %@}
ConversationLinkSync: Sent recover {to: %@, idsIdentifier: %@}
ConversationLinkSync: Processing update, unable to convert descriptors -- dropping {update: %@}
ConversationLinkSync: Processing update, got links {links: %@}
ConversationLinkSync: Sending link update {to: %@, linksToSend: %@}
ConversationLinkSync: Failed sending update! {to: %@, error: %@}
ConversationLinkSync: Sent link update {to: %@, idsIdentifier: %@}
GondolaLastAccountsChangedState
ConversationLinkSync: checkAccountStateForCheckIn called {activeAccounts: %@, lastAccountsChangedState: %@}
ConversationLinkSync: missing devices, waiting until devices appear {activeAccounts: %@, interactor.deviceDestinations.isEmpty: %@}
ConversationLinkSync: Processing check in, unable to convert descriptors -- dropping {from: %@}
ConversationLinkSync: Processing check in, calculated differences {from: %@, shouldCheckIn: %@, needToSendUpdate: %@, shouldCheckAllGenerators: %@}
ConversationLinkSync: Check in differences %@
ConversationLinkSync: Processing check in, no differences -- done {from: %@, generatorDescriptors: %@}
ConversationLinkSync: Performing check in {dest: %@, message: %@}
ConversationLinkSync: Failed sending check in! {dest: %@, error: %@}
ConversationLinkSync: Sent check in {to: %@, idsIdentifier: %@}
ConversationLinkSync: scheduleCheckIn called {scheduleMode: %@, deviceDestinations: %@, type: %@}
ConversationLinkSync: scheduleRecover called {deviceDestinations: %@, pseudonyms: %@}
ConversationLinkSync: scheduleCheckInIfNeeded called
ConversationLinkSync: State dump
ConversationLinkSync: Failed to create state dump {error: %@}
ConversationLinkSync: check in activity fired
ConversationLinkSync: check in activity scheduled {criteria: %@}
GondolaCheckInIntervalOverride
ConversationLinkSync: randomCheckInInterval: calculated {interval: %@, scheduleMode: %@}
ConversationLinkSync: randomCheckInInterval: defaults overriding {overrideInterval: %@}
<CheckInDiff; remoteMissingIdentifiers = 
; localMissingIdentifiers = 
; localDescriptorsBehindRemote = 
; remoteDescriptorsBehindLocal = 
IDSServiceDelegate
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
IDSServiceDelegatePrivate
v68@0:8@16@24@32@40q48@56B64
v76@0:8@16@24@32@40q48@56B64@68
v72@0:8@16@24@32@40@48@56@64
v48@0:8@16@24d32@40
v32@0:8@16q24
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v76@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64@"IDSMessageContext"68
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v48@0:8@"IDSService"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSService"16q24
CSDFaceTimeInviteDemuxer
idsQueryController
$__lazy_storage_$_supportsConversationOneToOneModeEnabled
$__lazy_storage_$_pushTokenForSelf
Current IDStatus results: %@ service: %@
Querying currentRemoteDevices %@ service: %@
Current remote device results: %@ for destinationIDs: %@, service: %@
Required IDStatus results: %@ service: %@
com.apple.telephonyutilities.callservicesd.faceTimeInviteDemuxer
AudioInterruptionDescriptor(
activationContext=
wantsExpeditedAudioSession=
mediaPlaybackOnExternalDevice=
CXAudioSessionActivationStateObserver
Vv24@0:8@16
Vv24@0:8@"NSNumber"16
CSDSecureImageTranscoder
v32@0:8@"NSData"16@?<v@?@"NSData"@"NSError">24
blastDoor
Attempting to generate preview of image after writing to URL: %s
SharePlayActivityImages
Error creating temporary images directory: %s
CSDUserNotificationController
callFilterController
phoneNotificationCenter
providersByIdentifier
providers
clientManager
v40@0:8q16@24@?32
Received response %@
Could not find notification provider for action
callservicesd.UserNotificationController
com.apple.telephonyutilities.callservicesd.usernotificationcontroller
Creating XPC endpoint for User notifications
Loaded user notification controller
com.apple.telephonyutilities.callservicesdaemon.usernotificationprovider
Started broadcasting User notifications mach service with %@
Setting badge string to %@ on notificationCenter %@ for notification type %@
APPLICATION_BADGE_UNKNOWN
APPLICATION_BADGE_UNKNOWN_COUNT
Successfully set badge string to %@
Error setting badge string to %@
Replacing notification with identifier %@ from %@
Successfully replaced notification with identifier: %@
Error while replacing notification: %@
Removing notification with identifier %@ from %@
Not posting notification since it is restricted by the call filter
Adding notification request %@ to %@
Successfully posted notification with identifier: %@
Error while posting notification: %@
com.apple.calls.conversationkit.multiwayviewcontroller.icsonscreenchangednotification.isonscreen
com.apple.calls.conversationkit.multiwayviewcontroller.icsonscreenchangednotification.isoffscreen
UNUserNotificationCenterDelegate
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
TUUserNotificationsProviderXPCServer
Vv40@0:8q16@24@?32
Vv40@0:8q16@"NSString"24@?<v@?@"NSError">32
_TtC13callservicesd21DiscoveryModeProvider
_TtC13callservicesd29VoicemailNotificationProvider
telephonyClient
voicemailDataSource
postedVoicemailIdentifiers
pendingVoicemailIdentifiers
mostRecentVoicemailDate
mostRecentNonVisualVoicemailDate
localizeVoicemailName
callbackVoicemail
unsubscribedVoicemailInfoForUUID
Could not find voicemail with identifier: %lu
No current unsubscribed voicemail info, attempting to update...
Subscribed to enhanced voicemail; unread message count is %lu
v36@?0B8@"NSNumber"12@"NSString"20@"NSError"28
Updating voicemail info for uuid %@ to available: %@, count: %@
ACTION_TITLE_VOICEMAIL_MESSAGE_DELETE
Subscription status changed: %@
Removing all voicemail notifications. Current notification identifiers: %@
Online status changed: %@
Voicemails changed: %@
Could not retrieve date of most recent voicemail for notification provider %@
Voicemail is not subscribed
Voicemail store changed, and we found the following voicemail messages we were waiting for: %@
Retrieving messages delivered after %@
Received %lu new voicemails since date %@
Voicemail store changed, but we did not find any voicemail messages we were waiting for. Waiting for: %@
Asked to post %lu voicemails
Adding notification with count: %lu
NEW_VOICEMAIL_FORMAT
nonvisualvoicemail
VMVoicemailIdentifier
voicemailDuration
[WARN] Could not generate dial request URL for voicemail: %@
Cound not retrieve voicemail message; using original notification content for voicemail message with identifier %@
Cound not retrieve intent; using original notification content for voicemail message with identifier %@
Retrieved intent; updating notification content for voicemail message with identifier %@
Could not update notification content; using original notification content for voicemail message with identifier %@
Attempt to create a notification attachment for file at %@ failed with error %@
Most recent voicemail date is now %@ for notification provider %@
Voicemail is not MWI - Ignoring voicemailInfoAvailableNotification
Handling voicemailInfoAvailableNotification voicemailInfo: %@, context: %@
callservicesd/VoicemailNotificationProvider.swift
B16@?0@"VMVoicemail"8
Retrieving voicemail messages failed with error %@
Retrieving inbox voicemail messages failed with error %@
CoreTelephonyClientVoicemailDelegate
v24@0:8@"CTXPCServiceSubscriptionContext"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTVoicemailInfoType"24
CSDCallHistoryCallFilter
usTollFreePrefixes
callHistoryManager
%@ Fetching call history calls matching predicate %@
%@ Could not create call history handle from call %@
%@ Found call history call; call filter will allow call %@
%@ Did not find call history call; call filter will not allow call %@
_TtC13callservicesd28CSDCollaborationStateManager
v60@0:8@16@24@32B40@44@?52
q24@0:8@16
highlightIdentifierOpened
highlightIdentifierToBundleID
bundleIDToHighlightIdentifier
highlightIdentifierToConversationUUID
highlightIdentifierNoAppInstalled
processObserver
T@"<_TtP13callservicesd36CSDCollaborationStateManagerDelegate_>",N,&,Vdelegate
T@"OS_dispatch_queue",N,&,Vqueue
CSDCollaborationStateManager: Failed to update document state for %s because no conversation UUID is registered for it
CSDCollaborationStateManager: Checking whether to update delegate with currentDocumentState: %s oldState: %s
CSDCollaborationStateManager received update for %s isRunning: %s
CSDCollaborationStateManager state for %s is %s
CSDCollaborationStateManager opened collaboration: %s
CSDCollaborationStateManager stopped tracking %s
callservicesd.CSDCollaborationStateManager
CSDCollaborationStateManager has no bundleID
CSDCollaborationStateManager started tracking %s with bundleID %s
CSDCollaborationStateManager potential bundleIDs %s
CSDCollaborationStateManager could not create a url from %s for highlight identifier %s
CSDCollaborationStateManager finished adding %s with state: %s
CSDCollaborationStateManager started tracking %s with application record: %s
Failed to get appLink with error: %s, url: %s
Collaboration identifier is already tracked, returning from CSDCollaborationStateManager
CSDCollaborationStateManager received update for %s with state %s
CSDOwnNumberCallFilter
idsCTAdapter
%@ Call is not the same number as subscriber; OwnNumberCallFilter will allow call %@
%@ Call is the same number as subscriber; OwnNumberCallFilter will not allow call %@
%@ call is verified; will allow call %@
%@ isSilenceUnknownCallersEnabled: %d
DiscoveryModeDescriptor()
_TtC13callservicesd13SoundProvider
player
Asked to begin or update playback of sound with descriptor %@ but no TUCallSoundPlayerDescriptor could be determined, so not playing
Attempt to play call sound player descriptor %@ returned false
Asked to begin or update playback of sound but new descriptor is equal to activeDescriptor so doing nothing
AudioInterruptionDeferredEndDescriptor(
_TtC13callservicesd33ConversationLinkDescriptorManager
GondolaGeneratedIdentifier
GondolaSyncedVersion
ConversationLinkSync: localGeneratorIdentifier: No local or IDS identifier -- starting with a local one {locallyGeneratedIdentifier: %@}
ConversationLinkSync: localGeneratorIdentifier: Mismatched local identifiers -- resetting {identifierToExpect: %@, persistedLocalIdentifier: %@}
_TtC13callservicesd22RTCCSDConversationInfo
uuid
relativeStart
conversationBaseTime
hasLink
isPending
duration
uPlusOneModeAtStart
uPlusOneModeAtEnd
maximumMemberCount
initialMemberCount
finalMemberCount
maxNumberOfParticipants
AVCBlobRecoveryAttempts
AVCBlobRecoveryTimeouts
numberLMIRequests
numberLMIApprovals
numberLMIDismissals
messageRetryAttempts
messageRetryFailures
messageRetrySuccesses
avcBlobRecoveryMessageRetryAttempts
avcBlobRecoveryMessageRetryFailures
avcBlobRecoveryMessageRetrySuccesses
hasHadActiveParticipants
cumulativeTimeAlone
timeAloneAtEnd
lastTimeNotAlone
callservicesd.RTCCSDConversationInfo
_TtC13callservicesd20CompanionLinkManager
client
authenticationController
activated
deviceUpdatedPublisher
deviceFoundPublisher
deviceLostPublisher
deviceChangedPublisher
stateHandle
messagePublishers
eventPublishers
_TtCC13callservicesd20CompanionLinkManager14DeviceProvider
manager
Sending event %s to %s : %s, options: %s
Event '%s' successfully delivered
Error sending %s: %s
v24@?0@"NSDictionary"8@"NSDictionary"16
Event '%{public}s' publisher cancelled.
Event '%{public}s' publisher finished.
Event '%{public}s' publisher failed: %{public}s
Received event '%{public}s', params: %s, %s
v32@?0@"NSDictionary"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSDictionary"@"NSError">24
Message '%{public}s' publisher cancelled.
Message '%{public}s' publisher finished.
Message '%{public}s' publisher failed: %{public}s
Received message '%{public}s', params: %s, %s
callservicesd/Combine_OneShotSink.swift
Already subscribed
Error waiting for authenticated device to reappear: %s
Found authenticated device. Device: %@
Activated CompanionLink
Failed to activate CompanionLink
Sending request %s to %s : %s, options: %s
v32@?0@"NSDictionary"8@"NSDictionary"16@"NSError"24
Received response for request %s from %s : %s, options: %s, error: %s
Authentication completed -- waiting for device to reappear
Device %@ is already authenticated
com.apple.TelephonyUtilities.CompanionLinkManager
Failed to create state dump: %s
Error encoding user account info: %s
iCloudAccountToken
iTunesAccountToken
homeUserIdentifierTokens
_TtC13callservicesd13CSDAVCMoments
I16@0:8
T@"<CSDAVCMomentsDelegate>",N,W,Vdelegate
v28@0:8@16I24
callservicesd.CSDAVCMoments
AVCMomentsDelegate
v28@0:8@"AVCMoments"16I24
v40@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSError"32
v56@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSURL"32@"NSURL"40@"NSError"48
v48@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSURL"32@"NSError"40
v24@0:8@"AVCMoments"16
CSDAnalyticsReporter
v40@0:8@16@24q32
com.apple.Callservicesd.callEndStatus
@"NSDictionary"8@?0
Logging end call to core analytics: %s
call_info_source
call_directory_provider_bundle_id
is_currently_grouped
provider_ended_reason
telephony_transport_type
face_time_transport_type
connection_time_ms
Connection time is negative, %s is likely processing a callkit action incorrectly
kCallSubTypeWifi
kCallSubTypeVoLTE
kCallSubTypeTelephony
manualLaunchAttempted
Logged manual launch attempt event for session: %s
com.apple.shareplay.manualActivityInteractions
needsManualLaunch
Logged manual launch needed event for session: %s
com.apple.callservicesd.shareplay.push-to-tv
Send SharePlay push to TV event
CSDReporter
CSDKeychainPasswordItem
@24@0:8^@16
B24@0:8^@16
accessGroup
callservicesd.KeychainPasswordItem
Successfully deleted item from keychain
No item found. Added new item to keychain
Saved item to keychain
CSDHandoffAudioController
routeIdentifierChangedNotification
continueHandoffAudioRouteNotification
callCenterQueue
routeController
pickedRouteUniqueIdentifier
HandoffAudioController: Could not parse audio route identifier from continue handoff notification: %@
HandoffAudioController: Continuing handoff of audio route with identifier %@
HandoffAudioController: Could not take audio route with identifier %@ active because either it could not be found as a valid route
HandoffAudioController: Picked route changed to: %@
HandoffAudioController: Conversation become joined, current route is %@
HandoffAudioController: Not triggering route change notification for handoff in response to conversation becoming joined, as a non-bluetooth route is in use: %@
com.apple.telephonyutilities.callservicesd.handoffaudiocontroller
CSDHandoffAudioControllerContinueHandoffAudioRouteNotification
CSDHandoffAudioControllerRouteIdentifierChangedNotification
TURouteControllerDelegate
v24@0:8@"TURouteController"16
TUAudioDeviceControllerDelegate
v24@0:8@"TUAudioDeviceController"16
CSDMomentsRequest
avcRequest
session
T@"<CSDAVCMomentsRequest>",N,R,VavcRequest
T@"CSDMomentsControllerSession",N,R,Vsession
callservicesd.MomentsRequest
Failed to find matching device for %@
Device %@ is not authenticated - starting auth flow
Failed to find handed off conversation info for device: %@
Failed to disconnect device: %@ because its associated conversation (%s) could not be found.
No effectiveID stored in handoff state. Kicking TV.
Disconnecting device with handle: %@
Disconnecting. Handed off conversations: %s
callservicesd.NeighborhoodActivityConduit
CSDNeighborhoodActivityConduit
conversationServerBag
idsService
delegatesToQueues
networkSupport
handedOffConversations
joinApprovalState
localTVDevices
joinCompletionSubjects
pendingJoinConversationIDs
activeConversationUpdateSubject
activeConversationUpdateCancellablesByDeviceID
messageProxy
idsProxyCleanupTimer
conversationIDsWithActivities
contactForwardingCanceler
T@"OS_dispatch_queue",N,R,Vqueue
nearbyTVDevices
activeSplitSessionTVDevice
T@"TUNearbyDeviceHandle",N,R
tv has left conversation %{private,mask.hash}s
tv is in this conversation
Pushing contacts
Notifying successful join
Join completions: %s
tv has joined conversation %{private,mask.hash}s
activeParticipants = %s
Waiting for tv on this conversation
Pending join IDs: %s
Remote participants changed for %{private,mask.hash}s: %s, lightweight participants: %s
Pushing %ld contacts to split-session device
Kicking split-session device %s
Left conversation: %s
Conversation state change for %{private,mask.hash}s: %s -> %s)
Joined conversation: %{private,mask.hash}s
Disconnecting idHash %s; info = %s
Sending RPC: %s %s
Invalid message content: %s
RPC response: %s %s
<Conversation Gone>
Participant %s left conversation %s on device %@
Failed to authenticate device: %@, error: %s
Unable to generate member association primary info for conversation %s.
Current activity doesn't support handoff, rejecting push attempt
HANDOFF_UNSUPPORTED_TITLE
Handoff unsupported alert title
HANDOFF_UNSUPPORTED_MESSAGE_PUSH
Handoff unsupported alert message (push side)
Presenting alert: %s / %s
Insufficient info to revoke pending invitation for: %@
Handed off conversations: %s
Removed handed off conversation with effective ID: %s
Revoking invitation for TV %@, error: %s
User Account Info - iCloudAltDSID: %{bool}d, iTunesAltDSID: %{bool}d
No effectiveIdentifier in handle %@
Adding remote participant with device token: %{private,mask.hash}s and handle: %@
Conversation has no local member to use as lightweight primary
Assigning lightweight primary %{private,mask.hash}@, participant ID %{private,mask.hash}llu
Handle strings: %s
Fetching contacts for handles: %s
Removing delegate %s
New delegate %s
com.apple.callservicesd.NearbyActivityRegistrar
Initialized NeighborhoodActivityConduit
activeConversationUpdate
CSD Conduit State
TV device appeared: %s / %s / %{private}s
New device appeared. ID: %{private}s. Now %ld devices total
New device appeared. ID: %{private}s MRID: %{private}s Model: %s Name: %{private}s
Error in event handler for '%{public}s': %s
No request options to resolve sending device handle
Could not resolve senderID or verified identity for device handle for request options: %s
Resolved verified identity %s to sending device %@
Resolved senderID %s to sending device %@
Resolved IDS ID %s to sending device %@
Incoming RPC event: %s %s
Received message from unauthenticated client, ignoring
Error in message handler for '%{public}s': %s
Incoming RPC: %s %s
Sending RPC response: %s %s
Activity %s from %s doesn't support handoff, rejecting.
Checking eligibility of activity: %@
TV is hijacking session. Skipping check of existing activity.
Requesting split-session approval from %s
Approval result: %{bool}d
Error requesting split-session approval: %s
Play on Apple
Allow Apple TV to join current activity?
 to join current activity?
Unexpected failure of CFUserNotificationDisplayAlert(): %s: %s
Unexpected CFUserNotification response flags: %s
Device disappeared. ID: %{private}s MRID: %{private}s Model: %s Name: %{private}s
"39L]|
#BUhJ@n
#SSz
'.MSjs
'.7Ji
///////
"&9@QZm
$*06<BHNTZ`n
-03?
-39Hg
..#..
!$'*-0369<?BEHKNQT
$*06
####
?__C
RPDeviceChangeFlags
TUCallSoundPlayerSoundType
CHRecentCallMediaType
TUMomentsAvailability
Triggers
NCSDCallCenterObserverTriggers
os_unfair_lock_s
CTError
TUCallVerificationStatus
TUCallFilteredOutReason
TUConversationState
TUNearbyConversationPullContext
TUNearbyDeviceHandleType
CFString
NCFStringRef
__C_Synthesized
TUNeighborhoodActivityConduitError
VMMailboxType
HandleType
NCXHandleType
CSDAudioInterruptionProviderType
os_state_data_s
TUConversationLinkLifetimeScope
Name
NNSNotificationName
TUConversationAVMode
CHHandleType
CHRecentCallTTYType
TUHandleType
TUCollaborationDocumentState
TUCallFaceTimeTransportType
TUCallDisconnectedReason
MRPlaybackState
TUCallSoundRegion
TURouteDeviceType
AXSDefaultRouteForCall
audit_token_t
CSDAudioInterruptionOperationMode
Mode
NAVAudioSessionMode
Category
NAVAudioSessionCategory
Foundation
CallKit
CoreFoundation
Code
NTUNeighborhoodActivityConduitError
os_state_data_decoder_s
__Unnamed_union___Anonymous_field1
os_state_data_type_t
RPCompanionLinkClient
CompanionLinkMessenger
CompanionLink
CompanionLinkAuthenticationError
CompanionLinkAuthenticationResult
AudioInterruptionProvider
AnyAudioInterruptionProvider
AudioInterruptionPriorityProvider
AudioInterruptionProviderSetActiveOptions
AudioInterruptionProviderIdentifier
AudioInterruptionPriority
callservicesd
DescriptorResolver
DescriptorType
&-%3
TinCanIDSProviderDelegate
UserIntentManager
NSUserDefaults
ConversationPersistenceStorage
EmergencyCallbackCapabilities
OneShotCancellationBox
State
PowerAssertionManager
AudioInterruptionProviderFactoryProtocol
AVAudioSessionInterruptionProviderType AVAudioClientInterruptionProviderType
AudioInterruptionProviderFactory
NearbyDeviceRoute
LetMeInRequestorKeyAgreement
ChangeTrackingDescriptorResolver
UpdateContext
ProviderDisplayMonitor
Provider
HoldMusicDescriptor
CallCenterObserver
callservicesd
GroupFaceTimeNotificationProvider
SoundDescriptorActionResolver
Sound
FaceTimeLivePhotosIDSService
UNNotificationResponse
callservicesd
UserNotificationProvider
UserNotificationResponse
NotificationType
AVAudioClientInterruptionProvider
FaceTimeMultiwayIDSService
AVAudioSessionInterruptionProvider
callservicesd
ProcessState
ProcessObserver
callservicesd
FaceTimeNotificationProvider
NSNumberConvertible
SharedConversationServerBag
CSDIDSService
IDSDeviceDestinationResolver
NearbyDeviceRouteProvider
DirtyCallManager
PendingMembershipTrackerServerBag
PendingMembershipTrackerStorage
PendingMembershipTracker
MemoryPendingMembershipTrackerStorage
SharedPendingMembershipBag
PendingMembershipInfo
UserAction
Errors
Mode
callservicesd
IDSMessageProxy
BufferedMessage
AuthenticationController
DuetDonater
allowContactsOnly
CompanionRpcMessenger
ReplyableInfo
CompanionRpcError
MessageInfo
CompanionRpcDefinition
CompanionEventDefinition
DescriptorProvider
DescriptorType
EmptyDescriptorProvider
EmptyDescriptor
CallController
TUAudioSystemController
LocalAudioSystemProvider
AudioActivationContext
SoundDescriptorAction
AudioController
CSDAudioController
AudioInterruptionProviderPool
MomentsUsageReport
TLAlert
callservicesd
RingtoneProviderAlertPlaybackObserver
RingtoneProviderAlert
RingtoneProviderProtocol
RingtoneProvider
RouteProvider
DeselectableRouteProvider
PairedHostDeviceRouteTrackingRouteProvider
callservicesd
ConversationLinkManager
ConversationLinkManagerErrorType
TinCanIDSService
VoucherManagerImpl
VerificationQuery
VoucherManagerError
RTCReporter
CallInfoPendingScore
#&,4:?ELRX[^emvz
RTCReporterInfo
RTCCSDCallInfo
CodingKeys
ScreenSharingActivityManagerProviding
ScreenSharingActivityManager
ScreenSharingActivityManagerErrors
Resource
GroupUpdate
RawData
OneOf_Message
NCProtoIDSProxyMessage
NCProtoContactInfo
NCProtoStartedSessionEvent
NCProtoEndedSessionEvent
NCProtoContactUpdateEvent
NCProtoJoinEvent
NCProtoTVLaunchedEvent
NCProtoCancelAddMemberEvent
NCProtoPolicyInfoUpdatedEvent
NCProtoAddMemberRequest
NearbyConversationPullContext
NCProtoAddMemberResponse
NCProtoDeviceTokenRequest
NCProtoDeviceTokenResponse
NCProtoDisconnectRequest
NCProtoDisconnectResponse
NCProtoMemberAssociationPrimaryInfo
MemberAssociationType
ParticipantIDList
MomentsControllerLocalCapabilities
UserIntentValidator
BackgroundBluetoothAccessValidator
DonatedIntentValidator
ApplicationStateValidator
PrivateAPIValidator
MediaRemoteStateValidator
UserIntentValidationResult
MomentsNotification
MbP?
CHManager
CHRecentCall
callservicesd
CallHistoryDataSource
RecentCall
CallHistoryNotificationProvider
ConversationLinkKeyAgreement
SoundDescriptor
FaceTimeSyncIDSService
callservicesd
HoldMusicProviderProtocol
HoldMusicProvider
SpeechSynthesizerEvent
callservicesd
CarPlayManager
CodableRemoteScreenShareAttributes
ScreenSharingActivity
CodingKeys
RTCCSDRelayDeviceRoute
RTCCSDAudioRouteType
CodingKeys
MomentsControllerSession
ContactsCallFilter
ConversationLinkCryptoManager
ConversationLinkCryptoErrorType
RouteController
PendingRouteContext
TinCanIDSProviderDelegateCapabilities
IDSProviderDelegateCapabilities
ConversationInvitationResolver
InvitationPreferencesPriority
ConversationPersistenceController
AudioDescriptor
PairedHostDeviceRouteProvider
RingtoneDescriptor
IDSPendingChat
GroupIDSPendingChat
ParticipantUpdateSanitizerImpl
DescriptorTrackingProvider
GeneratorDescriptor
AudioResolverProtocol
AudioResolver
Context
FaceTimeIDSProviderDelegateCapabilities
Cache
CacheItem
callservicesd
LocalAudioRouteProvider
CallAudioInterruptionState
RPCompanionLinkClient
RPCompanionLinkDevice
NearbyDevice
NearbyDeviceProvider
DeviceType
NearbyDeviceMonitor
ConversationLinkSyncManagerDelegate
ConversationLinkSyncManagerDataSource
ConversationLinkSyncManager
ConversationLinkSyncManagerMessageQueue
IDSInteractorDelegate
IDSInteractor
Action
MessageType
ScheduleMode
CheckInType
CheckInDiff
ConversationLinkDataSourceTUWrapper
EnqueueMode
IDSInteractorError
FaceTimeInviteDemuxer
CSDCall
AudioInterruptionActivationStateObserver
AudioInterruptionDescriptor
ProviderType
SecureImageTranscoder
BlastDoorInterface
SimulatorBlastDoorInterface
BlastDoorError
UNUserNotificationCenter
callservicesd
UserNotificationCenter
UserNotificationController
DiscoveryModeProviderProtocol
DiscoveryModeProvider
VMVoicemail
VMVoicemailManager
callservicesd
VoicemailDataSource
Voicemail
VoicemailNotificationProvider
CallHistoryCallFilter
CSDCollaborationStateManager
OwnNumberCallFilter
DiscoveryModeDescriptor
SoundProviderProtocol
SoundProvider
AudioInterruptionDeferredEndDescriptor
ConversationLinkDescriptorManager
$*069<BIPW]djpv|
RTCCSDConversationInfo
CodingKeys
CompanionLinkManager
DeviceProvider
UserAccountInfo
CodingKeys
callservicesd
CSDAVCMoments
AnalyticsReporter
KeychainPasswordItem
KeychainError
ASCIIStringConvertible
callservicesd
HandoffAudioController
MomentsRequest
NeighborhoodActivityConduit
ApprovalState
ConversationUpdateEvent
HandedOffConversationInfo
InitParams
enabled: %d
accelerometer orientation changed to %ld
Beginning transaction for %@. Transaction count is now %lu. Added transaction: %@
Ending transaction for %@. Transaction count is now %lu. Ended transaction: %@
CSD encountered a fault with reason: %@
Invalidating process assertion for %@
Preparing conference with configuration: %@
Initializing new callID with device role %d
Fetched local invite dictionary: %@
Error fetching local invite dictionary %@: %@
Fetching local invite dictionary using remote invite dictionary %@
Failed to initialize a new call with device role %d.
Failed to create an AVConference instance. This usually happens when the AVConference SPI can't communicate with mediaserverd over XPC
[WARN] Attempted to prepare conference which has already started preparing (state=%d)
transport: %@ self.configuration: %@
Successfully started connection with configuration=%@ (timestamp: %f)
Failed to start connection with configuration=%@: %@
[WARN] Attempted to start conference which has not been prepared (state=%d)
[WARN] Conference does not exist
Delaying stop on conference...
Calling stop on conference %@
Calling cancel on conference %@
[WARN] Attempted to cancel a conference that has already started connecting: %@
Setting remote invite dictionary from %@ to %@
Setting caller from %d to %d
Attempting to set state to %d, which precedes current state %d
Setting microphoneMuted to %d for %@
Setting sendingAudio to %d
Setting sendingAudioData to %d
Setting conferenceProvider videoPaused to %d
Setting sendingVideo to %d
State is %d, updating isVideoPausedToStart from %d to %d
Updating capabilities from: %@ to %@
Setting remoteVideoPresentationSize from %@ to %@
Setting remoteVideoPresentationState from %d to %d
Conference didStart timeout fired
Updating device role from %d to %d
conference=%@ didStartSession=%d error=%@
Successfully started session
Session is connected, setting videoPaused to expected value: %d
[WARN] Session is already past Connected state, not sending delegate started
Failed to start session. error=%@
didStopError=%@ callMetadata=%@
AVConference stopped in failure: %{public}@
Sending delegate bytesOfDataUsageChanged: %ld
didPauseAudio=%d error=%@
didPauseVideo=%d error=%@
Not setting sendingVideoExpected to nil since our state is %d
Video was set to didPauseVideo: %d sendingVideoExpected: %@. Setting sendingVideo to sendingVideoExpected
remoteVideoPaused=%d
remoteMediaStalled=%d
Server died for conference provider %@
Registering to handle call handoff activity type with dynamic identifier %@ for provider %@
Frontmost call is hosted here ...
... and it is an endpoint here ...
... and we are a secondary device ...
... using a broadcast activity with dynamic identifier: %@.
[WARN] ... but no dynamic identifier could be found (%d) or no handoff user info exists (%d). Not broadcasting frontmost call
... but we are a primary device. Not broadcasting frontmost call
... and it is being relayed elsewhere. Using a local activity
Beginning handoff activity %@ for call %@
Ending handoff activity: %@
Broadcasting suppress ringtone activity for declined call: %@
After conversation %@ was handed off elsewhere, re-registering for handoff advertisement for participant %llu so that it can be handed off back
Began app history activity %@ for call %@
Broadcasting suppress ringtone activity for call that suppressed its ringtone: %@
Broadcasting suppress ringtone activity for incoming call that started connecting: %@
[WARN] User activity manager aware of change to audio-video state (mic muted: %@, camera enabled: %@), but call didn't meet criteria (call is non-nil: %@, call is conversation: %@, call has groupUUID: %@, call is active: %@)
User activity manager aware of change to audio-video state (mic muted: %@, camera enabled: %@) for call backed by conversation with groupUUID: %@
[WARN] User activity manager aware of change to audio-video state (mic muted: %@, camera enabled: %@), but could not find conversation for call with groupUUID: %@
Received broadcast for activity type %d and destination ID %@. Suppressing ringtone due to remote suppression for call %@
Received broadcast for activity type %d but ignoring it because its destination ID (%@) does not match this ringing call's desination ID (%@)
[WARN] Cannot process received broadcast for conversation handoff activity type because it did not have a dynamic identifier set.
[WARN] User activity manager could not parse eligibility from dynamicIdentifier %@
%s: Updating handoff registration for conversation UUID %@
No more conversations, unregistering all conversation handoff dynamic identifiers
%@ isSilenceUnknownCallersEnabled: %d
%@ maxJunkLevel: %ld
Not a telephony call; call filter will allow call with identifier %@
%@ call does not have a valid handle, by definition this is an unknown caller call %@
%@ shouldFilterIncoming call=%@ unknownCaller=%d isSilenceUnknownCallersEnabled=%d shouldBlockJunk=%ld
Calling ADClientSetValueForDistributionKey() with key %@ and value %f
Asking BackBoard to set the proximity detection mode to (%u).
Proximity detection should be %d since isReceiver: %d, isSpeaker: %d, isVoiceOverRunning: %d
Proximity detection should be disabled; eligible audio call does not exist
Proximity detection should be disabled; video call exists
Proximity detection should be disabled; isInterfaceOrientationPortrait: %d, isProximitySensorCovered: %d
Handling proximity sensor covered changed to %d
VoiceOver is enabled and the proximity sensor is covered, changing the audio route from speaker to receiver.
VoiceOver is enabled and the proximity sensor is uncovered, changing the audio route from receiver to speaker.
Updating proximity sensor state; calls changed.
Updating proximity sensor state; sensor covered changed.
Updating proximity sensor state; audio routes changed.
TipKit: Logging Biome signal for phone away from face without speaker.
[WARN] Tried to get the call history identifier for this call (%@) but no conference ID was available (%@), we'll fall back to another method (GUID = %@). This call may now not sync properly between devices.
This chat's conferenceID and GUID are nil or empty, we cannot create a safe call history identifier
[WARN] Could not weak link notification string '%@'. Not observing notifications for it.
Calling endChatWithReason on chat %@ with reason %ld
Asked to end chat with UUID: %@, reason: (%ld) but could not find it
Using account %@
Inviting handle %@ excluding push tokens %@
Registering imav chat %@
Could not initiate FaceTime call - No chat returned for handle %@ with account %@
Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
Could not initiate FaceTime Call - Account %@ not registered
Legacy chat with matching UUID connected; attempting to fulfill pending answer call action %@
Legacy chat did not provide a connection date; Could not fulfill answer call action %@
[WARN] No pending answer call actions found with UUID: %@
Failing answer call action for chat because it ended before connecting: %@
Using call ended reason remote hangup because ended reason is %@
Using call ended reason answered elsewhere because ended reason is %@
Using call ended reason declined elsewhere because ended reason is %@
Using call ended reason unanswered because ended reason is %@
Using call ended reason failed because ended reason is %@
Incoming call was denied with error %@ so declining chat with IMAVResponseFilteredCall: %@
provider: %@
action: %@
Calling acceptInvitation on chat %@
Not accepting invitation to chat %@ since it is already Connected
Calling endChat on chat %@
Calling setIsSendingAudio with %d for chat %@
Not holding chat %@ since it is not yet Connected
Calling setIsSendingVideo with %d for chat %@
Calling setRemoteVideoPresentationSize with %@ for call %@
Calling setRemoteVideoPresentationState with %ld for chat %@
Calling setRelayed with %d for chat %@
Calling setMuted with %d for chat %@
Creating CSDCallHistoryControllerXPCServer
XPC connection interrupted from client %@
XPC connection invalidated from client %@ for CSDCallHistoryControllerXPCServer
deallocing CallHistoryControllerXPCServer
invalidating CallHistoryControllerXPCServer
NOTIFYING CLIENTS TO CONNECT
recent calls deleted: %@
All recent calls deleted
Requesting remote active participants for cached conversation with UUID: %@
Setting audioEnabled to %d
Ignoring to set videoEnabled since conversation is relaying
Setting videoEnabled to %d
Setting screenEnabled to %d, screenShareAttributes: %@
Setting videoPaused to %d
Setting screenShareAttributes to %@
Error setting screenShareAttributes when screen is not enabled
Setting audioPaused to %d
Stopping session since local av mode is switching to none
Conversation UUID: %@ asked to register messages group association
Ignoring to set additional video representation since conversation is relaying
Setting additional video representation to %ld
Setting oneToOneModeEnabled to %d
Kicking previous participant on conversation UUID: %@ participant: %@
Ignoring splitSessionSecondary since we aren't joined into the conversation UUID: %@ state: (%tu)
Failed to return to HomeScreen %@
Adding participant: %@
Found member: %@ representing participant: %@
AddedParticipant %@ for member: %@ is representing our localMember
Removing active participant and replacing it with one with the same identifier but a newer AVC data blob.
New participant blob's audioVideoMode is different than our current audioVideoMode. AVModeUpdates need to happen with the explicit ParticipantUpdate message. Resetting to known audioVideoMode
[WARN] Conversation already contains participant with no change in AVC data: %@
Removing participants for member: %@ on conversation UUID: %@ participants: %@
Failed to find participant %@ on conversation %@
Removing participant with identifier: %lu  handle: %@
 Found matching handle %lu: %@
Removing splitSessionSecondary: %@
Leaving conversation because lightweightPrimary left on conversation UUID: %@ participant: %@ localMember: %@
Local participant %llu was associated with participant %@ who is now being removed. Clearing local participant association.
Remote participant %llu was associated with participant %@ who is now being removed. Clearing participant association for %llu.
No active remote participants left, requesting to move back to oneToOne=0
[WARN] removeParticipantWithIdentifier:fromHandle: Not removing participant handle (%@) didn't match, with identifier %lu: %@
[WARN] removeParticipantWithIdentifier:fromHandle: Could not find participant with identifier %lu: %@
Adding virtual participant: %@
Trying to add virtual participant for plugin %@ with different identifier %llu: %@
Removing virtual participant: %@
[WARN] Trying to remove virtual participant for plugin %@ with different identifier %llu: %@
[WARN] Could not find virtual participant for plugin %@: %@
conversation: %@ remove remoteMembers triggeredLocally: %d
UUID: %@ remove remoteMembers: %@
[WARN] No members were removed to conversation: %@
UUID: %@ groupUUID: %@ remoteMembers: %@ triggeredLocally: %d
UUID: %@ otherInvitedHandles: %@
UUID: %@ invitationPreferences: %@
Handle %@ should be considered for addition as an invited member handle if not kicked
Conversation UUID %@ already contains member with handle %@, filtering out.
[WARN] No new members were added to conversation UUID: %@
Updating member validation source for: %@ to source: %ld
Found member to update validation state: %@
We found an activity originated from now validated member %@ updating activity
Couldn't find member %@ to update validation source for
add pendingMembers: %@ triggeredLocally: %d
Conversation UUID %@ already contains pending member with handle %@, filtering out from addition list.
remove pendingMembers: %@ triggeredLocally: %d
Conversation with UUID %@ does not have pending member with handle %@, filtering out from removal list.
[WARN] Ignoring new link %@ as conversation link already set to %@
Link on conversation UUID %@ was already set to %@, but this setting allows for updates, setting the link name to %@, the expiration date to %@, and the invited handles to %@
leaveActivitySessionWithUUID: %@
[WARN] Dropping request to remove activitySession because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
Finding activitySession with UUID: %@ to present dismissal alert
Session dismissal alert for activitySessionUUID %@ success: %@
removeActivitySessionWithUUID: %@
Not launching screen sharing app
User chose to take no action
activitySession: %@
[WARN] Dropping new activitySession because Expanse features are disabled. Please upgrade to a later release to re-enable Expanse features.
[WARN] Dropping new activitySession because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
BundleID override: %@
Attempting to create Activity with trustedFromHandle: %@ on trusted lightweight member: %@. Overriding to lightweightPrimary. %@
isLightweightPrimaryInitiated: %d
Not launching app for locally started activity %@
Asked to create staged activitySession for activity: %@
[WARN] Failed to create staged activitySession since we can't replace an activitySession with a staged activitySession.
Successfully created staged activitySession: %@
Attempting to set staged activitySession: %@
Trusted from handle %@ not found in membership list for activitySession ID: %@ on conversation %@
Not launching app as we are not joined into this conversation
Not launching app as SharePlay is not allowed
[WARN] Activity with identifier %@ is missing application context.
Not launching app for system activity: %@
Not launching app as we are not in an eligible activitySession state: %@
Not launching app as the activitySession has already been joined: %@
Request to launch %@ for conversation with UUID: %@ allowing auto-launch: %@
Attempting to launch app in background w/ PiP
Launched pip for activity %@ error %@
Found locally initiated screen sharing activity session %@, ending session
Trying to setup new AVCSession without tearing down previous session first.
avcSessionCreationBlock
Joining CSDConversation self: %@ context: %@
GreenTea devices are not supported for this conversation with UUID: %@
Copying invitation preferences to locally-created conversation from join context: %@
Bypassing AVCSession creation because localMember is lightweight %@
Creating CSDAVCSession with transport token %@
This device is joining a U+1 FaceTime call to complete a handoff from a different participant, setting oneToOneModeEnabled to NO.
Created CSDAVCSession %@
Not joining IDS group session because wantsStagingArea is true, instead moving to preparing state
Failed to create CSDAVCSession
[WARN] Not joining conversation because it isn't waiting or preparing: %@
[WARN] Not sending local participant data, no AVCSession: %@
self UUID: %@ audioReady: %d audioPaused: %d audioEnabled: %d
[WARN] Not starting audio for conversation because it isn't joining/joined: %@
[WARN] Not starting audio for conversation because avmode is .none %@
self UUID: %@
Leaving CSDIDSGroupSession: %@
[WARN] Not leaving conversation because it isn't joining/joined: %@
Kicking member on conversation UUID: %@ member: %@
Aliased session %@ to %@ for bundle identifier %@
Not enforcing shareplay version check due to server over-ride
[WARN] One or more participant on %@ is on an older share play protocol %@ version %@
[WARN] Not joining IDS session as state (%tu) is not joining on conversation: %@
Sending U+1 join context to subset of participants: %@
idsSessionJoin
Starting %@
avcSessionStart
Skipped starting session since session start is already in progress %@
Skipped starting session since isJoined:%@ audioReady:%@ isRelaying:%@ isAVLess:%@ isLocalParticipantNormal: %@
[WARN] Timed out waiting for session to stop after %@, moving to waiting state and cleaning up.
Timed out waiting for conversation to leave, but it's not in state leaving (instead is in %i).
Timed out requesting AVC blob for participant with identifier: %@
Replacing existing recovery timeout for participant with identifier %@
Setting up AVC blob recovery timeout for participant with identifier %@
Cancelling in flight AVC blob recovery for participant with identifier %@
Pruning remote participants as necessary, current server identifiers: %@
_stableExpanseIdentifier %@ for %@ 
Checking if oneToOne->1 downgrade available with state: %tu oneToOneMode: %d remoteMembers.count: %lu activeRemoteMembersCount: %lu useDelay: %d
Screen sharing has ended but not requesting to move back to U+1 mode since localDowngradeAvailable:%d remoteDowngradeAvailable:%d
Delayed downgrade triggered, checking if we're still eligible
Screen sharing has ended and we only have 1 remote participant, requesting to move back to U+1 mode
Did not retrieve a route identifier for participant identifier %llu
Retrieved route identifier %@ for participant identifier %llu
didJoinGroup: %d error: %@
Joining conversation without AVC session for lightweight device
Failed to join group: %@
didLeaveGroupWithError: %@
CSDIDSGroupSession %@ failed to leave group for conversation UUID %@: %@
endedWithError: %@ reason: %d
Kicked from the conversation, cleaning up
Invalidating cached conversation: %@, no remote active participants were found.
Activating cached conversation with UUID: %@ since %lu remote participants were still found to be active.
IDSGroupSession for %@ did terminate unexpectedly, reporting conversation failure for %@
Requested audio/video mode changed for conversation %@ failed with error %@
We've changed participant types to type: %d but our AVMode is: %lu. Not performing client side interaction for mismatched types
Stopping session since local participant type is Lightweight avcSessionInProgress %@ avcSession: %@
Downgraded from AV -> AVLess, but didn't have AVCSession yet. Creating an AVCSession.
Rebroadcasting AVC data to other members of this group to since we transitioned to lightweight and setup a new AVCSession.
Starting session since local participant type is Normal
didReceiveKickedParticipantIDs: %@
When kicking participantID %@ we found participant %@ with no member in %@
updating kickedMembers to %@
updating pendingAllowedMembers to %@
[WARN] didReceiveKickedParticipantIDstype: %hu unexpected
Retrying kicked members: retries: %lu pendingKickedMembers: %@
Retrying allowed members: retries: %lu pendingAllowedMembers: %@
[WARN] Not retrying to kickMembers, max retry count (%lu) reached
[WARN] Kicking turned off on the server, resetting state
didReceiveDataBlob for participant: %@
didReceiveDataBlob adding csdConversationParticipant: %@
[WARN] Not processing didReceiveDataBlob because unable to create handle from URI: %@
AVCProviderEndReason=%d error.code=%d detailedError=%d
AVCProviderEndReason=%d, this should not happen
No error with a failed start from AVC using %d
Found expectedVideoEnabled: %@, updating value to match state
Found expectedAdditionalParticipantRepresentation: %@, updating value to match state
didStart: %d error: %@
Not in the joining state so not moving to joined
Failed to start CSDAVCSession: %@
CSDAVCSession failed to start while we're already leaving a U+1 call. Treat this as a leave and clean up the conversation
didDetectError: %@
Rebroadcasting AVC data to other members of this group to attempt to recover from error (last rebroadcast time was %f).
Not attempting to rebroadcast message since state was not in join (was %d)
CSDAVCSession didStopWithError: %@
AVCSession %@ stopped in failure for conversation UUID %@: %@
AVCSession %@ stopped for remote hangup. Ignoring this signal.
AVCSession %@ stopped, cleaning up IDSSession state
CSDAVCSession stopped for downgrade to AVModeNone, setting up new not started AVCSession
Setting GFT conversation back to default state of video=1
CSDAVCSession %@ server did disconnect for conversation UUID %@
Detected AVCSession server disconnect, but we're in AVLess. Re-creating an AVCSession and re-distributing blob.
changedLocalAudioEnabled=%d
Failed to set localAudioEnabled (%d): didSucceed (%d): error: %@
Audio was set to audioEnabled: %d self.expectedAudioEnabled.boolValue: %@. Setting audioEnabled to self.expectedAudioEnabled.boolValue
changedLocalVideoEnabled=%d
Failed to set localVideoEnabled (%d): didSucceed (%d): error: %@
[WARN] Skipping to set localVideoEnabled (%d) error: %@
Video was set to videoEnabled: %d self.expectedVideoEnabled.boolValue: %@. Setting videoEnabled to self.expectedVideoEnabled.boolValue
changedScreenEnabled=%d
Failed to set screenEnabled (%d): didSucceed (%d): error: %@
Screen was set to screenEnabled: %d self.expectedScreenEnabled.boolValue: %@. Setting screenEnabled to self.expectedScreenEnabled.boolValue
changedLocalAudioPaused=%d
Failed to set localAudioPaused (%d): didSucceed (%d): error: %@
Audio paused was set to audioPaused: %d self.expectedAudioPaused.boolValue: %@. Setting audioPaused to self.expectedAudioPaused.boolValue
changedLocalVideoPaused=%d
Failed to set localVideoPaused (%d): didSucceed (%d): error: %@
Video paused was set to videoPaused: %d self.expectedVideoPaused.boolValue: %@. Setting videoPaused to self.expectedVideoPaused.boolValue
changedOneToOneModeEnabled=%d
oneToOneModeEnabled is disabled because a 3rd participant that joined is replacing another participant for handoff
User requested videoPaused=true in a U+1 call, since we're moving out of U+1 state, setting videoEnabled=false for parity
changedBytesOfDataUsed=%ld
changedAdditionalVideoRepresentation=%ld
Failed to set additionalVideoRepresentation (%ld): didSucceed (%d): error: %@
sessionShouldReconnect=%@
Skipping reconnect since one to one mode is disabled
[WARN] Unknown participant with identifier: %llu
[WARN] All active participants in the call are not on minimum supported shareplay version
Conversation screen sharing about to change to screen enabled: %@ conversation: %@ 
 participant: %@
[WARN] Stopping screen on local device since one of the remote participants sharing their screen %@
Resetting non screen sharing sessions as one of the remote participants started screen sharing %@
[WARN] Stopping screen on local device capture failed to start for conversation UUID: %@
[WARN] Unknown participant with identifier: %llu activeRemoteParticipants: %@
Updating screenEnabled on all remote participants to: %@
sharePlayAllowedStateChanged: %@
Stopping screen on local device since route does not support share play
Leaving activity session for screen sharing since route does not support share play
user requested to switch to speaker route
Did get session unjoined callback startDate %@ endDate %@ session %@
Setting appLaunchState to needsLaunch
CSDConversation setting appLaunchState to needsLaunch %@
CSDConversation received activity session removed: %@
Setting the application state to background for joined activity session: %@
CSDConversation associated scene changed for %@
Ignoring %@ message because we already have a call with this uniqueProxyIdentifier: %@
We already have a call for this %@ message: %@. Updating it with new values
Creating new call for %@ message
[WARN] Ignoring %@ message because no call exists for %@ and the message is not from the paired device
[WARN] Could not find call with uniqueProxyIdentifier %@. All current calls: %@
Call answered elsewhere message had no uniqueProxyIdentifier set. Using current calls
Resetting call %@ with protoCall %@
Not resetting call %@ with protoCall %@ because they are equal
Creating new call with protoCall %@
Existing call no longer exists and is not sending: %@
handleUpdateRemoteCallStateMessageFromHost %@
Updating call %@ with protoCall %@
Not updating call %@ with protoCall %@ because they are equal
[WARN] Received %@ message, but we already have some calls
Ignoring %@ because messageSendTime (%f) <= call.remoteUplinkMutedSetTime (%f)
Pulling remotely hosted call: %@
Failed to prepare conference for pull message %@ and call %@
Fetching localSenderIdenity for localSenderIdentityAccountUUID %@
Replacing hardPauseDigits '%@' with '%@' since protocolVersion is %d
Replacing soundRegion %ld with %ld since protocolVersion is %d
Created pause digits queue: %@
Setting disconnected reason to dial failed because call is outgoing but has not started outgoing
Setting disconnected reason to remote hangup because ended reason is %ld
Setting disconnected reason to remote hangup because call has started connecting and ended reason is %ld
Setting disconnected reason to remote hangup because outgoing call has not started connecting and ended reason is %ld but call is a telephony call
Setting disconnected reason to remote unavailable because outgoing call has not started connecting and ended reason is %ld
Setting disconnected reason to answered elsewhere because ended reason is %ld
Setting disconnected reason to declined elsewhere because ended reason is %ld
Setting disconnected reason to handed off because ended reason is %ld
Setting disconnected reason to user busy because ended reason is %ld
Setting disconnected reason to call failed because failure reason is %ld
Setting disconnected reason to account unsupported because failure reason is %ld
Setting disconnected reason to network unsupported because failure reason is %ld
Setting disconnected reason to provider crashed because failure reason is %ld
Setting disconnected reason to media start failed because failure reason is %ld
Setting disconnected reason to media server crashed because failure reason is %ld
Setting disconnected reason to other secondary device in use because failure reason is %ld
Setting disconnected reason to kicked because failure reason is %ld
Setting disconnected reason to rejected because failure reason is %ld
Setting disconnected reason to invalid conversation link because failure reason is %ld
Setting disconnected reason to conversation links disabled because failure reason is %ld
Setting disconnected reason to no destinations available because failure reason is %ld
Setting disconnected reason to call failed because ended reason is %ld
Failed to find a call source to dial with for dial request: %@
CSDProviderCall joinConversationWithRequest: %@
LMI: FT Provider: %@ Sender identities: %@
Join request specifies invitation preferences: %@
attributes: %@
AVAudioSession muteSessionInput: %d for %@
Failed AVAudioSession muteSessionInput error: %@
for call: %@ pauseDigitsQueue: %@
[WARN] Next pause digits are not hard pause
[WARN] No next pause digits exist
for call: %@ key: %d
for call: %@ remoteVideoPresentationSize: %@
for call: %@ remoteVideoPresentationState: %d
Dequeueing next pause digits
Sending pause digits: %@ type: %ld
Found queued soft pause digits: %@
for pauseDigitsQueue: %@
[WARN] Symbolic link found for URL %@
[WARN] Could not determine source file for URL %@
[WARN] Not copying generic image
[WARN] Could not determine destination file for URL %@
Creating sandbox extension directory '%@' failed with error %@
Copying URL '%@' to filename '%@'failed with error %@
Releasing sandbox extension handle
Break before make timeout: %lfs
Removing image files failed with error %@
Determined wants break before make is %@ (supportsSimultaneousVoiceAndData: %@, nonWifiFaceTimeAvailable: %@, wiFiActiveAndReachable: %@) for call %@
Could not determine whether device wants break before make; could not obtain sender identity capabilities for call %@
Could not determine whether device wants break before make; could not obtain local sender identity for call %@
Call started outgoing: %@
Disconnecting video call because another call started outgoing: %@
Disconnecting call using the baseband because a video call started outgoing and wantsBreakBeforeMake=YES: %@
All calls ended. Setting uplink and downlink muted to NO
Call started connecting: %@
Leaving converstion since we have call that is getting connected: %@
%@ is handling %@
Pulling relaying calls from client since one to one mode changed for relaying calls
Call upgraded to video: %@
Video call connected: %@
Requesting to disconnect all calls besides: %@
Disconnecting call because it is not compatible with call %@: %@
Ending current active call %@ because call %@ is going to go active
Reporting emergency call to screen time
There was an error enabling emergency mode. Enabled successfully (%d) Error: %@
Posting CLTM notification %@ and setting state to %llu
Requesting to pull call %@ because its continuity state is different from call %@
Disconnecting call %@ because its continuity state is different from call %@
An endpointIDSDestination %@ is present for call %@ so pushing all hosted calls to that destination
An endpointRapportMediaSystemIdentifier="%@" or endpointRapportEffectiveIdentifier="%@" is present on dial request for call %@ so attempting to pick matching route
Setting up break before make timeout for call: %@
Disconnecting call because video call is still sending and break before make timeout fired: %@
CarPlay is not connected; muting uplink for RTT call %@
CarPlay is connected; unmuting uplink for RTT call %@
Setting uplink muted for TinCan call %@
Starting ringing timer for call with identifier %@
Exceeded ringing duration of %llu seconds; disconnecting call with identifier %@
[WARN] Store demo mode enabled. Limiting certain calls
Starting call duration limit timer as we are in a retail environment
Stopping call duration limit timer
Disconnecting restricted calls because the limited call duration timer fired: %@
Found active call needing hold music: %@
Hold music enabled - call is active so muting uplink and downlink
Hold music disabled - unmuting uplink and downlink
Disconnecting all calls since we have an AVLess conversation that is Joined: %@
handleUserInteractionWithBlock: shouldOpenInCallService: %d shouldDisplaySystemCallControls: %d callUUID: %@
updating descriptor old: %{public}@ new: %{public}@
TUOpenURLWithCompletion result: %@, error: %@
Encountered error while opening URL: %@
Punching out to app with bundle identifier %@
Successfully launched application with bundle identifier %@
Attempt to open application with bundle identifier %@ failed with error %@
XPC connection invalidated from client %@
Approval client enabled: %d, %@
Client deregistered itself as split-session approver
Ignoring deregistration; sender is not current approver
No session approval clients registered
Split session approval client: %@
Approval client unexpectedly nil!
Retrieving subscription information failed with error %@ for %@.
added service provider uuid=%@ carrierPhoneNumbers=%@
Retrieved carrier phone number '%@' for subscription %@
Retrieving carrier phone number for subscription %@ failed with error %@
Carrier bundle changed for subscription context %@.
Subscription info changed
Creating IDSGroupSession with options: %@
preferences: %@
options: %@
participantDestinationIDs: %@ contextData: %@ triggeredLocally: %d
participantDestinationIDs: %@ contextData: %@ requiredCapabilities: %@ requiredLackOfCapabilities: %@ triggeredLocally: %d
Sending participantData: %@
session: %@
session: %@, options: %@
session: %@, requestDataCryptor: %@
session: %@, requestEncryptionKeyForParticipants: %@ topic: %@
session: %@, setRequiredCapabilities: %@ requiredLackOfCapabilities: %@
session: %@, removeRequiredCapabilities: %@ requiredLackOfCapabilities: %@
session: %@, addAliasesToConversationContainer: %@ salt: %@
session: %@, participantIDForAlias: %llu salt: %@
session: %@ doesn't support async participantID fetching, falling back to sync form.
session: %@ updating participant type: %hu destinations: %@
self: %@ not running pending blocks yet because self.hasStarted=%d self.hasReceivedAccept=%d self.isInitiator=%d
self: %@ running block %@ with transport %@ and %@ accept payload data
self: %@ pending block on transport availability: %@
[WARN] Transport availability block timed out: %@
sendData self: %@
Session %@ is not connected and waitUntilConnected is YES. Pending data
Session %@ is not connected but waitUntilConnected is NO. Sending data
Session %@ is connected. Sending data
Session %@ is ending/ended. Dropping data on the floor
self: %@ destinations: %@
Session %@ is waiting. Sending data
Session %@ is not waiting. Dropping data on the floor
self: %@ data: %@
Setting session %@ to ending for prepareToEnd
Not setting session %@ to ending for prepareToEnd because session is not connected
Received invitation ACCEPT with data for session %@ from (fromID=%@) destination %@ device %@
Received invitation CANCEL with data for session %@ from (fromID=%@) destination %@ device %@
Received invitation DECLINE with data for session %@ from (fromID=%@) destination %@ device %@
Received session MESSAGE for session %@ from (fromID=%@) destination %@ device %@
Recent calls deleted: %@
thumperCallingAllowedOnDefaultPairedDeviceDefault keyExists: %d isAllowed: %d
Setting %@ default to %d
Error synchronizing NPS defaults: %@
Dismissing Thumper available notification on secondary device for account ID %@
Displaying Thumper enabled disclaimer on secondary device for account ID %@
Dismissing Thumper enabled disclaimer on secondary device for account ID %@
Could not obtain Thumper account identifier for sender identity UUID %@ from data source capabilities state %@
Comparing cached Thumper capabilities state %@ with data source capabilities state %@
Should show Thumper available notification for account ID %@
Default paired device unique ID was %@ and is now %@
Check if devices should be enrolled now that the default paired device changed.
Checking to see if any devices have been removed from this iCloud account.
Device with the uniqueID %@ will be unpaired from Thumper because it is no longer on the IDSService.
%@ is handling add capabilities for sender identity UUID %@
Thumper calling preferences update initiated by add capabilities for sender identity UUID %@
Skipping Thumper preferences update; Thumper capabilities state does not exist for UUID %@
%@ is handling remove capabilities for sender identity UUID %@
Thumper calling preferences update initiated by remove capabilities for sender identity UUID %@
Skipping Thumper calling preferences update; unknown context info found for sender identity UUID %@
%@ is handling change Thumper calling capabilities for sender identity with UUID %@
Show a reminder to the user that thumper is now available.
User requested to Turn On Thumper calling
[WARN] Not adding user notification because we are already displaying one
Removing existing reminder notification
Show a disclaimer to the user about their emergency address info now that thumper is enabled.
Emergency Address disclaimer: Preferences button pressed, open URL (%@).
Removing existing emergency address disclaimer
Archiving Thumper capabilities state object failed with error %@
Unarchiving Thumper capabilities state object failed with error %@
Archived object was of unexpected class %@: %@
Prefereces object was of unexpected class %@: %@
Initializing %@
FaceTime Audio availability is %ld. FaceTime Video availability is %ld
Initialized %@
Active accounts changed for service %@: %@
Received caller ID changed notification: %@
Received service availability changed notification: %@
Received devices changed notification: %@
FaceTime iCloud account is %@ (isActive=%d, profileID=%@) and relay iCloud account is %@ (isActive=%d, profileID=%@)
FaceTime caller ID %@ is not a valid outgoing relay caller ID
Attempting to find a valid outgoing caller ID in set of available outgoing caller IDs %@
Selected outgoing caller ID %@ from list of available outgoing caller IDs %@
Could not automatically select an outgoing caller ID; multiple telephone numbers are listed in the set of available outgoing caller IDs %@
Attempting to find a valid outgoing caller ID in list of vetted account aliases %@
Selected outgoing caller ID %@ from list of vetted account aliases %@
Could not automatically select an outgoing caller ID; multiple telephone numbers are listed in the set of vetted account aliases IDs %@
Outgoing Caller ID is %@
streamPreferences: %@
XPC connection invalidated from client %@ for CSDConversationProviderManagerXPCServer
deallocing ProviderManagerXPCServer
invalidating ProviderManagerXPCServer
conversationProviderForIdentifier: %@
generatePseudonymHandleForConversationProviderURI: %@
renewPseudonymHandle: %@
revokePseudonymHandle: %@
doesHandleCorrespondToConversationProvider: %@
registerForCallbacksForProvider received over XPC with providerIdentifier: %@
registerConversationProvider received over XPC with provider: %@
callProviderIdentifier: %@
dialRequest: %@
Could not determine UUID for FaceTime app bundle identifier %@
Setting disconnected reason to call failed because invitation was sent but no push tokens were available to receive the invitation for call %@
Setting disconnected reason to call failed because CSDIDSDualSession ended reason is %ld for call %@
Using call ended reason answered elsewhere because CSDIDSDualSession ended reason is %ld
Using call ended reason declined elsewhere because CSDIDSDualSession ended reason is %ld
Using call ended reason unanswered because CSDIDSDualSession ended reason is %ld
Using call ended reason remote ended because CSDIDSDualSession ended reason is %ld
Setting disconnected reason to call failed because CSDAVConference ended reason is %ld for call %@
Using call ended reason remote ended because CSDAVConference ended reason is %ld
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@
[WARN] Disabling key exchange because %@ default is set to YES
videoAspectRatioDescriptor: %@
Canceling session
Declining session
end self: %@
Stopping conference
Ending session
for call %@
Setting isSendingAudio to %d for chat %@
Conference has not been created yet. Updating shouldStartAudioPaused to %d
Setting isSendingAudioData to %d for chat %@
Setting isSendingVideo to %d for chat %@
Conference has not been created yet. Updating shouldStartVideoPaused to %d
Setting relaying from %d to %d for chat %@
transport: %@
sessionStarted: %@
Not starting connection because conference state is %d
session %@ invitationSentToPushTokens %@ shouldBreakBeforeMake %d
session %@ endedWithReason %d
session %@ receivedInvitationAcceptWithData %@
[WARN] Ignoring invitation accept since chat is incoming %@
[WARN] Ignoring invitation accept since there is no remote from ID set on the session.
Dropping invitation accept since there is no remote push token provided.
Dropping invitation accept since the remote push token was not one of the ones we invited.
[WARN] Ignoring incoming accept since accompanying message was nil
[WARN] Ignoring incoming message since message with type=%@ was not invite.
Error while creating UUID from protoUUID: %@
[WARN] Not setting upgradeSessionUUID for message: %@ self.upgradeSessionUUID: %@
Not starting connecting because session state is %d and conference state is %d
session %@ receivedInvitationDeclineWithData %@
session %@ receivedInvitationCancelWithData %@
session %@ receivedData (data is %@)
message: %@
[WARN] First frame not received after %f seconds for %@
reason=%ld error=%@
Remote media stalled for chat: %@. Reconnecting IDS session.
Device first unlock block invoked, initializing CXCallDirectoryManager...
XPC activity checked in. Criteria: %@
Setting activity state to XPC_ACTIVITY_STATE_CONTINUE
Error setting activity state to XPC_ACTIVITY_STATE_CONTINUE
Beginning daily maintenance with activity %@
Successfully compacted store
Error compacting store: %@
Setting activity state to XPC_ACTIVITY_STATE_DONE
Error setting activity state to XPC_ACTIVITY_STATE_DONE
Error synchronizing call directory extensions: %@
Successfully synchronized call directory extensions
Extensions changed for Call Directory NSExtensionManager %@, but we do not have a CXCallDirectoryManager (perhaps because device is not yet unlocked) so cannot synchronize
isDestinationIDAllowedThroughDoNotDisturb: provider=%@
isDestinationIDAllowedThroughDoNotDisturb: bundleID=%@
isDestinationIDAllowedThroughDoNotDisturb: eventDetails=%@
[WARN] Error encountered resolving behavior via DND. Defaulting isDestinationIDAllowedThroughDoNotDisturb to YES. error=%@
Handling %@ by preparing connected sessions to end
Handling %@ by ending ending sessions
CSDMessagingCallMessage could not be read
Handling %@ with message: %@ latency: %llu
CSDMessagingCallMessage is of unsupported type: %d
Updating dialingIDSDevice using device list %@
A paired device exists, so using that as the dialing device: %@
[WARN] We found two devices with matching linkedUserURIs (arbitrarily choosing the first): %@ and %@
A device exists with a linkedUserURI that matches Caller ID %@, so using that as the dialing device: %@
[WARN] Could not find a dialingIDSDevice. No paired devices exist and no devices that support phone calls and have a linkedUserURI for %@ exist.
Could not retrieve local invite dictionary for message: %@
(IDSMessaging Host->Client) sendIncomingCallMessageToClientForCall: %@
Call cannot be answered. Only notifying the paired device
[WARN] Failed to prepare conference for call %@. Not sending incoming call message to relay clients
Not sending out incoming call invitation because call is no longer ringing: %@
(IDSMessaging Host->Client) sendCallDialedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallAnsweredElsewhereMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallDisconnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallConnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendResetWantsHoldMusicMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallDisplayContextMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateFailureExpectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateSupportsEmergencyFallbackToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateRemoteUplinkMutedCallMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateSupportsTTYWithVoiceCallMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallModelMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDeviceUnavailableMessageToClient
(IDSMessaging Host->Client) sendPullRelayingCallsMessageToClient
(IDSMessaging Host->Client) sendResetStateMessageToClient
(IDSMessaging Host->Client) sendHardPauseAvailabilityMessageToClientForState %d digits: %@
(IDSMessaging Host->Client) sendUpdateRemoteCallStateMessageToClient
(IDSMessaging Host->Client) sendCallStartedConnectingMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDialCallFailedForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendDialCallFailedForScreenTimeForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendPushCallsMessageToClientDestination: %@
Allowing call: %@ to be pushed to destination: %@
Skipping call: %@ to track for pushing to destination: %@
Found no calls to send sendPushCallsMessageToClientDestination
(IDSMessaging Host->Client) Sending UpdateCallContext message: %@
(IDSMessaging Host->Client) sendNeedsManualInCallSoundsChangeMessageToClientForCall: %@
(IDSMessaging Host->Client) sendInvitationSentMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateRoutesMessageToClientForRoutes: %@
(IDSMessaging Client->Host) sendDialCallMessageToHostForCall: %@
No dialing IDS device found. If we aren't already in a session, this dial call attempt will fail.
Failed to prepare conference for call %@. Disconnecting call with conference failed
Not sending out dial call invitation because call is no longer sending: %@
(IDSMessaging Client->Host) sendAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendUnholdCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendGroupCallMessageToHostForCall: %@ otherCall: %@
(IDSMessaging Client->Host) sendUngroupCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendSwapCallsMessageToHost
(IDSMessaging Client->Host) sendEndActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendEndHeldAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCurrentCallAndActivateHeldToHost
(IDSMessaging Client->Host) sendDisconnectAllCallsToHost
(IDSMessaging Client->Host) sendSendHardPauseDigitsMessageToHost
(IDSMessaging Client->Host) sendRequestCallStateMessageToHost
(IDSMessaging Client->Host) sendPullCallsMessageToHost
[WARN] Failed to prepare conference while pulling calls
(IDSMessaging Client->Host) sendPushRelayingCallsMessageToHostForSourceIdentifier: %@
(IDSMessaging Host->Client) sendUpdateRemoteUplinkMutedCallMessageToHostForCall: %@
(IDSMessaging Host->Client) sendPickRouteMessageToHostForRoute: %@
(IDSMessaging Client<->Host) sendSetTTYTypeCallMessageForCall: %@ ttyType: %d
(IDSMessaging Client<->Host) sendSetUplinkMutedCallMessageForCall: %@ uplinkMuted: %d
(IDSMessaging Client<->Host) sendSuppressRingtoneMessageForCall
(IDSMessaging Client<->Host) sendUpdateSystemVolumeForCall: %@
[WARN] We determined that device is null and destination: %@ is not guest. Ignoring incoming message: %@
Handle incoming %@ message: %@
[WARN] We determined that device: %@ cannot process messages for provider %@. Ignoring incoming message: %@
[WARN] Screen Time restricted the call for dial call message with destinationID %@ and provider: %@ is emergency: (%d)
[WARN] Ignoring %@ relay message since our device does not suppport processing messages of that type.
Messaging device can't receive relayed calls ...
... and we were told to decline the session invite. Declining incoming %@ message: %@
... and we were told not to decline the session invite. Ignoring incoming %@ message: %@
[WARN] Setting should ignore session to YES for %@ message because message is from a guest destination and this device is not an AudioAccessory
Query result: %@ for handle: %@ provider: %@
[WARN] Setting should ignore session to YES because TUICFInterface allowCall = NO for destinationID %@ and provider %@
[WARN] Setting should ignore session to YES because a call exists with sending status: %@
[WARN] Setting should ignore session to YES because screen time filtered message for destinationID %@ and provider %@ with emergency (%d)
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is Telephony, and isDirectTelephonyCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is FaceTime Audio, and isDirectFaceTimeAudioCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is FaceTime Video, and isDirectFaceTimeVideoCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is TinCan, and isDirectFaceTimeAudioCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because no calls exist with an endpoint on the current device: %@
Launched by IMDaemon notification
Launched by application installed notification
Launched by application uninstalled notification
Could not create notification for XPC event %@
Caught SIGINFO. Dumping debug info.
Caught SIGUSR1
Caught SIGUSR2
Created call center: %@
Performing user configuration migration
Did not find default to enable LivePhotoXPCService - using old moments stack
Initialized CSDDaemon
Calling xpc_transaction_exit_clean() due to language change
failed to initialize temporary directory (%d): %s
failed to resolve temporary directory (%d): %s
User configuration changed
Used country code '%@' to determine international phone number representation: %@
Determined that invite should be %@ - (isWiFiAvailable=%d isWiFiAllowed=%d isCellularDataAvailable=%d isCellularDataAllowed=%d shouldOverrideNetworkAsAvailable=%d)
Invite received for service %@ account %@ from (fromID=%@) with context: %@
Recieved pending message of type %ld
Incoming call was denied with error %@ so ignoring chat: %@
Not handling pending message of type: %ld
Invite received for session %@ account %@ from (fromID=%@) with data: %@
Declining this invite because we found a sending chat with the same destination: %@
Incoming call was denied with error %@ so declining chat: %@
Ignoring incoming invite since shouldAcceptIncomingInvite is %d
Ignoring incoming invite since message with type=%@ was not an invite.
[WARN] Ignoring incoming invite since accompanying message was nil
Calling answer on chat %@
Not accepting invitation to call %@ since it is already Connected
Calling end on chat %@
Setting sendingAudio to YES for chat %@
Setting sendingAudio to NO for chat %@
Chat with matching UUID connected; attempting to fulfill pending answer call action %@
Chat did not provide a connection date; Failing answer call action %@
Failing answer call action for call because it disconnected before connecting: %@
[WARN] called for session %@ that was not the initiator (%d) or that already had a version set (%d)
sendInvitation self: %@
Session %@ is waiting. Sending invitation
Session %@ is not waiting. Not sending invitation
acceptInvitation self: %@
Session %@ is waiting. Accepting invitation
Session %@ is not waiting. Not accepting invitation
cancelInvitation self: %@
Session %@ is waiting. Canceling invitation
[WARN] Asked to cancel invitation with non-nil data and a concrete cancel reason, but that combination is unsupported
Session %@ is not waiting. Not canceling invitation
declineInvitation self: %@
Session %@ is waiting. Declining invitation
Session %@ is not waiting. Not declining invitation
reconnectSession self: %@
Session %@ started (shouldUseSocketForTransport: %d socket: %d, destination: %@)
Received invitation SENT for session %@ with tokens %@ shouldBreakBeforeMake %d
Session %@ ended with reason %d: %@
Session %@ appears to have ended with an unanswered reason: %d
Session %@ appears to have ended with a local hangup reason: %d
Session %@ appears to have ended with a remote hangup reason: %d
Session %@ appears to have ended with an accepted elsewhere reason: %d
Session %@ appears to have ended with a declined elsewhere reason: %d
Session %@ appears to have ended with a fatal reason: %d
Session %@ appears to have ended due to mismatched networks reason: %d
Received invitation ACCEPT with data for session %@ from %@
Received invitation CANCEL with data for session %@ from %@
Received invitation DECLINE with data for session %@ from %@
Received session MESSAGE for session %@ from %@
Found matching account: %@ for uuid: %@
Found matching account: %@ for uuid: %@ but it was not active and cannot be used for FaceTime.
[WARN] Server bag does not support quick relay
Server bag is not loaded. Assuming we can make a FaceTime call over quick relay
Starting FaceTime IDS chat using account: %@ destinations: %@ options: %@
Cannot start FaceTime IDS chat using handle %@ because IDS destination was '%@'
Cannot start FaceTime IDS chat using service %@ because account is not active: %@
Tried to make an outgoing call when we already had a ringing call with the same destination: %@
Requesting transaction to answer already-ringing call
Requested transaction to answer already-ringing call with UUID %@ failed with error %@
Successfully requested transaction to answer already-ringing call
[WARN] Not attempting to use IDSSession for outgoing FT call because server bag does not allow quick relay invitations
[WARN] Found a chat to upgrade: %@
Unable to convert to remoteIDSToken: %@
Unable to find existing chat for conversation: %@
Found existing chat: %@ for conversation: %@
[WARN] Failing action %@ we determined that chat %@ cannot be upgraded.
%@ Auto-upgrading because chatToUpgrade is %@, isConnected: %d, isVideo: %d, isSendingVideo: %d, isSendingAudio: %d isChatPendingUpgrade: %d
Upgrading chat: %@
Ending chat that is being upgraded: %@
[WARN] Could not find chat with UUID %@. All chats: %@
Found chat with UUID %@. Ending it: %@
Matching sender identities %@ to IDS accounts %@
Updating FaceTime provider with configuration %@
service: %@ activeAccountsChanged: %@
Ignoring %@ because messageSendTime (%f) <= call.uplinkMutedSetTime (%f)
[WARN] Ignoring received request action message because it has a request action type we don't know how to handle: %@
transferFileAtURL: %@, destinations: %@
placing unzip results into folder %@
new directory urls: %@, unzippedDirectoryURL: %@
Error retrieving contents of directory at URL %@: %@
temporaryClientFileURL: %@, destinations: %@
Sending resource at URL %@ to destinations %@ with metadata %@
Successfully started sending resource with identifier %@
Failed to start sending resource with identifier %@: %@
%@ doesn't exist at client file url: %@
incomingResourceURL: %@ metadata: %@ fromID: %@
Copied resource to temporary URL: %@
successfully sent file with identifier: %@
failed to send file with identifier: %@, error: %@
[WARN] Unexpected nil clientFileURL for service: %@, account: %@, identifier: %@, didSendWithSuccess: %d, error: %@, clientFileURLByIdentifier: %@
Failed to copy URL at %@ to %@: %@
Failed to create directory at URL %@: %@
Error moving url %@ to %@: %@
Deleted contents at URL: %@
Failed to delete contents at URL %@: %@
Zipping directory at URL: %@, output to: %@
Error zipping directory at URL %@ to output URL %@
operation: %ld, inputURL: %@, outputURL: %@
Error occurred during IMFileCopierOperation type %ld on inputURL %@ and outputURL %@
completed operation: %ld, inputURL: %@, outputURL: %@
deleting temporary file at URL: %@
Calling fetch completion block for call source with identifier %@
Waiting for call source with identifier %@
[WARN] Timed out waiting for call source with identifier %@ to check in
[WARN] Couldn't identify device type based on model identifier (%@)
Enabling relay calling on secondary device %@.
Activating Thumper calling on secondary device %@ for telephony subscription with UUID %@.
User notification has been completed with response %lu and entered PIN %@
Showing service confirmation dialog to user
Requesting pin from iPhone
Canceling pin request from iPhone
PIN code entered with success=%d cancelled=%d
Device Pin Exchange received an incoming approval request
[WARN] We received an incoming pin code alert from a non-telephony device: %@
User tapped cancel on the Pin Display Alert
Request for pin exchange failed
[WARN] Ignoring request to group call because it is already grouped: %@
[WARN] Ignoring request to ungroup call because it isn't grouped: %@
Setting uplinkMuted to %d for call %@
Started conference successfully for answered relay call %@
[WARN] Failed to start conference connection when answering call %@: %@
Conference connection stopped (cleanly=%d) for answered call %@: %@
Started conference successfully for dialed relay call %@
[WARN] Failed to start conference connection when dialing call %@: %@
Conference connection stopped (cleanly=%d) for dialed call %@: %@
Started conference successfully for pulled relay call %@
Failed to start conference connection when pulling call %@: %@
Conference connection stopped (cleanly=%d) for pulled call %@: %@
[WARN] Ignoring request to hold call because it is already held: %@
[WARN] Ignoring request to unhold call because it isn't held: %@
Entitlement for key '%@' is non-nil but is of class %@ rather than an NSArray (%@), so assuming process %@ has no entitlements
Failed to grab assertion for process %@, reason: %@
[WARN] Cannot create emergencyTUHandle from CSDMessagingHandle %@
[WARN] Cannot create emergencyTULabeledHandle from CSDMessagingLabeledHandle %@
Received acknowledgement for message with identifier: %@. Removing from waiting messages.
[WARN] Received acknowledgement for unknown message with identifier: %@
Received successful didSend for message with identifier %@ using account %@
Received unsuccessful didSend for message with identifier %@ using account %@: %@
Incoming message of type %@ from destination %@ device %@: %@
[WARN] Received message %@ from device %@ but it is not the default paired device
[WARN] No device found for fromID %@. All devices: %@
[WARN] Removing IDSSendMessageOptionForceLocalDeliveryKey key from sendMessage options because pairedDeviceUniqueIDOverride exists
Not attempting retry since message is no longer waiting for acknowledgement: %@
[WARN] Not attempting retry since we are out of retry attempts for %@ message with identifier: %@
Retrying message send with identifier: %@
Sending %@ message with identifier %@ and options %@ to destinations %@
identifier %@ message %@
Successfully sent %@ message
Setting up reliable message delivery for %@ message with identifier: %@ and retry attempts left: %lu
Failed to send %@ message: %@
[WARN] No paired device, so unable to send message %@
photoURL: %@ videoURL: %@
saved photo with localIdentifier: %@ error: %@
saveVideoWithURL: %@
Saved video with localIdentifier: %@ error: %@
Processing delayed actions:%@
Not processing delayed actions because we no longer have a call
providerDelegate: %@ callUUID: %@ dateStartedConnecting: %@
Ending call since dataSource is not tracking any call for callUUID: %@
providerDelegate: %@ callUUID: %@ dateConnected: %@
providerDelegate: %@ callUUID: %@ dateEnded: %@ endedReason: %ld failureContext: %@
Ending call with UUID %@ on other provider delegate %@ because ended reason was %ld
providerDelegate: %@ transaction: %@
providerDelegate: %@ ending callUUID %@
[WARN] action: %@
modernFTDestinations: %@
gftOneToOneDestinations: %@
Created join call action: %@ for gftOneToOneDestinations: %@
Can't perform start call action since queries did not return any destinations
Skipping to invite remote destinations since we don't have a call tracking any longer
Invited push tokens via IDS: %@ wasCanceled: %d
No longer handling call with UUID %@, requesting end
Could not initiate FaceTime call - No IDS or IMAV call returned for handle %@
Not sending IMAV invites because IDS session was canceled
Perform join call with action UUID: %@
Failing join call action since it does not meet join call action requirements
Failing join call action since we are already pending a join on this same call UUID elsewhere.
Failing join call action isVideo: NO and videoEnabled: YES
Updated to action: %@
Found a IMAV chat that is being tracked for action: %@
Created start call action: %@ for modernFTDestinations: %@
Can't perform join call action since queries did not return any destinations
Sending JoinCallAction to FaceTimeConversationProviderDelegate- action: %@
Sending JoinCallAction to CSDGFTServiceConversationProviderDelegate- action: %@
[WARN] No provider delegate is managing call for action %@
Delaying action %@
Asked to deliver voip token %@ to application %@
Asked to deliver message %p to application %@
[WARN] Message transport type is unknown; cannot enqueue message %@
Delivering voip token %@ to application %@
Pending VoIP token delivery until a connection exists
Delivering %lu network extension payload(s) to application %@
Pending Network Extension payload deliveries until a connection exists
Delivering %lu VoIP payload(s) to application %@
Pending PushKit VoIP payload deliveries until a connection exists
Invalidating process assertion for bundle identifier %@ from completion handler
[WARN] Message transport type is unknown; cannot deliver message %@
[WARN] InCallService has multiple process identifiers: %@
InCallService process state is now %ld
Initialized inCallServiceProcessState to %ld
Started tracking SpringBoard process with PID %@
SpringBoard process has changed PID from %@ to %@
conversation: %@ activitySessions.count: %lu
sendingCall %d activeCall %d heldCall %d disconnectingCall %d ringingCall %d bargeCall %d
resolvedAVLessConversation groupUUID: %@
callsChangedForCallCenterObserver
%s: Updating status bar triggered by removedActiveConversation for conversation UUID %@
%s: Updating status bar triggered by addedActiveConversation for conversation UUID %@
%s: Updating status bar triggered by stateChangedForConversation for conversation UUID %@
%s: Updating status bar triggered by activitySessionsChangedForConversation for conversation UUID %@
%s: Updating status bar triggered by activeRemoteParticipantsChangedForConversation for conversation UUID %@
%s: Updating status bar triggered by localVideoToggledForConversation for conversation UUID %@
%s: Updating status bar triggered by handoffEligibilityChangedForConversation for conversation UUID %@
Setting muted to %d for %@
[WARN] setMuted:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Setting sending audio to %d for %@
[WARN] setSendingAudio:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Asked to prepare conference connection %@ remoteInviteDictionary %@
Not preparing a new conference because another conference already exists: %@
Attempted to prepare a new conference connection with the same identifier as an existing conference connection: %@
Asked to start conference for identifier %@
We already have an active conference. Invoking this conference connection's didStart immediately
Did not find conference connection to start for identifier %@. All conference connections: %@
Asked to send data to conference for identifier %@
Asked to update conference for identifier %@ with isUsingBaseband=%d disableAudio=%d
Updating device role for identifier %@ to %d
Did not find conference connection for identifier %@. All conference connections: %@
Setting conference connection active: %@
Asked to prepare to stop conference for identifier %@
Pausing audio and setting up timeout for conference connection: %@
It's been %fs since asked to prepare to stop conference and conference connection still exists: %@. Forcefully cleaning up all conference connections for conference %@
Asked to stop conference for identifier %@
Cleaning up conference connection %@
Also cleaning up conference connection which is already prepared to stop %@
Posting %@
reason: %ld error: %@
Relay conference ended in failure (reason: %ld): %@
Setting up close connection timeout because conference ended reason was normal
[WARN] Timed out waiting for conference %@ to close connection after receiving end
[WARN] Unable to get URL for filename '%@'
[WARN] Unable to get standardized URL for URL '%@'
Setting up Pin Exchange controller
Requesting PIN from device %@
[WARN] accountsSupportSecondaryCalling=NO. Displaying mismatched accounts notification
Canceling all PIN requests
[WARN] Could not find device for unique ID %@
The entered PIN code is correct
Activated Thumper for requesting device %@
[WARN] The entered PIN code is incorrect, could not register device.
The user entered no code... or the code entered was not an NSString
We were unable to send the PIN to the other device to be displayed, Sorry
Sending a PIN code to device %@ to display to enroll them into Thumper
[WARN] Ignoring request to send PIN code because we already have one pending for device with unique ID %@
Could not obtain caller ID from Thumper IDS service %@
Sending IDS action %@ to device %@ with message %@
Thumper IDS action sent to device with success: %@ error: %@ identifier: %@
[WARN] Displaying PIN error notification
[WARN] Displaying mismatched accounts notification
[WARN] Displaying slots full notification
Received message for service %@ from device %@ (isHSATrusted=%d): %@
Ignoring pin request: There is already a pending pin request that has not yet completed.
One sender identity exists; continuing Thumper registration using UUID %@
Multiple sender identities exist; checking whether caller ID %@ matches a sender identity in %@
[WARN] Aborting Thumper registration; multiple sender identities exist but caller ID not supplied
Aborting Thumper registration; could not obtain sender identities from call provider %@.
Device requesting PIN is HSA trusted. Forgoing PIN exchange and enrolling the device immediately
Received request to enroll device %@ in Thumper for sender identity with UUID %@
[WARN] Aborting Thumper registration; could not obtain sender identity UUID.
Received didSendWithSuccess=YES for message with identifier %@
Received didSendWithSuccess=NO for message with identifier %@: %@
InCallService has changed process state to %ld
InCallService has been suspended; invalidating its XPC client connections.
Initialized capability state: %@
Updating clients with new call capabilities state: %@
Updating paired host device state
TUCallCapabilitiesXPCServer - callCapabilitiesState request from %@
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d forDeviceWithID: %@
TUCallCapabilitiesXPCServer - setWiFiCallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setWiFiCallingRoamingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setVoLTECallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowed: %d secondaryDeviceID: %@ senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowedOnDefaultPairedDevice: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - endEmergencyCallbackMode
TUCallCapabilitiesXPCServer - invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityUUID: %@
TUCallCapabilitiesXPCServer - invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityUUID: %@
TUCallCapabilitiesXPCServer - requestPinFromPrimaryDevice
Using the following account for the PIN request: %@
No device found for account %@. All accounts: %@
[WARN] No primary Thumper account found for PIN request. This should only happen because an account exists but has no empty device slots. All accounts: %@
TUCallCapabilitiesXPCServer - cancelPinRequestFromPrimaryDevice
Received device list changed notification: %@
Received device capability changed notification: %@
Received accounts changed delegate callback
Received FaceTime availability changed delegate callback
Received outgoingCallerIDChanged delegate callback
Disabling Thumper for subscription with UUID %@
Received telephonyCallCapabilitiesChanged delegate callback
[WARN] Disabling support because %@ was set to YES
[WARN] Enabling support because %@ was set to YES
Found primary Thumper account ID %@
Thumper calling is not supported for account ID %@
Setting associated Thumper account ID %@
_setWiFiCallingEnabled: asking to change value from %d to %d
_setWiFiCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setVoLTECallingEnabled: asking to change value from %d to %d
_setVoLTECallingEnabled: not updating value. Is currently %d and asked to set to %d
_setWiFiCallingRoamingEnabled: asking to change value from %d to %d
_setWiFiCallingRoamingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingEnabled: asking to change value from %d to %d
_setThumperCallingEnabled: not updating value. Is currently %d and asked to set to %d
Changing Thumper calling allowed value from %d to %d on secondary device ID %@
[WARN] Not changing Thumper calling allowed value. No device slots remain for this device. Displaying notification to the user
[WARN] Could not set Thumper calling allowed for secondary device with identifier %@; unable to retrieve local Thumper account from call capabilities %@
[WARN] Could not retrieve account ID from Thumper capabilities %@
_setThumperCallingAllowed: not updating value. Is currently %d and asked to set to %d on secondary device ID %@
[WARN] Could not find Thumper capabilities for sender identity UUID %@
[WARN] No cloud calling device appears to be a default paired device: %@. Ignoring setThumperCallingAllowedOnDefaultPairedDevice request
[WARN] Could not obtain UUID from sender identity capabilities state %@
defaultPairedDeviceExists: %d
telephonyDeviceExists: %d, relayCapableDeviceExists: %d, defaultPairedDeviceExists: %d
_setRelayCallingEnabledDefault: changing value to %d
_setRelayCallingEnabled: Changing value from %d to %d
_setRelayCallingEnabled: Not updating value. Is currently %d and asked to set to %d
setRelayCallingEnabledDefault:forDeviceWithID: changing value to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Changing value from %d to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Not updating value. Is currently %d and asked to set to %d for %@
Initialized pairedHostDeviceState: %@
[WARN] Could not de-serialize pairedHostDeviceStateData %@
[WARN] Saved pairedHostDeviceStateData was not an NSData type (class=%@): %@
No saved paired host device state found
Initializing new paired host device state with all values set to NO
_supportslaunchingInCallApplicationForIncomingCall: %d
dialRequest: %@ displayContext: %@
Coordinated alert request came back with bestIsMe: %d info: %@ error: %@
Starting coordinated alert request to determine ringtone un-suppression: %@
faceTimeIDSStatus for destinationID: %@ is: %@
Invalidating display context for %@
Posting %@ because relayClientTransport changed from %@ to %@ for %@
Posting %@ because mayRequireBreakBeforeMake changed from %d to %d for %@
Posting %@ because hasStartedOutgoing changed from %d to %d for %@
Posting %@ because hasAudioInterruption changed from %d to %d for %@
activeRemoteParticipants changed from %@ to %@ for %@
Audio device list changed
[WARN] No audio route collection found in audioRouteCollections: %@ for audio category %@ and audio mode %@ for call %@
Found preferred AVAudioDevice: %@
Requesting initial state of CarKit's DND assertion
Received initial CarKit DND assertion: %d
Unable to fetch CarKit DND assertion: %@
Updating isCarModeActive to %d
[WARN] Timeout occured fetching CarPlay do not disturb status.
Updating isCarPlayDeviceConnected to %d
Device first unlock block invoked, attempting to retrieve active conversations
Sent message with identifier %@ to %@
Error sending message: %@
Using local callerID: nil, could not get strong self
Using local callerID: %@
Could not find caller ID when creating conversation
UUID: %@ groupUUID: %@ localMember: %@ fromStorage: %d report: %@
UUID: %@ remoteMembers: %@
Asked to invite specific conversationUUID: %@ participantDestinationIDs: %@
localDeviceDestination: %@ oneToOneModeCapableLocalDestinations: %@
conversationUUID: %@ participantDestinationIDs: %@
UUID: %@ groupUUD: %@ localMember: %@
Transitioning conversation %@ to new groupUUID: %@
[WARN] Ignoring request to transition to new group UUID since an existing conversation does not exist.
[WARN] Cannot transition to a different group UUID that does not have the same set of remote members.
[WARN] Cannot transition to a different group UUID that does not have the same set of lightweight members.
[WARN] Dropping request to transition since sender is not in the members list that was given.
[WARN] Failed to create newActivitySession for activitySession %@ on conversation: %@
Delegate should handle conversation update: %@ for provider: %@
notifyDelegatesOfChangedLinkDescriptors: -- no link descriptors, not updating delegates
Retrieving conversation links failed with error %@
Sending message: %@ to: %@
[WARN] No local participant for conversation UUID: %@
[WARN] handleConversation:receivedAVCBlobResponse:fromHandle: %@ <!===> %@
[WARN] handleConversation:receivedAVCBlobResponse:fromHandle: Could not find participant in message: %@
Handoff changed to advertise %@ for identifier %llu, uplink muted %@, sending video %@
Handoff changed without eligibility, so stopping advertising
Handoff eligibility added to conversation: %@
Handoff eligibility removed from conversation: %@
Ignoring route identifier change for handoff as no conversations are currently joined.
Conversation manager alerted to new selected audio route ID %@, letting my other devices know for conversation UUID %@
Conversation manager alerted to unselected audio route, letting my other devices know for conversation UUID %@
Sending UpdateJoinedMetadata message %@ to my other devices: %@
Dropping session started event because session %@ has system activity
Posting session started event from participant %@ for session %@
Dropping session ended event because session %@ has system activity
Posting session ended event from participant %@ for session %@
Asked to create ActivitySession %@ on conversation UUID: %@ with trusted fromHandle: %@
[WARN] Conversation message of type Encrypted received with either no encryptedMessage or enclosedEncryptedType. Dropping message.
[WARN] ConversationMessage of type Encrypted with enclosed type of %d which we do not have support for, dropping.
Received Encrypted message with enclosed type of LetMeInRequest from handle %@
[WARN] Could not retrieve a pseudonym string from the message context.
[WARN] Let Me In request was not sent to a pseudonym. Dropping message.
Could not decrypt let me in request with error %@
[WARN] Decrypted conversation message but was not a let me in request: messageType: %d
[WARN] Provided link is %@, which was not a valid TUConversationLink.
Received Encrypted message with enclosed type of LetMeInResponse from handle %@
[WARN] No pending conversation found for link %@
[WARN] Pending conversation's let me in request state is %ld instead of Requested
[WARN] Pending conversation's let me in key agreement is either nil (%@) or exhausted (%@)
[WARN] Let Me In response was not sent to a pseudonym. Dropping message.
[WARN] Could not decrypt let me in response
[WARN] Decrypted conversation message but was not a let me in response messageType: %d
Could not find link for pseudonym %@, dropping let me in request. Error: %@
Dismissing let me in because link has originator handle of %@, which is not one of our active local handles %@
[WARN] GreenTea device does not support multiple remote members. remoteMembers = %@
Let me in requestor %@ is a handle that has already been kicked, rejecting let me in. conversation.kickedMembers: %@
Let me in requestor %@ is a handle that has already been rejected, rejecting let me in. conversation.rejectedMembers: %@
Let me in requestor %@ is a handle that is already a member of the call; Let Me In not required. conversation.remoteMembers: %@
[WARN] Ignoring let me in response message, as it is missing a groupUUID (%{public}@), missing a link (%{public}@), or does not specify approval/rejection (%{public}@): %@
[WARN] Let me in response is not for the provided pending conversation. Ignoring.
[WARN] Let me in response is not from the pseudonym defined in the link %@, instead is from %@
Finished processing let me in response (approved: %{public}@) for groupUUID: %@. Approver handle is %@.
Not sufficiently formed link created/changed message, type: %d hasLink: %d linkGroupUUID: %@ conversationGroupUUID: %@
[WARN] Invalid TUConversationLink for link created/changed message (it was nil)
[WARN] Sender %@ did not match link's originator handle %@ for link created/changed message %@
[WARN] Link already exists on conversation %@ for link created message %@
[WARN] GreenTea device does not support link created/changed message because invitedMemberHandles > 1, message: %@
[WARN] Sender %@ is not part of conversation UUID %@.
[In-Advance] Received link created/changed message from %@ with link %@
[WARN] GreenTea device does not support link creation message %@ because invitedMemberHandles > 1
Failed to persist received link to data store with error %@
[Ongoing] Received link created/changed (update: %{public}@) message for conversation UUID %@ from %@ with linkDescriptor %@
[WARN] Did not set conversation link %@ to conversation UUID %@
[In-Advance] Link successfully stored (update: %{public}@) from %@ with linkDescriptor %@
Not sufficiently formed link invalidation message %@
[WARN] Invalid TUConversationLink for link invalidation message %@
[WARN] Sender %@ did not match link's originator handle %@ for link invalidation message %@
We are not tracking any stored link for link invalidation message %@
Failed to remove received link from data store with error %@
[WARN] Dismissing let me in delegation because no groupUUID was set
[WARN] Dismissing let me in delegation because the forHandle is blocked {forHandle: %@, fromHandle: %@}
Received LMI delegation, unable to parse forHandle -- ignoring! {fromHandle: %@, message.letMeInDelegationHandle: %@}
Received LMI delegation, unable to parse transactionUUID -- ignoring! {fromHandle: %@, message.letMeInDelegationUUID: %@}
Received LMI delegation message! {fromHandle: %@, forHandle: %@, transactionUUID: %@}
[WARN] Dismissing let me in delegation response because no conversation was found for link's groupUUID: %@
Received LMI delegation response, unable to parse transactionUUID -- ignoring! {fromHandle: %@, message.letMeInDelegationUUID: %@}
Received LMI delegation response message, without letMeInApproval -- dropping! {fromHandle: %@, forHandle: %@, transactionUUID: %@}
Received LMI delegation response message! {fromHandle: %@, forHandle: %@, transactionUUID: %@, message.letMeInApproval: %@}
No invited members or conversation members were specified; no need to send messages (link: %@, conversation UUID: %@)
[WARN] UpdateJoinedMetadata conversation message was sent by a non-local handle %@, dropping message.
[WARN] UpdateJoinedMetadata conversation message was missing a group UUID, dropping message.
[WARN] UpdateJoinedMetadata conversation message was missing a joined metadata object, dropping message.
[WARN] UpdateJoinedMetadata conversation message was missing a valid participant, dropping message.
[WARN] No conversation was found for group UUID %@, dropping UpdateJoinedMetadata message.
[WARN] Could not find a matching participant for sender %@, dropping UpdateJoinedMetadata message.
Per UpdateJoinedMetadata message, the local user was using %@ audio route from another device with participant identifier %llu in conversation UUID %@
Per UpdateJoinedMetadata message, the local user was using a default audio route from another device with participant identifier %llu in conversation UUID %@; no need to track a route.
Sending data from: %@ to: %@
blob response, removing %@ from options: %@
[WARN] Could not convert %@ to IDS destination
Failed broadcasting file. Missing local member on conversation: %@
Broadcasting file from: %@ to: %@
Error broadcasting image %@
Sent broadcast image message with id %@
Missing local member on conversation: %@
Broadcasting data from: %@ to: %@
conversation: %@ broadcastImageForSession: %@
Error transmitting activity session %@ image. Failed to write to path %@ with error %@
(broadcastImageForSession activity UUID: %@ success: %d).
Failed to delete image file after sending image for session %@ error %@
conversation: %@ broadcastLightweightEndorsementForAddedMembers: %@
conversation: %@ has a splitSessionSecondary (%@), sending verification push
(success: %d).
[WARN] Couldn't create handle from participant destination identifier %@
[WARN] Couldn't find participant destination identifier %@ in members %@
[WARN] Couldn't decode message due to invalid data length.
[WARN] Couldn't decode message due to invalid groupUUID
[WARN] Couldn't find conversation with groupUUID %@
[WARN] Received unknown participant update message
[WARN] Unable to find members from message
Message doesn't have intent key set, dropping message
Kick message not permitted, dropping message
Invalid activity session update, dropping message
Invalid blob respnose, dropping message
Message type not permitted for member type, dropping message
Invalid vouching message, dropping message
Update type & payload not allowed fromHandle: %@
Not all lightweightMembers have an associated lightweightPrimary in the conversation, dropping message fromHandle: %@
Received an empty message of type: %@
FromHandle: %@ is trying to kick itself (%@)
Originator not set on message type: %@
Originator on message (%@) is not equal to fromHandle: %@
Message has an unrecognized type, dropping message
blob response verification can't function without an existing conversation
Received an invalid count of participants on type: %@
Failed to get participant from BlobResponse message
FromHandle: %@ is trying to add a different participant handle (%@)
FromHandle: %@ is trying to add a lightweight participant, but we can't find the lightweightMember
Couldn't find member for fromID: %@
Member: %@ doesn't have a primary
Lightweight member %@ doesn't have their primary in the conversation
Rejecting join update since we don't have an existing conversation, fromHandle: %@
Rejecting join update since it is trying to add members to the conversation, fromHandle: %@
Rejecting update since its trying to add a lightweightMember not associated with their device, member: %@ fromHandle: %@
Member verification can't function without an existing conversation
Invalid amount of members trying to be vouched (%lu)
FromID: %@ attempting to vouch for an invalid member %@
No local lightweightMember found for handle trying to be vouched
FromHandle: %@ trying to vouch for another member's lightweightMember
Refreshing active pariticpants for active conversations
[WARN] _incomingPendingConversationsByGroupUUID: issue fetching links for pending incoming {error: %@}
CSDConversationManager beginning to listen on service:%@
[WARN] Not adding cached conversation with UUID %@ because we already added equivalent conversation with UUID %@
Reviving cached conversation with groupUUID: %@ remoteMembers: %@ lightweightMembers: %@
[WARN] Failed to create newActivitySession for activitySession %@
Failed to create activitySession from persistence since we couldn't find the trusted fromHandle on activitySession: %@
shouldClearDefaults: %d - Removing all conversations
groupUUID: %@ remoteMembers: %@
Found existing conversation %@ but not reusing it since it's leaving and we're trying to join a U+1 call
No conversation currently exists to join: %d, so creating a new one isConversationVideoUpgrade: %d
[WARN] The request specified that local member %@ should be used, but the useable handles for FaceTime are %@. We cannot proceed with a handle that's not registered for FaceTime on this device.
Unable to create local member. Caller ID: %@
Found existing conversation with UUID: %@
Activating cached conversation from storage with UUID: %@ as someone seems to be interested in it.
joinExistingConversationWithUUID: %@ context: %@
[WARN] Could not find conversation with UUID: %@
Ignoring request to join conversation with UUID: %@ since conversation is already joined
Request to join conversation is trying to change avMode on conversation UUID: %@
[WARN] Leaving existing conversation with UUID: %@ in favor of new conversation with UUID: %@
Updating context to use isOneToOneModeEnabled=true %@
LMI: Creating pending conversation for link: %@, localMember: %@
LMI: Cannot find pending conversation for pseudonym %@
LMI: Requesting membership in pending conversation for link %@
LMI: Could not encrypt let me in request with error %@
Error sending request to join conversation
Sent let me in request for link %@
LMI: Notifying pending member %@ of our response (approved: %@) to their let me in for conversation UUID %@
[WARN] Response key missing from LMI response; cannot encrypt to send without. Aborting.
LetMeInResponse message assembled as %@
LMI: Could not encrypt let me in response
Error sending request to join conversation.
Sent let me in response (approved: %@) for pending member %@
UUID: %@
[WARN] Could not find conversation with UUID %@. All conversation UUIDs: %@
Sending invitation message %@
[WARN] Could not find conversation with UUID %@. All conversations UUIDs: %@
oneToOneMode is not enabled - ignoring to send video upgrade message
Updating pending conversation with pseudonym: %@, conversation group UUID: %@
Setting screen enabled %@ with attributes %@ for conversation UUID: %@
Upgrading to Audio mode since screenEnabled is YES
Removing all pending screenEnabled blocks since screenEnabled=NO
Unable to find conversation with UUID: %@
conversationUUID: %@ remoteMembers: %@
[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@
conversationUUID: %@ otherInvitedHandles: %@
GreenTea devices are not supported to have this GFT conversation UUID: %@
Attempted to add remote members without an active voucher manager.
Signed complementary association voucher for member %@: %@
Failed to sign complementary association voucher for member %@ due to error: %@
Not adding %@ to invited member handles of link because destinationIdIsTemporary(%@), destinationIdIsPseudonym(%@), or handle is the originator of link (%@)
Not adding %@ to invited member handles of link because it is already an invited member handle of the link
Not adding any of the following members to the invited handles of the link: %@
Displaying SharePlay not supported alert with message: %@
[WARN] Not displaying SharePlay not supported alert because SharePlay features are disabled.
conversationUUID: %@ update messagesGroupName: %@
conversationUUID: %@ update group photo
ConversationManager asked to create activitySession for activitySession: %@ on conversation UUID: %@
Failed to create CPActivitySession for activitySession: %@
Not broadcasting activity session creation for static activity
conversationUUID: %@ activity: %@
[WARN] User declined authorization to create activity session for activity: %@
leave conversationUUID: %@ activitySession: %@
end conversationUUID: %@ activitySession: %@
Asked to present dismissal alert for activitySessionUUID: %@ conversationUUID: %@
SharePlayWithAirplay ff is turned off, not changing activity session airplay state
Setting using airplay: %{public}@ on activity session: %@
Setting activity authorization %d for %@
Setting auto expanse enabled %@
Received launchApplication request for UUID: %@ forceBackground: %@
Launch request for UUID: %@ is trying to activate a staged activitySession. %@
Tried to launch placeholder activity.
Failed to find conversation that has activitySession %@
Not launching application because SharePlay is not allowed
Not requesting authorization since we don't have a CPActivitySession for: %@
Failed to request authorization error: %@
Authorizing session UUID: %@
Requesting activity authorization for %@
Revoking background authorization for bundle ID for %@
[WARN] Ignoring message %@ because a participant was not specified.
[WARN] Ignoring message %@ because multiple participants were specified.
[WARN] Ignoring participant update message %@ because participant handle %@ does not match message sender %@.
Received participant update message to downgrade, but we're in a U+1 call so we should also downgrade!
Received message from %@ to associate conversation %@ with messages group
[WARN] Message did not contain a valid activitySession.
Received remove activity session message %@ from %@
Unable to decode UUID from activitySession %@
Updating activities from message: %@
Updating activity images from message: %@
[WARN] Not updating activity, couldn't find activitySession || stagedActivitySession with UUID: %@
[WARN] Not updating activity, no activity UUID was provided in message: %@
Not updating activity because handle: %@ isn't the originator of the activity: %@
No image provided in update message for activity: %@
Error while generating preview image for activity session: %@
[WARN] Not updating image for activity UUID: %@ activity session currently has different activity UUID: %@
Updating activity image for activity session with UUID: %@
Updating activity image for staged activity session: %@
Received endorsement message: %@
Received new activity for conversation %@
Not adding activity session, as not all participants are on the latest SharePlay version
Sending conversation back since new activitySession doesn't support aTV handoff. session: %@
Failed to add activitySession: %@ to conversation UUID: %@
Not posting start session event. Could not find participant for handle %@ for session %@
Ignoring guest mode message since guest mode is not currently supported
Message did not contain updated guest mode state
Received guest mode update for participant in conversation %@
Ignoring guest mode update message because the from-handle %@ did not match any active remote participants %@
conversationUUID: %@ presentationContexts: %@
conversationUUID: %@ member: %@
Kicking member %@ from conversation %@
conversationUUID: %@ additionalVideoRepresentation: %ld
[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
[WARN] Ignoring nickname update message because the from-handle %@ could not be normalized.
Received nickname update message, set nickname to "%@" from handle %@ for conversation UUID %@
Ignoring nickname update message because the from-handle %@ did not match any remote members %@
conversationUUID: %@ downlinkMuted: %d
coversationUUID: %@ participantid: %llu audioEnabled: %d
[WARN] Could not find conversation with conversationUUID %@. All conversations: %@
conversationUUID: %@ participantid: %llu videoEnabled: %d
Ignoring local member's nickname update request because their nickname "%@" is already identical
conversationUUID: %@ set local member's nickname to %@, previously %@
Asked to get latest remote attributes, returning: %@
Retrieved %lu conversation link descriptors %@
Failed to retrieve links with error %@
Received request from TU client to generate link for conversation UUID: %@
GreenTea devices cannot generate conversation links for Group FaceTime (remoteMembers > 1)
Conversation was initiated from messages, a link cannot be generated in this case. {messagesGroupUUID: %@}
Link for conversation with UUID %@ already exists.
Failed to generate link for groupUUID %@ with error %@
Fetched non-local inactive link %@
Failed to fetch inactive link, generating new links for %@
Link generation complete, returning to completionHandler for: %@
Did not set conversation link as one already existed: %@
Received request from TU client to generate link with invitedMemberHandles: %@
GreenTea devices cannot generate conversation links for Group FaceTime (invitedMemberHandles > 1)
[WARN] No invited member handles were of eligible handle types and/or had normalized values, canceling link generation
[WARN] Local user has no active handles, cannot proceed with link generation
We activated an inactive link, returning that.
Creation of converation link with groupUUID %@ invited handles %@ failed with error %@
Adding invited handles %@ to %@ failed with error %@
Not invalidating link since it's not being tracked by our link manager.
Asked to invalidate link %@
Renewing link for reason %lu
Failed to renew link %@ with error %@
Generating cache of inactive links for originator handle %@
Asked to retrieve inactive link for handle %@
Failed to fetch inactive link, generating more for handle %@
Asked to activate conversation link %@
Asked to set name "%@" for link %@
[WARN] Link name setting provided error %@
Link name successfully set for updated link %@
TU client asked to schedule a syncing of activated conversation links {initial: %@}
Sending recovery messages to local user's other devices in an attempt to recover links for pseudonyms %@
TU client asked for link sync state {includeLinks: %@}
For conversationUUID: %@, user has approved let me in for pending member: %@
[WARN] Failed to approve let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
For conversationUUID: %@, user has rejected let me in for pending member: %@
[WARN] Failed to reject let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
For conversationUUID: %@, user has requested to ignore all LMI requests.
[WARN] Failed to ignore let me in requests. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
conversationUUID: %@ messagesGroupName: %@
%ld conversationLink should be removed, not needed anymore %@
conversationLink was removed since it was not needed anymore {pseudonym: %@, success: %@, error: %@}
removeConversationWithUUID: %@
[WARN] Could not find conversation for container with UUID %@. All conversation UUIDs: %@
includeMetricsReport onConversationWithUUID: %@
[WARN] Dropping metrics report, could not find conversation with conversationUUID %@. All conversation UUIDs: %@
Requested avMode -> none, but leaving instead since this is a 1:1 or screensharing call
Requesting to disconnect call %@
Found conversation that we want to register the messagesGroupUUID on
Couldn't find conversation UUID %@ to register messagesGroupUUID on
setupPendingConversationCleanupTimer: %f %f %@
cleanupExpiredPendingConversations: %f %@
conversationChanged: %@
conversationConnectionDidStart UUID: %@
conversationInvalidated UUID: %@
conversationLink should be removed after call was invalidated %@
conversationLink finished removing after call was invalidated {success: %@, error: %@}
conversation: %@ addedActiveParticipant: %@
At least one participant in conversation %@ does not support SharePlay. Invalidating session %@
Conversation UUID %@ was continued on another device as participant %@, leaving...
Added participant %@ is a handoff continuation for identifier %llu, but my local identifier is %llu. Not leaving.
There was no participant association for added participant: %@
executing queued up screenEnabled block since local participant mode changed
For AVLess to AV upgrade of conversation UUID %@, sending an AddActivitySession message to devices lacking AVLess support: %@
conversation: %@ removedActiveParticipant: %@
conversation: %@ participant: %@
Requesting AVC blob for %@
Sending decline message for %@
conversation UUID: %@ activitySessionChanged: %@
Disabling screensharing since another session: %@ became active
Scene association changed for activity session: %@
App launch state changed to: %lu for activity session: %@ on conversation with UUID: %@
conversation: %@ activityChangedOnSession: %@
(success: %d)
Did send activity removal message successfully? %d
Not posting session ended event. Error finding participant for end session %@
conversation: %@ addedMembers: %@ triggeredLocally: %@
Found staged ActivitySession on conversation. Distributing image. %@
Found ActivitySession on conversation. Distributing image. %@
conversation: %@ triggered join.
Let me in request was sent to invalid pseudonym %@, ending pending conversation
Running callback for message %@, which has been received by the IDS daemon
[WARN] service:account:incomingData:fromID:context: Empty from ID. Dropping message.
Ignoring IDS resource; already received via conduit IDS proxy.
Received resource URL with identifier %@ from %@
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty from ID. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty data. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty CSDMessagingConversationMessage. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Got unsupported messaged type %@. Dropping message.
service:account:incomingData:fromID:context: already proxied IDS message with ID %{mask.hash}@, ignoring.
service:account:incomingData:fromID:context: receiving IDS message from %{mask.hash}@ with ID %{mask.hash}@
service:account:incomingData:fromID:context: receiving proxied IDS message from %{mask.hash}@ with ID %{mask.hash}@
service:account:incomingResourceAtURL:metadata:fromID:context: receiving proxied IDS resource from %{mask.hash}@ with ID %{mask.hash}@
received proxied group participant update
Received message with identifier %@ from %@ Attempt count %@
[WARN] service:account:incomingData:fromID:context: Empty data. Dropping message.
[WARN] Received CSDMessagingConversationMessage with Type of %@
[WARN] service:account:incomingData:fromID:context: Empty destinationID after IDSCopyRawAddressForDestination. Dropping message.
[WARN] service:account:incomingData:fromID:context: Could not create TUHandle from destinationID. Dropping message.
[WARN] Dropping let me in request or response because it was not encrypted
[WARN] Dropping let me in delegation request or response because it has the wrong intent {publicIntentAction: %@}
[WARN] Received LetMeInDelegation with Intent of {publicIntentAction: %@, messageIntent: %llu}
[WARN] service:account:incomingData:fromID:context: Empty CSDMessagingConversationMessage. Dropping message.
[WARN] service:account:incomingData:fromID:context: Could not create group UUID from string. Dropping message.
[WARN] No conversation found for groupUUID %@
Updating "fromStorage" on conversation with UUID: %@ since there are still active remote participants.
Not updating "fromStorage" on conversation with UUID: %@ since conversation.isFromStorage: %d, and context.fromServerStorage: %d
Looking for handle: %@ in existingConversation: %@
fromID found in both the remoteMembers & lightweightMembers list. Rejecting message.
Dropping message since the type %@ is not allowed for lightweightMembers
[WARN] Could not find matching handle: %@  in existingConversation.
[WARN] Will retry message again after %@ ms
[WARN] Exhausted retry attempts for message. Dropping message after %@ attempts
Message verification failed, dropping message.
[WARN] Received Invitation conversation message from server storage for conversation where that was also retrieved from server storage. Not notifying delegates of this Invitation message. {message: %@, context: %@, conversationUUID: %@}
Group participant update received
Attempted to sanitize participant update without an initialized sanitizer.
[WARN] processGroupSessionParticipantUpdate: Empty groupSessionParticipantUpdate
[WARN] processGroupSessionParticipantUpdate: Empty groupSessionParticipantUpdate.participantDestinationID
Group session participant update received: %@ participantIdentifiers: %@
Participant update from %@, type: %lu, participants: %@
[WARN] Unable to find fromHandle.
[WARN] processGroupSessionParticipantUpdate: GFT message recieved on a green tea device - dropping message
Leaving conversation that is not supported on GreenTea devices: %@
Received participant join context
processJoinUpdate: Received nil when trying to convert data to participant join context
[WARN] processUpdateMembersUpdate: Empty updateMembersUpdate.clientContextData
Received nil when trying to convert data to participant join context
[WARN] processParticipantDataUpdate: Empty participantDataUpdate.groupUUID
[WARN] processParticipantDataUpdate: Empty participantDataUpdate.participantDestinationID
[WARN] processParticipantDataUpdate: Empty participant
[WARN] Could not find conversation with groupUUID %@. All conversation UUIDs: %@
[WARN] handleParticipants:joinedConversationWithUpdate:joinContext: Empty joinContext
[WARN] handleParticipants:joinedConversationWithUpdate:joinContext: Empty participantUpdate.groupUUID
Join context: %@
members: %@
lightweightMembers: %@
addedMembers: %@
addedLightweightMembers: %@
activeLocalHandles: %@
receivedLocalMember: %@
Received local member: %@
[WARN] Dropping conversation with groupUUID %@ since it has %tu remote members which is greater than the maximum allowed of %tu.
[WARN] We received a message from %@, which was in the remote members list given in the message, but not in the existing conversation UUID: %@. Dropping message.
[WARN] We received a message from %@, which was in the remote members list but from a different device; treating as new conversation
Membership update message failed verification. Dropping fromHandle: %@
Identified let me in approval for pending conversation group UUID: %@
Pending conversation %@ found, but the groupUUID does not match (%{public}@) or the let me in request state is not Requested (%{public}@)
Determined video for new conversation should be %{public}@
Attached invitation preferences found in message: %@
No invitation preferences were set on the message
[WARN] Could not create new activity session for activity session %@ and conversation UUID %@
Ignoring message for group UUID %@
Updating provider on conversation with UUID %@ with provider %@
Activating cached conversation with UUID: %@ since participants are joining.
Updating remoteMembers for conversation with UUID: %@
Downgrading U+1 call to audio because remote party joined as audio-only (remote members count is 1, join context had video=NO, and conversation had video=YES)
[WARN] Couldn't set staged activity session %@ on conversation UUID %@
Could not find local member from activeLocalHandles: %@
Could not find local member from activeLocalHandles: %@, remoteAndLightweightMembers: %@
Received empty set for remote members
Participant with identifier: %llu left conversation with groupUUID: %@
[WARN] handleParticipantWithIdentifier:leftConversationWithGroupUUID: empty groupUUID
[WARN] Could not find conversation for group UUID %@
Active participant %@ was still listed as a pending member %@ for conversation UUID %@; did we miss an approval delegation notice?
It would have been time to add LMI approved handle %@ on conversation UUID %@ to link's invited members, but they were kicked.
Adding LMI approved handle %@ to invited member handles for link %@ after their kick timeout elapsed for conversation UUID %@
Removing handles %@ from handles awaiting link invites as we have scheduled the block to add them if not kicked
Using group session initiator as conversation initiator: %@
Picked initiator for conversation: %@
linkManager:updatedLinksFromSync: -- updating delegates {linkDescriptors.count: %d}
linkManager:removedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}
linkManager:updatedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}
linkManager:removedLinkDescriptorsFromValidityCheck: -- updating delegates {linkDescriptors.count: %d}
Membership tracker prompted response for pending member! {member: %@, conversation UUID: %@}
Membership tracker retained pending member because conversation does not yet exist {member: %@, groupUUID: %@}
No link was found; ignoring tracked pending member {member: %@, groupUUID: %@}
Membership not adding pending member! {member: %@}
Membership reported rejection {member: %@, error: %@}
Asked to send delegation message!
Asked to send delegation response message! {withResponse: %@}
LMI: Unable to send delegation message without conversation or link
Not sending delegation message because no handles were specified! {groupUUID: %@, transactionUUID: %@, pendingMember: %@}
Asked to send delegation message {handles: %@, groupUUID: %@, transactionUUID: %@, pendingMember: %@}
Error sending delegate to join conversation.
Sent delegation request!!!
Notifying delegates of received remote attributes %@ (isLocallySharing: %@)
Asking screen sharing activity manager to resume observing after invalidation
Disabling screensharing forConversationWithUUID:%@ since screen sharing session got invalidated
SharePlay allowed: %@
Screen sharing allowed: %@
Attempt to retrieve application record for bundle identifier %@ failed with error: %@
[WARN] Unable to create audio route from route dictionary: %@
Issuing request to acquire process assertion for bundle identifier: %@
Acquiring process assertion for bundle identifier %@
Acquired initial process assertion for bundle identifier %@
Failed to acquire process assertion for bundle identifier %@
Incremented count of process assertion for bundle identifier %@ to %lu
Received request to invalidate process assertion with bundle identifier: %@
Decremented count of process assertion for bundle identifier %@ to %lu
Initialized CXCallDirectoryStore for reading
Unable to initialize CXCallDirectoryStore for reading: %@
Device first unlock block invoked, attempting to initialize CXCallDirectoryStore...
Incoming call filter block called with sourceAddress: %@ providerIdentifier: %@
Blocking call with sourceAddress %@ since callDirectoryAllowsCallFromSourceAddress returned NO
Disallowing call with sourceAddress %@ since _doNotDisturbAllowsCallFromSourceAddress returned NO
DND - onEmergencyCall: %d providerIdentifier: %@
Not allowing call because DND is enabled for %@
phoneNumberVariants: %@
Error checking if call directory database contains blocking entry for source address %@: %@
Disallowing call from source address %@ since blocked by call directory
Call history changed: %@
Call connected. Marking all calls as read.
bytesOfDataUsed: %ld uniqueProxyIdentifier: %@ callHistoryIdentifier: %@
Call still exists so updating its bytes of data used: %@
No call still exists so updating bytes of data used via CHManager
Writing recent call to history: %@
Writing recent pending call to history: %@
Adding transaction object to transactionObjectsAwaitingCallHistory: %@
[WARN] Ending transaction for %@ because we timed out waiting for a call history database changed notification
Set %ld recent calls as read using matching predicate '%@'.
Deleted %ld recent calls matching predicate %@
call: %@
self: %@ wiFiAllowed: %d
self: %@ cellularDataAllowed: %d
self: %@ cellularDataPreferred: %d
self: %@ clientUUID: %@
Updated currently broadcasted activity to %@
Queueing activity at beginning of queue: %@ (timeout: %f)
Queueing activity at end of queue: %@ (timeout: %f)
Dequeueing activity: %@
This method expects a non-nil dynamic identifier, but a nil one was providied
Registered to listen for activity type %d and dynamic identifier %@ and started listening for best app suggestions, now tracking: %@
Registered to listen for activity type %d and dynamic identifier %@, now tracking: %@
Unregistered to listen for activity type %d and dynamic identifier %@, now tracking: %@
This method expects a non-nil dynamic identifier substring, but a nil one was providied
Unregistering dynamic identifiers of type %d, matching substring %@: %@
Unregistered to listen for activity type %d, now tracking: %@
Stopped listening for best app suggestions
Best app suggestion changed to %@
Firing delegate callback for stopped activity type %d (%@) and dynamicIdentifier %@
Firing delegate callback with activity type %d (%@) and dynamicIdentifier %@
Migrator is looking for legacy Announce Calls setting in %@
Migrator found legacy Announce Calls setting %@
Migrator did not find legacy Announce Calls setting in %@
Migrator is looking for legacy Conversation Link Base URL setting in %@
Migrator found legacy Conversation Link Base URL setting %@
Migrator did not find legacy Conversation Link Base URL setting in %@
Joining with participantJoinContext: %@
sending dataBlob participant: %@
Querying for capabilities of call members using native destinations: %@
Query for capabilities returned any destinations with web only endpoints: %@
%s: Conversation report = %@
requestActiveParticipants self: %@
leave self: %@
registerPluginWithOptions:%@ self: %@
restart self: %@
reconnect self: %@
member: %@
requestDataCryptorForTopic: %@ self: %@
requestEncryptionKeyForParticipants: %@ topic: %@ self: %@
addAliasesToConversationContainer: %@ salt: %@ self: %@
participantIDForAlias: %llu salt: %@ self: %@
addRequiredCapabilities: %@ requiredLackOfCapabilities: %@ self: %@
setting local participant type: %ld memberDestination: %@
setting participant type: %ld memberDestinations: %@
sessionProvider: %@ reason: %d error: %@
sessionProvider: %@ participantIDs: %@ localParticipantID: %llu error: %@
sessionProvider: %@ error: %@
sessionProvider: %@ participantType: %ld error: %@
sessionProviderDidTerminate: %@
sessionProvider: %@ activeParticipants: %@ success: %d
[WARN] Received an error for active remote participants
[WARN] Retrying requestActiveParticipants, retry_count=%lu
[WARN] Not retrying requestActiveParticipants, max retry count (%lu) reached
sessionProvider: %@ didReceiveActiveLightweightParticipants: %@ success: %d
[WARN] Retrying requestActiveLightweightParticipants, retry_count=%lu
[WARN] Not retrying requestActiveLightweightParticipants, max retry count (%lu) reached
XPC connection invalidated from client: %@ capabilities: %@
Disconnecting all calls because wantsCallDisconnectionOnInvalidation=YES for %@
Setting isSendingVideo:NO isSharingScreen:NO on call: %@ because wantsCallStopStreamingOnInvalidation=YES for %@
CarPlay screen is now %d
Received AVAudioClient secure microphone interruption
Registered for registerSecureMicrophoneEngagedHandler
Relay capabilities enabled
Relay capabilities disabled
Disconnecting relaying call because relay calling is no longer enabled: %@
Disconnecting call being relayed elsewhere because relay calling is no longer enabled: %@
Received AudioSession Interruption notification: %@
Determined that audio interruption was caused due to built in mic muted, ending all calls
Received hardware control: %@
Updating calls in response to hardware control: incomingCall %@, activeCall %@, heldCall %@
Answering incoming call: %@, %@
Answering incoming call as conversation: %@, %@
Opening URL for incoming call: %@
Encountered error while opening URL: %@ for call: %@
Disconnecting call because there wont be a UI to host the call: %@
Not opening URL %@ because outgoing call is provided by SharePlay.
Opening URL: %@ for outgoing call
Disconnecting proxy call because a video call started connecting: %@
Updating clients with call: %@
Requesting to background launch InCallService
Ignoring call update for client %@ because it's suspended
Updating client %@ with disconnected call: %@ calls: %@
Updating client %@ with calls: %@
notification: %@
Pushing all calls to device with destination %@ because an eligible audio route is not available and we found a call hosted here with its expected endpoint on another device: %@
Pulling all calls from relay client device because a an eligible audio route is available and we found a call with an endpoint elsewhere: %@
Non-ringing call found on device: %@. All calls: %@
Ignoring ringing call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d) or a vehicle route is available (%d) or call is TTY (%d) or call is conversation (%d) or shouldRelayTinCanCall (%d)
Not sending out call started connecting message because call is already disconnected: %@
Not sending out call connected message because call is already disconnected: %@
Sending voicemail call ended notification %@
Picked route %@ changed to A2DP, so muting
Picked route changed from %@ to %@, setting call's bluetooth audio format back to automatic
Received nil call from outgoingCallFromProxyCall: for dial request %@ and displayContext %@
current calls are %@
[WARN] Ignoring request to performUngroupCall because the call is not grouped
[WARN] Ignoring request to performSwapCalls because either there is no active call (%d), there is no held call (%d), or an active call exists that cannot be held (%d)
An endpointRapportMediaSystemIdentifier="%@" or endpointRapportEffectiveIdentifier="%@" is present on answer request for call with identifier %@ so attempting to pick matching route
Performing end active calls and answer ringing call %@ for answer request %@
Aborting end active calls and answer ringing call; answer request does not specify a call to answer.
Aborting end active calls and answer ringing call; could not find any ringing calls to answer.
Aborting end active calls and answer ringing call; could not find ringing call with identifier %@
Aborting end active calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting end active calls and answer ringing call; ringing call %@ does not contain a data source.
Performing end held calls and answer ringing call %@ for answer request %@
Aborting end held calls and answer ringing call; answer request does not specify a call to answer.
Aborting end held calls and answer ringing call; could not find any ringing calls to answer.
Aborting end held calls and answer ringing call; could not find ringing call with identifier %@
Aborting end held calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting end held calls and answer ringing call; ringing call %@ does not contain a data source.
Performing hold active calls and answer ringing call %@ for answer request %@
Aborting hold active calls and answer ringing call; answer request does not specify a call to answer.
Aborting hold active calls and answer ringing call; could not find any ringing calls to answer.
Aborting hold active calls and answer ringing call; could not find ringing call with identifier %@
Aborting hold active calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting hold active calls and answer ringing call; ringing call %@ does not contain a data source.
Changed sourceIdentifier of answerRequest to %@
   ... sending calls were found so adding them to list of calls to disconnect: %@
   ... and adding held calls to the list of calls to unhold: %@
   ... and not unholding held calls because there are active calls %@ or ringing calls %@
   ... no sending calls were found so adding all active calls to list of calls to disconnect: %@
   ... no sending or active calls were found so adding all held calls to list of calls to disconnect: %@
   ... and moving call %@ from call to unhold to call to disconnect because a disconnected call from the same provider doesn't support unambiguous multi-party state: %@
Handoff context did not include any handoff payload. Assuming this is for a relay call
[WARN] Ignoring request to performPushHostedCallsToDestination %@ because not all calls are hosted here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because not all calls are not hosted here and not an endpoint here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because no paired device exists
Disconnecting call with disconnected reason %d: %@
Disconnecting call normally since it was outgoing (%d) or was never connecting to relay (%d): %@
Dialed call: %@
answerRequest: %@
Attempting to answer a Walkie-Talkie call whose endpoint is not Apple Watch; aborting answer request %@ for call %@
Performing answer request %@ for call %@
[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@
Holding call with identifier: %@
Unholding call with identifier: %@
Requesting video upgrade for call with identifier: %@
Requesting to disconnect call %@ since also requesting call %@ to upgrade to video
Disconnecting call with identifier: %@
Grouping calls with identifiers %@ %@
[WARN] Asked to group call with data source %@ with another call with a different data source %@
[WARN] Could not find call for uniqueProxyIdentifier %@ (%d) or could not find call for otherUniqueProxyIdentifier %@ (%d)
Ungrouping call with identifier: %@
Swapping calls
Playing DTMF tone for call with identifier: %@ key: %d
Disconnecting current call and activating held call
Disconnecting all calls
Setting TTY type to %d for call with identifier %@
Pulling relaying calls from client
Pushing relaying calls to host with source identifier: %@
Pulling calls from client using handoff info %@
Sending MMI or USSD code for dial request: %@
Setting uplink muted (%d) for call with identifier %@
Setting downlink muted (%d) for call with identifier %@
Setting is sending video (%d) for call with identifier %@
Not updating isSendingVideo: %d since not showing in-call ui
Settings mixes voice with media (%d) for call with identifier %@
Setting sharing screen (%d) for call with identifier %@
Pusing hosted calls to destination %@
Pulling calls hosted on paired device
Sending hard pause digits for call with identifier %@
Updating call with proxy call %@
Entered foreground for call with identifier %@
Entering background for all calls
Entered background for all calls
Setting remote video presentation size to %@ for call with identifier %@
Setting remote video presentation state to %d for call with identifier %@
Setting screen share attributes to %@ for call with identifier %@
Setting screen sharing to (%d) and attributes to %@ for call with identifier %@
Setting Bluetooth audio format to %ld for call with identifier %@
Setting should suppress in-call status bar to %@
Setting should allow ringing call status indicator to %@
Processing SpringBoard request to continue user activity with identifier: %@
Initiating request to pull call for user activity %@
Lauching in-call application; pulled call with identifier %@ for user activity %@
Failed to pull call for user activity %@
Retrieving user activity with identifier %@ failed with error %@
CSDCallStateController: sendUserScoreToRTCReporting with UUID: %@ and Score: %d
CSDCallStateController: joinConversationWithRequest: %@
Setting current audio input to device with UID %@
Setting current audio output to device with UID %@
Picking local route with identifier: %@
Picking paired device with identifier %@
clientCapabilities: %@
Messaging connection ended for calls %@. Disconnecting calls that are an endpoint here but are not hosted here.
Messaging connection failed for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Messaging connection could not establish link for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Requesting initial state for client %@
uniqueProxyIdentifier %@
hasBeenUnlocked changing from %d to %d
Device has been unlocked, so invoking block immediately
Device has not been unlocked, so storing block to be performed upon first unlock
Device has not been unlocked and is not yet observing device lock changes, so beginning to observe device lock changes
Could not obtain application state from user info dictionary %@
Could not obtain bundle identifier from user info dictionary %@
[WARN] Could not obtain bundle identifier from VoIP application %@
XPC network extension connection interrupted from client %@
XPC network extension connection invalidated from client %@
XPC PushKit connection interrupted from client %@
XPC PushKit connection invalidated from client %@
Handling %@
Received request to register VoIP Network Extension for client process with bundle identifier %@
Registering VoIP Network Extension for application with bundle identifier %@
[WARN] Ignoring request to register VoIP Network Extension; could not obtain a bundle identifier from client process %@
[WARN] Aborting register request for VoIP Network Extension; entitlement was not found on client %@
for connection: %@ publicToken: %@
Requesting token for topic %@ for bundle ID %@
[WARN] No environment found for connection %@
for connection: %@ token: %@ topic: %@ identifier: %@
for connection: %@ message: %@
Received incoming APS message from application with bundle identifier %@ and topic %@
Resetting all CSDVoIPApplicationController kill counts
LSApplicationRecord had error %@ when looking up bundle identifiers, can't complete nightly VOIP topic reconciliation
We found an enabled VOIP topic for %@ that is no longer installed. Invalidating its push token
[WARN] Ran nightly VOIP reconciliation and found %d discrepencies
Ran nightly VOIP reconciliation and didn't find any discrepencies.
[WARN] No APS connection found for environment %@
Registering client process %@ with bundle identifier %@ for NetworkExtension VoIP
Aborting NetworkExtension VoIP registration; application with bundle identifier %@ does not have the required entitlement and background mode (VoIP Background Mode: %d, VoIP Network Extension Entitlement: %d)
Asked to register bundle ID %@ with APS environment %@ for VoIP type %@
[WARN] Ignoring voipRegister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d) type %d
[WARN] Ignoring %{public}@ unregister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
Registering client process %@ with bundle identifier %@ for PushKit %{public}@ in environment %@
Environment was %@ but is now %@. Flushing out old registration with previous environment
Aborting PushKit registration for app %@ for type %d because no APS connection exists for the environment (%@)
Aborting PushKit registration for application with bundle identifier %@ because it lacks the voip background mode
Requesting token for topic %@
Setting enabled topics from %@ to %@
Unregistering application %@ from PushKit %{public}@ in environment %@
Supplied environment was nil. Inferring it as %@
Disabling topic %@ and invalidating its token for connection %@
Disabling topic %@ and invalidating its token for all connections
Received incoming network extension message from application with bundle identifier %@
Application %@ will not be launched because it failed to report an incoming call too many times or repeatedly crashed. However because the app is foreground, delivering VOIP payload anyway.
Application %@ will not be launched because it failed to report an incoming call too many times (or repeatedly crashed.)
Attempting to open application %@ and acquire a process assertion
Dropping incoming message because the bundle ID failed to launch
Dropping incoming message because the bundle ID did not launch in time
Successfully opened application
Successfully took out process assertion
Dropping incoming message because the process assertion could not be acquired
Invalidating process assertion for bundle ID %@ from timeout
Killing VoIP app %@ because it failed to post an incoming call in time.
Unable to terminate %@ with error %@
[WARN] No existing VoIP application found for bundle ID %@
Aborting request application with bundle identifier %@ does not have the required background mode (VoIP Background Mode: %d)
Ignoring event for session %@, since the activity is a system group activity
Received TUConversationActivityEvent: %@
Dropping notice %@ because of invalid bundleID
Notice %@ is from a lightweightMember, trying to translate
Posting notice: %@ for event: %@
Fetching notices is a no-op
Activating conversation notice with URL: %@ and bundleID %@
Attempt to open application with bundle identifier %@ url: %@ failed with error %@
Successfully opened URL %@ for bundle: %@
[WARN] Error activating conversation notice. Could not find action url %@ or bundleID %@
Removing conversation notice is a no-op
Not creating activitySession -- bundleID not available
[WARN] Could not find conversation with conversationUUID %@
[WARN] Conversation with conversationUUID %@ is not associated with a Messages group
[WARN] No Messages group provider was registered
Device first unlock block invoked, attempting to retrieve saved providers
Loaded registered providers
Loaded registered local providers: %@
Loaded registered relay providers: %@
Updating current providers to %@
Unregistering provider because its application is no longer installed: %@
Donating user intent to call provider with identifier: %@
Releasing sandboxExtensionHandle for provider: %@
[WARN] Skipping Sandboxing URL as the passed in URL turns out to be a symbolic link: %@
Updating provider from %@ to %@
Updating relay provider from %@ to %@
Device is passcode locked (%d) or existing call has different provider (%d). Indicating activity should open in background.
Device is NOT passcode locked. Indicating activity should open in foreground.
Opening user activity %@ for bundle identifier %@ with options %@
Successfully opened user activity %@ for bundle identifier %@
Failed to open user activity %@ for bundle identifier %@: %@
Could not get LSApplicationRecord for app %{public}@ to determine intent support. Using %{public}@.
App %{public}@ supports %{public}@.
[WARN] App %{public}@ does not support %{public}@, using deprecated %{public}@ and %{public}@.
App %{public}@ does not declare support for any dialing intents. Using %{public}@ or %{public}@. Error: %@
Received %@ conversation message for %@
[WARN] Not handling received Decline message from %@ since we are already in a joined conversation with UUID: %@
[WARN] Ignoring nickname update message %@ because message doesn't have a nickname set.
[WARN] Not honoring screen sharing message
[WARN] Dropping video upgrade message, since member is not part of conversation.
[WARN] Conversation %@ is not in the correct state. Dropping message.
[WARN] No call is being tracked, dropping message for conversation: %@
[WARN] Not handling upgrade message for conversation since upgrades are currently disabled.
[WARN] Not upgrading conversation since there was no join update attached.
[WARN] Not upgrading conversation since the join update has an incorrect subtype.
[WARN] Not upgrading conversation as message is missing upgrade token.
[WARN] Not upgrading conversation as message is missing remote token.
Error while creating UUID from %@
[WARN] Did not receive protoUpgradeSessionUUID part of message %@
Current callUUID: %@, upgradeSessionUUID: %@, conversationUpgradeSessionUUID: %@, existingHandle: %@, upgradeMessageHandle: %@, participantDestination: %@, fromDestination: %@
Starting audio for conversation with conversationUUID %@
Determined that current uplink is muted - muting conversation %@
This is a U+1 invite sent by the local account from a different device, not ringing on the local device for conversation: %@
[WARN] Ignoring incoming invitation message for %@ because invitation preferences requested no-ring. conversation.invitationPreferences=%{public}@, message.tuInvitationPreferences=%{public}@
Ignoring incoming invitation message for %@ since we are already tracking this with call %@
[WARN] Ignoring incoming invitation (LMI approval) because message's group UUID %@ did not match the pending conversation's expected group UUID %@. (link: %@)
[WARN] Ignoring incoming invitation (LMI approval) because it was sent from handle %@ instead of expected approverHandle %@
[WARN] Ignoring incoming invitation (LMI approval) because message's link %@ did not match the link the user tapped (pendingConversation: %@)
LMI: Shuttling in to new conversation and stopping the pending one (moving callUUID %@ to new conversation).
Setting uplinkMuted for conversation: %@ since pendingConversation:%@ has uplinkMuted
[WARN] Ignoring responded elsewhere message since it was not sent from a valid handle.
[WARN] Ignoring responded elsewhere message since is did not come from the originator (%@) or one of our aliases: %@.
[WARN] Ignoring message that we've responded elsewhere for conversation %@ since the conversation is already joining or is joined.
Downgrading local participant since remote participant did not upgrade before the timeout: %@
Ending unanswered outgoing call for conversation with UUID: %@
Successfully sent message with identifier: %@ handle:%@ account: %@
Mode changing fromMode %lu, toMode: %lu, conversationUUID: %@
Mode changing from None, Started tracking callUUID: %@ conversationUUID: %@
Mode changing to None, Stopping tracking callUUID: %@ conversationUUID: %@
Found that a remote user had upgraded to video, upgrading our local conversation to video
conversationChanged for U+1 call with avMode=video remote participant, upgrading CXCallUpdate to video=1
Unable to report outgoing call connected; Leaving conversation since could not find call UUID for conversation: %@
Unable to report outgoing call started connecting; could not find call UUID for conversation: %@
Conversation screen sharing changed: %@ 
 participant: %@
Conversation with UUID %@ failed with context: %@
Exiting addedActiveParticipant callback early since conversation with UUID %@ has been removed - current conversations are %@
Reporting call as connecting and isConversation=true since conversation (state: %ld LMI state: %ld) with UUID %@: addedActiveParticipant %@.
Not reporting a U+1 call as connecting when active participant is added since it is going through LMI flow (state %ld and LMI state %ld) and should not connect until user presses join in the staging area; conversation UUID %@: addedActiveParticipant %@.
Ending call since U+1 conversation with UUID %@: removedActiveParticipant %@.
[WARN] Couldn't find call to end for conversation %@. Falling back to leaving conversation directly.
Ending callUUID:%@ with conversation with UUID %@:
[WARN] Could not fail conversation with reason %ld callUUID not found for conversation UUID %@
[WARN] Could not report conversation as continued as could not find call for conversation UUID %@
Returning to the Home Screen now that conversation %@ has been handed off elsewhere.
Failed to return to the Home Screen after conversation %@ was handed off elsewhere (with error: %@)
Successfully returned to the Home Screen after conversation %@ was handed off elsewhere.
Not returning to the Home Screen after conversation %@ was handed off elsewhere because call was either in PIP or backgrounded when it ended.
Joining conversation for answer call action: %@
No conversation with UUID: %@
performAction UUID:%@
[WARN] GFT calls are not allowed on GreeTea devices
LMI: This pseudonym is mine, but couldn't find the link - triggering link recovery and failing the action {pseudonym: %@}
No link was found
LMI: Could not assemble link for pseudonym %@ and publicKey %@
letMeIn: %@
Joining from links is disabled by server bag value, failing pending conversation %@
LMI: Asking CSDConversationManager to request let me in approval for pseudonym: %@
Can't use existing conversation %@ because its initiator %@ is not us, not the link creator %@, and not an invited handle to the link %@. Falling back to LMI request/response flow.
There's already an ongoing conversation %@ with the same groupUUID as the link %@, but the conversation does not have the same link %@
Even though we have the information needed to create a conversation with this link, none of our currently active handles are the link creator %@ or one of the invited handles %@. Falling back to LMI request/response flow.
[WARN] Skipping member with handle %@ because it already exists in seen handles: %@
LMI: Reporting LMI call with UUID: %@ update: %@
pseudonymsByCallUUID: %@, conversationsByUUID: %@
Removing pending conversation with pseudonym %@ and callUUID %@
Failing action: %@ since conversation: %@ did not meet conditions
[WARN] Cannot enable video because conversations do not allow video on this device
conversation is not eligible for CXSetSendingVideoCallAction since it does not support video
conversation is not eligible for CXSetSendingVideoCallAction since its relaying else where
Group conversation has presentation state %d so requesting to unpause video
[WARN] Could not find conversation for sendingVideo call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
All active participants do not have minimum supported screen sharing version
Device does not support screensharing
conversation %@ is not eligible for CXSetSharingScreenCallAction since its relaying else where
conversation %@ is not eligible for CXSetSharingScreenCallAction since its not joined yet
[WARN] Could not find conversation for screen share call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
conversation %@ is not eligible for CXEnableVideoCallAction since its not joined yet
[WARN] Could not find conversation for enableVideo call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
[WARN] Could not find conversation for set video presentation state action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
[WARN] Could not find conversation for relaying call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
checked result: %@ if CSDFaceTimeConversationProviderDelegate should handle provider: %@
Raise to ear gesture detected, answering incoming call.
[WARN] bundleIdentifer: %@ not in the foreground, failing join call action
Performing end call action %@
[WARN] Could not find conversation for end call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
checked result: %@ if CSDGFTServiceConversationProviderDelegate should handle provider: %@
Failed to start conference connection for answered call %@: %@. Disconnecting call with relay failed
Transport did not become available for answered call %@
Conference connection ended for call %@. Disconnecting call normally
Conference connection failed for call %@: %@. Disconnecting call with relay failed
Not disconnecting call because this conference transport is %@ but the call's current relay client transport is %@
Received did stop for call that is already disconnecting/disconnected
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
For received dial call message, the dial request is SOS, so disconnecting all existing calls immediately.
Dialing without relay because cannotRelayAudioOrVideoOnPairedDevice is set (%d) or an eligible route is available (%d)
Nil call returned when dialing call. Notifying client of failed dial call for %@
Dialing with relay. isTinCanProvider: %d, message.hasSourceIdentifier: %d, message.cannotRelayAudioOrVideoOnPairedDevice: %d, eligibleRouteAvailable: %d
Nil call returned when dialing call. Notifying client of failed dial call for %@ 
Failed to start conference connection for dialed call uniqueProxyIdentifier %@: %@.
Conference connection stopped (cleanly=%d) for dialed call uniqueProxyIdentifier %@: %@
[WARN] Received %@ message, but the transport didn't become available
[WARN] Received %@ message, but we already have some non-relaying calls. Sending device busy message.
Answering without relay because wantsHoldMusic is set (%d) or cannotRelayAudioOrVideoOnPairedDevice is set (%d)
[WARN] Could not find call with other uniqueProxyIdentifier %@. All current calls: %@
No other unique proxy identifiers included. Assuming legacy behavior
[WARN] Could not find another call to group with. All calls: %@
No call was specified with SendHardPauseDigits message...
...so sending hard pause digits for call %@
...and no hosted call was found with TUHardPauseDigitsStateDigitsAvailable, so not sending hard pause digits
Setting sourceIdentifier to %@ for all calls before pulling
Opening URL for handled pushRelayingCalls message from client: %@
[WARN] Could not find any audio route with source identifier %@. Ignoring push relaying calls request
[WARN] Asked to pull relaying calls from client when no calls with an endpoint elsewhere exist. All calls: %@
Pushing hosted call: %@
Conference did not start successfully when pushing call. Resetting endpointOnCurrent device to YES for %@
Socket did not become available when pushing call. Resetting endpointOnCurrent device to YES for %@
Failed to prepare conference for pushing hosted call %@
[WARN] %@
[WARN] Bad activity type: %d
Registering for %@ user activity type and dynamic identifier %@
[WARN] Asked to register for activity type %@ (%d), but that is not supported
Unregistering for %@ user activity type and dynamic identifier %@
[WARN] Asked to unregister for activity type %@ (%d), but that is not supported
Beginning advertising user activity as current: %@
Stopping advertising user activity as current, without invalidating: %@
Invalidating user activity: %@
Error creating '%@' sandbox extension directory: %@
[WARN] Not loading registered providers because current registered providers version is %ld and minimum version is %d
registeredLocalProvidersByIdentifier: %@
registeredPairedHostDeviceProvidersByIdentifier: %@
Error while querying file attributes: %@
Error creating link to source URL '%@' with filename '%@': %@
Error removing links for filenames not in array (%@): %@
Could not deserialize data to TUCallProvider instance: %@
Registered providers object was of unexpected class %@: %@
Request timed out for transaction ID: %@
[WARN] Received results for timed out transaction with ID %@
Updating session to videoEnabled=NO after creation since current device or call does not support video
Received nil AVCSession creation block
uplinkMuted: %d
audioEnabled: %d
setVideo: %d
[WARN] Switching to video is currently not supported
videoEnabled: %d
Device does not support screen sharing with camera on, also updating screenEnabled
videoPaused: %d
audioPaused: %d
presentationState: %d
presentationRect: (%f, %f, %f, %f)
[WARN] Device doesn't support setting additional video representation
setting presentationLayout: (%u)
screenEnabled is not supported - returning
screenEnabled:%d screenShareAttributes: %@
Stopped capture of %@
[WARN] Device does not support screen sharing, ignoring to set screenEnabled
Device does not support screen sharing with camera on, also updating videoEnabled
Not setting screenEnabled since oneToOneModeEnabled is YES
Queueing completion block to execute after updating oneToOneEnabled: %d
oneToOneEnabled: %d
Started capture of %@ with configuration: %@
Queueing capture completion block to execute after current capture session is stopped
screenShareAttributes: %@
relaying: %d
addParticipant: %@ videoEnabled: %d screenEnabled: %d
[WARN] Ignoring request to add participant %@ because they're already in the conversation
removeParticipant: %@
[WARN] Could not find participant %lu in the active participant list, but they're in the list of pending removals
[WARN] Could not find participant with identifier %lu all participants: %@
identifier: %llu downlinkMuted: %d
Unknown participant identifier %llu current participants: %@
identifier: %llu audioEnabled: %d
identifier: %lu audioPaused: %d
Unknown participant identifier %lu current participants: %@
identifier: %lu videoEnabled: %d
identifier: %lu screenEnabled: %d
identifier: %llu audioAndVideoMuted: %d
identifier: %lu videoQuality: %lu visibility: %lu prominence: %lu positionalInfo: <flags: %u, position: (x: %f, y: %f, z: %f, w: %f, h: %f)>
Calling stop on screen capture
error: %@
AVCSession %@ server did disconnect
addParticipant: %@ didSucceed: %d error: %@
addParticipant: %@ Active remote participants: %@
Got captions token: %lu for participant %@
Failed to add participant %@: %@
removeParticipant: %@ didSucceed: %d error: %@
Failed to remove participant %@: %@
removeParticipant: %@ Active remote participants: %@
didUpdate: %d configuration: %@ error: %@
Failed to update session with configuration %@: %@
audioEnabled: %d didSucceed: %d error: %@
Failed to set local audio enabled (%d): %@
videoEnabled: %d didSucceed: %d error: %@
Failed to set local video enabled (%d): %@
screenEnabled: %d didSucceed: %d error: %@
Failed to set local screenEnabled (%d): %@
audioPaused: %d didSucceed: %d error: %@
Failed to set local audio paused (%d): %@
videoPaused: %d didSucceed: %d error: %@
Failed to set local video paused (%d): %@
oneToOneEnabled: %d didSucceed: %d error: %@
Failed to set oneToOneEnabled (%d): %@
executing queued up block since oneToOneEnabled succeeded
mediaStateDidChange: %d forMediaType: %d didSucceed: %d error: %@
participant: %@ audioEnabled: %d didSucceed: %d error: %@
participant: %@ videoEnabled: %d didSucceed: %d error: %@
participant: %@ remoteAudioEnabledDidChange: %d
participant: %@ remoteVideoEnabledDidChange: %d
participant: %@ remoteAudioPausedDidChange: %d
participant: %@ screenEnabled: %d didSucceed: %d remoteScreenEnabled: %d
participant: %@ remoteScreenEnabledDidChange: %d participantScreenEnabled: %d
participant: %@ remoteMediaStateDidChange: %d forMediaType: %d
screenCapture: %@ didStart: %d, captureWithError: %@
screenCapture: %@ didStop: %d, captureWithError: %@
executing queued up block since capture session stop succeeded
self: %@ reason: %d
[WARN] Ignoring invitation accept since we have previously processed one.
Secondary Thumper accounts changed from %@ to %@
[WARN] Skipping device %@ because uniqueIDOverride is nil
Attempting to find primary Thumper account in accounts: %@ devices: %@ outgoingCallerIDURI: %@
Found default paired device; setting primary Thumper account to %@
Found matching outgoing caller ID %@; setting primary Thumper account to %@
No primary Thumper account found for outgoingRelayCallerID %@ but requireMatchingCallerID is NO. Arbitrarily choosing last Thumper account from list: %@
[WARN] Could not find subscription with UUID %@. All subscriptions: %@
Associated Thumper account ID changed from "%@" to "%@"
Comparing specified Thumper account ID %@ to cached associated Thumper account ID %@
Sending CommCenter a request to set associated Thumper account ID to "%@"
Received request to set capability information %@ capabilityInfo for subscription %@
Updating VoLTE capability state with %@
Updating VoWiFi capability state with %@
Updating Thumper capability state with %@
Retrieved new telephony call capabilities for subscription %@: %@
Retrieved new system capabilities for subscription %@: %@
Setting new emergency callback mode %@.
Updating Thumper account state with %@
Updated local Thumper device ID to %@
[WARN] Could not initialize Thumper account with Thumper account dictionary: %@
Updated local Thumper accounts to %@
Updated secondary Thumper accounts to %@
Found associated Thumper account ID; updated associated Thumper account ID to %@
Found matching secondary Thumper account; updated associated Thumper account ID to %@
Subscriptions changed for client: %@
Subscription cache requires an update; associated Thumper account ID changed
Subscription cache requires an update; secondary Thumper accounts changed
Determined if endpoint should be on current device: %@; hasRelaySupport: %@, anyOtherCallHasAnEndpointElsewhere: %@, relayCall.isSOS: %@
Asked to dial call %@ but the host was unavailable
Asked to dial call %@ but the session was unavailable
[WARN] Transport did not become available when dialing call %@
Setting endpoint elsewhere for call because it can't be answered with audio or video relay: %@
Transport did not become available when answering call %@
Transport did not become available when pulling call. Resetting endpointOnCurrent device to NO for %@
Opening URL for handled pushHostedCalls message from host: %@
Disconnecting call with conference failed disconnected reason: %@
Not disconnecting call for failed conference start because it is not an endpoint here: %@
Not disconnecting call for conference didStop because it is not an endpoint here: %@
Adding %@ as an alias on account %@
Failed to add alias %@ to account %@. Validation status: %ld, validation error reason: %ld, vetted aliases: %@
Updating display name to %@ on account %@
Received IMDaemon connected notification: %@
Received preferred account changed notification: %@
Received display name changed notification: %@
Loaded last known FaceTime caller ID as %@
[WARN] Could not find lastKnownFaceTimeCallerID in keychain, error: %@
Querying Preferences to see if it exists
Found lastKnownFaceTimeCallerID: %@ in Preferences
[WARN] lastKnownFaceTimeCallerID not found in Preferences either
Removing callerID Preferences value
Saving last known FaceTime caller ID as %@
Error while saving _callerID %@
FaceTime caller ID changed from %@ to %@
Deferring FaceTime caller ID refresh until connected to IMDaemon
%@ account %@ aliases changed %@
Failed to get active contexts from client %@: %@
Error getting emergency callback mode (domain=%d, code=%d)
Failed to get Thumper device info: %@
Failed to get call capabilities: %@
Failed to get capability info for subscription %@: %@
Failed to get system capabilities for subscription %@: %@
Calling -[CoreTelephonyClient context:setCapability:enabled:with:completion:] with capability: %@ enabled: %d info: %@
Failed to set enabled=%d for capability %@ with info %@: %@
Calling -[CoreTelephonyClient context:addPhoneServicesDevice:withCompletion:] with idsDeviceIdentifier: %@
Failed to add secondary Thumper device with IDS device identifier %@: %@
Calling -[CoreTelephonyClient context:removePhoneServicesDevice:withCompletion:] with idsDeviceIdentifier: %@
Failed to remove secondary Thumper device with IDS device identifier %@: %@
Calling -[CoreTelephonyClient context:recheckPhoneServicesAccountStatus:] with capability: %@
Calling _CTServerConnectionEnableEmergencyCallBackMode() with %@
Calling _CTServerConnectionSetCapabilityExtended() with capability: %@ value: %d capabilityInformation: %@
Error setting capability for %@ calling (domain=%d, code=%d)
Error getting system capabilities (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAddDevice() with capability: %@ idsDeviceIdentifier: %@
Error adding device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesRemoveDevice() with capability: %@ idsDeviceIdentifier: %@
Error removing device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAccountStatusChanged() and _CTServerConnectionSendBarrier() with capability: %@
Retrieved mobile country code %@ and mobile network code %@ for subscription %@
Failed to get mobile network code for subscription %@: %@
Failed to get mobile country code for subscription %@: %@
Could not find a subscription matching the specified UUID %@
Error getting ISO country code (domain=%d, code=%d)
Retrieved ISO country code %@ for mobile country code %@ and mobile network code %@
Received delegate callback callCapabilitiesChanged: with context: %@ info: %@
Received context:capabilitiesChanged: with context: %@ info: %@
%@ is handling phoneServicesCapabilitiesChanged: with userInfo %@
Received kCTEmergencyCallBackModeStatusNotification with userInfo %@
Not allowing creation since activitySession doesn't support aTV handoff. session: %@
Attempted to decode association voucher for handle (%@) that is either both or neither of the primary (%@) and associated (%@) handles.
Call status changed for call: %@
for call: %@
for message: %@
transactionGroup: %@
with action: %@ for call %@
route: %@
reporter: %@
createConversationReportingSession using conversation: %@
chat=%@
groupActivitiesReports received for conversation %@
blob recovery started for conversation %@
blob recovery timed out for conversation %@
message retry started for conversation %@
message retry failed for conversation %@
message retry succeeded for conversation %@
avc blob request message retry started for conversation %@
avc blob request message retry failed for conversation %@
avc blob request message retry succeeded for conversation %@
VoIP app %@ failed to post incoming call
VoIP app %@ no longer eligible to launch
VoIP push for app %@ dropped on the floor
receivedLetMeInRequestForConversation: %@
sentLetMeInRequestForConversation: %@ isApproved: %d
Send User Score to RTCReporting with UUID:%@ and Score:%d
Send activity session ended with startDate %@ endDate%@ session %@
Reporting %@
%@ reported blocked call with UUID %@
%@ reported known call with UUID %@
%@ is handling %@.
%@ initialized for service %@ with the following devices: %@
Determining country code using account info %@
Asking IDS to generated a pseudonym for unprefixedURI: %@ and properties: %@
[WARN] IDS failed to retrieve pseudonym with error %@
No IDSPseudonym matching string %@ was found. All pseudonym URIs: %@
Asking IDS to revoke pseudonym: %@
Asking IDS to renew pseudonym: %@
%@: Active accounts changed
%@: Devices changed
%@: Nearby devices changed
%@: Told that a pseudonym was added to our account.
%@ updated state: defaultPairedDeviceExists=%d, pairedDeviceExists=%d, telephonyCapableDeviceExists=%d, relayCapableDeviceExists=%d, availableOutgoingRelayCallerIDs=%@ deviceNames="%@"
[WARN] Could not find session for identifier %@ to perform block on transport availability for. Dropping this block on the floor
No devices found that support call provider %@. Not creating a session.
Creating session to devices: %@
[WARN] destination for device returned a nil value, so we are going to skip creating a session to it: %@
Creating session to destinations: %@
Would have created a session to an empty destination set. Returning a nil session
Destroying session %@
Asked to prepare session to end for identifier %@
Asked to prepare connected sessions to end
Accepting session for identifier %@
Canceling/declining session for identifier %@
Asked to end ending sessions
sendMessageAndStartSessionIfNecessary for service %@ and message type %@: %@
Not starting a new session for identifier %@ because an active session for the identifier already exists: %@
No session exists. Starting a new one by inviting all devices that support provider %@
A session exists with a destination/device that supports provider %@: %@
We'll send this message via the existing session
Starting another session to the device
Starting another session to the destination
[WARN] A session exists, but it's with a device that doesn't support provider %@. Not starting a new session
Did not create session
sendMessageAndStartSessionIfNecessary for message type %@: %@
No IDSSession exists. Starting a new one by inviting to destination %@
[WARN] No IDSSession exists, and given device is nil. We can't start this session
A session exists: %@
Sending the message through the existing session
Starting a new session to the destination of the device with an active session
[WARN] Cannot start a new session, no valid destination
sendMessage:andAcceptInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session for identifier is %@
A current session already exists: %@
Sending the message through the current session
Sending the message through the current session and declining this one %@
No current session already exists, so sending the message through this session %@
Could not determine session to accept for identifier %@ and message %@. All sessions: %@
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session has multiple identifiers: %@. Removing identifier %@ and not canceling/declining
_sendMessage:andCancelInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
_sendMessage:andDeclineInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
for message type: %@ identifier: %@ destinations: %@ waitUntilConnected: %d
identifier: %@ message: %@
sendMessage through session %@ for message type %@ to destinations %@: %@
sendMessage through session %@ for message type %@: %@
Not sending message because protocolVersionCustomizationBlock's preventMessageSend was set to YES for message type %@: %@
No session available to send message type %@: %@
Invite received for session %@ from (fromID=%@) destination %@ device %@ with message %@ (timestamp: %f)
... and it's from the same destination that we have an active session with (%d) or it's from the same device that we have an active session with (%d) or we don't have a session (%d)
... so we are going to handle the session's message
... but we were told to ignore the invite
... but there was no accompanying message so just ignoring the invite
... but it is from a different device than the one that we have an active session with
... and we were told to decline the invite
... and we were NOT told to decline the invite, so just ignoring it
Session ended with reason %d
Notifying delegate of connection end
[WARN] Notifying delegate of connection failure
[WARN] Notifying delegate that connection could not establish link
Not notifying delegate of messenger connection end because a different active session with the same identifier exists: %@
Received invitation accept with no data payload.
Received invitation cancel with no data payload. Assuming the invitation was answered elsewhere
Received invitation decline with no data payload. Assuming invitation was accepted by sending a message through another session
videoStreamToken: %ld
Moments XPC connection interrupted from client %@
Moments XPC connection invalidated from client %@
handle disconnect for client: %@
mediaType: %d, token: %ld localVideoRecordingEnabled: %d
Successfully started AVCMomentsRequest: %@, transactionID %@
Failed to start AVCMomentsRequest: %@, error: %@
transactionID: %@
Successfully ended request %@
Failed to end request %@: %@
Registering stream token %ld, requesterID %@ and remoteIDSDestinations %@ with new moments object
Registered new moments object %@ with supported media types: %@
unexpected supportedMediaTypes: %@, moments: %@, streamToken: %ld
[WARN] FaceTime Photos availability is %d but remoteIDSDestination is nil so changing availability to Unavailabile
FaceTime Photos is not available. Availability is %d
updating remoteIDSDestinations and returning registered session: %@ for streamToken: %ld
Asked to unregister stream token: %ld
didFinish request: %@, error: %@
new capabilities: %u
didStartProcessing request: %@
Received moments didStartProcessingRequest but moments is disabled by server bag or default
Failed to start processing request: %@
didEndProcessing request: %@, stillImageURL: %@ movieURL: %@
Ignoring processing end of request because moments is disabled by server bag or default
Failed to find session for moments stream token: %ldl
failed to find remoteIDSDestination from request: %@ in session remoteIDSDestinations: %@
Did not receive both parts of Live Photo for request: %@
Media files for Live Photo do not have the correct path extensions. stillImageURL: %@ movieURL: %@
Received an error staging the still photo: %@
Did not receive movie URL for request: %@
Received an invalid request transaction ID: %@
Received an error creating the temporary directory: %@
Received an error staging the movie file: %@
moment server disconnected: %@
url: %@ metadata: %@ isZipped: %d fromIDSDestination: %@
session: %@ request: %@ remoteIDSDestination: %@
Unzipped resource to URL: %@
Failed to unzip file at URL %@
Received non-zipped resource at %@
Received moments resource from IDS destination %@ but expected %@
Could not convert remote IDS destination %@ (token=%@) and/or from IDS destination %@ (token=%@) to token data
Received moments resource with unknown transaction ID %@. All sessions: %@
Received moments resource with missing transaction ID in metadata: %@
Received moments resource but moments is disabled by server bag or default
file url: %@ was not sent successfully
Preserving file at URL: %@
Could not retrieve contents of dictionary at URL %@: %@
Unregistering stream token: %ld
Cleaning up state for moment: %@
Delaying cleanup because moment is still registered (%d) or has outstanding requests (%lu)
url: %@ session: %@ request: %@
url: %@
Could not determine both photo URL and video URL from contents of directory: %@
Resources directory URL %@ does not exist
_handleReceivedVideoURL: %@
saving live photo with photo url: %@ video url: %@
Error saving resources with photo url: %@ video url: %@
Saving video with url: %@
Error saving resources with video url: %@
[WARN] Timeout reached for active request for transaction ID %@
momentDescriptor: %@
Initializing AVConference with client UUID %@
[WARN] Error calling getIsSendingAudio: %@
[WARN] Error calling setSendingAudio: %@
[WARN] Error calling getIsAudioPaused: %@
Setting pause audio to %d for %@
[WARN] Error calling setPauseAudio: %@
[WARN] Error calling getIsVideoPaused: %@
Setting pause video to %d for %@
[WARN] Error calling setPauseVideo: %@
Setting conference visual rectangle of size %@ for %@
Setting conference state %@ for %@
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@ for %@
Setting peer reporting identifer %@ and session identifier %@ for %@
Failed to initialize a new call with device role %d. Got callID=%ld
Starting AVConference connection with isCaller=%d callID=%ld remoteInviteDictionary=%@ capabilities=%@ destination=%@
Starting AVConference connection with isCaller=%d callID=%ld capabilities=%@ socket=%d
Stopping AVConference with callID=%ld
Canceling AVConference with callID=%ld
conference=%@ didStartSession=%d userInfo=%@
callID=%ld error=%@
callID=%ld error=%@ callMetadata=%@
callID=%ld
screenAttributes=%@ callID=%ld
videoAttributes=%@ callID=%ld
callID=%ld didPauseAudio=%d error=%@
didPause=%d callID=%ld
callID=%ld didPauseVideo=%d error=%@
[WARN] callID=%ld isStalled=%d
AVConference server died
callID=%ld parameters=%@
callID=%ld isDegraded=%d isRemoteVideo=%d
[WARN] callID=%ld isNetworkBad=%d
callID=%ld didReceiveData=%@
Ignoring to add %@ call since it is TinCan (%d) or PTT Barge Call (%d).
[WARN] Ending mutually exclusive call with uPI %@ because we have a newer incoming call that can not co-exist with it.
_endMutuallyExclusiveCalls: update=%@
Found multiple existing mutually exclusive calls.  Ending call %@
Ignoring mutually exclusive update
_endMutuallyExclusiveCalls: mutuallyExclusiveCall=%@, error=%@
Start call action fulfilled: %@
Start call action failed: %@
Join call action fulfilled: %@
Join call action failed: %@
Answer call action fulfilled: %@
Answer call action failed: %@
End call action fulfilled: %@
End call action failed: %@
Set held call action fulfilled: %@
[WARN] Set held call action failed but reverting state is allowed: %@
Set held call action failed and reverting state is not allowed: %@
Set group call action fulfilled: %@
Could not find call to group with for set group call action: %@. All call: %@
[WARN] Set group call action failed but reverting state is allowed: %@
Play DTMF call action fulfilled: %@
Play DTMF call action failed: %@
Set sending video call action fulfilled: %@
Set sending video call action failed: %@
Set muted call action fulfilled: %@
Set muted call action failed: %@
Set tty call action fulfilled: %@
Set tty call action failed: %@
Set relaying call action failed: %@
[WARN] Set relaying call action failed: %@
Action fulfilled: %@
Action failed: %@
[WARN] Not allowing requested %@ because user intent could not be validated for call source with identifier: %@
[WARN] Not allowing requested start call action because a call with same UUID already exists callWithUUID: %@, relayCallWithUUID: %@
[WARN] Not allowing requested start call action because call source %@ is at the maximum call group count of %lu: %@
[WARN] Not allowing requested action because no call was found to group with for action %@ and call source %@. All calls: %@
[WARN] Not allowing requested answer call action because a relay call with same UUID already exists: %@
[WARN] Not allowing requested action because no call was found for call UUID %@ and call source %@. All calls: %@
[WARN] Not allowing requested action because action is not allowed to be requested: %@
[WARN] Not allowing requested transaction because it is empty: %@
Allowing requested transaction: %@
[WARN] Not allowing requested transaction: %@
Dialing new call due to requested start call action: %@
Adding supplemental set held call action for existing call %@
Could not serialize handoffActivityUserInfo into a CXHandoffContext: %@
[WARN] Could not determine call source for dial request: %@. All call sources: %@
Asked to perform action %@ for call %@
Sending %@ for existing call with uniqueProxyIdentifierUUID=%@ callGroupsAllowsHold=%d supportsHolding=%d
Asked to perform start call action %@ for call %@
Call source %@ registered with configuration %@
Error while determining process action for callSource: %@, action: %@
Received add incoming call request from call source %@ with UUID %@ update %@
Query result: %@ for handle: %@ callSource: %@
[WARN] Returning error for add incoming call request because it was on the block list
[WARN] Blocking call because we are screen sharing and don't want to let that notification come through
[WARN] Returning error for add incoming call request because call did not pass DND filter. CarMode (%d) BT Audio Route (%d), CarPlay (%d)
[WARN] Returning error for add incoming call request because it is a direct call to a secondary device and relay calling is preferred over direct calling
[WARN] Update requires additional authentication before it can be answered
[WARN] There is an error: %@, but we are still asked to report call to clients
[WARN] Ignoring add incoming call request because a call already exists with the same UUID: existingCall: %@, relayCallWithUUID: %@
Call source %@ updated call with UUID %@ with update %@
[WARN] Sending %@ for existing call with uniqueProxyIdentifierUUID=%@ since it cannot co-exist with ongoing calls.
[WARN] No call found for call source %@ and UUID %@. All calls: %@
Call source %@ ended call with UUID %@ with ended at date %@ with reason %ld failure context %@
[WARN] Deferring acknowledgement of VoIP call with UUID %@ ended until minimum ring duration has passed
Setting callGroupUUID to nil for orphaned grouped call %@
[WARN] Call %@ already has a date ended
Call source %@ sent invitation for outgoing call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date started outgoing
[WARN] Call with UUID %@ is not outgoing
Call source %@ started connecting call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date started connecting
Call source %@ connected outgoing call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date connected
[WARN] Call with %@ is not outgoing
Call source %@ finished audio for call with UUID %@
Found call %@ for UUID %@, so setting hasAudioFinished
Did not find a call for UUID %@, so expediting deferred end interruption instead
Call source %@ received call with UUID: %@ crossDeviceIdentifier %@ bytesOfDataUsed %ld
Call source %@ received requested transaction %@
Call source manager %@ completed transaction group %@
Pull call action fulfilled: %@
Pull call action failed: %@
Could not find pulled call context for completed pull call action %@. All contexts: %@
Call action completed for call: %@
[WARN] Could not find call for completed call action: %@. All calls: %@
Action completed: %@
Call sources changed: %@
Ending call %@ since its backing call source %@ is no longer connected
Call controller host %@ requested transaction %@ for connection with identifier: %@
Using call source %@ for requested transaction %@
[WARN] Not allowing requested transaction because no call source was found. All call sources: %@
Marking all calls as changed because providers changed
machServiceName: %@ newConnection: %@
Accepting XPC client for %@: %@
Rejecting client for %@ because it lacks the %@ capability: %@
Started tracking call: %@
Stopped tracking call: %@
Asked to answer call %@ while disconnecting calls %@ and holding calls %@
Asked to hold calls %@ while unholding calls %@
Asked to group calls %@ with calls %@
Asked to ungroup call %@ from other calls in group %@
Asked to disconnect call %@ while ungrouping call %@
Asked to disconnect all calls %@
Asked to disconnect calls %@ while holding calls %@ and unholding calls %@ and ungrouping calls %@
Asked to set TTY type to %d for calls %@
Asked to set uplink muted to %d for calls %@
handleCallStatusChanged %@
bytesOfDataUsed: %ld callHistoryIdentifier: %@
[WARN] Invalid TUHandle generated from CXLabelHandle %@
[WARN] Invalid TULabeledHandle generated from CXLabelHandle %@
[WARN] Invalid TUSenderIdentity generated from CXSenderIdentity %@
Setting enableCriticalReliability %@
%@ should not handle conversation: %@
Conversation manager reported a new incoming conversation %@ from handle %@
Ignoring new conversation %@ since we are already tracking this with call %@
Skipping to report a new call since we already have a call with UUID: %@ for conversationUUID: %@
Conversation is not call eligible; will not report incoming call for conversation with UUID %@
Not reporting call since validNetworkReachable is false
Incoming invite is from an avMode=video participant, upgrading CXCallUpdate to video=1
Ending ringing call for conversation with UUID: %@
Could not report new multiway call from %@: %@
Also going to fulfill start call actions: %@ since we are exclusively managing this call
endCallWithUUIDAsAnsweredElsewhere: %@
endCallWithUUIDAsDeclinedElsewhere: %@
endCallWithUUIDAsLocalHangup: %@
Reporting call failure for conversation with conversationUUID %@ and callUUID %@
Found an extra conversation that needs to be cleaned up: %@
[WARN] Asked to clean up conversation from our list but could not find it in conversation manager list: %@ callUUID: %@
Not leaving conversation but stopped tracking callUUID: %@ for conversationUUID: %@
Invitation preferences were set on the action, using those for the join context: %@
Invitation preferences weren't set on the action but existed on the conversation, using those for the join context: %@
Setting uplinkMuted for action: %@ conversation: %@
Asked to hold relay calls %@ while unholding relay calls %@
Asked to answer relay call %@ while disconnecting active relay calls %@
[WARN] Ignoring request to answer call because canBeAnswered is NO: %@
Asked to answer relay call %@ while disconnecting held relay calls %@ and holding relay calls %@
Asked to answer relay call %@ while holding relay calls %@
Asked to group relay calls %@ with relay calls %@
Asked to ungroup relay call %@ from other relay calls in group %@
Asked to disconnect relay call %@ while ungrouping relay call %@
Asked to disconnect relay calls %@
Asked to disconnect relay calls %@ while holding relay calls %@ and unholding relay calls %@ and ungrouping calls %@
Received notification: %@
softlink:r:path:/System/Library/Frameworks/Intents.framework/Intents
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
ySo22UNNotificationCategoryCG
ySSG
ySo34TUConversationInvitationPreferenceCG
ySo8TUHandleCG
ySo20TUConversationMemberCG
So8NSStringC
_A7At
_A63At
So7NSErrorC
$ss21_ObjectiveCBridgeableP
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
$s13callservicesd22CompanionLinkMessengerP
$s13callservicesd13CompanionLinkP
_pSg
$s13callservicesd25AudioInterruptionProviderP
14DescriptorType
Sgyc
$s13callservicesd33AudioInterruptionPriorityProviderP
$s13callservicesd18DescriptorProviderP
x2id_t
$s13callservicesd18DescriptorResolverP
ySS_SbtG
ySSSbG
So30CSDAbstractIDSProviderDelegateC
SbSo17CXStartCallActionC_
ShySSGSo17CXStartCallActionC_
So22TUContactsDataProviderCtc
So25CSDIDSDualSessionProvider_p
_ShySSGSDySSypGSo17OS_dispatch_queueCtc
So10CSDIDSChat_pSo25CSDExternalIDSDualSessionC_
So17CXStartCallActionCS2btc
So22TUContactsDataProviderC
So17OS_dispatch_queueC
So19CXInProcessProviderC
So25CSDExternalIDSDualSessionCSo8TUHandleCSbSo12NSDictionaryCSo10CSDIDSChat_pIeyByyyya_
So25CSDExternalIDSDualSessionCSo8TUHandleCSbSDySS
GSo10CSDIDSChat_pIegggygo_
So10CSDIDSChat_p
SaySo10CSDIDSChat_pG
ySS_yptG
ShySSG
SDySSypG
So17CXStartCallActionC
ypSg
So8NSObjectC
ySS_SSGSg
ySS_SSG
ySSG
$s13callservicesd30ConversationPersistenceStorageP
$s13callservicesd37EmergencyCallbackCapabilitiesProtocolP
yycSg
yyXlGSgGc
ySi_So17OS_dispatch_queueC
So21CSDCallCenterObserver_p
SgXw
IeyB_
So16IMPowerAssertionCSg
So21CSDCallCenterObserver_pSg
So17TURouteControllerCSg
SgXw
$s13callservicesd40AudioInterruptionProviderFactoryProtocolP
37AVAudioClientInterruptionProviderType
38AVAudioSessionInterruptionProviderType
So14IDSDestinationC
$s13callservicesd32ChangeTrackingDescriptorResolverP
So23FBSDisplayLayoutMonitorC
$s13callservicesd26CallCenterObserverProtocolP
$s13callservicesd26CallCenterObserverDelegateP
So16CSDCallContainer_pyc
So20NSNotificationCenterC
So29CSDCallCenterObserverDelegate_pSgXw
ySo7CSDCallC_
tcSg
So7CSDCallC
IeyByy_
So21TUConversationManagerC
So16FTNetworkSupportC
So34CSDConversationInvitationResolving_p
So14TUFeatureFlagsC
So24UNUserNotificationCenterC
SSSo14TUConversationCc
SSSo8TUHandleCc
SSSo8TUHandleC_So14TUConversationCtc
ShySo22UNNotificationCategoryCG
ySo21UNNotificationRequestCcSg
ySS_So21UNNotificationContentCtcSg
ySScSg
ySSG
ySo20TUConversationMemberC_G
SaySSG
Sg_ABt
So14TUConversationCSg
So18TUConversationLinkCSg
SgXw
SgXwz_Xx
So21UNNotificationRequestC
So13AVAudioPlayerCG
10descriptor_t
SgSo7CSDCallC_
So7CSDCallC
SgIeggyr_
So21CSDFaceTimeIDSServiceC
$s13callservicesd24UserNotificationProviderP
$s13callservicesd24UserNotificationResponseP
So21OS_dispatch_semaphoreCSg
SSSg
ySDySSypGG
SaySDySSypGG
So14AVAudioSessionC
So14AVAudioSessionCSg
$s13callservicesd23ProcessObserverProtocolP
SDySSSDy
So26BKSApplicationStateMonitorC
tcSg
ySS_
tcSg
_SitG
SiGIegg_
SgXw
So12NSDictionaryCIeyBy_
So8NSStringC
IeyByyy_
IeyByy_
$s13callservicesd19NSNumberConvertibleP
SDySSSDyS2SGG
ySS_SDyS2SGtG
ySS_SStG
SDyS2SG
$s13callservicesd28IDSDeviceDestinationResolverP
Sbyc
So9IDSDeviceCSgSSc
So15CSDIDSTransportCSg
G0R0_
$s13callservicesd24DirtyCallManagerProtocolP
ySo7CSDCallCcSg
SaySo7CSDCallCG
ShySo7CSDCallCG
So7CSDCallCIeyBy_
$s13callservicesd33PendingMembershipTrackerServerBagP
$s13callservicesd32PendingMembershipTrackerDelegateP
$s13callservicesd33PendingMembershipTrackerMessengerP
$s13callservicesd31PendingMembershipTrackerStorageP
So36CSDPendingMembershipTrackerMessenger_pSgXw
So35CSDPendingMembershipTrackerDelegate_pSgXw
SDySS
So20TUConversationMemberC
3key_SDySS
G5valuetSg
3key_SDySS
G5valuet
ShySo8TUHandleCG
ySo26CSDConversationParticipantC_G
SaySo20TUConversationMemberCG
SaySo20TUConversationMemberCGG
ShySo8TUHandleCG18delegatedToMembers_
11responseKeyt
So8TUHandleC6sender_t
SaySo8NSNumberCG
So8NSObjectCSg
So8TUHandleCSg
_SDy
ypGSSSo17IDSMessageContextCt
ySo7TURouteCG
yyXlG
_ypt
ySo11NSPredicateCG
ySo20UNNotificationActionCG
ySSSo8NSObjectCG
ySSSo8NSStringCG
yS2SG
ySo8TUHandleCG
ySo24UNNotificationAttachmentCG
_Sb9available_Si5counttt
Sb9available_Si5counttG
ShySo22UNNotificationCategoryCGG
ySo12CHRecentCallCG
ySo15CNKeyDescriptor_pG
ySo20TUConversationMemberCG
SaySo11IDSEndpointCG
ySaySo11IDSEndpointCGG
ySo11IDSEndpointCG
ySo9IDSDeviceCG
ySo28TUConversationLinkDescriptorCG
ySo47CSDMessagingConversationLinkGeneratorDescriptorCG
So7CSDCallCSg
ySo7CSDCallCSgG
ySo12TUAudioRouteCG
ySo30CSDMessagingConversationMemberCG
ySo26CSDConversationParticipantCG
ySo21RPCompanionLinkDeviceCG
ySSSaySo9CNContactCGG
ySb_
_pSgtc
yySb_
_pSgtcG
ySo18TUConversationLinkCG
SgSo7CSDCallC_
So13AVAudioPlayerCG
ySo7CSDCallCG
_yptG
ySSSDyS2SGG
ySS_SSGt
ySS_SSGG
SgXw
_ypt
ySSSo9CNContactCG
ySo8NSStringCG
ySDy
ypG5event_ADSg7optionst
_pGG
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGG
ySSypG
SS_ypt
_So23TUScreenShareAttributes_pt
So23TUScreenShareAttributes_pG
_Shy
ySo8NSNumberCG
ySSSaySo8NSNumberCGG
yypG
ySo25TUConversationParticipantCG
GSpySo8NSObjectCSgGSgSpyypGSgytIeglllr_
ShySo21RPCompanionLinkClientCG
So21RPCompanionLinkDeviceC
ySo21RPCompanionLinkDeviceC
_pGIegg_
SgXw
SgXwz_Xx
So21RPCompanionLinkClientC
_pGIegg_
_yptG
ySiG
SaySiG
So7CSDCallC
So12TUCallCenterC
SDySSypGSg
So6TUCallCSg
ySo8TUHandleC_G
So14NSUserDefaultsC
ypGSg
So12NSDictionaryC
$ss12IdentifiableP
So22CSDCallStateControllerCSgXw
SaySo17CSDCallDataSourceCG
So19CSDDirtyCallManager_p
SgXw
$s13callservicesd24LocalAudioSystemProviderP
SS3key_yp5valuetSg
ySSSDy
ySSyXlG
ySDy
ypG5event_ACSg7optionst
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pG
ySSSiG
ySSSaySo28TUConversationLinkDescriptorCGG
ySSSay
ySSSo7TURouteCG
ySSSo21RPCompanionLinkDeviceCG
So12RTCReportingCG
So14OS_nw_activity_pG
So20TUConversationReportCG
So14OS_nw_activity_p
SDySS
SDySS
ySo8NSNumberCSSG
So23TUScreenShareAttributes_p
_AAt
38AVAudioSessionInterruptionProviderType
37AVAudioClientInterruptionProviderType
yq_q0_q1_G
Sdyc
GSgXw
_pSg
$s13callservicesd21RingtoneProviderAlertP
$s13callservicesd24RingtoneProviderProtocolP
So14CNContactStoreC
_pSg
So21OS_dispatch_semaphoreC
_pSgSo20TLAlertConfigurationCc
So15CNKeyDescriptor_p
$s13callservicesd13RouteProviderP
$s13callservicesd25DeselectableRouteProviderP
$s13callservicesd029PairedHostDeviceRouteTrackingE8ProviderP
$s13callservicesd31ConversationLinkManagerDelegateP
So13CSDIDSServiceC
So24CSDConversationServerBag_p
So38TUConversationLinkDescriptorDataSource_p
So34CSDConversationLinkManagerDelegate_pSg
SaySo28TUConversationLinkDescriptorCG
So12IDSPseudonymC
So28TUConversationLinkDescriptorC
_pSgIegyg_Sg
So35TUMutableConversationLinkDescriptorC
SnySiG
ySnySiGG
ShySo8TUHandleCGSg
So18TUConversationLinkCSg
_pSgIeggg_
So8TUHandleC
So28TUConversationLinkDescriptorCSg
_pSgIeggg_
_pSgIegyng_Sg
So18TUConversationLinkC
ySaySo28TUConversationLinkDescriptorCGG
ySaySo28TUConversationLinkDescriptorCGGSSG
SSSo11NSPredicateCIegnr_
ShySo18TUConversationLinkCGSg
_pSgIeggg_
SaySo18TUConversationLinkCGSg
_pSgIeggg_
So31CSDMessagingConversationMessageCSgSo6NSDataCSgSo7NSErrorCSgIeyByyy_
So31CSDMessagingConversationMessageCSg
_pSgIegggg_
So40CSDMessagingEncryptedConversationMessageC
_A13At
So18TUConversationLinkCSg
_pSgIeggg_Sg
So18TUConversationLinkCSgSo7NSErrorCSgIeyByy_
So6NSDateCSgSo7NSErrorCSgIeyByyy_
So7NSErrorCSgIeyByy_
So28TUConversationLinkDescriptorCSgSo7NSErrorCSgIeyByy_
So5NSSetCSgSo7NSErrorCSgIeyByy_
So7NSArrayCSgSo7NSErrorCSgIeyByy_
SgXw
$s13callservicesd14VoucherManagerP
So20TUVouchingEnablement_p
So13CSDIDSService_p
So14IDSPushHandlerC
SayySb_
_pSgtcG
_pSgIegyg_
So9TUVoucherC
_pSgIegyg_Sgz_Xx
So9TUVoucherCSgSo7NSErrorCSgIeyByy_
_pSgIeggg_Sg
So9TUVoucherCSg
_pSgIeggg_
_pSgIeggg_Sgz_Xx
SDySSSay
So12RTCReportingCG
So20TUConversationReportCG
So14OS_nw_activity_pG
SDySS
So19CSDAppleIDUtilitiesC
So12RTCReportingCSg
So14TUConversationC
So10CSDIDSChatC
SaySo6TUCallCG
So7TURouteC
So22CSDReportingControllerC
So23RTCSecureHierarchyTokenC
$s13callservicesd15RTCReporterInfoP
SiSg
SdSg
SbSg
$s13callservicesd37ScreenSharingActivityManagerProvidingP
$s13callservicesd36ScreenSharingActivityManagerDelegateP
So39CSDScreenSharingActivityManagerDelegate_pSgXw
So23TUScreenShareAttributes_pG
3key_
G5valuetSg
3key_
G5valuet
_GSg
SgXw
_G_G
SgXwz_Xx
Ieggn_
SDySS
SDySS
$ss12CaseIterableP
ySi_
SS3key_
5valuetSg
SS3key_
5valuet
Sg_ABt
Sg_ABt
_AAt
SS3key_
5valuetSg
SS3key_
5valuet
SS3key_
5valuetSg
SS3key_
5valuet
SDySSSbG
SDySS
$s13callservicesd19UserIntentValidatorP
z_Xx
_pXp
$s13callservicesd21CallHistoryDataSourceP
$s13callservicesd10RecentCallP
So24CHCallInteractionManagerC
So21TUCallProviderManagerC
_pcSg
So18TUConversationLinkCSg
SgcSg
ySuG
SaySo9CNContactCG
ySo8CHHandleCG
_pSg
So13TUDialRequestC
So7NSErrorCSg
ySo18TUConversationLinkCG
ySo7CSDCallCG
ySo21RPCompanionLinkClientCG
ySo20TUNearbyDeviceHandleCG
ySo25TUConversationParticipantCG
_pSg
So14TUCallProviderC
Sg_ABt
Sg_ABt
Sg_ABt
Sg_ABt
Sg_ABt
_GSg_ADt
$s13callservicesd25HoldMusicProviderProtocolP
So19AVSpeechSynthesizerCSg
So13AVAudioPlayerCSg
SgXw
So16CARSessionStatusC
ySbcSg
SgXw
IeyBy_
So27TUCallScreenShareAttributesC
So13CSDAVCMoments_p
SDySS
So20CSDUnknownCallFilterC
So38TUContactsDataProviderAppleCareHandlesC
So45CSDCarrierBundlePhoneNumberProviderControllerC
SDySSSaySo9CNContactCGG
SDySSSo7TURouteCG
ySo7TURouteCcSg
SaySo7TURouteCG
So7TURouteCIeyBy_
SgXw
SgXwz_Xx
ySo21RPCompanionLinkClientCG
ySo21RPCompanionLinkClientCG
ySo21RPCompanionLinkClientCGSgXw
SaySo21RPCompanionLinkDeviceCG
ySo21RPCompanionLinkClientCGSgXw
So21RPCompanionLinkDeviceCIegn_
So21RPCompanionLinkDeviceC
Iegny_
So7CSDCallCSbIggd_
So6TUCallCSbIggd_
$s13callservicesd31ConversationInvitationResolvingP
ShySo34TUConversationInvitationPreferenceCG
yShySo34TUConversationInvitationPreferenceCG_
_pSg
So26CSDDeviceLockStateObserverCSg
A2ASgSbSo20TUConversationMemberCSo8TUHandleCSayADGAGSayAFGSaySo26CSDConversationParticipantCGSo0A4LinkCSgSo0A6ReportCSaySo39CSDMessagingConversationActivitySessionCGSSSgARSg
Iegnnnygggggggggggy_
So15CSDConversationC
ShySo26CSDConversationParticipantCG
ShySo20TUConversationMemberCG
So6NSUUIDCA2BSg
So20TUConversationMemberCSo8TUHandleCSo7NSArrayCA3JSo0B4LinkCSgSo0B6ReportCAJSo8NSStringCSgSo39CSDMessagingConversationActivitySessionCSg
IeyByyyyyyyyyyyyyyyy_
_pSgIegr_
SgXw
SgXwz_Xx
$s13callservicesd26ParticipantUpdateSanitizerP
So17CSDVoucherManager_p
So32IDSGroupSessionParticipantUpdateCIeyBy_
So30CSDMessagingConversationMemberC
So49CSDMessagingConversationParticipantDidJoinContextC
So32IDSGroupSessionParticipantUpdateCIegg_
So32IDSGroupSessionParticipantUpdateC
Ieg_
So17OS_dispatch_groupC
$s13callservicesd26DescriptorTrackingProviderP
$s13callservicesd21AudioResolverProtocolP
14DescriptorType
So22CSDTTYProviderObserver_p
So14TUFeatureFlags_p
Sg_ABSbtcSg
SgXw
SDyx
yx_xGG
qd__
SaySo12TUAudioRouteCG
So12TUAudioRouteCSg
So12TUAudioRouteC
SaySo12TUAudioRouteCGz_Xx
$s13callservicesd20NearbyDeviceProviderP
$s13callservicesd12NearbyDeviceP
10DeviceType
SDySS10DeviceType
$s13callservicesd35ConversationLinkSyncManagerDelegateP
$s13callservicesd37ConversationLinkSyncManagerDataSourceP
_pSgXw
So14IDSRateLimiterCySo8NSStringCG
SdSi_
$s13callservicesd21IDSInteractorDelegate33_735B00354BCC442560C6AD87FDD31012LLP
_pSgXw
So24OS_dispatch_source_timer_p
So10IDSServiceCSg
SgXw
SgXwz_Xx
SSIegg_
ySS__G
SDySSSiG
SaySayypGG
So14NSMutableArrayCSg
SaySo47CSDMessagingConversationLinkGeneratorDescriptorCG
So27CSDMessagingLinkSyncMessageCSg
SaySSGSg
So13OS_xpc_object_p
So20IDSIDQueryControllerC
SSSgSg
So7NSArrayCABIeyByy_
SaySSGAAIeggg_
SaySo11IDSEndpointCGIegg_
3key_yp5valuet
$s13callservicesd40AudioInterruptionActivationStateObserverP
G10identifier_t
$s13callservicesd18BlastDoorInterfaceP
ScPSg
So6NSDataC
So6NSDataCSgSo7NSErrorCSgIeyByy_
IeghH_
ytIeghHr_
ypXp
$s13callservicesd22UserNotificationCenterP
So23CSDCallFilterControllerC
SDySS
So16CSDClientManagerCyyXlyXlGSg
So22UNNotificationResponseC
_ShySo22UNNotificationCategoryCGtG
SgXw
SgXwz_Xx
So16CSDClientManagerC
SgXw
$s13callservicesd29DiscoveryModeProviderProtocolP
$s13callservicesd19VoicemailDataSourceP
$s13callservicesd9VoicemailP
So19CoreTelephonyClientC
ShySuG
Sb9available_Si5counttG
_pSg
3key_Sb9available_Si5countt5valuetSg
3key_Sb9available_Si5countt5valuet
SaySo8TUHandleCG
ShySo25TUConversationParticipantCG
SaySo25TUConversationParticipantCG
So9CHManagerC
$s13callservicesd36CSDCollaborationStateManagerDelegateP
13callservicesd36CSDCollaborationStateManagerDelegate_pSg
SDySS
SgXw
SgXwz_Xx
So7NSErrorCSgIeyByy_
So19LSApplicationRecordCSg
So20CSDBlockedCallFilterC
So12IDSCTAdapterC
So8IDSCTSIM_p
$s13callservicesd21SoundProviderProtocolP
So17TUCallSoundPlayerC
ySo21RPCompanionLinkDeviceC
ySo21RPCompanionLinkDeviceC_
SDySS
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pGG
SDySS
ySDy
ypG5event_ACSg7optionst
_pGG
Sg11localUpdate_AB5foundAB4lostAB7changedt
ySDy
ypG5event_ADSg7optionst
_pGG
y_AAy_
ySDy
ypG5event_ADSg7optionst
_pGGG
SgXw
SgXwz_Xx
_pGIegg_
ypGABSgIeggg_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGG
y_AAy_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGGG
ypGABSgA2C
_pSgIegggg_Iegggg_
ypGSgAC
_pSgytIegnnnr_
So12NSDictionaryCSgACSo7NSErrorCSgIeyByyy_
ypGSgAC
_pSgIegggg_
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
GAKG
So21RPCompanionLinkDeviceCSg
Iegn_
_pSgIegg_Sg
_pIegn_
Iegn_
_pGSo17OS_dispatch_queueCG
ySDy
ypGSg8response_AD7optionst
_pGIegn_
ySDy
ypGSg8response_AD7optionst
_pGIegg_
Sb_yttIegn_
AE_pGG
GAE_pGGSo17OS_dispatch_queueCG
Iegn_
ypGIegn_
_p_G
AE_pGGGSDy
ypGG
ySbAD_pGSo17OS_dispatch_queueCGG
ytIegn_
_pGSo17OS_dispatch_queueCG
SaySDyS2SGG
So10AVCMomentsCSg
So21CSDAVCMomentsDelegate_pSgXw
SDySSSo8NSObjectCGSg
ySS_So8NSStringCtG
SDySSyXlG
6status_t
$s13callservicesd22ASCIIStringConvertibleP
SgXw
SgXwz_Xx
So7TURouteCSg
So17TURouteControllerC
So20CSDAVCMomentsRequest_p
So38CSDNeighborhoodActivityConduitDelegate_p
SgXwz_Xx
So20TUNearbyDeviceHandleC
$s13callservicesd35NeighborhoodActivityConduitDelegateP
So10NSMapTableCySo38CSDNeighborhoodActivityConduitDelegate_pSo17OS_dispatch_queueCG
ShySo20TUNearbyDeviceHandleCG
So20TUContactsDataSource_p
SDySS
So24OS_dispatch_source_timer_pSg
yShySo8TUHandleCG
ySS_SSGG
_AAt
ySuG
ySi5count_Sb11isAmbiguoustG
Si5count_Sb11isAmbiguoust
ySaySo7TURouteCGG
ySaySo7CSDCallCGG
ySo25TUConversationParticipantC_G
So38CSDNeighborhoodActivityConduitDelegate_pIegg_
_pGSo17OS_dispatch_queueCG
_pGSo17OS_dispatch_queueCGAEG
ySDy
_p_G
ySDy
ypGSg8response_AE7optionst
yAdH_p_GG
ySDy
ypGSg8response_AF7optionst
yAeI_p_GGAfG_AfHtG
ySDy
ypGSg8response_AG7optionst
yAfJ_p_GGAgH_AgItG
ySDy
ypGSg8response_AH7optionst
yAgK_p_GGAhI_AhJtG
GGAK_pG
ySDy
ypGSg8response_AC7optionst
ySDy
ypGSg8response_AD7optionst
AC_pGG
AD_pGG
GAD_pGG
_pGIgg_Iegy_
_pGIegg_Iegg_
_pGIegn_
_A15At
yShySo8TUHandleCG
yShySo8TUHandleCG
GGSayAEGG
yShySo8TUHandleCG
GGSDySS
yShySo8TUHandleCG
GGSDySS
GGSo17OS_dispatch_queueCG
yShySo8TUHandleCG
GGSDySS
GGSo17OS_dispatch_queueCGG
_pGSo17OS_dispatch_queueCG
_pGSo17OS_dispatch_queueCGAEG
ySDy
ypGSg8response_AG7optionst
yAfJ_p_GGAgH_AgItG
ySDy
ypGSg8response_AH7optionst
yAgK_p_GGAhI_AhJtG
GGAK_pG
ySo20TUNearbyDeviceHandleC_G
SaySDy
ypGG
ySDy
ypGG
GACG
GADGG
GAEGGSo17OS_dispatch_queueCG
Xoz_Xx
ySDy
ypG5event_ADSg7optionst
_pGSo17OS_dispatch_queueCG
ySDy
ypG5event_ACSg7optionst
So20TUNearbyDeviceHandleCSg
_pIegngzo_
ySDy
ypG5event_ADSg7optionst
_pGSo17OS_dispatch_queueCG
So20TUNearbyDeviceHandleCSg
_pIegngzo_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pG
_pGSo17OS_dispatch_queueCG
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pG
So20TUNearbyDeviceHandleCSg
_pGIegngo_
_pGG
_p_G
AD_pGGG
_p_G
So20TUNearbyDeviceHandleCSg
_pGSo17OS_dispatch_queueCG
_pGIegn_
_p_G
_pGIegg_
ySDyS2SGG
domain
error
_os_unfair_lock_opaque
rawValue
RawValue
ArrayLiteralElement
Element
_rawValue
osd_type
__Anonymous_field1
osd_decoder
osd_title
_nsError
_ObjectiveCType
Code
_ErrorType
osdd_library
osdd_type
authenticationFailed
operationNotSupported
insufficientDeviceInfo
authenticatedDeviceNotFound
alreadyAuthenticated
authenticationCompleted
boxed
_beginOrUpdate
_end
_resetState
_activeDescriptor
rawValue
ArrayLiteralElement
RawValue
Element
DescriptorType
default
high
proxy
local
isAccountActive
isDestinationValid
destinationsGenerator
outgoingSessionProviderGenerator
outgoingChatGenerator
contactsDataProvider
queue
queue
privateAPIValidator
$__lazy_storage_$_applicationStateValidator
donatedIntentValidator
backgroundBluetoothAccessValidator
mediaRemoteStateValidator
_emergencyCallbackPossible
emergencyCallbackCapabilitiesDidChange
preventDetachAfterEmergencyCallTimeoutDeterminationHandler
dispatchAfterHandler
dispatchCancelHandler
queue
callCenterObserver
preventDetachAfterEmergencyCallTimeoutWorkItem
lock
state
subscribed
initialized
cancelled
powerAssertion
powerAssertionDescription
callCenterObserver
routeController
acquirePowerAssertionHandler
releasePowerAssertionHandler
AVAudioSessionInterruptionProviderType
AVAudioClientInterruptionProviderType
uniqueIdentifier
name
deviceType
isCurrentlyPicked
idsDestination
localKey
requestKey
responseKey
provider
queue
displayLayoutMonitor
$__lazy_storage_$_processObserver
bundleIdentifier
callContainerClosure
notificationCenter
delegate
triggers
callChanged
queue
conversationManager
ftNetworkSupport
invitationResolver
featureFlags
notificationIdentifiersByConversationUUID
carPlayNotificationIdentifiersByConversationUUID
faceTimeNotificationCenter
facetimeIsShowingOnScreen
openURL
unlockAndOpenSensitiveURL
localizeConversationName
localizeHandleName
localizeHandleNameWithConversation
notificationType
categories
replace
removeNotification
updateBadgeValue
callCenterObserver
deviceIsHomePod
playersForSounds
letMeJoin
RawValue
FaceTime
Phone
RawValue
activeDescriptor
DescriptorType
audioSession
isLocal
_activationContext
activeDescriptor
DescriptorType
RawValue
queue
processInfoByBundleIdentifier
applicationMonitor
processStateChanged
processStateChangedWithBundleID
updateBadgeValue
queue
openURL
localizeHandleName
notificationType
categories
replace
removeNotification
fitnessPlusAppBundleID
fitnessPlusDaemonBundleID
routesDidChangeHandler
didPickRouteHandler
didDeselectAllRoutesHandler
supportsPrimaryCalling
hasRelayiCloudAccount
idsDeviceForIDSDeviceIdentifier
queue
callCenterObserver
nearbyDeviceMonitor
idsDeviceDestinationResolver
conversationManager
nearbyDeviceRoutes
activeRelayClientTransport
currentCallsSupportNearbyDevices
callChanged
queue
dirtyCallsArray
dirtyCallsSet
messenger
delegate
storage
serverBag
underlyingStorage
transactionUUID
mode
member
dateCreated
Host
Client
invalidHandle
Rejection
Approval
subject
cancellables
messenger
target
buffer
proxiedMessageCount
buffering
proto
resource
clientsPendingAuthentication
queue
maxDuration
unknownShortCallSignal
knownCallerSignal
junkCallSignal
linkCreatedSignal
silenceUnknownCallersEnabledObserver
link
message
options
protobufEncodeError
protobufDecodeError
invalidMessageContent
unknown
request
response
DescriptorType
callStateController
callChanged
dataSources
dirtyCallManager
callOutgoing
accessibilityDefaultRoute
audioSourceKey
ignoresBluetoothDeviceUID
beginOrUpdate
preserve
queue
resolver
audioInterruptionProviderPool
ringtoneProvider
soundProvider
holdMusicProvider
discoveryModeProvider
notificationCenter
deferredEndWorkItem
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
mediaServicesWereResetObserver
audioSessionInterruptionObserver
audioController
factory
localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
avAudioClientInterruptionProvider
availability
photoRequestSuccessCount
photoRequestFailureCount
medianRequestDuration
meanRequestDuration
didBeginPlaying
contactStore
currentAlert
endedPlayingSemaphore
alertGenerator
playbackObserverGenerator
DescriptorType
service
serverBag
renewPseudonymTask
dataSource
linkSyncManager
generateKeyAgreement
delegate
RawValue
completionQueue
vouchingEnablement
idsService
idsPushHandler
timeout
verificationCache
finished
pending
RawValue
queue
relayDeviceRouteChangesByCallUUID
groupUUIDToConversationReportingSessions
conversationUUIDToConversationReport
groupUUIDToConversationInfo
callUUIDToCallReportingSessions
callUUIDToGFTCallReportingSessions
callUUIDtoConversationUUID
conversationGroupUUIDToCallUUID
callUUIDtoConversationGroupUUID
uuidToNWActivity
uuidToNWActivityConnecting
idsSessionUUIDToChatUUIDs
callInfosPendingScoreForCallUUIDs
userScoreEnabled
appleIDUtilities
callInfo
rtcReporting
callUUID
durationMs
relativeStart
relativeEnd
bucketedDuration
endReason
providerErrorCode
providerEndedReason
setupTimeMs
connectionTimeMs
relay
incoming
connected
currentlyGrouped
relayDeviceRouteChanges
filteredOutReason
verficationStatus
knownCallerStatus
isOwnNumber
isConversation
fromLink
returnedCall
isSiriSuggested
isKnownContact
isVerifiedAppleCare
isSignedIntoiCloud
junkConfidence
identificationCategory
isKnownCaller
userScore
delegate
subscriptionsById
sessionsById
remoteAttributesById
messenger
observer
featureFlags
carPlayObserver
unknown
message
unknownFields
rawData
groupUpdate
resource
messageData
fromID
context
isInitiator
groupUuid
participantID
participantDestinationID
updateType
updateSubtype
fromServer
serverDate
participantData
clientContextData
members
participantIds
relaySessionID
resourceData
metadata
AllCases
identifiers
policyInfos
identifierHash
userAccountInfoData
contacts
identifier
_memberAssociationPrimaryInfo
namePrefix
givenName
middleName
familyName
nameSuffix
nickname
imageData
conversationIdentifier
deviceToken
_associationVoucherData
success
memberToken
UNRECOGNIZED
unknown
pointOfPlayback
controlCenterWithActivity
controlCenterWithoutActivity
supportedTypes
_conversationGroupUuidString
_handleData
_identifier
_avcIdentifier
expanse
RawValue
timeout
isAmbiguous
processObserver
donatedIntentCache
validator
isValid
streamToken
requesterID
queue
callInteractionManager
callHistoryDataSource
callProviderManager
pendingCallIdentifiers
supportedMediaTypes
supportedProviders
mostRecentCallDate
inCallServiceProcessObserver
supportsDisplayingFaceTimeAudioCalls
openURL
dialRecentCall
findConversationLink
featureFlags
notificationType
replace
removeNotification
updateBadgeValue
privateKey
soundType
provider
isVideo
region
uuid
speechSynthesizerEventHandler
activeDescriptor
speechSynthesizer
audioPlayer
finishedUtterance
startedUtterance
canceledUtterance
DescriptorType
carSessionQueue
carSessionStatus
carPlayScreenConnectionChanged
sharerHandleValue
currentRemoteAttributes
deviceFamily
style
displayScale
scaleFactor
originalWidth
originalHeight
RawValue
type
failed
iPhone
iPad
iPod
watch
audioAccessory
RawValue
moments
remoteIDSDestinations
isRegistered
activeRequestsByTransactionID
callCenterObserver
contactStore
appleCareHandles
carrierBundleController
invalidPublicKeyData
requestKeyExhausted
responseKeyExhausted
cryptoFailed
_routesByUniqueIdentifier
routesDidChangeHandler
routeWasPickedHandler
timedOutPickingRouteHandler
queue
routeProviders
pendingRouteContext
pickWhenAvailableRouteIdentifier
pendingPickedRouteTimeout
route
routeProvider
deviceInvitationPreferences
required
optional
queue
storage
lockStateObserver
interruptionDescriptor
interruptionDeferredEndDescriptor
ringtoneDescriptor
soundDescriptorAction
holdMusicDescriptor
discoveryModeDescriptor
queue
routesDidChangeHandler
pairedHostDeviceRoutes
contactIdentifier
providerRingtoneSoundURL
uuid
isVideo
handle
completionQueue
vouchingEnablement
voucherManager
identifier
version
queue
callCenterObserver
ttyProviderObserver
localAudioSystemProvider
deviceSupportsRingtone
featureFlags
lastPlayedSoundDate
lastPlayedSoundType
soundDescriptorActionResolver
resolvedDescriptor
resolutionChangedHandler
DescriptorType
UpdateContext
call
triggers
items
timeProvider
expiration
item
routesDidChangeHandler
audioRoutes
queue
localAudioSystemProvider
callCenterObserver
ttyProviderObserver
callAudioCategory
callAudioMode
lastUserPickedRoute
callAudioInterruptionState
inactiveWithPrematurelySelectedRoute
inactive
active
DeviceType
queue
nearbyDeviceProvider
devicesChangedHandler
devicesByEffectiveIdentifier
delegate
dataSource
interactor
serverBag
recoverRateLimiter
recoverResponseRateLimiter
messageQueue
queue
stateHandle
intervalCalculator
actionByType
service
knownDestinations
immediate
delayedShort
delayedLong
checkIn
timer
destinations
currentIndex
failedSending
replacing
appendingNew
newOnly
TUDataSource
remoteMissingIdentifiers
localMissingIdentifiers
localDescriptorsBehindRemote
remoteDescriptorsBehindLocal
delta
initial
featureFlags
queue
idsQueryController
serverBag
$__lazy_storage_$_supportsConversationOneToOneModeEnabled
$__lazy_storage_$_pushTokenForSelf
providerType
category
mode
activationContext
priority
wantsHoldMusic
mediaPlaybackOnExternalDevice
wantsMixingVoiceWithMedia
wantsExpeditedAudioSession
wantsA2DP
operationMode
activationStateObserver
callProviderAuditToken
callProviderBundleIdentifier
requiresPublishingDynamicMicAttribution
avAudioSession
avAudioClient
blastDoor
typeMismatch
emptyResult
callFilterController
phoneNotificationCenter
faceTimeNotificationCenter
providersByIdentifier
queue
providers
clientManager
DescriptorType
queue
telephonyClient
contactStore
voicemailDataSource
postedVoicemailIdentifiers
pendingVoicemailIdentifiers
mostRecentVoicemailDate
mostRecentNonVisualVoicemailDate
localizeVoicemailName
callbackVoicemail
openURL
unsubscribedVoicemailInfoForUUID
notificationType
replace
removeNotification
updateBadgeValue
usTollFreePrefixes
callHistoryManager
delegate
queue
highlightIdentifierOpened
highlightIdentifierToBundleID
bundleIDToHighlightIdentifier
highlightIdentifierToConversationUUID
highlightIdentifierNoAppInstalled
processObserver
idsCTAdapter
activeDescriptor
player
DescriptorType
callUUID
lock
uuid
relativeStart
conversationBaseTime
hasLink
isPending
relativeEnd
duration
uPlusOneModeAtStart
uPlusOneModeAtEnd
maximumMemberCount
initialMemberCount
finalMemberCount
maxNumberOfParticipants
AVCBlobRecoveryAttempts
AVCBlobRecoveryTimeouts
numberLMIRequests
numberLMIApprovals
numberLMIDismissals
messageRetryAttempts
messageRetryFailures
messageRetrySuccesses
avcBlobRecoveryMessageRetryAttempts
avcBlobRecoveryMessageRetryFailures
avcBlobRecoveryMessageRetrySuccesses
timebase
hasHadActiveParticipants
cumulativeTimeAlone
timeAloneAtEnd
lastTimeNotAlone
queue
client
authenticationController
activated
deviceUpdatedPublisher
deviceFoundPublisher
deviceLostPublisher
deviceChangedPublisher
cancellables
stateHandle
messagePublishers
eventPublishers
manager
DeviceType
nonce
iCloudAccountToken
iTunesAccountToken
homeUserIdentifierTokens
moments
delegate
service
accessGroup
account
unhandledError
noPassword
unexpectedPasswordData
unexpectedItemData
queue
callCenterQueue
conversationManager
routeController
pickedRouteUniqueIdentifier
avcRequest
session
messenger
cancellables
queue
conversationManager
conversationServerBag
idsService
vouchingEnablement
voucherManager
delegatesToQueues
featureFlags
networkSupport
handedOffConversations
joinApprovalState
localTVDevices
joinCompletionSubjects
contactStore
pendingJoinConversationIDs
activeConversationUpdateSubject
activeConversationUpdateCancellablesByDeviceID
messageProxy
idsProxyCleanupTimer
conversationIDsWithActivities
stateHandle
contactForwardingCanceler
device
member
conversationUUID
conversationGroupUUIDHash
knownParticipantsPublisher
began
ended
none
requested
cancelled
link
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>Application-Group</key>
<array>
<string>com.apple.callhistory</string>
</array>
<key>BSServiceDomains</key>
<dict>
<key>com.apple.callkit</key>
<dict>
<key>MachName</key>
<string>com.apple.callkit.service</string>
<key>Services</key>
<dict>
<key>com.apple.callkit.service.channel</key>
<dict/>
</dict>
</dict>
</dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>callservicesd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.TelephonyUtilities</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>callservicesd</string>
<key>CFBundlePackageType</key>
<string>FMWK</string>
<key>CFBundleShortVersionString</key>
<string>1.0</string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>20A5283l</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.0</string>
<key>DTSDKBuild</key>
<string>20A5283l</string>
<key>DTSDKName</key>
<string>iphonesimulator16.0.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A6200i</string>
<key>LSBackgroundOnly</key>
<true/>
<key>MinimumOSVersion</key>
<string>16.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
<key>_CFBundleUseAppleLocalizations</key>
<true/>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.telephonyutilities.callservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>development</string>
<key>com.apple.CallHistory.sync.allow</key>
<true/>
<key>com.apple.CallKit.call-directory</key>
<array>
<string>synchronize-extensions</string>
<string>compact-store</string>
<string>query-identification-entries</string>
</array>
<key>com.apple.CallKit.call-directory.extension-host</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>phone</string>
<string>voice</string>
<string>identity</string>
<string>data-usage</string>
<string>data-allowed</string>
<string>data-allowed-write</string>
<string>carrier-space</string>
<string>carrier-settings</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.FaceTime.CallLaunch</key>
<true/>
<key>com.apple.FaceTime.FTConversationService</key>
<array>
<string>access-conversation-links</string>
<string>modify-conversation-links</string>
<string>access-conversation-links</string>
</array>
<key>com.apple.FaceTime.NoPrompt</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.appletv.pbs.user-profiles</key>
<true/>
<key>com.apple.appletv.pbs.user-profiles.select</key>
<true/>
<key>com.apple.assistant.settings</key>
<true/>
<key>com.apple.backboardd.launchapplications</key>
<true/>
<key>com.apple.backboardd.proximityDetection</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coreduetd.knowledge</key>
<true/>
<key>com.apple.coreduetd.people</key>
<true/>
<key>com.apple.coremedia.allow-protected-content-playback</key>
<true/>
<key>com.apple.coremedia.captureassertionservice</key>
<array>
<string>modify-assertion</string>
</array>
<key>com.apple.corespeech.supportheysiriwhenrecord</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.developer.group-session</key>
<true/>
<key>com.apple.developer.notificationcenter-identifiers</key>
<array>
<string>com.apple.facetime</string>
<string>com.apple.Photos</string>
</array>
<key>com.apple.duet.expertcenter.consumer</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.imagent</key>
<true/>
<key>com.apple.imagent.av</key>
<true/>
<key>com.apple.messages.nicknames</key>
<true/>
<key>com.apple.multitasking.termination</key>
<true/>
<key>com.apple.multitasking.voipassertions</key>
<true/>
<key>com.apple.nano.nanoregistry.generalaccess</key>
<true/>
<key>com.apple.pegasus.backgroundPIPServiceEntitlement</key>
<true/>
<key>com.apple.private.CallHistory.read-write</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.phoneNumberResolver</string>
</array>
<key>com.apple.private.attentionawareness</key>
<true/>
<key>com.apple.private.attentionawareness.poll</key>
<true/>
<key>com.apple.private.attribution.explicitly-assumed-identities</key>
<array>
<dict>
<key>type</key>
<string>bundleID</string>
<key>value</key>
<string>com.apple.facetime</string>
</dict>
<dict>
<key>type</key>
<string>bundleID</string>
<key>value</key>
<string>com.apple.mobilephone</string>
</dict>
<dict>
<key>type</key>
<string>path</string>
<key>value</key>
<string>/System/Library/PrivateFrameworks/TelephonyUtilities.framework/callservicesd</string>
</dict>
</array>
<key>com.apple.private.biome.read-write</key>
<array>
<string>GroupActivitySession</string>
</array>
<key>com.apple.private.canGetAppLinkInfo</key>
<true/>
<key>com.apple.private.carkit.dnd</key>
<true/>
<key>com.apple.private.contacts</key>
<true/>
<key>com.apple.private.copresence</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coreaudio.mxsessionPropertyPipe</key>
<true/>
<key>com.apple.private.coremedia.interruptions.phonecallpriority.allow</key>
<true/>
<key>com.apple.private.coreservices.canalwaysadvertise</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.coreservices.canopenactivity</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.LSAlwaysPick</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.bestappsuggestion</key>
<true/>
<key>com.apple.private.dmd.emergency-mode</key>
<true/>
<key>com.apple.private.dmd.policy</key>
<true/>
<key>com.apple.private.donotdisturb.behavior.resolution.client-identifiers</key>
<array>
<string>com.apple.telephonyutilities.callservicesd</string>
</array>
<key>com.apple.private.externalaccessory.showallaccessories</key>
<true/>
<key>com.apple.private.game-center</key>
<array>
<string>Account</string>
<string>Authenticate</string>
<string>Multiplayer</string>
<string>TurnBasedMultiplayer</string>
<string>GameStats</string>
</array>
<key>com.apple.private.game-center.bypass-authentication</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.icfcallserver</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.lp</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.ess</string>
<string>com.apple.private.alloy.phone.auth</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.messaging.high-priority</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.lp</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.phone.auth</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.registration</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.ids.self-session</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.session</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.session-private</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.imavcore.imavagent</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.necp.match</key>
<true/>
<key>com.apple.private.notificationcenter-system</key>
<array>
<dict>
<key>identifier</key>
<string>com.apple.SystemNote</string>
</dict>
</array>
<key>com.apple.private.notificationcenter.internalpushclient</key>
<true/>
<key>com.apple.private.notificationcenterui.alerts</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.screen-time</key>
<true/>
<key>com.apple.private.security.storage.CallHistory</key>
<true/>
<key>com.apple.private.security.storage.Messages</key>
<true/>
<key>com.apple.private.security.storage.Voicemail</key>
<true/>
<key>com.apple.private.suggestions.contacts</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string>kTCCServicePhotos</string>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceMicrophone</string>
<string>kTCCServiceWillow</string>
</array>
<key>com.apple.private.tcc.manager.check-by-audit-token</key>
<array>
<string>kTCCServiceBluetoothAlways</string>
</array>
<key>com.apple.private.tcc.manager.get-identity-for-credential</key>
<true/>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.facetime</string>
<string>com.apple.mobilephone</string>
</array>
<key>com.apple.runningboard.assertions.callservicesd</key>
<true/>
<key>com.apple.runningboard.process-state</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.carkit.service</string>
<string>com.apple.coreduetd.people</string>
<string>com.apple.fairplayd.versioned</string>
<string>com.apple.biome.PublicStreamAccessService</string>
<string>com.apple.imtransferservices.IMTransferAgent</string>
<string>com.apple.adid</string>
<string>com.apple.group-activities.conversationmanagerhost</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.gamed</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.InCallService</string>
<string>com.apple.suggestions</string>
<string>com.apple.ScreenTimeAgent</string>
<string>com.apple.VideoConference</string>
<string>com.apple.VideoProcessing</string>
<string>com.apple.ClarityUI</string>
<string>com.apple.ClarityUI.PhoneFaceTime</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<string>com.apple.TelephonyUtilities.sharePlayAppPolicies</string>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.personal-information.addressbook</key>
<true/>
<key>com.apple.security.temporary-exception.shared-preference.read-only</key>
<array>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.selectivesharing.session_system</key>
<true/>
<key>com.apple.siri.external_request</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.inCallPresentation</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.springboard.statusbarstyleoverrides</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.systemstatus.activityattribution</key>
<true/>
<key>com.apple.systemstatus.publisher.domains</key>
<array>
<string>calling</string>
</array>
<key>com.apple.videoconference.allow-conferencing</key>
<true/>
<key>com.apple.visualvoicemail.client</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>callservicesd</string>
</array>
</dict>
</plist>
com.apple.tv
macOS
com.apple.TV
tvOS
fallback
com.apple.tv
com.apple.Music
macOS
com.apple.Music
tvOS
fallback
com.apple.Music
macOS
com.apple.Notes
tvOS
fallback
+1800
+1888
+1877
+1866
+1855
+1844
