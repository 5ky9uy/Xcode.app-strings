description
element
range
stringByAppendingFormat:
setElement:
setRange:
.cxx_destruct
_element
_range
T@"AXUIElement",&,N,V_element
T{_NSRange=QQ},N,V_range
init
setDelegate:
setEventProcessor:
defaultCenter
_didToggleSpeakScreenSetting
addObserver:selector:name:object:
_didToggleHighlightContentSetting
server
_handleLockButtonPress
setSpringBoardActionHandlerId:
registerSpringBoardActionHandler:withIdentifierCallback:
sharedInstance
_updateVCWithLatestHighlightColors
quickSpeakWordHighlightColor
registerUpdateBlock:forRetrieveSelector:withListener:
quickSpeakSentenceHighlightColor
_updateGestureRecognizers
speechControllerLongPressAction
speechControllerDoubleTapAction
applyElementAttributeCacheScheme:
_observeNotifications:
_speakFingerStateChanged
registerBlockForStateChange:
setThreshold:
setProgressInterval:
isReadingFromFrontmostApp
highlightSentences
highlightWords
currentContent
currentSpeakingRange
currentWordRange
_fetchTextRectsAndApplyHighlightToContent:withRange:elementRange:updateSentences:scrollWords:scrollSentences:
setUpdateVisualsSequenceDidBeginHandler:
setUpdateVisualsSequenceInProgressHandler:
setUpdateVisualsSequenceDidFinishHandler:
setUpdateElementVisualsCoalescer:
springBoardActionHandlerId
removeActionHandler:
_clearAssertionsForFetchingMoreContent
dealloc
registerNotifications:withIdentifier:withHandler:
unregisterNotifications:
systemWideElement
setPassivelyListeningForEvents:
_handlePauseSpeaking
_handleResumeSpeaking
_handleToggleSpeaking
_handleSpeakFaster
_handleSpeakSlower
_handleHideUI
_handleLoadSpeakUnderfingerUI
_handleUpdateUIForSpeakUnderFingerSettingsChange
eventProcessor
beginHandlingHIDEventsForReason:
isSpeaking
isPaused
endHandlingHIDEventsForReason:
_handleUnknownMessageIdentifier:
objectForKeyedSubscript:
doubleValue
valueWithCGPoint:
_updateCurrentAppWithPoint:
integerValue
_handleLoadUIAtAppPoint:
_handleSpeakThisWithOptions:appPoint:completion:
_handleFastForward:
_handleRewind:
_kbFrameWillUpdate:withCompletion:
_fetchContentStartingWithPageTurnElement:shouldRefreshContent:completion:
stopButtonPressed
setIdleTimerDisabled:
view
window
_convertPointFromSceneReferenceSpace:
convertPoint:toView:
sharedDisplayManager
removeContentViewController:withUserInteractionEnabled:forService:
_updateIsHighlightVisible
hideWithCompletion:
addContentViewController:withUserInteractionEnabled:forService:context:userInterfaceStyle:completion:
showUIForSpeakUnderFingerMode
setAlpha:
updateUIForSpeakUnderFingerSettingsChange
uiElement
colorWithAXAttribute:
colorWithCGColor:
setHighlightColor:
colorWithAlphaComponent:
setUnderlineColor:
_reallyHideUI
cancelPreviousPerformRequestsWithTarget:selector:object:
sentenceRanges
removeAllObjects
addContentViewController:withUserInteractionEnabled:forService:
showUIForApplication:
showErrorMessage:
finishLoading
content
length
count
countByEnumeratingWithState:objects:count:
uiElementWithAXElement:
elementWithUIElement:
traits
hasWebContent
containsObject:
addObject:
objectWithAXAttribute:
_speakThisAppendString:withPause:
_speakingRangeForContentItem:withContentItemLength:andPreviousContentStringLength:
firstObject
axElement
indexOfObject:
insertObject:atIndex:
array
valueWithRange:
numberWithBool:
arrayWithObjects:count:
objectWithAXAttribute:parameter:
arrayWithAXAttribute:
mutableCopy
boolWithAXAttribute:
_fetchNextElementsFromOpaqueProviderAndScroll:
uiElementsWithAttribute:
objectAtIndex:
lastObject
isEqualToString:
subarrayWithRange:
removeLastObject
isEqual:
performAXAction:withValue:
_addAssertionForPidIfNeeded:
_fetchNextElementsAndReturnContentStringUsingAppElement:startingWithPageTurnElement:shouldScrollOpaqueProviderIfNecessary:deviceOrientation:
string
_appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:
speakingRangeAndElements
setSpeakingRangeAndElements:
arrayByAddingObjectsFromArray:
copy
keyWindow
interfaceOrientation
_dispatchQueueForFetches
updateCache:
enumerateSubstringsInRange:options:usingBlock:
addAdditionalContentToSpeechQueue:
assertionsForFetchingMoreContent
invalidate
assertionPids
_assertionFlagsForStayingAlive
stringWithFormat:
initWithPID:flags:reason:name:withHandler:
setInvalidationHandler:
numberWithInt:
intValue
setContent:
stopSpeaking:
setIsReadingFromFrontmostApp:
setNeedToRefreshContextIds:
_takeAssertionIfNeeded
canResumeWithContent:
resumeSpeakingAfterDelay:error:
code
_stsErrorCodeForOratorErrorCode:
numberWithInteger:
dictionaryWithObjects:forKeys:count:
setSpeakingContext:
startSpeakingWithPreferredLanguage:delayBeforeStart:error:
_handleNoSpeakableContent:
startSpeakingWithPreferredLanguage:error:
updateBarWithAppTitleForApp:
CGPointValue
convertPointToViewControllerSpace:
_handleFinishShowingUI:
isPausingAssistiveTechnology
postNotification:withData:
setIsPausingAssistiveTechnology:
pauseSpeaking:
resumeSpeaking:
speakFaster
speakSlower
lastSpokenSubstringRange
_findIndexOfRange:
objectAtIndexedSubscript:
fastForwardWithBoundary:
_readNextPageIfApplicableInForwardDirection:completion:
rewindWithBoundary:
highlightSelectionRects
sentenceHighlightSelectionRects
cachedIsHighlightVisible
setIsSpeakScreenHighlightVisible:
setCachedIsHighlightVisible:
_systemApp
elementForAttribute:parameter:
elementForAttribute:
readNextPageCompletion
setIsWaitingForPageScroll:
_giveUpWaitingForPageToScroll
setFlags:
_finishHandlingPageScroll:
_assertionFlagsForFetchingContent
performAXAction:
setReadNextPageCompletion:
performSelector:withObject:afterDelay:
sharedApplication
_setIdleTimerDisabled:forReason:
didStop
showSpeechController
temporarilyHideUI
animateWithDuration:animations:
updateUIFromPlayingStateToSpeakUnderFingerState
windowContextId
arrayWithCapacity:
convertRect:fromContextId:
_convertRectFromSceneReferenceSpace:
convertRect:fromView:
valueWithCGRect:
elementWithAXUIElement:
sendUserEventOccurred
handleKBFrameWillUpdate:
speakFingerState
_handleSpeakingStopped
didPause
didResume
_handleIdleTimerReset
substringWithRange:
removeObjectAtIndex:
rangeValue
rectValue
frame
setHighlightSelectionRects:
numberWithAXAttribute:
unsignedLongLongValue
remoteParent
isVisible
activeWebContentIsHidden
setActiveWebContentIsHidden:
CGRectValue
needToRefreshContextIds
_convertAXValueSceneReferenceRects:toView:fromElement:
setSentenceHighlightSelectionRects:
quickSpeakHighlightOption
isWaitingForPageScroll
_fetchNextSpeakThisElementsAndScrollOpaqueProviderIfNecessary:withCompletion:
currentSpeakingRateChanged
userManuallyExitedSpeakUnderFingerMode
lastUtteranceLanguageCode
speechVoiceIdentifierForLanguage:source:exists:
currentVoiceIdentifier
isNeuralSiriVoiceIdentifier:
currentSpeechRateForAdjustment
halfSpeakingRateAsInt
doubleSpeakingRateAsInt
standardSpeakingRateAsInt
oneAndAHalfSpeakingRateAsInt
setSpeakingRate:
_handleRateChangeSpeechIfNeeded:
speakUnderFingerModeStarted
isHandlingHIDEvents
_frontmostAppMayHaveChanged:
_handleNewPage
updateSpeakUnderFingerState:
updateGestureRecognizers
speakElementAtLocation:
fingerWasLiftedInSpeakUnderFingerMode
overlayFrame
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
oratorDidStartSpeaking:
oratorDidFinishSpeaking:
oratorDidPauseSpeaking:
oratorDidResumeSpeaking:
oratorDidCancelSpeaking:
orator:willSpeakRange:ofContent:
oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:
oratorDidChangeSpeakingRate:
speakElementAtPoint:withEventProcessor:
exitSpeakFingerModeWithEventProcessor:
isInSpeakUnderFingerModeWithEventProcessor:
speakThisUIFrameWithEventProcessor:
processMessage:withIdentifier:fromClientWithIdentifier:error:
messageWithIdentifierShouldBeProcessedAsynchronously:
processMessageAsynchronously:withIdentifier:fromClientWithIdentifier:completion:
accessQueueForProcessingMessageWithIdentifier:
messageWithIdentifierRequiresWritingBlock:
processInitializationMessage:
serviceWasFullyInitialized
connectionWillBeInterruptedForClientWithIdentifier:
requiredEntitlementForProcessingMessageWithIdentifier:
possibleRequiredEntitlementsForProcessingMessageWithIdentifier:
fastForwardButtonPressed
rewindButtonPressed
startNewReadAllFromGesture
playButtonPressed
pauseButtonPressed
stopSpeakFingerButtonPressed
speedButtonPressed
speakUnderFingerButtonPressed
speakingRateAsMultiplier
fetchContentStringStartingWithPageTurnForUnitTest:
_pageDidScroll:
observer
setObserver:
setAssertionPids:
setAssertionsForFetchingMoreContent:
setSentenceRanges:
currentSentenceRange
setCurrentSentenceRange:
currentSentenceElement
setCurrentSentenceElement:
setCurrentSpeakingRange:
setCurrentWordRange:
setCurrentContent:
lockButtonPressedSinceReadAllStart
setLockButtonPressedSinceReadAllStart:
waitingForNewReadAll
setWaitingForNewReadAll:
forceRectsToScroll
setForceRectsToScroll:
updateElementVisualsCoalescer
_orator
_viewController
_currentApp
_savedOpaqueParentForFetching
_currentElementForFetching
_currentElementForFetchingRemoteParent
_currentElementIndex
_currentPageTurnElement
_stopType
_fetchDispatchQueue
_speakScreenListeners
_suspendedSpeakScreenListeners
_speakScreenListenersUpdateQueue
_isReadingFromFrontmostApp
_needToRefreshContextIds
_isPausingAssistiveTechnology
_isWaitingForPageScroll
_lockButtonPressedSinceReadAllStart
_waitingForNewReadAll
_forceRectsToScroll
_activeWebContentIsHidden
_cachedIsHighlightVisible
_speakingRangeAndElements
_springBoardActionHandlerId
_observer
_eventProcessor
_readNextPageCompletion
_assertionPids
_assertionsForFetchingMoreContent
_sentenceRanges
_currentSentenceElement
_currentSpeakingRange
_currentContent
_updateElementVisualsCoalescer
_currentSentenceRange
_currentWordRange
T@"NSArray",&,N,V_speakingRangeAndElements
T@"NSString",&,N,V_springBoardActionHandlerId
T^{__AXObserver=},&,N,V_observer
T@"SpeakThisEventProcessor",&,N,V_eventProcessor
TB,N,V_isReadingFromFrontmostApp
TB,N,V_needToRefreshContextIds
TB,N,V_isPausingAssistiveTechnology
TB,N,V_isWaitingForPageScroll
T@?,C,N,V_readNextPageCompletion
T@"NSMutableArray",&,N,V_assertionPids
T@"NSMutableArray",&,N,V_assertionsForFetchingMoreContent
T@"NSMutableArray",&,N,V_sentenceRanges
T{_NSRange=QQ},N,V_currentSentenceRange
T@"AXUIElement",&,N,V_currentSentenceElement
T@"AXSpeakingRange",&,N,V_currentSpeakingRange
T{_NSRange=QQ},N,V_currentWordRange
T@"NSString",&,N,V_currentContent
TB,N,V_lockButtonPressedSinceReadAllStart
TB,N,V_waitingForNewReadAll
TB,N,V_forceRectsToScroll
TB,N,V_activeWebContentIsHidden
T@"AXUpdateElementVisualsCoalescer",&,N,V_updateElementVisualsCoalescer
TB,N,V_cachedIsHighlightVisible
appendString:
isAXAttributedString
hasAttribute:
lowercaseString
notifyUpdateElementVisualsEventDidOccur
bundleForClass:
localizedStringForKey:value:table:
setEnabled:
effectWithStyle:
effectForBlurEffect:style:
buttonEffectView
setEffect:
setHidden:
borderEffectView
contentView
subviews
setButtonEffectView:
setBorderEffectView:
_buttonEffectView
_borderEffectView
T@"UIVisualEffectView",W,N,V_buttonEffectView
T@"UIVisualEffectView",&,N,V_borderEffectView
initWithFrame:
initWithActivityIndicatorStyle:
setTranslatesAutoresizingMaskIntoConstraints:
addSubview:
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
setTextAlignment:
systemFontOfSize:
setFont:
whiteColor
setTextColor:
setAccessibilityRespondsToUserInteraction:
setNumberOfLines:
_loadButtonsAndConstraints:
leadingAnchor
trailingAnchor
constraintEqualToSystemSpacingAfterAnchor:multiplier:
titleLabel
constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:
setUserInteractionEnabled:
controlBarSize
setFrame:
_handlePan:
initWithTarget:action:
addGestureRecognizer:
_headerTapped:
sendSubviewToBack:
activateConstraints:
_voiceOverStatusChanged
_updateAccessibilityElements
_updateSpeedButtonTitle
quickSpeakSpeakingRate
removeObserver:
setHidesMainViews:
showStopButton
startAnimating
stopAnimating
changeToResumeButton
delegate
headerTapped
state
translationInView:
controlBarDragged:
setText:
_updateButton:withImageName:accessibilityLabel:
hasPrefix:
systemImageNamed:
defaultFontDescriptorWithTextStyle:
fontDescriptorWithSymbolicTraits:
pointSize
fontAttributes
objectForKey:
floatValue
configurationWithPointSize:weight:scale:
configurationWithoutTextStyle
imageWithConfiguration:
bundleWithPath:
imageNamed:inBundle:
imageWithTintColor:
setImage:forState:
setAccessibilityLabel:
buttonWithType:
setTintColor:
initWithEffect:
initWithImage:
constraintEqualToAnchor:
topAnchor
bottomAnchor
addTarget:action:forControlEvents:
maximizedConstraints
deactivateConstraints:
minimizedConstraints
_addButtonConstraints:
_squareButtons
setPriority:
_roundButtons
setMaximizedConstraints:
setMinimizedConstraints:
addObjectsFromArray:
_addButtonWithImageName:accessibilityLabel:round:action:
_speakUnderFingerButtonPressed
setNumberOfTapsRequired:
setDoubleTapRecognizer:
doubleTapRecognizer
_tabModeButtonPressed
requireGestureRecognizerToFail:
setSingleTapRecognizer:
singleTapRecognizer
_startNewReadAllFromGesture:
setLongPressRecognizer:
longPressRecognizer
_rewindButtonPressed
_playPauseButtonPressed
_fastForwardButtonPressed
_speedButtonPressed
setAdjustsFontSizeToFitWidth:
_stopButtonPressed
localizedStringWithFormat:
setTitle:forState:
_setFont:
hideStopButton
showSpeakFingerUI
tabModeButtonPressed
removeGestureRecognizer:
removeTarget:action:
addTarget:action:
_buttons
bringSubviewToFront:
setNeedsLayout
setAccessibilityElements:
nextFocusedView
_accessibilityFindAncestor:startWithSelf:
barDidReceiveFocus
nubbitSize
showLoading
showMainUI
setTitleHeader:
changeToPauseButton
changeToStopButton
updateButtonConstraints
_stopSpeakFingerButtonPressed
updateNubbitGestureRecognizers
setInTabMode:usingSpeakFingerButton:
didUpdateFocusInContext:withAnimationCoordinator:
_activityIndicatorView
_playPauseButton
_tabModeButton
_speakFingerButton
_stopButton
_rewindButton
_forwardButton
_speedButton
_headerLabel
_dragView
_errorLabel
_inTabMode
_panGestureAnchor
_delegate
_minimizedConstraints
_maximizedConstraints
_singleTapRecognizer
_doubleTapRecognizer
_longPressRecognizer
T@"NSArray",&,N,V_minimizedConstraints
T@"NSArray",&,N,V_maximizedConstraints
T@"UITapGestureRecognizer",&,N,V_singleTapRecognizer
T@"UITapGestureRecognizer",&,N,V_doubleTapRecognizer
T@"UILongPressGestureRecognizer",&,N,V_longPressRecognizer
T@"<AXSpeakOverlayControlBarDelegate>",W,N,V_delegate
mainScreen
scale
bezierPathWithOvalInRect:
setLineWidth:
bezierPathWithRoundedRect:cornerRadius:
colorWithWhite:alpha:
stroke
_unregisterNubbit
bounds
setView:
initWithTargetSerialQueue:
layer
setMasksToBounds:
setCornerRadius:
setAutoresizingMask:
setReachabilityOffset:
registerNubbit:delegate:
speechControllerIdleOpacity
setCurrentAppBundleIdentifier:
cancel
_initializeContainingView
alpha
_updateForTabModeUsingSpeakFingerButton:animated:
layoutIfNeeded
bundleId
label
isSpringBoard
_enqueueCollapseTimer
getRed:green:blue:alpha:
colorWithRed:green:blue:alpha:
highlightColorForColor:
highlightView
setSelectionColor:
sentenceHighlightView
sentenceHighlightColorForColor:
labelColor
highlightColor
insertSubview:atIndex:
setHighlightView:
quickSpeakSentenceHighlightOption
currentUnmodifiedSentenceRects
_sliceRects:withSentenceRects:wordRects:
setSentenceHighlight:
underlineColor
insertSubview:belowSubview:
setSentenceHighlightView:
setCurrentUnmodifiedSentenceRects:
valueWithRect:
afterDelay:processBlock:
quickSpeakNubbitNormalizedPosition
setQuickSpeakNubbitNormalizedPosition:
_unregisterNubbit:
unregisterNubbit:shouldUndoFade:
_saveNubbitPosition
_denormalizedNubbitOriginForViewSize:
_updateNubbitForTabModeChange
_registerNubbit
pinNubbitToEdge:
animateWithDuration:animations:completion:
moveBackInBounds
cancelNubbitFade:
_updateTabButtonToSpeakFingerButton
_updateTabButtonToExpandCollapseButton
serviceWithDefaultShellEndpoint
currentAppBundleIdentifier
openApplication:withOptions:completion:
viewWillTransitionToSize:withTransitionCoordinator:
animateAlongsideTransition:completion:
ignoreNextNubbitPositionUpdate
setIgnoreNextNubbitPositionUpdate:
reachabilityOffset
unsignedIntegerValue
size
setOrigin:
origin
animateWithDuration:delay:options:animations:completion:
_shouldForwardViewWillTransitionToSize
nubbitDidUpdatePosition:
idleOpacityForNubbit:
hostingWindowShouldMoveForReachability
handleReachabilityToggled:
didAnimateForReachabilityToOffset:
loadView
_canShowWhileLocked
title
panToPosition:
setBar:
nubbitMoveStartPosition
setNubbitMoveStartPosition:
gestureMoveStartPosition
setGestureMoveStartPosition:
_containingView
_collapseTimer
_nubbitMovedOutsideOfTabMode
_ignoreNextNubbitPositionUpdate
_highlightColor
_underlineColor
_highlightSelectionRects
_bar
_highlightView
_sentenceHighlightView
_currentAppBundleIdentifier
_currentUnmodifiedSentenceRects
_reachabilityOffset
_nubbitMoveStartPosition
_gestureMoveStartPosition
T@"AXSpeakOverlayControlBar",&,N,V_bar
T@"QSSelectionHighlightView",&,N,V_highlightView
T@"QSSelectionHighlightView",&,N,V_sentenceHighlightView
T{CGPoint=dd},N,V_nubbitMoveStartPosition
T{CGPoint=dd},N,V_gestureMoveStartPosition
T@"NSString",&,N,V_currentAppBundleIdentifier
T@"NSArray",&,N,V_currentUnmodifiedSentenceRects
Td,N,V_reachabilityOffset
TB,N,V_ignoreNextNubbitPositionUpdate
T@"<AXSpeakOverlayViewControllerDelegate>",W,N,V_delegate
T@"NSArray",&,N,V_highlightSelectionRects
T@"NSArray",&,N
T@"UIColor",&,N,V_highlightColor
T@"UIColor",&,N,V_underlineColor
initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:
setHIDEventFilterMask:
_handleEvent:
setHIDEventHandler:
denormalizedEventRepresentation:descale:
handInfo
paths
pathLocation
type
assertionWithType:identifier:
eventType
_hidDispatchQueue
_disableSystemGesturesAssertion
T@"<SpeakThisEventProcessorDelegate>",W,N,V_delegate
 - %@, %@
v8@?0
speakscreen-fetch-queue
v24@?0q8@"NSDictionary"16
v16@?0@"NSString"8
com.apple.accessibility.speakScreen.update_listeners
SpeakScreen
v20@?0i8@"NSData"12
Speech controller was set to always be on by an external client
/Library/Caches/com.apple.xbs/Sources/AccessibilityFrameworks_Sim/AccessibilityFrameworks-2885.34/Source/SpeakThisUIServer/SpeakThisUIServer.m
-[SpeakThisUIServer _appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:]
Unexpected type for content item returned by kAXSpeakThisInfoAttribute: %@
UIAccessibilitySpeakThisIdentifier
SpeakThis-LegacyMethodWasUsed
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
-[SpeakThisUIServer _takeAssertionIfNeeded]
Should have cleared out any assertion we held earlier, before speaking new content.
Speak Screen Assertion-%d
NO_SPEAKABLE_CONTENT_EXISTS
v12@?0B8
-[SpeakThisUIServer _readNextPageIfApplicableInForwardDirection:completion:]
Should have had an assertion for fetching more content
SpeakThis
speakThisRangeInElement
speakThisCurrentString
speakThisWantsSentenceRects
speakThisIgnoreScrollToVisible
enabled
disabled
-[SpeakThisUIServer oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:]
Speak under finger mode activated, need to steal all touches.
Speak screen was turned on with the speech controller always visible
Localizable
/System/Library/CoreServices/AssistiveTouch.app
SCATIcon_mediacontrols_pause
PAUSE
SCATIcon_mediacontrols_play
PLAY
square.fill
STOP_SPEAK_FINGER
SCAT
chevron.backward
MINIMIZE
SCATIcon_gestures_fingers1
SPEAK_FINGER
backward.end.fill
REWIND
forward.end.fill
FAST_FORWARD
xmark
STOP
SPEED_HALF
SPEED_NORMAL
SPEED_ONE_AND_HALF
SPEED_TWO
SPEED_GENERIC
chevron.forward
MAXIMIZE
B16@?0@8
SPEAK_SCREEN
HOME_SCREEN
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
SpeakThisUIServer
SpeakThisHIDDispatchQueue
B16@?0@"AXEventRepresentation"8
User is interacting with speech controller
AXSpeakingRange
SpeakThisUIServer
AXOratorDelegate
NSObject
SpeakThisEventProcessorDelegate
AXUIService
AXSpeakOverlayViewControllerDelegate
SpeakThisUIServerAdditions
AXSpeakScreenButton
AXSpeakOverlayControlBar
AXSpeakOverlayViewController
AXUINubbitDelegate
AXUIViewControllerReachabilityHandler
AXSpeakOverlayControlBarDelegate
SpeakThisEventProcessor
@16@0:8
v24@0:8@16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
v16@0:8
@"AXUIElement"
{_NSRange="location"Q"length"Q}
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16{_NSRange=QQ}24@40
v28@0:8@16B24
v24@0:8@"AXOrator"16
v48@0:8@"AXOrator"16{_NSRange=QQ}24@"NSString"40
v28@0:8@"AXOrator"16B24
v40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v40@0:8{CGPoint=dd}16@"SpeakThisEventProcessor"32
v24@0:8@"SpeakThisEventProcessor"16
B24@0:8@"SpeakThisEventProcessor"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"SpeakThisEventProcessor"16
@48@0:8@16Q24@32^@40
B24@0:8Q16
v48@0:8@16Q24@32@?40
@24@0:8Q16
@"NSDictionary"48@0:8@"NSDictionary"16Q24@"NSString"32^@40
v48@0:8@"NSDictionary"16Q24@"NSString"32@?<v@?@"NSDictionary"@"NSError">40
@"AXAccessQueue"24@0:8Q16
v24@0:8@"NSDictionary"16
v24@0:8@"NSString"16
@"NSString"24@0:8Q16
@"NSSet"24@0:8Q16
d16@0:8
v20@0:8B16
v24@0:8@?16
{CGPoint=dd}32@0:8{CGPoint=dd}16
@24@0:8@16
@32@0:8{CGPoint=dd}16
@40@0:8@16Q24Q32
v52@0:8@16@24@32B40q44
@20@0:8B16
@40@0:8@16B24B28q32
v32@0:8B16B20@?24
v28@0:8B16@?20
I16@0:8
v20@0:8i16
v40@0:8q16@24@?32
q24@0:8q16
Q32@0:8{_NSRange=QQ}16
@40@0:8@16@24@32
v32@0:8@16@?24
v60@0:8@16{_NSRange=QQ}24@40B48B52B56
^{__AXObserver=}16@0:8
v24@0:8^{__AXObserver=}16
@?16@0:8
@"AXOrator"
@"AXSpeakOverlayViewController"
@"AXElement"
@"<UIElementProtocol>"
@"NSObject<OS_dispatch_queue>"
@"NSMutableSet"
@"NSArray"
@"NSString"
^{__AXObserver=}
@"SpeakThisEventProcessor"
@"NSMutableArray"
@"AXSpeakingRange"
@"AXUpdateElementVisualsCoalescer"
v24@0:8d16
@"UIVisualEffectView"
{CGSize=dd}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v40@0:8@16@24@32
@44@0:8@16@24B32:36
v24@0:8B16B20
v32@0:8@16@24
@"UIActivityIndicatorView"
@"AXSpeakScreenButton"
@"UILabel"
@"UIView"
{CGPoint="x"d"y"d}
@"<AXSpeakOverlayControlBarDelegate>"
@"UITapGestureRecognizer"
@"UILongPressGestureRecognizer"
d24@0:8@16
v24@0:8@"UIView"16
d24@0:8@"UIView"16
v32@0:8{CGPoint=dd}16
{CGPoint=dd}32@0:8{CGSize=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8Q16
v40@0:8{CGSize=dd}16@32
{CGPoint=dd}16@0:8
@"AXDispatchTimer"
@"UIColor"
@"<AXSpeakOverlayViewControllerDelegate>"
@"AXSpeakOverlayControlBar"
@"QSSelectionHighlightView"
@40@0:8@16i24@28i36
@"AXAssertion"
@"<SpeakThisEventProcessorDelegate>"
?333333
MbP?
Connection will be interrupted for %@.
Stopping opaque element fetch because nil element found. Stopped after finding %lu elements.
The currently fetched element could not be used for continued fetching, trying to recover using remote parent: %@
Received elements and strings: %{public}@
Content string was %{private}@
Speaking ranges were %{private}@
Clearing assertion for fetching more content.
Assertion for fetching more content was unexpectedly invalidated.
Took an assertion to handle fetching additional content.
Took an assertion for pid %d to handle fetching additional content.
We were asked to speak the screen, but the setting was off.  Bailing.
ERROR: Application accessibility was disabled even though Speak Screen was in use.  Please file a bug with details about what you were doing before you saw this message.
SpeakThis-FetchContent
Received error when resuming speaking, even though orator claimed we could resume: %@
SpeakThis-StartSpeaking
Update is highlight visible: %i
Received unknown message identifier %lu.
Updated current app (app point: %{pubic}@) to %{public}@
Finishing handling page scroll.  Did read next page: %i
No longer allowing suspended app AX because we finished handling a page scroll.
Error speaking next page: %@
Updating assertion flags to keep app alive but not necessarily responsive.
Did not get page scroll notification in %f seconds.
Allowing suspended app AX while we turn the page.
We somehow needed to turn the page but had no assertion to keep the app alive.  Please file a bug with your recent syslog.
Updating flags on assertion so that we can fetch more content.
Page returned NO for scroll action.  No longer allowing suspended app AX.
Somehow spoke a string range %@ that contained an entire element's portion of our content string %@.
Will speak range %{public}@ corresponding to "%{public}@"
Not getting text rects because the app being spoken is not foremost
SpeakThis-FetchRects
Range in element was %{public}@
Skipping highlighting because web content is hidden. We are probably on a different tab
Starting to highlight web content because we are active again.
Got text rects %{public}@
Got sentence rects %{public}@
AXOrator requested more elements with scrolling %@
Allowing suspended app AX while we fetch additional content.
We somehow needed to fetch more content but had no assertion to keep the app alive.  Please file a bug with your recent syslog.
Updating assertion flags for fetching %@
Updating assertion flags for staying alive %@
More elements were requested, but speak screen has stopped, so not providing any additional content.
Is reading from frontmost app: %i
Page scroll sent notification of failure.
Pid status changed: %{public}@
Screen changed
Page scrolled
