description
element
range
stringByAppendingFormat:
.cxx_destruct
setElement:
setRange:
_element
_range
alloc
init
setDelegate:
setEventProcessor:
defaultCenter
_didToggleSpeakScreenSetting
addObserver:selector:name:object:
server
_handleLockButtonPress
setSpringBoardActionHandlerId:
registerSpringBoardActionHandler:withIdentifierCallback:
sharedInstance
_didToggleHighlightContentSetting
quickSpeakHighlightText
registerUpdateBlock:forRetrieveSelector:withListener:
_updateGestureRecognizers
speechControllerLongPressAction
speechControllerDoubleTapAction
applyElementAttributeCacheScheme:
_observeNotifications:
_speakFingerStateChanged
registerBlockForStateChange:
removeObserver:name:object:
springBoardActionHandlerId
removeActionHandler:
_clearAssertionsForFetchingMoreContent
dealloc
numberWithInt:
arrayWithObjects:count:
registerNotifications:withIdentifier:withHandler:
unregisterNotifications:
systemWideElement
setPassivelyListeningForEvents:
_handlePauseSpeaking
_handleResumeSpeaking
_handleToggleSpeaking
_handleSpeakFaster
_handleSpeakSlower
_handleHideUI
_handleLoadSpeakUnderfingerUI
_handleUpdateUIForSpeakUnderFingerSettingsChange
eventProcessor
beginHandlingHIDEventsForReason:
isSpeaking
isPaused
endHandlingHIDEventsForReason:
_handleUnknownMessageIdentifier:
objectForKeyedSubscript:
doubleValue
valueWithCGPoint:
_updateCurrentAppWithPoint:
integerValue
_handleLoadUIAtAppPoint:
_handleSpeakThisWithOptions:appPoint:completion:
_handleFastForward:
_handleRewind:
_kbFrameWillUpdate:withCompletion:
_fetchContentStartingWithPageTurnElement:shouldRefreshContent:completion:
stopButtonPressed
setIdleTimerDisabled:
view
window
_convertPointFromSceneReferenceSpace:
convertPoint:toView:
sharedDisplayManager
removeContentViewController:withUserInteractionEnabled:forService:
hideWithCompletion:
addContentViewController:withUserInteractionEnabled:forService:
showUIForSpeakUnderFingerMode
setAlpha:
updateUIForSpeakUnderFingerSettingsChange
_reallyHideUI
cancelPreviousPerformRequestsWithTarget:selector:object:
sentenceRanges
removeAllObjects
highlightWords
quickSpeakWordHighlightColor
uiElement
colorWithAXAttribute:
colorWithCGColor:
setHighlightColor:
colorWithAlphaComponent:
highlightSentences
quickSpeakSentenceHighlightColor
setUnderlineColor:
showUIForApplication:
showErrorMessage:
finishLoading
count
countByEnumeratingWithState:objects:count:
length
initWithAXElement:
elementWithUIElement:
traits
objectWithAXAttribute:
_speakThisAppendStringWithPause:
content
addObject:
array
numberWithLong:
valueWithRange:
numberWithBool:
objectWithAXAttribute:parameter:
arrayWithAXAttribute:
mutableCopy
boolWithAXAttribute:
_fetchNextElementsFromOpaqueProviderAndScroll:
uiElementsWithAttribute:
objectAtIndex:
uiElementWithAXElement:
performAXAction:withValue:
_addAssertionForPidIfNeeded:
isEqual:
string
_appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:
speakingRangeAndElements
setSpeakingRangeAndElements:
arrayByAddingObjectsFromArray:
_dispatchQueueForFetches
updateCache:
_fetchNextElementsAndRerturnContentStringUsingAppElement:startingWithPageTurnElement:shouldScrollOpaqueProviderIfNecesary:
addAdditionalContentToSpeechQueue:
assertionsForFetchingMoreContent
invalidate
assertionPids
_assertionFlagsForStayingAlive
stringWithFormat:
initWithPID:flags:reason:name:withHandler:
setInvalidationHandler:
intValue
setContent:
setIsReadingFromFrontmostApp:
_takeAssertionIfNeeded
canResumeWithContent:
resumeSpeakingAfterDelay:error:
code
_stsErrorCodeForOratorErrorCode:
numberWithInteger:
dictionaryWithObjects:forKeys:count:
setSpeakingContext:
startSpeakingWithPreferredLanguage:delayBeforeStart:error:
_handleNoSpeakableContent:
startSpeakingWithPreferredLanguage:error:
enumerateSubstringsInRange:options:usingBlock:
CGPointValue
convertPointToViewControllerSpace:
_handleFinishShowingUI:
isPausingAssistiveTechnology
postNotification:withData:
setIsPausingAssistiveTechnology:
pauseSpeaking:
resumeSpeaking:
speakFaster
speakSlower
lastSpokenSubstringRange
_findIndexOfRange:
objectAtIndexedSubscript:
fastForwardWithBoundary:
_readNextPageIfApplicableInForwardDirection:completion:
rewindWithBoundary:
_systemApp
elementForAttribute:parameter:
elementForAttribute:
readNextPageCompletion
setIsWaitingForPageScroll:
_giveUpWaitingForPageToScroll
isEqualToString:
setFlags:
_finishHandlingPageScroll:
_assertionFlagsForFetchingContent
performAXAction:
setReadNextPageCompletion:
performSelector:withObject:afterDelay:
sharedApplication
_setIdleTimerDisabled:forReason:
didStop
showSpeechController
temporarilyHideUI
animateWithDuration:animations:
updateUIFromPlayingStateToSpeakUnderFingerState
windowContextId
arrayWithCapacity:
convertRect:fromContextId:
_convertRectFromSceneReferenceSpace:
convertRect:fromView:
valueWithCGRect:
elementWithAXUIElement:
sendUserEventOccurred
handleKBFrameWillUpdate:
speakFingerState
_handleSpeakingStopped
didPause
didResume
_handleIdleTimerReset
substringWithRange:
isReadingFromFrontmostApp
removeObjectAtIndex:
firstObject
rangeValue
numberWithAXAttribute:
unsignedLongLongValue
lastObject
_convertAXValueSceneReferenceRects:toView:fromElement:
setHighlightSelectionRects:
setSentenceHighlightSelectionRects:
quickSpeakHighlightOption
_fetchNextSpeakThisElementsAndScrollOpaqueProviderIfNecessary:withCompletion:
currentSpeakingRateChanged
userManuallyExitedSpeakUnderFingerMode
stopSpeaking:
currentSpeechRateForAdjustment
setSpeakingRate:
_handleRateChangeSpeechIfNeeded:
speakUnderFingerModeStarted
isHandlingHIDEvents
_frontmostAppMayHaveChanged:
isWaitingForPageScroll
_handleNewPage
updateSpeakUnderFingerState:
updateGestureRecognizers
speakElementAtLocation:
fingerWasLiftedInSpeakUnderFingerMode
overlayFrame
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
oratorDidStartSpeaking:
oratorDidFinishSpeaking:
oratorDidPauseSpeaking:
oratorDidResumeSpeaking:
oratorDidCancelSpeaking:
orator:willSpeakRange:ofContent:
oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:
oratorDidChangeSpeakingRate:
speakElementAtPoint:withEventProcessor:
exitSpeakFingerModeWithEventProcessor:
isInSpeakUnderFingerModeWithEventProcessor:
speakThisUIFrameWithEventProcessor:
processMessage:withIdentifier:fromClientWithIdentifier:error:
messageWithIdentifierShouldBeProcessedAsynchronously:
processMessageAsynchronously:withIdentifier:fromClientWithIdentifier:completion:
accessQueueForProcessingMessageWithIdentifier:
messageWithIdentifierRequiresWritingBlock:
processInitializationMessage:
serviceWasFullyInitialized
connectionWillBeInterruptedForClientWithIdentifier:
requiredEntitlementForProcessingMessageWithIdentifier:
possibleRequiredEntitlementsForProcessingMessageWithIdentifier:
fastForwardButtonPressed
rewindButtonPressed
startNewReadAllFromGesture
playButtonPressed
pauseButtonPressed
stopSpeakFingerButtonPressed
speedButtonPressed
speakUnderFingerButtonPressed
speakingRateAsMultiplier
fetchContentStringStartingWithPageTurnForUnitTest:
_pageDidScroll:
observer
setObserver:
setAssertionPids:
setAssertionsForFetchingMoreContent:
setSentenceRanges:
currentSentenceRange
setCurrentSentenceRange:
lockButtonPressedSinceReadAllStart
setLockButtonPressedSinceReadAllStart:
_orator
_viewController
_currentApp
_currentElementForFetching
_currentElementForFetchingRemoteParent
_currentElementIndex
_currentPageTurnElement
_stopType
_isReadingFromFrontmostApp
_isPausingAssistiveTechnology
_isWaitingForPageScroll
_lockButtonPressedSinceReadAllStart
_speakingRangeAndElements
_springBoardActionHandlerId
_observer
_eventProcessor
_readNextPageCompletion
_assertionPids
_assertionsForFetchingMoreContent
_sentenceRanges
_currentSentenceRange
isAXAttributedString
hasAttribute:
lowercaseString
appendString:
bundleForClass:
localizedStringForKey:value:table:
setEnabled:
effectWithStyle:
effectForBlurEffect:style:
buttonEffectView
setEffect:
setHidden:
borderEffectView
contentView
subviews
setButtonEffectView:
setBorderEffectView:
_buttonEffectView
_borderEffectView
initWithFrame:
initWithActivityIndicatorStyle:
setTranslatesAutoresizingMaskIntoConstraints:
addSubview:
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
setTextAlignment:
systemFontOfSize:
setFont:
whiteColor
setTextColor:
setAccessibilityRespondsToUserInteraction:
setNumberOfLines:
_loadButtonsAndConstraints:
leadingAnchor
trailingAnchor
constraintEqualToSystemSpacingAfterAnchor:multiplier:
setUserInteractionEnabled:
controlBarSize
setFrame:
_handlePan:
initWithTarget:action:
addGestureRecognizer:
_headerTapped:
sendSubviewToBack:
activateConstraints:
_voiceOverStatusChanged
_updateAccessibilityElements
_updateSpeedButtonTitle
quickSpeakSpeakingRate
removeObserver:
setHidesMainViews:
showStopButton
startAnimating
stopAnimating
changeToResumeButton
delegate
headerTapped
state
translationInView:
controlBarDragged:
setText:
_updateButton:withImageName:accessibilityLabel:
hasPrefix:
systemImageNamed:
defaultFontDescriptorWithTextStyle:
fontDescriptorWithSymbolicTraits:
fontWithDescriptor:size:
configurationWithFont:scale:
imageWithConfiguration:
bundleWithPath:
imageNamed:inBundle:
imageWithTintColor:
setImage:forState:
setAccessibilityLabel:
buttonWithType:
setTintColor:
initWithEffect:
initWithImage:
constraintEqualToAnchor:
topAnchor
bottomAnchor
addTarget:action:forControlEvents:
maximizedConstraints
deactivateConstraints:
minimizedConstraints
_addButtonConstraints:
_squareButtons
setPriority:
_roundButtons
setMaximizedConstraints:
setMinimizedConstraints:
addObjectsFromArray:
_addButtonWithImageName:accessibilityLabel:round:action:
_speakUnderFingerButtonPressed
setNumberOfTapsRequired:
setDoubleTapRecognizer:
doubleTapRecognizer
_tabModeButtonPressed
requireGestureRecognizerToFail:
setSingleTapRecognizer:
singleTapRecognizer
_startNewReadAllFromGesture:
setLongPressRecognizer:
longPressRecognizer
_rewindButtonPressed
_playPauseButtonPressed
_fastForwardButtonPressed
_speedButtonPressed
_stopButtonPressed
setTitle:forState:
_setFont:
hideStopButton
showSpeakFingerUI
tabModeButtonPressed
removeGestureRecognizer:
removeTarget:action:
addTarget:action:
_buttons
bringSubviewToFront:
setNeedsLayout
setAccessibilityElements:
nubbitSize
showLoading
showMainUI
setTitleHeader:
changeToPauseButton
changeToStopButton
updateButtonConstraints
_stopSpeakFingerButtonPressed
updateNubbitGestureRecognizers
setInTabMode:usingSpeakFingerButton:
_activityIndicatorView
_playPauseButton
_tabModeButton
_speakFingerButton
_stopButton
_rewindButton
_forwardButton
_speedButton
_headerLabel
_dragView
_errorLabel
_inTabMode
_panGestureAnchor
_delegate
_minimizedConstraints
_maximizedConstraints
_singleTapRecognizer
_doubleTapRecognizer
_longPressRecognizer
mainScreen
scale
bezierPathWithOvalInRect:
setLineWidth:
bezierPathWithRoundedRect:cornerRadius:
colorWithWhite:alpha:
stroke
_unregisterNubbit
bounds
setView:
initWithTargetSerialQueue:
frame
layer
setMasksToBounds:
setCornerRadius:
setAutoresizingMask:
setReachabilityOffset:
setCurrentAppBundleIdentifier:
cancel
_initializeContainingView
alpha
_updateForTabModeUsingSpeakFingerButton:animated:
layoutIfNeeded
bundleId
label
isSpringBoard
_enqueueCollapseTimer
getRed:green:blue:alpha:
colorWithRed:green:blue:alpha:
highlightColorForColor:
highlightView
setSelectionColor:
sentenceHighlightView
sentenceHighlightColorForColor:
labelColor
highlightColor
insertSubview:atIndex:
setHighlightView:
sentenceHighlightSelectionRects
quickSpeakSentenceHighlightOption
currentUnmodifiedSentenceRects
_sliceRects:withSentenceRects:wordRects:
highlightSelectionRects
setSentenceHighlight:
underlineColor
insertSubview:belowSubview:
setSentenceHighlightView:
setCurrentUnmodifiedSentenceRects:
rectValue
valueWithRect:
afterDelay:processBlock:
quickSpeakNubbitNormalizedPosition
setQuickSpeakNubbitNormalizedPosition:
registerNubbit:delegate:
unregisterNubbit:
_saveNubbitPosition
_denormalizedNubbitOriginForViewSize:
_updateNubbitForTabModeChange
_registerNubbit
pinNubbitToEdge:
animateWithDuration:animations:completion:
moveBackInBounds
cancelNubbitFade:
_updateTabButtonToSpeakFingerButton
_updateTabButtonToExpandCollapseButton
serviceWithDefaultShellEndpoint
currentAppBundleIdentifier
openApplication:withOptions:completion:
viewWillTransitionToSize:withTransitionCoordinator:
animateAlongsideTransition:completion:
ignoreNextNubbitPositionUpdate
setIgnoreNextNubbitPositionUpdate:
reachabilityOffset
floatValue
unsignedIntegerValue
size
setOrigin:
origin
animateWithDuration:delay:options:animations:completion:
_shouldForwardViewWillTransitionToSize
nubbitDidUpdatePosition:
hostingWindowShouldMoveForReachability
handleReachabilityToggled:
didAnimateForReachabilityToOffset:
loadView
_canShowWhileLocked
title
panToPosition:
setBar:
nubbitMoveStartPosition
setNubbitMoveStartPosition:
gestureMoveStartPosition
setGestureMoveStartPosition:
_containingView
_collapseTimer
_nubbitMovedOutsideOfTabMode
_ignoreNextNubbitPositionUpdate
_highlightColor
_underlineColor
_highlightSelectionRects
_bar
_highlightView
_sentenceHighlightView
_currentAppBundleIdentifier
_currentUnmodifiedSentenceRects
_reachabilityOffset
_nubbitMoveStartPosition
_gestureMoveStartPosition
initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:
setHIDEventFilterMask:
_handleEvent:
setHIDEventHandler:
denormalizedEventRepresentation:descale:
handInfo
paths
pathLocation
type
assertionWithType:identifier:
eventType
_hidDispatchQueue
_disableSystemGesturesAssertion
 - %@, %@
element
T@"AXUIElement",&,N,V_element
range
T{_NSRange=QQ},N,V_range
v8@?0
v24@?0q8@"NSDictionary"16
v16@?0@"NSString"8
SpeakScreen
v20@?0i8@"NSData"12
Speech controller was set to always be on by an external client
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AccessibilityFrameworks_Sim/AccessibilityFrameworks-2715/Source/SpeakThisUIServer/SpeakThisUIServer.m
-[SpeakThisUIServer _appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:]
Unexpected type for content item returned by kAXSpeakThisInfoAttribute: %@
UIAccessibilitySpeakThisIdentifier
-[SpeakThisUIServer _takeAssertionIfNeeded]
Should have cleared out any assertion we held earlier, before speaking new content.
Speak Screen Assertion-%d
Received error when resuming speaking, even though orator claimed we could resume: %@
NO_SPEAKABLE_CONTENT_EXISTS
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
v12@?0B8
Received unknown message identifier %lu.
-[SpeakThisUIServer _readNextPageIfApplicableInForwardDirection:completion:]
Should have had an assertion for fetching more content
SpeakThis
Somehow spoke a string range %@ that contained an entire element's portion of our content string %@.
speakThisRangeInElement
speakThisCurrentString
enabled
disabled
-[SpeakThisUIServer oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:]
Speak under finger mode activated, need to steal all touches.
Speak screen was turned on with the speech controller always visible
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
speakingRangeAndElements
T@"NSArray",&,N,V_speakingRangeAndElements
springBoardActionHandlerId
T@"NSString",&,N,V_springBoardActionHandlerId
observer
T^{__AXObserver=},&,N,V_observer
eventProcessor
T@"SpeakThisEventProcessor",&,N,V_eventProcessor
isReadingFromFrontmostApp
TB,N,V_isReadingFromFrontmostApp
isPausingAssistiveTechnology
TB,N,V_isPausingAssistiveTechnology
isWaitingForPageScroll
TB,N,V_isWaitingForPageScroll
readNextPageCompletion
T@?,C,N,V_readNextPageCompletion
assertionPids
T@"NSMutableArray",&,N,V_assertionPids
assertionsForFetchingMoreContent
T@"NSMutableArray",&,N,V_assertionsForFetchingMoreContent
sentenceRanges
T@"NSMutableArray",&,N,V_sentenceRanges
currentSentenceRange
T{_NSRange=QQ},N,V_currentSentenceRange
lockButtonPressedSinceReadAllStart
TB,N,V_lockButtonPressedSinceReadAllStart
Localizable
/System/Library/CoreServices/AssistiveTouch.app
buttonEffectView
T@"UIVisualEffectView",W,N,V_buttonEffectView
borderEffectView
T@"UIVisualEffectView",&,N,V_borderEffectView
SCATIcon_mediacontrols_pause
PAUSE
SCATIcon_mediacontrols_play
PLAY
square.fill
STOP_SPEAK_FINGER
SCAT
chevron.left
MINIMIZE
SCATIcon_gestures_fingers1
SPEAK_FINGER
backward.end.fill
REWIND
forward.end.fill
FAST_FORWARD
xmark
STOP
SPEED_HALF
SPEED_NORMAL
SPEED_ONE_AND_HALF
SPEED_TWO
chevron.right
MAXIMIZE
minimizedConstraints
T@"NSArray",&,N,V_minimizedConstraints
maximizedConstraints
T@"NSArray",&,N,V_maximizedConstraints
singleTapRecognizer
T@"UITapGestureRecognizer",&,N,V_singleTapRecognizer
doubleTapRecognizer
T@"UITapGestureRecognizer",&,N,V_doubleTapRecognizer
longPressRecognizer
T@"UILongPressGestureRecognizer",&,N,V_longPressRecognizer
delegate
T@"<AXSpeakOverlayControlBarDelegate>",W,N,V_delegate
SPEAK_SCREEN
HOME_SCREEN
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
T@"AXSpeakOverlayControlBar",&,N,V_bar
highlightView
T@"QSSelectionHighlightView",&,N,V_highlightView
sentenceHighlightView
T@"QSSelectionHighlightView",&,N,V_sentenceHighlightView
nubbitMoveStartPosition
T{CGPoint=dd},N,V_nubbitMoveStartPosition
gestureMoveStartPosition
T{CGPoint=dd},N,V_gestureMoveStartPosition
currentAppBundleIdentifier
T@"NSString",&,N,V_currentAppBundleIdentifier
currentUnmodifiedSentenceRects
T@"NSArray",&,N,V_currentUnmodifiedSentenceRects
reachabilityOffset
Td,N,V_reachabilityOffset
ignoreNextNubbitPositionUpdate
TB,N,V_ignoreNextNubbitPositionUpdate
T@"<AXSpeakOverlayViewControllerDelegate>",W,N,V_delegate
highlightSelectionRects
T@"NSArray",&,N,V_highlightSelectionRects
sentenceHighlightSelectionRects
T@"NSArray",&,N
highlightColor
T@"UIColor",&,N,V_highlightColor
underlineColor
T@"UIColor",&,N,V_underlineColor
SpeakThisUIServer
SpeakThisHIDDispatchQueue
B16@?0@"AXEventRepresentation"8
User is interacting with speech controller
T@"<SpeakThisEventProcessorDelegate>",W,N,V_delegate
AXSpeakingRange
SpeakThisUIServer
AXOratorDelegate
NSObject
SpeakThisEventProcessorDelegate
AXUIService
AXSpeakOverlayViewControllerDelegate
SpeakThisUIServerAdditions
AXSpeakScreenButton
AXSpeakOverlayControlBar
AXSpeakOverlayViewController
AXUINubbitDelegate
AXUIViewControllerReachabilityHandler
AXSpeakOverlayControlBarDelegate
SpeakThisEventProcessor
@16@0:8
v16@0:8
v24@0:8@16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
@"AXUIElement"
{_NSRange="location"Q"length"Q}
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16{_NSRange=QQ}24@40
v28@0:8@16B24
v24@0:8@"AXOrator"16
v48@0:8@"AXOrator"16{_NSRange=QQ}24@"NSString"40
v28@0:8@"AXOrator"16B24
v40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v40@0:8{CGPoint=dd}16@"SpeakThisEventProcessor"32
v24@0:8@"SpeakThisEventProcessor"16
B24@0:8@"SpeakThisEventProcessor"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"SpeakThisEventProcessor"16
@48@0:8@16Q24@32^@40
B24@0:8Q16
v48@0:8@16Q24@32@?40
@24@0:8Q16
@"NSDictionary"48@0:8@"NSDictionary"16Q24@"NSString"32^@40
v48@0:8@"NSDictionary"16Q24@"NSString"32@?<v@?@"NSDictionary"@"NSError">40
@"AXAccessQueue"24@0:8Q16
v24@0:8@"NSDictionary"16
v24@0:8@"NSString"16
@"NSString"24@0:8Q16
@"NSSet"24@0:8Q16
d16@0:8
v20@0:8B16
v24@0:8@?16
{CGPoint=dd}32@0:8{CGPoint=dd}16
@24@0:8@16
@32@0:8{CGPoint=dd}16
v44@0:8@16@24@32B40
@20@0:8B16
@32@0:8@16B24B28
v32@0:8B16B20@?24
v28@0:8B16@?20
I16@0:8
v20@0:8i16
v40@0:8q16@24@?32
q24@0:8q16
Q32@0:8{_NSRange=QQ}16
@40@0:8@16@24@32
v32@0:8@16@?24
^{__AXObserver=}16@0:8
v24@0:8^{__AXObserver=}16
@?16@0:8
@"AXOrator"
@"AXSpeakOverlayViewController"
@"AXElement"
@"<UIElementProtocol>"
@"NSArray"
@"NSString"
^{__AXObserver=}
@"SpeakThisEventProcessor"
@"NSMutableArray"
v24@0:8d16
@"UIVisualEffectView"
{CGSize=dd}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v40@0:8@16@24@32
@44@0:8@16@24B32:36
v24@0:8B16B20
@"UIActivityIndicatorView"
@"AXSpeakScreenButton"
@"UILabel"
@"UIView"
{CGPoint="x"d"y"d}
@"<AXSpeakOverlayControlBarDelegate>"
@"UITapGestureRecognizer"
@"UILongPressGestureRecognizer"
v24@0:8@"UIView"16
v32@0:8{CGPoint=dd}16
{CGPoint=dd}32@0:8{CGSize=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8Q16
v40@0:8{CGSize=dd}16@32
{CGPoint=dd}16@0:8
@"AXDispatchTimer"
@"UIColor"
@"<AXSpeakOverlayViewControllerDelegate>"
@"AXSpeakOverlayControlBar"
@"QSSelectionHighlightView"
@40@0:8@16i24@28i36
@"NSObject<OS_dispatch_queue>"
@"AXAssertion"
@"<SpeakThisEventProcessorDelegate>"
?333333
Stopping opaque element fetch because nil element found. Stopped after finding %lu elements.
The currently fetched element could not be used for continued fetching, trying to recover using remote parent: %@
Received elements and strings: %{public}@
Content string was %{private}@
Speaking ranges were %{private}@
Clearing assertion for fetching more content.
Assertion for fetching more content was unexpectedly invalidated.
Took an assertion to handle fetching additional content.
Took an assertion for pid %d to handle fetching additional content.
We were asked to speak the screen, but the setting was off.  Bailing.
ERROR: Application accessibility was disabled even though Speak Screen was in use.  Please file a bug with details about what you were doing before you saw this message.
SpeakThis-FetchContent
SpeakThis-StartSpeaking
Updated current app (app point: %{pubic}@) to %{public}@
Finishing handling page scroll.  Did read next page: %i
No longer allowing suspended app AX because we finished handling a page scroll.
Error speaking next page: %@
Updating assertion flags to keep app alive but not necessarily responsive.
Did not get page scroll notification in %f seconds.
Allowing suspended app AX while we turn the page.
We somehow needed to turn the page but had no assertion to keep the app alive.  Please file a bug with your recent syslog.
Updating flags on assertion so that we can fetch more content.
Page returned NO for scroll action.  No longer allowing suspended app AX.
Will speak range %{public}@ corresponding to "%{public}@"
SpeakThis-FetchRects
Range in element was %{public}@
Got text rects %{public}@
Got sentence rects %{public}@
Not getting text rects because the app being spoken is not foremost
AXOrator requested more elements with scrolling %@
Allowing suspended app AX while we fetch additional content.
We somehow needed to fetch more content but had no assertion to keep the app alive.  Please file a bug with your recent syslog.
Updating assertion flags for fetching %@
Updating assertion flags for staying alive %@
More elements were requested, but speak screen has stopped, so not providing any additional content.
Is reading from frontmost app: %i
Page scroll sent notification of failure.
Pid status changed: %{public}@
Screen changed
Page scrolled
