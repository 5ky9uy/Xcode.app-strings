 - %@, %@
SpeakScreen.stbundle
MAIN-DISPLAY
v8@?0
speakscreen-fetch-queue
v24@?0q8@"NSDictionary"16
v16@?0@"NSString"8
com.apple.accessibility.speakScreen.update_listeners
SpeakScreen
v20@?0i8@"NSData"12
Speech controller was set to always be on by an external client
/Library/Caches/com.apple.xbs/Sources/AccessibilityFrameworks_Sim/Source/SpeakThisUIServer/SpeakThisUIServer.m
-[SpeakThisUIServer _appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:]
Unexpected type for content item returned by kAXSpeakThisInfoAttribute: %@
UIAccessibilitySpeakThisIdentifier
SpeakThis-LegacyMethodWasUsed
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
com.apple.Accessibility
SpeakScreenStayAlive
SpeakScreenFetchContent
Speak Screen Assertion-%d
v24@?0@"RBSAssertion"8@"NSError"16
NO_SPEAKABLE_CONTENT_EXISTS
v12@?0B8
SpeakThis
speakThisRangeInElement
speakThisCurrentString
speakThisWantsSentenceRects
speakThisIgnoreScrollToVisible
enabled
disabled
Speak under finger mode activated, need to steal all touches.
Speak screen was turned on with the speech controller always visible
Localizable
/System/Library/CoreServices/AssistiveTouch.app
SCATIcon_mediacontrols_pause
PAUSE
SCATIcon_mediacontrols_play
PLAY
square.fill
STOP_SPEAK_FINGER
SCAT
chevron.backward
MINIMIZE
SCATIcon_gestures_fingers1
SPEAK_FINGER
backward.end.fill
REWIND
forward.end.fill
FAST_FORWARD
xmark
STOP
SPEED_HALF
SPEED_NORMAL
SPEED_ONE_AND_HALF
SPEED_TWO
SPEED_GENERIC
chevron.forward
MAXIMIZE
B16@?0@8
SPEAK_SCREEN
HOME_SCREEN
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
SpeakThisUIServer
SpeakThisHIDDispatchQueue
B16@?0@"AXEventRepresentation"8
User is interacting with speech controller
description
element
range
stringByAppendingFormat:
setElement:
setRange:
.cxx_destruct
_element
_range
T@"AXUIElement",&,N,V_element
T{_NSRange=QQ},N,V_range
init
setDelegate:
setEventProcessor:
dictionary
sharedInstance
_didToggleHighlightContentSetting
defaultCenter
_didToggleSpeakScreenSetting
addObserver:selector:name:object:
server
_handleLockButtonPress
setSpringBoardActionHandlerId:
registerSpringBoardActionHandler:withIdentifierCallback:
_updateVCWithLatestHighlightColors
quickSpeakWordHighlightColor
registerUpdateBlock:forRetrieveSelector:withListener:
quickSpeakSentenceHighlightColor
_updateGestureRecognizers
speechControllerLongPressAction
speechControllerDoubleTapAction
applyElementAttributeCacheScheme:
_observeNotifications:
_speakFingerStateChanged
registerBlockForStateChange:
setThreshold:
setProgressInterval:
isReadingFromFrontmostApp
highlightSentences
highlightWords
currentContent
currentSpeakingRange
currentWordRange
_fetchTextRectsAndApplyHighlightToContent:withRange:elementRange:updateSentences:scrollWords:scrollSentences:
setUpdateVisualsSequenceDidBeginHandler:
setUpdateVisualsSequenceInProgressHandler:
setUpdateVisualsSequenceDidFinishHandler:
setUpdateElementVisualsCoalescer:
springBoardActionHandlerId
removeActionHandler:
_clearAllAssertions
dealloc
registerNotifications:withIdentifier:withHandler:
unregisterNotifications:
systemWideElement
setPassivelyListeningForEvents:
_handlePauseSpeaking
_handleResumeSpeaking
_handleToggleSpeaking
_handleSpeakFaster
_handleSpeakSlower
_handleHideUI
_handleLoadSpeakUnderfingerUI
eventProcessor
beginHandlingHIDEventsForReason:
isSpeaking
isPaused
_handleUpdateUIForSpeakUnderFingerSettingsChange
endHandlingHIDEventsForReason:
_handleUpdateSpeakingRate:
_handleUnknownMessageIdentifier:
setRootElementAccessibilityIdentifier:
setSceneIdentifier:
objectForKeyedSubscript:
doubleValue
valueWithCGPoint:
showSpeechController
stateManager
setInTabMode:
sceneIdentifier
rootElementAccessibilityIdentifier
_updateCurrentAppWithPoint:bundleID:sceneID:rootElementAccessibilityIdentifier:
integerValue
_handleLoadUIAtAppPoint:
_handleSpeakThisWithOptions:appPoint:completion:
dictionaryWithObjects:forKeys:count:
_handleFastForward:
_handleRewind:
_kbFrameWillUpdate:withCompletion:
_fetchContentStartingWithPageTurnElement:shouldRefreshContent:completion:
stopButtonPressed
setIdleTimerDisabled:
_addContentViewControllerForWindowScene:
countByEnumeratingWithState:objects:count:
callStackSymbols
allKeys
isEqualToString:
view
window
windowScene
_removeViewControllerForWindowScene:
_initializeUIIfNeccessary
_windowSceneForActiveDisplay
showUI
_updateViewControllerForWindowScene:completion:
_reallyHideUI
cancelPreviousPerformRequestsWithTarget:selector:object:
sentenceRanges
removeAllObjects
showUIForApplication:
updateUIForSpeakUnderFingerSettingsChange
finishLoading
showErrorMessage:
_convertPointFromSceneReferenceSpace:
convertPoint:toView:
uiElement
colorWithAXAttribute:
colorWithCGColor:
setHighlightColor:
colorWithAlphaComponent:
setUnderlineColor:
content
length
count
isScreenLockedWithPasscode:
uiElementWithAXElement:
elementWithUIElement:
traits
hasWebContent
containsObject:
addObject:
objectWithAXAttribute:
_speakThisAppendString:withPause:
_speakingRangeForContentItem:withContentItemLength:andPreviousContentStringLength:
firstObject
axElement
indexOfObject:
insertObject:atIndex:
array
valueWithRange:
numberWithBool:
arrayWithObjects:count:
objectWithAXAttribute:parameter:
arrayWithAXAttribute:
mutableCopy
boolWithAXAttribute:
_fetchNextElementsFromOpaqueProviderAndScroll:
uiElementsWithAttribute:
objectAtIndex:
lastObject
subarrayWithRange:
removeLastObject
isEqual:
performAXAction:withValue:
_addFetchingContentAssertionForPid:
_addStayingAliveAssertionForPid:
_fetchNextElementsAndReturnContentStringUsingAppElement:startingWithPageTurnElement:shouldScrollOpaqueProviderIfNecessary:deviceOrientation:
string
_appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:
speakingRangeAndElements
setSpeakingRangeAndElements:
arrayByAddingObjectsFromArray:
copy
interfaceOrientation
_dispatchQueueForFetches
updateCache:
setIsFetchingContent:
enumerateSubstringsInRange:options:usingBlock:
addAdditionalContentToSpeechQueue:
attributes
invalidateWithError:
attributeWithDomain:name:
assertionsForStayingAlive
target
targetWithPid:
stringWithFormat:
_assertionAttributesForStayingAlive
initWithExplanation:target:attributes:
acquireWithInvalidationHandler:
explanation
numberWithInt:
assertionsForFetchingContent
_assertionAttributesForFetchingMoreContent
setContent:
stopSpeaking:
setIsReadingFromFrontmostApp:
setNeedToRefreshContextIds:
canResumeWithContent:
resumeSpeakingAfterDelay:error:
code
_stsErrorCodeForOratorErrorCode:
numberWithInteger:
setSpeakingContext:
startSpeakingWithPreferredLanguage:delayBeforeStart:error:
_handleNoSpeakableContent:
startSpeakingWithPreferredLanguage:error:
updateBarWithAppTitleForApp:
_handleFinishShowingUI
isPausingAssistiveTechnology
postNotification:withData:
setIsPausingAssistiveTechnology:
pauseSpeaking:
resumeSpeaking:
speakFaster
speakSlower
intValue
standardSpeakingRateAsInt
halfSpeakingRateAsInt
oneAndAHalfSpeakingRateAsInt
doubleSpeakingRateAsInt
setSpeakingRate:
_handleRateChangeSpeechIfNeeded:
lastSpokenSubstringRange
_findIndexOfRange:
objectAtIndexedSubscript:
fastForwardWithBoundary:
_readNextPageIfApplicableInForwardDirection:completion:
rewindWithBoundary:
highlightSelectionRects
sentenceHighlightSelectionRects
cachedIsHighlightVisible
setIsSpeakScreenHighlightVisible:
setCachedIsHighlightVisible:
debugDescription
_systemApp
elementForAttribute:parameter:
setAXAttribute:withString:
focusManager
currentApplication
bundleId
readNextPageCompletion
setIsWaitingForPageScroll:
_clearAssertions:
_finishHandlingPageScroll:
performAXAction:
setReadNextPageCompletion:
_giveUpWaitingForPageToScroll
performSelector:withObject:afterDelay:
sharedApplication
_setIdleTimerDisabled:forReason:
didStop
_updateIsHighlightVisible
temporarilyHideUI
animateWithDuration:animations:
setCurrentState:
resetUI
windowContextId
arrayWithCapacity:
convertRect:fromContextId:
_convertRectFromSceneReferenceSpace:
convertRect:fromView:
valueWithCGRect:
elementWithAXUIElement:
sendUserEventOccurred
handleKBFrameWillUpdate:
speakFingerState
isFetchingContent
isWaitingForPageScroll
_handleSpeakingStopped
didPause
didResume
_handleIdleTimerReset
substringWithRange:
removeObjectAtIndex:
rangeValue
rectValue
frame
setHighlightSelectionRects:
numberWithAXAttribute:
unsignedLongLongValue
remoteParent
isVisible
activeWebContentIsHidden
setActiveWebContentIsHidden:
CGRectValue
needToRefreshContextIds
_convertAXValueSceneReferenceRects:toView:fromElement:
setSentenceHighlightSelectionRects:
quickSpeakHighlightOption
_fetchNextSpeakThisElementsAndScrollOpaqueProviderIfNecessary:withCompletion:
currentSpeakingRateChanged
userManuallyExitedSpeakUnderFingerMode
lastUtteranceLanguageCode
speechVoiceIdentifierForLanguage:source:exists:
currentVoiceIdentifier
isNeuralSiriVoiceIdentifier:
currentSpeechRateForAdjustment
speakUnderFingerModeStarted
isHandlingHIDEvents
_frontmostAppMayHaveChanged:
setSupportsAccurateWordCallbacks:
setSkipLuthorRules:
_handleNewPage
updateSpeakUnderFingerState:
updateGestureRecognizers
windowSceneIdentifierForWindowScene:
setObject:forKeyedSubscript:
sharedDisplayManager
_contextId
setContextID:
addEventContextForWindow:
addContentViewController:withUserInteractionEnabled:forService:context:userInterfaceStyle:allowSystemAppHosting:forWindowScene:completion:
contextID
removeEventContextForContextID:
removeContentViewController:withUserInteractionEnabled:forService:
removeObjectForKey:
updateUIForDisplayChange
hideWithCompletion:
unregisterNubbit:
screen
displayIdentity
displayID
setActiveDisplayId:
displayIdentifierForSceneIdentifier:
unsignedIntegerValue
activeDisplayId
contextForDisplayID:
activeDisplayChangedWithContext:
contextIdForActiveDisplay
_sceneIdentifier
removeObject:
speakElementAtLocation:
fingerWasLiftedInSpeakUnderFingerMode
overlayFrame
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
TQ,R
T#,R
T@"NSString",R,C
oratorDidStartSpeaking:
oratorDidFinishSpeaking:
oratorDidPauseSpeaking:
oratorDidResumeSpeaking:
oratorDidCancelSpeaking:
orator:willSpeakRange:ofContent:
oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:
oratorDidChangeSpeakingRate:
speakElementAtPoint:withEventProcessor:
exitSpeakFingerModeWithEventProcessor:
isInSpeakUnderFingerModeWithEventProcessor:
speakThisUIFrameWithEventProcessor:
startNewReadAllFromGesture
mainDisplayWindow
processMessage:withIdentifier:fromClientWithIdentifier:error:
messageWithIdentifierShouldBeProcessedAsynchronously:
processMessageAsynchronously:withIdentifier:fromClientWithIdentifier:completion:
accessQueueForProcessingMessageWithIdentifier:
messageWithIdentifierRequiresWritingBlock:
processInitializationMessage:
serviceWasFullyInitialized
connectionWillBeInterruptedForClientWithIdentifier:
requiredEntitlementForProcessingMessageWithIdentifier:
possibleRequiredEntitlementsForProcessingMessageWithIdentifier:
fastForwardButtonPressed
rewindButtonPressed
playButtonPressedForViewController:
pauseButtonPressed
stopSpeakFingerButtonPressed
speedButtonPressed
speakUnderFingerButtonPressed
speakingRateAsMultiplier
desiredWindowLevelForContentViewController:userInteractionEnabled:
shouldPreventAutorotatingAllContentViewControllers
externalDisplaySceneConnected:
externalDisplaySceneDisconnected:
externalDisplaySceneConnected:forSceneClientIdentifier:
externalDisplaySceneDisconnected:forSceneClientIdentifier:
fetchContentStringStartingWithPageTurnForUnitTest:
convertPointToViewControllerSpace:
_pageDidScroll:
keyboardFocusChangedForSceneIdentifier:
observer
setObserver:
setStateManager:
setAssertionsForStayingAlive:
setAssertionsForFetchingContent:
setSentenceRanges:
currentSentenceRange
setCurrentSentenceRange:
currentSentenceElement
setCurrentSentenceElement:
setCurrentSpeakingRange:
setCurrentWordRange:
setCurrentContent:
lockButtonPressedSinceReadAllStart
setLockButtonPressedSinceReadAllStart:
waitingForNewReadAll
setWaitingForNewReadAll:
forceRectsToScroll
setForceRectsToScroll:
setFocusManager:
updateElementVisualsCoalescer
_orator
_viewController
_currentApp
_savedOpaqueParentForFetching
_currentElementForFetching
_currentElementForFetchingRemoteParent
_currentElementIndex
_currentPageTurnElement
_stopType
_fetchDispatchQueue
_speakScreenListeners
_suspendedSpeakScreenListeners
_speakScreenListenersUpdateQueue
_externalScenes
_speakThisUIViewControllers
_isReadingFromFrontmostApp
_needToRefreshContextIds
_isPausingAssistiveTechnology
_isFetchingContent
_isWaitingForPageScroll
_lockButtonPressedSinceReadAllStart
_waitingForNewReadAll
_forceRectsToScroll
_activeWebContentIsHidden
_cachedIsHighlightVisible
_speakingRangeAndElements
_springBoardActionHandlerId
_observer
_eventProcessor
_stateManager
_readNextPageCompletion
_assertionsForStayingAlive
_assertionsForFetchingContent
_sentenceRanges
_currentSentenceElement
_currentSpeakingRange
_currentContent
_focusManager
_updateElementVisualsCoalescer
_rootElementAccessibilityIdentifier
_currentSentenceRange
_currentWordRange
T@"NSArray",&,N,V_speakingRangeAndElements
T@"NSString",&,N,V_springBoardActionHandlerId
T^{__AXObserver=},&,N,V_observer
T@"SpeakThisEventProcessor",&,N,V_eventProcessor
T@"SpeakThisUIStateManager",&,N,V_stateManager
TB,N,V_isReadingFromFrontmostApp
TB,N,V_needToRefreshContextIds
TB,N,V_isPausingAssistiveTechnology
TB,N,V_isFetchingContent
TB,N,V_isWaitingForPageScroll
T@?,C,N,V_readNextPageCompletion
T@"NSMutableArray",&,N,V_assertionsForStayingAlive
T@"NSMutableArray",&,N,V_assertionsForFetchingContent
T@"NSMutableArray",&,N,V_sentenceRanges
T{_NSRange=QQ},N,V_currentSentenceRange
T@"AXUIElement",&,N,V_currentSentenceElement
T@"AXSpeakingRange",&,N,V_currentSpeakingRange
T{_NSRange=QQ},N,V_currentWordRange
T@"NSString",&,N,V_currentContent
TB,N,V_lockButtonPressedSinceReadAllStart
TB,N,V_waitingForNewReadAll
TB,N,V_forceRectsToScroll
TB,N,V_activeWebContentIsHidden
T@"AXFocusManager",&,N,V_focusManager
T@"AXUpdateElementVisualsCoalescer",&,N,V_updateElementVisualsCoalescer
TB,N,V_cachedIsHighlightVisible
T@"NSString",&,N,V_rootElementAccessibilityIdentifier
T@"NSString",&,N,V_sceneIdentifier
appendString:
isAXAttributedString
hasAttribute:
lowercaseString
notifyUpdateElementVisualsEventDidOccur
bundleForClass:
localizedStringForKey:value:table:
setEnabled:
effectWithStyle:
effectForBlurEffect:style:
buttonEffectView
setEffect:
setHidden:
borderEffectView
contentView
subviews
setAlpha:
setButtonEffectView:
setBorderEffectView:
_buttonEffectView
_borderEffectView
T@"UIVisualEffectView",W,N,V_buttonEffectView
T@"UIVisualEffectView",&,N,V_borderEffectView
initWithFrame:
initWithActivityIndicatorStyle:
setTranslatesAutoresizingMaskIntoConstraints:
addSubview:
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
setTextAlignment:
systemFontOfSize:
setFont:
whiteColor
setTextColor:
setAccessibilityRespondsToUserInteraction:
setNumberOfLines:
_loadButtonsAndConstraints:
leadingAnchor
trailingAnchor
constraintEqualToSystemSpacingAfterAnchor:multiplier:
titleLabel
constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:
setUserInteractionEnabled:
controlBarSize
setFrame:
_handlePan:
initWithTarget:action:
addGestureRecognizer:
_headerTapped:
sendSubviewToBack:
activateConstraints:
_voiceOverStatusChanged
_updateAccessibilityElements
_updateSpeedButtonTitle
quickSpeakSpeakingRate
removeObserver:
currentControllerTitle
setText:
setHidesMainViews:
showStopButton
startAnimating
stopAnimating
changeToResumeButton
delegate
headerTapped
state
translationInView:
controlBarDragged:gestureRecognizer:
_updateButton:withImageName:accessibilityLabel:
hasPrefix:
systemImageNamed:
defaultFontDescriptorWithTextStyle:
fontDescriptorWithSymbolicTraits:
fontAttributes
objectForKey:
pointSize
floatValue
configurationWithPointSize:weight:scale:
configurationWithoutTextStyle
imageWithConfiguration:
bundleWithPath:
imageNamed:inBundle:
imageWithTintColor:
setImage:forState:
setAccessibilityLabel:
buttonWithType:
setTintColor:
initWithEffect:
initWithImage:
constraintEqualToAnchor:
topAnchor
bottomAnchor
addTarget:action:forControlEvents:
maximizedConstraints
deactivateConstraints:
minimizedConstraints
_addButtonConstraints:
inTabMode
_squareButtons
setPriority:
_roundButtons
setMaximizedConstraints:
setMinimizedConstraints:
addObjectsFromArray:
_addButtonWithImageName:accessibilityLabel:round:action:
_speakUnderFingerButtonPressed
setNumberOfTapsRequired:
setDoubleTapRecognizer:
doubleTapRecognizer
_tabModeButtonPressed
requireGestureRecognizerToFail:
setSingleTapRecognizer:
singleTapRecognizer
_startNewReadAllFromGesture:
setLongPressRecognizer:
longPressRecognizer
_rewindButtonPressed
_playPauseButtonPressed
_fastForwardButtonPressed
_speedButtonPressed
setAdjustsFontSizeToFitWidth:
_stopButtonPressed
localizedStringWithFormat:
setTitle:forState:
_setFont:
hideStopButton
showSpeakFingerUI
playButtonPressed
tabModeButtonPressed
removeGestureRecognizer:
removeTarget:action:
addTarget:action:
_buttons
bringSubviewToFront:
setNeedsLayout
setAccessibilityElements:
nextFocusedView
_accessibilityFindAncestor:startWithSelf:
barDidReceiveFocus
nubbitSize
updateHeaderLabel
showLoading
showMainUI
changeToPauseButton
changeToStopButton
updateButtonConstraints
_stopSpeakFingerButtonPressed
updateNubbitGestureRecognizers
updateForTabModeChangeUsingSpeakFingerButton:
didUpdateFocusInContext:withAnimationCoordinator:
_activityIndicatorView
_playPauseButton
_tabModeButton
_speakFingerButton
_stopButton
_rewindButton
_forwardButton
_speedButton
_headerLabel
_dragView
_errorLabel
_panGestureAnchor
_delegate
_minimizedConstraints
_maximizedConstraints
_singleTapRecognizer
_doubleTapRecognizer
_longPressRecognizer
T@"NSArray",&,N,V_minimizedConstraints
T@"NSArray",&,N,V_maximizedConstraints
T@"UITapGestureRecognizer",&,N,V_singleTapRecognizer
T@"UITapGestureRecognizer",&,N,V_doubleTapRecognizer
T@"UILongPressGestureRecognizer",&,N,V_longPressRecognizer
T@"<AXSpeakOverlayControlBarDelegate>",W,N,V_delegate
mainScreen
scale
bezierPathWithOvalInRect:
setLineWidth:
bezierPathWithRoundedRect:cornerRadius:
colorWithWhite:alpha:
stroke
addObserver:
_unregisterNubbit
bounds
setView:
layer
setMasksToBounds:
setCornerRadius:
setAutoresizingMask:
setReachabilityOffset:
registerNubbit:delegate:
speechControllerIdleOpacity
currentState
collapseTimer
cancel
_initializeContainingView
setCurrentAppBundleIdentifier:
_updateUI
alpha
_updateForTabModeUsingSpeakFingerButton:animated:
layoutIfNeeded
label
isSpringBoard
setCurrentControllerTitle:
_enqueueCollapseTimer
getRed:green:blue:alpha:
colorWithRed:green:blue:alpha:
highlightColorForColor:
highlightView
setSelectionColor:
sentenceHighlightView
sentenceHighlightColorForColor:
labelColor
highlightColor
insertSubview:atIndex:
setHighlightView:
quickSpeakSentenceHighlightOption
currentUnmodifiedSentenceRects
_sliceRects:withSentenceRects:wordRects:
updateVisualRects
setSentenceHighlight:
underlineColor
insertSubview:belowSubview:
setSentenceHighlightView:
setCurrentUnmodifiedSentenceRects:
valueWithRect:
collapseNubbit
afterDelay:processBlock:
quickSpeakNubbitNormalizedPosition
setQuickSpeakNubbitNormalizedPosition:
unregisterNubbit:shouldUndoFade:
_denormalizedNubbitOriginForViewSize:
_axIsPointInForeheadRect:
_updateNubbitForTabModeChange
_registerNubbit
pinNubbitToEdge:
animateWithDuration:animations:completion:
moveBackInBounds
cancelNubbitFade:
_updateTabButtonToSpeakFingerButton
_updateTabButtonToExpandCollapseButton
serviceWithDefaultShellEndpoint
currentAppBundleIdentifier
openApplication:withOptions:completion:
setState:
setIgnoreNextNubbitPositionUpdate:
_saveNubbitPosition
expandNubbit
viewWillTransitionToSize:withTransitionCoordinator:
animateAlongsideTransition:completion:
ignoreNextNubbitPositionUpdate
reachabilityOffset
size
setOrigin:
origin
animateWithDuration:delay:options:animations:completion:
setFrameOrigin:
_shouldForwardViewWillTransitionToSize
nubbitDidUpdatePosition:
idleOpacityForNubbit:
nubbitWillBeginDragging:
hostingWindowShouldMoveForReachability
handleReachabilityToggled:
didAnimateForReachabilityToOffset:
uiStateChanged
systemApertureLayoutDidChange:
loadView
_canShowWhileLocked
title
panToPosition:
setBar:
nubbitMoveStartPosition
setNubbitMoveStartPosition:
gestureMoveStartPosition
setGestureMoveStartPosition:
_containingView
_nubbitMovedOutsideOfTabMode
_layoutMonitor
_foreheadRect
_ignoreNextNubbitPositionUpdate
_contextID
_highlightColor
_underlineColor
_highlightSelectionRects
_bar
_highlightView
_sentenceHighlightView
_currentUnmodifiedSentenceRects
_reachabilityOffset
_nubbitMoveStartPosition
_gestureMoveStartPosition
T@"AXSpeakOverlayControlBar",&,N,V_bar
T@"QSSelectionHighlightView",&,N,V_highlightView
T@"QSSelectionHighlightView",&,N,V_sentenceHighlightView
T{CGPoint=dd},N,V_nubbitMoveStartPosition
T{CGPoint=dd},N,V_gestureMoveStartPosition
T@"NSArray",&,N,V_currentUnmodifiedSentenceRects
Td,N,V_reachabilityOffset
TB,N,V_ignoreNextNubbitPositionUpdate
T@"<AXSpeakOverlayViewControllerDelegate>",W,N,V_delegate
T@"NSArray",&,N,V_highlightSelectionRects
T@"NSArray",&,N
T@"UIColor",&,N,V_highlightColor
T@"UIColor",&,N,V_underlineColor
TI,N,V_contextID
initWithTargetSerialQueue:
_updateObservers
observers
setCollapseTimer:
setObservers:
_inTabMode
_currentState
_collapseTimer
_currentAppBundleIdentifier
_currentControllerTitle
_observers
T@"NSMutableSet",&,N,V_observers
TB,N,V_inTabMode
Tq,N,V_currentState
T@"AXDispatchTimer",&,N,V_collapseTimer
T@"NSString",&,N,V_currentAppBundleIdentifier
T@"NSString",&,N,V_currentControllerTitle
allocWithZone:
copyWithZone:
initWithDisplayID:contextID:displayHardwareID:
setDisplayID:
displayHardwareID
setDisplayHardwareID:
_displayID
_displayHardwareID
Tq,N,V_displayID
T@"NSString",&,N,V_displayHardwareID
initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:
setHIDEventFilterMask:
_handleEvent:
setHIDEventHandler:
displayConfiguration
hardwareIdentifier
denormalizedEventRepresentation:descale:
handInfo
paths
pathLocation
type
assertionWithType:identifier:
keyInfo
translateKeycode
keyDown
modifierState
keyCode
eventType
_hidDispatchQueue
_disableSystemGesturesAssertion
_eventContexts
lastMouseEventTime
_activeDisplayId
T@"<SpeakThisEventProcessorDelegate>",W,N,V_delegate
TQ,N,V_activeDisplayId
AXSpeakingRange
SpeakThisUIServer
AXOratorDelegate
NSObject
SpeakThisEventProcessorDelegate
AXUIService
AXSpeakOverlayViewControllerDelegate
AXUIContentViewControllerDelegate
SpeakThisUIServerAdditions
AXSpeakScreenButton
AXSpeakOverlayControlBar
AXSpeakOverlayViewController
AXUINubbitDelegate
AXUIViewControllerReachabilityHandler
SpeakThisUIStateManagerDelegate
SBSSystemApertureLayoutMonitoring
AXSpeakOverlayControlBarDelegate
SpeakThisUIStateManager
SpeakThisEventContext
NSCopying
SpeakThisEventProcessor
@16@0:8
v24@0:8@16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
v16@0:8
@"AXUIElement"
{_NSRange="location"Q"length"Q}
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16{_NSRange=QQ}24@40
v28@0:8@16B24
v24@0:8@"AXOrator"16
v48@0:8@"AXOrator"16{_NSRange=QQ}24@"NSString"40
v28@0:8@"AXOrator"16B24
v40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v40@0:8{CGPoint=dd}16@"SpeakThisEventProcessor"32
v24@0:8@"SpeakThisEventProcessor"16
B24@0:8@"SpeakThisEventProcessor"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"SpeakThisEventProcessor"16
v24@0:8@"SpeakThisEventContext"16
@"UIWindow"16@0:8
@48@0:8@16Q24@32^@40
B24@0:8Q16
v48@0:8@16Q24@32@?40
@24@0:8Q16
@"NSDictionary"48@0:8@"NSDictionary"16Q24@"NSString"32^@40
v48@0:8@"NSDictionary"16Q24@"NSString"32@?<v@?@"NSDictionary"@"NSError">40
@"AXAccessQueue"24@0:8Q16
v24@0:8@"NSDictionary"16
v24@0:8@"NSString"16
@"NSString"24@0:8Q16
@"NSSet"24@0:8Q16
d16@0:8
v24@0:8@"UIViewController"16
d28@0:8@16B24
v32@0:8@16@24
d28@0:8@"UIViewController"16B24
v24@0:8@"UIWindowScene"16
v32@0:8@"UIWindowScene"16@"NSString"24
v20@0:8B16
v24@0:8@?16
{CGPoint=dd}32@0:8{CGPoint=dd}16
@40@0:8@16Q24Q32
v52@0:8@16@24@32B40q44
@20@0:8B16
@40@0:8@16B24B28q32
v32@0:8B16B20@?24
v28@0:8B16@?20
v20@0:8i16
v40@0:8q16@24@?32
@24@0:8@16
v48@0:8@16@24@32@40
q24@0:8q16
Q32@0:8{_NSRange=QQ}16
@40@0:8@16@24@32
v32@0:8@16@?24
v60@0:8@16{_NSRange=QQ}24@40B48B52B56
^{__AXObserver=}16@0:8
v24@0:8^{__AXObserver=}16
@?16@0:8
@"AXOrator"
@"AXSpeakOverlayViewController"
@"AXElement"
@"<UIElementProtocol>"
@"NSObject<OS_dispatch_queue>"
@"NSMutableSet"
@"NSMutableDictionary"
@"NSArray"
@"NSString"
^{__AXObserver=}
@"SpeakThisEventProcessor"
@"SpeakThisUIStateManager"
@"NSMutableArray"
@"AXSpeakingRange"
@"AXFocusManager"
@"AXUpdateElementVisualsCoalescer"
v24@0:8d16
@"UIVisualEffectView"
{CGSize=dd}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v40@0:8@16@24@32
@44@0:8@16@24B32:36
@"UIActivityIndicatorView"
@"AXSpeakScreenButton"
@"UILabel"
@"UIView"
{CGPoint="x"d"y"d}
@"<AXSpeakOverlayControlBarDelegate>"
@"UITapGestureRecognizer"
@"UILongPressGestureRecognizer"
d24@0:8@16
v24@0:8@"UIView"16
d24@0:8@"UIView"16
v24@0:8@"NSArray"16
v40@0:8{CGPoint=dd}16@"UIGestureRecognizer"32
v32@0:8{CGPoint=dd}16
{CGPoint=dd}32@0:8{CGSize=dd}16
v24@0:8B16B20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8Q16
v40@0:8{CGSize=dd}16@32
B32@0:8{CGPoint=dd}16
I16@0:8
v20@0:8I16
{CGPoint=dd}16@0:8
@"SBSSystemApertureLayoutMonitor"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"UIColor"
@"<AXSpeakOverlayViewControllerDelegate>"
@"AXSpeakOverlayControlBar"
@"QSSelectionHighlightView"
q16@0:8
v24@0:8q16
@"AXDispatchTimer"
@24@0:8^{_NSZone=}16
@36@0:8q16I24@28
@40@0:8@16i24@28i36
@"AXAssertion"
@"<SpeakThisEventProcessorDelegate>"
?333333
MbP?
message: %@, identifier: %luu, client: %@
Could not find app/scene/view, returning without speaking
Connection will be interrupted for %@.
Hiding all UI: %@, %@
AppendContent - no content: remove page turn element
Reset page turn element: %@
Stopping opaque element fetch because nil element found. Stopped after finding %lu elements.
The currently fetched element %@ could not be used for continued fetching, trying to recover using remote parent: %@
Received elements and strings: %{public}@
Content string was %{private}@
Speaking ranges were %{private}@
Clearing assertion for fetching more content. %p: %@
Invalidation error: %@
Assertion for fetching more content was unexpectedly invalidated.
Acquire staying alive assertion: %p %@  %@ %@
Could not make RBSTarget for %@
Acquire fetching content assertion: %@
We were asked to speak the screen, but the setting was off.  Bailing.
ERROR: Application accessibility was disabled even though Speak Screen was in use.  Please file a bug with details about what you were doing before you saw this message.
SpeakThis-FetchContent
Received error when resuming speaking, even though orator claimed we could resume: %@
SpeakThis-StartSpeaking
updating speaking rate to: %d
Update is highlight visible: %i
Received unknown message identifier %lu.
checking current app based on appPointValue %@
checking current app based on bundleid %@
unable to find AXElement for app with bundleID: %@
AXElement with kAXSpeakThisRootElementParametrizedAttribute: %@
checking current app for accessibilityIdentifier: %@
view with identifier:%@, not found
checking current app based on sceneid %@
defaulting to  kAXDefaultSpeakThisApplicationAttribute
Updated current app %@ (app point: %{public}@) to %{public}@
Finishing handling page scroll.  Did read next page: %i
Error speaking next page: %@
Updating assertion flags to keep app alive but not necessarily responsive.
Did not get page scroll notification in %f seconds.
Read next page if possible: %@
Allowing suspended app AX while we turn the page. %@
Updating flags on assertion so that we can fetch more content.
Waiting extra long for page turn.
Asking for page scroll: %@ %@
Page returned NO for scroll action.
Clear all assertions
speaking stopped, clearing
setting the app's speak this root element accessibility identifier to nil.
setting the app's speak this scene to nil.
Somehow spoke a string range %@ that contained an entire element's portion of our content string %@.
Will speak range %{public}@ corresponding to "%{public}@"
Not getting text rects because the app being spoken is not foremost
SpeakThis-FetchRects
Range in element was %{public}@
Skipping highlighting because web content is hidden. We are probably on a different tab
Starting to highlight web content because we are active again.
Got text rects %{public}@
Got sentence rects %{public}@
AXOrator requested more elements with scrolling %@
More elements were requested, but speak screen has stopped, so not providing any additional content.
Setting highlight content: %d
Is reading from frontmost app: %i
Page scroll sent notification of failure.
Adding content view controller %@ for window scene: %@
Content view controller already exists for %@
Removing content view controller %@ for window scene: %@
Window scene returned nil view controller: %@
Updating content view controller %@ for window scene: %@
Active display changed
External display connected
External display disconnected
Pid status changed: %{public}@
Screen changed
Page scrolled
Added event context for contextID: %u
Unable to remove event context for contextID: %u
Removed event context for contextID: %u
 - %@, %@
SpeakScreen.stbundle
MAIN-DISPLAY
v8@?0
speakscreen-fetch-queue
v24@?0q8@"NSDictionary"16
v16@?0@"NSString"8
com.apple.accessibility.speakScreen.update_listeners
SpeakScreen
v20@?0i8@"NSData"12
Speech controller was set to always be on by an external client
/Library/Caches/com.apple.xbs/Sources/AccessibilityFrameworks_Sim/Source/SpeakThisUIServer/SpeakThisUIServer.m
-[SpeakThisUIServer _appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:]
Unexpected type for content item returned by kAXSpeakThisInfoAttribute: %@
UIAccessibilitySpeakThisIdentifier
SpeakThis-LegacyMethodWasUsed
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
com.apple.Accessibility
SpeakScreenStayAlive
SpeakScreenFetchContent
Speak Screen Assertion-%d
v24@?0@"RBSAssertion"8@"NSError"16
NO_SPEAKABLE_CONTENT_EXISTS
v12@?0B8
SpeakThis
speakThisRangeInElement
speakThisCurrentString
speakThisWantsSentenceRects
speakThisIgnoreScrollToVisible
enabled
disabled
Speak under finger mode activated, need to steal all touches.
Speak screen was turned on with the speech controller always visible
Localizable
/System/Library/CoreServices/AssistiveTouch.app
SCATIcon_mediacontrols_pause
PAUSE
SCATIcon_mediacontrols_play
PLAY
square.fill
STOP_SPEAK_FINGER
SCAT
chevron.backward
MINIMIZE
SCATIcon_gestures_fingers1
SPEAK_FINGER
backward.end.fill
REWIND
forward.end.fill
FAST_FORWARD
xmark
STOP
SPEED_HALF
SPEED_NORMAL
SPEED_ONE_AND_HALF
SPEED_TWO
SPEED_GENERIC
chevron.forward
MAXIMIZE
B16@?0@8
SPEAK_SCREEN
HOME_SCREEN
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
SpeakThisUIServer
SpeakThisHIDDispatchQueue
B16@?0@"AXEventRepresentation"8
User is interacting with speech controller
elementWithUIElement:
traits
afterDelay:processBlock:
isPaused
localizedStringForKey:value:table:
removeObject:
isNeuralSiriVoiceIdentifier:
handInfo
server
objectForKeyedSubscript:
quickSpeakHighlightOption
elementWithAXUIElement:
addTarget:action:forControlEvents:
setTranslatesAutoresizingMaskIntoConstraints:
trailingAnchor
speakElementAtLocation:
length
removeLastObject
deactivateConstraints:
objectForKey:
state
setTitle:forState:
size
initWithActivityIndicatorStyle:
axElement
topAnchor
removeGestureRecognizer:
addTarget:action:
elementForAttribute:parameter:
postNotification:withData:
leadingAnchor
CGRectValue
objectAtIndexedSubscript:
startSpeakingWithPreferredLanguage:error:
attributes
indexOfObject:
setTintColor:
getRed:green:blue:alpha:
pointSize
titleLabel
layoutIfNeeded
isHandlingHIDEvents
cancelPreviousPerformRequestsWithTarget:selector:object:
setImage:forState:
addSubview:
setQuickSpeakNubbitNormalizedPosition:
cancelNubbitFade:
startSpeakingWithPreferredLanguage:delayBeforeStart:error:
attributeWithDomain:name:
objectAtIndex:
layer
effectWithStyle:
contentView
_convertRectFromSceneReferenceSpace:
setThreshold:
removeContentViewController:withUserInteractionEnabled:forService:
frame
cancel
addObserver:selector:name:object:
setCornerRadius:
imageWithTintColor:
numberWithInteger:
setProgressInterval:
setTextColor:
fontDescriptorWithSymbolicTraits:
effectForBlurEffect:style:
lastUtteranceLanguageCode
targetWithPid:
_convertPointFromSceneReferenceSpace:
isEqualToString:
updateCache:
setPriority:
pinNubbitToEdge:
content
removeAllObjects
imageWithConfiguration:
setTextAlignment:
startAnimating
sendUserEventOccurred
numberWithInt:
canResumeWithContent:
addObjectsFromArray:
assertionWithType:identifier:
doubleValue
target
fontAttributes
imageNamed:inBundle:
lastSpokenSubstringRange
sendSubviewToBack:
containsObject:
removeActionHandler:
currentSpeechRateForAdjustment
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
numberWithBool:
setPassivelyListeningForEvents:
setText:
remoteParent
isAXAttributedString
_contextId
setOrigin:
setContent:
callStackSymbols
setSupportsAccurateWordCallbacks:
lastObject
addObject:
showSpeechController
screen
performSelector:withObject:afterDelay:
numberWithAXAttribute:
labelColor
arrayWithObjects:count:
windowScene
floatValue
_accessibilityFindAncestor:startWithSelf:
invalidateWithError:
systemWideElement
constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:
addGestureRecognizer:
unsignedLongLongValue
setObject:forKeyedSubscript:
setState:
registerUpdateBlock:forRetrieveSelector:withListener:
windowContextId
buttonWithType:
arrayWithCapacity:
systemImageNamed:
label
displayIdentity
interfaceOrientation
performAXAction:withValue:
constraintEqualToSystemSpacingAfterAnchor:multiplier:
setNumberOfTapsRequired:
unsignedIntegerValue
scale
firstObject
registerSpringBoardActionHandler:withIdentifierCallback:
speechVoiceIdentifierForLanguage:source:exists:
arrayWithAXAttribute:
systemFontOfSize:
unregisterNubbit:shouldUndoFade:
window
notifyUpdateElementVisualsEventDidOccur
displayIdentifierForSceneIdentifier:
registerNubbit:delegate:
performAXAction:
integerValue
constraintEqualToAnchor:
nextFocusedView
addContentViewController:withUserInteractionEnabled:forService:context:userInterfaceStyle:allowSystemAppHosting:forWindowScene:completion:
arrayByAddingObjectsFromArray:
setAutoresizingMask:
whiteColor
keyInfo
setNumberOfLines:
intValue
setSpeakingRate:
setHIDEventHandler:
pauseSpeaking:
bundleWithPath:
subviews
fingerWasLiftedInSpeakUnderFingerMode
setNeedsLayout
displayConfiguration
registerNotifications:withIdentifier:withHandler:
addAdditionalContentToSpeechQueue:
configurationWithoutTextStyle
currentApplication
insertSubview:belowSubview:
rewindWithBoundary:
keyDown
array
view
setHIDEventFilterMask:
substringWithRange:
configurationWithPointSize:weight:scale:
bundleId
valueWithRect:
fastForwardWithBoundary:
registerBlockForStateChange:
paths
unregisterNotifications:
insertSubview:atIndex:
setAdjustsFontSizeToFitWidth:
keyCode
mutableCopy
applyElementAttributeCacheScheme:
setFrameOrigin:
bundleForClass:
setSpeakingContext:
subarrayWithRange:
colorWithWhite:alpha:
pathLocation
sharedDisplayManager
rectValue
bringSubviewToFront:
appendString:
resumeSpeakingAfterDelay:error:
valueWithRange:
countByEnumeratingWithState:objects:count:
stroke
colorWithRed:green:blue:alpha:
setSkipLuthorRules:
setFrame:
modifierState
insertObject:atIndex:
animateWithDuration:delay:options:animations:completion:
sharedApplication
initWithTargetSerialQueue:
explanation
bounds
valueWithCGRect:
resumeSpeaking:
count
setView:
stringWithFormat:
setFont:
animateWithDuration:animations:completion:
activateConstraints:
isVisible
setMasksToBounds:
origin
uiElementsWithAttribute:
colorWithCGColor:
speakUnderFingerModeStarted
bottomAnchor
valueWithCGPoint:
setAccessibilityRespondsToUserInteraction:
isSpringBoard
initWithTarget:action:
dictionaryWithObjects:forKeys:count:
setUserInteractionEnabled:
stringByAppendingFormat:
requireGestureRecognizerToFail:
rangeValue
acquireWithInvalidationHandler:
openApplication:withOptions:completion:
uiElementWithAXElement:
colorWithAlphaComponent:
initWithImage:
userManuallyExitedSpeakUnderFingerMode
setAccessibilityLabel:
eventType
animateWithDuration:animations:
copy
string
dictionary
uiElement
animateAlongsideTransition:completion:
colorWithAXAttribute:
updateVisualRects
denormalizedEventRepresentation:descale:
setUpdateVisualsSequenceInProgressHandler:
removeTarget:action:
mainScreen
setLineWidth:
setSentenceHighlight:
type
convertRect:fromView:
hasWebContent
setAccessibilityElements:
alpha
stopSpeaking:
boolWithAXAttribute:
isScreenLockedWithPasscode:
hasPrefix:
setUpdateVisualsSequenceDidFinishHandler:
lowercaseString
convertRect:fromContextId:
setSelectionColor:
speakSlower
quickSpeakSentenceHighlightOption
bezierPathWithRoundedRect:cornerRadius:
translationInView:
allocWithZone:
_setIdleTimerDisabled:forReason:
setAXAttribute:withString:
setEffect:
enumerateSubstringsInRange:options:usingBlock:
hasAttribute:
setUpdateVisualsSequenceDidBeginHandler:
_setFont:
removeObjectForKey:
speakFingerState
bezierPathWithOvalInRect:
translateKeycode
setIsSpeakScreenHighlightVisible:
convertPoint:toView:
defaultFontDescriptorWithTextStyle:
initWithExplanation:target:attributes:
objectWithAXAttribute:parameter:
hardwareIdentifier
localizedStringWithFormat:
code
endHandlingHIDEventsForReason:
serviceWithDefaultShellEndpoint
removeObjectAtIndex:
speakFaster
initWithEffect:
allKeys
stopAnimating
quickSpeakNubbitNormalizedPosition
objectWithAXAttribute:
beginHandlingHIDEventsForReason:
defaultCenter
description
element
setElement:
range
setRange:
.cxx_destruct
_element
_range
T@"AXUIElement",&,N,V_element
T{_NSRange=QQ},N,V_range
init
_didToggleSpeakScreenSetting
_didToggleHighlightContentSetting
quickSpeakWordHighlightColor
quickSpeakSentenceHighlightColor
speechControllerLongPressAction
speechControllerDoubleTapAction
dealloc
_reallyHideUI
_giveUpWaitingForPageToScroll
sharedInstance
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
oratorDidStartSpeaking:
oratorDidFinishSpeaking:
oratorDidPauseSpeaking:
oratorDidResumeSpeaking:
oratorDidCancelSpeaking:
orator:willSpeakRange:ofContent:
oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:
oratorDidChangeSpeakingRate:
speakElementAtPoint:withEventProcessor:
exitSpeakFingerModeWithEventProcessor:
isInSpeakUnderFingerModeWithEventProcessor:
speakThisUIFrameWithEventProcessor:
startNewReadAllFromGesture
activeDisplayChangedWithContext:
stopButtonPressed
isSpeaking
mainDisplayWindow
processMessage:withIdentifier:fromClientWithIdentifier:error:
messageWithIdentifierShouldBeProcessedAsynchronously:
processMessageAsynchronously:withIdentifier:fromClientWithIdentifier:completion:
accessQueueForProcessingMessageWithIdentifier:
messageWithIdentifierRequiresWritingBlock:
processInitializationMessage:
serviceWasFullyInitialized
connectionWillBeInterruptedForClientWithIdentifier:
requiredEntitlementForProcessingMessageWithIdentifier:
possibleRequiredEntitlementsForProcessingMessageWithIdentifier:
fastForwardButtonPressed
rewindButtonPressed
playButtonPressedForViewController:
pauseButtonPressed
stopSpeakFingerButtonPressed
speedButtonPressed
speakUnderFingerButtonPressed
speakingRateAsMultiplier
desiredWindowLevelForContentViewController:userInteractionEnabled:
shouldPreventAutorotatingAllContentViewControllers
externalDisplaySceneConnected:
externalDisplaySceneDisconnected:
externalDisplaySceneConnected:forSceneClientIdentifier:
externalDisplaySceneDisconnected:forSceneClientIdentifier:
_observeNotifications:
fetchContentStringStartingWithPageTurnForUnitTest:
_handleLockButtonPress
_initializeUIIfNeccessary
_handleHideUI
_handleLoadSpeakUnderfingerUI
_handleLoadUIAtAppPoint:
_handleUpdateUIForSpeakUnderFingerSettingsChange
_handleFinishShowingUI
_handleNoSpeakableContent:
convertPointToViewControllerSpace:
_updateVCWithLatestHighlightColors
_speakingRangeForContentItem:withContentItemLength:andPreviousContentStringLength:
_appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:
_fetchNextElementsFromOpaqueProviderAndScroll:
_fetchNextElementsAndReturnContentStringUsingAppElement:startingWithPageTurnElement:shouldScrollOpaqueProviderIfNecessary:deviceOrientation:
_fetchContentStartingWithPageTurnElement:shouldRefreshContent:completion:
_fetchNextSpeakThisElementsAndScrollOpaqueProviderIfNecessary:withCompletion:
_clearAssertions:
_assertionAttributesForStayingAlive
_assertionAttributesForFetchingMoreContent
_addStayingAliveAssertionForPid:
_addFetchingContentAssertionForPid:
_dispatchQueueForFetches
_handleSpeakThisWithOptions:appPoint:completion:
_handlePauseSpeaking
_handleResumeSpeaking
_handleToggleSpeaking
_handleSpeakFaster
_handleSpeakSlower
_handleUpdateSpeakingRate:
_handleFastForward:
_handleRewind:
_updateIsHighlightVisible
_handleUnknownMessageIdentifier:
_updateCurrentAppWithPoint:bundleID:sceneID:rootElementAccessibilityIdentifier:
_stsErrorCodeForOratorErrorCode:
_finishHandlingPageScroll:
_handleNewPage
_readNextPageIfApplicableInForwardDirection:completion:
setIdleTimerDisabled:
_clearAllAssertions
_handleSpeakingStopped
_findIndexOfRange:
_convertAXValueSceneReferenceRects:toView:fromElement:
_systemApp
_handleIdleTimerReset
_kbFrameWillUpdate:withCompletion:
_fetchTextRectsAndApplyHighlightToContent:withRange:elementRange:updateSentences:scrollWords:scrollSentences:
highlightWords
highlightSentences
_handleRateChangeSpeechIfNeeded:
currentVoiceIdentifier
halfSpeakingRateAsInt
standardSpeakingRateAsInt
oneAndAHalfSpeakingRateAsInt
doubleSpeakingRateAsInt
_frontmostAppMayHaveChanged:
_pageDidScroll:
_speakFingerStateChanged
_updateGestureRecognizers
_addContentViewControllerForWindowScene:
_removeViewControllerForWindowScene:
_updateViewControllerForWindowScene:completion:
keyboardFocusChangedForSceneIdentifier:
_windowSceneForActiveDisplay
windowSceneIdentifierForWindowScene:
speakingRangeAndElements
setSpeakingRangeAndElements:
springBoardActionHandlerId
setSpringBoardActionHandlerId:
observer
setObserver:
eventProcessor
setEventProcessor:
stateManager
setStateManager:
isReadingFromFrontmostApp
setIsReadingFromFrontmostApp:
needToRefreshContextIds
setNeedToRefreshContextIds:
isPausingAssistiveTechnology
setIsPausingAssistiveTechnology:
isFetchingContent
setIsFetchingContent:
isWaitingForPageScroll
setIsWaitingForPageScroll:
readNextPageCompletion
setReadNextPageCompletion:
assertionsForStayingAlive
setAssertionsForStayingAlive:
assertionsForFetchingContent
setAssertionsForFetchingContent:
sentenceRanges
setSentenceRanges:
currentSentenceRange
setCurrentSentenceRange:
currentSentenceElement
setCurrentSentenceElement:
currentSpeakingRange
setCurrentSpeakingRange:
currentWordRange
setCurrentWordRange:
currentContent
setCurrentContent:
lockButtonPressedSinceReadAllStart
setLockButtonPressedSinceReadAllStart:
waitingForNewReadAll
setWaitingForNewReadAll:
forceRectsToScroll
setForceRectsToScroll:
activeWebContentIsHidden
setActiveWebContentIsHidden:
focusManager
setFocusManager:
updateElementVisualsCoalescer
setUpdateElementVisualsCoalescer:
cachedIsHighlightVisible
setCachedIsHighlightVisible:
rootElementAccessibilityIdentifier
setRootElementAccessibilityIdentifier:
sceneIdentifier
setSceneIdentifier:
_orator
_viewController
_currentApp
_savedOpaqueParentForFetching
_currentElementForFetching
_currentElementForFetchingRemoteParent
_currentElementIndex
_currentPageTurnElement
_stopType
_fetchDispatchQueue
_speakScreenListeners
_suspendedSpeakScreenListeners
_speakScreenListenersUpdateQueue
_externalScenes
_speakThisUIViewControllers
_isReadingFromFrontmostApp
_needToRefreshContextIds
_isPausingAssistiveTechnology
_isFetchingContent
_isWaitingForPageScroll
_lockButtonPressedSinceReadAllStart
_waitingForNewReadAll
_forceRectsToScroll
_activeWebContentIsHidden
_cachedIsHighlightVisible
_speakingRangeAndElements
_springBoardActionHandlerId
_observer
_eventProcessor
_stateManager
_readNextPageCompletion
_assertionsForStayingAlive
_assertionsForFetchingContent
_sentenceRanges
_currentSentenceElement
_currentSpeakingRange
_currentContent
_focusManager
_updateElementVisualsCoalescer
_rootElementAccessibilityIdentifier
_sceneIdentifier
_currentSentenceRange
_currentWordRange
T@"NSArray",&,N,V_speakingRangeAndElements
T@"NSString",&,N,V_springBoardActionHandlerId
T^{__AXObserver=},&,N,V_observer
T@"SpeakThisEventProcessor",&,N,V_eventProcessor
T@"SpeakThisUIStateManager",&,N,V_stateManager
TB,N,V_isReadingFromFrontmostApp
TB,N,V_needToRefreshContextIds
TB,N,V_isPausingAssistiveTechnology
TB,N,V_isFetchingContent
TB,N,V_isWaitingForPageScroll
T@?,C,N,V_readNextPageCompletion
T@"NSMutableArray",&,N,V_assertionsForStayingAlive
T@"NSMutableArray",&,N,V_assertionsForFetchingContent
T@"NSMutableArray",&,N,V_sentenceRanges
T{_NSRange=QQ},N,V_currentSentenceRange
T@"AXUIElement",&,N,V_currentSentenceElement
T@"AXSpeakingRange",&,N,V_currentSpeakingRange
T{_NSRange=QQ},N,V_currentWordRange
T@"NSString",&,N,V_currentContent
TB,N,V_lockButtonPressedSinceReadAllStart
TB,N,V_waitingForNewReadAll
TB,N,V_forceRectsToScroll
TB,N,V_activeWebContentIsHidden
T@"AXFocusManager",&,N,V_focusManager
T@"AXUpdateElementVisualsCoalescer",&,N,V_updateElementVisualsCoalescer
TB,N,V_cachedIsHighlightVisible
T@"NSString",&,N,V_rootElementAccessibilityIdentifier
T@"NSString",&,N,V_sceneIdentifier
_speakThisAppendString:withPause:
setEnabled:
setHidden:
setAlpha:
buttonEffectView
setButtonEffectView:
borderEffectView
setBorderEffectView:
_buttonEffectView
_borderEffectView
T@"UIVisualEffectView",W,N,V_buttonEffectView
T@"UIVisualEffectView",&,N,V_borderEffectView
initWithFrame:
_handlePan:
_headerTapped:
_voiceOverStatusChanged
quickSpeakSpeakingRate
_speakUnderFingerButtonPressed
_tabModeButtonPressed
_startNewReadAllFromGesture:
_rewindButtonPressed
_playPauseButtonPressed
_fastForwardButtonPressed
_speedButtonPressed
_stopButtonPressed
nubbitSize
controlBarSize
updateHeaderLabel
setHidesMainViews:
showLoading
showMainUI
showSpeakFingerUI
hideStopButton
showStopButton
changeToPauseButton
changeToResumeButton
changeToStopButton
showErrorMessage:
_updateButton:withImageName:accessibilityLabel:
_addButtonWithImageName:accessibilityLabel:round:action:
updateButtonConstraints
_addButtonConstraints:
_loadButtonsAndConstraints:
currentSpeakingRateChanged
_updateSpeedButtonTitle
_stopSpeakFingerButtonPressed
updateNubbitGestureRecognizers
updateForTabModeChangeUsingSpeakFingerButton:
_buttons
_squareButtons
_roundButtons
_updateAccessibilityElements
didUpdateFocusInContext:withAnimationCoordinator:
delegate
setDelegate:
minimizedConstraints
setMinimizedConstraints:
maximizedConstraints
setMaximizedConstraints:
singleTapRecognizer
setSingleTapRecognizer:
doubleTapRecognizer
setDoubleTapRecognizer:
longPressRecognizer
setLongPressRecognizer:
_activityIndicatorView
_playPauseButton
_tabModeButton
_speakFingerButton
_stopButton
_rewindButton
_forwardButton
_speedButton
_headerLabel
_dragView
_errorLabel
_panGestureAnchor
_delegate
_minimizedConstraints
_maximizedConstraints
_singleTapRecognizer
_doubleTapRecognizer
_longPressRecognizer
T@"NSArray",&,N,V_minimizedConstraints
T@"NSArray",&,N,V_maximizedConstraints
T@"UITapGestureRecognizer",&,N,V_singleTapRecognizer
T@"UITapGestureRecognizer",&,N,V_doubleTapRecognizer
T@"UILongPressGestureRecognizer",&,N,V_longPressRecognizer
T@"<AXSpeakOverlayControlBarDelegate>",W,N,V_delegate
speechControllerIdleOpacity
showUI
viewWillTransitionToSize:withTransitionCoordinator:
_shouldForwardViewWillTransitionToSize
nubbitDidUpdatePosition:
idleOpacityForNubbit:
nubbitWillBeginDragging:
hostingWindowShouldMoveForReachability
handleReachabilityToggled:
didAnimateForReachabilityToOffset:
uiStateChanged
systemApertureLayoutDidChange:
playButtonPressed
tabModeButtonPressed
headerTapped
controlBarDragged:gestureRecognizer:
barDidReceiveFocus
loadView
_canShowWhileLocked
title
_initializeContainingView
updateUIForDisplayChange
resetUI
_updateUI
expandNubbit
collapseNubbit
updateUIForSpeakUnderFingerSettingsChange
updateBarWithAppTitleForApp:
showUIForApplication:
panToPosition:
moveBackInBounds
finishLoading
highlightColorForColor:
sentenceHighlightColorForColor:
highlightColor
setHighlightColor:
underlineColor
setUnderlineColor:
setHighlightSelectionRects:
sentenceHighlightSelectionRects
setSentenceHighlightSelectionRects:
_sliceRects:withSentenceRects:wordRects:
_enqueueCollapseTimer
_denormalizedNubbitOriginForViewSize:
_saveNubbitPosition
_registerNubbit
_unregisterNubbit
unregisterNubbit:
_updateForTabModeUsingSpeakFingerButton:animated:
_updateNubbitForTabModeChange
temporarilyHideUI
hideWithCompletion:
didPause
didResume
didStop
overlayFrame
_updateTabButtonToSpeakFingerButton
_updateTabButtonToExpandCollapseButton
updateSpeakUnderFingerState:
updateGestureRecognizers
handleKBFrameWillUpdate:
_axIsPointInForeheadRect:
highlightSelectionRects
contextID
setContextID:
setBar:
highlightView
setHighlightView:
sentenceHighlightView
setSentenceHighlightView:
nubbitMoveStartPosition
setNubbitMoveStartPosition:
gestureMoveStartPosition
setGestureMoveStartPosition:
currentUnmodifiedSentenceRects
setCurrentUnmodifiedSentenceRects:
reachabilityOffset
setReachabilityOffset:
ignoreNextNubbitPositionUpdate
setIgnoreNextNubbitPositionUpdate:
_containingView
_nubbitMovedOutsideOfTabMode
_layoutMonitor
_foreheadRect
_ignoreNextNubbitPositionUpdate
_contextID
_highlightColor
_underlineColor
_highlightSelectionRects
_bar
_highlightView
_sentenceHighlightView
_currentUnmodifiedSentenceRects
_reachabilityOffset
_nubbitMoveStartPosition
_gestureMoveStartPosition
T@"AXSpeakOverlayControlBar",&,N,V_bar
T@"QSSelectionHighlightView",&,N,V_highlightView
T@"QSSelectionHighlightView",&,N,V_sentenceHighlightView
T{CGPoint=dd},N,V_nubbitMoveStartPosition
T{CGPoint=dd},N,V_gestureMoveStartPosition
T@"NSArray",&,N,V_currentUnmodifiedSentenceRects
Td,N,V_reachabilityOffset
TB,N,V_ignoreNextNubbitPositionUpdate
T@"<AXSpeakOverlayViewControllerDelegate>",W,N,V_delegate
T@"NSArray",&,N,V_highlightSelectionRects
T@"NSArray",&,N
T@"UIColor",&,N,V_highlightColor
T@"UIColor",&,N,V_underlineColor
TI,N,V_contextID
setCurrentControllerTitle:
addObserver:
removeObserver:
_updateObservers
inTabMode
setInTabMode:
currentState
setCurrentState:
collapseTimer
setCollapseTimer:
currentAppBundleIdentifier
setCurrentAppBundleIdentifier:
currentControllerTitle
observers
setObservers:
_inTabMode
_currentState
_collapseTimer
_currentAppBundleIdentifier
_currentControllerTitle
_observers
T@"NSMutableSet",&,N,V_observers
TB,N,V_inTabMode
Tq,N,V_currentState
T@"AXDispatchTimer",&,N,V_collapseTimer
T@"NSString",&,N,V_currentAppBundleIdentifier
T@"NSString",&,N,V_currentControllerTitle
copyWithZone:
initWithDisplayID:contextID:displayHardwareID:
displayID
setDisplayID:
displayHardwareID
setDisplayHardwareID:
_displayID
_displayHardwareID
Tq,N,V_displayID
T@"NSString",&,N,V_displayHardwareID
initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:
addEventContextForWindow:
removeEventContextForContextID:
contextForDisplayID:
contextIdForActiveDisplay
_handleEvent:
activeDisplayId
setActiveDisplayId:
_hidDispatchQueue
_disableSystemGesturesAssertion
_eventContexts
lastMouseEventTime
_activeDisplayId
T@"<SpeakThisEventProcessorDelegate>",W,N,V_delegate
TQ,N,V_activeDisplayId
AXSpeakingRange
SpeakThisUIServer
AXOratorDelegate
NSObject
SpeakThisEventProcessorDelegate
AXUIService
AXSpeakOverlayViewControllerDelegate
AXUIContentViewControllerDelegate
SpeakThisUIServerAdditions
AXSpeakScreenButton
AXSpeakOverlayControlBar
AXSpeakOverlayViewController
AXUINubbitDelegate
AXUIViewControllerReachabilityHandler
SpeakThisUIStateManagerDelegate
SBSSystemApertureLayoutMonitoring
AXSpeakOverlayControlBarDelegate
SpeakThisUIStateManager
SpeakThisEventContext
NSCopying
SpeakThisEventProcessor
@16@0:8
v24@0:8@16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
v16@0:8
@"AXUIElement"
{_NSRange="location"Q"length"Q}
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16{_NSRange=QQ}24@40
v28@0:8@16B24
v24@0:8@"AXOrator"16
v48@0:8@"AXOrator"16{_NSRange=QQ}24@"NSString"40
v28@0:8@"AXOrator"16B24
v40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v40@0:8{CGPoint=dd}16@"SpeakThisEventProcessor"32
v24@0:8@"SpeakThisEventProcessor"16
B24@0:8@"SpeakThisEventProcessor"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"SpeakThisEventProcessor"16
v24@0:8@"SpeakThisEventContext"16
@"UIWindow"16@0:8
@48@0:8@16Q24@32^@40
B24@0:8Q16
v48@0:8@16Q24@32@?40
@24@0:8Q16
@"NSDictionary"48@0:8@"NSDictionary"16Q24@"NSString"32^@40
v48@0:8@"NSDictionary"16Q24@"NSString"32@?<v@?@"NSDictionary"@"NSError">40
@"AXAccessQueue"24@0:8Q16
v24@0:8@"NSDictionary"16
v24@0:8@"NSString"16
@"NSString"24@0:8Q16
@"NSSet"24@0:8Q16
d16@0:8
v24@0:8@"UIViewController"16
d28@0:8@16B24
v32@0:8@16@24
d28@0:8@"UIViewController"16B24
v24@0:8@"UIWindowScene"16
v32@0:8@"UIWindowScene"16@"NSString"24
v20@0:8B16
v24@0:8@?16
{CGPoint=dd}32@0:8{CGPoint=dd}16
@40@0:8@16Q24Q32
v52@0:8@16@24@32B40q44
@20@0:8B16
@40@0:8@16B24B28q32
v32@0:8B16B20@?24
v28@0:8B16@?20
v20@0:8i16
v40@0:8q16@24@?32
@24@0:8@16
v48@0:8@16@24@32@40
q24@0:8q16
Q32@0:8{_NSRange=QQ}16
@40@0:8@16@24@32
v32@0:8@16@?24
v60@0:8@16{_NSRange=QQ}24@40B48B52B56
^{__AXObserver=}16@0:8
v24@0:8^{__AXObserver=}16
@?16@0:8
@"AXOrator"
@"AXSpeakOverlayViewController"
@"AXElement"
@"<UIElementProtocol>"
@"NSObject<OS_dispatch_queue>"
@"NSMutableSet"
@"NSMutableDictionary"
@"NSArray"
@"NSString"
^{__AXObserver=}
@"SpeakThisEventProcessor"
@"SpeakThisUIStateManager"
@"NSMutableArray"
@"AXSpeakingRange"
@"AXFocusManager"
@"AXUpdateElementVisualsCoalescer"
v24@0:8d16
@"UIVisualEffectView"
{CGSize=dd}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v40@0:8@16@24@32
@44@0:8@16@24B32:36
@"UIActivityIndicatorView"
@"AXSpeakScreenButton"
@"UILabel"
@"UIView"
{CGPoint="x"d"y"d}
@"<AXSpeakOverlayControlBarDelegate>"
@"UITapGestureRecognizer"
@"UILongPressGestureRecognizer"
d24@0:8@16
v24@0:8@"UIView"16
d24@0:8@"UIView"16
v24@0:8@"NSArray"16
v40@0:8{CGPoint=dd}16@"UIGestureRecognizer"32
v32@0:8{CGPoint=dd}16
{CGPoint=dd}32@0:8{CGSize=dd}16
v24@0:8B16B20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8Q16
v40@0:8{CGSize=dd}16@32
B32@0:8{CGPoint=dd}16
I16@0:8
v20@0:8I16
{CGPoint=dd}16@0:8
@"SBSSystemApertureLayoutMonitor"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"UIColor"
@"<AXSpeakOverlayViewControllerDelegate>"
@"AXSpeakOverlayControlBar"
@"QSSelectionHighlightView"
q16@0:8
v24@0:8q16
@"AXDispatchTimer"
@24@0:8^{_NSZone=}16
@36@0:8q16I24@28
@40@0:8@16i24@28i36
@"AXAssertion"
@"<SpeakThisEventProcessorDelegate>"
?333333
MbP?
message: %@, identifier: %luu, client: %@
Could not find app/scene/view, returning without speaking
Connection will be interrupted for %@.
Hiding all UI: %@, %@
AppendContent - no content: remove page turn element
Reset page turn element: %@
Stopping opaque element fetch because nil element found. Stopped after finding %lu elements.
The currently fetched element %@ could not be used for continued fetching, trying to recover using remote parent: %@
Received elements and strings: %{public}@
Content string was %{private}@
Speaking ranges were %{private}@
Clearing assertion for fetching more content. %p: %@
Invalidation error: %@
Assertion for fetching more content was unexpectedly invalidated.
Acquire staying alive assertion: %p %@  %@ %@
Could not make RBSTarget for %@
Acquire fetching content assertion: %@
We were asked to speak the screen, but the setting was off.  Bailing.
ERROR: Application accessibility was disabled even though Speak Screen was in use.  Please file a bug with details about what you were doing before you saw this message.
SpeakThis-FetchContent
Received error when resuming speaking, even though orator claimed we could resume: %@
SpeakThis-StartSpeaking
updating speaking rate to: %d
Update is highlight visible: %i
Received unknown message identifier %lu.
checking current app based on appPointValue %@
checking current app based on bundleid %@
unable to find AXElement for app with bundleID: %@
AXElement with kAXSpeakThisRootElementParametrizedAttribute: %@
checking current app for accessibilityIdentifier: %@
view with identifier:%@, not found
checking current app based on sceneid %@
defaulting to  kAXDefaultSpeakThisApplicationAttribute
Updated current app %@ (app point: %{public}@) to %{public}@
Finishing handling page scroll.  Did read next page: %i
Error speaking next page: %@
Updating assertion flags to keep app alive but not necessarily responsive.
Did not get page scroll notification in %f seconds.
Read next page if possible: %@
Allowing suspended app AX while we turn the page. %@
Updating flags on assertion so that we can fetch more content.
Waiting extra long for page turn.
Asking for page scroll: %@ %@
Page returned NO for scroll action.
Clear all assertions
speaking stopped, clearing
setting the app's speak this root element accessibility identifier to nil.
setting the app's speak this scene to nil.
Somehow spoke a string range %@ that contained an entire element's portion of our content string %@.
Will speak range %{public}@ corresponding to "%{public}@"
Not getting text rects because the app being spoken is not foremost
SpeakThis-FetchRects
Range in element was %{public}@
Skipping highlighting because web content is hidden. We are probably on a different tab
Starting to highlight web content because we are active again.
Got text rects %{public}@
Got sentence rects %{public}@
AXOrator requested more elements with scrolling %@
More elements were requested, but speak screen has stopped, so not providing any additional content.
Setting highlight content: %d
Is reading from frontmost app: %i
Page scroll sent notification of failure.
Adding content view controller %@ for window scene: %@
Content view controller already exists for %@
Removing content view controller %@ for window scene: %@
Window scene returned nil view controller: %@
Updating content view controller %@ for window scene: %@
Active display changed
External display connected
External display disconnected
Pid status changed: %{public}@
Screen changed
Page scrolled
Added event context for contextID: %u
Unable to remove event context for contextID: %u
Removed event context for contextID: %u
