 - %@, %@
SpeakScreen.stbundle
MAIN-DISPLAY
v8@?0
speakscreen-fetch-queue
v24@?0q8@"NSDictionary"16
v16@?0@"NSString"8
com.apple.accessibility.speakScreen.update_listeners
SpeakScreen
v20@?0i8@"NSData"12
Speech controller was set to always be on by an external client
/Library/Caches/com.apple.xbs/Sources/AccessibilityFrameworks_Sim/Source/SpeakThisUIServer/SpeakThisUIServer.m
-[SpeakThisUIServer _appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:]
Unexpected type for content item returned by kAXSpeakThisInfoAttribute: %@
UIAccessibilitySpeakThisIdentifier
SpeakThis-LegacyMethodWasUsed
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
com.apple.Accessibility
SpeakScreenStayAlive
SpeakScreenFetchContent
Speak Screen Assertion-%d
v24@?0@"RBSAssertion"8@"NSError"16
NO_SPEAKABLE_CONTENT_EXISTS
v12@?0B8
SpeakThis
speakThisRangeInElement
speakThisCurrentString
speakThisWantsSentenceRects
speakThisIgnoreScrollToVisible
enabled
disabled
Speak under finger mode activated, need to steal all touches.
Speak screen was turned on with the speech controller always visible
Localizable
/System/Library/CoreServices/AssistiveTouch.app
SCATIcon_mediacontrols_pause
PAUSE
SCATIcon_mediacontrols_play
PLAY
square.fill
STOP_SPEAK_FINGER
SCAT
chevron.backward
MINIMIZE
SCATIcon_gestures_fingers1
SPEAK_FINGER
backward.end.fill
REWIND
forward.end.fill
FAST_FORWARD
xmark
STOP
SPEED_HALF
SPEED_NORMAL
SPEED_ONE_AND_HALF
SPEED_TWO
SPEED_GENERIC
chevron.forward
MAXIMIZE
B16@?0@8
SPEAK_SCREEN
HOME_SCREEN
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
SpeakThisUIServer
SpeakThisHIDDispatchQueue
B16@?0@"AXEventRepresentation"8
User is interacting with speech controller
T@"NSArray",&,N
CGRectValue
TB,N,V_cachedIsHighlightVisible
T@"<AXSpeakOverlayControlBarDelegate>",W,N,V_delegate
_currentContent
T@"<SpeakThisEventProcessorDelegate>",W,N,V_delegate
_disableSystemGesturesAssertion
T@"AXFocusManager",&,N,V_focusManager
_externalScenes
T@"AXSpeakingRange",&,N,V_currentSpeakingRange
_ignoreNextNubbitPositionUpdate
T@"AXUIElement",&,N,V_element
_pageDidScroll:
T@"NSArray",&,N,V_currentUnmodifiedSentenceRects
_sentenceRanges
T@"NSArray",&,N,V_maximizedConstraints
_viewController
T@"NSArray",&,N,V_speakingRangeAndElements
activeDisplayId
T@"NSMutableArray",&,N,V_assertionsForStayingAlive
animateWithDuration:animations:
T@"NSMutableSet",&,N,V_observers
bundleForClass:
T@"NSString",&,N,V_currentContent
buttonWithType:
T@"NSString",&,N,V_displayHardwareID
content
T@"NSString",&,N,V_sceneIdentifier
didStop
T@"NSString",R,C
element
T@"QSSelectionHighlightView",&,N,V_sentenceHighlightView
initWithEffect:
T@"SpeakThisUIStateManager",&,N,V_stateManager
keyCode
T@"UIColor",&,N,V_underlineColor
keyInfo
T@"UITapGestureRecognizer",&,N,V_doubleTapRecognizer
nextFocusedView
T@"UIVisualEffectView",&,N,V_borderEffectView
T@?,C,N,V_readNextPageCompletion
release
TB,N,V_ignoreNextNubbitPositionUpdate
removeObserver:
TB,N,V_isFetchingContent
resetUI
TB,N,V_isReadingFromFrontmostApp
resumeSpeakingAfterDelay:error:
TB,N,V_lockButtonPressedSinceReadAllStart
sentenceHighlightColorForColor:
TB,N,V_waitingForNewReadAll
serviceWithDefaultShellEndpoint
TQ,N,V_activeDisplayId
setBar:
T^{__AXObserver=},&,N,V_observer
setPassivelyListeningForEvents:
Tq,N,V_currentState
speechControllerLongPressAction
T{CGPoint=dd},N,V_gestureMoveStartPosition
windowContextId
.cxx_destruct
TB,N,V_activeWebContentIsHidden
T#,R
_containingView
T@"<AXSpeakOverlayViewControllerDelegate>",W,N,V_delegate
_currentUnmodifiedSentenceRects
T@"AXDispatchTimer",&,N,V_collapseTimer
_eventProcessor
T@"AXSpeakOverlayControlBar",&,N,V_bar
_highlightColor
T@"AXUIElement",&,N,V_currentSentenceElement
_orator
T@"AXUpdateElementVisualsCoalescer",&,N,V_updateElementVisualsCoalescer
_registerNubbit
T@"NSArray",&,N,V_highlightSelectionRects
_underlineColor
T@"NSArray",&,N,V_minimizedConstraints
acquireWithInvalidationHandler:
T@"NSMutableArray",&,N,V_assertionsForFetchingContent
allKeys
T@"NSMutableArray",&,N,V_sentenceRanges
T@"NSString",&,N,V_currentAppBundleIdentifier
bundleWithPath:
T@"NSString",&,N,V_currentControllerTitle
containsObject:
T@"NSString",&,N,V_rootElementAccessibilityIdentifier
dealloc
T@"NSString",&,N,V_springBoardActionHandlerId
displayIdentity
T@"QSSelectionHighlightView",&,N,V_highlightView
initWithActivityIndicatorStyle:
T@"SpeakThisEventProcessor",&,N,V_eventProcessor
isProxy
T@"UIColor",&,N,V_highlightColor
keyDown
T@"UILongPressGestureRecognizer",&,N,V_longPressRecognizer
lowercaseString
T@"UITapGestureRecognizer",&,N,V_singleTapRecognizer
numberWithBool:
T@"UIVisualEffectView",W,N,V_buttonEffectView
possibleRequiredEntitlementsForProcessingMessageWithIdentifier:
TB,N,V_forceRectsToScroll
removeEventContextForContextID:
TB,N,V_inTabMode
requireGestureRecognizerToFail:
TB,N,V_isPausingAssistiveTechnology
resumeSpeaking:
TB,N,V_isWaitingForPageScroll
sceneIdentifier
TB,N,V_needToRefreshContextIds
sentenceHighlightSelectionRects
TI,N,V_contextID
TQ,R
setFrameOrigin:
Td,N,V_reachabilityOffset
speechControllerDoubleTapAction
Tq,N,V_displayID
valueWithRange:
T{CGPoint=dd},N,V_nubbitMoveStartPosition
T{_NSRange=QQ},N,V_currentSentenceRange
T{_NSRange=QQ},N,V_currentWordRange
T{_NSRange=QQ},N,V_range
_accessibilityFindAncestor:startWithSelf:
_activeDisplayId
_activeWebContentIsHidden
_activityIndicatorView
_addButtonConstraints:
_addButtonWithImageName:accessibilityLabel:round:action:
_addContentViewControllerForWindowScene:
_addFetchingContentAssertionForPid:
_addStayingAliveAssertionForPid:
_appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:
_assertionAttributesForFetchingMoreContent
_assertionAttributesForStayingAlive
_assertionsForFetchingContent
_assertionsForStayingAlive
_axIsPointInForeheadRect:
_bar
_borderEffectView
_buttonEffectView
_buttons
_cachedIsHighlightVisible
_canShowWhileLocked
_clearAllAssertions
_clearAssertions:
_collapseTimer
_contextID
_contextId
_convertAXValueSceneReferenceRects:toView:fromElement:
_convertPointFromSceneReferenceSpace:
_convertRectFromSceneReferenceSpace:
_currentApp
_currentAppBundleIdentifier
_currentControllerTitle
_currentElementForFetching
_currentElementForFetchingRemoteParent
_currentElementIndex
_currentPageTurnElement
_currentSentenceElement
_currentSentenceRange
_currentSpeakingRange
_currentState
_currentWordRange
_delegate
_denormalizedNubbitOriginForViewSize:
_didToggleHighlightContentSetting
_didToggleSpeakScreenSetting
_dispatchQueueForFetches
_displayHardwareID
_displayID
_doubleTapRecognizer
_dragView
_element
_enqueueCollapseTimer
_errorLabel
_eventContexts
_fastForwardButtonPressed
_fetchContentStartingWithPageTurnElement:shouldRefreshContent:completion:
_fetchDispatchQueue
_fetchNextElementsAndReturnContentStringUsingAppElement:startingWithPageTurnElement:shouldScrollOpaqueProviderIfNecessary:deviceOrientation:
_fetchNextElementsFromOpaqueProviderAndScroll:
_fetchNextSpeakThisElementsAndScrollOpaqueProviderIfNecessary:withCompletion:
_fetchTextRectsAndApplyHighlightToContent:withRange:elementRange:updateSentences:scrollWords:scrollSentences:
_findIndexOfRange:
_finishHandlingPageScroll:
_focusManager
_forceRectsToScroll
_foreheadRect
_forwardButton
_frontmostAppMayHaveChanged:
_gestureMoveStartPosition
_giveUpWaitingForPageToScroll
_handleEvent:
_handleFastForward:
_handleFinishShowingUI
_handleHideUI
_handleIdleTimerReset
_handleLoadSpeakUnderfingerUI
_handleLoadUIAtAppPoint:
_handleLockButtonPress
_handleNewPage
_handleNoSpeakableContent:
_handlePan:
_handlePauseSpeaking
_handleRateChangeSpeechIfNeeded:
_handleResumeSpeaking
_handleRewind:
_handleSpeakFaster
_handleSpeakSlower
_handleSpeakThisWithOptions:appPoint:completion:
_handleSpeakingStopped
_handleToggleSpeaking
_handleUnknownMessageIdentifier:
_handleUpdateSpeakingRate:
_handleUpdateUIForSpeakUnderFingerSettingsChange
_headerLabel
_headerTapped:
_hidDispatchQueue
_highlightSelectionRects
_highlightView
_inTabMode
_initializeContainingView
_initializeUIIfNeccessary
_isFetchingContent
_isPausingAssistiveTechnology
_isReadingFromFrontmostApp
_isWaitingForPageScroll
_kbFrameWillUpdate:withCompletion:
_layoutMonitor
_loadButtonsAndConstraints:
_lockButtonPressedSinceReadAllStart
_longPressRecognizer
_maximizedConstraints
_minimizedConstraints
_needToRefreshContextIds
_nubbitMoveStartPosition
_nubbitMovedOutsideOfTabMode
_observeNotifications:
_observer
_observers
_panGestureAnchor
_playPauseButton
_playPauseButtonPressed
_range
_reachabilityOffset
_readNextPageCompletion
_readNextPageIfApplicableInForwardDirection:completion:
_reallyHideUI
_removeViewControllerForWindowScene:
_rewindButton
_rewindButtonPressed
_rootElementAccessibilityIdentifier
_roundButtons
_saveNubbitPosition
_savedOpaqueParentForFetching
_sceneIdentifier
_sentenceHighlightView
_setFont:
_setIdleTimerDisabled:forReason:
_shouldForwardViewWillTransitionToSize
_singleTapRecognizer
_sliceRects:withSentenceRects:wordRects:
_speakFingerButton
_speakFingerStateChanged
_speakScreenListeners
_speakScreenListenersUpdateQueue
_speakThisAppendString:withPause:
_speakThisUIViewControllers
_speakUnderFingerButtonPressed
_speakingRangeAndElements
_speakingRangeForContentItem:withContentItemLength:andPreviousContentStringLength:
_speedButton
_speedButtonPressed
_springBoardActionHandlerId
_squareButtons
_startNewReadAllFromGesture:
_stateManager
_stopButton
_stopButtonPressed
_stopSpeakFingerButtonPressed
_stopType
_stsErrorCodeForOratorErrorCode:
_suspendedSpeakScreenListeners
_systemApp
_tabModeButton
_tabModeButtonPressed
_unregisterNubbit
_updateAccessibilityElements
_updateButton:withImageName:accessibilityLabel:
_updateCurrentAppWithPoint:bundleID:sceneID:rootElementAccessibilityIdentifier:
_updateElementVisualsCoalescer
_updateForTabModeUsingSpeakFingerButton:animated:
_updateGestureRecognizers
_updateIsHighlightVisible
_updateNubbitForTabModeChange
_updateObservers
_updateSpeedButtonTitle
_updateTabButtonToExpandCollapseButton
_updateTabButtonToSpeakFingerButton
_updateUI
_updateVCWithLatestHighlightColors
_updateViewControllerForWindowScene:completion:
_voiceOverStatusChanged
_waitingForNewReadAll
_windowSceneForActiveDisplay
accessQueueForProcessingMessageWithIdentifier:
activateConstraints:
activeDisplayChangedWithContext:
activeWebContentIsHidden
addAdditionalContentToSpeechQueue:
addContentViewController:withUserInteractionEnabled:forService:context:userInterfaceStyle:allowSystemAppHosting:forWindowScene:completion:
addEventContextForWindow:
addGestureRecognizer:
addObject:
addObjectsFromArray:
addObserver:
addObserver:selector:name:object:
addSubview:
addTarget:action:
addTarget:action:forControlEvents:
afterDelay:processBlock:
allocWithZone:
alpha
animateAlongsideTransition:completion:
animateWithDuration:animations:completion:
animateWithDuration:delay:options:animations:completion:
appendString:
applyElementAttributeCacheScheme:
array
arrayByAddingObjectsFromArray:
arrayWithAXAttribute:
arrayWithCapacity:
arrayWithObjects:count:
assertionWithType:identifier:
assertionsForFetchingContent
assertionsForStayingAlive
attributeWithDomain:name:
attributes
autorelease
axElement
barDidReceiveFocus
beginHandlingHIDEventsForReason:
bezierPathWithOvalInRect:
bezierPathWithRoundedRect:cornerRadius:
boolWithAXAttribute:
borderEffectView
bottomAnchor
bounds
bringSubviewToFront:
bundleId
buttonEffectView
cachedIsHighlightVisible
callStackSymbols
canResumeWithContent:
cancel
cancelNubbitFade:
cancelPreviousPerformRequestsWithTarget:selector:object:
changeToPauseButton
changeToResumeButton
changeToStopButton
class
code
collapseNubbit
collapseTimer
colorWithAXAttribute:
colorWithAlphaComponent:
colorWithCGColor:
colorWithRed:green:blue:alpha:
colorWithWhite:alpha:
configurationWithPointSize:weight:scale:
configurationWithoutTextStyle
conformsToProtocol:
connectionWillBeInterruptedForClientWithIdentifier:
constraintEqualToAnchor:
constraintEqualToSystemSpacingAfterAnchor:multiplier:
constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
contentView
contextForDisplayID:
contextID
contextIdForActiveDisplay
controlBarDragged:gestureRecognizer:
controlBarSize
convertPoint:toView:
convertPointToViewControllerSpace:
convertRect:fromContextId:
convertRect:fromView:
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentAppBundleIdentifier
currentApplication
currentContent
currentControllerTitle
currentSentenceElement
currentSentenceRange
currentSpeakingRange
currentSpeakingRateChanged
currentSpeechRateForAdjustment
currentState
currentUnmodifiedSentenceRects
currentVoiceIdentifier
currentWordRange
deactivateConstraints:
debugDescription
defaultCenter
defaultFontDescriptorWithTextStyle:
delegate
denormalizedEventRepresentation:descale:
description
desiredWindowLevelForContentViewController:userInteractionEnabled:
dictionary
dictionaryWithObjects:forKeys:count:
didAnimateForReachabilityToOffset:
didPause
didResume
didUpdateFocusInContext:withAnimationCoordinator:
displayConfiguration
displayHardwareID
displayID
displayIdentifierForSceneIdentifier:
doubleSpeakingRateAsInt
doubleTapRecognizer
doubleValue
effectForBlurEffect:style:
effectWithStyle:
elementForAttribute:parameter:
elementWithAXUIElement:
elementWithUIElement:
endHandlingHIDEventsForReason:
enumerateSubstringsInRange:options:usingBlock:
eventProcessor
eventType
exitSpeakFingerModeWithEventProcessor:
expandNubbit
explanation
externalDisplaySceneConnected:
externalDisplaySceneConnected:forSceneClientIdentifier:
externalDisplaySceneDisconnected:
externalDisplaySceneDisconnected:forSceneClientIdentifier:
fastForwardButtonPressed
fastForwardWithBoundary:
fetchContentStringStartingWithPageTurnForUnitTest:
fingerWasLiftedInSpeakUnderFingerMode
finishLoading
firstObject
floatValue
focusManager
fontAttributes
fontDescriptorWithSymbolicTraits:
forceRectsToScroll
frame
gestureMoveStartPosition
getRed:green:blue:alpha:
halfSpeakingRateAsInt
handInfo
handleKBFrameWillUpdate:
handleReachabilityToggled:
hardwareIdentifier
hasAttribute:
hasPrefix:
hasWebContent
hash
headerTapped
hideStopButton
hideWithCompletion:
highlightColor
highlightColorForColor:
highlightSelectionRects
highlightSentences
highlightView
highlightWords
hostingWindowShouldMoveForReachability
idleOpacityForNubbit:
ignoreNextNubbitPositionUpdate
imageNamed:inBundle:
imageWithConfiguration:
imageWithTintColor:
inTabMode
indexOfObject:
init
initWithDisplayID:contextID:displayHardwareID:
initWithExplanation:target:attributes:
initWithFrame:
initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:
initWithImage:
initWithTarget:action:
initWithTargetSerialQueue:
insertObject:atIndex:
insertSubview:atIndex:
insertSubview:belowSubview:
intValue
integerValue
interfaceOrientation
invalidateWithError:
isAXAttributedString
isEqual:
isEqualToString:
isFetchingContent
isHandlingHIDEvents
isInSpeakUnderFingerModeWithEventProcessor:
isKindOfClass:
isMemberOfClass:
isNeuralSiriVoiceIdentifier:
isPaused
isPausingAssistiveTechnology
isReadingFromFrontmostApp
isScreenLockedWithPasscode:
isSpeaking
isSpringBoard
isVisible
isWaitingForPageScroll
keyboardFocusChangedForSceneIdentifier:
label
labelColor
lastMouseEventTime
lastObject
lastSpokenSubstringRange
lastUtteranceLanguageCode
layer
layoutIfNeeded
leadingAnchor
length
loadView
localizedStringForKey:value:table:
localizedStringWithFormat:
lockButtonPressedSinceReadAllStart
longPressRecognizer
mainDisplayWindow
mainScreen
maximizedConstraints
messageWithIdentifierRequiresWritingBlock:
messageWithIdentifierShouldBeProcessedAsynchronously:
minimizedConstraints
modifierState
moveBackInBounds
mutableCopy
needToRefreshContextIds
notifyUpdateElementVisualsEventDidOccur
nubbitDidUpdatePosition:
nubbitMoveStartPosition
nubbitSize
nubbitWillBeginDragging:
numberWithAXAttribute:
numberWithInt:
numberWithInteger:
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
objectWithAXAttribute:
objectWithAXAttribute:parameter:
observer
observers
oneAndAHalfSpeakingRateAsInt
openApplication:withOptions:completion:
orator:willSpeakRange:ofContent:
oratorDidCancelSpeaking:
oratorDidChangeSpeakingRate:
oratorDidFinishSpeaking:
oratorDidPauseSpeaking:
oratorDidResumeSpeaking:
oratorDidStartSpeaking:
oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:
origin
overlayFrame
panToPosition:
pathLocation
paths
pauseButtonPressed
pauseSpeaking:
performAXAction:
performAXAction:withValue:
performSelector:
performSelector:withObject:
performSelector:withObject:afterDelay:
performSelector:withObject:withObject:
pinNubbitToEdge:
playButtonPressed
playButtonPressedForViewController:
pointSize
postNotification:withData:
processInitializationMessage:
processMessage:withIdentifier:fromClientWithIdentifier:error:
processMessageAsynchronously:withIdentifier:fromClientWithIdentifier:completion:
quickSpeakHighlightOption
quickSpeakNubbitNormalizedPosition
quickSpeakSentenceHighlightColor
quickSpeakSentenceHighlightOption
quickSpeakSpeakingRate
quickSpeakWordHighlightColor
range
rangeValue
reachabilityOffset
readNextPageCompletion
rectValue
registerBlockForStateChange:
registerNotifications:withIdentifier:withHandler:
registerNubbit:delegate:
registerSpringBoardActionHandler:withIdentifierCallback:
registerUpdateBlock:forRetrieveSelector:withListener:
remoteParent
removeActionHandler:
removeAllObjects
removeContentViewController:withUserInteractionEnabled:forService:
removeGestureRecognizer:
removeLastObject
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeTarget:action:
requiredEntitlementForProcessingMessageWithIdentifier:
respondsToSelector:
retain
retainCount
rewindButtonPressed
rewindWithBoundary:
rootElementAccessibilityIdentifier
scale
screen
self
sendSubviewToBack:
sendUserEventOccurred
sentenceHighlightView
sentenceRanges
server
serviceWasFullyInitialized
setAXAttribute:withString:
setAccessibilityElements:
setAccessibilityIgnoresInvertColors:
setAccessibilityLabel:
setAccessibilityRespondsToUserInteraction:
setActiveDisplayId:
setActiveWebContentIsHidden:
setAdjustsFontSizeToFitWidth:
setAlpha:
setAssertionsForFetchingContent:
setAssertionsForStayingAlive:
setAutoresizingMask:
setBorderEffectView:
setButtonEffectView:
setCachedIsHighlightVisible:
setCollapseTimer:
setContent:
setContextID:
setCornerRadius:
setCurrentAppBundleIdentifier:
setCurrentContent:
setCurrentControllerTitle:
setCurrentSentenceElement:
setCurrentSentenceRange:
setCurrentSpeakingRange:
setCurrentState:
setCurrentUnmodifiedSentenceRects:
setCurrentWordRange:
setDelegate:
setDisplayHardwareID:
setDisplayID:
setDoubleTapRecognizer:
setEffect:
setElement:
setEnabled:
setEventProcessor:
setFocusManager:
setFont:
setForceRectsToScroll:
setFrame:
setGestureMoveStartPosition:
setHIDEventFilterMask:
setHIDEventHandler:
setHidden:
setHidesMainViews:
setHighlightColor:
setHighlightSelectionRects:
setHighlightView:
setIdleTimerDisabled:
setIgnoreNextNubbitPositionUpdate:
setImage:forState:
setInTabMode:
setIsFetchingContent:
setIsPausingAssistiveTechnology:
setIsReadingFromFrontmostApp:
setIsSpeakScreenHighlightVisible:
setIsWaitingForPageScroll:
setLineWidth:
setLockButtonPressedSinceReadAllStart:
setLongPressRecognizer:
setMasksToBounds:
setMaximizedConstraints:
setMinimizedConstraints:
setNeedToRefreshContextIds:
setNeedsLayout
setNubbitMoveStartPosition:
setNumberOfLines:
setNumberOfTapsRequired:
setObject:forKeyedSubscript:
setObserver:
setObservers:
setOrigin:
setPriority:
setProgressInterval:
setQuickSpeakNubbitNormalizedPosition:
setRange:
setReachabilityOffset:
setReadNextPageCompletion:
setRootElementAccessibilityIdentifier:
setSceneIdentifier:
setSelectionColor:
setSentenceHighlight:
setSentenceHighlightSelectionRects:
setSentenceHighlightView:
setSentenceRanges:
setSingleTapRecognizer:
setSkipLuthorRules:
setSpeakingContext:
setSpeakingRangeAndElements:
setSpeakingRate:
setSpringBoardActionHandlerId:
setState:
setStateManager:
setSupportsAccurateWordCallbacks:
setText:
setTextAlignment:
setTextColor:
setThreshold:
setTintColor:
setTitle:forState:
setTranslatesAutoresizingMaskIntoConstraints:
setUnderlineColor:
setUpdateElementVisualsCoalescer:
setUpdateVisualsSequenceDidBeginHandler:
setUpdateVisualsSequenceDidFinishHandler:
setUpdateVisualsSequenceInProgressHandler:
setUserInteractionEnabled:
setView:
setWaitingForNewReadAll:
sharedApplication
sharedDisplayManager
sharedInstance
shouldPreventAutorotatingAllContentViewControllers
showErrorMessage:
showLoading
showMainUI
showSpeakFingerUI
showSpeechController
showStopButton
showUI
showUIForApplication:
singleTapRecognizer
size
speakElementAtLocation:
speakElementAtPoint:withEventProcessor:
speakFaster
speakFingerState
speakSlower
speakThisUIFrameWithEventProcessor:
speakUnderFingerButtonPressed
speakUnderFingerModeStarted
speakingRangeAndElements
speakingRateAsMultiplier
speechControllerIdleOpacity
speechVoiceIdentifierForLanguage:source:exists:
speedButtonPressed
springBoardActionHandlerId
standardSpeakingRateAsInt
startAnimating
startNewReadAllFromGesture
startSpeakingWithPreferredLanguage:delayBeforeStart:error:
startSpeakingWithPreferredLanguage:error:
state
stateManager
stopAnimating
stopButtonPressed
stopSpeakFingerButtonPressed
stopSpeaking:
string
stringByAppendingFormat:
stringWithFormat:
stroke
subarrayWithRange:
substringWithRange:
subviews
superclass
systemApertureLayoutDidChange:
systemFontOfSize:
systemImageNamed:
systemWideElement
tabModeButtonPressed
target
targetWithPid:
temporarilyHideUI
title
titleLabel
topAnchor
trailingAnchor
traits
translateKeycode
translationInView:
type
uiElement
uiElementWithAXElement:
uiElementsWithAttribute:
uiStateChanged
underlineColor
unregisterNotifications:
unregisterNubbit:
unregisterNubbit:shouldUndoFade:
unsignedIntegerValue
unsignedLongLongValue
updateBarWithAppTitleForApp:
updateButtonConstraints
updateCache:
updateElementVisualsCoalescer
updateForTabModeChangeUsingSpeakFingerButton:
updateGestureRecognizers
updateHeaderLabel
updateNubbitGestureRecognizers
updateSpeakUnderFingerState:
updateUIForDisplayChange
updateUIForSpeakUnderFingerSettingsChange
updateVisualRects
userManuallyExitedSpeakUnderFingerMode
valueWithCGPoint:
valueWithCGRect:
valueWithRect:
view
viewWillTransitionToSize:withTransitionCoordinator:
waitingForNewReadAll
whiteColor
window
windowScene
windowSceneIdentifierForWindowScene:
zone
AXSpeakingRange
SpeakThisUIServer
AXOratorDelegate
NSObject
SpeakThisEventProcessorDelegate
AXUIService
AXSpeakOverlayViewControllerDelegate
AXUIContentViewControllerDelegate
SpeakThisUIServerAdditions
AXSpeakScreenButton
AXSpeakOverlayControlBar
AXSpeakOverlayViewController
AXUINubbitDelegate
AXUIViewControllerReachabilityHandler
SpeakThisUIStateManagerDelegate
SBSSystemApertureLayoutMonitoring
AXSpeakOverlayControlBarDelegate
SpeakThisUIStateManager
SpeakThisEventContext
NSCopying
SpeakThisEventProcessor
@16@0:8
v24@0:8@16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
v16@0:8
@"AXUIElement"
{_NSRange="location"Q"length"Q}
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16{_NSRange=QQ}24@40
v28@0:8@16B24
v24@0:8@"AXOrator"16
v48@0:8@"AXOrator"16{_NSRange=QQ}24@"NSString"40
v28@0:8@"AXOrator"16B24
v40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v40@0:8{CGPoint=dd}16@"SpeakThisEventProcessor"32
v24@0:8@"SpeakThisEventProcessor"16
B24@0:8@"SpeakThisEventProcessor"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"SpeakThisEventProcessor"16
v24@0:8@"SpeakThisEventContext"16
@"UIWindow"16@0:8
@48@0:8@16Q24@32^@40
B24@0:8Q16
v48@0:8@16Q24@32@?40
@24@0:8Q16
@"NSDictionary"48@0:8@"NSDictionary"16Q24@"NSString"32^@40
v48@0:8@"NSDictionary"16Q24@"NSString"32@?<v@?@"NSDictionary"@"NSError">40
@"AXAccessQueue"24@0:8Q16
v24@0:8@"NSDictionary"16
v24@0:8@"NSString"16
@"NSString"24@0:8Q16
@"NSSet"24@0:8Q16
d16@0:8
v24@0:8@"UIViewController"16
d28@0:8@16B24
v32@0:8@16@24
d28@0:8@"UIViewController"16B24
v24@0:8@"UIWindowScene"16
v32@0:8@"UIWindowScene"16@"NSString"24
v20@0:8B16
v24@0:8@?16
{CGPoint=dd}32@0:8{CGPoint=dd}16
@40@0:8@16Q24Q32
v52@0:8@16@24@32B40q44
@20@0:8B16
@40@0:8@16B24B28q32
v32@0:8B16B20@?24
v28@0:8B16@?20
v20@0:8i16
v40@0:8q16@24@?32
@24@0:8@16
v48@0:8@16@24@32@40
q24@0:8q16
Q32@0:8{_NSRange=QQ}16
@40@0:8@16@24@32
v32@0:8@16@?24
v60@0:8@16{_NSRange=QQ}24@40B48B52B56
^{__AXObserver=}16@0:8
v24@0:8^{__AXObserver=}16
@?16@0:8
@"AXOrator"
@"AXSpeakOverlayViewController"
@"AXElement"
@"<UIElementProtocol>"
@"NSObject<OS_dispatch_queue>"
@"NSMutableSet"
@"NSMutableDictionary"
@"NSArray"
@"NSString"
^{__AXObserver=}
@"SpeakThisEventProcessor"
@"SpeakThisUIStateManager"
@"NSMutableArray"
@"AXSpeakingRange"
@"AXFocusManager"
@"AXUpdateElementVisualsCoalescer"
v24@0:8d16
@"UIVisualEffectView"
{CGSize=dd}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v40@0:8@16@24@32
@44@0:8@16@24B32:36
@"UIActivityIndicatorView"
@"AXSpeakScreenButton"
@"UILabel"
@"UIView"
{CGPoint="x"d"y"d}
@"<AXSpeakOverlayControlBarDelegate>"
@"UITapGestureRecognizer"
@"UILongPressGestureRecognizer"
d24@0:8@16
v24@0:8@"UIView"16
d24@0:8@"UIView"16
v24@0:8@"NSArray"16
v40@0:8{CGPoint=dd}16@"UIGestureRecognizer"32
v32@0:8{CGPoint=dd}16
{CGPoint=dd}32@0:8{CGSize=dd}16
v24@0:8B16B20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8Q16
v40@0:8{CGSize=dd}16@32
B32@0:8{CGPoint=dd}16
I16@0:8
v20@0:8I16
{CGPoint=dd}16@0:8
@"SBSSystemApertureLayoutMonitor"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"UIColor"
@"<AXSpeakOverlayViewControllerDelegate>"
@"AXSpeakOverlayControlBar"
@"QSSelectionHighlightView"
q16@0:8
v24@0:8q16
@"AXDispatchTimer"
@24@0:8^{_NSZone=}16
@36@0:8q16I24@28
@40@0:8@16i24@28i36
@"AXAssertion"
@"<SpeakThisEventProcessorDelegate>"
?333333
MbP?
message: %@, identifier: %luu, client: %@
Could not find app/scene/view, returning without speaking
Connection will be interrupted for %@.
Hiding all UI: %@, %@
AppendContent - no content: remove page turn element
Reset page turn element: %@
Stopping opaque element fetch because nil element found. Stopped after finding %lu elements.
The currently fetched element %@ could not be used for continued fetching, trying to recover using remote parent: %@
Received elements and strings: %{public}@
Content string was %{private}@
Speaking ranges were %{private}@
Clearing assertion for fetching more content. %p: %@
Invalidation error: %@
Assertion for fetching more content was unexpectedly invalidated.
Acquire staying alive assertion: %p %@  %@ %@
Could not make RBSTarget for %@
Acquire fetching content assertion: %@
We were asked to speak the screen, but the setting was off.  Bailing.
ERROR: Application accessibility was disabled even though Speak Screen was in use.  Please file a bug with details about what you were doing before you saw this message.
SpeakThis-FetchContent
Received error when resuming speaking, even though orator claimed we could resume: %@
SpeakThis-StartSpeaking
updating speaking rate to: %d
Update is highlight visible: %i
Received unknown message identifier %lu.
checking current app based on appPointValue %@
checking current app based on bundleid %@
unable to find AXElement for app with bundleID: %@
AXElement with kAXSpeakThisRootElementParametrizedAttribute: %@
checking current app for accessibilityIdentifier: %@
view with identifier:%@, not found
checking current app based on sceneid %@
defaulting to  kAXDefaultSpeakThisApplicationAttribute
Updated current app %@ (app point: %{public}@) to %{public}@
Finishing handling page scroll.  Did read next page: %i
Error speaking next page: %@
Updating assertion flags to keep app alive but not necessarily responsive.
Did not get page scroll notification in %f seconds.
Read next page if possible: %@
Allowing suspended app AX while we turn the page. %@
Updating flags on assertion so that we can fetch more content.
Waiting extra long for page turn.
Asking for page scroll: %@ %@
Page returned NO for scroll action.
Clear all assertions
speaking stopped, clearing
setting the app's speak this root element accessibility identifier to nil.
setting the app's speak this scene to nil.
Somehow spoke a string range %@ that contained an entire element's portion of our content string %@.
Will speak range %{public}@ corresponding to "%{public}@"
Not getting text rects because the app being spoken is not foremost
SpeakThis-FetchRects
Range in element was %{public}@
Skipping highlighting because web content is hidden. We are probably on a different tab
Starting to highlight web content because we are active again.
Got text rects %{public}@
Got sentence rects %{public}@
AXOrator requested more elements with scrolling %@
More elements were requested, but speak screen has stopped, so not providing any additional content.
Setting highlight content: %d
Is reading from frontmost app: %i
Page scroll sent notification of failure.
Adding content view controller %@ for window scene: %@
Content view controller already exists for %@
Removing content view controller %@ for window scene: %@
Window scene returned nil view controller: %@
Updating content view controller %@ for window scene: %@
Active display changed
External display connected
External display disconnected
Pid status changed: %{public}@
Screen changed
Page scrolled
Added event context for contextID: %u
Unable to remove event context for contextID: %u
Removed event context for contextID: %u
 - %@, %@
SpeakScreen.stbundle
MAIN-DISPLAY
v8@?0
speakscreen-fetch-queue
v24@?0q8@"NSDictionary"16
v16@?0@"NSString"8
com.apple.accessibility.speakScreen.update_listeners
SpeakScreen
v20@?0i8@"NSData"12
Speech controller was set to always be on by an external client
/Library/Caches/com.apple.xbs/Sources/AccessibilityFrameworks_Sim/Source/SpeakThisUIServer/SpeakThisUIServer.m
-[SpeakThisUIServer _appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:]
Unexpected type for content item returned by kAXSpeakThisInfoAttribute: %@
UIAccessibilitySpeakThisIdentifier
SpeakThis-LegacyMethodWasUsed
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
com.apple.Accessibility
SpeakScreenStayAlive
SpeakScreenFetchContent
Speak Screen Assertion-%d
v24@?0@"RBSAssertion"8@"NSError"16
NO_SPEAKABLE_CONTENT_EXISTS
v12@?0B8
SpeakThis
speakThisRangeInElement
speakThisCurrentString
speakThisWantsSentenceRects
speakThisIgnoreScrollToVisible
enabled
disabled
Speak under finger mode activated, need to steal all touches.
Speak screen was turned on with the speech controller always visible
Localizable
/System/Library/CoreServices/AssistiveTouch.app
SCATIcon_mediacontrols_pause
PAUSE
SCATIcon_mediacontrols_play
PLAY
square.fill
STOP_SPEAK_FINGER
SCAT
chevron.backward
MINIMIZE
SCATIcon_gestures_fingers1
SPEAK_FINGER
backward.end.fill
REWIND
forward.end.fill
FAST_FORWARD
xmark
STOP
SPEED_HALF
SPEED_NORMAL
SPEED_ONE_AND_HALF
SPEED_TWO
SPEED_GENERIC
chevron.forward
MAXIMIZE
B16@?0@8
SPEAK_SCREEN
HOME_SCREEN
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
SpeakThisUIServer
SpeakThisHIDDispatchQueue
B16@?0@"AXEventRepresentation"8
User is interacting with speech controller
T@"NSArray",&,N
CGRectValue
TB,N,V_cachedIsHighlightVisible
T@"<AXSpeakOverlayControlBarDelegate>",W,N,V_delegate
_currentContent
T@"<SpeakThisEventProcessorDelegate>",W,N,V_delegate
_disableSystemGesturesAssertion
T@"AXFocusManager",&,N,V_focusManager
_externalScenes
T@"AXSpeakingRange",&,N,V_currentSpeakingRange
_ignoreNextNubbitPositionUpdate
T@"AXUIElement",&,N,V_element
_pageDidScroll:
T@"NSArray",&,N,V_currentUnmodifiedSentenceRects
_sentenceRanges
T@"NSArray",&,N,V_maximizedConstraints
_viewController
T@"NSArray",&,N,V_speakingRangeAndElements
activeDisplayId
T@"NSMutableArray",&,N,V_assertionsForStayingAlive
animateWithDuration:animations:
T@"NSMutableSet",&,N,V_observers
bundleForClass:
T@"NSString",&,N,V_currentContent
buttonWithType:
T@"NSString",&,N,V_displayHardwareID
content
T@"NSString",&,N,V_sceneIdentifier
didStop
T@"NSString",R,C
element
T@"QSSelectionHighlightView",&,N,V_sentenceHighlightView
initWithEffect:
T@"SpeakThisUIStateManager",&,N,V_stateManager
keyCode
T@"UIColor",&,N,V_underlineColor
keyInfo
T@"UITapGestureRecognizer",&,N,V_doubleTapRecognizer
nextFocusedView
T@"UIVisualEffectView",&,N,V_borderEffectView
T@?,C,N,V_readNextPageCompletion
release
TB,N,V_ignoreNextNubbitPositionUpdate
removeObserver:
TB,N,V_isFetchingContent
resetUI
TB,N,V_isReadingFromFrontmostApp
resumeSpeakingAfterDelay:error:
TB,N,V_lockButtonPressedSinceReadAllStart
sentenceHighlightColorForColor:
TB,N,V_waitingForNewReadAll
serviceWithDefaultShellEndpoint
TQ,N,V_activeDisplayId
setBar:
T^{__AXObserver=},&,N,V_observer
setPassivelyListeningForEvents:
Tq,N,V_currentState
speechControllerLongPressAction
T{CGPoint=dd},N,V_gestureMoveStartPosition
windowContextId
.cxx_destruct
TB,N,V_activeWebContentIsHidden
T#,R
_containingView
T@"<AXSpeakOverlayViewControllerDelegate>",W,N,V_delegate
_currentUnmodifiedSentenceRects
T@"AXDispatchTimer",&,N,V_collapseTimer
_eventProcessor
T@"AXSpeakOverlayControlBar",&,N,V_bar
_highlightColor
T@"AXUIElement",&,N,V_currentSentenceElement
_orator
T@"AXUpdateElementVisualsCoalescer",&,N,V_updateElementVisualsCoalescer
_registerNubbit
T@"NSArray",&,N,V_highlightSelectionRects
_underlineColor
T@"NSArray",&,N,V_minimizedConstraints
acquireWithInvalidationHandler:
T@"NSMutableArray",&,N,V_assertionsForFetchingContent
allKeys
T@"NSMutableArray",&,N,V_sentenceRanges
T@"NSString",&,N,V_currentAppBundleIdentifier
bundleWithPath:
T@"NSString",&,N,V_currentControllerTitle
containsObject:
T@"NSString",&,N,V_rootElementAccessibilityIdentifier
dealloc
T@"NSString",&,N,V_springBoardActionHandlerId
displayIdentity
T@"QSSelectionHighlightView",&,N,V_highlightView
initWithActivityIndicatorStyle:
T@"SpeakThisEventProcessor",&,N,V_eventProcessor
isProxy
T@"UIColor",&,N,V_highlightColor
keyDown
T@"UILongPressGestureRecognizer",&,N,V_longPressRecognizer
lowercaseString
T@"UITapGestureRecognizer",&,N,V_singleTapRecognizer
numberWithBool:
T@"UIVisualEffectView",W,N,V_buttonEffectView
possibleRequiredEntitlementsForProcessingMessageWithIdentifier:
TB,N,V_forceRectsToScroll
removeEventContextForContextID:
TB,N,V_inTabMode
requireGestureRecognizerToFail:
TB,N,V_isPausingAssistiveTechnology
resumeSpeaking:
TB,N,V_isWaitingForPageScroll
sceneIdentifier
TB,N,V_needToRefreshContextIds
sentenceHighlightSelectionRects
TI,N,V_contextID
TQ,R
setFrameOrigin:
Td,N,V_reachabilityOffset
speechControllerDoubleTapAction
Tq,N,V_displayID
valueWithRange:
T{CGPoint=dd},N,V_nubbitMoveStartPosition
T{_NSRange=QQ},N,V_currentSentenceRange
T{_NSRange=QQ},N,V_currentWordRange
T{_NSRange=QQ},N,V_range
_accessibilityFindAncestor:startWithSelf:
_activeDisplayId
_activeWebContentIsHidden
_activityIndicatorView
_addButtonConstraints:
_addButtonWithImageName:accessibilityLabel:round:action:
_addContentViewControllerForWindowScene:
_addFetchingContentAssertionForPid:
_addStayingAliveAssertionForPid:
_appendContentFromElementsAndStrings:toContentString:speakingRanges:startWithPageTurnElement:deviceOrientation:
_assertionAttributesForFetchingMoreContent
_assertionAttributesForStayingAlive
_assertionsForFetchingContent
_assertionsForStayingAlive
_axIsPointInForeheadRect:
_bar
_borderEffectView
_buttonEffectView
_buttons
_cachedIsHighlightVisible
_canShowWhileLocked
_clearAllAssertions
_clearAssertions:
_collapseTimer
_contextID
_contextId
_convertAXValueSceneReferenceRects:toView:fromElement:
_convertPointFromSceneReferenceSpace:
_convertRectFromSceneReferenceSpace:
_currentApp
_currentAppBundleIdentifier
_currentControllerTitle
_currentElementForFetching
_currentElementForFetchingRemoteParent
_currentElementIndex
_currentPageTurnElement
_currentSentenceElement
_currentSentenceRange
_currentSpeakingRange
_currentState
_currentWordRange
_delegate
_denormalizedNubbitOriginForViewSize:
_didToggleHighlightContentSetting
_didToggleSpeakScreenSetting
_dispatchQueueForFetches
_displayHardwareID
_displayID
_doubleTapRecognizer
_dragView
_element
_enqueueCollapseTimer
_errorLabel
_eventContexts
_fastForwardButtonPressed
_fetchContentStartingWithPageTurnElement:shouldRefreshContent:completion:
_fetchDispatchQueue
_fetchNextElementsAndReturnContentStringUsingAppElement:startingWithPageTurnElement:shouldScrollOpaqueProviderIfNecessary:deviceOrientation:
_fetchNextElementsFromOpaqueProviderAndScroll:
_fetchNextSpeakThisElementsAndScrollOpaqueProviderIfNecessary:withCompletion:
_fetchTextRectsAndApplyHighlightToContent:withRange:elementRange:updateSentences:scrollWords:scrollSentences:
_findIndexOfRange:
_finishHandlingPageScroll:
_focusManager
_forceRectsToScroll
_foreheadRect
_forwardButton
_frontmostAppMayHaveChanged:
_gestureMoveStartPosition
_giveUpWaitingForPageToScroll
_handleEvent:
_handleFastForward:
_handleFinishShowingUI
_handleHideUI
_handleIdleTimerReset
_handleLoadSpeakUnderfingerUI
_handleLoadUIAtAppPoint:
_handleLockButtonPress
_handleNewPage
_handleNoSpeakableContent:
_handlePan:
_handlePauseSpeaking
_handleRateChangeSpeechIfNeeded:
_handleResumeSpeaking
_handleRewind:
_handleSpeakFaster
_handleSpeakSlower
_handleSpeakThisWithOptions:appPoint:completion:
_handleSpeakingStopped
_handleToggleSpeaking
_handleUnknownMessageIdentifier:
_handleUpdateSpeakingRate:
_handleUpdateUIForSpeakUnderFingerSettingsChange
_headerLabel
_headerTapped:
_hidDispatchQueue
_highlightSelectionRects
_highlightView
_inTabMode
_initializeContainingView
_initializeUIIfNeccessary
_isFetchingContent
_isPausingAssistiveTechnology
_isReadingFromFrontmostApp
_isWaitingForPageScroll
_kbFrameWillUpdate:withCompletion:
_layoutMonitor
_loadButtonsAndConstraints:
_lockButtonPressedSinceReadAllStart
_longPressRecognizer
_maximizedConstraints
_minimizedConstraints
_needToRefreshContextIds
_nubbitMoveStartPosition
_nubbitMovedOutsideOfTabMode
_observeNotifications:
_observer
_observers
_panGestureAnchor
_playPauseButton
_playPauseButtonPressed
_range
_reachabilityOffset
_readNextPageCompletion
_readNextPageIfApplicableInForwardDirection:completion:
_reallyHideUI
_removeViewControllerForWindowScene:
_rewindButton
_rewindButtonPressed
_rootElementAccessibilityIdentifier
_roundButtons
_saveNubbitPosition
_savedOpaqueParentForFetching
_sceneIdentifier
_sentenceHighlightView
_setFont:
_setIdleTimerDisabled:forReason:
_shouldForwardViewWillTransitionToSize
_singleTapRecognizer
_sliceRects:withSentenceRects:wordRects:
_speakFingerButton
_speakFingerStateChanged
_speakScreenListeners
_speakScreenListenersUpdateQueue
_speakThisAppendString:withPause:
_speakThisUIViewControllers
_speakUnderFingerButtonPressed
_speakingRangeAndElements
_speakingRangeForContentItem:withContentItemLength:andPreviousContentStringLength:
_speedButton
_speedButtonPressed
_springBoardActionHandlerId
_squareButtons
_startNewReadAllFromGesture:
_stateManager
_stopButton
_stopButtonPressed
_stopSpeakFingerButtonPressed
_stopType
_stsErrorCodeForOratorErrorCode:
_suspendedSpeakScreenListeners
_systemApp
_tabModeButton
_tabModeButtonPressed
_unregisterNubbit
_updateAccessibilityElements
_updateButton:withImageName:accessibilityLabel:
_updateCurrentAppWithPoint:bundleID:sceneID:rootElementAccessibilityIdentifier:
_updateElementVisualsCoalescer
_updateForTabModeUsingSpeakFingerButton:animated:
_updateGestureRecognizers
_updateIsHighlightVisible
_updateNubbitForTabModeChange
_updateObservers
_updateSpeedButtonTitle
_updateTabButtonToExpandCollapseButton
_updateTabButtonToSpeakFingerButton
_updateUI
_updateVCWithLatestHighlightColors
_updateViewControllerForWindowScene:completion:
_voiceOverStatusChanged
_waitingForNewReadAll
_windowSceneForActiveDisplay
accessQueueForProcessingMessageWithIdentifier:
activateConstraints:
activeDisplayChangedWithContext:
activeWebContentIsHidden
addAdditionalContentToSpeechQueue:
addContentViewController:withUserInteractionEnabled:forService:context:userInterfaceStyle:allowSystemAppHosting:forWindowScene:completion:
addEventContextForWindow:
addGestureRecognizer:
addObject:
addObjectsFromArray:
addObserver:
addObserver:selector:name:object:
addSubview:
addTarget:action:
addTarget:action:forControlEvents:
afterDelay:processBlock:
allocWithZone:
alpha
animateAlongsideTransition:completion:
animateWithDuration:animations:completion:
animateWithDuration:delay:options:animations:completion:
appendString:
applyElementAttributeCacheScheme:
array
arrayByAddingObjectsFromArray:
arrayWithAXAttribute:
arrayWithCapacity:
arrayWithObjects:count:
assertionWithType:identifier:
assertionsForFetchingContent
assertionsForStayingAlive
attributeWithDomain:name:
attributes
autorelease
axElement
barDidReceiveFocus
beginHandlingHIDEventsForReason:
bezierPathWithOvalInRect:
bezierPathWithRoundedRect:cornerRadius:
boolWithAXAttribute:
borderEffectView
bottomAnchor
bounds
bringSubviewToFront:
bundleId
buttonEffectView
cachedIsHighlightVisible
callStackSymbols
canResumeWithContent:
cancel
cancelNubbitFade:
cancelPreviousPerformRequestsWithTarget:selector:object:
changeToPauseButton
changeToResumeButton
changeToStopButton
class
code
collapseNubbit
collapseTimer
colorWithAXAttribute:
colorWithAlphaComponent:
colorWithCGColor:
colorWithRed:green:blue:alpha:
colorWithWhite:alpha:
configurationWithPointSize:weight:scale:
configurationWithoutTextStyle
conformsToProtocol:
connectionWillBeInterruptedForClientWithIdentifier:
constraintEqualToAnchor:
constraintEqualToSystemSpacingAfterAnchor:multiplier:
constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:
constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
contentView
contextForDisplayID:
contextID
contextIdForActiveDisplay
controlBarDragged:gestureRecognizer:
controlBarSize
convertPoint:toView:
convertPointToViewControllerSpace:
convertRect:fromContextId:
convertRect:fromView:
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentAppBundleIdentifier
currentApplication
currentContent
currentControllerTitle
currentSentenceElement
currentSentenceRange
currentSpeakingRange
currentSpeakingRateChanged
currentSpeechRateForAdjustment
currentState
currentUnmodifiedSentenceRects
currentVoiceIdentifier
currentWordRange
deactivateConstraints:
debugDescription
defaultCenter
defaultFontDescriptorWithTextStyle:
delegate
denormalizedEventRepresentation:descale:
description
desiredWindowLevelForContentViewController:userInteractionEnabled:
dictionary
dictionaryWithObjects:forKeys:count:
didAnimateForReachabilityToOffset:
didPause
didResume
didUpdateFocusInContext:withAnimationCoordinator:
displayConfiguration
displayHardwareID
displayID
displayIdentifierForSceneIdentifier:
doubleSpeakingRateAsInt
doubleTapRecognizer
doubleValue
effectForBlurEffect:style:
effectWithStyle:
elementForAttribute:parameter:
elementWithAXUIElement:
elementWithUIElement:
endHandlingHIDEventsForReason:
enumerateSubstringsInRange:options:usingBlock:
eventProcessor
eventType
exitSpeakFingerModeWithEventProcessor:
expandNubbit
explanation
externalDisplaySceneConnected:
externalDisplaySceneConnected:forSceneClientIdentifier:
externalDisplaySceneDisconnected:
externalDisplaySceneDisconnected:forSceneClientIdentifier:
fastForwardButtonPressed
fastForwardWithBoundary:
fetchContentStringStartingWithPageTurnForUnitTest:
fingerWasLiftedInSpeakUnderFingerMode
finishLoading
firstObject
floatValue
focusManager
fontAttributes
fontDescriptorWithSymbolicTraits:
forceRectsToScroll
frame
gestureMoveStartPosition
getRed:green:blue:alpha:
halfSpeakingRateAsInt
handInfo
handleKBFrameWillUpdate:
handleReachabilityToggled:
hardwareIdentifier
hasAttribute:
hasPrefix:
hasWebContent
hash
headerTapped
hideStopButton
hideWithCompletion:
highlightColor
highlightColorForColor:
highlightSelectionRects
highlightSentences
highlightView
highlightWords
hostingWindowShouldMoveForReachability
idleOpacityForNubbit:
ignoreNextNubbitPositionUpdate
imageNamed:inBundle:
imageWithConfiguration:
imageWithTintColor:
inTabMode
indexOfObject:
init
initWithDisplayID:contextID:displayHardwareID:
initWithExplanation:target:attributes:
initWithFrame:
initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:
initWithImage:
initWithTarget:action:
initWithTargetSerialQueue:
insertObject:atIndex:
insertSubview:atIndex:
insertSubview:belowSubview:
intValue
integerValue
interfaceOrientation
invalidateWithError:
isAXAttributedString
isEqual:
isEqualToString:
isFetchingContent
isHandlingHIDEvents
isInSpeakUnderFingerModeWithEventProcessor:
isKindOfClass:
isMemberOfClass:
isNeuralSiriVoiceIdentifier:
isPaused
isPausingAssistiveTechnology
isReadingFromFrontmostApp
isScreenLockedWithPasscode:
isSpeaking
isSpringBoard
isVisible
isWaitingForPageScroll
keyboardFocusChangedForSceneIdentifier:
label
labelColor
lastMouseEventTime
lastObject
lastSpokenSubstringRange
lastUtteranceLanguageCode
layer
layoutIfNeeded
leadingAnchor
length
loadView
localizedStringForKey:value:table:
localizedStringWithFormat:
lockButtonPressedSinceReadAllStart
longPressRecognizer
mainDisplayWindow
mainScreen
maximizedConstraints
messageWithIdentifierRequiresWritingBlock:
messageWithIdentifierShouldBeProcessedAsynchronously:
minimizedConstraints
modifierState
moveBackInBounds
mutableCopy
needToRefreshContextIds
notifyUpdateElementVisualsEventDidOccur
nubbitDidUpdatePosition:
nubbitMoveStartPosition
nubbitSize
nubbitWillBeginDragging:
numberWithAXAttribute:
numberWithInt:
numberWithInteger:
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
objectWithAXAttribute:
objectWithAXAttribute:parameter:
observer
observers
oneAndAHalfSpeakingRateAsInt
openApplication:withOptions:completion:
orator:willSpeakRange:ofContent:
oratorDidCancelSpeaking:
oratorDidChangeSpeakingRate:
oratorDidFinishSpeaking:
oratorDidPauseSpeaking:
oratorDidResumeSpeaking:
oratorDidStartSpeaking:
oratorShouldFetchNextElements:shouldScrollOpaqueProviderIfNecessary:
origin
overlayFrame
panToPosition:
pathLocation
paths
pauseButtonPressed
pauseSpeaking:
performAXAction:
performAXAction:withValue:
performSelector:
performSelector:withObject:
performSelector:withObject:afterDelay:
performSelector:withObject:withObject:
pinNubbitToEdge:
playButtonPressed
playButtonPressedForViewController:
pointSize
postNotification:withData:
processInitializationMessage:
processMessage:withIdentifier:fromClientWithIdentifier:error:
processMessageAsynchronously:withIdentifier:fromClientWithIdentifier:completion:
quickSpeakHighlightOption
quickSpeakNubbitNormalizedPosition
quickSpeakSentenceHighlightColor
quickSpeakSentenceHighlightOption
quickSpeakSpeakingRate
quickSpeakWordHighlightColor
range
rangeValue
reachabilityOffset
readNextPageCompletion
rectValue
registerBlockForStateChange:
registerNotifications:withIdentifier:withHandler:
registerNubbit:delegate:
registerSpringBoardActionHandler:withIdentifierCallback:
registerUpdateBlock:forRetrieveSelector:withListener:
remoteParent
removeActionHandler:
removeAllObjects
removeContentViewController:withUserInteractionEnabled:forService:
removeGestureRecognizer:
removeLastObject
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeTarget:action:
requiredEntitlementForProcessingMessageWithIdentifier:
respondsToSelector:
retain
retainCount
rewindButtonPressed
rewindWithBoundary:
rootElementAccessibilityIdentifier
scale
screen
self
sendSubviewToBack:
sendUserEventOccurred
sentenceHighlightView
sentenceRanges
server
serviceWasFullyInitialized
setAXAttribute:withString:
setAccessibilityElements:
setAccessibilityIgnoresInvertColors:
setAccessibilityLabel:
setAccessibilityRespondsToUserInteraction:
setActiveDisplayId:
setActiveWebContentIsHidden:
setAdjustsFontSizeToFitWidth:
setAlpha:
setAssertionsForFetchingContent:
setAssertionsForStayingAlive:
setAutoresizingMask:
setBorderEffectView:
setButtonEffectView:
setCachedIsHighlightVisible:
setCollapseTimer:
setContent:
setContextID:
setCornerRadius:
setCurrentAppBundleIdentifier:
setCurrentContent:
setCurrentControllerTitle:
setCurrentSentenceElement:
setCurrentSentenceRange:
setCurrentSpeakingRange:
setCurrentState:
setCurrentUnmodifiedSentenceRects:
setCurrentWordRange:
setDelegate:
setDisplayHardwareID:
setDisplayID:
setDoubleTapRecognizer:
setEffect:
setElement:
setEnabled:
setEventProcessor:
setFocusManager:
setFont:
setForceRectsToScroll:
setFrame:
setGestureMoveStartPosition:
setHIDEventFilterMask:
setHIDEventHandler:
setHidden:
setHidesMainViews:
setHighlightColor:
setHighlightSelectionRects:
setHighlightView:
setIdleTimerDisabled:
setIgnoreNextNubbitPositionUpdate:
setImage:forState:
setInTabMode:
setIsFetchingContent:
setIsPausingAssistiveTechnology:
setIsReadingFromFrontmostApp:
setIsSpeakScreenHighlightVisible:
setIsWaitingForPageScroll:
setLineWidth:
setLockButtonPressedSinceReadAllStart:
setLongPressRecognizer:
setMasksToBounds:
setMaximizedConstraints:
setMinimizedConstraints:
setNeedToRefreshContextIds:
setNeedsLayout
setNubbitMoveStartPosition:
setNumberOfLines:
setNumberOfTapsRequired:
setObject:forKeyedSubscript:
setObserver:
setObservers:
setOrigin:
setPriority:
setProgressInterval:
setQuickSpeakNubbitNormalizedPosition:
setRange:
setReachabilityOffset:
setReadNextPageCompletion:
setRootElementAccessibilityIdentifier:
setSceneIdentifier:
setSelectionColor:
setSentenceHighlight:
setSentenceHighlightSelectionRects:
setSentenceHighlightView:
setSentenceRanges:
setSingleTapRecognizer:
setSkipLuthorRules:
setSpeakingContext:
setSpeakingRangeAndElements:
setSpeakingRate:
setSpringBoardActionHandlerId:
setState:
setStateManager:
setSupportsAccurateWordCallbacks:
setText:
setTextAlignment:
setTextColor:
setThreshold:
setTintColor:
setTitle:forState:
setTranslatesAutoresizingMaskIntoConstraints:
setUnderlineColor:
setUpdateElementVisualsCoalescer:
setUpdateVisualsSequenceDidBeginHandler:
setUpdateVisualsSequenceDidFinishHandler:
setUpdateVisualsSequenceInProgressHandler:
setUserInteractionEnabled:
setView:
setWaitingForNewReadAll:
sharedApplication
sharedDisplayManager
sharedInstance
shouldPreventAutorotatingAllContentViewControllers
showErrorMessage:
showLoading
showMainUI
showSpeakFingerUI
showSpeechController
showStopButton
showUI
showUIForApplication:
singleTapRecognizer
size
speakElementAtLocation:
speakElementAtPoint:withEventProcessor:
speakFaster
speakFingerState
speakSlower
speakThisUIFrameWithEventProcessor:
speakUnderFingerButtonPressed
speakUnderFingerModeStarted
speakingRangeAndElements
speakingRateAsMultiplier
speechControllerIdleOpacity
speechVoiceIdentifierForLanguage:source:exists:
speedButtonPressed
springBoardActionHandlerId
standardSpeakingRateAsInt
startAnimating
startNewReadAllFromGesture
startSpeakingWithPreferredLanguage:delayBeforeStart:error:
startSpeakingWithPreferredLanguage:error:
state
stateManager
stopAnimating
stopButtonPressed
stopSpeakFingerButtonPressed
stopSpeaking:
string
stringByAppendingFormat:
stringWithFormat:
stroke
subarrayWithRange:
substringWithRange:
subviews
superclass
systemApertureLayoutDidChange:
systemFontOfSize:
systemImageNamed:
systemWideElement
tabModeButtonPressed
target
targetWithPid:
temporarilyHideUI
title
titleLabel
topAnchor
trailingAnchor
traits
translateKeycode
translationInView:
type
uiElement
uiElementWithAXElement:
uiElementsWithAttribute:
uiStateChanged
underlineColor
unregisterNotifications:
unregisterNubbit:
unregisterNubbit:shouldUndoFade:
unsignedIntegerValue
unsignedLongLongValue
updateBarWithAppTitleForApp:
updateButtonConstraints
updateCache:
updateElementVisualsCoalescer
updateForTabModeChangeUsingSpeakFingerButton:
updateGestureRecognizers
updateHeaderLabel
updateNubbitGestureRecognizers
updateSpeakUnderFingerState:
updateUIForDisplayChange
updateUIForSpeakUnderFingerSettingsChange
updateVisualRects
userManuallyExitedSpeakUnderFingerMode
valueWithCGPoint:
valueWithCGRect:
valueWithRect:
view
viewWillTransitionToSize:withTransitionCoordinator:
waitingForNewReadAll
whiteColor
window
windowScene
windowSceneIdentifierForWindowScene:
zone
AXSpeakingRange
SpeakThisUIServer
AXOratorDelegate
NSObject
SpeakThisEventProcessorDelegate
AXUIService
AXSpeakOverlayViewControllerDelegate
AXUIContentViewControllerDelegate
SpeakThisUIServerAdditions
AXSpeakScreenButton
AXSpeakOverlayControlBar
AXSpeakOverlayViewController
AXUINubbitDelegate
AXUIViewControllerReachabilityHandler
SpeakThisUIStateManagerDelegate
SBSSystemApertureLayoutMonitoring
AXSpeakOverlayControlBarDelegate
SpeakThisUIStateManager
SpeakThisEventContext
NSCopying
SpeakThisEventProcessor
@16@0:8
v24@0:8@16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
v16@0:8
@"AXUIElement"
{_NSRange="location"Q"length"Q}
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16{_NSRange=QQ}24@40
v28@0:8@16B24
v24@0:8@"AXOrator"16
v48@0:8@"AXOrator"16{_NSRange=QQ}24@"NSString"40
v28@0:8@"AXOrator"16B24
v40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v40@0:8{CGPoint=dd}16@"SpeakThisEventProcessor"32
v24@0:8@"SpeakThisEventProcessor"16
B24@0:8@"SpeakThisEventProcessor"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"SpeakThisEventProcessor"16
v24@0:8@"SpeakThisEventContext"16
@"UIWindow"16@0:8
@48@0:8@16Q24@32^@40
B24@0:8Q16
v48@0:8@16Q24@32@?40
@24@0:8Q16
@"NSDictionary"48@0:8@"NSDictionary"16Q24@"NSString"32^@40
v48@0:8@"NSDictionary"16Q24@"NSString"32@?<v@?@"NSDictionary"@"NSError">40
@"AXAccessQueue"24@0:8Q16
v24@0:8@"NSDictionary"16
v24@0:8@"NSString"16
@"NSString"24@0:8Q16
@"NSSet"24@0:8Q16
d16@0:8
v24@0:8@"UIViewController"16
d28@0:8@16B24
v32@0:8@16@24
d28@0:8@"UIViewController"16B24
v24@0:8@"UIWindowScene"16
v32@0:8@"UIWindowScene"16@"NSString"24
v20@0:8B16
v24@0:8@?16
{CGPoint=dd}32@0:8{CGPoint=dd}16
@40@0:8@16Q24Q32
v52@0:8@16@24@32B40q44
@20@0:8B16
@40@0:8@16B24B28q32
v32@0:8B16B20@?24
v28@0:8B16@?20
v20@0:8i16
v40@0:8q16@24@?32
@24@0:8@16
v48@0:8@16@24@32@40
q24@0:8q16
Q32@0:8{_NSRange=QQ}16
@40@0:8@16@24@32
v32@0:8@16@?24
v60@0:8@16{_NSRange=QQ}24@40B48B52B56
^{__AXObserver=}16@0:8
v24@0:8^{__AXObserver=}16
@?16@0:8
@"AXOrator"
@"AXSpeakOverlayViewController"
@"AXElement"
@"<UIElementProtocol>"
@"NSObject<OS_dispatch_queue>"
@"NSMutableSet"
@"NSMutableDictionary"
@"NSArray"
@"NSString"
^{__AXObserver=}
@"SpeakThisEventProcessor"
@"SpeakThisUIStateManager"
@"NSMutableArray"
@"AXSpeakingRange"
@"AXFocusManager"
@"AXUpdateElementVisualsCoalescer"
v24@0:8d16
@"UIVisualEffectView"
{CGSize=dd}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v40@0:8@16@24@32
@44@0:8@16@24B32:36
@"UIActivityIndicatorView"
@"AXSpeakScreenButton"
@"UILabel"
@"UIView"
{CGPoint="x"d"y"d}
@"<AXSpeakOverlayControlBarDelegate>"
@"UITapGestureRecognizer"
@"UILongPressGestureRecognizer"
d24@0:8@16
v24@0:8@"UIView"16
d24@0:8@"UIView"16
v24@0:8@"NSArray"16
v40@0:8{CGPoint=dd}16@"UIGestureRecognizer"32
v32@0:8{CGPoint=dd}16
{CGPoint=dd}32@0:8{CGSize=dd}16
v24@0:8B16B20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8Q16
v40@0:8{CGSize=dd}16@32
B32@0:8{CGPoint=dd}16
I16@0:8
v20@0:8I16
{CGPoint=dd}16@0:8
@"SBSSystemApertureLayoutMonitor"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"UIColor"
@"<AXSpeakOverlayViewControllerDelegate>"
@"AXSpeakOverlayControlBar"
@"QSSelectionHighlightView"
q16@0:8
v24@0:8q16
@"AXDispatchTimer"
@24@0:8^{_NSZone=}16
@36@0:8q16I24@28
@40@0:8@16i24@28i36
@"AXAssertion"
@"<SpeakThisEventProcessorDelegate>"
?333333
MbP?
message: %@, identifier: %luu, client: %@
Could not find app/scene/view, returning without speaking
Connection will be interrupted for %@.
Hiding all UI: %@, %@
AppendContent - no content: remove page turn element
Reset page turn element: %@
Stopping opaque element fetch because nil element found. Stopped after finding %lu elements.
The currently fetched element %@ could not be used for continued fetching, trying to recover using remote parent: %@
Received elements and strings: %{public}@
Content string was %{private}@
Speaking ranges were %{private}@
Clearing assertion for fetching more content. %p: %@
Invalidation error: %@
Assertion for fetching more content was unexpectedly invalidated.
Acquire staying alive assertion: %p %@  %@ %@
Could not make RBSTarget for %@
Acquire fetching content assertion: %@
We were asked to speak the screen, but the setting was off.  Bailing.
ERROR: Application accessibility was disabled even though Speak Screen was in use.  Please file a bug with details about what you were doing before you saw this message.
SpeakThis-FetchContent
Received error when resuming speaking, even though orator claimed we could resume: %@
SpeakThis-StartSpeaking
updating speaking rate to: %d
Update is highlight visible: %i
Received unknown message identifier %lu.
checking current app based on appPointValue %@
checking current app based on bundleid %@
unable to find AXElement for app with bundleID: %@
AXElement with kAXSpeakThisRootElementParametrizedAttribute: %@
checking current app for accessibilityIdentifier: %@
view with identifier:%@, not found
checking current app based on sceneid %@
defaulting to  kAXDefaultSpeakThisApplicationAttribute
Updated current app %@ (app point: %{public}@) to %{public}@
Finishing handling page scroll.  Did read next page: %i
Error speaking next page: %@
Updating assertion flags to keep app alive but not necessarily responsive.
Did not get page scroll notification in %f seconds.
Read next page if possible: %@
Allowing suspended app AX while we turn the page. %@
Updating flags on assertion so that we can fetch more content.
Waiting extra long for page turn.
Asking for page scroll: %@ %@
Page returned NO for scroll action.
Clear all assertions
speaking stopped, clearing
setting the app's speak this root element accessibility identifier to nil.
setting the app's speak this scene to nil.
Somehow spoke a string range %@ that contained an entire element's portion of our content string %@.
Will speak range %{public}@ corresponding to "%{public}@"
Not getting text rects because the app being spoken is not foremost
SpeakThis-FetchRects
Range in element was %{public}@
Skipping highlighting because web content is hidden. We are probably on a different tab
Starting to highlight web content because we are active again.
Got text rects %{public}@
Got sentence rects %{public}@
AXOrator requested more elements with scrolling %@
More elements were requested, but speak screen has stopped, so not providing any additional content.
Setting highlight content: %d
Is reading from frontmost app: %i
Page scroll sent notification of failure.
Adding content view controller %@ for window scene: %@
Content view controller already exists for %@
Removing content view controller %@ for window scene: %@
Window scene returned nil view controller: %@
Updating content view controller %@ for window scene: %@
Active display changed
External display connected
External display disconnected
Pid status changed: %{public}@
Screen changed
Page scrolled
Added event context for contextID: %u
Unable to remove event context for contextID: %u
Removed event context for contextID: %u
