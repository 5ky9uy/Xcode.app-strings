MbP?
mediaremoted
MRDSwiftStruct
%@-%@-%@-%@-%@-%@
com.apple.mediaremote.endpoint.connect
com.apple.mediaremote
type
date
event
eventdescription
selectionreason
eventreason
timesince
changeType
changeTypeDescription
v8@?0
B8@?0
Restoring previous
v12@?0B8
%@ origin registered <%@> (<%@>) 
origin de-registration of <%@> (<%@>) 
personal device was attached
Playback changed for %@
was not playing sort of recently <%lf> seconds ago
was playing recently <%lf> seconds ago
was not <%@> sort of recently <%lf> seconds ago
was <%@> recently <%lf> ago
was not playing recently <%lf> ago and was not <%@> recently <%lf> seconds ago
Could not find origin with deviceUID = <%@>
No %@SystemEndpoint
Internal Setting not set
local activePlayer %@ is playing
Fallback to previous
%@SystemEndpoint changed from <%@> to <%@> with changeType = <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
unknown
@"NSDictionary"8@?0
%@ endpoint disconnected and attempting to reconnect
v16@?0@"MRAVEndpoint"8
v24@?0d8@?<v@?B>16
%@Endpoint changed
com.apple.mediaremote.systemendpointcontroller.userselectedtimer
 %@ timeout event %@ after <%lf> seconds 
%@Endpoint timeout imminent
%@Endpoint is playing
%@Endpoint is local
com.apple.mediaremote.systemendpointcontroller.playbacktimer
%@ playback timedout event %@ after <%lf> seconds
SystemEndpoint
v32@?0@8@"NSDictionary"16^B24
Startup
B16@?0@"MRDeviceInfo"8
ASE moved to another endpoint
StartUp
ConnectionAdded
ConnectionRemoved
UserSelected
UserSelectedTimeout
Playback
PlaybackTimeout
NowPlayingAppRemoved
migrationPlaybackSession
ResolveActiveEndpoint
invalid route error
from external device client
Analytics: 
com.apple.mediaremote.MRDRemoteControlServer
com.apple.mediaremote.MRDMediaRemoteUIService
MULTIPLAYER_CAPACITY_REACHED_TITLE
MULTIPLAYER_CAPACITY_REACHED
v16@?0@"MRCommandResult"8
v20@?0I8@"NSArray"12
com.apple.mediaremote.broadcastcommand.%@
v32@?0@"NSString"8@"MRDRemoteControlContext"16^B24
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
@"NSData"16@?0@"_MRSendCommandResultMessageProtobuf"8
MRXPC_COMMAND_STATUSES_DATA_KEY
MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY
MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY
MRXPC_MEDIA_CONTROLS_STYLE_KEY
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@"NSError"8
MRXPC_MEDIA_CONTROLS_ROUTE_UID_KEY
MRXPC_MEDIA_CONTROLS_CENTER_KEY
MRXPC_COMMAND_KEY
Pause because migration
v24@?0@"MRDMediaRemoteClient"8@"NSError"16
Did not receive fade out notification
com.apple.mediaexperience.fadeoutappliedforplaybackhandoff
v12@?0i8
%@ started playback
phone call began
v16@?0Q8
FBSOpenApplicationErrorDomain
command<%@>=%@
com.apple.Fuse
com.apple.mediaremoted
com.apple.MediaPlayer.RemotePlayerService
airtunesd
tvairplayd
com.apple.HomePodCannedDemo
coreduetd
AVSystemController
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVSystemController_InterruptAudioSessionIDForHandoff
AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
AVSystemController_AllowAppToFadeInTemporarilyAttribute
MRXPC_COMMAND_OPTIONS_KEY
Client <%@> missing entitlement needed to send command <%@> to arbitrary apps. Sending to NowPlayingApp instead of <%@>.
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v32@?0@"NSString"8@"NSNumber"16^B24
com.apple.mediaremote.remotecontrol.routedcommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
com.apple.MRDAVRoutingDataSource.serialQueue
com.apple.MRDUIServer.queue
MRUISessionController
/System/Library/PrivateFrameworks/MediaRemoteDaemonServices.framework/MediaRemoteDaemonServices
subclass must implement
Currently playing %ld %@ streams (max = %ld).
external
origin-%ld %@ (%@)
%@ (%@) + 
%@ on %@
canActivateStreamWithPlayerPath
B24@?0@"NSArray"8@"MROrigin"16
B16@?0@"MRDNowPlayingOriginClient"8
B16@?0@"MRPlayerPath"8
PlayerPath does not take up a slot thus is always allowed to activate
PlayerPath is already active
Number of currently activeStreams (%ld) is less that capacity (%ld) so allowing activation
Already above max capacity. %@
interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath
v24@?0@"MRPlayerPath"8@"NSError"16
%@<%@>
Could not find a best stream to interrupt
bestStreamToInterrupt
@"MRDNowPlayingPlayerClient"16@?0@"MRDNowPlayingOriginClient"8
q24@?0@"MRDNowPlayingPlayerClient"8@"MRDNowPlayingPlayerClient"16
Number of currently activeStreams (%ld) is less that capacity (%ld).
Already playing <%@> to specified device <%@>
willStartingPlaybackToOutputDevicesInterrupt
%@ just started playing
com.apple.mediaremote.%@.%@
v32@?0@"NSNumber"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16^B24
%@ %p {
  playerPath = %@
  player = %@
  canBeNowPlayingPlayer = %@
  transaction = %@
  playbackState = %@
  inferredPlaybackState = %@
  playbackStateHistory = %@
  pictureInPictureEnabled = %@
  supportedCommands = %@
  capabilities = %@
  playbackQueue = %@
  subscriptionController = %@
supportedCommands
playbackQueue
nowPlayingItem
inferred playback state
playback state
playbackQueueCapabilities
q24@?0@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16
com.apple.mediaremoted.MRDNowPlayingPlayerClient/%@
true
false
%@-%@
CUBluetoothClient
CoreUtils
v16@?0@"NSData"8
v24@?0@"MRDeviceInfo"8@"NSError"16
<%@ %p "%@">
local.
%@ (pid=%d)
<%@ %p {
    %@-%d
    registeredCallbacks = %@
    registeredNotifications = %@
    subscribedPlayerPaths = %@
    pendingClientState = %@
    connection monitor = %@
B16@?0@"MRAVOutputDevice"8
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSArray"16^B24
WakingPlayerPathNotification
<%@ %p{
    connectionState=%@
    connectionStateError=%@
    name = %@
    endpoint = %@
    volume = %f
    volumeCapabilities = %@
    outputDeviceVolumes = %@
    outputDeviceVolumeCapabilities = %@
    modifications = %@
    discoveryResults = %@
   addedOutputDevices = %@
    changedOutputDevices = %@
    removedOutputDevices = %@
com.apple.mediaremote.MRDIDSService
<%@:%p {
 service=%@
 devices=%@
 messageHandlers = %@
 deviceMessageHandlers = %@
v56@?0@"MRDIDSServiceMessage"8@"NSString"16@"NSString"24@"NSString"32@"NSNumber"40@"NSNumber"48
v64@?0@"MRDIDSServiceMessage"8@"IDSDevice"16@"NSString"24@"NSString"32@"NSString"40@"NSNumber"48@"NSNumber"56
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
messageid
destination
session
data
replyid
v32@?0@?<v@?@"MRDIDSServiceMessage"@"IDSDevice"@"NSString"@"NSString"@"NSString"@"NSNumber"@"NSNumber">8Q16^B24
v32@?0@?<v@?@"MRDIDSServiceMessage"@"NSString"@"NSString"@"NSString"@"NSNumber"@"NSNumber">8Q16^B24
bundleID
audioSessionID
mxSessionIDs
isPlaying
B16@?0@"<MRDNowPlayingDataSourceObserver>"8
<%@, %p: sourceOrigin: %@ - destinationOrigin: %@>
v20@?0I8^{__CFArray=}12
v36@?0^v8I16^{__CFDictionary=}20@?<v@?^{__CFArray=}>28
v24@?0^v8^{__CFError=}16
v32@?0^v8^v16@?<v@?^v^{__CFError=}>24
v24@?0@"MRPlaybackSessionMigrateRequest"8@"NSError"16
v40@?0@"MRPlaybackSession"8@"MRPlaybackSessionMigrateRequest"16@"MRPlayerPath"24@?<v@?@"MRPlaybackSessionMigrateRequest"@"NSError">32
v32@?0^v8^v16@?<v@?^{__CFError=}>24
v40@?0^v8^{__CFError=}16^v24@?<v@?^{__CFError=}>32
%@-%@-%d
MediaPlayback
v32@?0@"NSArray"8@"MRAVEndpoint"16@"NSError"24
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
<Unknown>
com.apple.mediaremote.MRDRapportRemoteControlService.workerQueue
com.apple.mediaremote.remotecontrol.connect
destinationGroupUID
v32@?0@"MRDeviceInfo"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSError">24
com.apple.mediaremote.remotecontrol.disconnect
MRDRapportRemoteControlService received disconect event
B16@?0@"MRDRapportRemoteControlServiceConnection"8
v24@?0@"MRDeviceInfo"8@"NSDictionary"16
com.apple.mediaremote.remotecontrol.reset
MRDRapportRemoteControlService received reset event
RapportRemoteControlChannel-<%@->%@/%@>
MRDMediaRemoteExternalDeviceServerClientInvalidatedNotification
v16@?0@"NSNotification"8
incomingRapportConnections
incomingRapportConnectionsDescription
source
source=%@(%@) session=%@
ProximityController(%@)
MRDAVOutputContextManagerDidReset
local=%@
active=%@
inactive=%@
reserved=%@
@16@?0@"MRAVOutputContext"8
v16@?0@"NSMutableDictionary"8
@16@?0@"MRAVOutputDevice"8
B16@?0@"NSString"8
B16@?0@"MRAVOutputContext"8
@"MRAVConcreteOutputContext"16@?0@"AVOutputContext"8
@16@?0@"MRAVOutputDeviceDescription"8
AVSystemController_ServerConnectionDiedNotification
AVSystemController_SubscribeToNotificationsAttribute
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
com.apple.mediaremote.%@
  discoveryMode = %@
  idsService = %@
  outputDevices = %@
@"MRAVOutputDevice"16@?0@"IDSDevice"8
MRDAVLocalDeviceCommitManager
MRDAVLocalDeviceCommitManager.serial
MRDAVLocalDeviceCommitManager.completion
delayedInit
nowPlayingSessionDidStop
topologyChangeFinished-%@
didRemoveLocalDevice
clusterTypeDidChange
LocalDeviceCommitManager
_commitLocalDeviceWithReason
Failed to find local output device
Failed to find output context for: %@
Skipping commit of local device because it is already contained in context: %@
Committing output device: %@ to context: %@
v16@?0^{__CFError=}8
v24@?0@"MRAVOutputDevice"8@"NSError"16
MRXPC_INDEXPATH_DATA_KEY
v16@?0@"MRDMediaRemoteClient"8
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
BrowsableContent playback initiated
Sending initiatePlaybackMessage
MRXPC_BUNDLE_ID_KEY
v16@?0@"NSArray"8
  localEndpointConnection=%@
  discoveryMode=%@
  routingContextID=%@
  avDiscoverySession = %@
  idsDiscoverySession = %@
  localOutputDevice = %@
  unclusteredOutputDevices = %@
  availableOutputDevices = %@
localEndpointConnection
v32@?0@"NSString"8@"NSArray"16^B24
updateFromOutputContext
deviceInfo
reservedOutputContext
addFromOutputContext
loadLocalEndpointConnection
com.apple.mediaremote.hostedDiscoverySession/serialQueue
discovery enabled at: %@ (%.0f s ago) until: %@ (duration %.0f s)
discovery never enabled
%@ %p {
    discovery mode = %@
    xpc connection = %@
    pid = %d
    bundle id = %@
    %@
    connection monitor = %@
com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)
<%@: %p - destination UID=%@ groupID=%@>
NowPlaying 
OutputDevices 
Volume 
Keyboard 
SystemEndpointUpdates 
<%@ %p {
    deviceInfo = %@
    lastSupportedMessageType = %ld
    virtualTouchDevices = %@
    registeredVirtualVoiceInputDevices = %@
    playbackQueueRequests = %@
    sessionPeer = %@
    pinPairingToken = %@
    serverDelegate = %@
    registeredUpdates = %@
    subscribedPlayerPaths = %@
    destinationOutputDeviceUID = %@
    destinationGroupID = %@
    destinationEndpoint = %@
    connection = %@
v16@?0I8I12
v24@?0@"MRAVEndpoint"8@"NSError"16
v16@?0@"MRPlayerPath"8
MRDExternalDeviceServer
ExternalDeviceServerDestination
com.apple.TVRemote
B16@?0@"MRCommandInfo"8
v32@?0@"NSNumber"8@"MREmulatedGameController"16^B24
B16@?0@"MRAVDistantOutputDevice"8
v32@?0@"NSString"8@"NSMutableArray"16^B24
@16@?0@"MRAVEndpoint"8
B24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
@"NSString"16@?0@"MRAVEndpoint"8
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
 Service = %@
 DiscoveryChannels = %@
 RemoteControlChannels = %@
v48@?0@"MRDIDSServiceMessage"8@"IDSDevice"16@"NSString"24@"NSString"32@"NSString"40
v16@?0@"MRDIDSServiceMessage"8
v32@?0@"MRAVOutputDevice"8q16@?<v@?@"NSString">24
IDSRemoteControlChannel-<%@/%@>
Tried to connect to endpoint but its groupLeader changed from %@ to %@
v24@?0q8@?<v@?@"NSString">16
v16@?0@"MRIDSCompanionMessage"8
  client = %@
  transport = %@
  destination = %@
  session = %@
  connectionAttemptDate = %@ (%lf seconds ago)
@16@?0@"NSMutableDictionary"8
New RemoteControlChannel created for destination %@, clearing all previous channels for this destination
v32@?0@"NSString"8@"MRDIDSRemoteControlServiceRemoteControlChannel"16^B24
model
deviceID
AirPlayPortExtendedInfo
kMRDPersonalDeviceControllerPersonalDeviceStateDevicesKey
kMRDPersonalDeviceControllerPersonalDeviceStateDateKey
com.apple.mediaremote.MRDPersonalDeviceController
com.apple.mediaremote.MRDPersonalDeviceController.delegateQueue
Personal devices did change.
Initial load with no persisted state.
com.apple.mediaremote.mrdpersonaldevicecontroller.overridetimer
Timeout reached.
v24@?0^{__CFArray=}8^{__CFError=}16
Companion Link Event
MRXPC_HOMEKIT_IDENTIFIER_KEY
RecentlyPlayedEntries
v32@?0@"NSDictionary"8Q16^B24
q24@?0@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"8@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"16
lastPlayingDate
lastNotPlayingDate
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
%@-%@-%@-%@-%@-%@(%@)-%@-%@
PLAYING
NOT PLAYING
deviceUID
playerPathDescription
contentItemDescription
 connection = %@
 outputDevice = %@
 session = %@
 error = %@
v16@?0@"MRProtocolMessage"8
%@-%d
MPStoreClientTokenDidChangeNotification
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
v12@?0I8
v32@?0@"NSString"8@"NSString"16^B24
MRIDSCompanionTransportConnection.dealloc
 type = %@
 destination = %@
 isValid = %@
v32@?0@"MRAVOutputDevice"8Q16^B24
com.apple.common
BasicAngelIPC
com.apple.mediaremoteui.services
com.apple.mediaremoteui.ui-service
v16@?0@"BSServiceConnection<BSServiceConnectionContext>"8
v16@?0@"<BSServiceConnectionConfiguring>"8
com.apple.mediaremote.MRDIDSCompanionRemoteControlServiceConnection.workerQueue
v32@?0@"MRIDSCompanionMessage"8@"NSString"16@"NSString"24
%@ %p
IDSWatch: %@
DiscoveryChannelMode: %@
Connections: %@
lastSentEndpoint: %@ (%.1fs ago)
Start
IDS Connected
IDSConnection Disconnected
MRDIDSCompanionRemoteControlService.setConnectionState
IDSDiscoveryChannel
New replacement connection %@-%@ established
v32@?0@"NSString"8@"MRDIDSCompanionRemoteControlServiceConnection"16^B24
Interrupted
Failed to load device info
Failed to create IO Streams
Failed to register custom origin
Failed to re-register custom origin
Failed to sync client state
ConnectOptions
com.apple.MediaRemote.MRExternalDevice.SerialQueue
com.apple.MediaRemote.MRExternalDevice.WorkerQueue
com.apple.MediaRemote.MRExternalDevice.NotificationQueue
<%@:%p %@ transport=%@>
<%@:%p {
    device=%@
    origin=%@
    transport=%@
@"NSError"8@?0
success
NONE
retry
none
attemptReconnection
reason
ping
v24@?0^{__CFError=}8d16
v20@?0f8@"NSError"12
v20@?0I8@"NSError"12
com.apple.mediaremote.MRExternalDevice/%@(%@)
v36@?0@"MRPlayerPath"8I16@"NSDictionary"20@?<v@?@"MRCommandResult">28
v24@?0^v8^v16
v24@?0@"MRPlaybackSession"8@"NSError"16
v24@?0@"MRProtocolMessage"8@?<v@?@"MRProtocolMessage">16
event = <playbackQueueRequest>, request = <%@>, error = <%@>
v20@?0^{__CFString=}8B16
event = <%@>, command = <%@>, error = <%@>
Received update from companion
v16@?0@"MRUpdateActiveSystemEndpointResponse"8
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
handlePlaybackQueueRequest
v40@?0@"MRPlaybackQueueRequest"8@"MRPlayerPath"16@"MRPlaybackQueue"24@"NSError"32
v24@?0@"MRPlaybackQueue"8@"NSError"16
relayPlaybackQueueRequest
requestArtworkForContentItems
v24@?0@"NSArray"8@"NSError"16
@16@?0@"MRContentItem"8
@"MRContentItem"16@?0@"MRContentItem"8
B32@?0@"MRDMediaRemoteClient"8@"NSDictionary"16^@24
identifier
defaultGroupUID
CUPairingManager
UserAssignedDeviceName
v24@?0^{__CFString=}8^{__CFDictionary=}16
com.apple.airplay.prefsChanged
com.apple.airplay.active
com.apple.airplay.advertisingDidChange
v24@?0@"CUPairingIdentity"8Q16
com.apple.MRDDeviceInfoDataSource.workerQueue
CurrentDeviceInfo
LOCAL
DeviceInfo.plist
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
  origin = %@
  deviceInfo = %@
  volume = %f
  volume capabilities = %@
  isMuted = %@
  time since playing = %lf
  is playing = %@
  active now playing client = %@
  override client = %@
  explicit now playing client = %@
  inferred now playing client = %@
  app activity = %@
  datasource = %@
  default supportedCommands = %@
q24@?0@"MRDNowPlayingClient"8@"MRDNowPlayingClient"16
all now playing clients = %@
volume
volumeCapabilities
isMuted
computedNowPlayingClient
Updated computedNowPlayingClient.
explicitNowPlayingClient
Updated explicitNowPlayingClient.
inferredNowPlayingClient
Updated inferredNowPlayingClient.
overrideNowPlayingClient
Updated overrideNowPlayingClient.
applicationActivity
Updated applicationActivity.
RemoveAllClients
Removed nowPlayingClient.
v32@?0@"NSString"8@"NSData"16^B24
setNowPlayingDataSource
nowPlayingApplicationDidChange
nowPlayingApplicationPlaybackStateDidChange
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange
PlayerPictureInPictureEnabledDidChange
ActivePlayerDidChange
NowPlayingApplicationDidUnregisterCanBeNowPlaying
@"MRDNowPlayingClient"8@?0
com.apple.mediaremoted.MRDNowPlayingOriginClient/%@
@16@?0@"MRDNowPlayingPlayerClient"8
addNowPlayingClient-%@
com.apple.mediaremote.originclient.playbacktimer
%@ was not playing recently
%@ is playing for notification <%@>
com.apple.mediaremote.originClient.userDefaults.serialQueue
<%@ %p: %@>
B32@?0@"MRAVOutputDevice"8Q16^B24
Speaker
<%p> %@ {
registeredForNowPlayingCount = %u
registeredForVolumeCount = %u
coalescingStates = %@
  supportedCommands = %lu
 playbackQueue = %@
 playbackQueueCapabilities = %@
  contentItems = %@
  contentItemArtworks = %@
  playbackStateTimestamp = %@ (%lf seconds ago)
    playerProperties = %@
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
AVSystemController_CurrentExternalScreenAttribute
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_ExternalScreenDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
com.apple.mediaremote.MRDLockScreenController
Previous playerPath %@ invalidated
v16@?0^v8
PlayerPath changed from %@ to %@ with changeType %@
visible
NOT visible
Personal devices changed
Lock screen content changed
LayoutChange
ElectedPlayer %@ playback
started
stopped
playerPath
personal device
com.apple.mediaremoted.LockScreen
SBDashBoardNowPlayingAssertionIdentifier
SBSLockScreenContentAssertion
/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices
SBSLockScreenContentAssertionSlotPlatter
MRDConnectionLifetimeController-%@-%ld.queue
Init
Device is in use
Device is on cover sheet
Device is playing
Device played recently
Device is part of UserSelected endpoint
Remote device is playing to local device
DeviceInfo changed
Has not played recently
ScreenOff -> CoverSheet
ScreenOff -> InUse
CoverSheet -> InUse
CoverSheet -> ScreenOff
InUse -> ScreenOff
Active endpoint changed
com.apple.mediaremoted.hostedExternalDevice.serialQueue
com.apple.mediaremoted.hostedExternalDevice.callbackQueue
<%@: %p externalDeviceName=%@>
%@: %p {
    external device = %@
    connection state = %@
    last can migrate to local endpoint error = %@
    discovery modes = %@    external device clients = %@
    external output context = %@
    subscribed playerPaths = %@
    lifetimeController = %@
TV joined Expanse session.
Not already connected to endpoint
Local device is groupable
mediaremotetool
B16@?0@"MRDAVHostedExternalDeviceClient"8
v20@?0I8^{__CFError=}12
v20@?0f8@"NSString"12
v20@?0I8@"NSString"12
init
Endpoint is not initialized
v16@?0^{__CFString=}8
v24@?0^{__CFString=}8^{__CFData=}16
groupContainsGroupLeader
groupLeader
topology
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
kAirPlayWHANotification_BreakAwayFromCurrentGroup
@"MRProtocolMessage"16@?0@"MRDExternalDeviceServerClientConnection"8
@"MRProtocolMessage"20@?0@"NSString"8I16
@"MRProtocolMessage"24@?0@"MRDExternalDeviceServerClientConnection"8@"MRAVEndpoint"16
%@ -> %@
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"MRAVRoutingDiscoverySession"16^B24
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v16@?0^{__CFArray=}8
v16@?0@"_MRLyricsEventProtobuf"8
Connection %@ exited in the middle of a migration
v24@?0@"MRPlaybackSessionRequest"8@"MRPlayerPath"16
B16@?0@"MRDExternalDeviceServerClientConnection"8
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
com.apple.tvremotecore.xpc
SBSUndimScreen
SpringBoardServices
v24@?0@"CUPairedPeer"8Q16
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
@16@?0@"MRPlayerPath"8
v16@?0@"MROrigin"8
v32@?0@"NSString"8@"MRAVOutputDevice"16^B24
v40@?0@"NSDictionary"8@"NSArray"16@"MRAVEndpoint"24@"NSError"32
sendPlaybackSession<%@>
sendPlaybackSessionMigrateBegin<%@>
sendPlaybackSessionMigrateEnd<%@>
%@ from external device client: %@<%@>
v24@?0q8@"NSError"16
v20@?0B8@"NSError"12
MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification
com.apple.mediaremoted.MRDHostedRoutingController/calloutQueue
DiscoverySession=%@
%s is abstract
-[MRDHostedRoutingController createDiscoverySession]
-[MRDHostedRoutingController _onQueue_reloadEndpoints]
-[MRDHostedRoutingController _onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:]
-[MRDHostedRoutingController makeEndpointWithOutputDevices:options:]
MediaRemote
virtual_device
q24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"MRAVDistantOutputDevice"16@?0@"MRAVOutputDevice"8
v32@?0@"NSString"8@"MRDAVHostedExternalDevice"16^B24
@"NSString"16@?0@"MRAVOutputDevice"8
@"_MRAVOutputDeviceDescriptorProtobuf"24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"MRAVDistantOutputDevice"16@?0@"MRAVDistantOutputDevice"8
ignoreExistingLeader
preferExistingConnection
preferSubscription
preferCloudLibrary
preferHomePod
preferAppleTV
{ %@ }
proxyGroupPlayer
relayable
remoteControllable
existingConnection
appleMusicSubscription
iCloudMusicLibrary
existingLeader
HomePod
AppleTV
existingDesignatedLeader
_MRDActiveOriginDataDefaultsKey
LastNowPlayingAppIsPlayingState
_MRDActivePlayerPathDateDefaultsKey
_MRDAnyNowPlayingAppIsPlayingDefaultsKey
%@ has exited in the middle of a migration attempt
v24@?0@"NSString"8@"NSMutableDictionary"16
v32@?0@"MRContentItem"8@"MRPlaybackQueueRequest"16^B24
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
MRXPC_NOWPLAYING_DISPLAYID_KEY
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
@16@?0@"MRDNowPlayingClient"8
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
@"NSData"16@?0@"MRDNowPlayingPlayerClient"8
MRXPC_NOWPLAYING_PLAYER_PATH_ARRAY_DATA_KEY
MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY
v16@?0@?<v@?@"NSData"I>8
v24@?0@"NSData"8@"NSError"16
Application <%@> waiting for can be now playing
v20@?0@"NSData"8I16
Unable to register for waking now playing notifications without entitlement: %@
com.apple.mediaremote.waking-now-playing-notifications
MRXPC_AUDIO_FORMAT_CONTENT_INFO
q24@?0@"MRDNowPlayingOriginClient"8@"MRDNowPlayingOriginClient"16
event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>
com.apple.maybePostDistributedNotifications.serialQueue
Playing
Not Playing
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%@ %p {
    player path = %@
    client = %@
    perPlayerCanBeNowPlaying = %@
    canBeNowPlaying = %@
    canBeNowPlayingTimestamp = %@
    effectiveCanBeNowPlaying = %@
    any player is playing = %@
    has now playing data = %@
    foregrounded = %@
    supportsBackgroundAudio = %@
    active player client = %@
    player clients = %@
effectiveBundleIdentifier
v16@?0@"NSDictionary"8
UIBackgroundModes
audio
displayName
activePlayerClient
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
@"AVOutputContext"8@?0
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v32@?0@"NSNumber"8@"MRDMediaRemoteClient"16^B24
com.apple.mediaremote.mediaremoted.notificationQueue
_MROriginatingNotification
com.apple.mediaremote.companionLinkClient
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_APP_INSTALLED_KEY
MRXPC_BOOL_RESULT_KEY
System Media Wake - %@
Player Service Wake - %@
Bless Request - %@
v16@?0@"_MRDiagnosticProtobuf"8
com.apple.mediaremote.MRDMediaRemoteServer
No diagnostic info
XPC Client: %@:
MediaRemote Client Diagnostic
Collected at: %@
================================================================================
clientDiagnose
MRXPC_ROUTE_UID_KEY
q24@?0@"MRDMediaRemoteClient"8@"MRDMediaRemoteClient"16
com.apple.
kern.bootsessionuuid
Restoring state of client after daemon launch
%@ is invalid. You must provide a type, pid and bundleID with %@.
%@ type=%@
SendCommand
RelayServerMessage
BrowsableContentMessage
Transaction
RestoreState
Wake
Notification
UIPresentation
UnknownType
<MRDAutoConnectionControllerReason %@ - %@>
com.apple.mediaremote.MRDAutoConnectionController
player %@ started playing
q24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
%@ endpoint changed
autoConnectToEndpoint
autoConnectToEndpoint-%@
endpointChanged
proximity
reconnect
startedPlaying
requestDestination
MRDElectedPlayerControllerEventUserInfoKey
ElectedOrigin changed from <%@> (<%@>) to <%@> (<%@>)
%@ PlaybackQueueChanged
%@ Playback %@
NowPlayingAppChanged to %@
Was %@grounded
Fore
Back
activeSystemEndpointDidChange
ElectedPlayerController failed to connect
v16@?0^{__MRAVEndpointRef=}8
is playing
SiriIntent
was playing recently <%lf> seconds ago but not nowPlayingData
was not playing recently. Last played <%lf> seconds ago
%@ has no activePlayer
%@ is not foregrounded and does not support background audio
%@ has no activeNowPlayingClient
com.apple.mediaremote.electedplayercontroller.playbacktimer
%@ playback timeout event %@ after <%lf> seconds
electedPlayer %@ was not playing recently for event <%@>
electedPlayer %@ is playing for event <%@>
no electedPlayer for event <%@>
OriginChanged
PlaybackChanged
NowPlayingAppChanged
NowPlayingAppForegroundChanged
PlaybackQueueChanged
<%@:%p {
  started = %@
  connections = %@
APReceiverMediaRemoteXPCClient_SetDelegate
@"MRAirPlayTransportConnection"8@?0
AVOutputContextCommunicationChannel.didCloseCommunicationChannel
APReceiverMediaRemoteCommunicationChannel.didCloseCommunicationChannel
/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver
MediaRemote Diagnostic
================================================================================
Active Clients
Active Transactions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Elected Player
Elected Player Reason
LockScreen Widget Active
LockScreen Widget Visible
LockScreen Widget PlayerPath
Origin Forwarders
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
External Discovery Sessions
RemoteControlService
Local OutputContextDataSource
OutputContexts
BatchedNowPlayingState
Routing Server
System Discovery Mode (Legacy)
AirPlay Security Settings
Local Receiver Pairing Identity
System Active Endpoints
Auto Connecting Endpoints
Auto Connected Endpoints
Proximity Events
Nearby Devices
Medium Devices
Immediate Devices
Proximal Migrating Devices
Hosted Routing
Hosted Discovery Mode
Discovery Sessions
Endpoints:
Endpoint
External Device
v32@?0@"MRAVDistantEndpoint"8Q16^B24
Remaining External Devices
EndpointID: %@
v32@?0@8@"MRDAVHostedExternalDevice"16^B24
Concrete Discovery Session
Stream Count
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
Companion Link
RPDevice<routeID: %@>
Home Users
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
<%@ %p {
  AirPlayService = %@
  CompanionService = %@
  RapportService = %@
  IDSService = %@
com.apple.mediaremote.ui-control
<%@: %p bundleID=%@>
com.apple.MRDUIServer.messageQueue
CXCallObserver
B16@?0@"MRAVEndpoint"8
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
MRDAVOutputContextExternalDeviceDiscoveryLocalClusterTypeDidChangeNotification
MRDAVOutputContextExternalDevice.serialQueue
MRDAVOutputContextExternalDevice.workerQueue
MRDAVOutputContextExternalDevice.notificationQueue
startUp
PREWARM-DUMMY-DEVICE
v20@?0C8^v12
prewarmApp
v32@?0@"MRDMediaRemoteClient"8@"MRPlayerPath"16@"NSError"24
designatedGroupLeader
origin
outputContext
<%@: %p id=%@ leader=%@ origin=%@-%ld originFwd=%@>
<%@: %p {
    designatedGroupLeader = %@
    origin = %d:%@
    originForwarder = %@
    outputContextController = %@
    outputContext = %@
OutputContextExternalDevice does not have a designatedGroupLeader. (PreviousGroupLeader=%@)
Invalid routingContextID detected. From %@ to %@
handleRemoteCommand
Needed to interrupt %@ in order to continue with command
originCommand
Failed to commit group leader to output context
createPlayerAndWaitForConnection
Could not find xpcClient for playerPath %@
Could not find application in playerPath %@
createPlayerAndWaitForCanBeNowPlaying
Waiting for %@ to set canBeNowPlayingPlayer=YES
createPlayer
v24@?0@"NSObject<OS_xpc_object>"8@"NSError"16
@"NSObject<OS_xpc_object>"16@?0@"MRPlayerPath"8
_handlePlaybackQueueRequest
_handlePlaybackSessionRequest
@"MRProtocolMessage"16@?0@"MRPlayerPath"8
v24@?0@"MRProtocolMessage"8@"NSError"16
_handlePlaybackSessionMigrateRequest
interruptBestStreamIfNecessary
_handlePlaybackSessionMigrateBeginRequest
_handlePlaybackSessionMigrateEndRequest
setOutputDeviceVolume
Attempting to set and add/remove devices at the same time, which is unsupported
modifyOutputContext
Failed to find devices with UIDs: %@
v32@?0@"NSString"8@"MRAVConcreteOutputDevice"16^B24
MRDAVOutputContextExternalDevice<%@>
%@ %@
Local device changed clusterType in discovery
Local device changed clusterType to %u
External device is invalid (no designatedGroupLeader)
OutputContextExternalDevice-%@-%@:%@<%@>
BYSetupAssistantFinishedDarwinNotification
/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant
BYSetupAssistantNeedsToRun
com.apple.MediaRemote.connectionMonitor
<%@ %p : %@>
    stauts = %@
    currentMessageCount = %lu
    totalMessageCount = %lu
    lastMessageSent = %f seconds ago
    lastStatusCheck = %f seconds ago
    lastStatusChange = %f seconds ago
    pendingBarrierCompletion = YES
    paramters = {%lu x %f}
%@:%@-%d
XPCConnectionBarrier
Running
Suspended
com.apple.airplay.password
MostRecentlyUsedAVOutputDeviceUIDs
MRDRoutingServerDidStartNowPlayingSession
MRDRoutingServerDidStopNowPlayingSession
com.apple.mediaremote.routingServer.operationQueue
Restore
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v16@?0@"NSString"8
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v24@?0@"MRDAVRoute"8@"NSError"16
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_CUSTOM_XPC_ENDPOINT_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_AIRPLAY_LEADER_TYPE
requestID
MRXPC_ENDPOINT_LEADER_OPTIONS_KEY
v20@?0@"MRAVEndpoint"8I16
_handleStartNowPlayingSession
v32@?0@"MRPlayerPath"8@"MRDeviceInfo"16@"NSError"24
Returning local origin because device requires command redirection
%@<%@> looking for localDevice with groupID=%@
Rejecting endpoint %@ because localDevice %@ isAirPlayReceiverSessionActive=NO
Rejecting endpoint %@ because endpointGroupID %@ != %@
Discovered local device on endpoint: %@
Failed to query output context for local device
Failed to remove local device from existing context
com.apple.mediaremote.routingServer.getDeviceUID
MRXPC_ROUTING_CONTEXT_UID_KEY
@16@?0@"NSData"8
MRXPC_SOURCE_ENDPOINT_UID_KEY
MRXPC_MIGRATE_REQUEST_DATA_KEY
MRXPC_DESTINATION_ENDPOINT_UID_KEY
groupDevicesAndSendCommand
Analytics: Group devices and send message
createHostedEndpointForDevices
v16@?0@"MRAVOutputDevice"8
com.apple.mediaremote.removeFromParentGroup
com.apple.mediaremote.routingServer.getExternalDevice
MRXPC_ENDPOINT_UID_KEY
MRXPC_EXTERNAL_DEVICE_LISTENER_KEY
_handleModifyOutputContextMessage
MRXPC_MESSAGE_CUSTOM_ID_KEY
MRXPC_CONTEXT_MODIFICATION_DATA_KEY
ContextID=%@ %@
B16@?0@"MRAVConcreteOutputContext"8
Failed to create output context with UID=%@
v16@?0@"MSVSystemDialogResponse"8
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
com.apple.mediaremoted.MRDAVRoutingServer
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_RELAYFAILED_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_IPALIASING_MESSAGE
AIRPLAY_CLUSTER_ATV_ALERT_RELAYFAILEDMULTIDFSNETWORK_MESSAGE
AIRPLAY_CLUSTER_ATV_ALERT_MESSAGE
Cluster connect error
AIRPLAY_ATV_CLUSTER_TRY_AGAIN
AIRPLAY_ATV_CLUSTER_CHANGE_DEFAULT_OUTPUT
prefs:root=DefaultAudioOutput
com.apple.TVSettings
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_NOT_CONNETED_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
APReceiverMediaRemoteXPCClient_CopyProperty
AirPlaySecuritySetting
password
createHostedEndpointForOutputDeviceUIDs
Modifying output context: %@
setOutputDevices failed
Discovering endpoint with output context: %@
Discovered hosted endpoint in %.2f s: %@
Failed to discover endpoint with contextID: %@ in %.2f s
Unable to discovery any of the given output devices
Relaying command to cluster leader: %@
Remote createHostedEndpoint finished with groupUID: %@, error: %@
v24@?0@"NSString"8@"NSError"16
B16@?0@"MRAVOutputDeviceDescription"8
MRDAVRoutingServer/resolveEndpoint
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet
AVOutputContextDeviceConnectionFailureReasonInfraRelayFailedMultiDFSNetwork
AVOutputContextDeviceConnectionFailureReasonInfraRelayFailed2GHzNetwork
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
FBSOpenApplicationOptionKeyPayloadURL
/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
RequestingAuthorizationToken
ReceivedAuthorizationToken
Retried
Completed
Cancelled
Failed
CanSleep
WillSleep
WillPowerOn
B24@?0@"NSString"8@"MRDAVHostedExternalDevice"16
undiscoverable endpoint
Endpoint no longer is discoverable
disconnected
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
  artworkCache = %@
q24@?0@"MRDPlaybackQueueArtworkCacheSize"8@"MRDPlaybackQueueArtworkCacheSize"16
B16@?0@"MRDPlaybackQueueArtworkCacheSize"8
<%@:%p> {
  cache = %@
%lf x %lf
PBS.%@
AVSystemController_FullMuteAttribute
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_AudioCategoryNotificationParameter
com.apple.siri
MusicUIServiceNowPlayingViewController
com.apple.MusicUIService
MusicUIServiceMediaControlsViewController
MusicUIServiceLanguageOptionsViewController
MusicUIServiceMediaControlsMediumConfidenceViewController
MRDMediaRemoteClientDidConnect
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.%@.%@.%@-%d
r*16@?0@"NSString"8
com.apple.mediaremote.%@.xpcTargetQueue
serialQueue
com.apple.mediaremote.send-commands
com.apple.AssistantServices
com.apple.lskdd
com.apple.mediaremote.nearby-device
com.apple.mediaremote.request-bless
com.apple.mediaremote.set-now-playing-app
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
com.apple.PairingManager
%@-%ld
<%@ %p, bundleIdentifier = %@, pid = %ld>
<%@ %p {
    bundle identifier = %@
    pid = %ld
    euid = %ld
    xpc connection = %@
    connection monitor = %@
    current task assertion = %@
    assertions = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    has requested legacy nowPlayingInfo = %s
    has requested supported commands = %s
    subscribedWakingPlayerPaths = %@
    playbackQueueRequests = %@
com.apple.iapd
com.apple.iap2d
v16@?0@"MSVTaskAssertion"8
sendRemoteControlCommand
Redirecting command to local origin legacy handler. Command will be re-emitted under origin containing the local device: %@
Redirecting command to remoteEndpoint containing localDevice
Sending remote control command %@
 host process: %@(%d)
RequestPlaybackQueue
BeginLoadingBrowsableContent
%llu
Relaying XPC message %@ to client %@
MRXPC_ERROR_CODE_KEY
v24@?0@"NSString"8@"NSDictionary"16
v32@?0@"NSNumber"8@"NSValue"16^B24
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
MRDisplayMonitorLayoutDidChange
MRDisplayMonitorDisplayDidChangeNotification
com.apple.mediaremote.MRDDisplayMonitor
v32@?0@"FBSDisplayLayoutMonitor"8@"FBSDisplayLayout"16@"FBSDisplayLayoutTransitionContext"24
Display%@
LockScreen%@grounded
LockScreen%@Visible
ControlCenter%@Visible
FBSDisplayLayoutMonitor
FBSDisplayLayoutMonitorConfiguration
FBSDisplayLayoutElementLockScreenIdentifier
FBSDisplayLayoutElementControlCenterIdentifier
com.apple.mediaremote.MRDIDSServiceConnection
v32@?0@"MRDIDSServiceMessage"8@"NSString"16@"NSString"24
 deviceUID = %@
 device = %@
 service = %@
 destinationMessageHandlers = %@
 responseMessageHandlers = %@
 deviceMessageHandler = %@
 invalidationHandler = %@
 connectionHandler = %@
Device Connection was manually reset by the peer
Device fell out of IDS service
default
v24@?0@"NSDictionary"8@"NSError"16
B24@?0r*8@"NSObject<OS_xpc_object>"16
A reply object could not be created.
A reply connection could not be obtained.
MRDLaunchApplicationWithReason
com.apple.mediaservicesbroker.app
com.apple.SoundScapes
post-launch setup for  %@
com.apple.MediaRemote.command
invoked.notify.client
%@.%@.%@.%@
%@.%@.%@
%@.%@
v24@?0@"BSProcessHandle"8@"NSError"16
launchAppAndWaitForXpcConnection
Application <%@> waiting for xpcConnection
launchAppAndWaitForCanBeNowPlaying
Application <%@> waiting for CanBeNowPlaying
FallbackIdentifier-%d
SBSCopyFrontmostApplicationDisplayIdentifier
FBSOpenApplicationOptions
FBSOpenApplicationService
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
, options = %@
com.apple.BTAvrcp
com.apple.rcd
com.apple.AVRCP
<%@ %p, command = %@, routedToApp = %@>
-[MRDAVRoute initWithDictionary:]
com.apple.mediaremoted.UIController.%p
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
AVOutputDevice
com.apple.amp.mediaremote
outputDeviceUID
type
changeType
date
eventReason
selectionReason
initWithFormat:
description
setOutputDeviceUID:
setType:
setDate:
event
setEvent:
setEventReason:
setSelectionReason:
setChangeType:
.cxx_destruct
_outputDeviceUID
_type
_date
_event
_eventReason
_selectionReason
_changeType
T@"NSString",&,N,V_outputDeviceUID
Tq,N,V_type
T@"NSDate",&,N,V_date
Tq,N,V_event
T@"NSString",&,N,V_eventReason
T@"NSString",&,N,V_selectionReason
Tq,N,V_changeType
init
server
nowPlayingServer
initWithSuiteName:
sharedSystemAudioContext
_hasPersonalDeviceForContext:
_initializeSystemEndpointInfo
defaultCenter
_handleOriginDidRegisterNotification:
addObserver:selector:name:object:
_handleOriginDidUnregisterNotification:
_handleOutputContextDidAddOutputDeviceNotification:
_handleIsPlayingDidChangeNotification:
_deviceInfoDidChange:
removeObserver:
dealloc
allValues
countByEnumeratingWithState:objects:count:
numberWithInteger:
setObject:forKeyedSubscript:
timeIntervalSinceNow
numberWithDouble:
objectForKeyedSubscript:
_onSerialQueue_updateSystemEndpoint:type:event:eventReason:
reason
updateUserSelectedSystemEndpoint:event:eventReason:
activeOutputDeviceUID:
isEqualToString:
initWithOutputDeviceUID:reason:
setClientBundleIdentifier:
_onSerialQueue_reconnectToOutputDevice:completion:
availableEndpoints
containsOutputDeviceWithUID:
externalDevice
customOrigin
originClientForOrigin:
registrationDate
compare:
localOriginClient
userInfo
deviceUID
name
mainBundle
bundleIdentifier
originClientForDeviceUID:
clearUserSelectedOutputDeviceUID:event:reason:clientBundleIdentifier:
object
updateUserSelectedSystemEndpoint:
playerPath
client
processIdentifier
_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:
_onSerialQueue_maybeSetupPlaybackTimerForEvent:
_onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:
_onSerialQueue_calculateActiveEndpoint:event:reason:
_onSerialQueue_calculateUserSelectedEndpointForEvent:reason:
_onSerialQueue_calculateProactiveEndpoint:
timeSincePlaying
currentSettings
mediaRecentlyPlayedInterval
endpointRecentlyUserSelectedInterval
useProactiveEndpoint
activeNowPlayingClient
activePlayerClient
isPlaying
systemEndpointInfo
_writeSystemEndpointInfo:
copy
delegate
systemEndpointController:activeSystemEndpointDidChangeForRequest:type:
isPairedDeviceSync
clientBundleIdentifier
numberWithInt:
dictionaryWithObjects:forKeys:count:
origin
_onSerialQueue_maybeSetupUserSelectedTimerForEvent:
reasonWithType:string:
sharedConnectionController
connectToOutputDevice:reason:queue:completion:
invalidateWithReason:
initWithInterval:name:queue:block:
outputDevices
deviceType
deviceSubtype
setObject:forKey:
objectForKey:
intValue
enumerateKeysAndObjectsUsingBlock:
activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval
isLocal
isEqual:
clusterID
groupedDevices
mr_any:
mr_first:
initWithRoutingController:
setDelegate:
_serialQueue
_userDefaultQueue
_nowPlayingServer
_routingController
_systemEndpointEntries
_cachedHasPersonalDevices
_userDefaults
_userSelectedTimer
_playbackTimer
_activeOrigin
_delegate
T@"NSDictionary",R,N
T@"<MRDAVSystemEndpointControllerDelegate>",W,N,V_delegate
containsString:
stringByReplacingOccurrencesOfString:withString:
setPlayerPath:
commandDictionary
setCommandDictionary:
completionBlockDictionary
setCompletionBlockDictionary:
_playerPath
_commandDictionary
_completionBlockDictionary
T@"MRPlayerPath",C,N,V_playerPath
T@"NSMutableDictionary",&,N,V_commandDictionary
T@"NSMutableDictionary",&,N,V_completionBlockDictionary
dictionary
_clientDidConnectNotification:
_handlePlayerIsPlayingDidChangeNotification:
sendRemoteControlCommand:completion:
isAVRCPCommand
callControllerWillHandleCommandForBargeCalls:
initWithHandlerStatuses:sendError:
optionValueForKey:
boolValue
error
domain
code
_onQueue_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:
_effectiveContextIDForCommand:
commandType
_isCommandCacheCreating:
count
mutableCopy
unsignedIntValue
setCommandType:
_forwardCommand:completion:
_isCommandCacheable:
numberWithUnsignedInt:
broadcastRemoteControlCommand:completion:
remoteControlClients
sendRemoteControlCommand:toClients:completion:
commandID
UTF8String
initWithCapacity:
_createBroadcastCommandPlayerPathForClient:
_createBroadcastCommandResponseFromStatuses:forClient:
addObject:
_sendRemoteControlCommand:toDestinationClient:withLegacyCompletion:
broadcastCommandWaitDuration
initWithInterval:repeats:queue:block:
_shouldIgnoreCommand:completion:
originatingAppDisplayID
removeObjectsForKeys:
allClients
canBeNowPlaying
_handleSendCommandMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
_handlePrewarmMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsCommandMessage:fromClient:
_handleDismissMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsLanguageOptionsCommandMessage:fromClient:
_handleGetPendingCommandsMessage:fromClient:
_handleSendPlaybackSessionMessage:fromClient:
_handleSendPlaybackSessionMigrateBeginMessage:fromClient:
_handleSendPlaybackSessionMigrateEndMessage:fromClient:
_handleTriggerAudioFadeMessage:fromClient:
setEnqueuedCommands:
setRemoteControlContexts:
data
remoteUIService
isValid
initWithConfigurationData:style:endpoint:
setRemoteUIService:
presentWithCompletion:
displayName
stringWithUTF8String:
initWithRouteUID:center:
isResolved
containsObject:
queryExistingPlayerPathForXPCMessage:forClient:
unresolvedPlayerPath
launchApplicationTimeoutInterval
xpcClient
relayXPCMessage:andReply:
playerClient
removeObject:
relayXPCMessage:andReply:resultCallback:
request
addPendingPlaybackSessionMigrateEvent:playerPath:
removePendingPlaybackSessionMigrateEvent:
fadeType
initWithFadeDuration:error:
initWithTimeout:reason:handler:
disarm
supportMultiplayerHost
player
sharedAVSystemController
audioSessionID
setAttribute:forKey:error:
initWithUnderlyingCodableMessage:error:
_sendQueuedCommandsForDestinationClient:
_clearAllQueuedCommandsForReason:
numberOfActivePhoneCalls:
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
appOptions
routeUID
length
routingServer
pickCachedRouteWithUID:
createNowPlayingClient
setClient:
setPlayer:
_sendRemoteControlCommand:toDestinationClient:withCompletion:
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localActiveClientBundleIdentifier
nowPlayingDataSource
nowPlayingApplicationDisplayID
clientForBundleIdentifier:
destinationAppDisplayID
initWithProcessIdentifier:bundleIdentifier:
localOrigin
initWithOrigin:client:player:
resolveExistingPlayerPath:
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
commandResultWithSendError:
clientWithRegisteredCustomOrigin:
sendError
handlerReturnStatuses
_resolveCommandBeforeSend:toClient:error:
_performCommandProcessingAfterSend:
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_clearQueuedCommandsForApplicationWithDisplayID:
setDestinationAppDisplayID:
senderID
initWithBundleIdentifier:
queuedCommandsTimeoutInterval
dateCreated
_completionHandler
removeObjectForKey:
removeAllObjects
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
localNowPlayingClient
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
shouldSendCommandsDuringPhoneCall
supportExpanseMigration
sharedManager
expanseSessionActive
alwaysIgnoreDuringSharePlay
expanseSessionHasActiveActivity
alwaysIgnoreDuringCall
shouldSendCommand:
protobuf
setOrigin:
setProcessIdentifier:
setBundleIdentifier:
addHandlerReturnStatus:
_persistPlaybackSessionAndUpdateOptionsForSessionPreloadCommand:forClient:error:
_cleanUpPersistedSessionForSessionPreloadCommand:
initWithData:
identifier
initWithMRError:
fileURLWithPath:
defaultManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
playbackSessionData
writeToURL:options:error:
connection
path
stringWithCString:encoding:
setOptionValue:forKey:
revision
metadata
removeItemAtURL:error:
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
setAlternateButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithOptions:
dismiss
queryPlayerPath:
nowPlayingClient
initWithArray:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
phoneCallObserver:callDidChange:
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
_enqueuedCommandsForDisplayID:
_applicationIsRunning:
_commandQueuesForDisplayIDs
_pendingSendPlaybackSessionDisplayIDs
_remoteControlContexts
_callObserver
_remoteAlertWorkerQueue
_fadeOutNotificationToken
_redirectionCache
_remoteControlDialog
T@"NSArray",R,N
entitlements
initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:optionsData:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
adjustVolume:error:
setIsMuted:error:
routingDataSource
currentVolume
isMuted
capabilities
_isMuted
_currentVolume
_capabilities
_routingDataSource
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
Tf,R,N,V_currentVolume
TB,R,N,V_isMuted
TI,R,N,V_capabilities
standardUserDefaults
dictionaryForKey:
boolForKey:
setBool:forKey:
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
clearRoutedCommands
_routedCommands
_commandQueue
_contextID
_originatingAppDisplayID
T@"NSString",R,N,V_contextID
T@"NSString",R,N,V_originatingAppDisplayID
pickedRoute
arrayWithObjects:count:
pickedRouteForCategory:source:
pickedRoutes
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRoutesForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
addAuthorizationCallbackForRouteID:requestCallback:
removeAuthorizationCallbackForRouteID:
authorizationRequestCallbackForRouteID:
discoveryMode
setDiscoveryMode:
externalScreenType
_authorizationCallbacks
_discoveryMode
_externalScreenType
_pickedRoute
TI,N,V_discoveryMode
T@"MRDAVRoute",R,N,V_pickedRoute
TI,R,N,V_externalScreenType
sharedServer
messageQueue
addClientObserver:
deviceSupportsSessions
sessionController
clearSessions
currentConnection
clientForConnection:
setHasLockScreenAssertion:
evaluateState
setHasQuickControlsAssertion:
nowPlayingSessionIdentifier
setHasScreenMirroringAssertion:
contextForSessionIdentifier:
clients
hasQuickControlsAssertion
hasLockScreenAssertion
hasScreenMirroringAssertion
startNowPlayingSession
endNowPlayingSession
startMirroringSession
endMirroringSession
clientConnected:
clientDisconnected:
acquireLockScreenControlsAssertionWithReply:
releaseLockScreenControlsAssertionWithReply:
acquireQuickControlsAssertionWithReply:
releaseQuickControlsAssertionWithReply:
acquireScreenMirroringQuickControlsAssertionWithReply:
releaseScreenMirroringQuickControlsAssertionWithReply:
contextForSessionIdentifier:reply:
queue
_sessionController
_queue
T@"MRUISessionController",R,N,V_sessionController
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
bytes
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_processID
_bundleID
T@"NSString",R,N,V_bundleID
Ti,R,N,V_processID
_handlePlaybackStateDidChange:
streamsActivelyUsingSlot
reserveSlotForLocal
maxStreamCapacity
deviceInfo
appendString:
appendFormat:
activeContent
UUID
UUIDString
streamsThatCountTowardsCapacity
timeIntervalSinceDate:
remainingStreamCapacity
activeStreamCount
initWithMRError:format:
initWithMRError:description:
canActivateStreamWithPlayerPath:
bestStreamToInterrupt
initWithPlayerPath:
sendCommand:options:queue:completion:
allStreamsExcludingLocal
msv_compactMap:
lastPlayingDate
sortedArrayUsingComparator:
firstObject
initWithFirst:second:
containsActiveStream
containsDevice:
_willStartingPlaybackToOutputDevicesInterrupt:
second
first
numberWithBool:
originClients
isHosted
msv_filter:
allStreams
containsLocalDevice
routingContextID
msv_firstWhere:
arrayByAddingObject:
isLocallyHosted
interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:reason:completion:
willStartingPlaybackToOutputDevicesInterrupt:
Tq,R,N
T@"MRDNowPlayingPlayerClient",R,N
isActiveStream
playbackQueue
contentItemWithOffset:
title
distantPast
_handleNowPlayingAppDidChange:
canBeNowPlayingPlayer
commandInfosFromData:
setSupportedRemoteControlCommands:
isEqualToData:
supportedRemoteControlCommands
_onQueue_supportedCommandsDidChange:
_onQueue_popState
minimalReadableDescription
_onQueue_pushState
initWithPlaybackQueue:
_onQueue_playbackQueueDidChange:nowPlayingItemChanged:
playbackState
initWithPlaybackState:date:
_onQueue_playbackState
hasPlaybackRate
hasElapsedTimeTimestamp
elapsedTimeTimestamp
initWithTimeIntervalSinceReferenceDate:
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_isPlaying
setSupportedCommands:
setPlaybackQueue:
setPlaybackQueueCapabilities:
setDisplayName:
setPlaybackState:
timeIntervalSinceReferenceDate
setPlaybackStateTimestamp:
_onQueue_lastPlayingDate
mergeFrom:
updatePlaybackQueue:fromRequest:
_onQueue_updatePlaybackQueue:fromRequest:
contentItems
updatePlaybackQueueWithContentItems:fromRequest:
_onQueue_playbackQueueContentItemsDidChange:
artwork
imageData
_onQueue_playbackQueueContentItemsArtworkDidChange:
clearArtworkForContentItems:
_sortSnapshots:
snapshotsForIsPlaying:
createPlaybackQueueForRequest:cachingPolicy:playerPath:partiallyCachedItems:
clearArtwork
nowPlayingPlayerClient:playerCanBeNowPlayingDidChange:
nowPlayingPlayerClient:isPlayingDidChange:
nowPlayingPlayerClient:pictureInPictureEnabledDidChange:
setPlayerPlaybackState:
nowPlayingPlayerClient:playbackStateDidChange:
nowPlayingPlayerClient:supportedCommandsDidChange:
nowPlayingPlayerClient:playbackQueueDidChange:nowPlayingItemDidChange:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:
initWithArray:copyItems:
nowPlayingPlayerClient:playbackQueueContentItemsDidChange:
nowPlayingPlayerClient:playbackQueueArtworkContentItemsDidChange:
setPushStateIsPlaying:
setPushStatePlaybackState:
setPushStatePlayer:
hasNowPlayingData
setPushStateHasNowPlayingData:
isPictureInPictureEnabled
setPushStatePictureInPictureEnabled:
setPushStateCanBeNowPlayingPlayer:
pushStateHasNowPlayingData
stringWithFormat:
initWithName:
pushStatePictureInPictureEnabled
_onQueue_pictureInPictureEnabledDidChanged:
pushStateIsPlaying
pushStatePlaybackState
_onQueue_playbackStateDidChanged:
_onQueue_isPlayingDidChange:
pushStateCanBeNowPlayingPlayer
_onQueue_canBeNowPlayingDidChange:
audioSessionType
mxSessionIDs
pushStatePlayer
nowPlayingPlayerClient:playerStateDidChange:
supportedRemoteControlCommandsData
setSupportedRemoteControlCommandsData:
nowPlayingContentItem
setInferredPlaybackState:
inferredPlaybackState
updatePlaybackState:date:
updateLastPlayingDate:
setCanBeNowPlayingPlayer:
canBeNowPlayingPlayerTimestamp
setCanBeNowPlayingPlayerTimestamp:
playbackStateTimestamp
playbackQueueCapabilities
nowPlayingState
setPictureInPictureEnabled:
updateClient:
updatePlayer:
updatePlaybackQueue:
notifyArtworkChangedForContentItems:
snapshotForPlaybackState:
snapshotForIsPlaying:
snapshots
playbackQueueForRequest:cachingPolicy:playerPath:partiallyCachedItems:
subscriptionController
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueueInternal
_playbackQueueCapabilities
_canBeNowPlayingPlayerTimestamp
_playerPlaybackState
_inferredPlayerPlaybackState
_playbackStateHistory
_pictureInPictureEnabled
_canBeNowPlayingPlayer
_hasNowPlayingDataTransaction
_pushStateIsPlaying
_pushStateHasNowPlayingData
_pushStatePictureInPictureEnabled
_pushStateCanBeNowPlayingPlayer
_lastPlayingDate
_subscriptionController
_pushStatePlaybackState
_pushStatePlayer
T@"NSArray",&,N
TB,N,V_pushStateIsPlaying
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_pushStatePlaybackState
T@"MRPlayer",&,N,V_pushStatePlayer
TB,N,V_pushStateHasNowPlayingData
TB,N,V_pushStatePictureInPictureEnabled
TB,N,V_pushStateCanBeNowPlayingPlayer
TB,N
T@"NSDate",C,N
TI,R,N
T@"NSDate",R,N
TI,N
T@"NSData",C,N
T@"MRPlaybackQueue",C,N
T@"MRContentItem",R,N
TQ,N
TB,R,N
Td,R,N
T@"NSDate",R,N,V_lastPlayingDate
T@"MRPlayer",R,N
T@"MRPlayerPath",&,N
T@"MRNowPlayingState",R,N
T@"MRPlaybackQueueSubscriptionController",R,N,V_subscriptionController
pictureInPictureEnabled
TB,N,GisPictureInPictureEnabled
T@"<MRDNowPlayingPlayerClientDelegate>",W,N,V_delegate
_playbackState
TI,R,N,V_playbackState
T@"NSDate",R,N,V_date
playerPlaybackState
playbackStateDescription
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_playerPlaybackState
T@"NSString",R,N
setDispatchQueue:
setLastKnownBluetoothAddress:
_txtDataChanged
setBluetoothAddressChangedHandler:
_initializeBonjourServiceWithDeviceInfo:
deviceInfoForOrigin:queue:completion:
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
stop
activate
publishWithOptions:
invalidate
bonjourRemoteControlService:didAcceptConnection:
initWithInputStream:outputStream:
_txtDataChangedWithUserInfo:
_txtDataChangedWithDeviceInfo:
lastKnownBluetoothAddress
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
localizedModelName
buildVersion
isPairingAllowed
bluetoothAddress
managedConfigurationDeviceIdentifier
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerExternalDeviceConnections
setIncludesPeerToPeer:
start
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
initWithNetServiceType:
netServiceType
_bluetoothClient
_networkService
_started
_netServiceType
_lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDBonjourRemoteControlServiceDelegate>",W,N,V_delegate
T@"NSString",R,N,V_netServiceType
auditToken
initWithConnection:label:
_maybeWakeClient
remoteObjectProxy
hostedExternalDeviceConnectionStateDidChange:withError:
verboseHostedExternalDeviceClientLogging
setConnectionState:
setConnectionStateError:
canSendMessage:
hostedExternalDeviceNameDidChange:
setName:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceEndpointDidChange:
setEndpoint:
hostedExternalDeviceEndpoint:volumeCapabilitiesDidChange:forOutputDevice:
outputDeviceVolumeCapabilities
setOutputDeviceVolumeCapabilities:
setVolumeCapabilities:
hostedExternalDeviceEndpoint:volumeDidChange:forOutputDevice:
outputDeviceVolume
setOutputDeviceVolume:
numberWithFloat:
setVolume:
hostedExternalDeviceEndpoint:didAddOutputDevice:
outputDeviceModifications
addOutputDevice:forEndpoint:
hostedExternalDeviceEndpoint:didChangeOutputDevice:
changeOutputDevice:forEndpoint:
hostedExternalDeviceEndpoint:didRemoveOutputDevice:
removeOutputDevice:forEndpoint:
discoveryOutputDevicesChanged:forConfiguration:
discoverySessionConfigurationsResults
setDiscoverySessionConfigurationsResults:
_resumeConnectionWithState:
connectionState
connectionStateError
endpoint
volumeCapabilities
floatValue
volume
addedOutputDevices
changedOutputDevices
removedOutputDevices
anyPlayerPath
notificationRequiresTaskAssertionForPlayerPath:
wakingPlayerPathAssetionDuration
takeAssertion:forReason:duration:
connectionDidResume:
connectionDidInvalidate:
initWithConnection:
discoveryTokenForConfiguration:
setDiscoveryToken:forConfiguration:
discoveryTokens
registeredCallbacks
setRegisteredCallbacks:
notifications
setNotifications:
subscribedPlayerPaths
setSubscribedPlayerPaths:
pendingClientState
setPendingClientState:
connectionMonitor
setConnectionMonitor:
setXpcClient:
_discoveryTokens
_connectionState
_connection
_bundleIdentifier
_registeredCallbacks
_notifications
_subscribedPlayerPaths
_pendingClientState
_connectionMonitor
_xpcClient
T@"MRDAVHostedExternalDevicePendingClientState",&,N,V_pendingClientState
T@"MRXPCConnectionMonitor",&,N,V_connectionMonitor
T@"MRDMediaRemoteClient",&,N,V_xpcClient
T@"NSXPCConnection",R,N,V_connection
T@"NSString",R,N,V_bundleIdentifier
TQ,N,V_registeredCallbacks
TQ,N,V_notifications
TI,N,V_connectionState
T@"NSArray",C,N,V_subscribedPlayerPaths
setOutputDeviceModifications:
_connectionStateError
_name
_endpoint
_volume
_volumeCapabilities
_outputDeviceVolume
_outputDeviceVolumeCapabilities
_outputDeviceModifications
_discoverySessionConfigurationsResults
T@"NSError",&,N,V_connectionStateError
T@"NSString",&,N,V_name
T@"MRAVDistantEndpoint",&,N,V_endpoint
T@"NSNumber",&,N,V_volume
T@"NSNumber",&,N,V_volumeCapabilities
T@"NSMutableDictionary",&,N,V_outputDeviceVolume
T@"NSMutableDictionary",&,N,V_outputDeviceVolumeCapabilities
T@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications",&,N,V_outputDeviceModifications
T@"NSMutableDictionary",&,N,V_discoverySessionConfigurationsResults
initWithString:
indexOfObject:
replaceObjectAtIndex:withObject:
removeObjectAtIndex:
setAddedOutputDevices:
setChangedOutputDevices:
setRemovedOutputDevices:
_addedOutputDevices
_changedOutputDevices
_removedOutputDevices
T@"NSMutableArray",&,N,V_addedOutputDevices
T@"NSMutableArray",&,N,V_changedOutputDevices
T@"NSMutableArray",&,N,V_removedOutputDevices
mr_sharedIDSService
initWithService:
addDelegate:queue:
devices
_addMessageHandlerForDevice:handler:
_addMessageHandler:
uniqueIDOverride
_sendMessage:device:type:destination:session:options:priority:replyID:response:
_generateMessageID
numberWithUnsignedInteger:
initWithDictionary:
setWithObject:
sendMessage:toDestinations:priority:options:identifier:error:
deviceForFromID:
initWithID:data:device:service:
enumerateObjectsUsingBlock:
sharedService
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
addMessageHandlerForDevice:handler:
addMessageHandler:
removeHandler:
sendMessage:device:type:destination:session:options:priority:response:
idsService
setQueue:
responseHandlers
setResponseHandlers:
deviceMessageHandlers
setDeviceMessageHandlers:
totalMessageHandlers
setTotalMessageHandlers:
totalOutgoingMessageCount
_idsService
_responseHandlers
_deviceMessageHandlers
_totalMessageHandlers
_totalOutgoingMessageCount
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSMutableDictionary",&,N,V_responseHandlers
T@"NSMutableDictionary",&,N,V_deviceMessageHandlers
T@"NSMutableDictionary",&,N,V_totalMessageHandlers
TQ,R,N,V_totalOutgoingMessageCount
T@"IDSService",R,N,V_idsService
replyWithData:priority:
device
messageID
service
setService:
_device
_data
_messageID
_service
T@"NSNumber",R,C,N,V_messageID
T@"MRDIDSService",&,N,V_service
T@"IDSDevice",R,N,V_device
T@"NSData",R,C,N,V_data
dictionaryRepresentation
allObjects
initWithPID:audioSessionID:mxSessionIDs:
_pid
_audioSessionID
_mxSessionIDs
Ti,R,N,V_pid
T@"NSNumber",R,N,V_audioSessionID
T@"NSSet",R,N,V_mxSessionIDs
initWithBundleID:audioSessionID:isPlaying:
_playing
playing
TB,R,N,GisPlaying,V_playing
weakObjectsHashTable
sharedDataSource
addObserver:
observersForSelector:
nowPlayingApplications
nowPlayingSessions
nowPlayingAudioFormatContentInfos
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
_weakObservers
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_nowPlayingApplicationPID
_nowPlayingAudioFormatContentInfos
_nowPlayingApplicationDisplayID
T@"NSDictionary",R,N,V_nowPlayingAudioFormatContentInfos
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
Ti,R,N,V_nowPlayingApplicationPID
TB,R,N,V_nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsInterrupted
localClient
registerSourceOriginNotifications
registerDestinationOriginCallbacksToRelayToSourceOrigin
initializeDestinationOriginWithSourceOriginData
registerOriginForwarder:
unregisterOriginForwarder:
sourceOrigin
destinationOrigin
_handleVolumeCapabilitiesDidChangeNotification:
_handleApplicationDidRegisterNotification:
_handleApplicationDidUnregisterNotification:
_handleApplicationClientStateDidChangeNotification:
_handleActiveApplicationDidChangeNotification:
_handlePlayerDidRegisterNotification:
_handlePlayerDidUnregisterNotification:
_handlePlayerDidRegisterCanBeNowPlayingNotification:
_handlePlayerDidUnregisterCanBeNowPlayingNotification:
_handlePlayerStateDidChangeNotification:
_handleActivePlayerDidChangeNotification:
_handlePlaybackStateDidChangeNotification:
_handleSupportedCommandsDidChangeNotification:
_handlePlayerPlaybackQueueCapabilitiesDidChangeNotification:
_handlePlayerPlaybackQueueDidChangeNotification:
_handlePlayerPlaybackQueueContentItemsDidChangeNotification:
_handlePlayerPlaybackQueueContentItemArtworkDidChangeNotification:
createDelocalizedPlayerPath:
verboseOriginForwarderLogging
setPlaybackSessionMigrateRequestCallback:
nowPlayingClients
destinationClient
playerClients
createLocalizePlayerPath:
hasAuxiliaryProperties
defaultSupportedCommandsForClient:
activePlayerPath
volumeControlCapabilities
defaultPlaybackQueueRequest
setArtworkHeight:
setArtworkWidth:
localizedPlayerIDFromPlayerPath:
initWithOrigin:destinationOrigin:
_sourceOrigin
_destinationOrigin
_destinationClient
T@"MRClient",R,N,V_destinationClient
T@"MROrigin",R,N,V_sourceOrigin
T@"MROrigin",R,N,V_destinationOrigin
initWithDeviceFeatures:
_activeSystemContext
outputDevice
canSetVolume
availableOutputDevices
initWithAVOutputDevice:
uniqueIdentifier
avOutputDevice
setOutputDevice:options:
isSpeakerRoute
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
setUseWeakMatching:
beginSearchWithTimeout:completion:
sharedSystemScreenContext
sharedAudioPresentationOutputContext
setOutputDevices:
currentRouteSupportsVolumeControl
_discoverySession
_activeReconnaissanceSessions
iTunesAudioContext
auxiliaryOutputContext
sharedCompanionLinkClient
_onWorkerQueue_connectRemoteControlChannelForSource:destination:destinationGroupUID:session:name:
registerRequest:callback:
sourceUID
destinationOutputDeviceUID
destinationGroupUID
sessionUID
_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:
registerEvent:callback:
_resetPersistedConnections
_connectionForSource:destination:session:
setSourceUID:
setDestinationOutputDeviceUID:
setDestinationGroupUID:
setSessionUID:
setConnectionAttemptDate:
initWithDeviceUID:sessionUID:targetDevice:error:
setLabel:
setConnection:
sendEvent:destination:userInfo:
addObserverForName:object:queue:usingBlock:
setNotificationToken:
rapportRemoteControlService:didAcceptConnection:
_persistConnectionRecordsToDisk
closeWithError:
userDefaults
_writeConnectionRecordsToDisk:
_readConnectionRecordsFromDisk
synchronize
T@"NSUserDefaults",R,N
_onWorkerQueue_disconnectAllRemoteControlChannels
_onWorkerQueue_disconnectRemoteControlChannelForSource:destination:session:
connections
setConnections:
_workerQueue
_client
_connections
T@"MRCompanionLinkClient",&,N,V_client
T@"NSMutableArray",&,N,V_connections
T@"<MRDRapportRemoteControlServiceDelegate>",W,N,V_delegate
encodeObject:forKey:
decodeObjectOfClass:forKey:
notificationToken
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
connectionAttemptDate
_destinationOutputDeviceUID
_destinationGroupUID
_sourceUID
_sessionUID
_connectionAttemptDate
_notificationToken
T@"NSString",&,N,V_destinationOutputDeviceUID
T@"NSString",&,N,V_destinationGroupUID
T@"NSString",&,N,V_sourceUID
T@"NSString",&,N,V_sessionUID
T@"MRRapportTransportConnection",&,N,V_connection
T@"NSDate",&,N,V_connectionAttemptDate
T@"<NSObject>",&,N,V_notificationToken
initWithOutputDeviceUID:
initWithDestination:
setRequestPlaybackState:
setRequestPlaybackQueue:
setRequestClientProperties:
setRequestSupportedCommands:
setRequestLastPlayingDate:
displayMonitor
lockScreenVisible
controlCenterVisible
displayOn
nearbyDevices
setHasTriggered:
setShouldRun:
shouldRun
_onQueue_reevaluateRemoteControlState
controller:didLoadResponse:
controller:playbackStateDidChangeFrom:to:
controller:playbackQueueDidChangeFrom:to:
controller:contentItemsDidUpdate:
controller:contentItemsDidUpdateWithContentItemChanges:
controller:didLoadArtworkForContentItems:
controller:supportedCommandsDidChangeFrom:to:
controller:deviceLastPlayingDateDidChange:
controller:playerLastPlayingDateDidChange:
controller:clientPropertiesDidChangeFrom:to:
controller:playerPathDidChange:
controller:didUpdateResponse:
controllerWillReloadForInvalidation:
controller:didFailWithError:
startObservationIfNeeded
_configureObserver
_configurationForUID:
_handleLayoutDidChangeNotification:
dataSource
setDataSource:
setNearbyDevices:
hasTriggered
invalidated
setInvalidated:
setDisplayMonitor:
_hasTriggered
_shouldRun
_invalidated
_dataSource
_nearbyDevices
_displayMonitor
T@"NSMutableSet",&,N,V_nearbyDevices
TB,N,V_hasTriggered
TB,N,V_shouldRun
TB,N,V_invalidated
T@"MRDDisplayMonitor",&,N,V_displayMonitor
T@"<MRDProximityControllerDataSource>",W,N,V_dataSource
_init
_handleMediaServerDeath
reloadOutputContexts
sharedAudioPresentationContext
activeOutputContexts
mr_map:
componentsJoinedByString:
inactiveOutputContexts
reservedOutputContexts
arrayByAddingObjectsFromArray:
registerCommunicationChannelForOutputContext:
outputContextForOutputDeviceUID:
outputContextForOutputDeviceUIDs:strict:
setWithArray:
sharedController
clusterUID
anyObject
containsUID:
mr_all:
outputDeviceUIDs
addSharedAudioOutputContext
initWithAVOutputContext:type:
registerOutputContext:
_notifyLocalDeviceDidChangeOutputContext
registerForOutputContextNotifications:
outputDevicesDidChangeNotification:
_handleOutputContextDidAddLocalDevice:
_handleOutputContextDidRemoveLocalDevice:
externalDeviceServer
remoteControlService
airPlayService
avOutputContext
startContext:
processOutputContext:
postClientNotificationNamed:
postNotificationName:object:
allSharedAudioOutputContexts
clusterComposition
addObjectsFromArray:
outputContexts
populatedOutputContexts
registerCommunicationsChannels
outputContextForOutputDevice:
outputContextForOutputDevices:strict:
setActiveOutputContexts:
setReservedOutputContexts:
setInactiveOutputContexts:
serialQueue
setSerialQueue:
_activeOutputContexts
_reservedOutputContexts
_inactiveOutputContexts
T@"NSMutableDictionary",&,N,V_activeOutputContexts
T@"NSMutableDictionary",&,N,V_reservedOutputContexts
T@"NSMutableDictionary",&,N,V_inactiveOutputContexts
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
closeAll
closeForClient:userCancelled:
pinPairingToken
pinPairingDialogDidClose:forClient:userCancelled:
setPinPairingToken:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
configurationWithEndpointFeatures:
initWithConfiguration:
removeDelegate:
_onWorkerQueue_scheduleReload
mr_outputDevice
msv_map:
notifyOutputDevicesChanged:
_onWorkerQueue_reload
setIdsService:
workerQueue
setWorkerQueue:
reloadScheduled
setReloadScheduled:
_reloadScheduled
T@"IDSService",&,N,V_idsService
T@"NSObject<OS_dispatch_queue>",&,N,V_workerQueue
TB,N,V_reloadScheduled
_routingDataSourcePickableRoutesDidChange:
cancelSearch
setCallback:
_timeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setTimeoutTimer:
callback
_endSearch
matchesUniqueIdentifier:
_concludeSearchWithRoute:
timeoutTimer
initWithRouteUID:
_searchInProgress
_timeoutInterval
_routeUID
_callback
_timeoutTimer
T@?,C,N,V_callback
T@"NSTimer",&,N,V_timeoutTimer
T@"NSString",R,N,V_routeUID
outputContextDidRemoveLocalDeviceNotification:
outputContextModificationDidBeginNotification:
outputContextModificationDidFinishNotification:
registerObserver:
onQueue_commitLocalDeviceIfNeededWithReason:completion:
activeNowPlayingBundleIdentifiers
completionQueue
unsignedIntegerValue
activeTopologyChangeIdentifiers
needsCommandRedirection
enqueuedCompletions
setEnqueuedCompletions:
addOutputDevices:initiator:withCallbackQueue:block:
searchForOutputDeviceUID:timeout:reason:queue:completion:
clusterController:clusterStatusDidChange:
clusterController:clusterTypeDidChange:
nowPlayingSessionDidStartForBundleIdentifier:completion:
nowPlayingSessionDidStopForBundleIdentifier:completion:
setActiveNowPlayingBundleIdentifiers:
setActiveTopologyChangeIdentifiers:
setCompletionQueue:
_activeNowPlayingBundleIdentifiers
_activeTopologyChangeIdentifiers
_completionQueue
_enqueuedCompletions
T@"NSMutableSet",&,N,V_activeNowPlayingBundleIdentifiers
T@"NSMutableSet",&,N,V_activeTopologyChangeIdentifiers
T@"NSObject<OS_dispatch_queue>",&,N,V_completionQueue
T@"NSMutableArray",&,N,V_enqueuedCompletions
_clientDidRegisterCanBeNowPlaying:
_clientDidUnregisterCanBeNowPlaying:
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
setQueuedInitiatePlaybackMessages:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
_handleSupportedAPIsDidChangeForClient:
dataWithPropertyList:format:options:error:
_messageRequiresMediaServerBlessing:
initWithType:pid:bundleID:name:
_messageCanLaunchApp:
_takeProcessAssertionForClient:withReason:
indexPathData
_scheduleEndProcessAssertionForClient:
initWithBytes:length:
localizedDescription
postClientNotificationNamed:userInfo:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
initWithBundleID:indexPathData:
setAlwaysAllowUpdates:
setRoutingContextUID:
setPopulatesExternalDevice:
shouldConnectToLocalEndpoint
_loadLocalEndpointConnection
supportIDSDiscovery
_scheduleAvailableOutputDevicesReload
addOutputDevicesChangedCallback:
mr_formattedDebugDescription
localEndpointConnection
setLocalEndpointConnection:
_reloadOutputDevices
deviceInfoDataSource
_fetchAvailableOutputDevicesFromDiscoverySessions
setUnclusteredOutputDevices:
setUnclusteredLocalOutputDevice:
_clusterOutputDevicesFromUnclusteredDevices:
setAvailableOutputDevices:
_shouldCreateClusterOutputDevices
initWithDevices:
shouldUseDeviceInfoForLocalDevice
initWithDeviceInfo:
_applyLocallySourcedValuesToOutputDevices:
_applyOutputContextValuesToOutputDevices:
_applyDeviceInfoValuesToOutputDevices:withDeviceInfo:
parentGroupContainsDiscoverableGroupLeader
_applyLocalReservedOutputContextValuesToOutputDevices:
_addUndiscoveredOutputContextOutputDevices:
isLocalDevice
descriptor
setIsRemoteControllable:
initWithDescriptor:
_logChangesInModifyingOutputDevice:toOutputDevice:reason:
isPrimaryLocalDevice
isAirPlayActive
setIsAirPlayReceiverSessionActive:
groupUID
setGroupID:
airPlayGroupUID
setAirPlayGroupID:
parentGroupID
setParentGroupIdentifier:
groupContainsDiscoverableGroupLeader
setGroupContainsGroupLeader:
setParentGroupContainsDiscoverableLeader:
isGroupLeader
setIsGroupLeader:
isProxyGroupPlayer
setIsProxyGroupPlayer:
setClusterID:
groupID
airPlayGroupID
verboseRemoteControlDiscoveryLogging
_createConnectionWith:groupID:connectionType:shouldUseSystemAuthenticationPrompt:userInfo:
forceDeviceInfoDiscovery
homepodDemoMode
useClusterDevices
transportDidClose:error:
transport:didReceiveData:
endpointFeatures
devicePresenceDetected
unclusteredOutputDevices
unclusteredLocalOutputDevice
routingContextUID
setDeviceInfo:
avDiscoverySession
setAvDiscoverySession:
idsDiscoverySession
setIdsDiscoverySession:
_scheduledAvailableOutputDevicesReload
_availableOutputDevices
_unclusteredOutputDevices
_unclusteredLocalOutputDevice
_routingContextID
_deviceInfo
_avDiscoverySession
_idsDiscoverySession
_localEndpointConnection
T@"MRAVConcreteRoutingDiscoverySession",&,N,V_avDiscoverySession
T@"MRDIDSDiscoverySession",&,N,V_idsDiscoverySession
T@"MRAirPlayTransportConnection",&,N,V_localEndpointConnection
T@"MRAVOutputDevice",&,N
T@"MRDeviceInfo",&,N
_invalidate
clientInterface
setRemoteObjectInterface:
serviceInterface
setExportedInterface:
exportedInterface
protocol
weakProxyWithObject:protocol:
setExportedObject:
setInterruptionHandler:
setInvalidationHandler:
resume
_notifyAvailableEndpointsDidChange:
_notifyAvailableOutputDevicesDidChange:
setEnableThrottling:
availableDistantOutputDevices
_resumeConnection
hostedDiscoverySessionDidInvalidate:
availableOutputDevicesDidChange:
verboseHostedDiscoverySessionLogging
availableEndpointsDidChange:
getDevicePresenceDetectedWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:enableThrottling:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
hostedRoutingController:endpointsDidChange:
hostedRoutingController:outputDevicesDidChange:forFeature:
initWithConnection:hostedRoutingController:
hostedRoutingController
transaction
setTransaction:
enableThrottling
updatedEndpoints
setUpdatedEndpoints:
updatedOutputDevices
setUpdatedOutputDevices:
pendingEndpoints
setPendingEndpoints:
pendingOutputDevices
setPendingOutputDevices:
endpointsDelayed
setEndpointsDelayed:
devicesDelayed
setDevicesDelayed:
lastDiscoveryModeEnableDate
setLastDiscoveryModeEnableDate:
lastDiscoveryModeDisableDate
setLastDiscoveryModeDisableDate:
_enableThrottling
_endpointsDelayed
_devicesDelayed
_hostedRoutingController
_transaction
_updatedEndpoints
_updatedOutputDevices
_pendingEndpoints
_pendingOutputDevices
_lastDiscoveryModeEnableDate
_lastDiscoveryModeDisableDate
T@"MROSTransaction",&,N,V_transaction
TB,N,V_enableThrottling
T@"NSArray",&,N,V_updatedEndpoints
T@"NSArray",&,N,V_updatedOutputDevices
T@"NSArray",&,N,V_pendingEndpoints
T@"NSArray",&,N,V_pendingOutputDevices
TB,N,V_endpointsDelayed
TB,N,V_devicesDelayed
T@"NSString",&,N,V_bundleIdentifier
T@"NSDate",&,N,V_lastDiscoveryModeEnableDate
T@"NSDate",&,N,V_lastDiscoveryModeDisableDate
T@"MRDHostedRoutingController",R,N,V_hostedRoutingController
T@"<MRDAVHostedDiscoverySessionDelegate>",W,N,V_delegate
initWithQueue:
unregisterAllVirtualVoiceInputDevices
registeredToNowPlayingUpdates
registeredToOutputDeviceUpdates
registeredToVolumeUpdates
registeredKeyboardUpdates
registeredToSystemEndpointUpdates
supportedMessages
lastSupportedMessageType
destinationEndpoint
debugName
numberWithUnsignedLongLong:
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
requestIdentifier
requestConnectedDestinationEndpoint:
localizeDestinationPlayerPath:completion:
options
connectToExternalDeviceWithOptions:userInfo:completion:
requestDestinationEndpoint:
setDestinationEndpoint:
discoverGroup:reason:queue:completion:
discoverOutputDevice:reason:queue:completion:
deviceInfoForOrigin:
WHAIdentifier
disconnectWithError:
label
isGizmo
supportedCommands
exportSupportedCommands:
exportPlaybackQueue:forPlayerPath:
_wantsLibraryCommands
command
range
defaultPlaybackQueueRequestWithRange:
setDeviceSpecificUserInfo:
playbackQueueRequests
existingSubscriptionControllerForPlayerPath:
subscribeToPlaybackQueue:forRequest:
filteredContentItemsBySubscriptionsForContentItems:
allKeys
shortValue
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
endpointDidConnect:
endpointDidDisconnect:
endpointDidDisconnect:withError:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
flushPendingPlaybackSessionMigrateEvents:
localizeDestinationOrigin:completion:
isDestinationLocal
exportNowPlayingState:forPlayerPath:
exportContentItems:forPlayerPath:
exportContentItemArtworkUpdates:forPlayerPath:
discoveryModeForConfiguration:
setDiscoveryMode:forConfiguration:
discoverySessionConfigurations
credentials
setCredentials:
sessionPeer
serverDelegate
setServerDelegate:
setOptions:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_pendingPlaybackSessionMigrateEvents
_destinationEndpoint
_discoveryModes
_options
_credentials
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
T@"MRAVEndpoint",&,N
T@"MRPasscodeCredentials",&,N,V_credentials
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
T@,&,N,V_pinPairingToken
T@"NSString",C,N,V_destinationOutputDeviceUID
T@"NSString",C,N,V_destinationGroupUID
destinationLocal
TB,R,N,GisDestinationLocal
T@"<MRDExternalDeviceServerClientConnectionDelegate>",W,N,V_serverDelegate
TI,N,V_options
anonymousListener
connectionType
externalDeviceForEndpoint:
setHostedRouteDiscoveryMode:
setHostedDiscoverySessions:
setEndpoints:
availableExternalDevices
setHostedExternalDevices:
setDiscoverySession:
listener:shouldAcceptNewConnection:
xpcEndpoint
endpointForOrigin:
endpointForDeviceUID:
_anonymousListener
_hostedDiscoverySessions
T@"NSXPCListenerEndpoint",R,N
_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:
supportsMultiplayer
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:
_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:
valueForKey:
transportType
initWithOutputDevice:groupID:connectionType:
initWithOutputDevice:proxyOutputDevice:
initWithOutputDevice:
setWithCapacity:
clusterStatus
filterOutputDevices:remoteControllableOnly:
array
hostedExternalDeviceForEndpointIdentifier:
discoverySession
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:
externalDeviceListenerEndpoint
setExternalDeviceListenerEndpoint:
_logEndpointsChanged:oldEndpoints:
disconnectUndiscoverableEndpoints:
_onQueue_reloadWithOutputDevices:
_onQueue_reloadEndpoints
isEqualToArray:
changeDescriptionTo:keyBlock:isUpdatedBlock:descriptionBlock:
makeEndpointWithOutputDevices:options:
_onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
timeIntervalSince1970
expirationDate
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
_dbHandle
_tokenRecords
_path
T@"NSString",R,N,V_path
_handleDiscoveryMessage:fromDevice:
_handleConnectRemoteControlMessage:fromDevice:destination:session:
handleSetConnectionStateMessage:forClient:
handleSetDiscoveryModeMessage:forClient:
mode
configuration
setConfiguration:
setPriority:
setWaking:
sharedLocalEndpoint
_onWorkerQueue_sendEndpoint:toClient:options:
mr_deviceInfo
initWithDevice:
_createDiscoveryChannelForIDSConnection:deviceInfo:
transport
ingestData:
propertyListWithData:options:format:error:
_createRemoteControlChannelForIDSConnection:deviceInfo:destination:session:options:
addChannel:forDestination:session:
idsRemoteControlService:didAcceptConnection:
initWithRoute:inputType:
protobufData
protocolMessageWithProtobufData:error:
response
sendMessage:type:destination:session:options:priority:response:
_intializeClient:forRemoteControlChannel:authCallback:completion:
initWithConnection:type:destination:session:
initWithAllSupportedMessages
setSupportedMessages:
setTransport:
removeChannelForDestination:
setDestination:
setSession:
channelForDestination:session:
sendMessage:type:destination:session:options:priority:
groupLeader
exportOutputDevice:endpoint:
destination
outputDeviceWithUID:
primaryID
exportEndpoint:
initWithOutputDevices:configuration:
setTransportOptions:
clientConnection:didReceiveMessage:
clientDidDisconnect:error:
_addAuthorizationCallbackForOutputDevice:destination:session:
_removeAuthorizationCallbackForOutputDevice:
serviceToken
setServiceToken:
discoveryChannels
setDiscoveryChannels:
remoteControlChannels
setRemoteControlChannels:
_serviceToken
_discoveryChannels
_remoteControlChannels
T@,&,N,V_serviceToken
T@"NSMutableDictionary",&,N,V_discoveryChannels
T@"NSMutableDictionary",&,N,V_remoteControlChannels
T@"<MRDIDSRemoteControlServiceDelegate>",W,N,V_delegate
_transport
T@"MRDIDSTransportConnection",&,N,V_transport
T@"MRDIDSServerClientConnection",&,N,V_client
session
_destination
_session
T@"NSString",&,N,V_destination
T@"NSString",&,N,V_session
T@"MRExternalDeviceTransportConnection",&,N,V_transport
_channels
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
T@"NSDictionary",R,N,V_route
TB,R,N,V_canBeDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
_handlePersonalDeviceChangeNotification:
_onQueue_restoreState
_onQueue_recalculateStateForReason:
personalDeviceUIDs
personalDeviceState
personalDeviceLockScreenTimeout
isEqualToSet:
setPersonalDeviceWasRecentlyAttached:
setCurrentPersonalDeviceUIDs:
_onQueue_beginTimerWithInterval:
currentPersonalDeviceUIDs
setPersonalDeviceState:
overrideTimer
personalDeviceControllerStateDidChange:
delegateQueue
setOverrideTimer:
personalDeviceWasRecentlyAttached
setDelegateQueue:
_personalDeviceWasRecentlyAttached
_delegateQueue
_currentPersonalDeviceUIDs
_overrideTimer
T@"NSObject<OS_dispatch_queue>",&,N,V_delegateQueue
T@"NSSet",&,N,V_currentPersonalDeviceUIDs
T@"MSVPersistentTimer",&,N,V_overrideTimer
TB,N,V_personalDeviceWasRecentlyAttached
T@"<MRDPersonalDeviceControllerDelegate>",W,N,V_delegate
decodeEntries
_registerNotifications
_registerCompanionLinkHandlers
lastObject
_handleSetNearbyDevicesToRemoteControlMessage:fromClient:
sharedIDSCompanionLinkClient
initWithDictionaryRepresentation:
_addEntry:
perform:completion:
_handleLocalPlaybackBeganNotification:
_maybeMostRecentlyPlayedDeviceChanged:
notifyDevicesInHomeThatPlaybackStarted
_shouldSendCompanionLinkMessage
sendEventToHome:userInfo:
sendPlaybackSessionUpdateToCompanionCoalesceInterval
_maybeSendPlaybackStateMessageToCompanion
sendEvent:toDevicesOfHomeUser:userInfo:
supportLastPlayingDevice
setCurrentPlaybackSessionTypes:
setSupportedPlaybackSessionTypes:
setCurrentPlaybackSessionIdentifier:
setIsPlaying:
setLastPlayingDate:
setLastNotPlayingDate:
setContentItem:
addEntriesFromDictionary:
sendLastPlayingDeviceToHome
sendEventToCompanion:userInfo:
encodeEntries
lastPlayingDeviceThresholdInterval
sortUsingComparator:
mostRecentDeviceUID
lastSentEntry
setLastSentEntry:
entries
setEntries:
setUserDefaults:
sendingPlaybackStateToCompanion
setSendingPlaybackStateToCompanion:
_sendingPlaybackStateToCompanion
_lastSentEntry
_entries
T@"MRDExternalDeviceHomeServerRecentlyPlayedEntry",&,N,V_lastSentEntry
T@"NSMutableArray",&,N,V_entries
T@"NSUserDefaults",&,N,V_userDefaults
TB,N,V_sendingPlaybackStateToCompanion
isEqualToDate:
contentItem
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
setIncludeMetadata:
lastNotPlayingDate
setDictionaryRepresentation:
_isPlaying
_lastNotPlayingDate
_currentPlaybackSessionTypes
_supportedPlaybackSessionTypes
_currentPlaybackSessionIdentifier
_contentItem
_dictionaryRepresentation
TB,N,V_isPlaying
T@"NSDate",&,N,V_lastPlayingDate
T@"NSDate",&,N,V_lastNotPlayingDate
T@"MRDeviceInfo",&,N,V_deviceInfo
T@"NSArray",&,N,V_currentPlaybackSessionTypes
T@"NSArray",&,N,V_supportedPlaybackSessionTypes
T@"NSString",&,N,V_currentPlaybackSessionIdentifier
T@"MRPlayerPath",&,N,V_playerPath
T@"MRContentItem",&,N,V_contentItem
T@"NSDictionary",&,N,V_dictionaryRepresentation
setDeviceUID:
initWithDeviceUID:
resetWithError:
_generateSessionUID
sharedServiceClient
setMessageHandler:forType:destination:session:
setConnectionHandler:
isConnected
_createConnectionWithUserInfo:
_synchronized_setSessionUID:
removeMessageHandlerForType:destination:session:
hostname
port
createConnectionWithUserInfo:
supportsIdleDisconnection
shouldUseSystemAuthenticationPrompt
setShouldUseSystemAuthenticationPrompt:
idsConnection
setIdsConnection:
_shouldUseSystemAuthenticationPrompt
_error
_outputDevice
_idsConnection
T@"MRDIDSServiceConnection",&,N,V_idsConnection
T@"MRAVOutputDevice",R,N,V_outputDevice
initWithCString:encoding:
allowList
_query:
transactionWaitDurationOnOutOfMemory
_transactionEnded
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
_calculateMemory
outOfMemoryWaitDuration
_processMessage:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
send:toConnection:completion:
cancel
_bytesInUse
_taskAssertion
T@"<MRTransactionDelegate>",W,N,V_delegate
TQ,R,N,V_name
T@"MRPlayerPath",R,N,V_playerPath
initializeServer
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
setTransactions:
setUsedTransactionMemory:
setAllowedTransactionMemory:
setTransactionWaitDuration:
adjustMemory:
handleContentItemTransaction:packets:group:
handlePlaybackQueueRequestTransaction:packets:group:
subscriptionControllerForPlayerPath:
hasRequest:
initFromTransactionName:
null
requestForSubscribedContentItemIdentifier:
match:
sendContentItemTransaction:request:playerPath:
_sendContentItemTransaction:request:playerPath:
archivedDataWithRootObject:requiringSecureCoding:error:
setIdentifier:
setUserData:
initWithData:forKey:
sendContentItemTransactionWithPlaybackQueue:request:playerPath:
transactions
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
T@"NSMutableArray",R,N,V_transactions
userData
priority
_idsPriorityFromPriority:
isWaking
_notifyDelegateDidReceiveData:
_notifyDelegateDidCloseWithError:
isLocalEndpoint
designatedGroupLeader
_exportDescriptorForOutputDevice:endpoint:remoteControl:
mr_compactMap:
setDesignatedGroupLeader:
deviceClass
setHostDeviceClass:
setPrimaryUID:
setIsLocalDevice:
sourceInfo
multipleBuiltInDevices
setUniqueIdentifier:
setRunLoop:
runLoop
sendTransportData:options:
T@"MRDIDSServiceConnection",R,N,V_connection
T@"NSString",R,N,V_type
T@"NSString",R,N,V_destination
T@"NSString",R,N,V_session
clusterType
isClusterLeader
initWithPrimaryOutputDevice:members:
sortDescriptorWithKey:ascending:
groupContextID
isAirPlayReceiverSessionActive
sortedArrayUsingDescriptors:
mr_filter:
modelID
initWithDeviceType:deviceSubtype:uid:name:modelID:
generateDescriptor
memberOutputDevices
_memberOutputDevices
T@"NSArray",R,N,V_memberOutputDevices
T@"<MRDPinPairingDialogDelegate>",W,N,V_delegate
forwarderWithTarget:
serviceConnection
attributeWithDomain:name:
remoteTargetWithLaunchingAssertionAttributes:
endpointForMachName:service:instance:
connectionWithEndpoint:
userInitiated
setServiceQuality:
setInterface:
forwarder
setInterfaceTarget:
setActivationHandler:
configureConnection:
interfaceWithIdentifier:
protocolForProtocol:
setServer:
setClientMessagingExpectation:
T@"BSServiceInterface",R,N
initWithClientObject:invalidationHandler:
lock
invalidationHandler
_lock
_serviceConnection
_forwarder
_invalidationHandler
T@"BSServiceConnection<BSServiceConnectionClient>",R,N,V_serviceConnection
T@"MRDUIClientMessageForwarder",R,N,V_forwarder
T{os_unfair_lock_s=I},R,N,V_lock
T@?,R,N,V_invalidationHandler
T@"<MRUIServerProtocol>",R,N
initWithEndpointFeatures:
_onWorkerQueue_connectRemoteControlChannelForDestination:session:options:completion:
setMessageHandler:forType:
_handleCompanionDeviceConnectedNotification:
_handleCompanionDeviceDisconnectedNotification:
_handleDeviceInfoDidChangeNotification:
_handleOutputDevicesDidChangeNotification:
_onWorkerQueue_initializeDiscoveryChannel
_onWorkerQueue_connectDiscoveryChannelWithReason:
_onWorkerQueue_disconnectDiscoveryChannel
_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:
discoveryChannel
_sendEndpoint:toClient:options:
resetConnection
_onWorkerQueue_disconnectRemoteControlChannelsForDestination:error:
idsCompanionRemoteControlService:didAcceptConnection:
stream:handleEvent:
isDiscoveryChannelConnected
_discoveryChannel
_discoveryChannelConnectionTimer
_remoteControlConnections
_sendEndpointScheduled
_lastSentEndpoint
_lastSentEndpointDate
_configuration
_isDiscoveryChannelConnected
_runLoop
T@"MRDIDSServerClientConnection",R,N
TB,R,N,V_isDiscoveryChannelConnected
T@"NSRunLoop",R,N,V_runLoop
T@"<MRDIDSCompanionRemoteControlServiceDelegate>",W,N,V_delegate
T@"MRExternalDeviceTransportConnection",&,N,V_connection
_localDeviceInfoDidChangeNotification:
_transportDeviceInfoDidChangeNotification:
_contentItemUpdatedNotification:
_activeSystemEndpointDidChangeNotification:
_handleDeviceInfoChange:oldDevice:
_cleanUpWithReason:error:
sendClientUpdatesConfigMessage
dataWithBytes:length:
clientConnection
initWithKey:data:
unregisterOrigin:
_onSerialQueue_registerOriginCallbacks
setLinkAgent:
isCompanion
_updateNowPlayingInfo
initWithNowPlayingInfo:
setNowPlayingItem:
setNowPlayingInfo:policy:request:
setNowPlayingInfo:
setNowPlayingArtwork:
_callClientConnectionStateCallback:previousConnectionState:error:
setPairingCallback:
setPairingCallbackQueue:
setConnectionStateCallback:
setConnectionStateCallbackQueue:
setNameCallback:
setNameCallbackQueue:
setPairingAllowedCallback:
setPairingAllowedCallbackQueue:
setCustomDataCallback:
setCustomDataCallbackQueue:
setOutputDevicesUpdatedCallback:
setOutputDevicesUpdatedCallbackQueue:
setOutputDevicesRemovedCallback:
setOutputDevicesRemovedCallbackQueue:
setVolumeCallback:
setVolumeCallbackQueue:
setVolumeControlCapabilitiesCallback:
setVolumeControlCapabilitiesCallbackQueue:
errorForCurrentState
initWithButtonEvent:
dictionaryWithCapacity:
_cleanUpStreamsWithReason:error:
_onWorkerQueue_initializeConnectionWithOptions:userInfo:
_onWorkerQueue_loadDeviceInfoWithUserInfo:
_onWorkerQueue_registerCustomOriginWithUserInfo:
_onWorkerQueue_reRegisterCustomOriginWithUserInfo:
_onWorkerQueue_syncClientStateWithUserInfo:
disconnect:
sharedLogger
logEvent:withInfo:
setConnectionState:error:
_onWorkerQueue_connectWithOptions:isRetry:clientBundleIdentifier:userInfo:
connectWithOptions:clientBundleIdentifier:userInfo:
_onSerialQueue_prepareToConnectWithOptions:clientBundleIdentifier:userInfo:
cryptoSession
close
_onWorkerQueue_disconnect:
_onSerialQueue_prepareToDisconnect:
initWithMRError:userInfo:
ping:callback:withQueue:
initWithConnectionState:
initWithDeallocHandler:
sendMessage:queue:reply:
requiresCustomPairing
wantsNowPlayingNotifications
wantsNowPlayingArtworkNotifications
wantsVolumeNotifications
wantsOutputDeviceNotifications
wantsSystemEndpointNotifications
initWithNowPlayingUpdates:artworkUpdates:volumeUpdates:keyboardUpdates:outputDeviceUpdates:systemEndpointUpdates:subscribedPlayerPaths:
sendClientUpdatesConfigMessageWithCompletion:
currentClientUpdatesConfigMessage
initWithVolume:outputDeviceUID:
sendMessage:expectedMessage:timeout:queue:reply:
isSupported:
initWithListeningMode:outputDeviceUID:
initWithAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:clusterAwareAddingOutputDeviceUIDs:clusterAwareRemovingOutputDeviceUIDs:clusterAwareSettingOutputDeviceUIDs:
initWithOutputDeviceUIDs:
_handleSetStateMessage:
_handleNotificationMessage:
_handleSetArtworkMessage:
_handleDeviceInfoUpdateMessage:
_handleSetConnectionStateMessage:
_handleGenericMessage:
_handleSetNowPlayingClientMessage:
_handleSetNowPlayingPlayerMessage:
_handleRemoveClientMessage:
_handleRemovePlayerMessage:
_handleUpdateClientMessage:
_handleUpdateContentItemsMessage:
_handleUpdatePlayerMessage:
_handlePromptForRouteAuthorizationMessage:
_handlePresentRouteAuthorizationStatusMessage:
_handleVolumeDidChangeMessage:
_handleVolumeControlCapabilitiesDidChangeMessage:
_handleLegacyVolumeControlCapabilitiesDidChangeMessage:
_handleOutputDevicesUpdatedMessage:
_handleOutputDevicesRemovedMessage:
_handleSetDefaultSupportedCommandsMessage:
_handleUpdateActiveSystemEndpoint:
_handleSetPlayerClientPropertiesMessage:
_handleSetOriginClientPropertiesMessage:
_handleDiscoveryUpdateOutputDevicesMessage:
replyIdentifier
initWithMode:configuration:
notifyDiscoveryOutputDevicesChanged:forConfiguration:
integerValue
localDeviceUID
initWithRequest:
_onWorkerQueue_createClientConnectionWithTransport:
setCryptoEnabled:
setClientConnection:
externalDeviceTimeoutDuration
supportedProtocolMessages
sendMessage:timeout:queue:reply:
initWithIdentifier:type:displayName:
registerOrigin:deviceInfo:
setCustomOrigin:
reregisterOrigin:deviceInfo:
_handleRemoteCommand:withOptions:playerPath:completion:
_handlePlaybackQueueRequest:forPlayer:completion:
initWithEvent:
_handlePlaybackSessionRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateRequest:request:forPlayerPath:completion:
_handlePlaybackSessionMigrateBeginRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateEndRequest:error:forPlayerPath:completion:
_sendClientMessage:completion:
setClientMessageCallback:
initWithRequest:forPlayerPath:
_handlePlaybackQueueResponse:completion:
veirfyConnectionStatusAndMaybeDisconnect:
state
hasLocation
_createPlaybackQueue:
playbackSession
initWithPlaybackSession:request:forPlayerPath:
initWithRequest:playerPath:
initWithRequest:error:playerPath:
setIsCallingClientCallback:
postNotificationName:object:userInfo:
standardCredentials
characterCount
initWithCommand:options:playerPath:
commandResult
supportsImplicitChangeShuffleAndRepeatModeInSetPlaybackQueueCommandOptions
supportsSharedQueue
_handleSetStateMessageModern:
hasPlaybackStateTimestamp
artworkData
_handleNotificationMessageModern:
_handleNotificationMessageLegacy:
notification
initWithRange:
_callOutputDevicesUpdatedCallbackWithOutputDevices:
_callOutputDevicesRemovedCallbackWithOutputDeviceUIDs:
_callVolumeCallback:outputDeviceUID:
_callVolumeControlCapabilitiesCallback:outputDeviceUID:
_callClientNameCallback
_callClientAllowsPairingCallback
updateDeviceInfo:origin:
_callClientCustomDataCallback:name:
replyWithMessage:
arrayWithCapacity:
nowPlayingItem
initWithContentItems:location:
setPairedDeviceSync:
setReason:
initWithTransport:
hostName
isPaired
isUsingSystemPairing
setUsingSystemPairing:
setWantsNowPlayingNotifications:
setWantsNowPlayingArtworkNotifications:
setWantsVolumeNotifications:
setWantsOutputDeviceNotifications:
wantsEndpointChangeNotifications
setWantsEndpointChangeNotifications:
setWantsSystemEndpointNotifications:
nowPlayingArtwork
nowPlayingInfo
setPairingCallback:withQueue:
setConnectionStateCallback:withQueue:
setNameCallback:withQueue:
setPairingAllowedCallback:withQueue:
setCustomDataCallback:withQueue:
setOutputDevicesUpdatedCallback:withQueue:
setOutputDevicesRemovedCallback:withQueue:
setVolumeChangedCallback:withQueue:
setVolumeControlCapabilitiesCallback:withQueue:
sendButtonEvent:
personalOutputDevices
connectWithOptions:userInfo:
unpair
sendCustomData:withName:
setOutputDeviceVolume:outputDeviceUID:queue:completion:
outputDeviceVolume:queue:completion:
outputDeviceVolumeControlCapabilities:queue:completion:
setListeningMode:outputDeviceUID:queue:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:
createHostedEndpointWithOutputDeviceUIDs:queue:completion:
removeFromParentGroup:queue:completion:
_handleLegacyPlaybackQueueRequestWithCompletion:
_callClientPairingCallback:
connectionRecoveryBehavior
setConnectionRecoveryBehavior:
isCallingClientCallback
pairingCallback
pairingCallbackQueue
connectionStateCallback
connectionStateCallbackQueue
nameCallback
nameCallbackQueue
pairingAllowedCallback
pairingAllowedCallbackQueue
customDataCallback
customDataCallbackQueue
outputDevicesUpdatedCallback
outputDevicesUpdatedCallbackQueue
outputDevicesRemovedCallback
outputDevicesRemovedCallbackQueue
volumeCallback
volumeCallbackQueue
volumeControlCapabilitiesCallback
volumeControlCapabilitiesCallbackQueue
outputContextCallbackQueue
setOutputContextCallbackQueue:
_notificationQueue
_wantsNowPlayingNotifications
_wantsNowPlayingArtworkNotifications
_wantsVolumeNotifications
_wantsOutputDeviceNotifications
_wantsSystemEndpointNotifications
_wantsEndpointChangeNotifications
_usingSystemPairing
_connectionStateTimestamp
_connectionOptions
_reconnectionAttemptCount
_forceReconnectOnConnectionFailure
_disconnecting
_isClientSyncActive
_originalConnectionStartDate
_connectionUID
_isCallingClientCallback
_clientConnection
_customOrigin
_nowPlayingInfo
_nowPlayingArtwork
_nowPlayingItem
_connectionRecoveryBehavior
_pairingCallback
_pairingCallbackQueue
_connectionStateCallback
_connectionStateCallbackQueue
_nameCallback
_nameCallbackQueue
_pairingAllowedCallback
_pairingAllowedCallbackQueue
_customDataCallback
_customDataCallbackQueue
_outputDevicesUpdatedCallback
_outputDevicesUpdatedCallbackQueue
_outputDevicesRemovedCallback
_outputDevicesRemovedCallbackQueue
_volumeCallback
_volumeCallbackQueue
_volumeControlCapabilitiesCallback
_volumeControlCapabilitiesCallbackQueue
_outputContextCallbackQueue
T@"MRExternalClientConnection",&,N,V_clientConnection
T@"MROrigin",&,N,V_customOrigin
T@"NSData",&,N,V_nowPlayingArtwork
T@"NSDictionary",&,N,V_nowPlayingInfo
T@"MRContentItem",&,N,V_nowPlayingItem
T@?,C,N,V_pairingCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_pairingCallbackQueue
T@?,C,N,V_connectionStateCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionStateCallbackQueue
T@?,C,N,V_nameCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_nameCallbackQueue
T@?,C,N,V_pairingAllowedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_pairingAllowedCallbackQueue
T@?,C,N,V_customDataCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_customDataCallbackQueue
T@?,C,N,V_outputDevicesUpdatedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesUpdatedCallbackQueue
T@?,C,N,V_outputDevicesRemovedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesRemovedCallbackQueue
T@?,C,N,V_volumeCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeCallbackQueue
T@?,C,N,V_volumeControlCapabilitiesCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeControlCapabilitiesCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_outputContextCallbackQueue
T@"MRExternalDeviceTransport",R,N,V_transport
TB,N,V_isCallingClientCallback
valueWithBytes:objCType:
objCType
getValue:
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
_resolveRequest:withCapabilities:
isLegacyNowPlayingInfoRequest
hasRequestedLegacyNowPlayingInfo
setHasRequestedLegacyNowPlayingInfo:
addRequest:
_cachingPolicyForRequest:
sendPlaybackQueueResponse:forRequest:withMessage:fromNowPlayingClient:toXpcClient:
relayArtworkRequest:forContentItems:withMessage:fromNowPlayingClient:andNotifyXPCClient:
removeRequest:
relayPlaybackQueueRequest:withMessage:toNowPlayingClient:backToXpcClient:completion:
initWithIdentifiers:
artworkWidth
artworkHeight
skeleton
postClientNotificationNamed:userInfo:predicate:
cachingPolicy
rangeContainsNowPlayingItem
location
setLocation:
setLength:
hasLength
handlePlaybackQueueRequest:fromClient:
_currentDeviceInfo
setDeviceName:
_deviceInfoDidChange
sharedConnection
_outputContextDidChange
canBeClusterMember
_otherDeviceInfoDidChange:
setIdentityCreatedHandler:
setIdentityDeletedHandler:
reloadDeviceInfoImmediatly
_deviceInfoDidChangeWithDeviceInfo:
deviceInfoDataSource:deviceInfoDidChange:
clusterLeaderUID
deviceName
setLocalizedModelName:
networkIdentifier
setManagedConfigurationDeviceIdentifier:
setBuildVersion:
currentProtocolVersion
setProtocolVersion:
effectiveBoolValueForSetting:
setPairingAllowed:
setDeviceClass:
setTightSyncUID:
setProxyGroupPlayer:
isSilentPrimary
setSenderDefaultGroupUID:
setGroupName:
setGroupLeader:
airplayActive
setAirPlayActive:
setClusterLeaderID:
setClusterType:
setClusterAware:
setRoutingContextID:
tightSyncUID
logicalDeviceID
setGroupLogicalDeviceCount:
setGroupedDevices:
clusteredDevices
setClusteredDevices:
setSupportsExtendedMotion:
useExternalDeviceSystemPairing
setSupportsSystemPairing:
infoDictionary
setBundleVersion:
_readDeviceInfo
setGroupUID:
setAirPlayGroupUID:
setSystemMediaApplication:
setSystemPodcastApplication:
setSystemBooksApplication:
setAirPlayReceivers:
setSupportsSharedQueue:
setSharedQueueVersion:
setSupportsACL:
setSupportsMultiplayer:
setGroupContainsDiscoverableGroupLeader:
setParentGroupContainsDiscoverableGroupLeader:
discoverySessionWithEndpointFeatures:
initWithOutputDeviceDescription:
stringByAppendingPathComponent:
dataWithContentsOfFile:
unarchivedObjectOfClass:fromData:error:
writeToFile:options:error:
_deviceInfoFilePath
_deviceInfoArchiveClasses
unarchivedObjectOfClasses:fromData:error:
_readLegacyDeviceInfoIdentifier
_writeDeviceInfo:toPath:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
pairingManager
setPairingManager:
_gestaltNotificationToken
_airplayPerfsNotifyToken
_airplayActiveNotifyToken
_airplayAdvertisingNotifyToken
_deviceInfoReloadScheduled
_pairingManager
_deviceUID
_deviceName
T@"CUPairingManager",&,N,V_pairingManager
T@"NSString",&,N,V_deviceUID
T@"NSString",&,N,V_deviceName
T@"MRDeviceInfo",R,N
T@"<MRDDeviceInfoDataSourceDelegate>",W,N,V_delegate
localPlaybackState
localLastPlayingDate
_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:
_registerCallbacks
defaultSupportedCommands
compare:options:
_playerPathForNowPlayingClient:
nowPlayingOriginClient:deviceInfoDidChange:previousDeviceInfo:
nowPlayingOriginClient:currentRouteVolumeDidChange:
nowPlayingOriginClient:currentRouteVolumeControlCapabilitiesDidChange:
nowPlayingOriginClient:currentRouteIsMutedDidChange:
existingNowPlayingClientForClient:
canBeNowPlayingForPlayerClient:
_onQueue_reevaluateStateWithReason:
nowPlayingOriginClient:applicationActivityDidEnd:
_onQueue_updateActivityStatus:
nowPlayingOriginClient:applicationActivityDidBegin:
creatorProcessID
nowPlayingClientForPlayerPath:
existingNowPlayingClientForPlayerPath:
_onQueue_addNowPlayingClient:
_onQueue_removeNowPlayingClient:
removePlayerClientForPlayer:
nowPlayingOriginClient:clientDidUnregister:
setOverrideClient:
setExplicitNowPlayingClient:
setInferredNowPlayingClient:
_onQueue_calculateComputedNowPlayingClient
setComputedNowPlayingClient:
setActivity:
updateDefaultSupportedCommandsData:forClient:
defaultSupportedCommandsDataForClient:
defaultSupportedCommandsData
isEligibleForSpatialization
_onQueue_reloadInferredStateFromDataSource:reason:
nowPlayingOriginClientDidChangeAudioFormatContentInfo:
_onQueue_calculateInferredNowPlayingClient
_onQueue_calculateInferredPlaybackStateForPlayer:
_shouldHandleNotification:
laterDate:
_onQueue_maybeSavePlaybackStateForNotification:
existingNowPlayingClientForPid:
computeNowPlayingApplication
nowPlayingClientForClient:
mostRecentPlayers
nowPlayingApplicationTimeout
supportNowPlayingPIP
intersectsSet:
inferredNowPlayingClient
_stateFromDataSource:
_onQueue_calculateActiveNowPlayingClient
nowPlayingOriginClient:activePlayerPathDidChange:withPlaybackState:
_onQueue_calculateActiveNowPlayingPlayerClients
nowPlayingOriginClient:activePlayerClientsDidChange:
status
setStatus:
nowPlayingOriginClient:applicationActivityStatusDidChange:
nowPlayingOriginClient:clientDidRegister:
playerClientForPlayer:
_handleNowPlayingAppMaybeDidChange:
nowPlayingOriginClientPlaybackDidTimeout:
setLocalPlaybackState:
setLocalLastPlayingDate:
_handlePlayerIsPlayingDidChange:
_handleOriginIsPlayingDidChange:
_handlePlayerPropertiesDidChange:
_handlePlayerPictureInPictureEnabledDidChange:
_handleActivePlayerDidChange:
_handleNowPlayingApplicationDidUnregisterCanBeNowPlaying:
_handlePlayerDidRegister:
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingAudioFormatContentInfosDidChange:
initWithOrigin:
deviceInfoData
setVolumeControlCapabilities:
setIsMuted:
isActivityActive
existingNowPlayingClientForDisplayID:
removeAllClients
removeNowPlayingClientForClient:
clearDefaultSupportedCommandsData
nowPlayingAudioFormatContentInfo
setNowPlayingDataSource:
setDeviceInfoDataSource:
setDeviceInfoData:
activity
overrideClient
explicitNowPlayingClient
activePlayerClients
computedNowPlayingClient
_nowPlayingClients
_volumeControlCapabilities
_explicitNowPlayingClient
_activeNowPlayingClient
_activeNowPlayingClientTransaction
_defaultSupportedCommandsData
_origin
_deviceInfoData
_activity
_overrideClient
_nowPlayingDataSource
_deviceInfoDataSource
_registrationDate
_activePlayerClients
_computedNowPlayingClient
_inferredNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_computedNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_inferredNowPlayingClient
T@"MROrigin",R,N,V_origin
T@"MRPlayerPath",R,N
Tf,N
T@"MRDeviceInfo",C,N
T@"NSData",&,N,V_deviceInfoData
T@"MRMutableApplicationActivity",&,N,V_activity
T@"MRDMediaRemoteClient",&,N,V_overrideClient
T@"MRDNowPlayingClient",&,N,V_explicitNowPlayingClient
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
T@"MRDDeviceInfoDataSource",&,N,V_deviceInfoDataSource
T@"NSDate",R,N,V_registrationDate
T@"MRDNowPlayingClient",R,N
T@"NSArray",R,N,V_activePlayerClients
T@"MRNowPlayingAudioFormatContentInfo",R,N
T@"<MRDNowPlayingOriginClientDelegate>",W,N,V_delegate
isEqualToDictionary:
extendedInfo
indexOfObjectPassingTest:
matchesUID:
isPicked
canBeDefaultSystemRoute
_routeDescription
stopReceivingUpdatesForSource:
_setReceiveUpdates:forSource:
_shouldNotifyChange:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
stateObserver:didReceiveApplicationClientStateDidChange:
stateObserver:didReceiveClientDidUnregister:
originClient
stateObserver:didReceiveVolumeControlCapabilitiesChange:playerPath:
stateObserver:didReceiveDefaultSupportedCommandsChange:playerPath:
_onQueue_stateForPlayerPath:
setContentItems:
setContentItemsArtwork:
setPlayerProperties:
stateObserver:didReceivePlayerDidUnregister:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_handleNowPlayingClientDidChange:
_addNowPlayingNotification:selector:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleContentItemsChanged:
_handleContentItemArtworkChanged:
_handleApplicationClientStateChanged:
_handlePlayerStateChanged:
_handleRemoveClient:
_handleRemovePlayer:
_handleDefaultSupportedCommandsChanged:
_removeNowPlayingNotifications
_handleVolumeAvailabilityDidChangeNotification:
removeObserver:name:object:
nowPlayingObserverCoalesceInterval
verboseNowPlayingStateObserver
_onQueue_notifyCoalescedPlayerPath:
stateObserver:didReceiveCoalescedNowPlayingStateChange:playerPath:
beginReceivingUpdatesForSource:
wantsCoalescedStateChanged
coalescingStates
setCoalescingStates:
npServer
_observedNowPlayingNotifications
_observedVolumeControlNotificationToken
_registeredForNowPlayingCount
_registeredForVolumeAvailabilityCount
_wantsCoalescedStateChanged
_coalescingStates
_npServer
TB,R,N,V_wantsCoalescedStateChanged
T@"NSMutableDictionary",&,N,V_coalescingStates
T@"MRDNowPlayingServer",R,N,V_npServer
T@"<MRDNowPlayingStateObserverDelegate>",W,N,V_delegate
contentItemForIdentifier:
setByAddingObjectsFromArray:
_coealesceItems:
contentItemsArtwork
playerProperties
_supportedCommands
_playbackQueue
_contentItems
_contentItemsArtwork
_playbackStateTimestamp
_playerProperties
T@"NSArray",&,N,V_supportedCommands
T@"MRPlaybackQueue",&,N,V_playbackQueue
TQ,N,V_playbackQueueCapabilities
T@"NSArray",&,N,V_contentItems
T@"NSArray",&,N,V_contentItemsArtwork
T@"NSNumber",&,N,V_playbackState
T@"NSDate",&,N,V_playbackStateTimestamp
T@"MRPlayer",&,N,V_playerProperties
_avSessionMediaServicesResetNotification:
_registerAVSystemControllerNotifications
_oddsShimDataSource
_mediaServerController
attributeForKey:
currentRouteHasVolumeControl
uppercaseString
valueForKeyPath:
didCancelRoutePicking:
_notifyDelegateRoutesDidChange
_unregisterAVSystemControllerNotifications
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_descriptionForDiscoveryMode:
sharedMonitor
_handleElectedPlayerDidChangeNotification:
supportLockscreenPlatterDisplayForPersonalDevice
_onQueue_reevaluateShouldShowLockScreenForReason:
lockScreenController:lockScreenWidgetActiveDidChange:
setPreviousPlayerPath:
previousPlayerPath
isLockScreenWidgetVisible
lockScreenController:playerPathDidChange:
_onSerialQueue_restoreElectedPlayer
_onQueue_calculateShouldShowLockScreenForReason:
uiController
acquireLockScreenControlsAssertion
setLegacyAssertion:
releaseLockScreenControlsAssertion
personalDeviceController
contentController
lockScreenPlatterHasContent
lockScreenUIController
lockScreenContentControllerStateDidChange:
isLockScreenWidgetActive
setUiController:
legacyAssertion
electedPlayerPath
setElectedPlayerPath:
eventType
setEventType:
setPersonalDeviceController:
setContentController:
_playerResult
_previousPlayerPath
_playerPathInvalidationToken
_previousPlayerPathInvalidationToken
_timer
_hasLockScreenAssertion
_uiController
_legacyAssertion
_electedPlayerPath
_eventType
_personalDeviceController
_contentController
T@"<MRLockScreenUIControllable>",&,N,V_uiController
TB,N,V_hasLockScreenAssertion
T@"MRDLockScreenAssertion",&,N,V_legacyAssertion
T@"MRPlayerPath",&,N,V_electedPlayerPath
T@"MRPlayerPath",&,N,V_previousPlayerPath
Tq,N,V_eventType
T@"MRDPersonalDeviceController",&,N,V_personalDeviceController
T@"MRDLockScreenContentController",&,N,V_contentController
T@"<MRDLockScreenControllerDelegate>",N,V_delegate
lockScreenWidgetActive
TB,R,N,GisLockScreenWidgetActive
lockScreenWidgetVisible
TB,R,N,GisLockScreenWidgetVisible
createAssertion
setAssertion:
delayCreateAssertion
acquireContentProviderAssertionForType:slot:identifier:errorHandler:
assertion
_assertion
T@"SBSLockScreenContentAssertion",&,N,V_assertion
remoteDeviceIdleDisconnectionInterval
_initialize
registerForChanges
setDeviceState:
_onQueue_evaluateShouldDisconnectWithReason:
unregisterForChanges
_handleActiveSystemEndpointChangedNotification:
deviceState
hasPlayedRecently
isMemberOfActiveSystemEndpoint
disconnectTimer
disconnectInterval
pendingDisconnectDate
dateByAddingTimeInterval:
setPendingDisconnectDate:
disconnectOrigin:
timerWithInterval:queue:block:
setDisconnectTimer:
_adjustPlaybackTimerIfNeeded
playbackTimer
recentlyPlayingInterval
setPlaybackTimer:
lockScreenForegrounded
controlCenterForegrounded
systemEndpointController
activeSystemEndpointUID
originClientForGroupLeaderOfDeviceUID:
initWithDataSource:delegate:
_disconnectTimer
_deviceState
_disconnectInterval
_recentlyPlayingInterval
_pendingDisconnectDate
T@"MSVTimer",&,N,V_playbackTimer
T@"MSVTimer",&,N,V_disconnectTimer
TQ,N,V_deviceState
Td,R,N,V_disconnectInterval
Td,R,N,V_recentlyPlayingInterval
T@"NSDate",&,N,V_pendingDisconnectDate
T@"<MRDConnectionLifetimeControllerDataSource>",W,N,V_dataSource
T@"<MRDConnectionLifetimeControllerDelegate>",W,N,V_delegate
_initializeExternalDevice:
discoveryDescription
isPersonalRoute
_externalDeviceClientDidInvalidate:
setHostName:
setHostPort:
_externalDeviceClientForConnection:
_reloadHostedExternalDeviceCallbacks
_reloadHostedExternalDeviceNotifications
_reloadHostedExternalDeviceSubscribedPlayerPaths
_onSerialQueue_endpointSupportsVolumeControl:
outputDeviceForUID:
isVolumeControlAvailable
registerDiscoveryTokenForConfiguration:
setDiscoveryOutputDevicesChangedCallback:forToken:
setDiscoveryMode:forToken:
_handleMaybeCanMigrateToLocalEndpointDidChange:
lifetimeController
remoteDeviceIdleDisconnection
setLifetimeController:
activeTelevisionRouteID
deviceIsActiveTelevision:
_processCanMigrateToLocalEndpointEvent:timestamp:error:
sharedLocalEndpointForRoutingContextWithUID:
canMigrateToEndpoint:queue:completion:
_reloadEndpoint
_maybePostVolumeDidChange:outputDevice:
_maybePostVolumeControlCapabilitiesDidChange:outputDevice:
_maybePostEndpointDidAddOutputDevice:
_maybePostEndpointDidChangeOutputDevice:
_maybePostEndpointDidRemoveOutputDevice:
removeAllOutputDevices
_allExternalDeviceClients
_mutableExternalDeviceClientsWithRegisteredCallbacks:
setDistantPersonalOutputDevices:
_onSerialQueue_reevaluateVolumeControlCapabilitiesForEndpoint:
_mutableExternalDeviceClientsWithRegisteredNotification:
_postVolumeControlCapabilitiesDidChange:endpoint:outputDevice:
_postVolumeDidChange:endpoint:outputDevice:
localizedName
_userInfoFromEndpoint:outputDevice:
isMediaRemoteDaemon
unregisterDiscoveryToken:
initWithUniqueIdentifier:
setUseOutputDeviceCache:
externalOutputContext
updateOutputDevices:
removeOutputDevices:
useOutputDeviceCache
updateVolume:outputDeviceUID:
updateVolumeControlCapabilities:outputDeviceUID:
discoverySessionWithConfiguration:
_handleExternalDeviceConnectionDidChange:
outputContextDataSourceOutputDeviceDidChangeVolume:
outputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilities:
outputContextDataSourceDidAddOutputDevice:
outputContextDataSourceDidChangeOutputDevice:
outputContextDataSourceDidRemoveOutputDevice:
_endpointShouldNotifyClientsOfTopologyChanges:
_onSerialQueue_endpointShouldPostVolumeNotifications:outputDevice:
_onSerialQueue_isEndpointsDesignatedGroupLeader:
groupContainsGroupLeader
isEqualToOrderedSet:
_endpointIsSolo:
logicalOutputDeviceCount
expanseManagerTelevisionDidJoinSession:
expanseManagerTelevisionDidLeaveSession:
expanseManagerDidJoinExpanseSession:
expanseManagerDidLeaveExpanseSession:
T@"MROrigin",R,N
getPersonalOutputDevices:
getExternalDeviceMetadataWithCompletion:
getExternalDeviceIsPairedWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
outputDeviceVolumeControlCapabilities:withCompletion:
setListeningMode:outputDeviceUID:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterDeviceUIDs:removingClusterDeviceUIDs:settingClusterDeviceUIDs:completion:
createHostedEndpointWithOutputDeviceUIDs:completion:
pingWithTimeout:callback:
sendButtonEventWithUsagePage:usage:down:
T@"NSArray",C,N
initWithExternalDevice:
externalDeviceClients
tombstone
xpcListener
setXpcListener:
externalDeviceCallbackQueue
setExternalDeviceCallbackQueue:
mutableExternalDeviceClients
setMutableExternalDeviceClients:
tombstoned
setTombstoned:
silentDiscoverySession
setSilentDiscoverySession:
canMigrateToLocalEndpointError
setCanMigrateToLocalEndpointError:
canMigrateEvaluationTimestamp
setCanMigrateEvaluationTimestamp:
_useOutputDeviceCache
_tombstoned
_externalDevice
_xpcListener
_externalDeviceCallbackQueue
_mutableExternalDeviceClients
_externalOutputContext
_silentDiscoverySession
_canMigrateToLocalEndpointError
_lifetimeController
_canMigrateEvaluationTimestamp
T@"NSXPCListener",&,N,V_xpcListener
T@"NSObject<OS_dispatch_queue>",&,N,V_externalDeviceCallbackQueue
T@"NSMutableSet",&,N,V_mutableExternalDeviceClients
T@"MRExternalOutputContextDataSource",R,N,V_externalOutputContext
TB,N,V_useOutputDeviceCache
TB,N,V_tombstoned
T@"MRAVRoutingDiscoverySession",&,N,V_silentDiscoverySession
T@"NSError",&,N,V_canMigrateToLocalEndpointError
T@"MRDConnectionLifetimeController",&,N,V_lifetimeController
T@"NSDate",&,N,V_canMigrateEvaluationTimestamp
T@"MRExternalDevice",R,N,V_externalDevice
T@"MRAVDistantEndpoint",R,N,V_endpoint
sharedOutputContextController
registerNotifications
transactionWaitDurationOnNetworkSend
endpointDidAddOutputDeviceNotification:
endpointDidRemoveOutputDeviceNotification:
endpointVolumeDidChangeNotification:
endpointVolumeControlCapabilitiesDidChangeNotification:
deviceInfoDidChangeNotification:
_handleClientConnection:
_verifyClientVersionCompatibility:withError:
encryptionType
cryptoEnabled
_handleDeviceInfoRequest:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleGetRemoteTextInputSessionMessage:fromClient:
_handleRemoteTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeDevice:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
_handleModifyOutputContextRequestMessage:fromClient:
_handleGetVolumeMessage:fromClient:
_handleSetVolumeMessage:fromClient:
_handleGetVolumeControlCapabilitiesMessage:fromClient:
_handleCreateHostedEndpointRequestMessage:fromClient:
_handlePlaybackSessionRequestMessage:fromClient:
_handlePlaybackSessionMigrateRequestMessage:fromClient:
_handlePlaybackSessionMigrateBeginMessage:fromClient:
_handlePlaybackSessionMigrateEndMessage:fromClient:
_handleUpdateActiveSystemEndpointMessage:fromClient:
_handleSetDiscoveryModeMessage:fromClient:
_handleSetListeningModeMessage:fromClient:
_handleAdjustVolumeMessage:fromClient:
_handleGetIsMutedMessage:fromClient:
_handleSetIsMutedMessage:fromClient:
_disconnectClient:withError:
initWithClient:
_sendStateUpdateMessageFromPlayerPath:source:handler:
addMessage:
_connection:wasPreviouslySubscribedToPlayerPath:
_addSubscribedStateToMessage:forClient:originClient:
_addSubscribedStateToMessage:forClient:nowPlayingClient:
_addSubscribedStateToMessage:forClient:playerClient:
initWithCapabilities:
initWithDefaultSupportedCommands:forPlayerPath:
initWithNowPlayingState:
initWithContentItems:forPlayerPath:
_clientForPairingSession:
initWithPairingData:status:
shouldLogPairingSetupCode
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
_createLocalizedOutputDevice:forClient:endpoint:
setIsVolumeControlAvailable:
setHasIsVolumeControlAvailable:
setHasVolume:
initWithSkeleton:
_createLocalizedOutputDevices:forClient:endpoint:
_createVolumelessOutputDevices:
initWithOutputDevices:
_createSkeletonOutputDevices:
_addToMessage:withAllClusterDeviceMembers:block:
_sendMessageFromDestinationWithSource:handler:
initWithVolume:endpointUID:outputDeviceUID:
initWithCapabilities:endpointUID:outputDeviceUID:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_notifyAndDisconnectClients:withError:completion:
setConnectedExternalDevices:
setTelevisionEndpoints:
setDiscoverySessions:
setRemoteControlService:
setLocalOutputContextDataSource:
setBatchedNowPlayingState:
externalDeviceSleepAssertionOnClientConnectDuration
initWithName:timeout:
_prewarmMediaApps
purgeUnusedDiscoverySessions
_findClientIf:
bundleVersion
protocolVersion
minimumSupportedProtocolVersion
minimumSupportedHangdogApplicationVersion
_origin:matchesSubscribedPlayerPath:
anyClient
_playerPath:matchesSubscribedPlayerPath:
_shouldSendStateUpdateMessageFromSource:toClient:
_connection:canReceiveUpdatesForPlayerPath:
encryptedMessageWithState:text:attributes:usingCryptoSession:
version
initWithVersion:data:
initWithInputMode:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
gameControllerConnectionDidInterrupt:
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
effectiveValuesForUnionSetting:
lowercaseString
outputDevicesChanged:forConfiguration:
removeOutputDevicesChangedCallback:
serverDiscoveryModeForConfiguration:
setServerDiscoveryMode:forConfiguration:
exportOutputDevices:endpoint:
deleteIdentityWithError:
pairedDevices
setConnected:
dataFromDeviceInfos:
_unpair:
setShouldVerboselyLog:
initWithCommandID:commandResult:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
setRegisteredToNowPlayingUpdates:
volumeUpdates
setRegisteredToVolumeUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
outputDeviceUpdates
setRegisteredToOutputDeviceUpdates:
systemEndpointUpdates
setRegisteredToSystemEndpointUpdates:
_addOutputDevicesToMessage:forClient:withEndpoint:
_addVolumeToMessage:forClient:withEndpoint:completion:
_addNowPlayingStateToMessage:forClient:withEndpoint:
initWithHiliteMode:
anyOrigin
activeOriginClient
hasPlaceholder
resolvePlaceholdersForDeviceInfo:
anyPlayer
_origin:client:matchesSubscribedPlayerPath:
_origin:client:player:matchesSubscribedPlayerPath:
initWithLastPlayingDate:
defaultPlayer
initWithPlayerPath:lastPlayingDate:
initWithDeviceID:errorCode:
buffer
time
gain
setRequest:
updatePeer
_syncStateToClient:
endpoints
addAuthorizationCallbackForOutputDevice:callback:
getClusterStatus:
addingOutputDeviceUIDs
removingOutputDeviceUIDs
settingOutputDeviceUIDs
setReturnPartialResults:
setOutputDevices:initiator:withReplyQueue:completion:
addAuthorizationCallbackForOutputDevice:client:
isSubsetOfSet:
initWithRoute:status:
addOutputDevices:initiator:withReplyQueue:completion:
removeOutputDevices:initiator:withReplyQueue:completion:
beginSearchWithTimeout:mapCompletion:
initWithVolume:
setOutputDeviceVolume:outputDevice:queue:completion:
initWithPlaybackSession:
requestID
triggerAudioFadeOutForNowPlayingApplicationWithReplyQueue:completion:
triggerAudioFadeInWithReplyQueue:completion:
listeningMode
initWithGroupUID:
createHostedEndpointForOutputDeviceUIDs:completion:
adjustment
adjustOutputDeviceVolume:outputDevice:queue:completion:
initWithIsMuted:
outputDeviceIsMuted:queue:completion:
setOutputDeviceIsMuted:outputDevice:queue:completion:
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
remoteControlService:didAcceptClientConnection:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
textEditingService:textEditingDidBegin:withAttributes:payload:
textEditingService:textDidChange:payload:
textEditingService:attributesDidChange:payload:
textEditingServiceTextEditingDidEnd:
textEditingService:echoWithText:
clearEndpointForClient:
_broadcastKeyboardMessageWithState:text:attributes:
_broadcastRemoteTextInputMessageWithPayload:
_isConnectionForManagedConfigIDAllowed:
_handleHiliteModeChanged:
removeAuthorizationCallbackForOutputDevice:
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_stateObserver
_pinPairingDialog
_sleepObserver
_outputContextController
_outputDeviceCallbackTokens
_discoverySessions
_remoteControlService
T@"MRDRemoteControlService",R,N,V_remoteControlService
proxyForObjects:protocol:
setObjects:
setProtocol:
objects
selector
invokeWithTarget:
signatureWithObjCTypes:
proxyForObject:protocol:
forwardInvocation:
methodSignatureForSelector:
_objects
_protocol
T@"NSHashTable",&,N,V_objects
T@"Protocol",&,N,V_protocol
_handleExternalDeviceConnectionStateDidChangeNotification:
_handleObserverDiscoveryModeDidChangeNotification:
_handleEndpointOutputDevicesDidChangeNotification:
_handleOutputContextManagerDidReset:
_onQueue_reloadOutputDevices
addEndpointsChangedCallback:
initWithDiscoverySession:
removeEndpointsChangedCallback:
exceptionWithName:reason:userInfo:
_processDiscoveryObserverChanges
willBeLocallyHosted
initWithOutputContext:designatedGroupLeader:
isUsingJSONProtocol
addHostedExternalDevice:endpoint:
setExternalDevice:
virtualOutputDeviceDictionary
isAuxiliary
canRelayCommunicationChannel
isGroupable
isRemoteControllable
isDirectConnectedToOutputDeviceUID:
canAccessAppleMusic
canAccessiCloudMusicLibrary
shouldBeLocallyHosted
computeHostsByGroupIDForOutputDevices:unclusteredDevices:
supportNanoStandalone
baseGroupID
isMultiplayerAware
baseParentGroupID
setCanAccessiCloudMusicLibrary:
setCanAccessAppleMusic:
canAccessRemoteAssets
setCanAccessRemoteAssets:
resolveOutputDevices:
showUncommitedDevices
senderDefaultGroupUID
parentGroupIdentifier
parentGroupContainsDiscoverableLeader
hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:
createDiscoverySession
availableDistantAudioOutputDevices
externalDeviceForOutputDeviceUID:
determineGroupLeaderForOutputDevices:options:
virtualOutputDevices
addVirtualOutputDevice:forClient:
removeVirtualOutputDevicesForClient:
setVirtualOutputDeviceDictionary:
_observerCalloutQueue
_hostsByGroupID
_endpoints
_distantOutputDevices
_localEndpoint
_discoverySessionOutputDevicesToken
_discoverySessionEndpointsToken
_externalDeviceManager
_virtualOutputDeviceDictionary
T@"MRDRemoteControlDiscoverySession",&,N,V_discoverySession
T@"NSMutableDictionary",&,N,V_virtualOutputDeviceDictionary
takelockScreenAssertion
_addOrigin:withDeviceInfo:emitNotification:
initWithOriginClient:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingPlayerMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleGetClientPropertiesMessage:fromClient:
_handleSetClientPropertiesMessage:fromClient:
_handleUpdateClientPropertiesMessage:fromClient:
_handleGetPlayerPropertiesMessage:fromClient:
_handleSetPlayerPropertiesMessage:fromClient:
_handleUpdatePlayerPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleGetActivePlayerPathsForLocalOriginMessage:fromClient:
_handleGetPlayerPictureInPictureEnabledMessage:fromClient:
_handleSetPlayerPictureInPictureEnabledMessage:fromClient:
_handleContentItemChangedMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
_handleGetDeviceInfo:fromClient:
_handleGetElectedPlayerPathMessage:fromClient:
_handlePlaybackSessionRequest:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleSetDefaultSupportedCommandsMessage:fromClient:
_handleGetLastPlayingDateMessage:fromClient:
_handleSetPlayerClientPropertiesMessage:fromClient:
_handleSetOriginClientPropertiesMessage:fromClient:
_handleRegisterForWakingNowPlayingNotifications:fromClient:
_handleGetAudioFormatContentInfoForOriginMessage:fromClient:
_onQueue_activeOriginClient
_onQueue_companionOriginClient
_onQueue_allNowPlayingInfoClients
_onQueue_originClientForOrigin:
resolvePlayerPath:fromClient:
isAllowedAccessToDataFromPlayerPath:
setNowPlayingClient:
setPlayerClient:
resolvePlayerPath:fromClient:useDefaultPlayerIfNoneSpecified:
isEntitledFor:
existingPlayerClientForPlayer:
_onQueue_queryPlayerPath:
initWithUnresolvedPlayerPath:
setOriginClient:
existingPlayerClientForPlayerPath:
xpcClientForPlayerPath:
_hasForwarderForOrigin:
daemonClient
_onQueue_originClientForDeviceUID:
_onQueue_originClientForGroupLeaderOfDeviceUID:
_removeNowPlayingClient:forOrigin:
postDeviceInfoDidChange:previousDeviceInfo:forOrigin:handler:
postOriginDidRegister:handler:
postActiveOriginDidChange:withPlaybackState:handler:
postVolumeDidChange:volume:handler:
postIsMutedDidChange:isMuted:handler:
postVolumeCapabilitiesDidChange:capabilities:handler:
postClientDidRegisterForPlayerPath:handler:
postNowPlayingApplicationDidChangeForPlayerPath:withPlaybackState:handler:
postNowPlayingClientStateDidChange:forPlayerPath:handler:
postPlayerDidRegisterForPlayerPath:handler:
postActivePlayerDidChangeForPlayerPath:withPlaybackState:handler:
postNowPlayingPlayerStateDidChange:forPlayerPath:handler:
postIsPlayingDidChange:lastPlayingTimestamp:forPlayerPath:handler:
postPlaybackStateDidChange:forPlayerPath:handler:
hasRequestedSupportedCommands
postSupportedCommandsDidChange:forPlayerPath:handler:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:handler:
postPlaybackQueueDidChange:nowPlayingItemDidChange:forPlayerPath:handler:
postPlaybackQueueContentItemsDidChange:forPlayerPath:handler:
enumerateFilteredContentItemsBySubscriptionsForContentItems:block:
postPlaybackQueueContentItemsArtworkDidChange:forPlayerPath:handler:
postPlayerDidRegisterCanBeNowPlayingForPlayerPath:handler:
postClientDidRegisterCanBeNowPlayingForPlayerPath:handler:
setActiveOrigin:
removeOrigin:
createCustomOriginClientForOrigin:
removeOriginRequests:
originClientRequestsForPlayerPath:
_removeOrigin:
initWithUTF8String:
queryPlayerPathForXPCMessage:fromClient:
setCanBeNowPlaying:
dateWithTimeIntervalSinceReferenceDate:
setCanBeNowPlayingTimestamp:
setPerPlayerCanBeNowPlaying:
setHardwareRemoteBehavior:
restoreStateFromController:
setActivePlayerClient:
initWithContentItems:
setHasRequestedSupportedCommands:
setWantsAssertionsForNotificationsWithPlayerPath:
maybePostDistributedNotifications
postPictureInPictureDidChange:forPlayerPath:handler:
postPlayerDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postPlayerDidUnregisterWithPlaybackState:canBeNowPlaying:forPlayerPath:handler:
postClientDidUnregisterCanBeNowPlayingForPlayerPath:handler:
existingOriginClientRequestsForPlayerPath:
postClientDidUnregisterForPlayerPath:hasDefaultSupportedCommands:canBeNowPlaying:handler:
postActivePlayerPathsDidChangeForOrigin:handler:
postAudioFormatContentInfoDidChangeForOrigin:handler:
postElectedPlayerDidChange:change:event:reason:handler:
postLockScreenActiveDidChange:handler:
postLockScreenVisibleDidChange:handler:
postLockScreenPlayerPathDidChange:handler:
lockScreenController
setOriginClients:
setElectedPlayer:
mostRecentEvent
mostRecentEventReason
mostRecentSelectionReason
setElectedPlayerReason:
setLockScreenWidgetActive:
setLockScreenWidgetVisible:
setLockScreenPlayerPath:
setOriginForwarders:
isHomepodDemoApplication
setHomepodDemoMode:
numberWithUnsignedLong:
postClientNotificationNamed:predicate:
postLockScreenControlsDidChangeDistributedNotification
dataForKey:
setValue:forKey:
setLocalOriginClient:
_onQueue_setActiveOrigin:saveState:
postOriginDidUnRegister:deviceInfo:handler:
setActiveOriginClient:
nowPlayingServer:activeOriginDidChangeFromOriginClient:toOriginClient:
_onQueue_savePersistentActiveOrigin:
lockScreenController:lockScreenWidgetVisibleDidChange:
electedPlayerController:electedPlayerDidChange:change:event:reason:
lockScreenPlatterActive
nowPlayingClient:activePlayerDidChangeFromPlayerClient:toPlayerClient:
nowPlayingClient:clientStateDidChange:
nowPlayingClient:playerDidRegister:
nowPlayingClient:playerDidUnregister:
nowPlayingPlayerClient:clientCanBeNowPlayingDidChange:
nowPlayingClient:applicationDidForeground:
activeClientPID
localActiveClientPID
activeClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
localActivePlayerClient
localActiveNowPlayingClient
companionOriginClient
localActivePlayerPath
allNowPlayingInfoClients
allLocalNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
localPlayersForXpcClient:
clearNowPlayingClientForXPCClient:
restoreDeviceInfoToClient:handler:
restoreClientState:handler:
augmentedUserInfoForPlayerPath:
_onQueue_restoredActiveOrigin
electedPlayerController
proximityController
_originClients
_nowPlayingApplicationIsPlayingStates
_playbackQueueServer
_originForwarders
_electedPlayerController
_lockScreenController
_proximityController
_activeOriginClient
_localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
Ti,R,N
T@"MRDNowPlayingOriginClient",R,N
T@"NSSet",R,N
T@"MRDElectedPlayerController",R,N,V_electedPlayerController
T@"MRDLockScreenController",R,N,V_lockScreenController
T@"MRDProximityController",R,N,V_proximityController
stringByAppendingFormat:
isLocalOrigin
isActivity
_playerClient
_nowPlayingClient
_originClient
_unresolvedPlayerPath
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
TI,N,V_error
T@"MRPlayerPath",R,N,V_unresolvedPlayerPath
handleCanBeNowPlayingPlayerDidChange:
initializeBundleIdentifier
initializeDisplayName
perPlayerCanBeNowPlaying
anyPlayerIsPlaying
isForegrounded
supportsBackgroundAudio
setProcessUserIdentifier:
parentApplicationBundleIdentifier
needNowPlayingForegroundState
initWithBundleIDs:states:
setIsForegrounded:
setHandler:
applicationInfoForApplication:
bundleInfoValueForKey:PID:
setSupportsBackgroundAudio:
_onQueue_setActivePlayerClient:
setNowPlayingPlayerClient:
_onQueue_activePlayerClient
_reevaluateCanBeNowPlaying
_onQueue_anyPlayerIsPlaying
_onQueue_playerClientForPlayer:
_onQueue_existingPlayerClientForPlayer:
_onQueue_addPlayer:
_onQueue_removePlayerClientForPlayer:
setPushStateClient:
setPushStateActivePlayerClient:
visibility
tintColor
appIcon
absoluteString
canBeNowPlayingTimestamp
notificationPlayerPathFromPlayer:
nowPlayingPlayerClient
pushStateActivePlayerClient
pushStateClient
stateMonitor
setStateMonitor:
_playerClients
_canBeNowPlaying
_effectiveCanBeNowPlaying
_perPlayerCanBeNowPlaying
_isForegrounded
_supportsBackgroundAudio
_canBeNowPlayingTimestamp
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_pushStateClient
_stateMonitor
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
T@"MRClient",&,N,V_pushStateClient
T@"BKSApplicationStateMonitor",&,N,V_stateMonitor
TB,N,V_perPlayerCanBeNowPlaying
T@"NSDate",C,N,V_canBeNowPlayingTimestamp
TB,N,V_isForegrounded
TB,N,V_supportsBackgroundAudio
T@"MRClient",&,N
T@"MRDNowPlayingPlayerClient",&,N
T@"<MRDNowPlayingClientDelegate>",W,N,V_delegate
_terminationHandler
setOutputContextForLocalDeviceDataSource:
_restoreNowPlayingClientState
_clientDidOpenConnection:
expectedClientAuditTokens
setExpectedClientAuditTokens:
setConnectedClientAuditTokens:
restoreClientDeviceInfo:
keepAlive
distantFuture
canBeNowPlayingClients
insertObject:atIndex:
initWithNotification:userInfo:
postNotification:
clientForPlayerPath:
activateWithCompletion:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleSetSystemIsMutedMessage:fromClient:
_handleGetSystemIsMutedMessage:fromClient:
_handleGetIsBooksAppInstalledMessage:fromClient:
_handleGetIsMusicAppInstalledMessage:fromClient:
_handleWakeMediaAppMessage:fromClient:
_handleWakePlayerServiceMessage:fromClient:
_handlePing:fromClient:
_handleRequestBlessMessage:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
_handleCollectClientDiagnosticsMessage:fromClient:
_handleRegisterPairingHandlerMessage:fromClient:
_handleUnregisterPairingHandler:fromClient:
_handleCompletePairingHandlerMessage:fromClient:
setKeepAlive:
_internalMediaRemoteNotificationIsLegal:
_isMediaAppInstalled:
applicationProxyForIdentifier:
appState
takeAssertionAndBlessForReason:
acquire
createDiagnosticInfo
diagnosticInfo
setDiagnosticInfo:
_handleCollectClientDiagnosticsMessageWithCompletion:
_collectDiagnosticFromClient:completion:
pairingHandler
addHandlerForRouteUID:completion:
performHandlerForRouteUID:passcode:
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
hostedRoutingService
removeClientForPID:
setActiveClients:
setActiveTransactions:
setLocalNowPlayingClient:
systemMediaClient
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
initWithObjects:
getBytes:length:
handleForIdentifier:error:
lastBootUUID
connectedClientAuditTokens
_validateAuditTokens:pids:auditTokens:
setLastBootUUID:
_postAppActivityNotificationNamed:withActivity:
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
T@"MRDMediaRemoteServer",R,N
mostRecentCanBeNowPlayingClient
mostRecentPlayingClient
systemPodcastClient
_sendMediaRemoteCommand:withOrigin:
availableOrigins
remoteControlServer
transactionServer
sharedDisplayMonitor
_listenerConnection
_connectionQueue
_localRoutingDataSource
_volumeController
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_uiServer
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_termSigHandler
_shouldSendCommandsDuringPhoneCall
_availableOrigins
_sharedDisplayMonitor
T@"NSArray",R,N,V_availableOrigins
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
T@"MRDAVRoutingServer",R,N,V_routingServer
T@"MRDTransactionServer",R,N,V_transactionServer
T@"MRDExternalDeviceRemoteServer",R,N,V_externalDeviceServer
TB,R,N,V_shouldSendCommandsDuringPhoneCall
T@"MRDMediaRemoteClient",R,N
T@"FBSDisplayLayoutMonitor",R,N,V_sharedDisplayMonitor
T@"RPCompanionLinkClient",R,N
initWithName:pid:bundleID:subsystem:reason:flags:
Tq,R,N,V_type
setString:
string
_string
TQ,N,V_type
T@"NSString",&,N,V_string
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
connectToAllOutputDevicesForReason:comparator:queue:completion:
connectToEndpointWhenBeginsPlayback
connectToUserSelectedEndpoint
_handleActiveSystemEndpointDidChangeNotification:
_connectToAllOutputDevicesForReason:comparator:queue:completion:
_connectToOutputDevice:reason:completion:
_connectToGroup:reason:completion:
_discoverOutputDevice:reason:completion:
_discoverGroup:reason:completion:
_onSerialQueue_connectToEndpoint:reason:queue:completion:
discoverEndpointTimeoutInterval
_onSerialQueue_discoverOutputDevice:connect:reason:completion:
_onSerialQueue_discoverGroup:connect:reason:completion:
searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:
searchEndpointsForGroupUID:timeout:reason:queue:completion:
_onSerialQueue_addConnectedEndpoint:
connectToExternalDeviceWithUserInfo:completion:
_handleEndpointDidInvalidateNotification:
_onSerialQueue_removeConnectedEndpoint:
autoConnectingEndpoints
autoConnectedEndpoints
connectToGroup:reason:queue:completion:
_pendingReconSessions
_pendingReconSessionCompletions
_pendingGroupReconSessions
_pendingGroupReconSessionCompletions
_connectedEndpoints
_connectingEndpoints
_pendingConnectingEndpointCompletions
_handlePlaybackQueueChangedNotification:
_handleNowPlayingApplicationDidChangeNotification:
_handleNowPlayingApplicationDidForegroundNotification:
_onSyncSelf_reevaluateElectedPlayerForEvent:withReason:
_shouldUseNotification:
_onSyncSelf_maybeSetupPlaybackTimeoutTimerForEvent:
setActiveSystemEndpointOutputDeviceUID:
activeSystemEndpointOutputDeviceUID
setOriginClient:withChangeType:
_onSyncSelf_calculateElectedPlayerForOriginClient:event:reason:
_resolveChangeTypeWithOriginClient:forEvent:
previousElectedPlayerPath
_activeSystemEndpointOutputDeviceUID
_previousElectedPlayerPath
_mostRecentEvent
_mostRecentEventReason
_mostRecentSelectionReason
T@"NSString",&,N
T@"MRPlayerPath",R,N,V_electedPlayerPath
T@"MRPlayerPath",R,N,V_previousElectedPlayerPath
T@"NSString",R,N,V_event
T@"NSString",R,N,V_eventReason
T@"NSString",R,N,V_selectionReason
T@"NSString",R,N,V_mostRecentEvent
T@"NSString",R,N,V_mostRecentEventReason
T@"NSString",R,N,V_mostRecentSelectionReason
T@"<MRDElectedPlayerControllerDelegate>",N,V_delegate
strongToWeakObjectsMapTable
setCommunicationChannelDelegate:
initWithOutputContextCommunicationChannel:outputContext:
_didReceiveData:fromConnectionID:connectionFactory:
_didCloseCommunicationChannelWithID:error:
initWithAPCommunicationChannel:
airPlayRemoteControlService:didAcceptConnection:
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
didReceiveData:fromCommunicationChannel:
didCloseCommunicationChannel:
didSetupReverseCommunicationChannel:
failedToSetupReverseCommunicationChannel:
_systemMusicContext
T@"<MRDAirPlayRemoteControlServiceDelegate>",W,N,V_delegate
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
companionLinkDevices
mediaRouteIdentifier
homeKitUserIdentifiers
_appendDescribableArray:toString:withTitle:indentLevel:
activeClients
activeTransactions
currentAppActivity
setCurrentAppActivity:
activeOrigin
electedPlayer
electedPlayerReason
lockScreenPlayerPath
originForwarders
enqueuedCommands
remoteControlContexts
queuedInitiatePlaybackMessages
connectedExternalDevices
televisionEndpoints
discoverySessions
localOutputContextDataSource
batchedNowPlayingState
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
setAirplaySecuritySettings:
localReceiverPairingIdentity
setLocalReceiverPairingIdentity:
systemActiveEndpoints
setSystemActiveEndpoints:
setAutoConnectedEndpoints:
setAutoConnectingEndpoints:
migrationEvents
setMigrationEvents:
mediumDevices
setMediumDevices:
promptingDevices
setPromptingDevices:
immediateDevices
setImmediateDevices:
migratingDevices
setMigratingDevices:
isAdvertisingProximity
setIsAdvertisingProximity:
advertisingReasonDescription
setAdvertisingReasonDescription:
hostedRouteDiscoveryMode
hostedDiscoverySessions
hostedExternalDevices
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
usedTransactionMemory
allowedTransactionMemory
transactionWaitDuration
_lockScreenWidgetActive
_lockScreenWidgetVisible
_isAdvertisingProximity
_systemDiscoveryMode
_hostedRouteDiscoveryMode
_dateCreated
_activeTransactions
_currentAppActivity
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_electedPlayer
_electedPlayerReason
_lockScreenPlayerPath
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_localOutputContextDataSource
_batchedNowPlayingState
_airplaySecuritySettings
_localReceiverPairingIdentity
_systemActiveEndpoints
_autoConnectedEndpoints
_autoConnectingEndpoints
_migrationEvents
_mediumDevices
_promptingDevices
_immediateDevices
_migratingDevices
_advertisingReasonDescription
_hostedExternalDevices
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
T@"NSDate",R,N,V_dateCreated
T@"NSArray",C,N,V_activeClients
T@"NSArray",C,N,V_activeTransactions
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
T@"NSArray",C,N,V_originClients
T@"MROrigin",&,N,V_activeOrigin
T@"MRPlayerPath",&,N,V_electedPlayer
T@"NSString",&,N,V_electedPlayerReason
TB,N,V_lockScreenWidgetActive
TB,N,V_lockScreenWidgetVisible
T@"MRPlayerPath",&,N,V_lockScreenPlayerPath
T@"NSArray",&,N,V_originForwarders
T@"NSDictionary",C,N,V_enqueuedCommands
T@"NSArray",C,N,V_remoteControlContexts
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_connectedExternalDevices
T@"NSArray",C,N,V_televisionEndpoints
T@"NSArray",C,N,V_discoverySessions
T@"MRDRemoteControlService",&,N,V_remoteControlService
T@"MROutputContextDataSource",&,N,V_localOutputContextDataSource
T@"NSString",&,N,V_batchedNowPlayingState
TI,N,V_systemDiscoveryMode
T@"_MRAVAirPlaySecuritySettingsProtobuf",&,N,V_airplaySecuritySettings
T@"NSString",C,N,V_localReceiverPairingIdentity
T@"NSDictionary",C,N,V_systemActiveEndpoints
T@"NSArray",C,N,V_autoConnectedEndpoints
T@"NSArray",C,N,V_autoConnectingEndpoints
T@"NSArray",C,N,V_migrationEvents
T@"NSArray",C,N,V_nearbyDevices
T@"NSArray",C,N,V_mediumDevices
T@"NSArray",C,N,V_promptingDevices
T@"NSArray",C,N,V_immediateDevices
T@"NSArray",C,N,V_migratingDevices
TB,N,V_isAdvertisingProximity
T@"NSString",C,N,V_advertisingReasonDescription
TI,N,V_hostedRouteDiscoveryMode
T@"NSArray",C,N,V_hostedDiscoverySessions
T@"NSArray",C,N,V_endpoints
T@"NSDictionary",C,N,V_hostedExternalDevices
T@"NSString",&,N,V_discoverySession
T@"NSArray",C,N,V_recordingEndpointClients
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
TQ,N,V_usedTransactionMemory
TQ,N,V_allowedTransactionMemory
Td,N,V_transactionWaitDuration
shouldInitializeGenericBonjourService
shouldInitializeTelevisionBonjourService
shouldInitializeRapportService
supportNanoLinkAgent
_initializeIDSRemoteControlServiceWithRoutingDataSource:
shouldInitializeIDSService
initWithTimeout:reason:queue:handler:
sharedInstance
getActivePairedDevice
_notifyDelegateWithConnection:
setAirPlayService:
genericNetworkService
setGenericNetworkService:
televisionNetworkService
setTelevisionNetworkService:
rapportService
setRapportService:
companionService
setCompanionService:
started
setStarted:
_airPlayService
_genericNetworkService
_televisionNetworkService
_rapportService
_companionService
T@"MRDBonjourRemoteControlService",&,N,V_genericNetworkService
T@"MRDBonjourRemoteControlService",&,N,V_televisionNetworkService
T@"MRDAirPlayRemoteControlService",&,N,V_airPlayService
T@"MRDRapportRemoteControlService",&,N,V_rapportService
T@"MRDIDSCompanionRemoteControlService",&,N,V_companionService
T@"MRDIDSRemoteControlService",&,N,V_idsService
TB,N,V_started
T@"<MRDRemoteControlServiceDelegate>",W,N,V_delegate
valueForProperty:
initWithConnection:bundleID:
_hasQuickControlsAssertion
_hasScreenMirroringAssertion
TB,N,V_hasQuickControlsAssertion
TB,N,V_hasScreenMirroringAssertion
setSessionServer:
sessionServer
setMessageProxy:
_handleGetUIServerRelayEndpointMessage:fromClient:
_handleGetDeviceSupportsUISessionsMessage:fromClient:
listener
valueForEntitlement:
allowAllClientUIConnections
interfaceWithProtocol:
messageProxy
_addClient:
_removeClient:
_setQueue:
internalClients
clientObservers
T@"MRDUIServer",R,N
removeClientObserver:
remoteUIServerEndpoint
setRemoteUIServerEndpoint:
setClientObservers:
_listener
_remoteUIServerEndpoint
_messageQueue
_internalClients
_clientObservers
_sessionServer
_messageProxy
T@"NSMutableSet",R,N,V_internalClients
T@"NSHashTable",&,N,V_clientObservers
T@"MRDUISessionServer",&,N,V_sessionServer
T@"MRDServerMessageProxy",&,N,V_messageProxy
T@"NSXPCListenerEndpoint",&,N,V_remoteUIServerEndpoint
T@"NSXPCListener",R,N,V_listener
T@"NSObject<OS_dispatch_queue>",R,N,V_messageQueue
setDelegate:queue:
_notifyDelegate:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
T@"<MRDPhoneCallObserverDelegate>",W,N,V_delegate
_onQueue_adjustPlaybackTimerIfNeededForPlayerPath:
playbackStateForPlayerPath:
timeSincePlayingForPlayerPath:
playbackTimers
lastPlayingDateForPlayerPath:
_onQueue_simplifyToplogyOfPlayerPathIfNeeded:
timerWithInterval:repeats:queue:block:
isMultiplayerHost
hasASmartDevice
isSmartDevice
createEndpointWithOutputDeviceUIDs:options:queue:completion:
searchEndpointsWithPredicate:timeout:reason:queue:completion:
setPlaybackTimers:
_playbackTimers
T@"NSMutableDictionary",&,N,V_playbackTimers
T@"MRAVRoutingDiscoverySessionConfiguration",&,N,V_configuration
_assertionID
initWithOutputContext:
registerForNotifications
verifyGroupLeaderForReason:
cleanUp
initialPrewarm
prewarmApp:origin:deviceInfo:
_createPlayerAndWaitForCanBeNowPlaying:deviceInfo:completion:
outputContext
setDesignatedGroupLeaderWhenContextEmpty:
_reevaluateDeviceInfo
_maybeForwardOriginToLocalOrigin:
_onQueue_destroyPlayerPathsForOrigin:
_createResolvedPlayerPathFromPlayerPath:
_handlePlaybackQueueRequest:forPlayerPath:completion:
sendRemoteControlCommandWithoutRedirection:withCompletionBlock:
_sendCommandPreview:options:playerPath:
localizedFailureReason
initWithWithSendError:description:
_createPlayerAndWaitForConnection:command:completion:
commitOutputDeviceToContextIfNeededWithReason:completion:
_createPlayerAndWaitForConnection:command:deviceInfo:completion:
_resolveReason:uid:name:requestID:
_createPlayerForClient:playerPath:deviceInfo:completion:
_sendMessageForPlayerPath:timeout:reason:factory:completion:
_createPlayerAndWaitForCanBeNowPlaying:completion:
_resolveReason:
sendMessageWithType:playerPath:timeout:reason:factory:completion:
startEvent:
endEvent:
volumeForOutputDeviceUID:error:
setVolume:outputDeviceUID:
volumeControlCapabilitiesForOutputDeviceUID:error:
minusSet:
removeOutputDevices:initiator:withCallbackQueue:block:
setOutputDevices:initiator:withCallbackQueue:block:
setLocallyHosted:
systemMediaApplication
systemPodcastApplication
systemBooksApplication
sharedQueueVersion
initWithLastSupportedMessageType:
outputContextDataSourceOutputDevicesDidChangeNotification:
outputContextDataSourceDidAddOutputDeviceNotification:
outputContextDataSourceDidRemoveOutputDeviceNotification:
outputContextDataSourceVolumeControlCapabilitiesDidChangeNotification:
outputContextDataSourceVolumeDidChangeNotification:
anyOutputContextDidAddOutputDeviceNotification:
outputContextRequestToAddLocalOutputDeviceNotification:
outputContextDidAddLocalDeviceNotification:
anyDeviceInfoDidChangeNotification:
localClusterTypeDidChangeNotification:
removeClient:
localPlayerPath
nowPlayingClientRequests
_notifyActiveSessionMaybeWillBeHijackedByNativePlaybackFromOutputContextModification:
_generateDeviceInfoWithDesignatedGroupLeader:outputContext:
verifyGroupLeader:
initialize
outputDeviceForUID:error:
setOutputContext:
notificationQueue
setNotificationQueue:
_originForwarder
_pendingCommitRequests
_clientBundleIDs
_designatedGroupLeader
_outputContext
T@"MRAVOutputContext",&,N,V_outputContext
T@"MROrigin",&,N,V_origin
T@"NSObject<OS_dispatch_queue>",&,N,V_notificationQueue
T@"MRAVOutputDevice",&,N,V_designatedGroupLeader
_initWithLabel:
checkXPCConnectionStatusDefaultInterval
checkXPCConnectionStatusDefaultResponseTimeout
_canSendMessage
_checkConnectionStatus
_onCalloutQueue_notifyStatusDidChange:
verboseConnectionMonitorLogging
scheduleSendBarrierBlock:
initWithXPCConnection:label:
connection_t
setConnection_t:
calloutQueue
currentMessageCount
setCurrentMessageCount:
totalMessageCount
setTotalMessageCount:
pendingBarrierCompletion
setPendingBarrierCompletion:
lastStatusCheckDate
setLastStatusCheckDate:
lastStatusChangeDate
setLastStatusChangeDate:
lastMessageSentDate
setLastMessageSentDate:
_label
_pendingBarrierCompletion
_connection_t
_calloutQueue
_currentMessageCount
_totalMessageCount
_status
_lastStatusCheckDate
_lastStatusChangeDate
_lastMessageSentDate
T@"NSXPCConnection",&,N,V_connection
T@"NSObject<OS_xpc_object>",&,N,V_connection_t
T@"NSObject<OS_dispatch_queue>",R,N,V_calloutQueue
TQ,N,V_currentMessageCount
TQ,N,V_totalMessageCount
TQ,N,V_status
TB,N,V_pendingBarrierCompletion
T@"NSDate",&,N,V_lastStatusCheckDate
T@"NSDate",&,N,V_lastStatusChangeDate
T@"NSDate",&,N,V_lastMessageSentDate
T@"<MRXPCConnectionMonitorDelegate>",W,N,V_delegate
sharedAuthorizationSession
initWithRoutingDataSource:hostedRoutingService:systemEndpointController:autoConnectionController:homeServer:avOutputDeviceAuthorizationSession:
setMaxConcurrentOperationCount:
removeLocalDevice
_loadMostRecentlyPicked
_updateSystemRouteDiscoveryMode
setAirplayActive:
_unregisterNotifications
supportNowPlayingSessionDataSource
_setPickedRoute:withPassword:options:
hasPrefix:
applicationPickedRoutes
postSystemEndpointDeviceChange:type:originClient:handler:
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleClearAllAVRoutePasswordsMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_handleGetHostedRoutingXPCEndpointMessage:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleUpdateActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDsMessage:fromClient:
_handleCreateEndpointWithDevices:fromClient:
_handleCreateDirectEndpointForDevices:fromClient:
_handleGroupDevicesAndSendCommand:fromClient:
_handleCreateHostedEndpointForDevices:fromClient:
_handlePredictGroupLeader:fromClient:
_handleRemoveFromParentGroup:fromClient:
_handlePromptForRouteAuthorizationMessage:fromClient:
_handlePresentRouteAuthorizationStatusMessage:fromClient:
_handleGetAirplayStatus:fromClient:
_handleSetNearbyDevice:fromClient:
_handleResetOutputContextMessage:fromClient:
_handleGetExternalDeviceMessage:fromClient:
_handleAddVirtualOutputDeviceMessage:fromClient:
_handleGetVirtualOutputDevicesMessage:fromClient:
_handleCreateGroupWithDevices:fromClient:
_handleStartNowPlayingSession:fromClient:
_handleStopNowPlayingSession:fromClient:
_handleGetOutputContextUIDMessage:fromClient:
_handleMigrateFromEndpointToOutputDevicesMessage:fromClient:
_handleMigrateFromEndpointToEndpointMessage:fromClient:
_handleModifyOutputContextMessage:fromClient:
_handleWillStartPlayingInterruptMessage:fromClient:
_createAirPlaySecuritySettings
_postRouteStatusDidChangeNotificationForRoute:newStatus:
_savedPasswordForOutputDevice:
_clearPasswordForOutputDevice:
respondWithAuthorizationToken:completionHandler:
authorizationTokenType
_storePassword:forOutputDevice:
initWithRoute:inputType:responseCallback:cancelCallback:
_handleAuthorizationRequest:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
_setApplicationPickedRoutes:updateRoutes:forClient:
addOperationWithBlock:
indexOfObject:inRange:
removeObjectsInRange:
_saveMostRecentlyPicked
initWithResponse:
inputType
_handleErrorStatus:forRoute:
useAPSyncAPI
_createEndpointForOutputDeviceIDs:options:completion:
performMigrationToOutputDevices:request:initiator:queue:completion:
performMigrationToEndpoint:request:queue:completion:
_createEndpointForOutputDeviceIDs:completion:
_predictGroupLeaderForOutputDeviceIDs:completion:
removeOutputDeviceFromParentGroup:queue:completion:
createOutputContextWithUniqueIdentifier:
modifyWithOutputContext:queue:completion:
_postExternalScreenDidChange
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_handleAuthenticationFailureForRoute:withOptions:
_handleClusterErrorStatus:forRoute:
respondWithAuthorizationToken:
activePasswordDialog
_passwordDialogForRouteWithName:usingInputType:
buttonIdentifier
textFieldValues
dictionaryWithDictionary:
setActivePasswordDialog:
_clientInvalidatedNotification:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
outputContextManagerForAllOutputContexts
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
discoveryTransaction
setDiscoveryTransaction:
_launchTVClusterSettings
_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:
URLWithString:
_presentPasswordDialogForRoute:withOptions:
identifyingMACAddress
_existingKeychainAccountForOutputDevice:password:
_storePassword:forRoute:
MACAddress
_preferredIdentifierForMACAddress:identifier:name:
_createEndpointForOutputDeviceIDsLegacy:options:completion:
indexesOfObjectsPassingTest:
objectsAtIndexes:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
_handleGetHostedEndpointForDeviceUIDMessage:fromClient:
_autoConnectionController
_routeUIDsToIgnorePortStatusFailures
_lastClusterConnectionFailureDate
_reconnaissanceSessions
_mostRecentlyPickedDevices
_mostRecentStatus
_homeServer
_workerOperationQueue
_localDeviceCommitManager
_topologySimplifier
_airplayActive
_hostedRoutingService
_systemEndpointController
_activePasswordDialog
_discoveryTransaction
T@"MSVSystemDialog",&,N,V_activePasswordDialog
T@"MROSTransaction",&,N,V_discoveryTransaction
TB,N,V_airplayActive
T@"MRDAVHostedRoutingService",R,N,V_hostedRoutingService
T@"MRDAVSystemEndpointController",R,N,V_systemEndpointController
silentPrimary
TB,R,N,GisSilentPrimary
_frontmostApplicationDidChange:
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_mostRecentlyUpdatedClient
initWithBytes:length:encoding:
bundleWithURL:
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
_notifyDelegateNowPlayingApplicationDidChange
setCachedNowPlayingClients:
setCachedNowPlayingContentItem:
_notifyDelegateNowPlayingPlaybackStateDidChange
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
cachedNowPlayingContentItem
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
T@"NSSet",&,N,V_cachedNowPlayingClients
T@"MRContentItem",&,N,V_cachedNowPlayingContentItem
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
_identifier
_port
TI,R,N,V_connection
TI,R,N,V_identifier
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",W,N,V_delegate
_removeExternalDeviceWithEndpointIdentifier:forReason:
_tombstoneHostedExternalDevice:
removeObjectIdenticalTo:
_removeExternalDeviceWithOutputDeviceUID:forReason:
_hostedExternalDeviceGraveyard
_hostedExternalDeviceMap
T@"<MRDHostedExternalDeviceManagerDelegate>",W,N,V_delegate
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
registeredDeviceWithID:
setRecordingState:
registeredDevices
_registeredDevices
T@"NSArray",R,C,N
T@"<MRDVirtualAudioInputServerDelegate>",W,N,V_delegate
addArtworkFromItem:fromRequest:
setArtworkURLTemplates:
clearArtworkForItems:
requestByRemovingArtwork
includeArtwork
hasArtworkAvailable
fittedArtworkForContentItem:withRequest:
setArtwork:
artworkCache
setArtworkCache:
_artworkCache
T@"MRDPlaybackQueueArtworkCache",&,N,V_artworkCache
T@"MRPlaybackQueue",R,N,V_playbackQueue
artworkCacheSize
defaultSize
_pruneCache
artworkByResizingWithWidth:height:
_cache
initWithW:h:
T@"MRDPlaybackQueueArtworkCacheSize",R,N
copyWithZone:
Td,R,N,V_w
Td,R,N,V_h
_forceEnableCECVolumeNotification:
_setupNotifications
_initVolumeDataIfNeccessary
volumeCategoryForAudioCategory:
setVolumeTo:forCategory:
_systemVolumeDidChange:
_systemMuteDidChange:
_currentRouteHasVolumeControlDidChangeNotification:
_updateVolumeValueCache
_reloadVolumeDataWithReason:
_tearDownNotifications
observeValueForKeyPath:ofObject:change:context:
_updateCapabilitiesValueCache
_updateIsMutedValueCache
getVolume:forCategory:
_platformHasNativeMuteSupport
_volumeFromAVController
_postVolumeDidChange:
_postIsMutedDidChange:
forceEnableCECVolume
supportCoordinatedVolume
_postVolumeControlCapabilitiesDidChange:
_volumeDataIntialized
_volumeValue
_isMutedValue
_capabilitiesValue
_createRemoteAlertHandleIfNeeded
setActivatingForSiri:
activateWithContext:
initWithServiceName:viewControllerClassName:
dictionaryWithObject:forKey:
setUserInfo:
setXpcEndpoint:
newHandleWithDefinition:configurationContext:
remoteAlertHandleDidActivate:
remoteAlertHandleDidDeactivate:
remoteAlertHandle:didInvalidateWithError:
completion
setCompletion:
configurationData
setConfigurationData:
setRouteUID:
center
setCenter:
serviceType
setServiceType:
style
setStyle:
remoteAlertHandle
setRemoteAlertHandle:
_style
_completion
_configurationData
_center
_serviceType
_remoteAlertHandle
T@?,C,N,V_completion
T@"NSData",&,N,V_configurationData
T@"NSObject<OS_xpc_object>",&,N,V_endpoint
T@"NSString",C,N,V_routeUID
T@"NSString",C,N,V_center
TQ,N,V_serviceType
TI,N,V_style
T@"SBSRemoteAlertHandle",&,N,V_remoteAlertHandle
T@"NSString",C,N,V_bundleIdentifier
initWithConnection:queue:defaultReplyQueue:
_handleXPCMessage:
euid
_postNotification:
shouldWakeDeviceForRemoteControlCommands
mediaType
_wakeDevice:dismissScreenSaver:reason:
optionsData
identifierWithPid:
hostProcess
bundle
_relayXPCMessage:andReply:resultCallback:
verboseMRDMediaRemoteClientLogging
xpcMessage
setOutputDeviceDiscoveryMode:
setApplicationPickedRoutes:
_runAssertionName
messageHandler
processName
hardwareRemoteBehavior
routeDiscoveryCount
outputDeviceDiscoveryMode
setPairingHandler:
isActive
_source
_applicationPickedRoutes
_assertions
_relayingMessages
_entitlements
_subscribedWakingPlayerPaths
_isActive
_keepAlive
_hasRequestedLegacyNowPlayingInfo
_hasRequestedSupportedCommands
_hardwareRemoteBehavior
_routeDiscoveryMode
_outputDeviceDiscoveryMode
_messageHandler
_currentTaskAssertion
_processName
_routeDiscoveryCount
_remoteUIService
_pairingHandler
T@"<MRDXPCMessageHandling>",W,N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",W,N,V_delegate
T@"MRXPCConnection",R,N,V_connection
T@"NSData",R,N
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
T@"NSString",R,N,V_processName
TI,N,V_hardwareRemoteBehavior
TQ,R,N,V_routeDiscoveryCount
TI,N,V_routeDiscoveryMode
TI,N,V_outputDeviceDiscoveryMode
T@"MRDMediaRemoteUIService",&,N,V_remoteUIService
T@"MRDPairingHandler",&,N,V_pairingHandler
TB,R,N,V_isActive
TB,N,V_keepAlive
TB,N,V_hasRequestedLegacyNowPlayingInfo
TB,N,V_hasRequestedSupportedCommands
TQ,R,N,V_entitlements
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_uniqueIdentifier
_ioDevice
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
TQ,R,N,V_uniqueIdentifier
T^{__IOHIDUserDevice=},R,N,V_ioDevice
_fbsDisplayMonitorConfiguration
layoutMonitor:didUpdateDisplayLayout:withContext:
setTransitionHandler:
monitorWithConfiguration:
configurationForDefaultMainDisplayMonitor
scheduleLayoutChangeForReason:
displayBacklightLevel
setDisplayOn:
elements
setControlCenterForegrounded:
setLockScreenForegrounded:
T@"MRDDisplayMonitor",R,N
_layoutChangeScheduled
_displayOn
_lockScreenForegrounded
_controlCenterForegrounded
TB,N,V_displayOn
TB,N,V_lockScreenForegrounded
TB,N,V_controlCenterForegrounded
setDevice:
handleDidReceiveResetConnectionRequest
_maybeDeviceConnectionStatusChanged
handleIncomingMessage:type:destination:session:messageID:replyID:
_configurationFromDestination:session:
connectionHandler
removeMessageHandlerForType:
mrService
_messageHandlers
_destinationMessageHandlers
_serviceHandlerToken
_mrService
_connectionHandler
T@"IDSDevice",&,N
T@"NSString",R,N,V_deviceUID
T@"MRDIDSService",R,N,V_mrService
T@?,C,N,V_invalidationHandler
T@?,C,N,V_connectionHandler
_responseCallback
_cancelCallback
_inputType
T@"MRDAVRoute",R,N,V_route
Tq,R,N,V_inputType
setTarget:
forwarderWithXPCTarget:
target
_target
T@"<MRUIClientProtocol>",W,N,V_target
T@"<MRUIClientXPCProtocol>",W,N,V_target
_updateSuggestionCountIfNeeded
setUserDisplayPreferencesDidChangeCallback:
shouldConsiderSuggestions
suggestionPreferences
suggestionsDisabledInContext:
suggestionCount
setSuggestionCount:
_notifyDelegate
defaultRequest
setMaxResults:
performWithPreferences:completion:
setShouldConsiderSuggestions:
setSuggestionPreferences:
_shouldConsiderSuggestions
_suggestionPreferences
_suggestionCount
T@"MRMediaSuggestionPreferences",&,N,V_suggestionPreferences
TB,N,V_shouldConsiderSuggestions
Tq,V_suggestionCount
T@"<MRDLockScreenContentControllerDelegate>",W,N,V_delegate
errorWithDomain:code:userInfo:
optionsWithDictionary:
serviceWithDefaultShellEndpoint
openApplication:withOptions:completion:
processInfo
defaultWorkspace
applicationIsInstalled:
applicationInfoForApplication:completion:
handlers
_handlers
T@"NSMutableDictionary",R,V_handlers
remoteControlInterfaceID
_optionsDictionary
_copyWithZone:usingConcreteClass:
setCommand:
setOriginUID:
setSenderAppDisplayID:
setDestinationAppProcessID:
setRemoteControlInterfaceID:
setAppOptions:
setWithObjects:
mutableCopyWithZone:
originatedFromAccessory
originatedFromHID
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
TI,R,N,V_commandType
T@"NSString",R,N,V_senderAppDisplayID
TI,R,N,V_appOptions
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
avrcpCommand
TB,R,N,GisAVRCPCommand
setOptionsData:
TI,D,N
T@"NSData",C,D,N
T@"MRPlayerPath",C,D,N
T@"NSDate",C,D,N
T@"NSString",C,D,N
T@"NSString",C,N
Ti,N
_routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
sampleRate
_picked
_speakerRoute
_modelName
_MACAddress
_dictionary
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_modelName
T@"NSData",R,N,V_MACAddress
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
T@"NSDictionary",R,N,V_dictionary
_indexPathData
T@"NSData",R,N,V_indexPathData
supportSessionBasedLockScreenPlatter
initWithClientObject:
initWithDelegate:
T@,R,W,N,V_delegate
T@"MRDUIControllerConnection",R,N,V_connection
hasLockScreenControlsAssertion
hasScreenMirroringQuickControlsAssertion
xpcConnection
hasUIAssertions
initWithListenerEndpoint:
proxyWithObject:protocol:
remoteObjectProxyWithErrorHandler:
synchronousRemoteObjectProxyWithErrorHandler:
setHasLockScreenControlsAssertion:
_updateTransaction
synchronousServer
acquireQuickControlsAssertion
releaseQuickControlsAssertion
acquireScreenMirroringQuickControlsAssertion
releaseScreenMirroringQuickControlsAssertion
setHasScreenMirroringQuickControlsAssertion:
_hasLockScreenControlsAssertion
_hasScreenMirroringQuickControlsAssertion
_xpcConnection
T@"NSXPCConnection",R,N,V_xpcConnection
T@"<MRUIServerXPCProtocol>",R,N
TB,N,V_hasLockScreenControlsAssertion
TB,N,V_hasScreenMirroringQuickControlsAssertion
_deviceID
_token
_expirationDate
T@"NSString",R,N,V_deviceID
T@"NSString",R,N,V_token
T@"NSDate",R,N,V_expirationDate
sharedLocalDevice
requiresAuthorization
initWithRoutingContextUID:multipleBuiltInDevices:
initWithAVOutputDevice:sourceInfo:
_avOutputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
MRDSystemEndpointEntry
MRDAVSystemEndpointController
MRDRedirectionCacheEntry
MRDRemoteControlServer
MRDPhoneCallObserverDelegate
NSObject
MRDXPCMessageHandling
MRDDiagnosticCollecting
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDUISessionServer
MRUIServerClientObserver
MRLockScreenUIServerXPCProtocol
MRQuickControlsUIServerXPCProtocol
MRScreenMirroringQuickControlsUIServerXPCProtocol
MRUIContextServerXPCProtocol
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDStreamCapacityManager
MRDStreamCapacityManagerAdditions
MRDNowPlayingPlayerClient
MRDNowPlayingPlayerClientPlaybackState
MRDNowPlayingPlayerClientPlaybackStateSnapshot
MRDBonjourRemoteControlService
NSNetServiceDelegate
MRDAVHostedExternalDeviceClient
MRXPCConnectionMonitorDelegate
MRAVDistantExternalDeviceClientProtocol
MRDAVHostedExternalDevicePendingClientState
MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications
MRDIDSService
IDSServiceDelegate
MRDIDSServiceMessage
MRDNowPlayingDataSourceApplication
MRDNowPlayingDataSourceSession
MRDNowPlayingDataSource
MRDOriginForwarder
MRDOutputDeviceRoutingDataSource
MRDRapportRemoteControlService
MRDRapportRemoteControlServiceConnection
NSSecureCoding
NSCoding
MRDProximityController
MRNowPlayingControllerDelegate
MRDAVOutputContextManager
MRDPinPairingDialog_ATV
MRDIDSDiscoverySession
MRDAVReconnaissanceSession
MRDAVLocalDeviceCommitManager
MRAVClusterObserver
MRDBrowsableContentServer
MRDRemoteControlDiscoverySession
MRExternalDeviceTransportConnectionDelegate
MRDAVHostedDiscoverySession
MRAVDistantRoutingDiscoveryServiceProtocol
MRDAVHostedRoutingObserver
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MREndpointObserver
MRDAVHostedRoutingService
NSXPCListenerDelegate
MRDAVHostedDiscoverySessionDelegate
MRDAVHostedRoutingController
MRDExternalDeviceCredentialDatabase
MRDIDSRemoteControlService
MRProtocolClientConnectionDelegate
MRDIDSRemoteControlServiceDiscoveryChannel
MRDIDSRemoteControlServiceRemoteControlChannel
MRDIDSRemoteControlServiceRemoteControlChannels
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDPersonalDeviceController
MRDExternalDeviceHomeServer
MRDExternalDeviceHomeServerRecentlyPlayedEntry
MRDIDSTransport
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDIDSTransportConnection
MRDAVRemoteControlClusterOutputDevice
MRDPinPairingDialog
MRUIServerProtocol
MRUIClientProtocol
MRDUIControllerConnection
MRDIDSCompanionRemoteControlService
NSStreamDelegate
MRDIDSCompanionRemoteControlServiceConnection
MRDTransportExternalDevice
MRJSONTransportExternalDevice
MRHID
MRDNowPlayingPlaybackQueueServer
MRDDeviceInfoDataSource
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceObserver
MRDDeviceInfoDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDNowPlayingObserverState
MRDMediaServerAVRoutingDataSource
MRDPinPairingDialog_CFUN
MRDLockScreenController
MRDPersonalDeviceControllerDelegate
MRDLockScreenContentControllerDelegate
MRDLockScreenAssertion
MRDConnectionLifetimeController
MRDAVHostedExternalDevice
MRExpanseManagerObserver
MRDConnectionLifetimeControllerDataSource
MRDConnectionLifetimeControllerDelegate
MRAVDistantExternalDeviceServiceProtocol
MRDExternalDeviceRemoteServer
MRCryptoPairingSessionDelegate
MRDRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTextEditingServiceDelegate
MRDServerMessageProxy
MRDHostedRoutingController
MRDHostedExternalDeviceManagerDelegate
MRDHostedRoutingControllerAdditions
MRDNowPlayingServer
MRDLockScreenControllerDelegate
MRDElectedPlayerControllerDelegate
MRDProximityControllerDataSource
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDTaskAssertion
MRDAutoConnectionControllerReason
MRDAutoConnectionController
MRDElectedPlayerController
MRDAirPlayRemoteControlService
AVOutputContextCommunicationChannelDelegate
APReceiverMediaRemoteCommunicationChannelDelegate
MRDDiagnostic
MRDRemoteControlService
MRDAirPlayRemoteControlServiceDelegate
MRDBonjourRemoteControlServiceDelegate
MRDRapportRemoteControlServiceDelegate
MRDIDSCompanionRemoteControlServiceDelegate
MRDIDSRemoteControlServiceDelegate
MRDRemoteControlServiceAdditions
MRDUIClient
MRUIServerXPCProtocol
MRUIClientXPCProtocol
MRLockScreenUIClientXPCProtocol
MRQuickControlsUIClientXPCProtocol
MRScreenMirroringQuickControlsUIClientXPCProtocol
MRDUIServer
MRDPhoneCallObserver
CXCallObserverDelegate
MRDIdleTopologySimplifier
MRDIDSServerClientConnection
MRDSleepAssertion
MRDAVOutputContextExternalDevice
MRXPCConnectionMonitor
MRDAVRoutingServer
MRDAVSystemEndpointControllerDelegate
AVOutputDeviceAuthorizationSessionDelegate
MRDiOSSimulatorNowPlayingDataSource
MRDSleepObserver
MRDHostedExternalDeviceManager
MRDVirtualAudioInputServer
MRDPlaybackQueue
MRDPlaybackQueueArtworkCache
MRAdditions
MRDPlaybackQueueArtworkCacheSize
NSCopying
MRDMediaServerVolumeController
MRDMediaRemoteUIService
SBSRemoteAlertHandleObserver
MRDMediaRemoteClient
MRDVirtualTouchDevice
MRDDisplayMonitor
MRDIDSServiceConnection
MRDRouteAuthorizationRequest
MRDUIClientMessageForwarder
MRDUIClientBSMessageForwarder
MRDUIClientXPCMessageForwarder
MRDLockScreenContentController
MRDPairingHandler
MRDRemoteControlCommand
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDUIControllerProvider
MRDUIController
MRDXPCUIController
MRLockScreenUIControllable
MRUIControllable
MRQuickControlsUIControllable
MRScreenMirroringQuickControlsUIControllable
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDOutputDeviceRoute
MRDAVOutputDeviceRoute
@16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"NSString"
@"NSDate"
@24@0:8@16
@24@0:8q16
v40@0:8@16q24@32
v48@0:8@16q24@32@40
v48@0:8q16q24@32@40
v56@0:8q16q24q32@40@48
@40@0:8q16q24^@32
@32@0:8q16^@24
@24@0:8^@16
v48@0:8@16q24q32@40
v32@0:8@16@?24
B24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"MRDNowPlayingServer"
@"MRDHostedRoutingController"
@"NSMutableDictionary"
@"NSUserDefaults"
@"MSVPersistentTimer"
@"MROrigin"
@"<MRDAVSystemEndpointControllerDelegate>"
@"MRPlayerPath"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"MRDPhoneCallObserver"16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"MRDMediaRemoteClient"24
v24@0:8@"MRDDiagnostic"16
v40@0:8@16@24@?32
@32@0:8@16@24
B20@0:8I16
@40@0:8@16@24^@32
@56@0:8@16@24@32@40@?48
@"NSMutableSet"
@"MRDPhoneCallObserver"
@"MSVSystemDialog"
@24@0:8^{_NSZone=}16
v28@0:8f16^@20
v32@0:8q16^@24
v28@0:8B16^@20
f16@0:8
I16@0:8
@"MRDAVRoutingDataSource"
I24@0:8@16
v28@0:8I16@20
@20@0:8I16
@"NSMutableArray"
@28@0:8@16I24
B32@0:8@16@24
B36@0:8@16@24I32
@?24@0:8@16
v20@0:8I16
@"MRDAVRoute"
v24@0:8@"MRDUIClient"16
v24@0:8@?16
v24@0:8@?<v@?>16
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSString"16@?<v@?@"NSString">24
@"MRUISessionController"
v24@0:8^{__IOHIDEvent=}16
v24@0:8Q16
v24@0:8I16I20
^{__IOHIDEventSystemClient=}
@28@0:8@16i24
i16@0:8
v20@0:8B16
d16@0:8
@20@0:8B16
@44@0:8@16I24@28^@36
v28@0:8@16B24
@"NSArray"
@"NSData"
@"MRDPlaybackQueue"
@"MRDNowPlayingPlayerClientPlaybackState"
@"MROSTransaction"
@"MRPlaybackQueueSubscriptionController"
@"<MRDNowPlayingPlayerClientDelegate>"
@"MRPlayer"
@28@0:8I16@20
q24@0:8@16
v40@0:8@16@24@32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
@"CUBluetoothClient"
@"NSNetService"
@"<MRDBonjourRemoteControlServiceDelegate>"
v24@0:8@"MRXPCConnectionMonitor"16
v36@0:8@16I24@28
v36@0:8@16f24@28
v28@0:8I16@"NSError"20
v24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v24@0:8@"MRAVEndpoint"16
v36@0:8@"MRAVEndpoint"16I24@"MRAVOutputDevice"28
v36@0:8@"MRAVEndpoint"16f24@"MRAVOutputDevice"28
v32@0:8@"MRAVEndpoint"16@"MRAVOutputDevice"24
v32@0:8@"NSArray"16@"MRAVRoutingDiscoverySessionConfiguration"24
@"NSXPCConnection"
@"MRDAVHostedExternalDevicePendingClientState"
@"MRXPCConnectionMonitor"
@"MRDMediaRemoteClient"
@"NSError"
@"MRAVDistantEndpoint"
@"NSNumber"
@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications"
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@32@0:8@16@?24
@24@0:8@?16
B80@0:8@16@24@32@40@48@56q64@?72
B88@0:8@16@24@32@40@48@56q64@72@?80
@"IDSService"
@48@0:8@16@24@32@40
B32@0:8@16q24
@"IDSDevice"
@"MRDIDSService"
@36@0:8i16@20@28
@"NSSet"
@36@0:8@16@24B32
@"NSHashTable"
@"NSDictionary"
@"MRClient"
@"AVOutputDeviceDiscoverySession"
@40@0:8@16@24@32
@"<MRDRapportRemoteControlServiceDelegate>"
@"MRCompanionLinkClient"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"MRRapportTransportConnection"
@"<NSObject>"
v32@0:8@16I24I28
v32@0:8@"MRNowPlayingController"16@"MRNowPlayingPlayerResponse"24
v32@0:8@"MRNowPlayingController"16I24I28
v40@0:8@"MRNowPlayingController"16@"MRPlaybackQueue"24@"MRPlaybackQueue"32
v32@0:8@"MRNowPlayingController"16@"NSArray"24
v40@0:8@"MRNowPlayingController"16@"NSArray"24@"NSArray"32
v32@0:8@"MRNowPlayingController"16@"NSDate"24
v40@0:8@"MRNowPlayingController"16@"MRClient"24@"MRClient"32
v32@0:8@"MRNowPlayingController"16@"MRPlayerPath"24
v24@0:8@"MRNowPlayingController"16
v32@0:8@"MRNowPlayingController"16@"NSError"24
@"<MRDProximityControllerDataSource>"
@"MRDDisplayMonitor"
@28@0:8@16B24
v32@0:8d16@?24
@?16@0:8
@"NSTimer"
v32@0:8@16Q24
v28@0:8@16I24
v32@0:8@"MRAVClusterController"16Q24
v28@0:8@"MRAVClusterController"16I24
v32@0:8@?16@24
v48@0:8@16{?=^QQ}24@40
@"MRDBrowsableContentAPICoordinator"
v32@0:8@"MRExternalDeviceTransportConnection"16@"NSError"24
v32@0:8@"MRExternalDeviceTransportConnection"16@"NSData"24
@"MRAVOutputDevice"
@"MRDeviceInfo"
@"MRAVConcreteRoutingDiscoverySession"
@"MRDIDSDiscoverySession"
@"MRAirPlayTransportConnection"
v32@0:8I16B20@?24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?I@"NSError">16
v32@0:8I16B20@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v36@0:8@16@24I32
v32@0:8@"MRDHostedRoutingController"16@"NSArray"24
v36@0:8@"MRDHostedRoutingController"16@"NSArray"24I32
@"<MRDAVHostedDiscoverySessionDelegate>"
v32@0:8@"MREmulatedGameController"16@"_MRGameControllerPropertiesProtobuf"24
v32@0:8@"MRAVEndpoint"16@"NSError"24
Q24@0:8@16
@24@0:8Q16
Q24@0:8Q16
v28@0:8{_MRHIDButtonEvent=IIB}16
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRAVEndpoint"
@"MRPasscodeCredentials"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"MRDAVHostedDiscoverySession"16
@"NSXPCListener"
@32@0:8@16Q24
^{sqlite3=}
v32@0:8@"MRProtocolClientConnection"16@"MRProtocolMessage"24
v32@0:8@"MRProtocolClientConnection"16@"NSError"24
@52@0:8@16@24@32@40I48
v48@0:8@16@24@?32@?40
@"<MRDIDSRemoteControlServiceDelegate>"
@"MRDIDSTransportConnection"
@"MRDIDSServerClientConnection"
@"MRExternalDeviceTransportConnection"
v24@0:8d16
@"<MRDPersonalDeviceControllerDelegate>"
@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"
@"MRContentItem"
@"MRDIDSServiceConnection"
@40@0:8Q16@24@32
@32@0:8Q16@24
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v64@0:8@16@24Q32Q40@48@?56
v64@0:8@"MRTransaction"16@"NSArray"24Q32Q40@"NSObject<OS_dispatch_queue>"48@?<v@?>56
v32@0:8@"MRTransaction"16Q24
Q24@0:8@"MRTransaction"16
Q32@0:8@16@24
q24@0:8q16
@"<MRDPinPairingDialogDelegate>"
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"BSServiceConnection<BSServiceConnectionClient>"
@"MRDUIClientMessageForwarder"
v32@0:8@"NSStream"16Q24
v44@0:8@16@24I32@?36
@"MSVTimer"
@"MRAVRoutingDiscoverySessionConfiguration"
@"<MRDIDSCompanionRemoteControlServiceDelegate>"
@"NSRunLoop"
v40@0:8I16B20@24@32
v36@0:8I16@20@28
v40@0:8d16@?24@32
v44@0:8f16@20@28@?36
v48@0:8@16@24@32@?40
v80@0:8@16@24@32@40@48@56@64@?72
v32@0:8q16@24
v40@0:8^v16^v24@?32
v32@0:8I16I20@24
v28@0:8f16@20
v44@0:8I16@20@28@?36
@"MRExternalClientConnection"
@"MRExternalDeviceTransport"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16@0:8
@48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
v56@0:8@16@24@32@40@?48
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{MGNotificationTokenStruct=}
@"<MRDDeviceInfoDataSourceDelegate>"
@"CUPairingManager"
v24@0:8@"MRDNowPlayingDataSource"16
v32@0:8@"MRDDeviceInfoDataSource"16@"MRDeviceInfo"24
v20@0:8f16
@20@0:8i16
v20@0:8i16
@"MRDNowPlayingClient"
@"MRMutableApplicationActivity"
@"MRDNowPlayingDataSource"
@"MRDDeviceInfoDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDAVRouteExtendedInfo"
v28@0:8B16q20
v32@0:8@16:24
@"<MRDNowPlayingStateObserverDelegate>"
@"MRPlaybackQueue"
@"MRDOutputDeviceRoutingDataSource"
v24@0:8@"MRDPersonalDeviceController"16
v24@0:8@"MRDLockScreenContentController"16
B24@0:8^@16
@"MRDNowPlayingServerResult"
@"<MRDLockScreenControllerDelegate>"
@"<MRLockScreenUIControllable>"
@"MRDLockScreenAssertion"
@"MRDPersonalDeviceController"
@"MRDLockScreenContentController"
@"SBSLockScreenContentAssertion"
@"<MRDConnectionLifetimeControllerDataSource>"
@"<MRDConnectionLifetimeControllerDelegate>"
v24@0:8@"MRExpanseManager"16
@"MROrigin"16@0:8
v24@0:8@"MROrigin"16
v36@0:8f16@20@?28
v72@0:8@16@24@32@40@48@56@?64
v28@0:8I16I20B24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v28@0:8I16@"NSDictionary"20
v24@0:8@"NSError"16
v32@0:8@"NSString"16@?<v@?f@"NSError">24
v36@0:8f16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?I@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v72@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSArray"48@"NSArray"56@?<v@?@"NSError">64
v32@0:8@"NSArray"16@?<v@?@"NSString"@"NSError">24
v32@0:8d16@?<v@?@"NSError">24
v28@0:8I16@"MRAVRoutingDiscoverySessionConfiguration"20
@"NSArray"16@0:8
v24@0:8@"NSArray"16
v36@0:8f16@20@28
@"MRExternalDevice"
@"MRExternalOutputContextDataSource"
@"MRAVRoutingDiscoverySession"
@"MRDConnectionLifetimeController"
v40@0:8@16d24@?32
v32@0:8@"MRCryptoPairingSession"16@"NSData"24
v32@0:8@"MRCryptoPairingSession"16@"NSString"24
v24@0:8@"MRCryptoPairingSession"16
v40@0:8@"MRCryptoPairingSession"16d24@?<v@?@"NSString">32
v32@0:8@"MRCryptoPairingSession"16@"NSError"24
v32@0:8@"MRDRemoteControlService"16@"MRDExternalDeviceServerClientConnection"24
v40@0:8@16Q24@32
v40@0:8@"MRDExternalDeviceServerClientConnection"16Q24@"_MRGameControllerPropertiesProtobuf"32
v32@0:8@"MRDNowPlayingStateObserver"16@"MRPlayerPath"24
v36@0:8@"MRDNowPlayingStateObserver"16I24@"MRPlayerPath"28
v40@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"MRPlayerPath"32
v40@0:8@"MRDNowPlayingStateObserver"16@"MRDNowPlayingObserverState"24@"MRPlayerPath"32
v36@0:8@16@24B32
v32@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24
v36@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24B32
v32@0:8@"MRDSleepObserver"16@?<v@?>24
v24@0:8@"MRDSleepObserver"16
v48@0:8@"MRDTextEditingService"16@"NSString"24@"MRTextEditingAttributes"32@"RTIDataPayload"40
v40@0:8@"MRDTextEditingService"16@"NSString"24@"RTIDataPayload"32
v40@0:8@"MRDTextEditingService"16@"MRTextEditingAttributes"24@"RTIDataPayload"32
v24@0:8@"MRDTextEditingService"16
v32@0:8@"MRDTextEditingService"16@"NSString"24
B32@0:8@16^@24
v32@0:8q16@?24
v40@0:8@16q24@?32
B32@0:8q16@24
v40@0:8Q16@24@32
v24@0:8B16B20
v36@0:8{_MRHIDButtonEvent=IIB}16@28
v64@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16Q48@56
B40@0:8@16@24@32
B48@0:8@16@24@32@40
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"MROutputContextController"
@"MRDRemoteControlService"
@"Protocol"
v24@0:8@"MRDHostedExternalDeviceManager"16
@32@0:8@16^B24
@40@0:8@16@24Q32
@"MRDHostedExternalDeviceManager"
@"MRDRemoteControlDiscoverySession"
v28@0:8@"MRDLockScreenController"16B24
v32@0:8@"MRDLockScreenController"16@"MRPlayerPath"24
v56@0:8@16@24q32q40@48
v56@0:8@"MRDElectedPlayerController"16@"MRPlayerPath"24q32q40@"NSString"48
v40@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24@"MRDNowPlayingPlayerClient"32
v32@0:8@"MRDNowPlayingClient"16@"MRClient"24
v32@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24
v28@0:8@"MRDNowPlayingClient"16B24
v28@0:8@16f24
v40@0:8@"MRDNowPlayingOriginClient"16@"MRDeviceInfo"24@"MRDeviceInfo"32
v36@0:8@"MRDNowPlayingOriginClient"16@"MRPlayerPath"24I32
v32@0:8@"MRDNowPlayingOriginClient"16@"MRApplicationActivity"24
v32@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24
v28@0:8@"MRDNowPlayingOriginClient"16I24
v28@0:8@"MRDNowPlayingOriginClient"16f24
v28@0:8@"MRDNowPlayingOriginClient"16B24
v32@0:8@"MRDNowPlayingOriginClient"16@"NSArray"24
v24@0:8@"MRDNowPlayingOriginClient"16
v32@0:8@"MRDNowPlayingPlayerClient"16@"MRPlayer"24
v28@0:8@"MRDNowPlayingPlayerClient"16B24
v28@0:8@"MRDNowPlayingPlayerClient"16I24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSData"24
v36@0:8@"MRDNowPlayingPlayerClient"16@"MRPlaybackQueue"24B32
v32@0:8@"MRDNowPlayingPlayerClient"16Q24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSArray"24
v36@0:8@16I24@?28
v36@0:8@16f24@?28
v36@0:8@16B24@?28
v40@0:8@16B24B28@?32
v44@0:8B16d20@28@?36
v36@0:8B16@20@?28
v36@0:8I16@20@?28
v44@0:8@16B24@28@?36
v40@0:8Q16@24@?32
v40@0:8I16B20@24@?32
v56@0:8@16q24q32@40@?48
v28@0:8B16@?20
@"MRDNowPlayingPlaybackQueueServer"
@"MRDElectedPlayerController"
@"MRDLockScreenController"
@"MRDProximityController"
@"MRDNowPlayingOriginClient"
@"MRDNowPlayingPlayerClient"
@"<MRDNowPlayingClientDelegate>"
@"BKSApplicationStateMonitor"
v24@0:8@"MRDMediaRemoteClient"16
v36@0:8@"MRDVirtualAudioInputServer"16I24@"MRDVirtualAudioInputServerDevice"28
v32@0:8@"MRDPhoneCallController"16@"MRDRemoteControlCommand"24
@"NSObject<OS_xpc_object>"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDUIServer"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"NSObject<OS_dispatch_source>"
@"FBSDisplayLayoutMonitor"
@44@0:8q16i24@28@36
v48@0:8@16@?24@32@?40
v32@0:8@16q24
q32@0:8@16q24
@40@0:8@16q24^@32
@"<MRDElectedPlayerControllerDelegate>"
v24@0:8@"AVOutputContext"16
v40@0:8@"AVOutputContext"16@"NSData"24@"AVOutputContextCommunicationChannel"32
v32@0:8@"AVOutputContext"16@"AVOutputContextCommunicationChannel"24
v32@0:8@"NSData"16@"APReceiverMediaRemoteCommunicationChannel"24
v24@0:8@"APReceiverMediaRemoteCommunicationChannel"16
v40@0:8@16Q24@?32
v32@0:8Q16@24
@"AVOutputContext"
@"NSMapTable"
@"<MRDAirPlayRemoteControlServiceDelegate>"
v44@0:8@16@24@32B40
v44@0:8@16@24@32I40
v48@0:8@16@24@32I40B44
@"MRApplicationActivity"
@"MROutputContextDataSource"
@"_MRAVAirPlaySecuritySettingsProtobuf"
v32@0:8@"MRDAirPlayRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDBonjourRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDRapportRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDExternalDeviceServerClientConnection"32@0:8@"MRDIDSCompanionRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDExternalDeviceServerClientConnection"32@0:8@"MRDIDSRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDAirPlayRemoteControlService"
@"<MRDRemoteControlServiceDelegate>"
@"MRDBonjourRemoteControlService"
@"MRDRapportRemoteControlService"
@"MRDIDSCompanionRemoteControlService"
@"MRDIDSRemoteControlService"
@"NSXPCListenerEndpoint"
@"MRDUISessionServer"
@"MRDServerMessageProxy"
v32@0:8@"CXCallObserver"16@"CXCall"24
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
d24@0:8@16
@32@0:8@16d24
v64@0:8Q16@24d32@40@?48@?56
v56@0:8@16d24@32@?40@?48
@32@0:8@16^@24
@"MRDOriginForwarder"
@"MRAVOutputContext"
@"<MRXPCConnectionMonitorDelegate>"
v40@0:8@16@24q32
v40@0:8@"MRDAVSystemEndpointController"16@"MRUpdateActiveSystemEndpointRequest"24q32
v32@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24
B40@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24@"NSString"32
@64@0:8@16@24@32@40@48@56
v48@0:8@16q24@32@?40
v28@0:8@16i24
@32@0:8@16q24
v28@0:8i16@20
v36@0:8@16B24@28
@"MRDAutoConnectionController"
@"MRDExternalDeviceHomeServer"
@"NSOperationQueue"
@"MRDAVLocalDeviceCommitManager"
@"MRDIdleTopologySimplifier"
@"MRDAVHostedRoutingService"
@"MRDAVSystemEndpointController"
^{IONotificationPort=}16@0:8
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDHostedExternalDeviceManagerDelegate>"
@"<MRDVirtualAudioInputServerDelegate>"
@"MRDPlaybackQueueArtworkCache"
@32@0:8d16d24
v48@0:8@16@24@32^v40
v24@0:8@"SBSRemoteAlertHandle"16
v32@0:8@"SBSRemoteAlertHandle"16@"NSError"24
@36@0:8@16I24@28
@"SBSRemoteAlertHandle"
B24@0:8Q16
B40@0:8q16@24d32
v32@0:8B16B20@24
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRXPCConnection"
@"MRDMediaRemoteUIService"
@"MRDPairingHandler"
B48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
^{__IOHIDUserDevice=}16@0:8
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
B64@0:8@16@24@32@40@48q56
B72@0:8@16@24@32@40@48q56@?64
v48@0:8@?16@24@32@40
@48@0:8@16q24@?32@?40
@"<MRUIClientProtocol>"
@"<MRUIClientXPCProtocol>"
@"<MRDLockScreenContentControllerDelegate>"
@"MRMediaSuggestionPreferences"
@52@0:8I16@20@28@36@44
@24@0:8^{__CFString=}16
@32@0:8^{_NSZone=}16#24
v32@0:8@16^{__CFString=}24
@"MRDUIControllerConnection"
@"AVOutputDevice"
[SystemEndpointController] Reevaluating %{public}@ActiveEndpoint because %{public}@
[SystemEndpointController] %{public}@
[SystemEndpointController] %@SystemEndpoint remains <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
[SystemEndpointController] Updating activeEndpointInfo %@
[SystemEndpointController] Requesting to move ASE to deviceUID: %{public}@ because the old ASE changed groups
[SystemEndpointController] ASE changed groups, but no other devices found in old group
Yielding AVRCP command to callservicesd
Caching resolved player path %{public}@ for context %{public}@.
No cache entry found.
Sending cachable command to player path %{public}@ for context %{public}@.
Got a cache creating command from assistant, context: %{public}@.
Performing early return of successful status for backwards compatibility.
Expiring player path for context %{public}@.
Got a cacheable command from assistant, context: %{public}@.
Adding command to assistant cache, context: %{public}@.
Redirecting to cached path: %{public}@
No assistant cache active, context: %{public}@.
Command <%{public}@> ignored because of device state
Broadcasting command <%{public}@> to client: <%@>
Broadcast command %{public}@ timedout after %lf seconds
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %{public}@: %{public}@
Destroying remoteUIService for client: %@
Error for fade out state. Status = %u.
Requesting fade in on next playback for client %{private}@
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
Command ignored because of device state: %{public}@
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Set AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute for command %{public}@
Command <%{public}@> ignored because of pre-processing error %{public}@.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ failed to reply to command (SendCommandErr = %@)
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Sending previously queued command %{public}@ to client %{public}@.
Removing queued commands for %{public}@ %{public}@
Removing queued commands because %{public}@ %@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because of active SharePlay activity.
Ignoring command because a phone call or FaceTime is active.
Purging command: %{public}@
[MRDUISessionServer] %ld clients holding quick controls assertion.
[MRDUISessionServer] %ld clients holding lock screen controls assertion.
[MRDUISessionServer] %ld clients holding screen mirror controls assertion.
Request: %{public}@<%{public}@> for %{public}@
Request: %{public}@<%{public}@>
Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds
Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds
Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned in %.4lf seconds
Request: %{public}@<%{public}@> for %{public}@ because %{public}@
Request: %{public}@<%{public}@> because %{public}@
Update: %{public}@<%{public}@> %@
Set: %{public}@ setting %{public}@ from <%@> to <%@>
Set: %{public}@ setting %{public}@ to <%@>
[MRDNowPlayingPlayerClient] Taking hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] Removing hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] isPictureInPictureEnabled changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] PlaybackState changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] isPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] CanBeNowPlayingPlayer changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionType changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] MXSessionIDs changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionID changed from %u to %u for %{public}@
[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@
[MRDRemoteControlNetworkService] Starting network service: %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Stopping network service %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Did accept connection with service: %{public}@ using type: %{public}@ input: %{public}@ output: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement success with service: %{public}@ using type: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement failed with service: %{public}@ error: %{public}@
[MRDRemoteControlNetworkService] Retrying after 30s...
[MRDRemoteControlNetworkService] Updating txtData because deviceInfo changed...
[MRDRemoteControlNetworkService] Updating txtData because device restrictions changed...
[MRDRemoteControlNetworkService] Updating txtData: %{public}@
[MRDRemoteControlNetworkService] Stopping bonjour service %{public}@
[MRDRemoteControlNetworkService] Initializing bonjour service for type %{public}@
Configuring remote control network service with includesPeerToPeer = %s
[HostedExternalDeviceClient] Caching connectionState %@ %@ for %@
[HostedExternalDeviceClient] Caching deviceName %@ for %@
[HostedExternalDeviceClient] Caching customData %@ %@ for %@
[HostedExternalDeviceClient] Caching endpoint %@ for %@
[HostedExternalDeviceClient] Caching volumeCapabilities %@ outputDevice %@ for %@
[HostedExternalDeviceClient] Caching volume %lf outputDevice %@ for %@
[HostedExternalDeviceClient] Caching didAddOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didChangeOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didRemoveOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching discoverySessionOutputDevicesChanged %@ configuration %@ for %@
[HostedExternalDeviceClient] Restoring state %@ for %@
[MRDIDSService] %@ Message Sent<%lu>: idsDestination=%@ device=%@:%@ data=%@ type=%@ destination=%@ session=%@
[MRDIDSService] %@ Error %@ sending message
[MRDIDSService] %@ Message received<%@>: data=%@ device=%@:%@ type=%@ destination=%@ session=%@ replyID=%@
[MRDOriginForwarder] %@ forwarding command
[MRDOriginForwarder] %@ forwarding playbackQueueRequest
[MRDOriginForwarder] %@ forwarding playbackSessionRequest
[MRDOriginForwarder] %@ forwarding playbackSessionMigrationRequest
[MRDOriginForwarder] %@ Initializing OriginForwarder
[MRDOriginForwarder] %@ End Initializing OriginForwarder
[MRDOriginForwarder] %@ forwarding %@
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from system screen and system music contexts: %{public}@ %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[MRDRapportRemoteControlServiceConnection] Connecting remoteControlChannel to <%@->%@/%@>...
[MRDRapportRemoteControlServiceConnection] Disconnecting remoteControlChannel from <%@->%@/%@>...
[ProximityController] lockscreen: %@, controlcenter: %@
[ProximityController] Removing all nearby devices because screen off.
[MRDAVOutputContextManager] Returning active outputContext %@ with devices: %@ for: %@
[MRDAVOutputContextManager] Returning reserved outputContext %@ for: %@
[MRDAVOutputContextManager] Reusing inactive outputContext %@ for: %@ (%@)
[MRDAVOutputContextManager] Created new outputContext %@ for: %@
[MRDAVOutputContextManager] Failed to create new outputContext for: %@
[MRDAVOutputContextManager] Re-building output context state in response to mediaserverd death
[MRDAVOutputContextManager] Attempted to process output context with nil contextID: %{public}@
[MRDAVOutputContextManager] OutputContext became active %@ with: %@
[MRDAVOutputContextManager] OutputContext became active %@ with local: %@
[MRDAVOutputContextManager] OutputContext became inactive %@
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
[LocalDeviceCommitManager] Skipping delayed initial commit because an AirPlay session is active
[LocalDeviceCommitManager] Starting nowplaying session for client: %@
[LocalDeviceCommitManager] Delaying start completion because a stop operation is in progress
[LocalDeviceCommitManager] Stopping nowplaying session for client: %@
[LocalDeviceCommitManager] Topology change involving local device began with identifier: %@
[LocalDeviceCommitManager] Topology change involving local device finished with identifier: %@
[LocalDeviceCommitManager] <%@> Skipping commit of local device because device requires command redirection
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a nowplaying session is active
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a topology change is in progress
[LocalDeviceCommitManager] <%@> Enqueueing completion because there is an ongoing commit request
[LocalDeviceCommitManager] Timed out waiting to commit local device with reason: %@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[RemoteControlDiscoverySession] Applied %@ sourced values from outputDevice %@:%@
[RemoteControlDiscoverySession] Added Fields: %{public}@
[RemoteControlDiscoverySession] Removed Fields: %{public}@
[RemoteControlDiscoverySession] Updated Values: %{public}@
[HostedDiscoverySession] Caching outputDevices %@ for %@
[HostedDiscoverySession] Caching endpoints %@ for %@
[HostedDiscoverySession] Restoring outputDevices %@ for %@
[HostedDiscoverySession] Restoring endpoints %@ for %@
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
Failed to make endpoint due to no qualified group leader in devices: %{public}@
%{public}@ - Endpoints changed
%{public}@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDIDSRemoteControlService] Removing DiscoveryChannel for client %@ with error %@
[MRDIDSRemoteControlService] Created new DiscoveryChannel %@ for device=%@
[MRDIDSRemoteControlService] Created new RemoteControlChannel %@ for device=%@ destination=%@ session=%@ with options=%u
[MRDPersonalDeviceController] Restoring personal device state for devices %@. Remaining time %f.
[MRDPersonalDeviceController] Recalculating state for reason: %@
[MRDPersonalDeviceController] New personal device %@ recently attached.
[MRDPersonalDeviceController] Timeout reached. Personal devices %@ are now stale.
Attempted to enqueue disallowed background task %@
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %ld
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ %@ sending client %@ subscribed packets %@
[MRTransactionServer] %@ received ack
[MRTransactionServer] %@ sending client %@ subscribed packets %@
Cluster requires primary but none was found. Members: %{public}@
[MRUIControllerConnection] <%p> Initializing.
[MRUIControllerConnection] <%p> Dealloc.
[MRUIControllerConnection] <%p> Creating service connection.
[MRUIControllerConnection] <%p> BSServiceConnection invalidate.
[MRUIControllerConnection] <%p> BSServiceConnection interrupt. Re-activating.
[MRUIControllerConnection] <%p> BSServiceConnection activated.
[MRUIControllerConnection] <%p> No endpoint found. Please check that MediaRemoteUI is installed and registered with launchd.
[IDSCompanionRemoteControlService] Connecting discoveryChannel to <%@> for reason <%@>...
[IDSCompanionRemoteControlService] No device avaiable to connect discoveryChannel to <%@> for reason <%@>
[IDSCompanionRemoteControlService] Connecting remoteControlChannel to <%@-%@>...
[IDSCompanionRemoteControlService] Disconnecting remoteControlChannel from %@-%@...
WHAPRO: ConnectionState for device %{public}@ change from %{public}@ to %@ in %{public}f seconds
<%{public}@> Exiting connection attempt due to disconnection request for device %@{public}. %{public}@
<%{public}@> Failed to initialize IO streams for device: %{public}@. %{public}@
<%{public}@> Error loading device info for device %{public}@. %{public}@
<%{public}@> Failed to register custom origin for device %{public}@. %{public}@
<%{public}@> Failed to re-register custom origin for device %{public}@. %{public}@
<%{public}@> Failed to sync client state for device %{public}@. %{public}@
<%{public}@> Exiting connection attempt due to disconnection request for %@{public}. %{public}@
<%{public}@> Connection to: %@ (%{public}@) from client: %{public}@ isRetry: %{BOOL}u allowAuth: %{BOOL}u reason: %{public}@ result: %{public}@ in: %.2f
<%{public}@> Connection requested to device %{public}@...
<%{public}@> Connect called for device %{public}@ with authentication prompt option set when it wasn't set before. Forcing reconnect on failure...
<%{public}@> Attempting to connect for device %{public}@ that we are already %{public}@ to. Ignoring request...
<%{public}@> Connecting to device %{public}@...
Device disconnect called with error: %{public}@ for external device: %{public}@
Attempting to reconnect to external device %{public}@ (retry %llu out of %llu)
Not attempting reconnect of external device %{public}@ (error = %{public}@, recovery behavior = %{public}s, attempt count = %llu)
Connection error while sending custom data message. %{public}@
Connection error while sending ping message for device %{public}@. %{public}@
Error setting volume %@
Error getting volume %@
Error getting volume control capablities %@
Error setting listening mode %@
Error removing from parent group %@
Unknown message type=%ld identifier=%@ replyIdentifier=%@ attempting to be handled for device %{public}@
<%{public}@> InitializeConnection for device %{public}@ with options %{public}@
<%{public}@> InitializeConnection for device %{public}@ took %f seconds
<%{public}@> LoadDeviceInfo for device %{public}@...
<%{public}@> LoadDeviceInfo for device %{public}@ took %f seconds
<%{public}@> RegisterCustomOrigin %u %{public}@ for device %{public}@...
<%{public}@> RegisterCustomOrigin for device %{public}@ took %f seconds
<%{public}@> ReRegisterCustomOrigin %ld %{public}@ for device %{public}@...
<%{public}@> ReRegisterCustomOrigin for device %{public}@ took %f seconds
<%{public}@> SyncClientState for device %{public}@...
<%{public}@> WHAPRO: SyncClientState for device %{public}@ took %f seconds
Connection error while sending begin lyrics event message. %{public}@
<%{public}@> Calling pairingCallback
Calling Client Registered Pairing Callback
Calling Client Registered Name Callback with %@
Calling Client Registered pairing allowed Callback with %@
Calling Client Registered custom data Callback
<%{public}@> Volume did change to %lf for outputDevice: <%{public}@>
Received command %{public}@ for path %{public}@ for device %{public}@
unable to get an output device identifier, device will not be added to protobuf's grouped devices: %{public}@
Warning: Unknown device network ID
Failed to archive device info
Failed to write device info file
Failed to unarchive device info data
[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:
[MRDNowPlayingOriginClient] Application Activity %{public}@ already set
[MRDNowPlayingOriginClient] Removing nowPlayingClient %{public}@ for %{public}@
[MRDNowPlayingOriginClient] _reevaluateStateWithReason %@
[MRDNowPlayingOriginClient] ActiveNowPlayingClient changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Taking activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] Removing activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] ActiveNowPlayingPlayersClients changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Creating nowPlayingClient for %{public}@
[MRDNowPlayingStateObserver] Registering for Now Playing Updates
[MRDNowPlayingStateObserver] Unregistering for Now Playing Updates
[MRDNowPlayingStateObserver] Registering for volume control updates
[MRDNowPlayingStateObserver] Unregistering for volume control updates
[MRDNowPlayingStateObserver] Begin Coalescing for %@ for %lf seconds
[MRDNowPlayingStateObserver] End Coalescing %@ for %@
[MRDNowPlayingStateObserver] Removing item %@ item from contentItems because playbackQueue contains item for %@
[MRDNowPlayingStateObserver] Updating playbackQueue %@for %@
[MRDNowPlayingStateObserver] Setting playbackQueue %@ for %@
[MRDNowPlayingStateObserver] Merging item %@ into playbackQueue for %@
[MRDNowPlayingStateObserver] Merging item %@ into contentItems for %@
[MRDNowPlayingStateObserver] Adding contentItems %@ for %@
[MRDNowPlayingStateObserver] Setting contentItems %@ for %@
[MRDNowPlayingStateObserver] Adding items %@ into contentItemArtworkUpdates for %@
[MRDNowPlayingStateObserver] Setting items %@ into contentItemArtworkUpdates for %@
[MRDNowPlayingStateObserver] Updating supportedCommands %@ for %@
[MRDNowPlayingStateObserver] Setting supportedCommands %@ for %@
[MRDNowPlayingStateObserver] Updating playerProperties %@ for %@
[MRDNowPlayingStateObserver] Setting playerProperties %@ for %@
[MRDNowPlayingStateObserver] Updating playbackState %@ for %@
[MRDNowPlayingStateObserver] Setting playbackState %@ for %@
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %li for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
[MRDLockScreenController] Setting playerPath from %{public}@ to %{public}@
[MRDLockScreenController] Deferring setting playerPath from %{public}@ to %{public}@ because changeType is <%{public}@> and lock screen is <%{public}@>
[MRDLockScreenController] Restoring defered playerPath from %{public}@ to electedPlayerPath %{public}@
[MRDLockScreenController] Reevaluating shouldShowLockScreen for reason %@
[MRDLockScreenController] Delaying deactivation of lockScreen
[MRDLockScreenController] LockScreen now showing empty controls. Will be dismissed when lock screen is no longer visible
[MRDLockScreenController] Activating lockScreenAssertion
[MRDLockScreenController] Deactivating lockScreenAssertion
[MRDLockScreenController] lockScreenAssertion error %{public}@
[MRDCLC] <%p> Initializing for origin-%@-%ld.
[MRDCLC] <%p> Deallocating.
[MRDCLC] <%p> Re-evaluate for origin-%@-%ld because %@.
[MRDCLC] <%p> Setting timer to disconnect origin-%@-%ld in %.2lf seconds.
[MRDCLC] <%p> Disconnecting origin-%@-%ld.
[MRDCLC] <%p> Will maintain connection for origin-%@-%ld because %@.
[MRDCLC] <%p> Pause pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Cancel pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Scheduling playback timer for %.2lf seconds.
[MRDCLC] <%p> Cancelling playback timer.
[MRDAVHostedExternalDevice] %{public}@ is tombstoned, rejecting new XPC connection %{public}@
[MRDAVHostedExternalDevice] %{public}@ is accepting new XPC connection %{public}@ %@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following registered callbacks on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following notifications on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is subscribing to the following player paths on %{public}@: %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Client %{public}@ is requesting to connect to external device using hosted endpoint %{public}@ with options %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Already connected to external device
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to disconnect from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to unpair from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to set output device volume to %f using output device %{public}@ on hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to modify hosted endpoint %{public}@ (adding=%{public}@, removing=%{public}@,  setting=%{public}@,)
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to create hosted endpoint %{public}@ with output devices: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to send %llu bytes of custom data with name %{public}@ using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] [Client %{public}@ is requesting to ping external device with timeout %f using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV join.
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV leave.
[MRDAVHostedExternalDevice] %{public}@ Checking for match of endpoint: %{public}@ and active TV: %{public}@
[MRDAVHostedExternalDevice] %{public}@ maintaing no localRoute for %{public}@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ removing localRoute for %@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ adding localRoute for %@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ connection state did change to %{public}@ with error %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ device name did change to %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did receive %llu bytes of custom data with name %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volumeCapabilities did change to %{public}@ for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volume did change to %f for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did add output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did change output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did remove output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ client did disconnect: %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint <%{public}@> reevaluating volume control because %{public}@ changed from <%{public}@> to <%{public}@>
[ExternalDeviceServer] Removing television endpoint for client %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] didReceiveApplicationClientStateDidChange %@
[ExternalDeviceServer] didReceiveClientDidUnregister %@
[ExternalDeviceServer] didReceivePlayerDidUnregister %@
[ExternalDeviceServer] didReceiveNowPlayingClientChange %@
[ExternalDeviceServer] didReceiveNowPlayingPlayerChange %@
[ExternalDeviceServer] didReceiveVolumeControlCapabilitiesChange %@
[ExternalDeviceServer] didReceiveDefaultSupportedCommandsChange %@
[ExternalDeviceServer] didReceiveCoalescedNowPlayingStateChange %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
Error removing output device from context - device or uid is nil - Output Device: (%@ - %{public}@ - isLocal: %{BOOL}u) Localized Output Device: (%@ - %{public}@)
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@ with error %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
Checking if device with managedConfigDeviceID, %{public}@, allowed to connect
No managedConfig allow list found. Allowing all devices
Device with managedConfigDeviceID, %{public}@, allowed: %d
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Failed to register new virtual touch device
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Error setting devices on output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
[ExternalDeviceServer] Completed recon session: %{public}@
[ExternalDeviceServer] Reseting Facade
[ExternalDeviceServer] Facading NowPlayingClient from %@ to %@
Failed to create external device transport for %{public}@, group leader: %{public}@
- Selecting devices (non-default selection options) from: %{public}@
- Selection options: %{public}@
- Updating preferred group leader %{public}@ based on better criteria: %{public}@
- Updating preferred group leader because found a remote host: %{public}@
- Updating preferred group leader because locally hosting the group
-- Final preferred group leader: %{public}@ based on criteria: %{public}@
Skipping invalid output device: %{public}@
[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@ for: %{public}@
Ignoring uncommitted output device: %@ (%@)
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
PID Mismatch: Client %{public}@ is trying to make a nowPlayingClient with a different pid %d
PID Mismatch: Client %{public}@ is trying to making a nowPlayingClient with a different bundleID %{public}@
Resolving %{public}@ -> %{public}@ for client %@
Resolving Existing %{public}@ -> %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Re-registering origin %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Unable to set can be now playing app. No now playing client found for %@
Unable to set can be now playing player. No player client found for %@
Setting hardware remote behavior to %{public}@ for client %{public}@
Unable to set playback state. No now playing client found for %@
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app without entitlement. Ignoring.
ERROR: now playing client could not be found for setting supported commands
Unable to set properties from message %@. No player client found.
Unable to set properties from message %@. No origin client found for %@
%{public}@ Unable to get audio format content info for origin: %{public}@ | client %{public}@
Posting contentItemChange for path %{public}@ to xpcClient %{public}@ %{public}@
Posting %@
Posting %@ because activePlayerPath changed from <%{public}@> to <%{public}@>
Posting %@ with <%@>
Registering origin %@
Unregistering origin %{public}@
Removing active origin %{public}@. Setting active origin to the local one.
Setting active origin from %@ to %@
Persisting active origin %@
Failed to initialize temporary directory
[MRDNowPlayingClient] Setting pid for %{public}@ to %d
[MRDNowPlayingClient] Timeout trying to pid for %{public}@
[MRDNowPlayingClient] CanBeNowPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingClient] Creating playerClient for %{public}@
[MRDNowPlayingClient] ActiveNowPlayingPlayer changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] ParentAppBundleIdentifier changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] BundleIdentifierHierarchy changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] Visibility changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] TintColor changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] AppIcon changed from %{public}@ to %{public}@ for %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %{public}@
Removing client %{public}@
Posting Notification %{public}@
UserInfo %{public}@
Posting Custom Notification %{public}@ to %{public}@
Custom UserInfo %{public}@
CompanionLinkClient invalidation
CompanionLinkClient interrupted
Error activating CompanionLinkClient %{public}@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Client: %{public}@ Set system volume: setting volume to %f
Client: %{public}@ Adjust system volume: stepping volume by %f
No app bundle ID provided in call to GetMediaAppIsInstalled message
Unable to wake system app [failed to launch] %{public}@
Unable to wake system app [failed to find client]
Unable to bless app [sync task assertion acquisition failed]
Unable to bless app [task assertion failed]
Unable to bless app [bless failed]
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Pairing Handler register failed with routeUID: %@
Pairing Handler unregister failed with routeUID: %@
Pairing Handler complete failed with routeUID: %@
Client %{public}@ invalidated.
Pidversion out of date for %d
No process for pid %d
Unable to get boot session ID, not restoring clients
Restoring client pids %{public}@
Restoring expected client pids %{public}@
Resetting client and expected pids
SIGTERM received, preparing to shut down
[MRDAutoConnectionController] Begin DiscoverySession %@ because %@
[MRDAutoConnectionController] End DiscoverySession %@
[MRDAutoConnectionController] Removing outdated endpoint <%@> (<%@>)
[MRDAutoConnectionController] Removing endpoint <%@> (<%@>)
[MRDElectedPlayerController] Failed to connect to proactive endpoint %@ with error %@. Reset to local.
[MRDElectedPlayerController] Ignoring activeSystemEndpointDidChange for %@ because a new change for %@ was received
[MRDElectedPlayerController] Reevaluating electedPlayer event = %{public}@, reason =  %{public}@
[MRDElectedPlayerController] ElectedPlayer changed from <%@> to <%@> changeType=<%{public}@>, event=%{public}@, eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] ElectedPlayer remained <%@> eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because previousPlayerPath %{public}@ does not exist anymore
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because changeType uninitialized and playerPath %{public}@ is nil and previousPlayerPath %{public}@ is still valid
[AirPlayRemoteControlService] Starting AirPlay remote control service
[AirPlayRemoteControlService] Stopping AirPlay remote control service
[MRDRemoteControlService] observed new activePairedDevice <%@>, creating IDSRemoteControlService...
[MRDRemoteControlService] Found activePairedDevice <%@>, creating IDSRemoteControlService...
[MRDUIClient] <%p> Dealloc.
[MRDUIServer] Rejecting connection from unknown client.
[MRDUIServer] Rejecting connection from non-entitled client %@.
[MRDUIServer] Accepting connection from client %@
[MRDUIServer] Adding client %@
[MRDUIServer] Removing client %@
[MRDITS] <%p> Initializing
[MRDITS] <%p> Deallocating.
[MRDITS] <%p> Last playing date for %@ is distantPast, setting new timer
[MRDITS] <%p> Scheduling idle playback timer for %.2lf seconds - %@
[MRDITS] <%p> Cancelling idle playback timer of playerPath %@
[MRDITS] <%p> Playback state changed to playing for %@, not simplifying topology
[MRDITS] <%p> Could not find endpoint for playerPath <%@> - error: %@
[MRDITS] <%p> Letting endpoint be hosted by a smart device - %@
[MRDITS] <%p> Could not remove devices <%@> from existing endpoint (%@) - error: %@
[MRDITS] <%p> Removed devices from existing endpoint %@: <%@>
[MRDITS] <%p> Not trying to recreate WHA group; Endpoint (%@) only had one smart device (%@)
[MRDITS] <%p> Topology not simplified, error: %@
[MRDITS] <%p> Topology simplified, new endpoint: %@
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
Received %@ signal in order to start prewarming...
Waiting for Buddy in order start prewarming
%{public}@ Topology change failed with error: %{public}@
%{public}@ Connect was called but group leader wasn't committed or output context wasn't prepared
%{public}@ disconnecting with error %{public}@
%{public}@ Added localDevice %{public}@ to outputContext %{public}@
%{public}@ Removed groupLeader %{public}@ from outputContext %{public}@
%{public}@ Removed localDevice %{public}@ from outputContext. Clearing all localOrigin nowPlayingData
%{public}@ Removed localDevice %{public}@ from outputContext %{public}@
%{public}@ Local device changed clusterType to: %u
%{public}@ Found endpoint containing local in discovery that matches cluster type: %{public}@
%{public}@ Timed out waiting for local device to appear with expected clusterType in discovery
%{public}@ GroupLeader %{public}@ failed verification for reason: %{public}@ on context %{public}@
%{public}@ Verification failed because groupLeader was found in another outputContext: %{public}@
%{public}@ Calling %lu completions - Original reason: %{public}@
%{public}@ Ignoring request to commit in an invalid state (no designatedGroupLeader) reason: %{public}@
%{public}@ Already committing output device: %{public}@ to: %{public}@. New reason: %{public}@
%{public}@ Committing output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Failed to commit output device: %{public}@ to: %{public}@ because %{public}@ - %{public}@
%{public}@ Skipping commit of output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Begin Forwarding Origin Data from %{public}@ to %{public}@ for outputContext %{public}@
%{public}@ Destroying playerPaths for origin: %{public}@, client: %{public}@
[ConnectionMonitor] Checked-in connection %@ in %lf seconds
[ConnectionMonitor] Checking connection %@
[ConnectionMonitor] Updated connectionStatus = %@ for %@ after %lf seconds
[ConnectionMonitor] Resumed connection %@ in %lf seconds
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@ (status = %{public}@)
[AVRoutingServer] Authorization request using saved password for %{public}@: %@
[AVRoutingServer] Authorization token failed for %{public}@ : %@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to clear all AirPlay route passwords...
[AVRoutingServer] Error %ld trying to delete passwords
[AVRoutingServer] No passwords to delete
[AVRoutingServer] Error %ld trying to query passwords
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Could not find endpoints for migration between %{private}@ and %{private}@.
[AVRoutingServer] Failed to remove output device UIDs: %{public}@ from parent group with error: %{public}@
[AVRoutingServer] No group leader, nothing to remove for: %{public}@
[AVRoutingServer] Failed to find external device for outputDeviceUID: %{public}@
[AVRoutingServer] Available external devices: %{public}@
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Handling authorization request with custom callback for route %{public}@
[AVRoutingServer] Custom authorization callback returned for route %{public}@
[AVRoutingServer] Prompting user with authorization request route %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting transaction: %{public}@
[AVRoutingServer] Discovery ended. Clearing transaction %{public}@
[AVRoutingServer] Suppressing cluster connection error. %.2f since last alert
[AVRoutingServer] Error connecting to cluster member: %{public}@
[AVRoutingServer] Timed out waiting for action on cluster connection error for route: %{public}@
[AVRoutingServer] Failed to open TVSettings: %{public}@
[AVRoutingServer] AirPlay Error %ld: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %ld: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
[AVRoutingServer] Error getting AirPlay security settings dictionary (OSStatus = %d)
Resolving endpoint for output device UIDs %{public}@
Returning endpoint with only a subset of specified output devices:
    - %{public}@
    + %{public}@
Resolved to endpoint: %{public}@
Setting output devices on endpoint: %{public}@
Error adding devices to endpoint:%{public}@ error:%{public}@
Could not make endpoint for output devices: %{public}@
Predicting endpoint for output device UIDs %{public}@
[iOSSim Data Source] Failed to load playback queue: %{public}@
POWER: Did recieve power callback %{public}@-%{public}@
POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds
[MRDHostedExternalDeviceManager] Created new hostedExternalDevice=%{public}@, endpoint=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, endpointIdentifier=%{public}@ reason=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, outputDeviceIdentifier=%{public}@ reason=%{public}@
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MRDVolumeController] Setting AVSC volume to %f
[MRDVolumeController] Setting AVSC isMuted to %@
[MRDVolumeController] Error setting AVSC isMuted: %@
[MRDVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
[MRDVolumeController] Reloading volume for reason: %@
Attempting to activate remote alert handle.
Creating remote alert handle for remote view controller: %{public}@
Remote alert handle did activate.
Remote alert handle did deactivate.
Remote alert handle did invalidate with error: %@
Client switched route discovery mode to: %lu
Client switched output device discovery mode to: %lu
Unable to bless client [sync task assertion acquisition failed] %{public}@
Failed to create assertion: %{public}@
Unable to bless client [bless failed] %{public}@
Unable to relay message with id %lu
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@> for <%@>
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@>
[MRDMediaRemoteClient] Restoring connection with notification userInfo %@
Unable to create IOHIDUserDevice
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
[MRDDisplayMonitor] Layout Changed %@
[MRDIDSServiceConnection] %@ Setting IDSDevice from %@ to %@
[MRDIDSServiceConnection] %@ Added handler for %@ %@
[MRDIDSServiceConnection] Added destination handler for type=%@, destination=%@, session=%@, %@
[MRDIDSServiceConnection] Remove handler for type=%@, %@
[MRDIDSServiceConnection] Remove destination handler for type=%@, destination=%@, session=%@, %@
[MRDIDSServiceConnection] %@ Message received<%@>: data=%@ type=%@ destination=%@ session=%@ replyID=%@
[MRDLockScreenContentController] failed to retrieve suggestions with error %@
Error blessing %@ for playback initialization. %@
[MRUIController][D] <%p> Initializing direct controller.
[MRUIController][D] <%p> Dealloc.
[MRUIController][D] <%p> Initializing XPC controller.
[MRUIController][D] <%p> Deallocated while still holding lock screen assertion.
[MRUIController][D] <%p> Deallocated while still holding quick controls assertion.
[MRUIController][D] <%p> Deallocated while still holding screen mirroring assertion.
[MRUIController][D] <%p> XPC interrupted.
[MRUIController][D] <%p> XPC invalidated.
[MRUIController][D] <%p> Server proxy error %@.
identifier
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>mediaremoted</string>
<key>CFBundleIdentifier</key>
<string>com.apple.mediaremoted</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>20A5328c</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.0</string>
<key>DTSDKBuild</key>
<string>20A5328c</string>
<key>DTSDKName</key>
<string>iphonesimulator16.0.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A5229d</string>
<key>MinimumOSVersion</key>
<string>16.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mediaremoted</string>
<key>com.apple.BluetoothServices</key>
<true/>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.appletv.pbs.volume-control</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.bluetooth.system</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.device-information.user-assigned-device-name</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.mediaremote.nearby-device</key>
<string>YES</string>
<key>com.apple.mediaremote.send-commands</key>
<true/>
<key>com.apple.mediaremote.set-now-playing-app</key>
<true/>
<key>com.apple.mediaremote.set-playback-state</key>
<true/>
<key>com.apple.mediaremote.ui-control</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.nano.nanoregistry.generalaccess</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>WifiAddress</string>
<string>WifiAddressData</string>
<string>EthernetMacAddress</string>
</array>
<key>com.apple.private.associated-domains</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.avconference.avctester</string>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.avconference.avctester</string>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.ids.session</key>
<array>
<string>com.apple.private.alloy.avconference.avctester</string>
</array>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.sessionkit.custom-platter-target</key>
<true/>
<key>com.apple.private.sessionkit.permitMultipleProcessInputs</key>
<true/>
<key>com.apple.private.sessionkit.sessionRequest</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
<key>com.apple.proximitycontrol</key>
<true/>
<key>com.apple.proximitycontrol.lockscreenControls</key>
<true/>
<key>com.apple.rootless.storage.coreduet_knowledge_store</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/private/var/containers/Bundle/</string>
<string>/Applications/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array>
<string>/private/var/tmp/com.apple.mediaremoted/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/MediaRemote/</string>
<string>/Library/UserConfigurationProfiles/EffectiveUserSettings.plist</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.sessionservices</string>
<string>com.apple.mediaremoteui.services</string>
<string>com.apple.powerlog.plxpclogger.xpc</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callcapabilities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.conversationmanager</string>
<string>com.apple.ProximityControl.server</string>
<string>com.apple.airplay.apsynccontroller.xpc</string>
<string>com.apple.airplay.receiver.mediaremote.services</string>
<string>com.apple.audio.AudioSession</string>
<string>com.apple.BluetoothServices</string>
<string>com.apple.callkit.callcontrollerhost</string>
<string>com.apple.commcenter.coretelephony.xpc</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.coremedia.admin</string>
<string>com.apple.coremedia.endpoint.xpc</string>
<string>com.apple.coremedia.endpointuiagent.xpc</string>
<string>com.apple.coremedia.routediscoverer.xpc</string>
<string>com.apple.coremedia.routingcontext.xpc</string>
<string>com.apple.coremedia.systemcontroller.xpc</string>
<string>com.apple.coremedia.volumecontroller.xpc</string>
<string>com.apple.coremedia.endpointremotecontrolsession.xpc</string>
<string>com.apple.GameController.gamecontrollerd</string>
<string>com.apple.identityservicesd.embedded.auth</string>
<string>com.apple.idsremoteurlconnectionagent.embedded.auth</string>
<string>com.apple.iohideventsystem</string>
<string>com.apple.iokit.powerdxpc</string>
<string>com.apple.mediaremoted.xpc</string>
<string>com.apple.PairingManager</string>
<string>com.apple.PineBoardServices</string>
<string>com.apple.PowerManagement.control</string>
<string>com.apple.SBUserNotification</string>
<string>com.apple.securityd</string>
<string>com.apple.server.bluetooth.le.att.xpc</string>
<string>com.apple.SharedWebCredentials</string>
<string>com.apple.SharingServices</string>
<string>com.apple.springboard.backgroundappservices</string>
<string>com.apple.springboard.services</string>
<string>com.apple.SystemConfiguration.configd</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.CoreDuet</string>
<string>com.apple.lockscreen.shared</string>
<string>com.apple.duetexpertd</string>
<string>com.apple.spotlightui</string>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mediaremote</string>
<string>com.apple.mediaremoted</string>
<string>com.apple.airplay</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.avfoundation</string>
<string>com.apple.coreaudio</string>
<string>com.apple.coremedia</string>
<string>com.apple.avfaudio</string>
<string>com.apple.ids</string>
<string>com.apple.conference</string>
<string>com.apple.facetime.bag</string>
<string>com.apple.da</string>
</array>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.ts.mach-task-name</key>
<true/>
<key>com.apple.sharing.ProximityClient</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.activateRemoteAlert</key>
<true/>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.lockScreenContentAssertion</key>
<true/>
<key>com.apple.springboard.remote-alert</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>modify-calls</string>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
#(-2
Y]aei!mq
MbP?U
"',16;=BX]bglqv{
#(-27<AFKP
UZ_dinsx
mediaremoted
MRDSwiftStruct
%@-%@-%@-%@-%@-%@
com.apple.mediaremote.endpoint.connect
com.apple.mediaremote
type
date
event
eventdescription
selectionreason
eventreason
timesince
changeType
changeTypeDescription
v8@?0
B8@?0
Restoring previous
v12@?0B8
%@ origin registered <%@> (<%@>) 
origin de-registration of <%@> (<%@>) 
personal device was attached
Playback changed for %@
was not playing sort of recently <%lf> seconds ago
was playing recently <%lf> seconds ago
was not <%@> sort of recently <%lf> seconds ago
was <%@> recently <%lf> ago
was not playing recently <%lf> ago and was not <%@> recently <%lf> seconds ago
Could not find origin with deviceUID = <%@>
No %@SystemEndpoint
Internal Setting not set
local activePlayer %@ is playing
Fallback to previous
%@SystemEndpoint changed from <%@> to <%@> with changeType = <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
unknown
@"NSDictionary"8@?0
%@ endpoint disconnected and attempting to reconnect
v16@?0@"MRAVEndpoint"8
v24@?0d8@?<v@?B>16
%@Endpoint changed
com.apple.mediaremote.systemendpointcontroller.userselectedtimer
 %@ timeout event %@ after <%lf> seconds 
%@Endpoint timeout imminent
%@Endpoint is playing
%@Endpoint is local
com.apple.mediaremote.systemendpointcontroller.playbacktimer
%@ playback timedout event %@ after <%lf> seconds
SystemEndpoint
v32@?0@8@"NSDictionary"16^B24
Startup
B16@?0@"MRDeviceInfo"8
ASE moved to another endpoint
StartUp
ConnectionAdded
ConnectionRemoved
UserSelected
UserSelectedTimeout
Playback
PlaybackTimeout
NowPlayingAppRemoved
migrationPlaybackSession
ResolveActiveEndpoint
invalid route error
from external device client
Analytics: 
com.apple.mediaremote.MRDRemoteControlServer
com.apple.mediaremote.MRDMediaRemoteUIService
MULTIPLAYER_CAPACITY_REACHED_TITLE
MULTIPLAYER_CAPACITY_REACHED
v16@?0@"MRCommandResult"8
v20@?0I8@"NSArray"12
com.apple.mediaremote.broadcastcommand.%@
v32@?0@"NSString"8@"MRDRemoteControlContext"16^B24
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
@"NSData"16@?0@"_MRSendCommandResultMessageProtobuf"8
MRXPC_COMMAND_STATUSES_DATA_KEY
MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY
MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY
MRXPC_MEDIA_CONTROLS_STYLE_KEY
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@"NSError"8
MRXPC_MEDIA_CONTROLS_ROUTE_UID_KEY
MRXPC_MEDIA_CONTROLS_CENTER_KEY
MRXPC_COMMAND_KEY
Pause because migration
v24@?0@"MRDMediaRemoteClient"8@"NSError"16
Did not receive fade out notification
com.apple.mediaexperience.fadeoutappliedforplaybackhandoff
v12@?0i8
%@ started playback
phone call began
v16@?0Q8
FBSOpenApplicationErrorDomain
command<%@>=%@
com.apple.Fuse
com.apple.mediaremoted
com.apple.MediaPlayer.RemotePlayerService
airtunesd
tvairplayd
com.apple.HomePodCannedDemo
coreduetd
AVSystemController
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVSystemController_InterruptAudioSessionIDForHandoff
AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
AVSystemController_AllowAppToFadeInTemporarilyAttribute
MRXPC_COMMAND_OPTIONS_KEY
Client <%@> missing entitlement needed to send command <%@> to arbitrary apps. Sending to NowPlayingApp instead of <%@>.
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v32@?0@"NSString"8@"NSNumber"16^B24
com.apple.mediaremote.remotecontrol.routedcommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
com.apple.MRDAVRoutingDataSource.serialQueue
com.apple.MRDUIServer.queue
MRUISessionController
/System/Library/PrivateFrameworks/MediaRemoteDaemonServices.framework/MediaRemoteDaemonServices
subclass must implement
Currently playing %ld %@ streams (max = %ld).
external
origin-%ld %@ (%@)
%@ (%@) + 
%@ on %@
canActivateStreamWithPlayerPath
B24@?0@"NSArray"8@"MROrigin"16
B16@?0@"MRDNowPlayingOriginClient"8
B16@?0@"MRPlayerPath"8
PlayerPath does not take up a slot thus is always allowed to activate
PlayerPath is already active
Number of currently activeStreams (%ld) is less that capacity (%ld) so allowing activation
Already above max capacity. %@
interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath
v24@?0@"MRPlayerPath"8@"NSError"16
%@<%@>
Could not find a best stream to interrupt
bestStreamToInterrupt
@"MRDNowPlayingPlayerClient"16@?0@"MRDNowPlayingOriginClient"8
q24@?0@"MRDNowPlayingPlayerClient"8@"MRDNowPlayingPlayerClient"16
Number of currently activeStreams (%ld) is less that capacity (%ld).
Already playing <%@> to specified device <%@>
willStartingPlaybackToOutputDevicesInterrupt
%@ just started playing
com.apple.mediaremote.%@.%@
v32@?0@"NSNumber"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16^B24
%@ %p {
  playerPath = %@
  player = %@
  canBeNowPlayingPlayer = %@
  transaction = %@
  playbackState = %@
  inferredPlaybackState = %@
  playbackStateHistory = %@
  pictureInPictureEnabled = %@
  supportedCommands = %@
  capabilities = %@
  playbackQueue = %@
  subscriptionController = %@
supportedCommands
playbackQueue
nowPlayingItem
inferred playback state
playback state
playbackQueueCapabilities
q24@?0@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16
com.apple.mediaremoted.MRDNowPlayingPlayerClient/%@
true
false
%@-%@
CUBluetoothClient
CoreUtils
v16@?0@"NSData"8
v24@?0@"MRDeviceInfo"8@"NSError"16
<%@ %p "%@">
local.
%@ (pid=%d)
<%@ %p {
    %@-%d
    registeredCallbacks = %@
    registeredNotifications = %@
    subscribedPlayerPaths = %@
    pendingClientState = %@
    connection monitor = %@
B16@?0@"MRAVOutputDevice"8
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSArray"16^B24
WakingPlayerPathNotification
<%@ %p{
    connectionState=%@
    connectionStateError=%@
    name = %@
    endpoint = %@
    volume = %f
    volumeCapabilities = %@
    outputDeviceVolumes = %@
    outputDeviceVolumeCapabilities = %@
    modifications = %@
    discoveryResults = %@
   addedOutputDevices = %@
    changedOutputDevices = %@
    removedOutputDevices = %@
com.apple.mediaremote.MRDIDSService
<%@:%p {
 service=%@
 devices=%@
 messageHandlers = %@
 deviceMessageHandlers = %@
v56@?0@"MRDIDSServiceMessage"8@"NSString"16@"NSString"24@"NSString"32@"NSNumber"40@"NSNumber"48
v64@?0@"MRDIDSServiceMessage"8@"IDSDevice"16@"NSString"24@"NSString"32@"NSString"40@"NSNumber"48@"NSNumber"56
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
messageid
destination
session
data
replyid
v32@?0@?<v@?@"MRDIDSServiceMessage"@"IDSDevice"@"NSString"@"NSString"@"NSString"@"NSNumber"@"NSNumber">8Q16^B24
v32@?0@?<v@?@"MRDIDSServiceMessage"@"NSString"@"NSString"@"NSString"@"NSNumber"@"NSNumber">8Q16^B24
bundleID
audioSessionID
mxSessionIDs
isPlaying
B16@?0@"<MRDNowPlayingDataSourceObserver>"8
<%@, %p: sourceOrigin: %@ - destinationOrigin: %@>
v20@?0I8^{__CFArray=}12
v36@?0^v8I16^{__CFDictionary=}20@?<v@?^{__CFArray=}>28
v24@?0^v8^{__CFError=}16
v32@?0^v8^v16@?<v@?^v^{__CFError=}>24
v24@?0@"MRPlaybackSessionMigrateRequest"8@"NSError"16
v40@?0@"MRPlaybackSession"8@"MRPlaybackSessionMigrateRequest"16@"MRPlayerPath"24@?<v@?@"MRPlaybackSessionMigrateRequest"@"NSError">32
v32@?0^v8^v16@?<v@?^{__CFError=}>24
v40@?0^v8^{__CFError=}16^v24@?<v@?^{__CFError=}>32
%@-%@-%d
MediaPlayback
v32@?0@"NSArray"8@"MRAVEndpoint"16@"NSError"24
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
<Unknown>
com.apple.mediaremote.MRDRapportRemoteControlService.workerQueue
com.apple.mediaremote.remotecontrol.connect
destinationGroupUID
v32@?0@"MRDeviceInfo"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSError">24
com.apple.mediaremote.remotecontrol.disconnect
MRDRapportRemoteControlService received disconect event
B16@?0@"MRDRapportRemoteControlServiceConnection"8
v24@?0@"MRDeviceInfo"8@"NSDictionary"16
com.apple.mediaremote.remotecontrol.reset
MRDRapportRemoteControlService received reset event
RapportRemoteControlChannel-<%@->%@/%@>
MRDMediaRemoteExternalDeviceServerClientInvalidatedNotification
v16@?0@"NSNotification"8
incomingRapportConnections
incomingRapportConnectionsDescription
source
source=%@(%@) session=%@
ProximityController(%@)
MRDAVOutputContextManagerDidReset
local=%@
active=%@
inactive=%@
reserved=%@
@16@?0@"MRAVOutputContext"8
v16@?0@"NSMutableDictionary"8
@16@?0@"MRAVOutputDevice"8
B16@?0@"NSString"8
B16@?0@"MRAVOutputContext"8
@"MRAVConcreteOutputContext"16@?0@"AVOutputContext"8
@16@?0@"MRAVOutputDeviceDescription"8
AVSystemController_ServerConnectionDiedNotification
AVSystemController_SubscribeToNotificationsAttribute
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
com.apple.mediaremote.%@
  discoveryMode = %@
  idsService = %@
  outputDevices = %@
@"MRAVOutputDevice"16@?0@"IDSDevice"8
MRDAVLocalDeviceCommitManager
MRDAVLocalDeviceCommitManager.serial
MRDAVLocalDeviceCommitManager.completion
delayedInit
nowPlayingSessionDidStop
topologyChangeFinished-%@
didRemoveLocalDevice
clusterTypeDidChange
LocalDeviceCommitManager
_commitLocalDeviceWithReason
Failed to find local output device
Failed to find output context for: %@
Skipping commit of local device because it is already contained in context: %@
Committing output device: %@ to context: %@
v16@?0^{__CFError=}8
v24@?0@"MRAVOutputDevice"8@"NSError"16
MRXPC_INDEXPATH_DATA_KEY
v16@?0@"MRDMediaRemoteClient"8
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
BrowsableContent playback initiated
Sending initiatePlaybackMessage
MRXPC_BUNDLE_ID_KEY
v16@?0@"NSArray"8
  localEndpointConnection=%@
  discoveryMode=%@
  routingContextID=%@
  avDiscoverySession = %@
  idsDiscoverySession = %@
  localOutputDevice = %@
  unclusteredOutputDevices = %@
  availableOutputDevices = %@
localEndpointConnection
v32@?0@"NSString"8@"NSArray"16^B24
updateFromOutputContext
deviceInfo
reservedOutputContext
addFromOutputContext
loadLocalEndpointConnection
com.apple.mediaremote.hostedDiscoverySession/serialQueue
discovery enabled at: %@ (%.0f s ago) until: %@ (duration %.0f s)
discovery never enabled
%@ %p {
    discovery mode = %@
    xpc connection = %@
    pid = %d
    bundle id = %@
    %@
    connection monitor = %@
com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)
<%@: %p - destination UID=%@ groupID=%@>
NowPlaying 
OutputDevices 
Volume 
Keyboard 
SystemEndpointUpdates 
<%@ %p {
    deviceInfo = %@
    lastSupportedMessageType = %ld
    virtualTouchDevices = %@
    registeredVirtualVoiceInputDevices = %@
    playbackQueueRequests = %@
    sessionPeer = %@
    pinPairingToken = %@
    serverDelegate = %@
    registeredUpdates = %@
    subscribedPlayerPaths = %@
    destinationOutputDeviceUID = %@
    destinationGroupID = %@
    destinationEndpoint = %@
    connection = %@
v16@?0I8I12
v24@?0@"MRAVEndpoint"8@"NSError"16
v16@?0@"MRPlayerPath"8
MRDExternalDeviceServer
ExternalDeviceServerDestination
com.apple.TVRemote
B16@?0@"MRCommandInfo"8
v32@?0@"NSNumber"8@"MREmulatedGameController"16^B24
B16@?0@"MRAVDistantOutputDevice"8
v32@?0@"NSString"8@"NSMutableArray"16^B24
@16@?0@"MRAVEndpoint"8
B24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
@"NSString"16@?0@"MRAVEndpoint"8
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
 Service = %@
 DiscoveryChannels = %@
 RemoteControlChannels = %@
v48@?0@"MRDIDSServiceMessage"8@"IDSDevice"16@"NSString"24@"NSString"32@"NSString"40
v16@?0@"MRDIDSServiceMessage"8
v32@?0@"MRAVOutputDevice"8q16@?<v@?@"NSString">24
IDSRemoteControlChannel-<%@/%@>
Tried to connect to endpoint but its groupLeader changed from %@ to %@
v24@?0q8@?<v@?@"NSString">16
v16@?0@"MRIDSCompanionMessage"8
  client = %@
  transport = %@
  destination = %@
  session = %@
  connectionAttemptDate = %@ (%lf seconds ago)
@16@?0@"NSMutableDictionary"8
New RemoteControlChannel created for destination %@, clearing all previous channels for this destination
v32@?0@"NSString"8@"MRDIDSRemoteControlServiceRemoteControlChannel"16^B24
model
deviceID
AirPlayPortExtendedInfo
kMRDPersonalDeviceControllerPersonalDeviceStateDevicesKey
kMRDPersonalDeviceControllerPersonalDeviceStateDateKey
com.apple.mediaremote.MRDPersonalDeviceController
com.apple.mediaremote.MRDPersonalDeviceController.delegateQueue
Personal devices did change.
Initial load with no persisted state.
com.apple.mediaremote.mrdpersonaldevicecontroller.overridetimer
Timeout reached.
v24@?0^{__CFArray=}8^{__CFError=}16
Companion Link Event
MRXPC_HOMEKIT_IDENTIFIER_KEY
RecentlyPlayedEntries
v32@?0@"NSDictionary"8Q16^B24
q24@?0@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"8@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"16
lastPlayingDate
lastNotPlayingDate
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
%@-%@-%@-%@-%@-%@(%@)-%@-%@
PLAYING
NOT PLAYING
deviceUID
playerPathDescription
contentItemDescription
 connection = %@
 outputDevice = %@
 session = %@
 error = %@
v16@?0@"MRProtocolMessage"8
%@-%d
MPStoreClientTokenDidChangeNotification
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
v12@?0I8
v32@?0@"NSString"8@"NSString"16^B24
MRIDSCompanionTransportConnection.dealloc
 type = %@
 destination = %@
 isValid = %@
v32@?0@"MRAVOutputDevice"8Q16^B24
com.apple.common
BasicAngelIPC
com.apple.mediaremoteui.services
com.apple.mediaremoteui.ui-service
v16@?0@"BSServiceConnection<BSServiceConnectionContext>"8
v16@?0@"<BSServiceConnectionConfiguring>"8
com.apple.mediaremote.MRDIDSCompanionRemoteControlServiceConnection.workerQueue
v32@?0@"MRIDSCompanionMessage"8@"NSString"16@"NSString"24
%@ %p
IDSWatch: %@
DiscoveryChannelMode: %@
Connections: %@
lastSentEndpoint: %@ (%.1fs ago)
Start
IDS Connected
IDSConnection Disconnected
MRDIDSCompanionRemoteControlService.setConnectionState
IDSDiscoveryChannel
New replacement connection %@-%@ established
v32@?0@"NSString"8@"MRDIDSCompanionRemoteControlServiceConnection"16^B24
Interrupted
Failed to load device info
Failed to create IO Streams
Failed to register custom origin
Failed to re-register custom origin
Failed to sync client state
ConnectOptions
com.apple.MediaRemote.MRExternalDevice.SerialQueue
com.apple.MediaRemote.MRExternalDevice.WorkerQueue
com.apple.MediaRemote.MRExternalDevice.NotificationQueue
<%@:%p %@ transport=%@>
<%@:%p {
    device=%@
    origin=%@
    transport=%@
@"NSError"8@?0
success
NONE
retry
none
attemptReconnection
reason
ping
v24@?0^{__CFError=}8d16
v20@?0f8@"NSError"12
v20@?0I8@"NSError"12
com.apple.mediaremote.MRExternalDevice/%@(%@)
v36@?0@"MRPlayerPath"8I16@"NSDictionary"20@?<v@?@"MRCommandResult">28
v24@?0^v8^v16
v24@?0@"MRPlaybackSession"8@"NSError"16
v24@?0@"MRProtocolMessage"8@?<v@?@"MRProtocolMessage">16
event = <playbackQueueRequest>, request = <%@>, error = <%@>
v20@?0^{__CFString=}8B16
event = <%@>, command = <%@>, error = <%@>
Received update from companion
v16@?0@"MRUpdateActiveSystemEndpointResponse"8
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
handlePlaybackQueueRequest
v40@?0@"MRPlaybackQueueRequest"8@"MRPlayerPath"16@"MRPlaybackQueue"24@"NSError"32
v24@?0@"MRPlaybackQueue"8@"NSError"16
relayPlaybackQueueRequest
requestArtworkForContentItems
v24@?0@"NSArray"8@"NSError"16
@16@?0@"MRContentItem"8
@"MRContentItem"16@?0@"MRContentItem"8
B32@?0@"MRDMediaRemoteClient"8@"NSDictionary"16^@24
identifier
defaultGroupUID
CUPairingManager
UserAssignedDeviceName
v24@?0^{__CFString=}8^{__CFDictionary=}16
com.apple.airplay.prefsChanged
com.apple.airplay.active
com.apple.airplay.advertisingDidChange
v24@?0@"CUPairingIdentity"8Q16
com.apple.MRDDeviceInfoDataSource.workerQueue
CurrentDeviceInfo
LOCAL
DeviceInfo.plist
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
  origin = %@
  deviceInfo = %@
  volume = %f
  volume capabilities = %@
  isMuted = %@
  time since playing = %lf
  is playing = %@
  active now playing client = %@
  override client = %@
  explicit now playing client = %@
  inferred now playing client = %@
  app activity = %@
  datasource = %@
  default supportedCommands = %@
q24@?0@"MRDNowPlayingClient"8@"MRDNowPlayingClient"16
all now playing clients = %@
volume
volumeCapabilities
isMuted
computedNowPlayingClient
Updated computedNowPlayingClient.
explicitNowPlayingClient
Updated explicitNowPlayingClient.
inferredNowPlayingClient
Updated inferredNowPlayingClient.
overrideNowPlayingClient
Updated overrideNowPlayingClient.
applicationActivity
Updated applicationActivity.
RemoveAllClients
Removed nowPlayingClient.
v32@?0@"NSString"8@"NSData"16^B24
setNowPlayingDataSource
nowPlayingApplicationDidChange
nowPlayingApplicationPlaybackStateDidChange
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange
PlayerPictureInPictureEnabledDidChange
ActivePlayerDidChange
NowPlayingApplicationDidUnregisterCanBeNowPlaying
@"MRDNowPlayingClient"8@?0
com.apple.mediaremoted.MRDNowPlayingOriginClient/%@
@16@?0@"MRDNowPlayingPlayerClient"8
addNowPlayingClient-%@
com.apple.mediaremote.originclient.playbacktimer
%@ was not playing recently
%@ is playing for notification <%@>
com.apple.mediaremote.originClient.userDefaults.serialQueue
<%@ %p: %@>
B32@?0@"MRAVOutputDevice"8Q16^B24
Speaker
<%p> %@ {
registeredForNowPlayingCount = %u
registeredForVolumeCount = %u
coalescingStates = %@
  supportedCommands = %lu
 playbackQueue = %@
 playbackQueueCapabilities = %@
  contentItems = %@
  contentItemArtworks = %@
  playbackStateTimestamp = %@ (%lf seconds ago)
    playerProperties = %@
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
AVSystemController_CurrentExternalScreenAttribute
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_ExternalScreenDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
com.apple.mediaremote.MRDLockScreenController
Previous playerPath %@ invalidated
v16@?0^v8
PlayerPath changed from %@ to %@ with changeType %@
visible
NOT visible
Personal devices changed
Lock screen content changed
LayoutChange
ElectedPlayer %@ playback
started
stopped
playerPath
personal device
com.apple.mediaremoted.LockScreen
SBDashBoardNowPlayingAssertionIdentifier
SBSLockScreenContentAssertion
/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices
SBSLockScreenContentAssertionSlotPlatter
MRDConnectionLifetimeController-%@-%ld.queue
Init
Device is in use
Device is on cover sheet
Device is playing
Device played recently
Device is part of UserSelected endpoint
Remote device is playing to local device
DeviceInfo changed
Has not played recently
ScreenOff -> CoverSheet
ScreenOff -> InUse
CoverSheet -> InUse
CoverSheet -> ScreenOff
InUse -> ScreenOff
Active endpoint changed
com.apple.mediaremoted.hostedExternalDevice.serialQueue
com.apple.mediaremoted.hostedExternalDevice.callbackQueue
<%@: %p externalDeviceName=%@>
%@: %p {
    external device = %@
    connection state = %@
    last can migrate to local endpoint error = %@
    discovery modes = %@    external device clients = %@
    external output context = %@
    subscribed playerPaths = %@
    lifetimeController = %@
TV joined Expanse session.
Not already connected to endpoint
Local device is groupable
mediaremotetool
B16@?0@"MRDAVHostedExternalDeviceClient"8
v20@?0I8^{__CFError=}12
v20@?0f8@"NSString"12
v20@?0I8@"NSString"12
init
Endpoint is not initialized
v16@?0^{__CFString=}8
v24@?0^{__CFString=}8^{__CFData=}16
groupContainsGroupLeader
groupLeader
topology
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
kAirPlayWHANotification_BreakAwayFromCurrentGroup
@"MRProtocolMessage"16@?0@"MRDExternalDeviceServerClientConnection"8
@"MRProtocolMessage"20@?0@"NSString"8I16
@"MRProtocolMessage"24@?0@"MRDExternalDeviceServerClientConnection"8@"MRAVEndpoint"16
%@ -> %@
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"MRAVRoutingDiscoverySession"16^B24
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v16@?0^{__CFArray=}8
v16@?0@"_MRLyricsEventProtobuf"8
Connection %@ exited in the middle of a migration
v24@?0@"MRPlaybackSessionRequest"8@"MRPlayerPath"16
B16@?0@"MRDExternalDeviceServerClientConnection"8
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
com.apple.tvremotecore.xpc
SBSUndimScreen
SpringBoardServices
v24@?0@"CUPairedPeer"8Q16
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
@16@?0@"MRPlayerPath"8
v16@?0@"MROrigin"8
v32@?0@"NSString"8@"MRAVOutputDevice"16^B24
v40@?0@"NSDictionary"8@"NSArray"16@"MRAVEndpoint"24@"NSError"32
sendPlaybackSession<%@>
sendPlaybackSessionMigrateBegin<%@>
sendPlaybackSessionMigrateEnd<%@>
%@ from external device client: %@<%@>
v24@?0q8@"NSError"16
v20@?0B8@"NSError"12
MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification
com.apple.mediaremoted.MRDHostedRoutingController/calloutQueue
DiscoverySession=%@
%s is abstract
-[MRDHostedRoutingController createDiscoverySession]
-[MRDHostedRoutingController _onQueue_reloadEndpoints]
-[MRDHostedRoutingController _onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:]
-[MRDHostedRoutingController makeEndpointWithOutputDevices:options:]
MediaRemote
virtual_device
q24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"MRAVDistantOutputDevice"16@?0@"MRAVOutputDevice"8
v32@?0@"NSString"8@"MRDAVHostedExternalDevice"16^B24
@"NSString"16@?0@"MRAVOutputDevice"8
@"_MRAVOutputDeviceDescriptorProtobuf"24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"MRAVDistantOutputDevice"16@?0@"MRAVDistantOutputDevice"8
ignoreExistingLeader
preferExistingConnection
preferSubscription
preferCloudLibrary
preferHomePod
preferAppleTV
{ %@ }
proxyGroupPlayer
relayable
remoteControllable
existingConnection
appleMusicSubscription
iCloudMusicLibrary
existingLeader
HomePod
AppleTV
existingDesignatedLeader
_MRDActiveOriginDataDefaultsKey
LastNowPlayingAppIsPlayingState
_MRDActivePlayerPathDateDefaultsKey
_MRDAnyNowPlayingAppIsPlayingDefaultsKey
%@ has exited in the middle of a migration attempt
v24@?0@"NSString"8@"NSMutableDictionary"16
v32@?0@"MRContentItem"8@"MRPlaybackQueueRequest"16^B24
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
MRXPC_NOWPLAYING_DISPLAYID_KEY
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
@16@?0@"MRDNowPlayingClient"8
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
@"NSData"16@?0@"MRDNowPlayingPlayerClient"8
MRXPC_NOWPLAYING_PLAYER_PATH_ARRAY_DATA_KEY
MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY
v16@?0@?<v@?@"NSData"I>8
v24@?0@"NSData"8@"NSError"16
Application <%@> waiting for can be now playing
v20@?0@"NSData"8I16
Unable to register for waking now playing notifications without entitlement: %@
com.apple.mediaremote.waking-now-playing-notifications
MRXPC_AUDIO_FORMAT_CONTENT_INFO
q24@?0@"MRDNowPlayingOriginClient"8@"MRDNowPlayingOriginClient"16
event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>
com.apple.maybePostDistributedNotifications.serialQueue
Playing
Not Playing
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%@ %p {
    player path = %@
    client = %@
    perPlayerCanBeNowPlaying = %@
    canBeNowPlaying = %@
    canBeNowPlayingTimestamp = %@
    effectiveCanBeNowPlaying = %@
    any player is playing = %@
    has now playing data = %@
    foregrounded = %@
    supportsBackgroundAudio = %@
    active player client = %@
    player clients = %@
effectiveBundleIdentifier
v16@?0@"NSDictionary"8
UIBackgroundModes
audio
displayName
activePlayerClient
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
@"AVOutputContext"8@?0
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v32@?0@"NSNumber"8@"MRDMediaRemoteClient"16^B24
com.apple.mediaremote.mediaremoted.notificationQueue
_MROriginatingNotification
com.apple.mediaremote.companionLinkClient
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_APP_INSTALLED_KEY
MRXPC_BOOL_RESULT_KEY
System Media Wake - %@
Player Service Wake - %@
Bless Request - %@
v16@?0@"_MRDiagnosticProtobuf"8
com.apple.mediaremote.MRDMediaRemoteServer
No diagnostic info
XPC Client: %@:
MediaRemote Client Diagnostic
Collected at: %@
================================================================================
clientDiagnose
MRXPC_ROUTE_UID_KEY
q24@?0@"MRDMediaRemoteClient"8@"MRDMediaRemoteClient"16
com.apple.
kern.bootsessionuuid
Restoring state of client after daemon launch
%@ is invalid. You must provide a type, pid and bundleID with %@.
%@ type=%@
SendCommand
RelayServerMessage
BrowsableContentMessage
Transaction
RestoreState
Wake
Notification
UIPresentation
UnknownType
<MRDAutoConnectionControllerReason %@ - %@>
com.apple.mediaremote.MRDAutoConnectionController
player %@ started playing
q24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
%@ endpoint changed
autoConnectToEndpoint
autoConnectToEndpoint-%@
endpointChanged
proximity
reconnect
startedPlaying
requestDestination
MRDElectedPlayerControllerEventUserInfoKey
ElectedOrigin changed from <%@> (<%@>) to <%@> (<%@>)
%@ PlaybackQueueChanged
%@ Playback %@
NowPlayingAppChanged to %@
Was %@grounded
Fore
Back
activeSystemEndpointDidChange
ElectedPlayerController failed to connect
v16@?0^{__MRAVEndpointRef=}8
is playing
SiriIntent
was playing recently <%lf> seconds ago but not nowPlayingData
was not playing recently. Last played <%lf> seconds ago
%@ has no activePlayer
%@ is not foregrounded and does not support background audio
%@ has no activeNowPlayingClient
com.apple.mediaremote.electedplayercontroller.playbacktimer
%@ playback timeout event %@ after <%lf> seconds
electedPlayer %@ was not playing recently for event <%@>
electedPlayer %@ is playing for event <%@>
no electedPlayer for event <%@>
OriginChanged
PlaybackChanged
NowPlayingAppChanged
NowPlayingAppForegroundChanged
PlaybackQueueChanged
<%@:%p {
  started = %@
  connections = %@
APReceiverMediaRemoteXPCClient_SetDelegate
@"MRAirPlayTransportConnection"8@?0
AVOutputContextCommunicationChannel.didCloseCommunicationChannel
APReceiverMediaRemoteCommunicationChannel.didCloseCommunicationChannel
/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver
MediaRemote Diagnostic
================================================================================
Active Clients
Active Transactions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Elected Player
Elected Player Reason
LockScreen Widget Active
LockScreen Widget Visible
LockScreen Widget PlayerPath
Origin Forwarders
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
External Discovery Sessions
RemoteControlService
Local OutputContextDataSource
OutputContexts
BatchedNowPlayingState
Routing Server
System Discovery Mode (Legacy)
AirPlay Security Settings
Local Receiver Pairing Identity
System Active Endpoints
Auto Connecting Endpoints
Auto Connected Endpoints
Proximity Events
Nearby Devices
Medium Devices
Immediate Devices
Proximal Migrating Devices
Hosted Routing
Hosted Discovery Mode
Discovery Sessions
Endpoints:
Endpoint
External Device
v32@?0@"MRAVDistantEndpoint"8Q16^B24
Remaining External Devices
EndpointID: %@
v32@?0@8@"MRDAVHostedExternalDevice"16^B24
Concrete Discovery Session
Stream Count
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
Companion Link
RPDevice<routeID: %@>
Home Users
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
<%@ %p {
  AirPlayService = %@
  CompanionService = %@
  RapportService = %@
  IDSService = %@
com.apple.mediaremote.ui-control
<%@: %p bundleID=%@>
com.apple.MRDUIServer.messageQueue
CXCallObserver
B16@?0@"MRAVEndpoint"8
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
MRDAVOutputContextExternalDeviceDiscoveryLocalClusterTypeDidChangeNotification
MRDAVOutputContextExternalDevice.serialQueue
MRDAVOutputContextExternalDevice.workerQueue
MRDAVOutputContextExternalDevice.notificationQueue
startUp
PREWARM-DUMMY-DEVICE
v20@?0C8^v12
prewarmApp
v32@?0@"MRDMediaRemoteClient"8@"MRPlayerPath"16@"NSError"24
designatedGroupLeader
origin
outputContext
<%@: %p id=%@ leader=%@ origin=%@-%ld originFwd=%@>
<%@: %p {
    designatedGroupLeader = %@
    origin = %d:%@
    originForwarder = %@
    outputContextController = %@
    outputContext = %@
OutputContextExternalDevice does not have a designatedGroupLeader. (PreviousGroupLeader=%@)
Invalid routingContextID detected. From %@ to %@
handleRemoteCommand
Needed to interrupt %@ in order to continue with command
originCommand
Failed to commit group leader to output context
createPlayerAndWaitForConnection
Could not find xpcClient for playerPath %@
Could not find application in playerPath %@
createPlayerAndWaitForCanBeNowPlaying
Waiting for %@ to set canBeNowPlayingPlayer=YES
createPlayer
v24@?0@"NSObject<OS_xpc_object>"8@"NSError"16
@"NSObject<OS_xpc_object>"16@?0@"MRPlayerPath"8
_handlePlaybackQueueRequest
_handlePlaybackSessionRequest
@"MRProtocolMessage"16@?0@"MRPlayerPath"8
v24@?0@"MRProtocolMessage"8@"NSError"16
_handlePlaybackSessionMigrateRequest
interruptBestStreamIfNecessary
_handlePlaybackSessionMigrateBeginRequest
_handlePlaybackSessionMigrateEndRequest
setOutputDeviceVolume
Attempting to set and add/remove devices at the same time, which is unsupported
modifyOutputContext
Failed to find devices with UIDs: %@
v32@?0@"NSString"8@"MRAVConcreteOutputDevice"16^B24
MRDAVOutputContextExternalDevice<%@>
%@ %@
Local device changed clusterType in discovery
Local device changed clusterType to %u
External device is invalid (no designatedGroupLeader)
OutputContextExternalDevice-%@-%@:%@<%@>
BYSetupAssistantFinishedDarwinNotification
/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant
BYSetupAssistantNeedsToRun
com.apple.MediaRemote.connectionMonitor
<%@ %p : %@>
    stauts = %@
    currentMessageCount = %lu
    totalMessageCount = %lu
    lastMessageSent = %f seconds ago
    lastStatusCheck = %f seconds ago
    lastStatusChange = %f seconds ago
    pendingBarrierCompletion = YES
    paramters = {%lu x %f}
%@:%@-%d
XPCConnectionBarrier
Running
Suspended
com.apple.airplay.password
MostRecentlyUsedAVOutputDeviceUIDs
MRDRoutingServerDidStartNowPlayingSession
MRDRoutingServerDidStopNowPlayingSession
com.apple.mediaremote.routingServer.operationQueue
Restore
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v16@?0@"NSString"8
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v24@?0@"MRDAVRoute"8@"NSError"16
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_CUSTOM_XPC_ENDPOINT_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_AIRPLAY_LEADER_TYPE
requestID
MRXPC_ENDPOINT_LEADER_OPTIONS_KEY
v20@?0@"MRAVEndpoint"8I16
_handleStartNowPlayingSession
v32@?0@"MRPlayerPath"8@"MRDeviceInfo"16@"NSError"24
Returning local origin because device requires command redirection
%@<%@> looking for localDevice with groupID=%@
Rejecting endpoint %@ because localDevice %@ isAirPlayReceiverSessionActive=NO
Rejecting endpoint %@ because endpointGroupID %@ != %@
Discovered local device on endpoint: %@
Failed to query output context for local device
Failed to remove local device from existing context
com.apple.mediaremote.routingServer.getDeviceUID
MRXPC_ROUTING_CONTEXT_UID_KEY
@16@?0@"NSData"8
MRXPC_SOURCE_ENDPOINT_UID_KEY
MRXPC_MIGRATE_REQUEST_DATA_KEY
MRXPC_DESTINATION_ENDPOINT_UID_KEY
groupDevicesAndSendCommand
Analytics: Group devices and send message
createHostedEndpointForDevices
v16@?0@"MRAVOutputDevice"8
com.apple.mediaremote.removeFromParentGroup
com.apple.mediaremote.routingServer.getExternalDevice
MRXPC_ENDPOINT_UID_KEY
MRXPC_EXTERNAL_DEVICE_LISTENER_KEY
_handleModifyOutputContextMessage
MRXPC_MESSAGE_CUSTOM_ID_KEY
MRXPC_CONTEXT_MODIFICATION_DATA_KEY
ContextID=%@ %@
B16@?0@"MRAVConcreteOutputContext"8
Failed to create output context with UID=%@
v16@?0@"MSVSystemDialogResponse"8
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
com.apple.mediaremoted.MRDAVRoutingServer
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_RELAYFAILED_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_IPALIASING_MESSAGE
AIRPLAY_CLUSTER_ATV_ALERT_RELAYFAILEDMULTIDFSNETWORK_MESSAGE
AIRPLAY_CLUSTER_ATV_ALERT_MESSAGE
Cluster connect error
AIRPLAY_ATV_CLUSTER_TRY_AGAIN
AIRPLAY_ATV_CLUSTER_CHANGE_DEFAULT_OUTPUT
prefs:root=DefaultAudioOutput
com.apple.TVSettings
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_NOT_CONNETED_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
APReceiverMediaRemoteXPCClient_CopyProperty
AirPlaySecuritySetting
password
createHostedEndpointForOutputDeviceUIDs
Modifying output context: %@
setOutputDevices failed
Discovering endpoint with output context: %@
Discovered hosted endpoint in %.2f s: %@
Failed to discover endpoint with contextID: %@ in %.2f s
Unable to discovery any of the given output devices
Relaying command to cluster leader: %@
Remote createHostedEndpoint finished with groupUID: %@, error: %@
v24@?0@"NSString"8@"NSError"16
B16@?0@"MRAVOutputDeviceDescription"8
MRDAVRoutingServer/resolveEndpoint
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet
AVOutputContextDeviceConnectionFailureReasonInfraRelayFailedMultiDFSNetwork
AVOutputContextDeviceConnectionFailureReasonInfraRelayFailed2GHzNetwork
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
FBSOpenApplicationOptionKeyPayloadURL
/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
RequestingAuthorizationToken
ReceivedAuthorizationToken
Retried
Completed
Cancelled
Failed
CanSleep
WillSleep
WillPowerOn
B24@?0@"NSString"8@"MRDAVHostedExternalDevice"16
undiscoverable endpoint
Endpoint no longer is discoverable
disconnected
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
  artworkCache = %@
q24@?0@"MRDPlaybackQueueArtworkCacheSize"8@"MRDPlaybackQueueArtworkCacheSize"16
B16@?0@"MRDPlaybackQueueArtworkCacheSize"8
<%@:%p> {
  cache = %@
%lf x %lf
PBS.%@
AVSystemController_FullMuteAttribute
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_AudioCategoryNotificationParameter
com.apple.siri
MusicUIServiceNowPlayingViewController
com.apple.MusicUIService
MusicUIServiceMediaControlsViewController
MusicUIServiceLanguageOptionsViewController
MusicUIServiceMediaControlsMediumConfidenceViewController
MRDMediaRemoteClientDidConnect
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.%@.%@.%@-%d
r*16@?0@"NSString"8
com.apple.mediaremote.%@.xpcTargetQueue
serialQueue
com.apple.mediaremote.send-commands
com.apple.AssistantServices
com.apple.lskdd
com.apple.mediaremote.nearby-device
com.apple.mediaremote.request-bless
com.apple.mediaremote.set-now-playing-app
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
com.apple.PairingManager
%@-%ld
<%@ %p, bundleIdentifier = %@, pid = %ld>
<%@ %p {
    bundle identifier = %@
    pid = %ld
    euid = %ld
    xpc connection = %@
    connection monitor = %@
    current task assertion = %@
    assertions = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    has requested legacy nowPlayingInfo = %s
    has requested supported commands = %s
    subscribedWakingPlayerPaths = %@
    playbackQueueRequests = %@
com.apple.iapd
com.apple.iap2d
v16@?0@"MSVTaskAssertion"8
sendRemoteControlCommand
Redirecting command to local origin legacy handler. Command will be re-emitted under origin containing the local device: %@
Redirecting command to remoteEndpoint containing localDevice
Sending remote control command %@
 host process: %@(%d)
RequestPlaybackQueue
BeginLoadingBrowsableContent
%llu
Relaying XPC message %@ to client %@
MRXPC_ERROR_CODE_KEY
v24@?0@"NSString"8@"NSDictionary"16
v32@?0@"NSNumber"8@"NSValue"16^B24
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
MRDisplayMonitorLayoutDidChange
MRDisplayMonitorDisplayDidChangeNotification
com.apple.mediaremote.MRDDisplayMonitor
v32@?0@"FBSDisplayLayoutMonitor"8@"FBSDisplayLayout"16@"FBSDisplayLayoutTransitionContext"24
Display%@
LockScreen%@grounded
LockScreen%@Visible
ControlCenter%@Visible
FBSDisplayLayoutMonitor
FBSDisplayLayoutMonitorConfiguration
FBSDisplayLayoutElementLockScreenIdentifier
FBSDisplayLayoutElementControlCenterIdentifier
com.apple.mediaremote.MRDIDSServiceConnection
v32@?0@"MRDIDSServiceMessage"8@"NSString"16@"NSString"24
 deviceUID = %@
 device = %@
 service = %@
 destinationMessageHandlers = %@
 responseMessageHandlers = %@
 deviceMessageHandler = %@
 invalidationHandler = %@
 connectionHandler = %@
Device Connection was manually reset by the peer
Device fell out of IDS service
default
v24@?0@"NSDictionary"8@"NSError"16
B24@?0r*8@"NSObject<OS_xpc_object>"16
A reply object could not be created.
A reply connection could not be obtained.
MRDLaunchApplicationWithReason
com.apple.mediaservicesbroker.app
com.apple.SoundScapes
post-launch setup for  %@
com.apple.MediaRemote.command
invoked.notify.client
%@.%@.%@.%@
%@.%@.%@
%@.%@
v24@?0@"BSProcessHandle"8@"NSError"16
launchAppAndWaitForXpcConnection
Application <%@> waiting for xpcConnection
launchAppAndWaitForCanBeNowPlaying
Application <%@> waiting for CanBeNowPlaying
FallbackIdentifier-%d
SBSCopyFrontmostApplicationDisplayIdentifier
FBSOpenApplicationOptions
FBSOpenApplicationService
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
, options = %@
com.apple.BTAvrcp
com.apple.rcd
com.apple.AVRCP
<%@ %p, command = %@, routedToApp = %@>
-[MRDAVRoute initWithDictionary:]
com.apple.mediaremoted.UIController.%p
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
AVOutputDevice
com.apple.amp.mediaremote
MRDSystemEndpointEntry
MRDAVSystemEndpointController
MRDRedirectionCacheEntry
MRDRemoteControlServer
MRDPhoneCallObserverDelegate
NSObject
MRDXPCMessageHandling
MRDDiagnosticCollecting
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDUISessionServer
MRUIServerClientObserver
MRLockScreenUIServerXPCProtocol
MRQuickControlsUIServerXPCProtocol
MRScreenMirroringQuickControlsUIServerXPCProtocol
MRUIContextServerXPCProtocol
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDStreamCapacityManager
MRDStreamCapacityManagerAdditions
MRDNowPlayingPlayerClient
MRDNowPlayingPlayerClientPlaybackState
MRDNowPlayingPlayerClientPlaybackStateSnapshot
MRDBonjourRemoteControlService
NSNetServiceDelegate
MRDAVHostedExternalDeviceClient
MRXPCConnectionMonitorDelegate
MRAVDistantExternalDeviceClientProtocol
MRDAVHostedExternalDevicePendingClientState
MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications
MRDIDSService
IDSServiceDelegate
MRDIDSServiceMessage
MRDNowPlayingDataSourceApplication
MRDNowPlayingDataSourceSession
MRDNowPlayingDataSource
MRDOriginForwarder
MRDOutputDeviceRoutingDataSource
MRDRapportRemoteControlService
MRDRapportRemoteControlServiceConnection
NSSecureCoding
NSCoding
MRDProximityController
MRNowPlayingControllerDelegate
MRDAVOutputContextManager
MRDPinPairingDialog_ATV
MRDIDSDiscoverySession
MRDAVReconnaissanceSession
MRDAVLocalDeviceCommitManager
MRAVClusterObserver
MRDBrowsableContentServer
MRDRemoteControlDiscoverySession
MRExternalDeviceTransportConnectionDelegate
MRDAVHostedDiscoverySession
MRAVDistantRoutingDiscoveryServiceProtocol
MRDAVHostedRoutingObserver
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MREndpointObserver
MRDAVHostedRoutingService
NSXPCListenerDelegate
MRDAVHostedDiscoverySessionDelegate
MRDAVHostedRoutingController
MRDExternalDeviceCredentialDatabase
MRDIDSRemoteControlService
MRProtocolClientConnectionDelegate
MRDIDSRemoteControlServiceDiscoveryChannel
MRDIDSRemoteControlServiceRemoteControlChannel
MRDIDSRemoteControlServiceRemoteControlChannels
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDPersonalDeviceController
MRDExternalDeviceHomeServer
MRDExternalDeviceHomeServerRecentlyPlayedEntry
MRDIDSTransport
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDIDSTransportConnection
MRDAVRemoteControlClusterOutputDevice
MRDPinPairingDialog
MRUIServerProtocol
MRUIClientProtocol
MRDUIControllerConnection
MRDIDSCompanionRemoteControlService
NSStreamDelegate
MRDIDSCompanionRemoteControlServiceConnection
MRDTransportExternalDevice
MRJSONTransportExternalDevice
MRHID
MRDNowPlayingPlaybackQueueServer
MRDDeviceInfoDataSource
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceObserver
MRDDeviceInfoDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDNowPlayingObserverState
MRDMediaServerAVRoutingDataSource
MRDPinPairingDialog_CFUN
MRDLockScreenController
MRDPersonalDeviceControllerDelegate
MRDLockScreenContentControllerDelegate
MRDLockScreenAssertion
MRDConnectionLifetimeController
MRDAVHostedExternalDevice
MRExpanseManagerObserver
MRDConnectionLifetimeControllerDataSource
MRDConnectionLifetimeControllerDelegate
MRAVDistantExternalDeviceServiceProtocol
MRDExternalDeviceRemoteServer
MRCryptoPairingSessionDelegate
MRDRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTextEditingServiceDelegate
MRDServerMessageProxy
MRDHostedRoutingController
MRDHostedExternalDeviceManagerDelegate
MRDHostedRoutingControllerAdditions
MRDNowPlayingServer
MRDLockScreenControllerDelegate
MRDElectedPlayerControllerDelegate
MRDProximityControllerDataSource
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDTaskAssertion
MRDAutoConnectionControllerReason
MRDAutoConnectionController
MRDElectedPlayerController
MRDAirPlayRemoteControlService
AVOutputContextCommunicationChannelDelegate
APReceiverMediaRemoteCommunicationChannelDelegate
MRDDiagnostic
MRDRemoteControlService
MRDAirPlayRemoteControlServiceDelegate
MRDBonjourRemoteControlServiceDelegate
MRDRapportRemoteControlServiceDelegate
MRDIDSCompanionRemoteControlServiceDelegate
MRDIDSRemoteControlServiceDelegate
MRDRemoteControlServiceAdditions
MRDUIClient
MRUIServerXPCProtocol
MRUIClientXPCProtocol
MRLockScreenUIClientXPCProtocol
MRQuickControlsUIClientXPCProtocol
MRScreenMirroringQuickControlsUIClientXPCProtocol
MRDUIServer
MRDPhoneCallObserver
CXCallObserverDelegate
MRDIdleTopologySimplifier
MRDIDSServerClientConnection
MRDSleepAssertion
MRDAVOutputContextExternalDevice
MRXPCConnectionMonitor
MRDAVRoutingServer
MRDAVSystemEndpointControllerDelegate
AVOutputDeviceAuthorizationSessionDelegate
MRDiOSSimulatorNowPlayingDataSource
MRDSleepObserver
MRDHostedExternalDeviceManager
MRDVirtualAudioInputServer
MRDPlaybackQueue
MRDPlaybackQueueArtworkCache
MRAdditions
MRDPlaybackQueueArtworkCacheSize
NSCopying
MRDMediaServerVolumeController
MRDMediaRemoteUIService
SBSRemoteAlertHandleObserver
MRDMediaRemoteClient
MRDVirtualTouchDevice
MRDDisplayMonitor
MRDIDSServiceConnection
MRDRouteAuthorizationRequest
MRDUIClientMessageForwarder
MRDUIClientBSMessageForwarder
MRDUIClientXPCMessageForwarder
MRDLockScreenContentController
MRDPairingHandler
MRDRemoteControlCommand
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDUIControllerProvider
MRDUIController
MRDXPCUIController
MRLockScreenUIControllable
MRUIControllable
MRQuickControlsUIControllable
MRScreenMirroringQuickControlsUIControllable
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDOutputDeviceRoute
MRDAVOutputDeviceRoute
minimalReadableDescription
adjustOutputDeviceVolume:outputDevice:queue:completion:
filteredContentItemsBySubscriptionsForContentItems:
scheduleSendBarrierBlock:
companionLinkDevices
identifyingMACAddress
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
dataWithContentsOfFile:
removeAllObjects
first
initWithGameControllerProperties:controllerID:
useAPSyncAPI
initWithTimeIntervalSinceReferenceDate:
supportedProtocolMessages
setBundleVersion:
useClusterDevices
discoverySessionWithConfiguration:
setDiscoveryMode:forToken:
dataWithPropertyList:format:options:error:
perform:completion:
sharedServiceClient
initWithGroupUID:
initWithTimeout:reason:handler:
firstObject
adjustment
useExternalDeviceSystemPairing
compare:options:
bundleInfoValueForKey:PID:
setDiscoveryOutputDevicesChangedCallback:forToken:
initWithHandlerStatuses:sendError:
removeAllOutputDevices
screenSize
discoverySessionWithEndpointFeatures:
sharedSystemAudioContext
isPrimaryLocalDevice
setByAddingObjectsFromArray:
airPlayGroupID
setLength:
bundleVersion
searchEndpointsForGroupUID:timeout:reason:queue:completion:
setSupportsACL:
mode
minusSet:
initWithHiliteMode:
imageData
sharedSystemScreenContext
initWithTimeout:reason:queue:handler:
airPlayGroupUID
dateByAddingTimeInterval:
usePeerToPeerExternalDeviceConnections
floatValue
bundleWithURL:
modelID
searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:
performMigrationToEndpoint:request:queue:completion:
buttonEvent
shortValue
setLinkAgent:
initWithTitle:
isRemoteControllable
useProactiveEndpoint
componentsJoinedByString:
setSupportsExtendedMotion:
primaryID
searchEndpointsWithPredicate:timeout:reason:queue:completion:
initWithIdentifier:type:displayName:
performMigrationToOutputDevices:request:initiator:queue:completion:
isResolved
searchForOutputDeviceUID:timeout:reason:queue:completion:
dateWithTimeIntervalSince1970:
removeClient:
setSupportsMultiplayer:
shouldBeLocallyHosted
buttonIdentifier
dismiss
bytes
includeArtwork
performWithPreferences:completion:
second
indexOfObject:
priority
dateWithTimeIntervalSinceNow:
shouldConnectToLocalEndpoint
supportsImplicitChangeShuffleAndRepeatModeInSetPlaybackQueueCommandOptions
removeDelegate:
initWithIdentifiers:
forceDeviceInfoDiscovery
userData
setSupportsSharedQueue:
processIdentifier
setPlaybackSessionMigrateRequestCallback:
computeNowPlayingApplication
supportsMultiplayer
setCanAccessAppleMusic:
initWithUTF8String:
cachingPolicy
setLocalLastPlayingDate:
initWithInputMode:
dateWithTimeIntervalSinceReferenceDate:
initWithUnderlyingCodableMessage:error:
setDismissOverlaysOnLockscreen:
setCanAccessRemoteAssets:
initWithInputStream:outputStream:
indexOfObject:inRange:
modifyWithOutputContext:queue:completion:
setSupportsSystemPairing:
supportsSharedQueue
allKeys
setCanAccessiCloudMusicLibrary:
removeEndpointsChangedCallback:
personalDeviceLockScreenTimeout
userInfo
setDispatchQueue:
monitorWithConfiguration:
indexOfObjectPassingTest:
forceEnableCECVolume
selector
displayBacklightLevel
initWithUniqueIdentifier:
initWithInterval:name:queue:block:
synchronize
processInfo
debugName
personalDeviceState
isSubsetOfSet:
setDisplayName:
configurationWithEndpointFeatures:
configurationForDefaultMainDisplayMonitor
shouldInitializeGenericBonjourService
initWithInterval:repeats:queue:block:
userInitiated
properties
setSystemBooksApplication:
allObjects
personalDeviceUIDs
isSupported:
calls
removeItemAtURL:error:
configureConnection:
setPlayer:
shouldInitializeIDSService
initWithVersion:data:
propertyListWithData:options:format:error:
synchronousRemoteObjectProxyWithErrorHandler:
indexesOfObjectsPassingTest:
initWithIsMuted:
decodeObjectOfClass:forKey:
allSharedAudioOutputContexts
valueForEntitlement:
canAccessAppleMusic
valueForKey:
setSystemMediaApplication:
setDistantPersonalOutputDevices:
setLocalPlaybackState:
gain
initWithVolume:
protobuf
initWithKey:data:
isUsingJSONProtocol
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
removeLocalDevice
shouldInitializeRapportService
canAccessRemoteAssets
defaultCenter
valueForKeyPath:
initWithVolume:endpointUID:outputDeviceUID:
info
distantFuture
distantPast
shouldInitializeTelevisionBonjourService
mr_all:
systemBooksApplication
defaultManager
sendCommand:options:queue:completion:
initWithLastPlayingDate:
infoDictionary
nowPlayingSessionIdentifier
generateDescriptor
canAccessiCloudMusicLibrary
setLocalizedModelName:
initWithVolume:outputDeviceUID:
setSystemPodcastApplication:
shouldLogPairingSetupCode
mr_any:
domain
connectToEndpointWhenBeginsPlayback
allValues
defaultPlaybackQueueRequest
valueForProperty:
setTXTRecordData:
connectToExternalDeviceWithOptions:userInfo:completion:
valueWithBytes:objCType:
isVolumeControlAvailable
setClientBundleIdentifier:
mr_compactMap:
protocolForProtocol:
initWithLastSupportedMessageType:
canBeClusterMember
setLocallyHosted:
effectiveBoolValueForSetting:
getActivePairedDevice
defaultPlaybackQueueRequestWithRange:
isWaking
removeObject:
setLocation:
setPopulatesExternalDevice:
getBytes:length:
initWithListenerEndpoint:
mr_deviceInfo
connectToExternalDeviceWithUserInfo:completion:
protocolMessageWithProtobufData:error:
sendError
initWithWithSendError:description:
initWithListeningMode:outputDeviceUID:
initFromTransactionName:
removeObjectAtIndex:
effectiveValuesForUnionSetting:
defaultPlayer
systemEndpointUpdates
initWithMRError:
elapsedTimeTimestamp
mr_filter:
allowAllClientUIConnections
setClientMessageCallback:
protocolVersion
sendEvent:destination:userInfo:
nowPlayingUpdates
getClusterStatus:
removeObjectForKey:
null
systemMediaApplication
getValue:
mr_first:
initWithAPCommunicationChannel:
setTightSyncUID:
initWithMRError:description:
setPrimaryUID:
defaultRequest
setClientMessagingExpectation:
initWithAVOutputContext:type:
connectToUserSelectedEndpoint
sendEvent:toDevicesOfHomeUser:userInfo:
keyboardUpdates
verboseConnectionMonitorLogging
verboseHostedDiscoverySessionLogging
initWithMRError:format:
mr_formattedDebugDescription
setPriority:
shouldWakeDeviceForRemoteControlCommands
setClusterAware:
sendEventToCompanion:userInfo:
removeObjectIdenticalTo:
numberWithBool:
removeObjectsForKeys:
verboseHostedExternalDeviceClientLogging
getVolume:forCategory:
showUncommitedDevices
systemPodcastApplication
groupContainsDiscoverableGroupLeader
publishWithOptions:
mr_map:
setProcessIdentifier:
proxyWithObject:protocol:
setClusterID:
initWithMRError:userInfo:
anonymousListener
sendEventToHome:userInfo:
connectedClientAuditTokens
setManagedConfigurationDeviceIdentifier:
defaultSupportedCommandsData
numberWithDouble:
groupContainsGroupLeader
elements
absoluteString
mr_outputDevice
initWithMode:configuration:
lastBootUUID
setClusterLeaderID:
canMigrateToEndpoint:queue:completion:
initWithAVOutputDevice:sourceInfo:
removeObjectsInRange:
initWithAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:clusterAwareAddingOutputDeviceUIDs:clusterAwareRemovingOutputDeviceUIDs:clusterAwareSettingOutputDeviceUIDs:
setProcessUserIdentifier:
verboseMRDMediaRemoteClientLogging
numberWithFloat:
sendGameControllerEvent:
anyClient
_notifyDelegateDidCloseWithError:
initWithName:
mr_sharedIDSService
signatureWithObjCTypes:
verboseNowPlayingStateObserver
encodeObject:forKey:
setClusterType:
setMaxConcurrentOperationCount:
anyObject
acquire
canRelayCommunicationChannel
initWithAllSupportedMessages
lastObject
takelockScreenAssertion
sendLastPlayingDeviceToHome
numberWithInt:
verboseOriginForwarderLogging
groupID
_notifyDelegateDidReceiveData:
skeleton
removeObserver:name:object:
msv_compactMap:
acquireContentProviderAssertionForType:slot:identifier:errorHandler:
setClusteredDevices:
setExpectedClientAuditTokens:
setMaxResults:
setProtocolVersion:
initWithArray:
sendMessage:
encryptedMessageWithState:text:attributes:usingCryptoSession:
numberWithInteger:
verboseRemoteControlDiscoveryLogging
anyOrigin
groupLeader
msv_filter:
canSetVolume
removeOrigin:
textFieldValues
tightSyncUID
insertObject:atIndex:
setProxyGroupPlayer:
initWithArray:copyItems:
encryptionType
sendMessage:expectedMessage:timeout:queue:reply:
setTransitionHandler:
numberWithUnsignedInt:
intValue
groupUID
anyPlayer
msv_firstWhere:
setCommand:
removeOriginRequests:
time
lastPlayingDeviceThresholdInterval
groupedDevices
numberWithUnsignedInteger:
setExportedInterface:
sendMessage:queue:reply:
endEvent:
setTransportOptions:
endMirroringSession
integerValue
msv_map:
anyPlayerPath
lastSupportedMessageType
timeIntervalSince1970
sendMessage:timeout:queue:reply:
setExportedObject:
connectionType
interfaceWithIdentifier:
version
endNowPlayingSession
initWithBundleIDs:states:
numberWithUnsignedLong:
timeIntervalSinceDate:
multipleBuiltInDevices
initWithBundleIdentifier:
sendMessage:toDestinations:priority:options:identifier:error:
removeOutputDeviceFromParentGroup:queue:completion:
sortDescriptorWithKey:ascending:
activate
laterDate:
numberWithUnsignedLongLong:
initWithNotification:userInfo:
connectionWithEndpoint:
timeIntervalSinceNow
mutableCopy
deleteIdentityWithError:
removeOutputDevices:
setCommunicationChannelDelegate:
appIcon
launchApplicationTimeoutInterval
setExternalDevice:
changeDescriptionTo:keyBlock:isUpdatedBlock:descriptionBlock:
initWithNowPlayingInfo:
interfaceWithProtocol:
sortUsingComparator:
setExternalDeviceListenerEndpoint:
objCType
initWithButtonEvent:
timeIntervalSinceReferenceDate
virtualDeviceID
activateWithCompletion:
sortedArrayUsingComparator:
initWithBytes:length:
playbackSession
initWithNowPlayingState:
removeOutputDevices:initiator:withCallbackQueue:block:
object
setForceModalAlertAppearance:
containsDevice:
setUniqueIdentifier:
appState
removeOutputDevices:initiator:withReplyQueue:completion:
appendFormat:
length
handleForIdentifier:error:
initWithNowPlayingUpdates:artworkUpdates:volumeUpdates:keyboardUpdates:outputDeviceUpdates:systemEndpointUpdates:subscribedPlayerPaths:
playbackSessionData
sortedArrayUsingDescriptors:
objectForKey:
activateWithContext:
intersectsSet:
removeOutputDevicesChangedCallback:
initWithBytes:length:encoding:
appendString:
endpointForMachName:service:instance:
initWithCString:encoding:
setConnected:
sourceInfo
objectForKeyedSubscript:
containsObject:
setUseWeakMatching:
initWithObjects:
endpointRecentlyUserSelectedInterval
queuedCommandsTimeoutInterval
initWithOptions:
setGroupContainsDiscoverableGroupLeader:
removePeer
_createConnectionWith:groupID:connectionType:shouldUseSystemAuthenticationPrompt:userInfo:
sendPlaybackSessionUpdateToCompanionCoalesceInterval
initWithCapabilities:
needNowPlayingForegroundState
applicationInfoForApplication:
containsOutputDeviceWithUID:
visibility
invalidateOnDate:
setConnectedClientAuditTokens:
setGroupContainsGroupLeader:
raise:format:
needsCommandRedirection
voiceRecordingState
characterCount
timerWithInterval:queue:block:
containsString:
invalidateWithReason:
initWithCapabilities:endpointUID:outputDeviceUID:
setGroupID:
listeningMode
setUserData:
initWithOrigin:client:player:
range
initWithCapacity:
setReason:
containsUID:
timerWithInterval:repeats:queue:block:
standardCredentials
objectsAtIndexes:
removeRequest:
checkXPCConnectionStatusDefaultInterval
setGroupLeader:
rangeContainsNowPlayingItem
tintColor
checkXPCConnectionStatusDefaultResponseTimeout
standardUserDefaults
initWithClient:
setGroupLogicalDeviceCount:
setUserDisplayPreferencesDidChangeCallback:
title
invokeWithTarget:
newHandleWithDefinition:configurationContext:
notification
enumerateFilteredContentItemsBySubscriptionsForContentItems:block:
volumeCategoryForAudioCategory:
applicationProxyForIdentifier:
setUserInfo:
setGroupName:
enumerateKeysAndObjectsUsingBlock:
setRecordingState:
open
localClient
handlerReturnStatuses
setGroupUID:
setNowPlayingInfo:policy:request:
initWithOutputContext:
contentItemForIdentifier:
removingOutputDeviceUIDs
enumerateObjectsUsingBlock:
archivedDataWithRootObject:requiringSecureCoding:error:
setValue:forKey:
volumeControlCapabilitiesForOutputDeviceUID:error:
contentItemWithOffset:
replaceObjectAtIndex:withObject:
setRegisteredKeyboardUpdates:
initWithCommand:options:playerPath:
setVoiceRecordingState:
openApplication:withOptions:completion:
setGroupedDevices:
senderDefaultGroupUID
startEvent:
startMirroringSession
setRegisteredToNowPlayingUpdates:
array
initWithOutputContextCommunicationChannel:outputContext:
isAirPlayActive
volumeForOutputDeviceUID:error:
replyIdentifier
volumeUpdates
setObject:forKey:
arrayByAddingObject:
setHandler:
setRegisteredToOutputDeviceUpdates:
localLastPlayingDate
hasAuxiliaryProperties
hasArtworkAvailable
startMonitoringWithOptions:
initWithOutputDevice:groupID:connectionType:
initWithCommandID:commandResult:
setRegisteredToSystemEndpointUpdates:
deviceClass
arrayByAddingObjectsFromArray:
setObject:forKeyedSubscript:
replyWithMessage:
contextForSessionIdentifier:
hasElapsedTimeTimestamp
wakingPlayerPathAssetionDuration
startNowPlayingSession
setHasIsVolumeControlAvailable:
initWithOutputDevice:proxyOutputDevice:
setRegisteredToVolumeUpdates:
errorWithDomain:code:userInfo:
localOrigin
setVolume:outputDeviceUID:
arrayWithCapacity:
activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval
request
optionsWithDictionary:
notifyDevicesInHomeThatPlaybackStarted
isAuxiliary
arrayWithObjects:count:
deviceForFromID:
initWithOutputDeviceDescription:
isClusterLeader
transactionWaitDurationOnNetworkSend
hasLength
hasEnded
initWithOutputDeviceUID:
transactionWaitDurationOnOutOfMemory
artwork
notifyDiscoveryOutputDevicesChanged:forConfiguration:
registerDiscoveryTokenForConfiguration:
requestByRemovingArtwork
localPlaybackState
initWithOutputDeviceUID:reason:
registerEvent:callback:
notifyOutputDevicesChanged:
isCompanion
transactionWaitDurationOnXpcSend
hasLocation
activeTelevisionRouteID
localPlayerPath
artworkByResizingWithWidth:height:
initWithOutputDeviceUIDs:
setRemoteControlInterfaceID:
URLByAppendingPathComponent:
controllerID
serviceWithDefaultShellEndpoint
copy
exceptionWithName:reason:userInfo:
requestForSubscribedContentItemIdentifier:
clearSessions
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
setRemoteObjectInterface:
transportType
artworkData
count
weakObjectsHashTable
setCryptoEnabled:
requestID
UTF8String
deviceInfoForOrigin:
URLWithString:
initWithOutputDevices:
originClientRequestsForPlayerPath:
artworkHeight
countByEnumeratingWithState:objects:count:
weakProxyWithObject:protocol:
requestIdentifier
triggerAudioFadeInWithReplyQueue:completion:
initWithOutputDevices:configuration:
hasPlaceholder
UUID
deviceInfoForOrigin:queue:completion:
localizedDescription
initWithConnection:queue:defaultReplyQueue:
artworkWidth
hasPlaybackRate
isEligibleForSpatialization
setRequest:
setHasVolume:
clientBundleIdentifier
setRequestClientProperties:
triggerAudioFadeOutForNowPlayingApplicationWithReplyQueue:completion:
registerObserver:
UUIDString
initWithConnectionState:
attributeForKey:
deviceIsActiveTelevision:
requiresCustomPairing
requiresAuthorization
existingOriginClientRequestsForPlayerPath:
hasPlaybackStateTimestamp
setRequestLastPlayingDate:
localizedFailureReason
setHomepodDemoMode:
setActivatingForSiri:
nowPlayingApplicationTimeout
localizedModelName
WHAIdentifier
attributeWithDomain:name:
setOriginUID:
setActivationHandler:
initWithPairingData:status:
setWaking:
setVolumeTo:forCategory:
setHostDeviceClass:
initWithContentItems:
setRequestPlaybackQueue:
createCustomOriginClientForOrigin:
setOutputDevice:options:
setOutputContextForLocalDeviceDataSource:
isEqualToArray:
localizedName
writeToFile:options:error:
setRequestPlaybackState:
initWithContentItems:forPlayerPath:
setHostName:
existingSubscriptionControllerForPlayerPath:
audioSessionType
initWithContentItems:location:
unarchivedObjectOfClass:fromData:error:
hasPrefix:
location
writeToURL:options:error:
reserveSlotForLocal
isEqualToData:
setOutputDeviceIsMuted:outputDevice:queue:completion:
expanseSessionActive
registerRequest:callback:
setRequestSupportedCommands:
setHostPort:
unarchivedObjectOfClasses:fromData:error:
addDelegate:queue:
initWithPlaybackSession:
expanseSessionHasActiveActivity
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
isEqualToDate:
hasRequest:
initWithPlaybackSession:request:forPlayerPath:
initWithControllerID:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
setReturnPartialResults:
isEqualToDictionary:
initWithData:
deviceSupportsSessions
addEndpointsChangedCallback:
addEntriesFromDictionary:
expectedClientAuditTokens
setOutputDeviceVolume:outputDevice:queue:completion:
isEqualToOrderedSet:
uniqueIDOverride
setRoutingContextID:
initWithData:forKey:
createEndpointWithOutputDeviceUIDs:options:queue:completion:
outputContextManagerForAllOutputContexts
isEqualToSet:
setIdentifier:
registeredKeyboardUpdates
stringByAppendingFormat:
initWithPlayerPath:lastPlayingDate:
stringByAppendingPathComponent:
authorizationTokenType
isEqualToString:
setWithArray:
setIdentityCreatedHandler:
_setQueue:
clientInterface
registeredToNowPlayingUpdates
devices
setOutputDevices:
stringByDeletingLastPathComponent
xpcMessage
initWithDeallocHandler:
addHandlerReturnStatus:
setWithCapacity:
setIdentityDeletedHandler:
outputDeviceForUID:
initWithProcessIdentifier:bundleIdentifier:
registeredToOutputDeviceUpdates
setSecure:
stringByReplacingOccurrencesOfString:withString:
auxiliaryOutputContext
setAirPlayActive:
initWithDefaultSupportedCommands:forPlayerPath:
setWithObject:
isGizmo
setIncludeMetadata:
resolvePlaceholdersForDeviceInfo:
setDefaultButtonTitle:
outputDeviceIsMuted:queue:completion:
registeredToSystemEndpointUpdates
diagnosticInfo
stringWithCString:encoding:
setOutputDevices:initiator:withCallbackQueue:block:
avOutputContext
setIncludesPeerToPeer:
initWithProperties:
setAirPlayGroupID:
setOutputDevices:initiator:withReplyQueue:completion:
initWithQueue:
registeredToVolumeUpdates
homeKitUserIdentifiers
dictionaryForKey:
stringWithFormat:
createOutputContextWithUniqueIdentifier:
setSenderDefaultGroupUID:
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:
setWithObjects:
logEvent:withInfo:
setAirPlayGroupUID:
homepodDemoMode
unregisterDiscoveryToken:
addMessage:
setServer:
isGroupable
close
initWithRange:
stringWithUTF8String:
exportOutputDevices:endpoint:
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:
setAirPlayReceivers:
logicalDeviceID
outputDeviceUIDs
setDelegate:queue:
creatorProcessID
nowPlayingClientRequests
initWithRecordingState:
isHomepodDemoApplication
initWithDestination:
dictionaryWithCapacity:
setXpcEndpoint:
logicalOutputDeviceCount
addObject:
isHosted
setInterface:
cryptoEnabled
outputDeviceUpdates
settingOutputDeviceUIDs
setDescriptor:
strongToWeakObjectsMapTable
initWithRequest:
availableEndpointsDidChange:
longLongValue
subscribeToPlaybackQueue:forRequest:
respondWithAuthorizationToken:completionHandler:
hostProcess
sharedAVSystemController
addObjectsFromArray:
response
setInterfaceTarget:
exportedInterface
cryptoSession
setAlertHeader:
postNotificationName:object:
setServiceQuality:
dictionaryWithDictionary:
initWithRequest:error:playerPath:
isIntegratedDisplay
sharedAudioPresentationContext
setInterruptionHandler:
lowercaseString
unsignedIntValue
isLegacyNowPlayingInfoRequest
setDesignatedGroupLeaderWhenContextEmpty:
dictionaryWithObjects:forKeys:count:
mainBundle
setAlertMessage:
initWithRequest:forPlayerPath:
initWithDeviceFeatures:
dictionaryWithObject:forKey:
subscriptionControllerForPlayerPath:
addObserver:selector:name:object:
isLocal
currentConnection
postNotificationName:object:userInfo:
unsignedIntegerValue
sharedAudioPresentationOutputContext
initWithRequest:playerPath:
availableOutputDevicesDidChange:
addObserverForName:object:queue:usingBlock:
initWithDeviceID:errorCode:
setIsAirPlayReceiverSessionActive:
clusterID
disarm
setAlternateButtonTitle:
sharedAuthorizationSession
managedConfigurationDeviceIdentifier
initWithDeviceInfo:
outputDeviceWithUID:
baseGroupID
initWithResponse:
isLocalEndpoint
clusterLeaderUID
setSharedQueueVersion:
restoreStateFromController:
setAlwaysAllowUpdates:
match:
initWithDeviceType:deviceSubtype:uid:name:modelID:
nowPlayingObserverCoalesceInterval
addOperationWithBlock:
setPairedDeviceSync:
outputDevices
initWithRole:device:
baseParentGroupID
resume
externalDeviceDisconnectSleepDuration
clusterStatus
sharedConnection
matchesUID:
externalDeviceDisconnectWaitDuration
suggestionsDisabledInContext:
setPairedPeerRemovedHandler:
reverseObjectEnumerator
addOutputDevices:initiator:withCallbackQueue:block:
setIsGroupLeader:
initWithRoute:inputType:
currentProtocolVersion
supportCoordinatedVolume
clusterType
supportExpanseMigration
initWithDeviceUID:sessionUID:targetDevice:error:
setPairingAllowed:
revision
sharedController
setIsLocalDevice:
currentRouteHasVolumeControl
addOutputDevices:initiator:withReplyQueue:completion:
clusterUID
setArtwork:
setArtworkHeight:
supportIDSDiscovery
updateOutputDevices:
addOutputDevicesChangedCallback:
currentRunLoop
beginSearchWithTimeout:mapCompletion:
setDeviceClass:
supportLastPlayingDevice
maxTransactionMemorySize
currentSettings
setShouldVerboselyLog:
sharedIDSCompanionLinkClient
updatePeer
code
setShowAsTopmost:
initWithRoute:status:
bluetoothAddress
setArtworkWidth:
disconnectWithError:
setArtworkURLTemplates:
supportLockscreenPlatterDisplayForPersonalDevice
setShowOnLockscreen:
pairedDevices
mediaRecentlyPlayedInterval
supportMultiplayerHost
sharedInstance
externalDeviceSleepAssertionOnClientConnectDuration
setIsProxyGroupPlayer:
addRequest:
command
isMultiplayerAware
externalDeviceTimeoutDuration
discoverEndpointTimeoutInterval
setAttribute:forKey:error:
boolForKey:
initWithDomain:type:name:
sharedLocalDevice
setParentGroupContainsDiscoverableGroupLeader:
setIsRemoteControllable:
sharedLocalEndpoint
supportNanoLinkAgent
initWithRoutingContextUID:multipleBuiltInDevices:
boolValue
setParentGroupContainsDiscoverableLeader:
initWithEndpointFeatures:
routingContextID
addSharedAudioOutputContext
supportNanoStandalone
sharedLocalEndpointForRoutingContextWithUID:
setIsVolumeControlAvailable:
setDeviceSpecificUserInfo:
mediaRouteIdentifier
broadcastCommandWaitDuration
setParentGroupIdentifier:
parentApplicationBundleIdentifier
supportNowPlayingPIP
parentGroupContainsDiscoverableGroupLeader
sharedLogger
initWithErrorCode:deviceIdentifier:
dataForKey:
fadeType
commandInfosFromData:
mergeFrom:
mediaType
initWithEvent:
addTextField:
discoveryDescription
dataFromDeviceInfos:
remoteDeviceIdleDisconnection
parentGroupContainsDiscoverableLeader
fileExistsAtPath:
commandResult
supportNowPlayingSessionDataSource
setKeyboardType:
buffer
isPairedDeviceSync
dataFromTXTRecordDictionary:
remoteDeviceIdleDisconnectionInterval
iTunesAudioContext
setLabel:
commandResultWithSendError:
remoteObjectProxy
parentGroupID
fileSystemRepresentation
initWithFadeDuration:error:
setBluetoothAddressChangedHandler:
buildVersion
supportSessionBasedLockScreenPlatter
updateVolume:outputDeviceUID:
setPersonalDeviceState:
isPairingAllowed
setDiagnosticInfo:
sharedOutputContextController
addingOutputDeviceUIDs
fileURLWithPath:
parentGroupIdentifier
initWithServiceName:viewControllerClassName:
initWithFirst:second:
metadata
setBool:forKey:
setLastBootUUID:
updateVolumeControlCapabilities:outputDeviceUID:
initWithSkeleton:
dataUsingEncoding:
isPersonalRoute
setSupportedMessages:
remoteTargetWithLaunchingAssertionAttributes:
initWithString:
remoteObjectProxyWithErrorHandler:
sharedQueueVersion
setBuildVersion:
identifierWithPid:
uppercaseString
bundle
initWithFormat:
dataWithBytes:length:
initWithSuiteName:
description
outputDeviceUID
setOutputDeviceUID:
type
setType:
date
setDate:
event
setEvent:
eventReason
setEventReason:
selectionReason
setSelectionReason:
changeType
setChangeType:
.cxx_destruct
_outputDeviceUID
_type
_date
_event
_eventReason
_selectionReason
_changeType
T@"NSString",&,N,V_outputDeviceUID
Tq,N,V_type
T@"NSDate",&,N,V_date
Tq,N,V_event
T@"NSString",&,N,V_eventReason
T@"NSString",&,N,V_selectionReason
Tq,N,V_changeType
init
_handleOriginDidRegisterNotification:
_handleOriginDidUnregisterNotification:
_handleOutputContextDidAddOutputDeviceNotification:
_handleIsPlayingDidChangeNotification:
_deviceInfoDidChange:
dealloc
initWithRoutingController:
systemEndpointInfo
activeOutputDeviceUID:
updateUserSelectedSystemEndpoint:event:eventReason:
updateUserSelectedSystemEndpoint:
clearUserSelectedOutputDeviceUID:event:reason:clientBundleIdentifier:
originClientForDeviceUID:
_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:
_onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:
_onSerialQueue_calculateActiveEndpoint:event:reason:
_onSerialQueue_calculateUserSelectedEndpointForEvent:reason:
_onSerialQueue_calculateProactiveEndpoint:
_onSerialQueue_updateSystemEndpoint:type:event:eventReason:
_onSerialQueue_reconnectToOutputDevice:completion:
_onSerialQueue_maybeSetupUserSelectedTimerForEvent:
_onSerialQueue_maybeSetupPlaybackTimerForEvent:
_hasPersonalDeviceForContext:
_writeSystemEndpointInfo:
_initializeSystemEndpointInfo
delegate
setDelegate:
_serialQueue
_userDefaultQueue
_nowPlayingServer
_routingController
_systemEndpointEntries
_cachedHasPersonalDevices
_userDefaults
_userSelectedTimer
_playbackTimer
_activeOrigin
_delegate
T@"NSDictionary",R,N
T@"<MRDAVSystemEndpointControllerDelegate>",W,N,V_delegate
playerPath
setPlayerPath:
commandDictionary
setCommandDictionary:
completionBlockDictionary
setCompletionBlockDictionary:
_playerPath
_commandDictionary
_completionBlockDictionary
T@"MRPlayerPath",C,N,V_playerPath
T@"NSMutableDictionary",&,N,V_commandDictionary
T@"NSMutableDictionary",&,N,V_completionBlockDictionary
_clientDidConnectNotification:
_handlePlayerIsPlayingDidChangeNotification:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
phoneCallObserver:callDidChange:
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
sendRemoteControlCommand:completion:
broadcastRemoteControlCommand:
broadcastRemoteControlCommand:completion:
sendRemoteControlCommand:toClients:completion:
clearContextsForClient:
remoteControlClients
_handleSendCommandMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
_handlePrewarmMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsCommandMessage:fromClient:
_handleDismissMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsLanguageOptionsCommandMessage:fromClient:
_handleGetPendingCommandsMessage:fromClient:
_handleSendPlaybackSessionMessage:fromClient:
_handleSendPlaybackSessionMigrateBeginMessage:fromClient:
_handleSendPlaybackSessionMigrateEndMessage:fromClient:
_handleTriggerAudioFadeMessage:fromClient:
_forwardCommand:completion:
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
_sendRemoteControlCommand:toDestinationClient:withLegacyCompletion:
_sendRemoteControlCommand:toDestinationClient:withCompletion:
_enqueueCommand:forApplication:withCompletion:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_sendQueuedCommandsForDestinationClient:
_clearQueuedCommandsForApplicationWithDisplayID:
_clearAllQueuedCommandsForReason:
_enqueuedCommandsForDisplayID:
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
_remoteControlContextForCommand:
_contextuallyAwareDestinationAppDisplayIDForCommand:
_shouldIgnoreCommand:completion:
_applicationIsRunning:
_createBroadcastCommandResponseFromStatuses:forClient:
_createBroadcastCommandPlayerPathForClient:
_isCommandCacheCreating:
_isCommandCacheable:
_effectiveContextIDForCommand:
_resolveCommandBeforeSend:toClient:error:
_performCommandProcessingAfterSend:
_persistPlaybackSessionAndUpdateOptionsForSessionPreloadCommand:forClient:error:
_cleanUpPersistedSessionForSessionPreloadCommand:
_onQueue_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:
_commandQueuesForDisplayIDs
_pendingSendPlaybackSessionDisplayIDs
_remoteControlContexts
_callObserver
_remoteAlertWorkerQueue
_fadeOutNotificationToken
_redirectionCache
_remoteControlDialog
T@"NSArray",R,N
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
adjustVolume:error:
setIsMuted:error:
routingDataSource
currentVolume
isMuted
capabilities
_isMuted
_currentVolume
_capabilities
_routingDataSource
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
Tf,R,N,V_currentVolume
TB,R,N,V_isMuted
TI,R,N,V_capabilities
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
initWithContextID:originatingAppDisplayID:
routedCommands
addRoutedCommand:
clearRoutedCommands
contextID
originatingAppDisplayID
_routedCommands
_commandQueue
_contextID
_originatingAppDisplayID
T@"NSString",R,N,V_contextID
T@"NSString",R,N,V_originatingAppDisplayID
pickedRoutes
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRoutesForCategory:source:
pickedRouteForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
addAuthorizationCallbackForRouteID:requestCallback:
removeAuthorizationCallbackForRouteID:
authorizationRequestCallbackForRouteID:
discoveryMode
setDiscoveryMode:
pickedRoute
externalScreenType
_authorizationCallbacks
_discoveryMode
_externalScreenType
_pickedRoute
TI,N,V_discoveryMode
T@"MRDAVRoute",R,N,V_pickedRoute
TI,R,N,V_externalScreenType
clientConnected:
clientDisconnected:
acquireLockScreenControlsAssertionWithReply:
releaseLockScreenControlsAssertionWithReply:
acquireQuickControlsAssertionWithReply:
releaseQuickControlsAssertionWithReply:
acquireScreenMirroringQuickControlsAssertionWithReply:
releaseScreenMirroringQuickControlsAssertionWithReply:
contextForSessionIdentifier:reply:
evaluateState
sessionController
queue
_sessionController
_queue
T@"MRUISessionController",R,N,V_sessionController
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_dispatchKeypressEventWithUsagePage:usage:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_processID
_bundleID
T@"NSString",R,N,V_bundleID
Ti,R,N,V_processID
_handlePlaybackStateDidChange:
sharedManager
canActivateStreamWithPlayerPath:
interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:reason:completion:
bestStreamToInterrupt
_willStartingPlaybackToOutputDevicesInterrupt:
willStartingPlaybackToOutputDevicesInterrupt:
activeStreamCount
maxStreamCapacity
remainingStreamCapacity
allStreams
allStreamsExcludingLocal
streamsThatCountTowardsCapacity
streamsActivelyUsingSlot
Tq,R,N
T@"MRDNowPlayingPlayerClient",R,N
containsActiveStream
activeContent
isActiveStream
_handleNowPlayingAppDidChange:
initWithPlayerPath:
supportedRemoteControlCommandsData
player
supportedRemoteControlCommands
setSupportedRemoteControlCommands:
setSupportedRemoteControlCommandsData:
setPlaybackQueue:
playbackQueue
nowPlayingContentItem
setInferredPlaybackState:
inferredPlaybackState
updatePlaybackState:date:
updateLastPlayingDate:
canBeNowPlayingPlayer
setCanBeNowPlayingPlayer:
canBeNowPlayingPlayerTimestamp
setCanBeNowPlayingPlayerTimestamp:
playbackState
playbackStateTimestamp
_onQueue_playbackState
setPlaybackQueueCapabilities:
playbackQueueCapabilities
isPlaying
_onQueue_isPlaying
isPictureInPictureEnabled
hasNowPlayingData
nowPlayingState
timeSincePlaying
_onQueue_lastPlayingDate
setPictureInPictureEnabled:
updateClient:
updatePlayer:
updatePlaybackQueue:
updatePlaybackQueue:fromRequest:
_onQueue_updatePlaybackQueue:fromRequest:
notifyArtworkChangedForContentItems:
snapshotForPlaybackState:
snapshotsForIsPlaying:
snapshotForIsPlaying:
snapshots
_sortSnapshots:
playbackQueueForRequest:cachingPolicy:playerPath:partiallyCachedItems:
_onQueue_canBeNowPlayingDidChange:
_onQueue_isPlayingDidChange:
_onQueue_pictureInPictureEnabledDidChanged:
_onQueue_playbackStateDidChanged:
_onQueue_supportedCommandsDidChange:
_onQueue_playbackQueueDidChange:nowPlayingItemChanged:
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_playbackQueueContentItemsDidChange:
_onQueue_playbackQueueContentItemsArtworkDidChange:
_onQueue_pushState
_onQueue_popState
lastPlayingDate
subscriptionController
pushStateIsPlaying
setPushStateIsPlaying:
pushStatePlaybackState
setPushStatePlaybackState:
pushStatePlayer
setPushStatePlayer:
pushStateHasNowPlayingData
setPushStateHasNowPlayingData:
pushStatePictureInPictureEnabled
setPushStatePictureInPictureEnabled:
pushStateCanBeNowPlayingPlayer
setPushStateCanBeNowPlayingPlayer:
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueueInternal
_playbackQueueCapabilities
_canBeNowPlayingPlayerTimestamp
_playerPlaybackState
_inferredPlayerPlaybackState
_playbackStateHistory
_pictureInPictureEnabled
_canBeNowPlayingPlayer
_hasNowPlayingDataTransaction
_pushStateIsPlaying
_pushStateHasNowPlayingData
_pushStatePictureInPictureEnabled
_pushStateCanBeNowPlayingPlayer
_lastPlayingDate
_subscriptionController
_pushStatePlaybackState
_pushStatePlayer
T@"NSArray",&,N
TB,N,V_pushStateIsPlaying
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_pushStatePlaybackState
T@"MRPlayer",&,N,V_pushStatePlayer
TB,N,V_pushStateHasNowPlayingData
TB,N,V_pushStatePictureInPictureEnabled
TB,N,V_pushStateCanBeNowPlayingPlayer
TB,N
T@"NSDate",C,N
TI,R,N
T@"NSDate",R,N
TI,N
T@"NSData",C,N
T@"MRPlaybackQueue",C,N
T@"MRContentItem",R,N
TQ,N
TB,R,N
Td,R,N
T@"NSDate",R,N,V_lastPlayingDate
T@"MRPlayer",R,N
T@"MRPlayerPath",&,N
T@"MRNowPlayingState",R,N
T@"MRPlaybackQueueSubscriptionController",R,N,V_subscriptionController
pictureInPictureEnabled
TB,N,GisPictureInPictureEnabled
T@"<MRDNowPlayingPlayerClientDelegate>",W,N,V_delegate
initWithPlaybackState:date:
_playbackState
TI,R,N,V_playbackState
T@"NSDate",R,N,V_date
playbackStateDescription
compare:
playerPlaybackState
setPlayerPlaybackState:
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_playerPlaybackState
T@"NSString",R,N
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
bonjourRemoteControlService:didAcceptConnection:
_netServiceTXTRecordDataWithDeviceInfo:
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
initWithNetServiceType:
start
stop
_txtDataChangedWithUserInfo:
_txtDataChanged
_txtDataChangedWithDeviceInfo:
_initializeBonjourServiceWithDeviceInfo:
netServiceType
lastKnownBluetoothAddress
setLastKnownBluetoothAddress:
_bluetoothClient
_networkService
_started
_netServiceType
_lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDBonjourRemoteControlServiceDelegate>",W,N,V_delegate
T@"NSString",R,N,V_netServiceType
connectionDidResume:
connectionDidInvalidate:
hostedExternalDeviceConnectionStateDidChange:withError:
hostedExternalDeviceNameDidChange:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceEndpointDidChange:
hostedExternalDeviceEndpoint:volumeCapabilitiesDidChange:forOutputDevice:
hostedExternalDeviceEndpoint:volumeDidChange:forOutputDevice:
hostedExternalDeviceEndpoint:didAddOutputDevice:
hostedExternalDeviceEndpoint:didChangeOutputDevice:
hostedExternalDeviceEndpoint:didRemoveOutputDevice:
discoveryOutputDevicesChanged:forConfiguration:
initWithConnection:
discoveryTokenForConfiguration:
setDiscoveryToken:forConfiguration:
discoveryTokens
_resumeConnectionWithState:
_maybeWakeClient
connection
bundleIdentifier
registeredCallbacks
setRegisteredCallbacks:
notifications
setNotifications:
connectionState
setConnectionState:
subscribedPlayerPaths
setSubscribedPlayerPaths:
pendingClientState
setPendingClientState:
connectionMonitor
setConnectionMonitor:
xpcClient
setXpcClient:
_discoveryTokens
_connectionState
_connection
_bundleIdentifier
_registeredCallbacks
_notifications
_subscribedPlayerPaths
_pendingClientState
_connectionMonitor
_xpcClient
T@"MRDAVHostedExternalDevicePendingClientState",&,N,V_pendingClientState
T@"MRXPCConnectionMonitor",&,N,V_connectionMonitor
T@"MRDMediaRemoteClient",&,N,V_xpcClient
T@"NSXPCConnection",R,N,V_connection
T@"NSString",R,N,V_bundleIdentifier
TQ,N,V_registeredCallbacks
TQ,N,V_notifications
TI,N,V_connectionState
T@"NSArray",C,N,V_subscribedPlayerPaths
connectionStateError
setConnectionStateError:
name
setName:
endpoint
setEndpoint:
volume
setVolume:
volumeCapabilities
setVolumeCapabilities:
outputDeviceVolume
setOutputDeviceVolume:
outputDeviceVolumeCapabilities
setOutputDeviceVolumeCapabilities:
outputDeviceModifications
setOutputDeviceModifications:
discoverySessionConfigurationsResults
setDiscoverySessionConfigurationsResults:
_connectionStateError
_name
_endpoint
_volume
_volumeCapabilities
_outputDeviceVolume
_outputDeviceVolumeCapabilities
_outputDeviceModifications
_discoverySessionConfigurationsResults
T@"NSError",&,N,V_connectionStateError
T@"NSString",&,N,V_name
T@"MRAVDistantEndpoint",&,N,V_endpoint
T@"NSNumber",&,N,V_volume
T@"NSNumber",&,N,V_volumeCapabilities
T@"NSMutableDictionary",&,N,V_outputDeviceVolume
T@"NSMutableDictionary",&,N,V_outputDeviceVolumeCapabilities
T@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications",&,N,V_outputDeviceModifications
T@"NSMutableDictionary",&,N,V_discoverySessionConfigurationsResults
addOutputDevice:forEndpoint:
changeOutputDevice:forEndpoint:
removeOutputDevice:forEndpoint:
addedOutputDevices
setAddedOutputDevices:
changedOutputDevices
setChangedOutputDevices:
removedOutputDevices
setRemovedOutputDevices:
_addedOutputDevices
_changedOutputDevices
_removedOutputDevices
T@"NSMutableArray",&,N,V_addedOutputDevices
T@"NSMutableArray",&,N,V_changedOutputDevices
T@"NSMutableArray",&,N,V_removedOutputDevices
sharedService
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
initWithService:
addMessageHandlerForDevice:handler:
addMessageHandler:
_addMessageHandlerForDevice:handler:
_addMessageHandler:
removeHandler:
sendMessage:device:type:destination:session:options:priority:response:
_sendMessage:device:type:destination:session:options:priority:replyID:response:
_generateMessageID
idsService
setQueue:
responseHandlers
setResponseHandlers:
deviceMessageHandlers
setDeviceMessageHandlers:
totalMessageHandlers
setTotalMessageHandlers:
totalOutgoingMessageCount
_idsService
_responseHandlers
_deviceMessageHandlers
_totalMessageHandlers
_totalOutgoingMessageCount
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSMutableDictionary",&,N,V_responseHandlers
T@"NSMutableDictionary",&,N,V_deviceMessageHandlers
T@"NSMutableDictionary",&,N,V_totalMessageHandlers
TQ,R,N,V_totalOutgoingMessageCount
T@"IDSService",R,N,V_idsService
initWithID:data:device:service:
replyWithData:priority:
device
data
messageID
service
setService:
_device
_data
_messageID
_service
T@"NSNumber",R,C,N,V_messageID
T@"MRDIDSService",&,N,V_service
T@"IDSDevice",R,N,V_device
T@"NSData",R,C,N,V_data
initWithPID:audioSessionID:mxSessionIDs:
dictionaryRepresentation
nowPlayingApplicationDisplayID
audioSessionID
mxSessionIDs
_pid
_audioSessionID
_mxSessionIDs
Ti,R,N,V_pid
T@"NSNumber",R,N,V_audioSessionID
T@"NSSet",R,N,V_mxSessionIDs
initWithBundleID:audioSessionID:isPlaying:
_playing
playing
TB,R,N,GisPlaying,V_playing
sharedDataSource
addObserver:
removeObserver:
observersForSelector:
shouldSendCommand:
nowPlayingApplications
nowPlayingSessions
nowPlayingAudioFormatContentInfos
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
_weakObservers
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_nowPlayingApplicationPID
_nowPlayingAudioFormatContentInfos
_nowPlayingApplicationDisplayID
T@"NSDictionary",R,N,V_nowPlayingAudioFormatContentInfos
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
Ti,R,N,V_nowPlayingApplicationPID
TB,R,N,V_nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsInterrupted
_handleVolumeCapabilitiesDidChangeNotification:
_handleApplicationDidRegisterNotification:
_handleApplicationDidUnregisterNotification:
_handleApplicationClientStateDidChangeNotification:
_handleActiveApplicationDidChangeNotification:
_handlePlayerDidRegisterNotification:
_handlePlayerDidUnregisterNotification:
_handlePlayerDidRegisterCanBeNowPlayingNotification:
_handlePlayerDidUnregisterCanBeNowPlayingNotification:
_handlePlayerStateDidChangeNotification:
_handleActivePlayerDidChangeNotification:
_handlePlaybackStateDidChangeNotification:
_handleSupportedCommandsDidChangeNotification:
_handlePlayerPlaybackQueueCapabilitiesDidChangeNotification:
_handlePlayerPlaybackQueueDidChangeNotification:
_handlePlayerPlaybackQueueContentItemsDidChangeNotification:
_handlePlayerPlaybackQueueContentItemArtworkDidChangeNotification:
localizedPlayerIDFromPlayerPath:
initWithOrigin:destinationOrigin:
registerSourceOriginNotifications
registerDestinationOriginCallbacksToRelayToSourceOrigin
initializeDestinationOriginWithSourceOriginData
createDelocalizedPlayerPath:
createLocalizePlayerPath:
sourceOrigin
destinationOrigin
destinationClient
_sourceOrigin
_destinationOrigin
_destinationClient
T@"MRClient",R,N,V_destinationClient
T@"MROrigin",R,N,V_sourceOrigin
T@"MROrigin",R,N,V_destinationOrigin
currentRouteSupportsVolumeControl
_activeSystemContext
_discoverySession
_activeReconnaissanceSessions
userDefaults
_readConnectionRecordsFromDisk
_writeConnectionRecordsToDisk:
T@"NSUserDefaults",R,N
_connectionForSource:destination:session:
_onWorkerQueue_connectRemoteControlChannelForSource:destination:destinationGroupUID:session:name:
_onWorkerQueue_disconnectAllRemoteControlChannels
_onWorkerQueue_disconnectRemoteControlChannelForSource:destination:session:
_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:
_persistConnectionRecordsToDisk
_resetPersistedConnections
client
setClient:
connections
setConnections:
_workerQueue
_client
_connections
T@"MRCompanionLinkClient",&,N,V_client
T@"NSMutableArray",&,N,V_connections
T@"<MRDRapportRemoteControlServiceDelegate>",W,N,V_delegate
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
destinationOutputDeviceUID
setDestinationOutputDeviceUID:
destinationGroupUID
setDestinationGroupUID:
sourceUID
setSourceUID:
sessionUID
setSessionUID:
setConnection:
connectionAttemptDate
setConnectionAttemptDate:
notificationToken
setNotificationToken:
_destinationOutputDeviceUID
_destinationGroupUID
_sourceUID
_sessionUID
_connectionAttemptDate
_notificationToken
T@"NSString",&,N,V_destinationOutputDeviceUID
T@"NSString",&,N,V_destinationGroupUID
T@"NSString",&,N,V_sourceUID
T@"NSString",&,N,V_sessionUID
T@"MRRapportTransportConnection",&,N,V_connection
T@"NSDate",&,N,V_connectionAttemptDate
T@"<NSObject>",&,N,V_notificationToken
controller:didLoadResponse:
controller:playbackStateDidChangeFrom:to:
controller:playbackQueueDidChangeFrom:to:
controller:contentItemsDidUpdate:
controller:contentItemsDidUpdateWithContentItemChanges:
controller:didLoadArtworkForContentItems:
controller:supportedCommandsDidChangeFrom:to:
controller:deviceLastPlayingDateDidChange:
controller:playerLastPlayingDateDidChange:
controller:clientPropertiesDidChangeFrom:to:
controller:playerPathDidChange:
controller:didUpdateResponse:
controllerWillReloadForInvalidation:
controller:didFailWithError:
startObservationIfNeeded
_configureObserver
_onQueue_reevaluateRemoteControlState
_configurationForUID:
_handleLayoutDidChangeNotification:
dataSource
setDataSource:
nearbyDevices
setNearbyDevices:
hasTriggered
setHasTriggered:
shouldRun
setShouldRun:
invalidated
setInvalidated:
displayMonitor
setDisplayMonitor:
_hasTriggered
_shouldRun
_invalidated
_dataSource
_nearbyDevices
_displayMonitor
T@"NSMutableSet",&,N,V_nearbyDevices
TB,N,V_hasTriggered
TB,N,V_shouldRun
TB,N,V_invalidated
T@"MRDDisplayMonitor",&,N,V_displayMonitor
T@"<MRDProximityControllerDataSource>",W,N,V_dataSource
_handleMediaServerDeath
outputDevicesDidChangeNotification:
_handleOutputContextDidAddLocalDevice:
_handleOutputContextDidRemoveLocalDevice:
_init
outputContexts
populatedOutputContexts
registerCommunicationsChannels
outputContextForOutputDevice:
outputContextForOutputDevices:strict:
outputContextForOutputDeviceUID:
outputContextForOutputDeviceUIDs:strict:
registerOutputContext:
registerForOutputContextNotifications:
registerCommunicationChannelForOutputContext:
_notifyLocalDeviceDidChangeOutputContext
reloadOutputContexts
processOutputContext:
activeOutputContexts
setActiveOutputContexts:
reservedOutputContexts
setReservedOutputContexts:
inactiveOutputContexts
setInactiveOutputContexts:
serialQueue
setSerialQueue:
_activeOutputContexts
_reservedOutputContexts
_inactiveOutputContexts
T@"NSMutableDictionary",&,N,V_activeOutputContexts
T@"NSMutableDictionary",&,N,V_reservedOutputContexts
T@"NSMutableDictionary",&,N,V_inactiveOutputContexts
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
pinPairingDialogDidClose:forClient:userCancelled:
showWithPin:forClient:
closeForClient:
closeForClient:userCancelled:
closeAll
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
initWithConfiguration:
availableOutputDevices
_onWorkerQueue_reload
_onWorkerQueue_scheduleReload
setIdsService:
workerQueue
setWorkerQueue:
reloadScheduled
setReloadScheduled:
_reloadScheduled
T@"IDSService",&,N,V_idsService
T@"NSObject<OS_dispatch_queue>",&,N,V_workerQueue
TB,N,V_reloadScheduled
_routingDataSourcePickableRoutesDidChange:
_timeoutTimerFired:
initWithRouteUID:
beginSearchWithTimeout:completion:
cancelSearch
_concludeSearchWithRoute:
_endSearch
routeUID
callback
setCallback:
timeoutTimer
setTimeoutTimer:
_searchInProgress
_timeoutInterval
_routeUID
_callback
_timeoutTimer
T@?,C,N,V_callback
T@"NSTimer",&,N,V_timeoutTimer
T@"NSString",R,N,V_routeUID
outputContextDidRemoveLocalDeviceNotification:
outputContextModificationDidBeginNotification:
outputContextModificationDidFinishNotification:
clusterController:clusterStatusDidChange:
clusterController:clusterTypeDidChange:
nowPlayingSessionDidStartForBundleIdentifier:completion:
nowPlayingSessionDidStopForBundleIdentifier:completion:
onQueue_commitLocalDeviceIfNeededWithReason:completion:
activeNowPlayingBundleIdentifiers
setActiveNowPlayingBundleIdentifiers:
activeTopologyChangeIdentifiers
setActiveTopologyChangeIdentifiers:
completionQueue
setCompletionQueue:
enqueuedCompletions
setEnqueuedCompletions:
_activeNowPlayingBundleIdentifiers
_activeTopologyChangeIdentifiers
_completionQueue
_enqueuedCompletions
T@"NSMutableSet",&,N,V_activeNowPlayingBundleIdentifiers
T@"NSMutableSet",&,N,V_activeTopologyChangeIdentifiers
T@"NSObject<OS_dispatch_queue>",&,N,V_completionQueue
T@"NSMutableArray",&,N,V_enqueuedCompletions
_clientDidRegisterCanBeNowPlaying:
_clientDidUnregisterCanBeNowPlaying:
_handleBeginLoadingBrowsableContentMessage:fromClient:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_clearQueuedBeginLoadingMessagesForApp:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
_sendInitiatePlaybackMessage:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
_handleSupportedAPIsDidChangeForClient:
_takeProcessAssertionForClient:withReason:
_scheduleEndProcessAssertionForClient:
_messageCanLaunchApp:
_messageRequiresMediaServerBlessing:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
transportDidClose:error:
transport:didReceiveData:
setLocalEndpointConnection:
endpointFeatures
devicePresenceDetected
availableEndpoints
setAvailableOutputDevices:
setUnclusteredOutputDevices:
unclusteredOutputDevices
setUnclusteredLocalOutputDevice:
unclusteredLocalOutputDevice
setRoutingContextUID:
routingContextUID
deviceInfo
setDeviceInfo:
_scheduleAvailableOutputDevicesReload
_reloadOutputDevices
_clusterOutputDevicesFromUnclusteredDevices:
_fetchAvailableOutputDevicesFromDiscoverySessions
_applyLocallySourcedValuesToOutputDevices:
_applyOutputContextValuesToOutputDevices:
_applyDeviceInfoValuesToOutputDevices:withDeviceInfo:
_applyLocalReservedOutputContextValuesToOutputDevices:
_addUndiscoveredOutputContextOutputDevices:
_logChangesInModifyingOutputDevice:toOutputDevice:reason:
_loadLocalEndpointConnection
shouldUseDeviceInfoForLocalDevice
_shouldCreateClusterOutputDevices
avDiscoverySession
setAvDiscoverySession:
idsDiscoverySession
setIdsDiscoverySession:
localEndpointConnection
_scheduledAvailableOutputDevicesReload
_availableOutputDevices
_unclusteredOutputDevices
_unclusteredLocalOutputDevice
_routingContextID
_deviceInfo
_avDiscoverySession
_idsDiscoverySession
_localEndpointConnection
T@"MRAVConcreteRoutingDiscoverySession",&,N,V_avDiscoverySession
T@"MRDIDSDiscoverySession",&,N,V_idsDiscoverySession
T@"MRAirPlayTransportConnection",&,N,V_localEndpointConnection
T@"MRAVOutputDevice",&,N
T@"MRDeviceInfo",&,N
getDevicePresenceDetectedWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:enableThrottling:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
hostedRoutingController:endpointsDidChange:
hostedRoutingController:outputDevicesDidChange:forFeature:
reason
initWithConnection:hostedRoutingController:
_invalidate
_notifyAvailableOutputDevicesDidChange:
_notifyAvailableEndpointsDidChange:
_resumeConnection
hostedRoutingController
transaction
setTransaction:
enableThrottling
setEnableThrottling:
updatedEndpoints
setUpdatedEndpoints:
updatedOutputDevices
setUpdatedOutputDevices:
pendingEndpoints
setPendingEndpoints:
pendingOutputDevices
setPendingOutputDevices:
endpointsDelayed
setEndpointsDelayed:
devicesDelayed
setDevicesDelayed:
setBundleIdentifier:
lastDiscoveryModeEnableDate
setLastDiscoveryModeEnableDate:
lastDiscoveryModeDisableDate
setLastDiscoveryModeDisableDate:
_enableThrottling
_endpointsDelayed
_devicesDelayed
_hostedRoutingController
_transaction
_updatedEndpoints
_updatedOutputDevices
_pendingEndpoints
_pendingOutputDevices
_lastDiscoveryModeEnableDate
_lastDiscoveryModeDisableDate
T@"MROSTransaction",&,N,V_transaction
TB,N,V_enableThrottling
T@"NSArray",&,N,V_updatedEndpoints
T@"NSArray",&,N,V_updatedOutputDevices
T@"NSArray",&,N,V_pendingEndpoints
T@"NSArray",&,N,V_pendingOutputDevices
TB,N,V_endpointsDelayed
TB,N,V_devicesDelayed
T@"NSString",&,N,V_bundleIdentifier
T@"NSDate",&,N,V_lastDiscoveryModeEnableDate
T@"NSDate",&,N,V_lastDiscoveryModeDisableDate
T@"MRDHostedRoutingController",R,N,V_hostedRoutingController
T@"<MRDAVHostedDiscoverySessionDelegate>",W,N,V_delegate
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
endpointDidConnect:
endpointDidDisconnect:
endpointDidDisconnect:withError:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
unregisterAllVirtualVoiceInputDevices
virtualTouchIDWithPackedID:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
addPendingPlaybackSessionMigrateEvent:playerPath:
removePendingPlaybackSessionMigrateEvent:
flushPendingPlaybackSessionMigrateEvents:
localizeDestinationPlayerPath:completion:
localizeDestinationOrigin:completion:
requestConnectedDestinationEndpoint:
requestDestinationEndpoint:
isDestinationLocal
setDestinationEndpoint:
destinationEndpoint
_wantsLibraryCommands
exportNowPlayingState:forPlayerPath:
exportSupportedCommands:
exportPlaybackQueue:forPlayerPath:
exportContentItems:forPlayerPath:
exportContentItemArtworkUpdates:forPlayerPath:
discoveryModeForConfiguration:
setDiscoveryMode:forConfiguration:
discoverySessionConfigurations
credentials
setCredentials:
playbackQueueRequests
sessionPeer
pinPairingToken
setPinPairingToken:
serverDelegate
setServerDelegate:
options
setOptions:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_pendingPlaybackSessionMigrateEvents
_destinationEndpoint
_discoveryModes
_options
_credentials
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
T@"MRAVEndpoint",&,N
T@"MRPasscodeCredentials",&,N,V_credentials
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
T@,&,N,V_pinPairingToken
T@"NSString",C,N,V_destinationOutputDeviceUID
T@"NSString",C,N,V_destinationGroupUID
destinationLocal
TB,R,N,GisDestinationLocal
T@"<MRDExternalDeviceServerClientConnectionDelegate>",W,N,V_serverDelegate
TI,N,V_options
listener:shouldAcceptNewConnection:
hostedDiscoverySessionDidInvalidate:
xpcEndpoint
endpointForOrigin:
endpointForDeviceUID:
_anonymousListener
_hostedDiscoverySessions
T@"NSXPCListenerEndpoint",R,N
_onQueue_reloadWithOutputDevices:
makeEndpointWithOutputDevices:options:
_onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:
_onQueue_reloadEndpoints
_logEndpointsChanged:oldEndpoints:
initWithPath:
tokenRecords
saveTokenRecord:
clearExpiredTokenRecords
_openDatabase
_validateDatabase
_initializeDatabaseSchema
_loadTokenRecords
path
_dbHandle
_tokenRecords
_path
T@"NSString",R,N,V_path
clientConnection:didReceiveMessage:
clientDidDisconnect:error:
handleSetConnectionStateMessage:forClient:
handleSetDiscoveryModeMessage:forClient:
_handleDiscoveryMessage:fromDevice:
_handleConnectRemoteControlMessage:fromDevice:destination:session:
_createDiscoveryChannelForIDSConnection:deviceInfo:
_createRemoteControlChannelForIDSConnection:deviceInfo:destination:session:options:
_intializeClient:forRemoteControlChannel:authCallback:completion:
_onWorkerQueue_sendEndpoint:toClient:options:
_addAuthorizationCallbackForOutputDevice:destination:session:
_removeAuthorizationCallbackForOutputDevice:
serviceToken
setServiceToken:
discoveryChannels
setDiscoveryChannels:
remoteControlChannels
setRemoteControlChannels:
_serviceToken
_discoveryChannels
_remoteControlChannels
T@,&,N,V_serviceToken
T@"NSMutableDictionary",&,N,V_discoveryChannels
T@"NSMutableDictionary",&,N,V_remoteControlChannels
T@"<MRDIDSRemoteControlServiceDelegate>",W,N,V_delegate
transport
setTransport:
_transport
T@"MRDIDSTransportConnection",&,N,V_transport
T@"MRDIDSServerClientConnection",&,N,V_client
destination
setDestination:
session
setSession:
_destination
_session
T@"NSString",&,N,V_destination
T@"NSString",&,N,V_session
T@"MRExternalDeviceTransportConnection",&,N,V_transport
addChannel:forDestination:session:
removeChannelForDestination:
channelForDestination:session:
_channels
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
extendedInfoWithRoute:
initWithRoute:
requiresPIN
modelName
deviceIdentifier
_extendedInfo
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
T@"NSDictionary",R,N,V_route
TB,R,N,V_canBeDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
_handlePersonalDeviceChangeNotification:
personalDeviceControllerStateDidChange:
_onQueue_restoreState
_onQueue_recalculateStateForReason:
_onQueue_beginTimerWithInterval:
personalDeviceWasRecentlyAttached
setPersonalDeviceWasRecentlyAttached:
delegateQueue
setDelegateQueue:
currentPersonalDeviceUIDs
setCurrentPersonalDeviceUIDs:
overrideTimer
setOverrideTimer:
_personalDeviceWasRecentlyAttached
_delegateQueue
_currentPersonalDeviceUIDs
_overrideTimer
T@"NSObject<OS_dispatch_queue>",&,N,V_delegateQueue
T@"NSSet",&,N,V_currentPersonalDeviceUIDs
T@"MSVPersistentTimer",&,N,V_overrideTimer
TB,N,V_personalDeviceWasRecentlyAttached
T@"<MRDPersonalDeviceControllerDelegate>",W,N,V_delegate
_handleLocalPlaybackBeganNotification:
_maybeMostRecentlyPlayedDeviceChanged:
mostRecentDeviceUID
_registerCompanionLinkHandlers
_registerNotifications
_handleSetNearbyDevicesToRemoteControlMessage:fromClient:
_maybeSendPlaybackStateMessageToCompanion
_shouldSendCompanionLinkMessage
_addEntry:
encodeEntries
decodeEntries
lastSentEntry
setLastSentEntry:
entries
setEntries:
setUserDefaults:
sendingPlaybackStateToCompanion
setSendingPlaybackStateToCompanion:
_sendingPlaybackStateToCompanion
_lastSentEntry
_entries
T@"MRDExternalDeviceHomeServerRecentlyPlayedEntry",&,N,V_lastSentEntry
T@"NSMutableArray",&,N,V_entries
T@"NSUserDefaults",&,N,V_userDefaults
TB,N,V_sendingPlaybackStateToCompanion
initWithDictionaryRepresentation:
setContentItem:
setIsPlaying:
setLastPlayingDate:
lastNotPlayingDate
setLastNotPlayingDate:
currentPlaybackSessionTypes
setCurrentPlaybackSessionTypes:
supportedPlaybackSessionTypes
setSupportedPlaybackSessionTypes:
currentPlaybackSessionIdentifier
setCurrentPlaybackSessionIdentifier:
contentItem
setDictionaryRepresentation:
_isPlaying
_lastNotPlayingDate
_currentPlaybackSessionTypes
_supportedPlaybackSessionTypes
_currentPlaybackSessionIdentifier
_contentItem
_dictionaryRepresentation
TB,N,V_isPlaying
T@"NSDate",&,N,V_lastPlayingDate
T@"NSDate",&,N,V_lastNotPlayingDate
T@"MRDeviceInfo",&,N,V_deviceInfo
T@"NSArray",&,N,V_currentPlaybackSessionTypes
T@"NSArray",&,N,V_supportedPlaybackSessionTypes
T@"NSString",&,N,V_currentPlaybackSessionIdentifier
T@"MRPlayerPath",&,N,V_playerPath
T@"MRContentItem",&,N,V_contentItem
T@"NSDictionary",&,N,V_dictionaryRepresentation
initWithOutputDevice:
hostname
port
error
createConnectionWithUserInfo:
_createConnectionWithUserInfo:
resetWithError:
supportsIdleDisconnection
_synchronized_setSessionUID:
_generateSessionUID
shouldUseSystemAuthenticationPrompt
setShouldUseSystemAuthenticationPrompt:
outputDevice
idsConnection
setIdsConnection:
_shouldUseSystemAuthenticationPrompt
_error
_outputDevice
_idsConnection
T@"MRDIDSServiceConnection",&,N,V_idsConnection
T@"MRAVOutputDevice",R,N,V_outputDevice
allowList
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
outOfMemoryWaitDuration
send:toConnection:completion:
cancel
_processMessage:
_query:
_transactionEnded
_calculateMemory
_bytesInUse
_taskAssertion
T@"<MRTransactionDelegate>",W,N,V_delegate
TQ,R,N,V_name
T@"MRPlayerPath",R,N,V_playerPath
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
adjustMemory:
handlePlaybackQueueRequestTransaction:packets:group:
handleContentItemTransaction:packets:group:
sendContentItemTransactionWithPlaybackQueue:request:playerPath:
sendContentItemTransaction:request:playerPath:
_sendContentItemTransaction:request:playerPath:
transactions
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
T@"NSMutableArray",R,N,V_transactions
initWithConnection:type:destination:session:
isValid
setRunLoop:
runLoop
sendTransportData:options:
ingestData:
closeWithError:
exportEndpoint:
exportOutputDevice:endpoint:
_idsPriorityFromPriority:
_exportDescriptorForOutputDevice:endpoint:remoteControl:
T@"MRDIDSServiceConnection",R,N,V_connection
T@"NSString",R,N,V_type
T@"NSString",R,N,V_destination
T@"NSString",R,N,V_session
isGroupLeader
groupContextID
isAirPlayReceiverSessionActive
isProxyGroupPlayer
initWithDescriptor:
initWithDevices:
initWithPrimaryOutputDevice:members:
deviceType
deviceSubtype
clusterComposition
isLocalDevice
descriptor
memberOutputDevices
_memberOutputDevices
T@"NSArray",R,N,V_memberOutputDevices
T@"<MRDPinPairingDialogDelegate>",W,N,V_delegate
serviceInterface
T@"BSServiceInterface",R,N
initWithClientObject:invalidationHandler:
server
serviceConnection
forwarder
lock
invalidationHandler
_lock
_serviceConnection
_forwarder
_invalidationHandler
T@"BSServiceConnection<BSServiceConnectionClient>",R,N,V_serviceConnection
T@"MRDUIClientMessageForwarder",R,N,V_forwarder
T{os_unfair_lock_s=I},R,N,V_lock
T@?,R,N,V_invalidationHandler
T@"<MRUIServerProtocol>",R,N
_handleCompanionDeviceConnectedNotification:
_handleCompanionDeviceDisconnectedNotification:
_handleDeviceInfoDidChangeNotification:
_handleOutputDevicesDidChangeNotification:
stream:handleEvent:
discoveryChannel
_sendEndpoint:toClient:options:
_onWorkerQueue_connectDiscoveryChannelWithReason:
_onWorkerQueue_disconnectDiscoveryChannel
_onWorkerQueue_initializeDiscoveryChannel
_onWorkerQueue_connectRemoteControlChannelForDestination:session:options:completion:
_onWorkerQueue_disconnectRemoteControlChannelsForDestination:error:
_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:
isDiscoveryChannelConnected
_discoveryChannel
_discoveryChannelConnectionTimer
_remoteControlConnections
_sendEndpointScheduled
_lastSentEndpoint
_lastSentEndpointDate
_configuration
_isDiscoveryChannelConnected
_runLoop
T@"MRDIDSServerClientConnection",R,N
TB,R,N,V_isDiscoveryChannelConnected
T@"NSRunLoop",R,N,V_runLoop
T@"<MRDIDSCompanionRemoteControlServiceDelegate>",W,N,V_delegate
T@"MRExternalDeviceTransportConnection",&,N,V_connection
_localDeviceInfoDidChangeNotification:
_transportDeviceInfoDidChangeNotification:
_contentItemUpdatedNotification:
_activeSystemEndpointDidChangeNotification:
initWithTransport:
hostName
isPaired
isUsingSystemPairing
setUsingSystemPairing:
wantsNowPlayingNotifications
setWantsNowPlayingNotifications:
wantsNowPlayingArtworkNotifications
setWantsNowPlayingArtworkNotifications:
wantsVolumeNotifications
setWantsVolumeNotifications:
wantsOutputDeviceNotifications
setWantsOutputDeviceNotifications:
wantsEndpointChangeNotifications
setWantsEndpointChangeNotifications:
wantsSystemEndpointNotifications
setWantsSystemEndpointNotifications:
setClientConnection:
clientConnection
setCustomOrigin:
customOrigin
supportedMessages
setNowPlayingArtwork:
nowPlayingArtwork
setNowPlayingInfo:
nowPlayingInfo
setNowPlayingItem:
nowPlayingItem
setConnectionState:error:
setPairingCallback:withQueue:
setConnectionStateCallback:withQueue:
setNameCallback:withQueue:
setPairingAllowedCallback:withQueue:
setCustomDataCallback:withQueue:
setOutputDevicesUpdatedCallback:withQueue:
setOutputDevicesRemovedCallback:withQueue:
setVolumeChangedCallback:withQueue:
setVolumeControlCapabilitiesCallback:withQueue:
sendButtonEvent:
personalOutputDevices
_onWorkerQueue_connectWithOptions:isRetry:clientBundleIdentifier:userInfo:
_onSerialQueue_prepareToConnectWithOptions:clientBundleIdentifier:userInfo:
connectWithOptions:userInfo:
connectWithOptions:clientBundleIdentifier:userInfo:
_onWorkerQueue_disconnect:
_onSerialQueue_prepareToDisconnect:
disconnect:
veirfyConnectionStatusAndMaybeDisconnect:
unpair
sendCustomData:withName:
ping:callback:withQueue:
errorForCurrentState
currentClientUpdatesConfigMessage
sendClientUpdatesConfigMessage
sendClientUpdatesConfigMessageWithCompletion:
setOutputDeviceVolume:outputDeviceUID:queue:completion:
outputDeviceVolume:queue:completion:
outputDeviceVolumeControlCapabilities:queue:completion:
setListeningMode:outputDeviceUID:queue:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:
createHostedEndpointWithOutputDeviceUIDs:queue:completion:
removeFromParentGroup:queue:completion:
_handleDiscoveryUpdateOutputDevicesMessage:
_onWorkerQueue_createClientConnectionWithTransport:
_onWorkerQueue_initializeConnectionWithOptions:userInfo:
_onWorkerQueue_loadDeviceInfoWithUserInfo:
_onWorkerQueue_registerCustomOriginWithUserInfo:
_onWorkerQueue_reRegisterCustomOriginWithUserInfo:
_onWorkerQueue_syncClientStateWithUserInfo:
_cleanUpStreamsWithReason:error:
_cleanUpWithReason:error:
_onSerialQueue_registerOriginCallbacks
_handlePlaybackQueueRequest:forPlayer:completion:
_handlePlaybackQueueResponse:completion:
_handleLegacyPlaybackQueueRequestWithCompletion:
_handlePlaybackSessionRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateRequest:request:forPlayerPath:completion:
_handlePlaybackSessionMigrateBeginRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateEndRequest:error:forPlayerPath:completion:
_callClientConnectionStateCallback:previousConnectionState:error:
_callClientPairingCallback:
_callClientNameCallback
_callClientAllowsPairingCallback
_callClientCustomDataCallback:name:
_callOutputDevicesUpdatedCallbackWithOutputDevices:
_callOutputDevicesRemovedCallbackWithOutputDeviceUIDs:
_callVolumeCallback:outputDeviceUID:
_callVolumeControlCapabilitiesCallback:outputDeviceUID:
_handleRemoteCommand:withOptions:playerPath:completion:
_handleSetStateMessage:
_handleSetStateMessageModern:
_handleSetArtworkMessage:
_handleSetNowPlayingClientMessage:
_handleSetNowPlayingPlayerMessage:
_handleRemoveClientMessage:
_handleRemovePlayerMessage:
_handleUpdateClientMessage:
_handleUpdatePlayerMessage:
_handleUpdateContentItemsMessage:
_handleNotificationMessage:
_handleNotificationMessageModern:
_handleNotificationMessageLegacy:
_handleOutputDevicesUpdatedMessage:
_handleOutputDevicesRemovedMessage:
_handleVolumeDidChangeMessage:
_handleVolumeControlCapabilitiesDidChangeMessage:
_handleLegacyVolumeControlCapabilitiesDidChangeMessage:
_handleDeviceInfoUpdateMessage:
_handleDeviceInfoChange:oldDevice:
_handleSetConnectionStateMessage:
_handleGenericMessage:
_handlePromptForRouteAuthorizationMessage:
_handlePresentRouteAuthorizationStatusMessage:
_updateNowPlayingInfo
_createPlaybackQueue:
_handleSetDefaultSupportedCommandsMessage:
_handleUpdateActiveSystemEndpoint:
_handleSetPlayerClientPropertiesMessage:
_handleSetOriginClientPropertiesMessage:
_sendClientMessage:completion:
connectionRecoveryBehavior
setConnectionRecoveryBehavior:
isCallingClientCallback
setIsCallingClientCallback:
pairingCallback
setPairingCallback:
pairingCallbackQueue
setPairingCallbackQueue:
connectionStateCallback
setConnectionStateCallback:
connectionStateCallbackQueue
setConnectionStateCallbackQueue:
nameCallback
setNameCallback:
nameCallbackQueue
setNameCallbackQueue:
pairingAllowedCallback
setPairingAllowedCallback:
pairingAllowedCallbackQueue
setPairingAllowedCallbackQueue:
customDataCallback
setCustomDataCallback:
customDataCallbackQueue
setCustomDataCallbackQueue:
outputDevicesUpdatedCallback
setOutputDevicesUpdatedCallback:
outputDevicesUpdatedCallbackQueue
setOutputDevicesUpdatedCallbackQueue:
outputDevicesRemovedCallback
setOutputDevicesRemovedCallback:
outputDevicesRemovedCallbackQueue
setOutputDevicesRemovedCallbackQueue:
volumeCallback
setVolumeCallback:
volumeCallbackQueue
setVolumeCallbackQueue:
volumeControlCapabilitiesCallback
setVolumeControlCapabilitiesCallback:
volumeControlCapabilitiesCallbackQueue
setVolumeControlCapabilitiesCallbackQueue:
outputContextCallbackQueue
setOutputContextCallbackQueue:
_notificationQueue
_wantsNowPlayingNotifications
_wantsNowPlayingArtworkNotifications
_wantsVolumeNotifications
_wantsOutputDeviceNotifications
_wantsSystemEndpointNotifications
_wantsEndpointChangeNotifications
_usingSystemPairing
_connectionStateTimestamp
_connectionOptions
_reconnectionAttemptCount
_forceReconnectOnConnectionFailure
_disconnecting
_isClientSyncActive
_originalConnectionStartDate
_connectionUID
_isCallingClientCallback
_clientConnection
_customOrigin
_nowPlayingInfo
_nowPlayingArtwork
_nowPlayingItem
_connectionRecoveryBehavior
_pairingCallback
_pairingCallbackQueue
_connectionStateCallback
_connectionStateCallbackQueue
_nameCallback
_nameCallbackQueue
_pairingAllowedCallback
_pairingAllowedCallbackQueue
_customDataCallback
_customDataCallbackQueue
_outputDevicesUpdatedCallback
_outputDevicesUpdatedCallbackQueue
_outputDevicesRemovedCallback
_outputDevicesRemovedCallbackQueue
_volumeCallback
_volumeCallbackQueue
_volumeControlCapabilitiesCallback
_volumeControlCapabilitiesCallbackQueue
_outputContextCallbackQueue
T@"MRExternalClientConnection",&,N,V_clientConnection
T@"MROrigin",&,N,V_customOrigin
T@"NSData",&,N,V_nowPlayingArtwork
T@"NSDictionary",&,N,V_nowPlayingInfo
T@"MRContentItem",&,N,V_nowPlayingItem
T@?,C,N,V_pairingCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_pairingCallbackQueue
T@?,C,N,V_connectionStateCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionStateCallbackQueue
T@?,C,N,V_nameCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_nameCallbackQueue
T@?,C,N,V_pairingAllowedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_pairingAllowedCallbackQueue
T@?,C,N,V_customDataCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_customDataCallbackQueue
T@?,C,N,V_outputDevicesUpdatedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesUpdatedCallbackQueue
T@?,C,N,V_outputDevicesRemovedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesRemovedCallbackQueue
T@?,C,N,V_volumeCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeCallbackQueue
T@?,C,N,V_volumeControlCapabilitiesCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeControlCapabilitiesCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_outputContextCallbackQueue
T@"MRExternalDeviceTransport",R,N,V_transport
TB,N,V_isCallingClientCallback
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
handlePlaybackQueueRequest:fromClient:
sendPlaybackQueueResponse:forRequest:withMessage:fromNowPlayingClient:toXpcClient:
relayPlaybackQueueRequest:withMessage:toNowPlayingClient:backToXpcClient:completion:
relayArtworkRequest:forContentItems:withMessage:fromNowPlayingClient:andNotifyXPCClient:
_cachingPolicyForRequest:
_resolveRequest:withCapabilities:
_outputContextDidChange
_otherDeviceInfoDidChange:
deviceInfoDataSource:deviceInfoDidChange:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
reloadDeviceInfoImmediatly
_deviceInfoDidChange
_deviceInfoDidChangeWithDeviceInfo:
_currentDeviceInfo
discoverySession
clusteredDevices
networkIdentifier
deviceUID
deviceName
_deviceInfoFilePath
_deviceInfoArchiveClasses
_readLegacyDeviceInfoIdentifier
_writeDeviceInfo:toPath:
_readDeviceInfo
pairingManager
setPairingManager:
setDeviceUID:
setDeviceName:
_gestaltNotificationToken
_airplayPerfsNotifyToken
_airplayActiveNotifyToken
_airplayAdvertisingNotifyToken
_deviceInfoReloadScheduled
_pairingManager
_deviceUID
_deviceName
T@"CUPairingManager",&,N,V_pairingManager
T@"NSString",&,N,V_deviceUID
T@"NSString",&,N,V_deviceName
T@"MRDeviceInfo",R,N
T@"<MRDDeviceInfoDataSourceDelegate>",W,N,V_delegate
nowPlayingOriginClientDidChangeAudioFormatContentInfo:
_handleNowPlayingAppMaybeDidChange:
_handlePlayerIsPlayingDidChange:
_handleOriginIsPlayingDidChange:
_handlePlayerPropertiesDidChange:
_handlePlayerPictureInPictureEnabledDidChange:
_handleActivePlayerDidChange:
_handleNowPlayingApplicationDidUnregisterCanBeNowPlaying:
_handlePlayerDidRegister:
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingAudioFormatContentInfosDidChange:
initWithOrigin:
activePlayerPath
deviceInfoData
volumeControlCapabilities
setVolumeControlCapabilities:
setIsMuted:
nowPlayingClients
mostRecentPlayers
activeNowPlayingClient
setComputedNowPlayingClient:
setExplicitNowPlayingClient:
setInferredNowPlayingClient:
setOverrideClient:
setActivity:
isActivityActive
nowPlayingClientForClient:
nowPlayingClientForPlayerPath:
existingNowPlayingClientForPlayerPath:
existingNowPlayingClientForPid:
existingNowPlayingClientForDisplayID:
existingNowPlayingClientForClient:
removeAllClients
removeNowPlayingClientForClient:
_onQueue_removeNowPlayingClient:
updateDefaultSupportedCommandsData:forClient:
defaultSupportedCommandsDataForClient:
defaultSupportedCommandsForClient:
defaultSupportedCommands
clearDefaultSupportedCommandsData
nowPlayingAudioFormatContentInfo
setNowPlayingDataSource:
_onQueue_reloadInferredStateFromDataSource:reason:
setDeviceInfoDataSource:
_shouldHandleNotification:
_onQueue_calculateActiveNowPlayingClient
_onQueue_calculateComputedNowPlayingClient
_onQueue_calculateInferredNowPlayingClient
_onQueue_calculateInferredPlaybackStateForPlayer:
_onQueue_calculateActiveNowPlayingPlayerClients
_onQueue_reevaluateStateWithReason:
_onQueue_updateActivityStatus:
_onQueue_addNowPlayingClient:
_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:
_onQueue_maybeSavePlaybackStateForNotification:
_registerCallbacks
_stateFromDataSource:
_playerPathForNowPlayingClient:
origin
setDeviceInfoData:
activity
overrideClient
explicitNowPlayingClient
nowPlayingDataSource
deviceInfoDataSource
registrationDate
activePlayerClients
computedNowPlayingClient
inferredNowPlayingClient
_nowPlayingClients
_volumeControlCapabilities
_explicitNowPlayingClient
_activeNowPlayingClient
_activeNowPlayingClientTransaction
_defaultSupportedCommandsData
_origin
_deviceInfoData
_activity
_overrideClient
_nowPlayingDataSource
_deviceInfoDataSource
_registrationDate
_activePlayerClients
_computedNowPlayingClient
_inferredNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_computedNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_inferredNowPlayingClient
T@"MROrigin",R,N,V_origin
T@"MRPlayerPath",R,N
Tf,N
T@"MRDeviceInfo",C,N
T@"NSData",&,N,V_deviceInfoData
T@"MRMutableApplicationActivity",&,N,V_activity
T@"MRDMediaRemoteClient",&,N,V_overrideClient
T@"MRDNowPlayingClient",&,N,V_explicitNowPlayingClient
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
T@"MRDDeviceInfoDataSource",&,N,V_deviceInfoDataSource
T@"NSDate",R,N,V_registrationDate
T@"MRDNowPlayingClient",R,N
T@"NSArray",R,N,V_activePlayerClients
T@"MRNowPlayingAudioFormatContentInfo",R,N
T@"<MRDNowPlayingOriginClientDelegate>",W,N,V_delegate
initWithDictionary:
uniqueIdentifier
isPicked
isSpeakerRoute
canBeDefaultSystemRoute
dictionary
extendedInfo
matchesUniqueIdentifier:
_routeDescription
_handleNowPlayingClientDidChange:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleContentItemsChanged:
_handleContentItemArtworkChanged:
_handleApplicationClientStateChanged:
_handlePlayerStateChanged:
_handleRemoveClient:
_handleRemovePlayer:
_handleDefaultSupportedCommandsChanged:
beginReceivingUpdatesForSource:
stopReceivingUpdatesForSource:
_shouldNotifyChange:
_handleVolumeAvailabilityDidChangeNotification:
_setReceiveUpdates:forSource:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_addNowPlayingNotification:selector:
_removeNowPlayingNotifications
_onQueue_stateForPlayerPath:
_onQueue_notifyCoalescedPlayerPath:
wantsCoalescedStateChanged
coalescingStates
setCoalescingStates:
npServer
_observedNowPlayingNotifications
_observedVolumeControlNotificationToken
_registeredForNowPlayingCount
_registeredForVolumeAvailabilityCount
_wantsCoalescedStateChanged
_coalescingStates
_npServer
TB,R,N,V_wantsCoalescedStateChanged
T@"NSMutableDictionary",&,N,V_coalescingStates
T@"MRDNowPlayingServer",R,N,V_npServer
T@"<MRDNowPlayingStateObserverDelegate>",W,N,V_delegate
setContentItems:
setContentItemsArtwork:
setSupportedCommands:
setPlayerProperties:
setPlaybackState:
state
_coealesceItems:
supportedCommands
contentItems
contentItemsArtwork
setPlaybackStateTimestamp:
playerProperties
_supportedCommands
_playbackQueue
_contentItems
_contentItemsArtwork
_playbackStateTimestamp
_playerProperties
T@"NSArray",&,N,V_supportedCommands
T@"MRPlaybackQueue",&,N,V_playbackQueue
TQ,N,V_playbackQueueCapabilities
T@"NSArray",&,N,V_contentItems
T@"NSArray",&,N,V_contentItemsArtwork
T@"NSNumber",&,N,V_playbackState
T@"NSDate",&,N,V_playbackStateTimestamp
T@"MRPlayer",&,N,V_playerProperties
_avSessionMediaServicesResetNotification:
didCancelRoutePicking:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_mediaServerController
_registerAVSystemControllerNotifications
_unregisterAVSystemControllerNotifications
_descriptionForDiscoveryMode:
_notifyDelegateRoutesDidChange
_oddsShimDataSource
_handleElectedPlayerDidChangeNotification:
lockScreenContentControllerStateDidChange:
isLockScreenWidgetActive
isLockScreenWidgetVisible
setHasLockScreenAssertion:
setPreviousPlayerPath:
_onSerialQueue_restoreElectedPlayer
_onQueue_reevaluateShouldShowLockScreenForReason:
_onQueue_calculateShouldShowLockScreenForReason:
uiController
previousPlayerPath
setUiController:
hasLockScreenAssertion
legacyAssertion
setLegacyAssertion:
electedPlayerPath
setElectedPlayerPath:
eventType
setEventType:
personalDeviceController
setPersonalDeviceController:
contentController
setContentController:
_playerResult
_previousPlayerPath
_playerPathInvalidationToken
_previousPlayerPathInvalidationToken
_timer
_hasLockScreenAssertion
_uiController
_legacyAssertion
_electedPlayerPath
_eventType
_personalDeviceController
_contentController
T@"<MRLockScreenUIControllable>",&,N,V_uiController
TB,N,V_hasLockScreenAssertion
T@"MRDLockScreenAssertion",&,N,V_legacyAssertion
T@"MRPlayerPath",&,N,V_electedPlayerPath
T@"MRPlayerPath",&,N,V_previousPlayerPath
Tq,N,V_eventType
T@"MRDPersonalDeviceController",&,N,V_personalDeviceController
T@"MRDLockScreenContentController",&,N,V_contentController
T@"<MRDLockScreenControllerDelegate>",N,V_delegate
lockScreenWidgetActive
TB,R,N,GisLockScreenWidgetActive
lockScreenWidgetVisible
TB,R,N,GisLockScreenWidgetVisible
setAssertion:
createAssertion
delayCreateAssertion
assertion
_assertion
T@"SBSLockScreenContentAssertion",&,N,V_assertion
_handleActiveSystemEndpointChangedNotification:
initWithDataSource:delegate:
_initialize
registerForChanges
unregisterForChanges
_onQueue_evaluateShouldDisconnectWithReason:
_adjustPlaybackTimerIfNeeded
activeSystemEndpointUID
isMemberOfActiveSystemEndpoint
hasPlayedRecently
containsLocalDevice
playbackTimer
setPlaybackTimer:
disconnectTimer
setDisconnectTimer:
deviceState
setDeviceState:
disconnectInterval
recentlyPlayingInterval
pendingDisconnectDate
setPendingDisconnectDate:
_disconnectTimer
_deviceState
_disconnectInterval
_recentlyPlayingInterval
_pendingDisconnectDate
T@"MSVTimer",&,N,V_playbackTimer
T@"MSVTimer",&,N,V_disconnectTimer
TQ,N,V_deviceState
Td,R,N,V_disconnectInterval
Td,R,N,V_recentlyPlayingInterval
T@"NSDate",&,N,V_pendingDisconnectDate
T@"<MRDConnectionLifetimeControllerDataSource>",W,N,V_dataSource
T@"<MRDConnectionLifetimeControllerDelegate>",W,N,V_delegate
_handleMaybeCanMigrateToLocalEndpointDidChange:
_handleExternalDeviceConnectionDidChange:
outputContextDataSourceOutputDeviceDidChangeVolume:
outputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilities:
outputContextDataSourceDidAddOutputDevice:
outputContextDataSourceDidChangeOutputDevice:
outputContextDataSourceDidRemoveOutputDevice:
_userInfoFromEndpoint:outputDevice:
expanseManagerTelevisionDidJoinSession:
expanseManagerTelevisionDidLeaveSession:
expanseManagerDidJoinExpanseSession:
expanseManagerDidLeaveExpanseSession:
T@"MROrigin",R,N
disconnectOrigin:
getPersonalOutputDevices:
getExternalDeviceMetadataWithCompletion:
getExternalDeviceIsPairedWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
outputDeviceVolumeControlCapabilities:withCompletion:
setListeningMode:outputDeviceUID:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterDeviceUIDs:removingClusterDeviceUIDs:settingClusterDeviceUIDs:completion:
createHostedEndpointWithOutputDeviceUIDs:completion:
pingWithTimeout:callback:
sendButtonEventWithUsagePage:usage:down:
T@"NSArray",C,N
initWithExternalDevice:
externalDevice
externalDeviceListenerEndpoint
externalDeviceClients
tombstone
_processCanMigrateToLocalEndpointEvent:timestamp:error:
_postVolumeControlCapabilitiesDidChange:endpoint:outputDevice:
_postVolumeDidChange:endpoint:outputDevice:
_externalDeviceClientDidInvalidate:
_externalDeviceClientForConnection:
_allExternalDeviceClients
_mutableExternalDeviceClientsWithRegisteredCallbacks:
_mutableExternalDeviceClientsWithRegisteredNotification:
_initializeExternalDevice:
_reloadEndpoint
_reloadHostedExternalDeviceCallbacks
_reloadHostedExternalDeviceNotifications
_reloadHostedExternalDeviceSubscribedPlayerPaths
_maybePostEndpointDidAddOutputDevice:
_maybePostVolumeControlCapabilitiesDidChange:outputDevice:
_maybePostVolumeDidChange:outputDevice:
_maybePostEndpointDidChangeOutputDevice:
_maybePostEndpointDidRemoveOutputDevice:
_onSerialQueue_reevaluateVolumeControlCapabilitiesForEndpoint:
_onSerialQueue_endpointShouldPostVolumeNotifications:outputDevice:
_endpointShouldNotifyClientsOfTopologyChanges:
_onSerialQueue_endpointSupportsVolumeControl:
_endpointIsSolo:
_onSerialQueue_isEndpointsDesignatedGroupLeader:
xpcListener
setXpcListener:
externalDeviceCallbackQueue
setExternalDeviceCallbackQueue:
mutableExternalDeviceClients
setMutableExternalDeviceClients:
externalOutputContext
useOutputDeviceCache
setUseOutputDeviceCache:
tombstoned
setTombstoned:
silentDiscoverySession
setSilentDiscoverySession:
canMigrateToLocalEndpointError
setCanMigrateToLocalEndpointError:
lifetimeController
setLifetimeController:
canMigrateEvaluationTimestamp
setCanMigrateEvaluationTimestamp:
_useOutputDeviceCache
_tombstoned
_externalDevice
_xpcListener
_externalDeviceCallbackQueue
_mutableExternalDeviceClients
_externalOutputContext
_silentDiscoverySession
_canMigrateToLocalEndpointError
_lifetimeController
_canMigrateEvaluationTimestamp
T@"NSXPCListener",&,N,V_xpcListener
T@"NSObject<OS_dispatch_queue>",&,N,V_externalDeviceCallbackQueue
T@"NSMutableSet",&,N,V_mutableExternalDeviceClients
T@"MRExternalOutputContextDataSource",R,N,V_externalOutputContext
TB,N,V_useOutputDeviceCache
TB,N,V_tombstoned
T@"MRAVRoutingDiscoverySession",&,N,V_silentDiscoverySession
T@"NSError",&,N,V_canMigrateToLocalEndpointError
T@"MRDConnectionLifetimeController",&,N,V_lifetimeController
T@"NSDate",&,N,V_canMigrateEvaluationTimestamp
T@"MRExternalDevice",R,N,V_externalDevice
T@"MRAVDistantEndpoint",R,N,V_endpoint
endpointDidAddOutputDeviceNotification:
endpointDidRemoveOutputDeviceNotification:
endpointVolumeDidChangeNotification:
endpointVolumeControlCapabilitiesDidChangeNotification:
deviceInfoDidChangeNotification:
gameControllerConnectionDidInterrupt:
minimumSupportedProtocolVersion
minimumSupportedHangdogApplicationVersion
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
remoteControlService:didAcceptClientConnection:
stateObserver:didReceiveApplicationClientStateDidChange:
stateObserver:didReceiveClientDidUnregister:
stateObserver:didReceivePlayerDidUnregister:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
stateObserver:didReceiveVolumeControlCapabilitiesChange:playerPath:
stateObserver:didReceiveDefaultSupportedCommandsChange:playerPath:
stateObserver:didReceiveCoalescedNowPlayingStateChange:playerPath:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
textEditingService:textEditingDidBegin:withAttributes:payload:
textEditingService:textDidChange:payload:
textEditingService:attributesDidChange:payload:
textEditingServiceTextEditingDidEnd:
textEditingService:echoWithText:
registerNotifications
clearEndpointForClient:
clients
endpoints
_createLocalizedOutputDevice:forClient:endpoint:
_createLocalizedOutputDevices:forClient:endpoint:
_createVolumelessOutputDevices:
_createSkeletonOutputDevices:
_addToMessage:withAllClusterDeviceMembers:block:
_handleClientConnection:
_prewarmMediaApps
_disconnectClient:withError:
_findClientIf:
_clientForPairingSession:
_clientForIdentifier:
_verifyClientVersionCompatibility:withError:
_connection:wasPreviouslySubscribedToPlayerPath:
_connection:canReceiveUpdatesForPlayerPath:
_sendMessageFromDestinationWithSource:handler:
_sendStateUpdateMessageFromPlayerPath:source:handler:
_shouldSendStateUpdateMessageFromSource:toClient:
_broadcastKeyboardMessageWithState:text:attributes:
_broadcastRemoteTextInputMessageWithPayload:
_setGameControllerInputMode:
_unpair:
_notifyAndDisconnectClient:withError:
_notifyAndDisconnectClients:withError:completion:
_wakeDevice:dismissScreenSaver:
_isConnectionForManagedConfigIDAllowed:
setServerDiscoveryMode:forConfiguration:
purgeUnusedDiscoverySessions
serverDiscoveryModeForConfiguration:
outputDevicesChanged:forConfiguration:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_handleDeviceInfoRequest:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
_handleReceivedButtonEvent:fromClient:
_handleTouchEvent:withDeviceID:fromClient:
_handleRegisterGameControllerMessage:client:
_handleClientUpdatesConfigMessage:fromClient:
_syncStateToClient:
_addOutputDevicesToMessage:forClient:withEndpoint:
_addVolumeToMessage:forClient:withEndpoint:completion:
_origin:matchesSubscribedPlayerPath:
_origin:client:matchesSubscribedPlayerPath:
_origin:client:player:matchesSubscribedPlayerPath:
_playerPath:matchesSubscribedPlayerPath:
_addSubscribedStateToMessage:forClient:originClient:
_addSubscribedStateToMessage:forClient:nowPlayingClient:
_addSubscribedStateToMessage:forClient:playerClient:
_addNowPlayingStateToMessage:forClient:withEndpoint:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleGetRemoteTextInputSessionMessage:fromClient:
_handleRemoteTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_handleHiliteModeChanged:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
addAuthorizationCallbackForOutputDevice:callback:
removeAuthorizationCallbackForOutputDevice:
addAuthorizationCallbackForOutputDevice:client:
_handleModifyOutputContextRequestMessage:fromClient:
_handleGetVolumeMessage:fromClient:
_handleGetVolumeControlCapabilitiesMessage:fromClient:
_handleSetVolumeMessage:fromClient:
_handlePlaybackSessionRequestMessage:fromClient:
_handlePlaybackSessionMigrateRequestMessage:fromClient:
_handlePlaybackSessionMigrateBeginMessage:fromClient:
_handlePlaybackSessionMigrateEndMessage:fromClient:
_handleUpdateActiveSystemEndpointMessage:fromClient:
_handleSetDiscoveryModeMessage:fromClient:
_handleSetListeningModeMessage:fromClient:
_handleCreateHostedEndpointRequestMessage:fromClient:
_handleAdjustVolumeMessage:fromClient:
_handleGetIsMutedMessage:fromClient:
_handleSetIsMutedMessage:fromClient:
remoteControlService
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_stateObserver
_pinPairingDialog
_sleepObserver
_outputContextController
_outputDeviceCallbackTokens
_discoverySessions
_remoteControlService
T@"MRDRemoteControlService",R,N,V_remoteControlService
proxyForObject:protocol:
proxyForObjects:protocol:
forwardInvocation:
methodSignatureForSelector:
objects
setObjects:
protocol
setProtocol:
_objects
_protocol
T@"NSHashTable",&,N,V_objects
T@"Protocol",&,N,V_protocol
_handleExternalDeviceConnectionStateDidChangeNotification:
_handleObserverDiscoveryModeDidChangeNotification:
_handleEndpointOutputDevicesDidChangeNotification:
_handleOutputContextManagerDidReset:
hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:
initWithDiscoverySession:
createDiscoverySession
availableExternalDevices
availableDistantOutputDevices
availableDistantAudioOutputDevices
externalDeviceForEndpoint:
externalDeviceForOutputDeviceUID:
_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:
determineGroupLeaderForOutputDevices:options:
virtualOutputDevices
addVirtualOutputDevice:forClient:
removeVirtualOutputDevicesForClient:
_onQueue_reloadOutputDevices
_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:
_processDiscoveryObserverChanges
computeHostsByGroupIDForOutputDevices:unclusteredDevices:
resolveOutputDevices:
filterOutputDevices:remoteControllableOnly:
setDiscoverySession:
virtualOutputDeviceDictionary
setVirtualOutputDeviceDictionary:
_observerCalloutQueue
_hostsByGroupID
_endpoints
_distantOutputDevices
_localEndpoint
_discoverySessionOutputDevicesToken
_discoverySessionEndpointsToken
_externalDeviceManager
_virtualOutputDeviceDictionary
T@"MRDRemoteControlDiscoverySession",&,N,V_discoverySession
T@"NSMutableDictionary",&,N,V_virtualOutputDeviceDictionary
isLocallyHosted
willBeLocallyHosted
lockScreenController:lockScreenWidgetActiveDidChange:
lockScreenController:lockScreenWidgetVisibleDidChange:
lockScreenController:playerPathDidChange:
electedPlayerController:electedPlayerDidChange:change:event:reason:
lockScreenPlatterActive
nowPlayingClient:activePlayerDidChangeFromPlayerClient:toPlayerClient:
nowPlayingClient:clientStateDidChange:
nowPlayingClient:playerDidRegister:
nowPlayingClient:playerDidUnregister:
nowPlayingPlayerClient:clientCanBeNowPlayingDidChange:
nowPlayingClient:applicationDidForeground:
nowPlayingOriginClient:deviceInfoDidChange:previousDeviceInfo:
nowPlayingOriginClient:activePlayerPathDidChange:withPlaybackState:
nowPlayingOriginClient:applicationActivityDidBegin:
nowPlayingOriginClient:applicationActivityDidEnd:
nowPlayingOriginClient:applicationActivityStatusDidChange:
nowPlayingOriginClient:clientDidRegister:
nowPlayingOriginClient:clientDidUnregister:
nowPlayingOriginClient:currentRouteVolumeControlCapabilitiesDidChange:
nowPlayingOriginClient:currentRouteVolumeDidChange:
nowPlayingOriginClient:currentRouteIsMutedDidChange:
nowPlayingOriginClient:activePlayerClientsDidChange:
nowPlayingOriginClientPlaybackDidTimeout:
nowPlayingPlayerClient:playerStateDidChange:
nowPlayingPlayerClient:isPlayingDidChange:
nowPlayingPlayerClient:playbackStateDidChange:
nowPlayingPlayerClient:supportedCommandsDidChange:
nowPlayingPlayerClient:playbackQueueDidChange:nowPlayingItemDidChange:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:
nowPlayingPlayerClient:playbackQueueContentItemsDidChange:
nowPlayingPlayerClient:playbackQueueArtworkContentItemsDidChange:
nowPlayingPlayerClient:pictureInPictureEnabledDidChange:
nowPlayingPlayerClient:playerCanBeNowPlayingDidChange:
activeClientPID
localActiveClientPID
activeClientBundleIdentifier
localActiveClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
activePlayerClient
localActivePlayerClient
localActiveNowPlayingClient
localOriginClient
activeOriginClient
companionOriginClient
_onQueue_activeOriginClient
_onQueue_companionOriginClient
localActivePlayerPath
allNowPlayingInfoClients
_onQueue_allNowPlayingInfoClients
allLocalNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
originClients
queryPlayerPathForXPCMessage:fromClient:
queryExistingPlayerPathForXPCMessage:forClient:
resolvePlayerPath:fromClient:
resolvePlayerPath:fromClient:useDefaultPlayerIfNoneSpecified:
resolveExistingPlayerPath:
queryPlayerPath:
_onQueue_queryPlayerPath:
xpcClientForPlayerPath:
localPlayersForXpcClient:
originClientForOrigin:
originClientForGroupLeaderOfDeviceUID:
clearNowPlayingClientForXPCClient:
restoreDeviceInfoToClient:handler:
restoreClientState:handler:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
registerOrigin:deviceInfo:
reregisterOrigin:deviceInfo:
unregisterOrigin:
updateDeviceInfo:origin:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingPlayerMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleGetClientPropertiesMessage:fromClient:
_handleSetClientPropertiesMessage:fromClient:
_handleUpdateClientPropertiesMessage:fromClient:
_handleGetPlayerPropertiesMessage:fromClient:
_handleSetPlayerPropertiesMessage:fromClient:
_handleUpdatePlayerPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleGetActivePlayerPathsForLocalOriginMessage:fromClient:
_handleGetPlayerPictureInPictureEnabledMessage:fromClient:
_handleSetPlayerPictureInPictureEnabledMessage:fromClient:
_handleContentItemChangedMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
_handleGetDeviceInfo:fromClient:
_handleGetElectedPlayerPathMessage:fromClient:
_handlePlaybackSessionRequest:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleSetDefaultSupportedCommandsMessage:fromClient:
_handleGetLastPlayingDateMessage:fromClient:
_handleSetPlayerClientPropertiesMessage:fromClient:
_handleSetOriginClientPropertiesMessage:fromClient:
_handleRegisterForWakingNowPlayingNotifications:fromClient:
_handleGetAudioFormatContentInfoForOriginMessage:fromClient:
nowPlayingServer:activeOriginDidChangeFromOriginClient:toOriginClient:
postActiveOriginDidChange:withPlaybackState:handler:
postOriginDidRegister:handler:
postOriginDidUnRegister:deviceInfo:handler:
postDeviceInfoDidChange:previousDeviceInfo:forOrigin:handler:
postVolumeDidChange:volume:handler:
postVolumeCapabilitiesDidChange:capabilities:handler:
postIsMutedDidChange:isMuted:handler:
postNowPlayingApplicationDidChangeForPlayerPath:withPlaybackState:handler:
postClientDidRegisterCanBeNowPlayingForPlayerPath:handler:
postClientDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postPlayerDidRegisterCanBeNowPlayingForPlayerPath:handler:
postPlayerDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postClientDidRegisterForPlayerPath:handler:
postClientDidUnregisterForPlayerPath:hasDefaultSupportedCommands:canBeNowPlaying:handler:
postNowPlayingClientStateDidChange:forPlayerPath:handler:
postActivePlayerDidChangeForPlayerPath:withPlaybackState:handler:
postIsPlayingDidChange:lastPlayingTimestamp:forPlayerPath:handler:
postPictureInPictureDidChange:forPlayerPath:handler:
postActivePlayerPathsDidChangeForOrigin:handler:
postAudioFormatContentInfoDidChangeForOrigin:handler:
postPlaybackStateDidChange:forPlayerPath:handler:
postNowPlayingPlayerStateDidChange:forPlayerPath:handler:
postSupportedCommandsDidChange:forPlayerPath:handler:
postPlaybackQueueDidChange:nowPlayingItemDidChange:forPlayerPath:handler:
postPlaybackQueueContentItemsDidChange:forPlayerPath:handler:
postPlaybackQueueContentItemsArtworkDidChange:forPlayerPath:handler:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:handler:
postPlayerDidRegisterForPlayerPath:handler:
postPlayerDidUnregisterWithPlaybackState:canBeNowPlaying:forPlayerPath:handler:
postElectedPlayerDidChange:change:event:reason:handler:
postLockScreenVisibleDidChange:handler:
postLockScreenActiveDidChange:handler:
postLockScreenPlayerPathDidChange:handler:
postLockScreenControlsDidChangeDistributedNotification
maybePostDistributedNotifications
augmentedUserInfoForPlayerPath:
registerOriginForwarder:
unregisterOriginForwarder:
_hasForwarderForOrigin:
_addOrigin:withDeviceInfo:emitNotification:
_removeOrigin:
_removeNowPlayingClient:forOrigin:
setActiveOrigin:
_onQueue_setActiveOrigin:saveState:
_onQueue_savePersistentActiveOrigin:
_onQueue_restoredActiveOrigin
_onQueue_originClientForOrigin:
_onQueue_originClientForDeviceUID:
_onQueue_originClientForGroupLeaderOfDeviceUID:
electedPlayerController
lockScreenController
proximityController
setActiveOriginClient:
setLocalOriginClient:
_originClients
_nowPlayingApplicationIsPlayingStates
_playbackQueueServer
_originForwarders
_electedPlayerController
_lockScreenController
_proximityController
_activeOriginClient
_localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
Ti,R,N
T@"MRDNowPlayingOriginClient",R,N
T@"NSSet",R,N
T@"MRDElectedPlayerController",R,N,V_electedPlayerController
T@"MRDLockScreenController",R,N,V_lockScreenController
T@"MRDProximityController",R,N,V_proximityController
initWithUnresolvedPlayerPath:
isLocalOrigin
isActivity
playerClient
setPlayerClient:
nowPlayingClient
setNowPlayingClient:
originClient
setOriginClient:
unresolvedPlayerPath
setError:
_playerClient
_nowPlayingClient
_originClient
_unresolvedPlayerPath
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
TI,N,V_error
T@"MRPlayerPath",R,N,V_unresolvedPlayerPath
handleCanBeNowPlayingPlayerDidChange:
playerClients
initializeBundleIdentifier
initializeDisplayName
setActivePlayerClient:
_onQueue_setActivePlayerClient:
_onQueue_activePlayerClient
_reevaluateCanBeNowPlaying
setPerPlayerCanBeNowPlaying:
setCanBeNowPlaying:
canBeNowPlaying
canBeNowPlayingTimestamp
anyPlayerIsPlaying
_onQueue_anyPlayerIsPlaying
canBeNowPlayingForPlayerClient:
setIsForegrounded:
playerClientForPlayer:
_onQueue_playerClientForPlayer:
_onQueue_addPlayer:
existingPlayerClientForPlayerPath:
existingPlayerClientForPlayer:
_onQueue_existingPlayerClientForPlayer:
removePlayerClientForPlayer:
_onQueue_removePlayerClientForPlayer:
notificationPlayerPathFromPlayer:
perPlayerCanBeNowPlaying
setCanBeNowPlayingTimestamp:
isForegrounded
supportsBackgroundAudio
setSupportsBackgroundAudio:
nowPlayingPlayerClient
setNowPlayingPlayerClient:
pushStateActivePlayerClient
setPushStateActivePlayerClient:
pushStateClient
setPushStateClient:
stateMonitor
setStateMonitor:
_playerClients
_canBeNowPlaying
_effectiveCanBeNowPlaying
_perPlayerCanBeNowPlaying
_isForegrounded
_supportsBackgroundAudio
_canBeNowPlayingTimestamp
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_pushStateClient
_stateMonitor
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
T@"MRClient",&,N,V_pushStateClient
T@"BKSApplicationStateMonitor",&,N,V_stateMonitor
TB,N,V_perPlayerCanBeNowPlaying
T@"NSDate",C,N,V_canBeNowPlayingTimestamp
TB,N,V_isForegrounded
TB,N,V_supportsBackgroundAudio
T@"MRClient",&,N
T@"MRDNowPlayingPlayerClient",&,N
T@"<MRDNowPlayingClientDelegate>",W,N,V_delegate
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
T@"MRDMediaRemoteServer",R,N
initializeServer
addClient:
removeClientForPID:
clientForPID:
clientForBundleIdentifier:
clientWithRegisteredCustomOrigin:
mostRecentCanBeNowPlayingClient
mostRecentPlayingClient
allClients
canBeNowPlayingClients
clientForPlayerPath:
postClientNotificationNamed:
postClientNotificationNamed:predicate:
postClientNotificationNamed:userInfo:
postClientNotificationNamed:userInfo:predicate:
restoreClientDeviceInfo:
localNowPlayingClient
systemMediaClient
systemPodcastClient
frontmostClient
daemonClient
sharedCompanionLinkClient
_clientDidOpenConnection:
_handleServerXPCMessage:fromClient:
_collectDiagnosticFromClient:completion:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleSetSystemIsMutedMessage:fromClient:
_handleGetSystemIsMutedMessage:fromClient:
_handleGetIsBooksAppInstalledMessage:fromClient:
_handleGetIsMusicAppInstalledMessage:fromClient:
_isMediaAppInstalled:
_handleWakeMediaAppMessage:fromClient:
_handleWakePlayerServiceMessage:fromClient:
_handlePing:fromClient:
_handleRequestBlessMessage:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
_handleCollectClientDiagnosticsMessage:fromClient:
_handleCollectClientDiagnosticsMessageWithCompletion:
_handleRegisterPairingHandlerMessage:fromClient:
_handleUnregisterPairingHandler:fromClient:
_handleCompletePairingHandlerMessage:fromClient:
_postAppActivityNotificationNamed:withActivity:
_internalMediaRemoteNotificationIsLegal:
_sendMediaRemoteCommand:withOrigin:
_validateAuditTokens:pids:auditTokens:
_restoreNowPlayingClientState
_terminationHandler
availableOrigins
nowPlayingServer
remoteControlServer
routingServer
transactionServer
externalDeviceServer
shouldSendCommandsDuringPhoneCall
sharedDisplayMonitor
_listenerConnection
_connectionQueue
_localRoutingDataSource
_volumeController
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_uiServer
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_termSigHandler
_shouldSendCommandsDuringPhoneCall
_availableOrigins
_sharedDisplayMonitor
T@"NSArray",R,N,V_availableOrigins
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
T@"MRDAVRoutingServer",R,N,V_routingServer
T@"MRDTransactionServer",R,N,V_transactionServer
T@"MRDExternalDeviceRemoteServer",R,N,V_externalDeviceServer
TB,R,N,V_shouldSendCommandsDuringPhoneCall
T@"MRDMediaRemoteClient",R,N
T@"FBSDisplayLayoutMonitor",R,N,V_sharedDisplayMonitor
T@"RPCompanionLinkClient",R,N
initWithName:pid:bundleID:subsystem:reason:flags:
initWithType:pid:bundleID:name:
Tq,R,N,V_type
reasonWithType:string:
string
setString:
_string
TQ,N,V_type
T@"NSString",&,N,V_string
_handleActiveSystemEndpointDidChangeNotification:
_handleEndpointDidInvalidateNotification:
sharedConnectionController
autoConnectingEndpoints
autoConnectedEndpoints
connectToAllOutputDevicesForReason:comparator:queue:completion:
connectToOutputDevice:reason:queue:completion:
connectToGroup:reason:queue:completion:
discoverOutputDevice:reason:queue:completion:
discoverGroup:reason:queue:completion:
_connectToAllOutputDevicesForReason:comparator:queue:completion:
_connectToOutputDevice:reason:completion:
_connectToGroup:reason:completion:
_discoverOutputDevice:reason:completion:
_discoverGroup:reason:completion:
_onSerialQueue_discoverOutputDevice:connect:reason:completion:
_onSerialQueue_discoverGroup:connect:reason:completion:
_onSerialQueue_connectToEndpoint:reason:queue:completion:
_onSerialQueue_addConnectedEndpoint:
_onSerialQueue_removeConnectedEndpoint:
_pendingReconSessions
_pendingReconSessionCompletions
_pendingGroupReconSessions
_pendingGroupReconSessionCompletions
_connectedEndpoints
_connectingEndpoints
_pendingConnectingEndpointCompletions
_handlePlaybackQueueChangedNotification:
_handleNowPlayingApplicationDidChangeNotification:
_handleNowPlayingApplicationDidForegroundNotification:
initWithOriginClient:
setOriginClient:withChangeType:
setActiveSystemEndpointOutputDeviceUID:
activeSystemEndpointOutputDeviceUID
_shouldUseNotification:
_onSyncSelf_reevaluateElectedPlayerForEvent:withReason:
_resolveChangeTypeWithOriginClient:forEvent:
_onSyncSelf_calculateElectedPlayerForOriginClient:event:reason:
_onSyncSelf_maybeSetupPlaybackTimeoutTimerForEvent:
previousElectedPlayerPath
mostRecentEvent
mostRecentEventReason
mostRecentSelectionReason
_activeSystemEndpointOutputDeviceUID
_previousElectedPlayerPath
_mostRecentEvent
_mostRecentEventReason
_mostRecentSelectionReason
T@"NSString",&,N
T@"MRPlayerPath",R,N,V_electedPlayerPath
T@"MRPlayerPath",R,N,V_previousElectedPlayerPath
T@"NSString",R,N,V_event
T@"NSString",R,N,V_eventReason
T@"NSString",R,N,V_selectionReason
T@"NSString",R,N,V_mostRecentEvent
T@"NSString",R,N,V_mostRecentEventReason
T@"NSString",R,N,V_mostRecentSelectionReason
T@"<MRDElectedPlayerControllerDelegate>",N,V_delegate
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
didReceiveData:fromCommunicationChannel:
didCloseCommunicationChannel:
didSetupReverseCommunicationChannel:
failedToSetupReverseCommunicationChannel:
startContext:
_didReceiveData:fromConnectionID:connectionFactory:
_didCloseCommunicationChannelWithID:error:
_systemMusicContext
T@"<MRDAirPlayRemoteControlServiceDelegate>",W,N,V_delegate
createDiagnosticInfo
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendDescribableArray:toString:withTitle:indentLevel:
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
dateCreated
activeClients
setActiveClients:
activeTransactions
setActiveTransactions:
currentAppActivity
setCurrentAppActivity:
setLocalNowPlayingClient:
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
setOriginClients:
activeOrigin
electedPlayer
setElectedPlayer:
electedPlayerReason
setElectedPlayerReason:
setLockScreenWidgetActive:
setLockScreenWidgetVisible:
lockScreenPlayerPath
setLockScreenPlayerPath:
originForwarders
setOriginForwarders:
enqueuedCommands
setEnqueuedCommands:
remoteControlContexts
setRemoteControlContexts:
queuedInitiatePlaybackMessages
setQueuedInitiatePlaybackMessages:
connectedExternalDevices
setConnectedExternalDevices:
televisionEndpoints
setTelevisionEndpoints:
discoverySessions
setDiscoverySessions:
setRemoteControlService:
localOutputContextDataSource
setLocalOutputContextDataSource:
batchedNowPlayingState
setBatchedNowPlayingState:
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
setAirplaySecuritySettings:
localReceiverPairingIdentity
setLocalReceiverPairingIdentity:
systemActiveEndpoints
setSystemActiveEndpoints:
setAutoConnectedEndpoints:
setAutoConnectingEndpoints:
migrationEvents
setMigrationEvents:
mediumDevices
setMediumDevices:
promptingDevices
setPromptingDevices:
immediateDevices
setImmediateDevices:
migratingDevices
setMigratingDevices:
isAdvertisingProximity
setIsAdvertisingProximity:
advertisingReasonDescription
setAdvertisingReasonDescription:
hostedRouteDiscoveryMode
setHostedRouteDiscoveryMode:
hostedDiscoverySessions
setHostedDiscoverySessions:
setEndpoints:
hostedExternalDevices
setHostedExternalDevices:
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
setTransactions:
usedTransactionMemory
setUsedTransactionMemory:
allowedTransactionMemory
setAllowedTransactionMemory:
transactionWaitDuration
setTransactionWaitDuration:
_lockScreenWidgetActive
_lockScreenWidgetVisible
_isAdvertisingProximity
_systemDiscoveryMode
_hostedRouteDiscoveryMode
_dateCreated
_activeTransactions
_currentAppActivity
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_electedPlayer
_electedPlayerReason
_lockScreenPlayerPath
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_localOutputContextDataSource
_batchedNowPlayingState
_airplaySecuritySettings
_localReceiverPairingIdentity
_systemActiveEndpoints
_autoConnectedEndpoints
_autoConnectingEndpoints
_migrationEvents
_mediumDevices
_promptingDevices
_immediateDevices
_migratingDevices
_advertisingReasonDescription
_hostedExternalDevices
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
T@"NSDate",R,N,V_dateCreated
T@"NSArray",C,N,V_activeClients
T@"NSArray",C,N,V_activeTransactions
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
T@"NSArray",C,N,V_originClients
T@"MROrigin",&,N,V_activeOrigin
T@"MRPlayerPath",&,N,V_electedPlayer
T@"NSString",&,N,V_electedPlayerReason
TB,N,V_lockScreenWidgetActive
TB,N,V_lockScreenWidgetVisible
T@"MRPlayerPath",&,N,V_lockScreenPlayerPath
T@"NSArray",&,N,V_originForwarders
T@"NSDictionary",C,N,V_enqueuedCommands
T@"NSArray",C,N,V_remoteControlContexts
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_connectedExternalDevices
T@"NSArray",C,N,V_televisionEndpoints
T@"NSArray",C,N,V_discoverySessions
T@"MRDRemoteControlService",&,N,V_remoteControlService
T@"MROutputContextDataSource",&,N,V_localOutputContextDataSource
T@"NSString",&,N,V_batchedNowPlayingState
TI,N,V_systemDiscoveryMode
T@"_MRAVAirPlaySecuritySettingsProtobuf",&,N,V_airplaySecuritySettings
T@"NSString",C,N,V_localReceiverPairingIdentity
T@"NSDictionary",C,N,V_systemActiveEndpoints
T@"NSArray",C,N,V_autoConnectedEndpoints
T@"NSArray",C,N,V_autoConnectingEndpoints
T@"NSArray",C,N,V_migrationEvents
T@"NSArray",C,N,V_nearbyDevices
T@"NSArray",C,N,V_mediumDevices
T@"NSArray",C,N,V_promptingDevices
T@"NSArray",C,N,V_immediateDevices
T@"NSArray",C,N,V_migratingDevices
TB,N,V_isAdvertisingProximity
T@"NSString",C,N,V_advertisingReasonDescription
TI,N,V_hostedRouteDiscoveryMode
T@"NSArray",C,N,V_hostedDiscoverySessions
T@"NSArray",C,N,V_endpoints
T@"NSDictionary",C,N,V_hostedExternalDevices
T@"NSString",&,N,V_discoverySession
T@"NSArray",C,N,V_recordingEndpointClients
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
TQ,N,V_usedTransactionMemory
TQ,N,V_allowedTransactionMemory
Td,N,V_transactionWaitDuration
airPlayRemoteControlService:didAcceptConnection:
rapportRemoteControlService:didAcceptConnection:
idsCompanionRemoteControlService:didAcceptConnection:
idsRemoteControlService:didAcceptConnection:
_initializeIDSRemoteControlServiceWithRoutingDataSource:
_notifyDelegateWithConnection:
airPlayService
setAirPlayService:
genericNetworkService
setGenericNetworkService:
televisionNetworkService
setTelevisionNetworkService:
rapportService
setRapportService:
companionService
setCompanionService:
started
setStarted:
_airPlayService
_genericNetworkService
_televisionNetworkService
_rapportService
_companionService
T@"MRDBonjourRemoteControlService",&,N,V_genericNetworkService
T@"MRDBonjourRemoteControlService",&,N,V_televisionNetworkService
T@"MRDAirPlayRemoteControlService",&,N,V_airPlayService
T@"MRDRapportRemoteControlService",&,N,V_rapportService
T@"MRDIDSCompanionRemoteControlService",&,N,V_companionService
T@"MRDIDSRemoteControlService",&,N,V_idsService
TB,N,V_started
T@"<MRDRemoteControlServiceDelegate>",W,N,V_delegate
initWithConnection:bundleID:
hasQuickControlsAssertion
setHasQuickControlsAssertion:
hasScreenMirroringAssertion
setHasScreenMirroringAssertion:
_hasQuickControlsAssertion
_hasScreenMirroringAssertion
TB,N,V_hasQuickControlsAssertion
TB,N,V_hasScreenMirroringAssertion
sharedServer
T@"MRDUIServer",R,N
_handleGetUIServerRelayEndpointMessage:fromClient:
_handleGetDeviceSupportsUISessionsMessage:fromClient:
_addClient:
_removeClient:
listener
addClientObserver:
removeClientObserver:
clientForConnection:
remoteUIServerEndpoint
setRemoteUIServerEndpoint:
messageQueue
internalClients
clientObservers
setClientObservers:
sessionServer
setSessionServer:
messageProxy
setMessageProxy:
_listener
_remoteUIServerEndpoint
_messageQueue
_internalClients
_clientObservers
_sessionServer
_messageProxy
T@"NSMutableSet",R,N,V_internalClients
T@"NSHashTable",&,N,V_clientObservers
T@"MRDUISessionServer",&,N,V_sessionServer
T@"MRDServerMessageProxy",&,N,V_messageProxy
T@"NSXPCListenerEndpoint",&,N,V_remoteUIServerEndpoint
T@"NSXPCListener",R,N,V_listener
T@"NSObject<OS_dispatch_queue>",R,N,V_messageQueue
callObserver:callChanged:
_notifyDelegate:
numberOfActivePhoneCalls:
callControllerWillHandleCommandForBargeCalls:
_numberOfActiveCalls
T@"<MRDPhoneCallObserverDelegate>",W,N,V_delegate
playbackStateForPlayerPath:
lastPlayingDateForPlayerPath:
timeSincePlayingForPlayerPath:
localDeviceUID
isMultiplayerHost
_onQueue_adjustPlaybackTimerIfNeededForPlayerPath:
_onQueue_simplifyToplogyOfPlayerPathIfNeeded:
playbackTimers
setPlaybackTimers:
_playbackTimers
T@"NSMutableDictionary",&,N,V_playbackTimers
isSmartDevice
hasASmartDevice
configuration
setConfiguration:
T@"MRAVRoutingDiscoverySessionConfiguration",&,N,V_configuration
initWithName:timeout:
invalidate
_assertionID
outputContextDataSourceOutputDevicesDidChangeNotification:
outputContextDataSourceDidAddOutputDeviceNotification:
outputContextDataSourceDidRemoveOutputDeviceNotification:
outputContextDataSourceVolumeControlCapabilitiesDidChangeNotification:
outputContextDataSourceVolumeDidChangeNotification:
anyOutputContextDidAddOutputDeviceNotification:
outputContextRequestToAddLocalOutputDeviceNotification:
outputContextDidAddLocalDeviceNotification:
anyDeviceInfoDidChangeNotification:
localClusterTypeDidChangeNotification:
initialize
initialPrewarm
prewarmApp:origin:deviceInfo:
_createPlayerAndWaitForConnection:command:deviceInfo:completion:
_createPlayerAndWaitForCanBeNowPlaying:deviceInfo:completion:
_createPlayerForClient:playerPath:deviceInfo:completion:
_resolveReason:uid:name:requestID:
initWithOutputContext:designatedGroupLeader:
setDesignatedGroupLeader:
setOrigin:
_sendCommandPreview:options:playerPath:
_createResolvedPlayerPathFromPlayerPath:
_createPlayerAndWaitForConnection:command:completion:
_createPlayerAndWaitForCanBeNowPlaying:completion:
sendMessageWithType:playerPath:timeout:reason:factory:completion:
_sendMessageForPlayerPath:timeout:reason:factory:completion:
_handlePlaybackQueueRequest:forPlayerPath:completion:
_generateDeviceInfoWithDesignatedGroupLeader:outputContext:
registerForNotifications
_notifyActiveSessionMaybeWillBeHijackedByNativePlaybackFromOutputContextModification:
_reevaluateDeviceInfo
cleanUp
verifyGroupLeaderForReason:
verifyGroupLeader:
outputDeviceForUID:error:
commitOutputDeviceToContextIfNeededWithReason:completion:
_maybeForwardOriginToLocalOrigin:
_resolveReason:
_onQueue_destroyPlayerPathsForOrigin:
designatedGroupLeader
outputContext
setOutputContext:
notificationQueue
setNotificationQueue:
_originForwarder
_pendingCommitRequests
_clientBundleIDs
_designatedGroupLeader
_outputContext
T@"MRAVOutputContext",&,N,V_outputContext
T@"MROrigin",&,N,V_origin
T@"NSObject<OS_dispatch_queue>",&,N,V_notificationQueue
T@"MRAVOutputDevice",&,N,V_designatedGroupLeader
initWithConnection:label:
initWithXPCConnection:label:
_initWithLabel:
label
canSendMessage:
_canSendMessage
_checkConnectionStatus
_onCalloutQueue_notifyStatusDidChange:
connection_t
setConnection_t:
calloutQueue
currentMessageCount
setCurrentMessageCount:
totalMessageCount
setTotalMessageCount:
status
setStatus:
pendingBarrierCompletion
setPendingBarrierCompletion:
lastStatusCheckDate
setLastStatusCheckDate:
lastStatusChangeDate
setLastStatusChangeDate:
lastMessageSentDate
setLastMessageSentDate:
_label
_pendingBarrierCompletion
_connection_t
_calloutQueue
_currentMessageCount
_totalMessageCount
_status
_lastStatusCheckDate
_lastStatusChangeDate
_lastMessageSentDate
T@"NSXPCConnection",&,N,V_connection
T@"NSObject<OS_xpc_object>",&,N,V_connection_t
T@"NSObject<OS_dispatch_queue>",R,N,V_calloutQueue
TQ,N,V_currentMessageCount
TQ,N,V_totalMessageCount
TQ,N,V_status
TB,N,V_pendingBarrierCompletion
T@"NSDate",&,N,V_lastStatusCheckDate
T@"NSDate",&,N,V_lastStatusChangeDate
T@"NSDate",&,N,V_lastMessageSentDate
T@"<MRXPCConnectionMonitorDelegate>",W,N,V_delegate
_clientInvalidatedNotification:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
systemEndpointController:activeSystemEndpointDidChangeForRequest:type:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
initWithRoutingDataSource:hostedRoutingService:systemEndpointController:autoConnectionController:homeServer:avOutputDeviceAuthorizationSession:
setAirplayActive:
isSilentPrimary
setPickedRoute:withPassword:options:
pickCachedRouteWithUID:
routeIsActiveWithUID:
applicationPickedRoutes
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleClearAllAVRoutePasswordsMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_handleGetHostedRoutingXPCEndpointMessage:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleUpdateActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDsMessage:fromClient:
_handleGetHostedEndpointForDeviceUIDMessage:fromClient:
_handlePromptForRouteAuthorizationMessage:fromClient:
_handlePresentRouteAuthorizationStatusMessage:fromClient:
_handleGetAirplayStatus:fromClient:
_handleSetNearbyDevice:fromClient:
_handleResetOutputContextMessage:fromClient:
_handleAddVirtualOutputDeviceMessage:fromClient:
_handleGetVirtualOutputDevicesMessage:fromClient:
_handleCreateGroupWithDevices:fromClient:
_handleStartNowPlayingSession:fromClient:
_handleStopNowPlayingSession:fromClient:
_handleGetOutputContextUIDMessage:fromClient:
_handleMigrateFromEndpointToOutputDevicesMessage:fromClient:
_handleMigrateFromEndpointToEndpointMessage:fromClient:
_handleCreateEndpointWithDevices:fromClient:
_handleCreateDirectEndpointForDevices:fromClient:
_handleGroupDevicesAndSendCommand:fromClient:
_handleCreateHostedEndpointForDevices:fromClient:
_handlePredictGroupLeader:fromClient:
_handleRemoveFromParentGroup:fromClient:
_handleGetExternalDeviceMessage:fromClient:
_handleModifyOutputContextMessage:fromClient:
_handleWillStartPlayingInterruptMessage:fromClient:
postSystemEndpointDeviceChange:type:originClient:handler:
_postRouteStatusDidChangeNotificationForRoute:newStatus:
_handleAuthorizationRequest:
_unregisterNotifications
_passwordDialogForRouteWithName:usingInputType:
_updateSystemRouteDiscoveryMode
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_handleClusterErrorStatus:forRoute:
_launchTVClusterSettings
_handleErrorStatus:forRoute:
_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:
_handleAuthenticationFailureForRoute:withOptions:
_existingKeychainAccountForOutputDevice:password:
_savedPasswordForOutputDevice:
_clearPasswordForOutputDevice:
_saveMostRecentlyPicked
_loadMostRecentlyPicked
_setPickedRoute:withPassword:options:
_postExternalScreenDidChange
_presentPasswordDialogForRoute:withOptions:
_storePassword:forRoute:
_storePassword:forOutputDevice:
_preferredIdentifierForMACAddress:identifier:name:
_setApplicationPickedRoutes:updateRoutes:forClient:
_createAirPlaySecuritySettings
_createEndpointForOutputDeviceIDs:completion:
_createEndpointForOutputDeviceIDs:options:completion:
createHostedEndpointForOutputDeviceUIDs:completion:
_createEndpointForOutputDeviceIDsLegacy:options:completion:
_predictGroupLeaderForOutputDeviceIDs:completion:
hostedRoutingService
systemEndpointController
airplayActive
activePasswordDialog
setActivePasswordDialog:
discoveryTransaction
setDiscoveryTransaction:
_autoConnectionController
_routeUIDsToIgnorePortStatusFailures
_lastClusterConnectionFailureDate
_reconnaissanceSessions
_mostRecentlyPickedDevices
_mostRecentStatus
_homeServer
_workerOperationQueue
_localDeviceCommitManager
_topologySimplifier
_airplayActive
_hostedRoutingService
_systemEndpointController
_activePasswordDialog
_discoveryTransaction
T@"MSVSystemDialog",&,N,V_activePasswordDialog
T@"MROSTransaction",&,N,V_discoveryTransaction
TB,N,V_airplayActive
T@"MRDAVHostedRoutingService",R,N,V_hostedRoutingService
T@"MRDAVSystemEndpointController",R,N,V_systemEndpointController
silentPrimary
TB,R,N,GisSilentPrimary
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
_frontmostApplicationDidChange:
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_notifyDelegateNowPlayingApplicationDidChange
_notifyDelegateNowPlayingPlaybackStateDidChange
_mostRecentlyUpdatedClient
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
setCachedNowPlayingClients:
cachedNowPlayingContentItem
setCachedNowPlayingContentItem:
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
T@"NSSet",&,N,V_cachedNowPlayingClients
T@"MRContentItem",&,N,V_cachedNowPlayingContentItem
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
identifier
_identifier
_port
TI,R,N,V_connection
TI,R,N,V_identifier
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",W,N,V_delegate
addHostedExternalDevice:endpoint:
hostedExternalDeviceForEndpointIdentifier:
isDirectConnectedToOutputDeviceUID:
disconnectUndiscoverableEndpoints:
_removeExternalDeviceWithEndpointIdentifier:forReason:
_removeExternalDeviceWithOutputDeviceUID:forReason:
_tombstoneHostedExternalDevice:
_hostedExternalDeviceGraveyard
_hostedExternalDeviceMap
T@"<MRDHostedExternalDeviceManagerDelegate>",W,N,V_delegate
registeredDevices
registeredDeviceWithID:
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
_registeredDevices
T@"NSArray",R,C,N
T@"<MRDVirtualAudioInputServerDelegate>",W,N,V_delegate
initWithPlaybackQueue:
updatePlaybackQueueWithContentItems:fromRequest:
clearArtworkForContentItems:
clearArtwork
createPlaybackQueueForRequest:cachingPolicy:playerPath:partiallyCachedItems:
artworkCache
setArtworkCache:
_artworkCache
T@"MRDPlaybackQueueArtworkCache",&,N,V_artworkCache
T@"MRPlaybackQueue",R,N,V_playbackQueue
addArtworkFromItem:fromRequest:
fittedArtworkForContentItem:withRequest:
clearArtworkForItems:
_pruneCache
_cache
artworkCacheSize
T@"MRDPlaybackQueueArtworkCacheSize",R,N
defaultSize
copyWithZone:
initWithW:h:
Td,R,N,V_w
Td,R,N,V_h
_forceEnableCECVolumeNotification:
_systemVolumeDidChange:
_systemMuteDidChange:
_currentRouteHasVolumeControlDidChangeNotification:
observeValueForKeyPath:ofObject:change:context:
_setupNotifications
_tearDownNotifications
_initVolumeDataIfNeccessary
_reloadVolumeDataWithReason:
_volumeFromAVController
_updateVolumeValueCache
_updateIsMutedValueCache
_updateCapabilitiesValueCache
_postVolumeDidChange:
_postIsMutedDidChange:
_postVolumeControlCapabilitiesDidChange:
_platformHasNativeMuteSupport
_volumeDataIntialized
_volumeValue
_isMutedValue
_capabilitiesValue
remoteAlertHandleDidActivate:
remoteAlertHandleDidDeactivate:
remoteAlertHandle:didInvalidateWithError:
initWithConfigurationData:style:endpoint:
initWithRouteUID:center:
presentWithCompletion:
_createRemoteAlertHandleIfNeeded
completion
setCompletion:
configurationData
setConfigurationData:
setRouteUID:
center
setCenter:
serviceType
setServiceType:
style
setStyle:
remoteAlertHandle
setRemoteAlertHandle:
_style
_completion
_configurationData
_center
_serviceType
_remoteAlertHandle
T@?,C,N,V_completion
T@"NSData",&,N,V_configurationData
T@"NSObject<OS_xpc_object>",&,N,V_endpoint
T@"NSString",C,N,V_routeUID
T@"NSString",C,N,V_center
TQ,N,V_serviceType
TI,N,V_style
T@"SBSRemoteAlertHandle",&,N,V_remoteAlertHandle
T@"NSString",C,N,V_bundleIdentifier
euid
auditToken
displayName
setRouteDiscoveryMode:
setOutputDeviceDiscoveryMode:
setApplicationPickedRoutes:
pairingHandler
setRemoteUIService:
setKeepAlive:
hasRequestedLegacyNowPlayingInfo
isMediaRemoteDaemon
isEntitledFor:
isAllowedAccessToDataFromPlayerPath:
postNotification:
notificationRequiresTaskAssertionForPlayerPath:
setWantsAssertionsForNotificationsWithPlayerPath:
takeAssertion:forReason:duration:
takeAssertionAndBlessForReason:
sendRemoteControlCommand:withCompletionBlock:
sendRemoteControlCommandWithoutRedirection:withCompletionBlock:
relayXPCMessage:andReply:
relayXPCMessage:andReply:resultCallback:
_relayXPCMessage:andReply:resultCallback:
createNowPlayingClient
_handleXPCMessage:
_runAssertionName
_wakeDevice:dismissScreenSaver:reason:
_postNotification:
messageHandler
setMessageHandler:
currentTaskAssertion
setCurrentTaskAssertion:
processName
hardwareRemoteBehavior
setHardwareRemoteBehavior:
routeDiscoveryCount
routeDiscoveryMode
outputDeviceDiscoveryMode
remoteUIService
setPairingHandler:
isActive
keepAlive
setHasRequestedLegacyNowPlayingInfo:
hasRequestedSupportedCommands
setHasRequestedSupportedCommands:
entitlements
_source
_applicationPickedRoutes
_assertions
_relayingMessages
_entitlements
_subscribedWakingPlayerPaths
_isActive
_keepAlive
_hasRequestedLegacyNowPlayingInfo
_hasRequestedSupportedCommands
_hardwareRemoteBehavior
_routeDiscoveryMode
_outputDeviceDiscoveryMode
_messageHandler
_currentTaskAssertion
_processName
_routeDiscoveryCount
_remoteUIService
_pairingHandler
T@"<MRDXPCMessageHandling>",W,N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",W,N,V_delegate
T@"MRXPCConnection",R,N,V_connection
T@"NSData",R,N
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
T@"NSString",R,N,V_processName
TI,N,V_hardwareRemoteBehavior
TQ,R,N,V_routeDiscoveryCount
TI,N,V_routeDiscoveryMode
TI,N,V_outputDeviceDiscoveryMode
T@"MRDMediaRemoteUIService",&,N,V_remoteUIService
T@"MRDPairingHandler",&,N,V_pairingHandler
TB,R,N,V_isActive
TB,N,V_keepAlive
TB,N,V_hasRequestedLegacyNowPlayingInfo
TB,N,V_hasRequestedSupportedCommands
TQ,R,N,V_entitlements
initWithDeviceDescriptor:
deviceProperties
handleHIDReport:
handleTouchEvent:
_newIOKitDeviceProperties
deviceDescriptor
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_uniqueIdentifier
_ioDevice
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
TQ,R,N,V_uniqueIdentifier
T^{__IOHIDUserDevice=},R,N,V_ioDevice
sharedMonitor
T@"MRDDisplayMonitor",R,N
_fbsDisplayMonitorConfiguration
setDisplayOn:
setLockScreenForegrounded:
lockScreenVisible
controlCenterVisible
layoutMonitor:didUpdateDisplayLayout:withContext:
scheduleLayoutChangeForReason:
displayOn
lockScreenForegrounded
controlCenterForegrounded
setControlCenterForegrounded:
_layoutChangeScheduled
_displayOn
_lockScreenForegrounded
_controlCenterForegrounded
TB,N,V_displayOn
TB,N,V_lockScreenForegrounded
TB,N,V_controlCenterForegrounded
initWithDevice:
initWithDeviceUID:
setDevice:
isConnected
resetConnection
sendMessage:type:destination:session:options:priority:
sendMessage:type:destination:session:options:priority:response:
setMessageHandler:forType:
setMessageHandler:forType:destination:session:
removeMessageHandlerForType:
removeMessageHandlerForType:destination:session:
handleDidReceiveResetConnectionRequest
handleIncomingMessage:type:destination:session:messageID:replyID:
_maybeDeviceConnectionStatusChanged
_configurationFromDestination:session:
mrService
setInvalidationHandler:
connectionHandler
setConnectionHandler:
_messageHandlers
_destinationMessageHandlers
_serviceHandlerToken
_mrService
_connectionHandler
T@"IDSDevice",&,N
T@"NSString",R,N,V_deviceUID
T@"MRDIDSService",R,N,V_mrService
T@?,C,N,V_invalidationHandler
T@?,C,N,V_connectionHandler
initWithRoute:inputType:responseCallback:cancelCallback:
respondWithAuthorizationToken:
inputType
_responseCallback
_cancelCallback
_inputType
T@"MRDAVRoute",R,N,V_route
Tq,R,N,V_inputType
forwarderWithTarget:
forwarderWithXPCTarget:
target
setTarget:
_target
T@"<MRUIClientProtocol>",W,N,V_target
T@"<MRUIClientXPCProtocol>",W,N,V_target
_updateSuggestionCountIfNeeded
_notifyDelegate
lockScreenPlatterHasContent
suggestionPreferences
setSuggestionPreferences:
shouldConsiderSuggestions
setShouldConsiderSuggestions:
suggestionCount
setSuggestionCount:
_shouldConsiderSuggestions
_suggestionPreferences
_suggestionCount
T@"MRMediaSuggestionPreferences",&,N,V_suggestionPreferences
TB,N,V_shouldConsiderSuggestions
Tq,V_suggestionCount
T@"<MRDLockScreenContentControllerDelegate>",W,N,V_delegate
addHandlerForRouteUID:completion:
performHandlerForRouteUID:passcode:
handlers
_handlers
T@"NSMutableDictionary",R,V_handlers
mutableCopyWithZone:
initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:optionsData:
protobufData
destinationAppProcessID
destinationAppDisplayID
isNavigational
optionsData
remoteControlInterfaceID
commandID
senderID
alwaysIgnoreDuringCall
alwaysIgnoreDuringSharePlay
isContextSensitive
shouldImplicitlyLaunchApplication
originatedFromAccessory
originatedFromHID
isAVRCPCommand
optionValueForKey:
_completionHandler
_setCompletionHandler:
_optionsDictionary
_copyWithZone:usingConcreteClass:
commandType
senderAppDisplayID
appOptions
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
TI,R,N,V_commandType
T@"NSString",R,N,V_senderAppDisplayID
TI,R,N,V_appOptions
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
avrcpCommand
TB,R,N,GisAVRCPCommand
setCommandType:
setOptionsData:
setDateCreated:
setSenderAppDisplayID:
setAppOptions:
setDestinationAppDisplayID:
setDestinationAppProcessID:
setOptionValue:forKey:
TI,D,N
T@"NSData",C,D,N
T@"MRPlayerPath",C,D,N
T@"NSDate",C,D,N
T@"NSString",C,D,N
T@"NSString",C,N
Ti,N
initWithCommand:routedApp:
routedAppDisplayID
_routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
sampleRate
MACAddress
_picked
_speakerRoute
_modelName
_MACAddress
_dictionary
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_modelName
T@"NSData",R,N,V_MACAddress
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
T@"NSDictionary",R,N,V_dictionary
initWithBundleID:indexPathData:
indexPathData
_indexPathData
T@"NSData",R,N,V_indexPathData
lockScreenUIController
initWithDelegate:
initWithClientObject:
T@,R,W,N,V_delegate
T@"MRDUIControllerConnection",R,N,V_connection
acquireLockScreenControlsAssertion
releaseLockScreenControlsAssertion
acquireQuickControlsAssertion
releaseQuickControlsAssertion
acquireScreenMirroringQuickControlsAssertion
releaseScreenMirroringQuickControlsAssertion
_updateTransaction
hasUIAssertions
xpcConnection
synchronousServer
hasLockScreenControlsAssertion
setHasLockScreenControlsAssertion:
hasScreenMirroringQuickControlsAssertion
setHasScreenMirroringQuickControlsAssertion:
_hasLockScreenControlsAssertion
_hasScreenMirroringQuickControlsAssertion
_xpcConnection
T@"NSXPCConnection",R,N,V_xpcConnection
T@"<MRUIServerXPCProtocol>",R,N
TB,N,V_hasLockScreenControlsAssertion
TB,N,V_hasScreenMirroringQuickControlsAssertion
deviceID
token
expirationDate
_deviceID
_token
_expirationDate
T@"NSString",R,N,V_deviceID
T@"NSString",R,N,V_token
T@"NSDate",R,N,V_expirationDate
setDeviceID:
setToken:
setExpirationDate:
initWithAVOutputDevice:
avOutputDevice
_avOutputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
@16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"NSString"
@"NSDate"
@24@0:8@16
@24@0:8q16
v40@0:8@16q24@32
v48@0:8@16q24@32@40
v48@0:8q16q24@32@40
v56@0:8q16q24q32@40@48
@40@0:8q16q24^@32
@32@0:8q16^@24
@24@0:8^@16
v48@0:8@16q24q32@40
v32@0:8@16@?24
B24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"MRDNowPlayingServer"
@"MRDHostedRoutingController"
@"NSMutableDictionary"
@"NSUserDefaults"
@"MSVPersistentTimer"
@"MROrigin"
@"<MRDAVSystemEndpointControllerDelegate>"
@"MRPlayerPath"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"MRDPhoneCallObserver"16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"MRDMediaRemoteClient"24
v24@0:8@"MRDDiagnostic"16
v40@0:8@16@24@?32
@32@0:8@16@24
B20@0:8I16
@40@0:8@16@24^@32
@56@0:8@16@24@32@40@?48
@"NSMutableSet"
@"MRDPhoneCallObserver"
@"MSVSystemDialog"
@24@0:8^{_NSZone=}16
v28@0:8f16^@20
v32@0:8q16^@24
v28@0:8B16^@20
f16@0:8
I16@0:8
@"MRDAVRoutingDataSource"
I24@0:8@16
v28@0:8I16@20
@20@0:8I16
@"NSMutableArray"
@28@0:8@16I24
B32@0:8@16@24
B36@0:8@16@24I32
@?24@0:8@16
v20@0:8I16
@"MRDAVRoute"
v24@0:8@"MRDUIClient"16
v24@0:8@?16
v24@0:8@?<v@?>16
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSString"16@?<v@?@"NSString">24
@"MRUISessionController"
v24@0:8^{__IOHIDEvent=}16
v24@0:8Q16
v24@0:8I16I20
^{__IOHIDEventSystemClient=}
@28@0:8@16i24
i16@0:8
v20@0:8B16
d16@0:8
@20@0:8B16
@44@0:8@16I24@28^@36
v28@0:8@16B24
@"NSArray"
@"NSData"
@"MRDPlaybackQueue"
@"MRDNowPlayingPlayerClientPlaybackState"
@"MROSTransaction"
@"MRPlaybackQueueSubscriptionController"
@"<MRDNowPlayingPlayerClientDelegate>"
@"MRPlayer"
@28@0:8I16@20
q24@0:8@16
v40@0:8@16@24@32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
@"CUBluetoothClient"
@"NSNetService"
@"<MRDBonjourRemoteControlServiceDelegate>"
v24@0:8@"MRXPCConnectionMonitor"16
v36@0:8@16I24@28
v36@0:8@16f24@28
v28@0:8I16@"NSError"20
v24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v24@0:8@"MRAVEndpoint"16
v36@0:8@"MRAVEndpoint"16I24@"MRAVOutputDevice"28
v36@0:8@"MRAVEndpoint"16f24@"MRAVOutputDevice"28
v32@0:8@"MRAVEndpoint"16@"MRAVOutputDevice"24
v32@0:8@"NSArray"16@"MRAVRoutingDiscoverySessionConfiguration"24
@"NSXPCConnection"
@"MRDAVHostedExternalDevicePendingClientState"
@"MRXPCConnectionMonitor"
@"MRDMediaRemoteClient"
@"NSError"
@"MRAVDistantEndpoint"
@"NSNumber"
@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications"
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@32@0:8@16@?24
@24@0:8@?16
B80@0:8@16@24@32@40@48@56q64@?72
B88@0:8@16@24@32@40@48@56q64@72@?80
@"IDSService"
@48@0:8@16@24@32@40
B32@0:8@16q24
@"IDSDevice"
@"MRDIDSService"
@36@0:8i16@20@28
@"NSSet"
@36@0:8@16@24B32
@"NSHashTable"
@"NSDictionary"
@"MRClient"
@"AVOutputDeviceDiscoverySession"
@40@0:8@16@24@32
@"<MRDRapportRemoteControlServiceDelegate>"
@"MRCompanionLinkClient"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"MRRapportTransportConnection"
@"<NSObject>"
v32@0:8@16I24I28
v32@0:8@"MRNowPlayingController"16@"MRNowPlayingPlayerResponse"24
v32@0:8@"MRNowPlayingController"16I24I28
v40@0:8@"MRNowPlayingController"16@"MRPlaybackQueue"24@"MRPlaybackQueue"32
v32@0:8@"MRNowPlayingController"16@"NSArray"24
v40@0:8@"MRNowPlayingController"16@"NSArray"24@"NSArray"32
v32@0:8@"MRNowPlayingController"16@"NSDate"24
v40@0:8@"MRNowPlayingController"16@"MRClient"24@"MRClient"32
v32@0:8@"MRNowPlayingController"16@"MRPlayerPath"24
v24@0:8@"MRNowPlayingController"16
v32@0:8@"MRNowPlayingController"16@"NSError"24
@"<MRDProximityControllerDataSource>"
@"MRDDisplayMonitor"
@28@0:8@16B24
v32@0:8d16@?24
@?16@0:8
@"NSTimer"
v32@0:8@16Q24
v28@0:8@16I24
v32@0:8@"MRAVClusterController"16Q24
v28@0:8@"MRAVClusterController"16I24
v32@0:8@?16@24
v48@0:8@16{?=^QQ}24@40
@"MRDBrowsableContentAPICoordinator"
v32@0:8@"MRExternalDeviceTransportConnection"16@"NSError"24
v32@0:8@"MRExternalDeviceTransportConnection"16@"NSData"24
@"MRAVOutputDevice"
@"MRDeviceInfo"
@"MRAVConcreteRoutingDiscoverySession"
@"MRDIDSDiscoverySession"
@"MRAirPlayTransportConnection"
v32@0:8I16B20@?24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?I@"NSError">16
v32@0:8I16B20@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v36@0:8@16@24I32
v32@0:8@"MRDHostedRoutingController"16@"NSArray"24
v36@0:8@"MRDHostedRoutingController"16@"NSArray"24I32
@"<MRDAVHostedDiscoverySessionDelegate>"
v32@0:8@"MREmulatedGameController"16@"_MRGameControllerPropertiesProtobuf"24
v32@0:8@"MRAVEndpoint"16@"NSError"24
Q24@0:8@16
@24@0:8Q16
Q24@0:8Q16
v28@0:8{_MRHIDButtonEvent=IIB}16
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRAVEndpoint"
@"MRPasscodeCredentials"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"MRDAVHostedDiscoverySession"16
@"NSXPCListener"
@32@0:8@16Q24
^{sqlite3=}
v32@0:8@"MRProtocolClientConnection"16@"MRProtocolMessage"24
v32@0:8@"MRProtocolClientConnection"16@"NSError"24
@52@0:8@16@24@32@40I48
v48@0:8@16@24@?32@?40
@"<MRDIDSRemoteControlServiceDelegate>"
@"MRDIDSTransportConnection"
@"MRDIDSServerClientConnection"
@"MRExternalDeviceTransportConnection"
v24@0:8d16
@"<MRDPersonalDeviceControllerDelegate>"
@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"
@"MRContentItem"
@"MRDIDSServiceConnection"
@40@0:8Q16@24@32
@32@0:8Q16@24
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v64@0:8@16@24Q32Q40@48@?56
v64@0:8@"MRTransaction"16@"NSArray"24Q32Q40@"NSObject<OS_dispatch_queue>"48@?<v@?>56
v32@0:8@"MRTransaction"16Q24
Q24@0:8@"MRTransaction"16
Q32@0:8@16@24
q24@0:8q16
@"<MRDPinPairingDialogDelegate>"
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"BSServiceConnection<BSServiceConnectionClient>"
@"MRDUIClientMessageForwarder"
v32@0:8@"NSStream"16Q24
v44@0:8@16@24I32@?36
@"MSVTimer"
@"MRAVRoutingDiscoverySessionConfiguration"
@"<MRDIDSCompanionRemoteControlServiceDelegate>"
@"NSRunLoop"
v40@0:8I16B20@24@32
v36@0:8I16@20@28
v40@0:8d16@?24@32
v44@0:8f16@20@28@?36
v48@0:8@16@24@32@?40
v80@0:8@16@24@32@40@48@56@64@?72
v32@0:8q16@24
v40@0:8^v16^v24@?32
v32@0:8I16I20@24
v28@0:8f16@20
v44@0:8I16@20@28@?36
@"MRExternalClientConnection"
@"MRExternalDeviceTransport"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16@0:8
@48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
v56@0:8@16@24@32@40@?48
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{MGNotificationTokenStruct=}
@"<MRDDeviceInfoDataSourceDelegate>"
@"CUPairingManager"
v24@0:8@"MRDNowPlayingDataSource"16
v32@0:8@"MRDDeviceInfoDataSource"16@"MRDeviceInfo"24
v20@0:8f16
@20@0:8i16
v20@0:8i16
@"MRDNowPlayingClient"
@"MRMutableApplicationActivity"
@"MRDNowPlayingDataSource"
@"MRDDeviceInfoDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDAVRouteExtendedInfo"
v28@0:8B16q20
v32@0:8@16:24
@"<MRDNowPlayingStateObserverDelegate>"
@"MRPlaybackQueue"
@"MRDOutputDeviceRoutingDataSource"
v24@0:8@"MRDPersonalDeviceController"16
v24@0:8@"MRDLockScreenContentController"16
B24@0:8^@16
@"MRDNowPlayingServerResult"
@"<MRDLockScreenControllerDelegate>"
@"<MRLockScreenUIControllable>"
@"MRDLockScreenAssertion"
@"MRDPersonalDeviceController"
@"MRDLockScreenContentController"
@"SBSLockScreenContentAssertion"
@"<MRDConnectionLifetimeControllerDataSource>"
@"<MRDConnectionLifetimeControllerDelegate>"
v24@0:8@"MRExpanseManager"16
@"MROrigin"16@0:8
v24@0:8@"MROrigin"16
v36@0:8f16@20@?28
v72@0:8@16@24@32@40@48@56@?64
v28@0:8I16I20B24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v28@0:8I16@"NSDictionary"20
v24@0:8@"NSError"16
v32@0:8@"NSString"16@?<v@?f@"NSError">24
v36@0:8f16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?I@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v72@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSArray"48@"NSArray"56@?<v@?@"NSError">64
v32@0:8@"NSArray"16@?<v@?@"NSString"@"NSError">24
v32@0:8d16@?<v@?@"NSError">24
v28@0:8I16@"MRAVRoutingDiscoverySessionConfiguration"20
@"NSArray"16@0:8
v24@0:8@"NSArray"16
v36@0:8f16@20@28
@"MRExternalDevice"
@"MRExternalOutputContextDataSource"
@"MRAVRoutingDiscoverySession"
@"MRDConnectionLifetimeController"
v40@0:8@16d24@?32
v32@0:8@"MRCryptoPairingSession"16@"NSData"24
v32@0:8@"MRCryptoPairingSession"16@"NSString"24
v24@0:8@"MRCryptoPairingSession"16
v40@0:8@"MRCryptoPairingSession"16d24@?<v@?@"NSString">32
v32@0:8@"MRCryptoPairingSession"16@"NSError"24
v32@0:8@"MRDRemoteControlService"16@"MRDExternalDeviceServerClientConnection"24
v40@0:8@16Q24@32
v40@0:8@"MRDExternalDeviceServerClientConnection"16Q24@"_MRGameControllerPropertiesProtobuf"32
v32@0:8@"MRDNowPlayingStateObserver"16@"MRPlayerPath"24
v36@0:8@"MRDNowPlayingStateObserver"16I24@"MRPlayerPath"28
v40@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"MRPlayerPath"32
v40@0:8@"MRDNowPlayingStateObserver"16@"MRDNowPlayingObserverState"24@"MRPlayerPath"32
v36@0:8@16@24B32
v32@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24
v36@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24B32
v32@0:8@"MRDSleepObserver"16@?<v@?>24
v24@0:8@"MRDSleepObserver"16
v48@0:8@"MRDTextEditingService"16@"NSString"24@"MRTextEditingAttributes"32@"RTIDataPayload"40
v40@0:8@"MRDTextEditingService"16@"NSString"24@"RTIDataPayload"32
v40@0:8@"MRDTextEditingService"16@"MRTextEditingAttributes"24@"RTIDataPayload"32
v24@0:8@"MRDTextEditingService"16
v32@0:8@"MRDTextEditingService"16@"NSString"24
B32@0:8@16^@24
v32@0:8q16@?24
v40@0:8@16q24@?32
B32@0:8q16@24
v40@0:8Q16@24@32
v24@0:8B16B20
v36@0:8{_MRHIDButtonEvent=IIB}16@28
v64@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16Q48@56
B40@0:8@16@24@32
B48@0:8@16@24@32@40
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"MROutputContextController"
@"MRDRemoteControlService"
@"Protocol"
v24@0:8@"MRDHostedExternalDeviceManager"16
@32@0:8@16^B24
@40@0:8@16@24Q32
@"MRDHostedExternalDeviceManager"
@"MRDRemoteControlDiscoverySession"
v28@0:8@"MRDLockScreenController"16B24
v32@0:8@"MRDLockScreenController"16@"MRPlayerPath"24
v56@0:8@16@24q32q40@48
v56@0:8@"MRDElectedPlayerController"16@"MRPlayerPath"24q32q40@"NSString"48
v40@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24@"MRDNowPlayingPlayerClient"32
v32@0:8@"MRDNowPlayingClient"16@"MRClient"24
v32@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24
v28@0:8@"MRDNowPlayingClient"16B24
v28@0:8@16f24
v40@0:8@"MRDNowPlayingOriginClient"16@"MRDeviceInfo"24@"MRDeviceInfo"32
v36@0:8@"MRDNowPlayingOriginClient"16@"MRPlayerPath"24I32
v32@0:8@"MRDNowPlayingOriginClient"16@"MRApplicationActivity"24
v32@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24
v28@0:8@"MRDNowPlayingOriginClient"16I24
v28@0:8@"MRDNowPlayingOriginClient"16f24
v28@0:8@"MRDNowPlayingOriginClient"16B24
v32@0:8@"MRDNowPlayingOriginClient"16@"NSArray"24
v24@0:8@"MRDNowPlayingOriginClient"16
v32@0:8@"MRDNowPlayingPlayerClient"16@"MRPlayer"24
v28@0:8@"MRDNowPlayingPlayerClient"16B24
v28@0:8@"MRDNowPlayingPlayerClient"16I24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSData"24
v36@0:8@"MRDNowPlayingPlayerClient"16@"MRPlaybackQueue"24B32
v32@0:8@"MRDNowPlayingPlayerClient"16Q24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSArray"24
v36@0:8@16I24@?28
v36@0:8@16f24@?28
v36@0:8@16B24@?28
v40@0:8@16B24B28@?32
v44@0:8B16d20@28@?36
v36@0:8B16@20@?28
v36@0:8I16@20@?28
v44@0:8@16B24@28@?36
v40@0:8Q16@24@?32
v40@0:8I16B20@24@?32
v56@0:8@16q24q32@40@?48
v28@0:8B16@?20
@"MRDNowPlayingPlaybackQueueServer"
@"MRDElectedPlayerController"
@"MRDLockScreenController"
@"MRDProximityController"
@"MRDNowPlayingOriginClient"
@"MRDNowPlayingPlayerClient"
@"<MRDNowPlayingClientDelegate>"
@"BKSApplicationStateMonitor"
v24@0:8@"MRDMediaRemoteClient"16
v36@0:8@"MRDVirtualAudioInputServer"16I24@"MRDVirtualAudioInputServerDevice"28
v32@0:8@"MRDPhoneCallController"16@"MRDRemoteControlCommand"24
@"NSObject<OS_xpc_object>"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDUIServer"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"NSObject<OS_dispatch_source>"
@"FBSDisplayLayoutMonitor"
@44@0:8q16i24@28@36
v48@0:8@16@?24@32@?40
v32@0:8@16q24
q32@0:8@16q24
@40@0:8@16q24^@32
@"<MRDElectedPlayerControllerDelegate>"
v24@0:8@"AVOutputContext"16
v40@0:8@"AVOutputContext"16@"NSData"24@"AVOutputContextCommunicationChannel"32
v32@0:8@"AVOutputContext"16@"AVOutputContextCommunicationChannel"24
v32@0:8@"NSData"16@"APReceiverMediaRemoteCommunicationChannel"24
v24@0:8@"APReceiverMediaRemoteCommunicationChannel"16
v40@0:8@16Q24@?32
v32@0:8Q16@24
@"AVOutputContext"
@"NSMapTable"
@"<MRDAirPlayRemoteControlServiceDelegate>"
v44@0:8@16@24@32B40
v44@0:8@16@24@32I40
v48@0:8@16@24@32I40B44
@"MRApplicationActivity"
@"MROutputContextDataSource"
@"_MRAVAirPlaySecuritySettingsProtobuf"
v32@0:8@"MRDAirPlayRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDBonjourRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDRapportRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDExternalDeviceServerClientConnection"32@0:8@"MRDIDSCompanionRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDExternalDeviceServerClientConnection"32@0:8@"MRDIDSRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDAirPlayRemoteControlService"
@"<MRDRemoteControlServiceDelegate>"
@"MRDBonjourRemoteControlService"
@"MRDRapportRemoteControlService"
@"MRDIDSCompanionRemoteControlService"
@"MRDIDSRemoteControlService"
@"NSXPCListenerEndpoint"
@"MRDUISessionServer"
@"MRDServerMessageProxy"
v32@0:8@"CXCallObserver"16@"CXCall"24
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
d24@0:8@16
@32@0:8@16d24
v64@0:8Q16@24d32@40@?48@?56
v56@0:8@16d24@32@?40@?48
@32@0:8@16^@24
@"MRDOriginForwarder"
@"MRAVOutputContext"
@"<MRXPCConnectionMonitorDelegate>"
v40@0:8@16@24q32
v40@0:8@"MRDAVSystemEndpointController"16@"MRUpdateActiveSystemEndpointRequest"24q32
v32@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24
B40@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24@"NSString"32
@64@0:8@16@24@32@40@48@56
v48@0:8@16q24@32@?40
v28@0:8@16i24
@32@0:8@16q24
v28@0:8i16@20
v36@0:8@16B24@28
@"MRDAutoConnectionController"
@"MRDExternalDeviceHomeServer"
@"NSOperationQueue"
@"MRDAVLocalDeviceCommitManager"
@"MRDIdleTopologySimplifier"
@"MRDAVHostedRoutingService"
@"MRDAVSystemEndpointController"
^{IONotificationPort=}16@0:8
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDHostedExternalDeviceManagerDelegate>"
@"<MRDVirtualAudioInputServerDelegate>"
@"MRDPlaybackQueueArtworkCache"
@32@0:8d16d24
v48@0:8@16@24@32^v40
v24@0:8@"SBSRemoteAlertHandle"16
v32@0:8@"SBSRemoteAlertHandle"16@"NSError"24
@36@0:8@16I24@28
@"SBSRemoteAlertHandle"
B24@0:8Q16
B40@0:8q16@24d32
v32@0:8B16B20@24
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRXPCConnection"
@"MRDMediaRemoteUIService"
@"MRDPairingHandler"
B48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
^{__IOHIDUserDevice=}16@0:8
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
B64@0:8@16@24@32@40@48q56
B72@0:8@16@24@32@40@48q56@?64
v48@0:8@?16@24@32@40
@48@0:8@16q24@?32@?40
@"<MRUIClientProtocol>"
@"<MRUIClientXPCProtocol>"
@"<MRDLockScreenContentControllerDelegate>"
@"MRMediaSuggestionPreferences"
@52@0:8I16@20@28@36@44
@24@0:8^{__CFString=}16
@32@0:8^{_NSZone=}16#24
v32@0:8@16^{__CFString=}24
@"MRDUIControllerConnection"
@"AVOutputDevice"
[SystemEndpointController] Reevaluating %{public}@ActiveEndpoint because %{public}@
[SystemEndpointController] %{public}@
[SystemEndpointController] %@SystemEndpoint remains <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
[SystemEndpointController] Updating activeEndpointInfo %@
[SystemEndpointController] Requesting to move ASE to deviceUID: %{public}@ because the old ASE changed groups
[SystemEndpointController] ASE changed groups, but no other devices found in old group
Yielding AVRCP command to callservicesd
Caching resolved player path %{public}@ for context %{public}@.
No cache entry found.
Sending cachable command to player path %{public}@ for context %{public}@.
Got a cache creating command from assistant, context: %{public}@.
Performing early return of successful status for backwards compatibility.
Expiring player path for context %{public}@.
Got a cacheable command from assistant, context: %{public}@.
Adding command to assistant cache, context: %{public}@.
Redirecting to cached path: %{public}@
No assistant cache active, context: %{public}@.
Command <%{public}@> ignored because of device state
Broadcasting command <%{public}@> to client: <%@>
Broadcast command %{public}@ timedout after %lf seconds
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %{public}@: %{public}@
Destroying remoteUIService for client: %@
Error for fade out state. Status = %u.
Requesting fade in on next playback for client %{private}@
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
Command ignored because of device state: %{public}@
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Set AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute for command %{public}@
Command <%{public}@> ignored because of pre-processing error %{public}@.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ failed to reply to command (SendCommandErr = %@)
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Sending previously queued command %{public}@ to client %{public}@.
Removing queued commands for %{public}@ %{public}@
Removing queued commands because %{public}@ %@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because of active SharePlay activity.
Ignoring command because a phone call or FaceTime is active.
Purging command: %{public}@
[MRDUISessionServer] %ld clients holding quick controls assertion.
[MRDUISessionServer] %ld clients holding lock screen controls assertion.
[MRDUISessionServer] %ld clients holding screen mirror controls assertion.
Request: %{public}@<%{public}@> for %{public}@
Request: %{public}@<%{public}@>
Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds
Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds
Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned in %.4lf seconds
Request: %{public}@<%{public}@> for %{public}@ because %{public}@
Request: %{public}@<%{public}@> because %{public}@
Update: %{public}@<%{public}@> %@
Set: %{public}@ setting %{public}@ from <%@> to <%@>
Set: %{public}@ setting %{public}@ to <%@>
[MRDNowPlayingPlayerClient] Taking hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] Removing hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] isPictureInPictureEnabled changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] PlaybackState changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] isPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] CanBeNowPlayingPlayer changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionType changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] MXSessionIDs changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionID changed from %u to %u for %{public}@
[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@
[MRDRemoteControlNetworkService] Starting network service: %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Stopping network service %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Did accept connection with service: %{public}@ using type: %{public}@ input: %{public}@ output: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement success with service: %{public}@ using type: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement failed with service: %{public}@ error: %{public}@
[MRDRemoteControlNetworkService] Retrying after 30s...
[MRDRemoteControlNetworkService] Updating txtData because deviceInfo changed...
[MRDRemoteControlNetworkService] Updating txtData because device restrictions changed...
[MRDRemoteControlNetworkService] Updating txtData: %{public}@
[MRDRemoteControlNetworkService] Stopping bonjour service %{public}@
[MRDRemoteControlNetworkService] Initializing bonjour service for type %{public}@
Configuring remote control network service with includesPeerToPeer = %s
[HostedExternalDeviceClient] Caching connectionState %@ %@ for %@
[HostedExternalDeviceClient] Caching deviceName %@ for %@
[HostedExternalDeviceClient] Caching customData %@ %@ for %@
[HostedExternalDeviceClient] Caching endpoint %@ for %@
[HostedExternalDeviceClient] Caching volumeCapabilities %@ outputDevice %@ for %@
[HostedExternalDeviceClient] Caching volume %lf outputDevice %@ for %@
[HostedExternalDeviceClient] Caching didAddOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didChangeOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didRemoveOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching discoverySessionOutputDevicesChanged %@ configuration %@ for %@
[HostedExternalDeviceClient] Restoring state %@ for %@
[MRDIDSService] %@ Message Sent<%lu>: idsDestination=%@ device=%@:%@ data=%@ type=%@ destination=%@ session=%@
[MRDIDSService] %@ Error %@ sending message
[MRDIDSService] %@ Message received<%@>: data=%@ device=%@:%@ type=%@ destination=%@ session=%@ replyID=%@
[MRDOriginForwarder] %@ forwarding command
[MRDOriginForwarder] %@ forwarding playbackQueueRequest
[MRDOriginForwarder] %@ forwarding playbackSessionRequest
[MRDOriginForwarder] %@ forwarding playbackSessionMigrationRequest
[MRDOriginForwarder] %@ Initializing OriginForwarder
[MRDOriginForwarder] %@ End Initializing OriginForwarder
[MRDOriginForwarder] %@ forwarding %@
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from system screen and system music contexts: %{public}@ %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[MRDRapportRemoteControlServiceConnection] Connecting remoteControlChannel to <%@->%@/%@>...
[MRDRapportRemoteControlServiceConnection] Disconnecting remoteControlChannel from <%@->%@/%@>...
[ProximityController] lockscreen: %@, controlcenter: %@
[ProximityController] Removing all nearby devices because screen off.
[MRDAVOutputContextManager] Returning active outputContext %@ with devices: %@ for: %@
[MRDAVOutputContextManager] Returning reserved outputContext %@ for: %@
[MRDAVOutputContextManager] Reusing inactive outputContext %@ for: %@ (%@)
[MRDAVOutputContextManager] Created new outputContext %@ for: %@
[MRDAVOutputContextManager] Failed to create new outputContext for: %@
[MRDAVOutputContextManager] Re-building output context state in response to mediaserverd death
[MRDAVOutputContextManager] Attempted to process output context with nil contextID: %{public}@
[MRDAVOutputContextManager] OutputContext became active %@ with: %@
[MRDAVOutputContextManager] OutputContext became active %@ with local: %@
[MRDAVOutputContextManager] OutputContext became inactive %@
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
[LocalDeviceCommitManager] Skipping delayed initial commit because an AirPlay session is active
[LocalDeviceCommitManager] Starting nowplaying session for client: %@
[LocalDeviceCommitManager] Delaying start completion because a stop operation is in progress
[LocalDeviceCommitManager] Stopping nowplaying session for client: %@
[LocalDeviceCommitManager] Topology change involving local device began with identifier: %@
[LocalDeviceCommitManager] Topology change involving local device finished with identifier: %@
[LocalDeviceCommitManager] <%@> Skipping commit of local device because device requires command redirection
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a nowplaying session is active
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a topology change is in progress
[LocalDeviceCommitManager] <%@> Enqueueing completion because there is an ongoing commit request
[LocalDeviceCommitManager] Timed out waiting to commit local device with reason: %@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[RemoteControlDiscoverySession] Applied %@ sourced values from outputDevice %@:%@
[RemoteControlDiscoverySession] Added Fields: %{public}@
[RemoteControlDiscoverySession] Removed Fields: %{public}@
[RemoteControlDiscoverySession] Updated Values: %{public}@
[HostedDiscoverySession] Caching outputDevices %@ for %@
[HostedDiscoverySession] Caching endpoints %@ for %@
[HostedDiscoverySession] Restoring outputDevices %@ for %@
[HostedDiscoverySession] Restoring endpoints %@ for %@
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
Failed to make endpoint due to no qualified group leader in devices: %{public}@
%{public}@ - Endpoints changed
%{public}@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDIDSRemoteControlService] Removing DiscoveryChannel for client %@ with error %@
[MRDIDSRemoteControlService] Created new DiscoveryChannel %@ for device=%@
[MRDIDSRemoteControlService] Created new RemoteControlChannel %@ for device=%@ destination=%@ session=%@ with options=%u
[MRDPersonalDeviceController] Restoring personal device state for devices %@. Remaining time %f.
[MRDPersonalDeviceController] Recalculating state for reason: %@
[MRDPersonalDeviceController] New personal device %@ recently attached.
[MRDPersonalDeviceController] Timeout reached. Personal devices %@ are now stale.
Attempted to enqueue disallowed background task %@
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %ld
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ %@ sending client %@ subscribed packets %@
[MRTransactionServer] %@ received ack
[MRTransactionServer] %@ sending client %@ subscribed packets %@
Cluster requires primary but none was found. Members: %{public}@
[MRUIControllerConnection] <%p> Initializing.
[MRUIControllerConnection] <%p> Dealloc.
[MRUIControllerConnection] <%p> Creating service connection.
[MRUIControllerConnection] <%p> BSServiceConnection invalidate.
[MRUIControllerConnection] <%p> BSServiceConnection interrupt. Re-activating.
[MRUIControllerConnection] <%p> BSServiceConnection activated.
[MRUIControllerConnection] <%p> No endpoint found. Please check that MediaRemoteUI is installed and registered with launchd.
[IDSCompanionRemoteControlService] Connecting discoveryChannel to <%@> for reason <%@>...
[IDSCompanionRemoteControlService] No device avaiable to connect discoveryChannel to <%@> for reason <%@>
[IDSCompanionRemoteControlService] Connecting remoteControlChannel to <%@-%@>...
[IDSCompanionRemoteControlService] Disconnecting remoteControlChannel from %@-%@...
WHAPRO: ConnectionState for device %{public}@ change from %{public}@ to %@ in %{public}f seconds
<%{public}@> Exiting connection attempt due to disconnection request for device %@{public}. %{public}@
<%{public}@> Failed to initialize IO streams for device: %{public}@. %{public}@
<%{public}@> Error loading device info for device %{public}@. %{public}@
<%{public}@> Failed to register custom origin for device %{public}@. %{public}@
<%{public}@> Failed to re-register custom origin for device %{public}@. %{public}@
<%{public}@> Failed to sync client state for device %{public}@. %{public}@
<%{public}@> Exiting connection attempt due to disconnection request for %@{public}. %{public}@
<%{public}@> Connection to: %@ (%{public}@) from client: %{public}@ isRetry: %{BOOL}u allowAuth: %{BOOL}u reason: %{public}@ result: %{public}@ in: %.2f
<%{public}@> Connection requested to device %{public}@...
<%{public}@> Connect called for device %{public}@ with authentication prompt option set when it wasn't set before. Forcing reconnect on failure...
<%{public}@> Attempting to connect for device %{public}@ that we are already %{public}@ to. Ignoring request...
<%{public}@> Connecting to device %{public}@...
Device disconnect called with error: %{public}@ for external device: %{public}@
Attempting to reconnect to external device %{public}@ (retry %llu out of %llu)
Not attempting reconnect of external device %{public}@ (error = %{public}@, recovery behavior = %{public}s, attempt count = %llu)
Connection error while sending custom data message. %{public}@
Connection error while sending ping message for device %{public}@. %{public}@
Error setting volume %@
Error getting volume %@
Error getting volume control capablities %@
Error setting listening mode %@
Error removing from parent group %@
Unknown message type=%ld identifier=%@ replyIdentifier=%@ attempting to be handled for device %{public}@
<%{public}@> InitializeConnection for device %{public}@ with options %{public}@
<%{public}@> InitializeConnection for device %{public}@ took %f seconds
<%{public}@> LoadDeviceInfo for device %{public}@...
<%{public}@> LoadDeviceInfo for device %{public}@ took %f seconds
<%{public}@> RegisterCustomOrigin %u %{public}@ for device %{public}@...
<%{public}@> RegisterCustomOrigin for device %{public}@ took %f seconds
<%{public}@> ReRegisterCustomOrigin %ld %{public}@ for device %{public}@...
<%{public}@> ReRegisterCustomOrigin for device %{public}@ took %f seconds
<%{public}@> SyncClientState for device %{public}@...
<%{public}@> WHAPRO: SyncClientState for device %{public}@ took %f seconds
Connection error while sending begin lyrics event message. %{public}@
<%{public}@> Calling pairingCallback
Calling Client Registered Pairing Callback
Calling Client Registered Name Callback with %@
Calling Client Registered pairing allowed Callback with %@
Calling Client Registered custom data Callback
<%{public}@> Volume did change to %lf for outputDevice: <%{public}@>
Received command %{public}@ for path %{public}@ for device %{public}@
unable to get an output device identifier, device will not be added to protobuf's grouped devices: %{public}@
Warning: Unknown device network ID
Failed to archive device info
Failed to write device info file
Failed to unarchive device info data
[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:
[MRDNowPlayingOriginClient] Application Activity %{public}@ already set
[MRDNowPlayingOriginClient] Removing nowPlayingClient %{public}@ for %{public}@
[MRDNowPlayingOriginClient] _reevaluateStateWithReason %@
[MRDNowPlayingOriginClient] ActiveNowPlayingClient changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Taking activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] Removing activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] ActiveNowPlayingPlayersClients changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Creating nowPlayingClient for %{public}@
[MRDNowPlayingStateObserver] Registering for Now Playing Updates
[MRDNowPlayingStateObserver] Unregistering for Now Playing Updates
[MRDNowPlayingStateObserver] Registering for volume control updates
[MRDNowPlayingStateObserver] Unregistering for volume control updates
[MRDNowPlayingStateObserver] Begin Coalescing for %@ for %lf seconds
[MRDNowPlayingStateObserver] End Coalescing %@ for %@
[MRDNowPlayingStateObserver] Removing item %@ item from contentItems because playbackQueue contains item for %@
[MRDNowPlayingStateObserver] Updating playbackQueue %@for %@
[MRDNowPlayingStateObserver] Setting playbackQueue %@ for %@
[MRDNowPlayingStateObserver] Merging item %@ into playbackQueue for %@
[MRDNowPlayingStateObserver] Merging item %@ into contentItems for %@
[MRDNowPlayingStateObserver] Adding contentItems %@ for %@
[MRDNowPlayingStateObserver] Setting contentItems %@ for %@
[MRDNowPlayingStateObserver] Adding items %@ into contentItemArtworkUpdates for %@
[MRDNowPlayingStateObserver] Setting items %@ into contentItemArtworkUpdates for %@
[MRDNowPlayingStateObserver] Updating supportedCommands %@ for %@
[MRDNowPlayingStateObserver] Setting supportedCommands %@ for %@
[MRDNowPlayingStateObserver] Updating playerProperties %@ for %@
[MRDNowPlayingStateObserver] Setting playerProperties %@ for %@
[MRDNowPlayingStateObserver] Updating playbackState %@ for %@
[MRDNowPlayingStateObserver] Setting playbackState %@ for %@
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %li for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
[MRDLockScreenController] Setting playerPath from %{public}@ to %{public}@
[MRDLockScreenController] Deferring setting playerPath from %{public}@ to %{public}@ because changeType is <%{public}@> and lock screen is <%{public}@>
[MRDLockScreenController] Restoring defered playerPath from %{public}@ to electedPlayerPath %{public}@
[MRDLockScreenController] Reevaluating shouldShowLockScreen for reason %@
[MRDLockScreenController] Delaying deactivation of lockScreen
[MRDLockScreenController] LockScreen now showing empty controls. Will be dismissed when lock screen is no longer visible
[MRDLockScreenController] Activating lockScreenAssertion
[MRDLockScreenController] Deactivating lockScreenAssertion
[MRDLockScreenController] lockScreenAssertion error %{public}@
[MRDCLC] <%p> Initializing for origin-%@-%ld.
[MRDCLC] <%p> Deallocating.
[MRDCLC] <%p> Re-evaluate for origin-%@-%ld because %@.
[MRDCLC] <%p> Setting timer to disconnect origin-%@-%ld in %.2lf seconds.
[MRDCLC] <%p> Disconnecting origin-%@-%ld.
[MRDCLC] <%p> Will maintain connection for origin-%@-%ld because %@.
[MRDCLC] <%p> Pause pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Cancel pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Scheduling playback timer for %.2lf seconds.
[MRDCLC] <%p> Cancelling playback timer.
[MRDAVHostedExternalDevice] %{public}@ is tombstoned, rejecting new XPC connection %{public}@
[MRDAVHostedExternalDevice] %{public}@ is accepting new XPC connection %{public}@ %@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following registered callbacks on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following notifications on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is subscribing to the following player paths on %{public}@: %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Client %{public}@ is requesting to connect to external device using hosted endpoint %{public}@ with options %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Already connected to external device
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to disconnect from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to unpair from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to set output device volume to %f using output device %{public}@ on hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to modify hosted endpoint %{public}@ (adding=%{public}@, removing=%{public}@,  setting=%{public}@,)
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to create hosted endpoint %{public}@ with output devices: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to send %llu bytes of custom data with name %{public}@ using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] [Client %{public}@ is requesting to ping external device with timeout %f using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV join.
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV leave.
[MRDAVHostedExternalDevice] %{public}@ Checking for match of endpoint: %{public}@ and active TV: %{public}@
[MRDAVHostedExternalDevice] %{public}@ maintaing no localRoute for %{public}@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ removing localRoute for %@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ adding localRoute for %@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ connection state did change to %{public}@ with error %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ device name did change to %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did receive %llu bytes of custom data with name %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volumeCapabilities did change to %{public}@ for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volume did change to %f for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did add output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did change output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did remove output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ client did disconnect: %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint <%{public}@> reevaluating volume control because %{public}@ changed from <%{public}@> to <%{public}@>
[ExternalDeviceServer] Removing television endpoint for client %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] didReceiveApplicationClientStateDidChange %@
[ExternalDeviceServer] didReceiveClientDidUnregister %@
[ExternalDeviceServer] didReceivePlayerDidUnregister %@
[ExternalDeviceServer] didReceiveNowPlayingClientChange %@
[ExternalDeviceServer] didReceiveNowPlayingPlayerChange %@
[ExternalDeviceServer] didReceiveVolumeControlCapabilitiesChange %@
[ExternalDeviceServer] didReceiveDefaultSupportedCommandsChange %@
[ExternalDeviceServer] didReceiveCoalescedNowPlayingStateChange %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
Error removing output device from context - device or uid is nil - Output Device: (%@ - %{public}@ - isLocal: %{BOOL}u) Localized Output Device: (%@ - %{public}@)
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@ with error %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
Checking if device with managedConfigDeviceID, %{public}@, allowed to connect
No managedConfig allow list found. Allowing all devices
Device with managedConfigDeviceID, %{public}@, allowed: %d
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Failed to register new virtual touch device
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Error setting devices on output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
[ExternalDeviceServer] Completed recon session: %{public}@
[ExternalDeviceServer] Reseting Facade
[ExternalDeviceServer] Facading NowPlayingClient from %@ to %@
Failed to create external device transport for %{public}@, group leader: %{public}@
- Selecting devices (non-default selection options) from: %{public}@
- Selection options: %{public}@
- Updating preferred group leader %{public}@ based on better criteria: %{public}@
- Updating preferred group leader because found a remote host: %{public}@
- Updating preferred group leader because locally hosting the group
-- Final preferred group leader: %{public}@ based on criteria: %{public}@
Skipping invalid output device: %{public}@
[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@ for: %{public}@
Ignoring uncommitted output device: %@ (%@)
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
PID Mismatch: Client %{public}@ is trying to make a nowPlayingClient with a different pid %d
PID Mismatch: Client %{public}@ is trying to making a nowPlayingClient with a different bundleID %{public}@
Resolving %{public}@ -> %{public}@ for client %@
Resolving Existing %{public}@ -> %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Re-registering origin %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Unable to set can be now playing app. No now playing client found for %@
Unable to set can be now playing player. No player client found for %@
Setting hardware remote behavior to %{public}@ for client %{public}@
Unable to set playback state. No now playing client found for %@
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app without entitlement. Ignoring.
ERROR: now playing client could not be found for setting supported commands
Unable to set properties from message %@. No player client found.
Unable to set properties from message %@. No origin client found for %@
%{public}@ Unable to get audio format content info for origin: %{public}@ | client %{public}@
Posting contentItemChange for path %{public}@ to xpcClient %{public}@ %{public}@
Posting %@
Posting %@ because activePlayerPath changed from <%{public}@> to <%{public}@>
Posting %@ with <%@>
Registering origin %@
Unregistering origin %{public}@
Removing active origin %{public}@. Setting active origin to the local one.
Setting active origin from %@ to %@
Persisting active origin %@
Failed to initialize temporary directory
[MRDNowPlayingClient] Setting pid for %{public}@ to %d
[MRDNowPlayingClient] Timeout trying to pid for %{public}@
[MRDNowPlayingClient] CanBeNowPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingClient] Creating playerClient for %{public}@
[MRDNowPlayingClient] ActiveNowPlayingPlayer changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] ParentAppBundleIdentifier changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] BundleIdentifierHierarchy changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] Visibility changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] TintColor changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] AppIcon changed from %{public}@ to %{public}@ for %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %{public}@
Removing client %{public}@
Posting Notification %{public}@
UserInfo %{public}@
Posting Custom Notification %{public}@ to %{public}@
Custom UserInfo %{public}@
CompanionLinkClient invalidation
CompanionLinkClient interrupted
Error activating CompanionLinkClient %{public}@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Client: %{public}@ Set system volume: setting volume to %f
Client: %{public}@ Adjust system volume: stepping volume by %f
No app bundle ID provided in call to GetMediaAppIsInstalled message
Unable to wake system app [failed to launch] %{public}@
Unable to wake system app [failed to find client]
Unable to bless app [sync task assertion acquisition failed]
Unable to bless app [task assertion failed]
Unable to bless app [bless failed]
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Pairing Handler register failed with routeUID: %@
Pairing Handler unregister failed with routeUID: %@
Pairing Handler complete failed with routeUID: %@
Client %{public}@ invalidated.
Pidversion out of date for %d
No process for pid %d
Unable to get boot session ID, not restoring clients
Restoring client pids %{public}@
Restoring expected client pids %{public}@
Resetting client and expected pids
SIGTERM received, preparing to shut down
[MRDAutoConnectionController] Begin DiscoverySession %@ because %@
[MRDAutoConnectionController] End DiscoverySession %@
[MRDAutoConnectionController] Removing outdated endpoint <%@> (<%@>)
[MRDAutoConnectionController] Removing endpoint <%@> (<%@>)
[MRDElectedPlayerController] Failed to connect to proactive endpoint %@ with error %@. Reset to local.
[MRDElectedPlayerController] Ignoring activeSystemEndpointDidChange for %@ because a new change for %@ was received
[MRDElectedPlayerController] Reevaluating electedPlayer event = %{public}@, reason =  %{public}@
[MRDElectedPlayerController] ElectedPlayer changed from <%@> to <%@> changeType=<%{public}@>, event=%{public}@, eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] ElectedPlayer remained <%@> eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because previousPlayerPath %{public}@ does not exist anymore
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because changeType uninitialized and playerPath %{public}@ is nil and previousPlayerPath %{public}@ is still valid
[AirPlayRemoteControlService] Starting AirPlay remote control service
[AirPlayRemoteControlService] Stopping AirPlay remote control service
[MRDRemoteControlService] observed new activePairedDevice <%@>, creating IDSRemoteControlService...
[MRDRemoteControlService] Found activePairedDevice <%@>, creating IDSRemoteControlService...
[MRDUIClient] <%p> Dealloc.
[MRDUIServer] Rejecting connection from unknown client.
[MRDUIServer] Rejecting connection from non-entitled client %@.
[MRDUIServer] Accepting connection from client %@
[MRDUIServer] Adding client %@
[MRDUIServer] Removing client %@
[MRDITS] <%p> Initializing
[MRDITS] <%p> Deallocating.
[MRDITS] <%p> Last playing date for %@ is distantPast, setting new timer
[MRDITS] <%p> Scheduling idle playback timer for %.2lf seconds - %@
[MRDITS] <%p> Cancelling idle playback timer of playerPath %@
[MRDITS] <%p> Playback state changed to playing for %@, not simplifying topology
[MRDITS] <%p> Could not find endpoint for playerPath <%@> - error: %@
[MRDITS] <%p> Letting endpoint be hosted by a smart device - %@
[MRDITS] <%p> Could not remove devices <%@> from existing endpoint (%@) - error: %@
[MRDITS] <%p> Removed devices from existing endpoint %@: <%@>
[MRDITS] <%p> Not trying to recreate WHA group; Endpoint (%@) only had one smart device (%@)
[MRDITS] <%p> Topology not simplified, error: %@
[MRDITS] <%p> Topology simplified, new endpoint: %@
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
Received %@ signal in order to start prewarming...
Waiting for Buddy in order start prewarming
%{public}@ Topology change failed with error: %{public}@
%{public}@ Connect was called but group leader wasn't committed or output context wasn't prepared
%{public}@ disconnecting with error %{public}@
%{public}@ Added localDevice %{public}@ to outputContext %{public}@
%{public}@ Removed groupLeader %{public}@ from outputContext %{public}@
%{public}@ Removed localDevice %{public}@ from outputContext. Clearing all localOrigin nowPlayingData
%{public}@ Removed localDevice %{public}@ from outputContext %{public}@
%{public}@ Local device changed clusterType to: %u
%{public}@ Found endpoint containing local in discovery that matches cluster type: %{public}@
%{public}@ Timed out waiting for local device to appear with expected clusterType in discovery
%{public}@ GroupLeader %{public}@ failed verification for reason: %{public}@ on context %{public}@
%{public}@ Verification failed because groupLeader was found in another outputContext: %{public}@
%{public}@ Calling %lu completions - Original reason: %{public}@
%{public}@ Ignoring request to commit in an invalid state (no designatedGroupLeader) reason: %{public}@
%{public}@ Already committing output device: %{public}@ to: %{public}@. New reason: %{public}@
%{public}@ Committing output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Failed to commit output device: %{public}@ to: %{public}@ because %{public}@ - %{public}@
%{public}@ Skipping commit of output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Begin Forwarding Origin Data from %{public}@ to %{public}@ for outputContext %{public}@
%{public}@ Destroying playerPaths for origin: %{public}@, client: %{public}@
[ConnectionMonitor] Checked-in connection %@ in %lf seconds
[ConnectionMonitor] Checking connection %@
[ConnectionMonitor] Updated connectionStatus = %@ for %@ after %lf seconds
[ConnectionMonitor] Resumed connection %@ in %lf seconds
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@ (status = %{public}@)
[AVRoutingServer] Authorization request using saved password for %{public}@: %@
[AVRoutingServer] Authorization token failed for %{public}@ : %@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to clear all AirPlay route passwords...
[AVRoutingServer] Error %ld trying to delete passwords
[AVRoutingServer] No passwords to delete
[AVRoutingServer] Error %ld trying to query passwords
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Could not find endpoints for migration between %{private}@ and %{private}@.
[AVRoutingServer] Failed to remove output device UIDs: %{public}@ from parent group with error: %{public}@
[AVRoutingServer] No group leader, nothing to remove for: %{public}@
[AVRoutingServer] Failed to find external device for outputDeviceUID: %{public}@
[AVRoutingServer] Available external devices: %{public}@
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Handling authorization request with custom callback for route %{public}@
[AVRoutingServer] Custom authorization callback returned for route %{public}@
[AVRoutingServer] Prompting user with authorization request route %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting transaction: %{public}@
[AVRoutingServer] Discovery ended. Clearing transaction %{public}@
[AVRoutingServer] Suppressing cluster connection error. %.2f since last alert
[AVRoutingServer] Error connecting to cluster member: %{public}@
[AVRoutingServer] Timed out waiting for action on cluster connection error for route: %{public}@
[AVRoutingServer] Failed to open TVSettings: %{public}@
[AVRoutingServer] AirPlay Error %ld: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %ld: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
[AVRoutingServer] Error getting AirPlay security settings dictionary (OSStatus = %d)
Resolving endpoint for output device UIDs %{public}@
Returning endpoint with only a subset of specified output devices:
    - %{public}@
    + %{public}@
Resolved to endpoint: %{public}@
Setting output devices on endpoint: %{public}@
Error adding devices to endpoint:%{public}@ error:%{public}@
Could not make endpoint for output devices: %{public}@
Predicting endpoint for output device UIDs %{public}@
[iOSSim Data Source] Failed to load playback queue: %{public}@
POWER: Did recieve power callback %{public}@-%{public}@
POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds
[MRDHostedExternalDeviceManager] Created new hostedExternalDevice=%{public}@, endpoint=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, endpointIdentifier=%{public}@ reason=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, outputDeviceIdentifier=%{public}@ reason=%{public}@
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MRDVolumeController] Setting AVSC volume to %f
[MRDVolumeController] Setting AVSC isMuted to %@
[MRDVolumeController] Error setting AVSC isMuted: %@
[MRDVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
[MRDVolumeController] Reloading volume for reason: %@
Attempting to activate remote alert handle.
Creating remote alert handle for remote view controller: %{public}@
Remote alert handle did activate.
Remote alert handle did deactivate.
Remote alert handle did invalidate with error: %@
Client switched route discovery mode to: %lu
Client switched output device discovery mode to: %lu
Unable to bless client [sync task assertion acquisition failed] %{public}@
Failed to create assertion: %{public}@
Unable to bless client [bless failed] %{public}@
Unable to relay message with id %lu
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@> for <%@>
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@>
[MRDMediaRemoteClient] Restoring connection with notification userInfo %@
Unable to create IOHIDUserDevice
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
[MRDDisplayMonitor] Layout Changed %@
[MRDIDSServiceConnection] %@ Setting IDSDevice from %@ to %@
[MRDIDSServiceConnection] %@ Added handler for %@ %@
[MRDIDSServiceConnection] Added destination handler for type=%@, destination=%@, session=%@, %@
[MRDIDSServiceConnection] Remove handler for type=%@, %@
[MRDIDSServiceConnection] Remove destination handler for type=%@, destination=%@, session=%@, %@
[MRDIDSServiceConnection] %@ Message received<%@>: data=%@ type=%@ destination=%@ session=%@ replyID=%@
[MRDLockScreenContentController] failed to retrieve suggestions with error %@
Error blessing %@ for playback initialization. %@
[MRUIController][D] <%p> Initializing direct controller.
[MRUIController][D] <%p> Dealloc.
[MRUIController][D] <%p> Initializing XPC controller.
[MRUIController][D] <%p> Deallocated while still holding lock screen assertion.
[MRUIController][D] <%p> Deallocated while still holding quick controls assertion.
[MRUIController][D] <%p> Deallocated while still holding screen mirroring assertion.
[MRUIController][D] <%p> XPC interrupted.
[MRUIController][D] <%p> XPC invalidated.
[MRUIController][D] <%p> Server proxy error %@.
identifier
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>mediaremoted</string>
<key>CFBundleIdentifier</key>
<string>com.apple.mediaremoted</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>20A5328c</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.0</string>
<key>DTSDKBuild</key>
<string>20A5328c</string>
<key>DTSDKName</key>
<string>iphonesimulator16.0.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A5229d</string>
<key>MinimumOSVersion</key>
<string>16.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mediaremoted</string>
<key>com.apple.BluetoothServices</key>
<true/>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.appletv.pbs.volume-control</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.bluetooth.system</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.device-information.user-assigned-device-name</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.mediaremote.nearby-device</key>
<string>YES</string>
<key>com.apple.mediaremote.send-commands</key>
<true/>
<key>com.apple.mediaremote.set-now-playing-app</key>
<true/>
<key>com.apple.mediaremote.set-playback-state</key>
<true/>
<key>com.apple.mediaremote.ui-control</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.nano.nanoregistry.generalaccess</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>WifiAddress</string>
<string>WifiAddressData</string>
<string>EthernetMacAddress</string>
</array>
<key>com.apple.private.associated-domains</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.avconference.avctester</string>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.avconference.avctester</string>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.ids.session</key>
<array>
<string>com.apple.private.alloy.avconference.avctester</string>
</array>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.sessionkit.custom-platter-target</key>
<true/>
<key>com.apple.private.sessionkit.permitMultipleProcessInputs</key>
<true/>
<key>com.apple.private.sessionkit.sessionRequest</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
<key>com.apple.proximitycontrol</key>
<true/>
<key>com.apple.proximitycontrol.lockscreenControls</key>
<true/>
<key>com.apple.rootless.storage.coreduet_knowledge_store</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/private/var/containers/Bundle/</string>
<string>/Applications/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array>
<string>/private/var/tmp/com.apple.mediaremoted/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/MediaRemote/</string>
<string>/Library/UserConfigurationProfiles/EffectiveUserSettings.plist</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.sessionservices</string>
<string>com.apple.mediaremoteui.services</string>
<string>com.apple.powerlog.plxpclogger.xpc</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callcapabilities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.conversationmanager</string>
<string>com.apple.ProximityControl.server</string>
<string>com.apple.airplay.apsynccontroller.xpc</string>
<string>com.apple.airplay.receiver.mediaremote.services</string>
<string>com.apple.audio.AudioSession</string>
<string>com.apple.BluetoothServices</string>
<string>com.apple.callkit.callcontrollerhost</string>
<string>com.apple.commcenter.coretelephony.xpc</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.coremedia.admin</string>
<string>com.apple.coremedia.endpoint.xpc</string>
<string>com.apple.coremedia.endpointuiagent.xpc</string>
<string>com.apple.coremedia.routediscoverer.xpc</string>
<string>com.apple.coremedia.routingcontext.xpc</string>
<string>com.apple.coremedia.systemcontroller.xpc</string>
<string>com.apple.coremedia.volumecontroller.xpc</string>
<string>com.apple.coremedia.endpointremotecontrolsession.xpc</string>
<string>com.apple.GameController.gamecontrollerd</string>
<string>com.apple.identityservicesd.embedded.auth</string>
<string>com.apple.idsremoteurlconnectionagent.embedded.auth</string>
<string>com.apple.iohideventsystem</string>
<string>com.apple.iokit.powerdxpc</string>
<string>com.apple.mediaremoted.xpc</string>
<string>com.apple.PairingManager</string>
<string>com.apple.PineBoardServices</string>
<string>com.apple.PowerManagement.control</string>
<string>com.apple.SBUserNotification</string>
<string>com.apple.securityd</string>
<string>com.apple.server.bluetooth.le.att.xpc</string>
<string>com.apple.SharedWebCredentials</string>
<string>com.apple.SharingServices</string>
<string>com.apple.springboard.backgroundappservices</string>
<string>com.apple.springboard.services</string>
<string>com.apple.SystemConfiguration.configd</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.CoreDuet</string>
<string>com.apple.lockscreen.shared</string>
<string>com.apple.duetexpertd</string>
<string>com.apple.spotlightui</string>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mediaremote</string>
<string>com.apple.mediaremoted</string>
<string>com.apple.airplay</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.avfoundation</string>
<string>com.apple.coreaudio</string>
<string>com.apple.coremedia</string>
<string>com.apple.avfaudio</string>
<string>com.apple.ids</string>
<string>com.apple.conference</string>
<string>com.apple.facetime.bag</string>
<string>com.apple.da</string>
</array>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.ts.mach-task-name</key>
<true/>
<key>com.apple.sharing.ProximityClient</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.activateRemoteAlert</key>
<true/>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.lockScreenContentAssertion</key>
<true/>
<key>com.apple.springboard.remote-alert</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>modify-calls</string>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
