MbP?
%@-%@-%@-%@-%@-%@
com.apple.mediaremote
type
date
event
eventdescription
selectionreason
eventreason
timesince
changeType
changeTypeDescription
v8@?0
B8@?0
Restoring previous
v12@?0B8
%@ origin registered <%@> (<%@>) 
origin de-registration of <%@> (<%@>) 
personal device was attached
Playback changed for %@
was not playing sort of recently <%lf> seconds ago
was playing recently <%lf> seconds ago
was not <%@> sort of recently <%lf> seconds ago
was <%@> recently <%lf> ago
was not playing recently <%lf> ago and was not <%@> recently <%lf> seconds ago
Could not find origin with deviceUID = <%@>
No %@SystemEndpoint
Internal Setting not set
local activePlayer %@ is playing
Fallback to previous
%@SystemEndpoint changed from <%@> to <%@> with changeType = <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
unknown
@"NSDictionary"8@?0
%@ endpoint disconnected and attempting to reconnect
v16@?0@"MRAVEndpoint"8
v24@?0d8@?<v@?B>16
%@Endpoint changed
com.apple.mediaremote.systemendpointcontroller.userselectedtimer
 %@ timeout event %@ after <%lf> seconds 
%@Endpoint timeout imminent
%@Endpoint is playing
%@Endpoint is local
com.apple.mediaremote.systemendpointcontroller.playbacktimer
%@ playback timedout event %@ after <%lf> seconds
SystemEndpoint
v32@?0@8@"NSDictionary"16^B24
Startup
StartUp
ConnectionAdded
ConnectionRemoved
UserSelected
UserSelectedTimeout
Playback
PlaybackTimeout
NowPlayingAppRemoved
migrationPlaybackSession
ResolveActiveEndpoint
invalid route error
from external device client
Analytics: 
com.apple.mediaremote.MRDRemoteControlServer
com.apple.mediaremote.MRDMediaRemoteUIService
v16@?0@"MRCommandResult"8
v20@?0I8@"NSArray"12
com.apple.mediaremote.broadcastcommand.%@
v32@?0@"NSString"8@"MRDRemoteControlContext"16^B24
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
@"NSData"16@?0@"_MRSendCommandResultMessageProtobuf"8
MRXPC_COMMAND_STATUSES_DATA_KEY
MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY
MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY
MRXPC_MEDIA_CONTROLS_STYLE_KEY
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@"NSError"8
MRXPC_MEDIA_CONTROLS_ROUTE_UID_KEY
MRXPC_MEDIA_CONTROLS_CENTER_KEY
MRXPC_COMMAND_KEY
Pause because migration
v24@?0@"MRDMediaRemoteClient"8@"NSError"16
Did not receive fade out notification
com.apple.mediaexperience.fadeoutappliedforplaybackhandoff
v12@?0i8
%@ started playback
phone call began
v16@?0Q8
FBSOpenApplicationErrorDomain
B16@?0@"NSString"8
com.apple.mediaservicesbroker.app
com.apple.SoundScapes
com.apple.MediaRemote.command
invoked.notify.client
%@.%@.%@.%@
%@.%@.%@
%@.%@
command<%@>=%@
com.apple.Fuse
com.apple.mediaremoted
com.apple.MediaPlayer.RemotePlayerService
airtunesd
tvairplayd
com.apple.HomePodCannedDemo
coreduetd
AVSystemController
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
AVSystemController_AllowAppToFadeInTemporarilyAttribute
MRXPC_COMMAND_OPTIONS_KEY
Client <%@> missing entitlement needed to send command <%@> to arbitrary apps. Sending to NowPlayingApp instead of <%@>.
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v32@?0@"NSString"8@"NSNumber"16^B24
com.apple.mediaremote.remotecontrol.routedcommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingDataSourceVolumeControlAvailableUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
com.apple.MRDAVRoutingDataSource.serialQueue
subclass must implement
canActivateStreamWithPlayerPath
B16@?0@"MRDNowPlayingOriginClient"8
B24@?0@"NSArray"8@"MROrigin"16
B16@?0@"MRDNowPlayingPlayerClient"8
B16@?0@"MRDNowPlayingClient"8
B24@?0@"NSArray"8@"MRPlayerPath"16
PlayerPath does not take up a slot thus is always allowed to activate
PlayerPath is already active
Number of currently activeStreams (%ld) is less that capacity (%ld) so allowing activation
Currently playing %ld %@ streams (max = %ld).
external
%@ (%@)
%@ (%@) + 
%@ on %@
com.apple.mediaremote.%@.%@
v32@?0@"NSNumber"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16^B24
%@ %p {
  playerPath = %@
  player = %@
  canBeNowPlayingPlayer = %@
  transaction = %@
  playbackState = %@
  inferredPlaybackState = %@
  playbackStateHistory = %@
  pictureInPictureEnabled = %@
  supportedCommands = %@
  capabilities = %@
  playbackQueue = %@
  subscriptionController = %@
supportedCommands
playbackQueue
nowPlayingItem
inferred playback state
playback state
playbackQueueCapabilities
q24@?0@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16
@"NSString"24@?0@"NSData"8@"NSString"16
@"NSString"16@?0@"MRContentItem"8
com.apple.mediaremoted.MRDNowPlayingPlayerClient/%@
true
false
v32@?0@"MRDNowPlayingPlayerClientArtworkRequest"8Q16^B24
v32@?0@"NSString"8@"NSMutableArray"16^B24
v32@?0@8Q16^B24
v24@?0^v8^{__CFError=}16
v32@?0@"NSString"8@"NSString"16^B24
v16@?0@"NSArray"8
v40@?0@"MRTransactionDestination"8@"NSArray"16@"MRPlayerPath"24@?<v@?I>32
%@-%@
CUBluetoothClient
CoreUtils
v16@?0@"NSData"8
v24@?0@"MRDeviceInfo"8@"NSError"16
<%@ %p "%@">
local.
%@ (pid=%d)
<%@ %p {
    %@-%d
    registeredCallbacks = %@
    registeredNotifications = %@
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSNumber"16^B24
    discoveryModes = %@
    subscribedPlayerPaths = %@
    pendingClientState = %@
    connection monitor = %@
B16@?0@"MRAVOutputDevice"8
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSArray"16^B24
WakingPlayerPathNotification
<%@ %p{
    connectionState=%@
    connectionStateError=%@
    name = %@
    endpoint = %@
    volume = %f
    volumeCapabilities = %@
    outputDeviceVolumes = %@
    outputDeviceVolumeCapabilities = %@
    modifications = %@
    discoveryResults = %@
   addedOutputDevices = %@
    changedOutputDevices = %@
    removedOutputDevices = %@
bundleID
audioSessionID
mxSessionIDs
isPlaying
B16@?0@"<MRDNowPlayingDataSourceObserver>"8
<%@, %p: sourceOrigin: %@ - destinationOrigin: %@>
v20@?0I8^{__CFArray=}12
v36@?0^v8I16^{__CFDictionary=}20@?<v@?^{__CFArray=}>28
v24@?0@"MRPlaybackQueue"8@"NSError"16
Could not map %@
v32@?0^v8^v16@?<v@?^v^{__CFError=}>24
v24@?0@"MRPlaybackSessionMigrateRequest"8@"NSError"16
v40@?0@"MRPlaybackSession"8@"MRPlaybackSessionMigrateRequest"16@"MRPlayerPath"24@?<v@?@"MRPlaybackSessionMigrateRequest"@"NSError">32
v32@?0^v8^v16@?<v@?^{__CFError=}>24
v40@?0^v8^{__CFError=}16^v24@?<v@?^{__CFError=}>32
%@-%@-%d
MediaPlayback
v32@?0@"NSArray"8@"MRAVEndpoint"16@"NSError"24
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
<Unknown>
com.apple.mediaremote.MRDRapportRemoteControlService.workerQueue
com.apple.mediaremote.remotecontrol.connect
destination
destinationGroupUID
session
v32@?0@"MRDeviceInfo"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSError">24
com.apple.mediaremote.remotecontrol.disconnect
MRDRapportRemoteControlService received disconect event
B16@?0@"MRDRapportRemoteControlServiceConnection"8
v24@?0@"MRDeviceInfo"8@"NSDictionary"16
com.apple.mediaremote.remotecontrol.reset
MRDRapportRemoteControlService received reset event
RapportRemoteControlChannel-<%@->%@/%@>
MRDMediaRemoteExternalDeviceServerClientInvalidatedNotification
v16@?0@"NSNotification"8
incomingRapportConnections
incomingRapportConnectionsDescription
source
source=%@(%@) session=%@
ProximityController(%@)
local=%@
active=%@
inactive=%@
reserved=%@
@16@?0@"MRAVOutputContext"8
v16@?0@"NSMutableDictionary"8
@"MRAVOutputContext"16@?0@"AVOutputContext"8
AVAudioSessionMediaServicesWereResetNotification
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
MRDAVLocalDeviceCommitManager
MRDAVLocalDeviceCommitManager.serial
MRDAVLocalDeviceCommitManager.completion
delayedInit
nowPlayingSessionDidStop
topologyChangeFinished-%@
didRemoveLocalDevice
clusterTypeDidChange
LocalDeviceCommitManager
_commitLocalDeviceWithReason
Failed to find local output device
Failed to find output context for: %@
Skipping commit of local device because it is already contained in context: %@
Committing output device: %@ to context: %@
v16@?0^{__CFError=}8
v24@?0@"MRAVOutputDevice"8@"NSError"16
MRXPC_INDEXPATH_DATA_KEY
v16@?0@"MRDMediaRemoteClient"8
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
BrowsableContent playback initiated
Sending initiatePlaybackMessage
MRXPC_BUNDLE_ID_KEY
com.apple.mediaremote.hostedDiscoverySession/serialQueue
discovery enabled at: %@ (%.0f s ago) until: %@ (duration %.0f s)
discovery never enabled
%@ %p {
    discovery mode = %@
    xpc connection = %@
    pid = %d
    bundle id = %@
    %@
    connection monitor = %@
com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)
<%@: %p - destination UID=%@ groupID=%@>
NowPlaying 
OutputDevices 
Volume 
Keyboard 
SystemEndpointUpdates 
<%@ %p {
    deviceInfo = %@
    lastSupportedMessageType = %ld
    virtualTouchDevices = %@
    registeredVirtualVoiceInputDevices = %@
    playbackQueueRequests = %@
    sessionPeer = %@
    pinPairingToken = %@
    serverDelegate = %@
    registeredUpdates = %@
    subscribedPlayerPaths = %@
    destinationOutputDeviceUID = %@
    destinationGroupID = %@
    destinationEndpoint = %@
    connection = %@
v16@?0I8I12
v24@?0@"MRAVEndpoint"8@"NSError"16
v16@?0@"MRPlayerPath"8
MRDExternalDeviceServer
ExternalDeviceServerDestination
com.apple.TVRemote
B16@?0@"MRCommandInfo"8
v32@?0@"NSNumber"8@"MREmulatedGameController"16^B24
@16@?0@"MRAVEndpoint"8
B24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
@"NSString"16@?0@"MRAVEndpoint"8
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
model
deviceID
AirPlayPortExtendedInfo
kMRDPersonalDeviceControllerPersonalDeviceStateDevicesKey
kMRDPersonalDeviceControllerPersonalDeviceStateDateKey
com.apple.mediaremote.MRDPersonalDeviceController
Personal devices did change.
Initial load with no persisted state.
com.apple.mediaremote.mrdpersonaldevicecontroller.overridetimer
Timeout reached.
v24@?0^{__CFArray=}8^{__CFError=}16
Companion Link Event
MRXPC_HOMEKIT_IDENTIFIER_KEY
RecentlyPlayedEntries
v32@?0@"NSDictionary"8Q16^B24
q24@?0@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"8@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"16
lastPlayingDate
lastNotPlayingDate
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
%@-%@-%@-%@-%@-%@(%@)-%@-%@
PLAYING
NOT PLAYING
deviceUID
playerPathDescription
contentItemDescription
MPStoreClientTokenDidChangeNotification
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
v12@?0I8
identifier
defaultGroupUID
LOCAL
DeviceInfo.plist
com.apple.mediaremote.MRDIDSRemoteControlServiceConnection.workerQueue
v32@?0@"MRIDSMessage"8@"NSString"16@"NSString"24
%@ %p
IDSWatch: %@
DiscoveryChannelMode: %@
Connections: %@
lastSentEndpoint: %@ (%.1fs ago)
Start
IDS Connected
IDSConnection Disconnected
MRDIDSRemoteControlService.setConnectionState
IDSDiscoveryChannel
New replacement connection %@-%@ established
IDSRemoteControlChannel-<%@/%@>
v16@?0@"MRIDSMessage"8
v24@?0q8@?<v@?@"NSString">16
v32@?0@"NSString"8@"MRDIDSRemoteControlServiceConnection"16^B24
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
MRXPC_ERROR_CODE_KEY
UserAssignedDeviceName
v24@?0^{__CFString=}8^{__CFDictionary=}16
com.apple.airplay.prefsChanged
com.apple.airplay.active
com.apple.airplay.advertisingDidChange
com.apple.MRDDeviceInfoDataSource.workerQueue
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
  origin = %@
  deviceInfo = %@
  volume = %f
  volume capabilities = %@
  time since playing = %lf
  is playing = %@
  active now playing client = %@
  override client = %@
  explicit now playing client = %@
  inferred now playing client = %@
  app activity = %@
  datasource = %@
  default supportedCommands = %@
q24@?0@"MRDNowPlayingClient"8@"MRDNowPlayingClient"16
all now playing clients = %@
volume
volumeCapabilities
q24@?0@"MRDNowPlayingPlayerClient"8@"MRDNowPlayingPlayerClient"16
computedNowPlayingClient
Updated computedNowPlayingClient.
explicitNowPlayingClient
Updated explicitNowPlayingClient.
inferredNowPlayingClient
Updated inferredNowPlayingClient.
overrideNowPlayingClient
Updated overrideNowPlayingClient.
applicationActivity
Updated applicationActivity.
RemoveAllClients
Removed nowPlayingClient.
v32@?0@"NSString"8@"NSData"16^B24
setNowPlayingDataSource
nowPlayingApplicationDidChange
nowPlayingApplicationPlaybackStateDidChange
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange
PlayerPictureInPictureEnabledDidChange
ActivePlayerDidChange
NowPlayingApplicationDidUnregisterCanBeNowPlaying
@"MRDNowPlayingClient"8@?0
com.apple.mediaremoted.MRDNowPlayingOriginClient/%@
@16@?0@"MRDNowPlayingPlayerClient"8
addNowPlayingClient-%@
com.apple.mediaremote.originclient.playbacktimer
%@ was not playing recently
%@ is playing for notification <%@>
<%@ %p: %@>
B32@?0@"MRAVOutputDevice"8Q16^B24
Speaker
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
AVSystemController_ServerConnectionDiedNotification
AVSystemController_CurrentExternalScreenAttribute
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_CurrentRouteHasVolumeControlNotificationParameter
AVSystemController_SubscribeToNotificationsAttribute
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_ExternalScreenDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
com.apple.mediaremote.MRDLockScreenController
Previous playerPath %@ invalidated
v16@?0^v8
PlayerPath changed from %@ to %@ with changeType %@
visible
NOT visible
Personal devices changed
Lock screen content changed
LayoutChange
ElectedPlayer %@ playback
started
stopped
playerPath
personal device
com.apple.mediaremoted.LockScreen
SBDashBoardNowPlayingAssertionIdentifier
SBSLockScreenContentAssertion
/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices
SBSLockScreenContentAssertionSlotPlatter
MRDConnectionLifetimeController-%@-%ld.queue
Init
Device is in use
Device is on cover sheet
Device is playing
Device played recently
Device is part of UserSelected endpoint
DeviceInfo changed
Has not played recently
ScreenOff -> CoverSheet
ScreenOff -> InUse
CoverSheet -> InUse
CoverSheet -> ScreenOff
InUse -> ScreenOff
Active endpoint changed
com.apple.mediaremoted.hostedExternalDevice.serialQueue
com.apple.mediaremoted.hostedExternalDevice.callbackQueue
<%@: %p externalDeviceName=%@>
%@: %p {
    external device = %@
    connection state = %@
    last can migrate to local endpoint error = %@
    external device clients = %@
    external output context = %@
    subscribed playerPaths = %@
    lifetimeController = %@
TV joined Expanse session.
Not already connected to endpoint
Local device is groupable
B32@?0@"MRDMediaRemoteClient"8@"NSDictionary"16^@24
mediaremotetool
B16@?0@"MRDAVHostedExternalDeviceClient"8
v20@?0I8^{__CFError=}12
v24@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSArray"16
v20@?0f8@"NSString"12
v20@?0I8@"NSString"12
init
Endpoint is not initialized
v16@?0^{__CFString=}8
v24@?0^{__CFString=}8^{__CFData=}16
groupContainsGroupLeader
groupLeader
topology
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
kAirPlayWHANotification_BreakAwayFromCurrentGroup
@"MRProtocolMessage"16@?0@"MRDExternalDeviceServerClientConnection"8
B16@?0@"MRDeviceInfo"8
com.apple.tvremotecore.xpc
I12@?0I8
@"MRProtocolMessage"20@?0@"NSString"8I16
@"MRProtocolMessage"24@?0@"MRDExternalDeviceServerClientConnection"8@"MRAVEndpoint"16
%@ -> %@
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"MRAVRoutingDiscoverySession"16^B24
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v16@?0^{__CFArray=}8
v16@?0@"_MRLyricsEventProtobuf"8
v20@?0{_MRHIDButtonEvent=IIB}8
Connection %@ exited in the middle of a migration
v24@?0@"MRPlaybackSessionRequest"8@"MRPlayerPath"16
B16@?0@"MRDExternalDeviceServerClientConnection"8
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
v16@?0@"MRProtocolMessage"8
SBSUndimScreen
SpringBoardServices
v24@?0@"CUPairedPeer"8Q16
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
@16@?0@"MRPlayerPath"8
v20@?0f8^{__CFError=}12
v32@?0@"NSString"8@"NSArray"16^B24
Initializing External Device
v16@?0@"MROrigin"8
v32@?0@"NSString"8@"MRAVOutputDevice"16^B24
v40@?0@"NSDictionary"8@"NSArray"16@"MRAVEndpoint"24@"NSError"32
sendPlaybackSession<%@>
sendPlaybackSessionMigrateBegin<%@>
sendPlaybackSessionMigrateEnd<%@>
%@ from external device client: %@<%@>
v16@?0@"MRUpdateActiveSystemEndpointResponse"8
v24@?0q8@"NSError"16
MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification
com.apple.mediaremoted.MRDHostedRoutingController/calloutQueue
@"MRExternalDevice"16@?0@"NSString"8
DiscoverySession=%@
%s is abstract
-[MRDHostedRoutingController createDiscoverySession]
-[MRDHostedRoutingController _onQueue_reloadEndpoints]
-[MRDHostedRoutingController _onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:]
-[MRDHostedRoutingController makeEndpointWithOutputDevices:options:]
MediaRemote
virtual_device
q24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"NSString"16@?0@"MRAVOutputDevice"8
@"MRAVDistantOutputDevice"16@?0@"MRAVOutputDevice"8
@"_MRAVOutputDeviceDescriptorProtobuf"24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"MRAVDistantOutputDevice"16@?0@"MRAVDistantOutputDevice"8
B16@?0@"MRAVDistantOutputDevice"8
B16@?0@"MRAVOutputContext"8
ignoreExistingLeader
preferExistingConnection
preferSubscription
preferCloudLibrary
preferHomePod
preferAppleTV
none
{ %@ }
proxyGroupPlayer
relayable
remoteControllable
existingConnection
appleMusicSubscription
iCloudMusicLibrary
existingLeader
HomePod
AppleTV
existingDesignatedLeader
_MRDActiveOriginDataDefaultsKey
LastNowPlayingAppIsPlayingState
_MRDActivePlayerPathDateDefaultsKey
_MRDAnyNowPlayingAppIsPlayingDefaultsKey
%@ has exited in the middle of a migration attempt
v24@?0@"NSString"8@"NSMutableDictionary"16
v32@?0@"MRContentItem"8@"MRPlaybackQueueRequest"16^B24
nanomediaremoted
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
MRXPC_NOWPLAYING_DISPLAYID_KEY
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
@16@?0@"MRDNowPlayingClient"8
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
@"NSData"16@?0@"MRDNowPlayingPlayerClient"8
MRXPC_NOWPLAYING_PLAYER_PATH_ARRAY_DATA_KEY
MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY
v16@?0@?<v@?@"NSData"I>8
v24@?0@"NSData"8@"NSError"16
Application <%@> waiting for can be now playing
v20@?0@"NSData"8I16
Unable to register for waking now playing notifications without entitlement: %@
com.apple.mediaremote.waking-now-playing-notifications
MRXPC_AUDIO_FORMAT_CONTENT_INFO
q24@?0@"MRDNowPlayingOriginClient"8@"MRDNowPlayingOriginClient"16
event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>
Playing
Not Playing
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%@ %p {
    player path = %@
    client = %@
    perPlayerCanBeNowPlaying = %@
    canBeNowPlaying = %@
    canBeNowPlayingTimestamp = %@
    effectiveCanBeNowPlaying = %@
    any player is playing = %@
    has now playing data = %@
    foregrounded = %@
    supportsBackgroundAudio = %@
    active player client = %@
    player clients = %@
effectiveBundleIdentifier
v16@?0@"NSDictionary"8
UIBackgroundModes
audio
displayName
activePlayerClient
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
@"AVOutputContext"8@?0
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v32@?0@"NSNumber"8@"MRDMediaRemoteClient"16^B24
com.apple.mediaremote.mediaremoted.notificationQueue
_MROriginatingNotification
com.apple.mediaremote.companionLinkClient
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
enabled
disabled
com.apple.
MRXPC_APP_INSTALLED_KEY
MRXPC_BOOL_RESULT_KEY
System Media Wake - %@
Player Service Wake - %@
Bless Request - %@
v16@?0@"_MRDiagnosticProtobuf"8
com.apple.mediaremote.MRDMediaRemoteServer
No diagnostic info
XPC Client: %@:
MediaRemote Client Diagnostic
Collected at: %@
================================================================================
clientDiagnose
q24@?0@"MRDMediaRemoteClient"8@"MRDMediaRemoteClient"16
kern.bootsessionuuid
Restoring state of client after daemon launch
%@ is invalid. You must provide a type, pid and bundleID with %@.
%@ type=%@
SendCommand
RelayServerMessage
BrowsableContentMessage
Transaction
RestoreState
Wake
Notification
UnknownType
<MRDAutoConnectionControllerReason %@ - %@>
com.apple.mediaremote.MRDAutoConnectionController
player %@ started playing
q24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
%@ endpoint changed
autoConnectToEndpoint
autoConnectToEndpoint-%@
endpointChanged
proximity
reconnect
startedPlaying
requestDestination
MRDElectedPlayerControllerEventUserInfoKey
ElectedOrigin changed from <%@> (<%@>) to <%@> (<%@>)
%@ PlaybackQueueChanged
%@ Playback %@
NowPlayingAppChanged to %@
Was %@grounded
Fore
Back
activeSystemEndpointDidChange
ElectedPlayerController failed to connect
v16@?0^{__MRAVEndpointRef=}8
is playing
SiriIntent
was playing recently <%lf> seconds ago but not nowPlayingData
was not playing recently. Last played <%lf> seconds ago
%@ has no activePlayer
%@ is not foregrounded and does not support background audio
%@ has no activeNowPlayingClient
com.apple.mediaremote.electedplayercontroller.playbacktimer
%@ playback timeout event %@ after <%lf> seconds
electedPlayer %@ was not playing recently for event <%@>
electedPlayer %@ is playing for event <%@>
no electedPlayer for event <%@>
OriginChanged
PlaybackChanged
NowPlayingAppChanged
NowPlayingAppForegroundChanged
PlaybackQueueChanged
<%@:%p {
  started = %@
  connections = %@
APReceiverMediaRemoteXPCClient_SetDelegate
@"MRAirPlayTransportConnection"8@?0
AVOutputContextCommunicationChannel.didCloseCommunicationChannel
APReceiverMediaRemoteCommunicationChannel.didCloseCommunicationChannel
/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver
MediaRemote Diagnostic
================================================================================
Active Clients
Active Transactions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Elected Player
Elected Player Reason
LockScreen Widget Active
LockScreen Widget Visible
LockScreen Widget PlayerPath
Origin Forwarders
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
External Discovery Sessions
RemoteControlService
Local OutputContextDataSource
OutputContexts
Routing Server
System Discovery Mode (Legacy)
AirPlay Security Settings
Local Receiver Pairing Identity
System Active Endpoints
Auto Connecting Endpoints
Auto Connected Endpoints
Proximity Events
Nearby Devices
Medium Devices
Immediate Devices
Proximal Migrating Devices
Hosted Routing
Hosted Discovery Mode
Discovery Sessions
Endpoints:
Endpoint
External Device
v32@?0@"MRAVDistantEndpoint"8Q16^B24
Remaining External Devices
EndpointID: %@
v32@?0@8@"MRDAVHostedExternalDevice"16^B24
Concrete Discovery Session
Stream Count
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
Companion Link
RPDevice<routeID: %@>
Home Users
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
<%@ %p {
  AirPlayService = %@
  IDSService = %@
  RapportService = %@
CXCallObserver
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
MRDAVOutputContextExternalDevice.serialQueue
MRDAVOutputContextExternalDevice.workerQueue
MRDAVOutputContextExternalDevice.notificationQueue
startUp
designatedGroupLeader
origin
outputContext
originForwarder
<%@: %p id=%@ leader=%@ origin=%@-%ld originFwd=%@>
<%@: %p %@>
OutputContextExternalDevice does not have a designatedGroupLeader. (PreviousGroupLeader=%@)
v36@?0@"MRPlayerPath"8I16@"NSDictionary"20@?<v@?@"MRCommandResult">28
v24@?0@"MRPlaybackSession"8@"NSError"16
handleRemoteCommand
@"MRCommandResult"16@?0@"NSError"8
v32@?0@"MRDMediaRemoteClient"8@"MRPlayerPath"16@"NSError"24
com.apple.tvairplayd
_createPlayerAndWaitForConnection
Could not find xpcClient for playerPath %@
v24@?0@"MRPlayerPath"8@"NSError"16
Could not find application in playerPath %@
createPlayerAndWaitForCanBeNowPlaying
createPlayer
v24@?0@"NSObject<OS_xpc_object>"8@"NSError"16
@"NSObject<OS_xpc_object>"16@?0@"MRPlayerPath"8
_handlePlaybackQueueRequest
@"MRProtocolMessage"16@?0@"MRPlayerPath"8
v24@?0@"MRProtocolMessage"8@"NSError"16
setOutputDeviceVolume
Attempting to set and add/remove devices at the same time, which is unsupported
modifyOutputContext
Failed to find devices with UIDs: %@
v32@?0@"NSString"8@"MRAVConcreteOutputDevice"16^B24
MRDAVOutputContextExternalDevice
v20@?0C8^v12
%@ %@
OutputContextExternalDevice-%@-%@:%@<%@>
com.apple.MediaRemote.connectionMonitor
<%@ %p : %@>
    stauts = %@
    currentMessageCount = %lu
    totalMessageCount = %lu
    lastMessageSent = %f seconds ago
    lastStatusCheck = %f seconds ago
    lastStatusChange = %f seconds ago
    pendingBarrierCompletion = YES
    paramters = {%lu x %f}
%@:%@-%d
XPCConnectionBarrier
Running
Suspended
com.apple.airplay.password
MostRecentlyUsedAVOutputDeviceUIDs
com.apple.mediaremote.routingServer.operationQueue
Restore
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v16@?0@"NSString"8
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_UID_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v24@?0@"MRDAVRoute"8@"NSError"16
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_CUSTOM_XPC_ENDPOINT_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_AIRPLAY_LEADER_TYPE
requestID
MRXPC_JSON_DATA_BLOCK
@"NSData"16@?0@8
v20@?0@"MRAVEndpoint"8I16
_handleStartNowPlayingSession
v32@?0@"MRPlayerPath"8@"MRDeviceInfo"16@"NSError"24
Returning local origin because device requires command redirection
%@<%@>
B16@?0@"MRAVEndpoint"8
Discovered local device on endpoint: %@
MRXPC_ROUTING_CONTEXT_UID_KEY
@16@?0@"NSData"8
MRXPC_SOURCE_ENDPOINT_UID_KEY
MRXPC_MIGRATE_REQUEST_DATA_KEY
MRXPC_DESTINATION_ENDPOINT_UID_KEY
groupDevicesAndSendCommand
Analytics: Group devices and send message
createHostedEndpointForDevices
v16@?0@"MRAVOutputDevice"8
com.apple.mediaremote.removeFromParentGroup
com.apple.mediaremote.routingServer.getExternalDevice
MRXPC_ENDPOINT_UID_KEY
MRXPC_EXTERNAL_DEVICE_LISTENER_KEY
_handleModifyOutputContextMessage
MRXPC_MESSAGE_CUSTOM_ID_KEY
MRXPC_CONTEXT_MODIFICATION_DATA_KEY
ContextID=%@ %@
Failed to create output context with UID=%@
v16@?0@"MSVSystemDialogResponse"8
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
com.apple.mediaremoted.MRDAVRoutingServer
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_IPALIASING_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_IPALIASING_MESSAGE
AIRPLAY_CLUSTER_ATV_ALERT_MESSAGE
Cluster connect error
AIRPLAY_ATV_CLUSTER_TRY_AGAIN
AIRPLAY_ATV_CLUSTER_CHANGE_DEFAULT_OUTPUT
prefs:root=DefaultAudioOutput
com.apple.TVSettings
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_NOT_CONNETED_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
APReceiverMediaRemoteXPCClient_CopyProperty
AirPlaySecuritySetting
password
_createHostedEndpointForOutputDeviceUIDs
Modifying output context: %@
setOutputDevices failed
@16@?0@"MRAVOutputDevice"8
Discovered hosted endpoint: %@
com.apple.mediaremote.createHostedEndpointForOutputDeviceUIDs
MRAVOutputDeviceRemoveFromParentGroup failed
MRDAVRoutingServer/resolveEndpoint
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet
AVOutputContextDeviceConnectionFailureReasonIPAliasingNotSupported
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
FBSOpenApplicationOptionKeyPayloadURL
/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
RequestingAuthorizationToken
ReceivedAuthorizationToken
Retried
Completed
Cancelled
Failed
CanSleep
WillSleep
WillPowerOn
B24@?0@"NSString"8@"MRDAVHostedExternalDevice"16
v32@?0@"NSString"8@"MRDAVHostedExternalDevice"16^B24
undiscoverable
disconnected
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
RegionalBehaviorEUVolumeLimit
CannotExceedEUVolumeLimit
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_EUVolumeLimitDidChangeNotification
AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
AVSystemController_EUVolumeLimitAttribute
AVSystemController_EUVolumeLimitEnforcedAttribute
AVSystemController_AudioVolumeNotificationParameter
AVSystemController_AudioCategoryNotificationParameter
AVSystemController_AudioVolumeChangeReasonNotificationParameter
AVSystemController_EUVolumeLimitNotificationParameter
AVSystemController_EUVolumeLimitEnforcedNotificationParameter
AVController_RouteDescriptionKey_AVAudioRouteName
AVController_RouteDescriptionKey_RouteSubtype
AVController_RouteDescriptionKey_RouteUID
AVSystemController_FullMuteAttribute
com.apple.siri
MusicUIServiceNowPlayingViewController
com.apple.MusicUIService
MusicUIServiceMediaControlsViewController
MusicUIServiceLanguageOptionsViewController
MusicUIServiceMediaControlsMediumConfidenceViewController
MRDMediaRemoteClientDidConnect
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.%@.%@.%@-%d
r*16@?0@"NSString"8
serialQueue
com.apple.mediaremote.send-commands
com.apple.AssistantServices
com.apple.lskdd
com.apple.mediaremote.nearby-device
com.apple.mediaremote.request-bless
com.apple.mediaremote.set-now-playing-app
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
com.apple.PairingManager
%@-%ld
<%@ %p, bundleIdentifier = %@, pid = %ld>
<%@ %p {
    bundle identifier = %@
    pid = %ld
    euid = %ld
    xpc connection = %@
    connection monitor = %@
    current task assertion = %@
    assertions = %@
    registered custom origins = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    has requested legacy nowPlayingInfo = %s
    has requested supported commands = %s
    subscribedWakingPlayerPaths = %@
com.apple.iapd
com.apple.iap2d
v16@?0@"MSVTaskAssertion"8
Redirecting command to local origin legacy handler. Command will be re-emitted under origin containing the local device: %@
Redirecting command to remoteEndpoint containing localDevice
Sending remote control command %@
 host process: %@(%d)
RequestPlaybackQueue
BeginLoadingBrowsableContent
%llu
Relaying XPC message %@ to client %@
v24@?0@"NSString"8@"NSDictionary"16
B16@?0@"AVOutputDeviceGroup"8
v32@?0@"NSNumber"8@"NSValue"16^B24
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
MRDisplayMonitorLayoutDidChange
MRDisplayMonitorDisplayDidChangeNotification
com.apple.mediaremote.MRDDisplayMonitor
v32@?0@"FBSDisplayLayoutMonitor"8@"FBSDisplayLayout"16@"FBSDisplayLayoutTransitionContext"24
Display%@
LockScreen%@grounded
LockScreen%@Visible
ControlCenter%@Visible
FBSDisplayLayoutMonitor
FBSDisplayLayoutMonitorConfiguration
FBSDisplayLayoutElementLockScreenIdentifier
FBSDisplayLayoutElementControlCenterIdentifier
v24@?0@"NSDictionary"8@"NSError"16
B24@?0r*8@"NSObject<OS_xpc_object>"16
A reply object could not be created.
A reply connection could not be obtained.
MRDLaunchApplicationWithReason
post-launch setup for  %@
v24@?0@"BSProcessHandle"8@"NSError"16
launchAppAndWaitForXpcConnection
Application <%@> waiting for xpcConnection
launchAppAndWaitForCanBeNowPlaying
Application <%@> waiting for CanBeNowPlaying
FallbackIdentifier-%d
SBSCopyFrontmostApplicationDisplayIdentifier
FBSOpenApplicationOptions
FBSOpenApplicationService
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
, options = %@
com.apple.BTAvrcp
com.apple.rcd
com.apple.AVRCP
<%@ %p, command = %@, routedToApp = %@>
-[MRDAVRoute initWithDictionary:]
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
AVOutputDevice
outputDeviceUID
type
changeType
date
eventReason
selectionReason
initWithFormat:
description
setOutputDeviceUID:
setType:
setDate:
event
setEvent:
setEventReason:
setSelectionReason:
setChangeType:
.cxx_destruct
_outputDeviceUID
_type
_date
_event
_eventReason
_selectionReason
_changeType
T@"NSString",&,N,V_outputDeviceUID
Tq,N,V_type
T@"NSDate",&,N,V_date
Tq,N,V_event
T@"NSString",&,N,V_eventReason
T@"NSString",&,N,V_selectionReason
Tq,N,V_changeType
init
server
nowPlayingServer
initWithSuiteName:
sharedSystemAudioContext
_hasPersonalDeviceForContext:
_initializeSystemEndpointInfo
defaultCenter
_handleOriginDidRegisterNotification:
addObserver:selector:name:object:
_handleOriginDidUnregisterNotification:
_handleOutputContextDidAddOutputDeviceNotification:
_handleIsPlayingDidChangeNotification:
removeObserver:
dealloc
allValues
countByEnumeratingWithState:objects:count:
numberWithInteger:
setObject:forKeyedSubscript:
timeIntervalSinceNow
numberWithDouble:
objectForKeyedSubscript:
_onSerialQueue_updateSystemEndpoint:type:event:eventReason:
reason
updateUserSelectedSystemEndpoint:event:eventReason:
activeOutputDeviceUID:
isEqualToString:
initWithOutputDeviceUID:reason:
setClientBundleIdentifier:
_onSerialQueue_reconnectToOutputDevice:completion:
availableEndpoints
containsOutputDeviceWithUID:
externalDevice
customOrigin
originClientForOrigin:
registrationDate
compare:
localOriginClient
userInfo
deviceUID
name
mainBundle
bundleIdentifier
originClientForDeviceUID:
clearUserSelectedOutputDeviceUID:event:reason:clientBundleIdentifier:
object
updateUserSelectedSystemEndpoint:
playerPath
client
processIdentifier
_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:
_onSerialQueue_maybeSetupPlaybackTimerForEvent:
_onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:
_onSerialQueue_calculateActiveEndpoint:event:reason:
_onSerialQueue_calculateUserSelectedEndpointForEvent:reason:
_onSerialQueue_calculateProactiveEndpoint:
timeSincePlaying
currentSettings
mediaRecentlyPlayedInterval
endpointRecentlyUserSelectedInterval
useProactiveEndpoint
activeNowPlayingClient
activePlayerClient
isPlaying
systemEndpointInfo
_writeSystemEndpointInfo:
copy
delegate
systemEndpointController:activeSystemEndpointDidChangeForRequest:type:
isPairedDeviceSync
clientBundleIdentifier
numberWithInt:
dictionaryWithObjects:forKeys:count:
_onSerialQueue_maybeSetupUserSelectedTimerForEvent:
reasonWithType:string:
sharedConnectionController
connectToOutputDevice:reason:queue:completion:
invalidateWithReason:
initWithInterval:name:queue:block:
origin
outputDevices
deviceType
deviceSubtype
setObject:forKey:
objectForKey:
intValue
enumerateKeysAndObjectsUsingBlock:
activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval
initWithRoutingController:
setDelegate:
_serialQueue
_nowPlayingServer
_routingController
_systemEndpointEntries
_cachedHasPersonalDevices
_userDefaults
_userSelectedTimer
_playbackTimer
_delegate
T@"NSDictionary",R,N
T@"<MRDAVSystemEndpointControllerDelegate>",W,N,V_delegate
containsString:
stringByReplacingOccurrencesOfString:withString:
isEqual:
setPlayerPath:
commandDictionary
setCommandDictionary:
completionBlockDictionary
setCompletionBlockDictionary:
_playerPath
_commandDictionary
_completionBlockDictionary
T@"MRPlayerPath",C,N,V_playerPath
T@"NSMutableDictionary",&,N,V_commandDictionary
T@"NSMutableDictionary",&,N,V_completionBlockDictionary
dictionary
_clientDidConnectNotification:
_handlePlayerIsPlayingDidChangeNotification:
sendRemoteControlCommand:completion:
error
_effectiveContextIDForCommand:
commandType
_isCommandCacheCreating:
count
mutableCopy
unsignedIntValue
setCommandType:
_forwardCommand:completion:
optionValueForKey:
boolValue
initWithHandlerStatuses:sendError:
_isCommandCacheable:
numberWithUnsignedInt:
broadcastRemoteControlCommand:completion:
isLocal
remoteControlClients
sendRemoteControlCommand:toClients:completion:
commandID
UTF8String
initWithCapacity:
_createBroadcastCommandPlayerPathForClient:
_createBroadcastCommandResponseFromStatuses:forClient:
addObject:
_sendRemoteControlCommand:toDestinationClient:withLegacyCompletion:
broadcastCommandWaitDuration
initWithInterval:repeats:queue:block:
_shouldIgnoreCommand:completion:
originatingAppDisplayID
removeObjectsForKeys:
allClients
canBeNowPlaying
_handleSendCommandMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
_handlePrewarmMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsCommandMessage:fromClient:
_handleDismissMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsLanguageOptionsCommandMessage:fromClient:
_handleGetPendingCommandsMessage:fromClient:
_handleSendPlaybackSessionMessage:fromClient:
_handleSendPlaybackSessionMigrateBeginMessage:fromClient:
_handleSendPlaybackSessionMigrateEndMessage:fromClient:
_handleTriggerAudioFadeMessage:fromClient:
setEnqueuedCommands:
setRemoteControlContexts:
data
remoteUIService
isValid
initWithConfigurationData:style:endpoint:
setRemoteUIService:
presentWithCompletion:
displayName
stringWithUTF8String:
initWithRouteUID:center:
isResolved
containsObject:
queryExistingPlayerPathForXPCMessage:forClient:
unresolvedPlayerPath
launchApplicationTimeoutInterval
xpcClient
relayXPCMessage:andReply:
playerClient
removeObject:
relayXPCMessage:andReply:resultCallback:
request
addPendingPlaybackSessionMigrateEvent:playerPath:
removePendingPlaybackSessionMigrateEvent:
fadeType
initWithFadeDuration:error:
initWithTimeout:reason:handler:
disarm
sharedAVSystemController
setAttribute:forKey:error:
initWithUnderlyingCodableMessage:error:
_sendQueuedCommandsForDestinationClient:
_clearAllQueuedCommandsForReason:
numberOfActivePhoneCalls:
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
appOptions
routeUID
length
routingServer
pickCachedRouteWithUID:
createNowPlayingClient
setClient:
setPlayer:
_sendRemoteControlCommand:toDestinationClient:withCompletion:
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localActiveClientBundleIdentifier
nowPlayingDataSource
nowPlayingApplicationDisplayID
clientForBundleIdentifier:
destinationAppDisplayID
initWithProcessIdentifier:bundleIdentifier:
localOrigin
initWithOrigin:client:player:
resolveExistingPlayerPath:
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
commandResultWithSendError:
clientWithRegisteredCustomOrigin:
sendError
handlerReturnStatuses
_resolveCommandBeforeSend:toClient:error:
_performCommandProcessingAfterSend:
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_clearQueuedCommandsForApplicationWithDisplayID:
setDestinationAppDisplayID:
code
domain
initWithArray:
senderID
initWithBundleIdentifier:
player
queuedCommandsTimeoutInterval
dateCreated
_completionHandler
removeObjectForKey:
removeAllObjects
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
localNowPlayingClient
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
isAVRCPCommand
shouldSendCommandsDuringPhoneCall
supportExpanseMigration
sharedManager
expanseSessionActive
alwaysIgnoreDuringSharePlay
expanseSessionHasActiveActivity
alwaysIgnoreDuringCall
shouldSendCommand:
protobuf
setOrigin:
setProcessIdentifier:
setBundleIdentifier:
addHandlerReturnStatus:
_persistPlaybackSessionAndUpdateOptionsForSessionPreloadCommand:forClient:error:
_cleanUpPersistedSessionForSessionPreloadCommand:
initWithData:
identifier
initWithMRError:
fileURLWithPath:
defaultManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
playbackSessionData
writeToURL:options:error:
connection
path
stringWithCString:encoding:
setOptionValue:forKey:
revision
metadata
removeItemAtURL:error:
queryPlayerPath:
nowPlayingClient
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
phoneCallObserver:callDidChange:
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
_enqueuedCommandsForDisplayID:
_applicationIsRunning:
_commandQueuesForDisplayIDs
_pendingSendPlaybackSessionDisplayIDs
_remoteControlContexts
_callObserver
_remoteAlertWorkerQueue
_fadeOutNotificationToken
_redirectionCache
T@"NSArray",R,N
entitlements
initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:optionsData:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
routingDataSource
currentVolume
volumeWarningEnabled
volumeLimit
warningState
setWarningState:
_volumeWarningEnabled
_currentVolume
_volumeLimit
_routingDataSource
_warningState
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
Tf,R,N,V_currentVolume
TB,R,N,V_volumeWarningEnabled
Tf,R,N,V_volumeLimit
TQ,N,V_warningState
standardUserDefaults
dictionaryForKey:
boolForKey:
setBool:forKey:
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
clearRoutedCommands
_routedCommands
_commandQueue
_contextID
_originatingAppDisplayID
T@"NSString",R,N,V_contextID
T@"NSString",R,N,V_originatingAppDisplayID
pickedRoute
arrayWithObjects:count:
pickedRouteForCategory:source:
pickedRoutes
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRoutesForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
addAuthorizationCallbackForRouteID:requestCallback:
removeAuthorizationCallbackForRouteID:
authorizationRequestCallbackForRouteID:
discoveryMode
setDiscoveryMode:
externalScreenType
currentRouteSupportsVolumeControl
_authorizationCallbacks
_currentRouteSupportsVolumeControl
_discoveryMode
_externalScreenType
_pickedRoute
TI,N,V_discoveryMode
T@"MRDAVRoute",R,N,V_pickedRoute
TI,R,N,V_externalScreenType
TB,R,N,V_currentRouteSupportsVolumeControl
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
bytes
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_processID
_bundleID
T@"NSString",R,N,V_bundleID
Ti,R,N,V_processID
UUID
UUIDString
msv_firstWhere:
nowPlayingClients
playerClients
candidateStreams
timeIntervalSinceDate:
activeStreams
remainingStreamCapacity
activeStreamCount
activeStreamCapacity
initWithMRError:description:
reserveSlotForLocal
playbackQueue
contentItemWithOffset:
deviceInfo
groupedDevices
appendString:
appendFormat:
title
maxStreamCapacity
originClients
isHosted
containsLocalDevice
msv_filter:
routingContextID
arrayByAddingObject:
containsActiveStream
canActivateStreamWithPlayerPath:
TQ,R,N
isActiveStream
initWithPlayerPath:
distantPast
_registerCallbacksForPlayerPath:
canBeNowPlayingPlayer
commandInfosFromData:
setSupportedRemoteControlCommands:
isEqualToData:
supportedRemoteControlCommands
_onQueue_supportedCommandsDidChange:
_onQueue_popState
minimalReadableDescription
_onQueue_pushState
_onQueue_playbackQueueDidChange:
playbackState
initWithPlaybackState:date:
_onQueue_playbackState
hasPlaybackRate
hasElapsedTimeTimestamp
elapsedTimeTimestamp
initWithTimeIntervalSinceReferenceDate:
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_isPlaying
setSupportedCommands:
setPlaybackQueue:
setPlaybackQueueCapabilities:
setDisplayName:
setPlaybackState:
timeIntervalSinceReferenceDate
setPlaybackStateTimestamp:
_onQueue_lastPlayingDate
mergeFrom:
updatePlaybackQueue:notifyObservers:
_onQueue_updatePlaybackQueue:notifyObservers:
contentItems
artwork
width
height
setArtwork:
_onQueue_playbackQueueContentItemsDidChange:
_onQueue_playbackQueueContentItemsArtworkDidChange:
initWithContentItems:
_sortSnapshots:
snapshotsForIsPlaying:
firstObject
sortedArrayUsingComparator:
artworkFileURL
_onQueue_saveNowPlayingItemArtworkURL
artworkAvailable
requestArtworkForContentItems:
absoluteString
imageData
updatePlaybackQueue:
nowPlayingPlayerClient:playerCanBeNowPlayingDidChange:
nowPlayingPlayerClient:isPlayingDidChange:
nowPlayingPlayerClient:pictureInPictureEnabledDidChange:
setPlayerPlaybackState:
nowPlayingPlayerClient:playbackStateDidChange:
nowPlayingPlayerClient:supportedCommandsDidChange:
nowPlayingPlayerClient:playbackQueueDidChange:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:
nowPlayingPlayerClient:playbackQueueContentItemsDidChange:
nowPlayingPlayerClient:playbackQueueArtworkContentItemsDidChange:
setPushStateIsPlaying:
setPushStatePlaybackState:
setPushStatePlayer:
hasNowPlayingData
setPushStateHasNowPlayingData:
isPictureInPictureEnabled
setPushStatePictureInPictureEnabled:
setPushStateCanBeNowPlayingPlayer:
pushStateHasNowPlayingData
stringWithFormat:
initWithName:
pushStatePictureInPictureEnabled
_onQueue_pictureInPictureEnabledDidChanged:
pushStateIsPlaying
pushStatePlaybackState
_onQueue_playbackStateDidChanged:
_onQueue_isPlayingDidChange:
pushStateCanBeNowPlayingPlayer
_onQueue_canBeNowPlayingDidChange:
audioSessionType
mxSessionIDs
pushStatePlayer
audioSessionID
nowPlayingPlayerClient:playerStateDidChange:
artworkIdentifier
contentItemIdentifer
enumerateObjectsUsingBlock:
_onQueue_requestArtworkForContentItems:
initWithContentItem:
initWithIdentifiers:
setArtworkWidth:
setArtworkHeight:
setCachingPolicy:
includeArtwork
xpcClientForPlayerPath:
playbackQueueRequests
subscriptionControllerForPlayerPath:
subscribeToPlaybackQueue:forRequest:
requestIdentifier
setImageData:
setValue:forKey:
playerClientRequestsForPlayerPath:
initFromTransactionName:
daemonClient
setWithCapacity:
null
hasRequest:
requestForSubscribedContentItemIdentifier:
match:
_onQueue_updatePlaybackQueueWithItem:notifyObservers:
postNotificationName:object:userInfo:
unpacketize:completion:
addTransactionCallback:forName:
supportedRemoteControlCommandsData
setSupportedRemoteControlCommandsData:
nowPlayingContentItem
setInferredPlaybackState:
inferredPlaybackState
updatePlaybackState:date:
updateLastPlayingDate:
setCanBeNowPlayingPlayer:
canBeNowPlayingPlayerTimestamp
setCanBeNowPlayingPlayerTimestamp:
playbackQueueCapabilities
nowPlayingState
setPictureInPictureEnabled:
updateClient:
updatePlayer:
artworkUpdatedForContentItems:
snapshotForPlaybackState:
snapshotForIsPlaying:
snapshots
saveNowPlayingArtworkFileURL
lastPlayingDate
subscriptionController
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueue
_playbackQueueCapabilities
_canBeNowPlayingPlayerTimestamp
_playerPlaybackState
_inferredPlayerPlaybackState
_playbackStateHistory
_inFlightArtworkRequests
_scheduledSaveNowPlayingArtworkFileURL
_pictureInPictureEnabled
_canBeNowPlayingPlayer
_hasNowPlayingDataTransaction
_pushStateIsPlaying
_pushStateHasNowPlayingData
_pushStatePictureInPictureEnabled
_pushStateCanBeNowPlayingPlayer
_lastPlayingDate
_subscriptionController
_pushStatePlaybackState
_pushStatePlayer
T@"NSArray",&,N
TB,N,V_pushStateIsPlaying
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_pushStatePlaybackState
T@"MRPlayer",&,N,V_pushStatePlayer
TB,N,V_pushStateHasNowPlayingData
TB,N,V_pushStatePictureInPictureEnabled
TB,N,V_pushStateCanBeNowPlayingPlayer
TB,N
T@"NSDate",C,N
TI,R,N
TI,N
T@"NSData",C,N
T@"MRPlaybackQueue",C,N
T@"MRContentItem",R,N
TQ,N
TB,R,N
Td,R,N
T@"NSDate",R,N,V_lastPlayingDate
T@"MRPlayer",R,N
T@"MRPlayerPath",&,N
T@"MRNowPlayingState",R,N
T@"MRPlaybackQueueSubscriptionController",R,N,V_subscriptionController
pictureInPictureEnabled
TB,N,GisPictureInPictureEnabled
T@"<MRDNowPlayingPlayerClientDelegate>",W,N,V_delegate
_contentItemIdentifer
_artworkIdentifier
T@"NSString",R,N,V_contentItemIdentifer
T@"NSString",R,N,V_artworkIdentifier
_playbackState
TI,R,N,V_playbackState
T@"NSDate",R,N,V_date
playerPlaybackState
playbackStateDescription
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_playerPlaybackState
T@"NSDate",R,N
T@"NSString",R,N
setDispatchQueue:
setLastKnownBluetoothAddress:
_txtDataChanged
setBluetoothAddressChangedHandler:
_initializeBonjourServiceWithDeviceInfo:
deviceInfoForOrigin:queue:completion:
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
stop
activate
publishWithOptions:
invalidate
bonjourRemoteControlService:didAcceptConnection:
initWithInputStream:outputStream:
_txtDataChangedWithUserInfo:
_txtDataChangedWithDeviceInfo:
lastKnownBluetoothAddress
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
localizedModelName
buildVersion
isPairingAllowed
bluetoothAddress
managedConfigurationDeviceIdentifier
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerExternalDeviceConnections
setIncludesPeerToPeer:
start
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
initWithNetServiceType:
netServiceType
_bluetoothClient
_networkService
_started
_netServiceType
_lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDBonjourRemoteControlServiceDelegate>",W,N,V_delegate
T@"NSString",R,N,V_netServiceType
auditToken
initWithConnection:label:
allKeys
_maybeWakeClient
remoteObjectProxy
hostedExternalDeviceConnectionStateDidChange:withError:
verboseHostedExternalDeviceClientLogging
setConnectionState:
setConnectionStateError:
canSendMessage:
hostedExternalDeviceNameDidChange:
setName:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceEndpointDidChange:
setEndpoint:
hostedExternalDeviceEndpoint:volumeCapabilitiesDidChange:forOutputDevice:
outputDeviceVolumeCapabilities
setOutputDeviceVolumeCapabilities:
setVolumeCapabilities:
hostedExternalDeviceEndpoint:volumeDidChange:forOutputDevice:
outputDeviceVolume
setOutputDeviceVolume:
numberWithFloat:
setVolume:
hostedExternalDeviceEndpoint:didAddOutputDevice:
outputDeviceModifications
addOutputDevice:forEndpoint:
hostedExternalDeviceEndpoint:didChangeOutputDevice:
changeOutputDevice:forEndpoint:
hostedExternalDeviceEndpoint:didRemoveOutputDevice:
removeOutputDevice:forEndpoint:
discoveryOutputDevicesChanged:forConfiguration:
discoverySessionConfigurationsResults
setDiscoverySessionConfigurationsResults:
_resumeConnectionWithState:
connectionState
connectionStateError
endpoint
volumeCapabilities
floatValue
volume
addedOutputDevices
changedOutputDevices
removedOutputDevices
anyPlayerPath
notificationRequiresTaskAssertionForPlayerPath:
wakingPlayerPathAssetionDuration
takeAssertion:forReason:duration:
connectionDidResume:
connectionDidInvalidate:
initWithConnection:
discoveryModeForConfiguration:
setDiscoveryMode:forConfiguration:
discoverySessionConfigurations
registeredCallbacks
setRegisteredCallbacks:
notifications
setNotifications:
subscribedPlayerPaths
setSubscribedPlayerPaths:
setDiscoverySessionConfigurations:
pendingClientState
setPendingClientState:
connectionMonitor
setConnectionMonitor:
setXpcClient:
_discoveryModes
_connectionState
_connection
_bundleIdentifier
_registeredCallbacks
_notifications
_subscribedPlayerPaths
_discoverySessionConfigurations
_pendingClientState
_connectionMonitor
_xpcClient
T@"MRDAVHostedExternalDevicePendingClientState",&,N,V_pendingClientState
T@"MRXPCConnectionMonitor",&,N,V_connectionMonitor
T@"MRDMediaRemoteClient",&,N,V_xpcClient
T@"NSXPCConnection",R,N,V_connection
T@"NSString",R,N,V_bundleIdentifier
TQ,N,V_registeredCallbacks
TQ,N,V_notifications
TI,N,V_connectionState
T@"NSArray",C,N,V_subscribedPlayerPaths
T@"NSArray",C,N,V_discoverySessionConfigurations
setOutputDeviceModifications:
_connectionStateError
_name
_endpoint
_volume
_volumeCapabilities
_outputDeviceVolume
_outputDeviceVolumeCapabilities
_outputDeviceModifications
_discoverySessionConfigurationsResults
T@"NSError",&,N,V_connectionStateError
T@"NSString",&,N,V_name
T@"MRAVDistantEndpoint",&,N,V_endpoint
T@"NSNumber",&,N,V_volume
T@"NSNumber",&,N,V_volumeCapabilities
T@"NSMutableDictionary",&,N,V_outputDeviceVolume
T@"NSMutableDictionary",&,N,V_outputDeviceVolumeCapabilities
T@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications",&,N,V_outputDeviceModifications
T@"NSMutableDictionary",&,N,V_discoverySessionConfigurationsResults
initWithString:
indexOfObject:
replaceObjectAtIndex:withObject:
removeObjectAtIndex:
setAddedOutputDevices:
setChangedOutputDevices:
setRemovedOutputDevices:
_addedOutputDevices
_changedOutputDevices
_removedOutputDevices
T@"NSMutableArray",&,N,V_addedOutputDevices
T@"NSMutableArray",&,N,V_changedOutputDevices
T@"NSMutableArray",&,N,V_removedOutputDevices
dictionaryRepresentation
allObjects
initWithPID:audioSessionID:mxSessionIDs:
_pid
_audioSessionID
_mxSessionIDs
Ti,R,N,V_pid
T@"NSNumber",R,N,V_audioSessionID
T@"NSSet",R,N,V_mxSessionIDs
numberWithBool:
initWithBundleID:audioSessionID:isPlaying:
_playing
playing
TB,R,N,GisPlaying,V_playing
weakObjectsHashTable
sharedDataSource
addObserver:
observersForSelector:
nowPlayingApplications
nowPlayingSessions
nowPlayingAudioFormatContentInfos
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
_weakObservers
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_nowPlayingApplicationPID
_nowPlayingAudioFormatContentInfos
_nowPlayingApplicationDisplayID
T@"NSDictionary",R,N,V_nowPlayingAudioFormatContentInfos
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
Ti,R,N,V_nowPlayingApplicationPID
TB,R,N,V_nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsInterrupted
localClient
registerSourceOriginNotifications
registerDestinationOriginCallbacksToRelayToSourceOrigin
initializeDestinationOriginWithSourceOriginData
registerOriginForwarder:
unregisterOriginForwarder:
sourceOrigin
destinationOrigin
_handleVolumeCapabilitiesDidChangeNotification:
_handleApplicationDidRegisterNotification:
_handleApplicationDidUnregisterNotification:
_handleApplicationClientStateDidChangeNotification:
_handleActiveApplicationDidChangeNotification:
_handlePlayerDidRegisterNotification:
_handlePlayerDidUnregisterNotification:
_handlePlayerDidRegisterCanBeNowPlayingNotification:
_handlePlayerDidUnregisterCanBeNowPlayingNotification:
_handlePlayerStateDidChangeNotification:
_handleActivePlayerDidChangeNotification:
_handlePlaybackStateDidChangeNotification:
_handleSupportedCommandsDidChangeNotification:
_handlePlayerPlaybackQueueCapabilitiesDidChangeNotification:
_handlePlayerPlaybackQueueDidChangeNotification:
_handlePlayerPlaybackQueueContentItemsDidChangeNotification:
_handlePlayerPlaybackQueueContentItemArtworkDidChangeNotification:
setResolvedPlayerPath:
performRequestForDestination:completion:
initWithMRError:format:
setPlaybackSessionMigrateRequestCallback:
destinationClient
createLocalizePlayerPath:
hasAuxiliaryProperties
defaultSupportedCommandsForClient:
activePlayerPath
volumeControlCapabilities
defaultPlaybackQueueRequest
localizedPlayerIDFromPlayerPath:
initWithOrigin:destinationOrigin:
playerPathMapping
setPlayerPathMapping:
_sourceOrigin
_destinationOrigin
_destinationClient
_playerPathMapping
T@"MRClient",R,N,V_destinationClient
T@"NSMutableDictionary",&,N,V_playerPathMapping
T@"MROrigin",R,N,V_sourceOrigin
T@"MROrigin",R,N,V_destinationOrigin
initWithDeviceFeatures:
_activeSystemContext
outputDevice
canSetVolume
availableOutputDevices
initWithAVOutputDevice:
uniqueIdentifier
avOutputDevice
setOutputDevice:options:
isSpeakerRoute
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
setUseWeakMatching:
beginSearchWithTimeout:completion:
sharedSystemScreenContext
sharedAudioPresentationOutputContext
setOutputDevices:
_discoverySession
_activeReconnaissanceSessions
iTunesAudioContext
auxiliaryOutputContext
sharedCompanionLinkClient
_onWorkerQueue_connectRemoteControlChannelForSource:destination:destinationGroupUID:session:name:
registerRequest:callback:
sourceUID
destinationOutputDeviceUID
destinationGroupUID
sessionUID
_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:
registerEvent:callback:
_resetPersistedConnections
mr_first:
_connectionForSource:destination:session:
setSourceUID:
setDestinationOutputDeviceUID:
setDestinationGroupUID:
setSessionUID:
setConnectionAttemptDate:
initWithDeviceUID:sessionUID:targetDevice:error:
setLabel:
setConnection:
sendEvent:destination:userInfo:
addObserverForName:object:queue:usingBlock:
setNotificationToken:
rapportRemoteControlService:didAcceptConnection:
_persistConnectionRecordsToDisk
closeWithError:
userDefaults
_writeConnectionRecordsToDisk:
_readConnectionRecordsFromDisk
synchronize
T@"NSUserDefaults",R,N
_onWorkerQueue_disconnectAllRemoteControlChannels
_onWorkerQueue_disconnectRemoteControlChannelForSource:destination:session:
connections
setConnections:
_workerQueue
_client
_connections
T@"MRCompanionLinkClient",&,N,V_client
T@"NSMutableArray",&,N,V_connections
T@"<MRDRapportRemoteControlServiceDelegate>",W,N,V_delegate
encodeObject:forKey:
decodeObjectOfClass:forKey:
notificationToken
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
connectionAttemptDate
_destinationOutputDeviceUID
_destinationGroupUID
_sourceUID
_sessionUID
_connectionAttemptDate
_notificationToken
T@"NSString",&,N,V_destinationOutputDeviceUID
T@"NSString",&,N,V_destinationGroupUID
T@"NSString",&,N,V_sourceUID
T@"NSString",&,N,V_sessionUID
T@"MRRapportTransportConnection",&,N,V_connection
T@"NSDate",&,N,V_connectionAttemptDate
T@"<NSObject>",&,N,V_notificationToken
initWithOutputDeviceUID:
initWithDestination:
setRequestPlaybackState:
setRequestPlaybackQueue:
setRequestClientProperties:
setRequestSupportedCommands:
setRequestLastPlayingDate:
queue
displayMonitor
lockScreenVisible
controlCenterVisible
displayOn
nearbyDevices
setHasTriggered:
setShouldRun:
shouldRun
_onQueue_reevaluateRemoteControlState
controller:didLoadResponse:
controller:playbackStateDidChangeFrom:to:
controller:playbackQueueDidChangeFrom:to:
controller:contentItemsDidUpdate:
controller:contentItemsDidUpdateWithContentItemChanges:
controller:didLoadArtworkForContentItems:
controller:supportedCommandsDidChangeFrom:to:
controller:deviceLastPlayingDateDidChange:
controller:playerLastPlayingDateDidChange:
controller:clientPropertiesDidChangeFrom:to:
controller:playerPathDidChange:
controller:didUpdateResponse:
controllerWillReloadForInvalidation:
controller:didFailWithError:
startObservationIfNeeded
_configureObserver
_configurationForUID:
_handleLayoutDidChangeNotification:
dataSource
setDataSource:
setQueue:
setNearbyDevices:
hasTriggered
invalidated
setInvalidated:
setDisplayMonitor:
_hasTriggered
_shouldRun
_invalidated
_dataSource
_queue
_nearbyDevices
_displayMonitor
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSMutableSet",&,N,V_nearbyDevices
TB,N,V_hasTriggered
TB,N,V_shouldRun
TB,N,V_invalidated
T@"MRDDisplayMonitor",&,N,V_displayMonitor
T@"<MRDProximityControllerDataSource>",W,N,V_dataSource
_init
_handleMediaServerDeath
reloadOutputContexts
sharedAudioPresentationContext
activeOutputContexts
mr_map:
componentsJoinedByString:
inactiveOutputContexts
reservedOutputContexts
externalDeviceServer
remoteControlService
airPlayService
avOutputContext
startContext:
outputContextForOutputDeviceUID:
containsUID:
mr_any:
outputDeviceUIDs
addSharedAudioOutputContext
initWithAVOutputContext:type:
registerForOutputContextNotifications:
_notifyLocalDeviceDidChangeOutputContext
outputDevicesDidChangeNotification:
_handleOutputContextDidAddLocalDevice:
_handleOutputContextDidRemoveLocalDevice:
processOutputContext:
postClientNotificationNamed:
disconnectOutputContextExternalDevices
hostedRoutingService
hostedRoutingController
disconnect:
allSharedAudioOutputContexts
outputContexts
registerCommunicationsChannels
outputContextForOutputDevice:
setActiveOutputContexts:
setReservedOutputContexts:
setInactiveOutputContexts:
serialQueue
setSerialQueue:
_activeOutputContexts
_reservedOutputContexts
_inactiveOutputContexts
T@"NSMutableDictionary",&,N,V_activeOutputContexts
T@"NSMutableDictionary",&,N,V_reservedOutputContexts
T@"NSMutableDictionary",&,N,V_inactiveOutputContexts
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
closeAll
closeForClient:userCancelled:
pinPairingToken
pinPairingDialogDidClose:forClient:userCancelled:
setPinPairingToken:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
_routingDataSourcePickableRoutesDidChange:
cancelSearch
setCallback:
_timeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setTimeoutTimer:
callback
_endSearch
matchesUniqueIdentifier:
_concludeSearchWithRoute:
timeoutTimer
initWithRouteUID:
_searchInProgress
_timeoutInterval
_routeUID
_callback
_timeoutTimer
T@?,C,N,V_callback
T@"NSTimer",&,N,V_timeoutTimer
T@"NSString",R,N,V_routeUID
outputContextDidRemoveLocalDeviceNotification:
outputContextModificationDidBeginNotification:
outputContextModificationDidFinishNotification:
sharedController
registerObserver:
onQueue_commitLocalDeviceIfNeededWithReason:completion:
activeNowPlayingBundleIdentifiers
completionQueue
unsignedIntegerValue
activeTopologyChangeIdentifiers
supportMultiplayerHost
needsCommandRedirection
enqueuedCompletions
setEnqueuedCompletions:
addOutputDevices:initiator:withCallbackQueue:block:
searchForOutputDeviceUID:timeout:reason:queue:completion:
clusterController:clusterStatusDidChange:
clusterController:clusterTypeDidChange:
nowPlayingSessionDidStartForBundleIdentifier:completion:
nowPlayingSessionDidStopForBundleIdentifier:completion:
setActiveNowPlayingBundleIdentifiers:
setActiveTopologyChangeIdentifiers:
setCompletionQueue:
_activeNowPlayingBundleIdentifiers
_activeTopologyChangeIdentifiers
_completionQueue
_enqueuedCompletions
T@"NSMutableSet",&,N,V_activeNowPlayingBundleIdentifiers
T@"NSMutableSet",&,N,V_activeTopologyChangeIdentifiers
T@"NSObject<OS_dispatch_queue>",&,N,V_completionQueue
T@"NSMutableArray",&,N,V_enqueuedCompletions
_clientDidRegisterCanBeNowPlaying:
_clientDidUnregisterCanBeNowPlaying:
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
setQueuedInitiatePlaybackMessages:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
_handleSupportedAPIsDidChangeForClient:
dataWithPropertyList:format:options:error:
_messageRequiresMediaServerBlessing:
initWithType:pid:bundleID:name:
_messageCanLaunchApp:
_takeProcessAssertionForClient:withReason:
indexPathData
_scheduleEndProcessAssertionForClient:
initWithBytes:length:
localizedDescription
postClientNotificationNamed:userInfo:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
initWithBundleID:indexPathData:
_invalidate
clientInterface
setRemoteObjectInterface:
serviceInterface
setExportedInterface:
exportedInterface
protocol
weakProxyWithObject:protocol:
setExportedObject:
setInterruptionHandler:
setInvalidationHandler:
resume
postNotificationName:object:
_notifyAvailableEndpointsDidChange:
_notifyAvailableOutputDevicesDidChange:
devicePresenceDetected
setEnableThrottling:
availableDistantOutputDevices
_resumeConnection
hostedDiscoverySessionDidInvalidate:
availableOutputDevicesDidChange:
verboseHostedDiscoverySessionLogging
availableEndpointsDidChange:
getDevicePresenceDetectedWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:enableThrottling:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
hostedRoutingController:endpointsDidChange:
hostedRoutingController:outputDevicesDidChange:forFeature:
initWithConnection:hostedRoutingController:
transaction
setTransaction:
enableThrottling
updatedEndpoints
setUpdatedEndpoints:
updatedOutputDevices
setUpdatedOutputDevices:
pendingEndpoints
setPendingEndpoints:
pendingOutputDevices
setPendingOutputDevices:
endpointsDelayed
setEndpointsDelayed:
devicesDelayed
setDevicesDelayed:
lastDiscoveryModeEnableDate
setLastDiscoveryModeEnableDate:
lastDiscoveryModeDisableDate
setLastDiscoveryModeDisableDate:
_enableThrottling
_endpointsDelayed
_devicesDelayed
_hostedRoutingController
_transaction
_updatedEndpoints
_updatedOutputDevices
_pendingEndpoints
_pendingOutputDevices
_lastDiscoveryModeEnableDate
_lastDiscoveryModeDisableDate
T@"MROSTransaction",&,N,V_transaction
TB,N,V_enableThrottling
T@"NSArray",&,N,V_updatedEndpoints
T@"NSArray",&,N,V_updatedOutputDevices
T@"NSArray",&,N,V_pendingEndpoints
T@"NSArray",&,N,V_pendingOutputDevices
TB,N,V_endpointsDelayed
TB,N,V_devicesDelayed
T@"NSString",&,N,V_bundleIdentifier
T@"NSDate",&,N,V_lastDiscoveryModeEnableDate
T@"NSDate",&,N,V_lastDiscoveryModeDisableDate
T@"MRDHostedRoutingController",R,N,V_hostedRoutingController
T@"<MRDAVHostedDiscoverySessionDelegate>",W,N,V_delegate
initWithQueue:
unregisterAllVirtualVoiceInputDevices
registeredToNowPlayingUpdates
registeredToOutputDeviceUpdates
registeredToVolumeUpdates
registeredKeyboardUpdates
registeredToSystemEndpointUpdates
supportedMessages
lastSupportedMessageType
destinationEndpoint
debugName
numberWithUnsignedLongLong:
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
initWithFirst:second:
first
second
requestConnectedDestinationEndpoint:
localizeDestinationPlayerPath:completion:
options
connectToExternalDeviceWithOptions:userInfo:completion:
requestDestinationEndpoint:
setDestinationEndpoint:
discoverGroup:reason:queue:completion:
discoverOutputDevice:reason:queue:completion:
deviceInfoForOrigin:
WHAIdentifier
disconnectWithError:
label
isGizmo
_wantsLibraryCommands
command
shortValue
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
endpointDidConnect:
endpointDidDisconnect:
endpointDidDisconnect:withError:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
flushPendingPlaybackSessionMigrateEvents:
localizeDestinationOrigin:completion:
isDestinationLocal
filterSupportedCommands:
credentials
setCredentials:
sessionPeer
serverDelegate
setServerDelegate:
setOptions:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_pendingPlaybackSessionMigrateEvents
_destinationEndpoint
_options
_credentials
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
T@"MRAVEndpoint",&,N
T@"MRPasscodeCredentials",&,N,V_credentials
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
T@,&,N,V_pinPairingToken
T@"NSString",C,N,V_destinationOutputDeviceUID
T@"NSString",C,N,V_destinationGroupUID
destinationLocal
TB,R,N,GisDestinationLocal
T@"<MRDExternalDeviceServerClientConnectionDelegate>",W,N,V_serverDelegate
TI,N,V_options
anonymousListener
connectionType
externalDeviceForEndpoint:
setHostedRouteDiscoveryMode:
setHostedDiscoverySessions:
setEndpoints:
availableExternalDevices
setHostedExternalDevices:
setDiscoverySession:
listener:shouldAcceptNewConnection:
xpcEndpoint
endpointForOrigin:
endpointForDeviceUID:
_anonymousListener
_hostedDiscoverySessions
T@"NSXPCListenerEndpoint",R,N
supportRapportRemoteControlTransport
resetPersistedConnections
configurationWithEndpointFeatures:
setAlwaysAllowUpdates:
setRoutingContextUID:
setPopulatesExternalDevice:
initWithConfiguration:
_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:
isPrimaryLocalDevice
supportsMultiplayer
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:
_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:
valueForKey:
hostDeviceClass
initWithOutputDevice:
supportRapportRemoteControlConnection
supportsRapportRemoteControlTransport
initWithOutputDevice:proxyOutputDevice:
groupID
initWithOutputDevice:groupID:connectionType:
discoverCompanionDevices
isLocalDevice
setAirPlayGroupID:
descriptor
initWithDescriptor:
clusterStatus
validOutputDevicesForOutputDevices:
isProxyGroupPlayer
array
hostedExternalDeviceForEndpointIdentifier:
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:
externalDeviceListenerEndpoint
setExternalDeviceListenerEndpoint:
_logEndpointsChanged:oldEndpoints:
_onQueue_reloadWithOutputDevices:
_onQueue_reloadEndpoints
isEqualToArray:
changeDescriptionTo:keyBlock:isUpdatedBlock:descriptionBlock:
createDiscoverySession
makeEndpointWithOutputDevices:options:
_onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:
discoverySession
T@"MRAVConcreteRoutingDiscoverySession",&,D,N
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
timeIntervalSince1970
expirationDate
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
_dbHandle
_tokenRecords
_path
T@"NSString",R,N,V_path
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
T@"NSDictionary",R,N,V_route
TB,R,N,V_canBeDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
_handlePersonalDeviceChangeNotification:
_onQueue_restoreState
_onQueue_recalculateStateForReason:
personalDeviceUIDs
personalDeviceState
personalDeviceLockScreenTimeout
setWithArray:
isEqualToSet:
setPersonalDeviceWasRecentlyAttached:
setCurrentPersonalDeviceUIDs:
_onQueue_beginTimerWithInterval:
currentPersonalDeviceUIDs
setPersonalDeviceState:
overrideTimer
personalDeviceControllerStateDidChange:
setOverrideTimer:
personalDeviceWasRecentlyAttached
_personalDeviceWasRecentlyAttached
_currentPersonalDeviceUIDs
_overrideTimer
T@"NSSet",&,N,V_currentPersonalDeviceUIDs
T@"MSVPersistentTimer",&,N,V_overrideTimer
TB,N,V_personalDeviceWasRecentlyAttached
T@"<MRDPersonalDeviceControllerDelegate>",W,N,V_delegate
decodeEntries
_registerNotifications
_registerCompanionLinkHandlers
lastObject
_handleSetNearbyDevicesToRemoteControlMessage:fromClient:
sharedIDSCompanionLinkClient
initWithDictionaryRepresentation:
_addEntry:
perform:completion:
_handleLocalPlaybackBeganNotification:
_maybeMostRecentlyPlayedDeviceChanged:
notifyDevicesInHomeThatPlaybackStarted
_shouldSendCompanionLinkMessage
sendEventToHome:userInfo:
sendPlaybackSessionUpdateToCompanionCoalesceInterval
_maybeSendPlaybackStateMessageToCompanion
sendEvent:toDevicesOfHomeUser:userInfo:
supportLastPlayingDevice
setCurrentPlaybackSessionTypes:
setSupportedPlaybackSessionTypes:
setCurrentPlaybackSessionIdentifier:
setIsPlaying:
setLastPlayingDate:
setLastNotPlayingDate:
setContentItem:
setDeviceInfo:
addEntriesFromDictionary:
sendLastPlayingDeviceToHome
sendEventToCompanion:userInfo:
encodeEntries
lastPlayingDeviceThresholdInterval
sortUsingComparator:
mostRecentDeviceUID
lastSentEntry
setLastSentEntry:
entries
setEntries:
setUserDefaults:
sendingPlaybackStateToCompanion
setSendingPlaybackStateToCompanion:
_sendingPlaybackStateToCompanion
_lastSentEntry
_entries
T@"MRDExternalDeviceHomeServerRecentlyPlayedEntry",&,N,V_lastSentEntry
T@"NSMutableArray",&,N,V_entries
T@"NSUserDefaults",&,N,V_userDefaults
TB,N,V_sendingPlaybackStateToCompanion
isEqualToDate:
isAirPlayActive
contentItem
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
setIncludeMetadata:
lastNotPlayingDate
setDictionaryRepresentation:
_isPlaying
_lastNotPlayingDate
_deviceInfo
_currentPlaybackSessionTypes
_supportedPlaybackSessionTypes
_currentPlaybackSessionIdentifier
_contentItem
_dictionaryRepresentation
TB,N,V_isPlaying
T@"NSDate",&,N,V_lastPlayingDate
T@"NSDate",&,N,V_lastNotPlayingDate
T@"MRDeviceInfo",&,N,V_deviceInfo
T@"NSArray",&,N,V_currentPlaybackSessionTypes
T@"NSArray",&,N,V_supportedPlaybackSessionTypes
T@"NSString",&,N,V_currentPlaybackSessionIdentifier
T@"MRPlayerPath",&,N,V_playerPath
T@"MRContentItem",&,N,V_contentItem
T@"NSDictionary",&,N,V_dictionaryRepresentation
initWithCString:encoding:
allowList
_query:
transactionWaitDurationOnOutOfMemory
_transactionEnded
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
_calculateMemory
outOfMemoryWaitDuration
_processMessage:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
send:toConnection:completion:
cancel
_bytesInUse
_taskAssertion
T@"<MRTransactionDelegate>",W,N,V_delegate
TQ,R,N,V_name
T@"MRPlayerPath",R,N,V_playerPath
initializeServer
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
setTransactions:
setUsedTransactionMemory:
setAllowedTransactionMemory:
setTransactionWaitDuration:
adjustMemory:
handleContentItemTransaction:packets:group:
handlePlaybackQueueRequestTransaction:packets:group:
sendContentItemTransaction:request:playerPath:
_sendContentItemTransaction:request:playerPath:
archivedDataWithRootObject:requiringSecureCoding:error:
setIdentifier:
setUserData:
initWithData:forKey:
sendContentItemTransactionWithPlaybackQueue:request:playerPath:
transactions
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
T@"NSMutableArray",R,N,V_transactions
userData
T@"<MRDPinPairingDialogDelegate>",W,N,V_delegate
setLocalizedModelName:
networkIdentifier
setManagedConfigurationDeviceIdentifier:
setBuildVersion:
currentProtocolVersion
setProtocolVersion:
sharedConnection
effectiveBoolValueForSetting:
setPairingAllowed:
deviceClass
setDeviceClass:
setTightSyncUID:
clusterLeaderUID
setProxyGroupPlayer:
setSenderDefaultGroupUID:
setGroupName:
setGroupLeader:
airplayActive
setAirPlayActive:
setDeviceUID:
setClusterID:
setClusterLeaderID:
setClusterType:
useClusterDevices
setClusterAware:
setRoutingContextID:
tightSyncUID
logicalDeviceID
setGroupLogicalDeviceCount:
setGroupedDevices:
setSupportsExtendedMotion:
useExternalDeviceSystemPairing
setSupportsSystemPairing:
infoDictionary
setBundleVersion:
_readDeviceInfo
setGroupUID:
airPlayGroupID
setAirPlayGroupUID:
setSystemMediaApplication:
setSystemPodcastApplication:
setSystemBooksApplication:
setAirPlayReceivers:
setSupportsSharedQueue:
setSharedQueueVersion:
setSupportsACL:
setSupportsMultiplayer:
stringByAppendingPathComponent:
dataWithContentsOfFile:
unarchivedObjectOfClass:fromData:error:
writeToFile:options:error:
_deviceInfoFilePath
_deviceInfoArchiveClasses
unarchivedObjectOfClasses:fromData:error:
_readLegacyDeviceInfoIdentifier
_writeDeviceInfo:toPath:
currentDeviceInfo
initWithEndpointFeatures:
propertyListWithData:options:format:error:
_onWorkerQueue_connectRemoteControlChannelForDestination:session:options:message:
setMessageHandler:forType:
_handleCompanionDeviceConnectedNotification:
_handleCompanionDeviceDisconnectedNotification:
_handleDeviceInfoDidChangeNotification:
_handleOutputDevicesDidChangeNotification:
sharedLocalEndpoint
_onWorkerQueue_initializeDiscoveryChannel
_onWorkerQueue_connectDiscoveryChannelWithReason:
_onWorkerQueue_disconnectDiscoveryChannel
isConnected
_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:
discoveryChannel
_sendEndpoint:toClient:options:
_onWorkerQueue_sendEndpoint:toClient:options:
handleSetConnectionStateMessage:forClient:
handleSetDiscoveryModeMessage:forClient:
mode
setPriority:
setWaking:
exportEndpoint:
initWithOutputDevices:configuration:
setTransportOptions:
resetConnection
initWithConnection:type:destination:session:
initWithAllSupportedMessages
setSupportedMessages:
_onWorkerQueue_disconnectRemoteControlChannelsForDestination:error:
setDestination:
protobufData
sendMessage:type:destination:session:options:priority:
idsRemoteControlService:didAcceptConnection:
outputDeviceWithUID:
_addAuthorizationCallbackForOutputDevice:destination:session:
_removeAuthorizationCallbackForOutputDevice:
replyWithData:priority:
primaryID
initWithRoute:inputType:
protocolMessageWithProtobufData:error:
response
sendMessage:type:destination:session:options:priority:response:
clientConnection:didReceiveMessage:
clientDidDisconnect:error:
stream:handleEvent:
isDiscoveryChannelConnected
runLoop
_discoveryChannel
_discoveryChannelConnectionTimer
_remoteControlConnections
_sendEndpointScheduled
_lastSentEndpoint
_lastSentEndpointDate
_configuration
_isDiscoveryChannelConnected
_runLoop
T@"MRDIDSServerClientConnection",R,N
TB,R,N,V_isDiscoveryChannelConnected
T@"NSRunLoop",R,N,V_runLoop
T@"<MRDIDSRemoteControlServiceDelegate>",W,N,V_delegate
destination
_destination
T@"NSString",&,N,V_destination
T@"MRExternalDeviceTransportConnection",&,N,V_connection
valueWithBytes:objCType:
objCType
getValue:
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
isLegacyNowPlayingInfoRequest
hasRequestedLegacyNowPlayingInfo
setHasRequestedLegacyNowPlayingInfo:
addRequest:
rangeContainsNowPlayingItem
location
setLocation:
setLength:
hasLocation
hasLength
createPlaybackQueueFromCacheForRequest:fromNowPlayingClient:toXpcClient:
sendPlaybackQueueResponse:forRequest:withMessage:fromNowPlayingClient:toXpcClient:completion:
relayRequest:withMessage:toNowPlayingClient:backToXpcClient:completion:
_cachingPolicyForRequest:forPlayerPath:
originClient
hasArtworkAvailable
removeRequest:
cachingPolicy
handlePlaybackQueueRequest:fromClient:
originClientRequestsForPlayerPath:
_deviceInfoDidChange
_outputContextDevicesDidChange
_outputContextDeviceDidChange
canBeClusterMember
_otherDeviceInfoDidChange:
_deviceInfoDidChangeWithDeviceInfo:
deviceInfoDataSource:deviceInfoDidChange:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_gestaltNotificationToken
_airplayPerfsNotifyToken
_airplayActiveNotifyToken
_airplayAdvertisingNotifyToken
_deviceInfoReloadScheduled
_localEndpoint
T@"MRDeviceInfo",R,N
T@"<MRDDeviceInfoDataSourceDelegate>",W,N,V_delegate
localPlaybackState
localLastPlayingDate
_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:
_registerCallbacks
defaultSupportedCommands
compare:options:
_playerPathForNowPlayingClient:
nowPlayingOriginClient:deviceInfoDidChange:previousDeviceInfo:
nowPlayingOriginClient:currentRouteVolumeDidChange:
nowPlayingOriginClient:currentRouteVolumeControlCapabilitiesDidChange:
setVolumeControlCapabilities:
existingNowPlayingClientForClient:
canBeNowPlayingForPlayerClient:
_onQueue_reevaluateStateWithReason:
nowPlayingOriginClient:applicationActivityDidEnd:
_onQueue_updateActivityStatus:
nowPlayingOriginClient:applicationActivityDidBegin:
creatorProcessID
nowPlayingClientForPlayerPath:
existingNowPlayingClientForPlayerPath:
_onQueue_addNowPlayingClient:
_onQueue_removeNowPlayingClient:
removePlayerClientForPlayer:
nowPlayingOriginClient:clientDidUnregister:
setOverrideClient:
setExplicitNowPlayingClient:
setInferredNowPlayingClient:
_onQueue_calculateComputedNowPlayingClient
setComputedNowPlayingClient:
setActivity:
updateDefaultSupportedCommandsData:forClient:
defaultSupportedCommandsDataForClient:
defaultSupportedCommandsData
isEligibleForSpatialization
_onQueue_reloadInferredStateFromDataSource:reason:
nowPlayingOriginClientDidChangeAudioFormatContentInfo:
_onQueue_calculateInferredNowPlayingClient
_onQueue_calculateInferredPlaybackStateForPlayer:
_shouldHandleNotification:
laterDate:
_onQueue_maybeSavePlaybackStateForNotification:
existingNowPlayingClientForPid:
computeNowPlayingApplication
nowPlayingClientForClient:
mostRecentPlayers
nowPlayingApplicationTimeout
supportNowPlayingPIP
intersectsSet:
inferredNowPlayingClient
_stateFromDataSource:
_onQueue_calculateActiveNowPlayingClient
nowPlayingOriginClient:activePlayerPathDidChange:withPlaybackState:
_onQueue_calculateActiveNowPlayingPlayerClients
nowPlayingOriginClient:activePlayerClientsDidChange:
status
setStatus:
nowPlayingOriginClient:applicationActivityStatusDidChange:
nowPlayingOriginClient:clientDidRegister:
playerClientForPlayer:
_handleNowPlayingAppMaybeDidChange:
nowPlayingOriginClientPlaybackDidTimeout:
setLocalPlaybackState:
setLocalLastPlayingDate:
_handlePlayerIsPlayingDidChange:
_handleOriginIsPlayingDidChange:
_handlePlayerPropertiesDidChange:
_handlePlayerPictureInPictureEnabledDidChange:
_handleActivePlayerDidChange:
_handleNowPlayingApplicationDidUnregisterCanBeNowPlaying:
_handlePlayerDidRegister:
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingAudioFormatContentInfosDidChange:
initWithOrigin:
deviceInfoData
flipVolumeControlCapabilityFlag:enable:
isActivityActive
existingNowPlayingClientForDisplayID:
removeAllClients
removeNowPlayingClientForClient:
clearDefaultSupportedCommandsData
nowPlayingAudioFormatContentInfo
setNowPlayingDataSource:
setDeviceInfoDataSource:
setDeviceInfoData:
activity
overrideClient
explicitNowPlayingClient
deviceInfoDataSource
activePlayerClients
computedNowPlayingClient
_nowPlayingClients
_volumeControlCapabilities
_explicitNowPlayingClient
_activeNowPlayingClient
_activeNowPlayingClientTransaction
_defaultSupportedCommandsData
_origin
_deviceInfoData
_activity
_overrideClient
_nowPlayingDataSource
_deviceInfoDataSource
_registrationDate
_activePlayerClients
_computedNowPlayingClient
_inferredNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_computedNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_inferredNowPlayingClient
T@"MROrigin",R,N,V_origin
T@"MRPlayerPath",R,N
Tf,N
T@"NSData",&,N,V_deviceInfoData
T@"MRMutableApplicationActivity",&,N,V_activity
T@"MRDMediaRemoteClient",&,N,V_overrideClient
T@"MRDNowPlayingClient",&,N,V_explicitNowPlayingClient
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
T@"MRDDeviceInfoDataSource",&,N,V_deviceInfoDataSource
T@"NSDate",R,N,V_registrationDate
T@"MRDNowPlayingClient",R,N
T@"NSArray",R,N,V_activePlayerClients
T@"MRNowPlayingAudioFormatContentInfo",R,N
T@"<MRDNowPlayingOriginClientDelegate>",W,N,V_delegate
isEqualToDictionary:
extendedInfo
indexOfObjectPassingTest:
matchesUID:
initWithDictionary:
isPicked
canBeDefaultSystemRoute
_routeDescription
stopReceivingUpdatesForSource:
_setReceiveUpdates:forSource:
_shouldNotifyChange:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
stateObserver:didReceiveSupportedCommandsChange:
stateObserver:didReceivePlayStateChange:
stateObserver:didReceivePlaybackQueueChange:
stateObserver:didReceivePlaybackQueueCapabilitiesChange:
stateObserver:didReceiveContentItemChange:playerPath:
stateObserver:didReceiveContentItemArtworkChange:playerPath:
stateObserver:didReceiveApplicationClientStateDidChange:
stateObserver:didReceivePlayerStateDidChange:
stateObserver:didReceiveClientDidUnregister:
stateObserver:didReceivePlayerDidUnregister:
stateObserver:didReceiveVolumeControlCapabilitiesChange:playerPath:
stateObserver:didReceiveDeviceInfoDidChange:playerPath:
stateObserver:didReceiveDefaultSupportedCommandsChange:playerPath:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_handleNowPlayingClientDidChange:
_addNowPlayingNotification:selector:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleContentItemsChanged:
_handleContentItemArtworkChanged:
_handleApplicationClientStateChanged:
_handlePlayerStateChanged:
_handleRemoveClient:
_handleRemovePlayer:
_handleDeviceInfoChanged:
_handleDefaultSupportedCommandsChanged:
_removeNowPlayingNotifications
_handleVolumeAvailabilityDidChangeNotification:
removeObserver:name:object:
beginReceivingUpdatesForSource:
_coalescingNowPlayingUpdates
_coalescingArtworkUpdates
_observedNowPlayingNotifications
_observedVolumeControlNotificationToken
_registeredForNowPlayingCount
_registeredForVolumeAvailabilityCount
T@"<MRDNowPlayingStateObserverDelegate>",W,N,V_delegate
_avSessionMediaServicesResetNotification:
_registerAVSystemControllerNotifications
_oddsShimDataSource
_mediaServerController
attributeForKey:
currentRouteHasVolumeControl
uppercaseString
valueForKeyPath:
didCancelRoutePicking:
_notifyDelegateRoutesDidChange
_postCurrentRouteHasVolumeControlDidChangeNotification:
_unregisterAVSystemControllerNotifications
_currentRouteHasVolumeControlDidChangeNotification:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_descriptionForDiscoveryMode:
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
initWithOptions:
sharedMonitor
_handleElectedPlayerDidChangeNotification:
supportLockscreenPlatterDisplayForPersonalDevice
_onQueue_reevaluateShouldShowLockScreenForReason:
lockScreenController:lockScreenWidgetActiveDidChange:
setPreviousPlayerPath:
previousPlayerPath
isLockScreenWidgetVisible
lockScreenController:playerPathDidChange:
_onSerialQueue_restoreElectedPlayer
_onQueue_calculateShouldShowLockScreenForReason:
setAssertion:
personalDeviceController
contentController
lockScreenPlatterHasContent
lockScreenContentControllerStateDidChange:
isLockScreenWidgetActive
assertion
electedPlayerPath
setElectedPlayerPath:
eventType
setEventType:
setPersonalDeviceController:
setContentController:
_playerResult
_previousPlayerPath
_playerPathInvalidationToken
_previousPlayerPathInvalidationToken
_timer
_assertion
_electedPlayerPath
_eventType
_personalDeviceController
_contentController
T@"MRDLockScreenAssertion",&,N,V_assertion
T@"MRPlayerPath",&,N,V_electedPlayerPath
T@"MRPlayerPath",&,N,V_previousPlayerPath
Tq,N,V_eventType
T@"MRDPersonalDeviceController",&,N,V_personalDeviceController
T@"MRDLockScreenContentController",&,N,V_contentController
T@"<MRDLockScreenControllerDelegate>",N,V_delegate
lockScreenWidgetActive
TB,R,N,GisLockScreenWidgetActive
lockScreenWidgetVisible
TB,R,N,GisLockScreenWidgetVisible
createAssertion
delayCreateAssertion
acquireContentProviderAssertionForType:slot:identifier:errorHandler:
T@"SBSLockScreenContentAssertion",&,N,V_assertion
remoteDeviceIdleDisconnectionInterval
_initialize
registerForChanges
setDeviceState:
_onQueue_evaluateShouldDisconnectWithReason:
unregisterForChanges
_handleActiveSystemEndpointChangedNotification:
deviceState
hasPlayedRecently
isMemberOfActiveSystemEndpoint
disconnectTimer
disconnectInterval
pendingDisconnectDate
dateByAddingTimeInterval:
setPendingDisconnectDate:
disconnectOrigin:
timerWithInterval:queue:block:
setDisconnectTimer:
_adjustPlaybackTimerIfNeeded
playbackTimer
recentlyPlayingInterval
setPlaybackTimer:
lockScreenForegrounded
controlCenterForegrounded
systemEndpointController
activeSystemEndpointUID
originClientForGroupLeaderOfDeviceUID:
initWithDataSource:delegate:
_disconnectTimer
_deviceState
_disconnectInterval
_recentlyPlayingInterval
_pendingDisconnectDate
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"MSVTimer",&,N,V_playbackTimer
T@"MSVTimer",&,N,V_disconnectTimer
TQ,N,V_deviceState
Td,R,N,V_disconnectInterval
Td,R,N,V_recentlyPlayingInterval
T@"NSDate",&,N,V_pendingDisconnectDate
T@"<MRDConnectionLifetimeControllerDataSource>",W,N,V_dataSource
T@"<MRDConnectionLifetimeControllerDelegate>",W,N,V_delegate
_initializeExternalDevice:
isPersonalRoute
setUniqueIdentifier:
_externalDeviceClientDidInvalidate:
hostName
setHostName:
port
setHostPort:
isUsingSystemPairing
setUsingSystemPairing:
isPaired
currentConnection
_externalDeviceClientForConnection:
_reloadHostedExternalDeviceCallbacks
_reloadHostedExternalDeviceNotifications
_reloadHostedExternalDeviceSubscribedPlayerPaths
connectWithOptions:clientBundleIdentifier:userInfo:
unpair
_onSerialQueue_endpointSupportsVolumeControl:
setOutputDeviceVolume:outputDeviceUID:queue:completion:
wantsVolumeNotifications
outputDeviceForUID:
isVolumeControlAvailable
outputDeviceVolume:queue:completion:
outputDeviceVolumeControlCapabilities:queue:completion:
setListeningMode:outputDeviceUID:queue:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:
sendCustomData:withName:
ping:callback:withQueue:
sendButtonEvent:
personalOutputDevices
setDiscoveryModeForConfiguration:
_allExternalDeviceClients
_handleMaybeCanMigrateToLocalEndpointDidChange:
lifetimeController
remoteDeviceIdleDisconnection
setLifetimeController:
activeTelevisionRouteID
deviceIsActiveTelevision:
_processCanMigrateToLocalEndpointEvent:timestamp:error:
sharedLocalEndpointForRoutingContextWithUID:
canMigrateToEndpoint:queue:completion:
_reloadEndpoint
_maybePostVolumeDidChange:outputDevice:
_maybePostVolumeControlCapabilitiesDidChange:outputDevice:
_maybePostEndpointDidAddOutputDevice:
_maybePostEndpointDidChangeOutputDevice:
_maybePostEndpointDidRemoveOutputDevice:
removeAllOutputDevices
_mutableExternalDeviceClientsWithRegisteredCallbacks:
setDistantPersonalOutputDevices:
_onSerialQueue_reevaluateVolumeControlCapabilitiesForEndpoint:
_mutableExternalDeviceClientsWithRegisteredNotification:
_postVolumeControlCapabilitiesDidChange:endpoint:outputDevice:
_postVolumeDidChange:endpoint:outputDevice:
localizedName
_userInfoFromEndpoint:outputDevice:
isMediaRemoteDaemon
postClientNotificationNamed:userInfo:predicate:
setConnectionRecoveryBehavior:
initWithUniqueIdentifier:
setConnectionStateCallback:withQueue:
setDiscoveryOutputDevicesChangedCallback:
setUseOutputDeviceCache:
externalOutputContext
updateOutputDevices:
setOutputDevicesUpdatedCallback:withQueue:
removeOutputDevices:
setOutputDevicesRemovedCallback:withQueue:
useOutputDeviceCache
updateVolume:outputDeviceUID:
setVolumeChangedCallback:withQueue:
updateVolumeControlCapabilities:outputDeviceUID:
setVolumeControlCapabilitiesCallback:withQueue:
discoverySessionWithConfiguration:
addOutputDevicesChangedCallback:
_handleExternalDeviceConnectionDidChange:
outputContextDataSourceOutputDeviceDidChangeVolume:
outputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilities:
outputContextDataSourceDidAddOutputDevice:
outputContextDataSourceDidChangeOutputDevice:
outputContextDataSourceDidRemoveOutputDevice:
setNameCallback:withQueue:
setCustomDataCallback:withQueue:
setWantsSystemEndpointNotifications:
addObjectsFromArray:
setVolumeCallback:withQueue:
_endpointShouldNotifyClientsOfTopologyChanges:
_onSerialQueue_endpointShouldPostVolumeNotifications:outputDevice:
_onSerialQueue_isEndpointsDesignatedGroupLeader:
designatedGroupLeader
groupContainsGroupLeader
isEqualToOrderedSet:
_endpointIsSolo:
logicalOutputDeviceCount
expanseManagerTelevisionDidJoinSession:
expanseManagerTelevisionDidLeaveSession:
expanseManagerDidJoinExpanseSession:
expanseManagerDidLeaveExpanseSession:
T@"MROrigin",R,N
getPersonalOutputDevices:
getExternalDeviceMetadataWithCompletion:
getExternalDeviceIsPairedWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
connectWithOptions:userInfo:
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
outputDeviceVolumeControlCapabilities:withCompletion:
setListeningMode:outputDeviceUID:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterDeviceUIDs:removingClusterDeviceUIDs:settingClusterDeviceUIDs:completion:
pingWithTimeout:callback:
sendButtonEventWithUsagePage:usage:down:
T@"NSArray",C,N
initWithExternalDevice:
externalDeviceClients
tombstone
_resetExternalDevice:
xpcListener
setXpcListener:
externalDeviceCallbackQueue
setExternalDeviceCallbackQueue:
mutableExternalDeviceClients
setMutableExternalDeviceClients:
tombstoned
setTombstoned:
silentDiscoverySession
setSilentDiscoverySession:
canMigrateToLocalEndpointError
setCanMigrateToLocalEndpointError:
canMigrateEvaluationTimestamp
setCanMigrateEvaluationTimestamp:
_useOutputDeviceCache
_tombstoned
_externalDevice
_xpcListener
_externalDeviceCallbackQueue
_mutableExternalDeviceClients
_externalOutputContext
_silentDiscoverySession
_canMigrateToLocalEndpointError
_lifetimeController
_canMigrateEvaluationTimestamp
T@"NSXPCListener",&,N,V_xpcListener
T@"NSObject<OS_dispatch_queue>",&,N,V_externalDeviceCallbackQueue
T@"NSMutableSet",&,N,V_mutableExternalDeviceClients
T@"MRExternalOutputContextDataSource",R,N,V_externalOutputContext
T@"MRAVDistantEndpoint",R,N,V_endpoint
TB,N,V_useOutputDeviceCache
TB,N,V_tombstoned
T@"MRAVRoutingDiscoverySession",&,N,V_silentDiscoverySession
T@"NSError",&,N,V_canMigrateToLocalEndpointError
T@"MRDConnectionLifetimeController",&,N,V_lifetimeController
T@"NSDate",&,N,V_canMigrateEvaluationTimestamp
T@"MRExternalDevice",R,N,V_externalDevice
sharedOutputContextController
registerNotifications
transactionWaitDurationOnNetworkSend
_activeSystemEndpointDidChangeNotification:
endpointDidAddOutputDeviceNotification:
endpointDidRemoveOutputDeviceNotification:
endpointVolumeDidChangeNotification:
endpointVolumeControlCapabilitiesDidChangeNotification:
cryptoSession
_handleClientConnection:
supportedProtocolMessages
_verifyClientVersionCompatibility:withError:
encryptionType
cryptoEnabled
_handleDeviceInfoRequest:fromClient:
_handleCryptoPairingMessage:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleGetRemoteTextInputSessionMessage:fromClient:
_handleRemoteTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
initWithConnectionState:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeDevice:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
_handleModifyOutputContextRequestMessage:fromClient:
_handleGetVolumeMessage:fromClient:
_handleSetVolumeMessage:fromClient:
_handleGetVolumeControlCapabilitiesMessage:fromClient:
_handlePlaybackSessionRequestMessage:fromClient:
_handlePlaybackSessionMigrateRequestMessage:fromClient:
_handlePlaybackSessionMigrateBeginMessage:fromClient:
_handlePlaybackSessionMigrateEndMessage:fromClient:
_handleUpdateActiveSystemEndpointMessage:fromClient:
_handleSetDiscoveryModeMessage:fromClient:
_handleSetListeningModeMessage:fromClient:
replyWithMessage:
_disconnectClient:withError:
_sendStateUpdateMessageFromPlayerPath:source:handler:
initWithDeviceInfo:
initWithClient:
isSupported:
addMessage:
_addSubscribedStateToMessage:forClient:originClient:
_addSubscribedStateToMessage:forClient:nowPlayingClient:
_addSubscribedStateToMessage:forClient:nowPlayingClient:playerClient:
range
defaultPlaybackQueueRequestWithRange:
clients
containsArtwork
copyWithoutArtwork
initWithNowPlayingState:
filteredContentItemsBySubscriptionsForContentItems:
initWithContentItems:forPlayerPath:
supportsSharedQueue
supportedCommands
sharedQueueVersion
playbackStateTimestamp
initWithCapabilities:
initWithDefaultSupportedCommands:forPlayerPath:
_clientForPairingSession:
initWithPairingData:status:
shouldLogPairingSetupCode
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
exportOutputDevice:endpoint:
_createLocalizedOutputDevice:forClient:endpoint:
setIsVolumeControlAvailable:
setHasIsVolumeControlAvailable:
setHasVolume:
initWithSkeleton:
_createLocalizedOutputDevices:forClient:endpoint:
_createVolumelessOutputDevices:
initWithOutputDevices:
_createSkeletonOutputDevices:
initWithOutputDeviceUIDs:
_addToMessage:withAllClusterDeviceMembers:block:
_sendMessageFromDestinationWithSource:handler:
initWithVolume:endpointUID:outputDeviceUID:
initWithCapabilities:endpointUID:outputDeviceUID:
clusterComposition
integerValue
localDeviceUID
initWithRequest:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_notifyAndDisconnectClients:withError:completion:
setConnectedExternalDevices:
setTelevisionEndpoints:
setDiscoverySessions:
setRemoteControlService:
setLocalOutputContextDataSource:
externalDeviceSleepAssertionOnClientConnectDuration
initWithName:timeout:
_prewarmMediaApps
purgeUnusedDiscoverySessions
_findClientIf:
bundleVersion
protocolVersion
minimumSupportedProtocolVersion
minimumSupportedHangdogApplicationVersion
_playerPath:matchesSubscribedPlayerPath:
_shouldSendStateUpdateMessageFromSource:toClient:
_connection:canReceiveUpdatesForPlayerPath:
encryptedMessageWithState:text:attributes:usingCryptoSession:
version
initWithVersion:data:
initWithInputMode:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
sendMessage:queue:reply:
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
gameControllerConnectionDidInterrupt:
initWithName:packets:playerPath:
setTransactionCallback:forName:
pairingManager
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
effectiveValuesForUnionSetting:
lowercaseString
outputDevicesChanged:forConfiguration:
removeOutputDevicesChangedCallback:
serverDiscoveryModeForConfiguration:
setServerDiscoveryMode:forConfiguration:
exportOutputDevices:endpoint:
deleteIdentityWithError:
pairedDevices
setConnected:
dataFromDeviceInfos:
_unpair:
sharedLogger
setShouldVerboselyLog:
initWithKey:data:
_isConnectionForManagedConfigIDAllowed:
isRetrying
setCryptoSession:
state
openInState:
pairingData
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
initWithCommandID:commandResult:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
setRegisteredToNowPlayingUpdates:
volumeUpdates
setRegisteredToVolumeUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
outputDeviceUpdates
setRegisteredToOutputDeviceUpdates:
systemEndpointUpdates
setRegisteredToSystemEndpointUpdates:
_addOutputDevicesToMessage:forClient:withEndpoint:
_addVolumeToMessage:forClient:withEndpoint:completion:
_addNowPlayingStateToMessage:forClient:withEndpoint:
_addSystemEndpointToMessage:forClient:withEndpoint:
initWithHiliteMode:
volumeControlCapabilitiesForOutputDevice:queue:completion:
anyOrigin
activeOriginClient
hasPlaceholder
resolvePlaceholdersForDeviceInfo:
anyClient
anyPlayer
_origin:matchesSubscribedPlayerPath:
_origin:client:matchesSubscribedPlayerPath:
_origin:client:player:matchesSubscribedPlayerPath:
initWithLastPlayingDate:
defaultPlayer
initWithPlayerPath:lastPlayingDate:
initWithDeviceID:errorCode:
buffer
time
gain
setRequest:
returnContentItemAssetsInUserCompletion
initWithPlaybackQueue:forPlayerPath:
initWithDevice:
updatePeer
_syncStateToClient:
endpoints
sendMessage:timeout:queue:reply:
addAuthorizationCallbackForOutputDevice:callback:
isLocalEndpoint
getClusterStatus:
addingOutputDeviceUIDs
removingOutputDeviceUIDs
settingOutputDeviceUIDs
arrayWithCapacity:
setReturnPartialResults:
replyIdentifier
setOutputDevices:initiator:withReplyQueue:completion:
addAuthorizationCallbackForOutputDevice:client:
isSubsetOfSet:
initWithRoute:status:
addOutputDevices:initiator:withReplyQueue:completion:
removeOutputDevices:initiator:withReplyQueue:completion:
beginSearchWithTimeout:mapCompletion:
initWithVolume:
setOutputDeviceVolume:outputDevice:queue:completion:
initWithPlaybackSession:
playbackSession
requestID
setPairedDeviceSync:
setReason:
triggerAudioFadeOutForNowPlayingApplicationWithReplyQueue:completion:
triggerAudioFadeInWithReplyQueue:completion:
configuration
listeningMode
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
remoteControlService:didAcceptClientConnection:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
textEditingService:textEditingDidBegin:withAttributes:payload:
textEditingService:textDidChange:payload:
textEditingService:attributesDidChange:payload:
textEditingServiceTextEditingDidEnd:
textEditingService:echoWithText:
clearEndpointForClient:
nowPlayingStateDidChange:createMessageBlock:createLegacyMessageBlock:
_broadcastKeyboardMessageWithState:text:attributes:
_broadcastRemoteTextInputMessageWithPayload:
_handleHiliteModeChanged:
removeAuthorizationCallbackForOutputDevice:
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_hidEventManager
_stateObserver
_pinPairingDialog
_sleepObserver
_pairingManager
_outputContextController
_outputDeviceCallbackTokens
_discoverySessions
_remoteControlService
T@"MRDRemoteControlService",R,N,V_remoteControlService
externalDeviceForOutputDeviceUID:
setExternalDeviceForOutputDeviceUID:
_handleExternalDeviceConnectionStateDidChangeNotification:
_handleObserverDiscoveryModeDidChangeNotification:
_handleEndpointOutputDevicesDidChangeNotification:
_onQueue_reloadOutputDevices
addEndpointsChangedCallback:
initWithDiscoverySession:
removeEndpointsChangedCallback:
exceptionWithName:reason:userInfo:
_processDiscoveryObserverChanges
willBeLocallyHosted
initWithOutputContext:designatedGroupLeader:
isUsingJSONProtocol
initWithTransport:
addHostedExternalDevice:endpoint:
setExternalDevice:
virtualOutputDeviceDictionary
virtualOutputDevices
setDaemonVirtualDevices:
baseGroupID
unclusteredLocalOutputDevice
isAuxiliary
canRelayCommunicationChannel
isGroupable
isRemoteControllable
isDirectConnectedToOutputDeviceUID:
canAccessAppleMusic
canAccessiCloudMusicLibrary
isGroupLeader
shouldBeLocallyHosted
dictionaryWithCapacity:
msv_compactMap:
unclusteredOutputDevices
arrayByAddingObjectsFromArray:
isMultiplayerAware
groupContextID
parentGroupIdentifier
purgeUndiscoverableDisconnectedDevices:
endpointFeatures
setIsRemoteControllable:
setCanAccessiCloudMusicLibrary:
setCanAccessAppleMusic:
canAccessRemoteAssets
setCanAccessRemoteAssets:
mr_filter:
isAirPlayReceiverSessionActive
parentGroupContainsDiscoverableLeader
hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:
availableDistantAudioOutputDevices
determineGroupLeaderForOutputDevices:options:
addVirtualOutputDevice:forClient:
removeVirtualOutputDevicesForClient:
setVirtualOutputDeviceDictionary:
_observerCalloutQueue
_hostsByGroupID
_availableOutputDevices
_outputDevicesAndClusterMembers
_endpoints
_distantOutputDevices
_discoverySessionOutputDevicesToken
_discoverySessionEndpointsToken
_externalDeviceManager
_virtualOutputDeviceDictionary
T@"MRAVRoutingDiscoverySession",&,V_discoverySession
T@"NSMutableDictionary",&,N,V_virtualOutputDeviceDictionary
isLocallyHosted
takelockScreenAssertion
_addOrigin:withDeviceInfo:emitNotification:
initWithOriginClient:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingPlayerMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleGetClientPropertiesMessage:fromClient:
_handleSetClientPropertiesMessage:fromClient:
_handleUpdateClientPropertiesMessage:fromClient:
_handleGetPlayerPropertiesMessage:fromClient:
_handleSetPlayerPropertiesMessage:fromClient:
_handleUpdatePlayerPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleRegisterCustomOriginMessage:fromClient:
_handleReRegisterCustomOriginMessage:fromClient:
_handleRemoveCustomOriginMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleGetActivePlayerPathsForLocalOriginMessage:fromClient:
_handleGetPlayerPictureInPictureEnabledMessage:fromClient:
_handleSetPlayerPictureInPictureEnabledMessage:fromClient:
_handleContentItemChangedMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
_handleGetDeviceInfo:fromClient:
_handleUpdateDeviceInfo:fromClient:
_handleGetElectedPlayerPathMessage:fromClient:
_handlePlaybackSessionRequest:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleSetDefaultSupportedCommandsMessage:fromClient:
_handleGetLastPlayingDateMessage:fromClient:
_handleSetPlayerClientPropertiesMessage:fromClient:
_handleSetOriginClientPropertiesMessage:fromClient:
_handleRegisterForWakingNowPlayingNotifications:fromClient:
_handleGetAudioFormatContentInfoForOriginMessage:fromClient:
_onQueue_activeOriginClient
_onQueue_companionOriginClient
_onQueue_allNowPlayingInfoClients
_onQueue_originClientForOrigin:
resolvePlayerPath:fromClient:
isAllowedAccessToDataFromPlayerPath:
setNowPlayingClient:
setPlayerClient:
resolvePlayerPath:fromClient:useDefaultPlayerIfNoneSpecified:
isEntitledFor:
existingPlayerClientForPlayer:
_onQueue_queryPlayerPath:
initWithUnresolvedPlayerPath:
setOriginClient:
existingPlayerClientForPlayerPath:
_hasForwarderForOrigin:
_onQueue_originClientForDeviceUID:
_onQueue_originClientForGroupLeaderOfDeviceUID:
initWithRequest:error:playerPath:
_removeNowPlayingClient:forOrigin:
registeredCustomOrigins
removeRegisteredCustomOrigin:
_clientsWithRegisteredOrigin:
_removeOrigin:
postDeviceInfoDidChange:previousDeviceInfo:forOrigin:handler:
postOriginDidRegister:handler:
postActiveOriginDidChange:withPlaybackState:handler:
postVolumeDidChange:volume:handler:
postVolumeCapabilitiesDidChange:capabilities:handler:
postClientDidRegisterForPlayerPath:handler:
postNowPlayingApplicationDidChangeForPlayerPath:withPlaybackState:handler:
postNowPlayingClientStateDidChange:forPlayerPath:handler:
postPlayerDidRegisterForPlayerPath:handler:
postActivePlayerDidChangeForPlayerPath:withPlaybackState:handler:
postNowPlayingPlayerStateDidChange:forPlayerPath:handler:
postIsPlayingDidChange:lastPlayingTimestamp:forPlayerPath:handler:
postPlaybackStateDidChange:forPlayerPath:handler:
hasRequestedSupportedCommands
postSupportedCommandsDidChange:forPlayerPath:handler:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:handler:
initWithContentItems:location:
postPlaybackQueueDidChange:forPlayerPath:handler:
postPlaybackQueueContentItemsDidChange:forPlayerPath:handler:
enumerateFilteredContentItemsBySubscriptionsForContentItems:block:
postPlaybackQueueContentItemsArtworkDidChange:forPlayerPath:handler:
postPlayerDidRegisterCanBeNowPlayingForPlayerPath:handler:
postClientDidRegisterCanBeNowPlayingForPlayerPath:handler:
setActiveOrigin:
supportNanoLinkAgent
addRegisteredCustomOrigin:
initWithUTF8String:
queryPlayerPathForXPCMessage:fromClient:
setCanBeNowPlaying:
dateWithTimeIntervalSinceReferenceDate:
setCanBeNowPlayingTimestamp:
setPerPlayerCanBeNowPlaying:
setHardwareRemoteBehavior:
restoreStateFromController:
msv_map:
setActivePlayerClient:
isLocalOrigin
setHasRequestedSupportedCommands:
setWantsAssertionsForNotificationsWithPlayerPath:
maybePostDistributedNotifications
postPictureInPictureDidChange:forPlayerPath:handler:
postPlayerDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postPlayerDidUnregisterWithPlaybackState:canBeNowPlaying:forPlayerPath:handler:
postClientDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postClientDidUnregisterForPlayerPath:hasDefaultSupportedCommands:canBeNowPlaying:handler:
postActivePlayerPathsDidChangeForOrigin:handler:
postAudioFormatContentInfoDidChangeForOrigin:handler:
postElectedPlayerDidChange:change:event:reason:handler:
postLockScreenActiveDidChange:handler:
postLockScreenVisibleDidChange:handler:
postLockScreenPlayerPathDidChange:handler:
lockScreenController
setOriginClients:
setElectedPlayer:
mostRecentEvent
mostRecentEventReason
mostRecentSelectionReason
setElectedPlayerReason:
setLockScreenWidgetActive:
setLockScreenWidgetVisible:
setLockScreenPlayerPath:
setOriginForwarders:
numberWithUnsignedLong:
postClientNotificationNamed:predicate:
skeleton
dataForKey:
setLocalOriginClient:
_onQueue_setActiveOrigin:saveState:
postOriginDidUnRegister:deviceInfo:handler:
setActiveOriginClient:
nowPlayingServer:activeOriginDidChangeFromOriginClient:toOriginClient:
_onQueue_savePersistentActiveOrigin:
hasRegisteredCustomOrigin:
lockScreenController:lockScreenWidgetVisibleDidChange:
electedPlayerController:electedPlayerDidChange:change:event:reason:
lockScreenPlatterActive
nowPlayingClient:activePlayerDidChangeFromPlayerClient:toPlayerClient:
nowPlayingClient:clientStateDidChange:
nowPlayingClient:playerDidRegister:
nowPlayingClient:playerDidUnregister:
nowPlayingPlayerClient:clientCanBeNowPlayingDidChange:
nowPlayingClient:applicationDidForeground:
activeClientPID
localActiveClientPID
activeClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
localActivePlayerClient
localActiveNowPlayingClient
companionOriginClient
localActivePlayerPath
allNowPlayingInfoClients
allLocalNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
localPlayersForXpcClient:
clearNowPlayingClientForXPCClient:
restoreDeviceInfoToClient:handler:
restoreClientState:handler:
augmentedUserInfoForPlayerPath:
_onQueue_restoredActiveOrigin
electedPlayerController
proximityController
_originClients
_nowPlayingApplicationIsPlayingStates
_playbackQueueServer
_originForwarders
_electedPlayerController
_lockScreenController
_proximityController
_activeOriginClient
_localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
Ti,R,N
T@"MRDNowPlayingPlayerClient",R,N
T@"MRDNowPlayingOriginClient",R,N
T@"NSSet",R,N
T@"MRDElectedPlayerController",R,N,V_electedPlayerController
T@"MRDLockScreenController",R,N,V_lockScreenController
T@"MRDProximityController",R,N,V_proximityController
stringByAppendingFormat:
isActivity
_error
_playerClient
_nowPlayingClient
_originClient
_unresolvedPlayerPath
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
TI,N,V_error
T@"MRPlayerPath",R,N,V_unresolvedPlayerPath
handleCanBeNowPlayingPlayerDidChange:
initializeBundleIdentifier
initializeDisplayName
perPlayerCanBeNowPlaying
anyPlayerIsPlaying
isForegrounded
supportsBackgroundAudio
setProcessUserIdentifier:
parentApplicationBundleIdentifier
needNowPlayingForegroundState
initWithBundleIDs:states:
setIsForegrounded:
setHandler:
applicationInfoForApplication:
bundleInfoValueForKey:PID:
setSupportsBackgroundAudio:
_onQueue_setActivePlayerClient:
setNowPlayingPlayerClient:
_onQueue_activePlayerClient
_reevaluateCanBeNowPlaying
_onQueue_anyPlayerIsPlaying
_onQueue_playerClientForPlayer:
_onQueue_existingPlayerClientForPlayer:
_onQueue_addPlayer:
_onQueue_removePlayerClientForPlayer:
setPushStateClient:
setPushStateActivePlayerClient:
visibility
tintColor
appIcon
canBeNowPlayingTimestamp
notificationPlayerPathFromPlayer:
nowPlayingPlayerClient
pushStateActivePlayerClient
pushStateClient
stateMonitor
setStateMonitor:
_playerClients
_canBeNowPlaying
_effectiveCanBeNowPlaying
_perPlayerCanBeNowPlaying
_isForegrounded
_supportsBackgroundAudio
_canBeNowPlayingTimestamp
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_pushStateClient
_stateMonitor
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
T@"MRClient",&,N,V_pushStateClient
T@"BKSApplicationStateMonitor",&,N,V_stateMonitor
TB,N,V_perPlayerCanBeNowPlaying
T@"NSDate",C,N,V_canBeNowPlayingTimestamp
TB,N,V_isForegrounded
TB,N,V_supportsBackgroundAudio
T@"MRClient",&,N
T@"MRDNowPlayingPlayerClient",&,N
T@"<MRDNowPlayingClientDelegate>",W,N,V_delegate
_terminationHandler
setOutputContextForLocalDeviceDataSource:
_restoreNowPlayingClientState
_clientDidOpenConnection:
expectedClientAuditTokens
setExpectedClientAuditTokens:
setConnectedClientAuditTokens:
restoreClientDeviceInfo:
keepAlive
distantFuture
canBeNowPlayingClients
insertObject:atIndex:
initWithNotification:userInfo:
postNotification:
notification
sharedServiceClient
clientForPlayerPath:
activateWithCompletion:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleGetMediaAppIsInstalledMessage:fromClient:
_handleWakeMediaAppMessage:fromClient:
_handleWakePlayerServiceMessage:fromClient:
_handlePing:fromClient:
_handleRequestBlessMessage:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
_handleCollectClientDiagnosticsMessage:fromClient:
setKeepAlive:
_internalMediaRemoteNotificationIsLegal:
hasPrefix:
applicationProxyForIdentifier:
appState
takeAssertionAndBlessForReason:
acquire
createDiagnosticInfo
diagnosticInfo
setDiagnosticInfo:
_handleCollectClientDiagnosticsMessageWithCompletion:
_collectDiagnosticFromClient:completion:
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
removeClientForPID:
setActiveClients:
setActiveTransactions:
setLocalNowPlayingClient:
systemMediaClient
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
initWithObjects:
getBytes:length:
handleForIdentifier:error:
dataWithBytes:length:
lastBootUUID
connectedClientAuditTokens
_validateAuditTokens:pids:auditTokens:
setLastBootUUID:
_postAppActivityNotificationNamed:withActivity:
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
T@"MRDMediaRemoteServer",R,N
mostRecentCanBeNowPlayingClient
mostRecentPlayingClient
systemPodcastClient
_sendMediaRemoteCommand:withOrigin:
availableOrigins
remoteControlServer
transactionServer
sharedDisplayMonitor
_listenerConnection
_connectionQueue
_localRoutingDataSource
_volumeController
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_termSigHandler
_shouldSendCommandsDuringPhoneCall
_availableOrigins
_sharedDisplayMonitor
T@"NSArray",R,N,V_availableOrigins
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
T@"MRDAVRoutingServer",R,N,V_routingServer
T@"MRDTransactionServer",R,N,V_transactionServer
T@"MRDExternalDeviceRemoteServer",R,N,V_externalDeviceServer
TB,R,N,V_shouldSendCommandsDuringPhoneCall
T@"MRDMediaRemoteClient",R,N
T@"FBSDisplayLayoutMonitor",R,N,V_sharedDisplayMonitor
T@"RPCompanionLinkClient",R,N
initWithName:pid:bundleID:subsystem:reason:flags:
Tq,R,N,V_type
setString:
string
_string
TQ,N,V_type
T@"NSString",&,N,V_string
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
connectToAllOutputDevicesForReason:comparator:queue:completion:
connectToEndpointWhenBeginsPlayback
connectToUserSelectedEndpoint
_handleActiveSystemEndpointDidChangeNotification:
initWithDeallocHandler:
_connectToAllOutputDevicesForReason:comparator:queue:completion:
_connectToOutputDevice:reason:completion:
_connectToGroup:reason:completion:
_discoverOutputDevice:reason:completion:
_discoverGroup:reason:completion:
discoverySessionWithEndpointFeatures:
_onSerialQueue_connectToEndpoint:reason:queue:completion:
discoverEndpointTimeoutInterval
_onSerialQueue_discoverOutputDevice:connect:reason:completion:
_onSerialQueue_discoverGroup:connect:reason:completion:
searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:
searchEndpointsForGroupUID:timeout:reason:queue:completion:
_onSerialQueue_addConnectedEndpoint:
connectToExternalDeviceWithUserInfo:completion:
_handleEndpointDidInvalidateNotification:
_onSerialQueue_removeConnectedEndpoint:
autoConnectingEndpoints
autoConnectedEndpoints
connectToGroup:reason:queue:completion:
_pendingReconSessions
_pendingReconSessionCompletions
_pendingGroupReconSessions
_pendingGroupReconSessionCompletions
_connectedEndpoints
_connectingEndpoints
_pendingConnectingEndpointCompletions
_handlePlaybackQueueChangedNotification:
_handleNowPlayingApplicationDidChangeNotification:
_handleNowPlayingApplicationDidForegroundNotification:
_onSyncSelf_reevaluateElectedPlayerForEvent:withReason:
_shouldUseNotification:
_onSyncSelf_maybeSetupPlaybackTimeoutTimerForEvent:
setActiveSystemEndpointOutputDeviceUID:
activeSystemEndpointOutputDeviceUID
setOriginClient:withChangeType:
_onSyncSelf_calculateElectedPlayerForOriginClient:event:reason:
_resolveChangeTypeWithOriginClient:forEvent:
previousElectedPlayerPath
_activeSystemEndpointOutputDeviceUID
_previousElectedPlayerPath
_mostRecentEvent
_mostRecentEventReason
_mostRecentSelectionReason
T@"NSString",&,N
T@"MRPlayerPath",R,N,V_electedPlayerPath
T@"MRPlayerPath",R,N,V_previousElectedPlayerPath
T@"NSString",R,N,V_event
T@"NSString",R,N,V_eventReason
T@"NSString",R,N,V_selectionReason
T@"NSString",R,N,V_mostRecentEvent
T@"NSString",R,N,V_mostRecentEventReason
T@"NSString",R,N,V_mostRecentSelectionReason
T@"<MRDElectedPlayerControllerDelegate>",N,V_delegate
strongToWeakObjectsMapTable
setCommunicationChannelDelegate:
initWithOutputContextCommunicationChannel:outputContext:
_didReceiveData:fromConnectionID:connectionFactory:
_didCloseCommunicationChannelWithID:error:
initWithAPCommunicationChannel:
numberWithUnsignedInteger:
airPlayRemoteControlService:didAcceptConnection:
ingestData:
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
didReceiveData:fromCommunicationChannel:
didCloseCommunicationChannel:
didSetupReverseCommunicationChannel:
failedToSetupReverseCommunicationChannel:
_systemMusicContext
T@"<MRDAirPlayRemoteControlServiceDelegate>",W,N,V_delegate
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
companionLinkDevices
mediaRouteIdentifier
homeKitUserIdentifiers
_appendDescribableArray:toString:withTitle:indentLevel:
activeClients
activeTransactions
currentAppActivity
setCurrentAppActivity:
activeOrigin
electedPlayer
electedPlayerReason
lockScreenPlayerPath
originForwarders
enqueuedCommands
remoteControlContexts
queuedInitiatePlaybackMessages
connectedExternalDevices
televisionEndpoints
discoverySessions
localOutputContextDataSource
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
setAirplaySecuritySettings:
localReceiverPairingIdentity
setLocalReceiverPairingIdentity:
systemActiveEndpoints
setSystemActiveEndpoints:
setAutoConnectedEndpoints:
setAutoConnectingEndpoints:
migrationEvents
setMigrationEvents:
mediumDevices
setMediumDevices:
promptingDevices
setPromptingDevices:
immediateDevices
setImmediateDevices:
migratingDevices
setMigratingDevices:
isAdvertisingProximity
setIsAdvertisingProximity:
advertisingReasonDescription
setAdvertisingReasonDescription:
hostedRouteDiscoveryMode
hostedDiscoverySessions
hostedExternalDevices
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
usedTransactionMemory
allowedTransactionMemory
transactionWaitDuration
_lockScreenWidgetActive
_lockScreenWidgetVisible
_isAdvertisingProximity
_systemDiscoveryMode
_hostedRouteDiscoveryMode
_dateCreated
_activeTransactions
_currentAppActivity
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_activeOrigin
_electedPlayer
_electedPlayerReason
_lockScreenPlayerPath
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_localOutputContextDataSource
_airplaySecuritySettings
_localReceiverPairingIdentity
_systemActiveEndpoints
_autoConnectedEndpoints
_autoConnectingEndpoints
_migrationEvents
_mediumDevices
_promptingDevices
_immediateDevices
_migratingDevices
_advertisingReasonDescription
_hostedExternalDevices
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
T@"NSDate",R,N,V_dateCreated
T@"NSArray",C,N,V_activeClients
T@"NSArray",C,N,V_activeTransactions
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
T@"NSArray",C,N,V_originClients
T@"MROrigin",&,N,V_activeOrigin
T@"MRPlayerPath",&,N,V_electedPlayer
T@"NSString",&,N,V_electedPlayerReason
TB,N,V_lockScreenWidgetActive
TB,N,V_lockScreenWidgetVisible
T@"MRPlayerPath",&,N,V_lockScreenPlayerPath
T@"NSArray",&,N,V_originForwarders
T@"NSDictionary",C,N,V_enqueuedCommands
T@"NSArray",C,N,V_remoteControlContexts
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_connectedExternalDevices
T@"NSArray",C,N,V_televisionEndpoints
T@"NSArray",C,N,V_discoverySessions
T@"MRDRemoteControlService",&,N,V_remoteControlService
T@"MROutputContextDataSource",&,N,V_localOutputContextDataSource
TI,N,V_systemDiscoveryMode
T@"_MRAVAirPlaySecuritySettingsProtobuf",&,N,V_airplaySecuritySettings
T@"NSString",C,N,V_localReceiverPairingIdentity
T@"NSDictionary",C,N,V_systemActiveEndpoints
T@"NSArray",C,N,V_autoConnectedEndpoints
T@"NSArray",C,N,V_autoConnectingEndpoints
T@"NSArray",C,N,V_migrationEvents
T@"NSArray",C,N,V_nearbyDevices
T@"NSArray",C,N,V_mediumDevices
T@"NSArray",C,N,V_promptingDevices
T@"NSArray",C,N,V_immediateDevices
T@"NSArray",C,N,V_migratingDevices
TB,N,V_isAdvertisingProximity
T@"NSString",C,N,V_advertisingReasonDescription
TI,N,V_hostedRouteDiscoveryMode
T@"NSArray",C,N,V_hostedDiscoverySessions
T@"NSArray",C,N,V_endpoints
T@"NSDictionary",C,N,V_hostedExternalDevices
T@"NSString",&,N,V_discoverySession
T@"NSArray",C,N,V_recordingEndpointClients
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
TQ,N,V_usedTransactionMemory
TQ,N,V_allowedTransactionMemory
Td,N,V_transactionWaitDuration
shouldInitializeGenericBonjourService
shouldInitializeTelevisionBonjourService
shouldInitializeRapportService
_notifyDelegateWithConnection:
setAirPlayService:
genericNetworkService
setGenericNetworkService:
televisionNetworkService
setTelevisionNetworkService:
rapportService
setRapportService:
idsService
setIdsService:
workerQueue
setWorkerQueue:
_airPlayService
_genericNetworkService
_televisionNetworkService
_rapportService
_idsService
T@"MRDBonjourRemoteControlService",&,N,V_genericNetworkService
T@"MRDBonjourRemoteControlService",&,N,V_televisionNetworkService
T@"MRDAirPlayRemoteControlService",&,N,V_airPlayService
T@"MRDRapportRemoteControlService",&,N,V_rapportService
T@"MRDIDSRemoteControlService",&,N,V_idsService
T@"NSObject<OS_dispatch_queue>",&,N,V_workerQueue
T@"<MRDRemoteControlServiceDelegate>",W,N,V_delegate
setDelegate:queue:
_notifyDelegate:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
T@"<MRDPhoneCallObserverDelegate>",W,N,V_delegate
_assertionID
initWithOutputContext:
setDesignatedGroupLeader:
registerForOutputContextNotifications
verifyGroupLeaderForReason:
cleanUp
debugDictionaryRepresentation
outputContext
_generateDeviceInfoWithDesignatedGroupLeader:outputContext:
_maybeForwardOriginToLocalOrigin:
_onQueue_destroyPlayerPathsForOrigin:
_createResolvedPlayerPathFromPlayerPath:
_handleRemoteCommand:withOptions:playerPath:completion:
_handlePlaybackQueueRequest:forPlayerPath:completion:
_handlePlaybackSessionRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateRequest:request:forPlayerPath:completion:
_handlePlaybackSessionMigrateBeginRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateEndRequest:error:forPlayerPath:completion:
localizedFailureReason
initWithWithSendError:description:
_createPlayerAndWaitForConnection:completion:
bundleIdentifierHierarchy
commitOutputDeviceToContextIfNeededWithReason:completion:
_resolveReason:uid:
_createPlayerForClient:playerPath:deviceInfo:completion:
_sendMessageForPlayerPath:timeout:reason:factory:completion:
_createPlayerAndWaitForCanBeNowPlaying:completion:
initWithRequest:forPlayerPath:
sendMessageWithType:playerPath:timeout:reason:factory:completion:
initWithPlaybackSession:request:forPlayerPath:
initWithRequest:playerPath:
volumeForOutputDeviceUID:error:
setVolume:outputDeviceUID:
volumeControlCapabilitiesForOutputDeviceUID:error:
minusSet:
removeOutputDevices:initiator:withCallbackQueue:block:
setOutputDevices:initiator:withCallbackQueue:block:
onQueue_registerCustomOriginWithName:deviceInfo:
initWithLastSupportedMessageType:
outputContextOutputDevicesDidChangeNotification:
outputContextDidAddOutputDeviceNotification:
outputContextDidRemoveOutputDeviceNotification:
outputContextDataSourceVolumeControlCapabilitiesDidChangeNotification:
outputContextDataSourceVolumeDidChangeNotification:
anyOutputContextDidAddOutputDeviceNotification:
localPlayerPath
existingOriginClientRequestsForPlayerPath:
localizeIfNeeded:
verifyGroupLeader:
setPairingCallback:withQueue:
setPairingAllowedCallback:withQueue:
removeFromParentGroup:queue:completion:
setDiscoveryEndpointsChangedCallback:
wantsNowPlayingNotifications
setWantsNowPlayingNotifications:
wantsNowPlayingArtworkNotifications
setWantsNowPlayingArtworkNotifications:
setWantsVolumeNotifications:
wantsOutputDeviceNotifications
setWantsOutputDeviceNotifications:
wantsSystemEndpointNotifications
errorForCurrentState
currentClientUpdatesConfigMessage
sendClientUpdatesConfigMessage
outputDeviceForUID:error:
setOutputContext:
notificationQueue
setNotificationQueue:
connectionStateCallback
setConnectionStateCallback:
connectionStateCallbackQueue
setConnectionStateCallbackQueue:
outputDevicesUpdatedCallback
setOutputDevicesUpdatedCallback:
outputDevicesUpdatedCallbackQueue
setOutputDevicesUpdatedCallbackQueue:
outputDevicesRemovedCallback
setOutputDevicesRemovedCallback:
outputDevicesRemovedCallbackQueue
setOutputDevicesRemovedCallbackQueue:
volumeCallback
setVolumeCallback:
volumeCallbackQueue
setVolumeCallbackQueue:
volumeControlCapabilitiesCallback
setVolumeControlCapabilitiesCallback:
volumeControlCapabilitiesCallbackQueue
setVolumeControlCapabilitiesCallbackQueue:
_originForwarder
_pendingCommitRequests
_clientBundleIDs
_designatedGroupLeader
_outputContext
_notificationQueue
_connectionStateCallback
_connectionStateCallbackQueue
_outputDevicesUpdatedCallback
_outputDevicesUpdatedCallbackQueue
_outputDevicesRemovedCallback
_outputDevicesRemovedCallbackQueue
_volumeCallback
_volumeCallbackQueue
_volumeControlCapabilitiesCallback
_volumeControlCapabilitiesCallbackQueue
T@"MRAVOutputContext",&,N,V_outputContext
T@"MROrigin",&,N,V_origin
T@"NSObject<OS_dispatch_queue>",&,N,V_notificationQueue
T@?,C,N,V_connectionStateCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionStateCallbackQueue
T@?,C,N,V_outputDevicesUpdatedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesUpdatedCallbackQueue
T@?,C,N,V_outputDevicesRemovedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesRemovedCallbackQueue
T@?,C,N,V_volumeCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeCallbackQueue
T@?,C,N,V_volumeControlCapabilitiesCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeControlCapabilitiesCallbackQueue
T@"MRAVOutputDevice",&,N,V_designatedGroupLeader
_initWithLabel:
checkXPCConnectionStatusDefaultInterval
checkXPCConnectionStatusDefaultResponseTimeout
_canSendMessage
_checkConnectionStatus
_onCalloutQueue_notifyStatusDidChange:
initWithTimeout:reason:queue:handler:
verboseConnectionMonitorLogging
scheduleSendBarrierBlock:
initWithXPCConnection:label:
connection_t
setConnection_t:
calloutQueue
currentMessageCount
setCurrentMessageCount:
totalMessageCount
setTotalMessageCount:
pendingBarrierCompletion
setPendingBarrierCompletion:
lastStatusCheckDate
setLastStatusCheckDate:
lastStatusChangeDate
setLastStatusChangeDate:
lastMessageSentDate
setLastMessageSentDate:
_label
_pendingBarrierCompletion
_connection_t
_calloutQueue
_currentMessageCount
_totalMessageCount
_status
_lastStatusCheckDate
_lastStatusChangeDate
_lastMessageSentDate
T@"NSXPCConnection",&,N,V_connection
T@"NSObject<OS_xpc_object>",&,N,V_connection_t
T@"NSObject<OS_dispatch_queue>",R,N,V_calloutQueue
TQ,N,V_currentMessageCount
TQ,N,V_totalMessageCount
TQ,N,V_status
TB,N,V_pendingBarrierCompletion
T@"NSDate",&,N,V_lastStatusCheckDate
T@"NSDate",&,N,V_lastStatusChangeDate
T@"NSDate",&,N,V_lastMessageSentDate
T@"<MRXPCConnectionMonitorDelegate>",W,N,V_delegate
sharedAuthorizationSession
initWithRoutingDataSource:hostedRoutingService:systemEndpointController:autoConnectionController:homeServer:avOutputDeviceAuthorizationSession:
setMaxConcurrentOperationCount:
_loadMostRecentlyPicked
_updateSystemRouteDiscoveryMode
setAirplayActive:
_unregisterNotifications
_setPickedRoute:withPassword:options:
applicationPickedRoutes
postSystemEndpointDeviceChange:type:originClient:handler:
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleClearAllAVRoutePasswordsMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_handleGetHostedRoutingXPCEndpointMessage:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleUpdateActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDsMessage:fromClient:
_handleCreateEndpointWithDevices:fromClient:
_handleCreateDirectEndpointForDevices:fromClient:
_handleGroupDevicesAndSendCommand:fromClient:
_handleCreateHostedEndpointForDevices:fromClient:
_handlePredictGroupLeader:fromClient:
_handleRemoveFromParentGroup:fromClient:
_handlePromptForRouteAuthorizationMessage:fromClient:
_handlePresentRouteAuthorizationStatusMessage:fromClient:
_handleGetAirplayStatus:fromClient:
_handleSetNearbyDevice:fromClient:
_handleResetOutputContextMessage:fromClient:
_handleGetExternalDeviceMessage:fromClient:
_handleAddVirtualOutputDeviceMessage:fromClient:
_handleGetVirtualOutputDevicesMessage:fromClient:
_handleCreateGroupWithDevices:fromClient:
_handleStartNowPlayingSession:fromClient:
_handleStopNowPlayingSession:fromClient:
_handleGetOutputContextUIDMessage:fromClient:
_handleMigrateFromEndpointToOutputDevicesMessage:fromClient:
_handleMigrateFromEndpointToEndpointMessage:fromClient:
_handleModifyOutputContextMessage:fromClient:
_createAirPlaySecuritySettings
_postRouteStatusDidChangeNotificationForRoute:newStatus:
_savedPasswordForOutputDevice:
_clearPasswordForOutputDevice:
respondWithAuthorizationToken:completionHandler:
authorizationTokenType
_storePassword:forOutputDevice:
initWithRoute:inputType:responseCallback:cancelCallback:
_handleAuthorizationRequest:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
_setApplicationPickedRoutes:updateRoutes:forClient:
addOperationWithBlock:
indexOfObject:inRange:
removeObjectsInRange:
_saveMostRecentlyPicked
initWithResponse:
inputType
_handleErrorStatus:forRoute:
useAPSyncAPI
_setEndpoint:
initWithJSONData:pipeEndpoint:
jsonDeviceDefinition
_createEndpointForOutputDeviceIDs:completion:
searchEndpointsWithPredicate:timeout:reason:queue:completion:
performMigrationToOutputDevices:request:initiator:queue:completion:
performMigrationToEndpoint:request:queue:completion:
_createHostedEndpointForOutputDeviceUIDs:completion:
_predictGroupLeaderForOutputDeviceIDs:completion:
removeOutputDeviceFromParentGroup:queue:completion:
createOutputContextWithUniqueIdentifier:
modifyWithOutputContext:queue:completion:
_postExternalScreenDidChange
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_handleAuthenticationFailureForRoute:withOptions:
clusterType
_handleClusterErrorStatus:forRoute:
respondWithAuthorizationToken:
activePasswordDialog
_passwordDialogForRouteWithName:usingInputType:
buttonIdentifier
textFieldValues
dictionaryWithDictionary:
setActivePasswordDialog:
_clientInvalidatedNotification:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
outputContextManagerForAllOutputContexts
setAlternateButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
discoveryTransaction
setDiscoveryTransaction:
dismiss
_launchTVClusterSettings
_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:
URLWithString:
_presentPasswordDialogForRoute:withOptions:
identifyingMACAddress
_existingKeychainAccountForOutputDevice:password:
_storePassword:forRoute:
MACAddress
_preferredIdentifierForMACAddress:identifier:name:
_createEndpointForOutputDeviceIDsLegacy:completion:
indexesOfObjectsPassingTest:
objectsAtIndexes:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
_handleGetHostedEndpointForDeviceUIDMessage:fromClient:
_autoConnectionController
_routeUIDsToIgnorePortStatusFailures
_lastClusterConnectionFailureDate
_reconnaissanceSessions
_mostRecentlyPickedDevices
_mostRecentStatus
_airplayActiveNotificationToken
_homeServer
_workerOperationQueue
_localDeviceCommitManager
_airplayActive
_hostedRoutingService
_systemEndpointController
_activePasswordDialog
_discoveryTransaction
T@"MSVSystemDialog",&,N,V_activePasswordDialog
T@"MROSTransaction",&,N,V_discoveryTransaction
TB,N,V_airplayActive
T@"MRDAVHostedRoutingService",R,N,V_hostedRoutingService
T@"MRDAVSystemEndpointController",R,N,V_systemEndpointController
_frontmostApplicationDidChange:
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_mostRecentlyUpdatedClient
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
_notifyDelegateNowPlayingApplicationDidChange
setCachedNowPlayingClients:
initWithRange:
setCachedNowPlayingContentItem:
_notifyDelegateNowPlayingPlaybackStateDidChange
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
cachedNowPlayingContentItem
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
T@"NSSet",&,N,V_cachedNowPlayingClients
T@"MRContentItem",&,N,V_cachedNowPlayingContentItem
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
_identifier
_port
TI,R,N,V_connection
TI,R,N,V_identifier
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",W,N,V_delegate
_removeExternalDeviceWithOutputDeviceUID:forReason:
_tombstoneHostedExternalDevice:
_removeExternalDeviceWithEndpointIdentifier:forReason:
removeObjectIdenticalTo:
_hostedExternalDeviceGraveyard
_hostedExternalDeviceMap
T@"<MRDHostedExternalDeviceManagerDelegate>",W,N,V_delegate
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
registeredDeviceWithID:
setRecordingState:
registeredDevices
_registeredDevices
T@"NSArray",R,C,N
T@"<MRDVirtualAudioInputServerDelegate>",W,N,V_delegate
_setupNotifications
_initializeVolumeLimitDataIfNecessary
_internalSetVolumeValue:
_systemVolumeDidChange:
_systemMuteDidChange:
_EUVolumeLimitEnforcedDidChange:
_EUVolumeLimitDidChange:
_volumeFromAVController
_postVolumeDidChange:
_updateVolumeValueCache
_tearDownNotifications
getVolumeForRoute:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
volumeCategoryForAudioCategory:
setVolumeTo:forCategory:
_volumeValue
_deviceEnforcesEUVolumeLimit
_volumeLimitDataInitialized
_createRemoteAlertHandleIfNeeded
setActivatingForSiri:
activateWithContext:
initWithServiceName:viewControllerClassName:
dictionaryWithObject:forKey:
setUserInfo:
setXpcEndpoint:
newHandleWithDefinition:configurationContext:
remoteAlertHandleDidActivate:
remoteAlertHandleDidDeactivate:
remoteAlertHandle:didInvalidateWithError:
completion
setCompletion:
configurationData
setConfigurationData:
setRouteUID:
center
setCenter:
serviceType
setServiceType:
style
setStyle:
remoteAlertHandle
setRemoteAlertHandle:
_style
_completion
_configurationData
_center
_serviceType
_remoteAlertHandle
T@?,C,N,V_completion
T@"NSData",&,N,V_configurationData
T@"NSObject<OS_xpc_object>",&,N,V_endpoint
T@"NSString",C,N,V_routeUID
T@"NSString",C,N,V_center
TQ,N,V_serviceType
TI,N,V_style
T@"SBSRemoteAlertHandle",&,N,V_remoteAlertHandle
T@"NSString",C,N,V_bundleIdentifier
initWithConnection:queue:defaultReplyQueue:
_handleXPCMessage:
euid
_postNotification:
shouldWakeDeviceForRemoteControlCommands
mediaType
_wakeDevice:dismissScreenSaver:reason:
sendCommand:options:queue:completion:
optionsData
identifierWithPid:
hostProcess
bundle
_relayXPCMessage:andReply:resultCallback:
verboseMRDMediaRemoteClientLogging
xpcMessage
setOutputDeviceDiscoveryMode:
setApplicationPickedRoutes:
_runAssertionName
messageHandler
processName
hardwareRemoteBehavior
routeDiscoveryCount
outputDeviceDiscoveryMode
isActive
_source
_registeredCustomOrigins
_applicationPickedRoutes
_assertions
_relayingMessages
_entitlements
_subscribedWakingPlayerPaths
_isActive
_keepAlive
_hasRequestedLegacyNowPlayingInfo
_hasRequestedSupportedCommands
_hardwareRemoteBehavior
_routeDiscoveryMode
_outputDeviceDiscoveryMode
_messageHandler
_currentTaskAssertion
_processName
_routeDiscoveryCount
_remoteUIService
T@"<MRDXPCMessageHandling>",W,N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",W,N,V_delegate
T@"MRXPCConnection",R,N,V_connection
T@"NSData",R,N
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
T@"NSString",R,N,V_processName
TI,N,V_hardwareRemoteBehavior
TQ,R,N,V_routeDiscoveryCount
TI,N,V_routeDiscoveryMode
TI,N,V_outputDeviceDiscoveryMode
T@"MRDMediaRemoteUIService",&,N,V_remoteUIService
TB,R,N,V_isActive
TB,N,V_keepAlive
TB,N,V_hasRequestedLegacyNowPlayingInfo
TB,N,V_hasRequestedSupportedCommands
TQ,R,N,V_entitlements
availableOutputDeviceGroups
groupLeader
initWithOutputDeviceGroup:groupLeader:outputDevices:
_onQueue_reloadWithEndpoints:
pipeEndpoint
initWithOutputDevice:pipeEndpoint:
T@"MRAVConcreteRoutingDiscoverySession_APSync",&,D,N
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_uniqueIdentifier
_ioDevice
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
TQ,R,N,V_uniqueIdentifier
T^{__IOHIDUserDevice=},R,N,V_ioDevice
_fbsDisplayMonitorConfiguration
layoutMonitor:didUpdateDisplayLayout:withContext:
setTransitionHandler:
monitorWithConfiguration:
configurationForDefaultMainDisplayMonitor
scheduleLayoutChangeForReason:
displayBacklightLevel
setDisplayOn:
elements
setControlCenterForegrounded:
setLockScreenForegrounded:
T@"MRDDisplayMonitor",R,N
_layoutChangeScheduled
_displayOn
_lockScreenForegrounded
_controlCenterForegrounded
TB,N,V_displayOn
TB,N,V_lockScreenForegrounded
TB,N,V_controlCenterForegrounded
_responseCallback
_cancelCallback
_inputType
T@"MRDAVRoute",R,N,V_route
Tq,R,N,V_inputType
_updateSuggestionCountIfNeeded
setUserDisplayPreferencesDidChangeCallback:
shouldConsiderSuggestions
suggestionPreferences
suggestionsDisabledInContext:
suggestionCount
setSuggestionCount:
_notifyDelegate
defaultRequest
setMaxResults:
performWithPreferences:completion:
setShouldConsiderSuggestions:
setSuggestionPreferences:
lock
_shouldConsiderSuggestions
_lock
_suggestionPreferences
_suggestionCount
T@"MRMediaSuggestionPreferences",&,N,V_suggestionPreferences
T{os_unfair_lock_s=I},R,N,V_lock
TB,N,V_shouldConsiderSuggestions
Tq,V_suggestionCount
T@"<MRDLockScreenContentControllerDelegate>",W,N,V_delegate
errorWithDomain:code:userInfo:
optionsWithDictionary:
serviceWithDefaultShellEndpoint
openApplication:withOptions:completion:
processInfo
defaultWorkspace
applicationIsInstalled:
applicationInfoForApplication:completion:
remoteControlInterfaceID
_optionsDictionary
_copyWithZone:usingConcreteClass:
setCommand:
setOriginUID:
setSenderAppDisplayID:
setDestinationAppProcessID:
setRemoteControlInterfaceID:
setAppOptions:
setWithObjects:
copyWithZone:
mutableCopyWithZone:
originatedFromAccessory
originatedFromHID
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
TI,R,N,V_commandType
T@"NSString",R,N,V_senderAppDisplayID
TI,R,N,V_appOptions
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
avrcpCommand
TB,R,N,GisAVRCPCommand
setOptionsData:
TI,D,N
T@"NSData",C,D,N
T@"MRPlayerPath",C,D,N
T@"NSDate",C,D,N
T@"NSString",C,D,N
T@"NSString",C,N
Ti,N
_routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
sampleRate
_picked
_speakerRoute
_modelName
_MACAddress
_dictionary
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_type
T@"NSString",R,N,V_modelName
T@"NSData",R,N,V_MACAddress
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
T@"NSDictionary",R,N,V_dictionary
_indexPathData
T@"NSData",R,N,V_indexPathData
_deviceID
_token
_expirationDate
T@"NSString",R,N,V_deviceID
T@"NSString",R,N,V_token
T@"NSDate",R,N,V_expirationDate
modelID
sharedLocalDevice
requiresAuthorization
_outputDevice
T@"MRAVOutputDevice",R,N,V_outputDevice
initWithRoutingContextUID:multipleBuiltInDevices:
initWithAVOutputDevice:sourceInfo:
_avOutputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
MRDSystemEndpointEntry
MRDAVSystemEndpointController
MRDRedirectionCacheEntry
MRDRemoteControlServer
MRDPhoneCallObserverDelegate
NSObject
MRDXPCMessageHandling
MRDDiagnosticCollecting
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDStreamCapacityManager
MRDStreamCapacityManagerAdditions
MRDNowPlayingPlayerClient
MRDNowPlayingPlayerClientArtworkRequest
MRDNowPlayingPlayerClientPlaybackState
MRDNowPlayingPlayerClientPlaybackStateSnapshot
MRDBonjourRemoteControlService
NSNetServiceDelegate
MRDAVHostedExternalDeviceClient
MRXPCConnectionMonitorDelegate
MRAVDistantExternalDeviceClientProtocol
MRDAVHostedExternalDevicePendingClientState
MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications
MRDNowPlayingDataSourceApplication
MRDNowPlayingDataSourceSession
MRDNowPlayingDataSource
MRDOriginForwarder
MRDOutputDeviceRoutingDataSource
MRDRapportRemoteControlService
MRDRapportRemoteControlServiceConnection
NSSecureCoding
NSCoding
MRDProximityController
MRNowPlayingControllerDelegate
MRDAVOutputContextManager
MRDPinPairingDialog_ATV
MRDAVReconnaissanceSession
MRDAVLocalDeviceCommitManager
MRAVClusterObserver
MRDBrowsableContentServer
MRDAVHostedDiscoverySession
MRAVDistantRoutingDiscoveryServiceProtocol
MRDAVHostedRoutingObserver
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MREndpointObserver
MRDAVHostedRoutingService
NSXPCListenerDelegate
MRDAVHostedDiscoverySessionDelegate
MRDAVHostedRoutingController
MRDExternalDeviceCredentialDatabase
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDPersonalDeviceController
MRDExternalDeviceHomeServer
MRDExternalDeviceHomeServerRecentlyPlayedEntry
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDPinPairingDialog
Provider
MRDIDSRemoteControlService
MRProtocolClientConnectionDelegate
NSStreamDelegate
MRDIDSRemoteControlServiceConnection
MRHID
MRDNowPlayingPlaybackQueueServer
MRDDeviceInfoDataSource
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceObserver
MRDDeviceInfoDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDMediaServerAVRoutingDataSource
MRDPinPairingDialog_CFUN
MRDLockScreenController
MRDPersonalDeviceControllerDelegate
MRDLockScreenContentControllerDelegate
MRDLockScreenAssertion
MRDConnectionLifetimeController
MRDAVHostedExternalDevice
MRExpanseManagerObserver
MRDConnectionLifetimeControllerDataSource
MRDConnectionLifetimeControllerDelegate
MRAVDistantExternalDeviceServiceProtocol
MRDExternalDeviceRemoteServer
MRCryptoPairingSessionDelegate
MRDRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTextEditingServiceDelegate
MRDHostedRoutingController
MRDHostedExternalDeviceManagerDelegate
MRDHostedRoutingControllerAdditions
MRDNowPlayingServer
MRDLockScreenControllerDelegate
MRDElectedPlayerControllerDelegate
MRDProximityControllerDataSource
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDTaskAssertion
MRDAutoConnectionControllerReason
MRDAutoConnectionController
MRDElectedPlayerController
MRDAirPlayRemoteControlService
AVOutputContextCommunicationChannelDelegate
APReceiverMediaRemoteCommunicationChannelDelegate
MRDDiagnostic
MRDRemoteControlService
MRDAirPlayRemoteControlServiceDelegate
MRDBonjourRemoteControlServiceDelegate
MRDRapportRemoteControlServiceDelegate
MRDIDSRemoteControlServiceDelegate
MRDPhoneCallObserver
CXCallObserverDelegate
MRDIDSServerClientConnection
MRDSleepAssertion
MRDAVOutputContextExternalDevice
MRXPCConnectionMonitor
MRDAVRoutingServer
MRDAVSystemEndpointControllerDelegate
AVOutputDeviceAuthorizationSessionDelegate
MRDiOSSimulatorNowPlayingDataSource
MRDSleepObserver
MRDHostedExternalDeviceManager
MRDVirtualAudioInputServer
MRDMediaServerVolumeController
MRDMediaRemoteUIService
SBSRemoteAlertHandleObserver
MRDMediaRemoteClient
MRDAPSyncHostedRoutingController
MRDVirtualTouchDevice
MRDDisplayMonitor
MRDRouteAuthorizationRequest
MRDLockScreenContentController
MRDRemoteControlCommand
NSCopying
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDOutputDeviceRoute
MRDAVOutputDeviceRoute
@16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"NSString"
@"NSDate"
@24@0:8@16
@24@0:8q16
v40@0:8@16q24@32
v48@0:8@16q24@32@40
v48@0:8q16q24@32@40
v56@0:8q16q24q32@40@48
@40@0:8q16q24^@32
@32@0:8q16^@24
@24@0:8^@16
v48@0:8@16q24q32@40
v32@0:8@16@?24
B24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"MRDNowPlayingServer"
@"MRDHostedRoutingController"
@"NSMutableDictionary"
@"NSUserDefaults"
@"MSVPersistentTimer"
@"<MRDAVSystemEndpointControllerDelegate>"
@"MRPlayerPath"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"MRDPhoneCallObserver"16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"MRDMediaRemoteClient"24
v24@0:8@"MRDDiagnostic"16
v40@0:8@16@24@?32
@32@0:8@16@24
B20@0:8I16
@40@0:8@16@24^@32
@"NSMutableSet"
@"MRDPhoneCallObserver"
@24@0:8^{_NSZone=}16
B28@0:8f16^@20
f16@0:8
v24@0:8Q16
@"MRDAVRoutingDataSource"
I24@0:8@16
v28@0:8I16@20
@20@0:8I16
@"NSMutableArray"
@28@0:8@16I24
B32@0:8@16@24
B36@0:8@16@24I32
@?24@0:8@16
I16@0:8
v20@0:8I16
@"MRDAVRoute"
v24@0:8^{__IOHIDEvent=}16
v24@0:8I16I20
^{__IOHIDEventSystemClient=}
@28@0:8@16i24
i16@0:8
v20@0:8B16
d16@0:8
v28@0:8@16B24
@20@0:8B16
@"NSArray"
@"NSData"
@"MRPlaybackQueue"
@"MRDNowPlayingPlayerClientPlaybackState"
@"MROSTransaction"
@"MRPlaybackQueueSubscriptionController"
@"<MRDNowPlayingPlayerClientDelegate>"
@"MRPlayer"
@28@0:8I16@20
q24@0:8@16
v40@0:8@16@24@32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
@"CUBluetoothClient"
@"NSNetService"
@"<MRDBonjourRemoteControlServiceDelegate>"
v24@0:8@"MRXPCConnectionMonitor"16
v36@0:8@16I24@28
v36@0:8@16f24@28
v28@0:8I16@"NSError"20
v24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v24@0:8@"MRAVEndpoint"16
v36@0:8@"MRAVEndpoint"16I24@"MRAVOutputDevice"28
v36@0:8@"MRAVEndpoint"16f24@"MRAVOutputDevice"28
v32@0:8@"MRAVEndpoint"16@"MRAVOutputDevice"24
v32@0:8@"NSArray"16@"MRAVRoutingDiscoverySessionConfiguration"24
@"NSXPCConnection"
@"MRDAVHostedExternalDevicePendingClientState"
@"MRXPCConnectionMonitor"
@"MRDMediaRemoteClient"
@"NSError"
@"MRAVDistantEndpoint"
@"NSNumber"
@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications"
@36@0:8i16@20@28
@"NSSet"
@36@0:8@16@24B32
@"NSHashTable"
@"NSDictionary"
@"MROrigin"
@"MRClient"
@"AVOutputDeviceDiscoverySession"
@40@0:8@16@24@32
v56@0:8@16@24@32@40@48
@"<MRDRapportRemoteControlServiceDelegate>"
@"MRCompanionLinkClient"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"MRRapportTransportConnection"
@"<NSObject>"
v32@0:8@16I24I28
v32@0:8@"MRNowPlayingController"16@"MRNowPlayingPlayerResponse"24
v32@0:8@"MRNowPlayingController"16I24I28
v40@0:8@"MRNowPlayingController"16@"MRPlaybackQueue"24@"MRPlaybackQueue"32
v32@0:8@"MRNowPlayingController"16@"NSArray"24
v40@0:8@"MRNowPlayingController"16@"NSArray"24@"NSArray"32
v32@0:8@"MRNowPlayingController"16@"NSDate"24
v40@0:8@"MRNowPlayingController"16@"MRClient"24@"MRClient"32
v32@0:8@"MRNowPlayingController"16@"MRPlayerPath"24
v24@0:8@"MRNowPlayingController"16
v32@0:8@"MRNowPlayingController"16@"NSError"24
@"<MRDProximityControllerDataSource>"
@"MRDDisplayMonitor"
v32@0:8d16@?24
@?16@0:8
v24@0:8@?16
@"NSTimer"
v32@0:8@16Q24
v28@0:8@16I24
v32@0:8@"MRAVClusterController"16Q24
v28@0:8@"MRAVClusterController"16I24
v32@0:8@?16@24
v48@0:8@16{?=^QQ}24@40
@"MRDBrowsableContentAPICoordinator"
v32@0:8I16B20@?24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?I@"NSError">16
v32@0:8I16B20@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v36@0:8@16@24I32
v32@0:8@"MRDHostedRoutingController"16@"NSArray"24
v36@0:8@"MRDHostedRoutingController"16@"NSArray"24I32
@"<MRDAVHostedDiscoverySessionDelegate>"
v32@0:8@"MREmulatedGameController"16@"_MRGameControllerPropertiesProtobuf"24
v32@0:8@"MRAVEndpoint"16@"NSError"24
Q24@0:8@16
@24@0:8Q16
Q24@0:8Q16
v28@0:8{_MRHIDButtonEvent=IIB}16
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRAVEndpoint"
@"MRPasscodeCredentials"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"MRDAVHostedDiscoverySession"16
@"NSXPCListener"
@32@0:8@16Q24
^{sqlite3=}
v24@0:8d16
@"<MRDPersonalDeviceControllerDelegate>"
@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"
@"MRDeviceInfo"
@"MRContentItem"
@40@0:8Q16@24@32
@32@0:8Q16@24
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v64@0:8@16@24Q32Q40@48@?56
v64@0:8@"MRTransaction"16@"NSArray"24Q32Q40@"NSObject<OS_dispatch_queue>"48@?<v@?>56
v32@0:8@"MRTransaction"16Q24
Q24@0:8@"MRTransaction"16
@"<MRDPinPairingDialogDelegate>"
v32@0:8@"MRProtocolClientConnection"16@"MRProtocolMessage"24
v32@0:8@"MRProtocolClientConnection"16@"NSError"24
v32@0:8@"NSStream"16Q24
v44@0:8@16@24I32@36
@"MRDIDSServerClientConnection"
@"MSVTimer"
@"MRAVRoutingDiscoverySessionConfiguration"
@"<MRDIDSRemoteControlServiceDelegate>"
@"NSRunLoop"
@"MRExternalDeviceTransportConnection"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16@0:8
@48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
v64@0:8@16@24@32@40@48@?56
v56@0:8@16@24@32@40@?48
I32@0:8@16@24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{MGNotificationTokenStruct=}
@"AVOutputContext"
@"<MRDDeviceInfoDataSourceDelegate>"
v24@0:8@"MRDNowPlayingDataSource"16
v32@0:8@"MRDDeviceInfoDataSource"16@"MRDeviceInfo"24
v20@0:8f16
v24@0:8I16B20
@20@0:8i16
v20@0:8i16
@"MRDNowPlayingClient"
@"MRMutableApplicationActivity"
@"MRDNowPlayingDataSource"
@"MRDDeviceInfoDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDAVRouteExtendedInfo"
v28@0:8B16q20
v32@0:8@16:24
@"<MRDNowPlayingStateObserverDelegate>"
@"MRDOutputDeviceRoutingDataSource"
v24@0:8@"MRDPersonalDeviceController"16
v24@0:8@"MRDLockScreenContentController"16
B24@0:8^@16
@"MRDNowPlayingServerResult"
@"<MRDLockScreenControllerDelegate>"
@"MRDLockScreenAssertion"
@"MRDPersonalDeviceController"
@"MRDLockScreenContentController"
@"SBSLockScreenContentAssertion"
@"<MRDConnectionLifetimeControllerDataSource>"
@"<MRDConnectionLifetimeControllerDelegate>"
v24@0:8@"MRExpanseManager"16
@"MROrigin"16@0:8
v24@0:8@"MROrigin"16
v36@0:8f16@20@?28
v72@0:8@16@24@32@40@48@56@?64
v28@0:8I16I20B24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v28@0:8I16@"NSDictionary"20
v24@0:8@"NSError"16
v32@0:8@"NSString"16@?<v@?f@"NSError">24
v36@0:8f16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?I@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v72@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSArray"48@"NSArray"56@?<v@?@"NSError">64
v32@0:8d16@?<v@?@"NSError">24
v28@0:8I16@"MRAVRoutingDiscoverySessionConfiguration"20
@"NSArray"16@0:8
v24@0:8@"NSArray"16
v36@0:8I16@20@28
v36@0:8f16@20@28
v28@0:8f16@20
@"MRExternalDevice"
@"MRExternalOutputContextDataSource"
@"MRAVRoutingDiscoverySession"
@"MRDConnectionLifetimeController"
v40@0:8@16d24@?32
v32@0:8@"MRCryptoPairingSession"16@"NSData"24
v32@0:8@"MRCryptoPairingSession"16@"NSString"24
v24@0:8@"MRCryptoPairingSession"16
v40@0:8@"MRCryptoPairingSession"16d24@?<v@?@"NSString">32
v32@0:8@"MRCryptoPairingSession"16@"NSError"24
v32@0:8@"MRDRemoteControlService"16@"MRDExternalDeviceServerClientConnection"24
v40@0:8@16Q24@32
v40@0:8@"MRDExternalDeviceServerClientConnection"16Q24@"_MRGameControllerPropertiesProtobuf"32
v40@0:8@"MRDNowPlayingStateObserver"16@"MRDeviceInfo"24@"MRPlayerPath"32
v32@0:8@"MRDNowPlayingStateObserver"16@"MRPlayerPath"24
v32@0:8@"MRDNowPlayingStateObserver"16@"MRNowPlayingState"24
v40@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"MRPlayerPath"32
v36@0:8@"MRDNowPlayingStateObserver"16I24@"MRPlayerPath"28
v36@0:8@16@24B32
v32@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24
v36@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24B32
v32@0:8@"MRDSleepObserver"16@?<v@?>24
v24@0:8@"MRDSleepObserver"16
v48@0:8@16@24@32@40
v48@0:8@"MRDTextEditingService"16@"NSString"24@"MRTextEditingAttributes"32@"RTIDataPayload"40
v40@0:8@"MRDTextEditingService"16@"NSString"24@"RTIDataPayload"32
v40@0:8@"MRDTextEditingService"16@"MRTextEditingAttributes"24@"RTIDataPayload"32
v24@0:8@"MRDTextEditingService"16
v32@0:8@"MRDTextEditingService"16@"NSString"24
v40@0:8@16@?24@?32
@24@0:8@?16
B32@0:8@16^@24
v32@0:8q16@?24
v40@0:8@16q24@?32
B32@0:8q16@24
v40@0:8Q16@24@32
v24@0:8B16B20
v36@0:8{_MRHIDButtonEvent=IIB}16@28
v64@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16Q48@56
v48@0:8@16@24@32@?40
B40@0:8@16@24@32
B48@0:8@16@24@32@40
@"MRDSystemHIDEventManager"
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"CUPairingManager"
@"MROutputContextController"
@"MRDRemoteControlService"
v24@0:8@"MRDHostedExternalDeviceManager"16
@32@0:8@16^B24
@40@0:8@16@24Q32
@"MRDHostedExternalDeviceManager"
v28@0:8@"MRDLockScreenController"16B24
v32@0:8@"MRDLockScreenController"16@"MRPlayerPath"24
v56@0:8@16@24q32q40@48
v56@0:8@"MRDElectedPlayerController"16@"MRPlayerPath"24q32q40@"NSString"48
v40@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24@"MRDNowPlayingPlayerClient"32
v32@0:8@"MRDNowPlayingClient"16@"MRClient"24
v32@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24
v28@0:8@"MRDNowPlayingClient"16B24
v28@0:8@16f24
v40@0:8@"MRDNowPlayingOriginClient"16@"MRDeviceInfo"24@"MRDeviceInfo"32
v36@0:8@"MRDNowPlayingOriginClient"16@"MRPlayerPath"24I32
v32@0:8@"MRDNowPlayingOriginClient"16@"MRApplicationActivity"24
v32@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24
v28@0:8@"MRDNowPlayingOriginClient"16I24
v28@0:8@"MRDNowPlayingOriginClient"16f24
v32@0:8@"MRDNowPlayingOriginClient"16@"NSArray"24
v24@0:8@"MRDNowPlayingOriginClient"16
v32@0:8@"MRDNowPlayingPlayerClient"16@"MRPlayer"24
v28@0:8@"MRDNowPlayingPlayerClient"16B24
v28@0:8@"MRDNowPlayingPlayerClient"16I24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSData"24
v32@0:8@"MRDNowPlayingPlayerClient"16@"MRPlaybackQueue"24
v32@0:8@"MRDNowPlayingPlayerClient"16Q24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSArray"24
v36@0:8@16I24@?28
v36@0:8@16f24@?28
v40@0:8@16B24B28@?32
v44@0:8B16d20@28@?36
v36@0:8B16@20@?28
v36@0:8I16@20@?28
v40@0:8Q16@24@?32
v40@0:8I16B20@24@?32
v56@0:8@16q24q32@40@?48
v28@0:8B16@?20
B36@0:8@16@24B32
@"MRDNowPlayingPlaybackQueueServer"
@"MRDElectedPlayerController"
@"MRDLockScreenController"
@"MRDProximityController"
@"MRDNowPlayingOriginClient"
@"MRDNowPlayingPlayerClient"
@"<MRDNowPlayingClientDelegate>"
@"BKSApplicationStateMonitor"
v24@0:8@"MRDMediaRemoteClient"16
v36@0:8@"MRDVirtualAudioInputServer"16I24@"MRDVirtualAudioInputServerDevice"28
v32@0:8@"MRDPhoneCallController"16@"MRDRemoteControlCommand"24
@"NSObject<OS_xpc_object>"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"NSObject<OS_dispatch_source>"
@"FBSDisplayLayoutMonitor"
@44@0:8q16i24@28@36
v48@0:8@16@?24@32@?40
v44@0:8@16B24@28@?36
v32@0:8@16q24
v32@0:8q16@24
q32@0:8@16q24
@40@0:8@16q24^@32
@"<MRDElectedPlayerControllerDelegate>"
v24@0:8@"AVOutputContext"16
v40@0:8@"AVOutputContext"16@"NSData"24@"AVOutputContextCommunicationChannel"32
v32@0:8@"AVOutputContext"16@"AVOutputContextCommunicationChannel"24
v32@0:8@"NSData"16@"APReceiverMediaRemoteCommunicationChannel"24
v24@0:8@"APReceiverMediaRemoteCommunicationChannel"16
v40@0:8@16Q24@?32
v32@0:8Q16@24
@"NSMapTable"
@"<MRDAirPlayRemoteControlServiceDelegate>"
v44@0:8@16@24@32B40
v44@0:8@16@24@32I40
v48@0:8@16@24@32I40B44
@"MRApplicationActivity"
@"MROutputContextDataSource"
@"_MRAVAirPlaySecuritySettingsProtobuf"
v32@0:8@"MRDAirPlayRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDBonjourRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDRapportRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDExternalDeviceServerClientConnection"32@0:8@"MRDIDSRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDAirPlayRemoteControlService"
@"<MRDRemoteControlServiceDelegate>"
@"MRDBonjourRemoteControlService"
@"MRDRapportRemoteControlService"
@"MRDIDSRemoteControlService"
v32@0:8@"CXCallObserver"16@"CXCall"24
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
@32@0:8@16d24
v44@0:8I16@20@28@?36
v64@0:8Q16@24d32@40@?48@?56
v56@0:8@16d24@32@?40@?48
v44@0:8f16@20@28@?36
v80@0:8@16@24@32@40@48@56@64@?72
v40@0:8d16@?24@32
@32@0:8@16^@24
@"MRDOriginForwarder"
@"MRAVOutputDevice"
@"MRAVOutputContext"
@"<MRXPCConnectionMonitorDelegate>"
v40@0:8@16@24q32
v40@0:8@"MRDAVSystemEndpointController"16@"MRUpdateActiveSystemEndpointRequest"24q32
v32@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24
B40@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24@"NSString"32
@64@0:8@16@24@32@40@48@56
v48@0:8@16q24@32@?40
v28@0:8@16i24
@32@0:8@16q24
v28@0:8i16@20
@56@0:8@16@24@32@40@?48
v36@0:8@16B24@28
@"MRDAutoConnectionController"
@"MRDExternalDeviceHomeServer"
@"NSOperationQueue"
@"MRDAVLocalDeviceCommitManager"
@"MRDAVHostedRoutingService"
@"MRDAVSystemEndpointController"
@"MSVSystemDialog"
^{IONotificationPort=}16@0:8
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDHostedExternalDeviceManagerDelegate>"
@"<MRDVirtualAudioInputServerDelegate>"
v24@0:8@"SBSRemoteAlertHandle"16
v32@0:8@"SBSRemoteAlertHandle"16@"NSError"24
@36@0:8@16I24@28
@"SBSRemoteAlertHandle"
B24@0:8Q16
B40@0:8q16@24d32
v36@0:8@16B24@?28
v32@0:8B16B20@24
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRXPCConnection"
@"MRDMediaRemoteUIService"
B48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
^{__IOHIDUserDevice=}16@0:8
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
@48@0:8@16q24@?32@?40
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<MRDLockScreenContentControllerDelegate>"
@"MRMediaSuggestionPreferences"
@52@0:8I16@20@28@36@44
@24@0:8^{__CFString=}16
@32@0:8^{_NSZone=}16#24
v32@0:8@16^{__CFString=}24
@"AVOutputDevice"
[SystemEndpointController] Reevaluating %{public}@ActiveEndpoint because %{public}@
[SystemEndpointController] %{public}@
[SystemEndpointController] %@SystemEndpoint remains <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
[SystemEndpointController] Updating activeEndpointInfo %@
Caching resolved player path %{public}@ for context %{public}@.
No cache entry found.
Sending cachable command to player path %{public}@ for context %{public}@.
Got a cache creating command from assistant, context: %{public}@.
Performing early return of successful status for backwards compatibility.
Expiring player path for context %{public}@.
Got a cacheable command from assistant, context: %{public}@.
Adding command to assistant cache, context: %{public}@.
Redirecting to cached path: %{public}@
No assistant cache active, context: %{public}@.
Command <%{public}@> ignored because of device state
Broadcasting command <%{public}@> to client: <%@>
Broadcast command %{public}@ timedout after %lf seconds
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %{public}@: %{public}@
Destroying remoteUIService for client: %@
Error for fade out state. Status = %u.
Requesting fade in on next playback for client %{private}@
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
Command ignored because of device state: %{public}@
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Set AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute for command %{public}@
Command <%{public}@> ignored because of pre-processing error %{public}@.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ failed to reply to command (SendCommandErr = %@)
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Sending previously queued command %{public}@ to client %{public}@.
Removing queued commands for %{public}@ %{public}@
Removing queued commands because %{public}@ %@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because of active SharePlay activity.
Ignoring command because a phone call or FaceTime is active.
Purging command: %{public}@
Request: %{public}@<%{public}@> for %{public}@
Response: %{public}@<%{public}@> returned <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds
Set: %{public}@ setting %{public}@ from <%{public}@> to <%{public}@>
Set: %{public}@ setting %{public}@ to <%{public}@>
[MRDNowPlayingPlayerClient] Successfully write artworkData <%@> to disk %@
[MRDNowPlayingPlayerClient] Could not write artworkData to url <%@> with error %@
[MRDNowPlayingPlayerClient] Could not write artworkData directory <%@> with error %@
[MRDNowPlayingPlayerClient] Taking hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] Removing hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] isPictureInPictureEnabled changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] PlaybackState changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] isPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] CanBeNowPlayingPlayer changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionType changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] MXSessionIDs changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionID changed from %u to %u for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is being asked to make artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ already has an in flight artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is making artworkRequest for %{public}@
[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@
[MRDRemoteControlNetworkService] Starting network service: %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Stopping network service %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Did accept connection with service: %{public}@ using type: %{public}@ input: %{public}@ output: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement success with service: %{public}@ using type: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement failed with service: %{public}@ error: %{public}@
[MRDRemoteControlNetworkService] Retrying after 30s...
[MRDRemoteControlNetworkService] Updating txtData because deviceInfo changed...
[MRDRemoteControlNetworkService] Updating txtData because device restrictions changed...
[MRDRemoteControlNetworkService] Updating txtData: %{public}@
[MRDRemoteControlNetworkService] Stopping bonjour service %{public}@
[MRDRemoteControlNetworkService] Initializing bonjour service for type %{public}@
Configuring remote control network service with includesPeerToPeer = %s
[HostedExternalDeviceClient] Caching connectionState %@ %@ for %@
[HostedExternalDeviceClient] Caching deviceName %@ for %@
[HostedExternalDeviceClient] Caching customData %@ %@ for %@
[HostedExternalDeviceClient] Caching endpoint %@ for %@
[HostedExternalDeviceClient] Caching volumeCapabilities %@ outputDevice %@ for %@
[HostedExternalDeviceClient] Caching volume %lf outputDevice %@ for %@
[HostedExternalDeviceClient] Caching didAddOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didChangeOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didRemoveOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching discoverySessionOutputDevicesChanged %@ configuration %@ for %@
[HostedExternalDeviceClient] Restoring state %@ for %@
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from system screen and system music contexts: %{public}@ %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[MRDRapportRemoteControlServiceConnection] Connecting remoteControlChannel to <%@->%@/%@>...
[MRDRapportRemoteControlServiceConnection] Disconnecting remoteControlChannel from <%@->%@/%@>...
[ProximityController] lockscreen: %@, controlcenter: %@
[ProximityController] Removing all nearby devices because screen off.
[MRDAVOutputContextManager] Returning active outputContext %@ for: %@
[MRDAVOutputContextManager] Returning reserved outputContext %@ for: %@
[MRDAVOutputContextManager] Reusing inactive outputContext %@ for: %@ (%@)
[MRDAVOutputContextManager] Created new outputContext %@ for: %@
[MRDAVOutputContextManager] Re-building output context state in response to mediaserverd death
[MRDAVOutputContextManager] Attempted to process output context with nil contextID: %{public}@
[MRDAVOutputContextManager] OutputContext became active %@ with: %@
[MRDAVOutputContextManager] OutputContext became inactive %@
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
[LocalDeviceCommitManager] Skipping delayed initial commit because an AirPlay session is active
[LocalDeviceCommitManager] Starting nowplaying session for client: %@
[LocalDeviceCommitManager] Delaying start completion because a stop operation is in progress
[LocalDeviceCommitManager] Stopping nowplaying session for client: %@
[LocalDeviceCommitManager] Topology change involving local device began with identifier: %@
[LocalDeviceCommitManager] Topology change involving local device finished with identifier: %@
[LocalDeviceCommitManager] <%@> Skipping commit of local device because device requires command redirection
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a nowplaying session is active
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a topology change is in progress
[LocalDeviceCommitManager] <%@> Enqueueing completion because there is an ongoing commit request
[LocalDeviceCommitManager] Timed out waiting to commit local device with reason: %@
Update: %{public}@<%{public}@> %{public}@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[HostedDiscoverySession] Caching outputDevices %@ for %@
[HostedDiscoverySession] Caching endpoints %@ for %@
[HostedDiscoverySession] Restoring outputDevices %@ for %@
[HostedDiscoverySession] Restoring endpoints %@ for %@
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
Failed to make endpoint due to no qualified group leader in devices: %{public}@
%{public}@ - Endpoints changed
%{public}@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDPersonalDeviceController] Restoring personal device state for devices %@. Remaining time %f.
[MRDPersonalDeviceController] Recalculating state for reason: %@
[MRDPersonalDeviceController] New personal device %@ recently attached.
[MRDPersonalDeviceController] Timeout reached. Personal devices %@ are now stale.
Attempted to enqueue disallowed background task %@
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %ld
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ %@ sending client %@ subscribed packets %@
[MRTransactionServer] %@ received ack
[MRTransactionServer] %@ sending client %@ subscribed packets %@
unable to get an output device identifier, device will not be added to protobuf's grouped devices: %{public}@
Created deviceInfo: %{public}@
Warning: Unknown device network ID
Failed to archive device info
Failed to write device info file
Failed to unarchive device info data
[IDSRemoteControlService] Connecting discoveryChannel to <%@> for reason <%@>...
[IDSRemoteControlService] No device avaiable to connect discoveryChannel to <%@> for reason <%@>
[IDSRemoteControlService] Connecting remoteControlChannel to <%@-%@>...
[IDSRemoteControlService] Disconnecting remoteControlChannel from %@-%@...
[MRDNowPlayingPlaybackQueueServer] Handling playbackQueueRequest <%{public}@> from <%{public}@> for <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Modifying playbackQueueRequest <%{public}@< to <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Error handling playbackQueueRequest <%{public}@>: <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Relaying playbackQueueRequest <%{public}@> to <%{public}@>...
[MRDNowPlayingPlaybackQueueServer] Relay responded to playbackQueueRequest <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Error relaying playbackQueueRequest <%{public}@>: %{public}@
[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:
[MRDNowPlayingOriginClient] Application Activity %{public}@ already set
[MRDNowPlayingOriginClient] Removing nowPlayingClient %{public}@ for %{public}@
[MRDNowPlayingOriginClient] _reevaluateStateWithReason %@
[MRDNowPlayingOriginClient] ActiveNowPlayingClient changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Taking activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] Removing activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] ActiveNowPlayingPlayersClients changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Creating nowPlayingClient for %{public}@
[TelevisionStateObserver] Registering for Now Playing Updates
[TelevisionStateObserver] Unregistering for Now Playing Updates
[TelevisionStateObserver] Registering for volume control updates
[TelevisionStateObserver] Unregistering for volume control updates
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %li for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
[MRDLockScreenController] Setting playerPath from %{public}@ to %{public}@
[MRDLockScreenController] Deferring setting playerPath from %{public}@ to %{public}@ because changeType is <%{public}@> and lock screen is <%{public}@>
[MRDLockScreenController] Restoring defered playerPath from %{public}@ to electedPlayerPath %{public}@
[MRDLockScreenController] Reevaluating shouldShowLockScreen for reason %@
[MRDLockScreenController] Delaying deactivation of lockScreen
[MRDLockScreenController] LockScreen now showing empty controls. Will be dismissed when lock screen is no longer visible
[MRDLockScreenController] Activating lockScreenAssertion
[MRDLockScreenController] Deactivating lockScreenAssertion
[MRDLockScreenController] lockScreenAssertion error %{public}@
[MRDCLC] <%p> Initializing for origin-%@-%ld.
[MRDCLC] <%p> Deallocating.
[MRDCLC] <%p> Re-evaluate for origin-%@-%ld because %@.
[MRDCLC] <%p> Setting timer to disconnect origin-%@-%ld in %.2lf seconds.
[MRDCLC] <%p> Disconnecting origin-%@-%ld.
[MRDCLC] <%p> Will maintain connection for origin-%@-%ld because %@.
[MRDCLC] <%p> Pause pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Cancel pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Scheduling playback timer for %.2lf seconds.
[MRDCLC] <%p> Cancelling playback timer.
[MRDAVHostedExternalDevice] %{public}@ is tombstoned, rejecting new XPC connection %{public}@
[MRDAVHostedExternalDevice] %{public}@ is accepting new XPC connection %{public}@ %@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following registered callbacks on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following notifications on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is subscribing to the following player paths on %{public}@: %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Client %{public}@ is requesting to connect to external device using hosted endpoint %{public}@ with options %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Already connected to external device
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to disconnect from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to unpair from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to set output device volume to %f using output device %{public}@ on hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to modify hosted endpoint %{public}@ (adding=%{public}@, removing=%{public}@,  setting=%{public}@,)
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to send %llu bytes of custom data with name %{public}@ using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] [Client %{public}@ is requesting to ping external device with timeout %f using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV join.
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV leave.
[MRDAVHostedExternalDevice] %{public}@ Checking for match of endpoint: %{public}@ and active TV: %{public}@
[MRDAVHostedExternalDevice] %{public}@ maintaing no localRoute for %{public}@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ removing localRoute for %@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ adding localRoute for %@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ connection state did change to %{public}@ with error %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ device name did change to %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did receive %llu bytes of custom data with name %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volumeCapabilities did change to %{public}@ for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volume did change to %f for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did add output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did change output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did remove output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ client did disconnect: %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint <%{public}@> reevaluating volume control because %{public}@ changed from <%{public}@> to <%{public}@>
[ExternalDeviceServer] Removing television endpoint for client %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] didReceiveApplicationClientStateDidChange %@
[ExternalDeviceServer] didReceivePlayerStateDidChange %@
[ExternalDeviceServer] didReceiveClientDidUnregister %@
[ExternalDeviceServer] didReceivePlayerDidUnregister %@
[ExternalDeviceServer] didReceiveNowPlayingClientChange %@
[ExternalDeviceServer] didReceiveNowPlayingPlayerChange %@
[ExternalDeviceServer] didReceivePlaybackQueueChange %@
[ExternalDeviceServer] didReceiveContentItemChange %@ %@
[ExternalDeviceServer] didReceivePlaybackQueueCapabilitiesChange %@
[ExternalDeviceServer] didReceiveSupportedCommandsChange %@
[ExternalDeviceServer] didReceivePlayStateChange %@
[ExternalDeviceServer] didReceiveVolumeControlCapabilitiesChange %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
Error removing output device from context - device or uid is nil - Output Device: (%@ - %{public}@ - isLocal: %{BOOL}u) Localized Output Device: (%@ - %{public}@)
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@ with error %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] %@Transaction received packets %@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ to playerPath: %{public}@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ for playerPath: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
Checking if device with managedConfigDeviceID, %{public}@, allowed to connect
No managedConfig allow list found. Allowing all devices
Device with managedConfigDeviceID, %{public}@, allowed: %d
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Creating new PairingSession for client %{public}@ from message %{public}@
[ExternalDeviceServer] Processing %lld bytes of crypto pairing data from client %{public}@
[ExternalDeviceServer] Error processing pairing exchange data. %{public}@
[ExternalDeviceServer] Handling pairing failure with OSStatus = %d
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Failed to register new virtual touch device
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Error setting devices on output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
[ExternalDeviceServer] Completed recon session: %{public}@
[ExternalDeviceServer] Reseting Facade
[ExternalDeviceServer] Facading NowPlayingClient from %@ to %@
Failed to create external device transport for %{public}@, group leader: %{public}@
- Selecting devices (non-default selection options) from: %{public}@
- Selection options: %{public}@
- Updating preferred group leader %{public}@ based on better criteria: %{public}@
- Updating preferred group leader because found a remote host: %{public}@
- Updating preferred group leader because locally hosting the group
-- Final preferred group leader: %{public}@ based on criteria: %{public}@
Skipping invalid output device: %{public}@
[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@ for: %{public}@
Ignoring uncommitted output device: %@ (%@)
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
PID Mismatch: Client %{public}@ is trying to make a nowPlayingClient with a different pid %d
PID Mismatch: Client %{public}@ is trying to making a nowPlayingClient with a different bundleID %{public}@
Resolving %{public}@ -> %{public}@ for client %@
Resolving Exisiting %{public}@ -> %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Client %{public}@ requesting to register origin %{public}@
Client %{public}@ requesting to re-register origin %{public}@
Client %{public}@ requesting to unregister origin %{public}@
Not unregistering origin because is local origin
Not unregistering origin because other clients have a reference %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Unable to set can be now playing app. No now playing client found for %@
Unable to set can be now playing player. No player client found for %@
Setting hardware remote behavior to %{public}@ for client %{public}@
Unable to set playback state. No now playing client found for %@
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app without entitlement. Ignoring.
ERROR: now playing client could not be found for setting supported commands
Unable to set properties from message %@. No player client found.
Unable to set properties from message %@. No origin client found for %@
%{public}@ Unable to get audio format content info for origin: %{public}@ | client %{public}@
Posting contentItemChange for path %{public}@ to xpcClient %{public}@ %{public}@
Posting %@ because activePlayerPath changed from <%{public}@> to <%{public}@>
Posting %@ with <%@>
Adding new origin %@
Removing origin %{public}@
Removing active origin %{public}@. Setting active origin to the local one.
Setting active origin from %@ to %@
Persisting active origin %@
Failed to initialize temporary directory
[MRDNowPlayingClient] Setting pid for %{public}@ to %d
[MRDNowPlayingClient] Timeout trying to pid for %{public}@
[MRDNowPlayingClient] CanBeNowPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingClient] Creating playerClient for %{public}@
[MRDNowPlayingClient] ActiveNowPlayingPlayer changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] ParentAppBundleIdentifier changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] BundleIdentifierHierarchy changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] Visibility changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] TintColor changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] AppIcon changed from %{public}@ to %{public}@ for %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %{public}@
Removing client %{public}@
Posting Notification %{public}@
UserInfo %{public}@
Posting Custom Notification %{public}@ to %{public}@
Custom UserInfo %{public}@
CompanionLinkClient invalidation
CompanionLinkClient interrupted
Error activating CompanionLinkClient %{public}@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Client: %{public}@ Set system volume: overriding volume warning
Client: %{public}@ Set system volume: setting volume to %f (warning state = %{public}s)
Client: %{public}@ Adjust system volume: stepping volume by %f (warning state = %{public}s)
Disallowed bundle ID requested for installation status: %{public}@
No app bundle ID provided in call to GetMediaAppIsInstalled message
Unable to wake system app [failed to launch] %{public}@
Unable to wake system app [failed to find client]
Unable to bless app [sync task assertion acquisition failed]
Unable to bless app [task assertion failed]
Unable to bless app [bless failed]
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Client %{public}@ invalidated.
Pidversion out of date for %d
No process for pid %d
Unable to get boot session ID, not restoring clients
Restoring client pids %{public}@
Restoring expected client pids %{public}@
Resetting client and expected pids
SIGTERM received, preparing to shut down
[MRDAutoConnectionController] Begin DiscoverySession %@ because %@
[MRDAutoConnectionController] End DiscoverySession %@
Request: %{public}@<%{public}@> for %{public}@ because %{public}@
[MRDAutoConnectionController] Removing outdated endpoint <%@> (<%@>)
[MRDAutoConnectionController] Removing endpoint <%@> (<%@>)
[MRDElectedPlayerController] Failed to connect to proactive endpoint %@ with error %@. Reset to local.
[MRDElectedPlayerController] Ignoring activeSystemEndpointDidChange for %@ because a new change for %@ was received
[MRDElectedPlayerController] Reevaluating electedPlayer event = %{public}@, reason =  %{public}@
[MRDElectedPlayerController] ElectedPlayer changed from <%@> to <%@> changeType=<%{public}@>, event=%{public}@, eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] ElectedPlayer remained <%@> eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because previousPlayerPath %{public}@ does not exist anymore
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because changeType uninitialized and playerPath %{public}@ is nil and previousPlayerPath %{public}@ is still valid
[AirPlayRemoteControlService] Starting AirPlay remote control service
[AirPlayRemoteControlService] Stopping AirPlay remote control service
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
%{public}@ Topology change failed with error: %@
%{public}@ Failed to register custom origin with ID: %u
%{public}@ Updated grouped devices to: %{public}@
%{public}@ Added localDevice %{public}@ to outputContext %@
%{public}@ Removed groupLeader %{public}@ from outputContext %@
%{public}@ Removed localDevice %{public}@ from outputContext. Clearing all localOrigin nowPlayingData
%{public}@ Removed localDevice %{public}@ from outputContext %@
%{public}@ GroupLeader %{public}@ failed verification on context %{public}@
%{public}@ Calling %lu completions - Original reason: %{public}@
%{public}@ Already committing output device: %{public}@ to: %{public}@. New reason: %{public}@
%{public}@ Committing output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Failed to commit output device: %{public}@ to: %{public}@ because %{public}@ - %{public}@
%{public}@ Skipping commit of output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Begin Forwarding Origin Data from %{public}@ to %{public}@ for outputContext %{public}@
%{public}@ Destroying playerPaths for origin: %{public}@, client: %{public}@
%{public}@ Destroy playerPaths for origin: %{public}@ for client: %{public}@ finished with error: %{public}@
[ConnectionMonitor] Checked-in connection %@ in %lf seconds
[ConnectionMonitor] Checking connection %@
[ConnectionMonitor] Updated connectionStatus = %@ for %@ after %lf seconds
[ConnectionMonitor] Resumed connection %@ in %lf seconds
[AVRoutingServer] received airplay active notification: %llu
[AVRoutingServer] Failed to register for airplay active events. status = %u
[AVRoutingServer] current airplay active state = %d
[AVRoutingServer] Failed to get current airplay active state. status = %u
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@ (status = %{public}@)
[AVRoutingServer] Authorization request using saved password for %{public}@: %@
[AVRoutingServer] Authorization token failed for %{public}@ : %@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to clear all AirPlay route passwords...
[AVRoutingServer] Error %ld trying to delete passwords
[AVRoutingServer] No passwords to delete
[AVRoutingServer] Error %ld trying to query passwords
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Could not find endpoints for migration between %{private}@ and %{private}@.
[AVRoutingServer] Failed to remove output device UIDs: %{public}@ from parent group with error: %{public}@
[AVRoutingServer] No group leader, nothing to remove for: %{public}@
[AVRoutingServer] Failed to find external device for outputDeviceUID: %{public}@
[AVRoutingServer] Available external devices: %{public}@
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Handling authorization request with custom callback for route %{public}@
[AVRoutingServer] Custom authorization callback returned for route %{public}@
[AVRoutingServer] Prompting user with authorization request route %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting transaction: %{public}@
[AVRoutingServer] Discovery ended. Clearing transaction %{public}@
[AVRoutingServer] Suppressing cluster connection error. %.2f since last alert
[AVRoutingServer] Error connecting to cluster member: %{public}@
[AVRoutingServer] Timed out waiting for action on cluster connection error for route: %{public}@
[AVRoutingServer] Failed to open TVSettings: %{public}@
[AVRoutingServer] AirPlay Error %ld: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %ld: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
[AVRoutingServer] Error getting AirPlay security settings dictionary (OSStatus = %d)
Resolving endpoint for output device UIDs %{public}@
Returning endpoint with only a subset of specified output devices:
    - %{public}@
    + %{public}@
Resolved to endpoint: %{public}@
Setting output devices on endpoint: %{public}@
Error adding devices to endpoint:%{public}@ error:%{public}@
Could not make endpoint for output devices: %{public}@
Predicting endpoint for output device UIDs %{public}@
[iOSSim Data Source] Failed to load playback queue: %{public}@
POWER: Did recieve power callback %{public}@-%{public}@
POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds
[MRDHostedExternalDeviceManager] Created new hostedExternalDevice=%{public}@, endpoint=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, endpointIdentifier=%{public}@ reason=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, outputDeviceIdentifier=%{public}@ reason=%{public}@
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MediaServerVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
Attempting to activate remote alert handle.
Creating remote alert handle for remote view controller: %{public}@
Remote alert handle did activate.
Remote alert handle did deactivate.
Remote alert handle did invalidate with error: %@
Client switched route discovery mode to: %lu
Client switched output device discovery mode to: %lu
Unable to bless client [sync task assertion acquisition failed] %{public}@
Failed to create assertion: %{public}@
Unable to bless client [bless failed] %{public}@
Unable to relay message with id %lu
Custom origin registered: %@
Custom origin removed: %@
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@> for <%@>
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@>
[MRDMediaRemoteClient] Restoring connection with notification userInfo %@
Failed to make endpoint due to no qualified group leader among group discoverable devices: %{public}@, out of: %{public}@
Failed to create new hosted external device, missing pipe endpoint for UID: %{public}@
Unable to create IOHIDUserDevice
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
[MRDDisplayMonitor] Layout Changed %@
[MRDLockScreenContentController] failed to retrieve suggestions with error %@
Error blessing %@ for playback initialization. %@
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241123</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>mediaremoted</string>
<key>CFBundleIdentifier</key>
<string>com.apple.mediaremoted</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>19C47</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>15.2</string>
<key>DTSDKBuild</key>
<string>19C47</string>
<key>DTSDKName</key>
<string>iphonesimulator15.2.internal</string>
<key>DTXcode</key>
<string>1300</string>
<key>DTXcodeBuild</key>
<string>13A191</string>
<key>MinimumOSVersion</key>
<string>15.2</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mediaremoted</string>
<key>com.apple.BluetoothServices</key>
<true/>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.bluetooth.system</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.mediaremote.nearby-device</key>
<string>YES</string>
<key>com.apple.mediaremote.send-commands</key>
<true/>
<key>com.apple.mediaremote.set-now-playing-app</key>
<true/>
<key>com.apple.mediaremote.set-playback-state</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>WifiAddress</string>
<string>WifiAddressData</string>
<string>EthernetMacAddress</string>
</array>
<key>com.apple.private.associated-domains</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
<key>com.apple.proximitycontrol</key>
<true/>
<key>com.apple.proximitycontrol.lockscreenControls</key>
<true/>
<key>com.apple.rootless.storage.coreduet_knowledge_store</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/private/var/containers/Bundle/</string>
<string>/Applications/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array>
<string>/private/var/tmp/com.apple.mediaremoted/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/MediaRemote/</string>
<string>/Library/UserConfigurationProfiles/EffectiveUserSettings.plist</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.powerlog.plxpclogger.xpc</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callcapabilities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.conversationmanager</string>
<string>com.apple.ProximityControl.server</string>
<string>com.apple.airplay.apsynccontroller.xpc</string>
<string>com.apple.airplay.receiver.mediaremote.services</string>
<string>com.apple.audio.AudioSession</string>
<string>com.apple.BluetoothServices</string>
<string>com.apple.callkit.callcontrollerhost</string>
<string>com.apple.commcenter.coretelephony.xpc</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.coremedia.admin</string>
<string>com.apple.coremedia.endpoint.xpc</string>
<string>com.apple.coremedia.endpointuiagent.xpc</string>
<string>com.apple.coremedia.routediscoverer.xpc</string>
<string>com.apple.coremedia.routingcontext.xpc</string>
<string>com.apple.coremedia.systemcontroller.xpc</string>
<string>com.apple.coremedia.volumecontroller.xpc</string>
<string>com.apple.coremedia.endpointremotecontrolsession.xpc</string>
<string>com.apple.GameController.gamecontrollerd</string>
<string>com.apple.identityservicesd.embedded.auth</string>
<string>com.apple.idsremoteurlconnectionagent.embedded.auth</string>
<string>com.apple.iohideventsystem</string>
<string>com.apple.iokit.powerdxpc</string>
<string>com.apple.mediaremoted.xpc</string>
<string>com.apple.PairingManager</string>
<string>com.apple.PineBoardServices</string>
<string>com.apple.PowerManagement.control</string>
<string>com.apple.SBUserNotification</string>
<string>com.apple.securityd</string>
<string>com.apple.server.bluetooth.le.att.xpc</string>
<string>com.apple.SharedWebCredentials</string>
<string>com.apple.SharingServices</string>
<string>com.apple.springboard.backgroundappservices</string>
<string>com.apple.springboard.services</string>
<string>com.apple.SystemConfiguration.configd</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.CoreDuet</string>
<string>com.apple.lockscreen.shared</string>
<string>com.apple.duetexpertd</string>
<string>com.apple.spotlightui</string>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mediaremote</string>
<string>com.apple.mediaremoted</string>
<string>com.apple.airplay</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.avfoundation</string>
<string>com.apple.coreaudio</string>
<string>com.apple.coremedia</string>
<string>com.apple.avfaudio</string>
<string>com.apple.ids</string>
<string>com.apple.conference</string>
<string>com.apple.facetime.bag</string>
<string>com.apple.da</string>
</array>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.ts.mach-task-name</key>
<true/>
<key>com.apple.sharing.ProximityClient</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.activateRemoteAlert</key>
<true/>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.lockScreenContentAssertion</key>
<true/>
<key>com.apple.springboard.remote-alert</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>modify-calls</string>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
MbP?
!$'*-0y369<?BEHyKNQTWZ]adgjmps
%@-%@-%@-%@-%@-%@
com.apple.mediaremote
type
date
event
eventdescription
selectionreason
eventreason
timesince
changeType
changeTypeDescription
v8@?0
B8@?0
Restoring previous
v12@?0B8
%@ origin registered <%@> (<%@>) 
origin de-registration of <%@> (<%@>) 
personal device was attached
Playback changed for %@
was not playing sort of recently <%lf> seconds ago
was playing recently <%lf> seconds ago
was not <%@> sort of recently <%lf> seconds ago
was <%@> recently <%lf> ago
was not playing recently <%lf> ago and was not <%@> recently <%lf> seconds ago
Could not find origin with deviceUID = <%@>
No %@SystemEndpoint
Internal Setting not set
local activePlayer %@ is playing
Fallback to previous
%@SystemEndpoint changed from <%@> to <%@> with changeType = <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
unknown
@"NSDictionary"8@?0
%@ endpoint disconnected and attempting to reconnect
v16@?0@"MRAVEndpoint"8
v24@?0d8@?<v@?B>16
%@Endpoint changed
com.apple.mediaremote.systemendpointcontroller.userselectedtimer
 %@ timeout event %@ after <%lf> seconds 
%@Endpoint timeout imminent
%@Endpoint is playing
%@Endpoint is local
com.apple.mediaremote.systemendpointcontroller.playbacktimer
%@ playback timedout event %@ after <%lf> seconds
SystemEndpoint
v32@?0@8@"NSDictionary"16^B24
Startup
StartUp
ConnectionAdded
ConnectionRemoved
UserSelected
UserSelectedTimeout
Playback
PlaybackTimeout
NowPlayingAppRemoved
migrationPlaybackSession
ResolveActiveEndpoint
invalid route error
from external device client
Analytics: 
com.apple.mediaremote.MRDRemoteControlServer
com.apple.mediaremote.MRDMediaRemoteUIService
v16@?0@"MRCommandResult"8
v20@?0I8@"NSArray"12
com.apple.mediaremote.broadcastcommand.%@
v32@?0@"NSString"8@"MRDRemoteControlContext"16^B24
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
@"NSData"16@?0@"_MRSendCommandResultMessageProtobuf"8
MRXPC_COMMAND_STATUSES_DATA_KEY
MRXPC_MEDIA_CONTROLS_CONFIGURATION_KEY
MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY
MRXPC_MEDIA_CONTROLS_STYLE_KEY
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@"NSError"8
MRXPC_MEDIA_CONTROLS_ROUTE_UID_KEY
MRXPC_MEDIA_CONTROLS_CENTER_KEY
MRXPC_COMMAND_KEY
Pause because migration
v24@?0@"MRDMediaRemoteClient"8@"NSError"16
Did not receive fade out notification
com.apple.mediaexperience.fadeoutappliedforplaybackhandoff
v12@?0i8
%@ started playback
phone call began
v16@?0Q8
FBSOpenApplicationErrorDomain
B16@?0@"NSString"8
com.apple.mediaservicesbroker.app
com.apple.SoundScapes
com.apple.MediaRemote.command
invoked.notify.client
%@.%@.%@.%@
%@.%@.%@
%@.%@
command<%@>=%@
com.apple.Fuse
com.apple.mediaremoted
com.apple.MediaPlayer.RemotePlayerService
airtunesd
tvairplayd
com.apple.HomePodCannedDemo
coreduetd
AVSystemController
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
AVSystemController_AllowAppToFadeInTemporarilyAttribute
MRXPC_COMMAND_OPTIONS_KEY
Client <%@> missing entitlement needed to send command <%@> to arbitrary apps. Sending to NowPlayingApp instead of <%@>.
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v32@?0@"NSString"8@"NSNumber"16^B24
com.apple.mediaremote.remotecontrol.routedcommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingDataSourceVolumeControlAvailableUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
com.apple.MRDAVRoutingDataSource.serialQueue
subclass must implement
canActivateStreamWithPlayerPath
B16@?0@"MRDNowPlayingOriginClient"8
B24@?0@"NSArray"8@"MROrigin"16
B16@?0@"MRDNowPlayingPlayerClient"8
B16@?0@"MRDNowPlayingClient"8
B24@?0@"NSArray"8@"MRPlayerPath"16
PlayerPath does not take up a slot thus is always allowed to activate
PlayerPath is already active
Number of currently activeStreams (%ld) is less that capacity (%ld) so allowing activation
Currently playing %ld %@ streams (max = %ld).
external
%@ (%@)
%@ (%@) + 
%@ on %@
com.apple.mediaremote.%@.%@
v32@?0@"NSNumber"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16^B24
%@ %p {
  playerPath = %@
  player = %@
  canBeNowPlayingPlayer = %@
  transaction = %@
  playbackState = %@
  inferredPlaybackState = %@
  playbackStateHistory = %@
  pictureInPictureEnabled = %@
  supportedCommands = %@
  capabilities = %@
  playbackQueue = %@
  subscriptionController = %@
supportedCommands
playbackQueue
nowPlayingItem
inferred playback state
playback state
playbackQueueCapabilities
q24@?0@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16
@"NSString"24@?0@"NSData"8@"NSString"16
@"NSString"16@?0@"MRContentItem"8
com.apple.mediaremoted.MRDNowPlayingPlayerClient/%@
true
false
v32@?0@"MRDNowPlayingPlayerClientArtworkRequest"8Q16^B24
v32@?0@"NSString"8@"NSMutableArray"16^B24
v32@?0@8Q16^B24
v24@?0^v8^{__CFError=}16
v32@?0@"NSString"8@"NSString"16^B24
v16@?0@"NSArray"8
v40@?0@"MRTransactionDestination"8@"NSArray"16@"MRPlayerPath"24@?<v@?I>32
%@-%@
CUBluetoothClient
CoreUtils
v16@?0@"NSData"8
v24@?0@"MRDeviceInfo"8@"NSError"16
<%@ %p "%@">
local.
%@ (pid=%d)
<%@ %p {
    %@-%d
    registeredCallbacks = %@
    registeredNotifications = %@
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSNumber"16^B24
    discoveryModes = %@
    subscribedPlayerPaths = %@
    pendingClientState = %@
    connection monitor = %@
B16@?0@"MRAVOutputDevice"8
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSArray"16^B24
WakingPlayerPathNotification
<%@ %p{
    connectionState=%@
    connectionStateError=%@
    name = %@
    endpoint = %@
    volume = %f
    volumeCapabilities = %@
    outputDeviceVolumes = %@
    outputDeviceVolumeCapabilities = %@
    modifications = %@
    discoveryResults = %@
   addedOutputDevices = %@
    changedOutputDevices = %@
    removedOutputDevices = %@
bundleID
audioSessionID
mxSessionIDs
isPlaying
B16@?0@"<MRDNowPlayingDataSourceObserver>"8
<%@, %p: sourceOrigin: %@ - destinationOrigin: %@>
v20@?0I8^{__CFArray=}12
v36@?0^v8I16^{__CFDictionary=}20@?<v@?^{__CFArray=}>28
v24@?0@"MRPlaybackQueue"8@"NSError"16
Could not map %@
v32@?0^v8^v16@?<v@?^v^{__CFError=}>24
v24@?0@"MRPlaybackSessionMigrateRequest"8@"NSError"16
v40@?0@"MRPlaybackSession"8@"MRPlaybackSessionMigrateRequest"16@"MRPlayerPath"24@?<v@?@"MRPlaybackSessionMigrateRequest"@"NSError">32
v32@?0^v8^v16@?<v@?^{__CFError=}>24
v40@?0^v8^{__CFError=}16^v24@?<v@?^{__CFError=}>32
%@-%@-%d
MediaPlayback
v32@?0@"NSArray"8@"MRAVEndpoint"16@"NSError"24
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
<Unknown>
com.apple.mediaremote.MRDRapportRemoteControlService.workerQueue
com.apple.mediaremote.remotecontrol.connect
destination
destinationGroupUID
session
v32@?0@"MRDeviceInfo"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSError">24
com.apple.mediaremote.remotecontrol.disconnect
MRDRapportRemoteControlService received disconect event
B16@?0@"MRDRapportRemoteControlServiceConnection"8
v24@?0@"MRDeviceInfo"8@"NSDictionary"16
com.apple.mediaremote.remotecontrol.reset
MRDRapportRemoteControlService received reset event
RapportRemoteControlChannel-<%@->%@/%@>
MRDMediaRemoteExternalDeviceServerClientInvalidatedNotification
v16@?0@"NSNotification"8
incomingRapportConnections
incomingRapportConnectionsDescription
source
source=%@(%@) session=%@
ProximityController(%@)
local=%@
active=%@
inactive=%@
reserved=%@
@16@?0@"MRAVOutputContext"8
v16@?0@"NSMutableDictionary"8
@"MRAVOutputContext"16@?0@"AVOutputContext"8
AVAudioSessionMediaServicesWereResetNotification
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
MRDAVLocalDeviceCommitManager
MRDAVLocalDeviceCommitManager.serial
MRDAVLocalDeviceCommitManager.completion
delayedInit
nowPlayingSessionDidStop
topologyChangeFinished-%@
didRemoveLocalDevice
clusterTypeDidChange
LocalDeviceCommitManager
_commitLocalDeviceWithReason
Failed to find local output device
Failed to find output context for: %@
Skipping commit of local device because it is already contained in context: %@
Committing output device: %@ to context: %@
v16@?0^{__CFError=}8
v24@?0@"MRAVOutputDevice"8@"NSError"16
MRXPC_INDEXPATH_DATA_KEY
v16@?0@"MRDMediaRemoteClient"8
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
BrowsableContent playback initiated
Sending initiatePlaybackMessage
MRXPC_BUNDLE_ID_KEY
com.apple.mediaremote.hostedDiscoverySession/serialQueue
discovery enabled at: %@ (%.0f s ago) until: %@ (duration %.0f s)
discovery never enabled
%@ %p {
    discovery mode = %@
    xpc connection = %@
    pid = %d
    bundle id = %@
    %@
    connection monitor = %@
com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)
<%@: %p - destination UID=%@ groupID=%@>
NowPlaying 
OutputDevices 
Volume 
Keyboard 
SystemEndpointUpdates 
<%@ %p {
    deviceInfo = %@
    lastSupportedMessageType = %ld
    virtualTouchDevices = %@
    registeredVirtualVoiceInputDevices = %@
    playbackQueueRequests = %@
    sessionPeer = %@
    pinPairingToken = %@
    serverDelegate = %@
    registeredUpdates = %@
    subscribedPlayerPaths = %@
    destinationOutputDeviceUID = %@
    destinationGroupID = %@
    destinationEndpoint = %@
    connection = %@
v16@?0I8I12
v24@?0@"MRAVEndpoint"8@"NSError"16
v16@?0@"MRPlayerPath"8
MRDExternalDeviceServer
ExternalDeviceServerDestination
com.apple.TVRemote
B16@?0@"MRCommandInfo"8
v32@?0@"NSNumber"8@"MREmulatedGameController"16^B24
@16@?0@"MRAVEndpoint"8
B24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
@"NSString"16@?0@"MRAVEndpoint"8
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
model
deviceID
AirPlayPortExtendedInfo
kMRDPersonalDeviceControllerPersonalDeviceStateDevicesKey
kMRDPersonalDeviceControllerPersonalDeviceStateDateKey
com.apple.mediaremote.MRDPersonalDeviceController
Personal devices did change.
Initial load with no persisted state.
com.apple.mediaremote.mrdpersonaldevicecontroller.overridetimer
Timeout reached.
v24@?0^{__CFArray=}8^{__CFError=}16
Companion Link Event
MRXPC_HOMEKIT_IDENTIFIER_KEY
RecentlyPlayedEntries
v32@?0@"NSDictionary"8Q16^B24
q24@?0@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"8@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"16
lastPlayingDate
lastNotPlayingDate
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
%@-%@-%@-%@-%@-%@(%@)-%@-%@
PLAYING
NOT PLAYING
deviceUID
playerPathDescription
contentItemDescription
MPStoreClientTokenDidChangeNotification
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
v12@?0I8
identifier
defaultGroupUID
LOCAL
DeviceInfo.plist
com.apple.mediaremote.MRDIDSRemoteControlServiceConnection.workerQueue
v32@?0@"MRIDSMessage"8@"NSString"16@"NSString"24
%@ %p
IDSWatch: %@
DiscoveryChannelMode: %@
Connections: %@
lastSentEndpoint: %@ (%.1fs ago)
Start
IDS Connected
IDSConnection Disconnected
MRDIDSRemoteControlService.setConnectionState
IDSDiscoveryChannel
New replacement connection %@-%@ established
IDSRemoteControlChannel-<%@/%@>
v16@?0@"MRIDSMessage"8
v24@?0q8@?<v@?@"NSString">16
v32@?0@"NSString"8@"MRDIDSRemoteControlServiceConnection"16^B24
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
MRXPC_ERROR_CODE_KEY
UserAssignedDeviceName
v24@?0^{__CFString=}8^{__CFDictionary=}16
com.apple.airplay.prefsChanged
com.apple.airplay.active
com.apple.airplay.advertisingDidChange
com.apple.MRDDeviceInfoDataSource.workerQueue
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
  origin = %@
  deviceInfo = %@
  volume = %f
  volume capabilities = %@
  time since playing = %lf
  is playing = %@
  active now playing client = %@
  override client = %@
  explicit now playing client = %@
  inferred now playing client = %@
  app activity = %@
  datasource = %@
  default supportedCommands = %@
q24@?0@"MRDNowPlayingClient"8@"MRDNowPlayingClient"16
all now playing clients = %@
volume
volumeCapabilities
q24@?0@"MRDNowPlayingPlayerClient"8@"MRDNowPlayingPlayerClient"16
computedNowPlayingClient
Updated computedNowPlayingClient.
explicitNowPlayingClient
Updated explicitNowPlayingClient.
inferredNowPlayingClient
Updated inferredNowPlayingClient.
overrideNowPlayingClient
Updated overrideNowPlayingClient.
applicationActivity
Updated applicationActivity.
RemoveAllClients
Removed nowPlayingClient.
v32@?0@"NSString"8@"NSData"16^B24
setNowPlayingDataSource
nowPlayingApplicationDidChange
nowPlayingApplicationPlaybackStateDidChange
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange
PlayerPictureInPictureEnabledDidChange
ActivePlayerDidChange
NowPlayingApplicationDidUnregisterCanBeNowPlaying
@"MRDNowPlayingClient"8@?0
com.apple.mediaremoted.MRDNowPlayingOriginClient/%@
@16@?0@"MRDNowPlayingPlayerClient"8
addNowPlayingClient-%@
com.apple.mediaremote.originclient.playbacktimer
%@ was not playing recently
%@ is playing for notification <%@>
<%@ %p: %@>
B32@?0@"MRAVOutputDevice"8Q16^B24
Speaker
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
AVSystemController_ServerConnectionDiedNotification
AVSystemController_CurrentExternalScreenAttribute
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_CurrentRouteHasVolumeControlNotificationParameter
AVSystemController_SubscribeToNotificationsAttribute
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_ExternalScreenDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
com.apple.mediaremote.MRDLockScreenController
Previous playerPath %@ invalidated
v16@?0^v8
PlayerPath changed from %@ to %@ with changeType %@
visible
NOT visible
Personal devices changed
Lock screen content changed
LayoutChange
ElectedPlayer %@ playback
started
stopped
playerPath
personal device
com.apple.mediaremoted.LockScreen
SBDashBoardNowPlayingAssertionIdentifier
SBSLockScreenContentAssertion
/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices
SBSLockScreenContentAssertionSlotPlatter
MRDConnectionLifetimeController-%@-%ld.queue
Init
Device is in use
Device is on cover sheet
Device is playing
Device played recently
Device is part of UserSelected endpoint
DeviceInfo changed
Has not played recently
ScreenOff -> CoverSheet
ScreenOff -> InUse
CoverSheet -> InUse
CoverSheet -> ScreenOff
InUse -> ScreenOff
Active endpoint changed
com.apple.mediaremoted.hostedExternalDevice.serialQueue
com.apple.mediaremoted.hostedExternalDevice.callbackQueue
<%@: %p externalDeviceName=%@>
%@: %p {
    external device = %@
    connection state = %@
    last can migrate to local endpoint error = %@
    external device clients = %@
    external output context = %@
    subscribed playerPaths = %@
    lifetimeController = %@
TV joined Expanse session.
Not already connected to endpoint
Local device is groupable
B32@?0@"MRDMediaRemoteClient"8@"NSDictionary"16^@24
mediaremotetool
B16@?0@"MRDAVHostedExternalDeviceClient"8
v20@?0I8^{__CFError=}12
v24@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"NSArray"16
v20@?0f8@"NSString"12
v20@?0I8@"NSString"12
init
Endpoint is not initialized
v16@?0^{__CFString=}8
v24@?0^{__CFString=}8^{__CFData=}16
groupContainsGroupLeader
groupLeader
topology
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
kAirPlayWHANotification_BreakAwayFromCurrentGroup
@"MRProtocolMessage"16@?0@"MRDExternalDeviceServerClientConnection"8
B16@?0@"MRDeviceInfo"8
com.apple.tvremotecore.xpc
I12@?0I8
@"MRProtocolMessage"20@?0@"NSString"8I16
@"MRProtocolMessage"24@?0@"MRDExternalDeviceServerClientConnection"8@"MRAVEndpoint"16
%@ -> %@
v32@?0@"MRAVRoutingDiscoverySessionConfiguration"8@"MRAVRoutingDiscoverySession"16^B24
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v16@?0^{__CFArray=}8
v16@?0@"_MRLyricsEventProtobuf"8
v20@?0{_MRHIDButtonEvent=IIB}8
Connection %@ exited in the middle of a migration
v24@?0@"MRPlaybackSessionRequest"8@"MRPlayerPath"16
B16@?0@"MRDExternalDeviceServerClientConnection"8
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
v16@?0@"MRProtocolMessage"8
SBSUndimScreen
SpringBoardServices
v24@?0@"CUPairedPeer"8Q16
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
@16@?0@"MRPlayerPath"8
v20@?0f8^{__CFError=}12
v32@?0@"NSString"8@"NSArray"16^B24
Initializing External Device
v16@?0@"MROrigin"8
v32@?0@"NSString"8@"MRAVOutputDevice"16^B24
v40@?0@"NSDictionary"8@"NSArray"16@"MRAVEndpoint"24@"NSError"32
sendPlaybackSession<%@>
sendPlaybackSessionMigrateBegin<%@>
sendPlaybackSessionMigrateEnd<%@>
%@ from external device client: %@<%@>
v16@?0@"MRUpdateActiveSystemEndpointResponse"8
v24@?0q8@"NSError"16
MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification
com.apple.mediaremoted.MRDHostedRoutingController/calloutQueue
@"MRExternalDevice"16@?0@"NSString"8
DiscoverySession=%@
%s is abstract
-[MRDHostedRoutingController createDiscoverySession]
-[MRDHostedRoutingController _onQueue_reloadEndpoints]
-[MRDHostedRoutingController _onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:]
-[MRDHostedRoutingController makeEndpointWithOutputDevices:options:]
MediaRemote
virtual_device
q24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"NSString"16@?0@"MRAVOutputDevice"8
@"MRAVDistantOutputDevice"16@?0@"MRAVOutputDevice"8
@"_MRAVOutputDeviceDescriptorProtobuf"24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
@"MRAVDistantOutputDevice"16@?0@"MRAVDistantOutputDevice"8
B16@?0@"MRAVDistantOutputDevice"8
B16@?0@"MRAVOutputContext"8
ignoreExistingLeader
preferExistingConnection
preferSubscription
preferCloudLibrary
preferHomePod
preferAppleTV
none
{ %@ }
proxyGroupPlayer
relayable
remoteControllable
existingConnection
appleMusicSubscription
iCloudMusicLibrary
existingLeader
HomePod
AppleTV
existingDesignatedLeader
_MRDActiveOriginDataDefaultsKey
LastNowPlayingAppIsPlayingState
_MRDActivePlayerPathDateDefaultsKey
_MRDAnyNowPlayingAppIsPlayingDefaultsKey
%@ has exited in the middle of a migration attempt
v24@?0@"NSString"8@"NSMutableDictionary"16
v32@?0@"MRContentItem"8@"MRPlaybackQueueRequest"16^B24
nanomediaremoted
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
MRXPC_NOWPLAYING_DISPLAYID_KEY
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
@16@?0@"MRDNowPlayingClient"8
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
@"NSData"16@?0@"MRDNowPlayingPlayerClient"8
MRXPC_NOWPLAYING_PLAYER_PATH_ARRAY_DATA_KEY
MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY
v16@?0@?<v@?@"NSData"I>8
v24@?0@"NSData"8@"NSError"16
Application <%@> waiting for can be now playing
v20@?0@"NSData"8I16
Unable to register for waking now playing notifications without entitlement: %@
com.apple.mediaremote.waking-now-playing-notifications
MRXPC_AUDIO_FORMAT_CONTENT_INFO
q24@?0@"MRDNowPlayingOriginClient"8@"MRDNowPlayingOriginClient"16
event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>
Playing
Not Playing
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%@ %p {
    player path = %@
    client = %@
    perPlayerCanBeNowPlaying = %@
    canBeNowPlaying = %@
    canBeNowPlayingTimestamp = %@
    effectiveCanBeNowPlaying = %@
    any player is playing = %@
    has now playing data = %@
    foregrounded = %@
    supportsBackgroundAudio = %@
    active player client = %@
    player clients = %@
effectiveBundleIdentifier
v16@?0@"NSDictionary"8
UIBackgroundModes
audio
displayName
activePlayerClient
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
@"AVOutputContext"8@?0
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v32@?0@"NSNumber"8@"MRDMediaRemoteClient"16^B24
com.apple.mediaremote.mediaremoted.notificationQueue
_MROriginatingNotification
com.apple.mediaremote.companionLinkClient
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
enabled
disabled
com.apple.
MRXPC_APP_INSTALLED_KEY
MRXPC_BOOL_RESULT_KEY
System Media Wake - %@
Player Service Wake - %@
Bless Request - %@
v16@?0@"_MRDiagnosticProtobuf"8
com.apple.mediaremote.MRDMediaRemoteServer
No diagnostic info
XPC Client: %@:
MediaRemote Client Diagnostic
Collected at: %@
================================================================================
clientDiagnose
q24@?0@"MRDMediaRemoteClient"8@"MRDMediaRemoteClient"16
kern.bootsessionuuid
Restoring state of client after daemon launch
%@ is invalid. You must provide a type, pid and bundleID with %@.
%@ type=%@
SendCommand
RelayServerMessage
BrowsableContentMessage
Transaction
RestoreState
Wake
Notification
UnknownType
<MRDAutoConnectionControllerReason %@ - %@>
com.apple.mediaremote.MRDAutoConnectionController
player %@ started playing
q24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
%@ endpoint changed
autoConnectToEndpoint
autoConnectToEndpoint-%@
endpointChanged
proximity
reconnect
startedPlaying
requestDestination
MRDElectedPlayerControllerEventUserInfoKey
ElectedOrigin changed from <%@> (<%@>) to <%@> (<%@>)
%@ PlaybackQueueChanged
%@ Playback %@
NowPlayingAppChanged to %@
Was %@grounded
Fore
Back
activeSystemEndpointDidChange
ElectedPlayerController failed to connect
v16@?0^{__MRAVEndpointRef=}8
is playing
SiriIntent
was playing recently <%lf> seconds ago but not nowPlayingData
was not playing recently. Last played <%lf> seconds ago
%@ has no activePlayer
%@ is not foregrounded and does not support background audio
%@ has no activeNowPlayingClient
com.apple.mediaremote.electedplayercontroller.playbacktimer
%@ playback timeout event %@ after <%lf> seconds
electedPlayer %@ was not playing recently for event <%@>
electedPlayer %@ is playing for event <%@>
no electedPlayer for event <%@>
OriginChanged
PlaybackChanged
NowPlayingAppChanged
NowPlayingAppForegroundChanged
PlaybackQueueChanged
<%@:%p {
  started = %@
  connections = %@
APReceiverMediaRemoteXPCClient_SetDelegate
@"MRAirPlayTransportConnection"8@?0
AVOutputContextCommunicationChannel.didCloseCommunicationChannel
APReceiverMediaRemoteCommunicationChannel.didCloseCommunicationChannel
/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver
MediaRemote Diagnostic
================================================================================
Active Clients
Active Transactions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Elected Player
Elected Player Reason
LockScreen Widget Active
LockScreen Widget Visible
LockScreen Widget PlayerPath
Origin Forwarders
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
External Discovery Sessions
RemoteControlService
Local OutputContextDataSource
OutputContexts
Routing Server
System Discovery Mode (Legacy)
AirPlay Security Settings
Local Receiver Pairing Identity
System Active Endpoints
Auto Connecting Endpoints
Auto Connected Endpoints
Proximity Events
Nearby Devices
Medium Devices
Immediate Devices
Proximal Migrating Devices
Hosted Routing
Hosted Discovery Mode
Discovery Sessions
Endpoints:
Endpoint
External Device
v32@?0@"MRAVDistantEndpoint"8Q16^B24
Remaining External Devices
EndpointID: %@
v32@?0@8@"MRDAVHostedExternalDevice"16^B24
Concrete Discovery Session
Stream Count
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
Companion Link
RPDevice<routeID: %@>
Home Users
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
<%@ %p {
  AirPlayService = %@
  IDSService = %@
  RapportService = %@
CXCallObserver
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
MRDAVOutputContextExternalDevice.serialQueue
MRDAVOutputContextExternalDevice.workerQueue
MRDAVOutputContextExternalDevice.notificationQueue
startUp
designatedGroupLeader
origin
outputContext
originForwarder
<%@: %p id=%@ leader=%@ origin=%@-%ld originFwd=%@>
<%@: %p %@>
OutputContextExternalDevice does not have a designatedGroupLeader. (PreviousGroupLeader=%@)
v36@?0@"MRPlayerPath"8I16@"NSDictionary"20@?<v@?@"MRCommandResult">28
v24@?0@"MRPlaybackSession"8@"NSError"16
handleRemoteCommand
@"MRCommandResult"16@?0@"NSError"8
v32@?0@"MRDMediaRemoteClient"8@"MRPlayerPath"16@"NSError"24
com.apple.tvairplayd
_createPlayerAndWaitForConnection
Could not find xpcClient for playerPath %@
v24@?0@"MRPlayerPath"8@"NSError"16
Could not find application in playerPath %@
createPlayerAndWaitForCanBeNowPlaying
createPlayer
v24@?0@"NSObject<OS_xpc_object>"8@"NSError"16
@"NSObject<OS_xpc_object>"16@?0@"MRPlayerPath"8
_handlePlaybackQueueRequest
@"MRProtocolMessage"16@?0@"MRPlayerPath"8
v24@?0@"MRProtocolMessage"8@"NSError"16
setOutputDeviceVolume
Attempting to set and add/remove devices at the same time, which is unsupported
modifyOutputContext
Failed to find devices with UIDs: %@
v32@?0@"NSString"8@"MRAVConcreteOutputDevice"16^B24
MRDAVOutputContextExternalDevice
v20@?0C8^v12
%@ %@
OutputContextExternalDevice-%@-%@:%@<%@>
com.apple.MediaRemote.connectionMonitor
<%@ %p : %@>
    stauts = %@
    currentMessageCount = %lu
    totalMessageCount = %lu
    lastMessageSent = %f seconds ago
    lastStatusCheck = %f seconds ago
    lastStatusChange = %f seconds ago
    pendingBarrierCompletion = YES
    paramters = {%lu x %f}
%@:%@-%d
XPCConnectionBarrier
Running
Suspended
com.apple.airplay.password
MostRecentlyUsedAVOutputDeviceUIDs
com.apple.mediaremote.routingServer.operationQueue
Restore
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v16@?0@"NSString"8
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_UID_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v24@?0@"MRDAVRoute"8@"NSError"16
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_CUSTOM_XPC_ENDPOINT_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_AIRPLAY_LEADER_TYPE
requestID
MRXPC_JSON_DATA_BLOCK
@"NSData"16@?0@8
v20@?0@"MRAVEndpoint"8I16
_handleStartNowPlayingSession
v32@?0@"MRPlayerPath"8@"MRDeviceInfo"16@"NSError"24
Returning local origin because device requires command redirection
%@<%@>
B16@?0@"MRAVEndpoint"8
Discovered local device on endpoint: %@
MRXPC_ROUTING_CONTEXT_UID_KEY
@16@?0@"NSData"8
MRXPC_SOURCE_ENDPOINT_UID_KEY
MRXPC_MIGRATE_REQUEST_DATA_KEY
MRXPC_DESTINATION_ENDPOINT_UID_KEY
groupDevicesAndSendCommand
Analytics: Group devices and send message
createHostedEndpointForDevices
v16@?0@"MRAVOutputDevice"8
com.apple.mediaremote.removeFromParentGroup
com.apple.mediaremote.routingServer.getExternalDevice
MRXPC_ENDPOINT_UID_KEY
MRXPC_EXTERNAL_DEVICE_LISTENER_KEY
_handleModifyOutputContextMessage
MRXPC_MESSAGE_CUSTOM_ID_KEY
MRXPC_CONTEXT_MODIFICATION_DATA_KEY
ContextID=%@ %@
Failed to create output context with UID=%@
v16@?0@"MSVSystemDialogResponse"8
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
com.apple.mediaremoted.MRDAVRoutingServer
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_IPALIASING_TITLE
AIRPLAY_CLUSTER_ATV_ALERT_IPALIASING_MESSAGE
AIRPLAY_CLUSTER_ATV_ALERT_MESSAGE
Cluster connect error
AIRPLAY_ATV_CLUSTER_TRY_AGAIN
AIRPLAY_ATV_CLUSTER_CHANGE_DEFAULT_OUTPUT
prefs:root=DefaultAudioOutput
com.apple.TVSettings
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_NOT_CONNETED_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
APReceiverMediaRemoteXPCClient_CopyProperty
AirPlaySecuritySetting
password
_createHostedEndpointForOutputDeviceUIDs
Modifying output context: %@
setOutputDevices failed
@16@?0@"MRAVOutputDevice"8
Discovered hosted endpoint: %@
com.apple.mediaremote.createHostedEndpointForOutputDeviceUIDs
MRAVOutputDeviceRemoveFromParentGroup failed
MRDAVRoutingServer/resolveEndpoint
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet
AVOutputContextDeviceConnectionFailureReasonIPAliasingNotSupported
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
FBSOpenApplicationOptionKeyPayloadURL
/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
RequestingAuthorizationToken
ReceivedAuthorizationToken
Retried
Completed
Cancelled
Failed
CanSleep
WillSleep
WillPowerOn
B24@?0@"NSString"8@"MRDAVHostedExternalDevice"16
v32@?0@"NSString"8@"MRDAVHostedExternalDevice"16^B24
undiscoverable
disconnected
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
RegionalBehaviorEUVolumeLimit
CannotExceedEUVolumeLimit
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_EUVolumeLimitDidChangeNotification
AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
AVSystemController_EUVolumeLimitAttribute
AVSystemController_EUVolumeLimitEnforcedAttribute
AVSystemController_AudioVolumeNotificationParameter
AVSystemController_AudioCategoryNotificationParameter
AVSystemController_AudioVolumeChangeReasonNotificationParameter
AVSystemController_EUVolumeLimitNotificationParameter
AVSystemController_EUVolumeLimitEnforcedNotificationParameter
AVController_RouteDescriptionKey_AVAudioRouteName
AVController_RouteDescriptionKey_RouteSubtype
AVController_RouteDescriptionKey_RouteUID
AVSystemController_FullMuteAttribute
com.apple.siri
MusicUIServiceNowPlayingViewController
com.apple.MusicUIService
MusicUIServiceMediaControlsViewController
MusicUIServiceLanguageOptionsViewController
MusicUIServiceMediaControlsMediumConfidenceViewController
MRDMediaRemoteClientDidConnect
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.%@.%@.%@-%d
r*16@?0@"NSString"8
serialQueue
com.apple.mediaremote.send-commands
com.apple.AssistantServices
com.apple.lskdd
com.apple.mediaremote.nearby-device
com.apple.mediaremote.request-bless
com.apple.mediaremote.set-now-playing-app
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
com.apple.PairingManager
%@-%ld
<%@ %p, bundleIdentifier = %@, pid = %ld>
<%@ %p {
    bundle identifier = %@
    pid = %ld
    euid = %ld
    xpc connection = %@
    connection monitor = %@
    current task assertion = %@
    assertions = %@
    registered custom origins = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    has requested legacy nowPlayingInfo = %s
    has requested supported commands = %s
    subscribedWakingPlayerPaths = %@
com.apple.iapd
com.apple.iap2d
v16@?0@"MSVTaskAssertion"8
Redirecting command to local origin legacy handler. Command will be re-emitted under origin containing the local device: %@
Redirecting command to remoteEndpoint containing localDevice
Sending remote control command %@
 host process: %@(%d)
RequestPlaybackQueue
BeginLoadingBrowsableContent
%llu
Relaying XPC message %@ to client %@
v24@?0@"NSString"8@"NSDictionary"16
B16@?0@"AVOutputDeviceGroup"8
v32@?0@"NSNumber"8@"NSValue"16^B24
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
MRDisplayMonitorLayoutDidChange
MRDisplayMonitorDisplayDidChangeNotification
com.apple.mediaremote.MRDDisplayMonitor
v32@?0@"FBSDisplayLayoutMonitor"8@"FBSDisplayLayout"16@"FBSDisplayLayoutTransitionContext"24
Display%@
LockScreen%@grounded
LockScreen%@Visible
ControlCenter%@Visible
FBSDisplayLayoutMonitor
FBSDisplayLayoutMonitorConfiguration
FBSDisplayLayoutElementLockScreenIdentifier
FBSDisplayLayoutElementControlCenterIdentifier
v24@?0@"NSDictionary"8@"NSError"16
B24@?0r*8@"NSObject<OS_xpc_object>"16
A reply object could not be created.
A reply connection could not be obtained.
MRDLaunchApplicationWithReason
post-launch setup for  %@
v24@?0@"BSProcessHandle"8@"NSError"16
launchAppAndWaitForXpcConnection
Application <%@> waiting for xpcConnection
launchAppAndWaitForCanBeNowPlaying
Application <%@> waiting for CanBeNowPlaying
FallbackIdentifier-%d
SBSCopyFrontmostApplicationDisplayIdentifier
FBSOpenApplicationOptions
FBSOpenApplicationService
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
<%@ %p, command = %@, %@
, commandID = %@
, remote control interface = %@
, appOptions = %ld
, path = %@
, unresolvedPath = %@
, options = %@
com.apple.BTAvrcp
com.apple.rcd
com.apple.AVRCP
<%@ %p, command = %@, routedToApp = %@>
-[MRDAVRoute initWithDictionary:]
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
AVOutputDevice
outputDeviceUID
type
changeType
date
eventReason
selectionReason
initWithFormat:
description
setOutputDeviceUID:
setType:
setDate:
event
setEvent:
setEventReason:
setSelectionReason:
setChangeType:
.cxx_destruct
_outputDeviceUID
_type
_date
_event
_eventReason
_selectionReason
_changeType
T@"NSString",&,N,V_outputDeviceUID
Tq,N,V_type
T@"NSDate",&,N,V_date
Tq,N,V_event
T@"NSString",&,N,V_eventReason
T@"NSString",&,N,V_selectionReason
Tq,N,V_changeType
init
server
nowPlayingServer
initWithSuiteName:
sharedSystemAudioContext
_hasPersonalDeviceForContext:
_initializeSystemEndpointInfo
defaultCenter
_handleOriginDidRegisterNotification:
addObserver:selector:name:object:
_handleOriginDidUnregisterNotification:
_handleOutputContextDidAddOutputDeviceNotification:
_handleIsPlayingDidChangeNotification:
removeObserver:
dealloc
allValues
countByEnumeratingWithState:objects:count:
numberWithInteger:
setObject:forKeyedSubscript:
timeIntervalSinceNow
numberWithDouble:
objectForKeyedSubscript:
_onSerialQueue_updateSystemEndpoint:type:event:eventReason:
reason
updateUserSelectedSystemEndpoint:event:eventReason:
activeOutputDeviceUID:
isEqualToString:
initWithOutputDeviceUID:reason:
setClientBundleIdentifier:
_onSerialQueue_reconnectToOutputDevice:completion:
availableEndpoints
containsOutputDeviceWithUID:
externalDevice
customOrigin
originClientForOrigin:
registrationDate
compare:
localOriginClient
userInfo
deviceUID
name
mainBundle
bundleIdentifier
originClientForDeviceUID:
clearUserSelectedOutputDeviceUID:event:reason:clientBundleIdentifier:
object
updateUserSelectedSystemEndpoint:
playerPath
client
processIdentifier
_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:
_onSerialQueue_maybeSetupPlaybackTimerForEvent:
_onSerialQueue_reevaluateActiveEndpoint:event:changeType:eventReason:clientBundleIdentifier:
_onSerialQueue_calculateActiveEndpoint:event:reason:
_onSerialQueue_calculateUserSelectedEndpointForEvent:reason:
_onSerialQueue_calculateProactiveEndpoint:
timeSincePlaying
currentSettings
mediaRecentlyPlayedInterval
endpointRecentlyUserSelectedInterval
useProactiveEndpoint
activeNowPlayingClient
activePlayerClient
isPlaying
systemEndpointInfo
_writeSystemEndpointInfo:
copy
delegate
systemEndpointController:activeSystemEndpointDidChangeForRequest:type:
isPairedDeviceSync
clientBundleIdentifier
numberWithInt:
dictionaryWithObjects:forKeys:count:
_onSerialQueue_maybeSetupUserSelectedTimerForEvent:
reasonWithType:string:
sharedConnectionController
connectToOutputDevice:reason:queue:completion:
invalidateWithReason:
initWithInterval:name:queue:block:
origin
outputDevices
deviceType
deviceSubtype
setObject:forKey:
objectForKey:
intValue
enumerateKeysAndObjectsUsingBlock:
activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval
initWithRoutingController:
setDelegate:
_serialQueue
_nowPlayingServer
_routingController
_systemEndpointEntries
_cachedHasPersonalDevices
_userDefaults
_userSelectedTimer
_playbackTimer
_delegate
T@"NSDictionary",R,N
T@"<MRDAVSystemEndpointControllerDelegate>",W,N,V_delegate
containsString:
stringByReplacingOccurrencesOfString:withString:
isEqual:
setPlayerPath:
commandDictionary
setCommandDictionary:
completionBlockDictionary
setCompletionBlockDictionary:
_playerPath
_commandDictionary
_completionBlockDictionary
T@"MRPlayerPath",C,N,V_playerPath
T@"NSMutableDictionary",&,N,V_commandDictionary
T@"NSMutableDictionary",&,N,V_completionBlockDictionary
dictionary
_clientDidConnectNotification:
_handlePlayerIsPlayingDidChangeNotification:
sendRemoteControlCommand:completion:
error
_effectiveContextIDForCommand:
commandType
_isCommandCacheCreating:
count
mutableCopy
unsignedIntValue
setCommandType:
_forwardCommand:completion:
optionValueForKey:
boolValue
initWithHandlerStatuses:sendError:
_isCommandCacheable:
numberWithUnsignedInt:
broadcastRemoteControlCommand:completion:
isLocal
remoteControlClients
sendRemoteControlCommand:toClients:completion:
commandID
UTF8String
initWithCapacity:
_createBroadcastCommandPlayerPathForClient:
_createBroadcastCommandResponseFromStatuses:forClient:
addObject:
_sendRemoteControlCommand:toDestinationClient:withLegacyCompletion:
broadcastCommandWaitDuration
initWithInterval:repeats:queue:block:
_shouldIgnoreCommand:completion:
originatingAppDisplayID
removeObjectsForKeys:
allClients
canBeNowPlaying
_handleSendCommandMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
_handlePrewarmMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsCommandMessage:fromClient:
_handleDismissMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsLanguageOptionsCommandMessage:fromClient:
_handleGetPendingCommandsMessage:fromClient:
_handleSendPlaybackSessionMessage:fromClient:
_handleSendPlaybackSessionMigrateBeginMessage:fromClient:
_handleSendPlaybackSessionMigrateEndMessage:fromClient:
_handleTriggerAudioFadeMessage:fromClient:
setEnqueuedCommands:
setRemoteControlContexts:
data
remoteUIService
isValid
initWithConfigurationData:style:endpoint:
setRemoteUIService:
presentWithCompletion:
displayName
stringWithUTF8String:
initWithRouteUID:center:
isResolved
containsObject:
queryExistingPlayerPathForXPCMessage:forClient:
unresolvedPlayerPath
launchApplicationTimeoutInterval
xpcClient
relayXPCMessage:andReply:
playerClient
removeObject:
relayXPCMessage:andReply:resultCallback:
request
addPendingPlaybackSessionMigrateEvent:playerPath:
removePendingPlaybackSessionMigrateEvent:
fadeType
initWithFadeDuration:error:
initWithTimeout:reason:handler:
disarm
sharedAVSystemController
setAttribute:forKey:error:
initWithUnderlyingCodableMessage:error:
_sendQueuedCommandsForDestinationClient:
_clearAllQueuedCommandsForReason:
numberOfActivePhoneCalls:
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
appOptions
routeUID
length
routingServer
pickCachedRouteWithUID:
createNowPlayingClient
setClient:
setPlayer:
_sendRemoteControlCommand:toDestinationClient:withCompletion:
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localActiveClientBundleIdentifier
nowPlayingDataSource
nowPlayingApplicationDisplayID
clientForBundleIdentifier:
destinationAppDisplayID
initWithProcessIdentifier:bundleIdentifier:
localOrigin
initWithOrigin:client:player:
resolveExistingPlayerPath:
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
commandResultWithSendError:
clientWithRegisteredCustomOrigin:
sendError
handlerReturnStatuses
_resolveCommandBeforeSend:toClient:error:
_performCommandProcessingAfterSend:
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_clearQueuedCommandsForApplicationWithDisplayID:
setDestinationAppDisplayID:
code
domain
initWithArray:
senderID
initWithBundleIdentifier:
player
queuedCommandsTimeoutInterval
dateCreated
_completionHandler
removeObjectForKey:
removeAllObjects
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
localNowPlayingClient
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
isAVRCPCommand
shouldSendCommandsDuringPhoneCall
supportExpanseMigration
sharedManager
expanseSessionActive
alwaysIgnoreDuringSharePlay
expanseSessionHasActiveActivity
alwaysIgnoreDuringCall
shouldSendCommand:
protobuf
setOrigin:
setProcessIdentifier:
setBundleIdentifier:
addHandlerReturnStatus:
_persistPlaybackSessionAndUpdateOptionsForSessionPreloadCommand:forClient:error:
_cleanUpPersistedSessionForSessionPreloadCommand:
initWithData:
identifier
initWithMRError:
fileURLWithPath:
defaultManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
playbackSessionData
writeToURL:options:error:
connection
path
stringWithCString:encoding:
setOptionValue:forKey:
revision
metadata
removeItemAtURL:error:
queryPlayerPath:
nowPlayingClient
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
phoneCallObserver:callDidChange:
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
_enqueuedCommandsForDisplayID:
_applicationIsRunning:
_commandQueuesForDisplayIDs
_pendingSendPlaybackSessionDisplayIDs
_remoteControlContexts
_callObserver
_remoteAlertWorkerQueue
_fadeOutNotificationToken
_redirectionCache
T@"NSArray",R,N
entitlements
initWithCommandType:playerPath:unresolvedPlayerPath:senderAppDisplayID:optionsData:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
routingDataSource
currentVolume
volumeWarningEnabled
volumeLimit
warningState
setWarningState:
_volumeWarningEnabled
_currentVolume
_volumeLimit
_routingDataSource
_warningState
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
Tf,R,N,V_currentVolume
TB,R,N,V_volumeWarningEnabled
Tf,R,N,V_volumeLimit
TQ,N,V_warningState
standardUserDefaults
dictionaryForKey:
boolForKey:
setBool:forKey:
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
clearRoutedCommands
_routedCommands
_commandQueue
_contextID
_originatingAppDisplayID
T@"NSString",R,N,V_contextID
T@"NSString",R,N,V_originatingAppDisplayID
pickedRoute
arrayWithObjects:count:
pickedRouteForCategory:source:
pickedRoutes
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRoutesForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
addAuthorizationCallbackForRouteID:requestCallback:
removeAuthorizationCallbackForRouteID:
authorizationRequestCallbackForRouteID:
discoveryMode
setDiscoveryMode:
externalScreenType
currentRouteSupportsVolumeControl
_authorizationCallbacks
_currentRouteSupportsVolumeControl
_discoveryMode
_externalScreenType
_pickedRoute
TI,N,V_discoveryMode
T@"MRDAVRoute",R,N,V_pickedRoute
TI,R,N,V_externalScreenType
TB,R,N,V_currentRouteSupportsVolumeControl
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
bytes
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_processID
_bundleID
T@"NSString",R,N,V_bundleID
Ti,R,N,V_processID
UUID
UUIDString
msv_firstWhere:
nowPlayingClients
playerClients
candidateStreams
timeIntervalSinceDate:
activeStreams
remainingStreamCapacity
activeStreamCount
activeStreamCapacity
initWithMRError:description:
reserveSlotForLocal
playbackQueue
contentItemWithOffset:
deviceInfo
groupedDevices
appendString:
appendFormat:
title
maxStreamCapacity
originClients
isHosted
containsLocalDevice
msv_filter:
routingContextID
arrayByAddingObject:
containsActiveStream
canActivateStreamWithPlayerPath:
TQ,R,N
isActiveStream
initWithPlayerPath:
distantPast
_registerCallbacksForPlayerPath:
canBeNowPlayingPlayer
commandInfosFromData:
setSupportedRemoteControlCommands:
isEqualToData:
supportedRemoteControlCommands
_onQueue_supportedCommandsDidChange:
_onQueue_popState
minimalReadableDescription
_onQueue_pushState
_onQueue_playbackQueueDidChange:
playbackState
initWithPlaybackState:date:
_onQueue_playbackState
hasPlaybackRate
hasElapsedTimeTimestamp
elapsedTimeTimestamp
initWithTimeIntervalSinceReferenceDate:
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_isPlaying
setSupportedCommands:
setPlaybackQueue:
setPlaybackQueueCapabilities:
setDisplayName:
setPlaybackState:
timeIntervalSinceReferenceDate
setPlaybackStateTimestamp:
_onQueue_lastPlayingDate
mergeFrom:
updatePlaybackQueue:notifyObservers:
_onQueue_updatePlaybackQueue:notifyObservers:
contentItems
artwork
width
height
setArtwork:
_onQueue_playbackQueueContentItemsDidChange:
_onQueue_playbackQueueContentItemsArtworkDidChange:
initWithContentItems:
_sortSnapshots:
snapshotsForIsPlaying:
firstObject
sortedArrayUsingComparator:
artworkFileURL
_onQueue_saveNowPlayingItemArtworkURL
artworkAvailable
requestArtworkForContentItems:
absoluteString
imageData
updatePlaybackQueue:
nowPlayingPlayerClient:playerCanBeNowPlayingDidChange:
nowPlayingPlayerClient:isPlayingDidChange:
nowPlayingPlayerClient:pictureInPictureEnabledDidChange:
setPlayerPlaybackState:
nowPlayingPlayerClient:playbackStateDidChange:
nowPlayingPlayerClient:supportedCommandsDidChange:
nowPlayingPlayerClient:playbackQueueDidChange:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:
nowPlayingPlayerClient:playbackQueueContentItemsDidChange:
nowPlayingPlayerClient:playbackQueueArtworkContentItemsDidChange:
setPushStateIsPlaying:
setPushStatePlaybackState:
setPushStatePlayer:
hasNowPlayingData
setPushStateHasNowPlayingData:
isPictureInPictureEnabled
setPushStatePictureInPictureEnabled:
setPushStateCanBeNowPlayingPlayer:
pushStateHasNowPlayingData
stringWithFormat:
initWithName:
pushStatePictureInPictureEnabled
_onQueue_pictureInPictureEnabledDidChanged:
pushStateIsPlaying
pushStatePlaybackState
_onQueue_playbackStateDidChanged:
_onQueue_isPlayingDidChange:
pushStateCanBeNowPlayingPlayer
_onQueue_canBeNowPlayingDidChange:
audioSessionType
mxSessionIDs
pushStatePlayer
audioSessionID
nowPlayingPlayerClient:playerStateDidChange:
artworkIdentifier
contentItemIdentifer
enumerateObjectsUsingBlock:
_onQueue_requestArtworkForContentItems:
initWithContentItem:
initWithIdentifiers:
setArtworkWidth:
setArtworkHeight:
setCachingPolicy:
includeArtwork
xpcClientForPlayerPath:
playbackQueueRequests
subscriptionControllerForPlayerPath:
subscribeToPlaybackQueue:forRequest:
requestIdentifier
setImageData:
setValue:forKey:
playerClientRequestsForPlayerPath:
initFromTransactionName:
daemonClient
setWithCapacity:
null
hasRequest:
requestForSubscribedContentItemIdentifier:
match:
_onQueue_updatePlaybackQueueWithItem:notifyObservers:
postNotificationName:object:userInfo:
unpacketize:completion:
addTransactionCallback:forName:
supportedRemoteControlCommandsData
setSupportedRemoteControlCommandsData:
nowPlayingContentItem
setInferredPlaybackState:
inferredPlaybackState
updatePlaybackState:date:
updateLastPlayingDate:
setCanBeNowPlayingPlayer:
canBeNowPlayingPlayerTimestamp
setCanBeNowPlayingPlayerTimestamp:
playbackQueueCapabilities
nowPlayingState
setPictureInPictureEnabled:
updateClient:
updatePlayer:
artworkUpdatedForContentItems:
snapshotForPlaybackState:
snapshotForIsPlaying:
snapshots
saveNowPlayingArtworkFileURL
lastPlayingDate
subscriptionController
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueue
_playbackQueueCapabilities
_canBeNowPlayingPlayerTimestamp
_playerPlaybackState
_inferredPlayerPlaybackState
_playbackStateHistory
_inFlightArtworkRequests
_scheduledSaveNowPlayingArtworkFileURL
_pictureInPictureEnabled
_canBeNowPlayingPlayer
_hasNowPlayingDataTransaction
_pushStateIsPlaying
_pushStateHasNowPlayingData
_pushStatePictureInPictureEnabled
_pushStateCanBeNowPlayingPlayer
_lastPlayingDate
_subscriptionController
_pushStatePlaybackState
_pushStatePlayer
T@"NSArray",&,N
TB,N,V_pushStateIsPlaying
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_pushStatePlaybackState
T@"MRPlayer",&,N,V_pushStatePlayer
TB,N,V_pushStateHasNowPlayingData
TB,N,V_pushStatePictureInPictureEnabled
TB,N,V_pushStateCanBeNowPlayingPlayer
TB,N
T@"NSDate",C,N
TI,R,N
TI,N
T@"NSData",C,N
T@"MRPlaybackQueue",C,N
T@"MRContentItem",R,N
TQ,N
TB,R,N
Td,R,N
T@"NSDate",R,N,V_lastPlayingDate
T@"MRPlayer",R,N
T@"MRPlayerPath",&,N
T@"MRNowPlayingState",R,N
T@"MRPlaybackQueueSubscriptionController",R,N,V_subscriptionController
pictureInPictureEnabled
TB,N,GisPictureInPictureEnabled
T@"<MRDNowPlayingPlayerClientDelegate>",W,N,V_delegate
_contentItemIdentifer
_artworkIdentifier
T@"NSString",R,N,V_contentItemIdentifer
T@"NSString",R,N,V_artworkIdentifier
_playbackState
TI,R,N,V_playbackState
T@"NSDate",R,N,V_date
playerPlaybackState
playbackStateDescription
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_playerPlaybackState
T@"NSDate",R,N
T@"NSString",R,N
setDispatchQueue:
setLastKnownBluetoothAddress:
_txtDataChanged
setBluetoothAddressChangedHandler:
_initializeBonjourServiceWithDeviceInfo:
deviceInfoForOrigin:queue:completion:
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
stop
activate
publishWithOptions:
invalidate
bonjourRemoteControlService:didAcceptConnection:
initWithInputStream:outputStream:
_txtDataChangedWithUserInfo:
_txtDataChangedWithDeviceInfo:
lastKnownBluetoothAddress
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
localizedModelName
buildVersion
isPairingAllowed
bluetoothAddress
managedConfigurationDeviceIdentifier
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerExternalDeviceConnections
setIncludesPeerToPeer:
start
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
initWithNetServiceType:
netServiceType
_bluetoothClient
_networkService
_started
_netServiceType
_lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDBonjourRemoteControlServiceDelegate>",W,N,V_delegate
T@"NSString",R,N,V_netServiceType
auditToken
initWithConnection:label:
allKeys
_maybeWakeClient
remoteObjectProxy
hostedExternalDeviceConnectionStateDidChange:withError:
verboseHostedExternalDeviceClientLogging
setConnectionState:
setConnectionStateError:
canSendMessage:
hostedExternalDeviceNameDidChange:
setName:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceEndpointDidChange:
setEndpoint:
hostedExternalDeviceEndpoint:volumeCapabilitiesDidChange:forOutputDevice:
outputDeviceVolumeCapabilities
setOutputDeviceVolumeCapabilities:
setVolumeCapabilities:
hostedExternalDeviceEndpoint:volumeDidChange:forOutputDevice:
outputDeviceVolume
setOutputDeviceVolume:
numberWithFloat:
setVolume:
hostedExternalDeviceEndpoint:didAddOutputDevice:
outputDeviceModifications
addOutputDevice:forEndpoint:
hostedExternalDeviceEndpoint:didChangeOutputDevice:
changeOutputDevice:forEndpoint:
hostedExternalDeviceEndpoint:didRemoveOutputDevice:
removeOutputDevice:forEndpoint:
discoveryOutputDevicesChanged:forConfiguration:
discoverySessionConfigurationsResults
setDiscoverySessionConfigurationsResults:
_resumeConnectionWithState:
connectionState
connectionStateError
endpoint
volumeCapabilities
floatValue
volume
addedOutputDevices
changedOutputDevices
removedOutputDevices
anyPlayerPath
notificationRequiresTaskAssertionForPlayerPath:
wakingPlayerPathAssetionDuration
takeAssertion:forReason:duration:
connectionDidResume:
connectionDidInvalidate:
initWithConnection:
discoveryModeForConfiguration:
setDiscoveryMode:forConfiguration:
discoverySessionConfigurations
registeredCallbacks
setRegisteredCallbacks:
notifications
setNotifications:
subscribedPlayerPaths
setSubscribedPlayerPaths:
setDiscoverySessionConfigurations:
pendingClientState
setPendingClientState:
connectionMonitor
setConnectionMonitor:
setXpcClient:
_discoveryModes
_connectionState
_connection
_bundleIdentifier
_registeredCallbacks
_notifications
_subscribedPlayerPaths
_discoverySessionConfigurations
_pendingClientState
_connectionMonitor
_xpcClient
T@"MRDAVHostedExternalDevicePendingClientState",&,N,V_pendingClientState
T@"MRXPCConnectionMonitor",&,N,V_connectionMonitor
T@"MRDMediaRemoteClient",&,N,V_xpcClient
T@"NSXPCConnection",R,N,V_connection
T@"NSString",R,N,V_bundleIdentifier
TQ,N,V_registeredCallbacks
TQ,N,V_notifications
TI,N,V_connectionState
T@"NSArray",C,N,V_subscribedPlayerPaths
T@"NSArray",C,N,V_discoverySessionConfigurations
setOutputDeviceModifications:
_connectionStateError
_name
_endpoint
_volume
_volumeCapabilities
_outputDeviceVolume
_outputDeviceVolumeCapabilities
_outputDeviceModifications
_discoverySessionConfigurationsResults
T@"NSError",&,N,V_connectionStateError
T@"NSString",&,N,V_name
T@"MRAVDistantEndpoint",&,N,V_endpoint
T@"NSNumber",&,N,V_volume
T@"NSNumber",&,N,V_volumeCapabilities
T@"NSMutableDictionary",&,N,V_outputDeviceVolume
T@"NSMutableDictionary",&,N,V_outputDeviceVolumeCapabilities
T@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications",&,N,V_outputDeviceModifications
T@"NSMutableDictionary",&,N,V_discoverySessionConfigurationsResults
initWithString:
indexOfObject:
replaceObjectAtIndex:withObject:
removeObjectAtIndex:
setAddedOutputDevices:
setChangedOutputDevices:
setRemovedOutputDevices:
_addedOutputDevices
_changedOutputDevices
_removedOutputDevices
T@"NSMutableArray",&,N,V_addedOutputDevices
T@"NSMutableArray",&,N,V_changedOutputDevices
T@"NSMutableArray",&,N,V_removedOutputDevices
dictionaryRepresentation
allObjects
initWithPID:audioSessionID:mxSessionIDs:
_pid
_audioSessionID
_mxSessionIDs
Ti,R,N,V_pid
T@"NSNumber",R,N,V_audioSessionID
T@"NSSet",R,N,V_mxSessionIDs
numberWithBool:
initWithBundleID:audioSessionID:isPlaying:
_playing
playing
TB,R,N,GisPlaying,V_playing
weakObjectsHashTable
sharedDataSource
addObserver:
observersForSelector:
nowPlayingApplications
nowPlayingSessions
nowPlayingAudioFormatContentInfos
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
_weakObservers
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_nowPlayingApplicationPID
_nowPlayingAudioFormatContentInfos
_nowPlayingApplicationDisplayID
T@"NSDictionary",R,N,V_nowPlayingAudioFormatContentInfos
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
Ti,R,N,V_nowPlayingApplicationPID
TB,R,N,V_nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsInterrupted
localClient
registerSourceOriginNotifications
registerDestinationOriginCallbacksToRelayToSourceOrigin
initializeDestinationOriginWithSourceOriginData
registerOriginForwarder:
unregisterOriginForwarder:
sourceOrigin
destinationOrigin
_handleVolumeCapabilitiesDidChangeNotification:
_handleApplicationDidRegisterNotification:
_handleApplicationDidUnregisterNotification:
_handleApplicationClientStateDidChangeNotification:
_handleActiveApplicationDidChangeNotification:
_handlePlayerDidRegisterNotification:
_handlePlayerDidUnregisterNotification:
_handlePlayerDidRegisterCanBeNowPlayingNotification:
_handlePlayerDidUnregisterCanBeNowPlayingNotification:
_handlePlayerStateDidChangeNotification:
_handleActivePlayerDidChangeNotification:
_handlePlaybackStateDidChangeNotification:
_handleSupportedCommandsDidChangeNotification:
_handlePlayerPlaybackQueueCapabilitiesDidChangeNotification:
_handlePlayerPlaybackQueueDidChangeNotification:
_handlePlayerPlaybackQueueContentItemsDidChangeNotification:
_handlePlayerPlaybackQueueContentItemArtworkDidChangeNotification:
setResolvedPlayerPath:
performRequestForDestination:completion:
initWithMRError:format:
setPlaybackSessionMigrateRequestCallback:
destinationClient
createLocalizePlayerPath:
hasAuxiliaryProperties
defaultSupportedCommandsForClient:
activePlayerPath
volumeControlCapabilities
defaultPlaybackQueueRequest
localizedPlayerIDFromPlayerPath:
initWithOrigin:destinationOrigin:
playerPathMapping
setPlayerPathMapping:
_sourceOrigin
_destinationOrigin
_destinationClient
_playerPathMapping
T@"MRClient",R,N,V_destinationClient
T@"NSMutableDictionary",&,N,V_playerPathMapping
T@"MROrigin",R,N,V_sourceOrigin
T@"MROrigin",R,N,V_destinationOrigin
initWithDeviceFeatures:
_activeSystemContext
outputDevice
canSetVolume
availableOutputDevices
initWithAVOutputDevice:
uniqueIdentifier
avOutputDevice
setOutputDevice:options:
isSpeakerRoute
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
setUseWeakMatching:
beginSearchWithTimeout:completion:
sharedSystemScreenContext
sharedAudioPresentationOutputContext
setOutputDevices:
_discoverySession
_activeReconnaissanceSessions
iTunesAudioContext
auxiliaryOutputContext
sharedCompanionLinkClient
_onWorkerQueue_connectRemoteControlChannelForSource:destination:destinationGroupUID:session:name:
registerRequest:callback:
sourceUID
destinationOutputDeviceUID
destinationGroupUID
sessionUID
_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:
registerEvent:callback:
_resetPersistedConnections
mr_first:
_connectionForSource:destination:session:
setSourceUID:
setDestinationOutputDeviceUID:
setDestinationGroupUID:
setSessionUID:
setConnectionAttemptDate:
initWithDeviceUID:sessionUID:targetDevice:error:
setLabel:
setConnection:
sendEvent:destination:userInfo:
addObserverForName:object:queue:usingBlock:
setNotificationToken:
rapportRemoteControlService:didAcceptConnection:
_persistConnectionRecordsToDisk
closeWithError:
userDefaults
_writeConnectionRecordsToDisk:
_readConnectionRecordsFromDisk
synchronize
T@"NSUserDefaults",R,N
_onWorkerQueue_disconnectAllRemoteControlChannels
_onWorkerQueue_disconnectRemoteControlChannelForSource:destination:session:
connections
setConnections:
_workerQueue
_client
_connections
T@"MRCompanionLinkClient",&,N,V_client
T@"NSMutableArray",&,N,V_connections
T@"<MRDRapportRemoteControlServiceDelegate>",W,N,V_delegate
encodeObject:forKey:
decodeObjectOfClass:forKey:
notificationToken
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
connectionAttemptDate
_destinationOutputDeviceUID
_destinationGroupUID
_sourceUID
_sessionUID
_connectionAttemptDate
_notificationToken
T@"NSString",&,N,V_destinationOutputDeviceUID
T@"NSString",&,N,V_destinationGroupUID
T@"NSString",&,N,V_sourceUID
T@"NSString",&,N,V_sessionUID
T@"MRRapportTransportConnection",&,N,V_connection
T@"NSDate",&,N,V_connectionAttemptDate
T@"<NSObject>",&,N,V_notificationToken
initWithOutputDeviceUID:
initWithDestination:
setRequestPlaybackState:
setRequestPlaybackQueue:
setRequestClientProperties:
setRequestSupportedCommands:
setRequestLastPlayingDate:
queue
displayMonitor
lockScreenVisible
controlCenterVisible
displayOn
nearbyDevices
setHasTriggered:
setShouldRun:
shouldRun
_onQueue_reevaluateRemoteControlState
controller:didLoadResponse:
controller:playbackStateDidChangeFrom:to:
controller:playbackQueueDidChangeFrom:to:
controller:contentItemsDidUpdate:
controller:contentItemsDidUpdateWithContentItemChanges:
controller:didLoadArtworkForContentItems:
controller:supportedCommandsDidChangeFrom:to:
controller:deviceLastPlayingDateDidChange:
controller:playerLastPlayingDateDidChange:
controller:clientPropertiesDidChangeFrom:to:
controller:playerPathDidChange:
controller:didUpdateResponse:
controllerWillReloadForInvalidation:
controller:didFailWithError:
startObservationIfNeeded
_configureObserver
_configurationForUID:
_handleLayoutDidChangeNotification:
dataSource
setDataSource:
setQueue:
setNearbyDevices:
hasTriggered
invalidated
setInvalidated:
setDisplayMonitor:
_hasTriggered
_shouldRun
_invalidated
_dataSource
_queue
_nearbyDevices
_displayMonitor
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSMutableSet",&,N,V_nearbyDevices
TB,N,V_hasTriggered
TB,N,V_shouldRun
TB,N,V_invalidated
T@"MRDDisplayMonitor",&,N,V_displayMonitor
T@"<MRDProximityControllerDataSource>",W,N,V_dataSource
_init
_handleMediaServerDeath
reloadOutputContexts
sharedAudioPresentationContext
activeOutputContexts
mr_map:
componentsJoinedByString:
inactiveOutputContexts
reservedOutputContexts
externalDeviceServer
remoteControlService
airPlayService
avOutputContext
startContext:
outputContextForOutputDeviceUID:
containsUID:
mr_any:
outputDeviceUIDs
addSharedAudioOutputContext
initWithAVOutputContext:type:
registerForOutputContextNotifications:
_notifyLocalDeviceDidChangeOutputContext
outputDevicesDidChangeNotification:
_handleOutputContextDidAddLocalDevice:
_handleOutputContextDidRemoveLocalDevice:
processOutputContext:
postClientNotificationNamed:
disconnectOutputContextExternalDevices
hostedRoutingService
hostedRoutingController
disconnect:
allSharedAudioOutputContexts
outputContexts
registerCommunicationsChannels
outputContextForOutputDevice:
setActiveOutputContexts:
setReservedOutputContexts:
setInactiveOutputContexts:
serialQueue
setSerialQueue:
_activeOutputContexts
_reservedOutputContexts
_inactiveOutputContexts
T@"NSMutableDictionary",&,N,V_activeOutputContexts
T@"NSMutableDictionary",&,N,V_reservedOutputContexts
T@"NSMutableDictionary",&,N,V_inactiveOutputContexts
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
closeAll
closeForClient:userCancelled:
pinPairingToken
pinPairingDialogDidClose:forClient:userCancelled:
setPinPairingToken:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
_routingDataSourcePickableRoutesDidChange:
cancelSearch
setCallback:
_timeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setTimeoutTimer:
callback
_endSearch
matchesUniqueIdentifier:
_concludeSearchWithRoute:
timeoutTimer
initWithRouteUID:
_searchInProgress
_timeoutInterval
_routeUID
_callback
_timeoutTimer
T@?,C,N,V_callback
T@"NSTimer",&,N,V_timeoutTimer
T@"NSString",R,N,V_routeUID
outputContextDidRemoveLocalDeviceNotification:
outputContextModificationDidBeginNotification:
outputContextModificationDidFinishNotification:
sharedController
registerObserver:
onQueue_commitLocalDeviceIfNeededWithReason:completion:
activeNowPlayingBundleIdentifiers
completionQueue
unsignedIntegerValue
activeTopologyChangeIdentifiers
supportMultiplayerHost
needsCommandRedirection
enqueuedCompletions
setEnqueuedCompletions:
addOutputDevices:initiator:withCallbackQueue:block:
searchForOutputDeviceUID:timeout:reason:queue:completion:
clusterController:clusterStatusDidChange:
clusterController:clusterTypeDidChange:
nowPlayingSessionDidStartForBundleIdentifier:completion:
nowPlayingSessionDidStopForBundleIdentifier:completion:
setActiveNowPlayingBundleIdentifiers:
setActiveTopologyChangeIdentifiers:
setCompletionQueue:
_activeNowPlayingBundleIdentifiers
_activeTopologyChangeIdentifiers
_completionQueue
_enqueuedCompletions
T@"NSMutableSet",&,N,V_activeNowPlayingBundleIdentifiers
T@"NSMutableSet",&,N,V_activeTopologyChangeIdentifiers
T@"NSObject<OS_dispatch_queue>",&,N,V_completionQueue
T@"NSMutableArray",&,N,V_enqueuedCompletions
_clientDidRegisterCanBeNowPlaying:
_clientDidUnregisterCanBeNowPlaying:
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
setQueuedInitiatePlaybackMessages:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
_handleSupportedAPIsDidChangeForClient:
dataWithPropertyList:format:options:error:
_messageRequiresMediaServerBlessing:
initWithType:pid:bundleID:name:
_messageCanLaunchApp:
_takeProcessAssertionForClient:withReason:
indexPathData
_scheduleEndProcessAssertionForClient:
initWithBytes:length:
localizedDescription
postClientNotificationNamed:userInfo:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
initWithBundleID:indexPathData:
_invalidate
clientInterface
setRemoteObjectInterface:
serviceInterface
setExportedInterface:
exportedInterface
protocol
weakProxyWithObject:protocol:
setExportedObject:
setInterruptionHandler:
setInvalidationHandler:
resume
postNotificationName:object:
_notifyAvailableEndpointsDidChange:
_notifyAvailableOutputDevicesDidChange:
devicePresenceDetected
setEnableThrottling:
availableDistantOutputDevices
_resumeConnection
hostedDiscoverySessionDidInvalidate:
availableOutputDevicesDidChange:
verboseHostedDiscoverySessionLogging
availableEndpointsDidChange:
getDevicePresenceDetectedWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:enableThrottling:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
hostedRoutingController:endpointsDidChange:
hostedRoutingController:outputDevicesDidChange:forFeature:
initWithConnection:hostedRoutingController:
transaction
setTransaction:
enableThrottling
updatedEndpoints
setUpdatedEndpoints:
updatedOutputDevices
setUpdatedOutputDevices:
pendingEndpoints
setPendingEndpoints:
pendingOutputDevices
setPendingOutputDevices:
endpointsDelayed
setEndpointsDelayed:
devicesDelayed
setDevicesDelayed:
lastDiscoveryModeEnableDate
setLastDiscoveryModeEnableDate:
lastDiscoveryModeDisableDate
setLastDiscoveryModeDisableDate:
_enableThrottling
_endpointsDelayed
_devicesDelayed
_hostedRoutingController
_transaction
_updatedEndpoints
_updatedOutputDevices
_pendingEndpoints
_pendingOutputDevices
_lastDiscoveryModeEnableDate
_lastDiscoveryModeDisableDate
T@"MROSTransaction",&,N,V_transaction
TB,N,V_enableThrottling
T@"NSArray",&,N,V_updatedEndpoints
T@"NSArray",&,N,V_updatedOutputDevices
T@"NSArray",&,N,V_pendingEndpoints
T@"NSArray",&,N,V_pendingOutputDevices
TB,N,V_endpointsDelayed
TB,N,V_devicesDelayed
T@"NSString",&,N,V_bundleIdentifier
T@"NSDate",&,N,V_lastDiscoveryModeEnableDate
T@"NSDate",&,N,V_lastDiscoveryModeDisableDate
T@"MRDHostedRoutingController",R,N,V_hostedRoutingController
T@"<MRDAVHostedDiscoverySessionDelegate>",W,N,V_delegate
initWithQueue:
unregisterAllVirtualVoiceInputDevices
registeredToNowPlayingUpdates
registeredToOutputDeviceUpdates
registeredToVolumeUpdates
registeredKeyboardUpdates
registeredToSystemEndpointUpdates
supportedMessages
lastSupportedMessageType
destinationEndpoint
debugName
numberWithUnsignedLongLong:
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
initWithFirst:second:
first
second
requestConnectedDestinationEndpoint:
localizeDestinationPlayerPath:completion:
options
connectToExternalDeviceWithOptions:userInfo:completion:
requestDestinationEndpoint:
setDestinationEndpoint:
discoverGroup:reason:queue:completion:
discoverOutputDevice:reason:queue:completion:
deviceInfoForOrigin:
WHAIdentifier
disconnectWithError:
label
isGizmo
_wantsLibraryCommands
command
shortValue
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
endpointDidConnect:
endpointDidDisconnect:
endpointDidDisconnect:withError:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
flushPendingPlaybackSessionMigrateEvents:
localizeDestinationOrigin:completion:
isDestinationLocal
filterSupportedCommands:
credentials
setCredentials:
sessionPeer
serverDelegate
setServerDelegate:
setOptions:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_pendingPlaybackSessionMigrateEvents
_destinationEndpoint
_options
_credentials
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
T@"MRAVEndpoint",&,N
T@"MRPasscodeCredentials",&,N,V_credentials
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
T@,&,N,V_pinPairingToken
T@"NSString",C,N,V_destinationOutputDeviceUID
T@"NSString",C,N,V_destinationGroupUID
destinationLocal
TB,R,N,GisDestinationLocal
T@"<MRDExternalDeviceServerClientConnectionDelegate>",W,N,V_serverDelegate
TI,N,V_options
anonymousListener
connectionType
externalDeviceForEndpoint:
setHostedRouteDiscoveryMode:
setHostedDiscoverySessions:
setEndpoints:
availableExternalDevices
setHostedExternalDevices:
setDiscoverySession:
listener:shouldAcceptNewConnection:
xpcEndpoint
endpointForOrigin:
endpointForDeviceUID:
_anonymousListener
_hostedDiscoverySessions
T@"NSXPCListenerEndpoint",R,N
supportRapportRemoteControlTransport
resetPersistedConnections
configurationWithEndpointFeatures:
setAlwaysAllowUpdates:
setRoutingContextUID:
setPopulatesExternalDevice:
initWithConfiguration:
_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:
isPrimaryLocalDevice
supportsMultiplayer
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:connectionType:
_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:
valueForKey:
hostDeviceClass
initWithOutputDevice:
supportRapportRemoteControlConnection
supportsRapportRemoteControlTransport
initWithOutputDevice:proxyOutputDevice:
groupID
initWithOutputDevice:groupID:connectionType:
discoverCompanionDevices
isLocalDevice
setAirPlayGroupID:
descriptor
initWithDescriptor:
clusterStatus
validOutputDevicesForOutputDevices:
isProxyGroupPlayer
array
hostedExternalDeviceForEndpointIdentifier:
initWithDesignatedGroupLeader:outputDevices:preferredSuffix:
externalDeviceListenerEndpoint
setExternalDeviceListenerEndpoint:
_logEndpointsChanged:oldEndpoints:
_onQueue_reloadWithOutputDevices:
_onQueue_reloadEndpoints
isEqualToArray:
changeDescriptionTo:keyBlock:isUpdatedBlock:descriptionBlock:
createDiscoverySession
makeEndpointWithOutputDevices:options:
_onQueue_makeExternalDeviceTransportForEndpoint:designatedGroupLeader:
discoverySession
T@"MRAVConcreteRoutingDiscoverySession",&,D,N
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
timeIntervalSince1970
expirationDate
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
_dbHandle
_tokenRecords
_path
T@"NSString",R,N,V_path
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
T@"NSDictionary",R,N,V_route
TB,R,N,V_canBeDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
_handlePersonalDeviceChangeNotification:
_onQueue_restoreState
_onQueue_recalculateStateForReason:
personalDeviceUIDs
personalDeviceState
personalDeviceLockScreenTimeout
setWithArray:
isEqualToSet:
setPersonalDeviceWasRecentlyAttached:
setCurrentPersonalDeviceUIDs:
_onQueue_beginTimerWithInterval:
currentPersonalDeviceUIDs
setPersonalDeviceState:
overrideTimer
personalDeviceControllerStateDidChange:
setOverrideTimer:
personalDeviceWasRecentlyAttached
_personalDeviceWasRecentlyAttached
_currentPersonalDeviceUIDs
_overrideTimer
T@"NSSet",&,N,V_currentPersonalDeviceUIDs
T@"MSVPersistentTimer",&,N,V_overrideTimer
TB,N,V_personalDeviceWasRecentlyAttached
T@"<MRDPersonalDeviceControllerDelegate>",W,N,V_delegate
decodeEntries
_registerNotifications
_registerCompanionLinkHandlers
lastObject
_handleSetNearbyDevicesToRemoteControlMessage:fromClient:
sharedIDSCompanionLinkClient
initWithDictionaryRepresentation:
_addEntry:
perform:completion:
_handleLocalPlaybackBeganNotification:
_maybeMostRecentlyPlayedDeviceChanged:
notifyDevicesInHomeThatPlaybackStarted
_shouldSendCompanionLinkMessage
sendEventToHome:userInfo:
sendPlaybackSessionUpdateToCompanionCoalesceInterval
_maybeSendPlaybackStateMessageToCompanion
sendEvent:toDevicesOfHomeUser:userInfo:
supportLastPlayingDevice
setCurrentPlaybackSessionTypes:
setSupportedPlaybackSessionTypes:
setCurrentPlaybackSessionIdentifier:
setIsPlaying:
setLastPlayingDate:
setLastNotPlayingDate:
setContentItem:
setDeviceInfo:
addEntriesFromDictionary:
sendLastPlayingDeviceToHome
sendEventToCompanion:userInfo:
encodeEntries
lastPlayingDeviceThresholdInterval
sortUsingComparator:
mostRecentDeviceUID
lastSentEntry
setLastSentEntry:
entries
setEntries:
setUserDefaults:
sendingPlaybackStateToCompanion
setSendingPlaybackStateToCompanion:
_sendingPlaybackStateToCompanion
_lastSentEntry
_entries
T@"MRDExternalDeviceHomeServerRecentlyPlayedEntry",&,N,V_lastSentEntry
T@"NSMutableArray",&,N,V_entries
T@"NSUserDefaults",&,N,V_userDefaults
TB,N,V_sendingPlaybackStateToCompanion
isEqualToDate:
isAirPlayActive
contentItem
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
setIncludeMetadata:
lastNotPlayingDate
setDictionaryRepresentation:
_isPlaying
_lastNotPlayingDate
_deviceInfo
_currentPlaybackSessionTypes
_supportedPlaybackSessionTypes
_currentPlaybackSessionIdentifier
_contentItem
_dictionaryRepresentation
TB,N,V_isPlaying
T@"NSDate",&,N,V_lastPlayingDate
T@"NSDate",&,N,V_lastNotPlayingDate
T@"MRDeviceInfo",&,N,V_deviceInfo
T@"NSArray",&,N,V_currentPlaybackSessionTypes
T@"NSArray",&,N,V_supportedPlaybackSessionTypes
T@"NSString",&,N,V_currentPlaybackSessionIdentifier
T@"MRPlayerPath",&,N,V_playerPath
T@"MRContentItem",&,N,V_contentItem
T@"NSDictionary",&,N,V_dictionaryRepresentation
initWithCString:encoding:
allowList
_query:
transactionWaitDurationOnOutOfMemory
_transactionEnded
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
_calculateMemory
outOfMemoryWaitDuration
_processMessage:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
send:toConnection:completion:
cancel
_bytesInUse
_taskAssertion
T@"<MRTransactionDelegate>",W,N,V_delegate
TQ,R,N,V_name
T@"MRPlayerPath",R,N,V_playerPath
initializeServer
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
setTransactions:
setUsedTransactionMemory:
setAllowedTransactionMemory:
setTransactionWaitDuration:
adjustMemory:
handleContentItemTransaction:packets:group:
handlePlaybackQueueRequestTransaction:packets:group:
sendContentItemTransaction:request:playerPath:
_sendContentItemTransaction:request:playerPath:
archivedDataWithRootObject:requiringSecureCoding:error:
setIdentifier:
setUserData:
initWithData:forKey:
sendContentItemTransactionWithPlaybackQueue:request:playerPath:
transactions
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
T@"NSMutableArray",R,N,V_transactions
userData
T@"<MRDPinPairingDialogDelegate>",W,N,V_delegate
setLocalizedModelName:
networkIdentifier
setManagedConfigurationDeviceIdentifier:
setBuildVersion:
currentProtocolVersion
setProtocolVersion:
sharedConnection
effectiveBoolValueForSetting:
setPairingAllowed:
deviceClass
setDeviceClass:
setTightSyncUID:
clusterLeaderUID
setProxyGroupPlayer:
setSenderDefaultGroupUID:
setGroupName:
setGroupLeader:
airplayActive
setAirPlayActive:
setDeviceUID:
setClusterID:
setClusterLeaderID:
setClusterType:
useClusterDevices
setClusterAware:
setRoutingContextID:
tightSyncUID
logicalDeviceID
setGroupLogicalDeviceCount:
setGroupedDevices:
setSupportsExtendedMotion:
useExternalDeviceSystemPairing
setSupportsSystemPairing:
infoDictionary
setBundleVersion:
_readDeviceInfo
setGroupUID:
airPlayGroupID
setAirPlayGroupUID:
setSystemMediaApplication:
setSystemPodcastApplication:
setSystemBooksApplication:
setAirPlayReceivers:
setSupportsSharedQueue:
setSharedQueueVersion:
setSupportsACL:
setSupportsMultiplayer:
stringByAppendingPathComponent:
dataWithContentsOfFile:
unarchivedObjectOfClass:fromData:error:
writeToFile:options:error:
_deviceInfoFilePath
_deviceInfoArchiveClasses
unarchivedObjectOfClasses:fromData:error:
_readLegacyDeviceInfoIdentifier
_writeDeviceInfo:toPath:
currentDeviceInfo
initWithEndpointFeatures:
propertyListWithData:options:format:error:
_onWorkerQueue_connectRemoteControlChannelForDestination:session:options:message:
setMessageHandler:forType:
_handleCompanionDeviceConnectedNotification:
_handleCompanionDeviceDisconnectedNotification:
_handleDeviceInfoDidChangeNotification:
_handleOutputDevicesDidChangeNotification:
sharedLocalEndpoint
_onWorkerQueue_initializeDiscoveryChannel
_onWorkerQueue_connectDiscoveryChannelWithReason:
_onWorkerQueue_disconnectDiscoveryChannel
isConnected
_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:
discoveryChannel
_sendEndpoint:toClient:options:
_onWorkerQueue_sendEndpoint:toClient:options:
handleSetConnectionStateMessage:forClient:
handleSetDiscoveryModeMessage:forClient:
mode
setPriority:
setWaking:
exportEndpoint:
initWithOutputDevices:configuration:
setTransportOptions:
resetConnection
initWithConnection:type:destination:session:
initWithAllSupportedMessages
setSupportedMessages:
_onWorkerQueue_disconnectRemoteControlChannelsForDestination:error:
setDestination:
protobufData
sendMessage:type:destination:session:options:priority:
idsRemoteControlService:didAcceptConnection:
outputDeviceWithUID:
_addAuthorizationCallbackForOutputDevice:destination:session:
_removeAuthorizationCallbackForOutputDevice:
replyWithData:priority:
primaryID
initWithRoute:inputType:
protocolMessageWithProtobufData:error:
response
sendMessage:type:destination:session:options:priority:response:
clientConnection:didReceiveMessage:
clientDidDisconnect:error:
stream:handleEvent:
isDiscoveryChannelConnected
runLoop
_discoveryChannel
_discoveryChannelConnectionTimer
_remoteControlConnections
_sendEndpointScheduled
_lastSentEndpoint
_lastSentEndpointDate
_configuration
_isDiscoveryChannelConnected
_runLoop
T@"MRDIDSServerClientConnection",R,N
TB,R,N,V_isDiscoveryChannelConnected
T@"NSRunLoop",R,N,V_runLoop
T@"<MRDIDSRemoteControlServiceDelegate>",W,N,V_delegate
destination
_destination
T@"NSString",&,N,V_destination
T@"MRExternalDeviceTransportConnection",&,N,V_connection
valueWithBytes:objCType:
objCType
getValue:
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
isLegacyNowPlayingInfoRequest
hasRequestedLegacyNowPlayingInfo
setHasRequestedLegacyNowPlayingInfo:
addRequest:
rangeContainsNowPlayingItem
location
setLocation:
setLength:
hasLocation
hasLength
createPlaybackQueueFromCacheForRequest:fromNowPlayingClient:toXpcClient:
sendPlaybackQueueResponse:forRequest:withMessage:fromNowPlayingClient:toXpcClient:completion:
relayRequest:withMessage:toNowPlayingClient:backToXpcClient:completion:
_cachingPolicyForRequest:forPlayerPath:
originClient
hasArtworkAvailable
removeRequest:
cachingPolicy
handlePlaybackQueueRequest:fromClient:
originClientRequestsForPlayerPath:
_deviceInfoDidChange
_outputContextDevicesDidChange
_outputContextDeviceDidChange
canBeClusterMember
_otherDeviceInfoDidChange:
_deviceInfoDidChangeWithDeviceInfo:
deviceInfoDataSource:deviceInfoDidChange:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_gestaltNotificationToken
_airplayPerfsNotifyToken
_airplayActiveNotifyToken
_airplayAdvertisingNotifyToken
_deviceInfoReloadScheduled
_localEndpoint
T@"MRDeviceInfo",R,N
T@"<MRDDeviceInfoDataSourceDelegate>",W,N,V_delegate
localPlaybackState
localLastPlayingDate
_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:
_registerCallbacks
defaultSupportedCommands
compare:options:
_playerPathForNowPlayingClient:
nowPlayingOriginClient:deviceInfoDidChange:previousDeviceInfo:
nowPlayingOriginClient:currentRouteVolumeDidChange:
nowPlayingOriginClient:currentRouteVolumeControlCapabilitiesDidChange:
setVolumeControlCapabilities:
existingNowPlayingClientForClient:
canBeNowPlayingForPlayerClient:
_onQueue_reevaluateStateWithReason:
nowPlayingOriginClient:applicationActivityDidEnd:
_onQueue_updateActivityStatus:
nowPlayingOriginClient:applicationActivityDidBegin:
creatorProcessID
nowPlayingClientForPlayerPath:
existingNowPlayingClientForPlayerPath:
_onQueue_addNowPlayingClient:
_onQueue_removeNowPlayingClient:
removePlayerClientForPlayer:
nowPlayingOriginClient:clientDidUnregister:
setOverrideClient:
setExplicitNowPlayingClient:
setInferredNowPlayingClient:
_onQueue_calculateComputedNowPlayingClient
setComputedNowPlayingClient:
setActivity:
updateDefaultSupportedCommandsData:forClient:
defaultSupportedCommandsDataForClient:
defaultSupportedCommandsData
isEligibleForSpatialization
_onQueue_reloadInferredStateFromDataSource:reason:
nowPlayingOriginClientDidChangeAudioFormatContentInfo:
_onQueue_calculateInferredNowPlayingClient
_onQueue_calculateInferredPlaybackStateForPlayer:
_shouldHandleNotification:
laterDate:
_onQueue_maybeSavePlaybackStateForNotification:
existingNowPlayingClientForPid:
computeNowPlayingApplication
nowPlayingClientForClient:
mostRecentPlayers
nowPlayingApplicationTimeout
supportNowPlayingPIP
intersectsSet:
inferredNowPlayingClient
_stateFromDataSource:
_onQueue_calculateActiveNowPlayingClient
nowPlayingOriginClient:activePlayerPathDidChange:withPlaybackState:
_onQueue_calculateActiveNowPlayingPlayerClients
nowPlayingOriginClient:activePlayerClientsDidChange:
status
setStatus:
nowPlayingOriginClient:applicationActivityStatusDidChange:
nowPlayingOriginClient:clientDidRegister:
playerClientForPlayer:
_handleNowPlayingAppMaybeDidChange:
nowPlayingOriginClientPlaybackDidTimeout:
setLocalPlaybackState:
setLocalLastPlayingDate:
_handlePlayerIsPlayingDidChange:
_handleOriginIsPlayingDidChange:
_handlePlayerPropertiesDidChange:
_handlePlayerPictureInPictureEnabledDidChange:
_handleActivePlayerDidChange:
_handleNowPlayingApplicationDidUnregisterCanBeNowPlaying:
_handlePlayerDidRegister:
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingAudioFormatContentInfosDidChange:
initWithOrigin:
deviceInfoData
flipVolumeControlCapabilityFlag:enable:
isActivityActive
existingNowPlayingClientForDisplayID:
removeAllClients
removeNowPlayingClientForClient:
clearDefaultSupportedCommandsData
nowPlayingAudioFormatContentInfo
setNowPlayingDataSource:
setDeviceInfoDataSource:
setDeviceInfoData:
activity
overrideClient
explicitNowPlayingClient
deviceInfoDataSource
activePlayerClients
computedNowPlayingClient
_nowPlayingClients
_volumeControlCapabilities
_explicitNowPlayingClient
_activeNowPlayingClient
_activeNowPlayingClientTransaction
_defaultSupportedCommandsData
_origin
_deviceInfoData
_activity
_overrideClient
_nowPlayingDataSource
_deviceInfoDataSource
_registrationDate
_activePlayerClients
_computedNowPlayingClient
_inferredNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_computedNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_inferredNowPlayingClient
T@"MROrigin",R,N,V_origin
T@"MRPlayerPath",R,N
Tf,N
T@"NSData",&,N,V_deviceInfoData
T@"MRMutableApplicationActivity",&,N,V_activity
T@"MRDMediaRemoteClient",&,N,V_overrideClient
T@"MRDNowPlayingClient",&,N,V_explicitNowPlayingClient
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
T@"MRDDeviceInfoDataSource",&,N,V_deviceInfoDataSource
T@"NSDate",R,N,V_registrationDate
T@"MRDNowPlayingClient",R,N
T@"NSArray",R,N,V_activePlayerClients
T@"MRNowPlayingAudioFormatContentInfo",R,N
T@"<MRDNowPlayingOriginClientDelegate>",W,N,V_delegate
isEqualToDictionary:
extendedInfo
indexOfObjectPassingTest:
matchesUID:
initWithDictionary:
isPicked
canBeDefaultSystemRoute
_routeDescription
stopReceivingUpdatesForSource:
_setReceiveUpdates:forSource:
_shouldNotifyChange:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
stateObserver:didReceiveSupportedCommandsChange:
stateObserver:didReceivePlayStateChange:
stateObserver:didReceivePlaybackQueueChange:
stateObserver:didReceivePlaybackQueueCapabilitiesChange:
stateObserver:didReceiveContentItemChange:playerPath:
stateObserver:didReceiveContentItemArtworkChange:playerPath:
stateObserver:didReceiveApplicationClientStateDidChange:
stateObserver:didReceivePlayerStateDidChange:
stateObserver:didReceiveClientDidUnregister:
stateObserver:didReceivePlayerDidUnregister:
stateObserver:didReceiveVolumeControlCapabilitiesChange:playerPath:
stateObserver:didReceiveDeviceInfoDidChange:playerPath:
stateObserver:didReceiveDefaultSupportedCommandsChange:playerPath:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_handleNowPlayingClientDidChange:
_addNowPlayingNotification:selector:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleContentItemsChanged:
_handleContentItemArtworkChanged:
_handleApplicationClientStateChanged:
_handlePlayerStateChanged:
_handleRemoveClient:
_handleRemovePlayer:
_handleDeviceInfoChanged:
_handleDefaultSupportedCommandsChanged:
_removeNowPlayingNotifications
_handleVolumeAvailabilityDidChangeNotification:
removeObserver:name:object:
beginReceivingUpdatesForSource:
_coalescingNowPlayingUpdates
_coalescingArtworkUpdates
_observedNowPlayingNotifications
_observedVolumeControlNotificationToken
_registeredForNowPlayingCount
_registeredForVolumeAvailabilityCount
T@"<MRDNowPlayingStateObserverDelegate>",W,N,V_delegate
_avSessionMediaServicesResetNotification:
_registerAVSystemControllerNotifications
_oddsShimDataSource
_mediaServerController
attributeForKey:
currentRouteHasVolumeControl
uppercaseString
valueForKeyPath:
didCancelRoutePicking:
_notifyDelegateRoutesDidChange
_postCurrentRouteHasVolumeControlDidChangeNotification:
_unregisterAVSystemControllerNotifications
_currentRouteHasVolumeControlDidChangeNotification:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_descriptionForDiscoveryMode:
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
initWithOptions:
sharedMonitor
_handleElectedPlayerDidChangeNotification:
supportLockscreenPlatterDisplayForPersonalDevice
_onQueue_reevaluateShouldShowLockScreenForReason:
lockScreenController:lockScreenWidgetActiveDidChange:
setPreviousPlayerPath:
previousPlayerPath
isLockScreenWidgetVisible
lockScreenController:playerPathDidChange:
_onSerialQueue_restoreElectedPlayer
_onQueue_calculateShouldShowLockScreenForReason:
setAssertion:
personalDeviceController
contentController
lockScreenPlatterHasContent
lockScreenContentControllerStateDidChange:
isLockScreenWidgetActive
assertion
electedPlayerPath
setElectedPlayerPath:
eventType
setEventType:
setPersonalDeviceController:
setContentController:
_playerResult
_previousPlayerPath
_playerPathInvalidationToken
_previousPlayerPathInvalidationToken
_timer
_assertion
_electedPlayerPath
_eventType
_personalDeviceController
_contentController
T@"MRDLockScreenAssertion",&,N,V_assertion
T@"MRPlayerPath",&,N,V_electedPlayerPath
T@"MRPlayerPath",&,N,V_previousPlayerPath
Tq,N,V_eventType
T@"MRDPersonalDeviceController",&,N,V_personalDeviceController
T@"MRDLockScreenContentController",&,N,V_contentController
T@"<MRDLockScreenControllerDelegate>",N,V_delegate
lockScreenWidgetActive
TB,R,N,GisLockScreenWidgetActive
lockScreenWidgetVisible
TB,R,N,GisLockScreenWidgetVisible
createAssertion
delayCreateAssertion
acquireContentProviderAssertionForType:slot:identifier:errorHandler:
T@"SBSLockScreenContentAssertion",&,N,V_assertion
remoteDeviceIdleDisconnectionInterval
_initialize
registerForChanges
setDeviceState:
_onQueue_evaluateShouldDisconnectWithReason:
unregisterForChanges
_handleActiveSystemEndpointChangedNotification:
deviceState
hasPlayedRecently
isMemberOfActiveSystemEndpoint
disconnectTimer
disconnectInterval
pendingDisconnectDate
dateByAddingTimeInterval:
setPendingDisconnectDate:
disconnectOrigin:
timerWithInterval:queue:block:
setDisconnectTimer:
_adjustPlaybackTimerIfNeeded
playbackTimer
recentlyPlayingInterval
setPlaybackTimer:
lockScreenForegrounded
controlCenterForegrounded
systemEndpointController
activeSystemEndpointUID
originClientForGroupLeaderOfDeviceUID:
initWithDataSource:delegate:
_disconnectTimer
_deviceState
_disconnectInterval
_recentlyPlayingInterval
_pendingDisconnectDate
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"MSVTimer",&,N,V_playbackTimer
T@"MSVTimer",&,N,V_disconnectTimer
TQ,N,V_deviceState
Td,R,N,V_disconnectInterval
Td,R,N,V_recentlyPlayingInterval
T@"NSDate",&,N,V_pendingDisconnectDate
T@"<MRDConnectionLifetimeControllerDataSource>",W,N,V_dataSource
T@"<MRDConnectionLifetimeControllerDelegate>",W,N,V_delegate
_initializeExternalDevice:
isPersonalRoute
setUniqueIdentifier:
_externalDeviceClientDidInvalidate:
hostName
setHostName:
port
setHostPort:
isUsingSystemPairing
setUsingSystemPairing:
isPaired
currentConnection
_externalDeviceClientForConnection:
_reloadHostedExternalDeviceCallbacks
_reloadHostedExternalDeviceNotifications
_reloadHostedExternalDeviceSubscribedPlayerPaths
connectWithOptions:clientBundleIdentifier:userInfo:
unpair
_onSerialQueue_endpointSupportsVolumeControl:
setOutputDeviceVolume:outputDeviceUID:queue:completion:
wantsVolumeNotifications
outputDeviceForUID:
isVolumeControlAvailable
outputDeviceVolume:queue:completion:
outputDeviceVolumeControlCapabilities:queue:completion:
setListeningMode:outputDeviceUID:queue:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterAwareDeviceUIDs:removingClusterAwareDeviceUIDs:settingClusterAwareDeviceUIDs:withReplyQueue:completion:
sendCustomData:withName:
ping:callback:withQueue:
sendButtonEvent:
personalOutputDevices
setDiscoveryModeForConfiguration:
_allExternalDeviceClients
_handleMaybeCanMigrateToLocalEndpointDidChange:
lifetimeController
remoteDeviceIdleDisconnection
setLifetimeController:
activeTelevisionRouteID
deviceIsActiveTelevision:
_processCanMigrateToLocalEndpointEvent:timestamp:error:
sharedLocalEndpointForRoutingContextWithUID:
canMigrateToEndpoint:queue:completion:
_reloadEndpoint
_maybePostVolumeDidChange:outputDevice:
_maybePostVolumeControlCapabilitiesDidChange:outputDevice:
_maybePostEndpointDidAddOutputDevice:
_maybePostEndpointDidChangeOutputDevice:
_maybePostEndpointDidRemoveOutputDevice:
removeAllOutputDevices
_mutableExternalDeviceClientsWithRegisteredCallbacks:
setDistantPersonalOutputDevices:
_onSerialQueue_reevaluateVolumeControlCapabilitiesForEndpoint:
_mutableExternalDeviceClientsWithRegisteredNotification:
_postVolumeControlCapabilitiesDidChange:endpoint:outputDevice:
_postVolumeDidChange:endpoint:outputDevice:
localizedName
_userInfoFromEndpoint:outputDevice:
isMediaRemoteDaemon
postClientNotificationNamed:userInfo:predicate:
setConnectionRecoveryBehavior:
initWithUniqueIdentifier:
setConnectionStateCallback:withQueue:
setDiscoveryOutputDevicesChangedCallback:
setUseOutputDeviceCache:
externalOutputContext
updateOutputDevices:
setOutputDevicesUpdatedCallback:withQueue:
removeOutputDevices:
setOutputDevicesRemovedCallback:withQueue:
useOutputDeviceCache
updateVolume:outputDeviceUID:
setVolumeChangedCallback:withQueue:
updateVolumeControlCapabilities:outputDeviceUID:
setVolumeControlCapabilitiesCallback:withQueue:
discoverySessionWithConfiguration:
addOutputDevicesChangedCallback:
_handleExternalDeviceConnectionDidChange:
outputContextDataSourceOutputDeviceDidChangeVolume:
outputContextDataSourceOutputDeviceDidChangeVolumeControlCapabilities:
outputContextDataSourceDidAddOutputDevice:
outputContextDataSourceDidChangeOutputDevice:
outputContextDataSourceDidRemoveOutputDevice:
setNameCallback:withQueue:
setCustomDataCallback:withQueue:
setWantsSystemEndpointNotifications:
addObjectsFromArray:
setVolumeCallback:withQueue:
_endpointShouldNotifyClientsOfTopologyChanges:
_onSerialQueue_endpointShouldPostVolumeNotifications:outputDevice:
_onSerialQueue_isEndpointsDesignatedGroupLeader:
designatedGroupLeader
groupContainsGroupLeader
isEqualToOrderedSet:
_endpointIsSolo:
logicalOutputDeviceCount
expanseManagerTelevisionDidJoinSession:
expanseManagerTelevisionDidLeaveSession:
expanseManagerDidJoinExpanseSession:
expanseManagerDidLeaveExpanseSession:
T@"MROrigin",R,N
getPersonalOutputDevices:
getExternalDeviceMetadataWithCompletion:
getExternalDeviceIsPairedWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
connectWithOptions:userInfo:
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
outputDeviceVolumeControlCapabilities:withCompletion:
setListeningMode:outputDeviceUID:completion:
modifyByAddingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:addingClusterDeviceUIDs:removingClusterDeviceUIDs:settingClusterDeviceUIDs:completion:
pingWithTimeout:callback:
sendButtonEventWithUsagePage:usage:down:
T@"NSArray",C,N
initWithExternalDevice:
externalDeviceClients
tombstone
_resetExternalDevice:
xpcListener
setXpcListener:
externalDeviceCallbackQueue
setExternalDeviceCallbackQueue:
mutableExternalDeviceClients
setMutableExternalDeviceClients:
tombstoned
setTombstoned:
silentDiscoverySession
setSilentDiscoverySession:
canMigrateToLocalEndpointError
setCanMigrateToLocalEndpointError:
canMigrateEvaluationTimestamp
setCanMigrateEvaluationTimestamp:
_useOutputDeviceCache
_tombstoned
_externalDevice
_xpcListener
_externalDeviceCallbackQueue
_mutableExternalDeviceClients
_externalOutputContext
_silentDiscoverySession
_canMigrateToLocalEndpointError
_lifetimeController
_canMigrateEvaluationTimestamp
T@"NSXPCListener",&,N,V_xpcListener
T@"NSObject<OS_dispatch_queue>",&,N,V_externalDeviceCallbackQueue
T@"NSMutableSet",&,N,V_mutableExternalDeviceClients
T@"MRExternalOutputContextDataSource",R,N,V_externalOutputContext
T@"MRAVDistantEndpoint",R,N,V_endpoint
TB,N,V_useOutputDeviceCache
TB,N,V_tombstoned
T@"MRAVRoutingDiscoverySession",&,N,V_silentDiscoverySession
T@"NSError",&,N,V_canMigrateToLocalEndpointError
T@"MRDConnectionLifetimeController",&,N,V_lifetimeController
T@"NSDate",&,N,V_canMigrateEvaluationTimestamp
T@"MRExternalDevice",R,N,V_externalDevice
sharedOutputContextController
registerNotifications
transactionWaitDurationOnNetworkSend
_activeSystemEndpointDidChangeNotification:
endpointDidAddOutputDeviceNotification:
endpointDidRemoveOutputDeviceNotification:
endpointVolumeDidChangeNotification:
endpointVolumeControlCapabilitiesDidChangeNotification:
cryptoSession
_handleClientConnection:
supportedProtocolMessages
_verifyClientVersionCompatibility:withError:
encryptionType
cryptoEnabled
_handleDeviceInfoRequest:fromClient:
_handleCryptoPairingMessage:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleGetRemoteTextInputSessionMessage:fromClient:
_handleRemoteTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
initWithConnectionState:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeDevice:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
_handleModifyOutputContextRequestMessage:fromClient:
_handleGetVolumeMessage:fromClient:
_handleSetVolumeMessage:fromClient:
_handleGetVolumeControlCapabilitiesMessage:fromClient:
_handlePlaybackSessionRequestMessage:fromClient:
_handlePlaybackSessionMigrateRequestMessage:fromClient:
_handlePlaybackSessionMigrateBeginMessage:fromClient:
_handlePlaybackSessionMigrateEndMessage:fromClient:
_handleUpdateActiveSystemEndpointMessage:fromClient:
_handleSetDiscoveryModeMessage:fromClient:
_handleSetListeningModeMessage:fromClient:
replyWithMessage:
_disconnectClient:withError:
_sendStateUpdateMessageFromPlayerPath:source:handler:
initWithDeviceInfo:
initWithClient:
isSupported:
addMessage:
_addSubscribedStateToMessage:forClient:originClient:
_addSubscribedStateToMessage:forClient:nowPlayingClient:
_addSubscribedStateToMessage:forClient:nowPlayingClient:playerClient:
range
defaultPlaybackQueueRequestWithRange:
clients
containsArtwork
copyWithoutArtwork
initWithNowPlayingState:
filteredContentItemsBySubscriptionsForContentItems:
initWithContentItems:forPlayerPath:
supportsSharedQueue
supportedCommands
sharedQueueVersion
playbackStateTimestamp
initWithCapabilities:
initWithDefaultSupportedCommands:forPlayerPath:
_clientForPairingSession:
initWithPairingData:status:
shouldLogPairingSetupCode
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
exportOutputDevice:endpoint:
_createLocalizedOutputDevice:forClient:endpoint:
setIsVolumeControlAvailable:
setHasIsVolumeControlAvailable:
setHasVolume:
initWithSkeleton:
_createLocalizedOutputDevices:forClient:endpoint:
_createVolumelessOutputDevices:
initWithOutputDevices:
_createSkeletonOutputDevices:
initWithOutputDeviceUIDs:
_addToMessage:withAllClusterDeviceMembers:block:
_sendMessageFromDestinationWithSource:handler:
initWithVolume:endpointUID:outputDeviceUID:
initWithCapabilities:endpointUID:outputDeviceUID:
clusterComposition
integerValue
localDeviceUID
initWithRequest:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_notifyAndDisconnectClients:withError:completion:
setConnectedExternalDevices:
setTelevisionEndpoints:
setDiscoverySessions:
setRemoteControlService:
setLocalOutputContextDataSource:
externalDeviceSleepAssertionOnClientConnectDuration
initWithName:timeout:
_prewarmMediaApps
purgeUnusedDiscoverySessions
_findClientIf:
bundleVersion
protocolVersion
minimumSupportedProtocolVersion
minimumSupportedHangdogApplicationVersion
_playerPath:matchesSubscribedPlayerPath:
_shouldSendStateUpdateMessageFromSource:toClient:
_connection:canReceiveUpdatesForPlayerPath:
encryptedMessageWithState:text:attributes:usingCryptoSession:
version
initWithVersion:data:
initWithInputMode:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
sendMessage:queue:reply:
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
gameControllerConnectionDidInterrupt:
initWithName:packets:playerPath:
setTransactionCallback:forName:
pairingManager
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
effectiveValuesForUnionSetting:
lowercaseString
outputDevicesChanged:forConfiguration:
removeOutputDevicesChangedCallback:
serverDiscoveryModeForConfiguration:
setServerDiscoveryMode:forConfiguration:
exportOutputDevices:endpoint:
deleteIdentityWithError:
pairedDevices
setConnected:
dataFromDeviceInfos:
_unpair:
sharedLogger
setShouldVerboselyLog:
initWithKey:data:
_isConnectionForManagedConfigIDAllowed:
isRetrying
setCryptoSession:
state
openInState:
pairingData
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
initWithCommandID:commandResult:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
setRegisteredToNowPlayingUpdates:
volumeUpdates
setRegisteredToVolumeUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
outputDeviceUpdates
setRegisteredToOutputDeviceUpdates:
systemEndpointUpdates
setRegisteredToSystemEndpointUpdates:
_addOutputDevicesToMessage:forClient:withEndpoint:
_addVolumeToMessage:forClient:withEndpoint:completion:
_addNowPlayingStateToMessage:forClient:withEndpoint:
_addSystemEndpointToMessage:forClient:withEndpoint:
initWithHiliteMode:
volumeControlCapabilitiesForOutputDevice:queue:completion:
anyOrigin
activeOriginClient
hasPlaceholder
resolvePlaceholdersForDeviceInfo:
anyClient
anyPlayer
_origin:matchesSubscribedPlayerPath:
_origin:client:matchesSubscribedPlayerPath:
_origin:client:player:matchesSubscribedPlayerPath:
initWithLastPlayingDate:
defaultPlayer
initWithPlayerPath:lastPlayingDate:
initWithDeviceID:errorCode:
buffer
time
gain
setRequest:
returnContentItemAssetsInUserCompletion
initWithPlaybackQueue:forPlayerPath:
initWithDevice:
updatePeer
_syncStateToClient:
endpoints
sendMessage:timeout:queue:reply:
addAuthorizationCallbackForOutputDevice:callback:
isLocalEndpoint
getClusterStatus:
addingOutputDeviceUIDs
removingOutputDeviceUIDs
settingOutputDeviceUIDs
arrayWithCapacity:
setReturnPartialResults:
replyIdentifier
setOutputDevices:initiator:withReplyQueue:completion:
addAuthorizationCallbackForOutputDevice:client:
isSubsetOfSet:
initWithRoute:status:
addOutputDevices:initiator:withReplyQueue:completion:
removeOutputDevices:initiator:withReplyQueue:completion:
beginSearchWithTimeout:mapCompletion:
initWithVolume:
setOutputDeviceVolume:outputDevice:queue:completion:
initWithPlaybackSession:
playbackSession
requestID
setPairedDeviceSync:
setReason:
triggerAudioFadeOutForNowPlayingApplicationWithReplyQueue:completion:
triggerAudioFadeInWithReplyQueue:completion:
configuration
listeningMode
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
remoteControlService:didAcceptClientConnection:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
textEditingService:textEditingDidBegin:withAttributes:payload:
textEditingService:textDidChange:payload:
textEditingService:attributesDidChange:payload:
textEditingServiceTextEditingDidEnd:
textEditingService:echoWithText:
clearEndpointForClient:
nowPlayingStateDidChange:createMessageBlock:createLegacyMessageBlock:
_broadcastKeyboardMessageWithState:text:attributes:
_broadcastRemoteTextInputMessageWithPayload:
_handleHiliteModeChanged:
removeAuthorizationCallbackForOutputDevice:
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_hidEventManager
_stateObserver
_pinPairingDialog
_sleepObserver
_pairingManager
_outputContextController
_outputDeviceCallbackTokens
_discoverySessions
_remoteControlService
T@"MRDRemoteControlService",R,N,V_remoteControlService
externalDeviceForOutputDeviceUID:
setExternalDeviceForOutputDeviceUID:
_handleExternalDeviceConnectionStateDidChangeNotification:
_handleObserverDiscoveryModeDidChangeNotification:
_handleEndpointOutputDevicesDidChangeNotification:
_onQueue_reloadOutputDevices
addEndpointsChangedCallback:
initWithDiscoverySession:
removeEndpointsChangedCallback:
exceptionWithName:reason:userInfo:
_processDiscoveryObserverChanges
willBeLocallyHosted
initWithOutputContext:designatedGroupLeader:
isUsingJSONProtocol
initWithTransport:
addHostedExternalDevice:endpoint:
setExternalDevice:
virtualOutputDeviceDictionary
virtualOutputDevices
setDaemonVirtualDevices:
baseGroupID
unclusteredLocalOutputDevice
isAuxiliary
canRelayCommunicationChannel
isGroupable
isRemoteControllable
isDirectConnectedToOutputDeviceUID:
canAccessAppleMusic
canAccessiCloudMusicLibrary
isGroupLeader
shouldBeLocallyHosted
dictionaryWithCapacity:
msv_compactMap:
unclusteredOutputDevices
arrayByAddingObjectsFromArray:
isMultiplayerAware
groupContextID
parentGroupIdentifier
purgeUndiscoverableDisconnectedDevices:
endpointFeatures
setIsRemoteControllable:
setCanAccessiCloudMusicLibrary:
setCanAccessAppleMusic:
canAccessRemoteAssets
setCanAccessRemoteAssets:
mr_filter:
isAirPlayReceiverSessionActive
parentGroupContainsDiscoverableLeader
hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:
availableDistantAudioOutputDevices
determineGroupLeaderForOutputDevices:options:
addVirtualOutputDevice:forClient:
removeVirtualOutputDevicesForClient:
setVirtualOutputDeviceDictionary:
_observerCalloutQueue
_hostsByGroupID
_availableOutputDevices
_outputDevicesAndClusterMembers
_endpoints
_distantOutputDevices
_discoverySessionOutputDevicesToken
_discoverySessionEndpointsToken
_externalDeviceManager
_virtualOutputDeviceDictionary
T@"MRAVRoutingDiscoverySession",&,V_discoverySession
T@"NSMutableDictionary",&,N,V_virtualOutputDeviceDictionary
isLocallyHosted
takelockScreenAssertion
_addOrigin:withDeviceInfo:emitNotification:
initWithOriginClient:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingPlayerMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleGetClientPropertiesMessage:fromClient:
_handleSetClientPropertiesMessage:fromClient:
_handleUpdateClientPropertiesMessage:fromClient:
_handleGetPlayerPropertiesMessage:fromClient:
_handleSetPlayerPropertiesMessage:fromClient:
_handleUpdatePlayerPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleRegisterCustomOriginMessage:fromClient:
_handleReRegisterCustomOriginMessage:fromClient:
_handleRemoveCustomOriginMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleGetActivePlayerPathsForLocalOriginMessage:fromClient:
_handleGetPlayerPictureInPictureEnabledMessage:fromClient:
_handleSetPlayerPictureInPictureEnabledMessage:fromClient:
_handleContentItemChangedMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
_handleGetDeviceInfo:fromClient:
_handleUpdateDeviceInfo:fromClient:
_handleGetElectedPlayerPathMessage:fromClient:
_handlePlaybackSessionRequest:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleSetDefaultSupportedCommandsMessage:fromClient:
_handleGetLastPlayingDateMessage:fromClient:
_handleSetPlayerClientPropertiesMessage:fromClient:
_handleSetOriginClientPropertiesMessage:fromClient:
_handleRegisterForWakingNowPlayingNotifications:fromClient:
_handleGetAudioFormatContentInfoForOriginMessage:fromClient:
_onQueue_activeOriginClient
_onQueue_companionOriginClient
_onQueue_allNowPlayingInfoClients
_onQueue_originClientForOrigin:
resolvePlayerPath:fromClient:
isAllowedAccessToDataFromPlayerPath:
setNowPlayingClient:
setPlayerClient:
resolvePlayerPath:fromClient:useDefaultPlayerIfNoneSpecified:
isEntitledFor:
existingPlayerClientForPlayer:
_onQueue_queryPlayerPath:
initWithUnresolvedPlayerPath:
setOriginClient:
existingPlayerClientForPlayerPath:
_hasForwarderForOrigin:
_onQueue_originClientForDeviceUID:
_onQueue_originClientForGroupLeaderOfDeviceUID:
initWithRequest:error:playerPath:
_removeNowPlayingClient:forOrigin:
registeredCustomOrigins
removeRegisteredCustomOrigin:
_clientsWithRegisteredOrigin:
_removeOrigin:
postDeviceInfoDidChange:previousDeviceInfo:forOrigin:handler:
postOriginDidRegister:handler:
postActiveOriginDidChange:withPlaybackState:handler:
postVolumeDidChange:volume:handler:
postVolumeCapabilitiesDidChange:capabilities:handler:
postClientDidRegisterForPlayerPath:handler:
postNowPlayingApplicationDidChangeForPlayerPath:withPlaybackState:handler:
postNowPlayingClientStateDidChange:forPlayerPath:handler:
postPlayerDidRegisterForPlayerPath:handler:
postActivePlayerDidChangeForPlayerPath:withPlaybackState:handler:
postNowPlayingPlayerStateDidChange:forPlayerPath:handler:
postIsPlayingDidChange:lastPlayingTimestamp:forPlayerPath:handler:
postPlaybackStateDidChange:forPlayerPath:handler:
hasRequestedSupportedCommands
postSupportedCommandsDidChange:forPlayerPath:handler:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:handler:
initWithContentItems:location:
postPlaybackQueueDidChange:forPlayerPath:handler:
postPlaybackQueueContentItemsDidChange:forPlayerPath:handler:
enumerateFilteredContentItemsBySubscriptionsForContentItems:block:
postPlaybackQueueContentItemsArtworkDidChange:forPlayerPath:handler:
postPlayerDidRegisterCanBeNowPlayingForPlayerPath:handler:
postClientDidRegisterCanBeNowPlayingForPlayerPath:handler:
setActiveOrigin:
supportNanoLinkAgent
addRegisteredCustomOrigin:
initWithUTF8String:
queryPlayerPathForXPCMessage:fromClient:
setCanBeNowPlaying:
dateWithTimeIntervalSinceReferenceDate:
setCanBeNowPlayingTimestamp:
setPerPlayerCanBeNowPlaying:
setHardwareRemoteBehavior:
restoreStateFromController:
msv_map:
setActivePlayerClient:
isLocalOrigin
setHasRequestedSupportedCommands:
setWantsAssertionsForNotificationsWithPlayerPath:
maybePostDistributedNotifications
postPictureInPictureDidChange:forPlayerPath:handler:
postPlayerDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postPlayerDidUnregisterWithPlaybackState:canBeNowPlaying:forPlayerPath:handler:
postClientDidUnregisterCanBeNowPlayingForPlayerPath:handler:
postClientDidUnregisterForPlayerPath:hasDefaultSupportedCommands:canBeNowPlaying:handler:
postActivePlayerPathsDidChangeForOrigin:handler:
postAudioFormatContentInfoDidChangeForOrigin:handler:
postElectedPlayerDidChange:change:event:reason:handler:
postLockScreenActiveDidChange:handler:
postLockScreenVisibleDidChange:handler:
postLockScreenPlayerPathDidChange:handler:
lockScreenController
setOriginClients:
setElectedPlayer:
mostRecentEvent
mostRecentEventReason
mostRecentSelectionReason
setElectedPlayerReason:
setLockScreenWidgetActive:
setLockScreenWidgetVisible:
setLockScreenPlayerPath:
setOriginForwarders:
numberWithUnsignedLong:
postClientNotificationNamed:predicate:
skeleton
dataForKey:
setLocalOriginClient:
_onQueue_setActiveOrigin:saveState:
postOriginDidUnRegister:deviceInfo:handler:
setActiveOriginClient:
nowPlayingServer:activeOriginDidChangeFromOriginClient:toOriginClient:
_onQueue_savePersistentActiveOrigin:
hasRegisteredCustomOrigin:
lockScreenController:lockScreenWidgetVisibleDidChange:
electedPlayerController:electedPlayerDidChange:change:event:reason:
lockScreenPlatterActive
nowPlayingClient:activePlayerDidChangeFromPlayerClient:toPlayerClient:
nowPlayingClient:clientStateDidChange:
nowPlayingClient:playerDidRegister:
nowPlayingClient:playerDidUnregister:
nowPlayingPlayerClient:clientCanBeNowPlayingDidChange:
nowPlayingClient:applicationDidForeground:
activeClientPID
localActiveClientPID
activeClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
localActivePlayerClient
localActiveNowPlayingClient
companionOriginClient
localActivePlayerPath
allNowPlayingInfoClients
allLocalNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
localPlayersForXpcClient:
clearNowPlayingClientForXPCClient:
restoreDeviceInfoToClient:handler:
restoreClientState:handler:
augmentedUserInfoForPlayerPath:
_onQueue_restoredActiveOrigin
electedPlayerController
proximityController
_originClients
_nowPlayingApplicationIsPlayingStates
_playbackQueueServer
_originForwarders
_electedPlayerController
_lockScreenController
_proximityController
_activeOriginClient
_localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
Ti,R,N
T@"MRDNowPlayingPlayerClient",R,N
T@"MRDNowPlayingOriginClient",R,N
T@"NSSet",R,N
T@"MRDElectedPlayerController",R,N,V_electedPlayerController
T@"MRDLockScreenController",R,N,V_lockScreenController
T@"MRDProximityController",R,N,V_proximityController
stringByAppendingFormat:
isActivity
_error
_playerClient
_nowPlayingClient
_originClient
_unresolvedPlayerPath
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
TI,N,V_error
T@"MRPlayerPath",R,N,V_unresolvedPlayerPath
handleCanBeNowPlayingPlayerDidChange:
initializeBundleIdentifier
initializeDisplayName
perPlayerCanBeNowPlaying
anyPlayerIsPlaying
isForegrounded
supportsBackgroundAudio
setProcessUserIdentifier:
parentApplicationBundleIdentifier
needNowPlayingForegroundState
initWithBundleIDs:states:
setIsForegrounded:
setHandler:
applicationInfoForApplication:
bundleInfoValueForKey:PID:
setSupportsBackgroundAudio:
_onQueue_setActivePlayerClient:
setNowPlayingPlayerClient:
_onQueue_activePlayerClient
_reevaluateCanBeNowPlaying
_onQueue_anyPlayerIsPlaying
_onQueue_playerClientForPlayer:
_onQueue_existingPlayerClientForPlayer:
_onQueue_addPlayer:
_onQueue_removePlayerClientForPlayer:
setPushStateClient:
setPushStateActivePlayerClient:
visibility
tintColor
appIcon
canBeNowPlayingTimestamp
notificationPlayerPathFromPlayer:
nowPlayingPlayerClient
pushStateActivePlayerClient
pushStateClient
stateMonitor
setStateMonitor:
_playerClients
_canBeNowPlaying
_effectiveCanBeNowPlaying
_perPlayerCanBeNowPlaying
_isForegrounded
_supportsBackgroundAudio
_canBeNowPlayingTimestamp
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_pushStateClient
_stateMonitor
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
T@"MRClient",&,N,V_pushStateClient
T@"BKSApplicationStateMonitor",&,N,V_stateMonitor
TB,N,V_perPlayerCanBeNowPlaying
T@"NSDate",C,N,V_canBeNowPlayingTimestamp
TB,N,V_isForegrounded
TB,N,V_supportsBackgroundAudio
T@"MRClient",&,N
T@"MRDNowPlayingPlayerClient",&,N
T@"<MRDNowPlayingClientDelegate>",W,N,V_delegate
_terminationHandler
setOutputContextForLocalDeviceDataSource:
_restoreNowPlayingClientState
_clientDidOpenConnection:
expectedClientAuditTokens
setExpectedClientAuditTokens:
setConnectedClientAuditTokens:
restoreClientDeviceInfo:
keepAlive
distantFuture
canBeNowPlayingClients
insertObject:atIndex:
initWithNotification:userInfo:
postNotification:
notification
sharedServiceClient
clientForPlayerPath:
activateWithCompletion:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleGetMediaAppIsInstalledMessage:fromClient:
_handleWakeMediaAppMessage:fromClient:
_handleWakePlayerServiceMessage:fromClient:
_handlePing:fromClient:
_handleRequestBlessMessage:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
_handleCollectClientDiagnosticsMessage:fromClient:
setKeepAlive:
_internalMediaRemoteNotificationIsLegal:
hasPrefix:
applicationProxyForIdentifier:
appState
takeAssertionAndBlessForReason:
acquire
createDiagnosticInfo
diagnosticInfo
setDiagnosticInfo:
_handleCollectClientDiagnosticsMessageWithCompletion:
_collectDiagnosticFromClient:completion:
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
removeClientForPID:
setActiveClients:
setActiveTransactions:
setLocalNowPlayingClient:
systemMediaClient
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
initWithObjects:
getBytes:length:
handleForIdentifier:error:
dataWithBytes:length:
lastBootUUID
connectedClientAuditTokens
_validateAuditTokens:pids:auditTokens:
setLastBootUUID:
_postAppActivityNotificationNamed:withActivity:
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
T@"MRDMediaRemoteServer",R,N
mostRecentCanBeNowPlayingClient
mostRecentPlayingClient
systemPodcastClient
_sendMediaRemoteCommand:withOrigin:
availableOrigins
remoteControlServer
transactionServer
sharedDisplayMonitor
_listenerConnection
_connectionQueue
_localRoutingDataSource
_volumeController
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_termSigHandler
_shouldSendCommandsDuringPhoneCall
_availableOrigins
_sharedDisplayMonitor
T@"NSArray",R,N,V_availableOrigins
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
T@"MRDAVRoutingServer",R,N,V_routingServer
T@"MRDTransactionServer",R,N,V_transactionServer
T@"MRDExternalDeviceRemoteServer",R,N,V_externalDeviceServer
TB,R,N,V_shouldSendCommandsDuringPhoneCall
T@"MRDMediaRemoteClient",R,N
T@"FBSDisplayLayoutMonitor",R,N,V_sharedDisplayMonitor
T@"RPCompanionLinkClient",R,N
initWithName:pid:bundleID:subsystem:reason:flags:
Tq,R,N,V_type
setString:
string
_string
TQ,N,V_type
T@"NSString",&,N,V_string
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
connectToAllOutputDevicesForReason:comparator:queue:completion:
connectToEndpointWhenBeginsPlayback
connectToUserSelectedEndpoint
_handleActiveSystemEndpointDidChangeNotification:
initWithDeallocHandler:
_connectToAllOutputDevicesForReason:comparator:queue:completion:
_connectToOutputDevice:reason:completion:
_connectToGroup:reason:completion:
_discoverOutputDevice:reason:completion:
_discoverGroup:reason:completion:
discoverySessionWithEndpointFeatures:
_onSerialQueue_connectToEndpoint:reason:queue:completion:
discoverEndpointTimeoutInterval
_onSerialQueue_discoverOutputDevice:connect:reason:completion:
_onSerialQueue_discoverGroup:connect:reason:completion:
searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:
searchEndpointsForGroupUID:timeout:reason:queue:completion:
_onSerialQueue_addConnectedEndpoint:
connectToExternalDeviceWithUserInfo:completion:
_handleEndpointDidInvalidateNotification:
_onSerialQueue_removeConnectedEndpoint:
autoConnectingEndpoints
autoConnectedEndpoints
connectToGroup:reason:queue:completion:
_pendingReconSessions
_pendingReconSessionCompletions
_pendingGroupReconSessions
_pendingGroupReconSessionCompletions
_connectedEndpoints
_connectingEndpoints
_pendingConnectingEndpointCompletions
_handlePlaybackQueueChangedNotification:
_handleNowPlayingApplicationDidChangeNotification:
_handleNowPlayingApplicationDidForegroundNotification:
_onSyncSelf_reevaluateElectedPlayerForEvent:withReason:
_shouldUseNotification:
_onSyncSelf_maybeSetupPlaybackTimeoutTimerForEvent:
setActiveSystemEndpointOutputDeviceUID:
activeSystemEndpointOutputDeviceUID
setOriginClient:withChangeType:
_onSyncSelf_calculateElectedPlayerForOriginClient:event:reason:
_resolveChangeTypeWithOriginClient:forEvent:
previousElectedPlayerPath
_activeSystemEndpointOutputDeviceUID
_previousElectedPlayerPath
_mostRecentEvent
_mostRecentEventReason
_mostRecentSelectionReason
T@"NSString",&,N
T@"MRPlayerPath",R,N,V_electedPlayerPath
T@"MRPlayerPath",R,N,V_previousElectedPlayerPath
T@"NSString",R,N,V_event
T@"NSString",R,N,V_eventReason
T@"NSString",R,N,V_selectionReason
T@"NSString",R,N,V_mostRecentEvent
T@"NSString",R,N,V_mostRecentEventReason
T@"NSString",R,N,V_mostRecentSelectionReason
T@"<MRDElectedPlayerControllerDelegate>",N,V_delegate
strongToWeakObjectsMapTable
setCommunicationChannelDelegate:
initWithOutputContextCommunicationChannel:outputContext:
_didReceiveData:fromConnectionID:connectionFactory:
_didCloseCommunicationChannelWithID:error:
initWithAPCommunicationChannel:
numberWithUnsignedInteger:
airPlayRemoteControlService:didAcceptConnection:
ingestData:
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
didReceiveData:fromCommunicationChannel:
didCloseCommunicationChannel:
didSetupReverseCommunicationChannel:
failedToSetupReverseCommunicationChannel:
_systemMusicContext
T@"<MRDAirPlayRemoteControlServiceDelegate>",W,N,V_delegate
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
companionLinkDevices
mediaRouteIdentifier
homeKitUserIdentifiers
_appendDescribableArray:toString:withTitle:indentLevel:
activeClients
activeTransactions
currentAppActivity
setCurrentAppActivity:
activeOrigin
electedPlayer
electedPlayerReason
lockScreenPlayerPath
originForwarders
enqueuedCommands
remoteControlContexts
queuedInitiatePlaybackMessages
connectedExternalDevices
televisionEndpoints
discoverySessions
localOutputContextDataSource
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
setAirplaySecuritySettings:
localReceiverPairingIdentity
setLocalReceiverPairingIdentity:
systemActiveEndpoints
setSystemActiveEndpoints:
setAutoConnectedEndpoints:
setAutoConnectingEndpoints:
migrationEvents
setMigrationEvents:
mediumDevices
setMediumDevices:
promptingDevices
setPromptingDevices:
immediateDevices
setImmediateDevices:
migratingDevices
setMigratingDevices:
isAdvertisingProximity
setIsAdvertisingProximity:
advertisingReasonDescription
setAdvertisingReasonDescription:
hostedRouteDiscoveryMode
hostedDiscoverySessions
hostedExternalDevices
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
usedTransactionMemory
allowedTransactionMemory
transactionWaitDuration
_lockScreenWidgetActive
_lockScreenWidgetVisible
_isAdvertisingProximity
_systemDiscoveryMode
_hostedRouteDiscoveryMode
_dateCreated
_activeTransactions
_currentAppActivity
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_activeOrigin
_electedPlayer
_electedPlayerReason
_lockScreenPlayerPath
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_localOutputContextDataSource
_airplaySecuritySettings
_localReceiverPairingIdentity
_systemActiveEndpoints
_autoConnectedEndpoints
_autoConnectingEndpoints
_migrationEvents
_mediumDevices
_promptingDevices
_immediateDevices
_migratingDevices
_advertisingReasonDescription
_hostedExternalDevices
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
T@"NSDate",R,N,V_dateCreated
T@"NSArray",C,N,V_activeClients
T@"NSArray",C,N,V_activeTransactions
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
T@"NSArray",C,N,V_originClients
T@"MROrigin",&,N,V_activeOrigin
T@"MRPlayerPath",&,N,V_electedPlayer
T@"NSString",&,N,V_electedPlayerReason
TB,N,V_lockScreenWidgetActive
TB,N,V_lockScreenWidgetVisible
T@"MRPlayerPath",&,N,V_lockScreenPlayerPath
T@"NSArray",&,N,V_originForwarders
T@"NSDictionary",C,N,V_enqueuedCommands
T@"NSArray",C,N,V_remoteControlContexts
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_connectedExternalDevices
T@"NSArray",C,N,V_televisionEndpoints
T@"NSArray",C,N,V_discoverySessions
T@"MRDRemoteControlService",&,N,V_remoteControlService
T@"MROutputContextDataSource",&,N,V_localOutputContextDataSource
TI,N,V_systemDiscoveryMode
T@"_MRAVAirPlaySecuritySettingsProtobuf",&,N,V_airplaySecuritySettings
T@"NSString",C,N,V_localReceiverPairingIdentity
T@"NSDictionary",C,N,V_systemActiveEndpoints
T@"NSArray",C,N,V_autoConnectedEndpoints
T@"NSArray",C,N,V_autoConnectingEndpoints
T@"NSArray",C,N,V_migrationEvents
T@"NSArray",C,N,V_nearbyDevices
T@"NSArray",C,N,V_mediumDevices
T@"NSArray",C,N,V_promptingDevices
T@"NSArray",C,N,V_immediateDevices
T@"NSArray",C,N,V_migratingDevices
TB,N,V_isAdvertisingProximity
T@"NSString",C,N,V_advertisingReasonDescription
TI,N,V_hostedRouteDiscoveryMode
T@"NSArray",C,N,V_hostedDiscoverySessions
T@"NSArray",C,N,V_endpoints
T@"NSDictionary",C,N,V_hostedExternalDevices
T@"NSString",&,N,V_discoverySession
T@"NSArray",C,N,V_recordingEndpointClients
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
TQ,N,V_usedTransactionMemory
TQ,N,V_allowedTransactionMemory
Td,N,V_transactionWaitDuration
shouldInitializeGenericBonjourService
shouldInitializeTelevisionBonjourService
shouldInitializeRapportService
_notifyDelegateWithConnection:
setAirPlayService:
genericNetworkService
setGenericNetworkService:
televisionNetworkService
setTelevisionNetworkService:
rapportService
setRapportService:
idsService
setIdsService:
workerQueue
setWorkerQueue:
_airPlayService
_genericNetworkService
_televisionNetworkService
_rapportService
_idsService
T@"MRDBonjourRemoteControlService",&,N,V_genericNetworkService
T@"MRDBonjourRemoteControlService",&,N,V_televisionNetworkService
T@"MRDAirPlayRemoteControlService",&,N,V_airPlayService
T@"MRDRapportRemoteControlService",&,N,V_rapportService
T@"MRDIDSRemoteControlService",&,N,V_idsService
T@"NSObject<OS_dispatch_queue>",&,N,V_workerQueue
T@"<MRDRemoteControlServiceDelegate>",W,N,V_delegate
setDelegate:queue:
_notifyDelegate:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
T@"<MRDPhoneCallObserverDelegate>",W,N,V_delegate
_assertionID
initWithOutputContext:
setDesignatedGroupLeader:
registerForOutputContextNotifications
verifyGroupLeaderForReason:
cleanUp
debugDictionaryRepresentation
outputContext
_generateDeviceInfoWithDesignatedGroupLeader:outputContext:
_maybeForwardOriginToLocalOrigin:
_onQueue_destroyPlayerPathsForOrigin:
_createResolvedPlayerPathFromPlayerPath:
_handleRemoteCommand:withOptions:playerPath:completion:
_handlePlaybackQueueRequest:forPlayerPath:completion:
_handlePlaybackSessionRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateRequest:request:forPlayerPath:completion:
_handlePlaybackSessionMigrateBeginRequest:forPlayerPath:completion:
_handlePlaybackSessionMigrateEndRequest:error:forPlayerPath:completion:
localizedFailureReason
initWithWithSendError:description:
_createPlayerAndWaitForConnection:completion:
bundleIdentifierHierarchy
commitOutputDeviceToContextIfNeededWithReason:completion:
_resolveReason:uid:
_createPlayerForClient:playerPath:deviceInfo:completion:
_sendMessageForPlayerPath:timeout:reason:factory:completion:
_createPlayerAndWaitForCanBeNowPlaying:completion:
initWithRequest:forPlayerPath:
sendMessageWithType:playerPath:timeout:reason:factory:completion:
initWithPlaybackSession:request:forPlayerPath:
initWithRequest:playerPath:
volumeForOutputDeviceUID:error:
setVolume:outputDeviceUID:
volumeControlCapabilitiesForOutputDeviceUID:error:
minusSet:
removeOutputDevices:initiator:withCallbackQueue:block:
setOutputDevices:initiator:withCallbackQueue:block:
onQueue_registerCustomOriginWithName:deviceInfo:
initWithLastSupportedMessageType:
outputContextOutputDevicesDidChangeNotification:
outputContextDidAddOutputDeviceNotification:
outputContextDidRemoveOutputDeviceNotification:
outputContextDataSourceVolumeControlCapabilitiesDidChangeNotification:
outputContextDataSourceVolumeDidChangeNotification:
anyOutputContextDidAddOutputDeviceNotification:
localPlayerPath
existingOriginClientRequestsForPlayerPath:
localizeIfNeeded:
verifyGroupLeader:
setPairingCallback:withQueue:
setPairingAllowedCallback:withQueue:
removeFromParentGroup:queue:completion:
setDiscoveryEndpointsChangedCallback:
wantsNowPlayingNotifications
setWantsNowPlayingNotifications:
wantsNowPlayingArtworkNotifications
setWantsNowPlayingArtworkNotifications:
setWantsVolumeNotifications:
wantsOutputDeviceNotifications
setWantsOutputDeviceNotifications:
wantsSystemEndpointNotifications
errorForCurrentState
currentClientUpdatesConfigMessage
sendClientUpdatesConfigMessage
outputDeviceForUID:error:
setOutputContext:
notificationQueue
setNotificationQueue:
connectionStateCallback
setConnectionStateCallback:
connectionStateCallbackQueue
setConnectionStateCallbackQueue:
outputDevicesUpdatedCallback
setOutputDevicesUpdatedCallback:
outputDevicesUpdatedCallbackQueue
setOutputDevicesUpdatedCallbackQueue:
outputDevicesRemovedCallback
setOutputDevicesRemovedCallback:
outputDevicesRemovedCallbackQueue
setOutputDevicesRemovedCallbackQueue:
volumeCallback
setVolumeCallback:
volumeCallbackQueue
setVolumeCallbackQueue:
volumeControlCapabilitiesCallback
setVolumeControlCapabilitiesCallback:
volumeControlCapabilitiesCallbackQueue
setVolumeControlCapabilitiesCallbackQueue:
_originForwarder
_pendingCommitRequests
_clientBundleIDs
_designatedGroupLeader
_outputContext
_notificationQueue
_connectionStateCallback
_connectionStateCallbackQueue
_outputDevicesUpdatedCallback
_outputDevicesUpdatedCallbackQueue
_outputDevicesRemovedCallback
_outputDevicesRemovedCallbackQueue
_volumeCallback
_volumeCallbackQueue
_volumeControlCapabilitiesCallback
_volumeControlCapabilitiesCallbackQueue
T@"MRAVOutputContext",&,N,V_outputContext
T@"MROrigin",&,N,V_origin
T@"NSObject<OS_dispatch_queue>",&,N,V_notificationQueue
T@?,C,N,V_connectionStateCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionStateCallbackQueue
T@?,C,N,V_outputDevicesUpdatedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesUpdatedCallbackQueue
T@?,C,N,V_outputDevicesRemovedCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_outputDevicesRemovedCallbackQueue
T@?,C,N,V_volumeCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeCallbackQueue
T@?,C,N,V_volumeControlCapabilitiesCallback
T@"NSObject<OS_dispatch_queue>",&,N,V_volumeControlCapabilitiesCallbackQueue
T@"MRAVOutputDevice",&,N,V_designatedGroupLeader
_initWithLabel:
checkXPCConnectionStatusDefaultInterval
checkXPCConnectionStatusDefaultResponseTimeout
_canSendMessage
_checkConnectionStatus
_onCalloutQueue_notifyStatusDidChange:
initWithTimeout:reason:queue:handler:
verboseConnectionMonitorLogging
scheduleSendBarrierBlock:
initWithXPCConnection:label:
connection_t
setConnection_t:
calloutQueue
currentMessageCount
setCurrentMessageCount:
totalMessageCount
setTotalMessageCount:
pendingBarrierCompletion
setPendingBarrierCompletion:
lastStatusCheckDate
setLastStatusCheckDate:
lastStatusChangeDate
setLastStatusChangeDate:
lastMessageSentDate
setLastMessageSentDate:
_label
_pendingBarrierCompletion
_connection_t
_calloutQueue
_currentMessageCount
_totalMessageCount
_status
_lastStatusCheckDate
_lastStatusChangeDate
_lastMessageSentDate
T@"NSXPCConnection",&,N,V_connection
T@"NSObject<OS_xpc_object>",&,N,V_connection_t
T@"NSObject<OS_dispatch_queue>",R,N,V_calloutQueue
TQ,N,V_currentMessageCount
TQ,N,V_totalMessageCount
TQ,N,V_status
TB,N,V_pendingBarrierCompletion
T@"NSDate",&,N,V_lastStatusCheckDate
T@"NSDate",&,N,V_lastStatusChangeDate
T@"NSDate",&,N,V_lastMessageSentDate
T@"<MRXPCConnectionMonitorDelegate>",W,N,V_delegate
sharedAuthorizationSession
initWithRoutingDataSource:hostedRoutingService:systemEndpointController:autoConnectionController:homeServer:avOutputDeviceAuthorizationSession:
setMaxConcurrentOperationCount:
_loadMostRecentlyPicked
_updateSystemRouteDiscoveryMode
setAirplayActive:
_unregisterNotifications
_setPickedRoute:withPassword:options:
applicationPickedRoutes
postSystemEndpointDeviceChange:type:originClient:handler:
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleClearAllAVRoutePasswordsMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_handleGetHostedRoutingXPCEndpointMessage:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleUpdateActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDsMessage:fromClient:
_handleCreateEndpointWithDevices:fromClient:
_handleCreateDirectEndpointForDevices:fromClient:
_handleGroupDevicesAndSendCommand:fromClient:
_handleCreateHostedEndpointForDevices:fromClient:
_handlePredictGroupLeader:fromClient:
_handleRemoveFromParentGroup:fromClient:
_handlePromptForRouteAuthorizationMessage:fromClient:
_handlePresentRouteAuthorizationStatusMessage:fromClient:
_handleGetAirplayStatus:fromClient:
_handleSetNearbyDevice:fromClient:
_handleResetOutputContextMessage:fromClient:
_handleGetExternalDeviceMessage:fromClient:
_handleAddVirtualOutputDeviceMessage:fromClient:
_handleGetVirtualOutputDevicesMessage:fromClient:
_handleCreateGroupWithDevices:fromClient:
_handleStartNowPlayingSession:fromClient:
_handleStopNowPlayingSession:fromClient:
_handleGetOutputContextUIDMessage:fromClient:
_handleMigrateFromEndpointToOutputDevicesMessage:fromClient:
_handleMigrateFromEndpointToEndpointMessage:fromClient:
_handleModifyOutputContextMessage:fromClient:
_createAirPlaySecuritySettings
_postRouteStatusDidChangeNotificationForRoute:newStatus:
_savedPasswordForOutputDevice:
_clearPasswordForOutputDevice:
respondWithAuthorizationToken:completionHandler:
authorizationTokenType
_storePassword:forOutputDevice:
initWithRoute:inputType:responseCallback:cancelCallback:
_handleAuthorizationRequest:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
_setApplicationPickedRoutes:updateRoutes:forClient:
addOperationWithBlock:
indexOfObject:inRange:
removeObjectsInRange:
_saveMostRecentlyPicked
initWithResponse:
inputType
_handleErrorStatus:forRoute:
useAPSyncAPI
_setEndpoint:
initWithJSONData:pipeEndpoint:
jsonDeviceDefinition
_createEndpointForOutputDeviceIDs:completion:
searchEndpointsWithPredicate:timeout:reason:queue:completion:
performMigrationToOutputDevices:request:initiator:queue:completion:
performMigrationToEndpoint:request:queue:completion:
_createHostedEndpointForOutputDeviceUIDs:completion:
_predictGroupLeaderForOutputDeviceIDs:completion:
removeOutputDeviceFromParentGroup:queue:completion:
createOutputContextWithUniqueIdentifier:
modifyWithOutputContext:queue:completion:
_postExternalScreenDidChange
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_handleAuthenticationFailureForRoute:withOptions:
clusterType
_handleClusterErrorStatus:forRoute:
respondWithAuthorizationToken:
activePasswordDialog
_passwordDialogForRouteWithName:usingInputType:
buttonIdentifier
textFieldValues
dictionaryWithDictionary:
setActivePasswordDialog:
_clientInvalidatedNotification:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
outputContextManagerForAllOutputContexts
setAlternateButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
discoveryTransaction
setDiscoveryTransaction:
dismiss
_launchTVClusterSettings
_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:
URLWithString:
_presentPasswordDialogForRoute:withOptions:
identifyingMACAddress
_existingKeychainAccountForOutputDevice:password:
_storePassword:forRoute:
MACAddress
_preferredIdentifierForMACAddress:identifier:name:
_createEndpointForOutputDeviceIDsLegacy:completion:
indexesOfObjectsPassingTest:
objectsAtIndexes:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
_handleGetHostedEndpointForDeviceUIDMessage:fromClient:
_autoConnectionController
_routeUIDsToIgnorePortStatusFailures
_lastClusterConnectionFailureDate
_reconnaissanceSessions
_mostRecentlyPickedDevices
_mostRecentStatus
_airplayActiveNotificationToken
_homeServer
_workerOperationQueue
_localDeviceCommitManager
_airplayActive
_hostedRoutingService
_systemEndpointController
_activePasswordDialog
_discoveryTransaction
T@"MSVSystemDialog",&,N,V_activePasswordDialog
T@"MROSTransaction",&,N,V_discoveryTransaction
TB,N,V_airplayActive
T@"MRDAVHostedRoutingService",R,N,V_hostedRoutingService
T@"MRDAVSystemEndpointController",R,N,V_systemEndpointController
_frontmostApplicationDidChange:
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_mostRecentlyUpdatedClient
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
_notifyDelegateNowPlayingApplicationDidChange
setCachedNowPlayingClients:
initWithRange:
setCachedNowPlayingContentItem:
_notifyDelegateNowPlayingPlaybackStateDidChange
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
cachedNowPlayingContentItem
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
T@"NSSet",&,N,V_cachedNowPlayingClients
T@"MRContentItem",&,N,V_cachedNowPlayingContentItem
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
_identifier
_port
TI,R,N,V_connection
TI,R,N,V_identifier
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",W,N,V_delegate
_removeExternalDeviceWithOutputDeviceUID:forReason:
_tombstoneHostedExternalDevice:
_removeExternalDeviceWithEndpointIdentifier:forReason:
removeObjectIdenticalTo:
_hostedExternalDeviceGraveyard
_hostedExternalDeviceMap
T@"<MRDHostedExternalDeviceManagerDelegate>",W,N,V_delegate
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
registeredDeviceWithID:
setRecordingState:
registeredDevices
_registeredDevices
T@"NSArray",R,C,N
T@"<MRDVirtualAudioInputServerDelegate>",W,N,V_delegate
_setupNotifications
_initializeVolumeLimitDataIfNecessary
_internalSetVolumeValue:
_systemVolumeDidChange:
_systemMuteDidChange:
_EUVolumeLimitEnforcedDidChange:
_EUVolumeLimitDidChange:
_volumeFromAVController
_postVolumeDidChange:
_updateVolumeValueCache
_tearDownNotifications
getVolumeForRoute:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
volumeCategoryForAudioCategory:
setVolumeTo:forCategory:
_volumeValue
_deviceEnforcesEUVolumeLimit
_volumeLimitDataInitialized
_createRemoteAlertHandleIfNeeded
setActivatingForSiri:
activateWithContext:
initWithServiceName:viewControllerClassName:
dictionaryWithObject:forKey:
setUserInfo:
setXpcEndpoint:
newHandleWithDefinition:configurationContext:
remoteAlertHandleDidActivate:
remoteAlertHandleDidDeactivate:
remoteAlertHandle:didInvalidateWithError:
completion
setCompletion:
configurationData
setConfigurationData:
setRouteUID:
center
setCenter:
serviceType
setServiceType:
style
setStyle:
remoteAlertHandle
setRemoteAlertHandle:
_style
_completion
_configurationData
_center
_serviceType
_remoteAlertHandle
T@?,C,N,V_completion
T@"NSData",&,N,V_configurationData
T@"NSObject<OS_xpc_object>",&,N,V_endpoint
T@"NSString",C,N,V_routeUID
T@"NSString",C,N,V_center
TQ,N,V_serviceType
TI,N,V_style
T@"SBSRemoteAlertHandle",&,N,V_remoteAlertHandle
T@"NSString",C,N,V_bundleIdentifier
initWithConnection:queue:defaultReplyQueue:
_handleXPCMessage:
euid
_postNotification:
shouldWakeDeviceForRemoteControlCommands
mediaType
_wakeDevice:dismissScreenSaver:reason:
sendCommand:options:queue:completion:
optionsData
identifierWithPid:
hostProcess
bundle
_relayXPCMessage:andReply:resultCallback:
verboseMRDMediaRemoteClientLogging
xpcMessage
setOutputDeviceDiscoveryMode:
setApplicationPickedRoutes:
_runAssertionName
messageHandler
processName
hardwareRemoteBehavior
routeDiscoveryCount
outputDeviceDiscoveryMode
isActive
_source
_registeredCustomOrigins
_applicationPickedRoutes
_assertions
_relayingMessages
_entitlements
_subscribedWakingPlayerPaths
_isActive
_keepAlive
_hasRequestedLegacyNowPlayingInfo
_hasRequestedSupportedCommands
_hardwareRemoteBehavior
_routeDiscoveryMode
_outputDeviceDiscoveryMode
_messageHandler
_currentTaskAssertion
_processName
_routeDiscoveryCount
_remoteUIService
T@"<MRDXPCMessageHandling>",W,N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",W,N,V_delegate
T@"MRXPCConnection",R,N,V_connection
T@"NSData",R,N
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
T@"NSString",R,N,V_processName
TI,N,V_hardwareRemoteBehavior
TQ,R,N,V_routeDiscoveryCount
TI,N,V_routeDiscoveryMode
TI,N,V_outputDeviceDiscoveryMode
T@"MRDMediaRemoteUIService",&,N,V_remoteUIService
TB,R,N,V_isActive
TB,N,V_keepAlive
TB,N,V_hasRequestedLegacyNowPlayingInfo
TB,N,V_hasRequestedSupportedCommands
TQ,R,N,V_entitlements
availableOutputDeviceGroups
groupLeader
initWithOutputDeviceGroup:groupLeader:outputDevices:
_onQueue_reloadWithEndpoints:
pipeEndpoint
initWithOutputDevice:pipeEndpoint:
T@"MRAVConcreteRoutingDiscoverySession_APSync",&,D,N
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_uniqueIdentifier
_ioDevice
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
TQ,R,N,V_uniqueIdentifier
T^{__IOHIDUserDevice=},R,N,V_ioDevice
_fbsDisplayMonitorConfiguration
layoutMonitor:didUpdateDisplayLayout:withContext:
setTransitionHandler:
monitorWithConfiguration:
configurationForDefaultMainDisplayMonitor
scheduleLayoutChangeForReason:
displayBacklightLevel
setDisplayOn:
elements
setControlCenterForegrounded:
setLockScreenForegrounded:
T@"MRDDisplayMonitor",R,N
_layoutChangeScheduled
_displayOn
_lockScreenForegrounded
_controlCenterForegrounded
TB,N,V_displayOn
TB,N,V_lockScreenForegrounded
TB,N,V_controlCenterForegrounded
_responseCallback
_cancelCallback
_inputType
T@"MRDAVRoute",R,N,V_route
Tq,R,N,V_inputType
_updateSuggestionCountIfNeeded
setUserDisplayPreferencesDidChangeCallback:
shouldConsiderSuggestions
suggestionPreferences
suggestionsDisabledInContext:
suggestionCount
setSuggestionCount:
_notifyDelegate
defaultRequest
setMaxResults:
performWithPreferences:completion:
setShouldConsiderSuggestions:
setSuggestionPreferences:
lock
_shouldConsiderSuggestions
_lock
_suggestionPreferences
_suggestionCount
T@"MRMediaSuggestionPreferences",&,N,V_suggestionPreferences
T{os_unfair_lock_s=I},R,N,V_lock
TB,N,V_shouldConsiderSuggestions
Tq,V_suggestionCount
T@"<MRDLockScreenContentControllerDelegate>",W,N,V_delegate
errorWithDomain:code:userInfo:
optionsWithDictionary:
serviceWithDefaultShellEndpoint
openApplication:withOptions:completion:
processInfo
defaultWorkspace
applicationIsInstalled:
applicationInfoForApplication:completion:
remoteControlInterfaceID
_optionsDictionary
_copyWithZone:usingConcreteClass:
setCommand:
setOriginUID:
setSenderAppDisplayID:
setDestinationAppProcessID:
setRemoteControlInterfaceID:
setAppOptions:
setWithObjects:
copyWithZone:
mutableCopyWithZone:
originatedFromAccessory
originatedFromHID
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
TI,R,N,V_commandType
T@"NSString",R,N,V_senderAppDisplayID
TI,R,N,V_appOptions
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
avrcpCommand
TB,R,N,GisAVRCPCommand
setOptionsData:
TI,D,N
T@"NSData",C,D,N
T@"MRPlayerPath",C,D,N
T@"NSDate",C,D,N
T@"NSString",C,D,N
T@"NSString",C,N
Ti,N
_routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
sampleRate
_picked
_speakerRoute
_modelName
_MACAddress
_dictionary
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_type
T@"NSString",R,N,V_modelName
T@"NSData",R,N,V_MACAddress
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
T@"NSDictionary",R,N,V_dictionary
_indexPathData
T@"NSData",R,N,V_indexPathData
_deviceID
_token
_expirationDate
T@"NSString",R,N,V_deviceID
T@"NSString",R,N,V_token
T@"NSDate",R,N,V_expirationDate
modelID
sharedLocalDevice
requiresAuthorization
_outputDevice
T@"MRAVOutputDevice",R,N,V_outputDevice
initWithRoutingContextUID:multipleBuiltInDevices:
initWithAVOutputDevice:sourceInfo:
_avOutputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
MRDSystemEndpointEntry
MRDAVSystemEndpointController
MRDRedirectionCacheEntry
MRDRemoteControlServer
MRDPhoneCallObserverDelegate
NSObject
MRDXPCMessageHandling
MRDDiagnosticCollecting
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDStreamCapacityManager
MRDStreamCapacityManagerAdditions
MRDNowPlayingPlayerClient
MRDNowPlayingPlayerClientArtworkRequest
MRDNowPlayingPlayerClientPlaybackState
MRDNowPlayingPlayerClientPlaybackStateSnapshot
MRDBonjourRemoteControlService
NSNetServiceDelegate
MRDAVHostedExternalDeviceClient
MRXPCConnectionMonitorDelegate
MRAVDistantExternalDeviceClientProtocol
MRDAVHostedExternalDevicePendingClientState
MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications
MRDNowPlayingDataSourceApplication
MRDNowPlayingDataSourceSession
MRDNowPlayingDataSource
MRDOriginForwarder
MRDOutputDeviceRoutingDataSource
MRDRapportRemoteControlService
MRDRapportRemoteControlServiceConnection
NSSecureCoding
NSCoding
MRDProximityController
MRNowPlayingControllerDelegate
MRDAVOutputContextManager
MRDPinPairingDialog_ATV
MRDAVReconnaissanceSession
MRDAVLocalDeviceCommitManager
MRAVClusterObserver
MRDBrowsableContentServer
MRDAVHostedDiscoverySession
MRAVDistantRoutingDiscoveryServiceProtocol
MRDAVHostedRoutingObserver
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MREndpointObserver
MRDAVHostedRoutingService
NSXPCListenerDelegate
MRDAVHostedDiscoverySessionDelegate
MRDAVHostedRoutingController
MRDExternalDeviceCredentialDatabase
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDPersonalDeviceController
MRDExternalDeviceHomeServer
MRDExternalDeviceHomeServerRecentlyPlayedEntry
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDPinPairingDialog
Provider
MRDIDSRemoteControlService
MRProtocolClientConnectionDelegate
NSStreamDelegate
MRDIDSRemoteControlServiceConnection
MRHID
MRDNowPlayingPlaybackQueueServer
MRDDeviceInfoDataSource
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceObserver
MRDDeviceInfoDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDMediaServerAVRoutingDataSource
MRDPinPairingDialog_CFUN
MRDLockScreenController
MRDPersonalDeviceControllerDelegate
MRDLockScreenContentControllerDelegate
MRDLockScreenAssertion
MRDConnectionLifetimeController
MRDAVHostedExternalDevice
MRExpanseManagerObserver
MRDConnectionLifetimeControllerDataSource
MRDConnectionLifetimeControllerDelegate
MRAVDistantExternalDeviceServiceProtocol
MRDExternalDeviceRemoteServer
MRCryptoPairingSessionDelegate
MRDRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTextEditingServiceDelegate
MRDHostedRoutingController
MRDHostedExternalDeviceManagerDelegate
MRDHostedRoutingControllerAdditions
MRDNowPlayingServer
MRDLockScreenControllerDelegate
MRDElectedPlayerControllerDelegate
MRDProximityControllerDataSource
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDTaskAssertion
MRDAutoConnectionControllerReason
MRDAutoConnectionController
MRDElectedPlayerController
MRDAirPlayRemoteControlService
AVOutputContextCommunicationChannelDelegate
APReceiverMediaRemoteCommunicationChannelDelegate
MRDDiagnostic
MRDRemoteControlService
MRDAirPlayRemoteControlServiceDelegate
MRDBonjourRemoteControlServiceDelegate
MRDRapportRemoteControlServiceDelegate
MRDIDSRemoteControlServiceDelegate
MRDPhoneCallObserver
CXCallObserverDelegate
MRDIDSServerClientConnection
MRDSleepAssertion
MRDAVOutputContextExternalDevice
MRXPCConnectionMonitor
MRDAVRoutingServer
MRDAVSystemEndpointControllerDelegate
AVOutputDeviceAuthorizationSessionDelegate
MRDiOSSimulatorNowPlayingDataSource
MRDSleepObserver
MRDHostedExternalDeviceManager
MRDVirtualAudioInputServer
MRDMediaServerVolumeController
MRDMediaRemoteUIService
SBSRemoteAlertHandleObserver
MRDMediaRemoteClient
MRDAPSyncHostedRoutingController
MRDVirtualTouchDevice
MRDDisplayMonitor
MRDRouteAuthorizationRequest
MRDLockScreenContentController
MRDRemoteControlCommand
NSCopying
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDOutputDeviceRoute
MRDAVOutputDeviceRoute
@16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"NSString"
@"NSDate"
@24@0:8@16
@24@0:8q16
v40@0:8@16q24@32
v48@0:8@16q24@32@40
v48@0:8q16q24@32@40
v56@0:8q16q24q32@40@48
@40@0:8q16q24^@32
@32@0:8q16^@24
@24@0:8^@16
v48@0:8@16q24q32@40
v32@0:8@16@?24
B24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"MRDNowPlayingServer"
@"MRDHostedRoutingController"
@"NSMutableDictionary"
@"NSUserDefaults"
@"MSVPersistentTimer"
@"<MRDAVSystemEndpointControllerDelegate>"
@"MRPlayerPath"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"MRDPhoneCallObserver"16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"MRDMediaRemoteClient"24
v24@0:8@"MRDDiagnostic"16
v40@0:8@16@24@?32
@32@0:8@16@24
B20@0:8I16
@40@0:8@16@24^@32
@"NSMutableSet"
@"MRDPhoneCallObserver"
@24@0:8^{_NSZone=}16
B28@0:8f16^@20
f16@0:8
v24@0:8Q16
@"MRDAVRoutingDataSource"
I24@0:8@16
v28@0:8I16@20
@20@0:8I16
@"NSMutableArray"
@28@0:8@16I24
B32@0:8@16@24
B36@0:8@16@24I32
@?24@0:8@16
I16@0:8
v20@0:8I16
@"MRDAVRoute"
v24@0:8^{__IOHIDEvent=}16
v24@0:8I16I20
^{__IOHIDEventSystemClient=}
@28@0:8@16i24
i16@0:8
v20@0:8B16
d16@0:8
v28@0:8@16B24
@20@0:8B16
@"NSArray"
@"NSData"
@"MRPlaybackQueue"
@"MRDNowPlayingPlayerClientPlaybackState"
@"MROSTransaction"
@"MRPlaybackQueueSubscriptionController"
@"<MRDNowPlayingPlayerClientDelegate>"
@"MRPlayer"
@28@0:8I16@20
q24@0:8@16
v40@0:8@16@24@32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
@"CUBluetoothClient"
@"NSNetService"
@"<MRDBonjourRemoteControlServiceDelegate>"
v24@0:8@"MRXPCConnectionMonitor"16
v36@0:8@16I24@28
v36@0:8@16f24@28
v28@0:8I16@"NSError"20
v24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v24@0:8@"MRAVEndpoint"16
v36@0:8@"MRAVEndpoint"16I24@"MRAVOutputDevice"28
v36@0:8@"MRAVEndpoint"16f24@"MRAVOutputDevice"28
v32@0:8@"MRAVEndpoint"16@"MRAVOutputDevice"24
v32@0:8@"NSArray"16@"MRAVRoutingDiscoverySessionConfiguration"24
@"NSXPCConnection"
@"MRDAVHostedExternalDevicePendingClientState"
@"MRXPCConnectionMonitor"
@"MRDMediaRemoteClient"
@"NSError"
@"MRAVDistantEndpoint"
@"NSNumber"
@"MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications"
@36@0:8i16@20@28
@"NSSet"
@36@0:8@16@24B32
@"NSHashTable"
@"NSDictionary"
@"MROrigin"
@"MRClient"
@"AVOutputDeviceDiscoverySession"
@40@0:8@16@24@32
v56@0:8@16@24@32@40@48
@"<MRDRapportRemoteControlServiceDelegate>"
@"MRCompanionLinkClient"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"MRRapportTransportConnection"
@"<NSObject>"
v32@0:8@16I24I28
v32@0:8@"MRNowPlayingController"16@"MRNowPlayingPlayerResponse"24
v32@0:8@"MRNowPlayingController"16I24I28
v40@0:8@"MRNowPlayingController"16@"MRPlaybackQueue"24@"MRPlaybackQueue"32
v32@0:8@"MRNowPlayingController"16@"NSArray"24
v40@0:8@"MRNowPlayingController"16@"NSArray"24@"NSArray"32
v32@0:8@"MRNowPlayingController"16@"NSDate"24
v40@0:8@"MRNowPlayingController"16@"MRClient"24@"MRClient"32
v32@0:8@"MRNowPlayingController"16@"MRPlayerPath"24
v24@0:8@"MRNowPlayingController"16
v32@0:8@"MRNowPlayingController"16@"NSError"24
@"<MRDProximityControllerDataSource>"
@"MRDDisplayMonitor"
v32@0:8d16@?24
@?16@0:8
v24@0:8@?16
@"NSTimer"
v32@0:8@16Q24
v28@0:8@16I24
v32@0:8@"MRAVClusterController"16Q24
v28@0:8@"MRAVClusterController"16I24
v32@0:8@?16@24
v48@0:8@16{?=^QQ}24@40
@"MRDBrowsableContentAPICoordinator"
v32@0:8I16B20@?24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?I@"NSError">16
v32@0:8I16B20@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v36@0:8@16@24I32
v32@0:8@"MRDHostedRoutingController"16@"NSArray"24
v36@0:8@"MRDHostedRoutingController"16@"NSArray"24I32
@"<MRDAVHostedDiscoverySessionDelegate>"
v32@0:8@"MREmulatedGameController"16@"_MRGameControllerPropertiesProtobuf"24
v32@0:8@"MRAVEndpoint"16@"NSError"24
Q24@0:8@16
@24@0:8Q16
Q24@0:8Q16
v28@0:8{_MRHIDButtonEvent=IIB}16
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRAVEndpoint"
@"MRPasscodeCredentials"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"MRDAVHostedDiscoverySession"16
@"NSXPCListener"
@32@0:8@16Q24
^{sqlite3=}
v24@0:8d16
@"<MRDPersonalDeviceControllerDelegate>"
@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"
@"MRDeviceInfo"
@"MRContentItem"
@40@0:8Q16@24@32
@32@0:8Q16@24
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v64@0:8@16@24Q32Q40@48@?56
v64@0:8@"MRTransaction"16@"NSArray"24Q32Q40@"NSObject<OS_dispatch_queue>"48@?<v@?>56
v32@0:8@"MRTransaction"16Q24
Q24@0:8@"MRTransaction"16
@"<MRDPinPairingDialogDelegate>"
v32@0:8@"MRProtocolClientConnection"16@"MRProtocolMessage"24
v32@0:8@"MRProtocolClientConnection"16@"NSError"24
v32@0:8@"NSStream"16Q24
v44@0:8@16@24I32@36
@"MRDIDSServerClientConnection"
@"MSVTimer"
@"MRAVRoutingDiscoverySessionConfiguration"
@"<MRDIDSRemoteControlServiceDelegate>"
@"NSRunLoop"
@"MRExternalDeviceTransportConnection"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16@0:8
@48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
v64@0:8@16@24@32@40@48@?56
v56@0:8@16@24@32@40@?48
I32@0:8@16@24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{MGNotificationTokenStruct=}
@"AVOutputContext"
@"<MRDDeviceInfoDataSourceDelegate>"
v24@0:8@"MRDNowPlayingDataSource"16
v32@0:8@"MRDDeviceInfoDataSource"16@"MRDeviceInfo"24
v20@0:8f16
v24@0:8I16B20
@20@0:8i16
v20@0:8i16
@"MRDNowPlayingClient"
@"MRMutableApplicationActivity"
@"MRDNowPlayingDataSource"
@"MRDDeviceInfoDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDAVRouteExtendedInfo"
v28@0:8B16q20
v32@0:8@16:24
@"<MRDNowPlayingStateObserverDelegate>"
@"MRDOutputDeviceRoutingDataSource"
v24@0:8@"MRDPersonalDeviceController"16
v24@0:8@"MRDLockScreenContentController"16
B24@0:8^@16
@"MRDNowPlayingServerResult"
@"<MRDLockScreenControllerDelegate>"
@"MRDLockScreenAssertion"
@"MRDPersonalDeviceController"
@"MRDLockScreenContentController"
@"SBSLockScreenContentAssertion"
@"<MRDConnectionLifetimeControllerDataSource>"
@"<MRDConnectionLifetimeControllerDelegate>"
v24@0:8@"MRExpanseManager"16
@"MROrigin"16@0:8
v24@0:8@"MROrigin"16
v36@0:8f16@20@?28
v72@0:8@16@24@32@40@48@56@?64
v28@0:8I16I20B24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v28@0:8I16@"NSDictionary"20
v24@0:8@"NSError"16
v32@0:8@"NSString"16@?<v@?f@"NSError">24
v36@0:8f16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?I@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v72@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSArray"48@"NSArray"56@?<v@?@"NSError">64
v32@0:8d16@?<v@?@"NSError">24
v28@0:8I16@"MRAVRoutingDiscoverySessionConfiguration"20
@"NSArray"16@0:8
v24@0:8@"NSArray"16
v36@0:8I16@20@28
v36@0:8f16@20@28
v28@0:8f16@20
@"MRExternalDevice"
@"MRExternalOutputContextDataSource"
@"MRAVRoutingDiscoverySession"
@"MRDConnectionLifetimeController"
v40@0:8@16d24@?32
v32@0:8@"MRCryptoPairingSession"16@"NSData"24
v32@0:8@"MRCryptoPairingSession"16@"NSString"24
v24@0:8@"MRCryptoPairingSession"16
v40@0:8@"MRCryptoPairingSession"16d24@?<v@?@"NSString">32
v32@0:8@"MRCryptoPairingSession"16@"NSError"24
v32@0:8@"MRDRemoteControlService"16@"MRDExternalDeviceServerClientConnection"24
v40@0:8@16Q24@32
v40@0:8@"MRDExternalDeviceServerClientConnection"16Q24@"_MRGameControllerPropertiesProtobuf"32
v40@0:8@"MRDNowPlayingStateObserver"16@"MRDeviceInfo"24@"MRPlayerPath"32
v32@0:8@"MRDNowPlayingStateObserver"16@"MRPlayerPath"24
v32@0:8@"MRDNowPlayingStateObserver"16@"MRNowPlayingState"24
v40@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"MRPlayerPath"32
v36@0:8@"MRDNowPlayingStateObserver"16I24@"MRPlayerPath"28
v36@0:8@16@24B32
v32@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24
v36@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24B32
v32@0:8@"MRDSleepObserver"16@?<v@?>24
v24@0:8@"MRDSleepObserver"16
v48@0:8@16@24@32@40
v48@0:8@"MRDTextEditingService"16@"NSString"24@"MRTextEditingAttributes"32@"RTIDataPayload"40
v40@0:8@"MRDTextEditingService"16@"NSString"24@"RTIDataPayload"32
v40@0:8@"MRDTextEditingService"16@"MRTextEditingAttributes"24@"RTIDataPayload"32
v24@0:8@"MRDTextEditingService"16
v32@0:8@"MRDTextEditingService"16@"NSString"24
v40@0:8@16@?24@?32
@24@0:8@?16
B32@0:8@16^@24
v32@0:8q16@?24
v40@0:8@16q24@?32
B32@0:8q16@24
v40@0:8Q16@24@32
v24@0:8B16B20
v36@0:8{_MRHIDButtonEvent=IIB}16@28
v64@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16Q48@56
v48@0:8@16@24@32@?40
B40@0:8@16@24@32
B48@0:8@16@24@32@40
@"MRDSystemHIDEventManager"
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"CUPairingManager"
@"MROutputContextController"
@"MRDRemoteControlService"
v24@0:8@"MRDHostedExternalDeviceManager"16
@32@0:8@16^B24
@40@0:8@16@24Q32
@"MRDHostedExternalDeviceManager"
v28@0:8@"MRDLockScreenController"16B24
v32@0:8@"MRDLockScreenController"16@"MRPlayerPath"24
v56@0:8@16@24q32q40@48
v56@0:8@"MRDElectedPlayerController"16@"MRPlayerPath"24q32q40@"NSString"48
v40@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24@"MRDNowPlayingPlayerClient"32
v32@0:8@"MRDNowPlayingClient"16@"MRClient"24
v32@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24
v28@0:8@"MRDNowPlayingClient"16B24
v28@0:8@16f24
v40@0:8@"MRDNowPlayingOriginClient"16@"MRDeviceInfo"24@"MRDeviceInfo"32
v36@0:8@"MRDNowPlayingOriginClient"16@"MRPlayerPath"24I32
v32@0:8@"MRDNowPlayingOriginClient"16@"MRApplicationActivity"24
v32@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24
v28@0:8@"MRDNowPlayingOriginClient"16I24
v28@0:8@"MRDNowPlayingOriginClient"16f24
v32@0:8@"MRDNowPlayingOriginClient"16@"NSArray"24
v24@0:8@"MRDNowPlayingOriginClient"16
v32@0:8@"MRDNowPlayingPlayerClient"16@"MRPlayer"24
v28@0:8@"MRDNowPlayingPlayerClient"16B24
v28@0:8@"MRDNowPlayingPlayerClient"16I24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSData"24
v32@0:8@"MRDNowPlayingPlayerClient"16@"MRPlaybackQueue"24
v32@0:8@"MRDNowPlayingPlayerClient"16Q24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSArray"24
v36@0:8@16I24@?28
v36@0:8@16f24@?28
v40@0:8@16B24B28@?32
v44@0:8B16d20@28@?36
v36@0:8B16@20@?28
v36@0:8I16@20@?28
v40@0:8Q16@24@?32
v40@0:8I16B20@24@?32
v56@0:8@16q24q32@40@?48
v28@0:8B16@?20
B36@0:8@16@24B32
@"MRDNowPlayingPlaybackQueueServer"
@"MRDElectedPlayerController"
@"MRDLockScreenController"
@"MRDProximityController"
@"MRDNowPlayingOriginClient"
@"MRDNowPlayingPlayerClient"
@"<MRDNowPlayingClientDelegate>"
@"BKSApplicationStateMonitor"
v24@0:8@"MRDMediaRemoteClient"16
v36@0:8@"MRDVirtualAudioInputServer"16I24@"MRDVirtualAudioInputServerDevice"28
v32@0:8@"MRDPhoneCallController"16@"MRDRemoteControlCommand"24
@"NSObject<OS_xpc_object>"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"NSObject<OS_dispatch_source>"
@"FBSDisplayLayoutMonitor"
@44@0:8q16i24@28@36
v48@0:8@16@?24@32@?40
v44@0:8@16B24@28@?36
v32@0:8@16q24
v32@0:8q16@24
q32@0:8@16q24
@40@0:8@16q24^@32
@"<MRDElectedPlayerControllerDelegate>"
v24@0:8@"AVOutputContext"16
v40@0:8@"AVOutputContext"16@"NSData"24@"AVOutputContextCommunicationChannel"32
v32@0:8@"AVOutputContext"16@"AVOutputContextCommunicationChannel"24
v32@0:8@"NSData"16@"APReceiverMediaRemoteCommunicationChannel"24
v24@0:8@"APReceiverMediaRemoteCommunicationChannel"16
v40@0:8@16Q24@?32
v32@0:8Q16@24
@"NSMapTable"
@"<MRDAirPlayRemoteControlServiceDelegate>"
v44@0:8@16@24@32B40
v44@0:8@16@24@32I40
v48@0:8@16@24@32I40B44
@"MRApplicationActivity"
@"MROutputContextDataSource"
@"_MRAVAirPlaySecuritySettingsProtobuf"
v32@0:8@"MRDAirPlayRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDBonjourRemoteControlService"16@"MRExternalDeviceTransportConnection"24
v32@0:8@"MRDRapportRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDExternalDeviceServerClientConnection"32@0:8@"MRDIDSRemoteControlService"16@"MRExternalDeviceTransportConnection"24
@"MRDAirPlayRemoteControlService"
@"<MRDRemoteControlServiceDelegate>"
@"MRDBonjourRemoteControlService"
@"MRDRapportRemoteControlService"
@"MRDIDSRemoteControlService"
v32@0:8@"CXCallObserver"16@"CXCall"24
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
@32@0:8@16d24
v44@0:8I16@20@28@?36
v64@0:8Q16@24d32@40@?48@?56
v56@0:8@16d24@32@?40@?48
v44@0:8f16@20@28@?36
v80@0:8@16@24@32@40@48@56@64@?72
v40@0:8d16@?24@32
@32@0:8@16^@24
@"MRDOriginForwarder"
@"MRAVOutputDevice"
@"MRAVOutputContext"
@"<MRXPCConnectionMonitorDelegate>"
v40@0:8@16@24q32
v40@0:8@"MRDAVSystemEndpointController"16@"MRUpdateActiveSystemEndpointRequest"24q32
v32@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24
B40@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24@"NSString"32
@64@0:8@16@24@32@40@48@56
v48@0:8@16q24@32@?40
v28@0:8@16i24
@32@0:8@16q24
v28@0:8i16@20
@56@0:8@16@24@32@40@?48
v36@0:8@16B24@28
@"MRDAutoConnectionController"
@"MRDExternalDeviceHomeServer"
@"NSOperationQueue"
@"MRDAVLocalDeviceCommitManager"
@"MRDAVHostedRoutingService"
@"MRDAVSystemEndpointController"
@"MSVSystemDialog"
^{IONotificationPort=}16@0:8
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDHostedExternalDeviceManagerDelegate>"
@"<MRDVirtualAudioInputServerDelegate>"
v24@0:8@"SBSRemoteAlertHandle"16
v32@0:8@"SBSRemoteAlertHandle"16@"NSError"24
@36@0:8@16I24@28
@"SBSRemoteAlertHandle"
B24@0:8Q16
B40@0:8q16@24d32
v36@0:8@16B24@?28
v32@0:8B16B20@24
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRXPCConnection"
@"MRDMediaRemoteUIService"
B48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
^{__IOHIDUserDevice=}16@0:8
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
@48@0:8@16q24@?32@?40
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<MRDLockScreenContentControllerDelegate>"
@"MRMediaSuggestionPreferences"
@52@0:8I16@20@28@36@44
@24@0:8^{__CFString=}16
@32@0:8^{_NSZone=}16#24
v32@0:8@16^{__CFString=}24
@"AVOutputDevice"
[SystemEndpointController] Reevaluating %{public}@ActiveEndpoint because %{public}@
[SystemEndpointController] %{public}@
[SystemEndpointController] %@SystemEndpoint remains <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
[SystemEndpointController] Updating activeEndpointInfo %@
Caching resolved player path %{public}@ for context %{public}@.
No cache entry found.
Sending cachable command to player path %{public}@ for context %{public}@.
Got a cache creating command from assistant, context: %{public}@.
Performing early return of successful status for backwards compatibility.
Expiring player path for context %{public}@.
Got a cacheable command from assistant, context: %{public}@.
Adding command to assistant cache, context: %{public}@.
Redirecting to cached path: %{public}@
No assistant cache active, context: %{public}@.
Command <%{public}@> ignored because of device state
Broadcasting command <%{public}@> to client: <%@>
Broadcast command %{public}@ timedout after %lf seconds
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %{public}@: %{public}@
Destroying remoteUIService for client: %@
Error for fade out state. Status = %u.
Requesting fade in on next playback for client %{private}@
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
Command ignored because of device state: %{public}@
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Set AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute for command %{public}@
Command <%{public}@> ignored because of pre-processing error %{public}@.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ failed to reply to command (SendCommandErr = %@)
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Sending previously queued command %{public}@ to client %{public}@.
Removing queued commands for %{public}@ %{public}@
Removing queued commands because %{public}@ %@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because of active SharePlay activity.
Ignoring command because a phone call or FaceTime is active.
Purging command: %{public}@
Request: %{public}@<%{public}@> for %{public}@
Response: %{public}@<%{public}@> returned <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds
Set: %{public}@ setting %{public}@ from <%{public}@> to <%{public}@>
Set: %{public}@ setting %{public}@ to <%{public}@>
[MRDNowPlayingPlayerClient] Successfully write artworkData <%@> to disk %@
[MRDNowPlayingPlayerClient] Could not write artworkData to url <%@> with error %@
[MRDNowPlayingPlayerClient] Could not write artworkData directory <%@> with error %@
[MRDNowPlayingPlayerClient] Taking hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] Removing hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] isPictureInPictureEnabled changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] PlaybackState changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] isPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] CanBeNowPlayingPlayer changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionType changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] MXSessionIDs changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionID changed from %u to %u for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is being asked to make artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ already has an in flight artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is making artworkRequest for %{public}@
[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@
[MRDRemoteControlNetworkService] Starting network service: %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Stopping network service %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Did accept connection with service: %{public}@ using type: %{public}@ input: %{public}@ output: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement success with service: %{public}@ using type: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement failed with service: %{public}@ error: %{public}@
[MRDRemoteControlNetworkService] Retrying after 30s...
[MRDRemoteControlNetworkService] Updating txtData because deviceInfo changed...
[MRDRemoteControlNetworkService] Updating txtData because device restrictions changed...
[MRDRemoteControlNetworkService] Updating txtData: %{public}@
[MRDRemoteControlNetworkService] Stopping bonjour service %{public}@
[MRDRemoteControlNetworkService] Initializing bonjour service for type %{public}@
Configuring remote control network service with includesPeerToPeer = %s
[HostedExternalDeviceClient] Caching connectionState %@ %@ for %@
[HostedExternalDeviceClient] Caching deviceName %@ for %@
[HostedExternalDeviceClient] Caching customData %@ %@ for %@
[HostedExternalDeviceClient] Caching endpoint %@ for %@
[HostedExternalDeviceClient] Caching volumeCapabilities %@ outputDevice %@ for %@
[HostedExternalDeviceClient] Caching volume %lf outputDevice %@ for %@
[HostedExternalDeviceClient] Caching didAddOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didChangeOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching didRemoveOutputDevice %@ for %@
[HostedExternalDeviceClient] Caching discoverySessionOutputDevicesChanged %@ configuration %@ for %@
[HostedExternalDeviceClient] Restoring state %@ for %@
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from system screen and system music contexts: %{public}@ %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[MRDRapportRemoteControlServiceConnection] Connecting remoteControlChannel to <%@->%@/%@>...
[MRDRapportRemoteControlServiceConnection] Disconnecting remoteControlChannel from <%@->%@/%@>...
[ProximityController] lockscreen: %@, controlcenter: %@
[ProximityController] Removing all nearby devices because screen off.
[MRDAVOutputContextManager] Returning active outputContext %@ for: %@
[MRDAVOutputContextManager] Returning reserved outputContext %@ for: %@
[MRDAVOutputContextManager] Reusing inactive outputContext %@ for: %@ (%@)
[MRDAVOutputContextManager] Created new outputContext %@ for: %@
[MRDAVOutputContextManager] Re-building output context state in response to mediaserverd death
[MRDAVOutputContextManager] Attempted to process output context with nil contextID: %{public}@
[MRDAVOutputContextManager] OutputContext became active %@ with: %@
[MRDAVOutputContextManager] OutputContext became inactive %@
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
[LocalDeviceCommitManager] Skipping delayed initial commit because an AirPlay session is active
[LocalDeviceCommitManager] Starting nowplaying session for client: %@
[LocalDeviceCommitManager] Delaying start completion because a stop operation is in progress
[LocalDeviceCommitManager] Stopping nowplaying session for client: %@
[LocalDeviceCommitManager] Topology change involving local device began with identifier: %@
[LocalDeviceCommitManager] Topology change involving local device finished with identifier: %@
[LocalDeviceCommitManager] <%@> Skipping commit of local device because device requires command redirection
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a nowplaying session is active
[LocalDeviceCommitManager] <%@> Skipping commit of local device because a topology change is in progress
[LocalDeviceCommitManager] <%@> Enqueueing completion because there is an ongoing commit request
[LocalDeviceCommitManager] Timed out waiting to commit local device with reason: %@
Update: %{public}@<%{public}@> %{public}@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[HostedDiscoverySession] Caching outputDevices %@ for %@
[HostedDiscoverySession] Caching endpoints %@ for %@
[HostedDiscoverySession] Restoring outputDevices %@ for %@
[HostedDiscoverySession] Restoring endpoints %@ for %@
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
Failed to make endpoint due to no qualified group leader in devices: %{public}@
%{public}@ - Endpoints changed
%{public}@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDPersonalDeviceController] Restoring personal device state for devices %@. Remaining time %f.
[MRDPersonalDeviceController] Recalculating state for reason: %@
[MRDPersonalDeviceController] New personal device %@ recently attached.
[MRDPersonalDeviceController] Timeout reached. Personal devices %@ are now stale.
Attempted to enqueue disallowed background task %@
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %ld
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ %@ sending client %@ subscribed packets %@
[MRTransactionServer] %@ received ack
[MRTransactionServer] %@ sending client %@ subscribed packets %@
unable to get an output device identifier, device will not be added to protobuf's grouped devices: %{public}@
Created deviceInfo: %{public}@
Warning: Unknown device network ID
Failed to archive device info
Failed to write device info file
Failed to unarchive device info data
[IDSRemoteControlService] Connecting discoveryChannel to <%@> for reason <%@>...
[IDSRemoteControlService] No device avaiable to connect discoveryChannel to <%@> for reason <%@>
[IDSRemoteControlService] Connecting remoteControlChannel to <%@-%@>...
[IDSRemoteControlService] Disconnecting remoteControlChannel from %@-%@...
[MRDNowPlayingPlaybackQueueServer] Handling playbackQueueRequest <%{public}@> from <%{public}@> for <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Modifying playbackQueueRequest <%{public}@< to <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Error handling playbackQueueRequest <%{public}@>: <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Relaying playbackQueueRequest <%{public}@> to <%{public}@>...
[MRDNowPlayingPlaybackQueueServer] Relay responded to playbackQueueRequest <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Error relaying playbackQueueRequest <%{public}@>: %{public}@
[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:
[MRDNowPlayingOriginClient] Application Activity %{public}@ already set
[MRDNowPlayingOriginClient] Removing nowPlayingClient %{public}@ for %{public}@
[MRDNowPlayingOriginClient] _reevaluateStateWithReason %@
[MRDNowPlayingOriginClient] ActiveNowPlayingClient changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Taking activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] Removing activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] ActiveNowPlayingPlayersClients changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Creating nowPlayingClient for %{public}@
[TelevisionStateObserver] Registering for Now Playing Updates
[TelevisionStateObserver] Unregistering for Now Playing Updates
[TelevisionStateObserver] Registering for volume control updates
[TelevisionStateObserver] Unregistering for volume control updates
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %li for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
[MRDLockScreenController] Setting playerPath from %{public}@ to %{public}@
[MRDLockScreenController] Deferring setting playerPath from %{public}@ to %{public}@ because changeType is <%{public}@> and lock screen is <%{public}@>
[MRDLockScreenController] Restoring defered playerPath from %{public}@ to electedPlayerPath %{public}@
[MRDLockScreenController] Reevaluating shouldShowLockScreen for reason %@
[MRDLockScreenController] Delaying deactivation of lockScreen
[MRDLockScreenController] LockScreen now showing empty controls. Will be dismissed when lock screen is no longer visible
[MRDLockScreenController] Activating lockScreenAssertion
[MRDLockScreenController] Deactivating lockScreenAssertion
[MRDLockScreenController] lockScreenAssertion error %{public}@
[MRDCLC] <%p> Initializing for origin-%@-%ld.
[MRDCLC] <%p> Deallocating.
[MRDCLC] <%p> Re-evaluate for origin-%@-%ld because %@.
[MRDCLC] <%p> Setting timer to disconnect origin-%@-%ld in %.2lf seconds.
[MRDCLC] <%p> Disconnecting origin-%@-%ld.
[MRDCLC] <%p> Will maintain connection for origin-%@-%ld because %@.
[MRDCLC] <%p> Pause pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Cancel pending disconnection for origin-%@-%ld because %@.
[MRDCLC] <%p> Scheduling playback timer for %.2lf seconds.
[MRDCLC] <%p> Cancelling playback timer.
[MRDAVHostedExternalDevice] %{public}@ is tombstoned, rejecting new XPC connection %{public}@
[MRDAVHostedExternalDevice] %{public}@ is accepting new XPC connection %{public}@ %@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following registered callbacks on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following notifications on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is subscribing to the following player paths on %{public}@: %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Client %{public}@ is requesting to connect to external device using hosted endpoint %{public}@ with options %{public}@
[MRDAVHostedExternalDevice] <%{public}@> Already connected to external device
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to disconnect from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to unpair from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to set output device volume to %f using output device %{public}@ on hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to modify hosted endpoint %{public}@ (adding=%{public}@, removing=%{public}@,  setting=%{public}@,)
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to send %llu bytes of custom data with name %{public}@ using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] [Client %{public}@ is requesting to ping external device with timeout %f using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV join.
[MRDAVHostedExternalDevice] %{public}@ check for local route because TV leave.
[MRDAVHostedExternalDevice] %{public}@ Checking for match of endpoint: %{public}@ and active TV: %{public}@
[MRDAVHostedExternalDevice] %{public}@ maintaing no localRoute for %{public}@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ removing localRoute for %@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ adding localRoute for %@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ connection state did change to %{public}@ with error %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ device name did change to %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did receive %llu bytes of custom data with name %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volumeCapabilities did change to %{public}@ for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volume did change to %f for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did add output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did change output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did remove output device %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ client did disconnect: %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint <%{public}@> reevaluating volume control because %{public}@ changed from <%{public}@> to <%{public}@>
[ExternalDeviceServer] Removing television endpoint for client %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] didReceiveApplicationClientStateDidChange %@
[ExternalDeviceServer] didReceivePlayerStateDidChange %@
[ExternalDeviceServer] didReceiveClientDidUnregister %@
[ExternalDeviceServer] didReceivePlayerDidUnregister %@
[ExternalDeviceServer] didReceiveNowPlayingClientChange %@
[ExternalDeviceServer] didReceiveNowPlayingPlayerChange %@
[ExternalDeviceServer] didReceivePlaybackQueueChange %@
[ExternalDeviceServer] didReceiveContentItemChange %@ %@
[ExternalDeviceServer] didReceivePlaybackQueueCapabilitiesChange %@
[ExternalDeviceServer] didReceiveSupportedCommandsChange %@
[ExternalDeviceServer] didReceivePlayStateChange %@
[ExternalDeviceServer] didReceiveVolumeControlCapabilitiesChange %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
Error removing output device from context - device or uid is nil - Output Device: (%@ - %{public}@ - isLocal: %{BOOL}u) Localized Output Device: (%@ - %{public}@)
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@ with error %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] %@Transaction received packets %@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ to playerPath: %{public}@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ for playerPath: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
Checking if device with managedConfigDeviceID, %{public}@, allowed to connect
No managedConfig allow list found. Allowing all devices
Device with managedConfigDeviceID, %{public}@, allowed: %d
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Creating new PairingSession for client %{public}@ from message %{public}@
[ExternalDeviceServer] Processing %lld bytes of crypto pairing data from client %{public}@
[ExternalDeviceServer] Error processing pairing exchange data. %{public}@
[ExternalDeviceServer] Handling pairing failure with OSStatus = %d
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Failed to register new virtual touch device
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Error setting devices on output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
[ExternalDeviceServer] Completed recon session: %{public}@
[ExternalDeviceServer] Reseting Facade
[ExternalDeviceServer] Facading NowPlayingClient from %@ to %@
Failed to create external device transport for %{public}@, group leader: %{public}@
- Selecting devices (non-default selection options) from: %{public}@
- Selection options: %{public}@
- Updating preferred group leader %{public}@ based on better criteria: %{public}@
- Updating preferred group leader because found a remote host: %{public}@
- Updating preferred group leader because locally hosting the group
-- Final preferred group leader: %{public}@ based on criteria: %{public}@
Skipping invalid output device: %{public}@
[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@ for: %{public}@
Ignoring uncommitted output device: %@ (%@)
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
PID Mismatch: Client %{public}@ is trying to make a nowPlayingClient with a different pid %d
PID Mismatch: Client %{public}@ is trying to making a nowPlayingClient with a different bundleID %{public}@
Resolving %{public}@ -> %{public}@ for client %@
Resolving Exisiting %{public}@ -> %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Client %{public}@ requesting to register origin %{public}@
Client %{public}@ requesting to re-register origin %{public}@
Client %{public}@ requesting to unregister origin %{public}@
Not unregistering origin because is local origin
Not unregistering origin because other clients have a reference %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Unable to set can be now playing app. No now playing client found for %@
Unable to set can be now playing player. No player client found for %@
Setting hardware remote behavior to %{public}@ for client %{public}@
Unable to set playback state. No now playing client found for %@
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app without entitlement. Ignoring.
ERROR: now playing client could not be found for setting supported commands
Unable to set properties from message %@. No player client found.
Unable to set properties from message %@. No origin client found for %@
%{public}@ Unable to get audio format content info for origin: %{public}@ | client %{public}@
Posting contentItemChange for path %{public}@ to xpcClient %{public}@ %{public}@
Posting %@ because activePlayerPath changed from <%{public}@> to <%{public}@>
Posting %@ with <%@>
Adding new origin %@
Removing origin %{public}@
Removing active origin %{public}@. Setting active origin to the local one.
Setting active origin from %@ to %@
Persisting active origin %@
Failed to initialize temporary directory
[MRDNowPlayingClient] Setting pid for %{public}@ to %d
[MRDNowPlayingClient] Timeout trying to pid for %{public}@
[MRDNowPlayingClient] CanBeNowPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingClient] Creating playerClient for %{public}@
[MRDNowPlayingClient] ActiveNowPlayingPlayer changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] ParentAppBundleIdentifier changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] BundleIdentifierHierarchy changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] Visibility changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] TintColor changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] AppIcon changed from %{public}@ to %{public}@ for %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %{public}@
Removing client %{public}@
Posting Notification %{public}@
UserInfo %{public}@
Posting Custom Notification %{public}@ to %{public}@
Custom UserInfo %{public}@
CompanionLinkClient invalidation
CompanionLinkClient interrupted
Error activating CompanionLinkClient %{public}@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Client: %{public}@ Set system volume: overriding volume warning
Client: %{public}@ Set system volume: setting volume to %f (warning state = %{public}s)
Client: %{public}@ Adjust system volume: stepping volume by %f (warning state = %{public}s)
Disallowed bundle ID requested for installation status: %{public}@
No app bundle ID provided in call to GetMediaAppIsInstalled message
Unable to wake system app [failed to launch] %{public}@
Unable to wake system app [failed to find client]
Unable to bless app [sync task assertion acquisition failed]
Unable to bless app [task assertion failed]
Unable to bless app [bless failed]
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Client %{public}@ invalidated.
Pidversion out of date for %d
No process for pid %d
Unable to get boot session ID, not restoring clients
Restoring client pids %{public}@
Restoring expected client pids %{public}@
Resetting client and expected pids
SIGTERM received, preparing to shut down
[MRDAutoConnectionController] Begin DiscoverySession %@ because %@
[MRDAutoConnectionController] End DiscoverySession %@
Request: %{public}@<%{public}@> for %{public}@ because %{public}@
[MRDAutoConnectionController] Removing outdated endpoint <%@> (<%@>)
[MRDAutoConnectionController] Removing endpoint <%@> (<%@>)
[MRDElectedPlayerController] Failed to connect to proactive endpoint %@ with error %@. Reset to local.
[MRDElectedPlayerController] Ignoring activeSystemEndpointDidChange for %@ because a new change for %@ was received
[MRDElectedPlayerController] Reevaluating electedPlayer event = %{public}@, reason =  %{public}@
[MRDElectedPlayerController] ElectedPlayer changed from <%@> to <%@> changeType=<%{public}@>, event=%{public}@, eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] ElectedPlayer remained <%@> eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because previousPlayerPath %{public}@ does not exist anymore
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because changeType uninitialized and playerPath %{public}@ is nil and previousPlayerPath %{public}@ is still valid
[AirPlayRemoteControlService] Starting AirPlay remote control service
[AirPlayRemoteControlService] Stopping AirPlay remote control service
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
%{public}@ Topology change failed with error: %@
%{public}@ Failed to register custom origin with ID: %u
%{public}@ Updated grouped devices to: %{public}@
%{public}@ Added localDevice %{public}@ to outputContext %@
%{public}@ Removed groupLeader %{public}@ from outputContext %@
%{public}@ Removed localDevice %{public}@ from outputContext. Clearing all localOrigin nowPlayingData
%{public}@ Removed localDevice %{public}@ from outputContext %@
%{public}@ GroupLeader %{public}@ failed verification on context %{public}@
%{public}@ Calling %lu completions - Original reason: %{public}@
%{public}@ Already committing output device: %{public}@ to: %{public}@. New reason: %{public}@
%{public}@ Committing output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Failed to commit output device: %{public}@ to: %{public}@ because %{public}@ - %{public}@
%{public}@ Skipping commit of output device: %{public}@ to: %{public}@ because %{public}@
%{public}@ Begin Forwarding Origin Data from %{public}@ to %{public}@ for outputContext %{public}@
%{public}@ Destroying playerPaths for origin: %{public}@, client: %{public}@
%{public}@ Destroy playerPaths for origin: %{public}@ for client: %{public}@ finished with error: %{public}@
[ConnectionMonitor] Checked-in connection %@ in %lf seconds
[ConnectionMonitor] Checking connection %@
[ConnectionMonitor] Updated connectionStatus = %@ for %@ after %lf seconds
[ConnectionMonitor] Resumed connection %@ in %lf seconds
[AVRoutingServer] received airplay active notification: %llu
[AVRoutingServer] Failed to register for airplay active events. status = %u
[AVRoutingServer] current airplay active state = %d
[AVRoutingServer] Failed to get current airplay active state. status = %u
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@ (status = %{public}@)
[AVRoutingServer] Authorization request using saved password for %{public}@: %@
[AVRoutingServer] Authorization token failed for %{public}@ : %@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to clear all AirPlay route passwords...
[AVRoutingServer] Error %ld trying to delete passwords
[AVRoutingServer] No passwords to delete
[AVRoutingServer] Error %ld trying to query passwords
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Could not find endpoints for migration between %{private}@ and %{private}@.
[AVRoutingServer] Failed to remove output device UIDs: %{public}@ from parent group with error: %{public}@
[AVRoutingServer] No group leader, nothing to remove for: %{public}@
[AVRoutingServer] Failed to find external device for outputDeviceUID: %{public}@
[AVRoutingServer] Available external devices: %{public}@
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Handling authorization request with custom callback for route %{public}@
[AVRoutingServer] Custom authorization callback returned for route %{public}@
[AVRoutingServer] Prompting user with authorization request route %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting transaction: %{public}@
[AVRoutingServer] Discovery ended. Clearing transaction %{public}@
[AVRoutingServer] Suppressing cluster connection error. %.2f since last alert
[AVRoutingServer] Error connecting to cluster member: %{public}@
[AVRoutingServer] Timed out waiting for action on cluster connection error for route: %{public}@
[AVRoutingServer] Failed to open TVSettings: %{public}@
[AVRoutingServer] AirPlay Error %ld: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %ld: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
[AVRoutingServer] Error getting AirPlay security settings dictionary (OSStatus = %d)
Resolving endpoint for output device UIDs %{public}@
Returning endpoint with only a subset of specified output devices:
    - %{public}@
    + %{public}@
Resolved to endpoint: %{public}@
Setting output devices on endpoint: %{public}@
Error adding devices to endpoint:%{public}@ error:%{public}@
Could not make endpoint for output devices: %{public}@
Predicting endpoint for output device UIDs %{public}@
[iOSSim Data Source] Failed to load playback queue: %{public}@
POWER: Did recieve power callback %{public}@-%{public}@
POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds
[MRDHostedExternalDeviceManager] Created new hostedExternalDevice=%{public}@, endpoint=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, endpointIdentifier=%{public}@ reason=%{public}@
[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, outputDeviceIdentifier=%{public}@ reason=%{public}@
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MediaServerVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
Attempting to activate remote alert handle.
Creating remote alert handle for remote view controller: %{public}@
Remote alert handle did activate.
Remote alert handle did deactivate.
Remote alert handle did invalidate with error: %@
Client switched route discovery mode to: %lu
Client switched output device discovery mode to: %lu
Unable to bless client [sync task assertion acquisition failed] %{public}@
Failed to create assertion: %{public}@
Unable to bless client [bless failed] %{public}@
Unable to relay message with id %lu
Custom origin registered: %@
Custom origin removed: %@
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@> for <%@>
[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@>
[MRDMediaRemoteClient] Restoring connection with notification userInfo %@
Failed to make endpoint due to no qualified group leader among group discoverable devices: %{public}@, out of: %{public}@
Failed to create new hosted external device, missing pipe endpoint for UID: %{public}@
Unable to create IOHIDUserDevice
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
[MRDDisplayMonitor] Layout Changed %@
[MRDLockScreenContentController] failed to retrieve suggestions with error %@
Error blessing %@ for playback initialization. %@
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241123</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>mediaremoted</string>
<key>CFBundleIdentifier</key>
<string>com.apple.mediaremoted</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>19C47</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>15.2</string>
<key>DTSDKBuild</key>
<string>19C47</string>
<key>DTSDKName</key>
<string>iphonesimulator15.2.internal</string>
<key>DTXcode</key>
<string>1300</string>
<key>DTXcodeBuild</key>
<string>13A191</string>
<key>MinimumOSVersion</key>
<string>15.2</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mediaremoted</string>
<key>com.apple.BluetoothServices</key>
<true/>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.bluetooth.system</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.mediaremote.nearby-device</key>
<string>YES</string>
<key>com.apple.mediaremote.send-commands</key>
<true/>
<key>com.apple.mediaremote.set-now-playing-app</key>
<true/>
<key>com.apple.mediaremote.set-playback-state</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>WifiAddress</string>
<string>WifiAddressData</string>
<string>EthernetMacAddress</string>
</array>
<key>com.apple.private.associated-domains</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.mediaremote.v2</string>
</array>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
<key>com.apple.proximitycontrol</key>
<true/>
<key>com.apple.proximitycontrol.lockscreenControls</key>
<true/>
<key>com.apple.rootless.storage.coreduet_knowledge_store</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/private/var/containers/Bundle/</string>
<string>/Applications/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array>
<string>/private/var/tmp/com.apple.mediaremoted/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/MediaRemote/</string>
<string>/Library/UserConfigurationProfiles/EffectiveUserSettings.plist</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.powerlog.plxpclogger.xpc</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callcapabilities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities</string>
<string>com.apple.telephonyutilities.callservicesdaemon.conversationmanager</string>
<string>com.apple.ProximityControl.server</string>
<string>com.apple.airplay.apsynccontroller.xpc</string>
<string>com.apple.airplay.receiver.mediaremote.services</string>
<string>com.apple.audio.AudioSession</string>
<string>com.apple.BluetoothServices</string>
<string>com.apple.callkit.callcontrollerhost</string>
<string>com.apple.commcenter.coretelephony.xpc</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.coremedia.admin</string>
<string>com.apple.coremedia.endpoint.xpc</string>
<string>com.apple.coremedia.endpointuiagent.xpc</string>
<string>com.apple.coremedia.routediscoverer.xpc</string>
<string>com.apple.coremedia.routingcontext.xpc</string>
<string>com.apple.coremedia.systemcontroller.xpc</string>
<string>com.apple.coremedia.volumecontroller.xpc</string>
<string>com.apple.coremedia.endpointremotecontrolsession.xpc</string>
<string>com.apple.GameController.gamecontrollerd</string>
<string>com.apple.identityservicesd.embedded.auth</string>
<string>com.apple.idsremoteurlconnectionagent.embedded.auth</string>
<string>com.apple.iohideventsystem</string>
<string>com.apple.iokit.powerdxpc</string>
<string>com.apple.mediaremoted.xpc</string>
<string>com.apple.PairingManager</string>
<string>com.apple.PineBoardServices</string>
<string>com.apple.PowerManagement.control</string>
<string>com.apple.SBUserNotification</string>
<string>com.apple.securityd</string>
<string>com.apple.server.bluetooth.le.att.xpc</string>
<string>com.apple.SharedWebCredentials</string>
<string>com.apple.SharingServices</string>
<string>com.apple.springboard.backgroundappservices</string>
<string>com.apple.springboard.services</string>
<string>com.apple.SystemConfiguration.configd</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.CoreDuet</string>
<string>com.apple.lockscreen.shared</string>
<string>com.apple.duetexpertd</string>
<string>com.apple.spotlightui</string>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mediaremote</string>
<string>com.apple.mediaremoted</string>
<string>com.apple.airplay</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.avfoundation</string>
<string>com.apple.coreaudio</string>
<string>com.apple.coremedia</string>
<string>com.apple.avfaudio</string>
<string>com.apple.ids</string>
<string>com.apple.conference</string>
<string>com.apple.facetime.bag</string>
<string>com.apple.da</string>
</array>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>AppleJPEGDriverUserClient</string>
<string>IOHIDResourceDeviceUserClient</string>
<string>IOSurfaceAcceleratorClient</string>
<string>IOSurfaceRootUserClient</string>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.ts.mach-task-name</key>
<true/>
<key>com.apple.sharing.ProximityClient</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.activateRemoteAlert</key>
<true/>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.lockScreenContentAssertion</key>
<true/>
<key>com.apple.springboard.remote-alert</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>modify-calls</string>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
