@(#)PROGRAM:BiomeFlexibleStorage  PROJECT:BiomeFlexibleStorage-93.1.1
fffffFW@
Y@333333
BMFlexibleStorageTableErrorDomain
BiomeFlexibleStorage
setupClassArray, classArray nil or 0 entries
setupClassArray, can not open database
CREATE TABLE IF NOT EXISTS "%@" (
REPLACE INTO "%@" VALUES (
classArray and columnNames sizes do not match
"%@" TEXT
"%@" REAL
classArray must contain NSString or NSNumber
 UNIQUE PRIMARY KEY
BMTableUpsertSubscriber: input array has %lu elements and must have %lu elements
input classes must match (index=%ld) %@ vs. %@
SELECT * FROM "%@"
tables
privateTable
v8@?0
Schema: %@  | Rows: %@
columns
migration
%@ not implemented by child class %@
PRAGMA foreign_keys = ON
CREATE TABLE IF NOT EXISTS BM_METADATA (bm_key TEXT UNIQUE PRIMARY KEY ON CONFLICT REPLACE NOT NULL, bm_value TEXT)
SELECT bm_value FROM BM_METADATA WHERE bm_key='schema_version'
bm_value
INSERT INTO BM_METADATA (bm_key, bm_value) VALUES ('schema_version', ?); 
commit
rollback
registrations.db
CREATE TABLE BFS_MANAGED_DBS (  client_bundle TEXT NOT NULL,  db_path TEXT NOT NULL,  source_streams_rowid INTEGER,  registration_date INTEGER(4) DEFAULT (strftime('%s','now')),  last_communication_date INTEGER(4) DEFAULT (strftime('%s','now')),   PRIMARY KEY (client_bundle, db_path, source_streams_rowid) ); CREATE INDEX client_idx ON BFS_MANAGED_DBS (client_bundle); CREATE INDEX source_idx ON BFS_MANAGED_DBS (source_streams_rowid); 
CREATE TABLE SOURCE_STREAMS (  stream_name TEXT PRIMARY KEY ON CONFLICT IGNORE );
registerClient
INSERT INTO SOURCE_STREAMS (stream_name) VALUES (?)
SELECT rowid FROM SOURCE_STREAMS WHERE stream_name == ?
INSERT INTO BFS_MANAGED_DBS (client_bundle, db_path, source_streams_rowid) VALUES (?,?,?) ON CONFLICT(client_bundle, db_path, source_streams_rowid) DO UPDATE SET last_communication_date=strftime('%s','now')
SELECT s.stream_name, r.client_bundle FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid
SELECT s.stream_name, count(r.client_bundle) FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid GROUP BY s.stream_name
SELECT r.client_bundle, r.db_path, r.registration_date, r.last_communication_date FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.stream_name = ? AND s.rowid=r.source_streams_rowid
com.apple.siriinferenced
/var/mobile/Library/com.apple.siri.inference/siriremembers.sqlite3
BMStreamsAccessClient
Class getBMStreamsAccessClientClass(void)_block_invoke
BMRegistrar.m
Unable to find class %s
void *BiomeStreamsLibrary(void)
BMSource
Class getBMSourceClass(void)_block_invoke
children
columnNames
v24@?0Q8^B16
bm_deletion
CREATE TABLE BM_MANAGED_TABLES (bm_managed_table TEXT UNIQUE PRIMARY KEY ON CONFLICT IGNORE NOT NULL, bm_source_id TEXT NOT NULL); CREATE TABLE BM_SESSION_CONTEXT (bm_rowid INTEGER PRIMARY KEY AUTOINCREMENT, bm_origin_id TEXT); CREATE TABLE BM_DERIVED_OBJECTS (bm_managed_table_rowid INTEGER NOT NULL, bm_derived_rowid INTEGER NOT NULL, bm_context_rowid INTEGER NOT NULL); CREATE TRIGGER bm_managed_table_ad AFTER DELETE ON BM_MANAGED_TABLES BEGIN DELETE FROM BM_DERIVED_OBJECTS WHERE bm_managed_table_rowid == old.rowid; END; CREATE TRIGGER bm_derived_objects_ad AFTER DELETE ON BM_DERIVED_OBJECTS   WHEN (SELECT count(*) FROM BM_DERIVED_OBJECTS WHERE bm_context_rowid == old.bm_context_rowid) == 0 BEGIN  DELETE FROM BM_SESSION_CONTEXT WHERE bm_rowid == old.bm_context_rowid; END; 
SELECT bm_managed_table FROM BM_MANAGED_TABLES;
CREATE TRIGGER bm_%@_ai AFTER INSERT ON %@ BEGIN  INSERT INTO BM_DERIVED_OBJECTS (bm_managed_table_rowid, bm_derived_rowid, bm_context_rowid)  SELECT  t.rowid,          new.rowid,          c.rowid  FROM BM_MANAGED_TABLES t, BM_SESSION_CONTEXT c  WHERE t.bm_managed_table == '%@'  ORDER BY c.rowid DESC LIMIT 1;END;
CREATE TRIGGER bm_%@_ad AFTER DELETE ON %@ BEGIN  DELETE FROM BM_DERIVED_OBJECTS  WHERE bm_derived_rowid == old.rowid AND    bm_managed_table_rowid == (SELECT rowid FROM BM_MANAGED_TABLES WHERE bm_managed_table == '%@'); END;
BMSQLStoreManager.m
Invalid parameter not satisfying: %@
[(id<BMSourceMethods>)source identifier]
INSERT INTO BM_MANAGED_TABLES (bm_managed_table, bm_source_id) VALUES (?, ?)
[event respondsToSelector:@selector(identifier)]
INSERT INTO BM_SESSION_CONTEXT (bm_origin_id) VALUES (?)
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c, BM_MANAGED_TABLES t WHERE t.bm_managed_table==? AND c.bm_origin_id==? AND bm_managed_table_rowid==t.rowid AND bm_context_rowid==c.rowid
SELECT rowid,bm_managed_table from BM_MANAGED_TABLES WHERE bm_source_id==?
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c WHERE c.bm_origin_id IN (%@) AND d.bm_managed_table_rowid==? AND d.bm_context_rowid==c.rowid
DELETE FROM %@ WHERE rowid IN (%@)
BiomePubSub
file-write*
-[_bmFMDatabase initWithPath:]
FMDatabase.m
sqlite3_threadsafe()
2.7.7
FMDBVersion is invalid: Please use FMDBUserVersion instead.
:memory:
error opening!: %d
Closing leaked statement
error closing!: %d
%s:%d
-[_bmFMDatabase busyRetryTimeout]
FMDB: busyRetryTimeout no longer works, please use maxBusyRetryTimeInterval
-[_bmFMDatabase setBusyRetryTimeout:]
FMDB: setBusyRetryTimeout does nothing, please use setMaxBusyRetryTimeInterval:
B24@?0@"_bmFMStatement"8^B16
query
API misuse, -[_bmFMDatabase setCachedStatement:forQuery:] query must not be nil
en_US
select name from sqlite_master where type='table'
The _bmFMDatabase %@ is currently in use.
The _bmFMDatabase %@ is not open.
_bmFMDatabase
NULL
%@ executeQuery: %@
DB Error: %d "%@"
DB Query: %@
DB Path: %@
%@ = %@
Error: unable to bind (%d, %s
Could not find index for %@
data: %ld bytes
obj: %@
Error: the bind count is not correct for the # of variables (executeQuery)
Error inserting batch: %s
rollback transaction
commit transaction
begin exclusive transaction
begin deferred transaction
begin immediate transaction
name
savepoint '%@';
release savepoint '%@';
rollback transaction to savepoint '%@';
dbSavePoint%ld
%@ %ld hit(s) for query %@
WARNING: Requested sleep of %i milliseconds, but SQLite returned %i. Maybe SQLite wasn't built with HAVE_USLEEP=1?
select [sql] from sqlite_master where [type] = 'table' and lower(name) = ?
SELECT type, name, tbl_name, rootpage, sql FROM (SELECT * FROM sqlite_master UNION ALL SELECT * FROM sqlite_temp_master) WHERE type != 'meta' AND name NOT LIKE 'sqlite_%' ORDER BY tbl_name, type DESC, name
pragma table_info('%@')
pragma application_id
pragma application_id=%d
pragma user_version
pragma user_version = %d
FMResultSet.m
![statement inUse]
Warning: There seem to be no columns in this set.
%s:%d Database busy (%@)
-[_bmFMResultSet internalStepWithError:]
Database busy
Error calling sqlite3_step (%d: %s) rs
parentDB does not exist
Unknown error calling sqlite3_step (%d: %s) rs
Warning: I could not find the column named '%@'.
fmdb.%@
Database already in pool
The _bmFMDatabase being put back into the pool is already present in the pool
Maximum number of databases (%ld) has already been reached!
Could not open up the database at path %@
savePoint%ld
Could not create database queue for path %@
_bmFMDatabaseQueue could not reopen database for path %@
-[_bmFMDatabaseQueue inDatabase:]
FMDatabaseQueue.m
currentSyncQueue != self && "inDatabase: was called reentrantly on the same queue, which would lead to a deadlock"
Warning: there is at least one open result set around after performing [_bmFMDatabaseQueue inDatabase:]
BMTableStore: Could not open database: %@ err:%@.
BMTableUpsertSubscriber: Could not close database: %@ err:%@.
Invalid table setup data %@
Invalid db %@
Count Mismatch Error: %@
classArray must contain NSString or NSNumber %@
Could not create table: %@ err:%@.
Count Mismatch %@
Element Mismatch %@
Table Row insert error: %@
BMBiomeTableStore: unable to open database: %@
Unable to create table storage directory.
Failed to open database. %@
Failed to set foreign_keys pragma. %@
Failed to create metadata table. %@
Failed to start savepoint. %@
Migrating managed store from schema %@ to %@
Failed to migrate biome management schema to version %@. %@
Successful schema migration to version %@.
Rolling back to previous state due to error during migration.
Failed to %@ savepoint. %@
Unable to access BFS storage directory.
Failed to create BFS storage directory with error: %@
Unable to get rowid for stream %@
Registered client %@ for stream %@
Failed to put %@ under management for stream %@. %@
Injecting SiriRemembers BFS registration.
Ignoring deletions from stream %@ because no relevant registrations exist.
Handling deletions in stream %@: %@
Deleted %@ rows on behalf of %@ from %@.
Failed to create managed table insertion trigger for %@. %@
Failed to create managed table deletion trigger for %@. %@
Argument must be an NSString.
Table '%@' does not exist in database %@
Adding managed table '%@' derived from %@.
Failed to insert managed table name (%@, %@). %@
Failed to start deletion savepoint. %@
Failed to release deletion savepoint. %@
Deleted %@ rows from %@. DB: %@.
Deleted %@ rows from %@ derived from %@. DB: %@.
Failed to delete rows %@. %@
Failed to delete %@ of %@ rows derived from %@.
Subscription %@ could not create bookmark
Error setting up table in upsert subscriber: %@
BMTableUpsertSubscriber: Expecting a BMTable.
Error inserting rows in upsert subscriber: %@
Process not sandboxed, skipping sandbox check
Unable to delete derived data - biomed does not have access to %@
softlink:r:path:/System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams
BMSQLRow
BMRow
BMTableStore
BiomeFlexibleStorageDirectory
BMTable
BMTableSchema
NSSecureCoding
NSCoding
BMSQLStore
_BMRegistrarRegistration
BMRegistrar
BMSelectExpression
BMTableQueryExpression
BMSQLStoreManager
BMBookmarkableSubscription
BMTableUpsertSubscriber
BMTableSubscriber
BPSSubscriber
NSObject
BMRemoteSQLStoreManager
_bmFMDatabase
_bmFMStatement
_bmFMDatabaseAdditions
_bmFMResultSet
_bmFMDatabasePool
_bmFMDatabaseQueue
init
copy
allValues
objectAtIndexedSubscript:
count
values
description
isEqual:
hash
columnCount
valueAtIdx:
initWithValues:
setAllValues:
.cxx_destruct
_allValues
T@"NSMutableArray",&,N,V_allValues
databaseWithURL:
open
databaseURL
lastError
close
rows
firstObject
addObject:
setupClassArray:table:named:error:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
openDB
stringByAppendingFormat:
schema
columnNames
closeDB
objectAtIndex:
stringByAppendingString:
executeUpdate:
dbURL
countByEnumeratingWithState:objects:count:
stringWithFormat:
executeUpdate:values:error:
getTableSchema:
next
objectForColumnIndex:
executeQuery:
initWithColumnNames:
initWithRows:schema:
initWithURL:
addTable:named:error:
upsertRows:error:
selectTableNamed:error:
tableName
lock
classArray
sqlReplace
_lock
_dbURL
_tableName
_classArray
_sqlReplace
T{os_unfair_lock_s=I},R,N,V_lock
T@"NSArray",R,N,V_classArray
T@"NSString",R,N,V_sqlReplace
T@"_bmFMDatabase",R,N,V_db
T@"NSURL",R,N,V_dbURL
T@"NSString",R,N,V_tableName
biomeDirectoryForDomain:
stringByAppendingPathComponent:
defaultManager
arrayWithObjects:count:
pathWithComponents:
fileExistsAtPath:
fileURLWithPath:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
directoryForPrivateTable
privateDBPathWithIdentifier:directory:create:
setRows:
setSchema:
_rows
_schema
T@"NSArray",C,N,V_rows
T@"BMTableSchema",&,N,V_schema
encodeObject:forKey:
setWithObjects:
decodeObjectOfClasses:forKey:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
setColumnNames:
_columnNames
T@"NSArray",C,N,V_columnNames
initWithFMDBHandle:
sqliteHandle
raise:format:
dbIsReady
URLByDeletingLastPathComponent
path
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
intForColumn:
migrations
startSavePointWithName:error:
subarrayWithRange:
numberWithInt:
numberWithUnsignedLong:
executeStatements:
releaseSavePointWithName:error:
rollbackToSavePointWithName:error:
T@"NSArray",R,N
dbLock
_dbIsReady
_dbLock
TB,R,N,V_dbIsReady
T{os_unfair_lock_s=I},R,N,V_dbLock
T@"_bmFMDatabase",R,N
T^v,R,N
bundleID
setBundleID:
setDatabaseURL:
sourceStreamID
setSourceStreamID:
registrationDate
setRegistrationDate:
lastCommunicationDate
setLastCommunicationDate:
_bundleID
_databaseURL
_sourceStreamID
_registrationDate
_lastCommunicationDate
T@"NSString",&,N,V_bundleID
T@"NSURL",&,N,V_databaseURL
T@"NSString",&,N,V_sourceStreamID
T@"NSDate",&,N,V_registrationDate
T@"NSDate",&,N,V_lastCommunicationDate
localFlexibleStorageDirectory
URLByAppendingPathComponent:
requestAccessToFlexibleStorage
array
identifier
longForColumnIndex:
numberWithLong:
dictionary
stringForColumnIndex:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
intForColumnIndex:
dateForColumnIndex:
streamIdentifierForStream:
registeredClientsByStream
containsObject:
stringByStandardizingPath
initWithIdentifier:
registerClientWithBundleID:databaseURL:source:
stream
mutableCopy
registrationsForStream:
deleteRowsDerivedFromStream:eventIdentifier:
deleteRowsDerivedFromStream:eventIdentifiers:
centralRegistrar
streamRegistrationCounts
propagateDeletionOfEvents:
propagateDeletionOfEventsInStream:withIdentifiers:
_accessClient
T@"NSDictionary",R,N
currentHandler
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
children
queryTable:
indexOfObject:
addIndex:
enumerateIndexesUsingBlock:
decodeObjectOfClass:forKey:
initWithChildren:columnNames:
setChildren:
T@"NSArray",&,N
_children
T@"NSArray",&,N,V_children
managedTableNames
allObjects
handleFailureInMethod:object:file:lineNumber:description:
addManagedTable:derivedFromStream:
managedTables
tableExists:
databasePath
prepareTriggerForTable:
eventBody
setSessionEvent:
deleteRowsDerivedFromEvent:
integerValue
numberWithLongLong:
deleteRows:fromTable:
stringByPaddingToLength:withString:startingAtIndex:
arrayByAddingObject:
executeQuery:values:error:
executeUpdate:withArgumentsInArray:
changes
numberWithUnsignedInteger:
addManagedTable:derivedFromSource:
beginManagedSessionWithEvent:
endManagedSession
deleteRowsDerivedFromEvents:
sessionEvent
_managedTableNames
_sessionEvent
T@"NSMutableSet",R,N,V_managedTableNames
T@"<BMIdentifiable>",&,N,V_sessionEvent
initWithTableName:identifier:keyValueStore:
store
setSubscription:
subscription
newBookmark
conformsToProtocol:
keyValueStore
insertValue:forKey:
null
initWithValue:upstreams:name:
tableSetupComplete
tableSetupError
setTableSetupError:
requestDemand:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
receiveInput:
receiveSubscription:
receiveCompletion:
cancel
initWithTableName:identifier:
setTableSetupComplete:
_tableSetupComplete
_identifier
_store
_subscription
_tableSetupError
_keyValueStore
T@"BMTableStore",R,N,V_store
TB,N,V_tableSetupComplete
T@"BPSSubscription",N,V_subscription
T@"NSError",&,N,V_tableSetupError
T@"<BMFlexibleSimpleKeyValueStorage>",R,N,V_keyValueStore
T@"NSString",R,N,V_identifier
setRemoteOnly:
UTF8String
remoteOnly
hasReadWriteAccessToURL:
_remoteOnly
TB,N,V_remoteOnly
initWithPath:
dealloc
FMDBUserVersion
componentsSeparatedByString:
intValue
initWithFormat:
length
fileSystemRepresentation
sqlitePath
setMaxBusyRetryTimeInterval:
openWithFlags:vfs:
clearCachedStatements
closeOpenResultSets
pointerValue
setParentDB:
removeObject:
valueWithNonretainedObject:
objectEnumerator
removeAllObjects
objectForKey:
inUse
objectsPassingTest:
anyObject
setQuery:
setObject:forKey:
dataWithBytes:length:
rekeyWithData:
setKeyWithData:
setDateFormat:
timeZoneForSecondsFromGMT:
setTimeZone:
initWithLocaleIdentifier:
setLocale:
dateFromString:
stringFromDate:
lastErrorCode
dictionaryWithObject:forKey:
lastErrorMessage
errorWithMessage:
warnInUse
bytes
hasDateFormatter
timeIntervalSince1970
objCType
charValue
unsignedCharValue
shortValue
unsignedShortValue
unsignedIntValue
longValue
unsignedLongValue
longLongValue
unsignedLongLongValue
floatValue
doubleValue
boolValue
characterAtIndex:
numberWithUnsignedInt:
numberWithShort:
numberWithUnsignedShort:
numberWithUnsignedLongLong:
numberWithDouble:
numberWithFloat:
appendString:
appendFormat:
executeQuery:withArgumentsInArray:orDictionary:orVAList:shouldBind:
databaseExists
cachedStatementForQuery:
statement
reset
bindStatement:WithArgumentsInArray:orDictionary:orVAList:
setStatement:
setCachedStatement:forQuery:
resultSetWithStatement:usingParentDatabase:shouldAutoClose:
useCount
setUseCount:
allKeys
bindObject:toColumn:inStatement:
stringWithCapacity:
extractSQL:argumentsList:intoString:arguments:
executeQuery:withArgumentsInArray:
internalStepWithError:
executeUpdate:error:withArgumentsInArray:orDictionary:orVAList:
dictionaryWithCapacity:
executeStatements:withResultBlock:
logsErrors
checkpoint:name:logFrameCount:checkpointCount:error:
crashOnErrors
setCachedStatements:
makeFunctionNamed:arguments:block:
databaseWithPath:
FMDBVersion
sqliteLibVersion
isSQLiteThreadSafe
storeableDateFormat:
limitFor:value:
openWithFlags:
maxBusyRetryTimeInterval
busyRetryTimeout
setBusyRetryTimeout:
hasOpenResultSets
resultSetDidClose:
rekey:
setKey:
goodConnection
hadError
lastExtendedErrorCode
lastInsertRowId
executeQuery:withParameterDictionary:
executeQueryWithFormat:
executeQuery:withVAList:
executeUpdate:withParameterDictionary:
executeUpdate:withVAList:
executeUpdateWithFormat:
executeUpdate:withErrorAndBindings:
update:withErrorAndBindings:
prepare:
rollback
commit
beginTransaction
beginDeferredTransaction
beginImmediateTransaction
beginExclusiveTransaction
inTransaction
interrupt
inSavePoint:
checkpoint:error:
checkpoint:name:error:
shouldCacheStatements
setShouldCacheStatements:
makeFunctionNamed:maximumArguments:withBlock:
valueType:
valueInt:
valueLong:
valueDouble:
valueData:
valueString:
resultNullInContext:
resultInt:context:
resultLong:context:
resultDouble:context:
resultData:context:
resultString:context:
resultError:context:
resultErrorCode:context:
resultErrorNoMemoryInContext:
resultErrorTooBigInContext:
traceExecution
setTraceExecution:
checkedOut
setCheckedOut:
setCrashOnErrors:
setLogsErrors:
cachedStatements
isOpen
setIsOpen:
isInTransaction
_isExecutingStatement
_startBusyRetryTime
_openResultSets
_openFunctions
_dateFormat
_shouldCacheStatements
_traceExecution
_checkedOut
_crashOnErrors
_logsErrors
_isOpen
_isInTransaction
_maxBusyRetryTimeInterval
_cachedStatements
_databasePath
TB,V_traceExecution
TB,V_checkedOut
TB,V_crashOnErrors
TB,V_logsErrors
T@"NSMutableDictionary",&,V_cachedStatements
TB,N,V_isOpen
TB,R,N
Tq,R,N
Ti,R,N
TB,R,N,V_isInTransaction
TB,N,V_shouldCacheStatements
T@"NSString",R,N,V_databasePath
T@"NSURL",R,N
Td,N,V_maxBusyRetryTimeInterval
query
setInUse:
_statement
_query
_useCount
_inUse
Tq,V_useCount
T@"NSString",&,V_query
T^v,V_statement
TB,V_inUse
timeIntervalSinceReferenceDate
stringByReplacingOccurrencesOfString:withString:
isEqualToString:
columnExists:inTableWithName:
stringForQuery:
intForQuery:
longForQuery:
boolForQuery:
doubleForQuery:
dataForQuery:
dateForQuery:
getSchema
applicationID
setApplicationID:
userVersion
setUserVersion:
columnExists:columnName:
validateSQL:error:
TI,N
setShouldAutoClose:
initWithCapacity:
lowercaseString
setValue:forKey:
columnNameToIndexMap
keyEnumerator
nextObject
objectForColumnName:
nextWithError:
stepWithError:
columnIndexForName:
longLongIntForColumnIndex:
unsignedLongLongIntForColumnIndex:
boolForColumnIndex:
doubleForColumnIndex:
dateWithTimeIntervalSince1970:
dataForColumnIndex:
dataNoCopyForColumnIndex:
dataWithBytesNoCopy:length:freeWhenDone:
columnIndexIsNull:
UTF8StringForColumnIndex:
UTF8StringForColumn:
objectForColumn:
bindWithArray:orDictionary:orVAList:
kvcMagic:
resultDict
resultDictionary
step
hasAnotherRow
longForColumn:
longLongIntForColumn:
unsignedLongLongIntForColumn:
boolForColumn:
doubleForColumn:
stringForColumn:
dateForColumn:
dataForColumn:
dataNoCopyForColumn:
columnIsNull:
UTF8StringForColumnName:
columnNameForIndex:
bindWithArray:
bindWithDictionary:
parentDB
shouldAutoClose
_columnNameToIndexMap
_shouldAutoClose
_parentDB
TB,N,V_shouldAutoClose
T@"_bmFMDatabase",&,N,V_parentDB
T@"NSMutableDictionary",R
T@"_bmFMStatement",&,V_statement
initWithPath:flags:
initWithPath:flags:vfs:
exceptionWithName:reason:userInfo:
raise
executeLocked:
lastObject
removeLastObject
databaseClass
databasePool:shouldAddDatabaseToPool:
databasePool:didAddDatabase:
pushDatabaseBackInPool:
beginTransaction:withBlock:
databasePoolWithPath:
databasePoolWithURL:
databasePoolWithPath:flags:
databasePoolWithURL:flags:
initWithURL:flags:vfs:
initWithURL:flags:
countOfCheckedInDatabases
countOfCheckedOutDatabases
countOfOpenDatabases
releaseAllDatabases
inDatabase:
inTransaction:
inDeferredTransaction:
inExclusiveTransaction:
inImmediateTransaction:
setPath:
delegate
setDelegate:
maximumNumberOfDatabasesToCreate
setMaximumNumberOfDatabasesToCreate:
openFlags
vfsName
setVfsName:
_lockQueue
_databaseInPool
_databaseOutPool
_openFlags
_path
_delegate
_maximumNumberOfDatabasesToCreate
_vfsName
T@"NSString",C,V_path
T@,V_delegate
TQ,V_maximumNumberOfDatabasesToCreate
Ti,R,V_openFlags
T@"NSString",C,V_vfsName
TQ,R,N
databaseQueueWithPath:
databaseQueueWithPath:flags:
database
databaseQueueWithURL:
databaseQueueWithURL:flags:
_queue
T@"NSString",&,V_path
@16@0:8
q16@0:8
@24@0:8Q16
@"NSArray"16@0:8
@24@0:8@16
B24@0:8@16
Q16@0:8
v24@0:8@16
v16@0:8
@"NSMutableArray"
B16@0:8
B40@0:8@16@24^@32
B48@0:8@16@24@32^@40
B32@0:8@16^@24
@32@0:8@16^@24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"_bmFMDatabase"
@"NSURL"
@"NSString"
@"NSArray"
@36@0:8@16@24B32
@32@0:8@16@24
@"BMTableSchema"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
^v16@0:8
@"NSDate"
B40@0:8@16@24@32
B32@0:8@16@24
@"<BMStreamsAccessClientMethods>"
@"BMTable"24@0:8@"BMTable"16
v24@0:8@"NSArray"16
i32@0:8@16@24
@"NSMutableSet"
@"<BMIdentifiable>"
@"<BMBookmark>"16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
q24@0:8@16
v24@0:8@"BPSSubscription"16
v24@0:8@"BPSCompletion"16
@32@0:8@"NSString"16@"NSString"24
@40@0:8@16@24@32
v20@0:8B16
@"BMTableStore"
@"BPSSubscription"
@"NSError"
@"<BMFlexibleSimpleKeyValueStorage>"
i16@0:8
r*16@0:8
i24@0:8i16i20
B20@0:8i16
B28@0:8i16@20
v24@0:8d16
d16@0:8
v20@0:8i16
v32@0:8@16@24
i36@0:8@16i24^{sqlite3_stmt=}28
v48@0:8@16[1{__va_list_tag=II^v^v}]24@32@40
@52@0:8@16@24@32[1{__va_list_tag=II^v^v}]40B48
B48@0:8^{sqlite3_stmt=}16@24@32[1{__va_list_tag=II^v^v}]40
@40@0:8@16@24^@32
@32@0:8@16[1{__va_list_tag=II^v^v}]24
B56@0:8@16^@24@32@40[1{__va_list_tag=II^v^v}]48
B32@0:8@16[1{__va_list_tag=II^v^v}]24
B32@0:8@16@?24
@24@0:8@?16
B28@0:8i16^@20
B36@0:8i16@20^@28
B52@0:8i16@20^i28^i36^@44
v36@0:8@16i24@?28
i24@0:8^v16
q24@0:8^v16
d24@0:8^v16
@24@0:8^v16
v24@0:8^v16
v28@0:8i16^v20
v32@0:8q16^v24
v32@0:8d16^v24
v32@0:8@16^v24
@"NSDateFormatter"
@"NSMutableDictionary"
v24@0:8q16
I16@0:8
v20@0:8I16
B24@0:8^@16
i24@0:8^@16
i24@0:8@16
i20@0:8i16
q20@0:8i16
Q24@0:8@16
Q20@0:8i16
d24@0:8@16
d20@0:8i16
@20@0:8i16
r*20@0:8i16
r*24@0:8@16
B40@0:8@16@24[1{__va_list_tag=II^v^v}]32
@"_bmFMStatement"
@28@0:8@16i24
@36@0:8@16i24@28
v24@0:8@?16
v32@0:8q16@?24
v24@0:8Q16
@"NSObject<OS_dispatch_queue>"
@(#)PROGRAM:BiomeFlexibleStorage  PROJECT:BiomeFlexibleStorage-93.1.1
fffffFW@
333333
BMFlexibleStorageTableErrorDomain
BiomeFlexibleStorage
setupClassArray, classArray nil or 0 entries
setupClassArray, can not open database
CREATE TABLE IF NOT EXISTS "%@" (
REPLACE INTO "%@" VALUES (
classArray and columnNames sizes do not match
"%@" TEXT
"%@" REAL
classArray must contain NSString or NSNumber
 UNIQUE PRIMARY KEY
BMTableUpsertSubscriber: input array has %lu elements and must have %lu elements
input classes must match (index=%ld) %@ vs. %@
SELECT * FROM "%@"
tables
privateTable
v8@?0
Schema: %@  | Rows: %@
columns
migration
%@ not implemented by child class %@
PRAGMA foreign_keys = ON
CREATE TABLE IF NOT EXISTS BM_METADATA (bm_key TEXT UNIQUE PRIMARY KEY ON CONFLICT REPLACE NOT NULL, bm_value TEXT)
SELECT bm_value FROM BM_METADATA WHERE bm_key='schema_version'
bm_value
INSERT INTO BM_METADATA (bm_key, bm_value) VALUES ('schema_version', ?); 
commit
rollback
registrations.db
CREATE TABLE BFS_MANAGED_DBS (  client_bundle TEXT NOT NULL,  db_path TEXT NOT NULL,  source_streams_rowid INTEGER,  registration_date INTEGER(4) DEFAULT (strftime('%s','now')),  last_communication_date INTEGER(4) DEFAULT (strftime('%s','now')),   PRIMARY KEY (client_bundle, db_path, source_streams_rowid) ); CREATE INDEX client_idx ON BFS_MANAGED_DBS (client_bundle); CREATE INDEX source_idx ON BFS_MANAGED_DBS (source_streams_rowid); 
CREATE TABLE SOURCE_STREAMS (  stream_name TEXT PRIMARY KEY ON CONFLICT IGNORE );
registerClient
INSERT INTO SOURCE_STREAMS (stream_name) VALUES (?)
SELECT rowid FROM SOURCE_STREAMS WHERE stream_name == ?
INSERT INTO BFS_MANAGED_DBS (client_bundle, db_path, source_streams_rowid) VALUES (?,?,?) ON CONFLICT(client_bundle, db_path, source_streams_rowid) DO UPDATE SET last_communication_date=strftime('%s','now')
SELECT s.stream_name, r.client_bundle FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid
SELECT s.stream_name, count(r.client_bundle) FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid GROUP BY s.stream_name
SELECT r.client_bundle, r.db_path, r.registration_date, r.last_communication_date FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.stream_name = ? AND s.rowid=r.source_streams_rowid
com.apple.siriinferenced
/var/mobile/Library/com.apple.siri.inference/siriremembers.sqlite3
BMStreamsAccessClient
Class getBMStreamsAccessClientClass(void)_block_invoke
BMRegistrar.m
Unable to find class %s
void *BiomeStreamsLibrary(void)
BMSource
Class getBMSourceClass(void)_block_invoke
children
columnNames
v24@?0Q8^B16
bm_deletion
CREATE TABLE BM_MANAGED_TABLES (bm_managed_table TEXT UNIQUE PRIMARY KEY ON CONFLICT IGNORE NOT NULL, bm_source_id TEXT NOT NULL); CREATE TABLE BM_SESSION_CONTEXT (bm_rowid INTEGER PRIMARY KEY AUTOINCREMENT, bm_origin_id TEXT); CREATE TABLE BM_DERIVED_OBJECTS (bm_managed_table_rowid INTEGER NOT NULL, bm_derived_rowid INTEGER NOT NULL, bm_context_rowid INTEGER NOT NULL); CREATE TRIGGER bm_managed_table_ad AFTER DELETE ON BM_MANAGED_TABLES BEGIN DELETE FROM BM_DERIVED_OBJECTS WHERE bm_managed_table_rowid == old.rowid; END; CREATE TRIGGER bm_derived_objects_ad AFTER DELETE ON BM_DERIVED_OBJECTS   WHEN (SELECT count(*) FROM BM_DERIVED_OBJECTS WHERE bm_context_rowid == old.bm_context_rowid) == 0 BEGIN  DELETE FROM BM_SESSION_CONTEXT WHERE bm_rowid == old.bm_context_rowid; END; 
SELECT bm_managed_table FROM BM_MANAGED_TABLES;
CREATE TRIGGER bm_%@_ai AFTER INSERT ON %@ BEGIN  INSERT INTO BM_DERIVED_OBJECTS (bm_managed_table_rowid, bm_derived_rowid, bm_context_rowid)  SELECT  t.rowid,          new.rowid,          c.rowid  FROM BM_MANAGED_TABLES t, BM_SESSION_CONTEXT c  WHERE t.bm_managed_table == '%@'  ORDER BY c.rowid DESC LIMIT 1;END;
CREATE TRIGGER bm_%@_ad AFTER DELETE ON %@ BEGIN  DELETE FROM BM_DERIVED_OBJECTS  WHERE bm_derived_rowid == old.rowid AND    bm_managed_table_rowid == (SELECT rowid FROM BM_MANAGED_TABLES WHERE bm_managed_table == '%@'); END;
BMSQLStoreManager.m
Invalid parameter not satisfying: %@
[(id<BMSourceMethods>)source identifier]
INSERT INTO BM_MANAGED_TABLES (bm_managed_table, bm_source_id) VALUES (?, ?)
[event respondsToSelector:@selector(identifier)]
INSERT INTO BM_SESSION_CONTEXT (bm_origin_id) VALUES (?)
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c, BM_MANAGED_TABLES t WHERE t.bm_managed_table==? AND c.bm_origin_id==? AND bm_managed_table_rowid==t.rowid AND bm_context_rowid==c.rowid
SELECT rowid,bm_managed_table from BM_MANAGED_TABLES WHERE bm_source_id==?
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c WHERE c.bm_origin_id IN (%@) AND d.bm_managed_table_rowid==? AND d.bm_context_rowid==c.rowid
DELETE FROM %@ WHERE rowid IN (%@)
BiomePubSub
file-write*
-[_bmFMDatabase initWithPath:]
FMDatabase.m
sqlite3_threadsafe()
2.7.7
FMDBVersion is invalid: Please use FMDBUserVersion instead.
:memory:
error opening!: %d
Closing leaked statement
error closing!: %d
%s:%d
-[_bmFMDatabase busyRetryTimeout]
FMDB: busyRetryTimeout no longer works, please use maxBusyRetryTimeInterval
-[_bmFMDatabase setBusyRetryTimeout:]
FMDB: setBusyRetryTimeout does nothing, please use setMaxBusyRetryTimeInterval:
B24@?0@"_bmFMStatement"8^B16
query
API misuse, -[_bmFMDatabase setCachedStatement:forQuery:] query must not be nil
en_US
select name from sqlite_master where type='table'
The _bmFMDatabase %@ is currently in use.
The _bmFMDatabase %@ is not open.
_bmFMDatabase
NULL
%@ executeQuery: %@
DB Error: %d "%@"
DB Query: %@
DB Path: %@
%@ = %@
Error: unable to bind (%d, %s
Could not find index for %@
data: %ld bytes
obj: %@
Error: the bind count is not correct for the # of variables (executeQuery)
Error inserting batch: %s
rollback transaction
commit transaction
begin exclusive transaction
begin deferred transaction
begin immediate transaction
name
savepoint '%@';
release savepoint '%@';
rollback transaction to savepoint '%@';
dbSavePoint%ld
%@ %ld hit(s) for query %@
WARNING: Requested sleep of %i milliseconds, but SQLite returned %i. Maybe SQLite wasn't built with HAVE_USLEEP=1?
select [sql] from sqlite_master where [type] = 'table' and lower(name) = ?
SELECT type, name, tbl_name, rootpage, sql FROM (SELECT * FROM sqlite_master UNION ALL SELECT * FROM sqlite_temp_master) WHERE type != 'meta' AND name NOT LIKE 'sqlite_%' ORDER BY tbl_name, type DESC, name
pragma table_info('%@')
pragma application_id
pragma application_id=%d
pragma user_version
pragma user_version = %d
FMResultSet.m
![statement inUse]
Warning: There seem to be no columns in this set.
%s:%d Database busy (%@)
-[_bmFMResultSet internalStepWithError:]
Database busy
Error calling sqlite3_step (%d: %s) rs
parentDB does not exist
Unknown error calling sqlite3_step (%d: %s) rs
Warning: I could not find the column named '%@'.
fmdb.%@
Database already in pool
The _bmFMDatabase being put back into the pool is already present in the pool
Maximum number of databases (%ld) has already been reached!
Could not open up the database at path %@
savePoint%ld
Could not create database queue for path %@
_bmFMDatabaseQueue could not reopen database for path %@
-[_bmFMDatabaseQueue inDatabase:]
FMDatabaseQueue.m
currentSyncQueue != self && "inDatabase: was called reentrantly on the same queue, which would lead to a deadlock"
Warning: there is at least one open result set around after performing [_bmFMDatabaseQueue inDatabase:]
BMTableStore: Could not open database: %@ err:%@.
BMTableUpsertSubscriber: Could not close database: %@ err:%@.
Invalid table setup data %@
Invalid db %@
Count Mismatch Error: %@
classArray must contain NSString or NSNumber %@
Could not create table: %@ err:%@.
Count Mismatch %@
Element Mismatch %@
Table Row insert error: %@
BMBiomeTableStore: unable to open database: %@
Unable to create table storage directory.
Failed to open database. %@
Failed to set foreign_keys pragma. %@
Failed to create metadata table. %@
Failed to start savepoint. %@
Migrating managed store from schema %@ to %@
Failed to migrate biome management schema to version %@. %@
Successful schema migration to version %@.
Rolling back to previous state due to error during migration.
Failed to %@ savepoint. %@
Unable to access BFS storage directory.
Failed to create BFS storage directory with error: %@
Unable to get rowid for stream %@
Registered client %@ for stream %@
Failed to put %@ under management for stream %@. %@
Injecting SiriRemembers BFS registration.
Ignoring deletions from stream %@ because no relevant registrations exist.
Handling deletions in stream %@: %@
Deleted %@ rows on behalf of %@ from %@.
Failed to create managed table insertion trigger for %@. %@
Failed to create managed table deletion trigger for %@. %@
Argument must be an NSString.
Table '%@' does not exist in database %@
Adding managed table '%@' derived from %@.
Failed to insert managed table name (%@, %@). %@
Failed to start deletion savepoint. %@
Failed to release deletion savepoint. %@
Deleted %@ rows from %@. DB: %@.
Deleted %@ rows from %@ derived from %@. DB: %@.
Failed to delete rows %@. %@
Failed to delete %@ of %@ rows derived from %@.
Subscription %@ could not create bookmark
Error setting up table in upsert subscriber: %@
BMTableUpsertSubscriber: Expecting a BMTable.
Error inserting rows in upsert subscriber: %@
Process not sandboxed, skipping sandbox check
Unable to delete derived data - biomed does not have access to %@
softlink:r:path:/System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams
BMSQLRow
BMRow
BMTableStore
BiomeFlexibleStorageDirectory
BMTable
BMTableSchema
NSSecureCoding
NSCoding
BMSQLStore
_BMRegistrarRegistration
BMRegistrar
BMSelectExpression
BMTableQueryExpression
BMSQLStoreManager
BMBookmarkableSubscription
BMTableUpsertSubscriber
BMTableSubscriber
BPSSubscriber
NSObject
BMRemoteSQLStoreManager
_bmFMDatabase
_bmFMStatement
_bmFMDatabaseAdditions
_bmFMResultSet
_bmFMDatabasePool
_bmFMDatabaseQueue
valueWithNonretainedObject:
unsignedShortValue
unsignedLongValue
unsignedLongLongValue
unsignedIntValue
unsignedCharValue
timeZoneForSecondsFromGMT:
timeIntervalSinceReferenceDate
timeIntervalSince1970
subarrayWithRange:
stringWithUTF8String:
stringWithFormat:
stringWithCapacity:
stringByStandardizingPath
stringByReplacingOccurrencesOfString:withString:
stringByPaddingToLength:withString:startingAtIndex:
stringByAppendingString:
stringByAppendingPathComponent:
stringByAppendingFormat:
streamIdentifierForStream:
stream
shortValue
setWithObjects:
setValue:forKey:
setTimeZone:
setObject:forKeyedSubscript:
setObject:forKey:
setLocale:
requestDemand:
requestAccessToFlexibleStorage
removeObject:
removeLastObject
removeAllObjects
raise:format:
raise
pointerValue
pathWithComponents:
objectsPassingTest:
objectForKey:
objectEnumerator
objectAtIndex:
objCType
numberWithUnsignedShort:
numberWithUnsignedLongLong:
numberWithUnsignedLong:
numberWithUnsignedInteger:
numberWithUnsignedInt:
numberWithShort:
numberWithLongLong:
numberWithLong:
numberWithInt:
numberWithFloat:
numberWithDouble:
null
nextObject
mutableCopy
lowercaseString
longValue
longLongValue
localFlexibleStorageDirectory
length
lastObject
keyEnumerator
isEqualToString:
integerValue
intValue
insertValue:forKey:
initWithValue:upstreams:name:
initWithLocaleIdentifier:
initWithIdentifier:
initWithFormat:
initWithCapacity:
indexOfObject:
handleFailureInMethod:object:file:lineNumber:description:
handleFailureInFunction:file:lineNumber:description:
floatValue
firstObject
fileURLWithPath:
fileSystemRepresentation
fileExistsAtPath:
exceptionWithName:reason:userInfo:
errorWithDomain:code:userInfo:
enumerateIndexesUsingBlock:
encodeObject:forKey:
doubleValue
dictionaryWithObjects:forKeys:count:
dictionaryWithObject:forKey:
dictionaryWithCapacity:
dictionary
defaultManager
decodeObjectOfClasses:forKey:
decodeObjectOfClass:forKey:
dateWithTimeIntervalSince1970:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithBytes:length:
currentHandler
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
countByEnumeratingWithState:objects:count:
count
copy
containsObject:
componentsSeparatedByString:
characterAtIndex:
charValue
bytes
boolValue
biomeDirectoryForDomain:
arrayWithObjects:count:
arrayByAddingObject:
array
appendString:
appendFormat:
anyObject
allObjects
allKeys
addObject:
addIndex:
URLByDeletingLastPathComponent
UTF8String
URLByAppendingPathComponent:
init
columnCount
valueAtIdx:
values
initWithValues:
description
isEqual:
hash
allValues
setAllValues:
.cxx_destruct
_allValues
T@"NSMutableArray",&,N,V_allValues
initWithURL:
openDB
closeDB
addTable:named:error:
setupClassArray:table:named:error:
upsertRows:error:
selectTableNamed:error:
dbURL
tableName
lock
classArray
sqlReplace
_lock
_dbURL
_tableName
_classArray
_sqlReplace
T{os_unfair_lock_s=I},R,N,V_lock
T@"NSArray",R,N,V_classArray
T@"NSString",R,N,V_sqlReplace
T@"_bmFMDatabase",R,N,V_db
T@"NSURL",R,N,V_dbURL
T@"NSString",R,N,V_tableName
directoryForPrivateTable
privateDBPathWithIdentifier:directory:create:
initWithRows:schema:
rows
setRows:
schema
setSchema:
_rows
_schema
T@"NSArray",C,N,V_rows
T@"BMTableSchema",&,N,V_schema
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
initWithColumnNames:
columnNames
setColumnNames:
_columnNames
T@"NSArray",C,N,V_columnNames
migrations
T@"NSArray",R,N
initWithFMDBHandle:
sqliteHandle
dbIsReady
dbLock
_dbIsReady
_dbLock
TB,R,N,V_dbIsReady
T{os_unfair_lock_s=I},R,N,V_dbLock
T@"_bmFMDatabase",R,N
T^v,R,N
bundleID
setBundleID:
databaseURL
setDatabaseURL:
sourceStreamID
setSourceStreamID:
registrationDate
setRegistrationDate:
lastCommunicationDate
setLastCommunicationDate:
_bundleID
_databaseURL
_sourceStreamID
_registrationDate
_lastCommunicationDate
T@"NSString",&,N,V_bundleID
T@"NSURL",&,N,V_databaseURL
T@"NSString",&,N,V_sourceStreamID
T@"NSDate",&,N,V_registrationDate
T@"NSDate",&,N,V_lastCommunicationDate
centralRegistrar
registerClientWithBundleID:databaseURL:source:
registeredClientsByStream
streamRegistrationCounts
registrationsForStream:
propagateDeletionOfEvents:
propagateDeletionOfEventsInStream:withIdentifiers:
_accessClient
T@"NSDictionary",R,N
queryTable:
children
setChildren:
T@"NSArray",&,N
initWithChildren:columnNames:
_children
T@"NSArray",&,N,V_children
eventBody
identifier
managedTables
prepareTriggerForTable:
addManagedTable:derivedFromSource:
addManagedTable:derivedFromStream:
beginManagedSessionWithEvent:
endManagedSession
deleteRowsDerivedFromEvents:
deleteRowsDerivedFromEvent:
deleteRowsDerivedFromStream:eventIdentifier:
deleteRowsDerivedFromStream:eventIdentifiers:
deleteRows:fromTable:
managedTableNames
sessionEvent
setSessionEvent:
_managedTableNames
_sessionEvent
T@"NSMutableSet",R,N,V_managedTableNames
T@"<BMIdentifiable>",&,N,V_sessionEvent
newBookmark
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
receiveInput:
receiveSubscription:
receiveCompletion:
cancel
initWithTableName:identifier:
initWithTableName:identifier:keyValueStore:
store
tableSetupComplete
setTableSetupComplete:
subscription
setSubscription:
tableSetupError
setTableSetupError:
keyValueStore
_tableSetupComplete
_identifier
_store
_subscription
_tableSetupError
_keyValueStore
T@"BMTableStore",R,N,V_store
TB,N,V_tableSetupComplete
T@"BPSSubscription",N,V_subscription
T@"NSError",&,N,V_tableSetupError
T@"<BMFlexibleSimpleKeyValueStorage>",R,N,V_keyValueStore
T@"NSString",R,N,V_identifier
hasReadWriteAccessToURL:
remoteOnly
setRemoteOnly:
_remoteOnly
TB,N,V_remoteOnly
dealloc
databaseWithPath:
databaseWithURL:
FMDBUserVersion
FMDBVersion
sqliteLibVersion
isSQLiteThreadSafe
storeableDateFormat:
initWithPath:
sqlitePath
limitFor:value:
open
openWithFlags:
openWithFlags:vfs:
close
setMaxBusyRetryTimeInterval:
maxBusyRetryTimeInterval
busyRetryTimeout
setBusyRetryTimeout:
hasOpenResultSets
closeOpenResultSets
resultSetDidClose:
clearCachedStatements
cachedStatementForQuery:
setCachedStatement:forQuery:
rekey:
rekeyWithData:
setKey:
setKeyWithData:
hasDateFormatter
setDateFormat:
dateFromString:
stringFromDate:
goodConnection
warnInUse
databaseExists
lastErrorMessage
hadError
lastErrorCode
lastExtendedErrorCode
errorWithMessage:
lastError
lastInsertRowId
changes
bindObject:toColumn:inStatement:
extractSQL:argumentsList:intoString:arguments:
executeQuery:withParameterDictionary:
executeQuery:withArgumentsInArray:orDictionary:orVAList:shouldBind:
bindStatement:WithArgumentsInArray:orDictionary:orVAList:
executeQuery:
executeQueryWithFormat:
executeQuery:withArgumentsInArray:
executeQuery:values:error:
executeQuery:withVAList:
executeUpdate:error:withArgumentsInArray:orDictionary:orVAList:
executeUpdate:
executeUpdate:withArgumentsInArray:
executeUpdate:values:error:
executeUpdate:withParameterDictionary:
executeUpdate:withVAList:
executeUpdateWithFormat:
executeStatements:
executeStatements:withResultBlock:
executeUpdate:withErrorAndBindings:
update:withErrorAndBindings:
prepare:
rollback
commit
beginTransaction
beginDeferredTransaction
beginImmediateTransaction
beginExclusiveTransaction
inTransaction
interrupt
startSavePointWithName:error:
releaseSavePointWithName:error:
rollbackToSavePointWithName:error:
inSavePoint:
checkpoint:error:
checkpoint:name:error:
checkpoint:name:logFrameCount:checkpointCount:error:
shouldCacheStatements
setShouldCacheStatements:
makeFunctionNamed:maximumArguments:withBlock:
makeFunctionNamed:arguments:block:
valueType:
valueInt:
valueLong:
valueDouble:
valueData:
valueString:
resultNullInContext:
resultInt:context:
resultLong:context:
resultDouble:context:
resultData:context:
resultString:context:
resultError:context:
resultErrorCode:context:
resultErrorNoMemoryInContext:
resultErrorTooBigInContext:
traceExecution
setTraceExecution:
checkedOut
setCheckedOut:
crashOnErrors
setCrashOnErrors:
logsErrors
setLogsErrors:
cachedStatements
setCachedStatements:
isOpen
setIsOpen:
isInTransaction
databasePath
_isExecutingStatement
_startBusyRetryTime
_openResultSets
_openFunctions
_dateFormat
_shouldCacheStatements
_traceExecution
_checkedOut
_crashOnErrors
_logsErrors
_isOpen
_isInTransaction
_maxBusyRetryTimeInterval
_cachedStatements
_databasePath
TB,V_traceExecution
TB,V_checkedOut
TB,V_crashOnErrors
TB,V_logsErrors
T@"NSMutableDictionary",&,V_cachedStatements
TB,N,V_isOpen
TB,R,N
Tq,R,N
Ti,R,N
TB,R,N,V_isInTransaction
TB,N,V_shouldCacheStatements
T@"NSString",R,N,V_databasePath
T@"NSURL",R,N
Td,N,V_maxBusyRetryTimeInterval
reset
useCount
setUseCount:
query
setQuery:
statement
setStatement:
inUse
setInUse:
_statement
_query
_useCount
_inUse
Tq,V_useCount
T@"NSString",&,V_query
T^v,V_statement
TB,V_inUse
stringForQuery:
intForQuery:
longForQuery:
boolForQuery:
doubleForQuery:
dataForQuery:
dateForQuery:
tableExists:
getSchema
getTableSchema:
columnExists:inTableWithName:
applicationID
setApplicationID:
userVersion
setUserVersion:
columnExists:columnName:
validateSQL:error:
TI,N
resultSetWithStatement:usingParentDatabase:shouldAutoClose:
columnNameToIndexMap
kvcMagic:
resultDict
resultDictionary
next
nextWithError:
step
stepWithError:
internalStepWithError:
hasAnotherRow
columnIndexForName:
intForColumn:
intForColumnIndex:
longForColumn:
longForColumnIndex:
longLongIntForColumn:
longLongIntForColumnIndex:
unsignedLongLongIntForColumn:
unsignedLongLongIntForColumnIndex:
boolForColumn:
boolForColumnIndex:
doubleForColumn:
doubleForColumnIndex:
stringForColumnIndex:
stringForColumn:
dateForColumn:
dateForColumnIndex:
dataForColumn:
dataForColumnIndex:
dataNoCopyForColumn:
dataNoCopyForColumnIndex:
columnIndexIsNull:
columnIsNull:
UTF8StringForColumnIndex:
UTF8StringForColumn:
UTF8StringForColumnName:
objectForColumnIndex:
objectForColumnName:
objectForColumn:
columnNameForIndex:
objectAtIndexedSubscript:
objectForKeyedSubscript:
bindWithArray:orDictionary:orVAList:
bindWithArray:
bindWithDictionary:
parentDB
setParentDB:
shouldAutoClose
setShouldAutoClose:
_columnNameToIndexMap
_shouldAutoClose
_parentDB
TB,N,V_shouldAutoClose
T@"_bmFMDatabase",&,N,V_parentDB
T@"NSMutableDictionary",R
T@"_bmFMStatement",&,V_statement
databasePool:shouldAddDatabaseToPool:
databasePool:didAddDatabase:
databasePoolWithPath:
databasePoolWithURL:
databasePoolWithPath:flags:
databasePoolWithURL:flags:
databaseClass
initWithURL:flags:vfs:
initWithPath:flags:vfs:
initWithPath:flags:
initWithURL:flags:
executeLocked:
pushDatabaseBackInPool:
countOfCheckedInDatabases
countOfCheckedOutDatabases
countOfOpenDatabases
releaseAllDatabases
inDatabase:
beginTransaction:withBlock:
inTransaction:
inDeferredTransaction:
inExclusiveTransaction:
inImmediateTransaction:
path
setPath:
delegate
setDelegate:
maximumNumberOfDatabasesToCreate
setMaximumNumberOfDatabasesToCreate:
openFlags
vfsName
setVfsName:
_lockQueue
_databaseInPool
_databaseOutPool
_openFlags
_path
_delegate
_maximumNumberOfDatabasesToCreate
_vfsName
T@"NSString",C,V_path
T@,V_delegate
TQ,V_maximumNumberOfDatabasesToCreate
Ti,R,V_openFlags
T@"NSString",C,V_vfsName
TQ,R,N
databaseQueueWithPath:
databaseQueueWithURL:
databaseQueueWithPath:flags:
databaseQueueWithURL:flags:
database
_queue
T@"NSString",&,V_path
@16@0:8
q16@0:8
@24@0:8Q16
@"NSArray"16@0:8
@24@0:8@16
B24@0:8@16
Q16@0:8
v24@0:8@16
v16@0:8
@"NSMutableArray"
B16@0:8
B40@0:8@16@24^@32
B48@0:8@16@24@32^@40
B32@0:8@16^@24
@32@0:8@16^@24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"_bmFMDatabase"
@"NSURL"
@"NSString"
@"NSArray"
@36@0:8@16@24B32
@32@0:8@16@24
@"BMTableSchema"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
^v16@0:8
@"NSDate"
B40@0:8@16@24@32
B32@0:8@16@24
@"<BMStreamsAccessClientMethods>"
@"BMTable"24@0:8@"BMTable"16
v24@0:8@"NSArray"16
i32@0:8@16@24
@"NSMutableSet"
@"<BMIdentifiable>"
@"<BMBookmark>"16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
q24@0:8@16
v24@0:8@"BPSSubscription"16
v24@0:8@"BPSCompletion"16
@32@0:8@"NSString"16@"NSString"24
@40@0:8@16@24@32
v20@0:8B16
@"BMTableStore"
@"BPSSubscription"
@"NSError"
@"<BMFlexibleSimpleKeyValueStorage>"
i16@0:8
r*16@0:8
i24@0:8i16i20
B20@0:8i16
B28@0:8i16@20
v24@0:8d16
d16@0:8
v20@0:8i16
v32@0:8@16@24
i36@0:8@16i24^{sqlite3_stmt=}28
v48@0:8@16*24@32@40
@52@0:8@16@24@32*40B48
B48@0:8^{sqlite3_stmt=}16@24@32*40
@40@0:8@16@24^@32
@32@0:8@16*24
B56@0:8@16^@24@32@40*48
B32@0:8@16*24
B32@0:8@16@?24
@24@0:8@?16
B28@0:8i16^@20
B36@0:8i16@20^@28
B52@0:8i16@20^i28^i36^@44
v36@0:8@16i24@?28
i24@0:8^v16
q24@0:8^v16
d24@0:8^v16
@24@0:8^v16
v24@0:8^v16
v28@0:8i16^v20
v32@0:8q16^v24
v32@0:8d16^v24
v32@0:8@16^v24
@"NSDateFormatter"
@"NSMutableDictionary"
v24@0:8q16
I16@0:8
v20@0:8I16
B24@0:8^@16
i24@0:8^@16
i24@0:8@16
i20@0:8i16
q20@0:8i16
Q24@0:8@16
Q20@0:8i16
d24@0:8@16
d20@0:8i16
@20@0:8i16
r*20@0:8i16
r*24@0:8@16
B40@0:8@16@24*32
@"_bmFMStatement"
@28@0:8@16i24
@36@0:8@16i24@28
v24@0:8@?16
v32@0:8q16@?24
v24@0:8Q16
@"NSObject<OS_dispatch_queue>"
