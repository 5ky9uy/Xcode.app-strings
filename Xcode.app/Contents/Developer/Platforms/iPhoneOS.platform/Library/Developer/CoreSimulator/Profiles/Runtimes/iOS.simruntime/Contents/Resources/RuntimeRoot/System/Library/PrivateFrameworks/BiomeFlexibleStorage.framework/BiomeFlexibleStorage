@(#)PROGRAM:BiomeFlexibleStorage  PROJECT:BiomeFlexibleStorage-100.13.0.1
Y@333333
BMFlexibleStorageTableErrorDomain
BiomeFlexibleStorage
setupClassArray, classArray nil or 0 entries
setupClassArray, can not open database
CREATE TABLE IF NOT EXISTS "%@" (
REPLACE INTO "%@" VALUES (
classArray and columnNames sizes do not match
"%@" TEXT
"%@" REAL
classArray must contain NSString or NSNumber
 UNIQUE PRIMARY KEY
BMTableUpsertSubscriber: input array has %lu elements and must have %lu elements
input classes must match (index=%ld) %@ vs. %@
SELECT * FROM "%@"
tables
privateTable
v8@?0
Schema: %@  | Rows: %@
columns
com.apple.Biome.BFS.BMBFSPruningDelegate
migration
%@ not implemented by child class %@
PRAGMA foreign_keys = ON
CREATE TABLE IF NOT EXISTS BM_METADATA (bm_key TEXT UNIQUE PRIMARY KEY ON CONFLICT REPLACE NOT NULL, bm_value TEXT)
SELECT bm_value FROM BM_METADATA WHERE bm_key='schema_version'
bm_value
INSERT INTO BM_METADATA (bm_key, bm_value) VALUES ('schema_version', ?); 
commit
rollback
registrations.db
CREATE TABLE BFS_MANAGED_DBS (  client_bundle TEXT NOT NULL,  db_path TEXT NOT NULL,  source_streams_rowid INTEGER,  registration_date INTEGER(4) DEFAULT (strftime('%s','now')),  last_communication_date INTEGER(4) DEFAULT (strftime('%s','now')),   PRIMARY KEY (client_bundle, db_path, source_streams_rowid) ); CREATE INDEX client_idx ON BFS_MANAGED_DBS (client_bundle); CREATE INDEX source_idx ON BFS_MANAGED_DBS (source_streams_rowid); 
CREATE TABLE SOURCE_STREAMS (  stream_name TEXT PRIMARY KEY ON CONFLICT IGNORE );
registerClient
INSERT INTO SOURCE_STREAMS (stream_name) VALUES (?)
SELECT rowid FROM SOURCE_STREAMS WHERE stream_name == ?
INSERT INTO BFS_MANAGED_DBS (client_bundle, db_path, source_streams_rowid) VALUES (?,?,?) ON CONFLICT(client_bundle, db_path, source_streams_rowid) DO UPDATE SET last_communication_date=strftime('%s','now')
com.apple.siriinferenced
/var/mobile/Library/com.apple.siri.inference/siriremembers.sqlite3
/var/mobile/Library/com.apple.siri.inference/siriremembers2.sqlite3
SELECT s.stream_name, r.client_bundle FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid
SELECT s.stream_name, count(r.client_bundle) FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid GROUP BY s.stream_name
SELECT r.client_bundle, r.db_path, r.registration_date, r.last_communication_date FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.stream_name = ? AND s.rowid=r.source_streams_rowid
BMStreamsAccessClient
Class getBMStreamsAccessClientClass(void)_block_invoke
BMRegistrar.m
Unable to find class %s
void *BiomeStreamsLibrary(void)
BMSource
Class getBMSourceClass(void)_block_invoke
children
columnNames
v24@?0Q8^B16
bm_deletion
CREATE TABLE BM_MANAGED_TABLES (bm_managed_table TEXT UNIQUE PRIMARY KEY ON CONFLICT IGNORE NOT NULL, bm_source_id TEXT NOT NULL); CREATE TABLE BM_SESSION_CONTEXT (bm_rowid INTEGER PRIMARY KEY AUTOINCREMENT, bm_origin_id TEXT); CREATE TABLE BM_DERIVED_OBJECTS (bm_managed_table_rowid INTEGER NOT NULL, bm_derived_rowid INTEGER NOT NULL, bm_context_rowid INTEGER NOT NULL); CREATE TRIGGER bm_managed_table_ad AFTER DELETE ON BM_MANAGED_TABLES BEGIN DELETE FROM BM_DERIVED_OBJECTS WHERE bm_managed_table_rowid == old.rowid; END; CREATE TRIGGER bm_derived_objects_ad AFTER DELETE ON BM_DERIVED_OBJECTS   WHEN (SELECT count(*) FROM BM_DERIVED_OBJECTS WHERE bm_context_rowid == old.bm_context_rowid) == 0 BEGIN  DELETE FROM BM_SESSION_CONTEXT WHERE bm_rowid == old.bm_context_rowid; END; 
SELECT bm_managed_table FROM BM_MANAGED_TABLES;
CREATE TRIGGER bm_%@_ai AFTER INSERT ON %@ BEGIN  INSERT INTO BM_DERIVED_OBJECTS (bm_managed_table_rowid, bm_derived_rowid, bm_context_rowid)  SELECT  t.rowid,          new.rowid,          c.rowid  FROM BM_MANAGED_TABLES t, BM_SESSION_CONTEXT c  WHERE t.bm_managed_table == '%@'  ORDER BY c.rowid DESC LIMIT 1;END;
CREATE TRIGGER bm_%@_ad AFTER DELETE ON %@ BEGIN  DELETE FROM BM_DERIVED_OBJECTS  WHERE bm_derived_rowid == old.rowid AND    bm_managed_table_rowid == (SELECT rowid FROM BM_MANAGED_TABLES WHERE bm_managed_table == '%@'); END;
BMSQLStoreManager.m
Invalid parameter not satisfying: %@
[(id<BMSourceMethods>)source identifier]
INSERT INTO BM_MANAGED_TABLES (bm_managed_table, bm_source_id) VALUES (?, ?)
[event respondsToSelector:@selector(identifier)]
INSERT INTO BM_SESSION_CONTEXT (bm_origin_id) VALUES (?)
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c, BM_MANAGED_TABLES t WHERE t.bm_managed_table==? AND c.bm_origin_id==? AND bm_managed_table_rowid==t.rowid AND bm_context_rowid==c.rowid
SELECT rowid,bm_managed_table from BM_MANAGED_TABLES WHERE bm_source_id==?
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c WHERE c.bm_origin_id IN (%@) AND d.bm_managed_table_rowid==? AND d.bm_context_rowid==c.rowid
DELETE FROM %@ WHERE rowid IN (%@)
BiomePubSub
file-write*
-[_bmFMDatabase initWithPath:]
FMDatabase.m
sqlite3_threadsafe()
2.7.7
FMDBVersion is invalid: Please use FMDBUserVersion instead.
:memory:
error opening!: %d
Closing leaked statement
error closing!: %d
%s:%d
-[_bmFMDatabase busyRetryTimeout]
FMDB: busyRetryTimeout no longer works, please use maxBusyRetryTimeInterval
-[_bmFMDatabase setBusyRetryTimeout:]
FMDB: setBusyRetryTimeout does nothing, please use setMaxBusyRetryTimeInterval:
B24@?0@"_bmFMStatement"8^B16
query
API misuse, -[_bmFMDatabase setCachedStatement:forQuery:] query must not be nil
en_US
select name from sqlite_master where type='table'
The _bmFMDatabase %@ is currently in use.
The _bmFMDatabase %@ is not open.
NULL
%@ executeQuery: %@
DB Error: %d "%@"
DB Query: %@
DB Path: %@
%@ = %@
Error: unable to bind (%d, %s
Could not find index for %@
data: %ld bytes
obj: %@
Error: the bind count is not correct for the # of variables (executeQuery)
Error inserting batch: %s
rollback transaction
commit transaction
begin exclusive transaction
begin deferred transaction
begin immediate transaction
name
savepoint '%@';
release savepoint '%@';
rollback transaction to savepoint '%@';
dbSavePoint%ld
%@ %ld hit(s) for query %@
WARNING: Requested sleep of %i milliseconds, but SQLite returned %i. Maybe SQLite wasn't built with HAVE_USLEEP=1?
select [sql] from sqlite_master where [type] = 'table' and lower(name) = ?
SELECT type, name, tbl_name, rootpage, sql FROM (SELECT * FROM sqlite_master UNION ALL SELECT * FROM sqlite_temp_master) WHERE type != 'meta' AND name NOT LIKE 'sqlite_%' ORDER BY tbl_name, type DESC, name
pragma table_info('%@')
pragma application_id
pragma application_id=%d
pragma user_version
pragma user_version = %d
FMResultSet.m
![statement inUse]
Warning: There seem to be no columns in this set.
%s:%d Database busy (%@)
-[_bmFMResultSet internalStepWithError:]
Database busy
Error calling sqlite3_step (%d: %s) rs
parentDB does not exist
_bmFMDatabase
Unknown error calling sqlite3_step (%d: %s) rs
Warning: I could not find the column named '%@'.
Database already in pool
The _bmFMDatabase being put back into the pool is already present in the pool
Maximum number of databases (%ld) has already been reached!
Could not open up the database at path %@
Could not create database queue for path %@
fmdb.%@
_bmFMDatabaseQueue could not reopen database for path %@
-[_bmFMDatabaseQueue inDatabase:]
FMDatabaseQueue.m
currentSyncQueue != self && "inDatabase: was called reentrantly on the same queue, which would lead to a deadlock"
Warning: there is at least one open result set around after performing [_bmFMDatabaseQueue inDatabase:]
savePoint%ld
BMTableStore: Could not open database: %@ err:%@.
BMTableUpsertSubscriber: Could not close database: %@ err:%@.
Invalid table setup data %@
Invalid db %@
Count Mismatch Error: %@
classArray must contain NSString or NSNumber %@
Could not create table: %@ err:%@.
Count Mismatch %@
Element Mismatch %@
Table Row insert error: %@
BMBiomeTableStore: unable to open database: %@
Unable to create table storage directory.
Not propagating deletions of %@ via BMRegistrar as client does not have access
Not propagating deletions of %@ via BMRegistrar as stream id is not registered
Received willPruneEvent for stream: %@ with event: %@
Received didPruneEvents for stream: %@ with identifiables: %@
Failed to open database. %@
Failed to set foreign_keys pragma. %@
Failed to create metadata table. %@
Failed to start savepoint. %@
Migrating managed store from schema %@ to %@
Failed to migrate biome management schema to version %@. %@
Successful schema migration to version %@.
Rolling back to previous state due to error during migration.
Failed to %@ savepoint. %@
Not creating BMRegistrar because we are unable to access BFS storage directory.
Failed to create BFS storage directory with error: %@
Unable to get rowid for stream %@
Registered client %@ for stream %@
Failed to put %@ under management for stream %@. %@
Injecting SiriRemembers BFS registration.
Ignoring deletions from stream %@ because no relevant registrations exist.
Handling deletions in stream %@: %@
Deleted %@ rows on behalf of %@ from %@.
Failed to create managed table insertion trigger for %@. %@
Failed to create managed table deletion trigger for %@. %@
Argument must be an NSString.
Table '%@' does not exist in database %@
Adding managed table '%@' derived from %@.
Failed to insert managed table name (%@, %@). %@
Failed to start deletion savepoint. %@
Failed to release deletion savepoint. %@
Deleted %@ rows from %@. DB: %@.
Deleted %@ rows from %@ derived from %@. DB: %@.
Failed to delete rows %@. %@
Failed to delete %@ of %@ rows derived from %@.
Subscription %@ could not create bookmark
Error setting up table in upsert subscriber: %@
BMTableUpsertSubscriber: Expecting a BMTable.
Error inserting rows in upsert subscriber: %@
Process not sandboxed, skipping sandbox check
Unable to delete derived data - biomed does not have access to %@
softlink:r:path:/System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams
BMSQLRow
BMRow
BMTableStore
BiomeFlexibleStorageDirectory
BMTable
BMTableSchema
NSSecureCoding
NSCoding
BMIdentifiable
NSObject
BMBFSPruningDelegate
BMStreamDatastorePruningDelegate
BMSQLStore
_BMRegistrarRegistration
BMRegistrar
BMSelectExpression
BMTableQueryExpression
BMSQLStoreManager
BMBookmarkableSubscription
BMTableUpsertSubscriber
BMTableSubscriber
BPSSubscriber
BMRemoteSQLStoreManager
_bmFMDatabase
_bmFMStatement
_bmFMDatabaseAdditions
_bmFMResultSet
_bmFMDatabasePool
_bmFMDatabaseQueue
FMDBUserVersion
FMDBVersion
T@"NSArray",&,N
T@"<BMFlexibleSimpleKeyValueStorage>",R,N,V_keyValueStore
T@"NSString",R,N,V_databasePath
T@"BMTableSchema",&,N,V_schema
TB,V_logsErrors
T@"BPSSubscription",N,V_subscription
T^v,V_statement
T@"NSArray",C,N,V_columnNames
_databaseInPool
T@"NSArray",R,N,V_classArray
_dbLock
T@"NSDate",&,N,V_registrationDate
_openResultSets
T@"NSError",&,N,V_tableSetupError
_sourceStreamID
T@"NSMutableArray",&,N,V_prunedIdentifiables
allKeys
T@"NSMutableDictionary",R
closeDB
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
dateFromString:
T@"NSString",&,N,V_sourceStreamID
doubleForQuery:
T@"NSString",&,V_query
getTableSchema:
T@"NSString",C,V_vfsName
initWithValues:
T@"NSString",R,N
isProxy
T@"NSString",R,N,V_sqlReplace
limitFor:value:
T@"NSString",R,N,V_tableName
T@"NSURL",R,N
release
T@"_bmFMDatabase",&,N,V_parentDB
T@"_bmFMDatabase",R,N,V_db
setDatabaseURL:
T@,V_delegate
setKeyWithData:
TB,N,V_remoteOnly
setWithObjects:
TB,N,V_shouldCacheStatements
stringByAppendingPathComponent:
TB,R
stringFromDate:
TB,R,N,V_dbIsReady
vfsName
TB,V_crashOnErrors
.cxx_destruct
T@"BMRegistrar",R,N,V_registrar
T#,R
T@"NSArray",R,N
T@"<BMIdentifiable>",&,N,V_sessionEvent
TB,V_checkedOut
T@"BMTableStore",R,N,V_store
T^v,R,N
T@"NSArray",&,N,V_children
Td,N,V_maxBusyRetryTimeInterval
T@"NSArray",C,N,V_rows
T@"NSDate",&,N,V_lastCommunicationDate
_isOpen
T@"NSDictionary",R,N
_schema
T@"NSMutableArray",&,N,V_allValues
_traceExecution
T@"NSMutableDictionary",&,V_cachedStatements
changes
T@"NSMutableSet",R,N,V_managedTableNames
containsObject:
T@"NSString",&,N,V_bundleID
dealloc
T@"NSString",&,V_path
executeUpdate:error:withArgumentsInArray:orDictionary:orVAList:
T@"NSString",C,V_path
initWithFormat:
T@"NSString",R,C
isInTransaction
T@"NSString",R,N,V_identifier
lastInsertRowId
T@"NSString",R,N,V_streamId
lowercaseString
T@"NSURL",&,N,V_databaseURL
numberWithLong:
T@"NSURL",R,N,V_dbURL
releaseSavePointWithName:error:
T@"_bmFMDatabase",R,N
setColumnNames:
T@"_bmFMStatement",&,V_statement
setKey:
TB,N,V_isOpen
setUserVersion:
TB,N,V_shouldAutoClose
shouldAutoClose
TB,N,V_tableSetupComplete
stringForQuery:
TB,R,N
tableSetupError
TB,R,N,V_isInTransaction
willPruneEvent:
TB,V_inUse
TB,V_traceExecution
TI,N
TQ,R
TQ,R,N
TQ,V_maximumNumberOfDatabasesToCreate
Ti,R,N
Ti,R,V_openFlags
Tq,R,N
Tq,V_useCount
T{os_unfair_lock_s=I},R,N,V_dbLock
T{os_unfair_lock_s=I},R,N,V_lock
URLByAppendingPathComponent:
URLByDeletingLastPathComponent
UTF8String
UTF8StringForColumn:
UTF8StringForColumnIndex:
UTF8StringForColumnName:
_accessClient
_allValues
_bundleID
_cachedStatements
_checkedOut
_children
_classArray
_columnNameToIndexMap
_columnNames
_crashOnErrors
_databaseOutPool
_databasePath
_databaseURL
_dateFormat
_dbIsReady
_dbURL
_delegate
_identifier
_inUse
_isExecutingStatement
_isInTransaction
_keyValueStore
_lastCommunicationDate
_lock
_lockQueue
_logsErrors
_managedTableNames
_maxBusyRetryTimeInterval
_maximumNumberOfDatabasesToCreate
_openFlags
_openFunctions
_parentDB
_path
_prunedIdentifiables
_query
_queue
_registrar
_registrationDate
_remoteOnly
_rows
_sessionEvent
_shouldAutoClose
_shouldCacheStatements
_sqlReplace
_startBusyRetryTime
_statement
_store
_streamId
_subscription
_tableName
_tableSetupComplete
_tableSetupError
_useCount
_vfsName
addIndex:
addManagedTable:derivedFromSource:
addManagedTable:derivedFromStream:
addObject:
addTable:named:error:
allObjects
allValues
anyObject
appendFormat:
appendString:
applicationID
array
arrayByAddingObject:
arrayWithObjects:count:
autorelease
beginDeferredTransaction
beginExclusiveTransaction
beginImmediateTransaction
beginManagedSessionWithEvent:
beginTransaction
beginTransaction:withBlock:
bindObject:toColumn:inStatement:
bindStatement:WithArgumentsInArray:orDictionary:orVAList:
bindWithArray:
bindWithArray:orDictionary:orVAList:
bindWithDictionary:
biomeDirectoryForDomain:
boolForColumn:
boolForColumnIndex:
boolForQuery:
boolValue
bundleID
busyRetryTimeout
bytes
cachedStatementForQuery:
cachedStatements
cancel
centralRegistrar
charValue
characterAtIndex:
checkedOut
checkpoint:error:
checkpoint:name:error:
checkpoint:name:logFrameCount:checkpointCount:error:
children
class
classArray
clearCachedStatements
close
closeOpenResultSets
columnCount
columnExists:columnName:
columnExists:inTableWithName:
columnIndexForName:
columnIndexIsNull:
columnIsNull:
columnNameForIndex:
columnNameToIndexMap
columnNames
commit
componentsSeparatedByString:
conformsToProtocol:
copy
count
countByEnumeratingWithState:objects:count:
countOfCheckedInDatabases
countOfCheckedOutDatabases
countOfOpenDatabases
crashOnErrors
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentHandler
dataForColumn:
dataForColumnIndex:
dataForQuery:
dataNoCopyForColumn:
dataNoCopyForColumnIndex:
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
database
databaseClass
databaseExists
databasePath
databasePool:didAddDatabase:
databasePool:shouldAddDatabaseToPool:
databasePoolWithPath:
databasePoolWithPath:flags:
databasePoolWithURL:
databasePoolWithURL:flags:
databaseQueueWithPath:
databaseQueueWithPath:flags:
databaseQueueWithURL:
databaseQueueWithURL:flags:
databaseURL
databaseWithPath:
databaseWithURL:
dateForColumn:
dateForColumnIndex:
dateForQuery:
dateWithTimeIntervalSince1970:
dbIsReady
dbLock
dbURL
debugDescription
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
defaultManager
delegate
deleteRows:fromTable:
deleteRowsDerivedFromEvent:
deleteRowsDerivedFromEvents:
deleteRowsDerivedFromStream:eventIdentifier:
deleteRowsDerivedFromStream:eventIdentifiers:
description
dictionary
dictionaryWithCapacity:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didPruneEvents
directoryForPrivateTable
doubleForColumn:
doubleForColumnIndex:
doubleValue
encodeObject:forKey:
encodeWithCoder:
endManagedSession
enumerateIndexesUsingBlock:
errorWithDomain:code:userInfo:
errorWithMessage:
eventBody
exceptionWithName:reason:userInfo:
executeLocked:
executeQuery:
executeQuery:values:error:
executeQuery:withArgumentsInArray:
executeQuery:withArgumentsInArray:orDictionary:orVAList:shouldBind:
executeQuery:withParameterDictionary:
executeQuery:withVAList:
executeQueryWithFormat:
executeStatements:
executeStatements:withResultBlock:
executeUpdate:
executeUpdate:values:error:
executeUpdate:withArgumentsInArray:
executeUpdate:withErrorAndBindings:
executeUpdate:withParameterDictionary:
executeUpdate:withVAList:
executeUpdateWithFormat:
extractSQL:argumentsList:intoString:arguments:
fileExistsAtPath:
fileSystemRepresentation
fileURLWithPath:
firstObject
floatValue
getSchema
goodConnection
hadError
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
hasAnotherRow
hasDateFormatter
hasOpenResultSets
hasReadWriteAccessToURL:
hash
identifier
inDatabase:
inDeferredTransaction:
inExclusiveTransaction:
inImmediateTransaction:
inSavePoint:
inTransaction
inTransaction:
inUse
indexOfObject:
init
initWithCapacity:
initWithChildren:columnNames:
initWithCoder:
initWithColumnNames:
initWithFMDBHandle:
initWithIdentifier:
initWithLocaleIdentifier:
initWithPath:
initWithPath:flags:
initWithPath:flags:vfs:
initWithRegistrarURL:
initWithRows:schema:
initWithStreamId:
initWithStreamId:registrar:
initWithTableName:identifier:
initWithTableName:identifier:keyValueStore:
initWithURL:
initWithURL:flags:
initWithURL:flags:vfs:
initWithValue:upstreams:name:
insertValue:forKey:
intForColumn:
intForColumnIndex:
intForQuery:
intValue
integerValue
internalStepWithError:
interrupt
isEqual:
isEqualToString:
isKindOfClass:
isMemberOfClass:
isOpen
isSQLiteThreadSafe
keyEnumerator
keyValueStore
kvcMagic:
lastCommunicationDate
lastError
lastErrorCode
lastErrorMessage
lastExtendedErrorCode
lastObject
length
localFlexibleStorageDirectory
lock
logsErrors
longForColumn:
longForColumnIndex:
longForQuery:
longLongIntForColumn:
longLongIntForColumnIndex:
longLongValue
longValue
makeFunctionNamed:arguments:block:
makeFunctionNamed:maximumArguments:withBlock:
managedTableNames
managedTables
maxBusyRetryTimeInterval
maximumNumberOfDatabasesToCreate
migrations
mutableCopy
newBookmark
next
nextObject
nextWithError:
null
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithLongLong:
numberWithShort:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
numberWithUnsignedShort:
objCType
objectAtIndex:
objectAtIndexedSubscript:
objectEnumerator
objectForColumn:
objectForColumnIndex:
objectForColumnName:
objectForKey:
objectForKeyedSubscript:
objectsPassingTest:
open
openDB
openFlags
openWithFlags:
openWithFlags:vfs:
parentDB
path
pathWithComponents:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pointerValue
prepare:
prepareTriggerForTable:
privateDBPathWithIdentifier:directory:create:
propagateDeletionOfEvents:
propagateDeletionOfEventsInStream:withIdentifiers:
prunedIdentifiables
pushDatabaseBackInPool:
query
queryTable:
queue
raise
raise:format:
receiveCompletion:
receiveInput:
receiveSubscription:
registerClientWithBundleID:databaseURL:source:
registerSiriRemembersClients
registeredClientsByStream
registrar
registrationDate
registrationsForStream:
rekey:
rekeyWithData:
releaseAllDatabases
remoteOnly
removeAllObjects
removeLastObject
removeObject:
requestAccessToFlexibleStorage
requestDemand:
reset
respondsToSelector:
resultData:context:
resultDict
resultDictionary
resultDouble:context:
resultError:context:
resultErrorCode:context:
resultErrorNoMemoryInContext:
resultErrorTooBigInContext:
resultInt:context:
resultLong:context:
resultNullInContext:
resultSetDidClose:
resultSetWithStatement:usingParentDatabase:shouldAutoClose:
resultString:context:
retain
retainCount
rollback
rollbackToSavePointWithName:error:
rows
schema
selectTableNamed:error:
self
sessionEvent
setAllValues:
setApplicationID:
setBundleID:
setBusyRetryTimeout:
setCachedStatement:forQuery:
setCachedStatements:
setCheckedOut:
setChildren:
setCrashOnErrors:
setDateFormat:
setDelegate:
setInUse:
setIsOpen:
setLastCommunicationDate:
setLocale:
setLogsErrors:
setMaxBusyRetryTimeInterval:
setMaximumNumberOfDatabasesToCreate:
setObject:forKey:
setObject:forKeyedSubscript:
setParentDB:
setPath:
setPrunedIdentifiables:
setQuery:
setRegistrationDate:
setRemoteOnly:
setRows:
setSchema:
setSessionEvent:
setShouldAutoClose:
setShouldCacheStatements:
setSourceStreamID:
setStatement:
setSubscription:
setTableSetupComplete:
setTableSetupError:
setTimeZone:
setTraceExecution:
setUseCount:
setValue:forKey:
setVfsName:
setupClassArray:table:named:error:
shortValue
shouldCacheStatements
shouldHandleDeletions
sourceStreamID
sqlReplace
sqliteHandle
sqliteLibVersion
sqlitePath
startSavePointWithName:error:
statement
step
stepWithError:
store
storeableDateFormat:
stream
streamId
streamIdentifierForStream:
streamRegistrationCounts
stringByAppendingFormat:
stringByAppendingString:
stringByPaddingToLength:withString:startingAtIndex:
stringByReplacingOccurrencesOfString:withString:
stringByStandardizingPath
stringForColumn:
stringForColumnIndex:
stringWithCapacity:
stringWithFormat:
stringWithUTF8String:
subarrayWithRange:
subscription
superclass
supportsSecureCoding
tableExists:
tableName
tableSetupComplete
timeIntervalSince1970
timeIntervalSinceReferenceDate
timeZoneForSecondsFromGMT:
traceExecution
unsignedCharValue
unsignedIntValue
unsignedLongLongIntForColumn:
unsignedLongLongIntForColumnIndex:
unsignedLongLongValue
unsignedLongValue
unsignedShortValue
update:withErrorAndBindings:
upsertRows:error:
useCount
userVersion
validateSQL:error:
valueAtIdx:
valueData:
valueDouble:
valueInt:
valueLong:
valueString:
valueType:
valueWithNonretainedObject:
values
warnInUse
zone
@16@0:8
q16@0:8
@24@0:8Q16
@"NSArray"16@0:8
@24@0:8@16
B24@0:8@16
Q16@0:8
v24@0:8@16
v16@0:8
@"NSMutableArray"
B16@0:8
B40@0:8@16@24^@32
B48@0:8@16@24@32^@40
B32@0:8@16^@24
@32@0:8@16^@24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"_bmFMDatabase"
@"NSURL"
@"NSString"
@"NSArray"
@36@0:8@16@24B32
@32@0:8@16@24
@"BMTableSchema"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"BMStoreEvent"16
@"BMRegistrar"
@"NSObject<OS_dispatch_queue>"
^v16@0:8
@"NSDate"
B40@0:8@16@24@32
B32@0:8@16@24
@"<BMStreamsAccessClientMethods>"
@"BMTable"24@0:8@"BMTable"16
v24@0:8@"NSArray"16
i32@0:8@16@24
@"NSMutableSet"
@"<BMIdentifiable>"
@"<BMBookmark>"16@0:8
q24@0:8@16
v24@0:8@"BPSSubscription"16
v24@0:8@"BPSCompletion"16
@32@0:8@"NSString"16@"NSString"24
@40@0:8@16@24@32
v20@0:8B16
@"BMTableStore"
@"BPSSubscription"
@"NSError"
@"<BMFlexibleSimpleKeyValueStorage>"
r*16@0:8
i24@0:8i16i20
B28@0:8i16@20
v24@0:8d16
d16@0:8
v20@0:8i16
v32@0:8@16@24
i36@0:8@16i24^{sqlite3_stmt=}28
v48@0:8@16[1{__va_list_tag=II^v^v}]24@32@40
@52@0:8@16@24@32[1{__va_list_tag=II^v^v}]40B48
B48@0:8^{sqlite3_stmt=}16@24@32[1{__va_list_tag=II^v^v}]40
@40@0:8@16@24^@32
@32@0:8@16[1{__va_list_tag=II^v^v}]24
B56@0:8@16^@24@32@40[1{__va_list_tag=II^v^v}]48
B32@0:8@16[1{__va_list_tag=II^v^v}]24
B32@0:8@16@?24
@24@0:8@?16
B28@0:8i16^@20
B36@0:8i16@20^@28
B52@0:8i16@20^i28^i36^@44
v36@0:8@16i24@?28
i24@0:8^v16
q24@0:8^v16
d24@0:8^v16
@24@0:8^v16
v24@0:8^v16
v28@0:8i16^v20
v32@0:8q16^v24
v32@0:8d16^v24
v32@0:8@16^v24
@"NSDateFormatter"
v24@0:8q16
I16@0:8
v20@0:8I16
i16@0:8
B24@0:8^@16
i24@0:8^@16
i24@0:8@16
i20@0:8i16
q20@0:8i16
Q24@0:8@16
Q20@0:8i16
B20@0:8i16
d24@0:8@16
d20@0:8i16
@20@0:8i16
r*20@0:8i16
r*24@0:8@16
B40@0:8@16@24[1{__va_list_tag=II^v^v}]32
@"NSMutableDictionary"
@"_bmFMStatement"
v24@0:8Q16
@28@0:8@16i24
@36@0:8@16i24@28
v24@0:8@?16
v32@0:8q16@?24
@(#)PROGRAM:BiomeFlexibleStorage  PROJECT:BiomeFlexibleStorage-100.13.0.1
333333
BMFlexibleStorageTableErrorDomain
BiomeFlexibleStorage
setupClassArray, classArray nil or 0 entries
setupClassArray, can not open database
CREATE TABLE IF NOT EXISTS "%@" (
REPLACE INTO "%@" VALUES (
classArray and columnNames sizes do not match
"%@" TEXT
"%@" REAL
classArray must contain NSString or NSNumber
 UNIQUE PRIMARY KEY
BMTableUpsertSubscriber: input array has %lu elements and must have %lu elements
input classes must match (index=%ld) %@ vs. %@
SELECT * FROM "%@"
tables
privateTable
v8@?0
Schema: %@  | Rows: %@
columns
com.apple.Biome.BFS.BMBFSPruningDelegate
migration
%@ not implemented by child class %@
PRAGMA foreign_keys = ON
CREATE TABLE IF NOT EXISTS BM_METADATA (bm_key TEXT UNIQUE PRIMARY KEY ON CONFLICT REPLACE NOT NULL, bm_value TEXT)
SELECT bm_value FROM BM_METADATA WHERE bm_key='schema_version'
bm_value
INSERT INTO BM_METADATA (bm_key, bm_value) VALUES ('schema_version', ?); 
commit
rollback
registrations.db
CREATE TABLE BFS_MANAGED_DBS (  client_bundle TEXT NOT NULL,  db_path TEXT NOT NULL,  source_streams_rowid INTEGER,  registration_date INTEGER(4) DEFAULT (strftime('%s','now')),  last_communication_date INTEGER(4) DEFAULT (strftime('%s','now')),   PRIMARY KEY (client_bundle, db_path, source_streams_rowid) ); CREATE INDEX client_idx ON BFS_MANAGED_DBS (client_bundle); CREATE INDEX source_idx ON BFS_MANAGED_DBS (source_streams_rowid); 
CREATE TABLE SOURCE_STREAMS (  stream_name TEXT PRIMARY KEY ON CONFLICT IGNORE );
registerClient
INSERT INTO SOURCE_STREAMS (stream_name) VALUES (?)
SELECT rowid FROM SOURCE_STREAMS WHERE stream_name == ?
INSERT INTO BFS_MANAGED_DBS (client_bundle, db_path, source_streams_rowid) VALUES (?,?,?) ON CONFLICT(client_bundle, db_path, source_streams_rowid) DO UPDATE SET last_communication_date=strftime('%s','now')
com.apple.siriinferenced
/var/mobile/Library/com.apple.siri.inference/siriremembers.sqlite3
/var/mobile/Library/com.apple.siri.inference/siriremembers2.sqlite3
SELECT s.stream_name, r.client_bundle FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid
SELECT s.stream_name, count(r.client_bundle) FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.rowid=r.source_streams_rowid GROUP BY s.stream_name
SELECT r.client_bundle, r.db_path, r.registration_date, r.last_communication_date FROM SOURCE_STREAMS s, BFS_MANAGED_DBS r WHERE s.stream_name = ? AND s.rowid=r.source_streams_rowid
BMStreamsAccessClient
Class getBMStreamsAccessClientClass(void)_block_invoke
BMRegistrar.m
Unable to find class %s
void *BiomeStreamsLibrary(void)
BMSource
Class getBMSourceClass(void)_block_invoke
children
columnNames
v24@?0Q8^B16
bm_deletion
CREATE TABLE BM_MANAGED_TABLES (bm_managed_table TEXT UNIQUE PRIMARY KEY ON CONFLICT IGNORE NOT NULL, bm_source_id TEXT NOT NULL); CREATE TABLE BM_SESSION_CONTEXT (bm_rowid INTEGER PRIMARY KEY AUTOINCREMENT, bm_origin_id TEXT); CREATE TABLE BM_DERIVED_OBJECTS (bm_managed_table_rowid INTEGER NOT NULL, bm_derived_rowid INTEGER NOT NULL, bm_context_rowid INTEGER NOT NULL); CREATE TRIGGER bm_managed_table_ad AFTER DELETE ON BM_MANAGED_TABLES BEGIN DELETE FROM BM_DERIVED_OBJECTS WHERE bm_managed_table_rowid == old.rowid; END; CREATE TRIGGER bm_derived_objects_ad AFTER DELETE ON BM_DERIVED_OBJECTS   WHEN (SELECT count(*) FROM BM_DERIVED_OBJECTS WHERE bm_context_rowid == old.bm_context_rowid) == 0 BEGIN  DELETE FROM BM_SESSION_CONTEXT WHERE bm_rowid == old.bm_context_rowid; END; 
SELECT bm_managed_table FROM BM_MANAGED_TABLES;
CREATE TRIGGER bm_%@_ai AFTER INSERT ON %@ BEGIN  INSERT INTO BM_DERIVED_OBJECTS (bm_managed_table_rowid, bm_derived_rowid, bm_context_rowid)  SELECT  t.rowid,          new.rowid,          c.rowid  FROM BM_MANAGED_TABLES t, BM_SESSION_CONTEXT c  WHERE t.bm_managed_table == '%@'  ORDER BY c.rowid DESC LIMIT 1;END;
CREATE TRIGGER bm_%@_ad AFTER DELETE ON %@ BEGIN  DELETE FROM BM_DERIVED_OBJECTS  WHERE bm_derived_rowid == old.rowid AND    bm_managed_table_rowid == (SELECT rowid FROM BM_MANAGED_TABLES WHERE bm_managed_table == '%@'); END;
BMSQLStoreManager.m
Invalid parameter not satisfying: %@
[(id<BMSourceMethods>)source identifier]
INSERT INTO BM_MANAGED_TABLES (bm_managed_table, bm_source_id) VALUES (?, ?)
[event respondsToSelector:@selector(identifier)]
INSERT INTO BM_SESSION_CONTEXT (bm_origin_id) VALUES (?)
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c, BM_MANAGED_TABLES t WHERE t.bm_managed_table==? AND c.bm_origin_id==? AND bm_managed_table_rowid==t.rowid AND bm_context_rowid==c.rowid
SELECT rowid,bm_managed_table from BM_MANAGED_TABLES WHERE bm_source_id==?
SELECT bm_derived_rowid FROM BM_DERIVED_OBJECTS d, BM_SESSION_CONTEXT c WHERE c.bm_origin_id IN (%@) AND d.bm_managed_table_rowid==? AND d.bm_context_rowid==c.rowid
DELETE FROM %@ WHERE rowid IN (%@)
BiomePubSub
file-write*
-[_bmFMDatabase initWithPath:]
FMDatabase.m
sqlite3_threadsafe()
2.7.7
FMDBVersion is invalid: Please use FMDBUserVersion instead.
:memory:
error opening!: %d
Closing leaked statement
error closing!: %d
%s:%d
-[_bmFMDatabase busyRetryTimeout]
FMDB: busyRetryTimeout no longer works, please use maxBusyRetryTimeInterval
-[_bmFMDatabase setBusyRetryTimeout:]
FMDB: setBusyRetryTimeout does nothing, please use setMaxBusyRetryTimeInterval:
B24@?0@"_bmFMStatement"8^B16
query
API misuse, -[_bmFMDatabase setCachedStatement:forQuery:] query must not be nil
en_US
select name from sqlite_master where type='table'
The _bmFMDatabase %@ is currently in use.
The _bmFMDatabase %@ is not open.
NULL
%@ executeQuery: %@
DB Error: %d "%@"
DB Query: %@
DB Path: %@
%@ = %@
Error: unable to bind (%d, %s
Could not find index for %@
data: %ld bytes
obj: %@
Error: the bind count is not correct for the # of variables (executeQuery)
Error inserting batch: %s
rollback transaction
commit transaction
begin exclusive transaction
begin deferred transaction
begin immediate transaction
name
savepoint '%@';
release savepoint '%@';
rollback transaction to savepoint '%@';
dbSavePoint%ld
%@ %ld hit(s) for query %@
WARNING: Requested sleep of %i milliseconds, but SQLite returned %i. Maybe SQLite wasn't built with HAVE_USLEEP=1?
select [sql] from sqlite_master where [type] = 'table' and lower(name) = ?
SELECT type, name, tbl_name, rootpage, sql FROM (SELECT * FROM sqlite_master UNION ALL SELECT * FROM sqlite_temp_master) WHERE type != 'meta' AND name NOT LIKE 'sqlite_%' ORDER BY tbl_name, type DESC, name
pragma table_info('%@')
pragma application_id
pragma application_id=%d
pragma user_version
pragma user_version = %d
FMResultSet.m
![statement inUse]
Warning: There seem to be no columns in this set.
%s:%d Database busy (%@)
-[_bmFMResultSet internalStepWithError:]
Database busy
Error calling sqlite3_step (%d: %s) rs
parentDB does not exist
_bmFMDatabase
Unknown error calling sqlite3_step (%d: %s) rs
Warning: I could not find the column named '%@'.
Database already in pool
The _bmFMDatabase being put back into the pool is already present in the pool
Maximum number of databases (%ld) has already been reached!
Could not open up the database at path %@
Could not create database queue for path %@
fmdb.%@
_bmFMDatabaseQueue could not reopen database for path %@
-[_bmFMDatabaseQueue inDatabase:]
FMDatabaseQueue.m
currentSyncQueue != self && "inDatabase: was called reentrantly on the same queue, which would lead to a deadlock"
Warning: there is at least one open result set around after performing [_bmFMDatabaseQueue inDatabase:]
savePoint%ld
BMTableStore: Could not open database: %@ err:%@.
BMTableUpsertSubscriber: Could not close database: %@ err:%@.
Invalid table setup data %@
Invalid db %@
Count Mismatch Error: %@
classArray must contain NSString or NSNumber %@
Could not create table: %@ err:%@.
Count Mismatch %@
Element Mismatch %@
Table Row insert error: %@
BMBiomeTableStore: unable to open database: %@
Unable to create table storage directory.
Not propagating deletions of %@ via BMRegistrar as client does not have access
Not propagating deletions of %@ via BMRegistrar as stream id is not registered
Received willPruneEvent for stream: %@ with event: %@
Received didPruneEvents for stream: %@ with identifiables: %@
Failed to open database. %@
Failed to set foreign_keys pragma. %@
Failed to create metadata table. %@
Failed to start savepoint. %@
Migrating managed store from schema %@ to %@
Failed to migrate biome management schema to version %@. %@
Successful schema migration to version %@.
Rolling back to previous state due to error during migration.
Failed to %@ savepoint. %@
Not creating BMRegistrar because we are unable to access BFS storage directory.
Failed to create BFS storage directory with error: %@
Unable to get rowid for stream %@
Registered client %@ for stream %@
Failed to put %@ under management for stream %@. %@
Injecting SiriRemembers BFS registration.
Ignoring deletions from stream %@ because no relevant registrations exist.
Handling deletions in stream %@: %@
Deleted %@ rows on behalf of %@ from %@.
Failed to create managed table insertion trigger for %@. %@
Failed to create managed table deletion trigger for %@. %@
Argument must be an NSString.
Table '%@' does not exist in database %@
Adding managed table '%@' derived from %@.
Failed to insert managed table name (%@, %@). %@
Failed to start deletion savepoint. %@
Failed to release deletion savepoint. %@
Deleted %@ rows from %@. DB: %@.
Deleted %@ rows from %@ derived from %@. DB: %@.
Failed to delete rows %@. %@
Failed to delete %@ of %@ rows derived from %@.
Subscription %@ could not create bookmark
Error setting up table in upsert subscriber: %@
BMTableUpsertSubscriber: Expecting a BMTable.
Error inserting rows in upsert subscriber: %@
Process not sandboxed, skipping sandbox check
Unable to delete derived data - biomed does not have access to %@
softlink:r:path:/System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams
BMSQLRow
BMRow
BMTableStore
BiomeFlexibleStorageDirectory
BMTable
BMTableSchema
NSSecureCoding
NSCoding
BMIdentifiable
NSObject
BMBFSPruningDelegate
BMStreamDatastorePruningDelegate
BMSQLStore
_BMRegistrarRegistration
BMRegistrar
BMSelectExpression
BMTableQueryExpression
BMSQLStoreManager
BMBookmarkableSubscription
BMTableUpsertSubscriber
BMTableSubscriber
BPSSubscriber
BMRemoteSQLStoreManager
_bmFMDatabase
_bmFMStatement
_bmFMDatabaseAdditions
_bmFMResultSet
_bmFMDatabasePool
_bmFMDatabaseQueue
FMDBUserVersion
FMDBVersion
T@"NSArray",&,N
T@"<BMFlexibleSimpleKeyValueStorage>",R,N,V_keyValueStore
T@"NSString",R,N,V_databasePath
T@"BMTableSchema",&,N,V_schema
TB,V_logsErrors
T@"BPSSubscription",N,V_subscription
T^v,V_statement
T@"NSArray",C,N,V_columnNames
_databaseInPool
T@"NSArray",R,N,V_classArray
_dbLock
T@"NSDate",&,N,V_registrationDate
_openResultSets
T@"NSError",&,N,V_tableSetupError
_sourceStreamID
T@"NSMutableArray",&,N,V_prunedIdentifiables
allKeys
T@"NSMutableDictionary",R
closeDB
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
dateFromString:
T@"NSString",&,N,V_sourceStreamID
doubleForQuery:
T@"NSString",&,V_query
getTableSchema:
T@"NSString",C,V_vfsName
initWithValues:
T@"NSString",R,N
isProxy
T@"NSString",R,N,V_sqlReplace
limitFor:value:
T@"NSString",R,N,V_tableName
T@"NSURL",R,N
release
T@"_bmFMDatabase",&,N,V_parentDB
T@"_bmFMDatabase",R,N,V_db
setDatabaseURL:
T@,V_delegate
setKeyWithData:
TB,N,V_remoteOnly
setWithObjects:
TB,N,V_shouldCacheStatements
stringByAppendingPathComponent:
TB,R
stringFromDate:
TB,R,N,V_dbIsReady
vfsName
TB,V_crashOnErrors
.cxx_destruct
T@"BMRegistrar",R,N,V_registrar
T#,R
T@"NSArray",R,N
T@"<BMIdentifiable>",&,N,V_sessionEvent
TB,V_checkedOut
T@"BMTableStore",R,N,V_store
T^v,R,N
T@"NSArray",&,N,V_children
Td,N,V_maxBusyRetryTimeInterval
T@"NSArray",C,N,V_rows
T@"NSDate",&,N,V_lastCommunicationDate
_isOpen
T@"NSDictionary",R,N
_schema
T@"NSMutableArray",&,N,V_allValues
_traceExecution
T@"NSMutableDictionary",&,V_cachedStatements
changes
T@"NSMutableSet",R,N,V_managedTableNames
containsObject:
T@"NSString",&,N,V_bundleID
dealloc
T@"NSString",&,V_path
executeUpdate:error:withArgumentsInArray:orDictionary:orVAList:
T@"NSString",C,V_path
initWithFormat:
T@"NSString",R,C
isInTransaction
T@"NSString",R,N,V_identifier
lastInsertRowId
T@"NSString",R,N,V_streamId
lowercaseString
T@"NSURL",&,N,V_databaseURL
numberWithLong:
T@"NSURL",R,N,V_dbURL
releaseSavePointWithName:error:
T@"_bmFMDatabase",R,N
setColumnNames:
T@"_bmFMStatement",&,V_statement
setKey:
TB,N,V_isOpen
setUserVersion:
TB,N,V_shouldAutoClose
shouldAutoClose
TB,N,V_tableSetupComplete
stringForQuery:
TB,R,N
tableSetupError
TB,R,N,V_isInTransaction
willPruneEvent:
TB,V_inUse
TB,V_traceExecution
TI,N
TQ,R
TQ,R,N
TQ,V_maximumNumberOfDatabasesToCreate
Ti,R,N
Ti,R,V_openFlags
Tq,R,N
Tq,V_useCount
T{os_unfair_lock_s=I},R,N,V_dbLock
T{os_unfair_lock_s=I},R,N,V_lock
URLByAppendingPathComponent:
URLByDeletingLastPathComponent
UTF8String
UTF8StringForColumn:
UTF8StringForColumnIndex:
UTF8StringForColumnName:
_accessClient
_allValues
_bundleID
_cachedStatements
_checkedOut
_children
_classArray
_columnNameToIndexMap
_columnNames
_crashOnErrors
_databaseOutPool
_databasePath
_databaseURL
_dateFormat
_dbIsReady
_dbURL
_delegate
_identifier
_inUse
_isExecutingStatement
_isInTransaction
_keyValueStore
_lastCommunicationDate
_lock
_lockQueue
_logsErrors
_managedTableNames
_maxBusyRetryTimeInterval
_maximumNumberOfDatabasesToCreate
_openFlags
_openFunctions
_parentDB
_path
_prunedIdentifiables
_query
_queue
_registrar
_registrationDate
_remoteOnly
_rows
_sessionEvent
_shouldAutoClose
_shouldCacheStatements
_sqlReplace
_startBusyRetryTime
_statement
_store
_streamId
_subscription
_tableName
_tableSetupComplete
_tableSetupError
_useCount
_vfsName
addIndex:
addManagedTable:derivedFromSource:
addManagedTable:derivedFromStream:
addObject:
addTable:named:error:
allObjects
allValues
anyObject
appendFormat:
appendString:
applicationID
array
arrayByAddingObject:
arrayWithObjects:count:
autorelease
beginDeferredTransaction
beginExclusiveTransaction
beginImmediateTransaction
beginManagedSessionWithEvent:
beginTransaction
beginTransaction:withBlock:
bindObject:toColumn:inStatement:
bindStatement:WithArgumentsInArray:orDictionary:orVAList:
bindWithArray:
bindWithArray:orDictionary:orVAList:
bindWithDictionary:
biomeDirectoryForDomain:
boolForColumn:
boolForColumnIndex:
boolForQuery:
boolValue
bundleID
busyRetryTimeout
bytes
cachedStatementForQuery:
cachedStatements
cancel
centralRegistrar
charValue
characterAtIndex:
checkedOut
checkpoint:error:
checkpoint:name:error:
checkpoint:name:logFrameCount:checkpointCount:error:
children
class
classArray
clearCachedStatements
close
closeOpenResultSets
columnCount
columnExists:columnName:
columnExists:inTableWithName:
columnIndexForName:
columnIndexIsNull:
columnIsNull:
columnNameForIndex:
columnNameToIndexMap
columnNames
commit
componentsSeparatedByString:
conformsToProtocol:
copy
count
countByEnumeratingWithState:objects:count:
countOfCheckedInDatabases
countOfCheckedOutDatabases
countOfOpenDatabases
crashOnErrors
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentHandler
dataForColumn:
dataForColumnIndex:
dataForQuery:
dataNoCopyForColumn:
dataNoCopyForColumnIndex:
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
database
databaseClass
databaseExists
databasePath
databasePool:didAddDatabase:
databasePool:shouldAddDatabaseToPool:
databasePoolWithPath:
databasePoolWithPath:flags:
databasePoolWithURL:
databasePoolWithURL:flags:
databaseQueueWithPath:
databaseQueueWithPath:flags:
databaseQueueWithURL:
databaseQueueWithURL:flags:
databaseURL
databaseWithPath:
databaseWithURL:
dateForColumn:
dateForColumnIndex:
dateForQuery:
dateWithTimeIntervalSince1970:
dbIsReady
dbLock
dbURL
debugDescription
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
defaultManager
delegate
deleteRows:fromTable:
deleteRowsDerivedFromEvent:
deleteRowsDerivedFromEvents:
deleteRowsDerivedFromStream:eventIdentifier:
deleteRowsDerivedFromStream:eventIdentifiers:
description
dictionary
dictionaryWithCapacity:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didPruneEvents
directoryForPrivateTable
doubleForColumn:
doubleForColumnIndex:
doubleValue
encodeObject:forKey:
encodeWithCoder:
endManagedSession
enumerateIndexesUsingBlock:
errorWithDomain:code:userInfo:
errorWithMessage:
eventBody
exceptionWithName:reason:userInfo:
executeLocked:
executeQuery:
executeQuery:values:error:
executeQuery:withArgumentsInArray:
executeQuery:withArgumentsInArray:orDictionary:orVAList:shouldBind:
executeQuery:withParameterDictionary:
executeQuery:withVAList:
executeQueryWithFormat:
executeStatements:
executeStatements:withResultBlock:
executeUpdate:
executeUpdate:values:error:
executeUpdate:withArgumentsInArray:
executeUpdate:withErrorAndBindings:
executeUpdate:withParameterDictionary:
executeUpdate:withVAList:
executeUpdateWithFormat:
extractSQL:argumentsList:intoString:arguments:
fileExistsAtPath:
fileSystemRepresentation
fileURLWithPath:
firstObject
floatValue
getSchema
goodConnection
hadError
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
hasAnotherRow
hasDateFormatter
hasOpenResultSets
hasReadWriteAccessToURL:
hash
identifier
inDatabase:
inDeferredTransaction:
inExclusiveTransaction:
inImmediateTransaction:
inSavePoint:
inTransaction
inTransaction:
inUse
indexOfObject:
init
initWithCapacity:
initWithChildren:columnNames:
initWithCoder:
initWithColumnNames:
initWithFMDBHandle:
initWithIdentifier:
initWithLocaleIdentifier:
initWithPath:
initWithPath:flags:
initWithPath:flags:vfs:
initWithRegistrarURL:
initWithRows:schema:
initWithStreamId:
initWithStreamId:registrar:
initWithTableName:identifier:
initWithTableName:identifier:keyValueStore:
initWithURL:
initWithURL:flags:
initWithURL:flags:vfs:
initWithValue:upstreams:name:
insertValue:forKey:
intForColumn:
intForColumnIndex:
intForQuery:
intValue
integerValue
internalStepWithError:
interrupt
isEqual:
isEqualToString:
isKindOfClass:
isMemberOfClass:
isOpen
isSQLiteThreadSafe
keyEnumerator
keyValueStore
kvcMagic:
lastCommunicationDate
lastError
lastErrorCode
lastErrorMessage
lastExtendedErrorCode
lastObject
length
localFlexibleStorageDirectory
lock
logsErrors
longForColumn:
longForColumnIndex:
longForQuery:
longLongIntForColumn:
longLongIntForColumnIndex:
longLongValue
longValue
makeFunctionNamed:arguments:block:
makeFunctionNamed:maximumArguments:withBlock:
managedTableNames
managedTables
maxBusyRetryTimeInterval
maximumNumberOfDatabasesToCreate
migrations
mutableCopy
newBookmark
next
nextObject
nextWithError:
null
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithLongLong:
numberWithShort:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
numberWithUnsignedShort:
objCType
objectAtIndex:
objectAtIndexedSubscript:
objectEnumerator
objectForColumn:
objectForColumnIndex:
objectForColumnName:
objectForKey:
objectForKeyedSubscript:
objectsPassingTest:
open
openDB
openFlags
openWithFlags:
openWithFlags:vfs:
parentDB
path
pathWithComponents:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pointerValue
prepare:
prepareTriggerForTable:
privateDBPathWithIdentifier:directory:create:
propagateDeletionOfEvents:
propagateDeletionOfEventsInStream:withIdentifiers:
prunedIdentifiables
pushDatabaseBackInPool:
query
queryTable:
queue
raise
raise:format:
receiveCompletion:
receiveInput:
receiveSubscription:
registerClientWithBundleID:databaseURL:source:
registerSiriRemembersClients
registeredClientsByStream
registrar
registrationDate
registrationsForStream:
rekey:
rekeyWithData:
releaseAllDatabases
remoteOnly
removeAllObjects
removeLastObject
removeObject:
requestAccessToFlexibleStorage
requestDemand:
reset
respondsToSelector:
resultData:context:
resultDict
resultDictionary
resultDouble:context:
resultError:context:
resultErrorCode:context:
resultErrorNoMemoryInContext:
resultErrorTooBigInContext:
resultInt:context:
resultLong:context:
resultNullInContext:
resultSetDidClose:
resultSetWithStatement:usingParentDatabase:shouldAutoClose:
resultString:context:
retain
retainCount
rollback
rollbackToSavePointWithName:error:
rows
schema
selectTableNamed:error:
self
sessionEvent
setAllValues:
setApplicationID:
setBundleID:
setBusyRetryTimeout:
setCachedStatement:forQuery:
setCachedStatements:
setCheckedOut:
setChildren:
setCrashOnErrors:
setDateFormat:
setDelegate:
setInUse:
setIsOpen:
setLastCommunicationDate:
setLocale:
setLogsErrors:
setMaxBusyRetryTimeInterval:
setMaximumNumberOfDatabasesToCreate:
setObject:forKey:
setObject:forKeyedSubscript:
setParentDB:
setPath:
setPrunedIdentifiables:
setQuery:
setRegistrationDate:
setRemoteOnly:
setRows:
setSchema:
setSessionEvent:
setShouldAutoClose:
setShouldCacheStatements:
setSourceStreamID:
setStatement:
setSubscription:
setTableSetupComplete:
setTableSetupError:
setTimeZone:
setTraceExecution:
setUseCount:
setValue:forKey:
setVfsName:
setupClassArray:table:named:error:
shortValue
shouldCacheStatements
shouldHandleDeletions
sourceStreamID
sqlReplace
sqliteHandle
sqliteLibVersion
sqlitePath
startSavePointWithName:error:
statement
step
stepWithError:
store
storeableDateFormat:
stream
streamId
streamIdentifierForStream:
streamRegistrationCounts
stringByAppendingFormat:
stringByAppendingString:
stringByPaddingToLength:withString:startingAtIndex:
stringByReplacingOccurrencesOfString:withString:
stringByStandardizingPath
stringForColumn:
stringForColumnIndex:
stringWithCapacity:
stringWithFormat:
stringWithUTF8String:
subarrayWithRange:
subscription
superclass
supportsSecureCoding
tableExists:
tableName
tableSetupComplete
timeIntervalSince1970
timeIntervalSinceReferenceDate
timeZoneForSecondsFromGMT:
traceExecution
unsignedCharValue
unsignedIntValue
unsignedLongLongIntForColumn:
unsignedLongLongIntForColumnIndex:
unsignedLongLongValue
unsignedLongValue
unsignedShortValue
update:withErrorAndBindings:
upsertRows:error:
useCount
userVersion
validateSQL:error:
valueAtIdx:
valueData:
valueDouble:
valueInt:
valueLong:
valueString:
valueType:
valueWithNonretainedObject:
values
warnInUse
zone
@16@0:8
q16@0:8
@24@0:8Q16
@"NSArray"16@0:8
@24@0:8@16
B24@0:8@16
Q16@0:8
v24@0:8@16
v16@0:8
@"NSMutableArray"
B16@0:8
B40@0:8@16@24^@32
B48@0:8@16@24@32^@40
B32@0:8@16^@24
@32@0:8@16^@24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"_bmFMDatabase"
@"NSURL"
@"NSString"
@"NSArray"
@36@0:8@16@24B32
@32@0:8@16@24
@"BMTableSchema"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"BMStoreEvent"16
@"BMRegistrar"
@"NSObject<OS_dispatch_queue>"
^v16@0:8
@"NSDate"
B40@0:8@16@24@32
B32@0:8@16@24
@"<BMStreamsAccessClientMethods>"
@"BMTable"24@0:8@"BMTable"16
v24@0:8@"NSArray"16
i32@0:8@16@24
@"NSMutableSet"
@"<BMIdentifiable>"
@"<BMBookmark>"16@0:8
q24@0:8@16
v24@0:8@"BPSSubscription"16
v24@0:8@"BPSCompletion"16
@32@0:8@"NSString"16@"NSString"24
@40@0:8@16@24@32
v20@0:8B16
@"BMTableStore"
@"BPSSubscription"
@"NSError"
@"<BMFlexibleSimpleKeyValueStorage>"
r*16@0:8
i24@0:8i16i20
B28@0:8i16@20
v24@0:8d16
d16@0:8
v20@0:8i16
v32@0:8@16@24
i36@0:8@16i24^{sqlite3_stmt=}28
v48@0:8@16*24@32@40
@52@0:8@16@24@32*40B48
B48@0:8^{sqlite3_stmt=}16@24@32*40
@40@0:8@16@24^@32
@32@0:8@16*24
B56@0:8@16^@24@32@40*48
B32@0:8@16*24
B32@0:8@16@?24
@24@0:8@?16
B28@0:8i16^@20
B36@0:8i16@20^@28
B52@0:8i16@20^i28^i36^@44
v36@0:8@16i24@?28
i24@0:8^v16
q24@0:8^v16
d24@0:8^v16
@24@0:8^v16
v24@0:8^v16
v28@0:8i16^v20
v32@0:8q16^v24
v32@0:8d16^v24
v32@0:8@16^v24
@"NSDateFormatter"
v24@0:8q16
I16@0:8
v20@0:8I16
i16@0:8
B24@0:8^@16
i24@0:8^@16
i24@0:8@16
i20@0:8i16
q20@0:8i16
Q24@0:8@16
Q20@0:8i16
B20@0:8i16
d24@0:8@16
d20@0:8i16
@20@0:8i16
r*20@0:8i16
r*24@0:8@16
B40@0:8@16@24*32
@"NSMutableDictionary"
@"_bmFMStatement"
v24@0:8Q16
@28@0:8@16i24
@36@0:8@16i24@28
v24@0:8@?16
v32@0:8q16@?24
