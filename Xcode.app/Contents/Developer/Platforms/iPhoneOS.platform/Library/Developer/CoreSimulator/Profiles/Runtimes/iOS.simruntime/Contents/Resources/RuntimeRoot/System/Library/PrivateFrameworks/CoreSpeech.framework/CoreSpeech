?ffffff
?(knN
$@frmaEVAWffac
fff?
@mcpl
mcpl
Bmcplsupoxeps
Median
+[CSUtils(Statistics) distributionDictionary:]
average:
stddev:
q24@?0@8@16
v8@?0
-[CSGestureMonitor isTriggerHandheld]
[SplitterEnabled(%d)]
[Device%d(%@) DoAP(%d)]
[SplitterState:%d]
CSAudioInjectionBuiltInEngine
-[CSAudioInjectionBuiltInEngine dealloc]
SampleCount
HostTime
-[CSAudioInjectionBuiltInEngine getBestSampleCountWithOption:]
-[CSAudioInjectionBuiltInEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]_block_invoke
trigger-time
-[NviDataLogger logData:]
-[NviDataLogger stream:handleEvent:]
CSMicUsageReporter
-[CSMicUsageReporter _reportsDynamicActivityAttribute:bundleId:]
CORESPEECH_DAEMON_ACCESS_AUDIO_FOR_DICTATION
CORESPEECH_DAEMON_ACCESS_AUDIO_FOR_SIRI
CORESPEECH_DAEMON_ACCESS_AUDIO_FOR_SIRI_AND_DICTATION
STDynamicActivityAttributionPublisher
Class getSTDynamicActivityAttributionPublisherClass(void)_block_invoke
CSMicUsageReporter.m
Unable to find class %s
void *SystemStatusLibrary(void)
-[CSGestureMonitorPhone _startMonitoringWithQueue:]
v16@?0@8
CMWakeGestureManager
Class getCMWakeGestureManagerClass(void)_block_invoke
CSGestureMonitorPhone.m
void *CoreMotionLibrary(void)
CSVoiceTriggerAssetHandler
-[CSVoiceTriggerAssetHandler getVoiceTriggerAssetWithEndpointId:completion:]
CSVoiceTriggerAssetHandler.m
CSAudioSessionController Queue
-[CSAudioSessionController dealloc]
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController _createXPCClientConnectionIfNeeded]
-[CSAudioSessionController _startMonitoring]
-[CSAudioSessionController _stopMonitoring]
-[CSAudioSessionController _registerInterruptionNotification]
-[CSAudioSessionController _registerAudioRouteChangeNotification]
-[CSAudioSessionController _handleInterruption:]_block_invoke
-[CSAudioSessionController _mediaServicesWereLost:]_block_invoke
-[CSAudioSessionController _mediaServicesWereReset:]_block_invoke
-[CSAudioSessionController _audioRouteChanged:]_block_invoke
-[CSAudioSessionController _teardownXPCClientIfNeeded]
-[CSAudioSessionController CSXPCClient:didDisconnect:]_block_invoke
-[CSAudioSessionController coreSpeechDaemonStateMonitor:didReceiveStateChanged:]_block_invoke
com.apple.siri.SiriDebug.SpeakerVoiceGradingTrigger
com.apple.siri.SiriDebug.RemoteNearMissGradingTrigger
com.apple.siri.SiriDebug.VoiceProfileAddedTrigger
com.apple.siri.SiriDebug.VoiceProfileSyncTrigger
com.apple.siri.SiriDebug.FeedbackBanner.NearMiss.Notify
com.apple.siri.SiriDebug.FeedbackBanner.Rejected.Notify
com.apple.siri.SiriDebug
+[CSSiriDebugConnection launchSiriDebugAppWithMessage:]_block_invoke
v24@?0@"AFSiriResponse"8@"NSError"16
triggeredPhrase
AttSiri
AttSiriJS
AttSiriCC
AttSiriHS
mitigationModelConfigFile
defaultAFTMValue
nldaConfigFile
allowKeywordFile
allowKeywordCount
useSpkrId
ouresConfig.json
nldaConfig.json
allowList.txt
CSMediaPlayingMonitor queue
-[CSMediaPlayingMonitor initializeMediaPlayingState]_block_invoke_2
v12@?0I8
-[CSMediaPlayingMonitor _startMonitoringWithQueue:]
-[CSMediaPlayingMonitor _stopMonitoring]
-[CSMediaPlayingMonitor _notePossiblePlayPausedStateChange:]
PLAYING
NOT PLAYING
audioURL : %@, numberOfChannels : %lu, scaleFactor: %f
announcemessage
Audio/Video
Alarm
CSVolumeMonitor queue
-[CSVolumeMonitor _startMonitoringWithQueue:]
-[CSVolumeMonitor fetchVolumeFromAVSystemControllerForAudioCategory:]_block_invoke
-[CSVolumeMonitor systemControllerDied:]
-[CSVolumeMonitor startObservingSystemVolumes]
-[CSVolumeMonitor _startObservingSystemControllerLifecycle]
CSTimerMonitor queue
-[CSTimerMonitor _startMonitoringWithQueue:]
-[CSTimerMonitor _stopMonitoring]
CSAlarmMonitor queue
-[CSAlarmMonitor _startMonitoringWithQueue:]
-[CSAlarmMonitor _stopMonitoring]
-[CSAudioStreamHolding dealloc]
+[CSUserIdentityClassifier pickTopScoringProfileIdFromScores:]
+[CSUserIdentityClassifier classifyUserIdentityFor:withScores:withAsset:]
Confident
Known
Unknown
Unsure1
UnsureN
+[CSUserIdentityClassifier stringFromClassificationCategory:]
v16@?0@"NSError"8
-[CSAttSiriServiceClient init]_block_invoke
-[CSAttSiriServiceClient init]
-[CSAttSiriServiceClient startAttendingWithContext:]
com.apple.corespeech.corespeechd.attsiri.service
-[CSAttSiriServiceClient _setupAttSiriSvcXpcConnection]_block_invoke
-[CSAttSiriServiceClient attSiriDidDetectAttendingTrigger:]
-[CSAttSiriServiceClient attSiriAttendingTimeoutTriggered]
-[CSAttSiriServiceClient attSiriAttendingFailed]
firstPassTriggerSource
ApplicationProcessor
Remora
CSPreMyriadCoordinator Queue
-[CSPreMyriadCoordinator _clearPendingRemoraVoiceTrigger]
-[CSPreMyriadCoordinator handlePendingRemoraVoiceTriggerIfNeeded]
-[CSPreMyriadCoordinator handlePendingRemoraVoiceTriggerIfNeeded]_block_invoke
-[CSPreMyriadCoordinator _clearPendingBuiltInVoiceTrigger]
-[CSPreMyriadCoordinator handlePendingBuiltInVoiceTriggerIfNeeded]
-[CSPreMyriadCoordinator handlePendingBuiltInVoiceTriggerIfNeeded]_block_invoke
v32@?0@"NSString"8@"CSPreMyriadVoiceTriggerMetaData"16^B24
-[CSPreMyriadCoordinator secondPassDidStopForClient:deviceId:]
-[CSPreMyriadCoordinator secondPassDidStartForClient:deviceId:withFirstPassEstimate:]
CSAudioInjectionHearstEngine
-[CSAudioInjectionHearstEngine dealloc]
v20@?0B8@"NSError"12
-[CSAudioRecordContext(AVVC) avvcContextSettings]
voiceTriggerInfo
route
source
siriVolume.json
smartSiriVolume
noiseLevelChannelBitset
LKFSChannelBitset
DistanceChannelBitset
energyBufferSize
noiseLowerPercentile
noiseUpperPercentile
LKFSLowerPercentile
LKFSUpperPercentile
noiseTimeConstant
noiseMicSensitivityOffset
noiseMicSensitivityOffsetDeviceSimple
LKFSTimeConstant
LKFSMicSensitivityOffset
noiseTTSMappingInputRangeLow
noiseTTSMappingInputRangeHigh
noiseTTSMappingOutputRangeLow
noiseTTSMappingOutputRangeHigh
LKFSTTSMappingInputRangeLow
LKFSTTSMappingInputRangeHigh
LKFSTTSMappingOutputRangeLow
LKFSTTSMappingOutputRangeHigh
userOffsetInputRangeLow
userOffsetInputRangeHigh
userOffsetOutputRangeLow
userOffsetOutputRangeHigh
TTSVolumeLowerLimitDB
TTSVolumeUpperLimitDB
noiseWeight
SSVCAMaxFrameSize
SSVCAVoiceTriggerBasedTTSValidForSeconds
SSVCASmartSiriVolumeUnsyncedMetricLogsToRetain
SSVCASmartSiriVolumeSyncedMetricLogsToRetain
SSVCAVoiceTriggerInitialSilenceDurationSeconds
SSVCADistanceInputBufferDurationSeconds
SSVCAListenPollingIntervalAtStartInSeconds
SSVCADefaultZeroFloatingPointValue
SSVCAAnnouncementStatusFetchTimeoutMs
SSVCADefaultOutputTTSVolume
SSVCANoiseActivityCountThreshold
SSVCASpeakerDistanceFarBoostFactor
SSVCASpeakerDistanceMidBoostFactor
SSVCASpeakerDistanceNearBoostFactor
SSVCADistanceModelConfidenceThreshold
SSVCAMinimumLinearSoundLevel
SSVCAMaximumLinearSoundLevel
SSVCALinearToDecibelConstantMultiplier
SSVCADecibelToLinearLogBase
SSVCASignalToSigmoidNoiseDilationFactor
SSVCASignalToSigmoidMusicDilationFactorDeviceDefault
SSVCASignalToSigmoidMusicDilationFactorDeviceSimple
SSVCASignalToSigmoidMusicDilationFactorDeviceSimple2
SSVCASignalToSigmoidSpeechDilationFactor
SSVCASignalToSigmoidNoiseVSpread
SSVCASignalToSigmoidMusicVSpreadDeviceDefault
SSVCASignalToSigmoidMusicVSpreadDeviceSimple
SSVCASignalToSigmoidMusicVSpreadDeviceSimple2
SSVCASignalToSigmoidSpeechVSpread
SSVCASignalToSigmoidNoiseVOffset
SSVCASignalToSigmoidMusicVOffsetDeviceDefault
SSVCASignalToSigmoidMusicVOffsetDeviceSimple
SSVCASignalToSigmoidMusicVOffsetDeviceSimple2
SSVCASignalToSigmoidSpeechVOffset
SSVCASignalToSigmoidNoiseHOffset
SSVCASignalToSigmoidMusicHOffsetDeviceDefault
SSVCASignalToSigmoidMusicHOffsetDeviceSimple
SSVCASignalToSigmoidMusicHOffsetDeviceSimple2
SSVCASignalToSigmoidSpeechHOffset
SSVCASignalToSigmoidMusicSteepnessDeviceDefault
SSVCASignalToSigmoidMusicSteepnessDeviceSimple
SSVCASignalToSigmoidMusicSteepnessDeviceSimple2
SSVCASignalToSigmoidNoiseSteepness
SSVCASignalToSigmoidSpeechSteepness
SSVCADBToTTSMinimumOutput
SSVCADBToTTSMaximumOutput
SSVCADBToTTSTransitionPoint
SSVCADBToTTSPreTransitionOffset
SSVCADBToTTSPreTransitionMultiplier
SSVCADBToTTSPostTransitionOffset
SSVCADBToTTSPostTransitionDC
SSVCADBToTTSPostTransitionMultiplier
SSVCAMinimumDistanceUpdateWaitPeriodSeconds
SSVCANoiseActivityThreshold
SSVCANoiseResultsBufferSize
SSVCAMusicResultsBufferSize
SSVCADefaultSpeechStrength
SSVCADefaultMusicStrength
SSVCANoiseActivityHistoricalSampleCount
SSVCADspCoefsCount
SSVCADspNumStages
SSVCADistanceResultsBufferSize
SSVCAExponentialDistanceHistoryDegradationFactor
SSVCADistanceResultSampleCountTolerance
SSVCAMusicHistoricalSamplesInSeconds
SSVCADeviceSimpleOutputMinTargetDB
SSVCADeviceSimpleOutputMaxTargetDB
SSVCADeviceSimpleOutputSlope
SSVCADeviceSimple2OutputSlope
SSVCADeviceSimpleMinTargetDB
SSVCADeviceSimpleMaxTargetDB
SSVCADeviceSimpleDBToSystemVolSlope
SSVCADeviceSimpleMicSensitivityOffset
SSVCADeviceSimplePreTriggerSilenceSampleCount
SSVCADeviceSimple2OutputMinTargetDB
SSVCADeviceSimple2OutputMaxTargetDB
SSVCAMinTTSSystemVolume
SSVCAMaxTTSSystemVolume
SSVCAMinTTSSystemVolumeSimple2
SSVCAMaxTTSSystemVolumeSimple2
SSVCAUserIntentValidForSeconds
SSVCAUserIntentVolumeIncreaseFactor
SSVCAUserIntentVolumeDecreaseFactor
SSVCAUserIntentPermanentOffsetFactorDelta
SSVCAUserIntentPermanentOffsetFactorLowerBound
SSVCAUserIntentPermanentOffsetFactorUpperBound
SSVCADeviceSimpleMinTTSVolume
SSVCADeviceSimpleMaxTTSVolume
SSVCADeviceDefaultASVOffMinTTSVolume
SSVCADeviceSimpleASVOffMinTTSVolume
SSVCADeviceSimple2ASVOffMinTTSVolume
SSVCADeviceDefaultMicSensitivityOffset
SSVCAVolumeHalfLifeSeconds
SSVCAHistoricalVolumeBufferSize
SSVCAMaximumCompensatedSpeechLevelNearField
SSVCADeviceDefaultDropInCallAnnouncementMinTTSVolume
SSVCADeviceSimpleDropInCallAnnouncementMinTTSVolume
SSVCADeviceSimple2DropInCallAnnouncementMinTTSVolume
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicDilationFactorDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicVSpreadDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicVOffsetDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicHOffsetDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicSteepnessDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCADeviceSimpleASVOffMinTTSVolume]
-[CSAsset(SmartSiriVolume) _getNumberFromASVDictionaryForKey:category:default:]
recordDeviceInfo
playbackRoute
playbackDeviceTypeList
%@ {recordDeviceInfo = %@, playbackRoute = %@, playbackDevices = %@
-[CSSpeakerRecognitionProxy initWithDelegate:]
-[CSSpeakerRecognitionProxy startXPCConnection]
-[CSSpeakerRecognitionProxy invalidateXPCConnection]
-[CSSpeakerRecognitionProxy didReceiveSpeakerRecognitionScoreCard:]
-[CSSpeakerRecognitionProxy didFinishSpeakerRecognition:]
CSVoiceTriggerXPCService Queue
-[CSVoiceTriggerXPCService enableVoiceTrigger:withAssertion:xpcClient:]_block_invoke
-[CSVoiceTriggerXPCService setPhraseSpotterBypassing:timeout:xpcClient:]_block_invoke
-[CSVoiceTriggerXPCService setRaiseToSpeakBypassing:timeout:xpcClient:]_block_invoke
-[CSVoiceTriggerXPCService notifyVoiceTriggeredSiriSessionCancelledWithXpcClient:]_block_invoke
-[CSVoiceTriggerXPCService fetchVoiceTriggerDailyStats]_block_invoke
-[CSVoiceTriggerXPCService _createXPCClientConnectionIfNeeded:]
-[CSVoiceTriggerXPCService voiceTriggerXPCClient:didDisconnect:]_block_invoke
-[CSVoiceTriggerXPCService _teardownXPCClientIfNeeded]
v12@?0i8
-[CSVoiceTriggerAssetDownloadMonitor _startMonitoringWithQueue:]
-[CSVoiceTriggerAssetDownloadMonitor _stopMonitoring]
-[CSVoiceTriggerAssetDownloadMonitor _didInstalledNewVoiceTriggerAsset]
com.apple.MobileAsset.VoiceTriggerAssets.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsIPad.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerHSAssetsIPad.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsWatch.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerHSAssetsWatch.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsMarsh.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsMac.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsTV.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerHSAssets.ma.new-asset-installed
Languages
Footprint
Premium
-[CSAudioPreprocessor resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:]
-[CSAudioPreprocessor flush]
ZeroFilterMetrics
-[CSAudioPreprocessor _fetchCurrentMetrics]
BeepCancellerMetrics
-[CSOtherAppRecordingStateMonitor handleOtherAppRecordingStateChange:]
-[CSOtherAppRecordingStateMonitor _systemControllerDied:]
First attempt with Error in connecting with CSBenchmarkService: 
Error in making synchronous call of CSBenchmarkService: 
com.apple.corespeech.benchmark.xpc
+[CSBenchmarkService pingpong:completion:]_block_invoke
TEST
v16@?0@"NSString"8
+[CSBenchmarkService pingpong:completion:]
+[CSBenchmarkService runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:]_block_invoke
v32@?0@"NSError"8d16q24
+[CSBenchmarkService runVTSecondPassModelWithConfig:locale:withUrl:completion:]_block_invoke
+[CSBenchmarkService runOSDAnalyzerWithConfig:withUrl:completion:]_block_invoke
+[CSBenchmarkService runODLDModelWithConfig:locale:inputText:completion:]_block_invoke
+[CSBenchmarkService runNovDetectorWithConfig:configRoot:withUrl:completion:]_block_invoke
+[CSBenchmarkService runAudioInjectionOnly:completion:]_block_invoke
set option : allowVoiceTriggerAssetsDownload ? %@;           allowEndpointAssetDownload ? %@;           allowLanguageDetectorAssetDownload ? %@;           allowAdBlockerAssetDownload ? %@;           allowSpeakerRecognitionAssetDownload ? %@
com.apple.assistant
Siri Global
 - %@
CSKeychainValueForAccountAndKey
B8@?0
-[CSSmartSiriVolumeEnablePolicyHomePod _addSmartSiriVolumeEnabledConditions]_block_invoke
-[CSContinuousAudioFingerprintEnabledPolicyHomePod _addContinousAudioFingerprintEnabledConditions]_block_invoke
CSBluetoothManager Queue
-[CSBluetoothManager getBTLocalDeviceWithCompletion:]
-[CSBluetoothManager getBTLocalDeviceWithCompletion:]_block_invoke
v16@?0^{BTLocalDeviceImpl=}8
-[CSBluetoothManager _getConnectedBluetoothDeviceAddressesFromLocalDevice:]
-[CSBluetoothManager _getAddressWithBTDevice:]
-[CSBluetoothManager _getWirelessSplitterInfoFromLocalDevice:]
-[CSBluetoothManager _detachBluetoothSession]
-[CSBluetoothManager _attachBluetoothSession]
CSBluetoothManager
-[CSBluetoothManager _sessionAttached:result:]
-[CSBluetoothManager _sessionDetached:]
-[CSBluetoothManager _sessionTerminated:]
-[CSBluetoothManager _setUpLocalDevice]
HID event callback queue
cancelled device
Created HID device successfully
Error : Failed in creating device
-[CSHostLauncherDarwin wakeHostForVoiceTrigger]
ReportDescriptor
RequestTimeout
HIDRelaySupport
HIDRelayUSBInterface
SiriHIDDevice
CSSiriAssertionMonitor queue
-[CSSiriAssertionMonitor init]
-[CSSiriAssertionMonitor _stopMonitoring]
-[CSSiriAssertionMonitor enableAssertionReceived]_block_invoke
-[CSSiriAssertionMonitor disableAssertionReceived]_block_invoke
com.apple.corespeech.CSAccessorySiriClientBehaviourMonitor
-[CSAccessorySiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:forAccessory:]_block_invoke
-[CSAccessorySiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAccessory:]_block_invoke
-[CSAccessorySiriClientBehaviorMonitor notifyWillStopStream:reason:forAccessory:]_block_invoke
-[CSAccessorySiriClientBehaviorMonitor notifyDidStopStream:reason:withEventUUID:forAccessory:]_block_invoke
-[CSSpeakerRecognitionAssetDownloadMonitor _startMonitoringWithQueue:]
-[CSSpeakerRecognitionAssetDownloadMonitor _stopMonitoring]
-[CSSpeakerRecognitionAssetDownloadMonitor _didInstalledNewAsset]
-[CSSpeakerRecognitionAssetDownloadMonitor trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
com.apple.MobileAsset.SpeakerRecognitionAssets.ma.new-asset-installed
CSAudioFileReader Queue
-[CSAudioFileReader initWithURL:]
-[CSAudioFileReader prepareRecording:]
-[CSAudioFileReader startRecording]
-[CSAudioFileReader _readAudioBufferAndFeed]
-[CSAudioFileReader stopRecording]
-[CSAdBlockerAssetDownloadMonitor _startMonitoringWithQueue:]
-[CSAdBlockerAssetDownloadMonitor _stopMonitoring]
-[CSAdBlockerAssetDownloadMonitor _didInstalledNewAdBlockerAsset]
-[CSAdBlockerAssetDownloadMonitor trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
com.apple.MobileAsset.AdBlockerAssets.ma.new-asset-installed
CSAudioRouteChangeMonitorImplWatch queue
-[CSAudioRouteChangeMonitorImplWatch activeAudioRouteDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImplWatch _startMonitoringWithQueue:]
-[CSAudioRouteChangeMonitorImplWatch _stopMonitoring]
-[CSAudioRouteChangeMonitorImplWatch _notifyHearstRoutedState:]
-[CSAudioRouteChangeMonitorImplWatch _notifySiriInputSourceOutOfBandState:]
-[CSAudioRouteChangeMonitorImplWatch _systemControllerDied:]
-[CSAudioSampleRateConverter _createSampleRateConverterWithInASBD:outASBD:]
CSAudioSampleRateConverter.m
Too many buffers
i32@?0^I8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16^^{AudioStreamPacketDescription}24
-[CSAudioSampleRateConverter convertSampleRateOfBuffer:]
CSLanguageDetectorAssetMonitor
v24@?0@"NSArray"8@"NSError"16
-[CSLanguageDetectorAssetMonitor startMonitor]_block_invoke
en-US
-[CSLanguageDetectorAssetMonitor _supportedLocale:]_block_invoke
v24@?0@"CSAsset"8@"NSError"16
com.apple.MobileAsset.LanguageDetectorAssets.ma.new-asset-installed
-[CSSiriSpeechRecordingContext dealloc]
v24@?0@"NSURL"8@"NSError"16
%@ (sessionUUID = %@)
-[CSSiriSpeechRecordingContext initWithSessionUUID:turnIdentifier:]
com.apple.assistant.request.speech-context
-[CSSiriSpeechRecordingContext becomeCurrent]
-[CSSiriSpeechRecordingContext resignCurrent]
-[CSSiriSpeechRecordingContext updateStartSpeechId:]
-[CSSiriSpeechRecordingContext updateSelectedResultCandidateId:]
-[CSSiriSpeechRecordingContext updateAccessToRecordedAudioForVoiceIdentificationTraining:forResultCandidateId:sharedUserId:]
-[CSSiriSpeechRecordingContext getAudioRecordRouteAndDeviceIdentificationWithCompletion:]_block_invoke
-[CSSiriSpeechRecordingContext acquireRecordedAudioWithHandler:]
-[CSSiriSpeechRecordingContext acquireRecordedAudioWithHandler:]_block_invoke_2
v16@?0q8
-[CSSiriSpeechRecordingContext updateAudioRecordContext:]
-[CSSiriSpeechRecordingContext updateAudioRecordDeviceInfo:]
-[CSSiriSpeechRecordingContext updateVoiceTriggerInfo:]
-[CSSiriSpeechRecordingContext updateRecordingInfo:]
-[CSSiriSpeechRecordingContext updateRecordingSettings:]
-[CSSiriSpeechRecordingContext willPrepareAndStartRecordingWithAudioActivationInfo:]
Start Recording
sessionUUID
v16@?0@"<AFAssertionContextMutating>"8
-[CSSiriSpeechRecordingContext willPrepareAndStartRecordingWithAudioActivationInfo:]_block_invoke
v24@?0@"AFAssertionContext"8@"NSError"16
-[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]
Two Shot Detection
-[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]_block_invoke_2
-[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]_block_invoke
-[CSSiriSpeechRecordingContext willStopRecordingAtHostTime:]
Stop Recording
-[CSSiriSpeechRecordingContext didStopRecordingWithError:]
-[CSSiriSpeechRecordingContext relinquishAudioSessionAssertionsWithContext:]
-[CSSiriSpeechRecordingContext relinquishAudioSessionAssertionsWithError:]
-[CSSiriSpeechRecordingContext beginRecordingAudioWithAudioStreamBasicDescription:]
-[CSSiriSpeechRecordingContext endRecordingAudio]
-[CSSiriSpeechRecordingContext endRecordingAudio]_block_invoke_2
-[CSSiriSpeechRecordingContext endRecordingAudio]_block_invoke
%@.wav
@"NSString"8@?0
-[CSSiriSpeechRecordingContext _finalizeAudioFileWriterWithCompletion:]
v32@?0@"NSFileHandle"8@"NSURL"16@"NSError"24
-[CSSiriSpeechRecordingContext instrumentSiriCueForAlertType:]_block_invoke
-[CSSiriSpeechRecordingContext emitRequestLinkEventForMHUUID:]
-[CSSiriSpeechRecordingContext _didBecomeCurrent]
-[CSSiriSpeechRecordingContext _didResignCurrent]
Donating recorded audio to CoreSpeech
-[CSSiriSpeechRecordingContext _didResignCurrent]_block_invoke_2
v12@?0B8
-[CSSiriSpeechRecordingContext _donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:]_block_invoke
ALLOWED
DENIED
-[CSSiriSpeechRecordingContext _donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:]_block_invoke_2
-[CSSiriSpeechRecordingContext _removeRecordedAudio]
com.apple.CoreSpeech.Connection.Listener
-[CSSmartSiriVolumeClient init]
-[CSSmartSiriVolumeClient getVolumeForTTSType:withContext:]_block_invoke
v24@?0@"NSError"8@"CSSmartSiriVolumeEstimate"16
-[CSSmartSiriVolumeClient setSmartSiriVolumePercentage:]_block_invoke
-[CSSmartSiriVolumeClient setSmartSiriVolumeDirection:]_block_invoke
-[CSSmartSiriVolumeClient setPermanentVolumeOffsetWithDirection:]_block_invoke
-[CSSmartSiriVolumeClient didTTSVolumeChangeForReason:]_block_invoke
-[CSSmartSiriVolumeClient _getRemoteServiceProxyObject]_block_invoke
-[CSSmartSiriVolumeClient _getRemoteServiceProxyObject]
com.apple.corespeech.corespeechd.ssv.service
-[CSSmartSiriVolumeClient _createClientConnection]_block_invoke
CSAudioInjectionProvider
ATVRemoteInput
BuiltInMic
-[CSAudioInjectionProvider dealloc]
-[CSAudioInjectionProvider stop]
-[CSAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]
-[CSAudioInjectionProvider stopAudioStreamWithRecordDeviceIndicator:error:]
BuiltInSpeaker
-[NSString(XPCObject) _cs_initWithXPCObject:]
RemoteVAD Align Queue
-[CSOpportuneSpeakListener startListenWithOption:completion:]
-[CSOpportuneSpeakListener _startRequestWithCompletion:]_block_invoke
-[CSOpportuneSpeakListener _startRequestWithCompletion:]
-[CSOpportuneSpeakListener stopListenWithStateReset:completion:]_block_invoke
-[CSOpportuneSpeakListener stopListenWithStateReset:completion:]
-[CSOpportuneSpeakListener audioStreamProvider:audioBufferAvailable:]
-[CSOpportuneSpeakListener spgEndpointAnalyzer:hasSilenceScoreEstimate:clientProcessedAudioTimeMS:]
com.apple.corespeech.corespeechd.voiceid.xpc
v16@?0@"NSObject<OS_xpc_object>"8
-[CSVoiceIdXPCClient _handleListenerEvent:]
-[CSVoiceIdXPCClient _handleListenerError:]
utterancePath
voiceTriggerEventInfo
otherCtxt
audioRecordCtx
-[CSVoiceIdXPCClient _notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:]
type
body
result
resultErrorDomain
resultErrorCode
-[CSShadowMicScoreCreator calculateShadowMicScore]
-[CSBluetoothWirelessSplitterMonitorImpIOS updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
CSBluetoothWirelessSplitterMonitorImpIOS.m
-[CSBluetoothWirelessSplitterMonitorImpIOS splitterState:]_block_invoke
v16@?0@"CSBluetoothWirelessSplitterInfo"8
-[CSBluetoothWirelessSplitterMonitorImpIOS _startMonitoringWithQueue:]_block_invoke
-[CSBluetoothWirelessSplitterMonitorImpIOS _startMonitoringWithQueue:]
-[CSBluetoothWirelessSplitterMonitorImpIOS _stopMonitoring]
v20@?0Q8B16
com.apple.bluetooth.WirelessSplitterOn
NviError
-[CSNNVADEndpointAnalyzer init]
-[CSNNVADEndpointAnalyzer preheat]
-[CSNNVADEndpointAnalyzer reset]
-[CSNNVADEndpointAnalyzer processAudioSamplesAsynchronously:]
-[CSNNVADEndpointAnalyzer recordingStoppedForReason:]
-[CSNNVADEndpointAnalyzer stopEndpointer]
-[CSNNVADEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]
com.apple.corespeech.corespeechd.activation.xpc
-[CSActivationXPCClient dealloc]
-[CSActivationXPCClient _handleListenerEvent:]
-[CSActivationXPCClient _handleListenerError:]
-[CSActivationXPCClient notifyActivationEvent:completion:]
event
modelHash
dictationPriors
earLoggingInfo
interactionId
HistBufferSizeinSecs
NumLeadingFrames
MinSpeechFrames
NumLatestLanguages
CSLanguageDetector
dummy-version
-[CSLanguageDetector _startMonitorLanguageDetectorAssetDownload]
-[CSLanguageDetector _setupLanguageDetectorWithOption:]
-[CSLanguageDetector resetForNewRequest:]_block_invoke_3
-[CSLanguageDetector cancelCurrentRequest]_block_invoke
-[CSLanguageDetector setInteractionIDforCurrentRequest:]_block_invoke
-[CSLanguageDetector _initializeStartOfSpeechDetector:samplingRate:]
-[CSLanguageDetector _constructLangPriors]
-[CSLanguageDetector _setNumLatestLangFromConfigFile:]
CSLanguageDetector.m
Unexpected!! Received dir for: %@
-[CSLanguageDetector _readJsonDictionaryAt:]
-[CSLanguageDetector _logSoSResult:toPath:]
-[CSLanguageDetector _logLanguageDetectorMetricsForLoggingInfo:]
-[CSLanguageDetector languageDetector:result:]
-[CSLanguageDetector languageDetectorDidCompleteProcessing:loggingInfo:]_block_invoke
SpgRegportedStartSampleId
EffectiveStartSampleId
-result.json
-[CSLanguageDetector startOfSpeechDetector:foundStartSampleAt:]_block_invoke
-result.wav
+[CSUtils(LanguageCode) getSiriLanguageWithFallback:]
+[CSUtils(LanguageCode) getSiriLanguageWithEndpointId:fallbackLanguage:]
-[CSBluetoothWirelessSplitterMonitorImplDarwin updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
-[CSBluetoothWirelessSplitterMonitorImplDarwin splitterState]
-[CSBluetoothWirelessSplitterMonitorImplDarwin _startMonitoringWithQueue:]
-[CSBluetoothWirelessSplitterMonitorImplDarwin _stopMonitoring]
CSStopRecordingReasonDefault
CSStopRecordingForClientEndpoint
CSStopRecordingForServerEndpoint
CSStopRecordingForReleaseAudioSession
CSStopRecordingForRequestCancellation
, %llu
, %f}
triggerEndMachTime
-[CSMyriadSelfTriggerCoordinator selfTriggerDetector:didDetectSelfTrigger:]
com.apple.siri.corespeech.selftrigger
FirstPktLatency
TrailingPktLatency
TrailingPktSpeechLatency
-[CSEndpointLatencyInfo addPktInfoWithTimestamp:arrivalTimestamp:currentMachTime:]
-[CSEndpointLatencyInfo report]
-[CSCommandControlStreamEventMonitor isStreaming]
CSAVVCRecordingClientMonitor Queue
-[CSAVVCRecordingClientMonitor _startMonitoringWithQueue:]_block_invoke_2
v24@?0Q8@"NSError"16
v20@?0B8Q12
-[CSAVVCRecordingClientMonitor _startMonitoringWithQueue:]
-[CSAVVCRecordingClientMonitor _stopMonitoring]
-[CSAVVCRecordingClientMonitor CSAudioServerCrashMonitorDidReceiveServerCrash:]
-[CSAVVCRecordingClientMonitor _didReceiveAVVCRecordingClientNumberChange:]
CSSiriAudioFileWriterErrorDomain
CSSiriAudioFileWriterExtAudioFileErrorDomain
SavedAudioFile
CSSiriAudioFileWriter.m
Invalid parameter not satisfying: %@
type != AFAudioFileTypeNone
CSSiriAudioFileWriterQueue
-[CSSiriAudioFileWriter _initWithType:pathGenerator:xorFileHandle:priority:]_block_invoke
path
-[CSSiriAudioFileWriter _close]
-[CSSiriAudioFileWriter _delete]
-[CSSiriAudioFileWriter configureWithAudioStreamBasicDescription:]
AudioFile Already configured
-[CSSiriAudioFileWriter configureWithAudioStreamBasicDescription:]_block_invoke
-[CSSiriAudioFileWriter appendAudioData:]_block_invoke
-[CSSiriAudioFileWriter flushWithCompletion:]_block_invoke
_AudioStreamBasicDescriptionForAFAudioFileType
com.apple.corespeech.corespeechservices
com.apple.corespeech.xpc
+[CSCoreSpeechServices installedVoiceTriggerAssetForLanguageCode:completion:]_block_invoke
reason
CoreSpeechXPC service invalidated
v32@?0@"NSString"8@"NSString"16@"NSError"24
+[CSCoreSpeechServices fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]_block_invoke
v24@?0@"NSString"8@"NSError"16
+[CSCoreSpeechServices getCurrentVoiceTriggerLocaleWithEndpointId:completion:]
+[CSCoreSpeechServices getCurrentVoiceTriggerLocaleWithEndpointId:completion:]_block_invoke
+[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:endpointId:downloadedModels:preinstalledModels:completion:]_block_invoke
v32@?0@"CSVoiceTriggerRTModel"8@"CSVoiceTriggerRTModel"16@"NSError"24
+[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:downloadedModels:preinstalledModels:completion:]_block_invoke
+[CSCoreSpeechServices voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]_block_invoke
+[CSCoreSpeechServices voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]
+[CSCoreSpeechServices requestUpdatedSATAudio]_block_invoke
+[CSCoreSpeechServices getFirstPassRunningMode]_block_invoke
CSHangUpEnabledMonitor queue
-[CSHangUpEnabledMonitor _checkCanUseVoiceTriggerDuringCallEnabled]
-[CSHangUpEnabledMonitor _voiceTriggerDuringCallEnabledDidChange]_block_invoke
+[CSAudioStreamRequest defaultRequestWithContext:]
+[CSAudioStreamRequest requestForLpcmRecordSettingsWithContext:]
+[CSAudioStreamRequest requestForOpusRecordSettingsWithContext:]
+[CSAudioStreamRequest requestForSpeexRecordSettingsWithContext:]
[requiresHistoricalBuffer = %@]
[useCustomizedRecordSettings = %@]
[lpcmIsFloat = %@]
[isSiri = %@]
[sampleRate = %lf]
[numberOfChannels = %lu]
requiresHistoricalBuffer
useCustomizedRecordSettings
audioFormat
sampleRate
lpcmBitDepth
lpcmIsFloat
NumberOfChannels
encoderBitRate
isSiri
recordContext
CSSpeechManager Asset Query Queue
-[CSSpeechManager startManager]
-[CSSpeechManager registerSpeechController:]
-[CSSpeechManager registerSiriClientProxy:]
v32@?0@"NSNumber"8@"CSAudioProvider"16^B24
-[CSSpeechManager audioProviderWithContext:error:]
-[CSSpeechManager audioProviderWithContext:error:]_block_invoke
v32@?0Q8q16@"NSError"24
-[CSSpeechManager audioProviderWithStreamID:]_block_invoke
-[CSSpeechManager _getAudioRecorderWithError:]
-[CSSpeechManager audioProviderInvalidated:streamHandleId:]_block_invoke
-[CSSpeechManager audioRecorderWillBeDestroyed:]_block_invoke
-[CSSpeechManager voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:]
-[CSSpeechManager _handleClearLoggingFileTimer]
-[CSSpeechManager _createClearLoggingFileTimer]
-[CSSpeechManager _startClearLoggingFilesTimer]
-[CSSpeechEndHostTimeEstimator notifyTrailingSilenceDurationAtEndpoint:]
-[CSSpeechEndHostTimeEstimator estimatedSpeechEndHostTime]
CSCommandControlListener
-[CSCommandControlListener startListenWithOption:completion:]
-[CSCommandControlListener _startRequestWithCompletion:]_block_invoke
-[CSCommandControlListener _startRequestWithCompletion:]
-[CSCommandControlListener stopListenWithCompletion:]
-[CSCommandControlListener stopListenWithCompletion:]_block_invoke
-[CSCommandControlListener audioStreamProvider:didStopStreamUnexpectly:]_block_invoke
-[CSCommandControlListener CSXPCClient:didDisconnect:]_block_invoke
FlexKwdSpotter
recognizer_flexKwd.json
flexKwdConfigFile
flexKwd.Thresholds
flexKwdThresholdsFile
Serial CSAssetManager queue
-[CSAssetManager initWithDownloadOption:]
-[CSAssetManager initWithDownloadOption:]_block_invoke
ENABLED
DISABLED
-[CSAssetManager setAssetDownloadingOption:]_block_invoke
-[CSAssetManager _fetchRemoteMetaData]
-[CSAssetManager _canFetchRemoteAsset:]
-[CSAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSAssetManager _createPeriodicalDownloadTimer]
-[CSAssetManager _createPeriodicalDownloadTimer]_block_invoke
-[CSAssetManager _startPeriodicalDownload]
-[CSAssetManager _stopPeriodicalDownload]
RecordedAudio
TrimmedAudio
com.apple.corespeech.endpointer.xpc.client
com.apple.corespeech.endpointer.xpc.connection
com.apple.corespeech.endpointer.xpc.delegate
-[CSEndpointerXPCClient endpointerModelVersion]_block_invoke_2
v24@?0@"NSError"8@"NSString"16
-[CSEndpointerXPCClient endpointerModelVersion]
-[CSEndpointerXPCClient elapsedTimeWithNoSpeech]_block_invoke_2
v24@?0@"NSError"8d16
-[CSEndpointerXPCClient elapsedTimeWithNoSpeech]
-[CSEndpointerXPCClient endPointAnalyzerType]_block_invoke_2
v24@?0@"NSError"8Q16
-[CSEndpointerXPCClient endPointAnalyzerType]
-[CSEndpointerXPCClient _getRemoteServiceProxyObject]
-[CSEndpointerXPCClient _getRemoteServiceProxyObject]_block_invoke
com.apple.corespeech.corespeechd.endpointer.service
-[CSEndpointerXPCClient _createClientConnection]_block_invoke
-[CSEndpointerXPCClient didDetectHardEndpointAtTime:withMetrics:]_block_invoke
vector
deque
-[NviDirectionalitySignalProvider initWithDataSource:assetsProvider:]
-[NviDirectionalitySignalProvider addDelegate:]
-[NviDirectionalitySignalProvider removeDelegate:]
-[NviDirectionalitySignalProvider startWithNviContext:didStartHandler:]
-[NviDirectionalitySignalProvider reset]
-[NviDirectionalitySignalProvider stopWithDidStopHandler:]
-[CSConnectionListener initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:queue:]
-[CSConnectionListener dealloc]
-[CSConnectionListener listener:shouldAcceptNewConnection:]
corespeech.corespeechd.xpc
-[CSConnectionListener listener:shouldAcceptNewConnection:]_block_invoke
-[CSConnectionListener notifyClientsWithBlock:]_block_invoke
-[CSConnectionListener resumeConnection]
+[CSAudioRecorderFactory audioRecorderWithQueue:error:]
triggerStartSampleCount
clientStartSampleCount
triggerFireMachTime
activeChannel
twoShotAudibleFeedbackDelay
hfpTriggerDuringPhoneCall
musicVolume
mediaPlayState
CSSpeechRecordSettingsKey_AudioSessionActiveDelay
CSSpeechRecordSettingsKey_AudioSessionActiveReason
CSSpeechRecordSettingsKey_LanguageDetectorLocales
CSSpeechRecordSettingsKey_LanguageDetectorDictationLanguages
CSSpeechRecordSettingsKey_LanguageDetectorCurrentKeyboard
CSSpeechRecordSettingsKey_LanguageDetectorWasLanguageToggled
CSSpeechRecordSettingsKey_LanguageDetectorMultilingualKeyboardLanguages
CSSpeechRecordSettingsKey_LanguageDetectorKeyboardConvoLanguagePriors
CSSpeechRecordSettingsKey_LanguageDetectorKeyboardGlobalLanguagePriors
CSSpeechRecordSettingsKey_LanguageDetectorPreviousMessageLanguage
CSSpeechRecordSettingsKey_LanguageDetectorGlobalLastKeyboardUsed
CSSpeechRecordSettingsKey_LanguageDetectorDictationLanguagePriors
CSSpeechRecordSettingsKey_LanguageDetectorConversationalMessages
CSSpeechRecordSettingsKey_disableEndpointer
CSSpeechRecordSettingsKey_DictationRequestAppName
CSSpeechRecordSettingsKey_DictationRequestAppBundleID
CSSpeechRecordSettingsKey_DictationStartSampleId
CSSpeechRecordSettingsKey_isDucking
CSSpeechRecordSettingsKey_disableLocalSpeechRecognizer
CSSpeechRecordSettingsKey_triggerEventInfo
CSSpeechRecordSettingsKey_requestMHUUID
CSSpeechRecordSettingsKey_siriSessionUUID
CSSpeechRecordSettingsKey_asrOnDevice
CSSpeechRecordSettingsKey_disablePrewarmLocalAsrAtStartRecording
CSSpeechRecordSettingsKey_shouldSkipStartRecordingAlert
CSSpeechRecordSettingsKey_hybridUODEnabled
spIdAudioProcessedDuration
spIdUnknownUserScore
spIdKnownUserScores
spIdKnownUserRawScores
spIdUserScoresVersion
spIdKnownUserProfileVersions
spIdScoreThresholdingType
spIdVTInvocationScoreThresholdingType
spIdNonVTInvocationScoreThresholdingType
SpIdScoreThreshold
spIdAssetVersion
spIdDirectionSigsArr
shouldRecordUserAudio
shouldRecordPayload
userIdentityClassification
userClassified
CSSpeechController
CSSpeechController ContextReset
com.apple.corespeech.twoShotAudibleFeedback
MediaPlayingObserverQueue
v16@?0@"NSOrderedSet"8
-[CSSpeechController initializeRecordSessionWithRecordContext:]
-[CSSpeechController startController]
-[CSSpeechController prepareRecordWithSettings:error:]
-[CSSpeechController _fetchLastTriggerInfo]
-[CSSpeechController _fetchLastTriggerInfo]_block_invoke_2
v24@?0@"NSDictionary"8@"NSDictionary"16
-[CSSpeechController _currentConfigurationSupportsDucking]
-[CSSpeechController _activateAudioSessionWithReason:delay:delayRequested:error:]_block_invoke
-[CSSpeechController _activateAudioSessionWithReason:delay:delayRequested:error:]
com.apple.corespeech.ducking
-[CSSpeechController _scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:]_block_invoke
-[CSSpeechController _scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:]
-[CSSpeechController _cancelPendingAudioSessionActivateForReason:]
-[CSSpeechController _performPendingAudioSessionActivateForReason:]
-[CSSpeechController _lazyActivateAudioSessionWithReason:error:]
-[CSSpeechController _lazyActivateAudioSessionWithReason:error:]_block_invoke
-[CSSpeechController _activateAudioSessionWithReason:error:]
-[CSSpeechController _doActivateAudioSessionWithReason:error:]
-[CSSpeechController _updateRecordContextIfNeeded:]
-[CSSpeechController setCurrentRecordContext:error:]
-[CSSpeechController preheat]
-[CSSpeechController prewarmAudioSession]
-[CSSpeechController resetAudioSession]
-[CSSpeechController reset]
-[CSSpeechController releaseAudioSession]
-[CSSpeechController releaseAudioSession:]
v32@?0@8#16@?<v@?>24
-[CSSpeechController startRecordingWithSettings:error:]
-[CSSpeechController startRecordingWithSettings:error:]_block_invoke
-[CSSpeechController startRecordingWithSettings:error:]_block_invoke_2
-[CSSpeechController _startPhaticDecision]
-[CSSpeechController _startPhaticDecision]_block_invoke
not 
-[CSSpeechController stopRecording]
-[CSSpeechController stopRecordingWithOptions:]_block_invoke_2
v16@?0Q8
-[CSSpeechController stopRecordingWithOptions:]_block_invoke
-[CSSpeechController recordRoute]
-[CSSpeechController recordDeviceInfo]
-[CSSpeechController audioDeviceInfo]
-[CSSpeechController playbackRoute]
-[CSSpeechController _didStopForReason:]
-[CSSpeechController audioStreamProvider:didStopStreamUnexpectly:]
-[CSSpeechController _audioStreamProvdider:audioBufferAvailable:]
-[CSSpeechController audioStreamProvider:audioChunkForTVAvailable:]_block_invoke
-[CSSpeechController audioStreamProvider:didHardwareConfigurationChange:]
-[CSSpeechController audioStreamProvider:didHardwareConfigurationChange:]_block_invoke
-[CSSpeechController audioSessionProvider:providerInvalidated:]_block_invoke_2
-[CSSpeechController audioSessionProvider:didChangeContext:]
-[CSSpeechController audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
-[CSSpeechController audioAlertProvidingDidFinishAlertPlayback:ofType:error:]
-[CSSpeechController audioAlertProvidingDidFinishAlertPlayback:ofType:error:]_block_invoke
-[CSSpeechController audioSessionProviderBeginInterruption:]
-[CSSpeechController audioSessionProviderBeginInterruption:]_block_invoke
-[CSSpeechController audioSessionProviderBeginInterruption:withContext:]
-[CSSpeechController audioSessionProviderBeginInterruption:withContext:]_block_invoke
-[CSSpeechController audioSessionProviderEndInterruption:]
-[CSSpeechController audioSessionProviderEndInterruption:]_block_invoke
-[CSSpeechController audioSessionProvider:willSetAudioSessionActive:]
-[CSSpeechController audioSessionProvider:willSetAudioSessionActive:]_block_invoke
-[CSSpeechController audioSessionProvider:didSetAudioSessionActive:]
-[CSSpeechController audioSessionProvider:didSetAudioSessionActive:]_block_invoke
-[CSSpeechController didTTSVolumeChange:forReason:]
-[CSSpeechController didTTSVolumeChange:forReason:]_block_invoke
-[CSSpeechController audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:]
-[CSSpeechController setAlertSoundFromURL:forType:force:]
-[CSSpeechController playAlertSoundForType:]
-[CSSpeechController playRecordStartingAlertAndResetEndpointer]
-[CSSpeechController stopEndpointer]
-[CSSpeechController setMeteringEnabled:]
-[CSSpeechController _createAudioPowerMeterIfNeeded]
-[CSSpeechController outputReferenceChannel]
-[CSSpeechController voiceTriggerInfo]
-[CSSpeechController endpointer:detectedTwoShotAtTime:]
-[CSSpeechController keywordDetectorDidDetectKeyword]_block_invoke
-[CSSpeechController _shouldRunHybridSDSDMitigation]
v20@?0B8@"NSArray"12
-[CSSpeechController _fetchAudioDecoderForTV:]
-[CSSpeechController _createAudioProviderFromXPCWithContext:]
Accounts
Speech Identifier
%c%c%c%c
none
-[CSSpeechController endpointerModelVersion]
-[CSSpeechController cancelCurrentLanguageDetectorRequest]_block_invoke
-[CSSpeechController beginWaitingForMyriad]
-[CSSpeechController endWaitingForMyriadWithDecision:]
-[CSSpeechController _setSoundPlayingState]
 NOT
-[CSSpeechController CSXPCClient:didDisconnect:]_block_invoke
-[CSSpeechController _teardownAudioProviderIfNeeded]
-[CSSpeechController _setMediaPlaybackState:isInterrupted:]
-[CSSpeechController _setAlarmIsPlaying:]
-[CSSpeechController _setTimerIsPlaying:]
-[CSSpeechController nowPlayingObserver:playbackStateDidChangeFrom:to:lastPlayingDate:]_block_invoke
-[CSSpeechController clockAlarmObserver:alarmDidFire:]_block_invoke
-[CSSpeechController clockAlarmObserver:alarmDidDismiss:]_block_invoke
-[CSSpeechController clockTimerObserver:timerDidFire:]_block_invoke
-[CSSpeechController clockTimerObserver:timerDidDismiss:]_block_invoke
com.apple.CoreSpeech.Connection.SSR.Client
com.apple.CoreSpeech.Connection.SSR
-[CSSSRXPCClient init]
-[CSSSRXPCClient _getRemoteServiceProxyObject]
-[CSSSRXPCClient _getRemoteServiceProxyObject]_block_invoke
com.apple.corespeech.corespeechd.ssr.service
-[CSSSRXPCClient _createClientConnection]_block_invoke
-[CSSSRXPCClient didReceiveSpeakerRecognitionScoreCard:]
-[CSSSRXPCClient didFinishSpeakerRecognition:]
RequestContext
DetectedToken
TriggerMachTime
TriggerAbsStartSampleId
{attendingCtx: %@, detctedToken: %@, triggerMachTime=%llu, triggerStartSampleId=%llu}
rtblobs
adkblobs
blob
majorVersion
minorVersion
signature
cert
rtlocalemap
jarvislocalemap
adklocalemap
-[CSAsset(RTModel) createRTModelWithLocale:]
-[CSAsset(RTModel) latestHearstRTModelForLocale:]
-[CSAsset(RTModel) rtModelWithAccessoryRTModelType:majorVersion:minorVersion:locale:]
-[CSAsset(RTModel) localeMapWithName:]
%02x
%@ {request = %@, options = %@, player = %@, playerItem = %@}
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _prepareWithOptions:audioSession:completion:]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _prepareWithOptions:audioSession:completion:]_block_invoke
Unable to create player item.
Unable to replace current item of player.
Timed out when waiting for player item status to change to ready to play.
status
Failed to change player item status to ready to play.
v24@?0@8@16
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
Attempted to start audio playback session when it is already active.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]_block_invoke
Audio playback session is already inactive after preparation.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]_block_invoke_2
Audio playback session is already inactive after player seek to begin.
Player failed to seek to begin.
Stopped playback.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _finalizeWithError:]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _resetPlayerItem]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased playerItemDidPlayToEndTime:]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased playerItemFailedToPlayToEndTime:]
Player item failed to play to end time.
com.apple.siri.speechmodeltraining
com.apple.corespeech.speechmodeltraining.xpc
com.apple.speech.speechmodeltraining
SpeechModelTrainingClient
v24@?0@"NSDictionary"8@"NSError"16
Assistant/SpeechPersonalizedLM
Assistant/SpeechPersonalizedLM_Fides
Received Error %@
Input directory path(%@) does not match expected path
-[CSSelfTriggerEnabledMonitorAccessory _startMonitoringWithQueue:]
Enabled
Disabled
-[CSSelfTriggerEnabledMonitorAccessory _stopMonitoring]
-[CSSelfTriggerEnabledMonitorAccessory setEnable:]
Enable
Disable
-[CSVoiceTriggerAssetHandlerDarwin _getVoiceTriggerAssetFromAssetManager:]
-[CSVoiceTriggerAssetHandlerDarwin _checkNewAssetAvailablity]_block_invoke
-[CSVoiceTriggerAssetHandlerDarwin CSRemoteAssetManagerDidDownloadNewAsset:]
-[CSVoiceTriggerAssetHandlerDarwin CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSAudioStartStreamOption(AVVC) avvcStartRecordSettingsWithAudioStreamHandleId:]
-[NviSignalProvidersController initWithAssetsProvider:dataSourceMap:signalProviderToDataSourceMap:]
-[NviSignalProvidersController dealloc]
NviSignalProvidersController.m
No DataSource found for SignalType: %@
-[NviSignalProvidersController _setupSignalProviders:]
-[NviSignalProvidersController _startDataSourcesWithContext:]
-[NviSignalProvidersController _startDataSourcesWithContext:]_block_invoke
-[NviSignalProvidersController _startSignalProvidersWithContext:]
-[NviSignalProvidersController _startSignalProvidersWithContext:]_block_invoke
-[NviSignalProvidersController _stopDataSources]_block_invoke
-[NviSignalProvidersController _stopDataSources]
-[NviSignalProvidersController _stopCurrentlyRunningSignalProviders]_block_invoke
-[NviSignalProvidersController _stopCurrentlyRunningSignalProviders]
-[NviSignalProvidersController _iterateSignalMask:withHandler:]
v16@?0@"<NviSignalProvider>"8
CSXPCClient Reply Queue
CSXPCClient connection Queue
-[CSXPCClient connect]_block_invoke
com.apple.corespeech.corespeechd.xpc
-[CSXPCClient _sendXPCClientType]
xpcClientType
-[CSXPCClient prepareAudioProviderWithContext:clientType:error:]
context
clientType
activateReason
dynamicAttribute
dictationRequestBundleId
deactivateOption
setDuckOthersOption
enableSmartRoutingConsideration
enableMiniDucking
alertType
forceSetAlert
soundPath
alertStartTime
-[CSXPCClient alertStartTime]_block_invoke
alertBehavior
setMeterEnable
channelNumber
power
-[CSXPCClient peakPowerForChannel:]_block_invoke
-[CSXPCClient averagePowerForChannel:]_block_invoke
-[CSXPCClient audioMetric]_block_invoke
audioMetric
audioStreamRequest
-[CSXPCClient audioStreamWithRequest:streamName:error:]
v24@?0@"CSAudioStream"8@"NSError"16
-[CSXPCClient audioStreamWithRequest:streamName:completion:]
-[CSXPCClient audioStreamWithRequest:streamName:completion:]_block_invoke
-[CSXPCClient prepareAudioStreamSync:request:error:]
-[CSXPCClient prepareAudioStream:request:completion:]
startAudioStreamOption
v16@?0@"NSDictionary"8
-[CSXPCClient acousticSLResultForContext:completion:]
-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke_2
acousticSLResult
-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke
-[CSXPCClient triggerInfoForContext:completion:]
rtsTriggerInfo
recordRoute
audioDeviceInfo
recordSettings
-[CSXPCClient audioStreamId]
-[CSXPCClient audioChunkFrom:to:]
-[CSXPCClient audioChunkFrom:to:channelIdx:]
-[CSXPCClient audioChunkToEndFrom:]
-[CSXPCClient audioChunkToEndFrom:channelIdx:]
-[CSXPCClient saveRecordingBufferFrom:to:toURL:]
-[CSXPCClient saveRecordingBufferToEndFrom:toURL:]
-[CSXPCClient holdAudioStreamWithDescription:timeout:]
-[CSXPCClient cancelAudioStreamHold:]
-[CSXPCClient isRecording]
-[CSXPCClient setAnnounceCallsEnabled:withStreamHandleID:]
-[CSXPCClient attachTandemStream:toPrimaryStream:completion:]
deviceID
sessionID
-[CSXPCClient audioSessionIdForDeviceId:]
sampleCount
-[CSXPCClient hostTimeFromSampleCount:]_block_invoke
replyHostTime
-[CSXPCClient hostTimeFromSampleCount:]
hostTime
-[CSXPCClient sampleCountFromHostTime:]_block_invoke
replySampleCount
-[CSXPCClient sampleCountFromHostTime:]
option
-[CSXPCClient _handleListenerEvent:]
-[CSXPCClient _handleListenerMessage:]
-[CSXPCClient _handleListenerError:]
-[CSXPCClient _handleAlertProvidingDelegateMessageBody:]
didFinishAlertPlayback
errorDomain
errorCode
-[CSXPCClient _handleSessionProvidingDelegateMessageBody:]
interruptionContext
-[CSXPCClient _handleSessionProvidingDelegateBeginInterruptionWithContext:]
willSetAudioSessionActive
didSetAudioSessionActive
streamHandleIdInvalidationflag
didChangeContextFlag
-[CSXPCClient _handleSessionInfoProvidingDelegateMessageBody:]
notificationInfo
-[CSXPCClient _handleSessionInfoProvidingDelegateInterruptionNotification:]
-[CSXPCClient _handleSessionInfoProvidingDelegateRouteChangeNotification:]
-[CSXPCClient _handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:]
-[CSXPCClient _handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:]
-[CSXPCClient _handleStreamProvidingDelegateMessageBody:]
stopReason
chunk
hardwareConfig
Serial CSEventMonitor queue
-[CSEventMonitor _startMonitoringWithQueue:]
CSEventMonitor.m
-[CSEventMonitor _stopMonitoring]
triggerScore
configVersion
languageCode
com.apple.corespeech.aopFirstPassTriggerWakeupLatency
latency
device
@"NSDictionary"8@?0
com.apple.corespeech.SecondPassWakeUp
unknown
modelVersion
firstPassSource
triggerAPWakeup
-[CSVoiceTriggerStatAggregator logFalseWakeUp:withPhrase:]
-[CSVoiceTriggerStatAggregator logTriggerLengthSampleCountStatistics:withFirstPassDeterministicTriggerLengthSampleCount:]
com.apple.exprAOPSecondPass
newTriggerLengthSampleCount
oldTriggerLengthSampleCount
sampleCountDelta
com.apple.corespeech.AudioZeroRun
duration
-[CSSmartSiriVolumeManager initWithSamplingRate:withAsset:]
-[CSSmartSiriVolumeManager CSAlarmMonitor:didReceiveAlarmChanged:]
-[CSSmartSiriVolumeManager CSTimerMonitor:didReceiveTimerChanged:]
-[CSSmartSiriVolumeManager CSVolumeMonitor:didReceiveMusicVolumeChanged:]
-[CSSmartSiriVolumeManager CSVolumeMonitor:didReceiveAlarmVolumeChanged:]
-[CSSmartSiriVolumeManager CSAutomaticVolumeEnabledMonitor:didReceiveEnabled:]
numImplicitUtt
numExplicitUtt
numFirstPassTriggersPerDay
vtStatistics
vtStatisticsFirstPassPeakScoreHS
vtStatisticsFirstPassPeakScoreJS
vtStatisticsFirstPassTriggerSource
vtStatisticsRecognizerScoreHS
vtStatisticsRecognizerScoreJS
vtStatisticsTriggerScoreHS
vtStatisticsTriggerScoreJS
vtStatisticsMitigationScore
vtStatisticsInvocationTypeId
vtStatisticsFirstPassDetectionTime
vtStatisticsRepetitionSimilarityScore
firstPassDailyMetadata
firstPassDailyMetadataConfigVersion
firstPassDailyMetadataBuildVersion
firstPassDailyMetadataHardwareSampleRate
firstPassDailyMetadataMitigationAssetVersion
isJSEnabled
-[CSAudioFileLog _closeAudioFile]
-[CSAudioFileLog startRecording]_block_invoke
-input.wav
-[CSAudioFileLog appendAudioData:]_block_invoke
-[CSAudioFileLog stopRecording]_block_invoke
Logs/CrashReporter/CoreSpeech/audio/
-[CSAudioFileLog _getOrCreateAudioLogDirectory]
/tmp
en_US_POSIX
yyyyMMdd-HHmmss
%@/%@%@%@
firstPassEndSampleCount
firstPassStartSampleCount
firstPassGoodness
totalSampleCount
vtEndTime
numSamplesFromHistoricalBuffer
[%@]
[%llu]
[%f]
BuiltInAOPVoiceTrigger
RemoteMicVoiceTrigger
RemoteMicVAD
JarvisVoiceTrigger
mediaserverdLaunched
RemoraVoiceTrigger
uuid
deviceId
activationInfo
vadScore
hosttime
com.apple.corespeech.fakeasset.rolling
-[CoreSpeechXPCFakeModelMonitor _registerForFakeAssetRollNotification]_block_invoke
-[CoreSpeechXPCFakeModelMonitor _registerForFakeAssetRollNotification]
Adaptive Siri Volume Disabled
near
medium
-[CSSmartSiriVolumeUserIntent applyLowerAndUpperBoundsToVolume:]
-[CSSmartSiriVolumeUserIntent applyLowerAndUpperBoundsToVolumeOffset:]
com.apple.MobileAsset.VoiceTriggerAssetsMac
-[CSAssetController init]
Serial CSAssetController queue
V1 Assets Clean-up queue
-[CSAssetController _cleanUpMobileAssetV1Directory]
-[CSAssetController assetOfType:language:]
-[CSAssetController allInstalledAssetsOfType:language:]
q24@?0@"MAAsset"8@"MAAsset"16
v32@?0@"MAAsset"8Q16^B24
-[CSAssetController assetOfType:language:completion:]
-[CSAssetController assetOfType:language:compatibilityVersion:completion:]
v24@?0@"MAAsset"8@"NSError"16
-[CSAssetController installedAssetOfType:language:]
-[CSAssetController installedAssetOfType:language:completion:]
-[CSAssetController _installedAssetOfType:withLanguage:]
-[CSAssetController _installedAssetOfType:query:withLanguage:completion:]_block_invoke
-[CSAssetController _findLatestInstalledAsset:]
-[CSAssetController _assetQueryForAssetType:]
-[CSAssetController _runAssetQuery:completion:]
-[CSAssetController _runAssetQuery:completion:]_block_invoke
-[CSAssetController fetchRemoteMetaOfType:allowRetry:]
-[CSAssetController fetchRemoteMetaOfType:allowRetry:]_block_invoke
v20@?0@"NSError"8B16
-[CSAssetController _fetchRemoteAssetOfType:withLanguage:completion:]
-[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]_block_invoke_2
-[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]_block_invoke
-[CSAssetController _downloadAssetCatalogForAssetType:complete:]_block_invoke
-[CSAssetController _updateFromRemoteToLocalAssets:forAssetType:completion:]
-[CSAssetController _downloadAsset:withComplete:]
v16@?0d8
-[CSAssetController _downloadAsset:withComplete:]_block_invoke
-[CSAssetController _startDownloadingAsset:progress:completion:]
v16@?0@"MAProgressNotification"8
+[CSAssetController(Utils) addKeyValuePairForQuery:assetType:]
com.apple.MobileAsset.SpeechEndpointAssets
com.apple.MobileAsset.SpeechEndpointAssetsWatch
com.apple.MobileAsset.SpeechEndpointAssetsTV
com.apple.MobileAsset.LanguageDetectorAssets
com.apple.MobileAsset.AdBlockerAssets
com.apple.MobileAsset.SpeakerRecognitionAssets
CSAudioInjectionTvRemoteEngine
ApplicationProcessorWithRingtone
v16@?0@"AFSiriActivationResult"8
-[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]_block_invoke
Trigger was during a ringtone
v16@?0@"<AFMyriadContextMutating>"8
-[CSSiriLauncher notifyWakeKeywordSpokenInBuiltInMic:]_block_invoke
-[CSSiriLauncher notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:]_block_invoke
-[CSSiriLauncher notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:]_block_invoke
-[CSSiriLauncher notifyWakeKeywordSpokenCarPlay:deviceId:]_block_invoke
-[CSSiriLauncher notifyBluetoothDeviceVoiceTrigger:deviceId:completion:]_block_invoke
-[CSSiriLauncher notifyWakeKeywordSpokenBluetoothDevice:deviceId:]_block_invoke
-[CSSiriLauncher deactivateSiriActivationConnectionWithReason:withOptions:withContext:]_block_invoke
-[CSSiriLauncher notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:]_block_invoke
-[CSHostPowerStateMonitor currentPowerState]
CSHostPowerStateMonitor.m
-[CSHostPowerStateMonitor currentRawPowerState]
-[CSHostPowerStateMonitor _startMonitoringWithQueue:]
-[CSHostPowerStateMonitor _stopMonitoring]
-[CSAudioRouteChangeMonitor _startMonitoringWithQueue:]
CSAudioRouteChangeMonitor.m
-[CSAudioRouteChangeMonitor _stopMonitoring]
-[CSAudioRouteChangeMonitor getHearstConnected:]
-[CSAudioRouteChangeMonitor hearstConnected]
-[CSAudioRouteChangeMonitor getHearstRouted:]
-[CSAudioRouteChangeMonitor hearstRouted]
-[CSAudioRouteChangeMonitor getSiriInputSourceOutOfBand:]
-[CSAudioRouteChangeMonitor siriInputSourceOutOfBand]
-[CSAudioRouteChangeMonitor getJarvisConnected:]
-[CSAudioRouteChangeMonitor jarvisConnected]
CSSmartSiriVolumeEnablePolicy queue
-[CSSmartSiriVolumeEnablePolicy _addSmartSiriVolumeEnabledConditions]_block_invoke
CSAudioInjectionRemoraEngine
-[CSAudioInjectionRemoraEngine dealloc]
CSAudioInjectionEngine
-[CSAudioInjectionEngine _createDeInterleaverIfNeeded]
-[CSAudioInjectionEngine stop]_block_invoke
-[CSAudioInjectionEngine _readAudioBufferAndFeed]
-[CSAudioInjectionEngine injectAudio:withScaleFactor:outASBD:playbackStarted:completion:]
-[CSAudioInjectionEngine stopAudioStream]_block_invoke
-[CSAudioInjectionEngine _deinterleaveBufferIfNeeded:]
-[CSAudioInjectionEngine _compensateChannelDataIfNeeded:receivedNumChannels:]
VoiceTrigger Asset Change Monitor
com.apple.corespeech.voicetriggerassetchange
CSAttSiriRequestSourceKey
SiriFollowupforIdleAndQuiet
Dictation
LockScreenNotification
SpeechDetection
-[NviAudioFileWriter initWithURL:inputFormat:outputFormat:]
-[NviAudioFileWriter addSamples:numSamples:]
-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke
-[CSBluetoothWirelessSplitterMonitor splitterState]
CSBluetoothWirelessSplitterMonitor.m
-[CSBluetoothWirelessSplitterMonitor updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
-[CSBluetoothWirelessSplitterMonitor splitterState:]
-[CSBluetoothWirelessSplitterMonitor _startMonitoringWithQueue:]
-[CSBluetoothWirelessSplitterMonitor _stopMonitoring]
CSSiriClientBehaviorMonitor
-[CSSiriClientBehaviorMonitor notifyFetchedSiriClientAudioStream:successfully:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyPreparedSiriClientAudioStream:successfully:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyWillStopStream:reason:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyDidStopStream:withEventUUID:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyReleaseAudioSession]_block_invoke
-[CSSpeechEndpointAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSSpeechEndpointAssetMetaUpdateMonitor _stopMonitoring]
-[CSSpeechEndpointAssetMetaUpdateMonitor _didReceiveNewSpeechEndpointAssetMetaData]
com.apple.MobileAsset.SpeechEndpointAssetsWatch.ma.cached-metadata-updated
com.apple.MobileAsset.SpeechEndpointAssetsTV.ma.cached-metadata-updated
com.apple.MobileAsset.SpeechEndpointAssets.ma.cached-metadata-updated
estimatedTTSVolume
debugLogPath
com.apple.corespeech.corespeechd.uaapservice
CSSpeechUaapXPCClient
-[CSSpeechUaapXPCClient init]_block_invoke
-[CSSpeechUaapXPCClient _handleConnectionError:]
v32@?0@"NSString"8Q16^B24
bundleId
assetFiles
messageType
message
errorMessage
locale
v32@?0@"NSString"8@"NSArray"16^B24
-[CSSpeechUaapXPCClient invalidate]
CSVoiceTriggerHandlerMacQueue
-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:completion:]_block_invoke
-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:completion:]_block_invoke_2
-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablity]_block_invoke
-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablityForEndpoint]_block_invoke_3
-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablityForEndpoint]_block_invoke
-[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerAssetDownloadMonitor:didInstallNewAsset:]
-[CSVoiceTriggerAssetHandlerMac CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSVoiceTriggerAssetHandlerMac CSFirstUnlockMonitor:didReceiveFirstUnlock:]
-[CSVoiceTriggerAssetHandlerMac trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
CSVoiceTriggerAOPModeEnabledPolicyIOS RecordState queue
-[CSVoiceTriggerAOPModeEnabledPolicyIOS _addConditionsForIOSBargeIn]_block_invoke
BTDetails_IsHFPRoute
-[CSVoiceTriggerAOPModeEnabledPolicyIOS _addConditionsForIOSAOP]_block_invoke
-[CSVoiceTriggerAOPModeEnabledPolicyIOS _isSpeechDetectionDevicePresent]
-[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:didChangedRecordState:withEventUUID:withContext:]_block_invoke
CSOpportuneSpeakBehaviorMonitor
-[CSOpportuneSpeakBehaviorMonitor notifyWillStartStreamWithContext:audioProviderUUID:option:]_block_invoke
-[CSOpportuneSpeakBehaviorMonitor notifyDidStartStreamWithContext:audioProviderUUID:successfully:option:]_block_invoke
-[CSOpportuneSpeakBehaviorMonitor notifyWillStopStream:]_block_invoke
-[CSOpportuneSpeakBehaviorMonitor notifyDidStopStream:]_block_invoke
Library/nvi
/System/Library/Audio/UISounds/jbl_begin_short.caf
/System/Library/Audio/UISounds/jbl_begin_short_carplay.caf
%@ {activationMode = %.4s, deviceIdentifier = %@, activated = %d}
-[CSSiriAudioActivationInfo initWithSpeechRecordingMode:clientConfiguration:experimentContext:]
-[CSSiriAudioActivationInfo setSpeechRequestOptions:currentActivationInfo:]
-[CSSiriAudioActivationInfo setClientConfiguration:]
-[CSSiriAudioActivationInfo _csAudioRecordTypeForSpeechRequestOptions:useBorealisBuffer:currentClientConfiguration:]
-[CSSiriAudioActivationInfo startRecordingSettingsWithRecordRoute:recordingInfo:playbackRoute:]
-[CSSiriAudioActivationInfo _alertBehaviorForRecordRoute:recordingInfo:playbackRoute:attemptsToUsePastDataBufferFrames:]
-[CSSiriAudioActivationInfo audioAlertStyleForRecordRoute:recordingInfo:playbackRoute:]
-[CSSiriAudioActivationInfo twoShotPromptTypeForRecordRoute:playbackRoute:]
-[CSSiriAudioActivationInfo audioSessionActivationTargetDate]
-[CSSiriAudioActivationInfo dateByAddingTimeIntervalSinceActivation:]
-[CSSiriAudioActivationInfo _audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:]_block_invoke
q8@?0
-[CSSiriAudioActivationInfo _audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:]
-[CSSiriAudioActivationInfo _audioSessionActiveDelayCoreSpeechWithType:]
@"NSNumber"16@?0@"NSNumber"8
-[CSSiriAudioActivationInfo _audioSessionActiveDelayUserPerceptionWithType:]
-[CSSiriAudioActivationInfo _audioSessionActiveDelayOverride]
-[CSSiriAudioActivationInfo _audioSessionActiveDelayServerConfiguration]
_CSSiriLanguageDetectorSettings
triggerEndSampleCount
triggerEndSeconds
com.apple.voicetrigger
com.apple.nvi
IsNviEnabled
InternalBuild
NviVADSignalType
NviKwdSignalType
NviDirectionalitySignalType
NviAsdAnchorSignalType
NviAsdPayloadSignalType
+[NviUtils strRepForNviSignalType:]
NviUtils.m
Unknown NviSignalTypeString: <%@>
NviAudioDataSrcType
+[NviUtils strRepForNviDataSourceType:]
NviDataSource_END_MARKER
+[NviUtils nviDataSourceTypeForStr:]
+[NviUtils _createDirAtPath:]
yyyyMMdd_HHmmss.SSS
Unexpected!! Received dir for NviConfig: %@
+[NviUtils readJsonDictionaryAt:]
+[NviUtils getValueFromDictionaryOfDictionaries:keypath:]
+[NviUtils createDirAtPath:]
SilenceFramesCountMs
SilenceProbability
SilenceDurationMs
ProcessedAudioMs
[requestHistoricalAudioDataWithHostTime = %@]
[requestHistoricalAudioDataSampleCount = %@]
[useOpportunisticZLL = %@]
[startRecordingHostTime = %llu]
[startRecordingSampleCount = %llu]
[alertBehavior = %llu %llu %llu]
[skipAlertBehavior = %@]
[requireSingleChannelLookup = %@]
[selectedChannel = %u]
[estimatedStartHostTime = %llu
[disableEndpointer = %d]
[disableLocalSpeechRecognizer = %d]
[disablePrewarmLocalSpeechRecognizer = %d]
[disableBoostForDoAP = %d]
requestHistoricalAudioDataWithHostTime
requestHistoricalAudioDataSampleCount
startRecordingHostTime
startRecordingSampleCount
useOpportunisticZLL
startAlertBehavior
stopAlertBehavior
errorAlertBehavior
skipAlertBehavior
requireSingleChannelLookup
selectedChannel
estimatedStartHostTime
disableEndpointer
disableLocalSpeechRecognizer
disablePrewarmLocalSpeechRecognizer
disableBoostForDoAP
requestMHUUID
siriSessionUUID
%@ {request = %@, options = %@, player = %@}
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _prepareWithOptions:audioSession:error:]
Failed to initialize AVAudioPlayer.
Failed to prepare to play AVAudioPlayer.
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
Attempted to start audio playback session when AVAudioPlayer is already playing.
Failed to play AVAudioPlayer.
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _stop:]
Stopped playback of AVAudioPlayer.
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _stop:]_block_invoke
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _handleBeginInterruption]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _handleEndInterruption:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _didNotStartWithError:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _didStopWithError:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _finalizeWithError:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased audioPlayerDidFinishPlaying:successfully:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased audioPlayerDecodeErrorDidOccur:error:]
-[CSSmartSiriVolumeRunPolicyHomePod _addSmartSiriVolumeEnabledConditions]_block_invoke
-[CSContinuousAudioFingerprintEnabledPolicy _addContinousAudioFingerprintEnabledConditions]_block_invoke
-[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]
voicetrigger assertion queue
-[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]_block_invoke
phrasespotter assertion queue
-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke_2
bypassed
NOT bypassed
-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke
raise-to-speak assertion queue
-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke_2
-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke
-[CSVoiceTriggerXPCServiceProxy notifyVoiceTriggeredSiriSessionCancelled]
-[CSVoiceTriggerXPCServiceProxy notifyServiceConnectionLost]
com.apple.corespeech.rchandling.xpc.connection
-[CSRCHandlingXPCClient processRCWithId:duration:lrnnScore:lrnnThreshold:taskId:forceAccept:completionHandler:]
-[CSRCHandlingXPCClient getMitigationDecisionForRCIdWithCompletion:completion:]
-[CSRCHandlingXPCClient _getRemoteServiceProxyObject]
-[CSRCHandlingXPCClient _getRemoteServiceProxyObject]_block_invoke
com.apple.corespeech.corespeechd.rchandling.service
-[CSRCHandlingXPCClient _createClientConnection]_block_invoke
smartSiriVolumeOverrideMediaVolume
com.apple.ssv.clientq
-[CSSmartSiriVolumeController getVolumeForTTSType:withContext:]_block_invoke
-[CSSmartSiriVolumeController _createSSVClientConnectionIfNeeded]
-[CSSmartSiriVolumeController didSmartSiriVolumeChangeForReason:]
-[CSPhraseNDEAPIScorer keywordAnalyzerNDEAPI:hasResultAvailable:forChannel:]
speakerRecognition
satThreshold
combinationWeight
implicitProfileThreshold
implicitProfileDeltaThreshold
implicitVTThreshold
pruningExplicitSATThreshold
pruningExplicitPSRThreshold
pruningSATThreshold
pruningPSRThreshold
numPruningRetentionUtt
maxEnrollmentUtterances
pruningCookie
configFileRecognizer
configFileNDAPI
voiceTriggerSecondPassAOP
implicit_training_enabled
multiUserHighScoreThreshold
multiUserLowScoreThreshold
multiUserConfidentScoreThreshold
multiUserDeltaScoreThreshold
useSpeakerRecognitionAsset
phrase
-[CSAsset(SpeakerRecognition) satScoreThresholdForPhId:]
recognizer.json
config.txt
-[CSAsset(SpeakerRecognition) containsMultiUserThresholds]
-[CSAudioTandemStream attachToPrimaryStreamWithCompletion:]
-[CSAudioTandemStream prepareAudioStreamSyncWithRequest:error:]
CSAudioTandemStream.m
-[CSAudioTandemStream prepareAudioStreamWithRequest:completion:]
-[CSAudioTandemStream startAudioStreamWithOption:completion:]
-[CSAudioTandemStream stopAudioStreamWithOption:completion:]
CSAttSiriStateMonitor queue
-[CSAttSiriStateMonitor updateState:]_block_invoke
meta_version.json
enrollment_version.json
CSP2P_CommandType_Key
CSP2P_CommandDict_Key
corespeech
com.apple.siridebug.request.generic
com.apple.siridebug.command.remote.heysiri
com.apple.siridebug.command.parallel.recording
com.apple.siridebug.command.transfer.voiceprofile
com.apple.siridebug.command.query.voiceprofile
com.apple.siridebug.command.reverse.transfer.voiceprofile
com.apple.siridebug.command.fetch.voiceprofile
com.apple.siridebug.command.voiceprofile.update.trigger
com.apple.siridebug.command.fetch.parallelrecording
com.apple.siridebug.command.transfer.parallelrecording
com.apple.siridebug.command.fetch.voicegradingdata
com.apple.siridebug.command.transfer.voicegradingdata
com.apple.siridebug.command.delete.voiceprofile
CSP2P_RemoteHeySiriEnable_Key
CSP2P_RemoteHeySiriStatus_Key
CSP2P_RemoteRecordingStart_Key
CSP2P_RemoteRecordingStatus_Key
CSP2P_VoiceProfileData_Key
CSP2P_VoiceProfileFileName_Key
CSP2P_VoiceProfileSpeakerName_Key
CSP2P_VoiceProfileLocale_Key
CSP2P_VoiceProfileDataType_Key
CSP2P_VoiceProfileSegment_Key
CSP2P_VoiceProfileTotalSegments_Key
CSP2P_VoiceProfileStatus_Key
CSP2P_VoiceProfileProfileId_Key
CSP2P_VoiceProfileHomeUserId_Key
CSP2P_VoiceProfileRelativeFilePath_Key
CSP2P_VoiceProfileSiriProfileId_Key
CSP2P_VoiceProfileAppDomain_Key
CSP2P_VoiceProfileOnboardTimeStamp_Key
CSP2P_VoiceProfileTransferCompleted_Key
CSP2P_VoiceProfileRecordedData_Key
CSP2P_VoiceProfileRemoteFileName_Key
CSP2P_VoiceDataToBeGraded_Key
CSP2P_VoiceFileNameToBeGraded_Key
CSP2P_GradingDataTransferStatus_Key
CSP2P_PeerIdentifier_Key
CSP2P_VoiceProfilePeerName_Key
CSP2P_IsDataCompressed_Key
CSP2P_UncompressedDataSize_Key
CSP2P_GradingBatchTransferID_Key
CSP2P_VoiceProfileiTunesUserID_Key
CSP2P_VoiceProfileiTunesPassword_Key
remote
-triggered
-almost
-rejected
-activation
ssrmeta
ssvmeta
vtei
multiuser
acousticSLmeta
com.apple.corespeech.p2psvc
-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke
CoreSpeech
-[CSP2PService sendCoreSpeechGradingDataToNearbyPeer]_block_invoke
-[CSP2PService sendVTNearMissGradingDataToCompanion]_block_invoke
-[CSP2PService sendVoiceProfileUpdatedMessageToNearbyPeerForLocale:]_block_invoke
-[CSP2PService sendAcousticGradingDataToNearbyPeer]_block_invoke
-[CSP2PService sendGeckoSpeechLogsToCompanion]_block_invoke
-[CSP2PService _processRemoteHeySiriCommandWithRequest:fromSenderID:withReply:]
-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]
-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]_block_invoke
q24@?0@"NSURL"8@"NSURL"16
json
B24@?0@"NSURL"8@"NSDictionary"16
-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke
v52@?0@"NSString"8@"NSData"16Q24Q32B40@"NSError"44
-[CSP2PService _sendCoreSpeechGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendCoreSpeechGradingDataToPeerId:]_block_invoke
-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke_2
-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke
Gecko-
v24@?0@"NSUUID"8@"NSError"16
[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
.wav
.json
-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke
-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:withCompletion:]
fileData
fileName
peerId
%@%@
-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:withCompletion:]_block_invoke
-[CSP2PService _receiveParallelRecordingFromPeerId:recordingInfo:withReply:]
%@_%@
-[CSP2PService _receiveVoiceGradingDataFromPeerId:requestInfo:withReply:]
%@.%@.%@
suppressnotification
%@.%@
-[CSP2PService _receiveVoiceProfileFromPeerId:voiceProfileInfo:withReply:]
CoreSpeechCache
audio
tdti
com.apple.siri.corespeech.voiceprofilelist.change
-[CSP2PService _processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:]_block_invoke
CSP2PService.m
-[CSP2PService _processGradingDataFetchCommandWithRequest:fromSenderID:withReply:]
-[CSP2PService _processVoiceProfileListQueryCommandFromPeerId:requestInfo:withReply:]
yyyyMMddHHmmss
voiceprofiles
-[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]
-[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]_block_invoke
homeUserId query for siriProfileId %@ timedout !
-[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]
Caches/VoiceTrigger/SATUpdate
_%d_%d_%@
-[CSP2PService _sendVoiceProfile:toPeerId:]
td/audio
tdti/audio
ti/audio
-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke
-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]
-[CSP2PService _processVoiceProfileUpdateTriggerFromPeerId:requestInfo:withReply:]
-[CSP2PService _sendVoiceProfileUpdateTriggerToPeerId:forLocale:]_block_invoke
-SL.json
-synced.wav
-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke
Logs/CoreSpeech/spid/grading
-[CSP2PService _createDirectoryIfDoesNotExist:]
VoiceProfileStore
trained_users.json
Caches
-[CSP2PService _getContentsOfDirectory:]
com.apple.corespeech
-[CSVoiceTriggerAwareZeroFilter resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:]
+[CSPhoneCallStateMonitor sharedInstance]
CSPhoneCallStateMonitor.m
-[CSPhoneCallStateMonitor phoneCallState]
-[CSPhoneCallStateMonitor firstPartyCall]
-[CSPostBuildInstallService registerPostBuildInstallService]
-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke
com.apple.cs.postinstall
CSContinuousAudioFingerprintProvider
-[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]
-[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]_block_invoke
-[CSContinuousAudioFingerprintProvider stopWithUUID:]
-[CSContinuousAudioFingerprintProvider stopWithUUID:]_block_invoke
-[CSContinuousAudioFingerprintProvider _startListenPollingWithInterval:completion:]
-[CSContinuousAudioFingerprintProvider _startListenPollingWithInterval:completion:]_block_invoke
-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]_block_invoke_2
-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]_block_invoke
-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]
-[CSContinuousAudioFingerprintProvider _startListenPolling]
-[CSContinuousAudioFingerprintProvider _stopListening]
-[CSContinuousAudioFingerprintProvider _stopListening]_block_invoke
-[CSContinuousAudioFingerprintProvider _handleEnablePolicyEvent:]
-[CSContinuousAudioFingerprintProvider audioStreamProvider:didStopStreamUnexpectly:]
-[CSContinuousAudioFingerprintProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
CSBuiltInSpeakerStateMonitor queue
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateMutedInfo]_block_invoke_2
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateMutedInfo]_block_invoke
muted
not muted
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke_2
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke
-[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke_2
active
-[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke
-[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]
-[CSBuiltinSpeakerStateMonitor _stopMonitoring]_block_invoke
-[CSBuiltinSpeakerStateMonitor _stopMonitoring]
-[CSBuiltinSpeakerStateMonitor CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke
SignalTs, ProcessedAudioMs, StartSample, EndSample, Azimuth, EmaAzimuth, Confidence, SpatialSpreadSpectrum
%llu,%f,%lu,%lu,%f,%f,%f,
{%@, {start=%lu, end=%lu, conf=%f, az=%f, estAz=%fdist=%@}
,%d, 
%f, 
CSEndpointMetrics:::totalAudioRecorded
CSEndpointMetrics:::endpointBufferHostTime
CSEndpointMetrics:::featuresAtEndpoint
CSEndpointMetrics:::endpointerType
CSEndpointMetrics:::serverFeatureLatencyDistribution
CSEndpointMetrics:::additionalMetrics
CSEndpointMetrics:::trailingSilenceDurationAtEndpoint
[totalAudioRecorded = %f]
[endpointBufferHostTime = %llu]
[trailingSilenceDurationAtEndpoint = %f]
[endpointerType = %lu]
[featuresAtEndpoint = %@]
[additionalMetrics = %@]
isMediaPlaying
noiseLevelDB
musicLevelDB
musicPlaybackVolumeDB
alarmVolume
finalTTSVolume
isAlarmPlaying
isTimerPlaying
isLKFSProcessPaused
removeVoiceTriggerSamples
-[CSSmartSiriVolume initWithSamplingRate:asset:]
-[CSSmartSiriVolume startSmartSiriVolume]_block_invoke
RUNNING
PAUSED
-[CSSmartSiriVolume _startListenPolling]
-[CSSmartSiriVolume _startListenPollingWithInterval:completion:]
-[CSSmartSiriVolume _startListenPollingWithInterval:completion:]_block_invoke
-[CSSmartSiriVolume _startListenWithCompletion:]_block_invoke_2
-[CSSmartSiriVolume _startListenWithCompletion:]_block_invoke
-[CSSmartSiriVolume _startListenWithCompletion:]
-[CSSmartSiriVolume _stopListening]
-[CSSmartSiriVolume _stopListening]_block_invoke
-[CSSmartSiriVolume initializeMediaPlayingState]_block_invoke
playing
NOT playing
-[CSSmartSiriVolume initializeMediaPlayingState]
-[CSSmartSiriVolume initializeAlarmState]_block_invoke
firing
NOT firing
-[CSSmartSiriVolume initializeTimerState]_block_invoke
-[CSSmartSiriVolume _setAsset:]
-[CSSmartSiriVolume _processAudioChunk:soundType:]
-[CSSmartSiriVolume estimateSoundLevelbySoundType:]_block_invoke
-[CSSmartSiriVolume _pauseSSVProcessing]_block_invoke
-[CSSmartSiriVolume _resumeSSVProcessing]_block_invoke
-[CSSmartSiriVolume audioStreamProvider:audioBufferAvailable:]_block_invoke
-[CSSmartSiriVolume audioStreamProvider:didStopStreamUnexpectly:]
-[CSSmartSiriVolume didDetectKeywordWithResult:]
-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke
-[CSSmartSiriVolume estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:]_block_invoke
-[CSSmartSiriVolume _combineResultsWithOptimalFromNoise:andOptimalFromLkfs:withUserOffset:]
-[CSSmartSiriVolume CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]_block_invoke
-[CSSmartSiriVolume didReceiveAlarmChanged:]_block_invoke
-[CSSmartSiriVolume didReceiveTimerChanged:]_block_invoke
-[CSSmartSiriVolume CSAudioServerCrashMonitorDidReceiveServerRestart:]
-[CSSmartSiriVolume siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke
-[CSSmartSiriVolume _setStartAnalyzeTime:]
-[CSSmartSiriVolume getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]
override-asset
CSSACInfoMonitor queue
-[CSSACInfoMonitor _startMonitoringWithQueue:]
-[CSSACInfoMonitor _stopMonitoring]
-[CSSACInfoMonitor isDeviceRoleStereo]
RTModelData
RTModelHash
RTModelLocale
RTModelDigest
RTModelSignature
RTModelCertificate
RT Model for 
 from asset 
CorealisRTModel
CorealisRTModelVersion
dataSize(%d), hash(%@), locale(%@), digest(%@), cert(%@), signature(%@)
com.apple.assistant.vibration-manager
com.apple.springboard.ring-vibrate.changed
com.apple.springboard.silent-vibrate.changed
-[CSSiriVibrationManager _fetchRingVibrationValue]
ring-vibrate
-[CSSiriVibrationManager _fetchSilentVibrationValue]
silent-vibrate
-[CSSiriVibrationManager handleRingVibrationValueChange]
-[CSSiriVibrationManager handleSilentVibrationValueChange]
com.apple.springboard
mobile
_fetchVibrationState
::: Initializing NVI logging...
Framework
InitNviLogging_block_invoke
CSAudioRouteChangeMonitorImpl queue
-[CSAudioRouteChangeMonitorImpl preferredExternalRouteDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImpl pickableRoutesDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImpl carPlayAuxStreamSupportDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImpl carPlayIsConnectedDidChange:]
-[CSAudioRouteChangeMonitorImpl _startMonitoringWithQueue:]
-[CSAudioRouteChangeMonitorImpl _stopMonitoring]
-[CSAudioRouteChangeMonitorImpl _notifyHearstConnectionState:]
-[CSAudioRouteChangeMonitorImpl _notifyHearstRoutedState:]
-[CSAudioRouteChangeMonitorImpl _notifyJarvisConnectionState:]
-[CSAudioRouteChangeMonitorImpl _notifySiriInputSourceOutOfBandState:]
-[CSAudioRouteChangeMonitorImpl _systemControllerDied:]
-[CSAutomaticVolumeEnabledMonitor observeValueForKeyPath:ofObject:change:context:]_block_invoke
-[CSSiriRecordingInfo initWithDictation:fingerprintOnly:secureOfflineOnly:audioAlertStyle:recordSettings:recordRoute:recordDeviceInfo:playbackRoute:audioDeviceID:audioSessionID:voiceTriggerEventInfo:activationAlertStartTimestamp:startRecordingTimestamp:firstBufferTimestamp:firstBufferHostTime:estimatedSpeechEndHostTime:deviceIdentifier:includeBTInfo:speechEvent:]
forceSiriPCMAudio
-[CSSpeakerRecognitionAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSSpeakerRecognitionAssetMetaUpdateMonitor _stopMonitoring]
-[CSSpeakerRecognitionAssetMetaUpdateMonitor _didReceiveSpeakerRecognitionAssetMetaData]
com.apple.MobileAsset.SpeakerRecognitionAssets.ma.cached-metadata-updated
com.apple.coreaudio.BorealisToggled
-[CSVoiceTriggerEnabledMonitor _startMonitoringWithQueue:]_block_invoke
-[CSVoiceTriggerEnabledMonitor _startMonitoringWithQueue:]
-[CSVoiceTriggerEnabledMonitor _stopMonitoring]
-[CSVoiceTriggerEnabledMonitor _checkVoiceTriggerEnabled]
Warmup
accessible-extended
accessible-maximum
extraSamplesAtStart
SearchOrMessaging
ExtraDelayMs
EndpointerDecisionLagMs
ClientLagThresholdMsKey
ClampedSFLatencyMsForClientLag
UseDefaultServerFeaturesOnClientLag
extra-delay-frequency
endpoint-threshold
com.apple.cs.%@.stateserialqueue
com.apple.cs.%@.sepfQueue
com.apple.cs.%@.hybridClassifierfQueue
-[CSHybridEndpointer endpointerModelVersion]_block_invoke
-[CSHybridEndpointer updateEndpointerThreshold:]_block_invoke
-[CSHybridEndpointer updateEndpointerDelayedTrigger:]_block_invoke
-[CSHybridEndpointer setEndpointerOperationMode:]_block_invoke
-[CSHybridEndpointer fetchCurrentEndpointerOperationMode]_block_invoke
-[CSHybridEndpointer processTaskString:]_block_invoke
-[CSHybridEndpointer processServerEndpointFeatures:]
-[CSHybridEndpointer processServerEndpointFeatures:]_block_invoke_2
-[CSHybridEndpointer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke_2
-[CSHybridEndpointer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke
-[CSHybridEndpointer processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:]_block_invoke
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]_block_invoke_2
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]_block_invoke
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]
endpointerModelVersion
wordCount
eosLikelihood
trailingSilenceDuration
serverFeaturesLatency
clientSilenceProbability
clientSilenceFramesCountMs
endpointResult
-[CSHybridEndpointer logFeaturesWithEvent:locale:]_block_invoke
-[CSHybridEndpointer handleVoiceTriggerWithActivationInfo:]_block_invoke
-[CSHybridEndpointer terminateProcessing]
-[CSHybridEndpointer recordingStoppedForReason:]
-[CSHybridEndpointer stopEndpointer]
-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:]
-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:]_block_invoke
-[CSHybridEndpointer _readParametersFromHEPAsset:]_block_invoke
CSHybridEndpointer.m
CSHybridEndpointer reset called
-[CSHybridEndpointer endpointerAssetManagerDidUpdateAsset:]_block_invoke
cs_hep_marsh.json
cs_hep.json
-[CSHybridEndpointer _getCSHybridEndpointerConfigForAsset:]
-[CSSiriEnabledMonitor _startMonitoringWithQueue:]
-[CSSiriEnabledMonitor _stopMonitoring]
_AssistantPrefsChangedNotification
com.apple.nvi.csaudiosrc
-[NviCSAudioDataSource startWithNviContext:didStartHandler:]_block_invoke_2
-[NviCSAudioDataSource stopWithDidStopHandler:]_block_invoke_2
-[NviCSAudioDataSource _createAudioStreamWithCurrentNviContext]
-[NviCSAudioDataSource audioStreamProvider:avBufferAvailable:]
-[NviCSAudioDataSource audioStreamProvider:didStopStreamUnexpectly:]
-[NviCSAudioDataSource audioStreamProvider:audioChunkForTVAvailable:]
SPG.nnet
version
CSEndpointerAssetManager queue
-[CSEndpointerAssetManager init]
-[CSEndpointerAssetManager checkFirstUnlocked]
-[CSEndpointerAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]_block_invoke
-[CSEndpointerAssetManager CSAssetManagerDidDownloadNewAsset:]_block_invoke
-[CSEndpointerAssetManager CSFirstUnlockMonitor:didReceiveFirstUnlock:]_block_invoke
-[CSEndpointerAssetManager assetStatus:]
-[CSEndpointerAssetManager _getCurrentHEPAsset]
-[CSEndpointerAssetManager _updateOEPAssetsWithLanguage:]
-[CSEndpointerAssetManager _notifyAssetsUpdate]
-[CSEndpointerAssetManager _fetchEndpointMobileAssetWithLanguage:]
ModelInfo=
-[CSEndpointerAssetManager _getOEPVersionFromPath:]
-[CSEndpointerAssetManager _getFakeEndpointAsset]
-[CSEndpointDelayReporter initWithRequestMHUUID:turnIdentifier:]
-[CSEndpointDelayReporter reset]
leadingSilence
trailingSilence
endTime
-[CSEndpointDelayReporter setSpeechRecognizedContext:withEndpointerMetrics:]
CSActivationEventNotifier
-[CSActivationEventNotifier notifyActivationEventSynchronously:completion:]
-[CSActivationEventNotifier notifyActivationEvent:completion:]_block_invoke
-[CSActivationEventNotifier notifyActivationEvent:deviceId:activationInfo:completion:]_block_invoke
-[CSActivationEventNotifier _createXPCClientConnection]
-[CSLanguageCodeUpdateMonitorImpl _startMonitoringWithQueue:]
-[CSLanguageCodeUpdateMonitorImpl _stopMonitoring]
-[CSLanguageCodeUpdateMonitorImpl _didReceiveLanguageCodeUpdate]
+[CSUtils(AudioFile) readAudioChunksFrom:block:]
-[CSSoftwareUpdateCheckingMonitor _startMonitoringWithQueue:]
-[CSSoftwareUpdateCheckingMonitor _stopMonitoring]
-[CSSoftwareUpdateCheckingMonitor _checkSoftwareUpdateCheckingState]
com.apple.duetscheduler.restartCheckNotification
-[CSAssetManagerEnablePolicy _addAssetManagerEnabledConditions]_block_invoke
-[CSAttSiriAudioSessionStateClient initWithDelegate:]
SiriStateNotificationListener
com.apple.siri.client-state-changed
-[CSAttSiriAudioSessionStateClient notifyObserver:didReceiveNotificationWithToken:]
-[CSAttSiriAudioSessionStateClient notifyObserver:didChangeStateFrom:to:]
-[CSAttSiriAudioSessionStateClient dispatchStateChangedFrom:to:]
Liminal
progChecker.json
progressiveCheckerConfigFile
contionusConversationConfigFile
checkerConfig
validInputOrigins
thresholds
shadowMode
Unspecified
VoiceTrigger
ButtonPress
B32@?0@8@16^B24
v24@?0@8^B16
-[CSVoiceTriggerAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSVoiceTriggerAssetMetaUpdateMonitor _stopMonitoring]
-[CSVoiceTriggerAssetMetaUpdateMonitor _didReceiveNewVoiceTriggerAssetMetaData]
com.apple.MobileAsset.VoiceTriggerAssets.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsIPad.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerHSAssetsIPad.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsWatch.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerHSAssetsWatch.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsMarsh.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsMac.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsTV.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerHSAssets.ma.cached-metadata-updated
-[CSAudioRecordDeviceIndicator updateWithLatestRecordContext:]
+[CSVoiceTriggerEnabledPolicyHelper siriInCallPolicy]
com.apple.assistant.queue-monitor
-[CSSiriQueueMonitor beginMonitoring]
-[CSSiriQueueMonitor endMonitoring]
-[CSSiriQueueMonitor _addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:]
-[CSSiriQueueMonitor _beginMonitoring]
-[CSSiriQueueMonitor _endMonitoring]
-[_CSSiriQueueObserver startWithQueue:]
com.apple.assistant.queue-observer.%s
-[_CSSiriQueueObserver stop]
-[_CSSiriQueueObserver timeoutDetected]
-[CSRemoteVADCircularBuffer copySamplesFrom:to:]
copySamples
-[CSAdBlockerAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSAdBlockerAssetMetaUpdateMonitor _stopMonitoring]
-[CSAdBlockerAssetMetaUpdateMonitor _didReceiveNewAdBlockerAssetMetaData]
com.apple.MobileAsset.AdBlockerAssets.ma.cached-metadata-updated
-[CSAudioStream initWithAudioStreamProvider:streamName:streamRequest:]
-[CSAudioStream dealloc]
-[CSAudioStream startAudioStreamWithOption:completion:]
-[CSAudioStream stopAudioStreamWithOption:completion:]_block_invoke
-[CSAudioStream isStreaming]
-[CSAudioStream updateAudioStreamStartTimeInSampleCount:]
-[CSAudioStream audioStreamProvider:didStopStreamUnexpectly:]
-[CSAudioStream audioStreamProvider:didHardwareConfigurationChange:]
BluetoothA2DPOutput
BluetoothHFP
BluetoothLE
MicrophoneBuiltIn
Speaker
Headphones
MicrophoneWired
HDMIOutput
LineIn
USBAudio
ADAudioSessionPortOther
-[CSSiriAudioSession currentInputRoute]_block_invoke
v24@?0^v8Q16
-[CSSiriAudioSession currentOutputRoute]_block_invoke_3
_AudioObjectGetScalarArray
v20@?0I8r^{AudioObjectPropertyAddress=III}12
_AudioDeviceRegisterForChangedNotification
v16@?0^v8
_AudioObjectGetCFTypeRef
_AudioObjectGetIntValue
{wordCount: %ld, trailingSilDuration: %ld, eosLikelihood: %f, pauseCounts: (%@), silencePosterior: %f, taskName: %@, processedAudioDurationInMilliseconds: %ld}
WordCount
TrailingSilDuration
EOSLikelihood
PauseCounts
SilencePosterior
ProcessedAudioDurationInMilliseconds
CSActivationEventNotificationHandler Queue
-[CSActivationEventNotificationHandler setDelegate:forType:]_block_invoke
-[CSActivationEventNotificationHandler notifyActivationEvent:completion:]_block_invoke
-[CSActivationEventNotificationHandler _notifyActivationEvent:completion:]
-[CSActivationEventNotificationHandler _notifyActivationEvent:completion:]_block_invoke
-[CSActivationEventNotificationHandler _startMonitoring]
-[CSActivationEventNotificationHandler _stopMonitoring]
-[CoreSpeechXPC installedVoiceTriggerAssetForLanguageCode:completion:]
-[CoreSpeechXPC fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]
-[CoreSpeechXPC _handleFakeHearstModelRequest:majorVersion:minorVersion:downloadedModels:preinstalledModels:completion:]
fakeModel.json
fakeModel
-[CoreSpeechXPC voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:]
v40@?0@"CSVoiceTriggerRTModel"8@"CSVoiceTriggerRTModel"16@"NSString"24@"NSError"32
-[CoreSpeechXPC voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:]_block_invoke
-[CoreSpeechXPC voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]_block_invoke
-[CoreSpeechXPC voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]
de-AT
de-DE
de-CH
en-AU
en-CA
en-GB
en-SG
en-IE
en-IN
en-ZA
en-NZ
it-IT
it-CH
ja-JP
zh-CN
zh-TW
nb-NO
nl-BE
nl-NL
sv-SE
tr-TR
fi-FI
he-IL
es-ES
es-US
es-CL
es-MX
fr-FR
fr-BE
fr-CA
fr-CH
ko-KR
zh-HK
yue-CN
da-DK
ms-MY
pt-BR
ru-RU
th-TH
ar-AE
ar-SA
default
Hearst
-[CoreSpeechXPC _fetchVoiceTriggerInstalledAssetWithLanguage:completion:]_block_invoke
-[CSSiriRestrictionOnLockScreenMonitor _startMonitoringWithQueue:]
-[CSSiriRestrictionOnLockScreenMonitor _stopMonitoring]
-[CSSiriRestrictionOnLockScreenMonitor _checkSiriRestrictedOnLockScreen]
-[CSRawAudioInjectionProvider init]
CSRawAudioInjectionProvider
-[CSRawAudioInjectionProvider dealloc]
-[CSRawAudioInjectionProvider setContext:completion:]
-[CSRawAudioInjectionProvider setCurrentContext:streamHandleId:error:]
-[CSRawAudioInjectionProvider prepareAudioStreamRecord:recordDeviceIndicator:error:]
-[CSRawAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]
/var/mobile/darwin_test.wav
-[CSRawAudioInjectionProvider stopAudioStreamWithRecordDeviceIndicator:error:]
-[CSRawAudioInjectionProvider isRecordingWithRecordDeviceIndicator:]
RawAudioInjection
-[CSRawAudioInjectionProvider prewarmAudioSessionWithStreamHandleId:error:]
-[CSRawAudioInjectionProvider activateAudioSessionWithReason:streamHandleId:error:]
-[CSSpringboardStartMonitor _startMonitoringWithQueue:]
-[CSSpringboardStartMonitor _stopMonitoring]
-[CSSpringboardStartMonitor _checkSpringBoardStarted]
com.apple.springboard.finishedstartup
CSAudioProvider
CSAudioProvider Stream Handle Queue
CSAudioProvider logging
-[CSAudioProvider dealloc]
-[CSAudioProvider setStreamState:]
-[CSAudioProvider setAudioRecorder:]_block_invoke
-[CSAudioProvider supportsDuckingOnCurrentRouteWithError:]
-[CSAudioProvider setCurrentContext:error:]
-[CSAudioProvider setCurrentContext:error:]_block_invoke
-[CSAudioProvider _audioStreamWithRequest:streamName:error:]
-[CSAudioProvider attachTandemStream:toPrimaryStream:completion:]_block_invoke_2
failed
successfully
-[CSAudioProvider attachTandemStream:toPrimaryStream:completion:]_block_invoke
-[CSAudioProvider _prepareAudioStreamSync:request:error:]
-[CSAudioProvider _createCircularBufferIfNeededWithNumChannel:playbackRoute:]
-[CSAudioProvider startAudioStream:option:completion:]
-[CSAudioProvider startAudioStream:option:completion:]_block_invoke
-[CSAudioProvider prepareAudioStreamSync:request:error:]
-[CSAudioProvider prepareAudioStream:request:completion:]
-[CSAudioProvider _startAudioStream:option:completion:]
-[CSAudioProvider _startAudioStream:option:completion:]_block_invoke
-[CSAudioProvider _startAudioStream:option:completion:]_block_invoke_2
-[CSAudioProvider _handleDidStartAudioStreamWithResult:error:]
-[CSAudioProvider _handleDidStopAudioStreamWithReason:]
-[CSAudioProvider _stopAudioStream:option:completion:]
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke_3
CSAudioProvider.m
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke_4
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke_2
-[CSAudioProvider _saveRecordingBufferFrom:to:toURL:]_block_invoke
-[CSAudioProvider holdAudioStreamWithDescription:timeout:]
-[CSAudioProvider holdAudioStreamWithDescription:timeout:]_block_invoke_2
-[CSAudioProvider holdAudioStreamWithDescription:timeout:]_block_invoke
-[CSAudioProvider cancelAudioStreamHold:]
-[CSAudioProvider cancelAudioStreamHold:]_block_invoke
-[CSAudioProvider prewarmAudioSessionWithError:]
-[CSAudioProvider activateAudioSessionWithReason:dynamicAttribute:bundleID:error:]
-[CSAudioProvider _activateAudioSessionWithReason:error:]
-[CSAudioProvider _shouldDuckOnBuiltInSpeaker]
-[CSAudioProvider _isDuckingOnSpeakerOutputSupportedWithCurrentRoute]
-[CSAudioProvider deactivateAudioSession:error:]
-[CSAudioProvider _deactivateAudioSession:error:]
-[CSAudioProvider setDuckOthersOption:]
-[CSAudioProvider setAlertSoundFromURL:forType:force:]
-[CSAudioProvider playAlertSoundForType:]
-[CSAudioProvider playRecordStartingAlertAndResetEndpointer]
-[CSAudioProvider alertStartTime]
-[CSAudioProvider triggerInfoForContext:completion:]_block_invoke
-[CSAudioProvider _shouldStopRecording]
-[CSAudioProvider audioRecorderStreamHandleIdInvalidated:]
-[CSAudioProvider audioRecorderWillBeDestroyed:]_block_invoke
-[CSAudioProvider _fetchHistoricalAudioAndForwardToStream:remoteVAD:]
-[CSAudioProvider _scheduleAlertFinishTimeout:]
-[CSAudioProvider _scheduleAlertFinishTimeout:]_block_invoke
-[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]
-[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]_block_invoke_2
-[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]_block_invoke
-[CSAudioProvider audioRecorderBuiltInAudioStreamInvalidated:error:]_block_invoke
-[CSAudioProvider audioRecorderDisconnected:]
-[CSAudioProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]
-[CSAudioProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
-[CSAudioProvider _handleAudioSystemFailure]
StreamInit
StreamPrepared
StreamStarting
StreamSteaming
StreamStopping
StreamStoppingWithScheduledStart
unknown(%tu)
com.apple.corespeech.recording
Recording transaction
-[CSAudioProvider _releaseRecordingTransactionIfNeeded]
%@-%@
-[CSAudioProvider _onAudioPacketWatchdogFire]
-[CSAudioProvider _scheduleDidStartRecordingDelegateWatchDog]
-[CSAudioProvider _schduleDidStartRecordingDelegateWatchDogWithToken:]
-[CSAudioProvider _clearDidStartRecordingDelegateWatchDog]
-[CSAudioProvider _scheduleDidStopRecordingDelegateWatchDog]
-[CSAudioProvider _scheduleDidStopRecordingDelegateWatchDog:]
-[CSAudioProvider _clearDidStopRecordingDelegateWatchDog]
-[CSAudioProvider _updateRemoteDeviceIdFromAVVCIfNeeded]
-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke
-[NSArray(XPCObject) _cs_initWithXPCObject:]
-[NSArray(XPCObject) _cs_initWithXPCObject:]_block_invoke
B24@?0Q8@"NSObject<OS_xpc_object>"16
-[NSArray(XPCObject) _cs_xpcObject]_block_invoke
v32@?0@8Q16^B24
-[CSAlwaysOnProcessorStateMonitor _startMonitoringWithQueue:]_block_invoke
com.apple.audio.AOP.enable
-[CSAlwaysOnProcessorStateMonitor _startMonitoringWithQueue:]_block_invoke_2
-[CSAlwaysOnProcessorStateMonitor _stopMonitoring]
-[CSAlwaysOnProcessorStateMonitor _didReceiveAOPListeningStateChange:]
+[CSAdBlockerAssetDecoderFactory adBlockerAssetDecoderWithVersion:]
com.apple.siri.myriad.in.ear
+[CSMyriadNotifier notifyInEarMyriadTrigger]
-[CSAVCallConnectedMonitor _systemControllerDied:]
+[CSRemoteDeviceProtocolInfo localDeviceProtocolInfo]
protocolVersion=%lu, deviceCategory=%lu, buildVersion=%@, deviceProductVersion=%@, deviceProductType=%@
protocolVersion
deviceCategory
buildVersion
deviceProductVersion
deviceProductType
-[CSHybridEndpointAnalyzer init]
com.apple.cs.%@.apQueue
com.apple.cs.%@.osdQueue
-[CSHybridEndpointAnalyzer _loadAndSetupEndpointerAssetIfNecessary]
-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]
-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke
-[CSHybridEndpointAnalyzer updateEndpointerThreshold:]
-[CSHybridEndpointAnalyzer updateEndpointerDelayedTrigger:]
-[CSHybridEndpointAnalyzer processServerEndpointFeatures:]
-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke_2
-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_2
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke
-[CSHybridEndpointAnalyzer logFeaturesWithEvent:locale:]_block_invoke
-[CSHybridEndpointAnalyzer handleVoiceTriggerWithActivationInfo:]_block_invoke
-[CSHybridEndpointAnalyzer recordingStoppedForReason:]
-[CSHybridEndpointAnalyzer stopEndpointer]
-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]
-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]_block_invoke
-[CSHybridEndpointAnalyzer _readParametersFromHEPAsset:]_block_invoke
CSHybridEndpointAnalyzer.m
CSHybridEndpointAnalyzer reset called
-[CSHybridEndpointAnalyzer CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSHybridEndpointAnalyzer CSAssetManagerDidDownloadNewAsset:]
-[CSHybridEndpointAnalyzer CSFirstUnlockMonitor:didReceiveFirstUnlock:]
-[CSHybridEndpointAnalyzer _updateAssetWithLanguage:]_block_invoke
-[CSHybridEndpointAnalyzer _getCSHybridEndpointerConfigForAsset:]
injectionDevice
com.apple.da
ExperimentGroup
walkabout
carry
CSAudioSessionInfoProvider
-[CSAudioSessionInfoProvider audioSessionIdForDeviceId:]
-[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]_block_invoke
-[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke
-[CSAudioSessionInfoProvider _registerInterruptionNotification]
-[CSAudioSessionInfoProvider _registerAudioRouteChangeNotification]
-[CSAudioSessionInfoProvider _handleInterruption:]_block_invoke
-[CSAudioSessionInfoProvider _audioRouteChanged:]_block_invoke
RouteChangeNotificationInfo
-[CSAudioSessionInfoProvider _deregisterAudioSessionNotifications]
-[CSEndpointerProxy resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:]
-[CSEndpointerProxy resetForVoiceTriggerTwoShotWithSampleRate:]
-[CSEndpointerProxy preheat]
-[CSEndpointerProxy endpointer:didDetectStartpointAtTime:]
-[CSEndpointerProxy endpointer:didDetectHardEndpointAtTime:withMetrics:]
-[CSEndpointerProxy endpointer:detectedTwoShotAtTime:]
-[CSEndpointerProxy endpointerModelVersion]
-[CSEndpointerProxy updateEndpointerThreshold:]
-[CSEndpointerProxy logHybridEndpointFeaturesWithEvent:locale:]
CSSiriMobileBluetoothDeviceDataSource
Queue %s did not respond to watchdog and is likely blocked.
-[CSSiriMobileBluetoothDeviceDataSource init]_block_invoke
-[CSSiriMobileBluetoothDeviceDataSource _cleanUpDeviceProxies]
-[CSSiriMobileBluetoothDeviceDataSource _detachFromSession]
-[CSSiriMobileBluetoothDeviceDataSource _attachToSession]
-[CSSiriMobileBluetoothDeviceDataSource _sessionAttached:result:]
-[CSSiriMobileBluetoothDeviceDataSource _sessionDetached:]
-[CSSiriMobileBluetoothDeviceDataSource _sessionTerminated:]
-[CSSiriMobileBluetoothDeviceDataSource _setUpLocalDevice]
-[CSSiriMobileBluetoothDeviceDataSource localDevice:event:result:]
-[CSSiriMobileBluetoothDeviceDataSource _setUpAccessoryManager]
-[CSSiriMobileBluetoothDeviceDataSource accessoryManager:event:device:state:]
v16@?0@"AFBluetoothDeviceInfo"8
-[CSSiriMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]_block_invoke
-[CSSiriMobileBluetoothDeviceDataSource getBTDeviceWithDeviceUID:completion:]_block_invoke
-[CSSiriMobileBluetoothDeviceDataSource getBTLocalDeviceWithCompletion:]_block_invoke
%@ {deviceUID = %@}
%@ {address = %@}
-[CSSiriMobileBluetoothDeviceProxy dealloc]
-[CSSiriMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]
-[CSSiriMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]
-[CSSiriMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy deviceInfo]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy deviceInfo]
-[CSSiriMobileBluetoothDeviceProxy getHeadphoneInEarDetectionState:]
-[CSSiriMobileBluetoothDeviceProxy getHeadphoneListeningMode:]
-[CSSiriMobileBluetoothDeviceProxy setHeadphoneListeningMode:completion:]
v24@?0^{BTDeviceImpl=}8^{BTAccessoryManagerImpl=}16
-[CSSiriMobileBluetoothDeviceProxy _reload:]
-[CSSiriMobileBluetoothDeviceProxy _reload:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy _updateDeviceInfo:]
v16@?0@"<AFBluetoothDeviceObserver>"8
-[CSSiriMobileBluetoothDeviceProxy _fetchDeviceInfoWithCompletion:]
v16@?0@"<AFBluetoothDeviceInfoMutating>"8
-[CSSiriMobileBluetoothDeviceProxy _fetchDeviceInfoWithCompletion:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]
-[CSSiriMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy _invalidate]
v24@?0@"<AFBluetoothDeviceObserver>"8^B16
ADBTResult
_CSSiriBTDeviceGetAddress
_CSSiriBTDeviceGetDeviceInfo
-[NSNumber(XPCObject) _cs_initWithXPCObject:]
-[NSNumber(XPCObject) _cs_xpcObject]
-[CSFirstUnlockMonitor _stopMonitoring]
kVTPreferencesPhraseSpotterEnabledDidChangeDarwinNotification
-[CSPhraseSpotterEnabledMonitor _checkPhraseSpotterEnabled]
-[CSPhraseSpotterEnabledMonitor _phraseSpotterEnabledDidChange]
corespeechd speaker xpc connection client queue
-[CSVoiceIdXPCConnection initWithConnection:]
-[CSVoiceIdXPCConnection _handleClientEvent:]
-[CSVoiceIdXPCConnection _handleClientMessage:client:]
-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke
-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke_2
-[CSVoiceIdXPCConnection _handleClientError:client:]
com.apple.
com.apple.private.
com.apple.assistant.audio-service-workloop
Internal User Classification
kAFPreferencesDidChangeDarwinNotification
Audio Session Active Delay
Server Media Playback Volume Threshold for Audio Session Activation Delay
Server Audio Session Activation Delay Above Media Playback Volume Threshold
Server Audio Session Activation Delay
com.apple.corespeech.mockremoteplugin.xpc
CSFallbackAudioSessionReleaseProvider
-[CSFallbackAudioSessionReleaseProvider fallbackDeactivateAudioSession:error:]_block_invoke
-[CSFallbackAudioSessionReleaseProvider fallbackDeactivateAudioSession:error:]
CSSPGEndpointAnalyzer
hybridendpointer.json
-[CSSPGEndpointAnalyzer reset]_block_invoke
-[CSSPGEndpointAnalyzer dealloc]
-[CSSPGEndpointAnalyzer stop]_block_invoke
-[CSSPGEndpointAnalyzer clientSilenceFeaturesAvailable:]
-[CSHomePodSettingsMonitor _stopMonitoring]
-[CSAudioTapProvider init]
CSAudioTapProvider.mm
com.apple.siri.acousticsignature
ADAcousticFingerprinter
-[CSSiriAcousticFingerprinter _connectionInterrupted]
-[CSSiriAcousticFingerprinter _connectionInvalidated]
-[CSSiriAcousticFingerprinter _configureWithCurrentASBD]
-[CSSiriAcousticFingerprinter _convertPCMDataForFingerprinting:]
-[CSSiriAcousticFingerprinter appendPCMData:]_block_invoke
v16@?0@"NSData"8
-[CSSiriAcousticFingerprinter flush]_block_invoke_2
ASXSampleRateFromInt
satScore
selfLoggingMHUUID
CSSiriSpeechRecorder.m
speechController != nil
audioSessionController != nil
audioPlaybackService != nil
-[CSSiriSpeechRecorder initWithQueue:speechController:audioSessionController:audioPlaybackService:experimentContext:]
-[CSSiriSpeechRecorder _currentMHUUID:]
-[CSSiriSpeechRecorder _setSpeechCapturingMode:]
-[CSSiriSpeechRecorder _setEndpointerOperationMode:forceUpdate:]
-[CSSiriSpeechRecorder _setAlertsIfNeeded]
siri-begin-improved
v32@?0@"NSNumber"8@"NSNumber"16^B24
-[CSSiriSpeechRecorder _updateRecordBufferDuration]
Speech controller should not be nil.
-[CSSiriSpeechRecorder _speechControllerWithError:]
-[CSSiriSpeechRecorder _resetSpeechController]
-[CSSiriSpeechRecorder _prepareSpeechControllerWithOptions:error:]
requestDuringActiveCall
v16@?0@"NSArray"8
since we have no Voice Controller!
-[CSSiriSpeechRecorder _stopRecordingWithReason:hostTime:]
%d.%d
 Forcing two shot mode to NO
-[CSSiriSpeechRecorder _disableEndpointer]
-[CSSiriSpeechRecorder _playAudioAlert:]
-[CSSiriSpeechRecorder _checkAudioLoggingLimits:]
-[CSSiriSpeechRecorder _prepareDirectoryAtPath:]
-[CSSiriSpeechRecorder _setupAudioFileWritingForSpeechController:info:context:]
-[CSSiriSpeechRecorder _setupAudioFileWritingForSpeechController:info:context:]_block_invoke
PCM-%@-%@.wav
v24@?0@"NSURL"8@?<v@?>16
-[CSSiriSpeechRecorder _setEndpointStyle:]
-[CSSiriSpeechRecorder _stopRecordingForEndpointReason:withEndpointMetrics:]
-[CSSiriSpeechRecorder eagerlyInitializeAudioRecording]
-[CSSiriSpeechRecorder preheatWithOption:]
-[CSSiriSpeechRecorder preheatWithOption:]_block_invoke
-[CSSiriSpeechRecorder recordingInfoForPreheatWithEvent:]
-[CSSiriSpeechRecorder currentVTSatScore]
-[CSSiriSpeechRecorder prepareForMode:]
-[CSSiriSpeechRecorder prepareForMode:withOptions:]
-[CSSiriSpeechRecorder startSpeechCaptureWithContext:willStartHandler:error:]
kAudioSessionProperty_ActiveSessionDisplayIDs
, playing error alert
-[CSSiriSpeechRecorder updateSpeechSynthesisRecord:]
-[CSSiriSpeechRecorder _audioSessionID]
state
v16@?0@?<v@?@"NSDictionary">8
-[CSSiriSpeechRecorder setSpeechRequestOptions:]
-[CSSiriSpeechRecorder _updateAudioContextWithInfo:reason:]
-[CSSiriSpeechRecorder _setAudioContextWithInfo:forReason:]
-[CSSiriSpeechRecorder _updateAudioContextToPostVoiceForReason:]
-[CSSiriSpeechRecorder _updateAudioContextWithPendingInfoForReason:]
-[CSSiriSpeechRecorder releaseAudioSession]
notify
suppress (keep others interrupted forever)
-[CSSiriSpeechRecorder setSpeechWasRecognizedForElapsedTime:isFinal:]
-[CSSiriSpeechRecorder setFingerprintWasRecognized]
-[CSSiriSpeechRecorder stopSpeechCaptureForEvent:suppressAlert:hostTime:]
-[CSSiriSpeechRecorder cancelSpeechCaptureSuppressingAlert:]
-[CSSiriSpeechRecorder forceSuccessAudioAlertOnStop]
-[CSSiriSpeechRecorder _speechRecordingEventListener]_block_invoke
-[CSSiriSpeechRecorder setClientConfiguration:]
-[CSSiriSpeechRecorder playRecordingStartAlert]_block_invoke
-[CSSiriSpeechRecorder _updateAudioDeviceInfo:forReason:forcesUpdate:]
Unavailable
playbackDeviceTypes
-[CSSiriSpeechRecorder _recordingInfoForEvent:audioAlertStyle:includeBTInfo:includeRecordDeviceInfo:]
-[CSSiriSpeechRecorder speechControllerDidStartRecording:audioDeviceInfo:successfully:error:]
-[CSSiriSpeechRecorder speechControllerDidStartRecording:audioDeviceInfo:successfully:error:]_block_invoke
-[CSSiriSpeechRecorder _speechControllerDidStartRecording:successfully:error:]
Opus
Speex
-[CSSiriSpeechRecorder speechControllerDidDeliverLastBuffer:forReason:estimatedSpeechEndHostTime:]
-[CSSiriSpeechRecorder speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:]
-[CSSiriSpeechRecorder speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:]_block_invoke
-[CSSiriSpeechRecorder _speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:]
-[CSSiriSpeechRecorder _speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:]_block_invoke_2
-[CSSiriSpeechRecorder speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:]
-[CSSiriSpeechRecorder speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:]_block_invoke
-[CSSiriSpeechRecorder _speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:atHostTime:mhUUID:]
-[CSSiriSpeechRecorder getAudioRouteInstrumentationWithRecordingInfo:]
-[CSSiriSpeechRecorder speechControllerLPCMRecordBufferAvailable:buffer:recordedAt:]
audio_recording
empty_lpcm_record_buffer
-[CSSiriSpeechRecorder _speechControllerDidReceiveLastAudioRecordBuffer:forReason:estimatedSpeechEndHostTime:isRecordingStopped:]
-[CSSiriSpeechRecorder speechControllerBeginRecordInterruption:withContext:]
-[CSSiriSpeechRecorder speechControllerEndRecordInterruption:]
-[CSSiriSpeechRecorder speechControllerRecordHardwareConfigurationDidChange:toConfiguration:]
-[CSSiriSpeechRecorder speechController:willSetAudioSessionActive:]
-[CSSiriSpeechRecorder speechController:didSetAudioSessionActive:]
-[CSSiriSpeechRecorder speechControllerDidFinishAlertPlayback:ofType:error:]
-[CSSiriSpeechRecorder speechControllerDidFinishAlertPlayback:ofType:error:]_block_invoke
-[CSSiriSpeechRecorder _setLanguageDetectorDelegateIfRequired]
-[CSSiriSpeechRecorder _playStopAlertIfNecessaryForReason:endpointMode:error:]
AVVoice_RecordStoppedWithError
AVVoice_RecordStopped
-[CSSiriSpeechRecorder languageDetectorDidDetectLanguageWithConfidence:confidence:isConfident:]
-[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:]
-[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:]_block_invoke
Two shot feedback
-[CSSiriSpeechRecorder suppressUtteranceGradingIfRequired]
Utterance Grading
-[CSSiriSpeechRecorder suppressUtteranceGradingIfRequired]_block_invoke
-[CSSiriSpeechRecorder speechControllerRequestsOperation:forReason:]
-[CSSiriSpeechRecorder speechControllerRequestsOperation:forReason:completion:]
-[CSSiriSpeechRecorder _speechControllerRequestsOperation:forReason:completion:]
v32@?0d8d16@"NSError"24
-[CSSiriSpeechRecorder speechControllerDidUpdateSmartSiriVolume:forReason:]
-[CSSiriSpeechRecorder endpointer:didDetectStartpointAtTime:]
-[CSSiriSpeechRecorder endpointer:didDetectStartpointAtTime:]_block_invoke
-[CSSiriSpeechRecorder endpointer:didDetectHardEndpointAtTime:withMetrics:]
time
additionalMetrics
@"NSMutableDictionary"8@?0
-[CSSiriSpeechRecorder endpointer:didDetectHardEndpointAtTime:withMetrics:]_block_invoke
-[CSSiriSpeechRecorder _hardEndpointWasDetectedWithMetrics:atTime:]
-[CSSiriSpeechRecorder _performTwoShotPromptForType:atTime:]
suppressedAlert
timedOut
-[CSSiriSpeechRecorder _playPhaticWithCompletion:]
-[CSSiriSpeechRecorder _playPhaticWithCompletion:]_block_invoke
delegate is nil
-[CSSiriSpeechRecorder _handleFakeTwoShotPromptTimeoutWithUUID:]
-[CSSiriSpeechRecorder _handleFakeTwoShotPromptCallbackWithUUID:timestamp:duration:error:]
-[CSSiriSpeechRecorder updateEndpointHintForRC:forceAccept:completion:]
-[CSSiriSpeechRecorder _checkIfLastEndpointHintShouldBeAccepted:]
-[CSSiriSpeechRecorder _checkIfLastEndpointHintShouldBeAccepted:]_block_invoke_2
v24@?0B8B12@"NSArray"16
-[CSSiriSpeechRecorder _enforceEndpointHintWithMitigation:]
-[CSSiriSpeechRecorder enforcePreviousEndpointHint]
-[CSSiriSpeechRecorder performBlockAfterAlerts:timeout:]
-[CSSiriSpeechRecorder performBlockAfterAlerts:timeout:]_block_invoke
-[CSSiriSpeechRecorder acousticFingerprinter:hasFingerprint:duration:]
-[CSSiriSpeechRecorder _startAudioPlaybackRequest:options:completion:]
-[CSSiriSpeechRecorder _startAudioPlaybackRequest:options:completion:]_block_invoke
-[CSSiriSpeechRecorder speakerIdentificationDidDetectSpeakerWithScores:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionOwnerLostNotification:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionOwnerResetNotification:]
Siri
DictationSecureOfflineOnly
FingerprintOnly
SiriSecureOfflineOnly
SiriCoreSymptomsReporter
Class getSiriCoreSymptomsReporterClass(void)_block_invoke
void *SiriCoreLibrary(void)
yyyy_MM_dd-HHmmss.SSS
com.apple.assistant.audio-playback-service
-[CSSiriAudioPlaybackService _prewarmRequest:completion:]
-[CSSiriAudioPlaybackService _startRequest:options:preparationHandler:executionHandler:finalizationHandler:]
-[CSSiriAudioPlaybackService _handlePreparationForSession:]
v16@?0@"<CSSiriAudioPlaybackServiceListening>"8
-[CSSiriAudioPlaybackService _handleExecutionForSession:]
-[CSSiriAudioPlaybackService _handleFinalizationForSession:error:]
v32@?0@"AFAudioPlaybackRequest"8@"<CSSiriAudioPlaybackSession>"16^B24
v24@?0@"<CSSiriAudioPlaybackServiceListening>"8^B16
-[CSSiriAudioPlaybackService _evictAllReusableSessionsForReason:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionOwnerLostNotification:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionOwnerResetNotification:]
StartOfSpeech SPG queue
StartOfSpeech queue
-[CSStartOfSpeechDetector initWithConfig:samplingRate:minSpeechFrames:numLeadingFrames:delegate:]
-[CSStartOfSpeechDetector resetForNewRequest]_block_invoke
-[CSStartOfSpeechDetector clientSilenceFeaturesAvailable:]_block_invoke
-[CSAudioServerCrashMonitor _startMonitoringWithQueue:]_block_invoke
-[CSAudioServerCrashMonitor _startMonitoringWithQueue:]
com.apple.corespeech.voicetriggerservice
-[CSVoiceTriggerXPCClient dealloc]
-[CSVoiceTriggerXPCClient _handleListenerEvent:]
-[CSVoiceTriggerXPCClient _handleListenerError:]
enable
assertion
timestamp
phraseSpotterBypass
bypassTimeout
raiseToSpeakBypass
triggerStats
-[CSVoiceTriggerXPCClient fetchVoiceTriggerStats]
v24@?0@"NSObject<OS_xpc_object>"8@?<v@?>16
_RegisterXPCActivity_block_invoke
com.apple.siri.xpc_activity.power-logging
-[CSCoreSpeechDaemonStateMonitor notifyDaemonStateChanged:]
com.apple.corespeech.corespeechd.launch
-[CSCoreSpeechDaemonStateMonitor _startMonitoringWithQueue:]
-[CSCoreSpeechDaemonStateMonitor _stopMonitoring]
-[CSCoreSpeechDaemonStateMonitor _didReceiveDaemonStateChanged:]
-[CSNetworkAvailabilityMonitor _startMonitoringWithQueue:]
-[CSNetworkAvailabilityMonitor _stopMonitoring]
-[CSNetworkAvailabilityMonitor _availabilityChanged]
-[CSSpeechDetectionDevicePresentMonitor handleSpeechDetectionVADPresentChange:]
-[CSSpeechDetectionDevicePresentMonitor _systemControllerDied:]
-[CSLanguageCodeUpdateMonitorImplDarwin _startMonitoringWithQueue:]
-[CSLanguageCodeUpdateMonitorImplDarwin _stopMonitoring]
-[CSLanguageCodeUpdateMonitorImplDarwin _didReceiveLanguageCodeUpdate:]
-[CSAttSiriMitigationAssetHandler setCachedAsset:]_block_invoke
-[CSAttSiriMitigationAssetHandler _receivedNewAssetUpdate:]
-[CSAttSiriMitigationAssetHandler trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
isRemoteDevice
remoteDeviceUID
remoteDeviceProductIdentifier
remoteDeviceUIDString
%@ {route = %@, isRemoteDevice = %d, remoteDeviceUID = %@, remoteDeviceProductIdentifier = %@, remoteDeviceUIDString = %@}
CSOpportuneSpeakListnerTestService
com.apple.corespeech.opportunelistner.start
com.apple.corespeech.opportunelistner.stop
A945B95D-69F6-FC77-4FAE-91F50A039CD8
-[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStart]_block_invoke
-[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStop]_block_invoke
-[CSOpportuneSpeakListnerTestService opportuneSpeakListener:hasRemoteVADAvailable:]
-[CSOpportuneSpeakListnerTestService opportuneSpeakListener:hasVADAvailable:]
-[CSOpportuneSpeakListnerTestService opportuneSpeakListener:didStopUnexpectly:]
-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]
-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]_block_invoke
CSAudioConverter.m
Cannot produce ASPD for PCM
-[CSAudioConverter reset]
-[CSAudioConverter _configureAudioConverter:]
CreateAudioConverter
-[CSLanguageCodeUpdateMonitor _startMonitoringWithQueue:]
CSLanguageCodeUpdateMonitor.m
-[CSLanguageCodeUpdateMonitor _stopMonitoring]
-[CSLanguageCodeUpdateMonitor notifySiriLanguageCodeChanged:]
BuiltInMicrophoneDevice
CSVoiceTriggerEventInfoProvider Queue
-[CSVoiceTriggerEventInfoProvider fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:]_block_invoke
-[CSVoiceTriggerEventInfoProvider fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:]
-[NSData(Nvi) splitAudioDataToReachSampleCount:currSampleCount:numBytesPerSample:completionHandler:]
CSSmartSiriVolumeRunPolicy queue
-[CSSmartSiriVolumeRunPolicy _addSmartSiriVolumeEnabledConditions]_block_invoke
com.apple.corespeech.audioinjection.xpc
+[CSAudioInjectionServices setAudioInjectionMode:]
+[CSAudioInjectionServices audioInjectionEnabled]
+[CSAudioInjectionServices pingpong:completion:]_block_invoke
+[CSAudioInjectionServices pingpong:completion:]
v28@?0B8@"NSError"12@"NSUUID"20
+[CSAudioInjectionServices createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:]_block_invoke
+[CSAudioInjectionServices createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:]
v36@?0B8@"NSError"12Q20Q28
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:]_block_invoke
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:]
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withNumChannels:completion:]_block_invoke_2
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withNumChannels:completion:]_block_invoke
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withNumChannels:completion:]
+[CSAudioInjectionServices connectDeviceWithUUID:completion:]_block_invoke
+[CSAudioInjectionServices connectDeviceWithUUID:completion:]
+[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]_block_invoke_2
+[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]_block_invoke
+[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]
+[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]_block_invoke_2
+[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]_block_invoke
+[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]
Dpg:%.3f Dpd:%.3f T:%.3f
droppingPrediction
droppedPrediction
voic
carplay
hearst
raisetospeak
auto
-[NSDictionary(XPCObject) _cs_initWithXPCObject:]
-[NSDictionary(XPCObject) _cs_initWithXPCObject:]_block_invoke
B24@?0r*8@"NSObject<OS_xpc_object>"16
-[NSDictionary(XPCObject) _cs_xpcObject]_block_invoke
v32@?0@8@16^B24
detector-config
supported-locales
detector.json
sos-options.json
SPG.json
Builtin Microphone
[Context = %ld]
[DeviceId = %@]
[Announced = %d]
[streamHandleId = %d]
[startHostTime = %llu]
[startAlert = %d]
[stopAlert = %d]
[stopOnErrorAlert = %d]
[skipAlert = %@]
-[CSAudioRecorder initWithQueue:error:]
-[CSAudioRecorder userSessionActivateMonitor:didReceivedUserSessionActiveHasChanged:]_block_invoke
-[CSAudioRecorder willDestroy]
-[CSAudioRecorder dealloc]
-[CSAudioRecorder _destroyVoiceController]
-[CSAudioRecorder _voiceControllerWithError:]_block_invoke
-[CSAudioRecorder _voiceControllerWithError:]
-[CSAudioRecorder setAnnounceCallsEnabled:withStreamHandleID:]
-[CSAudioRecorder setContext:completion:]
-[CSAudioRecorder setCurrentContext:streamHandleId:error:]
-[CSAudioRecorder prepareAudioStreamRecord:recordDeviceIndicator:error:]
-[CSAudioRecorder _startAudioStreamForAudioInjectionWithAVVCContext:]
-[CSAudioRecorder startAudioStreamWithOption:recordDeviceIndicator:error:]
-[CSAudioRecorder stopAudioStreamWithRecordDeviceIndicator:error:]
-[CSAudioRecorder isSessionCurrentlyActivated]
-[CSAudioRecorder recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
%llu
-[CSAudioRecorder audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
-[CSAudioRecorder recordingSampleRateWithStreamHandleId:]
-[CSAudioRecorder isNarrowBandWithStreamHandleId:]
-[CSAudioRecorder prewarmAudioSessionWithStreamHandleId:error:]
iPhone9,1
iPhone9,2
iPhone9,3
iPhone9,4
-[CSAudioRecorder setRecordMode:streamHandleId:error:]
-[CSAudioRecorder activateAudioSessionWithReason:streamHandleId:error:]
-[CSAudioRecorder deactivateAudioSession:error:]
-[CSAudioRecorder deactivateAudioSession:streamHandleId:error:]
+[CSAudioRecorder createSharedAudioSession]
-[CSAudioRecorder enableSmartRoutingConsiderationForStream:enable:]
-[CSAudioRecorder setDuckMixWithOthersForStream:duckOthers:duckToLevelInDB:mixWithOthers:]
+[CSAudioRecorder resetDuckSettings]
-[CSAudioRecorder enableMiniDucking:]
-[CSAudioRecorder configureAlertBehavior:audioStreamHandleId:]
isBluetoothConnected
-[CSAudioRecorder voiceTriggerInfoWithRecordDeviceIndicator:]
-[CSAudioRecorder isDuckingSupportedOnCurrentRouteWithStreamHandleID:error:]
is not
-[CSAudioRecorder _updateLanguageCodeForRemoteVTEIResult:]
useRemoteBuiltInMic
-[CSAudioRecorder _processAudioBuffer:audioStreamHandleId:arrivalTimestampToAudioRecorder:]
-[CSAudioRecorder _compensateChannelDataIfNeeded:receivedNumChannels:]
-[CSAudioRecorder _trackRemoteAccessoryStreamIdIfNeeded:]
-[CSAudioRecorder playRecordStartingAlertAndResetEndpointerFromStream:]
-[CSAudioRecorder playAlertSoundForType:recordDevideIndicator:]
-[CSAudioRecorder voiceControllerDidStartRecording:forStream:successfully:error:]
-[CSAudioRecorder voiceControllerAudioCallback:forStream:buffer:]
-[CSAudioRecorder voiceControllerDidStopRecording:forStream:forReason:]
-[CSAudioRecorder voiceControllerStreamInvalidated:forStream:]
-[CSAudioRecorder voiceControllerRecordHardwareConfigurationDidChange:toConfiguration:]
-[CSAudioRecorder voiceControllerDidFinishAlertPlayback:ofType:error:]
-[CSAudioRecorder voiceControllerEncoderErrorDidOccur:error:]
-[CSAudioRecorder voiceControllerBeginRecordInterruption:]
-[CSAudioRecorder voiceControllerBeginRecordInterruption:withContext:]
-[CSAudioRecorder voiceControllerEndRecordInterruption:]
-[CSAudioRecorder voiceControllerWillSetAudioSessionActive:willActivate:]
-[CSAudioRecorder voiceControllerDidSetAudioSessionActive:isActivated:]
-[CSAudioRecorder voiceControllerMediaServicesWereLost:]
-[CSAudioRecorder voiceControllerMediaServicesWereReset:]
-[CSAudioRecorder _hasLocalPendingTwoShot]_block_invoke
-[CSAudioRecorder _getRecordSettingsWithRequest:]
-[CSAudioRecorder _fetchRemoteRecordClientWithDeviceId:streamHandleId:]
CSCommandControlBehaviorMonitor
-[CSCommandControlBehaviorMonitor notifyWillStartStreamWithContext:option:]_block_invoke
-[CSCommandControlBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:]_block_invoke
-[CSCommandControlBehaviorMonitor notifyWillStopStream:]_block_invoke
-[CSCommandControlBehaviorMonitor notifyDidStopStream:]_block_invoke
[profileId: %@, language: %@, product: %@, version: %@, homeId: %@, name: %@]
{isVT=%d, requestHistoricalAudio=%d, reqStartAudioSampleId=%lu, reqStartMachAbsTime=%llu}
-[NSData(XPCObject) _cs_initWithXPCObject:]
+[CSEndpointerFactory endpointerProxy]
CSOpportuneSpeakEventMonitor
-[CSOpportuneSpeakEventMonitor isStreaming]
+[NviSignalData headerString]
-[NviSignalData stringForLogging]
{%@:ts=%lld}
%s input dictionary is nil
%s Tagging as handheld as user interacted in last %f secs
%s Tagging as farfield as last user interaction %f secs back
%s Tagging as FarField as user dismissed
%s Dealloc CSAudioInjectionEngine : %@
%s Looking up audio diff:%llu sampleCount:%llu %@
%s First Pass Score : %f, First Pass Best Start : %llu, First Pass Best End : %llu
%s Unable to write to o/p stream ! 
%s Got event! %lu
%s Got unhandled evt code %lu 
%s STDynamicActivityAttributionPublisher reporting Dictation with bundleID: %{public}@
%s STDynamicActivityAttributionPublisher reporting Siri
%s STDynamicActivityAttributionPublisher reporting Siri and Dictation
%s Start monitoring: wake Gesture
%s %{public}@ deallocated
%s audioProvider not exist
%s Start Monitoring : AudioSession notification from corespeechd
%s Stop Monitoring : AudioSession notification from corespeechd
%s reset sessionInfoProvider since xpcClient disconnected
%s CoreSpeech Daemon reset notification
%s %@ task delivered.
%s %@ completed with response %@ and error %@.
%s Get initial state from MediaRemote: media is on playing state %{public}ld.
%s Start monitoring MediaRemote: media playback
%s Stop monitoring MediaRemote: media playback
%s MediaRemote reported the now playing app playback state changed to %s (state %d)
%s Celestial is not available on this platform.
%s notification = %{public}@
%s MobileTimer is not available on this platform.
%s Dealloc audioStreamHolding : %{public}@
%s ERR: topScoringUser is nil from %{public}@
%s ERR: invalid arguments passed %{public}@ %{public}@
%s ERR: Incorrect category %{public}d passed
%s ERR: Failed to get remote proxy object for AttSiriXPC: %@
%s _remoteSvcProxy is nil!
%s ctx=%@
%s Client Interruption Handler: %{public}@, client PID: %{public}d)
%s Client Invalidation Handler: %{public}@, client PID: %{public}d exited
%s triggerInfo: %@
%s Clearing pending homekit accessory voice trigger %{private}@
%s Handling Pending Remora VoiceTrigger Event
%s Time since last pending remora voice trigger %f. Ignoring.
%s Clearing pending built-in voice trigger %{private}@
%s Handling Pending BuiltInVoiceTrigger Event
%s Time since last pending builtin voice trigger %f. Ignoring.
%s client: %lu, deviceId: %{private}@
%s Setting mixable to yes as we are in an active call
%s Dilation factor requested for device default!
%s V Spread requested for device default!
%s V Offset requested for device default!
%s H Offset requested for device default!
%s Music steepness requested for device default!
%s Minimum TTS volume for ASV disabled case requested for device default!
%s Cannot access to %{public}@ %{public}@ using default value=%{public}@
%s ERR: Failed to establish XPC connection!
%s Requesting RTS %{public}@ bypass for %{public}lf seconds
%s voiceTriggerXPC client not exist
%s reset xpcClient since it disconnected
%s Start monitoring : VoiceTrigger Asset Download
%s Stop monitoring : VoiceTrigger Asset Download
%s New VoiceTrigger is now installed
%s Resetting audio preprocessor : %{public}f, containsVoiceTrigger:%{public}d
%s Flushing audio preprocessor
%s Zero Filter Metrics: %{public}@
%s Beep Canceller Metrics : %{public}@
%s Another non eligible app is recording
%s CSBenchmarkService Interrupted
%s CSBenchmarkService Invalidated
%s XPC connection not exist?
%s %@: %@
%s Result: %@
%s Couldn't find keychain value %@ for account %@ %{public}d
%s SmartSiriVolume cannot be resumed since we should not monitor audio
%s ContinousAudioFingerprint cannot be resumed since we should not monitor audio
%s Trying to access BTLocalDevice
%s Accessing BTLocalDevice
%s BTLocalDevice %{public}p
%s Getting connected devices from local device %p...
%s Got %tu connected devices from local device %p.
%s Failed getting connected devices from local device %p (result = %d).
%s Local device is NULL.
%s Failed getting address from BTDevice %p (result = %d).
%s Failed to get sharing enable flag : %d
%s Failed getting sharing device addresses %d
%s Failed converting address from BTDeviceAddress (result = %d).
%s Device is temporary paired and not in contacts
%s Detaching bluetooth session : %{public}p
%s Already Attaching Bluetooth Session
%s Start attaching bluetooth session
%s session = %{public}p, result = %{public}d
%s session = %p
%s detached session is different from currently attached session, ignore
%s terminated session is different from currently attached session, ignore
%s Bluetooth Session is NULL
%s Failed to get default local device from session %{public}p, (result = %{public}d)
%s Failed to add local device callback from session %{public}p, (result = %{public}d
%s Failed to fetch local deviceId, abort
%s Sending HID report (length = %{public}lu) to host with deviceId info (%{public}@)
%s Start monitoring: siri assertion enable/disable
%s Stop monitoring: siri assertion enable/disable
%s did receive enable assertion
%s did receive disable assertion
%s accessoryId %{private}@
%s Start monitoring : SpeakerRecognition Asset Download
%s Stop monitoring : SpeakerRecognition Assets Download
%s New SpeakerRecognition Assets is now installed
%s ERR: Delegate received for invalid Trial assetType:%lu
%s ::: Error reading file %@, err: %d
%s CSAudioFileReader requires prepare recording settings to feed audio
%s CSAudioFileReader only support LinearPCM to feed
%s Setting ExtAudioFileSetProperty failed : %d
%s Starting audio file feed timer, bufferDuration = %f sampleRate = %f, bytesPerFrame = %d, channelsPerFrame = %d
%s ::: Error reading data from audio file : %d
%s Reach to EOF, chunkSize = %d
%s Stopping audio file feed timer
%s Start monitoring : AdBlocker Asset Download
%s Stop monitoring : AdBlocker Asset Download
%s New AdBlockerAsset is now installed
%s Received active route change notification
%s Start monitoring : AudioRouteChangeMonitor
%s Stop monitoring : AudioRouteChangeMonitor
%s Notifying Hearst Routed State : %{public}d
%s Notifying Siri Input Source Out Of Band State : %{public}d
%s Cannot create SampleRateConverter using AudioConverterNew : %{public}d
%s Cannot set Quality property to audioConverter
%s Cannot set Complexity property to audioConverter
%s Override result as 'mpty'
%s Audio resampling done : %lu
%s AudioConverter is sad: 0x%{public}xd
%s Cannot start monitoring language detector asset, since we already registered
%s LanguageDetector supported locale is nil : %{public}@
%s %p (sessionUUID = %@)
%s %p (sessionUUID = %@
%s %p
%s %p (startSpeechId = %@)
%s %p (selectedResultCandidateId = %@)
%s %p (allows = %d, resultCandidateId = %@)
%s route = %@, deviceIdentifier = %@, deviceUID = %@
%s %p (recordedAudioFileURL = %@)
%s %p (audioRecordContext = %@)
%s %p (audioRecordDeviceInfo = %@)
%s %p (voiceTriggerInfo = %@)
%s %p (recordingInfo = %@)
%s %p (recordingSettings = %@)
%s %p audioActivationInfo = %@
%s %p effectiveDate = %@ (%f)
%s %p (error = %@)
%s %p (relinquishmentContext = %@)
%s %p startRecordingAudioSessionAssertion = %@
%s %p audioActivationInfo = %@, time = %f
%s %p twoShotDetectionAudioSessionAssertion = %@
%s %p hostTime = %llu
%s %p context = %@
%s %p error = %@
%s %p (_recordedAudioFileURL = %@)
%s %p (_audioFileWriter = %@)
%s recordingSettings was nil
%s No alert behavior in recordingSettings
%s No alert style specified for record starting
%s Myriad won & voice trigger present, donating recorded audio to CoreSpeech.
%s %p No recorded audio.
%s %p Access to payload audio at %@ is %@, setting payload recording flag for CoreSpeech.
%s %p Donating recorded audio at %@...
%s %p Failed to donate recorded audio at %@ for  VoiceID training (error = %@).
%s %p Donated recorded audio at %@ for  Voice VoiceID training.
%s %p Removing recorded audio at %@...
%s %p Removed recorded audio at %@.
%s %p Failed to remove recorded audio at %@ (error = %@).
%s Creating SmartSiriVolume connection
%s SmartSiriVolume Remote Object Proxy is nil
%s SmartSiriVolume Failed to get estimate with %{public}@
%s SmartSiriVolume didChangeForReason: %{public}d
%s ERR: SmartSiriVolume Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: SmartSiriVolume ssvConnection is nil
%s Dealloc CSAudioInjectionProvider : %@
%s Stopping Audio Injection Provider : %@
%s Calling start audio stream : %@ %@
%s Calling stop audio stream : %@
%s xpc object string return nil
%s xpc object should be XPC_TYPE_STRING
%s Start Listening request with deviceId : %{public}@
%s CSOpportuneSpeakListener received didStart : %{public}d, %{public}@
%s remoteVADDuration = %{public}d, spgDuration = %{public}d, _remoteVADSPGRatio = %{public}d
%s AudioStreamRequest has failed : %{public}@
%s CSOpportuneSpeakListener received didStop : %{public}d, %{public}@
%s Request stop CSOpportuneSpeakListener
%s Audio coming from DoAP should contains RemoteVAD
%s boronScore : %{public}d, reportBoron : %{public}d, slienceScore : %{public}lf
%s cannot handle nil event 
%s ignore unknown types of message: %{public}@
%s cannot handle nil error
%s Listener connection disconnected
%s connection error: %{public}s
%s Required values is nil, bailout
%s _bestStartDetectSample %lu was greater than _bestEarlyDetectSample %lu or _bestEndDetectSample %lu
%s _bestEarlyDetectSample %lu was greater than _bestEndDetectSample %lu
%s _speechVoiceLevel %lu is 0
%s _numberOfTotalFramesETFT %lu is 0
%s Current wireless splitter info = %{public}@
%s Received WiressSplitterStateChange
%s Start monitoring : Wireless Splitter start
%s Cannot start monitoring Wireless Splitter because it was already started
%s Stop monitoring : Wireless Splitter
%s Not supported on this platform
%s disconnect activationXPCClient
%s cannot handle event : event = %{public}p
%s ignore unknown types of message 
%s cannot handle error : error = %{public}p
%s Creating LanguageDetector with config: %{public}@
%s Cannot initialize language detector since model file is not exits
%s Cannot access asset : %{public}@
%s Current LanguageDetector request cancelled
%s Setting interaction ID for current request: %@
%s Failed to initialize StartOfSpeechDetector !
%s Recoreded language array: %@ Language Prior Dictionary: %@
%s Setting NumLatestLanguages to %{public}lu 
%s Json file doesnt exist at: %{public}@
%s Could not read Json file at: %{public}@, err: %{public}@
%s Failed to parse json at: %{public}@, err: %{public}@
%s Error writing out SoS info meta: %{public}@
%s _EARLanguageDetectorLoggingInfo = %{public}@
%s _EARLanguageDetectorLoggingInfo analytics context %{public}@
%s %{public}@ isConfident %{public}d
%s LanguageDetector State: %ld
%s Saving circular buffer from %{public}lu to %{public}lu
%s Siri language is nil, falling back to %@
%s endpointUUID not provided, fallback to legacy query
%s Failed to query language code with endpointId %@, trying legacy query
%s splitterState : %{public}lu, shouldDisableSpeakerVerification : %{public}@
%s This call is not supported on darwinOS device (splitterState)
%s Advert data: %{public}@
%s advert data write failed
%s %{public}.2f ms after firstBufferStart
%s Invalid timestamp (currentMachTime: %{public}llu timestamp: %{public}llu)
%s Invalid timestamp (currentMachTime: %{public}llu arrivalTimestamp: %{public}llu)
%s numOfAudioPackets: %{public}lu, numOfValidTrailingPackets: %{public}lu, numOfValidTrailingSpeechPackets: %{public}lu, 
trailingPktLatencies: %{public}@ 
trailingPktSpeechLatencies: %{public}@
%s Fetching CommandControl Listening State: %d
%s Failed to fetch recording client info, error : %{public}@
%s Start monitoring : AVVC recording client count
%s Stop monitoring : AVVC recording client count
%s Reset AVVC recording client count due to audio server crash
%s update AVVC recording client # : %{public}lu
%s Error getting file path from provided file handle; will create our own path and handle
%s Failure disposing audio file %{public}d
%s Error removing item at URL %{public}@
%s Configuring with asbd %.4s
%s Creating audio file at URL %@
%s Failed creating audio file at url %{public}@ %{public}d
%s Error setting input format %{public}d
%s No audio file to append data
%s Failed writing audio file %{public}d
%s No file url on flush
%s Failed opening fd for flushed audio file %{public}s
%s inASBD->mChannelsPerFrame = %lu
%s Error getting format info for type %{public}.4s %{public}.4s
%s CoreSpeechXPCConnection Invalidated
%s making connection to corespeechd with (%{public}d)
%s Asking VoiceTrigger locale to corespeechd
%s Current VoiceTrigger Locale = %{public}@
%s Cannot get Current VoiceTrigger Locale, falling back to en-US : %{public}@
%s Asking current VoiceTrigger aset for %{public}d.%{public}d
%s Asking keyword language given Jarvis language list %{public}@, jarvis-selected language: %{public}@
%s CSCoreSpeechServices Invalidated
%s Request updated SAT audio succeed.
%s Request updated SAT audio failed.
%s VoiceTriggerDuringCall enabled = %{public}@
%s VoiceTrigger during a call is already %{public}@, received duplicated notification!
%s speechController = %{public}p
%s xpcListener = %{public}p
%s context = %{public}@
%s Failed to create audio recorder : %{public}@
%s For Context : %{public}@, audioStreamId(%llu) has allocated
%s Failed to get audio stream handle ID : %{publid}@
%s has match with audio stream handle id : %llu
%s does not match with audio stream handle id(%llu), creating new audio provider
%s No audioRecorder available, return nil for audioProvider
%s have matched audioProvider with stream handle id : %llu
%s provider's streamId(%tu) is invalid, return nil
%s don't have matched audioProvider with stream handle id : %llu, need to create one later
%s audioProvider[%{public}@] invalidated with streamHandleId : %{public}llu
%s No matched audioProvider found for streamHandleId : %{public}llu
%s Received VoiceTrigger cached asset change notification, let's reinitialize VoiceTrigger
%s Trying to start clear logging files
%s Clear logging file timer is already started, ignore startClearLoggingFilesTimer request.
%s SpeechEndEstimation: trailingSilenceDuration = %{public}f
%s SpeechEndEstimation: TrailingSilenceDuration at endpointer(%{public}f) is longer than threshold(%{public}f), force to make 0
%s SpeechEndEstimation: _lastAudioChunkHostTime = %{public}llu, estimatedSpeechEndHostTime = %{public}llu
%s Start Listening for Command Control
%s Calling didStart of CSCommandControlListener
%s Stopping stopListenWithCompletion
%s Calling didStop of CSCommandControlListener
%s Calling didStopUnexpectly
%s Received xpc disconnection, audioStream is streaming = %{public}d
%s init-_currentLanguageCode: %{public}@
%s Asset Manager Policy has been %{public}@
%s Asset Manager Policy has been enabled, start fetching meta data now
%s Need to fetch remote meta now, since we have new asset need to be downloaded
%s Does not need to fetch remote meta now
%s Cannot fetch VoiceTrigger asset meta data
%s Undefined assetType : %{public}u
%s _currentLanguageCode changed: %{public}@
%s Trying to start download meta data
%s Periodical downloading is already scheduled, ignore request.
%s No periodical downloading is scheduled, ignore request.
%s Endpointer Failed to get epVersion
%s elapsed time = %{public}lf
%s Endpointer Failed to get elapsedTimeWithNoSpeech
%s Endpointer Failed to get endPointAnalyzerType
%s Creating RemoteServiceProxy
%s ERR: Endpointer Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: Endpointer endpointerConnection is nil
%s Endpointer didDetectHardEndpointAtTime %f withMetrics %@
%s Not supported on this platform.
%s ERR: Mach Service Name is nil - Bailing out
%s ERR: Proxy Object is nil - Bailing out
%s ERR: Exported interface is nil - Bailing out
%s Set up queue for %@
%s Started listening for %{public}@
%s Service %{public}@ dealloced - %{public}@
%s Got connection on service %{public}@
%s [Service:%{public}@] Invalid listener - %{public}@
%s Rejecting connection to %{public}@ due to entitlement
%s [Service:%{public}@] Listener Interruption Handler: %{public}@, client PID: %{public}d)
%s [Service:%{public}@] Listener Invalidation Handler: %{public}@, client PID: %{public}d exited
%s machServiceName(%@) with clientConnCount:%lu 
%s Sending message to remote object: %@
%s RemoteObjectProxy is nil for client PID (%{public}d)
%s [Service:%{public}@]
%s Using audioInjectionProvider as recorder
%s Record Context: %{public}@
%s Calling startController
%s Ignore request since it is already started
%s settings : %{public}@
%s Session Provider does not exist
%s Received special error code that corespeech needs to setContext and activate audio session again
%s CSSpeechController is already streaming audio.., we don't need to create another audio stream here
%s Prepare audio stream succeeded ? %{public}@, error - %{public}@
%s audioStreamWithRequest succeeded ? %{public}@, error - %{public}@
%s Failed to get audioStream : %{public}@
%s AudioStreamProvider is not existing?
%s Skipping audio converter setup
%s Done prepareRecord with result: %{public}@.
%s xpcClient not existing
%s received lastVoiceTriggerInfo %{public}@, lastRTSTriggerInfo %{public}@
%s ConfigSupportsDucking: %{public}d
%s Stream provider does not exist
%s Failed due to error %@.
%s Activating Audio Session Now Sync.
%s Activating Audio Session Now Async.
%s Device supports ducking on speaker output we should check config.
%s StreamProvider is already recording
%s duckingDelayedTime = %{public}f, timeIntervalSinceLastTriggerEnd = %{public}lf
%s Failed activate audio session with %{public}f seconds delay from prepareRecordWithSettings due to error %{public}@.
%s Finished activate audio session with %{public}f seconds delay from prepareRecordWithSettings.
%s Cancelled activate audio session with %{public}f seconds delay from prepareRecordWithSettings.
%s Scheduled activateAudioSession with %{public}f seconds delay in prepareRecordWithSettings.
%s Delayed active audio session: Consumed token %{public}@ with %{public}f seconds delay for reason %{public}@.
%s Delayed active audio session: Activating audio session for reason %{public}@.
%s Delayed active audio session: Failed to activate audio session for reason %{public}@ due to error %@.
%s Delayed active audio session: Successfully activate audio session for reason %{public}@.
%s Delayed active audio session: Ignored activating audio session for reason %{public}@ because the validator rejected.
%s Delayed active audio session: Ignored activate audio session for reason %{public}@ because the scheduled token %{public}@ does not match the current token %{public}@.
%s Delayed active audio session: Scheduled new token %{public}@ with %{public}f seconds delay for reason %{public}@.
%s Delayed audio session activate: Cancelled token %{public}@ for reason %{public}@.
%s Delayed audio session activate: Consumed token %{public}@ in advance for reason %{public}@.
%s Delayed audio session activate: Activating audio session for reason %{public}@.
%s Delayed audio session activate: Failed to activate audio session for reason %{public}@ due to error %@.
%s Delayed audio session activate: Successfully activate audio session for reason %{public}@.
%s Creating fake session activation notification for session activation now
%s Scheduling Lazy Audio Session activation with %f timeout
%s Lazy session activate success
%s Lazy Audio Session is not configured.
%s Creating fake session activation notification for session activation failure : %{public}@
%s Activating audio session now
%s AudioSession activated successfully ? %{public}@
%s AudioSession Provider not available
%s Falling back to button record type for context whose record type previously is set to unspecified for accessory %{private}@.
%s recordContext : %{public}@
%s Will skip setting current record context because we were in active call and context was post or auto
%s Resetting CoreSpeech frameworks
%s Ask start recording with requestMHUUID: %@
%s Disable audio converter since local asr is going to be used
%s Enable audio converter
%s Disable prewarming local asr at startRecording
%s TriggerlessDictation: Ask start recording from: %{public}tu
%s Ask start recording from: %{public}tu
%s Voice trigger to use the current voice triggered channel: %{public}tu
%s Auto prompt to use the last voice triggered channel: %{public}tu
%s SpeechController to receive data from default channel
%s SpeechController to receive data from channel %{public}tu
%s Trying to prepare uncompressed audio logging
%s Local ASR is used, uncompressed audio logging is disabled
%s Ask delay audio session active by %{public}f seconds
%s Postpone calling audio session activation til we receive didStart
%s Sending client speechControllerDidStartRecording successfully? %{pubic}@, audioDeviceInfo = %{public}@
%s Sending client speechControllerDidStartRecording successfully? %{pubic}@
%s Report unexpectedly long launch latency %{publlic}.3f
%s audioStream not existing
%s _activateAudoiSessionWithDelay has failed. startRecordWithSettings has failed
%s Start recording invoked too late (%{public}.3f seconds), override scheduledCheckTime: %{public}llu to currentTime: %{public}llu
%s Scheduled audible feedback decision after %{public}.3fseconds (vtEndMachTime: %{public}llu currentMachTime: %{public}llu)
%s Two shot audible feedback decision not needed since we already stopped recording
%s Two shot audible feedback decision (%{public}.3fs later than the scheduled time), elapsedTimeWithNoSpeech: %{public}.3f
%s Two shot audible feedback is %{public}@needed. (isMediaPlaying = %{public}d, canPlayPhaticDuringMediaPlayback = %{public}d)
%s Two shot audible feedback should notify? [%{public}@]
%s Two shot audible feedback is prevented by Myriad decision.
%s Two shot audible feedback decision timed out while waiting for Myriad decision
%s Audible feedback not needed since we already stopped recording
%s Audible feedback decision elapsedTimeWithNoSpeech: %{public}.3f
%s Notifying scheduled audible feedback playback...
%s Failed to playback audible feedback, error: %{public}@
%s Asking stopRecording when audio stream is not existing
%s Scheduling StopRecording After HostTime=%{public}llu
%s Options: %{public}@ at: %{public}llu
%s Reporting didDeliverLastPacket at: %{public}llu
%s SpeechEndEstimation: %{public}llu
%s Reason : %{public}ld
%s SpeechEndEstimation: Should Estimate SpeechEndHostTime
%s SpeechEndEstimation: Reporting didStop with estimated speech end : %{public}llu, at: %{public}llu, audioDeviceInfo: %{public}@
%s SpeechEndEstimation: Reporting didStop with estimated speech end : %{public}llu, at: %{public}llu
%s Currently playing App : %d
%s name : %@, version : %@
%s _didDeliverLastPacket=%d. Dropping Audio packets of size=%lu
%s chunk.hostTime=%{public}llu, chunkSz=%{public}lu, stopOptions=%{public}@, _numTrailingSamplesAfterSchedulingStop=%{public}lu, maxAllowedSamples=%{public}lu
%s STOPRECORDING: Reached MAX allowed trailing samples AFTER stopRecording was scheduled!
%s STOPRECORDING: chunk.hostTime=%{public}llu >= stopOptions=%{public}@
%s SpeechManager still forwarding audio after didStopForwarding, we shouldn't have this
%s STOPRECORDING: chunk.endHostTime=%{public}llu >= stopOptions=%{public}@
%s AudioProvider is invalidated, teardown connection to audioprovider
%s Ignore session active notification
%s SmartSiriVolume update reason: %lu
%s SpeechController is trying to forward encoded audio after didStopForwarding, we shouldn't have this
%s Setting Alert Sounds From : %{public}@ for AlertType : %{public}d, force : %{public}@
%s Creating Audio Power Meter with record route %{public}@
%s We don't need Audio Power Meter with record route %{public}@
%s Not available
%s Reported 2-shot at: %{public}f secs
%s _delegate doesnt respond to speechControllerDidDetectVoiceTriggerTwoShot
%s Requesting QuickStop operation upon detecting keyword
%s _isHybridUODEnabled: %d, _endpointId: %@, _rcHandlingClient: %@, languageCode: %@
%s Unexpected audioFormat for ATV : %{public}u
%s Create audioDecoder for audioFormat %{public}u
%s Creating xpcClient
%s Unable to setup audioProvider
%s Establishing xpcClient connection...
%s Unable to prepareAudioProvider in _xpcClient, teardown XPC connection again
%s endpointerModelVersion called when HEP is not supported
%s return hybrid model version for sirix request
%s Queried endpointerModelVersion: %{public}@
%s Cancelling current language detector request !
%s Received Myriad started
%s Received Myriad finished with decision: %tu
%s Detected sound is%{public}@ playing: media(%d) alarm(%d) timer(%d)
%s XPCConnection disconnected
%s reset audioProvider since xpcClient disconnected
%s Playback is active: %{public}d on accessory: %{private}@
%s Alarm is playing: %{public}d on accessory: %{private}@
%s Timer is playing: %{public}d on accessory: %{private}@
%s Now Playing State has changed %d
%s Alarm firing
%s Alarm dismissed
%s Timer firing
%s Timer dismissed
%s SSR Remote Object Proxy is nil
%s Successfully created SSR connection
%s ERR: SSR Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: SSR ssrConnection is nil
%s scoreCard is nil!
%s CS doesn't have ndblobbuilder!
%s latestMajorVersion = %d, LatestMinorVersion = %d
%s corespeech.json doesn't contains rtblobs
%s blob file name is not exists
%s blob file is not exists at %{public}@
%s Reading blob from : %{public}@
%s Blob is nil : %{public}@
%s Locale map for %{public}@ is not available on asset
%s request = %@, options = %@
%s error = %@
%s prepared
%s Player item %@ status is failed with error %@.
%s Created player item %@ from URL %@.
%s Created player item %@ from WAVE asset with %tu bytes of data .
%s Unable to create player item.
%s Created player %@.
%s Unable to replace current item of player %@. Expected current item is %@, actual current item is %@.
%s Player item %@ status is ready to play.
%s Timed out when waiting for player item %@ status to change to ready to play.
%s Successfully changed player item %@ status to ready to play.
%s Failed to change player item %@ status to ready to play due to error %@.
%s Attempted to start %@ when it is already active.
%s Failed to prepare %@ due to error %@.
%s Failed to start %@ because it is already inactive after preparation.
%s Failed to start %@ because it is already inactive after player seek to begin.
%s Failed to start %@ because player failed to seek to begin.
%s started
%s Reset player item %@.
%@ Interrupted
%@ Invalidated
Dealloc-ing
personalizedLMPath=%@ fidesPersonalizedLMPath=%@
Client is 24-hour job
Client is DictationPersonalizationFidesPlugin
Client is PersonalizedLmFidesPlugin
Received an error while accessing %@ service: %@
Invalidating
%s Start monitoring : SelfTrigger switch, SelfTrigger is %{public}@
%s Stop monitoring : SelfTrigger switch
%s Set SelfTrigger Enable = %{public}@
%s CSVoiceTriggerAsset found: %{public}@
%s Asset Query failed : %{public}@
%s cached asset:%{public}@, new asset:%{public}@
%s New asset is same as cached asset, ignore notification
%s New asset is different from cached one. Updating cached asset
%s new VoiceTrigger asset downloaded
%s Language Code Changed : %{public}@
%s Start Recording Host Time = %{public}llu
%s %p created
%s %p dealloced
%s sp=%p
%s %@ not supported yet.
%s Failed to create: %@
%s SigPrvdrs: %@
%s Starting datasrc: %@
%s Failed to start %@. Err=%@
%s >>> All DataSources Started within timeout of 2secs: timeTaken=%f ms
%s WARN: DataSources Start timedout. timeout=2secs
%s Starting signal provider: %@
%s Failed to start %@: Err=%@
%s >>> All SignalProviders didStart within timeout of 2secs: timeTaken=%f ms
%s WARN: SignalProviders timedout didStart. timeout=2secs
%s >>> All DataSources Stopped within timeout of 2secs: timeTaken=%f ms
%s WARN: DataSources timedout stopping. timeout=2secs
%s Failed to stop %@: Err=%@
%s >>> All SignalProviders didStop within timeout of 2secs: timeTaken=%f ms
%s WARN: SignalProviders timedout didStop. timeout=2secs
%s WARN: Cannot find SignalProvider for %@. Skipping
%s Initializing new xpcConnection
%s Sending XPCClientType : %{public}d
%s Prepare Audio Provider with Context : %{public}@
%s Failed to get reply result correctly
%s Received alertStartTime = %{public}llu
%s Received peakPower = %{public}f
%s Received averagePower = %{public}f
%s Sending audioMetric request
%s Failed to get audioMetric reply
%s audioMetric : %{public}@
%s Received invalid audioMetric
%s Error creating message
%s audioStreamWithRequest for stream %{public}@
%s xpcConnection not exist
%s Invalid message: stream is nil or request is nil
%s PrepareAudioStream %{public}@
%s Sending AcousticSLResult request
%s Failed to get AcousticSLResult reply
%s Received AcousticSLResult %{public}@
%s Failed to parse AcousticSLResult from raw data
%s Message not valid
%s Sending VoiceTriggerInfo request
%s Failed to get VoiceTriggerInfo request
%s Received VoiceTriggerInfo %{public}@
%s Failed to parse VoiceTriggerInfo from raw data
%s Received rtsTriggerInfo %{public}@
%s Failed to parse rtsTriggerInfo from raw data
%s Not implemented
%s NO reply!!!
%s No message!!
%s No reply for hostTimeFromSampleCount request with sampleCount %{public}llu
%s xpcConnection not existing
%s No message for hostTimeFromSampleCount request with sampleCount %{public}llu
%s No reply for sampleCountFromHostTime request with hostTime %{public}llu
%s No message for sampleCountFromHostTime request with hostTime %{public}llu
%s Cannot handle nil message
%s Unexpected message type : %{public}lld
%s AlertProvidingDelegate messageType : %{public}lld
%s Unexpected type : %{public}lld
%s SessionProvidingDelegate messageType : %{public}lld
%s context : %{public}@
%s invalid context
%s SessionInfoProvidingDelegate messageType : %{public}lld
%s Received notificationInfo %{public}@
%s Failed to parse notificationInfo from raw data
%s ::: incrementing false wakeup to %{public}llu
%s PowerLog : HeySiriFalseTrigger numFalseWakeUp:%{public}d, secondsSinceLastReport:%{public}lf, phrase:%{public}@
%s ::: accumulated false wakeup count is %{public}llu so far, not reporting yet because it has been only %{public}.2f seconds since last report with current phrases %{public}@
%s Sending event with non determenistic triggerLengthSampleCount %llu, triggerLengthSampleCountDetermenisticFromFirstPass %llu, and delta of %lld samples
%s Smart Siri Volume not supported on this platform - Bailing out
%s ERR: Failed to initialize Smart Siri Volume with sampling %{public}f and %{public}@
%s AlarmState changed to %{public}d
%s TimerState changed to %{public}d
%s MusicVolume changed to %{public}f
%s AlarmVolume changed to %{public}f
%s Automatic Volume State changed to %{public}d
%s Audio file already configured, closing first
%s Creating audio file at URL %{public}@
%s Closing file at URL %{public}@, audio size: %{public}u
%s Couldn't create CoreSpeech log directory at path %{public}@ %{public}@
%s Received notification %@
%s Failed to register for notification %@ (status=%d)
%s SmartSiriVolumeContextAware TTS volume post lower and upper bounds is: %f
%s TTS volume offset post lower and upper bounds is: %{public}f
%s _csAssetsDictionary = %{public}@
%s CSAssetController cannot query for nil language
%s ::: found %{public}lu installed assets for assetType=%{public}lu, matching query: %{public}@
%s Error running asset-query for assetType:%{public}lu, query: %{public}@, error: %{public}lu
%s ::: found %{public}lu assets for assetType=%{public}lu, matching query: %{public}@
%s Asset state : %{public}ld
%s ::: assetType: %{public}lu
%s ::: %{public}s; query: %{public}@
%s Found %{public}lu assets
%s Error running asset query: error %{public}lu, or result is empty
%s ::: Request Fetching RemoteMetaData : assetType : %{public}d
%s Fetching remote meta data failed, scheduled retry after %{public}f seconds
%s ::: Request fetching remote asset
%s ::: found %{public}lu assets for assetType %{public}lu
%s Failed to finish query for assetType %{public}lu with error %{public}lu
%s Meta data downloaded successfully for assetType %{public}lu
%s Failed to download meta data for assetType %{public}lu with error %{public}lu
%s ::: Fetching remote asset
%s ::: Purging installed asset : %{public}@
%s ::: Request downloading remote asset for assetType %{public}lu
%s ::: Start downloading asset
%s ::: download progress: %{public}3.0f%%
%s ::: Error downloading from %{public}@ with error %{public}@
%s ::: download completed successfully from %{public}@.
%s Attempting to download asset %{public}@, asset state : %{public}ld
%s ERR: Unknown AssetType: %{public}lu
%s Overriding Myriad state as request was made during a ringtone
%s Invoked Siri client
%s Cannot invoke Siri client : %{public}@
%s Cannot notify wake keyword spoken event : %{public}@
%s AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm success
%s AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm failed : %{public}@
%s Invoked Siri client for voice trigger from Jarvis
%s Cannot invoke Siri client for voice trigger from Jarvis : %{public}@
%s SiriActivationConnection deactivated due to %ld
%s Invoked Siri client for voice trigger from Darwin
%s Cannot invoke Siri client for voice trigger from Darwin : %{public}@
%s SmartSiriVolume cannot be resumed since Siri is speaking
%s Dealloc CSAudioInjectionEngineRemoraEngine : %@
%s Cannot create de-interleaver using AudioConverterNew: %{public}d
%s Created de-interleaver
%s Stopping AudioInjectionEngine : %@
%s Failed to open audio file %@, error : %d
%s Streaming from %@
%s Cannot speak nil Audio URL
%s Cannot speak since audio file does not exists : %@
%s Calling stopAudioStream
%s Failed to deinterleave the data: %{public}d
%s Compensating %{public}u channel(s), heartbeat = %{public}lld
%s ::: Error creating output file %{public}@, err: %{public}d
%s ::: Error writing to output wave file. : %{public}ld
%s VoiceTrigger cannot be turned on since SpeechDetectionVAD is not present
%s VoiceTrigger cannot be turned on since there is other app recording that is not eligible and we are not in a connected or outgoing call
%s VoiceTrigger cannot be turned on since voiceTriggerInCoreSpeech is NO
%s VoiceTrigger cannot be turned on since VoiceTrigger is disabled
%s VoiceTrigger cannot be turned on since Siri is disabled
%s VoiceTrigger cannot be turned on since SpringBoard is not started yet
%s VoiceTrigger cannot be turned on since device is not unlocked after restart
%s VoiceTrigger cannot be turned on since device is on battery
%s VoiceTrigger cannot be turned on since Siri is restricted on lock screen
%s VoiceTrigger cannot be turned on since Software Update Checking is running
%s Successfully ? %{public}@
%s Notify release of audio session
%s Start monitoring : speech endpoint asset meta update
%s Stop monitoring : speech endpoint asset meta update
%s New speech endpoint asset is available
%s CSSpeechUaapXPCClient received an empty connection event
%s CSSpeechUaapXPCClient got an event it can't handle
%s CSSpeechUaapXPCClient listener disconnected
%s CSSpeechUaapXPCConnection error: %s
%s Invalidating CSSpeechUaapXPCClient
%s CSVoiceTriggerAsset (%{public}@) found: %{public}@
%s Cannot get a VoiceTrigger mobile asset : %{public}@
%s Trial assets not available, fallback to MA assets
%s First unlock notification received : %{public}d
%s Ignore Trial asset update for type: %lu
%s Turn on AP mode since device is hands free state with HS phone-call capable route connected
%s CommandControl Streaming = %{public}d
%s Turn on AP mode since command control is streaming
%s VAD is not present or Hearst routed without phone call
%s VoiceTrigger AOP mode cannot be turned on since builtIn speaker is active
%s AudioRecordContext = %{public}@, recordState = RECORDING
%s CarPlay is connected, we will still run AOP mode
%s hypotheticalRoute = %{public}@
%s Audio route changing to HFP is expected
%s VoiceTrigger AOP mode cannot be turned on since Siri client is recording
%s AOP Listening is disabled
%s Turn on AP mode since siri is in attending state
%s Speech Detection VAD is not available, we will still running in AOP mode
%s Will notify Siri Client record state change to STOPPED in %{public}f seconds, eventUUID = %{public}@
%s Notifying Siri Client record state change to STOPPED, eventUUID = %{public}@
%s There is no pending event to timeout : pendingRecordingStopUUID = %{public}@, timeoutTargetUUID = %{public}@
%s %p speechRecordingMode = %zd, clientConfiguration = %@
%s %p speechRequestOptions = %@, currentActivationInfo = %@
%s activeMediaPlaybackVolume = %f
%s clientConfiguration = %@
%s announcement platform is hearing aids or built in speaker, using CSAudioRecordTypeHomePress
%s recordRoute = %@, playbackRoute = %@
%s Requesting historical buffer of duration %lf seconds
%s recordRoute = %@, playbackRoute = %@, attemptsToUsePastDataBufferFrames = %d
%s alertBehavior = %@
%s AppleTV (isVoiceOverTouchEnabledInAccessibility = %d)
%s HomePod
%s BT Voice trigger during incoming/active phone call
%s Built-in Voice
%s Dictation (deviceRingerSwitchState = %@)
%s Triggerless
%s CarPlay Button Press (recordRoute = %@)
%s Bluetooth Voice Trigger
%s Bluetooth Direct Trigger
%s Car DoNotDisturb
%s VoiceOver Enabled (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s Accessibility Vibration Disabled (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s Overriding default behavior, playing beep because of custom sound ID
%s Playback Route is Hands-Free (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s No Vibration Support
%s Others (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s Others (deviceRingerSwitchState = %ld (%@))
%s alertStyle = %ld
%s targetDate = %@ (%f)
%s timeInterval = %f
%s voiceTriggerEndHostTime = %llu
%s buttonDownHostTime = %llu
%s activationHostTime = %llu
%s activationSystemUptime = %f
%s date = %@ (%f)
%s Overriding default behavior to play beep because of custom sound ID
%s Voice Feedback -> PresentationModeVoice
%s Voice Feedback -> PresentationModeSilent
%s Voice Feedback -> None
%s Voice Feedback -> Control with Ring Switch (deviceRingerSwitchState = %ld (%@))
%s Voice Feedback -> Always On
%s Voice Feedback -> Hands-Free Only
%s Voice Feedback -> Unknown
%s audioSessionActiveDelay = %@ (Triggerless Listening)
%s audioSessionActiveDelay = %@ (Audio Session Coordination)
%s audioSessionActiveDelay = %@ (User Perception)
%s audioSessionActiveDelay = %@ (Hearst Voice)
%s audioSessionActiveDelay = %@ (Built In Voice)
%s audioSessionActiveDelay = %@ (Others)
%s audioSessionActiveDelay = %@
%s mediaPlaybackVolumeThreshold = %@
%s audioSessionActiveDelay = %@ (Above Media Playback Volume Threshold)
%s audioSessionActiveDelay = %@ (Default)
%s %{private}@
%s WARN: Invalid sigType: %lu
%s Unknown DataSrc Type: %{public}lu
%s Unknown DataSrcTypeStr(%{public}@)
%s Failed to create dir at: %{public}@
%s Could not find <%{public}@> in Keypath=%{public}@
%s Creating audio player...
%s Failed to create audio player due to error %@.
%s Created audio player %@ with audio session %@.
%s Reused audio player %@ with audio session %@.
%s Audio player %@ is already prepared to play.
%s Preparing audio player %@ to play...
%s Failed to prepare audio player %@ to play.
%s Prepared audio player %@ to play.
%s request = %@
%s Ignored because the session is already active.
%s Ignored because the audio player is already playing.
%s Asking audio player %@ to play...
%s Failed to play audio player %@.
%s Started playing audio player %@.
%s request = %@, immediately = %d
%s Stopping audio player...
%s Ignored because there's no audio player to stop.
%s _request = %@
%s Ignored because there's no audio player to pause.
%s _request = %@, shouldResume = %d
%s Ignored because there's no audio player to resume playing.
%s request = %@, error = %@
%s Ignored because there's no audio player to destroy.
%s request = %@, player = %@, success = %d
%s request = %@, player = %@, error = %@
%s ContinousAudioFingerprint cannot be turned on since Siri is disabled
%s ::: %{public}s enable: %{public}d reason: %{public}@ timestamp : %{public}lf
%s Ignoring request to enable/disable voice trigger with nil reason.
%s ::: Asserting that VoiceTrigger should be %{public}@ with reason: %{public}@. Existing assertions (%{public}lu): %{public}@; times: %{public}@ vs %{public}f
%s Ignoring request to enable/disable voice trigger - time order violation.
%s ::: Ignore request as phraseSpotter already %{public}@
%s ::: Asserting that PhraseSpotter should be %{public}@, timeout: %{public}f
%s ::: Timeout!! PhraseSpotter should be NOT bypassed
%s ::: Ignore request as raiseToSpeak already %{public}@
%s ::: Asserting that raiseToSpeak should be %{public}@, timeout: %{public}f
%s ::: Timeout!! raiseToSpeak should be NOT bypassed
%s HandleDisconnect
%s Received RC with id: %lu, duration: %f, lrnnScore: %f, lrnnThreshold: %f, taskId: %@, forceAccept: %d
%s Getting mitigation decision for rdId: %lu
%s ERR: RC Processing Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: RCProcessing rcProcConnection is nil
%s ERR: Failed to get TTS Volume
%s Estimated TTS volume : %{public}f
%s SmartSiriVolume not available
%s Notifying SSV Client on Volume change for reason - %{public}d
%s Dropped SSV Client notification for Volume change with reason - %{public}d
%s EarlyDetectSample = %{public}d
%s PHS threshold for %lu doesn't exist, use default
%s %{public}@ doesnt exist
%s Could not read: %{public}@
%s Could not decode contents of: %{public}@: err: %{public}@
%s primaryStream already torn down
%s Updating attSiri state to: %lu
%s Non internal build, Ignoring command %@ from peerId %@ - Bailing out!
%s Received Malformed command %@ from peerId %@ - Bailing out!
%s Command %@ received from peerId %@
%s Unknown Command: (%@) - Ignoring
%s Triggering sync with peer - %@
%s Triggering nearmiss sync with peer - %@
%s Triggering voice profile sync with peer - %@
%s Triggering acoustic data sync with peer - %@
%s Triggering gecko sync with peer - %@
%s CSP2P_RemoteHeySiriCmd: ENABLE HeySiri: Not Implemented Yet: 
%s CSP2P_RemoteHeySiriCmd: DISABLE HeySiri: Not Implemented Yet: 
%s Cannot read contents of directory: %@, err: %@
%s Unable to get %@ for file at %@: %@
%s Could not determine if [%@] is a directory or not. Err=%@
%s Found dir: %@. Skipping compression
%s _compressFilesInDirectory: Malloc failed for file %@ (%lu) - Discarding
%s _compressFilesInDirectory: Compression failed for file %@ (%lu) - Sending Uncompressed
%s _compressFilesInDirectory: File %@ compressed from %ld to %ld 
%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out
%s Transfering NearMiss file %@ withCompression %{public}@ and size %ld in batch %{public}@
%s Transfering grading file %@ withCompression %{public}@ and size %ld in batch %{public}@
%s Grading log file successfully transfered for file %@ in task %@
%s Grading log file failed to transfer for file %@ in task %@
%s %@ is nil - Bailing out
%s Failed in transporting Voice file %@ with reponse: %@, error %@
%s Failed to remove the file %@ with error %@
%s Failed to move the file %@ to %@ with error %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: received malformed command - %@ %@ %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: unknown IDS peer with passed Identifier %@, %@ %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: received malformed command - %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: Creating directory failed with error %@
%s Ignoring sync of existing file %@ from %@
%s Syncing parallel recorded audio file - %@ from %@
%s Uncompressed file %@ sent by peer %@
%s ERR: Failed to allocate buffer of size %zu, bailing out
%s Writing to file(%@) failed!. Err=%@
%s received malformed command - %@ %@ %@
%s unknown IDS peer with passed Identifier %@, %@ %@
%s received malformed command - %@
%s Syncing audio file - %@ from %@
%s Error setting remoteP2Plog file to NSFileProtectionCompleteUntilFirstUserAuthentication. file=%@ Err=%@
%s CSP2P_VoiceProfileTransferCmd: received malformed command - %@ %@ %@
%s CSP2P_VoiceProfileTransferCmd: received malformed command: CSP2P_VoiceProfileData_Key: %@CSP2P_VoiceProfileFileName_Key: %@CSP2P_VoiceProfileSpeakerName_Key: %@CSP2P_VoiceProfileLocale_Key: %@CSP2P_VoiceProfileDataType_Key: %@CSP2P_VoiceProfileTotalSegments_Key: %@CSP2P_VoiceProfileSegment_Key: %@
%s CSP2P_VoiceProfileTransferCmd: Received VoiceProfile Segment (%@/%@) from peerId %@
%s CSP2P_VoiceProfileTransferCmd: Failed to delete the directory %@ with error %@
%s CSP2P_VoiceProfileTransferCmd: received VoiceProfileSegment %@, expected %d
%s CSP2P_VoiceProfileTransferCmd: Creating directory failed with error %@
%s CSP2P_VoiceProfileTransferCmd: Writing to file failed!!!
%s Received request to delete VoiceProfile %@ from peerId %@
%s Cannot send data across when _adCompanionServiceProvider is nil - returning
%s ERR: Rejecting command %@ sent to non Horseman device
%s ERR: received malformed command - %@ %@
%s ERR: unknown IDS peer with passed Identifier %@, %@ %@
%s ERR: received malformed command with locale nil - %@
%s Fetching homeUserId for siriProfileId %{public}@
%s siriProfileId %{public}@ maps to homeUserId %{public}@
%s ERR: Home User Id erred %{public}@ for Siri Profile Id %{private}@
%s ERR: %@
%s ERR: received malformed command with profileId nil - %@
%s ERR: Failed to find voice profile with identifier - %@
%s CSP2P_VoiceProfileFetchCmd: Transferring voice profile %{public}@
%s CSP2P_VoiceProfileFetchCmd: File %@ isCompressed: %d, compressedSize: %ld, err: %@
%s CSP2P_VoiceProfileReverseTransferCmd: Failed VoiceProfileTransfer: %@, error %@
%s CSP2P_VoiceProfileReverseTransferCmd: Successfully transferred %@
%s CSP2P_VoiceProfileReverseTransferCmd: Failed transferring voice profile %@ with error %@
%s CSP2P_VoiceProfileReverseTransferCmd: Successfully transferred voice profile %@
%s ERR: Rejecting command %@ sent to Horseman device
%s ERR: received malformed command with relative path nil - %@
%s Failed in sending trigger for Voice profile update to peer %@ with error %@
%s SpkrId:: path is nil - Bailing out
%s SpkrId:: Direntry with same name exists, this will be removed: %@
%s SpkrId:: Creating Directory : %@
%s SpkrId:: Creating Directory failed : %@
%s Error reading directory at %@: err: %@
%s %@ is empty
%s zeroFilterWinSz: %{public}tu, numHostTicksPerAudioSample: %{public}f
%s _vtEndInSampleCount:%{public}ld, _numSamplesProcessed: %{public}ld, voiceTriggerInfo: %{public}@
%s Registering for post build install/first unlock activity - %s
%s Received event for XPC activity: %@ in state: %ld
%s XPC activity: %@ deferred: %@ firstUnlock: %@
%s Registered XPC activity got triggered...
%s Skipping post build activity on ATV
%s VT is disabled, skipping post build activity !
%s Post build install/first unlock tasks got completed with error - %{public}@
%s Registered XPC activity complete. State: %@.
%s UUID was nil will not start fingerprint provider
%s Updated in use services for fingerprintProvider. %lu services in use
%s Starting continuousFingerprintProvider
%s UUID was nil will not stop fingerprint provider
%s Updated in use services for fingerprintProvider. %lu services remaining
%s Stopping continuousFingerprintProvider
%s listen polling has failed : %{public}@
%s Skip listen polling since audio is streaming / Siri disabled
%s Start audio stream successfully ? %{public}@, error : %{public}@
%s Received didStartRecording when Siri is off
%s Failed in requesting audio stream : %{public}@
%s Already started listen polling, skip
%s Failed to stop audio stream : %{public}@
%s No audio stream to stop, we shouldn't hit this
%s Siri enabled : %{public}d
%s stream stopped unexpectedly : %{public}ld
%s Mediaserverd/bridgeaudiod recovered from crash
%s Failed to fetch speaker state muted info, error : %{public}@
%s Queried built-in speaker mute state as %{public}@
%s Timed-out for fetching speaker state muted info, setting isMuted = YES
%s Failed to fetch builtIn speaker active state, error : %{public}@
%s Queried built-in speaker state as %{public}@active
%s Timed-out for fetching speaker state active info, setting speakerStateActive = NO
%s Speaker state changed : %{public}@
%s Failed to get speaker state from AVVC, default to inactive
%s Speaker mute state changed: %{public}@
%s Failed to enable speakerStateListening: %{public}@
%s Start monitoring : Speaker state from AVVC
%s Failed to disable speakerStateListening: %{public}@
%s Stop monitoring : Speaker state from AVVC
%s SmartSiriVolume: deleted %{public}u elements in energy buffer.
%s SmartSiriVolume: number of elements to delete exceeds energy buffer size, ignore.
%s SmartSiriVolume init value for noise estimation %{public}f
%s SmartSiriVolume init value for LKFS estimation %{public}f
%s SmartSiriVolume enable policy changed : %{public}@
%s SmartSiriVolume received MediaRemote initial state as %{public}@
%s SmartSiriVolume haven't got MediaRemote callback yet, let's assume media is playing.
%s SmartSiriVolume received alarm initial state as %{public}@
%s SmartSiriVolume received timer initial state as %{public}@
%s asset is nil, use default parameters(this should not happen).
%s SmartSiriVolume configure: %{public}@
%s SmartSiriVolume heartbeat = %{public}lld
%s SmartSiriVolume: estimated noise level %{public}f
%s SmartSiriVolume: estimated LKFS %{public}f
%s SmartSiriVolume: pause SSV calculation.
%s SmartSiriVolume: resume SSV calculation.
%s Siri is disabled, we shouldn't receive audio here, heartbeat = %{public}lld
%s SmartSiriVolume received VT event!
%s SmartSiriVolume remove samples from VT utterances by %{public}llu, with startAnalyzeSampleCount = %{public}llu, samplesFed = %{public}llu, triggerStartSampleCount = %{public}llu
%s SmartSiriVolume trying to delete too many VT samples, set triggerDurationToDelete to be limited max: %{public}llu
%s SmartSiriVolume got empty VT event!
%s SmartSiriVolume dismiss alarm firing as VoiceTrigger detected.
%s SmartSiriVolume dismiss timer firing as VoiceTrigger detected.
%s SmartSiriVolume: final estimated TTS volume in dB %{public}f
%s SmartSiriVolume: adjust TTS volume since alarm/timer is firing.
%s SmartSiriVolume: TTS volume in dB from noise %{public}f, from LKFS %{public}f, with user offset %{public}f
%s SmartSiriVolume: soft volume algorithm in use
%s SmartSiriVolume: pause LKFS calculation according to MediaRemote notification.
%s SmartSiriVolume: resume LKFS calculation according to MediaRemote notification.
%s SmartSiriVolume received unknown media playing state, let's assume media is playing.
%s SmartSiriVolume received unknown alarm state, let's reset alarm state.
%s SmartSiriVolume: alarm firing status = %@ according to MobileTimer notification.
%s SmartSiriVolume received unknown timer state, let's reset timer state.
%s SmartSiriVolume: timer firing status = %@ according to MobileTimer notification.
%s SmartSiriVolume dismiss alarm firing as Siri client is recording.
%s SmartSiriVolume dismiss timer firing as Siri client is recording.
%s SmartSiriVolume: set StartAnalyzeSampleCount = %{public}lld
%s SmartSiriVolume: final estimated TTS volume %{public}f with music volume %{public}f
%s Start monitoring : SACInfo
%s Stop monitoring : SACInfo
%s Device is in stereo mode : %{public}@
%s vibration state fetched from CFPreferences is NULL, using On as default value
%s ::: NVI logging initialized
%s Received external route change notification
%s Received external pickable route change notification
%s Received CarPlay AuxStream support change notification
%s Received CarPlay connection change notification
%s Notifying Hearst Connection State : %{public}d
%s Notifying Jarvis Connection State : %{public}d
%s Automatic Volume Toggled. Automatic Volume Enabled: %{public}d
%s No SACodec for settings %{public}@
%s Start monitoring : SpeakerRecognition Asset meta update
%s Stop monitoring : SpeakerRecognition Asset meta update
%s New Speaker Recognition asset metadata is available
%s VoiceTrigger is already %{public}@, received duplicated notification!
%s Start monitring : VoiceTrigger setting switch
%s Cannot start monitoring VoiceTrigger setting switch because it was already started
%s Stop monitring : VoiceTrigger setting switch
%s VoiceTrigger enabled = %{public}@
%s endpointerModelVersion is still nil after fetching it from EAREndpointer
%s Updated endpointer threshold: %{public}f
%s Updated endpointer delayed trigger: %{public}d
%s setEndpointerOperationMode : %{public}d
%s current EndpointerOperationMode : %{public}d
%s %{public}@
%s update endpointer threshold to %{public}f for task %{public}@
%s EARSPG: CSServerEndpointFeatures: %{public}@
%s isASRFeatureFromServer = %{public}d
%s Accepting RC: RCTime < 0: Server's processedAudioDuration(%{public}f) > _lastReportedEndpointTimeMs(%{public}f): sfLatency: %{public}f, rcTimeMs: %{public}f
%s Rejecting RC: SFLatency < 0: Server's processedAudioDuration(%{public}f): _lastReportedEndpointTimeMs(%{public}f): sfLatency: %{public}f, rcTimeMs: %{public}f
%s rcEpFeatures: %{public}@ shouldAccept: %{public}d
%s first audio buffer host time: %{public}llu
%s Detected speech start at %{public}f of effectiveClientProcessedAudioMs
%s Already communicated end-pt: Not Invoking hybridClassifier for silposnf=%{public}f
%s ClientLag: serverProcessedAudioMs(%{public}ld) > effectiveClientProcessedAudioMs(%{public}f)
%s ClientLag: Not invoking HybridClassifier: sfLatency > clientLagThreshold: %{public}f > %{public}f
%s ClientLag: Using DefaultServerFeatures with disconnected-state sfLatency: %{public}f
%s ClientLag: Using ServerFeatures with ClampedSFLatency: %{public}f
%s ClientLag: Not Invoking HybridClassifier as serverProcessedAudioMs > effectiveClientProcessedAudioMs
%s HEP.feats: [%{public}ld,%{public}f,%{public}f,%{public}ld,%{public}f,%{public}f] & [(%{public}@),%{public}f] @ %{public}lu [%{public}f, %{public}d]
%s HEP.posterior=%{public}f, result=1, endpointedBuffer.hostTime=%{public}llu, anchorhostTime=%{public}llu, endpointSampleCount=%{public}llu, numSamplesProcessedBeforeAnchorTime=%{public}lu, isAnchorTimeBuffered=%{public}d
%s request timeout with features %{public}@
%s ServerFeaturesLatencyDistribution: %{public}@ additionalMetrics: %{public}@
%s MMEP:: HEP detected at %{public}f but will continue running for MMEP.
%s Already communicated end-pt: Not scheduling work for hybridClassifierQueue for silposnf=%{public}f
%s Log hybrid endpointer features for event: %{public}@, and locale: %{public}@
%s triggerEndSeconds: %{public}f, _vtEndInSampleCount: %{public}lu, _vtExtraAudioAtStartInMs: %{public}lu,  _hepAudioOriginInMs: %{public}f, voiceTriggerInfo: %{public}@,
%s CSHybridEndpointer recordingStoppedForReason: %{public}ld
%s sampleRate=%{public}lu, recordContext=%{public}@
%s CSEndpointAsset exists: %{public}@
%s No asset for CSHybridEndpointer for currentLanguage: %{public}@. Fallback to NNVAD
%s Created HybridClassifier(%{public}@); canProcessCurrentRequest after reset: %{public}d,for sampleRate: %{public}lu, lang=%{public}@, version=%{public}@
%s HEP.logs.hdr: [ServerASR_trailingSilenceDuration,ClientSPG_SilenceFramesCountMs,ServerASR_endOfSentenceLikelihood,ServerASR_wordCount,ServerFeaturesLatency,ClientSPG_SilenceProbabilityHMMFiltered] & [ServerASR_pauseCounts,ServerASR_silencePosterior,ClientSPG_silenceProbailitySPGRaw] @ effectiveClientProcessedAudioMs : [HEPPosteriorOut,HEPDecision]
%s csHepConfig: %{public}@
%s _clientHepConfig: %{public}f, _clampedSFLatencyForClientLag: %{public}f, _useDefaultServerFeaturesOnClientLag: %{public}d, _extraDelayFrequency: %{public}lu, _taskThresholdMap: %{public}@
%s update assets to: %@
%s Start monitoring : Siri setting switch, Siri is %{public}@
%s Stop monitoring : Siri setting switch
%s Siri Enabled = %{public}@
%s Start audio stream successfully ? %{public}@, error : %{public}@, startRecordingSampleCount=%lu
%s Stopped audioStream with result=%d, err=%@
%s audioProvider == nil, error : %{public}@
%s provider: %{public}@, unexpectedStop: %{public}ld
%s Device is firstUnlocked. Fetching HEP assets
%s Device is NOT firstUnlocked. Will fetch assets after firstUnlock
%s Language changed to: %{public}@
%s New hybrid endpoint asset downloaded
%s FirstUnlock notification received: %{public}d
%s Bypass Trial Asset
%s Failed to get HEP asset
%s HEP Asset: %{public}@, path: %{public}@
%s installationString: %@, for language: %@
%s File not exist: %{public}@
%s endpointAsset: %{public}@, osdAsset: %{public}@
%s elapsed time to get HEP mobile assets: %{public}lf
%s Fake endpoint asset: %@
%s _requestMHUUID: %@, _turnIdentifier: %@
%s _userSpeakingStartedTimeInMs %{public}f, _userSpeakingEndedTimeInMs: %{public}f, _userSpeakingStartedHostTime: %{public}llu, _userSpeakingEndedHostTime: %{public}llu, _stopRecordingHostTime: %{public}llu, _endpointBufferHostTime: %{public}llu
%s Received Activation Event : %{public}@
%s Cannot handle activation event : %{public}@
%s activation client not exist
%s Start monitoring : Siri language code
%s Stop monitoring : Siri language code
%s Siri language changed to : %{public}@
%s Ignore notifying change of language code, since it is nil
%s Error reading audio file: %{public}d, skipping...
%s Start monitoring : Software update checking state
%s Cannot start monitoring software update checking state because it was already started
%s Stop monitoring : Software update checking state
%s Software update checking running : %{public}@
%s AssetManager cannot be turned on since isFirstUnlocked is NO
%s AssetManager cannot be turned on since network is not available
%s token:%d
%s fromState:%llu, toState:%llu
%s SiriState - isActiveSession:%d
%s SiriState - isActiveRequest:%d
%s SiriState - isListening:%d
%s SiriState - isSpeaking:%d
%s tts Finished:%u
%s Start monitoring : VoiceTrigger Asset meta update
%s Stop monitoring : VoiceTrigger Asset meta update
%s New VoiceTrigger asset metadata is available
%s Replace deviceId(%{public}@) to nil for VoiceTrigger from Gibraltar.
%s Hang up toggle: %d
%s VoiceTrigger cannot be turned on since we are not in the desired call state
%s VoiceTrigger cannot be turned on since we are in a hang up supported call state but it is not first party.
%s VoiceTrigger cannot be turned on because we are in a ringtone and hsPhoneCallCapableHeadsetConnected: %d builtInState: %d isInSplitterMode: %d
%s Queue %@ is already being observed.
%s queue = %@
%s queue = %@, numberOfOccurrences = %tu
%s Could NOT copyFrom: %{public}lu to: %{public}lu, retSampleCount: %{public}lu
%s Invalid request: reqStartSample=%{public}lu, reqEndSample=%{public}lu, oldestSampleInBuffer: %{public}lu, latestSampleInBuffer=%{public}lu
%s Start monitoring : AdBlocker Asset meta update
%s Stop monitoring : AdBlocker Asset meta update
%s New AdBlocker asset metadata is available
%s stream %{public}@ initialized
%s stream %{public}@ is deallocated
%s Creating UUID for start audio stream request : %{public}@
%s Delivering didStop to %{public}lu tandem stream(s)
%s AudioStream<%{public}@> is streaming : %{public}d
%s Stream %{public}@ set startTimeInSampleCount : %{public}llu
%s AudioStream<%{public}@> has received didStopStreamUnexpectly
%s AudioStream<%{public}@> has received didHardwareConfigurationChange
%s Input route changed
%s Output route changed
%s Failed getting audio property %{public}.4s %{public}d
%s Failed getting audio property size %{public}.4s %d{public}
%s Failed registering for property listener %{public}.4s %{public}d
%s Found pending activation : %{public}@, handle pending activation immediately
%s Received Activation Event in CoreSpeechDaemon: %{public}@
%s Returning error for already existing pending activation event : %{public}@
%s No delegate registered : Postpone activation event handling until we have delegate registered
%s Pending Timeout fired for %{public}@ returning error for timeout
%s There is no pending activation event to timeout
%s corespeechd received mediaserverd launched event
%s Start monitoring : AOP First Pass trigger
%s Stop monitoring : AOP First Pass trigger
%s Received a request for VoiceTrigger Asset for language code : %{public}@
%s Fake Model Path does not exist : %{public}@
%s fake model meta json does not exist : %{public}@
%s Unable to read fake model meta json : %{public}@
%s Unable to parse fake model meta json : %{public}@
%s Loading FakeModel : %{public}@
%s Cannot create RTModel from %{public}@
%s fake model number(%{public}d) is less than minimum fake model number((%{public}d)
%s Using fake model for the first time : %{public}@
%s Using fake model : %{public}@
%s %{public}@ fake model is selected for download
%s %{public}@ model is selected for fallback
%s Received a request for VoiceTriggerRTModel %{public}@ Firmware Version : %{public}d.%{public}d
%s Asking mobile asset with currentLanguageCode = %{public}@
%s DownloadModel : 
%s preinstalledModels : 
%s Hearst Fake Model request switch turned on, executing stress test mode with fakeModelPath : %{public}@
%s VoiceTriggerAsset is not available : %{public}@
%s Queried model for language:%@ path:%@ configVers:%@ model:%@
%s rtLocaleMap is nil fallback to embedded locale map
%s accessoryRTBlobs are not available for the version(%{public}d.%{public}d) and locale:%{public}@, returning fallback model : %{public}@
%s Hash matched with downloadedModel : %{public}@, accessory will select this model
%s Hash matched with preinstalledModel : %{public}@, accessory will select this model
%s Ask for download : %{public}@, and use %{public}@ as fallback
%s Select keyword language as %{public}@, error : %{public}@
%s Language list and jarvis language not provided
%s current Siri language code : %{public}@
%s Jarvis locale map is nil, fallback to embedded locale map
%s Start monitoring : Setting preference change
%s Stop monitoring : Setting preference change
%s Siri restricted on lock screen : %{public}@
%s Initializing CSRawAudioInjectionProvider
%s Done initializing CSRawAudioInjectionProvider
%s Dealloc CSRawAudioInjectionProvider
%s Calling StreamId for : %@
%s Calling prepare
%s Calling start audio stream : %@
%s Calling stop audio stream
%s Calling isRecording
%s Calling prewarm
%s Calling activate audio session
%s Start monitoring : Springboard start
%s Cannot start monitoring Springboard start because it was already started
%s Stop monitoring : Springboard start
%s SpringBoard started = %{public}@
%s CSAudioProvider is deallocated
%s CSAudioProvider[%{public}@]:StreamState changed from : %{public}@ to : %{public}@
%s CSAudioProvider[%{public}@]:Setting audioRecorder : %{public}p
%s Reset recordDeviceIndicator as we have new audioRecorder
%s CSAudioProvider[%{public}@]:
%s CSAudioProvider[%{public}@]:setCurrentContext : %{public}@
%s CSAudioProvider[%{public}@]:Cannot change context since audio recorder is currently recording
%s CSAudioProvider[%{public}@]:audioStreamWithRequest for stream <%{public}@>
%s Failed to _prepareAudioStreamSync : %{public}@
%s Attached stream %{public}@ as tandem to master stream %{public}@ %{public}@, error : %{public}@
%s PrimaryStream is already tandem of stream %{public}@, can't add mutual tandem relation here!
%s Invalid input streams
%s CSAudioProvider[%{public}@]:Prepare audio stream reuqested while state is %{public}@
%s CSAudioProvider[%{public}@]:Cannot prepare, audio system is recovering
%s CSAudioProvider[%{public}@]:Asking AudioRecorder prepareAudioStreamRecord
%s CSAudioProvider[%{public}@]:prepareAudioStreamRecord failed : %{public}@
%s CSAudioProvider[%{public}@]:Create circular buffer : numChannels(%d), duration(%f)
%s CSAudioProvider[%{public}@]:startAudioStream with stream : %{public}@ with stream state : %{public}@, option : %{public}@, streamId : %{public}llu
%s CSAudioProvider[%{public}@]:state was %{public}@, prepareAudioStream first
%s CSAudioProvider[%{public}@]:prepareAudioStreamSync with stream : %{public}@ with stream state : %{public}@, request : %{public}@
%s CSAudioProvider[%{public}@]:prepareAudioStream with stream : %{public}@ with stream state : %{public}@
%s CSAudioProvider[%{public}@]:Cannot handle start audio stream on : %{public}@
%s CSAudioProvider[%{public}@]:Cannot startAudioStream, audio system is recovering
%s CSAudioProvider[%{public}@]:Requested startHostTime = %{public}llu, _clientStartSampleCount = %{public}tu
%s CSAudioProvider[%{public}@]:%{public}@ is requesting earlier audio than asked, we can't deliver earlier audio
%s CSAudioProvider[%{public}@]:Set circularBufferStartHostTime = %{public}llu, circularBufferStartSampleCount = %{public}lu
%s CSAudioProvider[%{public}@]:Entering dispatch group for recordingWillStartGroup
%s CSAudioProvider[%{public}@]:Failed to fetch historical audio since _clientStartSampleCount is newer than audioBuffer sample count(%{public}llu)
%s Start deliver historical audio buffer immediately
%s CSAudioProvider[%{public}@]:Leaving dispatch group for recordingWillStartGroup
%s CSAudioProvider[%{public}@]:Received didStartRecording while %{public}@
%s CSAudioProvider[%{public}@]:Received didStopRecording reason : %{public}d, streamState : %{public}@
%s Calling unexpected didStop for all weak streams
%s CSAudioProvider[%{public}@]:Received didStopRecording while %{public}@
%s CSAudioProvider[%{public}@]:Waiting for recordingWillStartGroup before scheduling stopAudioStream
%s CSAudioProvider[%{public}@]:Scheduled stopAudioStream after waiting for recordingWillStartGroup - stopAudioStream %{public}@ with streamState : %{public}@
%s CSAudioProvider[%{public}@]:requested stop audio stream while stoppingWithScheduledStart, take out audio stream from schedule
%s CSAudioProvider[%{public}@]:Stream %{public}@ is not streaming on stream state : %{public}@, ignore the stopAudioStream request
%s CSAudioProvider[%{public}@]:Cannot handle stop audio stream on : %{public}@
%s CSAudioProvider[%{public}@]:requested stop audio stream while stopping, adding audio stream into stop pending
%s CSAudioProvider[%{public}@]:Stop all recordings, moving stream state to %{public}@
%s CSAudioProvider[%{public}@]:Failed to stop audioStream : %{public}@
%s CSAudioProvider[%{public}@]:%{public}@ ask for audio hold stream for %{public}f
%s CSAudioProvider[%{public}@]:Timeout for %{public}@ has fired
%s CSAudioProvider[%{public}@]:Removing %{public}@ from stream holders
%s CSAudioProvider[%{public}@]:%{public}@ stream holder was already removed from stream holders
%s CSAudioProvider[%{public}@]:%{public}@ ask for cancel hold stream
%s Failed to prewarmAudioSessionWithError : %{public}@
%s Failed to activateAudioSessionWithReason: %{public}@
%s CSAudioProvider[%{public}@]:Activating Audio Session under : %{public}@
%s Failed to activateAudioSession : %{public}@
%s CSAudioProvider[%{public}@]:shouldDuckOnBuiltInSpeaker: %{public}@ (audioStreamType: %{public}lu, isPlaybackRouteBuiltInSpeaker: %{public}@, isDuckingOnSpeakerOutputSupported: %{public}@)
%s Failed to fetch duckingSupported result : %{public}@
%s Failed to deactivate audio session : %{public}@
%s CSAudioProvider[%{public}@]:Deactivating Audio Session under : %{public}@
%s Failed to deactivateAudioSession : %{public}@
%s Unable to disable duckOthers in HomePod
%s CSAudioProvider[%{public}@]:AVVC is recovering, ignore command...
%s Not handled by this function
%s Fetching voiceTriggerInfo from audioRecorder
%s CSAudioProvider[%{public}@]:Cannot stopRecording as there are %{public}tu streamHolders
%s CSAudioProvider[%{public}@]:Shouldn't stop AVVC recording as there are %{public}tu streams
%s CSAudioProvider[%{public}@]:Buffer underrun!!!!, lastForwardedSampleTime:%{public}lu, oldestSampleTimeInBuffer:%{public}lu, stream:%{public}@
%s CSAudioProvider[%{public}@]:Ignore forwarding stream %{public}@                                        the audio packets until sampleCount == %{public}lu (theMostRecentSampleCount:%{public}lu)
%s CSAudioProvider[%{public}@]:Buffer overrun!!! lastForwardedSampleTime:%{public}lu,                                    theMostRecentSampleCount:%{public}lu, stream:%{public}@
%s Forward %d samples from historical audio buffer
%s ScheduleAlertFinishTimeout : %{public}@
%s ScheduleAlertFinishTimeout will be ignored : %{public}@, %{public}@
%s Received finishStartAlertPlaybackAt:%{public}llu streamState : %{public}@
%s CSAudioProvider[%{public}@]:Requested alertFinishHostTime = %{public}llu, _clientStartSampleCount = %{public}tu, circularBufferSampleCount = %{public}tu
%s Audio Streaming already stopped
%s Will invalidate current builtIn audio stream : %{public}@
%s failed to stopAudioStream : %{public}@
%s CSAudioProvider[%{public}@]:Audio Recorder Disconnected
%s CSAudioProvider[%{public}@]:Mediaserverd/bridgeaudiod crashed
%s CSAudioProvider[%{public}@]:Mediaserverd/bridgeaudiod recovered from crash
%s CSAudioProvider[%{public}@]:AudioRecorder will be destroyed
%s CSAudioProvider[%{public}@]:recordingTransaction already released
%s CSAudioProvider[%{public}@]:Release recording transaction at streamState : %{public}@
%s Audio Packet Delivery WatchDog fired, trying to recover
%s Schedule didStart WDT %{public}@ for %{public}lf seconds
%s startRecordingWatchDogDidFire : %{public}@, currentToken : %{public}@
%s startRecordingWatchDogToken doesn't match. Ignore this WDT fire
%s Clearing didStartRecordingDelegate WatchDogTimer : %{public}@
%s Schedule didStop WDT %{public}@ for %{public}lf seconds
%s stopRecordingWatchDogDidFire : %{public}@, currentToken : %{public}@
%s stopRecordingWatchDogToken doesn't match. Ignore this WDT fire
%s Clearing didStopRecordingDelegate WatchDogTimer : %{public}@
%s Update remote deviceUId fetched from AVVC : %{public}@ (this must be deviceUID of Darwin device only)
%s Failed to fetch remote deviceUId from AVVC
%s Listening on watch cannot be turned on since speech detection VAD is disabled
%s Listening on watch cannot be turned on since Siri is disabled
%s Listening on watch cannot be turned on since SpringBoard is not started
%s Listening on watch cannot be turned on since device is not unlocked after restart
%s Hey Siri is enabled. Checking if we are in a call.
%s Hey Siri is disabled. Not checking if we are in a call.
%s Listening on watch cannot be turned on since Siri assertion is disabled and or its not in a ringtone hfp state
%s Listening on watch cannot be turned on since audioInjection is enabled
%s Listening on watch cant be turned on because we are in a ringtone with A2DP, connected or outgoing call
%s xpc object should be XPC_TYPE_ARRAY
%s xpcObject value is NULL
%s Cannot decode non-plist types of XPC object
%s Cannot encode non-plist types into XPC object : %{public}@
%s Failed to fetch listeningEnabled : %{public}@
%s listening property in AOP : %{public}d
%s Failed to fetch listeningEnabledOnNotification : %{public}@
%s Stop monitoring : AOP Listening state
%s Received AOP Listening state change notification : %{public}d
%s Error reading file
%s Version of AdBlockerAsset: %d
%s Send a In-Ear Myriad notification
%s Unsupported protocol for this device
%s HEP::RecordingDidStop: Ignoring processAudioSamplesAsynchronously: Not queueing
%s HEP::RecordingDidStop: Ignoring processAudioSamplesAsynchronously
%s addAudio first sample offset: %{public}lu
%s HEP::RecordingDidStop: Ignoring silenceScoreEstimateAvailable, Not queuing
%s HEP::RecordingDidStop: Ignoring silenceScoreEstimateAvailable
%s HEP.posterior=%{public}f, result=1, endpointedBuffer.hostTime=%{public}llu, isAnchorTimeBuffered=%{public}d
%s CSHybridEndpointAnalyzer recordingStoppedForReason: %{public}ld
%s No asset for CSHybridEndpointer for currentLanguage: %{public}@. Fallback to VAD2
%s Created OSDAnalyzer: %{public}@
%s _clientHepConfig: %{public}f, _clampedSFLatencyForClientLag: %{public}f, _useDefaultServerFeaturesOnClientLag: %{public}d
%s _currentAsset changed to : %{public}@
%s Session Query Failed : %{public}@
%s Mediaserverd/bridgeaudiod crashed
%s Start monitoring : AudioSessionInterruption
%s Start monitoring : AudioSessionRouteChangeNotification
%s Stop monitoring AudioSession activities
%s Endpointer is disabled in recordOption: %@
%s CSHybridEndpointer canProcessCurrentRequest
%s CSHybridEndpointer can-NOT-ProcessCurrentRequest, fallback  to NNVAD
%s _activeEndpointer=%{public}@
%s shouldUseCVT2ShotDecision: %{public}d, isWatchRTSTriggered=%{public}d
%s preheat
%s endpointer: %{public}@: didDetectStartpointAtTime: %{public}f
%s EP_PROXY::RecordingDidStop: Ignoring startPoint-reporting
%s EP_PROXY::RecordingDidStop: Ignoring didDetectHardpoint-reporting
%s %{public}@: Endpointer didDetectHardEndpointAtTime:withMetrics: %{public}f, CallingDelegate: %{public}@
%s WARN: endpointerModelVersion called when CSHybridEndpointer is not available
%s Skip update endpointer threshold from server for accessible endpointer request
%s WARN: logEndpointFeatures called when CSHybridEndpointer is not available
%s %@
%s Detaching from session %p
%s Already attaching to session!
%s Attaching to session
%s Failed attaching to bt session %d
%s session = %p, result = %d
%s Session is NULL.
%s Failed getting default local device from session %p (result = %d).
%s Failed adding callbacks to local device %p from session %p (result = %d).
%s localDevice = %p, event = %d, result = %d
%s Failed getting default accessory manager from session %p (result = %d).
%s Failed adding callbacks to accessory manager %p from session %p (result = %d).
%s accessoryManager = %p, accessoryEvent = %d, device = %p, state = %d
%s Failed getting device address from string %d
%s Failed getting device from address %d
%s BTDevice %p for address %@
%s BTAccessoryManager %p
%s Failed getting device from deviceUID %d
%s BTDevice %p for deviceUID %@
%s BTLocalDevice %p
%s Loading device info for %@...
%s Loaded device info %@ for %@.
%s Using slow path...
%s Slow path took %f seconds.
%s Slow path timed out after 4 seconds.
%s Method not supported
%s Reloading device info for %@...
%s Reloaded device info %@ for %@.
%s deviceInfo = %@
%s deviceInfo changed from %@ to %@
%s Fetching device info for %@...
%s Fetched device info %@ for %@.
%s Getting BTDevice and BTAccessoryManager for %@...
%s Got BTDevice %p and BTAccessoryManager %p for %@.
%s Device UID and address of %@ are nil.
%s Data source of %@ is nil.
%s Failed getting BTDevice and BTAccessoryManager for %@.
%s Failed getting vendor id and product id from BTDevice %p (result = %d).
%s Failed getting InEar capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting DoAP capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting ANC capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Transparency capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Software Volume capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Announce Messages capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Announce Calls capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Cannot create NSNumber if xpcObject is NULL
%s XPC object type should be BOOL, DOUBLE, INT64, or UINT64
%s Cannot create xpcObject if objcType is NULL
%s Cannot create xpcObject since there is no matching type
%s Stop monitoring : First unlock
%s PhraseSpotter enabled = %{public}@
%s PhraseSpotter is already %{public}@, received duplicated notification!
%s Created VoiceIdXpc connection
%s event = %{public}p client = %{public}p cannot handle event
%s ignore unknown types of message
%s message = %{public}p, client = %{public}p, cannot handle message
%s MessageType = %{public}lld
%s Null msg body
%s Null VTEI
%s Null Ctx
%s Null deviceInfo
%s Null audio context
%s Received msg of type %{public}lld for utt %{public}@
%s Fetched latest VT asset %@ for retraining
%s Implicit utterance processing done with error %{public}@
%s Cannot retrain since we cannot look-up SSR asset with error %@
%s Received error %{public}@ from client %{public}@
%s Client %{public}p connection disconnected, noticing xpc listener
%s Cannot deactivateAudioSession since audio recorder doesn't exist
%s Cannot deactivateAudioSession with %{public}@
%s Failed to initialize caesuraSPG, stopping monitoring
%s Start monitoring : EARCaesuraSilencePosteriorGenerator: %{public}@
%s deallocating EARCaesuraSilencePosteriorGenerator: %{public}@
%s Stopped monitoring : EARCaesuraSilencePosteriorGenerator
%s EARClientSilenceFeatures heartbeat = %{public}lld,                   silScoreEstimate = %{public}f
%s Stop monitoring : HomePod voiceTriggerAssertion
%s Setting sample rate to %d
%s Could not make Fingerprinter decoder: %{public}.4s
%s Error during conversion for fingerprinter %{public}.4s
%s Getting signature for duration %lf
%s Fingerprinter doesn't support rate %{public}ld
%s Set initial info as current %@.
%s Assign new MHUUID here to %@ (force = %@)
%s mode = %ld
%s endpointerOperationMode = %@, forceUpdate = %d
%s Ignored because endpointer operation mode is unspecified.
%s Ignored because endpointer operation mode can not be changed from %@ to %@.
%s Set Use Automatic Endpointing %d
%s Setting up recording alerts for Dictation.
%s Done setting recording alerts for Dictation.
%s Setting up recording alerts for Siri and other non-Dictation modes.
%s Done setting recording alerts for Siri and other non-Dictation modes.
%s Overriding record starting alert for IFD feature group one.
%s Done overriding record starting alert for IFD feature group one (soundURL = %@).
%s Failed overriding record starting alert for IFD feature group one.
%s Done overriding record starting alert from override policy (soundURL = %@).
%s Failed overriding record starting alert from override policy.
%s Trying to set record buffer duration to %lf
%s Failed setting record buffer duration. Duration is %{public}lf
%s Initalizing speech controller with context %@
%s Set pending info as current %@.
%s Done initializing voice controller
%s Preparing CSSpeechController with settings %@
%s Error setting up CSSpeechController %{public}@
%s Done preparing CSSpeechController
%s reason = %d, speechEvent = %zd (%@), hostTime = %llu
%s reason = %d, hostTime = %llu
StopRecording
%s Really stopping recording
UsefulUserFacingResults
%s Someone else has already asked to stop recording.%@
%s Sending stop recording immediately because CSSpeechController isn't recording
%s recordingState = %zd, context = %@
%s Playing alert %ld
%s Checked audio logging limits, count = %d -> %d
%s An item already exists at path %@, but it is not a directory.
%s Failed to create directory at path %@ due to error %@.
%s info = %@, context = %@
%s Created _audioFileWriter %@.
%s Did not create _audioFileWriter because audioFileType = %ld.
%s supportsVoiceIdentificationTraining = %d
%s supportsSpeechExtraction = %d
%s supportsSpeechLogging = %d
%s Configure _audioFileWriter with recordSettings = %@.
%s Ask context %@ to configure and record with recordSettings = %@.
%s Acquired recorded audio for speech logging: %@
%s Speech Log: %@
%s Unable to save recorded audio for speech logging due to error %@.
%s Skipped saving recorded audio for speech logging due to audio logging limit.
%s Unable to prepare directory for speech logging.
%s Unable to acquire recorded audio for speech logging.
%s %ld
%s Ignoring unexpected stop recording while in state %ld
%s Prewarming audio session in speech controller
%s Done prewarm audio session in speech controller
%s Prewarming start alert
%s Failed to prewarm start alert due to %@
%s Done prewarming start alert
%s Preparing instead of preheating since we're not in the default mode
%s Preparing speech capture for %@ options:%@
%s context:%@, _currentActivationInfo :%@
%s Using Bluetooth audio analyzer style
%s Using driving audio analyzer style
%s Using voice trigger audio analyzer style
%s Using default audio analyzer style
%s Suppressing start alert
%s Playing start alert %@
%s No SoundID URL
%s No start recording alert
%s entering _recordingWillStartGroup
%s Setting delayed start delay %lf
%s Asking CSSpeechController to startRecording with settings %@
StartRecording
%s Done asking CSSpeechController to startRecording
%s context = %@
%s leaving _recordingWillStartGroup
%s Could not set up recording (prepared = %d, started = %d), returning error %{public}@%{public}@ and resetting voice controller.
%s Updated speech synthesis record from %@ to %@.
%s Fetching audio session ID...
%s Done fetching audio session ID %lu.
%s endpointerOperationMode = %@
%s Fingerprinting mode, force (endpointerOperationMode = %@).
%s Legacy property set (useAutomaticEndpointing = %d), override (endpointerOperationMode = %@)
%s info = %@, reason = %@
%s Dropping previous pending activation info %@ for reason %@.
%s Setting audio context %@ for reason %@.
%s Error setting audio context %@ for reason %@ error %{public}@. (%f seconds)
%s Done setting audio context %@ for reason %@. (%f seconds)
%s Ignored setting audio context because there's no speech controller.
%s Updating to post voice for reason %@.
%s Updating using pending info %@ for reason %@.
%s Attempting to release audio session while CSSpeechController is still recording.
%s releaseAudioSessionBehavior = %s
%s Resetting to default audio context on session end
%s %lf %lf
%s Endpointer setStartWaitTime is set to %{public}f
%s (event = %ld, suppressAlert = %d, hostTime = %llu)
%s (suppressAlert = %d)
%s Begin updating audio device info %@. (reason = %@, forcesUpdate = %d)
%s Fetching audio device info from CSSpeechController...
%s Done fetching audio device info from CSSpeechController.
%s End updating audio device info %@. (duration = %f)
%s Creating recording info (speechEvent = %ld (%@), audioAlertStyle = %ld, includeBTInfo = %d, includeRecordDeviceInfo = %d)
%s alertStartTime = %llu
%s Done creating recording info %@.
%s Got a speech start failure after we already got audio buffers?!
SpeechRecorderAudioStart
AudioStart
%s success = %d, error = %@
%s isTwoShot = %d
%s SPELLING recordSettings codec=%@
%s Sending speech did start to delegate %@
%s Resetting VoiceController on startRecording failure
%s reason = %ld, estimatedSpeechEndHostTime = %llu
%s Synthesizing a didStart callback, on missing didStart
SpeechRecorderAudioStop
AudioStop
%s reason = %ld, estimatedSpeechEndHostTime = %llu, errorCodeOverride = %ld, underlyingError = %@
%s Ignoring unexpected didStop callback while in state %ld
%s Starting new recording for two shot mode
%s Failed starting recording for two shot mode
%s audioMetrics = %@
RecordBufferAvailable
%s buffers.count = %llu, durationInSec = %f, bufferStartHostTime = %llu
RecordBufferHandleBegin
%s Dropped %f seconds of audio buffers recorded at %llu (%f seconds) due to audio recording restriction (accumulatedBufferDuration = %f seconds).
RecordBufferHandleEnd
%s firstBufferStartHostTime = %llu, firstBufferReceiptHostTime = %llu
%s Getting audio route instrumentation with recording info %@...
%s Done getting audio route instrumentation %@.
%s LPCM record buffer is empty.
%s reason = %zd, estimatedSpeechEndHostTime = %llu, isRecordingStopped = %d
%s Ignoring unexpected last buffer callback while in state %ld
%s Ignoring unexpected last buffer callback without first buffer.
%s %d
%s type = %ld, error = %@
%s type = %ld
%s alertPlaybackGroup is nil.
%s numberOfAVVCAlertPlaybacksByType does not have AVVC alert playbacks of type %ld.
%s numberOfAVVCAlertPlaybacksByType is nil.
%s Language detection delegate is active
%s Language detection delegate is NOT active. %d, %@
%s isSiriMode=%d, speechEvent=%ld, wasRequestCancelled=%d, shouldSuppressAlert=%d, isMonitoringMyriadEvents=%d, didMyriadWin=%d, recordRoute=%@
%s Explicitly playing %@ alert
%s BTLE Myriad Not explicitly playing speech stop alert
%s Not explicitly playing alert
%s Language detector is confident:%{private}d of the detected language:'%{private}@' with language code likelihood: %{private}@
%s time = %lf, wantsAudibleFeedback = %d
%s BTLE waiting for Myriad to finish
%s BTLE Myriad loss cancelled two shot feedback
%s BTLE speech controller began waiting for Myriad decision
%s BTLE speech controller end waiting for Myriad decision %lu
%s opType = %tu, reason = %tu
%s Unknown CSRequestOperationType (opType = %tu).
%s reason = %tu
%s time = %lf
%s Ignoring startpoint from stale CSEndpointAnalyzer
Endpoint
%s exited _recordingWillStartGroup
%s Ignoring hard endpoint from stale CSEndpointAnalyzer
%s Ignoring hard endpoint because (endpointTime = %f, firstBufferTimestamp = %f, mostRecentTTSEndTimestamp = %f, extendedSuppressDuration = %f).
%s Detected hard end-point with metrics - %@
EndpointHandled
SpeechRecorder
%s Overriding timeout and start point on timeout
%s Ignoring hard endpoint since _endpointerOperationMode = %@, _didEnterTwoShotMode = %d
%s promptType = %ld, time = %f
%s suppressesTwoShotAlert = %d
%s done
%s Fake two shot TTS prompt timed out (%@).
%s Fake two shot TTS prompt timeout is not handled due to context mismatch (fakeTwoShotPromptUUID = %@, _fakeTwoShotPromptUUID = %@).
%s Fake two shot TTS prompt called back (timestamp = %f, duration = %f, error = %@)
%s Fake two shot TTS prompt callback is not handled due to context mismatch (fakeTwoShotPromptUUID = %@, _fakeTwoShotPromptUUID = %@).
%s duration = %lf
%s No endpoint yet, waiting
%s rcID: %lu, duration: %lf, lrnnScore: %f, lrnnThreshold: %f, taskId: %@
%s Eager results - shouldAccept: %d, isMitigated: %d Duration: %lf last duration: %lf
%s Enforce previous endpointHint
%s Got an enforce message without a current completion. Ignoring
%s Processing RC for mitigation, force accept
%s Got an enforce message without a current RC. Stop Recording
%s timeout = %f
%s Done
%s Watchdog timer timed out.
%s duration %lf
%s Starting audio playback request %@...
%s Failed audio playback request %@ due to error %@.
%s Stopped audio playback request %@.
%s scores = %{private}@
%s userInfo = %@
%s Reuse existing session %@ from reusable session pool.
%s Create new session %@.
%s session = %@
%s session = %@, error = %@
%s Add successfully finalized session %@ to reusable session pool.
%s Evict %tu sessions from reusable session pool because %@.
%s Reusable session pool is already empty.
%s Created CSStartOfSpeechDetector: %{public}@ 
%s Reset: Created EARCaesuraSilencePosteriorGenerator: %{public}@
%s Start of speech already reported, ignoring !
%s silProb= %{public}f, silnfcnt=%{public}f, clientProcessedAudioMs=%{public}f curSpeechFrmCnt=%{public}lu
%s Speech prob target reached at %{public}lu from %{public}lu, #samples=%lu, secs=%{public}f
%s Received mediaserverd or bridgeaudiod crashes event
%s Received mediaserverd or bridgeaudiod reset event
%s Start monitoring : Mediaserverd crash / recover event
%s disconnect VoiceTriggerXPCClient
%s ERR: failed to get response !
%s Failed setting activity state to continue
%s Failed setting activity state to done
%s Deferring activity:%@ deferred:%@
%s Notifying CoreSpeechDaemon launched
%s Start monitoring : corespeechd state
%s Cannot start monitoring corespeechd state because it was already started
%s Stop monitoring : corespeechd state
%s CoreSpeechDaemon state changed to %{public}u
%s network state notify key : %s
%s Start monitoring : network availability
%s Stop monitoring : network availability
%s Network availability changed
%s language code already up-to-date : %{public}@
%s Using override asset: %@
%s Updated cache with new Trial asset %@
%s Ignore MA asset update
%s startListenWithOption : %{public}d, %{public}@
%s stopListenWithCompletion : %{public}d, %{public}@
%s hasRemoteVADAvailable : %d
%s hasVADAvailable : %d
%s didStopUnexpectly : %d
%s There is not audio buffer to convert. Skip this.
%s Got asked for %{public}u packets, have %{public}u
%s [%{public}02u of %{public}02u %{public}fs] Opus packet with %u bytes
%s %{public}d bytesConsumed from opus coverter, remains %{public}d bytes
%s Resetting AudioConverter buffer
%s createAudioConverter : initial frames per buffer = dur %{public}.2f * sr %{public}.2f = %{public}u
%s Failed to get audioConverter property (kAudioConverterCurrentOutputStreamDescription) : %{public}d
%s _configureAudioConverter: encoded audio needs minimum of %{public}u bytes per output buffer
%s _configureAudioConverter: AudioConverterGetProperty(kAudioConverterPropertyMinimumOutputBufferSize) returned status %{public}d
%s _configureAudioConverter: final framesPerBuffer: %{public}u
%s _configureAudioConverter: _convertPacketCount: %{public}u
%s _configureAudioConverter: AudioConverterGetProperty(MaximumOutputPacketSize): returned status %{public}d
%s createAudioConverter: outputSizePerPacket: %{public}u
%s _configureAudioConverter: _convertAudioCapacity %{public}u bytes
%s Cannot create AudioConverter using AudioConverterNew : %{public}u
%s Cannot set encoder bit rate : %{public}u
%s Providing voiceTriggerEventInfo with deviceId %{public}@
%s Providing built-in voiceTriggerEventInfo
%s Timed-out for fetching voiceTriggerInfo
%s TiggerInfoProviding is nil
%s RequiredSampleCount reached: currSampleCount=%{public}lu, endingSampleCount=%{public}lu
%s SmartSiriVolume cannot be resumed because Siri is not enabled
%s Setting audio injection enabled : %d
%s Fetched audio injection enabled : %d
%s CSAudioInjectionServices Interrupted
%s CSAudioInjectionServices Invalidated
%s Request to create audio injection device type : %ld, deviceName : %@, deviceId : %@, productId : %@
%s Fetching primary device timed-out!!
%s Request to inject audio %@ to deviceUUID %@
%s Request to connect device with UUID %@
%s Connect device timed-out!!
%s Request to disconnect device with UUID %@
%s Disconnect device timed-out!!
%s Request to fetch primary device
%s xpc object should be XPC_TYPE_DICTIONARY
%s xpcObject key or value is NULL
%s Cannot encode key into xpcobject since the key is not NSString class type
%s Failed to create AVVC : %{public}@
%s Create new CSAudioRecorder = %{public}p
%s Tear down _remoteRecordClient if needed
%s CSAudioRecorder %{public}p deallocated
%s Failed to teardown AVVC : %{public}@
%s AVVC initialization failed
%s Successfully create AVVC : %{public}p
%s Setting announced call flag to: %d with stream handle Id: %lu
%s Calling AVVC setContext : %@
%s Failed to get handle id : %{public}@
%s setContext elapsed time = %{public}lf, streamHandleId = %{public}lu, streamType = %{public}lu
%s Calling AVVC setContextForStream : %{public}@
%s Tried to setCurrentContext with mode %ld. This method can only be used for auto and post
%s setCurrentContext elapsed time = %{public}lf
%s Remote device with device id: %{private}@ not found
%s Failed to prepare remote device : %{public}@
%s Calling AVVC prepareRecordForStream(%{public}llu) : %{public}@
%s AVVC prepareRecordForStream failed : %{public}@
%s prepareRecordForStream elapsed time = %{public}lf
%s ::: CSAudioRecord will inject audio file instead of recording
%s Resetting AudioFilePathIndex
%s Increase AudioFilePathIndex = %d
%s AudioFilePathIndex is out-of-boundary _audioFilePathIndex:%d injectAudioFilePaths:%d
%s AudioFilePathIndex:%d accessing:%@
%s Unable to find injectAudioFilePath = %@
%s Asking startRecording to remote device with context : %{public}@ (original context : %{public}@)
%s Failed to fetch valid context
%s Failed to startRecording : %{public}@
%s startRecordingWithOptions elapsed time = %{public}lf
%s Calling AVVC startRecordForStream : %{public}@
%s startRecordForStream failed : %{public}@
%s startRecordForStream elapsed time = %{public}lf
%s Failed to stopRecording to remoteRecordClient : %{public}@
%s stopRecording elapsed time = %{public}lf
%s Calling AVVC stopRecordForStream
%s Failed to stopRecordForStream : %{public}@
%s stopRecordForStream elapsed time = %{public}lf
%s Session State = %d
%s AudioSessionState = YES
%s AudioSessionState = NO
%s fetch recordDeviceInfo elapsed time = %{public}lf
%s fetch EndpointDeviceType elapsed time = %{public}lf
%s AVVC sampling rate = %{public}f
%s AVVC doesn't return sampleRate, assume it is default sample rate
%s isNarrowBand = NO for streamHandleId = %{public}lu
%s (darwinOS) : isNarrowBand = NO for streamHandleId = %{public}lu
%s isNarrowBand = %{public}@ for streamHandleId = %{public}lu
%s Calling AVVC setSessionActive for Prewarm
%s Prewarm AudioSession has failed : %{public}@
%s Calling AVVC setRecordMode to mode : %{public}d
%s AVVC successfully setRecordMode
%s setRecordMode elapsed time = %{public}lf
%s Calling AVVC setSessionActivate for activation with streamId(%{public}lu)
%s AVVC setSessionActivate has failed : %{public}@
%s AVVC successfully activated audioSession
%s setSessionActivate elapsed time = %{public}lf
%s Calling AVVC setSessionActivate for deactivation : %{public}tu
%s Calling AVVC setSessionActivate for deactivation for stream %d: %{public}tu
%s Failed to setIamTheAssistant : %{public}@
%s Creating audio session with allow mixable audio while recording to YES
%s Failed to setAllowMixableAudioWhileRecording : %{public}@
%s Calling AVVC : Enable Smart Routing Consideration
%s Calling AVVC : Disable Smart Routing Consideration
%s enableSmartRoutingConsiderationForStream elapsed time = %{public}lf
%s Fail to setSmartRoutingConsideration : %{public}@
%s Calling AVVC setDuckOthersForStream(%d) for DuckOthers/MixWithOthers
%s Failed to setDuckOthersForStream : %{public}@
%s setDuckOthersForStream elapsed time = %{public}lf
%s Calling audio session reset ducking settings
%s resetDuckSettings elapsed time = %{public}lf
%s Failed to setDuckToLevelDB : %{public}@
%s %{public}@ miniDucking now
%s enableMiniDucking elapsed time = %{public}lf
%s configureAlertBehavior elapsed time = %{public}lf
%s VoiceTriggerInfo is nil from AVVC
%s Ducking %{public}@ supported on current route with streamId: %{public}ld
%s Updated languageCode to: %{public}@ in VTEI received from remote
%s AVVCAudioBuffer contains %{public}d packet descriptions, size %{public}d, channels %{public}d. Ignoring
%s packets count %{public}d
%s Peak : %f, Avg : %f
%s Bad packet length %{public}d. Skipping rest of record buffer.
%s Cannot handle audio buffer : unexpected format(%{public}u)
%s Audio record route is %{private}@ for stream id %{private}lu
%s Calling AVVC playAlertSoundForType to play alert
%s Ignore playing endpoint beep(record stopped beep) since it already played beep in gibraltar
%s Calling AVVC playAlertSoundsForType : %{public}ld
%s Received didStartRecording : %{public}p, forStream:%{public}llu, successfully:%{public}d, error:%{public}@
%s Received audio buffer %{public}d, heartbeat = %{public}llu, streamID (%{public}lu)
%s Received didStopRecording : %{public}p forStream:%{public}llu forReason:%{public}ld
%s Received Stream Invalidated : %{public}llu
%s toConfiguration : %{public}d
%s type : %{public}d, error : %{public}@
%s Encoder error : %{public}@
%s withContext : %{public}@
%s activate : %{public}d
%s AVVC lost mediaserverd connection
%s AVVC informed mediaserverd reset, no further action required
%s hasLocalPendingTwoShot = %{public}d, token : %{public}llu
%s Unsupported audio format!
%s Existing remoteRecordClient (deviceId = %@) doesn't match required one (deviceId = %@), create new remoteRecordClient
%s The input streamHandleId(%{public}lu) is not expected(%{public}lu)
%s Cannot create NSData with size 0
%s xpc object should be XPC_TYPE_DATA
%s endpointer running on corespeechd
%s endpointer running on assistantd
%s Abstract Impl. Returning nil
softlink:r:path:/System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus
softlink:r:path:/System/Library/Frameworks/CoreMotion.framework/CoreMotion
softlink:r:path:/System/Library/PrivateFrameworks/SiriCore.framework/SiriCore
Statistics
CSGestureMonitor
CSBluetoothWirelessSplitterInfo
CSAudioInjectionBuiltInEngine
CSAudioInjectionEngineDelegate
NSObject
CSVoiceTriggerSecondChanceContext
NviDataLogger
NSStreamDelegate
CSMicUsageReporter
CSGestureMonitorPhone
CMWakeGestureDelegate
CSVoiceTriggerAssetHandler
CSAudioSessionController
CSAudioSessionInfoProvidingDelegate
CSXPCClientDelegate
CSCoreSpeechDaemonStateMonitorDelegate
CSSiriDebugConnection
AttSiri
CSCXPhoneCallStateMonitor
CSCommandControlListenerOption
CSMediaPlayingMonitor
CSAudioInjectionFileOption
CSMSNExceptionManager
CSVolumeMonitor
CSTimerMonitor
CSAlarmMonitor
CSAudioStreamHolding
CSUserIdentityClassifier
CSAssetManagerEnablePolicyFactory
CSAttSiriServiceProtocol
CSAttSiriServiceDelegate
CSAttSiriServiceClient
CSSiriFanInfoManager
CSSiriFanInfo
CSBiometricMatchMonitor
CSPreMyriadVoiceTriggerMetaData
CSPreMyriadCoordinator
CSVoiceTriggerDelegate
CSSecondPassProgressDelegate
CSAudioInjectionHearstEngine
AVVC
SmartSiriVolume
CSAudioDeviceInfo
NSCopying
NSSecureCoding
NSCoding
CSSpeakerRecognitionProxy
CSSSRXPCClientDelegate
CSVoiceTriggerXPCService
CSVoiceTriggerXPCClientDelegate
CSVoiceTriggerAssetDownloadMonitor
CSAsset
CSAudioPreprocessor
CSVoiceTriggerAwareZeroFilterDelegate
CSBeepCancellerDelegate
CSOtherAppRecordingStateMonitor
CSBenchmarkService
CSSmartSiriVolumeEnablePolicyFactory
CSAssetDownloadingOption
CSSmartSiriVolumeEnablePolicyHomePod
CSContinuousAudioFingerprintEnabledPolicyHomePod
CSBluetoothManager
CSHostLauncherDarwin
CSSiriAssertionMonitor
CSXPCConnectionDelegate
CSAccessorySiriClientBehaviorMonitor
CSSpeakerRecognitionAssetDownloadMonitor
CSTrialAssetDownloadMonitorDelegate
CSPowerAssertionMac
CSAudioFileReader
CSAdBlockerAssetDownloadMonitor
CSAudioRouteChangeMonitorImplWatch
CSAudioSampleRateConverter
CSLanguageDetectorAssetMonitor
CSSiriSpeechRecordingContext
CSSmartSiriVolumeService
CSSmartSiriVolumeServiceDelegate
CSSmartSiriVolumeClient
isPluginContext
CSAudioInjectionProvider
XPCObject
CSOpportuneSpeakListener
CSAudioStreamProvidingDelegate
CSSPGEndpointAnalyzerDelegate
CSVoiceIdXPCClient
RMSSample
CSShadowMicScoreCreator
CSBluetoothWirelessSplitterMonitorImpIOS
CSContinuousAudioFingerprintEnabledPolicyFactory
AudioInjectionXPCProtocol
CSVoiceTriggerHeartBeatMetricsProvider
CSNNVADEndpointAnalyzer
CSEndpointAnalyzerImpl
CSEndpointAnalyzer
CSActivationXPCClient
CSLanguageDetector
_EARLanguageDetectorDelegate
CSStartOfSpeechDetectorDelegate
LanguageCode
CSBluetoothWirelessSplitterMonitorImplDarwin
CSStopRecordingOptions
CSMacWakeSleepMonitor
CSMyriadSelfTriggerCoordinator
CSSelfTriggerDetectorDelegate
CSEndpointLoggingHelper
CSEndpointLatencyInfo
CSCommandControlStreamEventMonitor
CSCommandControlBehaviorMonitorDelegate
CSAVVCRecordingClientMonitor
CSAudioServerCrashMonitorDelegate
CSAudioSessionMonitor
CSAudioSessionEventProvidingDelegate
Indexing
CSSiriAudioFileWriter
CSCoreSpeechServices
CSHangUpEnabledMonitor
CSAudioStreamRequest
CSOpportuneSpeakListenerDeviceManager
CSAVVoiceTriggerClientManager
CSSpeechManager
CSVoiceTriggerAssetHandlerDelegate
CSActivationEventNotificationHandlerDelegate
CSAudioRecorderDelegate
CSAudioProviderDelegate
CSOpportuneSpeakEventMonitorDelegate
CSSpeechEndHostTimeEstimator
CSClamshellStateMonitor
CSCommandControlListener
FlexKwd
CSAssetManager
CSVoiceTriggerAssetMetaUpdateMonitorDelegate
CSSpeechEndpointAssetMetaUpdateMonitorDelegate
CSAdBlockerMetaUpdateMonitorDelegate
CSAssetControllerDelegate
CSSpeakerRecognitionAssetMetaUpdateMonitorDelegate
CSLanguageCodeUpdateMonitorDelegate
CSEndpointerXPCService
CSEndpointerXPCServiceDelegate
CSEndpointerXPCClient
NviDirectionalitySignalProvider
NviSignalProvider
CSConnectionListener
NSXPCListenerDelegate
CSConnectionServiceDelegate
CSAudioRecorderFactory
CSVoiceTriggerFirstPassMetrics
CSSpeechController
CSAudioConverterDelegate
CSSmartSiriVolumeControllerDelegate
CSAudioAlertProvidingDelegate
CSAudioSessionControllerDelegate
CSAudioDecoderDelegate
CSEndpointAnalyzerImplDelegate
SOMediaNowPlayingListening
SOClockAlarmListening
SOClockTimerListening
CSAudioSessionProvidingDelegate
CSSpeechManagerDelegate
CSContinuousVoiceTriggerDelegate
CSSSRXPCService
CSSSRXPCServiceDelegate
CSSSRXPCClient
CSAttSiriAttendingTriggerEventInfo
RTModel
CSSiriAudioPlaybackSessionImplAVPlayerBased
CSSiriAudioPlaybackSession
SpeechModelTrainingClient
CSSelfTriggerEnabledMonitorAccessory
CSVoiceTriggerAssetHandlerDarwin
CSRemoteAssetManagerDelegate
CSXPCClientFactory
SpeechModelTrainingProtocol
NviSignalProvidersController
CSVoiceTriggerFirstPassHearstAP
CSXPCClient
CSAudioSessionProviding
CSFallbackAudioSessionReleaseProviding
CSAudioStreamProviding
CSAudioAlertProviding
CSAudioSessionInfoProviding
CSAudioMeterProviding
CSAudioMetricProviding
CSAudioTimeConversionProviding
CSTriggerInfoProviding
CSStateMachine
CSEventMonitor
CSVoiceTriggerStatAggregator
CSDigitalZeroReporting
CSSmartSiriVolumeManager
CSAlarmMonitorDelegate
CSTimerMonitorDelegate
CSVolumeMonitorDelegate
CSAutomaticVolumeEnabledMonitorDelegate
CSVoiceTriggerDataCollector
CSAudioFileLog
CSActivationEvent
CoreSpeechXPCFakeModelMonitor
CSScreenLockMonitor
CSSmartSiriVolumeUserIntent
CSAssetController
CSEventMonitorDelegate
Utils
CSAudioInjectionTvRemoteEngine
CSSiriLauncher
CSVTSecondPassLatencyMetrics
CSHostPowerStateMonitor
CSAudioRouteChangeMonitor
CSSmartSiriVolumeEnablePolicy
CSAudioInjectionRemoraEngine
CSAudioInjectionEngine
AudioHardware
CSVoiceTriggerAssetChangeMonitor
CSAttSiriRequestContext
NviAudioFileWriter
CSVoiceTriggerEnabledPolicyNonAOP
CSBluetoothWirelessSplitterMonitor
CSSiriClientBehaviorMonitor
CSSpeechEndpointAssetMetaUpdateMonitor
CSSmartSiriVolumeEstimate
CSSpeechUaapXPCClient
CSVoiceTriggerAssetHandlerMac
CSVoiceTriggerAssetDownloadMonitorDelegate
CSFirstUnlockMonitorDelegate
CSVoiceTriggerAOPModeEnabledPolicyIOS
CSSiriClientBehaviorMonitorDelegate
CSOpportuneSpeakBehaviorMonitor
CSMyriadPHash
NviConstants
CSSiriAudioActivationInfo
NviUtils
Logging
CSHostPowerSourceMonitor
CSAudioStartStreamOption
CSAssetControllerFactory
CSSiriAudioPlaybackSessionImplAVAudioPlayerBased
AVAudioPlayerDelegate
CSSmartSiriVolumeRunPolicyHomePod
CSContinuousAudioFingerprintEnabledPolicy
CSVoiceTriggerXPCServiceProxy
CSAdBlockerAssetDecoderV2
CSRCHandlingXPCService
CSRCHandlingXPCClient
CSSmartSiriVolumeController
CSSmartSiriVolumeClientDelegate
CSPhraseNDEAPIScorer
CSKeywordAnalyzerNDEAPIScoreDelegate
SpeakerRecognition
CSAudioTandemStream
CSBluetoothDeviceInfo
CSAttSiriStateMonitor
CSSmartSiriVolumeRunPolicyFactory
CSP2PService
CSVoiceTriggerAwareZeroFilter
CSPhoneCallStateMonitor
CSAlwaysDisabledPolicy
CSPostBuildInstallService
CSContinuousAudioFingerprintProvider
CSBuiltinSpeakerStateMonitor
NviDirectionalitySignalData
CSEndpointerMetrics
CSSmartSiriVolume
CSMediaPlayingMonitorDelegate
CSSmartSiriVolumeProcessor
CSVoiceTriggerAssetHandlerFromFile
CSSACInfoMonitor
CSVoiceTriggerRTModel
CSSiriVibrationManager
CSAudioRouteChangeMonitorImpl
CSAutomaticVolumeEnabledMonitor
CSSiriRecordingInfo
CSSpeakerRecognitionAssetMetaUpdateMonitor
CSVoiceProfileRetrainManager
CSVoiceTriggerEnabledMonitor
CSVoiceTriggerSecondPassRequestOption
CSHybridEndpointer
CSEndpointerAssetManagerDelegate
!2!B
CSRemoteRecordClient
CSSiriEnabledMonitor
NviCSAudioDataSource
NviAudioDataSource
NviDataSource
CSAlertBehaviorPredictor
CSDefaultAudioRouteChangeMonitorMac
CSAudioInjectionEngineFactory
CSSiriBluetoothManager
CSEndpointerAssetManager
CSAssetManagerDelegate
CESRTrialAssetDelegate
CSEndpointDelayReporter
CSBenchmarkXPCProtocol
CoreSpeechXPCProtocol
CSActivationEventNotifier
CSLanguageCodeUpdateMonitorImpl
CSVoiceTriggerEventsCoordinator
AudioFile
CSSoftwareUpdateCheckingMonitor
CSPreferences
CSAssetManagerEnablePolicy
CSAttSiriAudioSessionStateClient
AFNotifyObserverDelegate
CSCoreSpeechServiceListenerDelegate
CSVoiceTriggerAOPModeEnabledPolicyFactory
CSBatteryMonitor
Liminal
CSVoiceTriggerAssetMetaUpdateMonitor
CSAudioRecordDeviceIndicator
CSVoiceTriggerEnabledPolicyHelper
CSDarkWakePowerAssertionMac
CSSiriQueueMonitor
_CSSiriQueueObserver
CSAlwaysEnabledPolicy
CSRemoteVADCircularBuffer
CSAdBlockerAssetMetaUpdateMonitor
CSAudioStream
CSSiriAudioSession
CSSiriAudioRoute
CSServerEndpointFeatures
CSActivationEventNotificationHandler
CoreSpeechXPC
CSSiriRestrictionOnLockScreenMonitor
MCProfileConnectionObserver
CSRawAudioInjectionProvider
CSSpringboardStartMonitor
CSAudioProvider
CSAudioPreprocessorDelegate
CSListeningEnabledPolicyWatch
CSAlwaysOnProcessorStateMonitor
CSAdBlockerAssetDecoderFactory
CSMyriadNotifier
CSTUPhoneCallStateMonitor
CSAdBlockerAssetDecoderV1
CSAVCallConnectedMonitor
CSUserSessionActiveMonitor
CSTrialAssetDownloadMonitor
CSRemoteDeviceProtocolInfo
Bitset
CSHybridEndpointAnalyzer
OSDAnalyzerDelegate
8!!!B
CSOpportuneSpeakListenerOption
CSAudioInjectionDevice
CSAudioSessionInfoProvider
CSEndpointerProxy
CSEndpointAnalyzerDelegate
CSSiriMobileBluetoothDeviceDataSource
AFInvalidating
CSSiriMobileBluetoothDeviceProxy
AFBluetoothDevice
CSFirstUnlockMonitor
CSPhraseSpotterEnabledMonitor
CSVoiceIdXPCConnection
NSXPC
CSPhoneCallStateMonitorFactory
CSSiriPreferences
MockRemotePluginXPCProtocol
CSFallbackAudioSessionReleaseProvider
CSSPGEndpointAnalyzer
EARCaesuraSilencePosteriorGeneratorDelegate
CSHomePodSettingsMonitor
CSAudioTapProvider
CSASXSignatureExtracting
CSSiriAcousticFingerprinter
CSLanguageDetectorOption
CSSiriSpeechRecorder
CSSiriAcousticFingerprinterDelegate
CSSpeechControllerDelegate
CSLanguageDetectorDelegate
CSSpeakerIdentificationDelegate
CSSiriSpeechCapturing
CSSiriAudioPlaybackService
AFMemoryPressureListening
AFAudioPlaybackService
CSTrialAssetManager
CSStartOfSpeechDetector
CSAudioServerCrashMonitor
CSAudioServerCrashEventProvidingDelegate
CSVoiceTriggerXPCClient
CSXPCActivity
CSCoreSpeechDaemonStateMonitor
CSNetworkAvailabilityMonitor
CSSpeechDetectionDevicePresentMonitor
CSLanguageCodeUpdateMonitorImplDarwin
CSAttSiriMitigationAssetHandler
CSAudioRecordDeviceInfo
CSOpportuneSpeakListnerTestService
CSOpportuneSpeakListenerDelegate
CSAudioConverter
CSLanguageCodeUpdateMonitor
CSVoiceTriggerEventInfoProvider
CSSmartSiriVolumeRunPolicy
CSAudioInjectionServices
CSRemoteDarwinDeviceInfo
CSAdBlockerAssetDecoderV3
Trial
CSGestureDropEvent
RecordContext
LanguageDetector
debugDescription
remoteVoiceActivityVADBuffer
CSAudioRecorder
AVVoiceControllerRecordDelegate
CSAudioFileReaderDelegate
CSRemoteRecordClientDelegate
CSUserSessionActiveMonitorDelegate
CSAudioServerCrashEventProviding
CSAudioSessionEventProviding
CSCommandControlBehaviorMonitor
CSVoiceProfileContext
NviContext
CSEndpointerFactory
CSJarvisTriggerModeMonitor
CSOpportuneSpeakEventMonitor
CSOpportuneSpeakBehaviorMonitorDelegate
NviSignalData
CSSRFUserSettingMonitor
SSVCADBToTTSPreTransitionOffset
.cxx_destruct
SSVLKFSTTSMappingInputRangeHigh
CSAdBlockerMetaUpdateMonitor:didReceiveNewAdBlockerAssetMetaData:
SSVNoiseTTSMappingInputRangeLow
CSAlwaysOnProcessorStateMonitor:didReceiveStateChange:
T@"CSLanguageCodeUpdateMonitor",&,N,V_languageCodeUpdateMonitor
CSAssetManagerDidDownloadNewAsset:
T@"CSSelectiveChannelAudioFileWriter",&,N,V_serverLoggingWriter
CSAudioServerCrashMonitorDidReceiveServerCrash:
T@"CSXPCClient",&,N,V_xpcClient
CSAutomaticVolumeEnabledMonitor:didReceiveEnabled:
T@"NSHashTable",&,N,V_observers
CSBuiltinSpeakerStateMonitor:didReceiveBuiltinSpeakerStateChange:
T@"NSObject<OS_dispatch_queue>",&,N,V_mediaPlayingObserverQueue
CSEventMonitorDidReceiveEvent:
T@"NSString",&,N,V_languageCode
CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:
T@"NSString",&,N,V_overridePath
CSMyriadSelfTriggerCoordinator:didGenerateMyriadPHashForSelfTrigger:
T@"NSString",R,N,V_assetVersion
CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:
T@"NSString",R,N,V_debugLogPath
CSRemoteAssetManagerDidDownloadNewAsset:
TB,N,V_canProcessCurrentRequest
CSSiriEnabledMonitor:didReceiveEnabled:
TB,N,V_epResult
CSSoftwareUpdateCheckingMonitor:didReceiveStateChanged:
TB,N,V_requiresHistoricalBuffer
CSSpeakerRecognitionAssetMetaUpdateMonitor:didReceiveNewSpeakerRecognitionAssetMetaData:
TQ,N,V_audioPacketDeliveryCount
CSSpringboardStartMonitor:didReceiveStarted:
TQ,N,V_dataBufferPositionNDEAPI
CSVoiceTriggerAssetDownloadMonitor:didInstallNewAsset:
TQ,N,V_sigGenTs
CSVoiceTriggerEnabledMonitor:didReceiveEnabled:
Td,R,N,V_activationSystemUptime
CSVoiceTriggerXPCServiceProxy:bypassPhraseSpotter:
CSVolumeMonitor:didReceiveAlarmVolumeChanged:
_activationMode
CSXPCClient:didDisconnect:
_assertionState
JSONObjectWithData:options:error:
_attSiriSvcConn
RTModelWithFallbackLanguage:
_audioConverter
SSVCADBToTTSMaximumOutput
_audioProviders
SSVCADBToTTSPostTransitionDC
_azDistribution
SSVCADBToTTSPostTransitionOffset
_bundleTvRemote
SSVCADBToTTSTransitionPoint
_calculateNumberOfVoicingFrames
SSVCADefaultMusicStrength
_circularBufferStartSampleCount
SSVCADefaultSpeechStrength
_clearPendingRemoraVoiceTrigger
SSVCADeviceDefaultASVOffMinTTSVolume
_convertDB2Mag:
SSVCADeviceDefaultMicSensitivityOffset
_createLanguageDetectorIfNeeded
SSVCADeviceSimpleASVOffMinTTSVolume
_currentMHUUID:
SSVCADeviceSimpleMaxTTSVolume
_delete
SSVCADeviceSimpleMicSensitivityOffset
_deviceCategory
SSVCADeviceSimpleMinTargetDB
_encoderBitRate
SSVCADeviceSimpleOutputMinTargetDB
_fetchAudioProviderWithContext:
SSVCADeviceSimplePreTriggerSilenceSampleCount
SSVCADistanceModelConfidenceThreshold
_getDeviceInfo:
SSVCADistanceResultsBufferSize
_historicalBufferRequestStreams
SSVCADspCoefsCount
_hostTimeBuffer
SSVCAExponentialDistanceHistoryDegradationFactor
_initWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:
SSVCAListenPollingIntervalAtStartInSeconds
_interleavedABL
SSVCAMaxTTSSystemVolume
_isEndAlertInfo
SSVCAMaximumLinearSoundLevel
_isHubRequestTV
SSVCAMinimumDistanceUpdateWaitPeriodSeconds
_isOpus
SSVCAMusicHistoricalSamplesInSeconds
_isSiri
SSVCANoiseActivityCountThreshold
_isSoundPlaying
SSVCANoiseActivityThreshold
_isSpeechDetectionDevicePresent
SSVCASignalToSigmoidMusicDilationFactorDeviceDefault
_isTimerPlaying
SSVCASignalToSigmoidMusicHOffsetDeviceDefault
_lastAudioRecordBufferStartTime
SSVCASignalToSigmoidMusicSteepnessDeviceDefault
_mediaIsPlaying
SSVCASignalToSigmoidMusicVOffsetDeviceDefault
_needsBoost12dB
SSVCASignalToSigmoidMusicVSpreadDeviceDefault
_notifyObserver:isSpeakerMuted:
SSVCASignalToSigmoidNoiseDilationFactor
_numFalseWakeUp
SSVCASignalToSigmoidNoiseSteepness
_phoneCallState
SSVCASignalToSigmoidNoiseVSpread
_processRemoteHeySiriCommandWithRequest:fromSenderID:withReply:
SSVCASignalToSigmoidSpeechHOffset
_remoteSvcProxy
SSVCASignalToSigmoidSpeechVOffset
_rtsTriggerInfo
SSVCASmartSiriVolumeSyncedMetricLogsToRetain
_secondPassAudioStreamReadyTime
SSVCASpeakerDistanceFarBoostFactor
_shadowMicScore
SSVCASpeakerDistanceNearBoostFactor
_shouldUseSoundPlaybackMonitors
SSVCAUserIntentPermanentOffsetFactorLowerBound
_source
SSVCAUserIntentValidForSeconds
_startObservingAudioRouteChange
SSVCAUserIntentVolumeIncreaseFactor
_streamHandleId
SSVCAVoiceTriggerInitialSilenceDurationSeconds
_timeoutHandler
SSVDefaultDistanceChannelCount
_updateAssetWithCurrentLanguage
SSVDefaultNoiseChannelCount
_userIntentType
SSVEnergyBufferSize
_volumeEstimate
SSVLKFSLowerPercentile
activateAudioSessionWithReason:dynamicAttribute:bundleID:error:
SSVLKFSTTSMappingInputRangeLow
activationEvent
SSVLKFSTimeConstant
address
SSVNoiseLevelChannelBitset
allKeys
SSVNoiseMicSensitivityOffset
appName
SSVNoiseTTSMappingInputRangeHigh
audioAlertStyle
SSVNoiseTTSMappingOutputRangeLow
audioDeviceInfo
SSVNoiseUpperPercentile
audioInputRoute
SSVParameterDirectionary
audioStreamType
SSVTTSVolumeUpperLimitDB
base64EncodedStringWithOptions:
SSVUserOffsetInputRangeLow
beginMonitoring
SSVUserOffsetOutputRangeLow
bluetoothDevice
T@"<AFBluetoothDevice>",R,N,V_bluetoothDevice
bundleForClass:
T@"<CSAttSiriServiceDelegate>",W,N,V_delegate
canEnterTwoShot
T@"<CSAudioAlertProviding>",&,N,V_alertProvider
clientSilenceFeaturesAvailable:
T@"<CSAudioAlertProvidingDelegate>",W,N,V_audioAlertProvidingDelegate
connectedDevice
T@"<CSAudioFileReaderDelegate>",W,N,V_delegate
containsString:
T@"<CSAudioMeterProviding>",&,N,V_audioMeterProvider
curSpeechFrames
T@"<CSAudioPreprocessorDelegate>",W,N,V_delegate
currentKeyboard
T@"<CSAudioServerCrashEventProvidingDelegate>",W,N,V_crashEventDelegate
dataForChannel:
T@"<CSAudioSessionInfoProviding>",&,N,V_sessionInfoProvider
dealloc
T@"<CSAudioSessionProviding>",&,N,V_sessionProvider
didDetectSpeech
T@"<CSAudioSessionProvidingDelegate>",W,N,V_sessionDelegate
enabled
T@"<CSAudioStreamProviding>",&,N,V_streamProvider
endpointerProxy
T@"<CSAudioStreamProvidingDelegate>",W,N,V_audioStreamProvidingDelegate
fileURL
T@"<CSBiometricMatchMonitorDelegate>",W,N,V_delegate
firstAudioSampleSensorTimestamp
T@"<CSConnectionServiceDelegate>",W,N,V_delegate
firstPktLatency
T@"<CSEndpointAnalyzerDelegate>",W,N
getBoolForKey:category:default:
T@"<CSEndpointAnalyzerDelegate>",W,N,V_endpointerDelegate
getPlaybackStateWithCompletion:
T@"<CSEndpointAnalyzerImpl>",&,N,V_hybridEndpointer
hearstConnected
T@"<CSEndpointAnalyzerImpl>",W,N,V_activeEndpointer
initWithAudioSessionController:
T@"<CSEndpointAnalyzerImplDelegate>",W,N,V_endpointerImplDelegate
initWithFormat:
T@"<CSEndpointAnalyzerImplDelegate>",W,N,VimplDelegate
initWithMasterAudioStream:name:
T@"<CSLanguageDetectorDelegate>",W,N,V_delegate
initWithQueue:heartBeatInterval:timeoutInterval:timeoutHandler:
T@"<CSOpportuneSpeakListenerDelegate>",W,N,V_delegate
initWithSamplingRate:withAsset:
T@"<CSRemoteRecordClientDelegate>",W,N,V_delegate
injectAudio:withScaleFactor:outASBD:playbackStarted:completion:
T@"<CSSSRXPCClientDelegate>",W,N,V_delegate
injectionEngine
T@"<CSSecondPassProgressProviding>",W,N,V_remoraSecondPassProgressProvider
isActiveSession
T@"<CSSmartSiriVolumeClientDelegate>",W,N,V_delegate
isFirstUnlocked
T@"<CSSmartSiriVolumeProcessor>",&,N,V_smartSiriVolume
isPluginContext
T@"<CSSpeakerRecognitionProxyProtocol>",R,W,N,V_delegate
isRecordContextHearstDoubleTap:
T@"<CSSpeechManagerDelegate>",W,N,V_clientController
isServerInvoked
T@"<CSStateMachineDelegate>",W,N,V_delegate
itemURL
T@"<CSVoiceTriggerAwareZeroFilterDelegate>",W,N,V_delegate
kSSVCAUserIntentValidForSeconds
T@"<CSVoiceTriggerXPCClientDelegate>",W,N,V_delegate
keywordDetectorDidDetectKeyword
T@"<NviAssetsProvider>",&,N,V_assetsProvider
lastSampleCount
T@"AFAudioPlaybackRequest",R,N,V_request
lowercaseString
T@"AFNotifyObserver",&,N,V_siriStateObserver
metrics
T@"AVVoiceTriggerClient",&,N,V_alwaysOnProcessorController
mitigationModelDefaultAFTMScore
T@"CSActivationEvent",&,N,V_pendingActivationEvent
myriadPreventingTwoShotFeedback
T@"CSAsset",&,N,V_currentHEPAsset
nnvadEndpointer
T@"CSAsset",&,V_cachedAsset
numChannelsForNviDirectionality
T@"CSAttSiriRequestContext",C,N,V_ctx
numberWithBool:
T@"CSAudioCircularBuffer",&,N,V_circBuffer
oStream
T@"CSAudioConverter",&,N,V_encoder
options
T@"CSAudioInjectionDevice",&,N,V_builtInDevice
outputs
T@"CSAudioInjectionDevice",W,N,V_connectedDevice
overrideEnabled
T@"CSAudioInjectionEngine",W,N,V_injectionEngine
pendingRemoraVoiceTriggerResult
T@"CSAudioPowerMeter",&,N,V_powerMeter
preheatLanguage
T@"CSAudioRecordContext",&,N,V_audioRecordContext
prewarm
T@"CSAudioRecordContext",&,N,V_latestContext
protocolVersion
T@"CSAudioRecordContext",R,N,V_recordContext
receiveOnlyProcessedChannelData
T@"CSAudioRecordDeviceInfo",R,C,N,V_recordDeviceInfo
registerPostBuildInstallService
T@"CSAudioRecorder",&,N,V_audioRecorder
release
T@"CSAudioSessionController",&,N,V_audioSessionController
removeDelegate:
T@"CSAudioStream",&,N,V_audioStream
removeObserver:
T@"CSAudioStreamRequest",&,N,V_streamRequest
reportMHEndpointerAccessibleContextEventWithThresholdType:MhId:
T@"CSAudioTimeConverter",&,N,V_audioTimeConverter
request
T@"CSAudioZeroFilter",&,N,V_zeroFilter
results
T@"CSEndpointerProxy",&,N,V_endpointerProxy
secondPassAssetLoadCompleteTime
T@"CSFirstUnlockMonitor",&,N,V_firstUnlockMonitor
sessionDelegate
T@"CSKeywordAnalyzerNDEAPI",&,N,V_keywordAnalyzer
T@"CSLanguageDetector",&,N,V_languageDetector
setAlwaysOnProcessorController:
T@"CSOSTransaction",&,N,V_recordingTransaction
setAudioAlertProvidingDelegate:
T@"CSPhoneCallStateMonitor",&,N,V_phoneCallStateMonitor
setAudioFormat:
T@"CSPostBuildInstallService",&,N,V_postBuildInstallService
setAudioStream:
T@"CSRCHandlingXPCClient",&,N,V_rcHandlingClient
setBuiltInVoiceTriggerMetaData:
T@"CSSPGEndpointAnalyzer",&,N,V_spgEndpointAnalyzer
setCircularBufferStartHostTime:
T@"CSServerEndpointFeatures",&,N,V_lastKnownServerEPFeatures
setDidAddAudio:
T@"CSSiriAssertionMonitor",&,N,V_assertionMonitor
setEndWaitTime:
T@"CSSmartSiriVolumeController",&,N,V_volumeController
setHearstFirstPassModelVersion:
T@"CSSpeechEndHostTimeEstimator",&,N,V_speechEndHostTimeEstimator
setIsConnected:
T@"CSStopRecordingOptions",&,N,V_requestedStopRecordingOptions
setIsRecording:
T@"CSTrialAssetDownloadMonitor",&,N,V_trialAssetMonitor
setKeyboardConvoLanguagePriors:
T@"CSTrialAssetManager",&,N,V_trialAssetManager
setLpcmIsFloat:
T@"CSVoiceTriggerAssetDownloadMonitor",&,N,V_voiceTriggerAssetDownloadMonitor
setNumChannels:
T@"CSVoiceTriggerFirstPassMetrics",R,N,V_firstpassMetrics
setOpportuneSpeakListeningType:
T@"CSVolumeMonitor",&,N,V_volumeMonitor
setPauseCounts:
T@"CSXPCClientFactory",&,N,V_xpcClientFactory
setRecordQueue:
T@"EARCaesuraSilencePosteriorGenerator",&,N,V_caesuraSPG
setSecondChanceHotTillMachTime:
T@"NSArray",&,N,V_conversationalMessages
setServerFeaturesWarmupLatency:
T@"NSArray",&,N,V_multilingualKeyboardLanguages
setSiriCueType:
T@"NSArray",&,N,V_spatialSpectrumData
setStartSample:
T@"NSArray",R,C,N,V_playbackDeviceTypeList
setSupportDoAP:
T@"NSData",C
setSupportSessionActivateDelay:
T@"NSData",R,N,V_digest
setTargetSpeed:
T@"NSData",R,N,V_signature
setTriggerMode:
T@"NSDate",&,N,V_lastServerFeatureTimestamp
setUserSpeakingStartedHostTime:
T@"NSDictionary",&,N,V_asrDatapackInstallationStatus
setWithObjects:
T@"NSDictionary",&,N,V_csAssetsDictionary
setupConnection
T@"NSDictionary",&,N,V_dictationLanguagePriors
sigProvidersMap
T@"NSDictionary",&,N,V_keyboardGlobalLanguagePriors
siriInputSource
T@"NSDictionary",&,N,V_pendingRemoraVoiceTriggerResult
smartSiriVolume
T@"NSDictionary",&,N,V_speakerRecognitionScores
splitterEnabled
T@"NSDictionary",&,N,V_voiceTriggerInfo
startMonitoring
T@"NSDictionary",R,C,N,V_activationMetadata
startRecording:
T@"NSDictionary",R,N,V_activationInfo
stopAudioStream
T@"NSDictionary",R,N,V_voiceTriggerEventInfo
stringByAppendingPathComponent:
T@"NSHashTable",&,N,V_audioSessionInfoObservers
stringFromDate:
T@"NSHashTable",&,N,V_currActiveSigProvTypes
timeStampString
T@"NSHashTable",&,N,V_startPendingOnStoppingStreams
trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:
T@"NSHashTable",&,N,V_stopPendingStreams
T@"NSHashTable",R,N,V_tandemStreams
updateEndpointerDelayedTrigger:
T@"NSMapTable",&,N,V_sigProvidersMap
version
T@"NSMutableArray",&,N,V_clientConnections
.cxx_construct
SSVCAHistoricalVolumeBufferSize
CSAdBlockerAssetDownloadMonitor:didInstallNewAsset:assetProviderType:
SSVLKFSTTSMappingOutputRangeLow
CSAlarmMonitor:didReceiveAlarmChanged:
T@"<CSLanguageDetectorDelegate>",W,N,V_languageDetectorDelegate
CSAssetController:didDownloadNewAssetForType:
T@"CSPolicy",&,N,V_enablePolicy
CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:
T@"CSTrialAssetDownloadMonitor",&,N,V_trialAssetDownloadMonitor
CSAudioServerCrashMonitorDidReceiveServerRestart:
T@"NSArray",R,N
CSBluetoothWirelessSplitterMonitor:didReceiveSplitterStateChange:shouldDisableSpeakerVerificationInSplitterMode:
T@"NSHashTable",&,N,V_receivers
CSClamshellStateMonitor:didReceiveClamshellStateChange:
T@"NSObject<OS_xpc_object>",R,N
CSFirstUnlockMonitor:didReceiveFirstUnlock:
T@"NSString",&,N,V_logEventUUID
CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:
T@"NSString",R,C,N,V_deviceName
CSNetworkAvailabilityMonitor:didReceiveNetworkAvailabilityChanged:
T@"NSString",R,N,V_buildVersion
CSPhraseSpotterEnabledMonitor:didReceiveEnabled:
T@"NSUUID",&,N,V_turnIdentifier
CSSiriAssertionMonitor:didReceiveEnabled:
TB,N,V_didReceiveServerFeatures
CSSiriRestrictionOnLockScreenMonitor:didReceiveRestrictionChanged:
TB,N,V_permanentOffsetIsEnabled
CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:
TB,N,V_triggeredTwoShotBorealis
CSSpeechEndpointAssetMetaUpdateMonitor:didReceiveNewSpeechEndpointAssetMetaData:
TQ,N,V_currentRequestSampleRate
CSTimerMonitor:didReceiveTimerChanged:
TQ,N,V_lastForwardedSampleCount
CSVoiceTriggerAssetMetaUpdateMonitor:didReceiveNewVoiceTriggerAssetMetaData:
Td,N,V_RMSScore
CSVoiceTriggerFirstPassMetricsWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:
Tf,N,V_currentMaximumBufferSize
CSVoiceTriggerXPCServiceProxy:bypassRaiseToSpeak:
_activationInfo
CSVolumeMonitor:didReceiveMusicVolumeChanged:
_allowAdBlockerAssetDownloading
CSXPCConnectionReceivedClientError:clientError:client:
_assetsProvider
RMSScore
_attendingState
SSVCAAnnouncementStatusFetchTimeoutMs
_audioFeedTimer
SSVCADBToTTSMinimumOutput
_audioSessionID
SSVCADBToTTSPostTransitionMultiplier
_bufferDuration
SSVCADBToTTSPreTransitionMultiplier
_cachedAvgPower
SSVCADecibelToLinearLogBase
_circularBuffer
SSVCADefaultOutputTTSVolume
_clampedSFLatencyMsForClientLag
SSVCADefaultZeroFloatingPointValue
_closeAudioFile
SSVCADeviceDefaultMaxTTSVolume
_createDirectoryIfDoesNotExist:
SSVCADeviceDefaultMinTTSVolume
_currentAudioRecorderSampleRate
SSVCADeviceSimpleDBToSystemVolSlope
_defaultOutASBD
SSVCADeviceSimpleMaxTargetDB
_device
SSVCADeviceSimpleMinTTSVolume
_digest
SSVCADeviceSimpleOutputMaxTargetDB
_endpointerType
SSVCADeviceSimpleOutputSlope
_fetchDeviceInfoWithCompletion:
SSVCADistanceInputBufferDurationSeconds
_gestureManager
SSVCADistanceResultSampleCountTolerance
_headsetAddress
SSVCADropInCallAnnouncementMinTTSVolume
_homeId
SSVCADspNumStages
_inASBD
SSVCALinearToDecibelConstantMultiplier
_inputRecordingNumberOfChannels
SSVCAMaxFrameSize
_isAlarmPlaying
SSVCAMaximumCompensatedSpeechLevelNearField
_isHearstRouted
SSVCAMinTTSSystemVolume
_isMediaPlaying
SSVCAMinimumLinearSoundLevel
_isRemoteDevice
SSVCAMusicResultsBufferSize
_isSiriClientConsideredAsRecord
SSVCANoiseActivityHistoricalSampleCount
_isSpeakerMuted
SSVCANoiseResultsBufferSize
_isTemporaryPairedNotInContacts
SSVCASignalToSigmoidMusicDilationFactorDeviceSimple
_iterateSignalMask:withHandler:
SSVCASignalToSigmoidMusicHOffsetDeviceSimple
_logRecordingStopErrorIfNeeded:
SSVCASignalToSigmoidMusicSteepnessDeviceSimple
_mhUUID
SSVCASignalToSigmoidMusicVOffsetDeviceSimple
_noiseTTSMappingOutputRangeHigh
SSVCASignalToSigmoidMusicVSpreadDeviceSimple
_notifyObserver:withRestricted:
SSVCASignalToSigmoidNoiseHOffset
_nviCtx
SSVCASignalToSigmoidNoiseVOffset
_player
SSVCASignalToSigmoidSpeechDilationFactor
_recordingState
SSVCASignalToSigmoidSpeechSteepness
_reqSrc
SSVCASignalToSigmoidSpeechVSpread
_sacInfoMonitor
SSVCASmartSiriVolumeUnsyncedMetricLogsToRetain
_secondPassAudioStreamStartTime
SSVCASpeakerDistanceMidBoostFactor
_shouldCheckNetworkAvailability
SSVCAUserIntentPermanentOffsetFactorDelta
_signalEstimate
SSVCAUserIntentPermanentOffsetFactorUpperBound
_ssvLogFilePath
SSVCAUserIntentVolumeDecreaseFactor
_stopMonitoring
SSVCAVoiceTriggerBasedTTSValidForSeconds
_streamProvider
SSVCAVolumeHalfLifeSeconds
_turnIdentifier
SSVDefaultLKFSChannelCount
_userIntentTime
SSVDistanceChannelBitset
_voiceIdentificationTraining_withoutResultCandidateSharedUserId
SSVLKFSChannelBitset
_xpcClientQueue
SSVLKFSMicSensitivityOffset
activateEndTime
SSVLKFSTTSMappingOutputRangeHigh
activationEventMachAbsoluteTime
SSVLKFSUpperPercentile
alertPlaybackFinishTimeoutToken
SSVNoiseLowerPercentile
apQueue
SSVNoiseMicSensitivityOffsetDeviceSimple
assetQueryQueue
SSVNoiseTTSMappingOutputRangeHigh
audioChunkToEndFrom:channelIdx:
SSVNoiseTimeConstant
audioFileWriter
SSVNoiseWeight
audioProviderWithContext:error:
SSVTTSVolumeLowerLimitDB
azimuth
SSVUserOffsetInputRangeHigh
baseDir
SSVUserOffsetOutputRangeHigh
bestEnd
T#,R
buildPhoneticMatchWithLanguage:saveIntermediateFsts:completion:
T@"<CSADCompanionServiceProvider>",W,N,V_adCompanionServiceProvider
cachedPeakPower
T@"<CSAttSiriSessionStateDelegate>",R,W,N,V_delegate
canGetPCMStream
T@"<CSAudioAlertProvidingDelegate>",W,N,V_alertDelegate
connect
T@"<CSAudioConverterDelegate>",W,V_delegate
containsObject:
T@"<CSAudioInjectionEngineDelegate>",W,N,V_delegate
T@"<CSAudioMetricProviding>",&,N,V_audioMetricProvider
currentHEPAsset
T@"<CSAudioProviderDelegate>",W,N,V_providerDelegate
currentOEPAsset
T@"<CSAudioSessionEventProvidingDelegate>",W,N,V_sessionEventDelegate
dataWithLength:
T@"<CSAudioSessionProviding>",&,N,V_audioSessionProvider
deviceIsInSleep
T@"<CSAudioSessionProvidingDelegate>",W,N,V_audioSessionProvidingDelegate
eagerlyInitializeAudioRecording
T@"<CSAudioStreamProviding>",&,N,V_audioStreamProvider
encoder
T@"<CSAudioStreamProviding>",W,N,V_streamProvider
fadeOutDuration
T@"<CSAudioStreamProvidingDelegate>",W,N,V_delegate
finalFilteredDictationLanguages
T@"<CSCommandControlListenerDelegate>",W,N,V_delegate
firstPassSource
T@"<CSEndpointAnalyzer>",R,N
getBTLocalDeviceWithCompletion:
T@"<CSEndpointAnalyzerDelegate>",W,N,V_delegate
getBytes:range:
T@"<CSEndpointAnalyzerDelegate>",W,N,Vdelegate
getVoiceTriggerEndSecsFromVTEI:
T@"<CSEndpointAnalyzerImpl>",&,N,V_nnvadEndpointer
initForSidekick
T@"<CSEndpointAnalyzerImplDelegate>",W,N
initWithDouble:
T@"<CSEndpointAnalyzerImplDelegate>",W,N,V_implDelegate
initWithLength:
T@"<CSLanguageDetectorAssetMonitorDelegate>",W,N,V_delegate
initWithNSUUID:
T@"<CSMyriadSelfTriggerCoordinatorDelegate>",W,N,V_delegate
initWithRequestId:languageCode:
T@"<CSPhraseNDEAPIScorerDelegate>",W,N,V_delegate
initWithString:
T@"<CSSPGEndpointAnalyzerDelegate>",W,N,V_delegate
injectionCompletionNotifyBlocks
T@"<CSSecondPassProgressProviding>",W,N,V_builtInSeconPassProgressProvider
isActiveRequest
T@"<CSSiriAcousticFingerprinterDelegate>",W,N,V_delegate
isAlwaysOnVoiceTriggerAvailable
T@"<CSSmartSiriVolumeControllerDelegate>",W,N,V_delegate
isNarrowBandWithStreamHandleId:
T@"<CSSpeakerIdentificationDelegate>",W,N,V_speakerIdDelegate
isProxy
T@"<CSSpeechControllerDelegate>",W,N,V_delegate
isRecordContextHomeButtonPress:
T@"<CSStartOfSpeechDetectorDelegate>",W,N,V_delegate
isSoftwareUpdateCheckingRunning
T@"<CSVoiceTriggerAssetChangeDelegate>",W,N,V_delegate
jarvisConnected
T@"<CSVoiceTriggerDelegate>",W,N,V_delegate
keywordAnalyzer
T@"<CSXPCClientDelegate>",W,N,V_delegate
languageDetectorSupportedLocale
T@"AFAudioPlaybackRequest",R,N
logMHAssistantDaemonAudioInitContextWithMHUUID:withInitStarted:
T@"AFLanguageDetectionUserContext",R,C,N,V_languageDetectionUserContext
machServiceName
T@"AFSpeechRecordingAlertPolicy",R,N,V_speechRecordingAlertPolicy
minSpeechFrames
T@"CSADPPreventStandbyAssertion",&,N,V_adpAssertion
monitor
T@"CSAsset",&,N,V_currentAsset
newWithBuilder:
T@"CSAsset",&,N,V_currentOEPAsset
notifyObserver:
T@"CSAssetManager",&,N,V_assetManager
numOfValidTrailingSpeechPackets
T@"CSAudioCircularBuffer",&,N,V_audioLoggingBuffer
numberWithLong:
T@"CSAudioCircularBuffer",&,N,V_circularBuffer
opaqueSessionID
T@"CSAudioDeviceInfo",&,N,V_audioDeviceInfo
outASBD
T@"CSAudioInjectionDevice",&,N,V_bundleTvRemote
overrideAudioSessionActiveDelay
T@"CSAudioInjectionEngine",&,N,V_builtInAudioInjectionEngine
packets
T@"CSAudioInjectionFileOption",&,N,V_fileOption
preheat
T@"CSAudioPreprocessor",&,N,V_audioPreprocessor
prepareForMode:
T@"CSAudioRecordContext",&,N,V_lastAudioRecorderContext
productCategory
T@"CSAudioRecordContext",&,N,V_recordContext
rcXPCConnection
T@"CSAudioRecordDeviceIndicator",&,N,V_recordDeviceIndicator
recordEventUUID
T@"CSAudioRecordDeviceInfo",R,N,V_deviceInfo
rejectionMHUUID
T@"CSAudioSampleRateConverter",&,N,V_upsampler
remoteDeviceUID
T@"CSAudioStartStreamOption",&,N,SsetStartStreamOption:,V_startStreamOption
removeListener:
T@"CSAudioStream",W,N,V_primaryStream
removeReceiver:
T@"CSAudioTapProvider",&,N,V_audioTapProvider
reportMicUsage:
T@"CSAudioZeroCounter",&,N,V_zeroCounter
resetEndpointer
T@"CSBeepCanceller",&,N,V_beepCanceller
sampleByteDepth
T@"CSFallbackAudioSessionReleaseProvider",&,N,V_fallbackAudioSessionReleaseProvider
selectedChannel
T@"CSKeywordAnalyzerNDAPI",&,N,V_keywordAnalyzer
sessionProvider
T@"CSKeywordAnalyzerNDEAPI",&,N,V_keywordAnalyzerNDEAPI
setAccessibleEndpointerEnabled:
T@"CSMicUsageReporter",&,N,V_micUsageReporter
setAlwaysOnVoiceTriggerEnabled:
T@"CSOpportuneSpeakListnerTestService",&,N,V_opportuneSpeakListnerTestService
setAudioBuffer:
T@"CSPlainAudioFileWriter",&,N,V_audioFileWriter
setAudioSessionActivationDelay:
T@"CSPreMyriadVoiceTriggerMetaData",&,N,V_builtInVoiceTriggerMetaData
setBuiltInAudioInjectionEngine:
T@"CSSACInfoMonitor",&,N,V_sacInfoMonitor
setCachedAsset:
T@"CSSSRXPCClient",&,N,V_ssrXPCClient
setCtx:
T@"CSShadowMicScoreCreator",&,N,V_shadowMicScoreCreator
setDidDeliverFirstSpeechPacket:
T@"CSSmartSiriVolumeClient",&,N,V_ssvClient
setHasReported:
T@"CSSmartSiriVolumeManager",&,N,V_ssvManager
setIsAttachingBluetoothSession:
T@"CSStartOfSpeechDetector",&,N,V_startOfSpeechDetector
setIsListening:
T@"CSTrialAssetDownloadMonitor",&,N,V_monitor
setIsStreaming:
T@"CSTrialAssetDownloadMonitor",&,N,V_trialDownloadMonitor
setLocalDevice:
T@"CSUncompressedAudioLogging",&,N,V_uncompressedAudioLogging
setNotifyToken:
T@"CSVoiceTriggerAwareZeroFilter",&,N,V_zeroFilter
setOnboardType:
T@"CSVoiceTriggerXPCClient",&,N,V_xpcClient
setOsdAnalyzer:
T@"CSXPCClient",&,N,V_duckAudioXPCClient
setPayloadData:
T@"CoreSpeechXPCFakeModelMonitor",&,N,V_fakeAssetMonitor
setScaleFactor:
T@"NSArray",&,N,V_connectedDeviceAddresses
setSelfTriggerEnabledAccessory:
T@"NSArray",&,N,V_featuresAtEndpoint
setServerState:
T@"NSArray",&,N,V_pairedDeviceAddresses
setStartRecordingWatchDogToken:
T@"NSArray",C,N,V_pauseCounts
setStreamState:
T@"NSData",&,N,V_payloadData
setSupportLazySessionActivtion:
T@"NSData",R,N,V_certificate
setTargetQueue:
T@"NSData",R,N,V_modelData
setTransitions:
T@"NSDate",&,N,V_firstAudioPacketTimestamp
setUseCustomizedRecordSettings:
T@"NSDictionary",&,N,V_additionalMetrics
setUserSpeakingStartedTimeInMs:
T@"NSDictionary",&,N,V_azDistribution
setZeroCounter:
T@"NSDictionary",&,N,V_dataSrcMap
sharedAnalytics
T@"NSDictionary",&,N,V_keyboardConvoLanguagePriors
sigType
T@"NSDictionary",&,N,V_pendingBuiltInVoiceTriggerResult
siriSessionUUID
T@"NSDictionary",&,N,V_serverFeatureLatencyDistribution
speechCapturing:didDetectLanguage:confidenceScores:isConfident:
T@"NSDictionary",&,N,V_taskThresholdMap
startController
T@"NSDictionary",C,N,V_rtsTriggerInfo
startOfSpeechDetectorConfigFile
T@"NSDictionary",R,N
startWithQueue:
T@"NSDictionary",R,N,V_firstPassTriggerInfo
streams
T@"NSHashTable",&,N,V_alertPlaybackFinishWaitingStreams
stringByAppendingPathExtension:
T@"NSHashTable",&,N,V_currActiveDataSourceTypes
supportRemoteDarwinVoiceTrigger
T@"NSHashTable",&,N,V_historicalBufferRequestStreams
timeoutDetected
T@"NSHashTable",&,N,V_startPendingStreams
triggerMachTime
T@"NSHashTable",&,N,V_streams
updateDeviceId:
T@"NSMapTable",&,N,V_delegates
usePrelistening
T@"NSMutableArray",&,N,V_alertPlaybackFinishWaitingCompletions
wakeGestureManager:didUpdateWakeGesture:orientation:detectedAt:
T@"NSMutableArray",&,N,V_connectedDevices
T@"NSMutableArray",&,N,V_hostTimeBuffer
T@"NSMutableArray",&,N,V_injectionAudioFileList
T@"NSMutableArray",&,N,V_injectionCompletionNotifyBlocks
T@"NSMutableArray",&,N,V_injectionStartNotifyBlocks
T@"NSMutableArray",&,N,V_latestDetectedLanguages
T@"NSMutableArray",&,N,V_pendingStartCompletions
T@"NSMutableArray",&,N,V_pendingStopCompletions
T@"NSMutableArray",&,N,V_remoteVADAlignBuffer
T@"NSMutableArray",&,N,V_rmsSamplesForEntireAudio
T@"NSMutableArray",&,N,V_serverFeatureLatencies
T@"NSMutableArray",&,N,V_streamHolders
T@"NSMutableArray",&,N,V_trailingPktLatencies
T@"NSMutableArray",&,N,V_trailingPktSpeechLatencies
T@"NSMutableData",&,N,V_audioBuffer
T@"NSMutableData",&,N,V_dataBufferNDEAPI
T@"NSMutableDictionary",&,N,V_accessoryVoiceTriggerMetaDataByDeviceId
T@"NSMutableDictionary",&,N,V_audioInjectionEngines
T@"NSMutableDictionary",&,N,V_audioProviders
T@"NSMutableDictionary",&,N,V_decodersForTV
T@"NSMutableDictionary",&,N,V_eventToStateTransitions
T@"NSMutableDictionary",&,N,V_falseWakePhraseDictionary
T@"NSMutableDictionary",&,N,V_inUseServices
T@"NSMutableDictionary",&,N,V_observers
T@"NSMutableDictionary",&,N,V_startPendingOnStoppingStreamToCompletionDict
T@"NSMutableDictionary",&,N,V_transitions
T@"NSMutableDictionary",&,V_cachedEndpointAssets
T@"NSMutableDictionary",R,N,V_shouldResetAdsDictionary
T@"NSMutableSet",&,N,V_activationAssertions
T@"NSMutableSet",&,N,V_remoteAccessoryStreamIdSet
T@"NSNumber",&,N,V_version
T@"NSNumber",R,N,V_firstPassInfoGeneratedTime
T@"NSNumber",R,N,V_firstPassInfoProcessedTime
T@"NSObject<OS_dispatch_group>",&,N,V_bluetoothSessionSetupGroup
T@"NSObject<OS_dispatch_group>",&,N,V_recordingWillStartGroup
T@"NSObject<OS_dispatch_queue>",&,N,V_alignBufferQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_apQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_assetQueryQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_assetsMigrationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_hybridClassifierQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_loggingQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_osdQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSObject<OS_dispatch_queue>",&,N,V_recordQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serverFeaturesQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_sessionInfoQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_sosQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_spgQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_stateNotificationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_stateSerialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_streamHandleQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_targetQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_voiceControllerCreationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcClientQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcConnectionQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcDelegateQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcReplyQueue
T@"NSObject<OS_dispatch_source>",&,N,V_audioFeedTimer
T@"NSObject<OS_dispatch_source>",&,N,V_audioPacketWatchdog
T@"NSObject<OS_dispatch_source>",&,N,V_clearLoggingFileTimer
T@"NSObject<OS_dispatch_source>",&,N,V_listenPollingTimer
T@"NSObject<OS_xpc_object>",&,N,V_connection
T@"NSObject<OS_xpc_object>",&,N,V_xpcConnection
T@"NSOutputStream",&,N,V_oStream
T@"NSSet",&,N,V_dictationLanguages
T@"NSString",&,N
T@"NSString",&,N,V_atvRemoteDeviceID
T@"NSString",&,N,V_audioProviderUUID
T@"NSString",&,N,V_bundleIdFromDictation
T@"NSString",&,N,V_configFile
T@"NSString",&,N,V_currentKeyboard
T@"NSString",&,N,V_detectedToken
T@"NSString",&,N,V_deviceId
T@"NSString",&,N,V_endpointerModelVersion
T@"NSString",&,N,V_globalLastKeyboardUsed
T@"NSString",&,N,V_homeId
T@"NSString",&,N,V_lastCommunicatedPeer
T@"NSString",&,N,V_machServiceName
T@"NSString",&,N,V_mhId
T@"NSString",&,N,V_name
T@"NSString",&,N,V_pendingRecordingStopUUID
T@"NSString",&,N,V_pendingRemoraVoiceTriggerDeviceId
T@"NSString",&,N,V_previousMessageLanguage
T@"NSString",&,N,V_productCategory
T@"NSString",&,N,V_profileId
T@"NSString",&,N,V_recordEventUUID
T@"NSString",&,N,V_requestMHUUID
T@"NSString",&,N,V_rootLogDir
T@"NSString",&,N,V_siriSessionUUID
T@"NSString",&,N,V_ssvLogFilePath
T@"NSString",&,N,V_userName
T@"NSString",&,N,V_voiceIdentificationBatchId
T@"NSString",&,N,V_voiceTriggerBatchId
T@"NSString",&,N,VmhId
T@"NSString",&,V_lastFakeModelUsedHash
T@"NSString",C,N,V_address
T@"NSString",C,N,V_deviceId
T@"NSString",C,N,V_interactionID
T@"NSString",C,N,V_languageDetectorAssetHash
T@"NSString",C,N,V_taskName
T@"NSString",R,C
T@"NSString",R,C,N,V_address
T@"NSString",R,C,N,V_applicationBundleIdentifier
T@"NSString",R,C,N,V_applicationDisplayName
T@"NSString",R,C,N,V_destination
T@"NSString",R,C,N,V_deviceIdentifier
T@"NSString",R,C,N,V_playbackRoute
T@"NSString",R,C,N,V_remoteDeviceProductIdentifier
T@"NSString",R,C,N,V_remoteDeviceUIDString
T@"NSString",R,C,N,V_route
T@"NSString",R,C,N,V_sessionUUID
T@"NSString",R,C,N,V_source
T@"NSString",R,C,N,V_uid
T@"NSString",R,N
T@"NSString",R,N,V_UUID
T@"NSString",R,N,V_audioProviderUUID
T@"NSString",R,N,V_codec
T@"NSString",R,N,V_destination
T@"NSString",R,N,V_deviceID
T@"NSString",R,N,V_deviceId
T@"NSString",R,N,V_deviceIdentifier
T@"NSString",R,N,V_deviceName
T@"NSString",R,N,V_deviceProductType
T@"NSString",R,N,V_deviceProductVersion
T@"NSString",R,N,V_dspStatus
T@"NSString",R,N,V_headsetName
T@"NSString",R,N,V_modelHash
T@"NSString",R,N,V_modelLocale
T@"NSString",R,N,V_modelName
T@"NSString",R,N,V_productIdentifier
T@"NSString",R,N,V_route
T@"NSString",R,N,V_source
T@"NSURL",R,N,V_audioURL
T@"NSURL",R,N,V_fileURL
T@"NSUUID",&,N,V_alertPlaybackFinishTimeoutToken
T@"NSUUID",&,N,V_endpointId
T@"NSUUID",&,N,V_pendingAudioSessionActivationToken
T@"NSUUID",&,N,V_startRecordingWatchDogToken
T@"NSUUID",&,N,V_stopRecordingWatchDogToken
T@"NSUUID",&,N,V_token
T@"NSUUID",&,N,V_uuid
T@"NSUUID",&,V_streamingUUID
T@"NSUUID",R,C,N,V_deviceUID
T@"NSUUID",R,C,N,V_endpointId
T@"NSUUID",R,C,N,V_remoteDeviceUID
T@"NSUUID",R,C,N,V_turnIdentifier
T@"NSUUID",R,N,V_deviceUID
T@"NSUUID",R,N,V_rejectionMHUUID
T@"NSXPCConnection",&,N,V_attSiriSvcConn
T@"NSXPCConnection",&,N,V_endpointerConnection
T@"NSXPCConnection",&,N,V_rcXPCConnection
T@"NSXPCConnection",&,N,V_ssrConnection
T@"NSXPCConnection",&,N,V_ssvConnection
T@"NviContext",&,N,V_nviCtx
T@"OSDAnalyzer",&,N,V_osdAnalyzer
T@"OSDFeatures",&,N,V_lastKnownOSDFeatures
T@"OSDFeatures",&,N,V_osdFeaturesAtEndpoint
T@"SOClockAlarmObserver",&,N,V_alarmMonitor
T@"SOClockTimerObserver",&,N,V_timerMonitor
T@"SOMediaNowPlayingObserver",&,N,V_mediaPlayingMonitor
T@"_EAREndpointer",&,N,V_hybridClassifier
T@"_EARLanguageDetector",&,N,V_languageDetector
T@"_EARLanguageDetectorAudioBuffer",&,N,V_audioBuffer
T@,&,N,V_remoteObjectProxy
T@,&,N,V_remoteSvcProxy
T@?,C,N,V_pendingAudioSessionActivationCompletion
T@?,C,N,V_pendingBuiltInVoiceTriggerCompletionBlk
T@?,C,N,V_pendingCompletion
T@?,C,N,V_pendingRemoraVoiceTriggerCompletionBlk
TB,N
TB,N,SsetScheduledFutureSample:,V_scheduledFutureSample
TB,N,V_accessibleEndpointerEnabled
TB,N,V_allowAdBlockerAssetDownloading
TB,N,V_allowEndpointAssetDownloading
TB,N,V_allowLanguageDetectorAssetDownloading
TB,N,V_allowSpeakerRecognitionAssetDownloading
TB,N,V_allowVoiceTriggerAccessoryAssetDownloading
TB,N,V_allowVoiceTriggerAssetDownloading
TB,N,V_audioSystemRecovering
TB,N,V_canPerformDelayedStop
TB,N,V_currentSessionShouldDuckOnBuiltInSpeaker
TB,N,V_deviceRoleIsStereo
TB,N,V_didAddAudio
TB,N,V_didCommunicateEndpoint
TB,N,V_didDeliverFirstSpeechPacket
TB,N,V_didDeliverLastBuffer
TB,N,V_didDetectSpeech
TB,N,V_didReportEndpointDelay
TB,N,V_didSetScaleFactor
TB,N,V_didTimestampFirstAudioPacket
TB,N,V_disableBoostForDoAP
TB,N,V_disableEndpointer
TB,N,V_disableLocalSpeechRecognizer
TB,N,V_disablePrewarmLocalAsrAtStartRecording
TB,N,V_enableAlwaysOnVoiceTrigger
TB,N,V_enabled
TB,N,V_endPointNotified
TB,N,V_hasPerformedDelayedStop
TB,N,V_hasReceivedNDEAPIResult
TB,N,V_hasReported
TB,N,V_isASRFeatureFromServer
TB,N,V_isActiveRequest
TB,N,V_isActiveSession
TB,N,V_isAlarmPlaying
TB,N,V_isAnalyzeMode
TB,N,V_isAnchorTimeBuffered
TB,N,V_isAsrOnDevice
TB,N,V_isAttachingBluetoothSession
TB,N,V_isAudioSessionActivated
TB,N,V_isConnected
TB,N,V_isEndAlertInfo
TB,N,V_isForwarding
TB,N,V_isHybridUODEnabled
TB,N,V_isListenPollingStarting
TB,N,V_isListening
TB,N,V_isMediaPlaying
TB,N,V_isNarrowBand
TB,N,V_isOpportuneSpeakListening
TB,N,V_isOpus
TB,N,V_isPhraseSpotterBypassed
TB,N,V_isRaiseToSpeakBypassed
TB,N,V_isRecording
TB,N,V_isRemoteVADAvailableStream
TB,N,V_isRequestTimeout
TB,N,V_isSecondPassRunning
TB,N,V_isSiri
TB,N,V_isSiriClientConsideredAsRecord
TB,N,V_isSiriClientListening
TB,N,V_isSoundPlaying
TB,N,V_isSpeakerMuted
TB,N,V_isSpeaking
TB,N,V_isStreaming
TB,N,V_isTemporaryPairedNotInContacts
TB,N,V_isTimerPlaying
TB,N,V_isWeakStream
TB,N,V_lpcmIsFloat
TB,N,V_myriadPreventingTwoShotFeedback
TB,N,V_needsBoost12dB
TB,N,V_needsToUpdateModel
TB,N,V_overrideEnabled
TB,N,V_recordingDidStop
TB,N,V_requestHistoricalAudio
TB,N,V_requestHistoricalAudioDataSampleCount
TB,N,V_requestHistoricalAudioDataWithHostTime
TB,N,V_requireSingleChannelLookup
TB,N,V_saveSamplesSeenInReset
TB,N,V_setupStarted
TB,N,V_shouldLogRawSensorData
TB,N,V_shouldUseLanguageDetectorForCurrentRequest
TB,N,V_skipAlertBehavior
TB,N,V_speechEndpointDetected
TB,N,V_splitterEnabled
TB,N,V_startDetected
TB,N,V_startOfSpeechDetected
TB,N,V_supportDoAP
TB,N,V_supportHearstVoiceTrigger
TB,N,V_supportLazySessionActivtion
TB,N,V_supportPhatic
TB,N,V_supportSessionActivateDelay
TB,N,V_supportTriagleModeSessionActivationRetry
TB,N,V_suppressInterruptionEndedNotifications
TB,N,V_twoShotNotificationEnabled
TB,N,V_useCustomizedRecordSettings
TB,N,V_useDefaultServerFeaturesOnClientLag
TB,N,V_useOpportunisticZLL
TB,N,V_voiceTriggerEnabled
TB,N,V_waitingForAlertFinish
TB,N,V_wasLanguageToggled
TB,R
TB,R,N
TB,R,N,V_hasPlayedStartAlert
TB,R,N,V_isBluetooth
TB,R,N,V_isDictation
TB,R,N,V_isDucking
TB,R,N,V_isFingerprintOnly
TB,R,N,V_isOnPhoneCall
TB,R,N,V_isRemoteDevice
TB,R,N,V_isSecondChanceRun
TB,R,N,V_isSecureOfflineOnly
TB,R,N,V_isSpokenNotification
TB,R,N,V_shouldUseRemoteRecorder
TB,R,N,V_useBorealisBuffer
TB,R,N,V_usePrelistening
TB,R,N,V_wantsRecordedAudioBufferLogs
TB,R,N,VcanProcessCurrentRequest
TB,V_isMediaPlayingNow
TB,V_shouldKeepConnection
TB,V_shouldRollFakeModel
TB,V_streaming
TC,N,V_hasReceivedEarlyDetectNDEAPIResult
TC,N,V_signalFractional
TI,N,V_encoderBitRate
TI,N,V_inputRecordingNumberOfChannels
TI,N,V_lpcmBitDepth
TI,N,V_numberOfChannels
TI,N,V_selectedChannel
TI,R,N
TI,R,N,V_audioSessionID
TQ,N
TQ,N,GgetAudioSessionState,V_audioSessionState
TQ,N,V_activateEndTime
TQ,N,V_activateStartTime
TQ,N,V_activeChannel
TQ,N,V_anchorMachAbsTime
TQ,N,V_attendingState
TQ,N,V_audioSessionSetActiveEndHostTime
TQ,N,V_audioStreamHandleId
TQ,N,V_bestEarlyDetectSample
TQ,N,V_bestEndDetectSample
TQ,N,V_bestStartDetectSample
TQ,N,V_builtInSpeakerState
TQ,N,V_circularBufferStartHostTime
TQ,N,V_circularBufferStartSampleCount
TQ,N,V_curSpeechFrames
TQ,N,V_deactivateEndTime
TQ,N,V_deactivateStartTime
TQ,N,V_decoderProcessedSampleCountForTV
TQ,N,V_dismissalTimestamp
TQ,N,V_endSample
TQ,N,V_endpointBufferHostTime
TQ,N,V_estimatedStartHostTime
TQ,N,V_extraDelayFrequency
TQ,N,V_fanId
TQ,N,V_lastAggTimeFalseWakeUp
TQ,N,V_lastAudioChunkHostTime
TQ,N,V_lastDetectedVoiceTriggerBeginSampleCount
TQ,N,V_lastSampleCount
TQ,N,V_latestPluginStreamId
TQ,N,V_maxAllowedTrailingSamplesAfterSchedulingStop
TQ,N,V_minSpeechFrames
TQ,N,V_numAudioSampleForwarded
TQ,N,V_numFalseWakeUp
TQ,N,V_numLatestLanguages
TQ,N,V_numLeadingFrames
TQ,N,V_numOfAudioPackets
TQ,N,V_numOfValidTrailingPackets
TQ,N,V_numOfValidTrailingSpeechPackets
TQ,N,V_numSamplesProcessed
TQ,N,V_numSamplesProcessedBeforeAnchorTime
TQ,N,V_numTrailingSamplesAfterSchedulingStop
TQ,N,V_numberOfVoicingFrames
TQ,N,V_onboardType
TQ,N,V_opportuneSpeakListeningType
TQ,N,V_pendingAudioSessionActivationReason
TQ,N,V_pendingBuiltInVoiceTriggerDetectedTime
TQ,N,V_pendingRemoraVoiceTriggerDetectedTime
TQ,N,V_phoneCallState
TQ,N,V_remoteVADAlignCount
TQ,N,V_reqSrc
TQ,N,V_reqStartAudioSampleId
TQ,N,V_reqStartMachAbsTime
TQ,N,V_runningSampleCount
TQ,N,V_samplingRate
TQ,N,V_secondChanceHotTillMachTime
TQ,N,V_secondPassAssetLoadCompleteTime
TQ,N,V_secondPassAssetLoadStartTime
TQ,N,V_secondPassAssetQueryCompleteTime
TQ,N,V_secondPassAssetQueryStartTime
TQ,N,V_secondPassAudioStreamReadyTime
TQ,N,V_secondPassAudioStreamStartTime
TQ,N,V_secondPassCheckerModelKeywordDetectionEndTime
TQ,N,V_secondPassCheckerModelKeywordDetectionStartTime
TQ,N,V_secondPassFirstAudioPacketReceptionTime
TQ,N,V_secondPassLastAudioPacketReceptionTime
TQ,N,V_serverState
TQ,N,V_sigType
TQ,N,V_startRecordingHostTime
TQ,N,V_startRecordingSampleCount
TQ,N,V_startSample
TQ,N,V_stopRecordingHostTime
TQ,N,V_streamState
TQ,N,V_triggerAbsStartSampleId
TQ,N,V_triggerMachTime
TQ,N,V_triggerNotifiedMachTime
TQ,N,V_userIntentType
TQ,N,V_userIntentValidForSeconds
TQ,N,V_userSpeakingEndedHostTime
TQ,N,V_userSpeakingStartedHostTime
TQ,N,V_voiceTriggerSampleCount
TQ,N,V_vtEndInSampleCount
TQ,N,V_wakeGestureTimestamp
TQ,N,V_xpcClientType
TQ,N,VactiveChannel
TQ,R
TQ,R,N
TQ,R,N,V_activationHostTime
TQ,R,N,V_audioStreamHandleId
TQ,R,N,V_beginSampleCount
TQ,R,N,V_buttonDownHostTime
TQ,R,N,V_capacity
TQ,R,N,V_deviceCategory
TQ,R,N,V_dictationVoiceTriggerAbsStartSampleId
TQ,R,N,V_estimatedSpeechEndHostTime
TQ,R,N,V_expectedStopHostTime
TQ,R,N,V_firstBufferHostTime
TQ,R,N,V_firstPassSource
TQ,R,N,V_hosttime
TQ,R,N,V_lastForwardedSampleCount
TQ,R,N,V_numOfAVVCRecordingClients
TQ,R,N,V_options
TQ,R,N,V_protocolVersion
TQ,R,N,V_size
TQ,R,N,V_startSampleCount
TQ,R,N,V_stopRecordingReason
TQ,R,N,V_streamHandleId
TQ,R,N,V_type
TQ,R,N,V_voiceTriggerEndHostTime
T^{AudioBufferList=I[1{AudioBuffer=II^v}]},N,V_pNonInterleavedABL
T^{BTLocalDeviceImpl=},N,V_localDevice
T^{BTSessionImpl=},N,V_bluetoothSession
T^{OpaqueAudioConverter=},N,V_deinterleaver
T^{OpaqueExtAudioFile=},N,V_fFile
T^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq},N,V_fp
Td,N
Td,N,V_audioSessionActivationDelay
Td,N,V_automaticEndpointingSuspensionEndTime
Td,N,V_bufferDuration
Td,N,V_clampedSFLatencyMsForClientLag
Td,N,V_clientLagThresholdMs
Td,N,V_delay
Td,N,V_elapsedTimeWithNoSpeech
Td,N,V_endWaitTime
Td,N,V_endpointTimeInMs
Td,N,V_eosLikelihood
Td,N,V_firstAudioSampleSensorTimestamp
Td,N,V_firstPktLatency
Td,N,V_hepAudioOriginInMs
Td,N,V_interspeechWaitTime
Td,N,V_lastKnowServerFeaturesLatency
Td,N,V_lastReportedEndpointTimeMs
Td,N,V_lastSilencePosterior
Td,N,V_minimumDurationForEndpointer
Td,N,V_processedAudioDurMs
Td,N,V_processedAudioInSeconds
Td,N,V_sampleRate
Td,N,V_serverFeaturesWarmupLatency
Td,N,V_shadowMicScore
Td,N,V_silencePosterior
Td,N,V_speechVoiceLevel
Td,N,V_startWaitTime
Td,N,V_totalAudioRecorded
Td,N,V_trailingSilenceDurationAtEndpoint
Td,N,V_userSpeakingEndedTimeInMs
Td,N,V_userSpeakingStartedTimeInMs
Td,N,V_vtExtraAudioAtStartInMs
Td,N,VautomaticEndpointingSuspensionEndTime
Td,N,Vdelay
Td,N,VminimumDurationForEndpointer
Td,N,VstartWaitTime
Td,R,N
Td,R,N,V_activationAlertStartTimestamp
Td,R,N,V_droppedPrediction
Td,R,N,V_droppingPrediction
Td,R,N,V_firstBufferTimestamp
Td,R,N,V_startRecordingTimestamp
Td,R,N,V_timestamp
Td,R,N,V_trailingSilenceDurationAtEndpoint
Td,R,N,VlastEndOfVoiceActivityTime
Td,R,N,VlastStartOfVoiceActivityTime
Tf,N,V_azimuth
Tf,N,V_cachedAvgPower
Tf,N,V_cachedPeakPower
Tf,N,V_confidence
Tf,N,V_didStartDelayInSeconds
Tf,N,V_endpointThreshold
Tf,N,V_estimatedAzimuth
Tf,N,V_firstPassMyriadGoodnessScore
Tf,N,V_lastEndpointPosterior
Tf,N,V_latestVolume
Tf,N,V_permanentOffsetFactor
Tf,N,V_prevAudioProcessedMs
Tf,N,V_sampleRate
Tf,N,V_samplingRate
Tf,N,V_scaleFactor
Tf,N,V_userIntentVolume
Tf,R,N
Tf,R,N,V_maxFingerprintBufferSize
Tf,R,N,V_scaleFactor
Tf,R,N,V_shadowMicScoreThresholdForVAD
Tf,R,N,V_vadScore
Tf,R,N,V_volumeEstimate
Ti,N,V_fakeAssetRollNotificationRegistrationToken
Ti,N,V_notifyToken
Ti,N,V_numChannels
Ti,N,V_remoteVADSPGRatio
Ti,R,N
Ti,R,N,V_mhSource
Tq,N
Tq,N,V_audioFormat
Tq,N,V_audioStreamType
Tq,N,V_clearLoggingFileTimerCount
Tq,N,V_currentSpeed
Tq,N,V_currentState
Tq,N,V_endpointMode
Tq,N,V_endpointStyle
Tq,N,V_endpointerOperationMode
Tq,N,V_endpointerType
Tq,N,V_errorAlertBehavior
Tq,N,V_initialState
Tq,N,V_latestVolumeTime
Tq,N,V_listenPollingTimerCount
Tq,N,V_numberOfTotalFramesETFT
Tq,N,V_processedAudioDurationInMilliseconds
Tq,N,V_speechRecordingMode
Tq,N,V_startAlertBehavior
Tq,N,V_stopAlertBehavior
Tq,N,V_targetSpeed
Tq,N,V_trailingSilenceDuration
Tq,N,V_userIntentTime
Tq,N,V_wordCount
Tq,N,VendpointStyle
Tq,R,N
Tq,R,N,V_audioAlertStyle
Tq,R,N,V_currentState
Tq,R,N,V_deviceType
Tq,R,N,V_dictationInputOrigin
Tq,R,N,V_presentationMode
Tq,R,N,V_speechEndpointerOperationMode
Tq,R,N,V_speechEvent
Ts,N,V_signalEstimate
T{AudioStreamBasicDescription=dIIIIIIII},N,V_outASBD
URLByAppendingPathComponent:
URLByDeletingPathExtension
URLForResource:withExtension:
URLForSoundID:
URLWithString:
URLsForDirectory:inDomains:
UTF8String
UUID
UUIDString
_LKFSChannelBitset
_LKFSLowerPercentile
_LKFSMicSensitivityOffset
_LKFSTTSMappingInputRangeHigh
_LKFSTTSMappingInputRangeLow
_LKFSTTSMappingOutputRangeHigh
_LKFSTTSMappingOutputRangeLow
_LKFSTimeConstant
_LKFSUpperPercentile
_RMSScore
_TTSVolumeLowerLimitDB
_TTSVolumeUpperLimitDB
_UUID
_accessBTDeviceAndAccessoryManagerUsingBlock:
_accessibleEndpointerEnabled
_accessoryManager
_accessoryVoiceTriggerEvents
_accessoryVoiceTriggerMetaDataByDeviceId
_accumulatedBufferDuration
_activateAudioSessionWithReason:delay:delayRequested:error:
_activateAudioSessionWithReason:error:
_activateEndTime
_activateStartTime
_activationAlertStartTimestamp
_activationAssertions
_activationHostTime
_activationMetadata
_activationSystemUptime
_activationTypeString
_activeChannel
_activeEndpointer
_activeMediaPlaybackVolume
_activeSessionsByRequest
_adCompanionServiceProvider
_adaptiveSiriVolumeDictionary
_addAlwaysEnabledCondition
_addAssetManagerEnabledConditions
_addConditionsForIOSAOP
_addConditionsForIOSBargeIn
_addContinousAudioFingerprintEnabledConditions
_addDisabledConditions
_addListeningEnabledConditions
_addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:
_addRemoteVADSignal:
_addSmartSiriVolumeEnabledConditions
_addVoiceTriggerAOPModeEnabledConditions
_addVoiceTriggerEnabledConditions
_additionalMetrics
_address
_adpAssertion
_alarmFiringState
_alarmMonitor
_alarmSoundIsFiring
_alarmVolume
_alarmVolumeLevel
_alertBehaviorForRecordRoute:recordingInfo:playbackRoute:attemptsToUsePastDataBufferFrames:
_alertBehaviorTypeFromAVVCOberrideType:
_alertDelegate
_alertPlaybackFinishTimeoutToken
_alertPlaybackFinishWaitingCompletions
_alertPlaybackFinishWaitingStreams
_alertPlaybackGroup
_alertProvider
_alignBufferQueue
_allowEndpointAssetDownloading
_allowLanguageDetectorAssetDownloading
_allowSpeakerRecognitionAssetDownloading
_allowVoiceTriggerAccessoryAssetDownloading
_allowVoiceTriggerAssetDownloading
_alwaysOnProcessorController
_anchorMachAbsTime
_apQueue
_appendDictationApplicationInfoSettings:
_applicationBundleIdentifier
_applicationDisplayName
_asbd
_asrDatapackInstallationStatus
_assertionMonitor
_assetManager
_assetQueryForAssetType:
_assetQueryQueue
_assetVersion
_assetsMigrationQueue
_asssetMetaUpdatedKey
_asxConnection
_attachBluetoothSession
_attachToSession
_attachingToSession
_atvRemoteDeviceID
_audibleFeedbackPlaybackReason
_audibleFeedbackQueue
_audioAlertProvidingDelegate
_audioAlertStyle
_audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:
_audioBuffer
_audioBufferPool
_audioChunkFrom:to:
_audioChunkFrom:to:channelIdx:
_audioDeviceID
_audioDeviceInfo
_audioDuckingEnabled
_audioFile
_audioFileHandle
_audioFilePathIndex
_audioFileReader
_audioFileType
_audioFileWriter
_audioFormat
_audioInjectionEngines
_audioIsFromRemoteAccessory:
_audioLength
_audioLogDirectory
_audioLoggingBuffer
_audioMeterProvider
_audioMetricProvider
_audioPacketDeliveryCount
_audioPacketWatchdog
_audioPlaybackService
_audioPreprocessor
_audioProviderUUID
_audioRecordContext
_audioRecordDeviceInfo
_audioRecorder
_audioRecorderDidStartRecordingSuccessfully:streamHandleID:error:
_audioRecorderDidStopRecordingForReason:streamHandleID:
_audioRouteChanged:
_audioSamplesPerRemoteVAD
_audioSession
_audioSessionActivationDelay
_audioSessionActiveDelayCoreSpeechWithType:
_audioSessionActiveDelayOverride
_audioSessionActiveDelayServerConfiguration
_audioSessionActiveDelayUserPerceptionWithType:
_audioSessionController
_audioSessionInfoObservers
_audioSessionProvider
_audioSessionProvidingDelegate
_audioSessionSetActiveEndHostTime
_audioSessionState
_audioStream
_audioStreamHandleId
_audioStreamProvdider:audioBufferAvailable:
_audioStreamProvider
_audioStreamProvidingDelegate
_audioStreamType
_audioStreamWithRequest:streamName:error:
_audioSystemRecovering
_audioTapProvider
_audioTimeConverter
_audioURL
_automaticEndpointingSuspensionEndTime
_availabilityChanged
_avvcAlertOverrideType:
_azimuth
_beepCanceller
_beginMonitoring
_beginSampleCount
_bestEarlyDetectSample
_bestEndDetectSample
_bestStartDetectSample
_bluetoothDevice
_bluetoothDeviceInfo
_bluetoothSession
_bluetoothSessionSetupGroup
_bluetoothWirelessSplitterSessionStateObserver
_bufferedLPCM
_buildVersion
_builtInAudioInjectionEngine
_builtInDevice
_builtInSeconPassProgressProvider
_builtInSpeakerState
_builtInVoiceTriggerEvent
_builtInVoiceTriggerMetaData
_bundleIdFromDictation
_buttonDownHostTime
_cachedAsset
_cachedEndpointAssets
_cachedPeakPower
_caesuraSPG
_calculateRMSWithFrameData:
_calculateSpeechVoicingLevel
_canDelayStopRecording
_canFetchRemoteAsset:
_canPerformDelayedStop
_canPlayPhaticDuringMediaPlayback
_canProcessCurrentRequest
_canSetContext
_canUseZLL
_cancelAudioPacketWatchDog
_cancelExtendedEndpointTimer
_cancelPendingAudioSessionActivateForReason:
_capacity
_certificate
_checkAudioLoggingLimits:
_checkCanUseVoiceTriggerDuringCallEnabled
_checkFirstUnlocked
_checkIfLastEndpointHintShouldBeAccepted:
_checkNewAssetAvailablity
_checkNewAssetAvailablityForEndpoint
_checkPhraseSpotterEnabled
_checkSiriRestrictedOnLockScreen
_checkSoftwareUpdateCheckingState
_checkSpringBoardStarted
_checkVoiceTriggerEnabled
_circBuffer
_circularBufferStartHostTime
_cleanUpConnection
_cleanUpDeviceProxies
_cleanUpMobileAssetV1Directory
_clearDidStartRecordingDelegateWatchDog
_clearDidStopRecordingDelegateWatchDog
_clearEndpointHint
_clearLoggingFileTimer
_clearLoggingFileTimerCount
_clearPendingBuiltInVoiceTrigger
_clientConnections
_clientController
_clientLagThresholdMs
_close
_codec
_combineResultsWithOptimalFromNoise:andOptimalFromLkfs:withUserOffset:
_compatibilityVersion
_compensateChannelDataIfNeeded:receivedNumChannels:
_completion
_compressFilesInDirectory:matchingPredicate:compressedFileAvailable:
_compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:
_confidence
_configFile
_configureAudioConverter:
_configureWithCurrentASBD
_connectPluginDevice:
_connectedDevice
_connectedDeviceAddresses
_connectedDevices
_connection
_connectionInterrupted
_connectionInvalidated
_constructLangPriors
_context
_contextResetQueue
_contextToString:
_continuousZeroCounter
_conversationalMessages
_convertAudioCapacity
_convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:
_convertDeactivateOption:
_convertPCMDataForFingerprinting:
_convertPacketCount
_crashEventDelegate
_createAlarmMonitor
_createAudioPlaybackSessionWithRequest:options:
_createAudioPowerMeterIfNeeded
_createAudioProviderFromXPCWithContext:
_createAudioStreamWithCurrentNviContext
_createCircularBufferIfNeededWithNumChannel:playbackRoute:
_createClearLoggingFileTimer
_createClientConnection
_createDeInterleaverIfNeeded
_createDirAtPath:
_createMediaPlayingMonitor
_createPeriodicalDownloadTimer
_createRequestLinkInfo:component:
_createSSVClientConnectionIfNeeded
_createSampleRateConverterWithInASBD:outASBD:
_createSpeechDetectionVADIfNeeded
_createTimerMonitor
_createXPCClientConnection
_createXPCClientConnectionIfNeeded
_createXPCClientConnectionIfNeeded:
_csAssetsDictionary
_csAudioRecordType
_csAudioRecordTypeForSpeechEvent:currentClientConfiguration:
_csAudioRecordTypeForSpeechRequestOptions:useBorealisBuffer:currentClientConfiguration:
_cs_initWithXPCObject:
_cs_isHashTableEmpty
_cs_xpcObject
_ctx
_curSpeechFrames
_currActiveDataSourceTypes
_currActiveSigProvTypes
_currentActivationInfo
_currentAsset
_currentAudioDeviceInfo
_currentClientConfiguration
_currentConfigurationSupportsDucking
_currentHEPAsset
_currentKeyboard
_currentLanguageCode
_currentMaximumBufferSize
_currentOEPAsset
_currentPlaybackRoute
_currentRecordDeviceInfo
_currentRecordRoute
_currentRecordingInfo
_currentRequestSampleRate
_currentSessionShouldDuckOnBuiltInSpeaker
_currentSpeed
_currentState
_dataBufferNDEAPI
_dataBufferPositionNDEAPI
_dataSource
_dataSrcMap
_deactivateAudioSession:error:
_deactivateEndTime
_deactivateStartTime
_debugLogPath
_decodeError:
_decoder
_decoderProcessedSampleCountForTV
_decodersForTV
_defaultDownloadOptions
_defaults
_deinterleaveBufferIfNeeded:
_deinterleaver
_delay
_delegate
_delegates
_deliverHistoricalAudioToStreamsWithRemoteVAD:
_deliverPostprocessAudioChunk:toStream:lastForwardedSampleCount:
_deregisterAudioSessionNotifications
_destination
_destroyVoiceController
_detachBluetoothSession
_detachFromSession
_detectedToken
_deviceAudioLoggingWithFileWriter:
_deviceID
_deviceId
_deviceIdentifier
_deviceInfo
_deviceName
_deviceProductType
_deviceProductVersion
_deviceProxies
_deviceProxiesByAddress
_deviceProxiesByDeviceUID
_deviceProxiesLock
_deviceProxyWithAddress:createsIfAbsent:
_deviceProxyWithUID:createsIfAbsent:
_deviceRoleIsStereo
_deviceSpecificDBToLinearVolumeMappingCSSSVDeviceSimple:
_deviceSpecificLinearVolumeToDBMappingCSSSVDeviceSimple:
_deviceType
_deviceUID
_dictationInputOrigin
_dictationLanguagePriors
_dictationLanguages
_dictationVoiceTriggerAbsStartSampleId
_didAddAudio
_didBecomeCurrent
_didCommunicateEndpoint
_didDeliverFirstSpeechPacket
_didDeliverLastBuffer
_didDetectEndpoint
_didDetectSpeech
_didDetectStartpoint
_didEnterTwoShotMode
_didFakeTwoShotWithAlert
_didInstalledNewAdBlockerAsset
_didInstalledNewAsset
_didInstalledNewVoiceTriggerAsset
_didNotStartWithError:
_didPerformTwoShotPrompt
_didPlayStartAlertSoundForSiri:audioStream:
_didReceiveAOPListeningStateChange:
_didReceiveAVVCRecordingClientNumberChange:
_didReceiveAutomaticVolumeToggled:
_didReceiveBuiltinSpeakerStateChangeNotification:
_didReceiveCanUseVoiceTriggerDuringCallSettingChangedInQueue:
_didReceiveClamshellStateChangeNotification:
_didReceiveDaemonStateChanged:
_didReceiveFinishStartAlertPlaybackAt:
_didReceiveFirstBuffer
_didReceiveFirstUnlock:
_didReceiveFirstUnlockInQueue:
_didReceiveLanguageCodeUpdate
_didReceiveLanguageCodeUpdate:
_didReceiveLastBuffer
_didReceiveMediaserverNotification:
_didReceiveNewAdBlockerAssetMetaData
_didReceiveNewSpeechEndpointAssetMetaData
_didReceiveNewVoiceTriggerAssetMetaData
_didReceivePhraseSpotterSettingChangedInQueue:
_didReceiveRestrictionChanged:
_didReceiveRestrictionChangedInQueue:
_didReceiveSelfTriggerChanged:
_didReceiveServerFeatures
_didReceiveSiriSettingChanged:
_didReceiveSleepGesture
_didReceiveSoftwareUpdateCheckingStateChanged:
_didReceiveSoftwareUpdateCheckingStateChangedInQueue:
_didReceiveSpeakerMuteStateChangeNotification:
_didReceiveSpeakerRecognitionAssetMetaData
_didReceiveSpringboardStarted:
_didReceiveSpringboardStartedInQueue:
_didReceiveVoiceTriggerSettingChanged:
_didReceiveVoiceTriggerSettingChangedInQueue:
_didReceiveWakeGesture
_didReceiveWirelessSplitterStateChange
_didReceivedNetworkAvailabilityChangedNotification:
_didReportEndpointDelay
_didResignCurrent
_didSetScaleFactor
_didStartDelayInSeconds
_didStopForReason:
_didStopWithError:
_didTimeout
_didTimestampFirstAudioPacket
_disableBoostForDoAP
_disableEndpointer
_disableLocalSpeechRecognizer
_disablePrewarmLocalAsrAtStartRecording
_disconnect
_dismissalTimestamp
_doActivateAudioSessionWithReason:error:
_donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:
_downloadAsset:withComplete:
_downloadAssetCatalogForAssetType:complete:
_downloadTimer
_downloadTimerCount
_downloadingOption
_downsampler
_droppedPrediction
_droppingPrediction
_dspStatus
_duckAudioXPCClient
_elapsedTimeWithNoSpeech
_emitEndpointDetectedEventWithEndpointTimeMs:endpointBufferHostTime:endpointerFeatures:endpointerDecisionLagInNs:extraDelayMs:endpointScore:asrFeatureLatencies:
_emitMHEndpointLatencyInfo:withRequestMHUUID:
_enableAlwaysOnVoiceTrigger
_enablePolicy
_enabled
_encoder
_endMonitoring
_endPointNotified
_endSample
_endWaitTime
_endpointAnalyzer
_endpointBufferHostTime
_endpointDelayReporter
_endpointId
_endpointMode
_endpointStyle
_endpointThreshold
_endpointTimeInMs
_endpointerConnection
_endpointerDelegate
_endpointerImplDelegate
_endpointerModelVersion
_endpointerOperationMode
_endpointerProxy
_energyBufferSize
_enforceEndpointHintWithMitigation:
_enumerateListenersUsingBlock:
_enumerateObserversUsingBlock:
_eosLikelihood
_epResult
_errorAlertBehavior
_estimatedAzimuth
_estimatedSpeechEndHostTime
_estimatedStartHostTime
_estimatedTTSVolume:lowerLimit:upperLimit:TTSmappingInputRangeLow:TTSmappingInputRangeHigh:TTSmappingOutputRangeLow:TTSmappingOutputRangeHigh:
_eventIsRaiseToSpeak
_eventIsTVRemote
_eventIsVoiceTrigger
_eventToStateTransitions
_evictAllReusableSessionsForReason:
_expectedFirstBufferTimestamp
_expectedStopHostTime
_experimentContext
_exportedInterface
_extendedEndpointTimer
_extraDelayFrequency
_fFile
_fakeAssetMonitor
_fakeAssetRollNotificationRegistrationToken
_fakeTwoShotTTSPromptUUID
_fakeTwoShotTTSPromptWatchdogTimer
_fallbackAudioSessionReleaseProvider
_falseWakePhraseDictionary
_fanId
_featuresAtEndpoint
_fetchAssertionMonitor
_fetchAudioDecoderForTV:
_fetchBTInfo
_fetchCurrentMetrics
_fetchEndpointMobileAssetWithLanguage:
_fetchFallbackAudioSessionReleaseProviding
_fetchHearstConnectionState
_fetchHearstRoutedState
_fetchHistoricalAudioAndForwardToStream:remoteVAD:
_fetchJarvisConnectionState
_fetchLastTriggerInfo
_fetchRemoteAssetOfType:withLanguage:completion:
_fetchRemoteAssetOfType:withLanguage:query:completion:
_fetchRemoteMetaData
_fetchRemoteRecordClientWithDeviceId:streamHandleId:
_fetchRingVibrationValue
_fetchSilentVibrationValue
_fetchSiriInputSourceOutOfBandState
_fetchSpeakerStateActiveInfo
_fetchSpeakerStateMutedInfo
_fetchVoiceTriggerInstalledAssetWithLanguage:completion:
_fileHandle
_fileOption
_fileURL
_finalizeAudioFileWriterWithCompletion:
_finalizeWithError:
_findLatestInstalledAsset:
_fingerprintWasRecognized
_fingerprinter
_fingerprinterConverter
_fingerprintingEnabled
_firstAudioPacketTimestamp
_firstAudioSampleSensorTimestamp
_firstBufferHostTime
_firstBufferTimestamp
_firstPassInfoGeneratedTime
_firstPassInfoProcessedTime
_firstPassMyriadGoodnessScore
_firstPassSource
_firstPassTriggerInfo
_firstPktLatency
_firstUnlockMonitor
_firstUnlockNotified
_firstUnlocked
_firstpassMetrics
_floatBuffer
_footprint
_forceSuccessAlertOnStop
_forwardAudioChunk:toStream:
_forwardAudioChunkForTV:toStream:
_generateTemporaryFileURL
_getAddressWithBTDevice:
_getAudioRecorderWithError:
_getAudioSessionID
_getCSHybridEndpointerConfigForAsset:
_getConnectedBluetoothDeviceAddressesFromLocalDevice:
_getContentsOfDirectory:
_getCurrentHEPAsset
_getDefaultValues
_getDeviceSimpleOutputLinearVolumeFordBFSValue:
_getDeviceSimpledBFSForOutputLinearVolume:
_getDevicedBFSForInputLinearVolume:
_getFakeEndpointAsset
_getFanInfoArray
_getFloatBufferData:
_getHighestRemoraFirstPassGoodnessScore:
_getHomeUserIdForSharedSiriId:withCompletion:
_getModelPathFromInstallationStatusString:
_getMusicVolumeDBCSSSVDeviceDefault:
_getMusicVolumeDBCSSSVDeviceSimple:
_getNumberFromASVDictionaryForKey:category:default:
_getOEPVersionFromPath:
_getOrCreateAudioLogDirectory
_getRecordSettingsWithRequest:
_getRemoteServiceProxyObject
_getSpeechIdentifier
_getUserOffsetFromMusicVolumeDB:
_getVoiceTriggerAssetFromAssetManager:
_getVoiceTriggerAssetFromAssetManagerWithLocale:completion:
_getVoiceTriggerAssetIfNeeded:
_getWirelessSplitterInfoFromLocalDevice:
_globalLastKeyboardUsed
_handleAlertProvidingDelegateDidFinishAlertPlayback:
_handleAlertProvidingDelegateMessageBody:
_handleAudioSystemFailure
_handleBeginInterruption
_handleCallActiveDidChangeNotification:
_handleClearLoggingFileTimer
_handleClientError:client:
_handleClientEvent:
_handleClientMessage:client:
_handleConnectionError:
_handleDidStartAudioStreamWithResult:error:
_handleDidStopAudioStreamWithReason:
_handleEnablePolicyEvent:
_handleEndInterruption:
_handleEndpointVoiceTriggerAsset:completion:
_handleExecutionForSession:
_handleFakeHearstModelRequest:majorVersion:minorVersion:downloadedModels:preinstalledModels:completion:
_handleFakeTwoShotPromptCallbackWithUUID:timestamp:duration:error:
_handleFakeTwoShotPromptTimeoutWithUUID:
_handleFinalizationForSession:error:
_handleInterruption:
_handleListenerDisconnectedError:
_handleListenerError:
_handleListenerEvent:
_handleListenerMessage:
_handlePreparationForSession:
_handleSessionInfoProvidingDelegateInterruptionNotification:
_handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:
_handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:
_handleSessionInfoProvidingDelegateMessageBody:
_handleSessionInfoProvidingDelegateRouteChangeNotification:
_handleSessionProvidingDelegateBeginInterruption:
_handleSessionProvidingDelegateBeginInterruptionWithContext:
_handleSessionProvidingDelegateDidChangeContext:
_handleSessionProvidingDelegateDidSetAudioSession:
_handleSessionProvidingDelegateEndInterruption:
_handleSessionProvidingDelegateMessageBody:
_handleSessionProvidingDelegateStreamHandleIdInvalidation:
_handleSessionProvidingDelegateWillSetAudioSession:
_handleStreamProvidingDelegateChunkAvailable:
_handleStreamProvidingDelegateChunkForTVAvailable:
_handleStreamProvidingDelegateDidStopUnexpectly:
_handleStreamProvidingDelegateHardwareConfigChange:
_handleStreamProvidingDelegateMessageBody:
_handleVoiceTriggerAssetWithCompletion:
_hardEndpointWasDetectedWithMetrics:atTime:
_hasConnectedAVCall
_hasDeviceTemporaryPairedNotInContacts
_hasLocalPendingTwoShot
_hasPendingActivationForType:
_hasPerformedDelayedStop
_hasPlayedStartAlert
_hasReceivedEarlyDetectNDEAPIResult
_hasReceivedEmptyLPCMRecordBuffer
_hasReceivedNDEAPIResult
_hasReported
_hasSetAlertDictionary
_headphoneInEarDetectionState
_headphoneListeningMode
_headsetName
_heartBeat
_heartBeatInterval
_hepAudioOriginInMs
_hidCallbackQueue
_holdRecordingExceptionIfNeeded:
_holdRecordingTransactionIfNeeded
_hosttime
_hybridClassifier
_hybridClassifierQueue
_hybridEndpointer
_hybridUODEnabled
_implDelegate
_inUseServices
_init
_initWithType:pathGenerator:xorFileHandle:priority:
_initialState
_initializeAlarmState
_initializeAudioFileWriterWithAudioStreamBasicDescription:
_initializeMediaPlayingState
_initializeStartOfSpeechDetector:samplingRate:
_initializeTimerState
_injectionAudioFileList
_injectionCompletionNotifyBlocks
_injectionEngine
_injectionStartNotifyBlocks
_inputRoute
_installedAssetOfType:query:withLanguage:completion:
_installedAssetOfType:withLanguage:
_installedAssetOfType:withLanguage:completion:
_instanceContext
_instrumentSiriCue:
_interactionID
_interspeechWaitTime
_interval
_invalidate
_isASRFeatureFromServer
_isActivated
_isActive
_isActiveRequest
_isActiveSession
_isAnalyzeMode
_isAnchorTimeBuffered
_isAsrOnDevice
_isAttachingBluetoothSession
_isAudioSessionActivated
_isAutomaticVolumeEnabled
_isBluetooth
_isBuiltInDeviceFromDeviceId:
_isCommandControlStreaming
_isConnected
_isCurrent
_isDelayedDuckingSupportedContext
_isDeviceRoleStereo
_isDictation
_isDriving
_isDucking
_isDuckingAvailableRoute:
_isDuckingOnSpeakerOutputSupportedWithCurrentRoute
_isEnabled
_isFingerprintOnly
_isForwarding
_isHearstConnected
_isHearstRoutedAndWithNoPhoneCall
_isHybridUODEnabled
_isInPhoneCallStateWithHSPhoneCallCapableRoute
_isJarvisConnected
_isListenPollingStarting
_isListening
_isListeningEnabled
_isMediaPlayingNow
_isNarrowBand
_isNarrowBand:
_isOSDIncludedInAsset:
_isOnPhoneCall
_isOpportuneSpeakListening
_isPhraseSpotterBypassed
_isPhraseSpotterEnabled
_isPrepared
_isRaiseToSpeakBypassed
_isReadyToUse
_isRecordRouteBuiltinMic
_isRecordRouteStudioDisplay
_isRecording
_isRecordingUsingBTRoute
_isRemoraSecondPassRunning
_isRemoteVADAvailableStream
_isRequestFromSpokenNotification:
_isRequestTimeout
_isRestricted
_isRetryRecommendedWithResult:
_isSecondChanceRun
_isSecondPassRunning
_isSecureOfflineOnly
_isSiriClientListening
_isSiriEnabled
_isSiriInputSourceOutOfBand
_isSoftwareUpdateCheckingRunning
_isSpeaking
_isSpeechControllerInitialized
_isSpokenNotification
_isSpringBoardStarted
_isStartSampleCountMarked
_isStreaming
_isVibrationDisabledInAccessibility
_isVoiceOverTouchEnabledInAccessibility
_isVoiceTriggerEnabled
_isVoiceTriggerEvent:
_isWeakStream
_keyboardConvoLanguagePriors
_keyboardGlobalLanguagePriors
_keywordAnalyzer
_keywordAnalyzerNDEAPI
_languageCode
_languageCodeUpdateMonitor
_languageDetectionUserContext
_languageDetector
_languageDetectorAssetHash
_languageDetectorDelegate
_languageDetectorOptionFromSettings:
_lastAggTimeFalseWakeUp
_lastArrivalTimestampToAudioRecorder
_lastAudioChunkHostTime
_lastAudioRecordBufferReceiptTime
_lastAudioRecorderContext
_lastCommunicatedPeer
_lastDetectedVoiceTriggerBeginSampleCount
_lastEndpointHintCompletion
_lastEndpointHintFeatures
_lastEndpointHintRC
_lastEndpointHintRCProcessedForMitigation
_lastEndpointPosterior
_lastEndpointerMetrics
_lastFakeModelUsedHash
_lastForwardedSampleCount
_lastKnowServerFeaturesLatency
_lastKnownOSDFeatures
_lastKnownServerEPFeatures
_lastPrepareTimestamp
_lastRTSTriggerInfo
_lastReportedEndpointTimeMs
_lastSampleCount
_lastServerFeatureTimestamp
_lastSilencePosterior
_lastTimestamp
_lastUpdatedAssetType
_lastVoiceTriggerInfo
_latestContext
_latestDetectedLanguages
_latestPluginStreamId
_latestVolume
_latestVolumeTime
_lazyActivateAudioSessionWithReason:error:
_listenPollingTimer
_listenPollingTimerCount
_listener
_listeners
_loadAndSetupEndpointerAssetIfNecessary
_localDevice
_logAudioMetrics:mhUUID:
_logBluetoothStateWithMHUUID:
_logEventUUID
_logFanState
_logLanguageDetectorMetricsForLoggingInfo:
_logResourceNotAvailableErrorIfNeeded:
_logSoSResult:toPath:
_logVoiceTriggerInfo:withMHUUID:
_loggingQueue
_lpcmBitDepth
_lpcmIsFloat
_machServiceName
_makeTimestampedAudioLogFilenameWithPrefix:suffix:
_mapInputOriginFromAssetToCSAudioRecordType:
_mapInstrumentationEndpointTypeFromStopRecordingReason:
_maxAllowedTrailingSamplesAfterSchedulingStop
_maxFingerprintBufferSize
_mediaPlayingMonitor
_mediaPlayingObserverQueue
_mediaServicesWereLost:
_mediaServicesWereReset:
_mediaserverdDidRestart
_mhId
_mhSource
_mhUUIDFromSpeechRequestOptions:
_micUsageReporter
_minSpeechFrames
_minimumDurationForEndpointer
_modelData
_modelHash
_modelLocale
_modelName
_monitor
_mostRecentSpeechSynthesisRecord
_multilingualKeyboardLanguages
_multimodalEndpointerEnabled
_musicVolumeDB
_musicVolumeLevel
_myriadPreventingTwoShotFeedback
_name
_narrowBandOpusConverter
_needResetAudioInjectionIndex:
_needsAVVCLPCMCallbacks
_needsConversion
_needsToUpdateModel
_nextFingerprintSampleNumber
_nnvadEndpointer
_noiseLevelChannelBitset
_noiseLowerPercentile
_noiseMicSensitivityOffset
_noiseMicSensitivityOffsetDeviceSimple
_noiseTTSMappingInputRangeHigh
_noiseTTSMappingInputRangeLow
_noiseTTSMappingOutputRangeLow
_noiseTimeConstant
_noiseUpperPercentile
_noiseWeight
_notePossiblePlayPausedStateChange:
_notificationKey
_notifyActivationEvent:completion:
_notifyAssetsUpdate
_notifyHearstConnectionState:
_notifyHearstRoutedState:
_notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:
_notifyJarvisConnectionState:
_notifyObserver:
_notifyObserver:mediaIsPlayingState:
_notifyObserver:splitterState:shouldDisableSpeakerVerificationInSplitterMode:
_notifyObserver:withBuiltinSpeakerState:
_notifyObserver:withClamshellState:
_notifyObserver:withDaemonState:
_notifyObserver:withEnabled:
_notifyObserver:withLanguageCode:
_notifyObserver:withMediaserverState:
_notifyObserver:withNetworkAvailability:
_notifyObserver:withSoftwareUpdateCheckingRunning:
_notifyObserver:withStarted:
_notifyObserver:withUnlocked:
_notifySiriInputSourceOutOfBandState:
_notifyStopCommandControl
_notifyStopOpportuneSpeakWithDelay:
_notifyToken
_nowString
_numAudioSampleForwarded
_numChannels
_numLatestLanguages
_numLeadingFrames
_numOfAVVCRecordingClients
_numOfAudioPackets
_numOfValidTrailingPackets
_numOfValidTrailingSpeechPackets
_numSamplesProcessed
_numSamplesProcessedBeforeAnchorTime
_numTrailingSamplesAfterSchedulingStop
_numberOfAVVCAlertPlaybacksByType
_numberOfChannels
_numberOfOccurrences
_numberOfTotalFramesETFT
_numberOfTransactions
_numberOfVoicingFrames
_oStream
_observers
_observersByIdentifier
_onAudioPacketWatchdogFire
_onboardType
_opportuneSpeakListeningType
_opportuneSpeakListnerTestService
_options
_opusAudioConverter
_opusConverter
_opusDecoders
_opusOutASBD
_osdAnalyzer
_osdFeaturesAtEndpoint
_osdQueue
_outASBD
_outBufferScaleFactor
_outPacketSizeInSec
_outputRoute
_overrideEnabled
_overridePath
_pNonInterleavedABL
_packetCount
_pairedDeviceAddresses
_path
_pauseCounts
_pauseSSVProcessing
_payloadData
_pendingActivationEvent
_pendingActivationInfo
_pendingAudioSessionActivationCompletion
_pendingAudioSessionActivationReason
_pendingAudioSessionActivationToken
_pendingBuiltInVoiceTriggerCompletionBlk
_pendingBuiltInVoiceTriggerDetectedTime
_pendingBuiltInVoiceTriggerResult
_pendingCompletion
_pendingRecordingStopUUID
_pendingRemoraVoiceTriggerCompletionBlk
_pendingRemoraVoiceTriggerDetectedTime
_pendingRemoraVoiceTriggerDeviceId
_pendingRemoraVoiceTriggerResult
_pendingStartCompletions
_pendingStopCompletions
_pendingTwoShotVTToken
_performPendingAudioSessionActivateForReason:
_performPostBuildInstallWithCompletion:
_performTwoShotPromptForType:atTime:
_permanentOffsetFactor
_permanentOffsetIsEnabled
_phoneCallStateMonitor
_phraseSpotterEnabledDidChange
_playAudioAlert:
_playPhaticWithCompletion:
_playStopAlertIfNecessaryForReason:endpointMode:error:
_playbackDeviceTypeList
_playbackRoute
_playerItem
_popRemoteVADSignal
_postBuildInstallService
_postEpilogueAudioStream
_powerMeter
_preEpilogueAudioStream
_prepareAudioStream:request:completion:
_prepareAudioStreamSync:request:error:
_prepareDirectoryAtPath:
_prepareSoundLevelBufferFromSamples:soundType:
_prepareSpeechControllerWithOptions:error:
_prepareWithOptions:audioSession:completion:
_prepareWithOptions:audioSession:error:
_presentationMode
_prevAudioProcessedMs
_previousMessageLanguage
_prewarmRequest:completion:
_primaryStream
_processAudioBuffer:audioStreamHandleId:arrivalTimestampToAudioRecorder:
_processAudioBuffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
_processAudioChain:audioStreamHandleId:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
_processAudioChunk:soundType:
_processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:
_processGradingDataFetchCommandWithRequest:fromSenderID:withReply:
_processParallelRecordingCommandWithRequest:fromSenderID:withReply:
_processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:
_processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:
_processVoiceProfileListQueryCommandFromPeerId:requestInfo:withReply:
_processVoiceProfileUpdateTriggerFromPeerId:requestInfo:withReply:
_processedAudioDurMs
_processedAudioDurationInMilliseconds
_processedAudioInSeconds
_processedSampleCount
_productCategory
_productIdentifier
_profileId
_protocolVersion
_providerDelegate
_proxyObject
_queue
_rcHandlingClient
_rcXPCConnection
_readAudioBufferAndFeed
_readJsonDictionaryAt:
_readParametersFromHEPAsset:
_receiveParallelRecordingFromPeerId:recordingInfo:withReply:
_receiveVoiceGradingDataFromPeerId:requestInfo:withReply:
_receiveVoiceProfileFromPeerId:voiceProfileInfo:withReply:
_receivedNewAssetUpdate:
_receivers
_recordBasePacketsPerSecond
_recordContext
_recordDevice
_recordDeviceIndicator
_recordDeviceInfo
_recordEventUUID
_recordQueue
_recordRecognitionLanguage:
_recordStateQueue
_recordedAudioFileURL
_recordingAlertsConfiguration
_recordingAudioGroup
_recordingDidStop
_recordingInfo
_recordingInfoForEvent:audioAlertStyle:includeBTInfo:includeRecordDeviceInfo:
_recordingSettings
_recordingTransaction
_recordingWillStartGroup
_refreshSpeakerRecognitionAssets
_registerAudioRouteChangeNotification
_registerAudioSessionNotifications
_registerForFakeAssetRollNotification
_registerInterruptionNotification
_reinitializeSmartSiriVolumeWithAsset:
_rejectionMHUUID
_releaseRecordingTransactionIfNeeded
_reload:
_reloadForDevice:
_remoraSecondPassProgressProvider
_remoteAccessoryStreamIdSet
_remoteDeviceProductIdentifier
_remoteDeviceUID
_remoteDeviceUIDString
_remoteInterface
_remoteObjectProxy
_remoteRecordClient
_remoteVADAlignBuffer
_remoteVADAlignCount
_remoteVADCircularBufferImpl
_remoteVADSPGRatio
_removeQueue:
_removeRecordedAudio
_reportMetrics
_reportUEIUserSpeakingContext
_reportsDynamicActivityAttribute:bundleId:
_reqStartAudioSampleId
_reqStartMachAbsTime
_request
_requestHistoricalAudio
_requestHistoricalAudioDataSampleCount
_requestHistoricalAudioDataWithHostTime
_requestMHUUID
_requestedRecordSettings
_requestedStopRecordingOptions
_requireSingleChannelLookup
_requiresHistoricalBuffer
_reset
_resetAlignBuffer
_resetCircularBufferStartTime
_resetPlayerItem
_resetSpeechController
_resetStartAnalyzeTime
_resetStartOfSpeechDetector
_resumeSSVProcessing
_reusableSessionsByRequest
_ringVibrationState
_ringVibrationValue
_rmsSamplesForEntireAudio
_rootLogDir
_route
_runAssetQuery:completion:
_runningSampleCount
_sampleRate
_sampleRateConverter
_samplesFed
_samplesPerInterval
_samplingRate
_saveRecordingBufferFrom:to:toURL:
_saveSamplesSeenInReset
_savedAudioFilesDirectory
_scaleFactor
_scaleInputWithInRangeOutRange:minIn:maxIn:minOut:maxOut:
_schduleDidStartRecordingDelegateWatchDogWithToken:
_scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:
_scheduleAlertFinishTimeout:
_scheduleAudioPacketWatchDog
_scheduleDidStartRecordingDelegateWatchDog
_scheduleDidStopRecordingDelegateWatchDog
_scheduleDidStopRecordingDelegateWatchDog:
_scheduleExtendedEndpointTimer
_scheduledAudibleFeedbackDelay
_scheduledFutureSample
_secondChanceHotTillMachTime
_secondPassAssetLoadCompleteTime
_secondPassAssetLoadStartTime
_secondPassAssetQueryCompleteTime
_secondPassAssetQueryStartTime
_secondPassCheckerModelKeywordDetectionEndTime
_secondPassCheckerModelKeywordDetectionStartTime
_secondPassFirstAudioPacketReceptionTime
_secondPassLastAudioPacketReceptionTime
_selectedChannel
_selectedResultCandidateId
_sendAcousticGradingDataToPeerId:
_sendCoreSpeechGradingDataToPeerId:
_sendCoreSpeechMagusGradingDataToPeerId:
_sendGeckoSpeechLogsToPeerId:
_sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:
_sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:withCompletion:
_sendMessage:connection:completion:
_sendMessageAsync:completion:
_sendReplyMessageWithResult:error:event:client:
_sendVoiceProfile:toPeerId:
_sendVoiceProfileUpdateTriggerToPeerId:forLocale:
_sendVoiceTriggerGradingDataToPeerId:
_sendXPCClientType
_serverDidEndpoint
_serverDidRecognizeSpeech
_serverFeatureLatencies
_serverFeatureLatencyDistribution
_serverFeaturesQueue
_serverFeaturesWarmupLatency
_serverLoggingWriter
_serverState
_service
_serviceProxyWithErrorHandler:
_serviceWithErrorHandler:
_session
_sessionAttached:result:
_sessionDelegate
_sessionDetached:
_sessionEventDelegate
_sessionInfoProvider
_sessionInfoQueue
_sessionProvider
_sessionSetupGroup
_sessionTerminated:
_sessionUUID
_setAlarmIsPlaying:
_setAlertsIfNeeded
_setAsset:
_setAudioContextWithInfo:forReason:
_setAudioDuckingEnabled:
_setAudioSessionID:
_setDefaultParameters
_setDictationAudioModeEnabled:
_setEndpointStyle:
_setEndpointerOperationMode:forceUpdate:
_setLanguageDetectorDelegateIfRequired
_setLatestRecordContext:
_setMaximumBufferSizeFromInUseServices
_setMediaPlaybackState:isInterrupted:
_setNumLatestLangFromConfigFile:
_setQueue:
_setSoundPlayingState
_setSpeechCapturingMode:
_setStartAnalyzeTime:
_setTimerIsPlaying:
_setUpAccessoryManager
_setUpLocalDevice
_setupAttSiriSvcXpcConnection
_setupAudioConverter:isNarrowBand:
_setupAudioFileWritingForSpeechController:info:context:
_setupAudioProviderFromXPC:
_setupDownsamplerIfNeeded
_setupLanguageDetectorWithOption:
_setupNNVADEndpointer
_setupSignalProviders:
_setupSpeakerRecognitionController
_setupStarted
_sha1:
_sha256:
_shadowMicScoreCreator
_shadowMicScoreThresholdForVAD
_shouldDisableSpeakerVerificationInSplitterMode
_shouldDisableSpeechPacketGeneration
_shouldDuckOnBuiltInSpeaker
_shouldEmitInstrumentation
_shouldFetchRaiseToSpeakInfo
_shouldFetchVoiceTriggerInfo
_shouldHandleStartPendingOnStopping:withStopReason:
_shouldInjectAudio
_shouldKeepConnection
_shouldLogRawSensorData
_shouldLogResourceNotAvailableError
_shouldPauseLKFSProcess
_shouldPauseSSVProcess
_shouldReportBoron
_shouldReportEstimatedSpeechEndHostTime
_shouldResetAdsDictionary
_shouldResetContextAtPrepare
_shouldRollFakeModel
_shouldRunHybridSDSDMitigation
_shouldScheduleAudibleFeedbackAtStartRecording
_shouldSetStartSampleCount
_shouldSetStartSampleCountForRTS
_shouldSkipStartRecordingAlertForRecordingInfo:
_shouldStopRecording
_shouldTrackLaunchLatency
_shouldUseLanguageDetector:
_shouldUseLanguageDetectorForCurrentRequest
_shouldUsePhaticWithRecordContext
_shouldUseRemoteBuiltInMic:
_shouldUseRemoteRecorder
_sigGenTs
_sigProvidersMap
_sigType
_signalFractional
_signature
_silencePosterior
_silentVibrationState
_silentVibrationValue
_siriSessionUUID
_siriStateObserver
_size
_skipAlertBehavior
_smartSiriVolume
_smartSiriVolumeLKFS
_smartSiriVolumeNoiseLevel
_smtConnection
_softwareUpdateCheckingState
_sosQueue
_sourceASBD
_spIdSiriDebugGradingDataRootDirectory
_spIdSiriDebugTrainedUsersFilePathForLocale:
_spIdSiriDebugVTDataDirectory
_spIdSiriDebugVoiceProfileCacheDirectoryForProfile:locale:
_spIdSiriDebugVoiceProfileRootDirectoryForProfile:locale:
_spIdSiriDebugVoiceProfileStoreRootDirectory
_spIdSiriDebugVoiceProfileStoreRootDirectoryForLocale:
_spatialSpectrumData
_spatialSpectrumLogStr
_speakerIdDelegate
_speakerRecognitionAudioLogsGradingDir
_speakerRecognitionScores
_speechCapturingMode
_speechController
_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:atHostTime:mhUUID:
_speechControllerDidReceiveLastAudioRecordBuffer:forReason:estimatedSpeechEndHostTime:isRecordingStopped:
_speechControllerDidStartRecording:successfully:error:
_speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:
_speechControllerRequestsOperation:forReason:completion:
_speechControllerWithError:
_speechEndHostTimeEstimator
_speechEndpointDetected
_speechEndpointerOperationMode
_speechEvent
_speechRecordingAlertPolicy
_speechRecordingEventListener
_speechRecordingEventListenerConnection
_speechRecordingMode
_speechVoiceLevel
_spgEndpointAnalyzer
_spgQueue
_splitterDeviceList
_splitterEnabled
_splitterState
_ssrConnection
_ssrXPCClient
_ssvClient
_ssvConnection
_ssvEnablePolicy
_ssvManager
_startAlertBehavior
_startAnalyzeSampleCount
_startAudioFeedingTimer
_startAudioPlaybackRequest:options:completion:
_startAudioStream:option:completion:
_startAudioStreamForAudioInjectionWithAVVCContext:
_startClearLoggingFilesTimer
_startDataSourcesWithContext:
_startDetected
_startDownloadingAsset:progress:completion:
_startEvent
_startListenPolling
_startListenPollingWithInterval:completion:
_startListenWithCompletion:
_startMonitorLanguageDetectorAssetDownload
_startMonitoring
_startMonitoringWithQueue:
_startObservingAVCallActiveChange
_startObservingOtherAppRecordingState
_startObservingSpeechDetectionVADPresence
_startObservingSystemControllerLifecycle
_startOfSpeechDetected
_startOfSpeechDetector
_startPendingOnStoppingStreamToCompletionDict
_startPendingOnStoppingStreams
_startPendingStreams
_startPeriodicalDownload
_startPhaticDecision
_startRecordingAudioSessionAssertion
_startRecordingHostTime
_startRecordingSampleCount
_startRecordingTimestamp
_startRecordingWatchDogToken
_startRequest:options:preparationHandler:executionHandler:finalizationHandler:
_startRequestWithCompletion:
_startSample
_startSampleCount
_startSignalProvidersWithContext:
_startSpeechId
_startStreamOption
_startWaitTime
_startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:
_stateNotificationQueue
_stateSerialQueue
_stop:
_stopAlertBehavior
_stopAllRequests:completion:
_stopAllRequestsSynchronously
_stopAudioStream:option:completion:
_stopCurrentlyRunningSignalProviders
_stopDataSources
_stopListening
_stopPendingStreams
_stopPeriodicalDownload
_stopRecordingForEndpointReason:withEndpointMetrics:
_stopRecordingHostTime
_stopRecordingInstrumented
_stopRecordingReason
_stopRecordingWatchDogToken
_stopRecordingWithReason:hostTime:
_stopRequest:immediately:
_stopTrackingRemoteAccessoryStreamId:
_storedActivationMode
_streamHandleQueue
_streamHolders
_streamRequest
_streamState
_streamStateName:
_streaming
_streamingUUID
_streams
_subscribeEventMonitors
_supportAVSystemVolumeFetch
_supportDoAP
_supportHearstVoiceTrigger
_supportLazySessionActivtion
_supportPhatic
_supportSessionActivateDelay
_supportTriagleModeSessionActivationRetry
_supportedLocale:
_supportsHybridSDSD
_suppressInterruptionEndedNotifications
_suppressRecordingStoppedAlert
_suppressStartAlert
_switchToListeningMode
_switchToRecordingMode
_systemControllerDied:
_tandemStreams
_targetQueue
_targetSpeed
_taskName
_taskThresholdMap
_tearDownAccessoryManager
_tearDownLocalDevice
_tearDownSpeechDetectionVADIfNeeded
_teardownAudioProviderIfNeeded
_teardownXPCClientIfNeeded
_timeoutInterval
_timerFiringState
_timerMonitor
_timerSoundIsFiring
_timestamp
_token
_totalAudioRecorded
_totalSampleCount
_trackRemoteAccessoryStreamIdIfNeeded:
_trailingPktLatencies
_trailingPktSpeechLatencies
_trailingSilenceDuration
_trailingSilenceDurationAtEndpoint
_transitions
_trialAssetDownloadMonitor
_trialAssetManager
_trialAssetMonitor
_trialDownloadMonitor
_triggerAbsStartSampleId
_triggerMachTime
_triggerNotifiedMachTime
_triggeredTwoShotBorealis
_twoShotAudibleFeedbackDecisionGroup
_twoShotDetectionAudioSessionAssertion
_twoShotNotificationEnabled
_twoShotStartTime
_type
_uid
_uncompressedAudioLogging
_underlyingError
_updateAccessibleEndpointerThresholdIfNeed
_updateAssetWithCurrentLanguageForAssetType:
_updateAssetWithLanguage:
_updateAssetWithLanguage:assetType:
_updateAudioContextToPostVoiceForReason:
_updateAudioContextWithInfo:reason:
_updateAudioContextWithPendingInfoForReason:
_updateAudioDeviceInfo:forReason:forcesUpdate:
_updateDeviceInfo:
_updateEndpointerDelayedTriggerByMhId:
_updateFromRemoteToLocalAssets:forAssetType:completion:
_updateLanguageCodeForRemoteVTEIResult:
_updateOEPAssetsWithLanguage:
_updateRecordBufferDuration
_updateRecordContextIfNeeded:
_updateRemoteDeviceIdFromAVVCIfNeeded
_upsampler
_url
_useBorealisBuffer
_useCustomizedRecordSettings
_useDefaultServerFeaturesOnClientLag
_useOpportunisticZLL
_usePrelistening
_userIntentValidForSeconds
_userIntentVolume
_userName
_userOffsetInputRangeHigh
_userOffsetInputRangeLow
_userOffsetOutputRangeHigh
_userOffsetOutputRangeLow
_userSpeakingEndedHostTime
_userSpeakingEndedTimeInMs
_userSpeakingStartedHostTime
_userSpeakingStartedTimeInMs
_uuid
_vadScore
_version
_voiceController
_voiceControllerCreationQueue
_voiceControllerWithError:
_voiceIdentificationBatchId
_voiceIdentificationTraining_allowedResultCandidateIds
_voiceIdentificationTraining_allowsWithoutResultCandidate
_voiceIdentificationTraining_resultCandidateToSharedUserIdMap
_voiceTriggerAssetDownloadMonitor
_voiceTriggerBatchId
_voiceTriggerDuringCallEnabledDidChange
_voiceTriggerEnabled
_voiceTriggerEndHostTime
_voiceTriggerEventInfo
_voiceTriggerInfo
_voiceTriggerSampleCount
_volumeController
_volumeMonitor
_vtEndInSampleCount
_vtExtraAudioAtStartInMs
_waitingForAlertFinish
_waitingForDidStart
_wakeGestureTimestamp
_wantsRecordedAudioBufferLogs
_wasCanceled
_wasLanguageToggled
_wordCount
_xpcClient
_xpcClientFactory
_xpcClientType
_xpcConnection
_xpcConnectionQueue
_xpcDelegateQueue
_xpcReplyQueue
_zeroCounter
_zeroFilter
acceptEagerResultWithFeatures:featuresToLog:
accessibilityState
accessibleEndpointerEnabled
accessibleEndpointerThreshold
accessoryManager:event:device:state:
accessoryModelTypeToString:
accessorySiriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:forAccessory:
accessorySiriClientBehaviorMonitor:didStopStream:reason:withEventUUID:forAccessory:
accessorySiriClientBehaviorMonitor:willStartStreamWithContext:option:forAccessory:
accessorySiriClientBehaviorMonitor:willStopStream:reason:forAccessory:
accessoryVoiceTriggerMetaDataByDeviceId
acousticFingerprinter:hasFingerprint:duration:
acousticSLResultForContext:completion:
acquireAudioSessionAssertionWithContext:relinquishmentHandler:
acquireRecordedAudioWithHandler:
activateAudioSessionForStream:isPrewarm:error:
activateAudioSessionForStream:isPrewarm:recordMode:error:
activateAudioSessionWithReason:streamHandleId:error:
activateConnection
activateStartTime
activationAlertStartTimestamp
activationAssertions
activationDeviceIdentifier
activationDeviceUID
activationEventNotificationHandler:event:completion:
activationEventTime
activationHostTime
activationInfo
activationMetadata
activationMode
activationSystemUptime
activeAudioRouteDidChange:
activeChannel
activeEndpointer
adBlockerAssetDecoderWithVersion:
adCompanionServiceProvider
adaptiveSiriVolumePermanentOffset
adaptiveSiriVolumeRecentIntent
addAudio:numSamples:
addAudioSamples:count:
addConditions:
addContextKey:fromMetaFile:
addContextKey:withContext:
addDataToBuffer:
addDelegate:
addDeviceIntoSplitterDeviceList:
addEntriesFromDictionary:
addKeyValuePair:with:
addKeyValuePairForQuery:assetType:
addListener:
addNumSamples:hostTime:
addObject:
addObjectsFromArray:
addObserver:
addObserver:forAssetType:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addPackets:audioStreamHandleId:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:
addPktInfoWithTimestamp:arrivalTimestamp:currentMachTime:
addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:
addReceiver:
addSamples:numSamples:
addSamples:numSamples:atHostTime:
addSamples:timestamp:arrivalTimestampToAudioRecorder:
addTransitionFrom:to:for:
addTransitionFromAnyStateTo:for:
addUtterances:toProfile:withContext:withCompletion:
addVTAcceptEntryAndSubmit:
addVTRejectEntry:truncateData:
additionalMetrics
adpAssertion
alarmMonitor
alarmState
alarmVolume
alertDelegate
alertPlaybackFinishWaitingCompletions
alertPlaybackFinishWaitingStreams
alertProvider
alertStartTime
alignBufferQueue
allChannelsLpcmInterleavedASBD
allChannelsLpcmNonInterleavedASBD
allDeviceDisconnected
allInstalledAssetsOfType:language:
allValues
allowAdBlockerAssetDownloading
allowEndpointAssetDownloading
allowExtendedRingBufferSize
allowKeywordsFile
allowLanguageDetectorAssetDownloading
allowListWordCountThreshold
allowSpeakerRecognitionAssetDownloading
allowVoiceTriggerAccessoryAssetDownloading
allowVoiceTriggerAssetDownloading
alwaysOnProcessorController
alwaysOnVoiceTriggerEnabled
anchorMachAbsTime
announceCallsEnabled
announcementPlatform
appDomain
appendAcousticData:sampleCount:sampleRate:
appendAudioData:
appendBytes:length:
appendData:
appendFormat:
appendPCMData:
appendRecordedAudioBuffer:
appendString:
applicationBundleIdentifier
applicationDisplayName
applyLowerAndUpperBoundsToVolume:
applyLowerAndUpperBoundsToVolumeOffset:
applyNegative20dBGainToFloatBuffer:
applyNegative20dBGainToShortBuffer:
applyNegative32dBGainToFloatBuffer:
applyNegative32dBGainToShortBuffer:
array
arrayWithCapacity:
arrayWithObjects:count:
arrivalHostTimeToAudioRecorder
asrDatapackInstallationStatus
assertionMonitor
assetChangeMonitorDidDetectAssetChange:
assetForAssetType:resourcePath:configVersion:
assetForAssetType:resourcePath:configVersion:assetProvider:
assetForCurrentLanguageOfType:
assetForCurrentLanguageOfType:completion:
assetManager
assetManagerEnabledPolicy
assetOfType:language:
assetOfType:language:compatibilityVersion:completion:
assetOfType:language:completion:
assetOfType:providerType:language:completion:
assetProvider
assetServerUrl
assetStatus:
assetVersion
assetWithData:contentType:options:
assetsMigrationQueue
assetsProvider
assistantAudioFileLogDirectory
attSiriAttendingFailed
attSiriAttendingTimeoutTriggered
attSiriDidDetectAttendingTrigger:
attSiriStateMonitor:didRecieveAttSiriStateChange:
attSiriSvcConn
attachDevice:
attachProgressCallBack:
attachTandemStream:toPrimaryStream:completion:
attachToPrimaryStreamWithCompletion:
attendingState
attributes
atvRemoteDeviceID
audioAlertProvidingDelegate
audioAlertProvidingDidFinishAlertPlayback:ofType:error:
audioAlertStyleForRecordRoute:recordingInfo:playbackRoute:
audioBuffer
audioChunkAvailable:numChannels:numSamplesPerChannel:startSampleId:atAbsMachTimestamp:
audioChunkFrom:to:
audioChunkFrom:to:channelIdx:
audioChunkToEndFrom:
audioConverterBitrate
audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:
audioDecoderDidDecodePackets:audioStreamHandleId:buffer:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:
audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:
audioEngineAudioChunkForTvAvailable:audioChunk:
audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:
audioEngineDidStartRecord:audioStreamHandleId:successfully:error:
audioEngineDidStopRecord:audioStreamHandleId:reason:
audioFeedTimer
audioFileReaderBufferAvailable:buffer:atTime:
audioFileReaderDidStartRecording:successfully:error:
audioFileReaderDidStopRecording:forReason:
audioFingerprintProvider
audioFormat
audioInjectionEnabled
audioInjectionEngines
audioInjectionFilePath
audioLoggingBuffer
audioMeterProvider
audioMetric
audioMetricProvider
audioPacketDeliveryCount
audioPacketWatchdog
audioPlaybackService:didStartRequest:
audioPlaybackService:didStopRequest:error:
audioPlaybackService:willStartRequest:
audioPlayerBeginInterruption:
audioPlayerDecodeErrorDidOccur:error:
audioPlayerDidFinishPlaying:successfully:
audioPlayerEndInterruption:
audioPlayerEndInterruption:withFlags:
audioPlayerEndInterruption:withOptions:
audioPreprocessor
audioPreprocessor:hasAvailableBuffer:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
audioProviderInvalidated:streamHandleId:
audioProviderUUID
audioProviderWithStreamID:
audioProviderWithUUID:
audioProviders
audioRecordContext
audioRecorder
audioRecorder:didSetAudioSessionActive:
audioRecorder:willSetAudioSessionActive:
audioRecorderBeginRecordInterruption:
audioRecorderBeginRecordInterruption:withContext:
audioRecorderBufferAvailable:audioStreamHandleId:buffer:
audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
audioRecorderBuiltInAudioStreamInvalidated:error:
audioRecorderDidFinishAlertPlayback:ofType:error:
audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:
audioRecorderDidStopRecord:audioStreamHandleId:reason:
audioRecorderDisconnected:
audioRecorderEndRecordInterruption:
audioRecorderLostMediaserverd:
audioRecorderRecordHardwareConfigurationDidChange:toConfiguration:
audioRecorderStreamHandleIdInvalidated:
audioRecorderWillBeDestroyed:
audioRecorderWithQueue:error:
audioServerCrashEventProvidingLostMediaserverd
audioSessionActivated
audioSessionActivationDelay
audioSessionActivationTargetDate
audioSessionController
audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:
audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:
audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:
audioSessionController:didReceiveAudioSessionOwnerLostNotification:
audioSessionController:didReceiveAudioSessionOwnerResetNotification:
audioSessionController:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:
audioSessionEventProvidingDidSetAudioSessionActive:
audioSessionEventProvidingWillSetAudioSessionActive:
audioSessionID
audioSessionIdForDeviceId:
audioSessionInfoObservers
audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:
audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:
audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:
audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:
audioSessionProvider
audioSessionProvider:didChangeContext:
audioSessionProvider:didSetAudioSessionActive:
audioSessionProvider:providerInvalidated:
audioSessionProvider:willSetAudioSessionActive:
audioSessionProviderBeginInterruption:
audioSessionProviderBeginInterruption:withContext:
audioSessionProviderEndInterruption:
audioSessionProvidingDelegate
audioSessionSetActiveEndHostTime
audioSessionState
audioStream
audioStreamHandleId
audioStreamId
audioStreamProvider
audioStreamProvider:audioBufferAvailable:
audioStreamProvider:audioBufferAvailable:lastForwardedSampleCount:
audioStreamProvider:audioChunkForTVAvailable:
audioStreamProvider:avBufferAvailable:
audioStreamProvider:didHardwareConfigurationChange:
audioStreamProvider:didStopStreamUnexpectly:
audioStreamProvidingDelegate
audioStreamWithRequest:streamName:completion:
audioStreamWithRequest:streamName:error:
audioSystemRecovering
audioTapProvider
audioTimeConverter
audioURL
automaticEndpointingSuspensionEndTime
autorelease
averagePowerForChannel:
averagePowerForOutputReference
avgPower
avvcAlertBehavior
avvcContext
avvcContextSettings
avvcStartRecordSettingsWithAudioStreamHandleId:
azDistribution
batteryState
becomeCurrent
beepCanceller
beepCancellerDidCancelSamples:buffer:timestamp:
beepSoundID
beginAnnounceMessageException:reason:
beginRecordingAudioWithAudioStreamBasicDescription:
beginSampleCount
beginTimestamp
beginUpdateToPostVoice
beginWaitingForMyriad
bestEarlyDetectSample
bestEndDetectSample
bestScore
bestStart
bestStartDetectSample
bluetoothDevice:deviceInfoDidChangeFrom:to:
bluetoothDeviceDidInvalidate:
bluetoothSession
bluetoothSessionSetupGroup
boolValue
bufferDuration
bufferLength
buildVersion
builtInAudioInjectionEngine
builtInDevice
builtInMicVoiceTriggerEvent:hostTime:
builtInRTModelDictionary
builtInSeconPassProgressProvider
builtInSpeakerState
builtInVoiceTriggerMetaData
bundleIdFromDictation
bundleTvRemote
buttonDownHostTime
bypassSamples
bytes
bytesDataSize
cStringUsingEncoding:
cachedAsset
cachedAvgPower
cachedEndpointAssets
caesuraSPG
calculateShadowMicScore
canBePurged
canPerformDelayedStop
canPrepareWithoutInterruption
canPrewarm
canProcessCurrentRequest
cancel
cancelAudioLogging
cancelAudioStreamHold:
cancelBeepFromSamples:timestamp:
cancelCurrentLanguageDetectorRequest
cancelCurrentRequest
cancelDownloadSync
cancelIfNotAlreadyCanceled
cancelSpeechCaptureSuppressingAlert:
capacity
carPlayAuxStreamSupportDidChange:
carPlayConnected
carPlayIsConnectedDidChange:
certificate
channelForOutputReference
channelForProcessedInput
channels
checkFirstUnlocked
checkerThresholds
chunkForChannel:
circBuffer
circularBuffer
circularBufferInputRecordingDuration
circularBufferNumInputChannel
circularBufferStartHostTime
circularBufferStartSampleCount
clampedSFLatencyMsForClientLag
class
classifyUserIdentityFor:withScores:withAsset:
clearLoggingFileTimer
clearLoggingFileTimerCount
clearTriggerCount:
clientConnections
clientController
clientForAudioProviding
clientForAudioSessionInfoProviding
clientForFallbackAudioSessionReleaseProviding
clientForMacOSDuckAudioDevice
clientForSmartSiriVolumeProviding
clientLagThresholdMs
clientSilenceFramesCountMs
clientSilenceProbability
clockAlarmObserver:alarmDidDismiss:
clockAlarmObserver:alarmDidFire:
clockAlarmObserver:snapshotDidUpdateFrom:to:
clockTimerObserver:snapshotDidUpdateFrom:to:
clockTimerObserver:timerDidDismiss:
clockTimerObserver:timerDidFire:
close
code
codec
codecIsNarrowband
commandControlBehaviorMonitor:didStartStreamWithContext:successfully:option:
commandControlBehaviorMonitor:didStopStream:
commandControlBehaviorMonitor:willStartStreamWithContext:option:
commandControlBehaviorMonitor:willStopStream:
commandControlListener:didStopUnexpectly:
commandControlListener:hasLPCMBufferAvailable:
companionSyncVoiceTriggerUtterancesEnabled
compare:
compareScoresDesc:
componentsJoinedByString:
componentsSeparatedByString:
confidence
confidences
configFile
configVersion
configureAlertBehavior:
configureAlertBehavior:audioStreamHandleId:
configureWithAudioStreamBasicDescription:
conformsToProtocol:
connect:
connectDevice:
connectDeviceWithUUID:completion:
connectedDeviceAddresses
connectedDevices
connection
contConvConfigFile
contConvThresholds
containsCategory:
containsMultiUserThresholds
containsSpeakerRecognitionCategory
containsValueForKey:
contentsOfDirectoryAtPath:error:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
contextForBuiltInVoiceTrigger
contextForHearstVoiceTriggerWithDeviceId:
contextForOpportuneSpeakerListener
contextForOpportuneSpeakerListenerWithCall
contextForRemoraVoiceTriggerWithDeviceId:
continuousAudioFingerprintEnabledPolicy
continuousVoiceTrigger:detectedSilenceAfterVoiceTriggerAt:
continuousVoiceTrigger:detectedVoiceTriggerResult:
conversationalMessages
convertSISchemaAudioInputRouteToMHRoute:withRecordingInfo:
convertSampleRateOfBuffer:
convertToFloatLPCMBufFromShortLPCMBuf:
convertToShortLPCMBufFromFloatLPCMBuf:
converterForAudioStreamId:
copy
copyBufferWithNumSamplesCopiedIn:
copySamplesFrom:to:
copySamplesFrom:to:channelIdx:
copySamplesFromAudioSampleCount:toAudioSampleCount:
copyWithZone:
copybufferFrom:to:
coreSpeechDaemonStateMonitor:didReceiveStateChanged:
count
countByEnumeratingWithState:objects:count:
crashEventDelegate
createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:
createAudioFileWriterForOpportuneSpeakListenerWithInputFormat:outputFormat:
createAudioFileWriterForRemoteVADWithInputFormat:outputFormat:withLoggingUUID:
createAudioFileWriterWithInputFormat:outputFormat:withLoggingUUID:
createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:
createAudioStreamMessageWithRequest:
createBenchamrkXPCConnection
createDirAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createMockRemoteDeviceWithName:deviceID:completion:
createPrepareAudioStreamMessageWithRequest:
createRTModelWithLocale:
createSharedAudioSession
createStartAudioStreamMessageWithOption:
createStopAudioStreamMessage
csAssetsDictionary
csAudioProcessingQueuePriority
currActiveDataSourceTypes
currActiveSigProvTypes
currentAsset
currentBuiltinSpeakerState
currentCarPlayExternalDevice
currentContext
currentDarwinHostState
currentHandler
currentInputDeviceUIDArray
currentInputRoute
currentItem
currentLanguageCode
currentMaximumBufferSize
currentOutputRoute
currentPowerSource
currentPowerState
currentRawPowerState
currentRequestSampleRate
currentRoute
currentRunLoop
currentSessionShouldDuckOnBuiltInSpeaker
currentShadowMicScore
currentSpeed
currentState
currentVTSatScore
data
dataBufferNDEAPI
dataBufferPositionNDEAPI
dataSrcMap
dataUsingEncoding:
dataWithBytes:length:
dataWithCapacity:
dataWithContentsOfFile:
dataWithContentsOfFile:options:error:
dataWithJSONObject:options:error:
dataWithRemoteVADWithScaleFactor:numAudioSamplesPerRemoteVAD:
date
dateAdded
dateByAddingTimeInterval:
dateByAddingTimeIntervalSinceActivation:
dateWithTimeIntervalSinceNow:
daysBeforeRemovingLogFiles
deactivateAudioSession:error:
deactivateAudioSession:streamHandleId:error:
deactivateAudioSessionForStream:withOptions:error:
deactivateAudioSessionWithOptions:
deactivateEndTime
deactivateForReason:options:context:completion:
deactivateSiriActivationConnectionWithReason:withOptions:withContext:
deactivateStartTime
debugDescription
debugLogPath
decodeInt64ForKey:
decodeIntegerForKey:
decodeJson:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
decoderProcessedSampleCountForTV
decodersForTV
decreaseSiriVolumeBasedOnUserIntent
defaultCStringEncoding
defaultCenter
defaultContext
defaultContinousFingerprintBufferDuration
defaultController
defaultConverter
defaultFactory
defaultFallbackModelIfNil:
defaultInjectionProvider
defaultManager
defaultOption
defaultOutputAudioDeviceID
defaultProtocolInfo
defaultRequestWithContext:
defaultServerEndpointFeatures
deinterleaver
delay
delegate
delegates
deleteUserVoiceProfile:
description
destination
detectedToken
device:serviceMask:serviceEventType:serviceSpecificEvent:result:
deviceBuildVersion
deviceCategory
deviceConnectedWithUUID:
deviceDisconnectedWithUUID:
deviceID
deviceId
deviceIdentifier
deviceInfo
deviceName
deviceProductType
deviceProductVersion
deviceRingerSwitchState
deviceRoleIsStereo
deviceType
deviceUID
deviceWithAddress:
deviceWithUID:
dictationInputOrigin
dictationLanguagePriors
dictationLanguages
dictationVoiceTriggerAbsStartSampleId
dictionary
dictionaryWithDictionary:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didAddAudio
didCommunicateEndpoint
didDeliverFirstSpeechPacket
didDeliverLastBuffer
didDetectHardEndpointAtTime:withMetrics:
didDetectKeywordWithResult:
didDetectStartpointAtTime:
didDetectTwoShotWithAudioActivationInfo:atTime:
didEndpointWithFeatures:audioTimestamp:featuresToLog:endpointPosterior:extraDelayMs:
didFinishSpeakerRecognition:
didIgnoreEvent:from:
didPlayEndpointBeep
didReceiveAlarmChanged:
didReceiveAlarmVolumeChanged:
didReceiveMusicVolumeChanged:
didReceiveServerFeatures
didReceiveSpeakerRecognitionScoreCard:
didReceiveTimerChanged:
didReportEndpointDelay
didSetScaleFactor
didSmartSiriVolumeChangeForReason:
didStartDelayInSeconds
didStopRecordingWithError:
didTTSVolumeChange:forReason:
didTTSVolumeChangeForReason:
didTimestampFirstAudioPacket
didTransitFrom:to:by:
didWin
digest
disableAdaptiveSiriVolume:
disableAssertionReceived
disableBoostForDoAP
disableEndpointer
disableLocalSpeechRecognizer
disablePrewarmLocalAsrAtStartRecording
disableSpeechPacketGeneration:
disconnect
disconnect:
disconnectDevice:
disconnectDeviceWithUUID:completion:
dismissalTimestamp
dispatchStateChangedFrom:to:
distributionDictionary:
domain
doubleValue
downsampler
droppedPrediction
droppingPrediction
dspStatus
duckAudioXPCClient
duckOthersOption
effectiveBoolValueForSetting:
elapsedTimeWithNoSpeech
emitRequestLinkEventForMHUUID:
enableAlwaysOnVoiceTrigger
enableAssertionReceived
enableAudioInjection:
enableMiniDucking:
enablePolicy
enableProgrammableAudioInjection:
enableSmartRoutingConsideration:
enableSmartRoutingConsiderationForStream:enable:
enableSmartRoutingConsiderationForStream:enable:error:
enableSpeakerStateListening:completionBlock:
enableVoiceTrigger:withAssertion:
enableVoiceTrigger:withAssertion:timestamp:
enableVoiceTrigger:withAssertion:xpcClient:
encodeInt64:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeWithCoder:
encoderBitRate
endAnnounceMessageException:reason:
endAudio
endAudioAndFetchAnyTrailingZerosPacket:
endAudioWithCancellation:
endMonitoring
endOfSentenceLikelihood
endPointAnalyzerType
endPointNotified
endRecordingAudio
endRequest
endSample
endTimestamp
endUpdateToPostVoiceWithContext:success:
endWaitTime
endWaitingForMyriadWithDecision:
endpointAnalyzer
endpointBufferHostTime
endpointId
endpointMode
endpointStyle
endpointThreshold
endpointTimeInMs
endpointType
endpointer:detectedTwoShotAtTime:
endpointer:didDetectHardEndpointAtTime:withMetrics:
endpointer:didDetectStartpointAtTime:
endpointer:reportEndpointBufferHostTime:firstBufferHostTime:
endpointerAssetManagerDidUpdateAsset:
endpointerAssetManagerDidUpdateOSDAsset:
endpointerConnection
endpointerDelegate
endpointerImplDelegate
endpointerModelVersion
endpointerOperationMode
endpointerType
enforcePreviousEndpointHint
engineWithDeviceType:streamHandleId:
enter
enumerateKeysAndObjectsUsingBlock:
enumerateObjects:
enumerateObjectsUsingBlock:
enumerateObservers:
enumerateObserversInQueue:
enumeratorAtPath:
eosLikelihood
epResult
error
errorAlertBehavior
errorWithCode:
errorWithCode:description:
errorWithCode:description:underlyingError:
errorWithDomain:code:userInfo:
estimateSoundLevelbySoundType:
estimatedAzimuth
estimatedSpeechEndHostTime
estimatedStartHostTime
estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:
estimatedUserSpeakingEndedHostTime
estimatedUserSpeakingStartedHostTime
event
eventToStateTransitions
expectedStopHostTime
expectedTimeRemaining
expressionForConstantValue:
expressionForFunction:arguments:
expressionValueWithObject:context:
extraDelayFrequency
fFile
fadeInDuration
fakeAssetMonitor
fakeAssetRollNotificationRegistrationToken
fakeEndpointAssetPath
fakeHearstModelPath
fakeMitigationAssetPath
fakeVoiceTriggerAssetPath
fallBackAssetResourcePath
fallbackAudioSessionReleaseProvider
fallbackDeactivateAudioSession:error:
falseWakePhraseDictionary
fanId
featuresAtEndpoint
fetchAudioDeviceInfo
fetchAudioMetricsWithCompletion:
fetchAudioSessionID
fetchCurrentEndpointerOperationMode
fetchDeviceUUIDStringFromUID:
fetchFallbackAudioSessionReleaseProvider
fetchHypotheticalRouteType
fetchInitSystemVolumes
fetchIsEnabled
fetchRecordingInfo
fetchRemoteMetaOfType:
fetchRemoteMetaOfType:allowRetry:
fetchRemoteVoiceTriggerAssetForLanguageCode:completion:
fetchRichDeviceUIDStringFromUUID:
fetchVoiceTriggerDailyStats
fetchVoiceTriggerHeartBeatMetrics
fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:
fetchVoiceTriggerStats
fetchVolumeFromAVSystemControllerForAudioCategory:
fileDescriptor
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileLoggingIsEnabled
fileOption
fileSystemRepresentation
fileURLWithPath:
fileURLWithPath:isDirectory:
filterZerosInAudioPacket:atBufferHostTime:filteredPacket:
filteredArrayUsingPredicate:
filteredAssetsForAssets:assetType:language:
filteredAssetsForFetchRemoteMetaDataForAssets:assetType:
firstAudioPacketTimestamp
firstBufferHostTime
firstBufferTimestamp
firstObject
firstPartyCall
firstPassDebuggingEnabled
firstPassInfoGeneratedTime
firstPassInfoProcessedTime
firstPassMyriadGoodnessScore
firstPassTriggerInfo
firstUnlockMonitor
firstpassMetrics
flexKwdConfigFile
flexKwdThresholdFile
floatValue
flush
flushWithCompletion:
forceSuccessAudioAlertOnStop
forceVoiceTriggerAPMode
gainCompensatedChunk
geckoAudioLogDirectory
generateAudioWithTexts:language:completion:
generateConfusionPairsWithUUID:parameters:language:task:samplingRate:recognizedTokens:recognizedText:correctedText:selectedAlternatives:completion:
generateDeviceAudioLogging:speechId:
generateEmptyPHash:writeFile:
generatePHashFromVoiceTriggerInfo:writeFile:
gestureMonitorDidReceiveSleepGesture:
gestureMonitorDidReceiveWakeGesture:
getASVUserIntent:
getAccessoryFallbackFamilyLocal:fromLocaleMap:
getAccessoryFallbackLocalTable
getAdBlockerAssetTypeString
getAdBlockerCurrentCompatibilityVersion
getAssetTypeForNamespace:
getAssetTypeStringForType:
getAttendingState
getAttendingTimeoutConfig
getAudioConverterForTest
getAudioInjectionXPCConnection
getAudioRecordRouteAndDeviceIdentificationWithCompletion:
getAudioRouteInstrumentationWithRecordingInfo:
getAudioSessionID
getAudioSessionIDWithCompletion:
getAudioSessionState
getAveragePowerDB
getAveragePowerForStream:forChannel:
getBTDeviceWithAddress:completion:
getBTDeviceWithDeviceUID:completion:
getBestAnalyzedResultsFromAudioChunk:
getBestSampleCountWithOption:
getBiometricMatchResultForTriggerTimeStamp:
getCSAssetOfType:
getCategoryKeyWithRecordCtx:
getConnectedBluetoothDeviceAddressesWithCompletion:
getCoreSpeechServiceConnection
getCoreSpeechXPCConnection
getCurrentEndpointerAsset
getCurrentFanInfo:
getCurrentOSDAsset
getCurrentSessionState
getCurrentStreamState:
getCurrentVoiceTriggerLocaleWithEndpointId:completion:
getDeviceInfo:
getElapsedTimeNoSpeechWithReply:
getEndPointAnalyzerTypeWithReply:
getEndpointAssetCurrentCompatibilityVersion
getEndpointAssetTypeString
getEndpointerModelVersionWithReply:
getFiringAlarmIDsWithCompletion:
getFiringTimerIDsWithCompletion:
getFirstPassRunningMode
getFirstPassRunningMode:
getFixedPrioritySerialQueueWithLabel:fixedPriority:
getFrameDurationMs
getHeadphoneInEarDetectionState:
getHeadphoneListeningMode:
getHearstConnected:
getHearstRouted:
getHomeUserIdForSharedUserId:completion:
getHostClockFrequency
getInstalledAssetofType:forLocale:completion:
getJarvisConnected:
getLPCMAudioStreamBasicDescription
getLanguageDetectorAssetTypeString
getLanguageDetectorCurrentCompatibilityVersion
getLastBiometricMatchEvent:atTime:
getLastResult
getLastStartpointTimestampAndCurrentTime:
getLocalUrl
getMachTimeAdjustedVoiceTriggerEventInfoForDeviceUUID:
getMitigationAssetWithEndpointId:completion:
getMitigationDecisionForRCId:completion:
getMitigationDecisionForRCIdWithCompletion:completion:
getNumElementInBitset:
getNumberForKey:category:default:
getPeakPowerDB
getPeakPowerForStream:forChannel:
getRecordBufferDuration
getRecordDeviceInfoForStream:
getRecordSettingsForStream:
getResourceValue:forKey:error:
getSSVDeviceType
getSerialQueue:qualityOfService:
getSerialQueue:withQualityOfService:andTargetQueue:
getSignature:
getSiriInputSourceOutOfBand:
getSiriLanguageWithEndpointId:fallbackLanguage:
getSiriLanguageWithFallback:
getSmartSiriVolume
getSpeakerRecognitionAssetTypeString
getSpeakerRecognitionCurrentCompatibilityVersion
getStartOfSpeechAudioLogFilePath
getStateWithCompletion:
getStringForKey:category:default:
getTestResponse:
getThreshold
getTrialIdsForAssetType:withCompletion:
getTriggerCount:
getTriggerMode
getUUIDBytes:
getValueForKey:category:
getValueFromDictionaryOfDictionaries:keypath:
getVoiceTriggerAssetCurrentCompatibilityVersion
getVoiceTriggerAssetTypeString
getVoiceTriggerAssetWithEndpointId:completion:
getVoiceTriggerCurrentCompatibilityVersion
getVoiceTriggerEndSampleCountFromVTEI:
getVolumeForTTSType:
getVolumeForTTSType:withContext:
getVolumeForTTSType:withContext:reply:
getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:
getWirelessSplitterInfoWithCompletion:
getZeroStatisticsFromBuffer:entireSamples:
globalLastKeyboardUsed
handleBeginInterruption
handleEndInterruption:
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
handleOtherAppRecordingStateChange:
handlePendingBuiltInVoiceTriggerIfNeeded
handlePendingRemoraVoiceTriggerIfNeeded
handleRingVibrationValueChange
handleSilentVibrationValueChange
handleSiriRequest:deliveryHandler:completionHandler:
handleSpeechDetectionVADPresentChange:
handleSpeechRecordingEvent:
handleVoiceTriggerWithActivationInfo:
handleXPCMessage:messageBody:client:
hardwareInterfaceVendorID
hasConnectedAVCall
hasDarwinDeviceConnected
hasDarwinDeviceHandleVoiceTrigger
hasPendingTwoShotBeep
hasPerformedDelayedStop
hasPlayedStartAlert
hasReceivedEarlyDetectNDEAPIResult
hasReceivedNDEAPIResult
hasRemoteBuiltInMic
hasRemoteCoreSpeech
hasReported
hasSpaceAvailable
hasSuffix:
hash
hashFromResourcePath
hashTableWithOptions:
headerString
headsetAddress
headsetName
hearstNumberOfBytesPerChunk
hearstNumberOfSamplesPerChunk
hearstRTModelLocaleMap
hearstRTModelWithMajorVersion:minorVersion:locale:
hearstRouted
heartBeatFiredWithQueue:
hepAudioOriginInMs
historicalBufferRequestStreams
holdAudioStreamWithDescription:timeout:
homeButtonDownEventMachAbsoluteTime
homeId
horsemanDeviceType
hostTime
hostTimeBuffer
hostTimeForSeconds:
hostTimeFromSampleCount:
hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:
hostTimeToNs:
hostTimeToSeconds:
hostTimeToTimeInterval:
hosttime
hybridClassifier
hybridClassifierQueue
hybridEndpointer
identifier
implDelegate
inASBD
inUseServices
increaseSiriVolumeBasedOnUserIntent
init
initFileURLWithPath:isDirectory:
initTandemWithOption:
initTandemWithRequest:
initWithAVVCRecordDeviceInfo:
initWithAddress:dataSource:queue:
initWithAnalyzeMode
initWithAppBundleIdentifier:
initWithArray:
initWithAssertionMonitor:
initWithAsset:
initWithAsset:assetConfig:firstPassSource:activeChannel:siriLanguage:shouldEnableShadowMicScore:
initWithAssetManager:withTrialAssetManager:withTrialDownloadMonitor:withLanguageCodeUpdateMonitor:withAssetOverrideFlag:withOverrideAssetPath:
initWithAssetsProvider:dataSourceMap:signalProviderToDataSourceMap:
initWithAudioDeviceID:
initWithAudioRecorder:
initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:
initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:phoneCallStateMonitor:
initWithAudioStreamProvider:streamName:streamRequest:
initWithAudioURL:withScaleFactor:outASBD:
initWithBackingStoreCapacity:minimalNumberOfBackingStores:maximumNumberOfBackingStores:backingStoreIdleTimeout:
initWithBlob:
initWithBlock:
initWithBlock:defaultValue:
initWithBool:
initWithBytes:length:
initWithCapacity:
initWithCoder:
initWithConfig:samplingRate:minSpeechFrames:numLeadingFrames:delegate:
initWithConfigFile:
initWithConfigFile:sampleRate:context:queue:delegate:
initWithConfigFile:samplingRate:queue:
initWithConfiguration:
initWithConfiguration:modelVersion:
initWithConnection:
initWithContentsOfURL:error:
initWithCrashMonitor:
initWithData:
initWithData:encoding:
initWithData:error:
initWithData:hash:locale:
initWithData:hash:locale:digest:signature:certificate:
initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:arrivalHostTimeToAudioRecorder:wasBuffered:remoteVAD:
initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:remoteVAD:
initWithDataSource:assetsProvider:
initWithDelegate:
initWithDescription:
initWithDescription:timeout:
initWithDeviceId:audioStreamHandleId:
initWithDeviceType:deviceName:deviceID:productID:
initWithDeviceUID:dataSource:queue:
initWithDictation:codec:
initWithDictation:fingerprintOnly:secureOfflineOnly:audioAlertStyle:recordSettings:recordRoute:recordDeviceInfo:playbackRoute:audioDeviceID:audioSessionID:voiceTriggerEventInfo:activationAlertStartTimestamp:startRecordingTimestamp:firstBufferTimestamp:firstBufferHostTime:estimatedSpeechEndHostTime:deviceIdentifier:includeBTInfo:speechEvent:
initWithDictionary:
initWithDispatchQueue:
initWithDomain:code:userInfo:
initWithDownloadOption:
initWithDroppingPrediction:droppedPrediction:timestamp:
initWithDuckOthers:duckToLevel:mixWithOthers:
initWithEndpointId:
initWithEndpointId:xpcClientFactory:endpointer:continuousVoiceTrigger:siriVolumeController:mediaPlayingMonitor:alarmMonitor:timerMonitor:sacInfoMonitor:audioSessionController:supportPhatic:supportHearstVoiceTrigger:supportTriagleModeSessionActivationRetry:supportSessionActivateDelay:supportLazySessionActivtion:
initWithEndpointThreshold:
initWithError:
initWithFakeMonitor:
initWithFileDescriptor:closeOnDealloc:
initWithFilePath:appendHdr:
initWithFirstPassSource:deviceId:audioProviderUUID:firstPassInfo:rejectionMHUUID:isSecondChanceRun:firstpassMetrics:
initWithHash:locale:
initWithIdentifier:queue:effectiveDate:expirationDuration:heartBeatInterval:heartBeatHandler:invalidationHandler:
initWithInASBD:outASBD:
initWithInitialState:
initWithInstanceContext:
initWithItemURL:itemData:numberOfLoops:volume:fadeInDuration:fadeOutDuration:userInfo:
initWithListenerEndpoint:
initWithLongLong:
initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:
initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:queue:
initWithMachServiceName:
initWithMachServiceName:options:
initWithMessage:makeAppFrontmost:
initWithMode:deviceUID:
initWithModelURL:
initWithName:clientQueue:
initWithName:options:queue:delegate:
initWithNumChannels:recordingDuration:samplingRate:
initWithNumChannels:recordingDuration:samplingRate:audioTimeConverter:
initWithObjectsAndKeys:
initWithOptions:capacity:
initWithOverrideOption:reason:
initWithPattern:options:error:
initWithProtocolVersion:buildVersion:deviceProductVersion:deviceProductType:deviceCategory:
initWithQueue:
initWithQueue:delegate:
initWithQueue:error:
initWithQueue:instanceContext:
initWithQueue:qosClass:asynchronous:
initWithQueue:request:options:
initWithQueue:speechController:audioSessionController:audioPlaybackService:experimentContext:
initWithRMSScore:lastSampleCount:
initWithRecordContext:deviceId:shouldUseRemoteRecorder:streamHandleId:
initWithRecordDeviceInfo:playbackRoute:playbackDeviceTypeList:
initWithRecordType:deviceId:
initWithRecordingDuration:audioSamplesPerRemoteVAD:audioSampleRate:
initWithRequestMHUUID:
initWithRequestMHUUID:turnIdentifier:
initWithRequestSource:
initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:
initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:remoteDeviceUIDString:
initWithSampleRate:
initWithSampleRate:withNumberOfChannels:
initWithSamplingRate:asset:
initWithServiceName:
initWithServicePort:
initWithSessionUUID:turnIdentifier:
initWithSharedSiriId:languageCode:productCategory:version:sharedHomeId:userName:
initWithSignalType:timestamp:
initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:
initWithSpeechRecordingMode:clientConfiguration:experimentContext:
initWithStartSample:endSample:confidence:azimuth:estimatedAzimuth:
initWithStopRecordingReason:expectedStopHostTime:trailingSilenceDurationAtEndpoint:
initWithStoredInformationAndAsset:
initWithStreamHandleId:
initWithStreamHandleId:withInputRecordingNumberOfChannels:
initWithStreamID:atStartHostTime:
initWithStreamID:settings:bufferDuration:
initWithSuiteName:
initWithTargetQueue:
initWithTaskDeliverer:
initWithTimeout:
initWithTimeoutInterval:onQueue:timeoutHandler:
initWithToken:sampleRate:numChannels:
initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:serverFeatureLatencyDistribution:additionalMetrics:trailingSilenceDurationAtEndpoint:
initWithType:
initWithType:deviceId:activationInfo:hosttime:
initWithType:deviceId:activationInfo:vadScore:hosttime:
initWithType:fileHandle:priority:
initWithType:pathGenerator:priority:
initWithURL:
initWithURL:inputFormat:outputFormat:
initWithUTF8String:
initWithUUIDString:
initWithUnsignedLongLong:
initWithVoiceRetrainingContext:error:
initWithVoiceTriggerAssetDownloadMonitor:languageCodeUpdateMonitor:firstUnlockMonitor:trialAssetDownloadMonitor:assetManager:trialAssetManager:
initWithVolumeEstimate:debugLogFile:
initWithWindowStartTime:
initWithWordCount:trailingSilenceDuration:endOfSentenceLikelihood:pauseCounts:silencePosterior:clientSilenceFramesCountMs:clientSilenceProbability:silencePosteriorNF:serverFeaturesLatency:
initWithWordCount:trailingSilenceDuration:endOfSentenceLikelihood:pauseCounts:silencePosterior:clientSilenceFramesCountMs:clientSilenceProbability:silencePosteriorNF:serverFeaturesLatency:eagerResultEndTime:
initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:
initWithWordCount:trailingSilenceFrames:endOfSilenceLikelihood:pauseCounts:silencePosterior:taskName:
initWithXPCObject:
initWithZeroWindowSize:approxAbsSpeechThreshold:numHostTicksPerAudioSample:
initialState
initialize
initializeAlarmState
initializeMediaPlayingState
initializeRecordSessionWithRecordContext:
initializeTimerState
injectAudio:
injectAudio:toDeviceWithUUID:completion:
injectAudio:toDeviceWithUUID:withNumChannels:completion:
injectAudio:toDeviceWithUUID:withScaleFactor:completion:
injectAudio:toDeviceWithUUID:withScaleFactor:withNumChannels:completion:
injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:
injectAudio:withScaleFactor:playbackStarted:completion:
injectionAudioFileList
injectionStartNotifyBlocks
inputRecordingBufferDuration
inputRecordingBytesPerFrame
inputRecordingBytesPerPacket
inputRecordingDuration
inputRecordingDurationInSecs
inputRecordingDurationInSecsExtended
inputRecordingFramesPerPacket
inputRecordingIsFloat
inputRecordingNumberOfChannels
inputRecordingSampleBitDepth
inputRecordingSampleByteDepth
inputRecordingSampleRate
inputRecordingSampleRateNarrowBand
inputs
installedAssetForCurrentLanguageOfType:
installedAssetForCurrentLanguageOfType:completion:
installedAssetOfType:language:
installedAssetOfType:language:completion:
installedAssetOfType:withLanguage:
installedAssetOfType:withLanguage:completion:
installedVoiceTriggerAssetForLanguageCode:completion:
instrumentSiriCue:
instrumentSiriCueForAlertType:
intValue
integerValue
interactionID
interfaceProductID
interfaceVendorID
interfaceWithProtocol:
internalUserClassification
interspeechWaitTime
invalidate
invalidateXPCConnection
invocationFeedbackExperiment
invoke
invokeWithSignal:
invokeWithValue:
isASRFeatureFromServer
isAdBlockerAudioLoggingEnabled
isAdaptiveSiriVolumePermanentOffsetEnabled
isAdaptiveSiriVolumeTemporaryIntentValid
isAlarmPlaying
isAlertBehaviorOverridedBeep
isAnalyzeMode
isAnchorTimeBuffered
isAsrOnDevice
isAttachingBluetoothSession
isAttending
isAttendingForDictation
isAttentiveSiriAudioLoggingEnabled
isAttentiveSiriEnabled
isAudioRecordTypeSupportedByRemora
isAudioSessionActivated
isAvailable
isBluetooth
isBluetoothVehicleOutput
isBuiltInVoiceTriggered
isBuiltinSpeakerMuted
isBultInVoiceTriggerEvent:
isCSAssetInstalled
isClamshellClosed
isConfident
isConnected
isDarwinOS
isDarwinVoiceTriggered
isDefaultInputBuiltInMic
isDefaultOutputBultInSpeaker
isDeviceInCarDNDMode
isDeviceRoleStereo
isDictation
isDictationVoiceTriggerEnabled
isDownloading
isDucking
isDuckingSupportedOnCurrentRouteWithStreamHandleID:error:
isDuckingSupportedOnPickedRouteForStream:error:
isEarlyDetect
isEarpieceActiveNoiseCancelationEnabled
isEnabled
isEndAlertInfo
isEndpointAssetBypassTrialEnabled
isEndpointAssetOverridingEnabled
isEqual:
isEqualAsset:
isEqualToNumber:
isEqualToString:
isFeatureGroupOneEnabled
isFingerprintOnly
isForwarding
isHSVoiceTrigger:
isHeadlessDeviceDataCollectionModeEnabled
isHeadphoneDeviceWithRecordRoute:playbackRoute:
isHearstVoiceTriggered
isHomePressed
isHybridUODEnabled
isIOSDeviceSupportingBargeIn
isInternalWithoutProfile
isJarvisVoiceTriggered
isKindOfClass:
isLatestCompareTo:
isListenPollingStarting
isListening
isLocalVoiceTriggerAvailable
isMediaPlaying
isMediaPlayingNow
isMemberOfClass:
isMitigationAssetOverridingEnabled
isMonitoring
isNarrowBand
isNviEnabled
isOnPhoneCall
isOpportuneSpeakListening
isOpus
isOtherNonEligibleAppRecording
isP2PTransferEnabled
isPHSSupported
isPhraseSpotterBypassed
isPlaying
isPluginDevice
isPremium
isPresent
isPrimaryVoiceTriggerDeviceWithUUID:
isRTSTriggered
isRaiseToSpeakBypassed
isRecordContextAutoPrompt:
isRecordContextBuiltInVoiceTrigger:
isRecordContextDarwinVoiceTrigger:
isRecordContextHearstVoiceTrigger:
isRecordContextJarvisButtonPress:
isRecordContextJarvisVoiceTrigger:
isRecordContextRaiseToSpeak:
isRecordContextRemoraVoiceTrigger:
isRecordContextSpeakerIdTrainingTrigger:
isRecordContextVoiceTrigger:
isRecording
isRecordingWithRecordDeviceIndicator:
isRemoraVoiceTriggerEvent:
isRemoraVoiceTriggered
isRemoteDarwinConnectedWithUUID:
isRemoteDarwinWithDeviceId:
isRemoteDevice
isRemoteDeviceDarwin
isRemoteDeviceGibraltar
isRemoteVADAvailableStream
isRequestDuringActiveCall
isRequestTimeout
isRestricted
isScreenLocked
isSecondChanceRun
isSecondPassRunning
isSecureOfflineOnly
isSelfTriggerEnabledAccessory
isSessionCurrentlyActivated
isSiri
isSiriClientConsideredAsRecord
isSiriClientListening
isSiriRestrictedOnLockScreen
isSmartSiriVolumeAvailable
isSoundPlaying
isSpeakerMuted
isSpeakerRecognitionAvailable
isSpeaking
isSpokenNotification
isSpringboardStarted
isStarkTriggered
isStreaming
isTVRemote
isTemporaryPairedNotInContacts
isTest
isTimerPlaying
isTriggerHandheld
isTriggeredFromHearst
isUpsamplingSourceAudio
isUserActive
isValidRecordContext:
isVibrationDisabled
isVoiceOverTouchEnabled
isVoiceTriggerAssetOverridingEnabled
isVoiceTriggerInfoAvailableLocally:
isVoiceTriggered
isWakeGestureAvailable
isWatchRTSTriggered
isWeakStream
itemData
iterateBitset:block:
jarvisRTModelLocaleMap
jarvisVoiceTriggerEvent:activationInfo:hostTime:
kSSVCAUserIntentPermanentOffsetFactorDelta
kSSVCAUserIntentPermanentOffsetFactorLowerBound
kSSVCAUserIntentPermanentOffsetFactorUpperBound
kSSVCAUserIntentVolumeDecreaseFactor
kSSVCAUserIntentVolumeIncreaseFactor
kSSVCA_DEVICE_DEFAULT_MAX_TTS_VOLUME
kSSVCA_DEVICE_DEFAULT_MIN_TTS_VOLUME
kSSVCA_DEVICE_SIMPLE_MAX_TTS_VOLUME
kSSVCA_DEVICE_SIMPLE_MIN_TTS_VOLUME
keyboardConvoLanguagePriors
keyboardGlobalLanguagePriors
keysOfEntriesPassingTest:
keywordAnalyzerNDEAPI
keywordAnalyzerNDEAPI:hasResultAvailable:forChannel:
keywordDetectorNDAPIConfigFilePath
keywordDetectorQuasarConfigFilePath
languageCode
languageCodeDarwin
languageCodeUpdateMonitor
languageDetectionUserContext
languageDetector
languageDetector:confidences:
languageDetector:result:
languageDetectorAssetHash
languageDetectorAssetMonitor:didReceiveNewAssetWithSupportLocale:
languageDetectorConfigFile
languageDetectorDelegate
languageDetectorDidCompleteProcessing:loggingInfo:
languageDetectorDidDetectLanguageWithConfidence:confidence:isConfident:
languageDetectorRequestContext
languageDetectorSetMostRecentRecognitionLanguage:
languageDetectorUserContext
lastAggTimeFalseWakeUp
lastAudioChunkHostTime
lastAudioRecorderContext
lastCommunicatedPeer
lastDetectedVoiceTriggerBeginSampleCount
lastEndOfVoiceActivityTime
lastEndpointPosterior
lastFakeModelUsedHash
lastForwardedSampleCount
lastHash
lastKnowServerFeaturesLatency
lastKnownOSDFeatures
lastKnownServerEPFeatures
lastObject
lastPathComponent
lastReportedEndpointTimeMs
lastServerFeatureTimestamp
lastSilencePosterior
lastStartOfVoiceActivityTime
latestContext
latestDetectedLanguages
latestHearstRTModelForLocale:
latestPluginStreamId
latestVolume
latestVolumeTime
latticeRnnMitigatorScore
latticeRnnMitigatorThreshold
launchSiriDebugAppWithMessage:
leave
length
lengthOfBytesUsingEncoding:
limitedAudioLoggingEnabled
linkItemAtURL:toURL:error:
listMockRemoteDeviecesWithCompletion:
listenPollingTimer
listenPollingTimerCount
listener
listener:shouldAcceptNewConnection:
listeningEnabledCompletionBlock:
localDevice
localDevice:event:result:
localDeviceProtocolInfo
locale
localeMapWithName:
localeWithLocaleIdentifier:
localizedDescription
logAOPFirstPassTriggerWakeupLatency:
logAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:
logData:
logEventUUID
logEventWithType:context:
logEventWithType:context:contextNoCopy:
logEventWithType:contextProvider:
logEventWithType:contextResolver:
logEventWithType:machAbsoluteTime:context:
logEventWithType:machAbsoluteTime:context:contextNoCopy:
logFalseWakeUp:withPhrase:
logFeaturesWithEvent:locale:
logHybridEndpointFeaturesWithEvent:locale:
logInstrumentation:machAbsoluteTime:turnIdentifier:
logLanguageMismatchMetricWithJarvisSelectedLocale:jarvisTriggerMode:
logMHASRAudioConfigureStartedWithMHUUID:withAudioCodecString:withAudioSkippedNumSamples:
logMHASRAudioConfigureStartedWithMHUUID:withAudioCodecString:withAudioSkippedTimeInNs:
logMHAssistantDaemonAudioBluetoothInfoWithMHUUID:withWirelessSplitterSessionState:withAudioDeviceCategory:
logMHAssistantDaemonAudioConfigureContextWithMHUUID:withConfigureStarted:
logMHAssistantDaemonAudioFetchRouteContextWithMHUUID:withFetchRouteContextStarted:
logMHAssistantDaemonAudioLateBufferDetectedWithMHUUID:withBufferReceiptTimeInNs:
logMHAssistantDaemonAudioPrepareContextWithMHUUID:withPrepareStarted:
logMHAssistantDaemonAudioPrewarmContextWithMHUUID:withPrewarmStarted:
logMHAssistantDaemonAudioRecordingContextWithMHUUID:withAudioRecordingStarted:withAudioInputRoute:withAudioSource:withAudioInterfaceVendorId:withAudioInterfaceProductId:
logMHAssistantDaemonAudioRecordingFailedWithMHUUID:withReason:vendorId:productId:
logMHAssistantDaemonAudioRecordingFirstBufferWithMHUUID:withStartEvent:withFirstBufferStartTimeOffsetNs:withFirstBufferReceiptTimeOffsetNs:
logMHAssistantDaemonAudioRecordingInterruptionContextWithMHUUID:withStartEvent:withLinkID:withAvAudioSessionInterruptorName:withAVAudioSessionInterrupterType:
logMHAssistantDaemonAudioRecordingInterruptionStartedTier1WithMHUUID:withLinkID:withActiveSessionDisplayIDs:
logMHAssistantDaemonAudioRecordingLastBufferWithMHUUID:withStartEvent:withLastBufferStartTimeOffsetNs:withLastBufferReceiptTimeOffsetNs:
logMHAssistantDaemonAudioRecordingMissedBufferDetectedWithMHUUID:
logMHAssistantDaemonAudioStartRecordingContextWithMHUUID:withStartRecordingContext:withFanInfoArray:withActiveSessionDisplayIDs:
logMHAssistantDaemonAudioStopRecordingContextWithMHUUID:withStopRecordingStarted:withADStopRecordingEvent:
logSecondPassResult:eventInfo:triggerAPWakeUp:
logSiriLaunchCompletedWithVoiceTriggerEventInfo:
logSiriLaunchStartedWithVoiceTriggerEventInfo:
logTriggerLengthSampleCountStatistics:withFirstPassDeterministicTriggerLengthSampleCount:
logTwoShotDetectedWithMHUUID:
logTwoShotEndEventWithSuppresedAlert:withTimedOut:withMHUUID:
logTwoShotStartEventWithPromptType:withMHUUID:
loggingDict
loggingQueue
longLongValue
lpcmASBD
lpcmBitDepth
lpcmFloatASBD
lpcmInt16ASBD
lpcmInt16NarrowBandASBD
lpcmInterleavedASBD
lpcmInterleavedWithRemoteVADASBD
lpcmIsFloat
lpcmMonoInterleavedWithRemoteVADASBD
lpcmMonoNonInterleavedWithRemoteVADASBD
lpcmNarrowBandASBD
lpcmNonInterleavedASBD
lpcmNonInterleavedWithRemoteVADASBD
mapTableWithKeyOptions:valueOptions:
maxAllowedEnrollmentUtterances
maxAllowedTrailingSamplesAfterSchedulingStop
maxFingerprintBufferSize
mediaPlaybackVolume
mediaPlayingMonitor
mediaPlayingObserverQueue
mediaPlayingState
mediaPlayingStateWithCompletion:
mediaserverdLaunchedEvent:
memoryPressureObserver:didChangeFromCondition:toCondition:
mhId
mhLogDirectory
mhSource
micUsageReporter
minimumDurationForEndpointer
mitigationConfigFileForCategory:
mitigatonConfigFile
modelData
modelHash
modelLocale
modelName
monoChannelLpcmASBD
mostSampledAzimuth
moveItemAtPath:toPath:error:
multiUserConfidentScoreThreshold
multiUserDeltaScoreThreshold
multiUserHighScoreThreshold
multiUserLowScoreThreshold
multilingualKeyboardLanguages
musicVolume
musicVolumeWithCompletion:
mutableBytes
mutableCopy
mutatedCopyWithMutator:
myriadHashFilePath
name
narrowBandOpusConverter
needsBoost12dB
needsToUpdateModel
needsUpdateToPostVoiceMode
newVoiceProfileWithLocale:withAppDomain:
nextObject
nldaConfigFile
nldaConfigFileForCategory:
noAlertOption
notifyActivationEvent:completion:
notifyActivationEvent:deviceId:activationInfo:completion:
notifyActivationEventSynchronously:completion:
notifyBluetoothDeviceVoiceTrigger:deviceId:completion:
notifyBluetoothDeviceVoiceTriggerPrewarm:deviceId:completion:
notifyBuiltInVoiceTrigger:myriadPHash:completion:
notifyBuiltInVoiceTriggerPrewarm:completion:
notifyCallbackWithOption:
notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:
notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:
notifyClientsWithBlock:
notifyDaemonStateChanged:
notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:
notifyDarwinVoiceTriggerPrewarmWithCompletion:
notifyDidStartStreamWithContext:audioProviderUUID:successfully:option:
notifyDidStartStreamWithContext:successfully:option:
notifyDidStartStreamWithContext:successfully:option:withEventUUID:
notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAccessory:
notifyDidStopStream:
notifyDidStopStream:reason:withEventUUID:forAccessory:
notifyDidStopStream:withEventUUID:
notifyFetchedSiriClientAudioStream:successfully:
notifyHashlessTrigger:
notifyImplicitTrainingUtteranceAvailable:forVoiceProfileId:withRecordDeviceInfo:withRecordCtxt:withVoiceTriggerCtxt:withOtherCtxt:assetToUse:withCompletion:
notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:
notifyInEarMyriadTrigger
notifyNewVoiceTriggerAssetMetaDataUpdated
notifyObserver:didChangeStateFrom:to:
notifyObserver:didReceiveNotificationWithToken:
notifyObservers:endpointId:
notifyPreparedSiriClientAudioStream:successfully:
notifyProviderContextChanged
notifyReleaseAudioSession
notifyRemoraVoiceTrigger:myriadPHash:deviceId:completion:
notifyRemoraVoiceTriggerPrewarm:deviceId:completion:
notifyServiceConnectionLost
notifySiriLanguageCodeChanged:
notifySiriSessionStateChange:
notifySiriSessionStateTTSOngoing:
notifyToken
notifyTrailingSilenceDurationAtEndpoint:
notifyVoiceTriggerAssetChanged
notifyVoiceTriggerDisabledWithDeviceUUID:
notifyVoiceTriggerEnabledWithDeviceUUID:
notifyVoiceTriggeredSiriSessionCancelled
notifyVoiceTriggeredSiriSessionCancelledWithXpcClient:
notifyWakeKeywordSpokenBluetoothDevice:deviceId:
notifyWakeKeywordSpokenCarPlay:deviceId:
notifyWakeKeywordSpokenInBuiltInMic:
notifyWakeKeywordSpokenRemora:deviceId:
notifyWillStartStreamWithContext:audioProviderUUID:option:
notifyWillStartStreamWithContext:option:
notifyWillStartStreamWithContext:option:forAccessory:
notifyWillStopStream:
notifyWillStopStream:reason:
notifyWillStopStream:reason:forAccessory:
nowPlayingObserver:playbackStateDidChangeFrom:to:lastPlayingDate:
nowPlayingObserver:proxyGroupPlayerStateDidChangeFrom:to:
nowPlayingObserverNowPlayingInfoDidChange:
numAudioSampleForwarded
numBytesPerSample
numChannels
numFalseWakeUp
numInputChannels
numLatestLanguages
numLeadingFrames
numOfAVVCRecordingClients
numOfAudioPackets
numOfValidTrailingPackets
numSamples
numSamplesProcessed
numSamplesProcessedBeforeAnchorTime
numTrailingSamplesAfterSchedulingStop
numberOfChannels
numberOfLoops
numberOfTotalFramesETFT
numberOfVoicingFrames
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithInteger:
numberWithLongLong:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
nviCtx
nviDataSourceTypeForStr:
nviDirectionalityEndingChannelId
nviDirectionalityLpcmInterleavedASBD
nviDirectionalityLpcmNonInterleavedASBD
nviDirectionalityStartingChannelId
nviLogsRootDir
nviSignalTypeForStr:
objCType
objectAtIndex:
objectAtIndexedSubscript:
objectEnumerator
objectForKey:
objectForKeyedSubscript:
observeValueForKeyPath:ofObject:change:context:
observers
onboardType
open
opportuneSpeakBehaviorMonitor:didStartStreamWithContext:audioProviderUUID:successfully:option:
opportuneSpeakBehaviorMonitor:didStopStream:
opportuneSpeakBehaviorMonitor:willStartStreamWithContext:audioProviderUUID:option:
opportuneSpeakBehaviorMonitor:willStopStream:
opportuneSpeakEventMonitor:didStreamStateChanged:
opportuneSpeakListener:didStopUnexpectly:
opportuneSpeakListener:hasRemoteVADAvailable:
opportuneSpeakListener:hasVADAvailable:
opportuneSpeakListener:hasVADAvailable:withHostTime:
opportuneSpeakListenerBypassEnabled
opportuneSpeakListeningType
opportuneSpeakListnerTestService
opportuneSpeakingFileLoggingIsEnabled
opusASBD
opusConverter
opusNarrowBandASBD
osdAnalyzer
osdAnalyzer:didDetectEndOfSpeechAt:
osdAnalyzer:didDetectStartOfSpeechAt:
osdAnalyzer:didUpdateOSDFeatures:
osdFeaturesAtEndpoint
osdQueue
outputReferenceChannel
outputStreamToFileAtPath:append:
overridePath
overrideStartingAlertBeepSoundID
pHash:length:
pNonInterleavedABL
packetDescriptionCount
packetDescriptions
pairedDeviceAddresses
path
pathExtension
pause
pauseCounts
payloadData
peakPower
peakPowerForChannel:
peakPowerForOutputReference
pendingActivationEvent
pendingAudioSessionActivationCompletion
pendingAudioSessionActivationReason
pendingAudioSessionActivationToken
pendingBuiltInVoiceTriggerCompletionBlk
pendingBuiltInVoiceTriggerDetectedTime
pendingBuiltInVoiceTriggerResult
pendingCompletion
pendingRecordingStopUUID
pendingRemoraVoiceTriggerCompletionBlk
pendingRemoraVoiceTriggerDetectedTime
pendingRemoraVoiceTriggerDeviceId
pendingSecondPassTriggerWasClearedForClient:deviceId:
pendingStartCompletions
pendingStopCompletions
performBlockAfterAlerts:timeout:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performTransitionForEvent:
permanentOffsetFactor
permanentOffsetIsEnabled
persistentDomainForName:
phoneCallState
phoneCallStateMonitor
phraseSpotterEnabled
pickTopScoringProfileIdFromScores:
pickableRoutesDidChange:
pickedRoute
pingpong:
pingpong:completion:
platformSupportsImplicitUttAddition
play
playAlertSoundForType:
playAlertSoundForType:overrideMode:
playAlertSoundForType:recordDevideIndicator:
playRecordStartingAlertAndResetEndpointer
playRecordStartingAlertAndResetEndpointerFromStream:
playRecordingStartAlert
playbackDeviceTypeList
playbackRoute
playerItemDidPlayToEndTime:
playerItemFailedToPlayToEndTime:
playingApps
portName
postBuildInstallService
powerLogSiriConfigWithVoiceTriggerEnabled:withLanguage:withModelVersion:
powerLoggingCurrentAssetConfigVersion
powerLoggingCurrentLanguage
powerMeter
powerWithNumFalseWakeup:withDuration:withPhraseDict:
predicateWithBlock:
preferredExternalRouteDidChange:
preheatLocalSpeechRecognitionWithLanguage:source:
preheatRecognizerWithOption:
preheatWithOption:
prepareAudioProviderWithContext:clientType:error:
prepareAudioStream:request:completion:
prepareAudioStreamRecord:recordDeviceIndicator:error:
prepareAudioStreamSync:request:error:
prepareAudioStreamSyncWithRequest:error:
prepareAudioStreamWithRequest:completion:
prepareForMode:withOptions:
prepareLogging
prepareRecordForStream:error:
prepareRecordWithSettings:error:
prepareRecording:
prepareSoundLevelBufferFromSamples:soundType:firedVoiceTriggerEvent:triggerStartTimeSampleOffset:triggerEndTimeSampleOffset:
prepareSpeechCaptureWithOptions:error:
prepareToPlay
prepareWithOptions:audioSession:completion:
presentationMode
prevAudioProcessedMs
previousMessageLanguage
prewarmAudioSession
prewarmAudioSessionWithError:
prewarmAudioSessionWithStreamHandleId:error:
prewarmDeviceWithIdentifier:
prewarmRequest:completion:
primaryInputDevice
primaryInputDeviceUUIDWithCompletion:
primaryStream
processASRFeatures:fromServer:
processAudioBytes:withNumberOfSamples:
processAudioChunk:
processAudioChunk:activeChannel:
processAudioSamplesAsynchronously:
processBuffer:atTime:
processBuffer:atTime:arrivalTimestampToAudioRecorder:
processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:
processFloatBuffer:stride:inFrameToProcess:
processIdentifier
processInfo
processOSDFeatures:withFrameDurationMs:
processRCWithId:duration:lrnnScore:lrnnThreshold:taskId:forceAccept:completionHandler:
processRemoteCommandWithPayload:fromPeer:withReply:
processSampleCount:hostTime:
processServerEndpointFeatures:
processServerFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:
processShortBuffer:stride:inFrameToProcess:
processTaskString:
processedAudioDurMs
processedAudioDuration
processedAudioDurationInMilliseconds
processedAudioInSeconds
processedAudioMs
productID
productId
productIdentifier
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileID
profileId
progCheckerConfigFile
progCheckerShadowMode
programmableAudioInjectionEnabled
propertyDictForDarwin
providerDelegate
provisionedVoiceProfilesForLocale:
pruningExplicitUttThresholdPSR
pruningExplicitUttThresholdSAT
pruningNumRetentionUtterance
pruningThresholdPSR
pruningThresholdSAT
psrCombinationWeight
purgeSync
queryMetaData:
queryMetaDataSync
queryParams
queue
raiseToSpeakDetected:
rangeOfFirstMatchInString:options:range:
rawMicChannelsDataWithNumSamplesPerChannel:
rcHandlingClient
readAudioChunksFrom:block:
readJsonDictionaryAt:
readSamplesFromChannelIdx:
receiveOpportuneSpeakListenerStart
receiveOpportuneSpeakListenerStop
receivers
recordContext
recordContextForSpeechEvent:
recordContextString:
recordDeviceIdentifier
recordDeviceIndicator
recordDeviceInfo
recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:
recordQueue
recordRecognitionLanguage:
recordRoute
recordRouteWithRecordDeviceIndicator:
recordSettings
recordSettingsWithOptions:appendingSettings:
recordSettingsWithStreamHandleId:
recordingAlertPolicy
recordingDidStop
recordingInfoForPreheatWithEvent:
recordingSampleRateWithStreamHandleId:
recordingStoppedForReason:
recordingTransaction
recordingWillStartGroup
registerAssetDelegate:assetType:
registerDatapackUpdate
registerMultilingualUaapApp:withAssetFiles:completion:
registerObserver:
registerSignalProviderDelegate:forSignalTypes:
registerSignalProviderDelegateForAllSignalTypes:
registerSiriClientProxy:
registerSpeechController:
registerUaapApp:forLocale:withAssetFiles:completion:
registerUaapApp:withAssetFiles:completion:
registerXPCActivities
relativePath
releaseAudioSession
releaseAudioSession:
relinquishAudioSessionAssertionsWithContext:
relinquishAudioSessionAssertionsWithError:
relinquishWithContext:options:
relinquishWithError:options:
reload
remoraRTModelLocaleMap
remoraRTModelWithMajorVersion:minorVersion:locale:
remoraSecondPassProgressProvider
remoraVoiceTriggerEvent:activationInfo:hostTime:
remoraVoiceTriggerEvent:hostTime:
remoteAccessoryStreamIdSet
remoteDeviceProductIdentifier
remoteDeviceUIDString
remoteGradingDataDirectory
remoteMicVADEvent:vadScore:hostTime:
remoteMicVoiceTriggerEvent:activationInfo:hostTime:
remoteObjectProxy
remoteObjectProxyWithErrorHandler:
remoteP2pLogDirectory
remoteProductIdentifier
remoteRecordConnectionDisconnected:
remoteRecordDidStartRecordingWithStreamHandleId:error:
remoteRecordDidStopRecordingWithWithStreamHandleId:error:
remoteRecordLPCMBufferAvailable:streamHandleId:
remoteRecordTwoShotDetectedAtTime:
remoteSvcProxy
remoteVAD
remoteVADAlignBuffer
remoteVADAlignCount
remoteVADDuration
remoteVADSPGRatio
remoteVADSampleCount
remoteVADSubChunkFrom:numSamples:numAudioSamplesPerRemoteVAD:
remoteVoiceActivityAvailable
remoteVoiceActivityVAD
remoteVoiceActivityVADBuffer
removeAllListeners
removeAllObjects
removeFromRunLoop:forMode:
removeItemAtPath:error:
removeItemAtURL:error:
removeLogFilesOlderThanNDays:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObserver:forAssetType:
removeObserver:name:object:
removeOpportunisticAudioLoggingOlderThanNDays:
removeQueue:
removeRemoteP2PLogFilesOlderThanNDays:
replaceBytesInRange:withBytes:
replaceBytesInRange:withBytes:length:
replaceCurrentItemWithPlayerItem:
replaceMatchesInString:options:range:withTemplate:
report
reportDigitalZerosWithAudioZeroRun:
reportEndpointDelayIfNeed
reportIssueForType:subType:context:processIdentifier:walkboutStatus:
reportMetricsForSiriRequestWithUUID:
reportServerEndpointWithMhId:
reportsDynamicActivityAttribute:bundleId:
reportsDynamicActivityAttributeAsync:bundleId:
reportsDynamicActivityAttributeSync:bundleId:
reqSrc
reqStartAudioSampleId
reqStartMachAbsTime
requestForLpcmRecordSettingsWithContext:
requestForOpusRecordSettingsWithContext:
requestForSpeexRecordSettingsWithContext:
requestHistoricalAudio
requestHistoricalAudioDataSampleCount
requestHistoricalAudioDataWithHostTime
requestMHUUID
requestSupportedWithSamplingRate:
requestUpdatedSATAudio
requestUpdatedSATAudio:
requestedStopRecordingOptions
requireSingleChannelLookup
requiresBorealisConsumerCheck
requiresHistoricalBuffer
reset
resetAudioSession
resetDuckSettings
resetForNewRequest
resetForNewRequest:
resetForNewRequestWithSampleRate:recordContext:
resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:
resetForVoiceTriggerTwoShotWithSampleRate:
resetWithSampleRate:
resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:
resignCurrent
resourcePath
respondsToSelector:
resultId
resume
resumeConnection
retain
retainCount
retrieveSessionWithID:
returnTypes:
rmsSamplesForEntireAudio
rootLogDir
rootQueueWithFixedPriority:
route
rtModelLocaleMapWithModelType:
rtModelWithAccessoryRTModelType:majorVersion:minorVersion:locale:
rtsTriggerInfo
runAudioInjectionOnly:completion:
runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:
runNovDetectorWithConfig:configRoot:withUrl:completion:
runODLDModelWithConfig:locale:inputText:completion:
runOSDAnalyzerWithConfig:withUrl:completion:
runVTSecondPassModelWithConfig:locale:withUrl:completion:
runningSampleCount
sacInfoMonitor
sampleCount
sampleCountFromHostTime:
sampleCountFromHostTime:anchorHostTime:anchorSampleCount:sampleRate:
sampleRate
samplesFed
samplingRate
satImplicitProfileDeltaThreshold
satImplicitProfileThreshold
satImplicitTrainingEnabled
satScoreThreshold
satScoreThresholdForPhId:
satVTImplicitThreshold
saveAudioChunck:toURL:
saveRecordingBufferFrom:to:toURL:
saveRecordingBufferToEndFrom:toURL:
saveSamplesSeenInReset
scaleFactor
scheduleInRunLoop:forMode:
scheduledFutureSample
screenIDs
secondChanceHotTillMachTime
secondPassAssetLoadStartTime
secondPassAssetQueryCompleteTime
secondPassAssetQueryStartTime
secondPassAudioStreamReadyTime
secondPassAudioStreamStartTime
secondPassCheckerModelKeywordDetectionEndTime
secondPassCheckerModelKeywordDetectionStartTime
secondPassDidStartForClient:deviceId:withFirstPassEstimate:
secondPassDidStopForClient:deviceId:
secondPassFirstAudioPacketReceptionTime
secondPassLastAudioPacketReceptionTime
secondsForHostTime:
secondsToHostTime:
secondsToNs:
seekToTime:toleranceBefore:toleranceAfter:
seekToTime:toleranceBefore:toleranceAfter:completionHandler:
selectFallbackModelForLocale:downloadedModels:preinstalledModels:rtLocaleMap:
self
selfTriggerDetector:didDetectSelfTrigger:
sendAcousticGradingDataToNearbyPeer
sendCoreSpeechGradingDataToNearbyPeer
sendGeckoSpeechLogsToCompanion
sendMessageAndReplySync:error:
sendMessageAsync:completion:
sendMessageWithPayload:toPeer:withReply:
sendVTNearMissGradingDataToCompanion
sendVoiceProfileUpdatedMessageToNearbyPeerForLocale:
serverAudioSessionActivationDelay
serverAudioSessionActivationDelayAboveMediaPlaybackVolumeThreshold
serverFeatureLatencies
serverFeatureLatencyDistribution
serverFeaturesLatency
serverFeaturesQueue
serverFeaturesWarmupLatency
serverLoggingWriter
serverMediaPlaybackVolumeThresholdForAudioSessionActivationDelay
serverState
sessionEventDelegate
sessionForContext:error:
sessionInfoProvider
sessionInfoQueue
sessionUUID
setASBD:
setASVUserIntent:
setAVVCAlertBehavior:
setAccessoryVoiceTriggerMetaDataByDeviceId:
setActionAtItemEnd:
setActivateEndTime:
setActivateStartTime:
setActivationAssertions:
setActivationExpirationTime:
setActivationMetadata:
setActivationMode:
setActivationSource:
setActive:error:
setActive:withOptions:error:
setActiveChannel:
setActiveEndpointer:
setAdCompanionServiceProvider:
setAdditionalMetrics:
setAddress:
setAdpAssertion:
setAlarmMonitor:
setAlertDelegate:
setAlertPlaybackFinishTimeoutToken:
setAlertPlaybackFinishWaitingCompletions:
setAlertPlaybackFinishWaitingStreams:
setAlertProvider:
setAlertSoundFromURL:forType:
setAlertSoundFromURL:forType:force:
setAlignBufferQueue:
setAllowAdBlockerAssetDownloading:
setAllowEndpointAssetDownloading:
setAllowLanguageDetectorAssetDownloading:
setAllowMixableAudioWhileRecording:error:
setAllowSpeakerRecognitionAssetDownloading:
setAllowVoiceTriggerAccessoryAssetDownloading:
setAllowVoiceTriggerAssetDownloading:
setAllowsCellularAccess:
setAnchorMachAbsTime:
setAnnounceCallsEnabled:
setAnnounceCallsEnabled:withStreamHandleID:
setAnnounceCallsEnabledForStream:enable:
setApQueue:
setAsrDatapackInstallationStatus:
setAssertionMonitor:
setAsset:
setAssetDownloadingOption:
setAssetManager:
setAssetQueryQueue:
setAssetsMigrationQueue:
setAssetsProvider:
setAttSiriSvcConn:
setAttendingState:
setAttributes:ofItemAtPath:error:
setAtvRemoteDeviceID:
setAudioAlertDelegate:
setAudioDeviceInfo:
setAudioFeedTimer:
setAudioFileHandle:
setAudioFileType:
setAudioFileWriter:
setAudioInjectionEngines:
setAudioInjectionFilePath:
setAudioInjectionMode:
setAudioInputRoute:
setAudioLoggingBuffer:
setAudioMeterProvider:
setAudioMetricProvider:
setAudioPacketDeliveryCount:
setAudioPacketWatchdog:
setAudioPreprocessor:
setAudioProviderDelegate:
setAudioProviderUUID:
setAudioProviders:
setAudioRecordContext:
setAudioRecorder:
setAudioServerCrashEventDelegate:
setAudioSession:
setAudioSessionController:
setAudioSessionDelegate:
setAudioSessionEventDelegate:
setAudioSessionInfoObservers:
setAudioSessionProvider:
setAudioSessionProvidingDelegate:
setAudioSessionSetActiveEndHostTime:
setAudioSessionState:
setAudioStreamHandleId:
setAudioStreamProvider:
setAudioStreamProvidingDelegate:
setAudioStreamType:
setAudioSystemRecovering:
setAudioTapProvider:
setAudioTimeConverter:
setAutomaticEndpointingSuspensionEndTime:
setAvgPower:
setAzDistribution:
setAzimuth:
setBeepCanceller:
setBestEarlyDetectSample:
setBestEndDetectSample:
setBestStartDetectSample:
setBluetoothSession:
setBluetoothSessionSetupGroup:
setBufferDuration:
setBuiltInDevice:
setBuiltInSeconPassProgressProvider:
setBuiltInSpeakerState:
setBundleIdFromDictation:
setBundleTvRemote:
setBypassSamples:
setCachedAvgPower:
setCachedEndpointAssets:
setCachedPeakPower:
setCaesuraSPG:
setCallback:
setCanPerformDelayedStop:
setCanProcessCurrentRequest:
setCanUseLocalCacheServer:
setCircBuffer:
setCircularBuffer:
setCircularBufferStartSampleCount:
setClampedSFLatencyMsForClientLag:
setClasses:forSelector:argumentIndex:ofReply:
setClearLoggingFileTimer:
setClearLoggingFileTimerCount:
setClientConfiguration:
setClientConnections:
setClientController:
setClientLagThresholdMs:
setComponent:
setConfidence:
setConfigFile:
setConnectedDevice:
setConnectedDeviceAddresses:
setConnectedDevices:
setConnection:
setContext:completion:
setContext:streamType:error:
setContextForStream:forStream:error:
setConversationalMessages:
setCrashEventDelegate:
setCsAssetsDictionary:
setCurSpeechFrames:
setCurrActiveDataSourceTypes:
setCurrActiveSigProvTypes:
setCurrentAsset:
setCurrentAttributionKey:andApp:
setCurrentContext:error:
setCurrentContext:streamHandleId:error:
setCurrentDictationLanguage:
setCurrentHEPAsset:
setCurrentKeyboard:
setCurrentMaximumBufferSize:
setCurrentOEPAsset:
setCurrentRecordContext:error:
setCurrentRequestSampleRate:
setCurrentSessionShouldDuckOnBuiltInSpeaker:
setCurrentSpeed:
setCurrentState:
setDataBufferNDEAPI:
setDataBufferPositionNDEAPI:
setDataSrcMap:
setDateFormat:
setDeactivateEndTime:
setDeactivateStartTime:
setDecoderProcessedSampleCountForTV:
setDecodersForTV:
setDeinterleaver:
setDelay:
setDelayInterstitialSounds:level:completion:
setDelegate:
setDelegate:forType:
setDelegates:
setDetectedToken:
setDeviceId:
setDeviceRoleIsStereo:
setDeviceUID:
setDictationLanguagePriors:
setDictationLanguages:
setDidCommunicateEndpoint:
setDidDeliverLastBuffer:
setDidDetectSpeech:
setDidReceiveServerFeatures:
setDidReportEndpointDelay:
setDidSetScaleFactor:
setDidStartDelayInSeconds:
setDidTimestampFirstAudioPacket:
setDisableBoostForDoAP:
setDisableEndpointer:
setDisableLocalSpeechRecognizer:
setDisablePrewarmLocalAsrAtStartRecording:
setDiscretionary:
setDismissalTimestamp:
setDuckAudioXPCClient:
setDuckMixWithOthersForStream:duckOthers:duckToLevelInDB:mixWithOthers:
setDuckOthersForStream:withSettings:error:
setDuckOthersOption:
setDuckOverride:
setDuckToLevelDB:error:
setEARLanguageDetectorSpeechRequestId:
setEffectiveDate:
setElapsedTimeWithNoSpeech:
setEnable:
setEnableAlwaysOnVoiceTrigger:
setEnablePolicy:
setEnabled:
setEncoder:
setEncoderBitRate:
setEndPointNotified:
setEndSample:
setEndpointAnalyzerDelegate:
setEndpointBufferHostTime:
setEndpointId:
setEndpointMode:
setEndpointStyle:
setEndpointThreshold:
setEndpointTimeInMs:
setEndpointerConnection:
setEndpointerDelayedTrigger:
setEndpointerDelegate:
setEndpointerImplDelegate:
setEndpointerModelVersion:
setEndpointerOperationMode:
setEndpointerProxy:
setEndpointerThreshold:
setEndpointerType:
setEosLikelihood:
setEpResult:
setErrorAlertBehavior:
setEstimatedAzimuth:
setEstimatedStartHostTime:
setEventToStateTransitions:
setExportedInterface:
setExportedObject:
setExtraDelayFrequency:
setFFile:
setFakeAssetMonitor:
setFakeAssetRollNotificationRegistrationToken:
setFallbackAudioSessionReleaseProvider:
setFalseWakePhraseDictionary:
setFanId:
setFeaturesAtEndpoint:
setFileLoggingIsEnabled:
setFileOption:
setFingerprintInterval:
setFingerprintWasRecognized
setFingerprintingEnabled:
setFirstAudioPacketTimestamp:
setFirstAudioSampleSensorTimestamp:
setFirstPassMyriadGoodnessScore:
setFirstPktLatency:
setFirstUnlockMonitor:
setFp:
setGlobalLastKeyboardUsed:
setHardwareInterfaceVendorID:
setHasPerformedDelayedStop:
setHasReceivedEarlyDetectNDEAPIResult:
setHasReceivedNDEAPIResult:
setHeadphoneListeningMode:completion:
setHearstSecondPassModelVersion:
setHepAudioOriginInMs:
setHistoricalBufferRequestStreams:
setHomeId:
setHostTimeBuffer:
setHybridClassifier:
setHybridClassifierQueue:
setHybridEndpointer:
setHybridUODEnabled:
setIAmTheAssistant:error:
setImplDelegate:
setInUseServices:
setInitialState:
setInjectionAudioFileList:
setInjectionCompletionNotifyBlocks:
setInjectionEngine:
setInjectionStartNotifyBlocks:
setInputRecordingNumberOfChannels:
setInteractionID:
setInteractionIDforCurrentRequest:
setInterfaceProductID:
setInterfaceVendorID:
setInterruptionHandler:
setInterspeechWaitTime:
setInvalidationHandler:
setIsASRFeatureFromServer:
setIsActiveRequest:
setIsActiveSession:
setIsAdvancedAppleAudioDevice:
setIsAlarmPlaying:
setIsAlarmPlayingOnAccessory:isAlarmPlaying:
setIsAnalyzeMode:
setIsAnchorTimeBuffered:
setIsAsrOnDevice:
setIsAudioSessionActivated:
setIsBlur:
setIsDriving:
setIsEndAlertInfo:
setIsForwarding:
setIsHybridUODEnabled:
setIsListenPollingStarting:
setIsMediaPlaying:
setIsMediaPlayingNow:
setIsMediaPlayingOnAccessory:isMediaPlaying:isInterrupted:interruptedTime:
setIsNarrowBand:
setIsOpportuneSpeakListening:
setIsOpus:
setIsPhraseSpotterBypassed:
setIsRaiseToSpeakBypassed:
setIsRemoteVADAvailableStream:
setIsRequestDuringActiveCall:
setIsRequestFromSpokenNotification:
setIsRequestTimeout:
setIsSecondPassRunning:
setIsSiri:
setIsSiriClientConsideredAsRecord:
setIsSiriClientListening:
setIsSoundPlaying:
setIsSpeakerMuted:
setIsSpeaking:
setIsTemporaryPairedNotInContacts:
setIsTimerPlaying:
setIsTimerPlayingOnAccessory:isTimerPlaying:
setIsWeakStream:
setKeyboardGlobalLanguagePriors:
setKeywordAnalyzer:
setKeywordAnalyzerNDEAPI:
setLanguageCode:
setLanguageCodeUpdateMonitor:
setLanguageDetector:
setLanguageDetectorAssetHash:
setLanguageDetectorDelegate:
setLanguageDetectorInteractionID:
setLastAggTimeFalseWakeUp:
setLastAudioChunkHostTime:
setLastAudioRecorderContext:
setLastCommunicatedPeer:
setLastDetectedVoiceTriggerBeginSampleCount:
setLastEndpointPosterior:
setLastFakeModelUsedHash:
setLastForwardedSampleCount:
setLastHash:
setLastKnowServerFeaturesLatency:
setLastKnownOSDFeatures:
setLastKnownServerEPFeatures:
setLastReportedEndpointTimeMs:
setLastSampleCount:
setLastServerFeatureTimestamp:
setLastSilencePosterior:
setLatestContext:
setLatestDetectedLanguages:
setLatestPluginStreamId:
setLatestRecordContext:streamType:
setLatestVolume:
setLatestVolumeTime:
setLength:
setListenPollingTimer:
setListenPollingTimerCount:
setLocale:
setLogEventUUID:
setLoggingQueue:
setLpcmBitDepth:
setMachServiceName:
setMaxAllowedTrailingSamplesAfterSchedulingStop:
setMediaPlayingMonitor:
setMediaPlayingObserverQueue:
setMeteringEnabled:
setMhId:
setMicUsageReporter:
setMinSpeechFrames:
setMinimumDurationForEndpointer:
setMonitor:
setMostRecentRecognitionLanguage:
setMultilingualKeyboardLanguages:
setMyriadPreventingTwoShotFeedback:
setName:
setNeedsBoost12dB:
setNeedsToUpdateModel:
setNnvadEndpointer:
setNumAudioSampleForwarded:
setNumFalseWakeUp:
setNumLatestLanguages:
setNumLeadingFrames:
setNumOfAudioPackets:
setNumOfValidTrailingPackets:
setNumOfValidTrailingSpeechPackets:
setNumSamplesProcessed:
setNumSamplesProcessedBeforeAnchorTime:
setNumTrailingSamplesAfterSchedulingStop:
setNumberOfChannels:
setNumberOfLoops:
setNumberOfTotalFramesETFT:
setNumberOfVoicingFrames:
setNviCtx:
setOStream:
setObject:atIndexedSubscript:
setObject:forKey:
setObject:forKeyedSubscript:
setObservers:
setOpportuneSpeakListnerTestService:
setOsdFeaturesAtEndpoint:
setOsdQueue:
setOutASBD:
setOverrideEnabled:
setOverridePath:
setOverrideState:
setPNonInterleavedABL:
setPackets:
setPairedDeviceAddresses:
setPeakPower:
setPendingActivationEvent:
setPendingAudioSessionActivationCompletion:
setPendingAudioSessionActivationReason:
setPendingAudioSessionActivationToken:
setPendingBuiltInVoiceTriggerCompletionBlk:
setPendingBuiltInVoiceTriggerDetectedTime:
setPendingBuiltInVoiceTriggerResult:
setPendingCompletion:
setPendingRecordingStopUUID:
setPendingRemoraVoiceTriggerCompletionBlk:
setPendingRemoraVoiceTriggerDetectedTime:
setPendingRemoraVoiceTriggerDeviceId:
setPendingRemoraVoiceTriggerResult:
setPendingStartCompletions:
setPendingStopCompletions:
setPerceptualAudioHash:
setPermanentOffsetFactor:
setPermanentOffsetIsEnabled:
setPermanentVolumeOffsetWithDirection:
setPhoneCallState:
setPhoneCallStateMonitor:
setPhraseSpotterBypassing:timeout:
setPhraseSpotterBypassing:timeout:xpcClient:
setPostBuildInstallService:
setPowerMeter:
setPrevAudioProcessedMs:
setPreviousMessageLanguage:
setPrimaryStream:
setProcessedAudioDurMs:
setProcessedAudioDurationInMilliseconds:
setProcessedAudioInSeconds:
setProductCategory:
setProductID:
setProfileId:
setProviderDelegate:
setQueue:
setRMSScore:
setRaiseToSpeakBypassing:timeout:
setRaiseToSpeakBypassing:timeout:xpcClient:
setRate:
setRcHandlingClient:
setRcXPCConnection:
setReason:
setReceivers:
setRecentMessages:
setRecordBufferDuration:
setRecordContext:
setRecordDelegate:
setRecordDeviceIndicator:
setRecordEventUUID:
setRecordMode:streamHandleId:error:
setRecordingDidStop:
setRecordingTransaction:
setRecordingWillStartGroup:
setRemoraSecondPassProgressProvider:
setRemoteAccessoryStreamIdSet:
setRemoteObjectInterface:
setRemoteObjectProxy:
setRemoteSvcProxy:
setRemoteVAD:
setRemoteVADAlignBuffer:
setRemoteVADAlignCount:
setRemoteVADSPGRatio:
setRepresentation
setReqSrc:
setReqStartAudioSampleId:
setReqStartMachAbsTime:
setRequestHistoricalAudio:
setRequestHistoricalAudioDataSampleCount:
setRequestHistoricalAudioDataWithHostTime:
setRequestMHUUID:
setRequestedStopRecordingOptions:
setRequireSingleChannelLookup:
setRequiresHistoricalBuffer:
setRmsSamplesForEntireAudio:
setRootLogDir:
setRtsTriggerInfo:
setRunningSampleCount:
setSacInfoMonitor:
setSampleRate:
setSamplingRate:
setSaveSamplesSeenInReset:
setScheduledFutureSample:
setSecondPassAssetLoadCompleteTime:
setSecondPassAssetLoadStartTime:
setSecondPassAssetQueryCompleteTime:
setSecondPassAssetQueryStartTime:
setSecondPassAudioStreamReadyTime:
setSecondPassAudioStreamStartTime:
setSecondPassCheckerModelKeywordDetectionEndTime:
setSecondPassCheckerModelKeywordDetectionStartTime:
setSecondPassFirstAudioPacketReceptionTime:
setSecondPassLastAudioPacketReceptionTime:
setSelectedChannel:
setServerCrashedBlock:
setServerFeatureLatencies:
setServerFeatureLatencyDistribution:
setServerFeaturesQueue:
setServerLoggingWriter:
setServerResetBlock:
setSessionDelegate:
setSessionEventDelegate:
setSessionInfoProvider:
setSessionInfoQueue:
setSessionProvider:
setSetupStarted:
setShadowMicScore:
setShadowMicScoreCreator:
setShouldKeepConnection:
setShouldLogRawSensorData:
setShouldRollFakeModel:
setShouldUseLanguageDetectorForCurrentRequest:
setSigGenTs:
setSigProvidersMap:
setSigType:
setSignalEstimate:
setSignalFractional:
setSilencePosterior:
setSiriClientRecordStateChangedBlock:
setSiriLanguageCodeDarwin:
setSiriSessionUUID:
setSiriStateObserver:
setSkipAlert:
setSkipAlertBehavior:
setSmartSiriVolume:
setSmartSiriVolumeDirection:
setSmartSiriVolumePercentage:
setSosQueue:
setSource:
setSpatialSpectrumData:
setSpeakerIdDelegate:
setSpeakerMuteStateChangedBlock:
setSpeakerRecognitionScores:
setSpeakerStateChangedBlock:
setSpeechEndHostTimeEstimator:
setSpeechEndpointDetected:
setSpeechRecognizedContext:
setSpeechRecognizedContext:withEndpointerMetrics:
setSpeechRecordingEventListeningEndpoint:
setSpeechRecordingMode:
setSpeechRequestOptions:
setSpeechRequestOptions:currentActivationInfo:
setSpeechVoiceLevel:
setSpeechWasRecognizedForElapsedTime:isFinal:
setSpgEndpointAnalyzer:
setSpgQueue:
setSplitterEnabled:
setSsrConnection:
setSsrXPCClient:
setSsvClient:
setSsvConnection:
setSsvLogFilePath:
setSsvManager:
setStartAlert:
setStartAlertBehavior:
setStartDetected:
setStartOfSpeechDetected:
setStartOfSpeechDetector:
setStartPendingOnStoppingStreamToCompletionDict:
setStartPendingOnStoppingStreams:
setStartPendingStreams:
setStartRecordingHostTime:
setStartRecordingSampleCount:
setStartStreamOption:
setStartWaitTime:
setStateNotificationQueue:
setStateSerialQueue:
setStopAlert:
setStopAlertBehavior:
setStopOnErrorAlert:
setStopPendingStreams:
setStopReasonMajor:
setStopReasonMinor:
setStopRecordingHostTime:
setStopRecordingWatchDogToken:
setStreamHandleID:
setStreamHandleQueue:
setStreamHolders:
setStreamProvider:
setStreamRequest:
setStreaming:
setStreamingUUID:
setStreams:
setSupportHearstVoiceTrigger:
setSupportPhatic:
setSupportTriagleModeSessionActivationRetry:
setSupportsAnnounceCall:
setSupportsInEarDetection:
setSupportsListeningModeANC:
setSupportsListeningModeTransparency:
setSupportsSpokenNotification:
setSupportsVoiceTrigger:
setSuppressInterruptionEndedNotifications:
setSynchronousCallbackEnabled:
setTarget:
setTaskName:
setTaskThresholdMap:
setTimeStamp:
setTimerMonitor:
setTimestamp:
setToken:
setTotalAudioRecorded:
setTrailingPktLatencies:
setTrailingPktSpeechLatencies:
setTrailingSilenceDuration:
setTrailingSilenceDurationAtEndpoint:
setTrialAssetDownloadMonitor:
setTrialAssetManager:
setTrialAssetMonitor:
setTrialDownloadMonitor:
setTriggerAbsStartSampleId:
setTriggerMachTime:
setTriggerNotifiedMachTime:
setTriggeredTwoShotBorealis:
setTurnIdentifier:
setTwoShotNotificationEnabled:
setType:
setUncompressedAudioLogging:
setUpsampler:
setUseDefaultServerFeaturesOnClientLag:
setUseOpportunisticZLL:
setUserInfo:
setUserIntentTime:
setUserIntentType:
setUserIntentValidForSeconds:
setUserIntentVolume:
setUserName:
setUserSpeakingEndedHostTime:
setUserSpeakingEndedTimeInMs:
setUuid:
setValue:forKey:
setVendorID:
setVersion:
setVoiceControllerCreationQueue:
setVoiceIdentificationBatchId:
setVoiceTriggerAssetDownloadMonitor:
setVoiceTriggerBatchId:
setVoiceTriggerEnabled:
setVoiceTriggerEverUsed
setVoiceTriggerInfo:
setVoiceTriggerInfo:deviceId:
setVoiceTriggerSampleCount:
setVolume:
setVolume:fadeDuration:
setVolumeController:
setVolumeMonitor:
setVtEndInSampleCount:
setVtExtraAudioAtStartInMs:
setWaitingForAlertFinish:
setWakeGestureTimestamp:
setWasLanguageToggled:
setWithArray:
setWordCount:
setXpcClient:
setXpcClientFactory:
setXpcClientQueue:
setXpcClientType:
setXpcConnection:
setXpcConnectionQueue:
setXpcDelegateQueue:
setXpcReplyQueue:
setZeroFilter:
setupStarted
shadowMicScore
shadowMicScoreCreator
shadowMicScoreThreshold
shadowMicScoreThresholdForVAD
sharedAggregator
sharedConnection
sharedController
sharedHandler
sharedInstance
sharedLauncher
sharedLogger
sharedManager
sharedManagerForCoreSpeechDaemon
sharedMonitor
sharedNotifier
sharedObserver
sharedPowerLogger
sharedPreferences
sharedService
sharedSession
sharedSiriId
sharedVoiceTriggerClient
shortFormForUUID
shouldAcceptEagerResultForDuration:resultsCompletionHandler:
shouldAudioMonitoringRecording
shouldDeinterleaveAudioOnCS
shouldDelayPhaticForMyriadDecision
shouldDisableSpeakerVerificationInSplitterMode
shouldExplicitlyPlayAlertOnStart
shouldKeepConnection
shouldLogForQA
shouldLogRawSensorData
shouldOverrideRecordingStartingAlertBehaviorForAlertStyle:
shouldPlayAlertIfNotPrelistening
shouldResetAdsDictionary
shouldRollFakeModel
shouldRunAsSecondChance
shouldRunSpkrIdForCategory:
shouldSuppressRecordingErrorAlert
shouldSuppressRecordingStopAlert
shouldTreatTimeoutAsHardEndpoint
shouldUseLanguageDetectorForCurrentRequest
shouldUseRemoteRecorder
shouldUseVoiceTriggerAnalyzerStyle
shouldVoiceTriggerRun
sigGenTs
signalEstimate
signalFractional
signalProvidersMapForContext:
signature
silenceDurationEstimateAvailable:numEstimates:clientProcessedAudioMs:
silenceDurationMs
silenceFramesCountMs
silencePosterior
silenceProbability
siriClientBehaviorMonitor:didChangedRecordState:withEventUUID:withContext:
siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:
siriClientBehaviorMonitor:didStopStream:withEventUUID:
siriClientBehaviorMonitor:fetchedSiriClientAudioStream:successfully:
siriClientBehaviorMonitor:preparedSiriClientAudioStream:successfully:
siriClientBehaviorMonitor:willStartStreamWithContext:option:
siriClientBehaviorMonitor:willStopStream:reason:
siriClientBehaviorMonitorReleasedAudioSession:
siriClientsRecordingCompletionBlock:
siriInCallPolicy
siriInputSourceOutOfBand
siriProfileId
siriRequestProcessingCompleted
siriStateObserver
size
skipAlert
skipAlertBehavior
skipPersonalizedASR
smartSiriVolumeContextAwareEnabled
smartSiriVolumeEnablePolicy
smartSiriVolumeRunPolicy
smartSiriVolumeSoftVolumeEnabled
sortUsingComparator:
sortUsingSelector:
sortedArrayUsingComparator:
sosQueue
source
spaceCheck:
spatialSpectrumData
speakAudio:
speakAudio:withScaleFactor:outASBD:playbackStarted:completion:
speakAudio:withScaleFactor:playbackStarted:completion:
speakerIdDelegate
speakerIdentificationDidDetectSpeakerWithScores:
speakerRecognitionScores
speakerStateActiveCompletionBlock:
speakerStateMutedCompletionBlock:
speechCapturing:didDetectEndpointAtTime:
speechCapturing:didDetectStartpointAtTime:
speechCapturing:didFinishWritingAudioFile:error:
speechCapturing:didInterruptAudioSession:
speechCapturing:didLoseAudioSessionOwnerOrMediaServices:
speechCapturing:didReceiveFingerprint:duration:
speechCapturing:didSetAudioSessionActive:
speechCapturing:performTwoShotPromptWithType:completion:
speechCapturing:willSetAudioSessionActive:
speechCapturingDidProvideConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:thresholdingType:assetVersion:
speechCapturingDidReceiveLastAudioBufferWithEndpointMode:totalPacketCount:endpointerMetrics:
speechCapturingDidRecordPCMAudioData:
speechCapturingDidRecordSpeechPackets:atTimestamp:totalPacketCount:
speechCapturingDidRequestQuickStop:
speechCapturingDidRequestShutdownUI:
speechCapturingDidRequestUpdateSiriOutputVolume:
speechCapturingDidStartRecordingSuccessfully:error:withInfo:
speechCapturingDidStopRecordingWithError:endpointMode:totalPacketCount:endpointerMetrics:
speechCapturingDidUpdateAudioDeviceInfo:
speechCapturingDidUpdateRecordingInfo:
speechCapturingWillStopRecording
speechCapturingWillStopRecordingWithSignpostID:
speechController:didSetAudioSessionActive:
speechController:willSetAudioSessionActive:
speechControllerBeginRecordInterruption:
speechControllerBeginRecordInterruption:withContext:
speechControllerDidDeliverLastBuffer:forReason:estimatedSpeechEndHostTime:
speechControllerDidDetectEndpoint:ofType:atTime:
speechControllerDidDetectStartpoint:
speechControllerDidDetectVoiceTriggerTwoShot:atTime:
speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:
speechControllerDidFinishAlertPlayback:ofType:error:
speechControllerDidStartRecording:audioDeviceInfo:successfully:error:
speechControllerDidStartRecording:successfully:error:
speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:
speechControllerDidStopRecording:forReason:estimatedSpeechEndHostTime:
speechControllerDidUpdateSmartSiriVolume:forReason:
speechControllerEndRecordInterruption:
speechControllerLPCMRecordBufferAvailable:buffer:
speechControllerLPCMRecordBufferAvailable:buffer:recordedAt:
speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:
speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:
speechControllerRecordHardwareConfigurationDidChange:toConfiguration:
speechControllerRequestsOperation:forReason:
speechControllerRequestsOperation:forReason:completion:
speechEndHostTimeEstimator
speechEndpointDetected
speechEndpointerOperationMode
speechEvent
speechRecognitionTask
speechRecordingAlertPolicy
speechRecordingMode
speechVoiceLevel
speexASBD
speexConverter
spgConfigFile
spgEndpointAnalyzer
spgEndpointAnalyzer:hasSilenceScoreEstimate:clientProcessedAudioTimeMS:
spgEndpointAnalyzerDidDetectEndpoint:
spgQueue
splitAudioDataToReachSampleCount:currSampleCount:numBytesPerSample:completionHandler:
splitterDeviceList
splitterState
splitterState:
ssrConnection
ssrXPCClient
ssvClient
ssvConnection
ssvLogFilePath
ssvManager
standardUserDefaults
start
startAlert
startAlertBehavior
startAlertEnabled
startAttendingWithContext:
startAudioStream:option:completion:
startAudioStreamWithOption:
startAudioStreamWithOption:completion:
startAudioStreamWithOption:recordDeviceIndicator:error:
startCatalogDownload:options:then:
startDetected
startDownload:then:
startHostTime
startListenWithOption:completion:
startManager
startMonitor
startObserving
startObservingSystemVolumes
startOfSpeechAudioLoggingEnabled
startOfSpeechDetected
startOfSpeechDetectedAtFrame:
startOfSpeechDetector
startOfSpeechDetector:foundStartSampleAt:
startPendingOnStoppingStreamToCompletionDict
startPendingOnStoppingStreams
startPendingStreams
startRecordForStream:error:
startRecording
startRecordingHostTime
startRecordingSampleCount
startRecordingSettingsWithRecordRoute:recordingInfo:playbackRoute:
startRecordingTimestamp
startRecordingWatchDogToken
startRecordingWithOptions:error:
startRecordingWithSettings:error:
startRequest:options:completion:
startRequest:options:preparationHandler:executionHandler:finalizationHandler:
startRequestWith:context:delegate:
startSample
startSampleCount
startSmartSiriVolume
startSpeechCaptureWithContext:willStartHandler:error:
startStreamOption
startWaitTime
startWakeGestureUpdates
startWithNviContext:
startWithNviContext:didStartHandler:
startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:
startWithUUID:withMaximumBufferSize:
startXPCConnection
startingAlertBeepURL
startingAlertBehavior
state
stateNotificationQueue
stateSerialQueue
status
stop
stop:completion:
stopAlert
stopAlertBehavior
stopAllRequests:completion:
stopAllRequestsSynchronously
stopAttendingWithContext:
stopAudioStream:option:completion:
stopAudioStreamWithOption:completion:
stopAudioStreamWithRecordDeviceIndicator:error:
stopCountingZeroStatisticsWithReporter:
stopEndpointer
stopListenWithCompletion:
stopListenWithStateReset:completion:
stopOnErrorAlert
stopPendingStreams
stopRecordForStream:error:
stopRecording
stopRecording:
stopRecordingHostTime
stopRecordingReason
stopRecordingWatchDogToken
stopRecordingWithOptions:
stopRequest:immediately:
stopSpeechCaptureForEvent:suppressAlert:hostTime:
stopWithDidStopHandler:
stopWithUUID:
storeASVStateInformation
strRepForFloatData
strRepForNviDataSourceType:
strRepForNviSignalMask:
strRepForNviSignalType:
stream:handleEvent:
streamDescription
streamHandleID
streamHandleId
streamHandleQueue
streamHolders
streamID
streamProvider
streamRequest
streamState
streaming
streamingUUID
string
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByReplacingOccurrencesOfString:withString:
stringByStandardizingPath
stringForLogging
stringFromClassificationCategory:
stringValue
stringWithCString:encoding:
stringWithCapacity:
stringWithFormat:
stringWithString:
stringWithUTF8String:
strongToWeakObjectsMapTable
subChunkFrom:numSamples:
subChunkFrom:numSamples:forChannel:
subdataWithRange:
submitAudioIssueReport:
submitAudioIssueReport:withError:
submitEndpointerIssueReport:
submitVoiceTriggerIssueReport:
subscribeEventMonitor:
substringToIndex:
substringWithRange:
superclass
supportAdBlocker
supportBeepCanceller:
supportBluetoothDeviceVoiceTrigger
supportCSTwoShotDecision
supportDoAP
supportHandsFree
supportHangUp
supportHearstVoiceTrigger
supportHomeKitAccessory
supportHybridEndpointer
supportJarvisVoiceTrigger
supportLanguageDetector
supportLazySessionActivation
supportLazySessionActivtion
supportMphAssets
supportNonInterruptibleSiri
supportOpportunisticZLL
supportPhatic
supportPremiumAssets
supportRelayCall
supportRemoraVoiceTrigger
supportRingtoneA2DP
supportSessionActivateDelay
supportSmartVolume
supportTriagleModeSessionActivationRetry
supportZeroFilter:
supportedInputOrigins
supportedLocale:
supportsDuckingOnCurrentRouteWithError:
supportsDuckingOnSpeakerOutput
supportsEndpointingOnATV
supportsHybridSDSDForLanguageCode:
supportsSecureCoding
supportsSpeakerRecognitionAssets
supportsUnderstandingOnDevice
suppressInterruptionEndedNotifications
suppressStartAlert
suppressUtteranceGradingIfRequired
suspendAutomaticEndpointingInRange:
synchronousRemoteObjectProxyWithErrorHandler:
systemControllerDied:
systemUpTime
systemUptime
systemVolumeDidChange:
tandemStreams
tapToSiriAudioPlaybackRequest
targetQueue
targetSpeed
taskName
taskThresholdMap
teardownWithError:
temporaryDirectory
terminateProcessing
timeIntervalSinceDate:
timeIntervalSinceNow
timeStamp
timerMonitor
timerState
timestamp
toString
token
totalAudioRecorded
totalExpected
totalWritten
trailingPktLatencies
trailingPktSpeechLatencies
trailingSilenceDuration
trailingSilenceDurationAtEndpoint
trainGlobalNNLMwithFidesSessionURL:completion:
trainPersonalizedLMWithLanguage:configuration:asset:directory:completion:
trainPersonalizedLMWithLanguage:configuration:asset:fides:activity:completion:
trainPersonalizedLMWithLanguage:configuration:fides:activity:completion:
trainPersonalizedLMWithLanguage:configuration:fides:write:completion:
trainPersonalizedLMWithLanguage:directory:completion:
transitions
trialAssetDownloadMonitor
trialAssetManager
trialAssetMonitor
trialBaseAssetDirectory
trialDownloadMonitor
triggerAbsStartSampleId
triggerInfoForContext:completion:
triggerModeStringDescription:
triggerNotifiedMachTime
triggerVoiceProfileRetrainingWithAsset:
triggeredTwoShotBorealis
turnIdentifier
twoShotAudioPlaybackRequest
twoShotNotificationEnabled
twoShotPromptTypeForRecordRoute:playbackRoute:
type
uncompressedAudioLogging
unregisterObserver:
unregisterSignalProviderDelegate:forSignalType:
unregisterSignalProviderDelegateForAllSignalTypes:
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
updateAccessToRecordedAudioForVoiceIdentificationTraining:forResultCandidateId:sharedUserId:
updateAudioRecordContext:
updateAudioRecordDeviceInfo:
updateAudioStreamStartTimeInSampleCount:
updateDeviceInfo:
updateEndpointHintForRC:forceAccept:completion:
updateEndpointerDelayedTriggerSwitch:
updateEndpointerThreshold:
updateEndpointerThresholdWithValue:
updateMeterForStream:
updateMeters
updateRecordingInfo:
updateRecordingSettings:
updateSelectedResultCandidateId:
updateServerEndpointFeatures:
updateSpeechSynthesisRecord:
updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:
updateStartSpeechId:
updateState:
updateVoiceProfile:withUserName:
updateVoiceTriggerInfo:
updateWithLatestRecordContext:
upperCaseString:completion:
upperCaseString:withReply:
upsampler
useAutomaticEndpointing
useBorealisBuffer
useCustomizedRecordSettings
useDefaultServerFeaturesOnClientLag
useDeviceSpeakerForTTS
useOpportunisticZLL
usePrelisteningMode
useSiriActivationSPIForHomePod
useSpeakerRecognitionAsset
useSpeexForAudioInjection
userInfo
userIntentTime
userIntentType
userIntentValidForSeconds
userIntentVolume
userName
userSessionActivateMonitor:didReceivedUserSessionActiveHasChanged:
userSpeakingEndedHostTime
userSpeakingEndedTimeInMs
userSpeakingStartedHostTime
userSpeakingStartedTimeInMs
utteranceFileASBD
uuid
vadScore
valueForEntitlement:
valueForKey:
vendorID
vendorId
vibratesForDeviceRingerSwitchState:
voiceControllerAudioCallback:forStream:buffer:
voiceControllerBeginRecordInterruption:
voiceControllerBeginRecordInterruption:withContext:
voiceControllerCreationQueue
voiceControllerDidDetectEndpoint:ofType:
voiceControllerDidDetectEndpoint:ofType:atTime:
voiceControllerDidDetectStartpoint:
voiceControllerDidFinishAlertPlayback:ofType:error:
voiceControllerDidFinishAlertPlayback:withSettings:error:
voiceControllerDidSetAudioSessionActive:isActivated:
voiceControllerDidStartRecording:forStream:successfully:error:
voiceControllerDidStartRecording:successfully:
voiceControllerDidStartRecording:successfully:error:
voiceControllerDidStopRecording:forReason:
voiceControllerDidStopRecording:forStream:forReason:
voiceControllerEncoderErrorDidOccur:error:
voiceControllerEndRecordInterruption:
voiceControllerLPCMAudioCallback:forStream:buffer:
voiceControllerLPCMRecordBufferAvailable:buffer:
voiceControllerMediaServicesWereLost:
voiceControllerMediaServicesWereReset:
voiceControllerRecordBufferAvailable:buffer:
voiceControllerRecordHardwareConfigurationDidChange:toConfiguration:
voiceControllerStreamInvalidated:forStream:
voiceControllerWillSetAudioSessionActive:willActivate:
voiceControllerWirelessSplitterRouteAvailable:devices:
voiceIdentificationBatchId
voiceProfileForId:
voiceProfilePruningCookie
voiceTriggerAOPModeEnabledPolicy
voiceTriggerAssetDownloadMonitor
voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:
voiceTriggerAudioLogDirectory
voiceTriggerBatchId
voiceTriggerDetectedOnAOP:
voiceTriggerDidDetectKeyword:deviceId:
voiceTriggerDidDetectKeyword:deviceId:completion:
voiceTriggerDidDetectKeyword:myriadHash:remoteTriggerType:remoteDeviceId:isTriggeredFromFullWake:completion:
voiceTriggerDidDetectNearMiss:deviceId:
voiceTriggerDidDetectSpeakerReject:
voiceTriggerDidRejected:deviceId:
voiceTriggerEnabled
voiceTriggerEndHostTime
voiceTriggerEventInfo
voiceTriggerGotSuperVector:
voiceTriggerHearstRTModelForVersion:minorVersion:locale:downloadedModels:preinstalledModels:completion:
voiceTriggerInfo
voiceTriggerInfoWithRecordDeviceIndicator:
voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:
voiceTriggerPhraseNDEAPIScorerDidDetectedKeyword:bestStartSampleCount:bestEndSampleCount:
voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:endpointId:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:locale:downloadedModels:preinstalledModels:completion:
voiceTriggerRemoraRTModelForVersion:minorVersion:locale:endpointId:downloadedModels:preinstalledModels:completion:
voiceTriggerSampleCount
voiceTriggerXPCClient:didDisconnect:
volume
volumeController
volumeEstimate
volumeMonitor
vtEndInSampleCount
vtExtraAudioAtStartInMs
waitForMyriadDecisionForReason:withCompletion:
waitWithTimeout:
waitingForAlertFinish
waitingForConnection:error:
wakeGestureManager:didUpdateWakeGesture:
wakeGestureManager:didUpdateWakeGesture:detectedAt:
wakeGestureManager:didUpdateWakeGesture:orientation:
wakeGestureManager:didUpdateWakeGesture:type:detectedAt:
wakeGestureTimestamp
wakeHostForVoiceTrigger
wantsRecordedAudioBufferLogs
wasBuffered
wasLanguageToggled
weakObjectsHashTable
wearerDetectionConfig
willBeep
willBeepWithRecordRoute:playbackRoute:
willDestroy
willPrepareAndStartRecordingWithAudioActivationInfo:
willStopRecordingAtHostTime:
wordCount
write:maxLength:
writeToFile:atomically:
writeToFile:options:error:
writeToURL:atomically:
xpcClient
xpcClientFactory
xpcClientQueue
xpcClientType
xpcConnection
xpcConnection:hasEntitlement:
xpcConnectionQueue
xpcDelegateQueue
xpcExitClean
xpcObject
xpcReplyQueue
zeroCounter
zeroFilter
zeroFilter:zeroFilteredBufferAvailable:atHostTime:
zeroFilterApproxAbsSpeechThreshold
zeroFilterWindowSizeInMs
zone
@24@0:8@16
@16@0:8
v24@0:8@16
v16@0:8
B16@0:8
Q16@0:8
v24@0:8Q16
v20@0:8B16
@"NSMutableArray"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v44@0:8@16Q24B32@36
v40@0:8@16Q24Q32
v56@0:8@16Q24@32@40Q48
v32@0:8@16@24
v44@0:8@"CSAudioInjectionEngine"16Q24B32@"NSError"36
v40@0:8@"CSAudioInjectionEngine"16Q24Q32
v56@0:8@"CSAudioInjectionEngine"16Q24@"NSData"32@"NSData"40Q48
v32@0:8@"CSAudioInjectionEngine"16@"CSAudioChunkForTV"24
@24@0:8Q16
B44@0:8@16f24@?28@?36
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"<CSAudioInjectionEngineDelegate>"
@"CSKeywordAnalyzerNDEAPI"
@"CSAudioCircularBuffer"
@"NSUUID"
@"CSAudioInjectionDevice"
v32@0:8@16Q24
v32@0:8@"NSStream"16Q24
@32@0:8@16@24
@"NSOutputStream"
v32@0:8Q16@24
v32@0:8@16q24
v40@0:8@16q24Q32
v48@0:8@16q24q32Q40
v36@0:8@16q24i32
v44@0:8@16q24i32Q36
v32@0:8@"CMWakeGestureManager"16q24
v40@0:8@"CMWakeGestureManager"16q24Q32
v48@0:8@"CMWakeGestureManager"16q24q32Q40
v36@0:8@"CMWakeGestureManager"16q24i32
v44@0:8@"CMWakeGestureManager"16q24i32Q36
@"CMWakeGestureManager"
v32@0:8@16@?24
@"NSHashTable"
v32@0:8@"<CSAudioSessionInfoProviding>"16@"NSDictionary"24
v28@0:8@16B24
v28@0:8@"CSXPCClient"16B24
v32@0:8@"CSCoreSpeechDaemonStateMonitor"16Q24
v24@0:8@?16
I16@0:8
@"<CSAudioSessionInfoProviding>"
@"CSXPCClient"
f16@0:8
q16@0:8
@68@0:8@16f24{AudioStreamBasicDescription=dIIIIIIII}28
{AudioStreamBasicDescription=dIIIIIIII}16@0:8
v56@0:8{AudioStreamBasicDescription=dIIIIIIII}16
^{OpaqueExtAudioFile=}16@0:8
v24@0:8^{OpaqueExtAudioFile=}16
@"NSURL"
^{OpaqueExtAudioFile=}
{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}
@"NSString"
Q40@0:8@16@24@32
v24@0:8@"CSAttSiriRequestContext"16
v24@0:8@"CSAttSiriAttendingTriggerEventInfo"16
@"<CSAttSiriServiceDelegate>"
@"NSXPCConnection"
v24@0:8q16
B32@0:8^B16^Q24
Q24@0:8Q16
@"<CSBiometricMatchMonitorDelegate>"
v20@0:8f16
v40@0:8@16@24@?32
v60@0:8@16@24Q32@40B48@?52
v32@0:8@"NSDictionary"16@"NSString"24
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?>32
v24@0:8@"NSDictionary"16
v24@0:8@"NSData"16
v60@0:8@"NSDictionary"16@"NSData"24Q32@"NSString"40B48@?<v@?>52
v40@0:8Q16@24d32
v40@0:8Q16@"NSString"24d32
v32@0:8Q16@"NSString"24
@?16@0:8
@"<CSVoiceTriggerDelegate>"
@"<CSSecondPassProgressProviding>"
@"NSDictionary"
@"CSPreMyriadVoiceTriggerMetaData"
@"NSMutableDictionary"
@"CSKeywordAnalyzerNDAPI"
i16@0:8
d16@0:8
@40@0:8@16@24@32
@24@0:8^{_NSZone=}16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"CSAudioRecordDeviceInfo"
@"NSArray"
@"CSSSRXPCClient"
@"<CSSpeakerRecognitionProxyProtocol>"
v28@0:8@"CSVoiceTriggerXPCClient"16B24
v36@0:8B16@20@28
v28@0:8B16@20
v36@0:8B16d20@28
v28@0:8B16d20
@"CSVoiceTriggerXPCClient"
r*16@0:8
v40@0:8@16@24Q32
v40@0:8@"CSVoiceTriggerAwareZeroFilter"16@"NSData"24Q32
v40@0:8@"CSBeepCanceller"16@"NSData"24Q32
@24@0:8f16i20
v32@0:8f16B20@24
B20@0:8f16
v20@0:8i16
@"<CSAudioPreprocessorDelegate>"
@"CSAudioSampleRateConverter"
@"CSVoiceTriggerAwareZeroFilter"
@"CSBeepCanceller"
@"CSAudioZeroCounter"
v48@0:8@16@24@32@?40
@24@0:8^{BTLocalDeviceImpl=}16
@24@0:8^{BTDeviceImpl=}16
v40@0:8^{BTDeviceImpl=}16I24i28I32i36
v28@0:8^{BTSessionImpl=}16i24
v24@0:8^{BTSessionImpl=}16
v32@0:8^{BTLocalDeviceImpl=}16i24i28
^{BTSessionImpl=}16@0:8
^{BTLocalDeviceImpl=}16@0:8
v24@0:8^{BTLocalDeviceImpl=}16
^{BTSessionImpl=}
^{BTLocalDeviceImpl=}
@"NSObject<OS_dispatch_group>"
^{__IOHIDUserDevice=}
v40@0:8@16@24@32
v40@0:8@"NSObject<OS_xpc_object>"16@"NSObject<OS_xpc_object>"24@"NSObject<OS_xpc_object>"32
v40@0:8@"CSXPCConnection"16@"NSObject<OS_xpc_object>"24@"NSObject<OS_xpc_object>"32
v52@0:8@16B24@28@36@44
v40@0:8@16Q24@32
v48@0:8@16Q24@32@40
v36@0:8@16B24Q28
@"CSTrialAssetDownloadMonitor"
@24@0:8d16
B24@0:8d16
@20@0:8I16
@"NSObject<OS_dispatch_source>"
@"<CSAudioFileReaderDelegate>"
@96@0:8{AudioStreamBasicDescription=dIIIIIIII}16{AudioStreamBasicDescription=dIIIIIIII}56
^{OpaqueAudioConverter=}96@0:8{AudioStreamBasicDescription=dIIIIIIII}16{AudioStreamBasicDescription=dIIIIIIII}56
^{OpaqueAudioConverter=}
@"<CSLanguageDetectorAssetMonitorDelegate>"
v32@0:8@16d24
v24@0:8r^{AudioStreamBasicDescription=dIIIIIIII}16
@28@0:8@16i24
@"CSAudioRecordContext"
@"CSSiriRecordingInfo"
@"CSSiriAudioFileWriter"
@"<AFRelinquishableAssertion>"
@"NSMutableSet"
v40@0:8Q16@24@?32
v40@0:8Q16@"NSDictionary"24@?<v@?@"NSError"@"CSSmartSiriVolumeEstimate">32
@32@0:8Q16@24
@"<CSSmartSiriVolumeClientDelegate>"
B40@0:8@16Q24^@32
B40@0:8@16@24^@32
B32@0:8@16^@24
f24@0:8Q16
B24@0:8Q16
B32@0:8Q16^@24
B40@0:8Q16Q24^@32
B40@0:8q16Q24^@32
B36@0:8@16q24B32
B32@0:8q16@24
@"CSAudioInjectionEngine"
v32@0:8@"<CSAudioStreamProviding>"16q24
v32@0:8@"<CSAudioStreamProviding>"16@"CSAudioChunk"24
v32@0:8@"<CSAudioStreamProviding>"16@"CSAudioChunkForTV"24
v36@0:8@16d24f32
v36@0:8@"CSSPGEndpointAnalyzer"16d24f32
v24@0:8@"CSSPGEndpointAnalyzer"16
v28@0:8B16@?20
@"<CSOpportuneSpeakListenerDelegate>"
@"CSAudioStream"
@"CSSPGEndpointAnalyzer"
@"<CSAudioStreamProviding>"
@"<CSAudioSessionProviding>"
@"CSPlainAudioFileWriter"
@"CSAudioTimeConverter"
v64@0:8@16@24@32@40@48@?56
@"NSObject<OS_xpc_object>"
@32@0:8d16Q24
v24@0:8d16
d24@0:8[80s]16
@"NSMutableData"
v28@0:8Q16B24
v36@0:8@16Q24B32
v56@0:8q16@24@32@40@?48
v44@0:8@16@24f32@?36
v48@0:8@16@24f32i36@?40
v32@0:8@"NSString"16@?<v@?@"NSString">24
v56@0:8q16@"NSString"24@"NSString"32@"NSString"40@?<v@?B@"NSError"@"NSUUID">48
v44@0:8@"NSURL"16@"NSUUID"24f32@?<v@?B@"NSError"QQ>36
v48@0:8@"NSURL"16@"NSUUID"24f32i36@?<v@?B@"NSError"QQ>40
v32@0:8@"NSUUID"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError"@"NSUUID">16
v24@0:8@"NSString"16
v32@0:8d16@?24
v36@0:8Q16Q24B32
v32@0:8Q16@"CSAudioRecordContext"24
v24@0:8@"CSAudioChunk"16
@"<CSEndpointAnalyzerDelegate>"16@0:8
v24@0:8@"<CSEndpointAnalyzerDelegate>"16
@"<CSEndpointAnalyzerImplDelegate>"16@0:8
v24@0:8@"<CSEndpointAnalyzerImplDelegate>"16
v24@0:8@"CSServerEndpointFeatures"16
v32@0:8d16@?<v@?B@"NSArray">24
v32@0:8@"NSString"16@"NSString"24
v32@0:8@"OSDFeatures"16d24
v32@0:8@"NSDate"16Q24
v28@0:8@"CSServerEndpointFeatures"16B24
@"<CSEndpointAnalyzerDelegate>"
@"<CSEndpointAnalyzerImplDelegate>"
v32@0:8@"_EARLanguageDetector"16@"_EARLanguageDetectorLoggingInfo"24
v32@0:8@"_EARLanguageDetector"16@"NSDictionary"24
v32@0:8@"_EARLanguageDetector"16@"_EARLanguageDetectorResult"24
v32@0:8@"CSStartOfSpeechDetector"16Q24
v28@0:8@16f24
@"<CSLanguageDetectorDelegate>"
@"_EARLanguageDetector"
@"_EARLanguageDetectorAudioBuffer"
@"CSStartOfSpeechDetector"
@"CSAsset"
@40@0:8Q16Q24d32
v32@0:8@"CSSelfTriggerDetector"16@"NSDictionary"24
@"<CSMyriadSelfTriggerCoordinatorDelegate>"
v40@0:8Q16Q24Q32
v44@0:8@16@24B32@36
v40@0:8@"CSCommandControlBehaviorMonitor"16@"CSAudioRecordContext"24@"CSAudioStartStreamOption"32
v44@0:8@"CSCommandControlBehaviorMonitor"16@"CSAudioRecordContext"24B32@"CSAudioStartStreamOption"36
v32@0:8@"CSCommandControlBehaviorMonitor"16@"CSAudioStopStreamOption"24
v24@0:8@"CSAudioServerCrashMonitor"16
@"AVVoiceTriggerClient"
@36@0:8q16@?24I32
@36@0:8q16@24I32
@44@0:8q16@?24@32I40
@"NSFileHandle"
@"NSError"
v64@0:8Q16Q24q32@40@48@?56
v72@0:8Q16Q24q32@40@48@56@?64
v56@0:8Q16Q24@32@40@?48
v20@0:8I16
v40@0:8@"CSVoiceTriggerAssetHandler"16@"NSString"24@"CSAsset"32
v40@0:8@"CSActivationEventNotificationHandler"16@"CSActivationEvent"24@?<v@?B@"NSError">32
v68@0:8@16Q24@32@40Q48Q56i64
v40@0:8@16Q24q32
v40@0:8@16q24@32
v68@0:8@"CSAudioRecorder"16Q24@"NSData"32@"NSData"40Q48Q56i64
v40@0:8@"CSAudioRecorder"16Q24@"CSAudioChunkForTV"32
v44@0:8@"CSAudioRecorder"16Q24B32@"NSError"36
v40@0:8@"CSAudioRecorder"16Q24q32
v32@0:8@"CSAudioRecorder"16q24
v40@0:8@"CSAudioRecorder"16q24@"NSError"32
v24@0:8@"CSAudioRecorder"16
v32@0:8@"CSAudioRecorder"16@"NSDictionary"24
v28@0:8@"CSAudioRecorder"16B24
v32@0:8@"CSAudioRecorder"16@"NSError"24
v32@0:8@"CSAudioProvider"16Q24
v28@0:8@"CSOpportuneSpeakEventMonitor"16B24
@32@0:8@16^@24
@24@0:8^@16
@"CSAudioRecorder"
@"CSAudioTapProvider"
@"CSFallbackAudioSessionReleaseProvider"
@"<CSSpeechManagerDelegate>"
@"CSOpportuneSpeakListnerTestService"
@"CSPostBuildInstallService"
@"CSSmartSiriVolumeManager"
v32@0:8Q16Q24
@"<CSCommandControlListenerDelegate>"
v32@0:8@"CSAssetController"16Q24
v32@0:8@16@"NSString"24
v32@0:8Q16@?24
v48@0:8Q16@24Q32@?40
v48@0:8Q16Q24@32@?40
@"CSPolicy"
@"CSAssetDownloadingOption"
v72@0:8q16q24d32@40d48@56q64
v72@0:8q16q24d32@"NSArray"40d48@"NSString"56q64
v24@0:8@?<v@?@"NSError"@"NSString">16
v24@0:8@?<v@?@"NSError"d>16
v24@0:8@?<v@?@"NSError"Q>16
v32@0:8d16@24
v32@0:8d16@"CSEndpointerMetrics"24
v48@0:8Q16@24@32@40
@32@0:8@"<NviDataSource>"16@"<NviAssetsProvider>"24
v24@0:8@"<NviSignalProviderDelegate>"16
v32@0:8@"NviContext"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError">16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@?<v@?@>16
@48@0:8@16@24@32@40
@56@0:8@16@24@32@40@48
@"NSXPCListener"
@"NSXPCInterface"
@32@0:8Q16Q24
@"NSNumber"
v52@0:8@16@24f32Q36Q44
v52@0:8@"CSAudioConverter"16@"NSArray"24f32Q36Q44
v32@0:8@"CSSmartSiriVolumeController"16Q24
v40@0:8@"<CSAudioAlertProviding>"16q24@"NSError"32
v32@0:8@"CSAudioSessionController"16@"NSDictionary"24
v72@0:8@16Q24@32@40Q48Q56B64I68
v72@0:8@"CSAudioDecoder"16Q24@"NSData"32@"NSData"40Q48Q56B64I68
v32@0:8@"<CSEndpointAnalyzerImpl>"16d24
v40@0:8@"<CSEndpointAnalyzerImpl>"16Q24Q32
v48@0:8@16q24q32@40
v32@0:8@16B24B28
v48@0:8@"SOMediaNowPlayingObserver"16q24q32@"NSDate"40
v24@0:8@"SOMediaNowPlayingObserver"16
v32@0:8@"SOMediaNowPlayingObserver"16B24B28
v32@0:8@"SOClockAlarmObserver"16@"NSUUID"24
v40@0:8@"SOClockAlarmObserver"16@"AFClockAlarmSnapshot"24@"AFClockAlarmSnapshot"32
v32@0:8@"SOClockTimerObserver"16@"NSUUID"24
v40@0:8@"SOClockTimerObserver"16@"AFClockTimerSnapshot"24@"AFClockTimerSnapshot"32
v24@0:8@"<CSAudioSessionProviding>"16
v32@0:8@"<CSAudioSessionProviding>"16@"NSDictionary"24
v28@0:8@"<CSAudioSessionProviding>"16B24
v32@0:8@"CSContinuousVoiceTrigger"16@"NSDictionary"24
v32@0:8@"CSContinuousVoiceTrigger"16d24
@116@0:8@16@24@32@40@48@56@64@72@80@88B96B100B104B108B112
B44@0:8Q16d24B32^@36
v56@0:8d16Q24@32@?40@?48
B24@0:8^@16
B24@0:8B16B20
B24@0:8q16
v68@0:8Q16d24d32d40@48B56@?60
v24@0:8B16B20
@"CSAudioConverter"
@"<CSSpeechControllerDelegate>"
@"<CSSpeakerIdentificationDelegate>"
@"CSEndpointerProxy"
@"<CSAudioAlertProviding>"
@"<CSAudioMeterProviding>"
@"<CSAudioMetricProviding>"
@"CSSelectiveChannelAudioFileWriter"
@"CSSmartSiriVolumeController"
@"CSSpeechEndHostTimeEstimator"
@"CSLanguageDetector"
@"CSXPCClientFactory"
@"CSAudioPowerMeter"
@"CSStopRecordingOptions"
@"SOMediaNowPlayingObserver"
@"SOClockAlarmObserver"
@"SOClockTimerObserver"
@"CSVolumeMonitor"
@"CSAudioDeviceInfo"
@"CSAudioSessionController"
@"CSSACInfoMonitor"
@"CSRCHandlingXPCClient"
@"CSUncompressedAudioLogging"
@"<CSSSRXPCClientDelegate>"
@"CSAttSiriRequestContext"
@48@0:8q16Q24Q32@40
@40@0:8Q16Q24@32
@24@0:8q16
@40@0:8@16@24Q32
v56@0:8Q16@24@?32@?40@?48
@40@0:8@"NSObject<OS_dispatch_queue>"16@"AFAudioPlaybackRequest"24Q32
v40@0:8Q16@"AVAudioSession"24@?<v@?@"NSError">32
v56@0:8Q16@"AVAudioSession"24@?<v@?>32@?<v@?>40@?<v@?@"NSError">48
v28@0:8B16@?<v@?>20
@"AFAudioPlaybackRequest"16@0:8
@"AVPlayer"
@"AVPlayerItem"
@"AVAudioSession"
@"AFAudioPlaybackRequest"
@24@0:8@?16
v56@0:8@16@24@32@40@?48
v60@0:8@16@24@32B40@44@?52
v52@0:8@16@24B32@36@?44
v36@0:8@16B24@?28
v96@0:8@16@24@32@40Q48@56@64@72@80@?88
v24@0:8@"CSRemoteAssetManager"16
q24@0:8q16
v48@0:8@16@24B32B36@?40
v48@0:8@"NSString"16@"NSString"24B32B36@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"NSURL"16@?<v@?@"NSError">24
v36@0:8@"NSString"16B24@?<v@?@"NSDictionary"@"NSError">28
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v96@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSString"40Q48@"NSArray"56@"NSString"64@"NSString"72@"NSArray"80@?<v@?@"NSArray"@"NSError">88
@"<NviAssetsProvider>"
@"NSMapTable"
B48@0:8Q16Q24@32^@40
v24@0:8@"<CSAudioSessionProvidingDelegate>"16
B48@0:8Q16Q24@"NSString"32^@40
@40@0:8@16@24^@32
@40@0:8Q16Q24Q32
v40@0:8Q16Q24@32
@32@0:8@16d24
v28@0:8B16Q20
B32@0:8@"CSAudioRecordContext"16^@24
@"CSAudioStream"40@0:8@"CSAudioStreamRequest"16@"NSString"24^@32
v40@0:8@"CSAudioStreamRequest"16@"NSString"24@?<v@?@"CSAudioStream"@"NSError">32
v40@0:8@"CSAudioStream"16@"CSAudioStream"24@?<v@?B@"NSError">32
B40@0:8@"CSAudioStream"16@"CSAudioStreamRequest"24^@32
v40@0:8@"CSAudioStream"16@"CSAudioStreamRequest"24@?<v@?B@"NSError">32
v40@0:8@"CSAudioStream"16@"CSAudioStartStreamOption"24@?<v@?B@"NSError">32
v40@0:8@"CSAudioStream"16@"CSAudioStopStreamOption"24@?<v@?B@"NSError">32
@"CSAudioChunk"32@0:8Q16Q24
@"CSAudioChunk"40@0:8Q16Q24Q32
@"CSAudioChunk"24@0:8Q16
v40@0:8Q16Q24@"NSURL"32
v32@0:8Q16@"NSURL"24
@"CSAudioStreamHolding"32@0:8@"NSString"16d24
v24@0:8@"CSAudioStreamHolding"16
@"CSAudioRecordDeviceInfo"16@0:8
@"CSAudioDeviceInfo"16@0:8
@"NSDictionary"16@0:8
v24@0:8@"<CSAudioAlertProvidingDelegate>"16
B36@0:8@"NSURL"16q24B32
I24@0:8@16
v24@0:8@"<CSAudioSessionInfoProvidingDelegate>"16
I24@0:8@"NSString"16
v32@0:8@"CSAudioRecordContext"16@?<v@?@"NSDictionary"@"NSDictionary">24
@"<CSAudioSessionProvidingDelegate>"
@"<CSAudioStreamProvidingDelegate>"
@"<CSAudioAlertProvidingDelegate>"
@"<CSXPCClientDelegate>"
v40@0:8q16q24q32
v32@0:8q16q24
@"<CSStateMachineDelegate>"
v32@0:8i16@20B28
v32@0:8@"CSAlarmMonitor"16q24
v32@0:8@"CSTimerMonitor"16q24
v28@0:8@"CSVolumeMonitor"16f24
v28@0:8@"CSAutomaticVolumeEnabledMonitor"16B24
@28@0:8f16@20
@40@0:8Q16@24Q32
@"<CSConnectionServiceDelegate>"
@"<CSSmartSiriVolumeProcessor>"
@36@0:8@16f24Q28
@32@0:8@16Q24
@52@0:8Q16@24@32f40Q44
@48@0:8Q16@24@32Q40
d20@0:8f16
v48@0:8Q16@24@32@?40
v40@0:8@16Q24@?32
v40@0:8@16@?24@?32
@40@0:8@16Q24@32
v32@0:8^@16Q24
v40@0:8q16Q24@32
@28@0:8Q16I24
B84@0:8@16f24{AudioStreamBasicDescription=dIIIIIIII}28@?68@?76
@24@0:8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16
@28@0:8@16I24
^{OpaqueAudioConverter=}16@0:8
v24@0:8^{OpaqueAudioConverter=}16
^{AudioBufferList=I[1{AudioBuffer=II^v}]}16@0:8
v24@0:8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16
@"CSAudioInjectionFileOption"
^{AudioBufferList=I[1{AudioBuffer=II^v}]}
@"<CSVoiceTriggerAssetChangeDelegate>"
@104@0:8@16{AudioStreamBasicDescription=dIIIIIIII}24{AudioStreamBasicDescription=dIIIIIIII}64
v32@0:8r^v16q24
v44@0:8@16B24@28@36
v28@0:8@"CSFirstUnlockMonitor"16B24
@64@0:8@16@24@32@40@48@56
@"CSVoiceTriggerAssetDownloadMonitor"
@"CSLanguageCodeUpdateMonitor"
@"CSFirstUnlockMonitor"
@"CSAssetManager"
@"CSTrialAssetManager"
v52@0:8@16@24B32@36@44
v36@0:8@16@24B32
v40@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioRecordContext"24@"CSAudioStartStreamOption"32
v52@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioRecordContext"24B32@"CSAudioStartStreamOption"36@"NSString"44
v40@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioStopStreamOption"24Q32
v40@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioStopStreamOption"24@"NSString"32
v44@0:8@"CSSiriClientBehaviorMonitor"16B24@"NSString"28@"CSAudioRecordContext"36
v36@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioStream"24B32
v24@0:8@"CSSiriClientBehaviorMonitor"16
@28@0:8Q16B24
@28@0:8@16B24
S28@0:8^f16i24
s16@0:8
v20@0:8s16
C16@0:8
v20@0:8C16
@40@0:8q16@24@32
q32@0:8q16@24
q36@0:8@16B24@28
@44@0:8@16@24@32B40
q40@0:8@16@24@32
q32@0:8@16@24
q44@0:8@16@24B32q36
@"AFClientConfiguration"
@"AFExperimentContext"
@"AFSpeechRecordingAlertPolicy"
@"AFLanguageDetectionUserContext"
Q24@0:8@16
d24@0:8@16
v28@0:8@"AVAudioPlayer"16B24
v32@0:8@"AVAudioPlayer"16@"NSError"24
v24@0:8@"AVAudioPlayer"16
v32@0:8@"AVAudioPlayer"16Q24
B40@0:8Q16@24^@32
@"AVAudioPlayer"
v36@0:8B16@20d28
@"CSSiriAssertionMonitor"
@"NSData"
v68@0:8Q16d24d32d40@"NSString"48B56@?<v@?BB@"NSArray">60
v32@0:8Q16@?<v@?B>24
@"<CSSmartSiriVolumeControllerDelegate>"
@"CSSmartSiriVolumeClient"
v40@0:8@"CSKeywordAnalyzerNDEAPI"16@"CSKeywordAnalyzerNDEAPIResult"24Q32
@60@0:8@16@24Q32Q40@48B56
@"<CSPhraseNDEAPIScorerDelegate>"
@"CSShadowMicScoreCreator"
v44@0:8@16@24B32@?36
v72@0:8@16@24@32B40Q44@52B60@64
@80@0:8@16@24@32B40Q44@52B60@64@?72
@"<CSADCompanionServiceProvider>"
@"<CSVoiceTriggerAwareZeroFilterDelegate>"
@"CSAudioZeroFilter"
@44@0:8Q16Q24f32f36f40
@72@0:8d16Q24@32q40@48@56d64
v32@0:8@"CSMediaPlayingMonitor"16q24
@28@0:8f16@"CSAsset"20
v24@0:8@"CSAsset"16
@"CSSmartSiriVolumeEstimate"40@0:8Q16@"NSNumber"24Q32
v28@0:8I16q20
v52@0:8@16q24B32Q36Q44
f24@0:8q16
f24@0:8f16f20
f20@0:8f16
f36@0:8f16f20f24f28f32
f44@0:8f16f20f24f28f32f36f40
f28@0:8f16f20f24
^f24@0:8@16
{unique_ptr<SmartSiriVolume, std::default_delete<SmartSiriVolume>>="__ptr_"{__compressed_pair<SmartSiriVolume *, std::default_delete<SmartSiriVolume>>="__value_"^{SmartSiriVolume}}}
{vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}
@"NSUserDefaults"
v48@0:8@16@24@32^v40
@144@0:8B16B20B24q28@36@44@52@60I68I72@76d84d92d100Q108Q116@124B132q136
@28@0:8B16@20
@"<AFBluetoothDevice>"
@68@0:8Q16@24@32@40@48B56@60
@"CSVoiceTriggerFirstPassMetrics"
v72@0:8d16Q24@32d40Q48d56@64
@"OSDFeatures"
@"_EAREndpointer"
@"CSServerEndpointFeatures"
@"NSDate"
B32@0:8d16^@24
@"<CSRemoteRecordClientDelegate>"
v24@0:8@"<NviDataReceiver>"16
@"NviContext"
@32@0:8q16Q24
@"CSSiriMobileBluetoothDeviceDataSource"
v24@0:8@"CSAssetManager"16
v48@0:8@"NSString"16@"NSString"24@"NSURL"32@?<v@?@"NSError"dq>40
v48@0:8@"NSString"16@"NSURL"24@"NSString"32@?<v@?@"NSError"dq>40
v40@0:8@"NSString"16@"NSURL"24@?<v@?@"NSError"dq>32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@?<v@?@"NSError">40
v32@0:8@"NSURL"16@?<v@?@"NSError"dq>24
v80@0:8Q16Q24q32@40@48@56@64@?72
v64@0:8Q16Q24@32@40@48@?56
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSString"@"NSError">24
v80@0:8Q16Q24q32@"NSString"40@"NSUUID"48@"NSArray"56@"NSArray"64@?<v@?@"CSVoiceTriggerRTModel"@"CSVoiceTriggerRTModel"@"NSError">72
v64@0:8Q16Q24@"NSString"32@"NSArray"40@"NSArray"48@?<v@?@"CSVoiceTriggerRTModel"@"CSVoiceTriggerRTModel"@"NSError">56
v40@0:8@"NSArray"16@"NSString"24@?<v@?@"NSString"@"NSError">32
B32@0:8@16@?24
B20@0:8B16
v28@0:8@16i24
v28@0:8@"AFNotifyObserver"16i24
v40@0:8@"AFNotifyObserver"16Q24Q32
@"<CSAttSiriSessionStateDelegate>"
@"AFNotifyObserver"
Vv24@0:8@?16
Vv32@0:8@16@?24
Vv40@0:8@16q24@?32
Vv24@0:8@?<v@?@"NSString">16
Vv32@0:8@"NSString"16@?<v@?@"NSString">24
Vv40@0:8@"NSArray"16q24@?<v@?@"NSError">32
Vv24@0:8@?<v@?Q>16
Vv24@0:8@?<v@?>16
Vv24@0:8@?<v@?B>16
Vv24@0:8@?<v@?q>16
@44@0:8@16@24B32Q36
v48@0:8@16d24d32@?40
@48@0:8@16d24d32@?40
@"AFHeartBeat"
@28@0:8f16i20f24
v32@0:8r^v16Q24
{unique_ptr<corespeech::CSAudioCircularBufferImpl<unsigned char>, std::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>>="__ptr_"{__compressed_pair<corespeech::CSAudioCircularBufferImpl<unsigned char> *, std::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>>="__value_"^v}}
@"CSAudioStreamRequest"
@"CSAudioStartStreamOption"
@"CSSiriAudioRoute"
@72@0:8q16q24d32@40d48@56q64
@64@0:8q16q24d32@40d48@56
@"CSActivationEvent"
v64@0:8@16Q24Q32@40@48@?56
v72@0:8Q16Q24@32@40@48@56@?64
@"CoreSpeechXPCFakeModelMonitor"
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}16@0:8
v24@0:8^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}16
^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}
v52@0:8@16@24Q32Q40i48
v52@0:8@"CSAudioPreprocessor"16@"NSData"24Q32Q40i48
@56@0:8Q16q24@32@40@48
@48@0:8Q16q24@32@40
B32@0:8Q16q24
@"<CSAudioProviderDelegate>"
@"CSAudioPreprocessor"
@"CSOSTransaction"
@"CSAudioRecordDeviceIndicator"
@"CSMicUsageReporter"
@"CSADPPreventStandbyAssertion"
@"CSPhoneCallStateMonitor"
@56@0:8Q16@24@32@40Q48
I24@0:8Q16
v32@0:8@"OSDAnalyzer"16@"OSDFeatures"24
v32@0:8@"OSDAnalyzer"16d24
@"OSDAnalyzer"
@48@0:8q16@24@32@40
v40@0:8@16d24@32
v32@0:8@"<CSEndpointAnalyzer>"16d24
v40@0:8@"<CSEndpointAnalyzer>"16d24@"CSEndpointerMetrics"32
@"<CSEndpointAnalyzerImpl>"
v40@0:8^{BTAccessoryManagerImpl=}16i24^{BTDeviceImpl=}28i36
v24@0:8^{BTDeviceImpl=}16
^{BTAccessoryManagerImpl=}
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
v32@0:8q16@?24
@"AFBluetoothDeviceInfo"16@0:8
v24@0:8@?<v@?@"AFBluetoothDeviceInfo">16
v24@0:8@?<v@?@"AFBluetoothHeadphoneInEarDetectionState">16
v24@0:8@?<v@?q>16
v32@0:8q16@?<v@?@"NSError">24
v24@0:8@"<AFBluetoothDeviceObserver>"16
@"AFBluetoothDeviceInfo"
@"AFBluetoothHeadphoneInEarDetectionState"
v44@0:8B16@20@28@36
@"AFInstanceContext"
v40@0:8@"NSString"16@"NSString"24@?<v@?B@"NSError"@"NSUUID">32
v40@0:8@"NSURL"16@"NSUUID"24@?<v@?B@"NSError"QQ>32
v24@0:8@?<v@?@"NSMutableArray">16
v36@0:8^f16Q24f32
v24@0:8@"EARClientSilenceFeatures"16
@20@0:8f16
@"<CSSPGEndpointAnalyzerDelegate>"
@"EARCaesuraSilencePosteriorGenerator"
Vv20@0:8i16
Vv32@0:8@16i24i28
Vv32@0:8@"NSData"16i24i28
Vv24@0:8@?<v@?@"NSData">16
v24@0:8^{AudioStreamBasicDescription=dIIIIIIII}16
@"<CSSiriAcousticFingerprinterDelegate>"
@"NSSet"
v40@0:8@16@24d32
v40@0:8@"CSSiriAcousticFingerprinter"16@"NSData"24d32
v44@0:8@16@24f32Q36
v52@0:8@16@24f32Q36@44
v36@0:8@16d24B32
v36@0:8@16B24@28
v48@0:8@16@24q32Q40
v40@0:8@16q24d32
v40@0:8Q16Q24@?32
v32@0:8@"CSSpeechController"16@"NSData"24
v40@0:8@"CSSpeechController"16@"NSData"24Q32
v44@0:8@"CSSpeechController"16@"NSArray"24f32Q36
v52@0:8@"CSSpeechController"16@"NSArray"24f32Q36@"CSAudioDeviceInfo"44
v32@0:8@"CSSpeechController"16d24
v36@0:8@"CSSpeechController"16d24B32
v36@0:8@"CSSpeechController"16B24@"NSError"28
v44@0:8@"CSSpeechController"16@"CSAudioDeviceInfo"24B32@"NSError"36
v40@0:8@"CSSpeechController"16q24Q32
v48@0:8@"CSSpeechController"16@"CSAudioDeviceInfo"24q32Q40
v24@0:8@"CSSpeechController"16
v40@0:8@"CSSpeechController"16q24d32
v32@0:8@"CSSpeechController"16q24
v32@0:8@"CSSpeechController"16Q24
v40@0:8@"CSSpeechController"16q24@"NSError"32
v32@0:8@"CSSpeechController"16@"NSDictionary"24
v28@0:8@"CSSpeechController"16B24
v40@0:8Q16Q24@?<v@?@"NSError">32
v36@0:8@"NSString"16@"NSDictionary"24B32
v32@0:8{AFTimeRange=dd}16
v28@0:8d16B24
v36@0:8q16B24Q28
@56@0:8@"NSObject<OS_dispatch_queue>"16@"CSSpeechController"24@"CSAudioSessionController"32@"CSSiriAudioPlaybackService"40@"AFExperimentContext"48
v24@0:8@"<CSSiriSpeechCapturingDelegate>"16
v24@0:8@"AFSpeechRequestOptions"16
v24@0:8@?<v@?dd>16
v36@0:8@"SASResultCandidate"16B24@?<v@?BB@"NSArray">28
@20@0:8B16
v28@0:8q16B24
v28@0:8(?={?=SS}I)16Q20
i20@0:8(?={?=SS}I)16
v28@0:8(?={?=SS}I)16@20
v32@0:8q16@24
B40@0:8@16@?24^@32
@40@0:8q16q24B32B36
v64@0:8@16@24q32Q40q48@56
i28@0:8i16@20
v44@0:8@16q24Q32B40
v40@0:8q16q24@32
v32@0:8q16d24
v48@0:8@16d24d32@40
v32@0:8@?16d24
B40@0:8@16Q24@?32
@"<CSSiriSpeechCapturingDelegate>"
@"CSSpeechController"
@"CSSiriAudioPlaybackService"
@"<CSEndpointAnalyzer>"
@"CSSiriSpeechRecordingContext"
@"CSSiriAudioActivationInfo"
@"CSSiriAcousticFingerprinter"
@"AFWatchdogTimer"
@"CSEndpointerMetrics"
@"CSEndpointDelayReporter"
@"SASResultCandidate"
@"AFSpeechSynthesisRecord"
@"AFBluetoothWirelessSplitterSessionStateObserver"
v40@0:8@16q24q32
v40@0:8@"AFMemoryPressureObserver"16q24q32
v32@0:8@"AFAudioPlaybackRequest"16@?<v@?@"NSError">24
v40@0:8@"AFAudioPlaybackRequest"16Q24@?<v@?@"NSError">32
v28@0:8@"AFAudioPlaybackRequest"16B24
v56@0:8@16Q24@?32@?40@?48
@56@0:8@16Q24Q32Q40@48
@"<CSStartOfSpeechDetectorDelegate>"
@"<CSVoiceTriggerXPCClientDelegate>"
@60@0:8@16@24@32@40B48@52
@44@0:8@16B24@28@36
@52@0:8@16B24@28@36@44
v32@0:8@16B24f28
v28@0:8@"CSOpportuneSpeakListener"16B24
v32@0:8@"CSOpportuneSpeakListener"16B24f28
@"CSOpportuneSpeakListener"
v44@0:8@16B24Q28Q36
@"<CSAudioConverterDelegate>"
v48@0:8@16@24^@32^@40
v48@0:8Q16Q24Q32@?40
v48@0:8@16@24Q32@?40
@40@0:8d16d24d32
v36@0:8@16i24d28
v36@0:8@16i24@28
v28@0:8@"AVVoiceController"16B24
v36@0:8@"AVVoiceController"16B24@"NSError"28
v32@0:8@"AVVoiceController"16q24
v24@0:8@"AVVoiceController"16
v28@0:8@"AVVoiceController"16i24
v36@0:8@"AVVoiceController"16i24d28
v32@0:8@"AVVoiceController"16@"NSError"24
v36@0:8@"AVVoiceController"16i24@"NSError"28
v40@0:8@"AVVoiceController"16@"AVVCAlertInformation"24@"NSError"32
v32@0:8@"AVVoiceController"16@"NSDictionary"24
v32@0:8@"AVVoiceController"16@"AVVCAudioBuffer"24
v28@0:8B16@"NSArray"20
v44@0:8@"AVVoiceController"16Q24B32@"NSError"36
v40@0:8@"AVVoiceController"16Q24q32
v40@0:8@"AVVoiceController"16Q24@"AVVCAudioBuffer"32
v32@0:8@"AVVoiceController"16Q24
v40@0:8@"CSAudioFileReader"16@"NSData"24Q32
v36@0:8@"CSAudioFileReader"16B24@"NSError"28
v32@0:8@"CSAudioFileReader"16q24
v32@0:8Q16@"NSError"24
v32@0:8@"NSData"16Q24
v24@0:8@"CSRemoteRecordClient"16
v28@0:8@"CSUserSessionActiveMonitor"16B24
v24@0:8@"<CSAudioServerCrashEventProvidingDelegate>"16
v24@0:8@"<CSAudioSessionEventProvidingDelegate>"16
v40@0:8Q16B24@28B36
v60@0:8@16Q24@32Q40Q48i56
v36@0:8B16Q20@28
v32@0:8q16Q24
@"AVVoiceController"
{AudioBufferList="mNumberBuffers"I"mBuffers"[1{AudioBuffer="mNumberChannels"I"mDataByteSize"I"mData"^v}]}
@"CSRemoteRecordClient"
@"CSAudioFileReader"
@"CSReusableBufferPool"
@"<CSAudioServerCrashEventProvidingDelegate>"
@"<CSAudioSessionEventProvidingDelegate>"
v48@0:8@16@24@32@40
v52@0:8@16@24@32B40@44
v48@0:8@"CSOpportuneSpeakBehaviorMonitor"16@"CSAudioRecordContext"24@"NSString"32@"CSAudioStartStreamOption"40
v52@0:8@"CSOpportuneSpeakBehaviorMonitor"16@"CSAudioRecordContext"24@"NSString"32B40@"CSAudioStartStreamOption"44
v32@0:8@"CSOpportuneSpeakBehaviorMonitor"16@"CSAudioStopStreamOption"24
xeps
supo
supo
mcpl
33s@
fff?
333?
333333
333333
333333
ffffff
?(knN
@mcpl
frmaEVAWffac
fff?
mcpl,
!$'*-
<<<9
++++++L
@mcpl
mcpl
mcplsupoxeps
Median
+[CSUtils(Statistics) distributionDictionary:]
average:
stddev:
q24@?0@8@16
v8@?0
-[CSGestureMonitor isTriggerHandheld]
[SplitterEnabled(%d)]
[Device%d(%@) DoAP(%d)]
[SplitterState:%d]
CSAudioInjectionBuiltInEngine
-[CSAudioInjectionBuiltInEngine dealloc]
SampleCount
HostTime
-[CSAudioInjectionBuiltInEngine getBestSampleCountWithOption:]
-[CSAudioInjectionBuiltInEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:]_block_invoke
trigger-time
-[NviDataLogger logData:]
-[NviDataLogger stream:handleEvent:]
CSMicUsageReporter
-[CSMicUsageReporter _reportsDynamicActivityAttribute:bundleId:]
CORESPEECH_DAEMON_ACCESS_AUDIO_FOR_DICTATION
CORESPEECH_DAEMON_ACCESS_AUDIO_FOR_SIRI
CORESPEECH_DAEMON_ACCESS_AUDIO_FOR_SIRI_AND_DICTATION
STDynamicActivityAttributionPublisher
Class getSTDynamicActivityAttributionPublisherClass(void)_block_invoke
CSMicUsageReporter.m
Unable to find class %s
void *SystemStatusLibrary(void)
-[CSGestureMonitorPhone _startMonitoringWithQueue:]
v16@?0@8
CMWakeGestureManager
Class getCMWakeGestureManagerClass(void)_block_invoke
CSGestureMonitorPhone.m
void *CoreMotionLibrary(void)
CSVoiceTriggerAssetHandler
-[CSVoiceTriggerAssetHandler getVoiceTriggerAssetWithEndpointId:completion:]
CSVoiceTriggerAssetHandler.m
CSAudioSessionController Queue
-[CSAudioSessionController dealloc]
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]_block_invoke
-[CSAudioSessionController _createXPCClientConnectionIfNeeded]
-[CSAudioSessionController _startMonitoring]
-[CSAudioSessionController _stopMonitoring]
-[CSAudioSessionController _registerInterruptionNotification]
-[CSAudioSessionController _registerAudioRouteChangeNotification]
-[CSAudioSessionController _handleInterruption:]_block_invoke
-[CSAudioSessionController _mediaServicesWereLost:]_block_invoke
-[CSAudioSessionController _mediaServicesWereReset:]_block_invoke
-[CSAudioSessionController _audioRouteChanged:]_block_invoke
-[CSAudioSessionController _teardownXPCClientIfNeeded]
-[CSAudioSessionController CSXPCClient:didDisconnect:]_block_invoke
-[CSAudioSessionController coreSpeechDaemonStateMonitor:didReceiveStateChanged:]_block_invoke
com.apple.siri.SiriDebug.SpeakerVoiceGradingTrigger
com.apple.siri.SiriDebug.RemoteNearMissGradingTrigger
com.apple.siri.SiriDebug.VoiceProfileAddedTrigger
com.apple.siri.SiriDebug.VoiceProfileSyncTrigger
com.apple.siri.SiriDebug.FeedbackBanner.NearMiss.Notify
com.apple.siri.SiriDebug.FeedbackBanner.Rejected.Notify
com.apple.siri.SiriDebug
+[CSSiriDebugConnection launchSiriDebugAppWithMessage:]_block_invoke
v24@?0@"AFSiriResponse"8@"NSError"16
triggeredPhrase
AttSiri
AttSiriJS
AttSiriCC
AttSiriHS
mitigationModelConfigFile
defaultAFTMValue
nldaConfigFile
allowKeywordFile
allowKeywordCount
useSpkrId
ouresConfig.json
nldaConfig.json
allowList.txt
CSMediaPlayingMonitor queue
-[CSMediaPlayingMonitor initializeMediaPlayingState]_block_invoke_2
v12@?0I8
-[CSMediaPlayingMonitor _startMonitoringWithQueue:]
-[CSMediaPlayingMonitor _stopMonitoring]
-[CSMediaPlayingMonitor _notePossiblePlayPausedStateChange:]
PLAYING
NOT PLAYING
audioURL : %@, numberOfChannels : %lu, scaleFactor: %f
announcemessage
Audio/Video
Alarm
CSVolumeMonitor queue
-[CSVolumeMonitor _startMonitoringWithQueue:]
-[CSVolumeMonitor fetchVolumeFromAVSystemControllerForAudioCategory:]_block_invoke
-[CSVolumeMonitor systemControllerDied:]
-[CSVolumeMonitor startObservingSystemVolumes]
-[CSVolumeMonitor _startObservingSystemControllerLifecycle]
CSTimerMonitor queue
-[CSTimerMonitor _startMonitoringWithQueue:]
-[CSTimerMonitor _stopMonitoring]
CSAlarmMonitor queue
-[CSAlarmMonitor _startMonitoringWithQueue:]
-[CSAlarmMonitor _stopMonitoring]
-[CSAudioStreamHolding dealloc]
+[CSUserIdentityClassifier pickTopScoringProfileIdFromScores:]
+[CSUserIdentityClassifier classifyUserIdentityFor:withScores:withAsset:]
Confident
Known
Unknown
Unsure1
UnsureN
+[CSUserIdentityClassifier stringFromClassificationCategory:]
v16@?0@"NSError"8
-[CSAttSiriServiceClient init]_block_invoke
-[CSAttSiriServiceClient init]
-[CSAttSiriServiceClient startAttendingWithContext:]
com.apple.corespeech.corespeechd.attsiri.service
-[CSAttSiriServiceClient _setupAttSiriSvcXpcConnection]_block_invoke
-[CSAttSiriServiceClient attSiriDidDetectAttendingTrigger:]
-[CSAttSiriServiceClient attSiriAttendingTimeoutTriggered]
-[CSAttSiriServiceClient attSiriAttendingFailed]
firstPassTriggerSource
ApplicationProcessor
Remora
CSPreMyriadCoordinator Queue
-[CSPreMyriadCoordinator _clearPendingRemoraVoiceTrigger]
-[CSPreMyriadCoordinator handlePendingRemoraVoiceTriggerIfNeeded]
-[CSPreMyriadCoordinator handlePendingRemoraVoiceTriggerIfNeeded]_block_invoke
-[CSPreMyriadCoordinator _clearPendingBuiltInVoiceTrigger]
-[CSPreMyriadCoordinator handlePendingBuiltInVoiceTriggerIfNeeded]
-[CSPreMyriadCoordinator handlePendingBuiltInVoiceTriggerIfNeeded]_block_invoke
v32@?0@"NSString"8@"CSPreMyriadVoiceTriggerMetaData"16^B24
-[CSPreMyriadCoordinator secondPassDidStopForClient:deviceId:]
-[CSPreMyriadCoordinator secondPassDidStartForClient:deviceId:withFirstPassEstimate:]
CSAudioInjectionHearstEngine
-[CSAudioInjectionHearstEngine dealloc]
v20@?0B8@"NSError"12
-[CSAudioRecordContext(AVVC) avvcContextSettings]
voiceTriggerInfo
route
source
siriVolume.json
smartSiriVolume
noiseLevelChannelBitset
LKFSChannelBitset
DistanceChannelBitset
energyBufferSize
noiseLowerPercentile
noiseUpperPercentile
LKFSLowerPercentile
LKFSUpperPercentile
noiseTimeConstant
noiseMicSensitivityOffset
noiseMicSensitivityOffsetDeviceSimple
LKFSTimeConstant
LKFSMicSensitivityOffset
noiseTTSMappingInputRangeLow
noiseTTSMappingInputRangeHigh
noiseTTSMappingOutputRangeLow
noiseTTSMappingOutputRangeHigh
LKFSTTSMappingInputRangeLow
LKFSTTSMappingInputRangeHigh
LKFSTTSMappingOutputRangeLow
LKFSTTSMappingOutputRangeHigh
userOffsetInputRangeLow
userOffsetInputRangeHigh
userOffsetOutputRangeLow
userOffsetOutputRangeHigh
TTSVolumeLowerLimitDB
TTSVolumeUpperLimitDB
noiseWeight
SSVCAMaxFrameSize
SSVCAVoiceTriggerBasedTTSValidForSeconds
SSVCASmartSiriVolumeUnsyncedMetricLogsToRetain
SSVCASmartSiriVolumeSyncedMetricLogsToRetain
SSVCAVoiceTriggerInitialSilenceDurationSeconds
SSVCADistanceInputBufferDurationSeconds
SSVCAListenPollingIntervalAtStartInSeconds
SSVCADefaultZeroFloatingPointValue
SSVCAAnnouncementStatusFetchTimeoutMs
SSVCADefaultOutputTTSVolume
SSVCANoiseActivityCountThreshold
SSVCASpeakerDistanceFarBoostFactor
SSVCASpeakerDistanceMidBoostFactor
SSVCASpeakerDistanceNearBoostFactor
SSVCADistanceModelConfidenceThreshold
SSVCAMinimumLinearSoundLevel
SSVCAMaximumLinearSoundLevel
SSVCALinearToDecibelConstantMultiplier
SSVCADecibelToLinearLogBase
SSVCASignalToSigmoidNoiseDilationFactor
SSVCASignalToSigmoidMusicDilationFactorDeviceDefault
SSVCASignalToSigmoidMusicDilationFactorDeviceSimple
SSVCASignalToSigmoidMusicDilationFactorDeviceSimple2
SSVCASignalToSigmoidSpeechDilationFactor
SSVCASignalToSigmoidNoiseVSpread
SSVCASignalToSigmoidMusicVSpreadDeviceDefault
SSVCASignalToSigmoidMusicVSpreadDeviceSimple
SSVCASignalToSigmoidMusicVSpreadDeviceSimple2
SSVCASignalToSigmoidSpeechVSpread
SSVCASignalToSigmoidNoiseVOffset
SSVCASignalToSigmoidMusicVOffsetDeviceDefault
SSVCASignalToSigmoidMusicVOffsetDeviceSimple
SSVCASignalToSigmoidMusicVOffsetDeviceSimple2
SSVCASignalToSigmoidSpeechVOffset
SSVCASignalToSigmoidNoiseHOffset
SSVCASignalToSigmoidMusicHOffsetDeviceDefault
SSVCASignalToSigmoidMusicHOffsetDeviceSimple
SSVCASignalToSigmoidMusicHOffsetDeviceSimple2
SSVCASignalToSigmoidSpeechHOffset
SSVCASignalToSigmoidMusicSteepnessDeviceDefault
SSVCASignalToSigmoidMusicSteepnessDeviceSimple
SSVCASignalToSigmoidMusicSteepnessDeviceSimple2
SSVCASignalToSigmoidNoiseSteepness
SSVCASignalToSigmoidSpeechSteepness
SSVCADBToTTSMinimumOutput
SSVCADBToTTSMaximumOutput
SSVCADBToTTSTransitionPoint
SSVCADBToTTSPreTransitionOffset
SSVCADBToTTSPreTransitionMultiplier
SSVCADBToTTSPostTransitionOffset
SSVCADBToTTSPostTransitionDC
SSVCADBToTTSPostTransitionMultiplier
SSVCAMinimumDistanceUpdateWaitPeriodSeconds
SSVCANoiseActivityThreshold
SSVCANoiseResultsBufferSize
SSVCAMusicResultsBufferSize
SSVCADefaultSpeechStrength
SSVCADefaultMusicStrength
SSVCANoiseActivityHistoricalSampleCount
SSVCADspCoefsCount
SSVCADspNumStages
SSVCADistanceResultsBufferSize
SSVCAExponentialDistanceHistoryDegradationFactor
SSVCADistanceResultSampleCountTolerance
SSVCAMusicHistoricalSamplesInSeconds
SSVCADeviceSimpleOutputMinTargetDB
SSVCADeviceSimpleOutputMaxTargetDB
SSVCADeviceSimpleOutputSlope
SSVCADeviceSimple2OutputSlope
SSVCADeviceSimpleMinTargetDB
SSVCADeviceSimpleMaxTargetDB
SSVCADeviceSimpleDBToSystemVolSlope
SSVCADeviceSimpleMicSensitivityOffset
SSVCADeviceSimplePreTriggerSilenceSampleCount
SSVCADeviceSimple2OutputMinTargetDB
SSVCADeviceSimple2OutputMaxTargetDB
SSVCAMinTTSSystemVolume
SSVCAMaxTTSSystemVolume
SSVCAMinTTSSystemVolumeSimple2
SSVCAMaxTTSSystemVolumeSimple2
SSVCAUserIntentValidForSeconds
SSVCAUserIntentVolumeIncreaseFactor
SSVCAUserIntentVolumeDecreaseFactor
SSVCAUserIntentPermanentOffsetFactorDelta
SSVCAUserIntentPermanentOffsetFactorLowerBound
SSVCAUserIntentPermanentOffsetFactorUpperBound
SSVCADeviceSimpleMinTTSVolume
SSVCADeviceSimpleMaxTTSVolume
SSVCADeviceDefaultASVOffMinTTSVolume
SSVCADeviceSimpleASVOffMinTTSVolume
SSVCADeviceSimple2ASVOffMinTTSVolume
SSVCADeviceDefaultMicSensitivityOffset
SSVCAVolumeHalfLifeSeconds
SSVCAHistoricalVolumeBufferSize
SSVCAMaximumCompensatedSpeechLevelNearField
SSVCADeviceDefaultDropInCallAnnouncementMinTTSVolume
SSVCADeviceSimpleDropInCallAnnouncementMinTTSVolume
SSVCADeviceSimple2DropInCallAnnouncementMinTTSVolume
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicDilationFactorDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicVSpreadDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicVOffsetDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicHOffsetDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCASignalToSigmoidMusicSteepnessDeviceSimple]
-[CSAsset(SmartSiriVolume) SSVCADeviceSimpleASVOffMinTTSVolume]
-[CSAsset(SmartSiriVolume) _getNumberFromASVDictionaryForKey:category:default:]
recordDeviceInfo
playbackRoute
playbackDeviceTypeList
%@ {recordDeviceInfo = %@, playbackRoute = %@, playbackDevices = %@
-[CSSpeakerRecognitionProxy initWithDelegate:]
-[CSSpeakerRecognitionProxy startXPCConnection]
-[CSSpeakerRecognitionProxy invalidateXPCConnection]
-[CSSpeakerRecognitionProxy didReceiveSpeakerRecognitionScoreCard:]
-[CSSpeakerRecognitionProxy didFinishSpeakerRecognition:]
CSVoiceTriggerXPCService Queue
-[CSVoiceTriggerXPCService enableVoiceTrigger:withAssertion:xpcClient:]_block_invoke
-[CSVoiceTriggerXPCService setPhraseSpotterBypassing:timeout:xpcClient:]_block_invoke
-[CSVoiceTriggerXPCService setRaiseToSpeakBypassing:timeout:xpcClient:]_block_invoke
-[CSVoiceTriggerXPCService notifyVoiceTriggeredSiriSessionCancelledWithXpcClient:]_block_invoke
-[CSVoiceTriggerXPCService fetchVoiceTriggerDailyStats]_block_invoke
-[CSVoiceTriggerXPCService _createXPCClientConnectionIfNeeded:]
-[CSVoiceTriggerXPCService voiceTriggerXPCClient:didDisconnect:]_block_invoke
-[CSVoiceTriggerXPCService _teardownXPCClientIfNeeded]
v12@?0i8
-[CSVoiceTriggerAssetDownloadMonitor _startMonitoringWithQueue:]
-[CSVoiceTriggerAssetDownloadMonitor _stopMonitoring]
-[CSVoiceTriggerAssetDownloadMonitor _didInstalledNewVoiceTriggerAsset]
com.apple.MobileAsset.VoiceTriggerAssets.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsIPad.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerHSAssetsIPad.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsWatch.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerHSAssetsWatch.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsMarsh.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsMac.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerAssetsTV.ma.new-asset-installed
com.apple.MobileAsset.VoiceTriggerHSAssets.ma.new-asset-installed
Languages
Footprint
Premium
-[CSAudioPreprocessor resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:]
-[CSAudioPreprocessor flush]
ZeroFilterMetrics
-[CSAudioPreprocessor _fetchCurrentMetrics]
BeepCancellerMetrics
-[CSOtherAppRecordingStateMonitor handleOtherAppRecordingStateChange:]
-[CSOtherAppRecordingStateMonitor _systemControllerDied:]
First attempt with Error in connecting with CSBenchmarkService: 
Error in making synchronous call of CSBenchmarkService: 
com.apple.corespeech.benchmark.xpc
+[CSBenchmarkService pingpong:completion:]_block_invoke
TEST
v16@?0@"NSString"8
+[CSBenchmarkService pingpong:completion:]
+[CSBenchmarkService runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:]_block_invoke
v32@?0@"NSError"8d16q24
+[CSBenchmarkService runVTSecondPassModelWithConfig:locale:withUrl:completion:]_block_invoke
+[CSBenchmarkService runOSDAnalyzerWithConfig:withUrl:completion:]_block_invoke
+[CSBenchmarkService runODLDModelWithConfig:locale:inputText:completion:]_block_invoke
+[CSBenchmarkService runNovDetectorWithConfig:configRoot:withUrl:completion:]_block_invoke
+[CSBenchmarkService runAudioInjectionOnly:completion:]_block_invoke
set option : allowVoiceTriggerAssetsDownload ? %@;           allowEndpointAssetDownload ? %@;           allowLanguageDetectorAssetDownload ? %@;           allowAdBlockerAssetDownload ? %@;           allowSpeakerRecognitionAssetDownload ? %@
com.apple.assistant
Siri Global
 - %@
CSKeychainValueForAccountAndKey
B8@?0
-[CSSmartSiriVolumeEnablePolicyHomePod _addSmartSiriVolumeEnabledConditions]_block_invoke
-[CSContinuousAudioFingerprintEnabledPolicyHomePod _addContinousAudioFingerprintEnabledConditions]_block_invoke
CSBluetoothManager Queue
-[CSBluetoothManager getBTLocalDeviceWithCompletion:]
-[CSBluetoothManager getBTLocalDeviceWithCompletion:]_block_invoke
v16@?0^{BTLocalDeviceImpl=}8
-[CSBluetoothManager _getConnectedBluetoothDeviceAddressesFromLocalDevice:]
-[CSBluetoothManager _getAddressWithBTDevice:]
-[CSBluetoothManager _getWirelessSplitterInfoFromLocalDevice:]
-[CSBluetoothManager _detachBluetoothSession]
-[CSBluetoothManager _attachBluetoothSession]
CSBluetoothManager
-[CSBluetoothManager _sessionAttached:result:]
-[CSBluetoothManager _sessionDetached:]
-[CSBluetoothManager _sessionTerminated:]
-[CSBluetoothManager _setUpLocalDevice]
HID event callback queue
cancelled device
Created HID device successfully
Error : Failed in creating device
-[CSHostLauncherDarwin wakeHostForVoiceTrigger]
ReportDescriptor
RequestTimeout
HIDRelaySupport
HIDRelayUSBInterface
SiriHIDDevice
CSSiriAssertionMonitor queue
-[CSSiriAssertionMonitor init]
-[CSSiriAssertionMonitor _stopMonitoring]
-[CSSiriAssertionMonitor enableAssertionReceived]_block_invoke
-[CSSiriAssertionMonitor disableAssertionReceived]_block_invoke
com.apple.corespeech.CSAccessorySiriClientBehaviourMonitor
-[CSAccessorySiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:forAccessory:]_block_invoke
-[CSAccessorySiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAccessory:]_block_invoke
-[CSAccessorySiriClientBehaviorMonitor notifyWillStopStream:reason:forAccessory:]_block_invoke
-[CSAccessorySiriClientBehaviorMonitor notifyDidStopStream:reason:withEventUUID:forAccessory:]_block_invoke
-[CSSpeakerRecognitionAssetDownloadMonitor _startMonitoringWithQueue:]
-[CSSpeakerRecognitionAssetDownloadMonitor _stopMonitoring]
-[CSSpeakerRecognitionAssetDownloadMonitor _didInstalledNewAsset]
-[CSSpeakerRecognitionAssetDownloadMonitor trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
com.apple.MobileAsset.SpeakerRecognitionAssets.ma.new-asset-installed
CSAudioFileReader Queue
-[CSAudioFileReader initWithURL:]
-[CSAudioFileReader prepareRecording:]
-[CSAudioFileReader startRecording]
-[CSAudioFileReader _readAudioBufferAndFeed]
-[CSAudioFileReader stopRecording]
-[CSAdBlockerAssetDownloadMonitor _startMonitoringWithQueue:]
-[CSAdBlockerAssetDownloadMonitor _stopMonitoring]
-[CSAdBlockerAssetDownloadMonitor _didInstalledNewAdBlockerAsset]
-[CSAdBlockerAssetDownloadMonitor trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
com.apple.MobileAsset.AdBlockerAssets.ma.new-asset-installed
CSAudioRouteChangeMonitorImplWatch queue
-[CSAudioRouteChangeMonitorImplWatch activeAudioRouteDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImplWatch _startMonitoringWithQueue:]
-[CSAudioRouteChangeMonitorImplWatch _stopMonitoring]
-[CSAudioRouteChangeMonitorImplWatch _notifyHearstRoutedState:]
-[CSAudioRouteChangeMonitorImplWatch _notifySiriInputSourceOutOfBandState:]
-[CSAudioRouteChangeMonitorImplWatch _systemControllerDied:]
-[CSAudioSampleRateConverter _createSampleRateConverterWithInASBD:outASBD:]
CSAudioSampleRateConverter.m
Too many buffers
i32@?0^I8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16^^{AudioStreamPacketDescription}24
-[CSAudioSampleRateConverter convertSampleRateOfBuffer:]
CSLanguageDetectorAssetMonitor
v24@?0@"NSArray"8@"NSError"16
-[CSLanguageDetectorAssetMonitor startMonitor]_block_invoke
en-US
-[CSLanguageDetectorAssetMonitor _supportedLocale:]_block_invoke
v24@?0@"CSAsset"8@"NSError"16
com.apple.MobileAsset.LanguageDetectorAssets.ma.new-asset-installed
-[CSSiriSpeechRecordingContext dealloc]
v24@?0@"NSURL"8@"NSError"16
%@ (sessionUUID = %@)
-[CSSiriSpeechRecordingContext initWithSessionUUID:turnIdentifier:]
com.apple.assistant.request.speech-context
-[CSSiriSpeechRecordingContext becomeCurrent]
-[CSSiriSpeechRecordingContext resignCurrent]
-[CSSiriSpeechRecordingContext updateStartSpeechId:]
-[CSSiriSpeechRecordingContext updateSelectedResultCandidateId:]
-[CSSiriSpeechRecordingContext updateAccessToRecordedAudioForVoiceIdentificationTraining:forResultCandidateId:sharedUserId:]
-[CSSiriSpeechRecordingContext getAudioRecordRouteAndDeviceIdentificationWithCompletion:]_block_invoke
-[CSSiriSpeechRecordingContext acquireRecordedAudioWithHandler:]
-[CSSiriSpeechRecordingContext acquireRecordedAudioWithHandler:]_block_invoke_2
v16@?0q8
-[CSSiriSpeechRecordingContext updateAudioRecordContext:]
-[CSSiriSpeechRecordingContext updateAudioRecordDeviceInfo:]
-[CSSiriSpeechRecordingContext updateVoiceTriggerInfo:]
-[CSSiriSpeechRecordingContext updateRecordingInfo:]
-[CSSiriSpeechRecordingContext updateRecordingSettings:]
-[CSSiriSpeechRecordingContext willPrepareAndStartRecordingWithAudioActivationInfo:]
Start Recording
sessionUUID
v16@?0@"<AFAssertionContextMutating>"8
-[CSSiriSpeechRecordingContext willPrepareAndStartRecordingWithAudioActivationInfo:]_block_invoke_2
-[CSSiriSpeechRecordingContext willPrepareAndStartRecordingWithAudioActivationInfo:]_block_invoke
v24@?0@"AFAssertionContext"8@"NSError"16
-[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]
Two Shot Detection
-[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]_block_invoke_2
-[CSSiriSpeechRecordingContext didDetectTwoShotWithAudioActivationInfo:atTime:]_block_invoke
-[CSSiriSpeechRecordingContext willStopRecordingAtHostTime:]
Stop Recording
-[CSSiriSpeechRecordingContext didStopRecordingWithError:]
-[CSSiriSpeechRecordingContext relinquishAudioSessionAssertionsWithContext:]
-[CSSiriSpeechRecordingContext relinquishAudioSessionAssertionsWithError:]
-[CSSiriSpeechRecordingContext beginRecordingAudioWithAudioStreamBasicDescription:]
-[CSSiriSpeechRecordingContext endRecordingAudio]
-[CSSiriSpeechRecordingContext endRecordingAudio]_block_invoke_2
-[CSSiriSpeechRecordingContext endRecordingAudio]_block_invoke
%@.wav
@"NSString"8@?0
-[CSSiriSpeechRecordingContext _finalizeAudioFileWriterWithCompletion:]
v32@?0@"NSFileHandle"8@"NSURL"16@"NSError"24
-[CSSiriSpeechRecordingContext instrumentSiriCueForAlertType:]_block_invoke
-[CSSiriSpeechRecordingContext emitRequestLinkEventForMHUUID:]
-[CSSiriSpeechRecordingContext _didBecomeCurrent]
-[CSSiriSpeechRecordingContext _didResignCurrent]
Donating recorded audio to CoreSpeech
-[CSSiriSpeechRecordingContext _didResignCurrent]_block_invoke_2
v12@?0B8
-[CSSiriSpeechRecordingContext _donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:]_block_invoke
ALLOWED
DENIED
-[CSSiriSpeechRecordingContext _donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:]_block_invoke_2
-[CSSiriSpeechRecordingContext _removeRecordedAudio]
com.apple.CoreSpeech.Connection.Listener
-[CSSmartSiriVolumeClient init]
-[CSSmartSiriVolumeClient getVolumeForTTSType:withContext:]_block_invoke
v24@?0@"NSError"8@"CSSmartSiriVolumeEstimate"16
-[CSSmartSiriVolumeClient setSmartSiriVolumePercentage:]_block_invoke
-[CSSmartSiriVolumeClient setSmartSiriVolumeDirection:]_block_invoke
-[CSSmartSiriVolumeClient setPermanentVolumeOffsetWithDirection:]_block_invoke
-[CSSmartSiriVolumeClient didTTSVolumeChangeForReason:]_block_invoke
-[CSSmartSiriVolumeClient _getRemoteServiceProxyObject]_block_invoke
-[CSSmartSiriVolumeClient _getRemoteServiceProxyObject]
com.apple.corespeech.corespeechd.ssv.service
-[CSSmartSiriVolumeClient _createClientConnection]_block_invoke
-[CSSmartSiriVolumeClient _createClientConnection]_block_invoke_2
CSAudioInjectionProvider
ATVRemoteInput
BuiltInMic
-[CSAudioInjectionProvider dealloc]
-[CSAudioInjectionProvider stop]
-[CSAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]
-[CSAudioInjectionProvider stopAudioStreamWithRecordDeviceIndicator:error:]
BuiltInSpeaker
-[NSString(XPCObject) _cs_initWithXPCObject:]
RemoteVAD Align Queue
-[CSOpportuneSpeakListener startListenWithOption:completion:]
-[CSOpportuneSpeakListener _startRequestWithCompletion:]_block_invoke
-[CSOpportuneSpeakListener _startRequestWithCompletion:]
-[CSOpportuneSpeakListener stopListenWithStateReset:completion:]_block_invoke
-[CSOpportuneSpeakListener stopListenWithStateReset:completion:]
-[CSOpportuneSpeakListener audioStreamProvider:audioBufferAvailable:]
-[CSOpportuneSpeakListener spgEndpointAnalyzer:hasSilenceScoreEstimate:clientProcessedAudioTimeMS:]
com.apple.corespeech.corespeechd.voiceid.xpc
v16@?0@"NSObject<OS_xpc_object>"8
-[CSVoiceIdXPCClient _handleListenerEvent:]
-[CSVoiceIdXPCClient _handleListenerError:]
utterancePath
voiceTriggerEventInfo
otherCtxt
audioRecordCtx
-[CSVoiceIdXPCClient _notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:]
type
body
result
resultErrorDomain
resultErrorCode
-[CSShadowMicScoreCreator calculateShadowMicScore]
-[CSBluetoothWirelessSplitterMonitorImpIOS updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
CSBluetoothWirelessSplitterMonitorImpIOS.m
-[CSBluetoothWirelessSplitterMonitorImpIOS splitterState:]_block_invoke
v16@?0@"CSBluetoothWirelessSplitterInfo"8
-[CSBluetoothWirelessSplitterMonitorImpIOS _startMonitoringWithQueue:]_block_invoke
-[CSBluetoothWirelessSplitterMonitorImpIOS _startMonitoringWithQueue:]
-[CSBluetoothWirelessSplitterMonitorImpIOS _stopMonitoring]
v20@?0Q8B16
com.apple.bluetooth.WirelessSplitterOn
NviError
-[CSNNVADEndpointAnalyzer init]
-[CSNNVADEndpointAnalyzer preheat]
-[CSNNVADEndpointAnalyzer reset]
-[CSNNVADEndpointAnalyzer processAudioSamplesAsynchronously:]
-[CSNNVADEndpointAnalyzer recordingStoppedForReason:]
-[CSNNVADEndpointAnalyzer stopEndpointer]
-[CSNNVADEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]
com.apple.corespeech.corespeechd.activation.xpc
-[CSActivationXPCClient dealloc]
-[CSActivationXPCClient _handleListenerEvent:]
-[CSActivationXPCClient _handleListenerError:]
-[CSActivationXPCClient notifyActivationEvent:completion:]
event
modelHash
dictationPriors
earLoggingInfo
interactionId
HistBufferSizeinSecs
NumLeadingFrames
MinSpeechFrames
NumLatestLanguages
CSLanguageDetector
dummy-version
-[CSLanguageDetector _startMonitorLanguageDetectorAssetDownload]
-[CSLanguageDetector _setupLanguageDetectorWithOption:]
-[CSLanguageDetector resetForNewRequest:]_block_invoke_3
-[CSLanguageDetector cancelCurrentRequest]_block_invoke
-[CSLanguageDetector setInteractionIDforCurrentRequest:]_block_invoke
-[CSLanguageDetector _initializeStartOfSpeechDetector:samplingRate:]
-[CSLanguageDetector _constructLangPriors]
-[CSLanguageDetector _setNumLatestLangFromConfigFile:]
CSLanguageDetector.m
Unexpected!! Received dir for: %@
-[CSLanguageDetector _readJsonDictionaryAt:]
-[CSLanguageDetector _logSoSResult:toPath:]
-[CSLanguageDetector _logLanguageDetectorMetricsForLoggingInfo:]
-[CSLanguageDetector languageDetector:result:]
-[CSLanguageDetector languageDetectorDidCompleteProcessing:loggingInfo:]_block_invoke
SpgRegportedStartSampleId
EffectiveStartSampleId
-result.json
-[CSLanguageDetector startOfSpeechDetector:foundStartSampleAt:]_block_invoke
-result.wav
+[CSUtils(LanguageCode) getSiriLanguageWithFallback:]
+[CSUtils(LanguageCode) getSiriLanguageWithEndpointId:fallbackLanguage:]
-[CSBluetoothWirelessSplitterMonitorImplDarwin updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
-[CSBluetoothWirelessSplitterMonitorImplDarwin splitterState]
-[CSBluetoothWirelessSplitterMonitorImplDarwin _startMonitoringWithQueue:]
-[CSBluetoothWirelessSplitterMonitorImplDarwin _stopMonitoring]
CSStopRecordingReasonDefault
CSStopRecordingForClientEndpoint
CSStopRecordingForServerEndpoint
CSStopRecordingForReleaseAudioSession
CSStopRecordingForRequestCancellation
, %llu
, %f}
triggerEndMachTime
-[CSMyriadSelfTriggerCoordinator selfTriggerDetector:didDetectSelfTrigger:]
com.apple.siri.corespeech.selftrigger
FirstPktLatency
TrailingPktLatency
TrailingPktSpeechLatency
-[CSEndpointLatencyInfo addPktInfoWithTimestamp:arrivalTimestamp:currentMachTime:]
-[CSEndpointLatencyInfo report]
-[CSCommandControlStreamEventMonitor isStreaming]
CSAVVCRecordingClientMonitor Queue
-[CSAVVCRecordingClientMonitor _startMonitoringWithQueue:]_block_invoke_2
v24@?0Q8@"NSError"16
v20@?0B8Q12
-[CSAVVCRecordingClientMonitor _startMonitoringWithQueue:]
-[CSAVVCRecordingClientMonitor _stopMonitoring]
-[CSAVVCRecordingClientMonitor CSAudioServerCrashMonitorDidReceiveServerCrash:]
-[CSAVVCRecordingClientMonitor _didReceiveAVVCRecordingClientNumberChange:]
CSSiriAudioFileWriterErrorDomain
CSSiriAudioFileWriterExtAudioFileErrorDomain
SavedAudioFile
CSSiriAudioFileWriter.m
Invalid parameter not satisfying: %@
type != AFAudioFileTypeNone
CSSiriAudioFileWriterQueue
-[CSSiriAudioFileWriter _initWithType:pathGenerator:xorFileHandle:priority:]_block_invoke
path
-[CSSiriAudioFileWriter _close]
-[CSSiriAudioFileWriter _delete]
-[CSSiriAudioFileWriter configureWithAudioStreamBasicDescription:]
AudioFile Already configured
-[CSSiriAudioFileWriter configureWithAudioStreamBasicDescription:]_block_invoke
-[CSSiriAudioFileWriter appendAudioData:]_block_invoke
-[CSSiriAudioFileWriter flushWithCompletion:]_block_invoke
_AudioStreamBasicDescriptionForAFAudioFileType
com.apple.corespeech.corespeechservices
com.apple.corespeech.xpc
+[CSCoreSpeechServices installedVoiceTriggerAssetForLanguageCode:completion:]_block_invoke
reason
CoreSpeechXPC service invalidated
v32@?0@"NSString"8@"NSString"16@"NSError"24
+[CSCoreSpeechServices fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]_block_invoke
v24@?0@"NSString"8@"NSError"16
+[CSCoreSpeechServices getCurrentVoiceTriggerLocaleWithEndpointId:completion:]
+[CSCoreSpeechServices getCurrentVoiceTriggerLocaleWithEndpointId:completion:]_block_invoke
+[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:endpointId:downloadedModels:preinstalledModels:completion:]_block_invoke
v32@?0@"CSVoiceTriggerRTModel"8@"CSVoiceTriggerRTModel"16@"NSError"24
+[CSCoreSpeechServices voiceTriggerRTModelForVersion:minorVersion:downloadedModels:preinstalledModels:completion:]_block_invoke
+[CSCoreSpeechServices voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]_block_invoke
+[CSCoreSpeechServices voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]
+[CSCoreSpeechServices requestUpdatedSATAudio]_block_invoke
+[CSCoreSpeechServices getFirstPassRunningMode]_block_invoke
CSHangUpEnabledMonitor queue
-[CSHangUpEnabledMonitor _checkCanUseVoiceTriggerDuringCallEnabled]
-[CSHangUpEnabledMonitor _voiceTriggerDuringCallEnabledDidChange]_block_invoke
+[CSAudioStreamRequest defaultRequestWithContext:]
+[CSAudioStreamRequest requestForLpcmRecordSettingsWithContext:]
+[CSAudioStreamRequest requestForOpusRecordSettingsWithContext:]
+[CSAudioStreamRequest requestForSpeexRecordSettingsWithContext:]
[requiresHistoricalBuffer = %@]
[useCustomizedRecordSettings = %@]
[lpcmIsFloat = %@]
[isSiri = %@]
[sampleRate = %lf]
[numberOfChannels = %lu]
requiresHistoricalBuffer
useCustomizedRecordSettings
audioFormat
sampleRate
lpcmBitDepth
lpcmIsFloat
NumberOfChannels
encoderBitRate
isSiri
recordContext
CSSpeechManager Asset Query Queue
-[CSSpeechManager startManager]
-[CSSpeechManager registerSpeechController:]
-[CSSpeechManager registerSiriClientProxy:]
v32@?0@"NSNumber"8@"CSAudioProvider"16^B24
-[CSSpeechManager audioProviderWithContext:error:]
-[CSSpeechManager audioProviderWithContext:error:]_block_invoke
v32@?0Q8q16@"NSError"24
-[CSSpeechManager audioProviderWithContext:error:]_block_invoke_2
-[CSSpeechManager audioProviderWithStreamID:]_block_invoke
-[CSSpeechManager _getAudioRecorderWithError:]
-[CSSpeechManager audioProviderInvalidated:streamHandleId:]_block_invoke
-[CSSpeechManager audioRecorderWillBeDestroyed:]_block_invoke
-[CSSpeechManager voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:]
-[CSSpeechManager _handleClearLoggingFileTimer]
-[CSSpeechManager _createClearLoggingFileTimer]
-[CSSpeechManager _startClearLoggingFilesTimer]
-[CSSpeechEndHostTimeEstimator notifyTrailingSilenceDurationAtEndpoint:]
-[CSSpeechEndHostTimeEstimator estimatedSpeechEndHostTime]
CSCommandControlListener
-[CSCommandControlListener startListenWithOption:completion:]
-[CSCommandControlListener _startRequestWithCompletion:]_block_invoke
-[CSCommandControlListener _startRequestWithCompletion:]
-[CSCommandControlListener stopListenWithCompletion:]
-[CSCommandControlListener stopListenWithCompletion:]_block_invoke
-[CSCommandControlListener audioStreamProvider:didStopStreamUnexpectly:]_block_invoke
-[CSCommandControlListener CSXPCClient:didDisconnect:]_block_invoke
FlexKwdSpotter
recognizer_flexKwd.json
flexKwdConfigFile
flexKwd.Thresholds
flexKwdThresholdsFile
Serial CSAssetManager queue
-[CSAssetManager initWithDownloadOption:]
-[CSAssetManager initWithDownloadOption:]_block_invoke
ENABLED
DISABLED
-[CSAssetManager setAssetDownloadingOption:]_block_invoke
-[CSAssetManager _fetchRemoteMetaData]
-[CSAssetManager _canFetchRemoteAsset:]
-[CSAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSAssetManager _createPeriodicalDownloadTimer]
-[CSAssetManager _createPeriodicalDownloadTimer]_block_invoke
-[CSAssetManager _startPeriodicalDownload]
-[CSAssetManager _stopPeriodicalDownload]
RecordedAudio
TrimmedAudio
com.apple.corespeech.endpointer.xpc.client
com.apple.corespeech.endpointer.xpc.connection
com.apple.corespeech.endpointer.xpc.delegate
-[CSEndpointerXPCClient endpointerModelVersion]_block_invoke_2
v24@?0@"NSError"8@"NSString"16
-[CSEndpointerXPCClient endpointerModelVersion]
-[CSEndpointerXPCClient elapsedTimeWithNoSpeech]_block_invoke_2
v24@?0@"NSError"8d16
-[CSEndpointerXPCClient elapsedTimeWithNoSpeech]
-[CSEndpointerXPCClient endPointAnalyzerType]_block_invoke_2
v24@?0@"NSError"8Q16
-[CSEndpointerXPCClient endPointAnalyzerType]
-[CSEndpointerXPCClient _getRemoteServiceProxyObject]
-[CSEndpointerXPCClient _getRemoteServiceProxyObject]_block_invoke
com.apple.corespeech.corespeechd.endpointer.service
-[CSEndpointerXPCClient _createClientConnection]_block_invoke
-[CSEndpointerXPCClient _createClientConnection]_block_invoke_2
-[CSEndpointerXPCClient didDetectHardEndpointAtTime:withMetrics:]_block_invoke
vector
deque
-[NviDirectionalitySignalProvider initWithDataSource:assetsProvider:]
-[NviDirectionalitySignalProvider addDelegate:]
-[NviDirectionalitySignalProvider removeDelegate:]
-[NviDirectionalitySignalProvider startWithNviContext:didStartHandler:]
-[NviDirectionalitySignalProvider reset]
-[NviDirectionalitySignalProvider stopWithDidStopHandler:]
-[CSConnectionListener initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:queue:]
-[CSConnectionListener dealloc]
-[CSConnectionListener listener:shouldAcceptNewConnection:]
corespeech.corespeechd.xpc
-[CSConnectionListener listener:shouldAcceptNewConnection:]_block_invoke
-[CSConnectionListener listener:shouldAcceptNewConnection:]_block_invoke_2
-[CSConnectionListener notifyClientsWithBlock:]_block_invoke
-[CSConnectionListener resumeConnection]
+[CSAudioRecorderFactory audioRecorderWithQueue:error:]
triggerStartSampleCount
clientStartSampleCount
triggerFireMachTime
activeChannel
twoShotAudibleFeedbackDelay
hfpTriggerDuringPhoneCall
musicVolume
mediaPlayState
CSSpeechRecordSettingsKey_AudioSessionActiveDelay
CSSpeechRecordSettingsKey_AudioSessionActiveReason
CSSpeechRecordSettingsKey_LanguageDetectorLocales
CSSpeechRecordSettingsKey_LanguageDetectorDictationLanguages
CSSpeechRecordSettingsKey_LanguageDetectorCurrentKeyboard
CSSpeechRecordSettingsKey_LanguageDetectorWasLanguageToggled
CSSpeechRecordSettingsKey_LanguageDetectorMultilingualKeyboardLanguages
CSSpeechRecordSettingsKey_LanguageDetectorKeyboardConvoLanguagePriors
CSSpeechRecordSettingsKey_LanguageDetectorKeyboardGlobalLanguagePriors
CSSpeechRecordSettingsKey_LanguageDetectorPreviousMessageLanguage
CSSpeechRecordSettingsKey_LanguageDetectorGlobalLastKeyboardUsed
CSSpeechRecordSettingsKey_LanguageDetectorDictationLanguagePriors
CSSpeechRecordSettingsKey_LanguageDetectorConversationalMessages
CSSpeechRecordSettingsKey_disableEndpointer
CSSpeechRecordSettingsKey_DictationRequestAppName
CSSpeechRecordSettingsKey_DictationRequestAppBundleID
CSSpeechRecordSettingsKey_DictationStartSampleId
CSSpeechRecordSettingsKey_isDucking
CSSpeechRecordSettingsKey_disableLocalSpeechRecognizer
CSSpeechRecordSettingsKey_triggerEventInfo
CSSpeechRecordSettingsKey_requestMHUUID
CSSpeechRecordSettingsKey_siriSessionUUID
CSSpeechRecordSettingsKey_asrOnDevice
CSSpeechRecordSettingsKey_disablePrewarmLocalAsrAtStartRecording
CSSpeechRecordSettingsKey_shouldSkipStartRecordingAlert
CSSpeechRecordSettingsKey_hybridUODEnabled
spIdAudioProcessedDuration
spIdUnknownUserScore
spIdKnownUserScores
spIdKnownUserRawScores
spIdUserScoresVersion
spIdKnownUserProfileVersions
spIdScoreThresholdingType
spIdVTInvocationScoreThresholdingType
spIdNonVTInvocationScoreThresholdingType
SpIdScoreThreshold
spIdAssetVersion
spIdDirectionSigsArr
shouldRecordUserAudio
shouldRecordPayload
userIdentityClassification
userClassified
CSSpeechController
CSSpeechController ContextReset
com.apple.corespeech.twoShotAudibleFeedback
MediaPlayingObserverQueue
v16@?0@"NSOrderedSet"8
-[CSSpeechController initializeRecordSessionWithRecordContext:]
-[CSSpeechController startController]
-[CSSpeechController prepareRecordWithSettings:error:]
-[CSSpeechController _fetchLastTriggerInfo]
-[CSSpeechController _fetchLastTriggerInfo]_block_invoke_2
v24@?0@"NSDictionary"8@"NSDictionary"16
-[CSSpeechController _currentConfigurationSupportsDucking]
-[CSSpeechController _activateAudioSessionWithReason:delay:delayRequested:error:]_block_invoke
-[CSSpeechController _activateAudioSessionWithReason:delay:delayRequested:error:]
com.apple.corespeech.ducking
-[CSSpeechController _activateAudioSessionWithReason:delay:delayRequested:error:]_block_invoke_2
-[CSSpeechController _scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:]_block_invoke
-[CSSpeechController _scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:]
-[CSSpeechController _cancelPendingAudioSessionActivateForReason:]
-[CSSpeechController _performPendingAudioSessionActivateForReason:]
-[CSSpeechController _lazyActivateAudioSessionWithReason:error:]
-[CSSpeechController _lazyActivateAudioSessionWithReason:error:]_block_invoke
-[CSSpeechController _activateAudioSessionWithReason:error:]
-[CSSpeechController _doActivateAudioSessionWithReason:error:]
-[CSSpeechController _updateRecordContextIfNeeded:]
-[CSSpeechController setCurrentRecordContext:error:]
-[CSSpeechController preheat]
-[CSSpeechController prewarmAudioSession]
-[CSSpeechController resetAudioSession]
-[CSSpeechController reset]
-[CSSpeechController releaseAudioSession]
-[CSSpeechController releaseAudioSession:]
v32@?0@8#16@?<v@?>24
-[CSSpeechController startRecordingWithSettings:error:]
-[CSSpeechController startRecordingWithSettings:error:]_block_invoke
-[CSSpeechController startRecordingWithSettings:error:]_block_invoke_3
-[CSSpeechController startRecordingWithSettings:error:]_block_invoke_2
-[CSSpeechController _startPhaticDecision]
-[CSSpeechController _startPhaticDecision]_block_invoke
not 
-[CSSpeechController stopRecording]
-[CSSpeechController stopRecordingWithOptions:]_block_invoke_2
v16@?0Q8
-[CSSpeechController stopRecordingWithOptions:]_block_invoke
-[CSSpeechController recordRoute]
-[CSSpeechController recordDeviceInfo]
-[CSSpeechController audioDeviceInfo]
-[CSSpeechController playbackRoute]
-[CSSpeechController _didStopForReason:]
-[CSSpeechController audioStreamProvider:didStopStreamUnexpectly:]
-[CSSpeechController _audioStreamProvdider:audioBufferAvailable:]
-[CSSpeechController audioStreamProvider:audioChunkForTVAvailable:]_block_invoke
-[CSSpeechController audioStreamProvider:didHardwareConfigurationChange:]
-[CSSpeechController audioStreamProvider:didHardwareConfigurationChange:]_block_invoke
-[CSSpeechController audioSessionProvider:providerInvalidated:]_block_invoke_2
-[CSSpeechController audioSessionProvider:didChangeContext:]
-[CSSpeechController audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
-[CSSpeechController audioAlertProvidingDidFinishAlertPlayback:ofType:error:]
-[CSSpeechController audioAlertProvidingDidFinishAlertPlayback:ofType:error:]_block_invoke
-[CSSpeechController audioSessionProviderBeginInterruption:]
-[CSSpeechController audioSessionProviderBeginInterruption:]_block_invoke
-[CSSpeechController audioSessionProviderBeginInterruption:withContext:]
-[CSSpeechController audioSessionProviderBeginInterruption:withContext:]_block_invoke
-[CSSpeechController audioSessionProviderEndInterruption:]
-[CSSpeechController audioSessionProviderEndInterruption:]_block_invoke
-[CSSpeechController audioSessionProvider:willSetAudioSessionActive:]
-[CSSpeechController audioSessionProvider:willSetAudioSessionActive:]_block_invoke
-[CSSpeechController audioSessionProvider:didSetAudioSessionActive:]
-[CSSpeechController audioSessionProvider:didSetAudioSessionActive:]_block_invoke
-[CSSpeechController didTTSVolumeChange:forReason:]
-[CSSpeechController didTTSVolumeChange:forReason:]_block_invoke
-[CSSpeechController audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:]
-[CSSpeechController setAlertSoundFromURL:forType:force:]
-[CSSpeechController playAlertSoundForType:]
-[CSSpeechController playRecordStartingAlertAndResetEndpointer]
-[CSSpeechController stopEndpointer]
-[CSSpeechController setMeteringEnabled:]
-[CSSpeechController _createAudioPowerMeterIfNeeded]
-[CSSpeechController outputReferenceChannel]
-[CSSpeechController voiceTriggerInfo]
-[CSSpeechController endpointer:detectedTwoShotAtTime:]
-[CSSpeechController keywordDetectorDidDetectKeyword]_block_invoke
-[CSSpeechController _shouldRunHybridSDSDMitigation]
v20@?0B8@"NSArray"12
-[CSSpeechController _fetchAudioDecoderForTV:]
-[CSSpeechController _createAudioProviderFromXPCWithContext:]
Accounts
Speech Identifier
%c%c%c%c
none
-[CSSpeechController endpointerModelVersion]
-[CSSpeechController cancelCurrentLanguageDetectorRequest]_block_invoke
-[CSSpeechController beginWaitingForMyriad]
-[CSSpeechController endWaitingForMyriadWithDecision:]
-[CSSpeechController _setSoundPlayingState]
 NOT
-[CSSpeechController CSXPCClient:didDisconnect:]_block_invoke
-[CSSpeechController _teardownAudioProviderIfNeeded]
-[CSSpeechController _setMediaPlaybackState:isInterrupted:]
-[CSSpeechController _setAlarmIsPlaying:]
-[CSSpeechController _setTimerIsPlaying:]
-[CSSpeechController nowPlayingObserver:playbackStateDidChangeFrom:to:lastPlayingDate:]_block_invoke
-[CSSpeechController clockAlarmObserver:alarmDidFire:]_block_invoke
-[CSSpeechController clockAlarmObserver:alarmDidDismiss:]_block_invoke
-[CSSpeechController clockTimerObserver:timerDidFire:]_block_invoke
-[CSSpeechController clockTimerObserver:timerDidDismiss:]_block_invoke
com.apple.CoreSpeech.Connection.SSR.Client
com.apple.CoreSpeech.Connection.SSR
-[CSSSRXPCClient init]
-[CSSSRXPCClient _getRemoteServiceProxyObject]
-[CSSSRXPCClient _getRemoteServiceProxyObject]_block_invoke
com.apple.corespeech.corespeechd.ssr.service
-[CSSSRXPCClient _createClientConnection]_block_invoke
-[CSSSRXPCClient _createClientConnection]_block_invoke_2
-[CSSSRXPCClient didReceiveSpeakerRecognitionScoreCard:]
-[CSSSRXPCClient didFinishSpeakerRecognition:]
RequestContext
DetectedToken
TriggerMachTime
TriggerAbsStartSampleId
{attendingCtx: %@, detctedToken: %@, triggerMachTime=%llu, triggerStartSampleId=%llu}
rtblobs
adkblobs
blob
majorVersion
minorVersion
signature
cert
rtlocalemap
jarvislocalemap
adklocalemap
-[CSAsset(RTModel) createRTModelWithLocale:]
-[CSAsset(RTModel) latestHearstRTModelForLocale:]
-[CSAsset(RTModel) rtModelWithAccessoryRTModelType:majorVersion:minorVersion:locale:]
-[CSAsset(RTModel) localeMapWithName:]
%02x
%@ {request = %@, options = %@, player = %@, playerItem = %@}
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _prepareWithOptions:audioSession:completion:]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _prepareWithOptions:audioSession:completion:]_block_invoke
Unable to create player item.
Unable to replace current item of player.
Timed out when waiting for player item status to change to ready to play.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _prepareWithOptions:audioSession:completion:]_block_invoke_2
status
Failed to change player item status to ready to play.
v24@?0@8@16
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
Attempted to start audio playback session when it is already active.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]_block_invoke
Audio playback session is already inactive after preparation.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]_block_invoke_2
Audio playback session is already inactive after player seek to begin.
Player failed to seek to begin.
Stopped playback.
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _finalizeWithError:]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased _resetPlayerItem]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased playerItemDidPlayToEndTime:]
-[CSSiriAudioPlaybackSessionImplAVPlayerBased playerItemFailedToPlayToEndTime:]
Player item failed to play to end time.
com.apple.siri.speechmodeltraining
com.apple.corespeech.speechmodeltraining.xpc
com.apple.speech.speechmodeltraining
SpeechModelTrainingClient
v24@?0@"NSDictionary"8@"NSError"16
Assistant/SpeechPersonalizedLM
Assistant/SpeechPersonalizedLM_Fides
Received Error %@
Input directory path(%@) does not match expected path
-[CSSelfTriggerEnabledMonitorAccessory _startMonitoringWithQueue:]
Enabled
Disabled
-[CSSelfTriggerEnabledMonitorAccessory _stopMonitoring]
-[CSSelfTriggerEnabledMonitorAccessory setEnable:]
Enable
Disable
-[CSVoiceTriggerAssetHandlerDarwin _getVoiceTriggerAssetFromAssetManager:]
-[CSVoiceTriggerAssetHandlerDarwin _checkNewAssetAvailablity]_block_invoke
-[CSVoiceTriggerAssetHandlerDarwin CSRemoteAssetManagerDidDownloadNewAsset:]
-[CSVoiceTriggerAssetHandlerDarwin CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSAudioStartStreamOption(AVVC) avvcStartRecordSettingsWithAudioStreamHandleId:]
-[NviSignalProvidersController initWithAssetsProvider:dataSourceMap:signalProviderToDataSourceMap:]
-[NviSignalProvidersController dealloc]
NviSignalProvidersController.m
No DataSource found for SignalType: %@
-[NviSignalProvidersController _setupSignalProviders:]
-[NviSignalProvidersController _startDataSourcesWithContext:]
-[NviSignalProvidersController _startDataSourcesWithContext:]_block_invoke
-[NviSignalProvidersController _startSignalProvidersWithContext:]
-[NviSignalProvidersController _startSignalProvidersWithContext:]_block_invoke
-[NviSignalProvidersController _stopDataSources]_block_invoke
-[NviSignalProvidersController _stopDataSources]
-[NviSignalProvidersController _stopCurrentlyRunningSignalProviders]_block_invoke
-[NviSignalProvidersController _stopCurrentlyRunningSignalProviders]
-[NviSignalProvidersController _iterateSignalMask:withHandler:]
v16@?0@"<NviSignalProvider>"8
CSXPCClient Reply Queue
CSXPCClient connection Queue
-[CSXPCClient connect]_block_invoke
com.apple.corespeech.corespeechd.xpc
-[CSXPCClient _sendXPCClientType]
xpcClientType
-[CSXPCClient prepareAudioProviderWithContext:clientType:error:]
context
clientType
activateReason
dynamicAttribute
dictationRequestBundleId
deactivateOption
setDuckOthersOption
enableSmartRoutingConsideration
enableMiniDucking
alertType
forceSetAlert
soundPath
alertStartTime
-[CSXPCClient alertStartTime]_block_invoke
alertBehavior
setMeterEnable
channelNumber
power
-[CSXPCClient peakPowerForChannel:]_block_invoke
-[CSXPCClient averagePowerForChannel:]_block_invoke
-[CSXPCClient audioMetric]_block_invoke
audioMetric
audioStreamRequest
-[CSXPCClient audioStreamWithRequest:streamName:error:]
v24@?0@"CSAudioStream"8@"NSError"16
-[CSXPCClient audioStreamWithRequest:streamName:completion:]
-[CSXPCClient audioStreamWithRequest:streamName:completion:]_block_invoke
-[CSXPCClient prepareAudioStreamSync:request:error:]
-[CSXPCClient prepareAudioStream:request:completion:]
startAudioStreamOption
v16@?0@"NSDictionary"8
-[CSXPCClient acousticSLResultForContext:completion:]
-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke_2
acousticSLResult
-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke
-[CSXPCClient triggerInfoForContext:completion:]
rtsTriggerInfo
recordRoute
audioDeviceInfo
recordSettings
-[CSXPCClient audioStreamId]
-[CSXPCClient audioChunkFrom:to:]
-[CSXPCClient audioChunkFrom:to:channelIdx:]
-[CSXPCClient audioChunkToEndFrom:]
-[CSXPCClient audioChunkToEndFrom:channelIdx:]
-[CSXPCClient saveRecordingBufferFrom:to:toURL:]
-[CSXPCClient saveRecordingBufferToEndFrom:toURL:]
-[CSXPCClient holdAudioStreamWithDescription:timeout:]
-[CSXPCClient cancelAudioStreamHold:]
-[CSXPCClient isRecording]
-[CSXPCClient setAnnounceCallsEnabled:withStreamHandleID:]
-[CSXPCClient attachTandemStream:toPrimaryStream:completion:]
deviceID
sessionID
-[CSXPCClient audioSessionIdForDeviceId:]
sampleCount
-[CSXPCClient hostTimeFromSampleCount:]_block_invoke
replyHostTime
-[CSXPCClient hostTimeFromSampleCount:]
hostTime
-[CSXPCClient sampleCountFromHostTime:]_block_invoke
replySampleCount
-[CSXPCClient sampleCountFromHostTime:]
option
-[CSXPCClient _handleListenerEvent:]
-[CSXPCClient _handleListenerMessage:]
-[CSXPCClient _handleListenerError:]
-[CSXPCClient _handleAlertProvidingDelegateMessageBody:]
didFinishAlertPlayback
errorDomain
errorCode
-[CSXPCClient _handleSessionProvidingDelegateMessageBody:]
interruptionContext
-[CSXPCClient _handleSessionProvidingDelegateBeginInterruptionWithContext:]
willSetAudioSessionActive
didSetAudioSessionActive
streamHandleIdInvalidationflag
didChangeContextFlag
-[CSXPCClient _handleSessionInfoProvidingDelegateMessageBody:]
notificationInfo
-[CSXPCClient _handleSessionInfoProvidingDelegateInterruptionNotification:]
-[CSXPCClient _handleSessionInfoProvidingDelegateRouteChangeNotification:]
-[CSXPCClient _handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:]
-[CSXPCClient _handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:]
-[CSXPCClient _handleStreamProvidingDelegateMessageBody:]
stopReason
chunk
hardwareConfig
Serial CSEventMonitor queue
-[CSEventMonitor _startMonitoringWithQueue:]
CSEventMonitor.m
-[CSEventMonitor _stopMonitoring]
triggerScore
configVersion
languageCode
com.apple.corespeech.aopFirstPassTriggerWakeupLatency
latency
device
@"NSDictionary"8@?0
com.apple.corespeech.SecondPassWakeUp
unknown
modelVersion
firstPassSource
triggerAPWakeup
-[CSVoiceTriggerStatAggregator logFalseWakeUp:withPhrase:]
-[CSVoiceTriggerStatAggregator logTriggerLengthSampleCountStatistics:withFirstPassDeterministicTriggerLengthSampleCount:]
com.apple.exprAOPSecondPass
newTriggerLengthSampleCount
oldTriggerLengthSampleCount
sampleCountDelta
com.apple.corespeech.AudioZeroRun
duration
-[CSSmartSiriVolumeManager initWithSamplingRate:withAsset:]
-[CSSmartSiriVolumeManager CSAlarmMonitor:didReceiveAlarmChanged:]
-[CSSmartSiriVolumeManager CSTimerMonitor:didReceiveTimerChanged:]
-[CSSmartSiriVolumeManager CSVolumeMonitor:didReceiveMusicVolumeChanged:]
-[CSSmartSiriVolumeManager CSVolumeMonitor:didReceiveAlarmVolumeChanged:]
-[CSSmartSiriVolumeManager CSAutomaticVolumeEnabledMonitor:didReceiveEnabled:]
numImplicitUtt
numExplicitUtt
numFirstPassTriggersPerDay
vtStatistics
vtStatisticsFirstPassPeakScoreHS
vtStatisticsFirstPassPeakScoreJS
vtStatisticsFirstPassTriggerSource
vtStatisticsRecognizerScoreHS
vtStatisticsRecognizerScoreJS
vtStatisticsTriggerScoreHS
vtStatisticsTriggerScoreJS
vtStatisticsMitigationScore
vtStatisticsInvocationTypeId
vtStatisticsFirstPassDetectionTime
vtStatisticsRepetitionSimilarityScore
firstPassDailyMetadata
firstPassDailyMetadataConfigVersion
firstPassDailyMetadataBuildVersion
firstPassDailyMetadataHardwareSampleRate
firstPassDailyMetadataMitigationAssetVersion
isJSEnabled
-[CSAudioFileLog _closeAudioFile]
-[CSAudioFileLog startRecording]_block_invoke
-input.wav
-[CSAudioFileLog appendAudioData:]_block_invoke
-[CSAudioFileLog stopRecording]_block_invoke
Logs/CrashReporter/CoreSpeech/audio/
-[CSAudioFileLog _getOrCreateAudioLogDirectory]
/tmp
en_US_POSIX
yyyyMMdd-HHmmss
%@/%@%@%@
firstPassEndSampleCount
firstPassStartSampleCount
firstPassGoodness
totalSampleCount
vtEndTime
numSamplesFromHistoricalBuffer
[%@]
[%llu]
[%f]
BuiltInAOPVoiceTrigger
RemoteMicVoiceTrigger
RemoteMicVAD
JarvisVoiceTrigger
mediaserverdLaunched
RemoraVoiceTrigger
uuid
deviceId
activationInfo
vadScore
hosttime
com.apple.corespeech.fakeasset.rolling
-[CoreSpeechXPCFakeModelMonitor _registerForFakeAssetRollNotification]_block_invoke
-[CoreSpeechXPCFakeModelMonitor _registerForFakeAssetRollNotification]
Adaptive Siri Volume Disabled
near
medium
-[CSSmartSiriVolumeUserIntent applyLowerAndUpperBoundsToVolume:]
-[CSSmartSiriVolumeUserIntent applyLowerAndUpperBoundsToVolumeOffset:]
com.apple.MobileAsset.VoiceTriggerAssetsMac
-[CSAssetController init]
Serial CSAssetController queue
V1 Assets Clean-up queue
-[CSAssetController _cleanUpMobileAssetV1Directory]
-[CSAssetController assetOfType:language:]
-[CSAssetController allInstalledAssetsOfType:language:]
q24@?0@"MAAsset"8@"MAAsset"16
v32@?0@"MAAsset"8Q16^B24
-[CSAssetController assetOfType:language:completion:]
-[CSAssetController assetOfType:language:compatibilityVersion:completion:]
v24@?0@"MAAsset"8@"NSError"16
-[CSAssetController installedAssetOfType:language:]
-[CSAssetController installedAssetOfType:language:completion:]
-[CSAssetController _installedAssetOfType:withLanguage:]
-[CSAssetController _installedAssetOfType:query:withLanguage:completion:]_block_invoke
-[CSAssetController _findLatestInstalledAsset:]
-[CSAssetController _assetQueryForAssetType:]
-[CSAssetController _runAssetQuery:completion:]
-[CSAssetController _runAssetQuery:completion:]_block_invoke
-[CSAssetController fetchRemoteMetaOfType:allowRetry:]
-[CSAssetController fetchRemoteMetaOfType:allowRetry:]_block_invoke
v20@?0@"NSError"8B16
-[CSAssetController _fetchRemoteAssetOfType:withLanguage:completion:]
-[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]_block_invoke_2
-[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]_block_invoke
-[CSAssetController _downloadAssetCatalogForAssetType:complete:]_block_invoke
-[CSAssetController _updateFromRemoteToLocalAssets:forAssetType:completion:]
-[CSAssetController _downloadAsset:withComplete:]
v16@?0d8
-[CSAssetController _downloadAsset:withComplete:]_block_invoke
-[CSAssetController _startDownloadingAsset:progress:completion:]
v16@?0@"MAProgressNotification"8
+[CSAssetController(Utils) addKeyValuePairForQuery:assetType:]
com.apple.MobileAsset.SpeechEndpointAssets
com.apple.MobileAsset.SpeechEndpointAssetsWatch
com.apple.MobileAsset.SpeechEndpointAssetsTV
com.apple.MobileAsset.LanguageDetectorAssets
com.apple.MobileAsset.AdBlockerAssets
com.apple.MobileAsset.SpeakerRecognitionAssets
CSAudioInjectionTvRemoteEngine
ApplicationProcessorWithRingtone
v16@?0@"AFSiriActivationResult"8
-[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]_block_invoke
Trigger was during a ringtone
v16@?0@"<AFMyriadContextMutating>"8
-[CSSiriLauncher notifyWakeKeywordSpokenInBuiltInMic:]_block_invoke
-[CSSiriLauncher notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:]_block_invoke
-[CSSiriLauncher notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:]_block_invoke_2
-[CSSiriLauncher notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:]_block_invoke
-[CSSiriLauncher notifyWakeKeywordSpokenCarPlay:deviceId:]_block_invoke
-[CSSiriLauncher notifyBluetoothDeviceVoiceTrigger:deviceId:completion:]_block_invoke
-[CSSiriLauncher notifyWakeKeywordSpokenBluetoothDevice:deviceId:]_block_invoke
-[CSSiriLauncher deactivateSiriActivationConnectionWithReason:withOptions:withContext:]_block_invoke
-[CSSiriLauncher notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:]_block_invoke_2
-[CSSiriLauncher notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:]_block_invoke
-[CSHostPowerStateMonitor currentPowerState]
CSHostPowerStateMonitor.m
-[CSHostPowerStateMonitor currentRawPowerState]
-[CSHostPowerStateMonitor _startMonitoringWithQueue:]
-[CSHostPowerStateMonitor _stopMonitoring]
-[CSAudioRouteChangeMonitor _startMonitoringWithQueue:]
CSAudioRouteChangeMonitor.m
-[CSAudioRouteChangeMonitor _stopMonitoring]
-[CSAudioRouteChangeMonitor getHearstConnected:]
-[CSAudioRouteChangeMonitor hearstConnected]
-[CSAudioRouteChangeMonitor getHearstRouted:]
-[CSAudioRouteChangeMonitor hearstRouted]
-[CSAudioRouteChangeMonitor getSiriInputSourceOutOfBand:]
-[CSAudioRouteChangeMonitor siriInputSourceOutOfBand]
-[CSAudioRouteChangeMonitor getJarvisConnected:]
-[CSAudioRouteChangeMonitor jarvisConnected]
CSSmartSiriVolumeEnablePolicy queue
-[CSSmartSiriVolumeEnablePolicy _addSmartSiriVolumeEnabledConditions]_block_invoke
CSAudioInjectionRemoraEngine
-[CSAudioInjectionRemoraEngine dealloc]
CSAudioInjectionEngine
-[CSAudioInjectionEngine _createDeInterleaverIfNeeded]
-[CSAudioInjectionEngine stop]_block_invoke
-[CSAudioInjectionEngine _readAudioBufferAndFeed]
-[CSAudioInjectionEngine injectAudio:withScaleFactor:outASBD:playbackStarted:completion:]
-[CSAudioInjectionEngine stopAudioStream]_block_invoke
-[CSAudioInjectionEngine _deinterleaveBufferIfNeeded:]
-[CSAudioInjectionEngine _compensateChannelDataIfNeeded:receivedNumChannels:]
VoiceTrigger Asset Change Monitor
com.apple.corespeech.voicetriggerassetchange
CSAttSiriRequestSourceKey
SiriFollowupforIdleAndQuiet
Dictation
LockScreenNotification
SpeechDetection
-[NviAudioFileWriter initWithURL:inputFormat:outputFormat:]
-[NviAudioFileWriter addSamples:numSamples:]
-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke
-[CSBluetoothWirelessSplitterMonitor splitterState]
CSBluetoothWirelessSplitterMonitor.m
-[CSBluetoothWirelessSplitterMonitor updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:]
-[CSBluetoothWirelessSplitterMonitor splitterState:]
-[CSBluetoothWirelessSplitterMonitor _startMonitoringWithQueue:]
-[CSBluetoothWirelessSplitterMonitor _stopMonitoring]
CSSiriClientBehaviorMonitor
-[CSSiriClientBehaviorMonitor notifyFetchedSiriClientAudioStream:successfully:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyPreparedSiriClientAudioStream:successfully:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyWillStopStream:reason:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyDidStopStream:withEventUUID:]_block_invoke
-[CSSiriClientBehaviorMonitor notifyReleaseAudioSession]_block_invoke
-[CSSpeechEndpointAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSSpeechEndpointAssetMetaUpdateMonitor _stopMonitoring]
-[CSSpeechEndpointAssetMetaUpdateMonitor _didReceiveNewSpeechEndpointAssetMetaData]
com.apple.MobileAsset.SpeechEndpointAssetsWatch.ma.cached-metadata-updated
com.apple.MobileAsset.SpeechEndpointAssetsTV.ma.cached-metadata-updated
com.apple.MobileAsset.SpeechEndpointAssets.ma.cached-metadata-updated
estimatedTTSVolume
debugLogPath
com.apple.corespeech.corespeechd.uaapservice
CSSpeechUaapXPCClient
-[CSSpeechUaapXPCClient init]_block_invoke
-[CSSpeechUaapXPCClient _handleConnectionError:]
v32@?0@"NSString"8Q16^B24
bundleId
assetFiles
messageType
message
errorMessage
locale
v32@?0@"NSString"8@"NSArray"16^B24
-[CSSpeechUaapXPCClient invalidate]
CSVoiceTriggerHandlerMacQueue
-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:completion:]_block_invoke
-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:completion:]_block_invoke_2
-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablity]_block_invoke
-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablityForEndpoint]_block_invoke_3
-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailablityForEndpoint]_block_invoke
-[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerAssetDownloadMonitor:didInstallNewAsset:]
-[CSVoiceTriggerAssetHandlerMac CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSVoiceTriggerAssetHandlerMac CSFirstUnlockMonitor:didReceiveFirstUnlock:]
-[CSVoiceTriggerAssetHandlerMac trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
CSVoiceTriggerAOPModeEnabledPolicyIOS RecordState queue
-[CSVoiceTriggerAOPModeEnabledPolicyIOS _addConditionsForIOSBargeIn]_block_invoke
BTDetails_IsHFPRoute
-[CSVoiceTriggerAOPModeEnabledPolicyIOS _addConditionsForIOSAOP]_block_invoke
-[CSVoiceTriggerAOPModeEnabledPolicyIOS _isSpeechDetectionDevicePresent]
-[CSVoiceTriggerAOPModeEnabledPolicyIOS siriClientBehaviorMonitor:didChangedRecordState:withEventUUID:withContext:]_block_invoke
CSOpportuneSpeakBehaviorMonitor
-[CSOpportuneSpeakBehaviorMonitor notifyWillStartStreamWithContext:audioProviderUUID:option:]_block_invoke
-[CSOpportuneSpeakBehaviorMonitor notifyDidStartStreamWithContext:audioProviderUUID:successfully:option:]_block_invoke
-[CSOpportuneSpeakBehaviorMonitor notifyWillStopStream:]_block_invoke
-[CSOpportuneSpeakBehaviorMonitor notifyDidStopStream:]_block_invoke
Library/nvi
/System/Library/Audio/UISounds/jbl_begin_short.caf
/System/Library/Audio/UISounds/jbl_begin_short_carplay.caf
%@ {activationMode = %.4s, deviceIdentifier = %@, activated = %d}
-[CSSiriAudioActivationInfo initWithSpeechRecordingMode:clientConfiguration:experimentContext:]
-[CSSiriAudioActivationInfo setSpeechRequestOptions:currentActivationInfo:]
-[CSSiriAudioActivationInfo setClientConfiguration:]
-[CSSiriAudioActivationInfo _csAudioRecordTypeForSpeechRequestOptions:useBorealisBuffer:currentClientConfiguration:]
-[CSSiriAudioActivationInfo startRecordingSettingsWithRecordRoute:recordingInfo:playbackRoute:]
-[CSSiriAudioActivationInfo _alertBehaviorForRecordRoute:recordingInfo:playbackRoute:attemptsToUsePastDataBufferFrames:]
-[CSSiriAudioActivationInfo audioAlertStyleForRecordRoute:recordingInfo:playbackRoute:]
-[CSSiriAudioActivationInfo twoShotPromptTypeForRecordRoute:playbackRoute:]
-[CSSiriAudioActivationInfo audioSessionActivationTargetDate]
-[CSSiriAudioActivationInfo dateByAddingTimeIntervalSinceActivation:]
-[CSSiriAudioActivationInfo _audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:]_block_invoke
q8@?0
-[CSSiriAudioActivationInfo _audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:]
-[CSSiriAudioActivationInfo _audioSessionActiveDelayCoreSpeechWithType:]
@"NSNumber"16@?0@"NSNumber"8
-[CSSiriAudioActivationInfo _audioSessionActiveDelayUserPerceptionWithType:]
-[CSSiriAudioActivationInfo _audioSessionActiveDelayOverride]
-[CSSiriAudioActivationInfo _audioSessionActiveDelayServerConfiguration]
_CSSiriLanguageDetectorSettings
triggerEndSampleCount
triggerEndSeconds
com.apple.voicetrigger
com.apple.nvi
IsNviEnabled
InternalBuild
NviVADSignalType
NviKwdSignalType
NviDirectionalitySignalType
NviAsdAnchorSignalType
NviAsdPayloadSignalType
+[NviUtils strRepForNviSignalType:]
NviUtils.m
Unknown NviSignalTypeString: <%@>
NviAudioDataSrcType
+[NviUtils strRepForNviDataSourceType:]
NviDataSource_END_MARKER
+[NviUtils nviDataSourceTypeForStr:]
+[NviUtils _createDirAtPath:]
yyyyMMdd_HHmmss.SSS
Unexpected!! Received dir for NviConfig: %@
+[NviUtils readJsonDictionaryAt:]
+[NviUtils getValueFromDictionaryOfDictionaries:keypath:]
+[NviUtils createDirAtPath:]
SilenceFramesCountMs
SilenceProbability
SilenceDurationMs
ProcessedAudioMs
[requestHistoricalAudioDataWithHostTime = %@]
[requestHistoricalAudioDataSampleCount = %@]
[useOpportunisticZLL = %@]
[startRecordingHostTime = %llu]
[startRecordingSampleCount = %llu]
[alertBehavior = %llu %llu %llu]
[skipAlertBehavior = %@]
[requireSingleChannelLookup = %@]
[selectedChannel = %u]
[estimatedStartHostTime = %llu
[disableEndpointer = %d]
[disableLocalSpeechRecognizer = %d]
[disablePrewarmLocalSpeechRecognizer = %d]
[disableBoostForDoAP = %d]
requestHistoricalAudioDataWithHostTime
requestHistoricalAudioDataSampleCount
startRecordingHostTime
startRecordingSampleCount
useOpportunisticZLL
startAlertBehavior
stopAlertBehavior
errorAlertBehavior
skipAlertBehavior
requireSingleChannelLookup
selectedChannel
estimatedStartHostTime
disableEndpointer
disableLocalSpeechRecognizer
disablePrewarmLocalSpeechRecognizer
disableBoostForDoAP
requestMHUUID
siriSessionUUID
%@ {request = %@, options = %@, player = %@}
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _prepareWithOptions:audioSession:error:]
Failed to initialize AVAudioPlayer.
Failed to prepare to play AVAudioPlayer.
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:]
Attempted to start audio playback session when AVAudioPlayer is already playing.
Failed to play AVAudioPlayer.
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _stop:]
Stopped playback of AVAudioPlayer.
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _stop:]_block_invoke
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _handleBeginInterruption]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _handleEndInterruption:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _didNotStartWithError:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _didStopWithError:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased _finalizeWithError:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased audioPlayerDidFinishPlaying:successfully:]
-[CSSiriAudioPlaybackSessionImplAVAudioPlayerBased audioPlayerDecodeErrorDidOccur:error:]
-[CSSmartSiriVolumeRunPolicyHomePod _addSmartSiriVolumeEnabledConditions]_block_invoke
-[CSContinuousAudioFingerprintEnabledPolicy _addContinousAudioFingerprintEnabledConditions]_block_invoke
-[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]
voicetrigger assertion queue
-[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]_block_invoke
phrasespotter assertion queue
-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke_2
bypassed
NOT bypassed
-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke
raise-to-speak assertion queue
-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke_2
-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke
-[CSVoiceTriggerXPCServiceProxy notifyVoiceTriggeredSiriSessionCancelled]
-[CSVoiceTriggerXPCServiceProxy notifyServiceConnectionLost]
com.apple.corespeech.rchandling.xpc.connection
-[CSRCHandlingXPCClient processRCWithId:duration:lrnnScore:lrnnThreshold:taskId:forceAccept:completionHandler:]
-[CSRCHandlingXPCClient getMitigationDecisionForRCIdWithCompletion:completion:]
-[CSRCHandlingXPCClient _getRemoteServiceProxyObject]
-[CSRCHandlingXPCClient _getRemoteServiceProxyObject]_block_invoke
com.apple.corespeech.corespeechd.rchandling.service
-[CSRCHandlingXPCClient _createClientConnection]_block_invoke
-[CSRCHandlingXPCClient _createClientConnection]_block_invoke_2
smartSiriVolumeOverrideMediaVolume
com.apple.ssv.clientq
-[CSSmartSiriVolumeController getVolumeForTTSType:withContext:]_block_invoke
-[CSSmartSiriVolumeController _createSSVClientConnectionIfNeeded]
-[CSSmartSiriVolumeController didSmartSiriVolumeChangeForReason:]
-[CSPhraseNDEAPIScorer keywordAnalyzerNDEAPI:hasResultAvailable:forChannel:]
speakerRecognition
satThreshold
combinationWeight
implicitProfileThreshold
implicitProfileDeltaThreshold
implicitVTThreshold
pruningExplicitSATThreshold
pruningExplicitPSRThreshold
pruningSATThreshold
pruningPSRThreshold
numPruningRetentionUtt
maxEnrollmentUtterances
pruningCookie
configFileRecognizer
configFileNDAPI
voiceTriggerSecondPassAOP
implicit_training_enabled
multiUserHighScoreThreshold
multiUserLowScoreThreshold
multiUserConfidentScoreThreshold
multiUserDeltaScoreThreshold
useSpeakerRecognitionAsset
phrase
-[CSAsset(SpeakerRecognition) satScoreThresholdForPhId:]
recognizer.json
config.txt
-[CSAsset(SpeakerRecognition) containsMultiUserThresholds]
-[CSAudioTandemStream attachToPrimaryStreamWithCompletion:]
-[CSAudioTandemStream prepareAudioStreamSyncWithRequest:error:]
CSAudioTandemStream.m
-[CSAudioTandemStream prepareAudioStreamWithRequest:completion:]
-[CSAudioTandemStream startAudioStreamWithOption:completion:]
-[CSAudioTandemStream stopAudioStreamWithOption:completion:]
CSAttSiriStateMonitor queue
-[CSAttSiriStateMonitor updateState:]_block_invoke
meta_version.json
enrollment_version.json
CSP2P_CommandType_Key
CSP2P_CommandDict_Key
corespeech
com.apple.siridebug.request.generic
com.apple.siridebug.command.remote.heysiri
com.apple.siridebug.command.parallel.recording
com.apple.siridebug.command.transfer.voiceprofile
com.apple.siridebug.command.query.voiceprofile
com.apple.siridebug.command.reverse.transfer.voiceprofile
com.apple.siridebug.command.fetch.voiceprofile
com.apple.siridebug.command.voiceprofile.update.trigger
com.apple.siridebug.command.fetch.parallelrecording
com.apple.siridebug.command.transfer.parallelrecording
com.apple.siridebug.command.fetch.voicegradingdata
com.apple.siridebug.command.transfer.voicegradingdata
com.apple.siridebug.command.delete.voiceprofile
CSP2P_RemoteHeySiriEnable_Key
CSP2P_RemoteHeySiriStatus_Key
CSP2P_RemoteRecordingStart_Key
CSP2P_RemoteRecordingStatus_Key
CSP2P_VoiceProfileData_Key
CSP2P_VoiceProfileFileName_Key
CSP2P_VoiceProfileSpeakerName_Key
CSP2P_VoiceProfileLocale_Key
CSP2P_VoiceProfileDataType_Key
CSP2P_VoiceProfileSegment_Key
CSP2P_VoiceProfileTotalSegments_Key
CSP2P_VoiceProfileStatus_Key
CSP2P_VoiceProfileProfileId_Key
CSP2P_VoiceProfileHomeUserId_Key
CSP2P_VoiceProfileRelativeFilePath_Key
CSP2P_VoiceProfileSiriProfileId_Key
CSP2P_VoiceProfileAppDomain_Key
CSP2P_VoiceProfileOnboardTimeStamp_Key
CSP2P_VoiceProfileTransferCompleted_Key
CSP2P_VoiceProfileRecordedData_Key
CSP2P_VoiceProfileRemoteFileName_Key
CSP2P_VoiceDataToBeGraded_Key
CSP2P_VoiceFileNameToBeGraded_Key
CSP2P_GradingDataTransferStatus_Key
CSP2P_PeerIdentifier_Key
CSP2P_VoiceProfilePeerName_Key
CSP2P_IsDataCompressed_Key
CSP2P_UncompressedDataSize_Key
CSP2P_GradingBatchTransferID_Key
CSP2P_VoiceProfileiTunesUserID_Key
CSP2P_VoiceProfileiTunesPassword_Key
remote
-triggered
-almost
-rejected
-activation
ssrmeta
ssvmeta
vtei
multiuser
acousticSLmeta
com.apple.corespeech.p2psvc
-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke
CoreSpeech
-[CSP2PService sendCoreSpeechGradingDataToNearbyPeer]_block_invoke
-[CSP2PService sendVTNearMissGradingDataToCompanion]_block_invoke
-[CSP2PService sendVoiceProfileUpdatedMessageToNearbyPeerForLocale:]_block_invoke
-[CSP2PService sendAcousticGradingDataToNearbyPeer]_block_invoke
-[CSP2PService sendGeckoSpeechLogsToCompanion]_block_invoke
-[CSP2PService _processRemoteHeySiriCommandWithRequest:fromSenderID:withReply:]
-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]
-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]_block_invoke
q24@?0@"NSURL"8@"NSURL"16
json
B24@?0@"NSURL"8@"NSDictionary"16
-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke
v52@?0@"NSString"8@"NSData"16Q24Q32B40@"NSError"44
-[CSP2PService _sendCoreSpeechGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendCoreSpeechGradingDataToPeerId:]_block_invoke
-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke_2
-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke
Gecko-
v24@?0@"NSUUID"8@"NSError"16
[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
.wav
.json
-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke
-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:withCompletion:]
fileData
fileName
peerId
%@%@
-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:withCompletion:]_block_invoke
-[CSP2PService _receiveParallelRecordingFromPeerId:recordingInfo:withReply:]
%@_%@
-[CSP2PService _receiveVoiceGradingDataFromPeerId:requestInfo:withReply:]
%@.%@.%@
suppressnotification
%@.%@
-[CSP2PService _receiveVoiceProfileFromPeerId:voiceProfileInfo:withReply:]
CoreSpeechCache
audio
tdti
com.apple.siri.corespeech.voiceprofilelist.change
-[CSP2PService _processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:]_block_invoke
CSP2PService.m
-[CSP2PService _processGradingDataFetchCommandWithRequest:fromSenderID:withReply:]
-[CSP2PService _processVoiceProfileListQueryCommandFromPeerId:requestInfo:withReply:]
yyyyMMddHHmmss
voiceprofiles
-[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]
-[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]_block_invoke
homeUserId query for siriProfileId %@ timedout !
-[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]
Caches/VoiceTrigger/SATUpdate
_%d_%d_%@
-[CSP2PService _sendVoiceProfile:toPeerId:]
td/audio
tdti/audio
ti/audio
-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke
-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]
-[CSP2PService _processVoiceProfileUpdateTriggerFromPeerId:requestInfo:withReply:]
-[CSP2PService _sendVoiceProfileUpdateTriggerToPeerId:forLocale:]_block_invoke
-SL.json
-synced.wav
-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke_2
-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke
Logs/CoreSpeech/spid/grading
-[CSP2PService _createDirectoryIfDoesNotExist:]
VoiceProfileStore
trained_users.json
Caches
-[CSP2PService _getContentsOfDirectory:]
com.apple.corespeech
-[CSVoiceTriggerAwareZeroFilter resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:]
+[CSPhoneCallStateMonitor sharedInstance]
CSPhoneCallStateMonitor.m
-[CSPhoneCallStateMonitor phoneCallState]
-[CSPhoneCallStateMonitor firstPartyCall]
-[CSPostBuildInstallService registerPostBuildInstallService]
-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke
com.apple.cs.postinstall
CSContinuousAudioFingerprintProvider
-[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]
-[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]_block_invoke
-[CSContinuousAudioFingerprintProvider stopWithUUID:]
-[CSContinuousAudioFingerprintProvider stopWithUUID:]_block_invoke
-[CSContinuousAudioFingerprintProvider _startListenPollingWithInterval:completion:]
-[CSContinuousAudioFingerprintProvider _startListenPollingWithInterval:completion:]_block_invoke
-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]_block_invoke_3
-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]_block_invoke
-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]
-[CSContinuousAudioFingerprintProvider _startListenPolling]
-[CSContinuousAudioFingerprintProvider _stopListening]
-[CSContinuousAudioFingerprintProvider _stopListening]_block_invoke
-[CSContinuousAudioFingerprintProvider _handleEnablePolicyEvent:]
-[CSContinuousAudioFingerprintProvider audioStreamProvider:didStopStreamUnexpectly:]
-[CSContinuousAudioFingerprintProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
CSBuiltInSpeakerStateMonitor queue
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateMutedInfo]_block_invoke_2
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateMutedInfo]_block_invoke
muted
not muted
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke_2
-[CSBuiltinSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke
-[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke_2
active
-[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke
-[CSBuiltinSpeakerStateMonitor _startMonitoringWithQueue:]
-[CSBuiltinSpeakerStateMonitor _stopMonitoring]_block_invoke
-[CSBuiltinSpeakerStateMonitor _stopMonitoring]
-[CSBuiltinSpeakerStateMonitor CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke
SignalTs, ProcessedAudioMs, StartSample, EndSample, Azimuth, EmaAzimuth, Confidence, SpatialSpreadSpectrum
%llu,%f,%lu,%lu,%f,%f,%f,
{%@, {start=%lu, end=%lu, conf=%f, az=%f, estAz=%fdist=%@}
,%d, 
%f, 
CSEndpointMetrics:::totalAudioRecorded
CSEndpointMetrics:::endpointBufferHostTime
CSEndpointMetrics:::featuresAtEndpoint
CSEndpointMetrics:::endpointerType
CSEndpointMetrics:::serverFeatureLatencyDistribution
CSEndpointMetrics:::additionalMetrics
CSEndpointMetrics:::trailingSilenceDurationAtEndpoint
[totalAudioRecorded = %f]
[endpointBufferHostTime = %llu]
[trailingSilenceDurationAtEndpoint = %f]
[endpointerType = %lu]
[featuresAtEndpoint = %@]
[additionalMetrics = %@]
isMediaPlaying
noiseLevelDB
musicLevelDB
musicPlaybackVolumeDB
alarmVolume
finalTTSVolume
isAlarmPlaying
isTimerPlaying
isLKFSProcessPaused
removeVoiceTriggerSamples
-[CSSmartSiriVolume initWithSamplingRate:asset:]
-[CSSmartSiriVolume startSmartSiriVolume]_block_invoke
RUNNING
PAUSED
-[CSSmartSiriVolume _startListenPolling]
-[CSSmartSiriVolume _startListenPollingWithInterval:completion:]
-[CSSmartSiriVolume _startListenPollingWithInterval:completion:]_block_invoke
-[CSSmartSiriVolume _startListenWithCompletion:]_block_invoke_3
-[CSSmartSiriVolume _startListenWithCompletion:]_block_invoke
-[CSSmartSiriVolume _startListenWithCompletion:]
-[CSSmartSiriVolume _stopListening]
-[CSSmartSiriVolume _stopListening]_block_invoke
-[CSSmartSiriVolume initializeMediaPlayingState]_block_invoke
playing
NOT playing
-[CSSmartSiriVolume initializeMediaPlayingState]
-[CSSmartSiriVolume initializeAlarmState]_block_invoke
firing
NOT firing
-[CSSmartSiriVolume initializeTimerState]_block_invoke
-[CSSmartSiriVolume _setAsset:]
-[CSSmartSiriVolume _processAudioChunk:soundType:]
-[CSSmartSiriVolume estimateSoundLevelbySoundType:]_block_invoke
-[CSSmartSiriVolume _pauseSSVProcessing]_block_invoke
-[CSSmartSiriVolume _resumeSSVProcessing]_block_invoke
-[CSSmartSiriVolume audioStreamProvider:audioBufferAvailable:]_block_invoke
-[CSSmartSiriVolume audioStreamProvider:didStopStreamUnexpectly:]
-[CSSmartSiriVolume didDetectKeywordWithResult:]
-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke
-[CSSmartSiriVolume estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:]_block_invoke
-[CSSmartSiriVolume _combineResultsWithOptimalFromNoise:andOptimalFromLkfs:withUserOffset:]
-[CSSmartSiriVolume CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]_block_invoke
-[CSSmartSiriVolume didReceiveAlarmChanged:]_block_invoke
-[CSSmartSiriVolume didReceiveTimerChanged:]_block_invoke
-[CSSmartSiriVolume CSAudioServerCrashMonitorDidReceiveServerRestart:]
-[CSSmartSiriVolume siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke
-[CSSmartSiriVolume _setStartAnalyzeTime:]
-[CSSmartSiriVolume getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]
override-asset
CSSACInfoMonitor queue
-[CSSACInfoMonitor _startMonitoringWithQueue:]
-[CSSACInfoMonitor _stopMonitoring]
-[CSSACInfoMonitor isDeviceRoleStereo]
RTModelData
RTModelHash
RTModelLocale
RTModelDigest
RTModelSignature
RTModelCertificate
RT Model for 
 from asset 
CorealisRTModel
CorealisRTModelVersion
dataSize(%d), hash(%@), locale(%@), digest(%@), cert(%@), signature(%@)
com.apple.assistant.vibration-manager
com.apple.springboard.ring-vibrate.changed
com.apple.springboard.silent-vibrate.changed
-[CSSiriVibrationManager _fetchRingVibrationValue]
ring-vibrate
-[CSSiriVibrationManager _fetchSilentVibrationValue]
silent-vibrate
-[CSSiriVibrationManager handleRingVibrationValueChange]
-[CSSiriVibrationManager handleSilentVibrationValueChange]
com.apple.springboard
mobile
_fetchVibrationState
::: Initializing NVI logging...
Framework
InitNviLogging_block_invoke
CSAudioRouteChangeMonitorImpl queue
-[CSAudioRouteChangeMonitorImpl preferredExternalRouteDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImpl pickableRoutesDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImpl carPlayAuxStreamSupportDidChange:]_block_invoke
-[CSAudioRouteChangeMonitorImpl carPlayIsConnectedDidChange:]
-[CSAudioRouteChangeMonitorImpl _startMonitoringWithQueue:]
-[CSAudioRouteChangeMonitorImpl _stopMonitoring]
-[CSAudioRouteChangeMonitorImpl _notifyHearstConnectionState:]
-[CSAudioRouteChangeMonitorImpl _notifyHearstRoutedState:]
-[CSAudioRouteChangeMonitorImpl _notifyJarvisConnectionState:]
-[CSAudioRouteChangeMonitorImpl _notifySiriInputSourceOutOfBandState:]
-[CSAudioRouteChangeMonitorImpl _systemControllerDied:]
-[CSAutomaticVolumeEnabledMonitor observeValueForKeyPath:ofObject:change:context:]_block_invoke
-[CSSiriRecordingInfo initWithDictation:fingerprintOnly:secureOfflineOnly:audioAlertStyle:recordSettings:recordRoute:recordDeviceInfo:playbackRoute:audioDeviceID:audioSessionID:voiceTriggerEventInfo:activationAlertStartTimestamp:startRecordingTimestamp:firstBufferTimestamp:firstBufferHostTime:estimatedSpeechEndHostTime:deviceIdentifier:includeBTInfo:speechEvent:]
forceSiriPCMAudio
-[CSSpeakerRecognitionAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSSpeakerRecognitionAssetMetaUpdateMonitor _stopMonitoring]
-[CSSpeakerRecognitionAssetMetaUpdateMonitor _didReceiveSpeakerRecognitionAssetMetaData]
com.apple.MobileAsset.SpeakerRecognitionAssets.ma.cached-metadata-updated
com.apple.coreaudio.BorealisToggled
-[CSVoiceTriggerEnabledMonitor _startMonitoringWithQueue:]_block_invoke
-[CSVoiceTriggerEnabledMonitor _startMonitoringWithQueue:]
-[CSVoiceTriggerEnabledMonitor _stopMonitoring]
-[CSVoiceTriggerEnabledMonitor _checkVoiceTriggerEnabled]
Warmup
accessible-extended
accessible-maximum
extraSamplesAtStart
SearchOrMessaging
ExtraDelayMs
EndpointerDecisionLagMs
ClientLagThresholdMsKey
ClampedSFLatencyMsForClientLag
UseDefaultServerFeaturesOnClientLag
extra-delay-frequency
endpoint-threshold
com.apple.cs.%@.stateserialqueue
com.apple.cs.%@.sepfQueue
com.apple.cs.%@.hybridClassifierfQueue
-[CSHybridEndpointer endpointerModelVersion]_block_invoke
-[CSHybridEndpointer updateEndpointerThreshold:]_block_invoke
-[CSHybridEndpointer updateEndpointerDelayedTrigger:]_block_invoke
-[CSHybridEndpointer setEndpointerOperationMode:]_block_invoke
-[CSHybridEndpointer fetchCurrentEndpointerOperationMode]_block_invoke
-[CSHybridEndpointer processTaskString:]_block_invoke
-[CSHybridEndpointer processTaskString:]_block_invoke_2
-[CSHybridEndpointer processServerEndpointFeatures:]
-[CSHybridEndpointer processServerEndpointFeatures:]_block_invoke_2
-[CSHybridEndpointer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke_2
-[CSHybridEndpointer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke
-[CSHybridEndpointer processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:]_block_invoke
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]_block_invoke_3
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]_block_invoke_2
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]_block_invoke
-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:]
endpointerModelVersion
wordCount
eosLikelihood
trailingSilenceDuration
serverFeaturesLatency
clientSilenceProbability
clientSilenceFramesCountMs
endpointResult
-[CSHybridEndpointer logFeaturesWithEvent:locale:]_block_invoke
-[CSHybridEndpointer handleVoiceTriggerWithActivationInfo:]_block_invoke
-[CSHybridEndpointer terminateProcessing]
-[CSHybridEndpointer recordingStoppedForReason:]
-[CSHybridEndpointer stopEndpointer]
-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:]
-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:]_block_invoke
-[CSHybridEndpointer _readParametersFromHEPAsset:]_block_invoke
CSHybridEndpointer.m
CSHybridEndpointer reset called
-[CSHybridEndpointer endpointerAssetManagerDidUpdateAsset:]_block_invoke
cs_hep_marsh.json
cs_hep.json
-[CSHybridEndpointer _getCSHybridEndpointerConfigForAsset:]
-[CSSiriEnabledMonitor _startMonitoringWithQueue:]
-[CSSiriEnabledMonitor _stopMonitoring]
_AssistantPrefsChangedNotification
com.apple.nvi.csaudiosrc
-[NviCSAudioDataSource startWithNviContext:didStartHandler:]_block_invoke_2
-[NviCSAudioDataSource stopWithDidStopHandler:]_block_invoke_2
-[NviCSAudioDataSource _createAudioStreamWithCurrentNviContext]
-[NviCSAudioDataSource audioStreamProvider:avBufferAvailable:]
-[NviCSAudioDataSource audioStreamProvider:didStopStreamUnexpectly:]
-[NviCSAudioDataSource audioStreamProvider:audioChunkForTVAvailable:]
SPG.nnet
version
CSEndpointerAssetManager queue
-[CSEndpointerAssetManager init]
-[CSEndpointerAssetManager checkFirstUnlocked]
-[CSEndpointerAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]_block_invoke
-[CSEndpointerAssetManager CSAssetManagerDidDownloadNewAsset:]_block_invoke
-[CSEndpointerAssetManager CSFirstUnlockMonitor:didReceiveFirstUnlock:]_block_invoke
-[CSEndpointerAssetManager assetStatus:]
-[CSEndpointerAssetManager _getCurrentHEPAsset]
-[CSEndpointerAssetManager _updateOEPAssetsWithLanguage:]
-[CSEndpointerAssetManager _notifyAssetsUpdate]
-[CSEndpointerAssetManager _fetchEndpointMobileAssetWithLanguage:]
ModelInfo=
-[CSEndpointerAssetManager _getOEPVersionFromPath:]
-[CSEndpointerAssetManager _getFakeEndpointAsset]
-[CSEndpointDelayReporter initWithRequestMHUUID:turnIdentifier:]
-[CSEndpointDelayReporter reset]
leadingSilence
trailingSilence
endTime
-[CSEndpointDelayReporter setSpeechRecognizedContext:withEndpointerMetrics:]
CSActivationEventNotifier
-[CSActivationEventNotifier notifyActivationEventSynchronously:completion:]
-[CSActivationEventNotifier notifyActivationEvent:completion:]_block_invoke
-[CSActivationEventNotifier notifyActivationEvent:deviceId:activationInfo:completion:]_block_invoke
-[CSActivationEventNotifier _createXPCClientConnection]
-[CSLanguageCodeUpdateMonitorImpl _startMonitoringWithQueue:]
-[CSLanguageCodeUpdateMonitorImpl _stopMonitoring]
-[CSLanguageCodeUpdateMonitorImpl _didReceiveLanguageCodeUpdate]
+[CSUtils(AudioFile) readAudioChunksFrom:block:]
-[CSSoftwareUpdateCheckingMonitor _startMonitoringWithQueue:]
-[CSSoftwareUpdateCheckingMonitor _stopMonitoring]
-[CSSoftwareUpdateCheckingMonitor _checkSoftwareUpdateCheckingState]
com.apple.duetscheduler.restartCheckNotification
-[CSAssetManagerEnablePolicy _addAssetManagerEnabledConditions]_block_invoke
-[CSAttSiriAudioSessionStateClient initWithDelegate:]
SiriStateNotificationListener
com.apple.siri.client-state-changed
-[CSAttSiriAudioSessionStateClient notifyObserver:didReceiveNotificationWithToken:]
-[CSAttSiriAudioSessionStateClient notifyObserver:didChangeStateFrom:to:]
-[CSAttSiriAudioSessionStateClient dispatchStateChangedFrom:to:]
Liminal
progChecker.json
progressiveCheckerConfigFile
contionusConversationConfigFile
checkerConfig
validInputOrigins
thresholds
shadowMode
Unspecified
VoiceTrigger
ButtonPress
B32@?0@8@16^B24
v24@?0@8^B16
-[CSVoiceTriggerAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSVoiceTriggerAssetMetaUpdateMonitor _stopMonitoring]
-[CSVoiceTriggerAssetMetaUpdateMonitor _didReceiveNewVoiceTriggerAssetMetaData]
com.apple.MobileAsset.VoiceTriggerAssets.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsIPad.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerHSAssetsIPad.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsWatch.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerHSAssetsWatch.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsMarsh.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsMac.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerAssetsTV.ma.cached-metadata-updated
com.apple.MobileAsset.VoiceTriggerHSAssets.ma.cached-metadata-updated
-[CSAudioRecordDeviceIndicator updateWithLatestRecordContext:]
+[CSVoiceTriggerEnabledPolicyHelper siriInCallPolicy]
com.apple.assistant.queue-monitor
-[CSSiriQueueMonitor beginMonitoring]
-[CSSiriQueueMonitor endMonitoring]
-[CSSiriQueueMonitor _addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:]
-[CSSiriQueueMonitor _beginMonitoring]
-[CSSiriQueueMonitor _endMonitoring]
-[_CSSiriQueueObserver startWithQueue:]
com.apple.assistant.queue-observer.%s
-[_CSSiriQueueObserver stop]
-[_CSSiriQueueObserver timeoutDetected]
-[CSRemoteVADCircularBuffer copySamplesFrom:to:]
copySamples
-[CSAdBlockerAssetMetaUpdateMonitor _startMonitoringWithQueue:]
-[CSAdBlockerAssetMetaUpdateMonitor _stopMonitoring]
-[CSAdBlockerAssetMetaUpdateMonitor _didReceiveNewAdBlockerAssetMetaData]
com.apple.MobileAsset.AdBlockerAssets.ma.cached-metadata-updated
-[CSAudioStream initWithAudioStreamProvider:streamName:streamRequest:]
-[CSAudioStream dealloc]
-[CSAudioStream startAudioStreamWithOption:completion:]
-[CSAudioStream stopAudioStreamWithOption:completion:]_block_invoke
-[CSAudioStream isStreaming]
-[CSAudioStream updateAudioStreamStartTimeInSampleCount:]
-[CSAudioStream audioStreamProvider:didStopStreamUnexpectly:]
-[CSAudioStream audioStreamProvider:didHardwareConfigurationChange:]
BluetoothA2DPOutput
BluetoothHFP
BluetoothLE
MicrophoneBuiltIn
Speaker
Headphones
MicrophoneWired
HDMIOutput
LineIn
USBAudio
ADAudioSessionPortOther
-[CSSiriAudioSession currentInputRoute]_block_invoke
v24@?0^v8Q16
-[CSSiriAudioSession currentOutputRoute]_block_invoke_3
_AudioObjectGetScalarArray
v20@?0I8r^{AudioObjectPropertyAddress=III}12
_AudioDeviceRegisterForChangedNotification
v16@?0^v8
_AudioObjectGetCFTypeRef
_AudioObjectGetIntValue
{wordCount: %ld, trailingSilDuration: %ld, eosLikelihood: %f, pauseCounts: (%@), silencePosterior: %f, taskName: %@, processedAudioDurationInMilliseconds: %ld}
WordCount
TrailingSilDuration
EOSLikelihood
PauseCounts
SilencePosterior
ProcessedAudioDurationInMilliseconds
CSActivationEventNotificationHandler Queue
-[CSActivationEventNotificationHandler setDelegate:forType:]_block_invoke
-[CSActivationEventNotificationHandler notifyActivationEvent:completion:]_block_invoke
-[CSActivationEventNotificationHandler _notifyActivationEvent:completion:]
-[CSActivationEventNotificationHandler _notifyActivationEvent:completion:]_block_invoke
-[CSActivationEventNotificationHandler _startMonitoring]
-[CSActivationEventNotificationHandler _stopMonitoring]
-[CoreSpeechXPC installedVoiceTriggerAssetForLanguageCode:completion:]
-[CoreSpeechXPC fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]
-[CoreSpeechXPC _handleFakeHearstModelRequest:majorVersion:minorVersion:downloadedModels:preinstalledModels:completion:]
fakeModel.json
fakeModel
-[CoreSpeechXPC voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:]
v40@?0@"CSVoiceTriggerRTModel"8@"CSVoiceTriggerRTModel"16@"NSString"24@"NSError"32
-[CoreSpeechXPC voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:]_block_invoke
-[CoreSpeechXPC voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]_block_invoke
-[CoreSpeechXPC voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]
de-AT
de-DE
de-CH
en-AU
en-CA
en-GB
en-SG
en-IE
en-IN
en-ZA
en-NZ
it-IT
it-CH
ja-JP
zh-CN
zh-TW
nb-NO
nl-BE
nl-NL
sv-SE
tr-TR
fi-FI
he-IL
es-ES
es-US
es-CL
es-MX
fr-FR
fr-BE
fr-CA
fr-CH
ko-KR
zh-HK
yue-CN
da-DK
ms-MY
pt-BR
ru-RU
th-TH
ar-AE
ar-SA
default
Hearst
-[CoreSpeechXPC _fetchVoiceTriggerInstalledAssetWithLanguage:completion:]_block_invoke
-[CSSiriRestrictionOnLockScreenMonitor _startMonitoringWithQueue:]
-[CSSiriRestrictionOnLockScreenMonitor _stopMonitoring]
-[CSSiriRestrictionOnLockScreenMonitor _checkSiriRestrictedOnLockScreen]
-[CSRawAudioInjectionProvider init]
CSRawAudioInjectionProvider
-[CSRawAudioInjectionProvider dealloc]
-[CSRawAudioInjectionProvider setContext:completion:]
-[CSRawAudioInjectionProvider setCurrentContext:streamHandleId:error:]
-[CSRawAudioInjectionProvider prepareAudioStreamRecord:recordDeviceIndicator:error:]
-[CSRawAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]
/var/mobile/darwin_test.wav
-[CSRawAudioInjectionProvider stopAudioStreamWithRecordDeviceIndicator:error:]
-[CSRawAudioInjectionProvider isRecordingWithRecordDeviceIndicator:]
RawAudioInjection
-[CSRawAudioInjectionProvider prewarmAudioSessionWithStreamHandleId:error:]
-[CSRawAudioInjectionProvider activateAudioSessionWithReason:streamHandleId:error:]
-[CSSpringboardStartMonitor _startMonitoringWithQueue:]
-[CSSpringboardStartMonitor _stopMonitoring]
-[CSSpringboardStartMonitor _checkSpringBoardStarted]
com.apple.springboard.finishedstartup
CSAudioProvider
CSAudioProvider Stream Handle Queue
CSAudioProvider logging
-[CSAudioProvider dealloc]
-[CSAudioProvider setStreamState:]
-[CSAudioProvider setAudioRecorder:]_block_invoke
-[CSAudioProvider supportsDuckingOnCurrentRouteWithError:]
-[CSAudioProvider setCurrentContext:error:]
-[CSAudioProvider setCurrentContext:error:]_block_invoke
-[CSAudioProvider _audioStreamWithRequest:streamName:error:]
-[CSAudioProvider attachTandemStream:toPrimaryStream:completion:]_block_invoke_2
failed
successfully
-[CSAudioProvider attachTandemStream:toPrimaryStream:completion:]_block_invoke
-[CSAudioProvider _prepareAudioStreamSync:request:error:]
-[CSAudioProvider _createCircularBufferIfNeededWithNumChannel:playbackRoute:]
-[CSAudioProvider startAudioStream:option:completion:]
-[CSAudioProvider startAudioStream:option:completion:]_block_invoke
-[CSAudioProvider prepareAudioStreamSync:request:error:]
-[CSAudioProvider prepareAudioStream:request:completion:]
-[CSAudioProvider _startAudioStream:option:completion:]
-[CSAudioProvider _startAudioStream:option:completion:]_block_invoke_3
-[CSAudioProvider _startAudioStream:option:completion:]_block_invoke_2
-[CSAudioProvider _startAudioStream:option:completion:]_block_invoke
-[CSAudioProvider _handleDidStartAudioStreamWithResult:error:]
-[CSAudioProvider _handleDidStopAudioStreamWithReason:]
-[CSAudioProvider _stopAudioStream:option:completion:]
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke_4
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke_3
CSAudioProvider.m
-[CSAudioProvider _stopAudioStream:option:completion:]_block_invoke_2
-[CSAudioProvider _saveRecordingBufferFrom:to:toURL:]_block_invoke
-[CSAudioProvider holdAudioStreamWithDescription:timeout:]
-[CSAudioProvider holdAudioStreamWithDescription:timeout:]_block_invoke_2
-[CSAudioProvider holdAudioStreamWithDescription:timeout:]_block_invoke
-[CSAudioProvider cancelAudioStreamHold:]
-[CSAudioProvider cancelAudioStreamHold:]_block_invoke
-[CSAudioProvider prewarmAudioSessionWithError:]
-[CSAudioProvider activateAudioSessionWithReason:dynamicAttribute:bundleID:error:]
-[CSAudioProvider _activateAudioSessionWithReason:error:]
-[CSAudioProvider _shouldDuckOnBuiltInSpeaker]
-[CSAudioProvider _isDuckingOnSpeakerOutputSupportedWithCurrentRoute]
-[CSAudioProvider deactivateAudioSession:error:]
-[CSAudioProvider _deactivateAudioSession:error:]
-[CSAudioProvider setDuckOthersOption:]
-[CSAudioProvider setAlertSoundFromURL:forType:force:]
-[CSAudioProvider playAlertSoundForType:]
-[CSAudioProvider playRecordStartingAlertAndResetEndpointer]
-[CSAudioProvider alertStartTime]
-[CSAudioProvider triggerInfoForContext:completion:]_block_invoke
-[CSAudioProvider _shouldStopRecording]
-[CSAudioProvider audioRecorderStreamHandleIdInvalidated:]
-[CSAudioProvider audioRecorderWillBeDestroyed:]_block_invoke
-[CSAudioProvider _fetchHistoricalAudioAndForwardToStream:remoteVAD:]
-[CSAudioProvider _scheduleAlertFinishTimeout:]
-[CSAudioProvider _scheduleAlertFinishTimeout:]_block_invoke
-[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]
-[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]_block_invoke_2
-[CSAudioProvider _didReceiveFinishStartAlertPlaybackAt:]_block_invoke
-[CSAudioProvider audioRecorderBuiltInAudioStreamInvalidated:error:]_block_invoke
-[CSAudioProvider audioRecorderDisconnected:]
-[CSAudioProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]
-[CSAudioProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]
-[CSAudioProvider _handleAudioSystemFailure]
StreamInit
StreamPrepared
StreamStarting
StreamSteaming
StreamStopping
StreamStoppingWithScheduledStart
unknown(%tu)
com.apple.corespeech.recording
Recording transaction
-[CSAudioProvider _releaseRecordingTransactionIfNeeded]
%@-%@
-[CSAudioProvider _onAudioPacketWatchdogFire]
-[CSAudioProvider _scheduleDidStartRecordingDelegateWatchDog]
-[CSAudioProvider _schduleDidStartRecordingDelegateWatchDogWithToken:]
-[CSAudioProvider _clearDidStartRecordingDelegateWatchDog]
-[CSAudioProvider _scheduleDidStopRecordingDelegateWatchDog]
-[CSAudioProvider _scheduleDidStopRecordingDelegateWatchDog:]
-[CSAudioProvider _clearDidStopRecordingDelegateWatchDog]
-[CSAudioProvider _updateRemoteDeviceIdFromAVVCIfNeeded]
-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke
-[NSArray(XPCObject) _cs_initWithXPCObject:]
-[NSArray(XPCObject) _cs_initWithXPCObject:]_block_invoke
B24@?0Q8@"NSObject<OS_xpc_object>"16
-[NSArray(XPCObject) _cs_xpcObject]_block_invoke
v32@?0@8Q16^B24
-[CSAlwaysOnProcessorStateMonitor _startMonitoringWithQueue:]_block_invoke
com.apple.audio.AOP.enable
-[CSAlwaysOnProcessorStateMonitor _startMonitoringWithQueue:]_block_invoke_2
-[CSAlwaysOnProcessorStateMonitor _stopMonitoring]
-[CSAlwaysOnProcessorStateMonitor _didReceiveAOPListeningStateChange:]
+[CSAdBlockerAssetDecoderFactory adBlockerAssetDecoderWithVersion:]
com.apple.siri.myriad.in.ear
+[CSMyriadNotifier notifyInEarMyriadTrigger]
-[CSAVCallConnectedMonitor _systemControllerDied:]
+[CSRemoteDeviceProtocolInfo localDeviceProtocolInfo]
protocolVersion=%lu, deviceCategory=%lu, buildVersion=%@, deviceProductVersion=%@, deviceProductType=%@
protocolVersion
deviceCategory
buildVersion
deviceProductVersion
deviceProductType
-[CSHybridEndpointAnalyzer init]
com.apple.cs.%@.apQueue
com.apple.cs.%@.osdQueue
-[CSHybridEndpointAnalyzer _loadAndSetupEndpointerAssetIfNecessary]
-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]
-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke
-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke_2
-[CSHybridEndpointAnalyzer updateEndpointerThreshold:]
-[CSHybridEndpointAnalyzer updateEndpointerDelayedTrigger:]
-[CSHybridEndpointAnalyzer processServerEndpointFeatures:]
-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke_2
-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_3
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_2
-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke
-[CSHybridEndpointAnalyzer logFeaturesWithEvent:locale:]_block_invoke
-[CSHybridEndpointAnalyzer handleVoiceTriggerWithActivationInfo:]_block_invoke
-[CSHybridEndpointAnalyzer recordingStoppedForReason:]
-[CSHybridEndpointAnalyzer stopEndpointer]
-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]
-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:]_block_invoke
-[CSHybridEndpointAnalyzer _readParametersFromHEPAsset:]_block_invoke
CSHybridEndpointAnalyzer.m
CSHybridEndpointAnalyzer reset called
-[CSHybridEndpointAnalyzer CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]
-[CSHybridEndpointAnalyzer CSAssetManagerDidDownloadNewAsset:]
-[CSHybridEndpointAnalyzer CSFirstUnlockMonitor:didReceiveFirstUnlock:]
-[CSHybridEndpointAnalyzer _updateAssetWithLanguage:]_block_invoke
-[CSHybridEndpointAnalyzer _getCSHybridEndpointerConfigForAsset:]
injectionDevice
com.apple.da
ExperimentGroup
walkabout
carry
CSAudioSessionInfoProvider
-[CSAudioSessionInfoProvider audioSessionIdForDeviceId:]
-[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]_block_invoke
-[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke
-[CSAudioSessionInfoProvider _registerInterruptionNotification]
-[CSAudioSessionInfoProvider _registerAudioRouteChangeNotification]
-[CSAudioSessionInfoProvider _handleInterruption:]_block_invoke
-[CSAudioSessionInfoProvider _audioRouteChanged:]_block_invoke
RouteChangeNotificationInfo
-[CSAudioSessionInfoProvider _deregisterAudioSessionNotifications]
-[CSEndpointerProxy resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:]
-[CSEndpointerProxy resetForVoiceTriggerTwoShotWithSampleRate:]
-[CSEndpointerProxy preheat]
-[CSEndpointerProxy endpointer:didDetectStartpointAtTime:]
-[CSEndpointerProxy endpointer:didDetectHardEndpointAtTime:withMetrics:]
-[CSEndpointerProxy endpointer:detectedTwoShotAtTime:]
-[CSEndpointerProxy endpointerModelVersion]
-[CSEndpointerProxy updateEndpointerThreshold:]
-[CSEndpointerProxy logHybridEndpointFeaturesWithEvent:locale:]
CSSiriMobileBluetoothDeviceDataSource
Queue %s did not respond to watchdog and is likely blocked.
-[CSSiriMobileBluetoothDeviceDataSource init]_block_invoke_2
-[CSSiriMobileBluetoothDeviceDataSource _cleanUpDeviceProxies]
-[CSSiriMobileBluetoothDeviceDataSource _detachFromSession]
-[CSSiriMobileBluetoothDeviceDataSource _attachToSession]
-[CSSiriMobileBluetoothDeviceDataSource _sessionAttached:result:]
-[CSSiriMobileBluetoothDeviceDataSource _sessionDetached:]
-[CSSiriMobileBluetoothDeviceDataSource _sessionTerminated:]
-[CSSiriMobileBluetoothDeviceDataSource _setUpLocalDevice]
-[CSSiriMobileBluetoothDeviceDataSource localDevice:event:result:]
-[CSSiriMobileBluetoothDeviceDataSource _setUpAccessoryManager]
-[CSSiriMobileBluetoothDeviceDataSource accessoryManager:event:device:state:]
v16@?0@"AFBluetoothDeviceInfo"8
-[CSSiriMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]_block_invoke
-[CSSiriMobileBluetoothDeviceDataSource getBTDeviceWithDeviceUID:completion:]_block_invoke
-[CSSiriMobileBluetoothDeviceDataSource getBTLocalDeviceWithCompletion:]_block_invoke
%@ {deviceUID = %@}
%@ {address = %@}
-[CSSiriMobileBluetoothDeviceProxy dealloc]
-[CSSiriMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]
-[CSSiriMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]
-[CSSiriMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy deviceInfo]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy deviceInfo]
-[CSSiriMobileBluetoothDeviceProxy getHeadphoneInEarDetectionState:]
-[CSSiriMobileBluetoothDeviceProxy getHeadphoneListeningMode:]
-[CSSiriMobileBluetoothDeviceProxy setHeadphoneListeningMode:completion:]
v24@?0^{BTDeviceImpl=}8^{BTAccessoryManagerImpl=}16
-[CSSiriMobileBluetoothDeviceProxy _reload:]
-[CSSiriMobileBluetoothDeviceProxy _reload:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy _updateDeviceInfo:]
v16@?0@"<AFBluetoothDeviceObserver>"8
-[CSSiriMobileBluetoothDeviceProxy _fetchDeviceInfoWithCompletion:]
v16@?0@"<AFBluetoothDeviceInfoMutating>"8
-[CSSiriMobileBluetoothDeviceProxy _fetchDeviceInfoWithCompletion:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]
-[CSSiriMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]_block_invoke
-[CSSiriMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]_block_invoke_2
-[CSSiriMobileBluetoothDeviceProxy _invalidate]
v24@?0@"<AFBluetoothDeviceObserver>"8^B16
ADBTResult
_CSSiriBTDeviceGetAddress
_CSSiriBTDeviceGetDeviceInfo
-[NSNumber(XPCObject) _cs_initWithXPCObject:]
-[NSNumber(XPCObject) _cs_xpcObject]
-[CSFirstUnlockMonitor _stopMonitoring]
kVTPreferencesPhraseSpotterEnabledDidChangeDarwinNotification
-[CSPhraseSpotterEnabledMonitor _checkPhraseSpotterEnabled]
-[CSPhraseSpotterEnabledMonitor _phraseSpotterEnabledDidChange]
corespeechd speaker xpc connection client queue
-[CSVoiceIdXPCConnection initWithConnection:]
-[CSVoiceIdXPCConnection _handleClientEvent:]
-[CSVoiceIdXPCConnection _handleClientMessage:client:]
-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke
-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke_2
-[CSVoiceIdXPCConnection _handleClientError:client:]
com.apple.
com.apple.private.
com.apple.assistant.audio-service-workloop
Internal User Classification
kAFPreferencesDidChangeDarwinNotification
Audio Session Active Delay
Server Media Playback Volume Threshold for Audio Session Activation Delay
Server Audio Session Activation Delay Above Media Playback Volume Threshold
Server Audio Session Activation Delay
com.apple.corespeech.mockremoteplugin.xpc
CSFallbackAudioSessionReleaseProvider
-[CSFallbackAudioSessionReleaseProvider fallbackDeactivateAudioSession:error:]_block_invoke
-[CSFallbackAudioSessionReleaseProvider fallbackDeactivateAudioSession:error:]
CSSPGEndpointAnalyzer
hybridendpointer.json
-[CSSPGEndpointAnalyzer reset]_block_invoke
-[CSSPGEndpointAnalyzer dealloc]
-[CSSPGEndpointAnalyzer stop]_block_invoke
-[CSSPGEndpointAnalyzer clientSilenceFeaturesAvailable:]
-[CSHomePodSettingsMonitor _stopMonitoring]
-[CSAudioTapProvider init]
CSAudioTapProvider.mm
com.apple.siri.acousticsignature
ADAcousticFingerprinter
-[CSSiriAcousticFingerprinter _connectionInterrupted]
-[CSSiriAcousticFingerprinter _connectionInvalidated]
-[CSSiriAcousticFingerprinter _configureWithCurrentASBD]
-[CSSiriAcousticFingerprinter _convertPCMDataForFingerprinting:]
-[CSSiriAcousticFingerprinter appendPCMData:]_block_invoke
v16@?0@"NSData"8
-[CSSiriAcousticFingerprinter flush]_block_invoke_2
ASXSampleRateFromInt
satScore
selfLoggingMHUUID
CSSiriSpeechRecorder.m
speechController != nil
audioSessionController != nil
audioPlaybackService != nil
-[CSSiriSpeechRecorder initWithQueue:speechController:audioSessionController:audioPlaybackService:experimentContext:]
-[CSSiriSpeechRecorder _currentMHUUID:]
-[CSSiriSpeechRecorder _setSpeechCapturingMode:]
-[CSSiriSpeechRecorder _setEndpointerOperationMode:forceUpdate:]
-[CSSiriSpeechRecorder _setAlertsIfNeeded]
siri-begin-improved
v32@?0@"NSNumber"8@"NSNumber"16^B24
-[CSSiriSpeechRecorder _updateRecordBufferDuration]
Speech controller should not be nil.
-[CSSiriSpeechRecorder _speechControllerWithError:]
-[CSSiriSpeechRecorder _resetSpeechController]
-[CSSiriSpeechRecorder _prepareSpeechControllerWithOptions:error:]
requestDuringActiveCall
v16@?0@"NSArray"8
since we have no Voice Controller!
-[CSSiriSpeechRecorder _stopRecordingWithReason:hostTime:]
%d.%d
 Forcing two shot mode to NO
-[CSSiriSpeechRecorder _disableEndpointer]
-[CSSiriSpeechRecorder _playAudioAlert:]
-[CSSiriSpeechRecorder _checkAudioLoggingLimits:]
-[CSSiriSpeechRecorder _prepareDirectoryAtPath:]
-[CSSiriSpeechRecorder _setupAudioFileWritingForSpeechController:info:context:]
-[CSSiriSpeechRecorder _setupAudioFileWritingForSpeechController:info:context:]_block_invoke
PCM-%@-%@.wav
v24@?0@"NSURL"8@?<v@?>16
-[CSSiriSpeechRecorder _setEndpointStyle:]
-[CSSiriSpeechRecorder _stopRecordingForEndpointReason:withEndpointMetrics:]
-[CSSiriSpeechRecorder eagerlyInitializeAudioRecording]
-[CSSiriSpeechRecorder preheatWithOption:]
-[CSSiriSpeechRecorder preheatWithOption:]_block_invoke
-[CSSiriSpeechRecorder recordingInfoForPreheatWithEvent:]
-[CSSiriSpeechRecorder currentVTSatScore]
-[CSSiriSpeechRecorder prepareForMode:]
-[CSSiriSpeechRecorder prepareForMode:withOptions:]
-[CSSiriSpeechRecorder startSpeechCaptureWithContext:willStartHandler:error:]
kAudioSessionProperty_ActiveSessionDisplayIDs
, playing error alert
-[CSSiriSpeechRecorder updateSpeechSynthesisRecord:]
-[CSSiriSpeechRecorder _audioSessionID]
state
v16@?0@?<v@?@"NSDictionary">8
-[CSSiriSpeechRecorder setSpeechRequestOptions:]
-[CSSiriSpeechRecorder _updateAudioContextWithInfo:reason:]
-[CSSiriSpeechRecorder _setAudioContextWithInfo:forReason:]
-[CSSiriSpeechRecorder _updateAudioContextToPostVoiceForReason:]
-[CSSiriSpeechRecorder _updateAudioContextWithPendingInfoForReason:]
-[CSSiriSpeechRecorder releaseAudioSession]
notify
suppress (keep others interrupted forever)
-[CSSiriSpeechRecorder setSpeechWasRecognizedForElapsedTime:isFinal:]
-[CSSiriSpeechRecorder setFingerprintWasRecognized]
-[CSSiriSpeechRecorder stopSpeechCaptureForEvent:suppressAlert:hostTime:]
-[CSSiriSpeechRecorder cancelSpeechCaptureSuppressingAlert:]
-[CSSiriSpeechRecorder forceSuccessAudioAlertOnStop]
-[CSSiriSpeechRecorder _speechRecordingEventListener]_block_invoke
-[CSSiriSpeechRecorder setClientConfiguration:]
-[CSSiriSpeechRecorder playRecordingStartAlert]_block_invoke
-[CSSiriSpeechRecorder _updateAudioDeviceInfo:forReason:forcesUpdate:]
Unavailable
playbackDeviceTypes
-[CSSiriSpeechRecorder _recordingInfoForEvent:audioAlertStyle:includeBTInfo:includeRecordDeviceInfo:]
-[CSSiriSpeechRecorder speechControllerDidStartRecording:audioDeviceInfo:successfully:error:]
-[CSSiriSpeechRecorder speechControllerDidStartRecording:audioDeviceInfo:successfully:error:]_block_invoke
-[CSSiriSpeechRecorder _speechControllerDidStartRecording:successfully:error:]
Opus
Speex
-[CSSiriSpeechRecorder speechControllerDidDeliverLastBuffer:forReason:estimatedSpeechEndHostTime:]
-[CSSiriSpeechRecorder speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:]
-[CSSiriSpeechRecorder speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:]_block_invoke
-[CSSiriSpeechRecorder _speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:]
-[CSSiriSpeechRecorder _speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:]_block_invoke_2
-[CSSiriSpeechRecorder speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:]
-[CSSiriSpeechRecorder speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:]_block_invoke
-[CSSiriSpeechRecorder _speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:atHostTime:mhUUID:]
-[CSSiriSpeechRecorder getAudioRouteInstrumentationWithRecordingInfo:]
-[CSSiriSpeechRecorder speechControllerLPCMRecordBufferAvailable:buffer:recordedAt:]
audio_recording
empty_lpcm_record_buffer
-[CSSiriSpeechRecorder _speechControllerDidReceiveLastAudioRecordBuffer:forReason:estimatedSpeechEndHostTime:isRecordingStopped:]
-[CSSiriSpeechRecorder speechControllerBeginRecordInterruption:withContext:]
-[CSSiriSpeechRecorder speechControllerEndRecordInterruption:]
-[CSSiriSpeechRecorder speechControllerRecordHardwareConfigurationDidChange:toConfiguration:]
-[CSSiriSpeechRecorder speechController:willSetAudioSessionActive:]
-[CSSiriSpeechRecorder speechController:didSetAudioSessionActive:]
-[CSSiriSpeechRecorder speechControllerDidFinishAlertPlayback:ofType:error:]
-[CSSiriSpeechRecorder speechControllerDidFinishAlertPlayback:ofType:error:]_block_invoke
-[CSSiriSpeechRecorder _setLanguageDetectorDelegateIfRequired]
-[CSSiriSpeechRecorder _playStopAlertIfNecessaryForReason:endpointMode:error:]
AVVoice_RecordStoppedWithError
AVVoice_RecordStopped
-[CSSiriSpeechRecorder languageDetectorDidDetectLanguageWithConfidence:confidence:isConfident:]
-[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:]
-[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:]_block_invoke_2
Two shot feedback
-[CSSiriSpeechRecorder speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:]_block_invoke
-[CSSiriSpeechRecorder suppressUtteranceGradingIfRequired]
Utterance Grading
-[CSSiriSpeechRecorder suppressUtteranceGradingIfRequired]_block_invoke
-[CSSiriSpeechRecorder speechControllerRequestsOperation:forReason:]
-[CSSiriSpeechRecorder speechControllerRequestsOperation:forReason:completion:]
-[CSSiriSpeechRecorder _speechControllerRequestsOperation:forReason:completion:]
v32@?0d8d16@"NSError"24
-[CSSiriSpeechRecorder speechControllerDidUpdateSmartSiriVolume:forReason:]
-[CSSiriSpeechRecorder endpointer:didDetectStartpointAtTime:]
-[CSSiriSpeechRecorder endpointer:didDetectStartpointAtTime:]_block_invoke
-[CSSiriSpeechRecorder endpointer:didDetectHardEndpointAtTime:withMetrics:]
time
additionalMetrics
@"NSMutableDictionary"8@?0
-[CSSiriSpeechRecorder endpointer:didDetectHardEndpointAtTime:withMetrics:]_block_invoke
-[CSSiriSpeechRecorder _hardEndpointWasDetectedWithMetrics:atTime:]
-[CSSiriSpeechRecorder _performTwoShotPromptForType:atTime:]
suppressedAlert
timedOut
-[CSSiriSpeechRecorder _playPhaticWithCompletion:]
-[CSSiriSpeechRecorder _playPhaticWithCompletion:]_block_invoke
delegate is nil
-[CSSiriSpeechRecorder _handleFakeTwoShotPromptTimeoutWithUUID:]
-[CSSiriSpeechRecorder _handleFakeTwoShotPromptCallbackWithUUID:timestamp:duration:error:]
-[CSSiriSpeechRecorder updateEndpointHintForRC:forceAccept:completion:]
-[CSSiriSpeechRecorder _checkIfLastEndpointHintShouldBeAccepted:]
-[CSSiriSpeechRecorder _checkIfLastEndpointHintShouldBeAccepted:]_block_invoke_2
v24@?0B8B12@"NSArray"16
-[CSSiriSpeechRecorder _enforceEndpointHintWithMitigation:]
-[CSSiriSpeechRecorder enforcePreviousEndpointHint]
-[CSSiriSpeechRecorder performBlockAfterAlerts:timeout:]
-[CSSiriSpeechRecorder performBlockAfterAlerts:timeout:]_block_invoke
-[CSSiriSpeechRecorder acousticFingerprinter:hasFingerprint:duration:]
-[CSSiriSpeechRecorder _startAudioPlaybackRequest:options:completion:]
-[CSSiriSpeechRecorder _startAudioPlaybackRequest:options:completion:]_block_invoke
-[CSSiriSpeechRecorder speakerIdentificationDidDetectSpeakerWithScores:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionOwnerLostNotification:]
-[CSSiriSpeechRecorder audioSessionController:didReceiveAudioSessionOwnerResetNotification:]
Siri
DictationSecureOfflineOnly
FingerprintOnly
SiriSecureOfflineOnly
SiriCoreSymptomsReporter
Class getSiriCoreSymptomsReporterClass(void)_block_invoke
void *SiriCoreLibrary(void)
yyyy_MM_dd-HHmmss.SSS
com.apple.assistant.audio-playback-service
-[CSSiriAudioPlaybackService _prewarmRequest:completion:]
-[CSSiriAudioPlaybackService _startRequest:options:preparationHandler:executionHandler:finalizationHandler:]
-[CSSiriAudioPlaybackService _handlePreparationForSession:]
v16@?0@"<CSSiriAudioPlaybackServiceListening>"8
-[CSSiriAudioPlaybackService _handleExecutionForSession:]
-[CSSiriAudioPlaybackService _handleFinalizationForSession:error:]
v32@?0@"AFAudioPlaybackRequest"8@"<CSSiriAudioPlaybackSession>"16^B24
v24@?0@"<CSSiriAudioPlaybackServiceListening>"8^B16
-[CSSiriAudioPlaybackService _evictAllReusableSessionsForReason:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionOwnerLostNotification:]
-[CSSiriAudioPlaybackService audioSessionController:didReceiveAudioSessionOwnerResetNotification:]
StartOfSpeech SPG queue
StartOfSpeech queue
-[CSStartOfSpeechDetector initWithConfig:samplingRate:minSpeechFrames:numLeadingFrames:delegate:]
-[CSStartOfSpeechDetector resetForNewRequest]_block_invoke
-[CSStartOfSpeechDetector clientSilenceFeaturesAvailable:]_block_invoke
-[CSAudioServerCrashMonitor _startMonitoringWithQueue:]_block_invoke
-[CSAudioServerCrashMonitor _startMonitoringWithQueue:]
com.apple.corespeech.voicetriggerservice
-[CSVoiceTriggerXPCClient dealloc]
-[CSVoiceTriggerXPCClient _handleListenerEvent:]
-[CSVoiceTriggerXPCClient _handleListenerError:]
enable
assertion
timestamp
phraseSpotterBypass
bypassTimeout
raiseToSpeakBypass
triggerStats
-[CSVoiceTriggerXPCClient fetchVoiceTriggerStats]
v24@?0@"NSObject<OS_xpc_object>"8@?<v@?>16
_RegisterXPCActivity_block_invoke
com.apple.siri.xpc_activity.power-logging
-[CSCoreSpeechDaemonStateMonitor notifyDaemonStateChanged:]
com.apple.corespeech.corespeechd.launch
-[CSCoreSpeechDaemonStateMonitor _startMonitoringWithQueue:]
-[CSCoreSpeechDaemonStateMonitor _stopMonitoring]
-[CSCoreSpeechDaemonStateMonitor _didReceiveDaemonStateChanged:]
-[CSNetworkAvailabilityMonitor _startMonitoringWithQueue:]
-[CSNetworkAvailabilityMonitor _stopMonitoring]
-[CSNetworkAvailabilityMonitor _availabilityChanged]
-[CSSpeechDetectionDevicePresentMonitor handleSpeechDetectionVADPresentChange:]
-[CSSpeechDetectionDevicePresentMonitor _systemControllerDied:]
-[CSLanguageCodeUpdateMonitorImplDarwin _startMonitoringWithQueue:]
-[CSLanguageCodeUpdateMonitorImplDarwin _stopMonitoring]
-[CSLanguageCodeUpdateMonitorImplDarwin _didReceiveLanguageCodeUpdate:]
-[CSAttSiriMitigationAssetHandler setCachedAsset:]_block_invoke
-[CSAttSiriMitigationAssetHandler _receivedNewAssetUpdate:]
-[CSAttSiriMitigationAssetHandler trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:]
isRemoteDevice
remoteDeviceUID
remoteDeviceProductIdentifier
remoteDeviceUIDString
%@ {route = %@, isRemoteDevice = %d, remoteDeviceUID = %@, remoteDeviceProductIdentifier = %@, remoteDeviceUIDString = %@}
CSOpportuneSpeakListnerTestService
com.apple.corespeech.opportunelistner.start
com.apple.corespeech.opportunelistner.stop
A945B95D-69F6-FC77-4FAE-91F50A039CD8
-[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStart]_block_invoke
-[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStop]_block_invoke
-[CSOpportuneSpeakListnerTestService opportuneSpeakListener:hasRemoteVADAvailable:]
-[CSOpportuneSpeakListnerTestService opportuneSpeakListener:hasVADAvailable:]
-[CSOpportuneSpeakListnerTestService opportuneSpeakListener:didStopUnexpectly:]
-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]
-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]_block_invoke
CSAudioConverter.m
Cannot produce ASPD for PCM
-[CSAudioConverter reset]
-[CSAudioConverter _configureAudioConverter:]
CreateAudioConverter
-[CSLanguageCodeUpdateMonitor _startMonitoringWithQueue:]
CSLanguageCodeUpdateMonitor.m
-[CSLanguageCodeUpdateMonitor _stopMonitoring]
-[CSLanguageCodeUpdateMonitor notifySiriLanguageCodeChanged:]
BuiltInMicrophoneDevice
CSVoiceTriggerEventInfoProvider Queue
-[CSVoiceTriggerEventInfoProvider fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:]_block_invoke
-[CSVoiceTriggerEventInfoProvider fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:]
-[NSData(Nvi) splitAudioDataToReachSampleCount:currSampleCount:numBytesPerSample:completionHandler:]
CSSmartSiriVolumeRunPolicy queue
-[CSSmartSiriVolumeRunPolicy _addSmartSiriVolumeEnabledConditions]_block_invoke
com.apple.corespeech.audioinjection.xpc
+[CSAudioInjectionServices setAudioInjectionMode:]
+[CSAudioInjectionServices audioInjectionEnabled]
+[CSAudioInjectionServices pingpong:completion:]_block_invoke
+[CSAudioInjectionServices pingpong:completion:]
v28@?0B8@"NSError"12@"NSUUID"20
+[CSAudioInjectionServices createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:]_block_invoke_2
+[CSAudioInjectionServices createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:]_block_invoke
+[CSAudioInjectionServices createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:]
v36@?0B8@"NSError"12Q20Q28
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:]_block_invoke_2
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:]_block_invoke
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:]
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withNumChannels:completion:]_block_invoke_2
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withNumChannels:completion:]_block_invoke
+[CSAudioInjectionServices injectAudio:toDeviceWithUUID:withNumChannels:completion:]
+[CSAudioInjectionServices connectDeviceWithUUID:completion:]_block_invoke_2
+[CSAudioInjectionServices connectDeviceWithUUID:completion:]_block_invoke
+[CSAudioInjectionServices connectDeviceWithUUID:completion:]
+[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]_block_invoke_2
+[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]_block_invoke
+[CSAudioInjectionServices disconnectDeviceWithUUID:completion:]
+[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]_block_invoke_2
+[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]_block_invoke
+[CSAudioInjectionServices primaryInputDeviceUUIDWithCompletion:]
Dpg:%.3f Dpd:%.3f T:%.3f
droppingPrediction
droppedPrediction
voic
carplay
hearst
raisetospeak
auto
-[NSDictionary(XPCObject) _cs_initWithXPCObject:]
-[NSDictionary(XPCObject) _cs_initWithXPCObject:]_block_invoke
B24@?0r*8@"NSObject<OS_xpc_object>"16
-[NSDictionary(XPCObject) _cs_xpcObject]_block_invoke
v32@?0@8@16^B24
detector-config
supported-locales
detector.json
sos-options.json
SPG.json
Builtin Microphone
[Context = %ld]
[DeviceId = %@]
[Announced = %d]
[streamHandleId = %d]
[startHostTime = %llu]
[startAlert = %d]
[stopAlert = %d]
[stopOnErrorAlert = %d]
[skipAlert = %@]
-[CSAudioRecorder initWithQueue:error:]
-[CSAudioRecorder userSessionActivateMonitor:didReceivedUserSessionActiveHasChanged:]_block_invoke
-[CSAudioRecorder willDestroy]
-[CSAudioRecorder dealloc]
-[CSAudioRecorder _destroyVoiceController]
-[CSAudioRecorder _voiceControllerWithError:]_block_invoke_2
-[CSAudioRecorder _voiceControllerWithError:]_block_invoke
-[CSAudioRecorder _voiceControllerWithError:]
-[CSAudioRecorder setAnnounceCallsEnabled:withStreamHandleID:]
-[CSAudioRecorder setContext:completion:]
-[CSAudioRecorder setCurrentContext:streamHandleId:error:]
-[CSAudioRecorder prepareAudioStreamRecord:recordDeviceIndicator:error:]
-[CSAudioRecorder _startAudioStreamForAudioInjectionWithAVVCContext:]
-[CSAudioRecorder startAudioStreamWithOption:recordDeviceIndicator:error:]
-[CSAudioRecorder stopAudioStreamWithRecordDeviceIndicator:error:]
-[CSAudioRecorder isSessionCurrentlyActivated]
-[CSAudioRecorder recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
%llu
-[CSAudioRecorder audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:]
-[CSAudioRecorder recordingSampleRateWithStreamHandleId:]
-[CSAudioRecorder isNarrowBandWithStreamHandleId:]
-[CSAudioRecorder prewarmAudioSessionWithStreamHandleId:error:]
iPhone9,1
iPhone9,2
iPhone9,3
iPhone9,4
-[CSAudioRecorder setRecordMode:streamHandleId:error:]
-[CSAudioRecorder activateAudioSessionWithReason:streamHandleId:error:]
-[CSAudioRecorder deactivateAudioSession:error:]
-[CSAudioRecorder deactivateAudioSession:streamHandleId:error:]
+[CSAudioRecorder createSharedAudioSession]
-[CSAudioRecorder enableSmartRoutingConsiderationForStream:enable:]
-[CSAudioRecorder setDuckMixWithOthersForStream:duckOthers:duckToLevelInDB:mixWithOthers:]
+[CSAudioRecorder resetDuckSettings]
-[CSAudioRecorder enableMiniDucking:]
-[CSAudioRecorder configureAlertBehavior:audioStreamHandleId:]
isBluetoothConnected
-[CSAudioRecorder voiceTriggerInfoWithRecordDeviceIndicator:]
-[CSAudioRecorder isDuckingSupportedOnCurrentRouteWithStreamHandleID:error:]
is not
-[CSAudioRecorder _updateLanguageCodeForRemoteVTEIResult:]
useRemoteBuiltInMic
-[CSAudioRecorder _processAudioBuffer:audioStreamHandleId:arrivalTimestampToAudioRecorder:]
-[CSAudioRecorder _compensateChannelDataIfNeeded:receivedNumChannels:]
-[CSAudioRecorder _trackRemoteAccessoryStreamIdIfNeeded:]
-[CSAudioRecorder playRecordStartingAlertAndResetEndpointerFromStream:]
-[CSAudioRecorder playAlertSoundForType:recordDevideIndicator:]
-[CSAudioRecorder voiceControllerDidStartRecording:forStream:successfully:error:]
-[CSAudioRecorder voiceControllerAudioCallback:forStream:buffer:]
-[CSAudioRecorder voiceControllerDidStopRecording:forStream:forReason:]
-[CSAudioRecorder voiceControllerStreamInvalidated:forStream:]
-[CSAudioRecorder voiceControllerRecordHardwareConfigurationDidChange:toConfiguration:]
-[CSAudioRecorder voiceControllerDidFinishAlertPlayback:ofType:error:]
-[CSAudioRecorder voiceControllerEncoderErrorDidOccur:error:]
-[CSAudioRecorder voiceControllerBeginRecordInterruption:]
-[CSAudioRecorder voiceControllerBeginRecordInterruption:withContext:]
-[CSAudioRecorder voiceControllerEndRecordInterruption:]
-[CSAudioRecorder voiceControllerWillSetAudioSessionActive:willActivate:]
-[CSAudioRecorder voiceControllerDidSetAudioSessionActive:isActivated:]
-[CSAudioRecorder voiceControllerMediaServicesWereLost:]
-[CSAudioRecorder voiceControllerMediaServicesWereReset:]
-[CSAudioRecorder _hasLocalPendingTwoShot]_block_invoke
-[CSAudioRecorder _getRecordSettingsWithRequest:]
-[CSAudioRecorder _fetchRemoteRecordClientWithDeviceId:streamHandleId:]
CSCommandControlBehaviorMonitor
-[CSCommandControlBehaviorMonitor notifyWillStartStreamWithContext:option:]_block_invoke
-[CSCommandControlBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:]_block_invoke
-[CSCommandControlBehaviorMonitor notifyWillStopStream:]_block_invoke
-[CSCommandControlBehaviorMonitor notifyDidStopStream:]_block_invoke
[profileId: %@, language: %@, product: %@, version: %@, homeId: %@, name: %@]
{isVT=%d, requestHistoricalAudio=%d, reqStartAudioSampleId=%lu, reqStartMachAbsTime=%llu}
-[NSData(XPCObject) _cs_initWithXPCObject:]
+[CSEndpointerFactory endpointerProxy]
CSOpportuneSpeakEventMonitor
-[CSOpportuneSpeakEventMonitor isStreaming]
+[NviSignalData headerString]
-[NviSignalData stringForLogging]
{%@:ts=%lld}
%s input dictionary is nil
%s Tagging as handheld as user interacted in last %f secs
%s Tagging as farfield as last user interaction %f secs back
%s Tagging as FarField as user dismissed
%s Dealloc CSAudioInjectionEngine : %@
%s Looking up audio diff:%llu sampleCount:%llu %@
%s First Pass Score : %f, First Pass Best Start : %llu, First Pass Best End : %llu
%s Unable to write to o/p stream ! 
%s Got event! %lu
%s Got unhandled evt code %lu 
%s STDynamicActivityAttributionPublisher reporting Dictation with bundleID: %{public}@
%s STDynamicActivityAttributionPublisher reporting Siri
%s STDynamicActivityAttributionPublisher reporting Siri and Dictation
%s Start monitoring: wake Gesture
%s %{public}@ deallocated
%s audioProvider not exist
%s Start Monitoring : AudioSession notification from corespeechd
%s Stop Monitoring : AudioSession notification from corespeechd
%s reset sessionInfoProvider since xpcClient disconnected
%s CoreSpeech Daemon reset notification
%s %@ task delivered.
%s %@ completed with response %@ and error %@.
%s Get initial state from MediaRemote: media is on playing state %{public}ld.
%s Start monitoring MediaRemote: media playback
%s Stop monitoring MediaRemote: media playback
%s MediaRemote reported the now playing app playback state changed to %s (state %d)
%s Celestial is not available on this platform.
%s notification = %{public}@
%s MobileTimer is not available on this platform.
%s Dealloc audioStreamHolding : %{public}@
%s ERR: topScoringUser is nil from %{public}@
%s ERR: invalid arguments passed %{public}@ %{public}@
%s ERR: Incorrect category %{public}d passed
%s ERR: Failed to get remote proxy object for AttSiriXPC: %@
%s _remoteSvcProxy is nil!
%s ctx=%@
%s Client Interruption Handler: %{public}@, client PID: %{public}d)
%s Client Invalidation Handler: %{public}@, client PID: %{public}d exited
%s triggerInfo: %@
%s Clearing pending homekit accessory voice trigger %{private}@
%s Handling Pending Remora VoiceTrigger Event
%s Time since last pending remora voice trigger %f. Ignoring.
%s Clearing pending built-in voice trigger %{private}@
%s Handling Pending BuiltInVoiceTrigger Event
%s Time since last pending builtin voice trigger %f. Ignoring.
%s client: %lu, deviceId: %{private}@
%s Setting mixable to yes as we are in an active call
%s Dilation factor requested for device default!
%s V Spread requested for device default!
%s V Offset requested for device default!
%s H Offset requested for device default!
%s Music steepness requested for device default!
%s Minimum TTS volume for ASV disabled case requested for device default!
%s Cannot access to %{public}@ %{public}@ using default value=%{public}@
%s ERR: Failed to establish XPC connection!
%s Requesting RTS %{public}@ bypass for %{public}lf seconds
%s voiceTriggerXPC client not exist
%s reset xpcClient since it disconnected
%s Start monitoring : VoiceTrigger Asset Download
%s Stop monitoring : VoiceTrigger Asset Download
%s New VoiceTrigger is now installed
%s Resetting audio preprocessor : %{public}f, containsVoiceTrigger:%{public}d
%s Flushing audio preprocessor
%s Zero Filter Metrics: %{public}@
%s Beep Canceller Metrics : %{public}@
%s Another non eligible app is recording
%s CSBenchmarkService Interrupted
%s CSBenchmarkService Invalidated
%s XPC connection not exist?
%s %@: %@
%s Result: %@
%s Couldn't find keychain value %@ for account %@ %{public}d
%s SmartSiriVolume cannot be resumed since we should not monitor audio
%s ContinousAudioFingerprint cannot be resumed since we should not monitor audio
%s Trying to access BTLocalDevice
%s Accessing BTLocalDevice
%s BTLocalDevice %{public}p
%s Getting connected devices from local device %p...
%s Got %tu connected devices from local device %p.
%s Failed getting connected devices from local device %p (result = %d).
%s Local device is NULL.
%s Failed getting address from BTDevice %p (result = %d).
%s Failed to get sharing enable flag : %d
%s Failed getting sharing device addresses %d
%s Failed converting address from BTDeviceAddress (result = %d).
%s Device is temporary paired and not in contacts
%s Detaching bluetooth session : %{public}p
%s Already Attaching Bluetooth Session
%s Start attaching bluetooth session
%s session = %{public}p, result = %{public}d
%s session = %p
%s detached session is different from currently attached session, ignore
%s terminated session is different from currently attached session, ignore
%s Bluetooth Session is NULL
%s Failed to get default local device from session %{public}p, (result = %{public}d)
%s Failed to add local device callback from session %{public}p, (result = %{public}d
%s Failed to fetch local deviceId, abort
%s Sending HID report (length = %{public}lu) to host with deviceId info (%{public}@)
%s Start monitoring: siri assertion enable/disable
%s Stop monitoring: siri assertion enable/disable
%s did receive enable assertion
%s did receive disable assertion
%s accessoryId %{private}@
%s Start monitoring : SpeakerRecognition Asset Download
%s Stop monitoring : SpeakerRecognition Assets Download
%s New SpeakerRecognition Assets is now installed
%s ERR: Delegate received for invalid Trial assetType:%lu
%s ::: Error reading file %@, err: %d
%s CSAudioFileReader requires prepare recording settings to feed audio
%s CSAudioFileReader only support LinearPCM to feed
%s Setting ExtAudioFileSetProperty failed : %d
%s Starting audio file feed timer, bufferDuration = %f sampleRate = %f, bytesPerFrame = %d, channelsPerFrame = %d
%s ::: Error reading data from audio file : %d
%s Reach to EOF, chunkSize = %d
%s Stopping audio file feed timer
%s Start monitoring : AdBlocker Asset Download
%s Stop monitoring : AdBlocker Asset Download
%s New AdBlockerAsset is now installed
%s Received active route change notification
%s Start monitoring : AudioRouteChangeMonitor
%s Stop monitoring : AudioRouteChangeMonitor
%s Notifying Hearst Routed State : %{public}d
%s Notifying Siri Input Source Out Of Band State : %{public}d
%s Cannot create SampleRateConverter using AudioConverterNew : %{public}d
%s Cannot set Quality property to audioConverter
%s Cannot set Complexity property to audioConverter
%s Override result as 'mpty'
%s Audio resampling done : %lu
%s AudioConverter is sad: 0x%{public}xd
%s Cannot start monitoring language detector asset, since we already registered
%s LanguageDetector supported locale is nil : %{public}@
%s %p (sessionUUID = %@)
%s %p (sessionUUID = %@
%s %p
%s %p (startSpeechId = %@)
%s %p (selectedResultCandidateId = %@)
%s %p (allows = %d, resultCandidateId = %@)
%s route = %@, deviceIdentifier = %@, deviceUID = %@
%s %p (recordedAudioFileURL = %@)
%s %p (audioRecordContext = %@)
%s %p (audioRecordDeviceInfo = %@)
%s %p (voiceTriggerInfo = %@)
%s %p (recordingInfo = %@)
%s %p (recordingSettings = %@)
%s %p audioActivationInfo = %@
%s %p effectiveDate = %@ (%f)
%s %p (error = %@)
%s %p (relinquishmentContext = %@)
%s %p startRecordingAudioSessionAssertion = %@
%s %p audioActivationInfo = %@, time = %f
%s %p twoShotDetectionAudioSessionAssertion = %@
%s %p hostTime = %llu
%s %p context = %@
%s %p error = %@
%s %p (_recordedAudioFileURL = %@)
%s %p (_audioFileWriter = %@)
%s recordingSettings was nil
%s No alert behavior in recordingSettings
%s No alert style specified for record starting
%s Myriad won & voice trigger present, donating recorded audio to CoreSpeech.
%s %p No recorded audio.
%s %p Access to payload audio at %@ is %@, setting payload recording flag for CoreSpeech.
%s %p Donating recorded audio at %@...
%s %p Failed to donate recorded audio at %@ for  VoiceID training (error = %@).
%s %p Donated recorded audio at %@ for  Voice VoiceID training.
%s %p Removing recorded audio at %@...
%s %p Removed recorded audio at %@.
%s %p Failed to remove recorded audio at %@ (error = %@).
%s Creating SmartSiriVolume connection
%s SmartSiriVolume Remote Object Proxy is nil
%s SmartSiriVolume Failed to get estimate with %{public}@
%s SmartSiriVolume didChangeForReason: %{public}d
%s ERR: SmartSiriVolume Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: SmartSiriVolume ssvConnection is nil
%s Dealloc CSAudioInjectionProvider : %@
%s Stopping Audio Injection Provider : %@
%s Calling start audio stream : %@ %@
%s Calling stop audio stream : %@
%s xpc object string return nil
%s xpc object should be XPC_TYPE_STRING
%s Start Listening request with deviceId : %{public}@
%s CSOpportuneSpeakListener received didStart : %{public}d, %{public}@
%s remoteVADDuration = %{public}d, spgDuration = %{public}d, _remoteVADSPGRatio = %{public}d
%s AudioStreamRequest has failed : %{public}@
%s CSOpportuneSpeakListener received didStop : %{public}d, %{public}@
%s Request stop CSOpportuneSpeakListener
%s Audio coming from DoAP should contains RemoteVAD
%s boronScore : %{public}d, reportBoron : %{public}d, slienceScore : %{public}lf
%s cannot handle nil event 
%s ignore unknown types of message: %{public}@
%s cannot handle nil error
%s Listener connection disconnected
%s connection error: %{public}s
%s Required values is nil, bailout
%s _bestStartDetectSample %lu was greater than _bestEarlyDetectSample %lu or _bestEndDetectSample %lu
%s _bestEarlyDetectSample %lu was greater than _bestEndDetectSample %lu
%s _speechVoiceLevel %lu is 0
%s _numberOfTotalFramesETFT %lu is 0
%s Current wireless splitter info = %{public}@
%s Received WiressSplitterStateChange
%s Start monitoring : Wireless Splitter start
%s Cannot start monitoring Wireless Splitter because it was already started
%s Stop monitoring : Wireless Splitter
%s Not supported on this platform
%s disconnect activationXPCClient
%s cannot handle event : event = %{public}p
%s ignore unknown types of message 
%s cannot handle error : error = %{public}p
%s Creating LanguageDetector with config: %{public}@
%s Cannot initialize language detector since model file is not exits
%s Cannot access asset : %{public}@
%s Current LanguageDetector request cancelled
%s Setting interaction ID for current request: %@
%s Failed to initialize StartOfSpeechDetector !
%s Recoreded language array: %@ Language Prior Dictionary: %@
%s Setting NumLatestLanguages to %{public}lu 
%s Json file doesnt exist at: %{public}@
%s Could not read Json file at: %{public}@, err: %{public}@
%s Failed to parse json at: %{public}@, err: %{public}@
%s Error writing out SoS info meta: %{public}@
%s _EARLanguageDetectorLoggingInfo = %{public}@
%s _EARLanguageDetectorLoggingInfo analytics context %{public}@
%s %{public}@ isConfident %{public}d
%s LanguageDetector State: %ld
%s Saving circular buffer from %{public}lu to %{public}lu
%s Siri language is nil, falling back to %@
%s endpointUUID not provided, fallback to legacy query
%s Failed to query language code with endpointId %@, trying legacy query
%s splitterState : %{public}lu, shouldDisableSpeakerVerification : %{public}@
%s This call is not supported on darwinOS device (splitterState)
%s Advert data: %{public}@
%s advert data write failed
%s %{public}.2f ms after firstBufferStart
%s Invalid timestamp (currentMachTime: %{public}llu timestamp: %{public}llu)
%s Invalid timestamp (currentMachTime: %{public}llu arrivalTimestamp: %{public}llu)
%s numOfAudioPackets: %{public}lu, numOfValidTrailingPackets: %{public}lu, numOfValidTrailingSpeechPackets: %{public}lu, 
trailingPktLatencies: %{public}@ 
trailingPktSpeechLatencies: %{public}@
%s Fetching CommandControl Listening State: %d
%s Failed to fetch recording client info, error : %{public}@
%s Start monitoring : AVVC recording client count
%s Stop monitoring : AVVC recording client count
%s Reset AVVC recording client count due to audio server crash
%s update AVVC recording client # : %{public}lu
%s Error getting file path from provided file handle; will create our own path and handle
%s Failure disposing audio file %{public}d
%s Error removing item at URL %{public}@
%s Configuring with asbd %.4s
%s Creating audio file at URL %@
%s Failed creating audio file at url %{public}@ %{public}d
%s Error setting input format %{public}d
%s No audio file to append data
%s Failed writing audio file %{public}d
%s No file url on flush
%s Failed opening fd for flushed audio file %{public}s
%s inASBD->mChannelsPerFrame = %lu
%s Error getting format info for type %{public}.4s %{public}.4s
%s CoreSpeechXPCConnection Invalidated
%s making connection to corespeechd with (%{public}d)
%s Asking VoiceTrigger locale to corespeechd
%s Current VoiceTrigger Locale = %{public}@
%s Cannot get Current VoiceTrigger Locale, falling back to en-US : %{public}@
%s Asking current VoiceTrigger aset for %{public}d.%{public}d
%s Asking keyword language given Jarvis language list %{public}@, jarvis-selected language: %{public}@
%s CSCoreSpeechServices Invalidated
%s Request updated SAT audio succeed.
%s Request updated SAT audio failed.
%s VoiceTriggerDuringCall enabled = %{public}@
%s VoiceTrigger during a call is already %{public}@, received duplicated notification!
%s speechController = %{public}p
%s xpcListener = %{public}p
%s context = %{public}@
%s Failed to create audio recorder : %{public}@
%s For Context : %{public}@, audioStreamId(%llu) has allocated
%s Failed to get audio stream handle ID : %{publid}@
%s has match with audio stream handle id : %llu
%s does not match with audio stream handle id(%llu), creating new audio provider
%s No audioRecorder available, return nil for audioProvider
%s have matched audioProvider with stream handle id : %llu
%s provider's streamId(%tu) is invalid, return nil
%s don't have matched audioProvider with stream handle id : %llu, need to create one later
%s audioProvider[%{public}@] invalidated with streamHandleId : %{public}llu
%s No matched audioProvider found for streamHandleId : %{public}llu
%s Received VoiceTrigger cached asset change notification, let's reinitialize VoiceTrigger
%s Trying to start clear logging files
%s Clear logging file timer is already started, ignore startClearLoggingFilesTimer request.
%s SpeechEndEstimation: trailingSilenceDuration = %{public}f
%s SpeechEndEstimation: TrailingSilenceDuration at endpointer(%{public}f) is longer than threshold(%{public}f), force to make 0
%s SpeechEndEstimation: _lastAudioChunkHostTime = %{public}llu, estimatedSpeechEndHostTime = %{public}llu
%s Start Listening for Command Control
%s Calling didStart of CSCommandControlListener
%s Stopping stopListenWithCompletion
%s Calling didStop of CSCommandControlListener
%s Calling didStopUnexpectly
%s Received xpc disconnection, audioStream is streaming = %{public}d
%s init-_currentLanguageCode: %{public}@
%s Asset Manager Policy has been %{public}@
%s Asset Manager Policy has been enabled, start fetching meta data now
%s %@
%s Need to fetch remote meta now, since we have new asset need to be downloaded
%s Does not need to fetch remote meta now
%s Cannot fetch VoiceTrigger asset meta data
%s Undefined assetType : %{public}u
%s _currentLanguageCode changed: %{public}@
%s Trying to start download meta data
%s Periodical downloading is already scheduled, ignore request.
%s No periodical downloading is scheduled, ignore request.
%s Endpointer Failed to get epVersion
%s elapsed time = %{public}lf
%s Endpointer Failed to get elapsedTimeWithNoSpeech
%s Endpointer Failed to get endPointAnalyzerType
%s Creating RemoteServiceProxy
%s ERR: Endpointer Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: Endpointer endpointerConnection is nil
%s Endpointer didDetectHardEndpointAtTime %f withMetrics %@
%s Not supported on this platform.
%s ERR: Mach Service Name is nil - Bailing out
%s ERR: Proxy Object is nil - Bailing out
%s ERR: Exported interface is nil - Bailing out
%s Set up queue for %@
%s Started listening for %{public}@
%s Service %{public}@ dealloced - %{public}@
%s Got connection on service %{public}@
%s [Service:%{public}@] Invalid listener - %{public}@
%s Rejecting connection to %{public}@ due to entitlement
%s [Service:%{public}@] Listener Interruption Handler: %{public}@, client PID: %{public}d)
%s [Service:%{public}@] Listener Invalidation Handler: %{public}@, client PID: %{public}d exited
%s machServiceName(%@) with clientConnCount:%lu 
%s Sending message to remote object: %@
%s RemoteObjectProxy is nil for client PID (%{public}d)
%s [Service:%{public}@]
%s Using audioInjectionProvider as recorder
%s Record Context: %{public}@
%s Calling startController
%s Ignore request since it is already started
%s settings : %{public}@
%s Session Provider does not exist
%s Received special error code that corespeech needs to setContext and activate audio session again
%s CSSpeechController is already streaming audio.., we don't need to create another audio stream here
%s Prepare audio stream succeeded ? %{public}@, error - %{public}@
%s audioStreamWithRequest succeeded ? %{public}@, error - %{public}@
%s Failed to get audioStream : %{public}@
%s AudioStreamProvider is not existing?
%s Skipping audio converter setup
%s Done prepareRecord with result: %{public}@.
%s xpcClient not existing
%s received lastVoiceTriggerInfo %{public}@, lastRTSTriggerInfo %{public}@
%s ConfigSupportsDucking: %{public}d
%s Stream provider does not exist
%s Failed due to error %@.
%s Activating Audio Session Now Sync.
%s Activating Audio Session Now Async.
%s Device supports ducking on speaker output we should check config.
%s StreamProvider is already recording
%s duckingDelayedTime = %{public}f, timeIntervalSinceLastTriggerEnd = %{public}lf
%s Failed activate audio session with %{public}f seconds delay from prepareRecordWithSettings due to error %{public}@.
%s Finished activate audio session with %{public}f seconds delay from prepareRecordWithSettings.
%s Cancelled activate audio session with %{public}f seconds delay from prepareRecordWithSettings.
%s Scheduled activateAudioSession with %{public}f seconds delay in prepareRecordWithSettings.
%s Delayed active audio session: Consumed token %{public}@ with %{public}f seconds delay for reason %{public}@.
%s Delayed active audio session: Activating audio session for reason %{public}@.
%s Delayed active audio session: Failed to activate audio session for reason %{public}@ due to error %@.
%s Delayed active audio session: Successfully activate audio session for reason %{public}@.
%s Delayed active audio session: Ignored activating audio session for reason %{public}@ because the validator rejected.
%s Delayed active audio session: Ignored activate audio session for reason %{public}@ because the scheduled token %{public}@ does not match the current token %{public}@.
%s Delayed active audio session: Scheduled new token %{public}@ with %{public}f seconds delay for reason %{public}@.
%s Delayed audio session activate: Cancelled token %{public}@ for reason %{public}@.
%s Delayed audio session activate: Consumed token %{public}@ in advance for reason %{public}@.
%s Delayed audio session activate: Activating audio session for reason %{public}@.
%s Delayed audio session activate: Failed to activate audio session for reason %{public}@ due to error %@.
%s Delayed audio session activate: Successfully activate audio session for reason %{public}@.
%s Creating fake session activation notification for session activation now
%s Scheduling Lazy Audio Session activation with %f timeout
%s Lazy session activate success
%s Lazy Audio Session is not configured.
%s Creating fake session activation notification for session activation failure : %{public}@
%s Activating audio session now
%s AudioSession activated successfully ? %{public}@
%s AudioSession Provider not available
%s Falling back to button record type for context whose record type previously is set to unspecified for accessory %{private}@.
%s recordContext : %{public}@
%s Will skip setting current record context because we were in active call and context was post or auto
%s Resetting CoreSpeech frameworks
%s Ask start recording with requestMHUUID: %@
%s Disable audio converter since local asr is going to be used
%s Enable audio converter
%s Disable prewarming local asr at startRecording
%s TriggerlessDictation: Ask start recording from: %{public}tu
%s Ask start recording from: %{public}tu
%s Voice trigger to use the current voice triggered channel: %{public}tu
%s Auto prompt to use the last voice triggered channel: %{public}tu
%s SpeechController to receive data from default channel
%s SpeechController to receive data from channel %{public}tu
%s Trying to prepare uncompressed audio logging
%s Local ASR is used, uncompressed audio logging is disabled
%s Ask delay audio session active by %{public}f seconds
%s Postpone calling audio session activation til we receive didStart
%s Sending client speechControllerDidStartRecording successfully? %{pubic}@, audioDeviceInfo = %{public}@
%s Sending client speechControllerDidStartRecording successfully? %{pubic}@
%s Report unexpectedly long launch latency %{publlic}.3f
%s audioStream not existing
%s _activateAudoiSessionWithDelay has failed. startRecordWithSettings has failed
%s Start recording invoked too late (%{public}.3f seconds), override scheduledCheckTime: %{public}llu to currentTime: %{public}llu
%s Scheduled audible feedback decision after %{public}.3fseconds (vtEndMachTime: %{public}llu currentMachTime: %{public}llu)
%s Two shot audible feedback decision not needed since we already stopped recording
%s Two shot audible feedback decision (%{public}.3fs later than the scheduled time), elapsedTimeWithNoSpeech: %{public}.3f
%s Two shot audible feedback is %{public}@needed. (isMediaPlaying = %{public}d, canPlayPhaticDuringMediaPlayback = %{public}d)
%s Two shot audible feedback should notify? [%{public}@]
%s Two shot audible feedback is prevented by Myriad decision.
%s Two shot audible feedback decision timed out while waiting for Myriad decision
%s Audible feedback not needed since we already stopped recording
%s Audible feedback decision elapsedTimeWithNoSpeech: %{public}.3f
%s Notifying scheduled audible feedback playback...
%s Failed to playback audible feedback, error: %{public}@
%s Asking stopRecording when audio stream is not existing
%s Scheduling StopRecording After HostTime=%{public}llu
%s Options: %{public}@ at: %{public}llu
%s Reporting didDeliverLastPacket at: %{public}llu
%s SpeechEndEstimation: %{public}llu
%s %{public}@
%s Reason : %{public}ld
%s SpeechEndEstimation: Should Estimate SpeechEndHostTime
%s SpeechEndEstimation: Reporting didStop with estimated speech end : %{public}llu, at: %{public}llu, audioDeviceInfo: %{public}@
%s SpeechEndEstimation: Reporting didStop with estimated speech end : %{public}llu, at: %{public}llu
%s Currently playing App : %d
%s name : %@, version : %@
%s _didDeliverLastPacket=%d. Dropping Audio packets of size=%lu
%s chunk.hostTime=%{public}llu, chunkSz=%{public}lu, stopOptions=%{public}@, _numTrailingSamplesAfterSchedulingStop=%{public}lu, maxAllowedSamples=%{public}lu
%s STOPRECORDING: Reached MAX allowed trailing samples AFTER stopRecording was scheduled!
%s STOPRECORDING: chunk.hostTime=%{public}llu >= stopOptions=%{public}@
%s SpeechManager still forwarding audio after didStopForwarding, we shouldn't have this
%s STOPRECORDING: chunk.endHostTime=%{public}llu >= stopOptions=%{public}@
%s AudioProvider is invalidated, teardown connection to audioprovider
%s Ignore session active notification
%s SmartSiriVolume update reason: %lu
%s SpeechController is trying to forward encoded audio after didStopForwarding, we shouldn't have this
%s Setting Alert Sounds From : %{public}@ for AlertType : %{public}d, force : %{public}@
%s Creating Audio Power Meter with record route %{public}@
%s We don't need Audio Power Meter with record route %{public}@
%s Not available
%s Reported 2-shot at: %{public}f secs
%s _delegate doesnt respond to speechControllerDidDetectVoiceTriggerTwoShot
%s Requesting QuickStop operation upon detecting keyword
%s _isHybridUODEnabled: %d, _endpointId: %@, _rcHandlingClient: %@, languageCode: %@
%s Unexpected audioFormat for ATV : %{public}u
%s Create audioDecoder for audioFormat %{public}u
%s Creating xpcClient
%s Unable to setup audioProvider
%s Establishing xpcClient connection...
%s Unable to prepareAudioProvider in _xpcClient, teardown XPC connection again
%s endpointerModelVersion called when HEP is not supported
%s return hybrid model version for sirix request
%s Queried endpointerModelVersion: %{public}@
%s Cancelling current language detector request !
%s Received Myriad started
%s Received Myriad finished with decision: %tu
%s Detected sound is%{public}@ playing: media(%d) alarm(%d) timer(%d)
%s XPCConnection disconnected
%s reset audioProvider since xpcClient disconnected
%s Playback is active: %{public}d on accessory: %{private}@
%s Alarm is playing: %{public}d on accessory: %{private}@
%s Timer is playing: %{public}d on accessory: %{private}@
%s Now Playing State has changed %d
%s Alarm firing
%s Alarm dismissed
%s Timer firing
%s Timer dismissed
%s SSR Remote Object Proxy is nil
%s Successfully created SSR connection
%s ERR: SSR Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: SSR ssrConnection is nil
%s scoreCard is nil!
%s CS doesn't have ndblobbuilder!
%s latestMajorVersion = %d, LatestMinorVersion = %d
%s corespeech.json doesn't contains rtblobs
%s blob file name is not exists
%s blob file is not exists at %{public}@
%s Reading blob from : %{public}@
%s Blob is nil : %{public}@
%s Locale map for %{public}@ is not available on asset
%s request = %@, options = %@
%s prepared
%s Player item %@ status is failed with error %@.
%s Created player item %@ from URL %@.
%s Created player item %@ from WAVE asset with %tu bytes of data .
%s Unable to create player item.
%s Created player %@.
%s Unable to replace current item of player %@. Expected current item is %@, actual current item is %@.
%s Player item %@ status is ready to play.
%s Timed out when waiting for player item %@ status to change to ready to play.
%s Successfully changed player item %@ status to ready to play.
%s Failed to change player item %@ status to ready to play due to error %@.
%s Attempted to start %@ when it is already active.
%s Failed to prepare %@ due to error %@.
%s Failed to start %@ because it is already inactive after preparation.
%s Failed to start %@ because it is already inactive after player seek to begin.
%s Failed to start %@ because player failed to seek to begin.
%s started
%s error = %@
%s Reset player item %@.
%@ Interrupted
%@ Invalidated
Dealloc-ing
personalizedLMPath=%@ fidesPersonalizedLMPath=%@
Client is 24-hour job
Client is DictationPersonalizationFidesPlugin
Client is PersonalizedLmFidesPlugin
Received an error while accessing %@ service: %@
Invalidating
%s Start monitoring : SelfTrigger switch, SelfTrigger is %{public}@
%s Stop monitoring : SelfTrigger switch
%s Set SelfTrigger Enable = %{public}@
%s CSVoiceTriggerAsset found: %{public}@
%s Asset Query failed : %{public}@
%s cached asset:%{public}@, new asset:%{public}@
%s New asset is same as cached asset, ignore notification
%s New asset is different from cached one. Updating cached asset
%s new VoiceTrigger asset downloaded
%s Language Code Changed : %{public}@
%s Start Recording Host Time = %{public}llu
%s %p created
%s %p dealloced
%s sp=%p
%s %@ not supported yet.
%s Failed to create: %@
%s SigPrvdrs: %@
%s Starting datasrc: %@
%s Failed to start %@. Err=%@
%s >>> All DataSources Started within timeout of 2secs: timeTaken=%f ms
%s WARN: DataSources Start timedout. timeout=2secs
%s Starting signal provider: %@
%s Failed to start %@: Err=%@
%s >>> All SignalProviders didStart within timeout of 2secs: timeTaken=%f ms
%s WARN: SignalProviders timedout didStart. timeout=2secs
%s >>> All DataSources Stopped within timeout of 2secs: timeTaken=%f ms
%s WARN: DataSources timedout stopping. timeout=2secs
%s Failed to stop %@: Err=%@
%s >>> All SignalProviders didStop within timeout of 2secs: timeTaken=%f ms
%s WARN: SignalProviders timedout didStop. timeout=2secs
%s WARN: Cannot find SignalProvider for %@. Skipping
%s Initializing new xpcConnection
%s Sending XPCClientType : %{public}d
%s Prepare Audio Provider with Context : %{public}@
%s Failed to get reply result correctly
%s Received alertStartTime = %{public}llu
%s Received peakPower = %{public}f
%s Received averagePower = %{public}f
%s Sending audioMetric request
%s Failed to get audioMetric reply
%s audioMetric : %{public}@
%s Received invalid audioMetric
%s Error creating message
%s audioStreamWithRequest for stream %{public}@
%s xpcConnection not exist
%s Invalid message: stream is nil or request is nil
%s PrepareAudioStream %{public}@
%s Sending AcousticSLResult request
%s Failed to get AcousticSLResult reply
%s Received AcousticSLResult %{public}@
%s Failed to parse AcousticSLResult from raw data
%s Message not valid
%s Sending VoiceTriggerInfo request
%s Failed to get VoiceTriggerInfo request
%s Received VoiceTriggerInfo %{public}@
%s Failed to parse VoiceTriggerInfo from raw data
%s Received rtsTriggerInfo %{public}@
%s Failed to parse rtsTriggerInfo from raw data
%s Not implemented
%s NO reply!!!
%s No message!!
%s No reply for hostTimeFromSampleCount request with sampleCount %{public}llu
%s xpcConnection not existing
%s No message for hostTimeFromSampleCount request with sampleCount %{public}llu
%s No reply for sampleCountFromHostTime request with hostTime %{public}llu
%s No message for sampleCountFromHostTime request with hostTime %{public}llu
%s Cannot handle nil message
%s Unexpected message type : %{public}lld
%s AlertProvidingDelegate messageType : %{public}lld
%s Unexpected type : %{public}lld
%s SessionProvidingDelegate messageType : %{public}lld
%s context : %{public}@
%s invalid context
%s SessionInfoProvidingDelegate messageType : %{public}lld
%s Received notificationInfo %{public}@
%s Failed to parse notificationInfo from raw data
%s ::: incrementing false wakeup to %{public}llu
%s PowerLog : HeySiriFalseTrigger numFalseWakeUp:%{public}d, secondsSinceLastReport:%{public}lf, phrase:%{public}@
%s ::: accumulated false wakeup count is %{public}llu so far, not reporting yet because it has been only %{public}.2f seconds since last report with current phrases %{public}@
%s Sending event with non determenistic triggerLengthSampleCount %llu, triggerLengthSampleCountDetermenisticFromFirstPass %llu, and delta of %lld samples
%s Smart Siri Volume not supported on this platform - Bailing out
%s ERR: Failed to initialize Smart Siri Volume with sampling %{public}f and %{public}@
%s AlarmState changed to %{public}d
%s TimerState changed to %{public}d
%s MusicVolume changed to %{public}f
%s AlarmVolume changed to %{public}f
%s Automatic Volume State changed to %{public}d
%s Audio file already configured, closing first
%s Creating audio file at URL %{public}@
%s Closing file at URL %{public}@, audio size: %{public}u
%s Couldn't create CoreSpeech log directory at path %{public}@ %{public}@
%s Received notification %@
%s Failed to register for notification %@ (status=%d)
%s SmartSiriVolumeContextAware TTS volume post lower and upper bounds is: %f
%s TTS volume offset post lower and upper bounds is: %{public}f
%s _csAssetsDictionary = %{public}@
%s CSAssetController cannot query for nil language
%s ::: found %{public}lu installed assets for assetType=%{public}lu, matching query: %{public}@
%s Error running asset-query for assetType:%{public}lu, query: %{public}@, error: %{public}lu
%s ::: found %{public}lu assets for assetType=%{public}lu, matching query: %{public}@
%s Asset state : %{public}ld
%s ::: assetType: %{public}lu
%s ::: %{public}s; query: %{public}@
%s Found %{public}lu assets
%s Error running asset query: error %{public}lu, or result is empty
%s ::: Request Fetching RemoteMetaData : assetType : %{public}d
%s Fetching remote meta data failed, scheduled retry after %{public}f seconds
%s ::: Request fetching remote asset
%s ::: found %{public}lu assets for assetType %{public}lu
%s Failed to finish query for assetType %{public}lu with error %{public}lu
%s Meta data downloaded successfully for assetType %{public}lu
%s Failed to download meta data for assetType %{public}lu with error %{public}lu
%s ::: Fetching remote asset
%s ::: Purging installed asset : %{public}@
%s ::: Request downloading remote asset for assetType %{public}lu
%s ::: Start downloading asset
%s ::: download progress: %{public}3.0f%%
%s ::: Error downloading from %{public}@ with error %{public}@
%s ::: download completed successfully from %{public}@.
%s Attempting to download asset %{public}@, asset state : %{public}ld
%s ERR: Unknown AssetType: %{public}lu
%s Overriding Myriad state as request was made during a ringtone
%s Invoked Siri client
%s Cannot invoke Siri client : %{public}@
%s Cannot notify wake keyword spoken event : %{public}@
%s AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm success
%s AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm failed : %{public}@
%s Invoked Siri client for voice trigger from Jarvis
%s Cannot invoke Siri client for voice trigger from Jarvis : %{public}@
%s SiriActivationConnection deactivated due to %ld
%s Invoked Siri client for voice trigger from Darwin
%s Cannot invoke Siri client for voice trigger from Darwin : %{public}@
%s SmartSiriVolume cannot be resumed since Siri is speaking
%s Dealloc CSAudioInjectionEngineRemoraEngine : %@
%s Cannot create de-interleaver using AudioConverterNew: %{public}d
%s Created de-interleaver
%s Stopping AudioInjectionEngine : %@
%s Failed to open audio file %@, error : %d
%s Streaming from %@
%s Cannot speak nil Audio URL
%s Cannot speak since audio file does not exists : %@
%s Calling stopAudioStream
%s Failed to deinterleave the data: %{public}d
%s Compensating %{public}u channel(s), heartbeat = %{public}lld
%s ::: Error creating output file %{public}@, err: %{public}d
%s ::: Error writing to output wave file. : %{public}ld
%s VoiceTrigger cannot be turned on since SpeechDetectionVAD is not present
%s VoiceTrigger cannot be turned on since there is other app recording that is not eligible and we are not in a connected or outgoing call
%s VoiceTrigger cannot be turned on since voiceTriggerInCoreSpeech is NO
%s VoiceTrigger cannot be turned on since VoiceTrigger is disabled
%s VoiceTrigger cannot be turned on since Siri is disabled
%s VoiceTrigger cannot be turned on since SpringBoard is not started yet
%s VoiceTrigger cannot be turned on since device is not unlocked after restart
%s VoiceTrigger cannot be turned on since device is on battery
%s VoiceTrigger cannot be turned on since Siri is restricted on lock screen
%s VoiceTrigger cannot be turned on since Software Update Checking is running
%s Successfully ? %{public}@
%s Notify release of audio session
%s Start monitoring : speech endpoint asset meta update
%s Stop monitoring : speech endpoint asset meta update
%s New speech endpoint asset is available
%s CSSpeechUaapXPCClient received an empty connection event
%s CSSpeechUaapXPCClient got an event it can't handle
%s CSSpeechUaapXPCClient listener disconnected
%s CSSpeechUaapXPCConnection error: %s
%s Invalidating CSSpeechUaapXPCClient
%s CSVoiceTriggerAsset (%{public}@) found: %{public}@
%s Cannot get a VoiceTrigger mobile asset : %{public}@
%s Trial assets not available, fallback to MA assets
%s First unlock notification received : %{public}d
%s Ignore Trial asset update for type: %lu
%s Turn on AP mode since device is hands free state with HS phone-call capable route connected
%s CommandControl Streaming = %{public}d
%s Turn on AP mode since command control is streaming
%s VAD is not present or Hearst routed without phone call
%s VoiceTrigger AOP mode cannot be turned on since builtIn speaker is active
%s AudioRecordContext = %{public}@, recordState = RECORDING
%s CarPlay is connected, we will still run AOP mode
%s hypotheticalRoute = %{public}@
%s Audio route changing to HFP is expected
%s VoiceTrigger AOP mode cannot be turned on since Siri client is recording
%s AOP Listening is disabled
%s Turn on AP mode since siri is in attending state
%s Speech Detection VAD is not available, we will still running in AOP mode
%s Will notify Siri Client record state change to STOPPED in %{public}f seconds, eventUUID = %{public}@
%s Notifying Siri Client record state change to STOPPED, eventUUID = %{public}@
%s There is no pending event to timeout : pendingRecordingStopUUID = %{public}@, timeoutTargetUUID = %{public}@
%s %p speechRecordingMode = %zd, clientConfiguration = %@
%s %p speechRequestOptions = %@, currentActivationInfo = %@
%s activeMediaPlaybackVolume = %f
%s clientConfiguration = %@
%s announcement platform is hearing aids or built in speaker, using CSAudioRecordTypeHomePress
%s recordRoute = %@, playbackRoute = %@
%s Requesting historical buffer of duration %lf seconds
%s recordRoute = %@, playbackRoute = %@, attemptsToUsePastDataBufferFrames = %d
%s alertBehavior = %@
%s AppleTV (isVoiceOverTouchEnabledInAccessibility = %d)
%s HomePod
%s BT Voice trigger during incoming/active phone call
%s Built-in Voice
%s Dictation (deviceRingerSwitchState = %@)
%s Triggerless
%s CarPlay Button Press (recordRoute = %@)
%s Bluetooth Voice Trigger
%s Bluetooth Direct Trigger
%s Car DoNotDisturb
%s VoiceOver Enabled (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s Accessibility Vibration Disabled (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s Overriding default behavior, playing beep because of custom sound ID
%s Playback Route is Hands-Free (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s No Vibration Support
%s Others (activationMode = %.4s, speechEvent = %ld (%@), recordRoute = %@)
%s Others (deviceRingerSwitchState = %ld (%@))
%s alertStyle = %ld
%s targetDate = %@ (%f)
%s timeInterval = %f
%s voiceTriggerEndHostTime = %llu
%s buttonDownHostTime = %llu
%s activationHostTime = %llu
%s activationSystemUptime = %f
%s date = %@ (%f)
%s Overriding default behavior to play beep because of custom sound ID
%s Voice Feedback -> PresentationModeVoice
%s Voice Feedback -> PresentationModeSilent
%s Voice Feedback -> None
%s Voice Feedback -> Control with Ring Switch (deviceRingerSwitchState = %ld (%@))
%s Voice Feedback -> Always On
%s Voice Feedback -> Hands-Free Only
%s Voice Feedback -> Unknown
%s audioSessionActiveDelay = %@ (Triggerless Listening)
%s audioSessionActiveDelay = %@ (Audio Session Coordination)
%s audioSessionActiveDelay = %@ (User Perception)
%s audioSessionActiveDelay = %@ (Hearst Voice)
%s audioSessionActiveDelay = %@ (Built In Voice)
%s audioSessionActiveDelay = %@ (Others)
%s audioSessionActiveDelay = %@
%s mediaPlaybackVolumeThreshold = %@
%s audioSessionActiveDelay = %@ (Above Media Playback Volume Threshold)
%s audioSessionActiveDelay = %@ (Default)
%s %{private}@
%s WARN: Invalid sigType: %lu
%s Unknown DataSrc Type: %{public}lu
%s Unknown DataSrcTypeStr(%{public}@)
%s Failed to create dir at: %{public}@
%s Could not find <%{public}@> in Keypath=%{public}@
%s Creating audio player...
%s Failed to create audio player due to error %@.
%s Created audio player %@ with audio session %@.
%s Reused audio player %@ with audio session %@.
%s Audio player %@ is already prepared to play.
%s Preparing audio player %@ to play...
%s Failed to prepare audio player %@ to play.
%s Prepared audio player %@ to play.
%s request = %@
%s Ignored because the session is already active.
%s Ignored because the audio player is already playing.
%s Asking audio player %@ to play...
%s Failed to play audio player %@.
%s Started playing audio player %@.
%s request = %@, immediately = %d
%s Stopping audio player...
%s Ignored because there's no audio player to stop.
%s _request = %@
%s Ignored because there's no audio player to pause.
%s _request = %@, shouldResume = %d
%s Ignored because there's no audio player to resume playing.
%s request = %@, error = %@
%s Ignored because there's no audio player to destroy.
%s request = %@, player = %@, success = %d
%s request = %@, player = %@, error = %@
%s ContinousAudioFingerprint cannot be turned on since Siri is disabled
%s ::: %{public}s enable: %{public}d reason: %{public}@ timestamp : %{public}lf
%s Ignoring request to enable/disable voice trigger with nil reason.
%s ::: Asserting that VoiceTrigger should be %{public}@ with reason: %{public}@. Existing assertions (%{public}lu): %{public}@; times: %{public}@ vs %{public}f
%s Ignoring request to enable/disable voice trigger - time order violation.
%s ::: Ignore request as phraseSpotter already %{public}@
%s ::: Asserting that PhraseSpotter should be %{public}@, timeout: %{public}f
%s ::: Timeout!! PhraseSpotter should be NOT bypassed
%s ::: Ignore request as raiseToSpeak already %{public}@
%s ::: Asserting that raiseToSpeak should be %{public}@, timeout: %{public}f
%s ::: Timeout!! raiseToSpeak should be NOT bypassed
%s HandleDisconnect
%s Received RC with id: %lu, duration: %f, lrnnScore: %f, lrnnThreshold: %f, taskId: %@, forceAccept: %d
%s Getting mitigation decision for rdId: %lu
%s ERR: RC Processing Remote Object Proxy returned error : %{public}ld (%{public}@)
%s ERR: RCProcessing rcProcConnection is nil
%s ERR: Failed to get TTS Volume
%s Estimated TTS volume : %{public}f
%s SmartSiriVolume not available
%s Notifying SSV Client on Volume change for reason - %{public}d
%s Dropped SSV Client notification for Volume change with reason - %{public}d
%s EarlyDetectSample = %{public}d
%s PHS threshold for %lu doesn't exist, use default
%s %{public}@ doesnt exist
%s Could not read: %{public}@
%s Could not decode contents of: %{public}@: err: %{public}@
%s primaryStream already torn down
%s Updating attSiri state to: %lu
%s Non internal build, Ignoring command %@ from peerId %@ - Bailing out!
%s Received Malformed command %@ from peerId %@ - Bailing out!
%s Command %@ received from peerId %@
%s Unknown Command: (%@) - Ignoring
%s Triggering sync with peer - %@
%s Triggering nearmiss sync with peer - %@
%s Triggering voice profile sync with peer - %@
%s Triggering acoustic data sync with peer - %@
%s Triggering gecko sync with peer - %@
%s CSP2P_RemoteHeySiriCmd: ENABLE HeySiri: Not Implemented Yet: 
%s CSP2P_RemoteHeySiriCmd: DISABLE HeySiri: Not Implemented Yet: 
%s Cannot read contents of directory: %@, err: %@
%s Unable to get %@ for file at %@: %@
%s Could not determine if [%@] is a directory or not. Err=%@
%s Found dir: %@. Skipping compression
%s _compressFilesInDirectory: Malloc failed for file %@ (%lu) - Discarding
%s _compressFilesInDirectory: Compression failed for file %@ (%lu) - Sending Uncompressed
%s _compressFilesInDirectory: File %@ compressed from %ld to %ld 
%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out
%s Transfering NearMiss file %@ withCompression %{public}@ and size %ld in batch %{public}@
%s Transfering grading file %@ withCompression %{public}@ and size %ld in batch %{public}@
%s Grading log file successfully transfered for file %@ in task %@
%s Grading log file failed to transfer for file %@ in task %@
%s %@ is nil - Bailing out
%s Failed in transporting Voice file %@ with reponse: %@, error %@
%s Failed to remove the file %@ with error %@
%s Failed to move the file %@ to %@ with error %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: received malformed command - %@ %@ %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: unknown IDS peer with passed Identifier %@, %@ %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: received malformed command - %@
%s CSP2P_VoiceProfileParallelRecordingTransferCmd: Creating directory failed with error %@
%s Ignoring sync of existing file %@ from %@
%s Syncing parallel recorded audio file - %@ from %@
%s Uncompressed file %@ sent by peer %@
%s ERR: Failed to allocate buffer of size %zu, bailing out
%s Writing to file(%@) failed!. Err=%@
%s received malformed command - %@ %@ %@
%s unknown IDS peer with passed Identifier %@, %@ %@
%s received malformed command - %@
%s Syncing audio file - %@ from %@
%s Error setting remoteP2Plog file to NSFileProtectionCompleteUntilFirstUserAuthentication. file=%@ Err=%@
%s CSP2P_VoiceProfileTransferCmd: received malformed command - %@ %@ %@
%s CSP2P_VoiceProfileTransferCmd: received malformed command: CSP2P_VoiceProfileData_Key: %@CSP2P_VoiceProfileFileName_Key: %@CSP2P_VoiceProfileSpeakerName_Key: %@CSP2P_VoiceProfileLocale_Key: %@CSP2P_VoiceProfileDataType_Key: %@CSP2P_VoiceProfileTotalSegments_Key: %@CSP2P_VoiceProfileSegment_Key: %@
%s CSP2P_VoiceProfileTransferCmd: Received VoiceProfile Segment (%@/%@) from peerId %@
%s CSP2P_VoiceProfileTransferCmd: Failed to delete the directory %@ with error %@
%s CSP2P_VoiceProfileTransferCmd: received VoiceProfileSegment %@, expected %d
%s CSP2P_VoiceProfileTransferCmd: Creating directory failed with error %@
%s CSP2P_VoiceProfileTransferCmd: Writing to file failed!!!
%s Received request to delete VoiceProfile %@ from peerId %@
%s Cannot send data across when _adCompanionServiceProvider is nil - returning
%s ERR: Rejecting command %@ sent to non Horseman device
%s ERR: received malformed command - %@ %@
%s ERR: unknown IDS peer with passed Identifier %@, %@ %@
%s ERR: received malformed command with locale nil - %@
%s Fetching homeUserId for siriProfileId %{public}@
%s siriProfileId %{public}@ maps to homeUserId %{public}@
%s ERR: Home User Id erred %{public}@ for Siri Profile Id %{private}@
%s ERR: %@
%s ERR: received malformed command with profileId nil - %@
%s ERR: Failed to find voice profile with identifier - %@
%s CSP2P_VoiceProfileFetchCmd: Transferring voice profile %{public}@
%s CSP2P_VoiceProfileFetchCmd: File %@ isCompressed: %d, compressedSize: %ld, err: %@
%s CSP2P_VoiceProfileReverseTransferCmd: Failed VoiceProfileTransfer: %@, error %@
%s CSP2P_VoiceProfileReverseTransferCmd: Successfully transferred %@
%s CSP2P_VoiceProfileReverseTransferCmd: Failed transferring voice profile %@ with error %@
%s CSP2P_VoiceProfileReverseTransferCmd: Successfully transferred voice profile %@
%s ERR: Rejecting command %@ sent to Horseman device
%s ERR: received malformed command with relative path nil - %@
%s Failed in sending trigger for Voice profile update to peer %@ with error %@
%s SpkrId:: path is nil - Bailing out
%s SpkrId:: Direntry with same name exists, this will be removed: %@
%s SpkrId:: Creating Directory : %@
%s SpkrId:: Creating Directory failed : %@
%s Error reading directory at %@: err: %@
%s %@ is empty
%s zeroFilterWinSz: %{public}tu, numHostTicksPerAudioSample: %{public}f
%s _vtEndInSampleCount:%{public}ld, _numSamplesProcessed: %{public}ld, voiceTriggerInfo: %{public}@
%s Registering for post build install/first unlock activity - %s
%s Received event for XPC activity: %@ in state: %ld
%s XPC activity: %@ deferred: %@ firstUnlock: %@
%s Registered XPC activity got triggered...
%s Skipping post build activity on ATV
%s VT is disabled, skipping post build activity !
%s Post build install/first unlock tasks got completed with error - %{public}@
%s Registered XPC activity complete. State: %@.
%s UUID was nil will not start fingerprint provider
%s Updated in use services for fingerprintProvider. %lu services in use
%s Starting continuousFingerprintProvider
%s UUID was nil will not stop fingerprint provider
%s Updated in use services for fingerprintProvider. %lu services remaining
%s Stopping continuousFingerprintProvider
%s listen polling has failed : %{public}@
%s Skip listen polling since audio is streaming / Siri disabled
%s Start audio stream successfully ? %{public}@, error : %{public}@
%s Received didStartRecording when Siri is off
%s Failed in requesting audio stream : %{public}@
%s Already started listen polling, skip
%s Failed to stop audio stream : %{public}@
%s No audio stream to stop, we shouldn't hit this
%s Siri enabled : %{public}d
%s stream stopped unexpectedly : %{public}ld
%s Mediaserverd/bridgeaudiod recovered from crash
%s Failed to fetch speaker state muted info, error : %{public}@
%s Queried built-in speaker mute state as %{public}@
%s Timed-out for fetching speaker state muted info, setting isMuted = YES
%s Failed to fetch builtIn speaker active state, error : %{public}@
%s Queried built-in speaker state as %{public}@active
%s Timed-out for fetching speaker state active info, setting speakerStateActive = NO
%s Speaker state changed : %{public}@
%s Failed to get speaker state from AVVC, default to inactive
%s Speaker mute state changed: %{public}@
%s Failed to enable speakerStateListening: %{public}@
%s Start monitoring : Speaker state from AVVC
%s Failed to disable speakerStateListening: %{public}@
%s Stop monitoring : Speaker state from AVVC
%s SmartSiriVolume: deleted %{public}u elements in energy buffer.
%s SmartSiriVolume: number of elements to delete exceeds energy buffer size, ignore.
%s SmartSiriVolume init value for noise estimation %{public}f
%s SmartSiriVolume init value for LKFS estimation %{public}f
%s SmartSiriVolume enable policy changed : %{public}@
%s SmartSiriVolume received MediaRemote initial state as %{public}@
%s SmartSiriVolume haven't got MediaRemote callback yet, let's assume media is playing.
%s SmartSiriVolume received alarm initial state as %{public}@
%s SmartSiriVolume received timer initial state as %{public}@
%s asset is nil, use default parameters(this should not happen).
%s SmartSiriVolume configure: %{public}@
%s SmartSiriVolume heartbeat = %{public}lld
%s SmartSiriVolume: estimated noise level %{public}f
%s SmartSiriVolume: estimated LKFS %{public}f
%s SmartSiriVolume: pause SSV calculation.
%s SmartSiriVolume: resume SSV calculation.
%s Siri is disabled, we shouldn't receive audio here, heartbeat = %{public}lld
%s SmartSiriVolume received VT event!
%s SmartSiriVolume remove samples from VT utterances by %{public}llu, with startAnalyzeSampleCount = %{public}llu, samplesFed = %{public}llu, triggerStartSampleCount = %{public}llu
%s SmartSiriVolume trying to delete too many VT samples, set triggerDurationToDelete to be limited max: %{public}llu
%s SmartSiriVolume got empty VT event!
%s SmartSiriVolume dismiss alarm firing as VoiceTrigger detected.
%s SmartSiriVolume dismiss timer firing as VoiceTrigger detected.
%s SmartSiriVolume: final estimated TTS volume in dB %{public}f
%s SmartSiriVolume: adjust TTS volume since alarm/timer is firing.
%s SmartSiriVolume: TTS volume in dB from noise %{public}f, from LKFS %{public}f, with user offset %{public}f
%s SmartSiriVolume: soft volume algorithm in use
%s SmartSiriVolume: pause LKFS calculation according to MediaRemote notification.
%s SmartSiriVolume: resume LKFS calculation according to MediaRemote notification.
%s SmartSiriVolume received unknown media playing state, let's assume media is playing.
%s SmartSiriVolume received unknown alarm state, let's reset alarm state.
%s SmartSiriVolume: alarm firing status = %@ according to MobileTimer notification.
%s SmartSiriVolume received unknown timer state, let's reset timer state.
%s SmartSiriVolume: timer firing status = %@ according to MobileTimer notification.
%s SmartSiriVolume dismiss alarm firing as Siri client is recording.
%s SmartSiriVolume dismiss timer firing as Siri client is recording.
%s SmartSiriVolume: set StartAnalyzeSampleCount = %{public}lld
%s SmartSiriVolume: final estimated TTS volume %{public}f with music volume %{public}f
%s Start monitoring : SACInfo
%s Stop monitoring : SACInfo
%s Device is in stereo mode : %{public}@
%s vibration state fetched from CFPreferences is NULL, using On as default value
%s ::: NVI logging initialized
%s Received external route change notification
%s Received external pickable route change notification
%s Received CarPlay AuxStream support change notification
%s Received CarPlay connection change notification
%s Notifying Hearst Connection State : %{public}d
%s Notifying Jarvis Connection State : %{public}d
%s Automatic Volume Toggled. Automatic Volume Enabled: %{public}d
%s No SACodec for settings %{public}@
%s Start monitoring : SpeakerRecognition Asset meta update
%s Stop monitoring : SpeakerRecognition Asset meta update
%s New Speaker Recognition asset metadata is available
%s VoiceTrigger is already %{public}@, received duplicated notification!
%s Start monitring : VoiceTrigger setting switch
%s Cannot start monitoring VoiceTrigger setting switch because it was already started
%s Stop monitring : VoiceTrigger setting switch
%s VoiceTrigger enabled = %{public}@
%s endpointerModelVersion is still nil after fetching it from EAREndpointer
%s Updated endpointer threshold: %{public}f
%s Updated endpointer delayed trigger: %{public}d
%s setEndpointerOperationMode : %{public}d
%s current EndpointerOperationMode : %{public}d
%s update endpointer threshold to %{public}f for task %{public}@
%s EARSPG: CSServerEndpointFeatures: %{public}@
%s isASRFeatureFromServer = %{public}d
%s Accepting RC: RCTime < 0: Server's processedAudioDuration(%{public}f) > _lastReportedEndpointTimeMs(%{public}f): sfLatency: %{public}f, rcTimeMs: %{public}f
%s Rejecting RC: SFLatency < 0: Server's processedAudioDuration(%{public}f): _lastReportedEndpointTimeMs(%{public}f): sfLatency: %{public}f, rcTimeMs: %{public}f
%s rcEpFeatures: %{public}@ shouldAccept: %{public}d
%s first audio buffer host time: %{public}llu
%s Detected speech start at %{public}f of effectiveClientProcessedAudioMs
%s Already communicated end-pt: Not Invoking hybridClassifier for silposnf=%{public}f
%s ClientLag: serverProcessedAudioMs(%{public}ld) > effectiveClientProcessedAudioMs(%{public}f)
%s ClientLag: Not invoking HybridClassifier: sfLatency > clientLagThreshold: %{public}f > %{public}f
%s ClientLag: Using DefaultServerFeatures with disconnected-state sfLatency: %{public}f
%s ClientLag: Using ServerFeatures with ClampedSFLatency: %{public}f
%s ClientLag: Not Invoking HybridClassifier as serverProcessedAudioMs > effectiveClientProcessedAudioMs
%s HEP.feats: [%{public}ld,%{public}f,%{public}f,%{public}ld,%{public}f,%{public}f] & [(%{public}@),%{public}f] @ %{public}lu [%{public}f, %{public}d]
%s HEP.posterior=%{public}f, result=1, endpointedBuffer.hostTime=%{public}llu, anchorhostTime=%{public}llu, endpointSampleCount=%{public}llu, numSamplesProcessedBeforeAnchorTime=%{public}lu, isAnchorTimeBuffered=%{public}d
%s request timeout with features %{public}@
%s ServerFeaturesLatencyDistribution: %{public}@ additionalMetrics: %{public}@
%s MMEP:: HEP detected at %{public}f but will continue running for MMEP.
%s Already communicated end-pt: Not scheduling work for hybridClassifierQueue for silposnf=%{public}f
%s Log hybrid endpointer features for event: %{public}@, and locale: %{public}@
%s triggerEndSeconds: %{public}f, _vtEndInSampleCount: %{public}lu, _vtExtraAudioAtStartInMs: %{public}lu,  _hepAudioOriginInMs: %{public}f, voiceTriggerInfo: %{public}@,
%s CSHybridEndpointer recordingStoppedForReason: %{public}ld
%s sampleRate=%{public}lu, recordContext=%{public}@
%s CSEndpointAsset exists: %{public}@
%s No asset for CSHybridEndpointer for currentLanguage: %{public}@. Fallback to NNVAD
%s Created HybridClassifier(%{public}@); canProcessCurrentRequest after reset: %{public}d,for sampleRate: %{public}lu, lang=%{public}@, version=%{public}@
%s HEP.logs.hdr: [ServerASR_trailingSilenceDuration,ClientSPG_SilenceFramesCountMs,ServerASR_endOfSentenceLikelihood,ServerASR_wordCount,ServerFeaturesLatency,ClientSPG_SilenceProbabilityHMMFiltered] & [ServerASR_pauseCounts,ServerASR_silencePosterior,ClientSPG_silenceProbailitySPGRaw] @ effectiveClientProcessedAudioMs : [HEPPosteriorOut,HEPDecision]
%s csHepConfig: %{public}@
%s _clientHepConfig: %{public}f, _clampedSFLatencyForClientLag: %{public}f, _useDefaultServerFeaturesOnClientLag: %{public}d, _extraDelayFrequency: %{public}lu, _taskThresholdMap: %{public}@
%s update assets to: %@
%s Start monitoring : Siri setting switch, Siri is %{public}@
%s Stop monitoring : Siri setting switch
%s Siri Enabled = %{public}@
%s Start audio stream successfully ? %{public}@, error : %{public}@, startRecordingSampleCount=%lu
%s Stopped audioStream with result=%d, err=%@
%s audioProvider == nil, error : %{public}@
%s provider: %{public}@, unexpectedStop: %{public}ld
%s Device is firstUnlocked. Fetching HEP assets
%s Device is NOT firstUnlocked. Will fetch assets after firstUnlock
%s Language changed to: %{public}@
%s New hybrid endpoint asset downloaded
%s FirstUnlock notification received: %{public}d
%s Bypass Trial Asset
%s Failed to get HEP asset
%s HEP Asset: %{public}@, path: %{public}@
%s installationString: %@, for language: %@
%s File not exist: %{public}@
%s endpointAsset: %{public}@, osdAsset: %{public}@
%s elapsed time to get HEP mobile assets: %{public}lf
%s Fake endpoint asset: %@
%s _requestMHUUID: %@, _turnIdentifier: %@
%s _userSpeakingStartedTimeInMs %{public}f, _userSpeakingEndedTimeInMs: %{public}f, _userSpeakingStartedHostTime: %{public}llu, _userSpeakingEndedHostTime: %{public}llu, _stopRecordingHostTime: %{public}llu, _endpointBufferHostTime: %{public}llu
%s Received Activation Event : %{public}@
%s Cannot handle activation event : %{public}@
%s activation client not exist
%s Start monitoring : Siri language code
%s Stop monitoring : Siri language code
%s Siri language changed to : %{public}@
%s Ignore notifying change of language code, since it is nil
%s Error reading audio file: %{public}d, skipping...
%s Start monitoring : Software update checking state
%s Cannot start monitoring software update checking state because it was already started
%s Stop monitoring : Software update checking state
%s Software update checking running : %{public}@
%s AssetManager cannot be turned on since isFirstUnlocked is NO
%s AssetManager cannot be turned on since network is not available
%s token:%d
%s fromState:%llu, toState:%llu
%s SiriState - isActiveSession:%d
%s SiriState - isActiveRequest:%d
%s SiriState - isListening:%d
%s SiriState - isSpeaking:%d
%s tts Finished:%u
%s Start monitoring : VoiceTrigger Asset meta update
%s Stop monitoring : VoiceTrigger Asset meta update
%s New VoiceTrigger asset metadata is available
%s Replace deviceId(%{public}@) to nil for VoiceTrigger from Gibraltar.
%s Hang up toggle: %d
%s VoiceTrigger cannot be turned on since we are not in the desired call state
%s VoiceTrigger cannot be turned on since we are in a hang up supported call state but it is not first party.
%s VoiceTrigger cannot be turned on because we are in a ringtone and hsPhoneCallCapableHeadsetConnected: %d builtInState: %d isInSplitterMode: %d
%s Queue %@ is already being observed.
%s queue = %@
%s queue = %@, numberOfOccurrences = %tu
%s Could NOT copyFrom: %{public}lu to: %{public}lu, retSampleCount: %{public}lu
%s Invalid request: reqStartSample=%{public}lu, reqEndSample=%{public}lu, oldestSampleInBuffer: %{public}lu, latestSampleInBuffer=%{public}lu
%s Start monitoring : AdBlocker Asset meta update
%s Stop monitoring : AdBlocker Asset meta update
%s New AdBlocker asset metadata is available
%s stream %{public}@ initialized
%s stream %{public}@ is deallocated
%s Creating UUID for start audio stream request : %{public}@
%s Delivering didStop to %{public}lu tandem stream(s)
%s AudioStream<%{public}@> is streaming : %{public}d
%s Stream %{public}@ set startTimeInSampleCount : %{public}llu
%s AudioStream<%{public}@> has received didStopStreamUnexpectly
%s AudioStream<%{public}@> has received didHardwareConfigurationChange
%s Input route changed
%s Output route changed
%s Failed getting audio property %{public}.4s %{public}d
%s Failed getting audio property size %{public}.4s %d{public}
%s Failed registering for property listener %{public}.4s %{public}d
%s Found pending activation : %{public}@, handle pending activation immediately
%s Received Activation Event in CoreSpeechDaemon: %{public}@
%s Returning error for already existing pending activation event : %{public}@
%s No delegate registered : Postpone activation event handling until we have delegate registered
%s Pending Timeout fired for %{public}@ returning error for timeout
%s There is no pending activation event to timeout
%s corespeechd received mediaserverd launched event
%s Start monitoring : AOP First Pass trigger
%s Stop monitoring : AOP First Pass trigger
%s Received a request for VoiceTrigger Asset for language code : %{public}@
%s Fake Model Path does not exist : %{public}@
%s fake model meta json does not exist : %{public}@
%s Unable to read fake model meta json : %{public}@
%s Unable to parse fake model meta json : %{public}@
%s Loading FakeModel : %{public}@
%s Cannot create RTModel from %{public}@
%s fake model number(%{public}d) is less than minimum fake model number((%{public}d)
%s Using fake model for the first time : %{public}@
%s Using fake model : %{public}@
%s %{public}@ fake model is selected for download
%s %{public}@ model is selected for fallback
%s Received a request for VoiceTriggerRTModel %{public}@ Firmware Version : %{public}d.%{public}d
%s Asking mobile asset with currentLanguageCode = %{public}@
%s DownloadModel : 
%s preinstalledModels : 
%s Hearst Fake Model request switch turned on, executing stress test mode with fakeModelPath : %{public}@
%s VoiceTriggerAsset is not available : %{public}@
%s Queried model for language:%@ path:%@ configVers:%@ model:%@
%s rtLocaleMap is nil fallback to embedded locale map
%s accessoryRTBlobs are not available for the version(%{public}d.%{public}d) and locale:%{public}@, returning fallback model : %{public}@
%s Hash matched with downloadedModel : %{public}@, accessory will select this model
%s Hash matched with preinstalledModel : %{public}@, accessory will select this model
%s Ask for download : %{public}@, and use %{public}@ as fallback
%s Select keyword language as %{public}@, error : %{public}@
%s Language list and jarvis language not provided
%s current Siri language code : %{public}@
%s Jarvis locale map is nil, fallback to embedded locale map
%s Start monitoring : Setting preference change
%s Stop monitoring : Setting preference change
%s Siri restricted on lock screen : %{public}@
%s Initializing CSRawAudioInjectionProvider
%s Done initializing CSRawAudioInjectionProvider
%s Dealloc CSRawAudioInjectionProvider
%s Calling StreamId for : %@
%s Calling prepare
%s Calling start audio stream : %@
%s Calling stop audio stream
%s Calling isRecording
%s Calling prewarm
%s Calling activate audio session
%s Start monitoring : Springboard start
%s Cannot start monitoring Springboard start because it was already started
%s Stop monitoring : Springboard start
%s SpringBoard started = %{public}@
%s CSAudioProvider is deallocated
%s CSAudioProvider[%{public}@]:StreamState changed from : %{public}@ to : %{public}@
%s CSAudioProvider[%{public}@]:Setting audioRecorder : %{public}p
%s Reset recordDeviceIndicator as we have new audioRecorder
%s CSAudioProvider[%{public}@]:
%s CSAudioProvider[%{public}@]:setCurrentContext : %{public}@
%s CSAudioProvider[%{public}@]:Cannot change context since audio recorder is currently recording
%s CSAudioProvider[%{public}@]:audioStreamWithRequest for stream <%{public}@>
%s Failed to _prepareAudioStreamSync : %{public}@
%s Attached stream %{public}@ as tandem to master stream %{public}@ %{public}@, error : %{public}@
%s PrimaryStream is already tandem of stream %{public}@, can't add mutual tandem relation here!
%s Invalid input streams
%s CSAudioProvider[%{public}@]:Prepare audio stream reuqested while state is %{public}@
%s CSAudioProvider[%{public}@]:Cannot prepare, audio system is recovering
%s CSAudioProvider[%{public}@]:Asking AudioRecorder prepareAudioStreamRecord
%s CSAudioProvider[%{public}@]:prepareAudioStreamRecord failed : %{public}@
%s CSAudioProvider[%{public}@]:Create circular buffer : numChannels(%d), duration(%f)
%s CSAudioProvider[%{public}@]:startAudioStream with stream : %{public}@ with stream state : %{public}@, option : %{public}@, streamId : %{public}llu
%s CSAudioProvider[%{public}@]:state was %{public}@, prepareAudioStream first
%s CSAudioProvider[%{public}@]:prepareAudioStreamSync with stream : %{public}@ with stream state : %{public}@, request : %{public}@
%s CSAudioProvider[%{public}@]:prepareAudioStream with stream : %{public}@ with stream state : %{public}@
%s CSAudioProvider[%{public}@]:Cannot handle start audio stream on : %{public}@
%s CSAudioProvider[%{public}@]:Cannot startAudioStream, audio system is recovering
%s CSAudioProvider[%{public}@]:Requested startHostTime = %{public}llu, _clientStartSampleCount = %{public}tu
%s CSAudioProvider[%{public}@]:%{public}@ is requesting earlier audio than asked, we can't deliver earlier audio
%s CSAudioProvider[%{public}@]:Set circularBufferStartHostTime = %{public}llu, circularBufferStartSampleCount = %{public}lu
%s CSAudioProvider[%{public}@]:Entering dispatch group for recordingWillStartGroup
%s CSAudioProvider[%{public}@]:Failed to fetch historical audio since _clientStartSampleCount is newer than audioBuffer sample count(%{public}llu)
%s Start deliver historical audio buffer immediately
%s CSAudioProvider[%{public}@]:Leaving dispatch group for recordingWillStartGroup
%s CSAudioProvider[%{public}@]:Received didStartRecording while %{public}@
%s CSAudioProvider[%{public}@]:Received didStopRecording reason : %{public}d, streamState : %{public}@
%s Calling unexpected didStop for all weak streams
%s CSAudioProvider[%{public}@]:Received didStopRecording while %{public}@
%s CSAudioProvider[%{public}@]:Waiting for recordingWillStartGroup before scheduling stopAudioStream
%s CSAudioProvider[%{public}@]:Scheduled stopAudioStream after waiting for recordingWillStartGroup - stopAudioStream %{public}@ with streamState : %{public}@
%s CSAudioProvider[%{public}@]:requested stop audio stream while stoppingWithScheduledStart, take out audio stream from schedule
%s CSAudioProvider[%{public}@]:Stream %{public}@ is not streaming on stream state : %{public}@, ignore the stopAudioStream request
%s CSAudioProvider[%{public}@]:Cannot handle stop audio stream on : %{public}@
%s CSAudioProvider[%{public}@]:requested stop audio stream while stopping, adding audio stream into stop pending
%s CSAudioProvider[%{public}@]:Stop all recordings, moving stream state to %{public}@
%s CSAudioProvider[%{public}@]:Failed to stop audioStream : %{public}@
%s CSAudioProvider[%{public}@]:%{public}@ ask for audio hold stream for %{public}f
%s CSAudioProvider[%{public}@]:Timeout for %{public}@ has fired
%s CSAudioProvider[%{public}@]:Removing %{public}@ from stream holders
%s CSAudioProvider[%{public}@]:%{public}@ stream holder was already removed from stream holders
%s CSAudioProvider[%{public}@]:%{public}@ ask for cancel hold stream
%s Failed to prewarmAudioSessionWithError : %{public}@
%s Failed to activateAudioSessionWithReason: %{public}@
%s CSAudioProvider[%{public}@]:Activating Audio Session under : %{public}@
%s Failed to activateAudioSession : %{public}@
%s CSAudioProvider[%{public}@]:shouldDuckOnBuiltInSpeaker: %{public}@ (audioStreamType: %{public}lu, isPlaybackRouteBuiltInSpeaker: %{public}@, isDuckingOnSpeakerOutputSupported: %{public}@)
%s Failed to fetch duckingSupported result : %{public}@
%s Failed to deactivate audio session : %{public}@
%s CSAudioProvider[%{public}@]:Deactivating Audio Session under : %{public}@
%s Failed to deactivateAudioSession : %{public}@
%s Unable to disable duckOthers in HomePod
%s CSAudioProvider[%{public}@]:AVVC is recovering, ignore command...
%s Not handled by this function
%s Fetching voiceTriggerInfo from audioRecorder
%s CSAudioProvider[%{public}@]:Cannot stopRecording as there are %{public}tu streamHolders
%s CSAudioProvider[%{public}@]:Shouldn't stop AVVC recording as there are %{public}tu streams
%s CSAudioProvider[%{public}@]:Buffer underrun!!!!, lastForwardedSampleTime:%{public}lu, oldestSampleTimeInBuffer:%{public}lu, stream:%{public}@
%s CSAudioProvider[%{public}@]:Ignore forwarding stream %{public}@                                        the audio packets until sampleCount == %{public}lu (theMostRecentSampleCount:%{public}lu)
%s CSAudioProvider[%{public}@]:Buffer overrun!!! lastForwardedSampleTime:%{public}lu,                                    theMostRecentSampleCount:%{public}lu, stream:%{public}@
%s Forward %d samples from historical audio buffer
%s ScheduleAlertFinishTimeout : %{public}@
%s ScheduleAlertFinishTimeout will be ignored : %{public}@, %{public}@
%s Received finishStartAlertPlaybackAt:%{public}llu streamState : %{public}@
%s CSAudioProvider[%{public}@]:Requested alertFinishHostTime = %{public}llu, _clientStartSampleCount = %{public}tu, circularBufferSampleCount = %{public}tu
%s Audio Streaming already stopped
%s Will invalidate current builtIn audio stream : %{public}@
%s failed to stopAudioStream : %{public}@
%s CSAudioProvider[%{public}@]:Audio Recorder Disconnected
%s CSAudioProvider[%{public}@]:Mediaserverd/bridgeaudiod crashed
%s CSAudioProvider[%{public}@]:Mediaserverd/bridgeaudiod recovered from crash
%s CSAudioProvider[%{public}@]:AudioRecorder will be destroyed
%s CSAudioProvider[%{public}@]:recordingTransaction already released
%s CSAudioProvider[%{public}@]:Release recording transaction at streamState : %{public}@
%s Audio Packet Delivery WatchDog fired, trying to recover
%s Schedule didStart WDT %{public}@ for %{public}lf seconds
%s startRecordingWatchDogDidFire : %{public}@, currentToken : %{public}@
%s startRecordingWatchDogToken doesn't match. Ignore this WDT fire
%s Clearing didStartRecordingDelegate WatchDogTimer : %{public}@
%s Schedule didStop WDT %{public}@ for %{public}lf seconds
%s stopRecordingWatchDogDidFire : %{public}@, currentToken : %{public}@
%s stopRecordingWatchDogToken doesn't match. Ignore this WDT fire
%s Clearing didStopRecordingDelegate WatchDogTimer : %{public}@
%s Update remote deviceUId fetched from AVVC : %{public}@ (this must be deviceUID of Darwin device only)
%s Failed to fetch remote deviceUId from AVVC
%s Listening on watch cannot be turned on since speech detection VAD is disabled
%s Listening on watch cannot be turned on since Siri is disabled
%s Listening on watch cannot be turned on since SpringBoard is not started
%s Listening on watch cannot be turned on since device is not unlocked after restart
%s Hey Siri is enabled. Checking if we are in a call.
%s Hey Siri is disabled. Not checking if we are in a call.
%s Listening on watch cannot be turned on since Siri assertion is disabled and or its not in a ringtone hfp state
%s Listening on watch cannot be turned on since audioInjection is enabled
%s Listening on watch cant be turned on because we are in a ringtone with A2DP, connected or outgoing call
%s xpc object should be XPC_TYPE_ARRAY
%s xpcObject value is NULL
%s Cannot decode non-plist types of XPC object
%s Cannot encode non-plist types into XPC object : %{public}@
%s Failed to fetch listeningEnabled : %{public}@
%s listening property in AOP : %{public}d
%s Failed to fetch listeningEnabledOnNotification : %{public}@
%s Stop monitoring : AOP Listening state
%s Received AOP Listening state change notification : %{public}d
%s Error reading file
%s Version of AdBlockerAsset: %d
%s Send a In-Ear Myriad notification
%s Unsupported protocol for this device
%s HEP::RecordingDidStop: Ignoring processAudioSamplesAsynchronously: Not queueing
%s HEP::RecordingDidStop: Ignoring processAudioSamplesAsynchronously
%s addAudio first sample offset: %{public}lu
%s HEP::RecordingDidStop: Ignoring silenceScoreEstimateAvailable, Not queuing
%s HEP::RecordingDidStop: Ignoring silenceScoreEstimateAvailable
%s HEP.posterior=%{public}f, result=1, endpointedBuffer.hostTime=%{public}llu, isAnchorTimeBuffered=%{public}d
%s CSHybridEndpointAnalyzer recordingStoppedForReason: %{public}ld
%s No asset for CSHybridEndpointer for currentLanguage: %{public}@. Fallback to VAD2
%s Created OSDAnalyzer: %{public}@
%s _clientHepConfig: %{public}f, _clampedSFLatencyForClientLag: %{public}f, _useDefaultServerFeaturesOnClientLag: %{public}d
%s _currentAsset changed to : %{public}@
%s Session Query Failed : %{public}@
%s Mediaserverd/bridgeaudiod crashed
%s Start monitoring : AudioSessionInterruption
%s Start monitoring : AudioSessionRouteChangeNotification
%s Stop monitoring AudioSession activities
%s Endpointer is disabled in recordOption: %@
%s CSHybridEndpointer canProcessCurrentRequest
%s CSHybridEndpointer can-NOT-ProcessCurrentRequest, fallback  to NNVAD
%s _activeEndpointer=%{public}@
%s shouldUseCVT2ShotDecision: %{public}d, isWatchRTSTriggered=%{public}d
%s preheat
%s endpointer: %{public}@: didDetectStartpointAtTime: %{public}f
%s EP_PROXY::RecordingDidStop: Ignoring startPoint-reporting
%s EP_PROXY::RecordingDidStop: Ignoring didDetectHardpoint-reporting
%s %{public}@: Endpointer didDetectHardEndpointAtTime:withMetrics: %{public}f, CallingDelegate: %{public}@
%s WARN: endpointerModelVersion called when CSHybridEndpointer is not available
%s Skip update endpointer threshold from server for accessible endpointer request
%s WARN: logEndpointFeatures called when CSHybridEndpointer is not available
%s Detaching from session %p
%s Already attaching to session!
%s Attaching to session
%s Failed attaching to bt session %d
%s session = %p, result = %d
%s Session is NULL.
%s Failed getting default local device from session %p (result = %d).
%s Failed adding callbacks to local device %p from session %p (result = %d).
%s localDevice = %p, event = %d, result = %d
%s Failed getting default accessory manager from session %p (result = %d).
%s Failed adding callbacks to accessory manager %p from session %p (result = %d).
%s accessoryManager = %p, accessoryEvent = %d, device = %p, state = %d
%s Failed getting device address from string %d
%s Failed getting device from address %d
%s BTDevice %p for address %@
%s BTAccessoryManager %p
%s Failed getting device from deviceUID %d
%s BTDevice %p for deviceUID %@
%s BTLocalDevice %p
%s Loading device info for %@...
%s Loaded device info %@ for %@.
%s Using slow path...
%s Slow path took %f seconds.
%s Slow path timed out after 4 seconds.
%s Method not supported
%s Reloading device info for %@...
%s Reloaded device info %@ for %@.
%s deviceInfo = %@
%s deviceInfo changed from %@ to %@
%s Fetching device info for %@...
%s Fetched device info %@ for %@.
%s Getting BTDevice and BTAccessoryManager for %@...
%s Got BTDevice %p and BTAccessoryManager %p for %@.
%s Device UID and address of %@ are nil.
%s Data source of %@ is nil.
%s Failed getting BTDevice and BTAccessoryManager for %@.
%s Failed getting vendor id and product id from BTDevice %p (result = %d).
%s Failed getting InEar capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting DoAP capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting ANC capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Transparency capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Software Volume capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Announce Messages capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Failed getting Announce Calls capability from BTDevice %p via BTAccessoryManager %p (result = %d).
%s Cannot create NSNumber if xpcObject is NULL
%s XPC object type should be BOOL, DOUBLE, INT64, or UINT64
%s Cannot create xpcObject if objcType is NULL
%s Cannot create xpcObject since there is no matching type
%s Stop monitoring : First unlock
%s PhraseSpotter enabled = %{public}@
%s PhraseSpotter is already %{public}@, received duplicated notification!
%s Created VoiceIdXpc connection
%s event = %{public}p client = %{public}p cannot handle event
%s ignore unknown types of message
%s message = %{public}p, client = %{public}p, cannot handle message
%s MessageType = %{public}lld
%s Null msg body
%s Null VTEI
%s Null Ctx
%s Null deviceInfo
%s Null audio context
%s Received msg of type %{public}lld for utt %{public}@
%s Fetched latest VT asset %@ for retraining
%s Implicit utterance processing done with error %{public}@
%s Cannot retrain since we cannot look-up SSR asset with error %@
%s Received error %{public}@ from client %{public}@
%s Client %{public}p connection disconnected, noticing xpc listener
%s Cannot deactivateAudioSession since audio recorder doesn't exist
%s Cannot deactivateAudioSession with %{public}@
%s Failed to initialize caesuraSPG, stopping monitoring
%s Start monitoring : EARCaesuraSilencePosteriorGenerator: %{public}@
%s deallocating EARCaesuraSilencePosteriorGenerator: %{public}@
%s Stopped monitoring : EARCaesuraSilencePosteriorGenerator
%s EARClientSilenceFeatures heartbeat = %{public}lld,                   silScoreEstimate = %{public}f
%s Stop monitoring : HomePod voiceTriggerAssertion
%s Setting sample rate to %d
%s Could not make Fingerprinter decoder: %{public}.4s
%s Error during conversion for fingerprinter %{public}.4s
%s Getting signature for duration %lf
%s Fingerprinter doesn't support rate %{public}ld
%s Set initial info as current %@.
%s Assign new MHUUID here to %@ (force = %@)
%s mode = %ld
%s endpointerOperationMode = %@, forceUpdate = %d
%s Ignored because endpointer operation mode is unspecified.
%s Ignored because endpointer operation mode can not be changed from %@ to %@.
%s Set Use Automatic Endpointing %d
%s Setting up recording alerts for Dictation.
%s Done setting recording alerts for Dictation.
%s Setting up recording alerts for Siri and other non-Dictation modes.
%s Done setting recording alerts for Siri and other non-Dictation modes.
%s Overriding record starting alert for IFD feature group one.
%s Done overriding record starting alert for IFD feature group one (soundURL = %@).
%s Failed overriding record starting alert for IFD feature group one.
%s Done overriding record starting alert from override policy (soundURL = %@).
%s Failed overriding record starting alert from override policy.
%s Trying to set record buffer duration to %lf
%s Failed setting record buffer duration. Duration is %{public}lf
%s Initalizing speech controller with context %@
%s Set pending info as current %@.
%s Done initializing voice controller
%s Preparing CSSpeechController with settings %@
%s Error setting up CSSpeechController %{public}@
%s Done preparing CSSpeechController
%s reason = %d, speechEvent = %zd (%@), hostTime = %llu
%s reason = %d, hostTime = %llu
StopRecording
SpeechRecorder
%s Really stopping recording
UsefulUserFacingResults
%s Someone else has already asked to stop recording.%@
%s Sending stop recording immediately because CSSpeechController isn't recording
%s recordingState = %zd, context = %@
%s Playing alert %ld
%s Checked audio logging limits, count = %d -> %d
%s An item already exists at path %@, but it is not a directory.
%s Failed to create directory at path %@ due to error %@.
%s info = %@, context = %@
%s Created _audioFileWriter %@.
%s Did not create _audioFileWriter because audioFileType = %ld.
%s supportsVoiceIdentificationTraining = %d
%s supportsSpeechExtraction = %d
%s supportsSpeechLogging = %d
%s Configure _audioFileWriter with recordSettings = %@.
%s Ask context %@ to configure and record with recordSettings = %@.
%s Acquired recorded audio for speech logging: %@
%s Speech Log: %@
%s Unable to save recorded audio for speech logging due to error %@.
%s Skipped saving recorded audio for speech logging due to audio logging limit.
%s Unable to prepare directory for speech logging.
%s Unable to acquire recorded audio for speech logging.
%s Done
%s %ld
%s Ignoring unexpected stop recording while in state %ld
%s Prewarming audio session in speech controller
%s Done prewarm audio session in speech controller
%s Prewarming start alert
%s Failed to prewarm start alert due to %@
%s Done prewarming start alert
%s Preparing instead of preheating since we're not in the default mode
%s Preparing speech capture for %@ options:%@
%s context:%@, _currentActivationInfo :%@
%s Using Bluetooth audio analyzer style
%s Using driving audio analyzer style
%s Using voice trigger audio analyzer style
%s Using default audio analyzer style
%s Suppressing start alert
%s Playing start alert %@
%s No SoundID URL
%s No start recording alert
%s entering _recordingWillStartGroup
%s Setting delayed start delay %lf
%s Asking CSSpeechController to startRecording with settings %@
StartRecording
%s Done asking CSSpeechController to startRecording
%s context = %@
%s leaving _recordingWillStartGroup
%s Could not set up recording (prepared = %d, started = %d), returning error %{public}@%{public}@ and resetting voice controller.
%s Updated speech synthesis record from %@ to %@.
%s Fetching audio session ID...
%s Done fetching audio session ID %lu.
%s endpointerOperationMode = %@
%s Fingerprinting mode, force (endpointerOperationMode = %@).
%s Legacy property set (useAutomaticEndpointing = %d), override (endpointerOperationMode = %@)
%s info = %@, reason = %@
%s Dropping previous pending activation info %@ for reason %@.
%s Setting audio context %@ for reason %@.
%s Error setting audio context %@ for reason %@ error %{public}@. (%f seconds)
%s Done setting audio context %@ for reason %@. (%f seconds)
%s Ignored setting audio context because there's no speech controller.
%s Updating to post voice for reason %@.
%s Updating using pending info %@ for reason %@.
%s Attempting to release audio session while CSSpeechController is still recording.
%s releaseAudioSessionBehavior = %s
%s Resetting to default audio context on session end
%s %lf %lf
%s Endpointer setStartWaitTime is set to %{public}f
%s (event = %ld, suppressAlert = %d, hostTime = %llu)
%s (suppressAlert = %d)
%s Begin updating audio device info %@. (reason = %@, forcesUpdate = %d)
%s Fetching audio device info from CSSpeechController...
%s Done fetching audio device info from CSSpeechController.
%s End updating audio device info %@. (duration = %f)
%s Creating recording info (speechEvent = %ld (%@), audioAlertStyle = %ld, includeBTInfo = %d, includeRecordDeviceInfo = %d)
%s alertStartTime = %llu
%s Done creating recording info %@.
%s Got a speech start failure after we already got audio buffers?!
SpeechRecorderAudioStart
AudioStart
%s success = %d, error = %@
%s isTwoShot = %d
%s SPELLING recordSettings codec=%@
%s Sending speech did start to delegate %@
%s Resetting VoiceController on startRecording failure
%s reason = %ld, estimatedSpeechEndHostTime = %llu
%s Synthesizing a didStart callback, on missing didStart
SpeechRecorderAudioStop
AudioStop
%s reason = %ld, estimatedSpeechEndHostTime = %llu, errorCodeOverride = %ld, underlyingError = %@
%s Ignoring unexpected didStop callback while in state %ld
%s Starting new recording for two shot mode
%s Failed starting recording for two shot mode
%s audioMetrics = %@
RecordBufferAvailable
%s buffers.count = %llu, durationInSec = %f, bufferStartHostTime = %llu
RecordBufferHandleBegin
%s Dropped %f seconds of audio buffers recorded at %llu (%f seconds) due to audio recording restriction (accumulatedBufferDuration = %f seconds).
RecordBufferHandleEnd
%s firstBufferStartHostTime = %llu, firstBufferReceiptHostTime = %llu
%s Getting audio route instrumentation with recording info %@...
%s Done getting audio route instrumentation %@.
%s LPCM record buffer is empty.
%s reason = %zd, estimatedSpeechEndHostTime = %llu, isRecordingStopped = %d
%s Ignoring unexpected last buffer callback while in state %ld
%s Ignoring unexpected last buffer callback without first buffer.
%s %d
%s type = %ld, error = %@
%s type = %ld
%s alertPlaybackGroup is nil.
%s numberOfAVVCAlertPlaybacksByType does not have AVVC alert playbacks of type %ld.
%s numberOfAVVCAlertPlaybacksByType is nil.
%s Language detection delegate is active
%s Language detection delegate is NOT active. %d, %@
%s isSiriMode=%d, speechEvent=%ld, wasRequestCancelled=%d, shouldSuppressAlert=%d, isMonitoringMyriadEvents=%d, didMyriadWin=%d, recordRoute=%@
%s Explicitly playing %@ alert
%s BTLE Myriad Not explicitly playing speech stop alert
%s Not explicitly playing alert
%s Language detector is confident:%{private}d of the detected language:'%{private}@' with language code likelihood: %{private}@
%s time = %lf, wantsAudibleFeedback = %d
%s BTLE waiting for Myriad to finish
%s BTLE Myriad loss cancelled two shot feedback
%s BTLE speech controller began waiting for Myriad decision
%s BTLE speech controller end waiting for Myriad decision %lu
%s opType = %tu, reason = %tu
%s Unknown CSRequestOperationType (opType = %tu).
%s reason = %tu
%s time = %lf
%s Ignoring startpoint from stale CSEndpointAnalyzer
Endpoint
%s exited _recordingWillStartGroup
%s Ignoring hard endpoint from stale CSEndpointAnalyzer
%s Ignoring hard endpoint because (endpointTime = %f, firstBufferTimestamp = %f, mostRecentTTSEndTimestamp = %f, extendedSuppressDuration = %f).
%s Detected hard end-point with metrics - %@
EndpointHandled
%s Overriding timeout and start point on timeout
%s Ignoring hard endpoint since _endpointerOperationMode = %@, _didEnterTwoShotMode = %d
%s promptType = %ld, time = %f
%s suppressesTwoShotAlert = %d
%s done
%s Fake two shot TTS prompt timed out (%@).
%s Fake two shot TTS prompt timeout is not handled due to context mismatch (fakeTwoShotPromptUUID = %@, _fakeTwoShotPromptUUID = %@).
%s Fake two shot TTS prompt called back (timestamp = %f, duration = %f, error = %@)
%s Fake two shot TTS prompt callback is not handled due to context mismatch (fakeTwoShotPromptUUID = %@, _fakeTwoShotPromptUUID = %@).
%s duration = %lf
%s No endpoint yet, waiting
%s rcID: %lu, duration: %lf, lrnnScore: %f, lrnnThreshold: %f, taskId: %@
%s Eager results - shouldAccept: %d, isMitigated: %d Duration: %lf last duration: %lf
%s Enforce previous endpointHint
%s Got an enforce message without a current completion. Ignoring
%s Processing RC for mitigation, force accept
%s Got an enforce message without a current RC. Stop Recording
%s timeout = %f
%s Watchdog timer timed out.
%s duration %lf
%s Starting audio playback request %@...
%s Failed audio playback request %@ due to error %@.
%s Stopped audio playback request %@.
%s scores = %{private}@
%s userInfo = %@
%s Reuse existing session %@ from reusable session pool.
%s Create new session %@.
%s session = %@
%s session = %@, error = %@
%s Add successfully finalized session %@ to reusable session pool.
%s Evict %tu sessions from reusable session pool because %@.
%s Reusable session pool is already empty.
%s Created CSStartOfSpeechDetector: %{public}@ 
%s Reset: Created EARCaesuraSilencePosteriorGenerator: %{public}@
%s Start of speech already reported, ignoring !
%s silProb= %{public}f, silnfcnt=%{public}f, clientProcessedAudioMs=%{public}f curSpeechFrmCnt=%{public}lu
%s Speech prob target reached at %{public}lu from %{public}lu, #samples=%lu, secs=%{public}f
%s Received mediaserverd or bridgeaudiod crashes event
%s Received mediaserverd or bridgeaudiod reset event
%s Start monitoring : Mediaserverd crash / recover event
%s disconnect VoiceTriggerXPCClient
%s ERR: failed to get response !
%s Failed setting activity state to continue
%s Failed setting activity state to done
%s Deferring activity:%@ deferred:%@
%s Notifying CoreSpeechDaemon launched
%s Start monitoring : corespeechd state
%s Cannot start monitoring corespeechd state because it was already started
%s Stop monitoring : corespeechd state
%s CoreSpeechDaemon state changed to %{public}u
%s network state notify key : %s
%s Start monitoring : network availability
%s Stop monitoring : network availability
%s Network availability changed
%s language code already up-to-date : %{public}@
%s Using override asset: %@
%s Updated cache with new Trial asset %@
%s Ignore MA asset update
%s startListenWithOption : %{public}d, %{public}@
%s stopListenWithCompletion : %{public}d, %{public}@
%s hasRemoteVADAvailable : %d
%s hasVADAvailable : %d
%s didStopUnexpectly : %d
%s There is not audio buffer to convert. Skip this.
%s Got asked for %{public}u packets, have %{public}u
%s [%{public}02u of %{public}02u %{public}fs] Opus packet with %u bytes
%s %{public}d bytesConsumed from opus coverter, remains %{public}d bytes
%s Resetting AudioConverter buffer
%s createAudioConverter : initial frames per buffer = dur %{public}.2f * sr %{public}.2f = %{public}u
%s Failed to get audioConverter property (kAudioConverterCurrentOutputStreamDescription) : %{public}d
%s _configureAudioConverter: encoded audio needs minimum of %{public}u bytes per output buffer
%s _configureAudioConverter: AudioConverterGetProperty(kAudioConverterPropertyMinimumOutputBufferSize) returned status %{public}d
%s _configureAudioConverter: final framesPerBuffer: %{public}u
%s _configureAudioConverter: _convertPacketCount: %{public}u
%s _configureAudioConverter: AudioConverterGetProperty(MaximumOutputPacketSize): returned status %{public}d
%s createAudioConverter: outputSizePerPacket: %{public}u
%s _configureAudioConverter: _convertAudioCapacity %{public}u bytes
%s Cannot create AudioConverter using AudioConverterNew : %{public}u
%s Cannot set encoder bit rate : %{public}u
%s Providing voiceTriggerEventInfo with deviceId %{public}@
%s Providing built-in voiceTriggerEventInfo
%s Timed-out for fetching voiceTriggerInfo
%s TiggerInfoProviding is nil
%s RequiredSampleCount reached: currSampleCount=%{public}lu, endingSampleCount=%{public}lu
%s SmartSiriVolume cannot be resumed because Siri is not enabled
%s Setting audio injection enabled : %d
%s Fetched audio injection enabled : %d
%s CSAudioInjectionServices Interrupted
%s CSAudioInjectionServices Invalidated
%s Request to create audio injection device type : %ld, deviceName : %@, deviceId : %@, productId : %@
%s Fetching primary device timed-out!!
%s Request to inject audio %@ to deviceUUID %@
%s Request to connect device with UUID %@
%s Connect device timed-out!!
%s Request to disconnect device with UUID %@
%s Disconnect device timed-out!!
%s Request to fetch primary device
%s xpc object should be XPC_TYPE_DICTIONARY
%s xpcObject key or value is NULL
%s Cannot encode key into xpcobject since the key is not NSString class type
%s Failed to create AVVC : %{public}@
%s Create new CSAudioRecorder = %{public}p
%s Tear down _remoteRecordClient if needed
%s CSAudioRecorder %{public}p deallocated
%s Failed to teardown AVVC : %{public}@
%s AVVC initialization failed
%s Successfully create AVVC : %{public}p
%s Setting announced call flag to: %d with stream handle Id: %lu
%s Calling AVVC setContext : %@
%s Failed to get handle id : %{public}@
%s setContext elapsed time = %{public}lf, streamHandleId = %{public}lu, streamType = %{public}lu
%s Calling AVVC setContextForStream : %{public}@
%s Tried to setCurrentContext with mode %ld. This method can only be used for auto and post
%s setCurrentContext elapsed time = %{public}lf
%s Remote device with device id: %{private}@ not found
%s Failed to prepare remote device : %{public}@
%s Calling AVVC prepareRecordForStream(%{public}llu) : %{public}@
%s AVVC prepareRecordForStream failed : %{public}@
%s prepareRecordForStream elapsed time = %{public}lf
%s ::: CSAudioRecord will inject audio file instead of recording
%s Resetting AudioFilePathIndex
%s Increase AudioFilePathIndex = %d
%s AudioFilePathIndex is out-of-boundary _audioFilePathIndex:%d injectAudioFilePaths:%d
%s AudioFilePathIndex:%d accessing:%@
%s Unable to find injectAudioFilePath = %@
%s Asking startRecording to remote device with context : %{public}@ (original context : %{public}@)
%s Failed to fetch valid context
%s Failed to startRecording : %{public}@
%s startRecordingWithOptions elapsed time = %{public}lf
%s Calling AVVC startRecordForStream : %{public}@
%s startRecordForStream failed : %{public}@
%s startRecordForStream elapsed time = %{public}lf
%s Failed to stopRecording to remoteRecordClient : %{public}@
%s stopRecording elapsed time = %{public}lf
%s Calling AVVC stopRecordForStream
%s Failed to stopRecordForStream : %{public}@
%s stopRecordForStream elapsed time = %{public}lf
%s Session State = %d
%s AudioSessionState = YES
%s AudioSessionState = NO
%s fetch recordDeviceInfo elapsed time = %{public}lf
%s fetch EndpointDeviceType elapsed time = %{public}lf
%s AVVC sampling rate = %{public}f
%s AVVC doesn't return sampleRate, assume it is default sample rate
%s isNarrowBand = NO for streamHandleId = %{public}lu
%s (darwinOS) : isNarrowBand = NO for streamHandleId = %{public}lu
%s isNarrowBand = %{public}@ for streamHandleId = %{public}lu
%s Calling AVVC setSessionActive for Prewarm
%s Prewarm AudioSession has failed : %{public}@
%s Calling AVVC setRecordMode to mode : %{public}d
%s AVVC successfully setRecordMode
%s setRecordMode elapsed time = %{public}lf
%s Calling AVVC setSessionActivate for activation with streamId(%{public}lu)
%s AVVC setSessionActivate has failed : %{public}@
%s AVVC successfully activated audioSession
%s setSessionActivate elapsed time = %{public}lf
%s Calling AVVC setSessionActivate for deactivation : %{public}tu
%s Calling AVVC setSessionActivate for deactivation for stream %d: %{public}tu
%s Failed to setIamTheAssistant : %{public}@
%s Creating audio session with allow mixable audio while recording to YES
%s Failed to setAllowMixableAudioWhileRecording : %{public}@
%s Calling AVVC : Enable Smart Routing Consideration
%s Calling AVVC : Disable Smart Routing Consideration
%s enableSmartRoutingConsiderationForStream elapsed time = %{public}lf
%s Fail to setSmartRoutingConsideration : %{public}@
%s Calling AVVC setDuckOthersForStream(%d) for DuckOthers/MixWithOthers
%s Failed to setDuckOthersForStream : %{public}@
%s setDuckOthersForStream elapsed time = %{public}lf
%s Calling audio session reset ducking settings
%s resetDuckSettings elapsed time = %{public}lf
%s Failed to setDuckToLevelDB : %{public}@
%s %{public}@ miniDucking now
%s enableMiniDucking elapsed time = %{public}lf
%s configureAlertBehavior elapsed time = %{public}lf
%s VoiceTriggerInfo is nil from AVVC
%s Ducking %{public}@ supported on current route with streamId: %{public}ld
%s Updated languageCode to: %{public}@ in VTEI received from remote
%s AVVCAudioBuffer contains %{public}d packet descriptions, size %{public}d, channels %{public}d. Ignoring
%s packets count %{public}d
%s Peak : %f, Avg : %f
%s Bad packet length %{public}d. Skipping rest of record buffer.
%s Cannot handle audio buffer : unexpected format(%{public}u)
%s Audio record route is %{private}@ for stream id %{private}lu
%s Calling AVVC playAlertSoundForType to play alert
%s Ignore playing endpoint beep(record stopped beep) since it already played beep in gibraltar
%s Calling AVVC playAlertSoundsForType : %{public}ld
%s Received didStartRecording : %{public}p, forStream:%{public}llu, successfully:%{public}d, error:%{public}@
%s Received audio buffer %{public}d, heartbeat = %{public}llu, streamID (%{public}lu)
%s Received didStopRecording : %{public}p forStream:%{public}llu forReason:%{public}ld
%s Received Stream Invalidated : %{public}llu
%s toConfiguration : %{public}d
%s type : %{public}d, error : %{public}@
%s Encoder error : %{public}@
%s withContext : %{public}@
%s activate : %{public}d
%s AVVC lost mediaserverd connection
%s AVVC informed mediaserverd reset, no further action required
%s hasLocalPendingTwoShot = %{public}d, token : %{public}llu
%s Unsupported audio format!
%s Existing remoteRecordClient (deviceId = %@) doesn't match required one (deviceId = %@), create new remoteRecordClient
%s The input streamHandleId(%{public}lu) is not expected(%{public}lu)
%s Cannot create NSData with size 0
%s xpc object should be XPC_TYPE_DATA
%s endpointer running on corespeechd
%s endpointer running on assistantd
%s Abstract Impl. Returning nil
softlink:r:path:/System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus
softlink:r:path:/System/Library/Frameworks/CoreMotion.framework/CoreMotion
softlink:r:path:/System/Library/PrivateFrameworks/SiriCore.framework/SiriCore
Statistics
CSGestureMonitor
CSBluetoothWirelessSplitterInfo
CSAudioInjectionBuiltInEngine
CSAudioInjectionEngineDelegate
NSObject
CSVoiceTriggerSecondChanceContext
NviDataLogger
NSStreamDelegate
CSMicUsageReporter
CSGestureMonitorPhone
CMWakeGestureDelegate
CSVoiceTriggerAssetHandler
CSAudioSessionController
CSAudioSessionInfoProvidingDelegate
CSXPCClientDelegate
CSCoreSpeechDaemonStateMonitorDelegate
CSSiriDebugConnection
AttSiri
CSCXPhoneCallStateMonitor
CSCommandControlListenerOption
CSMediaPlayingMonitor
CSAudioInjectionFileOption
CSMSNExceptionManager
CSVolumeMonitor
CSTimerMonitor
CSAlarmMonitor
CSAudioStreamHolding
CSUserIdentityClassifier
CSAssetManagerEnablePolicyFactory
CSAttSiriServiceProtocol
CSAttSiriServiceDelegate
CSAttSiriServiceClient
CSSiriFanInfoManager
CSSiriFanInfo
CSBiometricMatchMonitor
CSPreMyriadVoiceTriggerMetaData
CSPreMyriadCoordinator
CSVoiceTriggerDelegate
CSSecondPassProgressDelegate
CSAudioInjectionHearstEngine
AVVC
SmartSiriVolume
CSAudioDeviceInfo
NSCopying
NSSecureCoding
NSCoding
CSSpeakerRecognitionProxy
CSSSRXPCClientDelegate
CSVoiceTriggerXPCService
CSVoiceTriggerXPCClientDelegate
CSVoiceTriggerAssetDownloadMonitor
CSAsset
CSAudioPreprocessor
CSVoiceTriggerAwareZeroFilterDelegate
CSBeepCancellerDelegate
CSOtherAppRecordingStateMonitor
CSBenchmarkService
CSSmartSiriVolumeEnablePolicyFactory
CSAssetDownloadingOption
CSSmartSiriVolumeEnablePolicyHomePod
CSContinuousAudioFingerprintEnabledPolicyHomePod
CSBluetoothManager
CSHostLauncherDarwin
CSSiriAssertionMonitor
CSXPCConnectionDelegate
CSAccessorySiriClientBehaviorMonitor
CSSpeakerRecognitionAssetDownloadMonitor
CSTrialAssetDownloadMonitorDelegate
CSPowerAssertionMac
CSAudioFileReader
CSAdBlockerAssetDownloadMonitor
CSAudioRouteChangeMonitorImplWatch
CSAudioSampleRateConverter
CSLanguageDetectorAssetMonitor
CSSiriSpeechRecordingContext
CSSmartSiriVolumeService
CSSmartSiriVolumeServiceDelegate
CSSmartSiriVolumeClient
isPluginContext
CSAudioInjectionProvider
XPCObject
CSOpportuneSpeakListener
CSAudioStreamProvidingDelegate
CSSPGEndpointAnalyzerDelegate
CSVoiceIdXPCClient
RMSSample
CSShadowMicScoreCreator
CSBluetoothWirelessSplitterMonitorImpIOS
CSContinuousAudioFingerprintEnabledPolicyFactory
AudioInjectionXPCProtocol
CSVoiceTriggerHeartBeatMetricsProvider
CSNNVADEndpointAnalyzer
CSEndpointAnalyzerImpl
CSEndpointAnalyzer
CSActivationXPCClient
CSLanguageDetector
_EARLanguageDetectorDelegate
CSStartOfSpeechDetectorDelegate
LanguageCode
CSBluetoothWirelessSplitterMonitorImplDarwin
CSStopRecordingOptions
CSMacWakeSleepMonitor
CSMyriadSelfTriggerCoordinator
CSSelfTriggerDetectorDelegate
CSEndpointLoggingHelper
CSEndpointLatencyInfo
CSCommandControlStreamEventMonitor
CSCommandControlBehaviorMonitorDelegate
CSAVVCRecordingClientMonitor
CSAudioServerCrashMonitorDelegate
CSAudioSessionMonitor
CSAudioSessionEventProvidingDelegate
Indexing
CSSiriAudioFileWriter
CSCoreSpeechServices
CSHangUpEnabledMonitor
CSAudioStreamRequest
CSOpportuneSpeakListenerDeviceManager
CSAVVoiceTriggerClientManager
CSSpeechManager
CSVoiceTriggerAssetHandlerDelegate
CSActivationEventNotificationHandlerDelegate
CSAudioRecorderDelegate
CSAudioProviderDelegate
CSOpportuneSpeakEventMonitorDelegate
CSSpeechEndHostTimeEstimator
CSClamshellStateMonitor
CSCommandControlListener
FlexKwd
CSAssetManager
CSVoiceTriggerAssetMetaUpdateMonitorDelegate
CSSpeechEndpointAssetMetaUpdateMonitorDelegate
CSAdBlockerMetaUpdateMonitorDelegate
CSAssetControllerDelegate
CSSpeakerRecognitionAssetMetaUpdateMonitorDelegate
CSLanguageCodeUpdateMonitorDelegate
CSEndpointerXPCService
CSEndpointerXPCServiceDelegate
CSEndpointerXPCClient
NviDirectionalitySignalProvider
NviSignalProvider
CSConnectionListener
NSXPCListenerDelegate
CSConnectionServiceDelegate
CSAudioRecorderFactory
CSVoiceTriggerFirstPassMetrics
CSSpeechController
CSAudioConverterDelegate
CSSmartSiriVolumeControllerDelegate
CSAudioAlertProvidingDelegate
CSAudioSessionControllerDelegate
CSAudioDecoderDelegate
CSEndpointAnalyzerImplDelegate
SOMediaNowPlayingListening
SOClockAlarmListening
SOClockTimerListening
CSAudioSessionProvidingDelegate
CSSpeechManagerDelegate
CSContinuousVoiceTriggerDelegate
CSSSRXPCService
CSSSRXPCServiceDelegate
CSSSRXPCClient
CSAttSiriAttendingTriggerEventInfo
RTModel
CSSiriAudioPlaybackSessionImplAVPlayerBased
CSSiriAudioPlaybackSession
SpeechModelTrainingClient
CSSelfTriggerEnabledMonitorAccessory
CSVoiceTriggerAssetHandlerDarwin
CSRemoteAssetManagerDelegate
CSXPCClientFactory
SpeechModelTrainingProtocol
NviSignalProvidersController
CSVoiceTriggerFirstPassHearstAP
CSXPCClient
CSAudioSessionProviding
CSFallbackAudioSessionReleaseProviding
CSAudioStreamProviding
CSAudioAlertProviding
CSAudioSessionInfoProviding
CSAudioMeterProviding
CSAudioMetricProviding
CSAudioTimeConversionProviding
CSTriggerInfoProviding
CSStateMachine
CSEventMonitor
CSVoiceTriggerStatAggregator
CSDigitalZeroReporting
CSSmartSiriVolumeManager
CSAlarmMonitorDelegate
CSTimerMonitorDelegate
CSVolumeMonitorDelegate
CSAutomaticVolumeEnabledMonitorDelegate
CSVoiceTriggerDataCollector
CSAudioFileLog
CSActivationEvent
CoreSpeechXPCFakeModelMonitor
CSScreenLockMonitor
CSSmartSiriVolumeUserIntent
CSAssetController
CSEventMonitorDelegate
Utils
CSAudioInjectionTvRemoteEngine
CSSiriLauncher
CSVTSecondPassLatencyMetrics
CSHostPowerStateMonitor
CSAudioRouteChangeMonitor
CSSmartSiriVolumeEnablePolicy
CSAudioInjectionRemoraEngine
CSAudioInjectionEngine
AudioHardware
CSVoiceTriggerAssetChangeMonitor
CSAttSiriRequestContext
NviAudioFileWriter
CSVoiceTriggerEnabledPolicyNonAOP
CSBluetoothWirelessSplitterMonitor
CSSiriClientBehaviorMonitor
CSSpeechEndpointAssetMetaUpdateMonitor
CSSmartSiriVolumeEstimate
CSSpeechUaapXPCClient
CSVoiceTriggerAssetHandlerMac
CSVoiceTriggerAssetDownloadMonitorDelegate
CSFirstUnlockMonitorDelegate
CSVoiceTriggerAOPModeEnabledPolicyIOS
CSSiriClientBehaviorMonitorDelegate
CSOpportuneSpeakBehaviorMonitor
CSMyriadPHash
NviConstants
CSSiriAudioActivationInfo
NviUtils
Logging
CSHostPowerSourceMonitor
CSAudioStartStreamOption
CSAssetControllerFactory
CSSiriAudioPlaybackSessionImplAVAudioPlayerBased
AVAudioPlayerDelegate
CSSmartSiriVolumeRunPolicyHomePod
CSContinuousAudioFingerprintEnabledPolicy
CSVoiceTriggerXPCServiceProxy
CSAdBlockerAssetDecoderV2
CSRCHandlingXPCService
CSRCHandlingXPCClient
CSSmartSiriVolumeController
CSSmartSiriVolumeClientDelegate
CSPhraseNDEAPIScorer
CSKeywordAnalyzerNDEAPIScoreDelegate
SpeakerRecognition
CSAudioTandemStream
CSBluetoothDeviceInfo
CSAttSiriStateMonitor
CSSmartSiriVolumeRunPolicyFactory
CSP2PService
CSVoiceTriggerAwareZeroFilter
CSPhoneCallStateMonitor
CSAlwaysDisabledPolicy
CSPostBuildInstallService
CSContinuousAudioFingerprintProvider
CSBuiltinSpeakerStateMonitor
NviDirectionalitySignalData
CSEndpointerMetrics
CSSmartSiriVolume
CSMediaPlayingMonitorDelegate
CSSmartSiriVolumeProcessor
CSVoiceTriggerAssetHandlerFromFile
CSSACInfoMonitor
CSVoiceTriggerRTModel
CSSiriVibrationManager
CSAudioRouteChangeMonitorImpl
CSAutomaticVolumeEnabledMonitor
CSSiriRecordingInfo
CSSpeakerRecognitionAssetMetaUpdateMonitor
CSVoiceProfileRetrainManager
CSVoiceTriggerEnabledMonitor
CSVoiceTriggerSecondPassRequestOption
CSHybridEndpointer
CSEndpointerAssetManagerDelegate
!2!B
CSRemoteRecordClient
CSSiriEnabledMonitor
NviCSAudioDataSource
NviAudioDataSource
NviDataSource
CSAlertBehaviorPredictor
CSDefaultAudioRouteChangeMonitorMac
CSAudioInjectionEngineFactory
CSSiriBluetoothManager
CSEndpointerAssetManager
CSAssetManagerDelegate
CESRTrialAssetDelegate
CSEndpointDelayReporter
CSBenchmarkXPCProtocol
CoreSpeechXPCProtocol
CSActivationEventNotifier
CSLanguageCodeUpdateMonitorImpl
CSVoiceTriggerEventsCoordinator
AudioFile
CSSoftwareUpdateCheckingMonitor
CSPreferences
CSAssetManagerEnablePolicy
CSAttSiriAudioSessionStateClient
AFNotifyObserverDelegate
CSCoreSpeechServiceListenerDelegate
CSVoiceTriggerAOPModeEnabledPolicyFactory
CSBatteryMonitor
Liminal
CSVoiceTriggerAssetMetaUpdateMonitor
CSAudioRecordDeviceIndicator
CSVoiceTriggerEnabledPolicyHelper
CSDarkWakePowerAssertionMac
CSSiriQueueMonitor
_CSSiriQueueObserver
CSAlwaysEnabledPolicy
CSRemoteVADCircularBuffer
CSAdBlockerAssetMetaUpdateMonitor
CSAudioStream
CSSiriAudioSession
CSSiriAudioRoute
CSServerEndpointFeatures
CSActivationEventNotificationHandler
CoreSpeechXPC
CSSiriRestrictionOnLockScreenMonitor
MCProfileConnectionObserver
CSRawAudioInjectionProvider
CSSpringboardStartMonitor
CSAudioProvider
CSAudioPreprocessorDelegate
CSListeningEnabledPolicyWatch
CSAlwaysOnProcessorStateMonitor
CSAdBlockerAssetDecoderFactory
CSMyriadNotifier
CSTUPhoneCallStateMonitor
CSAdBlockerAssetDecoderV1
CSAVCallConnectedMonitor
CSUserSessionActiveMonitor
CSTrialAssetDownloadMonitor
CSRemoteDeviceProtocolInfo
Bitset
CSHybridEndpointAnalyzer
OSDAnalyzerDelegate
8!!!B
CSOpportuneSpeakListenerOption
CSAudioInjectionDevice
CSAudioSessionInfoProvider
CSEndpointerProxy
CSEndpointAnalyzerDelegate
CSSiriMobileBluetoothDeviceDataSource
AFInvalidating
CSSiriMobileBluetoothDeviceProxy
AFBluetoothDevice
CSFirstUnlockMonitor
CSPhraseSpotterEnabledMonitor
CSVoiceIdXPCConnection
NSXPC
CSPhoneCallStateMonitorFactory
CSSiriPreferences
MockRemotePluginXPCProtocol
CSFallbackAudioSessionReleaseProvider
CSSPGEndpointAnalyzer
EARCaesuraSilencePosteriorGeneratorDelegate
CSHomePodSettingsMonitor
CSAudioTapProvider
CSASXSignatureExtracting
CSSiriAcousticFingerprinter
CSLanguageDetectorOption
CSSiriSpeechRecorder
CSSiriAcousticFingerprinterDelegate
CSSpeechControllerDelegate
CSLanguageDetectorDelegate
CSSpeakerIdentificationDelegate
CSSiriSpeechCapturing
CSSiriAudioPlaybackService
AFMemoryPressureListening
AFAudioPlaybackService
CSTrialAssetManager
CSStartOfSpeechDetector
CSAudioServerCrashMonitor
CSAudioServerCrashEventProvidingDelegate
CSVoiceTriggerXPCClient
CSXPCActivity
CSCoreSpeechDaemonStateMonitor
CSNetworkAvailabilityMonitor
CSSpeechDetectionDevicePresentMonitor
CSLanguageCodeUpdateMonitorImplDarwin
CSAttSiriMitigationAssetHandler
CSAudioRecordDeviceInfo
CSOpportuneSpeakListnerTestService
CSOpportuneSpeakListenerDelegate
CSAudioConverter
CSLanguageCodeUpdateMonitor
CSVoiceTriggerEventInfoProvider
CSSmartSiriVolumeRunPolicy
CSAudioInjectionServices
CSRemoteDarwinDeviceInfo
CSAdBlockerAssetDecoderV3
Trial
CSGestureDropEvent
RecordContext
LanguageDetector
debugDescription
remoteVoiceActivityVADBuffer
CSAudioRecorder
AVVoiceControllerRecordDelegate
CSAudioFileReaderDelegate
CSRemoteRecordClientDelegate
CSUserSessionActiveMonitorDelegate
CSAudioServerCrashEventProviding
CSAudioSessionEventProviding
CSCommandControlBehaviorMonitor
CSVoiceProfileContext
NviContext
CSEndpointerFactory
CSJarvisTriggerModeMonitor
CSOpportuneSpeakEventMonitor
CSOpportuneSpeakBehaviorMonitorDelegate
NviSignalData
CSSRFUserSettingMonitor
SSVCADBToTTSPreTransitionOffset
.cxx_destruct
SSVLKFSTTSMappingInputRangeHigh
CSAdBlockerMetaUpdateMonitor:didReceiveNewAdBlockerAssetMetaData:
SSVNoiseTTSMappingInputRangeLow
CSAlwaysOnProcessorStateMonitor:didReceiveStateChange:
T@"CSLanguageCodeUpdateMonitor",&,N,V_languageCodeUpdateMonitor
CSAssetManagerDidDownloadNewAsset:
T@"CSSelectiveChannelAudioFileWriter",&,N,V_serverLoggingWriter
CSAudioServerCrashMonitorDidReceiveServerCrash:
T@"CSXPCClient",&,N,V_xpcClient
CSAutomaticVolumeEnabledMonitor:didReceiveEnabled:
T@"NSHashTable",&,N,V_observers
CSBuiltinSpeakerStateMonitor:didReceiveBuiltinSpeakerStateChange:
T@"NSObject<OS_dispatch_queue>",&,N,V_mediaPlayingObserverQueue
CSEventMonitorDidReceiveEvent:
T@"NSString",&,N,V_languageCode
CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:
T@"NSString",&,N,V_overridePath
CSMyriadSelfTriggerCoordinator:didGenerateMyriadPHashForSelfTrigger:
T@"NSString",R,N,V_assetVersion
CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:
T@"NSString",R,N,V_debugLogPath
CSRemoteAssetManagerDidDownloadNewAsset:
TB,N,V_canProcessCurrentRequest
CSSiriEnabledMonitor:didReceiveEnabled:
TB,N,V_epResult
CSSoftwareUpdateCheckingMonitor:didReceiveStateChanged:
TB,N,V_requiresHistoricalBuffer
CSSpeakerRecognitionAssetMetaUpdateMonitor:didReceiveNewSpeakerRecognitionAssetMetaData:
TQ,N,V_audioPacketDeliveryCount
CSSpringboardStartMonitor:didReceiveStarted:
TQ,N,V_dataBufferPositionNDEAPI
CSVoiceTriggerAssetDownloadMonitor:didInstallNewAsset:
TQ,N,V_sigGenTs
CSVoiceTriggerEnabledMonitor:didReceiveEnabled:
Td,R,N,V_activationSystemUptime
CSVoiceTriggerXPCServiceProxy:bypassPhraseSpotter:
CSVolumeMonitor:didReceiveAlarmVolumeChanged:
_activationMode
CSXPCClient:didDisconnect:
_assertionState
JSONObjectWithData:options:error:
_attSiriSvcConn
RTModelWithFallbackLanguage:
_audioConverter
SSVCADBToTTSMaximumOutput
_audioProviders
SSVCADBToTTSPostTransitionDC
_azDistribution
SSVCADBToTTSPostTransitionOffset
_bundleTvRemote
SSVCADBToTTSTransitionPoint
_calculateNumberOfVoicingFrames
SSVCADefaultMusicStrength
_circularBufferStartSampleCount
SSVCADefaultSpeechStrength
_clearPendingRemoraVoiceTrigger
SSVCADeviceDefaultASVOffMinTTSVolume
_convertDB2Mag:
SSVCADeviceDefaultMicSensitivityOffset
_createLanguageDetectorIfNeeded
SSVCADeviceSimpleASVOffMinTTSVolume
_currentMHUUID:
SSVCADeviceSimpleMaxTTSVolume
_delete
SSVCADeviceSimpleMicSensitivityOffset
_deviceCategory
SSVCADeviceSimpleMinTargetDB
_encoderBitRate
SSVCADeviceSimpleOutputMinTargetDB
_fetchAudioProviderWithContext:
SSVCADeviceSimplePreTriggerSilenceSampleCount
SSVCADistanceModelConfidenceThreshold
_getDeviceInfo:
SSVCADistanceResultsBufferSize
_historicalBufferRequestStreams
SSVCADspCoefsCount
_hostTimeBuffer
SSVCAExponentialDistanceHistoryDegradationFactor
_initWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:
SSVCAListenPollingIntervalAtStartInSeconds
_interleavedABL
SSVCAMaxTTSSystemVolume
_isEndAlertInfo
SSVCAMaximumLinearSoundLevel
_isHubRequestTV
SSVCAMinimumDistanceUpdateWaitPeriodSeconds
_isOpus
SSVCAMusicHistoricalSamplesInSeconds
_isSiri
SSVCANoiseActivityCountThreshold
_isSoundPlaying
SSVCANoiseActivityThreshold
_isSpeechDetectionDevicePresent
SSVCASignalToSigmoidMusicDilationFactorDeviceDefault
_isTimerPlaying
SSVCASignalToSigmoidMusicHOffsetDeviceDefault
_lastAudioRecordBufferStartTime
SSVCASignalToSigmoidMusicSteepnessDeviceDefault
_mediaIsPlaying
SSVCASignalToSigmoidMusicVOffsetDeviceDefault
_needsBoost12dB
SSVCASignalToSigmoidMusicVSpreadDeviceDefault
_notifyObserver:isSpeakerMuted:
SSVCASignalToSigmoidNoiseDilationFactor
_numFalseWakeUp
SSVCASignalToSigmoidNoiseSteepness
_phoneCallState
SSVCASignalToSigmoidNoiseVSpread
_processRemoteHeySiriCommandWithRequest:fromSenderID:withReply:
SSVCASignalToSigmoidSpeechHOffset
_remoteSvcProxy
SSVCASignalToSigmoidSpeechVOffset
_rtsTriggerInfo
SSVCASmartSiriVolumeSyncedMetricLogsToRetain
_secondPassAudioStreamReadyTime
SSVCASpeakerDistanceFarBoostFactor
_shadowMicScore
SSVCASpeakerDistanceNearBoostFactor
_shouldUseSoundPlaybackMonitors
SSVCAUserIntentPermanentOffsetFactorLowerBound
_source
SSVCAUserIntentValidForSeconds
_startObservingAudioRouteChange
SSVCAUserIntentVolumeIncreaseFactor
_streamHandleId
SSVCAVoiceTriggerInitialSilenceDurationSeconds
_timeoutHandler
SSVDefaultDistanceChannelCount
_updateAssetWithCurrentLanguage
SSVDefaultNoiseChannelCount
_userIntentType
SSVEnergyBufferSize
_volumeEstimate
SSVLKFSLowerPercentile
activateAudioSessionWithReason:dynamicAttribute:bundleID:error:
SSVLKFSTTSMappingInputRangeLow
activationEvent
SSVLKFSTimeConstant
address
SSVNoiseLevelChannelBitset
allKeys
SSVNoiseMicSensitivityOffset
appName
SSVNoiseTTSMappingInputRangeHigh
audioAlertStyle
SSVNoiseTTSMappingOutputRangeLow
audioDeviceInfo
SSVNoiseUpperPercentile
audioInputRoute
SSVParameterDirectionary
audioStreamType
SSVTTSVolumeUpperLimitDB
base64EncodedStringWithOptions:
SSVUserOffsetInputRangeLow
beginMonitoring
SSVUserOffsetOutputRangeLow
bluetoothDevice
T@"<AFBluetoothDevice>",R,N,V_bluetoothDevice
bundleForClass:
T@"<CSAttSiriServiceDelegate>",W,N,V_delegate
canEnterTwoShot
T@"<CSAudioAlertProviding>",&,N,V_alertProvider
clientSilenceFeaturesAvailable:
T@"<CSAudioAlertProvidingDelegate>",W,N,V_audioAlertProvidingDelegate
connectedDevice
T@"<CSAudioFileReaderDelegate>",W,N,V_delegate
containsString:
T@"<CSAudioMeterProviding>",&,N,V_audioMeterProvider
curSpeechFrames
T@"<CSAudioPreprocessorDelegate>",W,N,V_delegate
currentKeyboard
T@"<CSAudioServerCrashEventProvidingDelegate>",W,N,V_crashEventDelegate
dataForChannel:
T@"<CSAudioSessionInfoProviding>",&,N,V_sessionInfoProvider
dealloc
T@"<CSAudioSessionProviding>",&,N,V_sessionProvider
didDetectSpeech
T@"<CSAudioSessionProvidingDelegate>",W,N,V_sessionDelegate
enabled
T@"<CSAudioStreamProviding>",&,N,V_streamProvider
endpointerProxy
T@"<CSAudioStreamProvidingDelegate>",W,N,V_audioStreamProvidingDelegate
fileURL
T@"<CSBiometricMatchMonitorDelegate>",W,N,V_delegate
firstAudioSampleSensorTimestamp
T@"<CSConnectionServiceDelegate>",W,N,V_delegate
firstPktLatency
T@"<CSEndpointAnalyzerDelegate>",W,N
getBoolForKey:category:default:
T@"<CSEndpointAnalyzerDelegate>",W,N,V_endpointerDelegate
getPlaybackStateWithCompletion:
T@"<CSEndpointAnalyzerImpl>",&,N,V_hybridEndpointer
hearstConnected
T@"<CSEndpointAnalyzerImpl>",W,N,V_activeEndpointer
initWithAudioSessionController:
T@"<CSEndpointAnalyzerImplDelegate>",W,N,V_endpointerImplDelegate
initWithFormat:
T@"<CSEndpointAnalyzerImplDelegate>",W,N,VimplDelegate
initWithMasterAudioStream:name:
T@"<CSLanguageDetectorDelegate>",W,N,V_delegate
initWithQueue:heartBeatInterval:timeoutInterval:timeoutHandler:
T@"<CSOpportuneSpeakListenerDelegate>",W,N,V_delegate
initWithSamplingRate:withAsset:
T@"<CSRemoteRecordClientDelegate>",W,N,V_delegate
injectAudio:withScaleFactor:outASBD:playbackStarted:completion:
T@"<CSSSRXPCClientDelegate>",W,N,V_delegate
injectionEngine
T@"<CSSecondPassProgressProviding>",W,N,V_remoraSecondPassProgressProvider
isActiveSession
T@"<CSSmartSiriVolumeClientDelegate>",W,N,V_delegate
isFirstUnlocked
T@"<CSSmartSiriVolumeProcessor>",&,N,V_smartSiriVolume
isPluginContext
T@"<CSSpeakerRecognitionProxyProtocol>",R,W,N,V_delegate
isRecordContextHearstDoubleTap:
T@"<CSSpeechManagerDelegate>",W,N,V_clientController
isServerInvoked
T@"<CSStateMachineDelegate>",W,N,V_delegate
itemURL
T@"<CSVoiceTriggerAwareZeroFilterDelegate>",W,N,V_delegate
kSSVCAUserIntentValidForSeconds
T@"<CSVoiceTriggerXPCClientDelegate>",W,N,V_delegate
keywordDetectorDidDetectKeyword
T@"<NviAssetsProvider>",&,N,V_assetsProvider
lastSampleCount
T@"AFAudioPlaybackRequest",R,N,V_request
lowercaseString
T@"AFNotifyObserver",&,N,V_siriStateObserver
metrics
T@"AVVoiceTriggerClient",&,N,V_alwaysOnProcessorController
mitigationModelDefaultAFTMScore
T@"CSActivationEvent",&,N,V_pendingActivationEvent
myriadPreventingTwoShotFeedback
T@"CSAsset",&,N,V_currentHEPAsset
nnvadEndpointer
T@"CSAsset",&,V_cachedAsset
numChannelsForNviDirectionality
T@"CSAttSiriRequestContext",C,N,V_ctx
numberWithBool:
T@"CSAudioCircularBuffer",&,N,V_circBuffer
oStream
T@"CSAudioConverter",&,N,V_encoder
options
T@"CSAudioInjectionDevice",&,N,V_builtInDevice
outputs
T@"CSAudioInjectionDevice",W,N,V_connectedDevice
overrideEnabled
T@"CSAudioInjectionEngine",W,N,V_injectionEngine
pendingRemoraVoiceTriggerResult
T@"CSAudioPowerMeter",&,N,V_powerMeter
preheatLanguage
T@"CSAudioRecordContext",&,N,V_audioRecordContext
prewarm
T@"CSAudioRecordContext",&,N,V_latestContext
protocolVersion
T@"CSAudioRecordContext",R,N,V_recordContext
receiveOnlyProcessedChannelData
T@"CSAudioRecordDeviceInfo",R,C,N,V_recordDeviceInfo
registerPostBuildInstallService
T@"CSAudioRecorder",&,N,V_audioRecorder
release
T@"CSAudioSessionController",&,N,V_audioSessionController
removeDelegate:
T@"CSAudioStream",&,N,V_audioStream
removeObserver:
T@"CSAudioStreamRequest",&,N,V_streamRequest
reportMHEndpointerAccessibleContextEventWithThresholdType:MhId:
T@"CSAudioTimeConverter",&,N,V_audioTimeConverter
request
T@"CSAudioZeroFilter",&,N,V_zeroFilter
results
T@"CSEndpointerProxy",&,N,V_endpointerProxy
secondPassAssetLoadCompleteTime
T@"CSFirstUnlockMonitor",&,N,V_firstUnlockMonitor
sessionDelegate
T@"CSKeywordAnalyzerNDEAPI",&,N,V_keywordAnalyzer
T@"CSLanguageDetector",&,N,V_languageDetector
setAlwaysOnProcessorController:
T@"CSOSTransaction",&,N,V_recordingTransaction
setAudioAlertProvidingDelegate:
T@"CSPhoneCallStateMonitor",&,N,V_phoneCallStateMonitor
setAudioFormat:
T@"CSPostBuildInstallService",&,N,V_postBuildInstallService
setAudioStream:
T@"CSRCHandlingXPCClient",&,N,V_rcHandlingClient
setBuiltInVoiceTriggerMetaData:
T@"CSSPGEndpointAnalyzer",&,N,V_spgEndpointAnalyzer
setCircularBufferStartHostTime:
T@"CSServerEndpointFeatures",&,N,V_lastKnownServerEPFeatures
setDidAddAudio:
T@"CSSiriAssertionMonitor",&,N,V_assertionMonitor
setEndWaitTime:
T@"CSSmartSiriVolumeController",&,N,V_volumeController
setHearstFirstPassModelVersion:
T@"CSSpeechEndHostTimeEstimator",&,N,V_speechEndHostTimeEstimator
setIsConnected:
T@"CSStopRecordingOptions",&,N,V_requestedStopRecordingOptions
setIsRecording:
T@"CSTrialAssetDownloadMonitor",&,N,V_trialAssetMonitor
setKeyboardConvoLanguagePriors:
T@"CSTrialAssetManager",&,N,V_trialAssetManager
setLpcmIsFloat:
T@"CSVoiceTriggerAssetDownloadMonitor",&,N,V_voiceTriggerAssetDownloadMonitor
setNumChannels:
T@"CSVoiceTriggerFirstPassMetrics",R,N,V_firstpassMetrics
setOpportuneSpeakListeningType:
T@"CSVolumeMonitor",&,N,V_volumeMonitor
setPauseCounts:
T@"CSXPCClientFactory",&,N,V_xpcClientFactory
setRecordQueue:
T@"EARCaesuraSilencePosteriorGenerator",&,N,V_caesuraSPG
setSecondChanceHotTillMachTime:
T@"NSArray",&,N,V_conversationalMessages
setServerFeaturesWarmupLatency:
T@"NSArray",&,N,V_multilingualKeyboardLanguages
setSiriCueType:
T@"NSArray",&,N,V_spatialSpectrumData
setStartSample:
T@"NSArray",R,C,N,V_playbackDeviceTypeList
setSupportDoAP:
T@"NSData",C
setSupportSessionActivateDelay:
T@"NSData",R,N,V_digest
setTargetSpeed:
T@"NSData",R,N,V_signature
setTriggerMode:
T@"NSDate",&,N,V_lastServerFeatureTimestamp
setUserSpeakingStartedHostTime:
T@"NSDictionary",&,N,V_asrDatapackInstallationStatus
setWithObjects:
T@"NSDictionary",&,N,V_csAssetsDictionary
setupConnection
T@"NSDictionary",&,N,V_dictationLanguagePriors
sigProvidersMap
T@"NSDictionary",&,N,V_keyboardGlobalLanguagePriors
siriInputSource
T@"NSDictionary",&,N,V_pendingRemoraVoiceTriggerResult
smartSiriVolume
T@"NSDictionary",&,N,V_speakerRecognitionScores
splitterEnabled
T@"NSDictionary",&,N,V_voiceTriggerInfo
startMonitoring
T@"NSDictionary",R,C,N,V_activationMetadata
startRecording:
T@"NSDictionary",R,N,V_activationInfo
stopAudioStream
T@"NSDictionary",R,N,V_voiceTriggerEventInfo
stringByAppendingPathComponent:
T@"NSHashTable",&,N,V_audioSessionInfoObservers
stringFromDate:
T@"NSHashTable",&,N,V_currActiveSigProvTypes
timeStampString
T@"NSHashTable",&,N,V_startPendingOnStoppingStreams
trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:
T@"NSHashTable",&,N,V_stopPendingStreams
T@"NSHashTable",R,N,V_tandemStreams
updateEndpointerDelayedTrigger:
T@"NSMapTable",&,N,V_sigProvidersMap
version
T@"NSMutableArray",&,N,V_clientConnections
.cxx_construct
SSVCAHistoricalVolumeBufferSize
CSAdBlockerAssetDownloadMonitor:didInstallNewAsset:assetProviderType:
SSVLKFSTTSMappingOutputRangeLow
CSAlarmMonitor:didReceiveAlarmChanged:
T@"<CSLanguageDetectorDelegate>",W,N,V_languageDetectorDelegate
CSAssetController:didDownloadNewAssetForType:
T@"CSPolicy",&,N,V_enablePolicy
CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:
T@"CSTrialAssetDownloadMonitor",&,N,V_trialAssetDownloadMonitor
CSAudioServerCrashMonitorDidReceiveServerRestart:
T@"NSArray",R,N
CSBluetoothWirelessSplitterMonitor:didReceiveSplitterStateChange:shouldDisableSpeakerVerificationInSplitterMode:
T@"NSHashTable",&,N,V_receivers
CSClamshellStateMonitor:didReceiveClamshellStateChange:
T@"NSObject<OS_xpc_object>",R,N
CSFirstUnlockMonitor:didReceiveFirstUnlock:
T@"NSString",&,N,V_logEventUUID
CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:
T@"NSString",R,C,N,V_deviceName
CSNetworkAvailabilityMonitor:didReceiveNetworkAvailabilityChanged:
T@"NSString",R,N,V_buildVersion
CSPhraseSpotterEnabledMonitor:didReceiveEnabled:
T@"NSUUID",&,N,V_turnIdentifier
CSSiriAssertionMonitor:didReceiveEnabled:
TB,N,V_didReceiveServerFeatures
CSSiriRestrictionOnLockScreenMonitor:didReceiveRestrictionChanged:
TB,N,V_permanentOffsetIsEnabled
CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:
TB,N,V_triggeredTwoShotBorealis
CSSpeechEndpointAssetMetaUpdateMonitor:didReceiveNewSpeechEndpointAssetMetaData:
TQ,N,V_currentRequestSampleRate
CSTimerMonitor:didReceiveTimerChanged:
TQ,N,V_lastForwardedSampleCount
CSVoiceTriggerAssetMetaUpdateMonitor:didReceiveNewVoiceTriggerAssetMetaData:
Td,N,V_RMSScore
CSVoiceTriggerFirstPassMetricsWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:
Tf,N,V_currentMaximumBufferSize
CSVoiceTriggerXPCServiceProxy:bypassRaiseToSpeak:
_activationInfo
CSVolumeMonitor:didReceiveMusicVolumeChanged:
_allowAdBlockerAssetDownloading
CSXPCConnectionReceivedClientError:clientError:client:
_assetsProvider
RMSScore
_attendingState
SSVCAAnnouncementStatusFetchTimeoutMs
_audioFeedTimer
SSVCADBToTTSMinimumOutput
_audioSessionID
SSVCADBToTTSPostTransitionMultiplier
_bufferDuration
SSVCADBToTTSPreTransitionMultiplier
_cachedAvgPower
SSVCADecibelToLinearLogBase
_circularBuffer
SSVCADefaultOutputTTSVolume
_clampedSFLatencyMsForClientLag
SSVCADefaultZeroFloatingPointValue
_closeAudioFile
SSVCADeviceDefaultMaxTTSVolume
_createDirectoryIfDoesNotExist:
SSVCADeviceDefaultMinTTSVolume
_currentAudioRecorderSampleRate
SSVCADeviceSimpleDBToSystemVolSlope
_defaultOutASBD
SSVCADeviceSimpleMaxTargetDB
_device
SSVCADeviceSimpleMinTTSVolume
_digest
SSVCADeviceSimpleOutputMaxTargetDB
_endpointerType
SSVCADeviceSimpleOutputSlope
_fetchDeviceInfoWithCompletion:
SSVCADistanceInputBufferDurationSeconds
_gestureManager
SSVCADistanceResultSampleCountTolerance
_headsetAddress
SSVCADropInCallAnnouncementMinTTSVolume
_homeId
SSVCADspNumStages
_inASBD
SSVCALinearToDecibelConstantMultiplier
_inputRecordingNumberOfChannels
SSVCAMaxFrameSize
_isAlarmPlaying
SSVCAMaximumCompensatedSpeechLevelNearField
_isHearstRouted
SSVCAMinTTSSystemVolume
_isMediaPlaying
SSVCAMinimumLinearSoundLevel
_isRemoteDevice
SSVCAMusicResultsBufferSize
_isSiriClientConsideredAsRecord
SSVCANoiseActivityHistoricalSampleCount
_isSpeakerMuted
SSVCANoiseResultsBufferSize
_isTemporaryPairedNotInContacts
SSVCASignalToSigmoidMusicDilationFactorDeviceSimple
_iterateSignalMask:withHandler:
SSVCASignalToSigmoidMusicHOffsetDeviceSimple
_logRecordingStopErrorIfNeeded:
SSVCASignalToSigmoidMusicSteepnessDeviceSimple
_mhUUID
SSVCASignalToSigmoidMusicVOffsetDeviceSimple
_noiseTTSMappingOutputRangeHigh
SSVCASignalToSigmoidMusicVSpreadDeviceSimple
_notifyObserver:withRestricted:
SSVCASignalToSigmoidNoiseHOffset
_nviCtx
SSVCASignalToSigmoidNoiseVOffset
_player
SSVCASignalToSigmoidSpeechDilationFactor
_recordingState
SSVCASignalToSigmoidSpeechSteepness
_reqSrc
SSVCASignalToSigmoidSpeechVSpread
_sacInfoMonitor
SSVCASmartSiriVolumeUnsyncedMetricLogsToRetain
_secondPassAudioStreamStartTime
SSVCASpeakerDistanceMidBoostFactor
_shouldCheckNetworkAvailability
SSVCAUserIntentPermanentOffsetFactorDelta
_signalEstimate
SSVCAUserIntentPermanentOffsetFactorUpperBound
_ssvLogFilePath
SSVCAUserIntentVolumeDecreaseFactor
_stopMonitoring
SSVCAVoiceTriggerBasedTTSValidForSeconds
_streamProvider
SSVCAVolumeHalfLifeSeconds
_turnIdentifier
SSVDefaultLKFSChannelCount
_userIntentTime
SSVDistanceChannelBitset
_voiceIdentificationTraining_withoutResultCandidateSharedUserId
SSVLKFSChannelBitset
_xpcClientQueue
SSVLKFSMicSensitivityOffset
activateEndTime
SSVLKFSTTSMappingOutputRangeHigh
activationEventMachAbsoluteTime
SSVLKFSUpperPercentile
alertPlaybackFinishTimeoutToken
SSVNoiseLowerPercentile
apQueue
SSVNoiseMicSensitivityOffsetDeviceSimple
assetQueryQueue
SSVNoiseTTSMappingOutputRangeHigh
audioChunkToEndFrom:channelIdx:
SSVNoiseTimeConstant
audioFileWriter
SSVNoiseWeight
audioProviderWithContext:error:
SSVTTSVolumeLowerLimitDB
azimuth
SSVUserOffsetInputRangeHigh
baseDir
SSVUserOffsetOutputRangeHigh
bestEnd
T#,R
buildPhoneticMatchWithLanguage:saveIntermediateFsts:completion:
T@"<CSADCompanionServiceProvider>",W,N,V_adCompanionServiceProvider
cachedPeakPower
T@"<CSAttSiriSessionStateDelegate>",R,W,N,V_delegate
canGetPCMStream
T@"<CSAudioAlertProvidingDelegate>",W,N,V_alertDelegate
connect
T@"<CSAudioConverterDelegate>",W,V_delegate
containsObject:
T@"<CSAudioInjectionEngineDelegate>",W,N,V_delegate
T@"<CSAudioMetricProviding>",&,N,V_audioMetricProvider
currentHEPAsset
T@"<CSAudioProviderDelegate>",W,N,V_providerDelegate
currentOEPAsset
T@"<CSAudioSessionEventProvidingDelegate>",W,N,V_sessionEventDelegate
dataWithLength:
T@"<CSAudioSessionProviding>",&,N,V_audioSessionProvider
deviceIsInSleep
T@"<CSAudioSessionProvidingDelegate>",W,N,V_audioSessionProvidingDelegate
eagerlyInitializeAudioRecording
T@"<CSAudioStreamProviding>",&,N,V_audioStreamProvider
encoder
T@"<CSAudioStreamProviding>",W,N,V_streamProvider
fadeOutDuration
T@"<CSAudioStreamProvidingDelegate>",W,N,V_delegate
finalFilteredDictationLanguages
T@"<CSCommandControlListenerDelegate>",W,N,V_delegate
firstPassSource
T@"<CSEndpointAnalyzer>",R,N
getBTLocalDeviceWithCompletion:
T@"<CSEndpointAnalyzerDelegate>",W,N,V_delegate
getBytes:range:
T@"<CSEndpointAnalyzerDelegate>",W,N,Vdelegate
getVoiceTriggerEndSecsFromVTEI:
T@"<CSEndpointAnalyzerImpl>",&,N,V_nnvadEndpointer
initForSidekick
T@"<CSEndpointAnalyzerImplDelegate>",W,N
initWithDouble:
T@"<CSEndpointAnalyzerImplDelegate>",W,N,V_implDelegate
initWithLength:
T@"<CSLanguageDetectorAssetMonitorDelegate>",W,N,V_delegate
initWithNSUUID:
T@"<CSMyriadSelfTriggerCoordinatorDelegate>",W,N,V_delegate
initWithRequestId:languageCode:
T@"<CSPhraseNDEAPIScorerDelegate>",W,N,V_delegate
initWithString:
T@"<CSSPGEndpointAnalyzerDelegate>",W,N,V_delegate
injectionCompletionNotifyBlocks
T@"<CSSecondPassProgressProviding>",W,N,V_builtInSeconPassProgressProvider
isActiveRequest
T@"<CSSiriAcousticFingerprinterDelegate>",W,N,V_delegate
isAlwaysOnVoiceTriggerAvailable
T@"<CSSmartSiriVolumeControllerDelegate>",W,N,V_delegate
isNarrowBandWithStreamHandleId:
T@"<CSSpeakerIdentificationDelegate>",W,N,V_speakerIdDelegate
isProxy
T@"<CSSpeechControllerDelegate>",W,N,V_delegate
isRecordContextHomeButtonPress:
T@"<CSStartOfSpeechDetectorDelegate>",W,N,V_delegate
isSoftwareUpdateCheckingRunning
T@"<CSVoiceTriggerAssetChangeDelegate>",W,N,V_delegate
jarvisConnected
T@"<CSVoiceTriggerDelegate>",W,N,V_delegate
keywordAnalyzer
T@"<CSXPCClientDelegate>",W,N,V_delegate
languageDetectorSupportedLocale
T@"AFAudioPlaybackRequest",R,N
logMHAssistantDaemonAudioInitContextWithMHUUID:withInitStarted:
T@"AFLanguageDetectionUserContext",R,C,N,V_languageDetectionUserContext
machServiceName
T@"AFSpeechRecordingAlertPolicy",R,N,V_speechRecordingAlertPolicy
minSpeechFrames
T@"CSADPPreventStandbyAssertion",&,N,V_adpAssertion
monitor
T@"CSAsset",&,N,V_currentAsset
newWithBuilder:
T@"CSAsset",&,N,V_currentOEPAsset
notifyObserver:
T@"CSAssetManager",&,N,V_assetManager
numOfValidTrailingSpeechPackets
T@"CSAudioCircularBuffer",&,N,V_audioLoggingBuffer
numberWithLong:
T@"CSAudioCircularBuffer",&,N,V_circularBuffer
opaqueSessionID
T@"CSAudioDeviceInfo",&,N,V_audioDeviceInfo
outASBD
T@"CSAudioInjectionDevice",&,N,V_bundleTvRemote
overrideAudioSessionActiveDelay
T@"CSAudioInjectionEngine",&,N,V_builtInAudioInjectionEngine
packets
T@"CSAudioInjectionFileOption",&,N,V_fileOption
preheat
T@"CSAudioPreprocessor",&,N,V_audioPreprocessor
prepareForMode:
T@"CSAudioRecordContext",&,N,V_lastAudioRecorderContext
productCategory
T@"CSAudioRecordContext",&,N,V_recordContext
rcXPCConnection
T@"CSAudioRecordDeviceIndicator",&,N,V_recordDeviceIndicator
recordEventUUID
T@"CSAudioRecordDeviceInfo",R,N,V_deviceInfo
rejectionMHUUID
T@"CSAudioSampleRateConverter",&,N,V_upsampler
remoteDeviceUID
T@"CSAudioStartStreamOption",&,N,SsetStartStreamOption:,V_startStreamOption
removeListener:
T@"CSAudioStream",W,N,V_primaryStream
removeReceiver:
T@"CSAudioTapProvider",&,N,V_audioTapProvider
reportMicUsage:
T@"CSAudioZeroCounter",&,N,V_zeroCounter
resetEndpointer
T@"CSBeepCanceller",&,N,V_beepCanceller
sampleByteDepth
T@"CSFallbackAudioSessionReleaseProvider",&,N,V_fallbackAudioSessionReleaseProvider
selectedChannel
T@"CSKeywordAnalyzerNDAPI",&,N,V_keywordAnalyzer
sessionProvider
T@"CSKeywordAnalyzerNDEAPI",&,N,V_keywordAnalyzerNDEAPI
setAccessibleEndpointerEnabled:
T@"CSMicUsageReporter",&,N,V_micUsageReporter
setAlwaysOnVoiceTriggerEnabled:
T@"CSOpportuneSpeakListnerTestService",&,N,V_opportuneSpeakListnerTestService
setAudioBuffer:
T@"CSPlainAudioFileWriter",&,N,V_audioFileWriter
setAudioSessionActivationDelay:
T@"CSPreMyriadVoiceTriggerMetaData",&,N,V_builtInVoiceTriggerMetaData
setBuiltInAudioInjectionEngine:
T@"CSSACInfoMonitor",&,N,V_sacInfoMonitor
setCachedAsset:
T@"CSSSRXPCClient",&,N,V_ssrXPCClient
setCtx:
T@"CSShadowMicScoreCreator",&,N,V_shadowMicScoreCreator
setDidDeliverFirstSpeechPacket:
T@"CSSmartSiriVolumeClient",&,N,V_ssvClient
setHasReported:
T@"CSSmartSiriVolumeManager",&,N,V_ssvManager
setIsAttachingBluetoothSession:
T@"CSStartOfSpeechDetector",&,N,V_startOfSpeechDetector
setIsListening:
T@"CSTrialAssetDownloadMonitor",&,N,V_monitor
setIsStreaming:
T@"CSTrialAssetDownloadMonitor",&,N,V_trialDownloadMonitor
setLocalDevice:
T@"CSUncompressedAudioLogging",&,N,V_uncompressedAudioLogging
setNotifyToken:
T@"CSVoiceTriggerAwareZeroFilter",&,N,V_zeroFilter
setOnboardType:
T@"CSVoiceTriggerXPCClient",&,N,V_xpcClient
setOsdAnalyzer:
T@"CSXPCClient",&,N,V_duckAudioXPCClient
setPayloadData:
T@"CoreSpeechXPCFakeModelMonitor",&,N,V_fakeAssetMonitor
setScaleFactor:
T@"NSArray",&,N,V_connectedDeviceAddresses
setSelfTriggerEnabledAccessory:
T@"NSArray",&,N,V_featuresAtEndpoint
setServerState:
T@"NSArray",&,N,V_pairedDeviceAddresses
setStartRecordingWatchDogToken:
T@"NSArray",C,N,V_pauseCounts
setStreamState:
T@"NSData",&,N,V_payloadData
setSupportLazySessionActivtion:
T@"NSData",R,N,V_certificate
setTargetQueue:
T@"NSData",R,N,V_modelData
setTransitions:
T@"NSDate",&,N,V_firstAudioPacketTimestamp
setUseCustomizedRecordSettings:
T@"NSDictionary",&,N,V_additionalMetrics
setUserSpeakingStartedTimeInMs:
T@"NSDictionary",&,N,V_azDistribution
setZeroCounter:
T@"NSDictionary",&,N,V_dataSrcMap
sharedAnalytics
T@"NSDictionary",&,N,V_keyboardConvoLanguagePriors
sigType
T@"NSDictionary",&,N,V_pendingBuiltInVoiceTriggerResult
siriSessionUUID
T@"NSDictionary",&,N,V_serverFeatureLatencyDistribution
speechCapturing:didDetectLanguage:confidenceScores:isConfident:
T@"NSDictionary",&,N,V_taskThresholdMap
startController
T@"NSDictionary",C,N,V_rtsTriggerInfo
startOfSpeechDetectorConfigFile
T@"NSDictionary",R,N
startWithQueue:
T@"NSDictionary",R,N,V_firstPassTriggerInfo
streams
T@"NSHashTable",&,N,V_alertPlaybackFinishWaitingStreams
stringByAppendingPathExtension:
T@"NSHashTable",&,N,V_currActiveDataSourceTypes
supportRemoteDarwinVoiceTrigger
T@"NSHashTable",&,N,V_historicalBufferRequestStreams
timeoutDetected
T@"NSHashTable",&,N,V_startPendingStreams
triggerMachTime
T@"NSHashTable",&,N,V_streams
updateDeviceId:
T@"NSMapTable",&,N,V_delegates
usePrelistening
T@"NSMutableArray",&,N,V_alertPlaybackFinishWaitingCompletions
wakeGestureManager:didUpdateWakeGesture:orientation:detectedAt:
T@"NSMutableArray",&,N,V_connectedDevices
T@"NSMutableArray",&,N,V_hostTimeBuffer
T@"NSMutableArray",&,N,V_injectionAudioFileList
T@"NSMutableArray",&,N,V_injectionCompletionNotifyBlocks
T@"NSMutableArray",&,N,V_injectionStartNotifyBlocks
T@"NSMutableArray",&,N,V_latestDetectedLanguages
T@"NSMutableArray",&,N,V_pendingStartCompletions
T@"NSMutableArray",&,N,V_pendingStopCompletions
T@"NSMutableArray",&,N,V_remoteVADAlignBuffer
T@"NSMutableArray",&,N,V_rmsSamplesForEntireAudio
T@"NSMutableArray",&,N,V_serverFeatureLatencies
T@"NSMutableArray",&,N,V_streamHolders
T@"NSMutableArray",&,N,V_trailingPktLatencies
T@"NSMutableArray",&,N,V_trailingPktSpeechLatencies
T@"NSMutableData",&,N,V_audioBuffer
T@"NSMutableData",&,N,V_dataBufferNDEAPI
T@"NSMutableDictionary",&,N,V_accessoryVoiceTriggerMetaDataByDeviceId
T@"NSMutableDictionary",&,N,V_audioInjectionEngines
T@"NSMutableDictionary",&,N,V_audioProviders
T@"NSMutableDictionary",&,N,V_decodersForTV
T@"NSMutableDictionary",&,N,V_eventToStateTransitions
T@"NSMutableDictionary",&,N,V_falseWakePhraseDictionary
T@"NSMutableDictionary",&,N,V_inUseServices
T@"NSMutableDictionary",&,N,V_observers
T@"NSMutableDictionary",&,N,V_startPendingOnStoppingStreamToCompletionDict
T@"NSMutableDictionary",&,N,V_transitions
T@"NSMutableDictionary",&,V_cachedEndpointAssets
T@"NSMutableDictionary",R,N,V_shouldResetAdsDictionary
T@"NSMutableSet",&,N,V_activationAssertions
T@"NSMutableSet",&,N,V_remoteAccessoryStreamIdSet
T@"NSNumber",&,N,V_version
T@"NSNumber",R,N,V_firstPassInfoGeneratedTime
T@"NSNumber",R,N,V_firstPassInfoProcessedTime
T@"NSObject<OS_dispatch_group>",&,N,V_bluetoothSessionSetupGroup
T@"NSObject<OS_dispatch_group>",&,N,V_recordingWillStartGroup
T@"NSObject<OS_dispatch_queue>",&,N,V_alignBufferQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_apQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_assetQueryQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_assetsMigrationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_hybridClassifierQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_loggingQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_osdQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSObject<OS_dispatch_queue>",&,N,V_recordQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serverFeaturesQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_sessionInfoQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_sosQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_spgQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_stateNotificationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_stateSerialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_streamHandleQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_targetQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_voiceControllerCreationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcClientQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcConnectionQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcDelegateQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcReplyQueue
T@"NSObject<OS_dispatch_source>",&,N,V_audioFeedTimer
T@"NSObject<OS_dispatch_source>",&,N,V_audioPacketWatchdog
T@"NSObject<OS_dispatch_source>",&,N,V_clearLoggingFileTimer
T@"NSObject<OS_dispatch_source>",&,N,V_listenPollingTimer
T@"NSObject<OS_xpc_object>",&,N,V_connection
T@"NSObject<OS_xpc_object>",&,N,V_xpcConnection
T@"NSOutputStream",&,N,V_oStream
T@"NSSet",&,N,V_dictationLanguages
T@"NSString",&,N
T@"NSString",&,N,V_atvRemoteDeviceID
T@"NSString",&,N,V_audioProviderUUID
T@"NSString",&,N,V_bundleIdFromDictation
T@"NSString",&,N,V_configFile
T@"NSString",&,N,V_currentKeyboard
T@"NSString",&,N,V_detectedToken
T@"NSString",&,N,V_deviceId
T@"NSString",&,N,V_endpointerModelVersion
T@"NSString",&,N,V_globalLastKeyboardUsed
T@"NSString",&,N,V_homeId
T@"NSString",&,N,V_lastCommunicatedPeer
T@"NSString",&,N,V_machServiceName
T@"NSString",&,N,V_mhId
T@"NSString",&,N,V_name
T@"NSString",&,N,V_pendingRecordingStopUUID
T@"NSString",&,N,V_pendingRemoraVoiceTriggerDeviceId
T@"NSString",&,N,V_previousMessageLanguage
T@"NSString",&,N,V_productCategory
T@"NSString",&,N,V_profileId
T@"NSString",&,N,V_recordEventUUID
T@"NSString",&,N,V_requestMHUUID
T@"NSString",&,N,V_rootLogDir
T@"NSString",&,N,V_siriSessionUUID
T@"NSString",&,N,V_ssvLogFilePath
T@"NSString",&,N,V_userName
T@"NSString",&,N,V_voiceIdentificationBatchId
T@"NSString",&,N,V_voiceTriggerBatchId
T@"NSString",&,N,VmhId
T@"NSString",&,V_lastFakeModelUsedHash
T@"NSString",C,N,V_address
T@"NSString",C,N,V_deviceId
T@"NSString",C,N,V_interactionID
T@"NSString",C,N,V_languageDetectorAssetHash
T@"NSString",C,N,V_taskName
T@"NSString",R,C
T@"NSString",R,C,N,V_address
T@"NSString",R,C,N,V_applicationBundleIdentifier
T@"NSString",R,C,N,V_applicationDisplayName
T@"NSString",R,C,N,V_destination
T@"NSString",R,C,N,V_deviceIdentifier
T@"NSString",R,C,N,V_playbackRoute
T@"NSString",R,C,N,V_remoteDeviceProductIdentifier
T@"NSString",R,C,N,V_remoteDeviceUIDString
T@"NSString",R,C,N,V_route
T@"NSString",R,C,N,V_sessionUUID
T@"NSString",R,C,N,V_source
T@"NSString",R,C,N,V_uid
T@"NSString",R,N
T@"NSString",R,N,V_UUID
T@"NSString",R,N,V_audioProviderUUID
T@"NSString",R,N,V_codec
T@"NSString",R,N,V_destination
T@"NSString",R,N,V_deviceID
T@"NSString",R,N,V_deviceId
T@"NSString",R,N,V_deviceIdentifier
T@"NSString",R,N,V_deviceName
T@"NSString",R,N,V_deviceProductType
T@"NSString",R,N,V_deviceProductVersion
T@"NSString",R,N,V_dspStatus
T@"NSString",R,N,V_headsetName
T@"NSString",R,N,V_modelHash
T@"NSString",R,N,V_modelLocale
T@"NSString",R,N,V_modelName
T@"NSString",R,N,V_productIdentifier
T@"NSString",R,N,V_route
T@"NSString",R,N,V_source
T@"NSURL",R,N,V_audioURL
T@"NSURL",R,N,V_fileURL
T@"NSUUID",&,N,V_alertPlaybackFinishTimeoutToken
T@"NSUUID",&,N,V_endpointId
T@"NSUUID",&,N,V_pendingAudioSessionActivationToken
T@"NSUUID",&,N,V_startRecordingWatchDogToken
T@"NSUUID",&,N,V_stopRecordingWatchDogToken
T@"NSUUID",&,N,V_token
T@"NSUUID",&,N,V_uuid
T@"NSUUID",&,V_streamingUUID
T@"NSUUID",R,C,N,V_deviceUID
T@"NSUUID",R,C,N,V_endpointId
T@"NSUUID",R,C,N,V_remoteDeviceUID
T@"NSUUID",R,C,N,V_turnIdentifier
T@"NSUUID",R,N,V_deviceUID
T@"NSUUID",R,N,V_rejectionMHUUID
T@"NSXPCConnection",&,N,V_attSiriSvcConn
T@"NSXPCConnection",&,N,V_endpointerConnection
T@"NSXPCConnection",&,N,V_rcXPCConnection
T@"NSXPCConnection",&,N,V_ssrConnection
T@"NSXPCConnection",&,N,V_ssvConnection
T@"NviContext",&,N,V_nviCtx
T@"OSDAnalyzer",&,N,V_osdAnalyzer
T@"OSDFeatures",&,N,V_lastKnownOSDFeatures
T@"OSDFeatures",&,N,V_osdFeaturesAtEndpoint
T@"SOClockAlarmObserver",&,N,V_alarmMonitor
T@"SOClockTimerObserver",&,N,V_timerMonitor
T@"SOMediaNowPlayingObserver",&,N,V_mediaPlayingMonitor
T@"_EAREndpointer",&,N,V_hybridClassifier
T@"_EARLanguageDetector",&,N,V_languageDetector
T@"_EARLanguageDetectorAudioBuffer",&,N,V_audioBuffer
T@,&,N,V_remoteObjectProxy
T@,&,N,V_remoteSvcProxy
T@?,C,N,V_pendingAudioSessionActivationCompletion
T@?,C,N,V_pendingBuiltInVoiceTriggerCompletionBlk
T@?,C,N,V_pendingCompletion
T@?,C,N,V_pendingRemoraVoiceTriggerCompletionBlk
TB,N
TB,N,SsetScheduledFutureSample:,V_scheduledFutureSample
TB,N,V_accessibleEndpointerEnabled
TB,N,V_allowAdBlockerAssetDownloading
TB,N,V_allowEndpointAssetDownloading
TB,N,V_allowLanguageDetectorAssetDownloading
TB,N,V_allowSpeakerRecognitionAssetDownloading
TB,N,V_allowVoiceTriggerAccessoryAssetDownloading
TB,N,V_allowVoiceTriggerAssetDownloading
TB,N,V_audioSystemRecovering
TB,N,V_canPerformDelayedStop
TB,N,V_currentSessionShouldDuckOnBuiltInSpeaker
TB,N,V_deviceRoleIsStereo
TB,N,V_didAddAudio
TB,N,V_didCommunicateEndpoint
TB,N,V_didDeliverFirstSpeechPacket
TB,N,V_didDeliverLastBuffer
TB,N,V_didDetectSpeech
TB,N,V_didReportEndpointDelay
TB,N,V_didSetScaleFactor
TB,N,V_didTimestampFirstAudioPacket
TB,N,V_disableBoostForDoAP
TB,N,V_disableEndpointer
TB,N,V_disableLocalSpeechRecognizer
TB,N,V_disablePrewarmLocalAsrAtStartRecording
TB,N,V_enableAlwaysOnVoiceTrigger
TB,N,V_enabled
TB,N,V_endPointNotified
TB,N,V_hasPerformedDelayedStop
TB,N,V_hasReceivedNDEAPIResult
TB,N,V_hasReported
TB,N,V_isASRFeatureFromServer
TB,N,V_isActiveRequest
TB,N,V_isActiveSession
TB,N,V_isAlarmPlaying
TB,N,V_isAnalyzeMode
TB,N,V_isAnchorTimeBuffered
TB,N,V_isAsrOnDevice
TB,N,V_isAttachingBluetoothSession
TB,N,V_isAudioSessionActivated
TB,N,V_isConnected
TB,N,V_isEndAlertInfo
TB,N,V_isForwarding
TB,N,V_isHybridUODEnabled
TB,N,V_isListenPollingStarting
TB,N,V_isListening
TB,N,V_isMediaPlaying
TB,N,V_isNarrowBand
TB,N,V_isOpportuneSpeakListening
TB,N,V_isOpus
TB,N,V_isPhraseSpotterBypassed
TB,N,V_isRaiseToSpeakBypassed
TB,N,V_isRecording
TB,N,V_isRemoteVADAvailableStream
TB,N,V_isRequestTimeout
TB,N,V_isSecondPassRunning
TB,N,V_isSiri
TB,N,V_isSiriClientConsideredAsRecord
TB,N,V_isSiriClientListening
TB,N,V_isSoundPlaying
TB,N,V_isSpeakerMuted
TB,N,V_isSpeaking
TB,N,V_isStreaming
TB,N,V_isTemporaryPairedNotInContacts
TB,N,V_isTimerPlaying
TB,N,V_isWeakStream
TB,N,V_lpcmIsFloat
TB,N,V_myriadPreventingTwoShotFeedback
TB,N,V_needsBoost12dB
TB,N,V_needsToUpdateModel
TB,N,V_overrideEnabled
TB,N,V_recordingDidStop
TB,N,V_requestHistoricalAudio
TB,N,V_requestHistoricalAudioDataSampleCount
TB,N,V_requestHistoricalAudioDataWithHostTime
TB,N,V_requireSingleChannelLookup
TB,N,V_saveSamplesSeenInReset
TB,N,V_setupStarted
TB,N,V_shouldLogRawSensorData
TB,N,V_shouldUseLanguageDetectorForCurrentRequest
TB,N,V_skipAlertBehavior
TB,N,V_speechEndpointDetected
TB,N,V_splitterEnabled
TB,N,V_startDetected
TB,N,V_startOfSpeechDetected
TB,N,V_supportDoAP
TB,N,V_supportHearstVoiceTrigger
TB,N,V_supportLazySessionActivtion
TB,N,V_supportPhatic
TB,N,V_supportSessionActivateDelay
TB,N,V_supportTriagleModeSessionActivationRetry
TB,N,V_suppressInterruptionEndedNotifications
TB,N,V_twoShotNotificationEnabled
TB,N,V_useCustomizedRecordSettings
TB,N,V_useDefaultServerFeaturesOnClientLag
TB,N,V_useOpportunisticZLL
TB,N,V_voiceTriggerEnabled
TB,N,V_waitingForAlertFinish
TB,N,V_wasLanguageToggled
TB,R
TB,R,N
TB,R,N,V_hasPlayedStartAlert
TB,R,N,V_isBluetooth
TB,R,N,V_isDictation
TB,R,N,V_isDucking
TB,R,N,V_isFingerprintOnly
TB,R,N,V_isOnPhoneCall
TB,R,N,V_isRemoteDevice
TB,R,N,V_isSecondChanceRun
TB,R,N,V_isSecureOfflineOnly
TB,R,N,V_isSpokenNotification
TB,R,N,V_shouldUseRemoteRecorder
TB,R,N,V_useBorealisBuffer
TB,R,N,V_usePrelistening
TB,R,N,V_wantsRecordedAudioBufferLogs
TB,R,N,VcanProcessCurrentRequest
TB,V_isMediaPlayingNow
TB,V_shouldKeepConnection
TB,V_shouldRollFakeModel
TB,V_streaming
TC,N,V_hasReceivedEarlyDetectNDEAPIResult
TC,N,V_signalFractional
TI,N,V_encoderBitRate
TI,N,V_inputRecordingNumberOfChannels
TI,N,V_lpcmBitDepth
TI,N,V_numberOfChannels
TI,N,V_selectedChannel
TI,R,N
TI,R,N,V_audioSessionID
TQ,N
TQ,N,GgetAudioSessionState,V_audioSessionState
TQ,N,V_activateEndTime
TQ,N,V_activateStartTime
TQ,N,V_activeChannel
TQ,N,V_anchorMachAbsTime
TQ,N,V_attendingState
TQ,N,V_audioSessionSetActiveEndHostTime
TQ,N,V_audioStreamHandleId
TQ,N,V_bestEarlyDetectSample
TQ,N,V_bestEndDetectSample
TQ,N,V_bestStartDetectSample
TQ,N,V_builtInSpeakerState
TQ,N,V_circularBufferStartHostTime
TQ,N,V_circularBufferStartSampleCount
TQ,N,V_curSpeechFrames
TQ,N,V_deactivateEndTime
TQ,N,V_deactivateStartTime
TQ,N,V_decoderProcessedSampleCountForTV
TQ,N,V_dismissalTimestamp
TQ,N,V_endSample
TQ,N,V_endpointBufferHostTime
TQ,N,V_estimatedStartHostTime
TQ,N,V_extraDelayFrequency
TQ,N,V_fanId
TQ,N,V_lastAggTimeFalseWakeUp
TQ,N,V_lastAudioChunkHostTime
TQ,N,V_lastDetectedVoiceTriggerBeginSampleCount
TQ,N,V_lastSampleCount
TQ,N,V_latestPluginStreamId
TQ,N,V_maxAllowedTrailingSamplesAfterSchedulingStop
TQ,N,V_minSpeechFrames
TQ,N,V_numAudioSampleForwarded
TQ,N,V_numFalseWakeUp
TQ,N,V_numLatestLanguages
TQ,N,V_numLeadingFrames
TQ,N,V_numOfAudioPackets
TQ,N,V_numOfValidTrailingPackets
TQ,N,V_numOfValidTrailingSpeechPackets
TQ,N,V_numSamplesProcessed
TQ,N,V_numSamplesProcessedBeforeAnchorTime
TQ,N,V_numTrailingSamplesAfterSchedulingStop
TQ,N,V_numberOfVoicingFrames
TQ,N,V_onboardType
TQ,N,V_opportuneSpeakListeningType
TQ,N,V_pendingAudioSessionActivationReason
TQ,N,V_pendingBuiltInVoiceTriggerDetectedTime
TQ,N,V_pendingRemoraVoiceTriggerDetectedTime
TQ,N,V_phoneCallState
TQ,N,V_remoteVADAlignCount
TQ,N,V_reqSrc
TQ,N,V_reqStartAudioSampleId
TQ,N,V_reqStartMachAbsTime
TQ,N,V_runningSampleCount
TQ,N,V_samplingRate
TQ,N,V_secondChanceHotTillMachTime
TQ,N,V_secondPassAssetLoadCompleteTime
TQ,N,V_secondPassAssetLoadStartTime
TQ,N,V_secondPassAssetQueryCompleteTime
TQ,N,V_secondPassAssetQueryStartTime
TQ,N,V_secondPassAudioStreamReadyTime
TQ,N,V_secondPassAudioStreamStartTime
TQ,N,V_secondPassCheckerModelKeywordDetectionEndTime
TQ,N,V_secondPassCheckerModelKeywordDetectionStartTime
TQ,N,V_secondPassFirstAudioPacketReceptionTime
TQ,N,V_secondPassLastAudioPacketReceptionTime
TQ,N,V_serverState
TQ,N,V_sigType
TQ,N,V_startRecordingHostTime
TQ,N,V_startRecordingSampleCount
TQ,N,V_startSample
TQ,N,V_stopRecordingHostTime
TQ,N,V_streamState
TQ,N,V_triggerAbsStartSampleId
TQ,N,V_triggerMachTime
TQ,N,V_triggerNotifiedMachTime
TQ,N,V_userIntentType
TQ,N,V_userIntentValidForSeconds
TQ,N,V_userSpeakingEndedHostTime
TQ,N,V_userSpeakingStartedHostTime
TQ,N,V_voiceTriggerSampleCount
TQ,N,V_vtEndInSampleCount
TQ,N,V_wakeGestureTimestamp
TQ,N,V_xpcClientType
TQ,N,VactiveChannel
TQ,R
TQ,R,N
TQ,R,N,V_activationHostTime
TQ,R,N,V_audioStreamHandleId
TQ,R,N,V_beginSampleCount
TQ,R,N,V_buttonDownHostTime
TQ,R,N,V_capacity
TQ,R,N,V_deviceCategory
TQ,R,N,V_dictationVoiceTriggerAbsStartSampleId
TQ,R,N,V_estimatedSpeechEndHostTime
TQ,R,N,V_expectedStopHostTime
TQ,R,N,V_firstBufferHostTime
TQ,R,N,V_firstPassSource
TQ,R,N,V_hosttime
TQ,R,N,V_lastForwardedSampleCount
TQ,R,N,V_numOfAVVCRecordingClients
TQ,R,N,V_options
TQ,R,N,V_protocolVersion
TQ,R,N,V_size
TQ,R,N,V_startSampleCount
TQ,R,N,V_stopRecordingReason
TQ,R,N,V_streamHandleId
TQ,R,N,V_type
TQ,R,N,V_voiceTriggerEndHostTime
T^{AudioBufferList=I[1{AudioBuffer=II^v}]},N,V_pNonInterleavedABL
T^{BTLocalDeviceImpl=},N,V_localDevice
T^{BTSessionImpl=},N,V_bluetoothSession
T^{OpaqueAudioConverter=},N,V_deinterleaver
T^{OpaqueExtAudioFile=},N,V_fFile
T^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq},N,V_fp
Td,N
Td,N,V_audioSessionActivationDelay
Td,N,V_automaticEndpointingSuspensionEndTime
Td,N,V_bufferDuration
Td,N,V_clampedSFLatencyMsForClientLag
Td,N,V_clientLagThresholdMs
Td,N,V_delay
Td,N,V_elapsedTimeWithNoSpeech
Td,N,V_endWaitTime
Td,N,V_endpointTimeInMs
Td,N,V_eosLikelihood
Td,N,V_firstAudioSampleSensorTimestamp
Td,N,V_firstPktLatency
Td,N,V_hepAudioOriginInMs
Td,N,V_interspeechWaitTime
Td,N,V_lastKnowServerFeaturesLatency
Td,N,V_lastReportedEndpointTimeMs
Td,N,V_lastSilencePosterior
Td,N,V_minimumDurationForEndpointer
Td,N,V_processedAudioDurMs
Td,N,V_processedAudioInSeconds
Td,N,V_sampleRate
Td,N,V_serverFeaturesWarmupLatency
Td,N,V_shadowMicScore
Td,N,V_silencePosterior
Td,N,V_speechVoiceLevel
Td,N,V_startWaitTime
Td,N,V_totalAudioRecorded
Td,N,V_trailingSilenceDurationAtEndpoint
Td,N,V_userSpeakingEndedTimeInMs
Td,N,V_userSpeakingStartedTimeInMs
Td,N,V_vtExtraAudioAtStartInMs
Td,N,VautomaticEndpointingSuspensionEndTime
Td,N,Vdelay
Td,N,VminimumDurationForEndpointer
Td,N,VstartWaitTime
Td,R,N
Td,R,N,V_activationAlertStartTimestamp
Td,R,N,V_droppedPrediction
Td,R,N,V_droppingPrediction
Td,R,N,V_firstBufferTimestamp
Td,R,N,V_startRecordingTimestamp
Td,R,N,V_timestamp
Td,R,N,V_trailingSilenceDurationAtEndpoint
Td,R,N,VlastEndOfVoiceActivityTime
Td,R,N,VlastStartOfVoiceActivityTime
Tf,N,V_azimuth
Tf,N,V_cachedAvgPower
Tf,N,V_cachedPeakPower
Tf,N,V_confidence
Tf,N,V_didStartDelayInSeconds
Tf,N,V_endpointThreshold
Tf,N,V_estimatedAzimuth
Tf,N,V_firstPassMyriadGoodnessScore
Tf,N,V_lastEndpointPosterior
Tf,N,V_latestVolume
Tf,N,V_permanentOffsetFactor
Tf,N,V_prevAudioProcessedMs
Tf,N,V_sampleRate
Tf,N,V_samplingRate
Tf,N,V_scaleFactor
Tf,N,V_userIntentVolume
Tf,R,N
Tf,R,N,V_maxFingerprintBufferSize
Tf,R,N,V_scaleFactor
Tf,R,N,V_shadowMicScoreThresholdForVAD
Tf,R,N,V_vadScore
Tf,R,N,V_volumeEstimate
Ti,N,V_fakeAssetRollNotificationRegistrationToken
Ti,N,V_notifyToken
Ti,N,V_numChannels
Ti,N,V_remoteVADSPGRatio
Ti,R,N
Ti,R,N,V_mhSource
Tq,N
Tq,N,V_audioFormat
Tq,N,V_audioStreamType
Tq,N,V_clearLoggingFileTimerCount
Tq,N,V_currentSpeed
Tq,N,V_currentState
Tq,N,V_endpointMode
Tq,N,V_endpointStyle
Tq,N,V_endpointerOperationMode
Tq,N,V_endpointerType
Tq,N,V_errorAlertBehavior
Tq,N,V_initialState
Tq,N,V_latestVolumeTime
Tq,N,V_listenPollingTimerCount
Tq,N,V_numberOfTotalFramesETFT
Tq,N,V_processedAudioDurationInMilliseconds
Tq,N,V_speechRecordingMode
Tq,N,V_startAlertBehavior
Tq,N,V_stopAlertBehavior
Tq,N,V_targetSpeed
Tq,N,V_trailingSilenceDuration
Tq,N,V_userIntentTime
Tq,N,V_wordCount
Tq,N,VendpointStyle
Tq,R,N
Tq,R,N,V_audioAlertStyle
Tq,R,N,V_currentState
Tq,R,N,V_deviceType
Tq,R,N,V_dictationInputOrigin
Tq,R,N,V_presentationMode
Tq,R,N,V_speechEndpointerOperationMode
Tq,R,N,V_speechEvent
Ts,N,V_signalEstimate
T{AudioStreamBasicDescription=dIIIIIIII},N,V_outASBD
URLByAppendingPathComponent:
URLByDeletingPathExtension
URLForResource:withExtension:
URLForSoundID:
URLWithString:
URLsForDirectory:inDomains:
UTF8String
UUID
UUIDString
_LKFSChannelBitset
_LKFSLowerPercentile
_LKFSMicSensitivityOffset
_LKFSTTSMappingInputRangeHigh
_LKFSTTSMappingInputRangeLow
_LKFSTTSMappingOutputRangeHigh
_LKFSTTSMappingOutputRangeLow
_LKFSTimeConstant
_LKFSUpperPercentile
_RMSScore
_TTSVolumeLowerLimitDB
_TTSVolumeUpperLimitDB
_UUID
_accessBTDeviceAndAccessoryManagerUsingBlock:
_accessibleEndpointerEnabled
_accessoryManager
_accessoryVoiceTriggerEvents
_accessoryVoiceTriggerMetaDataByDeviceId
_accumulatedBufferDuration
_activateAudioSessionWithReason:delay:delayRequested:error:
_activateAudioSessionWithReason:error:
_activateEndTime
_activateStartTime
_activationAlertStartTimestamp
_activationAssertions
_activationHostTime
_activationMetadata
_activationSystemUptime
_activationTypeString
_activeChannel
_activeEndpointer
_activeMediaPlaybackVolume
_activeSessionsByRequest
_adCompanionServiceProvider
_adaptiveSiriVolumeDictionary
_addAlwaysEnabledCondition
_addAssetManagerEnabledConditions
_addConditionsForIOSAOP
_addConditionsForIOSBargeIn
_addContinousAudioFingerprintEnabledConditions
_addDisabledConditions
_addListeningEnabledConditions
_addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:
_addRemoteVADSignal:
_addSmartSiriVolumeEnabledConditions
_addVoiceTriggerAOPModeEnabledConditions
_addVoiceTriggerEnabledConditions
_additionalMetrics
_address
_adpAssertion
_alarmFiringState
_alarmMonitor
_alarmSoundIsFiring
_alarmVolume
_alarmVolumeLevel
_alertBehaviorForRecordRoute:recordingInfo:playbackRoute:attemptsToUsePastDataBufferFrames:
_alertBehaviorTypeFromAVVCOberrideType:
_alertDelegate
_alertPlaybackFinishTimeoutToken
_alertPlaybackFinishWaitingCompletions
_alertPlaybackFinishWaitingStreams
_alertPlaybackGroup
_alertProvider
_alignBufferQueue
_allowEndpointAssetDownloading
_allowLanguageDetectorAssetDownloading
_allowSpeakerRecognitionAssetDownloading
_allowVoiceTriggerAccessoryAssetDownloading
_allowVoiceTriggerAssetDownloading
_alwaysOnProcessorController
_anchorMachAbsTime
_apQueue
_appendDictationApplicationInfoSettings:
_applicationBundleIdentifier
_applicationDisplayName
_asbd
_asrDatapackInstallationStatus
_assertionMonitor
_assetManager
_assetQueryForAssetType:
_assetQueryQueue
_assetVersion
_assetsMigrationQueue
_asssetMetaUpdatedKey
_asxConnection
_attachBluetoothSession
_attachToSession
_attachingToSession
_atvRemoteDeviceID
_audibleFeedbackPlaybackReason
_audibleFeedbackQueue
_audioAlertProvidingDelegate
_audioAlertStyle
_audioAlertStyleForListenAfterSpeakingWithRecordRoute:playbackRoute:echoCancellation:useDeviceSpeakerForTTS:
_audioBuffer
_audioBufferPool
_audioChunkFrom:to:
_audioChunkFrom:to:channelIdx:
_audioDeviceID
_audioDeviceInfo
_audioDuckingEnabled
_audioFile
_audioFileHandle
_audioFilePathIndex
_audioFileReader
_audioFileType
_audioFileWriter
_audioFormat
_audioInjectionEngines
_audioIsFromRemoteAccessory:
_audioLength
_audioLogDirectory
_audioLoggingBuffer
_audioMeterProvider
_audioMetricProvider
_audioPacketDeliveryCount
_audioPacketWatchdog
_audioPlaybackService
_audioPreprocessor
_audioProviderUUID
_audioRecordContext
_audioRecordDeviceInfo
_audioRecorder
_audioRecorderDidStartRecordingSuccessfully:streamHandleID:error:
_audioRecorderDidStopRecordingForReason:streamHandleID:
_audioRouteChanged:
_audioSamplesPerRemoteVAD
_audioSession
_audioSessionActivationDelay
_audioSessionActiveDelayCoreSpeechWithType:
_audioSessionActiveDelayOverride
_audioSessionActiveDelayServerConfiguration
_audioSessionActiveDelayUserPerceptionWithType:
_audioSessionController
_audioSessionInfoObservers
_audioSessionProvider
_audioSessionProvidingDelegate
_audioSessionSetActiveEndHostTime
_audioSessionState
_audioStream
_audioStreamHandleId
_audioStreamProvdider:audioBufferAvailable:
_audioStreamProvider
_audioStreamProvidingDelegate
_audioStreamType
_audioStreamWithRequest:streamName:error:
_audioSystemRecovering
_audioTapProvider
_audioTimeConverter
_audioURL
_automaticEndpointingSuspensionEndTime
_availabilityChanged
_avvcAlertOverrideType:
_azimuth
_beepCanceller
_beginMonitoring
_beginSampleCount
_bestEarlyDetectSample
_bestEndDetectSample
_bestStartDetectSample
_bluetoothDevice
_bluetoothDeviceInfo
_bluetoothSession
_bluetoothSessionSetupGroup
_bluetoothWirelessSplitterSessionStateObserver
_bufferedLPCM
_buildVersion
_builtInAudioInjectionEngine
_builtInDevice
_builtInSeconPassProgressProvider
_builtInSpeakerState
_builtInVoiceTriggerEvent
_builtInVoiceTriggerMetaData
_bundleIdFromDictation
_buttonDownHostTime
_cachedAsset
_cachedEndpointAssets
_cachedPeakPower
_caesuraSPG
_calculateRMSWithFrameData:
_calculateSpeechVoicingLevel
_canDelayStopRecording
_canFetchRemoteAsset:
_canPerformDelayedStop
_canPlayPhaticDuringMediaPlayback
_canProcessCurrentRequest
_canSetContext
_canUseZLL
_cancelAudioPacketWatchDog
_cancelExtendedEndpointTimer
_cancelPendingAudioSessionActivateForReason:
_capacity
_certificate
_checkAudioLoggingLimits:
_checkCanUseVoiceTriggerDuringCallEnabled
_checkFirstUnlocked
_checkIfLastEndpointHintShouldBeAccepted:
_checkNewAssetAvailablity
_checkNewAssetAvailablityForEndpoint
_checkPhraseSpotterEnabled
_checkSiriRestrictedOnLockScreen
_checkSoftwareUpdateCheckingState
_checkSpringBoardStarted
_checkVoiceTriggerEnabled
_circBuffer
_circularBufferStartHostTime
_cleanUpConnection
_cleanUpDeviceProxies
_cleanUpMobileAssetV1Directory
_clearDidStartRecordingDelegateWatchDog
_clearDidStopRecordingDelegateWatchDog
_clearEndpointHint
_clearLoggingFileTimer
_clearLoggingFileTimerCount
_clearPendingBuiltInVoiceTrigger
_clientConnections
_clientController
_clientLagThresholdMs
_close
_codec
_combineResultsWithOptimalFromNoise:andOptimalFromLkfs:withUserOffset:
_compatibilityVersion
_compensateChannelDataIfNeeded:receivedNumChannels:
_completion
_compressFilesInDirectory:matchingPredicate:compressedFileAvailable:
_compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:
_confidence
_configFile
_configureAudioConverter:
_configureWithCurrentASBD
_connectPluginDevice:
_connectedDevice
_connectedDeviceAddresses
_connectedDevices
_connection
_connectionInterrupted
_connectionInvalidated
_constructLangPriors
_context
_contextResetQueue
_contextToString:
_continuousZeroCounter
_conversationalMessages
_convertAudioCapacity
_convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:
_convertDeactivateOption:
_convertPCMDataForFingerprinting:
_convertPacketCount
_crashEventDelegate
_createAlarmMonitor
_createAudioPlaybackSessionWithRequest:options:
_createAudioPowerMeterIfNeeded
_createAudioProviderFromXPCWithContext:
_createAudioStreamWithCurrentNviContext
_createCircularBufferIfNeededWithNumChannel:playbackRoute:
_createClearLoggingFileTimer
_createClientConnection
_createDeInterleaverIfNeeded
_createDirAtPath:
_createMediaPlayingMonitor
_createPeriodicalDownloadTimer
_createRequestLinkInfo:component:
_createSSVClientConnectionIfNeeded
_createSampleRateConverterWithInASBD:outASBD:
_createSpeechDetectionVADIfNeeded
_createTimerMonitor
_createXPCClientConnection
_createXPCClientConnectionIfNeeded
_createXPCClientConnectionIfNeeded:
_csAssetsDictionary
_csAudioRecordType
_csAudioRecordTypeForSpeechEvent:currentClientConfiguration:
_csAudioRecordTypeForSpeechRequestOptions:useBorealisBuffer:currentClientConfiguration:
_cs_initWithXPCObject:
_cs_isHashTableEmpty
_cs_xpcObject
_ctx
_curSpeechFrames
_currActiveDataSourceTypes
_currActiveSigProvTypes
_currentActivationInfo
_currentAsset
_currentAudioDeviceInfo
_currentClientConfiguration
_currentConfigurationSupportsDucking
_currentHEPAsset
_currentKeyboard
_currentLanguageCode
_currentMaximumBufferSize
_currentOEPAsset
_currentPlaybackRoute
_currentRecordDeviceInfo
_currentRecordRoute
_currentRecordingInfo
_currentRequestSampleRate
_currentSessionShouldDuckOnBuiltInSpeaker
_currentSpeed
_currentState
_dataBufferNDEAPI
_dataBufferPositionNDEAPI
_dataSource
_dataSrcMap
_deactivateAudioSession:error:
_deactivateEndTime
_deactivateStartTime
_debugLogPath
_decodeError:
_decoder
_decoderProcessedSampleCountForTV
_decodersForTV
_defaultDownloadOptions
_defaults
_deinterleaveBufferIfNeeded:
_deinterleaver
_delay
_delegate
_delegates
_deliverHistoricalAudioToStreamsWithRemoteVAD:
_deliverPostprocessAudioChunk:toStream:lastForwardedSampleCount:
_deregisterAudioSessionNotifications
_destination
_destroyVoiceController
_detachBluetoothSession
_detachFromSession
_detectedToken
_deviceAudioLoggingWithFileWriter:
_deviceID
_deviceId
_deviceIdentifier
_deviceInfo
_deviceName
_deviceProductType
_deviceProductVersion
_deviceProxies
_deviceProxiesByAddress
_deviceProxiesByDeviceUID
_deviceProxiesLock
_deviceProxyWithAddress:createsIfAbsent:
_deviceProxyWithUID:createsIfAbsent:
_deviceRoleIsStereo
_deviceSpecificDBToLinearVolumeMappingCSSSVDeviceSimple:
_deviceSpecificLinearVolumeToDBMappingCSSSVDeviceSimple:
_deviceType
_deviceUID
_dictationInputOrigin
_dictationLanguagePriors
_dictationLanguages
_dictationVoiceTriggerAbsStartSampleId
_didAddAudio
_didBecomeCurrent
_didCommunicateEndpoint
_didDeliverFirstSpeechPacket
_didDeliverLastBuffer
_didDetectEndpoint
_didDetectSpeech
_didDetectStartpoint
_didEnterTwoShotMode
_didFakeTwoShotWithAlert
_didInstalledNewAdBlockerAsset
_didInstalledNewAsset
_didInstalledNewVoiceTriggerAsset
_didNotStartWithError:
_didPerformTwoShotPrompt
_didPlayStartAlertSoundForSiri:audioStream:
_didReceiveAOPListeningStateChange:
_didReceiveAVVCRecordingClientNumberChange:
_didReceiveAutomaticVolumeToggled:
_didReceiveBuiltinSpeakerStateChangeNotification:
_didReceiveCanUseVoiceTriggerDuringCallSettingChangedInQueue:
_didReceiveClamshellStateChangeNotification:
_didReceiveDaemonStateChanged:
_didReceiveFinishStartAlertPlaybackAt:
_didReceiveFirstBuffer
_didReceiveFirstUnlock:
_didReceiveFirstUnlockInQueue:
_didReceiveLanguageCodeUpdate
_didReceiveLanguageCodeUpdate:
_didReceiveLastBuffer
_didReceiveMediaserverNotification:
_didReceiveNewAdBlockerAssetMetaData
_didReceiveNewSpeechEndpointAssetMetaData
_didReceiveNewVoiceTriggerAssetMetaData
_didReceivePhraseSpotterSettingChangedInQueue:
_didReceiveRestrictionChanged:
_didReceiveRestrictionChangedInQueue:
_didReceiveSelfTriggerChanged:
_didReceiveServerFeatures
_didReceiveSiriSettingChanged:
_didReceiveSleepGesture
_didReceiveSoftwareUpdateCheckingStateChanged:
_didReceiveSoftwareUpdateCheckingStateChangedInQueue:
_didReceiveSpeakerMuteStateChangeNotification:
_didReceiveSpeakerRecognitionAssetMetaData
_didReceiveSpringboardStarted:
_didReceiveSpringboardStartedInQueue:
_didReceiveVoiceTriggerSettingChanged:
_didReceiveVoiceTriggerSettingChangedInQueue:
_didReceiveWakeGesture
_didReceiveWirelessSplitterStateChange
_didReceivedNetworkAvailabilityChangedNotification:
_didReportEndpointDelay
_didResignCurrent
_didSetScaleFactor
_didStartDelayInSeconds
_didStopForReason:
_didStopWithError:
_didTimeout
_didTimestampFirstAudioPacket
_disableBoostForDoAP
_disableEndpointer
_disableLocalSpeechRecognizer
_disablePrewarmLocalAsrAtStartRecording
_disconnect
_dismissalTimestamp
_doActivateAudioSessionWithReason:error:
_donateRecordedAudioForVoiceIdentificationTrainingWithCompletion:
_downloadAsset:withComplete:
_downloadAssetCatalogForAssetType:complete:
_downloadTimer
_downloadTimerCount
_downloadingOption
_downsampler
_droppedPrediction
_droppingPrediction
_dspStatus
_duckAudioXPCClient
_elapsedTimeWithNoSpeech
_emitEndpointDetectedEventWithEndpointTimeMs:endpointBufferHostTime:endpointerFeatures:endpointerDecisionLagInNs:extraDelayMs:endpointScore:asrFeatureLatencies:
_emitMHEndpointLatencyInfo:withRequestMHUUID:
_enableAlwaysOnVoiceTrigger
_enablePolicy
_enabled
_encoder
_endMonitoring
_endPointNotified
_endSample
_endWaitTime
_endpointAnalyzer
_endpointBufferHostTime
_endpointDelayReporter
_endpointId
_endpointMode
_endpointStyle
_endpointThreshold
_endpointTimeInMs
_endpointerConnection
_endpointerDelegate
_endpointerImplDelegate
_endpointerModelVersion
_endpointerOperationMode
_endpointerProxy
_energyBufferSize
_enforceEndpointHintWithMitigation:
_enumerateListenersUsingBlock:
_enumerateObserversUsingBlock:
_eosLikelihood
_epResult
_errorAlertBehavior
_estimatedAzimuth
_estimatedSpeechEndHostTime
_estimatedStartHostTime
_estimatedTTSVolume:lowerLimit:upperLimit:TTSmappingInputRangeLow:TTSmappingInputRangeHigh:TTSmappingOutputRangeLow:TTSmappingOutputRangeHigh:
_eventIsRaiseToSpeak
_eventIsTVRemote
_eventIsVoiceTrigger
_eventToStateTransitions
_evictAllReusableSessionsForReason:
_expectedFirstBufferTimestamp
_expectedStopHostTime
_experimentContext
_exportedInterface
_extendedEndpointTimer
_extraDelayFrequency
_fFile
_fakeAssetMonitor
_fakeAssetRollNotificationRegistrationToken
_fakeTwoShotTTSPromptUUID
_fakeTwoShotTTSPromptWatchdogTimer
_fallbackAudioSessionReleaseProvider
_falseWakePhraseDictionary
_fanId
_featuresAtEndpoint
_fetchAssertionMonitor
_fetchAudioDecoderForTV:
_fetchBTInfo
_fetchCurrentMetrics
_fetchEndpointMobileAssetWithLanguage:
_fetchFallbackAudioSessionReleaseProviding
_fetchHearstConnectionState
_fetchHearstRoutedState
_fetchHistoricalAudioAndForwardToStream:remoteVAD:
_fetchJarvisConnectionState
_fetchLastTriggerInfo
_fetchRemoteAssetOfType:withLanguage:completion:
_fetchRemoteAssetOfType:withLanguage:query:completion:
_fetchRemoteMetaData
_fetchRemoteRecordClientWithDeviceId:streamHandleId:
_fetchRingVibrationValue
_fetchSilentVibrationValue
_fetchSiriInputSourceOutOfBandState
_fetchSpeakerStateActiveInfo
_fetchSpeakerStateMutedInfo
_fetchVoiceTriggerInstalledAssetWithLanguage:completion:
_fileHandle
_fileOption
_fileURL
_finalizeAudioFileWriterWithCompletion:
_finalizeWithError:
_findLatestInstalledAsset:
_fingerprintWasRecognized
_fingerprinter
_fingerprinterConverter
_fingerprintingEnabled
_firstAudioPacketTimestamp
_firstAudioSampleSensorTimestamp
_firstBufferHostTime
_firstBufferTimestamp
_firstPassInfoGeneratedTime
_firstPassInfoProcessedTime
_firstPassMyriadGoodnessScore
_firstPassSource
_firstPassTriggerInfo
_firstPktLatency
_firstUnlockMonitor
_firstUnlockNotified
_firstUnlocked
_firstpassMetrics
_floatBuffer
_footprint
_forceSuccessAlertOnStop
_forwardAudioChunk:toStream:
_forwardAudioChunkForTV:toStream:
_generateTemporaryFileURL
_getAddressWithBTDevice:
_getAudioRecorderWithError:
_getAudioSessionID
_getCSHybridEndpointerConfigForAsset:
_getConnectedBluetoothDeviceAddressesFromLocalDevice:
_getContentsOfDirectory:
_getCurrentHEPAsset
_getDefaultValues
_getDeviceSimpleOutputLinearVolumeFordBFSValue:
_getDeviceSimpledBFSForOutputLinearVolume:
_getDevicedBFSForInputLinearVolume:
_getFakeEndpointAsset
_getFanInfoArray
_getFloatBufferData:
_getHighestRemoraFirstPassGoodnessScore:
_getHomeUserIdForSharedSiriId:withCompletion:
_getModelPathFromInstallationStatusString:
_getMusicVolumeDBCSSSVDeviceDefault:
_getMusicVolumeDBCSSSVDeviceSimple:
_getNumberFromASVDictionaryForKey:category:default:
_getOEPVersionFromPath:
_getOrCreateAudioLogDirectory
_getRecordSettingsWithRequest:
_getRemoteServiceProxyObject
_getSpeechIdentifier
_getUserOffsetFromMusicVolumeDB:
_getVoiceTriggerAssetFromAssetManager:
_getVoiceTriggerAssetFromAssetManagerWithLocale:completion:
_getVoiceTriggerAssetIfNeeded:
_getWirelessSplitterInfoFromLocalDevice:
_globalLastKeyboardUsed
_handleAlertProvidingDelegateDidFinishAlertPlayback:
_handleAlertProvidingDelegateMessageBody:
_handleAudioSystemFailure
_handleBeginInterruption
_handleCallActiveDidChangeNotification:
_handleClearLoggingFileTimer
_handleClientError:client:
_handleClientEvent:
_handleClientMessage:client:
_handleConnectionError:
_handleDidStartAudioStreamWithResult:error:
_handleDidStopAudioStreamWithReason:
_handleEnablePolicyEvent:
_handleEndInterruption:
_handleEndpointVoiceTriggerAsset:completion:
_handleExecutionForSession:
_handleFakeHearstModelRequest:majorVersion:minorVersion:downloadedModels:preinstalledModels:completion:
_handleFakeTwoShotPromptCallbackWithUUID:timestamp:duration:error:
_handleFakeTwoShotPromptTimeoutWithUUID:
_handleFinalizationForSession:error:
_handleInterruption:
_handleListenerDisconnectedError:
_handleListenerError:
_handleListenerEvent:
_handleListenerMessage:
_handlePreparationForSession:
_handleSessionInfoProvidingDelegateInterruptionNotification:
_handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:
_handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:
_handleSessionInfoProvidingDelegateMessageBody:
_handleSessionInfoProvidingDelegateRouteChangeNotification:
_handleSessionProvidingDelegateBeginInterruption:
_handleSessionProvidingDelegateBeginInterruptionWithContext:
_handleSessionProvidingDelegateDidChangeContext:
_handleSessionProvidingDelegateDidSetAudioSession:
_handleSessionProvidingDelegateEndInterruption:
_handleSessionProvidingDelegateMessageBody:
_handleSessionProvidingDelegateStreamHandleIdInvalidation:
_handleSessionProvidingDelegateWillSetAudioSession:
_handleStreamProvidingDelegateChunkAvailable:
_handleStreamProvidingDelegateChunkForTVAvailable:
_handleStreamProvidingDelegateDidStopUnexpectly:
_handleStreamProvidingDelegateHardwareConfigChange:
_handleStreamProvidingDelegateMessageBody:
_handleVoiceTriggerAssetWithCompletion:
_hardEndpointWasDetectedWithMetrics:atTime:
_hasConnectedAVCall
_hasDeviceTemporaryPairedNotInContacts
_hasLocalPendingTwoShot
_hasPendingActivationForType:
_hasPerformedDelayedStop
_hasPlayedStartAlert
_hasReceivedEarlyDetectNDEAPIResult
_hasReceivedEmptyLPCMRecordBuffer
_hasReceivedNDEAPIResult
_hasReported
_hasSetAlertDictionary
_headphoneInEarDetectionState
_headphoneListeningMode
_headsetName
_heartBeat
_heartBeatInterval
_hepAudioOriginInMs
_hidCallbackQueue
_holdRecordingExceptionIfNeeded:
_holdRecordingTransactionIfNeeded
_hosttime
_hybridClassifier
_hybridClassifierQueue
_hybridEndpointer
_hybridUODEnabled
_implDelegate
_inUseServices
_init
_initWithType:pathGenerator:xorFileHandle:priority:
_initialState
_initializeAlarmState
_initializeAudioFileWriterWithAudioStreamBasicDescription:
_initializeMediaPlayingState
_initializeStartOfSpeechDetector:samplingRate:
_initializeTimerState
_injectionAudioFileList
_injectionCompletionNotifyBlocks
_injectionEngine
_injectionStartNotifyBlocks
_inputRoute
_installedAssetOfType:query:withLanguage:completion:
_installedAssetOfType:withLanguage:
_installedAssetOfType:withLanguage:completion:
_instanceContext
_instrumentSiriCue:
_interactionID
_interspeechWaitTime
_interval
_invalidate
_isASRFeatureFromServer
_isActivated
_isActive
_isActiveRequest
_isActiveSession
_isAnalyzeMode
_isAnchorTimeBuffered
_isAsrOnDevice
_isAttachingBluetoothSession
_isAudioSessionActivated
_isAutomaticVolumeEnabled
_isBluetooth
_isBuiltInDeviceFromDeviceId:
_isCommandControlStreaming
_isConnected
_isCurrent
_isDelayedDuckingSupportedContext
_isDeviceRoleStereo
_isDictation
_isDriving
_isDucking
_isDuckingAvailableRoute:
_isDuckingOnSpeakerOutputSupportedWithCurrentRoute
_isEnabled
_isFingerprintOnly
_isForwarding
_isHearstConnected
_isHearstRoutedAndWithNoPhoneCall
_isHybridUODEnabled
_isInPhoneCallStateWithHSPhoneCallCapableRoute
_isJarvisConnected
_isListenPollingStarting
_isListening
_isListeningEnabled
_isMediaPlayingNow
_isNarrowBand
_isNarrowBand:
_isOSDIncludedInAsset:
_isOnPhoneCall
_isOpportuneSpeakListening
_isPhraseSpotterBypassed
_isPhraseSpotterEnabled
_isPrepared
_isRaiseToSpeakBypassed
_isReadyToUse
_isRecordRouteBuiltinMic
_isRecordRouteStudioDisplay
_isRecording
_isRecordingUsingBTRoute
_isRemoraSecondPassRunning
_isRemoteVADAvailableStream
_isRequestFromSpokenNotification:
_isRequestTimeout
_isRestricted
_isRetryRecommendedWithResult:
_isSecondChanceRun
_isSecondPassRunning
_isSecureOfflineOnly
_isSiriClientListening
_isSiriEnabled
_isSiriInputSourceOutOfBand
_isSoftwareUpdateCheckingRunning
_isSpeaking
_isSpeechControllerInitialized
_isSpokenNotification
_isSpringBoardStarted
_isStartSampleCountMarked
_isStreaming
_isVibrationDisabledInAccessibility
_isVoiceOverTouchEnabledInAccessibility
_isVoiceTriggerEnabled
_isVoiceTriggerEvent:
_isWeakStream
_keyboardConvoLanguagePriors
_keyboardGlobalLanguagePriors
_keywordAnalyzer
_keywordAnalyzerNDEAPI
_languageCode
_languageCodeUpdateMonitor
_languageDetectionUserContext
_languageDetector
_languageDetectorAssetHash
_languageDetectorDelegate
_languageDetectorOptionFromSettings:
_lastAggTimeFalseWakeUp
_lastArrivalTimestampToAudioRecorder
_lastAudioChunkHostTime
_lastAudioRecordBufferReceiptTime
_lastAudioRecorderContext
_lastCommunicatedPeer
_lastDetectedVoiceTriggerBeginSampleCount
_lastEndpointHintCompletion
_lastEndpointHintFeatures
_lastEndpointHintRC
_lastEndpointHintRCProcessedForMitigation
_lastEndpointPosterior
_lastEndpointerMetrics
_lastFakeModelUsedHash
_lastForwardedSampleCount
_lastKnowServerFeaturesLatency
_lastKnownOSDFeatures
_lastKnownServerEPFeatures
_lastPrepareTimestamp
_lastRTSTriggerInfo
_lastReportedEndpointTimeMs
_lastSampleCount
_lastServerFeatureTimestamp
_lastSilencePosterior
_lastTimestamp
_lastUpdatedAssetType
_lastVoiceTriggerInfo
_latestContext
_latestDetectedLanguages
_latestPluginStreamId
_latestVolume
_latestVolumeTime
_lazyActivateAudioSessionWithReason:error:
_listenPollingTimer
_listenPollingTimerCount
_listener
_listeners
_loadAndSetupEndpointerAssetIfNecessary
_localDevice
_logAudioMetrics:mhUUID:
_logBluetoothStateWithMHUUID:
_logEventUUID
_logFanState
_logLanguageDetectorMetricsForLoggingInfo:
_logResourceNotAvailableErrorIfNeeded:
_logSoSResult:toPath:
_logVoiceTriggerInfo:withMHUUID:
_loggingQueue
_lpcmBitDepth
_lpcmIsFloat
_machServiceName
_makeTimestampedAudioLogFilenameWithPrefix:suffix:
_mapInputOriginFromAssetToCSAudioRecordType:
_mapInstrumentationEndpointTypeFromStopRecordingReason:
_maxAllowedTrailingSamplesAfterSchedulingStop
_maxFingerprintBufferSize
_mediaPlayingMonitor
_mediaPlayingObserverQueue
_mediaServicesWereLost:
_mediaServicesWereReset:
_mediaserverdDidRestart
_mhId
_mhSource
_mhUUIDFromSpeechRequestOptions:
_micUsageReporter
_minSpeechFrames
_minimumDurationForEndpointer
_modelData
_modelHash
_modelLocale
_modelName
_monitor
_mostRecentSpeechSynthesisRecord
_multilingualKeyboardLanguages
_multimodalEndpointerEnabled
_musicVolumeDB
_musicVolumeLevel
_myriadPreventingTwoShotFeedback
_name
_narrowBandOpusConverter
_needResetAudioInjectionIndex:
_needsAVVCLPCMCallbacks
_needsConversion
_needsToUpdateModel
_nextFingerprintSampleNumber
_nnvadEndpointer
_noiseLevelChannelBitset
_noiseLowerPercentile
_noiseMicSensitivityOffset
_noiseMicSensitivityOffsetDeviceSimple
_noiseTTSMappingInputRangeHigh
_noiseTTSMappingInputRangeLow
_noiseTTSMappingOutputRangeLow
_noiseTimeConstant
_noiseUpperPercentile
_noiseWeight
_notePossiblePlayPausedStateChange:
_notificationKey
_notifyActivationEvent:completion:
_notifyAssetsUpdate
_notifyHearstConnectionState:
_notifyHearstRoutedState:
_notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:
_notifyJarvisConnectionState:
_notifyObserver:
_notifyObserver:mediaIsPlayingState:
_notifyObserver:splitterState:shouldDisableSpeakerVerificationInSplitterMode:
_notifyObserver:withBuiltinSpeakerState:
_notifyObserver:withClamshellState:
_notifyObserver:withDaemonState:
_notifyObserver:withEnabled:
_notifyObserver:withLanguageCode:
_notifyObserver:withMediaserverState:
_notifyObserver:withNetworkAvailability:
_notifyObserver:withSoftwareUpdateCheckingRunning:
_notifyObserver:withStarted:
_notifyObserver:withUnlocked:
_notifySiriInputSourceOutOfBandState:
_notifyStopCommandControl
_notifyStopOpportuneSpeakWithDelay:
_notifyToken
_nowString
_numAudioSampleForwarded
_numChannels
_numLatestLanguages
_numLeadingFrames
_numOfAVVCRecordingClients
_numOfAudioPackets
_numOfValidTrailingPackets
_numOfValidTrailingSpeechPackets
_numSamplesProcessed
_numSamplesProcessedBeforeAnchorTime
_numTrailingSamplesAfterSchedulingStop
_numberOfAVVCAlertPlaybacksByType
_numberOfChannels
_numberOfOccurrences
_numberOfTotalFramesETFT
_numberOfTransactions
_numberOfVoicingFrames
_oStream
_observers
_observersByIdentifier
_onAudioPacketWatchdogFire
_onboardType
_opportuneSpeakListeningType
_opportuneSpeakListnerTestService
_options
_opusAudioConverter
_opusConverter
_opusDecoders
_opusOutASBD
_osdAnalyzer
_osdFeaturesAtEndpoint
_osdQueue
_outASBD
_outBufferScaleFactor
_outPacketSizeInSec
_outputRoute
_overrideEnabled
_overridePath
_pNonInterleavedABL
_packetCount
_pairedDeviceAddresses
_path
_pauseCounts
_pauseSSVProcessing
_payloadData
_pendingActivationEvent
_pendingActivationInfo
_pendingAudioSessionActivationCompletion
_pendingAudioSessionActivationReason
_pendingAudioSessionActivationToken
_pendingBuiltInVoiceTriggerCompletionBlk
_pendingBuiltInVoiceTriggerDetectedTime
_pendingBuiltInVoiceTriggerResult
_pendingCompletion
_pendingRecordingStopUUID
_pendingRemoraVoiceTriggerCompletionBlk
_pendingRemoraVoiceTriggerDetectedTime
_pendingRemoraVoiceTriggerDeviceId
_pendingRemoraVoiceTriggerResult
_pendingStartCompletions
_pendingStopCompletions
_pendingTwoShotVTToken
_performPendingAudioSessionActivateForReason:
_performPostBuildInstallWithCompletion:
_performTwoShotPromptForType:atTime:
_permanentOffsetFactor
_permanentOffsetIsEnabled
_phoneCallStateMonitor
_phraseSpotterEnabledDidChange
_playAudioAlert:
_playPhaticWithCompletion:
_playStopAlertIfNecessaryForReason:endpointMode:error:
_playbackDeviceTypeList
_playbackRoute
_playerItem
_popRemoteVADSignal
_postBuildInstallService
_postEpilogueAudioStream
_powerMeter
_preEpilogueAudioStream
_prepareAudioStream:request:completion:
_prepareAudioStreamSync:request:error:
_prepareDirectoryAtPath:
_prepareSoundLevelBufferFromSamples:soundType:
_prepareSpeechControllerWithOptions:error:
_prepareWithOptions:audioSession:completion:
_prepareWithOptions:audioSession:error:
_presentationMode
_prevAudioProcessedMs
_previousMessageLanguage
_prewarmRequest:completion:
_primaryStream
_processAudioBuffer:audioStreamHandleId:arrivalTimestampToAudioRecorder:
_processAudioBuffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
_processAudioChain:audioStreamHandleId:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
_processAudioChunk:soundType:
_processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:
_processGradingDataFetchCommandWithRequest:fromSenderID:withReply:
_processParallelRecordingCommandWithRequest:fromSenderID:withReply:
_processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:
_processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:
_processVoiceProfileListQueryCommandFromPeerId:requestInfo:withReply:
_processVoiceProfileUpdateTriggerFromPeerId:requestInfo:withReply:
_processedAudioDurMs
_processedAudioDurationInMilliseconds
_processedAudioInSeconds
_processedSampleCount
_productCategory
_productIdentifier
_profileId
_protocolVersion
_providerDelegate
_proxyObject
_queue
_rcHandlingClient
_rcXPCConnection
_readAudioBufferAndFeed
_readJsonDictionaryAt:
_readParametersFromHEPAsset:
_receiveParallelRecordingFromPeerId:recordingInfo:withReply:
_receiveVoiceGradingDataFromPeerId:requestInfo:withReply:
_receiveVoiceProfileFromPeerId:voiceProfileInfo:withReply:
_receivedNewAssetUpdate:
_receivers
_recordBasePacketsPerSecond
_recordContext
_recordDevice
_recordDeviceIndicator
_recordDeviceInfo
_recordEventUUID
_recordQueue
_recordRecognitionLanguage:
_recordStateQueue
_recordedAudioFileURL
_recordingAlertsConfiguration
_recordingAudioGroup
_recordingDidStop
_recordingInfo
_recordingInfoForEvent:audioAlertStyle:includeBTInfo:includeRecordDeviceInfo:
_recordingSettings
_recordingTransaction
_recordingWillStartGroup
_refreshSpeakerRecognitionAssets
_registerAudioRouteChangeNotification
_registerAudioSessionNotifications
_registerForFakeAssetRollNotification
_registerInterruptionNotification
_reinitializeSmartSiriVolumeWithAsset:
_rejectionMHUUID
_releaseRecordingTransactionIfNeeded
_reload:
_reloadForDevice:
_remoraSecondPassProgressProvider
_remoteAccessoryStreamIdSet
_remoteDeviceProductIdentifier
_remoteDeviceUID
_remoteDeviceUIDString
_remoteInterface
_remoteObjectProxy
_remoteRecordClient
_remoteVADAlignBuffer
_remoteVADAlignCount
_remoteVADCircularBufferImpl
_remoteVADSPGRatio
_removeQueue:
_removeRecordedAudio
_reportMetrics
_reportUEIUserSpeakingContext
_reportsDynamicActivityAttribute:bundleId:
_reqStartAudioSampleId
_reqStartMachAbsTime
_request
_requestHistoricalAudio
_requestHistoricalAudioDataSampleCount
_requestHistoricalAudioDataWithHostTime
_requestMHUUID
_requestedRecordSettings
_requestedStopRecordingOptions
_requireSingleChannelLookup
_requiresHistoricalBuffer
_reset
_resetAlignBuffer
_resetCircularBufferStartTime
_resetPlayerItem
_resetSpeechController
_resetStartAnalyzeTime
_resetStartOfSpeechDetector
_resumeSSVProcessing
_reusableSessionsByRequest
_ringVibrationState
_ringVibrationValue
_rmsSamplesForEntireAudio
_rootLogDir
_route
_runAssetQuery:completion:
_runningSampleCount
_sampleRate
_sampleRateConverter
_samplesFed
_samplesPerInterval
_samplingRate
_saveRecordingBufferFrom:to:toURL:
_saveSamplesSeenInReset
_savedAudioFilesDirectory
_scaleFactor
_scaleInputWithInRangeOutRange:minIn:maxIn:minOut:maxOut:
_schduleDidStartRecordingDelegateWatchDogWithToken:
_scheduleActivateAudioSessionWithDelay:sessionActivateReason:scheduleReason:validator:completion:
_scheduleAlertFinishTimeout:
_scheduleAudioPacketWatchDog
_scheduleDidStartRecordingDelegateWatchDog
_scheduleDidStopRecordingDelegateWatchDog
_scheduleDidStopRecordingDelegateWatchDog:
_scheduleExtendedEndpointTimer
_scheduledAudibleFeedbackDelay
_scheduledFutureSample
_secondChanceHotTillMachTime
_secondPassAssetLoadCompleteTime
_secondPassAssetLoadStartTime
_secondPassAssetQueryCompleteTime
_secondPassAssetQueryStartTime
_secondPassCheckerModelKeywordDetectionEndTime
_secondPassCheckerModelKeywordDetectionStartTime
_secondPassFirstAudioPacketReceptionTime
_secondPassLastAudioPacketReceptionTime
_selectedChannel
_selectedResultCandidateId
_sendAcousticGradingDataToPeerId:
_sendCoreSpeechGradingDataToPeerId:
_sendCoreSpeechMagusGradingDataToPeerId:
_sendGeckoSpeechLogsToPeerId:
_sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:
_sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFileFlag:withFilePrefix:withCompletion:
_sendMessage:connection:completion:
_sendMessageAsync:completion:
_sendReplyMessageWithResult:error:event:client:
_sendVoiceProfile:toPeerId:
_sendVoiceProfileUpdateTriggerToPeerId:forLocale:
_sendVoiceTriggerGradingDataToPeerId:
_sendXPCClientType
_serverDidEndpoint
_serverDidRecognizeSpeech
_serverFeatureLatencies
_serverFeatureLatencyDistribution
_serverFeaturesQueue
_serverFeaturesWarmupLatency
_serverLoggingWriter
_serverState
_service
_serviceProxyWithErrorHandler:
_serviceWithErrorHandler:
_session
_sessionAttached:result:
_sessionDelegate
_sessionDetached:
_sessionEventDelegate
_sessionInfoProvider
_sessionInfoQueue
_sessionProvider
_sessionSetupGroup
_sessionTerminated:
_sessionUUID
_setAlarmIsPlaying:
_setAlertsIfNeeded
_setAsset:
_setAudioContextWithInfo:forReason:
_setAudioDuckingEnabled:
_setAudioSessionID:
_setDefaultParameters
_setDictationAudioModeEnabled:
_setEndpointStyle:
_setEndpointerOperationMode:forceUpdate:
_setLanguageDetectorDelegateIfRequired
_setLatestRecordContext:
_setMaximumBufferSizeFromInUseServices
_setMediaPlaybackState:isInterrupted:
_setNumLatestLangFromConfigFile:
_setQueue:
_setSoundPlayingState
_setSpeechCapturingMode:
_setStartAnalyzeTime:
_setTimerIsPlaying:
_setUpAccessoryManager
_setUpLocalDevice
_setupAttSiriSvcXpcConnection
_setupAudioConverter:isNarrowBand:
_setupAudioFileWritingForSpeechController:info:context:
_setupAudioProviderFromXPC:
_setupDownsamplerIfNeeded
_setupLanguageDetectorWithOption:
_setupNNVADEndpointer
_setupSignalProviders:
_setupSpeakerRecognitionController
_setupStarted
_sha1:
_sha256:
_shadowMicScoreCreator
_shadowMicScoreThresholdForVAD
_shouldDisableSpeakerVerificationInSplitterMode
_shouldDisableSpeechPacketGeneration
_shouldDuckOnBuiltInSpeaker
_shouldEmitInstrumentation
_shouldFetchRaiseToSpeakInfo
_shouldFetchVoiceTriggerInfo
_shouldHandleStartPendingOnStopping:withStopReason:
_shouldInjectAudio
_shouldKeepConnection
_shouldLogRawSensorData
_shouldLogResourceNotAvailableError
_shouldPauseLKFSProcess
_shouldPauseSSVProcess
_shouldReportBoron
_shouldReportEstimatedSpeechEndHostTime
_shouldResetAdsDictionary
_shouldResetContextAtPrepare
_shouldRollFakeModel
_shouldRunHybridSDSDMitigation
_shouldScheduleAudibleFeedbackAtStartRecording
_shouldSetStartSampleCount
_shouldSetStartSampleCountForRTS
_shouldSkipStartRecordingAlertForRecordingInfo:
_shouldStopRecording
_shouldTrackLaunchLatency
_shouldUseLanguageDetector:
_shouldUseLanguageDetectorForCurrentRequest
_shouldUsePhaticWithRecordContext
_shouldUseRemoteBuiltInMic:
_shouldUseRemoteRecorder
_sigGenTs
_sigProvidersMap
_sigType
_signalFractional
_signature
_silencePosterior
_silentVibrationState
_silentVibrationValue
_siriSessionUUID
_siriStateObserver
_size
_skipAlertBehavior
_smartSiriVolume
_smartSiriVolumeLKFS
_smartSiriVolumeNoiseLevel
_smtConnection
_softwareUpdateCheckingState
_sosQueue
_sourceASBD
_spIdSiriDebugGradingDataRootDirectory
_spIdSiriDebugTrainedUsersFilePathForLocale:
_spIdSiriDebugVTDataDirectory
_spIdSiriDebugVoiceProfileCacheDirectoryForProfile:locale:
_spIdSiriDebugVoiceProfileRootDirectoryForProfile:locale:
_spIdSiriDebugVoiceProfileStoreRootDirectory
_spIdSiriDebugVoiceProfileStoreRootDirectoryForLocale:
_spatialSpectrumData
_spatialSpectrumLogStr
_speakerIdDelegate
_speakerRecognitionAudioLogsGradingDir
_speakerRecognitionScores
_speechCapturingMode
_speechController
_speechControllerDidReceiveFirstAudioRecordBufferWithHostTime:atHostTime:mhUUID:
_speechControllerDidReceiveLastAudioRecordBuffer:forReason:estimatedSpeechEndHostTime:isRecordingStopped:
_speechControllerDidStartRecording:successfully:error:
_speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:errorCodeOverride:underlyingError:
_speechControllerRequestsOperation:forReason:completion:
_speechControllerWithError:
_speechEndHostTimeEstimator
_speechEndpointDetected
_speechEndpointerOperationMode
_speechEvent
_speechRecordingAlertPolicy
_speechRecordingEventListener
_speechRecordingEventListenerConnection
_speechRecordingMode
_speechVoiceLevel
_spgEndpointAnalyzer
_spgQueue
_splitterDeviceList
_splitterEnabled
_splitterState
_ssrConnection
_ssrXPCClient
_ssvClient
_ssvConnection
_ssvEnablePolicy
_ssvManager
_startAlertBehavior
_startAnalyzeSampleCount
_startAudioFeedingTimer
_startAudioPlaybackRequest:options:completion:
_startAudioStream:option:completion:
_startAudioStreamForAudioInjectionWithAVVCContext:
_startClearLoggingFilesTimer
_startDataSourcesWithContext:
_startDetected
_startDownloadingAsset:progress:completion:
_startEvent
_startListenPolling
_startListenPollingWithInterval:completion:
_startListenWithCompletion:
_startMonitorLanguageDetectorAssetDownload
_startMonitoring
_startMonitoringWithQueue:
_startObservingAVCallActiveChange
_startObservingOtherAppRecordingState
_startObservingSpeechDetectionVADPresence
_startObservingSystemControllerLifecycle
_startOfSpeechDetected
_startOfSpeechDetector
_startPendingOnStoppingStreamToCompletionDict
_startPendingOnStoppingStreams
_startPendingStreams
_startPeriodicalDownload
_startPhaticDecision
_startRecordingAudioSessionAssertion
_startRecordingHostTime
_startRecordingSampleCount
_startRecordingTimestamp
_startRecordingWatchDogToken
_startRequest:options:preparationHandler:executionHandler:finalizationHandler:
_startRequestWithCompletion:
_startSample
_startSampleCount
_startSignalProvidersWithContext:
_startSpeechId
_startStreamOption
_startWaitTime
_startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:
_stateNotificationQueue
_stateSerialQueue
_stop:
_stopAlertBehavior
_stopAllRequests:completion:
_stopAllRequestsSynchronously
_stopAudioStream:option:completion:
_stopCurrentlyRunningSignalProviders
_stopDataSources
_stopListening
_stopPendingStreams
_stopPeriodicalDownload
_stopRecordingForEndpointReason:withEndpointMetrics:
_stopRecordingHostTime
_stopRecordingInstrumented
_stopRecordingReason
_stopRecordingWatchDogToken
_stopRecordingWithReason:hostTime:
_stopRequest:immediately:
_stopTrackingRemoteAccessoryStreamId:
_storedActivationMode
_streamHandleQueue
_streamHolders
_streamRequest
_streamState
_streamStateName:
_streaming
_streamingUUID
_streams
_subscribeEventMonitors
_supportAVSystemVolumeFetch
_supportDoAP
_supportHearstVoiceTrigger
_supportLazySessionActivtion
_supportPhatic
_supportSessionActivateDelay
_supportTriagleModeSessionActivationRetry
_supportedLocale:
_supportsHybridSDSD
_suppressInterruptionEndedNotifications
_suppressRecordingStoppedAlert
_suppressStartAlert
_switchToListeningMode
_switchToRecordingMode
_systemControllerDied:
_tandemStreams
_targetQueue
_targetSpeed
_taskName
_taskThresholdMap
_tearDownAccessoryManager
_tearDownLocalDevice
_tearDownSpeechDetectionVADIfNeeded
_teardownAudioProviderIfNeeded
_teardownXPCClientIfNeeded
_timeoutInterval
_timerFiringState
_timerMonitor
_timerSoundIsFiring
_timestamp
_token
_totalAudioRecorded
_totalSampleCount
_trackRemoteAccessoryStreamIdIfNeeded:
_trailingPktLatencies
_trailingPktSpeechLatencies
_trailingSilenceDuration
_trailingSilenceDurationAtEndpoint
_transitions
_trialAssetDownloadMonitor
_trialAssetManager
_trialAssetMonitor
_trialDownloadMonitor
_triggerAbsStartSampleId
_triggerMachTime
_triggerNotifiedMachTime
_triggeredTwoShotBorealis
_twoShotAudibleFeedbackDecisionGroup
_twoShotDetectionAudioSessionAssertion
_twoShotNotificationEnabled
_twoShotStartTime
_type
_uid
_uncompressedAudioLogging
_underlyingError
_updateAccessibleEndpointerThresholdIfNeed
_updateAssetWithCurrentLanguageForAssetType:
_updateAssetWithLanguage:
_updateAssetWithLanguage:assetType:
_updateAudioContextToPostVoiceForReason:
_updateAudioContextWithInfo:reason:
_updateAudioContextWithPendingInfoForReason:
_updateAudioDeviceInfo:forReason:forcesUpdate:
_updateDeviceInfo:
_updateEndpointerDelayedTriggerByMhId:
_updateFromRemoteToLocalAssets:forAssetType:completion:
_updateLanguageCodeForRemoteVTEIResult:
_updateOEPAssetsWithLanguage:
_updateRecordBufferDuration
_updateRecordContextIfNeeded:
_updateRemoteDeviceIdFromAVVCIfNeeded
_upsampler
_url
_useBorealisBuffer
_useCustomizedRecordSettings
_useDefaultServerFeaturesOnClientLag
_useOpportunisticZLL
_usePrelistening
_userIntentValidForSeconds
_userIntentVolume
_userName
_userOffsetInputRangeHigh
_userOffsetInputRangeLow
_userOffsetOutputRangeHigh
_userOffsetOutputRangeLow
_userSpeakingEndedHostTime
_userSpeakingEndedTimeInMs
_userSpeakingStartedHostTime
_userSpeakingStartedTimeInMs
_uuid
_vadScore
_version
_voiceController
_voiceControllerCreationQueue
_voiceControllerWithError:
_voiceIdentificationBatchId
_voiceIdentificationTraining_allowedResultCandidateIds
_voiceIdentificationTraining_allowsWithoutResultCandidate
_voiceIdentificationTraining_resultCandidateToSharedUserIdMap
_voiceTriggerAssetDownloadMonitor
_voiceTriggerBatchId
_voiceTriggerDuringCallEnabledDidChange
_voiceTriggerEnabled
_voiceTriggerEndHostTime
_voiceTriggerEventInfo
_voiceTriggerInfo
_voiceTriggerSampleCount
_volumeController
_volumeMonitor
_vtEndInSampleCount
_vtExtraAudioAtStartInMs
_waitingForAlertFinish
_waitingForDidStart
_wakeGestureTimestamp
_wantsRecordedAudioBufferLogs
_wasCanceled
_wasLanguageToggled
_wordCount
_xpcClient
_xpcClientFactory
_xpcClientType
_xpcConnection
_xpcConnectionQueue
_xpcDelegateQueue
_xpcReplyQueue
_zeroCounter
_zeroFilter
acceptEagerResultWithFeatures:featuresToLog:
accessibilityState
accessibleEndpointerEnabled
accessibleEndpointerThreshold
accessoryManager:event:device:state:
accessoryModelTypeToString:
accessorySiriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:forAccessory:
accessorySiriClientBehaviorMonitor:didStopStream:reason:withEventUUID:forAccessory:
accessorySiriClientBehaviorMonitor:willStartStreamWithContext:option:forAccessory:
accessorySiriClientBehaviorMonitor:willStopStream:reason:forAccessory:
accessoryVoiceTriggerMetaDataByDeviceId
acousticFingerprinter:hasFingerprint:duration:
acousticSLResultForContext:completion:
acquireAudioSessionAssertionWithContext:relinquishmentHandler:
acquireRecordedAudioWithHandler:
activateAudioSessionForStream:isPrewarm:error:
activateAudioSessionForStream:isPrewarm:recordMode:error:
activateAudioSessionWithReason:streamHandleId:error:
activateConnection
activateStartTime
activationAlertStartTimestamp
activationAssertions
activationDeviceIdentifier
activationDeviceUID
activationEventNotificationHandler:event:completion:
activationEventTime
activationHostTime
activationInfo
activationMetadata
activationMode
activationSystemUptime
activeAudioRouteDidChange:
activeChannel
activeEndpointer
adBlockerAssetDecoderWithVersion:
adCompanionServiceProvider
adaptiveSiriVolumePermanentOffset
adaptiveSiriVolumeRecentIntent
addAudio:numSamples:
addAudioSamples:count:
addConditions:
addContextKey:fromMetaFile:
addContextKey:withContext:
addDataToBuffer:
addDelegate:
addDeviceIntoSplitterDeviceList:
addEntriesFromDictionary:
addKeyValuePair:with:
addKeyValuePairForQuery:assetType:
addListener:
addNumSamples:hostTime:
addObject:
addObjectsFromArray:
addObserver:
addObserver:forAssetType:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addPackets:audioStreamHandleId:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:
addPktInfoWithTimestamp:arrivalTimestamp:currentMachTime:
addQueue:heartBeatInterval:timeoutInterval:timeoutHandler:
addReceiver:
addSamples:numSamples:
addSamples:numSamples:atHostTime:
addSamples:timestamp:arrivalTimestampToAudioRecorder:
addTransitionFrom:to:for:
addTransitionFromAnyStateTo:for:
addUtterances:toProfile:withContext:withCompletion:
addVTAcceptEntryAndSubmit:
addVTRejectEntry:truncateData:
additionalMetrics
adpAssertion
alarmMonitor
alarmState
alarmVolume
alertDelegate
alertPlaybackFinishWaitingCompletions
alertPlaybackFinishWaitingStreams
alertProvider
alertStartTime
alignBufferQueue
allChannelsLpcmInterleavedASBD
allChannelsLpcmNonInterleavedASBD
allDeviceDisconnected
allInstalledAssetsOfType:language:
allValues
allowAdBlockerAssetDownloading
allowEndpointAssetDownloading
allowExtendedRingBufferSize
allowKeywordsFile
allowLanguageDetectorAssetDownloading
allowListWordCountThreshold
allowSpeakerRecognitionAssetDownloading
allowVoiceTriggerAccessoryAssetDownloading
allowVoiceTriggerAssetDownloading
alwaysOnProcessorController
alwaysOnVoiceTriggerEnabled
anchorMachAbsTime
announceCallsEnabled
announcementPlatform
appDomain
appendAcousticData:sampleCount:sampleRate:
appendAudioData:
appendBytes:length:
appendData:
appendFormat:
appendPCMData:
appendRecordedAudioBuffer:
appendString:
applicationBundleIdentifier
applicationDisplayName
applyLowerAndUpperBoundsToVolume:
applyLowerAndUpperBoundsToVolumeOffset:
applyNegative20dBGainToFloatBuffer:
applyNegative20dBGainToShortBuffer:
applyNegative32dBGainToFloatBuffer:
applyNegative32dBGainToShortBuffer:
array
arrayWithCapacity:
arrayWithObjects:count:
arrivalHostTimeToAudioRecorder
asrDatapackInstallationStatus
assertionMonitor
assetChangeMonitorDidDetectAssetChange:
assetForAssetType:resourcePath:configVersion:
assetForAssetType:resourcePath:configVersion:assetProvider:
assetForCurrentLanguageOfType:
assetForCurrentLanguageOfType:completion:
assetManager
assetManagerEnabledPolicy
assetOfType:language:
assetOfType:language:compatibilityVersion:completion:
assetOfType:language:completion:
assetOfType:providerType:language:completion:
assetProvider
assetServerUrl
assetStatus:
assetVersion
assetWithData:contentType:options:
assetsMigrationQueue
assetsProvider
assistantAudioFileLogDirectory
attSiriAttendingFailed
attSiriAttendingTimeoutTriggered
attSiriDidDetectAttendingTrigger:
attSiriStateMonitor:didRecieveAttSiriStateChange:
attSiriSvcConn
attachDevice:
attachProgressCallBack:
attachTandemStream:toPrimaryStream:completion:
attachToPrimaryStreamWithCompletion:
attendingState
attributes
atvRemoteDeviceID
audioAlertProvidingDelegate
audioAlertProvidingDidFinishAlertPlayback:ofType:error:
audioAlertStyleForRecordRoute:recordingInfo:playbackRoute:
audioBuffer
audioChunkAvailable:numChannels:numSamplesPerChannel:startSampleId:atAbsMachTimestamp:
audioChunkFrom:to:
audioChunkFrom:to:channelIdx:
audioChunkToEndFrom:
audioConverterBitrate
audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:
audioDecoderDidDecodePackets:audioStreamHandleId:buffer:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:
audioDeviceInfoWithStreamHandleId:recordDeviceIndicator:
audioEngineAudioChunkForTvAvailable:audioChunk:
audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:
audioEngineDidStartRecord:audioStreamHandleId:successfully:error:
audioEngineDidStopRecord:audioStreamHandleId:reason:
audioFeedTimer
audioFileReaderBufferAvailable:buffer:atTime:
audioFileReaderDidStartRecording:successfully:error:
audioFileReaderDidStopRecording:forReason:
audioFingerprintProvider
audioFormat
audioInjectionEnabled
audioInjectionEngines
audioInjectionFilePath
audioLoggingBuffer
audioMeterProvider
audioMetric
audioMetricProvider
audioPacketDeliveryCount
audioPacketWatchdog
audioPlaybackService:didStartRequest:
audioPlaybackService:didStopRequest:error:
audioPlaybackService:willStartRequest:
audioPlayerBeginInterruption:
audioPlayerDecodeErrorDidOccur:error:
audioPlayerDidFinishPlaying:successfully:
audioPlayerEndInterruption:
audioPlayerEndInterruption:withFlags:
audioPlayerEndInterruption:withOptions:
audioPreprocessor
audioPreprocessor:hasAvailableBuffer:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
audioProviderInvalidated:streamHandleId:
audioProviderUUID
audioProviderWithStreamID:
audioProviderWithUUID:
audioProviders
audioRecordContext
audioRecorder
audioRecorder:didSetAudioSessionActive:
audioRecorder:willSetAudioSessionActive:
audioRecorderBeginRecordInterruption:
audioRecorderBeginRecordInterruption:withContext:
audioRecorderBufferAvailable:audioStreamHandleId:buffer:
audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:
audioRecorderBuiltInAudioStreamInvalidated:error:
audioRecorderDidFinishAlertPlayback:ofType:error:
audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:
audioRecorderDidStopRecord:audioStreamHandleId:reason:
audioRecorderDisconnected:
audioRecorderEndRecordInterruption:
audioRecorderLostMediaserverd:
audioRecorderRecordHardwareConfigurationDidChange:toConfiguration:
audioRecorderStreamHandleIdInvalidated:
audioRecorderWillBeDestroyed:
audioRecorderWithQueue:error:
audioServerCrashEventProvidingLostMediaserverd
audioSessionActivated
audioSessionActivationDelay
audioSessionActivationTargetDate
audioSessionController
audioSessionController:didReceiveAudioSessionInterruptionNotificationWithUserInfo:
audioSessionController:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:
audioSessionController:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:
audioSessionController:didReceiveAudioSessionOwnerLostNotification:
audioSessionController:didReceiveAudioSessionOwnerResetNotification:
audioSessionController:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:
audioSessionEventProvidingDidSetAudioSessionActive:
audioSessionEventProvidingWillSetAudioSessionActive:
audioSessionID
audioSessionIdForDeviceId:
audioSessionInfoObservers
audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:
audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:
audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:
audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:
audioSessionProvider
audioSessionProvider:didChangeContext:
audioSessionProvider:didSetAudioSessionActive:
audioSessionProvider:providerInvalidated:
audioSessionProvider:willSetAudioSessionActive:
audioSessionProviderBeginInterruption:
audioSessionProviderBeginInterruption:withContext:
audioSessionProviderEndInterruption:
audioSessionProvidingDelegate
audioSessionSetActiveEndHostTime
audioSessionState
audioStream
audioStreamHandleId
audioStreamId
audioStreamProvider
audioStreamProvider:audioBufferAvailable:
audioStreamProvider:audioBufferAvailable:lastForwardedSampleCount:
audioStreamProvider:audioChunkForTVAvailable:
audioStreamProvider:avBufferAvailable:
audioStreamProvider:didHardwareConfigurationChange:
audioStreamProvider:didStopStreamUnexpectly:
audioStreamProvidingDelegate
audioStreamWithRequest:streamName:completion:
audioStreamWithRequest:streamName:error:
audioSystemRecovering
audioTapProvider
audioTimeConverter
audioURL
automaticEndpointingSuspensionEndTime
autorelease
averagePowerForChannel:
averagePowerForOutputReference
avgPower
avvcAlertBehavior
avvcContext
avvcContextSettings
avvcStartRecordSettingsWithAudioStreamHandleId:
azDistribution
batteryState
becomeCurrent
beepCanceller
beepCancellerDidCancelSamples:buffer:timestamp:
beepSoundID
beginAnnounceMessageException:reason:
beginRecordingAudioWithAudioStreamBasicDescription:
beginSampleCount
beginTimestamp
beginUpdateToPostVoice
beginWaitingForMyriad
bestEarlyDetectSample
bestEndDetectSample
bestScore
bestStart
bestStartDetectSample
bluetoothDevice:deviceInfoDidChangeFrom:to:
bluetoothDeviceDidInvalidate:
bluetoothSession
bluetoothSessionSetupGroup
boolValue
bufferDuration
bufferLength
buildVersion
builtInAudioInjectionEngine
builtInDevice
builtInMicVoiceTriggerEvent:hostTime:
builtInRTModelDictionary
builtInSeconPassProgressProvider
builtInSpeakerState
builtInVoiceTriggerMetaData
bundleIdFromDictation
bundleTvRemote
buttonDownHostTime
bypassSamples
bytes
bytesDataSize
cStringUsingEncoding:
cachedAsset
cachedAvgPower
cachedEndpointAssets
caesuraSPG
calculateShadowMicScore
canBePurged
canPerformDelayedStop
canPrepareWithoutInterruption
canPrewarm
canProcessCurrentRequest
cancel
cancelAudioLogging
cancelAudioStreamHold:
cancelBeepFromSamples:timestamp:
cancelCurrentLanguageDetectorRequest
cancelCurrentRequest
cancelDownloadSync
cancelIfNotAlreadyCanceled
cancelSpeechCaptureSuppressingAlert:
capacity
carPlayAuxStreamSupportDidChange:
carPlayConnected
carPlayIsConnectedDidChange:
certificate
channelForOutputReference
channelForProcessedInput
channels
checkFirstUnlocked
checkerThresholds
chunkForChannel:
circBuffer
circularBuffer
circularBufferInputRecordingDuration
circularBufferNumInputChannel
circularBufferStartHostTime
circularBufferStartSampleCount
clampedSFLatencyMsForClientLag
class
classifyUserIdentityFor:withScores:withAsset:
clearLoggingFileTimer
clearLoggingFileTimerCount
clearTriggerCount:
clientConnections
clientController
clientForAudioProviding
clientForAudioSessionInfoProviding
clientForFallbackAudioSessionReleaseProviding
clientForMacOSDuckAudioDevice
clientForSmartSiriVolumeProviding
clientLagThresholdMs
clientSilenceFramesCountMs
clientSilenceProbability
clockAlarmObserver:alarmDidDismiss:
clockAlarmObserver:alarmDidFire:
clockAlarmObserver:snapshotDidUpdateFrom:to:
clockTimerObserver:snapshotDidUpdateFrom:to:
clockTimerObserver:timerDidDismiss:
clockTimerObserver:timerDidFire:
close
code
codec
codecIsNarrowband
commandControlBehaviorMonitor:didStartStreamWithContext:successfully:option:
commandControlBehaviorMonitor:didStopStream:
commandControlBehaviorMonitor:willStartStreamWithContext:option:
commandControlBehaviorMonitor:willStopStream:
commandControlListener:didStopUnexpectly:
commandControlListener:hasLPCMBufferAvailable:
companionSyncVoiceTriggerUtterancesEnabled
compare:
compareScoresDesc:
componentsJoinedByString:
componentsSeparatedByString:
confidence
confidences
configFile
configVersion
configureAlertBehavior:
configureAlertBehavior:audioStreamHandleId:
configureWithAudioStreamBasicDescription:
conformsToProtocol:
connect:
connectDevice:
connectDeviceWithUUID:completion:
connectedDeviceAddresses
connectedDevices
connection
contConvConfigFile
contConvThresholds
containsCategory:
containsMultiUserThresholds
containsSpeakerRecognitionCategory
containsValueForKey:
contentsOfDirectoryAtPath:error:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
contextForBuiltInVoiceTrigger
contextForHearstVoiceTriggerWithDeviceId:
contextForOpportuneSpeakerListener
contextForOpportuneSpeakerListenerWithCall
contextForRemoraVoiceTriggerWithDeviceId:
continuousAudioFingerprintEnabledPolicy
continuousVoiceTrigger:detectedSilenceAfterVoiceTriggerAt:
continuousVoiceTrigger:detectedVoiceTriggerResult:
conversationalMessages
convertSISchemaAudioInputRouteToMHRoute:withRecordingInfo:
convertSampleRateOfBuffer:
convertToFloatLPCMBufFromShortLPCMBuf:
convertToShortLPCMBufFromFloatLPCMBuf:
converterForAudioStreamId:
copy
copyBufferWithNumSamplesCopiedIn:
copySamplesFrom:to:
copySamplesFrom:to:channelIdx:
copySamplesFromAudioSampleCount:toAudioSampleCount:
copyWithZone:
copybufferFrom:to:
coreSpeechDaemonStateMonitor:didReceiveStateChanged:
count
countByEnumeratingWithState:objects:count:
crashEventDelegate
createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:
createAudioFileWriterForOpportuneSpeakListenerWithInputFormat:outputFormat:
createAudioFileWriterForRemoteVADWithInputFormat:outputFormat:withLoggingUUID:
createAudioFileWriterWithInputFormat:outputFormat:withLoggingUUID:
createAudioInjectionDeviceWithType:deviceName:deviceID:productID:completion:
createAudioStreamMessageWithRequest:
createBenchamrkXPCConnection
createDirAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createMockRemoteDeviceWithName:deviceID:completion:
createPrepareAudioStreamMessageWithRequest:
createRTModelWithLocale:
createSharedAudioSession
createStartAudioStreamMessageWithOption:
createStopAudioStreamMessage
csAssetsDictionary
csAudioProcessingQueuePriority
currActiveDataSourceTypes
currActiveSigProvTypes
currentAsset
currentBuiltinSpeakerState
currentCarPlayExternalDevice
currentContext
currentDarwinHostState
currentHandler
currentInputDeviceUIDArray
currentInputRoute
currentItem
currentLanguageCode
currentMaximumBufferSize
currentOutputRoute
currentPowerSource
currentPowerState
currentRawPowerState
currentRequestSampleRate
currentRoute
currentRunLoop
currentSessionShouldDuckOnBuiltInSpeaker
currentShadowMicScore
currentSpeed
currentState
currentVTSatScore
data
dataBufferNDEAPI
dataBufferPositionNDEAPI
dataSrcMap
dataUsingEncoding:
dataWithBytes:length:
dataWithCapacity:
dataWithContentsOfFile:
dataWithContentsOfFile:options:error:
dataWithJSONObject:options:error:
dataWithRemoteVADWithScaleFactor:numAudioSamplesPerRemoteVAD:
date
dateAdded
dateByAddingTimeInterval:
dateByAddingTimeIntervalSinceActivation:
dateWithTimeIntervalSinceNow:
daysBeforeRemovingLogFiles
deactivateAudioSession:error:
deactivateAudioSession:streamHandleId:error:
deactivateAudioSessionForStream:withOptions:error:
deactivateAudioSessionWithOptions:
deactivateEndTime
deactivateForReason:options:context:completion:
deactivateSiriActivationConnectionWithReason:withOptions:withContext:
deactivateStartTime
debugDescription
debugLogPath
decodeInt64ForKey:
decodeIntegerForKey:
decodeJson:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
decoderProcessedSampleCountForTV
decodersForTV
decreaseSiriVolumeBasedOnUserIntent
defaultCStringEncoding
defaultCenter
defaultContext
defaultContinousFingerprintBufferDuration
defaultController
defaultConverter
defaultFactory
defaultFallbackModelIfNil:
defaultInjectionProvider
defaultManager
defaultOption
defaultOutputAudioDeviceID
defaultProtocolInfo
defaultRequestWithContext:
defaultServerEndpointFeatures
deinterleaver
delay
delegate
delegates
deleteUserVoiceProfile:
description
destination
detectedToken
device:serviceMask:serviceEventType:serviceSpecificEvent:result:
deviceBuildVersion
deviceCategory
deviceConnectedWithUUID:
deviceDisconnectedWithUUID:
deviceID
deviceId
deviceIdentifier
deviceInfo
deviceName
deviceProductType
deviceProductVersion
deviceRingerSwitchState
deviceRoleIsStereo
deviceType
deviceUID
deviceWithAddress:
deviceWithUID:
dictationInputOrigin
dictationLanguagePriors
dictationLanguages
dictationVoiceTriggerAbsStartSampleId
dictionary
dictionaryWithDictionary:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didAddAudio
didCommunicateEndpoint
didDeliverFirstSpeechPacket
didDeliverLastBuffer
didDetectHardEndpointAtTime:withMetrics:
didDetectKeywordWithResult:
didDetectStartpointAtTime:
didDetectTwoShotWithAudioActivationInfo:atTime:
didEndpointWithFeatures:audioTimestamp:featuresToLog:endpointPosterior:extraDelayMs:
didFinishSpeakerRecognition:
didIgnoreEvent:from:
didPlayEndpointBeep
didReceiveAlarmChanged:
didReceiveAlarmVolumeChanged:
didReceiveMusicVolumeChanged:
didReceiveServerFeatures
didReceiveSpeakerRecognitionScoreCard:
didReceiveTimerChanged:
didReportEndpointDelay
didSetScaleFactor
didSmartSiriVolumeChangeForReason:
didStartDelayInSeconds
didStopRecordingWithError:
didTTSVolumeChange:forReason:
didTTSVolumeChangeForReason:
didTimestampFirstAudioPacket
didTransitFrom:to:by:
didWin
digest
disableAdaptiveSiriVolume:
disableAssertionReceived
disableBoostForDoAP
disableEndpointer
disableLocalSpeechRecognizer
disablePrewarmLocalAsrAtStartRecording
disableSpeechPacketGeneration:
disconnect
disconnect:
disconnectDevice:
disconnectDeviceWithUUID:completion:
dismissalTimestamp
dispatchStateChangedFrom:to:
distributionDictionary:
domain
doubleValue
downsampler
droppedPrediction
droppingPrediction
dspStatus
duckAudioXPCClient
duckOthersOption
effectiveBoolValueForSetting:
elapsedTimeWithNoSpeech
emitRequestLinkEventForMHUUID:
enableAlwaysOnVoiceTrigger
enableAssertionReceived
enableAudioInjection:
enableMiniDucking:
enablePolicy
enableProgrammableAudioInjection:
enableSmartRoutingConsideration:
enableSmartRoutingConsiderationForStream:enable:
enableSmartRoutingConsiderationForStream:enable:error:
enableSpeakerStateListening:completionBlock:
enableVoiceTrigger:withAssertion:
enableVoiceTrigger:withAssertion:timestamp:
enableVoiceTrigger:withAssertion:xpcClient:
encodeInt64:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeWithCoder:
encoderBitRate
endAnnounceMessageException:reason:
endAudio
endAudioAndFetchAnyTrailingZerosPacket:
endAudioWithCancellation:
endMonitoring
endOfSentenceLikelihood
endPointAnalyzerType
endPointNotified
endRecordingAudio
endRequest
endSample
endTimestamp
endUpdateToPostVoiceWithContext:success:
endWaitTime
endWaitingForMyriadWithDecision:
endpointAnalyzer
endpointBufferHostTime
endpointId
endpointMode
endpointStyle
endpointThreshold
endpointTimeInMs
endpointType
endpointer:detectedTwoShotAtTime:
endpointer:didDetectHardEndpointAtTime:withMetrics:
endpointer:didDetectStartpointAtTime:
endpointer:reportEndpointBufferHostTime:firstBufferHostTime:
endpointerAssetManagerDidUpdateAsset:
endpointerAssetManagerDidUpdateOSDAsset:
endpointerConnection
endpointerDelegate
endpointerImplDelegate
endpointerModelVersion
endpointerOperationMode
endpointerType
enforcePreviousEndpointHint
engineWithDeviceType:streamHandleId:
enter
enumerateKeysAndObjectsUsingBlock:
enumerateObjects:
enumerateObjectsUsingBlock:
enumerateObservers:
enumerateObserversInQueue:
enumeratorAtPath:
eosLikelihood
epResult
error
errorAlertBehavior
errorWithCode:
errorWithCode:description:
errorWithCode:description:underlyingError:
errorWithDomain:code:userInfo:
estimateSoundLevelbySoundType:
estimatedAzimuth
estimatedSpeechEndHostTime
estimatedStartHostTime
estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:
estimatedUserSpeakingEndedHostTime
estimatedUserSpeakingStartedHostTime
event
eventToStateTransitions
expectedStopHostTime
expectedTimeRemaining
expressionForConstantValue:
expressionForFunction:arguments:
expressionValueWithObject:context:
extraDelayFrequency
fFile
fadeInDuration
fakeAssetMonitor
fakeAssetRollNotificationRegistrationToken
fakeEndpointAssetPath
fakeHearstModelPath
fakeMitigationAssetPath
fakeVoiceTriggerAssetPath
fallBackAssetResourcePath
fallbackAudioSessionReleaseProvider
fallbackDeactivateAudioSession:error:
falseWakePhraseDictionary
fanId
featuresAtEndpoint
fetchAudioDeviceInfo
fetchAudioMetricsWithCompletion:
fetchAudioSessionID
fetchCurrentEndpointerOperationMode
fetchDeviceUUIDStringFromUID:
fetchFallbackAudioSessionReleaseProvider
fetchHypotheticalRouteType
fetchInitSystemVolumes
fetchIsEnabled
fetchRecordingInfo
fetchRemoteMetaOfType:
fetchRemoteMetaOfType:allowRetry:
fetchRemoteVoiceTriggerAssetForLanguageCode:completion:
fetchRichDeviceUIDStringFromUUID:
fetchVoiceTriggerDailyStats
fetchVoiceTriggerHeartBeatMetrics
fetchVoiceTriggerInfoWithAudioContext:triggerInfoProviding:resultVoiceTriggerInfo:resultRTSTriggerInfo:
fetchVoiceTriggerStats
fetchVolumeFromAVSystemControllerForAudioCategory:
fileDescriptor
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileLoggingIsEnabled
fileOption
fileSystemRepresentation
fileURLWithPath:
fileURLWithPath:isDirectory:
filterZerosInAudioPacket:atBufferHostTime:filteredPacket:
filteredArrayUsingPredicate:
filteredAssetsForAssets:assetType:language:
filteredAssetsForFetchRemoteMetaDataForAssets:assetType:
firstAudioPacketTimestamp
firstBufferHostTime
firstBufferTimestamp
firstObject
firstPartyCall
firstPassDebuggingEnabled
firstPassInfoGeneratedTime
firstPassInfoProcessedTime
firstPassMyriadGoodnessScore
firstPassTriggerInfo
firstUnlockMonitor
firstpassMetrics
flexKwdConfigFile
flexKwdThresholdFile
floatValue
flush
flushWithCompletion:
forceSuccessAudioAlertOnStop
forceVoiceTriggerAPMode
gainCompensatedChunk
geckoAudioLogDirectory
generateAudioWithTexts:language:completion:
generateConfusionPairsWithUUID:parameters:language:task:samplingRate:recognizedTokens:recognizedText:correctedText:selectedAlternatives:completion:
generateDeviceAudioLogging:speechId:
generateEmptyPHash:writeFile:
generatePHashFromVoiceTriggerInfo:writeFile:
gestureMonitorDidReceiveSleepGesture:
gestureMonitorDidReceiveWakeGesture:
getASVUserIntent:
getAccessoryFallbackFamilyLocal:fromLocaleMap:
getAccessoryFallbackLocalTable
getAdBlockerAssetTypeString
getAdBlockerCurrentCompatibilityVersion
getAssetTypeForNamespace:
getAssetTypeStringForType:
getAttendingState
getAttendingTimeoutConfig
getAudioConverterForTest
getAudioInjectionXPCConnection
getAudioRecordRouteAndDeviceIdentificationWithCompletion:
getAudioRouteInstrumentationWithRecordingInfo:
getAudioSessionID
getAudioSessionIDWithCompletion:
getAudioSessionState
getAveragePowerDB
getAveragePowerForStream:forChannel:
getBTDeviceWithAddress:completion:
getBTDeviceWithDeviceUID:completion:
getBestAnalyzedResultsFromAudioChunk:
getBestSampleCountWithOption:
getBiometricMatchResultForTriggerTimeStamp:
getCSAssetOfType:
getCategoryKeyWithRecordCtx:
getConnectedBluetoothDeviceAddressesWithCompletion:
getCoreSpeechServiceConnection
getCoreSpeechXPCConnection
getCurrentEndpointerAsset
getCurrentFanInfo:
getCurrentOSDAsset
getCurrentSessionState
getCurrentStreamState:
getCurrentVoiceTriggerLocaleWithEndpointId:completion:
getDeviceInfo:
getElapsedTimeNoSpeechWithReply:
getEndPointAnalyzerTypeWithReply:
getEndpointAssetCurrentCompatibilityVersion
getEndpointAssetTypeString
getEndpointerModelVersionWithReply:
getFiringAlarmIDsWithCompletion:
getFiringTimerIDsWithCompletion:
getFirstPassRunningMode
getFirstPassRunningMode:
getFixedPrioritySerialQueueWithLabel:fixedPriority:
getFrameDurationMs
getHeadphoneInEarDetectionState:
getHeadphoneListeningMode:
getHearstConnected:
getHearstRouted:
getHomeUserIdForSharedUserId:completion:
getHostClockFrequency
getInstalledAssetofType:forLocale:completion:
getJarvisConnected:
getLPCMAudioStreamBasicDescription
getLanguageDetectorAssetTypeString
getLanguageDetectorCurrentCompatibilityVersion
getLastBiometricMatchEvent:atTime:
getLastResult
getLastStartpointTimestampAndCurrentTime:
getLocalUrl
getMachTimeAdjustedVoiceTriggerEventInfoForDeviceUUID:
getMitigationAssetWithEndpointId:completion:
getMitigationDecisionForRCId:completion:
getMitigationDecisionForRCIdWithCompletion:completion:
getNumElementInBitset:
getNumberForKey:category:default:
getPeakPowerDB
getPeakPowerForStream:forChannel:
getRecordBufferDuration
getRecordDeviceInfoForStream:
getRecordSettingsForStream:
getResourceValue:forKey:error:
getSSVDeviceType
getSerialQueue:qualityOfService:
getSerialQueue:withQualityOfService:andTargetQueue:
getSignature:
getSiriInputSourceOutOfBand:
getSiriLanguageWithEndpointId:fallbackLanguage:
getSiriLanguageWithFallback:
getSmartSiriVolume
getSpeakerRecognitionAssetTypeString
getSpeakerRecognitionCurrentCompatibilityVersion
getStartOfSpeechAudioLogFilePath
getStateWithCompletion:
getStringForKey:category:default:
getTestResponse:
getThreshold
getTrialIdsForAssetType:withCompletion:
getTriggerCount:
getTriggerMode
getUUIDBytes:
getValueForKey:category:
getValueFromDictionaryOfDictionaries:keypath:
getVoiceTriggerAssetCurrentCompatibilityVersion
getVoiceTriggerAssetTypeString
getVoiceTriggerAssetWithEndpointId:completion:
getVoiceTriggerCurrentCompatibilityVersion
getVoiceTriggerEndSampleCountFromVTEI:
getVolumeForTTSType:
getVolumeForTTSType:withContext:
getVolumeForTTSType:withContext:reply:
getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:
getWirelessSplitterInfoWithCompletion:
getZeroStatisticsFromBuffer:entireSamples:
globalLastKeyboardUsed
handleBeginInterruption
handleEndInterruption:
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
handleOtherAppRecordingStateChange:
handlePendingBuiltInVoiceTriggerIfNeeded
handlePendingRemoraVoiceTriggerIfNeeded
handleRingVibrationValueChange
handleSilentVibrationValueChange
handleSiriRequest:deliveryHandler:completionHandler:
handleSpeechDetectionVADPresentChange:
handleSpeechRecordingEvent:
handleVoiceTriggerWithActivationInfo:
handleXPCMessage:messageBody:client:
hardwareInterfaceVendorID
hasConnectedAVCall
hasDarwinDeviceConnected
hasDarwinDeviceHandleVoiceTrigger
hasPendingTwoShotBeep
hasPerformedDelayedStop
hasPlayedStartAlert
hasReceivedEarlyDetectNDEAPIResult
hasReceivedNDEAPIResult
hasRemoteBuiltInMic
hasRemoteCoreSpeech
hasReported
hasSpaceAvailable
hasSuffix:
hash
hashFromResourcePath
hashTableWithOptions:
headerString
headsetAddress
headsetName
hearstNumberOfBytesPerChunk
hearstNumberOfSamplesPerChunk
hearstRTModelLocaleMap
hearstRTModelWithMajorVersion:minorVersion:locale:
hearstRouted
heartBeatFiredWithQueue:
hepAudioOriginInMs
historicalBufferRequestStreams
holdAudioStreamWithDescription:timeout:
homeButtonDownEventMachAbsoluteTime
homeId
horsemanDeviceType
hostTime
hostTimeBuffer
hostTimeForSeconds:
hostTimeFromSampleCount:
hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:
hostTimeToNs:
hostTimeToSeconds:
hostTimeToTimeInterval:
hosttime
hybridClassifier
hybridClassifierQueue
hybridEndpointer
identifier
implDelegate
inASBD
inUseServices
increaseSiriVolumeBasedOnUserIntent
init
initFileURLWithPath:isDirectory:
initTandemWithOption:
initTandemWithRequest:
initWithAVVCRecordDeviceInfo:
initWithAddress:dataSource:queue:
initWithAnalyzeMode
initWithAppBundleIdentifier:
initWithArray:
initWithAssertionMonitor:
initWithAsset:
initWithAsset:assetConfig:firstPassSource:activeChannel:siriLanguage:shouldEnableShadowMicScore:
initWithAssetManager:withTrialAssetManager:withTrialDownloadMonitor:withLanguageCodeUpdateMonitor:withAssetOverrideFlag:withOverrideAssetPath:
initWithAssetsProvider:dataSourceMap:signalProviderToDataSourceMap:
initWithAudioDeviceID:
initWithAudioRecorder:
initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:
initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:phoneCallStateMonitor:
initWithAudioStreamProvider:streamName:streamRequest:
initWithAudioURL:withScaleFactor:outASBD:
initWithBackingStoreCapacity:minimalNumberOfBackingStores:maximumNumberOfBackingStores:backingStoreIdleTimeout:
initWithBlob:
initWithBlock:
initWithBlock:defaultValue:
initWithBool:
initWithBytes:length:
initWithCapacity:
initWithCoder:
initWithConfig:samplingRate:minSpeechFrames:numLeadingFrames:delegate:
initWithConfigFile:
initWithConfigFile:sampleRate:context:queue:delegate:
initWithConfigFile:samplingRate:queue:
initWithConfiguration:
initWithConfiguration:modelVersion:
initWithConnection:
initWithContentsOfURL:error:
initWithCrashMonitor:
initWithData:
initWithData:encoding:
initWithData:error:
initWithData:hash:locale:
initWithData:hash:locale:digest:signature:certificate:
initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:arrivalHostTimeToAudioRecorder:wasBuffered:remoteVAD:
initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:remoteVAD:
initWithDataSource:assetsProvider:
initWithDelegate:
initWithDescription:
initWithDescription:timeout:
initWithDeviceId:audioStreamHandleId:
initWithDeviceType:deviceName:deviceID:productID:
initWithDeviceUID:dataSource:queue:
initWithDictation:codec:
initWithDictation:fingerprintOnly:secureOfflineOnly:audioAlertStyle:recordSettings:recordRoute:recordDeviceInfo:playbackRoute:audioDeviceID:audioSessionID:voiceTriggerEventInfo:activationAlertStartTimestamp:startRecordingTimestamp:firstBufferTimestamp:firstBufferHostTime:estimatedSpeechEndHostTime:deviceIdentifier:includeBTInfo:speechEvent:
initWithDictionary:
initWithDispatchQueue:
initWithDomain:code:userInfo:
initWithDownloadOption:
initWithDroppingPrediction:droppedPrediction:timestamp:
initWithDuckOthers:duckToLevel:mixWithOthers:
initWithEndpointId:
initWithEndpointId:xpcClientFactory:endpointer:continuousVoiceTrigger:siriVolumeController:mediaPlayingMonitor:alarmMonitor:timerMonitor:sacInfoMonitor:audioSessionController:supportPhatic:supportHearstVoiceTrigger:supportTriagleModeSessionActivationRetry:supportSessionActivateDelay:supportLazySessionActivtion:
initWithEndpointThreshold:
initWithError:
initWithFakeMonitor:
initWithFileDescriptor:closeOnDealloc:
initWithFilePath:appendHdr:
initWithFirstPassSource:deviceId:audioProviderUUID:firstPassInfo:rejectionMHUUID:isSecondChanceRun:firstpassMetrics:
initWithHash:locale:
initWithIdentifier:queue:effectiveDate:expirationDuration:heartBeatInterval:heartBeatHandler:invalidationHandler:
initWithInASBD:outASBD:
initWithInitialState:
initWithInstanceContext:
initWithItemURL:itemData:numberOfLoops:volume:fadeInDuration:fadeOutDuration:userInfo:
initWithListenerEndpoint:
initWithLongLong:
initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:
initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:queue:
initWithMachServiceName:
initWithMachServiceName:options:
initWithMessage:makeAppFrontmost:
initWithMode:deviceUID:
initWithModelURL:
initWithName:clientQueue:
initWithName:options:queue:delegate:
initWithNumChannels:recordingDuration:samplingRate:
initWithNumChannels:recordingDuration:samplingRate:audioTimeConverter:
initWithObjectsAndKeys:
initWithOptions:capacity:
initWithOverrideOption:reason:
initWithPattern:options:error:
initWithProtocolVersion:buildVersion:deviceProductVersion:deviceProductType:deviceCategory:
initWithQueue:
initWithQueue:delegate:
initWithQueue:error:
initWithQueue:instanceContext:
initWithQueue:qosClass:asynchronous:
initWithQueue:request:options:
initWithQueue:speechController:audioSessionController:audioPlaybackService:experimentContext:
initWithRMSScore:lastSampleCount:
initWithRecordContext:deviceId:shouldUseRemoteRecorder:streamHandleId:
initWithRecordDeviceInfo:playbackRoute:playbackDeviceTypeList:
initWithRecordType:deviceId:
initWithRecordingDuration:audioSamplesPerRemoteVAD:audioSampleRate:
initWithRequestMHUUID:
initWithRequestMHUUID:turnIdentifier:
initWithRequestSource:
initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:
initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:remoteDeviceUIDString:
initWithSampleRate:
initWithSampleRate:withNumberOfChannels:
initWithSamplingRate:asset:
initWithServiceName:
initWithServicePort:
initWithSessionUUID:turnIdentifier:
initWithSharedSiriId:languageCode:productCategory:version:sharedHomeId:userName:
initWithSignalType:timestamp:
initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:
initWithSpeechRecordingMode:clientConfiguration:experimentContext:
initWithStartSample:endSample:confidence:azimuth:estimatedAzimuth:
initWithStopRecordingReason:expectedStopHostTime:trailingSilenceDurationAtEndpoint:
initWithStoredInformationAndAsset:
initWithStreamHandleId:
initWithStreamHandleId:withInputRecordingNumberOfChannels:
initWithStreamID:atStartHostTime:
initWithStreamID:settings:bufferDuration:
initWithSuiteName:
initWithTargetQueue:
initWithTaskDeliverer:
initWithTimeout:
initWithTimeoutInterval:onQueue:timeoutHandler:
initWithToken:sampleRate:numChannels:
initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:serverFeatureLatencyDistribution:additionalMetrics:trailingSilenceDurationAtEndpoint:
initWithType:
initWithType:deviceId:activationInfo:hosttime:
initWithType:deviceId:activationInfo:vadScore:hosttime:
initWithType:fileHandle:priority:
initWithType:pathGenerator:priority:
initWithURL:
initWithURL:inputFormat:outputFormat:
initWithUTF8String:
initWithUUIDString:
initWithUnsignedLongLong:
initWithVoiceRetrainingContext:error:
initWithVoiceTriggerAssetDownloadMonitor:languageCodeUpdateMonitor:firstUnlockMonitor:trialAssetDownloadMonitor:assetManager:trialAssetManager:
initWithVolumeEstimate:debugLogFile:
initWithWindowStartTime:
initWithWordCount:trailingSilenceDuration:endOfSentenceLikelihood:pauseCounts:silencePosterior:clientSilenceFramesCountMs:clientSilenceProbability:silencePosteriorNF:serverFeaturesLatency:
initWithWordCount:trailingSilenceDuration:endOfSentenceLikelihood:pauseCounts:silencePosterior:clientSilenceFramesCountMs:clientSilenceProbability:silencePosteriorNF:serverFeaturesLatency:eagerResultEndTime:
initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:
initWithWordCount:trailingSilenceFrames:endOfSilenceLikelihood:pauseCounts:silencePosterior:taskName:
initWithXPCObject:
initWithZeroWindowSize:approxAbsSpeechThreshold:numHostTicksPerAudioSample:
initialState
initialize
initializeAlarmState
initializeMediaPlayingState
initializeRecordSessionWithRecordContext:
initializeTimerState
injectAudio:
injectAudio:toDeviceWithUUID:completion:
injectAudio:toDeviceWithUUID:withNumChannels:completion:
injectAudio:toDeviceWithUUID:withScaleFactor:completion:
injectAudio:toDeviceWithUUID:withScaleFactor:withNumChannels:completion:
injectAudio:toDeviceWithUUID:withfadingTimeWindowLength:completion:
injectAudio:withScaleFactor:playbackStarted:completion:
injectionAudioFileList
injectionStartNotifyBlocks
inputRecordingBufferDuration
inputRecordingBytesPerFrame
inputRecordingBytesPerPacket
inputRecordingDuration
inputRecordingDurationInSecs
inputRecordingDurationInSecsExtended
inputRecordingFramesPerPacket
inputRecordingIsFloat
inputRecordingNumberOfChannels
inputRecordingSampleBitDepth
inputRecordingSampleByteDepth
inputRecordingSampleRate
inputRecordingSampleRateNarrowBand
inputs
installedAssetForCurrentLanguageOfType:
installedAssetForCurrentLanguageOfType:completion:
installedAssetOfType:language:
installedAssetOfType:language:completion:
installedAssetOfType:withLanguage:
installedAssetOfType:withLanguage:completion:
installedVoiceTriggerAssetForLanguageCode:completion:
instrumentSiriCue:
instrumentSiriCueForAlertType:
intValue
integerValue
interactionID
interfaceProductID
interfaceVendorID
interfaceWithProtocol:
internalUserClassification
interspeechWaitTime
invalidate
invalidateXPCConnection
invocationFeedbackExperiment
invoke
invokeWithSignal:
invokeWithValue:
isASRFeatureFromServer
isAdBlockerAudioLoggingEnabled
isAdaptiveSiriVolumePermanentOffsetEnabled
isAdaptiveSiriVolumeTemporaryIntentValid
isAlarmPlaying
isAlertBehaviorOverridedBeep
isAnalyzeMode
isAnchorTimeBuffered
isAsrOnDevice
isAttachingBluetoothSession
isAttending
isAttendingForDictation
isAttentiveSiriAudioLoggingEnabled
isAttentiveSiriEnabled
isAudioRecordTypeSupportedByRemora
isAudioSessionActivated
isAvailable
isBluetooth
isBluetoothVehicleOutput
isBuiltInVoiceTriggered
isBuiltinSpeakerMuted
isBultInVoiceTriggerEvent:
isCSAssetInstalled
isClamshellClosed
isConfident
isConnected
isDarwinOS
isDarwinVoiceTriggered
isDefaultInputBuiltInMic
isDefaultOutputBultInSpeaker
isDeviceInCarDNDMode
isDeviceRoleStereo
isDictation
isDictationVoiceTriggerEnabled
isDownloading
isDucking
isDuckingSupportedOnCurrentRouteWithStreamHandleID:error:
isDuckingSupportedOnPickedRouteForStream:error:
isEarlyDetect
isEarpieceActiveNoiseCancelationEnabled
isEnabled
isEndAlertInfo
isEndpointAssetBypassTrialEnabled
isEndpointAssetOverridingEnabled
isEqual:
isEqualAsset:
isEqualToNumber:
isEqualToString:
isFeatureGroupOneEnabled
isFingerprintOnly
isForwarding
isHSVoiceTrigger:
isHeadlessDeviceDataCollectionModeEnabled
isHeadphoneDeviceWithRecordRoute:playbackRoute:
isHearstVoiceTriggered
isHomePressed
isHybridUODEnabled
isIOSDeviceSupportingBargeIn
isInternalWithoutProfile
isJarvisVoiceTriggered
isKindOfClass:
isLatestCompareTo:
isListenPollingStarting
isListening
isLocalVoiceTriggerAvailable
isMediaPlaying
isMediaPlayingNow
isMemberOfClass:
isMitigationAssetOverridingEnabled
isMonitoring
isNarrowBand
isNviEnabled
isOnPhoneCall
isOpportuneSpeakListening
isOpus
isOtherNonEligibleAppRecording
isP2PTransferEnabled
isPHSSupported
isPhraseSpotterBypassed
isPlaying
isPluginDevice
isPremium
isPresent
isPrimaryVoiceTriggerDeviceWithUUID:
isRTSTriggered
isRaiseToSpeakBypassed
isRecordContextAutoPrompt:
isRecordContextBuiltInVoiceTrigger:
isRecordContextDarwinVoiceTrigger:
isRecordContextHearstVoiceTrigger:
isRecordContextJarvisButtonPress:
isRecordContextJarvisVoiceTrigger:
isRecordContextRaiseToSpeak:
isRecordContextRemoraVoiceTrigger:
isRecordContextSpeakerIdTrainingTrigger:
isRecordContextVoiceTrigger:
isRecording
isRecordingWithRecordDeviceIndicator:
isRemoraVoiceTriggerEvent:
isRemoraVoiceTriggered
isRemoteDarwinConnectedWithUUID:
isRemoteDarwinWithDeviceId:
isRemoteDevice
isRemoteDeviceDarwin
isRemoteDeviceGibraltar
isRemoteVADAvailableStream
isRequestDuringActiveCall
isRequestTimeout
isRestricted
isScreenLocked
isSecondChanceRun
isSecondPassRunning
isSecureOfflineOnly
isSelfTriggerEnabledAccessory
isSessionCurrentlyActivated
isSiri
isSiriClientConsideredAsRecord
isSiriClientListening
isSiriRestrictedOnLockScreen
isSmartSiriVolumeAvailable
isSoundPlaying
isSpeakerMuted
isSpeakerRecognitionAvailable
isSpeaking
isSpokenNotification
isSpringboardStarted
isStarkTriggered
isStreaming
isTVRemote
isTemporaryPairedNotInContacts
isTest
isTimerPlaying
isTriggerHandheld
isTriggeredFromHearst
isUpsamplingSourceAudio
isUserActive
isValidRecordContext:
isVibrationDisabled
isVoiceOverTouchEnabled
isVoiceTriggerAssetOverridingEnabled
isVoiceTriggerInfoAvailableLocally:
isVoiceTriggered
isWakeGestureAvailable
isWatchRTSTriggered
isWeakStream
itemData
iterateBitset:block:
jarvisRTModelLocaleMap
jarvisVoiceTriggerEvent:activationInfo:hostTime:
kSSVCAUserIntentPermanentOffsetFactorDelta
kSSVCAUserIntentPermanentOffsetFactorLowerBound
kSSVCAUserIntentPermanentOffsetFactorUpperBound
kSSVCAUserIntentVolumeDecreaseFactor
kSSVCAUserIntentVolumeIncreaseFactor
kSSVCA_DEVICE_DEFAULT_MAX_TTS_VOLUME
kSSVCA_DEVICE_DEFAULT_MIN_TTS_VOLUME
kSSVCA_DEVICE_SIMPLE_MAX_TTS_VOLUME
kSSVCA_DEVICE_SIMPLE_MIN_TTS_VOLUME
keyboardConvoLanguagePriors
keyboardGlobalLanguagePriors
keysOfEntriesPassingTest:
keywordAnalyzerNDEAPI
keywordAnalyzerNDEAPI:hasResultAvailable:forChannel:
keywordDetectorNDAPIConfigFilePath
keywordDetectorQuasarConfigFilePath
languageCode
languageCodeDarwin
languageCodeUpdateMonitor
languageDetectionUserContext
languageDetector
languageDetector:confidences:
languageDetector:result:
languageDetectorAssetHash
languageDetectorAssetMonitor:didReceiveNewAssetWithSupportLocale:
languageDetectorConfigFile
languageDetectorDelegate
languageDetectorDidCompleteProcessing:loggingInfo:
languageDetectorDidDetectLanguageWithConfidence:confidence:isConfident:
languageDetectorRequestContext
languageDetectorSetMostRecentRecognitionLanguage:
languageDetectorUserContext
lastAggTimeFalseWakeUp
lastAudioChunkHostTime
lastAudioRecorderContext
lastCommunicatedPeer
lastDetectedVoiceTriggerBeginSampleCount
lastEndOfVoiceActivityTime
lastEndpointPosterior
lastFakeModelUsedHash
lastForwardedSampleCount
lastHash
lastKnowServerFeaturesLatency
lastKnownOSDFeatures
lastKnownServerEPFeatures
lastObject
lastPathComponent
lastReportedEndpointTimeMs
lastServerFeatureTimestamp
lastSilencePosterior
lastStartOfVoiceActivityTime
latestContext
latestDetectedLanguages
latestHearstRTModelForLocale:
latestPluginStreamId
latestVolume
latestVolumeTime
latticeRnnMitigatorScore
latticeRnnMitigatorThreshold
launchSiriDebugAppWithMessage:
leave
length
lengthOfBytesUsingEncoding:
limitedAudioLoggingEnabled
linkItemAtURL:toURL:error:
listMockRemoteDeviecesWithCompletion:
listenPollingTimer
listenPollingTimerCount
listener
listener:shouldAcceptNewConnection:
listeningEnabledCompletionBlock:
localDevice
localDevice:event:result:
localDeviceProtocolInfo
locale
localeMapWithName:
localeWithLocaleIdentifier:
localizedDescription
logAOPFirstPassTriggerWakeupLatency:
logAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:
logData:
logEventUUID
logEventWithType:context:
logEventWithType:context:contextNoCopy:
logEventWithType:contextProvider:
logEventWithType:contextResolver:
logEventWithType:machAbsoluteTime:context:
logEventWithType:machAbsoluteTime:context:contextNoCopy:
logFalseWakeUp:withPhrase:
logFeaturesWithEvent:locale:
logHybridEndpointFeaturesWithEvent:locale:
logInstrumentation:machAbsoluteTime:turnIdentifier:
logLanguageMismatchMetricWithJarvisSelectedLocale:jarvisTriggerMode:
logMHASRAudioConfigureStartedWithMHUUID:withAudioCodecString:withAudioSkippedNumSamples:
logMHASRAudioConfigureStartedWithMHUUID:withAudioCodecString:withAudioSkippedTimeInNs:
logMHAssistantDaemonAudioBluetoothInfoWithMHUUID:withWirelessSplitterSessionState:withAudioDeviceCategory:
logMHAssistantDaemonAudioConfigureContextWithMHUUID:withConfigureStarted:
logMHAssistantDaemonAudioFetchRouteContextWithMHUUID:withFetchRouteContextStarted:
logMHAssistantDaemonAudioLateBufferDetectedWithMHUUID:withBufferReceiptTimeInNs:
logMHAssistantDaemonAudioPrepareContextWithMHUUID:withPrepareStarted:
logMHAssistantDaemonAudioPrewarmContextWithMHUUID:withPrewarmStarted:
logMHAssistantDaemonAudioRecordingContextWithMHUUID:withAudioRecordingStarted:withAudioInputRoute:withAudioSource:withAudioInterfaceVendorId:withAudioInterfaceProductId:
logMHAssistantDaemonAudioRecordingFailedWithMHUUID:withReason:vendorId:productId:
logMHAssistantDaemonAudioRecordingFirstBufferWithMHUUID:withStartEvent:withFirstBufferStartTimeOffsetNs:withFirstBufferReceiptTimeOffsetNs:
logMHAssistantDaemonAudioRecordingInterruptionContextWithMHUUID:withStartEvent:withLinkID:withAvAudioSessionInterruptorName:withAVAudioSessionInterrupterType:
logMHAssistantDaemonAudioRecordingInterruptionStartedTier1WithMHUUID:withLinkID:withActiveSessionDisplayIDs:
logMHAssistantDaemonAudioRecordingLastBufferWithMHUUID:withStartEvent:withLastBufferStartTimeOffsetNs:withLastBufferReceiptTimeOffsetNs:
logMHAssistantDaemonAudioRecordingMissedBufferDetectedWithMHUUID:
logMHAssistantDaemonAudioStartRecordingContextWithMHUUID:withStartRecordingContext:withFanInfoArray:withActiveSessionDisplayIDs:
logMHAssistantDaemonAudioStopRecordingContextWithMHUUID:withStopRecordingStarted:withADStopRecordingEvent:
logSecondPassResult:eventInfo:triggerAPWakeUp:
logSiriLaunchCompletedWithVoiceTriggerEventInfo:
logSiriLaunchStartedWithVoiceTriggerEventInfo:
logTriggerLengthSampleCountStatistics:withFirstPassDeterministicTriggerLengthSampleCount:
logTwoShotDetectedWithMHUUID:
logTwoShotEndEventWithSuppresedAlert:withTimedOut:withMHUUID:
logTwoShotStartEventWithPromptType:withMHUUID:
loggingDict
loggingQueue
longLongValue
lpcmASBD
lpcmBitDepth
lpcmFloatASBD
lpcmInt16ASBD
lpcmInt16NarrowBandASBD
lpcmInterleavedASBD
lpcmInterleavedWithRemoteVADASBD
lpcmIsFloat
lpcmMonoInterleavedWithRemoteVADASBD
lpcmMonoNonInterleavedWithRemoteVADASBD
lpcmNarrowBandASBD
lpcmNonInterleavedASBD
lpcmNonInterleavedWithRemoteVADASBD
mapTableWithKeyOptions:valueOptions:
maxAllowedEnrollmentUtterances
maxAllowedTrailingSamplesAfterSchedulingStop
maxFingerprintBufferSize
mediaPlaybackVolume
mediaPlayingMonitor
mediaPlayingObserverQueue
mediaPlayingState
mediaPlayingStateWithCompletion:
mediaserverdLaunchedEvent:
memoryPressureObserver:didChangeFromCondition:toCondition:
mhId
mhLogDirectory
mhSource
micUsageReporter
minimumDurationForEndpointer
mitigationConfigFileForCategory:
mitigatonConfigFile
modelData
modelHash
modelLocale
modelName
monoChannelLpcmASBD
mostSampledAzimuth
moveItemAtPath:toPath:error:
multiUserConfidentScoreThreshold
multiUserDeltaScoreThreshold
multiUserHighScoreThreshold
multiUserLowScoreThreshold
multilingualKeyboardLanguages
musicVolume
musicVolumeWithCompletion:
mutableBytes
mutableCopy
mutatedCopyWithMutator:
myriadHashFilePath
name
narrowBandOpusConverter
needsBoost12dB
needsToUpdateModel
needsUpdateToPostVoiceMode
newVoiceProfileWithLocale:withAppDomain:
nextObject
nldaConfigFile
nldaConfigFileForCategory:
noAlertOption
notifyActivationEvent:completion:
notifyActivationEvent:deviceId:activationInfo:completion:
notifyActivationEventSynchronously:completion:
notifyBluetoothDeviceVoiceTrigger:deviceId:completion:
notifyBluetoothDeviceVoiceTriggerPrewarm:deviceId:completion:
notifyBuiltInVoiceTrigger:myriadPHash:completion:
notifyBuiltInVoiceTriggerPrewarm:completion:
notifyCallbackWithOption:
notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:
notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:
notifyClientsWithBlock:
notifyDaemonStateChanged:
notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:
notifyDarwinVoiceTriggerPrewarmWithCompletion:
notifyDidStartStreamWithContext:audioProviderUUID:successfully:option:
notifyDidStartStreamWithContext:successfully:option:
notifyDidStartStreamWithContext:successfully:option:withEventUUID:
notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAccessory:
notifyDidStopStream:
notifyDidStopStream:reason:withEventUUID:forAccessory:
notifyDidStopStream:withEventUUID:
notifyFetchedSiriClientAudioStream:successfully:
notifyHashlessTrigger:
notifyImplicitTrainingUtteranceAvailable:forVoiceProfileId:withRecordDeviceInfo:withRecordCtxt:withVoiceTriggerCtxt:withOtherCtxt:assetToUse:withCompletion:
notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:
notifyInEarMyriadTrigger
notifyNewVoiceTriggerAssetMetaDataUpdated
notifyObserver:didChangeStateFrom:to:
notifyObserver:didReceiveNotificationWithToken:
notifyObservers:endpointId:
notifyPreparedSiriClientAudioStream:successfully:
notifyProviderContextChanged
notifyReleaseAudioSession
notifyRemoraVoiceTrigger:myriadPHash:deviceId:completion:
notifyRemoraVoiceTriggerPrewarm:deviceId:completion:
notifyServiceConnectionLost
notifySiriLanguageCodeChanged:
notifySiriSessionStateChange:
notifySiriSessionStateTTSOngoing:
notifyToken
notifyTrailingSilenceDurationAtEndpoint:
notifyVoiceTriggerAssetChanged
notifyVoiceTriggerDisabledWithDeviceUUID:
notifyVoiceTriggerEnabledWithDeviceUUID:
notifyVoiceTriggeredSiriSessionCancelled
notifyVoiceTriggeredSiriSessionCancelledWithXpcClient:
notifyWakeKeywordSpokenBluetoothDevice:deviceId:
notifyWakeKeywordSpokenCarPlay:deviceId:
notifyWakeKeywordSpokenInBuiltInMic:
notifyWakeKeywordSpokenRemora:deviceId:
notifyWillStartStreamWithContext:audioProviderUUID:option:
notifyWillStartStreamWithContext:option:
notifyWillStartStreamWithContext:option:forAccessory:
notifyWillStopStream:
notifyWillStopStream:reason:
notifyWillStopStream:reason:forAccessory:
nowPlayingObserver:playbackStateDidChangeFrom:to:lastPlayingDate:
nowPlayingObserver:proxyGroupPlayerStateDidChangeFrom:to:
nowPlayingObserverNowPlayingInfoDidChange:
numAudioSampleForwarded
numBytesPerSample
numChannels
numFalseWakeUp
numInputChannels
numLatestLanguages
numLeadingFrames
numOfAVVCRecordingClients
numOfAudioPackets
numOfValidTrailingPackets
numSamples
numSamplesProcessed
numSamplesProcessedBeforeAnchorTime
numTrailingSamplesAfterSchedulingStop
numberOfChannels
numberOfLoops
numberOfTotalFramesETFT
numberOfVoicingFrames
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithInteger:
numberWithLongLong:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
nviCtx
nviDataSourceTypeForStr:
nviDirectionalityEndingChannelId
nviDirectionalityLpcmInterleavedASBD
nviDirectionalityLpcmNonInterleavedASBD
nviDirectionalityStartingChannelId
nviLogsRootDir
nviSignalTypeForStr:
objCType
objectAtIndex:
objectAtIndexedSubscript:
objectEnumerator
objectForKey:
objectForKeyedSubscript:
observeValueForKeyPath:ofObject:change:context:
observers
onboardType
open
opportuneSpeakBehaviorMonitor:didStartStreamWithContext:audioProviderUUID:successfully:option:
opportuneSpeakBehaviorMonitor:didStopStream:
opportuneSpeakBehaviorMonitor:willStartStreamWithContext:audioProviderUUID:option:
opportuneSpeakBehaviorMonitor:willStopStream:
opportuneSpeakEventMonitor:didStreamStateChanged:
opportuneSpeakListener:didStopUnexpectly:
opportuneSpeakListener:hasRemoteVADAvailable:
opportuneSpeakListener:hasVADAvailable:
opportuneSpeakListener:hasVADAvailable:withHostTime:
opportuneSpeakListenerBypassEnabled
opportuneSpeakListeningType
opportuneSpeakListnerTestService
opportuneSpeakingFileLoggingIsEnabled
opusASBD
opusConverter
opusNarrowBandASBD
osdAnalyzer
osdAnalyzer:didDetectEndOfSpeechAt:
osdAnalyzer:didDetectStartOfSpeechAt:
osdAnalyzer:didUpdateOSDFeatures:
osdFeaturesAtEndpoint
osdQueue
outputReferenceChannel
outputStreamToFileAtPath:append:
overridePath
overrideStartingAlertBeepSoundID
pHash:length:
pNonInterleavedABL
packetDescriptionCount
packetDescriptions
pairedDeviceAddresses
path
pathExtension
pause
pauseCounts
payloadData
peakPower
peakPowerForChannel:
peakPowerForOutputReference
pendingActivationEvent
pendingAudioSessionActivationCompletion
pendingAudioSessionActivationReason
pendingAudioSessionActivationToken
pendingBuiltInVoiceTriggerCompletionBlk
pendingBuiltInVoiceTriggerDetectedTime
pendingBuiltInVoiceTriggerResult
pendingCompletion
pendingRecordingStopUUID
pendingRemoraVoiceTriggerCompletionBlk
pendingRemoraVoiceTriggerDetectedTime
pendingRemoraVoiceTriggerDeviceId
pendingSecondPassTriggerWasClearedForClient:deviceId:
pendingStartCompletions
pendingStopCompletions
performBlockAfterAlerts:timeout:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performTransitionForEvent:
permanentOffsetFactor
permanentOffsetIsEnabled
persistentDomainForName:
phoneCallState
phoneCallStateMonitor
phraseSpotterEnabled
pickTopScoringProfileIdFromScores:
pickableRoutesDidChange:
pickedRoute
pingpong:
pingpong:completion:
platformSupportsImplicitUttAddition
play
playAlertSoundForType:
playAlertSoundForType:overrideMode:
playAlertSoundForType:recordDevideIndicator:
playRecordStartingAlertAndResetEndpointer
playRecordStartingAlertAndResetEndpointerFromStream:
playRecordingStartAlert
playbackDeviceTypeList
playbackRoute
playerItemDidPlayToEndTime:
playerItemFailedToPlayToEndTime:
playingApps
portName
postBuildInstallService
powerLogSiriConfigWithVoiceTriggerEnabled:withLanguage:withModelVersion:
powerLoggingCurrentAssetConfigVersion
powerLoggingCurrentLanguage
powerMeter
powerWithNumFalseWakeup:withDuration:withPhraseDict:
predicateWithBlock:
preferredExternalRouteDidChange:
preheatLocalSpeechRecognitionWithLanguage:source:
preheatRecognizerWithOption:
preheatWithOption:
prepareAudioProviderWithContext:clientType:error:
prepareAudioStream:request:completion:
prepareAudioStreamRecord:recordDeviceIndicator:error:
prepareAudioStreamSync:request:error:
prepareAudioStreamSyncWithRequest:error:
prepareAudioStreamWithRequest:completion:
prepareForMode:withOptions:
prepareLogging
prepareRecordForStream:error:
prepareRecordWithSettings:error:
prepareRecording:
prepareSoundLevelBufferFromSamples:soundType:firedVoiceTriggerEvent:triggerStartTimeSampleOffset:triggerEndTimeSampleOffset:
prepareSpeechCaptureWithOptions:error:
prepareToPlay
prepareWithOptions:audioSession:completion:
presentationMode
prevAudioProcessedMs
previousMessageLanguage
prewarmAudioSession
prewarmAudioSessionWithError:
prewarmAudioSessionWithStreamHandleId:error:
prewarmDeviceWithIdentifier:
prewarmRequest:completion:
primaryInputDevice
primaryInputDeviceUUIDWithCompletion:
primaryStream
processASRFeatures:fromServer:
processAudioBytes:withNumberOfSamples:
processAudioChunk:
processAudioChunk:activeChannel:
processAudioSamplesAsynchronously:
processBuffer:atTime:
processBuffer:atTime:arrivalTimestampToAudioRecorder:
processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:
processFloatBuffer:stride:inFrameToProcess:
processIdentifier
processInfo
processOSDFeatures:withFrameDurationMs:
processRCWithId:duration:lrnnScore:lrnnThreshold:taskId:forceAccept:completionHandler:
processRemoteCommandWithPayload:fromPeer:withReply:
processSampleCount:hostTime:
processServerEndpointFeatures:
processServerFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:
processShortBuffer:stride:inFrameToProcess:
processTaskString:
processedAudioDurMs
processedAudioDuration
processedAudioDurationInMilliseconds
processedAudioInSeconds
processedAudioMs
productID
productId
productIdentifier
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileID
profileId
progCheckerConfigFile
progCheckerShadowMode
programmableAudioInjectionEnabled
propertyDictForDarwin
providerDelegate
provisionedVoiceProfilesForLocale:
pruningExplicitUttThresholdPSR
pruningExplicitUttThresholdSAT
pruningNumRetentionUtterance
pruningThresholdPSR
pruningThresholdSAT
psrCombinationWeight
purgeSync
queryMetaData:
queryMetaDataSync
queryParams
queue
raiseToSpeakDetected:
rangeOfFirstMatchInString:options:range:
rawMicChannelsDataWithNumSamplesPerChannel:
rcHandlingClient
readAudioChunksFrom:block:
readJsonDictionaryAt:
readSamplesFromChannelIdx:
receiveOpportuneSpeakListenerStart
receiveOpportuneSpeakListenerStop
receivers
recordContext
recordContextForSpeechEvent:
recordContextString:
recordDeviceIdentifier
recordDeviceIndicator
recordDeviceInfo
recordDeviceInfoWithStreamHandleId:recordDeviceIndicator:
recordQueue
recordRecognitionLanguage:
recordRoute
recordRouteWithRecordDeviceIndicator:
recordSettings
recordSettingsWithOptions:appendingSettings:
recordSettingsWithStreamHandleId:
recordingAlertPolicy
recordingDidStop
recordingInfoForPreheatWithEvent:
recordingSampleRateWithStreamHandleId:
recordingStoppedForReason:
recordingTransaction
recordingWillStartGroup
registerAssetDelegate:assetType:
registerDatapackUpdate
registerMultilingualUaapApp:withAssetFiles:completion:
registerObserver:
registerSignalProviderDelegate:forSignalTypes:
registerSignalProviderDelegateForAllSignalTypes:
registerSiriClientProxy:
registerSpeechController:
registerUaapApp:forLocale:withAssetFiles:completion:
registerUaapApp:withAssetFiles:completion:
registerXPCActivities
relativePath
releaseAudioSession
releaseAudioSession:
relinquishAudioSessionAssertionsWithContext:
relinquishAudioSessionAssertionsWithError:
relinquishWithContext:options:
relinquishWithError:options:
reload
remoraRTModelLocaleMap
remoraRTModelWithMajorVersion:minorVersion:locale:
remoraSecondPassProgressProvider
remoraVoiceTriggerEvent:activationInfo:hostTime:
remoraVoiceTriggerEvent:hostTime:
remoteAccessoryStreamIdSet
remoteDeviceProductIdentifier
remoteDeviceUIDString
remoteGradingDataDirectory
remoteMicVADEvent:vadScore:hostTime:
remoteMicVoiceTriggerEvent:activationInfo:hostTime:
remoteObjectProxy
remoteObjectProxyWithErrorHandler:
remoteP2pLogDirectory
remoteProductIdentifier
remoteRecordConnectionDisconnected:
remoteRecordDidStartRecordingWithStreamHandleId:error:
remoteRecordDidStopRecordingWithWithStreamHandleId:error:
remoteRecordLPCMBufferAvailable:streamHandleId:
remoteRecordTwoShotDetectedAtTime:
remoteSvcProxy
remoteVAD
remoteVADAlignBuffer
remoteVADAlignCount
remoteVADDuration
remoteVADSPGRatio
remoteVADSampleCount
remoteVADSubChunkFrom:numSamples:numAudioSamplesPerRemoteVAD:
remoteVoiceActivityAvailable
remoteVoiceActivityVAD
remoteVoiceActivityVADBuffer
removeAllListeners
removeAllObjects
removeFromRunLoop:forMode:
removeItemAtPath:error:
removeItemAtURL:error:
removeLogFilesOlderThanNDays:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObserver:forAssetType:
removeObserver:name:object:
removeOpportunisticAudioLoggingOlderThanNDays:
removeQueue:
removeRemoteP2PLogFilesOlderThanNDays:
replaceBytesInRange:withBytes:
replaceBytesInRange:withBytes:length:
replaceCurrentItemWithPlayerItem:
replaceMatchesInString:options:range:withTemplate:
report
reportDigitalZerosWithAudioZeroRun:
reportEndpointDelayIfNeed
reportIssueForType:subType:context:processIdentifier:walkboutStatus:
reportMetricsForSiriRequestWithUUID:
reportServerEndpointWithMhId:
reportsDynamicActivityAttribute:bundleId:
reportsDynamicActivityAttributeAsync:bundleId:
reportsDynamicActivityAttributeSync:bundleId:
reqSrc
reqStartAudioSampleId
reqStartMachAbsTime
requestForLpcmRecordSettingsWithContext:
requestForOpusRecordSettingsWithContext:
requestForSpeexRecordSettingsWithContext:
requestHistoricalAudio
requestHistoricalAudioDataSampleCount
requestHistoricalAudioDataWithHostTime
requestMHUUID
requestSupportedWithSamplingRate:
requestUpdatedSATAudio
requestUpdatedSATAudio:
requestedStopRecordingOptions
requireSingleChannelLookup
requiresBorealisConsumerCheck
requiresHistoricalBuffer
reset
resetAudioSession
resetDuckSettings
resetForNewRequest
resetForNewRequest:
resetForNewRequestWithSampleRate:recordContext:
resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:
resetForVoiceTriggerTwoShotWithSampleRate:
resetWithSampleRate:
resetWithSampleRate:containsVoiceTrigger:voiceTriggerInfo:
resignCurrent
resourcePath
respondsToSelector:
resultId
resume
resumeConnection
retain
retainCount
retrieveSessionWithID:
returnTypes:
rmsSamplesForEntireAudio
rootLogDir
rootQueueWithFixedPriority:
route
rtModelLocaleMapWithModelType:
rtModelWithAccessoryRTModelType:majorVersion:minorVersion:locale:
rtsTriggerInfo
runAudioInjectionOnly:completion:
runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:
runNovDetectorWithConfig:configRoot:withUrl:completion:
runODLDModelWithConfig:locale:inputText:completion:
runOSDAnalyzerWithConfig:withUrl:completion:
runVTSecondPassModelWithConfig:locale:withUrl:completion:
runningSampleCount
sacInfoMonitor
sampleCount
sampleCountFromHostTime:
sampleCountFromHostTime:anchorHostTime:anchorSampleCount:sampleRate:
sampleRate
samplesFed
samplingRate
satImplicitProfileDeltaThreshold
satImplicitProfileThreshold
satImplicitTrainingEnabled
satScoreThreshold
satScoreThresholdForPhId:
satVTImplicitThreshold
saveAudioChunck:toURL:
saveRecordingBufferFrom:to:toURL:
saveRecordingBufferToEndFrom:toURL:
saveSamplesSeenInReset
scaleFactor
scheduleInRunLoop:forMode:
scheduledFutureSample
screenIDs
secondChanceHotTillMachTime
secondPassAssetLoadStartTime
secondPassAssetQueryCompleteTime
secondPassAssetQueryStartTime
secondPassAudioStreamReadyTime
secondPassAudioStreamStartTime
secondPassCheckerModelKeywordDetectionEndTime
secondPassCheckerModelKeywordDetectionStartTime
secondPassDidStartForClient:deviceId:withFirstPassEstimate:
secondPassDidStopForClient:deviceId:
secondPassFirstAudioPacketReceptionTime
secondPassLastAudioPacketReceptionTime
secondsForHostTime:
secondsToHostTime:
secondsToNs:
seekToTime:toleranceBefore:toleranceAfter:
seekToTime:toleranceBefore:toleranceAfter:completionHandler:
selectFallbackModelForLocale:downloadedModels:preinstalledModels:rtLocaleMap:
self
selfTriggerDetector:didDetectSelfTrigger:
sendAcousticGradingDataToNearbyPeer
sendCoreSpeechGradingDataToNearbyPeer
sendGeckoSpeechLogsToCompanion
sendMessageAndReplySync:error:
sendMessageAsync:completion:
sendMessageWithPayload:toPeer:withReply:
sendVTNearMissGradingDataToCompanion
sendVoiceProfileUpdatedMessageToNearbyPeerForLocale:
serverAudioSessionActivationDelay
serverAudioSessionActivationDelayAboveMediaPlaybackVolumeThreshold
serverFeatureLatencies
serverFeatureLatencyDistribution
serverFeaturesLatency
serverFeaturesQueue
serverFeaturesWarmupLatency
serverLoggingWriter
serverMediaPlaybackVolumeThresholdForAudioSessionActivationDelay
serverState
sessionEventDelegate
sessionForContext:error:
sessionInfoProvider
sessionInfoQueue
sessionUUID
setASBD:
setASVUserIntent:
setAVVCAlertBehavior:
setAccessoryVoiceTriggerMetaDataByDeviceId:
setActionAtItemEnd:
setActivateEndTime:
setActivateStartTime:
setActivationAssertions:
setActivationExpirationTime:
setActivationMetadata:
setActivationMode:
setActivationSource:
setActive:error:
setActive:withOptions:error:
setActiveChannel:
setActiveEndpointer:
setAdCompanionServiceProvider:
setAdditionalMetrics:
setAddress:
setAdpAssertion:
setAlarmMonitor:
setAlertDelegate:
setAlertPlaybackFinishTimeoutToken:
setAlertPlaybackFinishWaitingCompletions:
setAlertPlaybackFinishWaitingStreams:
setAlertProvider:
setAlertSoundFromURL:forType:
setAlertSoundFromURL:forType:force:
setAlignBufferQueue:
setAllowAdBlockerAssetDownloading:
setAllowEndpointAssetDownloading:
setAllowLanguageDetectorAssetDownloading:
setAllowMixableAudioWhileRecording:error:
setAllowSpeakerRecognitionAssetDownloading:
setAllowVoiceTriggerAccessoryAssetDownloading:
setAllowVoiceTriggerAssetDownloading:
setAllowsCellularAccess:
setAnchorMachAbsTime:
setAnnounceCallsEnabled:
setAnnounceCallsEnabled:withStreamHandleID:
setAnnounceCallsEnabledForStream:enable:
setApQueue:
setAsrDatapackInstallationStatus:
setAssertionMonitor:
setAsset:
setAssetDownloadingOption:
setAssetManager:
setAssetQueryQueue:
setAssetsMigrationQueue:
setAssetsProvider:
setAttSiriSvcConn:
setAttendingState:
setAttributes:ofItemAtPath:error:
setAtvRemoteDeviceID:
setAudioAlertDelegate:
setAudioDeviceInfo:
setAudioFeedTimer:
setAudioFileHandle:
setAudioFileType:
setAudioFileWriter:
setAudioInjectionEngines:
setAudioInjectionFilePath:
setAudioInjectionMode:
setAudioInputRoute:
setAudioLoggingBuffer:
setAudioMeterProvider:
setAudioMetricProvider:
setAudioPacketDeliveryCount:
setAudioPacketWatchdog:
setAudioPreprocessor:
setAudioProviderDelegate:
setAudioProviderUUID:
setAudioProviders:
setAudioRecordContext:
setAudioRecorder:
setAudioServerCrashEventDelegate:
setAudioSession:
setAudioSessionController:
setAudioSessionDelegate:
setAudioSessionEventDelegate:
setAudioSessionInfoObservers:
setAudioSessionProvider:
setAudioSessionProvidingDelegate:
setAudioSessionSetActiveEndHostTime:
setAudioSessionState:
setAudioStreamHandleId:
setAudioStreamProvider:
setAudioStreamProvidingDelegate:
setAudioStreamType:
setAudioSystemRecovering:
setAudioTapProvider:
setAudioTimeConverter:
setAutomaticEndpointingSuspensionEndTime:
setAvgPower:
setAzDistribution:
setAzimuth:
setBeepCanceller:
setBestEarlyDetectSample:
setBestEndDetectSample:
setBestStartDetectSample:
setBluetoothSession:
setBluetoothSessionSetupGroup:
setBufferDuration:
setBuiltInDevice:
setBuiltInSeconPassProgressProvider:
setBuiltInSpeakerState:
setBundleIdFromDictation:
setBundleTvRemote:
setBypassSamples:
setCachedAvgPower:
setCachedEndpointAssets:
setCachedPeakPower:
setCaesuraSPG:
setCallback:
setCanPerformDelayedStop:
setCanProcessCurrentRequest:
setCanUseLocalCacheServer:
setCircBuffer:
setCircularBuffer:
setCircularBufferStartSampleCount:
setClampedSFLatencyMsForClientLag:
setClasses:forSelector:argumentIndex:ofReply:
setClearLoggingFileTimer:
setClearLoggingFileTimerCount:
setClientConfiguration:
setClientConnections:
setClientController:
setClientLagThresholdMs:
setComponent:
setConfidence:
setConfigFile:
setConnectedDevice:
setConnectedDeviceAddresses:
setConnectedDevices:
setConnection:
setContext:completion:
setContext:streamType:error:
setContextForStream:forStream:error:
setConversationalMessages:
setCrashEventDelegate:
setCsAssetsDictionary:
setCurSpeechFrames:
setCurrActiveDataSourceTypes:
setCurrActiveSigProvTypes:
setCurrentAsset:
setCurrentAttributionKey:andApp:
setCurrentContext:error:
setCurrentContext:streamHandleId:error:
setCurrentDictationLanguage:
setCurrentHEPAsset:
setCurrentKeyboard:
setCurrentMaximumBufferSize:
setCurrentOEPAsset:
setCurrentRecordContext:error:
setCurrentRequestSampleRate:
setCurrentSessionShouldDuckOnBuiltInSpeaker:
setCurrentSpeed:
setCurrentState:
setDataBufferNDEAPI:
setDataBufferPositionNDEAPI:
setDataSrcMap:
setDateFormat:
setDeactivateEndTime:
setDeactivateStartTime:
setDecoderProcessedSampleCountForTV:
setDecodersForTV:
setDeinterleaver:
setDelay:
setDelayInterstitialSounds:level:completion:
setDelegate:
setDelegate:forType:
setDelegates:
setDetectedToken:
setDeviceId:
setDeviceRoleIsStereo:
setDeviceUID:
setDictationLanguagePriors:
setDictationLanguages:
setDidCommunicateEndpoint:
setDidDeliverLastBuffer:
setDidDetectSpeech:
setDidReceiveServerFeatures:
setDidReportEndpointDelay:
setDidSetScaleFactor:
setDidStartDelayInSeconds:
setDidTimestampFirstAudioPacket:
setDisableBoostForDoAP:
setDisableEndpointer:
setDisableLocalSpeechRecognizer:
setDisablePrewarmLocalAsrAtStartRecording:
setDiscretionary:
setDismissalTimestamp:
setDuckAudioXPCClient:
setDuckMixWithOthersForStream:duckOthers:duckToLevelInDB:mixWithOthers:
setDuckOthersForStream:withSettings:error:
setDuckOthersOption:
setDuckOverride:
setDuckToLevelDB:error:
setEARLanguageDetectorSpeechRequestId:
setEffectiveDate:
setElapsedTimeWithNoSpeech:
setEnable:
setEnableAlwaysOnVoiceTrigger:
setEnablePolicy:
setEnabled:
setEncoder:
setEncoderBitRate:
setEndPointNotified:
setEndSample:
setEndpointAnalyzerDelegate:
setEndpointBufferHostTime:
setEndpointId:
setEndpointMode:
setEndpointStyle:
setEndpointThreshold:
setEndpointTimeInMs:
setEndpointerConnection:
setEndpointerDelayedTrigger:
setEndpointerDelegate:
setEndpointerImplDelegate:
setEndpointerModelVersion:
setEndpointerOperationMode:
setEndpointerProxy:
setEndpointerThreshold:
setEndpointerType:
setEosLikelihood:
setEpResult:
setErrorAlertBehavior:
setEstimatedAzimuth:
setEstimatedStartHostTime:
setEventToStateTransitions:
setExportedInterface:
setExportedObject:
setExtraDelayFrequency:
setFFile:
setFakeAssetMonitor:
setFakeAssetRollNotificationRegistrationToken:
setFallbackAudioSessionReleaseProvider:
setFalseWakePhraseDictionary:
setFanId:
setFeaturesAtEndpoint:
setFileLoggingIsEnabled:
setFileOption:
setFingerprintInterval:
setFingerprintWasRecognized
setFingerprintingEnabled:
setFirstAudioPacketTimestamp:
setFirstAudioSampleSensorTimestamp:
setFirstPassMyriadGoodnessScore:
setFirstPktLatency:
setFirstUnlockMonitor:
setFp:
setGlobalLastKeyboardUsed:
setHardwareInterfaceVendorID:
setHasPerformedDelayedStop:
setHasReceivedEarlyDetectNDEAPIResult:
setHasReceivedNDEAPIResult:
setHeadphoneListeningMode:completion:
setHearstSecondPassModelVersion:
setHepAudioOriginInMs:
setHistoricalBufferRequestStreams:
setHomeId:
setHostTimeBuffer:
setHybridClassifier:
setHybridClassifierQueue:
setHybridEndpointer:
setHybridUODEnabled:
setIAmTheAssistant:error:
setImplDelegate:
setInUseServices:
setInitialState:
setInjectionAudioFileList:
setInjectionCompletionNotifyBlocks:
setInjectionEngine:
setInjectionStartNotifyBlocks:
setInputRecordingNumberOfChannels:
setInteractionID:
setInteractionIDforCurrentRequest:
setInterfaceProductID:
setInterfaceVendorID:
setInterruptionHandler:
setInterspeechWaitTime:
setInvalidationHandler:
setIsASRFeatureFromServer:
setIsActiveRequest:
setIsActiveSession:
setIsAdvancedAppleAudioDevice:
setIsAlarmPlaying:
setIsAlarmPlayingOnAccessory:isAlarmPlaying:
setIsAnalyzeMode:
setIsAnchorTimeBuffered:
setIsAsrOnDevice:
setIsAudioSessionActivated:
setIsBlur:
setIsDriving:
setIsEndAlertInfo:
setIsForwarding:
setIsHybridUODEnabled:
setIsListenPollingStarting:
setIsMediaPlaying:
setIsMediaPlayingNow:
setIsMediaPlayingOnAccessory:isMediaPlaying:isInterrupted:interruptedTime:
setIsNarrowBand:
setIsOpportuneSpeakListening:
setIsOpus:
setIsPhraseSpotterBypassed:
setIsRaiseToSpeakBypassed:
setIsRemoteVADAvailableStream:
setIsRequestDuringActiveCall:
setIsRequestFromSpokenNotification:
setIsRequestTimeout:
setIsSecondPassRunning:
setIsSiri:
setIsSiriClientConsideredAsRecord:
setIsSiriClientListening:
setIsSoundPlaying:
setIsSpeakerMuted:
setIsSpeaking:
setIsTemporaryPairedNotInContacts:
setIsTimerPlaying:
setIsTimerPlayingOnAccessory:isTimerPlaying:
setIsWeakStream:
setKeyboardGlobalLanguagePriors:
setKeywordAnalyzer:
setKeywordAnalyzerNDEAPI:
setLanguageCode:
setLanguageCodeUpdateMonitor:
setLanguageDetector:
setLanguageDetectorAssetHash:
setLanguageDetectorDelegate:
setLanguageDetectorInteractionID:
setLastAggTimeFalseWakeUp:
setLastAudioChunkHostTime:
setLastAudioRecorderContext:
setLastCommunicatedPeer:
setLastDetectedVoiceTriggerBeginSampleCount:
setLastEndpointPosterior:
setLastFakeModelUsedHash:
setLastForwardedSampleCount:
setLastHash:
setLastKnowServerFeaturesLatency:
setLastKnownOSDFeatures:
setLastKnownServerEPFeatures:
setLastReportedEndpointTimeMs:
setLastSampleCount:
setLastServerFeatureTimestamp:
setLastSilencePosterior:
setLatestContext:
setLatestDetectedLanguages:
setLatestPluginStreamId:
setLatestRecordContext:streamType:
setLatestVolume:
setLatestVolumeTime:
setLength:
setListenPollingTimer:
setListenPollingTimerCount:
setLocale:
setLogEventUUID:
setLoggingQueue:
setLpcmBitDepth:
setMachServiceName:
setMaxAllowedTrailingSamplesAfterSchedulingStop:
setMediaPlayingMonitor:
setMediaPlayingObserverQueue:
setMeteringEnabled:
setMhId:
setMicUsageReporter:
setMinSpeechFrames:
setMinimumDurationForEndpointer:
setMonitor:
setMostRecentRecognitionLanguage:
setMultilingualKeyboardLanguages:
setMyriadPreventingTwoShotFeedback:
setName:
setNeedsBoost12dB:
setNeedsToUpdateModel:
setNnvadEndpointer:
setNumAudioSampleForwarded:
setNumFalseWakeUp:
setNumLatestLanguages:
setNumLeadingFrames:
setNumOfAudioPackets:
setNumOfValidTrailingPackets:
setNumOfValidTrailingSpeechPackets:
setNumSamplesProcessed:
setNumSamplesProcessedBeforeAnchorTime:
setNumTrailingSamplesAfterSchedulingStop:
setNumberOfChannels:
setNumberOfLoops:
setNumberOfTotalFramesETFT:
setNumberOfVoicingFrames:
setNviCtx:
setOStream:
setObject:atIndexedSubscript:
setObject:forKey:
setObject:forKeyedSubscript:
setObservers:
setOpportuneSpeakListnerTestService:
setOsdFeaturesAtEndpoint:
setOsdQueue:
setOutASBD:
setOverrideEnabled:
setOverridePath:
setOverrideState:
setPNonInterleavedABL:
setPackets:
setPairedDeviceAddresses:
setPeakPower:
setPendingActivationEvent:
setPendingAudioSessionActivationCompletion:
setPendingAudioSessionActivationReason:
setPendingAudioSessionActivationToken:
setPendingBuiltInVoiceTriggerCompletionBlk:
setPendingBuiltInVoiceTriggerDetectedTime:
setPendingBuiltInVoiceTriggerResult:
setPendingCompletion:
setPendingRecordingStopUUID:
setPendingRemoraVoiceTriggerCompletionBlk:
setPendingRemoraVoiceTriggerDetectedTime:
setPendingRemoraVoiceTriggerDeviceId:
setPendingRemoraVoiceTriggerResult:
setPendingStartCompletions:
setPendingStopCompletions:
setPerceptualAudioHash:
setPermanentOffsetFactor:
setPermanentOffsetIsEnabled:
setPermanentVolumeOffsetWithDirection:
setPhoneCallState:
setPhoneCallStateMonitor:
setPhraseSpotterBypassing:timeout:
setPhraseSpotterBypassing:timeout:xpcClient:
setPostBuildInstallService:
setPowerMeter:
setPrevAudioProcessedMs:
setPreviousMessageLanguage:
setPrimaryStream:
setProcessedAudioDurMs:
setProcessedAudioDurationInMilliseconds:
setProcessedAudioInSeconds:
setProductCategory:
setProductID:
setProfileId:
setProviderDelegate:
setQueue:
setRMSScore:
setRaiseToSpeakBypassing:timeout:
setRaiseToSpeakBypassing:timeout:xpcClient:
setRate:
setRcHandlingClient:
setRcXPCConnection:
setReason:
setReceivers:
setRecentMessages:
setRecordBufferDuration:
setRecordContext:
setRecordDelegate:
setRecordDeviceIndicator:
setRecordEventUUID:
setRecordMode:streamHandleId:error:
setRecordingDidStop:
setRecordingTransaction:
setRecordingWillStartGroup:
setRemoraSecondPassProgressProvider:
setRemoteAccessoryStreamIdSet:
setRemoteObjectInterface:
setRemoteObjectProxy:
setRemoteSvcProxy:
setRemoteVAD:
setRemoteVADAlignBuffer:
setRemoteVADAlignCount:
setRemoteVADSPGRatio:
setRepresentation
setReqSrc:
setReqStartAudioSampleId:
setReqStartMachAbsTime:
setRequestHistoricalAudio:
setRequestHistoricalAudioDataSampleCount:
setRequestHistoricalAudioDataWithHostTime:
setRequestMHUUID:
setRequestedStopRecordingOptions:
setRequireSingleChannelLookup:
setRequiresHistoricalBuffer:
setRmsSamplesForEntireAudio:
setRootLogDir:
setRtsTriggerInfo:
setRunningSampleCount:
setSacInfoMonitor:
setSampleRate:
setSamplingRate:
setSaveSamplesSeenInReset:
setScheduledFutureSample:
setSecondPassAssetLoadCompleteTime:
setSecondPassAssetLoadStartTime:
setSecondPassAssetQueryCompleteTime:
setSecondPassAssetQueryStartTime:
setSecondPassAudioStreamReadyTime:
setSecondPassAudioStreamStartTime:
setSecondPassCheckerModelKeywordDetectionEndTime:
setSecondPassCheckerModelKeywordDetectionStartTime:
setSecondPassFirstAudioPacketReceptionTime:
setSecondPassLastAudioPacketReceptionTime:
setSelectedChannel:
setServerCrashedBlock:
setServerFeatureLatencies:
setServerFeatureLatencyDistribution:
setServerFeaturesQueue:
setServerLoggingWriter:
setServerResetBlock:
setSessionDelegate:
setSessionEventDelegate:
setSessionInfoProvider:
setSessionInfoQueue:
setSessionProvider:
setSetupStarted:
setShadowMicScore:
setShadowMicScoreCreator:
setShouldKeepConnection:
setShouldLogRawSensorData:
setShouldRollFakeModel:
setShouldUseLanguageDetectorForCurrentRequest:
setSigGenTs:
setSigProvidersMap:
setSigType:
setSignalEstimate:
setSignalFractional:
setSilencePosterior:
setSiriClientRecordStateChangedBlock:
setSiriLanguageCodeDarwin:
setSiriSessionUUID:
setSiriStateObserver:
setSkipAlert:
setSkipAlertBehavior:
setSmartSiriVolume:
setSmartSiriVolumeDirection:
setSmartSiriVolumePercentage:
setSosQueue:
setSource:
setSpatialSpectrumData:
setSpeakerIdDelegate:
setSpeakerMuteStateChangedBlock:
setSpeakerRecognitionScores:
setSpeakerStateChangedBlock:
setSpeechEndHostTimeEstimator:
setSpeechEndpointDetected:
setSpeechRecognizedContext:
setSpeechRecognizedContext:withEndpointerMetrics:
setSpeechRecordingEventListeningEndpoint:
setSpeechRecordingMode:
setSpeechRequestOptions:
setSpeechRequestOptions:currentActivationInfo:
setSpeechVoiceLevel:
setSpeechWasRecognizedForElapsedTime:isFinal:
setSpgEndpointAnalyzer:
setSpgQueue:
setSplitterEnabled:
setSsrConnection:
setSsrXPCClient:
setSsvClient:
setSsvConnection:
setSsvLogFilePath:
setSsvManager:
setStartAlert:
setStartAlertBehavior:
setStartDetected:
setStartOfSpeechDetected:
setStartOfSpeechDetector:
setStartPendingOnStoppingStreamToCompletionDict:
setStartPendingOnStoppingStreams:
setStartPendingStreams:
setStartRecordingHostTime:
setStartRecordingSampleCount:
setStartStreamOption:
setStartWaitTime:
setStateNotificationQueue:
setStateSerialQueue:
setStopAlert:
setStopAlertBehavior:
setStopOnErrorAlert:
setStopPendingStreams:
setStopReasonMajor:
setStopReasonMinor:
setStopRecordingHostTime:
setStopRecordingWatchDogToken:
setStreamHandleID:
setStreamHandleQueue:
setStreamHolders:
setStreamProvider:
setStreamRequest:
setStreaming:
setStreamingUUID:
setStreams:
setSupportHearstVoiceTrigger:
setSupportPhatic:
setSupportTriagleModeSessionActivationRetry:
setSupportsAnnounceCall:
setSupportsInEarDetection:
setSupportsListeningModeANC:
setSupportsListeningModeTransparency:
setSupportsSpokenNotification:
setSupportsVoiceTrigger:
setSuppressInterruptionEndedNotifications:
setSynchronousCallbackEnabled:
setTarget:
setTaskName:
setTaskThresholdMap:
setTimeStamp:
setTimerMonitor:
setTimestamp:
setToken:
setTotalAudioRecorded:
setTrailingPktLatencies:
setTrailingPktSpeechLatencies:
setTrailingSilenceDuration:
setTrailingSilenceDurationAtEndpoint:
setTrialAssetDownloadMonitor:
setTrialAssetManager:
setTrialAssetMonitor:
setTrialDownloadMonitor:
setTriggerAbsStartSampleId:
setTriggerMachTime:
setTriggerNotifiedMachTime:
setTriggeredTwoShotBorealis:
setTurnIdentifier:
setTwoShotNotificationEnabled:
setType:
setUncompressedAudioLogging:
setUpsampler:
setUseDefaultServerFeaturesOnClientLag:
setUseOpportunisticZLL:
setUserInfo:
setUserIntentTime:
setUserIntentType:
setUserIntentValidForSeconds:
setUserIntentVolume:
setUserName:
setUserSpeakingEndedHostTime:
setUserSpeakingEndedTimeInMs:
setUuid:
setValue:forKey:
setVendorID:
setVersion:
setVoiceControllerCreationQueue:
setVoiceIdentificationBatchId:
setVoiceTriggerAssetDownloadMonitor:
setVoiceTriggerBatchId:
setVoiceTriggerEnabled:
setVoiceTriggerEverUsed
setVoiceTriggerInfo:
setVoiceTriggerInfo:deviceId:
setVoiceTriggerSampleCount:
setVolume:
setVolume:fadeDuration:
setVolumeController:
setVolumeMonitor:
setVtEndInSampleCount:
setVtExtraAudioAtStartInMs:
setWaitingForAlertFinish:
setWakeGestureTimestamp:
setWasLanguageToggled:
setWithArray:
setWordCount:
setXpcClient:
setXpcClientFactory:
setXpcClientQueue:
setXpcClientType:
setXpcConnection:
setXpcConnectionQueue:
setXpcDelegateQueue:
setXpcReplyQueue:
setZeroFilter:
setupStarted
shadowMicScore
shadowMicScoreCreator
shadowMicScoreThreshold
shadowMicScoreThresholdForVAD
sharedAggregator
sharedConnection
sharedController
sharedHandler
sharedInstance
sharedLauncher
sharedLogger
sharedManager
sharedManagerForCoreSpeechDaemon
sharedMonitor
sharedNotifier
sharedObserver
sharedPowerLogger
sharedPreferences
sharedService
sharedSession
sharedSiriId
sharedVoiceTriggerClient
shortFormForUUID
shouldAcceptEagerResultForDuration:resultsCompletionHandler:
shouldAudioMonitoringRecording
shouldDeinterleaveAudioOnCS
shouldDelayPhaticForMyriadDecision
shouldDisableSpeakerVerificationInSplitterMode
shouldExplicitlyPlayAlertOnStart
shouldKeepConnection
shouldLogForQA
shouldLogRawSensorData
shouldOverrideRecordingStartingAlertBehaviorForAlertStyle:
shouldPlayAlertIfNotPrelistening
shouldResetAdsDictionary
shouldRollFakeModel
shouldRunAsSecondChance
shouldRunSpkrIdForCategory:
shouldSuppressRecordingErrorAlert
shouldSuppressRecordingStopAlert
shouldTreatTimeoutAsHardEndpoint
shouldUseLanguageDetectorForCurrentRequest
shouldUseRemoteRecorder
shouldUseVoiceTriggerAnalyzerStyle
shouldVoiceTriggerRun
sigGenTs
signalEstimate
signalFractional
signalProvidersMapForContext:
signature
silenceDurationEstimateAvailable:numEstimates:clientProcessedAudioMs:
silenceDurationMs
silenceFramesCountMs
silencePosterior
silenceProbability
siriClientBehaviorMonitor:didChangedRecordState:withEventUUID:withContext:
siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:
siriClientBehaviorMonitor:didStopStream:withEventUUID:
siriClientBehaviorMonitor:fetchedSiriClientAudioStream:successfully:
siriClientBehaviorMonitor:preparedSiriClientAudioStream:successfully:
siriClientBehaviorMonitor:willStartStreamWithContext:option:
siriClientBehaviorMonitor:willStopStream:reason:
siriClientBehaviorMonitorReleasedAudioSession:
siriClientsRecordingCompletionBlock:
siriInCallPolicy
siriInputSourceOutOfBand
siriProfileId
siriRequestProcessingCompleted
siriStateObserver
size
skipAlert
skipAlertBehavior
skipPersonalizedASR
smartSiriVolumeContextAwareEnabled
smartSiriVolumeEnablePolicy
smartSiriVolumeRunPolicy
smartSiriVolumeSoftVolumeEnabled
sortUsingComparator:
sortUsingSelector:
sortedArrayUsingComparator:
sosQueue
source
spaceCheck:
spatialSpectrumData
speakAudio:
speakAudio:withScaleFactor:outASBD:playbackStarted:completion:
speakAudio:withScaleFactor:playbackStarted:completion:
speakerIdDelegate
speakerIdentificationDidDetectSpeakerWithScores:
speakerRecognitionScores
speakerStateActiveCompletionBlock:
speakerStateMutedCompletionBlock:
speechCapturing:didDetectEndpointAtTime:
speechCapturing:didDetectStartpointAtTime:
speechCapturing:didFinishWritingAudioFile:error:
speechCapturing:didInterruptAudioSession:
speechCapturing:didLoseAudioSessionOwnerOrMediaServices:
speechCapturing:didReceiveFingerprint:duration:
speechCapturing:didSetAudioSessionActive:
speechCapturing:performTwoShotPromptWithType:completion:
speechCapturing:willSetAudioSessionActive:
speechCapturingDidProvideConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:thresholdingType:assetVersion:
speechCapturingDidReceiveLastAudioBufferWithEndpointMode:totalPacketCount:endpointerMetrics:
speechCapturingDidRecordPCMAudioData:
speechCapturingDidRecordSpeechPackets:atTimestamp:totalPacketCount:
speechCapturingDidRequestQuickStop:
speechCapturingDidRequestShutdownUI:
speechCapturingDidRequestUpdateSiriOutputVolume:
speechCapturingDidStartRecordingSuccessfully:error:withInfo:
speechCapturingDidStopRecordingWithError:endpointMode:totalPacketCount:endpointerMetrics:
speechCapturingDidUpdateAudioDeviceInfo:
speechCapturingDidUpdateRecordingInfo:
speechCapturingWillStopRecording
speechCapturingWillStopRecordingWithSignpostID:
speechController:didSetAudioSessionActive:
speechController:willSetAudioSessionActive:
speechControllerBeginRecordInterruption:
speechControllerBeginRecordInterruption:withContext:
speechControllerDidDeliverLastBuffer:forReason:estimatedSpeechEndHostTime:
speechControllerDidDetectEndpoint:ofType:atTime:
speechControllerDidDetectStartpoint:
speechControllerDidDetectVoiceTriggerTwoShot:atTime:
speechControllerDidDetectVoiceTriggerTwoShot:atTime:wantsAudibleFeedback:
speechControllerDidFinishAlertPlayback:ofType:error:
speechControllerDidStartRecording:audioDeviceInfo:successfully:error:
speechControllerDidStartRecording:successfully:error:
speechControllerDidStopRecording:audioDeviceInfo:forReason:estimatedSpeechEndHostTime:
speechControllerDidStopRecording:forReason:estimatedSpeechEndHostTime:
speechControllerDidUpdateSmartSiriVolume:forReason:
speechControllerEndRecordInterruption:
speechControllerLPCMRecordBufferAvailable:buffer:
speechControllerLPCMRecordBufferAvailable:buffer:recordedAt:
speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:
speechControllerRecordBufferAvailable:buffers:durationInSec:recordedAt:audioDeviceInfo:
speechControllerRecordHardwareConfigurationDidChange:toConfiguration:
speechControllerRequestsOperation:forReason:
speechControllerRequestsOperation:forReason:completion:
speechEndHostTimeEstimator
speechEndpointDetected
speechEndpointerOperationMode
speechEvent
speechRecognitionTask
speechRecordingAlertPolicy
speechRecordingMode
speechVoiceLevel
speexASBD
speexConverter
spgConfigFile
spgEndpointAnalyzer
spgEndpointAnalyzer:hasSilenceScoreEstimate:clientProcessedAudioTimeMS:
spgEndpointAnalyzerDidDetectEndpoint:
spgQueue
splitAudioDataToReachSampleCount:currSampleCount:numBytesPerSample:completionHandler:
splitterDeviceList
splitterState
splitterState:
ssrConnection
ssrXPCClient
ssvClient
ssvConnection
ssvLogFilePath
ssvManager
standardUserDefaults
start
startAlert
startAlertBehavior
startAlertEnabled
startAttendingWithContext:
startAudioStream:option:completion:
startAudioStreamWithOption:
startAudioStreamWithOption:completion:
startAudioStreamWithOption:recordDeviceIndicator:error:
startCatalogDownload:options:then:
startDetected
startDownload:then:
startHostTime
startListenWithOption:completion:
startManager
startMonitor
startObserving
startObservingSystemVolumes
startOfSpeechAudioLoggingEnabled
startOfSpeechDetected
startOfSpeechDetectedAtFrame:
startOfSpeechDetector
startOfSpeechDetector:foundStartSampleAt:
startPendingOnStoppingStreamToCompletionDict
startPendingOnStoppingStreams
startPendingStreams
startRecordForStream:error:
startRecording
startRecordingHostTime
startRecordingSampleCount
startRecordingSettingsWithRecordRoute:recordingInfo:playbackRoute:
startRecordingTimestamp
startRecordingWatchDogToken
startRecordingWithOptions:error:
startRecordingWithSettings:error:
startRequest:options:completion:
startRequest:options:preparationHandler:executionHandler:finalizationHandler:
startRequestWith:context:delegate:
startSample
startSampleCount
startSmartSiriVolume
startSpeechCaptureWithContext:willStartHandler:error:
startStreamOption
startWaitTime
startWakeGestureUpdates
startWithNviContext:
startWithNviContext:didStartHandler:
startWithOptions:audioSession:preparationHandler:executionHandler:finalizationHandler:
startWithUUID:withMaximumBufferSize:
startXPCConnection
startingAlertBeepURL
startingAlertBehavior
state
stateNotificationQueue
stateSerialQueue
status
stop
stop:completion:
stopAlert
stopAlertBehavior
stopAllRequests:completion:
stopAllRequestsSynchronously
stopAttendingWithContext:
stopAudioStream:option:completion:
stopAudioStreamWithOption:completion:
stopAudioStreamWithRecordDeviceIndicator:error:
stopCountingZeroStatisticsWithReporter:
stopEndpointer
stopListenWithCompletion:
stopListenWithStateReset:completion:
stopOnErrorAlert
stopPendingStreams
stopRecordForStream:error:
stopRecording
stopRecording:
stopRecordingHostTime
stopRecordingReason
stopRecordingWatchDogToken
stopRecordingWithOptions:
stopRequest:immediately:
stopSpeechCaptureForEvent:suppressAlert:hostTime:
stopWithDidStopHandler:
stopWithUUID:
storeASVStateInformation
strRepForFloatData
strRepForNviDataSourceType:
strRepForNviSignalMask:
strRepForNviSignalType:
stream:handleEvent:
streamDescription
streamHandleID
streamHandleId
streamHandleQueue
streamHolders
streamID
streamProvider
streamRequest
streamState
streaming
streamingUUID
string
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByReplacingOccurrencesOfString:withString:
stringByStandardizingPath
stringForLogging
stringFromClassificationCategory:
stringValue
stringWithCString:encoding:
stringWithCapacity:
stringWithFormat:
stringWithString:
stringWithUTF8String:
strongToWeakObjectsMapTable
subChunkFrom:numSamples:
subChunkFrom:numSamples:forChannel:
subdataWithRange:
submitAudioIssueReport:
submitAudioIssueReport:withError:
submitEndpointerIssueReport:
submitVoiceTriggerIssueReport:
subscribeEventMonitor:
substringToIndex:
substringWithRange:
superclass
supportAdBlocker
supportBeepCanceller:
supportBluetoothDeviceVoiceTrigger
supportCSTwoShotDecision
supportDoAP
supportHandsFree
supportHangUp
supportHearstVoiceTrigger
supportHomeKitAccessory
supportHybridEndpointer
supportJarvisVoiceTrigger
supportLanguageDetector
supportLazySessionActivation
supportLazySessionActivtion
supportMphAssets
supportNonInterruptibleSiri
supportOpportunisticZLL
supportPhatic
supportPremiumAssets
supportRelayCall
supportRemoraVoiceTrigger
supportRingtoneA2DP
supportSessionActivateDelay
supportSmartVolume
supportTriagleModeSessionActivationRetry
supportZeroFilter:
supportedInputOrigins
supportedLocale:
supportsDuckingOnCurrentRouteWithError:
supportsDuckingOnSpeakerOutput
supportsEndpointingOnATV
supportsHybridSDSDForLanguageCode:
supportsSecureCoding
supportsSpeakerRecognitionAssets
supportsUnderstandingOnDevice
suppressInterruptionEndedNotifications
suppressStartAlert
suppressUtteranceGradingIfRequired
suspendAutomaticEndpointingInRange:
synchronousRemoteObjectProxyWithErrorHandler:
systemControllerDied:
systemUpTime
systemUptime
systemVolumeDidChange:
tandemStreams
tapToSiriAudioPlaybackRequest
targetQueue
targetSpeed
taskName
taskThresholdMap
teardownWithError:
temporaryDirectory
terminateProcessing
timeIntervalSinceDate:
timeIntervalSinceNow
timeStamp
timerMonitor
timerState
timestamp
toString
token
totalAudioRecorded
totalExpected
totalWritten
trailingPktLatencies
trailingPktSpeechLatencies
trailingSilenceDuration
trailingSilenceDurationAtEndpoint
trainGlobalNNLMwithFidesSessionURL:completion:
trainPersonalizedLMWithLanguage:configuration:asset:directory:completion:
trainPersonalizedLMWithLanguage:configuration:asset:fides:activity:completion:
trainPersonalizedLMWithLanguage:configuration:fides:activity:completion:
trainPersonalizedLMWithLanguage:configuration:fides:write:completion:
trainPersonalizedLMWithLanguage:directory:completion:
transitions
trialAssetDownloadMonitor
trialAssetManager
trialAssetMonitor
trialBaseAssetDirectory
trialDownloadMonitor
triggerAbsStartSampleId
triggerInfoForContext:completion:
triggerModeStringDescription:
triggerNotifiedMachTime
triggerVoiceProfileRetrainingWithAsset:
triggeredTwoShotBorealis
turnIdentifier
twoShotAudioPlaybackRequest
twoShotNotificationEnabled
twoShotPromptTypeForRecordRoute:playbackRoute:
type
uncompressedAudioLogging
unregisterObserver:
unregisterSignalProviderDelegate:forSignalType:
unregisterSignalProviderDelegateForAllSignalTypes:
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
updateAccessToRecordedAudioForVoiceIdentificationTraining:forResultCandidateId:sharedUserId:
updateAudioRecordContext:
updateAudioRecordDeviceInfo:
updateAudioStreamStartTimeInSampleCount:
updateDeviceInfo:
updateEndpointHintForRC:forceAccept:completion:
updateEndpointerDelayedTriggerSwitch:
updateEndpointerThreshold:
updateEndpointerThresholdWithValue:
updateMeterForStream:
updateMeters
updateRecordingInfo:
updateRecordingSettings:
updateSelectedResultCandidateId:
updateServerEndpointFeatures:
updateSpeechSynthesisRecord:
updateSplitterState:shouldDisableSpeakerVerificationInSplitterMode:
updateStartSpeechId:
updateState:
updateVoiceProfile:withUserName:
updateVoiceTriggerInfo:
updateWithLatestRecordContext:
upperCaseString:completion:
upperCaseString:withReply:
upsampler
useAutomaticEndpointing
useBorealisBuffer
useCustomizedRecordSettings
useDefaultServerFeaturesOnClientLag
useDeviceSpeakerForTTS
useOpportunisticZLL
usePrelisteningMode
useSiriActivationSPIForHomePod
useSpeakerRecognitionAsset
useSpeexForAudioInjection
userInfo
userIntentTime
userIntentType
userIntentValidForSeconds
userIntentVolume
userName
userSessionActivateMonitor:didReceivedUserSessionActiveHasChanged:
userSpeakingEndedHostTime
userSpeakingEndedTimeInMs
userSpeakingStartedHostTime
userSpeakingStartedTimeInMs
utteranceFileASBD
uuid
vadScore
valueForEntitlement:
valueForKey:
vendorID
vendorId
vibratesForDeviceRingerSwitchState:
voiceControllerAudioCallback:forStream:buffer:
voiceControllerBeginRecordInterruption:
voiceControllerBeginRecordInterruption:withContext:
voiceControllerCreationQueue
voiceControllerDidDetectEndpoint:ofType:
voiceControllerDidDetectEndpoint:ofType:atTime:
voiceControllerDidDetectStartpoint:
voiceControllerDidFinishAlertPlayback:ofType:error:
voiceControllerDidFinishAlertPlayback:withSettings:error:
voiceControllerDidSetAudioSessionActive:isActivated:
voiceControllerDidStartRecording:forStream:successfully:error:
voiceControllerDidStartRecording:successfully:
voiceControllerDidStartRecording:successfully:error:
voiceControllerDidStopRecording:forReason:
voiceControllerDidStopRecording:forStream:forReason:
voiceControllerEncoderErrorDidOccur:error:
voiceControllerEndRecordInterruption:
voiceControllerLPCMAudioCallback:forStream:buffer:
voiceControllerLPCMRecordBufferAvailable:buffer:
voiceControllerMediaServicesWereLost:
voiceControllerMediaServicesWereReset:
voiceControllerRecordBufferAvailable:buffer:
voiceControllerRecordHardwareConfigurationDidChange:toConfiguration:
voiceControllerStreamInvalidated:forStream:
voiceControllerWillSetAudioSessionActive:willActivate:
voiceControllerWirelessSplitterRouteAvailable:devices:
voiceIdentificationBatchId
voiceProfileForId:
voiceProfilePruningCookie
voiceTriggerAOPModeEnabledPolicy
voiceTriggerAssetDownloadMonitor
voiceTriggerAssetHandler:endpointId:didChangeCachedAsset:
voiceTriggerAudioLogDirectory
voiceTriggerBatchId
voiceTriggerDetectedOnAOP:
voiceTriggerDidDetectKeyword:deviceId:
voiceTriggerDidDetectKeyword:deviceId:completion:
voiceTriggerDidDetectKeyword:myriadHash:remoteTriggerType:remoteDeviceId:isTriggeredFromFullWake:completion:
voiceTriggerDidDetectNearMiss:deviceId:
voiceTriggerDidDetectSpeakerReject:
voiceTriggerDidRejected:deviceId:
voiceTriggerEnabled
voiceTriggerEndHostTime
voiceTriggerEventInfo
voiceTriggerGotSuperVector:
voiceTriggerHearstRTModelForVersion:minorVersion:locale:downloadedModels:preinstalledModels:completion:
voiceTriggerInfo
voiceTriggerInfoWithRecordDeviceIndicator:
voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:
voiceTriggerPhraseNDEAPIScorerDidDetectedKeyword:bestStartSampleCount:bestEndSampleCount:
voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:endpointId:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:locale:endpointId:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:downloadedModels:preinstalledModels:completion:
voiceTriggerRTModelForVersion:minorVersion:locale:downloadedModels:preinstalledModels:completion:
voiceTriggerRemoraRTModelForVersion:minorVersion:locale:endpointId:downloadedModels:preinstalledModels:completion:
voiceTriggerSampleCount
voiceTriggerXPCClient:didDisconnect:
volume
volumeController
volumeEstimate
volumeMonitor
vtEndInSampleCount
vtExtraAudioAtStartInMs
waitForMyriadDecisionForReason:withCompletion:
waitWithTimeout:
waitingForAlertFinish
waitingForConnection:error:
wakeGestureManager:didUpdateWakeGesture:
wakeGestureManager:didUpdateWakeGesture:detectedAt:
wakeGestureManager:didUpdateWakeGesture:orientation:
wakeGestureManager:didUpdateWakeGesture:type:detectedAt:
wakeGestureTimestamp
wakeHostForVoiceTrigger
wantsRecordedAudioBufferLogs
wasBuffered
wasLanguageToggled
weakObjectsHashTable
wearerDetectionConfig
willBeep
willBeepWithRecordRoute:playbackRoute:
willDestroy
willPrepareAndStartRecordingWithAudioActivationInfo:
willStopRecordingAtHostTime:
wordCount
write:maxLength:
writeToFile:atomically:
writeToFile:options:error:
writeToURL:atomically:
xpcClient
xpcClientFactory
xpcClientQueue
xpcClientType
xpcConnection
xpcConnection:hasEntitlement:
xpcConnectionQueue
xpcDelegateQueue
xpcExitClean
xpcObject
xpcReplyQueue
zeroCounter
zeroFilter
zeroFilter:zeroFilteredBufferAvailable:atHostTime:
zeroFilterApproxAbsSpeechThreshold
zeroFilterWindowSizeInMs
zone
@24@0:8@16
@16@0:8
v24@0:8@16
v16@0:8
B16@0:8
Q16@0:8
v24@0:8Q16
v20@0:8B16
@"NSMutableArray"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v44@0:8@16Q24B32@36
v40@0:8@16Q24Q32
v56@0:8@16Q24@32@40Q48
v32@0:8@16@24
v44@0:8@"CSAudioInjectionEngine"16Q24B32@"NSError"36
v40@0:8@"CSAudioInjectionEngine"16Q24Q32
v56@0:8@"CSAudioInjectionEngine"16Q24@"NSData"32@"NSData"40Q48
v32@0:8@"CSAudioInjectionEngine"16@"CSAudioChunkForTV"24
@24@0:8Q16
B44@0:8@16f24@?28@?36
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"<CSAudioInjectionEngineDelegate>"
@"CSKeywordAnalyzerNDEAPI"
@"CSAudioCircularBuffer"
@"NSUUID"
@"CSAudioInjectionDevice"
v32@0:8@16Q24
v32@0:8@"NSStream"16Q24
@32@0:8@16@24
@"NSOutputStream"
v32@0:8Q16@24
v32@0:8@16q24
v40@0:8@16q24Q32
v48@0:8@16q24q32Q40
v36@0:8@16q24i32
v44@0:8@16q24i32Q36
v32@0:8@"CMWakeGestureManager"16q24
v40@0:8@"CMWakeGestureManager"16q24Q32
v48@0:8@"CMWakeGestureManager"16q24q32Q40
v36@0:8@"CMWakeGestureManager"16q24i32
v44@0:8@"CMWakeGestureManager"16q24i32Q36
@"CMWakeGestureManager"
v32@0:8@16@?24
@"NSHashTable"
v32@0:8@"<CSAudioSessionInfoProviding>"16@"NSDictionary"24
v28@0:8@16B24
v28@0:8@"CSXPCClient"16B24
v32@0:8@"CSCoreSpeechDaemonStateMonitor"16Q24
v24@0:8@?16
I16@0:8
@"<CSAudioSessionInfoProviding>"
@"CSXPCClient"
f16@0:8
q16@0:8
@68@0:8@16f24{AudioStreamBasicDescription=dIIIIIIII}28
{AudioStreamBasicDescription=dIIIIIIII}16@0:8
v56@0:8{AudioStreamBasicDescription=dIIIIIIII}16
^{OpaqueExtAudioFile=}16@0:8
v24@0:8^{OpaqueExtAudioFile=}16
@"NSURL"
^{OpaqueExtAudioFile=}
{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}
@"NSString"
Q40@0:8@16@24@32
v24@0:8@"CSAttSiriRequestContext"16
v24@0:8@"CSAttSiriAttendingTriggerEventInfo"16
@"<CSAttSiriServiceDelegate>"
@"NSXPCConnection"
v24@0:8q16
B32@0:8^B16^Q24
Q24@0:8Q16
@"<CSBiometricMatchMonitorDelegate>"
v20@0:8f16
v40@0:8@16@24@?32
v60@0:8@16@24Q32@40B48@?52
v32@0:8@"NSDictionary"16@"NSString"24
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?>32
v24@0:8@"NSDictionary"16
v24@0:8@"NSData"16
v60@0:8@"NSDictionary"16@"NSData"24Q32@"NSString"40B48@?<v@?>52
v40@0:8Q16@24d32
v40@0:8Q16@"NSString"24d32
v32@0:8Q16@"NSString"24
@?16@0:8
@"<CSVoiceTriggerDelegate>"
@"<CSSecondPassProgressProviding>"
@"NSDictionary"
@"CSPreMyriadVoiceTriggerMetaData"
@"NSMutableDictionary"
@"CSKeywordAnalyzerNDAPI"
i16@0:8
d16@0:8
@40@0:8@16@24@32
@24@0:8^{_NSZone=}16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"CSAudioRecordDeviceInfo"
@"NSArray"
@"CSSSRXPCClient"
@"<CSSpeakerRecognitionProxyProtocol>"
v28@0:8@"CSVoiceTriggerXPCClient"16B24
v36@0:8B16@20@28
v28@0:8B16@20
v36@0:8B16d20@28
v28@0:8B16d20
@"CSVoiceTriggerXPCClient"
r*16@0:8
v40@0:8@16@24Q32
v40@0:8@"CSVoiceTriggerAwareZeroFilter"16@"NSData"24Q32
v40@0:8@"CSBeepCanceller"16@"NSData"24Q32
@24@0:8f16i20
v32@0:8f16B20@24
B20@0:8f16
v20@0:8i16
@"<CSAudioPreprocessorDelegate>"
@"CSAudioSampleRateConverter"
@"CSVoiceTriggerAwareZeroFilter"
@"CSBeepCanceller"
@"CSAudioZeroCounter"
v48@0:8@16@24@32@?40
@24@0:8^{BTLocalDeviceImpl=}16
@24@0:8^{BTDeviceImpl=}16
v40@0:8^{BTDeviceImpl=}16I24i28I32i36
v28@0:8^{BTSessionImpl=}16i24
v24@0:8^{BTSessionImpl=}16
v32@0:8^{BTLocalDeviceImpl=}16i24i28
^{BTSessionImpl=}16@0:8
^{BTLocalDeviceImpl=}16@0:8
v24@0:8^{BTLocalDeviceImpl=}16
^{BTSessionImpl=}
^{BTLocalDeviceImpl=}
@"NSObject<OS_dispatch_group>"
^{__IOHIDUserDevice=}
v40@0:8@16@24@32
v40@0:8@"NSObject<OS_xpc_object>"16@"NSObject<OS_xpc_object>"24@"NSObject<OS_xpc_object>"32
v40@0:8@"CSXPCConnection"16@"NSObject<OS_xpc_object>"24@"NSObject<OS_xpc_object>"32
v52@0:8@16B24@28@36@44
v40@0:8@16Q24@32
v48@0:8@16Q24@32@40
v36@0:8@16B24Q28
@"CSTrialAssetDownloadMonitor"
@24@0:8d16
B24@0:8d16
@20@0:8I16
@"NSObject<OS_dispatch_source>"
@"<CSAudioFileReaderDelegate>"
@96@0:8{AudioStreamBasicDescription=dIIIIIIII}16{AudioStreamBasicDescription=dIIIIIIII}56
^{OpaqueAudioConverter=}96@0:8{AudioStreamBasicDescription=dIIIIIIII}16{AudioStreamBasicDescription=dIIIIIIII}56
^{OpaqueAudioConverter=}
@"<CSLanguageDetectorAssetMonitorDelegate>"
v32@0:8@16d24
v24@0:8r^{AudioStreamBasicDescription=dIIIIIIII}16
@28@0:8@16i24
@"CSAudioRecordContext"
@"CSSiriRecordingInfo"
@"CSSiriAudioFileWriter"
@"<AFRelinquishableAssertion>"
@"NSMutableSet"
v40@0:8Q16@24@?32
v40@0:8Q16@"NSDictionary"24@?<v@?@"NSError"@"CSSmartSiriVolumeEstimate">32
@32@0:8Q16@24
@"<CSSmartSiriVolumeClientDelegate>"
B40@0:8@16Q24^@32
B40@0:8@16@24^@32
B32@0:8@16^@24
f24@0:8Q16
B24@0:8Q16
B32@0:8Q16^@24
B40@0:8Q16Q24^@32
B40@0:8q16Q24^@32
B36@0:8@16q24B32
B32@0:8q16@24
@"CSAudioInjectionEngine"
v32@0:8@"<CSAudioStreamProviding>"16q24
v32@0:8@"<CSAudioStreamProviding>"16@"CSAudioChunk"24
v32@0:8@"<CSAudioStreamProviding>"16@"CSAudioChunkForTV"24
v36@0:8@16d24f32
v36@0:8@"CSSPGEndpointAnalyzer"16d24f32
v24@0:8@"CSSPGEndpointAnalyzer"16
v28@0:8B16@?20
@"<CSOpportuneSpeakListenerDelegate>"
@"CSAudioStream"
@"CSSPGEndpointAnalyzer"
@"<CSAudioStreamProviding>"
@"<CSAudioSessionProviding>"
@"CSPlainAudioFileWriter"
@"CSAudioTimeConverter"
v64@0:8@16@24@32@40@48@?56
@"NSObject<OS_xpc_object>"
@32@0:8d16Q24
v24@0:8d16
d24@0:8[80s]16
@"NSMutableData"
v28@0:8Q16B24
v36@0:8@16Q24B32
v56@0:8q16@24@32@40@?48
v44@0:8@16@24f32@?36
v48@0:8@16@24f32i36@?40
v32@0:8@"NSString"16@?<v@?@"NSString">24
v56@0:8q16@"NSString"24@"NSString"32@"NSString"40@?<v@?B@"NSError"@"NSUUID">48
v44@0:8@"NSURL"16@"NSUUID"24f32@?<v@?B@"NSError"QQ>36
v48@0:8@"NSURL"16@"NSUUID"24f32i36@?<v@?B@"NSError"QQ>40
v32@0:8@"NSUUID"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError"@"NSUUID">16
v24@0:8@"NSString"16
v32@0:8d16@?24
v36@0:8Q16Q24B32
v32@0:8Q16@"CSAudioRecordContext"24
v24@0:8@"CSAudioChunk"16
@"<CSEndpointAnalyzerDelegate>"16@0:8
v24@0:8@"<CSEndpointAnalyzerDelegate>"16
@"<CSEndpointAnalyzerImplDelegate>"16@0:8
v24@0:8@"<CSEndpointAnalyzerImplDelegate>"16
v24@0:8@"CSServerEndpointFeatures"16
v32@0:8d16@?<v@?B@"NSArray">24
v32@0:8@"NSString"16@"NSString"24
v32@0:8@"OSDFeatures"16d24
v32@0:8@"NSDate"16Q24
v28@0:8@"CSServerEndpointFeatures"16B24
@"<CSEndpointAnalyzerDelegate>"
@"<CSEndpointAnalyzerImplDelegate>"
v32@0:8@"_EARLanguageDetector"16@"_EARLanguageDetectorLoggingInfo"24
v32@0:8@"_EARLanguageDetector"16@"NSDictionary"24
v32@0:8@"_EARLanguageDetector"16@"_EARLanguageDetectorResult"24
v32@0:8@"CSStartOfSpeechDetector"16Q24
v28@0:8@16f24
@"<CSLanguageDetectorDelegate>"
@"_EARLanguageDetector"
@"_EARLanguageDetectorAudioBuffer"
@"CSStartOfSpeechDetector"
@"CSAsset"
@40@0:8Q16Q24d32
v32@0:8@"CSSelfTriggerDetector"16@"NSDictionary"24
@"<CSMyriadSelfTriggerCoordinatorDelegate>"
v40@0:8Q16Q24Q32
v44@0:8@16@24B32@36
v40@0:8@"CSCommandControlBehaviorMonitor"16@"CSAudioRecordContext"24@"CSAudioStartStreamOption"32
v44@0:8@"CSCommandControlBehaviorMonitor"16@"CSAudioRecordContext"24B32@"CSAudioStartStreamOption"36
v32@0:8@"CSCommandControlBehaviorMonitor"16@"CSAudioStopStreamOption"24
v24@0:8@"CSAudioServerCrashMonitor"16
@"AVVoiceTriggerClient"
@36@0:8q16@?24I32
@36@0:8q16@24I32
@44@0:8q16@?24@32I40
@"NSFileHandle"
@"NSError"
v64@0:8Q16Q24q32@40@48@?56
v72@0:8Q16Q24q32@40@48@56@?64
v56@0:8Q16Q24@32@40@?48
v20@0:8I16
v40@0:8@"CSVoiceTriggerAssetHandler"16@"NSString"24@"CSAsset"32
v40@0:8@"CSActivationEventNotificationHandler"16@"CSActivationEvent"24@?<v@?B@"NSError">32
v68@0:8@16Q24@32@40Q48Q56i64
v40@0:8@16Q24q32
v40@0:8@16q24@32
v68@0:8@"CSAudioRecorder"16Q24@"NSData"32@"NSData"40Q48Q56i64
v40@0:8@"CSAudioRecorder"16Q24@"CSAudioChunkForTV"32
v44@0:8@"CSAudioRecorder"16Q24B32@"NSError"36
v40@0:8@"CSAudioRecorder"16Q24q32
v32@0:8@"CSAudioRecorder"16q24
v40@0:8@"CSAudioRecorder"16q24@"NSError"32
v24@0:8@"CSAudioRecorder"16
v32@0:8@"CSAudioRecorder"16@"NSDictionary"24
v28@0:8@"CSAudioRecorder"16B24
v32@0:8@"CSAudioRecorder"16@"NSError"24
v32@0:8@"CSAudioProvider"16Q24
v28@0:8@"CSOpportuneSpeakEventMonitor"16B24
@32@0:8@16^@24
@24@0:8^@16
@"CSAudioRecorder"
@"CSAudioTapProvider"
@"CSFallbackAudioSessionReleaseProvider"
@"<CSSpeechManagerDelegate>"
@"CSOpportuneSpeakListnerTestService"
@"CSPostBuildInstallService"
@"CSSmartSiriVolumeManager"
v32@0:8Q16Q24
@"<CSCommandControlListenerDelegate>"
v32@0:8@"CSAssetController"16Q24
v32@0:8@16@"NSString"24
v32@0:8Q16@?24
v48@0:8Q16@24Q32@?40
v48@0:8Q16Q24@32@?40
@"CSPolicy"
@"CSAssetDownloadingOption"
v72@0:8q16q24d32@40d48@56q64
v72@0:8q16q24d32@"NSArray"40d48@"NSString"56q64
v24@0:8@?<v@?@"NSError"@"NSString">16
v24@0:8@?<v@?@"NSError"d>16
v24@0:8@?<v@?@"NSError"Q>16
v32@0:8d16@24
v32@0:8d16@"CSEndpointerMetrics"24
v48@0:8Q16@24@32@40
@32@0:8@"<NviDataSource>"16@"<NviAssetsProvider>"24
v24@0:8@"<NviSignalProviderDelegate>"16
v32@0:8@"NviContext"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError">16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@?<v@?@>16
@48@0:8@16@24@32@40
@56@0:8@16@24@32@40@48
@"NSXPCListener"
@"NSXPCInterface"
@32@0:8Q16Q24
@"NSNumber"
v52@0:8@16@24f32Q36Q44
v52@0:8@"CSAudioConverter"16@"NSArray"24f32Q36Q44
v32@0:8@"CSSmartSiriVolumeController"16Q24
v40@0:8@"<CSAudioAlertProviding>"16q24@"NSError"32
v32@0:8@"CSAudioSessionController"16@"NSDictionary"24
v72@0:8@16Q24@32@40Q48Q56B64I68
v72@0:8@"CSAudioDecoder"16Q24@"NSData"32@"NSData"40Q48Q56B64I68
v32@0:8@"<CSEndpointAnalyzerImpl>"16d24
v40@0:8@"<CSEndpointAnalyzerImpl>"16Q24Q32
v48@0:8@16q24q32@40
v32@0:8@16B24B28
v48@0:8@"SOMediaNowPlayingObserver"16q24q32@"NSDate"40
v24@0:8@"SOMediaNowPlayingObserver"16
v32@0:8@"SOMediaNowPlayingObserver"16B24B28
v32@0:8@"SOClockAlarmObserver"16@"NSUUID"24
v40@0:8@"SOClockAlarmObserver"16@"AFClockAlarmSnapshot"24@"AFClockAlarmSnapshot"32
v32@0:8@"SOClockTimerObserver"16@"NSUUID"24
v40@0:8@"SOClockTimerObserver"16@"AFClockTimerSnapshot"24@"AFClockTimerSnapshot"32
v24@0:8@"<CSAudioSessionProviding>"16
v32@0:8@"<CSAudioSessionProviding>"16@"NSDictionary"24
v28@0:8@"<CSAudioSessionProviding>"16B24
v32@0:8@"CSContinuousVoiceTrigger"16@"NSDictionary"24
v32@0:8@"CSContinuousVoiceTrigger"16d24
@116@0:8@16@24@32@40@48@56@64@72@80@88B96B100B104B108B112
B44@0:8Q16d24B32^@36
v56@0:8d16Q24@32@?40@?48
B24@0:8^@16
B24@0:8B16B20
B24@0:8q16
v68@0:8Q16d24d32d40@48B56@?60
v24@0:8B16B20
@"CSAudioConverter"
@"<CSSpeechControllerDelegate>"
@"<CSSpeakerIdentificationDelegate>"
@"CSEndpointerProxy"
@"<CSAudioAlertProviding>"
@"<CSAudioMeterProviding>"
@"<CSAudioMetricProviding>"
@"CSSelectiveChannelAudioFileWriter"
@"CSSmartSiriVolumeController"
@"CSSpeechEndHostTimeEstimator"
@"CSLanguageDetector"
@"CSXPCClientFactory"
@"CSAudioPowerMeter"
@"CSStopRecordingOptions"
@"SOMediaNowPlayingObserver"
@"SOClockAlarmObserver"
@"SOClockTimerObserver"
@"CSVolumeMonitor"
@"CSAudioDeviceInfo"
@"CSAudioSessionController"
@"CSSACInfoMonitor"
@"CSRCHandlingXPCClient"
@"CSUncompressedAudioLogging"
@"<CSSSRXPCClientDelegate>"
@"CSAttSiriRequestContext"
@48@0:8q16Q24Q32@40
@40@0:8Q16Q24@32
@24@0:8q16
@40@0:8@16@24Q32
v56@0:8Q16@24@?32@?40@?48
@40@0:8@"NSObject<OS_dispatch_queue>"16@"AFAudioPlaybackRequest"24Q32
v40@0:8Q16@"AVAudioSession"24@?<v@?@"NSError">32
v56@0:8Q16@"AVAudioSession"24@?<v@?>32@?<v@?>40@?<v@?@"NSError">48
v28@0:8B16@?<v@?>20
@"AFAudioPlaybackRequest"16@0:8
@"AVPlayer"
@"AVPlayerItem"
@"AVAudioSession"
@"AFAudioPlaybackRequest"
@24@0:8@?16
v56@0:8@16@24@32@40@?48
v60@0:8@16@24@32B40@44@?52
v52@0:8@16@24B32@36@?44
v36@0:8@16B24@?28
v96@0:8@16@24@32@40Q48@56@64@72@80@?88
v24@0:8@"CSRemoteAssetManager"16
q24@0:8q16
v48@0:8@16@24B32B36@?40
v48@0:8@"NSString"16@"NSString"24B32B36@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"NSURL"16@?<v@?@"NSError">24
v36@0:8@"NSString"16B24@?<v@?@"NSDictionary"@"NSError">28
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v96@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSString"40Q48@"NSArray"56@"NSString"64@"NSString"72@"NSArray"80@?<v@?@"NSArray"@"NSError">88
@"<NviAssetsProvider>"
@"NSMapTable"
B48@0:8Q16Q24@32^@40
v24@0:8@"<CSAudioSessionProvidingDelegate>"16
B48@0:8Q16Q24@"NSString"32^@40
@40@0:8@16@24^@32
@40@0:8Q16Q24Q32
v40@0:8Q16Q24@32
@32@0:8@16d24
v28@0:8B16Q20
B32@0:8@"CSAudioRecordContext"16^@24
@"CSAudioStream"40@0:8@"CSAudioStreamRequest"16@"NSString"24^@32
v40@0:8@"CSAudioStreamRequest"16@"NSString"24@?<v@?@"CSAudioStream"@"NSError">32
v40@0:8@"CSAudioStream"16@"CSAudioStream"24@?<v@?B@"NSError">32
B40@0:8@"CSAudioStream"16@"CSAudioStreamRequest"24^@32
v40@0:8@"CSAudioStream"16@"CSAudioStreamRequest"24@?<v@?B@"NSError">32
v40@0:8@"CSAudioStream"16@"CSAudioStartStreamOption"24@?<v@?B@"NSError">32
v40@0:8@"CSAudioStream"16@"CSAudioStopStreamOption"24@?<v@?B@"NSError">32
@"CSAudioChunk"32@0:8Q16Q24
@"CSAudioChunk"40@0:8Q16Q24Q32
@"CSAudioChunk"24@0:8Q16
v40@0:8Q16Q24@"NSURL"32
v32@0:8Q16@"NSURL"24
@"CSAudioStreamHolding"32@0:8@"NSString"16d24
v24@0:8@"CSAudioStreamHolding"16
@"CSAudioRecordDeviceInfo"16@0:8
@"CSAudioDeviceInfo"16@0:8
@"NSDictionary"16@0:8
v24@0:8@"<CSAudioAlertProvidingDelegate>"16
B36@0:8@"NSURL"16q24B32
I24@0:8@16
v24@0:8@"<CSAudioSessionInfoProvidingDelegate>"16
I24@0:8@"NSString"16
v32@0:8@"CSAudioRecordContext"16@?<v@?@"NSDictionary"@"NSDictionary">24
@"<CSAudioSessionProvidingDelegate>"
@"<CSAudioStreamProvidingDelegate>"
@"<CSAudioAlertProvidingDelegate>"
@"<CSXPCClientDelegate>"
v40@0:8q16q24q32
v32@0:8q16q24
@"<CSStateMachineDelegate>"
v32@0:8i16@20B28
v32@0:8@"CSAlarmMonitor"16q24
v32@0:8@"CSTimerMonitor"16q24
v28@0:8@"CSVolumeMonitor"16f24
v28@0:8@"CSAutomaticVolumeEnabledMonitor"16B24
@28@0:8f16@20
@40@0:8Q16@24Q32
@"<CSConnectionServiceDelegate>"
@"<CSSmartSiriVolumeProcessor>"
@36@0:8@16f24Q28
@32@0:8@16Q24
@52@0:8Q16@24@32f40Q44
@48@0:8Q16@24@32Q40
d20@0:8f16
v48@0:8Q16@24@32@?40
v40@0:8@16Q24@?32
v40@0:8@16@?24@?32
@40@0:8@16Q24@32
v32@0:8^@16Q24
v40@0:8q16Q24@32
@28@0:8Q16I24
B84@0:8@16f24{AudioStreamBasicDescription=dIIIIIIII}28@?68@?76
@24@0:8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16
@28@0:8@16I24
^{OpaqueAudioConverter=}16@0:8
v24@0:8^{OpaqueAudioConverter=}16
^{AudioBufferList=I[1{AudioBuffer=II^v}]}16@0:8
v24@0:8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16
@"CSAudioInjectionFileOption"
^{AudioBufferList=I[1{AudioBuffer=II^v}]}
@"<CSVoiceTriggerAssetChangeDelegate>"
@104@0:8@16{AudioStreamBasicDescription=dIIIIIIII}24{AudioStreamBasicDescription=dIIIIIIII}64
v32@0:8r^v16q24
v44@0:8@16B24@28@36
v28@0:8@"CSFirstUnlockMonitor"16B24
@64@0:8@16@24@32@40@48@56
@"CSVoiceTriggerAssetDownloadMonitor"
@"CSLanguageCodeUpdateMonitor"
@"CSFirstUnlockMonitor"
@"CSAssetManager"
@"CSTrialAssetManager"
v52@0:8@16@24B32@36@44
v36@0:8@16@24B32
v40@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioRecordContext"24@"CSAudioStartStreamOption"32
v52@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioRecordContext"24B32@"CSAudioStartStreamOption"36@"NSString"44
v40@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioStopStreamOption"24Q32
v40@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioStopStreamOption"24@"NSString"32
v44@0:8@"CSSiriClientBehaviorMonitor"16B24@"NSString"28@"CSAudioRecordContext"36
v36@0:8@"CSSiriClientBehaviorMonitor"16@"CSAudioStream"24B32
v24@0:8@"CSSiriClientBehaviorMonitor"16
@28@0:8Q16B24
@28@0:8@16B24
S28@0:8^f16i24
s16@0:8
v20@0:8s16
C16@0:8
v20@0:8C16
@40@0:8q16@24@32
q32@0:8q16@24
q36@0:8@16B24@28
@44@0:8@16@24@32B40
q40@0:8@16@24@32
q32@0:8@16@24
q44@0:8@16@24B32q36
@"AFClientConfiguration"
@"AFExperimentContext"
@"AFSpeechRecordingAlertPolicy"
@"AFLanguageDetectionUserContext"
Q24@0:8@16
d24@0:8@16
v28@0:8@"AVAudioPlayer"16B24
v32@0:8@"AVAudioPlayer"16@"NSError"24
v24@0:8@"AVAudioPlayer"16
v32@0:8@"AVAudioPlayer"16Q24
B40@0:8Q16@24^@32
@"AVAudioPlayer"
v36@0:8B16@20d28
@"CSSiriAssertionMonitor"
@"NSData"
v68@0:8Q16d24d32d40@"NSString"48B56@?<v@?BB@"NSArray">60
v32@0:8Q16@?<v@?B>24
@"<CSSmartSiriVolumeControllerDelegate>"
@"CSSmartSiriVolumeClient"
v40@0:8@"CSKeywordAnalyzerNDEAPI"16@"CSKeywordAnalyzerNDEAPIResult"24Q32
@60@0:8@16@24Q32Q40@48B56
@"<CSPhraseNDEAPIScorerDelegate>"
@"CSShadowMicScoreCreator"
v44@0:8@16@24B32@?36
v72@0:8@16@24@32B40Q44@52B60@64
@80@0:8@16@24@32B40Q44@52B60@64@?72
@"<CSADCompanionServiceProvider>"
@"<CSVoiceTriggerAwareZeroFilterDelegate>"
@"CSAudioZeroFilter"
@44@0:8Q16Q24f32f36f40
@72@0:8d16Q24@32q40@48@56d64
v32@0:8@"CSMediaPlayingMonitor"16q24
@28@0:8f16@"CSAsset"20
v24@0:8@"CSAsset"16
@"CSSmartSiriVolumeEstimate"40@0:8Q16@"NSNumber"24Q32
v28@0:8I16q20
v52@0:8@16q24B32Q36Q44
f24@0:8q16
f24@0:8f16f20
f20@0:8f16
f36@0:8f16f20f24f28f32
f44@0:8f16f20f24f28f32f36f40
f28@0:8f16f20f24
^f24@0:8@16
{unique_ptr<SmartSiriVolume, std::default_delete<SmartSiriVolume>>="__ptr_"{__compressed_pair<SmartSiriVolume *, std::default_delete<SmartSiriVolume>>="__value_"^{SmartSiriVolume}}}
{vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}
@"NSUserDefaults"
v48@0:8@16@24@32^v40
@144@0:8B16B20B24q28@36@44@52@60I68I72@76d84d92d100Q108Q116@124B132q136
@28@0:8B16@20
@"<AFBluetoothDevice>"
@68@0:8Q16@24@32@40@48B56@60
@"CSVoiceTriggerFirstPassMetrics"
v72@0:8d16Q24@32d40Q48d56@64
@"OSDFeatures"
@"_EAREndpointer"
@"CSServerEndpointFeatures"
@"NSDate"
B32@0:8d16^@24
@"<CSRemoteRecordClientDelegate>"
v24@0:8@"<NviDataReceiver>"16
@"NviContext"
@32@0:8q16Q24
@"CSSiriMobileBluetoothDeviceDataSource"
v24@0:8@"CSAssetManager"16
v48@0:8@"NSString"16@"NSString"24@"NSURL"32@?<v@?@"NSError"dq>40
v48@0:8@"NSString"16@"NSURL"24@"NSString"32@?<v@?@"NSError"dq>40
v40@0:8@"NSString"16@"NSURL"24@?<v@?@"NSError"dq>32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@?<v@?@"NSError">40
v32@0:8@"NSURL"16@?<v@?@"NSError"dq>24
v80@0:8Q16Q24q32@40@48@56@64@?72
v64@0:8Q16Q24@32@40@48@?56
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSString"@"NSError">24
v80@0:8Q16Q24q32@"NSString"40@"NSUUID"48@"NSArray"56@"NSArray"64@?<v@?@"CSVoiceTriggerRTModel"@"CSVoiceTriggerRTModel"@"NSError">72
v64@0:8Q16Q24@"NSString"32@"NSArray"40@"NSArray"48@?<v@?@"CSVoiceTriggerRTModel"@"CSVoiceTriggerRTModel"@"NSError">56
v40@0:8@"NSArray"16@"NSString"24@?<v@?@"NSString"@"NSError">32
B32@0:8@16@?24
B20@0:8B16
v28@0:8@16i24
v28@0:8@"AFNotifyObserver"16i24
v40@0:8@"AFNotifyObserver"16Q24Q32
@"<CSAttSiriSessionStateDelegate>"
@"AFNotifyObserver"
Vv24@0:8@?16
Vv32@0:8@16@?24
Vv40@0:8@16q24@?32
Vv24@0:8@?<v@?@"NSString">16
Vv32@0:8@"NSString"16@?<v@?@"NSString">24
Vv40@0:8@"NSArray"16q24@?<v@?@"NSError">32
Vv24@0:8@?<v@?Q>16
Vv24@0:8@?<v@?>16
Vv24@0:8@?<v@?B>16
Vv24@0:8@?<v@?q>16
@44@0:8@16@24B32Q36
v48@0:8@16d24d32@?40
@48@0:8@16d24d32@?40
@"AFHeartBeat"
@28@0:8f16i20f24
v32@0:8r^v16Q24
{unique_ptr<corespeech::CSAudioCircularBufferImpl<unsigned char>, std::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>>="__ptr_"{__compressed_pair<corespeech::CSAudioCircularBufferImpl<unsigned char> *, std::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>>="__value_"^v}}
@"CSAudioStreamRequest"
@"CSAudioStartStreamOption"
@"CSSiriAudioRoute"
@72@0:8q16q24d32@40d48@56q64
@64@0:8q16q24d32@40d48@56
@"CSActivationEvent"
v64@0:8@16Q24Q32@40@48@?56
v72@0:8Q16Q24@32@40@48@56@?64
@"CoreSpeechXPCFakeModelMonitor"
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}16@0:8
v24@0:8^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}16
^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}
v52@0:8@16@24Q32Q40i48
v52@0:8@"CSAudioPreprocessor"16@"NSData"24Q32Q40i48
@56@0:8Q16q24@32@40@48
@48@0:8Q16q24@32@40
B32@0:8Q16q24
@"<CSAudioProviderDelegate>"
@"CSAudioPreprocessor"
@"CSOSTransaction"
@"CSAudioRecordDeviceIndicator"
@"CSMicUsageReporter"
@"CSADPPreventStandbyAssertion"
@"CSPhoneCallStateMonitor"
@56@0:8Q16@24@32@40Q48
I24@0:8Q16
v32@0:8@"OSDAnalyzer"16@"OSDFeatures"24
v32@0:8@"OSDAnalyzer"16d24
@"OSDAnalyzer"
@48@0:8q16@24@32@40
v40@0:8@16d24@32
v32@0:8@"<CSEndpointAnalyzer>"16d24
v40@0:8@"<CSEndpointAnalyzer>"16d24@"CSEndpointerMetrics"32
@"<CSEndpointAnalyzerImpl>"
v40@0:8^{BTAccessoryManagerImpl=}16i24^{BTDeviceImpl=}28i36
v24@0:8^{BTDeviceImpl=}16
^{BTAccessoryManagerImpl=}
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
v32@0:8q16@?24
@"AFBluetoothDeviceInfo"16@0:8
v24@0:8@?<v@?@"AFBluetoothDeviceInfo">16
v24@0:8@?<v@?@"AFBluetoothHeadphoneInEarDetectionState">16
v24@0:8@?<v@?q>16
v32@0:8q16@?<v@?@"NSError">24
v24@0:8@"<AFBluetoothDeviceObserver>"16
@"AFBluetoothDeviceInfo"
@"AFBluetoothHeadphoneInEarDetectionState"
v44@0:8B16@20@28@36
@"AFInstanceContext"
v40@0:8@"NSString"16@"NSString"24@?<v@?B@"NSError"@"NSUUID">32
v40@0:8@"NSURL"16@"NSUUID"24@?<v@?B@"NSError"QQ>32
v24@0:8@?<v@?@"NSMutableArray">16
v36@0:8^f16Q24f32
v24@0:8@"EARClientSilenceFeatures"16
@20@0:8f16
@"<CSSPGEndpointAnalyzerDelegate>"
@"EARCaesuraSilencePosteriorGenerator"
Vv20@0:8i16
Vv32@0:8@16i24i28
Vv32@0:8@"NSData"16i24i28
Vv24@0:8@?<v@?@"NSData">16
v24@0:8^{AudioStreamBasicDescription=dIIIIIIII}16
@"<CSSiriAcousticFingerprinterDelegate>"
@"NSSet"
v40@0:8@16@24d32
v40@0:8@"CSSiriAcousticFingerprinter"16@"NSData"24d32
v44@0:8@16@24f32Q36
v52@0:8@16@24f32Q36@44
v36@0:8@16d24B32
v36@0:8@16B24@28
v48@0:8@16@24q32Q40
v40@0:8@16q24d32
v40@0:8Q16Q24@?32
v32@0:8@"CSSpeechController"16@"NSData"24
v40@0:8@"CSSpeechController"16@"NSData"24Q32
v44@0:8@"CSSpeechController"16@"NSArray"24f32Q36
v52@0:8@"CSSpeechController"16@"NSArray"24f32Q36@"CSAudioDeviceInfo"44
v32@0:8@"CSSpeechController"16d24
v36@0:8@"CSSpeechController"16d24B32
v36@0:8@"CSSpeechController"16B24@"NSError"28
v44@0:8@"CSSpeechController"16@"CSAudioDeviceInfo"24B32@"NSError"36
v40@0:8@"CSSpeechController"16q24Q32
v48@0:8@"CSSpeechController"16@"CSAudioDeviceInfo"24q32Q40
v24@0:8@"CSSpeechController"16
v40@0:8@"CSSpeechController"16q24d32
v32@0:8@"CSSpeechController"16q24
v32@0:8@"CSSpeechController"16Q24
v40@0:8@"CSSpeechController"16q24@"NSError"32
v32@0:8@"CSSpeechController"16@"NSDictionary"24
v28@0:8@"CSSpeechController"16B24
v40@0:8Q16Q24@?<v@?@"NSError">32
v36@0:8@"NSString"16@"NSDictionary"24B32
v32@0:8{AFTimeRange=dd}16
v28@0:8d16B24
v36@0:8q16B24Q28
@56@0:8@"NSObject<OS_dispatch_queue>"16@"CSSpeechController"24@"CSAudioSessionController"32@"CSSiriAudioPlaybackService"40@"AFExperimentContext"48
v24@0:8@"<CSSiriSpeechCapturingDelegate>"16
v24@0:8@"AFSpeechRequestOptions"16
v24@0:8@?<v@?dd>16
v36@0:8@"SASResultCandidate"16B24@?<v@?BB@"NSArray">28
@20@0:8B16
v28@0:8q16B24
v28@0:8(?={?=SS}I)16Q20
i20@0:8(?={?=SS}I)16
v28@0:8(?={?=SS}I)16@20
v32@0:8q16@24
B40@0:8@16@?24^@32
@40@0:8q16q24B32B36
v64@0:8@16@24q32Q40q48@56
i28@0:8i16@20
v44@0:8@16q24Q32B40
v40@0:8q16q24@32
v32@0:8q16d24
v48@0:8@16d24d32@40
v32@0:8@?16d24
B40@0:8@16Q24@?32
@"<CSSiriSpeechCapturingDelegate>"
@"CSSpeechController"
@"CSSiriAudioPlaybackService"
@"<CSEndpointAnalyzer>"
@"CSSiriSpeechRecordingContext"
@"CSSiriAudioActivationInfo"
@"CSSiriAcousticFingerprinter"
@"AFWatchdogTimer"
@"CSEndpointerMetrics"
@"CSEndpointDelayReporter"
@"SASResultCandidate"
@"AFSpeechSynthesisRecord"
@"AFBluetoothWirelessSplitterSessionStateObserver"
v40@0:8@16q24q32
v40@0:8@"AFMemoryPressureObserver"16q24q32
v32@0:8@"AFAudioPlaybackRequest"16@?<v@?@"NSError">24
v40@0:8@"AFAudioPlaybackRequest"16Q24@?<v@?@"NSError">32
v28@0:8@"AFAudioPlaybackRequest"16B24
v56@0:8@16Q24@?32@?40@?48
@56@0:8@16Q24Q32Q40@48
@"<CSStartOfSpeechDetectorDelegate>"
@"<CSVoiceTriggerXPCClientDelegate>"
@60@0:8@16@24@32@40B48@52
@44@0:8@16B24@28@36
@52@0:8@16B24@28@36@44
v32@0:8@16B24f28
v28@0:8@"CSOpportuneSpeakListener"16B24
v32@0:8@"CSOpportuneSpeakListener"16B24f28
@"CSOpportuneSpeakListener"
v44@0:8@16B24Q28Q36
@"<CSAudioConverterDelegate>"
v48@0:8@16@24^@32^@40
v48@0:8Q16Q24Q32@?40
v48@0:8@16@24Q32@?40
@40@0:8d16d24d32
v36@0:8@16i24d28
v36@0:8@16i24@28
v28@0:8@"AVVoiceController"16B24
v36@0:8@"AVVoiceController"16B24@"NSError"28
v32@0:8@"AVVoiceController"16q24
v24@0:8@"AVVoiceController"16
v28@0:8@"AVVoiceController"16i24
v36@0:8@"AVVoiceController"16i24d28
v32@0:8@"AVVoiceController"16@"NSError"24
v36@0:8@"AVVoiceController"16i24@"NSError"28
v40@0:8@"AVVoiceController"16@"AVVCAlertInformation"24@"NSError"32
v32@0:8@"AVVoiceController"16@"NSDictionary"24
v32@0:8@"AVVoiceController"16@"AVVCAudioBuffer"24
v28@0:8B16@"NSArray"20
v44@0:8@"AVVoiceController"16Q24B32@"NSError"36
v40@0:8@"AVVoiceController"16Q24q32
v40@0:8@"AVVoiceController"16Q24@"AVVCAudioBuffer"32
v32@0:8@"AVVoiceController"16Q24
v40@0:8@"CSAudioFileReader"16@"NSData"24Q32
v36@0:8@"CSAudioFileReader"16B24@"NSError"28
v32@0:8@"CSAudioFileReader"16q24
v32@0:8Q16@"NSError"24
v32@0:8@"NSData"16Q24
v24@0:8@"CSRemoteRecordClient"16
v28@0:8@"CSUserSessionActiveMonitor"16B24
v24@0:8@"<CSAudioServerCrashEventProvidingDelegate>"16
v24@0:8@"<CSAudioSessionEventProvidingDelegate>"16
v40@0:8Q16B24@28B36
v60@0:8@16Q24@32Q40Q48i56
v36@0:8B16Q20@28
v32@0:8q16Q24
@"AVVoiceController"
{AudioBufferList="mNumberBuffers"I"mBuffers"[1{AudioBuffer="mNumberChannels"I"mDataByteSize"I"mData"^v}]}
@"CSRemoteRecordClient"
@"CSAudioFileReader"
@"CSReusableBufferPool"
@"<CSAudioServerCrashEventProvidingDelegate>"
@"<CSAudioSessionEventProvidingDelegate>"
v48@0:8@16@24@32@40
v52@0:8@16@24@32B40@44
v48@0:8@"CSOpportuneSpeakBehaviorMonitor"16@"CSAudioRecordContext"24@"NSString"32@"CSAudioStartStreamOption"40
v52@0:8@"CSOpportuneSpeakBehaviorMonitor"16@"CSAudioRecordContext"24@"NSString"32B40@"CSAudioStartStreamOption"44
v32@0:8@"CSOpportuneSpeakBehaviorMonitor"16@"CSAudioStopStreamOption"24
xeps
supo
supo
mcpl
33s@
fff?
333?
333333
333333
333333
