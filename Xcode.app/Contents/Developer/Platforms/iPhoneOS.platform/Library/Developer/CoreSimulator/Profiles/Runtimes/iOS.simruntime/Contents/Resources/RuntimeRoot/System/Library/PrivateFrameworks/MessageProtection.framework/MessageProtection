Parameter error, all pointers must be valid. sourceMessage = %p, sender = %p, receiver = %p, protected message = %p.
SecMPVerifyMessageContents: Missing incoming data.
Failed to Encrypt message
MP MW Ephemeral Device Identity
SecRandomCopyBytes
SigningPublicKey with data representation: %@
Cannot pad a nil message.
Error obtaining the padding length: %@
The padding configuration suggested is larger than what can be represented in the payload: %li
An issue occured while generating random bytes for padding with error: %i
Cannot unpad a nil message.
The message is too short (%lu) to contain any padding.
The message is too short (%lu) to contain the indicated padding(%u).
v8@?0
com.apple.messageprotection
MessageProtection
com.apple.security.messageprotection.error
Failed to initialize a full key: %@
Failed to initiate a full key from the passed serialization.
We failed to initialize a key with error: %@
FullKey with public data representation: %@
v32@?0@"NGMFullPrekey"8Q16^B24
Failure to get the public prekey of a new ephemeral.
Failure to verify the signature for the freshly generated prekey.
Failed to deserialize a prekey containing public key: %@ 
 signature: %@ 
 timestamp: %f 
 because of error: %@
NGMFullPrekey with DHKey: %@
 Public Prekey: %@.
SecMPVerifyAndExposeMessage: Missing incoming message.
SecMPVerifyAndExposeMessage: Missing sender.
SecMPVerifyAndExposeMessage: Missing receiver.
SecMPVerifyAndExposeMessage: Missing exposedMessageContents DataRef.
SecMPVerifyAndExposeMessage: Missing incoming data.
Unknown format of message to verify and expose
SecMPVerifyMessageContents: Incoming length is too short.
SecMPVerifyMessageContents: Inconsistent encryptionSize.
SecMPVerifyMessageContents: Unable to get public identity from private of the receiver.
SecMPVerifyMessageContents: Insufficient size remaining.
SecMPVerifyMessageContents: Insufficient size remaining for the signature.
SecMPVerifyMessageContents: Insufficient public key encryption space.
Failed to Decrypt message
NGMPrekeySignature
Failed to initialize the public identity.
The deserialization of the public fixed device identity failed.
Failed to encrypt to prekey that is no longer valid: %f.
Failed to generate an ephemeral P-256 key for message sealing.
LastPawn-MessageKeys
The encryption of an outgoing message failed.
NGMPublicDeviceIdentity with device signing key: %@ 
 prekey: %@
NGMEncryptedAttributeKTGossipData
com.apple.FaceTime.Voucher
Failed to obtain data for the public key.
Failed to initialize compact corecrypto public key.
Failed to initialize masking rng for corecrypto key agreement.
Failure to compute a shared secret with corecrypto.
Message to be encrypted larger than 64K
Failed to read size
com.apple.FaceTime.QRKeying
Looking up the persistent reference failed.
Keychain lookup failed
Invalid input size
Invalid message type
Invalid handling
nextMultiple
SecMessageLengthHiding.m
DHKey with public data representation: %@
SecMPPIVerifySignature: Incorrect signature size or start.
SecMPPIVerifySignature: Failed to allocate memory for replacement signature.
SecMPPIVerifySignature: Failed to decode DER of replacement signature.
SecMPPIVerifySignature: Failed to verify signature (primary and replacement signature).
SecMPFullIdentity
SecMPPublicIdentity
NULL parameter passed
Testmessage
SecMPFullIdentityCreateFromRefs
SecMessageFullIdentity.m
SecMPSignAndProtectMessage((__bridge CFDataRef)message, identityRef, publicIdentityRef, (__bridge CFMutableDataRef)protectedMessage, NULL)
SecMPVerifyAndExposeMessage((__bridge CFDataRef)protectedMessage, publicIdentityRef, identityRef, (__bridge CFMutableDataRef)recoveredMessage, NULL)
[recoveredMessage isEqualToData:message]
<SecMPFullIdentity: %p>
<SecMPPublicIdentity: %p>
A NGMFullDeviceIdentity Key generation was requested,                                                                                      but failed because it was requested with access: %@
The deserialization of the NGMFullDeviceIdentity failed.
Failed to initialize signing keys from NGMFullDeviceIdentity data.
v32@?0@"NSData"8@"NSError"16@?<B@?^@>24
v40@?0@"NSData"8@"NSDictionary"16@"NSError"24@?<B@?^@>32
The outer structure of the message is malformed.
The outer structure of the message is missing the ephemeral DH key.
An error occured while decrypting the message, after a valid signature check.
Inside of the incoming payload could not be parsed.
No Replay Counter Found.
Failed to initialize replay counter database.
An error occured while validating the counter: %@
The message was rejected because of a detected replay.
No key could be found to validate the signature, with optional failure: %@.
None
NGMFullDeviceIdentity with device signing key: %@ 
 Prekeys: %@
No error set
Incorrect data for public key: %@
Deserialization of SecKey failed with description: %@
This key is not allowed to do a DH key agreement.
Attempting to sign with a key that doesn't support that operation.
Key Validation String
Failed to test sign with SecKeyP256 during initialization.
Failed to verify signature with SecKeyP256 during initialization.
Discarding this payload because of bad NGM version.
No prekeys were found on the device
Sender and receiver's keys are incorrect.
%@%@
v32@?0@8Q16^B24
Receiver's keys are incorrect.
The receiver's %@ and sender's identity keys are incorrect.
encryption key
signing key
The receiver's signing key is incorrect.
The receiver's encryption key is incorrect.
The sender key is incorrect.
Unhandled key validator case.
DHPublicKey with data representation: %@
SigningKey with public data representation: %@
The passed legacy key representation is of incorrect size.
Failed to parse legacy key format.
Failed to deserialize the device public prekey.
Failed to initialize the DHPublicKey for the prekey.
The prekey was incorrectly signed, rejecting.
The ephemeral prekey has expired.
NGMPublicPreKey with DHKey: %@
 Timestamp:%f 
 Signature: %@.
com.apple.SharedWithYou.Presence
/NGMTrustStore-%@.db
BATS
/AppleInternal/XCTests/com.apple.messageprotection
XCTestBundlePath
xctest
/Library/IdentityServices
com.apple.MessageProtection
NGMTrustStore
momd
Failed to get the persistentStoreDescription.
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
Outgoing
Incoming
destinationHash == %@
Replay Protection Error: Ran out of counters
It appears we have a collision in the hashes.
An issue occured while validating the counter: %@
B16@?0^@8
We have duplicate entries on the incoming validation counter for key: %@ 
,                                 destinationHash: %@.
committing
validating
tag = %@
We have duplicate entries on registered prekey: %@.
registrationDate < %@
v32@?0@"SendingDestination"8Q16^B24
registering
encrypting to
validating signature of message
PublicKey with data representation: %@
%@ %@
encryptionKey
signingKey
-[NGMPBLegacyKey writeTo:]
NGMPBLegacyKey.m
nil != self->_encryptionKey
nil != self->_signingKey
dhKey
timestamp
prekey_signature
-[NGMPBDevicePreKey writeTo:]
NGMPBDevicePreKey.m
nil != self->_prekeySignature
prekeys
-[NGMPBFullDeviceIdentity writeTo:]
NGMPBFullDeviceIdentity.m
self->_signingKey != nil
message
counter
ktGossipData
debug_info
-[NGMPBInnerMessage writeTo:]
NGMPBInnerMessage.m
nil != self->_message
encryptedPayload
ephemeralPubKey
signature
keyValidator
-[NGMPBOuterMessage writeTo:]
NGMPBOuterMessage.m
nil != self->_encryptedPayload
nil != self->_ephemeralPubKey
nil != self->_signature
signing_key
-[NGMPBPublicDeviceIdentity writeTo:]
NGMPBPublicDeviceIdentity.m
prekey
-[NGMPBPublicDevicePrekey writeTo:]
NGMPBPublicDevicePrekey.m
nil != self->_prekey
keychainTag
keystore
keyData
Software
SecKey
CTKTokenOID
(unknown: %i)
RegisteredPreKey
SenderPublicIdentity
SendingDestination
MessageProtection.GLTDiversifiedKey
init()
_TtC17MessageProtection17GLTDiversifiedKey
^{__SecKey=}16@0:8
diversifiedKey
trackingPreventionSalt
T^{__SecKey=},N,R,VdiversifiedKey
T@"NSData",N,R,VtrackingPreventionSalt
_TtC17MessageProtection26GLTKeyDiversificationSwift
@48@0:8^{__SecKey=}16@24@32^@40
^{__SecKey=}48@0:8^{__SecKey=}16@24@32^@40
com.apple.SharedWithYou
MessageProtection/SymmetricRatchet+Serialization.swift
MPPB.RatchetState
MPPB.SKPaddedStatus
payload
padding
MPPB.KeyAndIndex
index
chainKey
messageKeys
MPPB.SKIncomingRatchet
ratchetState
publicSigningKey
MPPB.SKOutgoingRatchet
privateSigningKey
currentMessageKey
subscriptionKey
_TtC17MessageProtection13GFTKeyWrapper
@44@0:8@16B24^{__SecKey=}28^@36
@40@0:8@16^{__SecKey=}24^@32
@44@0:8@16@24B32^@36
GFT-MKM-Wrapping
Failed importing private key for encryption: %@
Failed importing public key for encryption:
Failed importing private key for key wrapping %@
_TtC17MessageProtection9SKRatchet
@16@0:8
_TtC17MessageProtection17SKOutgoingRatchet
@32@0:8@16^@24
B16@0:8
@40@0:8@16@24^@32
v16@0:8
ratchet
currentSubscriptionKey
_TtC17MessageProtection17SKIncomingRatchet
@44@0:8@16S24@28^@36
@56@0:8Q16@24@32@40^@48
signingPublicKey
MessageProtection/StatusKitRatchet.swift
MessageProtection.SKIncomingRatchet
com.apple.statuskit
_TtC17MessageProtection4HKDF
@40@0:8@16@24q32
Message Encryption: sender/receiver hash: %@ status: %@
Message Encryption: sender/receiver hash: %@ status: success
%@. The error was not assigned to a CFError.
%@. The error was not assigned to an NSError.
Unsupported key store: %d
The `CTKTokenOID protobuf passed had a missing keyData field.
Deletion of a keychain item failed for after migration with error: %i
Migration to CTKOID failed.
Migration to CTKOID key storage done.
Failed to sign a new prekey with error: %@
Failed to delete prekey ephemeral key (%@) with error: %@
Message Decryption: sender/receiver hash: %@ status: %@
Message Decryption: sender/receiver hash: %@ status: success
Failed to initialize an RSA Key with error: %@.
Failed to encrypt with RSA: %@.
Failed to generate a key rolling ticket because of failed prekey generation.
Failed to obtain the dataRepresentation of the signing key
Cannot retrieve prekey information because the timestamp of the signature is too old to be registered.
Attempting to register an invalidly signed public key: %@
Error while obtaining counter %@
Failed to generate an ephemeral ECDH key error code: %i
Reached the unimplemented keychainData method on CoreCryptoP256.
Reached the unimplemented sign method on CoreCryptoP256.
Reached the unimplemented initWithData method on CoreCryptoP256.
Failed to lookup legacy persistent reference for signing key: %i
Failed to lookup legacy persistent reference for encryption key: %i
Error occured while deleting the migrated persistent reference: %i
Migration of a legacy key has completed and previous keys have been deleted.
Message Encryption: nextPowerOfTwo invalid input %llx, %llx
Failed to initialize a legacy ECDSA key with error: %@.
Failed to create legacy public key from bytes: %@
Failed to encrypt data to legacy public key.
Failed to initialize legacy key: %@
Failed to perform legacy signature: %@
Signing key generation failed: %@
Failed to deserialize prekey in NGMFullDeviceIdentity initialization.
Starting key migration to CTKOID.
Failed to initialize replay counter database.
No device prekey is available, rolling should occur.
Failed to get the data representation of the SecKeyP256 public key: %@
Failed to import key from SecKeyCopyExternalRepresentation into ccec: %i
Failed to initialize public key from data with error: %@ for data: %@.
Failed verifying P-256 signature: %@
Failed to generate a P-256 Key with access control %@.
Failed to establish public DH Key.
Failed to initialize the public key with error: %@
Failed to get a Private Key Ref with error while initializing SecKeyP256: %@
No key validator was found.
While checking the key validator, we found the following issues: 
 %@%@%@
Failed to get public key of a prekey while checking the key validator.
Failed to deserialize the legacy key's protocol buffer.
Failed to initialize signing key: %@
Failed to initialize encryption key: %@
Failed to generate legacy signing key.
Failed to generate legacy encryption key.
Parsing a legacy key of version 3.
Parsing a legacy key of version 2.
Failed to generate an RSA Key with error: %@.
Failed to decrypt with RSA: %@.
Setting shared instance of the NGMReplayManager.
Failed to get the reference to the Home Directory.
Failing to initialize a Managed Object Context for NGMTrustStore queries: %@.
Performing initial load of the replay database.
Failed to initialize NSManagedObjectModel with URL: %@
Failed to load persistent store: %@
Loaded container with description: %@
The loading of the persistent contained failed, returning nil.
Loading the persistent container worked, setting it to shared instance
Loaded replay database was created at: %@
Failed to obtain the managed object context required to do the outgoing replay counter query: %@.
Database query failed while obtaining sending counter: %@
Sending counter using the previous hashing scheme for existing destinationHash.
An issue occured persisting the managed object context: %@
Validating counter (%i) for destination hash: %@
Counter (%i) is considered valid.
Counter (%i) is considered invalid.
Failed to obtain the managed object context required to validate the incoming replay counter query: %@.
Database Query Failure while obtaining incoming counter: %@
There was an issue obtaining the registered prekey: %@
Successfully fetched counters for destination (%@) and counter is %s valid.
An error happened while %@ the counter: %@
Failed to obtain the managed object context required to validate delete the receiving counters: %@.
Database query failed while cleaning up old counters: %@
Failed to delete the counters associated with %@: %@
No counters to delete for %@, probably never received any messages to that prekey.
Failed to obtain the managed object context required to validate delete the sending destinations: %@.
Database query failure while deleting old keys: %@
Failed to delete the counters on the sending flow for keys: %@
The encryption prekey appears to have been signed with a date in the future
The encryption prekey is older (%@) than the last allowed date (%@) for %@ at %@.
The encryption prekey appears to have been signed with a date in the future.                    The time was probably rolled back on the phone.
Removing prekey %@ since it's safe to delete it now (expired).
Time has been rolled back since the last time we registered a key.
It's been a week since the last registration, let's roll.
Attempting to initialize public key with invalid format: %@ and error: %@
MessageProtection
GLTDiversifiedKey
GLTKeyDiversificationSwift
SecKey
NSecKeyRef
CFString
NCFStringRef
GLTKeyDiversificationError
CFError
NCFErrorRef
CoreFoundation
MPPB_RatchetState
MPPB_KeyAndIndex
MPPB_SKPaddedStatus
MPPB_SKIncomingRatchet
MPPB_SKOutgoingRatchet
GFTKeyWrapper
KeyWrappingErrors
SymmetricRatchetErrors
SKRatchet
SKOutgoingRatchet
SKIncomingRatchet
StatusKitErrors
HKDFRatchet
SymmetricRatchet
HKDF
SymmetricRatchetStep
So8NSObjectC
So6NSDataC
_yptG
_ypt
GSg7cfError_t
3key_
5indext
3key_
5valuet
ySi_
Sg_ABt
SvSg
3key_
5valuet
_pSg
3key_
5indextSg
SiSg
$s17MessageProtection20SymmetricRatchetStepP
diversifiedKey
trackingPreventionSalt
failedExportingSecKey
incorrectTrackingPreventionSaltSize
incorrectInputKey
incorrectKeyType
incorrectKeySize
unknownFields
_key
_index
messageKeys
_chainKey
_ratchetState
_privateSigningKey
_currentMessageKey
_subscriptionKey
_publicSigningKey
_payload
_padding
incorrectPublicKey
wrappedKeyIsTooShort
wrappedKeysIsIncorrectLength
keySerialization
internalKeyDerivationIssue
internalEncryptionIssue
noMatchingKey
outOfRangeIndex
invalidSerializedState
missingMessageKey
ratchet
signingKey
currentSubscriptionKey
currentMessageKey
signingPublicKey
messageKeys
ratchetOutOfBounds
invalidSignature
messageKeyNoLongerAvailable
misformattedCiphertext
decryptionFailure
invalidSerializedState
invalidPayloadLengthToPad
invalidInnerPayload
chainKeyDerivationInfoLabel
messageKeyDerivationInfoLabel
messageKeyByteCount
chainKey
messageKeys
step
GLTDiversifiedKeyAndTPS
GLTKeyDiversification
SigningPublicKey
NGMPadding
SecMessageLegacyPublicIdentity
NGMMessageSignatureFormatter
SignatureFormatter
NSObject
FullKey
MigrationToModernizedKeyStorage
LegacySigningKeyPrivate
NGMFullPrekey
SecKeyRSAPublic
NGMPrekeySignatureFormatter
NGMKeyRollingTicket
NGMPublicDeviceIdentity
NGMMessageFormatter
NGMFTVoucherSignatureFormatter
CoreCryptoP256Private
P256PrivateKeyProtocol
NGMMessageHasher
NGMGFTSignatureFormatter
Signing
Migration
NGMRollingBitmaskBuffer
DHKey
LegacySigningKeyPublic
MPStatusKitSubscriptionKeys
MPStatusKitMessage
MPStatusKitOutgoingRatchet
MPStatusKitIncomingRatchet
NGMProtocolVersion
Attributes
NGMFullDeviceIdentity
MP_AES_CTR
SecKeyP256Public
P256PublicKeyProtocol
SecKeyP256Private
GFTKeyWrapping
NGMKeyValidator
ValidateSize
AppendWithSize
DHPublicKey
SigningKey
SecMessageLegacyFullIdentity
SecKeyRSAPrivate
NGMPublicPreKey
NGMGelatoPresenceSignatureFormatter
NGMReplayManager
NGMTimeBasedEvaluations
PublicKey
SignatureVerification
NGMPBLegacyKey
NSCopying
NGMPBDevicePreKey
NGMPBFullDeviceIdentity
NGMPBInnerMessage
NGMPBOuterMessage
NGMPBPublicDeviceIdentity
NGMPBPublicDevicePrekey
NGMPBP256Key
RegisteredPreKey
CoreDataProperties
SenderPublicIdentity
SendingDestination
T@"NSData",R,N,V_privateKeyBlob
StringAsKeystore:
Ti,N,V_keystore
T*,V_valid_values_buffer
T@"<P256PublicKeyProtocol>",&,V_key
_prekey
T@"DHPublicKey",R,N,V_dhKey
base64EncodedStringWithOptions:
T@"LegacySigningKeyPublic",R,N,V_signingKey
counter
T@"NGMPBP256Key",&,N,V_dhKey
dealloc
T@"NGMPublicDeviceIdentity",R,N,V_registrationInfo
destinationHash
T@"NGMPublicPreKey",R,N,V_publicPrekey
ephemeralPubKey
T@"NSData",&,N,V_debugInfo
getBytes:range:
T@"NSData",&,N,V_encryptionKey
hasKtGossipData
T@"NSData",&,N,V_ephemeralPubKey
identityWithIdentityData:error:
T@"NSData",&,N,V_keyValidator
initWithLength:
T@"NSData",&,N,V_message
isProxy
T@"NSData",&,N,V_prekeySignature
keyData
T@"NSData",&,N,V_signedData
T@"NSData",&,N,V_signingKeyPersistentRef
prekeySignature
T@"NSData",R,N,V_chainKey
prekeysAtIndex:
T@"NSData",R,N,V_formattedSignedData
release
T@"NSData",R,N,V_signature
senders
T@"NSData",R,N,V_trackingPreventionSalt
setKeychainTag:
T@"NSDate",C,D,N
setPersistentStoreDescriptions:
T@"NSMutableArray",&,N,V_prekeys
signData:error:
T@"NSString",&,V_keychainTag
T@"NSString",R,C
.cxx_destruct
T@"NSSet",&,D,N
T#,R
Ti,R,V_keyStore
T@"<P256PrivateKeyProtocol>",R,V_key
_diversifiedKey
T@"DHKey",R,N,V_dhKey
_privateKeyBlob
T@"LegacySigningKeyPrivate",&,N,V_signingKey
copyTo:
T@"NGMFullPrekey",R,N,V_prekey
dataWithLength:
T@"NGMPBP256Key",&,N,V_signingKey
decrypt:key:IV:
T@"NGMPublicPreKey",&,N,V_prekey
encrypt:key:IV:
T@"NSData",&,D,N
generateNewKeyWithAccess:error:
T@"NSData",&,N,V_encryptedPayload
hasKeyValidator
T@"NSData",&,N,V_encryptionKeyPersistentRef
identityFromV2Bytes:size:error:
T@"NSData",&,N,V_keyData
initTicketWithSigningKey:error:
T@"NSData",&,N,V_ktGossipData
isMigratedV2Key
T@"NSData",&,N,V_prekey
T@"NSData",&,N,V_signature
message
T@"NSData",&,N,V_signingKey
nowDate
T@"NSData",&,V_serializedKey
prekeys
T@"NSData",R,N,V_encryptedMessage
ratchet
T@"NSData",R,N,V_prekeyPublic
sealMessage:withEncryptedAttributes:signedByFullIdentity:error:
T@"NSData",R,N,V_signingKey
setKey:
T@"NSDate",&,V_date
setMessagedKey:
T@"NSMutableArray",&,N,V_devicePrekeys
setTag:
T@"NSString",&,N,V_keychainTag
skippedCounters
T@"NSString",C,D,N
validatorLength
T@"RegisteredPreKey",&,D,N
T@"SecKeyP256Public",&,N,V_publicKey
T@"SecKeyRSAPrivate",&,N,V_encryptionKey
T@"SecKeyRSAPublic",R,N,V_encryptionKey
T@"SigningKey",&,N,V_deviceSigningKey
T@"SigningPublicKey",&,N,V_signingKey
T@"_TtC17MessageProtection17SKIncomingRatchet",&,N,V_ratchet
T@"_TtC17MessageProtection17SKOutgoingRatchet",&,N,V_ratchet
T@,&,N,V_secKeyRef
T@,R,N,V_privateKey
TB,N
TB,N,V_isMigratedV2Key
TB,R,N
TI,N,V_counter
TI,V_upper_buffer_index
TI,V_valid_values_buffer_size
TQ,R
TS,R,N,V_index
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},V_publicKeyRef
T^{__SecKey=},R,N,V_diversifiedKey
T^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]},V_full_key
Td,N,V_timestamp
Td,R,N,V_timestamp
Ti,D,N
URLForResource:withExtension:
_chainKey
_counter
_date
_debugInfo
_devicePrekeys
_deviceSigningKey
_dhKey
_encryptedMessage
_encryptedPayload
_encryptionKey
_encryptionKeyPersistentRef
_ephemeralPubKey
_formattedSignedData
_full_key
_has
_index
_isMigratedV2Key
_key
_keyData
_keyStore
_keyValidator
_keychainTag
_keystore
_ktGossipData
_message
_newZeroingDataWithBytes:length:
_persistentContainer
_prekeyPublic
_prekeySignature
_prekeys
_privateKey
_publicKey
_publicKeyRef
_publicPrekey
_ratchet
_registrationInfo
_secKeyRef
_serializedKey
_signature
_signedData
_signingKey
_signingKeyPersistentRef
_timestamp
_trackingPreventionSalt
_upper_buffer_index
_valid_values_buffer
_valid_values_buffer_size
absoluteString
addObject:
addPrekeys:
allocWithZone:
appendBytes:length:
appendData:
appendDataAndSize:
appendString:
array
arrayWithCapacity:
arrayWithObjects:
arrayWithObjects:count:
asRef
attributes
attributesOfItemAtPath:error:
autorelease
batchSign:forType:error:
bufferData
bundleWithIdentifier:
bytes
chainKey
class
clearPrekeys
code
computeDestinationHashForIncomingMessageFrom:toLocalKey:
computeDestinationHashForOutgoingMessageTo:withLocalKey:
computeHashForMessage:
conformsToProtocol:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
counterForDestinationWithIdentityKey:sendingIdentity:error:success:
crypt:key:IV:
currentSubscriptionKeys
data
dataRepresentation
dataRepresentationWithError:
dataUsingEncoding:
dataWithBytes:length:
dataWithCapacity:
dataWithData:
date
dateWithTimeIntervalSince1970:
dbNameFromProcess
debugDescription
debugDescriptionForAction:
debugInfo
decrypt:using:error:
decrypt:usingKey:error:
decryptData:error:
decryptMessage:error:
defaultManager
defaultProtectionClassForPlatform
delete
deleteExpiredSendingDestinations
deleteItemWithPersistentRef:
deleteKeyWithTag:
deleteMigratedKeys
deleteObject:
deleteReceivingCountersForKey:
deriveKeyWith:salt:outputSize:
description
devicePrekeys
deviceSigningKey
dhKey
dictionary
dictionaryRepresentation
dictionaryWithObjects:forKeys:count:
diversifiedKey
diversifyPrivateKey:withDocumentIdentifier:trackingPreventionSalt:error:
diversifyPublicKey:trackingPreventionSalt:withDocumentIdentifier:error:
diversifyPublicKey:withDocumentIdentifier:error:
diversifyWithPrivateKey:docId:trackingPreventionSalt:error:
diversifyWithPublicKey:trackingPreventionSalt:docId:error:
encrypt:to:error:
encrypt:toKey:error:
encryptData:
encryptData:error:
encryptedMessage
encryptedPayload
encryptionKey
encryptionKeyPersistentRef
encryptionSize
enumerateObjectsUsingBlock:
environment
eraseFromKeyChain:
errorWithDomain:code:userInfo:
executeFetchRequest:error:
fetchRequest
fetchRequestWithEntityName:
firstObject
formatOutgoingInnerMessageWithPayload:attributes:destinationIdentity:sendingIdentity:error:
formatOutgoingMessageWithEncryptedPayload:ephemeral:signature:keyValidator:
formattedSignedData
full_key
generate
generateNewKeyWithAccess:forceNoSEP:error:
generateWithAccessControl:
getPrivateKeyRefWithError:
hasCounter
hasDebugInfo
hasDhKey
hasKeyData
hasKeychainTag
hash
identity
identityData
identityWithAccess:error:
identityWithAccess:usageIdentifier:error:
identityWithDataRepresentation:error:
identityWithIdentityData:prekeyData:error:
increaseLengthBy:
index
init
initFileURLWithPath:
initRemotePrekeyWithPublicPrekey:signedBy:error:
initToSignKey:
initWithApplicationData:
initWithBytes:length:
initWithCTKTokenOID:error:
initWithCapacity:
initWithConcurrencyType:
initWithContentsOfURL:
initWithContext:
initWithDHOutput:prekeyPub:ephemeralPub:recipientPub:ciphertext:
initWithData:
initWithData:error:
initWithData:upperBufferIndex:
initWithEncryptionKey:signingKey:
initWithEncryptionKeyData:signingKeyData:
initWithEncryptionSecKey:signingSecKey:
initWithIndex:chainKey:signingKey:
initWithIndex:chainKey:signingKey:error:
initWithIndex:encryptedMessage:signature:
initWithKey:
initWithKey:error:
initWithKey:index:signingKey:error:
initWithKey:trackingPreventionSalt:
initWithKeychainTag:error:
initWithName:managedObjectModel:
initWithPBPrekey:error:
initWithPrekey:signingKey:
initWithPrekeySignedBy:error:
initWithProtobufData:
initWithProtobufferData:error:
initWithPublicKey:signature:timestamp:
initWithPublicPrekey:
initWithSecKeyRef:
initWithSigningKey:devicePrekeys:
initWithURL:
isBATS
isEqual:
isEqualToData:
isEqualToString:
isKindOfClass:
isMemberOfClass:
isRunningTests
isValidKeyValidator:receiversIdentity:sendersIdentity:error:
isValidSignature:forMessage:forType:error:
isValidSigningDestination
isValidlySignedBy:error:
isVersionSupported:
isXCTest
keyAgreement:error:
keyAgreement:error:isRetry:
keyAgreementWithPublicKey:error:
keyIdentifier
keyRollingTicketWithError:
keyStore
keyValidator
keyValidatorWithReceiversIdentity:sendersIdentity:
keychainData
keychainTag
keystore
keystoreAsString:
ktGossipData
lastObject
length
lengthValidatedBuffer
loadPersistentStoresWithCompletionHandler:
logDatabaseCreationDate:
mergeFrom:
messagedKey
mutableBytes
mutableCopy
numberWithDouble:
numberWithUnsignedInt:
objectAtIndex:
objectAtIndexedSubscript:
objectContextWithError:
objectForKey:
objectForKeyedSubscript:
oldestDateAllowedToSendTo
openStatusWithIndex:encryptedMessage:authenticating:signature:error:
padMessage:error:
pathExtension
pathWithComponents:
pbDevicePrekey
performBlockAndWait:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
persistentContainerWithError:
persistentStoreCoordinator
persistentStoreDescription
populateIdentity:withEncryptionKeyFromPersistentRef:size:
populateIdentity:withSigningKeyFromPersistentRef:size:
postMigrationKeychainCleanup
predicateWithFormat:
prekey
prekeyCanBeDeleted:
prekeyData
prekeyPublic
prekeyShouldBeRolled:
prekeysCount
prekeysType
privateKey
privateKeyBlob
privateSigningKeyForTerminusMigration
processFetchRequestAndValidate:counter:commit:theirIdentity:prekey:error:
processIncomingCounter:
processInfo
processName
protobuffer
publicDeviceIdentity
publicDeviceIdentityWithError:
publicIDCanonicalHash
publicIDHash
publicIdentity
publicKey
publicKeyRef
publicPrekey
publicSigningKeyForTerminusMigration
rangeOnPublicKey
ratchetForward
readFrom:
registeredPrekeyForNGMPrekey:objectContext:
registrationDate
registrationInfo
removeAllObjects
removeObjectsInArray:
replaceBytesInRange:withBytes:
requiresMigration
respondsToSelector:
retain
retainCount
reverseObjectEnumerator
save:
sealMessage:authenticating:error:
sealMessage:signedByFullIdentity:error:
sealStatus:authenticating:error:
secKeyRef
self
serializedData
serializedKey
setCounter:
setDate:
setDebugInfo:
setDestinationHash:
setDevicePrekeys:
setDeviceSigningKey:
setDhKey:
setEncryptedPayload:
setEncryptionKey:
setEncryptionKeyPersistentRef:
setEphemeralPubKey:
setFull_key:
setHasCounter:
setIsMigratedV2Key:
setKeyData:
setKeyValidator:
setKeystore:
setKtGossipData:
setMessage:
setNowDate:
setObject:forKey:
setObject:forKeyedSubscript:
setOption:forKey:
setPersistentStoreCoordinator:
setPredicate:
setPrekey:
setPrekeySignature:
setPrekeys:
setPublicKey:
setPublicKeyRef:
setRatchet:
setRegistrationDate:
setSecKeyRef:
setSerializedKey:
setShouldAddStoreAsynchronously:
setSignature:
setSignedData:
setSigningKey:
setSigningKeyPersistentRef:
setSkippedCounters:
setTimestamp:
setUpperBufferIndex:
setUpper_buffer_index:
setValidOutgoingCounter:
setValid_values_buffer:
setValid_values_buffer_size:
sharedManager
shouldRollEncryptionIdentity
sign:forType:error:
signDataWithFormatter:error:
signature
signedData
signingKey
signingKeyIdentifier
signingKeyPersistentRef
string
stringByAppendingString:
stringWithFormat:
subdataWithRange:
superclass
supportedVersion
timeIntervalAllowedForAction:
timeIntervalSince1970
timestamp
trackingPreventionSalt
unpadMessage:error:
unsealMessage:signedByPublicIdentity:decryptionBlock:
unsealMessage:signedByPublicIdentity:error:
unsealMessageAndAttributes:signedByPublicIdentity:decryptionBlock:
unsealStatusWithIndex:encryptedMessage:authenticating:signature:error:
unwrapSeed:usingKey:legacy:error:
unwrapWrappedSeed:legacy:using:error:
updateWithRegisteredTicket:error:
upperBufferIndex
upper_buffer_index
validOutgoingCounter
valid_values_buffer
valid_values_buffer_size
validateFetchedPrekeyTimestamp:forEvaluationType:
validateIncomingCounter:prekey:publicIdentity:error:
verifySignature:data:
verifySignature:formatter:
verifySignature:ofData:
versionByte
wrapSeed:to:legacy:error:
wrapSeed:toKeys:error:
writeTo:
zone
@32@0:8^{__SecKey=}16@24
@16@0:8
^{__SecKey=}16@0:8
v16@0:8
@"NSData"
^{__SecKey=}
@48@0:8^{__SecKey=}16@24@32^@40
@40@0:8^{__SecKey=}16@24^@32
^{__SecKey=}48@0:8^{__SecKey=}16@24@32^@40
B32@0:8@16@24
@32@0:8@16^@24
@32@0:8@16@24
@24@0:8@16
@40@0:8@16@24^@32
Q16@0:8
^{_SecMPPublicIdentity={__CFRuntimeBase=QAQ}^{__SecKey}^{__SecKey}@}16@0:8
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
@"LegacySigningKeyPublic"
@"SecKeyRSAPublic"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSData"16@0:8
@56@0:8@16@24@32@40@48
@36@0:8@16B24^@28
i16@0:8
v24@0:8@16
@"<P256PrivateKeyProtocol>"
@"NSString"
@"DHKey"
@"NGMPublicPreKey"
d16@0:8
@"NGMFullPrekey"
@"NGMPublicDeviceIdentity"
@48@0:8@16@24@32^@40
@"SigningPublicKey"
@48@0:8@16@24@32@40
@56@0:8@16@24@32@40^@48
@32@0:8@"NSData"16^@24
@"NSData"32@0:8@"NSData"16^@24
@"NSData"32@0:8@"<P256PublicKeyProtocol>"16^@24
@"<P256PublicKeyProtocol>"16@0:8
@24@0:8^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}16
^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}16@0:8
v24@0:8^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}16
^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}
@40@0:8@16q24^@32
@40@0:8@16r^*24^Q32
@40@0:8r^*16^Q24^@32
@28@0:8@16I24
B20@0:8I16
I16@0:8
v20@0:8I16
*16@0:8
v24@0:8*16
@36@0:8S16@20@28
S16@0:8
@"_TtC17MessageProtection17SKOutgoingRatchet"
@44@0:8S16@20@28^@36
@52@0:8S16@20@28@36^@44
@"_TtC17MessageProtection17SKIncomingRatchet"
@24@0:8^@16
v40@0:8@16@24@?32
B24@0:8^@16
B32@0:8@16^@24
@"SigningKey"
@"NSMutableArray"
@40@0:8@16@24@32
B32@0:8@"NSData"16@"NSData"24
@24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
r^{__CFString=}16@0:8
@24@0:8^{__CFString=}16
@36@0:8@16^@24B32
@"SecKeyP256Public"
@44@0:8@16^{__SecKey=}24B32^@36
@40@0:8@16^{__SecKey=}24^@32
{_NSRange=QQ}16@0:8
B48@0:8@16@24@32^@40
@32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24
^{_SecMPFullIdentity={__CFRuntimeBase=QAQ}^{__SecKey}^{__SecKey}^{__SecKey}^{__SecKey}@}16@0:8
v20@0:8B16
@"LegacySigningKeyPrivate"
@"SecKeyRSAPrivate"
@40@0:8@16@24d32
@"DHPublicKey"
I48@0:8@16@24^@32^B40
@?44@0:8I16@20@28^@36
B56@0:8@16I24B28@32@40^@48
@"NSPersistentContainer"
d24@0:8Q16
@24@0:8Q16
B32@0:8d16Q24
@"NSDate"
@"<P256PublicKeyProtocol>"
B48@0:8@16@24q32^@40
@24@0:8^{_NSZone=}16
v24@0:8d16
@"NGMPBP256Key"
{?="counter"b1}
@20@0:8i16
i24@0:8@16
v20@0:8i16
Parameter error, all pointers must be valid. sourceMessage = %p, sender = %p, receiver = %p, protected message = %p.
SecMPVerifyMessageContents: Missing incoming data.
Failed to Encrypt message
MP MW Ephemeral Device Identity
SecRandomCopyBytes
SigningPublicKey with data representation: %@
Cannot pad a nil message.
Error obtaining the padding length: %@
The padding configuration suggested is larger than what can be represented in the payload: %li
An issue occured while generating random bytes for padding with error: %i
Cannot unpad a nil message.
The message is too short (%lu) to contain any padding.
The message is too short (%lu) to contain the indicated padding(%u).
v8@?0
com.apple.messageprotection
MessageProtection
com.apple.security.messageprotection.error
Failed to initialize a full key: %@
Failed to initiate a full key from the passed serialization.
We failed to initialize a key with error: %@
FullKey with public data representation: %@
v32@?0@"NGMFullPrekey"8Q16^B24
Failure to get the public prekey of a new ephemeral.
Failure to verify the signature for the freshly generated prekey.
Failed to deserialize a prekey containing public key: %@ 
 signature: %@ 
 timestamp: %f 
 because of error: %@
NGMFullPrekey with DHKey: %@
 Public Prekey: %@.
SecMPVerifyAndExposeMessage: Missing incoming message.
SecMPVerifyAndExposeMessage: Missing sender.
SecMPVerifyAndExposeMessage: Missing receiver.
SecMPVerifyAndExposeMessage: Missing exposedMessageContents DataRef.
SecMPVerifyAndExposeMessage: Missing incoming data.
Unknown format of message to verify and expose
SecMPVerifyMessageContents: Incoming length is too short.
SecMPVerifyMessageContents: Inconsistent encryptionSize.
SecMPVerifyMessageContents: Unable to get public identity from private of the receiver.
SecMPVerifyMessageContents: Insufficient size remaining.
SecMPVerifyMessageContents: Insufficient size remaining for the signature.
SecMPVerifyMessageContents: Insufficient public key encryption space.
Failed to Decrypt message
NGMPrekeySignature
Failed to initialize the public identity.
The deserialization of the public fixed device identity failed.
Failed to encrypt to prekey that is no longer valid: %f.
Failed to generate an ephemeral P-256 key for message sealing.
LastPawn-MessageKeys
The encryption of an outgoing message failed.
NGMPublicDeviceIdentity with device signing key: %@ 
 prekey: %@
NGMEncryptedAttributeKTGossipData
com.apple.FaceTime.Voucher
Failed to obtain data for the public key.
Failed to initialize compact corecrypto public key.
Failed to initialize masking rng for corecrypto key agreement.
Failure to compute a shared secret with corecrypto.
Message to be encrypted larger than 64K
Failed to read size
com.apple.FaceTime.QRKeying
Looking up the persistent reference failed.
Keychain lookup failed
Invalid input size
Invalid message type
Invalid handling
nextMultiple
SecMessageLengthHiding.m
DHKey with public data representation: %@
SecMPPIVerifySignature: Incorrect signature size or start.
SecMPPIVerifySignature: Failed to allocate memory for replacement signature.
SecMPPIVerifySignature: Failed to decode DER of replacement signature.
SecMPPIVerifySignature: Failed to verify signature (primary and replacement signature).
SecMPFullIdentity
SecMPPublicIdentity
NULL parameter passed
Testmessage
SecMPFullIdentityCreateFromRefs
SecMessageFullIdentity.m
SecMPSignAndProtectMessage((__bridge CFDataRef)message, identityRef, publicIdentityRef, (__bridge CFMutableDataRef)protectedMessage, NULL)
SecMPVerifyAndExposeMessage((__bridge CFDataRef)protectedMessage, publicIdentityRef, identityRef, (__bridge CFMutableDataRef)recoveredMessage, NULL)
[recoveredMessage isEqualToData:message]
<SecMPFullIdentity: %p>
<SecMPPublicIdentity: %p>
A NGMFullDeviceIdentity Key generation was requested,                                                                                      but failed because it was requested with access: %@
The deserialization of the NGMFullDeviceIdentity failed.
Failed to initialize signing keys from NGMFullDeviceIdentity data.
v32@?0@"NSData"8@"NSError"16@?<B@?^@>24
v40@?0@"NSData"8@"NSDictionary"16@"NSError"24@?<B@?^@>32
The outer structure of the message is malformed.
The outer structure of the message is missing the ephemeral DH key.
An error occured while decrypting the message, after a valid signature check.
Inside of the incoming payload could not be parsed.
No Replay Counter Found.
Failed to initialize replay counter database.
An error occured while validating the counter: %@
The message was rejected because of a detected replay.
No key could be found to validate the signature, with optional failure: %@.
None
NGMFullDeviceIdentity with device signing key: %@ 
 Prekeys: %@
No error set
Incorrect data for public key: %@
Deserialization of SecKey failed with description: %@
This key is not allowed to do a DH key agreement.
Attempting to sign with a key that doesn't support that operation.
Key Validation String
Failed to test sign with SecKeyP256 during initialization.
Failed to verify signature with SecKeyP256 during initialization.
Discarding this payload because of bad NGM version.
No prekeys were found on the device
Sender and receiver's keys are incorrect.
%@%@
v32@?0@8Q16^B24
Receiver's keys are incorrect.
The receiver's %@ and sender's identity keys are incorrect.
encryption key
signing key
The receiver's signing key is incorrect.
The receiver's encryption key is incorrect.
The sender key is incorrect.
Unhandled key validator case.
DHPublicKey with data representation: %@
SigningKey with public data representation: %@
The passed legacy key representation is of incorrect size.
Failed to parse legacy key format.
Failed to deserialize the device public prekey.
Failed to initialize the DHPublicKey for the prekey.
The prekey was incorrectly signed, rejecting.
The ephemeral prekey has expired.
NGMPublicPreKey with DHKey: %@
 Timestamp:%f 
 Signature: %@.
com.apple.SharedWithYou.Presence
/NGMTrustStore-%@.db
BATS
/AppleInternal/XCTests/com.apple.messageprotection
XCTestBundlePath
xctest
/Library/IdentityServices
com.apple.MessageProtection
NGMTrustStore
momd
Failed to get the persistentStoreDescription.
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
Outgoing
Incoming
destinationHash == %@
Replay Protection Error: Ran out of counters
It appears we have a collision in the hashes.
An issue occured while validating the counter: %@
B16@?0^@8
We have duplicate entries on the incoming validation counter for key: %@ 
,                                 destinationHash: %@.
committing
validating
tag = %@
We have duplicate entries on registered prekey: %@.
registrationDate < %@
v32@?0@"SendingDestination"8Q16^B24
registering
encrypting to
validating signature of message
PublicKey with data representation: %@
%@ %@
encryptionKey
signingKey
-[NGMPBLegacyKey writeTo:]
NGMPBLegacyKey.m
nil != self->_encryptionKey
nil != self->_signingKey
dhKey
timestamp
prekey_signature
-[NGMPBDevicePreKey writeTo:]
NGMPBDevicePreKey.m
nil != self->_prekeySignature
prekeys
-[NGMPBFullDeviceIdentity writeTo:]
NGMPBFullDeviceIdentity.m
self->_signingKey != nil
message
counter
ktGossipData
debug_info
-[NGMPBInnerMessage writeTo:]
NGMPBInnerMessage.m
nil != self->_message
encryptedPayload
ephemeralPubKey
signature
keyValidator
-[NGMPBOuterMessage writeTo:]
NGMPBOuterMessage.m
nil != self->_encryptedPayload
nil != self->_ephemeralPubKey
nil != self->_signature
signing_key
-[NGMPBPublicDeviceIdentity writeTo:]
NGMPBPublicDeviceIdentity.m
prekey
-[NGMPBPublicDevicePrekey writeTo:]
NGMPBPublicDevicePrekey.m
nil != self->_prekey
keychainTag
keystore
keyData
Software
SecKey
CTKTokenOID
(unknown: %i)
RegisteredPreKey
SenderPublicIdentity
SendingDestination
MessageProtection.GLTDiversifiedKey
init()
_TtC17MessageProtection17GLTDiversifiedKey
^{__SecKey=}16@0:8
diversifiedKey
trackingPreventionSalt
T^{__SecKey=},N,R,VdiversifiedKey
T@"NSData",N,R,VtrackingPreventionSalt
_TtC17MessageProtection26GLTKeyDiversificationSwift
@48@0:8^{__SecKey=}16@24@32^@40
^{__SecKey=}48@0:8^{__SecKey=}16@24@32^@40
com.apple.SharedWithYou
MessageProtection/SymmetricRatchet+Serialization.swift
MPPB.RatchetState
MPPB.SKPaddedStatus
payload
padding
MPPB.KeyAndIndex
index
chainKey
messageKeys
MPPB.SKIncomingRatchet
ratchetState
publicSigningKey
MPPB.SKOutgoingRatchet
privateSigningKey
currentMessageKey
subscriptionKey
_TtC17MessageProtection13GFTKeyWrapper
@44@0:8@16B24^{__SecKey=}28^@36
@40@0:8@16^{__SecKey=}24^@32
@44@0:8@16@24B32^@36
GFT-MKM-Wrapping
Failed importing private key for encryption: %@
Failed importing public key for encryption:
Failed importing private key for key wrapping %@
_TtC17MessageProtection9SKRatchet
@16@0:8
_TtC17MessageProtection17SKOutgoingRatchet
@32@0:8@16^@24
B16@0:8
@40@0:8@16@24^@32
v16@0:8
ratchet
currentSubscriptionKey
_TtC17MessageProtection17SKIncomingRatchet
@44@0:8@16S24@28^@36
@56@0:8Q16@24@32@40^@48
signingPublicKey
MessageProtection/StatusKitRatchet.swift
MessageProtection.SKIncomingRatchet
com.apple.statuskit
_TtC17MessageProtection4HKDF
@40@0:8@16@24q32
Message Encryption: sender/receiver hash: %@ status: %@
Message Encryption: sender/receiver hash: %@ status: success
%@. The error was not assigned to a CFError.
%@. The error was not assigned to an NSError.
Unsupported key store: %d
The `CTKTokenOID protobuf passed had a missing keyData field.
Deletion of a keychain item failed for after migration with error: %i
Migration to CTKOID failed.
Migration to CTKOID key storage done.
Failed to sign a new prekey with error: %@
Failed to delete prekey ephemeral key (%@) with error: %@
Message Decryption: sender/receiver hash: %@ status: %@
Message Decryption: sender/receiver hash: %@ status: success
Failed to initialize an RSA Key with error: %@.
Failed to encrypt with RSA: %@.
Failed to generate a key rolling ticket because of failed prekey generation.
Failed to obtain the dataRepresentation of the signing key
Cannot retrieve prekey information because the timestamp of the signature is too old to be registered.
Attempting to register an invalidly signed public key: %@
Error while obtaining counter %@
Failed to generate an ephemeral ECDH key error code: %i
Reached the unimplemented keychainData method on CoreCryptoP256.
Reached the unimplemented sign method on CoreCryptoP256.
Reached the unimplemented initWithData method on CoreCryptoP256.
Failed to lookup legacy persistent reference for signing key: %i
Failed to lookup legacy persistent reference for encryption key: %i
Error occured while deleting the migrated persistent reference: %i
Migration of a legacy key has completed and previous keys have been deleted.
Message Encryption: nextPowerOfTwo invalid input %llx, %llx
Failed to initialize a legacy ECDSA key with error: %@.
Failed to create legacy public key from bytes: %@
Failed to encrypt data to legacy public key.
Failed to initialize legacy key: %@
Failed to perform legacy signature: %@
Signing key generation failed: %@
Failed to deserialize prekey in NGMFullDeviceIdentity initialization.
Starting key migration to CTKOID.
Failed to initialize replay counter database.
No device prekey is available, rolling should occur.
Failed to get the data representation of the SecKeyP256 public key: %@
Failed to import key from SecKeyCopyExternalRepresentation into ccec: %i
Failed to initialize public key from data with error: %@ for data: %@.
Failed verifying P-256 signature: %@
Failed to generate a P-256 Key with access control %@.
Failed to establish public DH Key.
Failed to initialize the public key with error: %@
Failed to get a Private Key Ref with error while initializing SecKeyP256: %@
No key validator was found.
While checking the key validator, we found the following issues: 
 %@%@%@
Failed to get public key of a prekey while checking the key validator.
Failed to deserialize the legacy key's protocol buffer.
Failed to initialize signing key: %@
Failed to initialize encryption key: %@
Failed to generate legacy signing key.
Failed to generate legacy encryption key.
Parsing a legacy key of version 3.
Parsing a legacy key of version 2.
Failed to generate an RSA Key with error: %@.
Failed to decrypt with RSA: %@.
Setting shared instance of the NGMReplayManager.
Failed to get the reference to the Home Directory.
Failing to initialize a Managed Object Context for NGMTrustStore queries: %@.
Performing initial load of the replay database.
Failed to initialize NSManagedObjectModel with URL: %@
Failed to load persistent store: %@
Loaded container with description: %@
The loading of the persistent contained failed, returning nil.
Loading the persistent container worked, setting it to shared instance
Loaded replay database was created at: %@
Failed to obtain the managed object context required to do the outgoing replay counter query: %@.
Database query failed while obtaining sending counter: %@
Sending counter using the previous hashing scheme for existing destinationHash.
An issue occured persisting the managed object context: %@
Validating counter (%i) for destination hash: %@
Counter (%i) is considered valid.
Counter (%i) is considered invalid.
Failed to obtain the managed object context required to validate the incoming replay counter query: %@.
Database Query Failure while obtaining incoming counter: %@
There was an issue obtaining the registered prekey: %@
Successfully fetched counters for destination (%@) and counter is %s valid.
An error happened while %@ the counter: %@
Failed to obtain the managed object context required to validate delete the receiving counters: %@.
Database query failed while cleaning up old counters: %@
Failed to delete the counters associated with %@: %@
No counters to delete for %@, probably never received any messages to that prekey.
Failed to obtain the managed object context required to validate delete the sending destinations: %@.
Database query failure while deleting old keys: %@
Failed to delete the counters on the sending flow for keys: %@
The encryption prekey appears to have been signed with a date in the future
The encryption prekey is older (%@) than the last allowed date (%@) for %@ at %@.
The encryption prekey appears to have been signed with a date in the future.                    The time was probably rolled back on the phone.
Removing prekey %@ since it's safe to delete it now (expired).
Time has been rolled back since the last time we registered a key.
It's been a week since the last registration, let's roll.
Attempting to initialize public key with invalid format: %@ and error: %@
MessageProtection
GLTDiversifiedKey
GLTKeyDiversificationSwift
SecKey
NSecKeyRef
CFString
NCFStringRef
GLTKeyDiversificationError
CFError
NCFErrorRef
CoreFoundation
MPPB_RatchetState
MPPB_KeyAndIndex
MPPB_SKPaddedStatus
MPPB_SKIncomingRatchet
MPPB_SKOutgoingRatchet
GFTKeyWrapper
KeyWrappingErrors
SymmetricRatchetErrors
SKRatchet
SKOutgoingRatchet
SKIncomingRatchet
StatusKitErrors
HKDFRatchet
SymmetricRatchet
HKDF
SymmetricRatchetStep
So8NSObjectC
So6NSDataC
_yptG
_ypt
GSg7cfError_t
3key_
5indext
3key_
5valuet
ySi_
Sg_ABt
SvSg
3key_
5valuet
_pSg
3key_
5indextSg
SiSg
$s17MessageProtection20SymmetricRatchetStepP
diversifiedKey
trackingPreventionSalt
failedExportingSecKey
incorrectTrackingPreventionSaltSize
incorrectInputKey
incorrectKeyType
incorrectKeySize
unknownFields
_key
_index
messageKeys
_chainKey
_ratchetState
_privateSigningKey
_currentMessageKey
_subscriptionKey
_publicSigningKey
_payload
_padding
incorrectPublicKey
wrappedKeyIsTooShort
wrappedKeysIsIncorrectLength
keySerialization
internalKeyDerivationIssue
internalEncryptionIssue
noMatchingKey
outOfRangeIndex
invalidSerializedState
missingMessageKey
ratchet
signingKey
currentSubscriptionKey
currentMessageKey
signingPublicKey
messageKeys
ratchetOutOfBounds
invalidSignature
messageKeyNoLongerAvailable
misformattedCiphertext
decryptionFailure
invalidSerializedState
invalidPayloadLengthToPad
invalidInnerPayload
chainKeyDerivationInfoLabel
messageKeyDerivationInfoLabel
messageKeyByteCount
chainKey
messageKeys
step
GLTDiversifiedKeyAndTPS
GLTKeyDiversification
SigningPublicKey
NGMPadding
SecMessageLegacyPublicIdentity
NGMMessageSignatureFormatter
SignatureFormatter
NSObject
FullKey
MigrationToModernizedKeyStorage
LegacySigningKeyPrivate
NGMFullPrekey
SecKeyRSAPublic
NGMPrekeySignatureFormatter
NGMKeyRollingTicket
NGMPublicDeviceIdentity
NGMMessageFormatter
NGMFTVoucherSignatureFormatter
CoreCryptoP256Private
P256PrivateKeyProtocol
NGMMessageHasher
NGMGFTSignatureFormatter
Signing
Migration
NGMRollingBitmaskBuffer
DHKey
LegacySigningKeyPublic
MPStatusKitSubscriptionKeys
MPStatusKitMessage
MPStatusKitOutgoingRatchet
MPStatusKitIncomingRatchet
NGMProtocolVersion
Attributes
NGMFullDeviceIdentity
MP_AES_CTR
SecKeyP256Public
P256PublicKeyProtocol
SecKeyP256Private
GFTKeyWrapping
NGMKeyValidator
ValidateSize
AppendWithSize
DHPublicKey
SigningKey
SecMessageLegacyFullIdentity
SecKeyRSAPrivate
NGMPublicPreKey
NGMGelatoPresenceSignatureFormatter
NGMReplayManager
NGMTimeBasedEvaluations
PublicKey
SignatureVerification
NGMPBLegacyKey
NSCopying
NGMPBDevicePreKey
NGMPBFullDeviceIdentity
NGMPBInnerMessage
NGMPBOuterMessage
NGMPBPublicDeviceIdentity
NGMPBPublicDevicePrekey
NGMPBP256Key
RegisteredPreKey
CoreDataProperties
SenderPublicIdentity
SendingDestination
T@"NSData",R,N,V_privateKeyBlob
StringAsKeystore:
Ti,N,V_keystore
T*,V_valid_values_buffer
T@"<P256PublicKeyProtocol>",&,V_key
_prekey
T@"DHPublicKey",R,N,V_dhKey
base64EncodedStringWithOptions:
T@"LegacySigningKeyPublic",R,N,V_signingKey
counter
T@"NGMPBP256Key",&,N,V_dhKey
dealloc
T@"NGMPublicDeviceIdentity",R,N,V_registrationInfo
destinationHash
T@"NGMPublicPreKey",R,N,V_publicPrekey
ephemeralPubKey
T@"NSData",&,N,V_debugInfo
getBytes:range:
T@"NSData",&,N,V_encryptionKey
hasKtGossipData
T@"NSData",&,N,V_ephemeralPubKey
identityWithIdentityData:error:
T@"NSData",&,N,V_keyValidator
initWithLength:
T@"NSData",&,N,V_message
isProxy
T@"NSData",&,N,V_prekeySignature
keyData
T@"NSData",&,N,V_signedData
T@"NSData",&,N,V_signingKeyPersistentRef
prekeySignature
T@"NSData",R,N,V_chainKey
prekeysAtIndex:
T@"NSData",R,N,V_formattedSignedData
release
T@"NSData",R,N,V_signature
senders
T@"NSData",R,N,V_trackingPreventionSalt
setKeychainTag:
T@"NSDate",C,D,N
setPersistentStoreDescriptions:
T@"NSMutableArray",&,N,V_prekeys
signData:error:
T@"NSString",&,V_keychainTag
T@"NSString",R,C
.cxx_destruct
T@"NSSet",&,D,N
T#,R
Ti,R,V_keyStore
T@"<P256PrivateKeyProtocol>",R,V_key
_diversifiedKey
T@"DHKey",R,N,V_dhKey
_privateKeyBlob
T@"LegacySigningKeyPrivate",&,N,V_signingKey
copyTo:
T@"NGMFullPrekey",R,N,V_prekey
dataWithLength:
T@"NGMPBP256Key",&,N,V_signingKey
decrypt:key:IV:
T@"NGMPublicPreKey",&,N,V_prekey
encrypt:key:IV:
T@"NSData",&,D,N
generateNewKeyWithAccess:error:
T@"NSData",&,N,V_encryptedPayload
hasKeyValidator
T@"NSData",&,N,V_encryptionKeyPersistentRef
identityFromV2Bytes:size:error:
T@"NSData",&,N,V_keyData
initTicketWithSigningKey:error:
T@"NSData",&,N,V_ktGossipData
isMigratedV2Key
T@"NSData",&,N,V_prekey
T@"NSData",&,N,V_signature
message
T@"NSData",&,N,V_signingKey
nowDate
T@"NSData",&,V_serializedKey
prekeys
T@"NSData",R,N,V_encryptedMessage
ratchet
T@"NSData",R,N,V_prekeyPublic
sealMessage:withEncryptedAttributes:signedByFullIdentity:error:
T@"NSData",R,N,V_signingKey
setKey:
T@"NSDate",&,V_date
setMessagedKey:
T@"NSMutableArray",&,N,V_devicePrekeys
setTag:
T@"NSString",&,N,V_keychainTag
skippedCounters
T@"NSString",C,D,N
validatorLength
T@"RegisteredPreKey",&,D,N
T@"SecKeyP256Public",&,N,V_publicKey
T@"SecKeyRSAPrivate",&,N,V_encryptionKey
T@"SecKeyRSAPublic",R,N,V_encryptionKey
T@"SigningKey",&,N,V_deviceSigningKey
T@"SigningPublicKey",&,N,V_signingKey
T@"_TtC17MessageProtection17SKIncomingRatchet",&,N,V_ratchet
T@"_TtC17MessageProtection17SKOutgoingRatchet",&,N,V_ratchet
T@,&,N,V_secKeyRef
T@,R,N,V_privateKey
TB,N
TB,N,V_isMigratedV2Key
TB,R,N
TI,N,V_counter
TI,V_upper_buffer_index
TI,V_valid_values_buffer_size
TQ,R
TS,R,N,V_index
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},V_publicKeyRef
T^{__SecKey=},R,N,V_diversifiedKey
T^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]},V_full_key
Td,N,V_timestamp
Td,R,N,V_timestamp
Ti,D,N
URLForResource:withExtension:
_chainKey
_counter
_date
_debugInfo
_devicePrekeys
_deviceSigningKey
_dhKey
_encryptedMessage
_encryptedPayload
_encryptionKey
_encryptionKeyPersistentRef
_ephemeralPubKey
_formattedSignedData
_full_key
_has
_index
_isMigratedV2Key
_key
_keyData
_keyStore
_keyValidator
_keychainTag
_keystore
_ktGossipData
_message
_newZeroingDataWithBytes:length:
_persistentContainer
_prekeyPublic
_prekeySignature
_prekeys
_privateKey
_publicKey
_publicKeyRef
_publicPrekey
_ratchet
_registrationInfo
_secKeyRef
_serializedKey
_signature
_signedData
_signingKey
_signingKeyPersistentRef
_timestamp
_trackingPreventionSalt
_upper_buffer_index
_valid_values_buffer
_valid_values_buffer_size
absoluteString
addObject:
addPrekeys:
allocWithZone:
appendBytes:length:
appendData:
appendDataAndSize:
appendString:
array
arrayWithCapacity:
arrayWithObjects:
arrayWithObjects:count:
asRef
attributes
attributesOfItemAtPath:error:
autorelease
batchSign:forType:error:
bufferData
bundleWithIdentifier:
bytes
chainKey
class
clearPrekeys
code
computeDestinationHashForIncomingMessageFrom:toLocalKey:
computeDestinationHashForOutgoingMessageTo:withLocalKey:
computeHashForMessage:
conformsToProtocol:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
counterForDestinationWithIdentityKey:sendingIdentity:error:success:
crypt:key:IV:
currentSubscriptionKeys
data
dataRepresentation
dataRepresentationWithError:
dataUsingEncoding:
dataWithBytes:length:
dataWithCapacity:
dataWithData:
date
dateWithTimeIntervalSince1970:
dbNameFromProcess
debugDescription
debugDescriptionForAction:
debugInfo
decrypt:using:error:
decrypt:usingKey:error:
decryptData:error:
decryptMessage:error:
defaultManager
defaultProtectionClassForPlatform
delete
deleteExpiredSendingDestinations
deleteItemWithPersistentRef:
deleteKeyWithTag:
deleteMigratedKeys
deleteObject:
deleteReceivingCountersForKey:
deriveKeyWith:salt:outputSize:
description
devicePrekeys
deviceSigningKey
dhKey
dictionary
dictionaryRepresentation
dictionaryWithObjects:forKeys:count:
diversifiedKey
diversifyPrivateKey:withDocumentIdentifier:trackingPreventionSalt:error:
diversifyPublicKey:trackingPreventionSalt:withDocumentIdentifier:error:
diversifyPublicKey:withDocumentIdentifier:error:
diversifyWithPrivateKey:docId:trackingPreventionSalt:error:
diversifyWithPublicKey:trackingPreventionSalt:docId:error:
encrypt:to:error:
encrypt:toKey:error:
encryptData:
encryptData:error:
encryptedMessage
encryptedPayload
encryptionKey
encryptionKeyPersistentRef
encryptionSize
enumerateObjectsUsingBlock:
environment
eraseFromKeyChain:
errorWithDomain:code:userInfo:
executeFetchRequest:error:
fetchRequest
fetchRequestWithEntityName:
firstObject
formatOutgoingInnerMessageWithPayload:attributes:destinationIdentity:sendingIdentity:error:
formatOutgoingMessageWithEncryptedPayload:ephemeral:signature:keyValidator:
formattedSignedData
full_key
generate
generateNewKeyWithAccess:forceNoSEP:error:
generateWithAccessControl:
getPrivateKeyRefWithError:
hasCounter
hasDebugInfo
hasDhKey
hasKeyData
hasKeychainTag
hash
identity
identityData
identityWithAccess:error:
identityWithAccess:usageIdentifier:error:
identityWithDataRepresentation:error:
identityWithIdentityData:prekeyData:error:
increaseLengthBy:
index
init
initFileURLWithPath:
initRemotePrekeyWithPublicPrekey:signedBy:error:
initToSignKey:
initWithApplicationData:
initWithBytes:length:
initWithCTKTokenOID:error:
initWithCapacity:
initWithConcurrencyType:
initWithContentsOfURL:
initWithContext:
initWithDHOutput:prekeyPub:ephemeralPub:recipientPub:ciphertext:
initWithData:
initWithData:error:
initWithData:upperBufferIndex:
initWithEncryptionKey:signingKey:
initWithEncryptionKeyData:signingKeyData:
initWithEncryptionSecKey:signingSecKey:
initWithIndex:chainKey:signingKey:
initWithIndex:chainKey:signingKey:error:
initWithIndex:encryptedMessage:signature:
initWithKey:
initWithKey:error:
initWithKey:index:signingKey:error:
initWithKey:trackingPreventionSalt:
initWithKeychainTag:error:
initWithName:managedObjectModel:
initWithPBPrekey:error:
initWithPrekey:signingKey:
initWithPrekeySignedBy:error:
initWithProtobufData:
initWithProtobufferData:error:
initWithPublicKey:signature:timestamp:
initWithPublicPrekey:
initWithSecKeyRef:
initWithSigningKey:devicePrekeys:
initWithURL:
isBATS
isEqual:
isEqualToData:
isEqualToString:
isKindOfClass:
isMemberOfClass:
isRunningTests
isValidKeyValidator:receiversIdentity:sendersIdentity:error:
isValidSignature:forMessage:forType:error:
isValidSigningDestination
isValidlySignedBy:error:
isVersionSupported:
isXCTest
keyAgreement:error:
keyAgreement:error:isRetry:
keyAgreementWithPublicKey:error:
keyIdentifier
keyRollingTicketWithError:
keyStore
keyValidator
keyValidatorWithReceiversIdentity:sendersIdentity:
keychainData
keychainTag
keystore
keystoreAsString:
ktGossipData
lastObject
length
lengthValidatedBuffer
loadPersistentStoresWithCompletionHandler:
logDatabaseCreationDate:
mergeFrom:
messagedKey
mutableBytes
mutableCopy
numberWithDouble:
numberWithUnsignedInt:
objectAtIndex:
objectAtIndexedSubscript:
objectContextWithError:
objectForKey:
objectForKeyedSubscript:
oldestDateAllowedToSendTo
openStatusWithIndex:encryptedMessage:authenticating:signature:error:
padMessage:error:
pathExtension
pathWithComponents:
pbDevicePrekey
performBlockAndWait:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
persistentContainerWithError:
persistentStoreCoordinator
persistentStoreDescription
populateIdentity:withEncryptionKeyFromPersistentRef:size:
populateIdentity:withSigningKeyFromPersistentRef:size:
postMigrationKeychainCleanup
predicateWithFormat:
prekey
prekeyCanBeDeleted:
prekeyData
prekeyPublic
prekeyShouldBeRolled:
prekeysCount
prekeysType
privateKey
privateKeyBlob
privateSigningKeyForTerminusMigration
processFetchRequestAndValidate:counter:commit:theirIdentity:prekey:error:
processIncomingCounter:
processInfo
processName
protobuffer
publicDeviceIdentity
publicDeviceIdentityWithError:
publicIDCanonicalHash
publicIDHash
publicIdentity
publicKey
publicKeyRef
publicPrekey
publicSigningKeyForTerminusMigration
rangeOnPublicKey
ratchetForward
readFrom:
registeredPrekeyForNGMPrekey:objectContext:
registrationDate
registrationInfo
removeAllObjects
removeObjectsInArray:
replaceBytesInRange:withBytes:
requiresMigration
respondsToSelector:
retain
retainCount
reverseObjectEnumerator
save:
sealMessage:authenticating:error:
sealMessage:signedByFullIdentity:error:
sealStatus:authenticating:error:
secKeyRef
self
serializedData
serializedKey
setCounter:
setDate:
setDebugInfo:
setDestinationHash:
setDevicePrekeys:
setDeviceSigningKey:
setDhKey:
setEncryptedPayload:
setEncryptionKey:
setEncryptionKeyPersistentRef:
setEphemeralPubKey:
setFull_key:
setHasCounter:
setIsMigratedV2Key:
setKeyData:
setKeyValidator:
setKeystore:
setKtGossipData:
setMessage:
setNowDate:
setObject:forKey:
setObject:forKeyedSubscript:
setOption:forKey:
setPersistentStoreCoordinator:
setPredicate:
setPrekey:
setPrekeySignature:
setPrekeys:
setPublicKey:
setPublicKeyRef:
setRatchet:
setRegistrationDate:
setSecKeyRef:
setSerializedKey:
setShouldAddStoreAsynchronously:
setSignature:
setSignedData:
setSigningKey:
setSigningKeyPersistentRef:
setSkippedCounters:
setTimestamp:
setUpperBufferIndex:
setUpper_buffer_index:
setValidOutgoingCounter:
setValid_values_buffer:
setValid_values_buffer_size:
sharedManager
shouldRollEncryptionIdentity
sign:forType:error:
signDataWithFormatter:error:
signature
signedData
signingKey
signingKeyIdentifier
signingKeyPersistentRef
string
stringByAppendingString:
stringWithFormat:
subdataWithRange:
superclass
supportedVersion
timeIntervalAllowedForAction:
timeIntervalSince1970
timestamp
trackingPreventionSalt
unpadMessage:error:
unsealMessage:signedByPublicIdentity:decryptionBlock:
unsealMessage:signedByPublicIdentity:error:
unsealMessageAndAttributes:signedByPublicIdentity:decryptionBlock:
unsealStatusWithIndex:encryptedMessage:authenticating:signature:error:
unwrapSeed:usingKey:legacy:error:
unwrapWrappedSeed:legacy:using:error:
updateWithRegisteredTicket:error:
upperBufferIndex
upper_buffer_index
validOutgoingCounter
valid_values_buffer
valid_values_buffer_size
validateFetchedPrekeyTimestamp:forEvaluationType:
validateIncomingCounter:prekey:publicIdentity:error:
verifySignature:data:
verifySignature:formatter:
verifySignature:ofData:
versionByte
wrapSeed:to:legacy:error:
wrapSeed:toKeys:error:
writeTo:
zone
@32@0:8^{__SecKey=}16@24
@16@0:8
^{__SecKey=}16@0:8
v16@0:8
@"NSData"
^{__SecKey=}
@48@0:8^{__SecKey=}16@24@32^@40
@40@0:8^{__SecKey=}16@24^@32
^{__SecKey=}48@0:8^{__SecKey=}16@24@32^@40
B32@0:8@16@24
@32@0:8@16^@24
@32@0:8@16@24
@24@0:8@16
@40@0:8@16@24^@32
Q16@0:8
^{_SecMPPublicIdentity={__CFRuntimeBase=QAQ}^{__SecKey}^{__SecKey}@}16@0:8
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
@"LegacySigningKeyPublic"
@"SecKeyRSAPublic"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSData"16@0:8
@56@0:8@16@24@32@40@48
@36@0:8@16B24^@28
i16@0:8
v24@0:8@16
@"<P256PrivateKeyProtocol>"
@"NSString"
@"DHKey"
@"NGMPublicPreKey"
d16@0:8
@"NGMFullPrekey"
@"NGMPublicDeviceIdentity"
@48@0:8@16@24@32^@40
@"SigningPublicKey"
@48@0:8@16@24@32@40
@56@0:8@16@24@32@40^@48
@32@0:8@"NSData"16^@24
@"NSData"32@0:8@"NSData"16^@24
@"NSData"32@0:8@"<P256PublicKeyProtocol>"16^@24
@"<P256PublicKeyProtocol>"16@0:8
@24@0:8^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}16
^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}16@0:8
v24@0:8^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}16
^{ccec_full_ctx=^{ccec_cp}[0{ccec_projective_point=[1Q]}]}
@40@0:8@16q24^@32
@40@0:8@16r^*24^Q32
@40@0:8r^*16^Q24^@32
@28@0:8@16I24
B20@0:8I16
I16@0:8
v20@0:8I16
*16@0:8
v24@0:8*16
@36@0:8S16@20@28
S16@0:8
@"_TtC17MessageProtection17SKOutgoingRatchet"
@44@0:8S16@20@28^@36
@52@0:8S16@20@28@36^@44
@"_TtC17MessageProtection17SKIncomingRatchet"
@24@0:8^@16
v40@0:8@16@24@?32
B24@0:8^@16
B32@0:8@16^@24
@"SigningKey"
@"NSMutableArray"
@40@0:8@16@24@32
B32@0:8@"NSData"16@"NSData"24
@24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
r^{__CFString=}16@0:8
@24@0:8^{__CFString=}16
@36@0:8@16^@24B32
@"SecKeyP256Public"
@44@0:8@16^{__SecKey=}24B32^@36
@40@0:8@16^{__SecKey=}24^@32
{_NSRange=QQ}16@0:8
B48@0:8@16@24@32^@40
@32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24
^{_SecMPFullIdentity={__CFRuntimeBase=QAQ}^{__SecKey}^{__SecKey}^{__SecKey}^{__SecKey}@}16@0:8
v20@0:8B16
@"LegacySigningKeyPrivate"
@"SecKeyRSAPrivate"
@40@0:8@16@24d32
@"DHPublicKey"
I48@0:8@16@24^@32^B40
@?44@0:8I16@20@28^@36
B56@0:8@16I24B28@32@40^@48
@"NSPersistentContainer"
d24@0:8Q16
@24@0:8Q16
B32@0:8d16Q24
@"NSDate"
@"<P256PublicKeyProtocol>"
B48@0:8@16@24q32^@40
@24@0:8^{_NSZone=}16
v24@0:8d16
@"NGMPBP256Key"
{?="counter"b1}
@20@0:8i16
i24@0:8@16
v20@0:8i16
