@(#)PROGRAM:CloudSettings  PROJECT:CloudSettings-1
v8@?0
cloudsettings
cloud_settings
newDevice
com.apple.cloudsettings.general
com.apple.cloudsettings.appearance
com.apple.cloudsettings.sound
com.apple.cloudsettings.keyboard
com.apple.cloudsettings.mouse
com.apple.cloudsettings.trackpad
com.apple.cloudsettings.pencil
com.apple.cloudsettings.desktop
com.apple.cloudsettings.controlcenter
com.apple.cloudsettings.homescreen
com.apple.cloudsettings.screensaver
com.apple.cloudsettings.languageregion
com.apple.cloudsettings.displays
com.apple.cloudsettings.gamecontroller
com.apple.cloudsettings.international
com.apple.cloudsettings.datetime
CloudSettingsState
com.apple.cloudsettings
CloudSettingsConflict
cloudValue is NOT equal to local value
kvsStore type: %@, does not respond to isEqual
kvsStore type: %@, does not match local type: %@
no matching local setting
[setEnabled:forstore] - cloudsettings feature enabled, enter, calling isServiceKnown
[setEnabled:forstore] - is a known service, getting current state dict, and checking if setting is on/off
in setEnabled: %d, for identifier: %@, new dictionary: %@
setEnabled is already set to %d for: %@
ERROR | setEnabled - unknown service: %@
[setEnabled: forStore] - cloudsettings feature disabled
isEnabledForStore enter
isEnabledForStore os_feature_enabled = YES
State dictionary did not locate a state for: %@, returning YES by default
ERROR | isEnabledForStore - unknown store:  %@
isEnabledForStore returning: %d, for identifier: %@
[isEnabledForStore] - cloudsettings feature disabled, returning: NO
ERROR | setConflict: %@ - out of range: %ld, exit without setting
ERROR | setConflict - unknown store:  %@
[conflictStateForStore] - cloudsettings feature disabled, returning: not evaluated
ERROR | conflictStateForStore: %@ - out of range: %ld, returning 0
ERROR | conflictStateForStore: %@ - value: %@ does not respond to intValue
ERROR | conflictStateForStore - unknown store:  %@
[isServiceKnownForStore] - cloudsettings feature disabled, returning: NO
[isServiceKnownForStore] - %@ - returning: %d
[performFirstTimeSetup] - isNewDevice: %d, dispatching to all enabled services
[performFirstTimeSetup] - Checking service: %@
[performFirstTimeSetup] - setting: %@ first time setup being called
ERROR | remoteObjectProxy returned nil
%@ responds to selector
%@ DOES NOT respond to selector
In framework - [performFirstTimeSetup] have a service, calling performFirstTimeSetupForStore for: %@, with isNewDevice: %d
ERROR | performFirstTimeSetup unable to get connection for: %@
[performFirstTimeSetup] - setting: %@ is disabled skip first time setup
[performFirstTimeSetup] - cloudsettings feature disabled
In framework - applyCloudSettingsToDevice array: %@, for store: %@
In framework - have a service, calling applyCloudSettingsToDevice
ERROR | writeToCloudSettings unable to get connection for: %@
ERROR | applyCloudSettingsToDevice for store: %@, unknown store: %d, or store is disabled: %d
[applyCloudSettingsToDevice:forStore] - cloudsettings feature disabled
In framework - writeToCloudSettings array: %@, for store: %@
In framework - have a service, calling writeToCloudSettings
ERROR | writeToCloudSettings for store: %@, unknown store: %d, or store is disabled: %d
[writeToCloudSettings:forStore] - cloudsettings feature disabled
In framework - deviceSettingsForStore: %@
In framework - service responds to deviceSettings
Service does not support deviceSettings, return nil
ERROR | deviceSettingsForStore unable to get connection for: %@
ERROR | deviceSettingsForStore for store: %@, unknown store: %d, or store is disabled: %d
[deviceSettingsForStore] - cloudsettings feature disabled, returning nil
In framework - applySettingsToDevice settings: %@, for store: %@
Service does not support applySettingsToDevice - exit
ERROR | applySettingsToDevice for store: %@, unknown store: %d, or store is disabled: %d
[applySettingsToDevice:forStore] - cloudsettings feature disabled
[knownServiceNames] - cloudsettings feature disabled
writesettings enter, with: %@
currentStateDictionary enter, calling copy pref
currentStateDictionary return from copy pref
ERROR | CloudSettingsState storage is not a dictionary
currentStateDictionary returning: %@
ERROR | could not init service with identifier: %@
currentConflictDictionary enter, calling copy pref
currentConflictDictionary return from copy pref
ERROR | currentConflictDictionary storage is not a dictionary
currentConflictDictionary returning: %@
writeconflicts enter, with: %@
ERROR | CloudSettingsStore attempt to init with unknown identifier: %@
ERROR | CloudSettingsStore init attempted with nil identifier
[initWithStoreIdentifier] - cloudsettings feature disabled, returning nil
key: %@, inType: %@
Object found and is correct class, setting (success) result: %d
Object found, but wrong class, expected: %@, got: %@, setting (wrong class) result: %d
Object not found in store, setting (not found) result: %d
ERROR | keyExists:andIsOfType for store: %@, unknown store: %d, or store is disabled: %d
ERROR | keyExists andIsOfType attempted with nil, key: %d, type: %d identifier: %d
[keyExists:andIsOfType] - cloudsettings feature disabled, returning param error
ERROR | setBool:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setBoolForKey attempted with a nil, key: %d, identifier: %d
[setBool forKey] - cloudsettings feature disabled
ERROR | boolForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | boolForKey attempted with a nil, key: %d, identifier: %d
[boolForKey] - cloudsettings feature disabled, returning NO
ERROR | setNumber:forKey for store: %@, unknown store: %d, or store is disabled: %d
[setNumber forKey] - cloudsettings feature disabled
numberForKey - found a value: %@, checking if it is an NSNumber
ERROR | numberForKey - returned value is not a number: %@
ERROR | numberForKey - objectForKey returned nil
ERROR | numberForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | objectForKey, key: %@, returned nil for service: %@
[numberForKey] - cloudsettings feature disabled
ERROR | setString:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setStringForKey attempted with a nil, key: %d, identifier: %d
[setString forKey] - cloudsettings feature disabled
stringForKey - found a value: %@, checking if it is an NSString
ERROR | stringForKey - returned value is not a string: %@
ERROR | stringForKey - objectForKey returned nil
ERROR | stringForKey for store: %@, unknown store: %d, or store is disabled: %d
[stringForKey] - cloudsettings feature disabled, returning nil
ERROR | setArray:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setArrayForKey attempted with a nil, key: %d, identifier: %d
[setArray forKey] - cloudsettings feature disabled
arrayForKey - found a value: %@, checking if it is an NSArray
ERROR | arrayForKey - returned value is not an array: %@
ERROR | arrayForKey - objectForKey returned nil
ERROR | arrayForKey for store: %@, unknown store: %d, or store is disabled: %d
[arrayForKey] - cloudsettings feature disabled, returning nil
ERROR | setData:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setData attempted with a nil, key: %d, identifier: %d
[setData forKey] - cloudsettings feature disabled
dataForKey - found a value: %@, checking if it is an NSData
ERROR | dataForKey - returned value is not NSData: %@
ERROR | dataForKey - objectForKey returned nil
ERROR | dataForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | dataForKey, key: %@, returned nil for service: %@
[dataForKey] - cloudsettings feature disabled, returning nil
setDictionary - check of set value returned nil
ERROR | setDictionary:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setDictionaryForKey attempted with a nil, key: %d, identifier: %d
[setDictionary forKey] - cloudsettings feature disabled
ERROR | dictionaryForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | dictionaryForKey attempted with a nil, key: %d, identifier: %d
[dictionaryForKey] - cloudsettings feature disabled
removeObjectForKey - check of set value did NOT return nil
ERROR | removeObjectForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | removeObjectForKey attempted with a nil, key: %d, or identifier: %d
[removeObjectForKey] - cloudsettings feature disabled
ERROR | syncNow for store: %@, unknown store: %d, or store is disabled: %d
ERROR | syncNow attempted with a nil identifier
[syncNow] - cloudsettings feature disabled
IN FRAMEWORK, likely from service, writing to store: %@ value: %@, for key: %@, to store: %@
setObject - check of set value returned nil
ERROR | setObject attempted with a nil, value:%d, key:%d, identifier:%d
_kvsStore getting:%@, for store: %@
ERROR | objectForKey attempted with a nil, key: %d, identifier: %d
ERROR | _kvsStore is nil
in CloudSettings Service, performFirstTimeSetupForStore: %@, isNewDevice: %d
in CloudSettings Service, NOTNEW_NOKVS, push local to cloud
in CloudSettings Service, kCSS_NEW_NOKVS, Do nothing
in CloudSettings Service, kCSS_NOTNEW_HASKVS, smart sync needed
in CloudSettings Service, kCSS_NEW_HASKVS, pull cloud and set local settings to match
ERROR | CloudSettingsService: key not found in KVS store: %@
ERROR | CloudSettingsService: storeValue does not respond to isEqual
ERROR | CloudSettingsService: writeToCloudSettings - unsupported class: %@ write for key: %@
Removing match: %@
CloudSettingsService: performSmartMergeWithStoreSettings - conflict found for key: %@.  Conflict: %@
No Conflicts, but some left over local settings to be uploaded: %@
No Conflicts, no remaining setting, exit
ERROR | CloudSettingsService: performSmartMergeWithStoreSettings - nil cloud dict, this should not happen, do nothing
ERROR | CloudSettingsService: performSmartMergeWithStoreSettings - empty cloud dict, this should not happen, do nothing
NO OVERRIDE FOUND FOR registerKeys, YOU MUST OVERIDE registerKeys in your subclass of CloudSettingsDispatchingMediator
registerKey: %@
ERROR | deviceSettingsForKeys - unknown key: %@
ERROR | applySettings - unknown key: %@
CloudSettingsServiceProtocol
CloudSettingsManager
CloudSettingsStore
CloudSettingsService
CloudSettingsServiceDelegate
NSXPCListenerDelegate
NSObject
CloudSettingsDispatchingMediator
CloudSettingsMediator
isServiceKnownForStore:
currentStateDictionary
isEnabledForStore:
numberWithBool:
setObject:forKey:
writeSettingsDictionaryToPrefs:
objectForKey:
boolValue
currentConflictDictionary
numberWithInteger:
writeConflictsDictionaryToPrefs:
intValue
knownServiceNames
countByEnumeratingWithState:objects:count:
activeXPCConnectionForStore:
remoteObjectProxy
performFirstTimeSetupForStore:newDevice:
invalidate
applyCloudSettingsToDevice:forStore:
writeToCloudSettings:forStore:
deviceSettings
applySettingsToDevice:
dictionaryWithObjects:forKeys:count:
dictionaryWithDictionary:
dictionary
description
initWithServiceName:
performFirstTimeSetupForStore:
interfaceWithProtocol:
setRemoteObjectInterface:
resume
sharedCloudSettingsManager
setEnabled:forStore:
setConflict:forStore:
conflictStateForStore:
performFirstTimeSetup:
deviceSettingsForStore:
applySettingsToDevice:forStore:
defaultSettingsDictionary
init
_initWithStoreIdentifier:usingEndToEndEncryption:
boolForKey:
setDictionary:forKey:
dictionaryForKey:
removeObjectForKey:
dictionaryRepresentation
synchronize
serviceIdentifier
initWithStoreIdentifier:
keyExists:andIsOfType:
setBool:forKey:
setNumber:forKey:
numberForKey:
setString:forKey:
stringForKey:
setArray:forKey:
arrayForKey:
setData:forKey:
dataForKey:
syncNow:
kvsStore
.cxx_destruct
_serviceIdentifier
_kvsStore
T@"NSString",R,V_serviceIdentifier
T@"NSUbiquitousKeyValueStore",R,V_kvsStore
setIdentifier:
setStore:
setMediator:
store
count
identifier
performSmartMergeWithStoreSettings:
allKeys
mediator
deviceSettingsForKeys:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
isEqual:
mergeSettings:
writeToCloudSettingsDict:forStore:
applySettings:
stringWithFormat:
initWithStoreIdentifier:settingsMediator:
_identifier
_store
_mediator
T@"NSString",&,N,V_identifier
T@"CloudSettingsStore",&,N,V_store
T@"<CloudSettingsMediator>",&,N,V_mediator
setService:
setExportedInterface:
service
setExportedObject:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
listener:shouldAcceptNewConnection:
_service
T@"CloudSettingsService",&,V_service
setKeysMap:
setDispatchSettersOnMain:
registerKeys
registerKey:getter:setter:merger:type:
arrayWithObjects:count:
keysMap
objectAtIndexedSubscript:
methodForSelector:
length
dispatchSettersOnMain
registerKey:getter:setter:
_dispatchSettersOnMain
_keysMap
T@"NSMutableDictionary",&,V_keysMap
TB,V_dispatchSettersOnMain
v32@0:8@16@24
v24@0:8@16
v28@0:8@16B24
@16@0:8
v32@0:8@"NSArray"16@"NSString"24
v24@0:8@"NSString"16
v28@0:8@"NSString"16B24
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
v28@0:8B16@20
B24@0:8@16
v32@0:8q16@24
q24@0:8@16
@24@0:8@16
i32@0:8@16@24
v20@0:8B16
v16@0:8
@"NSString"
@"NSUbiquitousKeyValueStore"
@32@0:8@16@24
@"CloudSettingsStore"
@"<CloudSettingsMediator>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"CloudSettingsService"
@"NSDictionary"24@0:8@"NSArray"16
@"NSDictionary"24@0:8@"NSDictionary"16
v40@0:8@16:24:32
v56@0:8@16:24:32:40@48
@"NSMutableDictionary"
@(#)PROGRAM:CloudSettings  PROJECT:CloudSettings-1
v8@?0
cloudsettings
cloud_settings
newDevice
com.apple.cloudsettings.general
com.apple.cloudsettings.appearance
com.apple.cloudsettings.sound
com.apple.cloudsettings.keyboard
com.apple.cloudsettings.mouse
com.apple.cloudsettings.trackpad
com.apple.cloudsettings.pencil
com.apple.cloudsettings.desktop
com.apple.cloudsettings.controlcenter
com.apple.cloudsettings.homescreen
com.apple.cloudsettings.screensaver
com.apple.cloudsettings.languageregion
com.apple.cloudsettings.displays
com.apple.cloudsettings.gamecontroller
com.apple.cloudsettings.international
com.apple.cloudsettings.datetime
CloudSettingsState
com.apple.cloudsettings
CloudSettingsConflict
cloudValue is NOT equal to local value
kvsStore type: %@, does not respond to isEqual
kvsStore type: %@, does not match local type: %@
no matching local setting
[setEnabled:forstore] - cloudsettings feature enabled, enter, calling isServiceKnown
[setEnabled:forstore] - is a known service, getting current state dict, and checking if setting is on/off
in setEnabled: %d, for identifier: %@, new dictionary: %@
setEnabled is already set to %d for: %@
ERROR | setEnabled - unknown service: %@
[setEnabled: forStore] - cloudsettings feature disabled
isEnabledForStore enter
isEnabledForStore os_feature_enabled = YES
State dictionary did not locate a state for: %@, returning YES by default
ERROR | isEnabledForStore - unknown store:  %@
isEnabledForStore returning: %d, for identifier: %@
[isEnabledForStore] - cloudsettings feature disabled, returning: NO
ERROR | setConflict: %@ - out of range: %ld, exit without setting
ERROR | setConflict - unknown store:  %@
[conflictStateForStore] - cloudsettings feature disabled, returning: not evaluated
ERROR | conflictStateForStore: %@ - out of range: %ld, returning 0
ERROR | conflictStateForStore: %@ - value: %@ does not respond to intValue
ERROR | conflictStateForStore - unknown store:  %@
[isServiceKnownForStore] - cloudsettings feature disabled, returning: NO
[isServiceKnownForStore] - %@ - returning: %d
[performFirstTimeSetup] - isNewDevice: %d, dispatching to all enabled services
[performFirstTimeSetup] - Checking service: %@
[performFirstTimeSetup] - setting: %@ first time setup being called
ERROR | remoteObjectProxy returned nil
%@ responds to selector
%@ DOES NOT respond to selector
In framework - [performFirstTimeSetup] have a service, calling performFirstTimeSetupForStore for: %@, with isNewDevice: %d
ERROR | performFirstTimeSetup unable to get connection for: %@
[performFirstTimeSetup] - setting: %@ is disabled skip first time setup
[performFirstTimeSetup] - cloudsettings feature disabled
In framework - applyCloudSettingsToDevice array: %@, for store: %@
In framework - have a service, calling applyCloudSettingsToDevice
ERROR | writeToCloudSettings unable to get connection for: %@
ERROR | applyCloudSettingsToDevice for store: %@, unknown store: %d, or store is disabled: %d
[applyCloudSettingsToDevice:forStore] - cloudsettings feature disabled
In framework - writeToCloudSettings array: %@, for store: %@
In framework - have a service, calling writeToCloudSettings
ERROR | writeToCloudSettings for store: %@, unknown store: %d, or store is disabled: %d
[writeToCloudSettings:forStore] - cloudsettings feature disabled
In framework - deviceSettingsForStore: %@
In framework - service responds to deviceSettings
Service does not support deviceSettings, return nil
ERROR | deviceSettingsForStore unable to get connection for: %@
ERROR | deviceSettingsForStore for store: %@, unknown store: %d, or store is disabled: %d
[deviceSettingsForStore] - cloudsettings feature disabled, returning nil
In framework - applySettingsToDevice settings: %@, for store: %@
Service does not support applySettingsToDevice - exit
ERROR | applySettingsToDevice for store: %@, unknown store: %d, or store is disabled: %d
[applySettingsToDevice:forStore] - cloudsettings feature disabled
[knownServiceNames] - cloudsettings feature disabled
writesettings enter, with: %@
currentStateDictionary enter, calling copy pref
currentStateDictionary return from copy pref
ERROR | CloudSettingsState storage is not a dictionary
currentStateDictionary returning: %@
ERROR | could not init service with identifier: %@
currentConflictDictionary enter, calling copy pref
currentConflictDictionary return from copy pref
ERROR | currentConflictDictionary storage is not a dictionary
currentConflictDictionary returning: %@
writeconflicts enter, with: %@
ERROR | CloudSettingsStore attempt to init with unknown identifier: %@
ERROR | CloudSettingsStore init attempted with nil identifier
[initWithStoreIdentifier] - cloudsettings feature disabled, returning nil
key: %@, inType: %@
Object found and is correct class, setting (success) result: %d
Object found, but wrong class, expected: %@, got: %@, setting (wrong class) result: %d
Object not found in store, setting (not found) result: %d
ERROR | keyExists:andIsOfType for store: %@, unknown store: %d, or store is disabled: %d
ERROR | keyExists andIsOfType attempted with nil, key: %d, type: %d identifier: %d
[keyExists:andIsOfType] - cloudsettings feature disabled, returning param error
ERROR | setBool:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setBoolForKey attempted with a nil, key: %d, identifier: %d
[setBool forKey] - cloudsettings feature disabled
ERROR | boolForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | boolForKey attempted with a nil, key: %d, identifier: %d
[boolForKey] - cloudsettings feature disabled, returning NO
ERROR | setNumber:forKey for store: %@, unknown store: %d, or store is disabled: %d
[setNumber forKey] - cloudsettings feature disabled
numberForKey - found a value: %@, checking if it is an NSNumber
ERROR | numberForKey - returned value is not a number: %@
ERROR | numberForKey - objectForKey returned nil
ERROR | numberForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | objectForKey, key: %@, returned nil for service: %@
[numberForKey] - cloudsettings feature disabled
ERROR | setString:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setStringForKey attempted with a nil, key: %d, identifier: %d
[setString forKey] - cloudsettings feature disabled
stringForKey - found a value: %@, checking if it is an NSString
ERROR | stringForKey - returned value is not a string: %@
ERROR | stringForKey - objectForKey returned nil
ERROR | stringForKey for store: %@, unknown store: %d, or store is disabled: %d
[stringForKey] - cloudsettings feature disabled, returning nil
ERROR | setArray:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setArrayForKey attempted with a nil, key: %d, identifier: %d
[setArray forKey] - cloudsettings feature disabled
arrayForKey - found a value: %@, checking if it is an NSArray
ERROR | arrayForKey - returned value is not an array: %@
ERROR | arrayForKey - objectForKey returned nil
ERROR | arrayForKey for store: %@, unknown store: %d, or store is disabled: %d
[arrayForKey] - cloudsettings feature disabled, returning nil
ERROR | setData:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setData attempted with a nil, key: %d, identifier: %d
[setData forKey] - cloudsettings feature disabled
dataForKey - found a value: %@, checking if it is an NSData
ERROR | dataForKey - returned value is not NSData: %@
ERROR | dataForKey - objectForKey returned nil
ERROR | dataForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | dataForKey, key: %@, returned nil for service: %@
[dataForKey] - cloudsettings feature disabled, returning nil
setDictionary - check of set value returned nil
ERROR | setDictionary:forKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | setDictionaryForKey attempted with a nil, key: %d, identifier: %d
[setDictionary forKey] - cloudsettings feature disabled
ERROR | dictionaryForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | dictionaryForKey attempted with a nil, key: %d, identifier: %d
[dictionaryForKey] - cloudsettings feature disabled
removeObjectForKey - check of set value did NOT return nil
ERROR | removeObjectForKey for store: %@, unknown store: %d, or store is disabled: %d
ERROR | removeObjectForKey attempted with a nil, key: %d, or identifier: %d
[removeObjectForKey] - cloudsettings feature disabled
ERROR | syncNow for store: %@, unknown store: %d, or store is disabled: %d
ERROR | syncNow attempted with a nil identifier
[syncNow] - cloudsettings feature disabled
IN FRAMEWORK, likely from service, writing to store: %@ value: %@, for key: %@, to store: %@
setObject - check of set value returned nil
ERROR | setObject attempted with a nil, value:%d, key:%d, identifier:%d
_kvsStore getting:%@, for store: %@
ERROR | objectForKey attempted with a nil, key: %d, identifier: %d
ERROR | _kvsStore is nil
in CloudSettings Service, performFirstTimeSetupForStore: %@, isNewDevice: %d
in CloudSettings Service, NOTNEW_NOKVS, push local to cloud
in CloudSettings Service, kCSS_NEW_NOKVS, Do nothing
in CloudSettings Service, kCSS_NOTNEW_HASKVS, smart sync needed
in CloudSettings Service, kCSS_NEW_HASKVS, pull cloud and set local settings to match
ERROR | CloudSettingsService: key not found in KVS store: %@
ERROR | CloudSettingsService: storeValue does not respond to isEqual
ERROR | CloudSettingsService: writeToCloudSettings - unsupported class: %@ write for key: %@
Removing match: %@
CloudSettingsService: performSmartMergeWithStoreSettings - conflict found for key: %@.  Conflict: %@
No Conflicts, but some left over local settings to be uploaded: %@
No Conflicts, no remaining setting, exit
ERROR | CloudSettingsService: performSmartMergeWithStoreSettings - nil cloud dict, this should not happen, do nothing
ERROR | CloudSettingsService: performSmartMergeWithStoreSettings - empty cloud dict, this should not happen, do nothing
NO OVERRIDE FOUND FOR registerKeys, YOU MUST OVERIDE registerKeys in your subclass of CloudSettingsDispatchingMediator
registerKey: %@
ERROR | deviceSettingsForKeys - unknown key: %@
ERROR | applySettings - unknown key: %@
CloudSettingsServiceProtocol
CloudSettingsManager
CloudSettingsStore
CloudSettingsService
CloudSettingsServiceDelegate
NSXPCListenerDelegate
NSObject
CloudSettingsDispatchingMediator
CloudSettingsMediator
boolValue
objectAtIndexedSubscript:
interfaceWithProtocol:
dictionaryWithDictionary:
stringWithFormat:
methodForSelector:
dictionary
countByEnumeratingWithState:objects:count:
length
setExportedInterface:
count
objectForKeyedSubscript:
remoteObjectProxy
_initWithStoreIdentifier:usingEndToEndEncryption:
setRemoteObjectInterface:
numberWithInteger:
dictionaryWithObjects:forKeys:count:
initWithServiceName:
allKeys
setObject:forKeyedSubscript:
invalidate
synchronize
arrayWithObjects:count:
resume
numberWithBool:
setExportedObject:
intValue
performFirstTimeSetupForStore:newDevice:
deviceSettings
applySettingsToDevice:
applyCloudSettingsToDevice:forStore:
writeToCloudSettings:forStore:
performFirstTimeSetupForStore:
sharedCloudSettingsManager
setEnabled:forStore:
isEnabledForStore:
setConflict:forStore:
conflictStateForStore:
isServiceKnownForStore:
performFirstTimeSetup:
deviceSettingsForStore:
applySettingsToDevice:forStore:
knownServiceNames
defaultSettingsDictionary
writeSettingsDictionaryToPrefs:
currentStateDictionary
activeXPCConnectionForStore:
currentConflictDictionary
writeConflictsDictionaryToPrefs:
init
initWithStoreIdentifier:
keyExists:andIsOfType:
setBool:forKey:
boolForKey:
setNumber:forKey:
numberForKey:
setString:forKey:
stringForKey:
setArray:forKey:
arrayForKey:
setData:forKey:
dataForKey:
setDictionary:forKey:
dictionaryForKey:
removeObjectForKey:
dictionaryRepresentation
syncNow:
setObject:forKey:
objectForKey:
serviceIdentifier
kvsStore
.cxx_destruct
_serviceIdentifier
_kvsStore
T@"NSString",R,V_serviceIdentifier
T@"NSUbiquitousKeyValueStore",R,V_kvsStore
isEqual:
mergeSettings:
initWithStoreIdentifier:settingsMediator:
writeToCloudSettingsDict:forStore:
performSmartMergeWithStoreSettings:
identifier
setIdentifier:
store
setStore:
mediator
setMediator:
_identifier
_store
_mediator
T@"NSString",&,N,V_identifier
T@"CloudSettingsStore",&,N,V_store
T@"<CloudSettingsMediator>",&,N,V_mediator
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
listener:shouldAcceptNewConnection:
service
setService:
_service
T@"CloudSettingsService",&,V_service
deviceSettingsForKeys:
applySettings:
registerKeys
registerKey:getter:setter:
registerKey:getter:setter:merger:type:
dispatchSettersOnMain
setDispatchSettersOnMain:
keysMap
setKeysMap:
_dispatchSettersOnMain
_keysMap
T@"NSMutableDictionary",&,V_keysMap
TB,V_dispatchSettersOnMain
v32@0:8@16@24
v24@0:8@16
v28@0:8@16B24
@16@0:8
v32@0:8@"NSArray"16@"NSString"24
v24@0:8@"NSString"16
v28@0:8@"NSString"16B24
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
v28@0:8B16@20
B24@0:8@16
v32@0:8q16@24
q24@0:8@16
@24@0:8@16
i32@0:8@16@24
v20@0:8B16
v16@0:8
@"NSString"
@"NSUbiquitousKeyValueStore"
@32@0:8@16@24
@"CloudSettingsStore"
@"<CloudSettingsMediator>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"CloudSettingsService"
@"NSDictionary"24@0:8@"NSArray"16
@"NSDictionary"24@0:8@"NSDictionary"16
v40@0:8@16:24:32
v56@0:8@16:24:32:40@48
@"NSMutableDictionary"
