@(#)PROGRAM:MPSMatrix  PROJECT:MPS-1
Internal Matrix Multiply: M=%lu, N=%lu, K=%lu, Batch Size=%lu, Batch Start Index: %lu, A Datatype: %s, B Datatype: %s C Datatype: %s
[%@ initWithCoder:device:] Unsupported file version. Could not init object.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/ARM64/MPSMatrixMultiplication.mm
%@ "%@"
leftMatrixOrigin: {%ld,%ld,%ld}
rightMatrixOrigin: {%ld,%ld,%ld}
resultMatrixOrigin{%ld,%ld,%ld}
leftMatrix (%@) Size: {%ld x %ld}
rightMatrix (%@) Size: {%ld x %ld}
resultMatrixSize: {%ld x %ld}
device: %p
transposed
non-transposed
[%@ apply...] commandBuffer may not be nil]
[%@ apply...] left input matrix may not be nil
[%@ apply...] right input matrix may not be nil
[%@ apply...] result matrix may not be nil
[%@ apply...] left matrix origin z component must be 0
[%@ apply...] right matrix origin z component must be 0
[%@ apply...] result matrix origin z component must be 0
The starting matrix must be contained within each of the MPSMatrix objects.
Number of requested rows in result exceeds result matrix size.
Number of requested columns in result exceeds result matrix size.
Mixed input matrix multiplication is only supported when A.dataType == C.dataType == MPSDataTypeFloat32 and B.dataType == MPSDataTypeFloat16.
Input data type must be one of MPSDataTypeFloat32, MPSDataTypeFloat16, MPSDataTypeInt8, or MPSDataTypeInt16.
Only outputs of MPSDataTypeFloat32 are supported for this input type.
Only outputs of MPSDataTypeFloat16 and MPSDataTypeFloat32 are supported for this input type.
Number of requested rows in left input matrix exceeds left input matrix size.
Number of requested columns in left input matrix exceeds left input matrix size.
Number of requested rows in right input matrix exceeds right input matrix size.
Number of requested columns in right input matrix exceeds right input matrix size.
MatrixMultiplyNN
MatrixMultiplyNT
MatrixMultiplyTN
MatrixMultiplyTT
i8MatrixMultiplyNN_aligned
i8MatrixMultiplyNT_aligned
i8MatrixMultiplyTN_aligned
i8MatrixMultiplyTT_aligned
i8MatrixMultiplyNN_unaligned
i8MatrixMultiplyNT_unaligned
i8MatrixMultiplyTN_unaligned
i8MatrixMultiplyTT_unaligned
i16MatrixMultiplyNN_aligned
i16MatrixMultiplyNT_aligned
i16MatrixMultiplyTN_aligned
i16MatrixMultiplyTT_aligned
i16MatrixMultiplyNN_unaligned
i16MatrixMultiplyNT_unaligned
i16MatrixMultiplyTN_unaligned
i16MatrixMultiplyTT_unaligned
f16MatrixMultiplyNN_aligned
f16MatrixMultiplyNT_aligned
f16MatrixMultiplyTN_aligned
f16MatrixMultiplyTT_aligned
f16MatrixMultiplyNN_unaligned
f16MatrixMultiplyNT_unaligned
f16MatrixMultiplyTN_unaligned
f16MatrixMultiplyTT_unaligned
f1632MatrixMultiplyNN_aligned
f1632MatrixMultiplyNT_aligned
f1632MatrixMultiplyTN_aligned
f1632MatrixMultiplyTT_aligned
f1632MatrixMultiplyNN_unaligned
f1632MatrixMultiplyNT_unaligned
f1632MatrixMultiplyTN_unaligned
f1632MatrixMultiplyTT_unaligned
i8f16MatrixMultiplyNN_aligned
i8f16MatrixMultiplyNT_aligned
i8f16MatrixMultiplyTN_aligned
i8f16MatrixMultiplyTT_aligned
i8f16MatrixMultiplyNN_unaligned
i8f16MatrixMultiplyNT_unaligned
i8f16MatrixMultiplyTN_unaligned
i8f16MatrixMultiplyTT_unaligned
f16f32f32MatrixMultiplyNN_Apple
f16f32f32MatrixMultiplyNT
f16f32f32MatrixMultiplyTN
f16f32f32MatrixMultiplyTT
f16f32f32MatrixMultiplyFourNN
f16f32f32MatrixMultiplyNN_Mod2
f16f32f32MatrixMultiplyNN_Mod1
MatrixBatchMultiplyNN_general
MatrixBatchMultiplyNT_general
MatrixBatchMultiplyTN_general
MatrixBatchMultiplyTT_general
MatrixBatchMultiplyNN_2x2x1_M8N2K1
MatrixBatchMultiplyNN_4x1x1_M16N1K1
MatrixBatchMultiplyNN_4x4x1_M16N4K1
A11f1632MatrixMultiplyNN_aligned
A11f1632MatrixMultiplyNN_unaligned
MatrixMultiplyNNA11_M8_N64_K16
MatrixMultiplyNNA11_M4_N8
MatrixMultiplyNNA11_M4
MatrixMultiplyNNA11_M3
MatrixMultiplyNNA11_M2
MatrixMultiplyNNA11_M1
MatrixBatchMultiplyTN_1x4x4_M4N4K16
MatrixBatchMultiplyNT_4x1x1_M4N4K1
MatrixMultiplyNNFP16A11_M8_N64_K16
MatrixMultiplyNNA11_M8_N64_K8
MatrixMultiplyNNA14_M32_N128_singlebuffer_all_types
MatrixMultiplyNNA14_M32_N128_singlebuffer_edgecase_all_types
MatrixMultiplyA14X
MPS_MATMUL_TILEM
MPS_MATMUL_TILEN
MPS_MATMUL_TILEK
MPS_MATMUL_TGSIZE
v16@?0@"<MTLCommandBuffer>"8
MPSMatrixMultiplication.transA
MPSMatrixMultiplication.transB
MPSMatrixMultiplication.alpha
MPSMatrixMultiplication.beta
MPSMatrixMultiplication.M
MPSMatrixMultiplication.N
MPSMatrixMultiplication.K
MPSMatrixMultiplication.leftMatrixOrigin.x
MPSMatrixMultiplication.leftMatrixOrigin.y
MPSMatrixMultiplication.leftMatrixOrigin.z
MPSMatrixMultiplication.rightMatrixOrigin.x
MPSMatrixMultiplication.rightMatrixOrigin.y
MPSMatrixMultiplication.rightMatrixOrigin.z
MPSMatrixMultiplication.resultMatrixOrigin.x
MPSMatrixMultiplication.resultMatrixOrigin.y
MPSMatrixMultiplication.resulttMatrixOrigin.z
MPSMatrixMultiplication.batchStart
MPSMatrixMultiplication.batchSize
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSoftMaxGradient.mm
[%@ apply...] source gradient matrix may not be nil
[%@ apply...] forward output matrix may not be nil
[%@ apply...] input matrix origin z component must be 0
Matrices/vectors contain batches, batching not supported.
Only outputs of MPSDataTypeFloat32 are supported.
Only input matrix value types of MPSDataTypeFloat32 are supported.
[%@ initWithCoder:device:] Failed: unsupported file version.
MatrixSoftMaxGradient
MPMatrixSoftMaxGradient._sourceColumns;
MPMatrixSoftMaxGradient._sourceRows
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixDecompositionCholesky.mm
[%@ apply...] source matrix may not be nil
[%@ apply...] source matrix origin z component must be 0
Number of rows in source exceeds source matrix size.
Number of columns in source exceeds source matrix size.
Number of rows in result exceeds result matrix size.
Number of columns in result exceeds result matrix size.
Only MPSDataTypeFloat32 is supported.
MPSMatrixCholeskyPivot
MPSMatrixCholeskyMatrixVectorUpdate
MPSMatrixCholeskyVectorMatrixUpdate
[%@ initWithDevice:subMatrixRows:subMatrixColumns] subMatrixColumns must be larger than zero
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixCombination.mm
[%@ apply...] MPSMatrixCopyDescriptor not filled up]
[%@ apply...] sourceMatrices may not be nil
[%@ apply...] destinationMatrices may not be nil
[%@ apply...] Destination matrix too small
[%@ apply...] Source matrix too small
[%@ apply...] columnPermuteIndices vector too small
%@ "%@"
ransposeDestination (%@) transposeSource (%@) subMatrixRows: %ld 
subMatrixColumns: %ld 
device: %p
MPSmatrixEmbeddings_float
MPSmatrixEmbeddings_half
MPSmatrixEmbeddings_char
MPSMatrixLookUpAndCopy.transposeSource
MPSMatrixLookUpAndCopy.transposeDestination
MPSMatrixLookUpAndCopy.copyRows
MPSMatrixLookUpAndCopy.copyColumns
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSolveTriangular.mm
[%@ apply...] coefficient matrix may not be nil
[%@ apply...] right hand side matrix may not be nil
[%@ apply...] solution matrix may not be nil
[%@ apply...] right hand side matrix origin z component must be 0
[%@ apply...] solution matrix origin z component must be 0
Number of right hand sides in solution exceeds solution matrix size.
Number of rows in solution exceeds solution matrix size.
Number of right hand sides in right hand side exceeds right hand side matrix size.
Number of rows in right hand size exceeds right hand size matrix size.
Number of rows in right hand side exceeds right hand side matrix size.
Number of rows in coefficient matrix exceeds coefficient matrix size.
Number of columns in coefficient matrix exceeds coefficient matrix size.
MPSMatrixInternalBlockLowerTriangularMatrixMultiply
MPSMatrixInternalBlockLowerTransposeTriangularMatrixMultiply
MPSMatrixInternalBlockUpperTriangularMatrixMultiply
MPSMatrixInternalBlockUpperTransposeTriangularMatrixMultiply
MPSMatrixInternalBlockLowerRightTriangularMatrixMultiply
MPSMatrixInternalBlockLowerRightTransposeTriangularMatrixMultiply
MPSMatrixInternalBlockUpperRightTriangularMatrixMultiply
MPSMatrixInternalBlockUpperRightTransposeTriangularMatrixMultiply
MPSMatrixInternalLowerTriangularBlockDiagonalInverse
MPSMatrixInternalLowerTriangularBlockDiagonalUnitInverse
MPSMatrixInternalUpperTriangularBlockDiagonalInverse
MPSMatrixInternalUpperTriangularBlockDiagonalUnitInverse
MPSMatrixInternalScale
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixBinaryKernel.mm
MPSMatrixUnaryKernel.primarySourceMatrixOrigin.x
MPSMatrixUnaryKernel.primarySourceMatrixOrigin.y
MPSMatrixUnaryKernel.primarySourceMatrixOrigin.z
MPSMatrixUnaryKernel.secondarySourceMatrixOrigin.x
MPSMatrixUnaryKernel.secondarySourceMatrixOrigin.y
MPSMatrixUnaryKernel.secondarySourceMatrixOrigin.z
MPSMatrixUnaryKernel.resultMatrixOrigin.x
MPSMatrixUnaryKernel.resultMatrixOrigin.y
MPSMatrixUnaryKernel.resultMatrixOrigin.z
MPSMatrixUnaryKernel.batchStart
MPSMatrixUnaryKernel.batchSize
Cannot directly initialize MPSMatrixRandom. Use one of the sub-classes of MPSMatrixRandom.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixRandom.mm
Cannot directly encode MPSMatrixRandom. Use one of the sub-classes of MPSMatrixRandom.
[%@ encodeToCommandBuffer:destinationVector:] Failed: %@ must have batchSize = 1.
[%@ encodeToCommandBuffer:destinationMatrix:] Failed: %@ must have batchSize = 1.
kMPSMatrixRandomDataTypeKey
kMPSMatrixRandomDistributionKey
kMPSMatrixRandomBatchStartKey
kMPSMatrixRandomBatchSizeKey
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixFindTopK.mm
sourceRows:  
sourceColumns: 
numberOfTopKValues:
indexOffset:
topk_common_matrix_float
topk_common_matrix_float_4
topk_common_matrix_float_8
topk_common_matrix_float_12
topk_common_matrix_half
topk_common_matrix_half_4
topk_common_matrix_half_8
topk_common_matrix_half_12
vtopk_common_matrix_float
vtopk_common_matrix_float_4
vtopk_common_matrix_float_8
vtopk_common_matrix_float_12
vtopk_common_matrix_half
vtopk_common_matrix_half_4
vtopk_common_matrix_half_8
vtopk_common_matrix_half_12
MPMatrixFindTopK._sourceColumns;
MPMatrixFindTopK._sourceRows
MPMatrixFindTopK._numberOfTopKValues;
MPMatrixFindTopK._indexOffset
MPSMatrixFindTopK._alongColumns
[%@ encodeToCommandBuffer...] commandBuffer may not be nil]
[%@ encodeToCommandBuffer...] input matrix may not be nil
[%@ encodeToCommandBuffer...] result value matrix may not be nil
[%@ encodeToCommandBuffer...] result index matrix may not be nil
[%@ encodeToCommandBuffer...] input matrix origin z components must be 0
[%@ encodeToCommandBuffer...] result matrix origin  z components must be 0
[%@ encodeToCommandBuffer...] Both input and result value matrix must use the same type.
[%@ encodeToCommandBuffer...] Only 32b and 16b floating point input data types are supported.
[%@ encodeToCommandBuffer...] numberOfTopKValues is too large.
[%@ encodeToCommandBuffer...] Number of requested rows in result exceeds result matrix size.
[%@ encodeToCommandBuffer...] Number of requested topK numbers in result exceeds result matrix size.
[%@ encodeToCommandBuffer...] Number of requested topK numbers in result exceeds source matrix size.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSolveLU.mm
[%@ apply...] pivot index matrix may not be nil
Pivot Indices matrix must be of type MPSDataTypeUInt32.
MPSMatrixApplyPivotsForward
MPSMatrixApplyPivotsBackward
MPSMatrixCopyFloat32
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixUnaryKernel.mm
sourceMatrixOrigin (rowIndex, columnIndex, batchIndex): 
(%lu, %lu, %lu)
resultMatrixOrigin (rowIndex, columnIndex, batchIndex): 
(%lu, %lu, %lu)
batchStart:
batchSize:
MPSMatrixUnaryKernel.sourceMatrixOrigin.x
MPSMatrixUnaryKernel.sourceMatrixOrigin.y
MPSMatrixUnaryKernel.sourceMatrixOrigin.z
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSolveCholesky.mm
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSoftMax.mm
sourceRows:  
sourceColumns:
softmax_common_matrix_float
softmax_common_matrix_threadgroup_float
softmax_common_matrix_half
softmax_common_matrix_threadgroup_half
MPMatrixSoftMax._sourceColumns;
MPMatrixSoftMax._sourceRows
[%@ encodeToCommandBuffer...] result matrix may not be nil
[%@ encodeToCommandBuffer...] Both inputs must use the same type.
[%@ encodeToCommandBuffer...] Only 32b and 16b floating point data types are supported.
[%@ encodeToCommandBuffer...] Number of requested columns in result exceeds result matrix size.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixVectorMultiplication.mm
[%@ apply...] input vector origin y and z components must be 0
[%@ apply...] inputmatrix origin z component must be 0
[%@ apply...] result vector origin y and z components must be 0
The starting matrix must be contained within the input MPSMatrix object.
The starting matrix must be contained within the input MPSVector object.
The starting matrix must be contained within the result MPSVector object.
Number of requested rows in result exceeds result vector size.
Both inputs must use the same type.
Only 32b and 16b floating point data and 8-bit integer types are supported.
Only 16b floating point data is supported.
Only 32b and 16b floating point data is supported.
Number of requested rows in input matrix exceeds input matrix size.
Number of requested columns in input matrix exceeds input matrix size.
Number of requested rows in left input matrix exceeds input matrix size.
Number of requested columns in left input matrix exceeds input matrix size.
MatrixVectorMultiplyN
MatrixVectorMultiplyT
MatrixVectorMultiplyN_fp16
MatrixVectorMultiplyT_fp16
MatrixVectorMultiplyN_fp16fp32
MatrixVectorMultiplyT_fp16fp32
MatrixVectorMultiplyN_i8fp16
MatrixVectorMultiplyT_i8fp16
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixDecompositionLU.mm
[%@ apply...] pivot indices matrix may not be nil
MPSMatrixLUColumnScale
MPSMatrixRowSwap
MPSMatrixIsamaxFirst
MPSMatrixIsamaxRemaining
MPSMatrixLUUpdate
MPSMatrixLUMatrixVectorUpdate
MPSMatrixLUVectorMatrixUpdate
MPSMatrixLUUpdate8
MPSMatrixMultiplication
MPSMatrixSoftMaxGradient
MPSMatrixLogSoftMaxGradient
MPSMatrixDecompositionCholesky
MPSMatrixCopyDescriptor
MPSMatrixCopy
MPSMatrixSolveTriangular
MPSMatrixBinaryKernel
MPSMatrixRandomDistributionDescriptor
NSCopying
MPSMatrixRandom
MPSMatrixRandomMTGP32
MPSMatrixRandomPhilox
MPSMatrixFindTopK
MPSMatrixSolveLU
MPSMatrixUnaryKernel
MPSMatrixSolveCholesky
MPSMatrixSoftMax
MPSMatrixLogSoftMax
MPSMatrixVectorMultiplication
MPSMatrixDecompositionLU
batchSize
matrices
batchStart
dataType
initWithDevice:
initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:
copyWithZone:device:
encodeWithCoder:
encodeBool:forKey:
encodeDouble:forKey:
encodeInt64:forKey:
initWithCoder:device:
decodeBoolForKey:
decodeDoubleForKey:
decodeInt64ForKey:
debugDescription
stringWithFormat:
rows
columns
dealloc
libraryInfo:
initWithDevice:resultRows:resultColumns:interiorColumns:
encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:
encodeToCommandBuffer:encoder:leftMatrix:rightMatrix:resultMatrix:
resultMatrixOrigin
setResultMatrixOrigin:
leftMatrixOrigin
setLeftMatrixOrigin:
rightMatrixOrigin
setRightMatrixOrigin:
setBatchStart:
setBatchSize:
transA
setTransA:
transB
setTransB:
alpha
setAlpha:
beta
setBeta:
setM:
setN:
setK:
_useTiling
_plugin
_encode
_transA
_transB
_batchStart
_batchSize
_alpha
_beta
_resultMatrixOrigin
_leftMatrixOrigin
_rightMatrixOrigin
TB,N,V_transA
TB,N,V_transB
Td,N,V_alpha
Td,N,V_beta
TQ,N,V_M
TQ,N,V_N
TQ,N,V_K
T{?=QQQ},N,V_resultMatrixOrigin
T{?=QQQ},N,V_leftMatrixOrigin
T{?=QQQ},N,V_rightMatrixOrigin
TQ,N,V_batchStart
TQ,N,V_batchSize
setConstantValue:type:atIndex:
rowBytes
matrixBytes
setComputePipelineState:
data
setBuffer:offset:atIndex:
setBytes:length:atIndex:
setThreadgroupMemoryLength:atIndex:
dispatchThreadgroups:threadsPerThreadgroup:
maxTotalThreadsPerThreadgroup
threadExecutionWidth
length
maxTextureWidth2D
maxTextureHeight2D
offset
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
resourceOptions
setResourceOptions:
newTextureWithDescriptor:offset:bytesPerRow:
setTexture:atIndex:
retainedReferences
addCompletedHandler:
initWithCommandBuffer:withDispatchType:
setLabel:
stringByAppendingString:
endEncoding
primarySourceMatrixOrigin
secondarySourceMatrixOrigin
encodeToCommandBuffer:gradientMatrix:forwardOutputMatrix:resultMatrix:
sourceColumns
setSourceColumns:
sourceRows
setSourceRows:
_sourceColumns
_sourceRows
TQ,N,V_sourceRows
TQ,N,V_sourceColumns
setSourceMatrixOrigin:
options
sourceMatrixOrigin
isEqual:
order
lower
initWithDevice:lower:order:
encodeToCommandBuffer:sourceMatrix:resultMatrix:status:
_lower
_order
TB,R,N,V_lower
TQ,R,N,V_order
blitCommandEncoder
fillBuffer:range:value:
device
newBufferWithLength:options:
init
count
objectAtIndexedSubscript:
initWithDevice:count:
setCopyOperationAtIndex:sourceMatrix:destinationMatrix:offsets:
descriptorWithSourceMatrix:destinationMatrix:offsets:
sourceMatrices
destinationMatrices
cpuOffsetsVector
gpuOffsetsVector
gpuBufferOffset
allocCount
filledCount
initWithSourceMatrices:destinationMatrices:offsetVector:offset:
_sourceMatrices
_destinationMatrices
_cpuOffsetsVector
_gpuOffsetsVector
_gpuBufferOffset
_allocCount
_filledCount
encodeToCommandBuffer:copyDescriptor:rowPermuteIndices:rowPermuteOffset:columnPermuteIndices:columnPermuteOffset:
encodeToCommandBuffer:encoder:copyDescriptor:rowPermuteIndices:rowPermuteOffset:columnPermuteIndices:columnPermuteOffset:
initWithDevice:copyRows:copyColumns:sourcesAreTransposed:destinationsAreTransposed:
encodeToCommandBuffer:copyDescriptor:
copyRows
copyColumns
sourcesAreTransposed
destinationsAreTransposed
_sourcesAreTransposed
_destinationsAreTransposed
_copyRows
_copyColumns
TQ,R,N,V_copyRows
TQ,R,N,V_copyColumns
TB,R,N,V_sourcesAreTransposed
TB,R,N,V_destinationsAreTransposed
setBuffers:offsets:withRange:
setPrimarySourceMatrixOrigin:
setSecondarySourceMatrixOrigin:
matrixDescriptorWithRows:columns:rowBytes:dataType:
initWithBuffer:descriptor:
initWithDevice:right:upper:transpose:unit:order:numberOfRightHandSides:alpha:
encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:
right
upper
transpose
setOrder:
numberOfRightHandSides
setNumberOfRightHandSides:
unit
_workspace
_right
_upper
_transpose
_unit
_numberOfRightHandSides
TB,R,N,V_right
TB,R,N,V_upper
TB,R,N,V_transpose
TB,R,N,V_unit
TQ,N,V_order
TQ,N,V_numberOfRightHandSides
Td,R,N,V_alpha
_primarySourceMatrixOrigin
_secondarySourceMatrixOrigin
T{?=QQQ},N,V_primarySourceMatrixOrigin
T{?=QQQ},N,V_secondarySourceMatrixOrigin
allocWithZone:
uniformDistributionDescriptorWithMinimum:maximum:
normalDistributionDescriptorWithMean:standardDeviation:
normalDistributionDescriptorWithMean:standardDeviation:minimum:maximum:
defaultDistributionDescriptor
copyWithZone:
distributionType
setDistributionType:
minimum
setMinimum:
maximum
setMaximum:
mean
setMean:
standardDeviation
setStandardDeviation:
_minimum
_maximum
_mean
_standardDeviation
_distributionType
TQ,N,V_distributionType
Tf,N,V_minimum
Tf,N,V_maximum
Tf,N,V_mean
Tf,N,V_standardDeviation
decodeInt32ForKey:
encodeInt32:forKey:
initWithDevice:destinationDataType:distributionType:
encodeToCommandBuffer:destinationVector:
encodeToCommandBuffer:destinationMatrix:
destinationDataType
_destinationDataType
TI,R,N,V_destinationDataType
TQ,R,N,V_distributionType
initWithDevice:destinationDataType:seed:distributionDescriptor:
initWithDevice:destinationDataType:seed:
vectorBytes
encodeToCommandBuffer:destinationBuffer:destinationOffset:numEntries:
synchronizeStateOnCommandBuffer:
resetSeedOnCommandBuffer:seed:
_parallelFilter
initWithDevice:numberOfTopKValues:
encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:
indexOffset
setIndexOffset:
numberOfTopKValues
setNumberOfTopKValues:
alongColumns
setAlongColumns:
_alongColumns
_indexOffset
_numberOfTopKValues
TB,N,V_alongColumns
TQ,N,V_indexOffset
TQ,N,V_numberOfTopKValues
initWithDevice:transpose:order:numberOfRightHandSides:
encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:pivotIndices:solutionMatrix:
_trsmU
_trsmL
_sourceMatrixOrigin
T{?=QQQ},N,V_sourceMatrixOrigin
initWithDevice:upper:order:numberOfRightHandSides:
_trsmT
_trsmN
encodeToCommandBuffer:inputMatrix:resultMatrix:
newMatrixVectorMultiplicationWithTranspose:rows:columns:alpha:beta:
initWithDevice:transpose:rows:columns:alpha:beta:
vectors
initWithDevice:rows:columns:
encodeToCommandBuffer:inputMatrix:inputVector:resultVector:
Td,R,N,V_beta
encodeToCommandBuffer:sourceMatrix:resultMatrix:pivotIndices:status:
_gemmKernel
_trsmKernel
_rows
_columns
TQ,R,N,V_rows
TQ,R,N,V_columns
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
r^{MPSLibraryInfo=iI*^?{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}}24@0:8^v16
@72@0:8@16B24B28Q32Q40Q48d56d64
@48@0:8@16Q24Q32Q40
@32@0:8^{_NSZone=}16@24
v24@0:8@16
@32@0:8@16@24
@16@0:8
v48@0:8@16@24@32@40
v56@0:8@16@24@32@40@48
v16@0:8
{?=QQQ}16@0:8
v40@0:8{?=QQQ}16
Q16@0:8
v24@0:8Q16
B16@0:8
v20@0:8B16
d16@0:8
v24@0:8d16
@"<MPSExternalMatrixMultiplication>"
{?="x"Q"y"Q"z"Q}
@24@0:8@16
@36@0:8@16B24Q28
@48@0:8@16@24{?=IIII}32
^@16@0:8
^{?=IIII}16@0:8
@32@0:8@16Q24
@48@0:8@16@24@32Q40
v56@0:8Q16@24@32{?=IIII}40
^{?=IIII}
@"MPSVector"
@48@0:8@16Q24Q32B40B44
v32@0:8@16@24
v64@0:8@16@24@32Q40@48Q56
v72@0:8@16@24@32@40Q48@56Q64
@64@0:8@16B24B28B32B36Q40Q48d56
@"MPSMatrix"
@24@0:8f16f20
@32@0:8f16f20f24f28
@24@0:8^{_NSZone=}16
f16@0:8
v20@0:8f16
@36@0:8@16I24Q28
I16@0:8
@44@0:8@16I24Q28@36
v32@0:8@16Q24
@"MPSParallelRandomMTGP32"
@"MPSParallelRandomPhilox"
@44@0:8@16B24Q28Q36
@"MPSMatrixSolveTriangular"
v40@0:8@16@24@32
@60@0:8@16B24Q28Q36d44d52
@40@0:8@16Q24Q32
@"<MPSExternalMatrixVectorMultiplication>"
@"MPSMatrixMultiplication"
@(#)PROGRAM:MPSMatrix  PROJECT:MPS-1
Internal Matrix Multiply: M=%lu, N=%lu, K=%lu, Batch Size=%lu, Batch Start Index: %lu, A Datatype: %s, B Datatype: %s C Datatype: %s
[%@ initWithCoder:device:] Unsupported file version. Could not init object.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/ARM64/MPSMatrixMultiplication.mm
%@ "%@"
leftMatrixOrigin: {%ld,%ld,%ld}
rightMatrixOrigin: {%ld,%ld,%ld}
resultMatrixOrigin{%ld,%ld,%ld}
leftMatrix (%@) Size: {%ld x %ld}
rightMatrix (%@) Size: {%ld x %ld}
resultMatrixSize: {%ld x %ld}
device: %p
transposed
non-transposed
[%@ apply...] commandBuffer may not be nil]
[%@ apply...] left input matrix may not be nil
[%@ apply...] right input matrix may not be nil
[%@ apply...] result matrix may not be nil
[%@ apply...] left matrix origin z component must be 0
[%@ apply...] right matrix origin z component must be 0
[%@ apply...] result matrix origin z component must be 0
The starting matrix must be contained within each of the MPSMatrix objects.
Number of requested rows in result exceeds result matrix size.
Number of requested columns in result exceeds result matrix size.
Mixed input matrix multiplication is only supported when A.dataType == C.dataType == MPSDataTypeFloat32 and B.dataType == MPSDataTypeFloat16.
Input data type must be one of MPSDataTypeFloat32, MPSDataTypeFloat16, MPSDataTypeInt8, or MPSDataTypeInt16.
Only outputs of MPSDataTypeFloat32 are supported for this input type.
Only outputs of MPSDataTypeFloat16 and MPSDataTypeFloat32 are supported for this input type.
Number of requested rows in left input matrix exceeds left input matrix size.
Number of requested columns in left input matrix exceeds left input matrix size.
Number of requested rows in right input matrix exceeds right input matrix size.
Number of requested columns in right input matrix exceeds right input matrix size.
MatrixMultiplyNN
MatrixMultiplyNT
MatrixMultiplyTN
MatrixMultiplyTT
i8MatrixMultiplyNN_aligned
i8MatrixMultiplyNT_aligned
i8MatrixMultiplyTN_aligned
i8MatrixMultiplyTT_aligned
i8MatrixMultiplyNN_unaligned
i8MatrixMultiplyNT_unaligned
i8MatrixMultiplyTN_unaligned
i8MatrixMultiplyTT_unaligned
i16MatrixMultiplyNN_aligned
i16MatrixMultiplyNT_aligned
i16MatrixMultiplyTN_aligned
i16MatrixMultiplyTT_aligned
i16MatrixMultiplyNN_unaligned
i16MatrixMultiplyNT_unaligned
i16MatrixMultiplyTN_unaligned
i16MatrixMultiplyTT_unaligned
f16MatrixMultiplyNN_aligned
f16MatrixMultiplyNT_aligned
f16MatrixMultiplyTN_aligned
f16MatrixMultiplyTT_aligned
f16MatrixMultiplyNN_unaligned
f16MatrixMultiplyNT_unaligned
f16MatrixMultiplyTN_unaligned
f16MatrixMultiplyTT_unaligned
f1632MatrixMultiplyNN_aligned
f1632MatrixMultiplyNT_aligned
f1632MatrixMultiplyTN_aligned
f1632MatrixMultiplyTT_aligned
f1632MatrixMultiplyNN_unaligned
f1632MatrixMultiplyNT_unaligned
f1632MatrixMultiplyTN_unaligned
f1632MatrixMultiplyTT_unaligned
i8f16MatrixMultiplyNN_aligned
i8f16MatrixMultiplyNT_aligned
i8f16MatrixMultiplyTN_aligned
i8f16MatrixMultiplyTT_aligned
i8f16MatrixMultiplyNN_unaligned
i8f16MatrixMultiplyNT_unaligned
i8f16MatrixMultiplyTN_unaligned
i8f16MatrixMultiplyTT_unaligned
f16f32f32MatrixMultiplyNN_Apple
f16f32f32MatrixMultiplyNT
f16f32f32MatrixMultiplyTN
f16f32f32MatrixMultiplyTT
f16f32f32MatrixMultiplyFourNN
f16f32f32MatrixMultiplyNN_Mod2
f16f32f32MatrixMultiplyNN_Mod1
MatrixBatchMultiplyNN_general
MatrixBatchMultiplyNT_general
MatrixBatchMultiplyTN_general
MatrixBatchMultiplyTT_general
MatrixBatchMultiplyNN_2x2x1_M8N2K1
MatrixBatchMultiplyNN_4x1x1_M16N1K1
MatrixBatchMultiplyNN_4x4x1_M16N4K1
A11f1632MatrixMultiplyNN_aligned
A11f1632MatrixMultiplyNN_unaligned
MatrixMultiplyNNA11_M8_N64_K16
MatrixMultiplyNNA11_M4_N8
MatrixMultiplyNNA11_M4
MatrixMultiplyNNA11_M3
MatrixMultiplyNNA11_M2
MatrixMultiplyNNA11_M1
MatrixBatchMultiplyTN_1x4x4_M4N4K16
MatrixBatchMultiplyNT_4x1x1_M4N4K1
MatrixMultiplyNNFP16A11_M8_N64_K16
MatrixMultiplyNNA11_M8_N64_K8
MatrixMultiplyNNA14_M32_N128_singlebuffer_all_types
MatrixMultiplyNNA14_M32_N128_singlebuffer_edgecase_all_types
MatrixMultiplyA14X
MPS_MATMUL_TILEM
MPS_MATMUL_TILEN
MPS_MATMUL_TILEK
MPS_MATMUL_TGSIZE
v16@?0@"<MTLCommandBuffer>"8
MPSMatrixMultiplication.transA
MPSMatrixMultiplication.transB
MPSMatrixMultiplication.alpha
MPSMatrixMultiplication.beta
MPSMatrixMultiplication.M
MPSMatrixMultiplication.N
MPSMatrixMultiplication.K
MPSMatrixMultiplication.leftMatrixOrigin.x
MPSMatrixMultiplication.leftMatrixOrigin.y
MPSMatrixMultiplication.leftMatrixOrigin.z
MPSMatrixMultiplication.rightMatrixOrigin.x
MPSMatrixMultiplication.rightMatrixOrigin.y
MPSMatrixMultiplication.rightMatrixOrigin.z
MPSMatrixMultiplication.resultMatrixOrigin.x
MPSMatrixMultiplication.resultMatrixOrigin.y
MPSMatrixMultiplication.resulttMatrixOrigin.z
MPSMatrixMultiplication.batchStart
MPSMatrixMultiplication.batchSize
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSoftMaxGradient.mm
[%@ apply...] source gradient matrix may not be nil
[%@ apply...] forward output matrix may not be nil
[%@ apply...] input matrix origin z component must be 0
Matrices/vectors contain batches, batching not supported.
Only outputs of MPSDataTypeFloat32 are supported.
Only input matrix value types of MPSDataTypeFloat32 are supported.
[%@ initWithCoder:device:] Failed: unsupported file version.
MatrixSoftMaxGradient
MPMatrixSoftMaxGradient._sourceColumns;
MPMatrixSoftMaxGradient._sourceRows
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixDecompositionCholesky.mm
[%@ apply...] source matrix may not be nil
[%@ apply...] source matrix origin z component must be 0
Number of rows in source exceeds source matrix size.
Number of columns in source exceeds source matrix size.
Number of rows in result exceeds result matrix size.
Number of columns in result exceeds result matrix size.
Only MPSDataTypeFloat32 is supported.
MPSMatrixCholeskyPivot
MPSMatrixCholeskyMatrixVectorUpdate
MPSMatrixCholeskyVectorMatrixUpdate
[%@ initWithDevice:subMatrixRows:subMatrixColumns] subMatrixColumns must be larger than zero
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixCombination.mm
[%@ apply...] MPSMatrixCopyDescriptor not filled up]
[%@ apply...] sourceMatrices may not be nil
[%@ apply...] destinationMatrices may not be nil
[%@ apply...] Destination matrix too small
[%@ apply...] Source matrix too small
[%@ apply...] columnPermuteIndices vector too small
%@ "%@"
ransposeDestination (%@) transposeSource (%@) subMatrixRows: %ld 
subMatrixColumns: %ld 
device: %p
MPSmatrixEmbeddings_float
MPSmatrixEmbeddings_half
MPSmatrixEmbeddings_char
MPSMatrixLookUpAndCopy.transposeSource
MPSMatrixLookUpAndCopy.transposeDestination
MPSMatrixLookUpAndCopy.copyRows
MPSMatrixLookUpAndCopy.copyColumns
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSolveTriangular.mm
[%@ apply...] coefficient matrix may not be nil
[%@ apply...] right hand side matrix may not be nil
[%@ apply...] solution matrix may not be nil
[%@ apply...] right hand side matrix origin z component must be 0
[%@ apply...] solution matrix origin z component must be 0
Number of right hand sides in solution exceeds solution matrix size.
Number of rows in solution exceeds solution matrix size.
Number of right hand sides in right hand side exceeds right hand side matrix size.
Number of rows in right hand size exceeds right hand size matrix size.
Number of rows in right hand side exceeds right hand side matrix size.
Number of rows in coefficient matrix exceeds coefficient matrix size.
Number of columns in coefficient matrix exceeds coefficient matrix size.
MPSMatrixInternalBlockLowerTriangularMatrixMultiply
MPSMatrixInternalBlockLowerTransposeTriangularMatrixMultiply
MPSMatrixInternalBlockUpperTriangularMatrixMultiply
MPSMatrixInternalBlockUpperTransposeTriangularMatrixMultiply
MPSMatrixInternalBlockLowerRightTriangularMatrixMultiply
MPSMatrixInternalBlockLowerRightTransposeTriangularMatrixMultiply
MPSMatrixInternalBlockUpperRightTriangularMatrixMultiply
MPSMatrixInternalBlockUpperRightTransposeTriangularMatrixMultiply
MPSMatrixInternalLowerTriangularBlockDiagonalInverse
MPSMatrixInternalLowerTriangularBlockDiagonalUnitInverse
MPSMatrixInternalUpperTriangularBlockDiagonalInverse
MPSMatrixInternalUpperTriangularBlockDiagonalUnitInverse
MPSMatrixInternalScale
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixBinaryKernel.mm
MPSMatrixUnaryKernel.primarySourceMatrixOrigin.x
MPSMatrixUnaryKernel.primarySourceMatrixOrigin.y
MPSMatrixUnaryKernel.primarySourceMatrixOrigin.z
MPSMatrixUnaryKernel.secondarySourceMatrixOrigin.x
MPSMatrixUnaryKernel.secondarySourceMatrixOrigin.y
MPSMatrixUnaryKernel.secondarySourceMatrixOrigin.z
MPSMatrixUnaryKernel.resultMatrixOrigin.x
MPSMatrixUnaryKernel.resultMatrixOrigin.y
MPSMatrixUnaryKernel.resultMatrixOrigin.z
MPSMatrixUnaryKernel.batchStart
MPSMatrixUnaryKernel.batchSize
Cannot directly initialize MPSMatrixRandom. Use one of the sub-classes of MPSMatrixRandom.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixRandom.mm
Cannot directly encode MPSMatrixRandom. Use one of the sub-classes of MPSMatrixRandom.
[%@ encodeToCommandBuffer:destinationVector:] Failed: %@ must have batchSize = 1.
[%@ encodeToCommandBuffer:destinationMatrix:] Failed: %@ must have batchSize = 1.
kMPSMatrixRandomDataTypeKey
kMPSMatrixRandomDistributionKey
kMPSMatrixRandomBatchStartKey
kMPSMatrixRandomBatchSizeKey
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixFindTopK.mm
sourceRows:  
sourceColumns: 
numberOfTopKValues:
indexOffset:
topk_common_matrix_float
topk_common_matrix_float_4
topk_common_matrix_float_8
topk_common_matrix_float_12
topk_common_matrix_half
topk_common_matrix_half_4
topk_common_matrix_half_8
topk_common_matrix_half_12
vtopk_common_matrix_float
vtopk_common_matrix_float_4
vtopk_common_matrix_float_8
vtopk_common_matrix_float_12
vtopk_common_matrix_half
vtopk_common_matrix_half_4
vtopk_common_matrix_half_8
vtopk_common_matrix_half_12
MPMatrixFindTopK._sourceColumns;
MPMatrixFindTopK._sourceRows
MPMatrixFindTopK._numberOfTopKValues;
MPMatrixFindTopK._indexOffset
MPSMatrixFindTopK._alongColumns
[%@ encodeToCommandBuffer...] commandBuffer may not be nil]
[%@ encodeToCommandBuffer...] input matrix may not be nil
[%@ encodeToCommandBuffer...] result value matrix may not be nil
[%@ encodeToCommandBuffer...] result index matrix may not be nil
[%@ encodeToCommandBuffer...] input matrix origin z components must be 0
[%@ encodeToCommandBuffer...] result matrix origin  z components must be 0
[%@ encodeToCommandBuffer...] Both input and result value matrix must use the same type.
[%@ encodeToCommandBuffer...] Only 32b and 16b floating point input data types are supported.
[%@ encodeToCommandBuffer...] numberOfTopKValues is too large.
[%@ encodeToCommandBuffer...] Number of requested rows in result exceeds result matrix size.
[%@ encodeToCommandBuffer...] Number of requested topK numbers in result exceeds result matrix size.
[%@ encodeToCommandBuffer...] Number of requested topK numbers in result exceeds source matrix size.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSolveLU.mm
[%@ apply...] pivot index matrix may not be nil
Pivot Indices matrix must be of type MPSDataTypeUInt32.
MPSMatrixApplyPivotsForward
MPSMatrixApplyPivotsBackward
MPSMatrixCopyFloat32
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixUnaryKernel.mm
sourceMatrixOrigin (rowIndex, columnIndex, batchIndex): 
(%lu, %lu, %lu)
resultMatrixOrigin (rowIndex, columnIndex, batchIndex): 
(%lu, %lu, %lu)
batchStart:
batchSize:
MPSMatrixUnaryKernel.sourceMatrixOrigin.x
MPSMatrixUnaryKernel.sourceMatrixOrigin.y
MPSMatrixUnaryKernel.sourceMatrixOrigin.z
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSolveCholesky.mm
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixSoftMax.mm
sourceRows:  
sourceColumns:
softmax_common_matrix_float
softmax_common_matrix_threadgroup_float
softmax_common_matrix_half
softmax_common_matrix_threadgroup_half
MPMatrixSoftMax._sourceColumns;
MPMatrixSoftMax._sourceRows
[%@ encodeToCommandBuffer...] result matrix may not be nil
[%@ encodeToCommandBuffer...] Both inputs must use the same type.
[%@ encodeToCommandBuffer...] Only 32b and 16b floating point data types are supported.
[%@ encodeToCommandBuffer...] Number of requested columns in result exceeds result matrix size.
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixVectorMultiplication.mm
[%@ apply...] input vector origin y and z components must be 0
[%@ apply...] inputmatrix origin z component must be 0
[%@ apply...] result vector origin y and z components must be 0
The starting matrix must be contained within the input MPSMatrix object.
The starting matrix must be contained within the input MPSVector object.
The starting matrix must be contained within the result MPSVector object.
Number of requested rows in result exceeds result vector size.
Both inputs must use the same type.
Only 32b and 16b floating point data and 8-bit integer types are supported.
Only 16b floating point data is supported.
Only 32b and 16b floating point data is supported.
Number of requested rows in input matrix exceeds input matrix size.
Number of requested columns in input matrix exceeds input matrix size.
Number of requested rows in left input matrix exceeds input matrix size.
Number of requested columns in left input matrix exceeds input matrix size.
MatrixVectorMultiplyN
MatrixVectorMultiplyT
MatrixVectorMultiplyN_fp16
MatrixVectorMultiplyT_fp16
MatrixVectorMultiplyN_fp16fp32
MatrixVectorMultiplyT_fp16fp32
MatrixVectorMultiplyN_i8fp16
MatrixVectorMultiplyT_i8fp16
/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShaders_Sim/MPSMatrix/LinearAlgebra/MPSMatrixDecompositionLU.mm
[%@ apply...] pivot indices matrix may not be nil
MPSMatrixLUColumnScale
MPSMatrixRowSwap
MPSMatrixIsamaxFirst
MPSMatrixIsamaxRemaining
MPSMatrixLUUpdate
MPSMatrixLUMatrixVectorUpdate
MPSMatrixLUVectorMatrixUpdate
MPSMatrixLUUpdate8
MPSMatrixMultiplication
MPSMatrixSoftMaxGradient
MPSMatrixLogSoftMaxGradient
MPSMatrixDecompositionCholesky
MPSMatrixCopyDescriptor
MPSMatrixCopy
MPSMatrixSolveTriangular
MPSMatrixBinaryKernel
MPSMatrixRandomDistributionDescriptor
NSCopying
MPSMatrixRandom
MPSMatrixRandomMTGP32
MPSMatrixRandomPhilox
MPSMatrixFindTopK
MPSMatrixSolveLU
MPSMatrixUnaryKernel
MPSMatrixSolveCholesky
MPSMatrixSoftMax
MPSMatrixLogSoftMax
MPSMatrixVectorMultiplication
MPSMatrixDecompositionLU
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
setResourceOptions:
offset
setBuffers:offsets:withRange:
count
decodeBoolForKey:
encodeInt64:forKey:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
matrixDescriptorWithRows:columns:rowBytes:dataType:
retainedReferences
objectAtIndexedSubscript:
isEqual:
encodeDouble:forKey:
setBuffer:offset:atIndex:
matrixBytes
encodeInt32:forKey:
encodeBool:forKey:
stringWithFormat:
setConstantValue:type:atIndex:
dataType
matrices
resourceOptions
decodeInt64ForKey:
initWithCommandBuffer:withDispatchType:
maxTotalThreadsPerThreadgroup
blitCommandEncoder
stringByAppendingString:
newTextureWithDescriptor:offset:bytesPerRow:
addCompletedHandler:
fillBuffer:range:value:
vectors
setComputePipelineState:
data
decodeInt32ForKey:
encodeToCommandBuffer:destinationBuffer:destinationOffset:numEntries:
setLabel:
setThreadgroupMemoryLength:atIndex:
maxTextureWidth2D
newBufferWithLength:options:
options
rowBytes
dispatchThreadgroups:threadsPerThreadgroup:
endEncoding
length
setBytes:length:atIndex:
threadExecutionWidth
vectorBytes
initWithBuffer:descriptor:
decodeDoubleForKey:
setTexture:atIndex:
maxTextureHeight2D
allocWithZone:
device
initWithDevice:
copyWithZone:device:
encodeWithCoder:
initWithCoder:device:
debugDescription
dealloc
libraryInfo:
initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:
initWithDevice:resultRows:resultColumns:interiorColumns:
encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:
encodeToCommandBuffer:encoder:leftMatrix:rightMatrix:resultMatrix:
resultMatrixOrigin
setResultMatrixOrigin:
leftMatrixOrigin
setLeftMatrixOrigin:
rightMatrixOrigin
setRightMatrixOrigin:
batchStart
setBatchStart:
batchSize
setBatchSize:
transA
setTransA:
transB
setTransB:
alpha
setAlpha:
beta
setBeta:
setM:
setN:
setK:
_useTiling
_plugin
_encode
_transA
_transB
_batchStart
_batchSize
_alpha
_beta
_resultMatrixOrigin
_leftMatrixOrigin
_rightMatrixOrigin
TB,N,V_transA
TB,N,V_transB
Td,N,V_alpha
Td,N,V_beta
TQ,N,V_M
TQ,N,V_N
TQ,N,V_K
T{?=QQQ},N,V_resultMatrixOrigin
T{?=QQQ},N,V_leftMatrixOrigin
T{?=QQQ},N,V_rightMatrixOrigin
TQ,N,V_batchStart
TQ,N,V_batchSize
encodeToCommandBuffer:gradientMatrix:forwardOutputMatrix:resultMatrix:
sourceColumns
setSourceColumns:
sourceRows
setSourceRows:
_sourceColumns
_sourceRows
TQ,N,V_sourceRows
TQ,N,V_sourceColumns
initWithDevice:lower:order:
encodeToCommandBuffer:sourceMatrix:resultMatrix:status:
order
lower
_lower
_order
TB,R,N,V_lower
TQ,R,N,V_order
init
descriptorWithSourceMatrix:destinationMatrix:offsets:
sourceMatrices
destinationMatrices
cpuOffsetsVector
gpuOffsetsVector
gpuBufferOffset
allocCount
filledCount
initWithDevice:count:
initWithSourceMatrices:destinationMatrices:offsetVector:offset:
setCopyOperationAtIndex:sourceMatrix:destinationMatrix:offsets:
_sourceMatrices
_destinationMatrices
_cpuOffsetsVector
_gpuOffsetsVector
_gpuBufferOffset
_allocCount
_filledCount
initWithDevice:copyRows:copyColumns:sourcesAreTransposed:destinationsAreTransposed:
encodeToCommandBuffer:copyDescriptor:
encodeToCommandBuffer:copyDescriptor:rowPermuteIndices:rowPermuteOffset:columnPermuteIndices:columnPermuteOffset:
encodeToCommandBuffer:encoder:copyDescriptor:rowPermuteIndices:rowPermuteOffset:columnPermuteIndices:columnPermuteOffset:
copyRows
copyColumns
sourcesAreTransposed
destinationsAreTransposed
_sourcesAreTransposed
_destinationsAreTransposed
_copyRows
_copyColumns
TQ,R,N,V_copyRows
TQ,R,N,V_copyColumns
TB,R,N,V_sourcesAreTransposed
TB,R,N,V_destinationsAreTransposed
initWithDevice:right:upper:transpose:unit:order:numberOfRightHandSides:alpha:
encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:
right
upper
transpose
setOrder:
numberOfRightHandSides
setNumberOfRightHandSides:
unit
_workspace
_right
_upper
_transpose
_unit
_numberOfRightHandSides
TB,R,N,V_right
TB,R,N,V_upper
TB,R,N,V_transpose
TB,R,N,V_unit
TQ,N,V_order
TQ,N,V_numberOfRightHandSides
Td,R,N,V_alpha
primarySourceMatrixOrigin
setPrimarySourceMatrixOrigin:
secondarySourceMatrixOrigin
setSecondarySourceMatrixOrigin:
_primarySourceMatrixOrigin
_secondarySourceMatrixOrigin
T{?=QQQ},N,V_primarySourceMatrixOrigin
T{?=QQQ},N,V_secondarySourceMatrixOrigin
uniformDistributionDescriptorWithMinimum:maximum:
normalDistributionDescriptorWithMean:standardDeviation:
normalDistributionDescriptorWithMean:standardDeviation:minimum:maximum:
defaultDistributionDescriptor
copyWithZone:
distributionType
setDistributionType:
minimum
setMinimum:
maximum
setMaximum:
mean
setMean:
standardDeviation
setStandardDeviation:
_minimum
_maximum
_mean
_standardDeviation
_distributionType
TQ,N,V_distributionType
Tf,N,V_minimum
Tf,N,V_maximum
Tf,N,V_mean
Tf,N,V_standardDeviation
initWithDevice:destinationDataType:distributionType:
encodeToCommandBuffer:destinationVector:
encodeToCommandBuffer:destinationMatrix:
destinationDataType
_destinationDataType
TI,R,N,V_destinationDataType
TQ,R,N,V_distributionType
initWithDevice:destinationDataType:seed:distributionDescriptor:
initWithDevice:destinationDataType:seed:
synchronizeStateOnCommandBuffer:
resetSeedOnCommandBuffer:seed:
_parallelFilter
initWithDevice:numberOfTopKValues:
encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:
indexOffset
setIndexOffset:
numberOfTopKValues
setNumberOfTopKValues:
alongColumns
setAlongColumns:
_alongColumns
_indexOffset
_numberOfTopKValues
TB,N,V_alongColumns
TQ,N,V_indexOffset
TQ,N,V_numberOfTopKValues
initWithDevice:transpose:order:numberOfRightHandSides:
encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:pivotIndices:solutionMatrix:
_trsmU
_trsmL
sourceMatrixOrigin
setSourceMatrixOrigin:
_sourceMatrixOrigin
T{?=QQQ},N,V_sourceMatrixOrigin
initWithDevice:upper:order:numberOfRightHandSides:
_trsmT
_trsmN
encodeToCommandBuffer:inputMatrix:resultMatrix:
newMatrixVectorMultiplicationWithTranspose:rows:columns:alpha:beta:
initWithDevice:transpose:rows:columns:alpha:beta:
initWithDevice:rows:columns:
encodeToCommandBuffer:inputMatrix:inputVector:resultVector:
Td,R,N,V_beta
encodeToCommandBuffer:sourceMatrix:resultMatrix:pivotIndices:status:
rows
columns
_gemmKernel
_trsmKernel
_rows
_columns
TQ,R,N,V_rows
TQ,R,N,V_columns
r^{MPSLibraryInfo=iI*^?{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}{MPSDeviceSpecificInfo=^{MPSKernelInfo}^?Q}}24@0:8^v16
@72@0:8@16B24B28Q32Q40Q48d56d64
@48@0:8@16Q24Q32Q40
@32@0:8^{_NSZone=}16@24
v24@0:8@16
@32@0:8@16@24
@16@0:8
v48@0:8@16@24@32@40
v56@0:8@16@24@32@40@48
v16@0:8
{?=QQQ}16@0:8
v40@0:8{?=QQQ}16
Q16@0:8
v24@0:8Q16
B16@0:8
v20@0:8B16
d16@0:8
v24@0:8d16
@"<MPSExternalMatrixMultiplication>"
{?="x"Q"y"Q"z"Q}
@24@0:8@16
@36@0:8@16B24Q28
@48@0:8@16@24{?=IIII}32
^@16@0:8
^{?=IIII}16@0:8
@32@0:8@16Q24
@48@0:8@16@24@32Q40
v56@0:8Q16@24@32{?=IIII}40
^{?=IIII}
@"MPSVector"
@48@0:8@16Q24Q32B40B44
v32@0:8@16@24
v64@0:8@16@24@32Q40@48Q56
v72@0:8@16@24@32@40Q48@56Q64
@64@0:8@16B24B28B32B36Q40Q48d56
@"MPSMatrix"
@24@0:8f16f20
@32@0:8f16f20f24f28
@24@0:8^{_NSZone=}16
f16@0:8
v20@0:8f16
@36@0:8@16I24Q28
I16@0:8
@44@0:8@16I24Q28@36
v32@0:8@16Q24
@"MPSParallelRandomMTGP32"
@"MPSParallelRandomPhilox"
@44@0:8@16B24Q28Q36
@"MPSMatrixSolveTriangular"
v40@0:8@16@24@32
@60@0:8@16B24Q28Q36d44d52
@40@0:8@16Q24Q32
@"<MPSExternalMatrixVectorMultiplication>"
@"MPSMatrixMultiplication"
