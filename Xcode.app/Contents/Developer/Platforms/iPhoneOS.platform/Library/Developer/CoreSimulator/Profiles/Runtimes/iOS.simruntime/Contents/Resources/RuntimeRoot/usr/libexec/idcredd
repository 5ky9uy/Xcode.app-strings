@(#)PROGRAM:idcredd  PROJECT:CoreIDV-5.35.3
ffffff
DCPresentmentType
SecKey
NSecKeyRef
DCCredentialPayloadFormat
DCCredentialPayloadProtectionType
DCCredentialCryptoKeyType
DCCredentialCryptoKeyUsage
DCCredentialPayloadProtectionPolicy
DCCredentialPresentmentAuthPolicy
DCCredentialReaderAuthenticationPolicy
SecTrust
NSecTrustRef
SecAccessControl
NSecAccessControlRef
CFString
NCFStringRef
DCCredentialState
DCCredentialAuthACLType
SecCertificate
NSecCertificateRef
DCCredentialCompletenessResult
SELegacyKeystore
KeyCreationResult
idcredd
ISO18013PackageECv3SHPayloadProcessor
EnvironmentManager
Environment
BiometricStoreListener
BiometricStoreSessionProxy
ISO18013PackagePayloadProcessor
KeyProtectionOptions
GenericPasswordStore
PresentmentListener
PresentmentSessionProxy
PresentmentSessionCryptor
CredentialKey
DeviceIdentityKeyBackedCredentialKey
KeySigningKey
DeviceEncryptionKey
PresentmentKey
NewlyCreatedPresentmentKey
PayloadProtectionKey
CredentialKeyUsage
CredentialKeyType
PresentmentResponseBuilder
ACLFetcher
PayloadProtectionScenario
ISO18013PackageEncryptedPayloadProcessor
CredentialStorage
PresentmentProposal
BiometricStorage
EncryptedAuthACL
PresentmentRequestInterpreter
PresentmentRequestInterpretation
GenericPasswordConvertibleProtocol
IDCSCoreDataStore
CredentialStoreListener
CredentialStoreSessionProxy
DaemonInitializer
PresentmentFlow
IdentityReaderAuthenticator
ReaderCertificateMetadata
SpecialCaseResponse
ServerRevocationResponse
ISO18013PackageHPKEPayloadProcessor
ISO18013PackageAESGCMProcessor
CredentialKeyManager
IDCSDataContext
PayloadProcessorFactory
PayloadProcessor
PayloadMetadata
ElementFallback
CredentialElement
com.apple.CoreIDV
invalid
dekar
SHA-256
SHA-384
SHA-512
MIICDTCCAbOgAwIBAgIULN3m8pvH7WaG7bK5GwsBuFDN884wCgYIKoZIzj0EAwIw
TzEUMBIGA1UEAwwLUmVhZGVyIHJvb3QxHzAdBgNVBAoMFlJvb3QgdGVzdCBvcmdh
bml6YXRpb24xFjAUBgNVBAsMDVJvb3QgZXN0IHVuaXQwIBcNMjIwMjIxMTcwOTQz
WhgPMjEyMTAxMjgxNzA5NDNaME8xFDASBgNVBAMMC1JlYWRlciByb290MR8wHQYD
VQQKDBZSb290IHRlc3Qgb3JnYW5pemF0aW9uMRYwFAYDVQQLDA1Sb290IGVzdCB1
bml0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErq+tyX/HXtSrbXk6D9QIWcLZ
QQ0JhV2sDVfI8sBmC0/xLTX6MRP1y0Bu/qJF5ty33ure+m2x2wfysJeEJrh3CaNr
MGkwHQYDVR0OBBYEFKE6IgXlrI/qxDuMAI4p6BqJlCndMBIGA1UdEwEB/wQIMAYB
Af8CAQAwDgYDVR0PAQH/BAQDAgEGMCQGA1UdHwQdMBswGaAXoBWGE2V4YW1wbGUu
Y29tL2NybC5wZW0wCgYIKoZIzj0EAwIDSAAwRQIhAOJNQQjruJ/rQ0SQDcKobrwz
HHlRgsyfOQwDC4CYr9g1AiAsyzPVn9ykludYmzu+v/u2xyEIODX1EUsxVyCStYmK
fA==
MIIHejCCBWKgAwIBAgIEU5fxqDANBgkqhkiG9w0BAQsFADCBmjELMAkGA1UEBhMC
VVMxGDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEjMCEGA1UECxMaRGVwYXJ0bWVu
dCBvZiB0aGUgVHJlYXN1cnkxIjAgBgNVBAsTGUNlcnRpZmljYXRpb24gQXV0aG9y
aXRpZXMxKDAmBgNVBAsTH0RldmVsb3BtZW50IFVTIFRyZWFzdXJ5IFJvb3QgQ0Ew
HhcNMTkwNjA0MTIwOTI5WhcNMjkwNjA0MTIzOTI5WjCBkzELMAkGA1UEBhMCVVMx
GDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEoMCYGA1UECxMfRGVwYXJ0bWVudCBv
ZiBIb21lbGFuZCBTZWN1cml0eTEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBBdXRo
b3JpdGllczEcMBoGA1UECxMTRGV2ZWxvcG1lbnQgREhTIENBNDCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAKmi2VCGaLthmLFA97K4b0KhVJ+YZSfMCqGF
BEdn8lMK405Ky89ovIsUZVBBt9w0m1u/vIzI6wlh1LAWgQFScReGMZFcNjcsKnjR
36Awqn94Pub+0X6SH4LWLI5P8pIqCLezM1BFK9we64bXrtLuLLHrsCHRcBaL3Upn
zWOg1Qoe2krnd5hXtRXmHhA8SHz0SjwTDqkhcvwZUPbBnozL4neC2P0MoXDNA7dB
pgxJb/3ENI0T01lsWGFn8nYlJQC9yEbnpdBIc3XeWIOVuivx0/gDGUKjYG3rzztV
W50/3AOwQk3dJ3tpo5KllnrfvgHqrynSkIlus2ekHFNUEUeZ+CUCAwEAAaOCAssw
ggLHMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MIHBBgNVHSAEgbkw
gbYwDAYKYIZIAWUDAgEwCDAMBgpghkgBZQMCATAJMAwGCmCGSAFlAwIBMAowDAYK
YIZIAWUDAgEwCzAMBgpghkgBZQMCATAMMAwGCmCGSAFlAwIBMA0wDAYKYIZIAWUD
AgEwVjAMBgpghkgBZQMCATBiMAwGCmCGSAFlAwIBMG0wDAYKYIZIAWUDAgEwbjAM
BgpghkgBZQMCATBvMAwGCmCGSAFlAwIBMHAwDAYKYIZIAWUDAgEwcTBRBggrBgEF
BQcBAQRFMEMwQQYIKwYBBQUHMAKGNWh0dHA6Ly9kZXZwa2kudHJlYXN1cnkuZ292
L2NhY2VydHNpc3N1ZWR0b2RldnRyY2EucDdjMEcGCCsGAQUFBwELBDswOTA3Bggr
BgEFBQcwBYYraHR0cDovL2RldnBraS50cmVhc3VyeS5nb3YvZGV2ZGhzY2Ffc2lh
LnA3YzCCAQIGA1UdHwSB+jCB9zA9oDugOYY3aHR0cDovL2RldnBraS50cmVhc3Vy
eS5nb3YvRGV2X1VTX1RyZWFzdXJ5X1Jvb3RfQ0ExLmNybDCBtaCBsqCBr6SBrDCB
qTELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEjMCEGA1UE
CxMaRGVwYXJ0bWVudCBvZiB0aGUgVHJlYXN1cnkxIjAgBgNVBAsTGUNlcnRpZmlj
YXRpb24gQXV0aG9yaXRpZXMxKDAmBgNVBAsTH0RldmVsb3BtZW50IFVTIFRyZWFz
dXJ5IFJvb3QgQ0ExDTALBgNVBAMTBENSTDEwHwYDVR0jBBgwFoAULSbP9zlAO622
KdVBbpEqVTJ0X74wHQYDVR0OBBYEFCNHZyVju375a4GrMIB/UR9xFtLtMA0GCSqG
SIb3DQEBCwUAA4ICAQCqfC6hPc98g26veqeBnnZFgbHK1WkJGSVb76/ffWJbVm1D
4d3oH2YPkpaqKBIY8PLYrA+/ussVhPfDcLXdTBFI3V3JERj+LFG3eICyF/fIiGOA
5zsMzSC48DjzzOupW3KOCvVjCjfru8Slu9dc37MVc14ffuJtLgUwAKRbu+7hT3ie
vequ9KNQ9kG6/7h/w9gG3c7HGsbjCEvSn3qWaHYwpUSgZQpurtaJbt8lvcYSKW/n
PWyU3zYA/zLtewkEaenCETCKYzXmRott4FnRqQDLe0WyQnuXQcEZ/26RIpqhJ/3Z
1QlCp3zwzXZcX8ZNTue5KruLXQV0jb0ZAkp3oDApMUvw/MQestAoTZJrEFVTq4xb
ftwKPOEsZxGW7U975U1+cyHPKlJOhZes+Dp5jgXVFU377xgadQOxuG37xgarFvZM
Z7zC10CmSweLQ2BXyxNH+kwS2aTtfaJ1b/ueU4QJ/4w0Os2hfiufF66yULruXfKf
D4Q12ONaFR/TUPBKityLXxGV51XI7dIV5udGVpMyFjsMFNYnmDZ9IMjHtC90kSbC
D87WZa1uRmeodvWBdPA/oxIZe2k0kdWhLPH2jfjUFkCNEvFO8Lm6NMlb3y2J6u68
f/BdaRg35pfH8Kld9PH3T+/CjnC+sMItYTNGUobfrPtSjG5Guq9jxpGY5g0ghw==
MIICBzCCAa6gAwIBAgIJANETiiYG+2A3MAoGCCqGSM49BAMCMFMxGjAYBgNVBAMM
EU1vY2sgRW50cnVzdCByb290MRkwFwYDVQQKDBBNb2NrIEVudHJ1c3Qgb3JnMRow
GAYDVQQLDBFNb2NrIEVudHJ1c3QgdW5pdDAeFw0yMTA0MTUxMDU4NDhaFw0yNDAx
MTAxMDU4NDhaMFMxGjAYBgNVBAMMEU1vY2sgRW50cnVzdCByb290MRkwFwYDVQQK
DBBNb2NrIEVudHJ1c3Qgb3JnMRowGAYDVQQLDBFNb2NrIEVudHJ1c3QgdW5pdDBZ
MBMGByqGSM49AgEGCCqGSM49AwEHA0IABCfScMQ9hW8dPucdSQRuRgXYlhOZXv2Q
8xPVKsSd85kFWIHdoXrxkuCCK0FFrgrcLRKF+kCiCRj2BdsPv/IFJu+jazBpMB0G
A1UdDgQWBBTPeji6D6YLguERtBJSTEGNtj/5YzASBgNVHRMBAf8ECDAGAQH/AgEA
MA4GA1UdDwEB/wQEAwIBBjAkBgNVHR8EHTAbMBmgF6AVhhNleGFtcGxlLmNvbS9j
cmwucGVtMAoGCCqGSM49BAMCA0cAMEQCICc9bGC5PCkcylnzzyUkMTMaAUL0xtwT
cRE1NJPQb2NdAiAA4A1BepiljqWGH3Obt3yydlJZe8/3XTXnjAelRMe7xw==
MIIGcjCCBFqgAwIBAgIQa9BBy5u9d4pHb9yHbMlaTzANBgkqhkiG9w0BAQ0FADCB
wDELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEoMCYGA1UE
CxMfRGVwYXJ0bWVudCBvZiBIb21lbGFuZCBTZWN1cml0eTEvMC0GA1UECxMmVHJh
bnNwb3J0YXRpb24gU2VjdXJpdHkgQWRtaW5pc3RyYXRpb24xIjAgBgNVBAsTGUNl
cnRpZmljYXRpb24gQXV0aG9yaXRpZXMxGDAWBgNVBAMTD1RTQSBOUEUgUm9vdCBD
QTAeFw0yMTEyMDExNTA5MzJaFw0zMTEyMDExNTE5MzBaMIHAMQswCQYDVQQGEwJV
UzEYMBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MSgwJgYDVQQLEx9EZXBhcnRtZW50
IG9mIEhvbWVsYW5kIFNlY3VyaXR5MS8wLQYDVQQLEyZUcmFuc3BvcnRhdGlvbiBT
ZWN1cml0eSBBZG1pbmlzdHJhdGlvbjEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBB
dXRob3JpdGllczEYMBYGA1UEAxMPVFNBIE5QRSBSb290IENBMIICIjANBgkqhkiG
9w0BAQEFAAOCAg8AMIICCgKCAgEArlAUhSW0TdyLfeke9jpAm8IT+qhXCPEZdujO
Kq+xtcTLs5eyzX6B4koPqbrmVE/GV4HM68LEBtAV/SHG0F6Eu5hJnkdIM1gU5ENo
+M3tXbWBiQG9l7RWe0jC93QOlwoN363SqgWGZNyTF1xmWl0twvYfYNkFt+A2Uzwf
MXbExvYEGHqMIoM/mm/VyURS6PmNpzjZcH/yBAEJXYel7Rxd3pLepa0CD5/QpceZ
eDxvoD64P35tF9XbxZFGUIHbjkRTQ9uftyfpFD1tdH4O007G3Gytqwr/pqFeDS9v
PMSzz916JeLlaK1N4d7wP/o3IBov28iPG/3BfDbUEkmxwDRITRUuvY/hBPUH0k66
4H1byQ+TDlUYUIirU+D7ekXUJp84ZSRzcs/gd8J+1JarlmQV1D/rjh/F/p1BKVEj
qxAkMi6rXiYhKFyJfKtEtG+Vbh3/1WxLJrsJouylajMXHGTBDRQLeqCyEXBi5hRI
MG5mp1Y+BSBdXFTfnr9NqzrgpUDEVZ+uFBebFeFNDAvEX8+M6wWSgns/xyOLavYD
pepTX+L7eGqIXa4rEBH+nyLghm+jHT4IwAUYv2+34H2jd11K1rpf9sKNBq15CXwL
NNq6k4TldIXBYTvbsH7vZTORM9UOvbzJgsyL3ng8kuC5UkatQfRUm1sope8o5TU8
+kEMkxUCAwEAAaNmMGQwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0PBAQDAgGG
MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFKALbMWo1GKTakWu0KZDQKEY+TgQ
MBAGCSsGAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQB58QwiIPKZMgm9
1+rz3NO5FzFSmhQqii86roYzw+GBzMXumVw/aNVsR+cqEDFbZgTT0yiQvl4SewAH
2oWs2UYIU8nSA9/NH444wM2vviZ5pGJnh30NMFiSjrEEJZ3pifF0bvOV8N93pTLG
f5MHSd0NfvH7P6Ks28m20mo86/iOTZuvCfaTOl37OirB764zWkPwUG06/XflFNCH
mrrdcDyj6Sa7lNFB/1blEdAz5BeOxwraQJ81vO4n+VV2eDX4vyULaIdV3AaUeJRV
QCinxmF4NOGidBb8GxumJCTYajEbjyumw6yYxBOO7Wsng+O9Lae92AMNTdJFSXVH
/wwMfXbEmYEJSEaQDHwK7s6QZi5+qZ1dAKjLKkRn82u2HlvOPxdEsObEexzw1yHa
eS4jqwAJQVhi54dcU3P/orE3fr9LDe+GsojkUW8bVzNAXi/jdiujhuU4ejKY25PC
RCm8hF+BIOd92LRvGQFQeUFEaqEtJzOI02ila64ZgnhRwiywwWKhVbk00x9wSL+L
5dmeU7bqfHC3NgJamvwqf3SaTO/d+ftpBlrKCAilrDPWgBCNsKoQoaPEqRnTMfjV
iVgBQ7zXjMFdTzC52brPgEIIcYzncJTYqDhme16/LxwpyM9qQ87d5rYnK9JQWVJx
pGq+gU5Td4Ah+apZLks1+zyv9NXA1A==
MIIC+TCCAoCgAwIBAgINAKaLeSkAAAAAUNCR+TAKBggqhkjOPQQDAzCBvzELMAkG
A1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3
d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVu
dHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEzMDEGA1UEAxMq
RW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRUMxMB4XDTEy
MTIxODE1MjUzNloXDTM3MTIxODE1NTUzNlowgb8xCzAJBgNVBAYTAlVTMRYwFAYD
VQQKEw1FbnRydXN0LCBJbmMuMSgwJgYDVQQLEx9TZWUgd3d3LmVudHJ1c3QubmV0
L2xlZ2FsLXRlcm1zMTkwNwYDVQQLEzAoYykgMjAxMiBFbnRydXN0LCBJbmMuIC0g
Zm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxMzAxBgNVBAMTKkVudHJ1c3QgUm9vdCBD
ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEVDMTB2MBAGByqGSM49AgEGBSuBBAAi
A2IABIQTydC6bUF74mzQ61VfZgIaJPRbiWlH47jCffHyAsWfoPZb1YsGGYZPUxBt
ByQnoaD41UcZYUx9ypMn6nQM72+WCf5j7HBdNq1nd67JnXxVRDqiY1Ef9eNi1KlH
Bz7MIKNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
BBYEFLdj5xrdjekIplWDpOBqUEFlEUJJMAoGCCqGSM49BAMDA2cAMGQCMGF52OVC
R98crlOZF7ZvHH3hvxGU0QOIdeSNiaSKd0bebWHvAvX7td/M/k7//qnmpwIwW5nX
hTcGtXsI/esni0qU+eH6p44mCOh8kmhtc9hvJqwhAriZtyZBWyVgrtBIGu4G
legacy-se
external-se
keychain
resident_address
resident_country
resident_postal_code
issuing_authority
driving_privileges
OS_os_transaction
OS_dispatch_source_signal
NSFetchRequestResult
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
@"NSString"16@0:8
OS_dispatch_source
_TtC7idcredd16SELegacyKeystore
Returning empty set data as getOccupiedSlots was called on a Simulator
5a88d182bce5f42efa59943f33359d2e8a968ff289d93e5fa444b624343167feb16e8cf858ddc7690407ba61d4c338237a8cfcf3de6aa672fc60a557aa32fc67
Returning random key as createKey was called on a Simulator
Returning empty data as signDigest was called on a Simulator
Returning empty data as signDigestSidv was called on a Simulator
cannot locate credential 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+Helpers.swift
fetchAndCheckAuthorizationOfCredential(_:context:)
 is not authorized for this session
debug.force-payload-accessible
key is required for 
isPayloadAccessible(payloadProcessorFactory:format:decryptionKey:)
Decryption key required but not available, can't proceed with processing
Credential decryption key does not require auth, can proceed with processing
Credential decryption key requires auth, can't proceed with processing
Payload format %s does not require decryption, can proceed with processing
Treating payload as accessible due to internal defaults setting
Invalid terminal auth
Missing terminal auth
Missing auth data in selection
InvalidSelection
Request decryption failed
Unsupported reader request version
Invalid reader request
Inconsistent stored data
_TtC7idcredd37ISO18013PackageECv3SHPayloadProcessor
payloadData
decryptionKey
iso18013PackagePayloadProcessor
error in decrypting ISO18013 package with ECv3SH format
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackageECv3SHPayloadProcessor.swift
decryptPayload()
_TtC7idcredd18EnvironmentManager
accessQueue
_environment
EnvironmentManager.accessQueue
No environment exists, creating new environment
v8@?0
_TtC7idcredd22BiometricStoreListener
_TtC7idcredd26BiometricStoreSessionProxy
v24@0:8@?16
v40@0:8@16Q24@?32
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
jetsamTransaction
connection
eligibilityHelper
unable to check entitlement because connection is unavailable
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/listeners/BiometricStoreListener.swift
checkBiometricStoreEntitlements()
com.apple.idcredentials.biometrics
Caller missing entitlement for biometrics store
idcredd.BiometricStoreSessionProxy
Failed to initialize BiometricStorage
credentialAuthenticationTokenStatus(_:)
Credential authentication token status: %lu
BiometricStoreSessionProxy credentialAuthenticationTokenStatus
BiometricStoreSessionProxy prearmCredential
BiometricStoreSessionProxy revokeCredentialAuthorizationToken
Failed to generate nonce for authorization token
nonceForAuthorizationToken(completion:)
BiometricStoreSessionProxy nonceForAuthorizationToken
BiometricStoreSessionProxy establishPrearmTrust
Failed to generate phone token
generatePhoneToken(with:keyBlob:pairingID:completion:)
BiometricStoreSessionProxy generatePhoneToken
IDCREDD_GLOBAL_ACL
Failed to fetch auth acl from database
generatePrearmTrustCertificate(withNonce:pairingID:completion:)
Failed to generate prearm trust certificate for watch
BiometricStoreSessionProxy generatePrearmTrustCertificate
BiometricStoreSessionProxy globalAuthACLTemplateUUIDs
BiometricStoreSessionProxy deleteGlobalAuthACL
BiometricStoreSessionProxy globalAuthACL
BiometricStoreSessionProxy setModifiedGlobalAuthACL, modifiedAuthACL = %s
BiometricStoreSessionProxy setGlobalAuthACL, authACL = %s
BiometricStoreSessionProxy passcodeBindingUnboundACL
BiometricStoreSessionProxy bioBindingUnboundACL
Destroying BiometricStoreSessionProxy
Biometric store listener connection received from %d
Biometric store connection interrupted
Biometric store connection invalidated
IdentitySharingSessionProxy
Creating BiometricStoreSessionProxy
com.apple.idcredd.biometrics.xpc
Biometric store listener is started
Biometric store listener is tearing down
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
DCBiometricStoreXPCProtocol
v24@0:8@?<v@?@"NSData"@"NSError">16
v40@0:8@"NSData"16Q24@?<v@?@"NSError">32
v40@0:8@"NSData"16@"NSData"24@?<v@?@"NSArray"@"NSError">32
v24@0:8@?<v@?@"DCCredentialAuthACL"@"NSError">16
v24@0:8@?<v@?@"NSError">16
v24@0:8@?<v@?@"NSArray"@"NSError">16
v48@0:8@"DCCredentialNonce"16@"NSData"24@"NSString"32@?<v@?@"DCCredentialAuthorizationToken"@"NSError">40
v40@0:8@"NSData"16@"NSString"24@?<v@?@"DCCredentialTrust"@"NSError">32
v24@0:8@?<v@?Q@"NSError">16
NSObject
q16@0:8
#16@0:8
@24@0:8:16
DCBioBindingProtocol
v24@0:8@?<v@?@"DCCredentialNonce"@"NSError">16
v32@0:8@"DCCredentialAuthorizationToken"16@?<v@?@"NSError">24
v32@0:8@"DCCredentialTrust"16@?<v@?@"NSError">24
_TtC7idcredd31ISO18013PackagePayloadProcessor
decodedPayload
error getting element identifiers from ISO18013 package
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackagePayloadProcessor.swift
getElementIdentifiersByNamespace()
payload does not have any documents
getElementFallbacks(on:modes:)
org.iso.18013.5.1
Not checking age over fallbacks because payload does not contain age in years element
Falling back from AgeOver to Age
Falling back from %s to age_in_years
Failed to write ISO 18013 payload to disk: %s
Saved ISO 18013 payload to %s
package must contain exactly one document
error getting elements from ISO18013 package
getElements(elementIdentifiers:)
Removing payload element 
Filtering payload using elements 
Getting elements from payload containing elements 
debug.write-decrypted-payload-to-disk
error validating ISO18013 package
validatePayload()
unsupported package version 
issuer auth structure does not contain an MSO payload
unable to decode MSO from issuerAuth
unsupported MSO version 
doc type in issuerAuth must match overall doc type
unsupported digest algorithm 
inconsistent namespace count between mso and document
no device key identifier found in MSO
missing namespace 
inconsistent item count between mso and document for namespace 
inconsistent dictionary key and element identifier for 
inconsistent digest for 
Digests for element %s are inconsistent; computed %s, mso contains %s
 cannot be converted to int
Package does not include an issuer certificate; skipping signature validation
unable to decode issuer certificate data
issuer public key algorithm is not available
issuer public key is not available
unable to validate issuer signature
Issuer signature validation error
Treating issuer certificate validation error as non-fatal due to user defaults setting
org.iso.18013.5.1.mDL
Validating ISO18013 payload 
debug.allow-test-reader-certs
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/ReaderRootCertificates.swift
getTrustedSpecialCaseReaderRoots()
Allowing internal reader authentication roots
debug.log-reader-root-certs
logging root Certs = %s
No new rootCertificates from cached
getAssetOverridesIfAny(for:existingRoots:)
Looking at mobile asset loaded certificates for type : %s
terminalAuthSpecialCaseRoots
terminalAuthRoots
getAssetOverridesIfAny(for:existingRoots:coreIDVAssetData:)
build prefix not available, using default
idcredd/ReaderRootCertificates.swift
prefix = %s
build version = %s
MobileAsset, No deviceType mapped, returning default
MobileAsset, system gave inconsistent buildVersion, using default
MobileAsset, exhausted trying to find a compatible version, returning default
MobileAsset, found an exact match
MobileAsset trying to find asset for %s
MobileAsset, choosing asset from %s
MobileAsset has certificates of keys: %s
ra.allow-external-test-reader-certs
ra.injected-root
getTrustedReaderRoots()
Reader auth root cert injected through user defaults
Allowing external reader authentication test roots
Allowing internal reader authentication test roots
deleteLegacySESlot requires an internal build
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+Debug.swift
emptySEKeySlot(_:)
getLegacySESlots requires an internal build
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/CredentialKeyManager.swift
fetchOccupiedSEKeySlots(seAccessEndpoint:)
getLegacySESlots()
Credential slots: %s
Occupied slots: %s
getPayloads(of:)
Error loading stored payload: %s
Failed to generate payload protection key: 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/GenericPasswordStore.swift
storeKey(_:label:keyProtectionOptions:)
Failed to fetch payload protection key: 
readKey(label:laContext:)
_TtC7idcredd20GenericPasswordStore
Failed to generate payload protection key
createKeyQuery(key:label:keyProtectionOptions:)
Failed to delete payload protection key: 
deleteKey(label:)
_TtC7idcredd19PresentmentListener
@16@0:8
v16@0:8
B32@0:8@16@24
xpcListener
_TtC7idcredd23PresentmentSessionProxy
v48@0:8@16Q24@32@?40
v32@0:8Q16@?24
v32@0:8@16@?24
flow
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/listeners/PresentmentListener.swift
checkEntitlements()
com.apple.idcredentials.presentment
Caller missing entitlement for 
Wildcard partition requires internal build
no partitions set
idcredd.PresentmentSessionProxy
init()
PresentmentSessionProxy buildResponse
PresentmentSessionProxy buildCredentialResponse
PresentmentSessionProxy interpretRequest
PresentmentSessionProxy generateTransportKey
PresentmentSessionProxy configure with partitions %{public}s, presentment type %{public}s
Destroying PresentmentSessionProxy
Presentment listener connection received from %d
Presentment connection interrupted
Presentment connection invalidated
Creating PresentmentSessionProxy
com.apple.idcredd.presentment.xpc
Presentment listener is started
Presentment listener is tearing down
DCPresentmentXPCProtocol
v48@0:8@"NSArray"16Q24@"DCPresentmentSessionOptions"32@?<v@?@"NSError">40
v32@0:8Q16@?<v@?@"NSData"@"NSError">24
v32@0:8@"DCPresentmentRequest"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"DCPresentmentSelection"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"DCPresentmentSelection"16@?<v@?@"DCCredentialResponse"@"NSError">24
_TtC7idcredd25PresentmentSessionCryptor
presentmentType
sessionCryptarch
No presentment options set; using default session encryption
Presentment session is using default session encryption
Presentment session is using UA session encryption
Presentment session has disabled session encryption
session cryptarch is not available
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentSessionCryptor.swift
encryptResponsePayload(_:)
Session encryption is disabled; no need to encrypt response payload
PresentmentSessionCryptor encryptResponsePayload
Encrypted response: 
missing session cryptarch
decryptReaderRequest(sessionEstablishment:sessionTranscriptData:ikm:)
unable to get reader public key from session establishment
unable to set reader remote key
unable to derive session keys
unable to decrypt reader request
Session encryption is disabled; no need to decrypt reader request
PresentmentSessionCryptor decryptReaderRequest
cryptarch is missing a public key
generateTransportKey(specification:privateKeyData:)
unable to generate COSEKey from public key
transport key already generated
ua session encryption does not use a transport key
PresentmentSessionCryptor generateTransportKey
Creating DCCredentialElement from unknown value type for element identifier %s
Key %s in dictionary %s is not a string
Cannot convert value in dictionary %s to hashable
Cannot convert value in array %s to hashable
_TtC7idcredd13CredentialKey
uuid
type
usage
_TtC7idcredd36DeviceIdentityKeyBackedCredentialKey
deviceIdentityKey
_TtC7idcredd13KeySigningKey
_TtC7idcredd19DeviceEncryptionKey
_TtC7idcredd14PresentmentKey
keySlot
publicKeyIdentifier
publicKey
_TtC7idcredd26NewlyCreatedPresentmentKey
creationResult
_TtC7idcredd20PayloadProtectionKey
unable to create COSEKey from public key
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/CredentialKey.swift
error signing digest with key signing key
_TtC7idcredd26PresentmentResponseBuilder
aclFetcher
Device signature with external SE key is not supported; skipping signature
session transcript is not set
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentResponseBuilder.swift
signDeviceSignedDataLegacySE(selection:proposal:sessionTranscript:deviceNamespaceBytes:)
auth data is required to sign with SE
presentment key does not have a key slot
Unknown presentment auth policy
unable to create COSE_Sign1 object
Auth policy is not required; using empty signature
presentment proposal does not have an auth acl
Auth policy is global binding, performing bound signature
Auth policy is biometric or passcode, performing non-bound signature
Signing device authentication with legacy SE key slot %{public}ld, public key identifier %s
Signing device signed data with legacy SE key
PresentmentResponseBuilder signDeviceSignedDataLegacySE
Device authentication signature 
Device authentication digest 
Device authentication data to sign 
Invalid key type for presentment key 
signDeviceSignedData(selection:proposal:sessionTranscript:deviceNamespaceBytes:)
PresentmentResponseBuilder signDeviceSignedData
buildResponsePayloadDeviceSigned(selection:proposal:sessionTranscript:)
Building response payload device signed
PresentmentResponseBuilder buildResponsePayloadDeviceSigned
No device namespaces were provided
Could not convert element %s in namespace %s to codable value
Using device namespaces 
Selection contains device namespaces 
missing credential auth data from proposal
buildResponsePayloadIssuerSigned(proposal:elements:)
proposal missing issuerAuth
Building response payload issuer signed
PresentmentResponseBuilder buildResponsePayloadIssuerSigned
buildResponsePayload(selection:proposal:elements:sessionTranscript:)
PresentmentResponseBuilder buildResponsePayload
HPKE encrytion requires a session transcript
encryptResponseWithHPKEApple(response:selection:sessionTranscript:)
session transcript for HPKE encryption must be an Apple session transcript
missing response encryption certificate chain
unable to decode response encryption certificate chain
response encryption certificate chain does not have a leaf certificate
Unencrypted response: 
loadPayloadDetailsIfNeeded(into:selection:)
Loading payload details for credential %s
Proposal already contains payload details, no need to load them now
PresentmentResponseBuilder loadPayloadDetailsIfNeeded
proposed credential does not exist
Unknown payload protection type
Error initializing payload processor
Payload protection type is payload encryption key
Payload protection type is device encryption key
Payload protection type is standard, extracting elements from credential payload
credential does not have a payload
buildErrorResponse(status:)
PresentmentResponseBuilder buildErrorResponse
selected credential identifier 
 was not proposed
buildCredentialResponse(selection:requestInterpretation:)
proposal does not contain any element information
certificate was revoked and confirmed with the server
PresentmentResponseBuilder.buildCredentialResponse - Successfully built response payload
PresentmentResponseBuilder.buildCredentialResponse - Successfully encrypted response
PresentmentResponseBuilder buildCredentialResponse
No server promise, meaning this passed using the cache, so success
Validating server promise failed with reason %@
No errors were thrown during revocation checking, there is a valid credential
After online revocation checking, the certificate might still be revoked
Checking if the credential is valid after network check
PresentmentResponseBuilder determineElementstoPresent
Elements to present after filtering: 
Selected elements to present: 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+ConsistencyCheck.swift
checkCompleteness(of:)
Credential %s has a payload with empty payload data
Credential %s has a payload without a presentment key
Credential %s does not have any payloads
Presentment key for credential %s does not have an identifier
Presentment key for credential %s does not have a public key identifier
Presentment key for credential %s does not have presentment usage
Presentment keys for credential %s passed completeness check
Presentment key for credential %s does not have a public key
Presentment key %s for credential %s does not exist
Device encryption key for credential %s does not have an identifier
Device encryption key for credential %s does not have a public key identifier
Device encryption key %s for credential %s does not exist in keychain
Device encryption keys for credential %s passed completeness check
Key signing key for credential %s does not have an identifier
Key signing key for credential %s does not have a public key identifier
Key signing key %s for credential %s does not exist in keychain
Key signing keys for credential %s passed completeness check
idcredd/assets/cachedRootCertificates.json
MobileAssetFetch
Error running MobileAssetRefresh
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/background/MobileAssetRefresher.swift
performMACatalogAndCacheRefresh(_:)
no mDL, skipping MobileAssets
rootCertificates.json
cachedRootCertificates.json
Copied Asset to local cache
MobileAsset available at directory %s
Proceeding with fetching MobileAssets
Finished MobileAsset refresh
debug.force-mobileasset-task
hasDriversLicense = %{bool}d
internal setting to force credential present
Error clearing cached assets
clearCachedAssets(_:)
Ignoring error removing cached file: %s
Removed cached file at %s
Ignoring error clearing MobileAssets: %s
Purged MobileAssets
Proceeding with clearing Cached MobileAssets
skipping clearing as we still have mDL 
Finished clear Cached Assets
_TtC7idcredd10ACLFetcher
biometricStorage
appleIDVManager
globalACL
error fetching payload access acl
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/ACLFetcher.swift
payloadAccessACL()
unknown device encryption scenario: 
Phone biometric binding acl requested but no global ACL is set
ACLFetcher payloadAccessACL
error determining device encryption scenario
getPayloadProtectionScenario()
missing encrypted global ACL
Device encryption scenario is unknown (phone)
Device encryption scenario is phonePasscode
Device encryption scenario is phoneBiometricBinding
error fetching device encryption acl
payloadEncryptionKeyACL()
ACLFetcher payloadEncryptionKeyACL
presentmentACL(forPolicy:)
global binding required but missing global auth ACL
Credential uses global binding policy
Credential uses anyBiometricOrPasscode policy
error creating ACL
Unable to create acl data from access control object
createACL(createFlags:requireStockholm:)
encryptedPresentmentACL(forPolicy:)
_TtC7idcredd40ISO18013PackageEncryptedPayloadProcessor
elementIdentifiersByNamespace
Initializing ISO18013PackageEncryptedPayloadProcessor
_TtC7idcredd17CredentialStorage
partitions
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage.swift
getElements(of:elementIdentifiers:authData:)
CredentialStore getElements
credential must be in active state
requireActiveState(credential:)
Failed to initialize payload processor
Credential payload is encrypted but no auth data provided; can't access elements
Attempting to access payload due to internal defaults setting
getPayloadAuthACL(for:)
CredentialStore getPayloadAuthACL
Unknown payload protection type %s
Payload uses key protection: %lu, fetching ACL
Payload uses standard protection, no ACL required
Credential has no payloads, so no payload auth acl
getProperties(of:)
CredentialStore getProperties
setState(of:to:)
CredentialStore setState
Kicking off MobileAssetRefresh
state transition from 
deleteCredential(_:)
CredentialStore deleteCredential
Kicking off MobileAsset clear cache
error deleting payload protection key
deleteDeviceEncryptionKey(uuid:)
error deleting device encryption key
deleteKeySigningKey(uuid:)
error deleting key signing key
error deleting presentment key
 are not authorized for this session
getCredentialIdentifiers(in:docType:)
CredentialStore credentialIdentifiersInPartitionsDocType
getCredentialIdentifiers(in:)
CredentialStore getCredentialIdentifiers
decodePayload(payloadProcessorFactory:encryptedPayload:format:decryptionKey:)
Saving validated payload with format %{public}s, doc type %{public}s, valid from %s, valid until %s
Validating credential payload
Saving validated payload data 
Extracted elementIdentifiersByNamespace 
replacePayload(of:with:format:)
CredentialStore replacePayload
Error while deleting presentment key from database
Error while deleting payload protection key from database
debug.disable-key-rotation
Error while deleting device encryption key from database
ISO18013PackageUndecryptablePayloadProcessor assuming doctype %s
Credential has biometric protection policy; not attempting to validate payload
encryptPayloadWithNewProtectionKey called
Credential payload protection policy: %lu
Credential payload protection policy does not use biometric auth, skipping deletion of device encryption key
cleanupDeviceEncryptionKey(context:credential:deviceEncryptionKeyIdentifier:)
Error while deleting device encryption with identifier: 
Removing device encryption key with identifier: 
cleanupDeviceEncryptionKeys called with key identifier: 
cleanupPayloadProtectionKeys called with nil key identifier, skipping deletion of payload protection keys
cleanupPayloadProtectionKeys(context:credential:payloadProtectionKeyIdentifier:)
Error while deleting payload protection key from keychain with identifier: 
Removing payload protection key with identifier: 
cleanupPayloadProtectionKeys called with key identifier: 
cleanupPresentmentKeys(context:credential:payload:)
Skipping deletion of presentment key with identifier: %s because of invalid keySlot: %ld
Error while deleting presentment key from SE with identifier: 
Removing presentment key with identifier: 
cleanupPresentmentKeys called with device key identifier: 
No presentment key matches payload's device key identifier: 
setPayloadPresentmentKey(credential:payload:deviceKeyIdentifier:)
Skipping presentment key associated because credential auth policy is notRequired
debug.presentment-key-matching-log-only
Allowing payload without matching presentment key due to user defaults setting
On a simulator, fetch the first presentmentkey
setPayloadPresentmentKey called with presentment public key identifier: 
Saving unvalidated payload data 
createCredential(in:options:)
CredentialStore createCredential
debug.force-new-credential-presentment-auth-policy
debug.forced-reader-auth-policy
debug.force-new-credential-payload-protection-policy
CredentialOptions
Create credential options deleteInactiveKeysAfterDays = %{public}ld, deleteIncompleteCredentialAfterDays = %{public}ld, readerAuthenticationPolicy = %{public}s, presentmentAuthPolicy = %{public}s, payloadProtectionPolicy = %{public}s
Forcing payload protection policy to standard due to user defaults settings
Forcing reader auth policy to identity due to user defaults setting
Forcing reader auth policy to none due to user defaults setting
anyBiometricOrPasscode
Forcing credential presentment auth policy to global binding due to user defaults setting
Forcing credential presentment auth policy to any biometric or passcode due to user defaults setting
Forcing credential presentment auth policy to not required due to user defaults setting
_TtC7idcredd16BiometricStorage
Failed to look up credential authentication token:%s
Skipping establishing prearm trust with watch because phone's accessibility is turned %s
establishPrearmTrust called with accessibility enabled: %{bool}d
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/BiometricStorage.swift
savePrearmTrustKey(publicKey:pairingID:)
Trying to persist protected public key: %s for pairingID: %s
Successfully persisted protected public key: %s
prearmCredential(with:)
Failed to prearm watch, unable to fetch protected public key from database
Successfully retrieved persisted protected public key: %s for pairingID: %s
fetchPrearmTrustKey(withPairingID:)
Trying to retrieve persisted protected public key for pairingID: %s
generatePhoneToken(with:keyBlob:)
Failed to fetch acl for phone token
fetchEncryptedAuthACL(withIdentifier:)
generatePrearmTrustCertificate(withNonce:)
fetchAuthACL(withIdentifier:)
setModifiedGlobalAuthACL(data:externalizedLAContext:)
Cannot set modified ACL, no global ACL set.
Modified ACL: %s
setGlobalAuthACL(data:aclType:)
setGlobalAuthACL requiresDoublePress = %{bool,public}d
Persisted ACL: %s
fetchCredentialUUIDsForAuthACL(withIdentifier:)
fetchCredentialUUIDsForAuthACL: No ACL to return
fetchCredentialUUIDsForAuthACL: no bound credential present
fetchCredentialUUIDsForAuthACL: No UUIDs to return
deleteAuthACL(withIdentifier:)
_TtC7idcredd29PresentmentRequestInterpreter
sessionCryptor
identityReaderAuthenticator
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentRequestInterpreter.swift
getProposalElementsWithPayload(requestedElements:namespaces:payloadProcessor:)
Skipping element %s because it has already been seen
Removing element %s from namespace %s due to fallback to %s
getProposalElements: payloadProcessor provided; extracting elements from payload
getProposalElements(namespaces:payloadProcessor:)
PresentmentRequestInterpreter getProposalElements
getProposalElements: no payloadProcessor provided; returning all requested elements
credential does not have a credential identifier
buildProposal(for:requestedDocType:namespaces:requiredPublicKeyIdentifier:sessionReaderAuthenticationPolicy:readerMetadata:)
credential does not have a partition
credential does not have a payload with requested doc type
Not proposing credential %s because its reader authentication policy %{public}s does not match the session's reader authentication policy %{public}s
No presentment key available, skipping credential %s
Not proposing credential %s because it has no elements matching the request
PresentmentRequestInterpreter.buildProposal - Successfully built proposal for request
Proposed credential has auth ACL: %s
Payload protection type is payload protection key
Payload protection type is device encryption key, skipping element extraction
PresentmentRequestInterpreter buildProposal
getPresentmentKey(credential:credentialIdentifier:payload:requiredPublicKeyIdentifier:)
Proposed credential %s has public key identifier %s, public key data = %s
Not proposing credential %s because it does not match required public key identifier %s
payload is missing presentment key
PresentmentRequestInterpreter getPresentmentKey
non-presentment key passed to presentmentKeyFromStoredKey
presentmentKeyFromStoredKey(storedKey:)
stored presentment key does not have an identifier
stored presentment key does not have a public key identifier
invalid key type 
 for stored presentment key
stored presentment key does not have a public key
PresentmentRequestInterpreter findProposals
findProposals(docType:namespaces:requiredPublicKeyIdentifier:readerAuthenticationPolicy:readerMetadata:)
error building proposal; skipping
Found %{public}ld candidate credentials
Did not find any documents with doctype %{public}s in partitions %{public}s
Unknown reader authentication policy: 
performReaderAuth(on:policy:sessionTranscript:)
request missing reader auth data
Encountered error during reader auth
Reader auth failed, treating as non-fatal due to settings
debug.inject-mock-reader-metadata
com.example.mock
Mock Organization
Mock Organizational Unit
request missing session transcript
Performing identity reader authentication policy
Skipping reader authentication because session policy is set to none
PresentmentRequestInterpreter performReaderAuth
Kicking off MobileAssetRefresh on readerAuthenticateErrors
missing session establishment structure from reader request
extractReaderRequest(request:)
missing session transcript data from reader request
could not decode session transcript
unable to decode session establishment
unable to decode reader request
Session transcript is empty
PresentmentRequestInterpreter extractReaderRequest
Reader request intermediate key material: 
Unencrypted reader request: 
Reader request does not contain intermediate key material
Reader request session establishment: 
Session transcript: 
interpretRequest(request:)
invalid reader request version
reader request does not contain any doc requests
PresentmentRequestInterpreter interpretRequest
Failure to generate phone authorization token
Failure to generate nonce on watch
Failure to generate prearm trust key
Missing global auth acl
missing stored doctype
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/database/IDCSEntities.swift
toDCCredentialPayload()
missing stored package
missing stored createdAt
missing stored updatedAt
Failed to decode elementIdentifiersByNamespace
invalid public key
populateFromDeviceIdentityKeyBackedCredentialKey(_:)
setCredentialUUIDs(_:)
getPayloadContents()
missing stored credentialIdentifier
toDCCredentialProperties()
missing stored partition
missing stored options
Credential payload protection key does not have required field; skipping
Credential presentment key does not have required field; skipping
Credential device encryption key does not have required field; skipping
Credential key signing key does not have required field; skipping
Failed to encode elementIdentifiersByNamespace
setElementIdentifiersByNamespace(_:)
credentialUUIDStrings()
Key representation contains 
_TtC7idcredd17IDCSCoreDataStore
idcredd.IDCSCoreDataStore
init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)
idcredd/IDCSCoreDataStore.swift
_TtC7idcredd23CredentialStoreListener
_TtC7idcredd27CredentialStoreSessionProxy
v48@0:8@16@24Q32@?40
v32@0:8q16@?24
storage
API requires internal build
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/listeners/CredentialStoreListener.swift
checkDebugEntitlement()
com.apple.idcredentials.debug
Caller missing debug entitlement
com.apple.idcredentials.storage
idcredd.CredentialStoreSessionProxy
CredentialStoreSessionProxy payloads (debug), credential identifier = %s
CredentialStoreSessionProxy setState, credential identifier = %s
CredentialStoreSessionProxy properties, credential identifier = %s
CredentialStoreSessionProxy deleteCredential, credential identifier = %s
CredentialStoreSessionProxy credentialIdentifiersDocType, partitions = %{public}s
CredentialStoreSessionProxy credentialIdentifiers, partitions = %{public}s
CredentialStoreSessionProxy replacePayload for credential identifier %s (format = %s)
CredentialStoreSessionProxy credentialIdentifierForPublicKeyIdentifier with public key identifier %s
CredentialStoreSessionProxy associateExternalPresentmentKey with credential identifier %s public key identifier %s
CredentialStoreSessionProxy authorizeRemoteKeySigningKey with credential identifier %s
CredentialStoreSessionProxy generatePresentmentKey for credential identifier %s
CredentialStoreSessionProxy generateDeviceEncryptionKey for credential identifier %s
CredentialStoreSessionProxy generateKeySigningKey for credential identifier %s
create credential options: partition = %s, options = (%s)
CredentialStoreSessionProxy createCredential
CredentialStoreSessionProxy configure with partitions %s
Destroying CredentialStoreSessionProxy
credential store listener connection received from %d
credential store connection interrupted
credential store connection invalidated
Creating CredentialStoreSessionProxy
com.apple.idcredd.storage.xpc
Credential store listener is started
Credential store listener is tearing down
DCCredentialStoreXPCProtocol
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"DCCredentialOptions"24@?<v@?@"NSString"@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSDictionary"@"NSError">24
v40@0:8@"NSArray"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"DCCredentialCryptoKey"@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"NSData"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"NSError">32
v32@0:8@"NSData"16@?<v@?@"NSString"@"NSError">24
v48@0:8@"NSString"16@"NSData"24Q32@?<v@?@"NSError">40
v40@0:8@"NSString"16Q24@?<v@?@"NSError">32
v32@0:8@"NSString"16@?<v@?@"DCCredentialProperties"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSData"@"NSError">24
v48@0:8@"NSString"16@"NSDictionary"24@"NSData"32@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"NSString"16@?<v@?Q@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8q16@?<v@?@"NSError">24
_TtC7idcredd17DaemonInitializer
credentialStoreListener
presentmentListener
biometricStoreListener
signalsDispatchQueue
sigtermSource
Setting up listeners
SIGTERM received; shutting down
DaemonInitializer.signals
DaemonInit
com.apple.idcredd.gc
com.apple.idcredd.mafetch
_TtC7idcredd15PresentmentFlow
options
requestInterpreter
responseBuilder
requestInterpretation
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentFlow.swift
PresentmentFlow buildErrorResponse
buildCredentialResponse missing results of interpretRequest; were calls made out of order?
buildCredentialResponse(selection:)
PresentmentFlow buildCredentialResponse
PresentmentFlow interpretRequest
PresentmentFlow generateTransportKey
Presentment session options: %@
PresentmentFlow init with partitions = %s, type = %s
missing reader certs
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/ReaderAuthenticator.swift
Reader certificate is missing a common name
Reader certificate is missing an organization
Verified reader auth signature with reader leaf certificate
Verified reader certificate chain
missing reader leaf cert
^[a-z0-9\-]+\.mdl\.tsa\.dhs\.gov$
idcredd/ReaderAuthenticator.swift
Extracted reader metadata from certificate; common name = 
, organization = 
, organizational unit = 
reader public key is not available
verifySignature(readerCert:)
public key algorithm is not supported
debug.reader-signature-validation-log-only
unable to validate reader auth signature
Ignoring reader signature validation error due to user defaults setting
Verifying reader signature
verifyReaderCertificateChain(readerCerts:rootCerts:specialCaseRootCerts:)
Certificate does not match special case; performing standard validation
Certificate matches special case; skipping further validation
Certificate matches special case; needs server validation
makeServerRequestPromise(oidVerifier:readerCerts:usage:)
Reader certificate might have revoked certificate when making request
certificate does not have authorized common name
Special case certificate validation failed due to error %s
Certificate is valid special case
Special case certificate failed to be verified locally, going to retry based on a server response in the background
Certificate has authorized common name; checking against special case root
Certificate does not have reader auth OID
Certificate has reader auth OID
no reader leaf cert provided
_TtC7idcredd35ISO18013PackageHPKEPayloadProcessor
authenticationContext
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackageHPKEPayloadProcessor.swift
decryptPayloadUsingHPKEWithKeyWrap()
no key to decrypt: expect key id 
pkISm is set; using it for aad
empty digitalId field from decrypted payload
failed to base64 decode the decrypted payload
error in decrypting ISO18013 package with 
_TtC7idcredd30ISO18013PackageAESGCMProcessor
payloadProtectionKey
keyManager
Failed to decrypt payload
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackageAESGCMProcessor.swift
Failed to encrypt payload
encryptPayload()
_TtC7idcredd20CredentialKeyManager
seLegacyKeystore
deviceIdentityKeystore
payloadProtectionKeystore
Failed to fetch payload payload protection Key
fetchPayloadProtectionKey(uuid:laContext:)
error fetching device encryption key
fetchDeviceEncryptionKey(uuid:expectedPublicKeyIdentifier:)
unable to get public key identifier
Fetched key signing key does not have the expected public key identifier
Fetching device encryption key with label %s
error generating device encryption key
generateDeviceEncryptionKey()
Generating device encryption key with label %s
error fetching key signing key
fetchKeySigningKey(uuid:expectedPublicKeyIdentifier:)
Fetching key signing key with label %s
error generating key signing key
generateKeySigningKey()
Generating key signing key with label %s
deletePresentmentKey(in:)
Not trying to delete key in slot %{public}ld because slot is not occupied
SEService's deleteKey not available on a Simulator
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/SELegacyKeystore.swift
Deleting presentment key in slot %{public}ld from SE
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/background/GarbageCollector.swift
markErrorAsGC(_:)
Unable to create IDCSDataContext for garbage collection
Error during garbage collection of incomplete credentials
Error during garbage collection of inactive keys
Error during garbage collection of SE slots
Error during garbage collection of unused device encryption keys
Finished garbage collection
Starting garbage collection
Garbage collecting unused device encryption keys
Error while deleting device encryption key 
Identified device encryption key %s in credential %s for deletion
Garbage collecting orphan SE slots
Occupied SE slots: %{public}s
Error while erasing key slot 
Identified SE key in slot %{public}ld for deletion
Credential SE slots: %s
Garbage collecting inactive presentment keys
Skipping deletion of presentment key %s in credential %s because credential has a payload without an assigned presentment key
Error while deleting key 
Identified presentment key %s in credential %s for deletion
Error while deleting credential 
Garbage collecting incomplete credentials
Identified credential %s for garbage collection
_TtC7idcredd15IDCSDataContext
managedObjectContext
Error deleting prearm trust key: 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/database/IDCSDataContext.swift
deletePrearmTrustKey(withPairingID:)
Error fetching prearm trust key for pairingID 
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
keyType = %@ AND keySlot > 0
unexpected result type
fetchAllSEKeySlots()
usage = %@ and keyType = %@
fetchAllDeviceEncryptionKeys()
keyType = %@ AND payload = nil
fetchAllInactivePresentmentKeys()
fetchCredentialsInStates(_:)
error deleting auth ACL: 
error fetching auth ACL 
publicKeyIdentifier = %@
fetchCredentialIdentifiersForPublicKeyIdentifier(publicKeyIdentifier:)
state = %d AND ANY payloads.docType == %@
fetchActiveCredentialsByDocType(in:docType:)
partition IN %@ AND state = %d AND ANY payloads.docType == %@
error fetching all credentials: 
fetchAllCredentials()
credentialIdentifier = %@
error fetching credential 
fetchCredential(credentialIdentifier:)
StoredCredential
credentialIdentifier
ANY payloads.docType == %@
error fetching credentials: 
fetchCredentialIdentifiers(in:docType:)
partition IN %@ AND ANY payloads.docType == %@
missing partition; skipping
missing credential identifier; skipping
fetchCredentialIdentifiers(in:)
performAndWaitThrowing(_:)
error saving IDCS managed object context: 
SecCertificateRef
appleAccountStatus
cloudContainerState
cloudContainerName
serverRetryAfter
serverSubStatusCode
serverStatusCode
daemonSessionState
B24@0:8@16
error authorizing key signing key
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialKeyAuthorizer.swift
authorizeKeySigningKey(_:)
unable to obtain ksk key identifier
signAuthorization(_:)
Created key authorization %s
Key authorization digest 
Key authorization data to sign 
Key authorization bytes 
error authorizing presentment key
authorizePresentmentKey(_:)
could not create COSEKey from device encryption key
authorizeDeviceEncryptionKey(_:)
error authorizing device encryption key
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+CryptoKeys.swift
getCredentialIdentifier(forPublicKeyIdentifier:)
No credentials found with public key identifier %s
associateExternalPresentmentKey(with:publicKeyIdentifier:)
Public key identifier 
authorizeRemoteKeySigningKey(with:remoteKey:)
no key signing key available to sign
Remote key authorization: 
generatePresentmentKey(for:)
expected presentment key but none available
Presentment key authorization: 
Presentment key encoded public key: 
Presentment keys are unsupported for credential with presentment auth policy 
presentment key was not created
Creating presentment key for auth policy %{public}s
com.apple.idcredd.presentmentKeyMutation
generateDeviceEncryptionKey(for:)
expected device encryption key but none available
invalid COSE key
attestation is nil
Device encryption key authorization: 
Device encryption key encoded public key: 
 referred to device encryption key 
 but no such key exists in keychain
unknown dek credential key usage for 
generateKeySigningKey(for:)
expected key signing key but none available
invalid COSE Key
invalid attestation
Key signing key encoded public key: 
 referred to key signing key 
_TtC7idcredd23PayloadProcessorFactory
unsupported payload format 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/CredentialPayloadProcessor.swift
makePayloadProcessor(for:format:key:authData:)
Key identifier is required for 
makePayloadProcessor for payload format %{public}s
non-encryption key passed to encryptionKeyFromStoredKey
encryptionKeyFromStoredKey(storedKey:)
stored encryption key does not have an identifier
stored encryption key does not have a public key identifier
 for stored encryption key
encryption key is not available
Invalid payload auth
Payload requires auth
No presentment exists matching payload's device key identifier
Invalid issuer auth signature
Invalid credential state transition
Incorrect credential state
Unsupported payload format
Public key identifier already exists
Unknown credential
Not checking for missing elements because document type %s is not supported for analytics
Not processing missing elements due to missing issuer data
currentRunLoop
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
partition
standardUserDefaults
usage
init
dealloc
listener:shouldAcceptNewConnection:
.cxx_destruct
bioBindingUnboundACL:
passcodeBindingUnboundACL:
setGlobalAuthACL:ofType:completion:
setModifiedGlobalAuthACL:externalizedLAContext:completion:
globalAuthACLWithCompletion:
deleteGlobalAuthACLWithCompletion:
globalAuthACLTemplateUUIDsWithCompletion:
generatePrearmTrustCertificateWithNonce:pairingID:completion:
generatePhoneTokenWithNonce:keyBlob:pairingID:completion:
establishPrearmTrust:completion:
nonceForAuthorizationTokenWithCompletion:
revokeCredentialAuthorizationToken:
prearmCredentialWithAuthorizationToken:completion:
credentialAuthenticationTokenStatus:
initWithCredentialNonce:
initWithCredentialAuthorizationToken:pairingID:
aclType
initWithCredentialKeyBlob:baaCertificate:pairingID:isAccessibilityEnabled:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
setInvalidationHandler:
setInterruptionHandler:
resume
processIdentifier
initWithMachServiceName:
setDelegate:
invalidate
defaultManager
URLForDirectory:inDomain:appropriateForURL:create:error:
URLsForDirectory:inDomains:
getSharedInstance
copyAnswer:
stringByReplacingMatchesInString:options:range:withTemplate:
initWithContentsOfURL:options:error:
boolForKey:
stringForKey:
newBackgroundContext
initWithSESlot:isMissing:
keySlot
credentialIdentifier
identifier
initWithSESlot:isMissing:partition:credentialIdentifier:presentmentKeyIdentifier:
configureWithPartitions:presentmentType:options:completion:
generateTransportKeyForSpecification:completion:
interpretRequest:completion:
buildResponseForSelection:completion:
buildCredentialResponseForSelection:completion:
buildErrorResponseWithStatus:completion:
responseData
sessionEncryptionMode
initWithElementIdentifier:
initWithElementIdentifier:dictionaryValue:
initWithElementIdentifier:arrayValue:
initWithElementIdentifier:boolValue:
initWithElementIdentifier:doubleValue:
initWithElementIdentifier:intValue:
initWithElementIdentifier:dateValue:
initWithElementIdentifier:dataValue:
initWithElementIdentifier:stringValue:
stringValue
dataValue
dateValue
numberValue
arrayValue
dictionaryValue
elementIdentifier
numericTypeHint
boolValue
doubleValue
integerValue
responseEncryptionMode
authData
docType
seAccessEndpoint
deviceNamespaces
responseEncryptionCertificateChain
payloadProtectionKey
elements
elementsToPresent
sessionTranscript
initWithResponseData:elementsByNamespace:
state
payloadData
presentmentKey
publicKeyIdentifier
keyType
publicKey
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
credentialState
removeItemAtURL:error:
aclData
protectionType
options
presentmentAuthPolicy
setHasUsablePresentmentAuthPolicy:
setState:
deleteObject:
insertNewObjectForEntityForName:inManagedObjectContext:
setCreatedAt:
setUpdatedAt:
setFormat:
setPayloadData:
setProtectionType:
setDocType:
addPayloadsObject:
setValidFrom:
setValidUntil:
addCryptoKeysObject:
setPayloadProtectionKey:
payloadProtectionPolicy
removeCryptoKeysObject:
setPresentmentKey:
setPartition:
setCredentialIdentifier:
createdAt
setOptions:
setDeleteInactiveKeysAfterDays:
setDeleteIncompleteCredentialAfterDays:
setReaderAuthenticationPolicy:
setPresentmentAuthPolicy:
setPayloadProtectionPolicy:
readerAuthenticationPolicy
deleteInactiveKeysAfterDays
deleteIncompleteCredentialAfterDays
credentialAccessibilityEnabled
credentialBAACertificate
credentialPairingID
setProtectedPublicKey:
setPairingID:
credentialAuthorizationToken
protectedPublicKey
credentialNonce
encryptedACL
initWithData:type:
setEncryptedACL:
setAclType:
setIdentifier:
initWithElementIdentifier:intentToRetain:
elementFallbackModes
initWithCredentialIdentifier:presentmentKeyIdentifier:presentmentPublicKey:partition:docType:elements:authACL:readerIdentifier:readerOrganization:readerOrganizationalUnit:
initWithBytesNoCopy:length:freeWhenDone:
base64EncodedStringWithOptions:
sessionEstablishment
sessionEncryptionIntermediateKeyMaterial
requiredPublicKeyIdentifier
cryptoKeys
format
updatedAt
validFrom
validUntil
setElementIdentifiersByNamespace:
elementIdentifiersByNamespace
payloads
setKeyType:
setUsage:
setPublicKeyIdentifier:
setPublicKey:
setAttestation:
setAttestationSignature:
setKeySlot:
setCredentialUUIDs:
setCredentialState:
setKeySigningKeys:
setDeviceEncryptionKeys:
setPresentmentKeys:
setPayloadProtectionKeys:
setPayloadValidFrom:
setPayloadValidUntil:
credentialUUIDs
bundleForClass:
URLForResource:withExtension:
configureWithPartitions:completion:
createCredentialInPartition:options:completion:
generateKeySigningKeyForCredential:completion:
generateDeviceEncryptionKeyForCredential:completion:
generatePresentmentKeyForCredential:completion:
authorizeRemoteKeySigningKeyWithCredential:remoteKey:completion:
associateExternalPresentmentKeyWithCredential:publicKeyIdentifier:completion:
credentialIdentifierForPublicKeyIdentifier:completion:
replacePayloadOfCredential:withPayload:format:completion:
credentialIdentifiersInPartitions:completion:
credentialIdentifiersInPartitions:docType:completion:
deleteCredential:completion:
propertiesOfCredential:completion:
setStateOfCredential:to:completion:
payloadAuthACLForCredential:completion:
elementsOfCredential:elementIdentifiers:authData:completion:
checkCompletenessOfCredential:completion:
payloadsOfCredential:completion:
allElementsOfCredential:authData:completion:
occupiedLegacySEKeySlotsWithCompletion:
eraseLegacySEKeySlot:completion:
numberOfMatchesInString:options:range:
initWithPattern:options:error:
objectForKey:
initWithBase64EncodedString:options:
UUIDString
credential
initWithEntityName:
setFetchLimit:
setPredicate:
setPropertiesToFetch:
setResultType:
performBlockAndWait:
save:
initWithIdentifier:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:casdSignature:casdAttestation:keyAuthorization:kskAttestation:
initWithIdentifier:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:attestation:keyAuthorization:kskAttestation:
initWithIdentifier:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:attestation:
initWithExternalizedContext:
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
ySiG
_SayABGtG
So17OS_dispatch_queueC
ycSg
ycSg
ycSg
ycSg
So8NSObjectC
So13NSXPCListenerC
So17OS_os_transaction_p
So15NSXPCConnectionCSgXw
SS3key_
5valuetSg
SS3key_
5valuet
SS3key_
G5valuet
SaySSG
SS3key_
G5valuetSg
ySSG
ypSg
SaySo18DCLegacySESlotInfoCG
ShySiG
ShySiGz_Xx
SaySo18DCLegacySESlotInfoCGz_Xx
SaySo19DCCredentialPayloadCG
SaySo19DCCredentialPayloadCGz_Xx
_yptG
ySSSaySSGG
yS2iG
ySSSay
_So29DCPresentmentRequestedElementCtGG
ySSSaySo29DCPresentmentRequestedElementCGG
ySSSay
yS2SG
ySSSaySo19DCCredentialElementCGG
SayABGG
ySSypG
SS_ypt
ySSSDyS2SGG
ySSSDySS
ySSSay
ySS_yptG
_ypt
So27DCPresentmentSessionOptionsCSg
3key_yp5valuetSg
SiSg
ySi_SitG
_A13At
SDySSSDySS
SDySS
SaySo19DCCredentialElementCG
SaySDySSSiGGSg
SDySSSay
GGSg
So22DCPresentmentSelectionC
Sgz_Xx
SDySSSay
GGSgz_Xx
_pSg
SaySo29DCPresentmentRequestedElementCG
So8NSObjectCSg
z_Xx
ySS_SDyS2SGtG
ySS_SStG
SDyS2SG
SDySSSaySSGG
ShySSG
SDySSSay
SDySSSay
GGz_Xx
SDySSSaySSGGSg
Sgz_Xx
So22DCCredentialPropertiesCSg
So22DCCredentialPropertiesCSgz_Xx
ScPSg
ytIeghHr_
SDySSSaySSGGz_Xx
XDXMT
ySS_SaySSGtG
So19DCCredentialOptionsCSg
So21DCPresentmentProposalC
Sgz_Xx
So19DCCredentialAuthACLCSg
So19DCCredentialAuthACLCSgz_Xx
12encryptedACL_SaySSGSg5uuidst
GSgz_Xx
SDySS
_So29DCPresentmentRequestedElementCt
SDySSSDySSSbGG
Gz_Xx
$s7idcredd34GenericPasswordConvertibleProtocolP
So25OS_dispatch_source_signal_pSg
SS3key_
5valuet
$ss27ExpressibleByBooleanLiteralP
SSSg
So9LAContextCSg
ySSGG
ySDySS
GGSg
SDySS
ShySSGz_Xx
So22NSManagedObjectContextC
So20NSFetchRequestResult_p
yypG
yyXlG
SaySuG
ySuG
ySDyS2SGG
_pIegzo_
_pSg
ySo21DCPresentmentProposalCG
ySo18DCLegacySESlotInfoCG
ySo19DCCredentialPayloadCG
ySSG
ySo29DCPresentmentRequestedElementCG
_So29DCPresentmentRequestedElementCtG
ySo19DCCredentialElementCG
ySSSDySS
SSSgz_Xx
SaySSGSg
Sgz_Xx
SaySSGSgz_Xx
z_Xx
Sgz_Xx
Sgz_Xx
$s7idcredd16PayloadProcessorP
SbSSc
SbSS_SStc
RawValue
rawValue
ArrayLiteralElement
Element
keySlot
publicKeyData
casdSignature
attestation
payloadData
decryptionKey
iso18013PackagePayloadProcessor
accessQueue
_environment
dataStore
seLegacyKeystoreFactory
appleIDVManagerFactory
payloadProcessorFactory
genericPasswordStoreFactory
xpcListener
jetsamTransaction
connection
storage
eligibilityHelper
payloadData
decodedPayload
aclData
xpcListener
jetsamTransaction
connection
partitions
flow
presentmentType
options
sessionCryptarch
uuid
type
usage
deviceIdentityKey
keySlot
publicKeyIdentifier
publicKey
creationResult
invalid
legacySE
externalSE
keychain
keySigning
deviceEncryption
deviceEncryptionAuthRequired
presentment
payloadProtection
RawValue
presentmentType
options
sessionCryptor
aclFetcher
biometricStorage
appleIDVManager
globalACL
phoneBiometricBinding
phonePasscode
watchRemoteBiometricBinding
watchPasscode
unknown
elementIdentifiersByNamespace
partitions
proposal
elements
issuerAuth
presentmentKey
presentmentAuthPolicy
appleIDVManager
encryptedACLData
aclType
partitions
sessionCryptor
presentmentType
options
aclFetcher
identityReaderAuthenticator
proposals
sessionTranscriptData
sessionTranscript
xpcListener
jetsamTransaction
connection
partitions
storage
credentialStoreListener
presentmentListener
biometricStoreListener
signalsDispatchQueue
sigtermSource
partitions
presentmentType
biometricStorage
aclFetcher
options
sessionCryptor
requestInterpreter
responseBuilder
requestInterpretation
readerAuth
itemsRequestBytes
sessionTranscript
serverValidationPromise
BooleanLiteralType
notRevoked
possiblyRevoked
commonName
organization
organizationalUnit
waitingForServerValidation
response
payloadData
decryptionKey
authenticationContext
iso18013PackagePayloadProcessor
payloadData
payloadProtectionKey
iso18013PackagePayloadProcessor
keyManager
seLegacyKeystore
deviceIdentityKeystore
payloadProtectionKeystore
managedObjectContext
originalNamespace
originalElementIdentifier
newNamespace
newElement
shouldRemoveFromNamespace
shouldRemoveElement
docType
payloadFormat
payloadData
deviceKeyIdentifier
validFrom
validUntil
analyticsIssuer
elementIdentifier
value
issuerData
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleDevelopmentRegion</key>
<string>en</string>
<key>CFBundleDisplayName</key>
<string>idcredd</string>
<key>CFBundleExecutable</key>
<string>idcredd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.coreidv.idcredd</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>idcredd</string>
<key>CFBundlePackageType</key>
<string>XPC!</string>
<key>CFBundleShortVersionString</key>
<string>5.35.3</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>5.35.3</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>14A6200i</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.0</string>
<key>DTSDKBuild</key>
<string>20A310</string>
<key>DTSDKName</key>
<string>iphonesimulator16.0.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A6200i</string>
<key>MinimumOSVersion</key>
<string>16.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
<key>XPCService</key>
<dict>
<key>ServiceType</key>
<string>Application</string>
</dict>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.coreidv.idcredd</string>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.mobileactivationd.device-identifiers</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.private.appleidv.allow</key>
<true/>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.CoreIDVAssets</string>
</array>
<key>com.apple.private.security.storage.idcredd</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceFaceID</string>
</array>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/usr/libexec/</string>
<string>/private/var/MobileAsset/AssetsV2/com_apple_MobileAsset_CoreIDVAssets/</string>
<string>/var/MobileAsset/AssetsV2/com_apple_MobileAsset_CoreIDVAssets/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/idcredd/</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleIDVUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.mobileactivationd</string>
<string>com.apple.seserviced</string>
<string>com.apple.securityd</string>
<string>com.apple.trustd</string>
<string>com.apple.mobileassetd.v2</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.coreidv.idcredd</string>
</array>
<key>com.apple.seserviced.key</key>
<true/>
<key>com.apple.seserviced.key.legacykey</key>
<true/>
<key>com.apple.sts.xpchelperclient.transceive.proxy.listener</key>
<true/>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
identity
Stockholm
given_name
family_name
portrait
resident_city
resident_state
expiry_date
document_number
age_in_years
birth_date
@(#)PROGRAM:idcredd  PROJECT:CoreIDV-5.35.3
ffffff
DCPresentmentType
SecKey
NSecKeyRef
DCCredentialPayloadFormat
DCCredentialPayloadProtectionType
DCCredentialCryptoKeyType
DCCredentialCryptoKeyUsage
DCCredentialPayloadProtectionPolicy
DCCredentialPresentmentAuthPolicy
DCCredentialReaderAuthenticationPolicy
SecTrust
NSecTrustRef
SecAccessControl
NSecAccessControlRef
CFString
NCFStringRef
DCCredentialState
DCCredentialAuthACLType
SecCertificate
NSecCertificateRef
DCCredentialCompletenessResult
SELegacyKeystore
KeyCreationResult
idcredd
ISO18013PackageECv3SHPayloadProcessor
EnvironmentManager
Environment
BiometricStoreListener
BiometricStoreSessionProxy
ISO18013PackagePayloadProcessor
KeyProtectionOptions
GenericPasswordStore
PresentmentListener
PresentmentSessionProxy
PresentmentSessionCryptor
CredentialKey
DeviceIdentityKeyBackedCredentialKey
KeySigningKey
DeviceEncryptionKey
PresentmentKey
NewlyCreatedPresentmentKey
PayloadProtectionKey
CredentialKeyUsage
CredentialKeyType
PresentmentResponseBuilder
4:@Q
ACLFetcher
PayloadProtectionScenario
ISO18013PackageEncryptedPayloadProcessor
CredentialStorage
PresentmentProposal
BiometricStorage
EncryptedAuthACL
PresentmentRequestInterpreter
PresentmentRequestInterpretation
GenericPasswordConvertibleProtocol
IDCSCoreDataStore
CredentialStoreListener
CredentialStoreSessionProxy
DaemonInitializer
PresentmentFlow
IdentityReaderAuthenticator
ReaderCertificateMetadata
SpecialCaseResponse
ServerRevocationResponse
ISO18013PackageHPKEPayloadProcessor
ISO18013PackageAESGCMProcessor
CredentialKeyManager
"%-15<EILR[cjr{
$'159BJNQYdnw
IDCSDataContext
PayloadProcessorFactory
#-8>
mmGmmQmmmm
mmmmmmmm[emmmmmmmmmmmmmmmmmmmmmmmmo
+39)-/5
umqgy}s
ei{coaw
[A?QEOC;
9=SMY_c
U3a]1g7ei
G/5-k
b\fd==========================================================================================jl^XTtvxph========================================================================================zPZV|R~r`n
.................................................................................
gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
`bdfTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTThjTTTlnTTTTTTTTTTTTTTTTTTTTTTTprTtv
=?ACEGIK
MOQSUW
]_acegikm
oqsuwy{}
qsuwy{}
*,.0
*,.024
PayloadProcessor
PayloadMetadata
ElementFallback
CredentialElement
com.apple.CoreIDV
invalid
dekar
SHA-256
SHA-384
SHA-512
MIICDTCCAbOgAwIBAgIULN3m8pvH7WaG7bK5GwsBuFDN884wCgYIKoZIzj0EAwIw
TzEUMBIGA1UEAwwLUmVhZGVyIHJvb3QxHzAdBgNVBAoMFlJvb3QgdGVzdCBvcmdh
bml6YXRpb24xFjAUBgNVBAsMDVJvb3QgZXN0IHVuaXQwIBcNMjIwMjIxMTcwOTQz
WhgPMjEyMTAxMjgxNzA5NDNaME8xFDASBgNVBAMMC1JlYWRlciByb290MR8wHQYD
VQQKDBZSb290IHRlc3Qgb3JnYW5pemF0aW9uMRYwFAYDVQQLDA1Sb290IGVzdCB1
bml0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErq+tyX/HXtSrbXk6D9QIWcLZ
QQ0JhV2sDVfI8sBmC0/xLTX6MRP1y0Bu/qJF5ty33ure+m2x2wfysJeEJrh3CaNr
MGkwHQYDVR0OBBYEFKE6IgXlrI/qxDuMAI4p6BqJlCndMBIGA1UdEwEB/wQIMAYB
Af8CAQAwDgYDVR0PAQH/BAQDAgEGMCQGA1UdHwQdMBswGaAXoBWGE2V4YW1wbGUu
Y29tL2NybC5wZW0wCgYIKoZIzj0EAwIDSAAwRQIhAOJNQQjruJ/rQ0SQDcKobrwz
HHlRgsyfOQwDC4CYr9g1AiAsyzPVn9ykludYmzu+v/u2xyEIODX1EUsxVyCStYmK
fA==
MIIHejCCBWKgAwIBAgIEU5fxqDANBgkqhkiG9w0BAQsFADCBmjELMAkGA1UEBhMC
VVMxGDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEjMCEGA1UECxMaRGVwYXJ0bWVu
dCBvZiB0aGUgVHJlYXN1cnkxIjAgBgNVBAsTGUNlcnRpZmljYXRpb24gQXV0aG9y
aXRpZXMxKDAmBgNVBAsTH0RldmVsb3BtZW50IFVTIFRyZWFzdXJ5IFJvb3QgQ0Ew
HhcNMTkwNjA0MTIwOTI5WhcNMjkwNjA0MTIzOTI5WjCBkzELMAkGA1UEBhMCVVMx
GDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEoMCYGA1UECxMfRGVwYXJ0bWVudCBv
ZiBIb21lbGFuZCBTZWN1cml0eTEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBBdXRo
b3JpdGllczEcMBoGA1UECxMTRGV2ZWxvcG1lbnQgREhTIENBNDCCASIwDQYJKoZI
hvcNAQEBBQADggEPADCCAQoCggEBAKmi2VCGaLthmLFA97K4b0KhVJ+YZSfMCqGF
BEdn8lMK405Ky89ovIsUZVBBt9w0m1u/vIzI6wlh1LAWgQFScReGMZFcNjcsKnjR
36Awqn94Pub+0X6SH4LWLI5P8pIqCLezM1BFK9we64bXrtLuLLHrsCHRcBaL3Upn
zWOg1Qoe2krnd5hXtRXmHhA8SHz0SjwTDqkhcvwZUPbBnozL4neC2P0MoXDNA7dB
pgxJb/3ENI0T01lsWGFn8nYlJQC9yEbnpdBIc3XeWIOVuivx0/gDGUKjYG3rzztV
W50/3AOwQk3dJ3tpo5KllnrfvgHqrynSkIlus2ekHFNUEUeZ+CUCAwEAAaOCAssw
ggLHMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MIHBBgNVHSAEgbkw
gbYwDAYKYIZIAWUDAgEwCDAMBgpghkgBZQMCATAJMAwGCmCGSAFlAwIBMAowDAYK
YIZIAWUDAgEwCzAMBgpghkgBZQMCATAMMAwGCmCGSAFlAwIBMA0wDAYKYIZIAWUD
AgEwVjAMBgpghkgBZQMCATBiMAwGCmCGSAFlAwIBMG0wDAYKYIZIAWUDAgEwbjAM
BgpghkgBZQMCATBvMAwGCmCGSAFlAwIBMHAwDAYKYIZIAWUDAgEwcTBRBggrBgEF
BQcBAQRFMEMwQQYIKwYBBQUHMAKGNWh0dHA6Ly9kZXZwa2kudHJlYXN1cnkuZ292
L2NhY2VydHNpc3N1ZWR0b2RldnRyY2EucDdjMEcGCCsGAQUFBwELBDswOTA3Bggr
BgEFBQcwBYYraHR0cDovL2RldnBraS50cmVhc3VyeS5nb3YvZGV2ZGhzY2Ffc2lh
LnA3YzCCAQIGA1UdHwSB+jCB9zA9oDugOYY3aHR0cDovL2RldnBraS50cmVhc3Vy
eS5nb3YvRGV2X1VTX1RyZWFzdXJ5X1Jvb3RfQ0ExLmNybDCBtaCBsqCBr6SBrDCB
qTELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEjMCEGA1UE
CxMaRGVwYXJ0bWVudCBvZiB0aGUgVHJlYXN1cnkxIjAgBgNVBAsTGUNlcnRpZmlj
YXRpb24gQXV0aG9yaXRpZXMxKDAmBgNVBAsTH0RldmVsb3BtZW50IFVTIFRyZWFz
dXJ5IFJvb3QgQ0ExDTALBgNVBAMTBENSTDEwHwYDVR0jBBgwFoAULSbP9zlAO622
KdVBbpEqVTJ0X74wHQYDVR0OBBYEFCNHZyVju375a4GrMIB/UR9xFtLtMA0GCSqG
SIb3DQEBCwUAA4ICAQCqfC6hPc98g26veqeBnnZFgbHK1WkJGSVb76/ffWJbVm1D
4d3oH2YPkpaqKBIY8PLYrA+/ussVhPfDcLXdTBFI3V3JERj+LFG3eICyF/fIiGOA
5zsMzSC48DjzzOupW3KOCvVjCjfru8Slu9dc37MVc14ffuJtLgUwAKRbu+7hT3ie
vequ9KNQ9kG6/7h/w9gG3c7HGsbjCEvSn3qWaHYwpUSgZQpurtaJbt8lvcYSKW/n
PWyU3zYA/zLtewkEaenCETCKYzXmRott4FnRqQDLe0WyQnuXQcEZ/26RIpqhJ/3Z
1QlCp3zwzXZcX8ZNTue5KruLXQV0jb0ZAkp3oDApMUvw/MQestAoTZJrEFVTq4xb
ftwKPOEsZxGW7U975U1+cyHPKlJOhZes+Dp5jgXVFU377xgadQOxuG37xgarFvZM
Z7zC10CmSweLQ2BXyxNH+kwS2aTtfaJ1b/ueU4QJ/4w0Os2hfiufF66yULruXfKf
D4Q12ONaFR/TUPBKityLXxGV51XI7dIV5udGVpMyFjsMFNYnmDZ9IMjHtC90kSbC
D87WZa1uRmeodvWBdPA/oxIZe2k0kdWhLPH2jfjUFkCNEvFO8Lm6NMlb3y2J6u68
f/BdaRg35pfH8Kld9PH3T+/CjnC+sMItYTNGUobfrPtSjG5Guq9jxpGY5g0ghw==
MIICBzCCAa6gAwIBAgIJANETiiYG+2A3MAoGCCqGSM49BAMCMFMxGjAYBgNVBAMM
EU1vY2sgRW50cnVzdCByb290MRkwFwYDVQQKDBBNb2NrIEVudHJ1c3Qgb3JnMRow
GAYDVQQLDBFNb2NrIEVudHJ1c3QgdW5pdDAeFw0yMTA0MTUxMDU4NDhaFw0yNDAx
MTAxMDU4NDhaMFMxGjAYBgNVBAMMEU1vY2sgRW50cnVzdCByb290MRkwFwYDVQQK
DBBNb2NrIEVudHJ1c3Qgb3JnMRowGAYDVQQLDBFNb2NrIEVudHJ1c3QgdW5pdDBZ
MBMGByqGSM49AgEGCCqGSM49AwEHA0IABCfScMQ9hW8dPucdSQRuRgXYlhOZXv2Q
8xPVKsSd85kFWIHdoXrxkuCCK0FFrgrcLRKF+kCiCRj2BdsPv/IFJu+jazBpMB0G
A1UdDgQWBBTPeji6D6YLguERtBJSTEGNtj/5YzASBgNVHRMBAf8ECDAGAQH/AgEA
MA4GA1UdDwEB/wQEAwIBBjAkBgNVHR8EHTAbMBmgF6AVhhNleGFtcGxlLmNvbS9j
cmwucGVtMAoGCCqGSM49BAMCA0cAMEQCICc9bGC5PCkcylnzzyUkMTMaAUL0xtwT
cRE1NJPQb2NdAiAA4A1BepiljqWGH3Obt3yydlJZe8/3XTXnjAelRMe7xw==
MIIGcjCCBFqgAwIBAgIQa9BBy5u9d4pHb9yHbMlaTzANBgkqhkiG9w0BAQ0FADCB
wDELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4gR292ZXJubWVudDEoMCYGA1UE
CxMfRGVwYXJ0bWVudCBvZiBIb21lbGFuZCBTZWN1cml0eTEvMC0GA1UECxMmVHJh
bnNwb3J0YXRpb24gU2VjdXJpdHkgQWRtaW5pc3RyYXRpb24xIjAgBgNVBAsTGUNl
cnRpZmljYXRpb24gQXV0aG9yaXRpZXMxGDAWBgNVBAMTD1RTQSBOUEUgUm9vdCBD
QTAeFw0yMTEyMDExNTA5MzJaFw0zMTEyMDExNTE5MzBaMIHAMQswCQYDVQQGEwJV
UzEYMBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MSgwJgYDVQQLEx9EZXBhcnRtZW50
IG9mIEhvbWVsYW5kIFNlY3VyaXR5MS8wLQYDVQQLEyZUcmFuc3BvcnRhdGlvbiBT
ZWN1cml0eSBBZG1pbmlzdHJhdGlvbjEiMCAGA1UECxMZQ2VydGlmaWNhdGlvbiBB
dXRob3JpdGllczEYMBYGA1UEAxMPVFNBIE5QRSBSb290IENBMIICIjANBgkqhkiG
9w0BAQEFAAOCAg8AMIICCgKCAgEArlAUhSW0TdyLfeke9jpAm8IT+qhXCPEZdujO
Kq+xtcTLs5eyzX6B4koPqbrmVE/GV4HM68LEBtAV/SHG0F6Eu5hJnkdIM1gU5ENo
+M3tXbWBiQG9l7RWe0jC93QOlwoN363SqgWGZNyTF1xmWl0twvYfYNkFt+A2Uzwf
MXbExvYEGHqMIoM/mm/VyURS6PmNpzjZcH/yBAEJXYel7Rxd3pLepa0CD5/QpceZ
eDxvoD64P35tF9XbxZFGUIHbjkRTQ9uftyfpFD1tdH4O007G3Gytqwr/pqFeDS9v
PMSzz916JeLlaK1N4d7wP/o3IBov28iPG/3BfDbUEkmxwDRITRUuvY/hBPUH0k66
4H1byQ+TDlUYUIirU+D7ekXUJp84ZSRzcs/gd8J+1JarlmQV1D/rjh/F/p1BKVEj
qxAkMi6rXiYhKFyJfKtEtG+Vbh3/1WxLJrsJouylajMXHGTBDRQLeqCyEXBi5hRI
MG5mp1Y+BSBdXFTfnr9NqzrgpUDEVZ+uFBebFeFNDAvEX8+M6wWSgns/xyOLavYD
pepTX+L7eGqIXa4rEBH+nyLghm+jHT4IwAUYv2+34H2jd11K1rpf9sKNBq15CXwL
NNq6k4TldIXBYTvbsH7vZTORM9UOvbzJgsyL3ng8kuC5UkatQfRUm1sope8o5TU8
+kEMkxUCAwEAAaNmMGQwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0PBAQDAgGG
MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFKALbMWo1GKTakWu0KZDQKEY+TgQ
MBAGCSsGAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBDQUAA4ICAQB58QwiIPKZMgm9
1+rz3NO5FzFSmhQqii86roYzw+GBzMXumVw/aNVsR+cqEDFbZgTT0yiQvl4SewAH
2oWs2UYIU8nSA9/NH444wM2vviZ5pGJnh30NMFiSjrEEJZ3pifF0bvOV8N93pTLG
f5MHSd0NfvH7P6Ks28m20mo86/iOTZuvCfaTOl37OirB764zWkPwUG06/XflFNCH
mrrdcDyj6Sa7lNFB/1blEdAz5BeOxwraQJ81vO4n+VV2eDX4vyULaIdV3AaUeJRV
QCinxmF4NOGidBb8GxumJCTYajEbjyumw6yYxBOO7Wsng+O9Lae92AMNTdJFSXVH
/wwMfXbEmYEJSEaQDHwK7s6QZi5+qZ1dAKjLKkRn82u2HlvOPxdEsObEexzw1yHa
eS4jqwAJQVhi54dcU3P/orE3fr9LDe+GsojkUW8bVzNAXi/jdiujhuU4ejKY25PC
RCm8hF+BIOd92LRvGQFQeUFEaqEtJzOI02ila64ZgnhRwiywwWKhVbk00x9wSL+L
5dmeU7bqfHC3NgJamvwqf3SaTO/d+ftpBlrKCAilrDPWgBCNsKoQoaPEqRnTMfjV
iVgBQ7zXjMFdTzC52brPgEIIcYzncJTYqDhme16/LxwpyM9qQ87d5rYnK9JQWVJx
pGq+gU5Td4Ah+apZLks1+zyv9NXA1A==
MIIC+TCCAoCgAwIBAgINAKaLeSkAAAAAUNCR+TAKBggqhkjOPQQDAzCBvzELMAkG
A1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3
d3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVu
dHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEzMDEGA1UEAxMq
RW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRUMxMB4XDTEy
MTIxODE1MjUzNloXDTM3MTIxODE1NTUzNlowgb8xCzAJBgNVBAYTAlVTMRYwFAYD
VQQKEw1FbnRydXN0LCBJbmMuMSgwJgYDVQQLEx9TZWUgd3d3LmVudHJ1c3QubmV0
L2xlZ2FsLXRlcm1zMTkwNwYDVQQLEzAoYykgMjAxMiBFbnRydXN0LCBJbmMuIC0g
Zm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxMzAxBgNVBAMTKkVudHJ1c3QgUm9vdCBD
ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEVDMTB2MBAGByqGSM49AgEGBSuBBAAi
A2IABIQTydC6bUF74mzQ61VfZgIaJPRbiWlH47jCffHyAsWfoPZb1YsGGYZPUxBt
ByQnoaD41UcZYUx9ypMn6nQM72+WCf5j7HBdNq1nd67JnXxVRDqiY1Ef9eNi1KlH
Bz7MIKNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O
BBYEFLdj5xrdjekIplWDpOBqUEFlEUJJMAoGCCqGSM49BAMDA2cAMGQCMGF52OVC
R98crlOZF7ZvHH3hvxGU0QOIdeSNiaSKd0bebWHvAvX7td/M/k7//qnmpwIwW5nX
hTcGtXsI/esni0qU+eH6p44mCOh8kmhtc9hvJqwhAriZtyZBWyVgrtBIGu4G
legacy-se
external-se
keychain
resident_address
resident_country
resident_postal_code
issuing_authority
driving_privileges
OS_os_transaction
OS_dispatch_source_signal
NSFetchRequestResult
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
@"NSString"16@0:8
OS_dispatch_source
_TtC7idcredd16SELegacyKeystore
Returning empty set data as getOccupiedSlots was called on a Simulator
5a88d182bce5f42efa59943f33359d2e8a968ff289d93e5fa444b624343167feb16e8cf858ddc7690407ba61d4c338237a8cfcf3de6aa672fc60a557aa32fc67
Returning random key as createKey was called on a Simulator
Returning empty data as signDigest was called on a Simulator
Returning empty data as signDigestSidv was called on a Simulator
cannot locate credential 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+Helpers.swift
fetchAndCheckAuthorizationOfCredential(_:context:)
 is not authorized for this session
debug.force-payload-accessible
key is required for 
isPayloadAccessible(payloadProcessorFactory:format:decryptionKey:)
Decryption key required but not available, can't proceed with processing
Credential decryption key does not require auth, can proceed with processing
Credential decryption key requires auth, can't proceed with processing
Payload format %s does not require decryption, can proceed with processing
Treating payload as accessible due to internal defaults setting
Invalid terminal auth
Missing terminal auth
Missing auth data in selection
InvalidSelection
Request decryption failed
Unsupported reader request version
Invalid reader request
Inconsistent stored data
_TtC7idcredd37ISO18013PackageECv3SHPayloadProcessor
payloadData
decryptionKey
iso18013PackagePayloadProcessor
error in decrypting ISO18013 package with ECv3SH format
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackageECv3SHPayloadProcessor.swift
decryptPayload()
_TtC7idcredd18EnvironmentManager
accessQueue
_environment
EnvironmentManager.accessQueue
No environment exists, creating new environment
v8@?0
_TtC7idcredd22BiometricStoreListener
_TtC7idcredd26BiometricStoreSessionProxy
v24@0:8@?16
v40@0:8@16Q24@?32
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
jetsamTransaction
connection
eligibilityHelper
unable to check entitlement because connection is unavailable
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/listeners/BiometricStoreListener.swift
checkBiometricStoreEntitlements()
com.apple.idcredentials.biometrics
Caller missing entitlement for biometrics store
idcredd.BiometricStoreSessionProxy
Failed to initialize BiometricStorage
credentialAuthenticationTokenStatus(_:)
Credential authentication token status: %lu
BiometricStoreSessionProxy credentialAuthenticationTokenStatus
BiometricStoreSessionProxy prearmCredential
BiometricStoreSessionProxy revokeCredentialAuthorizationToken
Failed to generate nonce for authorization token
nonceForAuthorizationToken(completion:)
BiometricStoreSessionProxy nonceForAuthorizationToken
BiometricStoreSessionProxy establishPrearmTrust
Failed to generate phone token
generatePhoneToken(with:keyBlob:pairingID:completion:)
BiometricStoreSessionProxy generatePhoneToken
IDCREDD_GLOBAL_ACL
Failed to fetch auth acl from database
generatePrearmTrustCertificate(withNonce:pairingID:completion:)
Failed to generate prearm trust certificate for watch
BiometricStoreSessionProxy generatePrearmTrustCertificate
BiometricStoreSessionProxy globalAuthACLTemplateUUIDs
BiometricStoreSessionProxy deleteGlobalAuthACL
BiometricStoreSessionProxy globalAuthACL
BiometricStoreSessionProxy setModifiedGlobalAuthACL, modifiedAuthACL = %s
BiometricStoreSessionProxy setGlobalAuthACL, authACL = %s
BiometricStoreSessionProxy passcodeBindingUnboundACL
BiometricStoreSessionProxy bioBindingUnboundACL
Destroying BiometricStoreSessionProxy
Biometric store listener connection received from %d
Biometric store connection interrupted
Biometric store connection invalidated
IdentitySharingSessionProxy
Creating BiometricStoreSessionProxy
com.apple.idcredd.biometrics.xpc
Biometric store listener is started
Biometric store listener is tearing down
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
DCBiometricStoreXPCProtocol
v24@0:8@?<v@?@"NSData"@"NSError">16
v40@0:8@"NSData"16Q24@?<v@?@"NSError">32
v40@0:8@"NSData"16@"NSData"24@?<v@?@"NSArray"@"NSError">32
v24@0:8@?<v@?@"DCCredentialAuthACL"@"NSError">16
v24@0:8@?<v@?@"NSError">16
v24@0:8@?<v@?@"NSArray"@"NSError">16
v48@0:8@"DCCredentialNonce"16@"NSData"24@"NSString"32@?<v@?@"DCCredentialAuthorizationToken"@"NSError">40
v40@0:8@"NSData"16@"NSString"24@?<v@?@"DCCredentialTrust"@"NSError">32
v24@0:8@?<v@?Q@"NSError">16
NSObject
q16@0:8
#16@0:8
@24@0:8:16
DCBioBindingProtocol
v24@0:8@?<v@?@"DCCredentialNonce"@"NSError">16
v32@0:8@"DCCredentialAuthorizationToken"16@?<v@?@"NSError">24
v32@0:8@"DCCredentialTrust"16@?<v@?@"NSError">24
_TtC7idcredd31ISO18013PackagePayloadProcessor
decodedPayload
error getting element identifiers from ISO18013 package
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackagePayloadProcessor.swift
getElementIdentifiersByNamespace()
payload does not have any documents
getElementFallbacks(on:modes:)
org.iso.18013.5.1
Not checking age over fallbacks because payload does not contain age in years element
Falling back from AgeOver to Age
Falling back from %s to age_in_years
Failed to write ISO 18013 payload to disk: %s
Saved ISO 18013 payload to %s
package must contain exactly one document
error getting elements from ISO18013 package
getElements(elementIdentifiers:)
Removing payload element 
Filtering payload using elements 
Getting elements from payload containing elements 
debug.write-decrypted-payload-to-disk
error validating ISO18013 package
validatePayload()
unsupported package version 
issuer auth structure does not contain an MSO payload
unable to decode MSO from issuerAuth
unsupported MSO version 
doc type in issuerAuth must match overall doc type
unsupported digest algorithm 
inconsistent namespace count between mso and document
no device key identifier found in MSO
missing namespace 
inconsistent item count between mso and document for namespace 
inconsistent dictionary key and element identifier for 
inconsistent digest for 
Digests for element %s are inconsistent; computed %s, mso contains %s
 cannot be converted to int
Package does not include an issuer certificate; skipping signature validation
unable to decode issuer certificate data
issuer public key algorithm is not available
issuer public key is not available
unable to validate issuer signature
Issuer signature validation error
Treating issuer certificate validation error as non-fatal due to user defaults setting
org.iso.18013.5.1.mDL
Validating ISO18013 payload 
debug.allow-test-reader-certs
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/ReaderRootCertificates.swift
getTrustedSpecialCaseReaderRoots()
Allowing internal reader authentication roots
debug.log-reader-root-certs
logging root Certs = %s
No new rootCertificates from cached
getAssetOverridesIfAny(for:existingRoots:)
Looking at mobile asset loaded certificates for type : %s
terminalAuthSpecialCaseRoots
terminalAuthRoots
getAssetOverridesIfAny(for:existingRoots:coreIDVAssetData:)
build prefix not available, using default
idcredd/ReaderRootCertificates.swift
prefix = %s
build version = %s
MobileAsset, No deviceType mapped, returning default
MobileAsset, system gave inconsistent buildVersion, using default
MobileAsset, exhausted trying to find a compatible version, returning default
MobileAsset, found an exact match
MobileAsset trying to find asset for %s
MobileAsset, choosing asset from %s
MobileAsset has certificates of keys: %s
ra.allow-external-test-reader-certs
ra.injected-root
getTrustedReaderRoots()
Reader auth root cert injected through user defaults
Allowing external reader authentication test roots
Allowing internal reader authentication test roots
deleteLegacySESlot requires an internal build
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+Debug.swift
emptySEKeySlot(_:)
getLegacySESlots requires an internal build
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/CredentialKeyManager.swift
fetchOccupiedSEKeySlots(seAccessEndpoint:)
getLegacySESlots()
Credential slots: %s
Occupied slots: %s
getPayloads(of:)
Error loading stored payload: %s
Failed to generate payload protection key: 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/GenericPasswordStore.swift
storeKey(_:label:keyProtectionOptions:)
Failed to fetch payload protection key: 
readKey(label:laContext:)
_TtC7idcredd20GenericPasswordStore
Failed to generate payload protection key
createKeyQuery(key:label:keyProtectionOptions:)
Failed to delete payload protection key: 
deleteKey(label:)
_TtC7idcredd19PresentmentListener
@16@0:8
v16@0:8
B32@0:8@16@24
xpcListener
_TtC7idcredd23PresentmentSessionProxy
v48@0:8@16Q24@32@?40
v32@0:8Q16@?24
v32@0:8@16@?24
flow
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/listeners/PresentmentListener.swift
checkEntitlements()
com.apple.idcredentials.presentment
Caller missing entitlement for 
Wildcard partition requires internal build
no partitions set
idcredd.PresentmentSessionProxy
init()
PresentmentSessionProxy buildResponse
PresentmentSessionProxy buildCredentialResponse
PresentmentSessionProxy interpretRequest
PresentmentSessionProxy generateTransportKey
PresentmentSessionProxy configure with partitions %{public}s, presentment type %{public}s
Destroying PresentmentSessionProxy
Presentment listener connection received from %d
Presentment connection interrupted
Presentment connection invalidated
Creating PresentmentSessionProxy
com.apple.idcredd.presentment.xpc
Presentment listener is started
Presentment listener is tearing down
DCPresentmentXPCProtocol
v48@0:8@"NSArray"16Q24@"DCPresentmentSessionOptions"32@?<v@?@"NSError">40
v32@0:8Q16@?<v@?@"NSData"@"NSError">24
v32@0:8@"DCPresentmentRequest"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"DCPresentmentSelection"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"DCPresentmentSelection"16@?<v@?@"DCCredentialResponse"@"NSError">24
_TtC7idcredd25PresentmentSessionCryptor
presentmentType
sessionCryptarch
No presentment options set; using default session encryption
Presentment session is using default session encryption
Presentment session is using UA session encryption
Presentment session has disabled session encryption
session cryptarch is not available
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentSessionCryptor.swift
encryptResponsePayload(_:)
Session encryption is disabled; no need to encrypt response payload
PresentmentSessionCryptor encryptResponsePayload
Encrypted response: 
missing session cryptarch
decryptReaderRequest(sessionEstablishment:sessionTranscriptData:ikm:)
unable to get reader public key from session establishment
unable to set reader remote key
unable to derive session keys
unable to decrypt reader request
Session encryption is disabled; no need to decrypt reader request
PresentmentSessionCryptor decryptReaderRequest
cryptarch is missing a public key
generateTransportKey(specification:privateKeyData:)
unable to generate COSEKey from public key
transport key already generated
ua session encryption does not use a transport key
PresentmentSessionCryptor generateTransportKey
Creating DCCredentialElement from unknown value type for element identifier %s
Key %s in dictionary %s is not a string
Cannot convert value in dictionary %s to hashable
Cannot convert value in array %s to hashable
_TtC7idcredd13CredentialKey
uuid
type
usage
_TtC7idcredd36DeviceIdentityKeyBackedCredentialKey
deviceIdentityKey
_TtC7idcredd13KeySigningKey
_TtC7idcredd19DeviceEncryptionKey
_TtC7idcredd14PresentmentKey
keySlot
publicKeyIdentifier
publicKey
_TtC7idcredd26NewlyCreatedPresentmentKey
creationResult
_TtC7idcredd20PayloadProtectionKey
unable to create COSEKey from public key
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/CredentialKey.swift
error signing digest with key signing key
_TtC7idcredd26PresentmentResponseBuilder
aclFetcher
Device signature with external SE key is not supported; skipping signature
session transcript is not set
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentResponseBuilder.swift
signDeviceSignedDataLegacySE(selection:proposal:sessionTranscript:deviceNamespaceBytes:)
auth data is required to sign with SE
presentment key does not have a key slot
Unknown presentment auth policy
unable to create COSE_Sign1 object
Auth policy is not required; using empty signature
presentment proposal does not have an auth acl
Auth policy is global binding, performing bound signature
Auth policy is biometric or passcode, performing non-bound signature
Signing device authentication with legacy SE key slot %{public}ld, public key identifier %s
Signing device signed data with legacy SE key
PresentmentResponseBuilder signDeviceSignedDataLegacySE
Device authentication signature 
Device authentication digest 
Device authentication data to sign 
Invalid key type for presentment key 
signDeviceSignedData(selection:proposal:sessionTranscript:deviceNamespaceBytes:)
PresentmentResponseBuilder signDeviceSignedData
buildResponsePayloadDeviceSigned(selection:proposal:sessionTranscript:)
Building response payload device signed
PresentmentResponseBuilder buildResponsePayloadDeviceSigned
No device namespaces were provided
Could not convert element %s in namespace %s to codable value
Using device namespaces 
Selection contains device namespaces 
missing credential auth data from proposal
buildResponsePayloadIssuerSigned(proposal:elements:)
proposal missing issuerAuth
Building response payload issuer signed
PresentmentResponseBuilder buildResponsePayloadIssuerSigned
buildResponsePayload(selection:proposal:elements:sessionTranscript:)
PresentmentResponseBuilder buildResponsePayload
HPKE encrytion requires a session transcript
encryptResponseWithHPKEApple(response:selection:sessionTranscript:)
session transcript for HPKE encryption must be an Apple session transcript
missing response encryption certificate chain
unable to decode response encryption certificate chain
response encryption certificate chain does not have a leaf certificate
Unencrypted response: 
loadPayloadDetailsIfNeeded(into:selection:)
Loading payload details for credential %s
Proposal already contains payload details, no need to load them now
PresentmentResponseBuilder loadPayloadDetailsIfNeeded
proposed credential does not exist
Unknown payload protection type
Error initializing payload processor
Payload protection type is payload encryption key
Payload protection type is device encryption key
Payload protection type is standard, extracting elements from credential payload
credential does not have a payload
buildErrorResponse(status:)
PresentmentResponseBuilder buildErrorResponse
selected credential identifier 
 was not proposed
buildCredentialResponse(selection:requestInterpretation:)
proposal does not contain any element information
certificate was revoked and confirmed with the server
PresentmentResponseBuilder.buildCredentialResponse - Successfully built response payload
PresentmentResponseBuilder.buildCredentialResponse - Successfully encrypted response
PresentmentResponseBuilder buildCredentialResponse
No server promise, meaning this passed using the cache, so success
Validating server promise failed with reason %@
No errors were thrown during revocation checking, there is a valid credential
After online revocation checking, the certificate might still be revoked
Checking if the credential is valid after network check
PresentmentResponseBuilder determineElementstoPresent
Elements to present after filtering: 
Selected elements to present: 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+ConsistencyCheck.swift
checkCompleteness(of:)
Credential %s has a payload with empty payload data
Credential %s has a payload without a presentment key
Credential %s does not have any payloads
Presentment key for credential %s does not have an identifier
Presentment key for credential %s does not have a public key identifier
Presentment key for credential %s does not have presentment usage
Presentment keys for credential %s passed completeness check
Presentment key for credential %s does not have a public key
Presentment key %s for credential %s does not exist
Device encryption key for credential %s does not have an identifier
Device encryption key for credential %s does not have a public key identifier
Device encryption key %s for credential %s does not exist in keychain
Device encryption keys for credential %s passed completeness check
Key signing key for credential %s does not have an identifier
Key signing key for credential %s does not have a public key identifier
Key signing key %s for credential %s does not exist in keychain
Key signing keys for credential %s passed completeness check
idcredd/assets/cachedRootCertificates.json
MobileAssetFetch
Error running MobileAssetRefresh
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/background/MobileAssetRefresher.swift
performMACatalogAndCacheRefresh(_:)
no mDL, skipping MobileAssets
rootCertificates.json
cachedRootCertificates.json
Copied Asset to local cache
MobileAsset available at directory %s
Proceeding with fetching MobileAssets
Finished MobileAsset refresh
debug.force-mobileasset-task
hasDriversLicense = %{bool}d
internal setting to force credential present
Error clearing cached assets
clearCachedAssets(_:)
Ignoring error removing cached file: %s
Removed cached file at %s
Ignoring error clearing MobileAssets: %s
Purged MobileAssets
Proceeding with clearing Cached MobileAssets
skipping clearing as we still have mDL 
Finished clear Cached Assets
_TtC7idcredd10ACLFetcher
biometricStorage
appleIDVManager
globalACL
error fetching payload access acl
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/ACLFetcher.swift
payloadAccessACL()
unknown device encryption scenario: 
Phone biometric binding acl requested but no global ACL is set
ACLFetcher payloadAccessACL
error determining device encryption scenario
getPayloadProtectionScenario()
missing encrypted global ACL
Device encryption scenario is unknown (phone)
Device encryption scenario is phonePasscode
Device encryption scenario is phoneBiometricBinding
error fetching device encryption acl
payloadEncryptionKeyACL()
ACLFetcher payloadEncryptionKeyACL
presentmentACL(forPolicy:)
global binding required but missing global auth ACL
Credential uses global binding policy
Credential uses anyBiometricOrPasscode policy
error creating ACL
Unable to create acl data from access control object
createACL(createFlags:requireStockholm:)
encryptedPresentmentACL(forPolicy:)
_TtC7idcredd40ISO18013PackageEncryptedPayloadProcessor
elementIdentifiersByNamespace
Initializing ISO18013PackageEncryptedPayloadProcessor
_TtC7idcredd17CredentialStorage
partitions
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage.swift
getElements(of:elementIdentifiers:authData:)
CredentialStore getElements
credential must be in active state
requireActiveState(credential:)
Failed to initialize payload processor
Credential payload is encrypted but no auth data provided; can't access elements
Attempting to access payload due to internal defaults setting
getPayloadAuthACL(for:)
CredentialStore getPayloadAuthACL
Unknown payload protection type %s
Payload uses key protection: %lu, fetching ACL
Payload uses standard protection, no ACL required
Credential has no payloads, so no payload auth acl
getProperties(of:)
CredentialStore getProperties
setState(of:to:)
CredentialStore setState
Kicking off MobileAssetRefresh
state transition from 
deleteCredential(_:)
CredentialStore deleteCredential
Kicking off MobileAsset clear cache
error deleting payload protection key
deleteDeviceEncryptionKey(uuid:)
error deleting device encryption key
deleteKeySigningKey(uuid:)
error deleting key signing key
error deleting presentment key
 are not authorized for this session
getCredentialIdentifiers(in:docType:)
CredentialStore credentialIdentifiersInPartitionsDocType
getCredentialIdentifiers(in:)
CredentialStore getCredentialIdentifiers
decodePayload(payloadProcessorFactory:encryptedPayload:format:decryptionKey:)
Saving validated payload with format %{public}s, doc type %{public}s, valid from %s, valid until %s
Validating credential payload
Saving validated payload data 
Extracted elementIdentifiersByNamespace 
replacePayload(of:with:format:)
CredentialStore replacePayload
Error while deleting presentment key from database
Error while deleting payload protection key from database
debug.disable-key-rotation
Error while deleting device encryption key from database
ISO18013PackageUndecryptablePayloadProcessor assuming doctype %s
Credential has biometric protection policy; not attempting to validate payload
encryptPayloadWithNewProtectionKey called
Credential payload protection policy: %lu
Credential payload protection policy does not use biometric auth, skipping deletion of device encryption key
cleanupDeviceEncryptionKey(context:credential:deviceEncryptionKeyIdentifier:)
Error while deleting device encryption with identifier: 
Removing device encryption key with identifier: 
cleanupDeviceEncryptionKeys called with key identifier: 
cleanupPayloadProtectionKeys called with nil key identifier, skipping deletion of payload protection keys
cleanupPayloadProtectionKeys(context:credential:payloadProtectionKeyIdentifier:)
Error while deleting payload protection key from keychain with identifier: 
Removing payload protection key with identifier: 
cleanupPayloadProtectionKeys called with key identifier: 
cleanupPresentmentKeys(context:credential:payload:)
Skipping deletion of presentment key with identifier: %s because of invalid keySlot: %ld
Error while deleting presentment key from SE with identifier: 
Removing presentment key with identifier: 
cleanupPresentmentKeys called with device key identifier: 
No presentment key matches payload's device key identifier: 
setPayloadPresentmentKey(credential:payload:deviceKeyIdentifier:)
Skipping presentment key associated because credential auth policy is notRequired
debug.presentment-key-matching-log-only
Allowing payload without matching presentment key due to user defaults setting
On a simulator, fetch the first presentmentkey
setPayloadPresentmentKey called with presentment public key identifier: 
Saving unvalidated payload data 
createCredential(in:options:)
CredentialStore createCredential
debug.force-new-credential-presentment-auth-policy
debug.forced-reader-auth-policy
debug.force-new-credential-payload-protection-policy
CredentialOptions
Create credential options deleteInactiveKeysAfterDays = %{public}ld, deleteIncompleteCredentialAfterDays = %{public}ld, readerAuthenticationPolicy = %{public}s, presentmentAuthPolicy = %{public}s, payloadProtectionPolicy = %{public}s
Forcing payload protection policy to standard due to user defaults settings
Forcing reader auth policy to identity due to user defaults setting
Forcing reader auth policy to none due to user defaults setting
anyBiometricOrPasscode
Forcing credential presentment auth policy to global binding due to user defaults setting
Forcing credential presentment auth policy to any biometric or passcode due to user defaults setting
Forcing credential presentment auth policy to not required due to user defaults setting
_TtC7idcredd16BiometricStorage
Failed to look up credential authentication token:%s
Skipping establishing prearm trust with watch because phone's accessibility is turned %s
establishPrearmTrust called with accessibility enabled: %{bool}d
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/BiometricStorage.swift
savePrearmTrustKey(publicKey:pairingID:)
Trying to persist protected public key: %s for pairingID: %s
Successfully persisted protected public key: %s
prearmCredential(with:)
Failed to prearm watch, unable to fetch protected public key from database
Successfully retrieved persisted protected public key: %s for pairingID: %s
fetchPrearmTrustKey(withPairingID:)
Trying to retrieve persisted protected public key for pairingID: %s
generatePhoneToken(with:keyBlob:)
Failed to fetch acl for phone token
fetchEncryptedAuthACL(withIdentifier:)
generatePrearmTrustCertificate(withNonce:)
fetchAuthACL(withIdentifier:)
setModifiedGlobalAuthACL(data:externalizedLAContext:)
Cannot set modified ACL, no global ACL set.
Modified ACL: %s
setGlobalAuthACL(data:aclType:)
setGlobalAuthACL requiresDoublePress = %{bool,public}d
Persisted ACL: %s
fetchCredentialUUIDsForAuthACL(withIdentifier:)
fetchCredentialUUIDsForAuthACL: No ACL to return
fetchCredentialUUIDsForAuthACL: no bound credential present
fetchCredentialUUIDsForAuthACL: No UUIDs to return
deleteAuthACL(withIdentifier:)
_TtC7idcredd29PresentmentRequestInterpreter
sessionCryptor
identityReaderAuthenticator
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentRequestInterpreter.swift
getProposalElementsWithPayload(requestedElements:namespaces:payloadProcessor:)
Skipping element %s because it has already been seen
Removing element %s from namespace %s due to fallback to %s
getProposalElements: payloadProcessor provided; extracting elements from payload
getProposalElements(namespaces:payloadProcessor:)
PresentmentRequestInterpreter getProposalElements
getProposalElements: no payloadProcessor provided; returning all requested elements
credential does not have a credential identifier
buildProposal(for:requestedDocType:namespaces:requiredPublicKeyIdentifier:sessionReaderAuthenticationPolicy:readerMetadata:)
credential does not have a partition
credential does not have a payload with requested doc type
Not proposing credential %s because its reader authentication policy %{public}s does not match the session's reader authentication policy %{public}s
No presentment key available, skipping credential %s
Not proposing credential %s because it has no elements matching the request
PresentmentRequestInterpreter.buildProposal - Successfully built proposal for request
Proposed credential has auth ACL: %s
Payload protection type is payload protection key
Payload protection type is device encryption key, skipping element extraction
PresentmentRequestInterpreter buildProposal
getPresentmentKey(credential:credentialIdentifier:payload:requiredPublicKeyIdentifier:)
Proposed credential %s has public key identifier %s, public key data = %s
Not proposing credential %s because it does not match required public key identifier %s
payload is missing presentment key
PresentmentRequestInterpreter getPresentmentKey
non-presentment key passed to presentmentKeyFromStoredKey
presentmentKeyFromStoredKey(storedKey:)
stored presentment key does not have an identifier
stored presentment key does not have a public key identifier
invalid key type 
 for stored presentment key
stored presentment key does not have a public key
PresentmentRequestInterpreter findProposals
findProposals(docType:namespaces:requiredPublicKeyIdentifier:readerAuthenticationPolicy:readerMetadata:)
error building proposal; skipping
Found %{public}ld candidate credentials
Did not find any documents with doctype %{public}s in partitions %{public}s
Unknown reader authentication policy: 
performReaderAuth(on:policy:sessionTranscript:)
request missing reader auth data
Encountered error during reader auth
Reader auth failed, treating as non-fatal due to settings
debug.inject-mock-reader-metadata
com.example.mock
Mock Organization
Mock Organizational Unit
request missing session transcript
Performing identity reader authentication policy
Skipping reader authentication because session policy is set to none
PresentmentRequestInterpreter performReaderAuth
Kicking off MobileAssetRefresh on readerAuthenticateErrors
missing session establishment structure from reader request
extractReaderRequest(request:)
missing session transcript data from reader request
could not decode session transcript
unable to decode session establishment
unable to decode reader request
Session transcript is empty
PresentmentRequestInterpreter extractReaderRequest
Reader request intermediate key material: 
Unencrypted reader request: 
Reader request does not contain intermediate key material
Reader request session establishment: 
Session transcript: 
interpretRequest(request:)
invalid reader request version
reader request does not contain any doc requests
PresentmentRequestInterpreter interpretRequest
Failure to generate phone authorization token
Failure to generate nonce on watch
Failure to generate prearm trust key
Missing global auth acl
missing stored doctype
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/database/IDCSEntities.swift
toDCCredentialPayload()
missing stored package
missing stored createdAt
missing stored updatedAt
Failed to decode elementIdentifiersByNamespace
invalid public key
populateFromDeviceIdentityKeyBackedCredentialKey(_:)
setCredentialUUIDs(_:)
getPayloadContents()
missing stored credentialIdentifier
toDCCredentialProperties()
missing stored partition
missing stored options
Credential payload protection key does not have required field; skipping
Credential presentment key does not have required field; skipping
Credential device encryption key does not have required field; skipping
Credential key signing key does not have required field; skipping
Failed to encode elementIdentifiersByNamespace
setElementIdentifiersByNamespace(_:)
credentialUUIDStrings()
Key representation contains 
_TtC7idcredd17IDCSCoreDataStore
idcredd.IDCSCoreDataStore
init(persistentStoreName:modelURL:databaseURL:storeType:urlFileProtection:)
idcredd/IDCSCoreDataStore.swift
_TtC7idcredd23CredentialStoreListener
_TtC7idcredd27CredentialStoreSessionProxy
v48@0:8@16@24Q32@?40
v32@0:8q16@?24
storage
API requires internal build
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/listeners/CredentialStoreListener.swift
checkDebugEntitlement()
com.apple.idcredentials.debug
Caller missing debug entitlement
com.apple.idcredentials.storage
idcredd.CredentialStoreSessionProxy
CredentialStoreSessionProxy payloads (debug), credential identifier = %s
CredentialStoreSessionProxy setState, credential identifier = %s
CredentialStoreSessionProxy properties, credential identifier = %s
CredentialStoreSessionProxy deleteCredential, credential identifier = %s
CredentialStoreSessionProxy credentialIdentifiersDocType, partitions = %{public}s
CredentialStoreSessionProxy credentialIdentifiers, partitions = %{public}s
CredentialStoreSessionProxy replacePayload for credential identifier %s (format = %s)
CredentialStoreSessionProxy credentialIdentifierForPublicKeyIdentifier with public key identifier %s
CredentialStoreSessionProxy associateExternalPresentmentKey with credential identifier %s public key identifier %s
CredentialStoreSessionProxy authorizeRemoteKeySigningKey with credential identifier %s
CredentialStoreSessionProxy generatePresentmentKey for credential identifier %s
CredentialStoreSessionProxy generateDeviceEncryptionKey for credential identifier %s
CredentialStoreSessionProxy generateKeySigningKey for credential identifier %s
create credential options: partition = %s, options = (%s)
CredentialStoreSessionProxy createCredential
CredentialStoreSessionProxy configure with partitions %s
Destroying CredentialStoreSessionProxy
credential store listener connection received from %d
credential store connection interrupted
credential store connection invalidated
Creating CredentialStoreSessionProxy
com.apple.idcredd.storage.xpc
Credential store listener is started
Credential store listener is tearing down
DCCredentialStoreXPCProtocol
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"DCCredentialOptions"24@?<v@?@"NSString"@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSDictionary"@"NSError">24
v40@0:8@"NSArray"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"DCCredentialCryptoKey"@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"NSData"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"NSError">32
v32@0:8@"NSData"16@?<v@?@"NSString"@"NSError">24
v48@0:8@"NSString"16@"NSData"24Q32@?<v@?@"NSError">40
v40@0:8@"NSString"16Q24@?<v@?@"NSError">32
v32@0:8@"NSString"16@?<v@?@"DCCredentialProperties"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSData"@"NSError">24
v48@0:8@"NSString"16@"NSDictionary"24@"NSData"32@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"NSString"16@?<v@?Q@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8q16@?<v@?@"NSError">24
_TtC7idcredd17DaemonInitializer
credentialStoreListener
presentmentListener
biometricStoreListener
signalsDispatchQueue
sigtermSource
Setting up listeners
SIGTERM received; shutting down
DaemonInitializer.signals
DaemonInit
com.apple.idcredd.gc
com.apple.idcredd.mafetch
_TtC7idcredd15PresentmentFlow
options
requestInterpreter
responseBuilder
requestInterpretation
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/presentment/PresentmentFlow.swift
PresentmentFlow buildErrorResponse
buildCredentialResponse missing results of interpretRequest; were calls made out of order?
buildCredentialResponse(selection:)
PresentmentFlow buildCredentialResponse
PresentmentFlow interpretRequest
PresentmentFlow generateTransportKey
Presentment session options: %@
PresentmentFlow init with partitions = %s, type = %s
missing reader certs
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/ReaderAuthenticator.swift
Reader certificate is missing a common name
Reader certificate is missing an organization
Verified reader auth signature with reader leaf certificate
Verified reader certificate chain
missing reader leaf cert
^[a-z0-9\-]+\.mdl\.tsa\.dhs\.gov$
idcredd/ReaderAuthenticator.swift
Extracted reader metadata from certificate; common name = 
, organization = 
, organizational unit = 
reader public key is not available
verifySignature(readerCert:)
public key algorithm is not supported
debug.reader-signature-validation-log-only
unable to validate reader auth signature
Ignoring reader signature validation error due to user defaults setting
Verifying reader signature
verifyReaderCertificateChain(readerCerts:rootCerts:specialCaseRootCerts:)
Certificate does not match special case; performing standard validation
Certificate matches special case; skipping further validation
Certificate matches special case; needs server validation
makeServerRequestPromise(oidVerifier:readerCerts:usage:)
Reader certificate might have revoked certificate when making request
certificate does not have authorized common name
Special case certificate validation failed due to error %s
Certificate is valid special case
Special case certificate failed to be verified locally, going to retry based on a server response in the background
Certificate has authorized common name; checking against special case root
Certificate does not have reader auth OID
Certificate has reader auth OID
no reader leaf cert provided
_TtC7idcredd35ISO18013PackageHPKEPayloadProcessor
authenticationContext
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackageHPKEPayloadProcessor.swift
decryptPayloadUsingHPKEWithKeyWrap()
no key to decrypt: expect key id 
pkISm is set; using it for aad
empty digitalId field from decrypted payload
failed to base64 decode the decrypted payload
error in decrypting ISO18013 package with 
_TtC7idcredd30ISO18013PackageAESGCMProcessor
payloadProtectionKey
keyManager
Failed to decrypt payload
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/ISO18013PackageAESGCMProcessor.swift
Failed to encrypt payload
encryptPayload()
_TtC7idcredd20CredentialKeyManager
seLegacyKeystore
deviceIdentityKeystore
payloadProtectionKeystore
Failed to fetch payload payload protection Key
fetchPayloadProtectionKey(uuid:laContext:)
error fetching device encryption key
fetchDeviceEncryptionKey(uuid:expectedPublicKeyIdentifier:)
unable to get public key identifier
Fetched key signing key does not have the expected public key identifier
Fetching device encryption key with label %s
error generating device encryption key
generateDeviceEncryptionKey()
Generating device encryption key with label %s
error fetching key signing key
fetchKeySigningKey(uuid:expectedPublicKeyIdentifier:)
Fetching key signing key with label %s
error generating key signing key
generateKeySigningKey()
Generating key signing key with label %s
deletePresentmentKey(in:)
Not trying to delete key in slot %{public}ld because slot is not occupied
SEService's deleteKey not available on a Simulator
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/crypto/SELegacyKeystore.swift
Deleting presentment key in slot %{public}ld from SE
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/background/GarbageCollector.swift
markErrorAsGC(_:)
Unable to create IDCSDataContext for garbage collection
Error during garbage collection of incomplete credentials
Error during garbage collection of inactive keys
Error during garbage collection of SE slots
Error during garbage collection of unused device encryption keys
Finished garbage collection
Starting garbage collection
Garbage collecting unused device encryption keys
Error while deleting device encryption key 
Identified device encryption key %s in credential %s for deletion
Garbage collecting orphan SE slots
Occupied SE slots: %{public}s
Error while erasing key slot 
Identified SE key in slot %{public}ld for deletion
Credential SE slots: %s
Garbage collecting inactive presentment keys
Skipping deletion of presentment key %s in credential %s because credential has a payload without an assigned presentment key
Error while deleting key 
Identified presentment key %s in credential %s for deletion
Error while deleting credential 
Garbage collecting incomplete credentials
Identified credential %s for garbage collection
_TtC7idcredd15IDCSDataContext
managedObjectContext
Error deleting prearm trust key: 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/database/IDCSDataContext.swift
deletePrearmTrustKey(withPairingID:)
Error fetching prearm trust key for pairingID 
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
keyType = %@ AND keySlot > 0
unexpected result type
fetchAllSEKeySlots()
usage = %@ and keyType = %@
fetchAllDeviceEncryptionKeys()
keyType = %@ AND payload = nil
fetchAllInactivePresentmentKeys()
fetchCredentialsInStates(_:)
error deleting auth ACL: 
error fetching auth ACL 
publicKeyIdentifier = %@
fetchCredentialIdentifiersForPublicKeyIdentifier(publicKeyIdentifier:)
state = %d AND ANY payloads.docType == %@
fetchActiveCredentialsByDocType(in:docType:)
partition IN %@ AND state = %d AND ANY payloads.docType == %@
error fetching all credentials: 
fetchAllCredentials()
credentialIdentifier = %@
error fetching credential 
fetchCredential(credentialIdentifier:)
StoredCredential
credentialIdentifier
ANY payloads.docType == %@
error fetching credentials: 
fetchCredentialIdentifiers(in:docType:)
partition IN %@ AND ANY payloads.docType == %@
missing partition; skipping
missing credential identifier; skipping
fetchCredentialIdentifiers(in:)
performAndWaitThrowing(_:)
error saving IDCS managed object context: 
SecCertificateRef
appleAccountStatus
cloudContainerState
cloudContainerName
serverRetryAfter
serverSubStatusCode
serverStatusCode
daemonSessionState
B24@0:8@16
error authorizing key signing key
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialKeyAuthorizer.swift
authorizeKeySigningKey(_:)
unable to obtain ksk key identifier
signAuthorization(_:)
Created key authorization %s
Key authorization digest 
Key authorization data to sign 
Key authorization bytes 
error authorizing presentment key
authorizePresentmentKey(_:)
could not create COSEKey from device encryption key
authorizeDeviceEncryptionKey(_:)
error authorizing device encryption key
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/CredentialStorage+CryptoKeys.swift
getCredentialIdentifier(forPublicKeyIdentifier:)
No credentials found with public key identifier %s
associateExternalPresentmentKey(with:publicKeyIdentifier:)
Public key identifier 
authorizeRemoteKeySigningKey(with:remoteKey:)
no key signing key available to sign
Remote key authorization: 
generatePresentmentKey(for:)
expected presentment key but none available
Presentment key authorization: 
Presentment key encoded public key: 
Presentment keys are unsupported for credential with presentment auth policy 
presentment key was not created
Creating presentment key for auth policy %{public}s
com.apple.idcredd.presentmentKeyMutation
generateDeviceEncryptionKey(for:)
expected device encryption key but none available
invalid COSE key
attestation is nil
Device encryption key authorization: 
Device encryption key encoded public key: 
 referred to device encryption key 
 but no such key exists in keychain
unknown dek credential key usage for 
generateKeySigningKey(for:)
expected key signing key but none available
invalid COSE Key
invalid attestation
Key signing key encoded public key: 
 referred to key signing key 
_TtC7idcredd23PayloadProcessorFactory
unsupported payload format 
/Library/Caches/com.apple.xbs/Sources/CoreIDV_Sim/idcredd/storage/PayloadProcessor/CredentialPayloadProcessor.swift
makePayloadProcessor(for:format:key:authData:)
Key identifier is required for 
makePayloadProcessor for payload format %{public}s
non-encryption key passed to encryptionKeyFromStoredKey
encryptionKeyFromStoredKey(storedKey:)
stored encryption key does not have an identifier
stored encryption key does not have a public key identifier
 for stored encryption key
encryption key is not available
Invalid payload auth
Payload requires auth
No presentment exists matching payload's device key identifier
Invalid issuer auth signature
Invalid credential state transition
Incorrect credential state
Unsupported payload format
Public key identifier already exists
Unknown credential
Not checking for missing elements because document type %s is not supported for analytics
Not processing missing elements due to missing issuer data
currentRunLoop
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
partition
standardUserDefaults
usage
init
dealloc
listener:shouldAcceptNewConnection:
.cxx_destruct
bioBindingUnboundACL:
passcodeBindingUnboundACL:
setGlobalAuthACL:ofType:completion:
setModifiedGlobalAuthACL:externalizedLAContext:completion:
globalAuthACLWithCompletion:
deleteGlobalAuthACLWithCompletion:
globalAuthACLTemplateUUIDsWithCompletion:
generatePrearmTrustCertificateWithNonce:pairingID:completion:
generatePhoneTokenWithNonce:keyBlob:pairingID:completion:
establishPrearmTrust:completion:
nonceForAuthorizationTokenWithCompletion:
revokeCredentialAuthorizationToken:
prearmCredentialWithAuthorizationToken:completion:
credentialAuthenticationTokenStatus:
initWithCredentialNonce:
initWithCredentialAuthorizationToken:pairingID:
aclType
initWithCredentialKeyBlob:baaCertificate:pairingID:isAccessibilityEnabled:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
setInvalidationHandler:
setInterruptionHandler:
resume
processIdentifier
initWithMachServiceName:
setDelegate:
invalidate
defaultManager
URLForDirectory:inDomain:appropriateForURL:create:error:
URLsForDirectory:inDomains:
getSharedInstance
copyAnswer:
stringByReplacingMatchesInString:options:range:withTemplate:
initWithContentsOfURL:options:error:
boolForKey:
stringForKey:
newBackgroundContext
initWithSESlot:isMissing:
keySlot
credentialIdentifier
identifier
initWithSESlot:isMissing:partition:credentialIdentifier:presentmentKeyIdentifier:
configureWithPartitions:presentmentType:options:completion:
generateTransportKeyForSpecification:completion:
interpretRequest:completion:
buildResponseForSelection:completion:
buildCredentialResponseForSelection:completion:
buildErrorResponseWithStatus:completion:
responseData
sessionEncryptionMode
initWithElementIdentifier:
initWithElementIdentifier:dictionaryValue:
initWithElementIdentifier:arrayValue:
initWithElementIdentifier:boolValue:
initWithElementIdentifier:doubleValue:
initWithElementIdentifier:intValue:
initWithElementIdentifier:dateValue:
initWithElementIdentifier:dataValue:
initWithElementIdentifier:stringValue:
stringValue
dataValue
dateValue
numberValue
arrayValue
dictionaryValue
elementIdentifier
numericTypeHint
boolValue
doubleValue
integerValue
responseEncryptionMode
authData
docType
seAccessEndpoint
deviceNamespaces
responseEncryptionCertificateChain
payloadProtectionKey
elements
elementsToPresent
sessionTranscript
initWithResponseData:elementsByNamespace:
state
payloadData
presentmentKey
publicKeyIdentifier
keyType
publicKey
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
credentialState
removeItemAtURL:error:
aclData
protectionType
options
presentmentAuthPolicy
setHasUsablePresentmentAuthPolicy:
setState:
deleteObject:
insertNewObjectForEntityForName:inManagedObjectContext:
setCreatedAt:
setUpdatedAt:
setFormat:
setPayloadData:
setProtectionType:
setDocType:
addPayloadsObject:
setValidFrom:
setValidUntil:
addCryptoKeysObject:
setPayloadProtectionKey:
payloadProtectionPolicy
removeCryptoKeysObject:
setPresentmentKey:
setPartition:
setCredentialIdentifier:
createdAt
setOptions:
setDeleteInactiveKeysAfterDays:
setDeleteIncompleteCredentialAfterDays:
setReaderAuthenticationPolicy:
setPresentmentAuthPolicy:
setPayloadProtectionPolicy:
readerAuthenticationPolicy
deleteInactiveKeysAfterDays
deleteIncompleteCredentialAfterDays
credentialAccessibilityEnabled
credentialBAACertificate
credentialPairingID
setProtectedPublicKey:
setPairingID:
credentialAuthorizationToken
protectedPublicKey
credentialNonce
encryptedACL
initWithData:type:
setEncryptedACL:
setAclType:
setIdentifier:
initWithElementIdentifier:intentToRetain:
elementFallbackModes
initWithCredentialIdentifier:presentmentKeyIdentifier:presentmentPublicKey:partition:docType:elements:authACL:readerIdentifier:readerOrganization:readerOrganizationalUnit:
initWithBytesNoCopy:length:freeWhenDone:
base64EncodedStringWithOptions:
sessionEstablishment
sessionEncryptionIntermediateKeyMaterial
requiredPublicKeyIdentifier
cryptoKeys
format
updatedAt
validFrom
validUntil
setElementIdentifiersByNamespace:
elementIdentifiersByNamespace
payloads
setKeyType:
setUsage:
setPublicKeyIdentifier:
setPublicKey:
setAttestation:
setAttestationSignature:
setKeySlot:
setCredentialUUIDs:
setCredentialState:
setKeySigningKeys:
setDeviceEncryptionKeys:
setPresentmentKeys:
setPayloadProtectionKeys:
setPayloadValidFrom:
setPayloadValidUntil:
credentialUUIDs
bundleForClass:
URLForResource:withExtension:
configureWithPartitions:completion:
createCredentialInPartition:options:completion:
generateKeySigningKeyForCredential:completion:
generateDeviceEncryptionKeyForCredential:completion:
generatePresentmentKeyForCredential:completion:
authorizeRemoteKeySigningKeyWithCredential:remoteKey:completion:
associateExternalPresentmentKeyWithCredential:publicKeyIdentifier:completion:
credentialIdentifierForPublicKeyIdentifier:completion:
replacePayloadOfCredential:withPayload:format:completion:
credentialIdentifiersInPartitions:completion:
credentialIdentifiersInPartitions:docType:completion:
deleteCredential:completion:
propertiesOfCredential:completion:
setStateOfCredential:to:completion:
payloadAuthACLForCredential:completion:
elementsOfCredential:elementIdentifiers:authData:completion:
checkCompletenessOfCredential:completion:
payloadsOfCredential:completion:
allElementsOfCredential:authData:completion:
occupiedLegacySEKeySlotsWithCompletion:
eraseLegacySEKeySlot:completion:
numberOfMatchesInString:options:range:
initWithPattern:options:error:
objectForKey:
initWithBase64EncodedString:options:
UUIDString
credential
initWithEntityName:
setFetchLimit:
setPredicate:
setPropertiesToFetch:
setResultType:
performBlockAndWait:
save:
initWithIdentifier:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:casdSignature:casdAttestation:keyAuthorization:kskAttestation:
initWithIdentifier:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:attestation:keyAuthorization:kskAttestation:
initWithIdentifier:publicKeyIdentifier:publicKeyCOSEKey:keyType:keyUsage:attestation:
initWithExternalizedContext:
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
ySiG
_SayABGtG
So17OS_dispatch_queueC
ycSg
ycSg
ycSg
ycSg
So8NSObjectC
So13NSXPCListenerC
So17OS_os_transaction_p
So15NSXPCConnectionCSgXw
SS3key_
5valuetSg
SS3key_
5valuet
SS3key_
G5valuet
SaySSG
SS3key_
G5valuetSg
ySSG
ypSg
SaySo18DCLegacySESlotInfoCG
ShySiG
ShySiGz_Xx
SaySo18DCLegacySESlotInfoCGz_Xx
SaySo19DCCredentialPayloadCG
SaySo19DCCredentialPayloadCGz_Xx
_yptG
ySSSaySSGG
yS2iG
ySSSay
_So29DCPresentmentRequestedElementCtGG
ySSSaySo29DCPresentmentRequestedElementCGG
ySSSay
yS2SG
ySSSaySo19DCCredentialElementCGG
SayABGG
ySSypG
SS_ypt
ySSSDyS2SGG
ySSSDySS
ySSSay
ySS_yptG
_ypt
So27DCPresentmentSessionOptionsCSg
3key_yp5valuetSg
SiSg
ySi_SitG
_A13At
SDySSSDySS
SDySS
SaySo19DCCredentialElementCG
SaySDySSSiGGSg
SDySSSay
GGSg
So22DCPresentmentSelectionC
Sgz_Xx
SDySSSay
GGSgz_Xx
_pSg
SaySo29DCPresentmentRequestedElementCG
So8NSObjectCSg
z_Xx
ySS_SDyS2SGtG
ySS_SStG
SDyS2SG
SDySSSaySSGG
ShySSG
SDySSSay
SDySSSay
GGz_Xx
SDySSSaySSGGSg
Sgz_Xx
So22DCCredentialPropertiesCSg
So22DCCredentialPropertiesCSgz_Xx
ScPSg
ytIeghHr_
SDySSSaySSGGz_Xx
XDXMT
ySS_SaySSGtG
So19DCCredentialOptionsCSg
So21DCPresentmentProposalC
Sgz_Xx
So19DCCredentialAuthACLCSg
So19DCCredentialAuthACLCSgz_Xx
12encryptedACL_SaySSGSg5uuidst
GSgz_Xx
SDySS
_So29DCPresentmentRequestedElementCt
SDySSSDySSSbGG
Gz_Xx
$s7idcredd34GenericPasswordConvertibleProtocolP
So25OS_dispatch_source_signal_pSg
SS3key_
5valuet
$ss27ExpressibleByBooleanLiteralP
SSSg
So9LAContextCSg
ySSGG
ySDySS
GGSg
SDySS
ShySSGz_Xx
So22NSManagedObjectContextC
So20NSFetchRequestResult_p
yypG
yyXlG
SaySuG
ySuG
ySDyS2SGG
_pIegzo_
_pSg
ySo21DCPresentmentProposalCG
ySo18DCLegacySESlotInfoCG
ySo19DCCredentialPayloadCG
ySSG
ySo29DCPresentmentRequestedElementCG
_So29DCPresentmentRequestedElementCtG
ySo19DCCredentialElementCG
ySSSDySS
SSSgz_Xx
SaySSGSg
Sgz_Xx
SaySSGSgz_Xx
z_Xx
Sgz_Xx
Sgz_Xx
$s7idcredd16PayloadProcessorP
SbSSc
SbSS_SStc
RawValue
rawValue
ArrayLiteralElement
Element
keySlot
publicKeyData
casdSignature
attestation
payloadData
decryptionKey
iso18013PackagePayloadProcessor
accessQueue
_environment
dataStore
seLegacyKeystoreFactory
appleIDVManagerFactory
payloadProcessorFactory
genericPasswordStoreFactory
xpcListener
jetsamTransaction
connection
storage
eligibilityHelper
payloadData
decodedPayload
aclData
xpcListener
jetsamTransaction
connection
partitions
flow
presentmentType
options
sessionCryptarch
uuid
type
usage
deviceIdentityKey
keySlot
publicKeyIdentifier
publicKey
creationResult
invalid
legacySE
externalSE
keychain
keySigning
deviceEncryption
deviceEncryptionAuthRequired
presentment
payloadProtection
RawValue
presentmentType
options
sessionCryptor
aclFetcher
biometricStorage
appleIDVManager
globalACL
phoneBiometricBinding
phonePasscode
watchRemoteBiometricBinding
watchPasscode
unknown
elementIdentifiersByNamespace
partitions
proposal
elements
issuerAuth
presentmentKey
presentmentAuthPolicy
appleIDVManager
encryptedACLData
aclType
partitions
sessionCryptor
presentmentType
options
aclFetcher
identityReaderAuthenticator
proposals
sessionTranscriptData
sessionTranscript
xpcListener
jetsamTransaction
connection
partitions
storage
credentialStoreListener
presentmentListener
biometricStoreListener
signalsDispatchQueue
sigtermSource
partitions
presentmentType
biometricStorage
aclFetcher
options
sessionCryptor
requestInterpreter
responseBuilder
requestInterpretation
readerAuth
itemsRequestBytes
sessionTranscript
serverValidationPromise
BooleanLiteralType
notRevoked
possiblyRevoked
commonName
organization
organizationalUnit
waitingForServerValidation
response
payloadData
decryptionKey
authenticationContext
iso18013PackagePayloadProcessor
payloadData
payloadProtectionKey
iso18013PackagePayloadProcessor
keyManager
seLegacyKeystore
deviceIdentityKeystore
payloadProtectionKeystore
managedObjectContext
originalNamespace
originalElementIdentifier
newNamespace
newElement
shouldRemoveFromNamespace
shouldRemoveElement
docType
payloadFormat
payloadData
deviceKeyIdentifier
validFrom
validUntil
analyticsIssuer
elementIdentifier
value
issuerData
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleDevelopmentRegion</key>
<string>en</string>
<key>CFBundleDisplayName</key>
<string>idcredd</string>
<key>CFBundleExecutable</key>
<string>idcredd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.coreidv.idcredd</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>idcredd</string>
<key>CFBundlePackageType</key>
<string>XPC!</string>
<key>CFBundleShortVersionString</key>
<string>5.35.3</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>5.35.3</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>14A6200i</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.0</string>
<key>DTSDKBuild</key>
<string>20A310</string>
<key>DTSDKName</key>
<string>iphonesimulator16.0.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A6200i</string>
<key>MinimumOSVersion</key>
<string>16.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
<key>XPCService</key>
<dict>
<key>ServiceType</key>
<string>Application</string>
</dict>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.coreidv.idcredd</string>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.mobileactivationd.device-identifiers</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.private.appleidv.allow</key>
<true/>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.CoreIDVAssets</string>
</array>
<key>com.apple.private.security.storage.idcredd</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceFaceID</string>
</array>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/usr/libexec/</string>
<string>/private/var/MobileAsset/AssetsV2/com_apple_MobileAsset_CoreIDVAssets/</string>
<string>/var/MobileAsset/AssetsV2/com_apple_MobileAsset_CoreIDVAssets/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/idcredd/</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleIDVUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.mobileactivationd</string>
<string>com.apple.seserviced</string>
<string>com.apple.securityd</string>
<string>com.apple.trustd</string>
<string>com.apple.mobileassetd.v2</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.coreidv.idcredd</string>
</array>
<key>com.apple.seserviced.key</key>
<true/>
<key>com.apple.seserviced.key.legacykey</key>
<true/>
<key>com.apple.sts.xpchelperclient.transceive.proxy.listener</key>
<true/>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
identity
Stockholm
given_name
family_name
portrait
resident_city
resident_state
expiry_date
document_number
age_in_years
birth_date
