initWithAccount:
setConsumer:
bumpRefreshReason:
alloc
initForLaunchingWithAccount:
isWaitingForPassword
account
accountDescription
shouldAutodiscoverAccountProperties
discoverInitialPropertiesWithConsumer:
_refresh
setFullRefresh:
_validateAndSync
sharedManager
rem_localDBWatcher
isMonitoring
reallyRefresh
registerConcernedRemindersParty:withChangedBlock:
domain
isEqualToString:
code
setIsWaitingForPassword:
handleValidationError:completion:
setShouldDoInitialAutodiscovery:
saveAccountProperties
setSafeToRefresh:
setSyncWhenReachable:
enabledForDADataclass:
setIsMonitoring:
observeReachabilityWithBlock:
shouldDoInitialAutodiscovery
_setupNotifications
stopObservingReachability
removeConcernedRemindersParty:
cancelRefreshWithCompletion:
launchingAgentWithAccount:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
account:isValid:validationError:
startMonitoring
requestAgentStopMonitoringWithCompletionBlock:
refreshDidCompleteWithError:
refreshFolderListRequireChangedFolders:isUserRequested:
syncFolderIDs:forDataclasses:isUserRequested:
rem_storeProvider
rem_storeForDataAccess
rem_saveRequestForDataAccess
rem_store
accountID
fetchAccountWithExternalIdentifier:error:
rem_account
objectID
initWithAccountID:remAccountObjectID:accountDescription:
sharedBabysitter
giveAccountWithIDAnotherChance:
rem_saveRequest
rem_provideAccountInfo
_debug_resetBabysitterWithRestrictedAccountID:
init
stringWithFormat:
loggingDescription
rem_accountObjectID
.cxx_destruct
setAccountID:
setRem_accountObjectID:
setAccountDescription:
_accountID
_rem_accountObjectID
_accountDescription
initWithBackingAccountInfo:
copy
hostFromDataclassPropertiesForDataclass:
host
useSSLFromDataclassPropertiesForDataclass:
portFromDataclassPropertiesForDataclass:
principalURL
addUsernameToURL:
backingAccountInfo
parentAccount
dataclassProperties
saveVerifiedAccount:withCompletionHandler:
aa_updatePropertiesForAppleAccount:completion:
additionalHeaderValues
mainPrincipal
APSEnv
pushTokenForEnvironment:
length
mutableCopy
da_lowercaseHexStringWithoutSpaces
setValue:forKey:
initWithIdentifier:
setHost:
setUseSSL:
useSSL
setPort:
port
noteHomeSetOnDifferentHost:
shouldHandleHTTPCookiesForURL:
shouldSendClientInfoHeaderForURL:
shouldUseCalendarHomeSyncReport
supportsReminders
getAppleIDSession
_host
_useSSL
_port
totalBytesReceived
_didShowProgressDownloadedByteCount:
connection:didReceiveData:
addEntriesFromDictionary:
previousETag
setObject:forKeyedSubscript:
downloader
setDownloader:
setPreviousETag:
_downloader
_previousETag
UTF8String
shutdown
dealloc
addObject:
removeObject:
count
cancelAllTasks
_didFinishDownloadingWithError:
responseHeaders
DAObjectForKeyCaseInsensitive:
longLongValue
_saveAttachmentDataToDatabase
countByEnumeratingWithState:objects:count:
downloadProgressDownloadedByteCount:totalByteCount:
downloadFinishedError:
_attachmentDownloadDidFinish:
progressQueue
waiterID
task:didFinishWithError:
initWithAttachmentUUID:forAccount:
addConsumer:
removeConsumer:
beginDownload
_reallyBeginDownload
cancelDownload
attachmentUUID
consumers
_waiterID
_account
_consumers
_attachmentUUID
_attachmentURL
_attachmentSize
_attachmentType
_localFilename
_etag
_taskManager
_waitingForGatekeeper
_holdingGatekeeperLock
initWithAttachmentUUID:consumer:
contextWithAttachmentUUID:consumer:
consumer
setAttachmentUUID:
_consumer
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
attachmentDownloadsByAttachmentUUID
objectForKeyedSubscript:
removeObjectForKey:
errorWithDomain:code:userInfo:
removeAllObjects
beginDownloadingAttachmentWithUUID:consumer:
cancelDownloadingInstance:error:
cancelAllAttachmentDownloads
useThunderhillBetaServers
_rem_updateAccountProperties
da_newGUID
initWithFormat:
transactionId
sharedGateKeeper
_reallyPerformSearch
_finishWithError:
registerWaiter:forDataclassLocks:completionHandler:
searchID
supportsCalendarUserSearch
_performNewStyleSearch
_performOldStyleSearch
enumerateObjectsUsingBlock:
anyObject
_filterTermsForOldStyleSearch
collectionSetURL
_convertRecordTypesToSearchTypes:
searchPropertySet
initWithSearchStrings:searchTypes:serverSupportSet:atURL:
setAccountInfoProvider:
_handleResponseForTask:
setCompletionBlock:
submitIndependentCoreDAVTask:
containsObject:
tokensAreLegal:
initWithSearchStrings:atURL:
setFindAttendees:
setFindGroups:
setFindLocations:
setFindResources:
setFindUsers:
setResultLimit:
error
multiStatus
_parseResponse:
calendarDirectorySearchReturnedResults:
responses
errorItem
numberOfMatchesWithinLimits
successfulPropertiesToValues
namespaceAndNameForWellKnownType:
objectForKey:
payloadAsString
setDisplayName:
hrefs
calDAVUserAddressForItem:
address
absoluteString
preferredAddress:
setPreferredAddress:
da_trimWhiteSpace
setObject:forKey:
relinquishLocksForWaiter:dataclasses:moreComing:
calendarDirectorySearchFinishedWithError:exceededResultLimit:
calendarDirectorySearchIsGoingAway:
initWithTerms:recordTypes:resultLimit:consumer:account:
performSearch
cancel
_terms
_recordTypes
_resultLimit
_exceededResultLimit
_searchID
_finished
directorySearches
performCalendarDirectorySearchForTerms:recordTypes:resultLimit:consumer:
cancelCalendarDirectorySearchWithID:
cancelAllCalendarDirectorySearches
initWithCalendarID:consumer:account:
cancelTaskGroup
finishWithError:
_remAccount
fetchListsIncludingSpecialContainersWithError:
daIsNotificationsCollection
localizedDescription
calDAVNotificationContext
calDAVNotifications
uuidString
externalIdentifier
notificationCollectionURL
da_absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:
initWithURL:
initWithPrincipal:
setDelegate:
setCurrentOperation:
refreshCalendarProperties
taskManager
submitQueuedCoreDAVTask:
updateList:
removeCalDAVNotication:
saveSynchronouslyWithError:
fetchListIncludingSpecialContainerWithExternalIdentifier:error:
daExternalIdentificationTag
removeFromParent
_deleteSharingInvitationWithUID:
startTaskGroup
_reallyRespondToSharingRequestWithCreateReplyGroupBlock:
_createReplyGroupForShareInviteResponse:toCalendar:
_doSharingRequestResponseWithCreateReplyGroupBlock:
calendarHomeURL
relativePath
URLWithString:
name
calendarUserAddresses
initForReplyWithUID:href:hostURL:summary:
initWithInvitation:acceptInvitation:atCalendarHomeURL:accountInfoProvider:taskManager:
shareResponseFinishedWithError:
shareResponseIsGoingAway:
currentOperation
responseWithCalendarID:consumer:account:
taskGroup:didFinishWithError:
calendarRefreshForPrincipal:completedWithNewCTags:newSyncTokens:calendarHomeSyncToken:updatedCalendars:error:
calendarRefreshShouldRetryMkCalendarForPrincipal:calendar:error:
calendarRefreshFoundUpdatedContainerWithIgnoredEntityType:
calendarRefreshFoundUpdatedSpecialContainer:
calendarRefreshFoundDeletedContainerURL:
respondToSharingRequestWithResponse:
reportAsJunk
_createReplyGroupForReportingCalendarAsJunk:
responseID
calendarID
setCalendarID:
_responseID
_calendarID
_currentOperation
_remAccountCache
shareResponses
allValues
respondToShareRequestForCalendar:withResponse:consumer:
reportShareRequestAsJunkForCalendar:consumer:
cancelShareResponseInstance:error:
cancelAllSharingRequests
optionsTimeoutTimer
invalidate
setOptionsTimeoutTimer:
_cancelOptionsTimer
_rem_store
isEnabledForDataclass:
hasPrefix:
unregisterWaiterForDataclassLocks:
unregisterDelegate:
unregisterAccount:forOperationWithName:
_reallyCancelAllSearchQueries
optionsProbe
finishCoreDAVTaskWithError:
calendars
isSubscribed
isManagedByServer
pushKey
title
activeAgents
parentAccountIdentifier
identifier
refreshContext
wasUserRequested
date
_updateWatchedCollections
registerDelegate:
shouldUpdatePushDelegate
APSTopic
_shouldRegisterAPS
APSTopicHasValidPrefix:
registerTopic:forDelegate:inEnvironment:
unregisterTopic:forDelegate:inEnvironment:
delegateDidCompleteRefresh:
_hasSubscribedCalendars
isCalendarsOnly
_refreshSubscribedCalendarChildAccounts
refreshActor:didCompleteWithError:
userInfo
context
shouldRetry
extractDARefreshReasonFromContext:
doubleValue
watchedCollections
retryRefreshForDelegate:withCollections:after:originalRefreshReason:
supportsAuthentication
isAuthenticated
setAuthenticated:
accountSyncDiagnostics
_persistAccountSyncDiagnostics:withContext:completionTime:willAttemptToRetry:hitInternalRefreshTimeout:error:
safeToRefresh
_reallyPerformSearchQuery:
searchString
searchQuery:finishedWithError:
initWithREMDAAccount:withREMStore:
fetchChangesSinceLastConsumed
isTruncated
enumerateChanges:forModelsOfClass:withBlock:
needsAccountPropertyRefresh
numberWithUnsignedInt:
_shouldRefreshInResponseToDBChange:
defaultContext
setIsForced:
setIsCalendarsOnly:
setWasUserRequested:
setWasDueToPush:
setShouldUseOpportunisticSockets:
setWasUserInitiated:
refreshWithContext:
_rem_account
disableMonitoringAgents
enableMonitoringAgentsWithToken:
fetchAndInitializeChangeTrackingStateIfNeeded
registerAccount:forOperationWithName:
_continueRefresh
activeModalTask
defaultDAVProbeTimeout
setOptionsProbe:
shouldRegisterWithRefreshManager
setShouldRegisterWithRefreshManager:
setShouldUpdatePushDelegate:
_serverProbeTimedOut
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
convertToMobileCalDAVRefreshReason:
_validateAndSync:
refreshReason
_probeAndSync
APSSubscriptionURL
simulateCrashWithMessage:
wasDueToPush
refreshCollections:withReason:
scheduleIdentifier
onBehalfOfBundleIdentifier
getDAAccount
saveXpcActivity:
trustHandler
serverTokenRegistrationURL
username
password
interfaceWentUp
interfaceWentDown
monitorFoldersWithIDs:
fullRefresh
forcedRefresh
setForcedRefresh:
setAttachmentDownloadsByAttachmentUUID:
calendarAvailabilityRequests
setCalendarAvailabilityRequests:
setDirectorySearches:
setShareResponses:
_validityCheckConsumer
_shouldRegisterWithRefreshManager
_safeToRefresh
_waitingForDiscoveryGatekeeper
_holdingDiscoveryGatekeeperLock
_forcedRefresh
_fullRefresh
_refreshReason
_lastRetryTimeout
_attachmentDownloadsByAttachmentUUID
_calendarAvailabilityRequests
_shareResponses
_directorySearches
_optionsProbe
_optionsTimeoutTimer
_watchedCollections
Account "%@" is waiting for a password, so we're going to ignore this refresh request
Account doesn't have a principal URL. Running autodiscovery.
Account "%@" is refreshing in response to a calendar database change
DDDDDDDDDD: Registering %p for database change notifications to watcher %@
__CalDatabaseChangedExternally
Validation for account "%@" was cancelled, so we're not going to save the account properties we just discovered. Better luck next time.
Got a password from the user. Attempting autodiscovery again for "%@"
Account "%@" can't figure out its principalPath, and we couldn't get a password from the user 
Account "%@" can't figure out its principalPath. 
We'll refresh if we find a better network connection.
CalDAV has started monitoring for the account "%@"
reachability indicates that the network is reachable.  We're going to retry our folder sync.
The CalDAV agent was told to stop monitoring.
Unregistered %p for database change notifications
Refresh completed with this error: %@
We encountered a network error when refreshing. Scheduling a refresh for when the network reachability changes
Account "%@" was told to refresh its folder list
Account "%@" was told to sync the folders %@
Couldn't get an REMStore from %{public}@.
Couldn't get an REMSaveRequest from %{public}@.
Error when fetching account from ReminderKit %{public}@.
Could not find account from ReminderKit %{public}@.
Home set is on a different host. Fetching new AppleAccount properties
Updated account properties are %@
Backing parent AppleAccount was %@saved successfully.
Error fetching AppleAccount properties: %@
The attachment at %@ hasn't been modified since we last saw it.
Couldn't download the attachment at %@: %@
Finished downloading the file at %@. Saving to the database.
etag for attachment on the server is %@. Our etag is %@
Downloading attachment of size %lld
XXXXXXXXX: ERROR: Should not enter! No attachment support in Reminders.
Notifying consumers of progress: %lld/%lld
Done downloading attachment %@.%@%@
Stupid hack to get %@ retained
Starting new attachment download for consumer %p and attachment UUID %@
Cancelling new attachment download for consumer %p and attachment UUID %@
Cancelling All attachment downloads
XXXXXXXXX: remindd.DataAccess should disable add/modify/delete calendars for Facebook CalDAV account: %@.
DATransaction starting, ID: %@
Waiting on the gatekeeper before issuing a calendar directory search
New-style search (%@) not supported.  Falling back to old-style search (%@).
Removing calendar directory search term because it is less than [%lu] characters in length: [%@]
Removing remaining calendar directory search term because it is less than [%lu] characters in length: [%@]
After filtering calendar directory search terms, none are left.  Will not proceed with search.
Starting calendar search task: [%@]
Calendar directory search terms are not legal.  Will not proceed with search.
Calendar search task complete: [%@].  Error: [%@]
Number of matches exceeded the limit of: [%lu]
Encountered result with displayName: [%@]
Unexpected parsing of calendar-user-address-set: %@
No href items found for calendar-user-address-set: [%@]
Found calendar user address: [%@]
Calendar user type: [%@]
Known calendar user type encountered but not handled: [%@]
Unrecognized calendar user type encountered during directory search: [%@]
Record type: [%@]
Unrecognized record type encountered during directory search: [%@]
Releasing gatekeeper lock
[%@] finished with error %@
Stupid hack to keep %@ from getting released too early
MobileCalDAVSharingResponse: ERROR: Failed to fetch lists in account for _deleteSharingInvitationWithUID {accountID: %@, uid: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: LOOKATME: Failed to fetch the notification calendar for _deleteSharingInvitationWithUID {accountID: %@, uid: %@, responseID: %@}
MobileCalDAVSharingResponse: LOOKATME: Couldn't find a sharing invite notification for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Matched invitation notification for _deleteSharingInvitationWithUID with {uid: %@, objectID: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: LOOKATME: Couldn't get an external ID from the invite notification for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Delete task at _deleteSharingInvitationWithUID finished with {url: %@, error: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: ERROR: Remove invite notification failed when trying to _deleteSharingInvitationWithUID: {objectID: %@, uid: %@, accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: Successfully removed invite notification at _deleteSharingInvitationWithUID: {objectID: %@, uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Didn't send a delete for the sharing invitation for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: ERROR: Failed to fetch an REMList to _reallyRespondToSharingRequestWithCreateReplyGroupBlock {accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: ERROR: Failed to save delete of the shared invite-pending calendar when _reallyRespondToSharingRequestWithCreateReplyGroupBlock {objectID: %@, listGUID: %@, account: %@, error: %@}
MobileCalDAVSharingResponse: SUCCESS: _reallyRespondToSharingRequestWithCreateReplyGroupBlock: Deleted shared invite-pending calendar {objectID: %@, listGUID: %@, account: %@, error: %@}
MobileCalDAVSharingResponse: Reply to shared calendar invitation task group %@ finished with optional error %@
MobileCalDAVSharingResponse: DATransaction starting, ID: %@
MobileCalDAVSharingResponse: Waiting on the gatekeeper before responding to a calendar share request {consumer: %@}
MobileCalDAVSharingResponse: Sending shared calendar invite %@ for invite to "%@" of with uid %@ at URL %@
MobileCalDAVSharingResponse: Releasing gatekeeper lock
MobileCalDAVSharingResponse finished with {%p, error: %@, consumer: %@}
MobileCalDAVSharingResponse: ERROR: Failed to fetch an REMAccount for MobileCalDAVSharingResponse {accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVDaemonAccount %p starting up.
MobileCalDAVDaemonAccount %p going away
Bumping _refreshReason {_refreshReason: %d, newRefreshReason: %d}
Ignoring newRefreshReason becuase it's lower than _refreshReason {_refreshReason: %d, newRefreshReason: %d}
Cancelling CalDAV refresh.
Cancel complete. Unregistering ourself as a gatekeeper waiter
Updating watched collections for %luu calendars
Push key for calendar "%@" is %{public}@
Kicking off a refresh of subscribed calendars for %@
Found a child SubCal account: %@
Refresh complete. Releasing gatekeeper lock and notifying PersistentConnection
Notifying consumer about our refresh completion
Refusing to register for the topic "%{public}@" because it has an invalid prefix.
The server returned precondition failure to our bulk upload. Retrying in a bit.
The server returned a 503 error and told us to try again in %f seconds
We'll retry again after %f seconds
We've already backed off for 7 minutes. Giving up and retrying again at our regularly scheduled time
Received a success response from server while account is not marked as authenticated. Set isAuthenticated flag and save account %@
Dropping search query "%@" because the agent is shut(ting) down.
Found calendar changes for account "%@"
Found task changes for account "%@"
Do not refresh on daemon launch, we have RDSyncPoller does this.
Account Properties Need to Be Refreshed. Allowing Refresh to Continue..
[CalDAVAccountID %{public}@] %{public}@ Account Refresh as we %{public}@ local DB changes or account properties need refresh or suppressed on daemon launch {_refreshReason: %{public}@}
Gatekeeper gave us the goahead. Refreshing CalDAV %{public}@account with ID %{public}@. Reason: %x
We shouldn't be entering _continueRefresh when doing account prop discovery {accountID: %{public}@, refresh reason: %x}
There's no need for us to refresh right now as there are no changes in our local database %@
Manually register APS topic since we rejected normal refreshing on daemon launch {APSTopic: %{public}@, accountID: %{public}@}
Account "%@" was told to refresh, but it is disabled for calendars. Refusing to refresh.
_refresh: LOOKATME! Couldn't fetch an REM account when trying to sync, perhaps deleted in race conditions? Now disabling and re-enabling the agents... {acctID: %{public}@}.
Let's ensure change tracking state exist for account: %{public}@ (%@).
_refresh called for account %{public}@. Forced:%d full:%d reason: %x
Refresh fired. Requesting lock from gatekeeper.
This account has been put in timeout by the babysitter. Failing this sync. %@
Dropping folder refresh request since a full sync is already in progress
_refresh: DATransaction starting, ID: %{public}@
Our gatekeeper locks were aborted while we were still waiting for a lock. What gives? txnID: %{public}@
The options task timer fired, but the task manager is modal. We'll wait until it drops modal before tearing down this task.
We weren't able to reach the server at %@ within %lf seconds. Bailing out of this refresh early.
Discovery task got account %@ {isValid: %d, validationError: %@}.
discoverInitialPropertiesWithConsumer: DATransaction starting, ID: %{public}@
Already holding (or waiting for) a gatekeeper lock, so skipping this property discovery request
Ignoring probe request for "%@" as we're already in the middle of a refresh
Ignoring probe request for "%@" as we already have one outstanding
Probing the host at %@ to see if we have a good enough network connection. We'll wait up to %lf seconds.
Account "%@" couldn't reach the server at %@: %@
We were able to reach the server at %@. Continuing with the refresh
Account "%@" was told to refresh its collections with reason %d
Account "%@" was told it is safe to refresh. Kicking off a refresh.
Account "%@" is beginning to monitor these folders: %{public}@
v8@?0
v24@?0q8@"NSError"16
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
%@:<%@>
accountID
T@"NSString",R,N
rem_accountObjectID
T@"REMObjectID",R,N
accountDescription
T@"NSString",&,N,V_accountID
T@"REMObjectID",&,N,V_rem_accountObjectID
T@"NSString",&,N,V_accountDescription
v20@?0B8@"NSError"12
NOT 
CardDAViCloudDaemonAccount
downloader
T@"MobileCalDAVAttachmentDownloader",W,N,V_downloader
previousETag
T@"NSString",&,N,V_previousETag
com.apple.dataaccess.caldav.attachmentDownload
com.apple.dataaccess.caldav.attachmentDownload.%@
X-ANTICIPATED-CONTENT-LENGTH
 Error was: 
attachmentUUID
T@"NSString",R,N,V_attachmentUUID
consumers
T@"NSSet",R,N,V_consumers
consumer
T@"<DAEventsAttachmentDownloadConsumer>",W,N,V_consumer
T@"NSString",&,N,V_attachmentUUID
/BuildRoot/Library/Caches/com.apple.xbs/Sources/ReminderKit_Sim/ReminderKit-184.1/DataAccess/CalDAV/Accounts/MobileCalDAVAttachmentSupport.m
<Unknown File>
You can't tell us to download an attachment without providing an attachment UUID
You can't download an attachment without setting a consumer
You must provide a download instance to cancel
Didn't find an attachment UUID in the download context
webdav.beta.facebook.com
GROUP
INDIVIDUAL
RESOURCE
ROOM
UNKNOWN
/BuildRoot/Library/Caches/com.apple.xbs/Sources/ReminderKit_Sim/ReminderKit-184.1/DataAccess/CalDAV/MobileCalDAVDirectorySearch.m
Should be finished before we dealloc
terms: [%@], recordTypes: [%@] resultLimit: [%lu] consumer: [%p], account: [%p]
v20@?0q8B16
v24@?0@"NSString"8^B16
v24@?0@"NSString"8@"NSString"16
@"CoreDAVItem"12@?0i8
users
locations
groups
resources
v24@?0@"CoreDAVResponseItem"8^B16
searchID
T@,R,N
/BuildRoot/Library/Caches/com.apple.xbs/Sources/ReminderKit_Sim/ReminderKit-184.1/DataAccess/CalDAV/MobileCalDAVSharingSupport.m
v32@?0@"REMList"8Q16^B24
v32@?0@"REMCalDAVNotification"8Q16^B24
Invalid parameter not satisfying: %@
notificationContext
@"CoreDAVTaskGroup"16@?0@"REMList"8
accept
decline
responseID
T@"NSString",R,N,V_responseID
T@"<DAEventsCalendarSharingResponseConsumer>",W,N,V_consumer
calendarID
T@"NSString",&,N,V_calendarID
currentOperation
T@"CoreDAVTaskGroup",&,N,V_currentOperation
taskManager
T@"DACoreDAVTaskManager",R,N,V_taskManager
You can't tell us to respond to a calendar share request without providing a calendar ID
You can't respond to a calendar share without setting a consumer
You must provide a share instance to cancel
com.me.
com.apple.calendar.
com.icloud.
CalDAVRefresh
retry-after
v24@?0@"REMChangeObject"8q16
Starting
Blocking
have
do not have
calendars for 
CalDAVValidityCheck
CalDAVProbe
DAAPSTokenURL
<rdar://problem/37173724>. Consumer class: [%@]
trustHandler
T@"DATrustHandler",R,N
shareResponses
T@"NSMutableDictionary",&,N,V_shareResponses
directorySearches
T@"NSMutableDictionary",&,N,V_directorySearches
calendarAvailabilityRequests
T@"NSMutableDictionary",&,N,V_calendarAvailabilityRequests
attachmentDownloadsByAttachmentUUID
T@"NSMutableDictionary",&,N,V_attachmentDownloadsByAttachmentUUID
T@"CalDAVAgent",W,N,V_consumer
safeToRefresh
TB,N,V_safeToRefresh
fullRefresh
TB,N,V_fullRefresh
forcedRefresh
TB,N,V_forcedRefresh
shouldRegisterWithRefreshManager
TB,N,V_shouldRegisterWithRefreshManager
refreshReason
Ti,R,N,V_refreshReason
optionsProbe
T@"CoreDAVOptionsTask",&,N,V_optionsProbe
optionsTimeoutTimer
T@"NSTimer",&,N,V_optionsTimeoutTimer
CalDAVAgent
DAValidityCheckConsumer
NSObject
ReminderKitExtensions
REMDAAccountInfo
REMDAAccountProviding
MobileCalDAViCloudDaemonAccount
CalDAVGetToFileWithProgressTask
MobileCalDAVAttachmentDownloader
DADataclassLockWatcher
CoreDAVTaskDelegate
MobileCalDAVDownloadContext
AttachmentSupport
MobileCalDAVFacebookDaemonAccount
MobileCalDAVDirectorySearch
CalendarDirectorySearchSupport
MobileCalDAVSharingResponse
CalDAVCalendarPropertyRefreshDelegate
CoreDAVTaskGroupDelegate
SharingSupport
MobileCalDAVDaemonAccount
DARefreshManagerDelegate
DABabysittable
@24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v36@0:8@16B24@28
v36@0:8@"DAAccount"16B24@"NSError"28
v16@0:8
v24@0:8@?16
v24@0:8@16
v24@0:8B16B20
v36@0:8@16q24B32
@"REMObjectID"16@0:8
@40@0:8@16@24@32
@"NSString"
@"REMObjectID"
v20@0:8B16
v24@0:8q16
q16@0:8
v32@0:8@16@24
@"MobileCalDAVAttachmentDownloader"
v32@0:8@"CoreDAVTask"16@"NSError"24
@32@0:8@16@24
@"MobileCalDAVDaemonAccount"
@"NSMutableSet"
@"NSURL"
@"DACoreDAVTaskManager"
@"<DAEventsAttachmentDownloadConsumer>"
@56@0:8@16@24Q32@40@48
@"NSSet"
@"<DAEventsCalendarDirectorySearchResponseConsumer>"
@48@0:8@16@24Q32@40
v32@0:8@"CoreDAVTaskGroup"16@"NSError"24
v64@0:8@16@24@32@40@48@56
B40@0:8@16@24@32
v64@0:8@"<CalDAVPrincipal>"16@"NSDictionary"24@"NSDictionary"32@"NSString"40@"NSSet"48@"NSError"56
B40@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24@"NSError"32
v24@0:8@"CalDAVContainer"16
v24@0:8@"NSURL"16
@32@0:8q16@24
@"<DAEventsCalendarSharingResponseConsumer>"
@"CoreDAVTaskGroup"
@"REMAccount"
@40@0:8@16q24@32
i24@0:8@16
i20@0:8i16
v28@0:8@16i24
v28@0:8@"NSSet"16i24
@"NSSet"16@0:8
@"DAAccount"16@0:8
v24@0:8@"NSObject<OS_xpc_object>"16
@"DATrustHandler"16@0:8
@"NSURL"16@0:8
v20@0:8i16
v56@0:8@16@24@32B40B44@48
B24@0:8^B16
i16@0:8
@"CalDAVAgent"
@"<DAValidityCheckConsumer>"
@"NSMutableDictionary"
@"CoreDAVOptionsTask"
@"NSTimer"
