T@"NSString",&,N,V_previousETag
APSEnv
_attachmentType
APSTopic
_didFinishDownloadingWithError:
DAObjectForKeyCaseInsensitive:
_parseResponse:
T@"<DAEventsAttachmentDownloadConsumer>",W,N,V_consumer
_useSSL
T@"<REMDAAccountPropertiesObserving>",&,N,V_primaryCloudKitAccountPersonIDSaltChangeObserver
activeModalTask
T@"CoreDAVOptionsTask",&,N,V_optionsProbe
base64EncodedStringWithOptions:
T@"DACoreDAVTaskManager",R,N,V_taskManager
cancelTaskGroup
T@"MobileCalDAVAttachmentDownloader",W,N,V_downloader
context
T@"NSMutableDictionary",&,N,V_calendarAvailabilityRequests
fetchListIncludingSpecialContainerWithExternalIdentifier:error:
T@"NSMutableDictionary",&,N,V_shareResponses
interfaceWentUp
T@"NSString",&,N,V_accountDescription
isCalendarsOnly
T@"NSString",&,N,V_attachmentUUID
payloadAsString
T@"NSString",R,C
release
T@"NSString",R,N,V_attachmentUUID
removeConsumer:
T@"NSTimer",&,N,V_optionsTimeoutTimer
responseHeaders
T@"REMObjectID",R,N
setFullRefresh:
T@,R,N
shareResponseFinishedWithError:
TB,N,V_fullRefresh
startMonitoring
TB,N,V_shouldRegisterWithRefreshManager
.cxx_destruct
_attachmentSize
APSSubscriptionURL
_attachmentUUID
APSTopicHasValidPrefix:
_holdingDiscoveryGatekeeperLock
T#,R
_shareResponses
T@"<DAEventsCalendarSharingResponseConsumer>",W,N,V_consumer
account
T@"CalDAVAgent",W,N,V_consumer
address
T@"CoreDAVTaskGroup",&,N,V_currentOperation
calendarHomeURL
T@"DATrustHandler",R,N
containsObject:
T@"NSMutableDictionary",&,N,V_attachmentDownloadsByAttachmentUUID
dealloc
T@"NSMutableDictionary",&,N,V_directorySearches
initWithFormat:
T@"NSSet",R,N,V_consumers
isAuthenticated
T@"NSString",&,N,V_accountID
isProxy
T@"NSString",&,N,V_calendarID
pushKey
T@"NSString",R,N
rem_saveRequest
T@"NSString",R,N,V_responseID
removeObserver:
T@"REMObjectID",&,N,V_rem_accountObjectID
setDisplayName:
T@,&,N,V_refreshDidCompleteObserver
setResultLimit:
TB,N,V_forcedRefresh
shouldUseCalendarHomeSyncReport
TB,N,V_safeToRefresh
tokensAreLegal:
TQ,R
Ti,R,N,V_refreshReason
URLWithString:
UTF8String
UUID
UUIDString
_account
_accountDescription
_accountID
_attachmentDownloadDidFinish:
_attachmentDownloadsByAttachmentUUID
_attachmentURL
_calendarAvailabilityRequests
_calendarID
_cancelOptionsTimer
_consumer
_consumers
_continueRefresh
_convertRecordTypesToSearchTypes:
_createReplyGroupForReportingCalendarAsJunk:
_createReplyGroupForShareInviteResponse:toCalendar:
_currentOperation
_deleteSharingInvitationWithUID:
_didShowProgressDownloadedByteCount:
_directorySearches
_doSharingRequestResponseWithCreateReplyGroupBlock:
_downloader
_etag
_exceededResultLimit
_filterTermsForOldStyleSearch
_finishWithError:
_finished
_forcedRefresh
_fullRefresh
_handleResponseForTask:
_hasSubscribedCalendars
_holdingGatekeeperLock
_host
_lastRetryTimeout
_localFilename
_optionsProbe
_optionsTimeoutTimer
_performNewStyleSearch
_performOldStyleSearch
_persistAccountSyncDiagnostics:withContext:completionTime:willAttemptToRetry:hitInternalRefreshTimeout:error:
_port
_previousETag
_primaryCloudKitAccountPersonIDSaltChangeObserver
_probeAndSync
_rd_hashedAccountPersonIDWithSalt:
_rd_replacementHostnameForAccountPersonID
_rd_resetAccountPersonIDWithError:changeSource:
_rd_saveAccountPersonIDHashedWithSalt:changeSource:
_reallyBeginDownload
_reallyCancelAllSearchQueries
_reallyPerformSearch
_reallyPerformSearchQuery:
_reallyRespondToSharingRequestWithCreateReplyGroupBlock:
_recordTypes
_refresh
_refreshDidCompleteObserver
_refreshReason
_refreshSubscribedCalendarChildAccounts
_remAccount
_remAccountCache
_rem_account
_rem_accountObjectID
_rem_store
_rem_updateAccountProperties
_removeRefreshDidCompleteObserver
_responseID
_resultLimit
_safeToRefresh
_saveAttachmentDataToDatabase
_searchID
_serverProbeTimedOut
_setupNotifications
_shouldRefreshInResponseToDBChange:
_shouldRegisterAPS
_shouldRegisterWithRefreshManager
_taskManager
_terms
_updateWatchedCollections
_validateAndSync
_validateAndSync:
_validityCheckConsumer
_waiterID
_waitingForDiscoveryGatekeeper
_waitingForGatekeeper
_watchedCollections
aa_updatePropertiesForAppleAccount:completion:
absoluteString
account:isValid:validationError:
accountDescription
accountID
accountSyncDiagnostics
accountType
activeAgents
addConsumer:
addEntriesFromDictionary:
addObject:
addObserverForName:object:queue:usingBlock:
addUsernameToURL:
additionalHeaderValues
allValues
anyObject
attachmentDownloadsByAttachmentUUID
attachmentUUID
autorelease
backingAccountInfo
beginDownload
beginDownloadingAttachmentWithUUID:consumer:
bumpRefreshReason:
calDAVNotificationContext
calDAVNotifications
calDAVUserAddressForItem:
calendarAvailabilityRequests
calendarDirectorySearchFinishedWithError:exceededResultLimit:
calendarDirectorySearchIsGoingAway:
calendarDirectorySearchReturnedResults:
calendarID
calendarRefreshForPrincipal:completedWithNewCTags:newSyncTokens:calendarHomeSyncToken:updatedCalendars:error:
calendarRefreshFoundDeletedContainerURL:
calendarRefreshFoundUpdatedContainerWithIgnoredEntityType:
calendarRefreshFoundUpdatedSpecialContainer:
calendarRefreshMkCalendarSucceededForPrincipal:calendar:
calendarRefreshPropPatchFinishedWithError:forCalendar:
calendarRefreshShouldRetryMkCalendarForPrincipal:calendar:error:
calendarRefreshWillRefreshCalendar:
calendarRefreshWillSendCalendarDeletes:
calendarUserAddresses
calendars
cancel
cancelAllAttachmentDownloads
cancelAllCalendarDirectorySearches
cancelAllSharingRequests
cancelAllTasks
cancelCalendarDirectorySearchWithID:
cancelDownload
cancelDownloadingInstance:error:
cancelRefreshWithCompletion:
cancelShareResponseInstance:error:
class
code
collectionSetURL
conformsToProtocol:
connection:didReceiveData:
consumer
consumers
contextWithAttachmentUUID:consumer:
convertToMobileCalDAVRefreshReason:
copy
count
countByEnumeratingWithState:objects:count:
currentHandler
currentOperation
daExternalIdentificationTag
daIsNotificationsCollection
da_absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:
da_lowercaseHexStringWithoutSpaces
da_newGUID
da_trimWhiteSpace
da_urlBySettingHost:keepUsername:
daemonUserDefaults
dataclassProperties
date
debugDescription
defaultCenter
defaultContext
defaultDAVProbeTimeout
delegateDidCompleteRefresh:
description
directorySearches
disableMonitoringAgents
discoverInitialPropertiesWithConsumer:
displayAccount
domain
doubleValue
downloadFinishedError:
downloadProgressDownloadedByteCount:totalByteCount:
downloader
enableHashingUserIdentifiablesWithPersonIDSalt
enableMonitoringAgentsWithToken:
enabledForDADataclass:
enumerateChanges:forModelsOfClass:withBlock:
enumerateObjectsUsingBlock:
error
errorItem
errorWithDomain:code:userInfo:
externalIdentifier
extractDARefreshReasonFromContext:
fetchAccountWithExternalIdentifier:error:
fetchAndInitializeChangeTrackingStateIfNeeded
fetchChangesSinceLastConsumed
fetchListsIncludingSpecialContainersWithError:
finishCoreDAVTaskWithError:
finishWithError:
forcedRefresh
fullRefresh
getAppleIDSession
getDAAccount
handleFailureInMethod:object:file:lineNumber:description:
handleValidationError:completion:
hasPrefix:
hash
host
hostFromDataclassPropertiesForDataclass:
hrefs
identifier
init
initForLaunchingWithAccount:
initForReplyWithUID:href:hostURL:summary:
initWithAccount:
initWithAccountID:remAccountObjectID:accountDescription:
initWithAttachmentUUID:consumer:
initWithAttachmentUUID:forAccount:
initWithBackingAccountInfo:
initWithCalendarID:consumer:account:
initWithIdentifier:
initWithInvitation:acceptInvitation:atCalendarHomeURL:accountInfoProvider:taskManager:
initWithPrincipal:
initWithREMDAAccount:clientName:withREMStore:
initWithSearchStrings:atURL:
initWithSearchStrings:searchTypes:serverSupportSet:atURL:
initWithStore:
initWithTerms:recordTypes:resultLimit:consumer:account:
initWithURL:
interfaceWentDown
invalidate
isEnabledForDataclass:
isEqual:
isEqualToString:
isKindOfClass:
isManagedByServer
isMemberOfClass:
isMonitoring
isRefreshing
isSubscribed
isTruncated
isWaitingForPassword
launchingAgentWithAccount:
length
localizedDescription
loggingDescription
longLongValue
mainPrincipal
monitorFoldersWithIDs:
multiStatus
mutableCopy
name
namespaceAndNameForWellKnownType:
needsAccountPropertyRefresh
noteHomeSetOnDifferentHost:
notificationCollectionURL
numberOfMatchesWithinLimits
numberWithUnsignedInt:
objectForKey:
objectForKeyedSubscript:
objectID
observeReachabilityWithBlock:
onBehalfOfBundleIdentifier
optionsProbe
optionsTimeoutTimer
parentAccount
parentAccountIdentifier
password
performCalendarDirectorySearchForTerms:recordTypes:resultLimit:consumer:
performSearch
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
personID
port
portFromDataclassPropertiesForDataclass:
preferredAddress:
previousETag
primaryCloudKitAccountPersonIDSaltChangeObserver
principalURL
progressQueue
pushTokenForEnvironment:
rd_base64EncodedHMACStringFromString:usingPersonIDSalt:
rd_isPersonIDSaltInitiallyNilError:
rd_observePrimaryCloudKitAccountPersonIDSaltChanges
rd_observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges:
reallyRefresh
refreshActor:didCompleteWithError:
refreshCalendarProperties
refreshCollections:withReason:
refreshContext
refreshDidCompleteObserver
refreshDidCompleteWithError:
refreshFolderListRequireChangedFolders:isUserRequested:
refreshReason
refreshWithContext:
registerAccount:forOperationWithName:
registerConcernedRemindersParty:withChangedBlock:
registerDelegate:
registerTopic:forDelegate:inEnvironment:
registerWaiter:forDataclassLocks:completionHandler:
relativePath
relinquishLocksForWaiter:dataclasses:moreComing:
remObjectID
rem_account
rem_accountObjectID
rem_localDBWatcher
rem_provideAccountInfo
rem_saveRequestForDataAccess
rem_store
rem_storeForDataAccess
rem_storeProvider
removeAllObjects
removeCalDAVNotication:
removeConcernedRemindersParty:
removeFromParent
removeObject:
removeObjectForKey:
reportAsJunk
reportShareRequestAsJunkForCalendar:consumer:
requestAgentStopMonitoringWithCompletionBlock:
respondToShareRequestForCalendar:withResponse:consumer:
respondToSharingRequestWithResponse:
respondsToSelector:
responseID
responseWithCalendarID:consumer:account:
responses
retain
retainCount
retryRefreshForDelegate:withCollections:after:originalRefreshReason:
safeToRefresh
saveAccountProperties
saveSynchronouslyWithError:
saveVerifiedAccount:withCompletionHandler:
saveWithQueue:completion:
saveXpcActivity:
scheduleIdentifier
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
searchID
searchPropertySet
searchQuery:finishedWithError:
searchString
self
serverTokenRegistrationURL
setAccountDescription:
setAccountID:
setAccountInfoProvider:
setAttachmentDownloadsByAttachmentUUID:
setAttachmentUUID:
setAuthenticated:
setAuthor:
setCalendarAvailabilityRequests:
setCalendarID:
setCompletionBlock:
setConsumer:
setCurrentOperation:
setDelegate:
setDirectorySearches:
setDownloader:
setFindAttendees:
setFindGroups:
setFindLocations:
setFindResources:
setFindUsers:
setForcedRefresh:
setHost:
setIsCalendarsOnly:
setIsForced:
setIsMonitoring:
setIsWaitingForPassword:
setObject:forKey:
setObject:forKeyedSubscript:
setOptionsProbe:
setOptionsTimeoutTimer:
setPersonID:
setPort:
setPreferredAddress:
setPreviousETag:
setPrimaryCloudKitAccountPersonIDSaltChangeObserver:
setRefreshDidCompleteObserver:
setRem_accountObjectID:
setSafeToRefresh:
setShareResponses:
setShouldDoInitialAutodiscovery:
setShouldRegisterWithRefreshManager:
setShouldUpdatePushDelegate:
setShouldUseOpportunisticSockets:
setSyncWhenReachable:
setUseSSL:
setValue:forKey:
setWasDueToPush:
setWasUserInitiated:
setWasUserRequested:
shareResponseIsGoingAway:
shareResponses
sharedBabysitter
sharedGateKeeper
sharedManager
shouldAutodiscoverAccountProperties
shouldDoInitialAutodiscovery
shouldHandleHTTPCookiesForURL:
shouldRegisterWithRefreshManager
shouldRetry
shouldSendClientInfoHeaderForURL:
shouldUpdatePushDelegate
shutdown
simulateCrashWithMessage:
startTaskGroup
stopObservingReachability
stringByAppendingString:
stringWithFormat:
submitIndependentCoreDAVTask:
submitQueuedCoreDAVTask:
successfulPropertiesToValues
superclass
supportsAuthentication
supportsCalendarUserSearch
supportsReminders
syncFolderIDs:forDataclasses:isUserRequested:
task:didFinishWithError:
taskGroup:didFinishWithError:
taskManager
title
totalBytesReceived
transactionId
trustHandler
unregisterAccount:forOperationWithName:
unregisterDelegate:
unregisterTopic:forDelegate:inEnvironment:
unregisterWaiterForDataclassLocks:
updateAccount:
updateList:
useSSL
useSSLFromDataclassPropertiesForDataclass:
useThunderhillBetaServers
userInfo
username
uuidString
waiterID
wasDueToPush
wasUserRequested
watchedCollections
zone
Account "%@" is waiting for a password, so we're going to ignore this refresh request
Account doesn't have a principal URL. Running autodiscovery.
Account "%@" is refreshing in response to a calendar database change
DDDDDDDDDD: Registering %p for database change notifications to watcher %@
__CalDatabaseChangedExternally
Validation for account "%@" was cancelled, so we're not going to save the account properties we just discovered. Better luck next time.
Got a password from the user. Attempting autodiscovery again for "%@"
Account "%@" can't figure out its principalPath, and we couldn't get a password from the user 
Account "%@" can't figure out its principalPath. 
We'll refresh if we find a better network connection.
CalDAV has started monitoring for the account "%@"
reachability indicates that the network is reachable.  We're going to retry our folder sync.
The CalDAV agent was told to stop monitoring.
Unregistered %p for database change notifications
Refresh completed with this error: %@
We encountered a network error when refreshing. Scheduling a refresh for when the network reachability changes
Account "%@" was told to refresh its folder list
Account "%@" was told to sync the folders %@
Couldn't get an REMStore from %{public}@.
Couldn't get an REMSaveRequest from %{public}@.
Error when fetching account from ReminderKit %{public}@.
Could not find account from ReminderKit %{public}@.
Home set is on a different host. Fetching new AppleAccount properties
Updated account properties are %@
Backing parent AppleAccount was %@saved successfully.
Error fetching AppleAccount properties: %@
The attachment at %@ hasn't been modified since we last saw it.
Couldn't download the attachment at %@: %@
Finished downloading the file at %@. Saving to the database.
etag for attachment on the server is %@. Our etag is %@
Downloading attachment of size %lld
XXXXXXXXX: ERROR: Should not enter! No attachment support in Reminders.
Notifying consumers of progress: %lld/%lld
Done downloading attachment %@.%@%@
Stupid hack to get %@ retained
Starting new attachment download for consumer %p and attachment UUID %@
Cancelling new attachment download for consumer %p and attachment UUID %@
Cancelling All attachment downloads
XXXXXXXXX: remindd.DataAccess should disable add/modify/delete calendars for Facebook CalDAV account: %@.
DATransaction starting, ID: %@
Waiting on the gatekeeper before issuing a calendar directory search
New-style search (%@) not supported.  Falling back to old-style search (%@).
Removing calendar directory search term because it is less than [%lu] characters in length: [%@]
Removing remaining calendar directory search term because it is less than [%lu] characters in length: [%@]
After filtering calendar directory search terms, none are left.  Will not proceed with search.
Starting calendar search task: [%@]
Calendar directory search terms are not legal.  Will not proceed with search.
Calendar search task complete: [%@].  Error: [%@]
Number of matches exceeded the limit of: [%lu]
Encountered result with displayName: [%@]
Unexpected parsing of calendar-user-address-set: %@
No href items found for calendar-user-address-set: [%@]
Found calendar user address: [%@]
Calendar user type: [%@]
Known calendar user type encountered but not handled: [%@]
Unrecognized calendar user type encountered during directory search: [%@]
Record type: [%@]
Unrecognized record type encountered during directory search: [%@]
Releasing gatekeeper lock
[%@] finished with error %@
Stupid hack to keep %@ from getting released too early
MobileCalDAVSharingResponse: ERROR: Failed to fetch lists in account for _deleteSharingInvitationWithUID {accountID: %@, uid: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: LOOKATME: Failed to fetch the notification calendar for _deleteSharingInvitationWithUID {accountID: %@, uid: %@, responseID: %@}
MobileCalDAVSharingResponse: LOOKATME: Couldn't find a sharing invite notification for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Matched invitation notification for _deleteSharingInvitationWithUID with {uid: %@, objectID: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: LOOKATME: Couldn't get an external ID from the invite notification for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Delete task at _deleteSharingInvitationWithUID finished with {url: %@, error: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: ERROR: Remove invite notification failed when trying to _deleteSharingInvitationWithUID: {objectID: %@, uid: %@, accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: Successfully removed invite notification at _deleteSharingInvitationWithUID: {objectID: %@, uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Didn't send a delete for the sharing invitation for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: ERROR: Failed to fetch an REMList to _reallyRespondToSharingRequestWithCreateReplyGroupBlock {accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: ERROR: Failed to save delete of the shared invite-pending calendar when _reallyRespondToSharingRequestWithCreateReplyGroupBlock {objectID: %@, listGUID: %@, account: %@, error: %@}
MobileCalDAVSharingResponse: SUCCESS: _reallyRespondToSharingRequestWithCreateReplyGroupBlock: Deleted shared invite-pending calendar {objectID: %@, listGUID: %@, account: %@, error: %@}
MobileCalDAVSharingResponse: Reply to shared calendar invitation task group %@ finished with optional error %@
MobileCalDAVSharingResponse: DATransaction starting, ID: %@
MobileCalDAVSharingResponse: Waiting on the gatekeeper before responding to a calendar share request {consumer: %@}
MobileCalDAVSharingResponse: Sending shared calendar invite %@ for invite to "%@" of with uid %@ at URL %@
MobileCalDAVSharingResponse: Releasing gatekeeper lock
MobileCalDAVSharingResponse finished with {%p, error: %@, consumer: %@}
MobileCalDAVSharingResponse: ERROR: Failed to fetch an REMAccount for MobileCalDAVSharingResponse {accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVDaemonAccount %p starting up.
MobileCalDAVDaemonAccount %p going away
Bumping _refreshReason {_refreshReason: %d, newRefreshReason: %d}
Ignoring newRefreshReason becuase it's lower than _refreshReason {_refreshReason: %d, newRefreshReason: %d}
Cancelling CalDAV refresh.
Cancel complete. Unregistering ourself as a gatekeeper waiter
MobileCalDAVDaemonAccount(RefreshDidComplete) observer cleaned up
Updating watched collections for %luu calendars
Push key for calendar "%@" is %{public}@
Kicking off a refresh of subscribed calendars for %@
Found a child SubCal account: %@
Refresh complete. Releasing gatekeeper lock and notifying PersistentConnection
Notifying consumer about our refresh completion
Refusing to register for the topic "%{public}@" because it has an invalid prefix.
The server returned precondition failure to our bulk upload. Retrying in a bit.
The server returned a 503 error and told us to try again in %f seconds
We'll retry again after %f seconds
We've already backed off for 7 minutes. Giving up and retrying again at our regularly scheduled time
Received a success response from server while account is not marked as authenticated. Set isAuthenticated flag and save account %@
Dropping search query "%@" because the agent is shut(ting) down.
Found calendar changes for account "%@"
Found task changes for account "%@"
Do not refresh on daemon launch, we have RDSyncPoller does this.
Account Properties Need to Be Refreshed. Allowing Refresh to Continue..
[CalDAVAccountID %{public}@] %{public}@ Account Refresh as we %{public}@ local DB changes or account properties need refresh or suppressed on daemon launch {_refreshReason: %{public}@}
Gatekeeper gave us the goahead. Refreshing CalDAV %{public}@account with ID %{public}@. Reason: %x
We shouldn't be entering _continueRefresh when doing account prop discovery {accountID: %{public}@, refresh reason: %x}
There's no need for us to refresh right now as there are no changes in our local database %@
Manually register APS topic since we rejected normal refreshing on daemon launch {APSTopic: %{public}@, accountID: %{public}@}
Account "%@" was told to refresh, but it is disabled for calendars. Refusing to refresh.
_refresh: LOOKATME! Couldn't fetch an REM account when trying to sync, perhaps deleted in race conditions? Now disabling and re-enabling the agents... {acctID: %{public}@}.
Let's ensure change tracking state exist for account: %{public}@ (%@).
_refresh called for account %{public}@. Forced:%d full:%d reason: %x
Refresh fired. Requesting lock from gatekeeper.
This account has been put in timeout by the babysitter. Failing this sync. %@
Dropping folder refresh request since a full sync is already in progress
_refresh: DATransaction starting, ID: %{public}@
Our gatekeeper locks were aborted while we were still waiting for a lock. What gives? txnID: %{public}@
The options task timer fired, but the task manager is modal. We'll wait until it drops modal before tearing down this task.
We weren't able to reach the server at %@ within %lf seconds. Bailing out of this refresh early.
Discovery task got account %@ {isValid: %d, validationError: %@}.
discoverInitialPropertiesWithConsumer: DATransaction starting, ID: %{public}@
Already holding (or waiting for) a gatekeeper lock, so skipping this property discovery request
Ignoring probe request for "%@" as we're already in the middle of a refresh
Ignoring probe request for "%@" as we already have one outstanding
Probing the host at %@ to see if we have a good enough network connection. We'll wait up to %lf seconds.
Account "%@" couldn't reach the server at %@: %@
We were able to reach the server at %@. Continuing with the refresh
Account "%@" was told to refresh its collections with reason %d
Account "%@" was told it is safe to refresh. Kicking off a refresh.
Account "%@" is beginning to monitor these folders: %{public}@
-[MobileCalDAVDaemonAccount _rd_hashedAccountPersonIDWithSalt:] {calendarHomeURL: %@, account: %@, type: %@, replacementHost: %@}
MobileCalDAVDaemonAccount could not get the CalDAV REMAccount to update personID {accountID: %{public}@, changeSource: %{public}@}
MobileCalDAVDaemonAccount failed generate a hashed personID from the salt {remAccount: %{public}@, changeSource: %{public}@, salt: %@}
MobileCalDAVDaemonAccount failed to save personID {remAccount: %{public}@, changeSource: %{public}@, saveError: %@}
MobileCalDAVDaemonAccount saved account personID {remAccount: %{public}@, changeSource: %{public}@, newPersonID: %@, oldPersonID: %@, salt: %@}
MobileCalDAVDaemonAccount could not get the CalDAV REMAccount to reset personID {accountID: %{public}@, changeSource: %{public}@, saltError: %{public}@}
MobileCalDAVDaemonAccount failed to reset personID to nil {remAccount: %{public}@, changeSource: %{public}@, saltError: %{public}@, saveError: %@}
MobileCalDAVDaemonAccount has reset account personID to nil {remAccount: %{public}@, changeSource: %{public}@, saltError: %{public}@, oldPersonID: %@}
MobileCalDAVDaemonAccount is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}@}
MobileCalDAVDaemonAccount instance is no longer available upon our RDAccountPersonIDSaltObserver success handler is called {logTracingID: %{public}@}
MobileCalDAVDaemonAccount received a primary CK account personIDSalt change or initial value {observer: %{public}@, logTracingID: %{public}@, isRefreshing?: %d}
MobileCalDAVDaemonAccount instance is no longer available when received refreshDidComplete after waiting for it at RDAccountPersonIDSaltObserver success handler {logTracingID: %{public}@}
MobileCalDAVDaemonAccount(RefreshDidComplete) now actually handling the received primary CK account personIDSalt change or initial value {observer: %{public}@, logTracingID: %{public}@}
MobileCalDAVDaemonAccount instance is no longer available upon our RDAccountPersonIDSaltObserver error handler is called {logTracingID: %{public}@}
MobileCalDAVDaemonAccount received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}
MobileCalDAVDaemonAccount started observing primary CK account personIDSalt changes: %{public}@
MobileCalDAVDaemonAccount stopped observing primary CK account personIDSalt changes: %{public}@
v8@?0
v24@?0q8@"NSError"16
%@:<%@>
v20@?0B8@"NSError"12
NOT 
CardDAViCloudDaemonAccount
com.apple.dataaccess.caldav.attachmentDownload
com.apple.dataaccess.caldav.attachmentDownload.%@
X-ANTICIPATED-CONTENT-LENGTH
 Error was: 
MobileCalDAVAttachmentSupport.m
You can't tell us to download an attachment without providing an attachment UUID
You can't download an attachment without setting a consumer
You must provide a download instance to cancel
Didn't find an attachment UUID in the download context
webdav.beta.facebook.com
GROUP
INDIVIDUAL
RESOURCE
ROOM
UNKNOWN
MobileCalDAVDirectorySearch.m
Should be finished before we dealloc
terms: [%@], recordTypes: [%@] resultLimit: [%lu] consumer: [%p], account: [%p]
v20@?0q8B16
v24@?0@"NSString"8^B16
v24@?0@"NSString"8@"NSString"16
@"CoreDAVItem"12@?0i8
users
locations
groups
resources
v24@?0@"CoreDAVResponseItem"8^B16
MobileCalDAVSharingSupport.m
v32@?0@"REMList"8Q16^B24
v32@?0@"REMCalDAVNotification"8Q16^B24
Invalid parameter not satisfying: %@
notificationContext
@"CoreDAVTaskGroup"16@?0@"REMList"8
accept
decline
You can't tell us to respond to a calendar share request without providing a calendar ID
You can't respond to a calendar share without setting a consumer
You must provide a share instance to cancel
com.me.
com.apple.calendar.
com.icloud.
CalDAVRefresh
retry-after
v24@?0@"REMChangeObject"8q16
Starting
Blocking
have
do not have
calendars for 
CalDAVValidityCheck
CalDAVProbe
DAAPSTokenURL
<rdar://problem/37173724>. Consumer class: [%@]
MobileCalDAVDaemonAccount.m
salt.length
.CalDAV
v16@?0@"NSError"8
saltError != nil
!strongSelf.isRefreshing
v16@?0@"NSNotification"8
v16@?0@"NSData"8
CalDAVAgent
DAValidityCheckConsumer
NSObject
ReminderKitExtensions
REMDAAccountInfo
REMDAAccountProviding
MobileCalDAViCloudDaemonAccount
CalDAVGetToFileWithProgressTask
MobileCalDAVAttachmentDownloader
DADataclassLockWatcher
CoreDAVTaskDelegate
MobileCalDAVDownloadContext
AttachmentSupport
MobileCalDAVFacebookDaemonAccount
MobileCalDAVDirectorySearch
CalendarDirectorySearchSupport
MobileCalDAVSharingResponse
CalDAVCalendarPropertyRefreshDelegate
CoreDAVTaskGroupDelegate
SharingSupport
MobileCalDAVDaemonAccount
DARefreshManagerDelegate
DABabysittable
remindd_Additions
@24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v36@0:8@16B24@28
v36@0:8@"DAAccount"16B24@"NSError"28
v16@0:8
v24@0:8@?16
v24@0:8@16
v24@0:8B16B20
v36@0:8@16q24B32
@"REMObjectID"16@0:8
@40@0:8@16@24@32
@"NSString"
@"REMObjectID"
v20@0:8B16
v24@0:8q16
q16@0:8
v32@0:8@16@24
@"MobileCalDAVAttachmentDownloader"
v32@0:8@"CoreDAVTask"16@"NSError"24
@32@0:8@16@24
@"MobileCalDAVDaemonAccount"
@"NSMutableSet"
@"NSURL"
@"DACoreDAVTaskManager"
@"<DAEventsAttachmentDownloadConsumer>"
@56@0:8@16@24Q32@40@48
@"NSSet"
@"<DAEventsCalendarDirectorySearchResponseConsumer>"
@48@0:8@16@24Q32@40
v32@0:8@"CoreDAVTaskGroup"16@"NSError"24
v64@0:8@16@24@32@40@48@56
B40@0:8@16@24@32
v64@0:8@"<CalDAVPrincipal>"16@"NSDictionary"24@"NSDictionary"32@"NSString"40@"NSSet"48@"NSError"56
B40@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24@"NSError"32
v32@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24
v24@0:8@"CalDAVContainer"16
v24@0:8@"NSURL"16
v24@0:8@"<CalDAVCalendar>"16
v32@0:8@"NSError"16@"<CalDAVCalendar>"24
v24@0:8@"CalDAVCalendarPropertyRefreshOperation"16
@32@0:8q16@24
@"<DAEventsCalendarSharingResponseConsumer>"
@"CoreDAVTaskGroup"
@"REMAccount"
@40@0:8@16q24@32
i24@0:8@16
i20@0:8i16
v28@0:8@16i24
v28@0:8@"NSSet"16i24
@"NSSet"16@0:8
@"DAAccount"16@0:8
v24@0:8@"NSObject<OS_xpc_object>"16
@"DATrustHandler"16@0:8
@"NSURL"16@0:8
v20@0:8i16
v56@0:8@16@24@32B40B44@48
B24@0:8^B16
i16@0:8
@"CalDAVAgent"
@"<DAValidityCheckConsumer>"
@"NSMutableDictionary"
@"CoreDAVOptionsTask"
@"NSTimer"
@"<REMDAAccountPropertiesObserving>"
T@"NSString",&,N,V_previousETag
APSEnv
_attachmentType
APSTopic
_didFinishDownloadingWithError:
DAObjectForKeyCaseInsensitive:
_parseResponse:
T@"<DAEventsAttachmentDownloadConsumer>",W,N,V_consumer
_useSSL
T@"<REMDAAccountPropertiesObserving>",&,N,V_primaryCloudKitAccountPersonIDSaltChangeObserver
activeModalTask
T@"CoreDAVOptionsTask",&,N,V_optionsProbe
base64EncodedStringWithOptions:
T@"DACoreDAVTaskManager",R,N,V_taskManager
cancelTaskGroup
T@"MobileCalDAVAttachmentDownloader",W,N,V_downloader
context
T@"NSMutableDictionary",&,N,V_calendarAvailabilityRequests
fetchListIncludingSpecialContainerWithExternalIdentifier:error:
T@"NSMutableDictionary",&,N,V_shareResponses
interfaceWentUp
T@"NSString",&,N,V_accountDescription
isCalendarsOnly
T@"NSString",&,N,V_attachmentUUID
payloadAsString
T@"NSString",R,C
release
T@"NSString",R,N,V_attachmentUUID
removeConsumer:
T@"NSTimer",&,N,V_optionsTimeoutTimer
responseHeaders
T@"REMObjectID",R,N
setFullRefresh:
T@,R,N
shareResponseFinishedWithError:
TB,N,V_fullRefresh
startMonitoring
TB,N,V_shouldRegisterWithRefreshManager
.cxx_destruct
_attachmentSize
APSSubscriptionURL
_attachmentUUID
APSTopicHasValidPrefix:
_holdingDiscoveryGatekeeperLock
T#,R
_shareResponses
T@"<DAEventsCalendarSharingResponseConsumer>",W,N,V_consumer
account
T@"CalDAVAgent",W,N,V_consumer
address
T@"CoreDAVTaskGroup",&,N,V_currentOperation
calendarHomeURL
T@"DATrustHandler",R,N
containsObject:
T@"NSMutableDictionary",&,N,V_attachmentDownloadsByAttachmentUUID
dealloc
T@"NSMutableDictionary",&,N,V_directorySearches
initWithFormat:
T@"NSSet",R,N,V_consumers
isAuthenticated
T@"NSString",&,N,V_accountID
isProxy
T@"NSString",&,N,V_calendarID
pushKey
T@"NSString",R,N
rem_saveRequest
T@"NSString",R,N,V_responseID
removeObserver:
T@"REMObjectID",&,N,V_rem_accountObjectID
setDisplayName:
T@,&,N,V_refreshDidCompleteObserver
setResultLimit:
TB,N,V_forcedRefresh
shouldUseCalendarHomeSyncReport
TB,N,V_safeToRefresh
tokensAreLegal:
TQ,R
Ti,R,N,V_refreshReason
URLWithString:
UTF8String
UUID
UUIDString
_account
_accountDescription
_accountID
_attachmentDownloadDidFinish:
_attachmentDownloadsByAttachmentUUID
_attachmentURL
_calendarAvailabilityRequests
_calendarID
_cancelOptionsTimer
_consumer
_consumers
_continueRefresh
_convertRecordTypesToSearchTypes:
_createReplyGroupForReportingCalendarAsJunk:
_createReplyGroupForShareInviteResponse:toCalendar:
_currentOperation
_deleteSharingInvitationWithUID:
_didShowProgressDownloadedByteCount:
_directorySearches
_doSharingRequestResponseWithCreateReplyGroupBlock:
_downloader
_etag
_exceededResultLimit
_filterTermsForOldStyleSearch
_finishWithError:
_finished
_forcedRefresh
_fullRefresh
_handleResponseForTask:
_hasSubscribedCalendars
_holdingGatekeeperLock
_host
_lastRetryTimeout
_localFilename
_optionsProbe
_optionsTimeoutTimer
_performNewStyleSearch
_performOldStyleSearch
_persistAccountSyncDiagnostics:withContext:completionTime:willAttemptToRetry:hitInternalRefreshTimeout:error:
_port
_previousETag
_primaryCloudKitAccountPersonIDSaltChangeObserver
_probeAndSync
_rd_hashedAccountPersonIDWithSalt:
_rd_replacementHostnameForAccountPersonID
_rd_resetAccountPersonIDWithError:changeSource:
_rd_saveAccountPersonIDHashedWithSalt:changeSource:
_reallyBeginDownload
_reallyCancelAllSearchQueries
_reallyPerformSearch
_reallyPerformSearchQuery:
_reallyRespondToSharingRequestWithCreateReplyGroupBlock:
_recordTypes
_refresh
_refreshDidCompleteObserver
_refreshReason
_refreshSubscribedCalendarChildAccounts
_remAccount
_remAccountCache
_rem_account
_rem_accountObjectID
_rem_store
_rem_updateAccountProperties
_removeRefreshDidCompleteObserver
_responseID
_resultLimit
_safeToRefresh
_saveAttachmentDataToDatabase
_searchID
_serverProbeTimedOut
_setupNotifications
_shouldRefreshInResponseToDBChange:
_shouldRegisterAPS
_shouldRegisterWithRefreshManager
_taskManager
_terms
_updateWatchedCollections
_validateAndSync
_validateAndSync:
_validityCheckConsumer
_waiterID
_waitingForDiscoveryGatekeeper
_waitingForGatekeeper
_watchedCollections
aa_updatePropertiesForAppleAccount:completion:
absoluteString
account:isValid:validationError:
accountDescription
accountID
accountSyncDiagnostics
accountType
activeAgents
addConsumer:
addEntriesFromDictionary:
addObject:
addObserverForName:object:queue:usingBlock:
addUsernameToURL:
additionalHeaderValues
allValues
anyObject
attachmentDownloadsByAttachmentUUID
attachmentUUID
autorelease
backingAccountInfo
beginDownload
beginDownloadingAttachmentWithUUID:consumer:
bumpRefreshReason:
calDAVNotificationContext
calDAVNotifications
calDAVUserAddressForItem:
calendarAvailabilityRequests
calendarDirectorySearchFinishedWithError:exceededResultLimit:
calendarDirectorySearchIsGoingAway:
calendarDirectorySearchReturnedResults:
calendarID
calendarRefreshForPrincipal:completedWithNewCTags:newSyncTokens:calendarHomeSyncToken:updatedCalendars:error:
calendarRefreshFoundDeletedContainerURL:
calendarRefreshFoundUpdatedContainerWithIgnoredEntityType:
calendarRefreshFoundUpdatedSpecialContainer:
calendarRefreshMkCalendarSucceededForPrincipal:calendar:
calendarRefreshPropPatchFinishedWithError:forCalendar:
calendarRefreshShouldRetryMkCalendarForPrincipal:calendar:error:
calendarRefreshWillRefreshCalendar:
calendarRefreshWillSendCalendarDeletes:
calendarUserAddresses
calendars
cancel
cancelAllAttachmentDownloads
cancelAllCalendarDirectorySearches
cancelAllSharingRequests
cancelAllTasks
cancelCalendarDirectorySearchWithID:
cancelDownload
cancelDownloadingInstance:error:
cancelRefreshWithCompletion:
cancelShareResponseInstance:error:
class
code
collectionSetURL
conformsToProtocol:
connection:didReceiveData:
consumer
consumers
contextWithAttachmentUUID:consumer:
convertToMobileCalDAVRefreshReason:
copy
count
countByEnumeratingWithState:objects:count:
currentHandler
currentOperation
daExternalIdentificationTag
daIsNotificationsCollection
da_absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:
da_lowercaseHexStringWithoutSpaces
da_newGUID
da_trimWhiteSpace
da_urlBySettingHost:keepUsername:
daemonUserDefaults
dataclassProperties
date
debugDescription
defaultCenter
defaultContext
defaultDAVProbeTimeout
delegateDidCompleteRefresh:
description
directorySearches
disableMonitoringAgents
discoverInitialPropertiesWithConsumer:
displayAccount
domain
doubleValue
downloadFinishedError:
downloadProgressDownloadedByteCount:totalByteCount:
downloader
enableHashingUserIdentifiablesWithPersonIDSalt
enableMonitoringAgentsWithToken:
enabledForDADataclass:
enumerateChanges:forModelsOfClass:withBlock:
enumerateObjectsUsingBlock:
error
errorItem
errorWithDomain:code:userInfo:
externalIdentifier
extractDARefreshReasonFromContext:
fetchAccountWithExternalIdentifier:error:
fetchAndInitializeChangeTrackingStateIfNeeded
fetchChangesSinceLastConsumed
fetchListsIncludingSpecialContainersWithError:
finishCoreDAVTaskWithError:
finishWithError:
forcedRefresh
fullRefresh
getAppleIDSession
getDAAccount
handleFailureInMethod:object:file:lineNumber:description:
handleValidationError:completion:
hasPrefix:
hash
host
hostFromDataclassPropertiesForDataclass:
hrefs
identifier
init
initForLaunchingWithAccount:
initForReplyWithUID:href:hostURL:summary:
initWithAccount:
initWithAccountID:remAccountObjectID:accountDescription:
initWithAttachmentUUID:consumer:
initWithAttachmentUUID:forAccount:
initWithBackingAccountInfo:
initWithCalendarID:consumer:account:
initWithIdentifier:
initWithInvitation:acceptInvitation:atCalendarHomeURL:accountInfoProvider:taskManager:
initWithPrincipal:
initWithREMDAAccount:clientName:withREMStore:
initWithSearchStrings:atURL:
initWithSearchStrings:searchTypes:serverSupportSet:atURL:
initWithStore:
initWithTerms:recordTypes:resultLimit:consumer:account:
initWithURL:
interfaceWentDown
invalidate
isEnabledForDataclass:
isEqual:
isEqualToString:
isKindOfClass:
isManagedByServer
isMemberOfClass:
isMonitoring
isRefreshing
isSubscribed
isTruncated
isWaitingForPassword
launchingAgentWithAccount:
length
localizedDescription
loggingDescription
longLongValue
mainPrincipal
monitorFoldersWithIDs:
multiStatus
mutableCopy
name
namespaceAndNameForWellKnownType:
needsAccountPropertyRefresh
noteHomeSetOnDifferentHost:
notificationCollectionURL
numberOfMatchesWithinLimits
numberWithUnsignedInt:
objectForKey:
objectForKeyedSubscript:
objectID
observeReachabilityWithBlock:
onBehalfOfBundleIdentifier
optionsProbe
optionsTimeoutTimer
parentAccount
parentAccountIdentifier
password
performCalendarDirectorySearchForTerms:recordTypes:resultLimit:consumer:
performSearch
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
personID
port
portFromDataclassPropertiesForDataclass:
preferredAddress:
previousETag
primaryCloudKitAccountPersonIDSaltChangeObserver
principalURL
progressQueue
pushTokenForEnvironment:
rd_base64EncodedHMACStringFromString:usingPersonIDSalt:
rd_isPersonIDSaltInitiallyNilError:
rd_observePrimaryCloudKitAccountPersonIDSaltChanges
rd_observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges:
reallyRefresh
refreshActor:didCompleteWithError:
refreshCalendarProperties
refreshCollections:withReason:
refreshContext
refreshDidCompleteObserver
refreshDidCompleteWithError:
refreshFolderListRequireChangedFolders:isUserRequested:
refreshReason
refreshWithContext:
registerAccount:forOperationWithName:
registerConcernedRemindersParty:withChangedBlock:
registerDelegate:
registerTopic:forDelegate:inEnvironment:
registerWaiter:forDataclassLocks:completionHandler:
relativePath
relinquishLocksForWaiter:dataclasses:moreComing:
remObjectID
rem_account
rem_accountObjectID
rem_localDBWatcher
rem_provideAccountInfo
rem_saveRequestForDataAccess
rem_store
rem_storeForDataAccess
rem_storeProvider
removeAllObjects
removeCalDAVNotication:
removeConcernedRemindersParty:
removeFromParent
removeObject:
removeObjectForKey:
reportAsJunk
reportShareRequestAsJunkForCalendar:consumer:
requestAgentStopMonitoringWithCompletionBlock:
respondToShareRequestForCalendar:withResponse:consumer:
respondToSharingRequestWithResponse:
respondsToSelector:
responseID
responseWithCalendarID:consumer:account:
responses
retain
retainCount
retryRefreshForDelegate:withCollections:after:originalRefreshReason:
safeToRefresh
saveAccountProperties
saveSynchronouslyWithError:
saveVerifiedAccount:withCompletionHandler:
saveWithQueue:completion:
saveXpcActivity:
scheduleIdentifier
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
searchID
searchPropertySet
searchQuery:finishedWithError:
searchString
self
serverTokenRegistrationURL
setAccountDescription:
setAccountID:
setAccountInfoProvider:
setAttachmentDownloadsByAttachmentUUID:
setAttachmentUUID:
setAuthenticated:
setAuthor:
setCalendarAvailabilityRequests:
setCalendarID:
setCompletionBlock:
setConsumer:
setCurrentOperation:
setDelegate:
setDirectorySearches:
setDownloader:
setFindAttendees:
setFindGroups:
setFindLocations:
setFindResources:
setFindUsers:
setForcedRefresh:
setHost:
setIsCalendarsOnly:
setIsForced:
setIsMonitoring:
setIsWaitingForPassword:
setObject:forKey:
setObject:forKeyedSubscript:
setOptionsProbe:
setOptionsTimeoutTimer:
setPersonID:
setPort:
setPreferredAddress:
setPreviousETag:
setPrimaryCloudKitAccountPersonIDSaltChangeObserver:
setRefreshDidCompleteObserver:
setRem_accountObjectID:
setSafeToRefresh:
setShareResponses:
setShouldDoInitialAutodiscovery:
setShouldRegisterWithRefreshManager:
setShouldUpdatePushDelegate:
setShouldUseOpportunisticSockets:
setSyncWhenReachable:
setUseSSL:
setValue:forKey:
setWasDueToPush:
setWasUserInitiated:
setWasUserRequested:
shareResponseIsGoingAway:
shareResponses
sharedBabysitter
sharedGateKeeper
sharedManager
shouldAutodiscoverAccountProperties
shouldDoInitialAutodiscovery
shouldHandleHTTPCookiesForURL:
shouldRegisterWithRefreshManager
shouldRetry
shouldSendClientInfoHeaderForURL:
shouldUpdatePushDelegate
shutdown
simulateCrashWithMessage:
startTaskGroup
stopObservingReachability
stringByAppendingString:
stringWithFormat:
submitIndependentCoreDAVTask:
submitQueuedCoreDAVTask:
successfulPropertiesToValues
superclass
supportsAuthentication
supportsCalendarUserSearch
supportsReminders
syncFolderIDs:forDataclasses:isUserRequested:
task:didFinishWithError:
taskGroup:didFinishWithError:
taskManager
title
totalBytesReceived
transactionId
trustHandler
unregisterAccount:forOperationWithName:
unregisterDelegate:
unregisterTopic:forDelegate:inEnvironment:
unregisterWaiterForDataclassLocks:
updateAccount:
updateList:
useSSL
useSSLFromDataclassPropertiesForDataclass:
useThunderhillBetaServers
userInfo
username
uuidString
waiterID
wasDueToPush
wasUserRequested
watchedCollections
zone
Account "%@" is waiting for a password, so we're going to ignore this refresh request
Account doesn't have a principal URL. Running autodiscovery.
Account "%@" is refreshing in response to a calendar database change
DDDDDDDDDD: Registering %p for database change notifications to watcher %@
__CalDatabaseChangedExternally
Validation for account "%@" was cancelled, so we're not going to save the account properties we just discovered. Better luck next time.
Got a password from the user. Attempting autodiscovery again for "%@"
Account "%@" can't figure out its principalPath, and we couldn't get a password from the user 
Account "%@" can't figure out its principalPath. 
We'll refresh if we find a better network connection.
CalDAV has started monitoring for the account "%@"
reachability indicates that the network is reachable.  We're going to retry our folder sync.
The CalDAV agent was told to stop monitoring.
Unregistered %p for database change notifications
Refresh completed with this error: %@
We encountered a network error when refreshing. Scheduling a refresh for when the network reachability changes
Account "%@" was told to refresh its folder list
Account "%@" was told to sync the folders %@
Couldn't get an REMStore from %{public}@.
Couldn't get an REMSaveRequest from %{public}@.
Error when fetching account from ReminderKit %{public}@.
Could not find account from ReminderKit %{public}@.
Home set is on a different host. Fetching new AppleAccount properties
Updated account properties are %@
Backing parent AppleAccount was %@saved successfully.
Error fetching AppleAccount properties: %@
The attachment at %@ hasn't been modified since we last saw it.
Couldn't download the attachment at %@: %@
Finished downloading the file at %@. Saving to the database.
etag for attachment on the server is %@. Our etag is %@
Downloading attachment of size %lld
XXXXXXXXX: ERROR: Should not enter! No attachment support in Reminders.
Notifying consumers of progress: %lld/%lld
Done downloading attachment %@.%@%@
Stupid hack to get %@ retained
Starting new attachment download for consumer %p and attachment UUID %@
Cancelling new attachment download for consumer %p and attachment UUID %@
Cancelling All attachment downloads
XXXXXXXXX: remindd.DataAccess should disable add/modify/delete calendars for Facebook CalDAV account: %@.
DATransaction starting, ID: %@
Waiting on the gatekeeper before issuing a calendar directory search
New-style search (%@) not supported.  Falling back to old-style search (%@).
Removing calendar directory search term because it is less than [%lu] characters in length: [%@]
Removing remaining calendar directory search term because it is less than [%lu] characters in length: [%@]
After filtering calendar directory search terms, none are left.  Will not proceed with search.
Starting calendar search task: [%@]
Calendar directory search terms are not legal.  Will not proceed with search.
Calendar search task complete: [%@].  Error: [%@]
Number of matches exceeded the limit of: [%lu]
Encountered result with displayName: [%@]
Unexpected parsing of calendar-user-address-set: %@
No href items found for calendar-user-address-set: [%@]
Found calendar user address: [%@]
Calendar user type: [%@]
Known calendar user type encountered but not handled: [%@]
Unrecognized calendar user type encountered during directory search: [%@]
Record type: [%@]
Unrecognized record type encountered during directory search: [%@]
Releasing gatekeeper lock
[%@] finished with error %@
Stupid hack to keep %@ from getting released too early
MobileCalDAVSharingResponse: ERROR: Failed to fetch lists in account for _deleteSharingInvitationWithUID {accountID: %@, uid: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: LOOKATME: Failed to fetch the notification calendar for _deleteSharingInvitationWithUID {accountID: %@, uid: %@, responseID: %@}
MobileCalDAVSharingResponse: LOOKATME: Couldn't find a sharing invite notification for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Matched invitation notification for _deleteSharingInvitationWithUID with {uid: %@, objectID: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: LOOKATME: Couldn't get an external ID from the invite notification for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Delete task at _deleteSharingInvitationWithUID finished with {url: %@, error: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: ERROR: Remove invite notification failed when trying to _deleteSharingInvitationWithUID: {objectID: %@, uid: %@, accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: Successfully removed invite notification at _deleteSharingInvitationWithUID: {objectID: %@, uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: Didn't send a delete for the sharing invitation for _deleteSharingInvitationWithUID with {uid: %@, accountID: %@, calendarID: %@, responseID: %@}
MobileCalDAVSharingResponse: ERROR: Failed to fetch an REMList to _reallyRespondToSharingRequestWithCreateReplyGroupBlock {accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVSharingResponse: ERROR: Failed to save delete of the shared invite-pending calendar when _reallyRespondToSharingRequestWithCreateReplyGroupBlock {objectID: %@, listGUID: %@, account: %@, error: %@}
MobileCalDAVSharingResponse: SUCCESS: _reallyRespondToSharingRequestWithCreateReplyGroupBlock: Deleted shared invite-pending calendar {objectID: %@, listGUID: %@, account: %@, error: %@}
MobileCalDAVSharingResponse: Reply to shared calendar invitation task group %@ finished with optional error %@
MobileCalDAVSharingResponse: DATransaction starting, ID: %@
MobileCalDAVSharingResponse: Waiting on the gatekeeper before responding to a calendar share request {consumer: %@}
MobileCalDAVSharingResponse: Sending shared calendar invite %@ for invite to "%@" of with uid %@ at URL %@
MobileCalDAVSharingResponse: Releasing gatekeeper lock
MobileCalDAVSharingResponse finished with {%p, error: %@, consumer: %@}
MobileCalDAVSharingResponse: ERROR: Failed to fetch an REMAccount for MobileCalDAVSharingResponse {accountID: %@, calendarID: %@, responseID: %@, error: %@}
MobileCalDAVDaemonAccount %p starting up.
MobileCalDAVDaemonAccount %p going away
Bumping _refreshReason {_refreshReason: %d, newRefreshReason: %d}
Ignoring newRefreshReason becuase it's lower than _refreshReason {_refreshReason: %d, newRefreshReason: %d}
Cancelling CalDAV refresh.
Cancel complete. Unregistering ourself as a gatekeeper waiter
MobileCalDAVDaemonAccount(RefreshDidComplete) observer cleaned up
Updating watched collections for %luu calendars
Push key for calendar "%@" is %{public}@
Kicking off a refresh of subscribed calendars for %@
Found a child SubCal account: %@
Refresh complete. Releasing gatekeeper lock and notifying PersistentConnection
Notifying consumer about our refresh completion
Refusing to register for the topic "%{public}@" because it has an invalid prefix.
The server returned precondition failure to our bulk upload. Retrying in a bit.
The server returned a 503 error and told us to try again in %f seconds
We'll retry again after %f seconds
We've already backed off for 7 minutes. Giving up and retrying again at our regularly scheduled time
Received a success response from server while account is not marked as authenticated. Set isAuthenticated flag and save account %@
Dropping search query "%@" because the agent is shut(ting) down.
Found calendar changes for account "%@"
Found task changes for account "%@"
Do not refresh on daemon launch, we have RDSyncPoller does this.
Account Properties Need to Be Refreshed. Allowing Refresh to Continue..
[CalDAVAccountID %{public}@] %{public}@ Account Refresh as we %{public}@ local DB changes or account properties need refresh or suppressed on daemon launch {_refreshReason: %{public}@}
Gatekeeper gave us the goahead. Refreshing CalDAV %{public}@account with ID %{public}@. Reason: %x
We shouldn't be entering _continueRefresh when doing account prop discovery {accountID: %{public}@, refresh reason: %x}
There's no need for us to refresh right now as there are no changes in our local database %@
Manually register APS topic since we rejected normal refreshing on daemon launch {APSTopic: %{public}@, accountID: %{public}@}
Account "%@" was told to refresh, but it is disabled for calendars. Refusing to refresh.
_refresh: LOOKATME! Couldn't fetch an REM account when trying to sync, perhaps deleted in race conditions? Now disabling and re-enabling the agents... {acctID: %{public}@}.
Let's ensure change tracking state exist for account: %{public}@ (%@).
_refresh called for account %{public}@. Forced:%d full:%d reason: %x
Refresh fired. Requesting lock from gatekeeper.
This account has been put in timeout by the babysitter. Failing this sync. %@
Dropping folder refresh request since a full sync is already in progress
_refresh: DATransaction starting, ID: %{public}@
Our gatekeeper locks were aborted while we were still waiting for a lock. What gives? txnID: %{public}@
The options task timer fired, but the task manager is modal. We'll wait until it drops modal before tearing down this task.
We weren't able to reach the server at %@ within %lf seconds. Bailing out of this refresh early.
Discovery task got account %@ {isValid: %d, validationError: %@}.
discoverInitialPropertiesWithConsumer: DATransaction starting, ID: %{public}@
Already holding (or waiting for) a gatekeeper lock, so skipping this property discovery request
Ignoring probe request for "%@" as we're already in the middle of a refresh
Ignoring probe request for "%@" as we already have one outstanding
Probing the host at %@ to see if we have a good enough network connection. We'll wait up to %lf seconds.
Account "%@" couldn't reach the server at %@: %@
We were able to reach the server at %@. Continuing with the refresh
Account "%@" was told to refresh its collections with reason %d
Account "%@" was told it is safe to refresh. Kicking off a refresh.
Account "%@" is beginning to monitor these folders: %{public}@
-[MobileCalDAVDaemonAccount _rd_hashedAccountPersonIDWithSalt:] {calendarHomeURL: %@, account: %@, type: %@, replacementHost: %@}
MobileCalDAVDaemonAccount could not get the CalDAV REMAccount to update personID {accountID: %{public}@, changeSource: %{public}@}
MobileCalDAVDaemonAccount failed generate a hashed personID from the salt {remAccount: %{public}@, changeSource: %{public}@, salt: %@}
MobileCalDAVDaemonAccount failed to save personID {remAccount: %{public}@, changeSource: %{public}@, saveError: %@}
MobileCalDAVDaemonAccount saved account personID {remAccount: %{public}@, changeSource: %{public}@, newPersonID: %@, oldPersonID: %@, salt: %@}
MobileCalDAVDaemonAccount could not get the CalDAV REMAccount to reset personID {accountID: %{public}@, changeSource: %{public}@, saltError: %{public}@}
MobileCalDAVDaemonAccount failed to reset personID to nil {remAccount: %{public}@, changeSource: %{public}@, saltError: %{public}@, saveError: %@}
MobileCalDAVDaemonAccount has reset account personID to nil {remAccount: %{public}@, changeSource: %{public}@, saltError: %{public}@, oldPersonID: %@}
MobileCalDAVDaemonAccount is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}@}
MobileCalDAVDaemonAccount instance is no longer available upon our RDAccountPersonIDSaltObserver success handler is called {logTracingID: %{public}@}
MobileCalDAVDaemonAccount received a primary CK account personIDSalt change or initial value {observer: %{public}@, logTracingID: %{public}@, isRefreshing?: %d}
MobileCalDAVDaemonAccount instance is no longer available when received refreshDidComplete after waiting for it at RDAccountPersonIDSaltObserver success handler {logTracingID: %{public}@}
MobileCalDAVDaemonAccount(RefreshDidComplete) now actually handling the received primary CK account personIDSalt change or initial value {observer: %{public}@, logTracingID: %{public}@}
MobileCalDAVDaemonAccount instance is no longer available upon our RDAccountPersonIDSaltObserver error handler is called {logTracingID: %{public}@}
MobileCalDAVDaemonAccount received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}
MobileCalDAVDaemonAccount started observing primary CK account personIDSalt changes: %{public}@
MobileCalDAVDaemonAccount stopped observing primary CK account personIDSalt changes: %{public}@
v8@?0
v24@?0q8@"NSError"16
%@:<%@>
v20@?0B8@"NSError"12
NOT 
CardDAViCloudDaemonAccount
com.apple.dataaccess.caldav.attachmentDownload
com.apple.dataaccess.caldav.attachmentDownload.%@
X-ANTICIPATED-CONTENT-LENGTH
 Error was: 
MobileCalDAVAttachmentSupport.m
You can't tell us to download an attachment without providing an attachment UUID
You can't download an attachment without setting a consumer
You must provide a download instance to cancel
Didn't find an attachment UUID in the download context
webdav.beta.facebook.com
GROUP
INDIVIDUAL
RESOURCE
ROOM
UNKNOWN
MobileCalDAVDirectorySearch.m
Should be finished before we dealloc
terms: [%@], recordTypes: [%@] resultLimit: [%lu] consumer: [%p], account: [%p]
v20@?0q8B16
v24@?0@"NSString"8^B16
v24@?0@"NSString"8@"NSString"16
@"CoreDAVItem"12@?0i8
users
locations
groups
resources
v24@?0@"CoreDAVResponseItem"8^B16
MobileCalDAVSharingSupport.m
v32@?0@"REMList"8Q16^B24
v32@?0@"REMCalDAVNotification"8Q16^B24
Invalid parameter not satisfying: %@
notificationContext
@"CoreDAVTaskGroup"16@?0@"REMList"8
accept
decline
You can't tell us to respond to a calendar share request without providing a calendar ID
You can't respond to a calendar share without setting a consumer
You must provide a share instance to cancel
com.me.
com.apple.calendar.
com.icloud.
CalDAVRefresh
retry-after
v24@?0@"REMChangeObject"8q16
Starting
Blocking
have
do not have
calendars for 
CalDAVValidityCheck
CalDAVProbe
DAAPSTokenURL
<rdar://problem/37173724>. Consumer class: [%@]
MobileCalDAVDaemonAccount.m
salt.length
.CalDAV
v16@?0@"NSError"8
saltError != nil
!strongSelf.isRefreshing
v16@?0@"NSNotification"8
v16@?0@"NSData"8
CalDAVAgent
DAValidityCheckConsumer
NSObject
ReminderKitExtensions
REMDAAccountInfo
REMDAAccountProviding
MobileCalDAViCloudDaemonAccount
CalDAVGetToFileWithProgressTask
MobileCalDAVAttachmentDownloader
DADataclassLockWatcher
CoreDAVTaskDelegate
MobileCalDAVDownloadContext
AttachmentSupport
MobileCalDAVFacebookDaemonAccount
MobileCalDAVDirectorySearch
CalendarDirectorySearchSupport
MobileCalDAVSharingResponse
CalDAVCalendarPropertyRefreshDelegate
CoreDAVTaskGroupDelegate
SharingSupport
MobileCalDAVDaemonAccount
DARefreshManagerDelegate
DABabysittable
remindd_Additions
@24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v36@0:8@16B24@28
v36@0:8@"DAAccount"16B24@"NSError"28
v16@0:8
v24@0:8@?16
v24@0:8@16
v24@0:8B16B20
v36@0:8@16q24B32
@"REMObjectID"16@0:8
@40@0:8@16@24@32
@"NSString"
@"REMObjectID"
v20@0:8B16
v24@0:8q16
q16@0:8
v32@0:8@16@24
@"MobileCalDAVAttachmentDownloader"
v32@0:8@"CoreDAVTask"16@"NSError"24
@32@0:8@16@24
@"MobileCalDAVDaemonAccount"
@"NSMutableSet"
@"NSURL"
@"DACoreDAVTaskManager"
@"<DAEventsAttachmentDownloadConsumer>"
@56@0:8@16@24Q32@40@48
@"NSSet"
@"<DAEventsCalendarDirectorySearchResponseConsumer>"
@48@0:8@16@24Q32@40
v32@0:8@"CoreDAVTaskGroup"16@"NSError"24
v64@0:8@16@24@32@40@48@56
B40@0:8@16@24@32
v64@0:8@"<CalDAVPrincipal>"16@"NSDictionary"24@"NSDictionary"32@"NSString"40@"NSSet"48@"NSError"56
B40@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24@"NSError"32
v32@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24
v24@0:8@"CalDAVContainer"16
v24@0:8@"NSURL"16
v24@0:8@"<CalDAVCalendar>"16
v32@0:8@"NSError"16@"<CalDAVCalendar>"24
v24@0:8@"CalDAVCalendarPropertyRefreshOperation"16
@32@0:8q16@24
@"<DAEventsCalendarSharingResponseConsumer>"
@"CoreDAVTaskGroup"
@"REMAccount"
@40@0:8@16q24@32
i24@0:8@16
i20@0:8i16
v28@0:8@16i24
v28@0:8@"NSSet"16i24
@"NSSet"16@0:8
@"DAAccount"16@0:8
v24@0:8@"NSObject<OS_xpc_object>"16
@"DATrustHandler"16@0:8
@"NSURL"16@0:8
v20@0:8i16
v56@0:8@16@24@32B40B44@48
B24@0:8^B16
i16@0:8
@"CalDAVAgent"
@"<DAValidityCheckConsumer>"
@"NSMutableDictionary"
@"CoreDAVOptionsTask"
@"NSTimer"
@"<REMDAAccountPropertiesObserving>"
