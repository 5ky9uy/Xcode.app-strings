com.apple.SafariBookmarksSyncAgent.Push
v8@?0
com.apple.icloud-container.
CloudExtensions
CloudExtensionZoneSubscription
com.apple.SafariBookmarksSyncAgent.CloudExtensions.CloudExtensionStore.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.CloudExtensions.CloudExtensionStore.%@.%p.internalQueue
com.apple.SafariBookmarksSyncAgent.CloudExtensions.CloudExtensionStore.%@.%p.completionHandlerQueue
v24@?0@"NSDictionary"8@"NSError"16
v16@?0@"NSError"8
v24@?0@"CKSubscription"8@"NSError"16
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v24@?0@"CKRecord"8@"NSError"16
v16@?0@"CKRecord"8
v24@?0@"CKRecordID"8@"NSString"16
B16@?0@"NSError"8
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
com.apple.das.overrideRateLimiting
com.apple.private.safari.can-use-bookmarks-sync-agent
DebugHierarchyCheckerEnabled
LastDatabaseServerChangeToken.
CloudSettings
NewestLaunchedSafariBookmarksSyncAgentVersion
604.4
Bookmarks Sync Agent State
localMigrationState
@"NSDictionary"8@?0
com.apple.Safari.CloudBookmarks.SafariBookmarksSyncAgent.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.ActivityCheckInQueue
com.apple.SafariBookmarksSyncAgent.CustomizationSyncQueue
SafariSyncController determine encryption state of cloud settings container transaction
does
does not
v24@?0@"CKAccountInfo"8@"NSError"16
Safari
v24@?0q8@"NSError"16
v24@?0@"WBSCloudBookmarksRemoteMigrationInfo"8@"NSError"16
v16@?0@"NSArray"8
SafariSyncController get CloudTabRemoteStore transaction
v16@?0@"CloudTabRemoteStore"8
SafariSyncController save Per-Site Setting transaction
v24@?0@"NSString"8@"NSError"16
v16@?0@"NSDictionary"8
v20@?0@"NSData"8B16
UndefinedDeviceClass
DeviceClassNumber
iPhone
iPad
default
v16@?0@"NSTimer"8
data
isLightAppearance
SafariSyncController delete Safari background image transaction
SafariSyncController perform per site setting sync transaction
v20@?0@"NSSet"8B16
SafariSyncController perform customization sync transaction
SafariSyncController save extension states transaction
SafariSyncController save extension device transaction
SafariSyncController get extension states transaction
v32@?0@"NSDictionary"8@"NSArray"16@"NSError"24
SafariSyncController delete extension devices transaction
SafariSyncController delete extension states database transaction
@"NSDictionary"16@?0@"WBTabGroup"8
0.0.0
Sync Delay Timer After Push Notification Transaction
v16@?0@"CKRecordZoneID"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
Push Notification Database Changes Check
SafariSyncController network connectivity XPC activity check in transaction
SafariSyncController perform bookmark sync transaction
SafariSyncController fetch remote migration state transaction
v32@?0q8@"NSString"16@"NSError"24
v16@?0q8
v24@?0@"NSObject<OS_xpc_object>"8@?<v@?BB>16
Cloud Tabs Notification Transaction
SafariSyncController update Safari's local settings transaction
SafariSyncController delete Safari's local background image transaction
SafariSyncController saving Safari's Page Zoom sync data to disk
v16@?0B8B12
v16@?0@"NSObject<OS_xpc_object>"8
CloudKit Subscription Request
v24@?0Q8@"NSError"16
B32@?0Q8@"CKSubscription"16@"NSError"24
v12@?0B8
SafariSyncController perform tab groups sync transaction
User Did Update Database
Received Push Notification
Account Added
Zone Creation
Account Modified
Local Client Finished Syncing
PCS Identities Changed
The attempted operation requires an entitlement
com.apple.SafariBookmarksSyncAgent.XPC.BookmarkSyncNetworkConnectivity
com.apple.SafariBookmarksSyncAgent.XPC.InitialManateeCloudTabFetchRetry
Bookmarks
CloudKit Tabs
Tab Groups Private Database
Tab Groups Shared Database
Customization Sync
Extension State Sync
com.apple.SafariBookmarksSyncAgent.XPC.ZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.PeriodicRemoteMigrationStateObserver
com.apple.SafariBookmarksSyncAgent.migration
com.apple.SafariBookmarksSyncAgent.XPC.TabGroupSyncNetworkConnectivity
<None>
Update Remote
Update Local
Update Local Parent Or Position
Delete Local
Undelete Local
<%@>
B16@?0@"CloudBookmarkItemConfiguration"8
+[CloudBookmark cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:]
Deleted
+[CloudBookmark cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:]
ParentAndPosition
-[CloudBookmark _initWithChange:databaseAccessor:updater:]
ParentFolder
MinimumAPIVersion
Position
v32@?0@"NSString"8@"NSURL"16^B24
v32@?0@"NSString"8@16^B24
v24@?0@"NSString"8@16
v32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"WBSCRDTGeneration"16^B24
Folder
Bookmark
Move
Modify
Delete
CKBAItemTypeBookmark
CKBAItemTypeFolder
<Unknown CKBABookmarkType %ld>
CKBAFolderTypeRegular
CKBAFolderTypeFavorites
CKBAFolderTypeBookmarksMenu
CKBAFolderTypeReadingList
CKBAFolderTypeTabGroupScopedBookmark
<Unknown CKBAFolderType %ld>
cloudBookmarkAccountIdentityDidChange
cloudBookmarkAccountPropertiesDidChange
primaryAccount
ccom.apple.Safari.CloudBookmarks.CloudExtensionSyncCoordinator.extensionStateSavingQueue
com.apple.Safari.CloudBookmarks.CloudExtensionSyncCoordinator.extensionStateFetchingQueue
Cloud Extension State Saving
Cloud Extension Device Deleting
Cloud Extension State Fetching
v16@?0@"CloudExtensionDevice"8
v16@?0@"NSData"8
v16@?0@"CKRecordID"8
v32@?0@"CKServerChangeToken"8@"NSData"16@"NSError"24
v12@?0i8
@"NSDictionary"16@?0@"CloudExtensionDevice"8
CloudExtensions.db
Bookmarks-Backup-for-31802262
http
TitleAndIdentityHash
TitleURLAndIdentityHash
TabGroupTabParticipantPresence
Participant
TabGroupTab
Lock
UserTabGroupPresence
UserPresence_
com.apple.Safari.CloudBookmarks.CloudTabGroupPresenceUpdater.%@.%p._processUpdateQueue
v24@?0@"CKRecordID"8@"NSError"16
v28@?0@"CKRecord"8B16@"NSError"20
com.apple.Safari.CloudBookmarks.CloudBookmarkDatabaseHandler.%@.%p.imageSavingQueue
Asset temporary or destination URL was not available.
CloudBookmarksOverrideDeviceIdentifier
CloudSettingsZoneSubscription
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.internalQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.completionHandlerQueue
Cloud Settings Encryption Info Fetching
v24@?0@"CKRecordZone"8@"NSError"16
31742989
32414244
v32@?0@"NSString"8@"NSString"16^B24
q24@?0@"NSString"8@"NSString"16
q24@?0@"WBSCRDTPosition"8@"WBSCRDTPosition"16
CloudExtensionDevice
CloudExtensionState
com.apple.Safari.CloudBookmarks
Errors
v32@?0@8@"NSError"16^B24
_generation
_deviceIdentifier
SyncRequirements
MinimumSyncAPIVersion
EncryptionInfo
KeyID
MigrationState
MigratorDeviceIdentifier
metadata_device_type
DeviceOSType
DeviceOSVersion
DeviceOSBuild
DeviceOSVersionNumber
DeviceSoftwareBundleId
DeviceSoftwareVersion
Tab Collection Maintenance
com.apple.SafariBookmarksSyncAgent.%@.%p
Tab Collection Maintenance Transaction
com.apple.SafariBookmarksSyncAgent.XPC.TabCollectionMaintenance
Migration coordinator
CloudBookmarksDebugDelayInSecondsBeforeStealingRightToMigrate
v24@?0@"NSError"8@?<v@?>16
DestinationDevice
TabURL
TabUUID
DestinationDeviceUUID
LastModified
DictionaryType
CloseTabRequest
<%@: %p; tabURL = "%@"; tabUUID = "%@"; destination device uuid = "%@";
BookmarkList
BookmarkLeaf
TabGroup
TabGroupScopedBookmarkList
TabGroupScopedBookmarkLeaf
IdentityHash
PreviewTextAndHasUserDefinedPreviewText
Title
DateAdded
DateLastViewed
ImageURL
PreviewText
HasUserDefinedPreviewText
B16@?0@"CKRecord"8
IsSelectedFavoritesFolder
LastSelectedTab
BackgroundImage
IsPinned
Cloud Settings Data Fetching
Cloud Settings Data Saving
Cloud Settings Data Deletion
Cloud Settings Background Image Saving
customizationSyncServerToken
settingsSyncAccountHash
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16@"NSError"24
cloudBookmarkDidDetectBug
bugIDs
CloudBookmarkStoreErrorDomain
Cloud Bookmark Migration State Check
ZoneSubscription
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.internalQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.completionHandlerQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.operationQueue
Cloud Bookmark Migration From DAV
Cloud Bookmark Subscription Request
Tab Groups Subscription Request
v24@?0@"WBSHashGenerator"8@"NSError"16
v48@?0@"WBSRetryableCKModifyRecordZonesOperation"8@"CloudBookmarkStore"16@"NSArray"24@"NSArray"32@"NSError"40
v32@?0@"WBSRetryableCKModifyRecordsOperation"8@"CloudBookmarkStore"16@"NSError"24
v48@?0@"WBSRetryableCKModifyRecordsOperation"8@"CloudBookmarkStore"16@"NSArray"24@"NSArray"32@"NSError"40
v32@?0@"CloudBookmarkStore"8@"CKRecordZoneID"16@"NSError"24
@"CKRecordID"16@?0@"CKRecordZoneID"8
v40@?0@"CloudBookmarkStore"8@"CKRecord"16@"CKRecordID"24@"NSError"32
v40@?0@"WBSRetryableCKFetchRecordsOperation"8@"CloudBookmarkStore"16@"NSDictionary"24@"NSError"32
v24@?0@"CloudBookmarkStore"8@"CKRecordZoneID"16
v44@?0@"WBSRetryableCKFetchDatabaseChangesOperation"8@"CloudBookmarkStore"16@"CKServerChangeToken"24B32@"NSError"36
v40@?0@"CloudBookmarkStore"8@"CKRecordID"16@"CKRecord"24@"NSError"32
v32@?0@"CloudBookmarkStore"8@"CKRecordID"16@"NSString"24
v52@?0@"CloudBookmarkStore"8@"CKRecordZoneID"16@"CKServerChangeToken"24@"NSData"32B40@"NSError"44
v32@?0@"WBSRetryableCKFetchRecordZoneChangesOperation"8@"CloudBookmarkStore"16@"NSError"24
v16@?0@"WBSRetryableCKModifyRecordsOperation"8
@"CKRecordID"32@?0@"CKRecord"8Q16^B24
v32@?0@"CloudBookmarkStore"8@"CKRecordID"16@"NSError"24
v40@?0@"CloudBookmarkStore"8@"NSURL"16@"CKShareMetadata"24@"NSError"32
v32@?0@"WBSRetryableCKFetchShareMetadataOperation"8@"CloudBookmarkStore"16@"NSError"24
v40@?0@"CloudBookmarkStore"8@"CKUserIdentityLookupInfo"16@"CKShareParticipant"24@"NSError"32
B16@?0@"CKShareParticipant"8
v24@?0@"CKShare"8@"NSError"16
v32@?0@"WBSRetryableCKFetchShareParticipantsOperation"8@"CloudBookmarkStore"16@"NSError"24
v40@?0@"CloudBookmarkStore"8@"CKShareMetadata"16@"CKShare"24@"NSError"32
v32@?0@"WBSRetryableCKAcceptSharesOperation"8@"CloudBookmarkStore"16@"NSError"24
v16@?0@"WBSRetryableCKFetchSubscriptionsOperation"8
v40@?0@"WBSRetryableCKFetchSubscriptionsOperation"8@"CloudBookmarkStore"16@"NSDictionary"24@"NSError"32
v16@?0@"WBSRetryableCKModifySubscriptionsOperation"8
v48@?0@"WBSRetryableCKModifySubscriptionsOperation"8@"CloudBookmarkStore"16@"NSArray"24@"NSArray"32@"NSError"40
v40@?0@"WBSRetryableCKFetchRecordZonesOperation"8@"CloudBookmarkStore"16@"NSDictionary"24@"NSError"32
v24@?0@"NSArray"8@"NSError"16
@"CKRecordID"16@?0@"NSString"8
@"NSString"24@?0@"CKRecordID"8^B16
metadata_zone
MigrationStateEncodedRecordData
TabGroupMigrationStateEncodedRecordData
ComposedIdentifier
ContainingAppAdamID
DisplayName
Enabled
EnabledByUserGesture
OwningDevice
IOSAppBundleIdentifier
IOSExtensionBundleIdentifier
MacOSAppBundleIdentifier
MacOSExtensionBundleIdentifier
v32@?0@"NSString"8@"NSDictionary"16^B24
<%@: %p; composedIdentifier = "%@"; containingAppAdamID = "%@"; displayName = "%@"; lastModifiedDate = "%@"; owning device uuid = "%@"; isEnabled = %d; wasEnabledByUserGesture = %d>
Sync coordinator
com.apple.Safari.CloudBookmarks.CloudBookmarkSyncCoordinator.%@.%p.imageSavingQueue
v20@?0q8B16
v16@?0@"WBSCloudBookmarksRemoteMigrationInfo"8
@"CloudBookmark"16@?0^B8
record
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16q24
32548082
Asset temporary url or destination URL was not available.
v32@?0@"NSSet"8@"NSSet"16@"NSError"24
v24@?0@"NSSet"8@"NSError"16
Subtitle
SymbolName
ExtraAttributes
Metadata
Children
@"CloudTabGroupSyncEvent"16@?0@"NSDictionary"8
%@ - %@
dictionaryRepresentation
v16@?0@"CloudTabSyncCoordinator"8
v16@?0B8i12
v24@?0@"NSArray"8@"NSArray"16
CloudTabs.db
Sync migration coordinator
(null)
deviceIdentifier
hasAccountHash
changes
localBookmarks
domain
code
description
remoteMigrationStateError
remoteMigrationState
migratorDeviceIdentifier
AwaitingMigration
InProgress
Finished
Unknown
changeType
itemType
serverID
modifiedAttributes
hasSyncData
hasCKRecord
hasPosition
hasTitleGeneration
count
addCount
deleteCount
moveCount
modifyCount
summary
details
bookmarksCount
foldersCount
title
children
isFavorites
IsTabGroup
isTabGroup
folderType
bookmarkType
Regular
Favorites
ReadingList
BookmarksMenu
TabGroupFavorites
CloudTabs
CloudTabsZoneSubscription
com.apple.Safari.CloudBookmarks.CloudTabRemoteStore.%@.%p.operationQueue
CloudTab
TabGroupSyncDebuggerEnabled
TabGroupSyncDebugger.plist
Change Tag
Record Name
Record Type
Zone Name
Library/Safari
Sync Up
icloud.and.arrow.up
Sync Down
icloud.and.arrow.down
square.on.square
square.text.square
folder
bookmark
person.crop.circle
record.circle
@"NSDictionary"16@?0@"CloudTabGroupSyncEvent"8
Fetch Zone Changes
square.and.arrow.down
Last Server Change Token
v32@?0@"CKRecordZoneID"8@"CKFetchRecordZoneChangesConfiguration"16^B24
Send Batch
paperplane
Save Record
Fetched Record
B16@?0@"CloudTabGroupSyncEvent"8
Sync Manager
TabGroupsPrivateDatabaseSubscription
TabGroupsSharedDatabaseSubscription
TabGroupsZoneSubscription
v32@?0@"CKRecordID"8@"CKShare"16@"NSError"24
com.apple.SafariBookmarksSyncAgent.%@.%p._tabCollectionQueue
Cloud Tab Groups Sync (%@)
Cloud Tab Groups Migration
Cloud Tab Groups Accept Shared Tab Group
v32@?0q8@"CKShare"16@"NSError"24
Cloud Tab Groups Setup Shared Tab Group
Cloud Tab Groups Update Tab Group Presence
Cloud Tab Groups Accept Share
com.apple.Safari.CloudBookmarks.CloudExtensionSQLiteStore
DELETE FROM cloud_extension_devices WHERE device_uuid = ?
DELETE FROM cloud_extension_states WHERE record_name = ?
CREATE TABLE cloud_extension_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,last_modified REAL NOT NULL,new_tab_page_composed_identifier TEXT,new_tab_page_set_by_user_gesture BOOLEAN DEFAULT 0,new_tab_page_last_modified REAL NOT NULL)
CREATE TABLE cloud_extension_states (record_name TEXT PRIMARY KEY NOT NULL,composed_identifier TEXT NOT NULL,system_fields BLOB NOT NULL,owning_device_uuid TEXT NOT NULL,containing_app_adam_id TEXT,display_name TEXT NOT NULL,is_enabled BOOLEAN DEFAULT 0,was_enabled_by_user_gesture BOOLEAN DEFAULT 0,ios_app_bundle_identifier TEXT,ios_extension_bundle_identifier TEXT,mac_app_bundle_identifier TEXT,mac_extension_bundle_identifier TEXT,last_modified REAL NOT NULL,FOREIGN KEY(owning_device_uuid) REFERENCES cloud_extension_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_extension_states__owning_device_uuid ON cloud_extension_states (owning_device_uuid)
CREATE TABLE metadata (key TEXT NOT NULL UNIQUE, value)
DROP TABLE IF EXISTS cloud_extension_devices
DROP TABLE IF EXISTS cloud_extension_states
DROP TABLE IF EXISTS metadata
SELECT device_uuid, system_fields, device_name, last_modified, new_tab_page_composed_identifier, new_tab_page_set_by_user_gesture, new_tab_page_last_modified FROM cloud_extension_devices
SELECT system_fields, device_name, last_modified, new_tab_page_composed_identifier, new_tab_page_set_by_user_gesture, new_tab_page_last_modified FROM cloud_extension_devices WHERE device_uuid = ?
INSERT INTO cloud_extension_devices (device_uuid, system_fields, device_name, last_modified, new_tab_page_composed_identifier, new_tab_page_set_by_user_gesture, new_tab_page_last_modified)VALUES (?, ?, ?, ?, ?, ?, ?)ON CONFLICT(device_uuid) DO UPDATE SET device_uuid = ?1, system_fields = ?2, device_name = ?3, last_modified = ?4, new_tab_page_composed_identifier = ?5, new_tab_page_set_by_user_gesture = ?6, new_tab_page_last_modified = ?7
SELECT composed_identifier, system_fields, containing_app_adam_id, display_name, is_enabled, was_enabled_by_user_gesture, ios_app_bundle_identifier, ios_extension_bundle_identifier, mac_app_bundle_identifier, mac_extension_bundle_identifier, last_modified, record_name FROM cloud_extension_states WHERE owning_device_uuid = ?
INSERT OR REPLACE INTO cloud_extension_states (record_name, composed_identifier, system_fields, owning_device_uuid, containing_app_adam_id, display_name, is_enabled, was_enabled_by_user_gesture, ios_app_bundle_identifier, ios_extension_bundle_identifier, mac_app_bundle_identifier, mac_extension_bundle_identifier, last_modified)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
v24@?0@"NSString"8@"NSString"16
Migration state lock arbiter property
DeviceName
NewTabPageComposedIdentifier
NewTabPageLastModified
NewTabPageSetByUserGesture
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; composedIdentifierForNewTabPage = "%@"; newTabPageSetByUserGesture = %@; lastModifiedDateForNewTabPage = %@;  cloudExtensionStates = (
    %@
    
B32@?0@"CloudExtensionState"8Q16^B24
IsShowingReader
ReaderScrollPositionPageIndex
OwningSceneID
pageIndex
ReaderScrollPosition
UUID
<%@: %p; title = "%@"; url = "%@"; uuid = "%@"; owning device uuid = "%@"; owning sceneID = "%@"; position = %@; isShowingReader = %d; readerScrollPositionPageIndex = %@; isPinned = %d>
server_change_token
Library/Safari/
PRAGMA foreign_keys = ON
db-lock
db-shm
db-wal
PRAGMA user_version = %d
SELECT value FROM metadata WHERE key = ?
UPDATE metadata SET value = ? WHERE key = ?
INSERT INTO metadata (key, value) VALUES (?, ?)
DELETE FROM metadata WHERE key = ?
VACUUM
PRAGMA user_version
HasDuplicateDeviceName
IsEphemeralDevice
Capabilities
Tabs
CloudKitBookmarkSyncing
Device
B32@?0@"CloudTab"8Q16^B24
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; hasDuplicateName = %d; isEphemeralDevice = %d; tabs = (
    %@
wbsCloudTabDictionaryRepresentation
CloudTabDevice
CloudTabCloseRequest
use_manatee_container
com.apple.Safari.CloudBookmarks.CloudTabSQLiteStore
DELETE FROM cloud_tab_devices WHERE device_uuid = ?
DELETE FROM cloud_tabs WHERE tab_uuid = ?
DELETE FROM cloud_tab_close_requests WHERE close_request_uuid = ?
CREATE TABLE cloud_tab_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,has_duplicate_device_name BOOLEAN DEFAULT 0,is_ephemeral_device BOOLEAN DEFAULT 0,last_modified REAL NOT NULL)
CREATE TABLE cloud_tabs (tab_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_uuid TEXT NOT NULL,position BLOB NOT NULL,title TEXT,url TEXT NOT NULL,is_showing_reader BOOLEAN DEFAULT 0,is_pinned BOOLEAN DEFAULT 0,reader_scroll_position_page_index INTEGER,scene_id TEXT,FOREIGN KEY(device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_tabs__device_uuid ON cloud_tabs (device_uuid)
CREATE TABLE cloud_tab_close_requests (close_request_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,destination_device_uuid TEXT NOT NULL,url TEXT NOT NULL,tab_uuid TEXT NOT NULL,FOREIGN KEY(destination_device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
DROP TABLE IF EXISTS cloud_tab_devices
DROP TABLE IF EXISTS cloud_tabs
DROP TABLE IF EXISTS cloud_tab_close_requests
SELECT device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices
SELECT system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices WHERE device_uuid = ?
INSERT INTO cloud_tab_devices (device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified)VALUES (?, ?, ?, ?, ?, ?)ON CONFLICT(device_uuid) DO UPDATE SET device_uuid = ?1, system_fields = ?2, device_name = ?3, has_duplicate_device_name = ?4, is_ephemeral_device = ?5, last_modified = ?6
SELECT tab_uuid, system_fields, position, title, url, is_pinned, is_showing_reader, reader_scroll_position_page_index, scene_id FROM cloud_tabs WHERE device_uuid = ?
q24@?0@"CloudTab"8@"CloudTab"16
INSERT OR REPLACE INTO cloud_tabs (tab_uuid, system_fields, device_uuid, position, title, url, is_showing_reader, is_pinned, reader_scroll_position_page_index, scene_id)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid FROM cloud_tab_close_requests
INSERT OR REPLACE INTO cloud_tab_close_requests (close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid)VALUES (?, ?, ?, ?, ?)
Cloud Tab Data Fetching
Cloud Tab Data Saving
Cloud Tab Close Requests Saving
Cloud Tab Close Requests Deleting
Cloud Tab Devices Deleting
Cloud Tab Zone Deleting
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabSavingQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabFetchingQueue
v16@?0@"CloudTabDevice"8
DAV-
com.apple.CloudKitBookmarks.CyclerCloudBookmarksAssistant
https://fake-dav-id-for-testing/
Migration failed
Unable to acquire database lock
@"WBSPair"32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
change
B24@?0@"CKRecord"8^B16
B24@?0@"CKRecordID"8^B16
TabGroupTabParticipantStatus
ReadStatus
TabReadStatus_
LastKnownMinimumVersionsInCircleCacheDate
LastKnownMinimumSafariVersionInCircle
LastKnownMinimumIOSVersionInCircle
16.0
13.0
com.apple.SafariSyncService.%@.%p._internalQueue
com.apple.SafariSyncService.%@.%p._assetSavingQueue
@"WBBookmarkDatabaseSyncData"16@?0@"WBBookmarkDatabaseSyncData"8
v32@?0q8@"WebBookmarkCollection"16@"NSError"24
v32@?0@"CKRecordZone"8@"WBSHashGenerator"16@"NSError"24
@"CKRecord"12@?0i8
B8@?0
v32@?0@"NSURL"8@"CKShareMetadata"16@"NSError"24
v32@?0@"CKShareMetadata"8@"CKShare"16@"NSError"24
99999999
9999999
@"NSString"32@?0@"CKRecordZoneID"8Q16^B24
@"WBBookmarkSyncData"16@?0@"WBBookmarkSyncData"8
v24@?0@"CKRecordZoneID"8@"NSError"16
B24@?0@"CKShareParticipant"8^B16
@"WBBookmarkSyncData"24@?0@"WebBookmark"8@"WBBookmarkSyncData"16
v32@?0@"CKServerChangeToken"8@"NSArray"16@"NSError"24
ckShortDescription
@"CKFetchRecordZoneChangesConfiguration"32@?0@"CKRecordZoneID"8Q16^B24
v48@?0@"CKServerChangeToken"8@"NSArray"16@"NSArray"24@"NSArray"32@"NSError"40
v16@?0@"WebBookmark"8
v32@?0@"CKRecordID"8@"CKRecord"16@"NSError"24
@"NSString"32@?0@"CKRecordZoneID"8@"NSError"16^B24
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16^B24
Asset destination URL was not available.
Sync Coordinator Saving Assets
v40@?0@"CloudRemoteStore"8@"CKRecordID"16@"CKRecord"24@"NSError"32
v32@?0@"CloudRemoteStore"8@"CKRecordID"16@"NSString"24
v52@?0@"CloudRemoteStore"8@"CKRecordZoneID"16@"CKServerChangeToken"24@"NSData"32B40@"NSError"44
v32@?0@"WBSRetryableCKFetchRecordZoneChangesOperation"8@"CloudRemoteStore"16@"NSError"24
com.apple.SafariShared
CloudBookmarks
DiagnosticExtension
KeyedArchiver
SiriLink
init
_setUpPushConnection
updatePushTopicSubscriptions
isSyncEnabled
_pushTopics
setEnabledTopics:ignoredTopics:opportunisticTopics:
topic
userInfo
didReceivePushNotificationWithTopic:userInfo:
initWithEnvironmentName:namedDelegatePort:queue:
setDelegate:
stringByAppendingString:
arrayWithObjects:count:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
setUsesOpportunisticPushTopic:
.cxx_destruct
_pushConnection
_usesOpportunisticPushTopic
privateCloudDatabase
setQualityOfService:
stringWithFormat:
setName:
UTF8String
_createCloudExtensionsRecordZoneInOperationGroup:withRetryManager:completionHandler:
initWithSubscriptionIDs:
safari_errorByAddingCloudKitPrivacyPreservingUserInfoForItemID:
safari_privacyPreservingDescription
objectForKeyedSubscript:
safari_isCloudKitNonExistentRecordError
setFetchSubscriptionCompletionBlock:
_scheduleOperation:inOperationGroup:operationQueue:
safari_isCloudKitMissingZoneError
_saveRecordZoneSubscriptionInOperationGroup:operationQueue:completionHandler:
createCloudExtensionsRecordZoneInOperationGroup:completionHandler:
count
saveCloudExtensionsRecordBatch:createCloudExtensionsZoneIfMissing:inOperationGroup:completionHandler:
_saveCloudExtensionsRecordBatch:inOperationGroup:completionHandler:
safari_arrayByGroupingIntoArraysWithMaxCount:
setWithArray:
array
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
addObject:
removeObject:
safari_errorFromErrors:
_operationToDeleteCloudExtensionRecordIDs:completionHandler:
_addModifyRecordsOperations:inOperationGroup:operationQueue:
_fetchRecordsOnInternalQueueWithServerChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
_saveCloudExtensionsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
initWithRecordsToSave:recordIDsToDelete:
safari_isUnrecoverableCloudKitError
safari_isCloudKitBatchTooLargeError
domain
isEqualToString:
code
setPerRecordCompletionBlock:
copy
addObjectsFromArray:
subarrayWithRange:
scheduleRetryIfNeededForError:usingBlock:
setModifyRecordsCompletionBlock:
_fetchRecordsOnInternalQueueWithRetryManager:serverChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
setPreviousServerChangeToken:
dictionaryWithObjects:forKeys:count:
initWithRecordZoneIDs:configurationsByRecordZoneID:
setRecordChangedBlock:
setRecordWithIDWasDeletedBlock:
setRecordZoneFetchCompletionBlock:
setFetchRecordZoneChangesCompletionBlock:
_addDependenciesForModifyRecordsOperation:operationQueue:
operations
addDependency:
setDatabase:
setGroup:
addOperation:
initWithZoneID:
initWithRecordZonesToSave:recordZoneIDsToDelete:
setModifyRecordZonesCompletionBlock:
setShouldSendContentAvailable:
initWithZoneID:subscriptionID:
setNotificationInfo:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
firstObject
subscriptionID
itemErrorFromError:forID:
setModifySubscriptionsCompletionBlock:
_recursivelyCancelDependentOperations:operationQueue:
dependencies
containsObject:
isCancelled
cancel
recordZoneSubscriptionID
cloudExtensionsRecordZoneID
T@"NSString",R,C,N
T@"CKRecordZoneID",R,C,N
initWithContainer:
fetchCloudExtensionsZoneSubscriptionInOperationGroup:completionHandler:
saveCloudExtensionsZoneSubscriptionInOperationGroup:completionHandler:
deleteCloudExtensionRecords:inOperationGroup:completionHandler:
fetchCloudExtensionsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
container
_database
_cloudExtensionsRecordZone
_cloudExtensionsOperationQueue
_internalQueue
_completionHandlerQueue
_container
T@"CKContainer",R,N,V_container
initWithZoneName:ownerName:
bookmarkDatabaseAccessor
initWithDatabaseAccessor:
safari_cloudBookmarksContainer
standardUserDefaults
initWithUserDefaults:type:
initWithType:container:localStorage:
initWithBookmarkStore:databaseCoordinator:accountStore:
initWithBookmarkStore:databaseAccessor:syncMigrationCoordinator:
migrationState
registeredStateCollectorWithLogLabel:payloadProvider:
safari_cloudTabsContainer
initWithAccountStore:
safari_cloudSettingsContainer
dictionary
initWithSettingStore:accountStore:
cloudSettingsSyncEngineAccessor
UUID
UUIDString
safari_cloudExtensionsContainer
initWithAccountStore:cloudExtensionStore:cloudExtensionSQLiteStore:
_syncManagerWithStoreOwner:
registerMigrationXPCActivity:
initWithMachServiceName:
resume
safariTabCollectionConfiguration
initWithConfiguration:openDatabase:
_registerCloudKitSubscriptionsXPCActivityRegisteringIfNeeded:ignoreOnGoingRegistration:resetSubscriptions:qualityOfService:delay:
_registerPeriodicRemoteMigrationStateObserverXPCActivityRegisteringIfNeeded:
_scheduleInitialManateeCloudTabFetchRetryXPCActivityRegisteringIfNeeded:
defaultCenter
_didDetectPossibleBug:
addObserver:selector:name:object:
_scheduleHierarchyCheckTimer
postNotificationName:object:userInfo:
notificationFromRemoteNotificationDictionary:
_didReceiveIncomingMessageWithNotification:pushTopic:subscriptionID:
accountPropertiesStore
isDataclassEnabled
_topic:matchesPushTopicForContainer:
options
applicationBundleIdentifierOverrideForPushTopicGeneration
hasSuffix:
setStoreOwner:
initWithConfiguration:container:accountStore:
_userAccountDidChange:
postNotificationName:object:
registerForPushNotificationsIfNeeded
_cancelPushNotificationSyncDelayTimer
_updateCloudTabsSyncCoordinatorAfterUserAccountChange:
_updateCloudSettingsSyncCoordinatorAfterUserAccountChange:
_updateCloudExtensionsSyncCoordinatorAfterUserAccountChange:
_updateCloudBookmarksSyncCoordinatorAfterUserAccountChange:
_updateTabGroupsSyncCoordinatorAfterUserAccountChange:
clearCachedRecordZone
_attemptSyncAndFallBackToMigrationIfPossibleForTrigger:
supportsDeviceToDeviceEncryption
accountInfoWithCompletionHandler:
_userDidUpdateBookmarkDatabase
_invalidateHierarchyCheckTimer
sharedLogger
ckBookmarkSyncFinishedWithResult:error:
_sendNotificationForSyncResult:
_sendDetectedBugNotificationIfNeeded
_performHiearchyCheck
safari_isUserDeletedZoneError
_beginMigrationFromDAVInOperationGroup:
observeRemoteMigrationStateForSecondaryMigration
beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandler:
numberWithInteger:
_hasEntitlementForSensitiveOperation
_fetchRemoteMigrationStateWithXPCActivity:qualityOfService:completionHandler:
errorWithDomain:code:userInfo:
createMigrationStateCheckOperationGroupWithXPCActivity:qualityOfService:
migratorDeviceIdentifier
fetchRemoteMigrationInfoInOperationGroup:withCompletionHandler:
_beginMigrationFromDAVInOperationGroupInternal:
boolForKey:
initWithBookmarkStore:
collectDiagnosticsDataWithCompletionHandler:
saveTabsForCurrentDeviceWithDictionaryRepresentation:deviceUUIDString:completionHandler:
saveCloudTabCloseRequestWithDictionaryRepresentation:closeRequestUUIDString:completionHandler:
deleteDevicesWithUUIDStrings:completionHandler:
deleteCloudTabCloseRequestsWithUUIDStrings:completionHandler:
_fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
wbsCloudTabDeviceDictionary
deviceUUIDString
initWithUUIDString:deviceOrCloseRequestDictionary:
wbsCloudTabCloseRequestDictionaryRepresentation
requestUUIDString
fetchDevicesWithCompletionHandler:
getCachedDevicesWithCompletionHandler:
userDidUpdateCloudTabGroupSyncManagerDatabase:
usesManateeContainer
getCloudTabRemoteStoreWithCompletionHandler:
_attemptCloudSettingsSyncForTrigger:
initWithRecordName:zoneID:
initWithRecordType:recordID:
safari_encryptedValues
setObject:forKeyedSubscript:
saveRecords:successCompletionHandler:
savePerSiteRecords:completionHandler:
_createNewPerSiteCloudKitRecordWithDictionaryRepresentation:precomputedRecordName:
_getPerSiteSettingRecordNameWithDictionaryRepresentation:completionHandler:
length
_perSitePreferencesStore
_modifyExistingPerSiteCloudKitRecordWithData:dictionaryRepresentation:
getDeletedCloudKitSyncDataForRecordName:completionHandler:
getSyncDataForPreference:domain:completionHandler:
getSyncDataForPreference:completionHandler:
isPerSiteSettingSyncEnabled
removeAllSyncData
safari_initWithEncodedRecordData:
boolValue
_deviceClass
_archivedDataForPerSiteSettingDictionaryInDictionary:
safari_generationForKey:
incrementedGenerationWithDeviceIdentifier:
safari_setGeneration:forKey:
initWithDeviceIdentifier:generation:
generateEncryptedHashStringWithComponents:completionHandler:
archivedDataWithRootObject:requiringSecureCoding:error:
defaultDatabaseURL
initWithDatabaseURL:
deleteBackgroundImageDirectory
fire
_cancelBackgroundImageSaveDelayTimer
saveCloudBackgroundImageWithURL:isLightAppearance:successCompletionHandler:
scheduledTimerWithTimeInterval:repeats:block:
initWithFileURL:
numberWithBool:
saveImageRecord:successCompletionHandler:
deleteRecords:completionHandler:
backgroundImageExists
defaultManager
safari_startPageBackgroundImageFileURL
backgroundImageAppearanceIsLight
syncSettingsUpDictionary
_saveCloudSettingsBatchWithDictionaryRepresentation:successCompletionHandler:
_saveCloudPerSiteSettingsWithMacZoomPreferences:successCompletionHandler:
staticSyncablePerSiteSettings
value
saveCloudPerSiteSettingWithDictionaryRepresentation:successCompletionHandler:
getAllPreferenceInformationForPreference:completionHandler:
beginInitialSyncUpWithCompletionHandler:
saveExtensionStatesWithDictionaryRepresentation:forDevice:completionHandler:
saveExtensionDeviceWithDictionaryRepresentation:completionHandler:
getCloudExtensionStatesWithCompletionHandler:
deleteCloudExtensionDevicesWithUUIDStrings:completionHandler:
deleteDatabaseWithCompletionHandler:
tabGroups
uuid
title
safari_mapObjectsUsingBlock:
_cyclerAssistant
resetToDAVDatabaseWithCompletionHandler:
clearLocalDataIncludingMigrationState:completionHandler:
generateDAVServerIDsForExistingBookmarksWithCompletionHandler:
migrateToCloudKitWithCompletionHandler:
safari_cloudBookmarksDefaults
stringForKey:
mainBundle
safari_normalizedVersion
compare:options:
setObject:forKey:
localMigrationState
resetDeviceIdentifier
setLocalMigrationState:
databaseRef
openDatabase:
performMaintenanceOnDatabase:afterVersion:
closeDatabase:shouldSave:
currentConnection
valueForEntitlement:
processIdentifier
_setUpSyncAgentInterfaceOnConnection:
userDidUpdateBookmarkDatabase
userAccountDidChange:
fetchRemoteMigrationStateWithCompletionHandler:
beginMigrationFromDAV
getCloudTabDevicesWithCompletionHandler:
fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
triggerSafariTabGroupSync
getCloudTabContainerManateeStateWithCompletionHandler:
getCloudSettingsContainerManateeStateWithCompletionHandler:
fetchCloudTabDevicesAndCloseRequests
fetchCloudSettingsChangesImmediately
saveCloudSettingWithDictionaryRepresentation:successCompletionHandler:
deleteBackgroundImageFromCloudKitWithCompletionHandler:
scheduleCloudBackgroundImageSaveWithURL:isLightAppearance:successCompletionHandler:
triggerImmediateBackgroundImageSaveIfApplicable
syncDownSafariSettingsSyncWithCompletion:
syncUpSafariSettingsSyncWithCompletion:
syncDownSafariPerSiteSettingsSyncWithCompletion:
syncUpSafariPerSiteSettingsSyncWithCompletion:
deletePerSiteSettingsSyncData
deleteCloudExtensionStatesDatabaseWithCompletionHandler:
fetchTabGroupEntitiesWithCompletion:
scheduleSyncIfNeeded
addSyncObserver:
removeSyncObserver:
userDidAcceptCloudKitShareWithMetadata:
beginSharingTabGroupWithUUID:completionHandler:
acceptShareForURL:invitationTokenData:completionHandler:
movePresenceForParticipantToTabWithUUID:
saveBrowserState:completionHandler:
deleteTabGroup:completionHandler:
insertTabGroup:afterTabGroup:completionHandler:
moveTabGroup:afterTabGroup:completionHandler:
saveTabGroup:completionHandler:
deleteTabs:completionHandler:
insertTabs:inTabGroup:afterTab:completionHandler:
saveTab:completionHandler:
updateTabs:inTabGroup:completionHandler:
closeWindowState:completionHandler:
deleteWindowState:completionHandler:
deleteWindowStates:completionHandler:
saveWindowState:completionHandler:
didReceiveIncomingMessageForSubscriptionID:withPushTopic:userInfo:
didReceiveLocalNotificationWithPushTopic:
interfaceWithProtocol:
setClasses:forSelector:argumentIndex:ofReply:
setInterface:forSelector:argumentIndex:ofReply:
setExportedInterface:
setExportedObject:
_updatedContainerForPushTopic:
_needsDatabaseFetchOperationForContainer:
_attemptSyncForChangedZonesSharingContainer:
_attemptTabGroupsSyncForManager:withTrigger:
_attemptCloudTabsSyncForPushNotification
dateWithTimeIntervalSinceNow:
isValid
_fetchUpdatedZonesInPushNotificationForContainer:
_fetchUpdatedZonesInPushNotificationForContainer:retryManager:
containerIdentifier
dataForKey:
unarchivedObjectOfClass:fromData:error:
initWithPreviousServerChangeToken:
setFetchAllChanges:
setDiscretionaryNetworkBehavior:
setAutomaticallyRetryNetworkFailures:
setConfiguration:
zoneName
bookmarksRecordZoneID
handlesRecordChangesToRecordZoneWithID:
cloudTabsRecordZoneID
cloudSettingsRecordZoneID
setRecordZoneWithIDChangedBlock:
setRecordZoneWithIDWasDeletedBlock:
_attemptCloudExtensionsSyncForPushNotification
setFetchDatabaseChangesCompletionBlock:
setExpectedSendSize:
setExpectedReceiveSize:
invalidate
saveBookmarksZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchBookmarksZoneSubscriptionStatusCreatingZoneIfNeeded:inOperationGroup:withCompletionHandler:
saveCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
_performBookmarkSyncForTrigger:inOperationGroup:completionHandler:
_checkInXPCActivityWithIdentifier:criteria:registerIfNeeded:performBlock:
deleteDatabaseAndSyncDataForAccountChange
userAccountChanged
saveCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
clearServerChangeToken
setNeedsAccountHashCheck
clearCachedCloudSettingsRecordZone
_performSettingsSyncForTrigger:inOperationGroup:completionHandler:
isCustomizationSyncEnabled
beginSyncingWithCompletionHandler:
postNotificationName:object:userInfo:deliverImmediately:
didReceiveRemoteCloudSettingsUpdateWithRecord:
didDeleteRemoteRecordWithID:
recordType
isStartPageSettingSyncEnabled
recordID
recordName
isPreferenceSyncable:
cloudSettingSyncCoordinator:didReceiveRemoteCloudSettingsUpdateWithRecord:
_deleteLegacySectionIdentifiers
setPageZoomSyncData:forRecordName:completionHandler:
startCoordinatingMigrationInOperationGroup:completionHandler:
doubleValue
setHandler:
safari_matchesErrorDomainsAndCodes:
_retryIntervalToRegisterCloudKitSubscriptionsWithNumberOfFailedAttempts:lastCKError:
safari_errorWithCloudBookmarksCode:userInfo:
_didRegisterCloudKitSubscriptions:timer:lastError:completionHandler:
safari_operationGroupWithName:qualityOfService:xpcActivity:
_registerRemainingCloudKitSubscriptions:withLastSuccessfulSubscriptions:inOperationGroup:withCompletionHandler:
_saveBookmarksZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveCloudTabsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveTabGroupsPrivateDatabaseSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveTabGroupsSharedDatabaseSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveCloudSettingsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveCloudExtensionsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
createMigrationFromDAVOperationGroupWithXPCActivity:
_migrateFromDAVInOperationGroup:completionHandler:
savePrivateDatabaseSubscriptionInOperationGroup:withCompletionHandler:
fetchPrivateDatabaseSubscriptionStatusInOperationGroup:withCompletionHandler:
saveSharedDatabaseSubscriptionInOperationGroup:withCompletionHandler:
fetchSharedDatabaseSubscriptionStatusInOperationGroup:withCompletionHandler:
isSyncing
_runTabGroupsSyncForManager:withTrigger:completionHandler:
_performTabGroupSyncForManager:withTrigger:completionHandler:
databasePath
fileExistsAtPath:isDirectory:
configuration
storeOwner
startMigrationIfNeeded
beginSyncingForTrigger:completionHandler:
initWithBookmarkStore:databaseAccessor:migrationCoordinator:
localizedStandardCompare:
sortedArrayUsingSelector:
componentsJoinedByString:
allObjects
removeAllObjects
_hierarchyCheckTimer:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
performHierarchyCheck
_hierarchyCheckerDidFail
databaseLockArbiterDidAcquireDatabaseLock:
tabSyncArbiter:containerUsingManatee:
cloudTabSyncArbiterDidChangeCloudKitContainer:
cloudTabSyncArbiterPCSIdentitiesDidChange:
listener:shouldAcceptNewConnection:
hasEntitlementForSensitiveOperationInCloudTabGroupSyncManager:
cloudTabGroupSyncManagerPCSIdentitiesDidChange:
cloudTabGroupSyncManager:didFindChangesToRecordZonesWithIDs:
cloudSettingSyncCoordinator:storeRemoteCloudSettingsUpdateWithRecord:
cloudSettingSyncCoordinator:didDeleteRemoteRecordWithID:
performInitialSyncDown
pcsIdentitiesDidChangeForCloudSettingSyncCoordinator:
cloudSettingSyncCoordinator:setPageZoomSyncData:forRecordName:completionHandler:
forwardingTargetForSelector:
resumeXPCListener
_pushTopicForContainer:
_accountStore
_databaseAccessor
_bookmarkStore
_xpcListener
_delayBeforeSyncingAfterPushNotificationTimer
_dateToForceSyncAfterPushNotification
_transactionForTimerToDelaySyncing
_stateCollector
_isSyncing
_isMigrating
_periodicallyObservingRemoteMigrationState
_didCheckAgentVersionOnDatabaseLock
_cloudBookmarksStoreContainer
_databaseLockArbiter
_syncMigrationCoordinator
_migrationCoordinator
_bookmarkSyncCoordinator
_activityCheckInQueue
_cloudKitSubscriptionRegistrationTimer
_lastSuccessfulCloudKitSubscriptions
_remainingCloudKitSubscriptionsToRegister
_numberOfFailedCloudKitSubscriptionRegistrationAttempts
_cloudKitSubscriptionRegistrationIsInProgress
_ignoreOngoingCloudKitSubscriptionRegistrationResult
_detectedBugIDs
_safariUserDefaults
_hierarchyCheckTimer
_operationQueue
_isCheckingContainerDatabaseChanges
_cloudTabsContainer
_tabSyncArbiter
_customizationSyncQueue
_cloudSettingsContainer
_settingsStore
_settingsSyncCoordinator
_settingsSyncEngine
_isCustomizationSyncing
_fetchedSettingsDictionary
_delayBeforeSavingBackgroundImageTimer
_perSiteSettingsDeviceIdentifier
_fetchedPerSiteSettings
_extensionStore
_extensionsSyncCoordinator
_tabGroupSyncManager
_tabCollection
TB,R,N
safari_numberForKey:
_appleAccountSecurityState
_primaryAppleAccountSecurityLevel
aa_primaryAppleAccount
aa_altDSID
sharedInstance
authKitAccountWithAltDSID:
securityLevelForAccount:
getAppleAccountSecurityStateWithCompletion:
serverIDsInFolderWithServerID:excludeDeletedBookmarks:
bookmarkWithServerID:excludeDeletedBookmarks:
isFolder
initWithCollection:
serverIDsInFolderWithServerID:
itemWithServerIDIsFolder:
collection
_collection
T@"WebBookmarkCollection",R,N,V_collection
copyItemWithServerId:database:
copySyncDataWithItem:
positionFromContentsOfData:
syncDataWithContentsOfData:
itemConfigurations
canParseItem:usingDatabaseAccessor:
safari_firstObjectPassingTest:
copyServerIdWithItem:
_initWithItem:configuration:syncData:databaseAccessor:
_initWithReparentedItem:configuration:databaseAccessor:updater:
itemTypeWithItem:
_initWithItemToMigrate:configuration:databaseAccessor:updater:
changeTypeForChange:
deviceIdentifier
copyServerIdWithChange:
copyDeletedBookmarkSyncDataWithChange:
record
clearAllGenerationsExceptState
incrementGenerationForKey:withDeviceIdentifier:
generationForKey:
encodedBookmarkSyncData
setDeletedBookmarkSyncData:change:
canParseChange:usingDatabaseAccessor:
copyChangedItemWithChange:
_initWithItem:configuration:databaseAccessor:
_updateGenerationsForChange:withDeviceIdentifier:
updateLocalItem
_initWithChange:databaseAccessor:updater:
safari_recordName
itemType
itemSubtype
bookmarkTypeWithBookmark:
createBookmarkWithType:database:
_initWithAddedRecord:configuration:forItem:databaseAccessor:updater:
folderTypeWithFolder:
createFolderWithType:database:
_applyPendingReferences:
_decodedSyncDataInData:
_updateRecordParentAndPositionWithUpdater:
_initWithConfiguration:deleteChange:databaseAccessor:updater:
_createRecordWithRecordName:updater:
setRecord:
_updateRecordWithChange:updater:
safari_folderTypeForRecordName:
setState:
safari_setState:
copyParentServerIdWithItem:
setServerId:item:
safari_positionDictionaryRepresentationWithConfiguration:
setPositionDictionaryRepresentation:
setGeneration:forKey:
position
safari_state
safari_minimumAPIVersion
setMinimumAPIVersion:
_loadAttributesForKnownKeysIntoEmptyItemUsingRemoteRecord:updater:
_updateRecordWithMissingAttributesWithUpdater:
copyAttributesWithItem:
allKeys
_updateGenerationsForAttributeKeys:withDeviceIdentifier:
_updateRecordWithModifiedAttributes:updater:
dealloc
changeIsMoveChange:
copyModifiedAttributesWithChange:
modifiedAttributeMask
_createRecordIDWithName:updater:
initWithRecordID:action:
setPosition:
state
parentRecordName
identityHashKeys
modifiedOrLocalValueForKey:
changedKeys
valueTransformerForAttributeKey:
attributeRequiresEncryption
reverseTransformedValue:
copyValueForKey:item:
transformedValue:
_createParentFolderReferenceWithRecordName:updater:
_generateIdentityHashUsingUpdater:
valueTransformerForIdentityHashKey:
isEmptyValue:
generateIdentityHashWithComponents:
setSyncData:item:
setModifiedAttributes:item:
generationKeyForKey:
transformedValueClass
copySaveURLForAssetWithKey:item:
notifyForSaveOfAssetWithKey:item:
saveAssetAtURL:toURL:completionHandler:
enumerateKeysAndObjectsUsingBlock:
knownKeys
_canApplyValue:withGeneration:toAttribute:updater:
reverseTransformedValueOrNull:
setModifiedAttributeMask:
positionForCloudBookmarkWithRecordName:
positionDictionaryRepresentation
safari_setPositionDictionaryRepresentation:withConfiguration:
transformedValueOrNull:
isIdentityHashKey:
canSaveIdentityHashAttributesInDictionary:
hasGenerationForKey:
_modifiedOrLocalIdentityHashWithUpdater:
shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
first
second
resultFromMergingRecord:usingUpdater:isLocalUpdateOnly:
_resultByMergingMinimumAPIVersionWithRecord:
_resultByMergingStateWithRecord:shouldContinueMerge:
_resultByMergingParentAndPositionWithRecord:usingUpdater:
compare:
_transformedModifiedOrLocalValueForKey:isEncrypted:
_modifiedOrLocalParentReferenceWithUpdater:
minimumAPIVersion
safari_setMinimumAPIVersion:
positionForItemWithRecordName:inDatabase:databaseAccessor:
cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:
updateSyncDataGenerationsWithChange:databaseAccessor:updater:
cloudBookmarkWithChange:databaseAccessor:updater:
cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:
applyPendingReferences:toItemWithRecordName:inDatabase:databaseAccessor:updater:
duplicateHash
isDuplicateOfBookmark:
saveAssetsIfNeededWithUpdater:
resultFromMergingRecord:usingUpdater:
item
databaseAccessor
_syncData
_remotelyModifiedAttributes
_remotelyModifiedAssetAttributes
_configuration
_item
_recordName
_parentRecordName
T@"CloudBookmarkItemConfiguration",R,N,V_configuration
T@"CKRecord",R,N
Tr^v,R,N,V_item
T@"<WBSBookmarkDBAccess>",R,N,V_databaseAccessor
T@"NSString",R,C,N,V_recordName
T@"NSString",R,C,N,V_parentRecordName
T@"WBSCRDTPosition",C,N
Tq,N
TQ,R,N
itemTypeForChange:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
accountProperties
safari_boolForKey:
safari_primaryAppleAccount
initWithChange:updatedRecords:deletedRecordIDs:
initWithChange:deletedRecordZoneIDs:updatedRecords:deletedRecordIDs:
initWithChange:updatedRecords:
initWithChange:deletedRecordZoneIDs:
initWithChange:deletedRecordZoneIDs:deletedRecordIDs:
isEmpty
change
deletedRecordZoneIDs
updatedRecords
deletedRecordIDs
_change
_deletedRecordZoneIDs
_updatedRecords
_deletedRecordIDs
T@"WBChangeRecord",R,N,V_change
T@"NSSet",R,C,N,V_deletedRecordZoneIDs
T@"NSSet",R,C,N,V_updatedRecords
T@"NSSet",R,C,N,V_deletedRecordIDs
inMemoryDatabaseURL
initWithDatabaseURL:cloudExtensionsRecordZoneID:
_createOperationGroupWithName:
cloudExtensionDeviceWithDictionaryRepresentation:extensionSettingsDictionaryForDevice:cloudExtensionsRecordZoneID:
cloudExtensionStatesFromStatesDictionaryRepresentation:owningDeviceUUIDString:cloudExtensionsRecordZoneID:
setCloudExtensionStates:
_saveCloudExtensionDevice:shouldUpdateExtensionStatesWhenSavingDevice:completionHandler:
_suspendSavingQueue
openDatabaseIfNecessary
_continueSavingExtensionStates
_shouldContinueSyncOperation
_mergeDeviceIntoDeviceFromSQLiteStoreIfNecessary
_saveDeviceToCloudKit
_deleteObsoleteExtensionStateRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingExtensionState
_finishedSavingExtensionStates
_suspendFetchingQueue
set_cloudExtensionStoreError:
_cloudExtensionStoreError
_resumeFetchingQueue
_handleSevereSQLiteErrorWhileMergingExistingDevice:
updateFromCloudExtensionDevice:
updateFromCloudExtensionDeviceWithoutUpdatingExtensionStates:
loadCloudExtensionDeviceWithUUIDString:includeCloudExtensionStates:completionHandler:
_changedRecordsForCloudExtensionDevice:
_saveNextRecordBatchCreatingCloudExtensionsZoneIfMissing:
_nextRecordBatchToSave
_recordIDsFromRecordNames:
_updateSQLiteStoreFromCloudKitInOperationGroup:withCompletionHandler:
_resumeSavingQueue
_canCloseCloudExtensionStoreDatabase
closeDatabaseWithCompletionHandler:
safari_hasAtLeastOneChangedField
cloudExtensionStates
size
removeObjectAtIndex:
_beginFetchingExtensionStates
_continueFetchingExtensionStates
_getServerChangeTokenFromSQLiteStore
_fetchChangesFromCloudKitCreatingCloudExtensionsZoneIfMissing:
_removeDeletedRecordsFromSQLiteStore
_saveModifiedRecordsToSQLiteStore
_setServerChangeTokenInSQLiteStore
_loadDevicesAndStatesFromSQLiteStore
_finishedFetching
_handleSevereSQLiteErrorWhileFetching:
initForReadingFromData:error:
decodeObjectOfClass:forKey:
finishDecoding
name
_deleteDatabaseAndRestartFetch
getServerChangeTokenDataWithCompletionHandler:
_didFetchModifiedRecord:
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudExtensionsZoneCompletedWithError:
_shouldDeleteDatabaseForError:
deleteRecordsWithPrimaryKeys:completionHandler:
saveCloudExtensionDevices:extensionStates:completionHandler:
setServerChangeTokenData:completionHandler:
loadCloudExtensionDataWithCompletionHandler:
_cloudExtensionStatesDictionaryFromCloudExtensionDevices:
_cloudExtensionDevicesDictionaryFromCloudExtensionDevices:
safari_isCloudExtensionDeviceRecord
cloudExtensionDeviceWithCKRecord:
safari_isCloudExtensionStateRecord
cloudExtensionStateWithCKRecord:
_continueDeleting
_deleteRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterDeletingRecords
_finishedDeletingRecords
setDefaultConfiguration:
isEnabledForDataclass:
_isDeletingDatabase
_isDataclassEnabled
safari_isInCloudKitErrorDomain
dictionaryRepresentation
composedIdentifier
arrayWithObject:
cloudExtensionSQLiteStoreStore:hadSevereError:
accountStore
_cloudExtensionStore
_cloudExtensionLocalStore
_deletingDatabaseCount
_dataclassEnabled
_needsDataclassEnabledCheck
_savingQueue
_savingQueueSuspended
_saveExtensionStateOperationGroup
_saveState
_saveExtensionStatesCompletion
_deviceToSave
_shouldUpdateExtensionStatesWhenSavingDevice
_recordsToSave
_unsavedRecordFromLastBatch
_recordNamesOfStatesToDelete
_saveExtensionStatesError
_deleteDevicesOperationGroup
_deleteState
_deleteCompletion
_recordIDsToDelete
_deleteExtensionDevicesError
_fetchingQueue
_fetchingQueueSuspended
_fetchExtensionStatesOperationGroup
_currentFetchOperationGroup
_fetchState
_fetchError
_isRefetchingAfterDeletingDatabase
_fetchOperationType
_fetchExtensionStatesCompletion
_updateSQLiteStoreFromCloudKitCompletion
_serverChangeToken
_modifiedDevices
_modifiedStates
_namesOfDeletedRecords
_fetchedDevices
__cloudExtensionStoreError
T@"NSError",&,V__cloudExtensionStoreError
T@"ACAccountStore",R,N,V_accountStore
databaseURLForFilename:
createDatabaseWithoutLock
_verifyHierarchyIntegrityInDatabase:
saveBackupOfDatabase:withName:
hasPrefix:
localCloudKitMigrationState:
copyLocalIDsInFolderWithLocalID:database:
mutableCopy
copyItemWithLocalID:database:
_serverSyncIDTypeForServerSyncID:
safari_recordNameForFolderType:
copySyncKeyWithItem:
_verifySyncDataForItem:recordName:expectingSyncData:expectingCloudKitData:
recordChangeTag
_accountIdentityDidChange:
_accountPropertiesDidChange:
refresh
account
isDatabaseOpen
copyAccountHashWithDatabase:
setAccountHash:database:
username
dataUsingEncoding:
safari_SHA1Hash
accountHash
isEqualToData:
setAccountHash:
_setNeedsAccountHashCheck
setNeedsDataclassEnabledCheck
initWithAccountStore:databaseCoordinator:
updateAccountHashIfNeeded
databaseCoordinator
_needsAccountHashCheck
_databaseCoordinator
T@"ACAccount",R,N
T@"<CloudBookmarkDatabaseCoordinating>",R,N,V_databaseCoordinator
dataclassEnabled
TB,R,N,GisDataclassEnabled
ckShortDescription
safari_logDescription
_clearRetryHandlerIsCancelling:
_acquireLockToSetPresenceInTabWithRecordID:inOperationGroup:isRetry:completionHandler:
_cacheUserRecordIDIfNeededInOperationGroup:withCompletionHandler:
_sharedPresenceRecordNameForUserRecordID:
fetchUserIdentityInOperationGroup:withCompletionHandler:
_acquireLockUsingPrivatePresenceRecord:toSetPresenceInTabWithRecordID:previousPrivatePresenceRecord:inOperationGroup:isRetry:completionHandler:
setExpirationAfterTimeInterval:
_replaceSharedPresenceRecordWithTabRecordID:currentPrivatePresenceRecord:previousPrivatePresenceRecord:inOperationGroup:isRetry:completionHandler:
_setUpRetryTimerToSetPresenceInTabWithRecordID:inOperationGroup:completionHandler:
integerValue
modificationDate
timeIntervalSinceNow
saveOrLoadRecord:inDatabase:operationGroup:completionHandler:
_createSharedPresenceRecordWithTabRecordID:currentPrivatePresenceRecord:inOperationGroup:isRetry:completionHandler:
zoneID
_sharedPresenceRecordDatabaseForTabRecordZone:
deleteRecordWithID:inDatabase:operationGroup:completionHandler:
_releaseLockForPrivatePresenceRecord:inOperationGroup:completionHandler:
ownerName
sharedCloudDatabase
initWithCloudBookmarkStore:
setPresenceToTabWithRecordID:inOperationGroup:completionHandler:
store
_processUpdateQueue
_retryTimer
_currentRetryCompletionHandler
_nextEarliestScheduleTime
_throttledScheduledUpdateTimer
_lastScheduledUpdateBlock
_lastScheduledUpdateLock
_cachedPrivatePresenceRecord
_cachedUserRecordID
_cachedSharedPresenceRecordName
_store
T@"CloudBookmarkStore",R,N,V_store
initWithRootJSONObjectType:
isValidJSONObject:
dataWithJSONObject:options:error:
safari_dataByCompressingData
safari_dataByDecompressingData
JSONObjectWithData:options:error:
defaultTransformer
jsonArrayTransformer
jsonDictionaryTransformer
allowsReverseTransformation
rootJSONObjectType
_rootJSONObjectType
T#,R,N,V_rootJSONObjectType
cloudBookmarkItemConfigurations
safari_errorWithDomain:code:privacyPreservingDescription:
null
removeItemAtURL:error:
path
isReadableFileAtPath:
URLByDeletingLastPathComponent
safari_ensureDirectoryExists:
copyItemAtURL:toURL:error:
T@"NSString",R,N
T@"CKRecordZoneID",R,N
T@"NSArray",R,C,N
initWithBookmarkStore:database:databaseAccessor:accountPropertiesStore:
bookmarkStore
_databaseRef
_accountPropertiesStore
T@"CloudBookmarkStore",R,N,V_bookmarkStore
Tr^v,R,N,V_databaseRef
T@"CloudBookmarkAccountPropertiesStore",R,N,V_accountPropertiesStore
objectForKey:
copyDeviceIdentifier
setLocalCloudKitMigrationState:database:
initWithCKRecordZoneID:action:
referenceAction
initWithCKRecordZoneID:
transformerForRecord:
recordZoneID
action
_recordZoneID
_action
T@"CKRecordZoneID",R,N,V_recordZoneID
TQ,R,N,V_action
setWithObject:
initWithObjectClasses:
anyObject
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
decodeObjectOfClasses:forKey:
initWithObjectClass:
objectClasses
_objectClasses
T@"NSSet",R,N,V_objectClasses
safari_isEncryptionInfoRecord
initWithKey:keyID:
identityHashComponentsForRecord:
generateHashWithComponents:
safari_descriptionWithoutSpaces
keyID
initWithEncryptionInfoRecord:
verifyIdentityHashInBookmarkRecord:configuration:
encryptionInfoRecordWithZone:
createOperationGroupWithName:useLargerExpectedSendSize:
hashGenerator
generateHashStringWithComponents:
createCloudSettingsRecordZoneInOperationGroup:completionHandler:
deviceCount
_createCloudSettingsRecordZoneInOperationGroup:withRetryManager:completionHandler:
_saveRecordZoneSubscriptionForZoneID:subscriptionID:inOperationGroup:operationQueue:completionHandler:
saveCloudSettingsRecords:createCloudSettingsZoneIfMissing:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:retryManager:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
setClientChangeTokenData:
safari_hasOrContainsErrorWithCloudKitErrorCode:
_setUpEncryptionInfoInOperationGroup:withCompletionHandler:
safari_isCloudKitWriteConflictError
safari_isAtomicWriteError
_setUpEncryptionInfoInOperationGroup:withRetryManager:completionHandler:
safari_isCloudKitPartialFailureError
_saveOrLoadRecord:inOperationGroup:withCompletionHandler:
setTimeoutIntervalForRequest:
fetchCloudSettingsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleInOperationGroup:completion:
deleteCloudSettingsRecords:inOperationGroup:completionHandler:
deleteCloudSettingsZoneInOperationGroup:completion:
_cloudSettingsRecordZone
_cloudSettingsOperationQueue
_threadUnsafeHashGenerator
T@"WBSHashGenerator",R,N
_insertBookmark:intoFolderWithRecordName:
removeObjectForKey:
addItem:underFolderWithServerId:database:
_createBuiltInFolderWithRecordNameIfNeeded:
copyServerIdsInFolderWithServerId:database:
minusSet:
removeItemWithServerId:database:
hasUnverifiedMovedBookmarks
_reparentBuiltInFolderIfNeeded
_reorderChildrenOfTopBookmarkFolderGetLastPosition:
unionSet:
_recordNameOfAncestorToReparentForRecordName:verifiedRecordNames:
_localDatabaseContainsItemWithRecordName:getParentRecordName:
_insertBookmarkWithRecordName:intoExistingFolderWithRecordName:
_deleteTemporaryParentFolder
_bookmarksByVerifyingAndReparentingUnrootedBookmarksRememberOriginalParents:getLastValidPositionInRootFolder:
orderedSet
indexOfObject:
removeObjectsInRange:
_recordNameOfAncestorToReparentInLoop:
safari_minimumUsingComparator:
_reorderChildrenOfFolderWithServerSyncId:
_positionOfBookmarkWithRecordNameForFolderSorting:
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
lastObject
_lastValidPositionInRootFolder
_sortedRecordNamesWithChildIDs:getLastPosition:
setChildrenOrder:forFolderWithServerId:database:
copyLastServerIdInFolderWithServerId:database:
initWithDatabase:databaseAccessor:
hasUndeletedRemovedBookmarks
numberOfMovedBookmarks
numberOfDeletedBookmarks
addMovedBookmark:
didLocallyMoveBookmarkWithRecordName:
isDeletedRecordName:
didDeleteBookmarkWithRecordName:
bookmarksByVerifyingAndReparentingUnrootedBookmarksGetLastValidPositionInRootFolder:
verifyAndReparentUnrootedBookmarksRememberingOriginalParents
moveBookmarksIntoPlace
removeLocalItemsForDeletedRecordNames
_childRecordNamesToParentRecordNames
_movedBookmarkRecordNames
_deletedBookmarkRecordNames
_parentRecordNamesWithMovedChildren
_misplacedBuiltInFolderRecordNames
_hasTemporaryParentFolder
_topBookmarkFolderRequiresReordering
safari_cloudExtensionDeviceRecord
TB,R,N,Gsafari_isCloudExtensionDeviceRecord
safari_cloudExtensionStateRecord
TB,R,N,Gsafari_isCloudExtensionStateRecord
safari_isInCloudBookmarksErrorDomain
_safari_isOrContainsCloudKitErrorOfCodes:checkInternalErrorCode:
allValues
safari_isMigrationStateRecordChangedError
safari_isCouldNotOpenDatabaseError
safari_isCloudKitExpiredChangeTokenError
safari_cloudKitPartialErrorForItemID:
safari_onlyCloudKitPartialError
safari_isCloudKitErrorWithCode:
safari_isCloudKitInternalErrorWithCode:
unsignedIntegerValue
safari_minimumSyncAPIVersion
numberWithUnsignedInteger:
safari_migrationState
safari_migratorDeviceIdentifier
initWithDictionaryRepresentation:
_safari_generationKeyForKey:
_safari_deviceIdentifierKeyForKey:
generation
safari_isSyncRequirementsRecord
safari_setMinimumSyncAPIVersion:
safari_isMigrationStateRecord
safari_setMigrationState:
safari_setMigratorDeviceIdentifier:
safari_defaultPositionWithConfiguration:
safari_setDefaultPosition:withConfiguration:
safari_isMetadataDevice
safari_deviceOSKind
safari_deviceOSVersion
safari_deviceOSBuild
safari_deviceOSVersionNumber
safari_deviceSoftwareBundleID
safari_deviceSoftwareVersion
safari_syncRequirementsRecord
TB,R,N,Gsafari_isSyncRequirementsRecord
TQ,N,Ssafari_setMinimumSyncAPIVersion:
safari_encryptionInfoRecord
TB,R,N,Gsafari_isEncryptionInfoRecord
safari_migrationStateRecord
TB,R,N,Gsafari_isMigrationStateRecord
Tq,N,Ssafari_setMigrationState:
T@"NSString",&,N,Ssafari_setMigratorDeviceIdentifier:
Tq,N,Ssafari_setState:
TQ,N,Ssafari_setMinimumAPIVersion:
Tq,R,N
canParseRecord:
bookmarkListRecords
bookmarkLeafRecords
allRecordIDs
addRecord:
addDeletedRecordID:
serverChangeToken
setServerChangeToken:
clientChangeTokenData
setItemConfigurations:
topBookmarkRecord
migrationRecord
encryptionRecord
_mutableBookmarkListRecords
_mutableBookmarkLeafRecords
_mutableDeletedBookmarkRecords
_clientChangeTokenData
_itemConfigurations
_topBookmarkRecord
_migrationRecord
_encryptionRecord
T@"CKServerChangeToken",&,N,V_serverChangeToken
T@"NSData",C,N,V_clientChangeTokenData
T@"NSArray",C,N,V_itemConfigurations
T@"CKRecord",R,N,V_topBookmarkRecord
T@"CKRecord",R,N,V_migrationRecord
T@"CKRecord",R,N,V_encryptionRecord
databasePathForConfiguration:
lockSync
performMaintenance
unlockSync
tabGroupMaintenanceActivityDidFinish:
initWithConfiguration:
registerActivity
delegate
_delegate
T@"WBCollectionConfiguration",R,N,V_configuration
T@"<CloudTabGroupMaintenanceActivityDelegate>",W,N,V_delegate
_hasValidDeviceIdentifier
unableToSilentlyMigrateToCKBookmarksWithReason:
_determineCourseOfActionFromLocalStateInOperationGroup:externalCompletionHandler:
resetToNonMigratedStateInOperationGroup:completionHandler:
_attemptLocalMigrationBeforeTryingToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_tryToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_scheduleMigrationRetryIfNeededInOperationGroup:externalCompletionHandler:
_transitionToMigrationState:
_tryToResumePendingRemoteMigrationFromMigrationInfo:inOperationGroup:externalCompletionHandler:
_performMigrationAsPrimaryDevice:inOperationGroup:externalCompletionHandler:
setTimeout:
_tryToBecomeResponsibleForMigrationWithRetryManager:inOperationGroup:externalCompletionHandler:
_handleFailureToBecomeResponsibleForMigrationDueToConflictInOperationGroup:externalCompletionHandler:
_becameResponsibleForMigrationInOperationGroup:externalCompletionHandler:
setRemoteMigrationState:deviceIdentifier:inOperationGroup:completionHandler:
lockForClient:
unlockForClient:
_handlePreemptionInOperationGroup:externalCompletionHandler:
_resetToIdleAfterMigrationFailureInOperationGroup:externalCompletionHandler:
serverModificationDate
deleteBookmarksZoneInOperationGroup:completionHandler:
_maximumNumberOfRetryAttempts
_delayBetweenRetryAttempts
setIncludesMigrationRecordInSaveBatch:
didStartMigratingToCKBookmarksAsPrimaryMigrator:localState:remoteState:
didFailToMigrateToCKBookmarksAsPrimaryMigrator:error:
didSuccessfullyMigrateToCKBookmarksAsPrimaryMigrator:
beginMigratingAsPrimaryMigrator:inOperationGroup:willBeginMigrationHandler:withCompletionHandler:
setMigrationState:
invalidateCachedDataclassEnabledness
_numberOfRetryAttempts
_cachedRemoteStateForAnalytics
doubleForKey:
date
dateByAddingTimeInterval:
initWithDatabaseAccessor:database:
collectAllRecordNames
didReceiveRecordWithNameFromServer:
namesOfLocalRecordsToDelete
_namesOfLocalRecordsToDelete
T@"NSSet",R,C,N
safari_stringForKey:
_initWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
_initWithCKRecord:
setTrackChanges:
_valueTransformerForTabURL
allocWithZone:
tabURLString
tabUUIDString
destinationDeviceUUIDString
cloudTabCloseRequestWithWBSCloudTabCloseRequestDictionaryRepresentation:closeRequestUUIDString:cloudTabsRecordZoneID:
cloudTabCloseRequestWithCKRecord:
cloudTabCloseRequestWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
copyWithZone:
destinationDevice
_record
T@"CKReference",R,N
T@"CKRecord",R,N,V_record
T@"NSDictionary",R,C,N
initWithCollectionType:
initWithCollectionType:storeOwner:
tabGroupDatabaseAccessorWithStoreOwner:
readingListItemConfiguration
bookmarkConfiguration
bookmarkFolderConfigurationWithType:
orderedSetWithArray:
initWithItemType:itemSubtype:recordType:knownKeys:identityHashKeys:customAttributeGenerationKeys:attributeValueTransformers:identityHashValueTransformers:forRecordsPassingTest:
orderedSetWithObject:
tabGroupConfiguration
tabGroupTabConfiguration
tabGroupBookmarkConfiguration
tabGroupBookmarkFolderConfiguration
safari_tabGroupsRecordZoneID
setWithObjects:
isEqualToSet:
isEqualToOrderedSet:
isEqualToDictionary:
_defaultTransformer
bookmarkTypeForChange:
folderTypeForChange:
bookmarkType
folderType
cloudBookmarkConfigurations
cloudTabGroupConfigurations
T@"CloudBookmarkItemConfiguration",R,N
valueTransformerForAttributeKey:record:
canParseRecordType:
canParseBookmark:
recordTestBlock
_attributeKeysToGenerationKeys
_attributeKeysToTransformers
_identityHashKeysToTransformers
_itemType
_itemSubtype
_recordType
_knownKeys
_identityHashKeys
_recordTestBlock
Tq,R,N,V_itemType
Tq,R,N,V_itemSubtype
T@"NSString",R,C,N,V_recordType
T@"NSSet",R,C,N,V_knownKeys
T@"NSOrderedSet",R,C,N,V_identityHashKeys
T@?,R,C,N,V_recordTestBlock
safari_browserDefaults
_beginSyncingInOperationGroup:completionHandlers:
_updateAccountHashIfNeeded
_clearPerSiteSettingsSyncData
_didFailToSyncWithError:inOperationGroup:
_continueSyncingAfterSyncingDown:inOperationGroup:
_performSyncDown
_cleanUpAndCallCompletionHandlersWithError:inOperationGroup:
_continueFetchingSettingsWithCompletionHandler:
_readServerChangeTokenFromUserDefaults
_clearCachedCloudSettingsRecordZoneIfNecessaryForError:
_handleExpiredChangeTokenError:completionHandler:
_pcsIdentitiesDidChangeNotification:
_saveServerChangeToken:
removeObserver:name:object:
removeTombstoneWithRecordName:completionHandler:
removePreferenceValueWithRecordName:completionHandler:
_savePerSiteCloudKitRecordsToDisk:
savePerSiteSettingCloudKitRecordToDisk:completionHandler:
removeAllCloudKitRecordsWithCompletionHandler:
settingStore
_syncingCompletionHandlers
_isSynchronizing
_didReceiveSyncRequestWhileSyncing
_isPerformingInitialSyncUp
_shouldPerformInitialSyncDown
_isWaitingForPCSIdentityUpdate
_saveSettingsOperationGroup
_fetchSettingsOperationGroup
_deleteSettingsOperationGroup
_saveBackgroundImageOperationGroup
_settingStore
T@"CloudSettingStore",R,N,V_settingStore
T@"<CloudSettingSyncCoordinatorDelegate>",W,N,V_delegate
migrationStateEncodedRecordData
safari_bookmarksRecordZoneID
safari_isTabGroupSecondaryRecordZoneID
safari_tabGroupSecondaryRecordZoneIDWithRootRecordName:
safari_tabGroupRootRecordName
createOperationGroupWithName:qualityOfService:xpcActivity:
_fetchUserIdentityInOperationGroup:withCompletionHandler:
fetchUserRecordIDWithCompletionHandler:
_prepareBookmarksRecordZoneInOperationGroup:withCompletionHandler:
setMigrationStateEncodedRecordData:
setContainer:
setUpBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
secondaryRecordZoneIDWithRootRecordName:
initWithOwner:handlingQueue:
operationConfiguration
setRecordZonesToSave:
_createEncryptionRecordForRecordZoneWithID:inOperationGroup:completionHandler:
setRecordsToSave:
setDidExceedRetryTimeout:
setDidReceiveNonRetryableError:
setRecordZoneIDsToDelete:
setPerRecordZoneDeleteBlock:
_canHandleCKRecordZoneWithID:
safari_mapAndFilterObjectsUsingBlock:
setRecordIDs:
setFetchRecordsCompletionBlock:
setRecordZoneWithIDWasPurgedBlock:
setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock:
setRecordZoneIDs:
setConfigurationsByRecordZoneID:
setRecordWasChangedBlock:
modifyRecords:andDeleteRecordIDs:inDatabase:operationGroup:mergeHandler:completionHandler:
_modifyRecords:andDeleteRecordIDs:inDatabase:operationGroup:previouslySavedRecords:previouslyDeletedRecords:mergeHandler:completionHandler:
setRecordIDsToDelete:
setAtomic:
setOwnerDidDeallocateBlock:
safari_dictionaryByMappingObjectsToKeysUsingBlock:
isSecondaryRecordZoneID:
setPerRecordSaveBlock:
setPerRecordDeleteBlock:
initWithRecordZoneID:
setParticipantSelfRemovalBehavior:
setShareURLs:
initWithSharingInvitationData:shareURL:
setShareInvitationTokensByShareURL:
setPerShareMetadataBlock:
setFetchShareMetadataCompletionBlock:
lookupInfosWithEmails:
setUserIdentityLookupInfos:
emailAddress
setPerShareParticipantCompletionBlock:
removeParticipant:
setRole:
setPermission:
setWantsNewInvitationToken:
addParticipant:
participants
userIdentity
lookupInfo
safari_filterObjectsUsingBlock:
setFetchShareParticipantsCompletionBlock:
setShareMetadatas:
setPerShareCompletionBlock:
setAcceptSharesCompletionBlock:
setSubscriptionIDs:
setSubscriptionsToSave:
setSubscriptionIDsToDelete:
cloudBookmarkItemConfigurationForRecord:
setUpBookmarksRecordZoneInOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:mergeHandler:completionHandler:
_prepareBookmarksRecordZoneOnInternalQueueAfterExternalCompletionHandlersHaveBeenStashedInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
_setUpRecordZoneInOperationGroup:withCompletionHandler:
fetchMinimumSyncAPIVersionInOperationGroup:withCompletionHandler:
setFetchRecordZonesCompletionBlock:
deleteRecordsWithIDs:inDatabase:operationGroup:completionHandler:
arrayByAddingObjectsFromArray:
_checkMigrationStateOnInternalQueueInRecord:error:
safari_encodedRecordData
safari_mapAndFilterKeysUsingBlock:
fetchMetadataZoneRecordsInOperationGroup:withRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
initWithMigrationState:migratorDeviceIdentifier:serverModificationDate:
_fetchRemoteMigrationInfoInOperationGroup:completionHandler:
localStorage
includesMigrationRecordInSaveBatch
rootRecordNameForSecondaryRecordZoneID:
createSubscriptionRequestOperationGroupWithQualityOfService:xpcActivity:
createRecordZoneAndEncryptionInfoWithZoneName:inOperationGroup:completionHandler:
deleteRecordZonesWithIDs:inOperationGroup:perRecordZoneDeleteBlock:completionHandler:
fetchEncryptionRecordsForZonesWithIDs:inDatabase:operationGroup:completionHandler:
fetchChangesSinceServerChangeToken:inDatabase:operationGroup:completionHandler:
fetchRecordZoneChangesInZonesWithIDs:perZoneConfigurations:inDatabase:operationGroup:recordWasChangedBlock:recordWithIDWasDeletedBlock:recordZoneFetchCompletionBlock:completionHandler:
modifyRecords:inDatabase:operationGroup:mergeHandler:completionHandler:
setUpSharingForRecordZoneWithID:inOperationGroup:completionHandler:
fetchShareRecordForRecordZoneWithID:inDatabase:operationGroup:completionHandler:
fetchShareMetadataWithURL:invitationTokenData:inOperationGroup:completionHandler:
addParticipantsWithEmailAddresses:toShareInRecordZoneWithID:inOperationGroup:completionHandler:
removeParticipantsWithEmailAddresses:fromShareInRecordZoneWithID:inOperationGroup:completionHandler:
acceptCloudKitShareWithMetadata:inOperationGroup:completionHandler:
fetchSubscriptionWithID:inDatabase:operationGroup:withCompletionHandler:
saveSubscription:inDatabase:operationGroup:withCompletionHandler:
deleteSubscriptionWithID:inDatabase:operationGroup:withCompletionHandler:
fetchBookmarksRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleWithCompletionHandler:
saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
deleteBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:completionHandler:
fetchRecordWithID:inDatabase:operationGroup:completionHandler:
fetchBookmarkRecordsWithNames:withCompletionHandler:
bookmarkHashGenerator
fetchEncryptionInfoWithCompletionHandler:
fetchMetadataZoneRecordsWithRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchCachedRemoteMigrationInfoWithCompletionHandler:
setMinimumSyncAPIVersion:completionHandler:
fetchAllBookmarkRecordsWithCompletionHandler:
_zoneID
_zoneLogName
type
secondaryRecordZoneNamePrefix
_log
_threadUnsafeBookmarksRecordZone
_bookmarksOperationQueue
_threadUnsafePrepareRecordZoneCompletionHandlers
_threadUnsafeBookmarkHashGenerator
_threadUnsafeSyncRequirementsRecord
_threadUnsafeMigrationStateRecord
_threadUnsafeCurrentUserRecordID
_bookmarksRecordZoneID
_syncRequirementsRecordID
_bookmarkEncryptionInfoRecordID
_migrationStateRecordID
_shareType
_threadUnsafeIncludesMigrationRecordInSaveBatch
_threadUnsafeLocalStorage
_type
_recordZoneSubscriptionID
_secondaryRecordZoneNamePrefix
_cloudBookmarkItemConfigurations
Tq,R,N,V_type
T@"NSString",R,C,N,V_recordZoneSubscriptionID
T@"NSString",R,C,N,V_secondaryRecordZoneNamePrefix
TB,N,V_threadUnsafeIncludesMigrationRecordInSaveBatch
T@"<CloudBookmarkStoreLocalStorage>",R,N,V_threadUnsafeLocalStorage
T@"CKRecordZoneID",R,N,V_bookmarksRecordZoneID
T@"NSArray",R,C,N,V_cloudBookmarkItemConfigurations
migrationStateKey
T@"NSData",C,N
_defaults
safari_dateForKey:
_initWithComposedIdentifier:owningDeviceUUIDString:lastModifiedDate:containingAppAdamID:displayName:isEnabled:wasEnabledByUserGesture:iosAppBundleIdentifier:iosExtensionBundleIdentifier:macAppBundleIdentifier:macExtensionBundleIdentifier:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
initWithRecordType:zoneID:
_valueTransformerForComposedIdentifierDisplayNameAndAdamID
lastModifiedDate
containingAppAdamID
displayName
isEnabled
wasEnabledByUserGesture
iosAppBundleIdentifier
iosExtensionBundleIdentifier
macAppBundleIdentifier
macExtensionBundleIdentifier
cloudExtensionStateWithDictionaryRepresentation:composedIdentifier:owningDeviceUUIDString:cloudExtensionsRecordZoneID:
owningDeviceUUIDString
owningDevice
cloudExtensionStateWithComposedIdentifier:owningDeviceUUIDString:lastModifiedDate:containingAppAdamID:displayName:isEnabled:wasEnabledByUserGesture:iosAppBundleIdentifier:iosExtensionBundleIdentifier:macAppBundleIdentifier:macExtensionBundleIdentifier:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
updateFromCloudExtensionState:
T@"NSDate",R,N
enabled
TB,R,N,GisEnabled
enabledByUserGesture
TB,R,N,GwasEnabledByUserGesture
updateAccountHash:
initWithAccountStore:collection:
_beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
_scheduleRetryIfAbleWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
openDatabase
closeDatabaseAndSave:
databaseSyncDataInDatabase:databaseAccessor:
_resetSyncData
_didFailToSyncWithError:didOpenDatabase:
_bookmarkStoreDidFinishSetUp
clearAllSyncDataWithDatabase:
initWithDelegate:
didNotSaveRecordsAfterMigration
beginMergingChangesWithDatabase:
finishMergingChangesWithDatabase:
_processChanges
_continueSyncingAfterSyncDown:
applyAllPendingReferencesWithUpdater:
clearChangesWithChangeToken:database:
_cleanUpAndCallCompletionHandlersWithError:
copyServerIdInFolderBeforeServerId:database:
setDidNotSaveRecordsAfterMigration:
writeToDatabase:databaseAccessor:
initWithDatabase:databaseAccessor:updater:
processChanges
changes
changeToken
movedRecordNames
parentRecordNamesToMovedChildRecordNames
generatePositionsForChildRecordNamesGroupedByParentFolders:
_didSaveRecordsLocally
_nextRecordBatchGetRecordNamesToCloudBookmarks:withCloudBookmarkAllocationBlock:
_saveNextChangedRecordBatch
_saveRecordBatch:recordNamesToCloudBookmarks:successCompletionHandler:
sortUsingComparator:
_saveNextReparentedRecordBatch
valueForKey:
_rebuildUndeletedBookmark:
_performSyncDownWithCompletionHandler:
lastServerChangeTokenForRecordZoneID:
_performSyncDownWithLastServerChangeToken:completionHandler:
_updateBookmarkWithRecord:
_didCompleteSyncDownAfterExpiredChangeTokenError
intersectsSet:
intersectSet:
setLastServerChangeToken:forRecordZoneID:
_bookmarkForRemoteRecord:isNewBookmark:
_existingBookmarkForRemoteRecord:
_reparentAndSaveUnrootedBookmarks
_finishSyncing
nextChangeID
_nextChangeID
copyServerIdInFolderAfterServerId:database:
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
positionForBookmarkWithRecordName:
deviceIdentifierForPositionGenerator:
nextChangeIDForPositionInPositionGenerator:
positionGenerator:positionForRecordName:
positionGenerator:recordNameOfBookmarksBeforeRecordWithName:
positionGenerator:recordNameOfBookmarksAfterRecordWithName:
_recordNameOfLastRecordInRoot
_operationGroupForFetching
_operationGroupForSaving
_changeToken
_movedRecordNames
_unsavedChanges
_unsavedBookmarkFromLastBatch
_unsavedReparentedRecordNames
_lastKnownPositionOfLastItemInRootFolder
_namesOfRecordsSavedToTheServer
_namesOfRecordsMissingFromPreviousSyncDown
_namesOfRecordsExpectedOnSyncDown
_movedBookmarkManager
_pendingReferenceManager
_positionGenerator
_expiredChangeTokenHandler
_didResetSyncData
_numberOfRetries
_prepareRecordsForMigration
_performMergingSyncDownInOperationGroup:
copyChangeTokenWithDatabase:
convertRecordsForMigration
_didSaveLocalRecords
_migrationDidCompleteWithError:
performDeduplicationWithDatabase:mode:
_generateAndSaveRecordsInOperationGroup:
beginSyncDownInOperationGroup:keepingRecordsMarkedAsDeletedLocally:completionHandler:
_performSyncDownInOperationGroup:
beginFolderMigrationInOperationGroup:completionHandler:
_performSyncDownInOperationGroup:withRetryManager:
_didFinishSyncDownInOperationGroup:
beginSyncDownInOperationGroup:completionHandler:
_reparentAndSaveUnrootedBookmarksInOperationGroup:
beginSavingReparentedBookmarksInOperationGroup:withRecordNames:lastKnownPositionInRoot:completionHandler:
cloudBookmarkSyncMigrationSaveHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSaveHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSaveHandler:shouldSaveBookmark:
cloudBookmarkSyncMigrationSaveHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
cloudBookmarkSyncMigrationSyncDownHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSyncDownHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSyncDownHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
beginMigrationInOperationGroup:completionHandler:
_completionHandler
_converter
_syncDownHandler
_saveReparentedBookmarksHandler
_hasSavedBookmarksLocally
_defaultSubtitle
extraAttributes
childEvents
addChildEvent:
setTitle:
beginDate
setBeginDate:
endDate
setEndDate:
subtitle
setSubtitle:
symbolName
setSymbolName:
metadata
setMetadata:
_childEvents
_title
_beginDate
_endDate
_subtitle
_symbolName
_metadata
T@"NSString",C,N,V_title
T@"NSDate",&,N,V_beginDate
T@"NSDate",&,N,V_endDate
T@"NSString",C,N,V_subtitle
T@"NSString",C,N,V_symbolName
T@"NSDictionary",C,N,V_metadata
localTimeZone
stringFromDate:timeZone:formatOptions:
setXpcActivity:
initWithDatabaseURL:cloudTabsRecordZoneID:
initWithContainerIdentifier:appleAccountInformationProvider:
_determineCloudTabSyncCoordinatorWithCompletion:
setStateChangeObserver:
_transitionCloudTabSyncCoordinatorToManateeState:completion:
determineManateeStateWithCompletion:
initWithCloudTabLocalStore:
tearDown
initWithCloudRemoteStore:localStore:accountStore:
setDisabled:
setUseManateeContainerForSyncing:completionHandler:
getUseManateeContainerForSyncingWithCompletionHandler:
deleteCloudTabsZoneWithCompletionHandler:
_manateeErrorCode:
_deleteCloudTabsZoneWithCompletionHandler:
_pcsIdentitiesChangedNotification:
_handleManateeErrorIfNeeded:completionHandler:
_fetchDevices
cloudRemoteStore
loadCloudTabDataWithCompletionHandler:
_queue
_cloudTabLocalStore
_remoteStore
_syncCoordinator
_localStoreShim
_containerManateeObserver
_syncCoordinatorDeterminationCompletionBlocks
_localStoreShimForManateeContainer
_currentManateeState
_manateeStateNeedsUpdate
_determiningSyncCoordinator
_completionHandlersForCurrentDeviceFetchRequest
_completionHandlersForNextDeviceFetchRequest
T@"<CloudTabSyncArbiterDelegate>",W,N,V_delegate
T@"CKContainer",R,N
loadCloudTabDeviceWithUUIDString:completionHandler:
saveCloudTabDevices:tabs:closeRequests:completionHandler:
cloudTabLocalStore:hadSevereError:
cloudTabLocalStoreDidOpen:
T@"<CloudTabLocalStoreDelegate>",W,N
disabled
cloudTabLocalStore
_disabled
TB,N,V_disabled
T@"<CloudTabLocalStore>",R,N,V_cloudTabLocalStore
T@"<CloudTabLocalStoreDelegate>",W,N,V_delegate
_didFinishMigrationWithError:
_beginMigrationAsPrimaryMigrator:inOperationGroup:
_migrationConverter
_collectDiagnosticsDataWithRemoteMigrationInfo:remoteMigrationInfoError:completionHandler:
createDatabase
numberWithInt:
_changesDictionaryFromDatabase:
_localBookmarksDictionaryFromDatabase:
localizedDescription
_stringForRemoteMigrationState:
copyChangesWithDatabase:changeToken:
changeIsDAVMoveChange:
_traverseBookmarksInDatabase:parentFolderID:bookmarksCount:foldersCount:details:
_identifierForSensitiveString:
_stringForFolderType:
absoluteString
_stringForBookmarkType:
_sensitiveStringIdentifiers
fileURL
_createCloudTabsRecordZoneInOperationGroup:withRetryManager:completionHandler:
createCloudTabsRecordZoneInOperationGroup:completionHandler:
saveCloudTabsRecordBatch:createCloudTabsZoneIfMissing:inOperationGroup:completionHandler:
_saveCloudTabsRecordBatch:inOperationGroup:completionHandler:
_operationToDeleteCloudTabRecordIDs:completionHandler:
_saveCloudTabsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
fetchCloudTabsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
deleteCloudTabRecords:inOperationGroup:completionHandler:
deleteCloudTabsZoneInOperationGroup:completionHandler:
_threadUnsafeDatabase
_cloudTabsOperationQueue
_usesManateeContainer
TB,R,N,V_usesManateeContainer
isInternalInstall
dataWithContentsOfURL:options:error:
propertyListWithData:options:format:error:
stringByAppendingPathComponent:
fileURLWithPath:isDirectory:
persistEvents
_configurationForRecord:
_valueForKey:ofType:fromRecord:withConfiguration:
dataWithPropertyList:format:options:error:
writeToURL:options:error:
createSyncUpEvent
appendEvent:
createSyncDownEvent
previousServerChangeToken
data
symbolNameForRecordType:
dictionaryRepresentationForRecord:withCoordinator:
syncCoordinatorDidBeginSyncUp:
syncCoordinatorDidFinishSyncUp:
syncCoordinator:didBeginSyncDownWithConfigurations:
syncCoordinatorDidFinishSyncDown:
syncCoordinator:didSendRecordBatch:
syncCoordinator:didFetchRecord:
_events
_currentSyncUpEvent
_currentSyncDownEvent
setRootRecordName:
recordNameEnumerator
_generateAndSaveRemainingRecordsInOperationGroup:
nextObject
positionForRecordName:
_didFailSavingWithError:
_didFinishSavingRecordsWithNames:
_nextCloudBookmarkToSave
_recordNameEnumerator
_generateRecordPositions
_childRecordNamesInParentServerSyncId:
_recordNamesToGeneratePositionsForInRecordNames:inParentRecordName:getFolderRecordNames:getLastValidPosition:
_generatePositionsForChildRecordNames:withStartingPosition:
addEntriesFromDictionary:
copyFirstServerIdInFolderWithServerId:database:
_existingPositionForRecordWithName:getIsFolder:
initWithParentPositionGenerator:
childRecordNamesForRecordName:
childFolderRecordNamesForRecordName:
rootRecordName
_recordNamesToChildRecordNames
_recordNamesToChildFolderRecordNames
_recordNamesToPositions
_rootRecordName
T@"NSString",C,N,V_rootRecordName
parentGenerator
_folderRecordQueue
_currentChildRecordNames
_parentGenerator
T@"CloudBookmarkSyncMigrationPositionGenerator",R,N,V_parentGenerator
_dequeueNextCloudBookmarkToSave
_saveRecordBatch:inOperationGroup:recordNamesToCloudBookmarks:
_recordByMergingRemoteRecord:withLocalRecord:recordNamesToCloudBookmarks:saveError:
_recordByMergingRemoteRecord:intoCloudBookmark:
recordIDForParentSyncServerID:
_unsavedProcessedBookmark
T@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>",W,N,V_delegate
initWithConfiguration:container:accountStore:maintenanceActivity:
strongToStrongObjectsMapTable
_scheduleSyncIfNeeded
setSystemSharingUIDidStopSharingBlock:
setSystemSharingUIDidSaveShareBlock:
_shouldSync
initWithBookmarkStore:collectionConfiguration:accountStore:
registerSyncObserver:
initWithSubscriptionID:
sendSyncDidFinishNotificationWithResult:
beginSyncingWithOperationGroup:completionHandler:
remoteObjectProxyWithErrorHandler:
share
acceptShareForShareMetadata:inOperationGroup:completionHandler:
beginSharingTabGroupWithUUID:inOperationGroup:completionHandler:
tabWithUUID:
recordIDForTab:
acceptShareForURL:invitationTokenData:inOperationGroup:completionHandler:
wb_lockError
wb_databaseOpenError
initWithTabCollection:
error
_processLocalTabOperation:completionHandler:
tabCollection
setTabCollection:
_cancelSyncTimer
cloudTabGroupSyncCoordinator:didReceiveChangesForUnhandledRecordZoneIDs:
shareDidUpdateForTabGroupWithUUID:
participants:didJoinSharedTabGroupWithUUID:
participants:didLeaveSharedTabGroupWithUUID:
participantsDidUpdateInTabGroupWithUUID:
activeParticipantsDidUpdateInTabWithUUID:
didAddTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
didNavigateInTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
didRemoveTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
didChangeScopedFavoritesInSharedTabGroupWithUUID:byParticipantWithRecordID:
didChangeBackgroundImageInSharedTabGroupWithUUID:byParticipantWithRecordID:
didFetchRecentlyAcceptedSharedTabGroupWithUUID:
cloudTabGroupSyncCoordinator:didUpdateShareForTabGroupWithUUID:
cloudTabGroupSyncCoordinator:participants:didJoinSharedTabGroupWithUUID:
cloudTabGroupSyncCoordinator:participants:didLeaveSharedTabGroupWithUUID:
cloudTabGroupSyncCoordinator:participantsDidUpdateInTabGroupWithUUID:
cloudTabGroupSyncCoordinator:activeParticipantsDidUpdateInTabWithUUID:
cloudTabGroupSyncCoordinator:didAddTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didNavigateInTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didRemoveTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didChangeScopedFavoritesInSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didChangeBackgroundImageInTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didFetchRecentlyAcceptedSharedTabGroupWithUUID:
_performOnTabCollectionQueue:scheduleSync:completionHandler:
setSyncing:
_tabCollectionQueue
_tabCollectionSyncTimer
_didScheduleSync
_maintenanceActivity
_cloudBookmarkStore
_tabGroupPresenceUpdater
_syncObservers
_syncObserversToProxyObservers
_sharedTabGroupsObserver
_syncDebugger
_needsSync
_syncing
T@"<CloudTabGroupSyncManagerDelegate>",W,N,V_delegate
syncing
TB,N,GisSyncing,V_syncing
_namesOfRemainingRecordsToSave
_lastKnownPositionInRoot
_isSavingReparentedRecords
_updateLocalBookmarkWithCKRecord:
_didDeleteRecordWithName:
_didFinishSyncingReceivingRecordNames:error:
_cloudBookmarkForRecord:isNewBookmark:
_recordNamesToDelete
T@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>",W,N,V_delegate
initWithDatabaseURL:databaseQueueLabel:
_databaseQueue
_isDatabaseOpen
_loadDeviceWithUUIDString:
_loadExtensionStatesForDevice:
_loadDevices
changedRowCount
lastErrorMessage
_saveDevice:
_saveExtensionState:
_setDatabaseSchemaVersion:
_vacuum
stringAtIndex:
uncopiedDataAtIndex:
doubleAtIndex:
dateWithTimeIntervalSinceReferenceDate:
boolAtIndex:
cloudExtensionDeviceWithDeviceUUIDString:deviceName:lastModifiedDate:newTabPageComposedIdentifier:newTabPageSetByUserGesture:newTabPageLastModifiedDate:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
statement
dataAtIndex:
initWithDatabase:query:
safari_encodedSystemFieldsData
deviceName
timeIntervalSinceReferenceDate
composedIdentifierForNewTabPage
wasNewTabPageSetByUserGesture
lastModifiedDateForNewTabPage
execute
reset
_cloudExtensionStateFromRow:deviceUUIDString:
database:hadSevereError:
_currentSchemaVersion
_createFreshDatabaseSchema
_resetDatabaseSchema
_databaseWillBeOpened
_databaseAtURL:failedToOpenWithError:
_failedToExcludeDatabaseFromBackupWithError:
_failedToEnableWALWithError:
_failedToEnableForeignKeysWithError:
_failedToEnableSecureDeleteWithError:
_databaseAtURL:hasIncorrectSchemaVersion:
_databaseWillBeClosed
_databaseWillBeDeleted
_databaseAtURL:failedToDeleteWithError:
_databaseWillBeRecreated
_failedToSetSchemaVersion:withError:
_failedToUpdateMetadataValueWithKey:error:
_failedToInsertMetadataValueWithKey:error:
_failedToDeleteMetadataValueWithKey:error:
_vacuumFailedWithError:
_cloudExtensionsRecordZoneID
T@"<CloudExtensionSQLiteStoreDelegate>",W,N,V_delegate
initWithDatabase:query:error:
handle
reportErrorWithCode:statement:error:
bindString:atParameterIndex:
fetch
bindData:atParameterIndex:
bindDouble:atParameterIndex:
bindInt:atParameterIndex:
_createServerSyncIDForItem:
saveDatabase:
updater
deletedRecordNames
_updater
_changes
_deletedRecordNames
_parentRecordNamesToMovedChildRecordNames
T@"<CloudBookmarkUpdater>",R,W,N,V_updater
T@"NSArray",R,C,N,V_changes
T@,R,N,V_changeToken
T@"NSSet",R,C,N,V_movedRecordNames
T@"NSSet",R,C,N,V_deletedRecordNames
T@"NSDictionary",R,C,N,V_parentRecordNamesToMovedChildRecordNames
isMainThread
Tr^v,R,N
databaseOpen
TB,R,N,GisDatabaseOpen
T@"<WBSBookmarkDBAccess>",R,N
_databaseLockCount
_databaseOpen
T@"<CloudBookmarkDatabaseLockArbiterDelegate>",W,N,V_delegate
TB,R,N,GisDatabaseOpen,V_databaseOpen
initWithData:encoding:
URLWithString:
_initWithDeviceUUIDString:deviceName:lastModifiedDate:newTabPageComposedIdentifier:newTabPageSetByUserGesture:newTabPageLastModifiedDate:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
_setCloudExtensionStatesFromDictionaryRepresentation:cloudExtensionsRecordZoneID:
_valueTransformerForDeviceName
_updateDevicePropertiesFromCloudExtensionDevice:
_updateCloudExtensionStatesFromStates:
indexOfObjectPassingTest:
objectAtIndexedSubscript:
_cloudExtensionStates
T@"NSDate",R,C,N
newTabPageSetByUserGesture
TB,R,N,GwasNewTabPageSetByUserGesture
T@"NSArray",C,N,V_cloudExtensionStates
safari_dictionaryForKey:
_initWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_commonInitWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_valueTransformerForTitleAndURL
urlString
positionTabAfterPosition:
isShowingReader
isPinned
readerScrollPositionPageIndex
owningSceneID
_positionAfterPosition:
readerScrollPositionDictionary
cloudTabWithWBSCloudTabDictionaryRepresentation:owningDeviceUUIDString:position:cloudTabsRecordZoneID:
cloudTabWithCKRecord:
cloudTabWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTab:previousTabPosition:
wbsCloudTabDictionaryRepresentation
T@"WBSCRDTPosition",R,C,N
pinned
TB,R,N,GisPinned
showingReader
TB,R,N,GisShowingReader
T@"NSNumber",R,N
_openDatabase:deleteDatabaseFileOnError:
_closeDatabase
_deleteDatabaseFileAtURL:reopenDatabase:
_metadataDataValueForKey:
_setMetadataDataValue:forKey:
initWithURL:queue:
openWithAccessType:error:
setResourceValue:forKey:error:
enableWAL:
_migrateToCurrentSchemaVersionIfNeeded
close
safari_removeFileAtURL:error:
URLByDeletingPathExtension
URLByAppendingPathExtension:
int64AtIndex:
intAtIndex:
_metadataInt64ValueForKey:
_setMetadataInt64Value:forKey:
set_database:
set_databaseQueue:
_databaseURL
__database
__databaseQueue
T@"WBSSQLiteDatabase",&,N,V__database
T@"NSObject<OS_dispatch_queue>",&,N,V__databaseQueue
bindInt64:atParameterIndex:
_initWithDeviceUUIDString:deviceName:hasDuplicateName:lastModified:isEphemeralDevice:encodedSystemFieldsData:cloudTabsRecordZoneID:
safari_arrayForKey:
_setTabsFromWBSCloudTabDictionaryRepresentations:cloudTabsRecordZoneID:
hasDuplicateName
isEphemeralDevice
lastModified
tabs
_updateTabsFromCloudTabs:
_positionAfterPosition:owningDeviceUUIDString:
setTabs:
cloudTabDeviceWithDictionaryRepresentation:deviceUUIDString:cloudTabsRecordZoneID:
cloudTabDeviceWithCKRecord:
cloudTabDeviceWithDeviceUUIDString:deviceName:hasDuplicateName:isEphemeralDevice:lastModified:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTabDevice:
_tabs
ephemeralDevice
TB,R,N,GisEphemeralDevice
T@"NSArray",C,N,V_tabs
safari_isCloudTabDeviceRecord
safari_isCloudTabRecord
safari_isCloudTabCloseRequestRecord
safari_cloudTabDeviceRecord
TB,R,N,Gsafari_isCloudTabDeviceRecord
safari_cloudTabRecord
TB,R,N,Gsafari_isCloudTabRecord
safari_cloudTabCloseRequestRecord
TB,R,N,Gsafari_isCloudTabCloseRequestRecord
_loadTabsForDevice:
_loadCloseRequests
_saveTab:
_saveCloseRequest:
_cloudTabFromRow:deviceUUIDString:
_cloudTabsRecordZoneID
set_isBeingTornDown:
_isBeingTornDown
_continueSavingTabsForCurrentDevice
_deleteObsoleteTabRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingTabs
_finishedSavingDevice
set_cloudTabStoreError:
_cloudTabStoreError
_changedRecordsForCloudTabDevice:
_saveNextRecordBatchCreatingCloudTabsZoneIfMissing:
_recordIDsFromDeviceOrTabUUIDStrings:
_canCloseCloudTabStoreDatabase
_continueSavingCloseRequest
_saveCloseRequestToCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingCloseRequest
_finishedSavingCloseRequest
_beginFetchingTabs
_continueFetchingTabs
_fetchChangesFromCloudKitCreatingCloudTabsZoneIfMissing:
_loadDevicesAndTabsFromSQLiteStore
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudTabsZoneCompletedWithError:
_deleteRecordsWithNames:inOperationGroup:completionHandler:
_cloudTabStore
_saveTabsOperationGroup
_tabSaveState
_saveTabsCompletion
_uuidStringsOfTabsToDelete
_saveTabsError
_saveCloseRequestsOperationGroup
_closeRequestSaveState
_saveCloseRequestCompletion
_closeRequestToSave
_saveCloseRequestError
_deleteCloseRequestsOperationGroup
_currentDeleteOperationGroup
_deleteError
_fetchTabsOperationGroup
_fetchDevicesCompletion
_modifiedTabs
_modifiedCloseRequests
_fetchedCloseRequests
__isBeingTornDown
_cloudRemoteStore
__cloudTabStoreError
T@"NSError",&,V__cloudTabStoreError
TB,V__isBeingTornDown
T@"CloudTabRemoteStore",R,N,V_cloudRemoteStore
_convertItem:
setSyncKey:item:
_cloudKitRecordNameForBookmarkDAVServerSyncId:
scheme
lastPathComponent
_errorWithCode:
clearlAllLocalBookmarksForAutomatedTestingWithDatabase:
_descriptionForErrorCode:
initWithFirst:second:
safari_mapAndFilterKeysAndObjectsUsingBlock:
hasUnappliedReferences
_pendingReferences
_sizeOfRecordUpdateBatch:
objectsPassingTest:
safari_setObject:
isFull
deletedRecordZoneIDsInPrivateDatabase
updatedRecordsInPrivateDatabase
deletedRecordIDsInPrivateDatabase
updatedRecordsInSharedDatabase
deletedRecordIDsInSharedDatabase
addItem:
_items
_deletedRecordZoneIDsInPrivateDatabase
_updatedRecordsInPrivateDatabase
_deletedRecordIDsInPrivateDatabase
_deletedRecordZoneIDsInSharedDatabase
_updatedRecordsInSharedDatabase
_deletedRecordIDsInSharedDatabase
_beginSyncingWithOperationGroup:completionHandler:
databaseSyncData
auxiliaryRecordIDsToDelete
setAuxiliaryRecordIDsToDelete:
updateDatabaseSyncDataUsingBlock:
removeUnusedPresenceRecords
_saveNextBatchInCollection:operationGroup:completionHandler:
_prepareForSyncingWithOperationGroup:completionHandler:
_createCollectionWithConfiguration:
_didFinishSyncingWithResult:error:completionHandler:
setLocalMigrationState:generateDeviceIdentifierIfNeeded:
_resetSyncDataInCollection:
_didFailToSyncWithError:collection:completionHandler:
_beginSharingTabGroupWithUUID:inOperationGroup:completionHandler:
bookmarkWithUUID:
_configurationForBookmark:
privacyPreservingDescription
serverID
_setUpTabGroupZoneForTabGroup:inCollection:operationGroup:completionHandler:
_getShouldCreateLegacyPlaceholderForSharedTabGroupInCollection:operationGroup:completionHandler:
_serverIDForBookmarkCreateIfNeeded:inCollection:
setHashGenerator:forRecordZoneID:
recordZoneIDsToHashGenerators
_didRetrieveHashGenerators:
identifier
_beginSavingMigrationTombstonesForRootBookmarkID:destinationRecordZoneID:inCollection:operationGroup:completionHandler:
_createLegacyPlaceholderForSharedTabGroup:inCollection:operationGroup:completionHandler:
_migrationTombstoneRecordForBookmarkID:inCollection:destinationRecordZoneID:
_beginSavingMigratedRecordsForRootBookmarkID:destinationRecordZoneID:inCollection:operationGroup:completionHandler:
_saveNextMigrationRecordBatchInCollection:operationGroup:usingRecordBuilderBlock:completionHandler:
_migratedRecordForBookmarkID:inCollection:destinationRecordZoneID:
_setUpSharingInRecordZoneWithID:collection:operationGroup:completionHandler:
_performPostZoneMigrationSyncDownForRecordZoneID:shareRecord:inCollection:operationGroup:completionHandler:
_performSyncDownForRecordZoneIDs:perRecordZoneConfigurations:inDatabase:collection:operationGroup:completionHandler:
_nextMigrationRecordBatchInCollection:recordBuilderBlock:
_saveUpdatedRecords:deletedRecordIDs:inDatabase:collection:operationGroup:completionHandler:
intValue
syncableBookmarksIDsInFolderWithBookmarkID:
bookmarkWithID:
syncDataForBookmark:
setSyncState:
setMinimumSyncAPIVersion:
saveBookmark:incrementGenerations:
_recordForBookmark:inCollection:changeType:
performDatabaseUpdatesWithTransaction:secureDelete:
_acceptShareForURL:invitationTokenData:inOperationGroup:completionHandler:
_acceptShareForShareMetadata:inOperationGroup:completionHandler:
syncDataForKey:
syncStringForKey:
_didLoadLastKnownMinimumIOSVersion:minimumMacOSVersion:
safari_stringByNormalizingVersionString
setSyncData:forKey:
syncSetString:forKey:
createLegacyPlaceholderTabGroupBookmarksForSharedTabGroup:
deleteBookmark:leaveTombstone:
lastSyncedRecordGeneration
_nextBatchItemAfterChangeToken:inCollection:
localRecordGeneration
_performSyncDownAfterProcessingChangesInCollection:operationGroup:completionHandler:
_deletePrivateRecordZoneIDs:collection:operationGroup:completionHandler:
bookmark
_processSavedRecord:bookmark:collection:
setAuxiliaryRecord:forKey:
updateSyncDataForBookmark:usingBlock:
clearChangesForChangeRecords:lastSyncedRecordGeneration:
setLastSyncedRecordGeneration:
_mergedRecordWithLocalRecord:remoteRecord:saveError:collection:
_deleteNextBatchOfAuxiliaryRecordsInCollection:operationGroup:completionHandler:
_handleUpdatedShareRecord:inCollection:
_handleUpdatedTabPresenceRecord:inCollection:
_handleUpdatedTabParticipantStatusRecord:inCollection:
_didFetchBookmarkRecord:collection:
needsSyncUpdate
_hashGeneratorForRecord:
syncState
_createBookmarkWithConfiguration:
auxiliaryRecordIDs
address
backgroundImageGeneration
_updateBookmark:inCollection:withRecord:configuration:
isInserted
isDeleted
_saveRecord:forBookmark:inCollection:
minimumSyncAPIVersion
bookmarkIDForServerID:excludeDeletedBookmarks:
orderIndexOfBookmark:withSyncPosition:inFolderWithID:
parentID
orderIndex
bookmarkIDWithSpecialID:
moveBookmark:toFolderWithID:orderIndex:
_saveAssetsForBookmarkIfPresent:onRecord:withConfiguration:inCollection:
setParentRecordID:
fixRecoveredBookmarksIfNeeded
lastSelectedChildID
setLastSelectedChildID:
fieldForAttribute:
setGeneration:
lastModifiedUserRecordID
_dispatchPresenceUpdatesIfNeededForTabGroupsWithRecordNames:inCollection:
_dispatchPresenceUpdatesIfNeededForTabsWithRecordNames:inCollection:
acceptanceStatus
shareRecord
currentUserParticipant
initWithSet:
setShareRecord:
userRecordID
currentTabServerIDPresenceForParticipant:inTabGroupWithServerID:
removePresenceForParticipant:inTabGroupWithServerID:
updateSyncDataForBookmarkWithRecordName:excludeDeletedBookmarks:usingBlock:
isExpired
_deletePresenceForParticipantID:inTabGroupWithRecordName:collection:
currentTabServerIDPresenceForParticipant:getTabGroupServerID:
setPresenceInTabWithServerID:tabGroupWithServerID:forParticipant:
safari_substringFromPrefix:
lastReadGeneration
setLastReadGeneration:
_performSyncDownInCollection:operationGroup:completionHandler:
lastPrivateDatabaseServerChangeToken
lastSharedDatabaseServerChangeToken
setLastPrivateDatabaseServerChangeToken:
setLastSharedDatabaseServerChangeToken:
_notifyDelegateAboutIgnoredRecordZoneIDsIfNeeded:
_fetchChangedRecordZonesSinceServerChangeToken:inDatabase:collection:operationGroup:completionHandler:
_handleDeletedRecordZoneIDs:inCollection:
safari_dictionaryByMappingObjectsAsKeysToObjectsUsingBlock:
enumerateDescendantsOfBookmark:usingBlock:
_didFetchRecord:collection:shouldGenerateUpdatedRecord:
_handleDeletedTabPresenceRecord:inCollection:
_handleDeletedShareRecordWithID:inCollection:
_handleDeletedTabParticipantStatusRecord:inCollection:
_removeBookmarkWithServerID:inCollection:
markChildrenInFolderAsRead:
_handleExpiredChangeTokenError:collection:operationGroup:completionHandler:
safari_startPageBackgroundImageFileURLForIdentifier:
_saveAssetAtURL:toURL:completionHandler:
collectionType
resetDeviceIdentifierForCloudKitWithCollectionType:
_didEncounterError:withCompletionHandler:
secondaryZoneNameForBookmark:
setServerID:forBookmark:
_recordForBookmark:syncData:configuration:changeType:inCollection:
nextChangeAfterLocalRecordGeneration:
changeType
isDeletingRecordZone
_readStatusRecordForBookmark:syncData:configuration:changeType:inCollection:
_recordZoneIDForBookmark:inCollection:
_shouldMoveRecordToSecondaryZoneIfPossible:
modifiedSyncingAttributesForBookmark:
allSyncingAttributesForBookmark:
auxiliaryRecordForKey:
modifiedAttributes
setServerID:
_updateTabCollectionFolder:inCollection:withRecord:configuration:
_updateBookmarkCollectionFolder:inCollection:withRecord:configuration:
_updateTabCollectionBookmark:inCollection:withRecord:configuration:
_updateBookmarkCollectionBookmark:inCollection:withRecord:configuration:
clearModifiedAttributes
fields
generationKeyForField:
subtype
isSelectedFavoritesFolder
setSelectedFavoritesFolder:
updateSelectedFavoritesFolderWithBookmarkID:wasFavoritesFolder:isFavoritesFolder:
setPinned:title:address:
setAddress:
isReadingListItem
setDateAdded:
setDateLastViewed:
setPreviewText:
setReadingListIconURL:
clearReadingListArchiveWithUUID:
isReadingListFolder
clearAllReadingListArchives
initWithTitle:address:
initReadingListBookmarkWithTitle:address:previewText:
initWithTitle:address:parentID:subtype:deviceIdentifier:
initFolderWithParentID:subtype:deviceIdentifier:
initFolderWithParentID:
markSpecial:
setDeviceIdentifier:
clearAllSyncData
deviceIdentifierForCloudKitWithCollectionType:generateIfNeeded:
attributesMarkedAsModified:
_postCollaborationRenameEventWithBookmark:collection:
_postCollaborationChangeEventWithBookmark:collection:
_postCollaborationDeleteEventWithBookmark:collection:
parentRecordID
_highlightWithBookmark:collection:
initWithHighlight:type:
_postNoticeForHighlightEvent:
collaborationHighlightForURL:error:
weakObjectsHashTable
_bookmarksLog
_tabGroupsLog
_didCompleteSyncDownAfterExpiredChangeTokenErrorWithCollection:
_databaseForRecord:
unregisterSyncObserver:
collectionConfiguration
defaultOperationGroup
setDefaultOperationGroup:
_assetSavingQueue
_observers
_auxiliaryRecordIDsToDelete
_recordZoneIDsToHashGenerators
_secondaryZoneNamesToRecordZoneIDs
_highlightCenter
_tabGroupRecordNamesWithPendingPresenceUpdate
_tabRecordNamesWithPendingPresenceUpdate
_destinationRecordZoneID
_migrationLocalRecordIDQueue
_isSavingMigrationTombstoneRecords
_acceptedSharedTabGroupServerID
_acceptedShareDate
_lastKnownMinimumVersionsCachedDate
_lastKnownMinimumOSVersionInCircleRequiresLegacyPlaceholderForSharedTabGroup
_collectionConfiguration
_defaultOperationGroup
T@"<CloudTabGroupSyncCoordinatorDelegate>",W,N,V_delegate
T@"WBCollectionConfiguration",R,C,N,V_collectionConfiguration
T@"CKOperationGroup",&,N,V_defaultOperationGroup
_operationConfiguration
T@"CKDatabase",R,N
T@"NSOperationQueue",R,N
T@"CKOperationConfiguration",R,V_operationConfiguration
Not updating push topic
Updating push topic subscriptions with sync enabled = %d
Using opportunistic push topic
Using normal push topic
Set up push connection
Failed to instantiate CloudKit extensions database
Fetching CloudExtensions zone subscription
Failed to fetch CloudExtensions zone subscription by ID with error: %{public}@
Successfully fetched CloudExtensions zone subscription
Saving CloudExtensions zone subscription
Bailing out from saving CloudExtensions zone subscription due to deallocation
Saving CloudExtensions zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudExtensions zone subscription because zone couldn't be created
Saving CloudExtensions zone subscription after creating zone
Saving record batch of size: %lu
Attempting to create CloudExtensions zone before retrying save
Retrying save after creating CloudExtensionsZone
No records to delete.
Deleting %lu records.
Grouping delete requests for %lu objects into %lu batches
Deleting records failed: %{public}@
Fetching record changes with server change token %{public}@.
Fetching all records.
Saving record batch with %lu records
Failed to save record due to unrecoverable error: %{public}@
Received batch too large error for an individual record change; bailing out
Failed to save record due to unexpected error: %{public}@
Failed to save record due to unexpected error outside the CKErrorDomain: %{public}@
Failed to save record due to CloudKit error which could not be handled: %{public}@
Batch record save operation completed but failed to save records due to unrecoverable error: %{public}@
Batch record save operation completed but bailing out from batch save due to previously cancelling the request
Batch record save operation completed but server rejected the smallest batch we can send; bailing out
All attempts at re-batching record save failed
Attempting to re-batch record save
Batch record save operation completed but we need to re-batch
Modify records operation failed due to deallocation with error %{public}@
Attempting to retry batch save request
Record batch save retry limit exceeded
Record changed: %@
Record of type %{public}@ deleted: <%@>
Bailing out from record fetch due to deallocation with error %{public}@
Record fetch retry limit exceeded
Fetch record changes failed: %{public}@
Fetch records from record zone operation completed for CloudExtensions record zone
Fetch record zone changes operation failed: %{public}@
Enqueuing request to fetch records from CloudExtensions record zone
Enqueuing %lu modify records operations
Creating CloudExtensions zone
Failed to create CloudExtensions zone with error: %{public}@
Bailing out of creating CloudExtensions zone due to deallocation
Retrying creation of CloudExtensions zone
Waiting to retry creation of CloudExtensions zone
Zone creation retry limit exceeded
Successfully created CloudExtensions zone
Attempting to save zone subscription for CloudExtensions zone
Error occurred deleting records, canceling dependent operations: %{public}@
Finished %@
Received a push notification
Ignoring push notification because notification is nil
Ignoring push notification because sync is disabled
User account changed
Received account Added notification
Received account Modified notification
Received account Deleted notification
Failed to determine encryption state of cloud settings container because container isn't available
Failed to determine encryption state of cloud settings container: %{public}@
Cloud settings container %{public}@ support encryption
Not triggering sync since migration is in progress
*** Starting CloudKit bookmark sync for trigger: %{public}@
Transmitted Internet Records
*** CloudKit bookmark sync failed with result <%{public}@>: %{public}@
*** CloudKit bookmark sync finished with result: %{public}@
Attempting migration from DAV to CloudKit since we got back an explicit 'zone deleted' error
Sending notification of Bookmarks sync result: %ld
Fetching remote migration state
Simulating fetch of 'Unknown' migration state because Safari sync is disabled
Failed to fetch remote migration state: %{public}@
Fetched remote migration state: %ld
Asked to migrate, but bailing because migration is suppressed by the cycler
Bailing out from migration since migration was already in progress
Failed to generate Per-Site Settings record name with error: %{public}@
Failed to generate a CKRecord with the sync data for preference: %{sensitive, mask.hash}@ and domain: %{sensitive, mask.hash}@
Failed to archive dictionary[WBSCloudPerSiteSettingValue] NSDictionary: %{public}@
*** Per site settings initial fetch failed with result <%ld>: %{public}@
*** Per Site settings initial fetch finished with result: %ld
Failed to load permissions from preferences database for %{private}@
Safari's per-site settings have been updated in CloudKit
*** Cloud settings initial fetch failed with result <%ld>: %{public}@
*** Cloud settings initial fetch finished with result: %ld
Beginning to fetch %lu tab group entities for focus
Mapping tab group UUID %{public}@ to title %{sensitive, mask.hash}@
Connection to bookmarks sync agent by %d was denied: Missing entitlement
Ignoring push notification %{public}@ because it does not match any known push topic
Push notification %{public}@ comes from a container that is used by multiple sync coordinators
Attempting to sync Bookmarks in response to a subscription push notification
Attempting to sync Cloud Settings in response to a subscription push notification
Attempting to sync Tab Groups in response to a subscription push notification
Ignoring push notification %{public}@ because it does not match any known subscription
Reached maximum delay before forcing a sync after a push notification
Ignoring attempt at checking database changes since a request is already running - container: %{public}@
Beginning fetch database change operation for container with identifier: %{public}@, server change token: %{public}@
recordZoneChangedBlock for zone ID: %{public}@ (with zone name: %{public}@)
Bookmarks zone changed
Tab Groups zone changed
Cloud Tabs zone changed
Cloud Settings zone changed
Cloud Extensions zone changed
Database changes fetch retry limit exceeded
Failed to fetch database changes for container: %{public}@ with error: %{public}@
Did finish fetching database change operations for container with identifier: %{public}@, new server change token: %{public}@
Attempting to sync Bookmarks in response to a push notification after checking container zones
Attempting to sync Tab Groups in response to a push notification after checking container zones
Attempting to sync CloudKit Tabs in response to a push notification after checking container zones
Attempting to sync settings in response to a push notification after checking container zones
Attempting to sync extension state in response to a push notification after checking container zones
Fetching Bookmarks zone subscription status failed with error: <%{public}@>.
Bookmarks zone subscription already exists
Saving Bookmarks zone subscription failed with error: <%{public}@>.
Saving Bookmarks zone subscription succeeded
Fetching CloudTabs zone subscription status failed with error: <%{public}@>.
CloudTabs zone subscription already exists
Saving CloudTabs zone subscription failed with error: <%{public}@>.
Saving CloudTabs zone subscription succeeded
Ignoring request to sync/migrate because migration is in progress
Ignoring request to sync/migrate because sync is in progress
Will attempt sync/migration in response to trigger: %{public}@
Fetching remote migration state since we tried syncing while not locally migrated
Notifying Safari of iCloud Tabs changes in response to a push notification
Retrying initial CloudTab fetch
Finished initial CloudTab fetch with error %{public}@
Fetching CloudSettings zone subscription failed due to deallocation
Fetching CloudSettings zone subscription status failed with error: <%{public}@>.
CloudSettings zone subscription already exists
Saving CloudSettings zone subscription failed due to deallocation
Saving CloudSettings zone subscription failed with error: <%{public}@>.
Saving CloudSettings zone subscription succeeded
Ignoring request to sync because sync is in progress
Safari Settings syncing is disabled. Cloud settings sync aborted
*** Starting Cloud settings sync for trigger: %{public}@
*** Cloud settings sync failed with result <%ld>: %{public}@
*** Cloud settings sync finished with result: %ld
Notifying Safari of extension state changes in response to a push notification
Fetching CloudExtensions zone subscription failed due to deallocation
Fetching CloudExtensions zone subscription status failed with error: <%{public}@>.
CloudExtensions zone subscription already exists
Saving CloudExtensions zone subscription failed due to deallocation
Saving CloudExtensions zone subscription failed with error: <%{public}@>.
Saving CloudExtensions zone subscription succeeded
Received container change callback. Registering for a new zone subscription
*** Migration to CloudKit started
Checking In xpc activity with identifier %{public}s
Checked In xpc activity with identifier %{public}s
An activity with identifier %{public}s is already scheduled
No prior %{public}s activity was found. Registering a new one
No prior %{public}s activity was found and registration is not requested
Every CloudKit subscription registration succeeded or we were already subscribed
Failed to register for subscriptions to these services: %{public}@
No need to register for CloudKit subscriptions because a registration is in progress
Registering for CloudKit subscriptions xpc activity. Register if needed: %d, ignore ongoing registration: %d delay: %lld, last successful registrations: %{public}@, remaining subscriptions to register: %{public}@
Attempting to save %{public}@ subscriptions
Not attempting to register CloudKit subscriptions because syncing is not available
Registering %{public}@ subscription succeeded or we were already subscribed
Registering %{public}@ subscription failed with error: <%{public}@>
Checking remote migration state for a chance to migrate as a secondary device
Remote migration state is set to finished; determining if secondary device migration can proceed
Attempting to migrate as secondary device
Not proceeding with migration because there is already an ongoing migration
Not proceeding with migration because this device was the primary migrator
No device has migrated yet; continuing to periodically check the remote migration state
Unsupported remote migration state returned; stopping the periodic remote migration check
Registering migration XPC activity
CloudKit bookmarks migration activity is running
Attempting to migrate to CloudKit
*** Migration to CloudKit finished with status: %d
Fetching TabGroups private database subscription status failed with error: <%{public}@>.
TabGroups database private subscription already exists
Saving TabGroups private database subscription failed with error: <%{public}@>.
Saving TabGroups private database subscription succeeded
Fetching TabGroups shared database subscription status failed with error: <%{public}@>.
TabGroups shared database subscription already exists
Saving TabGroups shared database subscription failed with error: <%{public}@>.
Saving TabGroups shared database subscription succeeded
Ignoring request to sync TabGroups because sync is in progress
Retry tab groups sync because running outside of XPC activity failed.
Will attempt tab group sync in response to trigger: %{public}@
Ignoring request to sync TabGroups for manager %{public}@ with trigger %{public}@ because the database does not exist yet
Attempting to sync CloudKit Tabs in response to CloudTabGroupSyncManager detecting changes in CloudTabs record zone
Did detect an issue while syncing related to <rdar://%{public}@>
Did detect an issue while syncing with no corresponding bug IDs
Attempted to post detected syncing bug notification without bug IDs
Posting detected syncing bug notification with bug IDs: <rdar://%{public}@>
Hierarchy check failed, please run sysdiagnose
Asking the position for the root record makes no sense
Unknown item with record name: %{public}@
Item with record name does not have sync data: %{public}@
%{public}s Unknown item type
Creating CloudBookmark to update locally with record name: %{public}@
Unknown item for reparenting with record name: %{public}@
%{public}s Unknown item type %{public}@
Attempting to migrate record with name %{public}@ that does not exist in the local database.
%{public}s Unknown item type %ld
Delete change %{private}@ to update does not have a valid record
Could not decode sync data in deleted change %{private}@ to update with record name: %{public}@.
No record object found in decoded sync data of deleted change %{private}@ to update with record name: %{public}@.
Updating state generation of deleted record with name: %{public}@, generation: %{public}@
Unknown type %ld for change %{private}@
Cannot find configuration for change with type %{public}@ for bookmark %{public}@
Change of type %{public}@ for bookmark %{public}@ of type %{public}@ given without an associated item
Expecting CKBAItemTypeBookmark type for local item %p, but got %ld
Expecting CKBAItemTypeBookmark type for local item %{private}@, but got %ld
Expecting %{public}@ type for local bookmark item %p, but got %ld
Expecting %{public}@ type for local bookmark item %{private}@, but got %ld
Expecting CKBAItemTypeFolder type for local item %p, but got %ld
Expecting CKBAItemTypeFolder type for local item %{private}@, but got %ld
Expecting %{public}@ folder type for local folder item %p, but got %ld
Expecting %{public}@ folder type for local folder item %{private}@, but got %ld
%{public}s Unknown CKRecord type %{public}@
Updating references for the root record makes no sense
Could not find item with record name %{public}@ in database to apply pending references %{public}@
Cannot find configuration for item with record name: %{public}@ to apply pending references %{public}@
Local record with record name %{public}@ to reparent does not have a CKRecord stored in its sync data %{public}@
Reparenting record with record name: %{public}@
%{public}s Unknown item type for record name %{public}@
Delete change of type %{public}@ given without a Server ID
Assigning new record with record name %{public}@ to locally modified item, this could create an empty record on the server
Assigning new record with record name %{public}@ to locally added item
Deleted bookmark change %{private}@ does not have a valid record name.
Ignoring Delete Change object for built-in record with name: %{public}@.
Deleted bookmark change with record name %{public}@ does not have a CKRecord attached to it
Preparing record with name %{public}@ to mark as deleted on the server with generation: %{public}@
Encountered an item with no record name; ignoring it
CKRecord %{private}@ with invalid record name was received; ignoring it
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@ and position: %{public}@
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@
Remote record is missing generation for its parent and position fields
Local record to migrate %p has an invalid record name even though it should have one at this point
Local record to migrate %{private}@ has an invalid record name even though it should have one at this point
Creating %{public}@ to complement saved record with name: %{public}@
Migrated record %{public}@ known to the server has no position!
Creating %{public}@ to migrate record unknown to the server with name: %{public}@
Preparing %{public}@ record with name: %{public}@ for change of type %{public}@ to save to the server with updated keys: <%{public}@>
Attributes <%{public}@> are not included in the set of modified attributes to update the CKRecord despite being used to update the generation
Attributes <%{public}@> are included in the set of modified attributes to update the CKRecord despite not being used to update the generation
Trying to read the value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the value of ParentFolder on a record whose parent was not updated locally. Record name: <%{public}@>.
Trying to read the value of ParentFolder on a record that was deleted locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record whose Title or URL was not updated locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record that was deleted locally. Record name: <%{public}@>.
Saving record with name %{public}@ locally
Loading known keys <%{public}@> from remote record with name: %{public}@
Update generations of record %{public}@ with change of type %{public}@, updated keys <%{public}@>
Attributes <%{public}@> no longer need update despite those changes from a previous update not being validated
Record name: %{public}@, setting parent: %{public}@, generation: %{public}@, position: %{public}@
Non-built-in record with name %{public}@ does not have a position
Updating locally modified attributes <%{public}@>
%{public}@ attribute should have been saved during primary migration but has no generation locally.
Cannot save identity hash attributes since the local record is incomplete.
Did apply reference %{public}@ generation: %{public}@ to attribute %{public}@ of record name: %{public}@
Will merge local and remote records. Record name: %{public}@
Did finish merging local and remote records with record name: %{public}@ due to state changes. Result: %{public}@
Parent and position were updated locally but were not saved to the server
Merging local and remote record fields.
No merging needed for key: %@ with local generation: %@, remote generation: %@
Attribute <%{public}@> expected to be saved to the server has an empty generation
Copy remote value into local record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Copy local value into remote record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Attribute %{public}@ was updated locally but was not saved to the server
Update IdentityHash on remote record.
Update local and remote generations.
Did finish merging local and remote records with record name: %{public}@. Result: %{public}@
Merging parent and position for record Name: %{public}@, local and remote generations are equal: %{public}@
Merging parent and position into local record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging parent and position into remote record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Did finish merging local and remote records with record name: %{public}@. Local record will be deleted because its minimum API version %ld is higher than the API version %ld supported by this client.
Merging minimum API version for record name: %{public}@, local and remote generations are equal: %{public}@
Local and remote minimum API versions differ, even though generations are the same. Record name: %{public}@.
Merging minimum API version into local record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging minimum API version into remote record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote state generations are equal even though their states are different. Local Deleted: %ld, generation: %{public}@, Remote Deleted %ld, generation: %{public}@
Server previously told us the record was deleted, now it is undeleted. Mark the record %{public}@ as moved and continue merging: local generation: %{public}@, remote generation: %{public}@
Local record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both local and remote records are deleted but remote record state generation needs to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both remote and local records are deleted and remote generation does not need to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote records are not deleted and have equal generations: %{public}@.
Updating local state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
Updating remote state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
BAChange %{private}@ is neither a folder change or a bookmark change
Failed to get extensions database URL, falling back to in-memory database
User account changed for extension syncing
Deleting the CloudExtensions database
Saving extension state for the current device to CloudKit
Could not create device for saving extension states from dictionary %{private}@
Saving current device excluding extension states to CloudKit
Could not create device for saving from dictionary %{private}@
Stopping save of extension state for current device
Merging device with existing device in SQLite database, if necessary
Severe SQLite store error occurred while merging device with existing device: %{public}@
Merging device and extension states into existing device from SQLite database
Merging device into existing device from SQLite database
No existing device found in SQLite database
Saving device to CloudKit
Done saving device to CloudKit
Saving extension state record batch of size: %lu
Did fail to save extension state record batch with error: %{public}@
Finished saving extension state record batch
Deleting obsolete extension state records from CloudKit
No obsolete extension state records need to be deleted from CloudKit
Failed to delete obsolete extension state records with error: %{public}@
Done deleting obsolete extension state records from CloudKit
Updating SQLite store from CloudKit after saving extension state
Updating SQLite store from CloudKit after saving extension state failed with error: %{public}@
Done updating SQLite store from CloudKit after saving extension state
Finished saving extension states for the current device to CloudKit
Fetching extension state data from CloudKit
Stopping fetch of extension states
Deleting database and restarting fetch
Reading server change token from SQLite
Finished reading server change token from the SQLite database
Severe SQLite store error occurred while reading server change token: %{public}@
Failed to read from server change token data: %{public}@
Failed to decode server change token with exception: %{public}@
Found server change token data in the SQLite database
Found server change token data in the SQLite database, but couldn't unarchive it
Found server change token data in the SQLite database, but couldn't unarchive it, even after deleting the database
No server change token found in the SQLite database
Fetching changes from CloudKit
Failed to fetch changes with error: %{public}@
Attempting to create CloudExtensions zone before retrying fetch
Finished fetching changes from CloudKit
Fetching changes from CloudKit again after creating CloudExtensions zone
Failed to create CloudExtensions zone when fetching changes with error: %{public}@
No records to delete from SQLite
Removing %lu deleted records from SQLite
Severe SQLite store error occurred while deleting records: %{public}@
Finished removing deleted records from SQLite
No modified devices or extension states to save to SQLite
Saving %lu device records and %lu extension state records to SQLite
Severe SQLite store error occurred while saving records: %{public}@
Failed to save modified device and extension state records to the SQLite database with error: %d
Finished saving modified device and extension state records to the SQLite database
Saving server change token to SQLite
Failed to archive server change token: %{public}@
Severe SQLite store error occurred while saving server change token: %{public}@
Failed to save server change token to SQLite with error: %d
Done saving server change token to SQLite
Skipping loading devices and extension states from SQLite
Loading devices and extension states from SQLite
Severe SQLite store error occurred while loading records: %{public}@
Finished loading devices and extension states from SQLite
Finished fetching extension data from CloudKit
Fetched an invalid extension device record from CloudKit
Fetched an invalid extension state record from CloudKit
Fetched an unrecognized record from CloudKit of type %{public}@
Deleting extension devices from CloudKit
No extension devices to delete
Stopping deletion of extension device records
Deleting extension device records from CloudKit
Failed to delete extension device records with error: %{public}@
Done deleting extension device records from CloudKit
Updating SQLite store from CloudKit after deleting extension device records
Updating SQLite store from CloudKit after deleting extension devices failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting extension device records
Finished deleting extension device records from CloudKit
Severe SQLite store error: %{public}@
Extension syncing not available because user is not signed in
Extension syncing not available because Safari's dataclass isn't enabled
Could not create extension state dictionary when getting extension states from CloudExtensionState %{private}@
Migration state: %ld, expect DAV IDs: %d, expect CloudKit IDs for all records: %d, expect parsable sync data: %d
Checking record with local ID: %{public}@, server ID: %{public}@, item type: %ld, subtype: %ld
Record does not have a server ID even though we expect all records to have one!
Record has a BookmarkDAV ID even though no record should have one!
Record has a CloudKit ID even though no record should have one!
Regular folder has built-in record name: %{public}@, shouldn't!
Built-in folder with type %ld, has invalid record name: %{public}@, expecting: %{public}@
Record has sync key even though migration began.
Item contains sync data even though it should not!
Record has ID %{public}@ but has no sync data!
Item contains sync data that cannot be parsed as CloudKit sync data!
CKRecord in item has a different record name %{public}@ from record name of the item: %{public}@
Record type %{public}@ of CKRecord in item does not match the expected BookmarkLeaf type.
Record type %{public}@ of CKRecord in item does not match the expected BookmarkList type.
CKRecord in item was never saved to the server despite being saved locally.
Sync data has no position stored despite its CKRecord being saved locally.
Sync data has no generation for its parent and position despite having saved sync data.
Sync data has no generation for its folder title and identity hash despite having saved sync data.
Sync data has no generation for its folder title, URL, and identity hash despite having saved sync data.
Checking account hash
Storing account hash
Account hash matches
Needs dataclass enabled check
Needs account hash check
 Successfully updated presence to tabRecordID: %{public}@, %{public}@
 Failed to update presence to tabRecordID: %{public}@, %{public}@
 Cancelling updating presence to tabRecordID: %{public}@, %{public}@
 Starting updating presence to tabRecordID: %{public}@, %{public}@
UserRecordID is already cached
Successfully cached UserRecordID
Could not cached UserRecordID, the user has probably not interacted with the server or it is not possible to communicate with the serve, giving up, error: %{public}@
Attempting to acquire update presence lock with ID: %{public}@
Did acquire lock to update presence
Could not update presence record with error: %{public}@
Failed to acquire the lock again after a retry, the presence record was changed after we got the previous copy, give up.
Failed to acquire the lock again, the presence record was changed after we got the previous copy, try again later.
The presence lock is too old, we are going to try to steal it.
No previous presence record to delete
Deleting previous presence record with ID: %{public}@ to tab: %{public}@
Failed to delete previous presence record with ID: %{public}@, error: %{public}@
Did delete old presence record with ID %{public}@
No need to create a new shared presence record
Did successfully create shared presence record.
Shared presence record already exists, it must have been added somewhere else. Attempt to release the lock.
Failed to create shared presence record, error: %{public}@
Releasing update presence lock with ID: %{public}@
Did successfully release lock private presence record.
Lock private presence record was modified while updating presence, the lock was probably taken away from this device.
Failed to release lock private presence record, error: %{public}@
JSON data could not be decompressed.
JSON data could not be parsed
Unexpected JSON root type, expecting: %{public}@ instead got: %{public}@
Could not save asset with url %{sensitive, mask.hash}@ error: %{public}@
Failed to read from cloud bookmark transformed value data: %{public}@
Failed to decode encrypted data with exception: %{public}@
Cannot verify identity hash of CKRecord with name %{public}@ because its minimumAPIVersion %ld is more recent than the version %ld of the client.
Valid identity hash for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identityHash: %{public}@, components: %{private}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@, components: %{private}@
Failed to instantiate CloudKit settings database!
Record changed: %{private}@
Record of type %{public}@ deleted: <%{public}@>
Fetch records from record zone operation completed for record zone %{public}@
Enqueuing request to fetch records from record zone %{public}@
Number of device in sync circle is 0
Saving CloudSettings zone subscription
Bailing out from saving CloudSettings zone subscription due to deallocation
Saving CloudSettings zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudSettings zone subscription because zone couldn't be created
Saving CloudSettings zone subscription after creating zone
Attempting to save zone subscription for zone: %{public}@
Saving CloudSettings record
Attempting to create CloudSettings zone before retrying save operation
Retrying save operation after creating CloudSettingsZone
Will save merged record
Will retry save with updated batch after error: %{public}@
Retrying save operation
Received batch too large error for an individual record change, bailing out
Attempting to retry save request
Record save retry limit exceeded
Error occurred when deleting records: %{public}@
Clearing cached CloudSettings record zone
Deleting CloudSettings zone
Fetching CloudSettings zone subscription
Failed to fetch CloudSettings zone subscription by ID with error: %{public}@
Successfully fetched CloudSettings zone subscription
Creating CloudSettings zone
Failed to create CloudSettings zone with error: %{public}@
Bailing out of creating CloudSettings zone due to deallocation
Retrying creation of CloudSettings zone
Waiting to retry creation of CloudSettings zone
Successfully created CloudSettings zone
Failed to set up CloudSettings encryption info with error: %{public}@
Successfully set up CloudSettings encryption info
Attempting to save/load record
Successfully saved/loaded record
Failed to save/load record with error: %{public}@
Creating encryption record
Attempting to save/load encryption record
Failed to save/load encryption record due to unrecoverable error: %{public}@
Failed to save/load encryption record due to unexpected and unrecoverable write error: %{public}@
Record zone disappeared while setting up encryption information; bailing
Bailing out from encryption record setup due to deallocation
Encryption record retrieval retry limit exceeded
Moving record %{public}@ into parent record %{public}@
Missing parent record name for bookmark with name %{public}@. Reparenting to root.
Marking record name %{public}@ as moved locally
Attempted to delete built-in record with name: %{public}@, ignoring
Marking record name %{public}@ as deleted
Could not insert record with name %{public}@ in root folder!
Built-in bookmark folder with record name: %{public}@ was moved to parent with record name: %{public}@ instead of root
Could not insert record with name %{public}@ in built-in folder %{public}@!
Could not insert record with name %{public}@ in temporary folder!
Trying to move existing record with name %{public}@ into parent folder %{public}@ but the record does not exist locally!
Creating built-in folder with record name: %{public}@
The temporary folder contains %ld records that were not marked as deleted or moved to their final location. Record names: %{public}@
Record with name %{public}@ does not have a parent even though it was checked right before
Failed to insert %{public}@ into the root folder and for some reason the parent folder does not exist or creates a cycle!
Did finish checking hierarchy consistency, will move remaining records into their final location
Will move record %{public}@ into parent %{public}@
Could not move %{public}@ into folder %{public}@ even though all cycles and broken hierarchies should have been detected and fixed beforehand. Moving to the root.
Failed to insert %{public}@ into the root folder after failing to insert it into %{public}@, apparently there is no hierarchy to speak of.
Already verified parent chain fo record with name %{public}@
Checking parent chain of record with name %{public}@
Moved bookmark with record name %{public}@ was actually not saved to the database!
Parent %{public}@ was deleted, reparenting %{public}@
Loop detected, reparenting %{public}@ in list %{public}@
Parent %{public}@ is not in the database, reparenting %{public}@
Fixing order in local storage based on CloudKit positions
Record name %@, position: %@
Reordering children of root folder
Did finish reordering children of root folder
No children to reorder in folder with Server Sync ID: %@
Reordering children of record with Server Sync ID: %{public}@
Did finish reordering children of record with Server Sync ID: %{public}@
Removing %lu local items that were deleted on the server
Migration state value in server record is of type %{public}@ when NSNumber was expected
Migration state server record value (%{public}@) does not match expected state values
Checked in %{public}@ activity
No prior %{public}@ activity was found. Registering a new one
Running %{public}@ activity
Failed to set the activity state to 'Continue'. Deferring %{public}@ activity
Database for manager %lu doesn't exist. Deferring %{public}@ activity
Failed to acquire the sync lock. Deferring %{public}@ activity
Performing %{public}@ activity
Failed to get a valid device identifier to start coordinating migration.
Not migrating because Safari sync is disabled
Cannot read local migration state for migration due to invalid device identifier.
Not migrating because we've already migrated
Will attempt secondary migration
Will attempt primary migration
Failed to acquire lock on the database to read the migration state
Determining eligibility for local-only migration
Cannot determine eligibility for local-only migration due to invalid device identifier.
Bailing out from secondary migration without fetching remote migration info because Safari sync is disabled
Bailing out from secondary migration eligibility determination due to deallocation
Bailing out from secondary migration because Safari sync is disabled
Received an error fetching remote migration state: %{public}@; will attempt to become responsible for migration
Not eligible for local-only migration; will attempt to become responsible for migration
Remote migration pending; will decide whether we are responsible for resuming migration or should preempt the migrator
Performing local-only migration
Attempting to become responsible for migration by pushing state to the server
Cannot become responsible for migration due to invalid device identifier.
Bailing out from primary migration eligibility determination due to deallocation
Failed to become responsible for migration due to unrecoverable error: %{public}@
Failed to become responsible for migration due to CloudKit write error: %{public}@
Record zone unexpectedly deleted or missing; bailing out of primary migration
Migration coordinator retry limit exceeded
Pushed migration state successfully; assuming we are now responsible for migration
Bailing out from primary migration because Safari sync is disabled
Unable to lock backing store; bailing out from primary migration
Failed to push migration state because some other device modified it first; aborting
Cannot resume pending remote migration due to invalid device identifier
Received a migrationInfo with nil device identifier; will continue evaluating eligibility to steal right to migrate
Migration record indicates that we are the migrating device; attempting to resume migration
Not stealing right to migrate since no last modification date was stored in the migration record
Not stealing right to migrate since migration state was updated recently by another device
Deleting existing record zone in preparation for stealing right to migrate
Something went wrong deleting the existing record zone; bailing out: %{public}@
Stealing right to migrate due to migration timeout
Exceeded maximum migration retry limit
Scheduling migration retry
Starting PRIMARY migration
Starting SECONDARY migration
Migration failed with error %{public}@; resetting local and remote migration state
Migration succeeded
Unable to set remote migration state to %lu due to error: %{public}@; resetting local migration state, will attempt retry
Migration coordinator transitioning from state %zd to state %zd
User account changed for iCloud Settings
iCloud Settings syncing not available because user is not signed in
iCloud Settings syncing not available because Safari's dataclass isn't enabled
Sync coordinator will begin syncing
Already synchronizing; ignoring request to sync
Discontinuing sync because account hash differed
Discontinuing sync because Safari sync is disabled or the user is not signed in
Beginning synchronization
Failed to set up Settings Record Zone with error: %{public}@
Stopping fetch of settings
Have not performed a sync down yet; doing so now
Error received while syncing down: %{public}@
Sync coordinator finished sync down
Failed to decode customization sync server change token: %{public}@
Failed to serialize customization sync server change token: %{public}@
Attempting to create CloudSettings zone before retrying fetch
Fetching changes from CloudKit again after creating CloudSettings zone
Failed to create CloudSettings zone when fetching changes with error: %{public}@
Received unsynced Keychain error, but we're already waiting for PCS identities to change.
Received unsynced Keychain error. Observing notification to start fetching Safari settings when PCS identities change
Performing initial StarSky sync down of Safari's settings.
Change token is expired; trying a full sync down.
Sync coordinator failed to sync settings with error: %{public}@
Retrying sync after receiving synchronization request during synchronization
Not retrying sync after receiving synchronization request during sync since previous sync failed
Syncing done, calling completion handler
Ignoring PCS identity change notification because Customization Sync is not waiting for an identity update
Retrying sync after receiving expected PCS identity change notification.
Saving Safari's background image for the current device to CloudKit
Did fail to save the background image with error: %{public}@
Saving setting for the current device to CloudKit
Did fail to save record with error: %{public}@
Saving Per-Site settings for the current device to CloudKit
When merging the Per-Site Setting's value, local and remote generations are equal: %{public}@
When merging the Per-Site Setting's value, the merge occured in favor of the remote record. Saving the remote record in the database and updating Safari.
Save with record name %{public}@ in WBSPerSitePreferencesSQLiteStore did finish with success: %{public}@
Clearing cached Per-Site Settings sync data
Clearing cached Per-Site Settings sync data in WBSPerSitePreferencesSQLiteStore did finish with success: %{public}@
Deleting settings from CloudKit
Did fail to delete record with error: %{public}@
Clearing cached CloudSettings server change token
*** Failed to instantiate CloudKit database!
Fetching user identity
Returning cached user identity
Failed to fetch user identity due to missing zone: %{public}@
Attempting to fetch user record ID
Failed to fetch user record ID with error: %{public}@
Successfully fetched user record ID
Clearing cached record zone
Saving record batch with %zu records and %zu deletes
Bailing out from saving record batch due to deallocation
Failed to save record batch due to missing zone: %{public}@
Failed to save an individual record because the batch was too large and this one exceeded the limit.
Failed to delete an individual record ID because the batch was too large and this one exceeded the limit.
Failed to delete record ID due to CloudKit error which could not be handled: %{public}@
Batch record save operation completed but now retrying updated batch
Failed to save %zu out of %zu records due to batch size limit, try the remaining records again.
Failed to find participant for e-mail address: %{sensitive, mask.hash}@, error: %{public}@
Found participant for e-mail address: %{sensitive, mask.hash}@
Could not find any participant to add to the share, error: %{public}@
Could not fetch zone-wide share record for zone %{public}@, error: %{public}@
Bailing out from fetching subscription due to deallocation
Failed to fetch database subscription by ID %{public}@ with error: %{public}@
Successfully fetched database subscription
Bailing out from modifying subscription due to deallocation
Fetching Bookmarks zone subscription
Bailing out from fetching Bookmarks zone subscription due to deallocation
Failed to fetch Bookmarks zone subscription status due to missing zone: %{public}@
Fetching Bookmarks zone subscription by ID
Failed to fetch Bookmarks zone subscription by ID with error: %{public}@
Successfully fetched Bookmarks zone subscription
Saving Bookmarks zone subscription
Bailing out from saving Bookmarks zone subscription due to deallocation
Failed to save Bookmarks zone subscription due to missing zone: %{public}@
Fetching record changes for Bookmarks zone
Bailing out fetching record changes due to deallocation
Failed to fetch record changes due to missing zone: %{public}@
Deleting record batch of size: %lu
Attempting to delete bookmark zone
Bookmark zone deletion failed with error: %{public}@
Successfully deleted bookmark zone
Preparing bookmarks record zone, invalidateCachedZone: %d, createIfNeeded: %d
Cached record zone already present; nothing to do
Fetching record zone anew from CloudKit
No existing record zone found
Will attempt to set up zone from scratch
Bailing out without setting up zone
Failed to fetch minimum sync API version when setting up record zone; bailing
*** Minimum sync API version is too new (%lu, our current version is %lu)
Creating speculative encryption record
Successfully setup EncryptionInfo record
Failed to retrieve record with ID %{public}@, error: %{public}@
Server already has a record with ID %{public}@, use it instead
Failed to setup record with ID %{public}@ due to unexpected and unrecoverable write error: %{public}@
Failed to setup record with ID %{public}@ due to unrecoverable error: %{public}@
Record zone disappeared while setting up record with ID %{public}@; bailing
Failed to set up record with ID: %{public}@, error: %{public}@
Did successfully delete records with IDs %{public}@
Failed to delete records with IDs %{public}@, error: %{public}@
Failing save of record batch since migration record disappeared
Will attempt to resave migration record due to recoverable error
Failed to save migration record: %{public}@
Batch record save operation completed but failed to save migration record at end of batch save
Attempting to fetch encryption record from CloudKit
Encryption record fetch failed: %{public}@, returning cached  encryption record
Encryption record fetch failed: %{public}@
Starting fetch of remote migration state
Fetch remote migration state failed <%{public}@>.
Fetch migration state failed <%{public}@>.
Failed to set remote migration state due to missing zone: %{public}@
Completed operation to try to set remote migration state to %ld
Failed to set remote migration state to <%li>: %{public}@
Enqueuing request to set remote migration state to %ld
Minimum sync API version fetch operation completed
Fetch minimum sync API version failed <%{public}@>.
Failed to set minimum sync API version due to failure to set up record zone: %{public}@
Completed operation to try to set minimum sync API version to %ld
Failed to set minimum sync API version to <%li>: %{public}@
Enqueuing request to set minimum sync API version to %ld
Attempting to save new record zone
Failed to set up new record zone: %{public}@
Successfully set up new record zone
Someone deleted the migration record during migration with error: %{public}@
Migrator device identifier changed
Migrator device identifier changed from %@ to %@
Migration state changed from %ld to %ld
Internal-only -fetchAllBookmarkRecordsWithCompletionHandler: called!
Unable to create CloudExtensionState from dictionary: %{private}@
Attempting to start synchronization
Discontinuing sync because a retry has already been scheduled
Discontinuing sync because user is not signed in
Could not create BADatabase to synchronize
Device identifier is empty
Trying to open database after another client already did
Reading migration state %lu
Discontinuing sync since local migration has not yet completed, migration state: %lu
Discontinuing sync since local migration state cannot be read
Database sync data is unreadable, reset all sync data and attempt a migration again
Discontinuing sync because bookmarks Safari sync is disabled
Failed to set up Bookmarks Record Zone with error: %{public}@
Failed to fetch (or received invalid) remote migration state record with error: %{public}@
Scheduling retry #%d in %.1fs.
Discontinuing sync after attempting maximum number of retries
*** Resetting sync data
Bookmark Store setup done, opening database and processing changes
Failed to open database after finishing sync coordinator setup
Records were not saved locally, attempt merging to generate Add changes
Finish syncing
Sync coordinator failed to sync bookmarks with error: %{public}@
Database is unlocked despite having unlocked it before entering this method
Number of processed changes %lu, locally moved records: %lu, change token: %{public}@
Performing hierarchy check for moved records, number of moved records: %lu, number of deleted records: %lu
Discontinuing sync because bookmarks dataclass was disabled during sync
Done saving all record changes
Record %{public}@ was deleted remotely
Did fail to save record batch with error: %{public}@
Performing sync down with last server change token: %{public}@
Did finish fetching records between server change token: %{public}@ and server change token: %{public}@
None of the %ld records sent to be saved to the server were received on sync down. Missing records: %{public}@
Did not receive %ld records on sync down out of the %ld records sent to be saved. Missing records: %{public}@
Did receive %ld records in current sync down that were supposed to be retrieved in the previous one. Received records: %{public}@
Successfully completed full sync down after expired change token error
Record %@ was not seen during sync down after expired change token error; marking it for deletion
Record %@ has MinimumAPIVersion %lu and will be deleted locally
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server before.
Record %@ does not exist locally and is deleted remotely
Has unsaved changes; saving next batch.
Unrooted moved bookmarks are present; will reparent
Error while copying asset. Error description: %@
Sync migration converter beginning migration
Saving bookmarks
Sync migration converter finished migration and sync down
Begin performing sync down while merging records
Did fail to perform merging sync down with error: %{public}@
Did finish merging sync down, temporarily reparent and sort records in case we have cycles or unrooted records in the hierarchy
Did finish reparenting, perform deduplication keeping records with sync data
Did finish deduplication keeping records with sync data, begin converting and saving remaining records
Failed to convert local records with error: %{public}@
Did finish converting and saving remaining records
Perform post-migration sync down
Failed to sync down after migration: %{public}@
Zone deleted during migration conversion; bailing
Bailing from sync down due to deallocation with error %{public}@
Sync migration converter retry limit exceeded
None of the %ld records saved to the server were retrieved on sync down. Missing records: %{public}@
Did finish post-migration sync down
Performing post-migration moved records verification
No records need to be reparented
Did fail to reparent unrooted bookmarks after migration with error: %{public}@
Did finish reparenting unrooted records
Failed to get iCloud Tabs database URL, falling back to in-memory database
Received PCS change notification with state %ld
Ignoring PCS state change notification because it is the same as the current state %ld
Determining CloudTab sync coordinator in response to PCS change notification with state %ld
Determined PCS state to be %ld
Instantiating sync coordinator using PCS state %ld
Failed to read whether to use PCS cloud container for syncing with sqlite error code %d
CloudTabs database has PCS container sync properties
CloudTabs database has normal container sync properties
Database should not be reset because it's using the correct container
CloudTabs database needs to reset because sync properties are not compatible with PCS state %ld
Finished resetting CloudTabs database
Ignoring PCS identity change notification because CloudTabs is not waiting for an identity update
Received expected PCS identity change notification
Informing delegate of a PCS identity change
Received PCS unavailable error from CloudKit. Marking PCS state needs updating
Received unrecoverable PCS error %ld from CloudKit. Deleting the CloudTabs zone and creating a new one
Received unsynced Keychain error. Observing notification to start fetching CloudTabs when PCS identities change
Performing a fetch to fulfill request from %ld outstanding callers
Fetching local migration state from database (isMigrating: %d)
Setting local migration state in database to %ld (isMigrating: %d)
Sync migration coordinator starting PRIMARY migration
Sync migration coordinator starting SECONDARY migration
Sync migration coordinator failed due to migration unexpectedly being in progress
Database was already open by another client, could not open database
Begin performing first deduplication
Did finish performing first deduplication
Starting migration conversion as primaryMigrator = %d
Migration conversion failed with error: %{public}@
Migration conversion succeeded
Sync migration coordinator did fail to migrate with error: %{public}@
Sync migration coordinator did finish migrating.
Sync migration post-processing handler called
Did finish migration, perform last deduplication
Did finish last deduplication
Failed to fetch remote migration state with error: %{public}@
Failed to serialize bookmarks JSON with error: %{public}@
Change for item with server ID %{private}@ is neither bookmark nor folder.
Fetching CloudTabs zone subscription
Failed to fetch CloudTabs zone subscription by ID with error: %{public}@
Successfully fetched CloudTabs zone subscription
Saving CloudTabs zone subscription
Bailing out from saving CloudTabs zone subscription due to deallocation
Saving CloudTabs zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudTabs zone subscription because zone couldn't be created
Saving CloudTabs zone subscription after creating zone
Attempting to create CloudTabs zone before retrying save
Retrying save after creating CloudTabsZone
Deleting CloudTabs zone
Failed ot delete CloudTabs zone with error: %{public}@
Successfully deleted CloudTabs zone
Creating CloudTabs zone
Failed to create CloudTabs zone with error: %{public}@
Bailing out of creating CloudTabs zone due to deallocation
Retrying creation of CloudTabs zone
Waiting to retry creation of CloudTabs zone
Successfully created CloudTabs zone
Error serializing sync events plist data: %{public}@
Error reading sync events plist data: %{public}@
Beginning conversion of folder contents
Did fail to migrate record hierarchy with error: %{public}@
Did finish migrating folder contents
Record %{public}@ has no position and needs saving in folder %{public}@
Found record %{public}@ with position %{public}@ after record %{public}@ with position %{public}@, folder %{public}@ should have been sorted before!
Found record with name %{public}@ after %ld records which do not have a position defined yet
Batch of size %lu with %lu records is full for %@
No more records to save.
Merging record %{public}@ with result %{public}@ indicates that the local record needs to be undeleted during migration. Migration never attempts to delete remote records before the last de-duplication phase.
Failed to delete legacy Tab Groups subscription with error: %@
 Starting TabGroups sync for manager %{public}@ with trigger: %{public}@
 TabGroups sync failed for manager %{public}@ with result <Aborted>
 Starting TabGroups sync for manager %{public}@ with %{public}@
Received unsynced Keychain error. Observing notification to start syncing Tab Groups when PCS identities change.
 TabGroups sync failed for manager %{public}@ with result <%{public}@>: %{public}@, %{public}@
 TabGroups sync finished for manager %{public}@ with result: %{public}@, %{public}@
Ignoring PCS identity change notification because Safari Tab Groups Sync is not waiting for an identity update
Received expected PCS identity change notification. Syncing Tab Groups.
Sending notification of tab group sync result: %{public}zu
Ignoring CKShareMetadata because it is not part of the Tab Groups container: %{public}@
* Will accept share with zone %{public}@, metadata %@, %{public}@
* Failed to accept share with zone %{public}@, metadata %@, error: %{public}@, %{public}@
* Did accept share with zone %{public}@, metadata %@, %{public}@
* Will begin sharing tab group with UUID: %{public}@, with %{public}@
* Did successfully begin sharing tab group with UUID: %{public}@, in shared zone: %{public}@, %{public}@
* Failed to begin sharing tab group with UUID: %{public}@, result: %{public}@, error: %{public}@, %{public}@
Will update user's presence to tab
Could not find tab for UUID: %{public}@
Tab with UUID %{public}@ and recordID %{public}@ is not in a shared tab group, ignoring
Will begin accepting share
Processing local tab operation
Failed to acquire local tab collection lock
Failed to open local tab database
Failed to open tab database
Failed to acquire tab collection lock
Scheduling a tab group sync operation
Saving reparented records
Saving reparented records with record names: %@
Did fail to save reparented records with error: %{public}@
Did finish saving reparented records
Sync down handler starting sync, keep records marked as deleted locally = %d
Sync down handler did fail sync down with with error: %{public}@
Sync down handler did succcessfully sync down
Sync down handler fetching record changes from server change token: %{public}@
Canceling migration sync-down because Safari sync is disabled
Zone deleted during migration sync-down; bailing
Bailing out from sync down due to deallocation with error %{public}@
Sync down handler retry limit exceeded
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server during migration.
Record %{public}@ does not locally exist and cannot be saved locally because of its minimum API version
Record %{public}@ does not exist locally and is deleted remotely
Writing locally record %{public}@ despite the record not existing locally and being deleted remotely for merging
Failed to delete device or extension state: %{public}@ (%d)
Failed to create the cloud_extension_devices table: %{public}@ (%d)
Failed to create the cloud_extension_states table: %{public}@ (%d)
Failed to create the index for cloud_extension_states table: %{public}@ (%d)
Failed to create the metadata table: %{public}@ (%d)
Failed to execute query when resetting database schema: %{public}@ (%d)
Opening iCloud Extensions SQLite database
Failed to open iCloud Extensions store at %{private}@: %{public}@
Failed to exclude CloudExtensions.db from backup: %{public}@
Failed to enable WAL on CloudExtensions.db: %{public}@
Failed to enable foreign keys on iCloud Extensions store: %{public}@ (%d)
Failed to enable secure delete on iCloud Extensions store: %{public}@ (%d)
iCloud Extensions store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Closing iCloud Extensions SQLite database
Removing iCloud Extensions store file
Failed to remove iCloud Extensions store file at %{private}@: %{public}@
Recreating iCloud Extensions store file after removing it
Failed to set the database schema version to %d: %{public}@ (%d)
Failed to update metadata value %{public}@: %{public}@ (%d)
Failed to insert metadata value %{public}@: %{public}@ (%d)
Failed to delete metadata value for key %{public}@: %{public}@ (%d)
Failed to vacuum database: %{public}@ (%d)
Found a device without a UUID in the database.
Found a device without system fields in the database.
Failed to insert or replace device: %{public}@ (%d)
Found an extension state without a composedIdentifier in the database.
Found an extension state without system fields in the database.
Failed to insert or replace extension state: %{public}@ (%d)
Processing %lu changes with changeToken: %@
Add change %{public}@ was provided without a corresponding changed item.
Move change %{public}@ was provided without a corresponding changed item.
Moved item %{public}@ for change %{public}@ did not have a record ID.
Attempted to delete built-in record with name: %{public}@, ignoring.
Attempting to check database open state from a background thread
Attempting to retrieve the database from a background thread
Attempting to retrieve the backing store lock from a background thread
%{public}@ attempting to lock backing store
%{public}@ backing store was already locked
%{public}@ successfully locked backing store
%{public}@ failed to lock backing store
Attempting to unlock the backing store from a background thread
Trying to unlock the database despite the database being already unlocked
%{public}@ did not unlock backing store due to outstanding lock requests
%{public}@ is unlocking the database even though the database is still open
%{public}@ unlocked backing store
Attempting to retrieve the migration state from a background thread
Fetching local migration state from database (isDatabaseLocked: %d, isDatabaseOpen: %d)
Fetched local migration state %ld from database
Attempting to set the migration state from a background thread
Setting local migration state in database to %ld (isDatabaseLocked: %d, isDatabaseOpen: %d)
Attempting to open the database from a background thread
Attempted to open the database without acquiring the lock first.
Attempted to open the database even though it is already open.
Will open the database
Attempting to close the database from a background thread
Attempted to close the database without acquiring the lock first (shouldSave: %d
Attempted to close the database without opening it first (shouldSave: %d
Did close database, did save %d
Failed to delete device, tab, or close request: %{public}@ (%d)
Failed to create the cloud_tab_devices table: %{public}@ (%d)
Failed to create the cloud_tabs table: %{public}@ (%d)
Failed to create the index for cloud_tabs table: %{public}@ (%d)
Failed to create the cloud_tab_close_requests table: %{public}@ (%d)
Opening iCloud Tabs SQLite database
Failed to open iCloud Tabs store at %{private}@: %{public}@
Failed to exclude CloudTabs.db from backup: %{public}@
Failed to enable WAL on CloudTabs.db: %{public}@
Failed to enable foreign keys on iCloud Tabs store: %{public}@ (%d)
Failed to enable secure delete on iCloud Tabs store: %{public}@ (%d)
iCloud Tabs store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Closing iCloud Tabs SQLite database
Removing iCloud Tabs store file
Failed to remove iCloud Tabs store file at %{private}@: %{public}@
Recreating iCloud Tabs store file after removing it
Found a tab without a UUID in the database.
Found a tab without system fields in the database.
Found a tab without a position dictionary in the database.
Couldn't create a tab's position from the position dictionary in the database.
Found a tab without a URL in the database.
Failed to insert or replace tab: %{public}@ (%d)
Found a close request without a request UUID in the database.
Found a close request without system fields in the database.
Found a close request without a destination device UUID in the database.
Found a close request without a tab URL in the database.
Found a close request without a tab UUID in the database.
Failed to create a CloudTabCloseRequest from the database.
Failed to insert or replace close request: %{public}@ (%d)
Deleting the iCloud Tabs database
User account changed for iCloud Tabs
iCloud Tab syncing not available because user is not signed in
iCloud Tab syncing not available because Safari's dataclass isn't enabled
Saving tabs for the current device to CloudKit
No iCloud Tab device found to save
Stopping save of tabs for current device
Merging device with existing device in SQLite database
Saving iCloud Tab record batch of size: %lu
Did fail to save iCloud Tab record batch with error: %{public}@
Finished saving iCloud Tab record batch
Deleting obsolete tab records from CloudKit
No obsolete tab records need to be deleted from CloudKit
Failed to delete obsolete tab records with error: %{public}@
Done deleting obsolete tab record from CloudKit
Updating SQLite store from CloudKit after saving tabs
Updating SQLite store from CloudKit after saving tabs failed with error: %{public}@
Done updating SQLite store from CloudKit after saving tabs
Finished saving tabs for the current device to CloudKit
Saving close request to CloudKit
No close request found to save
Stopping save of close requests
Did fail to save iCloud Tab record batch with close requests with error: %{public}@
Successfully saved close request to CloudKit
Updating SQLite store from CloudKit after saving close request
Updating SQLite store from CloudKit after saving close request failed with error: %{public}@
Done updating SQLite store from CloudKit after saving close request
Finished saving close request to CloudKit
Fetching iCloud Tab data from CloudKit
Stopping fetch of tabs
Attempting to create CloudTabs zone before retrying fetch
Fetching changes from CloudKit again after creating CloudTabs zone
Failed to create CloudTabs zone when fetching changes with error: %{public}@
No modified devices, tab records, or close requests to save to SQLite
Saving %lu device records, %lu tab records, and %lu close requests to SQLite
Failed to save modified device, tab, and close request records to the SQLite database with error: %d
Finished saving modified device, tab, and close request records to the SQLite database
Skipping loading devices, tabs, and close requests from SQLite
Loading devices, tabs, and close requests from SQLite
Finished loading devices, tabs, and close requests from SQLite
Finished fetching iCloud Tab data from CloudKit
Fetched an invalid iCloud Tab device record from CloudKit
Fetched an invalid iCloud Tab tab record from CloudKit
Fetched an invalid iCloud Tab close request record from CloudKit
Deleting devices from CloudKit
No devices to delete
Deleting close requests from CloudKit
No close requests to delete
Stopping deletion of records
Deleting records from CloudKit
Failed to delete records with error: %{public}@
Done deleting records from CloudKit
Updating SQLite store from CloudKit after deleting records
Updating SQLite store from CloudKit after deleting records failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting records
Finished deleting records from CloudKit
Sync coordinator received a message to delete the CloudTabs zone
Sync coordinator successfully deleted CloudTabs zone and local database
Prepare records for migration
Number of records prepared for migration: %ld
Convert built-in record with recordName %{public}@ for migration
Record of type %ld has built-in record name %{public}@ despite not being a built-in folder, generating a new record name
Convert new local record with created recordName %{public}@ for migration
Already converted record with recordName %{public}@ for migration
Convert Bookmark DAV record with recordName %{public}@ for migration
Trying to generate DAV server ID for bookmark with local ID %{public}@, but that bookmark doesn't exist
Received nil set of child local IDs for folder with local ID %{public}@ while generating DAV server IDs
Clearing referenced record with generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Did find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Could not find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Overriding previous referenced record : %{public}@ generation: %{public}@ with referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Cannot apply reference: %{public}@ with generation: %{public}@ to attribute %{public}@ of record name: %{public}@ because the item is missing locally.
No references to apply
Sync coordinator begins setting up local store
Could not allocate collection.
Sync coordinator did finish setting up local store
Discontinuing sync because device identifier is empty
No associated records for UUID %{public}@
Bookmark with UUID %{public}@ does not represent a sharable tab group, actual type: %{public}@
Sync coordinator will begin sharing tab group %{public}@ with record name: %{public}@
Did finish checking whether to create a legacy tab group, should create placeholder: %{public}@.
Could not set up shared tab group zone with error: %{public}@
Did finish setting up shared secondary tab group zone, with result: %{public}@
Did finish saving migration tombstones and checking whether to create a legacy tab group but we do not need to create the placeholder.
Will begin creating legacy placeholder tab group
Did fail to create legacy placeholder tab group with error: %{public}@
Did successfully create legacy placeholder tab group
Will begin saving migration tombstones to the default zone
Failed to save migration tombstones to the default zone error: %{public}@
Did finish saving migration tombstones to the default zone
Will begin saving records to the new zone %{public}@
Did fail to save records to the new zone %{public}@
Did finish saving records to the new zone %{public}@
Will save CKShare record to the new zone %{public}@
CloudTabGroupSyncCoordinator got deallocated while migrating the share.
Failed to save CKShare record to the new zone %{public}@, error: %{public}@
Did save CKShare record to the new zone %{public}@
Perfoming sync down of the new zone %{public}@
Failed sync down records for new zone %{public}@, error: %{public}@
Did finish sync down of the new zone %{public}@
Saving record with ID: %{public}@, data: %{sensitive}@
Record with ID %{public}@ is already in a tab group specific zone and does not need to be moved
Record with ID %{public}@ is neither in the default zone to become a tombstone or in the destination zone %{public}@
Attempting to accept share for shareURL %{sensitive, hash.mask}@
Did fetch share metadata for shareURL %{sensitive, hash.mask}@, %{sensitive, mask.hash}@
Failed to fetch CKShareMetadata record for URL %{sensitive, mask.hash}@
Successfully accepted share for shareURL: %{sensitive, mask.hash}@
Will perform sync down of zone %{public}@
Did fail to perform sync down of zone %{public}@ for shareURL %{sensitive, mask.hash}@
Successfully performed sync down for zone %{public}@ of shareURL %{sensitive, mask.hash}@
Failed to fetch CKShare record for metadata %{sensitive, mask.hash}@
Will load last known minimum OS version in circle cache.
Cache for last known minimum OS version in circle is still valid. Should create placeholder tab: %@
Cache for last known minimum OS versions in circle is no longer valid; fetching metadata.
A device with an older iOS version is still in the circle, require shared tab groups.
A device with an older macOS version is still in the circle, require shared tab groups.
Did update last known minimum OS versions in circle.
Will begin building next updated records batch
Ignoring change lacking record with token %zu
Adding record with name: %{public}@ to batch, data: %{sensitive}@
Failed to delete recordZoneID batch with error: %{public}@
Done deleting recordZoneID batch.
Failed to save record batch with error: %{public}@
Done saving record batch, posting highlights to Messages
Done saving record batches, clearing changes during or before generation %{public}zu
Deleting recordZoneID batch of size: %zu
Failed to delete zone with ID: %{public}@, error: %{public}@
Failed to delete record zone ID batch with error: %{public}@
Saving record batch of size: %zu, number of deleted records: %zu to database: %{public}@
Resolving merge conflict for record with name: %{public}@
Will begin building next batch of deleted auxiliary records
Sync coordinator did finish deleting auxiliary records
Failed to delete record batch in private database with error: %{public}@
Failed to delete record batch in shared database with error: %{public}@
Done deleting auxiliary record batches, clearing records in sync data
Did fetch record with name: %{public}@, data: %{sensitive}@
Ignoring record of type %{public}@ with ID %{public}@, because it is a placeholder record
Ignoring record of type %{public}@ with ID %{public}@, because it is a child record of a placeholder with ID %{public}@
Bookmark with server ID %{public}@ is not inserted
Bookmark with server ID %{public}@ is deleted
Bookmark with server ID %{public}@ uses a more recent API version (%zu), then supported (%zu)
Parent bookmark with server ID %{public}@ not found, moving to recovered bookmarks
Scoped bookmark changes should have a valid tab group.
Shared tab group changes should have a valid parent bookmark.
Updating share record for zone: %{public}@
Deleting share record for tab group: %{public}@
Did receive presence record with ID %{public}@ for participant: %{public}@, tabRecordName: %{public}@, isExpired: %d
Did receive presence record deletion with ID %{public}@
Will begin sync down
Performing sync down with last server change token in private database: %{public}@
Performing sync down with last server change token in shared database: %{public}@
Primary record zone has disappeared, we need to migrate again.
Found %lu zones deleted in database %{public}@, deleting local records.
Found no zones to update in database %{public}@
Found %lu zones with IDs %{public}@ updated in database %{public}@, fetching records
Performing sync down for record zone IDs %{public}@ in database: %{public}@, configurations: %{public}@
Did receive record delete for record %{public}@, type: %{public}@
Did finish receiving record changes from zone %{public}@
Failed to sync down records with error: %{public}@, per record zone errors: %{public}@
Did finish sync down for record zone IDs %{public}@, configurations: %{public}@
Record %{public}@ was not seen during sync down after expired change token error; marking it for deletion
Failed to save asset with error: %{public}@
Error while copying asset. Error description: %{public}@
Record %{public}@ was changed remotely
Creating new bookmark
Failure to get a collaboration highlight with error %{public}@ for the CKShare: %{public}@ %{private}@
SafariBookmarksSyncAgent
APSConnectionDelegate
NSObject
CloudExtensionStore
SafariSyncControllerConnectionHandling
WBSSafariBookmarksSyncAgentProtocol
WBSCyclerCloudBookmarksAssistant
WBTabGroupSyncAgentProtocol
WBSSafariSyncServiceProtocol
SafariSyncController
CloudBookmarkDatabaseLockArbiterDelegate
CloudTabSyncArbiterDelegate
NSXPCListenerDelegate
CloudTabGroupSyncManagerDelegate
CloudSettingSyncCoordinatorDelegate
AppleAccountInformationProvider
WBSAppleAccountInformationProviding
CloudTabGroupExpiredChangeTokenHandler
CloudBookmark
SafariBookmarksSyncExtras
CloudTabGroupBatchItem
CloudExtensionSyncCoordinator
CloudExtensionSQLiteStoreDelegate
CloudBookmarkDebugHierarchyChecker
CloudBookmarkAccountPropertiesStore
CloudTabGroupPresenceUpdater
CloudBookmarkCompressedJSONValueTransformer
CloudBookmarkDatabaseHandler
CloudBookmarkUpdater
CloudBookmarkCKReferenceValueTransformer
CloudBookmarkEncryptedObjectValueTransformer
CloudBookmarkWBSHashGeneratorExtras
CloudSettingStore
CloudBookmarkMovedBookmarkManager
CloudSettingsSyncEngineAccessProvider
CloudBookmarkAttributeValueTransformer
CloudExtensionsExtras
CloudBookmarksExtras
CloudBookmarksFetchResult
CloudTabGroupMaintenanceActivity
CloudBookmarksMigrationCoordinator
CloudBookmarkExpiredChangeTokenHandler
CloudTabCloseRequest
NSCopying
CloudBookmarkDatabaseAccessProvider
CloudBookmarkItemConfiguration
CloudSettingSyncCoordinator
CloudBookmarkStore
CloudBookmarkStoreUserDefaultsStorage
CloudBookmarkStoreLocalStorage
CloudExtensionState
CloudTabGroupAccountPropertiesStore
CloudBookmarkSyncCoordinator
WBSCRDTPositionGeneratorDelegate
CloudBookmarkSyncMigrationConverter
CloudBookmarkSyncMigrationSaveHandlerDelegate
CloudBookmarkSyncMigrationSyncDownHandlerDelegate
CloudTabGroupSyncEvent
CloudBookmarkCKOperationGroupExtras
CloudTabSyncArbiter
CloudTabSyncProtocol
CloudTabLocalStoreShim
CloudTabLocalStore
CloudTabLocalStoreDelegate
CloudBookmarkSyncMigrationCoordinator
CloudBookmarksDiagnostics
CloudBookmarkCKAssetValueTransformer
CloudTabRemoteStore
CloudTabGroupSyncDebugger
CloudTabGroupSyncCoordinatorObserving
CloudBookmarkSyncMigrationFolderContentConverter
CloudBookmarkSyncMigrationPositionGenerator
_CloudBookmarkSyncMigrationPositionGeneratorEnumerator
CloudBookmarkSyncMigrationSaveHandler
CloudTabGroupSyncManager
CloudTabGroupSyncCoordinatorDelegate
CloudTabGroupMaintenanceActivityDelegate
CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler
CloudBookmarkSyncMigrationSyncDownHandler
CloudExtensionSQLiteStore
WBSSQLiteDatabaseDelegate
CloudBookmarkChangeProcessor
CloudBookmarkDatabaseLockArbiter
CloudBookmarkDatabaseCoordinating
CloudBookmarkWindowsCompatibleStringValueTransformer
CloudBookmarkWindowsCompatibleURLValueTransformer
CloudBookmarkURLIdentityHashValueTransformer
CloudExtensionDevice
CloudTab
CloudKitSQLiteStore
CloudTabDevice
CloudTabsExtras
CloudTabSQLiteStore
CloudTabSyncCoordinator
CloudBookmarkSyncMigrationHierarchyConverter
CyclerCloudBookmarksAssistant
CloudBookmarkPendingReferenceManager
CloudTabGroupBatch
CloudTabGroupSyncCoordinator
CloudRemoteStore
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v24@0:8@16
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v20@0:8B16
v16@0:8
@"APSConnection"
@24@0:8@16
v32@0:8@16@?24
v44@0:8@16B24@28@?36
v40@0:8@16@24@?32
v56@0:8@16@24@?32@?40@?48
v64@0:8@16@24@32@40@48@?56
v56@0:8@16@?24@?32@40@?48
v64@0:8@16@24@?32@?40@48@?56
@32@0:8@16@?24
@"CKDatabase"
@"CKRecordZone"
@"NSOperationQueue"
@"NSObject<OS_dispatch_queue>"
@"CKContainer"
v24@0:8@?16
v28@0:8B16@?20
v24@0:8@?<v@?@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
v24@0:8q16
v36@0:8@16B24@?28
v24@0:8@?<v@?q@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData">16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"NSArray"@"NSArray"@"NSError">16
v24@0:8@?<v@?B>16
v32@0:8@"NSDictionary"16@?<v@?>24
v36@0:8@"NSURL"16B24@?<v@?>28
v24@0:8@?<v@?>16
v40@0:8@"NSDictionary"16@"NSDictionary"24@?<v@?@"NSError">32
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSDictionary"@"NSArray"@"NSError">16
v48@0:8@16@24@32@?40
v24@0:8@"<WBTabGroupSyncAgentSyncObserver>"16
v24@0:8@"CKShareMetadata"16
v32@0:8@"NSString"16@?<v@?@"CKShare"@"NSError">24
v40@0:8@"NSURL"16@"NSData"24@?<v@?@"CKShare"@"NSError">32
v24@0:8@"NSString"16
v32@0:8@"WBBrowserState"16@?<v@?B@"NSError">24
v32@0:8@"WBTabGroup"16@?<v@?B@"NSError">24
v40@0:8@"WBTabGroup"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v48@0:8@"NSArray"16@"WBTabGroup"24@"WBTab"32@?<v@?B@"NSError">40
v32@0:8@"WBTab"16@?<v@?B@"NSError">24
v40@0:8@"NSArray"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"WBWindowState"16@?<v@?B@"NSError">24
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
v24@0:8@"CloudBookmarkDatabaseLockArbiter"16
@28@0:8@16B24
@"CKContainer"28@0:8@"CloudTabSyncArbiter"16B24
v24@0:8@"CloudTabSyncArbiter"16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
B24@0:8@"CloudTabGroupSyncManager"16
v24@0:8@"CloudTabGroupSyncManager"16
v32@0:8@"CloudTabGroupSyncManager"16@"NSSet"24
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecord"24
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecordID"24
v24@0:8@"CloudSettingSyncCoordinator"16
v48@0:8@"CloudSettingSyncCoordinator"16@"NSData"24@"NSString"32@?<v@?B>40
@24@0:8q16
v40@0:8q16@24@?32
v40@0:8@16q24@?32
@32@0:8@16@24
v44@0:8r*16@24B32@?36
d32@0:8q16@24
v48@0:8Q16@24@32@?40
v48@0:8B16B20Q24q32q40
v48@0:8Q16Q24@32@?40
v32@0:8@16q24
@"ACAccountStore"
@"<WBSBookmarkDBAccess>"
@"CloudBookmarkStore"
@"NSXPCListener"
@"NSTimer"
@"NSDate"
@"NSObject<OS_os_transaction>"
@"WBSDiagnosticStateCollector"
@"CloudBookmarkDatabaseLockArbiter"
@"CloudBookmarkSyncMigrationCoordinator"
@"CloudBookmarksMigrationCoordinator"
@"CloudBookmarkSyncCoordinator"
@"NSObject<OS_dispatch_source>"
@"CyclerCloudBookmarksAssistant"
@"NSMutableSet"
@"NSUserDefaults"
@"CloudTabSyncArbiter"
@"CloudSettingStore"
@"CloudSettingSyncCoordinator"
@"<WBSSettingsSyncEngineAccess>"
@"NSMutableDictionary"
@"NSString"
@"NSMutableArray"
@"CloudExtensionStore"
@"CloudExtensionSyncCoordinator"
@"CloudTabGroupSyncManager"
@"WBTabCollection"
v24@0:8@?<v@?q>16
q16@0:8
@"WebBookmarkCollection"
@40@0:8@16^v24@32
@48@0:8@16^v24@32@40
v40@0:8^v16@24@32
@40@0:8^v16@24@32
@56@0:8@16@24^v32@40@48
v56@0:8@16@24^v32@40@48
@48@0:8^v16@24@32@40
@48@0:8r^v16@24@32@40
B32@0:8^v16@24
@32@0:8@16^B24
v32@0:8^v16@24
B48@0:8@16@24@32@40
Q32@0:8@16@24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16^B24
r^v16@0:8
@"WBBookmarkSyncData"
@"CloudBookmarkItemConfiguration"
@40@0:8@16@24@32
@48@0:8@16@24@32@40
@"WBChangeRecord"
@"NSSet"
v32@0:8@"CloudExtensionSQLiteStore"16@"NSError"24
@"CloudExtensionSQLiteStore"
@"CKOperationGroup"
@"CloudExtensionDevice"
@"CKRecord"
@"NSArray"
@"NSError"
@"CKServerChangeToken"
q24@0:8@16
B24@0:8^v16
B40@0:8^v16@24B32B36
@"<CloudBookmarkDatabaseCoordinating>"
v44@0:8@16@24B32@?36
v60@0:8@16@24@32@40B48@?52
v52@0:8@16@24@32B40@?44
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"CKRecordID"
@24@0:8#16
@"NSData"24@0:8@"NSArray"16
@"WBSCRDTPosition"24@0:8@"NSString"16
B48@0:8@"CKReference"16@"WBSCRDTGeneration"24@"NSString"32@"NSString"40
v40@0:8@"NSURL"16@"NSURL"24@?<v@?@"NSError">32
@"CKRecordZoneID"16@0:8
@"NSArray"16@0:8
@"CloudBookmarkAccountPropertiesStore"
@32@0:8@16Q24
@"CKRecordZoneID"
v56@0:8@16@24@32@40@?48
v60@0:8@16B24@28@36@?44@?52
v56@0:8@16@24@32@?40@?48
v64@0:8@16@24@32@40@?48@?56
@"WBSHashGenerator"
@32@0:8^v16@24
@28@0:8B16^@20
@24@0:8^@16
B32@0:8@16^@24
@32@0:8@16^@24
v24@0:8^@16
B24@0:8q16
B28@0:8@16B24
@32@0:8q16@24
v24@0:8Q16
@"NSData"
@"WBCollectionConfiguration"
@"<CloudTabGroupMaintenanceActivityDelegate>"
d16@0:8
v36@0:8B16@20@?28
@32@0:8@16^v24
@24@0:8Q16
@64@0:8@16@24@32@40@48@56
@24@0:8^{_NSZone=}16
@88@0:8q16q24@32@40@48@56@64@72@?80
@?16@0:8
@"NSDictionary"
@"NSOrderedSet"
v28@0:8B16@20
@"<CloudSettingSyncCoordinatorDelegate>"
@40@0:8q16@24@32
@32@0:8@16q24
v48@0:8@16@24@?32@?40
v80@0:8@16@24@32@40@?48@?56@?64@?72
v80@0:8@16@24@32@40@48@56@?64@?72
v40@0:8B16B20@24@?32
v72@0:8@16@24@32@40@48@?56@?64
v40@0:8@?16@?24@?32
v48@0:8@16@?24@?32@?40
v48@0:8q16@24@32@?40
v32@0:8Q16@?24
@"NSObject<OS_os_log>"
@"<CloudBookmarkStoreLocalStorage>"
@"NSData"16@0:8
v24@0:8@"NSData"16
@112@0:8@16@24@32@40@48B56B60@64@72@80@88@96@104
@"NSString"24@0:8@"WBSCRDTPositionGenerator"16
q24@0:8@"WBSCRDTPositionGenerator"16
@"WBSCRDTPosition"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@"NSString"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@32@0:8^@16@?24
@"CloudBookmark"
@"WBSCRDTPosition"
@"CloudBookmarkMovedBookmarkManager"
@"CloudBookmarkPendingReferenceManager"
@"WBSCRDTPositionGenerator"
@"CloudBookmarkExpiredChangeTokenHandler"
B56@0:8@16@24@32@40@48
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"NSString"24
B32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
B56@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"NSString"24
B56@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
@"CloudBookmarkSyncMigrationFolderContentConverter"
@"CloudBookmarkSyncMigrationSyncDownHandler"
@"CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler"
@40@0:8@16q24@32
v32@0:8q16@?24
@"CloudTabSQLiteStore"
@"CloudTabRemoteStore"
@"CloudTabSyncCoordinator"
@"CloudTabLocalStoreShim"
@"WBSCloudKitContainerManateeObserver"
@"<CloudTabSyncArbiterDelegate>"
v24@0:8@?<v@?@"NSArray"@"NSArray">16
v32@0:8@"NSString"16@?<v@?@"CloudTabDevice">24
v32@0:8@"NSArray"16@?<v@?i>24
v48@0:8@"NSArray"16@"NSArray"24@"NSArray"32@?<v@?i>40
v32@0:8@"NSData"16@?<v@?i>24
v24@0:8@?<v@?Bi>16
v28@0:8B16@?<v@?i>20
@"<CloudTabLocalStoreDelegate>"16@0:8
v24@0:8@"<CloudTabLocalStoreDelegate>"16
v24@0:8@"<CloudTabLocalStore>"16
v32@0:8@"<CloudTabLocalStore>"16@"NSError"24
@"<CloudTabLocalStoreDelegate>"
@"<CloudTabLocalStore>"
v44@0:8B16@20@?28@?36
@"CloudBookmarkSyncMigrationConverter"
@24@0:8^v16
v56@0:8^v16@24^q32^q40@48
v24@0:8@"CloudTabGroupSyncCoordinator"16
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSDictionary"24
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSArray"24
v32@0:8@"CloudTabGroupSyncCoordinator"16@"CKRecord"24
@"CloudTabGroupSyncEvent"
@"CloudBookmarkSyncMigrationPositionGenerator"
@"NSEnumerator"
@48@0:8@16@24^@32^@40
@48@0:8@16@24@32q40
@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>"
v56@0:8@16@24@32@40@48
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSSet"24
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSString"24
v40@0:8@"CloudTabGroupSyncCoordinator"16@"NSSet"24@"NSString"32
v56@0:8@"CloudTabGroupSyncCoordinator"16@"NSString"24@"NSString"32@"NSString"40@"CKRecordID"48
v40@0:8@"CloudTabGroupSyncCoordinator"16@"NSString"24@"CKRecordID"32
v24@0:8@"CloudTabGroupMaintenanceActivity"16
v32@0:8@?16@?24
v36@0:8@?16B24@?28
@"CloudTabGroupMaintenanceActivity"
@"CloudTabGroupSyncCoordinator"
@"CloudTabGroupPresenceUpdater"
@"NSMapTable"
@"CKSystemSharingUIObserver"
@"CloudTabGroupSyncDebugger"
@"<CloudTabGroupSyncManagerDelegate>"
@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>"
v32@0:8@"WBSSQLiteDatabase"16@"NSError"24
i16@0:8
v20@0:8i16
v28@0:8@16i24
v24@0:8i16i20
i24@0:8@16
@"<CloudExtensionSQLiteStoreDelegate>"
@"<CloudBookmarkUpdater>"
B24@0:8@"NSString"16
@"<WBSBookmarkDBAccess>"16@0:8
@"<CloudBookmarkDatabaseLockArbiterDelegate>"
@76@0:8@16@24@32@40B48@52@60@68
@96@0:8@16@24@32@40@48@56B64B68@72@80@88
v96@0:8@16@24@32@40@48@56B64B68@72@80@88
@32@0:8@16r*24
i20@0:8i16
i32@0:8q16@24
i32@0:8@16@24
@"NSURL"
@"WBSSQLiteDatabase"
@64@0:8@16@24B32B36@40@48@56
@64@0:8@16@24B32@36B44@48@56
@"CloudTabDevice"
@"CloudTabCloseRequest"
v24@0:8^v16
v52@0:8i16@20@28@36@?44
@36@0:8i16@20@28
@36@0:8@16@24B32
B40@0:8@16@24@32
@48@0:8@16#24@32@40
@36@0:8@16@24i32
@52@0:8@16@24@32i40@44
@48@0:8@16@24q32@40
@"CloudTabGroupAccountPropertiesStore"
@"CloudTabGroupExpiredChangeTokenHandler"
@"NSHashTable"
@"SWHighlightCenter"
@"<CloudTabGroupSyncCoordinatorDelegate>"
@"CKOperationConfiguration"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mobilesafari</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.application-identifier</key>
<string>com.apple.Safari</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.SafariShared.CloudTabs</key>
<string>com.apple.SafariShared.CloudTabs</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.security.container-required</key>
<string>com.apple.mobilesafari</string>
<key>com.apple.private.security.storage.Safari</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mobilesafarishared</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>SafariBookmarksSyncAgent</string>
</array>
</dict>
</plist>
!$'*
u"A$
 $'*-
com.apple.SafariBookmarksSyncAgent.Push
v8@?0
com.apple.icloud-container.
CloudExtensions
CloudExtensionZoneSubscription
com.apple.SafariBookmarksSyncAgent.CloudExtensions.CloudExtensionStore.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.CloudExtensions.CloudExtensionStore.%@.%p.internalQueue
com.apple.SafariBookmarksSyncAgent.CloudExtensions.CloudExtensionStore.%@.%p.completionHandlerQueue
v24@?0@"NSDictionary"8@"NSError"16
v16@?0@"NSError"8
v24@?0@"CKSubscription"8@"NSError"16
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v24@?0@"CKRecord"8@"NSError"16
v16@?0@"CKRecord"8
v24@?0@"CKRecordID"8@"NSString"16
B16@?0@"NSError"8
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
com.apple.das.overrideRateLimiting
com.apple.private.safari.can-use-bookmarks-sync-agent
DebugHierarchyCheckerEnabled
LastDatabaseServerChangeToken.
CloudSettings
NewestLaunchedSafariBookmarksSyncAgentVersion
604.4
Bookmarks Sync Agent State
localMigrationState
@"NSDictionary"8@?0
com.apple.Safari.CloudBookmarks.SafariBookmarksSyncAgent.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.ActivityCheckInQueue
com.apple.SafariBookmarksSyncAgent.CustomizationSyncQueue
SafariSyncController determine encryption state of cloud settings container transaction
does
does not
v24@?0@"CKAccountInfo"8@"NSError"16
Safari
v24@?0q8@"NSError"16
v24@?0@"WBSCloudBookmarksRemoteMigrationInfo"8@"NSError"16
v16@?0@"NSArray"8
SafariSyncController get CloudTabRemoteStore transaction
v16@?0@"CloudTabRemoteStore"8
SafariSyncController save Per-Site Setting transaction
v24@?0@"NSString"8@"NSError"16
v16@?0@"NSDictionary"8
v20@?0@"NSData"8B16
UndefinedDeviceClass
DeviceClassNumber
iPhone
iPad
default
v16@?0@"NSTimer"8
data
isLightAppearance
SafariSyncController delete Safari background image transaction
SafariSyncController perform per site setting sync transaction
v20@?0@"NSSet"8B16
SafariSyncController perform customization sync transaction
SafariSyncController save extension states transaction
SafariSyncController save extension device transaction
SafariSyncController get extension states transaction
v32@?0@"NSDictionary"8@"NSArray"16@"NSError"24
SafariSyncController delete extension devices transaction
SafariSyncController delete extension states database transaction
@"NSDictionary"16@?0@"WBTabGroup"8
0.0.0
Sync Delay Timer After Push Notification Transaction
v16@?0@"CKRecordZoneID"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
Push Notification Database Changes Check
SafariSyncController network connectivity XPC activity check in transaction
SafariSyncController perform bookmark sync transaction
SafariSyncController fetch remote migration state transaction
v32@?0q8@"NSString"16@"NSError"24
v16@?0q8
v24@?0@"NSObject<OS_xpc_object>"8@?<v@?BB>16
Cloud Tabs Notification Transaction
SafariSyncController update Safari's local settings transaction
SafariSyncController delete Safari's local background image transaction
SafariSyncController saving Safari's Page Zoom sync data to disk
v16@?0B8B12
v16@?0@"NSObject<OS_xpc_object>"8
CloudKit Subscription Request
v24@?0Q8@"NSError"16
B32@?0Q8@"CKSubscription"16@"NSError"24
v12@?0B8
SafariSyncController perform tab groups sync transaction
User Did Update Database
Received Push Notification
Account Added
Zone Creation
Account Modified
Local Client Finished Syncing
PCS Identities Changed
The attempted operation requires an entitlement
com.apple.SafariBookmarksSyncAgent.XPC.BookmarkSyncNetworkConnectivity
com.apple.SafariBookmarksSyncAgent.XPC.InitialManateeCloudTabFetchRetry
Bookmarks
CloudKit Tabs
Tab Groups Private Database
Tab Groups Shared Database
Customization Sync
Extension State Sync
com.apple.SafariBookmarksSyncAgent.XPC.ZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.PeriodicRemoteMigrationStateObserver
com.apple.SafariBookmarksSyncAgent.migration
com.apple.SafariBookmarksSyncAgent.XPC.TabGroupSyncNetworkConnectivity
<None>
Update Remote
Update Local
Update Local Parent Or Position
Delete Local
Undelete Local
<%@>
B16@?0@"CloudBookmarkItemConfiguration"8
+[CloudBookmark cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:]
Deleted
+[CloudBookmark cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:]
ParentAndPosition
-[CloudBookmark _initWithChange:databaseAccessor:updater:]
ParentFolder
MinimumAPIVersion
Position
v32@?0@"NSString"8@"NSURL"16^B24
v32@?0@"NSString"8@16^B24
v24@?0@"NSString"8@16
v32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"WBSCRDTGeneration"16^B24
Folder
Bookmark
Move
Modify
Delete
CKBAItemTypeBookmark
CKBAItemTypeFolder
<Unknown CKBABookmarkType %ld>
CKBAFolderTypeRegular
CKBAFolderTypeFavorites
CKBAFolderTypeBookmarksMenu
CKBAFolderTypeReadingList
CKBAFolderTypeTabGroupScopedBookmark
<Unknown CKBAFolderType %ld>
cloudBookmarkAccountIdentityDidChange
cloudBookmarkAccountPropertiesDidChange
primaryAccount
ccom.apple.Safari.CloudBookmarks.CloudExtensionSyncCoordinator.extensionStateSavingQueue
com.apple.Safari.CloudBookmarks.CloudExtensionSyncCoordinator.extensionStateFetchingQueue
Cloud Extension State Saving
Cloud Extension Device Deleting
Cloud Extension State Fetching
v16@?0@"CloudExtensionDevice"8
v16@?0@"NSData"8
v16@?0@"CKRecordID"8
v32@?0@"CKServerChangeToken"8@"NSData"16@"NSError"24
v12@?0i8
@"NSDictionary"16@?0@"CloudExtensionDevice"8
CloudExtensions.db
Bookmarks-Backup-for-31802262
http
TitleAndIdentityHash
TitleURLAndIdentityHash
TabGroupTabParticipantPresence
Participant
TabGroupTab
Lock
UserTabGroupPresence
UserPresence_
com.apple.Safari.CloudBookmarks.CloudTabGroupPresenceUpdater.%@.%p._processUpdateQueue
v24@?0@"CKRecordID"8@"NSError"16
v28@?0@"CKRecord"8B16@"NSError"20
com.apple.Safari.CloudBookmarks.CloudBookmarkDatabaseHandler.%@.%p.imageSavingQueue
Asset temporary or destination URL was not available.
CloudBookmarksOverrideDeviceIdentifier
CloudSettingsZoneSubscription
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.internalQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.completionHandlerQueue
Cloud Settings Encryption Info Fetching
v24@?0@"CKRecordZone"8@"NSError"16
31742989
32414244
v32@?0@"NSString"8@"NSString"16^B24
q24@?0@"NSString"8@"NSString"16
q24@?0@"WBSCRDTPosition"8@"WBSCRDTPosition"16
CloudExtensionDevice
CloudExtensionState
com.apple.Safari.CloudBookmarks
Errors
v32@?0@8@"NSError"16^B24
_generation
_deviceIdentifier
SyncRequirements
MinimumSyncAPIVersion
EncryptionInfo
KeyID
MigrationState
MigratorDeviceIdentifier
metadata_device_type
DeviceOSType
DeviceOSVersion
DeviceOSBuild
DeviceOSVersionNumber
DeviceSoftwareBundleId
DeviceSoftwareVersion
Tab Collection Maintenance
com.apple.SafariBookmarksSyncAgent.%@.%p
Tab Collection Maintenance Transaction
com.apple.SafariBookmarksSyncAgent.XPC.TabCollectionMaintenance
Migration coordinator
CloudBookmarksDebugDelayInSecondsBeforeStealingRightToMigrate
v24@?0@"NSError"8@?<v@?>16
DestinationDevice
TabURL
TabUUID
DestinationDeviceUUID
LastModified
DictionaryType
CloseTabRequest
<%@: %p; tabURL = "%@"; tabUUID = "%@"; destination device uuid = "%@";
BookmarkList
BookmarkLeaf
TabGroup
TabGroupScopedBookmarkList
TabGroupScopedBookmarkLeaf
IdentityHash
PreviewTextAndHasUserDefinedPreviewText
Title
DateAdded
DateLastViewed
ImageURL
PreviewText
HasUserDefinedPreviewText
B16@?0@"CKRecord"8
IsSelectedFavoritesFolder
LastSelectedTab
BackgroundImage
IsPinned
Cloud Settings Data Fetching
Cloud Settings Data Saving
Cloud Settings Data Deletion
Cloud Settings Background Image Saving
customizationSyncServerToken
settingsSyncAccountHash
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16@"NSError"24
cloudBookmarkDidDetectBug
bugIDs
CloudBookmarkStoreErrorDomain
Cloud Bookmark Migration State Check
ZoneSubscription
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.internalQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.completionHandlerQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.operationQueue
Cloud Bookmark Migration From DAV
Cloud Bookmark Subscription Request
Tab Groups Subscription Request
v24@?0@"WBSHashGenerator"8@"NSError"16
v48@?0@"WBSRetryableCKModifyRecordZonesOperation"8@"CloudBookmarkStore"16@"NSArray"24@"NSArray"32@"NSError"40
v32@?0@"WBSRetryableCKModifyRecordsOperation"8@"CloudBookmarkStore"16@"NSError"24
v48@?0@"WBSRetryableCKModifyRecordsOperation"8@"CloudBookmarkStore"16@"NSArray"24@"NSArray"32@"NSError"40
v32@?0@"CloudBookmarkStore"8@"CKRecordZoneID"16@"NSError"24
@"CKRecordID"16@?0@"CKRecordZoneID"8
v40@?0@"CloudBookmarkStore"8@"CKRecord"16@"CKRecordID"24@"NSError"32
v40@?0@"WBSRetryableCKFetchRecordsOperation"8@"CloudBookmarkStore"16@"NSDictionary"24@"NSError"32
v24@?0@"CloudBookmarkStore"8@"CKRecordZoneID"16
v44@?0@"WBSRetryableCKFetchDatabaseChangesOperation"8@"CloudBookmarkStore"16@"CKServerChangeToken"24B32@"NSError"36
v40@?0@"CloudBookmarkStore"8@"CKRecordID"16@"CKRecord"24@"NSError"32
v32@?0@"CloudBookmarkStore"8@"CKRecordID"16@"NSString"24
v52@?0@"CloudBookmarkStore"8@"CKRecordZoneID"16@"CKServerChangeToken"24@"NSData"32B40@"NSError"44
v32@?0@"WBSRetryableCKFetchRecordZoneChangesOperation"8@"CloudBookmarkStore"16@"NSError"24
v16@?0@"WBSRetryableCKModifyRecordsOperation"8
@"CKRecordID"32@?0@"CKRecord"8Q16^B24
v32@?0@"CloudBookmarkStore"8@"CKRecordID"16@"NSError"24
v40@?0@"CloudBookmarkStore"8@"NSURL"16@"CKShareMetadata"24@"NSError"32
v32@?0@"WBSRetryableCKFetchShareMetadataOperation"8@"CloudBookmarkStore"16@"NSError"24
v40@?0@"CloudBookmarkStore"8@"CKUserIdentityLookupInfo"16@"CKShareParticipant"24@"NSError"32
B16@?0@"CKShareParticipant"8
v24@?0@"CKShare"8@"NSError"16
v32@?0@"WBSRetryableCKFetchShareParticipantsOperation"8@"CloudBookmarkStore"16@"NSError"24
v40@?0@"CloudBookmarkStore"8@"CKShareMetadata"16@"CKShare"24@"NSError"32
v32@?0@"WBSRetryableCKAcceptSharesOperation"8@"CloudBookmarkStore"16@"NSError"24
v16@?0@"WBSRetryableCKFetchSubscriptionsOperation"8
v40@?0@"WBSRetryableCKFetchSubscriptionsOperation"8@"CloudBookmarkStore"16@"NSDictionary"24@"NSError"32
v16@?0@"WBSRetryableCKModifySubscriptionsOperation"8
v48@?0@"WBSRetryableCKModifySubscriptionsOperation"8@"CloudBookmarkStore"16@"NSArray"24@"NSArray"32@"NSError"40
v40@?0@"WBSRetryableCKFetchRecordZonesOperation"8@"CloudBookmarkStore"16@"NSDictionary"24@"NSError"32
v24@?0@"NSArray"8@"NSError"16
@"CKRecordID"16@?0@"NSString"8
@"NSString"24@?0@"CKRecordID"8^B16
metadata_zone
MigrationStateEncodedRecordData
TabGroupMigrationStateEncodedRecordData
ComposedIdentifier
ContainingAppAdamID
DisplayName
Enabled
EnabledByUserGesture
OwningDevice
IOSAppBundleIdentifier
IOSExtensionBundleIdentifier
MacOSAppBundleIdentifier
MacOSExtensionBundleIdentifier
v32@?0@"NSString"8@"NSDictionary"16^B24
<%@: %p; composedIdentifier = "%@"; containingAppAdamID = "%@"; displayName = "%@"; lastModifiedDate = "%@"; owning device uuid = "%@"; isEnabled = %d; wasEnabledByUserGesture = %d>
Sync coordinator
com.apple.Safari.CloudBookmarks.CloudBookmarkSyncCoordinator.%@.%p.imageSavingQueue
v20@?0q8B16
v16@?0@"WBSCloudBookmarksRemoteMigrationInfo"8
@"CloudBookmark"16@?0^B8
record
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16q24
32548082
Asset temporary url or destination URL was not available.
v32@?0@"NSSet"8@"NSSet"16@"NSError"24
v24@?0@"NSSet"8@"NSError"16
Subtitle
SymbolName
ExtraAttributes
Metadata
Children
@"CloudTabGroupSyncEvent"16@?0@"NSDictionary"8
%@ - %@
dictionaryRepresentation
v16@?0@"CloudTabSyncCoordinator"8
v16@?0B8i12
v24@?0@"NSArray"8@"NSArray"16
CloudTabs.db
Sync migration coordinator
(null)
deviceIdentifier
hasAccountHash
changes
localBookmarks
domain
code
description
remoteMigrationStateError
remoteMigrationState
migratorDeviceIdentifier
AwaitingMigration
InProgress
Finished
Unknown
changeType
itemType
serverID
modifiedAttributes
hasSyncData
hasCKRecord
hasPosition
hasTitleGeneration
count
addCount
deleteCount
moveCount
modifyCount
summary
details
bookmarksCount
foldersCount
title
children
isFavorites
IsTabGroup
isTabGroup
folderType
bookmarkType
Regular
Favorites
ReadingList
BookmarksMenu
TabGroupFavorites
CloudTabs
CloudTabsZoneSubscription
com.apple.Safari.CloudBookmarks.CloudTabRemoteStore.%@.%p.operationQueue
CloudTab
TabGroupSyncDebuggerEnabled
TabGroupSyncDebugger.plist
Change Tag
Record Name
Record Type
Zone Name
Library/Safari
Sync Up
icloud.and.arrow.up
Sync Down
icloud.and.arrow.down
square.on.square
square.text.square
folder
bookmark
person.crop.circle
record.circle
@"NSDictionary"16@?0@"CloudTabGroupSyncEvent"8
Fetch Zone Changes
square.and.arrow.down
Last Server Change Token
v32@?0@"CKRecordZoneID"8@"CKFetchRecordZoneChangesConfiguration"16^B24
Send Batch
paperplane
Save Record
Fetched Record
B16@?0@"CloudTabGroupSyncEvent"8
Sync Manager
TabGroupsPrivateDatabaseSubscription
TabGroupsSharedDatabaseSubscription
TabGroupsZoneSubscription
v32@?0@"CKRecordID"8@"CKShare"16@"NSError"24
com.apple.SafariBookmarksSyncAgent.%@.%p._tabCollectionQueue
Cloud Tab Groups Sync (%@)
Cloud Tab Groups Migration
Cloud Tab Groups Accept Shared Tab Group
v32@?0q8@"CKShare"16@"NSError"24
Cloud Tab Groups Setup Shared Tab Group
Cloud Tab Groups Update Tab Group Presence
Cloud Tab Groups Accept Share
com.apple.Safari.CloudBookmarks.CloudExtensionSQLiteStore
DELETE FROM cloud_extension_devices WHERE device_uuid = ?
DELETE FROM cloud_extension_states WHERE record_name = ?
CREATE TABLE cloud_extension_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,last_modified REAL NOT NULL,new_tab_page_composed_identifier TEXT,new_tab_page_set_by_user_gesture BOOLEAN DEFAULT 0,new_tab_page_last_modified REAL NOT NULL)
CREATE TABLE cloud_extension_states (record_name TEXT PRIMARY KEY NOT NULL,composed_identifier TEXT NOT NULL,system_fields BLOB NOT NULL,owning_device_uuid TEXT NOT NULL,containing_app_adam_id TEXT,display_name TEXT NOT NULL,is_enabled BOOLEAN DEFAULT 0,was_enabled_by_user_gesture BOOLEAN DEFAULT 0,ios_app_bundle_identifier TEXT,ios_extension_bundle_identifier TEXT,mac_app_bundle_identifier TEXT,mac_extension_bundle_identifier TEXT,last_modified REAL NOT NULL,FOREIGN KEY(owning_device_uuid) REFERENCES cloud_extension_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_extension_states__owning_device_uuid ON cloud_extension_states (owning_device_uuid)
CREATE TABLE metadata (key TEXT NOT NULL UNIQUE, value)
DROP TABLE IF EXISTS cloud_extension_devices
DROP TABLE IF EXISTS cloud_extension_states
DROP TABLE IF EXISTS metadata
SELECT device_uuid, system_fields, device_name, last_modified, new_tab_page_composed_identifier, new_tab_page_set_by_user_gesture, new_tab_page_last_modified FROM cloud_extension_devices
SELECT system_fields, device_name, last_modified, new_tab_page_composed_identifier, new_tab_page_set_by_user_gesture, new_tab_page_last_modified FROM cloud_extension_devices WHERE device_uuid = ?
INSERT INTO cloud_extension_devices (device_uuid, system_fields, device_name, last_modified, new_tab_page_composed_identifier, new_tab_page_set_by_user_gesture, new_tab_page_last_modified)VALUES (?, ?, ?, ?, ?, ?, ?)ON CONFLICT(device_uuid) DO UPDATE SET device_uuid = ?1, system_fields = ?2, device_name = ?3, last_modified = ?4, new_tab_page_composed_identifier = ?5, new_tab_page_set_by_user_gesture = ?6, new_tab_page_last_modified = ?7
SELECT composed_identifier, system_fields, containing_app_adam_id, display_name, is_enabled, was_enabled_by_user_gesture, ios_app_bundle_identifier, ios_extension_bundle_identifier, mac_app_bundle_identifier, mac_extension_bundle_identifier, last_modified, record_name FROM cloud_extension_states WHERE owning_device_uuid = ?
INSERT OR REPLACE INTO cloud_extension_states (record_name, composed_identifier, system_fields, owning_device_uuid, containing_app_adam_id, display_name, is_enabled, was_enabled_by_user_gesture, ios_app_bundle_identifier, ios_extension_bundle_identifier, mac_app_bundle_identifier, mac_extension_bundle_identifier, last_modified)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
v24@?0@"NSString"8@"NSString"16
Migration state lock arbiter property
DeviceName
NewTabPageComposedIdentifier
NewTabPageLastModified
NewTabPageSetByUserGesture
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; composedIdentifierForNewTabPage = "%@"; newTabPageSetByUserGesture = %@; lastModifiedDateForNewTabPage = %@;  cloudExtensionStates = (
    %@
    
B32@?0@"CloudExtensionState"8Q16^B24
IsShowingReader
ReaderScrollPositionPageIndex
OwningSceneID
pageIndex
ReaderScrollPosition
UUID
<%@: %p; title = "%@"; url = "%@"; uuid = "%@"; owning device uuid = "%@"; owning sceneID = "%@"; position = %@; isShowingReader = %d; readerScrollPositionPageIndex = %@; isPinned = %d>
server_change_token
Library/Safari/
PRAGMA foreign_keys = ON
db-lock
db-shm
db-wal
PRAGMA user_version = %d
SELECT value FROM metadata WHERE key = ?
UPDATE metadata SET value = ? WHERE key = ?
INSERT INTO metadata (key, value) VALUES (?, ?)
DELETE FROM metadata WHERE key = ?
VACUUM
PRAGMA user_version
HasDuplicateDeviceName
IsEphemeralDevice
Capabilities
Tabs
CloudKitBookmarkSyncing
Device
B32@?0@"CloudTab"8Q16^B24
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; hasDuplicateName = %d; isEphemeralDevice = %d; tabs = (
    %@
wbsCloudTabDictionaryRepresentation
CloudTabDevice
CloudTabCloseRequest
use_manatee_container
com.apple.Safari.CloudBookmarks.CloudTabSQLiteStore
DELETE FROM cloud_tab_devices WHERE device_uuid = ?
DELETE FROM cloud_tabs WHERE tab_uuid = ?
DELETE FROM cloud_tab_close_requests WHERE close_request_uuid = ?
CREATE TABLE cloud_tab_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,has_duplicate_device_name BOOLEAN DEFAULT 0,is_ephemeral_device BOOLEAN DEFAULT 0,last_modified REAL NOT NULL)
CREATE TABLE cloud_tabs (tab_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_uuid TEXT NOT NULL,position BLOB NOT NULL,title TEXT,url TEXT NOT NULL,is_showing_reader BOOLEAN DEFAULT 0,is_pinned BOOLEAN DEFAULT 0,reader_scroll_position_page_index INTEGER,scene_id TEXT,FOREIGN KEY(device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_tabs__device_uuid ON cloud_tabs (device_uuid)
CREATE TABLE cloud_tab_close_requests (close_request_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,destination_device_uuid TEXT NOT NULL,url TEXT NOT NULL,tab_uuid TEXT NOT NULL,FOREIGN KEY(destination_device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
DROP TABLE IF EXISTS cloud_tab_devices
DROP TABLE IF EXISTS cloud_tabs
DROP TABLE IF EXISTS cloud_tab_close_requests
SELECT device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices
SELECT system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices WHERE device_uuid = ?
INSERT INTO cloud_tab_devices (device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified)VALUES (?, ?, ?, ?, ?, ?)ON CONFLICT(device_uuid) DO UPDATE SET device_uuid = ?1, system_fields = ?2, device_name = ?3, has_duplicate_device_name = ?4, is_ephemeral_device = ?5, last_modified = ?6
SELECT tab_uuid, system_fields, position, title, url, is_pinned, is_showing_reader, reader_scroll_position_page_index, scene_id FROM cloud_tabs WHERE device_uuid = ?
q24@?0@"CloudTab"8@"CloudTab"16
INSERT OR REPLACE INTO cloud_tabs (tab_uuid, system_fields, device_uuid, position, title, url, is_showing_reader, is_pinned, reader_scroll_position_page_index, scene_id)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid FROM cloud_tab_close_requests
INSERT OR REPLACE INTO cloud_tab_close_requests (close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid)VALUES (?, ?, ?, ?, ?)
Cloud Tab Data Fetching
Cloud Tab Data Saving
Cloud Tab Close Requests Saving
Cloud Tab Close Requests Deleting
Cloud Tab Devices Deleting
Cloud Tab Zone Deleting
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabSavingQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabFetchingQueue
v16@?0@"CloudTabDevice"8
DAV-
com.apple.CloudKitBookmarks.CyclerCloudBookmarksAssistant
https://fake-dav-id-for-testing/
Migration failed
Unable to acquire database lock
@"WBSPair"32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
change
B24@?0@"CKRecord"8^B16
B24@?0@"CKRecordID"8^B16
TabGroupTabParticipantStatus
ReadStatus
TabReadStatus_
LastKnownMinimumVersionsInCircleCacheDate
LastKnownMinimumSafariVersionInCircle
LastKnownMinimumIOSVersionInCircle
16.0
13.0
com.apple.SafariSyncService.%@.%p._internalQueue
com.apple.SafariSyncService.%@.%p._assetSavingQueue
@"WBBookmarkDatabaseSyncData"16@?0@"WBBookmarkDatabaseSyncData"8
v32@?0q8@"WebBookmarkCollection"16@"NSError"24
v32@?0@"CKRecordZone"8@"WBSHashGenerator"16@"NSError"24
@"CKRecord"12@?0i8
B8@?0
v32@?0@"NSURL"8@"CKShareMetadata"16@"NSError"24
v32@?0@"CKShareMetadata"8@"CKShare"16@"NSError"24
99999999
9999999
@"NSString"32@?0@"CKRecordZoneID"8Q16^B24
@"WBBookmarkSyncData"16@?0@"WBBookmarkSyncData"8
v24@?0@"CKRecordZoneID"8@"NSError"16
B24@?0@"CKShareParticipant"8^B16
@"WBBookmarkSyncData"24@?0@"WebBookmark"8@"WBBookmarkSyncData"16
v32@?0@"CKServerChangeToken"8@"NSArray"16@"NSError"24
ckShortDescription
@"CKFetchRecordZoneChangesConfiguration"32@?0@"CKRecordZoneID"8Q16^B24
v48@?0@"CKServerChangeToken"8@"NSArray"16@"NSArray"24@"NSArray"32@"NSError"40
v16@?0@"WebBookmark"8
v32@?0@"CKRecordID"8@"CKRecord"16@"NSError"24
@"NSString"32@?0@"CKRecordZoneID"8@"NSError"16^B24
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16^B24
Asset destination URL was not available.
Sync Coordinator Saving Assets
v40@?0@"CloudRemoteStore"8@"CKRecordID"16@"CKRecord"24@"NSError"32
v32@?0@"CloudRemoteStore"8@"CKRecordID"16@"NSString"24
v52@?0@"CloudRemoteStore"8@"CKRecordZoneID"16@"CKServerChangeToken"24@"NSData"32B40@"NSError"44
v32@?0@"WBSRetryableCKFetchRecordZoneChangesOperation"8@"CloudRemoteStore"16@"NSError"24
com.apple.SafariShared
CloudBookmarks
DiagnosticExtension
KeyedArchiver
SiriLink
collaborationHighlightForURL:error:
execute
privateCloudDatabase
setLocalMigrationState:generateDeviceIdentifierIfNeeded:
safari_filterObjectsUsingBlock:
boolAtIndex:
setTimeoutIntervalForRequest:
errorWithDomain:code:userInfo:
unionSet:
privacyPreservingDescription
markSpecial:
dataWithPropertyList:format:options:error:
setTimeout:
safari_errorWithDomain:code:privacyPreservingDescription:
uncopiedDataAtIndex:
error
previousServerChangeToken
setLocalCloudKitMigrationState:database:
absoluteString
dataWithJSONObject:options:error:
markChildrenInFolderAsRead:
invalidate
enumerateKeysAndObjectsUsingBlock:
unarchivedObjectOfClass:fromData:error:
setLastSyncedRecordGeneration:
postNotificationName:object:userInfo:deliverImmediately:
setTabCollection:
dataWithContentsOfURL:options:error:
intersectsSet:
aa_primaryAppleAccount
enumerateDescendantsOfBookmark:usingBlock:
bookmarkWithUUID:
unableToSilentlyMigrateToCKBookmarksWithReason:
mainBundle
setLastSharedDatabaseServerChangeToken:
postNotificationName:object:userInfo:
setSystemSharingUIDidStopSharingBlock:
intersectSet:
dataUsingEncoding:
aa_altDSID
safari_errorByAddingCloudKitPrivacyPreservingUserInfoForItemID:
bookmarkWithServerID:excludeDeletedBookmarks:
setLastServerChangeToken:forRecordZoneID:
initRequiringSecureCoding:
postNotificationName:object:
setSystemSharingUIDidSaveShareBlock:
safari_ensureDirectoryExists:
bookmarkWithID:
dataForKey:
interfaceWithProtocol:
encodedData
initReadingListBookmarkWithTitle:address:previewText:
setLastSelectedChildID:
setSyncState:
dataAtIndex:
integerValue
safari_encryptedValues
lookupInfosWithEmails:
bookmarkTypeWithBookmark:
encodedBookmarkSyncData
setLastReadGeneration:
initForReadingFromData:error:
positionFromContentsOfData:
intValue
setSyncKey:item:
safari_encodedSystemFieldsData
data
lookupInfo
bookmarkTypeForChange:
encodeObject:forKey:
initFolderWithParentID:subtype:deviceIdentifier:
setLastPrivateDatabaseServerChangeToken:
currentUserParticipant
intAtIndex:
safari_encodedRecordData
enableWAL:
setSyncData:item:
bookmarkType
lockSync
topic
initFolderWithParentID:
currentTabServerIDPresenceForParticipant:inTabGroupWithServerID:
setSyncData:forKey:
int64AtIndex:
safari_dictionaryForKey:
emailAddress
indexOfObjectPassingTest:
setInterface:forSelector:argumentIndex:ofReply:
currentTabServerIDPresenceForParticipant:getTabGroupServerID:
safari_dictionaryByMappingObjectsToKeysUsingBlock:
bookmarkIDWithSpecialID:
insertObject:atIndex:
timeIntervalSinceReferenceDate
localizedDescription
doubleValue
positionForBookmarkWithRecordName:
indexOfObject:inSortedRange:options:usingComparator:
safari_dictionaryByMappingObjectsAsKeysToObjectsUsingBlock:
initWithZoneName:ownerName:
currentConnection
bookmarkIDForServerID:excludeDeletedBookmarks:
localTimeZone
doubleForKey:
timeIntervalSinceNow
setHashGenerator:forRecordZoneID:
indexOfObject:
positionDictionaryRepresentation
localRecordGeneration
setSubscriptionsToSave:
initWithZoneID:subscriptionID:
doubleAtIndex:
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
setHandler:
incrementedGenerationWithDeviceIdentifier:
saveBookmark:incrementGenerations:
setSubscriptionIDsToDelete:
initWithZoneID:
domain
incrementGenerationForKey:withDeviceIdentifier:
setGroup:
tabWithUUID:
setSubscriptionIDs:
localCloudKitMigrationState:
saveBackupOfDatabase:withName:
inMemoryDatabaseURL
setGeneration:forKey:
safari_descriptionWithoutSpaces
initWithUUIDString:deviceOrCloseRequestDictionary:
setStoreOwner:
didSuccessfullyMigrateToCKBookmarksAsPrimaryMigrator:
setGeneration:
performMaintenanceOnDatabase:afterVersion:
initWithURL:queue:
_postNoticeForHighlightEvent:
setStateChangeObserver:
bookmark
didStartMigratingToCKBookmarksAsPrimaryMigrator:localState:remoteState:
performMaintenance
setFetchSubscriptionCompletionBlock:
safari_dateForKey:
bindString:atParameterIndex:
didRemoveTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
safari_tabGroupsRecordZoneID
identifier
setFetchShareParticipantsCompletionBlock:
initWithTitle:address:parentID:subtype:deviceIdentifier:
safari_dataByDecompressingData
setShouldSendContentAvailable:
bindInt:atParameterIndex:
safari_tabGroupSecondaryRecordZoneIDWithRootRecordName:
didReceiveRemoteCloudSettingsUpdateWithRecord:
tabGroups
setFetchShareMetadataCompletionBlock:
initWithTitle:address:
setShareURLs:
safari_dataByCompressingData
bindInt64:atParameterIndex:
safari_tabGroupRootRecordName
length
performDeduplicationWithDatabase:mode:
setFetchRecordsCompletionBlock:
setShareRecord:
createLegacyPlaceholderTabGroupBookmarksForSharedTabGroup:
safari_substringFromPrefix:
initWithTabCollection:
safari_cloudTabsContainer
lastSyncedRecordGeneration
bindDouble:atParameterIndex:
performDatabaseUpdatesWithTransaction:secureDelete:
setFetchRecordZonesCompletionBlock:
setShareMetadatas:
lastSharedDatabaseServerChangeToken
initWithSubscriptionsToSave:subscriptionIDsToDelete:
createFolderWithType:database:
safari_cloudSettingsContainer
bindData:atParameterIndex:
didNotSaveRecordsAfterMigration
safari_stringForKey:
hasSuffix:
setFetchRecordZoneChangesCompletionBlock:
setShareInvitationTokensByShareURL:
createDatabaseWithoutLock
UUIDString
initWithSubscriptionIDs:
safari_stringByNormalizingVersionString
didNavigateInTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
lastServerChangeTokenForRecordZoneID:
path
hasPrefix:
initWithSubscriptionID:
setFetchDatabaseChangesCompletionBlock:
createDatabase
setServerId:item:
safari_cloudExtensionsContainer
lastSelectedChildID
participantsDidUpdateInTabGroupWithUUID:
setServerID:forBookmark:
hasGenerationForKey:
setFetchAllChanges:
initWithSharingInvitationData:shareURL:
safari_cloudBookmarksDefaults
safari_startPageBackgroundImageFileURLForIdentifier:
lastReadGeneration
didFetchRecentlyAcceptedSharedTabGroupWithUUID:
participants:didLeaveSharedTabGroupWithUUID:
setServerID:
setExportedObject:
safari_cloudBookmarksContainer
lastPrivateDatabaseServerChangeToken
tabCollection
didFailToMigrateToCKBookmarksAsPrimaryMigrator:error:
safari_startPageBackgroundImageFileURL
participants:didJoinSharedTabGroupWithUUID:
initWithSet:
setExportedInterface:
safari_browserDefaults
syncableBookmarksIDsInFolderWithBookmarkID:
lastPathComponent
didDeleteRemoteRecordWithID:
participants
setExpirationAfterTimeInterval:
safari_boolForKey:
createBookmarkWithType:database:
syncStringForKey:
lastObject
handle
setSelectedFavoritesFolder:
setExpectedSendSize:
safari_bookmarksRecordZoneID
countByEnumeratingWithState:objects:count:
initWithRecordsToSave:recordIDsToDelete:
syncState
lastModifiedUserRecordID
safari_setObject:
didChangeScopedFavoritesInSharedTabGroupWithUUID:byParticipantWithRecordID:
setExpectedReceiveSize:
safari_arrayForKey:
count
initWithRecordZonesToSave:recordZoneIDsToDelete:
didChangeBackgroundImageInSharedTabGroupWithUUID:byParticipantWithRecordID:
syncSettingsUpDictionary
parentRecordID
getSyncDataForPreference:domain:completionHandler:
setRole:
copyValueForKey:item:
initWithRecordZoneIDs:configurationsByRecordZoneID:
syncSetString:forKey:
didAddTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
parentID
getSyncDataForPreference:completionHandler:
setEnabledTopics:ignoredTopics:opportunisticTopics:
setResourceValue:forKey:error:
initWithRecordZoneID:
safari_SHA1Hash
copySyncKeyWithItem:
syncDataWithContentsOfData:
dictionaryWithObjects:forKeys:count:
setDiscretionaryNetworkBehavior:
initWithRecordType:zoneID:
safariTabCollectionConfiguration
copySyncDataWithItem:
syncDataForKey:
lastErrorMessage
getDeletedCloudKitSyncDataForRecordName:completionHandler:
setRecordsToSave:
copyServerIdsInFolderWithServerId:database:
initWithRecordType:recordID:
syncDataForBookmark:
beginMergingChangesWithDatabase:
setDidReceiveNonRetryableError:
setRecordZonesToSave:
copyServerIdWithItem:
initWithRecordName:zoneID:
safari_removeFileAtURL:error:
keyID
dictionary
setDidNotSaveRecordsAfterMigration:
ownerName
setRecordZoneWithIDWasPurgedBlock:
initWithRecordID:action:
copyServerIdWithChange:
setDidExceedRetryTimeout:
copyServerIdInFolderBeforeServerId:database:
orderedSetWithObject:
setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock:
initWithPreviousServerChangeToken:
UUID
backgroundImageGeneration
setDeviceIdentifier:
orderedSetWithArray:
zoneName
getAllPreferenceInformationForPreference:completionHandler:
copyServerIdInFolderAfterServerId:database:
setRecordZoneWithIDWasDeletedBlock:
resume
deviceIdentifierForCloudKitWithCollectionType:generateIfNeeded:
backgroundImageExists
safari_privacyPreservingDescription
orderedSet
zoneID
setDeletedBookmarkSyncData:change:
initWithOwner:handlingQueue:
copySaveURLForAssetWithKey:item:
setRecordZoneWithIDChangedBlock:
generationKeyForField:
itemTypeWithItem:
backgroundImageAppearanceIsLight
orderIndexOfBookmark:withSyncPosition:inFolderWithID:
writeToURL:options:error:
setRecordZoneIDsToDelete:
copyParentServerIdWithItem:
auxiliaryRecordIDsToDelete
orderIndex
deviceCount
itemTypeForChange:
writeToDatabase:databaseAccessor:
setDefaultConfiguration:
generationForKey:
setRecordZoneIDs:
copyModifiedAttributesWithChange:
auxiliaryRecordIDs
determineManateeStateWithCompletion:
weakObjectsHashTable
setDateLastViewed:
generation
options
initWithMigrationState:migratorDeviceIdentifier:serverModificationDate:
copyLocalIDsInFolderWithLocalID:database:
setRecordZoneFetchCompletionBlock:
auxiliaryRecordForKey:
setDateAdded:
supportsDeviceToDeviceEncryption
generatePositionsForChildRecordNamesGroupedByParentFolders:
operations
resetDeviceIdentifierForCloudKitWithCollectionType:
initWithMachServiceName:
copyLastServerIdInFolderWithServerId:database:
setRecordWithIDWasDeletedBlock:
subtype
itemErrorFromError:forID:
safari_numberForKey:
authKitAccountWithAltDSID:
setDatabase:
setRecordWasChangedBlock:
copyItemWithServerId:database:
resetDeviceIdentifier
initWithKey:keyID:
attributesMarkedAsModified:
safari_normalizedVersion
dependencies
openWithAccessType:error:
wb_lockError
setContainer:
generateHashWithComponents:
reset
setRecordIDsToDelete:
copyItemWithLocalID:database:
safari_minimumUsingComparator:
wb_databaseOpenError
subscriptionID
setConfigurationsByRecordZoneID:
generateHashStringWithComponents:
initWithHighlight:type:
setRecordIDs:
copyItemAtURL:toURL:error:
isValidJSONObject:
subarrayWithRange:
arrayWithObjects:count:
setConfiguration:
openDatabase:
initWithFirst:second:
reportErrorWithCode:statement:error:
copyFirstServerIdInFolderWithServerId:database:
setRecordChangedBlock:
strongToStrongObjectsMapTable
arrayWithObject:
isValid
removeUnusedPresenceRecords
copyDeviceIdentifier
setRecord:
initWithFileURL:
stringWithFormat:
arrayWithCapacity:
folderTypeWithFolder:
closeDatabase:shouldSave:
setReadingListIconURL:
removeTombstoneWithRecordName:completionHandler:
copyDeletedBookmarkSyncDataWithChange:
initWithEnvironmentName:namedDelegatePort:queue:
stringFromDate:timeZone:formatOptions:
arrayByAddingObjectsFromArray:
objectsPassingTest:
close
folderTypeForChange:
setClasses:forSelector:argumentIndex:ofReply:
removePresenceForParticipant:inTabGroupWithServerID:
copyChangesWithDatabase:changeToken:
setQualityOfService:
safari_matchesErrorDomainsAndCodes:
clearlAllLocalBookmarksForAutomatedTestingWithDatabase:
isStartPageSettingSyncEnabled
stringForKey:
array
folderType
setChildrenOrder:forFolderWithServerId:database:
objectForKeyedSubscript:
removePreferenceValueWithRecordName:completionHandler:
copyChangedItemWithChange:
setPreviousServerChangeToken:
safari_mapObjectsUsingBlock:
archivedDataWithRootObject:requiringSecureCoding:error:
stringByAppendingString:
fixRecoveredBookmarksIfNeeded
objectForKey:
setPreviewText:
copyChangeTokenWithDatabase:
removeParticipant:
initWithDeviceIdentifier:generation:
isSelectedFavoritesFolder
stringByAppendingPathComponent:
clearReadingListArchiveWithUUID:
safari_mapAndFilterObjectsUsingBlock:
setAuxiliaryRecordIDsToDelete:
objectAtIndexedSubscript:
URLWithString:
firstObject
initWithDelegate:
removeObserver:name:object:
copyAttributesWithItem:
stringAtIndex:
safari_mapAndFilterKeysUsingBlock:
clearModifiedAttributes
setAuxiliaryRecord:forKey:
valueForKey:
numberWithUnsignedInteger:
first
setPresenceInTabWithServerID:tabGroupWithServerID:forParticipant:
removeObjectsInRange:
copyAccountHashWithDatabase:
isReadingListItem
safari_mapAndFilterKeysAndObjectsUsingBlock:
applicationBundleIdentifierOverrideForPushTopicGeneration
storeOwner
fire
numberWithInteger:
setAutomaticallyRetryNetworkFailures:
valueForEntitlement:
removeObjectForKey:
setPositionDictionaryRepresentation:
copy
isReadingListFolder
safari_logDescription
staticSyncablePerSiteSettings
numberWithInt:
clearChangesWithChangeToken:database:
finishMergingChangesWithDatabase:
setAtomic:
value
removeObjectAtIndex:
initWithDatabaseURL:
statement
anyObject
setAddress:
isReadableFileAtPath:
clearChangesForChangeRecords:lastSyncedRecordGeneration:
finishDecoding
uuid
numberWithBool:
setPinned:title:address:
containsObject:
removeObject:
allocWithZone:
fileURLWithPath:isDirectory:
isPreferenceSyncable:
safari_isUnrecoverableCloudKitError
setAccountHash:database:
setPermission:
safari_isTabGroupSecondaryRecordZoneID
allValues
username
initWithDatabase:query:error:
setPerShareParticipantCompletionBlock:
removeItemWithServerId:database:
containerIdentifier
allSyncingAttributesForBookmark:
userRecordID
isPerSiteSettingSyncEnabled
clearAllSyncDataWithDatabase:
setAcceptSharesCompletionBlock:
null
fileExistsAtPath:isDirectory:
initWithDatabase:query:
setPerShareMetadataBlock:
removeItemAtURL:error:
isMainThread
clearAllSyncData
allObjects
standardUserDefaults
fields
userInfo
setPerShareCompletionBlock:
removeAllSyncData
clearAllReadingListArchives
isInternalInstall
allKeys
sortedArrayUsingSelector:
fieldForAttribute:
userIdentity
serverModificationDate
notifyForSaveOfAssetWithKey:item:
setPerRecordZoneDeleteBlock:
removeAllObjects
isInserted
address
sortUsingComparator:
safari_isInCloudKitErrorDomain
fetchUserRecordIDWithCompletionHandler:
clearAllGenerationsExceptState
serverIDsInFolderWithServerID:excludeDeletedBookmarks:
notificationFromRemoteNotificationDictionary:
initWithData:encoding:
setPerRecordSaveBlock:
removeAllCloudKitRecordsWithCompletionHandler:
size
ckShortDescription
remoteObjectProxyWithErrorHandler:
initWithContainerIdentifier:appleAccountInformationProvider:
setPerRecordDeleteBlock:
componentsJoinedByString:
addParticipant:
serverID
nextChangeID
ckBookmarkSyncFinishedWithResult:error:
compare:options:
registeredStateCollectorWithLogLabel:payloadProvider:
setPerRecordCompletionBlock:
sharedLogger
nextChangeAfterLocalRecordGeneration:
addOperation:
isFolder
setParticipantSelfRemovalBehavior:
initWithConfiguration:openDatabase:
isExpired
needsSyncUpdate
sharedInstance
addObserver:selector:name:object:
securityLevelForAccount:
collectionType
setParentRecordID:
deleteBookmark:leaveTombstone:
secondaryZoneNameForBookmark:
sharedCloudDatabase
addObjectsFromArray:
isEqualToString:
setPageZoomSyncData:forRecordName:completionHandler:
shareRecord
isEqualToSet:
addObject:
name
setOwnerDidDeallocateBlock:
shareDidUpdateForTabGroupWithUUID:
isEqualToOrderedSet:
defaultManager
changedRowCount
mutableCopy
saveDatabase:
second
initWithCollectionType:storeOwner:
refresh
setObject:forKeyedSubscript:
share
isEqualToDictionary:
updateSyncDataForBookmarkWithRecordName:excludeDeletedBookmarks:usingBlock:
addItem:underFolderWithServerId:database:
defaultDatabaseURL
scheme
changedKeys
initWithCollectionType:
referenceAction
setObject:forKey:
code
updateSyncDataForBookmark:usingBlock:
isEqualToData:
defaultCenter
safari_isCloudKitNonExistentRecordError
changeTypeForChange:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
recordZoneIDsToHashGenerators
setNotificationInfo:
addEntriesFromDictionary:
updateSelectedFavoritesFolderWithBookmarkID:wasFavoritesFolder:isFavoritesFolder:
decodeObjectOfClasses:forKey:
safari_isCloudKitMissingZoneError
changeType
moveBookmark:toFolderWithID:orderIndex:
scheduledTimerWithTimeInterval:repeats:block:
decodeObjectOfClass:forKey:
addDependency:
scheduleRetryIfNeededForError:usingBlock:
dateWithTimeIntervalSinceReferenceDate:
setXpcActivity:
modifiedSyncingAttributesForBookmark:
JSONObjectWithData:options:error:
isEnabledForDataclass:
changeIsMoveChange:
setName:
setWithObjects:
dateWithTimeIntervalSinceNow:
changeIsDAVMoveChange:
recordIDForTab:
setModifySubscriptionsCompletionBlock:
activeParticipantsDidUpdateInTabWithUUID:
modifiedAttributes
dateByAddingTimeInterval:
setWithObject:
safari_isCloudKitBatchTooLargeError
UTF8String
URLByDeletingLastPathComponent
recordID
setModifyRecordsCompletionBlock:
date
accountsWithAccountType:
setWithArray:
modifiedAttributeMask
cancel
recordChangeTag
setModifyRecordZonesCompletionBlock:
isDeletingRecordZone
setWantsNewInvitationToken:
accountTypeWithAccountTypeIdentifier:
modificationDate
setModifiedAttributes:item:
databaseSyncDataInDatabase:databaseAccessor:
setUserIdentityLookupInfos:
savePerSiteSettingCloudKitRecordToDisk:completionHandler:
minusSet:
setModifiedAttributeMask:
isDeleted
databaseSyncData
minimumSyncAPIVersion
accountProperties
safari_initWithEncodedRecordData:
updateDatabaseSyncDataUsingBlock:
setMinimumSyncAPIVersion:
safari_hasOrContainsErrorWithCloudKitErrorCode:
accountInfoWithCompletionHandler:
minimumAPIVersion
setMinimumAPIVersion:
databasePathForConfiguration:
safari_hasAtLeastOneChangedField
updateAccountHash:
migratorDeviceIdentifier
URLByDeletingPathExtension
propertyListWithData:options:format:error:
isCustomizationSyncEnabled
fetch
unsignedIntegerValue
processIdentifier
acceptanceStatus
setTrackChanges:
safari_folderTypeForRecordName:
isCancelled
unlockSync
boolValue
URLByAppendingPathExtension:
boolForKey:
safari_firstObjectPassingTest:
init
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
setUsesOpportunisticPushTopic:
updatePushTopicSubscriptions
_setUpPushConnection
_pushTopics
.cxx_destruct
_pushConnection
_usesOpportunisticPushTopic
recordZoneSubscriptionID
cloudExtensionsRecordZoneID
T@"NSString",R,C,N
T@"CKRecordZoneID",R,C,N
initWithContainer:
createCloudExtensionsRecordZoneInOperationGroup:completionHandler:
fetchCloudExtensionsZoneSubscriptionInOperationGroup:completionHandler:
saveCloudExtensionsZoneSubscriptionInOperationGroup:completionHandler:
saveCloudExtensionsRecordBatch:createCloudExtensionsZoneIfMissing:inOperationGroup:completionHandler:
deleteCloudExtensionRecords:inOperationGroup:completionHandler:
fetchCloudExtensionsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
_saveCloudExtensionsRecordBatch:inOperationGroup:completionHandler:
_saveCloudExtensionsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
_fetchRecordsOnInternalQueueWithServerChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
_fetchRecordsOnInternalQueueWithRetryManager:serverChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
_addModifyRecordsOperations:inOperationGroup:operationQueue:
_addDependenciesForModifyRecordsOperation:operationQueue:
_scheduleOperation:inOperationGroup:operationQueue:
_createCloudExtensionsRecordZoneInOperationGroup:withRetryManager:completionHandler:
_saveRecordZoneSubscriptionInOperationGroup:operationQueue:completionHandler:
_operationToDeleteCloudExtensionRecordIDs:completionHandler:
_recursivelyCancelDependentOperations:operationQueue:
container
_database
_cloudExtensionsRecordZone
_cloudExtensionsOperationQueue
_internalQueue
_completionHandlerQueue
_container
T@"CKContainer",R,N,V_container
_didDetectPossibleBug:
deleteBackgroundImageDirectory
resetToDAVDatabaseWithCompletionHandler:
clearLocalDataIncludingMigrationState:completionHandler:
generateDAVServerIDsForExistingBookmarksWithCompletionHandler:
migrateToCloudKitWithCompletionHandler:
registerForPushNotificationsIfNeeded
userDidUpdateBookmarkDatabase
userAccountDidChange:
fetchRemoteMigrationStateWithCompletionHandler:
observeRemoteMigrationStateForSecondaryMigration
beginMigrationFromDAV
collectDiagnosticsDataWithCompletionHandler:
saveTabsForCurrentDeviceWithDictionaryRepresentation:deviceUUIDString:completionHandler:
saveCloudTabCloseRequestWithDictionaryRepresentation:closeRequestUUIDString:completionHandler:
deleteDevicesWithUUIDStrings:completionHandler:
deleteCloudTabCloseRequestsWithUUIDStrings:completionHandler:
getCloudTabDevicesWithCompletionHandler:
fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
triggerSafariTabGroupSync
getCloudTabContainerManateeStateWithCompletionHandler:
getCloudSettingsContainerManateeStateWithCompletionHandler:
fetchCloudTabDevicesAndCloseRequests
fetchCloudSettingsChangesImmediately
saveCloudSettingWithDictionaryRepresentation:successCompletionHandler:
saveCloudBackgroundImageWithURL:isLightAppearance:successCompletionHandler:
deleteBackgroundImageFromCloudKitWithCompletionHandler:
scheduleCloudBackgroundImageSaveWithURL:isLightAppearance:successCompletionHandler:
triggerImmediateBackgroundImageSaveIfApplicable
syncDownSafariSettingsSyncWithCompletion:
syncUpSafariSettingsSyncWithCompletion:
syncDownSafariPerSiteSettingsSyncWithCompletion:
syncUpSafariPerSiteSettingsSyncWithCompletion:
saveCloudPerSiteSettingWithDictionaryRepresentation:successCompletionHandler:
deletePerSiteSettingsSyncData
saveExtensionStatesWithDictionaryRepresentation:forDevice:completionHandler:
saveExtensionDeviceWithDictionaryRepresentation:completionHandler:
getCloudExtensionStatesWithCompletionHandler:
deleteCloudExtensionDevicesWithUUIDStrings:completionHandler:
deleteCloudExtensionStatesDatabaseWithCompletionHandler:
fetchTabGroupEntitiesWithCompletion:
scheduleSyncIfNeeded
addSyncObserver:
removeSyncObserver:
userDidAcceptCloudKitShareWithMetadata:
beginSharingTabGroupWithUUID:completionHandler:
acceptShareForURL:invitationTokenData:completionHandler:
movePresenceForParticipantToTabWithUUID:
saveBrowserState:completionHandler:
deleteTabGroup:completionHandler:
insertTabGroup:afterTabGroup:completionHandler:
moveTabGroup:afterTabGroup:completionHandler:
saveTabGroup:completionHandler:
deleteTabs:completionHandler:
insertTabs:inTabGroup:afterTab:completionHandler:
saveTab:completionHandler:
updateTabs:inTabGroup:completionHandler:
closeWindowState:completionHandler:
deleteWindowState:completionHandler:
deleteWindowStates:completionHandler:
saveWindowState:completionHandler:
didReceiveIncomingMessageForSubscriptionID:withPushTopic:userInfo:
didReceiveLocalNotificationWithPushTopic:
localizedStandardCompare:
_hierarchyCheckTimer:
databaseLockArbiterDidAcquireDatabaseLock:
tabSyncArbiter:containerUsingManatee:
cloudTabSyncArbiterDidChangeCloudKitContainer:
cloudTabSyncArbiterPCSIdentitiesDidChange:
listener:shouldAcceptNewConnection:
hasEntitlementForSensitiveOperationInCloudTabGroupSyncManager:
cloudTabGroupSyncManagerPCSIdentitiesDidChange:
userDidUpdateCloudTabGroupSyncManagerDatabase:
cloudTabGroupSyncManager:didFindChangesToRecordZonesWithIDs:
cloudSettingSyncCoordinator:didReceiveRemoteCloudSettingsUpdateWithRecord:
cloudSettingSyncCoordinator:storeRemoteCloudSettingsUpdateWithRecord:
cloudSettingSyncCoordinator:didDeleteRemoteRecordWithID:
performInitialSyncDown
pcsIdentitiesDidChangeForCloudSettingSyncCoordinator:
cloudSettingSyncCoordinator:setPageZoomSyncData:forRecordName:completionHandler:
forwardingTargetForSelector:
didReceivePushNotificationWithTopic:userInfo:
isSyncEnabled
resumeXPCListener
_updatedContainerForPushTopic:
_topic:matchesPushTopicForContainer:
_needsDatabaseFetchOperationForContainer:
_syncManagerWithStoreOwner:
_userAccountDidChange:
_updateCloudBookmarksSyncCoordinatorAfterUserAccountChange:
_userDidUpdateBookmarkDatabase
_performBookmarkSyncForTrigger:inOperationGroup:completionHandler:
_sendNotificationForSyncResult:
_fetchRemoteMigrationStateWithXPCActivity:qualityOfService:completionHandler:
_beginMigrationFromDAVInOperationGroup:
_beginMigrationFromDAVInOperationGroupInternal:
_fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
_modifyExistingPerSiteCloudKitRecordWithData:dictionaryRepresentation:
_createNewPerSiteCloudKitRecordWithDictionaryRepresentation:precomputedRecordName:
_deviceClass
_getPerSiteSettingRecordNameWithDictionaryRepresentation:completionHandler:
_archivedDataForPerSiteSettingDictionaryInDictionary:
_perSitePreferencesStore
_saveCloudPerSiteSettingsWithMacZoomPreferences:successCompletionHandler:
_saveCloudSettingsBatchWithDictionaryRepresentation:successCompletionHandler:
_hasEntitlementForSensitiveOperation
_setUpSyncAgentInterfaceOnConnection:
_didReceiveIncomingMessageWithNotification:pushTopic:subscriptionID:
_pushTopicForContainer:
_attemptSyncForChangedZonesSharingContainer:
_fetchUpdatedZonesInPushNotificationForContainer:
_fetchUpdatedZonesInPushNotificationForContainer:retryManager:
_cancelPushNotificationSyncDelayTimer
_saveBookmarksZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveCloudTabsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_attemptSyncAndFallBackToMigrationIfPossibleForTrigger:
_attemptCloudTabsSyncForPushNotification
_updateCloudTabsSyncCoordinatorAfterUserAccountChange:
_scheduleInitialManateeCloudTabFetchRetryXPCActivityRegisteringIfNeeded:
_saveCloudSettingsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_updateCloudSettingsSyncCoordinatorAfterUserAccountChange:
_attemptCloudSettingsSyncForTrigger:
_performSettingsSyncForTrigger:inOperationGroup:completionHandler:
_cancelBackgroundImageSaveDelayTimer
_attemptCloudExtensionsSyncForPushNotification
_saveCloudExtensionsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_updateCloudExtensionsSyncCoordinatorAfterUserAccountChange:
_deleteLegacySectionIdentifiers
_migrateFromDAVInOperationGroup:completionHandler:
_checkInXPCActivityWithIdentifier:criteria:registerIfNeeded:performBlock:
_retryIntervalToRegisterCloudKitSubscriptionsWithNumberOfFailedAttempts:lastCKError:
_didRegisterCloudKitSubscriptions:timer:lastError:completionHandler:
_registerCloudKitSubscriptionsXPCActivityRegisteringIfNeeded:ignoreOnGoingRegistration:resetSubscriptions:qualityOfService:delay:
_registerRemainingCloudKitSubscriptions:withLastSuccessfulSubscriptions:inOperationGroup:withCompletionHandler:
_registerPeriodicRemoteMigrationStateObserverXPCActivityRegisteringIfNeeded:
registerMigrationXPCActivity:
_saveTabGroupsPrivateDatabaseSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_saveTabGroupsSharedDatabaseSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_updateTabGroupsSyncCoordinatorAfterUserAccountChange:
_attemptTabGroupsSyncForManager:withTrigger:
_runTabGroupsSyncForManager:withTrigger:completionHandler:
_performTabGroupSyncForManager:withTrigger:completionHandler:
_cyclerAssistant
_sendDetectedBugNotificationIfNeeded
_scheduleHierarchyCheckTimer
_invalidateHierarchyCheckTimer
_performHiearchyCheck
_hierarchyCheckerDidFail
_accountStore
_databaseAccessor
_bookmarkStore
_xpcListener
_delayBeforeSyncingAfterPushNotificationTimer
_dateToForceSyncAfterPushNotification
_transactionForTimerToDelaySyncing
_stateCollector
_isSyncing
_isMigrating
_periodicallyObservingRemoteMigrationState
_didCheckAgentVersionOnDatabaseLock
_cloudBookmarksStoreContainer
_databaseLockArbiter
_syncMigrationCoordinator
_migrationCoordinator
_bookmarkSyncCoordinator
_activityCheckInQueue
_cloudKitSubscriptionRegistrationTimer
_lastSuccessfulCloudKitSubscriptions
_remainingCloudKitSubscriptionsToRegister
_numberOfFailedCloudKitSubscriptionRegistrationAttempts
_cloudKitSubscriptionRegistrationIsInProgress
_ignoreOngoingCloudKitSubscriptionRegistrationResult
_detectedBugIDs
_safariUserDefaults
_hierarchyCheckTimer
_operationQueue
_isCheckingContainerDatabaseChanges
_cloudTabsContainer
_tabSyncArbiter
_customizationSyncQueue
_cloudSettingsContainer
_settingsStore
_settingsSyncCoordinator
_settingsSyncEngine
_isCustomizationSyncing
_fetchedSettingsDictionary
_delayBeforeSavingBackgroundImageTimer
_perSiteSettingsDeviceIdentifier
_fetchedPerSiteSettings
_extensionStore
_extensionsSyncCoordinator
_tabGroupSyncManager
_tabCollection
TB,R,N
getAppleAccountSecurityStateWithCompletion:
_appleAccountSecurityState
_primaryAppleAccountSecurityLevel
initWithCollection:
serverIDsInFolderWithServerID:
itemWithServerIDIsFolder:
collection
_collection
T@"WebBookmarkCollection",R,N,V_collection
dealloc
positionForItemWithRecordName:inDatabase:databaseAccessor:
cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:
updateSyncDataGenerationsWithChange:databaseAccessor:updater:
cloudBookmarkWithChange:databaseAccessor:updater:
cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:
applyPendingReferences:toItemWithRecordName:inDatabase:databaseAccessor:updater:
_decodedSyncDataInData:
_initWithItem:configuration:databaseAccessor:
_initWithReparentedItem:configuration:databaseAccessor:updater:
_initWithChange:databaseAccessor:updater:
_initWithConfiguration:deleteChange:databaseAccessor:updater:
_initWithItem:configuration:syncData:databaseAccessor:
_initWithAddedRecord:configuration:forItem:databaseAccessor:updater:
_initWithItemToMigrate:configuration:databaseAccessor:updater:
_updateRecordWithChange:updater:
_createRecordIDWithName:updater:
_createRecordWithRecordName:updater:
_createParentFolderReferenceWithRecordName:updater:
record
position
setPosition:
state
setState:
duplicateHash
isDuplicateOfBookmark:
modifiedOrLocalValueForKey:
_transformedModifiedOrLocalValueForKey:isEncrypted:
_modifiedOrLocalParentReferenceWithUpdater:
_modifiedOrLocalIdentityHashWithUpdater:
_generateIdentityHashUsingUpdater:
updateLocalItem
saveAssetsIfNeededWithUpdater:
_loadAttributesForKnownKeysIntoEmptyItemUsingRemoteRecord:updater:
_updateGenerationsForChange:withDeviceIdentifier:
_updateGenerationsForAttributeKeys:withDeviceIdentifier:
_updateRecordParentAndPositionWithUpdater:
_updateRecordWithModifiedAttributes:updater:
_updateRecordWithMissingAttributesWithUpdater:
_canApplyValue:withGeneration:toAttribute:updater:
_applyPendingReferences:
resultFromMergingRecord:usingUpdater:
resultFromMergingRecord:usingUpdater:isLocalUpdateOnly:
_resultByMergingParentAndPositionWithRecord:usingUpdater:
_resultByMergingMinimumAPIVersionWithRecord:
_resultByMergingStateWithRecord:shouldContinueMerge:
configuration
item
databaseAccessor
recordName
parentRecordName
_syncData
_remotelyModifiedAttributes
_remotelyModifiedAssetAttributes
_configuration
_item
_recordName
_parentRecordName
T@"CloudBookmarkItemConfiguration",R,N,V_configuration
T@"CKRecord",R,N
Tr^v,R,N,V_item
T@"<WBSBookmarkDBAccess>",R,N,V_databaseAccessor
T@"NSString",R,C,N,V_recordName
T@"NSString",R,C,N,V_parentRecordName
T@"WBSCRDTPosition",C,N
Tq,N
TQ,R,N
safari_primaryAppleAccount
initWithChange:updatedRecords:
initWithChange:updatedRecords:deletedRecordIDs:
initWithChange:deletedRecordZoneIDs:
initWithChange:deletedRecordZoneIDs:deletedRecordIDs:
initWithChange:deletedRecordZoneIDs:updatedRecords:deletedRecordIDs:
isEmpty
change
deletedRecordZoneIDs
updatedRecords
deletedRecordIDs
_change
_deletedRecordZoneIDs
_updatedRecords
_deletedRecordIDs
T@"WBChangeRecord",R,N,V_change
T@"NSSet",R,C,N,V_deletedRecordZoneIDs
T@"NSSet",R,C,N,V_updatedRecords
T@"NSSet",R,C,N,V_deletedRecordIDs
_createOperationGroupWithName:
cloudExtensionSQLiteStoreStore:hadSevereError:
initWithAccountStore:cloudExtensionStore:cloudExtensionSQLiteStore:
userAccountChanged
deleteDatabaseWithCompletionHandler:
_saveCloudExtensionDevice:shouldUpdateExtensionStatesWhenSavingDevice:completionHandler:
_suspendSavingQueue
_resumeSavingQueue
_continueSavingExtensionStates
_mergeDeviceIntoDeviceFromSQLiteStoreIfNecessary
_saveDeviceToCloudKit
_saveNextRecordBatchCreatingCloudExtensionsZoneIfMissing:
_deleteObsoleteExtensionStateRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingExtensionState
_finishedSavingExtensionStates
_changedRecordsForCloudExtensionDevice:
_recordIDsFromRecordNames:
_nextRecordBatchToSave
_handleSevereSQLiteErrorWhileMergingExistingDevice:
_suspendFetchingQueue
_resumeFetchingQueue
_updateSQLiteStoreFromCloudKitInOperationGroup:withCompletionHandler:
_beginFetchingExtensionStates
_continueFetchingExtensionStates
_deleteDatabaseAndRestartFetch
_getServerChangeTokenFromSQLiteStore
_fetchChangesFromCloudKitCreatingCloudExtensionsZoneIfMissing:
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudExtensionsZoneCompletedWithError:
_removeDeletedRecordsFromSQLiteStore
_saveModifiedRecordsToSQLiteStore
_setServerChangeTokenInSQLiteStore
_loadDevicesAndStatesFromSQLiteStore
_finishedFetching
_didFetchModifiedRecord:
_handleSevereSQLiteErrorWhileFetching:
_continueDeleting
_deleteRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterDeletingRecords
_finishedDeletingRecords
_isDataclassEnabled
_isDeletingDatabase
_shouldContinueSyncOperation
_canCloseCloudExtensionStoreDatabase
_shouldDeleteDatabaseForError:
_cloudExtensionStatesDictionaryFromCloudExtensionDevices:
_cloudExtensionDevicesDictionaryFromCloudExtensionDevices:
accountStore
_cloudExtensionStoreError
set_cloudExtensionStoreError:
_cloudExtensionStore
_cloudExtensionLocalStore
_deletingDatabaseCount
_dataclassEnabled
_needsDataclassEnabledCheck
_savingQueue
_savingQueueSuspended
_saveExtensionStateOperationGroup
_saveState
_saveExtensionStatesCompletion
_deviceToSave
_shouldUpdateExtensionStatesWhenSavingDevice
_recordsToSave
_unsavedRecordFromLastBatch
_recordNamesOfStatesToDelete
_saveExtensionStatesError
_deleteDevicesOperationGroup
_deleteState
_deleteCompletion
_recordIDsToDelete
_deleteExtensionDevicesError
_fetchingQueue
_fetchingQueueSuspended
_fetchExtensionStatesOperationGroup
_currentFetchOperationGroup
_fetchState
_fetchError
_isRefetchingAfterDeletingDatabase
_fetchOperationType
_fetchExtensionStatesCompletion
_updateSQLiteStoreFromCloudKitCompletion
_serverChangeToken
_modifiedDevices
_modifiedStates
_namesOfDeletedRecords
_fetchedDevices
__cloudExtensionStoreError
T@"NSError",&,V__cloudExtensionStoreError
T@"ACAccountStore",R,N,V_accountStore
initWithDatabaseAccessor:
performHierarchyCheck
_serverSyncIDTypeForServerSyncID:
_verifyHierarchyIntegrityInDatabase:
_verifySyncDataForItem:recordName:expectingSyncData:expectingCloudKitData:
_accountIdentityDidChange:
_accountPropertiesDidChange:
initWithAccountStore:databaseCoordinator:
initWithAccountStore:
account
isDataclassEnabled
isDatabaseOpen
accountHash
setAccountHash:
updateAccountHashIfNeeded
setNeedsDataclassEnabledCheck
_setNeedsAccountHashCheck
databaseCoordinator
_needsAccountHashCheck
_databaseCoordinator
T@"ACAccount",R,N
T@"<CloudBookmarkDatabaseCoordinating>",R,N,V_databaseCoordinator
dataclassEnabled
TB,R,N,GisDataclassEnabled
initWithCloudBookmarkStore:
setPresenceToTabWithRecordID:inOperationGroup:completionHandler:
_cacheUserRecordIDIfNeededInOperationGroup:withCompletionHandler:
_acquireLockToSetPresenceInTabWithRecordID:inOperationGroup:isRetry:completionHandler:
_acquireLockUsingPrivatePresenceRecord:toSetPresenceInTabWithRecordID:previousPrivatePresenceRecord:inOperationGroup:isRetry:completionHandler:
_replaceSharedPresenceRecordWithTabRecordID:currentPrivatePresenceRecord:previousPrivatePresenceRecord:inOperationGroup:isRetry:completionHandler:
_createSharedPresenceRecordWithTabRecordID:currentPrivatePresenceRecord:inOperationGroup:isRetry:completionHandler:
_releaseLockForPrivatePresenceRecord:inOperationGroup:completionHandler:
_setUpRetryTimerToSetPresenceInTabWithRecordID:inOperationGroup:completionHandler:
_clearRetryHandlerIsCancelling:
_sharedPresenceRecordDatabaseForTabRecordZone:
_sharedPresenceRecordNameForUserRecordID:
store
_processUpdateQueue
_retryTimer
_currentRetryCompletionHandler
_nextEarliestScheduleTime
_throttledScheduledUpdateTimer
_lastScheduledUpdateBlock
_lastScheduledUpdateLock
_cachedPrivatePresenceRecord
_cachedUserRecordID
_cachedSharedPresenceRecordName
_store
T@"CloudBookmarkStore",R,N,V_store
defaultTransformer
jsonArrayTransformer
jsonDictionaryTransformer
transformedValueClass
allowsReverseTransformation
initWithRootJSONObjectType:
transformedValue:
reverseTransformedValue:
rootJSONObjectType
_rootJSONObjectType
T#,R,N,V_rootJSONObjectType
generateIdentityHashWithComponents:
positionForCloudBookmarkWithRecordName:
shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
saveAssetAtURL:toURL:completionHandler:
deviceIdentifier
bookmarksRecordZoneID
itemConfigurations
T@"NSString",R,N
T@"CKRecordZoneID",R,N
T@"NSArray",R,C,N
initWithBookmarkStore:database:databaseAccessor:accountPropertiesStore:
bookmarkStore
databaseRef
accountPropertiesStore
_databaseRef
_accountPropertiesStore
T@"CloudBookmarkStore",R,N,V_bookmarkStore
Tr^v,R,N,V_databaseRef
T@"CloudBookmarkAccountPropertiesStore",R,N,V_accountPropertiesStore
initWithCKRecordZoneID:
initWithCKRecordZoneID:action:
transformerForRecord:
recordZoneID
action
_recordZoneID
_action
T@"CKRecordZoneID",R,N,V_recordZoneID
TQ,R,N,V_action
attributeRequiresEncryption
initWithObjectClass:
initWithObjectClasses:
objectClasses
_objectClasses
T@"NSSet",R,N,V_objectClasses
initWithEncryptionInfoRecord:
verifyIdentityHashInBookmarkRecord:configuration:
encryptionInfoRecordWithZone:
cloudSettingsRecordZoneID
hashGenerator
generateEncryptedHashStringWithComponents:completionHandler:
createOperationGroupWithName:useLargerExpectedSendSize:
fetchCloudSettingsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleInOperationGroup:completion:
saveCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
_saveRecordZoneSubscriptionForZoneID:subscriptionID:inOperationGroup:operationQueue:completionHandler:
saveCloudSettingsRecords:createCloudSettingsZoneIfMissing:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:retryManager:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
deleteCloudSettingsRecords:inOperationGroup:completionHandler:
clearCachedCloudSettingsRecordZone
deleteCloudSettingsZoneInOperationGroup:completion:
createCloudSettingsRecordZoneInOperationGroup:completionHandler:
fetchCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
_createCloudSettingsRecordZoneInOperationGroup:withRetryManager:completionHandler:
_saveOrLoadRecord:inOperationGroup:withCompletionHandler:
_setUpEncryptionInfoInOperationGroup:withCompletionHandler:
_setUpEncryptionInfoInOperationGroup:withRetryManager:completionHandler:
_cloudSettingsRecordZone
_cloudSettingsOperationQueue
_threadUnsafeHashGenerator
T@"WBSHashGenerator",R,N
compare:
initWithDatabase:databaseAccessor:
hasUnverifiedMovedBookmarks
hasUndeletedRemovedBookmarks
numberOfMovedBookmarks
numberOfDeletedBookmarks
addMovedBookmark:
didLocallyMoveBookmarkWithRecordName:
isDeletedRecordName:
didDeleteBookmarkWithRecordName:
_insertBookmark:intoFolderWithRecordName:
_insertBookmarkWithRecordName:intoExistingFolderWithRecordName:
_createBuiltInFolderWithRecordNameIfNeeded:
_deleteTemporaryParentFolder
_reparentBuiltInFolderIfNeeded
_bookmarksByVerifyingAndReparentingUnrootedBookmarksRememberOriginalParents:getLastValidPositionInRootFolder:
bookmarksByVerifyingAndReparentingUnrootedBookmarksGetLastValidPositionInRootFolder:
verifyAndReparentUnrootedBookmarksRememberingOriginalParents
_recordNameOfAncestorToReparentForRecordName:verifiedRecordNames:
_recordNameOfAncestorToReparentInLoop:
_localDatabaseContainsItemWithRecordName:getParentRecordName:
moveBookmarksIntoPlace
_sortedRecordNamesWithChildIDs:getLastPosition:
_reorderChildrenOfTopBookmarkFolderGetLastPosition:
_lastValidPositionInRootFolder
_reorderChildrenOfFolderWithServerSyncId:
_positionOfBookmarkWithRecordNameForFolderSorting:
removeLocalItemsForDeletedRecordNames
_childRecordNamesToParentRecordNames
_movedBookmarkRecordNames
_deletedBookmarkRecordNames
_parentRecordNamesWithMovedChildren
_misplacedBuiltInFolderRecordNames
_hasTemporaryParentFolder
_topBookmarkFolderRequiresReordering
cloudSettingsSyncEngineAccessor
isEmptyValue:
transformedValueOrNull:
reverseTransformedValueOrNull:
safari_isCloudExtensionDeviceRecord
safari_isCloudExtensionStateRecord
safari_cloudExtensionDeviceRecord
TB,R,N,Gsafari_isCloudExtensionDeviceRecord
safari_cloudExtensionStateRecord
TB,R,N,Gsafari_isCloudExtensionStateRecord
safari_isInCloudBookmarksErrorDomain
safari_isCloudKitPartialFailureError
safari_isCloudKitWriteConflictError
safari_isMigrationStateRecordChangedError
safari_isCouldNotOpenDatabaseError
safari_isUserDeletedZoneError
safari_isAtomicWriteError
safari_isCloudKitExpiredChangeTokenError
safari_cloudKitPartialErrorForItemID:
safari_onlyCloudKitPartialError
safari_isCloudKitErrorWithCode:
safari_isCloudKitInternalErrorWithCode:
_safari_isOrContainsCloudKitErrorOfCodes:checkInternalErrorCode:
safari_errorWithCloudBookmarksCode:userInfo:
safari_errorFromErrors:
safari_recordName
safari_isSyncRequirementsRecord
safari_minimumSyncAPIVersion
safari_setMinimumSyncAPIVersion:
safari_isEncryptionInfoRecord
safari_isMigrationStateRecord
safari_migrationState
safari_setMigrationState:
safari_migratorDeviceIdentifier
safari_setMigratorDeviceIdentifier:
safari_state
safari_setState:
safari_minimumAPIVersion
safari_setMinimumAPIVersion:
safari_positionDictionaryRepresentationWithConfiguration:
safari_setPositionDictionaryRepresentation:withConfiguration:
safari_defaultPositionWithConfiguration:
safari_setDefaultPosition:withConfiguration:
safari_generationForKey:
safari_setGeneration:forKey:
_safari_generationKeyForKey:
_safari_deviceIdentifierKeyForKey:
safari_isMetadataDevice
safari_deviceOSKind
safari_deviceOSVersion
safari_deviceOSBuild
safari_deviceOSVersionNumber
safari_deviceSoftwareBundleID
safari_deviceSoftwareVersion
safari_recordNameForFolderType:
safari_syncRequirementsRecord
TB,R,N,Gsafari_isSyncRequirementsRecord
TQ,N,Ssafari_setMinimumSyncAPIVersion:
safari_encryptionInfoRecord
TB,R,N,Gsafari_isEncryptionInfoRecord
safari_migrationStateRecord
TB,R,N,Gsafari_isMigrationStateRecord
Tq,N,Ssafari_setMigrationState:
T@"NSString",&,N,Ssafari_setMigratorDeviceIdentifier:
Tq,N,Ssafari_setState:
TQ,N,Ssafari_setMinimumAPIVersion:
Tq,R,N
bookmarkListRecords
bookmarkLeafRecords
allRecordIDs
addRecord:
addDeletedRecordID:
serverChangeToken
setServerChangeToken:
clientChangeTokenData
setClientChangeTokenData:
setItemConfigurations:
topBookmarkRecord
migrationRecord
encryptionRecord
_mutableBookmarkListRecords
_mutableBookmarkLeafRecords
_mutableDeletedBookmarkRecords
_clientChangeTokenData
_itemConfigurations
_topBookmarkRecord
_migrationRecord
_encryptionRecord
T@"CKServerChangeToken",&,N,V_serverChangeToken
T@"NSData",C,N,V_clientChangeTokenData
T@"NSArray",C,N,V_itemConfigurations
T@"CKRecord",R,N,V_topBookmarkRecord
T@"CKRecord",R,N,V_migrationRecord
T@"CKRecord",R,N,V_encryptionRecord
initWithConfiguration:
registerActivity
delegate
setDelegate:
_delegate
T@"WBCollectionConfiguration",R,N,V_configuration
T@"<CloudTabGroupMaintenanceActivityDelegate>",W,N,V_delegate
initWithBookmarkStore:databaseAccessor:syncMigrationCoordinator:
migrationState
setMigrationState:
startCoordinatingMigrationInOperationGroup:completionHandler:
resetToNonMigratedStateInOperationGroup:completionHandler:
invalidateCachedDataclassEnabledness
_hasValidDeviceIdentifier
_determineCourseOfActionFromLocalStateInOperationGroup:externalCompletionHandler:
_attemptLocalMigrationBeforeTryingToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_tryToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_tryToBecomeResponsibleForMigrationWithRetryManager:inOperationGroup:externalCompletionHandler:
_becameResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_handleFailureToBecomeResponsibleForMigrationDueToConflictInOperationGroup:externalCompletionHandler:
_tryToResumePendingRemoteMigrationFromMigrationInfo:inOperationGroup:externalCompletionHandler:
_handlePreemptionInOperationGroup:externalCompletionHandler:
_resetToIdleAfterMigrationFailureInOperationGroup:externalCompletionHandler:
_delayBetweenRetryAttempts
_maximumNumberOfRetryAttempts
_scheduleMigrationRetryIfNeededInOperationGroup:externalCompletionHandler:
_performMigrationAsPrimaryDevice:inOperationGroup:externalCompletionHandler:
_transitionToMigrationState:
_numberOfRetryAttempts
_cachedRemoteStateForAnalytics
initWithDatabaseAccessor:database:
collectAllRecordNames
didReceiveRecordWithNameFromServer:
namesOfLocalRecordsToDelete
_namesOfLocalRecordsToDelete
T@"NSSet",R,C,N
safari_arrayByGroupingIntoArraysWithMaxCount:
cloudTabCloseRequestWithWBSCloudTabCloseRequestDictionaryRepresentation:closeRequestUUIDString:cloudTabsRecordZoneID:
cloudTabCloseRequestWithCKRecord:
cloudTabCloseRequestWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
_valueTransformerForTabURL
copyWithZone:
_initWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
_initWithCKRecord:
requestUUIDString
tabUUIDString
destinationDevice
destinationDeviceUUIDString
tabURLString
wbsCloudTabCloseRequestDictionaryRepresentation
_record
T@"CKReference",R,N
T@"CKRecord",R,N,V_record
T@"NSDictionary",R,C,N
bookmarkDatabaseAccessor
tabGroupDatabaseAccessorWithStoreOwner:
cloudBookmarkConfigurations
bookmarkConfiguration
readingListItemConfiguration
bookmarkFolderConfigurationWithType:
cloudTabGroupConfigurations
tabGroupConfiguration
tabGroupTabConfiguration
tabGroupBookmarkFolderConfiguration
tabGroupBookmarkConfiguration
T@"CloudBookmarkItemConfiguration",R,N
initWithItemType:itemSubtype:recordType:knownKeys:identityHashKeys:customAttributeGenerationKeys:attributeValueTransformers:identityHashValueTransformers:forRecordsPassingTest:
_defaultTransformer
valueTransformerForAttributeKey:
valueTransformerForAttributeKey:record:
generationKeyForKey:
isIdentityHashKey:
canSaveIdentityHashAttributesInDictionary:
valueTransformerForIdentityHashKey:
canParseRecordType:
canParseRecord:
canParseItem:usingDatabaseAccessor:
canParseChange:usingDatabaseAccessor:
canParseBookmark:
identityHashComponentsForRecord:
itemType
itemSubtype
recordType
knownKeys
identityHashKeys
recordTestBlock
_attributeKeysToGenerationKeys
_attributeKeysToTransformers
_identityHashKeysToTransformers
_itemType
_itemSubtype
_recordType
_knownKeys
_identityHashKeys
_recordTestBlock
Tq,R,N,V_itemType
Tq,R,N,V_itemSubtype
T@"NSString",R,C,N,V_recordType
T@"NSSet",R,C,N,V_knownKeys
T@"NSOrderedSet",R,C,N,V_identityHashKeys
T@?,R,C,N,V_recordTestBlock
_pcsIdentitiesDidChangeNotification:
initWithSettingStore:accountStore:
_updateAccountHashIfNeeded
setNeedsAccountHashCheck
beginInitialSyncUpWithCompletionHandler:
beginSyncingWithCompletionHandler:
_beginSyncingInOperationGroup:completionHandlers:
_continueSyncingAfterSyncingDown:inOperationGroup:
_performSyncDown
_readServerChangeTokenFromUserDefaults
_saveServerChangeToken:
_continueFetchingSettingsWithCompletionHandler:
_handleExpiredChangeTokenError:completionHandler:
_didFailToSyncWithError:inOperationGroup:
_cleanUpAndCallCompletionHandlersWithError:inOperationGroup:
saveImageRecord:successCompletionHandler:
saveRecords:successCompletionHandler:
savePerSiteRecords:completionHandler:
_savePerSiteCloudKitRecordsToDisk:
_clearPerSiteSettingsSyncData
deleteRecords:completionHandler:
_clearCachedCloudSettingsRecordZoneIfNecessaryForError:
clearServerChangeToken
settingStore
_syncingCompletionHandlers
_isSynchronizing
_didReceiveSyncRequestWhileSyncing
_isPerformingInitialSyncUp
_shouldPerformInitialSyncDown
_isWaitingForPCSIdentityUpdate
_saveSettingsOperationGroup
_fetchSettingsOperationGroup
_deleteSettingsOperationGroup
_saveBackgroundImageOperationGroup
_settingStore
T@"CloudSettingStore",R,N,V_settingStore
T@"<CloudSettingSyncCoordinatorDelegate>",W,N,V_delegate
localStorage
includesMigrationRecordInSaveBatch
setIncludesMigrationRecordInSaveBatch:
initWithType:container:localStorage:
handlesRecordChangesToRecordZoneWithID:
isSecondaryRecordZoneID:
secondaryRecordZoneIDWithRootRecordName:
rootRecordNameForSecondaryRecordZoneID:
createMigrationStateCheckOperationGroupWithXPCActivity:qualityOfService:
createMigrationFromDAVOperationGroupWithXPCActivity:
createSubscriptionRequestOperationGroupWithQualityOfService:xpcActivity:
fetchUserIdentityInOperationGroup:withCompletionHandler:
_fetchUserIdentityInOperationGroup:withCompletionHandler:
clearCachedRecordZone
cloudBookmarkItemConfigurationForRecord:
operationConfiguration
setUpBookmarksRecordZoneInOperationGroup:withCompletionHandler:
setUpBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
createRecordZoneAndEncryptionInfoWithZoneName:inOperationGroup:completionHandler:
_createEncryptionRecordForRecordZoneWithID:inOperationGroup:completionHandler:
deleteRecordZonesWithIDs:inOperationGroup:perRecordZoneDeleteBlock:completionHandler:
fetchEncryptionRecordsForZonesWithIDs:inDatabase:operationGroup:completionHandler:
fetchChangesSinceServerChangeToken:inDatabase:operationGroup:completionHandler:
fetchRecordZoneChangesInZonesWithIDs:perZoneConfigurations:inDatabase:operationGroup:recordWasChangedBlock:recordWithIDWasDeletedBlock:recordZoneFetchCompletionBlock:completionHandler:
modifyRecords:inDatabase:operationGroup:mergeHandler:completionHandler:
modifyRecords:andDeleteRecordIDs:inDatabase:operationGroup:mergeHandler:completionHandler:
_modifyRecords:andDeleteRecordIDs:inDatabase:operationGroup:previouslySavedRecords:previouslyDeletedRecords:mergeHandler:completionHandler:
setUpSharingForRecordZoneWithID:inOperationGroup:completionHandler:
fetchShareRecordForRecordZoneWithID:inDatabase:operationGroup:completionHandler:
fetchShareMetadataWithURL:invitationTokenData:inOperationGroup:completionHandler:
addParticipantsWithEmailAddresses:toShareInRecordZoneWithID:inOperationGroup:completionHandler:
removeParticipantsWithEmailAddresses:fromShareInRecordZoneWithID:inOperationGroup:completionHandler:
acceptCloudKitShareWithMetadata:inOperationGroup:completionHandler:
fetchSubscriptionWithID:inDatabase:operationGroup:withCompletionHandler:
saveSubscription:inDatabase:operationGroup:withCompletionHandler:
deleteSubscriptionWithID:inDatabase:operationGroup:withCompletionHandler:
fetchBookmarksZoneSubscriptionStatusCreatingZoneIfNeeded:inOperationGroup:withCompletionHandler:
saveBookmarksZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchBookmarksRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleWithCompletionHandler:
saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
deleteBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:completionHandler:
deleteBookmarksZoneInOperationGroup:completionHandler:
_prepareBookmarksRecordZoneInOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneOnInternalQueueAfterExternalCompletionHandlersHaveBeenStashedInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
fetchRecordWithID:inDatabase:operationGroup:completionHandler:
saveOrLoadRecord:inDatabase:operationGroup:completionHandler:
deleteRecordWithID:inDatabase:operationGroup:completionHandler:
deleteRecordsWithIDs:inDatabase:operationGroup:completionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:mergeHandler:completionHandler:
fetchBookmarkRecordsWithNames:withCompletionHandler:
bookmarkHashGenerator
fetchEncryptionInfoWithCompletionHandler:
fetchMetadataZoneRecordsWithRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchMetadataZoneRecordsInOperationGroup:withRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchCachedRemoteMigrationInfoWithCompletionHandler:
fetchRemoteMigrationInfoInOperationGroup:withCompletionHandler:
_fetchRemoteMigrationInfoInOperationGroup:completionHandler:
setRemoteMigrationState:deviceIdentifier:inOperationGroup:completionHandler:
fetchMinimumSyncAPIVersionInOperationGroup:withCompletionHandler:
setMinimumSyncAPIVersion:completionHandler:
_canHandleCKRecordZoneWithID:
_setUpRecordZoneInOperationGroup:withCompletionHandler:
_checkMigrationStateOnInternalQueueInRecord:error:
fetchAllBookmarkRecordsWithCompletionHandler:
_zoneID
_zoneLogName
type
secondaryRecordZoneNamePrefix
cloudBookmarkItemConfigurations
_log
_threadUnsafeBookmarksRecordZone
_bookmarksOperationQueue
_threadUnsafePrepareRecordZoneCompletionHandlers
_threadUnsafeBookmarkHashGenerator
_threadUnsafeSyncRequirementsRecord
_threadUnsafeMigrationStateRecord
_threadUnsafeCurrentUserRecordID
_bookmarksRecordZoneID
_syncRequirementsRecordID
_bookmarkEncryptionInfoRecordID
_migrationStateRecordID
_shareType
_threadUnsafeIncludesMigrationRecordInSaveBatch
_threadUnsafeLocalStorage
_type
_recordZoneSubscriptionID
_secondaryRecordZoneNamePrefix
_cloudBookmarkItemConfigurations
Tq,R,N,V_type
T@"NSString",R,C,N,V_recordZoneSubscriptionID
T@"NSString",R,C,N,V_secondaryRecordZoneNamePrefix
TB,N,V_threadUnsafeIncludesMigrationRecordInSaveBatch
T@"<CloudBookmarkStoreLocalStorage>",R,N,V_threadUnsafeLocalStorage
T@"CKRecordZoneID",R,N,V_bookmarksRecordZoneID
T@"NSArray",R,C,N,V_cloudBookmarkItemConfigurations
migrationStateEncodedRecordData
setMigrationStateEncodedRecordData:
T@"NSData",C,N
initWithUserDefaults:type:
migrationStateKey
_defaults
cloudExtensionStateWithDictionaryRepresentation:composedIdentifier:owningDeviceUUIDString:cloudExtensionsRecordZoneID:
cloudExtensionStateWithCKRecord:
cloudExtensionStateWithComposedIdentifier:owningDeviceUUIDString:lastModifiedDate:containingAppAdamID:displayName:isEnabled:wasEnabledByUserGesture:iosAppBundleIdentifier:iosExtensionBundleIdentifier:macAppBundleIdentifier:macExtensionBundleIdentifier:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
cloudExtensionStatesFromStatesDictionaryRepresentation:owningDeviceUUIDString:cloudExtensionsRecordZoneID:
_valueTransformerForComposedIdentifierDisplayNameAndAdamID
_initWithComposedIdentifier:owningDeviceUUIDString:lastModifiedDate:containingAppAdamID:displayName:isEnabled:wasEnabledByUserGesture:iosAppBundleIdentifier:iosExtensionBundleIdentifier:macAppBundleIdentifier:macExtensionBundleIdentifier:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
updateFromCloudExtensionState:
composedIdentifier
owningDeviceUUIDString
owningDevice
lastModifiedDate
containingAppAdamID
displayName
isEnabled
wasEnabledByUserGesture
iosAppBundleIdentifier
iosExtensionBundleIdentifier
macAppBundleIdentifier
macExtensionBundleIdentifier
dictionaryRepresentation
T@"NSDate",R,N
enabled
TB,R,N,GisEnabled
enabledByUserGesture
TB,R,N,GwasEnabledByUserGesture
initWithAccountStore:collection:
deviceIdentifierForPositionGenerator:
nextChangeIDForPositionInPositionGenerator:
positionGenerator:positionForRecordName:
positionGenerator:recordNameOfBookmarksBeforeRecordWithName:
positionGenerator:recordNameOfBookmarksAfterRecordWithName:
initWithBookmarkStore:databaseCoordinator:accountStore:
beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandler:
_beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
_scheduleRetryIfAbleWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
_resetSyncData
_bookmarkStoreDidFinishSetUp
_finishSyncing
_didFailToSyncWithError:didOpenDatabase:
_cleanUpAndCallCompletionHandlersWithError:
_rebuildUndeletedBookmark:
_recordNameOfLastRecordInRoot
_didSaveRecordsLocally
_processChanges
_saveNextChangedRecordBatch
_reparentAndSaveUnrootedBookmarks
_saveNextReparentedRecordBatch
_nextRecordBatchGetRecordNamesToCloudBookmarks:withCloudBookmarkAllocationBlock:
_saveRecordBatch:recordNamesToCloudBookmarks:successCompletionHandler:
_performSyncDownWithCompletionHandler:
_performSyncDownWithLastServerChangeToken:completionHandler:
_didCompleteSyncDownAfterExpiredChangeTokenError
_updateBookmarkWithRecord:
_existingBookmarkForRemoteRecord:
_bookmarkForRemoteRecord:isNewBookmark:
_continueSyncingAfterSyncDown:
_nextChangeID
_operationGroupForFetching
_operationGroupForSaving
_changeToken
_movedRecordNames
_unsavedChanges
_unsavedBookmarkFromLastBatch
_unsavedReparentedRecordNames
_lastKnownPositionOfLastItemInRootFolder
_namesOfRecordsSavedToTheServer
_namesOfRecordsMissingFromPreviousSyncDown
_namesOfRecordsExpectedOnSyncDown
_movedBookmarkManager
_pendingReferenceManager
_positionGenerator
_expiredChangeTokenHandler
_didResetSyncData
_numberOfRetries
cloudBookmarkSyncMigrationSaveHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSaveHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSaveHandler:shouldSaveBookmark:
cloudBookmarkSyncMigrationSaveHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
cloudBookmarkSyncMigrationSyncDownHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSyncDownHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSyncDownHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
beginMigrationInOperationGroup:completionHandler:
_didSaveLocalRecords
_prepareRecordsForMigration
_migrationDidCompleteWithError:
_performMergingSyncDownInOperationGroup:
_generateAndSaveRecordsInOperationGroup:
_performSyncDownInOperationGroup:
_performSyncDownInOperationGroup:withRetryManager:
_didFinishSyncDownInOperationGroup:
_reparentAndSaveUnrootedBookmarksInOperationGroup:
_completionHandler
_converter
_syncDownHandler
_saveReparentedBookmarksHandler
_hasSavedBookmarksLocally
initWithDictionaryRepresentation:
childEvents
addChildEvent:
_defaultSubtitle
extraAttributes
title
setTitle:
beginDate
setBeginDate:
endDate
setEndDate:
subtitle
setSubtitle:
symbolName
setSymbolName:
metadata
setMetadata:
_childEvents
_title
_beginDate
_endDate
_subtitle
_symbolName
_metadata
T@"NSString",C,N,V_title
T@"NSDate",&,N,V_beginDate
T@"NSDate",&,N,V_endDate
T@"NSString",C,N,V_subtitle
T@"NSString",C,N,V_symbolName
T@"NSDictionary",C,N,V_metadata
safari_operationGroupWithName:qualityOfService:xpcActivity:
_pcsIdentitiesChangedNotification:
fetchDevicesWithCompletionHandler:
deleteCloudTabsZoneWithCompletionHandler:
_determineCloudTabSyncCoordinatorWithCompletion:
_transitionCloudTabSyncCoordinatorToManateeState:completion:
_deleteCloudTabsZoneWithCompletionHandler:
_manateeErrorCode:
_handleManateeErrorIfNeeded:completionHandler:
_fetchDevices
deleteDatabaseAndSyncDataForAccountChange
getCloudTabRemoteStoreWithCompletionHandler:
getCachedDevicesWithCompletionHandler:
_queue
_cloudTabLocalStore
_remoteStore
_syncCoordinator
_localStoreShim
_containerManateeObserver
_syncCoordinatorDeterminationCompletionBlocks
_localStoreShimForManateeContainer
_currentManateeState
_manateeStateNeedsUpdate
_determiningSyncCoordinator
_completionHandlersForCurrentDeviceFetchRequest
_completionHandlersForNextDeviceFetchRequest
T@"<CloudTabSyncArbiterDelegate>",W,N,V_delegate
T@"CKContainer",R,N
cloudTabLocalStore:hadSevereError:
cloudTabLocalStoreDidOpen:
openDatabaseIfNecessary
closeDatabaseWithCompletionHandler:
loadCloudTabDataWithCompletionHandler:
loadCloudTabDeviceWithUUIDString:completionHandler:
deleteRecordsWithPrimaryKeys:completionHandler:
saveCloudTabDevices:tabs:closeRequests:completionHandler:
getServerChangeTokenDataWithCompletionHandler:
setServerChangeTokenData:completionHandler:
getUseManateeContainerForSyncingWithCompletionHandler:
setUseManateeContainerForSyncing:completionHandler:
T@"<CloudTabLocalStoreDelegate>",W,N
initWithCloudTabLocalStore:
disabled
setDisabled:
cloudTabLocalStore
_disabled
TB,N,V_disabled
T@"<CloudTabLocalStore>",R,N,V_cloudTabLocalStore
T@"<CloudTabLocalStoreDelegate>",W,N,V_delegate
localMigrationState
setLocalMigrationState:
beginMigratingAsPrimaryMigrator:inOperationGroup:willBeginMigrationHandler:withCompletionHandler:
_beginMigrationAsPrimaryMigrator:inOperationGroup:
_didFinishMigrationWithError:
_migrationConverter
initWithBookmarkStore:
_collectDiagnosticsDataWithRemoteMigrationInfo:remoteMigrationInfoError:completionHandler:
_stringForRemoteMigrationState:
_changesDictionaryFromDatabase:
_localBookmarksDictionaryFromDatabase:
_traverseBookmarksInDatabase:parentFolderID:bookmarksCount:foldersCount:details:
_stringForFolderType:
_stringForBookmarkType:
_identifierForSensitiveString:
_sensitiveStringIdentifiers
cloudTabsRecordZoneID
createCloudTabsRecordZoneInOperationGroup:completionHandler:
fetchCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
saveCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudTabsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
saveCloudTabsRecordBatch:createCloudTabsZoneIfMissing:inOperationGroup:completionHandler:
deleteCloudTabRecords:inOperationGroup:completionHandler:
deleteCloudTabsZoneInOperationGroup:completionHandler:
_createCloudTabsRecordZoneInOperationGroup:withRetryManager:completionHandler:
_saveCloudTabsRecordBatch:inOperationGroup:completionHandler:
_saveCloudTabsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
_operationToDeleteCloudTabRecordIDs:completionHandler:
usesManateeContainer
_threadUnsafeDatabase
_cloudTabsOperationQueue
_usesManateeContainer
TB,R,N,V_usesManateeContainer
syncCoordinatorDidBeginSyncUp:
syncCoordinatorDidFinishSyncUp:
syncCoordinator:didBeginSyncDownWithConfigurations:
syncCoordinatorDidFinishSyncDown:
syncCoordinator:didSendRecordBatch:
syncCoordinator:didFetchRecord:
fileURL
appendEvent:
createSyncUpEvent
createSyncDownEvent
dictionaryRepresentationForRecord:withCoordinator:
symbolNameForRecordType:
persistEvents
_events
_currentSyncUpEvent
_currentSyncDownEvent
beginFolderMigrationInOperationGroup:completionHandler:
_didFailSavingWithError:
_didFinishSavingRecordsWithNames:
_nextCloudBookmarkToSave
_recordNameEnumerator
setRootRecordName:
childRecordNamesForRecordName:
childFolderRecordNamesForRecordName:
positionForRecordName:
_generateRecordPositions
_childRecordNamesInParentServerSyncId:
_generatePositionsForChildRecordNames:withStartingPosition:
_recordNamesToGeneratePositionsForInRecordNames:inParentRecordName:getFolderRecordNames:getLastValidPosition:
_existingPositionForRecordWithName:getIsFolder:
recordNameEnumerator
rootRecordName
_recordNamesToChildRecordNames
_recordNamesToChildFolderRecordNames
_recordNamesToPositions
_rootRecordName
T@"NSString",C,N,V_rootRecordName
initWithParentPositionGenerator:
nextObject
parentGenerator
_folderRecordQueue
_currentChildRecordNames
_parentGenerator
T@"CloudBookmarkSyncMigrationPositionGenerator",R,N,V_parentGenerator
_dequeueNextCloudBookmarkToSave
_generateAndSaveRemainingRecordsInOperationGroup:
_saveRecordBatch:inOperationGroup:recordNamesToCloudBookmarks:
_recordByMergingRemoteRecord:withLocalRecord:recordNamesToCloudBookmarks:saveError:
_recordByMergingRemoteRecord:intoCloudBookmark:
recordIDForParentSyncServerID:
_unsavedProcessedBookmark
T@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>",W,N,V_delegate
cloudTabGroupSyncCoordinator:didReceiveChangesForUnhandledRecordZoneIDs:
cloudTabGroupSyncCoordinator:didUpdateShareForTabGroupWithUUID:
cloudTabGroupSyncCoordinator:participants:didJoinSharedTabGroupWithUUID:
cloudTabGroupSyncCoordinator:participants:didLeaveSharedTabGroupWithUUID:
cloudTabGroupSyncCoordinator:participantsDidUpdateInTabGroupWithUUID:
cloudTabGroupSyncCoordinator:activeParticipantsDidUpdateInTabWithUUID:
cloudTabGroupSyncCoordinator:didAddTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didNavigateInTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didRemoveTabWithUUID:title:inSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didChangeScopedFavoritesInSharedTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didChangeBackgroundImageInTabGroupWithUUID:byParticipantWithRecordID:
cloudTabGroupSyncCoordinator:didFetchRecentlyAcceptedSharedTabGroupWithUUID:
tabGroupMaintenanceActivityDidFinish:
initWithConfiguration:container:accountStore:
initWithConfiguration:container:accountStore:maintenanceActivity:
databasePath
_shouldSync
fetchPrivateDatabaseSubscriptionStatusInOperationGroup:withCompletionHandler:
savePrivateDatabaseSubscriptionInOperationGroup:withCompletionHandler:
fetchSharedDatabaseSubscriptionStatusInOperationGroup:withCompletionHandler:
saveSharedDatabaseSubscriptionInOperationGroup:withCompletionHandler:
beginSyncingForTrigger:completionHandler:
startMigrationIfNeeded
sendSyncDidFinishNotificationWithResult:
_processLocalTabOperation:completionHandler:
_performOnTabCollectionQueue:scheduleSync:completionHandler:
_scheduleSyncIfNeeded
_cancelSyncTimer
isSyncing
setSyncing:
_tabCollectionQueue
_tabCollectionSyncTimer
_didScheduleSync
_maintenanceActivity
_cloudBookmarkStore
_tabGroupPresenceUpdater
_syncObservers
_syncObserversToProxyObservers
_sharedTabGroupsObserver
_syncDebugger
_needsSync
_syncing
T@"<CloudTabGroupSyncManagerDelegate>",W,N,V_delegate
syncing
TB,N,GisSyncing,V_syncing
beginSavingReparentedBookmarksInOperationGroup:withRecordNames:lastKnownPositionInRoot:completionHandler:
_namesOfRemainingRecordsToSave
_lastKnownPositionInRoot
_isSavingReparentedRecords
beginSyncDownInOperationGroup:completionHandler:
beginSyncDownInOperationGroup:keepingRecordsMarkedAsDeletedLocally:completionHandler:
_didFinishSyncingReceivingRecordNames:error:
_didDeleteRecordWithName:
_updateLocalBookmarkWithCKRecord:
_cloudBookmarkForRecord:isNewBookmark:
_recordNamesToDelete
T@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>",W,N,V_delegate
initWithDatabaseURL:databaseQueueLabel:
database:hadSevereError:
initWithDatabaseURL:cloudExtensionsRecordZoneID:
loadCloudExtensionDeviceWithUUIDString:includeCloudExtensionStates:completionHandler:
loadCloudExtensionDataWithCompletionHandler:
saveCloudExtensionDevices:extensionStates:completionHandler:
_currentSchemaVersion
_createFreshDatabaseSchema
_resetDatabaseSchema
_databaseWillBeOpened
_databaseAtURL:failedToOpenWithError:
_failedToExcludeDatabaseFromBackupWithError:
_failedToEnableWALWithError:
_failedToEnableForeignKeysWithError:
_failedToEnableSecureDeleteWithError:
_databaseAtURL:hasIncorrectSchemaVersion:
_databaseWillBeClosed
_databaseWillBeDeleted
_databaseAtURL:failedToDeleteWithError:
_databaseWillBeRecreated
_failedToSetSchemaVersion:withError:
_failedToUpdateMetadataValueWithKey:error:
_failedToInsertMetadataValueWithKey:error:
_failedToDeleteMetadataValueWithKey:error:
_vacuumFailedWithError:
_loadDevices
_loadDeviceWithUUIDString:
_saveDevice:
_loadExtensionStatesForDevice:
_cloudExtensionStateFromRow:deviceUUIDString:
_saveExtensionState:
_cloudExtensionsRecordZoneID
T@"<CloudExtensionSQLiteStoreDelegate>",W,N,V_delegate
initWithDatabase:databaseAccessor:updater:
processChanges
_createServerSyncIDForItem:
updater
changes
changeToken
movedRecordNames
deletedRecordNames
parentRecordNamesToMovedChildRecordNames
_updater
_changes
_deletedRecordNames
_parentRecordNamesToMovedChildRecordNames
T@"<CloudBookmarkUpdater>",R,W,N,V_updater
T@"NSArray",R,C,N,V_changes
T@,R,N,V_changeToken
T@"NSSet",R,C,N,V_movedRecordNames
T@"NSSet",R,C,N,V_deletedRecordNames
T@"NSDictionary",R,C,N,V_parentRecordNamesToMovedChildRecordNames
lockForClient:
unlockForClient:
openDatabase
closeDatabaseAndSave:
Tr^v,R,N
databaseOpen
TB,R,N,GisDatabaseOpen
T@"<WBSBookmarkDBAccess>",R,N
_databaseLockCount
_databaseOpen
T@"<CloudBookmarkDatabaseLockArbiterDelegate>",W,N,V_delegate
TB,R,N,GisDatabaseOpen,V_databaseOpen
cloudExtensionDeviceWithDictionaryRepresentation:extensionSettingsDictionaryForDevice:cloudExtensionsRecordZoneID:
cloudExtensionDeviceWithCKRecord:
cloudExtensionDeviceWithDeviceUUIDString:deviceName:lastModifiedDate:newTabPageComposedIdentifier:newTabPageSetByUserGesture:newTabPageLastModifiedDate:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
_valueTransformerForDeviceName
_initWithDeviceUUIDString:deviceName:lastModifiedDate:newTabPageComposedIdentifier:newTabPageSetByUserGesture:newTabPageLastModifiedDate:encodedSystemFieldsData:cloudExtensionsRecordZoneID:
updateFromCloudExtensionDevice:
updateFromCloudExtensionDeviceWithoutUpdatingExtensionStates:
deviceUUIDString
deviceName
composedIdentifierForNewTabPage
wasNewTabPageSetByUserGesture
lastModifiedDateForNewTabPage
_setCloudExtensionStatesFromDictionaryRepresentation:cloudExtensionsRecordZoneID:
_updateDevicePropertiesFromCloudExtensionDevice:
_updateCloudExtensionStatesFromStates:
cloudExtensionStates
setCloudExtensionStates:
_cloudExtensionStates
T@"NSDate",R,C,N
newTabPageSetByUserGesture
TB,R,N,GwasNewTabPageSetByUserGesture
T@"NSArray",C,N,V_cloudExtensionStates
cloudTabWithWBSCloudTabDictionaryRepresentation:owningDeviceUUIDString:position:cloudTabsRecordZoneID:
cloudTabWithCKRecord:
cloudTabWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_valueTransformerForTitleAndURL
_initWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_commonInitWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTab:previousTabPosition:
positionTabAfterPosition:
owningSceneID
urlString
isPinned
isShowingReader
readerScrollPositionDictionary
readerScrollPositionPageIndex
wbsCloudTabDictionaryRepresentation
_positionAfterPosition:
T@"WBSCRDTPosition",R,C,N
pinned
TB,R,N,GisPinned
showingReader
TB,R,N,GisShowingReader
T@"NSNumber",R,N
databaseURLForFilename:
_openDatabase:deleteDatabaseFileOnError:
_deleteDatabaseFileAtURL:reopenDatabase:
_setDatabaseSchemaVersion:
_metadataInt64ValueForKey:
_setMetadataInt64Value:forKey:
_metadataDataValueForKey:
_setMetadataDataValue:forKey:
_vacuum
_closeDatabase
_isDatabaseOpen
_migrateToCurrentSchemaVersionIfNeeded
set_database:
_databaseQueue
set_databaseQueue:
_databaseURL
__database
__databaseQueue
T@"WBSSQLiteDatabase",&,N,V__database
T@"NSObject<OS_dispatch_queue>",&,N,V__databaseQueue
cloudTabDeviceWithDictionaryRepresentation:deviceUUIDString:cloudTabsRecordZoneID:
cloudTabDeviceWithCKRecord:
cloudTabDeviceWithDeviceUUIDString:deviceName:hasDuplicateName:isEphemeralDevice:lastModified:encodedSystemFieldsData:cloudTabsRecordZoneID:
_initWithDeviceUUIDString:deviceName:hasDuplicateName:lastModified:isEphemeralDevice:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTabDevice:
_updateTabsFromCloudTabs:
hasDuplicateName
isEphemeralDevice
lastModified
wbsCloudTabDeviceDictionary
_positionAfterPosition:owningDeviceUUIDString:
_setTabsFromWBSCloudTabDictionaryRepresentations:cloudTabsRecordZoneID:
tabs
setTabs:
_tabs
ephemeralDevice
TB,R,N,GisEphemeralDevice
T@"NSArray",C,N,V_tabs
safari_isCloudTabDeviceRecord
safari_isCloudTabRecord
safari_isCloudTabCloseRequestRecord
safari_cloudTabDeviceRecord
TB,R,N,Gsafari_isCloudTabDeviceRecord
safari_cloudTabRecord
TB,R,N,Gsafari_isCloudTabRecord
safari_cloudTabCloseRequestRecord
TB,R,N,Gsafari_isCloudTabCloseRequestRecord
initWithDatabaseURL:cloudTabsRecordZoneID:
_loadTabsForDevice:
_cloudTabFromRow:deviceUUIDString:
_saveTab:
_loadCloseRequests
_saveCloseRequest:
_cloudTabsRecordZoneID
initWithCloudRemoteStore:localStore:accountStore:
tearDown
_canCloseCloudTabStoreDatabase
_continueSavingTabsForCurrentDevice
_saveNextRecordBatchCreatingCloudTabsZoneIfMissing:
_deleteObsoleteTabRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingTabs
_finishedSavingDevice
_changedRecordsForCloudTabDevice:
_recordIDsFromDeviceOrTabUUIDStrings:
_continueSavingCloseRequest
_saveCloseRequestToCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingCloseRequest
_finishedSavingCloseRequest
_beginFetchingTabs
_continueFetchingTabs
_fetchChangesFromCloudKitCreatingCloudTabsZoneIfMissing:
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudTabsZoneCompletedWithError:
_loadDevicesAndTabsFromSQLiteStore
_deleteRecordsWithNames:inOperationGroup:completionHandler:
cloudRemoteStore
_cloudTabStoreError
set_cloudTabStoreError:
_isBeingTornDown
set_isBeingTornDown:
_cloudTabStore
_saveTabsOperationGroup
_tabSaveState
_saveTabsCompletion
_uuidStringsOfTabsToDelete
_saveTabsError
_saveCloseRequestsOperationGroup
_closeRequestSaveState
_saveCloseRequestCompletion
_closeRequestToSave
_saveCloseRequestError
_deleteCloseRequestsOperationGroup
_currentDeleteOperationGroup
_deleteError
_fetchTabsOperationGroup
_fetchDevicesCompletion
_modifiedTabs
_modifiedCloseRequests
_fetchedCloseRequests
__isBeingTornDown
_cloudRemoteStore
__cloudTabStoreError
T@"NSError",&,V__cloudTabStoreError
TB,V__isBeingTornDown
T@"CloudTabRemoteStore",R,N,V_cloudRemoteStore
convertRecordsForMigration
_convertItem:
_cloudKitRecordNameForBookmarkDAVServerSyncId:
initWithBookmarkStore:databaseAccessor:migrationCoordinator:
_errorWithCode:
_descriptionForErrorCode:
hasUnappliedReferences
applyAllPendingReferencesWithUpdater:
_pendingReferences
isFull
_sizeOfRecordUpdateBatch:
deletedRecordZoneIDsInPrivateDatabase
updatedRecordsInPrivateDatabase
deletedRecordIDsInPrivateDatabase
updatedRecordsInSharedDatabase
deletedRecordIDsInSharedDatabase
addItem:
_items
_deletedRecordZoneIDsInPrivateDatabase
_updatedRecordsInPrivateDatabase
_deletedRecordIDsInPrivateDatabase
_deletedRecordZoneIDsInSharedDatabase
_updatedRecordsInSharedDatabase
_deletedRecordIDsInSharedDatabase
initWithBookmarkStore:collectionConfiguration:accountStore:
beginSyncingWithOperationGroup:completionHandler:
_beginSyncingWithOperationGroup:completionHandler:
_prepareForSyncingWithOperationGroup:completionHandler:
beginSharingTabGroupWithUUID:inOperationGroup:completionHandler:
_beginSharingTabGroupWithUUID:inOperationGroup:completionHandler:
_setUpTabGroupZoneForTabGroup:inCollection:operationGroup:completionHandler:
_beginSavingMigrationTombstonesForRootBookmarkID:destinationRecordZoneID:inCollection:operationGroup:completionHandler:
_beginSavingMigratedRecordsForRootBookmarkID:destinationRecordZoneID:inCollection:operationGroup:completionHandler:
_setUpSharingInRecordZoneWithID:collection:operationGroup:completionHandler:
_performPostZoneMigrationSyncDownForRecordZoneID:shareRecord:inCollection:operationGroup:completionHandler:
_saveNextMigrationRecordBatchInCollection:operationGroup:usingRecordBuilderBlock:completionHandler:
_nextMigrationRecordBatchInCollection:recordBuilderBlock:
_migrationTombstoneRecordForBookmarkID:inCollection:destinationRecordZoneID:
_migratedRecordForBookmarkID:inCollection:destinationRecordZoneID:
acceptShareForURL:invitationTokenData:inOperationGroup:completionHandler:
_acceptShareForURL:invitationTokenData:inOperationGroup:completionHandler:
acceptShareForShareMetadata:inOperationGroup:completionHandler:
_acceptShareForShareMetadata:inOperationGroup:completionHandler:
_getShouldCreateLegacyPlaceholderForSharedTabGroupInCollection:operationGroup:completionHandler:
_didLoadLastKnownMinimumIOSVersion:minimumMacOSVersion:
_createLegacyPlaceholderForSharedTabGroup:inCollection:operationGroup:completionHandler:
_didRetrieveHashGenerators:
_saveNextBatchInCollection:operationGroup:completionHandler:
_deletePrivateRecordZoneIDs:collection:operationGroup:completionHandler:
_saveUpdatedRecords:deletedRecordIDs:inDatabase:collection:operationGroup:completionHandler:
_deleteNextBatchOfAuxiliaryRecordsInCollection:operationGroup:completionHandler:
_didFetchRecord:collection:shouldGenerateUpdatedRecord:
_didFetchBookmarkRecord:collection:
_handleUpdatedShareRecord:inCollection:
_handleDeletedShareRecordWithID:inCollection:
_handleUpdatedTabPresenceRecord:inCollection:
_handleDeletedTabPresenceRecord:inCollection:
_deletePresenceForParticipantID:inTabGroupWithRecordName:collection:
_dispatchPresenceUpdatesIfNeededForTabGroupsWithRecordNames:inCollection:
_dispatchPresenceUpdatesIfNeededForTabsWithRecordNames:inCollection:
_handleUpdatedTabParticipantStatusRecord:inCollection:
_handleDeletedTabParticipantStatusRecord:inCollection:
_performSyncDownAfterProcessingChangesInCollection:operationGroup:completionHandler:
_performSyncDownInCollection:operationGroup:completionHandler:
_fetchChangedRecordZonesSinceServerChangeToken:inDatabase:collection:operationGroup:completionHandler:
_handleDeletedRecordZoneIDs:inCollection:
_performSyncDownForRecordZoneIDs:perRecordZoneConfigurations:inDatabase:collection:operationGroup:completionHandler:
_handleExpiredChangeTokenError:collection:operationGroup:completionHandler:
_didCompleteSyncDownAfterExpiredChangeTokenErrorWithCollection:
_saveAssetsForBookmarkIfPresent:onRecord:withConfiguration:inCollection:
_saveAssetAtURL:toURL:completionHandler:
_didFinishSyncingWithResult:error:completionHandler:
_didEncounterError:withCompletionHandler:
_didFailToSyncWithError:collection:completionHandler:
_createCollectionWithConfiguration:
_configurationForRecord:
_configurationForBookmark:
_hashGeneratorForRecord:
_shouldMoveRecordToSecondaryZoneIfPossible:
_recordZoneIDForBookmark:inCollection:
_databaseForRecord:
_saveRecord:forBookmark:inCollection:
_serverIDForBookmarkCreateIfNeeded:inCollection:
_valueForKey:ofType:fromRecord:withConfiguration:
_recordForBookmark:inCollection:changeType:
_nextBatchItemAfterChangeToken:inCollection:
_recordForBookmark:syncData:configuration:changeType:inCollection:
_readStatusRecordForBookmark:syncData:configuration:changeType:inCollection:
_updateBookmark:inCollection:withRecord:configuration:
_updateTabCollectionFolder:inCollection:withRecord:configuration:
_updateBookmarkCollectionFolder:inCollection:withRecord:configuration:
_updateTabCollectionBookmark:inCollection:withRecord:configuration:
_updateBookmarkCollectionBookmark:inCollection:withRecord:configuration:
_mergedRecordWithLocalRecord:remoteRecord:saveError:collection:
_removeBookmarkWithServerID:inCollection:
_createBookmarkWithConfiguration:
_resetSyncDataInCollection:
_notifyDelegateAboutIgnoredRecordZoneIDsIfNeeded:
_processSavedRecord:bookmark:collection:
_postCollaborationChangeEventWithBookmark:collection:
_postCollaborationRenameEventWithBookmark:collection:
_postCollaborationDeleteEventWithBookmark:collection:
_highlightWithBookmark:collection:
registerSyncObserver:
unregisterSyncObserver:
_bookmarksLog
_tabGroupsLog
collectionConfiguration
defaultOperationGroup
setDefaultOperationGroup:
_assetSavingQueue
_observers
_auxiliaryRecordIDsToDelete
_recordZoneIDsToHashGenerators
_secondaryZoneNamesToRecordZoneIDs
_highlightCenter
_tabGroupRecordNamesWithPendingPresenceUpdate
_tabRecordNamesWithPendingPresenceUpdate
_destinationRecordZoneID
_migrationLocalRecordIDQueue
_isSavingMigrationTombstoneRecords
_acceptedSharedTabGroupServerID
_acceptedShareDate
_lastKnownMinimumVersionsCachedDate
_lastKnownMinimumOSVersionInCircleRequiresLegacyPlaceholderForSharedTabGroup
_collectionConfiguration
_defaultOperationGroup
T@"<CloudTabGroupSyncCoordinatorDelegate>",W,N,V_delegate
T@"WBCollectionConfiguration",R,C,N,V_collectionConfiguration
T@"CKOperationGroup",&,N,V_defaultOperationGroup
createOperationGroupWithName:qualityOfService:xpcActivity:
_operationConfiguration
T@"CKDatabase",R,N
T@"NSOperationQueue",R,N
T@"CKOperationConfiguration",R,V_operationConfiguration
Not updating push topic
Updating push topic subscriptions with sync enabled = %d
Using opportunistic push topic
Using normal push topic
Set up push connection
Failed to instantiate CloudKit extensions database
Fetching CloudExtensions zone subscription
Failed to fetch CloudExtensions zone subscription by ID with error: %{public}@
Successfully fetched CloudExtensions zone subscription
Saving CloudExtensions zone subscription
Bailing out from saving CloudExtensions zone subscription due to deallocation
Saving CloudExtensions zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudExtensions zone subscription because zone couldn't be created
Saving CloudExtensions zone subscription after creating zone
Saving record batch of size: %lu
Attempting to create CloudExtensions zone before retrying save
Retrying save after creating CloudExtensionsZone
No records to delete.
Deleting %lu records.
Grouping delete requests for %lu objects into %lu batches
Deleting records failed: %{public}@
Fetching record changes with server change token %{public}@.
Fetching all records.
Saving record batch with %lu records
Failed to save record due to unrecoverable error: %{public}@
Received batch too large error for an individual record change; bailing out
Failed to save record due to unexpected error: %{public}@
Failed to save record due to unexpected error outside the CKErrorDomain: %{public}@
Failed to save record due to CloudKit error which could not be handled: %{public}@
Batch record save operation completed but failed to save records due to unrecoverable error: %{public}@
Batch record save operation completed but bailing out from batch save due to previously cancelling the request
Batch record save operation completed but server rejected the smallest batch we can send; bailing out
All attempts at re-batching record save failed
Attempting to re-batch record save
Batch record save operation completed but we need to re-batch
Modify records operation failed due to deallocation with error %{public}@
Attempting to retry batch save request
Record batch save retry limit exceeded
Record changed: %@
Record of type %{public}@ deleted: <%@>
Bailing out from record fetch due to deallocation with error %{public}@
Record fetch retry limit exceeded
Fetch record changes failed: %{public}@
Fetch records from record zone operation completed for CloudExtensions record zone
Fetch record zone changes operation failed: %{public}@
Enqueuing request to fetch records from CloudExtensions record zone
Enqueuing %lu modify records operations
Creating CloudExtensions zone
Failed to create CloudExtensions zone with error: %{public}@
Bailing out of creating CloudExtensions zone due to deallocation
Retrying creation of CloudExtensions zone
Waiting to retry creation of CloudExtensions zone
Zone creation retry limit exceeded
Successfully created CloudExtensions zone
Attempting to save zone subscription for CloudExtensions zone
Error occurred deleting records, canceling dependent operations: %{public}@
Finished %@
Received a push notification
Ignoring push notification because notification is nil
Ignoring push notification because sync is disabled
User account changed
Received account Added notification
Received account Modified notification
Received account Deleted notification
Failed to determine encryption state of cloud settings container because container isn't available
Failed to determine encryption state of cloud settings container: %{public}@
Cloud settings container %{public}@ support encryption
Not triggering sync since migration is in progress
*** Starting CloudKit bookmark sync for trigger: %{public}@
Transmitted Internet Records
*** CloudKit bookmark sync failed with result <%{public}@>: %{public}@
*** CloudKit bookmark sync finished with result: %{public}@
Attempting migration from DAV to CloudKit since we got back an explicit 'zone deleted' error
Sending notification of Bookmarks sync result: %ld
Fetching remote migration state
Simulating fetch of 'Unknown' migration state because Safari sync is disabled
Failed to fetch remote migration state: %{public}@
Fetched remote migration state: %ld
Asked to migrate, but bailing because migration is suppressed by the cycler
Bailing out from migration since migration was already in progress
Failed to generate Per-Site Settings record name with error: %{public}@
Failed to generate a CKRecord with the sync data for preference: %{sensitive, mask.hash}@ and domain: %{sensitive, mask.hash}@
Failed to archive dictionary[WBSCloudPerSiteSettingValue] NSDictionary: %{public}@
*** Per site settings initial fetch failed with result <%ld>: %{public}@
*** Per Site settings initial fetch finished with result: %ld
Failed to load permissions from preferences database for %{private}@
Safari's per-site settings have been updated in CloudKit
*** Cloud settings initial fetch failed with result <%ld>: %{public}@
*** Cloud settings initial fetch finished with result: %ld
Beginning to fetch %lu tab group entities for focus
Mapping tab group UUID %{public}@ to title %{sensitive, mask.hash}@
Connection to bookmarks sync agent by %d was denied: Missing entitlement
Ignoring push notification %{public}@ because it does not match any known push topic
Push notification %{public}@ comes from a container that is used by multiple sync coordinators
Attempting to sync Bookmarks in response to a subscription push notification
Attempting to sync Cloud Settings in response to a subscription push notification
Attempting to sync Tab Groups in response to a subscription push notification
Ignoring push notification %{public}@ because it does not match any known subscription
Reached maximum delay before forcing a sync after a push notification
Ignoring attempt at checking database changes since a request is already running - container: %{public}@
Beginning fetch database change operation for container with identifier: %{public}@, server change token: %{public}@
recordZoneChangedBlock for zone ID: %{public}@ (with zone name: %{public}@)
Bookmarks zone changed
Tab Groups zone changed
Cloud Tabs zone changed
Cloud Settings zone changed
Cloud Extensions zone changed
Database changes fetch retry limit exceeded
Failed to fetch database changes for container: %{public}@ with error: %{public}@
Did finish fetching database change operations for container with identifier: %{public}@, new server change token: %{public}@
Attempting to sync Bookmarks in response to a push notification after checking container zones
Attempting to sync Tab Groups in response to a push notification after checking container zones
Attempting to sync CloudKit Tabs in response to a push notification after checking container zones
Attempting to sync settings in response to a push notification after checking container zones
Attempting to sync extension state in response to a push notification after checking container zones
Fetching Bookmarks zone subscription status failed with error: <%{public}@>.
Bookmarks zone subscription already exists
Saving Bookmarks zone subscription failed with error: <%{public}@>.
Saving Bookmarks zone subscription succeeded
Fetching CloudTabs zone subscription status failed with error: <%{public}@>.
CloudTabs zone subscription already exists
Saving CloudTabs zone subscription failed with error: <%{public}@>.
Saving CloudTabs zone subscription succeeded
Ignoring request to sync/migrate because migration is in progress
Ignoring request to sync/migrate because sync is in progress
Will attempt sync/migration in response to trigger: %{public}@
Fetching remote migration state since we tried syncing while not locally migrated
Notifying Safari of iCloud Tabs changes in response to a push notification
Retrying initial CloudTab fetch
Finished initial CloudTab fetch with error %{public}@
Fetching CloudSettings zone subscription failed due to deallocation
Fetching CloudSettings zone subscription status failed with error: <%{public}@>.
CloudSettings zone subscription already exists
Saving CloudSettings zone subscription failed due to deallocation
Saving CloudSettings zone subscription failed with error: <%{public}@>.
Saving CloudSettings zone subscription succeeded
Ignoring request to sync because sync is in progress
Safari Settings syncing is disabled. Cloud settings sync aborted
*** Starting Cloud settings sync for trigger: %{public}@
*** Cloud settings sync failed with result <%ld>: %{public}@
*** Cloud settings sync finished with result: %ld
Notifying Safari of extension state changes in response to a push notification
Fetching CloudExtensions zone subscription failed due to deallocation
Fetching CloudExtensions zone subscription status failed with error: <%{public}@>.
CloudExtensions zone subscription already exists
Saving CloudExtensions zone subscription failed due to deallocation
Saving CloudExtensions zone subscription failed with error: <%{public}@>.
Saving CloudExtensions zone subscription succeeded
Received container change callback. Registering for a new zone subscription
*** Migration to CloudKit started
Checking In xpc activity with identifier %{public}s
Checked In xpc activity with identifier %{public}s
An activity with identifier %{public}s is already scheduled
No prior %{public}s activity was found. Registering a new one
No prior %{public}s activity was found and registration is not requested
Every CloudKit subscription registration succeeded or we were already subscribed
Failed to register for subscriptions to these services: %{public}@
No need to register for CloudKit subscriptions because a registration is in progress
Registering for CloudKit subscriptions xpc activity. Register if needed: %d, ignore ongoing registration: %d delay: %lld, last successful registrations: %{public}@, remaining subscriptions to register: %{public}@
Attempting to save %{public}@ subscriptions
Not attempting to register CloudKit subscriptions because syncing is not available
Registering %{public}@ subscription succeeded or we were already subscribed
Registering %{public}@ subscription failed with error: <%{public}@>
Checking remote migration state for a chance to migrate as a secondary device
Remote migration state is set to finished; determining if secondary device migration can proceed
Attempting to migrate as secondary device
Not proceeding with migration because there is already an ongoing migration
Not proceeding with migration because this device was the primary migrator
No device has migrated yet; continuing to periodically check the remote migration state
Unsupported remote migration state returned; stopping the periodic remote migration check
Registering migration XPC activity
CloudKit bookmarks migration activity is running
Attempting to migrate to CloudKit
*** Migration to CloudKit finished with status: %d
Fetching TabGroups private database subscription status failed with error: <%{public}@>.
TabGroups database private subscription already exists
Saving TabGroups private database subscription failed with error: <%{public}@>.
Saving TabGroups private database subscription succeeded
Fetching TabGroups shared database subscription status failed with error: <%{public}@>.
TabGroups shared database subscription already exists
Saving TabGroups shared database subscription failed with error: <%{public}@>.
Saving TabGroups shared database subscription succeeded
Ignoring request to sync TabGroups because sync is in progress
Retry tab groups sync because running outside of XPC activity failed.
Will attempt tab group sync in response to trigger: %{public}@
Ignoring request to sync TabGroups for manager %{public}@ with trigger %{public}@ because the database does not exist yet
Attempting to sync CloudKit Tabs in response to CloudTabGroupSyncManager detecting changes in CloudTabs record zone
Did detect an issue while syncing related to <rdar://%{public}@>
Did detect an issue while syncing with no corresponding bug IDs
Attempted to post detected syncing bug notification without bug IDs
Posting detected syncing bug notification with bug IDs: <rdar://%{public}@>
Hierarchy check failed, please run sysdiagnose
Asking the position for the root record makes no sense
Unknown item with record name: %{public}@
Item with record name does not have sync data: %{public}@
%{public}s Unknown item type
Creating CloudBookmark to update locally with record name: %{public}@
Unknown item for reparenting with record name: %{public}@
%{public}s Unknown item type %{public}@
Attempting to migrate record with name %{public}@ that does not exist in the local database.
%{public}s Unknown item type %ld
Delete change %{private}@ to update does not have a valid record
Could not decode sync data in deleted change %{private}@ to update with record name: %{public}@.
No record object found in decoded sync data of deleted change %{private}@ to update with record name: %{public}@.
Updating state generation of deleted record with name: %{public}@, generation: %{public}@
Unknown type %ld for change %{private}@
Cannot find configuration for change with type %{public}@ for bookmark %{public}@
Change of type %{public}@ for bookmark %{public}@ of type %{public}@ given without an associated item
Expecting CKBAItemTypeBookmark type for local item %p, but got %ld
Expecting CKBAItemTypeBookmark type for local item %{private}@, but got %ld
Expecting %{public}@ type for local bookmark item %p, but got %ld
Expecting %{public}@ type for local bookmark item %{private}@, but got %ld
Expecting CKBAItemTypeFolder type for local item %p, but got %ld
Expecting CKBAItemTypeFolder type for local item %{private}@, but got %ld
Expecting %{public}@ folder type for local folder item %p, but got %ld
Expecting %{public}@ folder type for local folder item %{private}@, but got %ld
%{public}s Unknown CKRecord type %{public}@
Updating references for the root record makes no sense
Could not find item with record name %{public}@ in database to apply pending references %{public}@
Cannot find configuration for item with record name: %{public}@ to apply pending references %{public}@
Local record with record name %{public}@ to reparent does not have a CKRecord stored in its sync data %{public}@
Reparenting record with record name: %{public}@
%{public}s Unknown item type for record name %{public}@
Delete change of type %{public}@ given without a Server ID
Assigning new record with record name %{public}@ to locally modified item, this could create an empty record on the server
Assigning new record with record name %{public}@ to locally added item
Deleted bookmark change %{private}@ does not have a valid record name.
Ignoring Delete Change object for built-in record with name: %{public}@.
Deleted bookmark change with record name %{public}@ does not have a CKRecord attached to it
Preparing record with name %{public}@ to mark as deleted on the server with generation: %{public}@
Encountered an item with no record name; ignoring it
CKRecord %{private}@ with invalid record name was received; ignoring it
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@ and position: %{public}@
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@
Remote record is missing generation for its parent and position fields
Local record to migrate %p has an invalid record name even though it should have one at this point
Local record to migrate %{private}@ has an invalid record name even though it should have one at this point
Creating %{public}@ to complement saved record with name: %{public}@
Migrated record %{public}@ known to the server has no position!
Creating %{public}@ to migrate record unknown to the server with name: %{public}@
Preparing %{public}@ record with name: %{public}@ for change of type %{public}@ to save to the server with updated keys: <%{public}@>
Attributes <%{public}@> are not included in the set of modified attributes to update the CKRecord despite being used to update the generation
Attributes <%{public}@> are included in the set of modified attributes to update the CKRecord despite not being used to update the generation
Trying to read the value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the value of ParentFolder on a record whose parent was not updated locally. Record name: <%{public}@>.
Trying to read the value of ParentFolder on a record that was deleted locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record whose Title or URL was not updated locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record that was deleted locally. Record name: <%{public}@>.
Saving record with name %{public}@ locally
Loading known keys <%{public}@> from remote record with name: %{public}@
Update generations of record %{public}@ with change of type %{public}@, updated keys <%{public}@>
Attributes <%{public}@> no longer need update despite those changes from a previous update not being validated
Record name: %{public}@, setting parent: %{public}@, generation: %{public}@, position: %{public}@
Non-built-in record with name %{public}@ does not have a position
Updating locally modified attributes <%{public}@>
%{public}@ attribute should have been saved during primary migration but has no generation locally.
Cannot save identity hash attributes since the local record is incomplete.
Did apply reference %{public}@ generation: %{public}@ to attribute %{public}@ of record name: %{public}@
Will merge local and remote records. Record name: %{public}@
Did finish merging local and remote records with record name: %{public}@ due to state changes. Result: %{public}@
Parent and position were updated locally but were not saved to the server
Merging local and remote record fields.
No merging needed for key: %@ with local generation: %@, remote generation: %@
Attribute <%{public}@> expected to be saved to the server has an empty generation
Copy remote value into local record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Copy local value into remote record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Attribute %{public}@ was updated locally but was not saved to the server
Update IdentityHash on remote record.
Update local and remote generations.
Did finish merging local and remote records with record name: %{public}@. Result: %{public}@
Merging parent and position for record Name: %{public}@, local and remote generations are equal: %{public}@
Merging parent and position into local record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging parent and position into remote record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Did finish merging local and remote records with record name: %{public}@. Local record will be deleted because its minimum API version %ld is higher than the API version %ld supported by this client.
Merging minimum API version for record name: %{public}@, local and remote generations are equal: %{public}@
Local and remote minimum API versions differ, even though generations are the same. Record name: %{public}@.
Merging minimum API version into local record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging minimum API version into remote record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote state generations are equal even though their states are different. Local Deleted: %ld, generation: %{public}@, Remote Deleted %ld, generation: %{public}@
Server previously told us the record was deleted, now it is undeleted. Mark the record %{public}@ as moved and continue merging: local generation: %{public}@, remote generation: %{public}@
Local record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both local and remote records are deleted but remote record state generation needs to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both remote and local records are deleted and remote generation does not need to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote records are not deleted and have equal generations: %{public}@.
Updating local state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
Updating remote state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
BAChange %{private}@ is neither a folder change or a bookmark change
Failed to get extensions database URL, falling back to in-memory database
User account changed for extension syncing
Deleting the CloudExtensions database
Saving extension state for the current device to CloudKit
Could not create device for saving extension states from dictionary %{private}@
Saving current device excluding extension states to CloudKit
Could not create device for saving from dictionary %{private}@
Stopping save of extension state for current device
Merging device with existing device in SQLite database, if necessary
Severe SQLite store error occurred while merging device with existing device: %{public}@
Merging device and extension states into existing device from SQLite database
Merging device into existing device from SQLite database
No existing device found in SQLite database
Saving device to CloudKit
Done saving device to CloudKit
Saving extension state record batch of size: %lu
Did fail to save extension state record batch with error: %{public}@
Finished saving extension state record batch
Deleting obsolete extension state records from CloudKit
No obsolete extension state records need to be deleted from CloudKit
Failed to delete obsolete extension state records with error: %{public}@
Done deleting obsolete extension state records from CloudKit
Updating SQLite store from CloudKit after saving extension state
Updating SQLite store from CloudKit after saving extension state failed with error: %{public}@
Done updating SQLite store from CloudKit after saving extension state
Finished saving extension states for the current device to CloudKit
Fetching extension state data from CloudKit
Stopping fetch of extension states
Deleting database and restarting fetch
Reading server change token from SQLite
Finished reading server change token from the SQLite database
Severe SQLite store error occurred while reading server change token: %{public}@
Failed to read from server change token data: %{public}@
Failed to decode server change token with exception: %{public}@
Found server change token data in the SQLite database
Found server change token data in the SQLite database, but couldn't unarchive it
Found server change token data in the SQLite database, but couldn't unarchive it, even after deleting the database
No server change token found in the SQLite database
Fetching changes from CloudKit
Failed to fetch changes with error: %{public}@
Attempting to create CloudExtensions zone before retrying fetch
Finished fetching changes from CloudKit
Fetching changes from CloudKit again after creating CloudExtensions zone
Failed to create CloudExtensions zone when fetching changes with error: %{public}@
No records to delete from SQLite
Removing %lu deleted records from SQLite
Severe SQLite store error occurred while deleting records: %{public}@
Finished removing deleted records from SQLite
No modified devices or extension states to save to SQLite
Saving %lu device records and %lu extension state records to SQLite
Severe SQLite store error occurred while saving records: %{public}@
Failed to save modified device and extension state records to the SQLite database with error: %d
Finished saving modified device and extension state records to the SQLite database
Saving server change token to SQLite
Failed to archive server change token: %{public}@
Severe SQLite store error occurred while saving server change token: %{public}@
Failed to save server change token to SQLite with error: %d
Done saving server change token to SQLite
Skipping loading devices and extension states from SQLite
Loading devices and extension states from SQLite
Severe SQLite store error occurred while loading records: %{public}@
Finished loading devices and extension states from SQLite
Finished fetching extension data from CloudKit
Fetched an invalid extension device record from CloudKit
Fetched an invalid extension state record from CloudKit
Fetched an unrecognized record from CloudKit of type %{public}@
Deleting extension devices from CloudKit
No extension devices to delete
Stopping deletion of extension device records
Deleting extension device records from CloudKit
Failed to delete extension device records with error: %{public}@
Done deleting extension device records from CloudKit
Updating SQLite store from CloudKit after deleting extension device records
Updating SQLite store from CloudKit after deleting extension devices failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting extension device records
Finished deleting extension device records from CloudKit
Severe SQLite store error: %{public}@
Extension syncing not available because user is not signed in
Extension syncing not available because Safari's dataclass isn't enabled
Could not create extension state dictionary when getting extension states from CloudExtensionState %{private}@
Migration state: %ld, expect DAV IDs: %d, expect CloudKit IDs for all records: %d, expect parsable sync data: %d
Checking record with local ID: %{public}@, server ID: %{public}@, item type: %ld, subtype: %ld
Record does not have a server ID even though we expect all records to have one!
Record has a BookmarkDAV ID even though no record should have one!
Record has a CloudKit ID even though no record should have one!
Regular folder has built-in record name: %{public}@, shouldn't!
Built-in folder with type %ld, has invalid record name: %{public}@, expecting: %{public}@
Record has sync key even though migration began.
Item contains sync data even though it should not!
Record has ID %{public}@ but has no sync data!
Item contains sync data that cannot be parsed as CloudKit sync data!
CKRecord in item has a different record name %{public}@ from record name of the item: %{public}@
Record type %{public}@ of CKRecord in item does not match the expected BookmarkLeaf type.
Record type %{public}@ of CKRecord in item does not match the expected BookmarkList type.
CKRecord in item was never saved to the server despite being saved locally.
Sync data has no position stored despite its CKRecord being saved locally.
Sync data has no generation for its parent and position despite having saved sync data.
Sync data has no generation for its folder title and identity hash despite having saved sync data.
Sync data has no generation for its folder title, URL, and identity hash despite having saved sync data.
Checking account hash
Storing account hash
Account hash matches
Needs dataclass enabled check
Needs account hash check
 Successfully updated presence to tabRecordID: %{public}@, %{public}@
 Failed to update presence to tabRecordID: %{public}@, %{public}@
 Cancelling updating presence to tabRecordID: %{public}@, %{public}@
 Starting updating presence to tabRecordID: %{public}@, %{public}@
UserRecordID is already cached
Successfully cached UserRecordID
Could not cached UserRecordID, the user has probably not interacted with the server or it is not possible to communicate with the serve, giving up, error: %{public}@
Attempting to acquire update presence lock with ID: %{public}@
Did acquire lock to update presence
Could not update presence record with error: %{public}@
Failed to acquire the lock again after a retry, the presence record was changed after we got the previous copy, give up.
Failed to acquire the lock again, the presence record was changed after we got the previous copy, try again later.
The presence lock is too old, we are going to try to steal it.
No previous presence record to delete
Deleting previous presence record with ID: %{public}@ to tab: %{public}@
Failed to delete previous presence record with ID: %{public}@, error: %{public}@
Did delete old presence record with ID %{public}@
No need to create a new shared presence record
Did successfully create shared presence record.
Shared presence record already exists, it must have been added somewhere else. Attempt to release the lock.
Failed to create shared presence record, error: %{public}@
Releasing update presence lock with ID: %{public}@
Did successfully release lock private presence record.
Lock private presence record was modified while updating presence, the lock was probably taken away from this device.
Failed to release lock private presence record, error: %{public}@
JSON data could not be decompressed.
JSON data could not be parsed
Unexpected JSON root type, expecting: %{public}@ instead got: %{public}@
Could not save asset with url %{sensitive, mask.hash}@ error: %{public}@
Failed to read from cloud bookmark transformed value data: %{public}@
Failed to decode encrypted data with exception: %{public}@
Cannot verify identity hash of CKRecord with name %{public}@ because its minimumAPIVersion %ld is more recent than the version %ld of the client.
Valid identity hash for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identityHash: %{public}@, components: %{private}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@, components: %{private}@
Failed to instantiate CloudKit settings database!
Record changed: %{private}@
Record of type %{public}@ deleted: <%{public}@>
Fetch records from record zone operation completed for record zone %{public}@
Enqueuing request to fetch records from record zone %{public}@
Number of device in sync circle is 0
Saving CloudSettings zone subscription
Bailing out from saving CloudSettings zone subscription due to deallocation
Saving CloudSettings zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudSettings zone subscription because zone couldn't be created
Saving CloudSettings zone subscription after creating zone
Attempting to save zone subscription for zone: %{public}@
Saving CloudSettings record
Attempting to create CloudSettings zone before retrying save operation
Retrying save operation after creating CloudSettingsZone
Will save merged record
Will retry save with updated batch after error: %{public}@
Retrying save operation
Received batch too large error for an individual record change, bailing out
Attempting to retry save request
Record save retry limit exceeded
Error occurred when deleting records: %{public}@
Clearing cached CloudSettings record zone
Deleting CloudSettings zone
Fetching CloudSettings zone subscription
Failed to fetch CloudSettings zone subscription by ID with error: %{public}@
Successfully fetched CloudSettings zone subscription
Creating CloudSettings zone
Failed to create CloudSettings zone with error: %{public}@
Bailing out of creating CloudSettings zone due to deallocation
Retrying creation of CloudSettings zone
Waiting to retry creation of CloudSettings zone
Successfully created CloudSettings zone
Failed to set up CloudSettings encryption info with error: %{public}@
Successfully set up CloudSettings encryption info
Attempting to save/load record
Successfully saved/loaded record
Failed to save/load record with error: %{public}@
Creating encryption record
Attempting to save/load encryption record
Failed to save/load encryption record due to unrecoverable error: %{public}@
Failed to save/load encryption record due to unexpected and unrecoverable write error: %{public}@
Record zone disappeared while setting up encryption information; bailing
Bailing out from encryption record setup due to deallocation
Encryption record retrieval retry limit exceeded
Moving record %{public}@ into parent record %{public}@
Missing parent record name for bookmark with name %{public}@. Reparenting to root.
Marking record name %{public}@ as moved locally
Attempted to delete built-in record with name: %{public}@, ignoring
Marking record name %{public}@ as deleted
Could not insert record with name %{public}@ in root folder!
Built-in bookmark folder with record name: %{public}@ was moved to parent with record name: %{public}@ instead of root
Could not insert record with name %{public}@ in built-in folder %{public}@!
Could not insert record with name %{public}@ in temporary folder!
Trying to move existing record with name %{public}@ into parent folder %{public}@ but the record does not exist locally!
Creating built-in folder with record name: %{public}@
The temporary folder contains %ld records that were not marked as deleted or moved to their final location. Record names: %{public}@
Record with name %{public}@ does not have a parent even though it was checked right before
Failed to insert %{public}@ into the root folder and for some reason the parent folder does not exist or creates a cycle!
Did finish checking hierarchy consistency, will move remaining records into their final location
Will move record %{public}@ into parent %{public}@
Could not move %{public}@ into folder %{public}@ even though all cycles and broken hierarchies should have been detected and fixed beforehand. Moving to the root.
Failed to insert %{public}@ into the root folder after failing to insert it into %{public}@, apparently there is no hierarchy to speak of.
Already verified parent chain fo record with name %{public}@
Checking parent chain of record with name %{public}@
Moved bookmark with record name %{public}@ was actually not saved to the database!
Parent %{public}@ was deleted, reparenting %{public}@
Loop detected, reparenting %{public}@ in list %{public}@
Parent %{public}@ is not in the database, reparenting %{public}@
Fixing order in local storage based on CloudKit positions
Record name %@, position: %@
Reordering children of root folder
Did finish reordering children of root folder
No children to reorder in folder with Server Sync ID: %@
Reordering children of record with Server Sync ID: %{public}@
Did finish reordering children of record with Server Sync ID: %{public}@
Removing %lu local items that were deleted on the server
Migration state value in server record is of type %{public}@ when NSNumber was expected
Migration state server record value (%{public}@) does not match expected state values
Checked in %{public}@ activity
No prior %{public}@ activity was found. Registering a new one
Running %{public}@ activity
Failed to set the activity state to 'Continue'. Deferring %{public}@ activity
Database for manager %lu doesn't exist. Deferring %{public}@ activity
Failed to acquire the sync lock. Deferring %{public}@ activity
Performing %{public}@ activity
Failed to get a valid device identifier to start coordinating migration.
Not migrating because Safari sync is disabled
Cannot read local migration state for migration due to invalid device identifier.
Not migrating because we've already migrated
Will attempt secondary migration
Will attempt primary migration
Failed to acquire lock on the database to read the migration state
Determining eligibility for local-only migration
Cannot determine eligibility for local-only migration due to invalid device identifier.
Bailing out from secondary migration without fetching remote migration info because Safari sync is disabled
Bailing out from secondary migration eligibility determination due to deallocation
Bailing out from secondary migration because Safari sync is disabled
Received an error fetching remote migration state: %{public}@; will attempt to become responsible for migration
Not eligible for local-only migration; will attempt to become responsible for migration
Remote migration pending; will decide whether we are responsible for resuming migration or should preempt the migrator
Performing local-only migration
Attempting to become responsible for migration by pushing state to the server
Cannot become responsible for migration due to invalid device identifier.
Bailing out from primary migration eligibility determination due to deallocation
Failed to become responsible for migration due to unrecoverable error: %{public}@
Failed to become responsible for migration due to CloudKit write error: %{public}@
Record zone unexpectedly deleted or missing; bailing out of primary migration
Migration coordinator retry limit exceeded
Pushed migration state successfully; assuming we are now responsible for migration
Bailing out from primary migration because Safari sync is disabled
Unable to lock backing store; bailing out from primary migration
Failed to push migration state because some other device modified it first; aborting
Cannot resume pending remote migration due to invalid device identifier
Received a migrationInfo with nil device identifier; will continue evaluating eligibility to steal right to migrate
Migration record indicates that we are the migrating device; attempting to resume migration
Not stealing right to migrate since no last modification date was stored in the migration record
Not stealing right to migrate since migration state was updated recently by another device
Deleting existing record zone in preparation for stealing right to migrate
Something went wrong deleting the existing record zone; bailing out: %{public}@
Stealing right to migrate due to migration timeout
Exceeded maximum migration retry limit
Scheduling migration retry
Starting PRIMARY migration
Starting SECONDARY migration
Migration failed with error %{public}@; resetting local and remote migration state
Migration succeeded
Unable to set remote migration state to %lu due to error: %{public}@; resetting local migration state, will attempt retry
Migration coordinator transitioning from state %zd to state %zd
User account changed for iCloud Settings
iCloud Settings syncing not available because user is not signed in
iCloud Settings syncing not available because Safari's dataclass isn't enabled
Sync coordinator will begin syncing
Already synchronizing; ignoring request to sync
Discontinuing sync because account hash differed
Discontinuing sync because Safari sync is disabled or the user is not signed in
Beginning synchronization
Failed to set up Settings Record Zone with error: %{public}@
Stopping fetch of settings
Have not performed a sync down yet; doing so now
Error received while syncing down: %{public}@
Sync coordinator finished sync down
Failed to decode customization sync server change token: %{public}@
Failed to serialize customization sync server change token: %{public}@
Attempting to create CloudSettings zone before retrying fetch
Fetching changes from CloudKit again after creating CloudSettings zone
Failed to create CloudSettings zone when fetching changes with error: %{public}@
Received unsynced Keychain error, but we're already waiting for PCS identities to change.
Received unsynced Keychain error. Observing notification to start fetching Safari settings when PCS identities change
Performing initial StarSky sync down of Safari's settings.
Change token is expired; trying a full sync down.
Sync coordinator failed to sync settings with error: %{public}@
Retrying sync after receiving synchronization request during synchronization
Not retrying sync after receiving synchronization request during sync since previous sync failed
Syncing done, calling completion handler
Ignoring PCS identity change notification because Customization Sync is not waiting for an identity update
Retrying sync after receiving expected PCS identity change notification.
Saving Safari's background image for the current device to CloudKit
Did fail to save the background image with error: %{public}@
Saving setting for the current device to CloudKit
Did fail to save record with error: %{public}@
Saving Per-Site settings for the current device to CloudKit
When merging the Per-Site Setting's value, local and remote generations are equal: %{public}@
When merging the Per-Site Setting's value, the merge occured in favor of the remote record. Saving the remote record in the database and updating Safari.
Save with record name %{public}@ in WBSPerSitePreferencesSQLiteStore did finish with success: %{public}@
Clearing cached Per-Site Settings sync data
Clearing cached Per-Site Settings sync data in WBSPerSitePreferencesSQLiteStore did finish with success: %{public}@
Deleting settings from CloudKit
Did fail to delete record with error: %{public}@
Clearing cached CloudSettings server change token
*** Failed to instantiate CloudKit database!
Fetching user identity
Returning cached user identity
Failed to fetch user identity due to missing zone: %{public}@
Attempting to fetch user record ID
Failed to fetch user record ID with error: %{public}@
Successfully fetched user record ID
Clearing cached record zone
Saving record batch with %zu records and %zu deletes
Bailing out from saving record batch due to deallocation
Failed to save record batch due to missing zone: %{public}@
Failed to save an individual record because the batch was too large and this one exceeded the limit.
Failed to delete an individual record ID because the batch was too large and this one exceeded the limit.
Failed to delete record ID due to CloudKit error which could not be handled: %{public}@
Batch record save operation completed but now retrying updated batch
Failed to save %zu out of %zu records due to batch size limit, try the remaining records again.
Failed to find participant for e-mail address: %{sensitive, mask.hash}@, error: %{public}@
Found participant for e-mail address: %{sensitive, mask.hash}@
Could not find any participant to add to the share, error: %{public}@
Could not fetch zone-wide share record for zone %{public}@, error: %{public}@
Bailing out from fetching subscription due to deallocation
Failed to fetch database subscription by ID %{public}@ with error: %{public}@
Successfully fetched database subscription
Bailing out from modifying subscription due to deallocation
Fetching Bookmarks zone subscription
Bailing out from fetching Bookmarks zone subscription due to deallocation
Failed to fetch Bookmarks zone subscription status due to missing zone: %{public}@
Fetching Bookmarks zone subscription by ID
Failed to fetch Bookmarks zone subscription by ID with error: %{public}@
Successfully fetched Bookmarks zone subscription
Saving Bookmarks zone subscription
Bailing out from saving Bookmarks zone subscription due to deallocation
Failed to save Bookmarks zone subscription due to missing zone: %{public}@
Fetching record changes for Bookmarks zone
Bailing out fetching record changes due to deallocation
Failed to fetch record changes due to missing zone: %{public}@
Deleting record batch of size: %lu
Attempting to delete bookmark zone
Bookmark zone deletion failed with error: %{public}@
Successfully deleted bookmark zone
Preparing bookmarks record zone, invalidateCachedZone: %d, createIfNeeded: %d
Cached record zone already present; nothing to do
Fetching record zone anew from CloudKit
No existing record zone found
Will attempt to set up zone from scratch
Bailing out without setting up zone
Failed to fetch minimum sync API version when setting up record zone; bailing
*** Minimum sync API version is too new (%lu, our current version is %lu)
Creating speculative encryption record
Successfully setup EncryptionInfo record
Failed to retrieve record with ID %{public}@, error: %{public}@
Server already has a record with ID %{public}@, use it instead
Failed to setup record with ID %{public}@ due to unexpected and unrecoverable write error: %{public}@
Failed to setup record with ID %{public}@ due to unrecoverable error: %{public}@
Record zone disappeared while setting up record with ID %{public}@; bailing
Failed to set up record with ID: %{public}@, error: %{public}@
Did successfully delete records with IDs %{public}@
Failed to delete records with IDs %{public}@, error: %{public}@
Failing save of record batch since migration record disappeared
Will attempt to resave migration record due to recoverable error
Failed to save migration record: %{public}@
Batch record save operation completed but failed to save migration record at end of batch save
Attempting to fetch encryption record from CloudKit
Encryption record fetch failed: %{public}@, returning cached  encryption record
Encryption record fetch failed: %{public}@
Starting fetch of remote migration state
Fetch remote migration state failed <%{public}@>.
Fetch migration state failed <%{public}@>.
Failed to set remote migration state due to missing zone: %{public}@
Completed operation to try to set remote migration state to %ld
Failed to set remote migration state to <%li>: %{public}@
Enqueuing request to set remote migration state to %ld
Minimum sync API version fetch operation completed
Fetch minimum sync API version failed <%{public}@>.
Failed to set minimum sync API version due to failure to set up record zone: %{public}@
Completed operation to try to set minimum sync API version to %ld
Failed to set minimum sync API version to <%li>: %{public}@
Enqueuing request to set minimum sync API version to %ld
Attempting to save new record zone
Failed to set up new record zone: %{public}@
Successfully set up new record zone
Someone deleted the migration record during migration with error: %{public}@
Migrator device identifier changed
Migrator device identifier changed from %@ to %@
Migration state changed from %ld to %ld
Internal-only -fetchAllBookmarkRecordsWithCompletionHandler: called!
Unable to create CloudExtensionState from dictionary: %{private}@
Attempting to start synchronization
Discontinuing sync because a retry has already been scheduled
Discontinuing sync because user is not signed in
Could not create BADatabase to synchronize
Device identifier is empty
Trying to open database after another client already did
Reading migration state %lu
Discontinuing sync since local migration has not yet completed, migration state: %lu
Discontinuing sync since local migration state cannot be read
Database sync data is unreadable, reset all sync data and attempt a migration again
Discontinuing sync because bookmarks Safari sync is disabled
Failed to set up Bookmarks Record Zone with error: %{public}@
Failed to fetch (or received invalid) remote migration state record with error: %{public}@
Scheduling retry #%d in %.1fs.
Discontinuing sync after attempting maximum number of retries
*** Resetting sync data
Bookmark Store setup done, opening database and processing changes
Failed to open database after finishing sync coordinator setup
Records were not saved locally, attempt merging to generate Add changes
Finish syncing
Sync coordinator failed to sync bookmarks with error: %{public}@
Database is unlocked despite having unlocked it before entering this method
Number of processed changes %lu, locally moved records: %lu, change token: %{public}@
Performing hierarchy check for moved records, number of moved records: %lu, number of deleted records: %lu
Discontinuing sync because bookmarks dataclass was disabled during sync
Done saving all record changes
Record %{public}@ was deleted remotely
Did fail to save record batch with error: %{public}@
Performing sync down with last server change token: %{public}@
Did finish fetching records between server change token: %{public}@ and server change token: %{public}@
None of the %ld records sent to be saved to the server were received on sync down. Missing records: %{public}@
Did not receive %ld records on sync down out of the %ld records sent to be saved. Missing records: %{public}@
Did receive %ld records in current sync down that were supposed to be retrieved in the previous one. Received records: %{public}@
Successfully completed full sync down after expired change token error
Record %@ was not seen during sync down after expired change token error; marking it for deletion
Record %@ has MinimumAPIVersion %lu and will be deleted locally
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server before.
Record %@ does not exist locally and is deleted remotely
Has unsaved changes; saving next batch.
Unrooted moved bookmarks are present; will reparent
Error while copying asset. Error description: %@
Sync migration converter beginning migration
Saving bookmarks
Sync migration converter finished migration and sync down
Begin performing sync down while merging records
Did fail to perform merging sync down with error: %{public}@
Did finish merging sync down, temporarily reparent and sort records in case we have cycles or unrooted records in the hierarchy
Did finish reparenting, perform deduplication keeping records with sync data
Did finish deduplication keeping records with sync data, begin converting and saving remaining records
Failed to convert local records with error: %{public}@
Did finish converting and saving remaining records
Perform post-migration sync down
Failed to sync down after migration: %{public}@
Zone deleted during migration conversion; bailing
Bailing from sync down due to deallocation with error %{public}@
Sync migration converter retry limit exceeded
None of the %ld records saved to the server were retrieved on sync down. Missing records: %{public}@
Did finish post-migration sync down
Performing post-migration moved records verification
No records need to be reparented
Did fail to reparent unrooted bookmarks after migration with error: %{public}@
Did finish reparenting unrooted records
Failed to get iCloud Tabs database URL, falling back to in-memory database
Received PCS change notification with state %ld
Ignoring PCS state change notification because it is the same as the current state %ld
Determining CloudTab sync coordinator in response to PCS change notification with state %ld
Determined PCS state to be %ld
Instantiating sync coordinator using PCS state %ld
Failed to read whether to use PCS cloud container for syncing with sqlite error code %d
CloudTabs database has PCS container sync properties
CloudTabs database has normal container sync properties
Database should not be reset because it's using the correct container
CloudTabs database needs to reset because sync properties are not compatible with PCS state %ld
Finished resetting CloudTabs database
Ignoring PCS identity change notification because CloudTabs is not waiting for an identity update
Received expected PCS identity change notification
Informing delegate of a PCS identity change
Received PCS unavailable error from CloudKit. Marking PCS state needs updating
Received unrecoverable PCS error %ld from CloudKit. Deleting the CloudTabs zone and creating a new one
Received unsynced Keychain error. Observing notification to start fetching CloudTabs when PCS identities change
Performing a fetch to fulfill request from %ld outstanding callers
Fetching local migration state from database (isMigrating: %d)
Setting local migration state in database to %ld (isMigrating: %d)
Sync migration coordinator starting PRIMARY migration
Sync migration coordinator starting SECONDARY migration
Sync migration coordinator failed due to migration unexpectedly being in progress
Database was already open by another client, could not open database
Begin performing first deduplication
Did finish performing first deduplication
Starting migration conversion as primaryMigrator = %d
Migration conversion failed with error: %{public}@
Migration conversion succeeded
Sync migration coordinator did fail to migrate with error: %{public}@
Sync migration coordinator did finish migrating.
Sync migration post-processing handler called
Did finish migration, perform last deduplication
Did finish last deduplication
Failed to fetch remote migration state with error: %{public}@
Failed to serialize bookmarks JSON with error: %{public}@
Change for item with server ID %{private}@ is neither bookmark nor folder.
Fetching CloudTabs zone subscription
Failed to fetch CloudTabs zone subscription by ID with error: %{public}@
Successfully fetched CloudTabs zone subscription
Saving CloudTabs zone subscription
Bailing out from saving CloudTabs zone subscription due to deallocation
Saving CloudTabs zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudTabs zone subscription because zone couldn't be created
Saving CloudTabs zone subscription after creating zone
Attempting to create CloudTabs zone before retrying save
Retrying save after creating CloudTabsZone
Deleting CloudTabs zone
Failed ot delete CloudTabs zone with error: %{public}@
Successfully deleted CloudTabs zone
Creating CloudTabs zone
Failed to create CloudTabs zone with error: %{public}@
Bailing out of creating CloudTabs zone due to deallocation
Retrying creation of CloudTabs zone
Waiting to retry creation of CloudTabs zone
Successfully created CloudTabs zone
Error serializing sync events plist data: %{public}@
Error reading sync events plist data: %{public}@
Beginning conversion of folder contents
Did fail to migrate record hierarchy with error: %{public}@
Did finish migrating folder contents
Record %{public}@ has no position and needs saving in folder %{public}@
Found record %{public}@ with position %{public}@ after record %{public}@ with position %{public}@, folder %{public}@ should have been sorted before!
Found record with name %{public}@ after %ld records which do not have a position defined yet
Batch of size %lu with %lu records is full for %@
No more records to save.
Merging record %{public}@ with result %{public}@ indicates that the local record needs to be undeleted during migration. Migration never attempts to delete remote records before the last de-duplication phase.
Failed to delete legacy Tab Groups subscription with error: %@
 Starting TabGroups sync for manager %{public}@ with trigger: %{public}@
 TabGroups sync failed for manager %{public}@ with result <Aborted>
 Starting TabGroups sync for manager %{public}@ with %{public}@
Received unsynced Keychain error. Observing notification to start syncing Tab Groups when PCS identities change.
 TabGroups sync failed for manager %{public}@ with result <%{public}@>: %{public}@, %{public}@
 TabGroups sync finished for manager %{public}@ with result: %{public}@, %{public}@
Ignoring PCS identity change notification because Safari Tab Groups Sync is not waiting for an identity update
Received expected PCS identity change notification. Syncing Tab Groups.
Sending notification of tab group sync result: %{public}zu
Ignoring CKShareMetadata because it is not part of the Tab Groups container: %{public}@
* Will accept share with zone %{public}@, metadata %@, %{public}@
* Failed to accept share with zone %{public}@, metadata %@, error: %{public}@, %{public}@
* Did accept share with zone %{public}@, metadata %@, %{public}@
* Will begin sharing tab group with UUID: %{public}@, with %{public}@
* Did successfully begin sharing tab group with UUID: %{public}@, in shared zone: %{public}@, %{public}@
* Failed to begin sharing tab group with UUID: %{public}@, result: %{public}@, error: %{public}@, %{public}@
Will update user's presence to tab
Could not find tab for UUID: %{public}@
Tab with UUID %{public}@ and recordID %{public}@ is not in a shared tab group, ignoring
Will begin accepting share
Processing local tab operation
Failed to acquire local tab collection lock
Failed to open local tab database
Failed to open tab database
Failed to acquire tab collection lock
Scheduling a tab group sync operation
Saving reparented records
Saving reparented records with record names: %@
Did fail to save reparented records with error: %{public}@
Did finish saving reparented records
Sync down handler starting sync, keep records marked as deleted locally = %d
Sync down handler did fail sync down with with error: %{public}@
Sync down handler did succcessfully sync down
Sync down handler fetching record changes from server change token: %{public}@
Canceling migration sync-down because Safari sync is disabled
Zone deleted during migration sync-down; bailing
Bailing out from sync down due to deallocation with error %{public}@
Sync down handler retry limit exceeded
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server during migration.
Record %{public}@ does not locally exist and cannot be saved locally because of its minimum API version
Record %{public}@ does not exist locally and is deleted remotely
Writing locally record %{public}@ despite the record not existing locally and being deleted remotely for merging
Failed to delete device or extension state: %{public}@ (%d)
Failed to create the cloud_extension_devices table: %{public}@ (%d)
Failed to create the cloud_extension_states table: %{public}@ (%d)
Failed to create the index for cloud_extension_states table: %{public}@ (%d)
Failed to create the metadata table: %{public}@ (%d)
Failed to execute query when resetting database schema: %{public}@ (%d)
Opening iCloud Extensions SQLite database
Failed to open iCloud Extensions store at %{private}@: %{public}@
Failed to exclude CloudExtensions.db from backup: %{public}@
Failed to enable WAL on CloudExtensions.db: %{public}@
Failed to enable foreign keys on iCloud Extensions store: %{public}@ (%d)
Failed to enable secure delete on iCloud Extensions store: %{public}@ (%d)
iCloud Extensions store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Closing iCloud Extensions SQLite database
Removing iCloud Extensions store file
Failed to remove iCloud Extensions store file at %{private}@: %{public}@
Recreating iCloud Extensions store file after removing it
Failed to set the database schema version to %d: %{public}@ (%d)
Failed to update metadata value %{public}@: %{public}@ (%d)
Failed to insert metadata value %{public}@: %{public}@ (%d)
Failed to delete metadata value for key %{public}@: %{public}@ (%d)
Failed to vacuum database: %{public}@ (%d)
Found a device without a UUID in the database.
Found a device without system fields in the database.
Failed to insert or replace device: %{public}@ (%d)
Found an extension state without a composedIdentifier in the database.
Found an extension state without system fields in the database.
Failed to insert or replace extension state: %{public}@ (%d)
Processing %lu changes with changeToken: %@
Add change %{public}@ was provided without a corresponding changed item.
Move change %{public}@ was provided without a corresponding changed item.
Moved item %{public}@ for change %{public}@ did not have a record ID.
Attempted to delete built-in record with name: %{public}@, ignoring.
Attempting to check database open state from a background thread
Attempting to retrieve the database from a background thread
Attempting to retrieve the backing store lock from a background thread
%{public}@ attempting to lock backing store
%{public}@ backing store was already locked
%{public}@ successfully locked backing store
%{public}@ failed to lock backing store
Attempting to unlock the backing store from a background thread
Trying to unlock the database despite the database being already unlocked
%{public}@ did not unlock backing store due to outstanding lock requests
%{public}@ is unlocking the database even though the database is still open
%{public}@ unlocked backing store
Attempting to retrieve the migration state from a background thread
Fetching local migration state from database (isDatabaseLocked: %d, isDatabaseOpen: %d)
Fetched local migration state %ld from database
Attempting to set the migration state from a background thread
Setting local migration state in database to %ld (isDatabaseLocked: %d, isDatabaseOpen: %d)
Attempting to open the database from a background thread
Attempted to open the database without acquiring the lock first.
Attempted to open the database even though it is already open.
Will open the database
Attempting to close the database from a background thread
Attempted to close the database without acquiring the lock first (shouldSave: %d
Attempted to close the database without opening it first (shouldSave: %d
Did close database, did save %d
Failed to delete device, tab, or close request: %{public}@ (%d)
Failed to create the cloud_tab_devices table: %{public}@ (%d)
Failed to create the cloud_tabs table: %{public}@ (%d)
Failed to create the index for cloud_tabs table: %{public}@ (%d)
Failed to create the cloud_tab_close_requests table: %{public}@ (%d)
Opening iCloud Tabs SQLite database
Failed to open iCloud Tabs store at %{private}@: %{public}@
Failed to exclude CloudTabs.db from backup: %{public}@
Failed to enable WAL on CloudTabs.db: %{public}@
Failed to enable foreign keys on iCloud Tabs store: %{public}@ (%d)
Failed to enable secure delete on iCloud Tabs store: %{public}@ (%d)
iCloud Tabs store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Closing iCloud Tabs SQLite database
Removing iCloud Tabs store file
Failed to remove iCloud Tabs store file at %{private}@: %{public}@
Recreating iCloud Tabs store file after removing it
Found a tab without a UUID in the database.
Found a tab without system fields in the database.
Found a tab without a position dictionary in the database.
Couldn't create a tab's position from the position dictionary in the database.
Found a tab without a URL in the database.
Failed to insert or replace tab: %{public}@ (%d)
Found a close request without a request UUID in the database.
Found a close request without system fields in the database.
Found a close request without a destination device UUID in the database.
Found a close request without a tab URL in the database.
Found a close request without a tab UUID in the database.
Failed to create a CloudTabCloseRequest from the database.
Failed to insert or replace close request: %{public}@ (%d)
Deleting the iCloud Tabs database
User account changed for iCloud Tabs
iCloud Tab syncing not available because user is not signed in
iCloud Tab syncing not available because Safari's dataclass isn't enabled
Saving tabs for the current device to CloudKit
No iCloud Tab device found to save
Stopping save of tabs for current device
Merging device with existing device in SQLite database
Saving iCloud Tab record batch of size: %lu
Did fail to save iCloud Tab record batch with error: %{public}@
Finished saving iCloud Tab record batch
Deleting obsolete tab records from CloudKit
No obsolete tab records need to be deleted from CloudKit
Failed to delete obsolete tab records with error: %{public}@
Done deleting obsolete tab record from CloudKit
Updating SQLite store from CloudKit after saving tabs
Updating SQLite store from CloudKit after saving tabs failed with error: %{public}@
Done updating SQLite store from CloudKit after saving tabs
Finished saving tabs for the current device to CloudKit
Saving close request to CloudKit
No close request found to save
Stopping save of close requests
Did fail to save iCloud Tab record batch with close requests with error: %{public}@
Successfully saved close request to CloudKit
Updating SQLite store from CloudKit after saving close request
Updating SQLite store from CloudKit after saving close request failed with error: %{public}@
Done updating SQLite store from CloudKit after saving close request
Finished saving close request to CloudKit
Fetching iCloud Tab data from CloudKit
Stopping fetch of tabs
Attempting to create CloudTabs zone before retrying fetch
Fetching changes from CloudKit again after creating CloudTabs zone
Failed to create CloudTabs zone when fetching changes with error: %{public}@
No modified devices, tab records, or close requests to save to SQLite
Saving %lu device records, %lu tab records, and %lu close requests to SQLite
Failed to save modified device, tab, and close request records to the SQLite database with error: %d
Finished saving modified device, tab, and close request records to the SQLite database
Skipping loading devices, tabs, and close requests from SQLite
Loading devices, tabs, and close requests from SQLite
Finished loading devices, tabs, and close requests from SQLite
Finished fetching iCloud Tab data from CloudKit
Fetched an invalid iCloud Tab device record from CloudKit
Fetched an invalid iCloud Tab tab record from CloudKit
Fetched an invalid iCloud Tab close request record from CloudKit
Deleting devices from CloudKit
No devices to delete
Deleting close requests from CloudKit
No close requests to delete
Stopping deletion of records
Deleting records from CloudKit
Failed to delete records with error: %{public}@
Done deleting records from CloudKit
Updating SQLite store from CloudKit after deleting records
Updating SQLite store from CloudKit after deleting records failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting records
Finished deleting records from CloudKit
Sync coordinator received a message to delete the CloudTabs zone
Sync coordinator successfully deleted CloudTabs zone and local database
Prepare records for migration
Number of records prepared for migration: %ld
Convert built-in record with recordName %{public}@ for migration
Record of type %ld has built-in record name %{public}@ despite not being a built-in folder, generating a new record name
Convert new local record with created recordName %{public}@ for migration
Already converted record with recordName %{public}@ for migration
Convert Bookmark DAV record with recordName %{public}@ for migration
Trying to generate DAV server ID for bookmark with local ID %{public}@, but that bookmark doesn't exist
Received nil set of child local IDs for folder with local ID %{public}@ while generating DAV server IDs
Clearing referenced record with generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Did find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Could not find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Overriding previous referenced record : %{public}@ generation: %{public}@ with referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Cannot apply reference: %{public}@ with generation: %{public}@ to attribute %{public}@ of record name: %{public}@ because the item is missing locally.
No references to apply
Sync coordinator begins setting up local store
Could not allocate collection.
Sync coordinator did finish setting up local store
Discontinuing sync because device identifier is empty
No associated records for UUID %{public}@
Bookmark with UUID %{public}@ does not represent a sharable tab group, actual type: %{public}@
Sync coordinator will begin sharing tab group %{public}@ with record name: %{public}@
Did finish checking whether to create a legacy tab group, should create placeholder: %{public}@.
Could not set up shared tab group zone with error: %{public}@
Did finish setting up shared secondary tab group zone, with result: %{public}@
Did finish saving migration tombstones and checking whether to create a legacy tab group but we do not need to create the placeholder.
Will begin creating legacy placeholder tab group
Did fail to create legacy placeholder tab group with error: %{public}@
Did successfully create legacy placeholder tab group
Will begin saving migration tombstones to the default zone
Failed to save migration tombstones to the default zone error: %{public}@
Did finish saving migration tombstones to the default zone
Will begin saving records to the new zone %{public}@
Did fail to save records to the new zone %{public}@
Did finish saving records to the new zone %{public}@
Will save CKShare record to the new zone %{public}@
CloudTabGroupSyncCoordinator got deallocated while migrating the share.
Failed to save CKShare record to the new zone %{public}@, error: %{public}@
Did save CKShare record to the new zone %{public}@
Perfoming sync down of the new zone %{public}@
Failed sync down records for new zone %{public}@, error: %{public}@
Did finish sync down of the new zone %{public}@
Saving record with ID: %{public}@, data: %{sensitive}@
Record with ID %{public}@ is already in a tab group specific zone and does not need to be moved
Record with ID %{public}@ is neither in the default zone to become a tombstone or in the destination zone %{public}@
Attempting to accept share for shareURL %{sensitive, hash.mask}@
Did fetch share metadata for shareURL %{sensitive, hash.mask}@, %{sensitive, mask.hash}@
Failed to fetch CKShareMetadata record for URL %{sensitive, mask.hash}@
Successfully accepted share for shareURL: %{sensitive, mask.hash}@
Will perform sync down of zone %{public}@
Did fail to perform sync down of zone %{public}@ for shareURL %{sensitive, mask.hash}@
Successfully performed sync down for zone %{public}@ of shareURL %{sensitive, mask.hash}@
Failed to fetch CKShare record for metadata %{sensitive, mask.hash}@
Will load last known minimum OS version in circle cache.
Cache for last known minimum OS version in circle is still valid. Should create placeholder tab: %@
Cache for last known minimum OS versions in circle is no longer valid; fetching metadata.
A device with an older iOS version is still in the circle, require shared tab groups.
A device with an older macOS version is still in the circle, require shared tab groups.
Did update last known minimum OS versions in circle.
Will begin building next updated records batch
Ignoring change lacking record with token %zu
Adding record with name: %{public}@ to batch, data: %{sensitive}@
Failed to delete recordZoneID batch with error: %{public}@
Done deleting recordZoneID batch.
Failed to save record batch with error: %{public}@
Done saving record batch, posting highlights to Messages
Done saving record batches, clearing changes during or before generation %{public}zu
Deleting recordZoneID batch of size: %zu
Failed to delete zone with ID: %{public}@, error: %{public}@
Failed to delete record zone ID batch with error: %{public}@
Saving record batch of size: %zu, number of deleted records: %zu to database: %{public}@
Resolving merge conflict for record with name: %{public}@
Will begin building next batch of deleted auxiliary records
Sync coordinator did finish deleting auxiliary records
Failed to delete record batch in private database with error: %{public}@
Failed to delete record batch in shared database with error: %{public}@
Done deleting auxiliary record batches, clearing records in sync data
Did fetch record with name: %{public}@, data: %{sensitive}@
Ignoring record of type %{public}@ with ID %{public}@, because it is a placeholder record
Ignoring record of type %{public}@ with ID %{public}@, because it is a child record of a placeholder with ID %{public}@
Bookmark with server ID %{public}@ is not inserted
Bookmark with server ID %{public}@ is deleted
Bookmark with server ID %{public}@ uses a more recent API version (%zu), then supported (%zu)
Parent bookmark with server ID %{public}@ not found, moving to recovered bookmarks
Scoped bookmark changes should have a valid tab group.
Shared tab group changes should have a valid parent bookmark.
Updating share record for zone: %{public}@
Deleting share record for tab group: %{public}@
Did receive presence record with ID %{public}@ for participant: %{public}@, tabRecordName: %{public}@, isExpired: %d
Did receive presence record deletion with ID %{public}@
Will begin sync down
Performing sync down with last server change token in private database: %{public}@
Performing sync down with last server change token in shared database: %{public}@
Primary record zone has disappeared, we need to migrate again.
Found %lu zones deleted in database %{public}@, deleting local records.
Found no zones to update in database %{public}@
Found %lu zones with IDs %{public}@ updated in database %{public}@, fetching records
Performing sync down for record zone IDs %{public}@ in database: %{public}@, configurations: %{public}@
Did receive record delete for record %{public}@, type: %{public}@
Did finish receiving record changes from zone %{public}@
Failed to sync down records with error: %{public}@, per record zone errors: %{public}@
Did finish sync down for record zone IDs %{public}@, configurations: %{public}@
Record %{public}@ was not seen during sync down after expired change token error; marking it for deletion
Failed to save asset with error: %{public}@
Error while copying asset. Error description: %{public}@
Record %{public}@ was changed remotely
Creating new bookmark
Failure to get a collaboration highlight with error %{public}@ for the CKShare: %{public}@ %{private}@
SafariBookmarksSyncAgent
APSConnectionDelegate
NSObject
CloudExtensionStore
SafariSyncControllerConnectionHandling
WBSSafariBookmarksSyncAgentProtocol
WBSCyclerCloudBookmarksAssistant
WBTabGroupSyncAgentProtocol
WBSSafariSyncServiceProtocol
SafariSyncController
CloudBookmarkDatabaseLockArbiterDelegate
CloudTabSyncArbiterDelegate
NSXPCListenerDelegate
CloudTabGroupSyncManagerDelegate
CloudSettingSyncCoordinatorDelegate
AppleAccountInformationProvider
WBSAppleAccountInformationProviding
CloudTabGroupExpiredChangeTokenHandler
CloudBookmark
SafariBookmarksSyncExtras
CloudTabGroupBatchItem
CloudExtensionSyncCoordinator
CloudExtensionSQLiteStoreDelegate
CloudBookmarkDebugHierarchyChecker
CloudBookmarkAccountPropertiesStore
CloudTabGroupPresenceUpdater
CloudBookmarkCompressedJSONValueTransformer
CloudBookmarkDatabaseHandler
CloudBookmarkUpdater
CloudBookmarkCKReferenceValueTransformer
CloudBookmarkEncryptedObjectValueTransformer
CloudBookmarkWBSHashGeneratorExtras
CloudSettingStore
CloudBookmarkMovedBookmarkManager
CloudSettingsSyncEngineAccessProvider
CloudBookmarkAttributeValueTransformer
CloudExtensionsExtras
CloudBookmarksExtras
CloudBookmarksFetchResult
CloudTabGroupMaintenanceActivity
CloudBookmarksMigrationCoordinator
CloudBookmarkExpiredChangeTokenHandler
CloudTabCloseRequest
NSCopying
CloudBookmarkDatabaseAccessProvider
CloudBookmarkItemConfiguration
CloudSettingSyncCoordinator
CloudBookmarkStore
CloudBookmarkStoreUserDefaultsStorage
CloudBookmarkStoreLocalStorage
CloudExtensionState
CloudTabGroupAccountPropertiesStore
CloudBookmarkSyncCoordinator
WBSCRDTPositionGeneratorDelegate
CloudBookmarkSyncMigrationConverter
CloudBookmarkSyncMigrationSaveHandlerDelegate
CloudBookmarkSyncMigrationSyncDownHandlerDelegate
CloudTabGroupSyncEvent
CloudBookmarkCKOperationGroupExtras
CloudTabSyncArbiter
CloudTabSyncProtocol
CloudTabLocalStoreShim
CloudTabLocalStore
CloudTabLocalStoreDelegate
CloudBookmarkSyncMigrationCoordinator
CloudBookmarksDiagnostics
CloudBookmarkCKAssetValueTransformer
CloudTabRemoteStore
CloudTabGroupSyncDebugger
CloudTabGroupSyncCoordinatorObserving
CloudBookmarkSyncMigrationFolderContentConverter
CloudBookmarkSyncMigrationPositionGenerator
_CloudBookmarkSyncMigrationPositionGeneratorEnumerator
CloudBookmarkSyncMigrationSaveHandler
CloudTabGroupSyncManager
CloudTabGroupSyncCoordinatorDelegate
CloudTabGroupMaintenanceActivityDelegate
CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler
CloudBookmarkSyncMigrationSyncDownHandler
CloudExtensionSQLiteStore
WBSSQLiteDatabaseDelegate
CloudBookmarkChangeProcessor
CloudBookmarkDatabaseLockArbiter
CloudBookmarkDatabaseCoordinating
CloudBookmarkWindowsCompatibleStringValueTransformer
CloudBookmarkWindowsCompatibleURLValueTransformer
CloudBookmarkURLIdentityHashValueTransformer
CloudExtensionDevice
CloudTab
CloudKitSQLiteStore
CloudTabDevice
CloudTabsExtras
CloudTabSQLiteStore
CloudTabSyncCoordinator
CloudBookmarkSyncMigrationHierarchyConverter
CyclerCloudBookmarksAssistant
CloudBookmarkPendingReferenceManager
CloudTabGroupBatch
CloudTabGroupSyncCoordinator
CloudRemoteStore
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v24@0:8@16
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v20@0:8B16
v16@0:8
@"APSConnection"
@24@0:8@16
v32@0:8@16@?24
v44@0:8@16B24@28@?36
v40@0:8@16@24@?32
v56@0:8@16@24@?32@?40@?48
v64@0:8@16@24@32@40@48@?56
v56@0:8@16@?24@?32@40@?48
v64@0:8@16@24@?32@?40@48@?56
@32@0:8@16@?24
@"CKDatabase"
@"CKRecordZone"
@"NSOperationQueue"
@"NSObject<OS_dispatch_queue>"
@"CKContainer"
v24@0:8@?16
v28@0:8B16@?20
v24@0:8@?<v@?@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
v24@0:8q16
v36@0:8@16B24@?28
v24@0:8@?<v@?q@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData">16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"NSArray"@"NSArray"@"NSError">16
v24@0:8@?<v@?B>16
v32@0:8@"NSDictionary"16@?<v@?>24
v36@0:8@"NSURL"16B24@?<v@?>28
v24@0:8@?<v@?>16
v40@0:8@"NSDictionary"16@"NSDictionary"24@?<v@?@"NSError">32
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSDictionary"@"NSArray"@"NSError">16
v48@0:8@16@24@32@?40
v24@0:8@"<WBTabGroupSyncAgentSyncObserver>"16
v24@0:8@"CKShareMetadata"16
v32@0:8@"NSString"16@?<v@?@"CKShare"@"NSError">24
v40@0:8@"NSURL"16@"NSData"24@?<v@?@"CKShare"@"NSError">32
v24@0:8@"NSString"16
v32@0:8@"WBBrowserState"16@?<v@?B@"NSError">24
v32@0:8@"WBTabGroup"16@?<v@?B@"NSError">24
v40@0:8@"WBTabGroup"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v48@0:8@"NSArray"16@"WBTabGroup"24@"WBTab"32@?<v@?B@"NSError">40
v32@0:8@"WBTab"16@?<v@?B@"NSError">24
v40@0:8@"NSArray"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"WBWindowState"16@?<v@?B@"NSError">24
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
v24@0:8@"CloudBookmarkDatabaseLockArbiter"16
@28@0:8@16B24
@"CKContainer"28@0:8@"CloudTabSyncArbiter"16B24
v24@0:8@"CloudTabSyncArbiter"16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
B24@0:8@"CloudTabGroupSyncManager"16
v24@0:8@"CloudTabGroupSyncManager"16
v32@0:8@"CloudTabGroupSyncManager"16@"NSSet"24
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecord"24
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecordID"24
v24@0:8@"CloudSettingSyncCoordinator"16
v48@0:8@"CloudSettingSyncCoordinator"16@"NSData"24@"NSString"32@?<v@?B>40
@24@0:8q16
v40@0:8q16@24@?32
v40@0:8@16q24@?32
@32@0:8@16@24
v44@0:8r*16@24B32@?36
d32@0:8q16@24
v48@0:8Q16@24@32@?40
v48@0:8B16B20Q24q32q40
v48@0:8Q16Q24@32@?40
v32@0:8@16q24
@"ACAccountStore"
@"<WBSBookmarkDBAccess>"
@"CloudBookmarkStore"
@"NSXPCListener"
@"NSTimer"
@"NSDate"
@"NSObject<OS_os_transaction>"
@"WBSDiagnosticStateCollector"
@"CloudBookmarkDatabaseLockArbiter"
@"CloudBookmarkSyncMigrationCoordinator"
@"CloudBookmarksMigrationCoordinator"
@"CloudBookmarkSyncCoordinator"
@"NSObject<OS_dispatch_source>"
@"CyclerCloudBookmarksAssistant"
@"NSMutableSet"
@"NSUserDefaults"
@"CloudTabSyncArbiter"
@"CloudSettingStore"
@"CloudSettingSyncCoordinator"
@"<WBSSettingsSyncEngineAccess>"
@"NSMutableDictionary"
@"NSString"
@"NSMutableArray"
@"CloudExtensionStore"
@"CloudExtensionSyncCoordinator"
@"CloudTabGroupSyncManager"
@"WBTabCollection"
v24@0:8@?<v@?q>16
q16@0:8
@"WebBookmarkCollection"
@40@0:8@16^v24@32
@48@0:8@16^v24@32@40
v40@0:8^v16@24@32
@40@0:8^v16@24@32
@56@0:8@16@24^v32@40@48
v56@0:8@16@24^v32@40@48
@48@0:8^v16@24@32@40
@48@0:8r^v16@24@32@40
B32@0:8^v16@24
@32@0:8@16^B24
v32@0:8^v16@24
B48@0:8@16@24@32@40
Q32@0:8@16@24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16^B24
r^v16@0:8
@"WBBookmarkSyncData"
@"CloudBookmarkItemConfiguration"
@40@0:8@16@24@32
@48@0:8@16@24@32@40
@"WBChangeRecord"
@"NSSet"
v32@0:8@"CloudExtensionSQLiteStore"16@"NSError"24
@"CloudExtensionSQLiteStore"
@"CKOperationGroup"
@"CloudExtensionDevice"
@"CKRecord"
@"NSArray"
@"NSError"
@"CKServerChangeToken"
q24@0:8@16
B24@0:8^v16
B40@0:8^v16@24B32B36
@"<CloudBookmarkDatabaseCoordinating>"
v44@0:8@16@24B32@?36
v60@0:8@16@24@32@40B48@?52
v52@0:8@16@24@32B40@?44
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"CKRecordID"
@24@0:8#16
@"NSData"24@0:8@"NSArray"16
@"WBSCRDTPosition"24@0:8@"NSString"16
B48@0:8@"CKReference"16@"WBSCRDTGeneration"24@"NSString"32@"NSString"40
v40@0:8@"NSURL"16@"NSURL"24@?<v@?@"NSError">32
@"CKRecordZoneID"16@0:8
@"NSArray"16@0:8
@"CloudBookmarkAccountPropertiesStore"
@32@0:8@16Q24
@"CKRecordZoneID"
v56@0:8@16@24@32@40@?48
v60@0:8@16B24@28@36@?44@?52
v56@0:8@16@24@32@?40@?48
v64@0:8@16@24@32@40@?48@?56
@"WBSHashGenerator"
@32@0:8^v16@24
@28@0:8B16^@20
@24@0:8^@16
B32@0:8@16^@24
@32@0:8@16^@24
v24@0:8^@16
B24@0:8q16
B28@0:8@16B24
@32@0:8q16@24
v24@0:8Q16
@"NSData"
@"WBCollectionConfiguration"
@"<CloudTabGroupMaintenanceActivityDelegate>"
d16@0:8
v36@0:8B16@20@?28
@32@0:8@16^v24
@24@0:8Q16
@64@0:8@16@24@32@40@48@56
@24@0:8^{_NSZone=}16
@88@0:8q16q24@32@40@48@56@64@72@?80
@?16@0:8
@"NSDictionary"
@"NSOrderedSet"
v28@0:8B16@20
@"<CloudSettingSyncCoordinatorDelegate>"
@40@0:8q16@24@32
@32@0:8@16q24
v48@0:8@16@24@?32@?40
v80@0:8@16@24@32@40@?48@?56@?64@?72
v80@0:8@16@24@32@40@48@56@?64@?72
v40@0:8B16B20@24@?32
v72@0:8@16@24@32@40@48@?56@?64
v40@0:8@?16@?24@?32
v48@0:8@16@?24@?32@?40
v48@0:8q16@24@32@?40
v32@0:8Q16@?24
@"NSObject<OS_os_log>"
@"<CloudBookmarkStoreLocalStorage>"
@"NSData"16@0:8
v24@0:8@"NSData"16
@112@0:8@16@24@32@40@48B56B60@64@72@80@88@96@104
@"NSString"24@0:8@"WBSCRDTPositionGenerator"16
q24@0:8@"WBSCRDTPositionGenerator"16
@"WBSCRDTPosition"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@"NSString"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@32@0:8^@16@?24
@"CloudBookmark"
@"WBSCRDTPosition"
@"CloudBookmarkMovedBookmarkManager"
@"CloudBookmarkPendingReferenceManager"
@"WBSCRDTPositionGenerator"
@"CloudBookmarkExpiredChangeTokenHandler"
B56@0:8@16@24@32@40@48
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"NSString"24
B32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
B56@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"NSString"24
B56@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
@"CloudBookmarkSyncMigrationFolderContentConverter"
@"CloudBookmarkSyncMigrationSyncDownHandler"
@"CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler"
@40@0:8@16q24@32
v32@0:8q16@?24
@"CloudTabSQLiteStore"
@"CloudTabRemoteStore"
@"CloudTabSyncCoordinator"
@"CloudTabLocalStoreShim"
@"WBSCloudKitContainerManateeObserver"
@"<CloudTabSyncArbiterDelegate>"
v24@0:8@?<v@?@"NSArray"@"NSArray">16
v32@0:8@"NSString"16@?<v@?@"CloudTabDevice">24
v32@0:8@"NSArray"16@?<v@?i>24
v48@0:8@"NSArray"16@"NSArray"24@"NSArray"32@?<v@?i>40
v32@0:8@"NSData"16@?<v@?i>24
v24@0:8@?<v@?Bi>16
v28@0:8B16@?<v@?i>20
@"<CloudTabLocalStoreDelegate>"16@0:8
v24@0:8@"<CloudTabLocalStoreDelegate>"16
v24@0:8@"<CloudTabLocalStore>"16
v32@0:8@"<CloudTabLocalStore>"16@"NSError"24
@"<CloudTabLocalStoreDelegate>"
@"<CloudTabLocalStore>"
v44@0:8B16@20@?28@?36
@"CloudBookmarkSyncMigrationConverter"
@24@0:8^v16
v56@0:8^v16@24^q32^q40@48
v24@0:8@"CloudTabGroupSyncCoordinator"16
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSDictionary"24
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSArray"24
v32@0:8@"CloudTabGroupSyncCoordinator"16@"CKRecord"24
@"CloudTabGroupSyncEvent"
@"CloudBookmarkSyncMigrationPositionGenerator"
@"NSEnumerator"
@48@0:8@16@24^@32^@40
@48@0:8@16@24@32q40
@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>"
v56@0:8@16@24@32@40@48
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSSet"24
v32@0:8@"CloudTabGroupSyncCoordinator"16@"NSString"24
v40@0:8@"CloudTabGroupSyncCoordinator"16@"NSSet"24@"NSString"32
v56@0:8@"CloudTabGroupSyncCoordinator"16@"NSString"24@"NSString"32@"NSString"40@"CKRecordID"48
v40@0:8@"CloudTabGroupSyncCoordinator"16@"NSString"24@"CKRecordID"32
v24@0:8@"CloudTabGroupMaintenanceActivity"16
v32@0:8@?16@?24
v36@0:8@?16B24@?28
@"CloudTabGroupMaintenanceActivity"
@"CloudTabGroupSyncCoordinator"
@"CloudTabGroupPresenceUpdater"
@"NSMapTable"
@"CKSystemSharingUIObserver"
@"CloudTabGroupSyncDebugger"
@"<CloudTabGroupSyncManagerDelegate>"
@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>"
v32@0:8@"WBSSQLiteDatabase"16@"NSError"24
i16@0:8
v20@0:8i16
v28@0:8@16i24
v24@0:8i16i20
i24@0:8@16
@"<CloudExtensionSQLiteStoreDelegate>"
@"<CloudBookmarkUpdater>"
B24@0:8@"NSString"16
@"<WBSBookmarkDBAccess>"16@0:8
@"<CloudBookmarkDatabaseLockArbiterDelegate>"
@76@0:8@16@24@32@40B48@52@60@68
@96@0:8@16@24@32@40@48@56B64B68@72@80@88
v96@0:8@16@24@32@40@48@56B64B68@72@80@88
@32@0:8@16r*24
i20@0:8i16
i32@0:8q16@24
i32@0:8@16@24
@"NSURL"
@"WBSSQLiteDatabase"
@64@0:8@16@24B32B36@40@48@56
@64@0:8@16@24B32@36B44@48@56
@"CloudTabDevice"
@"CloudTabCloseRequest"
v24@0:8^v16
v52@0:8i16@20@28@36@?44
@36@0:8i16@20@28
@36@0:8@16@24B32
B40@0:8@16@24@32
@48@0:8@16#24@32@40
@36@0:8@16@24i32
@52@0:8@16@24@32i40@44
@48@0:8@16@24q32@40
@"CloudTabGroupAccountPropertiesStore"
@"CloudTabGroupExpiredChangeTokenHandler"
@"NSHashTable"
@"SWHighlightCenter"
@"<CloudTabGroupSyncCoordinatorDelegate>"
@"CKOperationConfiguration"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mobilesafari</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.application-identifier</key>
<string>com.apple.Safari</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.SafariShared.CloudTabs</key>
<string>com.apple.SafariShared.CloudTabs</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.security.container-required</key>
<string>com.apple.mobilesafari</string>
<key>com.apple.private.security.storage.Safari</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mobilesafarishared</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>SafariBookmarksSyncAgent</string>
</array>
</dict>
</plist>
