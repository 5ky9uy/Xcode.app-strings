DAAccountVersion2
DAAccountHost
DAAccountPort
DAAccountPrincipalPath
DAAccountUseSSL
DAAccountEmailAddress
ACUIDisplayUsername
DASigningIdentityPersistentReference
DAEncryptionIdentityPersistentReference
DAAccountDidAutodiscover
DAExchangeOAuthSupportedKey
DAExchangeOAuthURI
DAExchangeOAuthTokenRequestURI
DAEASEndPointFQDN
DAIdentityPersist
DAIdentityPersistIsManagedByProfile
DATrustSettingsExceptions
DAAccountValidationDomain
 DAAccountFolderHierarchyChangedNotification
DAAccountFolderContentsChangedNotification
DAAccountFolderHierarchyNeedsUpdateNotification
DAAccountFolderHierarchyNeedsUpdateRequireChangedFoldersNotification
DAAccountFolderUpdatedWithNoChangesNotification
DAAccountPushedFolderPreferencesChangedNotification
DAOldKeychainURLs
DAAcountWasUpgradedFromLegacyAccount
kDAAccountIdentifiersToIgnoreForUniquenessCheck
DAAccountDoNotSaveReason
DAAccountUseTrustedSSLCertificate
DAAccountPersistentUUID
DAAccountConfigurationTag
DAAccount.m
We shouldn't be resetting our account id, ever
com.apple.caldavsyncd-%@
AccountID: %@ ("%@")
Stats %@
No Task Manager initted yet
https
http
v8@?0
v24@?0@"ACAccount"8@"NSError"16
%s MUST be implemented in ALL DAAccount subclasses.  Looks like it's missing in %@
Y=%@; T=%@
Cookie
Valid
InValid
v20@?0B8@"NSError"12
com.apple.dataaccess.StorageSessionSetup
com.apple.dataaccessd.%@
%@: accountID %@ persistentUUID %@
Account class %@ MUST implement %s
v24@?0q8@"NSError"16
com.apple.dataaccess.DATransactionMonitorQueue
DATransactionMonitor.m
Transaction count becomes negative, %d
DAReListenForAccounts
DAFrameworkName
DAAccountInfo
ACAccountType
ACParentAccountType
DAAccountClass
DAClientAccountClass
DADaemonAccountClass
DAAgentClass
DAAgentClassBundle
bundle
AccountInfo.plist
DAAccountLoader.m
Could not find the frameworks directory for bundle %@
Could not come up with an agent class (name %@) for account %@ parent account %@
Could not come up with an agent class (name %@) for account %@
<%@:
AccountClassName=%@
ClientAccountClassName=%@
DaemonAccountClassName=%@
AgentClassName=%@
modify
remove
fetch
preserve
move
belay-move
soft-delete
pseudo-delete
unknown
<%@: %p> { Change type: %@, ChangedItem: %@ serverId: %@%@}
, Change id: %d
DAAction.m
Who does non-keyed coding nowadays?
DAAItemChangeType
ASChangedCollectionLeaf
DAAChangedItem
DAAServerId
DAAInstanceId
DAAChangeId
DAASourceContainerId
DAASourceServerId
DAADestinationContainerId
DARStatus
DAABLegacyContainer cannot update CNSaveRequest
DAABLegacyContainer does not support asContainer
 folderID = %@, name = %@, _parentFolderID %@, _dataclass %ld, _isDefault %@
com.apple.dataaccess.accountmonitor
DataAccess-
unit-test
%@?%@
?@/|:
%@:%@@
Password 
Login 
Host 
Scheme 
%llu
%llu
%@ messageID "%@", onFlags %llu, offFlags %llu
%@ maxSize %d, bodyFormat %d
%@ messageID "%@"
%@ messageID "%@", maxSize %d, bodyFormat %d
%@ longID "%@", maxSize %d, bodyFormat %d
%@ message "%@", fromFolder "%@", toFolder "%@"
%@ messageID "%@", attachmentName "%@"
%@ subject "%@"
%@ status %d, sourceID "%@", destID "%@", origRequest (%@)
%@ emailAddresses %@
%@ status %ld
 email->certs 
status %ld 
(null)
 email->certs status %ld 
%@: 
<cert data length %ld hash %ld> 
 email->availability 
 email->availability status %ld 
%a, %d %b %Y %H:%M:%S %z
com.apple.dataaccess.queryqueue
DASyncStart
DASyncEnd
DACalendarItemsDownloaded
DACalendarItemsUploaded
AccountID
AccountClass
AccountName
NumberOfItemsChanged
ContainerID
NSString *acDataclassForDADataclass(DASingleDataclass)
com.apple.dataaccess.statusreport
@"NSMutableArray"8@?0
v24@?0@"NSArray"8@"NSError"16
v24@?0@"ACAccountType"8@"NSError"16
int flockWithProcessAssertion(int, BOOL, NSString *__strong)
DAUtils.m
You can't flock a flocked file.  No ref counting for you
com.apple.dataaccess.unknown
0123456789ABCDEF
0123456789abcdef
CFBundleVersion
iOS/%@ (%@) %@/%@
DeviceClass
ProductType
com.apple.MobileAddressBook
com.apple.mobilephone
com.apple.mobilecal
com.apple.reminders
com.apple.mobilenotes
com.apple.mobilemail
@?/:
%%0.%lud
%@://%@%@%@%@%@
%@://%@
%@://%@%@
%@://%@:%u%@
%@://%@/
%@://%@:%u/
DADiagnosticsEnabled
NSDetailedErrors
NSDetailedErrors: 
Library/Reminders/DataAccess/DeviceSpecificInfo.plist
com.apple.dataaccess.deviceid
DAGlobalDeviceSpecificIdentifier
iPhone Simulator
DATaskManager.m
There are queued exclusive tasks remaining during dealloc
There is an active exclusive task remaining during dealloc
There are independent tasks remaining during dealloc
There are held independent tasks remaining during dealloc
There are modal-held independent tasks remaining during dealloc
There are queued tasks remaining during dealloc
There is an active queued task remaining during dealloc
There is a modal-held active queued task remaining during dealloc
Apple-%@/%@
Out of bounds state
DATaskManager %@ state:%@
Active exclusive task: %@
Queued exclusive tasks: %@
Independent tasks: %@
Held independent tasks: %@
Modal-held independent tasks: %@
Active queued task: %@
Queued tasks: %@
Active modal task: %@
Queued modal tasks: %@
Associated with account: %@
Finished task is not being managed, so cannot be active modal task.
Finished task is not being managed, so cannot be in modal queue.
A nil task requested modal?
Cannot request modal behavior during shutdown
Only the active exclusive task can go modal immediately
Out of bounds state.
taskEndModal can only be called in Run Modal state, not %d
Only the active modal task can end modal behavior.
Cannot handle _startModal: in Shutdown state
Cannot have active queued task and active exclusive task at the same time.
Cannot have running independent tasks and an active exclusive task at the same time.
Cannot have active queued task and a modal task at the same time.
Cannot have running independent tasks and a modal task at the same time.
Cannot have active exclusive task in Nominal state.
Cannot have modal task in Nominal state.
We shouldn't be holding independent tasks in Nominal state
We shouldn't have queued exclusive tasks in Nominal state
We shouldn't have any independent tasks that are modal in Nominal state
Cannot have active exclusive task in Hold for Exclusive state.
Should not have any modal task active in Hold for Exclusive state
Should have at least one queued exclusive task in Hold for Exclusive state
Cannot have running independent tasks in Run Exclusive state.
Cannot have active queued task in Run Exclusive state.
Cannot have active modal task in Hold for Modal state.
Should have at least one queued modal task in Hold for Modal state.
Should not be running other independent tasks in Run Modal state.
Should not be running other queued task in Run Modal state.
Only the exclusive task can currently go modal.
Nominal
Hold for Exclusive
Run Exclusive
Hold for Modal
Run Modal
Shutdown
Out of bounds
DAPowerAssertionManager.m
%s must have a non-nil context
%s must have a non-nil group identifier
Shared DAPowerAssertionManager object %@:
Contexts asserting power: %@
Contexts held aside: %@
Active Assertions: %@
com.apple.DataAccess:%d-%p
ASAccountActor.m
Must be called on subclass: %s
ASConcreteAccountActor
DADataHandlers.m
Can't initialize a DADataHandler with a nil changeTrackingID
%@: waiter %@ wants dataclasses %lx
DALocalDBGateKeeper.m
DALocalDBGateKeeper is shutting down, but the following account is still holding the dataclass lock for dataclass %lx.  Account %@
DALocalDBGateKeeper is shutting down, but the following accounts are still waiting on the dataclass lock for dataclass type %lx.  Account %@
Waiter %@ tried to relinquish a lock for data class %ld, but it was held by another waiter: %@
_eventsLockHolder %@
_eventsWaiters %@
_waiterIDsExpectingEventsLock %@
DAUserNotificationUtilities.m
Invalid parameter not satisfying: %@
notification != nil
completionBlock != nil
runLoop != nil
Already waiting on this notification %p
accountWithExternalIdentifier: is abstract
allAccounts: is abstract
accountForContainerWithIdentifier: is abstract
.me.com
.icloud.com
v24@?0@8^B16
v12@?0i8
com.apple.dataaccess.trustChallengeQueue
Not 
v12@?0B8
DAABLegacyAccount cannot update CNSaveRequest
com.apple.dataaccess.DATrafficQueue
^{__CFString=}76@?0i8^{__CFDate=}12^{__CFString=}20^{__CFString=}28r*36r*44Q52^v60^{__CFString=}68
DALogLevel
DAContactsContainer does not support asSource
Could not load source: %ld
/AppleInternal/Library/Frameworks/CalendarDiagnostics.framework/CalendarDiagnostics
IPHONE_SIMULATOR_ROOT
CFFIXED_USER_HOME
RestrictionTimeout
RestrictionTimeoutDate
NumFailures
yyyy-MM-dd HH:mm:ss Z
com.apple.remindd.babysitter
BuildVersion
LastSystemVersion
RestrictedWaiters
RefreshingWaiters
FailedWaiters
DataAccessBabysitterPrefsChanged
DABabysitter.m
Use the shared babysitter, jerk.
refreshingWaiters
failedWaiters
restrictedWaiters
DAAccount %p is going away...
Account "%@" (%@) was toggled for a dataclass. Giving it another chance with the babysitter.
%s to be implemented by subclass
%s being ignored by %@
Added consumer %p for task %p to DAAccount %p, count: %lu
Removed consumer for task %p from DAAccount %p, count: %lu
Someone wanted to set a nil password, we're editing the live ACAccountCredential
Calling _backingAccountInfo.authenticated = YES for Account identifier %@ and username %@
Changing Host From %@ to %@
Account had significant property change, going to flush local data.
OldProperties %@
NewProperties %@
Couldn't get a Yahoo cookie. Not setting authentication headers
Fetching OAuth Crednetials for Backing Account %@
Account Store Returned A %@ OAuth-token From Crednetials Object %@ AccountID: %@
Saving account "%@" (%@)
 _backingAccountInfo.authenticated is %d for Account identifier %@ and username %@
Error saving account %@: %@
Not updating non-existing account: %@
Setting identity certificate. Managed by profile? %@
Not attempting request for account %@ because the backing account credential isn't authed %{public}@
Not attempting request for account %{public}@ because the backing account needs to verify terms or is suspended. %{public}@
Not attempting request for account %{public}@ because we don't have access to keychain items with accessibility %d right now
Shutting down the task manager
Canceling task because conditions for on-power mode no longer exist (xpc_activity)
XPC: Saved XPC activity for account %@
XPC: Increment XPC activity continue count to %d for account %@
XPC: Decrement XPC activity continue count to %d for account %@
XPC: Successfully set XPC activity state to XPC_ACTIVITY_STATE_DONE for account %@
XPC: Failed to set XPC activity state to XPC_ACTIVITY_STATE_DONE for account %@
DataAccess is renewing credentials for account %{public}@ by forcing-prompt: %{public}@
DataAccess successfully renewed credentials for account %{public}@ by forcing-prompt: %{public}@
DataAccess failed to renew credentials for account %{public}@ by forcing-prompt: %{public}@ - renewalResult = %ld
Downloading attachments is not supported on account ID %@. AttachmentUUID: %@
Requesting calendar availability is not supported on account with ID [%@].
Cancelling calendar availability requests is not supported on account with ID [%@].
Performing a calendar directory search is not supported on account with ID [%@].
Cancelling calendar directory searches is not supported on account with ID [%@].  searchID: [%@]
Responding to calendar shares is not supported on account ID %@. calendar ID: %@
Reporting calendar shares as junk is not supported on account ID %@. calendar ID: %@
Transaction count is initialized to %d
DATransactionMonitor: xpc_transaction_begin INIT {name: com.apple.remindd.dataaccess.transactions}
Transaction count is incremented to %d
DATransactionMonitor: xpc_transaction_end RELEASE {name: com.apple.remindd.dataaccess.transactions}
Transaction count is decremented to %d
Remaining transactions: %@
Handling account info mapping %@
Using pre-cached account infos
Going to the disk for our account info providers
Failed to load account bundle {error: %@}
We don't know of any bundles for account type "%@"
Could not come up with an account class (name %@) for account %@ parent account %@
Could not come up with an account class (name %@) for account %@
Could not come up with a client account class (name %@) for account %@ parent account %@
Could not come up with a client account class (name %@) for account %@
Could not come up with a daemon account class (name %@) for account %@ parent account %@
Could not come up with a daemon account class (name %@) for account %@
Unknown DAItemChangeType %ld
Loading password for %@
Securing ur sekretz: moving credential for account %@ to accessibility %d
Couldn't change password accessibility, error %d
Could not find a password in the keychain for %@, error %d
Setting password for account with UUID %@
Error %d, Can't update password for account %@
Removing password for account with UUID %@
Error %d, Couldn't delete password from keychain for account %@
During Migration, password present. Setting _backingAccountInfo.authenticated = YES for Account identifier %@ and username %@
Saving password for %@
Refusing to save password in keychain because one or more of the necessary fields are null: %@%@%@%@
Error %d while trying to add a password: %@
Refusing to retreive password from keychain because one or more of the necessary fields are null: %@%@%@
Could not find a password in the keychain for %@
Removing password for %@
Refusing to delete password from keychain because one or more of the necessary fields are null: %@%@%@
error %d: Could not delete password for %@
Setting password for account
Couldn't set password, error %d
Couldn't add password, error %d
DAMailMessage initWithCoder: should be called on a subclass only
DAMailMessage encodeWithCoder: should be called on a subclass only
Delay pending search for %f seconds
Delay new search for %f seconds
Search requested on account %@, which does not support it
%s unhandled dataclass %lx
Could not convert ACAccount (%@) to DAAccount
Could not load ACAccounts due to Account Error %@
Applying storage session %@ to request %@
Exception when reading dictionary from %@: %@
DATaskManager: Task manager %@ is being deallocated. Ending XPC transaction
DATaskManager: Task manager %@ is being deallocated. Ending XPC activity
Exclusive task %@ submitted, to front: %d
DATaskManager: Begin an xpc transaction due to exclusive task
DATaskManager: DATransaction starting, ID: %@
DATaskManager: Retain an xpc activity due to exclusive task for account %@
Independent task %@ submitted
DATaskManager: Begin an xpc transaction due to independent task
DATaskManager: Retain an xpc activity due to independent task for account %@
Queued task %@ submitted
DATaskManager: Begin an xpc transaction due to queued task
DATaskManager: Retain an xpc activity due to queued task for account %@
Task %@ aborted
Task Manager %p shutting down with account at %p
Task Manager %p shutting down with state %@
DATaskManager: Task manager %@ is being shut down. Ending XPC transaction
DATaskManager: Task manager %@ is being shut down. Releasing XPC activity
Task manager %@ has finally drained its queue. Turning opportunistic socket support back on
Task manager %@ has finally drained its queue. Clearing its user initiated sync state
DATaskManager: Task manager %@ has finally drained its queue. Ending XPC transaction %@
DATaskManager: Task manager %@ has finally drained its queue. Releasing XPC activity %@
Task manager %@ has finally drained its queue. Reset automatic fetching state
Task %@ finished.
Early return because task %@ isn't in our collection
Pending tasks are finished for account %@
Task %@ requesting modal
Task %@ ending modal
The _performTask is invoked after taskManager has been shutdown. Canceling %{public}@ %@
The device is in on-power fetch mode, but is no longer on power or on wifi. Canceling %{public}@ %@
The _startModal is invoked after taskManager has been shutdown. Canceling %{public}@ %@
startModal called on task %@
Task Manager %@ transitioning from state: %@
Task Manager %@ transitioning to state: %@
Scheduling selector: %s with argument: %@ in modes %@
Scheduling modal task: %@
Cancelling task %@ with reason %d
Context %@ retaining power assertion with group identifier %@
Context %@ getting added to our held aside contexts, as group %@ is currently dropped
Context %@ releasing power assertion
Context object %@ attempting to release power assertion without first retaining it
Dropping power assertion for group identifier %@
Reattaining power assertion for group identifier %@
DAPowerAssertionManager retained power assertion %@ for context %p, outstanding assertion count %lu
DAPowerAssertionManager releasing power assertion for context %p, outstanding assertion count %u ontext
Aborting locks for dataclasses %lx to %@
DALocalDBGateKeeper notifyWaiters
Notifying waiters for dataclasses %ldd
Granting locks for dataclasses %lx to %@
registerWaiter %@ forDataclassLocks %lx
Not allowing waiter %@ to get the gate, as we're in a holding pattern
Not notifying for events.  Claimed %d waiters count %lu holder %p expectant waiters %lu
unregisterWaiterForDataclassLocks %@
relinquishing locks for waiter %@ dataclasses %lx
Claiming ownership of dataclasses 0x%lx
DATransaction exiting, ID: %@
Couldn't schedule response for notification %@
No completion block for notification %@
Checking to see if we should trust the server certificate
Terminating connection because server does not have an SSL certificate. Host: %@
Account now requires trusted certificate. Setting %@ to YES for account: %@
Got SecTrustEvaluate result %u. Allowing.
Got SecTrustEvaluate result %u. Checking if needing to prompt.
Terminating connection and warning user about an untrusted SSL certificate. The account requires trusted SSL certificate. Account: %@
Account does not require trusted certificate. Prompting user. Account: %@
Got SecTrustEvaluate result %u. Denying.
IT'S A TARP!!! We received an untrusted cert for %@. You really think we're going to fall for that?
prompting certificate for host: %@
got prompt response %d
Grabbing trust challenge lock...
Lock acquired. Checking trust.
%@Continuing connection
Babysitter: Noting that waiter %{public}@ failed %d times for operation %{public}@
===================
Babysitter: Account with ID %{public}@ had previously failed %d times and is from now restricted until it stops crashing. Please file a bug for any remindd crashes you find. (Timeout: %{public}@)
===================
===================
Babysitter: Waiter with ID %{public}@ had crashed %d times. Since you have the babysitter disabled, we're going to assume you know what you're doing and not disable the waiter. Consider yourself warned. (Timeout: %{public}@)
===================
Babysitter: Restricted accounts are: %{public}@
Babysitter: The OS version is different. Giving all accounts a second chance at life.
Babysitter: Marking waiter %@ as performing operation "%@" (attempt #%d)
Babysitter: Decrementing refresh count for all operations on account %@
Babysitter: Decrementing refresh count for operation "%@" on account %@
Babysitter: It's been long enough, we're going to give account %{public}@ another try. Let's hope it doesn't crash this time.
DAAccount
TrustHandling
HSA2Support
CoreDAVLogging
AuthenticationExtensions
EventsFolderItemsSyncContext
EventsSupport
DATransactionMonitor
ChillOutARC
MailFolder
MailFolderSupport
InvitationSupport
DAAccountLoader
DAAccountClassNames
DAAction
NSSecureCoding
NSCoding
DAMoveAction
DAResponse
DAABLegacyContainer
DAContainer
DACardDAVRecord
NSObject
DAFolder
DAAccountMonitor
DAKeychain
DAKeychainAdditions
DAKeychainAddition
OldAndBusted
DAMailboxRequest
DAMailboxSetFlagsRequest
DAMailboxGetUpdatesRequest
DAMailboxDeleteMessageRequest
DAMailboxFetchMessageRequest
DAMailboxFetchSearchResultRequest
DAMessageMoveRequest
DAMessageFetchAttachmentRequest
DADraftMessageRequest
DAMoveResponse
DAResolveRecipientsRequest
DAResolvedRecipient
DAMailMessage
Email
Searching
SearchSubclassing
DAContactsBasedAccount
DAContactsAccount
DAExtensions
DelayedPerformWithNullSource
DAHexString
DALeastInfoURLExtension
DADAExtendedDescription
DATaskManager
DAPowerAssertionManager
ASAccountActor
ASAccountActorMessages
DADataHandler
DARunLoopRegistry
DAWaiterWrapper
DALocalDBGateKeeper
_DAContactsAccountContactsProvider
DATransaction
DAUserNotificationUtilities
DAUserNotificationInfo
DAiCalendarLogger
ICSLoggingDelegate
DAContactsAccountProvider
DATrustHandler
DAABLegacyAccount
DATrafficLogger
DAContactsContainer
DABabysitter
DABabysitterRegistrationToken
DAActivity
_DAContactsAccountABLegacyProvider
sharedMonitor
unmonitorAccount:
shutdown
removeXpcActivity
dealloc
init
initWithDelegate:
resetStatusReport
persistentUUID
_setPersistentUUID:
ingestBackingAccountInfoProperties
monitorAccount:
sharedInstance
daemonAppropriateAccountClassForACAccount:
initWithBackingAccountInfo:
accountIntPropertyForKey:
setAccountIntProperty:forKey:
setAccountProperty:forKey:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
identifier
accountID
backingAccountInfo
parentAccount
setObject:forKeyedSubscript:
stringWithFormat:
displayAccount
accountDescription
setAccountDescription:
username
setUsername:
enabledDataclasses
countByEnumeratingWithState:objects:count:
isEnabledToSyncDataclass:
isEnabledForDataclass:
setEnabled:forDataclass:
enabledForDADataclass:
displayName
sharedBabysitter
giveAccountWithIDAnotherChance:
dataclassProperties
objectForKeyedSubscript:
boolValue
numberWithBool:
intValue
numberWithInt:
waiterID
accountWithIDShouldContinue:
statusReport
setSyncingAllowed:
protocolVersion
setProtocolVersion:
stateString
setObject:forKey:
count
objectForKey:
removeObjectForKey:
clientToken
length
da_newGUID
addClientToken:
credential
password
accountBoolPropertyForKey:
sharedKeychain
migratePasswordForAccount:
setAccountBoolProperty:forKey:
identityPersist
passwordWithExpected:
setPassword:
initWithPassword:
setCredential:
setAuthenticated:
dataclassPropertyURLsByDataclass
URLWithString:
null
urlFromDataclassPropertiesForDataclass:
host
scheme
lowercaseString
isEqualToString:
port
integerValue
emailAddress
arrayWithObjects:count:
emailAddresses
caseInsensitiveCompare:
numberWithInteger:
da_appendSlashIfNeeded
useSSL
principalPath
da_URLWithScheme:host:port:uri:
setUseSSL:
setHost:
setPort:
path
setPrincipalPath:
checkValidityOnAccountStore:withConsumer:inQueue:
setIsValidating:
takeValuesFromModifiedAccount:
removeFromCoreDAVLoggingDelegates
addToCoreDAVLoggingDelegates
account:isValid:validationError:
verifyCredentialsForAccount:saveWhenAuthorized:withHandler:
shouldDoInitialAutodiscovery
parentAccountIdentifier
accountHasSignificantPropertyChangesFromOldAccountInfo:
removeDBSyncData
cleanupAccountFiles
credentialType
credentialItemForKey:
dictionaryWithObjects:forKeys:count:
onBehalfOfBundleIdentifier
oauthToken
monitorFoldersWithIDs:
_isIdentityManagedByProfile
setIdentityCertificatePersistentID:managedByProfile:
isAuthenticated
saveVerifiedAccount:withCompletionHandler:
saveAccountPropertiesWithCompletionHandler:
accountWithIdentifier:
saveAccountProperties
accountType
credentialProtectionPolicy
_daKeychainAccessibilityForSecAccessibility:
user
da_stringByAddingPercentEscapesForUsername
da_urlBySettingUsername:
exceptionsDict
da_hexString
mutableCopy
copyStorageSession
trustHandler
resetCertWarnings
setStatusReport:
setPersistentUUID:
setAccountType:
setDisplayName:
supportsAuthentication
isValidating
wasUserInitiated
aa_isSuspended
keychainAccessibilityType
canAccessCredentialsWithAccessibility:
description
removeAllObjects
reload
daAccountSubclassWithBackingAccountInfo:
daAccountVersion
setDAAccountVersion:
upgradeAccount
resetAccountID
syncStoreIdentifier
scheduleIdentifier
changeTrackingID
setUser:
isDisabled
enabledForAnyDADataclasses:
setEnabled:forDADataclass:
enabledDataclassesBitmask
spinnerIdentifiers
accountPropertyForKey:
removeAccountPropertyForKey:
resumeMonitoringFoldersWithIDs:
suspendMonitoringFoldersWithIDs:
stopMonitoringFolderWithID:
setConsumer:forTask:
consumerForTask:
removeConsumerForTask:
clientTokenRequestedByServer
hostFromDataclassPropertiesForDataclass:
useSSLFromDataclassPropertiesForDataclass:
portFromDataclassPropertiesForDataclass:
usernameWithoutDomain
domainOnly
setEmailAddress:
setEmailAddresses:
accountContainsEmailAddress:
signingIdentityPersistentReference
setSigningIdentityPersistentReference:
encryptionIdentityPersistentReference
setEncryptionIdentityPersistentReference:
principalURL
setPrincipalURL:
checkValidityOnAccountStore:withConsumer:
saveModifiedPropertiesOnBackingAccount
discoverInitialPropertiesWithConsumer:
autodiscoverAccountConfigurationWithConsumer:
setShouldDoInitialAutodiscovery:
shouldAutodiscoverAccountProperties
shouldRemoveDBSyncDataOnAccountChange
accountDidChangeFromOldAccountInfo:
userAgentHeader
serverRoot
serverComplianceClasses
handleCertificateError:
additionalHeaderValues
customConnectionProperties
oauth2Token
oauthInfoProvider
tearDown
monitorFolderWithID:
stopMonitoringFoldersWithIDs:
stopMonitoringFolders
defaultContainerIdentifierForDADataclass:
removeClientCertificateData
updateExistingAccountProperties
addUsernameToURL:
exceptionsForDigest:
setExceptions:forDigest:
isChildAccount
shouldFailAllTasks
isEqualToAccount:
isActiveSyncAccount
isLDAPAccount
isCalDAVAccount
isCardDAVAccount
isCalDAVChildAccount
isHotmailAccount
isGoogleAccount
isSubscribedCalendarAccount
accountTypeIdentifier
shouldCancelTaskDueToOnPowerFetchMode
saveXpcActivity:
hasXpcActivity
incrementXpcActivityContinueCount
decrementXpcActivityContinueCount
saveFetchingAutomaticallyState:
getFetchingAutomaticallyState
shouldUseOpportunisticSockets
setShouldUseOpportunisticSockets:
setWasUserInitiated:
taskManager
setTrustHandler:
appIdsForPasswordPrompt
sourceApplicationBundleIdentifier
setSourceApplicationBundleIdentifier:
setDataclassPropertyURLsByDataclass:
pendingQueries
setPendingQueries:
pendingQueryQueue
setPendingQueryQueue:
lastQueryStartedTime
setLastQueryStartedTime:
.cxx_destruct
_backingAccountInfo
_hasInitted
_shouldUseOpportunisticSockets
_wasUserInitiated
_statusReport
_consumers
_storageSession
_clientToken
_taskManager
_xpcActivity
_continueCount
_isFetchingAutomatically
_shouldFailAllTasks
_isValidating
_trustHandler
_appIdsForPasswordPrompt
_sourceApplicationBundleIdentifier
_dataclassPropertyURLsByDataclass
_pendingQueries
_pendingQueryQueue
_lastQueryStartedTime
T@"NSMutableDictionary",&,N,V_dataclassPropertyURLsByDataclass
T@"DAStatusReport",&,N,V_statusReport
T@"DATrustHandler",&,N,V_trustHandler
TB,N,V_shouldUseOpportunisticSockets
TB,N,V_wasUserInitiated
T@"NSMutableArray",&,N,V_pendingQueries
T@"NSObject<OS_dispatch_queue>",&,N,V_pendingQueryQueue
T@"NSDate",&,N,V_lastQueryStartedTime
T@"NSString",R,N
Ti,N,SsetDAAccountVersion:
T@"NSString",R,C,N
T@"NSString",C,N
Tq,N
TB,N
Tq,R,N
TB,R,N
T@"ACAccount",R,N,V_backingAccountInfo
T@"DATaskManager",R,N,V_taskManager
Ti,R,N
T@"NSData",&,N
T@"NSURL",C,N
T@"NSArray",C,N
T@"NSArray",R,N,V_appIdsForPasswordPrompt
TB,R,N,V_shouldFailAllTasks
T@"NSData",R,C,N
TB,N,V_isValidating
T@"NSSet",R,N
T@"NSString",C,N,V_sourceApplicationBundleIdentifier
handleTrustChallenge:forAccount:
handleTrustChallenge:forAccount:completionHandler:
handleTrustChallenge:
handleTrustChallenge:completionHandler:
getAppleIDSession
sharedPowerAssertionManager
dropPowerAssertionsForGroupIdentifier:
reattainPowerAssertionsForGroupIdentifier:
renewCredentialsForAccount:force:reason:completion:
openAuthenticationURL:forAccount:shouldConfirm:completion:
_webLoginRequestedAtURL:reasonString:inQueue:completionBlock:
domain
code
userInfo
CDVObjectForKeyCaseInsensitive:
CDVIsSafeRedirectForRequestURL:
dropAssertionsAndRenewCredentialsInQueue:withHandler:
setWithObject:
_leafAccountTypes
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
addObject:
sharedManager
oneshotListOfAccountIDs
setUserInfo:forClientUUID:
localizedIdenticalAccountFailureMessage
localizedInvalidPasswordMessage
webLoginRequestedAtURL:reasonString:inQueue:completionBlock:
handleValidationError:completion:
reacquireClientRestrictions:
calEventChangeId
setCalEventChangeId:
calRecurrenceChangeId
setCalRecurrenceChangeId:
calAlarmChangeId
setCalAlarmChangeId:
calAttendeeChangeId
setCalAttendeeChangeId:
calAttachmentChangeId
setCalAttachmentChangeId:
highestSequenceNumber
setHighestSequenceNumber:
_calEventChangeId
_calRecurrenceChangeId
_calAlarmChangeId
_calAttendeeChangeId
_calAttachmentChangeId
_highestSequenceNumber
Ti,N,V_calEventChangeId
Ti,N,V_calRecurrenceChangeId
Ti,N,V_calAlarmChangeId
Ti,N,V_calAttendeeChangeId
Ti,N,V_calAttachmentChangeId
Ti,N,V_highestSequenceNumber
errorWithDomain:code:userInfo:
downloadFinishedError:
calendarAvailabilityRequestFinishedWithError:
calendarDirectorySearchFinishedWithError:exceededResultLimit:
shareResponseFinishedWithError:
defaultEventsFolder
eventsFolders
synchronizeEventsFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
sendEmailsForCalEvents:consumer:
beginDownloadingAttachmentWithUUID:consumer:
cancelDownloadingInstance:error:
requestCalendarAvailabilityForStartDate:endDate:ignoredEventID:addresses:consumer:
cancelCalendarAvailabilityRequestWithID:
performCalendarDirectorySearchForTerms:recordTypes:resultLimit:consumer:
cancelCalendarDirectorySearchWithID:
respondToShareRequestForCalendar:withResponse:consumer:
reportShareRequestAsJunkForCalendar:consumer:
cancelShareResponseInstance:error:
transactionCount
setTransactionCount:
transactions
setTransactions:
didFinishAllXPCTransactions
removeObject:
sharedTransactionMonitor
incrementTransactionCountForTransaction:
decrementTransactionCountForTransaction:
transactionMonitorDelegate
setTransactionMonitorDelegate:
_transactionCount
_transactions
_transactionMonitorDelegate
Ti,N,V_transactionCount
T@"NSMutableArray",&,N,V_transactions
T@"<DATransactionMonitorDelegate>",W,N,V_transactionMonitorDelegate
performSelector:withObject:
da_performSelectorThatDoesntAffectRetainCount:withObject:
folderID
parentFolderID
mailboxID
parentMailboxID
inboxFolder
sentItemsFolder
deletedItemsFolder
draftsFolder
reattemptInvitationLinkageForMetaData:inFolderWithId:
unactionableICSRepresentationForMetaData:inFolderWithId:outSummary:
_findPrivateFrameworks
setAccountClassName:
setClientAccountClassName:
setDaemonAccountClassName:
setAgentClassName:
stringByAppendingPathComponent:
stringByAppendingPathExtension:
setAcAccountTypeToAccountFrameworkSubpath:
setAcAccountTypeToAccountDaemonBundleSubpath:
setAcAccountTypeToClassNames:
setAcParentAccountTypeToChildAccountTypes:
defaultManager
dictionaryWithContentsOfFile:
_addAccountInfo:forFrameworkNamed:
contentsOfDirectoryAtPath:error:
initWithPath:
infoDictionary
bundleForClass:
privateFrameworksPath
bundleWithPath:
loadAndReturnError:
_loadFrameworkAtSubpath:
loadFrameworkForACAccountType:
accountClassName
clientAccountClassName
daemonAccountClassName
loadDaemonBundleForACAccountType:
agentClassName
daemonAccountClassForACAccount:
clientAccountClassForACAccount:
accountClassForACAccount:
agentClassForACAccount:
acAccountTypeToAccountFrameworkSubpath
acAccountTypeToAccountDaemonBundleSubpath
acAccountTypeToClassNames
acParentAccountTypeToChildAccountTypes
_acAccountTypeToAccountFrameworkSubpath
_acAccountTypeToAccountDaemonBundleSubpath
_acAccountTypeToClassNames
_acParentAccountTypeToChildAccountTypes
T@"NSMutableDictionary",&,N,V_acAccountTypeToAccountFrameworkSubpath
T@"NSMutableDictionary",&,N,V_acAccountTypeToAccountDaemonBundleSubpath
T@"NSMutableDictionary",&,N,V_acAccountTypeToClassNames
T@"NSMutableDictionary",&,N,V_acParentAccountTypeToChildAccountTypes
_accountClassName
_clientAccountClassName
_daemonAccountClassName
_agentClassName
T@"NSString",&,N,V_accountClassName
T@"NSString",&,N,V_clientAccountClassName
T@"NSString",&,N,V_daemonAccountClassName
T@"NSString",&,N,V_agentClassName
itemChangeType
stringForItemChangeType:
changedItem
serverId
changeId
allowsKeyedCoding
decodeIntForKey:
setItemChangeType:
setWithObjects:
decodeObjectOfClasses:forKey:
_setChangedItem:
decodeObjectOfClass:forKey:
setServerId:
setInstanceId:
setChangeId:
encodeInt:forKey:
encodeObject:forKey:
instanceId
hash
isEqual:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
initWithItemChangeType:changedItem:serverId:
initWithItemChangeType:changedItem:serverId:instanceId:
forwardedAttendees
setForwardedAttendees:
forwardedAttendeeUUIDs
setForwardedAttendeeUUIDs:
_changeId
_itemChangeType
_serverId
_instanceId
_changedItem
_forwardedAttendees
_forwardedAttendeeUUIDs
TQ,N,V_itemChangeType
T@,&,N,V_serverId
T@,&,N,V_instanceId
T@,&,N,S_setChangedItem:,V_changedItem
Ti,N,V_changeId
T@,&,N,V_forwardedAttendees
T@,&,N,V_forwardedAttendeeUUIDs
setSourceContainerId:
setSourceServerId:
setDestinationContainerId:
sourceContainerId
sourceServerId
destinationContainerId
initWithItemChangeType:changedItem:sourceContainerId:sourceServerId:destinationContainerId:
_sourceContainerId
_sourceServerId
_destinationContainerId
T@"NSString",&,N,V_sourceContainerId
T@"NSString",&,N,V_sourceServerId
T@"NSString",&,N,V_destinationContainerId
setStatus:
status
initWithItemChangeType:changedItem:serverId:status:
_status
Tq,N,V_status
source
type
stringValue
exceptionWithName:reason:userInfo:
class
self
performSelector:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
isContact
isGroup
isContainer
isAccount
updateSaveRequest:
markForDeletion
name
setName:
isLocal
setType:
externalIdentifier
setExternalIdentifier:
cTag
setCTag:
syncTag
setSyncTag:
syncData
setSyncData:
constraintsPath
setConstraintsPath:
meContactidentifier
setMeContactIdentifier:
accountIdentifier
setAccountIdentifier:
isContentReadonly
setContentReadonly:
arePropertiesReadonly
setArePropertiesReadonly:
isSearchContainer
markAsDefault
asSource
asContainer
initWithABSource:
_source
T^v,R,N,V_source
folderName
dataclass
isDefault
stringByAppendingFormat:
setFolderName:
setFolderID:
setParentFolderID:
setDataclass:
setIsDefault:
hasRemoteChanges
setHasRemoteChanges:
_isDefault
_hasRemoteChanges
_folderName
_folderID
_parentFolderID
_dataclass
TB,N,V_hasRemoteChanges
T@"NSString",C,N,V_folderName
T@"NSString",C,N,V_folderID
T@"NSString",C,N,V_parentFolderID
Tq,N,V_dataclass
TB,N,V_isDefault
weakObjectsHashTable
setAccounts:
setAccountsQueue:
accountsQueue
accounts
allObjects
monitoredAccounts
_accounts
_accountsQueue
T@"NSHashTable",&,N,V_accounts
T@"NSObject<OS_dispatch_queue>",&,N,V_accountsQueue
stringByAppendingString:
_DACopyMutableQueryForAccountWithPersistentUUID:
_secAccessibilityForDAKeychainAccessibility:
initWithData:encoding:
_DACopyMutableAttributesForAccountWithPersistentUUID:accessibility:
removePasswordForAccount:withPersistentUUID:
dataUsingEncoding:
passwordForAccountWithPersistentUUID:expectedAccessibility:shouldSetAccessibility:passwordExpected:
guessPasswordForURL:
removeKeychainInformationsForURL:
setPassword:forAccount:withPersistentUUID:withAccessibility:
stringByURLQuoting
query
stringByDeletingLastPathComponent
URLWithUsername:withPassword:
URLWithoutUsername
URLWithUsername:
absoluteString
hasPrefix:
insertString:atIndex:
da_URLWithDirtyString:
URLByRemovingLastPathComponent
da_classicPortForScheme:
loadKeychainInformationsForURL:
saveKeychainInformationsForURL:andPassword:withAccessibility:
requestType
setRequestType:
bodyFormat
setBodyFormat:
messageID
setMessageID:
_requestType
_bodyFormat
_messageID
Ti,N,V_requestType
Ti,N,V_bodyFormat
T@"NSString",C,N,V_messageID
setOnFlags:
setOffFlags:
copy
onFlags
offFlags
initWithFormat:
initRequestWithSetFlags:unsetFlags:message:
_onFlags
_offFlags
TQ,N,V_onFlags
TQ,N,V_offFlags
setMaxSize:
maxSize
initRequestForBodyFormat:withBodySizeLimit:
_maxSize
Ti,N,V_maxSize
initRequestWithMessageID:
initRequestForBodyFormat:withMessageID:withBodySizeLimit:
setLongID:
setServerID:
longID
initRequestForBodyFormat:withLongID:withBodySizeLimit:
initRequestForBodyFormat:withFolderID:withServerID:withLongID:withBodySizeLimit:
serverID
_longID
_serverID
T@"NSString",C,N,V_longID
T@"NSString",C,N,V_serverID
setMessage:
setFromFolder:
setToFolder:
message
fromFolder
toFolder
initMoveRequestWithMessage:fromFolder:toFolder:
context
setContext:
_message
_fromFolder
_toFolder
_context
T@"NSString",C,N,V_message
T@"NSString",C,N,V_fromFolder
T@"NSString",C,N,V_toFolder
T@,&,N,V_context
setAttachmentName:
attachmentName
initWithAttachmentName:andMessageServerID:
_attachmentName
T@"NSString",C,N,V_attachmentName
setSend:
subject
initWithRequestType:message:send:
send
_send
T@"DAMailMessage",&,N,V_message
TB,N,V_send
setSourceID:
setDestID:
sourceID
destID
origRequest
initWithStatus:sourceID:destID:
setOrigRequest:
_sourceID
_destID
_origRequest
Ti,N,V_status
T@"NSString",C,N,V_sourceID
T@"NSString",C,N,V_destID
T@"DAMessageMoveRequest",&,N,V_origRequest
setRetrieveCertificates:
setRetrieveAvailablilty:
setStartTime:
setEndTime:
initWithEmailAddresses:
initWithEmailAddresses:retrieveCertificates:retrieveAvailability:withStartTime:endTime:
retrieveCertificates
retrieveAvailablilty
startTime
endTime
_retrieveCertificates
_retrieveAvailablilty
_emailAddresses
_startTime
_endTime
T@"NSArray",&,N,V_emailAddresses
TB,N,V_retrieveCertificates
TB,N,V_retrieveAvailablilty
T@"NSDate",&,N,V_startTime
T@"NSDate",&,N,V_endTime
mResolvedEmailToX509Certs
appendString:
certificatesStatus
appendFormat:
mergedFreeBusy
availabilityStatus
setMResolvedEmailToX509Certs:
resolvedEmailToX509Certs
addCert:forEmailAddress:
setCertificatesStatus:
setAvailabilityStatus:
setMergedFreeBusy:
_certificatesStatus
_availabilityStatus
_mergedFreeBusy
_mResolvedEmailToX509Certs
Tq,N,V_certificatesStatus
T@"NSMutableDictionary",&,N,V_mResolvedEmailToX509Certs
Tq,N,V_availabilityStatus
T@"NSString",&,N,V_mergedFreeBusy
T@"NSDictionary",R,N
remoteID
from
setAddressListForSender:
date
systemTimeZone
dateWithCalendarFormat:timeZone:
setHeader:forKey:
setAddressListForTo:
setAddressListForCc:
setAddressListForBcc:
replyTo
setAddressList:forKey:
encodedHeaders
appendData:
body
displayTo
importance
read
flagged
bodyType
bodySize
bodyTruncated
messageClass
attachments
meetingRequestUUID
meetingRequestMetaData
meetingRequestIsActionable
threadTopic
conversationId
conversationIndex
lastVerb
sender
isDraft
clientID
instanceID
preview
readIsSet
flaggedIsSet
verbIsSet
smimeType
rfc822Data
dateWithTimeIntervalSinceNow:
getPendingQueryQueue
objectAtIndexedSubscript:
consumer
removeObjectAtIndex:
_reallyPerformSearchQuery:
_dequeueQuery
performSelector:withObject:afterDelay:
timeIntervalSinceNow
objectAtIndex:
_reallyCancelSearchQuery:
_reallyCancelPendingSearchQuery:
arrayWithArray:
_reallyCancelAllSearchQueries
_reallySearchQueriesRunning
performSearchQuery:
cancelSearchQuery:
cancelAllSearchQueries
searchQueriesRunning
supportsMailboxSearch
supportsEmailFlagging
searchQuery:finishedWithError:
account
iOSLegacyIdentifier
externalIdentifierString
markedForDeletion
removeAccount:
addAccount:
setMarkedForDeletion:
legacyIdentifier
initWithAccount:
_markedForDeletion
_account
T@"CNAccount",R,N,V_account
TB,N,V_markedForDeletion
containsObject:
sharedConnection
array
registerForInterrogationWithBlock:
accountWithIdentifier:completion:
accountIdentifiersEnabledForDataclasses:withAccountTypeIdentifiers:completion:
accountsWithAccountType:completion:
accountTypeWithIdentifier:completion:
_daAccountsWithAccountTypeIdentifiers:enabledForDADataclasses:filterOnDataclasses:withCompletion:
da_loadDAAccountsWithCompletion:
da_loadDAAccountsEnabledForDADataclasses:withCompletion:
da_loadDAAccountsWithAccountTypeIdentifiers:withCompletion:
accountsWithAccountTypeIdentifiers:error:
da_loadDAAccountsWithAccountTypeIdentifiers:enabledForDADataclasses:withCompletion:
da_accounts
da_accountsEnabledForDADataclasses:
da_accountsWithAccountTypeIdentifiers:
da_accountsWithAccountTypeIdentifiers:outError:
da_accountsWithAccountTypeIdentifiers:enabledForDADataclasses:
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
performSelector:withObject:afterDelay:inModes:
da_addNullRunLoopSourceAndPerformSelector:withObject:afterDelay:inModes:
isAppleInternalInstall
currentRunLoop
currentMode
bytes
initWithBytesNoCopy:length:encoding:freeWhenDone:
replaceOccurrencesOfString:withString:options:range:
uppercaseString
characterSetWithCharactersInString:
characterAtIndex:
characterIsMember:
appendBytes:length:
da_dataWithHexString:stringIsUppercase:
da_lowercaseHexStringWithoutSpaces
da_uppercaseHexStringWithoutSpaces
da_dataWithHexString:
processInfo
processName
hasSuffix:
substringToIndex:
rangeOfString:options:
da_stringByRemovingPercentEscapesForUsername
da_removeSlashIfNeeded
da_stringByURLEscapingPathComponent
da_hasPrefixCaseInsensitive:
da_trimWhiteSpace
da_new64ByteGUID
stringWithString:
objectEnumerator
nextObject
DACompactDescription
relativePath
da_rawPath
da_urlBySettingScheme:keepUsername:
da_urlBySettingHost:keepUsername:
da_urlBySettingPort:keepUsername:
da_urlBySettingPath:keepUsername:
whitespaceAndNewlineCharacterSet
stringByTrimmingCharactersInSet:
da_URLWithScheme:host:user:port:uri:
da_isEqualToDAVURL:
da_urlByRemovingUsername
da_urlForLogging
da_urlBySettingScheme:
da_urlBySettingHost:
da_urlBySettingPort:
da_urlBySettingPath:
da_pathWithoutTrailingRemovingSlash
absoluteURL
CDVRawPath
da_leastInfoStringRepresentationRelativeToParentURL:
URLWithString:relativeToURL:
da_absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:
_CFURLRequest
_initWithCFURLRequest:
DARequestByApplyingStorageSession:
standardUserDefaults
boolForKey:
allKeys
DAMergeOverrideDictionary:
DAObjectForKeyCaseInsensitive:
DAExtendedDescription
fileSystemRepresentation
writeToFile:atomically:
queuedExclusiveTasks
addObjectsFromArray:
activeExclusiveTask
independentTasks
mQueuedTasks
activeQueuedTask
modalHeldActiveQueuedTask
setAccount:
setState:
invalidate
_populateVersionDescriptions
_version
submitExclusiveTask:toFrontOfQueue:
setTaskManager:
state
cancelTaskWithReason:underlyingError:
xpcTransactionTimer
setXpcTransactionTimer:
transactionId
setActiveExclusiveTask:
insertObject:atIndex:
_schedulePerformTask:
_makeStateTransition
_requestCancelTasksWithReason:
taskManagerDidAddTask:
heldIndependentTasks
setActiveQueuedTask:
cancelTask:withUnderlyingError:
allTasks
cancelTask:
managerIdleTimer
setManagerIdleTimer:
userInitiatedSyncTimer
setUserInitiatedSyncTimer:
_cancelTasksWithReason:
modalHeldIndependentTasks
activeModalTask
queuedModalTasks
shouldForceNetworking
_taskForcesNetworking:
_taskInQueueForcesNetworkConnection:
taskManagerWillRemoveTask:
_releasePowerAssertionForTask:
setModalHeldActiveQueuedTask:
_performTask:
cancelPreviousPerformRequestsWithTarget:selector:object:
_startModal:
setActiveModalTask:
_reactivateHeldTasks
_scheduleStartModal:
_hasTasksForcingNetworkConnection
_useOpportunisticSocketsAgain
initWithFireDate:interval:target:selector:userInfo:repeats:
addTimer:forMode:
_hasTasksIndicatingARunningSync
_clearUserInitiatedSyncTimer
_endXpcTransaction
isShutdown
cancelTasksDueToOnPowerMode
_retainPowerAssertionForTask:
performTask
requestCancelTaskWithReason:
startModal
lastObject
_scheduleSelector:withArgument:
cancelPreviousPerformRequestsWithTarget:
shouldHoldPowerAssertion
powerAssertionGroupID
retainPowerAssertion:withGroupIdentifier:
releasePowerAssertion:
queuedTasks
_useFakeDescriptions
deviceType
userAgent
server
OAuth2Token
accountPersistentUUID
submitExclusiveTask:
submitIndependentTask:
submitQueuedTask:
cancelAllTasks
_logSyncEnd
taskDidFinish:
taskRequestModal:
taskEndModal:
taskIsModal:
setPowerAssertionGroupID:
setQueuedExclusiveTasks:
setIndependentTasks:
setHeldIndependentTasks:
setModalHeldIndependentTasks:
setMQueuedTasks:
setQueuedModalTasks:
_transaction
_daActivity
_state
_activeModalTask
_activeQueuedTask
_powerAssertionGroupID
_queuedExclusiveTasks
_activeExclusiveTask
_independentTasks
_heldIndependentTasks
_modalHeldIndependentTasks
_mQueuedTasks
_modalHeldActiveQueuedTask
_queuedModalTasks
_managerIdleTimer
_userInitiatedSyncTimer
_xpcTransactionTimer
T@"NSMutableArray",&,N,V_queuedExclusiveTasks
T@"<DATask>",&,N,V_activeExclusiveTask
T@"NSMutableSet",&,N,V_independentTasks
T@"NSMutableSet",&,N,V_heldIndependentTasks
T@"NSMutableSet",&,N,V_modalHeldIndependentTasks
T@"NSMutableArray",&,N,V_mQueuedTasks
T@"<DATask>",&,N,V_modalHeldActiveQueuedTask
T@"<DATask>",&,N,V_activeQueuedTask
T@"NSMutableArray",&,N,V_queuedModalTasks
T@"<DATask>",&,N,V_activeModalTask
Ti,N,V_state
T@"NSTimer",&,N,V_managerIdleTimer
T@"NSTimer",&,N,V_userInitiatedSyncTimer
T@"NSTimer",&,N,V_xpcTransactionTimer
T@"DAAccount",W,N,V_account
T@"NSArray",R,N
T@"NSString",C,N,V_powerAssertionGroupID
setContexts:
setGroupIdentifierToContexts:
setContextToGroupIdentifier:
setHeldAsideContexts:
setHeldAsideGroupIdentifiers:
setContextToPowerAssertionRef:
contexts
countForObject:
heldAsideContexts
heldAsideGroupIdentifiers
groupIdentifierToContexts
contextToGroupIdentifier
_retainAssertionForContext:
_releaseAssertionForContext:
contextToPowerAssertionRef
vendDaemons:
powerAssertionRetainCount:
_contexts
_groupIdentifierToContexts
_contextToGroupIdentifier
_heldAsideGroupIdentifiers
_heldAsideContexts
_contextToPowerAssertionRef
T@"NSCountedSet",&,N,V_contexts
T@"NSMapTable",&,N,V_groupIdentifierToContexts
T@"NSMapTable",&,N,V_contextToGroupIdentifier
T@"NSMutableSet",&,N,V_heldAsideGroupIdentifiers
T@"NSCountedSet",&,N,V_heldAsideContexts
T@"NSMapTable",&,N,V_contextToPowerAssertionRef
performMailboxRequest:mailbox:previousTag:clientWinsOnSyncConflict:isUserRequested:consumer:
performMailboxRequests:mailbox:previousTag:clientWinsOnSyncConflict:isUserRequested:consumer:
initWithDAAccount:
cancelTaskWithID:
startup
mailboxes
supportsConversations
supportsDraftFolderSync
supportsSmartForwardReply
supportsUniqueServerId
mailNumberOfPastDaysToSync
setMailNumberOfPastDaysToSync:
generatesBulletins
setGeneratesBulletins:
customSignature
setCustomSignature:
monitorFoldersForUpdates:
monitorFoldersForUpdates:persistent:
stopMonitoringFoldersForUpdates:
stopMonitoringAllFolders
folderIDsThatExternalClientsCareAboutWithTag:
folderIDsThatExternalClientsCareAboutForDataclasses:withTag:
setFolderIdsThatExternalClientsCareAboutAdded:deleted:foldersTag:
sendMessageWithRFC822Data:messageID:outgoingMessageType:originalMessageFolderID:originalMessageItemID:originalMessageLongID:originalAccountID:useSmartTasksIfPossible:isUserRequested:consumer:context:
sendSmartMessageWithRFC822Data:messageID:outgoingMessageType:originalMessageFolderID:originalMessageItemID:originalMessageLongID:originalAccountID:replaceOriginalMime:isUserRequested:consumer:context:
performMailboxRequest:mailbox:previousTag:isUserRequested:consumer:
performMailboxRequests:mailbox:previousTag:isUserRequested:consumer:
performMoveRequests:consumer:
performFetchAttachmentRequest:consumer:
performFetchMessageSearchResultRequests:consumer:
performResolveRecipientsRequest:consumer:
performFolderChange:isUserRequested:
_newASPolicyKeyNotification:
_daemonDiedNotification:
_folderUpdatedNotification:
_folderHierarchyChanged
_foldersThatExternalClientsCareAboutChanged
_accountPasswordChanged
foldersTag
newDataHandlerForDataclass:container:changeTrackingID:
initWithContainer:changeTrackingID:
setContainer:
getIdFromLocalObject:
copyLocalObjectFromId:
saveContainer
copyOfAllLocalObjectsInContainer
drainContainer
wipeServerIds
drainSuperfluousChanges
openDB
closeDBAndSave:
getDAObjectWithLocalItem:serverId:account:
getDAExceptionObjectWithLocalItem:originalEvent:account:
container
setChangeTrackingID:
_container
_changeTrackingID
T@"NSString",C,N,V_changeTrackingID
T^v,N,V_container
mainRunLoop
sharedRunLoop
T@"NSRunLoop",R,N
waiter
setWaiter:
completionHandler
setCompletionHandler:
dataclasses
setDataclasses:
waiterNum
_waiter
_dataclasses
_completionHandler
_waiterNum
T@"<DADataclassLockWatcher>",&,N,V_waiter
T@?,C,N,V_completionHandler
Tq,N,V_dataclasses
Ti,R,N,V_waiterNum
setEventsWaiters:
setWaiterIDsExpectingEventsLock:
setEventsLockHolder:
allValues
initWithCapacity:
_canWakenWaiter:
isInHoldingPattern
_abortWaiterForWrappers:
_setUnitTestHackRunLoopMode:
_notifyWaitersForDataclasses:
_registerWaiter:forDataclassLocks:preempt:completionHandler:
relinquishLocksForWaiter:dataclasses:moreComing:
_sendAllClearNotifications
sharedGateKeeper
registerPreemptiveWaiter:forDataclassLocks:completionHandler:
registerWaiter:forDataclassLocks:completionHandler:
unregisterWaiterForDataclassLocks:
claimedOwnershipOfDataclasses:
claimedOwnershipOfEvents
setClaimedOwnershipOfEvents:
eventsLockHolder
eventsWaiters
waiterIDsExpectingEventsLock
unitTestHackRunLoopMode
setUnitTestHackRunLoopMode:
_claimedOwnershipOfEvents
_eventsLockHolder
_eventsWaiters
_waiterIDsExpectingEventsLock
_unitTestHackRunLoopMode
TB,N,V_claimedOwnershipOfEvents
T@"<DADataclassLockWatcher>",&,N,V_eventsLockHolder
T@"NSMutableArray",&,N,V_eventsWaiters
T@"NSMutableSet",&,N,V_waiterIDsExpectingEventsLock
T@"NSString",&,N,V_unitTestHackRunLoopMode
predicateForAccountWithExternalIdentifier:
contactStore
accountsMatchingPredicate:error:
firstObject
initWithExternalIdentifier:
predicateForAccountForContainerWithIdentifier:
initWithContactStore:
accountWithExternalIdentifier:createIfNecessary:
allAccounts
accountForContainerWithIdentifier:
_contactStore
T@"CNContactStore",R,N,V_contactStore
initWithLabel:
label
_label
_transactionId
T@"NSString",R,N,V_label
T@"NSString",R,N,V_transactionId
getCFRunLoop
setGroupIdentifier:
setHandler:
setCallbackQueue:
showUserNotification:groupIdentifier:callbackQueue:sourceRunLoop:completionBlock:
groupIdentifier
handler
callbackQueue
_groupIdentifier
_handler
_callbackQueue
T@"NSString",C,N,V_groupIdentifier
T@?,C,N,V_handler
T@"NSObject<OS_dispatch_queue>",N,V_callbackQueue
mapTableWithStrongToStrongObjects
setDelegate:
sharedLogger
logICSMessage:atLevel:
registerWithiCalendar
initWithAddressBook:
providerWithContactStore:
providerWithAddressBook:
defaultTrustManager
actionForTrust:forHost:andService:
delegate
allowTrust:forHost:service:
initWithObjects:
rawTrustResultForSSLTrust:hostname:service:
haveWarnedAboutCert:forHost:
promptForAllCerts
_serverSuffixesToAlwaysFail
substringFromIndex:
enumerateObjectsUsingBlock:
setTrust:
setService:
setConnectionDisplayName:
setHaveWarnedAboutCert:forHost:
showPromptWithOptions:responseBlock:
protectionSpace
serverTrust
initWithTrust:
useCredential:forAuthenticationChallenge:
continueWithoutCredentialForAuthenticationChallenge:
handleTrust:forHost:forAccount:withCompletionBlock:
_actionForTrust:host:service:
haveWarnedAboutCertDict
setHaveWarnedAboutCertDict:
_delegate
_haveWarnedAboutCertDict
T@"<DATrustHandlerDelegate>",W,N,V_delegate
T@"NSMutableDictionary",&,N,V_haveWarnedAboutCertDict
initWithABAccout:
T^v,R,N,V_account
filename
DAManagedDefaultForKey:
setFilename:
_ensureCustomLogFile
enabled
removeItemAtPath:error:
initWithFilename:
logSnippet:
slurpAndRemoveLookasideFile:prefixString:suffixString:
_filename
T@"NSString",&,N,V_filename
mutableContainer
externalModificationTag
setExternalModificationTag:
externalSyncTag
setExternalSyncTag:
externalSyncData
setExternalSyncData:
meIdentifier
setMeIdentifier:
restrictions
setRestrictions:
setMarkedAsDefault:
deleteContainer:
updateContainer:
initWithCNContainer:
markedAsDefault
_markedAsDefault
_mutableContainer
T@"CNMutableContainer",R,N,V_mutableContainer
TB,N,V_markedAsDefault
UTF8String
_init
dictionary
babysitterEnabled
distantPast
setDateFormat:
stringFromDate:
timeIntervalSinceReferenceDate
numberWithDouble:
setValue:forKey:
doubleValue
dateWithTimeIntervalSinceReferenceDate:
_diagnosticReportWithWaiterID:failureCount:
_l_reloadBabysitterWaitersWithRefreshingWaitersPrefs:failedWaitersPrefs:restrictedWaitersPrefs:
initWithDictionary:copyItems:
_reloadBabysitterProperties
_l_incrementRefreshCountForWaiterID:operationName:
_l_decrementRefreshCountForWaiter:forOperationWithName:
accountShouldContinue:
_incrementRefreshCountForWaiterID:operationName:
registerAccount:forOperationWithName:
unregisterAccount:forOperationWithName:
initWithBlock:
_l_decrementRefreshCountForWaiterID:operationName:
timeIntervalSinceDate:
_l_giveAccountWithIDAnotherChance:
_populatedStringDictionaryWithWaitersDictionary:
dataWithJSONObject:options:error:
tokenByRegisteringAccount:forOperationWithName:
statusReportWithCompletionBlock:
buildVersion
setBuildVersion:
l_refreshingWaiters
setL_refreshingWaiters:
l_failedWaiters
setL_failedWaiters:
l_restrictedWaiters
setL_restrictedWaiters:
lock
_lock
_buildVersion
_l_refreshingWaiters
_l_failedWaiters
_l_restrictedWaiters
T@"NSString",&,N,V_buildVersion
T@"NSMutableDictionary",&,N,V_l_refreshingWaiters
T@"NSMutableDictionary",&,N,V_l_failedWaiters
T@"NSMutableDictionary",&,N,V_l_restrictedWaiters
T{os_unfair_lock_s=I},R,N,V_lock
unregisterBlock
setUnregisterBlock:
_unregisterBlock
T@?,C,N,V_unregisterBlock
addressBook
_addressBook
T^v,R,N,V_addressBook
@24@0:8@16
v16@0:8
i16@0:8
v20@0:8i16
B16@0:8
@16@0:8
v24@0:8@16
B24@0:8@16
v28@0:8B16@20
B24@0:8q16
v28@0:8B16q20
q16@0:8
v32@0:8@16@24
i24@0:8@16
v28@0:8i16@20
@20@0:8B16
q24@0:8@16
v20@0:8B16
Vv24@0:8@16
v24@0:8q16
v40@0:8@16@24@32
@24@0:8q16
v24@0:8@?16
v28@0:8@16B24
^{__CFData=}24@0:8@16
v32@0:8^{__CFData=}16@24
^{__CFURLStorageSession=}16@0:8
@"ACAccount"
@"DAStatusReport"
@"NSMapTable"
^{__CFURLStorageSession=}
@"NSString"
@"DATaskManager"
@"NSObject<OS_xpc_object>"
@"DATrustHandler"
@"NSArray"
@"NSMutableDictionary"
@"NSMutableArray"
@"NSObject<OS_dispatch_queue>"
@"NSDate"
B32@0:8@16@?24
v32@0:8@16@?24
v48@0:8@16@24@32@?40
v68@0:8@16@24@32@40B48B52B56@60
B32@0:8@16@24
@32@0:8@16@24
@56@0:8@16@24@32@40@48
@48@0:8@16@24Q32@40
@40@0:8@16q24@32
@"<DATransactionMonitorDelegate>"
v32@0:8:16@24
@40@0:8@16@24^@32
#24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@40@0:8Q16@24@32
@48@0:8Q16@24@32@40
@24@0:8Q16
Q16@0:8
v24@0:8Q16
@56@0:8Q16@24@32@40@48
@48@0:8Q16@24@32q40
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"CNSaveRequest"16
^v16@0:8
v24@0:8@"NSString"16
@"NSData"16@0:8
v24@0:8@"NSData"16
@"CNContainer"16@0:8
@24@0:8^v16
@"NSHashTable"
B20@0:8i16
^v20@0:8i16
i24@0:8^v16
^{__CFDictionary=}24@0:8@16
^{__CFDictionary=}28@0:8@16i24
@36@0:8@16i24B28B32
B44@0:8@16@24@32i40
B36@0:8@16@24i32
@40@0:8Q16Q24@32
@24@0:8i16i20
@32@0:8i16@20i28
@48@0:8i16@20@28@36i44
@40@0:8@16@24@32
@32@0:8i16@20B28
@"DAMailMessage"
@36@0:8i16@20@28
@"DAMessageMoveRequest"
@48@0:8@16B24B28@32@40
@"CNAccount"
v44@0:8@16q24B32@?36
v32@0:8q16@?24
v40@0:8@16q24@?32
@32@0:8@16^@24
@32@0:8@16q24
v48@0:8:16@24d32@40
@28@0:8@16B24
@52@0:8@16@24@32i40@44
@44@0:8@16@24i32@36
@24@0:8^{__CFURLStorageSession=}16
@"DATransaction"
@"DAActivity"
@"DAAccount"
@"<DATask>"
@"NSMutableSet"
@"NSTimer"
v24@0:8#16
Q24@0:8@16
@"NSCountedSet"
Vv20@0:8i16
Vv20@0:8B16
Vv28@0:8@16B24
@24@0:8^@16
@32@0:8q16^@24
B40@0:8@16@24@32
i92@0:8@16@24i32@36@44@52@60B68B72@76@84
i52@0:8@16@24@32B40@44
i56@0:8@16@24@32B40B44@48
i32@0:8@16@24
Vv24@0:8@"DASearchQuery"16
@"NSArray"16@0:8
Vv24@0:8@"NSData"16
Vv24@0:8@"NSString"16
Vv24@0:8@"NSArray"16
Vv28@0:8@"NSArray"16B24
@"NSSet"24@0:8^@16
@"NSSet"32@0:8q16^@24
B40@0:8@"NSSet"16@"NSSet"24@"NSString"32
i92@0:8@"NSData"16@"NSString"24i32@"NSString"36@"NSString"44@"NSString"52@"NSString"60B68B72@"<DAMessageSendConsumer>"76@84
i52@0:8@"DAMailboxRequest"16@"NSString"24@"NSString"32B40@"<DAMailboxRequestConsumer>"44
i52@0:8@"NSArray"16@"NSString"24@"NSString"32B40@"<DAMailboxRequestConsumer>"44
i56@0:8@"DAMailboxRequest"16@"NSString"24@"NSString"32B40B44@"<DAMailboxRequestConsumer>"48
i56@0:8@"NSArray"16@"NSString"24@"NSString"32B40B44@"<DAMailboxRequestConsumer>"48
i32@0:8@"NSArray"16@"<DAMessageMoveRequestConsumer>"24
i32@0:8@"DAMessageFetchAttachmentRequest"16@"<DAMessageFetchAttachmentConsumer>"24
i32@0:8@"NSArray"16@"<DAMailboxFetchSearchResultConsumer>"24
i32@0:8@"DAResolveRecipientsRequest"16@"<DAResolveRecipientsConsumer>"24
v28@0:8@"DAFolderChange"16B24
@"DAFolder"16@0:8
B32@0:8@"NSData"16@"NSString"24
@"NSString"40@0:8@"NSData"16@"NSString"24^@32
Vv24@0:8@"NSNotification"16
@40@0:8q16^v24@32
@32@0:8^v16@24
v24@0:8^v16
B20@0:8B16
@40@0:8^v16@24@32
@?16@0:8
@"<DADataclassLockWatcher>"
v36@0:8@16q24B32
@"CNContactStore"
v56@0:8^{__CFUserNotification=}16@24@32@40@?48
v32@0:8@16q24
v32@0:8@"NSString"16q24
i40@0:8^{__SecTrust=}16@24@32
v48@0:8^{__SecTrust=}16@24@32@?40
B40@0:8@16@24@?32
@"<DATrustHandlerDelegate>"
@"CNMutableContainer"
v28@0:8@16i24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@24@0:8@?16
