SiriPhone
FaceTimeNoFanOut
CRRHandleRecommendation
FaceTimeInvitation
v8@?0
com.apple.TelephonyUtilities.PhoneIntentHandler.%@
B16@?0@"TUConversation"8
Voicemail search performed on a mock voicemail handler with no mock voicemails
B24@?0@"<SearchCallHistoryVoicemail>"8@"NSDictionary"16
Attempting to add a score for an entity not part of original entity set
Attempting to add a score reason for an entity not part of the original entity set
%ld: %@
Resolved %ld entities. Result = %@
%ld%@: %@
 (chosen)
Success
Confirm
Disambiguate
Unknown
B16@?0@"<SearchCallHistoryVoicemail>"8
B16@?0@"VMVoicemail"8
com.apple.siri.phone.IntentHandler.StartCall.ResolveContacts.SiriMatches
siriMatchesCount
matchesByIdCount
matchesByNameCount
siriLocale
@"NSDictionary"8@?0
v12@?0B8
v32@?0@"IntentHandlerAndIdentifier"8Q16^B24
answered = %d
originated = %d
duration = 0
duration > %f
date > %@
date < %@
remoteParticipantHandles.@count = %d
ANY remoteParticipantHandles.normalizedValue == %@
ANY remoteParticipantHandles.normalizedValue IN %@
ANY remoteParticipantHandles.value == %@
ANY remoteParticipantHandles.value IN %@
ANY remoteParticipantHandles.value ==[c] %@
service_provider = %@
call_category == %@
read == %d
NoLinkGenerated
LocalEmergency
NonLocalEmergency
None
Unset
1190
1191
1195
1515
1717
1777
1818
2020
9999
10111
Unexpected score based contact resolution result type.
contacts
emergency contact
Persons matching resolved handle should not be nil.
Persons matching handle to confirm should not be nil.
Persons matching handle to disambiguate should not be nil.
Unexpected score based handle resolution result type.
Call Recency
Favorites entry for telephony call with this handle
Favorites entry for this contact
InCallService
/Applications/InCallService.app
B24@?0@"INPerson"8@"NSDictionary"16
v32@?0@"CNContact"8@"NSArray"16^B24
true
false
UseLegacyContactResolution
UseLegacyHandleResolution
SiriInference
native_flow_contact_resolution
found_in_app_contacts
v16@?0@"IMSPIChat"8
com.apple.messages.imcore.spi.qos-unspecified
Contacts map did not contain UUID of recommended contact.
v16@?0@"NSNotification"8
v24@?0@"TUConversationLink"8@"NSError"16
com.apple.calls.intenthandler
Default
SiriPhone/FaceTimeNoFanOut: %@
SiriPhone/crrHandleRecommendation: %@
SiriPhone/FaceTimeInvitation: %@
sortMatchingContactsWithIdentifiers
Person contains %ld contact IDs. Person: %@
Looking up contact in the contact store matching identifiers: %@
Found %ld contacts matching siriMatches
Found contacts matching siriMatches
siriMatches contactIDs don't correspond to any contacts in address book.
Looking up contact in the contact store by names
Error performing contact search: %@
contactsMatchingIdentifiers
Error performing contact search by name: %@
Found %ld contacts in search by name
contactsMatchingName
Could not determine ISO Country Code from Mobile Country Code: %@
Could not determine mobile country code from Core Telephony Subscription Context. Error: %@
Could not determine Core Telephony Subscription Info. Error: %@
Resolved relevant ISO country codes: %@
[WARN] Cellular service is not available for SIM. Registration Status: %@ Subscription context: %@
Could not determine registration status from Core Telephony Subscription Context. Error: %@
[WARN] Determined cellular service is unavailable.
SimpleConversationFilter: matchesCallGroup=%@
SimpleConversationFilter: matchesParticipantCount=%@
handlesMatchingPerson
Looking up contact in the contact store matching handle: %@
Could not construct contact search predicate from handle: %@
No contacts match handle
[WARN] Multiple contacts match handle, using the first one arbitrarily
personMatchingHandle
App supports INStartCallIntent - prefer this over deprecated calling intents.
Error when fetching application record for appId: %@, error: %@
Got a SearchCallHistory intent: %@
Start Date  : %@
End Date    : %@
Recipient   : %@
Capabilities: %lx (audio: %d | video: %d)
PreferredCallProvider: %@
Types       : %lx
Unseen     : %@
Type indicates we should be searching for voicemail. Matching voicemails to this intent
Rejecting voicemail because it is deleted or trashed: %@
Rejecting voicemail because a recipient was specified, but this voicemail has no senderDestinationID: %@
Rejecting voicemail because senderDestinationID does not match requested recipient: %@
Rejecting voicemail because voicemail.date is before requested startDate: %@
Rejecting voicemail because voicemail.date is after requested endDate: %@
Rejecting voicemail because only unread voicemails were requested, but this one is marked as read: %@
Rejecting voicemail because only read voicemails were requested, but this one is marked as unread: %@
Truncated matching voicemails to %ld objects: %@
Voicemails (%@) -> callRecords (%@)
Visual Voicemail is not set up yet
Calling completion block with response: %@
resolveRecipientForSearchCallHistory: %@
No recipient specified, returning notRequired
Handle is present. Simply using the recipient to resolve with: %@
No contacts match the specified recipient, returning unsupported (a.k.a. notFound)
Recipient contains siriMatches, preserving those and returning success
Resolving with: %@
[WARN] Could not determine voicemail.senderDestinationID
[WARN] person in callRecord is nil
Performing call history lookup
Unhandled call record type options: %ld
Unhandled call capability: %ld
Using predicate: %@
Call history search results: %@
callRecords: %@
Ending playback, e.g. user dismissed siri
handlePlayVoicemail: %@
VVM is online and subscribed.
Found voicemail with the given identifier (%@). Returning success
Voicemail completed playing. Calling completion block with success response: %@
[WARN] Screen time restricted playback of voicemail: %@
[WARN] Voicemail with the given identifier was not found
[WARN] VVM is not online and subscribed. Returing that configuration is required
Attempting to play voicemail: %@
Building audio session
Setting category to: %@
Could not set category: %@
Activating audio session: %@
Activation succeeded
Activation failed: %@
Generated AVAudioPlayer with voicemail data: %@ error: %@
Voicemail finished playing successfully: %d
Calling completion block
Playing the voicemail
audioPlayerDidFinishPlaying: successfully: %d
Intent Extension initialized
No handler for intent: %@
[WARN] Intent does not have an identifier set. Creating new handler.
Found existing handler for intent identifier: %@.
Existing handler not found for intent identifier: %@. Creating new handler.
[WARN] Attempting to update recently used intent handler cache for an intent with no intentIdentifier. Ignoring.
Received Siri request to identify incoming caller: %@
An incoming call exists with handle %@
Incoming call is from person: %@
Incoming caller is a private number
No incoming call exists. Looking up last missed call...
Last missed call is: %@
Inferring outgoing callStatus requirement from the presence of redial destination type and unspecified recordTypeForRedialing.
Unexpected callTypes received, ignoring value.
No preferredCallProvider specified and thirdParty redial is enabled, not filtering by provider
No preferredCallProvider specified and thirdParty redial is not enabled. Filtering for 1P calls.
Unrecognized PreferredCallProvider enum value, skipping provider predicate.
ThirdParty redial is enabled, using redial predicate that includes search for non-normalized handle values.
ThirdParty redial is not enabled, using normal recent call predicate that includes search for non-normalized handle values.
Facetime No Fan Out is true
crrHandleRecommendation is true
 enableTelemetry=YES 
Handling start call intent: %@
FaceTimeInvitation Enabled for faceTime link: %@
Calling completion block with response: %@ user activity: %@
handleStartCall
found a FaceTimeable personHandle: %@
found a non-FaceTimeable personHandle: %@
Determining response for dial request: %@
Redial/callback to 3P call history entry.
useDeprecatedCallingIntents: %@
Dial request was restricted due to screen time policy.
Dial request was restricted due to downtime policy.
The call is initiated on a HomePod but the companion device already has a call ringing.
The call is initiated on a HomePod but the companion device already has a call in progress.
Dial request was for FaceTime provider and video but FaceTime video is not enabled. Returning reponse that app configuration is required
Dial request was for FaceTime provider and audio but FaceTime audio is not enabled. Returning reponse that app configuration is required
User activity was nil. Returning failure.
Dial Request invalid: %@
Emergency call requested, will always try to place the call, skipping provider and cellular service availability checks.
Call requested from Watch, will always try to place the call, skipping provider and cellular service availability checks.
Dial Request was for Telephony, but supportsTelephonyCalls was not true
Dial request was for telephony provider but airplane mode is enabled
Dial request was for telephony provider but no cellular service was available
responseForDialRequest
Determining response for join request: %@
Join request was restricted due to some restrictions from all members.
Join request was for FaceTime provider and video but FaceTime video is not enabled. Returning reponse that app configuration is required
Join request was for FaceTime provider and audio but FaceTime audio is not enabled. Returning reponse that app configuration is required
responseForJoinRequest
Confirm start audio call: %@
Join request was restricted due to some restrictions with some members (but not all).
Even though destinationType is normal, user specifically asked for a emergency number
Contact to redial/call back is an emergency number. Requiring intent confirmation.
Contact to redial/call back is NOT an emergency number.
Making an emergency call, sending UserConfirmationRequired with emergency flag = YES
confirmStartCall
Resolving callRecordToCallBack for start call: %@
Calling completion block with result: %@
resolveCallRecordToCallBack
Resolve destination type for start call: %@
%@ is an emergency handle. Resolving to an emergency call
%@ is not an emergency handle. Do not need special resolving.
Could not determine if handle to dial is an emergency handle because handle has not yet been resolved
resolveDestinationType
Intent's contact has no display name. Looking up the list of emergency handles available on this device
There are more than one number that could be dialed. Prompting to disambiguate between them using these people: %@
Only a single emergency number to call. Resolving to that number.
[WARN] User asked to call emergency services. Emergency provider does not have multiple handles, and call can be completed without specifying one. Returning not required.
Resolving contacts for start call intent: %@
[WARN] Intent includes an emergency person and a non-emergency person. Returning success for non-emergency person so emergency person can be properly resolved. Person: %@
Detected foreign emergency label, calling completion block early: %@
Resolution not required for voicemail destination
Resolution for emergency destination
Intent's contact has a personHandle.value set on an emergency call. Resolving to that value.
Resolution for redial
recentCall for group facetime: %@
Converted INCallRecord has no caller. Returning unsupported
Calling completion block with resolution results: %@
resolveContacts
Resolving call capability for start call intent: %@
Returning call capability resolution result: %@
resolveCallCapability
[WARN] Unable to infer callCapability from call to redial because the recent call was nil
Inferring audio call capability from call to redial
Inferring video call capability from call to redial
[WARN] Unable to infer callCapability from call to redial because media type of that call was unknown.
Call capability is already set, no inferring needed
Inferring audio callCapability because provider is Telephony.
Inferring video callCapability because provider is FaceTime and video is supported.
Inferring audio callCapability because provider is FaceTime and audio is supported
[WARN] Unable to infer callCapability. Provider is Facetime, but neither facetime audio nor video calling are supported.
Changing callCapability from video to audio because the current idiom only supports audio
Returning call Capability %ld
Facetime Video calling is unavailable, returning call capability unsupported reason video call unsupported.
deviceIdiom %ld is an audio only device idiom.
This Mac has no attached camera.
deviceIdiom %ld supports video calling.
Call capabilities do not support FaceTime video calls
Devices primary display is disabled, e.g. user is on carDND mode. 
GroupFaceTime is disabled for China SKU devices
Resolving faceTimeLink for start call intent: %@
Resolving faceTimeLink for person: %@
Returning empty string as this is a telephony call or featureflag is disabled or destinations was empty
No non-FaceTime handles found. Returning nil.
This is watchOS or tvOS. Sending a placeholder string for returning unsupported dialog
tuHandle generation failed and nil was returned. Setting empty string.
Link generation failed and nil was returned. Setting empty string.
Returning FaceTimeLink resolution result: %@
Resolving call provider for start call intent: %@
The call provider %@ for redial or call back is not supported
Telephony call was requested from a watch or for an emergency call and telephony is not supported. isWatch: %d, isEmergencyCall: %d
Telephony call was requested, but supportsTelephonyCalls was false
FaceTime provider is blocked in settings or by managed configuration
FaceTime is not supported by this device's hardware or carrier configuration
FaceTime audio calling service is not available, likely because user is not signed in
FaceTime audio call was requested, but supportsFaceTimeAudioCalls was false, and the request passed checks for FT settings-based restrictions and FT provider availability.
FaceTime video calling service is not available, likely because user is not signed in
FaceTime video call was requested, but supportsFaceTimeVideoCalls was false, and the request passed checks for FT settings-based restrictions and FT provider availability.
Group FaceTime video calls are not supported by this device's hardware or carrier configuration
Returning call provider resolution result: %@
resolvePreferredCallProvider
Looking up recentCallRecordToRedial
Using previously-resolved INCallRecord from callRecordToCallBack
Looking up recentCall by constructing query from callRecordFilter
Looking up recentCall by constructing query from intent
recentCallToRedial
Expected to map CHRecentCall to INCallRecord 1:1
predicate for recentCall: %@
callHistoryDBCallToRedial
Found recentCall: %@
Resolution needs a value for zero contacts
Attempting to resolve more than one call participant. Returning multiple contacts unsupported for each recipient.
Handle has the LocalEmergency flag. Resolving success. %@ with type: %@
Handle %@ is in the global emergency numbers list. EmergencyType is %@
It's unclear if the user literally wanted this number, or if they meant to call emergency services. Disambiguate between local and nonlocal emergency services.
Returning _INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation with alternative items: %@
Number is on the global emergency numbers list, but INPersonHandle already has the emergencyType set: %@
Resolved to 1 and only 1 suggested contact with only 1 handle. Confirming the contact...
User has called the handle of the suggested contact before. Skip confirmation...
User has not called the handle of the suggested contact before. Confirm with the user about the suggested contact...
Number is not on the global emergency numbers list
Requested handle type is unknown, but preferredCallProvider is phone. Inferring handle type of phone number.
PreferredCallProvider is faceTime. Inferring handle type of unknown to present both phone number and email address.
Native flow contact resolver enabled.
Confident match found by NCR, uuid %@
Low-confidence (needsConfirmation) match found by NCR, uuid %@
NCR recommended needsDisambiguation for contacts, but some have the same name. Proceeding to handle disambiguation.
needsDisambiguation recommended by NCR, uuids %@
NCR found no matches for person: %@
Only one matching contact for requested handle -- proceeding to handle disambiguation: %@
Only one matching contact (regardless of requested handle): %@
Using legacy contact resolution
Resolved to %ld contacts, asking the user to disambiguate among persons: %@
ScoreBasedResolutionResult is Disambiguate, but some contacts have the same name. Proceeding to handle disambiguation.
No valid matching handle is found for the resolved contacts and this handle has been requested: %@. will attempt additional matching handles from siri matches.
Resolved to %ld matching contacts with %ld additional matching handles. Contact: %@ Handles: %@
%@ was requested but the contact doesn't an exact match. Using the only alternative instead: %@
Resolved to %ld matching contacts with %ld matching handles. Contact: %@ Handles: %@
None of the resolved contacts have a valid matching handle. Offering all handles as alternatives
Offering all handles as alternatives
Using CRR based recommendation results: %@
No resolution result resolved, adding an unsupported result
Resolved to one CRR recommended handle: %@
Resolved to more than one CRR recommended handle: %@
Resolved to one handle: %@
Resolved contacts all share a handle: treating them as the same person. Contacts: %@
Facetime call contact resolved to multiple handles. Using score based resolution model to resolve handles: %@
Facetime call resolved to multiple handles for a distinct person, preserving ambiguity. Will ring all handles. Person: %@
Facetime call resolved to multiple contacts with the same name, none of which share a handle. Disambiguating between handles.
Resolved to multiple handles, using score based resolution model to resolve handles: %@
Found no matching contact from siriMatches or name search, returning unsupported. Person: %@
Updated contact in intent: %@
resolutionResults: %@
Emergency contacts detected. Inserting personHandles.
Either a mobile handle or an iPhone label was requested without any matching handle. Checking if an alternative for mobile or iPhone handles exists.
Handle %@ is MMI or USSD which is unsupported. Returning error for person: %@
The user requested a potentially invalid phone number or email, returning confirmationRequired.
There is a handle on the single contact. Format the person handle and return success with that person.
Returning confirmationRequired with person: %@
Returning confirmationRequired with person (as upstream contact resolver recommended): %@
Returning success with person: %@
Using legacy handle resolution.
Beginning score based handle resolution.
Completed score based handle resolution.
[WARN] More than one INPerson matches the same handle (e.g. multiple labels with the same number). As either handle will produce the same result, resolving to the first one. %@
[WARN] More than one INPerson matches the same handle (e.g. multiple labels with the same number). As either handle will produce the same result, confirming just the first one. %@
[WARN] More than one INPerson matches the same handle (e.g. multiple labels with the same number). Including those multiples in the disambiguation list. %@
scoreBasedHandleResolution
Beginning call recency for handles check.
Handle %@ was a partipant in recent call %@ with country code %@.
Completed call recency for handles check.
recentCallsMatchingHandles
Beginning favorites for handles check.
No favorites entry for handle %@. No score adjustment.
Completed favorites for handles check.
favoritesAmongHandles
Beginning score based contact resolution.
Completed score based contact resolution.
scoreBasedContactResolution
Beginning call recency for contacts check.
Contact %@ was a partipant in recent call %@ with isoCountryCode %@.
Completed call recency for contacts check.
contactCallRecency
Searching call history for one call matching predicate: %@
callHistoryDBFirstRecencyCheck
Completed initial call history search with result: %@
Calculated oldest relevant date of %@ based on most recent matching call %.0f seconds ago
Searching call history for up to %ld calls matching predicate: %@
callHistoryDBSecondRecencyCheck
Completed second call history search with result: %@
No matching call history for any of the requested handles. No score adjustment.
recentCallsWithHandles
Beginning favorites for contacts check.
No favorites entry for contact %@. No score adjustment.
Completed favorites for contacts check.
favoritesAmongContacts
Found %ld alternatives when dropping label constraint.
Not dropping handle type constraint because the user requested a telephony call.
Found %ld alternatives when dropping handle and label constraint.
Handle is an emergency number, %@ is in the prioritizedSenderIdentities list
Handle is an emergency number, %@ is in the emergencyLabeledHandles list
Handle is an emergency number, %@ is in the unlabeled emergencyHandles list
Handle is not an emergency number: %@
Not applying an implicit handle type filter to an intent with an explicit handle type specified
Not applying an implicit handle type filter to an intent with an explicit call provider specified
Not applying an implicit handle type = phone number filter on a device that doesn't support telephone calls
Not applying an implicit handle type filter because there is already only one matching handle
Multiple handles match call request. Attempting to filter to just phone numbers to resolve ambiguity.
Filtered the results to only phone numbers. Remaining matches: %@
Filtering results to only phone numbers would have produced no results, not filtering.
Have previously confirmed recipient with handle %@
Have previously confirmed recipient with contactIdentifier: %@
Not requiring invalid number confirmation because recipient has already been confirmed.
Not requiring invalid number confirmation because recipient has a nonlocal emergency handle type and has already been confirmed.
Not requiring invalid number confirmation because handle is valid for country code %@
[WARN] Requested handle %@ is not valid for any of the following country codes: %@
Examining call history to determine if there is existing call history with the invalid number.
callHistoryDBForInvalidNumber
Not requiring invalid number confirmation because there are %ld recents call with %@
Did not find any matching calls with: %@
[WARN] Returning YES for shouldRequireInvalidNumberConfirmationForRecipient.
shouldRequireInvalidNumberConfirmation
Not requiring unknown recipient confirmation because recipient has already been confirmed.
Not requiring unknown recipient confirmation because requested recipient was a relation: %@
Not requiring unknown recipient confirmation because requested recipient was a manually dictated handle: %@
Not requiring unknown recipient confirmation because userInput "%@" matches resolved recipients full displayName: "%@"
Not requiring unknown recipient confirmation because requested displayName "%@" matches resolved recipients displayName: "%@"
Not requiring unknown recipient confirmation because userInput "%@" matches resolved recipients long format name: "%@"
Not requiring unknown recipient confirmation because requested recipient displayName "%@" matches resolved recipients long format name: "%@"
Not requiring unknown recipient confirmation because userInput "%@" matches resolved recipients medium format name: "%@"
Not requiring unknown recipient confirmation because requested recipient displayName "%@" matches resolved recipients medium format name: "%@"
Not requiring unknown recipient confirmation because userInput "%@" matches resolved contact formatted name: "%@"
Not requiring unknown recipient confirmation because requested recipient displayName "%@" matches resolved contact formatted name: "%@"
Not requiring unknown recipient confirmation because resolved contact is a favorite. Contact: %@
Searching for recent calls using predicate: %@
callHistoryDBForUnknownRecipient
Not requiring unknown recipient confirmation because there is a recent call with one of the following handles: %@
Did not find a recent calls with any of the following handles: %@
Returning %{public}@ for shouldRequireUnknownRecipientConfirmationForRequestedRecipient.
shouldRequireUnknownRecipientConfirmation
group facetime message callGroups for intent: %@
fetching handles from spiChat: %@
updated contacts: %@
Found a favorites entry matching handle: %@
[WARN] Ignoring favorite for telephony call with an empty phone number: %@
[WARN] Ignoring favorite for telephony call without a phone number: %@
Checking if there is any call ringing currently
is there any call ringing currently? %@
Checking if there is any call in progress.
is there any call in progress? %@
SiriInference/native_flow_contact_resolution: %@
SiriInference/found_in_app_contacts: %@
spiChat person handles: %@
ConversationContactPool: Searching for %@ in caller ContactPool: %@
ConversationContactPool: Searching for %@ in participants ContactPool: %@
ConversationPersonFilter: matchesCaller=%@
ConversationPersonFilter: matchesParticipants=%@
Handling join call intent: %@
Searching for conversationId: %@ among active conversations.
Found matching conversation %@
No matching conversation. Returning failure.
Attaching TUJoinConversationRequest to UserActivity
UserActivity was nil
Confirming join call intent: %@
Resolving join call intent: %@
INCallGroupConversation already resolved.
Searching among active conversations for a matching call.
doesConversationMatch = %@ for TUConversation: %@
Found more than one matching conversation.
Found one matching conversation.
Found no matching conversations.
Calling completion on resolution result: %@
Confirming Siri request to hang up: %@
No calls exist. Returning failure.
Call exists, proceeding to handle HangUp intent.
Handling Siri request to hang up: %@
An incoming call exists. Declining it and returning success: %@
At least one call exists. Hanging up and returning success
No calls exist. Since call was hung up between confirm and handle, return success.
starting dispatch semaphore for TUIDSLookupManagerStatusChangedNotification
ending dispatch semaphore for TUIDSLookupManagerStatusChangedNotification
canonical address: %@
Failed to generate FaceTime link with error %@
Successfully generated FaceTime link: %@
Received Siri request to answer incoming call: %@
Requested to answer specific call but UUID did not match identifier of requested call
Requested identifier: %@, actual identifier: %@
An incoming call exists. Answering it and returning success
Setting endpointIDSDestination: %@
Intent contains an originatingDeviceRapportMediaSystemIdentifier: %@
Intent contains an originatingDeviceRapportEffectiveIdentifier: %@
No incoming call exists. Returning no incoming call. Recent Missed Calls: %@
Before deduping: %ld, After deduping: %ld
All persons have equivalent handle values
Converting CHRecentCall %@ to INCallRecord.
Converted this CHRecentCall previously, using cached converted INCallRecord.
[WARN] Caller ID is blocked
[WARN] Found an entry of unknown type in handleToPerson cache
person added to particpants in callrecord: %@
[WARN] Could not determine remoteParticipantHandle for CHRecentCall
serviceProvider is not FT or telephony - must be a 3P provider.
No serviceProvider found on CHRecentCall - setting preferredCallProvider to unknown.
IntentHandlerFeatureFlags
NSObject
StartCallIntentHandlerUtilities
ContactResolver
DefaultCoreTelephonyDataSource
CoreTelephonyClientSubscriberDelegate
CoreTelephonyDataSource
SimpleConversationFilter
ConversationFilter
TUIntentHandler
MockVoicemailDataSource
SearchCallHistoryVoicemailDataSource
MockVoicemail
SearchCallHistoryVoicemail
ScoreBasedResolver
ScoreBasedResolutionResult
ContactPool
TelephonyUtilities
AppResolver
AppResolving
SearchCallHistoryIntentHandler
INSearchCallHistoryIntentHandling
SearchCallHistoryIntentHandlerDataSource
SiriMatchRecommendation
IntentHandlerCoreAnalyticsLogger
IntentHandlerCoreAnalyticsLogging
PlayVoicemailIntentHandler
AVAudioPlayerDelegate
INPlayVoicemailIntentHandling
IntentRouter
IntentHandlerAndIdentifier
AndConversationFilter
ConversationFilterFactory
IdentifyIncomingCallerIntentHandler
INIdentifyIncomingCallerIntentHandling
IdentifyIncomingCallerIntentHandlerDefaultDataSource
IdentifyIncomingCallerIntentHandlerDataSource
CallHistoryDataSourcePredicate
RecentCallQuery
StartCallIntentHandler
INStartCallIntentHandling
StartCallDefaultFavoritesDataSource
FavoritesDataSource
StartCallIntentHandlerDataSource
ConversationContactPool
ConversationPersonFilter
JoinCallIntentHandler
INJoinCallIntentHandling
HangUpCallIntentHandler
INHangUpCallIntentHandling
ContactSlotResolutionHelper
FaceTimeUtilities
AnswerCallIntentHandler
INAnswerCallIntentHandling
AnswerCallIntentHandlerDefaultDataSource
AnswerCallIntentHandlerDataSource
INPersonWrapper
INPersonDeduplicator
CallRecordConverter
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
faceTimeNoFanOutEnabled
faceTimeInvitationEnabled
crrHandleRecommendation
TB,R,N
countByEnumeratingWithState:objects:count:
identifier
isEqualToString:
addObject:
count
addObjectsFromArray:
containsObject:
copy
initWithValue:type:label:
stringFromContact:style:
componentsForContact:
initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:isMe:
phonemeData
setPhonemeData:
initWithCapacity:
phoneNumbers
value
unformattedInternationalStringValue
emailAddresses
lowercaseString
setObject:forKey:
allValues
firstObject
initWithSet:
intersectSet:
personHandle
handleWithPersonHandle:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
sortContacts:withIdentifiers:
inPersonFromContact:handleValue:handleType:handleLabel:
contactsShareHandleValue:
contactWithMostHandles:
populatePersonsByTUHandleFrom:personsByTUHandle:tuHandleOrderedSet:
init
descriptorForUsedKeys
descriptorForRequiredKeysForStyle:
arrayWithObjects:count:
tu_allContactIdentifiers
_contactsMatchingIdentifiers:
_contactsMatchingNamesForPerson:
_sendSiriMatchAnalyticsEventForIdentifiers:contactsMatchingId:contactsMatchingName:
initWithContacts:
predicateForContactsWithIdentifiers:
contactsDataSource
_keysToFetch
unifiedContactsMatchingPredicate:keysToFetch:error:
displayName
predicateForContactsMatchingName:options:
numberWithUnsignedInteger:
sharedPreferences
_cachedSiriLanguageCode
coreAnalyticsLogger
logSiriMatchEvent:matchesByIdCount:matchesByNameCount:siriLocale:
initWithDataSource:logger:
matchingContactsForPerson:
.cxx_destruct
_contactsDataSource
_coreAnalyticsLogger
T@"<TUContactsDataSource>",R,N,V_contactsDataSource
T@"<IntentHandlerCoreAnalyticsLogging>",R,N,V_coreAnalyticsLogger
stringWithFormat:
UTF8String
coreTelephonyClientQueue
initWithQueue:
setDelegate:
subscriberCountryCodeDidChange
coreTelephonyClient
getSubscriptionInfoWithError:
subscriptionsInUse
copyMobileCountryCode:error:
length
setSubscriberCountryCodeDidChange:
array
copyRegistrationStatus:error:
sharedInstance
simStatusDidChange:status:
simLockSaveRequestDidComplete:success:
simPinEntryErrorDidOccur:status:
simPukEntryErrorDidOccur:status:
simPinChangeRequestDidComplete:success:
authTokenChanged:
shortLabelsDidChange
subscriberCountryCodeDidChange:
userDefaultVoiceSlotDidChange:
prlVersionDidChange:version:
didDetectSimDeactivation:info:
allRelevantISOCountryCodes
isCellularServiceAvailable
T@"NSArray",R,C,N
_subscriberCountryCodeDidChange
_coreTelephonyClient
_allRelevantISOCountryCodes
_coreTelephonyClientQueue
T@"CoreTelephonyClient",R,N,V_coreTelephonyClient
T@"NSObject<OS_dispatch_queue>",R,N,V_coreTelephonyClientQueue
TB,N,V_subscriberCountryCodeDidChange
T@"NSArray",R,C,N,V_allRelevantISOCountryCodes
predicate
groupId
messagesGroupName
groupName
isEqualToIgnoringCase:
initWithPredicate:
remoteMembers
filterForCallGroup:
filterForParticipantCount:
matches:
setPredicate:
_predicate
T@?,C,N,V_predicate
tu_labeledValue:matchesPersonHandleLabel:
caseInsensitiveCompare:
label
localizedStringForLabel:
tu_initUnlabledPersonHandleWithTUHandle:isoCountryCodes:
type
stringValue
initWithType:value:
tu_phoneNumbersMatchingPersonHandleLabel:
tu_emailAddressesMatchingPersonHandleLabel:
tu_personHandleMatchingHandle:isoCountryCodes:
allMockVoicemails
exceptionWithName:reason:userInfo:
raise
predicateWithBlock:
filteredArrayUsingPredicate:
tu_voicemailsPassingTest:
isOnline
isSubscribed
online
TB,R,N,GisOnline
subscribed
TB,R,N,GisSubscribed
initForActiveVoicemailAccountWithVoicemails:
setOnline:
setSubscribed:
setAllMockVoicemails:
_online
_subscribed
_allMockVoicemails
T@"NSArray",C,N,V_allMockVoicemails
TB,N,GisOnline,V_online
TB,N,GisSubscribed,V_subscribed
setSenderDestinationID:
setUnread:
voicemailWithCaller:unread:
date
senderDestinationID
duration
isDeleted
isTrashed
isUnread
TQ,R,N
T@"NSDate",R,N
T@"NSString",R,C,N
Td,R,N
deleted
TB,R,N,GisDeleted
trashed
TB,R,N,GisTrashed
unread
TB,R,N,GisUnread
setIdentifier:
setDate:
setDuration:
setDeleted:
setTrashed:
_deleted
_trashed
_unread
_identifier
_date
_senderDestinationID
_duration
TQ,N,V_identifier
T@"NSDate",&,N,V_date
T@"NSString",C,N,V_senderDestinationID
Td,N,V_duration
TB,N,GisDeleted,V_deleted
TB,N,GisTrashed,V_trashed
TB,N,GisUnread,V_unread
integerValue
numberWithInteger:
addScore:forEntity:reason:
entities
scoreByEntity
allKeys
compare:
sortedArrayUsingSelector:
reverseObjectEnumerator
allObjects
objectAtIndexedSubscript:
successfulResolutionMargin
confirmationEnabled
confirmationMargin
includeAllEntitiesInDisambiguation
nameForResolutionResultType:
initWithType:resolvedEntities:resolutionSummary:
initWithEntities:
addScore:forEntities:reason:
setSuccessfulResolutionMargin:
setConfirmationMargin:
setConfirmationEnabled:
result
setIncludeAllEntitiesInDisambiguation:
setEntities:
setScoreByEntity:
scoreReasonsByEntity
setScoreReasonsByEntity:
cachedResult
setCachedResult:
_confirmationEnabled
_includeAllEntitiesInDisambiguation
_successfulResolutionMargin
_confirmationMargin
_entities
_scoreByEntity
_scoreReasonsByEntity
_cachedResult
T@"NSArray",C,N,V_entities
T@"NSMutableDictionary",&,N,V_scoreByEntity
T@"NSMutableDictionary",&,N,V_scoreReasonsByEntity
T@"ScoreBasedResolutionResult",&,N,V_cachedResult
Tq,N,V_successfulResolutionMargin
Tq,N,V_confirmationMargin
TB,N,V_confirmationEnabled
TB,N,V_includeAllEntitiesInDisambiguation
T@"ScoreBasedResolutionResult",R,N
resolutionResultType
setResolutionResultType:
resolvedEntities
setResolvedEntities:
resolutionSummary
setResolutionSummary:
_resolutionResultType
_resolvedEntities
_resolutionSummary
TQ,N,V_resolutionResultType
T@"NSArray",C,N,V_resolvedEntities
T@"NSArray",C,N,V_resolutionSummary
allContacts
contactByIdCache
setWithArray:
contactWithId:
allContactIds
contactsWithIds:
_allContacts
_contactByIdCache
T@"NSDictionary",R,C,N,V_contactByIdCache
T@"NSArray",R,C,N,V_allContacts
_appearsToBePhoneNumber
_appearsToBeEmail
normalizedPhoneNumberHandleForValue:isoCountryCode:
normalizedEmailAddressHandleForValue:
normalizedGenericHandleForValue:
tu_tuHandle
tu_normalizedCHHandlesFromTUHandle:isoCountryCodes:
T@"TUHandle",R,N
contactIdentifier
siriMatches
emergencyType
initWithValue:type:label:emergencyType:
nameComponents
image
customIdentifier
isMe
tu_contactsMatchingIdentifiers:contactsDataSource:identifierToContactCache:
objectForKey:
predicateForContactsMatchingEmailAddress:
phoneNumberWithStringValue:
predicateForContactsMatchingPhoneNumber:
tu_matchingINPersonHandlesByContactIdentifier
tu_personWithFormattedHandleForISOCountryCodes:
tu_handlesMatchingPersonWithContactsDataSource:identifierToContactCache:
tu_personMatchingHandle:contactsDataSource:isoCountryCodes:
initWithBundleIdentifier:allowPlaceholder:error:
compatibilityObject
plugInKitPlugins
appSupportsDeprecatedCallingIntents:
initWithDataSource:
dateCreated
startDateComponents
endDateComponents
recipient
callCapabilities
callTypes
unseen
preferredCallProvider
maximumRecordCountForCallRecordTypeOptions:
dataSource
voicemailDataSource
identifierToContactCache
boolValue
subarrayWithRange:
callRecordsForVoicemails:
callRecordsForRecentCallsWithRecordTypeOptions:startDate:endDate:recipient:capabilities:preferredProvider:maximumRecordCount:unseen:
initWithCode:userActivity:
setCallRecords:
notRequired
successWithResolvedPerson:
unsupported
arrayWithCapacity:
coreTelephonyDataSource
null
numberWithDouble:
numberWithBool:
initWithIdentifier:dateCreated:callRecordType:callCapability:callDuration:unseen:participants:numberOfCalls:isCallerIdBlocked:
predicateForCallsAfterDate:beforeDate:
predicateForCallsWithNumberOfRemoteParticipants:
predicateForCallsWithAnyOfTheseRemoteParticipantHandles:isoCountryCodes:
predicateForCallsThatWereOriginated:
predicateForCallsThatWereAnswered:
andPredicateWithSubpredicates:
orPredicateWithSubpredicates:
predicateForAudioCalls
predicateForVideoCalls
predicateForTelephonyCalls
predicateForFaceTimeCalls
predicateForCallsThatAreRead:
callHistoryDataSource
coalescedCallsWithPredicate:limit:offset:batchSize:
providerManager
callRecordsForRecentCalls:withContactsDataSource:withCallProviderManager:
handleSearchCallHistory:completion:
confirmSearchCallHistory:completion:
resolveCallTypeForSearchCallHistory:withCompletion:
resolveDateCreatedForSearchCallHistory:withCompletion:
resolveRecipientForSearchCallHistory:withCompletion:
resolveCallTypesForSearchCallHistory:withCompletion:
resolveUnseenForSearchCallHistory:withCompletion:
_dataSource
_identifierToContactCache
T@"<SearchCallHistoryIntentHandlerDataSource>",R,N,V_dataSource
T@"NSCache",R,N,V_identifierToContactCache
voicemailsPassingTest:
contactStore
T@"<TUContactsDataSource>",R,N
T@"<CallHistoryDataSource>",R,N
T@"<CoreTelephonyDataSource>",R,N
T@"TUCallProviderManager",R,N
T@"<SearchCallHistoryVoicemailDataSource>",R,N
_callHistoryDataSource
_providerManager
_contactStore
T@"CNContactStore",R,N,V_contactStore
T@"<CallHistoryDataSource>",R,N,V_callHistoryDataSource
T@"TUCallProviderManager",R,N,V_providerManager
initWithType:contactIdentifiers:
contactIdentifiers
_type
_contactIdentifiers
Tq,R,N,V_type
T@"NSArray",R,C,N,V_contactIdentifiers
dictionaryWithObjects:forKeys:count:
currentPlayer
stop
setCurrentPlayer:
voicemailFinishedPlaying
setVoicemailFinishedPlaying:
callRecordIdentifier
longLongValue
voicemailWithIdentifier:
isRestrictedMessage:
_playVoicemail:voicemailManager:completion:
queue
handleWithDestinationID:
callFilterController
containsRestrictedHandle:forBundleIdentifier:performSynchronously:
category
setCategory:withOptions:error:
setActive:error:
dataURL
initWithContentsOfURL:error:
markVoicemailAsRead:
play
audioPlayerDidFinishPlaying:successfully:
audioPlayerDecodeErrorDidOccur:error:
audioPlayerBeginInterruption:
audioPlayerEndInterruption:withOptions:
audioPlayerEndInterruption:withFlags:
audioPlayerEndInterruption:
handlePlayVoicemail:completion:
confirmPlayVoicemail:completion:
endPlayback
_voicemailFinishedPlaying
_currentPlayer
T@?,C,N,V_voicemailFinishedPlaying
T@"AVAudioPlayer",&,N,V_currentPlayer
existingHandlerForIntentIdentifier:
initWithHandler:intentIdentifier:
updateRecentlyUsedHandlersWithHandler:
handler
recentIntentHandlersAndIdentifiers
intentIdentifier
enumerateObjectsUsingBlock:
removeObjectAtIndex:
insertObject:atIndex:
removeLastObject
handlerForIntent:
transactionDidCompleteForIntentIdentifier:
setRecentIntentHandlersAndIdentifiers:
_recentIntentHandlersAndIdentifiers
T@"NSMutableArray",&,N,V_recentIntentHandlersAndIdentifiers
setIntentIdentifier:
setHandler:
_intentIdentifier
_handler
T@"NSString",C,N,V_intentIdentifier
T@,&,N,V_handler
filters
initWithFilters:
_filters
T@"NSArray",R,N,V_filters
callGroup
caller
participants
initWithCaller:participants:dataSource:
matchCallerAndParticipantsExactly
makeFilterForINCallGroupConversationFilter:contactsDataSource:
callCenterWithQueue:
callCenter
incomingCall
incomingVideoCall
handle
setStatusCode:
provider
preferredCallProviderFor:
callUUID
isVideo
bundleIdentifier
isBlocked
initWithIdentifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:
predicateForMissedCallsSinceDate:
callsWithPredicate:limit:offset:batchSize:
isTelephonyProvider
isFaceTimeProvider
handleIdentifyIncomingCaller:completion:
confirmIdentifyIncomingCaller:completion:
setDataSource:
setCallCenter:
_callCenter
_queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"<IdentifyIncomingCallerIntentHandlerDataSource>",&,N,V_dataSource
T@"TUCallCenter",&,N,V_callCenter
predicateForCallsWithNoDuration
predicateWithFormat:
predicateForCallsWithDurationGreaterThan:
predicateWithValue:
normalizedValue
normalizedDestination
predicateForRemoteParticipantsWithValues:caseInsensitiveValues:normalizedValues:
predicateForRemoteParticipantsWithNormalizedValues:
predicateForRemoteParticipantsWithValues:
predicateForRemoteParticipantsWithValuesCaseInsensitive:
predicateForCallsWithServiceProvider:
predicateForCallsWithCallCategory:
predicateForCallsWithDurationLongerThanImmediateHangUp
predicateForCallToCallBackWithAnyOfTheseRemoteParticipantHandles:isoCountryCodes:
predicateForTelephonyOrFaceTimeCalls
initWithParticipants:destinationType:callTypes:callCapability:preferredCallProvider:includeThirdPartyCalls:
setParticipants:
setDestinationType:
setCallTypes:
setCallCapability:
setPreferredCallProvider:
setIncludeThirdPartyCalls:
callRecordTypePredicates
preferredCallProviderPredicate
callCapabilityPredicate
participantsPredicatesWithContactsDataSource:contactIdentifierCache:coreTelephonyDataSource:
destinationType
includeThirdPartyCalls
callCapability
initWithParticipants:destinationType:callTypes:callCapability:preferredCallProvider:
predicateForRecentCallWithContactsDataSource:contactIdentifierCache:coreTelephonyDataSource:
_includeThirdPartyCalls
_participants
_destinationType
_callTypes
_callCapability
_preferredCallProvider
T@"NSArray",C,N,V_participants
Tq,N,V_destinationType
TQ,N,V_callTypes
Tq,N,V_callCapability
Tq,N,V_preferredCallProvider
TB,N,V_includeThirdPartyCalls
initWithDispatchQueue:
isGreenTea
featureFlags
senderIdentityClient
initWithDialIntent:providerManager:contactsDataSource:senderIdentityClient:
isFaceTimeInvitationEnabled
faceTimeLink
sortFaceTimeHandles:faceTimeHandles:nonFaceTimeHandles:
URLWithString:
conversationLinkForURL:
initWithConversationLink:otherInvitedHandles:sendLetMeInRequest:
setWantsStagingArea:
setVideoEnabled:
_initWithIntent:
initWithUserActivity:
conversationLink
responseForJoinRequest:intent:callProvider:
responseForDialRequest:intent:
code
logOutgoingCallToHandle:
userActivity
contacts
faceTimeUtilities
isFaceTimeable:
normalizedHandleWithDestinationID:
makeActivityWithIntent:dialRequestAttachment:
appResolver
userActivityUsingDeprecatedCallingIntents:
callFilterStatusForDialRequest:
_idiom
callRinging
callsInProgress
supportsFaceTimeVideoCalls
supportsFaceTimeAudioCalls
isValid
dialType
supportsTelephonyCalls
canAttemptTelephonyCallsWithoutCellularConnection
isAirplaneModeEnabled
supportsPrimaryCalling
makeActivityWithIntent:joinRequestAttachment:
restrictedContacts:callProvider:
isVideoEnabled
setConfirmationReason:
setRestrictedContacts:
intentHasUnresolvedLocalEmergencyContact:
setShouldDoEmergencyCountdown:
isEmergencyHandle:
callRecordFilter
recentCallRecordToRedialForIntent:
successWithResolvedCallRecord:
unsupportedForReason:
successWithResolvedCallDestinationType:
emergencyProvider
emergencyLabeledHandles
localizedEmergencyString:
initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:
resolutionResultDisambiguationWithItemsToDisambiguate:
isUnresolvedLocalEmergencyContact:
resolutionResultForEmergency
updateHandlerStateForContactResolutionResults:
personResolutionResultsForIntent:
_isPrimaryDisplayDisabled
inferCallCapabilityForPreferredCallProvider:recentCall:initialCallCapability:idiom:isDisplayDisabled:
resolutionResultForCallCapability:idiom:withDisplayDisabled:
mediaType
shouldForceAudioOnlyWithIdiom:withDisplayDisabled:
successWithResolvedCallCapability:
hasCamera
isChinaSKUDevice
isGroupCall
successWithResolvedString:
runIDSQueryForStartCallIntent:
fetchSenderTUHandle:
generateFaceTimeLink:
absoluteString
providerId
globalEmergencyNumbers
successWithResolvedPreferredCallProvider:
isFaceTimeAudioBlocked
supportsDisplayingFaceTimeAudioCalls
isDirectFaceTimeAudioCallingCurrentlyAvailable
isFaceTimeVideoBlocked
supportsDisplayingFaceTimeVideoCalls
isDirectFaceTimeVideoCallingCurrentlyAvailable
isGFTDisabledForChinaSKU:
callRecordToCallBack
recentCallToRedialForQuery:
callRecordForRecentCall:
recordTypeForRedialing
callRecordsForRecentCalls:withContactsDataSource:withCallProviderManager:withCurrentISOCountryCodes:
callGroups
resolveContactsFromCallGroups:
needsValue
emergencyTypeToString:
resolutionResultUnsupportedWithReason:alternativeItems:
resolutionResultForPersonWithResolvedHandleValue:
expectFoundInAppsContacts
isSuggested
recentCallsWithHandles:telephonyOnly:
confirmationRequiredWithPersonToConfirm:forReason:
_inPersonsFromContact:withRequestedType:requestedLabel:isoCountryCodes:
_applyImpliedFilterToPhoneNumberOnlyMatchesIfApplicableForPersonsByContact:requestedHandleType:preferredCallProvider:
initWithUnresolvedPerson:availableContacts:
extractRecommendation
contactsAvailableInPool:
expectUpstreamContactRecommendation
setWithObject:
anyContactsHaveSameName:
buildDisambiguationResultForContacts:
parseEmergencyContacts:usingExistingResult:
isCRRHandleRecommendationEnabled
disambiguationWithPeopleToDisambiguate:
useLegacyContactResolution
resolvePreferredContactFromContacts:
buildConfirmationResultForContact:withReason:
dedupeINPersons:
generateAdditionalMatchingHandles:resolvedContacts:requestedHandleType:requestedHandleLabel:
getAlternativesForContact:forRequestedHandleType:forCallProvider:
resolutionResultForPersonWithResolvedContactName:resolvedPerson:resolvedContact:contactIdentifiersRequiringConfirmation:
requireScoreBasedResolutionForGFT:numberOfContactsCount:
resolvePreferredHandleFromHandles:contactIdentifiersRequiringConfirmation:telephonyOnly:
resolutionResultCode
resolvedValue
setValue:forKey:
alternatives
disambiguationItems
setPersonHandle:
isMMIOrUSSDNumber:
shouldRequireInvalidNumberConfirmationForRecipient:
shouldRequireUnknownRecipientConfirmationForRequestedRecipient:resolvedToRecipient:contact:
useLegacyHandleResolution
updateScoreBasedHandleResolver:forRecentCallsMatchingHandles:telephonyOnly:
updateScoreBasedHandleResolver:forFavoritesAmongHandles:
isoCountryCode
allCountryCodesRelevantToCall:
remoteParticipantHandles
isCanonicallyEqualToHandle:isoCountryCode:
favoritesDataSource
hasFavoritesEntryForTelephonyCallWithPhoneNumber:isoCountryCodes:
updateScoreBasedContactResolver:forRecentCallsMatchingContacts:
updateScoreBasedContactResolver:forFavoritesAmongContacts:
allTUHandles
timeIntervalSinceDate:
dateByAddingTimeInterval:
hasFavoritesEntryForContact:
itemToConfirm
handlesConfirmed
contactIdentifiersConfirmed
telephonyProvider
prioritizedSenderIdentities
UUID
isEmergencyNumberForDigits:senderIdentityUUID:
emergencyHandles
bundleWithPath:
initWithDeferredFormat:fromTable:bundle:arguments:
siriLanguageCode
localizeForLanguage:
enumerateKeysAndObjectsUsingBlock:
haveAlreadyConfirmedRecipient:
isValidForISOCountryCode:
callCountWithPredicate:
_userInput
relationship
localizedStringFromPersonNameComponents:style:options:
fetchSPIHandlesForGroupID:
address
handleStartCall:completion:
confirmStartCall:completion:
resolveCallRecordToCallBackForStartCall:withCompletion:
resolveDestinationTypeForStartCall:withCompletion:
resolveContactsForStartCall:withCompletion:
resolveCallCapabilityForStartCall:withCompletion:
initWithFeatureFlags:
initWithFeatureFlags:faceTimeUtilities:
isFaceTimeNoFanOutEnabled
callCapabilityFromRecentCall:
resolveFaceTimeLinkForStartCall:withCompletion:
resolvePreferredCallProviderForStartCall:withCompletion:
setCoreAnalyticsLogger:
setAppResolver:
setHandlesConfirmed:
setContactIdentifiersConfirmed:
setFeatureFlags:
setFaceTimeUtilities:
_appResolver
_handlesConfirmed
_contactIdentifiersConfirmed
_featureFlags
_faceTimeUtilities
T@"NSMutableOrderedSet",&,N,V_handlesConfirmed
T@"NSMutableOrderedSet",&,N,V_contactIdentifiersConfirmed
T@"IntentHandlerFeatureFlags",&,N,V_featureFlags
T@"FaceTimeUtilities",&,N,V_faceTimeUtilities
T@"<StartCallIntentHandlerDataSource>",&,N,V_dataSource
T@"<IntentHandlerCoreAnalyticsLogging>",&,N,V_coreAnalyticsLogger
T@"<AppResolving>",&,N,V_appResolver
isSubsetOfSet:
initWithContactStore:
favoritesController
entriesForContact:
entries
actionType
contactProperty
initWithCallCenter:
_favoritesController
T@"TUCallCenter",R,N,V_callCenter
T@"CNFavorites",R,N,V_favoritesController
radiosPreferences
airplaneMode
dispatchQueue
hasCurrentCalls
videoDeviceController
inputDevices
callingBlocked
faceTimeBlocked
canAttemptEmergencyCallsWithoutCellularConnection
standardUserDefaults
boolForKey:
handles
setDispatchQueue:
T@"TUSenderIdentityClient",R,N
airplaneModeEnabled
TB,R,N,GisAirplaneModeEnabled
directFaceTimeAudioCallingCurrentlyAvailable
TB,R,N,GisDirectFaceTimeAudioCallingCurrentlyAvailable
directFaceTimeVideoCallingCurrentlyAvailable
TB,R,N,GisDirectFaceTimeVideoCallingCurrentlyAvailable
faceTimeAudioBlocked
TB,R,N,GisFaceTimeAudioBlocked
faceTimeVideoBlocked
TB,R,N,GisFaceTimeVideoBlocked
T@"<FavoritesDataSource>",R,N
T@"NSObject<OS_dispatch_queue>",&,N
T@"TUCallCenter",R,N
signInController
_signInController
_senderIdentityClient
_favoritesDataSource
_dispatchQueue
_radiosPreferences
T@"IDSSignInController",R,N,V_signInController
T@"RadiosPreferences",R,N,V_radiosPreferences
T@"TUSenderIdentityClient",R,N,V_senderIdentityClient
T@"<FavoritesDataSource>",R,N,V_favoritesDataSource
T@"NSObject<OS_dispatch_queue>",&,N,V_dispatchQueue
callerPool
intersectsSet:
participantsPool
callerPoolContainsOneOf:
participantsPoolContainsOneOf:
setCallerPool:
setParticipantsPool:
_callerPool
_participantsPool
T@"ContactPool",&,N,V_callerPool
T@"ContactPool",&,N,V_participantsPool
_contactPoolForConversation:
_matchesCallerFilter:
_matchesParticipantsFilter:
_identifiersForRecommendedPerson:
tu_contactsForHandles:keyDescriptors:error:
initiator
_caller
T@"INPerson",R,N,V_caller
T@"NSArray",R,N,V_participants
initWithCallCenter:contactsDataSource:
groupConversation
conversationId
conversationManager
activeConversations
UUIDString
_responseForMatchingConversation:intent:
initWithConversation:
successWithResolvedCallGroupConversation:
groupConversationFilter
initWithConversationId:caller:otherParticipants:callGroup:
handleJoinCall:completion:
confirmJoinCall:completion:
resolveGroupConversationForJoinCall:withCompletion:
scoredAlternatives
score
usesScoreBasedEncoding
person
valueForKey:
numberWithFloat:
floatValue
disconnectCall:withReason:
setHungUpCallType:
disconnectCurrentCallAndActivateHeld
handleHangUpCall:completion:
confirmHangUpCall:completion:
_lookup:
unresolvedPerson
availableContacts
_unresolvedPerson
_availableContacts
T@"INPerson",R,N,V_unresolvedPerson
T@"ContactPool",R,N,V_availableContacts
canonicalAddressesForAddresses:
defaultCenter
mainQueue
addObserverForName:object:queue:usingBlock:
sharedManager
beginQueryWithDestinations:
removeObserver:
isFaceTimeAudioAvailableForAnyDestinationInDestinations:
isFaceTimeVideoAvailableForAnyDestinationInDestinations:
isFaceTimeMultiwayAvailableForAnyDestinationInDestinations:
generateLinkWithInvitedMemberHandles:completionHandler:
callIdentifier
initWithCall:
setBehavior:
_originatingDeviceIDSIdentifier
_isOwnedByCurrentUser
destinationWithURI:
setEndpointIDSDestination:
_originatingDeviceRapportMediaSystemIdentifier
setEndpointRapportMediaSystemIdentifier:
endpointRapportMediaSystemIdentifier
_originatingDeviceRapportEffectiveIdentifier
setEndpointRapportEffectiveIdentifier:
endpointRapportEffectiveIdentifier
audioRoute
setSourceIdentifier:
answerWithRequest:
dateWithTimeIntervalSinceNow:
handleAnswerCall:completion:
confirmAnswerCall:completion:
T@"<AnswerCallIntentHandlerDataSource>",&,N,V_dataSource
initWithINPerson:
inPerson
tuHandle
_inPerson
_tuHandle
T@"INPerson",R,N,V_inPerson
T@"TUHandle",R,N,V_tuHandle
recentCallIdToCallRecordCache
uniqueId
callRecordForRecentCall:withContactsDataSource:withCallProviderManager:withCurrentISOCountryCodes:
callerIdIsBlocked
handleToPersonCache
callStatus
providerForRecentCall:
preferredCallProviderFromRecentCall:
read
numberWithInt:
numberOfOccurrences
serviceProvider
setRecentCallIdToCallRecordCache:
setHandleToPersonCache:
_recentCallIdToCallRecordCache
_handleToPersonCache
T@"NSCache",&,N,V_recentCallIdToCallRecordCache
T@"NSCache",&,N,V_handleToPersonCache
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@32@0:8@16@24
@48@0:8@16@24q32@40
@24@0:8@16
v40@0:8@16@24@32
v16@0:8
@"<TUContactsDataSource>"
@"<IntentHandlerCoreAnalyticsLogging>"
v32@0:8@16@24
v28@0:8@16B24
v24@0:8@16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSString"24
v28@0:8@"CTXPCServiceSubscriptionContext"16B24
v24@0:8@"CTServiceDescriptor"16
v24@0:8@"CTXPCServiceSubscriptionContext"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSNumber"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTSimDeactivationInfo"24
@"NSArray"16@0:8
v20@0:8B16
@"CoreTelephonyClient"
@"NSArray"
@"NSObject<OS_dispatch_queue>"
@24@0:8Q16
B24@0:8@"TUConversation"16
@24@0:8@?16
@?16@0:8
v24@0:8@?16
B32@0:8@16@24
@"NSArray"24@0:8@?<B@?@"<SearchCallHistoryVoicemail>">16
@28@0:8@16B24
d16@0:8
@"NSDate"16@0:8
v24@0:8Q16
v24@0:8d16
@"NSDate"
@"NSString"
v40@0:8q16@24@32
v24@0:8q16
q16@0:8
@"NSMutableDictionary"
@"ScoreBasedResolutionResult"
@40@0:8Q16@24@32
@"NSDictionary"
@40@0:8@16@24@32
B24@0:8@"NSString"16
Q24@0:8Q16
v32@0:8@16@?24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INSearchCallHistoryIntentResponse">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INCallRecordTypeResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INDateComponentsRangeResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INPersonResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INCallRecordTypeOptionsResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INBooleanResolutionResult">24
@80@0:8Q16@24@32@40Q48q56Q64@72
@"<SearchCallHistoryIntentHandlerDataSource>"
@"NSCache"
@"<TUContactsDataSource>"16@0:8
@"<CallHistoryDataSource>"16@0:8
@"<CoreTelephonyDataSource>"16@0:8
@"TUCallProviderManager"16@0:8
@"<SearchCallHistoryVoicemailDataSource>"16@0:8
@"<CallHistoryDataSource>"
@"TUCallProviderManager"
@"CNContactStore"
@32@0:8q16@24
v48@0:8@16@24@32@40
v48@0:8@"NSNumber"16@"NSNumber"24@"NSNumber"32@"NSString"40
v32@0:8@16Q24
v28@0:8@"AVAudioPlayer"16B24
v32@0:8@"AVAudioPlayer"16@"NSError"24
v24@0:8@"AVAudioPlayer"16
v32@0:8@"AVAudioPlayer"16Q24
v32@0:8@"INPlayVoicemailIntent"16@?<v@?@"INPlayVoicemailIntentResponse">24
v40@0:8@16@24@?32
@"AVAudioPlayer"
@"NSMutableArray"
v32@0:8@"INIdentifyIncomingCallerIntent"16@?<v@?@"INIdentifyIncomingCallerIntentResponse">24
q24@0:8@16
@"<IdentifyIncomingCallerIntentHandlerDataSource>"
@"TUCallCenter"
@20@0:8B16
@24@0:8d16
@24@0:8q16
@20@0:8I16
@56@0:8@16q24Q32q40q48
@60@0:8@16q24Q32q40q48B56
v32@0:8@"INStartCallIntent"16@?<v@?@"INStartCallIntentResponse">24
v32@0:8@"INStartCallIntent"16@?<v@?@"INCallRecordResolutionResult">24
v32@0:8@"INStartCallIntent"16@?<v@?@"INCallDestinationTypeResolutionResult">24
v32@0:8@"INStartCallIntent"16@?<v@?@"NSArray">24
v32@0:8@"INStartCallIntent"16@?<v@?@"INStartCallCallCapabilityResolutionResult">24
q52@0:8q16@24q32q40B48
@36@0:8q16q24B32
B28@0:8q16B24
B32@0:8Q16Q24
@48@0:8@16@24@32@40
@36@0:8@16@24B32
v36@0:8@16@24B32
@40@0:8@16q24q32
@48@0:8@16q24@32@40
B40@0:8@16@24@32
@"<StartCallIntentHandlerDataSource>"
@"<AppResolving>"
@"NSMutableOrderedSet"
@"IntentHandlerFeatureFlags"
@"FaceTimeUtilities"
B24@0:8@"CNContact"16
B32@0:8@"TUHandle"16@"NSArray"24
@"CNFavorites"
Q24@0:8@16
v24@0:8@"TUHandle"16
@"NSArray"24@0:8@"NSString"16
@24@0:8@"NSObject<OS_dispatch_queue>"16
Q24@0:8@"TUDialRequest"16
@"NSArray"32@0:8@"NSArray"16@"TUCallProvider"24
@"TUSenderIdentityClient"16@0:8
@"<FavoritesDataSource>"16@0:8
@"NSObject<OS_dispatch_queue>"16@0:8
v24@0:8@"NSObject<OS_dispatch_queue>"16
@"TUCallCenter"16@0:8
@"IDSSignInController"
@"TUSenderIdentityClient"
@"<FavoritesDataSource>"
@"RadiosPreferences"
@"ContactPool"
@"INPerson"
v32@0:8@"INJoinCallIntent"16@?<v@?@"INJoinCallIntentResponse">24
v32@0:8@"INJoinCallIntent"16@?<v@?@"INCallGroupConversationResolutionResult">24
v32@0:8@"INHangUpCallIntent"16@?<v@?@"INHangUpCallIntentResponse">24
@32@0:8@16q24
v24@0:8@"NSArray"16
B24@0:8@"NSArray"16
@"TUHandle"24@0:8@"TUDialRequest"16
@"TUConversationLink"24@0:8@"NSSet"16
v32@0:8@"INAnswerCallIntent"16@?<v@?@"INAnswerCallIntentResponse">24
@"<AnswerCallIntentHandlerDataSource>"
@"TUHandle"
333?
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.CallHistory.sync.allow</key>
<true/>
<key>com.apple.CallKit.call-directory</key>
<array>
<string>synchronize-extensions</string>
<string>compact-store</string>
<string>query-identification-entries</string>
</array>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>cellular-plan</string>
</array>
<key>com.apple.Contacts.database-allow</key>
<true/>
<key>com.apple.coreaudio.allow-amr-decode</key>
<true/>
<key>com.apple.private.CallHistory.read</key>
<true/>
<key>com.apple.private.CallHistory.read-write</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.attribution.implicitly-assumed-identity</key>
<dict>
<key>type</key>
<string>path</string>
<key>value</key>
<string>/System/Library/PrivateFrameworks/TelephonyUtilities.framework/PlugIns/PhoneIntentHandler.appex/PhoneIntentHandler</string>
</dict>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<true/>
<key>com.apple.private.ids.registration</key>
<array>
<string>com.apple.ess</string>
<string>com.apple.private.ac</string>
</array>
<key>com.apple.private.imcore.imagent</key>
<true/>
<key>com.apple.private.imcore.spi.database-access</key>
<true/>
<key>com.apple.private.intents.extension</key>
<true/>
<key>com.apple.private.security.storage.Voicemail</key>
<true/>
<key>com.apple.private.suggestions.contacts</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceCamera</string>
</array>
<key>com.apple.security.app-sandbox</key>
<true/>
<key>com.apple.security.device.camera</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/Applications/InCallService.app/</string>
<string>/Applications/NanoPhone.app/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<array>
<string>/Library/Voicemail/</string>
<string>/Library/CallHistoryDB/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/Voicemail/</string>
<string>/Library/Logs/CallHistory</string>
<string>/Library/CallHistoryDB/</string>
<string>/Media/Recordings/</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.telephonyutilities.callservicesdaemon.conversationmanager</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callprovidermanager</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.identityservicesd.embedded.auth</string>
<string>com.apple.CallHistorySyncHelper</string>
<string>com.apple.voicemail.vmd</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.CellularPlanDaemon.xpc</string>
<string>com.apple.imdpersistence.IMDPersistenceAgent</string>
</array>
<key>com.apple.security.personal-information.addressbook</key>
<true/>
<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
<array>
<string>com.apple.telephonyutilities.callservicesdaemon.callprovidermanager</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.identityservicesd.desktop.auth</string>
<string>com.apple.CallHistorySyncHelper</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.videoconference.camera</string>
</array>
<key>com.apple.security.temporary-exception.shared-preference.read-only</key>
<array>
<string>com.apple.TelephonyUtilities</string>
</array>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
<string>access-call-providers</string>
<string>modify-calls</string>
<string>access-call-capabilities</string>
<string>modify-call-capabilities</string>
</array>
<key>com.apple.visualvoicemail.client</key>
<true/>
</dict>
</plist>
SiriPhone
FaceTimeNoFanOut
CRRHandleRecommendation
FaceTimeInvitation
v8@?0
com.apple.TelephonyUtilities.PhoneIntentHandler.%@
B16@?0@"TUConversation"8
Voicemail search performed on a mock voicemail handler with no mock voicemails
B24@?0@"<SearchCallHistoryVoicemail>"8@"NSDictionary"16
Attempting to add a score for an entity not part of original entity set
Attempting to add a score reason for an entity not part of the original entity set
%ld: %@
Resolved %ld entities. Result = %@
%ld%@: %@
 (chosen)
Success
Confirm
Disambiguate
Unknown
B16@?0@"<SearchCallHistoryVoicemail>"8
B16@?0@"VMVoicemail"8
com.apple.siri.phone.IntentHandler.StartCall.ResolveContacts.SiriMatches
siriMatchesCount
matchesByIdCount
matchesByNameCount
siriLocale
@"NSDictionary"8@?0
v12@?0B8
v32@?0@"IntentHandlerAndIdentifier"8Q16^B24
answered = %d
originated = %d
duration = 0
duration > %f
date > %@
date < %@
remoteParticipantHandles.@count = %d
ANY remoteParticipantHandles.normalizedValue == %@
ANY remoteParticipantHandles.normalizedValue IN %@
ANY remoteParticipantHandles.value == %@
ANY remoteParticipantHandles.value IN %@
ANY remoteParticipantHandles.value ==[c] %@
service_provider = %@
call_category == %@
read == %d
NoLinkGenerated
LocalEmergency
NonLocalEmergency
None
Unset
1190
1191
1195
1515
1717
1777
1818
2020
9999
10111
Unexpected score based contact resolution result type.
contacts
emergency contact
Persons matching resolved handle should not be nil.
Persons matching handle to confirm should not be nil.
Persons matching handle to disambiguate should not be nil.
Unexpected score based handle resolution result type.
Call Recency
Favorites entry for telephony call with this handle
Favorites entry for this contact
InCallService
/Applications/InCallService.app
B24@?0@"INPerson"8@"NSDictionary"16
v32@?0@"CNContact"8@"NSArray"16^B24
true
false
UseLegacyContactResolution
UseLegacyHandleResolution
SiriInference
native_flow_contact_resolution
found_in_app_contacts
v16@?0@"IMSPIChat"8
com.apple.messages.imcore.spi.qos-unspecified
Contacts map did not contain UUID of recommended contact.
v16@?0@"NSNotification"8
v24@?0@"TUConversationLink"8@"NSError"16
com.apple.calls.intenthandler
Default
SiriPhone/FaceTimeNoFanOut: %@
SiriPhone/crrHandleRecommendation: %@
SiriPhone/FaceTimeInvitation: %@
sortMatchingContactsWithIdentifiers
Person contains %ld contact IDs. Person: %@
Looking up contact in the contact store matching identifiers: %@
Found %ld contacts matching siriMatches
Found contacts matching siriMatches
siriMatches contactIDs don't correspond to any contacts in address book.
Looking up contact in the contact store by names
Error performing contact search: %@
contactsMatchingIdentifiers
Error performing contact search by name: %@
Found %ld contacts in search by name
contactsMatchingName
Could not determine ISO Country Code from Mobile Country Code: %@
Could not determine mobile country code from Core Telephony Subscription Context. Error: %@
Could not determine Core Telephony Subscription Info. Error: %@
Resolved relevant ISO country codes: %@
[WARN] Cellular service is not available for SIM. Registration Status: %@ Subscription context: %@
Could not determine registration status from Core Telephony Subscription Context. Error: %@
[WARN] Determined cellular service is unavailable.
SimpleConversationFilter: matchesCallGroup=%@
SimpleConversationFilter: matchesParticipantCount=%@
handlesMatchingPerson
Looking up contact in the contact store matching handle: %@
Could not construct contact search predicate from handle: %@
No contacts match handle
[WARN] Multiple contacts match handle, using the first one arbitrarily
personMatchingHandle
App supports INStartCallIntent - prefer this over deprecated calling intents.
Error when fetching application record for appId: %@, error: %@
Got a SearchCallHistory intent: %@
Start Date  : %@
End Date    : %@
Recipient   : %@
Capabilities: %lx (audio: %d | video: %d)
PreferredCallProvider: %@
Types       : %lx
Unseen     : %@
Type indicates we should be searching for voicemail. Matching voicemails to this intent
Rejecting voicemail because it is deleted or trashed: %@
Rejecting voicemail because a recipient was specified, but this voicemail has no senderDestinationID: %@
Rejecting voicemail because senderDestinationID does not match requested recipient: %@
Rejecting voicemail because voicemail.date is before requested startDate: %@
Rejecting voicemail because voicemail.date is after requested endDate: %@
Rejecting voicemail because only unread voicemails were requested, but this one is marked as read: %@
Rejecting voicemail because only read voicemails were requested, but this one is marked as unread: %@
Truncated matching voicemails to %ld objects: %@
Voicemails (%@) -> callRecords (%@)
Visual Voicemail is not set up yet
Calling completion block with response: %@
resolveRecipientForSearchCallHistory: %@
No recipient specified, returning notRequired
Handle is present. Simply using the recipient to resolve with: %@
No contacts match the specified recipient, returning unsupported (a.k.a. notFound)
Recipient contains siriMatches, preserving those and returning success
Resolving with: %@
[WARN] Could not determine voicemail.senderDestinationID
[WARN] person in callRecord is nil
Performing call history lookup
Unhandled call record type options: %ld
Unhandled call capability: %ld
Using predicate: %@
Call history search results: %@
callRecords: %@
Ending playback, e.g. user dismissed siri
handlePlayVoicemail: %@
VVM is online and subscribed.
Found voicemail with the given identifier (%@). Returning success
Voicemail completed playing. Calling completion block with success response: %@
[WARN] Screen time restricted playback of voicemail: %@
[WARN] Voicemail with the given identifier was not found
[WARN] VVM is not online and subscribed. Returing that configuration is required
Attempting to play voicemail: %@
Building audio session
Setting category to: %@
Could not set category: %@
Activating audio session: %@
Activation succeeded
Activation failed: %@
Generated AVAudioPlayer with voicemail data: %@ error: %@
Voicemail finished playing successfully: %d
Calling completion block
Playing the voicemail
audioPlayerDidFinishPlaying: successfully: %d
Intent Extension initialized
No handler for intent: %@
[WARN] Intent does not have an identifier set. Creating new handler.
Found existing handler for intent identifier: %@.
Existing handler not found for intent identifier: %@. Creating new handler.
[WARN] Attempting to update recently used intent handler cache for an intent with no intentIdentifier. Ignoring.
Received Siri request to identify incoming caller: %@
An incoming call exists with handle %@
Incoming call is from person: %@
Incoming caller is a private number
No incoming call exists. Looking up last missed call...
Last missed call is: %@
Inferring outgoing callStatus requirement from the presence of redial destination type and unspecified recordTypeForRedialing.
Unexpected callTypes received, ignoring value.
No preferredCallProvider specified and thirdParty redial is enabled, not filtering by provider
No preferredCallProvider specified and thirdParty redial is not enabled. Filtering for 1P calls.
Unrecognized PreferredCallProvider enum value, skipping provider predicate.
ThirdParty redial is enabled, using redial predicate that includes search for non-normalized handle values.
ThirdParty redial is not enabled, using normal recent call predicate that includes search for non-normalized handle values.
Facetime No Fan Out is true
crrHandleRecommendation is true
 enableTelemetry=YES 
Handling start call intent: %@
FaceTimeInvitation Enabled for faceTime link: %@
Calling completion block with response: %@ user activity: %@
handleStartCall
found a FaceTimeable personHandle: %@
found a non-FaceTimeable personHandle: %@
Determining response for dial request: %@
Redial/callback to 3P call history entry.
useDeprecatedCallingIntents: %@
Dial request was restricted due to screen time policy.
Dial request was restricted due to downtime policy.
The call is initiated on a HomePod but the companion device already has a call ringing.
The call is initiated on a HomePod but the companion device already has a call in progress.
Dial request was for FaceTime provider and video but FaceTime video is not enabled. Returning reponse that app configuration is required
Dial request was for FaceTime provider and audio but FaceTime audio is not enabled. Returning reponse that app configuration is required
User activity was nil. Returning failure.
Dial Request invalid: %@
Emergency call requested, will always try to place the call, skipping provider and cellular service availability checks.
Call requested from Watch, will always try to place the call, skipping provider and cellular service availability checks.
Dial Request was for Telephony, but supportsTelephonyCalls was not true
Dial request was for telephony provider but airplane mode is enabled
Dial request was for telephony provider but no cellular service was available
responseForDialRequest
Determining response for join request: %@
Join request was restricted due to some restrictions from all members.
Join request was for FaceTime provider and video but FaceTime video is not enabled. Returning reponse that app configuration is required
Join request was for FaceTime provider and audio but FaceTime audio is not enabled. Returning reponse that app configuration is required
responseForJoinRequest
Confirm start audio call: %@
Join request was restricted due to some restrictions with some members (but not all).
Even though destinationType is normal, user specifically asked for a emergency number
Contact to redial/call back is an emergency number. Requiring intent confirmation.
Contact to redial/call back is NOT an emergency number.
Making an emergency call, sending UserConfirmationRequired with emergency flag = YES
confirmStartCall
Resolving callRecordToCallBack for start call: %@
Calling completion block with result: %@
resolveCallRecordToCallBack
Resolve destination type for start call: %@
%@ is an emergency handle. Resolving to an emergency call
%@ is not an emergency handle. Do not need special resolving.
Could not determine if handle to dial is an emergency handle because handle has not yet been resolved
resolveDestinationType
Intent's contact has no display name. Looking up the list of emergency handles available on this device
There are more than one number that could be dialed. Prompting to disambiguate between them using these people: %@
Only a single emergency number to call. Resolving to that number.
[WARN] User asked to call emergency services. Emergency provider does not have multiple handles, and call can be completed without specifying one. Returning not required.
Resolving contacts for start call intent: %@
[WARN] Intent includes an emergency person and a non-emergency person. Returning success for non-emergency person so emergency person can be properly resolved. Person: %@
Detected foreign emergency label, calling completion block early: %@
Resolution not required for voicemail destination
Resolution for emergency destination
Intent's contact has a personHandle.value set on an emergency call. Resolving to that value.
Resolution for redial
recentCall for group facetime: %@
Converted INCallRecord has no caller. Returning unsupported
Calling completion block with resolution results: %@
resolveContacts
Resolving call capability for start call intent: %@
Returning call capability resolution result: %@
resolveCallCapability
[WARN] Unable to infer callCapability from call to redial because the recent call was nil
Inferring audio call capability from call to redial
Inferring video call capability from call to redial
[WARN] Unable to infer callCapability from call to redial because media type of that call was unknown.
Call capability is already set, no inferring needed
Inferring audio callCapability because provider is Telephony.
Inferring video callCapability because provider is FaceTime and video is supported.
Inferring audio callCapability because provider is FaceTime and audio is supported
[WARN] Unable to infer callCapability. Provider is Facetime, but neither facetime audio nor video calling are supported.
Changing callCapability from video to audio because the current idiom only supports audio
Returning call Capability %ld
Facetime Video calling is unavailable, returning call capability unsupported reason video call unsupported.
deviceIdiom %ld is an audio only device idiom.
This Mac has no attached camera.
deviceIdiom %ld supports video calling.
Call capabilities do not support FaceTime video calls
Devices primary display is disabled, e.g. user is on carDND mode. 
GroupFaceTime is disabled for China SKU devices
Resolving faceTimeLink for start call intent: %@
Resolving faceTimeLink for person: %@
Returning empty string as this is a telephony call or featureflag is disabled or destinations was empty
No non-FaceTime handles found. Returning nil.
This is watchOS or tvOS. Sending a placeholder string for returning unsupported dialog
tuHandle generation failed and nil was returned. Setting empty string.
Link generation failed and nil was returned. Setting empty string.
Returning FaceTimeLink resolution result: %@
Resolving call provider for start call intent: %@
The call provider %@ for redial or call back is not supported
Telephony call was requested from a watch or for an emergency call and telephony is not supported. isWatch: %d, isEmergencyCall: %d
Telephony call was requested, but supportsTelephonyCalls was false
FaceTime provider is blocked in settings or by managed configuration
FaceTime is not supported by this device's hardware or carrier configuration
FaceTime audio calling service is not available, likely because user is not signed in
FaceTime audio call was requested, but supportsFaceTimeAudioCalls was false, and the request passed checks for FT settings-based restrictions and FT provider availability.
FaceTime video calling service is not available, likely because user is not signed in
FaceTime video call was requested, but supportsFaceTimeVideoCalls was false, and the request passed checks for FT settings-based restrictions and FT provider availability.
Group FaceTime video calls are not supported by this device's hardware or carrier configuration
Returning call provider resolution result: %@
resolvePreferredCallProvider
Looking up recentCallRecordToRedial
Using previously-resolved INCallRecord from callRecordToCallBack
Looking up recentCall by constructing query from callRecordFilter
Looking up recentCall by constructing query from intent
recentCallToRedial
Expected to map CHRecentCall to INCallRecord 1:1
predicate for recentCall: %@
callHistoryDBCallToRedial
Found recentCall: %@
Resolution needs a value for zero contacts
Attempting to resolve more than one call participant. Returning multiple contacts unsupported for each recipient.
Handle has the LocalEmergency flag. Resolving success. %@ with type: %@
Handle %@ is in the global emergency numbers list. EmergencyType is %@
It's unclear if the user literally wanted this number, or if they meant to call emergency services. Disambiguate between local and nonlocal emergency services.
Returning _INStartCallContactUnsupportedReasonForeignEmergencyDisambiguation with alternative items: %@
Number is on the global emergency numbers list, but INPersonHandle already has the emergencyType set: %@
Resolved to 1 and only 1 suggested contact with only 1 handle. Confirming the contact...
User has called the handle of the suggested contact before. Skip confirmation...
User has not called the handle of the suggested contact before. Confirm with the user about the suggested contact...
Number is not on the global emergency numbers list
Requested handle type is unknown, but preferredCallProvider is phone. Inferring handle type of phone number.
PreferredCallProvider is faceTime. Inferring handle type of unknown to present both phone number and email address.
Native flow contact resolver enabled.
Confident match found by NCR, uuid %@
Low-confidence (needsConfirmation) match found by NCR, uuid %@
NCR recommended needsDisambiguation for contacts, but some have the same name. Proceeding to handle disambiguation.
needsDisambiguation recommended by NCR, uuids %@
NCR found no matches for person: %@
Only one matching contact for requested handle -- proceeding to handle disambiguation: %@
Only one matching contact (regardless of requested handle): %@
Using legacy contact resolution
Resolved to %ld contacts, asking the user to disambiguate among persons: %@
ScoreBasedResolutionResult is Disambiguate, but some contacts have the same name. Proceeding to handle disambiguation.
No valid matching handle is found for the resolved contacts and this handle has been requested: %@. will attempt additional matching handles from siri matches.
Resolved to %ld matching contacts with %ld additional matching handles. Contact: %@ Handles: %@
%@ was requested but the contact doesn't an exact match. Using the only alternative instead: %@
Resolved to %ld matching contacts with %ld matching handles. Contact: %@ Handles: %@
None of the resolved contacts have a valid matching handle. Offering all handles as alternatives
Offering all handles as alternatives
Using CRR based recommendation results: %@
No resolution result resolved, adding an unsupported result
Resolved to one CRR recommended handle: %@
Resolved to more than one CRR recommended handle: %@
Resolved to one handle: %@
Resolved contacts all share a handle: treating them as the same person. Contacts: %@
Facetime call contact resolved to multiple handles. Using score based resolution model to resolve handles: %@
Facetime call resolved to multiple handles for a distinct person, preserving ambiguity. Will ring all handles. Person: %@
Facetime call resolved to multiple contacts with the same name, none of which share a handle. Disambiguating between handles.
Resolved to multiple handles, using score based resolution model to resolve handles: %@
Found no matching contact from siriMatches or name search, returning unsupported. Person: %@
Updated contact in intent: %@
resolutionResults: %@
Emergency contacts detected. Inserting personHandles.
Either a mobile handle or an iPhone label was requested without any matching handle. Checking if an alternative for mobile or iPhone handles exists.
Handle %@ is MMI or USSD which is unsupported. Returning error for person: %@
The user requested a potentially invalid phone number or email, returning confirmationRequired.
There is a handle on the single contact. Format the person handle and return success with that person.
Returning confirmationRequired with person: %@
Returning confirmationRequired with person (as upstream contact resolver recommended): %@
Returning success with person: %@
Using legacy handle resolution.
Beginning score based handle resolution.
Completed score based handle resolution.
[WARN] More than one INPerson matches the same handle (e.g. multiple labels with the same number). As either handle will produce the same result, resolving to the first one. %@
[WARN] More than one INPerson matches the same handle (e.g. multiple labels with the same number). As either handle will produce the same result, confirming just the first one. %@
[WARN] More than one INPerson matches the same handle (e.g. multiple labels with the same number). Including those multiples in the disambiguation list. %@
scoreBasedHandleResolution
Beginning call recency for handles check.
Handle %@ was a partipant in recent call %@ with country code %@.
Completed call recency for handles check.
recentCallsMatchingHandles
Beginning favorites for handles check.
No favorites entry for handle %@. No score adjustment.
Completed favorites for handles check.
favoritesAmongHandles
Beginning score based contact resolution.
Completed score based contact resolution.
scoreBasedContactResolution
Beginning call recency for contacts check.
Contact %@ was a partipant in recent call %@ with isoCountryCode %@.
Completed call recency for contacts check.
contactCallRecency
Searching call history for one call matching predicate: %@
callHistoryDBFirstRecencyCheck
Completed initial call history search with result: %@
Calculated oldest relevant date of %@ based on most recent matching call %.0f seconds ago
Searching call history for up to %ld calls matching predicate: %@
callHistoryDBSecondRecencyCheck
Completed second call history search with result: %@
No matching call history for any of the requested handles. No score adjustment.
recentCallsWithHandles
Beginning favorites for contacts check.
No favorites entry for contact %@. No score adjustment.
Completed favorites for contacts check.
favoritesAmongContacts
Found %ld alternatives when dropping label constraint.
Not dropping handle type constraint because the user requested a telephony call.
Found %ld alternatives when dropping handle and label constraint.
Handle is an emergency number, %@ is in the prioritizedSenderIdentities list
Handle is an emergency number, %@ is in the emergencyLabeledHandles list
Handle is an emergency number, %@ is in the unlabeled emergencyHandles list
Handle is not an emergency number: %@
Not applying an implicit handle type filter to an intent with an explicit handle type specified
Not applying an implicit handle type filter to an intent with an explicit call provider specified
Not applying an implicit handle type = phone number filter on a device that doesn't support telephone calls
Not applying an implicit handle type filter because there is already only one matching handle
Multiple handles match call request. Attempting to filter to just phone numbers to resolve ambiguity.
Filtered the results to only phone numbers. Remaining matches: %@
Filtering results to only phone numbers would have produced no results, not filtering.
Have previously confirmed recipient with handle %@
Have previously confirmed recipient with contactIdentifier: %@
Not requiring invalid number confirmation because recipient has already been confirmed.
Not requiring invalid number confirmation because recipient has a nonlocal emergency handle type and has already been confirmed.
Not requiring invalid number confirmation because handle is valid for country code %@
[WARN] Requested handle %@ is not valid for any of the following country codes: %@
Examining call history to determine if there is existing call history with the invalid number.
callHistoryDBForInvalidNumber
Not requiring invalid number confirmation because there are %ld recents call with %@
Did not find any matching calls with: %@
[WARN] Returning YES for shouldRequireInvalidNumberConfirmationForRecipient.
shouldRequireInvalidNumberConfirmation
Not requiring unknown recipient confirmation because recipient has already been confirmed.
Not requiring unknown recipient confirmation because requested recipient was a relation: %@
Not requiring unknown recipient confirmation because requested recipient was a manually dictated handle: %@
Not requiring unknown recipient confirmation because userInput "%@" matches resolved recipients full displayName: "%@"
Not requiring unknown recipient confirmation because requested displayName "%@" matches resolved recipients displayName: "%@"
Not requiring unknown recipient confirmation because userInput "%@" matches resolved recipients long format name: "%@"
Not requiring unknown recipient confirmation because requested recipient displayName "%@" matches resolved recipients long format name: "%@"
Not requiring unknown recipient confirmation because userInput "%@" matches resolved recipients medium format name: "%@"
Not requiring unknown recipient confirmation because requested recipient displayName "%@" matches resolved recipients medium format name: "%@"
Not requiring unknown recipient confirmation because userInput "%@" matches resolved contact formatted name: "%@"
Not requiring unknown recipient confirmation because requested recipient displayName "%@" matches resolved contact formatted name: "%@"
Not requiring unknown recipient confirmation because resolved contact is a favorite. Contact: %@
Searching for recent calls using predicate: %@
callHistoryDBForUnknownRecipient
Not requiring unknown recipient confirmation because there is a recent call with one of the following handles: %@
Did not find a recent calls with any of the following handles: %@
Returning %{public}@ for shouldRequireUnknownRecipientConfirmationForRequestedRecipient.
shouldRequireUnknownRecipientConfirmation
group facetime message callGroups for intent: %@
fetching handles from spiChat: %@
updated contacts: %@
Found a favorites entry matching handle: %@
[WARN] Ignoring favorite for telephony call with an empty phone number: %@
[WARN] Ignoring favorite for telephony call without a phone number: %@
Checking if there is any call ringing currently
is there any call ringing currently? %@
Checking if there is any call in progress.
is there any call in progress? %@
SiriInference/native_flow_contact_resolution: %@
SiriInference/found_in_app_contacts: %@
spiChat person handles: %@
ConversationContactPool: Searching for %@ in caller ContactPool: %@
ConversationContactPool: Searching for %@ in participants ContactPool: %@
ConversationPersonFilter: matchesCaller=%@
ConversationPersonFilter: matchesParticipants=%@
Handling join call intent: %@
Searching for conversationId: %@ among active conversations.
Found matching conversation %@
No matching conversation. Returning failure.
Attaching TUJoinConversationRequest to UserActivity
UserActivity was nil
Confirming join call intent: %@
Resolving join call intent: %@
INCallGroupConversation already resolved.
Searching among active conversations for a matching call.
doesConversationMatch = %@ for TUConversation: %@
Found more than one matching conversation.
Found one matching conversation.
Found no matching conversations.
Calling completion on resolution result: %@
Confirming Siri request to hang up: %@
No calls exist. Returning failure.
Call exists, proceeding to handle HangUp intent.
Handling Siri request to hang up: %@
An incoming call exists. Declining it and returning success: %@
At least one call exists. Hanging up and returning success
No calls exist. Since call was hung up between confirm and handle, return success.
starting dispatch semaphore for TUIDSLookupManagerStatusChangedNotification
ending dispatch semaphore for TUIDSLookupManagerStatusChangedNotification
canonical address: %@
Failed to generate FaceTime link with error %@
Successfully generated FaceTime link: %@
Received Siri request to answer incoming call: %@
Requested to answer specific call but UUID did not match identifier of requested call
Requested identifier: %@, actual identifier: %@
An incoming call exists. Answering it and returning success
Setting endpointIDSDestination: %@
Intent contains an originatingDeviceRapportMediaSystemIdentifier: %@
Intent contains an originatingDeviceRapportEffectiveIdentifier: %@
No incoming call exists. Returning no incoming call. Recent Missed Calls: %@
Before deduping: %ld, After deduping: %ld
All persons have equivalent handle values
Converting CHRecentCall %@ to INCallRecord.
Converted this CHRecentCall previously, using cached converted INCallRecord.
[WARN] Caller ID is blocked
[WARN] Found an entry of unknown type in handleToPerson cache
person added to particpants in callrecord: %@
[WARN] Could not determine remoteParticipantHandle for CHRecentCall
serviceProvider is not FT or telephony - must be a 3P provider.
No serviceProvider found on CHRecentCall - setting preferredCallProvider to unknown.
IntentHandlerFeatureFlags
NSObject
StartCallIntentHandlerUtilities
ContactResolver
DefaultCoreTelephonyDataSource
CoreTelephonyClientSubscriberDelegate
CoreTelephonyDataSource
SimpleConversationFilter
ConversationFilter
TUIntentHandler
MockVoicemailDataSource
SearchCallHistoryVoicemailDataSource
MockVoicemail
SearchCallHistoryVoicemail
ScoreBasedResolver
ScoreBasedResolutionResult
ContactPool
TelephonyUtilities
AppResolver
AppResolving
SearchCallHistoryIntentHandler
INSearchCallHistoryIntentHandling
SearchCallHistoryIntentHandlerDataSource
SiriMatchRecommendation
IntentHandlerCoreAnalyticsLogger
IntentHandlerCoreAnalyticsLogging
PlayVoicemailIntentHandler
AVAudioPlayerDelegate
INPlayVoicemailIntentHandling
IntentRouter
IntentHandlerAndIdentifier
AndConversationFilter
ConversationFilterFactory
IdentifyIncomingCallerIntentHandler
INIdentifyIncomingCallerIntentHandling
IdentifyIncomingCallerIntentHandlerDefaultDataSource
IdentifyIncomingCallerIntentHandlerDataSource
CallHistoryDataSourcePredicate
RecentCallQuery
StartCallIntentHandler
INStartCallIntentHandling
StartCallDefaultFavoritesDataSource
FavoritesDataSource
StartCallIntentHandlerDataSource
ConversationContactPool
ConversationPersonFilter
JoinCallIntentHandler
INJoinCallIntentHandling
HangUpCallIntentHandler
INHangUpCallIntentHandling
ContactSlotResolutionHelper
FaceTimeUtilities
AnswerCallIntentHandler
INAnswerCallIntentHandling
AnswerCallIntentHandlerDefaultDataSource
AnswerCallIntentHandlerDataSource
INPersonWrapper
INPersonDeduplicator
CallRecordConverter
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
faceTimeNoFanOutEnabled
faceTimeInvitationEnabled
crrHandleRecommendation
TB,R,N
countByEnumeratingWithState:objects:count:
identifier
isEqualToString:
addObject:
count
addObjectsFromArray:
containsObject:
copy
initWithValue:type:label:
stringFromContact:style:
componentsForContact:
initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:isMe:
phonemeData
setPhonemeData:
initWithCapacity:
phoneNumbers
value
unformattedInternationalStringValue
emailAddresses
lowercaseString
setObject:forKey:
allValues
firstObject
initWithSet:
intersectSet:
personHandle
handleWithPersonHandle:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
sortContacts:withIdentifiers:
inPersonFromContact:handleValue:handleType:handleLabel:
contactsShareHandleValue:
contactWithMostHandles:
populatePersonsByTUHandleFrom:personsByTUHandle:tuHandleOrderedSet:
init
descriptorForUsedKeys
descriptorForRequiredKeysForStyle:
arrayWithObjects:count:
tu_allContactIdentifiers
_contactsMatchingIdentifiers:
_contactsMatchingNamesForPerson:
_sendSiriMatchAnalyticsEventForIdentifiers:contactsMatchingId:contactsMatchingName:
initWithContacts:
predicateForContactsWithIdentifiers:
contactsDataSource
_keysToFetch
unifiedContactsMatchingPredicate:keysToFetch:error:
displayName
predicateForContactsMatchingName:options:
numberWithUnsignedInteger:
sharedPreferences
_cachedSiriLanguageCode
coreAnalyticsLogger
logSiriMatchEvent:matchesByIdCount:matchesByNameCount:siriLocale:
initWithDataSource:logger:
matchingContactsForPerson:
.cxx_destruct
_contactsDataSource
_coreAnalyticsLogger
T@"<TUContactsDataSource>",R,N,V_contactsDataSource
T@"<IntentHandlerCoreAnalyticsLogging>",R,N,V_coreAnalyticsLogger
stringWithFormat:
UTF8String
coreTelephonyClientQueue
initWithQueue:
setDelegate:
subscriberCountryCodeDidChange
coreTelephonyClient
getSubscriptionInfoWithError:
subscriptionsInUse
copyMobileCountryCode:error:
length
setSubscriberCountryCodeDidChange:
array
copyRegistrationStatus:error:
sharedInstance
simStatusDidChange:status:
simLockSaveRequestDidComplete:success:
simPinEntryErrorDidOccur:status:
simPukEntryErrorDidOccur:status:
simPinChangeRequestDidComplete:success:
authTokenChanged:
shortLabelsDidChange
subscriberCountryCodeDidChange:
userDefaultVoiceSlotDidChange:
prlVersionDidChange:version:
didDetectSimDeactivation:info:
allRelevantISOCountryCodes
isCellularServiceAvailable
T@"NSArray",R,C,N
_subscriberCountryCodeDidChange
_coreTelephonyClient
_allRelevantISOCountryCodes
_coreTelephonyClientQueue
T@"CoreTelephonyClient",R,N,V_coreTelephonyClient
T@"NSObject<OS_dispatch_queue>",R,N,V_coreTelephonyClientQueue
TB,N,V_subscriberCountryCodeDidChange
T@"NSArray",R,C,N,V_allRelevantISOCountryCodes
predicate
groupId
messagesGroupName
groupName
isEqualToIgnoringCase:
initWithPredicate:
remoteMembers
filterForCallGroup:
filterForParticipantCount:
matches:
setPredicate:
_predicate
T@?,C,N,V_predicate
tu_labeledValue:matchesPersonHandleLabel:
caseInsensitiveCompare:
label
localizedStringForLabel:
tu_initUnlabledPersonHandleWithTUHandle:isoCountryCodes:
type
stringValue
initWithType:value:
tu_phoneNumbersMatchingPersonHandleLabel:
tu_emailAddressesMatchingPersonHandleLabel:
tu_personHandleMatchingHandle:isoCountryCodes:
allMockVoicemails
exceptionWithName:reason:userInfo:
raise
predicateWithBlock:
filteredArrayUsingPredicate:
tu_voicemailsPassingTest:
isOnline
isSubscribed
online
TB,R,N,GisOnline
subscribed
TB,R,N,GisSubscribed
initForActiveVoicemailAccountWithVoicemails:
setOnline:
setSubscribed:
setAllMockVoicemails:
_online
_subscribed
_allMockVoicemails
T@"NSArray",C,N,V_allMockVoicemails
TB,N,GisOnline,V_online
TB,N,GisSubscribed,V_subscribed
setSenderDestinationID:
setUnread:
voicemailWithCaller:unread:
date
senderDestinationID
duration
isDeleted
isTrashed
isUnread
TQ,R,N
T@"NSDate",R,N
T@"NSString",R,C,N
Td,R,N
deleted
TB,R,N,GisDeleted
trashed
TB,R,N,GisTrashed
unread
TB,R,N,GisUnread
setIdentifier:
setDate:
setDuration:
setDeleted:
setTrashed:
_deleted
_trashed
_unread
_identifier
_date
_senderDestinationID
_duration
TQ,N,V_identifier
T@"NSDate",&,N,V_date
T@"NSString",C,N,V_senderDestinationID
Td,N,V_duration
TB,N,GisDeleted,V_deleted
TB,N,GisTrashed,V_trashed
TB,N,GisUnread,V_unread
integerValue
numberWithInteger:
addScore:forEntity:reason:
entities
scoreByEntity
allKeys
compare:
sortedArrayUsingSelector:
reverseObjectEnumerator
allObjects
objectAtIndexedSubscript:
successfulResolutionMargin
confirmationEnabled
confirmationMargin
includeAllEntitiesInDisambiguation
nameForResolutionResultType:
initWithType:resolvedEntities:resolutionSummary:
initWithEntities:
addScore:forEntities:reason:
setSuccessfulResolutionMargin:
setConfirmationMargin:
setConfirmationEnabled:
result
setIncludeAllEntitiesInDisambiguation:
setEntities:
setScoreByEntity:
scoreReasonsByEntity
setScoreReasonsByEntity:
cachedResult
setCachedResult:
_confirmationEnabled
_includeAllEntitiesInDisambiguation
_successfulResolutionMargin
_confirmationMargin
_entities
_scoreByEntity
_scoreReasonsByEntity
_cachedResult
T@"NSArray",C,N,V_entities
T@"NSMutableDictionary",&,N,V_scoreByEntity
T@"NSMutableDictionary",&,N,V_scoreReasonsByEntity
T@"ScoreBasedResolutionResult",&,N,V_cachedResult
Tq,N,V_successfulResolutionMargin
Tq,N,V_confirmationMargin
TB,N,V_confirmationEnabled
TB,N,V_includeAllEntitiesInDisambiguation
T@"ScoreBasedResolutionResult",R,N
resolutionResultType
setResolutionResultType:
resolvedEntities
setResolvedEntities:
resolutionSummary
setResolutionSummary:
_resolutionResultType
_resolvedEntities
_resolutionSummary
TQ,N,V_resolutionResultType
T@"NSArray",C,N,V_resolvedEntities
T@"NSArray",C,N,V_resolutionSummary
allContacts
contactByIdCache
setWithArray:
contactWithId:
allContactIds
contactsWithIds:
_allContacts
_contactByIdCache
T@"NSDictionary",R,C,N,V_contactByIdCache
T@"NSArray",R,C,N,V_allContacts
_appearsToBePhoneNumber
_appearsToBeEmail
normalizedPhoneNumberHandleForValue:isoCountryCode:
normalizedEmailAddressHandleForValue:
normalizedGenericHandleForValue:
tu_tuHandle
tu_normalizedCHHandlesFromTUHandle:isoCountryCodes:
T@"TUHandle",R,N
contactIdentifier
siriMatches
emergencyType
initWithValue:type:label:emergencyType:
nameComponents
image
customIdentifier
isMe
tu_contactsMatchingIdentifiers:contactsDataSource:identifierToContactCache:
objectForKey:
predicateForContactsMatchingEmailAddress:
phoneNumberWithStringValue:
predicateForContactsMatchingPhoneNumber:
tu_matchingINPersonHandlesByContactIdentifier
tu_personWithFormattedHandleForISOCountryCodes:
tu_handlesMatchingPersonWithContactsDataSource:identifierToContactCache:
tu_personMatchingHandle:contactsDataSource:isoCountryCodes:
initWithBundleIdentifier:allowPlaceholder:error:
compatibilityObject
plugInKitPlugins
appSupportsDeprecatedCallingIntents:
initWithDataSource:
dateCreated
startDateComponents
endDateComponents
recipient
callCapabilities
callTypes
unseen
preferredCallProvider
maximumRecordCountForCallRecordTypeOptions:
dataSource
voicemailDataSource
identifierToContactCache
boolValue
subarrayWithRange:
callRecordsForVoicemails:
callRecordsForRecentCallsWithRecordTypeOptions:startDate:endDate:recipient:capabilities:preferredProvider:maximumRecordCount:unseen:
initWithCode:userActivity:
setCallRecords:
notRequired
successWithResolvedPerson:
unsupported
arrayWithCapacity:
coreTelephonyDataSource
null
numberWithDouble:
numberWithBool:
initWithIdentifier:dateCreated:callRecordType:callCapability:callDuration:unseen:participants:numberOfCalls:isCallerIdBlocked:
predicateForCallsAfterDate:beforeDate:
predicateForCallsWithNumberOfRemoteParticipants:
predicateForCallsWithAnyOfTheseRemoteParticipantHandles:isoCountryCodes:
predicateForCallsThatWereOriginated:
predicateForCallsThatWereAnswered:
andPredicateWithSubpredicates:
orPredicateWithSubpredicates:
predicateForAudioCalls
predicateForVideoCalls
predicateForTelephonyCalls
predicateForFaceTimeCalls
predicateForCallsThatAreRead:
callHistoryDataSource
coalescedCallsWithPredicate:limit:offset:batchSize:
providerManager
callRecordsForRecentCalls:withContactsDataSource:withCallProviderManager:
handleSearchCallHistory:completion:
confirmSearchCallHistory:completion:
resolveCallTypeForSearchCallHistory:withCompletion:
resolveDateCreatedForSearchCallHistory:withCompletion:
resolveRecipientForSearchCallHistory:withCompletion:
resolveCallTypesForSearchCallHistory:withCompletion:
resolveUnseenForSearchCallHistory:withCompletion:
_dataSource
_identifierToContactCache
T@"<SearchCallHistoryIntentHandlerDataSource>",R,N,V_dataSource
T@"NSCache",R,N,V_identifierToContactCache
voicemailsPassingTest:
contactStore
T@"<TUContactsDataSource>",R,N
T@"<CallHistoryDataSource>",R,N
T@"<CoreTelephonyDataSource>",R,N
T@"TUCallProviderManager",R,N
T@"<SearchCallHistoryVoicemailDataSource>",R,N
_callHistoryDataSource
_providerManager
_contactStore
T@"CNContactStore",R,N,V_contactStore
T@"<CallHistoryDataSource>",R,N,V_callHistoryDataSource
T@"TUCallProviderManager",R,N,V_providerManager
initWithType:contactIdentifiers:
contactIdentifiers
_type
_contactIdentifiers
Tq,R,N,V_type
T@"NSArray",R,C,N,V_contactIdentifiers
dictionaryWithObjects:forKeys:count:
currentPlayer
stop
setCurrentPlayer:
voicemailFinishedPlaying
setVoicemailFinishedPlaying:
callRecordIdentifier
longLongValue
voicemailWithIdentifier:
isRestrictedMessage:
_playVoicemail:voicemailManager:completion:
queue
handleWithDestinationID:
callFilterController
containsRestrictedHandle:forBundleIdentifier:performSynchronously:
category
setCategory:withOptions:error:
setActive:error:
dataURL
initWithContentsOfURL:error:
markVoicemailAsRead:
play
audioPlayerDidFinishPlaying:successfully:
audioPlayerDecodeErrorDidOccur:error:
audioPlayerBeginInterruption:
audioPlayerEndInterruption:withOptions:
audioPlayerEndInterruption:withFlags:
audioPlayerEndInterruption:
handlePlayVoicemail:completion:
confirmPlayVoicemail:completion:
endPlayback
_voicemailFinishedPlaying
_currentPlayer
T@?,C,N,V_voicemailFinishedPlaying
T@"AVAudioPlayer",&,N,V_currentPlayer
existingHandlerForIntentIdentifier:
initWithHandler:intentIdentifier:
updateRecentlyUsedHandlersWithHandler:
handler
recentIntentHandlersAndIdentifiers
intentIdentifier
enumerateObjectsUsingBlock:
removeObjectAtIndex:
insertObject:atIndex:
removeLastObject
handlerForIntent:
transactionDidCompleteForIntentIdentifier:
setRecentIntentHandlersAndIdentifiers:
_recentIntentHandlersAndIdentifiers
T@"NSMutableArray",&,N,V_recentIntentHandlersAndIdentifiers
setIntentIdentifier:
setHandler:
_intentIdentifier
_handler
T@"NSString",C,N,V_intentIdentifier
T@,&,N,V_handler
filters
initWithFilters:
_filters
T@"NSArray",R,N,V_filters
callGroup
caller
participants
initWithCaller:participants:dataSource:
matchCallerAndParticipantsExactly
makeFilterForINCallGroupConversationFilter:contactsDataSource:
callCenterWithQueue:
callCenter
incomingCall
incomingVideoCall
handle
setStatusCode:
provider
preferredCallProviderFor:
callUUID
isVideo
bundleIdentifier
isBlocked
initWithIdentifier:dateCreated:callRecordType:callCapability:callDuration:unseen:preferredCallProvider:participants:numberOfCalls:providerId:providerBundleId:isCallerIdBlocked:
predicateForMissedCallsSinceDate:
callsWithPredicate:limit:offset:batchSize:
isTelephonyProvider
isFaceTimeProvider
handleIdentifyIncomingCaller:completion:
confirmIdentifyIncomingCaller:completion:
setDataSource:
setCallCenter:
_callCenter
_queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"<IdentifyIncomingCallerIntentHandlerDataSource>",&,N,V_dataSource
T@"TUCallCenter",&,N,V_callCenter
predicateForCallsWithNoDuration
predicateWithFormat:
predicateForCallsWithDurationGreaterThan:
predicateWithValue:
normalizedValue
normalizedDestination
predicateForRemoteParticipantsWithValues:caseInsensitiveValues:normalizedValues:
predicateForRemoteParticipantsWithNormalizedValues:
predicateForRemoteParticipantsWithValues:
predicateForRemoteParticipantsWithValuesCaseInsensitive:
predicateForCallsWithServiceProvider:
predicateForCallsWithCallCategory:
predicateForCallsWithDurationLongerThanImmediateHangUp
predicateForCallToCallBackWithAnyOfTheseRemoteParticipantHandles:isoCountryCodes:
predicateForTelephonyOrFaceTimeCalls
initWithParticipants:destinationType:callTypes:callCapability:preferredCallProvider:includeThirdPartyCalls:
setParticipants:
setDestinationType:
setCallTypes:
setCallCapability:
setPreferredCallProvider:
setIncludeThirdPartyCalls:
callRecordTypePredicates
preferredCallProviderPredicate
callCapabilityPredicate
participantsPredicatesWithContactsDataSource:contactIdentifierCache:coreTelephonyDataSource:
destinationType
includeThirdPartyCalls
callCapability
initWithParticipants:destinationType:callTypes:callCapability:preferredCallProvider:
predicateForRecentCallWithContactsDataSource:contactIdentifierCache:coreTelephonyDataSource:
_includeThirdPartyCalls
_participants
_destinationType
_callTypes
_callCapability
_preferredCallProvider
T@"NSArray",C,N,V_participants
Tq,N,V_destinationType
TQ,N,V_callTypes
Tq,N,V_callCapability
Tq,N,V_preferredCallProvider
TB,N,V_includeThirdPartyCalls
initWithDispatchQueue:
isGreenTea
featureFlags
senderIdentityClient
initWithDialIntent:providerManager:contactsDataSource:senderIdentityClient:
isFaceTimeInvitationEnabled
faceTimeLink
sortFaceTimeHandles:faceTimeHandles:nonFaceTimeHandles:
URLWithString:
conversationLinkForURL:
initWithConversationLink:otherInvitedHandles:sendLetMeInRequest:
setWantsStagingArea:
setVideoEnabled:
_initWithIntent:
initWithUserActivity:
conversationLink
responseForJoinRequest:intent:callProvider:
responseForDialRequest:intent:
code
logOutgoingCallToHandle:
userActivity
contacts
faceTimeUtilities
isFaceTimeable:
normalizedHandleWithDestinationID:
makeActivityWithIntent:dialRequestAttachment:
appResolver
userActivityUsingDeprecatedCallingIntents:
callFilterStatusForDialRequest:
_idiom
callRinging
callsInProgress
supportsFaceTimeVideoCalls
supportsFaceTimeAudioCalls
isValid
dialType
supportsTelephonyCalls
canAttemptTelephonyCallsWithoutCellularConnection
isAirplaneModeEnabled
supportsPrimaryCalling
makeActivityWithIntent:joinRequestAttachment:
restrictedContacts:callProvider:
isVideoEnabled
setConfirmationReason:
setRestrictedContacts:
intentHasUnresolvedLocalEmergencyContact:
setShouldDoEmergencyCountdown:
isEmergencyHandle:
callRecordFilter
recentCallRecordToRedialForIntent:
successWithResolvedCallRecord:
unsupportedForReason:
successWithResolvedCallDestinationType:
emergencyProvider
emergencyLabeledHandles
localizedEmergencyString:
initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:
resolutionResultDisambiguationWithItemsToDisambiguate:
isUnresolvedLocalEmergencyContact:
resolutionResultForEmergency
updateHandlerStateForContactResolutionResults:
personResolutionResultsForIntent:
_isPrimaryDisplayDisabled
inferCallCapabilityForPreferredCallProvider:recentCall:initialCallCapability:idiom:isDisplayDisabled:
resolutionResultForCallCapability:idiom:withDisplayDisabled:
mediaType
shouldForceAudioOnlyWithIdiom:withDisplayDisabled:
successWithResolvedCallCapability:
hasCamera
isChinaSKUDevice
isGroupCall
successWithResolvedString:
runIDSQueryForStartCallIntent:
fetchSenderTUHandle:
generateFaceTimeLink:
absoluteString
providerId
globalEmergencyNumbers
successWithResolvedPreferredCallProvider:
isFaceTimeAudioBlocked
supportsDisplayingFaceTimeAudioCalls
isDirectFaceTimeAudioCallingCurrentlyAvailable
isFaceTimeVideoBlocked
supportsDisplayingFaceTimeVideoCalls
isDirectFaceTimeVideoCallingCurrentlyAvailable
isGFTDisabledForChinaSKU:
callRecordToCallBack
recentCallToRedialForQuery:
callRecordForRecentCall:
recordTypeForRedialing
callRecordsForRecentCalls:withContactsDataSource:withCallProviderManager:withCurrentISOCountryCodes:
callGroups
resolveContactsFromCallGroups:
needsValue
emergencyTypeToString:
resolutionResultUnsupportedWithReason:alternativeItems:
resolutionResultForPersonWithResolvedHandleValue:
expectFoundInAppsContacts
isSuggested
recentCallsWithHandles:telephonyOnly:
confirmationRequiredWithPersonToConfirm:forReason:
_inPersonsFromContact:withRequestedType:requestedLabel:isoCountryCodes:
_applyImpliedFilterToPhoneNumberOnlyMatchesIfApplicableForPersonsByContact:requestedHandleType:preferredCallProvider:
initWithUnresolvedPerson:availableContacts:
extractRecommendation
contactsAvailableInPool:
expectUpstreamContactRecommendation
setWithObject:
anyContactsHaveSameName:
buildDisambiguationResultForContacts:
parseEmergencyContacts:usingExistingResult:
isCRRHandleRecommendationEnabled
disambiguationWithPeopleToDisambiguate:
useLegacyContactResolution
resolvePreferredContactFromContacts:
buildConfirmationResultForContact:withReason:
dedupeINPersons:
generateAdditionalMatchingHandles:resolvedContacts:requestedHandleType:requestedHandleLabel:
getAlternativesForContact:forRequestedHandleType:forCallProvider:
resolutionResultForPersonWithResolvedContactName:resolvedPerson:resolvedContact:contactIdentifiersRequiringConfirmation:
requireScoreBasedResolutionForGFT:numberOfContactsCount:
resolvePreferredHandleFromHandles:contactIdentifiersRequiringConfirmation:telephonyOnly:
resolutionResultCode
resolvedValue
setValue:forKey:
alternatives
disambiguationItems
setPersonHandle:
isMMIOrUSSDNumber:
shouldRequireInvalidNumberConfirmationForRecipient:
shouldRequireUnknownRecipientConfirmationForRequestedRecipient:resolvedToRecipient:contact:
useLegacyHandleResolution
updateScoreBasedHandleResolver:forRecentCallsMatchingHandles:telephonyOnly:
updateScoreBasedHandleResolver:forFavoritesAmongHandles:
isoCountryCode
allCountryCodesRelevantToCall:
remoteParticipantHandles
isCanonicallyEqualToHandle:isoCountryCode:
favoritesDataSource
hasFavoritesEntryForTelephonyCallWithPhoneNumber:isoCountryCodes:
updateScoreBasedContactResolver:forRecentCallsMatchingContacts:
updateScoreBasedContactResolver:forFavoritesAmongContacts:
allTUHandles
timeIntervalSinceDate:
dateByAddingTimeInterval:
hasFavoritesEntryForContact:
itemToConfirm
handlesConfirmed
contactIdentifiersConfirmed
telephonyProvider
prioritizedSenderIdentities
UUID
isEmergencyNumberForDigits:senderIdentityUUID:
emergencyHandles
bundleWithPath:
initWithDeferredFormat:fromTable:bundle:arguments:
siriLanguageCode
localizeForLanguage:
enumerateKeysAndObjectsUsingBlock:
haveAlreadyConfirmedRecipient:
isValidForISOCountryCode:
callCountWithPredicate:
_userInput
relationship
localizedStringFromPersonNameComponents:style:options:
fetchSPIHandlesForGroupID:
address
handleStartCall:completion:
confirmStartCall:completion:
resolveCallRecordToCallBackForStartCall:withCompletion:
resolveDestinationTypeForStartCall:withCompletion:
resolveContactsForStartCall:withCompletion:
resolveCallCapabilityForStartCall:withCompletion:
initWithFeatureFlags:
initWithFeatureFlags:faceTimeUtilities:
isFaceTimeNoFanOutEnabled
callCapabilityFromRecentCall:
resolveFaceTimeLinkForStartCall:withCompletion:
resolvePreferredCallProviderForStartCall:withCompletion:
setCoreAnalyticsLogger:
setAppResolver:
setHandlesConfirmed:
setContactIdentifiersConfirmed:
setFeatureFlags:
setFaceTimeUtilities:
_appResolver
_handlesConfirmed
_contactIdentifiersConfirmed
_featureFlags
_faceTimeUtilities
T@"NSMutableOrderedSet",&,N,V_handlesConfirmed
T@"NSMutableOrderedSet",&,N,V_contactIdentifiersConfirmed
T@"IntentHandlerFeatureFlags",&,N,V_featureFlags
T@"FaceTimeUtilities",&,N,V_faceTimeUtilities
T@"<StartCallIntentHandlerDataSource>",&,N,V_dataSource
T@"<IntentHandlerCoreAnalyticsLogging>",&,N,V_coreAnalyticsLogger
T@"<AppResolving>",&,N,V_appResolver
isSubsetOfSet:
initWithContactStore:
favoritesController
entriesForContact:
entries
actionType
contactProperty
initWithCallCenter:
_favoritesController
T@"TUCallCenter",R,N,V_callCenter
T@"CNFavorites",R,N,V_favoritesController
radiosPreferences
airplaneMode
dispatchQueue
hasCurrentCalls
videoDeviceController
inputDevices
callingBlocked
faceTimeBlocked
canAttemptEmergencyCallsWithoutCellularConnection
standardUserDefaults
boolForKey:
handles
setDispatchQueue:
T@"TUSenderIdentityClient",R,N
airplaneModeEnabled
TB,R,N,GisAirplaneModeEnabled
directFaceTimeAudioCallingCurrentlyAvailable
TB,R,N,GisDirectFaceTimeAudioCallingCurrentlyAvailable
directFaceTimeVideoCallingCurrentlyAvailable
TB,R,N,GisDirectFaceTimeVideoCallingCurrentlyAvailable
faceTimeAudioBlocked
TB,R,N,GisFaceTimeAudioBlocked
faceTimeVideoBlocked
TB,R,N,GisFaceTimeVideoBlocked
T@"<FavoritesDataSource>",R,N
T@"NSObject<OS_dispatch_queue>",&,N
T@"TUCallCenter",R,N
signInController
_signInController
_senderIdentityClient
_favoritesDataSource
_dispatchQueue
_radiosPreferences
T@"IDSSignInController",R,N,V_signInController
T@"RadiosPreferences",R,N,V_radiosPreferences
T@"TUSenderIdentityClient",R,N,V_senderIdentityClient
T@"<FavoritesDataSource>",R,N,V_favoritesDataSource
T@"NSObject<OS_dispatch_queue>",&,N,V_dispatchQueue
callerPool
intersectsSet:
participantsPool
callerPoolContainsOneOf:
participantsPoolContainsOneOf:
setCallerPool:
setParticipantsPool:
_callerPool
_participantsPool
T@"ContactPool",&,N,V_callerPool
T@"ContactPool",&,N,V_participantsPool
_contactPoolForConversation:
_matchesCallerFilter:
_matchesParticipantsFilter:
_identifiersForRecommendedPerson:
tu_contactsForHandles:keyDescriptors:error:
initiator
_caller
T@"INPerson",R,N,V_caller
T@"NSArray",R,N,V_participants
initWithCallCenter:contactsDataSource:
groupConversation
conversationId
conversationManager
activeConversations
UUIDString
_responseForMatchingConversation:intent:
initWithConversation:
successWithResolvedCallGroupConversation:
groupConversationFilter
initWithConversationId:caller:otherParticipants:callGroup:
handleJoinCall:completion:
confirmJoinCall:completion:
resolveGroupConversationForJoinCall:withCompletion:
scoredAlternatives
score
usesScoreBasedEncoding
person
valueForKey:
numberWithFloat:
floatValue
disconnectCall:withReason:
setHungUpCallType:
disconnectCurrentCallAndActivateHeld
handleHangUpCall:completion:
confirmHangUpCall:completion:
_lookup:
unresolvedPerson
availableContacts
_unresolvedPerson
_availableContacts
T@"INPerson",R,N,V_unresolvedPerson
T@"ContactPool",R,N,V_availableContacts
canonicalAddressesForAddresses:
defaultCenter
mainQueue
addObserverForName:object:queue:usingBlock:
sharedManager
beginQueryWithDestinations:
removeObserver:
isFaceTimeAudioAvailableForAnyDestinationInDestinations:
isFaceTimeVideoAvailableForAnyDestinationInDestinations:
isFaceTimeMultiwayAvailableForAnyDestinationInDestinations:
generateLinkWithInvitedMemberHandles:completionHandler:
callIdentifier
initWithCall:
setBehavior:
_originatingDeviceIDSIdentifier
_isOwnedByCurrentUser
destinationWithURI:
setEndpointIDSDestination:
_originatingDeviceRapportMediaSystemIdentifier
setEndpointRapportMediaSystemIdentifier:
endpointRapportMediaSystemIdentifier
_originatingDeviceRapportEffectiveIdentifier
setEndpointRapportEffectiveIdentifier:
endpointRapportEffectiveIdentifier
audioRoute
setSourceIdentifier:
answerWithRequest:
dateWithTimeIntervalSinceNow:
handleAnswerCall:completion:
confirmAnswerCall:completion:
T@"<AnswerCallIntentHandlerDataSource>",&,N,V_dataSource
initWithINPerson:
inPerson
tuHandle
_inPerson
_tuHandle
T@"INPerson",R,N,V_inPerson
T@"TUHandle",R,N,V_tuHandle
recentCallIdToCallRecordCache
uniqueId
callRecordForRecentCall:withContactsDataSource:withCallProviderManager:withCurrentISOCountryCodes:
callerIdIsBlocked
handleToPersonCache
callStatus
providerForRecentCall:
preferredCallProviderFromRecentCall:
read
numberWithInt:
numberOfOccurrences
serviceProvider
setRecentCallIdToCallRecordCache:
setHandleToPersonCache:
_recentCallIdToCallRecordCache
_handleToPersonCache
T@"NSCache",&,N,V_recentCallIdToCallRecordCache
T@"NSCache",&,N,V_handleToPersonCache
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@32@0:8@16@24
@48@0:8@16@24q32@40
@24@0:8@16
v40@0:8@16@24@32
v16@0:8
@"<TUContactsDataSource>"
@"<IntentHandlerCoreAnalyticsLogging>"
v32@0:8@16@24
v28@0:8@16B24
v24@0:8@16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSString"24
v28@0:8@"CTXPCServiceSubscriptionContext"16B24
v24@0:8@"CTServiceDescriptor"16
v24@0:8@"CTXPCServiceSubscriptionContext"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSNumber"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTSimDeactivationInfo"24
@"NSArray"16@0:8
v20@0:8B16
@"CoreTelephonyClient"
@"NSArray"
@"NSObject<OS_dispatch_queue>"
@24@0:8Q16
B24@0:8@"TUConversation"16
@24@0:8@?16
@?16@0:8
v24@0:8@?16
B32@0:8@16@24
@"NSArray"24@0:8@?<B@?@"<SearchCallHistoryVoicemail>">16
@28@0:8@16B24
d16@0:8
@"NSDate"16@0:8
v24@0:8Q16
v24@0:8d16
@"NSDate"
@"NSString"
v40@0:8q16@24@32
v24@0:8q16
q16@0:8
@"NSMutableDictionary"
@"ScoreBasedResolutionResult"
@40@0:8Q16@24@32
@"NSDictionary"
@40@0:8@16@24@32
B24@0:8@"NSString"16
Q24@0:8Q16
v32@0:8@16@?24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INSearchCallHistoryIntentResponse">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INCallRecordTypeResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INDateComponentsRangeResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INPersonResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INCallRecordTypeOptionsResolutionResult">24
v32@0:8@"INSearchCallHistoryIntent"16@?<v@?@"INBooleanResolutionResult">24
@80@0:8Q16@24@32@40Q48q56Q64@72
@"<SearchCallHistoryIntentHandlerDataSource>"
@"NSCache"
@"<TUContactsDataSource>"16@0:8
@"<CallHistoryDataSource>"16@0:8
@"<CoreTelephonyDataSource>"16@0:8
@"TUCallProviderManager"16@0:8
@"<SearchCallHistoryVoicemailDataSource>"16@0:8
@"<CallHistoryDataSource>"
@"TUCallProviderManager"
@"CNContactStore"
@32@0:8q16@24
v48@0:8@16@24@32@40
v48@0:8@"NSNumber"16@"NSNumber"24@"NSNumber"32@"NSString"40
v32@0:8@16Q24
v28@0:8@"AVAudioPlayer"16B24
v32@0:8@"AVAudioPlayer"16@"NSError"24
v24@0:8@"AVAudioPlayer"16
v32@0:8@"AVAudioPlayer"16Q24
v32@0:8@"INPlayVoicemailIntent"16@?<v@?@"INPlayVoicemailIntentResponse">24
v40@0:8@16@24@?32
@"AVAudioPlayer"
@"NSMutableArray"
v32@0:8@"INIdentifyIncomingCallerIntent"16@?<v@?@"INIdentifyIncomingCallerIntentResponse">24
q24@0:8@16
@"<IdentifyIncomingCallerIntentHandlerDataSource>"
@"TUCallCenter"
@20@0:8B16
@24@0:8d16
@24@0:8q16
@20@0:8I16
@56@0:8@16q24Q32q40q48
@60@0:8@16q24Q32q40q48B56
v32@0:8@"INStartCallIntent"16@?<v@?@"INStartCallIntentResponse">24
v32@0:8@"INStartCallIntent"16@?<v@?@"INCallRecordResolutionResult">24
v32@0:8@"INStartCallIntent"16@?<v@?@"INCallDestinationTypeResolutionResult">24
v32@0:8@"INStartCallIntent"16@?<v@?@"NSArray">24
v32@0:8@"INStartCallIntent"16@?<v@?@"INStartCallCallCapabilityResolutionResult">24
q52@0:8q16@24q32q40B48
@36@0:8q16q24B32
B28@0:8q16B24
B32@0:8Q16Q24
@48@0:8@16@24@32@40
@36@0:8@16@24B32
v36@0:8@16@24B32
@40@0:8@16q24q32
@48@0:8@16q24@32@40
B40@0:8@16@24@32
@"<StartCallIntentHandlerDataSource>"
@"<AppResolving>"
@"NSMutableOrderedSet"
@"IntentHandlerFeatureFlags"
@"FaceTimeUtilities"
B24@0:8@"CNContact"16
B32@0:8@"TUHandle"16@"NSArray"24
@"CNFavorites"
Q24@0:8@16
v24@0:8@"TUHandle"16
@"NSArray"24@0:8@"NSString"16
@24@0:8@"NSObject<OS_dispatch_queue>"16
Q24@0:8@"TUDialRequest"16
@"NSArray"32@0:8@"NSArray"16@"TUCallProvider"24
@"TUSenderIdentityClient"16@0:8
@"<FavoritesDataSource>"16@0:8
@"NSObject<OS_dispatch_queue>"16@0:8
v24@0:8@"NSObject<OS_dispatch_queue>"16
@"TUCallCenter"16@0:8
@"IDSSignInController"
@"TUSenderIdentityClient"
@"<FavoritesDataSource>"
@"RadiosPreferences"
@"ContactPool"
@"INPerson"
v32@0:8@"INJoinCallIntent"16@?<v@?@"INJoinCallIntentResponse">24
v32@0:8@"INJoinCallIntent"16@?<v@?@"INCallGroupConversationResolutionResult">24
v32@0:8@"INHangUpCallIntent"16@?<v@?@"INHangUpCallIntentResponse">24
@32@0:8@16q24
v24@0:8@"NSArray"16
B24@0:8@"NSArray"16
@"TUHandle"24@0:8@"TUDialRequest"16
@"TUConversationLink"24@0:8@"NSSet"16
v32@0:8@"INAnswerCallIntent"16@?<v@?@"INAnswerCallIntentResponse">24
@"<AnswerCallIntentHandlerDataSource>"
@"TUHandle"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.CallHistory.sync.allow</key>
<true/>
<key>com.apple.CallKit.call-directory</key>
<array>
<string>synchronize-extensions</string>
<string>compact-store</string>
<string>query-identification-entries</string>
</array>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>cellular-plan</string>
</array>
<key>com.apple.Contacts.database-allow</key>
<true/>
<key>com.apple.coreaudio.allow-amr-decode</key>
<true/>
<key>com.apple.private.CallHistory.read</key>
<true/>
<key>com.apple.private.CallHistory.read-write</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.attribution.implicitly-assumed-identity</key>
<dict>
<key>type</key>
<string>path</string>
<key>value</key>
<string>/System/Library/PrivateFrameworks/TelephonyUtilities.framework/PlugIns/PhoneIntentHandler.appex/PhoneIntentHandler</string>
</dict>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<true/>
<key>com.apple.private.ids.registration</key>
<array>
<string>com.apple.ess</string>
<string>com.apple.private.ac</string>
</array>
<key>com.apple.private.imcore.imagent</key>
<true/>
<key>com.apple.private.imcore.spi.database-access</key>
<true/>
<key>com.apple.private.intents.extension</key>
<true/>
<key>com.apple.private.security.storage.Voicemail</key>
<true/>
<key>com.apple.private.suggestions.contacts</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceCamera</string>
</array>
<key>com.apple.security.app-sandbox</key>
<true/>
<key>com.apple.security.device.camera</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/Applications/InCallService.app/</string>
<string>/Applications/NanoPhone.app/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<array>
<string>/Library/Voicemail/</string>
<string>/Library/CallHistoryDB/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>/Library/Voicemail/</string>
<string>/Library/Logs/CallHistory</string>
<string>/Library/CallHistoryDB/</string>
<string>/Media/Recordings/</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.telephonyutilities.callservicesdaemon.conversationmanager</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callprovidermanager</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.identityservicesd.embedded.auth</string>
<string>com.apple.CallHistorySyncHelper</string>
<string>com.apple.voicemail.vmd</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.CellularPlanDaemon.xpc</string>
<string>com.apple.imdpersistence.IMDPersistenceAgent</string>
</array>
<key>com.apple.security.personal-information.addressbook</key>
<true/>
<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
<array>
<string>com.apple.telephonyutilities.callservicesdaemon.callprovidermanager</string>
<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string>
<string>com.apple.identityservicesd.desktop.auth</string>
<string>com.apple.CallHistorySyncHelper</string>
<string>com.apple.commcenter.xpc</string>
<string>com.apple.videoconference.camera</string>
</array>
<key>com.apple.security.temporary-exception.shared-preference.read-only</key>
<array>
<string>com.apple.TelephonyUtilities</string>
</array>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
<string>access-call-providers</string>
<string>modify-calls</string>
<string>access-call-capabilities</string>
<string>modify-call-capabilities</string>
</array>
<key>com.apple.visualvoicemail.client</key>
<true/>
</dict>
</plist>
