softlink:o:path:/System/Library/PrivateFrameworks/MediaSafetyNet.framework/MediaSafetyNet
v8@?0
void ATMSNMonitorSetMicrophoneState(bool)
MSNSoftLink.h
MSNMonitorSetMicrophoneState
void *MediaSafetyNetLibrary()
void ATMSNMonitorSetLastMicrophoneClient(const char *)
MSNMonitorSetLastMicrophoneClient
assertion failure: mFIFO.size() == 1
AVAudioSessionXPCClientRelay.mm
assertion failure: guard->MessagePending()
assertion failure: previousDescription.objectDescription().objectToken() == newDescription.objectDescription().objectToken()
assertion failure: previousDescription.objectDescription().classTypeID() == newDescription.objectDescription().classTypeID()
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
Test.
com.apple.coreaudio
as_server
%25s:%-5d deferring message for client process %s. Count=%u
%25s:%-5d sending %d deferred messages for client process %s
St12length_error
St11logic_error
St9exception
St13runtime_error
St12out_of_range
St9bad_alloc
NSt3__117bad_function_callE
St12domain_error
AVAudioMicrophoneMonitor
NSObject
AVAudioSessionXPCClientRelay
AVAudioSessionServerFactory
init
sharedInstance
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
setState:clientType:clientID:clientDescription:
.cxx_destruct
.cxx_construct
_clientsWithMicEnabled
_monitorMutex
currentHandler
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
remoteObjectProxy
setBarrierBlock
sendDeferredMessages
scheduleSendBarrierBlock:
initWithConnection:token:
sendServerDefaultRouteChange:
sendInterruptionMessageForSession:userInfo:
sendSessionStoppedForAppStateChange:
sendSession:hasProxies:
sendSessionNeedsStateSync:
sendServerConfigurationChange:
sendControlValueChanged:
guarded_impl
connection
token
auditToken
createServer
createServerWithAudioControlQueue:delegate:
createServerWithDelegate:audioControlQueue:
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B44@0:8B16q20Q28r*36
v16@0:8
{set<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>, std::less<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>, std::allocator<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>>="__tree_"{__tree<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>, std::less<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>, std::allocator<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>>="__value_"Q}}}
{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}
@28@0:8@16{ProcessToken=I}24
v24@0:8r^v16
v28@0:8I16@20
v20@0:8I16
v24@0:8I16B20
{synchronized<as::server::DeferredMessageState, caulk::mach::unfair_lock, caulk::empty_atomic_interface<as::server::DeferredMessageState>>="mMutex"{unfair_lock="m_lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}"mObject"{DeferredMessageState="mMessagePending"B"mDeferredMessageCount"I"proxy"@"<SessionManagerXPCServerCallbackProtocol>""mToken"{ProcessToken="mValue"I}"mFIFO"{vector<as::server::DeferredMessageState::EventType, std::allocator<as::server::DeferredMessageState::EventType>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<as::server::DeferredMessageState::EventType *, std::allocator<as::server::DeferredMessageState::EventType>>="__value_"^i}}"mDeferredConfigChange"{optional<as::server::ConfigChangeSummary>=""(?="__null_state_"c"__val_"{ConfigChangeSummary="_vptr$Base"^^?"_sessionChanges"{vector<std::unique_ptr<as::server::SessionUpdateSummary>, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::unique_ptr<as::server::SessionUpdateSummary> *, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>>="__value_"^v}}"_hardwareSystemChange"{unique_ptr<as::server::ChangedObject, std::default_delete<as::server::ChangedObject>>="__ptr_"{__compressed_pair<as::server::ChangedObject *, std::default_delete<as::server::ChangedObject>>="__value_"^{ChangedObject}}}})"__engaged_"B}"mDeferredDefaultRouteChanges"{vector<as::RouteIdentifier, std::allocator<as::RouteIdentifier>>="__begin_"^{RouteIdentifier}"__end_"^{RouteIdentifier}"__end_cap_"{__compressed_pair<as::RouteIdentifier *, std::allocator<as::RouteIdentifier>>="__value_"^{RouteIdentifier}}}"mDeferredStopForAppStateChange"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}"mDeferredNeedsStateSync"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}"mDeferredInterruptions"{vector<std::pair<unsigned int, NSDictionary *>, std::allocator<std::pair<unsigned int, NSDictionary *>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, NSDictionary *> *, std::allocator<std::pair<unsigned int, NSDictionary *>>>="__value_"^v}}"mDeferredHasProxies"{vector<std::pair<unsigned int, bool>, std::allocator<std::pair<unsigned int, bool>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, bool> *, std::allocator<std::pair<unsigned int, bool>>>="__value_"^v}}"mDeferredControlValueChanges"{vector<as::server::ControlValue, std::allocator<as::server::ControlValue>>="__begin_"^{ControlValue}"__end_"^{ControlValue}"__end_cap_"{__compressed_pair<as::server::ControlValue *, std::allocator<as::server::ControlValue>>="__value_"^{ControlValue}}}}}
@"NSXPCConnection"
{ProcessToken="mValue"I}
@32@0:8@16@24
CIPSt12length_error
St11logic_error
St9exception
softlink:o:path:/System/Library/PrivateFrameworks/MediaSafetyNet.framework/MediaSafetyNet
v8@?0
void ATMSNMonitorSetMicrophoneState(bool)
MSNSoftLink.h
MSNMonitorSetMicrophoneState
void *MediaSafetyNetLibrary()
void ATMSNMonitorSetLastMicrophoneClient(const char *)
MSNMonitorSetLastMicrophoneClient
assertion failure: mFIFO.size() == 1
AVAudioSessionXPCClientRelay.mm
assertion failure: guard->MessagePending()
assertion failure: previousDescription.objectDescription().objectToken() == newDescription.objectDescription().objectToken()
assertion failure: previousDescription.objectDescription().classTypeID() == newDescription.objectDescription().classTypeID()
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
Test.
com.apple.coreaudio
as_server
%25s:%-5d deferring message for client process %s. Count=%u
%25s:%-5d sending %d deferred messages for client process %s
AVAudioMicrophoneMonitor
NSObject
AVAudioSessionXPCClientRelay
AVAudioSessionServerFactory
scheduleSendBarrierBlock:
remoteObjectProxy
currentHandler
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
init
sharedInstance
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
setState:clientType:clientID:clientDescription:
.cxx_destruct
.cxx_construct
_clientsWithMicEnabled
_monitorMutex
initWithConnection:token:
sendDeferredMessages
setBarrierBlock
sendServerDefaultRouteChange:
sendInterruptionMessageForSession:userInfo:
sendSessionStoppedForAppStateChange:
sendSession:hasProxies:
sendSessionNeedsStateSync:
sendServerConfigurationChange:
sendControlValueChanged:
guarded_impl
connection
token
createServer
createServerWithAudioControlQueue:delegate:
createServerWithDelegate:audioControlQueue:
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B44@0:8B16q20Q28r*36
v16@0:8
{set<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>, std::less<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>, std::allocator<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>>="__tree_"{__tree<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>, std::less<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>, std::allocator<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<std::pair<AVAudioMicrophoneMonitorClientType, unsigned long long>>>="__value_"Q}}}
{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}
@28@0:8@16{ProcessToken=I}24
v24@0:8r^v16
v28@0:8I16@20
v20@0:8I16
v24@0:8I16B20
{synchronized<as::server::DeferredMessageState, caulk::mach::unfair_lock, caulk::empty_atomic_interface<as::server::DeferredMessageState>>="mMutex"{unfair_lock="m_lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}"mObject"{DeferredMessageState="mMessagePending"B"mDeferredMessageCount"I"proxy"@"<SessionManagerXPCServerCallbackProtocol>""mToken"{ProcessToken="mValue"I}"mFIFO"{vector<as::server::DeferredMessageState::EventType, std::allocator<as::server::DeferredMessageState::EventType>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<as::server::DeferredMessageState::EventType *, std::allocator<as::server::DeferredMessageState::EventType>>="__value_"^i}}"mDeferredConfigChange"{optional<as::server::ConfigChangeSummary>=""(?="__null_state_"c"__val_"{ConfigChangeSummary="_vptr$Base"^^?"_sessionChanges"{vector<std::unique_ptr<as::server::SessionUpdateSummary>, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::unique_ptr<as::server::SessionUpdateSummary> *, std::allocator<std::unique_ptr<as::server::SessionUpdateSummary>>>="__value_"^v}}"_hardwareSystemChange"{unique_ptr<as::server::ChangedObject, std::default_delete<as::server::ChangedObject>>="__ptr_"{__compressed_pair<as::server::ChangedObject *, std::default_delete<as::server::ChangedObject>>="__value_"^{ChangedObject}}}})"__engaged_"B}"mDeferredDefaultRouteChanges"{vector<as::RouteIdentifier, std::allocator<as::RouteIdentifier>>="__begin_"^{RouteIdentifier}"__end_"^{RouteIdentifier}"__end_cap_"{__compressed_pair<as::RouteIdentifier *, std::allocator<as::RouteIdentifier>>="__value_"^{RouteIdentifier}}}"mDeferredStopForAppStateChange"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}"mDeferredNeedsStateSync"{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}"mDeferredInterruptions"{vector<std::pair<unsigned int, NSDictionary *>, std::allocator<std::pair<unsigned int, NSDictionary *>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, NSDictionary *> *, std::allocator<std::pair<unsigned int, NSDictionary *>>>="__value_"^v}}"mDeferredHasProxies"{vector<std::pair<unsigned int, bool>, std::allocator<std::pair<unsigned int, bool>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, bool> *, std::allocator<std::pair<unsigned int, bool>>>="__value_"^v}}"mDeferredControlValueChanges"{vector<as::server::ControlValue, std::allocator<as::server::ControlValue>>="__begin_"^{ControlValue}"__end_"^{ControlValue}"__end_cap_"{__compressed_pair<as::server::ControlValue *, std::allocator<as::server::ControlValue>>="__value_"^{ControlValue}}}}}
@"NSXPCConnection"
{ProcessToken="mValue"I}
@32@0:8@16@24
