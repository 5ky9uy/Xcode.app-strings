noteContext
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
numberWithUnsignedInt:
setWithObject:
notesForIntegerIds:
count
objectAtIndexedSubscript:
messageFromLocalNoteObject:inMailboxUid:inAccount:
localNotesAccountInContext:
storeForExternalId:
maximumServerIntId
array
allNotesInCollection:
countByEnumeratingWithState:objects:count:
hasValidServerIntId
addObject:
sortedArrayUsingFunction:context:
_copyMessageDetailsForNote:inLibrary:
getDetailsForAllMessagesFromMailbox:
notesForServerIntIdsInRange:ascending:limit:
insertObject:atIndex:
deleteNoteRegardlessOfConstraints:
initWithCapacity:
libraryID
numberWithUnsignedLong:
serverIntId
numberWithLongLong:
containsObject:
integerId
URLString
localIntegerId
numberWithInt:
notesForServerIntIds:
handleFailureInFunction:file:lineNumber:description:
setObject:forKeyedSubscript:
longLongValue
objectForKeyedSubscript:
setServerIntId:
messageIsSyncableNote:
messageData
notesAccount
attachmentManager
_noteObjectFromMessage:withTextContentData:inStore:attachmentManager:andContext:
addNoteNeedingBodyDownload:
messageFlags
flags
setFlags:
save:
DAExtendedDescription
databaseIsCorrupt:
messageStore
mailboxUid
remoteID
setWithArray:
minimumSequenceNumberForServerIntIds:
stringWithFormat:
setSequenceNumber:
messageWithLibraryID:options:inMailbox:
unreadCountForMailbox:
deletedCountForMailbox:
maximumRemoteIDForMailbox:
getDetailsForMessagesWithRemoteIDInRange:fromMailbox:
getDetailsForMessages:absoluteBottom:topOfDesiredRange:range:fromMailbox:
compactMailbox:
compactMessages:permanently:
addMessages:withMailbox:fetchBodies:newMessagesByOldMessage:remoteIDs:setFlags:clearFlags:messageFlagsForMessages:copyFiles:addPOPUIDs:dataSectionsByMessage:
setFlagsFromDictionary:forMessages:
mailboxUidForMessage:
isMessageContentsLocallyAvailable:
setFlags:forMessage:
sequenceIdentifierForMessagesWithRemoteIDs:inMailbox:
setSequenceIdentifier:forMessagesWithRemoteIDs:inMailbox:
removeAllMessagesFromMailbox:andNotify:
messageWithMessageID:options:inMailbox:
messagesWithMessageIDHeader:
sendMessagesMatchingCriterion:to:options:range:
messagesForMailbox:olderThanNumberOfDays:
messagesWithSummariesForMailbox:range:
nonDeletedCountForMailbox:
totalCountForMailbox:
oldestMessageInMailbox:
minimumRemoteIDForMailbox:
setFlagsForMessages:mask:
messageWithRemoteID:inRemoteMailbox:
setNoteContext:
account
setAccount:
setNotesAccount:
.cxx_destruct
_account
_notesAccount
_noteContext
init
initWithConsumer:queue:
consumer
queue
_consumer
_queue
setClass:forClassName:
stringByAppendingPathComponent:
setGlobalPathForAccounts:
setDataclassesConsideredActive:
initWithFormat:
setHandlerForTemporaryUidToRemoteIDMapping:
setShouldFlattenCacheOperations:
sharedInvocationQueue
distantFuture
timeIntervalSinceReferenceDate
setThreadRecycleTimeout:
setUpMailLogging
shouldDataAccessCreateAccountForACAccount:
_setMailHacks
initWithBackingAccountInfo:
parentAccount
childAccounts
accountType
syncableDataclasses
identifier
accountWithUniqueId:
setImapMailAccount:
initWithPath:
setLibrary:
initWithPrimaryLibrary:
setNotesNeedingBodyDownload:
_setSpinning:
dealloc
imapMailAccount
systemWillSleep
deviceWillSleep
systemDidWake
deviceDidWake
accountID
accountForAccountId:
backingAccountInfo
newlyAddedAccount
accountIdentifier
isEqualToString:
setAccountIdentifier:
name
accountDescription
setName:
setAccountType:
bundleForClass:
pathForResource:ofType:
pathToConstraintsPlist
setPathToConstraintsPlist:
stores
displayName
length
setFolderName:
setFolderID:
setIsDefault:
setMailboxUid:
newlyAddedStore
folderID
setExternalIdentifier:
folderName
isDefault
setDefaultStore:
isSpinning
setIsSpinning:
_consumerQueueWrapper:failedToRetrieveFolderListWithStatus:error:
_noteInvocationFinished
isShuttingDown
library
rootMailboxUid
getMailboxListWithConnection:
currentMonitor
error
allMailboxUids
setDaFoldersByFolderId:
mailboxUidForRelativePath:create:
_copyDAFolderFromMailboxUid:isDefault:
daFoldersByFolderId
depthFirstEnumerator
allValues
_copyNotesStoreFromDAFolder:withNoteContext:
copy
externalIdentifier
deleteStore:
_consumerQueueWrapperSuccessfullyRetrievedFolderList:
sharedGateKeeper
relinquishLocksForWaiter:dataclasses:moreComing:
successfullyRetrievedFolderList
failedToRetrieveFolderListWithStatus:andError:
_reallySyncNotesFolderListWithConsumerQueueWrapper:
mf_invocationWithSelector:target:object:
outstandingInvocationCount
setOutstandingInvocationCount:
addInvocation:
_syncNotesFolderListInLockWithConsumer:queue:
registerWaiter:forDataclassLocks:completionHandler:
notesFolders
storeForMailboxUid:
arrayWithObjects:count:
setAdditionalFetchHeaders:
allIMAPServersSupportNotesSearch
accountTypeIdentifier
setAdditionalSynchronizationSearchArguments:
itemChangeType
changedItem
serverId
outgoingMessageFromLocalNoteObject:imapAccount:attachmentManager:
setMessageBody:
appendMessages:unsuccessfulOnes:
initWithLibraryID:
setHasTemporaryUid:
setRemoteID:
setMessageStore:
deleteMessages:moveToTrash:
notesNeedingBodyDownload
allNotesWithoutBodiesInCollection:
addObjectsFromArray:
fetchMobileSynchronously:
modificationDate
compare:
sortUsingComparator:
isBookkeepingEntry
boolValue
messageBody
htmlContent
headers
htmlData
preferredCharacterSet
bytes
initWithBytes:length:encoding:
setContent:
noteAttachmentObjectsFromAttachmentsOfMessage:attachmentManager:noteContext:
setAttachments:
removeAllObjects
syncResultForNotesFolder:noteContext:newTag:previousTag:actions:results:changeSet:notesToDeleteAfterSync:isInitialSync:moreAvailable:moreLocalChangesAvailable:
notesFolderWithId:failedToSyncWithStatus:error:
_noteInvocationFinishedOnMainThread
performSelectorOnMainThread:withObject:waitUntilDone:
fullyShutDownCallback
setFullyShutDownCallback:
setIsShuttingDown:
shouldCreateAccountForBackingAccountInfo:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
waiterID
syncNotesFolderListWithConsumer:queue:
defaultNotesFolder
notesFoldersByFolderId
synchronizeNotesFolder:noteContext:previousTag:actions:changeSet:notesToDeleteAfterSync:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
shutDownAndCallCallback:
_isShuttingDown
_isSpinning
_outstandingInvocationCount
_imapMailAccount
_attachmentManager
_daFoldersByFolderId
_notesNeedingBodyDownload
_fullyShutDownCallback
changeType
intValue
noteIntegerIds
initWithItemChangeType:changedItem:serverId:
isMarkedForDeletion
initWithAccount:
scheduleIdentifier
initWithConnectionClass:delegate:delegateQueue:serviceIdentifier:
setOnlyAllowedStyle:
setSourceApplicationBundleIdentifier:
_validateAndSyncWithRemoteChanges:
setHandlerForOfflineCacheFlush:
stopManager
setDelegate:
sharedDBWatcher
isMonitoring
registerConcernedNoteParty:withChangedBlock:
removeConcernedNoteParty:
enabledForDADataclass:
setIsMonitoring:
refreshFolderListRequireChangedFolders:isUserRequested:
_setUpNotesNotifications
startManager
allObjects
notificationNamesForPrefix:mailboxUids:
registerPushNotificationPrefix:forMailboxUids:
arrayWithObject:
objectAtIndex:
objectForKey:
setObject:forKey:
_setLastFolderSetRegisteredForPush:
_syncAllNotesFoldersWithRemoteChanges:
_notifyFolderSyncComplete
_notifyFolderSyncFailed
domain
code
setIsWaitingForPassword:
dropAssertionsAndRenewCredentialsInQueue:withHandler:
shouldFailAllTasks
publicDescription
_notifyContentSyncFailed
_appendSyncRequestsForFolders:remoteChanges:
deleteChanges:
removeObject:
_fireWaitingFolderItemSyncRequests
_notifyContentSyncComplete
_callShutdownBlockIfAppropriate
dictionaryWithObjects:forKeys:count:
mutableCopy
_clearChangeHistoriesInContext:changeSet:
isOffline
errorWithDomain:code:userInfo:
_finishSyncResultOnMainThreadForFolderWithDictionary:
drainWorkerThreadAndInvokeBlock:
folder
changes
hasRemoteChanges
_copyDAActionsFromNoteChanges:inStore:mutableNotesToDeleteAfterSync:
_reallySyncRequest:
_syncInLockRequest:
lock
unlock
_syncRequest:
setHasRemoteChanges:
actions
initWithFolder:hasRemoteChanges:isInitialUberSync:
_appendSyncRequest:
stringByAppendingString:
resumeManagerWithAction:
currentStyle
accountHasShutDown
_tearDownNotesNotifications
unregisterWaiterForDataclassLocks:
setAccountHasShutDown:
connectionManager:handleEvent:
connectionManager:handleEvent:context:
startMonitoring
syncFolderIDs:forDataclasses:isUserRequested:
_handlePushNotificationWithName:
requestAgentStopMonitoringWithCompletionBlock:
currentlySyncingFolderIds
setCurrentlySyncingFolderIds:
outstandingFolderRequests
setOutstandingFolderRequests:
folderItemSyncRequestLock
setFolderItemSyncRequestLock:
pcManager
setPcManager:
lastFolderSetRegisteredForPush
setLastFolderSetRegisteredForPush:
daFoldersByPushNotificationName
setDaFoldersByPushNotificationName:
_accountHasShutDown
_currentlySyncingFolderIds
_outstandingFolderRequests
_folderItemSyncRequestLock
_pcManager
_lastFolderSetRegisteredForPush
_daFoldersByPushNotificationName
_mailboxUid
setLocalIntegerId:
_localIntegerId
attachmentURLs
attachmentForURL:error:
newlyAddedAttachment
contentID
setContentID:
fileName
setFilename:
mimeType
inferredMimeType
setMimeType:
fetchDataSynchronously:
persistAttachmentData:error:
attachmentDataFileURLWithError:
dataWithContentsOfURL:options:error:
filename
attachmentForData:mimeType:fileName:contentID:context:
firstHeaderForKey:
hasPrefix:
messageSize
da_newGUID
newlyAddedNoteWithGUID:
setIsBookkeepingEntry:
setStore:
setTitle:
firstSenderAddress
setAuthor:
author
mf_copyDateInCommonFormatsWithString:
date
setModificationDate:
setCreationDate:
stringByReplacingOccurrencesOfString:withString:
title
componentsSeparatedByString:
setHeader:forKey:
_mimeVersion
fullUserName
firstEmailAddress
mf_formattedAddressWithName:email:useQuotes:
setAddressListForSender:
systemTimeZone
dateWithCalendarFormat:timeZone:
creationDate
guid
headersFromLocalNoteObject:imapAccount:
setMessageClassToInstantiate:
isPlainText
content
createMessageWithString:headers:
attachments
messageAttachmentsFromNoteAttachmentObjects:attachmentManager:
createMessageWithHtmlString:plainTextAlternative:otherHtmlStringsAndAttachments:headers:
removeAttachmentForURL:
store
mailboxUidForURL:
timeIntervalSince1970
setMessageInfo:to:cc:bcc:sender:dateReceivedTimeIntervalSince1970:dateSentTimeIntervalSince1970:messageIDHash:conversationID:summary:
filenameWithBasename:
DAManagedDefaultForKey:
isAppleInternalInstall
initWithBytesNoCopy:length:freeWhenDone:
logBytes:length:
flushLog
logClasses
setLogClasses:
setLogAllSocketActivity:
lockWhenCondition:
currentRunLoop
getCFRunLoop
port
scheduleInRunLoop:forMode:
unlockWithCondition:
initWithCondition:
_runInterimWorkerThreadWithStartupLock:
initWithTarget:selector:object:
start
flushAllInvocationQueues
logConnection:type:data:
currentThread
/Library/Caches/com.apple.xbs/Sources/DataAccessTools_Sim/DataAccess-2241.4.3/IMAPNotes/IMAPNotesLibrary.m
<Unknown File>
Library MUST have a context at this point
 permanently
-[IMAPNotesLibrary addMessages:withMailbox:fetchBodies:newMessagesByOldMessage:remoteIDs:setFlags:clearFlags:messageFlagsForMessages:copyFiles:addPOPUIDs:dataSectionsByMessage:]
<Unknown Function>
We pulled out a note with an invalid remote id (note %@)
Notes db was corrupted.  Crashing the daemon to get a second chance at it (err %@)
%llu
account
T@"IMAPAccount",W,N,V_account
notesAccount
T@"DAIMAPNotesDaemonAccount",W,N,V_notesAccount
noteContext
T@"NoteContext",&,N,V_noteContext
NSInteger _sortNotesByServerId(__strong id, __strong id, void *)
consumer
T@"<DAIMAPNotesFolderListConsumer>",R,N,V_consumer
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
v8@?0
MessageFileWrapper
Library/DataAccess/
@"NSString"12@?0I8
IMAPNotesConstraints
plist
/Library/Caches/com.apple.xbs/Sources/DataAccessTools_Sim/DataAccess-2241.4.3/IMAPNotes/DAIMAPNotesDaemonAccount.m
com.apple.mobilenotes
Notes
<no description>
v20@?0q8B16
Got an unacceptable store class %@ from my account
X-Uniform-Type-Identifier
X-Universally-Unique-Identifier
X-Mail-Created-Date
HEADER
com.apple.mail-note
We should not have any messages pending a body download at this point.
q24@?0@8@16
Got an unknown class of %@ for htmlContent of message %@
IMAP Daemon Account outstanding invocation count went negative.  Fix yer bug.  Self %@
IMAP Notes account got confused, has callCallback = YES, but a NULL callback
Who's asking me to shut down, while I'm in the process of shutting down?!.  Self %@
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
imapMailAccount
T@"IMAPAccount",&,N,V_imapMailAccount
daFoldersByFolderId
T@"NSMutableDictionary",&,N,V_daFoldersByFolderId
notesNeedingBodyDownload
T@"NSMutableArray",&,N,V_notesNeedingBodyDownload
isSpinning
TB,N,V_isSpinning
outstandingInvocationCount
Ti,N,V_outstandingInvocationCount
fullyShutDownCallback
T@?,C,N,V_fullyShutDownCallback
isShuttingDown
TB,N,V_isShuttingDown
attachmentManager
T@"MFAttachmentLibraryManager",R,N,V_attachmentManager
IMAPNotesAccountFolderHierarchySyncCompleteNotification-
IMAPNotesAccountFolderHierarchySyncFailedNotification-
IMAPNotesAccountContentSyncCompleteNotification-
IMAPNotesAccountContentSyncFailedNotification-
com.apple.dataaccessd
v24@?0q8@"NSError"16
folderID
/Library/Caches/com.apple.xbs/Sources/DataAccessTools_Sim/DataAccess-2241.4.3/IMAPNotes/DAIMAPNotesAgent.m
IMAP Agent outstanding invocation count went negative.  Fix yer bug.  Self %@
error
-[DAIMAPNotesAgent _fireWaitingFolderItemSyncRequests]
You cannot have preset actions on a Notes folder sync request.  Sorry.  Request %@
Attempted to queue a sync request for a folder with no folder id: %@
-[DAIMAPNotesAgent connectionManager:handleEvent:]
IMAPNotesAgent-%@
currentlySyncingFolderIds
T@"NSMutableSet",&,N,V_currentlySyncingFolderIds
outstandingFolderRequests
T@"NSMutableArray",&,N,V_outstandingFolderRequests
folderItemSyncRequestLock
T@"NSLock",&,N,V_folderItemSyncRequestLock
pcManager
T@"PCConnectionManager",&,N,V_pcManager
accountHasShutDown
TB,N,V_accountHasShutDown
lastFolderSetRegisteredForPush
T@"NSSet",&,N,V_lastFolderSetRegisteredForPush
daFoldersByPushNotificationName
T@"NSMutableDictionary",&,N,V_daFoldersByPushNotificationName
mailboxUid
T@"MFMailboxUid",&,N,V_mailboxUid
localIntegerId
Ti,N,V_localIntegerId
DataAccess
%@ (%@)
%a, %d %b %Y %H:%M:%S %z
^{__CFString=}76@?0i8^{__CFDate=}12^{__CFString=}20^{__CFString=}28r*36r*44Q52^v60^{__CFString=}68
IMAPNotesTraffic
DALogLevel
T@"NoteContext",R,N
message with library id %@ returning %@
Max remote id for mailbox url %@ returning %d
Get details for all messages in mailbox at url %@
Returning %lu message details
Getting details for %lu messages in mailbox %@ from top of range [%lu, %lu]
Deleting all notes in mailbox at url %@
Yikes, being asked to compact a message I don't know how to grok: %@
Deleting messages with int ids %@%@
Skipping delete of message with int id %@, as we've recently modified its server int id to be something new %lld (condensed add/delete into a modify)
Adding messages %@ (remote ids %@) to mailbox uid %@
Failed to save: %@
Notes database was corrupted! This is a fatal error, so let's try that again.
Setting flags %llx for message %@
Testing remote id %lld with local id %lld
Need to write %s
message with remote id %lld (%@) returning %@
Not creating an agent for account info %@ (%{public}@) because it is a migrated iCloud account
Couldn't find an imap account associated with account %@.  Parent %@.  Peers %@.
Creating IMAPNotes account in db for account id %@
Telling springboard to set the spinner to %@ for identifier com.apple.mobilenotes
Finished telling springboard to set the spinner to %@ for identifier com.apple.mobilenotes
Not syncing folder list for migrated iCloud account
Not syncing folder list, we're on our way out
Gonna grab our mailbox list now
Monitor gave error %@
Folders from account are %@
No Notes folder exists for account %@.  Creating one on the server
Done, found folders of %@
Threw an exception while getting folder list.  Exception %@
IMAP daemon account %@ is syncing Notes folder list, outstandingInvocationCount is incremented to %d
Locks for dataclasses 0x%lxx were aborted.
Our folder went bye-bye
Sending header-based search to all IMAP servers
NOT requesting notes-only, as the account type %@ does not support that
This should be interesting.  Gonna fetch new messages for store %@
Syncing folder %@ with %lu add/modifies, %lu deletes
Couldn't cons up a message for note %@
Asking store to append messages %@
Failed to append these messages %@
Deleting messages %@
NoteStore %@ had notes needing bodies %@
Failed to save after getting note metadata: %@
Should not be asked to get the body of bookkeeping note %@.  Ignoring it
Bailing early, as someone wants us to shut down
Failed to save after getting %d note bodies: %@
Going to get message data for message %@
Pulled Notes headers %@
Got htmlContent %@
Note with properties %@ disappeared before I got its content
Couldn't get the MFWebMessageDocument from message body
messageBody htmlcontent is %ld characters
Threw an exception in daemon account while syncing folder with id %@.  Exception %@
Note %@ added to DAAccount %p
IMAP Daemon account %@ had an invocation finish. self.outstandingInvocationCount is decremented to %d
IMAP Daemon account %@ invoking fullyShutdownCallback
IMAP Daemon account should shut down now, _outstandingInvocationCount is %d
IMAP Daemon account %@ invoking shutdown callback
IMAP Daemon account %@ saving shutdown callback
Unknown change type %@ from change object %@
Looking at a change to note with integer id %@, but that note doesn't exist in the notes db.  Ignoring this change
Skipping add of marked-deleted note %@
IMAPNotesAgent deallocing - Tearing down PCConnectionManager and stopping ImapNotes agent
Want the following mailbox uids registered for push: %@
unregistering notification for push: %@
registering notification for push: %@
Got Folder List from my account, going to sync my folders
Got an auth error (%d) for IMAPNotes. Attempting to renew credentials.
Failed to renew credentials for IMAPNotes. Result = %d
Renew error domain = %{public}@, code = %d, error = %@
Successfully renewed credentials for IMAPNotes.
Yikes: %s %ld %@
IMAP Notes account refreshing folder list
Account "%@" (%{public}@) thinks it should fail all tasks.  Doing so
Account doesn't have any notes folders, grabbing them.
Asked to sync folder with id %@, but I only know of these folders %@
IMAP agent %@ finished sync, decremented _outstandingInvocationCount to %d
Finished syncing folder %@
Asked to sync folder with id %@, but I have no matching container
Asked to sync, but there are no local or remote changes.  Ignoring that request
Threw an exception while syncing notes folder with id %@.  Exception %@
IMAP agent %@ starting sync, incremented _outstandingInvocationCount to %d
DAIMAPNotesAgent: locks granted for dataclasses %lx
lock for %@ aborted
%s: asked to sync folder request %@, but that has no server id.  Dropping this sync on the floor
Appending a sync request for folder %@
Couldn't find folder corresponding to notification name "%@". Going to sync all folders
_lastFolderSetRegisteredForPush %@ _daFoldersByPushNotificationName %@
%s invoked: mgr %@, event %d
Told to poll, but we're in manual PC mode.
%s syncing all folders, and scheduling another poll action, PC reason was %d
%s not syncing, as I'm in on-power mode, behaving like manual mode
%s pcManager callback out to lunch, reason is: %d
IMAP Agent %@ seeing if it should shut down.  Account has shut down = %d, outstanding invocation count = %d
IMAP Agent %@ invoking fully shutdown callback
The IMAPNotes agent was told to stop monitoring.
IMAP agent %@, IMAP Daemon account has completed shutdown. The accountHasShutDown is set to YES.
Received push notification for name %@
The following message doesn't have a mime body: %@
I don't know how to archive this attachment.  It will be lost on modify.  Attachment %@, manager %@
Couldn't persist data for attachment: %@
Couldn't get attachment data from url %@. %@
Here's the attachment: %@
Note is too big at %lu bytes.
Asked to create an outgoing message from a bookkeeping entry.  Who's the joker trying to introduce data loss? Note %@
Couldn't find a url on store %@
Couldn't get a MailboxUID from account %@ with url %@
%@ creating noteContext on thread %p
IMAPNotesLibrary
DAIMAPNotesFolderListConsumerQueueWrapper
DAIMAPNotesDaemonAccount
DADataclassLockWatcher
NSObject
DAIMAPNotesAgent
DAIMAPNotesFolderListConsumer
DANotesUpdateConsumer
PCConnectionManagerDelegate
DAIMAPNotesFolder
IMAPNotesOutgoingMessage
DAIMAPNotesUtils
MFLogClass
DAIMAPNotesFolderSyncRequest
@32@0:8I16I20@24
I24@0:8@16
@24@0:8@16
@40@0:8{_NSRange=QQ}16@32
@56@0:8Q16Q24Q32^{_NSRange=QQ}40@48
v24@0:8@16
v28@0:8@16B24
@92@0:8@16@24B32@36@44Q52Q60@68B76B80@84
@32@0:8@16@24
B24@0:8@16
v32@0:8Q16@24
v40@0:8@16@24@32
@36@0:8@16I24@28
v52@0:8@16@24I32{_NSRange=QQ}36
@28@0:8@16i24
@40@0:8@16{_NSRange=QQ}24
v32@0:8@16Q24
@16@0:8
v16@0:8
@"IMAPAccount"
@"DAIMAPNotesDaemonAccount"
@"NoteContext"
@"<DAIMAPNotesFolderListConsumer>"
@"NSObject<OS_dispatch_queue>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@28@0:8@16B24
v20@0:8B16
v40@0:8@16q24@32
v32@0:8@16@24
v84@0:8@16@24@32@40@48@56B64B68B72@76
v24@0:8@?16
i16@0:8
v20@0:8i16
@?16@0:8
@"MFAttachmentLibraryManager"
@"NSMutableDictionary"
@"NSMutableArray"
v32@0:8q16@24
v32@0:8q16@"NSError"24
v92@0:8@16@24@32@40@48@56@64@72B80B84B88
v92@0:8@"NSString"16@"NoteContext"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSSet"64@"NSSet"72B80B84B88
v40@0:8@"NSString"16q24@"NSError"32
v28@0:8@16i24
v36@0:8@16i24@28
v28@0:8@"PCConnectionManager"16i24
v36@0:8@"PCConnectionManager"16i24@"NSDictionary"28
@40@0:8@16@24@32
v24@0:8B16B20
v36@0:8@16q24B32
B32@0:8@16@24
@"NSMutableSet"
@"NSLock"
@"PCConnectionManager"
@"NSSet"
@"MFMailboxUid"
@56@0:8@16@24@32@40@48
v28@0:8r*16i24
v40@0:8@"MFConnection"16q24@"NSData"32
