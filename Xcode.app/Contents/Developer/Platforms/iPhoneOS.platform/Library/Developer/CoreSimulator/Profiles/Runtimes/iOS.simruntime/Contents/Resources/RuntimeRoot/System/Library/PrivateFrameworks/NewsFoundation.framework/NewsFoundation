@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
v8@?0
apple-internal-install
StoreDemoMode
com.apple.demo-settings
{%p event=%@, fromState=%@, toState=%@, context=%@}
v24@?0@?<v@?@>8@?<v@?@"NSError">16
-[NFEventManager fireEvent:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/NFEventManager.m
You cannot fire a nil event
-[NFEventManager triggerOnceWhenAllEventsHaveOccurred:block:]
There is no point of creating a trigger without a block or events
-[NFEventManager triggerAlwaysWhenAllEventsHaveOccurred:block:]
-[NFEventManager triggerOnceWhenAnyEventHasOccurred:block:]
-[NFEventManager triggerOnEvent:block:]
There is no point of creating a trigger without a block or event
-[NFEventManager triggerOnAnyEvent:block:]
createPKZip
extractPKZip
com.apple.news.state.machine
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
@8@?0
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
event
@"NFPromise"8@?0
@16@?0@8
v16@?0@"NSError"8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
NFPromiseError
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
v16@?0@8
@"NFPromise"16@?0@?<@@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<@@?@>16
@"NFPromise"16@?0@8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@16
@"NFPromise"16@?0@?<v@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@>16
@"NFPromise"16@?0@?<v@?@@?<v@?@>@?<v@?@"NSError">>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@@?<v@?@>@?<v@?@"NSError">>16
@"NFPromise"16@?0d8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8d16
%02x
-[NFPromiseSeal dealloc]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
kNFReachabilityChangedNotification
NFReachability.observation
v16@?0@"NSObject<OS_nw_path>"8
{%p name=%@, from=%@, to=%@}
{%p name=%@}
{CGRect={CGPoint=dd}{CGSize=dd}}
hw.machine
DeviceName
iPhone
iPad
iPod
Apple Watch
Watch
NSString *NFGeneralDeviceString()
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparcore/Classes/NFDevice.m
Encountered an unknown device model: %@
ProductVersion
ProductType
Aixt/MEN2O2B7f+8m4TxUA
*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@
NFUnfairLock
NFLocking
NSLocking
NFStateMachineTransition
NFPendingPromise
NFEventManager
NFEventTrigger
NFArchiver
NSObject
NFStateMachine
NFAdditions
NFLazy
FRAdditions
NFPromise
Firstly
NFVoid
NSCopying
Void
Delay
NFPromiseSeal
NFReachability
NFMutexLock
NFStateMachineEvent
NFStateMachineState
Private
NFMultiDelegate
T@?,R,N,V_block
T#,R
_reject
T@"NFMutexLock",&,N,V_lock
_status
T@"NFPromiseSeal",&,N,V_seal
always:
T@"NFStateMachineEvent",&,N,V_event
attemptTriggersForCurrentEvent:
T@"NFStateMachineState",&,N,V_fromState
context
T@"NFStateMachineState",&,N,V_toState
delayOn
T@"NFUnfairLock",R,N,V_lock
initWithFormat:
T@"NSHashTable",R,N,V_children
T@"NSMutableDictionary",&,N,V_events
nf_sha1
T@"NSMutableDictionary",R,N,V_triggers
promise
T@"NSObject<OS_dispatch_queue>",&,N,V_observationQueue
release
T@"NSObject<OS_nw_path_monitor>",&,N,V_networkPathMonitor
resolve
T@"NSSet",R,C,N,V_events
setStatusToken:
T@"NSString",R,C
.cxx_destruct
_events
T@"<NFStateMachineContextType>",&,N,V_context
_states
T@"NFPromise",&,N,V_promise
_willEnterBlock
T@"NFStateMachine",&,N,V_stateMachine
asVoid:
T@"NFStateMachineState",&,N,V_destinationState
containsObject:
T@"NFStateMachineState",&,N,V_state
dealloc
T@"NFUnfairLock",R,C,N,V_lock
errorOn
T@"NSError",&,N,V_error
isProxy
T@"NSMutableArray",&,N,V_handlers
T@"NSMutableDictionary",&,N,V_states
onFire:
T@"NSMutableSet",R,N,V_events
reject:
T@"NSObject<OS_nw_path>",&,N,V_currentNetworkPath
removeDelegate:
T@"NSSet",&,N,V_states
setCanTryBlock:
T@"NSString",C,N,V_name
toState
T@"NSString",R,C,N,V_key
T@"Protocol",R,N,V_delegateProtocol
T@,&,N,V_value
T@,R,N
T@,R,N,V_value
T@,W,N,V_owner
T@?,C,N,V_canTryBlock
T@?,C,N,V_didEnterBlock
T@?,C,N,V_didExitBlock
T@?,C,N,V_fireBlock
T@?,C,N,V_reject
T@?,C,N,V_resolve
T@?,C,N,V_willEnterBlock
T@?,C,N,V_willExitBlock
T@?,R
T@?,R,C,N,V_constructor
TB,R,N,V_fireOnAny
TB,R,N,V_fireOnce
TQ,N,V_state
TQ,N,V_status
TQ,R
Tq,N,V_statusToken
Tq,V_currentReachabilityStatus
UUID
UUIDString
_block
_canTryBlock
_children
_constructor
_context
_currentNetworkPath
_currentReachabilityStatus
_delegateProtocol
_destinationState
_didEnterBlock
_didExitBlock
_error
_event
_fireBlock
_fireOnAny
_fireOnce
_fromState
_handlers
_key
_lock
_name
_networkPathMonitor
_observationQueue
_owner
_promise
_resolve
_seal
_state
_stateMachine
_statusFromNetworkPath:
_statusToken
_toState
_triggers
_unfairLock
_unfairLockOptions
_updateCurrentNetworkPath:
_value
_willExitBlock
activate
activateIfNeeded
addDelegate:
addEvent:
addObject:
addState:
allValues
alwaysOn:always:
appendFormat:
appendString:
archiveDirectory:toLocation:
array
asDelay:onQueue:withError:
asDelay:onQueue:withValue:
asDelay:withError:
asDelay:withValue:
asVoid
autorelease
block
bytes
canTry:withOwner:
canTryBlock
characterAtIndex:
children
class
code
compare:
conformsToProtocol:
constructor
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentNetworkPath
currentReachabilityStatus
dataUsingEncoding:
dataWithContentsOfFile:
deactivate
deactivateIfNeeded
debugDescription
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
defaultCenter
defaultManager
delay
delegate
delegateProtocol
description
destinationState
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didEnter:withOwner:
didEnterBlock
didExit:withOwner:
didExitBlock
domain
error
error:
errorOn:error:
errorWithDomain:code:userInfo:
event
events
exceptionWithName:reason:userInfo:
fc_createStateMachineErrorForCode:userInfo:
fc_isStateMachineError:
fileSystemRepresentation
fireBlock
fireEvent:
fireEventWithName:withContext:
fireOnAny
fireOnce
fired:withOwner:
firstly:
forwardInvocation:
fromState
getValue:
handleAlwaysTrigger:event:
handleOnceTrigger:event:
handlers
hasPrefix:
hash
hashTableWithOptions:
init
initForReadingFromData:error:
initWithConstructor:
initWithDelegate:delegateProtocol:
initWithDomain:code:userInfo:
initWithError:
initWithKey:fireOnce:fireOnAny:events:block:
initWithName:
initWithName:transitionFromStates:toState:
initWithOptions:
initWithResolver:
initWithState:withOwner:
initWithStateMachine:event:fromState:toState:context:
initWithUTF8String:
initWithValue:
invokeWithTarget:
isEqual:
isEqualToString:
isKindOfClass:
isMainThread
isMemberOfClass:
length
lock
methodSignatureForSelector:
name
networkPathMonitor
nf_CGRectValue
nf_compareObject:toObject:
nf_migrateObjectForKey:toKey:
nf_object:isEqualToObject:
nf_securelyUnarchiveObjectOfClass:
nf_securelyUnarchiveObjectOfClass:withData:
nf_securelyUnarchiveObjectOfClass:withFile:
nf_securelyUnarchiveObjectOfClasses:withData:
nf_securelyUnarchiveObjectOfClasses:withFile:
nf_stringByReversingString
nf_valueWithCGRect:
numberWithInteger:
numberWithUnsignedInteger:
objCType
objectForKey:
observationQueue
onCanTry:
onDidEnter:
onDidExit:
onWillEnter:
onWillExit:
owner
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performWithLockSync:
pipe
pipeOn
postNotificationName:object:
registerHandler:
reject
removeAllObjects
removeObject:
removeObjectForKey:
replaceDelegate:withDelegate:
reset
resolve:
resolveOn
resolveOn:reject:resolve:
respondsToSelector:
retain
retainCount
seal
seal:error:resolution:
selector
self
setContext:
setCurrentNetworkPath:
setCurrentReachabilityStatus:
setDestinationState:
setDidEnterBlock:
setDidExitBlock:
setError:
setEvent:
setEvents:
setFireBlock:
setFromState:
setHandlers:
setLock:
setName:
setNetworkPathMonitor:
setObject:forKey:
setObservationQueue:
setOwner:
setPromise:
setReject:
setResolve:
setSeal:
setState:
setStateMachine:
setStates:
setStatus:
setToState:
setValue:
setWillEnterBlock:
setWillExitBlock:
setWithObject:
sharedInstance
state
stateMachine
states
status
statusToken
stringWithCapacity:
stringWithFileSystemRepresentation:length:
stringWithFormat:
superclass
then
then:
thenOn
thenOn:then:
triggerAlwaysWhenAllEventsHaveOccurred:block:
triggerOnAnyEvent:block:
triggerOnEvent:block:
triggerOnceWhenAllEventsHaveOccurred:block:
triggerOnceWhenAnyEventHasOccurred:block:
triggers
unarchive:toLocation:
unlock
value
valueWithBytes:objCType:
willEnter:withOwner:
willEnterBlock
willExit:withOwner:
willExitBlock
zone
v16@0:8
@24@0:8q16
@16@0:8
v24@0:8@?16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24@32@40@48
v24@0:8@16
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
@?16@0:8
@"NFPromise"
v32@0:8@16@?24
v32@0:8@16@24
@"NSMutableSet"
@"NSMutableDictionary"
@48@0:8@16B24B28@32@?40
B16@0:8
@"NSString"
@"NSSet"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSURL"16@"NSURL"24
B24@0:8q16
@32@0:8q16@24
@32@0:8@16@24
v24@0:8Q16
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8@?16
@"NFUnfairLock"
@24@0:8#16
@32@0:8#16@24
@24@0:8@16
@32@0:8@16@?24
@"NFPromiseSeal"
@24@0:8^{_NSZone=}16
@32@0:8d16@24
@40@0:8d16@24@32
q32@0:8@16@24
v40@0:8@16@?24@?32
v40@0:8@16@24Q32
@"NSError"
@"NSMutableArray"
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_nw_path_monitor>"
@"NSObject<OS_nw_path>"
@24@0:8Q16
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@40@0:8@16@24@32
@"NSHashTable"
@"Protocol"
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
v8@?0
apple-internal-install
StoreDemoMode
com.apple.demo-settings
{%p event=%@, fromState=%@, toState=%@, context=%@}
v24@?0@?<v@?@>8@?<v@?@"NSError">16
-[NFEventManager fireEvent:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/NFEventManager.m
You cannot fire a nil event
-[NFEventManager triggerOnceWhenAllEventsHaveOccurred:block:]
There is no point of creating a trigger without a block or events
-[NFEventManager triggerAlwaysWhenAllEventsHaveOccurred:block:]
-[NFEventManager triggerOnceWhenAnyEventHasOccurred:block:]
-[NFEventManager triggerOnEvent:block:]
There is no point of creating a trigger without a block or event
-[NFEventManager triggerOnAnyEvent:block:]
createPKZip
extractPKZip
com.apple.news.state.machine
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
@8@?0
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
event
@"NFPromise"8@?0
@16@?0@8
v16@?0@"NSError"8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke_5
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
NFPromiseError
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
v16@?0@8
@"NFPromise"16@?0@?<@@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<@@?@>16
@"NFPromise"16@?0@8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@16
@"NFPromise"16@?0@?<v@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@>16
@"NFPromise"16@?0@?<v@?@@?<v@?@>@?<v@?@"NSError">>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@@?<v@?@>@?<v@?@"NSError">>16
@"NFPromise"16@?0d8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8d16
%02x
-[NFPromiseSeal dealloc]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
kNFReachabilityChangedNotification
NFReachability.observation
v16@?0@"NSObject<OS_nw_path>"8
{%p name=%@, from=%@, to=%@}
{%p name=%@}
{CGRect={CGPoint=dd}{CGSize=dd}}
hw.machine
DeviceName
iPhone
iPad
iPod
Apple Watch
Watch
NSString *NFGeneralDeviceString()
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparcore/Classes/NFDevice.m
Encountered an unknown device model: %@
ProductVersion
ProductType
Aixt/MEN2O2B7f+8m4TxUA
*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@
NFUnfairLock
NFLocking
NSLocking
NFStateMachineTransition
NFPendingPromise
NFEventManager
NFEventTrigger
NFArchiver
NSObject
NFStateMachine
NFAdditions
NFLazy
FRAdditions
NFPromise
Firstly
NFVoid
NSCopying
Void
Delay
NFPromiseSeal
NFReachability
NFMutexLock
NFStateMachineEvent
NFStateMachineState
Private
NFMultiDelegate
T@?,R,N,V_block
T#,R
_reject
T@"NFMutexLock",&,N,V_lock
_status
T@"NFPromiseSeal",&,N,V_seal
always:
T@"NFStateMachineEvent",&,N,V_event
attemptTriggersForCurrentEvent:
T@"NFStateMachineState",&,N,V_fromState
context
T@"NFStateMachineState",&,N,V_toState
delayOn
T@"NFUnfairLock",R,N,V_lock
initWithFormat:
T@"NSHashTable",R,N,V_children
T@"NSMutableDictionary",&,N,V_events
nf_sha1
T@"NSMutableDictionary",R,N,V_triggers
promise
T@"NSObject<OS_dispatch_queue>",&,N,V_observationQueue
release
T@"NSObject<OS_nw_path_monitor>",&,N,V_networkPathMonitor
resolve
T@"NSSet",R,C,N,V_events
setStatusToken:
T@"NSString",R,C
.cxx_destruct
_events
T@"<NFStateMachineContextType>",&,N,V_context
_states
T@"NFPromise",&,N,V_promise
_willEnterBlock
T@"NFStateMachine",&,N,V_stateMachine
asVoid:
T@"NFStateMachineState",&,N,V_destinationState
containsObject:
T@"NFStateMachineState",&,N,V_state
dealloc
T@"NFUnfairLock",R,C,N,V_lock
errorOn
T@"NSError",&,N,V_error
isProxy
T@"NSMutableArray",&,N,V_handlers
T@"NSMutableDictionary",&,N,V_states
onFire:
T@"NSMutableSet",R,N,V_events
reject:
T@"NSObject<OS_nw_path>",&,N,V_currentNetworkPath
removeDelegate:
T@"NSSet",&,N,V_states
setCanTryBlock:
T@"NSString",C,N,V_name
toState
T@"NSString",R,C,N,V_key
T@"Protocol",R,N,V_delegateProtocol
T@,&,N,V_value
T@,R,N
T@,R,N,V_value
T@,W,N,V_owner
T@?,C,N,V_canTryBlock
T@?,C,N,V_didEnterBlock
T@?,C,N,V_didExitBlock
T@?,C,N,V_fireBlock
T@?,C,N,V_reject
T@?,C,N,V_resolve
T@?,C,N,V_willEnterBlock
T@?,C,N,V_willExitBlock
T@?,R
T@?,R,C,N,V_constructor
TB,R,N,V_fireOnAny
TB,R,N,V_fireOnce
TQ,N,V_state
TQ,N,V_status
TQ,R
Tq,N,V_statusToken
Tq,V_currentReachabilityStatus
UUID
UUIDString
_block
_canTryBlock
_children
_constructor
_context
_currentNetworkPath
_currentReachabilityStatus
_delegateProtocol
_destinationState
_didEnterBlock
_didExitBlock
_error
_event
_fireBlock
_fireOnAny
_fireOnce
_fromState
_handlers
_key
_lock
_name
_networkPathMonitor
_observationQueue
_owner
_promise
_resolve
_seal
_state
_stateMachine
_statusFromNetworkPath:
_statusToken
_toState
_triggers
_unfairLock
_unfairLockOptions
_updateCurrentNetworkPath:
_value
_willExitBlock
activate
activateIfNeeded
addDelegate:
addEvent:
addObject:
addState:
allValues
alwaysOn:always:
appendFormat:
appendString:
archiveDirectory:toLocation:
array
asDelay:onQueue:withError:
asDelay:onQueue:withValue:
asDelay:withError:
asDelay:withValue:
asVoid
autorelease
block
bytes
canTry:withOwner:
canTryBlock
characterAtIndex:
children
class
code
compare:
conformsToProtocol:
constructor
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentNetworkPath
currentReachabilityStatus
dataUsingEncoding:
dataWithContentsOfFile:
deactivate
deactivateIfNeeded
debugDescription
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
defaultCenter
defaultManager
delay
delegate
delegateProtocol
description
destinationState
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didEnter:withOwner:
didEnterBlock
didExit:withOwner:
didExitBlock
domain
error
error:
errorOn:error:
errorWithDomain:code:userInfo:
event
events
exceptionWithName:reason:userInfo:
fc_createStateMachineErrorForCode:userInfo:
fc_isStateMachineError:
fileSystemRepresentation
fireBlock
fireEvent:
fireEventWithName:withContext:
fireOnAny
fireOnce
fired:withOwner:
firstly:
forwardInvocation:
fromState
getValue:
handleAlwaysTrigger:event:
handleOnceTrigger:event:
handlers
hasPrefix:
hash
hashTableWithOptions:
init
initForReadingFromData:error:
initWithConstructor:
initWithDelegate:delegateProtocol:
initWithDomain:code:userInfo:
initWithError:
initWithKey:fireOnce:fireOnAny:events:block:
initWithName:
initWithName:transitionFromStates:toState:
initWithOptions:
initWithResolver:
initWithState:withOwner:
initWithStateMachine:event:fromState:toState:context:
initWithUTF8String:
initWithValue:
invokeWithTarget:
isEqual:
isEqualToString:
isKindOfClass:
isMainThread
isMemberOfClass:
length
lock
methodSignatureForSelector:
name
networkPathMonitor
nf_CGRectValue
nf_compareObject:toObject:
nf_migrateObjectForKey:toKey:
nf_object:isEqualToObject:
nf_securelyUnarchiveObjectOfClass:
nf_securelyUnarchiveObjectOfClass:withData:
nf_securelyUnarchiveObjectOfClass:withFile:
nf_securelyUnarchiveObjectOfClasses:withData:
nf_securelyUnarchiveObjectOfClasses:withFile:
nf_stringByReversingString
nf_valueWithCGRect:
numberWithInteger:
numberWithUnsignedInteger:
objCType
objectForKey:
observationQueue
onCanTry:
onDidEnter:
onDidExit:
onWillEnter:
onWillExit:
owner
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performWithLockSync:
pipe
pipeOn
postNotificationName:object:
registerHandler:
reject
removeAllObjects
removeObject:
removeObjectForKey:
replaceDelegate:withDelegate:
reset
resolve:
resolveOn
resolveOn:reject:resolve:
respondsToSelector:
retain
retainCount
seal
seal:error:resolution:
selector
self
setContext:
setCurrentNetworkPath:
setCurrentReachabilityStatus:
setDestinationState:
setDidEnterBlock:
setDidExitBlock:
setError:
setEvent:
setEvents:
setFireBlock:
setFromState:
setHandlers:
setLock:
setName:
setNetworkPathMonitor:
setObject:forKey:
setObservationQueue:
setOwner:
setPromise:
setReject:
setResolve:
setSeal:
setState:
setStateMachine:
setStates:
setStatus:
setToState:
setValue:
setWillEnterBlock:
setWillExitBlock:
setWithObject:
sharedInstance
state
stateMachine
states
status
statusToken
stringWithCapacity:
stringWithFileSystemRepresentation:length:
stringWithFormat:
superclass
then
then:
thenOn
thenOn:then:
triggerAlwaysWhenAllEventsHaveOccurred:block:
triggerOnAnyEvent:block:
triggerOnEvent:block:
triggerOnceWhenAllEventsHaveOccurred:block:
triggerOnceWhenAnyEventHasOccurred:block:
triggers
unarchive:toLocation:
unlock
value
valueWithBytes:objCType:
willEnter:withOwner:
willEnterBlock
willExit:withOwner:
willExitBlock
zone
v16@0:8
@24@0:8q16
@16@0:8
v24@0:8@?16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24@32@40@48
v24@0:8@16
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
@?16@0:8
@"NFPromise"
v32@0:8@16@?24
v32@0:8@16@24
@"NSMutableSet"
@"NSMutableDictionary"
@48@0:8@16B24B28@32@?40
B16@0:8
@"NSString"
@"NSSet"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSURL"16@"NSURL"24
B24@0:8q16
@32@0:8q16@24
@32@0:8@16@24
v24@0:8Q16
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8@?16
@"NFUnfairLock"
@24@0:8#16
@32@0:8#16@24
@24@0:8@16
@32@0:8@16@?24
@"NFPromiseSeal"
@24@0:8^{_NSZone=}16
@32@0:8d16@24
@40@0:8d16@24@32
q32@0:8@16@24
v40@0:8@16@?24@?32
v40@0:8@16@24Q32
@"NSError"
@"NSMutableArray"
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_nw_path_monitor>"
@"NSObject<OS_nw_path>"
@24@0:8Q16
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@40@0:8@16@24@32
@"NSHashTable"
@"Protocol"
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
