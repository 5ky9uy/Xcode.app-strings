callbackBlock
T@?,R,N,V_callbackBlock
privateContainer
T@"<NFDefinitionContainer>",R,N,V_privateContainer
v8@?0
apple-internal-install
StoreDemoMode
com.apple.demo-settings
NFWaiterErrorDomain
v16@?0@8
v24@?0@?<v@?@>8@?<v@?@"NSError">16
@8@?0
v56@?0@?<v@?@@?<@@?>dd@?<v@?@>@?<v@?>>8@?<@@?>16d24d32@?<v@?@>40@?<v@?>48
v56@?0@?<v@?@@?<B@?>dd@?<v@?>@?<v@?>>8@?<B@?>16d24d32@?<v@?>40@?<v@?>48
interval
Td,R,N,V_interval
timeout
Td,R,N,V_timeout
@"NSString"16@?0Q8
None
Graph
Singleton
<%@ %p: class=%@, scope=%@, pac=%@>
<%@ %p: protocol=%@, scope=%@, pac=%@>
<%@ %p: unsafe scope=%@, pac=%@>
-[NFDefinition withPrivateAccessInContainer:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2371.3/feldsparfoundation/FeldsparFoundation/Container/NFDefinition.m
Definitions can only have access to a single private resolver. Unexpected results from overriding
-[NFDefinition withPrivateAccessInWeakContainer:]
source
TQ,N,V_source
T#,&,N,V_cls
protocol
T@"Protocol",&,N,V_protocol
factory
T@?,C,N,V_factory
scope
TQ,N,V_scope
canBeOverridden
TB,N,V_canBeOverridden
canBeNil
TB,N,V_canBeNil
validationBlock
T@?,C,N,V_validationBlock
configurationBlock
T@?,C,N,V_configurationBlock
NFContainerMissingDefinitionException
Missing definition. Be sure to check protocol vs. class name registration and resolving, key=%@
NFContainerDefinitionNotOverridable
Definition not overridable, key=%@
NFContainerDefinitionNilFactoryException
Definition does not allow nil, key=%@
NFContainerEnsuringNullableDefinitionException
Can not ensure a definition that allows nil, key=%@
NFContainerDefinitionMismatchException
Definition mismatch, key=%@
NFContainerCircularDependencyDetectedException
Circular dependency detected in container
NFContainerContextMismatchException
Context mismatch, key=%@
unfairLock
T{os_unfair_lock_s=I},N,V_unfairLock
unfairLockOptions
TI,N,V_unfairLockOptions
{%p event=%@, fromState=%@, toState=%@, context=%@}
stateMachine
T@"NFStateMachine",&,N,V_stateMachine
fromState
T@"NFStateMachineState",&,N,V_fromState
toState
T@"NFStateMachineState",&,N,V_toState
event
T@"NFStateMachineEvent",&,N,V_event
context
T@"<NFStateMachineContextType>",&,N,V_context
Unavailable
Must create container with initWithAssemblies:
ProxyContext
<%@, definitions=%@>
@"NFDefinition"8@?0
v32@?0@"NFKey"8@"NFDefinition"16^B24
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
definitions
T@"NSMutableDictionary",&,N,V_definitions
pool
T@"NFContainerPool",&,N,V_pool
callbackStore
T@"NFCallbackStore",&,N,V_callbackStore
privateContainers
T@"NSMutableDictionary",&,N,V_privateContainers
proxyResolver
T@"NFProxyResolver",R,N
resolver
T@"<NFResolver>",R,N
container
T@"NFContainer",&,N,V_container
T@"NFContainer",&,N,V_privateContainer
promise
T@"NFPromise",&,N,V_promise
resolve
T@?,C,N,V_resolve
reject
T@?,C,N,V_reject
T@"NFCallbackStore",R,N,V_callbackStore
-[NFEventManager fireEvent:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2371.3/feldsparfoundation/FeldsparFoundation/NFEventManager.m
You cannot fire a nil event
-[NFEventManager triggerOnceWhenAllEventsHaveOccurred:block:]
There is no point of creating a trigger without a block or events
-[NFEventManager triggerAlwaysWhenAllEventsHaveOccurred:block:]
-[NFEventManager triggerOnceWhenAnyEventHasOccurred:block:]
-[NFEventManager triggerOnEvent:block:]
There is no point of creating a trigger without a block or event
-[NFEventManager triggerOnAnyEvent:block:]
events
T@"NSMutableSet",R,N,V_events
triggers
T@"NSMutableDictionary",R,N,V_triggers
T@"NSString",R,C,N,V_key
T@"NSSet",R,C,N,V_events
block
T@?,R,N,V_block
fireOnce
TB,R,N,V_fireOnce
fireOnAny
TB,R,N,V_fireOnAny
com.apple.news.state.machine
T@"<NFResolver>",R,N,V_resolver
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2371.3/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
@"NFPromise"8@?0
@16@?0@8
v16@?0@"NSError"8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
owner
T@,W,N,V_owner
states
T@"NSMutableDictionary",&,N,V_states
T@"NSMutableDictionary",&,N,V_events
state
T@"NFStateMachineState",&,N,V_state
TQ,N,V_status
lock
T@"NFMutexLock",&,N,V_lock
Tq,N,V_statusToken
v16@?0@"NFContainerPool"8
B16@?0@8
@24@?0^{NSMutableDictionary=#}8^{NSMutableDictionary=#}16
publicContainer
T@"<NFDefinitionContainer>",&,N,V_publicContainer
T@"<NFDefinitionContainer>",&,N,V_privateContainer
T@"NFContext",&,N,V_context
constructor
T@?,R,C,N,V_constructor
T@"NFUnfairLock",R,C,N,V_lock
value
T@,R,N,V_value
<%@ address=%ld, name=%@, type=%@>
address
TQ,R,N,V_address
name
T@"NSString",R,N,V_name
type
T@,R,N,V_type
NFPromiseError
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2371.3/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
@"NFPromise"16@?0@?<@@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<@@?@>16
@"NFPromise"16@?0@8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@16
@"NFPromise"16@?0@?<v@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@>16
@"NFPromise"16@?0@?<v@?@@?<v@?@>@?<v@?@"NSError">>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@@?<v@?@>@?<v@?@"NSError">>16
@"NFPromise"16@?0d8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8d16
seal
T@"NFPromiseSeal",&,N,V_seal
then
T@?,R
thenOn
pipe
pipeOn
error
errorOn
resolveOn
delay
delayOn
v32@?0@"NFKey"8@"NFContainerPoolObject"16^B24
singletons
T@"NSMutableDictionary",&,N,V_singletons
graph
T@"NSMutableDictionary",&,N,V_graph
depth
TQ,N,V_depth
drainDepth
TQ,N,V_drainDepth
objectGraphDrainingEnabled
TB,N,GisObjectGraphDrainingEnabled,V_objectGraphDrainingEnabled
onDrainBlocks
T@"NSMutableArray",&,N,V_onDrainBlocks
onDrainCopyPoolObjectGraphBlocks
T@"NSMutableArray",&,N,V_onDrainCopyPoolObjectGraphBlocks
poolPreparedForLockingGraph
TB,R,N,GisPoolPreparedForLockingGraph
%02x
T@"<NFRegistrationContainer>",R,N
callback
T@"<NFCallbackRegistration>",R,N
T@"<NFRegistrationContainer>",R,N,V_publicContainer
T@"<NFRegistrationContainer>",R,N,V_privateContainer
T@"<NFCallbackRegistration>",R,N,V_callback
-[NFPromiseSeal dealloc]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2371.3/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
T@,&,N,V_value
T@"NSError",&,N,V_error
TQ,N,V_state
handlers
T@"NSMutableArray",&,N,V_handlers
T@"NFUnfairLock",R,N,V_lock
v32@?0@"NFKey"8@16^B24
objects
T@"NSMutableDictionary",R,N,V_objects
kNFReachabilityChangedNotification
NFReachability.observation
v16@?0@"NSObject<OS_nw_path>"8
currentReachabilityStatus
Tq,V_currentReachabilityStatus
observationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_observationQueue
networkPathMonitor
T@"NSObject<OS_nw_path_monitor>",&,N,V_networkPathMonitor
currentNetworkPath
T@"NSObject<OS_nw_path>",&,N,V_currentNetworkPath
v24@?0@"NFKey"8@"NFCallbackDefinition"16
store
T@"NSMutableDictionary",R,N,V_store
{%p name=%@, from=%@, to=%@}
T@"NSString",C,N,V_name
T@"NSSet",&,N,V_states
destinationState
T@"NFStateMachineState",&,N,V_destinationState
fireBlock
T@?,C,N,V_fireBlock
{%p name=%@}
canTryBlock
T@?,C,N,V_canTryBlock
willExitBlock
T@?,C,N,V_willExitBlock
willEnterBlock
T@?,C,N,V_willEnterBlock
didExitBlock
T@?,C,N,V_didExitBlock
didEnterBlock
T@?,C,N,V_didEnterBlock
ownership
TQ,R,N,V_ownership
strongObject
T@,R,N,V_strongObject
weakObject
T@,R,W,N,V_weakObject
object
T@,R,N
children
T@"NSHashTable",R,N,V_children
delegateProtocol
T@"Protocol",R,N,V_delegateProtocol
delegate
reuseFactory
T@?,C,N,V_reuseFactory
inuseObjects
T@"NSMutableDictionary",C,N,V_inuseObjects
reuseableObjects
T@"NSMutableDictionary",C,N,V_reuseableObjects
hw.machine
DeviceName
iPhone
iPad
iPod
NSString *NFGeneralDeviceString()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2371.3/feldsparcore/Classes/NFDevice.m
Encounted an unknown device model
ProductVersion
ProductType
Aixt/MEN2O2B7f+8m4TxUA
NFRouterRouteToNonRoutable
Attempt to route to non-routable object, object=%@
TQ,R,N,V_scope
names
T@"NSArray",R,N,V_names
A@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@
NFCallbackDefinition
NFWaiter
NFDefinition
NFContainerException
NFContainerMissingDefinitionException
NFContainerDefinitionNotOverridableException
NFContainerDefinitionNilFactoryException
NFContainerEnsuringNullableDefinitionException
NFContainerDefinitionMismatchException
NFContainerCircularDependencyDetectedException
NFContainerContextMismatchException
NFUnfairLock
NFLocking
NSLocking
NFStateMachineTransition
NFContainer
NFDefinitionContainer
NSObject
NFRegistrationContainer
NFProxyContainer
NFPendingPromise
NFCallbackRegistration
NFEventManager
NFEventTrigger
NFStateMachine
NFRoutable
NFRouter
NFProxyResolver
NFResolver
NFValidationResolver
NFAdditions
NFLazy
NFKey
NSCopying
FRAdditions
NFPromise
Firstly
NFVoid
Void
Delay
NFContainerPool
NFContainerRegistry
NFPromiseSeal
NFContext
NFReachability
NFCallbackStore
NFMutexLock
NFStateMachineEvent
NFStateMachineState
Private
NFContainerPoolObject
NFMultiDelegate
NFObjectReuseManager
NFRouterException
NFRouterRouteToNonRoutable
NFCallbackScope
init
initWithCallbackBlock:privateContainer:
.cxx_destruct
callbackBlock
privateContainer
_callbackBlock
_privateContainer
initWithValue:
error
waitFor:waitInterval:timeoutInterval:completion:failure:
initWithResolver:
waitUntil:waitInterval:timeoutInterval:completion:failure:
waitWithInterval:timeout:valueProvider:
waitWithInterval:timeout:conditionProvider:
date
timeIntervalSince1970
errorWithDomain:code:userInfo:
waitWithInterval:timeout:valueProvider:condition:
waitWithTimeout:valueProvider:
waitWithTimeout:conditionProvider:
interval
timeout
_interval
_timeout
stringWithFormat:
initWithFormat:
initWithClass:factory:
initWithProtocol:factory:
initWithUnsafeFactory:
description
inScope:
withValidation:
withConfiguration:
canBeOverridden:
canBeNil:
privateAccessContainer
withPrivateAccessInContainer:
withPrivateAccessInWeakContainer:
source
setSource:
setCls:
protocol
setProtocol:
factory
setFactory:
scope
setScope:
canBeOverridden
setCanBeOverridden:
canBeNil
setCanBeNil:
validationBlock
setValidationBlock:
configurationBlock
setConfigurationBlock:
_privateAccessContainer
_privateAccessWeakContainer
_canBeOverridden
_canBeNil
_source
_cls
_protocol
_factory
_scope
_validationBlock
_configurationBlock
exceptionWithName:reason:userInfo:
exceptionWithDefinitionKey:
exception
exceptionWithContextKey:
initWithOptions:
lock
unlock
performWithLockSync:
unfairLock
setUnfairLock:
unfairLockOptions
setUnfairLockOptions:
_unfairLock
_unfairLockOptions
event
fromState
toState
context
initWithStateMachine:event:fromState:toState:context:
stateMachine
setStateMachine:
setEvent:
setFromState:
setToState:
setContext:
_stateMachine
_event
_fromState
_toState
_context
initWithFrameworkAssemblies:assemblies:
initWithBundleAssemblies:
initWithBundleAssemblies:assemblies:
countByEnumeratingWithState:objects:count:
assemblies
addObjectsFromArray:
initAsPrivateContainer
initWithContainer:privateContainer:
initWithCallbackStore:privateContainer:
initWithPublicContainer:privateContainer:callback:
loadInRegistry:
loadedContainer:
initWithPublicContainer:privateContainer:inPool:callbackStore:
addObject:
registerClass:name:factory:
initWithAddressOfType:name:
register:createDefinitionBlock:
registerProtocol:name:factory:
initWithTypeName:name:
registerKey:factory:
proxyResolver
objectForKey:
setObject:forKey:
createProxyResolverForPrivateContainer:
enumerateKeysAndObjectsUsingBlock:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
definitionForKey:
registerClass:factory:
registerProtocol:factory:
unsafeRegisterForKey:name:factory:
initWithAssemblies:
initWithFrameworkAssemblies:
resolver
validateDefinitionsWithProxyResolver:
definitions
setDefinitions:
pool
setPool:
callbackStore
setCallbackStore:
privateContainers
setPrivateContainers:
_definitions
_pool
_callbackStore
_privateContainers
container
setContainer:
setPrivateContainer:
_container
promise
setPromise:
resolve
setResolve:
reject
setReject:
_promise
_resolve
_reject
storeCallbackDefinition:forKey:scope:
whenResolvingClass:scope:callbackBlock:
whenResolvingProtocol:scope:callbackBlock:
whenResolvingKey:scope:callbackBlock:
whenUnsafeResolvingWithKey:scope:callbackBlock:
isMainThread
events
attemptTriggersForCurrentEvent:
count
UUID
UUIDString
initWithKey:fireOnce:fireOnAny:events:block:
triggers
setWithObject:
triggerOnAnyEvent:block:
allValues
fireOnce
handleOnceTrigger:event:
handleAlwaysTrigger:event:
fireOnAny
containsObject:
removeObjectForKey:
block
fireEvent:
triggerOnceWhenAllEventsHaveOccurred:block:
triggerAlwaysWhenAllEventsHaveOccurred:block:
triggerOnceWhenAnyEventHasOccurred:block:
triggerOnEvent:block:
_events
_triggers
_fireOnce
_fireOnAny
_key
_block
initWithDomain:code:userInfo:
domain
isEqualToString:
code
fc_isStateMachineError:
fc_createStateMachineErrorForCode:userInfo:
resolveProtocol:
exceptionWithObject:
resolveRoutable:
_resolver
name
dictionaryWithObject:forKey:
state
status
statusToken
states
setStatusToken:
setStatus:
activate
deactivate
owner
asVoid:
numberWithUnsignedInteger:
numberWithInteger:
dictionaryWithObjects:forKeys:count:
destinationState
canTry:withOwner:
willExit:withOwner:
willEnter:withOwner:
setState:
didExit:withOwner:
firstly:
didEnter:withOwner:
thenOn:then:
errorOn:error:
alwaysOn:always:
fired:withOwner:
initWithState:withOwner:
activateIfNeeded
deactivateIfNeeded
addState:
addEvent:
fireEventWithName:withContext:
setOwner:
setStates:
setEvents:
setLock:
_status
_state
_owner
_states
_lock
_statusToken
isPoolPreparedForLockingGraph
onDrainCopyPoolObjectGraph:
copyWithObjectGraphDrainingDisabled
linkDepth:
resolveClass:name:
contextWithContextBlock:
resolveForKey:context:validateBlock:
resolveProtocol:name:
mergeWithContext:
ensure:
resolveForKey:
lookupForKey:
onDrain:
object
initWithObject:ownership:
enter:
initWithCallbackStore:
currentObjectGraphResolver:
linkResolverWithLinkBlock:
resolveClass:
resolveClass:contextBlock:
resolveClass:name:contextBlock:
resolveProtocol:contextBlock:
resolveProtocol:name:contextBlock:
resolveForKey:context:
unsafeResolveForKey:name:
unsafeResolveForKey:name:context:
ensureClass:
ensureClass:name:
ensureProtocol:
ensureProtocol:name:
publicContainer
setPublicContainer:
_publicContainer
nf_migrateObjectForKey:toKey:
copy
constructor
initWithConstructor:
value
_value
_constructor
initWithAddress:type:name:
address
copyWithZone:
copyWithName:
type
_address
_name
_type
initForReadingFromData:error:
nf_securelyUnarchiveObjectOfClass:
dataWithContentsOfFile:
nf_securelyUnarchiveObjectOfClass:withData:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
nf_securelyUnarchiveObjectOfClasses:withData:
nf_securelyUnarchiveObjectOfClass:withFile:
nf_securelyUnarchiveObjectOfClasses:withFile:
seal
resolve:
reject:
alloc
initWithError:
setSeal:
dealloc
resolveOn:reject:resolve:
then:
asDelay:withValue:
asDelay:onQueue:withValue:
error:
always:
then
thenOn
pipe
pipeOn
errorOn
resolveOn
delay
delayOn
_seal
asVoid
asDelay:onQueue:withError:
asDelay:withError:
drain
drainDepth
setDrainDepth:
onDrainBlocks
setOnDrainBlocks:
onDrainCopyPoolObjectGraphBlocks
setOnDrainCopyPoolObjectGraphBlocks:
isObjectGraphDrainingEnabled
setGraph:
singletons
setSingletons:
graph
depth
setDepth:
setObjectGraphDrainingEnabled:
_objectGraphDrainingEnabled
_singletons
_graph
_depth
_drainDepth
_onDrainBlocks
_onDrainCopyPoolObjectGraphBlocks
compare:
nf_object:isEqualToObject:
nf_compareObject:toObject:
dataUsingEncoding:
bytes
length
stringWithCapacity:
appendFormat:
characterAtIndex:
appendString:
nf_sha1
nf_stringByReversingString
callback
_callback
handlers
removeAllObjects
seal:error:resolution:
registerHandler:
setValue:
setError:
setHandlers:
_error
_handlers
objects
useObject:forClass:
useObject:forClass:name:
useObject:forProtocol:
useObject:forProtocol:name:
useObject:forKey:
unsafeUseObject:forKey:name:
_objects
_updateCurrentNetworkPath:
currentNetworkPath
setCurrentNetworkPath:
_statusFromNetworkPath:
setCurrentReachabilityStatus:
defaultCenter
postNotificationName:object:
sharedInstance
currentReachabilityStatus
observationQueue
setObservationQueue:
networkPathMonitor
setNetworkPathMonitor:
_currentReachabilityStatus
_observationQueue
_networkPathMonitor
_currentNetworkPath
names
firstObject
store
_store
setFireBlock:
fireBlock
initWithName:transitionFromStates:toState:
onFire:
setName:
setDestinationState:
_destinationState
_fireBlock
setCanTryBlock:
setWillExitBlock:
setDidExitBlock:
setWillEnterBlock:
setDidEnterBlock:
initWithName:
onCanTry:
onWillExit:
onDidExit:
onWillEnter:
onDidEnter:
canTryBlock
willExitBlock
willEnterBlock
didExitBlock
didEnterBlock
_canTryBlock
_willExitBlock
_willEnterBlock
_didExitBlock
_didEnterBlock
ownership
strongObject
weakObject
_ownership
_strongObject
_weakObject
hashTableWithOptions:
children
removeObject:
removeDelegate:
addDelegate:
delegateProtocol
methodSignatureForSelector:
selector
invokeWithTarget:
initWithDelegate:delegateProtocol:
delegate
replaceDelegate:withDelegate:
forwardInvocation:
_children
_delegateProtocol
reuseableObjects
objectForKeyedSubscript:
reuseFactory
setObject:forKeyedSubscript:
inuseObjects
identifier
initWithObjectConstructor:
dequeueObjectForIdentifier:
prepareObjectForReuse:
purgeObjectForIdentifier:
isInUse:
inUseObjectForIdentifier:
setReuseFactory:
setInuseObjects:
setReuseableObjects:
_reuseFactory
_inuseObjects
_reuseableObjects
initWithUTF8String:
hasPrefix:
initWithScope:names:
_names
arrayWithObjects:count:
@32@0:8@?16@24
v16@0:8
@?16@0:8
@16@0:8
@"<NFDefinitionContainer>"
@40@0:8d16d24@?32
@48@0:8d16d24@?32@?40
@32@0:8d16@?24
v56@0:8@?16d24d32@?40@?48
d16@0:8
@32@0:8#16@?24
@32@0:8@16@?24
@24@0:8@?16
@24@0:8Q16
@20@0:8B16
@24@0:8@16
Q16@0:8
v24@0:8Q16
#16@0:8
v24@0:8#16
v24@0:8@16
v24@0:8@?16
B16@0:8
v20@0:8B16
@"Protocol"
@24@0:8q16
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
I16@0:8
v20@0:8I16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24@32@40@48
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NFDefinition"24@0:8@"NFKey"16
@40@0:8#16@24@?32
@40@0:8@16@24@?32
@"NFDefinition"32@0:8#16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8#16@"NSString"24@?<@@?@"<NFResolver>">32
@"NFDefinition"32@0:8@"Protocol"16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8@"Protocol"16@"NSString"24@?<@@?@"<NFResolver>">32
@"NFDefinition"32@0:8@"NFKey"16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8@"NSString"16@"NSString"24@?<@@?@"<NFResolver>">32
@32@0:8@16@24
@"NSMutableDictionary"
@"NFContainerPool"
@"NFCallbackStore"
@"NFContainer"
@"NFPromise"
v40@0:8#16@24@?32
v40@0:8@16@24@?32
v40@0:8#16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v40@0:8@"Protocol"16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v40@0:8@"NFKey"16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v40@0:8@"NSString"16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v32@0:8@16@?24
v32@0:8@16@24
@"NSMutableSet"
@48@0:8@16B24B28@32@?40
@"NSString"
@"NSSet"
B24@0:8q16
@32@0:8q16@24
@24@0:8@"Protocol"16
@"<NFResolver>"
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8#16
@32@0:8#16@24
@40@0:8@16@24@32
@"<NFResolver>"24@0:8Q16
v24@0:8@?<v@?@?<v@?>>16
@32@0:8#16@?<v@?@"<NFContext>">24
@32@0:8#16@"NSString"24
@40@0:8#16@"NSString"24@?<v@?@"<NFContext>">32
@32@0:8@"Protocol"16@?<v@?@"<NFContext>">24
@32@0:8@"Protocol"16@"NSString"24
@40@0:8@"Protocol"16@"NSString"24@?<v@?@"<NFContext>">32
@24@0:8@"NFKey"16
@32@0:8@"NFKey"16@"NFContext"24
@32@0:8@"NSString"16@"NSString"24
@40@0:8@"NSString"16@"NSString"24@"NFContext"32
v32@0:8#16@24
v32@0:8#16@"NSString"24
v24@0:8@"Protocol"16
v32@0:8@"Protocol"16@"NSString"24
@48@0:8@16@24@32@40
@"NFContext"
@"NFUnfairLock"
@24@0:8^{_NSZone=}16
@40@0:8Q16@24@32
@"NFPromiseSeal"
@32@0:8d16@24
@40@0:8d16@24@32
^{NSMutableDictionary=#}16@0:8
v24@0:8^{NSMutableDictionary=#}16
^{NSMutableDictionary=#}
@"NSMutableArray"
B32@0:8@16@24
q32@0:8@16@24
@"<NFRegistrationContainer>"16@0:8
@"<NFCallbackRegistration>"16@0:8
@"<NFRegistrationContainer>"
@"<NFCallbackRegistration>"
v40@0:8@16@?24@?32
v40@0:8@16@24Q32
@"NSError"
v32@0:8@16#24
v40@0:8@16#24@32
v40@0:8@16@24@32
v40@0:8@16#24@"NSString"32
v32@0:8@16@"Protocol"24
v40@0:8@16@"Protocol"24@"NSString"32
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_nw_path_monitor>"
@"NSObject<OS_nw_path>"
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@32@0:8@16Q24
@"NSHashTable"
@32@0:8Q16@24
@"NSArray"
