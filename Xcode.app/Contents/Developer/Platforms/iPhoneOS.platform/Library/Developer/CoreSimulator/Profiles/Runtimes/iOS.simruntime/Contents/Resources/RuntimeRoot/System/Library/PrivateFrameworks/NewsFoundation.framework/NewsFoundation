@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
v8@?0
apple-internal-install
StoreDemoMode
com.apple.demo-settings
NFWaiterErrorDomain
v16@?0@8
v24@?0@?<v@?@>8@?<v@?@"NSError">16
@8@?0
v56@?0@?<v@?@@?<@@?>dd@?<v@?@>@?<v@?>>8@?<@@?>16d24d32@?<v@?@>40@?<v@?>48
v56@?0@?<v@?@@?<B@?>dd@?<v@?>@?<v@?>>8@?<B@?>16d24d32@?<v@?>40@?<v@?>48
@"NSString"16@?0Q8
None
Graph
Singleton
ContainerSingleton
<%@ %p: class=%@, scope=%@, pac=%@>
<%@ %p: protocol=%@, scope=%@, pac=%@>
<%@ %p: unsafe scope=%@, pac=%@>
-[NFDefinition withPrivateAccessInContainer:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparfoundation/FeldsparFoundation/Container/NFDefinition.m
Definitions can only have access to a single private resolver. Unexpected results from overriding
-[NFDefinition withPrivateAccessInWeakContainer:]
NFContainerMissingDefinitionException
Missing definition. Be sure to check protocol vs. class name registration and resolving, key=%@
NFContainerDefinitionNotOverridable
Definition not overridable, key=%@
NFContainerDefinitionNilFactoryException
Definition does not allow nil, key=%@
NFContainerEnsuringNullableDefinitionException
Can not ensure a definition that allows nil, key=%@
NFContainerDefinitionMismatchException
Definition mismatch, key=%@
NFContainerCircularDependencyDetectedException
Circular dependency detected in container
NFContainerContextMismatchException
Context mismatch, key=%@
{%p event=%@, fromState=%@, toState=%@, context=%@}
Unavailable
Must create container with initWithBundleAssemblies:assemblies::
-[NFContainer initWithBundleAssemblies:assemblies:singletonPool:bridgedContainer:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparfoundation/FeldsparFoundation/Container/NFContainer.m
loadedContainer: is deprecated and should not be implemented
ProxyContext
<%@, definitions=%@>
@"NFDefinition"8@?0
v32@?0@"NFKey"8@"NFDefinition"16^B24
-[NFEventManager fireEvent:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparfoundation/FeldsparFoundation/NFEventManager.m
You cannot fire a nil event
-[NFEventManager triggerOnceWhenAllEventsHaveOccurred:block:]
There is no point of creating a trigger without a block or events
-[NFEventManager triggerAlwaysWhenAllEventsHaveOccurred:block:]
-[NFEventManager triggerOnceWhenAnyEventHasOccurred:block:]
-[NFEventManager triggerOnEvent:block:]
There is no point of creating a trigger without a block or event
-[NFEventManager triggerOnAnyEvent:block:]
createPKZip
extractPKZip
com.apple.news.state.machine
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
event
@"NFPromise"8@?0
@16@?0@8
v16@?0@"NSError"8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
v16@?0@"NFContainerPool"8
B16@?0@8
unknown
__exception_reason
@32@?0@"NSMutableDictionary"8@"NSMutableDictionary"16@"NSMutableDictionary"24
<%@ address=%ld, name=%@, type=%@>
NFPromiseError
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
@"NFPromise"16@?0@?<@@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<@@?@>16
@"NFPromise"16@?0@8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@16
@"NFPromise"16@?0@?<v@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@>16
@"NFPromise"16@?0@?<v@?@@?<v@?@>@?<v@?@"NSError">>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@@?<v@?@>@?<v@?@"NSError">>16
@"NFPromise"16@?0d8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8d16
v32@?0@"NFKey"8@"NFContainerPoolObject"16^B24
%02x
-[NFPromiseSeal dealloc]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
v32@?0@"NFKey"8@16^B24
kNFReachabilityChangedNotification
NFReachability.observation
v16@?0@"NSObject<OS_nw_path>"8
v24@?0@"NFKey"8@"NFCallbackDefinition"16
{%p name=%@, from=%@, to=%@}
{%p name=%@}
{CGRect={CGPoint=dd}{CGSize=dd}}
hw.machine
DeviceName
iPhone
iPad
iPod
Apple Watch
Watch
NSString *NFGeneralDeviceString()
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-2916/feldsparcore/Classes/NFDevice.m
Encountered an unknown device model: %@
ProductVersion
ProductType
Aixt/MEN2O2B7f+8m4TxUA
NFRouterRouteToNonRoutable
Attempt to route to non-routable object, object=%@
*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@
NFCallbackDefinition
NFWaiter
NFDefinition
NFContainerException
NFContainerMissingDefinitionException
NFContainerDefinitionNotOverridableException
NFContainerDefinitionNilFactoryException
NFContainerEnsuringNullableDefinitionException
NFContainerDefinitionMismatchException
NFContainerCircularDependencyDetectedException
NFContainerContextMismatchException
NFUnfairLock
NFLocking
NSLocking
NFStateMachineTransition
NFContainer
NFDefinitionContainer
NSObject
NFRegistrationContainer
NFProxyContainer
NFPendingPromise
NFCallbackRegistration
NFEventManager
NFEventTrigger
NFArchiver
NFStateMachine
NFRoutable
NFRouter
NFProxyResolver
NFResolver
NFValidationResolver
NFAdditions
NFLazy
NFKey
NSCopying
FRAdditions
NFPromise
Firstly
NFVoid
Void
Delay
NFContainerPool
NFContainerRegistry
NFPromiseSeal
NFContext
NFReachability
NFCallbackStore
NFMutexLock
NFStateMachineEvent
NFStateMachineState
Private
NFContainerPoolObject
NFMultiDelegate
NFObjectReuseManager
NFRouterException
NFRouterRouteToNonRoutable
NFCallbackScope
init
initWithCallbackBlock:privateContainer:
callbackBlock
privateContainer
.cxx_destruct
_callbackBlock
_privateContainer
T@?,R,N,V_callbackBlock
T@"<NFDefinitionContainer>",R,N,V_privateContainer
initWithValue:
error
waitFor:waitInterval:timeoutInterval:completion:failure:
initWithResolver:
waitUntil:waitInterval:timeoutInterval:completion:failure:
waitWithInterval:timeout:valueProvider:
waitWithInterval:timeout:conditionProvider:
date
timeIntervalSince1970
errorWithDomain:code:userInfo:
waitWithInterval:timeout:valueProvider:condition:
waitWithTimeout:valueProvider:
waitWithTimeout:conditionProvider:
interval
timeout
_interval
_timeout
Td,R,N,V_interval
Td,R,N,V_timeout
stringWithFormat:
initWithFormat:
initWithClass:factory:
initWithProtocol:factory:
initWithUnsafeFactory:
description
inScope:
withValidation:
withConfiguration:
canBeOverridden:
canBeNil:
privateAccessContainer
withPrivateAccessInContainer:
withPrivateAccessInWeakContainer:
source
setSource:
setCls:
protocol
setProtocol:
factory
setFactory:
scope
setScope:
canBeOverridden
setCanBeOverridden:
canBeNil
setCanBeNil:
validationBlock
setValidationBlock:
configurationBlock
setConfigurationBlock:
_privateAccessContainer
_privateAccessWeakContainer
_canBeOverridden
_canBeNil
_source
_cls
_protocol
_factory
_scope
_validationBlock
_configurationBlock
TQ,N,V_source
T#,&,N,V_cls
T@"Protocol",&,N,V_protocol
T@?,C,N,V_factory
TQ,N,V_scope
TB,N,V_canBeOverridden
TB,N,V_canBeNil
T@?,C,N,V_validationBlock
T@?,C,N,V_configurationBlock
exceptionWithName:reason:userInfo:
exceptionWithDefinitionKey:
exception
exceptionWithContextKey:
initWithOptions:
lock
unlock
performWithLockSync:
_unfairLock
_unfairLockOptions
event
fromState
toState
context
initWithStateMachine:event:fromState:toState:context:
stateMachine
setStateMachine:
setEvent:
setFromState:
setToState:
setContext:
_stateMachine
_event
_fromState
_toState
_context
T@"NFStateMachine",&,N,V_stateMachine
T@"NFStateMachineState",&,N,V_fromState
T@"NFStateMachineState",&,N,V_toState
T@"NFStateMachineEvent",&,N,V_event
T@"<NFStateMachineContextType>",&,N,V_context
initWithBundleAssemblies:assemblies:singletonPool:bridgedContainer:
initWithSingletonPool:
countByEnumeratingWithState:objects:count:
assemblies
addObjectsFromArray:
initAsPrivateContainer
initWithContainer:privateContainer:
initWithCallbackStore:privateContainer:
initWithPublicContainer:privateContainer:bridgedContainer:callback:
loadInRegistry:
loadedContainer:
registerClass:name:factory:
initWithAddressOfType:name:
register:createDefinitionBlock:
registerProtocol:name:factory:
initWithTypeName:name:
registerKey:factory:
initWithPublicContainer:privateContainer:inPool:callbackStore:
proxyResolver
objectForKey:
setObject:forKey:
createProxyResolverForPrivateContainer:
enumerateKeysAndObjectsUsingBlock:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
definitionForKey:
registerClass:factory:
registerProtocol:factory:
unsafeRegisterForKey:name:factory:
initWithBundleAssemblies:assemblies:
resolver
validateDefinitionsWithProxyResolver:
definitions
setDefinitions:
pool
setPool:
callbackStore
setCallbackStore:
privateContainers
setPrivateContainers:
_definitions
_pool
_callbackStore
_privateContainers
T@"NSMutableDictionary",&,N,V_definitions
T@"NFContainerPool",&,N,V_pool
T@"NFCallbackStore",&,N,V_callbackStore
T@"NSMutableDictionary",&,N,V_privateContainers
T@"NFProxyResolver",R,N
T@"<NFResolver>",R,N
container
setContainer:
setPrivateContainer:
_container
T@"NFContainer",&,N,V_container
T@"NFContainer",&,N,V_privateContainer
promise
setPromise:
resolve
setResolve:
reject
setReject:
_promise
_resolve
_reject
T@"NFPromise",&,N,V_promise
T@?,C,N,V_resolve
T@?,C,N,V_reject
storeCallbackDefinition:forKey:scope:
whenResolvingClass:scope:callbackBlock:
whenResolvingProtocol:scope:callbackBlock:
whenResolvingKey:scope:callbackBlock:
whenUnsafeResolvingWithKey:scope:callbackBlock:
T@"NFCallbackStore",R,N,V_callbackStore
isMainThread
events
addObject:
attemptTriggersForCurrentEvent:
count
UUID
UUIDString
initWithKey:fireOnce:fireOnAny:events:block:
triggers
setWithObject:
triggerOnAnyEvent:block:
allValues
fireOnce
handleOnceTrigger:event:
handleAlwaysTrigger:event:
fireOnAny
containsObject:
removeObjectForKey:
block
fireEvent:
triggerOnceWhenAllEventsHaveOccurred:block:
triggerAlwaysWhenAllEventsHaveOccurred:block:
triggerOnceWhenAnyEventHasOccurred:block:
triggerOnEvent:block:
_events
_triggers
T@"NSMutableSet",R,N,V_events
T@"NSMutableDictionary",R,N,V_triggers
_fireOnce
_fireOnAny
_key
_block
T@"NSString",R,C,N,V_key
T@"NSSet",R,C,N,V_events
T@?,R,N,V_block
TB,R,N,V_fireOnce
TB,R,N,V_fireOnAny
array
dictionaryWithObjects:forKeys:count:
fileSystemRepresentation
archiveDirectory:toLocation:
unarchive:toLocation:
defaultManager
stringWithFileSystemRepresentation:length:
initWithDomain:code:userInfo:
domain
isEqualToString:
code
fc_isStateMachineError:
fc_createStateMachineErrorForCode:userInfo:
resolveProtocol:
exceptionWithObject:
resolveRoutable:
_resolver
T@"<NFResolver>",R,N,V_resolver
name
dictionaryWithObject:forKey:
state
status
statusToken
states
setStatusToken:
setStatus:
activate
deactivate
owner
asVoid:
numberWithUnsignedInteger:
numberWithInteger:
destinationState
canTry:withOwner:
willExit:withOwner:
willEnter:withOwner:
setState:
didExit:withOwner:
firstly:
didEnter:withOwner:
thenOn:then:
errorOn:error:
alwaysOn:always:
fired:withOwner:
initWithState:withOwner:
activateIfNeeded
deactivateIfNeeded
addState:
addEvent:
fireEventWithName:withContext:
setOwner:
setStates:
setEvents:
setLock:
_status
_state
_owner
_states
_lock
_statusToken
T@,W,N,V_owner
T@"NSMutableDictionary",&,N,V_states
T@"NSMutableDictionary",&,N,V_events
T@"NFStateMachineState",&,N,V_state
TQ,N,V_status
T@"NFMutexLock",&,N,V_lock
Tq,N,V_statusToken
isPoolPreparedForLockingGraph
onDrainCopyPoolObjectGraph:
copyWithObjectGraphDrainingDisabled
linkDepth:
resolveClass:name:
contextWithContextBlock:
resolveForKey:context:validateBlock:
resolveProtocol:name:
mergeWithContext:
userInfo
initWithDictionary:
reason
setObject:forKeyedSubscript:
ensure:
resolveForKey:
lookupForKey:
onDrain:
object
initWithObject:ownership:
enter:
initWithCallbackStore:
currentObjectGraphResolver:
linkResolverWithLinkBlock:
resolveClass:
resolveClass:contextBlock:
resolveClass:name:contextBlock:
resolveProtocol:contextBlock:
resolveProtocol:name:contextBlock:
resolveForKey:context:
resolveForKey:context:error:
ensureClass:
ensureClass:name:
ensureProtocol:
ensureProtocol:name:
publicContainer
setPublicContainer:
_publicContainer
T@"<NFDefinitionContainer>",&,N,V_publicContainer
T@"<NFDefinitionContainer>",&,N,V_privateContainer
T@"NFContext",&,N,V_context
nf_migrateObjectForKey:toKey:
copy
constructor
initWithConstructor:
value
reset
_value
_constructor
T@?,R,C,N,V_constructor
T@"NFUnfairLock",R,C,N,V_lock
T@,R,N,V_value
initWithAddress:type:name:
address
copyWithZone:
copyWithName:
type
_address
_name
_type
TQ,R,N,V_address
T@"NSString",R,N,V_name
T@,R,N,V_type
initForReadingFromData:error:
nf_securelyUnarchiveObjectOfClass:
dataWithContentsOfFile:
nf_securelyUnarchiveObjectOfClass:withData:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
nf_securelyUnarchiveObjectOfClasses:withData:
nf_securelyUnarchiveObjectOfClass:withFile:
nf_securelyUnarchiveObjectOfClasses:withFile:
seal
resolve:
reject:
initWithError:
setSeal:
dealloc
resolveOn:reject:resolve:
then:
asDelay:withValue:
asDelay:onQueue:withValue:
error:
always:
then
thenOn
pipe
pipeOn
errorOn
resolveOn
delay
delayOn
_seal
T@"NFPromiseSeal",&,N,V_seal
T@?,R
asVoid
asDelay:onQueue:withError:
asDelay:withError:
drain
drainDepth
setDrainDepth:
onDrainBlocks
setOnDrainBlocks:
onDrainCopyPoolObjectGraphBlocks
setOnDrainCopyPoolObjectGraphBlocks:
isObjectGraphDrainingEnabled
setGraph:
singletons
setSingletons:
containerSingletons
setContainerSingletons:
graph
depth
setDepth:
setObjectGraphDrainingEnabled:
_objectGraphDrainingEnabled
_singletons
_containerSingletons
_graph
_depth
_drainDepth
_onDrainBlocks
_onDrainCopyPoolObjectGraphBlocks
T@"NSMutableDictionary",&,N,V_singletons
T@"NSMutableDictionary",&,N,V_containerSingletons
T@"NSMutableDictionary",&,N,V_graph
TQ,N,V_depth
TQ,N,V_drainDepth
objectGraphDrainingEnabled
TB,N,GisObjectGraphDrainingEnabled,V_objectGraphDrainingEnabled
T@"NSMutableArray",&,N,V_onDrainBlocks
T@"NSMutableArray",&,N,V_onDrainCopyPoolObjectGraphBlocks
poolPreparedForLockingGraph
TB,R,N,GisPoolPreparedForLockingGraph
compare:
nf_object:isEqualToObject:
nf_compareObject:toObject:
dataUsingEncoding:
bytes
length
stringWithCapacity:
appendFormat:
characterAtIndex:
appendString:
nf_sha1
nf_stringByReversingString
swiftContainer
bridgedContainer
callback
T@"<NFRegistrationContainer>",R,N
T@,R,N
T@"<NFCallbackRegistration>",R,N
_bridgedContainer
_swiftContainer
_callback
T@"<NFRegistrationContainer>",R,N,V_publicContainer
T@"<NFRegistrationContainer>",R,N,V_privateContainer
T@,R,N,V_swiftContainer
T@,R,N,V_bridgedContainer
T@"<NFCallbackRegistration>",R,N,V_callback
handlers
removeAllObjects
seal:error:resolution:
registerHandler:
setValue:
setError:
setHandlers:
_error
_handlers
T@,&,N,V_value
T@"NSError",&,N,V_error
TQ,N,V_state
T@"NSMutableArray",&,N,V_handlers
T@"NFUnfairLock",R,N,V_lock
objects
useObject:forClass:
useObject:forClass:name:
useObject:forProtocol:
useObject:forProtocol:name:
useObject:forKey:
unsafeUseObject:forKey:name:
_objects
T@"NSMutableDictionary",R,N,V_objects
_updateCurrentNetworkPath:
currentNetworkPath
setCurrentNetworkPath:
_statusFromNetworkPath:
setCurrentReachabilityStatus:
defaultCenter
postNotificationName:object:
sharedInstance
currentReachabilityStatus
observationQueue
setObservationQueue:
networkPathMonitor
setNetworkPathMonitor:
_currentReachabilityStatus
_observationQueue
_networkPathMonitor
_currentNetworkPath
Tq,V_currentReachabilityStatus
T@"NSObject<OS_dispatch_queue>",&,N,V_observationQueue
T@"NSObject<OS_nw_path_monitor>",&,N,V_networkPathMonitor
T@"NSObject<OS_nw_path>",&,N,V_currentNetworkPath
names
firstObject
store
_store
T@"NSMutableDictionary",R,N,V_store
setFireBlock:
fireBlock
initWithName:transitionFromStates:toState:
onFire:
setName:
setDestinationState:
_destinationState
_fireBlock
T@"NSString",C,N,V_name
T@"NSSet",&,N,V_states
T@"NFStateMachineState",&,N,V_destinationState
T@?,C,N,V_fireBlock
setCanTryBlock:
setWillExitBlock:
setDidExitBlock:
setWillEnterBlock:
setDidEnterBlock:
initWithName:
onCanTry:
onWillExit:
onDidExit:
onWillEnter:
onDidEnter:
canTryBlock
willExitBlock
willEnterBlock
didExitBlock
didEnterBlock
_canTryBlock
_willExitBlock
_willEnterBlock
_didExitBlock
_didEnterBlock
T@?,C,N,V_canTryBlock
T@?,C,N,V_willExitBlock
T@?,C,N,V_willEnterBlock
T@?,C,N,V_didExitBlock
T@?,C,N,V_didEnterBlock
ownership
strongObject
weakObject
_ownership
_strongObject
_weakObject
TQ,R,N,V_ownership
T@,R,N,V_strongObject
T@,R,W,N,V_weakObject
hashTableWithOptions:
children
removeObject:
removeDelegate:
addDelegate:
delegateProtocol
methodSignatureForSelector:
selector
invokeWithTarget:
initWithDelegate:delegateProtocol:
delegate
replaceDelegate:withDelegate:
forwardInvocation:
_children
_delegateProtocol
T@"NSHashTable",R,N,V_children
T@"Protocol",R,N,V_delegateProtocol
reuseableObjects
objectForKeyedSubscript:
reuseFactory
inuseObjects
identifier
initWithObjectConstructor:
dequeueObjectForIdentifier:
prepareObjectForReuse:
purgeObjectForIdentifier:
isInUse:
inUseObjectForIdentifier:
setReuseFactory:
setInuseObjects:
setReuseableObjects:
_reuseFactory
_inuseObjects
_reuseableObjects
T@?,C,N,V_reuseFactory
T@"NSMutableDictionary",C,N,V_inuseObjects
T@"NSMutableDictionary",C,N,V_reuseableObjects
valueWithBytes:objCType:
nf_CGRectValue
nf_valueWithCGRect:
objCType
getValue:
initWithUTF8String:
hasPrefix:
initWithScope:names:
_names
TQ,R,N,V_scope
T@"NSArray",R,N,V_names
arrayWithObjects:count:
@32@0:8@?16@24
@?16@0:8
@16@0:8
v16@0:8
@"<NFDefinitionContainer>"
@40@0:8d16d24@?32
@48@0:8d16d24@?32@?40
@32@0:8d16@?24
v56@0:8@?16d24d32@?40@?48
d16@0:8
@32@0:8#16@?24
@32@0:8@16@?24
@24@0:8@?16
@24@0:8Q16
@20@0:8B16
@24@0:8@16
Q16@0:8
v24@0:8Q16
#16@0:8
v24@0:8#16
v24@0:8@16
v24@0:8@?16
B16@0:8
v20@0:8B16
@"Protocol"
@24@0:8q16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24@32@40@48
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NFDefinition"24@0:8@"NFKey"16
@40@0:8#16@24@?32
@40@0:8@16@24@?32
@"NFDefinition"32@0:8#16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8#16@"NSString"24@?<@@?@"<NFResolver>">32
@"NFDefinition"32@0:8@"Protocol"16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8@"Protocol"16@"NSString"24@?<@@?@"<NFResolver>">32
@"NFDefinition"32@0:8@"NFKey"16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8@"NSString"16@"NSString"24@?<@@?@"<NFResolver>">32
@32@0:8@16@24
@48@0:8@16@24@32@40
@"NSMutableDictionary"
@"NFContainerPool"
@"NFCallbackStore"
@"NFContainer"
@"NFPromise"
v40@0:8#16@24@?32
v40@0:8@16@24@?32
v40@0:8#16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v40@0:8@"Protocol"16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v40@0:8@"NFKey"16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v40@0:8@"NSString"16@"NFCallbackScope"24@?<v@?@@"<NFResolver>">32
v32@0:8@16@?24
v32@0:8@16@24
@"NSMutableSet"
@48@0:8@16B24B28@32@?40
@"NSString"
@"NSSet"
B32@0:8@16@24
B32@0:8@"NSURL"16@"NSURL"24
B24@0:8q16
@32@0:8q16@24
@24@0:8@"Protocol"16
@"<NFResolver>"
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8#16
@32@0:8#16@24
@40@0:8@16@24^@32
@"<NFResolver>"24@0:8Q16
v24@0:8@?<v@?@?<v@?>>16
@32@0:8#16@?<v@?@"<NFContext>">24
@32@0:8#16@"NSString"24
@40@0:8#16@"NSString"24@?<v@?@"<NFContext>">32
@32@0:8@"Protocol"16@?<v@?@"<NFContext>">24
@32@0:8@"Protocol"16@"NSString"24
@40@0:8@"Protocol"16@"NSString"24@?<v@?@"<NFContext>">32
@24@0:8@"NFKey"16
@32@0:8@"NFKey"16@"NFContext"24
@40@0:8@"NFKey"16@"NFContext"24^@32
v32@0:8#16@24
v32@0:8#16@"NSString"24
v24@0:8@"Protocol"16
v32@0:8@"Protocol"16@"NSString"24
@"NFContext"
@"NFUnfairLock"
@24@0:8^{_NSZone=}16
@40@0:8Q16@24@32
@"NFPromiseSeal"
@32@0:8d16@24
@40@0:8d16@24@32
@"NSMutableArray"
q32@0:8@16@24
@"<NFRegistrationContainer>"16@0:8
@"<NFCallbackRegistration>"16@0:8
@"<NFRegistrationContainer>"
@"<NFCallbackRegistration>"
v40@0:8@16@?24@?32
v40@0:8@16@24Q32
@"NSError"
v32@0:8@16#24
v40@0:8@16#24@32
v40@0:8@16@24@32
v40@0:8@16#24@"NSString"32
v32@0:8@16@"Protocol"24
v40@0:8@16@"Protocol"24@"NSString"32
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_nw_path_monitor>"
@"NSObject<OS_nw_path>"
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@40@0:8@16@24@32
@32@0:8@16Q24
@"NSHashTable"
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@32@0:8Q16@24
@"NSArray"
