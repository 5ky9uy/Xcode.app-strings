@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
v8@?0
apple-internal-install
StoreDemoMode
com.apple.demo-settings
{%p event=%@, fromState=%@, toState=%@, context=%@}
v24@?0@?<v@?@>8@?<v@?@"NSError">16
-[NFEventManager fireEvent:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/NFEventManager.m
You cannot fire a nil event
-[NFEventManager triggerOnceWhenAllEventsHaveOccurred:block:]
There is no point of creating a trigger without a block or events
-[NFEventManager triggerAlwaysWhenAllEventsHaveOccurred:block:]
-[NFEventManager triggerOnceWhenAnyEventHasOccurred:block:]
-[NFEventManager triggerOnEvent:block:]
There is no point of creating a trigger without a block or event
-[NFEventManager triggerOnAnyEvent:block:]
createPKZip
extractPKZip
com.apple.news.state.machine
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
@8@?0
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
event
@"NFPromise"8@?0
@16@?0@8
v16@?0@"NSError"8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
NFPromiseError
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
v16@?0@8
@"NFPromise"16@?0@?<@@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<@@?@>16
@"NFPromise"16@?0@8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@16
@"NFPromise"16@?0@?<v@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@>16
@"NFPromise"16@?0@?<v@?@@?<v@?@>@?<v@?@"NSError">>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@@?<v@?@>@?<v@?@"NSError">>16
@"NFPromise"16@?0d8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8d16
%02x
-[NFPromiseSeal dealloc]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
kNFReachabilityChangedNotification
NFReachability.observation
v16@?0@"NSObject<OS_nw_path>"8
{%p name=%@, from=%@, to=%@}
{%p name=%@}
{CGRect={CGPoint=dd}{CGSize=dd}}
hw.machine
DeviceName
iPhone
iPad
iPod
Apple Watch
Watch
NSString *NFGeneralDeviceString()
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparcore/Classes/NFDevice.m
Encountered an unknown device model: %@
ProductVersion
ProductType
Aixt/MEN2O2B7f+8m4TxUA
*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@
NFUnfairLock
NFLocking
NSLocking
NFStateMachineTransition
NFPendingPromise
NFEventManager
NFEventTrigger
NFArchiver
NSObject
NFStateMachine
NFAdditions
NFLazy
FRAdditions
NFPromise
Firstly
NFVoid
NSCopying
Void
Delay
NFPromiseSeal
NFReachability
NFMutexLock
NFStateMachineEvent
NFStateMachineState
Private
NFMultiDelegate
init
initWithOptions:
lock
unlock
performWithLockSync:
_unfairLock
_unfairLockOptions
event
fromState
toState
context
stringWithFormat:
initWithStateMachine:event:fromState:toState:context:
description
stateMachine
setStateMachine:
setEvent:
setFromState:
setToState:
setContext:
.cxx_destruct
_stateMachine
_event
_fromState
_toState
_context
T@"NFStateMachine",&,N,V_stateMachine
T@"NFStateMachineState",&,N,V_fromState
T@"NFStateMachineState",&,N,V_toState
T@"NFStateMachineEvent",&,N,V_event
T@"<NFStateMachineContextType>",&,N,V_context
initWithResolver:
promise
setPromise:
resolve
setResolve:
reject
setReject:
_promise
_resolve
_reject
T@"NFPromise",&,N,V_promise
T@?,C,N,V_resolve
T@?,C,N,V_reject
isMainThread
initWithFormat:
events
addObject:
attemptTriggersForCurrentEvent:
count
UUID
UUIDString
initWithKey:fireOnce:fireOnAny:events:block:
triggers
setObject:forKey:
setWithObject:
triggerOnAnyEvent:block:
allValues
countByEnumeratingWithState:objects:count:
fireOnce
handleOnceTrigger:event:
handleAlwaysTrigger:event:
fireOnAny
containsObject:
removeObjectForKey:
block
fireEvent:
triggerOnceWhenAllEventsHaveOccurred:block:
triggerAlwaysWhenAllEventsHaveOccurred:block:
triggerOnceWhenAnyEventHasOccurred:block:
triggerOnEvent:block:
_events
_triggers
T@"NSMutableSet",R,N,V_events
T@"NSMutableDictionary",R,N,V_triggers
_fireOnce
_fireOnAny
_key
_block
T@"NSString",R,C,N,V_key
T@"NSSet",R,C,N,V_events
T@?,R,N,V_block
TB,R,N,V_fireOnce
TB,R,N,V_fireOnAny
array
dictionaryWithObjects:forKeys:count:
fileSystemRepresentation
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
archiveDirectory:toLocation:
unarchive:toLocation:
defaultManager
stringWithFileSystemRepresentation:length:
initWithDomain:code:userInfo:
domain
isEqualToString:
code
fc_isStateMachineError:
fc_createStateMachineErrorForCode:userInfo:
name
dictionaryWithObject:forKey:
state
status
statusToken
states
setStatusToken:
setStatus:
activate
deactivate
objectForKey:
owner
asVoid:
numberWithUnsignedInteger:
numberWithInteger:
destinationState
canTry:withOwner:
willExit:withOwner:
willEnter:withOwner:
setState:
didExit:withOwner:
firstly:
didEnter:withOwner:
thenOn:then:
errorOn:error:
alwaysOn:always:
fired:withOwner:
initWithState:withOwner:
activateIfNeeded
deactivateIfNeeded
addState:
addEvent:
fireEventWithName:withContext:
setOwner:
setStates:
setEvents:
setLock:
_status
_state
_owner
_states
_lock
_statusToken
T@,W,N,V_owner
T@"NSMutableDictionary",&,N,V_states
T@"NSMutableDictionary",&,N,V_events
T@"NFStateMachineState",&,N,V_state
TQ,N,V_status
T@"NFMutexLock",&,N,V_lock
Tq,N,V_statusToken
nf_migrateObjectForKey:toKey:
copy
constructor
initWithConstructor:
value
reset
_value
_constructor
T@?,R,C,N,V_constructor
T@"NFUnfairLock",R,C,N,V_lock
T@,R,N,V_value
initForReadingFromData:error:
nf_securelyUnarchiveObjectOfClass:
dataWithContentsOfFile:
nf_securelyUnarchiveObjectOfClass:withData:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
nf_securelyUnarchiveObjectOfClasses:withData:
nf_securelyUnarchiveObjectOfClass:withFile:
nf_securelyUnarchiveObjectOfClasses:withFile:
exceptionWithName:reason:userInfo:
seal
resolve:
reject:
initWithValue:
initWithError:
setSeal:
dealloc
resolveOn:reject:resolve:
errorWithDomain:code:userInfo:
then:
asDelay:withValue:
asDelay:onQueue:withValue:
error:
always:
then
thenOn
pipe
pipeOn
error
errorOn
resolveOn
delay
delayOn
_seal
T@"NFPromiseSeal",&,N,V_seal
T@?,R
copyWithZone:
asVoid
asDelay:onQueue:withError:
asDelay:withError:
compare:
nf_object:isEqualToObject:
nf_compareObject:toObject:
dataUsingEncoding:
bytes
length
stringWithCapacity:
appendFormat:
characterAtIndex:
appendString:
nf_sha1
nf_stringByReversingString
handlers
removeAllObjects
seal:error:resolution:
registerHandler:
setValue:
setError:
setHandlers:
_error
_handlers
T@,&,N,V_value
T@"NSError",&,N,V_error
TQ,N,V_state
T@"NSMutableArray",&,N,V_handlers
T@"NFUnfairLock",R,N,V_lock
_updateCurrentNetworkPath:
currentNetworkPath
setCurrentNetworkPath:
_statusFromNetworkPath:
setCurrentReachabilityStatus:
defaultCenter
postNotificationName:object:
sharedInstance
currentReachabilityStatus
observationQueue
setObservationQueue:
networkPathMonitor
setNetworkPathMonitor:
_currentReachabilityStatus
_observationQueue
_networkPathMonitor
_currentNetworkPath
Tq,V_currentReachabilityStatus
T@"NSObject<OS_dispatch_queue>",&,N,V_observationQueue
T@"NSObject<OS_nw_path_monitor>",&,N,V_networkPathMonitor
T@"NSObject<OS_nw_path>",&,N,V_currentNetworkPath
setFireBlock:
fireBlock
initWithName:transitionFromStates:toState:
onFire:
setName:
setDestinationState:
_name
_destinationState
_fireBlock
T@"NSString",C,N,V_name
T@"NSSet",&,N,V_states
T@"NFStateMachineState",&,N,V_destinationState
T@?,C,N,V_fireBlock
setCanTryBlock:
setWillExitBlock:
setDidExitBlock:
setWillEnterBlock:
setDidEnterBlock:
initWithName:
onCanTry:
onWillExit:
onDidExit:
onWillEnter:
onDidEnter:
canTryBlock
willExitBlock
willEnterBlock
didExitBlock
didEnterBlock
_canTryBlock
_willExitBlock
_willEnterBlock
_didExitBlock
_didEnterBlock
T@?,C,N,V_canTryBlock
T@?,C,N,V_willExitBlock
T@?,C,N,V_willEnterBlock
T@?,C,N,V_didExitBlock
T@?,C,N,V_didEnterBlock
hashTableWithOptions:
children
removeObject:
removeDelegate:
addDelegate:
delegateProtocol
methodSignatureForSelector:
selector
invokeWithTarget:
initWithDelegate:delegateProtocol:
delegate
replaceDelegate:withDelegate:
forwardInvocation:
_children
_delegateProtocol
T@"NSHashTable",R,N,V_children
T@"Protocol",R,N,V_delegateProtocol
T@,R,N
valueWithBytes:objCType:
nf_CGRectValue
nf_valueWithCGRect:
objCType
getValue:
initWithUTF8String:
hasPrefix:
v16@0:8
@24@0:8q16
@16@0:8
v24@0:8@?16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24@32@40@48
v24@0:8@16
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
@?16@0:8
@"NFPromise"
v32@0:8@16@?24
v32@0:8@16@24
@"NSMutableSet"
@"NSMutableDictionary"
@48@0:8@16B24B28@32@?40
B16@0:8
@"NSString"
@"NSSet"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSURL"16@"NSURL"24
B24@0:8q16
@32@0:8q16@24
@32@0:8@16@24
v24@0:8Q16
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8@?16
@"NFUnfairLock"
@24@0:8#16
@32@0:8#16@24
@24@0:8@16
@32@0:8@16@?24
@"NFPromiseSeal"
@24@0:8^{_NSZone=}16
@32@0:8d16@24
@40@0:8d16@24@32
q32@0:8@16@24
v40@0:8@16@?24@?32
v40@0:8@16@24Q32
@"NSError"
@"NSMutableArray"
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_nw_path_monitor>"
@"NSObject<OS_nw_path>"
@24@0:8Q16
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@40@0:8@16@24@32
@"NSHashTable"
@"Protocol"
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
v8@?0
apple-internal-install
StoreDemoMode
com.apple.demo-settings
{%p event=%@, fromState=%@, toState=%@, context=%@}
v24@?0@?<v@?@>8@?<v@?@"NSError">16
-[NFEventManager fireEvent:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/NFEventManager.m
You cannot fire a nil event
-[NFEventManager triggerOnceWhenAllEventsHaveOccurred:block:]
There is no point of creating a trigger without a block or events
-[NFEventManager triggerAlwaysWhenAllEventsHaveOccurred:block:]
-[NFEventManager triggerOnceWhenAnyEventHasOccurred:block:]
-[NFEventManager triggerOnEvent:block:]
There is no point of creating a trigger without a block or event
-[NFEventManager triggerOnAnyEvent:block:]
createPKZip
extractPKZip
com.apple.news.state.machine
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
@8@?0
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
event
@"NFPromise"8@?0
@16@?0@8
v16@?0@"NSError"8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke_5
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
NFPromiseError
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
v16@?0@8
@"NFPromise"16@?0@?<@@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<@@?@>16
@"NFPromise"16@?0@8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@16
@"NFPromise"16@?0@?<v@?@>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@>16
@"NFPromise"16@?0@?<v@?@@?<v@?@>@?<v@?@"NSError">>8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8@?<v@?@@?<v@?@>@?<v@?@"NSError">>16
@"NFPromise"16@?0d8
@"NFPromise"24@?0@"NSObject<OS_dispatch_queue>"8d16
%02x
-[NFPromiseSeal dealloc]
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
kNFReachabilityChangedNotification
NFReachability.observation
v16@?0@"NSObject<OS_nw_path>"8
{%p name=%@, from=%@, to=%@}
{%p name=%@}
{CGRect={CGPoint=dd}{CGSize=dd}}
hw.machine
DeviceName
iPhone
iPad
iPod
Apple Watch
Watch
NSString *NFGeneralDeviceString()
/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/feldsparcore/Classes/NFDevice.m
Encountered an unknown device model: %@
ProductVersion
ProductType
Aixt/MEN2O2B7f+8m4TxUA
*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@
NFUnfairLock
NFLocking
NSLocking
NFStateMachineTransition
NFPendingPromise
NFEventManager
NFEventTrigger
NFArchiver
NSObject
NFStateMachine
NFAdditions
NFLazy
FRAdditions
NFPromise
Firstly
NFVoid
NSCopying
Void
Delay
NFPromiseSeal
NFReachability
NFMutexLock
NFStateMachineEvent
NFStateMachineState
Private
NFMultiDelegate
defaultCenter
dataUsingEncoding:
length
appendString:
UUID
exceptionWithName:reason:userInfo:
dictionaryWithObjects:forKeys:count:
UUIDString
characterAtIndex:
hashTableWithOptions:
objectForKey:
removeAllObjects
domain
decodeObjectOfClasses:forKey:
containsObject:
initWithUTF8String:
setObject:forKey:
objCType
dictionaryWithObject:forKey:
initWithFormat:
getValue:
allValues
appendFormat:
stringWithFormat:
countByEnumeratingWithState:objects:count:
addObject:
isMainThread
hasPrefix:
decodeObjectOfClass:forKey:
numberWithUnsignedInteger:
count
stringWithFileSystemRepresentation:length:
array
isEqualToString:
compare:
errorWithDomain:code:userInfo:
selector
initWithDomain:code:userInfo:
fileSystemRepresentation
removeObjectForKey:
bytes
postNotificationName:object:
numberWithInteger:
setWithObject:
removeObject:
stringWithCapacity:
initForReadingFromData:error:
dataWithContentsOfFile:
code
copy
invokeWithTarget:
valueWithBytes:objCType:
defaultManager
init
lock
unlock
initWithOptions:
performWithLockSync:
_unfairLock
_unfairLockOptions
initWithStateMachine:event:fromState:toState:context:
description
stateMachine
setStateMachine:
event
setEvent:
fromState
setFromState:
toState
setToState:
context
setContext:
.cxx_destruct
_stateMachine
_event
_fromState
_toState
_context
T@"NFStateMachine",&,N,V_stateMachine
T@"NFStateMachineState",&,N,V_fromState
T@"NFStateMachineState",&,N,V_toState
T@"NFStateMachineEvent",&,N,V_event
T@"<NFStateMachineContextType>",&,N,V_context
promise
setPromise:
resolve
setResolve:
reject
setReject:
_promise
_resolve
_reject
T@"NFPromise",&,N,V_promise
T@?,C,N,V_resolve
T@?,C,N,V_reject
fireEvent:
triggerOnceWhenAllEventsHaveOccurred:block:
triggerAlwaysWhenAllEventsHaveOccurred:block:
triggerOnceWhenAnyEventHasOccurred:block:
triggerOnEvent:block:
triggerOnAnyEvent:block:
attemptTriggersForCurrentEvent:
handleOnceTrigger:event:
handleAlwaysTrigger:event:
events
triggers
_events
_triggers
T@"NSMutableSet",R,N,V_events
T@"NSMutableDictionary",R,N,V_triggers
initWithKey:fireOnce:fireOnAny:events:block:
block
fireOnce
fireOnAny
_fireOnce
_fireOnAny
_key
_block
T@"NSString",R,C,N,V_key
T@"NSSet",R,C,N,V_events
T@?,R,N,V_block
TB,R,N,V_fireOnce
TB,R,N,V_fireOnAny
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
archiveDirectory:toLocation:
unarchive:toLocation:
fc_isStateMachineError:
fc_createStateMachineErrorForCode:userInfo:
initWithState:withOwner:
activate
activateIfNeeded
deactivate
deactivateIfNeeded
addState:
addEvent:
fireEventWithName:withContext:
status
setStatus:
state
setState:
owner
setOwner:
states
setStates:
setEvents:
setLock:
statusToken
setStatusToken:
_status
_state
_owner
_states
_lock
_statusToken
T@,W,N,V_owner
T@"NSMutableDictionary",&,N,V_states
T@"NSMutableDictionary",&,N,V_events
T@"NFStateMachineState",&,N,V_state
TQ,N,V_status
T@"NFMutexLock",&,N,V_lock
Tq,N,V_statusToken
nf_migrateObjectForKey:toKey:
initWithConstructor:
value
reset
constructor
_value
_constructor
T@?,R,C,N,V_constructor
T@"NFUnfairLock",R,C,N,V_lock
T@,R,N,V_value
nf_securelyUnarchiveObjectOfClass:
nf_securelyUnarchiveObjectOfClass:withData:
nf_securelyUnarchiveObjectOfClass:withFile:
nf_securelyUnarchiveObjectOfClasses:withData:
nf_securelyUnarchiveObjectOfClasses:withFile:
dealloc
initWithResolver:
initWithValue:
initWithError:
then:
error:
always:
thenOn:then:
errorOn:error:
alwaysOn:always:
then
thenOn
pipe
pipeOn
error
errorOn
resolveOn
delay
delayOn
seal
setSeal:
_seal
T@"NFPromiseSeal",&,N,V_seal
T@?,R
firstly:
copyWithZone:
asVoid
asVoid:
asDelay:withValue:
asDelay:withError:
asDelay:onQueue:withValue:
asDelay:onQueue:withError:
nf_object:isEqualToObject:
nf_compareObject:toObject:
nf_sha1
nf_stringByReversingString
resolve:
reject:
resolveOn:reject:resolve:
registerHandler:
seal:error:resolution:
setValue:
setError:
handlers
setHandlers:
_error
_handlers
T@,&,N,V_value
T@"NSError",&,N,V_error
TQ,N,V_state
T@"NSMutableArray",&,N,V_handlers
T@"NFUnfairLock",R,N,V_lock
sharedInstance
_updateCurrentNetworkPath:
_statusFromNetworkPath:
currentReachabilityStatus
setCurrentReachabilityStatus:
observationQueue
setObservationQueue:
networkPathMonitor
setNetworkPathMonitor:
currentNetworkPath
setCurrentNetworkPath:
_currentReachabilityStatus
_observationQueue
_networkPathMonitor
_currentNetworkPath
Tq,V_currentReachabilityStatus
T@"NSObject<OS_dispatch_queue>",&,N,V_observationQueue
T@"NSObject<OS_nw_path_monitor>",&,N,V_networkPathMonitor
T@"NSObject<OS_nw_path>",&,N,V_currentNetworkPath
initWithName:transitionFromStates:toState:
onFire:
fired:withOwner:
name
setName:
destinationState
setDestinationState:
fireBlock
setFireBlock:
_name
_destinationState
_fireBlock
T@"NSString",C,N,V_name
T@"NSSet",&,N,V_states
T@"NFStateMachineState",&,N,V_destinationState
T@?,C,N,V_fireBlock
initWithName:
onCanTry:
onWillExit:
onDidExit:
onWillEnter:
onDidEnter:
canTryBlock
setCanTryBlock:
willExitBlock
setWillExitBlock:
willEnterBlock
setWillEnterBlock:
didExitBlock
setDidExitBlock:
didEnterBlock
setDidEnterBlock:
_canTryBlock
_willExitBlock
_willEnterBlock
_didExitBlock
_didEnterBlock
T@?,C,N,V_canTryBlock
T@?,C,N,V_willExitBlock
T@?,C,N,V_willEnterBlock
T@?,C,N,V_didExitBlock
T@?,C,N,V_didEnterBlock
canTry:withOwner:
willExit:withOwner:
willEnter:withOwner:
didExit:withOwner:
didEnter:withOwner:
methodSignatureForSelector:
initWithDelegate:delegateProtocol:
delegate
addDelegate:
removeDelegate:
replaceDelegate:withDelegate:
forwardInvocation:
children
delegateProtocol
_children
_delegateProtocol
T@"NSHashTable",R,N,V_children
T@"Protocol",R,N,V_delegateProtocol
T@,R,N
nf_CGRectValue
nf_valueWithCGRect:
v16@0:8
@24@0:8q16
@16@0:8
v24@0:8@?16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24@32@40@48
v24@0:8@16
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
@?16@0:8
@"NFPromise"
v32@0:8@16@?24
v32@0:8@16@24
@"NSMutableSet"
@"NSMutableDictionary"
@48@0:8@16B24B28@32@?40
B16@0:8
@"NSString"
@"NSSet"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSURL"16@"NSURL"24
B24@0:8q16
@32@0:8q16@24
@32@0:8@16@24
v24@0:8Q16
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8@?16
@"NFUnfairLock"
@24@0:8#16
@32@0:8#16@24
@24@0:8@16
@32@0:8@16@?24
@"NFPromiseSeal"
@24@0:8^{_NSZone=}16
@32@0:8d16@24
@40@0:8d16@24@32
q32@0:8@16@24
v40@0:8@16@?24@?32
v40@0:8@16@24Q32
@"NSError"
@"NSMutableArray"
q24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_nw_path_monitor>"
@"NSObject<OS_nw_path>"
@24@0:8Q16
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@40@0:8@16@24@32
@"NSHashTable"
@"Protocol"
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
