@(#)PROGRAM:CloudServices  PROJECT:CloudServices-529.102.1
0y10
2001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
201215014118Z
301215014105Z0y10
2001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
S dP
LH x
'ciB
l7D3m
c0a0
'xl}
j@Vn
viZ`8
z!7h
0y10
4001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
210719213727Z
300719213727Z0y10
4001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
X"4t
vK26
c0a0
}oZko
y|ud0
4RB?
2gZ
B6<'
0y10
3101
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
210921193841Z
310921192919Z0y10
3101
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
}buH
u1$s
fd>o
#oXt
c0a0
-Iv3
-Iv3
Ef6G
YiZJ
ZJ)<
v8@?0
com.apple.sbd
signpost
com.apple.sbd.passcode_request
activityLabel
activityUUID
%@: %@
unknown activity
v16@?0@"NSError"8
no error
v24@?0@"NSDictionary"8@"NSError"16
-[SecureBackup getAccountInfoWithError:]
-[SecureBackup updateMetadataWithError:]
-[SecureBackup enableWithError:]
-[SecureBackup recoverWithError:]
-[SecureBackup recoverWithCDPContext:escrowRecord:error:]
-[SecureBackup recoverSilentWithCDPContext:allRecords:error:]
-[SecureBackup isRecoveryKeySet:]
v20@?0B8@"NSError"12
-[SecureBackup restoreKeychainAsyncWithPassword:keybagDigest:haveBottledPeer:viewsNotToBeRestored:error:]
-[SecureBackup restoreKeychainWithBackupPassword:error:]
-[SecureBackup disableWithError:]
-[SecureBackup startSMSChallengeWithError:]
-[SecureBackup changeSMSTargetWithError:]
-[SecureBackup backupWithInfo:]
-[SecureBackup prepareHSA2EscrowRecordContents:reply:]
+[SecureBackup daemonPasscodeRequestOpinion:]
v20@?0I8@"NSError"12
-[SecureBackup beginHSA2PasscodeRequest:uuid:reason:error:]
v24@?0@"SecureBackupBeginPasscodeRequestResults"8@"NSError"16
v40@?0@"NSDictionary"8@"NSData"16@"NSData"24@"NSError"32
CloudServices
ForceCyrus
DoubleEnrollment
v24@?0@"NSArray"8@"NSError"16
getAccountInfo (legacy API)
enable (legacy API)
recover (legacy API)
disable (legacy API)
updateMetadata (legacy API)
backOffDate (legacy API)
setBackOffDate (legacy API)
stateCapture (legacy API)
<SBBPRR: %@ %@ %@ %@ %@>
iCloudEnvironment
escrowFederation
cert
dsid
%@ %@
version
icloudVersion
countryCode
metadata
altDSID
com.apple.SecureBackupDaemon
com.apple.SecureBackupDaemon.concurrent
CKPrettyError
CKRecordID
NSArray
NSData
NSDate
NSDictionary
NSError
NSNull
NSNumber
NSOrderedSet
NSSet
NSString
NSURL
reason
expectedFederationID
UNKNOWN
FEDERATION_MOVE
(unknown: %i)
errorDomain
errorCode
CloudServicesAnalytics
SecureBackupPassphrase
countryISOCode
countryDialCode
SecureBackupSMSTarget
phoneNumber
SecureBackupSynchronize
SecureBackupCountrySMSCodes
SecureBackupVerifcationToken
SecureBackupUseCachedPassphrase
SecureBackupHSA2CachedPrerecordUUID
SecureBackupSpecifiedFederation
SecureBackupNewPassphrase
SecureBackupMetadata
ClientMetadata
SecureBackupStingrayMetadataHash
SecureBackupStingrayMetadata
SecureBackupEscrowTimestamp
SecureBackupEscrowDate
SecureBackupStingrayEscrowTimestamp
SecureBackupEscrowDigest
SecureBackupStingrayEscrowDigest
SecureBackupAuthenticationAppleID
SecureBackupAuthenticationPassword
SecureBackupAuthenticationAuthToken
SecureBackupAuthenticationEscrowProxyURL
SecureBackupAuthenticationDSID
SecureBackupAuthenticationiCloudEnvironment
SecureBackupRemainingAttempts
SecureBackupCoolOffEnd
SecureBackupRecoveryStatus
SecureBackupTriggerUpdate
SecureBackupNotification
SecureBackupRecoveryKey
SecureBackupUsesRandomPassphrase
SecureBackupUsesComplexPassphrase
SecureBackupUsesNumericPassphrase
SecureBackupNumericPassphraseLength
SecureBackupEnabled
SecureBackupAccountIsHighSecurity
SecureBackupRecoveryRequiresVerificationToken
SecureBackupRecoveryVerificationTokenLength
SecureBackupServiceAccountInfo
SecureBackupLastBackupTimestamp
SecureBackupLastBackupDate
SecureBackupEscrowTrustStatus
recordStatus
recordID
peerInfo
peerInfoSerialNumber
osVersion
SecureBackupiCDPRecords
SecureBackupAlliCDPRecords
label
SecureBackupDoubleEnrollmentRecordIDs
escrowedSPKI
bottleID
bottleValid
serial
build
valid
invalid
SecureBackupErrorDomain
EscrowServiceErrorDomain
areaDialCode
deviceType
deviceId
SecureBackupiCloudIdentityData
SecureBackupIDMSData
SecureBackupIDMSRecovery
SecureBackupFMiPDataKey
SecureBackupFMiPUUIDKey
SecureBackupFMiPRecoveryKey
SecureBackupEMCSIDMSDict
SecureBackupEMCSManagedCredential
SecureBackupEMCSOldManagedCredential
SecureBackupContainsiCloudIdentity
SecureBackupUsesMultipleiCSCs
SecureBackupUsesRecoveryKey
SecureBackupSilentRecoveryAttempt
SecureBackupContainsiCDPData
SecureBackupContainsEMCSData
SecureBackupiCloudDataProtectionDeleteAllRecords
SecureBackupBackOffDate
SecureBackupiCloudIdentityPublicData
CloudServicesErrorDomain
CloudServicesRetryAfter
SecureBackupSuppressServerFiltering
SecureBackupSilentDoubleRecovery
SecureBackupDeleteDoubleOnly
SecureBackupNonViableRepairKey
EscrowServiceEscrowData
BackupKeybagDigest
BackupBagPassword
SecureBackupExcludeiCDPRecords
CKVR_SRP_SALT_LEN %d != packet_salt_len %zu
hsm_id_len %zu not in (0,%d)
unpack_srp_init_resp_rec failed
ccses->salt_len %d != salt_len %zd
pack_srp_recovery_rec failed
storageVersion
termsInfo
clubh_key_escrow_data_t pkt too small: len=%u
clubh_key_escrow_data_check_hdr failed=%d
clubh_key_escrow_data_t sect %d is malformed
pki_size %zd < B_len %zd
pki_size %zd > B_len %zd
ccses_unpack_srp_init_resp_rec failed
ccses->salt_len %zd != salt_len %zd
ccsrp_client_process_challenge failed: %d
ccses_pack_srp_recovery_rec failed
com.apple.protectedcloudstorage.record
SecureBackupTerms
Issuer Name
value
2.5.4.5
Error creating SecCertificateRef
Error copying escrow trust policy
Error copying root cert array
true
false
Unable to extract public key
unknown error
Unable to find terms in keychain
DoubleEnrollment attempted, but ForceCyrus is enabled
PROD
/AppleInternal/Library/CloudServices/iCloudDevCert150.der
/AppleInternal/Library/CloudServices/iCloudDevCert152.der
/AppleInternal/Library/CloudServices/iCloudDevCert.der
Security
OctagonEscrowMove
UseCKVR
srp recovery blob too large: %lu bytes
failed to convert srp init response
can't process recovery blob with no username
username could not be converted to cstring
recoveryPassphrase not provided
recoveryPassphrase could not be converted to cstring
v16@?0r*8
Username missing
%@.%@
label missing
Escrow data too long
Fail to parse certificate
Escrow error encrypting data
Could not generate key
failed to extra bytes of priv key
failed to create data buffer
cannot create key
Escrow error encrypting data (spare)
Could not create keys
SecKeyCopyPublicKey() failed
Local SRP verify failed
could not create local SRP recovery blob
creating connection to sbd: uid %d, progname %s
sbd connection created
New SecureBackup object: %@ %@
Deserialized SecureBackup object: %@ %@
getAccountInfoWithRequest remote proxy error: %ld
calling getAccountInfoWithRequest in daemon
getAccountInfoWithRequest in daemon came back with %@
enableWithRequest remote proxy error: %ld
 enableTelemetry=YES 
EnableWithRequest
BEGIN [%lld]: EnableWithRequest  enableTelemetry=YES 
calling enableWithRequest in daemon
 CloudServicesSignpostNameEnableWithRequest=%{public,signpost.telemetry:number1,name=CloudServicesSignpostNameEnableWithRequest}d 
END [%lld] %fs: EnableWithRequest  CloudServicesSignpostNameEnableWithRequest=%{public,signpost.telemetry:number1,name=CloudServicesSignpostNameEnableWithRequest}d 
enableWithRequest in daemon came back with %@
recoverWithRequest remote proxy error: %ld
calling recoverWithRequest in daemon
recoverWithRequest came back with %@
recoverRecordContentsWithRequest remote proxy error: %ld
calling recoverRecordContents in daemon
recoverRecordContents came back with %@
createICDPRecord remote proxy error: %ld
calling createICDPRecord in daemon
createICDPRecord came back with %@
disableWithRequest remote proxy error: %ld
calling disableWithRequest in daemon
disableWithRequest came back with %@
stashRecoveryDataWithRequest remote proxy error: %ld
calling stashRecoveryDataWithRequest in daemon
stashRecoveryDataWithRequest came back with %@
updateMetadata remote proxy error: %ld
calling updateMetadata in daemon
updateMetadata came back with %@
invalidating connection
calling cachePassphraseWithRequestAsync in daemon
cachePassphraseWithRequest remote proxy error: %ld
calling cachePassphraseWithRequest in daemon
uncachePassphraseWithRequest remote proxy error: %ld
calling uncachePassphraseWithRequest in daemon
cacheRecoveryKeyWithRequest remote proxy error: %ld
calling cacheRecoveryKeyWithRequest in daemon
uncacheRecoveryKeyWithRequest remote proxy error: %ld
calling uncachePassphraseWithRequestAsync in daemon
startSMSChallengeWithRequest remote proxy error: %ld
calling startSMSChallengeWithRequest in daemon
startSMSChallengeWithRequest came back with %@
getCountrySMSCodesWithRequest remote proxy error: %ld
calling getCountrySMSCodesWithRequest in daemon
getCountrySMSCodesWithRequest came back with %@
changeSMSTargetWithRequest remote proxy error: %ld
calling changeSMSTargetWithRequest in daemon
changeSMSTargetWithRequest came back with %@
backupWithInfo remote proxy error: %ld
calling backupWithInfo in daemon
backupWithInfo came back with %@
backOffDateWithRequest remote proxy error: %ld
calling backOffDateWithRequest in daemon
backOffDateWithRequest came back with %@
setBackOffDateWithRequest remote proxy error: %ld
calling setBackOffDateWithRequest in daemon
setBackOffDateWithRequest came back with %@
notificationInfoWithReply remote proxy error: %ld
calling notificationInfo in daemon
notificationInfo came back with %@
stateCaptureWithReply remote proxy error: %ld
calling stateCapture in daemon
stateCapture came back with %@
calling %s from the main thread
getAccountInfoWithRequest came back with %@
updateMetadataWithRequest remote proxy error: %ld
calling updateMetadataWithRequest in daemon
updateMetadataWithRequest came back with %@
enableWithRequest came back with %@
recoverWithCDPContext: invoked escrow recovery with escrowRecord: %@
recoverWithCDPContext: remote proxy error: %ld
calling recoverWithCDPContextInDaemon in daemon
recoverWithCDPContextInDaemon came back with %@
recoverSilentWithCDPContext: invoked silent escrow recovery with records: %@
recoverSilentWithCDPContextAndRecords: remote proxy error: %ld
calling recoverSilentWithCDPContextInDaemon in daemon
recoverSilentWithCDPContextInDaemon came back with %@
isRecoveryKeySet: invoked
isRecoveryKeySet: remote proxy error: %ld
calling isRecoveryKeySetInDaemon in daemon
isRecoveryKeySetInDaemon came back with %@
restoreKeychainAsyncWithPassword: invoked
restoreKeychainAsyncWithPassword: remote proxy error: %ld
calling restoreKeychainAsyncWithPassword in daemon
restoreKeychainAsyncWithPasswordInDaemon came back with %@
restoreKeychainWithBackupPassword: invoked
restoreKeychainWithBackupPassword: remote proxy error: %ld
calling restoreKeychainWithBackupPassword in daemon
restoreKeychainWithBackupPassword came back with %@
prepareHSA2EscrowRecordContents remote proxy error: %ld
calling prepareHSA2EscrowRecordContents in daemon
prepareHSA2EscrowRecordContents came back with %@
initial state fetch completed with: %d %@
unable to fetch passcode_request token
unable to fetch state of passcode_request token (%d)
do initial state fetch in the background
No need for passcode
daemon unable to determine passcode status due to keybag lock; relying on dispatch state
unable to ask daemon for confirmation of passcode request: %@
daemon believes there's no need for a passcode
Need password on next unlock
Desire password when available
Dispatch doesn't have a state for us yet, opportunistically asking for the password
unknown passcode request state: %llu
daemonPasscodeRequestOpinion remote proxy error: %ld
calling daemonPasscodeRequestOpinion in daemon
daemonPasscodeRequestOpinion came back with %@
beginHSA2PasscodeRequest remote proxy error: %ld
calling beginHSA2PasscodeRequest in daemon
beginHSA2PasscodeRequest came back with %@
getCertificatesWithRequest remote proxy error: %ld
calling getCertificatesWithRequest in daemon
saveTermsAcceptance remote proxy error: %ld
calling saveTermsAcceptance in daemon
saveTermsAcceptance came back with %@
getAcceptedTermsForAltDSID remote proxy error: %ld
calling getAcceptedTermsForAltDSID in daemon
getAcceptedTermsForAltDSID came back with %@
moveToFederationAllowed remote proxy error: %ld
calling moveToFederationAllowed in daemon
moveToFederationAllowed came back with %@
knownICDPFederations remote proxy error: %ld
calling knownICDPFederations in daemon
knownICDPFederations came back with %@
No code for POSIX error: %s (%d)
Unable to create SecCertificateRef from response data: %@
Error copying escrow trust policy
SecTrustCreateWithCertificates failed: %ld
Error copying root cert array
SecTrustSetAnchorCertificates failed: %ld
SecTrustEvaluateWithError() trust result = %s
SecTrustEvaluate failed: %@
Error extracting public key from certificate
Successfully stored terms
Failed to store terms: %@
cert URL = %@
adding extra cert
failed to create SecCertificate
failed to create cert data
skipping extra cert because terms were not accepted
dropping extra cert, feature is disabled
terms requested with no altDSID
failed to get terms for altDSID %{private}@: %@
invalid request: %@
bad reqVersion (%d) not in [0,2]
non-ckvr only supports reqVersion 0
srp recovery blob too large: %lu bytes
failed to convert srp init response
can't process recovery blob with no username
username could not be converted to cstring
recoveryPassphrase not provided
recoveryPassphrase could not be converted to cstring
unknown reqVersion: %d
srp_challenge_process failed: %d, %@
SecKeyCopyPublicBytes failed
error serializing escrow data: %@
username missing for %@ (dsid %@)
label missing for %@ (dsid %@)
Escrow data too long: %lu
Fail to parse certificate
Could not generate key: %d
could not create priv key: %@
Escrow error encrypting data (spare)
Could not create keys: %@
SecKeyCopyPublicKey() failed
Escrow error encrypting data
could not create local SRP recovery blob
Local SRP verify failed
decodedEscrowRecordFromData: failed to parse packet header
unsupported reqVersion: %d
decodedEscrowRecordFromData: failed to convert
verifycert failed: %@
Error decoding secret
Error deserializing data: %@
ckvr_cylon_process_blob failed
SecKey_cylon_process_blob failed
Server Start Fails (ckvr_srp_server_start_authentication)
Server Start Fails (ccsrp_server_start_authentication)
ckvr_pack_srp_init_resp failed
ckvr_unpack_clubh_recover_req_pkt failed
ckvr_srp_server_verify_session failed
ccses_unpack_clubh_recover_req_pkt failed
ccsrp_server_verify_session failed
clubh_srp_init_resp_t pkt too small: len=%lu
clubh_srp_init_resp_check_hdr failed=%d
clubh_srp_init_resp_t sect %d is malformed
clubh_recover_resp_t pkt too small: len=%lu
clubh_recover_resp_check_hdr failed=%d
clubh_recover_resp_t sect %d is malformed
clubh_recovery_rec_t pkt too small: len=%lu
clubh_recovery_rec_check_hdr failed=%d
clubh_recovery_rec_t sect %d is malformed
clubh_key_escrow_data_t pkt too small: len=%u
clubh_key_escrow_data_check_hdr failed=%d
clubh_key_escrow_data_t sect %d is malformed
clubh_recover_req_pkt_t too small: %lu
clubh_recover_req_pkt_check_hdr failed=%d
clubh_recover_req_pkt_t sect %d is malformed
SRPInit
SRPClientRequest
NSObject
SecureBackupProtocol
SecureBackupConcurrentProtocol
Internal
SecureBackup
NSSecureCoding
NSCoding
SecureBackupBeginPasscodeRequestResults
SecureBackupTermsInfo
NSCopying
SecureBackupEscrowReason
CloudServicesAnalytics
StoredTermsInfo
CloudServicesError
CertOperations
SESWrapper
StringAsReason:
T#,R
T@"NSDictionary",&,N,V_metadata
T@"NSData",&,N,V_certData
T@"NSString",C,N,V_decodedLabel
T@"NSData",&,N,V_iCloudIdentityData
TB,N,V_stingray
T@"NSData",&,V_recoveryBlob
_escrowProxyURL
T@"NSDate",&,N,V_backOffDate
_reason
T@"NSDictionary",&,N,V_escrowRecord
T@"NSDictionary",R,&,N
_storageVersion
T@"NSError",&,N,V_error
altDSID
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
backOffDateWithCompletionBlock:
T@"NSString",&,N,V_countryCode
backupWithInfo:completionBlock:
T@"NSString",&,N,V_expectedFederationID
beginHSA2PasscodeRequest:error:
T@"NSString",&,N,V_metadata
codeForNSError:
T@"NSString",C,N,V_appleID
countryDialCode
T@"NSString",C,N,V_countryCode
dealloc
T@"NSString",C,N,V_dsid
enableWithInfo:completionBlock:
T@"NSString",C,N,V_emcsCred
errorWithCode:error:URL:format:
T@"NSString",C,N,V_escrowProxyURL
initWithFormat:
T@"NSString",C,N,V_hsa2CachedPrerecordUUID
initWithString:
T@"NSString",C,N,V_iCloudPassword
nonViableRepair
T@"NSString",C,N,V_passphrase
release
T@"NSString",C,N,V_recordLabel
sanitizedError:
T@"NSString",C,N,V_recoveryPassphrase
T@"NSString",C,N,V_verificationToken
setCountryCode:
T@"NSString",R,C,N
setRecordLabel:
T@"NSString",R,C,N,V_recordID
setSes:
T@"NSString",R,V_dsid
setValuesForKeysWithDictionary:
T@"NSString",R,V_iCloudEnvironment
T@"NSUUID",R,N,V_activityUUID
useCKVR
T@"SecureBackup",R,&,N,V_sb
version
.cxx_destruct
T@"NSDictionary",&,N,V_emcsDict
T@"EscrowPrerecord",&,N,V_prerecord
T@"NSString",&,N,V_recoveryUUID
T@"NSData",&,N,V_escrowBlob
TB,N,V_emcsMode
T@"NSData",&,N,V_idmsData
T^{ccses_crypto_t=^{ccdigest_info}^{ccdh_gp}^{ccmode_ecb}^{ccmode_ecb}^{ccmode_cbc}^{ccmode_cbc}^{ccrng_state}QQQQ},R,N,V_ccses
T@"NSData",R,V_cert
_iCloudPassword
T@"NSDate",C,N,V_escrowDate
_recoveryResult
T@"NSDictionary",&,N,V_metadataHash
_silent
T@"NSDictionary",R,C,N,V_escrowRecord
_useRecoveryPET
T@"NSNumber",C,N,V_specifiedFederation
appleID
T@"NSString",&,N,V_altDSID
backupWithInfo:
T@"NSString",&,N,V_doubleRecoveryUUID
base64EncodedStringWithOptions:
T@"NSString",&,N,V_icloudVersion
cachePassphrase
T@"NSString",&,N,V_version
copyTo:
T@"NSString",C,N,V_authToken
dataWithLength:
T@"NSString",C,N,V_countryDialCode
enableWithInfo:
T@"NSString",C,N,V_duplicateEncodedMetadata
encodedMetadata
T@"NSString",C,N,V_encodedMetadata
getAccountInfoWithInfo:results:
T@"NSString",C,N,V_fmipUUID
initWithStoredCertificate:uuid:
T@"NSString",C,N,V_iCloudEnv
isProxy
T@"NSString",C,N,V_oldEMCSCred
reasonAsString:
T@"NSString",C,N,V_recordID
rootTrustedVersionsForRootType:altDSID:inEnvironment:duplicate:
T@"NSString",C,N,V_recoveryKey
T@"NSString",C,N,V_smsTarget
setBackOffDate:
T@"NSString",R,C
setOldEMCSCred:
T@"NSString",R,C,N,V_label
setRecoveryKey:
T@"NSString",R,N,V_activityLabel
setSynchronize:
T@"NSString",R,V_escrowFederation
setWithObjects:
T@"NSString",R,V_uuid
stringFromDate:
T@"SESWrapper",&,N,V_ses
usesRecoveryKey
T@"SecureBackupTermsInfo",&,N,V_termsInfo
TB,N
TB,N,V_deleteAll
TB,N,V_deleteDoubleOnly
TB,N,V_excludeiCDPRecords
TB,N,V_fmipRecovery
TB,N,V_icdp
TB,N,V_idmsRecovery
TB,N,V_nonViableRepair
TB,N,V_recoveryPassphraseMutable
TB,N,V_recoveryResult
TB,N,V_silent
TB,N,V_silentDoubleRecovery
TB,N,V_suppressServerFiltering
TB,N,V_synchronize
TB,N,V_useCachedPassphrase
TB,N,V_useRecoveryPET
TB,N,V_usesMultipleiCSC
TB,N,V_usesRandomPassphrase
TB,N,V_usesRecoveryKey
TB,R
TB,R,N
TB,R,N,V_useCKVR
TQ,N,V_storageVersion
TQ,R
T^{ccsrp_ctx=^{ccdigest_info}^{ccdh_gp}^{ccrng_state}{?=b1b1b1b16}[1Q]},R,N,V_srp
T^{ckvr_srp_context=^{ccrng_state}^{ccdigest_info}^{ccmode_cbc}^{ccmode_cbc}^{ccmode_gcm}^{ccmode_gcm}^{ccsrp_ctx}},R,N,V_ckvr
Ti,N,V_reason
Ti,N,V_reqVersion
UTF8String
UUID
UUIDString
_ClassCreateSecureBackupConcurrentConnection
_CreateSecureBackupConnection
_activityLabel
_activityUUID
_altDSID
_appleID
_authToken
_backOffDate
_ccses
_cert
_certData
_ckvr
_countryCode
_countryDialCode
_decodedLabel
_deleteAll
_deleteDoubleOnly
_doubleRecoveryUUID
_dsid
_duplicateEncodedMetadata
_emcsCred
_emcsDict
_emcsMode
_encodedMetadata
_error
_escrowBlob
_escrowDate
_escrowFederation
_escrowRecord
_excludeiCDPRecords
_expectedFederationID
_fmipRecovery
_fmipUUID
_getAcceptedTermsForAltDSID:withError:
_has
_hsa2CachedPrerecordUUID
_iCloudEnv
_iCloudEnvironment
_iCloudIdentityData
_icdp
_icloudVersion
_idmsData
_idmsRecovery
_label
_metadata
_metadataHash
_nonViableRepair
_oldEMCSCred
_passphrase
_prerecord
_queue
_recordID
_recordLabel
_recoveryBlob
_recoveryKey
_recoveryPassphrase
_recoveryPassphraseMutable
_recoveryUUID
_reqVersion
_ses
_silentDoubleRecovery
_smsTarget
_specifiedFederation
_srp
_stingray
_suppressServerFiltering
_synchronize
_termsInfo
_useCKVR
_useCachedPassphrase
_usesMultipleiCSC
_usesRandomPassphrase
_usesRecoveryKey
_uuid
_verificationToken
_version
activityLabel
activityUUID
addBarrierBlock:
addObject:
addObjectsFromArray:
allObjects
allocWithZone:
arrayWithObjects:count:
asyncRequestEscrowRecordUpdate
authToken
autorelease
backOffDate
backOffDateWithInfo:completionBlock:
backOffDateWithRequest:reply:
backupWithInfo:reply:
beginHSA2PasscodeRequest:desirePasscodeImmediately:uuid:reason:reply:
beginHSA2PasscodeRequest:uuid:error:
beginHSA2PasscodeRequest:uuid:reason:error:
bytes
cStringUsingEncoding:
cachePassphraseWithCompletionBlock:
cachePassphraseWithInfo:
cachePassphraseWithInfo:completionBlock:
cachePassphraseWithRequest:reply:
cachePassphraseWithRequestAsync:
cacheRecoveryKeyWithCompletionBlock:
cacheRecoveryKeyWithRequest:reply:
ccses
cert
certData
certVersion:
changeSMSTargetWithCompletionBlock:
changeSMSTargetWithError:
changeSMSTargetWithInfo:
changeSMSTargetWithInfo:completionBlock:
changeSMSTargetWithRequest:reply:
ckvr
class
code
codeForErrno:
conformsToProtocol:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
countryCode
createICDPRecordWithContents:reply:
createICDPRecordWithRequest:recordContents:reply:
daemonPasscodeRequestOpinion:
data
dataWithBytes:length:
dataWithPropertyList:format:options:error:
databasePath
date
debugDescription
decodeBoolForKey:
decodeObjectOfClass:forKey:
decodePropertyListForKey:
decodedEscrowRecordFromData:stingray:env:duplicate:
decodedLabel
defaultAnalyticsDatabasePath:
defaultStore
deleteAll
deleteDoubleOnly
description
dictionary
dictionaryRepresentation
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
disableWithCompletionBlock:
disableWithError:
disableWithInfo:
disableWithInfo:completionBlock:
disableWithRequest:reply:
domain
doubleRecoveryUUID
dsid
duplicateEncodedMetadata
emcsCred
emcsDict
emcsMode
enableWithCompletionBlock:
enableWithError:
enableWithRequest:reply:
encodeBool:forKey:
encodeObject:forKey:
encodeWithCoder:
encodedEscrowRecordWithPublicKey:error:
error
errorForNSError:path:format:
errorWithCode:URL:format:
errorWithCode:error:format:
errorWithCode:format:
errorWithDomain:code:format:
errorWithDomain:code:userInfo:
escrowBaseURL
escrowBlob
escrowCertificate
escrowDate
escrowFederation
escrowProxyURL
escrowRecord
excludeiCDPRecords
expectedFederationID
fetchTermsWithAltDSID:reply:
firstObject
fmipRecovery
fmipUUID
getAcceptedTermsForAltDSID:reply:
getAcceptedTermsForAltDSID:withError:
getAccountInfoWithError:
getAccountInfoWithInfo:completionBlock:
getAccountInfoWithInfo:completionBlockWithResults:
getAccountInfoWithRequest:reply:
getAccountInfoWithResults:
getAllAcceptedTermsWithError:
getCertificates:
getCertificatesWithRequest:reply:
getCountrySMSCodesWithInfo:completionBlockWithResults:
getCountrySMSCodesWithRequest:reply:
getCountrySMSCodesWithResults:
hasAltDSID
hasCountryCode
hasExpectedFederationID
hasIcloudVersion
hasMetadata
hasReason
hasStorageVersion
hasTermsInfo
hasVersion
hash
hsa2CachedPrerecordUUID
iCloudEnv
iCloudEnvironment
iCloudIdentityData
iCloudPassword
icdp
icloudVersion
idmsData
idmsRecovery
init
initFileURLWithPath:isDirectory:
initWithBytes:length:
initWithBytes:length:encoding:
initWithCapacity:
initWithCoder:
initWithContentsOfURL:
initWithDSID:escrowRecordContents:recoveryPassphrase:recordID:recordLabel:
initWithDSID:escrowRecordContents:recoveryPassphrase:recordID:recordLabel:ckvrFlag:reqVersion:
initWithData:
initWithFormat:arguments:
initWithMachServiceName:options:
initWithRequest:
initWithRequest:ckvrFlag:reqVersion:
initWithRequest:reqVersion:
initWithSecureBackup:
initWithUTF8String:
initWithUUIDBytes:
initWithUserActivityLabel:
integerValue
interfaceWithProtocol:
invalidate
isEqual:
isEqualToNumber:
isEqualToString:
isKindOfClass:
isMemberOfClass:
isRecoveryKeySet:
isRecoveryKeySetInDaemon:
knownICDPFederations
knownICDPFederations:
label
length
logHardFailureForEventNamed:withAttributes:
logSuccessForEvent:
logSuccessForEventNamed:
logUnrecoverableError:forEvent:withAttributes:
logger
mergeFrom:
metadata
metadataHash
moveToFederationAllowed:altDSID:
moveToFederationAllowed:altDSID:error:
moveToFederationAllowed:altDSID:reply:
mutableBytes
mutableCopy
needPasscodeForHSA2EscrowRecordUpdate:
notificationInfo:
notificationInfoWithReply:
numberWithInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
oldEMCSCred
passphrase
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
populateWithInfo:
posixDateFormatter
prepareHSA2EscrowRecordContents:reply:
prepareHSA2EscrowRecordContents:usesComplexPassphrase:reply:
prerecord
processInfo
processName
propertyListWithData:options:format:error:
queue
readFrom:
reason
recordID
recordLabel
recoverRecordContents:
recoverRecordContentsWithRequest:reply:
recoverSilentWithCDPContext:allRecords:error:
recoverSilentWithCDPContextInDaemon:allRecords:reply:
recoverWithCDPContext:escrowRecord:error:
recoverWithCDPContextInDaemon:escrowRecord:reply:
recoverWithError:
recoverWithInfo:completionBlock:
recoverWithInfo:completionBlockWithResults:
recoverWithInfo:results:
recoverWithRequest:reply:
recoverWithResults:
recoveryBlob
recoveryKey
recoveryPassphrase
recoveryPassphraseMutable
recoveryResponseForBlob:
recoveryResult
recoveryUUID
remoteObjectProxy
remoteObjectProxyWithErrorHandler:
removeObjectForKey:
reqVersion
requiresDoubleEnrollment
respondsToSelector:
restoreKeychainAsyncWithPassword:keybagDigest:haveBottledPeer:viewsNotToBeRestored:error:
restoreKeychainAsyncWithPasswordInDaemon:keybagDigest:haveBottledPeer:viewsNotToBeRestored:reply:
restoreKeychainWithBackupPassword:error:
restoreKeychainWithBackupPasswordInDaemon:reply:
resume
retain
retainCount
rootBaseVersionsForRootType:altDSID:inEnvironment:duplicate:
rootCurrentVersionForRootType:altDSID:inEnvironment:
saveTermsAcceptance:reply:
scanUnsignedLongLong:
secureBackupDate
self
setAltDSID:
setAppleID:
setAuthToken:
setBackOffDateWithCompletionBlock:
setBackOffDateWithInfo:completionBlock:
setBackOffDateWithRequest:reply:
setCertData:
setClasses:forSelector:argumentIndex:ofReply:
setCountryDialCode:
setDecodedLabel:
setDeleteAll:
setDeleteDoubleOnly:
setDoubleRecoveryUUID:
setDsid:
setDuplicateEncodedMetadata:
setEmcsCred:
setEmcsDict:
setEmcsMode:
setEncodedMetadata:
setError:
setEscrowBlob:
setEscrowDate:
setEscrowProxyURL:
setEscrowRecord:
setExcludeiCDPRecords:
setExpectedFederationID:
setFmipRecovery:
setFmipUUID:
setHasReason:
setHasStorageVersion:
setHsa2CachedPrerecordUUID:
setICloudEnv:
setICloudIdentityData:
setICloudPassword:
setIcdp:
setIcloudVersion:
setIdmsData:
setIdmsRecovery:
setMetadata:
setMetadataHash:
setNonViableRepair:
setObject:forKey:
setObject:forKeyedSubscript:
setPassphrase:
setPrerecord:
setQueue:
setReason:
setRecordID:
setRecoveryBlob:
setRecoveryPassphrase:
setRecoveryPassphraseMutable:
setRecoveryResult:
setRecoveryUUID:
setRemoteObjectInterface:
setReqVersion:
setSilent:
setSilentDoubleRecovery:
setSmsTarget:
setSpecifiedFederation:
setStingray:
setStorageVersion:
setString:forKey:
setSuppressServerFiltering:
setTermsInfo:
setUseCachedPassphrase:
setUseRecoveryPET:
setUsesMultipleiCSC:
setUsesRandomPassphrase:
setUsesRecoveryKey:
setVerificationToken:
setVersion:
setWithArray:
setWithObject:
silent
silentDoubleRecovery
smsTarget
specifiedFederation
srpInitBlob
srpInitNonce
srpKeySize
srpPublicKeySize
srpRecoveryBlobFromData:error:
srpRecoveryBlobFromSRPInitResponse:
srpRecoveryBlobFromSRPInitResponse:error:
srpRecoveryUpdateDSID:recoveryPassphrase:
srpResponseForEscrowBlob:withKey:withFullCCKey:
startSMSChallengeWithError:
startSMSChallengeWithInfo:completionBlock:
startSMSChallengeWithInfo:completionBlockWithResults:
startSMSChallengeWithInfo:results:
startSMSChallengeWithRequest:reply:
startSMSChallengeWithResults:
stashRecoveryDataWithCompletionBlock:
stashRecoveryDataWithInfo:completionBlock:
stashRecoveryDataWithRequest:reply:
stateCaptureWithCompletionBlock:
stateCaptureWithReply:
stingray
storageVersion
storeTerms:withAltDSID:reply:
stringForKey:
stringWithFormat:
superclass
supportsSecureCoding
suppressServerFiltering
synchronize
synchronousRemoteObjectProxyWithErrorHandler:
termsInfo
uncachePassphrase
uncachePassphraseWithCompletionBlock:
uncachePassphraseWithInfo:
uncachePassphraseWithInfo:completionBlock:
uncachePassphraseWithRequest:reply:
uncachePassphraseWithRequestAsync:
uncacheRecoveryKeyWithCompletionBlock:
uncacheRecoveryKeyWithRequest:reply:
unsignedLongLongValue
updateMetadataWithCompletionBlock:
updateMetadataWithError:
updateMetadataWithInfo:
updateMetadataWithInfo:completionBlock:
updateMetadataWithRequest:reply:
useCachedPassphrase
useRecoveryPET
userInfo
usesMultipleiCSC
usesRandomPassphrase
uuid
validateInput
verificationToken
verifyCertData:withCert:withPubKey:stingray:enroll:altDSID:env:duplicate:sigVerification:error:
writeTo:
zone
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSError"16@0:8
@"NSDictionary"16@0:8
@24@0:8@16
v24@0:8@16
v16@0:8
@"NSString"
@"NSDictionary"
@"SecureBackup"
v32@0:8@16@?24
v40@0:8@16@24@?32
v24@0:8@?16
v52@0:8@16@24B32@36@?44
v36@0:8@16B24@?28
v52@0:8@16B24@28@36@?44
v32@0:8@"SecureBackup"16@?<v@?@"NSDictionary"@"NSError">24
v32@0:8@"SecureBackup"16@?<v@?@"NSError">24
v40@0:8@"OTICDPRecordContext"16@"OTEscrowRecord"24@?<v@?@"NSDictionary"@"NSError">32
v40@0:8@"OTICDPRecordContext"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v24@0:8@?<v@?B@"NSError">16
v52@0:8@"NSData"16@"NSData"24B32@"NSSet"36@?<v@?@"NSError">44
v32@0:8@"NSData"16@?<v@?B@"NSError">24
v24@0:8@"SecureBackup"16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v36@0:8@"SecureBackup"16B24@?<v@?@"NSError">28
v52@0:8@"SecureBackup"16B24@"NSString"28@"SecureBackupEscrowReason"36@?<v@?@"SecureBackupBeginPasscodeRequestResults"@"NSError">44
v40@0:8@"SecureBackup"16@"NSDictionary"24@?<v@?@"NSError">32
v32@0:8@"SecureBackup"16@?<v@?@"NSDictionary"@"NSData"@"NSData"@"NSError">24
v24@0:8@?<v@?I@"NSError">16
v32@0:8@"SecureBackupTermsInfo"16@?<v@?@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?B@"NSError">32
v24@0:8@?<v@?@"NSArray"@"NSError">16
I24@0:8^@16
@32@0:8@16^@24
@24@0:8^@16
B40@0:8@16@24^@32
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
B24@0:8^@16
@40@0:8@16@24^@32
v52@0:8@16@24B32@36^@44
B32@0:8@16^@24
v32@0:8@16@24
v28@0:8B16@?20
@28@0:8B16^@20
@36@0:8B16@20^@28
@44@0:8B16@20@28^@36
v20@0:8B16
@"NSDate"
@"NSData"
@"NSNumber"
@"NSObject<OS_dispatch_queue>"
@"NSError"
@"NSUUID"
@"EscrowPrerecord"
@"SESWrapper"
@32@0:8@16@24
@24@0:8^{_NSZone=}16
i16@0:8
v20@0:8i16
@20@0:8i16
i24@0:8@16
{?="reason"b1}
v40@0:8@16@24@32
v24@0:8Q16
@"SecureBackupTermsInfo"
{?="storageVersion"b1}
q24@0:8@16
q24@0:8q16
@32@0:8q16@24
@40@0:8q16@24@32
@48@0:8q16@24@32@40
@40@0:8@16q24@32
@40@0:8@16@24@32
@24@0:8^{__SecCertificate=}16
@40@0:8I16@20@28B36
@36@0:8I16@20@28
B80@0:8@16^^{__SecCertificate}24^^{__SecKey}32B40B44@48@56B64B68^@72
B32@0:8@16@24
@28@0:8@16i24
@32@0:8@16B24i28
@56@0:8@16@24@32@40@48
@64@0:8@16@24@32@40@48B56i60
@32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16^@24
@40@0:8@16B24@28B36
@40@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24^{ccrsa_full_ctx=QQ^{cczp_funcs}[0Q]}32
^{ccses_crypto_t=^{ccdigest_info}^{ccdh_gp}^{ccmode_ecb}^{ccmode_ecb}^{ccmode_cbc}^{ccmode_cbc}^{ccrng_state}QQQQ}16@0:8
^{ccsrp_ctx=^{ccdigest_info}^{ccdh_gp}^{ccrng_state}{?=b1b1b1b16}[1Q]}16@0:8
^{ckvr_srp_context=^{ccrng_state}^{ccdigest_info}^{ccmode_cbc}^{ccmode_cbc}^{ccmode_gcm}^{ccmode_gcm}^{ccsrp_ctx}}16@0:8
^{ccses_crypto_t=^{ccdigest_info}^{ccdh_gp}^{ccmode_ecb}^{ccmode_ecb}^{ccmode_cbc}^{ccmode_cbc}^{ccrng_state}QQQQ}
^{ccsrp_ctx=^{ccdigest_info}^{ccdh_gp}^{ccrng_state}{?=b1b1b1b16}[1Q]}
^{ckvr_srp_context=^{ccrng_state}^{ccdigest_info}^{ccmode_cbc}^{ccmode_cbc}^{ccmode_gcm}^{ccmode_gcm}^{ccsrp_ctx}}
@(#)PROGRAM:CloudServices  PROJECT:CloudServices-529.102.1
0y10
2001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
201215014118Z
301215014105Z0y10
2001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
S dP
LH x
'ciB
l7D3m
c0a0
'xl}
j@Vn
viZ`8
z!7h
0y10
4001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
210719213727Z
300719213727Z0y10
4001
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
X"4t
vK26
c0a0
}oZko
y|ud0
4RB?
2gZ
B6<'
0y10
3101
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
210921193841Z
310921192919Z0y10
3101
Apple Inc.1&0$
Apple Certification Authority1
Escrow Service Root CA0
}buH
u1$s
fd>o
#oXt
c0a0
-Iv3
-Iv3
Ef6G
YiZJ
ZJ)<
v8@?0
com.apple.sbd
signpost
com.apple.sbd.passcode_request
activityLabel
activityUUID
%@: %@
unknown activity
v16@?0@"NSError"8
no error
v24@?0@"NSDictionary"8@"NSError"16
-[SecureBackup getAccountInfoWithError:]
-[SecureBackup updateMetadataWithError:]
-[SecureBackup enableWithError:]
-[SecureBackup recoverWithError:]
-[SecureBackup recoverWithCDPContext:escrowRecord:error:]
-[SecureBackup recoverSilentWithCDPContext:allRecords:error:]
-[SecureBackup isRecoveryKeySet:]
v20@?0B8@"NSError"12
-[SecureBackup restoreKeychainAsyncWithPassword:keybagDigest:haveBottledPeer:viewsNotToBeRestored:error:]
-[SecureBackup restoreKeychainWithBackupPassword:error:]
-[SecureBackup disableWithError:]
-[SecureBackup startSMSChallengeWithError:]
-[SecureBackup changeSMSTargetWithError:]
-[SecureBackup backupWithInfo:]
-[SecureBackup prepareHSA2EscrowRecordContents:reply:]
+[SecureBackup daemonPasscodeRequestOpinion:]
v20@?0I8@"NSError"12
-[SecureBackup beginHSA2PasscodeRequest:uuid:reason:error:]
v24@?0@"SecureBackupBeginPasscodeRequestResults"8@"NSError"16
v40@?0@"NSDictionary"8@"NSData"16@"NSData"24@"NSError"32
CloudServices
ForceCyrus
DoubleEnrollment
v24@?0@"NSArray"8@"NSError"16
getAccountInfo (legacy API)
enable (legacy API)
recover (legacy API)
disable (legacy API)
updateMetadata (legacy API)
backOffDate (legacy API)
setBackOffDate (legacy API)
stateCapture (legacy API)
<SBBPRR: %@ %@ %@ %@ %@>
iCloudEnvironment
escrowFederation
cert
dsid
%@ %@
version
icloudVersion
countryCode
metadata
altDSID
com.apple.SecureBackupDaemon
com.apple.SecureBackupDaemon.concurrent
CKPrettyError
CKRecordID
NSArray
NSData
NSDate
NSDictionary
NSError
NSNull
NSNumber
NSOrderedSet
NSSet
NSString
NSURL
reason
expectedFederationID
UNKNOWN
FEDERATION_MOVE
(unknown: %i)
errorDomain
errorCode
CloudServicesAnalytics
SecureBackupPassphrase
countryISOCode
countryDialCode
SecureBackupSMSTarget
phoneNumber
SecureBackupSynchronize
SecureBackupCountrySMSCodes
SecureBackupVerifcationToken
SecureBackupUseCachedPassphrase
SecureBackupHSA2CachedPrerecordUUID
SecureBackupSpecifiedFederation
SecureBackupNewPassphrase
SecureBackupMetadata
ClientMetadata
SecureBackupStingrayMetadataHash
SecureBackupStingrayMetadata
SecureBackupEscrowTimestamp
SecureBackupEscrowDate
SecureBackupStingrayEscrowTimestamp
SecureBackupEscrowDigest
SecureBackupStingrayEscrowDigest
SecureBackupAuthenticationAppleID
SecureBackupAuthenticationPassword
SecureBackupAuthenticationAuthToken
SecureBackupAuthenticationEscrowProxyURL
SecureBackupAuthenticationDSID
SecureBackupAuthenticationiCloudEnvironment
SecureBackupRemainingAttempts
SecureBackupCoolOffEnd
SecureBackupRecoveryStatus
SecureBackupTriggerUpdate
SecureBackupNotification
SecureBackupRecoveryKey
SecureBackupUsesRandomPassphrase
SecureBackupUsesComplexPassphrase
SecureBackupUsesNumericPassphrase
SecureBackupNumericPassphraseLength
SecureBackupEnabled
SecureBackupAccountIsHighSecurity
SecureBackupRecoveryRequiresVerificationToken
SecureBackupRecoveryVerificationTokenLength
SecureBackupServiceAccountInfo
SecureBackupLastBackupTimestamp
SecureBackupLastBackupDate
SecureBackupEscrowTrustStatus
recordStatus
recordID
peerInfo
peerInfoSerialNumber
osVersion
SecureBackupiCDPRecords
SecureBackupAlliCDPRecords
label
SecureBackupDoubleEnrollmentRecordIDs
escrowedSPKI
bottleID
bottleValid
serial
build
valid
invalid
SecureBackupErrorDomain
EscrowServiceErrorDomain
areaDialCode
deviceType
deviceId
SecureBackupiCloudIdentityData
SecureBackupIDMSData
SecureBackupIDMSRecovery
SecureBackupFMiPDataKey
SecureBackupFMiPUUIDKey
SecureBackupFMiPRecoveryKey
SecureBackupEMCSIDMSDict
SecureBackupEMCSManagedCredential
SecureBackupEMCSOldManagedCredential
SecureBackupContainsiCloudIdentity
SecureBackupUsesMultipleiCSCs
SecureBackupUsesRecoveryKey
SecureBackupSilentRecoveryAttempt
SecureBackupContainsiCDPData
SecureBackupContainsEMCSData
SecureBackupiCloudDataProtectionDeleteAllRecords
SecureBackupBackOffDate
SecureBackupiCloudIdentityPublicData
CloudServicesErrorDomain
CloudServicesRetryAfter
SecureBackupSuppressServerFiltering
SecureBackupSilentDoubleRecovery
SecureBackupDeleteDoubleOnly
SecureBackupNonViableRepairKey
EscrowServiceEscrowData
BackupKeybagDigest
BackupBagPassword
SecureBackupExcludeiCDPRecords
CKVR_SRP_SALT_LEN %d != packet_salt_len %zu
hsm_id_len %zu not in (0,%d)
unpack_srp_init_resp_rec failed
ccses->salt_len %d != salt_len %zd
pack_srp_recovery_rec failed
storageVersion
termsInfo
clubh_key_escrow_data_t pkt too small: len=%u
clubh_key_escrow_data_check_hdr failed=%d
clubh_key_escrow_data_t sect %d is malformed
pki_size %zd < B_len %zd
pki_size %zd > B_len %zd
ccses_unpack_srp_init_resp_rec failed
ccses->salt_len %zd != salt_len %zd
ccsrp_client_process_challenge failed: %d
ccses_pack_srp_recovery_rec failed
com.apple.protectedcloudstorage.record
SecureBackupTerms
Issuer Name
value
2.5.4.5
Error creating SecCertificateRef
Error copying escrow trust policy
Error copying root cert array
true
false
Unable to extract public key
unknown error
Unable to find terms in keychain
DoubleEnrollment attempted, but ForceCyrus is enabled
PROD
/AppleInternal/Library/CloudServices/iCloudDevCert150.der
/AppleInternal/Library/CloudServices/iCloudDevCert152.der
/AppleInternal/Library/CloudServices/iCloudDevCert.der
Security
OctagonEscrowMove
UseCKVR
srp recovery blob too large: %lu bytes
failed to convert srp init response
can't process recovery blob with no username
username could not be converted to cstring
recoveryPassphrase not provided
recoveryPassphrase could not be converted to cstring
v16@?0r*8
Username missing
%@.%@
label missing
Escrow data too long
Fail to parse certificate
Escrow error encrypting data
Could not generate key
failed to extra bytes of priv key
failed to create data buffer
cannot create key
Escrow error encrypting data (spare)
Could not create keys
SecKeyCopyPublicKey() failed
Local SRP verify failed
could not create local SRP recovery blob
creating connection to sbd: uid %d, progname %s
sbd connection created
New SecureBackup object: %@ %@
Deserialized SecureBackup object: %@ %@
getAccountInfoWithRequest remote proxy error: %ld
calling getAccountInfoWithRequest in daemon
getAccountInfoWithRequest in daemon came back with %@
enableWithRequest remote proxy error: %ld
 enableTelemetry=YES 
EnableWithRequest
BEGIN [%lld]: EnableWithRequest  enableTelemetry=YES 
calling enableWithRequest in daemon
 CloudServicesSignpostNameEnableWithRequest=%{public,signpost.telemetry:number1,name=CloudServicesSignpostNameEnableWithRequest}d 
END [%lld] %fs: EnableWithRequest  CloudServicesSignpostNameEnableWithRequest=%{public,signpost.telemetry:number1,name=CloudServicesSignpostNameEnableWithRequest}d 
enableWithRequest in daemon came back with %@
recoverWithRequest remote proxy error: %ld
calling recoverWithRequest in daemon
recoverWithRequest came back with %@
recoverRecordContentsWithRequest remote proxy error: %ld
calling recoverRecordContents in daemon
recoverRecordContents came back with %@
createICDPRecord remote proxy error: %ld
calling createICDPRecord in daemon
createICDPRecord came back with %@
disableWithRequest remote proxy error: %ld
calling disableWithRequest in daemon
disableWithRequest came back with %@
stashRecoveryDataWithRequest remote proxy error: %ld
calling stashRecoveryDataWithRequest in daemon
stashRecoveryDataWithRequest came back with %@
updateMetadata remote proxy error: %ld
calling updateMetadata in daemon
updateMetadata came back with %@
invalidating connection
calling cachePassphraseWithRequestAsync in daemon
cachePassphraseWithRequest remote proxy error: %ld
calling cachePassphraseWithRequest in daemon
uncachePassphraseWithRequest remote proxy error: %ld
calling uncachePassphraseWithRequest in daemon
cacheRecoveryKeyWithRequest remote proxy error: %ld
calling cacheRecoveryKeyWithRequest in daemon
uncacheRecoveryKeyWithRequest remote proxy error: %ld
calling uncachePassphraseWithRequestAsync in daemon
startSMSChallengeWithRequest remote proxy error: %ld
calling startSMSChallengeWithRequest in daemon
startSMSChallengeWithRequest came back with %@
getCountrySMSCodesWithRequest remote proxy error: %ld
calling getCountrySMSCodesWithRequest in daemon
getCountrySMSCodesWithRequest came back with %@
changeSMSTargetWithRequest remote proxy error: %ld
calling changeSMSTargetWithRequest in daemon
changeSMSTargetWithRequest came back with %@
backupWithInfo remote proxy error: %ld
calling backupWithInfo in daemon
backupWithInfo came back with %@
backOffDateWithRequest remote proxy error: %ld
calling backOffDateWithRequest in daemon
backOffDateWithRequest came back with %@
setBackOffDateWithRequest remote proxy error: %ld
calling setBackOffDateWithRequest in daemon
setBackOffDateWithRequest came back with %@
notificationInfoWithReply remote proxy error: %ld
calling notificationInfo in daemon
notificationInfo came back with %@
stateCaptureWithReply remote proxy error: %ld
calling stateCapture in daemon
stateCapture came back with %@
calling %s from the main thread
getAccountInfoWithRequest came back with %@
updateMetadataWithRequest remote proxy error: %ld
calling updateMetadataWithRequest in daemon
updateMetadataWithRequest came back with %@
enableWithRequest came back with %@
recoverWithCDPContext: invoked escrow recovery with escrowRecord: %@
recoverWithCDPContext: remote proxy error: %ld
calling recoverWithCDPContextInDaemon in daemon
recoverWithCDPContextInDaemon came back with %@
recoverSilentWithCDPContext: invoked silent escrow recovery with records: %@
recoverSilentWithCDPContextAndRecords: remote proxy error: %ld
calling recoverSilentWithCDPContextInDaemon in daemon
recoverSilentWithCDPContextInDaemon came back with %@
isRecoveryKeySet: invoked
isRecoveryKeySet: remote proxy error: %ld
calling isRecoveryKeySetInDaemon in daemon
isRecoveryKeySetInDaemon came back with %@
restoreKeychainAsyncWithPassword: invoked
restoreKeychainAsyncWithPassword: remote proxy error: %ld
calling restoreKeychainAsyncWithPassword in daemon
restoreKeychainAsyncWithPasswordInDaemon came back with %@
restoreKeychainWithBackupPassword: invoked
restoreKeychainWithBackupPassword: remote proxy error: %ld
calling restoreKeychainWithBackupPassword in daemon
restoreKeychainWithBackupPassword came back with %@
prepareHSA2EscrowRecordContents remote proxy error: %ld
calling prepareHSA2EscrowRecordContents in daemon
prepareHSA2EscrowRecordContents came back with %@
initial state fetch completed with: %d %@
unable to fetch passcode_request token
unable to fetch state of passcode_request token (%d)
do initial state fetch in the background
No need for passcode
daemon unable to determine passcode status due to keybag lock; relying on dispatch state
unable to ask daemon for confirmation of passcode request: %@
daemon believes there's no need for a passcode
Need password on next unlock
Desire password when available
Dispatch doesn't have a state for us yet, opportunistically asking for the password
unknown passcode request state: %llu
daemonPasscodeRequestOpinion remote proxy error: %ld
calling daemonPasscodeRequestOpinion in daemon
daemonPasscodeRequestOpinion came back with %@
beginHSA2PasscodeRequest remote proxy error: %ld
calling beginHSA2PasscodeRequest in daemon
beginHSA2PasscodeRequest came back with %@
getCertificatesWithRequest remote proxy error: %ld
calling getCertificatesWithRequest in daemon
saveTermsAcceptance remote proxy error: %ld
calling saveTermsAcceptance in daemon
saveTermsAcceptance came back with %@
getAcceptedTermsForAltDSID remote proxy error: %ld
calling getAcceptedTermsForAltDSID in daemon
getAcceptedTermsForAltDSID came back with %@
moveToFederationAllowed remote proxy error: %ld
calling moveToFederationAllowed in daemon
moveToFederationAllowed came back with %@
knownICDPFederations remote proxy error: %ld
calling knownICDPFederations in daemon
knownICDPFederations came back with %@
No code for POSIX error: %s (%d)
Unable to create SecCertificateRef from response data: %@
Error copying escrow trust policy
SecTrustCreateWithCertificates failed: %ld
Error copying root cert array
SecTrustSetAnchorCertificates failed: %ld
SecTrustEvaluateWithError() trust result = %s
SecTrustEvaluate failed: %@
Error extracting public key from certificate
Successfully stored terms
Failed to store terms: %@
cert URL = %@
adding extra cert
failed to create SecCertificate
failed to create cert data
skipping extra cert because terms were not accepted
dropping extra cert, feature is disabled
terms requested with no altDSID
failed to get terms for altDSID %{private}@: %@
invalid request: %@
bad reqVersion (%d) not in [0,2]
non-ckvr only supports reqVersion 0
srp recovery blob too large: %lu bytes
failed to convert srp init response
can't process recovery blob with no username
username could not be converted to cstring
recoveryPassphrase not provided
recoveryPassphrase could not be converted to cstring
unknown reqVersion: %d
srp_challenge_process failed: %d, %@
SecKeyCopyPublicBytes failed
error serializing escrow data: %@
username missing for %@ (dsid %@)
label missing for %@ (dsid %@)
Escrow data too long: %lu
Fail to parse certificate
Could not generate key: %d
could not create priv key: %@
Escrow error encrypting data (spare)
Could not create keys: %@
SecKeyCopyPublicKey() failed
Escrow error encrypting data
could not create local SRP recovery blob
Local SRP verify failed
decodedEscrowRecordFromData: failed to parse packet header
unsupported reqVersion: %d
decodedEscrowRecordFromData: failed to convert
verifycert failed: %@
Error decoding secret
Error deserializing data: %@
ckvr_cylon_process_blob failed
SecKey_cylon_process_blob failed
Server Start Fails (ckvr_srp_server_start_authentication)
Server Start Fails (ccsrp_server_start_authentication)
ckvr_pack_srp_init_resp failed
ckvr_unpack_clubh_recover_req_pkt failed
ckvr_srp_server_verify_session failed
ccses_unpack_clubh_recover_req_pkt failed
ccsrp_server_verify_session failed
clubh_srp_init_resp_t pkt too small: len=%lu
clubh_srp_init_resp_check_hdr failed=%d
clubh_srp_init_resp_t sect %d is malformed
clubh_recover_resp_t pkt too small: len=%lu
clubh_recover_resp_check_hdr failed=%d
clubh_recover_resp_t sect %d is malformed
clubh_recovery_rec_t pkt too small: len=%lu
clubh_recovery_rec_check_hdr failed=%d
clubh_recovery_rec_t sect %d is malformed
clubh_key_escrow_data_t pkt too small: len=%u
clubh_key_escrow_data_check_hdr failed=%d
clubh_key_escrow_data_t sect %d is malformed
clubh_recover_req_pkt_t too small: %lu
clubh_recover_req_pkt_check_hdr failed=%d
clubh_recover_req_pkt_t sect %d is malformed
SRPInit
SRPClientRequest
NSObject
SecureBackupProtocol
SecureBackupConcurrentProtocol
Internal
SecureBackup
NSSecureCoding
NSCoding
SecureBackupBeginPasscodeRequestResults
SecureBackupTermsInfo
NSCopying
SecureBackupEscrowReason
CloudServicesAnalytics
StoredTermsInfo
CloudServicesError
CertOperations
SESWrapper
StringAsReason:
T#,R
T@"NSDictionary",&,N,V_metadata
T@"NSData",&,N,V_certData
T@"NSString",C,N,V_decodedLabel
T@"NSData",&,N,V_iCloudIdentityData
TB,N,V_stingray
T@"NSData",&,V_recoveryBlob
_escrowProxyURL
T@"NSDate",&,N,V_backOffDate
_reason
T@"NSDictionary",&,N,V_escrowRecord
T@"NSDictionary",R,&,N
_storageVersion
T@"NSError",&,N,V_error
altDSID
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
backOffDateWithCompletionBlock:
T@"NSString",&,N,V_countryCode
backupWithInfo:completionBlock:
T@"NSString",&,N,V_expectedFederationID
beginHSA2PasscodeRequest:error:
T@"NSString",&,N,V_metadata
codeForNSError:
T@"NSString",C,N,V_appleID
countryDialCode
T@"NSString",C,N,V_countryCode
dealloc
T@"NSString",C,N,V_dsid
enableWithInfo:completionBlock:
T@"NSString",C,N,V_emcsCred
errorWithCode:error:URL:format:
T@"NSString",C,N,V_escrowProxyURL
initWithFormat:
T@"NSString",C,N,V_hsa2CachedPrerecordUUID
initWithString:
T@"NSString",C,N,V_iCloudPassword
nonViableRepair
T@"NSString",C,N,V_passphrase
release
T@"NSString",C,N,V_recordLabel
sanitizedError:
T@"NSString",C,N,V_recoveryPassphrase
T@"NSString",C,N,V_verificationToken
setCountryCode:
T@"NSString",R,C,N
setRecordLabel:
T@"NSString",R,C,N,V_recordID
setSes:
T@"NSString",R,V_dsid
setValuesForKeysWithDictionary:
T@"NSString",R,V_iCloudEnvironment
T@"NSUUID",R,N,V_activityUUID
useCKVR
T@"SecureBackup",R,&,N,V_sb
version
.cxx_destruct
T@"NSDictionary",&,N,V_emcsDict
T@"EscrowPrerecord",&,N,V_prerecord
T@"NSString",&,N,V_recoveryUUID
T@"NSData",&,N,V_escrowBlob
TB,N,V_emcsMode
T@"NSData",&,N,V_idmsData
T^{ccses_crypto_t=^{ccdigest_info}^{ccdh_gp}^{ccmode_ecb}^{ccmode_ecb}^{ccmode_cbc}^{ccmode_cbc}^{ccrng_state}QQQQ},R,N,V_ccses
T@"NSData",R,V_cert
_iCloudPassword
T@"NSDate",C,N,V_escrowDate
_recoveryResult
T@"NSDictionary",&,N,V_metadataHash
_silent
T@"NSDictionary",R,C,N,V_escrowRecord
_useRecoveryPET
T@"NSNumber",C,N,V_specifiedFederation
appleID
T@"NSString",&,N,V_altDSID
backupWithInfo:
T@"NSString",&,N,V_doubleRecoveryUUID
base64EncodedStringWithOptions:
T@"NSString",&,N,V_icloudVersion
cachePassphrase
T@"NSString",&,N,V_version
copyTo:
T@"NSString",C,N,V_authToken
dataWithLength:
T@"NSString",C,N,V_countryDialCode
enableWithInfo:
T@"NSString",C,N,V_duplicateEncodedMetadata
encodedMetadata
T@"NSString",C,N,V_encodedMetadata
getAccountInfoWithInfo:results:
T@"NSString",C,N,V_fmipUUID
initWithStoredCertificate:uuid:
T@"NSString",C,N,V_iCloudEnv
isProxy
T@"NSString",C,N,V_oldEMCSCred
reasonAsString:
T@"NSString",C,N,V_recordID
rootTrustedVersionsForRootType:altDSID:inEnvironment:duplicate:
T@"NSString",C,N,V_recoveryKey
T@"NSString",C,N,V_smsTarget
setBackOffDate:
T@"NSString",R,C
setOldEMCSCred:
T@"NSString",R,C,N,V_label
setRecoveryKey:
T@"NSString",R,N,V_activityLabel
setSynchronize:
T@"NSString",R,V_escrowFederation
setWithObjects:
T@"NSString",R,V_uuid
stringFromDate:
T@"SESWrapper",&,N,V_ses
usesRecoveryKey
T@"SecureBackupTermsInfo",&,N,V_termsInfo
TB,N
TB,N,V_deleteAll
TB,N,V_deleteDoubleOnly
TB,N,V_excludeiCDPRecords
TB,N,V_fmipRecovery
TB,N,V_icdp
TB,N,V_idmsRecovery
TB,N,V_nonViableRepair
TB,N,V_recoveryPassphraseMutable
TB,N,V_recoveryResult
TB,N,V_silent
TB,N,V_silentDoubleRecovery
TB,N,V_suppressServerFiltering
TB,N,V_synchronize
TB,N,V_useCachedPassphrase
TB,N,V_useRecoveryPET
TB,N,V_usesMultipleiCSC
TB,N,V_usesRandomPassphrase
TB,N,V_usesRecoveryKey
TB,R
TB,R,N
TB,R,N,V_useCKVR
TQ,N,V_storageVersion
TQ,R
T^{ccsrp_ctx=^{ccdigest_info}^{ccdh_gp}^{ccrng_state}{?=b1b1b1b16}[1Q]},R,N,V_srp
T^{ckvr_srp_context=^{ccrng_state}^{ccdigest_info}^{ccmode_cbc}^{ccmode_cbc}^{ccmode_gcm}^{ccmode_gcm}^{ccsrp_ctx}},R,N,V_ckvr
Ti,N,V_reason
Ti,N,V_reqVersion
UTF8String
UUID
UUIDString
_ClassCreateSecureBackupConcurrentConnection
_CreateSecureBackupConnection
_activityLabel
_activityUUID
_altDSID
_appleID
_authToken
_backOffDate
_ccses
_cert
_certData
_ckvr
_countryCode
_countryDialCode
_decodedLabel
_deleteAll
_deleteDoubleOnly
_doubleRecoveryUUID
_dsid
_duplicateEncodedMetadata
_emcsCred
_emcsDict
_emcsMode
_encodedMetadata
_error
_escrowBlob
_escrowDate
_escrowFederation
_escrowRecord
_excludeiCDPRecords
_expectedFederationID
_fmipRecovery
_fmipUUID
_getAcceptedTermsForAltDSID:withError:
_has
_hsa2CachedPrerecordUUID
_iCloudEnv
_iCloudEnvironment
_iCloudIdentityData
_icdp
_icloudVersion
_idmsData
_idmsRecovery
_label
_metadata
_metadataHash
_nonViableRepair
_oldEMCSCred
_passphrase
_prerecord
_queue
_recordID
_recordLabel
_recoveryBlob
_recoveryKey
_recoveryPassphrase
_recoveryPassphraseMutable
_recoveryUUID
_reqVersion
_ses
_silentDoubleRecovery
_smsTarget
_specifiedFederation
_srp
_stingray
_suppressServerFiltering
_synchronize
_termsInfo
_useCKVR
_useCachedPassphrase
_usesMultipleiCSC
_usesRandomPassphrase
_usesRecoveryKey
_uuid
_verificationToken
_version
activityLabel
activityUUID
addBarrierBlock:
addObject:
addObjectsFromArray:
allObjects
allocWithZone:
arrayWithObjects:count:
asyncRequestEscrowRecordUpdate
authToken
autorelease
backOffDate
backOffDateWithInfo:completionBlock:
backOffDateWithRequest:reply:
backupWithInfo:reply:
beginHSA2PasscodeRequest:desirePasscodeImmediately:uuid:reason:reply:
beginHSA2PasscodeRequest:uuid:error:
beginHSA2PasscodeRequest:uuid:reason:error:
bytes
cStringUsingEncoding:
cachePassphraseWithCompletionBlock:
cachePassphraseWithInfo:
cachePassphraseWithInfo:completionBlock:
cachePassphraseWithRequest:reply:
cachePassphraseWithRequestAsync:
cacheRecoveryKeyWithCompletionBlock:
cacheRecoveryKeyWithRequest:reply:
ccses
cert
certData
certVersion:
changeSMSTargetWithCompletionBlock:
changeSMSTargetWithError:
changeSMSTargetWithInfo:
changeSMSTargetWithInfo:completionBlock:
changeSMSTargetWithRequest:reply:
ckvr
class
code
codeForErrno:
conformsToProtocol:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
countryCode
createICDPRecordWithContents:reply:
createICDPRecordWithRequest:recordContents:reply:
daemonPasscodeRequestOpinion:
data
dataWithBytes:length:
dataWithPropertyList:format:options:error:
databasePath
date
debugDescription
decodeBoolForKey:
decodeObjectOfClass:forKey:
decodePropertyListForKey:
decodedEscrowRecordFromData:stingray:env:duplicate:
decodedLabel
defaultAnalyticsDatabasePath:
deleteAll
deleteDoubleOnly
description
dictionary
dictionaryRepresentation
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
disableWithCompletionBlock:
disableWithError:
disableWithInfo:
disableWithInfo:completionBlock:
disableWithRequest:reply:
domain
doubleRecoveryUUID
dsid
duplicateEncodedMetadata
emcsCred
emcsDict
emcsMode
enableWithCompletionBlock:
enableWithError:
enableWithRequest:reply:
encodeBool:forKey:
encodeObject:forKey:
encodeWithCoder:
encodedEscrowRecordWithPublicKey:error:
error
errorForNSError:path:format:
errorWithCode:URL:format:
errorWithCode:error:format:
errorWithCode:format:
errorWithDomain:code:format:
errorWithDomain:code:userInfo:
escrowBaseURL
escrowBlob
escrowCertificate
escrowDate
escrowFederation
escrowProxyURL
escrowRecord
excludeiCDPRecords
expectedFederationID
fetchTermsWithAltDSID:reply:
firstObject
fmipRecovery
fmipUUID
getAcceptedTermsForAltDSID:reply:
getAcceptedTermsForAltDSID:withError:
getAccountInfoWithError:
getAccountInfoWithInfo:completionBlock:
getAccountInfoWithInfo:completionBlockWithResults:
getAccountInfoWithRequest:reply:
getAccountInfoWithResults:
getAllAcceptedTermsWithError:
getCertificates:
getCertificatesWithRequest:reply:
getCountrySMSCodesWithInfo:completionBlockWithResults:
getCountrySMSCodesWithRequest:reply:
getCountrySMSCodesWithResults:
hasAltDSID
hasCountryCode
hasExpectedFederationID
hasIcloudVersion
hasMetadata
hasReason
hasStorageVersion
hasTermsInfo
hasVersion
hash
hsa2CachedPrerecordUUID
iCloudEnv
iCloudEnvironment
iCloudIdentityData
iCloudPassword
icdp
icloudVersion
idmsData
idmsRecovery
init
initFileURLWithPath:isDirectory:
initWithBytes:length:
initWithBytes:length:encoding:
initWithCapacity:
initWithCoder:
initWithContentsOfURL:
initWithDSID:escrowRecordContents:recoveryPassphrase:recordID:recordLabel:
initWithDSID:escrowRecordContents:recoveryPassphrase:recordID:recordLabel:ckvrFlag:reqVersion:
initWithData:
initWithFormat:arguments:
initWithMachServiceName:options:
initWithRequest:
initWithRequest:ckvrFlag:reqVersion:
initWithRequest:reqVersion:
initWithSecureBackup:
initWithUTF8String:
initWithUserActivityLabel:
integerValue
interfaceWithProtocol:
invalidate
isEqual:
isEqualToNumber:
isEqualToString:
isKindOfClass:
isMemberOfClass:
isRecoveryKeySet:
isRecoveryKeySetInDaemon:
knownICDPFederations
knownICDPFederations:
label
length
logHardFailureForEventNamed:withAttributes:
logSuccessForEvent:
logSuccessForEventNamed:
logUnrecoverableError:forEvent:withAttributes:
logger
mergeFrom:
metadata
metadataHash
moveToFederationAllowed:altDSID:
moveToFederationAllowed:altDSID:error:
moveToFederationAllowed:altDSID:reply:
mutableBytes
mutableCopy
needPasscodeForHSA2EscrowRecordUpdate:
notificationInfo:
notificationInfoWithReply:
numberWithInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
oldEMCSCred
passphrase
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
populateWithInfo:
posixDateFormatter
prepareHSA2EscrowRecordContents:reply:
prepareHSA2EscrowRecordContents:usesComplexPassphrase:reply:
prerecord
processInfo
processName
propertyListWithData:options:format:error:
queue
readFrom:
reason
recordID
recordLabel
recoverRecordContents:
recoverRecordContentsWithRequest:reply:
recoverSilentWithCDPContext:allRecords:error:
recoverSilentWithCDPContextInDaemon:allRecords:reply:
recoverWithCDPContext:escrowRecord:error:
recoverWithCDPContextInDaemon:escrowRecord:reply:
recoverWithError:
recoverWithInfo:completionBlock:
recoverWithInfo:completionBlockWithResults:
recoverWithInfo:results:
recoverWithRequest:reply:
recoverWithResults:
recoveryBlob
recoveryKey
recoveryPassphrase
recoveryPassphraseMutable
recoveryResponseForBlob:
recoveryResult
recoveryUUID
remoteObjectProxy
remoteObjectProxyWithErrorHandler:
removeObjectForKey:
reqVersion
requiresDoubleEnrollment
respondsToSelector:
restoreKeychainAsyncWithPassword:keybagDigest:haveBottledPeer:viewsNotToBeRestored:error:
restoreKeychainAsyncWithPasswordInDaemon:keybagDigest:haveBottledPeer:viewsNotToBeRestored:reply:
restoreKeychainWithBackupPassword:error:
restoreKeychainWithBackupPasswordInDaemon:reply:
resume
retain
retainCount
rootBaseVersionsForRootType:altDSID:inEnvironment:duplicate:
rootCurrentVersionForRootType:altDSID:inEnvironment:
saveTermsAcceptance:reply:
scanUnsignedLongLong:
secureBackupDate
self
setAltDSID:
setAppleID:
setAuthToken:
setBackOffDateWithCompletionBlock:
setBackOffDateWithInfo:completionBlock:
setBackOffDateWithRequest:reply:
setCertData:
setClasses:forSelector:argumentIndex:ofReply:
setCountryDialCode:
setDecodedLabel:
setDeleteAll:
setDeleteDoubleOnly:
setDoubleRecoveryUUID:
setDsid:
setDuplicateEncodedMetadata:
setEmcsCred:
setEmcsDict:
setEmcsMode:
setEncodedMetadata:
setError:
setEscrowBlob:
setEscrowDate:
setEscrowProxyURL:
setEscrowRecord:
setExcludeiCDPRecords:
setExpectedFederationID:
setFmipRecovery:
setFmipUUID:
setHasReason:
setHasStorageVersion:
setHsa2CachedPrerecordUUID:
setICloudEnv:
setICloudIdentityData:
setICloudPassword:
setIcdp:
setIcloudVersion:
setIdmsData:
setIdmsRecovery:
setMetadata:
setMetadataHash:
setNonViableRepair:
setObject:forKey:
setObject:forKeyedSubscript:
setPassphrase:
setPrerecord:
setQueue:
setReason:
setRecordID:
setRecoveryBlob:
setRecoveryPassphrase:
setRecoveryPassphraseMutable:
setRecoveryResult:
setRecoveryUUID:
setRemoteObjectInterface:
setReqVersion:
setSilent:
setSilentDoubleRecovery:
setSmsTarget:
setSpecifiedFederation:
setStingray:
setStorageVersion:
setSuppressServerFiltering:
setTermsInfo:
setUseCachedPassphrase:
setUseRecoveryPET:
setUsesMultipleiCSC:
setUsesRandomPassphrase:
setUsesRecoveryKey:
setVerificationToken:
setVersion:
setWithArray:
setWithObject:
silent
silentDoubleRecovery
smsTarget
specifiedFederation
srpInitBlob
srpInitNonce
srpKeySize
srpPublicKeySize
srpRecoveryBlobFromData:error:
srpRecoveryBlobFromSRPInitResponse:
srpRecoveryBlobFromSRPInitResponse:error:
srpRecoveryUpdateDSID:recoveryPassphrase:
srpResponseForEscrowBlob:withKey:withFullCCKey:
startSMSChallengeWithError:
startSMSChallengeWithInfo:completionBlock:
startSMSChallengeWithInfo:completionBlockWithResults:
startSMSChallengeWithInfo:results:
startSMSChallengeWithRequest:reply:
startSMSChallengeWithResults:
stashRecoveryDataWithCompletionBlock:
stashRecoveryDataWithInfo:completionBlock:
stashRecoveryDataWithRequest:reply:
stateCaptureWithCompletionBlock:
stateCaptureWithReply:
stingray
storageVersion
storeTerms:withAltDSID:reply:
stringWithFormat:
superclass
supportsSecureCoding
suppressServerFiltering
synchronize
synchronousRemoteObjectProxyWithErrorHandler:
termsInfo
uncachePassphrase
uncachePassphraseWithCompletionBlock:
uncachePassphraseWithInfo:
uncachePassphraseWithInfo:completionBlock:
uncachePassphraseWithRequest:reply:
uncachePassphraseWithRequestAsync:
uncacheRecoveryKeyWithCompletionBlock:
uncacheRecoveryKeyWithRequest:reply:
unsignedLongLongValue
updateMetadataWithCompletionBlock:
updateMetadataWithError:
updateMetadataWithInfo:
updateMetadataWithInfo:completionBlock:
updateMetadataWithRequest:reply:
useCachedPassphrase
useRecoveryPET
userInfo
usesMultipleiCSC
usesRandomPassphrase
uuid
validateInput
verificationToken
verifyCertData:withCert:withPubKey:stingray:enroll:altDSID:env:duplicate:sigVerification:error:
writeTo:
zone
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSError"16@0:8
@"NSDictionary"16@0:8
@24@0:8@16
v24@0:8@16
v16@0:8
@"NSString"
@"NSDictionary"
@"SecureBackup"
v32@0:8@16@?24
v40@0:8@16@24@?32
v24@0:8@?16
v52@0:8@16@24B32@36@?44
v36@0:8@16B24@?28
v52@0:8@16B24@28@36@?44
v32@0:8@"SecureBackup"16@?<v@?@"NSDictionary"@"NSError">24
v32@0:8@"SecureBackup"16@?<v@?@"NSError">24
v40@0:8@"OTICDPRecordContext"16@"OTEscrowRecord"24@?<v@?@"NSDictionary"@"NSError">32
v40@0:8@"OTICDPRecordContext"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v24@0:8@?<v@?B@"NSError">16
v52@0:8@"NSData"16@"NSData"24B32@"NSSet"36@?<v@?@"NSError">44
v32@0:8@"NSData"16@?<v@?B@"NSError">24
v24@0:8@"SecureBackup"16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v36@0:8@"SecureBackup"16B24@?<v@?@"NSError">28
v52@0:8@"SecureBackup"16B24@"NSString"28@"SecureBackupEscrowReason"36@?<v@?@"SecureBackupBeginPasscodeRequestResults"@"NSError">44
v40@0:8@"SecureBackup"16@"NSDictionary"24@?<v@?@"NSError">32
v32@0:8@"SecureBackup"16@?<v@?@"NSDictionary"@"NSData"@"NSData"@"NSError">24
v24@0:8@?<v@?I@"NSError">16
v32@0:8@"SecureBackupTermsInfo"16@?<v@?@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?B@"NSError">32
v24@0:8@?<v@?@"NSArray"@"NSError">16
I24@0:8^@16
@32@0:8@16^@24
@24@0:8^@16
B40@0:8@16@24^@32
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
B24@0:8^@16
@40@0:8@16@24^@32
v52@0:8@16@24B32@36^@44
B32@0:8@16^@24
v32@0:8@16@24
v28@0:8B16@?20
@28@0:8B16^@20
@36@0:8B16@20^@28
@44@0:8B16@20@28^@36
v20@0:8B16
@"NSDate"
@"NSData"
@"NSNumber"
@"NSObject<OS_dispatch_queue>"
@"NSError"
@"NSUUID"
@"EscrowPrerecord"
@"SESWrapper"
@32@0:8@16@24
@24@0:8^{_NSZone=}16
i16@0:8
v20@0:8i16
@20@0:8i16
i24@0:8@16
{?="reason"b1}
v40@0:8@16@24@32
v24@0:8Q16
@"SecureBackupTermsInfo"
{?="storageVersion"b1}
q24@0:8@16
q24@0:8q16
@32@0:8q16@24
@40@0:8q16@24@32
@48@0:8q16@24@32@40
@40@0:8@16q24@32
@40@0:8@16@24@32
@24@0:8^{__SecCertificate=}16
@40@0:8I16@20@28B36
@36@0:8I16@20@28
B80@0:8@16^^{__SecCertificate}24^^{__SecKey}32B40B44@48@56B64B68^@72
B32@0:8@16@24
@28@0:8@16i24
@32@0:8@16B24i28
@56@0:8@16@24@32@40@48
@64@0:8@16@24@32@40@48B56i60
@32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16^@24
@40@0:8@16B24@28B36
@40@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24^{ccrsa_full_ctx=QQ^{cczp_funcs}[0Q]}32
^{ccses_crypto_t=^{ccdigest_info}^{ccdh_gp}^{ccmode_ecb}^{ccmode_ecb}^{ccmode_cbc}^{ccmode_cbc}^{ccrng_state}QQQQ}16@0:8
^{ccsrp_ctx=^{ccdigest_info}^{ccdh_gp}^{ccrng_state}{?=b1b1b1b16}[1Q]}16@0:8
^{ckvr_srp_context=^{ccrng_state}^{ccdigest_info}^{ccmode_cbc}^{ccmode_cbc}^{ccmode_gcm}^{ccmode_gcm}^{ccsrp_ctx}}16@0:8
^{ccses_crypto_t=^{ccdigest_info}^{ccdh_gp}^{ccmode_ecb}^{ccmode_ecb}^{ccmode_cbc}^{ccmode_cbc}^{ccrng_state}QQQQ}
^{ccsrp_ctx=^{ccdigest_info}^{ccdh_gp}^{ccrng_state}{?=b1b1b1b16}[1Q]}
^{ckvr_srp_context=^{ccrng_state}^{ccdigest_info}^{ccmode_cbc}^{ccmode_cbc}^{ccmode_gcm}^{ccmode_gcm}^{ccsrp_ctx}}
