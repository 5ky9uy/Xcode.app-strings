TB,N,V_isLocked
T#,R
_policy
T@"NSData",&,N,V_errorData
changePasscodeFrom:to:outError:
T@"NSMutableDictionary",&,N,V_responseHandlers
context
T@"NSObject<OS_dispatch_queue>",&,N,V_handlerManagementQueue
dealloc
T@"PUKeyStore",&,N,V_keyStore
hasPasscodeType
T@"PUProtoPasscodePolicy",&,N,V_policy
isProxy
TB,N
numberWithBool:
TB,N,V_hasPasscode
TB,N,V_isWristDetectionEnabled
setHasPasscode:
TB,N,V_shouldNotify
setPasscodeSet:
TB,R,N
unpairForUnlock
TI,N,V_minimumLength
.cxx_destruct
TI,N,V_actionID
T@"<PUPeerDelegate>",N,V_delegate
base64EncodedStringWithOptions:
T@"NSMutableDictionary",&,N,V_errorHandlers
checkIn
T@"NSMutableSet",R,N,V_connections
copyTo:
T@"NSString",R,C
devices
T@"PUPeer",R,N,V_peer
initWithDomain:
T@"PUProtoPasscodeState",&,N,V_passcodeState
isUnlockEnabled
TB,N,GisUnlockEnabled,V_unlockEnabled
release
TB,N,V_isUnlockOnly
serviceSpaceDidBecomeAvailable:
TB,N,V_modificationAllowed
setOffWristEnabled:withContext:
TB,N,V_success
success
TI,N,V_messageID
version
TI,N,V_passcodeType
TQ,R
_actionID
_actionServerConnection
_attributesForPasscodeBlobWithLabel:
_connections
_convertRemotePasscodeStateToRemoteDeviceState:
_convertToRemoteDeviceState:
_createAndStoreNewPasscodeWithCurrentPasscode:
_delegate
_errorData
_errorHandlers
_handlePasscodeRemoval
_handlerManagementQueue
_has
_hasPasscode
_idsQueue
_isLocked
_isUnlockOnly
_isWristDetectionEnabled
_keyStore
_listener
_logProtobuf:
_logResponse:
_messageID
_minimumLength
_modificationAllowed
_notifyCurrentStateReliably:completionHandler:
_notifyPairResult:error:handler:
_pairedDeviceVersion
_passcodeState
_passcodeStringFromPasscodeData:
_passcodeType
_peer
_removeConnection:
_requestRemoteActionHandler
_responseHandlers
_retrieveUnlockOnlyPasscode
_sendProtobuf:reliably:expectsResponse:responseIdentifier:error:
_sendRequest:data:reliably:expectResponse:handler:error:
_sendResponse:toRequestID:data:error:
_sendResultOfMessage:requestID:success:error:
_service
_setOffWristPreference:
_shouldNotify
_success
_unlockEnabled
actionID
addDelegate:queue:
addObject:
allocWithZone:
autorelease
boolForKey:
bytes
class
completeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
conformsToProtocol:
connections
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentRunLoop
data
dataWithBytes:length:
dataWithBytesNoCopy:length:
debugDescription
decodeObjectOfClass:forKey:
decryptBlob:withKeyLabel:
defaultManager
defaultPairedDevice
delegate
deleteKeyWithLabel:
deletePasscodeBlobWithLabel:
description
dictionary
dictionaryRepresentation
dictionaryWithObjects:forKeys:count:
didCompleteRemoteAction:error:
didCompleteRequest:
didDisableOnlyRemoteUnlock:error:
didEnableOnlyRemoteUnlock:error:
didGetPasscodeState:
didGetRemoteDeviceState:error:
didPairForUnlock:error:
didUnlock:
didUnpairForUnlock:error:
disableOnlyRemoteUnlock
disableOnlyRemoteUnlock:
disableOnlyRemoteUnlockWithCompletionHandler:
disableUnlockWithDevice:
enableOnlyRemoteUnlockWithPasscode:
enableOnlyRemoteUnlockWithPasscode:completionHandler:
enableUnlockWithDevice:fromKey:withPasscode:completionHandler:
enableWristDetectBeforeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
encodeObject:forKey:
encodedData
encryptBlob:withKeyLabel:
errorData
errorHandlerForRequest:
errorHandlers
errorWithCode:description:
errorWithDomain:code:userInfo:
getEncryptionKeyWithLabel:
getPasscodeBlobWithLabel:
getPasscodeState:
gizmoWantsNotificationOnNextUnlock
handlerManagementQueue
hasErrorData
hasIsWristDetectionEnabled
hasKeyWithLabel:isPublic:
hasMinimumLength
hasPasscode
hasPasscodeState
hasPolicy
hasSEP
hash
incomingResponseIdentifier
init
initForReadingFromData:error:
initRequiringSecureCoding:
initWithData:
initWithMachServiceName:
initWithProtobufData:type:isResponse:
initWithService:
integerValue
interfaceWithProtocol:
invalidate
isConnected
isDefaultPairedDevice
isEqual:
isKindOfClass:
isLocked
isMemberOfClass:
isModificationAllowed
isPasscodeModificationAllowed
isPasscodeSet
isSettingLockedDownByRestrictions:
isUnlockOnly
isWristDetectionDisabled
isWristDetectionEnabled
keyStore
length
listener:shouldAcceptNewConnection:
mergeFrom:
messageID
minimumLength
modificationAllowed
newKeyWithLabel:allowAccessWhenLocked:
notifyCurrentState
notifyThisDeviceDidUnlock
numberWithInteger:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedShort:
objectForKeyedSubscript:
outgoingResponseIdentifier
pairForUnlockWithPasscode:
pairForUnlockWithPasscode:completionHandler:
pairedDeviceVersion
passcodeMinimumLength
passcodeState
passcodeType
peer
peer:didNotifyRemoteState:error:
peer:didPairForUnlock:error:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:completionHandler:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:showAsReprompt:completionHandler:
peer:wantsNotificationOfNextUnlock:
peerRemoteDeviceDidUnlock:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
policy
processIdentifier
productVersion
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
queryRemoteDeviceState:
readFrom:
remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
remoteDeviceDidRemoveLockout:error:
remoteDeviceDidUnlock
remoteObjectProxy
removeErrorHandlerForRequest:
removeItemAtPath:error:
removeLockout:
removeObject:
removeObjectForKey:
removeResponseHandlerForRequestMessageID:
requestDeviceSetWristDetectionDisabled:completion:
requestRemoteAction:type:existingPasscode:completion:
requestRemoteAction:type:existingPasscode:showAsReprompt:completion:
requestRemoteDeviceDisableOnlyRemoteUnlock
requestRemoteDeviceRemoteAction:type:
requestRemoteDeviceRemoteAction:type:completionHandler:
requestRemoteDeviceRemoveLockout
requestRemoteDeviceRemoveLockout:
requestRemoteDeviceUnlockNotification
resetDeviceWristDetectionSetting:
respondsToSelector:
responseHandlerForRequestMessageID:
responseHandlers
resume
retain
retainCount
self
sendProtobuf:toDestinations:priority:options:identifier:error:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:sentBytes:totalBytes:
service:account:incomingData:fromID:context:
service:account:incomingMessage:fromID:context:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:receivedGroupSessionParticipantDataUpdate:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:activeAccountsChanged:
service:connectedDevicesChanged:
service:devicesChanged:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:didSwitchActivePairedDevice:acknowledgementBlock:
service:linkedDevicesChanged:
service:nearbyDevicesChanged:
serviceAllowedTrafficClassifiersDidReset:
setActionID:
setDelegate:
setErrorData:
setErrorHandler:forRequest:
setErrorHandlers:
setExportedInterface:
setExportedObject:
setGizmoWantsNotificationOnNextUnlock:
setHandlerManagementQueue:
setHasIsWristDetectionEnabled:
setHasMinimumLength:
setHasPasscodeType:
setInvalidationHandler:
setIsLocked:
setIsUnlockOnly:
setIsWristDetectionEnabled:
setKeyStore:
setMessageID:
setMinimumLength:
setModificationAllowed:
setObject:forKey:
setObject:forKeyedSubscript:
setOffWristEnabledSSE:completion:
setPairedDeviceVersion:
setPasscodeLocked:
setPasscodeMinimumLength:
setPasscodePolicy:
setPasscodeState:
setPasscodeType:
setPolicy:
setProtobufAction:forIncomingRequestsOfType:
setProtobufAction:forIncomingResponsesOfType:
setRemoteObjectInterface:
setResponseHandler:forRequestMessageID:
setResponseHandlers:
setShouldNotify:
setShouldNotifyNextUnlock:
setSuccess:
setUnlockEnabled:
setUnlockOnly:
setVersion:
setWithObject:
setWristDetectEnabled:
setWristDetectionDisabled:completion:
sharedConnection
sharedUnlockManager
shouldNotify
startRemoteAction:
storeEncryptionKey:withLabel:allowAccessWhenLocked:
storePasscodeBlob:withLabel:
stringWithFormat:
superclass
syncObserverRequestsWristDetectionReset:
syncPasscodeState
synchronizeUserDefaultsDomain:keys:
toProtobuf
unlockDeviceWithPasscode:outError:
unlockEnabled
unlockScreenType
unpairForUnlockWithCompletionHandler:
unsignedIntegerValue
valueRestrictionForFeature:
wristDetectDisabledPreference
writeTo:
zone
DisableWristDetection
com.apple.Carousel
only supported on watch
CSLDisableWristDetectionChangedNotification
cannot change wrist detect setting if the device is locked
cannot disable wrist detection when unlock only
cannot disable wrist detection, required by configuration
v16@?0@"NSError"8
HasSEP
com.apple.paired-unlock
IsUnlockOnly
ShouldDisableOnlyRemoteUnlock
com.apple.pairedunlock.handlermanagement
com.apple.pairedunlock.ids
com.apple.private.alloy.pairedunlock
v8@?0
error
v20@?0B8@"NSError"12
v24@?0@"PURemoteDeviceState"8@"NSError"16
Requested
FAILED to request
 (%@)
v36@?0B8@"NSError"12@"NSString"20@"NSString"28
c5l_%@
v16@?0@8
/var/mobile/Library/Carousel/LockoutStateJournal.plist
PairedUnlock
passcode
%@ %@
hasPasscode
isLocked
isUnlockOnly
isWristDetectionEnabled
policy
actionID
passcodeType
messageID
success
errorData
passcodeState
modificationAllowed
minimumLength
shouldNotify
ShouldNotifyNextUnlock
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
setting up signal handler for %@
setting wrist detection disabled to %@
couldn't set wrist detection disabled to %@, error %@
calling SEP to set wrist detection disabled to %@
current minimum passcode length is %@
passcode modification allowed: %{BOOL}u
paired device version = %{public}@, %{public}@
Incoming unhandled protobuf: <%@>
Send of message with id:%@ FAILED with error: %@
Connected devices changed, connected = %@, devices = %@
Sending result of message %i (%@) as RESPONSE
Sending result of message %i (%@) as REQUEST
Send protobuf FAILED with error %@
Sent protobuf SUCCEEDED: <%@> with ID: %@
Received protobuf: <%@> with identifier: %@
Calling response handler for message of type %i
Missing handler for message of type %i!
Starting unlock pair
Attempted to pair with incorrect passcode
Attempted to pair while passcode locked
%@ notification of next unlock%@
%@ disabling only remote unlock%@
peer requestDeviceSetWristDetectionDisabled:%@, error: %@
wristDetectDisabled preference has changed to = %@
wristDetectDisabled preference has not changed = %@
Generated random passcode of length %@.
Successfully changed to random passcode; storing
Successfully stored random passcode
FAILED to store new passcode! Bailing back to old one
FAILED to change passcode back! SOMETHING IS HORRIBLY WRONG
FAILED to change passcode
FAILED to generate random passcode
Unlock pairing succeeded; notifying other device of new state
ERROR notifying paired device that we
re in only-remote-unlock mode: %@
Unlock pairing with new passcode FAILED (%@), bailing back to the old one
Successfully changed passcode back. You are now at least no worse off than you were.
FAILED to change passcode back! SOMETHING IS EVEN MORE HORRIBLY WRONG.
replacing empty passcode
enableUnlockWithDevice returned success %@ %@ in state %@
Resetting passcode state = %@
could not enable wrist detection %{public}@
wrist detection enabled by user
wrist detection already enabled
ERROR notifying paired device that we
re out of only-remote-unlock mode: %@
FAILED to change passcode back!
FAILED to find passcode entry in keychain!
Sending repsonse protobuf: <%@>
remote action %@ complete, error = %@
remote action %@ complete
wrist detection enabled
on new hardware, not putting up passcode screen for disabling the wrist detect
wrist detection disabled
wrist detection prepared, putting up passcode screen for unlock pairing
enabled wrist detection and paired unlock, error %@
unlock pairing requested %@
wrist detection enabled prior to unlock pairing or device without SEP
Failed to remove existing passcode: %@
putting up passcode screen
Got request to disable only remote unlock; currently unlocked, so starting that now
Disabled only remote unlock
FAILED to disable unly remote unlock: %@
Got request to disable only remote unlock; currently locked, so waiting until next unlock to do so
Wrist detect setting wasn't returned from remote device
successfully paired for unlocking
failed to pair for unlocking: %@
Not unpairing now; will do so when watch next connects
Server got new connection
Server connection invalidated!
received connection %@
_connections (%@) = %@
Server lost connection %@ to PID %d
Remote device requested passcode action %li
Remote device requested passcode action %li (show as reprompt:%{BOOL}u)
Client connection checked in
could not restore wrist detection setting %@
SIGTERM has been received, exiting...
PUPasscodeState
DefaultDevice
PUPeer
IDSServiceDelegate
NSObject
PUKeyStore
PUProtoPasscodeState
NSCopying
PUProtoDidUnlock
PUProtoGetPasscodeState
PUProtoStartRemoteAction
PUProtoRemoveLockout
PUProtoRequestCompleted
PUProtoRequestDisableOnlyRemoteUnlock
PUProtoPasscodePolicy
PUProtoSetShouldNotifyNextUnlock
PUUnlockClient
PUUnlockServer
PUServer
NSXPCListenerDelegate
PUPeerDelegate
MCProfileConnectionObserver
PUPairedSyncObserverDelegate
B16@0:8
@28@0:8B16@20
v28@0:8B16@?20
v20@0:8B16
Q16@0:8
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v64@0:8@16@24@32@40@48@56
v40@0:8@16@24@32
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v32@0:8@16@24
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v24@0:8@16
v40@0:8@16@24@?32
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
I16@0:8
v20@0:8I16
@24@0:8@16
@?24@0:8@16
v32@0:8@?16@24
v40@0:8S16@20B28@32
@52@0:8S16@20B28B32@?36^@44
v44@0:8S16@20@28^@36
@48@0:8@16B24B28@32^@40
v32@0:8@16@?24
v40@0:8q16q24@?32
v16@0:8
v24@0:8@?16
v36@0:8B16@20@?28
@"IDSService"
@"NSObject<OS_dispatch_queue>"
@"<PUPeerDelegate>"
@"PUKeyStore"
@"NSMutableDictionary"
@28@0:8@16B24
v36@0:8@16@24B32
B28@0:8@16B24
@32@0:8@16@24
B32@0:8@16@24
@24@0:8^{_NSZone=}16
@"PUProtoPasscodePolicy"
{?="isWristDetectionEnabled"b1}
{?="passcodeType"b1}
@"NSData"
@"PUProtoPasscodeState"
{?="minimumLength"b1}
v28@0:8B16@20
v36@0:8B16@20@28
v28@0:8B16@"NSError"20
v36@0:8B16@"PURemoteDeviceState"20@"NSError"28
v32@0:8@"PURemoteDeviceState"16@"NSError"24
v32@0:8q16q24
v24@0:8@"NSString"16
v24@0:8@?<v@?@"PURemoteDeviceState"@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v36@0:8@16B24@28
v56@0:8@16q24q32@40@?48
v60@0:8@16q24q32@40B48@?52
v28@0:8@16B24
v36@0:8@"PUPeer"16B24@"NSError"28
v24@0:8@"PUPeer"16
v40@0:8@"PUPeer"16@"PURemoteDeviceState"24@"NSError"32
v56@0:8@"PUPeer"16q24q32@"NSString"40@?<v@?@"PURemoteDeviceState"@"NSError">48
v60@0:8@"PUPeer"16q24q32@"NSString"40B48@?<v@?@"PURemoteDeviceState"@"NSError">52
v28@0:8@"PUPeer"16B24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
v24@0:8@"PUPairedSyncObserver"16
@"NSXPCListener"
@"NSXPCConnection"
@"PUPeer"
@"NSMutableSet"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.BTServer.allowQuickRSSIRead</key>
<true/>
<key>com.apple.carousel.onWristMonitor.actions</key>
<array>
<string>monitor</string>
</array>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.nano.nanoregistry.pairunpairobliterate</key>
<true/>
<key>com.apple.private.applesse.allow</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.sharing.unlock-manager</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.paired-unlock</string>
</array>
</dict>
</plist>
!0*%com.apple.BTServer.allowQuickRSSIRead
06)com.apple.carousel.onWristMonitor.actions0
monitor0
com.apple.keystore.device
03.com.apple.managedconfiguration.profiled-access
050com.apple.nano.nanoregistry.pairunpairobliterate
0% com.apple.private.applesse.allow
com.apple.private.ids.messaging0&$com.apple.private.alloy.pairedunlock0Y/com.apple.private.ids.messaging.urgent-priority0&$com.apple.private.alloy.pairedunlock0-(com.apple.private.sharing.unlock-manager
keychain-access-groups0
com.apple.paired-unlock
DisableWristDetection
com.apple.Carousel
only supported on watch
CSLDisableWristDetectionChangedNotification
cannot change wrist detect setting if the device is locked
cannot disable wrist detection when unlock only
cannot disable wrist detection, required by configuration
v16@?0@"NSError"8
HasSEP
com.apple.paired-unlock
IsUnlockOnly
ShouldDisableOnlyRemoteUnlock
com.apple.pairedunlock.handlermanagement
com.apple.pairedunlock.ids
com.apple.private.alloy.pairedunlock
v8@?0
error
v20@?0B8@"NSError"12
v24@?0@"PURemoteDeviceState"8@"NSError"16
Requested
FAILED to request
 (%@)
v36@?0B8@"NSError"12@"NSString"20@"NSString"28
c5l_%@
v16@?0@8
/var/mobile/Library/Carousel/LockoutStateJournal.plist
PairedUnlock
passcode
%@ %@
hasPasscode
isLocked
isUnlockOnly
isWristDetectionEnabled
policy
actionID
passcodeType
messageID
success
errorData
passcodeState
modificationAllowed
minimumLength
shouldNotify
ShouldNotifyNextUnlock
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
setting up signal handler for %@
setting wrist detection disabled to %@
couldn't set wrist detection disabled to %@, error %@
calling SEP to set wrist detection disabled to %@
current minimum passcode length is %@
passcode modification allowed: %{BOOL}u
paired device version = %{public}@, %{public}@
Incoming unhandled protobuf: <%@>
Send of message with id:%@ FAILED with error: %@
Connected devices changed, connected = %@, devices = %@
Sending result of message %i (%@) as RESPONSE
Sending result of message %i (%@) as REQUEST
Send protobuf FAILED with error %@
Sent protobuf SUCCEEDED: <%@> with ID: %@
Received protobuf: <%@> with identifier: %@
Calling response handler for message of type %i
Missing handler for message of type %i!
Starting unlock pair
Attempted to pair with incorrect passcode
Attempted to pair while passcode locked
%@ notification of next unlock%@
%@ disabling only remote unlock%@
peer requestDeviceSetWristDetectionDisabled:%@, error: %@
wristDetectDisabled preference has changed to = %@
wristDetectDisabled preference has not changed = %@
Generated random passcode of length %@.
Successfully changed to random passcode; storing
Successfully stored random passcode
FAILED to store new passcode! Bailing back to old one
FAILED to change passcode back! SOMETHING IS HORRIBLY WRONG
FAILED to change passcode
FAILED to generate random passcode
Unlock pairing succeeded; notifying other device of new state
ERROR notifying paired device that we
re in only-remote-unlock mode: %@
Unlock pairing with new passcode FAILED (%@), bailing back to the old one
Successfully changed passcode back. You are now at least no worse off than you were.
FAILED to change passcode back! SOMETHING IS EVEN MORE HORRIBLY WRONG.
replacing empty passcode
enableUnlockWithDevice returned success %@ %@ in state %@
Resetting passcode state = %@
could not enable wrist detection %{public}@
wrist detection enabled by user
wrist detection already enabled
ERROR notifying paired device that we
re out of only-remote-unlock mode: %@
FAILED to change passcode back!
FAILED to find passcode entry in keychain!
Sending repsonse protobuf: <%@>
remote action %@ complete, error = %@
remote action %@ complete
wrist detection enabled
on new hardware, not putting up passcode screen for disabling the wrist detect
wrist detection disabled
wrist detection prepared, putting up passcode screen for unlock pairing
enabled wrist detection and paired unlock, error %@
unlock pairing requested %@
wrist detection enabled prior to unlock pairing or device without SEP
Failed to remove existing passcode: %@
putting up passcode screen
Got request to disable only remote unlock; currently unlocked, so starting that now
Disabled only remote unlock
FAILED to disable unly remote unlock: %@
Got request to disable only remote unlock; currently locked, so waiting until next unlock to do so
Wrist detect setting wasn't returned from remote device
successfully paired for unlocking
failed to pair for unlocking: %@
Not unpairing now; will do so when watch next connects
Server got new connection
Server connection invalidated!
received connection %@
_connections (%@) = %@
Server lost connection %@ to PID %d
Remote device requested passcode action %li
Remote device requested passcode action %li (show as reprompt:%{BOOL}u)
Client connection checked in
could not restore wrist detection setting %@
SIGTERM has been received, exiting...
PUPasscodeState
DefaultDevice
PUPeer
IDSServiceDelegate
NSObject
PUKeyStore
PUProtoPasscodeState
NSCopying
PUProtoDidUnlock
PUProtoGetPasscodeState
PUProtoStartRemoteAction
PUProtoRemoveLockout
PUProtoRequestCompleted
PUProtoRequestDisableOnlyRemoteUnlock
PUProtoPasscodePolicy
PUProtoSetShouldNotifyNextUnlock
PUUnlockClient
PUUnlockServer
PUServer
NSXPCListenerDelegate
PUPeerDelegate
MCProfileConnectionObserver
PUPairedSyncObserverDelegate
TB,N,V_isLocked
T#,R
_policy
T@"NSData",&,N,V_errorData
changePasscodeFrom:to:outError:
T@"NSMutableDictionary",&,N,V_responseHandlers
context
T@"NSObject<OS_dispatch_queue>",&,N,V_handlerManagementQueue
dealloc
T@"PUKeyStore",&,N,V_keyStore
hasPasscodeType
T@"PUProtoPasscodePolicy",&,N,V_policy
isProxy
TB,N
numberWithBool:
TB,N,V_hasPasscode
TB,N,V_isWristDetectionEnabled
setHasPasscode:
TB,N,V_shouldNotify
setPasscodeSet:
TB,R,N
unpairForUnlock
TI,N,V_minimumLength
.cxx_destruct
TI,N,V_actionID
T@"<PUPeerDelegate>",N,V_delegate
base64EncodedStringWithOptions:
T@"NSMutableDictionary",&,N,V_errorHandlers
checkIn
T@"NSMutableSet",R,N,V_connections
copyTo:
T@"NSString",R,C
devices
T@"PUPeer",R,N,V_peer
initWithDomain:
T@"PUProtoPasscodeState",&,N,V_passcodeState
isUnlockEnabled
TB,N,GisUnlockEnabled,V_unlockEnabled
release
TB,N,V_isUnlockOnly
serviceSpaceDidBecomeAvailable:
TB,N,V_modificationAllowed
setOffWristEnabled:withContext:
TB,N,V_success
success
TI,N,V_messageID
version
TI,N,V_passcodeType
TQ,R
_actionID
_actionServerConnection
_attributesForPasscodeBlobWithLabel:
_connections
_convertRemotePasscodeStateToRemoteDeviceState:
_convertToRemoteDeviceState:
_createAndStoreNewPasscodeWithCurrentPasscode:
_delegate
_errorData
_errorHandlers
_handlePasscodeRemoval
_handlerManagementQueue
_has
_hasPasscode
_idsQueue
_isLocked
_isUnlockOnly
_isWristDetectionEnabled
_keyStore
_listener
_logProtobuf:
_logResponse:
_messageID
_minimumLength
_modificationAllowed
_notifyCurrentStateReliably:completionHandler:
_notifyPairResult:error:handler:
_pairedDeviceVersion
_passcodeState
_passcodeStringFromPasscodeData:
_passcodeType
_peer
_removeConnection:
_requestRemoteActionHandler
_responseHandlers
_retrieveUnlockOnlyPasscode
_sendProtobuf:reliably:expectsResponse:responseIdentifier:error:
_sendRequest:data:reliably:expectResponse:handler:error:
_sendResponse:toRequestID:data:error:
_sendResultOfMessage:requestID:success:error:
_service
_setOffWristPreference:
_shouldNotify
_success
_unlockEnabled
actionID
addDelegate:queue:
addObject:
allocWithZone:
autorelease
boolForKey:
bytes
class
completeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
conformsToProtocol:
connections
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentRunLoop
data
dataWithBytes:length:
dataWithBytesNoCopy:length:
debugDescription
decodeObjectOfClass:forKey:
decryptBlob:withKeyLabel:
defaultManager
defaultPairedDevice
delegate
deleteKeyWithLabel:
deletePasscodeBlobWithLabel:
description
dictionary
dictionaryRepresentation
dictionaryWithObjects:forKeys:count:
didCompleteRemoteAction:error:
didCompleteRequest:
didDisableOnlyRemoteUnlock:error:
didEnableOnlyRemoteUnlock:error:
didGetPasscodeState:
didGetRemoteDeviceState:error:
didPairForUnlock:error:
didUnlock:
didUnpairForUnlock:error:
disableOnlyRemoteUnlock
disableOnlyRemoteUnlock:
disableOnlyRemoteUnlockWithCompletionHandler:
disableUnlockWithDevice:
enableOnlyRemoteUnlockWithPasscode:
enableOnlyRemoteUnlockWithPasscode:completionHandler:
enableUnlockWithDevice:fromKey:withPasscode:completionHandler:
enableWristDetectBeforeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
encodeObject:forKey:
encodedData
encryptBlob:withKeyLabel:
errorData
errorHandlerForRequest:
errorHandlers
errorWithCode:description:
errorWithDomain:code:userInfo:
getEncryptionKeyWithLabel:
getPasscodeBlobWithLabel:
getPasscodeState:
gizmoWantsNotificationOnNextUnlock
handlerManagementQueue
hasErrorData
hasIsWristDetectionEnabled
hasKeyWithLabel:isPublic:
hasMinimumLength
hasPasscode
hasPasscodeState
hasPolicy
hasSEP
hash
incomingResponseIdentifier
init
initForReadingFromData:error:
initRequiringSecureCoding:
initWithData:
initWithMachServiceName:
initWithProtobufData:type:isResponse:
initWithService:
integerValue
interfaceWithProtocol:
invalidate
isConnected
isDefaultPairedDevice
isEqual:
isKindOfClass:
isLocked
isMemberOfClass:
isModificationAllowed
isPasscodeModificationAllowed
isPasscodeSet
isSettingLockedDownByRestrictions:
isUnlockOnly
isWristDetectionDisabled
isWristDetectionEnabled
keyStore
length
listener:shouldAcceptNewConnection:
mergeFrom:
messageID
minimumLength
modificationAllowed
newKeyWithLabel:allowAccessWhenLocked:
notifyCurrentState
notifyThisDeviceDidUnlock
numberWithInteger:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedShort:
objectForKeyedSubscript:
outgoingResponseIdentifier
pairForUnlockWithPasscode:
pairForUnlockWithPasscode:completionHandler:
pairedDeviceVersion
passcodeMinimumLength
passcodeState
passcodeType
peer
peer:didNotifyRemoteState:error:
peer:didPairForUnlock:error:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:completionHandler:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:showAsReprompt:completionHandler:
peer:wantsNotificationOfNextUnlock:
peerRemoteDeviceDidUnlock:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
policy
processIdentifier
productVersion
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
queryRemoteDeviceState:
readFrom:
remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
remoteDeviceDidRemoveLockout:error:
remoteDeviceDidUnlock
remoteObjectProxy
removeErrorHandlerForRequest:
removeItemAtPath:error:
removeLockout:
removeObject:
removeObjectForKey:
removeResponseHandlerForRequestMessageID:
requestDeviceSetWristDetectionDisabled:completion:
requestRemoteAction:type:existingPasscode:completion:
requestRemoteAction:type:existingPasscode:showAsReprompt:completion:
requestRemoteDeviceDisableOnlyRemoteUnlock
requestRemoteDeviceRemoteAction:type:
requestRemoteDeviceRemoteAction:type:completionHandler:
requestRemoteDeviceRemoveLockout
requestRemoteDeviceRemoveLockout:
requestRemoteDeviceUnlockNotification
resetDeviceWristDetectionSetting:
respondsToSelector:
responseHandlerForRequestMessageID:
responseHandlers
resume
retain
retainCount
self
sendProtobuf:toDestinations:priority:options:identifier:error:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:sentBytes:totalBytes:
service:account:incomingData:fromID:context:
service:account:incomingMessage:fromID:context:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:receivedGroupSessionParticipantDataUpdate:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:activeAccountsChanged:
service:connectedDevicesChanged:
service:devicesChanged:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:didSwitchActivePairedDevice:acknowledgementBlock:
service:linkedDevicesChanged:
service:nearbyDevicesChanged:
serviceAllowedTrafficClassifiersDidReset:
setActionID:
setDelegate:
setErrorData:
setErrorHandler:forRequest:
setErrorHandlers:
setExportedInterface:
setExportedObject:
setGizmoWantsNotificationOnNextUnlock:
setHandlerManagementQueue:
setHasIsWristDetectionEnabled:
setHasMinimumLength:
setHasPasscodeType:
setInvalidationHandler:
setIsLocked:
setIsUnlockOnly:
setIsWristDetectionEnabled:
setKeyStore:
setMessageID:
setMinimumLength:
setModificationAllowed:
setObject:forKey:
setObject:forKeyedSubscript:
setOffWristEnabledSSE:completion:
setPairedDeviceVersion:
setPasscodeLocked:
setPasscodeMinimumLength:
setPasscodePolicy:
setPasscodeState:
setPasscodeType:
setPolicy:
setProtobufAction:forIncomingRequestsOfType:
setProtobufAction:forIncomingResponsesOfType:
setRemoteObjectInterface:
setResponseHandler:forRequestMessageID:
setResponseHandlers:
setShouldNotify:
setShouldNotifyNextUnlock:
setSuccess:
setUnlockEnabled:
setUnlockOnly:
setVersion:
setWithObject:
setWristDetectEnabled:
setWristDetectionDisabled:completion:
sharedConnection
sharedUnlockManager
shouldNotify
startRemoteAction:
storeEncryptionKey:withLabel:allowAccessWhenLocked:
storePasscodeBlob:withLabel:
stringWithFormat:
superclass
syncObserverRequestsWristDetectionReset:
syncPasscodeState
synchronizeUserDefaultsDomain:keys:
toProtobuf
unlockDeviceWithPasscode:outError:
unlockEnabled
unlockScreenType
unpairForUnlockWithCompletionHandler:
unsignedIntegerValue
valueRestrictionForFeature:
wristDetectDisabledPreference
writeTo:
zone
B16@0:8
@28@0:8B16@20
v28@0:8B16@?20
v20@0:8B16
Q16@0:8
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v64@0:8@16@24@32@40@48@56
v40@0:8@16@24@32
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v32@0:8@16@24
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v24@0:8@16
v40@0:8@16@24@?32
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
I16@0:8
v20@0:8I16
@24@0:8@16
@?24@0:8@16
v32@0:8@?16@24
v40@0:8S16@20B28@32
@52@0:8S16@20B28B32@?36^@44
v44@0:8S16@20@28^@36
@48@0:8@16B24B28@32^@40
v32@0:8@16@?24
v40@0:8q16q24@?32
v16@0:8
v24@0:8@?16
v36@0:8B16@20@?28
@"IDSService"
@"NSObject<OS_dispatch_queue>"
@"<PUPeerDelegate>"
@"PUKeyStore"
@"NSMutableDictionary"
@28@0:8@16B24
v36@0:8@16@24B32
B28@0:8@16B24
@32@0:8@16@24
B32@0:8@16@24
@24@0:8^{_NSZone=}16
@"PUProtoPasscodePolicy"
{?="isWristDetectionEnabled"b1}
{?="passcodeType"b1}
@"NSData"
@"PUProtoPasscodeState"
{?="minimumLength"b1}
v28@0:8B16@20
v36@0:8B16@20@28
v28@0:8B16@"NSError"20
v36@0:8B16@"PURemoteDeviceState"20@"NSError"28
v32@0:8@"PURemoteDeviceState"16@"NSError"24
v32@0:8q16q24
v24@0:8@"NSString"16
v24@0:8@?<v@?@"PURemoteDeviceState"@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v36@0:8@16B24@28
v56@0:8@16q24q32@40@?48
v60@0:8@16q24q32@40B48@?52
v28@0:8@16B24
v36@0:8@"PUPeer"16B24@"NSError"28
v24@0:8@"PUPeer"16
v40@0:8@"PUPeer"16@"PURemoteDeviceState"24@"NSError"32
v56@0:8@"PUPeer"16q24q32@"NSString"40@?<v@?@"PURemoteDeviceState"@"NSError">48
v60@0:8@"PUPeer"16q24q32@"NSString"40B48@?<v@?@"PURemoteDeviceState"@"NSError">52
v28@0:8@"PUPeer"16B24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
v24@0:8@"PUPairedSyncObserver"16
@"NSXPCListener"
@"NSXPCConnection"
@"PUPeer"
@"NSMutableSet"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.BTServer.allowQuickRSSIRead</key>
<true/>
<key>com.apple.carousel.onWristMonitor.actions</key>
<array>
<string>monitor</string>
</array>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.nano.nanoregistry.pairunpairobliterate</key>
<true/>
<key>com.apple.private.applesse.allow</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.sharing.unlock-manager</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.paired-unlock</string>
</array>
</dict>
</plist>
!0*%com.apple.BTServer.allowQuickRSSIRead
06)com.apple.carousel.onWristMonitor.actions0
monitor0
com.apple.keystore.device
03.com.apple.managedconfiguration.profiled-access
050com.apple.nano.nanoregistry.pairunpairobliterate
0% com.apple.private.applesse.allow
com.apple.private.ids.messaging0&$com.apple.private.alloy.pairedunlock0Y/com.apple.private.ids.messaging.urgent-priority0&$com.apple.private.alloy.pairedunlock0-(com.apple.private.sharing.unlock-manager
keychain-access-groups0
com.apple.paired-unlock
