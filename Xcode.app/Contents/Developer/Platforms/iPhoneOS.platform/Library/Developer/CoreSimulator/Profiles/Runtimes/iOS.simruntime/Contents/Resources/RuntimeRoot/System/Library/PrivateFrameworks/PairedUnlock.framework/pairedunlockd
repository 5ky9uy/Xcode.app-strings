sharedConnection
isPasscodeSet
hasPasscode
unlockScreenType
wristDetectDisabledPreference
errorWithCode:description:
numberWithBool:
setWithObject:
synchronizeUserDefaultsDomain:keys:
isLocked
isUnlockOnly
isSettingLockedDownByRestrictions:
hasSEP
_setOffWristPreference:
setOffWristEnabledSSE:completion:
valueRestrictionForFeature:
unsignedIntegerValue
isPasscodeModificationAllowed
isModificationAllowed
setModificationAllowed:
passcodeMinimumLength
setMinimumLength:
setHasPasscode:
setIsLocked:
setIsUnlockOnly:
isWristDetectionDisabled
setIsWristDetectionEnabled:
setPolicy:
setOffWristEnabled:withContext:
setWristDetectionDisabled:completion:
toProtobuf
init
devices
countByEnumeratingWithState:objects:count:
isDefaultPairedDevice
defaultPairedDevice
initWithService:
productVersion
numberWithUnsignedInt:
didCompleteRequest:
setProtobufAction:forIncomingRequestsOfType:
setProtobufAction:forIncomingResponsesOfType:
getPasscodeState:
didGetPasscodeState:
didUnlock:
startRemoteAction:
disableOnlyRemoteUnlock:
removeLockout:
setShouldNotifyNextUnlock:
addDelegate:queue:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
removeObjectForKey:
errorHandlerForRequest:
removeErrorHandlerForRequest:
isConnected
setPasscodeState:
setMessageID:
setSuccess:
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
setErrorData:
data
_sendResponse:toRequestID:data:error:
_sendRequest:data:reliably:expectResponse:handler:error:
initWithProtobufData:type:isResponse:
copy
numberWithUnsignedShort:
setResponseHandler:forRequestMessageID:
_sendProtobuf:reliably:expectsResponse:responseIdentifier:error:
dictionary
sendProtobuf:toDestinations:priority:options:identifier:error:
initWithData:
context
outgoingResponseIdentifier
errorData
initForReadingFromData:error:
decodeObjectOfClass:forKey:
messageID
responseHandlerForRequestMessageID:
passcodeState
_convertRemotePasscodeStateToRemoteDeviceState:
removeResponseHandlerForRequestMessageID:
unlockDeviceWithPasscode:outError:
sharedUnlockManager
_notifyPairResult:error:handler:
enableUnlockWithDevice:fromKey:withPasscode:completionHandler:
errorWithDomain:code:userInfo:
setActionID:
setPasscodeType:
setShouldNotify:
stringWithFormat:
disableUnlockWithDevice:
setErrorHandler:forRequest:
_notifyCurrentStateReliably:completionHandler:
dataWithBytesNoCopy:length:
_passcodeStringFromPasscodeData:
length
numberWithUnsignedInteger:
changePasscodeFrom:to:outError:
storePasscodeBlob:withLabel:
_createAndStoreNewPasscodeWithCurrentPasscode:
completeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
enableWristDetectBeforeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
base64EncodedStringWithOptions:
getPasscodeBlobWithLabel:
_retrieveUnlockOnlyPasscode
deletePasscodeBlobWithLabel:
_logProtobuf:
actionID
_sendResultOfMessage:requestID:success:error:
passcodeType
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:showAsReprompt:completionHandler:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:completionHandler:
disableOnlyRemoteUnlockWithCompletionHandler:
defaultManager
removeItemAtPath:error:
peerRemoteDeviceDidUnlock:
shouldNotify
peer:wantsNotificationOfNextUnlock:
setVersion:
setPasscodeSet:
setPasscodeLocked:
setUnlockOnly:
hasPolicy
policy
modificationAllowed
minimumLength
setPasscodeMinimumLength:
setPasscodePolicy:
hasIsWristDetectionEnabled
isWristDetectionEnabled
setWristDetectEnabled:
version
initWithDomain:
boolForKey:
_convertToRemoteDeviceState:
incomingResponseIdentifier
peer:didNotifyRemoteState:error:
syncPasscodeState
_logResponse:
peer:didPairForUnlock:error:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
pairedDeviceVersion
setPairedDeviceVersion:
pairForUnlockWithPasscode:completionHandler:
requestRemoteDeviceRemoteAction:type:completionHandler:
requestRemoteDeviceUnlockNotification
requestRemoteDeviceDisableOnlyRemoteUnlock
requestRemoteDeviceRemoveLockout:
unpairForUnlockWithCompletionHandler:
queryRemoteDeviceState:
requestDeviceSetWristDetectionDisabled:completion:
resetDeviceWristDetectionSetting:
notifyCurrentState
enableOnlyRemoteUnlockWithPasscode:completionHandler:
notifyThisDeviceDidUnlock
delegate
setDelegate:
isUnlockEnabled
setUnlockEnabled:
keyStore
setKeyStore:
responseHandlers
setResponseHandlers:
errorHandlers
setErrorHandlers:
handlerManagementQueue
setHandlerManagementQueue:
.cxx_destruct
_service
_idsQueue
_pairedDeviceVersion
_unlockEnabled
_delegate
_keyStore
_responseHandlers
_errorHandlers
_handlerManagementQueue
T@"PUKeyStore",&,N,V_keyStore
T@"NSMutableDictionary",&,N,V_responseHandlers
T@"NSMutableDictionary",&,N,V_errorHandlers
T@"NSObject<OS_dispatch_queue>",&,N,V_handlerManagementQueue
T@"<PUPeerDelegate>",N,V_delegate
unlockEnabled
TB,N,GisUnlockEnabled,V_unlockEnabled
_attributesForPasscodeBlobWithLabel:
dictionaryWithObjects:forKeys:count:
newKeyWithLabel:allowAccessWhenLocked:
storeEncryptionKey:withLabel:allowAccessWhenLocked:
hasKeyWithLabel:isPublic:
deleteKeyWithLabel:
decryptBlob:withKeyLabel:
encryptBlob:withKeyLabel:
getEncryptionKeyWithLabel:
bytes
dataWithBytes:length:
dictionaryRepresentation
setObject:forKey:
allocWithZone:
copyWithZone:
mergeFrom:
setHasIsWristDetectionEnabled:
readFrom:
writeTo:
copyTo:
_policy
_hasPasscode
_isLocked
_isUnlockOnly
_isWristDetectionEnabled
_has
TB,N,V_hasPasscode
TB,N,V_isLocked
TB,N,V_isUnlockOnly
TB,N
TB,N,V_isWristDetectionEnabled
TB,R,N
T@"PUProtoPasscodePolicy",&,N,V_policy
setHasPasscodeType:
hasPasscodeType
_actionID
_passcodeType
TI,N,V_actionID
TI,N,V_passcodeType
hasErrorData
hasPasscodeState
success
_errorData
_messageID
_passcodeState
_success
TI,N,V_messageID
TB,N,V_success
T@"NSData",&,N,V_errorData
T@"PUProtoPasscodeState",&,N,V_passcodeState
setHasMinimumLength:
hasMinimumLength
_minimumLength
_modificationAllowed
TB,N,V_modificationAllowed
TI,N,V_minimumLength
_shouldNotify
TB,N,V_shouldNotify
initWithMachServiceName:
resume
invalidate
dealloc
didPairForUnlock:error:
didUnpairForUnlock:error:
didEnableOnlyRemoteUnlock:error:
didDisableOnlyRemoteUnlock:error:
remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
remoteDeviceDidUnlock
remoteDeviceDidRemoveLockout:error:
didGetRemoteDeviceState:error:
interfaceWithProtocol:
setRemoteObjectInterface:
checkIn
pairForUnlockWithPasscode:
unpairForUnlock
enableOnlyRemoteUnlockWithPasscode:
disableOnlyRemoteUnlock
requestRemoteDeviceRemoteAction:type:
requestRemoteDeviceRemoveLockout
didCompleteRemoteAction:error:
setExportedInterface:
setExportedObject:
_removeConnection:
setInvalidationHandler:
addObject:
count
processIdentifier
removeObject:
remoteObjectProxy
requestRemoteAction:type:existingPasscode:completion:
requestRemoteAction:type:existingPasscode:showAsReprompt:completion:
setGizmoWantsNotificationOnNextUnlock:
connections
listener:shouldAcceptNewConnection:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
syncObserverRequestsWristDetectionReset:
_handlePasscodeRemoval
gizmoWantsNotificationOnNextUnlock
peer
_listener
_requestRemoteActionHandler
_actionServerConnection
_peer
_connections
T@"PUPeer",R,N,V_peer
T@"NSMutableSet",R,N,V_connections
currentRunLoop
integerValue
numberWithInteger:
DisableWristDetection
com.apple.Carousel
only supported on watch
CSLDisableWristDetectionChangedNotification
cannot change wrist detect setting if the device is locked
cannot disable wrist detection when unlock only
cannot disable wrist detection, required by configuration
v16@?0@"NSError"8
HasSEP
com.apple.paired-unlock
IsUnlockOnly
ShouldDisableOnlyRemoteUnlock
com.apple.pairedunlock.handlermanagement
com.apple.pairedunlock.ids
com.apple.private.alloy.pairedunlock
v8@?0
error
v20@?0B8@"NSError"12
v24@?0@"PURemoteDeviceState"8@"NSError"16
Requested
FAILED to request
 (%@)
v36@?0B8@"NSError"12@"NSString"20@"NSString"28
c5l_%@
v16@?0@8
/var/mobile/Library/Carousel/LockoutStateJournal.plist
PairedUnlock
passcode
%@ %@
hasPasscode
isLocked
isUnlockOnly
isWristDetectionEnabled
policy
actionID
passcodeType
messageID
success
errorData
passcodeState
modificationAllowed
minimumLength
shouldNotify
ShouldNotifyNextUnlock
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
setting up signal handler for %@
setting wrist detection disabled to %@
couldn't set wrist detection disabled to %@, error %@
calling SEP to set wrist detection disabled to %@
current minimum passcode length is %@
passcode modification allowed: %{BOOL}u
paired device version = %{public}@, %{public}@
Incoming unhandled protobuf: <%@>
Send of message with id:%@ FAILED with error: %@
Connected devices changed, connected = %@, devices = %@
Sending result of message %i (%@) as RESPONSE
Sending result of message %i (%@) as REQUEST
Send protobuf FAILED with error %@
Sent protobuf SUCCEEDED: <%@> with ID: %@
Received protobuf: <%@> with identifier: %@
Calling response handler for message of type %i
Missing handler for message of type %i!
Starting unlock pair
Attempted to pair with incorrect passcode
Attempted to pair while passcode locked
%@ notification of next unlock%@
%@ disabling only remote unlock%@
peer requestDeviceSetWristDetectionDisabled:%@, error: %@
wristDetectDisabled preference has changed to = %@
wristDetectDisabled preference has not changed = %@
Generated random passcode of length %@.
Successfully changed to random passcode; storing
Successfully stored random passcode
FAILED to store new passcode! Bailing back to old one
FAILED to change passcode back! SOMETHING IS HORRIBLY WRONG
FAILED to change passcode
FAILED to generate random passcode
Unlock pairing succeeded; notifying other device of new state
ERROR notifying paired device that we
re in only-remote-unlock mode: %@
Unlock pairing with new passcode FAILED (%@), bailing back to the old one
Successfully changed passcode back. You are now at least no worse off than you were.
FAILED to change passcode back! SOMETHING IS EVEN MORE HORRIBLY WRONG.
replacing empty passcode
enableUnlockWithDevice returned success %@ %@ in state %@
Resetting passcode state = %@
could not enable wrist detection %{public}@
wrist detection enabled by user
wrist detection already enabled
ERROR notifying paired device that we
re out of only-remote-unlock mode: %@
FAILED to change passcode back!
FAILED to find passcode entry in keychain!
Sending repsonse protobuf: <%@>
remote action %@ complete, error = %@
remote action %@ complete
wrist detection enabled
on new hardware, not putting up passcode screen for disabling the wrist detect
wrist detection disabled
wrist detection prepared, putting up passcode screen for unlock pairing
enabled wrist detection and paired unlock, error %@
unlock pairing requested %@
wrist detection enabled prior to unlock pairing or device without SEP
Failed to remove existing passcode: %@
putting up passcode screen
Got request to disable only remote unlock; currently unlocked, so starting that now
Disabled only remote unlock
FAILED to disable unly remote unlock: %@
Got request to disable only remote unlock; currently locked, so waiting until next unlock to do so
Wrist detect setting wasn't returned from remote device
successfully paired for unlocking
failed to pair for unlocking: %@
Not unpairing now; will do so when watch next connects
Server got new connection
Server connection invalidated!
received connection %@
_connections (%@) = %@
Server lost connection %@ to PID %d
Remote device requested passcode action %li
Remote device requested passcode action %li (show as reprompt:%{BOOL}u)
Client connection checked in
could not restore wrist detection setting %@
SIGTERM has been received, exiting...
PUPasscodeState
DefaultDevice
PUPeer
IDSServiceDelegate
NSObject
PUKeyStore
PUProtoPasscodeState
NSCopying
PUProtoDidUnlock
PUProtoGetPasscodeState
PUProtoStartRemoteAction
PUProtoRemoveLockout
PUProtoRequestCompleted
PUProtoRequestDisableOnlyRemoteUnlock
PUProtoPasscodePolicy
PUProtoSetShouldNotifyNextUnlock
PUUnlockClient
PUUnlockServer
PUServer
NSXPCListenerDelegate
PUPeerDelegate
MCProfileConnectionObserver
PUPairedSyncObserverDelegate
B16@0:8
@28@0:8B16@20
v28@0:8B16@?20
v20@0:8B16
Q16@0:8
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v64@0:8@16@24@32@40@48@56
v40@0:8@16@24@32
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v32@0:8@16@24
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v24@0:8@16
v40@0:8@16@24@?32
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
I16@0:8
v20@0:8I16
@24@0:8@16
@?24@0:8@16
v32@0:8@?16@24
v40@0:8S16@20B28@32
@52@0:8S16@20B28B32@?36^@44
v44@0:8S16@20@28^@36
@48@0:8@16B24B28@32^@40
v32@0:8@16@?24
v40@0:8q16q24@?32
v16@0:8
v24@0:8@?16
v36@0:8B16@20@?28
@"IDSService"
@"NSObject<OS_dispatch_queue>"
@"<PUPeerDelegate>"
@"PUKeyStore"
@"NSMutableDictionary"
@28@0:8@16B24
v36@0:8@16@24B32
B28@0:8@16B24
@32@0:8@16@24
B32@0:8@16@24
@24@0:8^{_NSZone=}16
@"PUProtoPasscodePolicy"
{?="isWristDetectionEnabled"b1}
{?="passcodeType"b1}
@"NSData"
@"PUProtoPasscodeState"
{?="minimumLength"b1}
v28@0:8B16@20
v36@0:8B16@20@28
v28@0:8B16@"NSError"20
v36@0:8B16@"PURemoteDeviceState"20@"NSError"28
v32@0:8@"PURemoteDeviceState"16@"NSError"24
v32@0:8q16q24
v24@0:8@"NSString"16
v24@0:8@?<v@?@"PURemoteDeviceState"@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v36@0:8@16B24@28
v56@0:8@16q24q32@40@?48
v60@0:8@16q24q32@40B48@?52
v28@0:8@16B24
v36@0:8@"PUPeer"16B24@"NSError"28
v24@0:8@"PUPeer"16
v40@0:8@"PUPeer"16@"PURemoteDeviceState"24@"NSError"32
v56@0:8@"PUPeer"16q24q32@"NSString"40@?<v@?@"PURemoteDeviceState"@"NSError">48
v60@0:8@"PUPeer"16q24q32@"NSString"40B48@?<v@?@"PURemoteDeviceState"@"NSError">52
v28@0:8@"PUPeer"16B24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
v24@0:8@"PUPairedSyncObserver"16
@"NSXPCListener"
@"NSXPCConnection"
@"PUPeer"
@"NSMutableSet"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.BTServer.allowQuickRSSIRead</key>
<true/>
<key>com.apple.carousel.onWristMonitor.actions</key>
<array>
<string>monitor</string>
</array>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.nano.nanoregistry.pairunpairobliterate</key>
<true/>
<key>com.apple.private.applesse.allow</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.sharing.unlock-manager</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.paired-unlock</string>
</array>
</dict>
</plist>
DisableWristDetection
com.apple.Carousel
only supported on watch
CSLDisableWristDetectionChangedNotification
cannot change wrist detect setting if the device is locked
cannot disable wrist detection when unlock only
cannot disable wrist detection, required by configuration
v16@?0@"NSError"8
HasSEP
com.apple.paired-unlock
IsUnlockOnly
ShouldDisableOnlyRemoteUnlock
com.apple.pairedunlock.handlermanagement
com.apple.pairedunlock.ids
com.apple.private.alloy.pairedunlock
v8@?0
error
v20@?0B8@"NSError"12
v24@?0@"PURemoteDeviceState"8@"NSError"16
Requested
FAILED to request
 (%@)
v36@?0B8@"NSError"12@"NSString"20@"NSString"28
c5l_%@
v16@?0@8
/var/mobile/Library/Carousel/LockoutStateJournal.plist
PairedUnlock
passcode
%@ %@
hasPasscode
isLocked
isUnlockOnly
isWristDetectionEnabled
policy
actionID
passcodeType
messageID
success
errorData
passcodeState
modificationAllowed
minimumLength
shouldNotify
ShouldNotifyNextUnlock
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
setting up signal handler for %@
setting wrist detection disabled to %@
couldn't set wrist detection disabled to %@, error %@
calling SEP to set wrist detection disabled to %@
current minimum passcode length is %@
passcode modification allowed: %{BOOL}u
paired device version = %{public}@, %{public}@
Incoming unhandled protobuf: <%@>
Send of message with id:%@ FAILED with error: %@
Connected devices changed, connected = %@, devices = %@
Sending result of message %i (%@) as RESPONSE
Sending result of message %i (%@) as REQUEST
Send protobuf FAILED with error %@
Sent protobuf SUCCEEDED: <%@> with ID: %@
Received protobuf: <%@> with identifier: %@
Calling response handler for message of type %i
Missing handler for message of type %i!
Starting unlock pair
Attempted to pair with incorrect passcode
Attempted to pair while passcode locked
%@ notification of next unlock%@
%@ disabling only remote unlock%@
peer requestDeviceSetWristDetectionDisabled:%@, error: %@
wristDetectDisabled preference has changed to = %@
wristDetectDisabled preference has not changed = %@
Generated random passcode of length %@.
Successfully changed to random passcode; storing
Successfully stored random passcode
FAILED to store new passcode! Bailing back to old one
FAILED to change passcode back! SOMETHING IS HORRIBLY WRONG
FAILED to change passcode
FAILED to generate random passcode
Unlock pairing succeeded; notifying other device of new state
ERROR notifying paired device that we
re in only-remote-unlock mode: %@
Unlock pairing with new passcode FAILED (%@), bailing back to the old one
Successfully changed passcode back. You are now at least no worse off than you were.
FAILED to change passcode back! SOMETHING IS EVEN MORE HORRIBLY WRONG.
replacing empty passcode
enableUnlockWithDevice returned success %@ %@ in state %@
Resetting passcode state = %@
could not enable wrist detection %{public}@
wrist detection enabled by user
wrist detection already enabled
ERROR notifying paired device that we
re out of only-remote-unlock mode: %@
FAILED to change passcode back!
FAILED to find passcode entry in keychain!
Sending repsonse protobuf: <%@>
remote action %@ complete, error = %@
remote action %@ complete
wrist detection enabled
on new hardware, not putting up passcode screen for disabling the wrist detect
wrist detection disabled
wrist detection prepared, putting up passcode screen for unlock pairing
enabled wrist detection and paired unlock, error %@
unlock pairing requested %@
wrist detection enabled prior to unlock pairing or device without SEP
Failed to remove existing passcode: %@
putting up passcode screen
Got request to disable only remote unlock; currently unlocked, so starting that now
Disabled only remote unlock
FAILED to disable unly remote unlock: %@
Got request to disable only remote unlock; currently locked, so waiting until next unlock to do so
Wrist detect setting wasn't returned from remote device
successfully paired for unlocking
failed to pair for unlocking: %@
Not unpairing now; will do so when watch next connects
Server got new connection
Server connection invalidated!
received connection %@
_connections (%@) = %@
Server lost connection %@ to PID %d
Remote device requested passcode action %li
Remote device requested passcode action %li (show as reprompt:%{BOOL}u)
Client connection checked in
could not restore wrist detection setting %@
SIGTERM has been received, exiting...
PUPasscodeState
DefaultDevice
PUPeer
IDSServiceDelegate
NSObject
PUKeyStore
PUProtoPasscodeState
NSCopying
PUProtoDidUnlock
PUProtoGetPasscodeState
PUProtoStartRemoteAction
PUProtoRemoveLockout
PUProtoRequestCompleted
PUProtoRequestDisableOnlyRemoteUnlock
PUProtoPasscodePolicy
PUProtoSetShouldNotifyNextUnlock
PUUnlockClient
PUUnlockServer
PUServer
NSXPCListenerDelegate
PUPeerDelegate
MCProfileConnectionObserver
PUPairedSyncObserverDelegate
setVersion:
numberWithBool:
isDefaultPairedDevice
countByEnumeratingWithState:objects:count:
initWithMachServiceName:
requestRemoteAction:type:existingPasscode:completion:
removeItemAtPath:error:
objectForKeyedSubscript:
isPasscodeModificationAllowed
enableUnlockWithDevice:fromKey:withPasscode:completionHandler:
setUnlockOnly:
initForReadingFromData:error:
decodeObjectOfClass:forKey:
count
dictionary
changePasscodeFrom:to:outError:
initWithProtobufData:type:isResponse:
setPasscodeSet:
valueRestrictionForFeature:
addObject:
sharedUnlockManager
isConnected
dataWithBytesNoCopy:length:
setExportedObject:
numberWithUnsignedShort:
invalidate
synchronizeUserDefaultsDomain:keys:
setProtobufAction:forIncomingResponsesOfType:
setObject:forKeyedSubscript:
remoteObjectProxy
devices
dataWithBytes:length:
unsignedIntegerValue
setObject:forKey:
syncPasscodeState
setPasscodePolicy:
interfaceWithProtocol:
incomingResponseIdentifier
bytes
sharedConnection
numberWithUnsignedInteger:
setExportedInterface:
initWithDomain:
disableUnlockWithDevice:
processIdentifier
productVersion
setPasscodeMinimumLength:
setProtobufAction:forIncomingRequestsOfType:
addDelegate:queue:
sendProtobuf:toDestinations:priority:options:identifier:error:
encodedData
numberWithInteger:
integerValue
copy
currentRunLoop
stringWithFormat:
boolForKey:
numberWithUnsignedInt:
dictionaryWithObjects:forKeys:count:
data
initWithData:
setInvalidationHandler:
encodeObject:forKey:
setPasscodeLocked:
isSettingLockedDownByRestrictions:
unlockScreenType
setWristDetectEnabled:
resume
errorWithDomain:code:userInfo:
defaultManager
context
removeObjectForKey:
removeObject:
base64EncodedStringWithOptions:
requestRemoteAction:type:existingPasscode:showAsReprompt:completion:
unlockDeviceWithPasscode:outError:
outgoingResponseIdentifier
setRemoteObjectInterface:
version
initRequiringSecureCoding:
isPasscodeSet
length
allocWithZone:
errorWithCode:description:
initWithService:
setWithObject:
hasPasscode
isLocked
isUnlockOnly
isWristDetectionDisabled
wristDetectDisabledPreference
setOffWristEnabled:withContext:
setOffWristEnabledSSE:completion:
_setOffWristPreference:
setWristDetectionDisabled:completion:
hasSEP
passcodeMinimumLength
isModificationAllowed
toProtobuf
init
defaultPairedDevice
didCompleteRequest:
getPasscodeState:
didGetPasscodeState:
didUnlock:
startRemoteAction:
disableOnlyRemoteUnlock:
removeLockout:
setShouldNotifyNextUnlock:
peerRemoteDeviceDidUnlock:
peer:didPairForUnlock:error:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
pairedDeviceVersion
setPairedDeviceVersion:
responseHandlerForRequestMessageID:
setResponseHandler:forRequestMessageID:
removeResponseHandlerForRequestMessageID:
errorHandlerForRequest:
setErrorHandler:forRequest:
removeErrorHandlerForRequest:
_sendResultOfMessage:requestID:success:error:
_sendRequest:data:reliably:expectResponse:handler:error:
_sendResponse:toRequestID:data:error:
_sendProtobuf:reliably:expectsResponse:responseIdentifier:error:
pairForUnlockWithPasscode:completionHandler:
requestRemoteDeviceRemoteAction:type:completionHandler:
requestRemoteDeviceUnlockNotification
requestRemoteDeviceDisableOnlyRemoteUnlock
requestRemoteDeviceRemoveLockout:
unpairForUnlockWithCompletionHandler:
queryRemoteDeviceState:
requestDeviceSetWristDetectionDisabled:completion:
resetDeviceWristDetectionSetting:
notifyCurrentState
_createAndStoreNewPasscodeWithCurrentPasscode:
completeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
enableWristDetectBeforeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
enableOnlyRemoteUnlockWithPasscode:completionHandler:
_passcodeStringFromPasscodeData:
_retrieveUnlockOnlyPasscode
_notifyCurrentStateReliably:completionHandler:
disableOnlyRemoteUnlockWithCompletionHandler:
notifyThisDeviceDidUnlock
_logProtobuf:
_logResponse:
_convertToRemoteDeviceState:
_convertRemotePasscodeStateToRemoteDeviceState:
_notifyPairResult:error:handler:
delegate
setDelegate:
isUnlockEnabled
setUnlockEnabled:
keyStore
setKeyStore:
responseHandlers
setResponseHandlers:
errorHandlers
setErrorHandlers:
handlerManagementQueue
setHandlerManagementQueue:
.cxx_destruct
_service
_idsQueue
_pairedDeviceVersion
_unlockEnabled
_delegate
_keyStore
_responseHandlers
_errorHandlers
_handlerManagementQueue
T@"PUKeyStore",&,N,V_keyStore
T@"NSMutableDictionary",&,N,V_responseHandlers
T@"NSMutableDictionary",&,N,V_errorHandlers
T@"NSObject<OS_dispatch_queue>",&,N,V_handlerManagementQueue
T@"<PUPeerDelegate>",N,V_delegate
unlockEnabled
TB,N,GisUnlockEnabled,V_unlockEnabled
newKeyWithLabel:allowAccessWhenLocked:
storeEncryptionKey:withLabel:allowAccessWhenLocked:
hasKeyWithLabel:isPublic:
deleteKeyWithLabel:
decryptBlob:withKeyLabel:
encryptBlob:withKeyLabel:
_attributesForPasscodeBlobWithLabel:
storePasscodeBlob:withLabel:
getPasscodeBlobWithLabel:
deletePasscodeBlobWithLabel:
getEncryptionKeyWithLabel:
copyWithZone:
setIsWristDetectionEnabled:
setHasIsWristDetectionEnabled:
hasIsWristDetectionEnabled
hasPolicy
dictionaryRepresentation
readFrom:
writeTo:
copyTo:
mergeFrom:
setHasPasscode:
setIsLocked:
setIsUnlockOnly:
isWristDetectionEnabled
policy
setPolicy:
_policy
_hasPasscode
_isLocked
_isUnlockOnly
_isWristDetectionEnabled
_has
TB,N,V_hasPasscode
TB,N,V_isLocked
TB,N,V_isUnlockOnly
TB,N
TB,N,V_isWristDetectionEnabled
TB,R,N
T@"PUProtoPasscodePolicy",&,N,V_policy
setPasscodeType:
setHasPasscodeType:
hasPasscodeType
actionID
setActionID:
passcodeType
_actionID
_passcodeType
TI,N,V_actionID
TI,N,V_passcodeType
hasErrorData
hasPasscodeState
messageID
setMessageID:
success
setSuccess:
errorData
setErrorData:
passcodeState
setPasscodeState:
_errorData
_messageID
_passcodeState
_success
TI,N,V_messageID
TB,N,V_success
T@"NSData",&,N,V_errorData
T@"PUProtoPasscodeState",&,N,V_passcodeState
setMinimumLength:
setHasMinimumLength:
hasMinimumLength
modificationAllowed
setModificationAllowed:
minimumLength
_minimumLength
_modificationAllowed
TB,N,V_modificationAllowed
TI,N,V_minimumLength
shouldNotify
setShouldNotify:
_shouldNotify
TB,N,V_shouldNotify
dealloc
didPairForUnlock:error:
didUnpairForUnlock:error:
didEnableOnlyRemoteUnlock:error:
didDisableOnlyRemoteUnlock:error:
remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
remoteDeviceDidUnlock
remoteDeviceDidRemoveLockout:error:
didGetRemoteDeviceState:error:
checkIn
pairForUnlockWithPasscode:
unpairForUnlock
enableOnlyRemoteUnlockWithPasscode:
disableOnlyRemoteUnlock
requestRemoteDeviceRemoteAction:type:
requestRemoteDeviceRemoveLockout
didCompleteRemoteAction:error:
listener:shouldAcceptNewConnection:
peer:didNotifyRemoteState:error:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:completionHandler:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:showAsReprompt:completionHandler:
peer:wantsNotificationOfNextUnlock:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
syncObserverRequestsWristDetectionReset:
_handlePasscodeRemoval
_removeConnection:
gizmoWantsNotificationOnNextUnlock
setGizmoWantsNotificationOnNextUnlock:
peer
connections
_listener
_requestRemoteActionHandler
_actionServerConnection
_peer
_connections
T@"PUPeer",R,N,V_peer
T@"NSMutableSet",R,N,V_connections
B16@0:8
@28@0:8B16@20
v28@0:8B16@?20
v20@0:8B16
Q16@0:8
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v64@0:8@16@24@32@40@48@56
v40@0:8@16@24@32
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v32@0:8@16@24
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v24@0:8@16
v40@0:8@16@24@?32
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
I16@0:8
v20@0:8I16
@24@0:8@16
@?24@0:8@16
v32@0:8@?16@24
v40@0:8S16@20B28@32
@52@0:8S16@20B28B32@?36^@44
v44@0:8S16@20@28^@36
@48@0:8@16B24B28@32^@40
v32@0:8@16@?24
v40@0:8q16q24@?32
v16@0:8
v24@0:8@?16
v36@0:8B16@20@?28
@"IDSService"
@"NSObject<OS_dispatch_queue>"
@"<PUPeerDelegate>"
@"PUKeyStore"
@"NSMutableDictionary"
@28@0:8@16B24
v36@0:8@16@24B32
B28@0:8@16B24
@32@0:8@16@24
B32@0:8@16@24
@24@0:8^{_NSZone=}16
@"PUProtoPasscodePolicy"
{?="isWristDetectionEnabled"b1}
{?="passcodeType"b1}
@"NSData"
@"PUProtoPasscodeState"
{?="minimumLength"b1}
v28@0:8B16@20
v36@0:8B16@20@28
v28@0:8B16@"NSError"20
v36@0:8B16@"PURemoteDeviceState"20@"NSError"28
v32@0:8@"PURemoteDeviceState"16@"NSError"24
v32@0:8q16q24
v24@0:8@"NSString"16
v24@0:8@?<v@?@"PURemoteDeviceState"@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v36@0:8@16B24@28
v56@0:8@16q24q32@40@?48
v60@0:8@16q24q32@40B48@?52
v28@0:8@16B24
v36@0:8@"PUPeer"16B24@"NSError"28
v24@0:8@"PUPeer"16
v40@0:8@"PUPeer"16@"PURemoteDeviceState"24@"NSError"32
v56@0:8@"PUPeer"16q24q32@"NSString"40@?<v@?@"PURemoteDeviceState"@"NSError">48
v60@0:8@"PUPeer"16q24q32@"NSString"40B48@?<v@?@"PURemoteDeviceState"@"NSError">52
v28@0:8@"PUPeer"16B24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
v24@0:8@"PUPairedSyncObserver"16
@"NSXPCListener"
@"NSXPCConnection"
@"PUPeer"
@"NSMutableSet"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.BTServer.allowQuickRSSIRead</key>
<true/>
<key>com.apple.carousel.onWristMonitor.actions</key>
<array>
<string>monitor</string>
</array>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.nano.nanoregistry.pairunpairobliterate</key>
<true/>
<key>com.apple.private.applesse.allow</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.sharing.unlock-manager</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.paired-unlock</string>
</array>
</dict>
</plist>
