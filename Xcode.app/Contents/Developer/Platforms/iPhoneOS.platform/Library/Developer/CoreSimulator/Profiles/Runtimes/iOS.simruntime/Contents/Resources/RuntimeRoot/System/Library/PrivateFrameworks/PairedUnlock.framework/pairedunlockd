sharedConnection
isPasscodeSet
hasPasscode
unlockScreenType
wristDetectDisabledPreference
errorWithCode:description:
numberWithBool:
setWithObject:
synchronizeUserDefaultsDomain:keys:
isLocked
isUnlockOnly
isSettingLockedDownByRestrictions:
hasSEP
_setOffWristPreference:
setOffWristEnabledSSE:completion:
valueRestrictionForFeature:
unsignedIntegerValue
isPasscodeModificationAllowed
isModificationAllowed
setModificationAllowed:
passcodeMinimumLength
setMinimumLength:
setHasPasscode:
setIsLocked:
setIsUnlockOnly:
isWristDetectionDisabled
setIsWristDetectionEnabled:
setPolicy:
setOffWristEnabled:withContext:
setWristDetectionDisabled:completion:
toProtobuf
init
dictionaryWithObjects:forKeys:count:
stringByAppendingPathComponent:
distantPast
timeIntervalSinceReferenceDate
_loadLockControllerDefaultsJournalIfNecessary
_persistentStateQueue_updateBlockTimeAndPendingWipe
_persistentStateQueue_loadLockState
_persistentStateQueue_cancelSpeculativeFailureCharge
_persistentStateQueue_clearBlockedState
deviceLockStateMayHaveChangedForModel:
_persistentStateQueue_beginSpeculativeFailureCharge
_persistentStateQueue_unlockSucceeded
delegate
_persistentStateQueue_unlockFailedWithError:
synchronizeDefaults
_evaluatePendingWipe
timeUntilUnblockedSinceReferenceDate
_persistentStateQueue_evaluatePendingWipe
numberOfFailedPasscodeAttempts
intValue
_persistentStateQueue_shouldWipeDeviceOrBlockForSeconds:withFailureCount:
setPendingWipe:
_persistentStateQueue_shouldPermanentlyBlockOrSetUnblockTimeForSecondsToBlock:
setBlockedForPasscode:
effectiveBoolValueForSetting:
valueForFeature:
_isDeviceWipePreferenceEnabled
_persistentStateQueue_getMaxFailureCount
_secondsToBlockForNumberOfFailedAttempts:
numberWithInt:
setNumberOfFailedPasscodeAttempts:
updateLockControllerDefaultsWithBlock:journaled:
_loadLockControllerDefaults:
callStackSymbols
deviceLockModelRequestsDeviceWipe:
pendingWipe
boolValue
blockedForPasscode
_journaledDefaultsAndTypes
count
initWithCapacity:
countByEnumeratingWithState:objects:count:
deviceLockDefaultForKey:
setObject:forKey:
copy
objectForKeyedSubscript:
setDeviceLockDefault:forKey:
blockStateGeneration
longLongValue
dictionaryWithContentsOfFile:
bs_safeObjectForKey:ofType:
_loadLockControllerDefaultsJournalFromOldJournal:
_copyLockControllerDefaults
defaultManager
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
writeToFile:atomically:
setAttributes:ofItemAtPath:error:
numberWithLongLong:
setBlockStateGeneration:
_updateLockControllerDefaultsJournal
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
performPasswordTest:
notePasscodeEntryBegan
notePasscodeEntryCancelled
notePasscodeUnlockSucceeded
notePasscodeUnlockFailedWithError:
synchronize
setDelegate:
isTemporarilyBlocked
isPermanentlyBlocked
clearBlockedState
refreshBlockedState
noteNewMkbDeviceLockStateInfo:options:
persistentStateQueue
.cxx_destruct
_securityDefaults
_journalPath
_persistentStateQueue
_speculativePasscodeFailureChargeOutstanding
_originalDefaultsForRollback
_pendingWipe
_permanentlyBlocked
_unblockTime
_originalUnblockTime
_delegate
_initWithDomain:
stringWithUTF8String:
_bindProperty:withDefaultKey:toDefaultValue:options:
_store
objectForKey:
removeObjectForKey:
_bindAndRegisterDefaults
devices
isDefaultPairedDevice
defaultPairedDevice
initWithService:
productVersion
numberWithUnsignedInt:
didCompleteRequest:
setProtobufAction:forIncomingRequestsOfType:
setProtobufAction:forIncomingResponsesOfType:
getPasscodeState:
didGetPasscodeState:
didUnlock:
startRemoteAction:
disableOnlyRemoteUnlock:
removeLockout:
setShouldNotifyNextUnlock:
addDelegate:queue:
setObject:forKeyedSubscript:
errorHandlerForRequest:
removeErrorHandlerForRequest:
isConnected
setPasscodeState:
setMessageID:
setSuccess:
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
setErrorData:
data
_sendResponse:toRequestID:data:error:
_sendRequest:data:reliably:expectResponse:handler:error:
initWithProtobufData:type:isResponse:
numberWithUnsignedShort:
setResponseHandler:forRequestMessageID:
_sendProtobuf:reliably:expectsResponse:responseIdentifier:error:
dictionary
sendProtobuf:toDestinations:priority:options:identifier:error:
initWithData:
context
outgoingResponseIdentifier
errorData
initForReadingFromData:error:
decodeObjectOfClass:forKey:
messageID
responseHandlerForRequestMessageID:
passcodeState
_convertRemotePasscodeStateToRemoteDeviceState:
removeResponseHandlerForRequestMessageID:
unlockDeviceWithPasscode:outError:
sharedUnlockManager
_notifyPairResult:error:handler:
enableUnlockWithDevice:fromKey:withPasscode:completionHandler:
errorWithDomain:code:userInfo:
setActionID:
setPasscodeType:
setShouldNotify:
stringWithFormat:
disableUnlockWithDevice:
setErrorHandler:forRequest:
_notifyCurrentStateReliably:completionHandler:
dataWithBytesNoCopy:length:
_passcodeStringFromPasscodeData:
length
numberWithUnsignedInteger:
changePasscodeFrom:to:outError:
storePasscodeBlob:withLabel:
_createAndStoreNewPasscodeWithCurrentPasscode:
completeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
enableWristDetectBeforeEnableOnlyRemoteUnlockWithPasscode:completionHandler:
base64EncodedStringWithOptions:
getPasscodeBlobWithLabel:
_retrieveUnlockOnlyPasscode
deletePasscodeBlobWithLabel:
_logProtobuf:
actionID
_sendResultOfMessage:requestID:success:error:
passcodeType
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:showAsReprompt:completionHandler:
peer:remoteDeviceRequestsRemoteAction:type:existingPasscode:completionHandler:
disableOnlyRemoteUnlockWithCompletionHandler:
removeItemAtPath:error:
peerRemoteDeviceDidUnlock:
shouldNotify
peer:wantsNotificationOfNextUnlock:
setVersion:
setPasscodeSet:
setPasscodeLocked:
setUnlockOnly:
hasPolicy
policy
modificationAllowed
minimumLength
setPasscodeMinimumLength:
setPasscodePolicy:
hasIsWristDetectionEnabled
isWristDetectionEnabled
setWristDetectEnabled:
version
initWithDomain:
boolForKey:
_convertToRemoteDeviceState:
incomingResponseIdentifier
peer:didNotifyRemoteState:error:
syncPasscodeState
_logResponse:
peer:didPairForUnlock:error:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
pairedDeviceVersion
setPairedDeviceVersion:
pairForUnlockWithPasscode:completionHandler:
requestRemoteDeviceRemoteAction:type:completionHandler:
requestRemoteDeviceUnlockNotification
requestRemoteDeviceDisableOnlyRemoteUnlock
requestRemoteDeviceRemoveLockout:
unpairForUnlockWithCompletionHandler:
queryRemoteDeviceState:
requestDeviceSetWristDetectionDisabled:completion:
resetDeviceWristDetectionSetting:
notifyCurrentState
enableOnlyRemoteUnlockWithPasscode:completionHandler:
notifyThisDeviceDidUnlock
isUnlockEnabled
setUnlockEnabled:
keyStore
setKeyStore:
responseHandlers
setResponseHandlers:
errorHandlers
setErrorHandlers:
handlerManagementQueue
setHandlerManagementQueue:
_service
_idsQueue
_pairedDeviceVersion
_unlockEnabled
_keyStore
_responseHandlers
_errorHandlers
_handlerManagementQueue
_attributesForPasscodeBlobWithLabel:
newKeyWithLabel:allowAccessWhenLocked:
storeEncryptionKey:withLabel:allowAccessWhenLocked:
hasKeyWithLabel:isPublic:
deleteKeyWithLabel:
decryptBlob:withKeyLabel:
encryptBlob:withKeyLabel:
getEncryptionKeyWithLabel:
bytes
dataWithBytes:length:
dictionaryRepresentation
allocWithZone:
copyWithZone:
mergeFrom:
setHasIsWristDetectionEnabled:
readFrom:
writeTo:
copyTo:
_policy
_hasPasscode
_isLocked
_isUnlockOnly
_isWristDetectionEnabled
_has
setHasPasscodeType:
hasPasscodeType
_actionID
_passcodeType
hasErrorData
hasPasscodeState
success
_errorData
_messageID
_passcodeState
_success
setHasMinimumLength:
hasMinimumLength
_minimumLength
_modificationAllowed
_shouldNotify
initWithMachServiceName:
resume
invalidate
dealloc
didPairForUnlock:error:
didUnpairForUnlock:error:
didEnableOnlyRemoteUnlock:error:
didDisableOnlyRemoteUnlock:error:
remoteDeviceDidCompleteRemoteAction:remoteDeviceState:error:
remoteDeviceDidUnlock
remoteDeviceDidRemoveLockout:error:
didGetRemoteDeviceState:error:
interfaceWithProtocol:
setRemoteObjectInterface:
checkIn
pairForUnlockWithPasscode:
unpairForUnlock
enableOnlyRemoteUnlockWithPasscode:
disableOnlyRemoteUnlock
requestRemoteDeviceRemoteAction:type:
requestRemoteDeviceRemoveLockout
didCompleteRemoteAction:error:
setExportedInterface:
setExportedObject:
_removeConnection:
setInvalidationHandler:
addObject:
processIdentifier
removeObject:
remoteObjectProxy
requestRemoteAction:type:existingPasscode:completion:
requestRemoteAction:type:existingPasscode:showAsReprompt:completion:
setGizmoWantsNotificationOnNextUnlock:
connections
listener:shouldAcceptNewConnection:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
syncObserverRequestsWristDetectionReset:
_handlePasscodeRemoval
gizmoWantsNotificationOnNextUnlock
peer
_listener
_requestRemoteActionHandler
_actionServerConnection
_peer
_connections
currentRunLoop
integerValue
numberWithInteger:
DisableWristDetection
com.apple.Carousel
only supported on watch
CSLDisableWristDetectionChangedNotification
cannot change wrist detect setting if the device is locked
cannot disable wrist detection when unlock only
cannot disable wrist detection, required by configuration
v16@?0@"NSError"8
HasSEP
CSLDeviceLockFailedAttempts
CSLDeviceLockInLockout
/var/mobile/Library/Carousel/LockoutStateJournal.plist
LockoutStateJournal.plist
/var/mobile/Library/PairedUnlock/
com.apple.pairedunlock.lockjournal
v8@?0
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
delegate
T@"<PUUserAuthenticationModelDelegate>",W,N
temporarilyBlocked
TB,R,N,GisTemporarilyBlocked
permanentlyBlocked
TB,R,N,GisPermanentlyBlocked
timeUntilUnblockedSinceReferenceDate
Td,R,N
T@"<PUUserAuthenticationModelDelegate>",W,N,V_delegate
com.apple.nanosystemsettings
erase-data-enabled
PUDefaultKeyBlockedForPasscode
PUDefaultKeyNumberOfFailedPasscodeAttempts
PUDefaultKeyDeviceLockPendingWipe
PUDefaultKeyUnblockTimeIntervalSinceReferenceDate
PUDefaultKeyDeviceLockBlockStateGeneration
com.apple.pairedunlock
pendingWipe
blockedForPasscode
numberOfFailedPasscodeAttempts
unblockTimeSinceReferenceDate
blockStateGeneration
T@"NSNumber",&,D,N
com.apple.paired-unlock
IsUnlockOnly
ShouldDisableOnlyRemoteUnlock
com.apple.pairedunlock.handlermanagement
com.apple.pairedunlock.ids
com.apple.private.alloy.pairedunlock
error
v20@?0B8@"NSError"12
v24@?0@"PURemoteDeviceState"8@"NSError"16
Requested
FAILED to request
 (%@)
v36@?0B8@"NSError"12@"NSString"20@"NSString"28
c5l_%@
v16@?0@8
keyStore
T@"PUKeyStore",&,N,V_keyStore
responseHandlers
T@"NSMutableDictionary",&,N,V_responseHandlers
errorHandlers
T@"NSMutableDictionary",&,N,V_errorHandlers
handlerManagementQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_handlerManagementQueue
T@"<PUPeerDelegate>",N,V_delegate
unlockEnabled
TB,N,GisUnlockEnabled,V_unlockEnabled
PairedUnlock
passcode
%@ %@
hasPasscode
isLocked
isUnlockOnly
isWristDetectionEnabled
policy
TB,N,V_hasPasscode
TB,N,V_isLocked
TB,N,V_isUnlockOnly
hasIsWristDetectionEnabled
TB,N
TB,N,V_isWristDetectionEnabled
hasPolicy
TB,R,N
T@"PUProtoPasscodePolicy",&,N,V_policy
actionID
passcodeType
TI,N,V_actionID
hasPasscodeType
TI,N,V_passcodeType
messageID
success
errorData
passcodeState
TI,N,V_messageID
TB,N,V_success
hasErrorData
T@"NSData",&,N,V_errorData
hasPasscodeState
T@"PUProtoPasscodeState",&,N,V_passcodeState
modificationAllowed
minimumLength
TB,N,V_modificationAllowed
hasMinimumLength
TI,N,V_minimumLength
shouldNotify
TB,N,V_shouldNotify
ShouldNotifyNextUnlock
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
peer
T@"PUPeer",R,N,V_peer
connections
T@"NSMutableSet",R,N,V_connections
gizmoWantsNotificationOnNextUnlock
setting up signal handler for %@
setting wrist detection disabled to %@
couldn't set wrist detection disabled to %@, error %@
calling SEP to set wrist detection disabled to %@
current minimum passcode length is %@
passcode modification allowed: %{BOOL}u
PUUserAuthenticationJournal notePasscodeEntryBegan
PUUserAuthenticationJournal notePasscodeEntryCancelled
PUUserAuthenticationJournal notePasscodeUnlockSucceeded
PUUserAuthenticationJournal notePasscodeUnlockFailedWithError
Updating block time
Beginning speculative charge. Has failure charge outstanding=%s
set failed passcode attempts %d (secondsToBlock=%d)
Canceling speculative charge
Unlock succeeded. Reverting speculative charge
Unlock failed.  Not reverting speculative charge
A passcode attempt failed without a corresponding speculative failure charge. Callstack %@
Wiping device
Loading lock state. pendingWipe=%s permanentlyBlocked=%s
Clearing lock state.
Loading journal key %@ found object %@ of type %@ but expected type %@. Aborting journal loading.
journalGeneration = %lld defaultsGeneration = %lld. Updating defaults from journal
Importing old journal
failed attempts = %@
in lockout = %@
paired device version = %{public}@, %{public}@
Incoming unhandled protobuf: <%@>
Send of message with id:%@ FAILED with error: %@
Connected devices changed, connected = %@, devices = %@
Sending result of message %i (%@) as RESPONSE
Sending result of message %i (%@) as REQUEST
Send protobuf FAILED with error %@
Sent protobuf SUCCEEDED: <%@> with ID: %@
Received protobuf: <%@> with identifier: %@
Calling response handler for message of type %i
Missing handler for message of type %i!
Starting unlock pair
Attempted to pair with incorrect passcode
Attempted to pair while passcode locked
%@ notification of next unlock%@
%@ disabling only remote unlock%@
peer requestDeviceSetWristDetectionDisabled:%@, error: %@
wristDetectDisabled preference has changed to = %@
wristDetectDisabled preference has not changed = %@
Generated random passcode of length %@.
Successfully changed to random passcode; storing
Successfully stored random passcode
FAILED to store new passcode! Bailing back to old one
FAILED to change passcode back! SOMETHING IS HORRIBLY WRONG
FAILED to change passcode
FAILED to generate random passcode
Unlock pairing succeeded; notifying other device of new state
ERROR notifying paired device that we
re in only-remote-unlock mode: %@
Unlock pairing with new passcode FAILED (%@), bailing back to the old one
Successfully changed passcode back. You are now at least no worse off than you were.
FAILED to change passcode back! SOMETHING IS EVEN MORE HORRIBLY WRONG.
replacing empty passcode
enableUnlockWithDevice returned success %@ %@ in state %@
Resetting passcode state = %@
could not enable wrist detection %{public}@
wrist detection enabled by user
wrist detection already enabled
ERROR notifying paired device that we
re out of only-remote-unlock mode: %@
FAILED to change passcode back!
FAILED to find passcode entry in keychain!
Sending repsonse protobuf: <%@>
remote action %@ complete, error = %@
remote action %@ complete
wrist detection enabled
on new hardware, not putting up passcode screen for disabling the wrist detect
wrist detection disabled
wrist detection prepared, putting up passcode screen for unlock pairing
enabled wrist detection and paired unlock, error %@
unlock pairing requested %@
wrist detection enabled prior to unlock pairing or device without SEP
Failed to remove existing passcode: %@
putting up passcode screen
Got request to disable only remote unlock; currently unlocked, so starting that now
Disabled only remote unlock
FAILED to disable unly remote unlock: %@
Got request to disable only remote unlock; currently locked, so waiting until next unlock to do so
Wrist detect setting wasn't returned from remote device
successfully paired for unlocking
failed to pair for unlocking: %@
Not unpairing now; will do so when watch next connects
Server got new connection
Server connection invalidated!
received connection %@
_connections (%@) = %@
Server lost connection %@ to PID %d
Remote device requested passcode action %li
Remote device requested passcode action %li (show as reprompt:%{BOOL}u)
Client connection checked in
could not restore wrist detection setting %@
SIGTERM has been received, exiting...
PUPasscodeState
PUUserAuthenticationJournal
PUUserAuthenticationModel
NSObject
PUSecurityDefaults
DefaultDevice
PUPeer
IDSServiceDelegate
PUKeyStore
PUProtoPasscodeState
NSCopying
PUProtoDidUnlock
PUProtoGetPasscodeState
PUProtoStartRemoteAction
PUProtoRemoveLockout
PUProtoRequestCompleted
PUProtoRequestDisableOnlyRemoteUnlock
PUProtoPasscodePolicy
PUProtoSetShouldNotifyNextUnlock
PUUnlockClient
PUUnlockServer
PUServer
NSXPCListenerDelegate
PUPeerDelegate
MCProfileConnectionObserver
PUPairedSyncObserverDelegate
B16@0:8
@28@0:8B16@20
v28@0:8B16@?20
v20@0:8B16
Q16@0:8
@16@0:8
i20@0:8i16
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@?16
v16@0:8
v24@0:8@16
d16@0:8
v32@0:8@16@24
v24@0:8@?<v@?^B>16
v24@0:8@"NSError"16
@"<PUUserAuthenticationModelDelegate>"16@0:8
v24@0:8@"<PUUserAuthenticationModelDelegate>"16
v32@0:8@"NSDictionary"16@"NSDictionary"24
i16@0:8
B28@0:8^i16i24
B20@0:8i16
@28@0:8@?16B24
@"PUSecurityDefaults"
@"NSString"
@"NSObject<OS_dispatch_queue>"
@"NSDictionary"
@"<PUUserAuthenticationModelDelegate>"
@24@0:8@16
v64@0:8@16@24@32@40@48@56
v40@0:8@16@24@32
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v48@0:8@16@24@32@40
v40@0:8@16@24@?32
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
I16@0:8
v20@0:8I16
@?24@0:8@16
v32@0:8@?16@24
v40@0:8S16@20B28@32
@52@0:8S16@20B28B32@?36^@44
v44@0:8S16@20@28^@36
@48@0:8@16B24B28@32^@40
v32@0:8@16@?24
v40@0:8q16q24@?32
v36@0:8B16@20@?28
@"IDSService"
@"<PUPeerDelegate>"
@"PUKeyStore"
@"NSMutableDictionary"
@28@0:8@16B24
v36@0:8@16@24B32
B28@0:8@16B24
@32@0:8@16@24
B32@0:8@16@24
@24@0:8^{_NSZone=}16
@"PUProtoPasscodePolicy"
{?="isWristDetectionEnabled"b1}
{?="passcodeType"b1}
@"NSData"
@"PUProtoPasscodeState"
{?="minimumLength"b1}
v28@0:8B16@20
v36@0:8B16@20@28
v28@0:8B16@"NSError"20
v36@0:8B16@"PURemoteDeviceState"20@"NSError"28
v32@0:8@"PURemoteDeviceState"16@"NSError"24
v32@0:8q16q24
v24@0:8@"NSString"16
v24@0:8@?<v@?@"PURemoteDeviceState"@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v36@0:8@16B24@28
v56@0:8@16q24q32@40@?48
v60@0:8@16q24q32@40B48@?52
v28@0:8@16B24
v36@0:8@"PUPeer"16B24@"NSError"28
v24@0:8@"PUPeer"16
v40@0:8@"PUPeer"16@"PURemoteDeviceState"24@"NSError"32
v56@0:8@"PUPeer"16q24q32@"NSString"40@?<v@?@"PURemoteDeviceState"@"NSError">48
v60@0:8@"PUPeer"16q24q32@"NSString"40B48@?<v@?@"PURemoteDeviceState"@"NSError">52
v28@0:8@"PUPeer"16B24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
v24@0:8@"PUPairedSyncObserver"16
@"NSXPCListener"
@"NSXPCConnection"
@"PUPeer"
@"NSMutableSet"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.BTServer.allowQuickRSSIRead</key>
<true/>
<key>com.apple.carousel.onWristMonitor.actions</key>
<array>
<string>monitor</string>
</array>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.nano.nanoregistry.pairunpairobliterate</key>
<true/>
<key>com.apple.private.applesse.allow</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.pairedunlock</string>
</array>
<key>com.apple.private.sharing.unlock-manager</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.paired-unlock</string>
</array>
</dict>
</plist>
