DYGLShaderProfilerMobileSupport
1D!1
DYShaderAnalyzerNextGPU
isRenderBeginWithEvents:type:
isRenderEndWithEvents:type:
isFramebufferFetchWithEvents:type:
initWithDelegate:
deviceInfo
platform
metalPluginForPlatform:
isForInternalTool
shaderAnalyzer
shaderAnalyzerDyson
setName:
length
_calculatePerLineCostWithSampleData:binary:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:
_calculatePerDrawCallCostWithSampleData:targetIndex:
_calculatePerLineCostWithSampleData:binary:targetIndex:withKey:withShaderSourcePath:withALUBlocks:
_calculatePerDrawCallWithGRCSampleData:targetIndex:
analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:withALUBlocks:
bytes
setTotalCost:
dictionaryWithCapacity:
setDrawCallCost:
numberWithDouble:
numberWithUnsignedInt:
setObject:forKeyedSubscript:
objectAtIndexedSubscript:
objectForKeyedSubscript:
doubleValue
enumerateKeysAndObjectsUsingBlock:
defaultManager
fileExistsAtPath:
UTF8String
characterSetWithCharactersInString:
invertedSet
stringWithUTF8String:
lastPathComponent
stringByDeletingPathExtension
componentsSeparatedByCharactersInSet:
componentsJoinedByString:
addObject:
count
numberWithInt:
dataWithJSONObject:options:error:
initWithData:encoding:
writeToFile:atomically:encoding:error:
setPerFileCost:
_createPerFileCostDictionaryWith:lineOffset:
perFileCost
allValues
setTotalPerLineCost:
setDrawCallPerLineCost:
stringByStandardizingPath
setSourcePath:
setLineIndex:
setBinaryRangeInfo:
setDisassembledLineInfo:
setOffset:
setDisasmSource:
setIrSource:
setCost:
setCostPercentage:
setOpcodeType:
setOpcodeSubType:
setOpcode:
disassembledLineInfo
setCallStackInfo:
setFunction:
setFile:
setDirectory:
callStackInfo
binaryRangeInfo
setBinaryDisassemblyInfo:
setSourceInfo:
_getDebugInfoForBinary:withTextSegment:forTargetIndex:forKey:
_getAddressAndLineTableForDebugInfo:
_ProcessLineList:forFileCostMap:forDebugInfo:andCost:forAddr:andDrawIndex:andTargetIndex:withDefaultDisassemblyInfo:withALUInstructionType:
blockOperationWithBlock:
addDependency:
addOperation:
waitUntilFinished
_processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:
_waitLatencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:
_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:
_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:
dictionary
_createPerLineCostDictionaryWith:lineOffset:
supportRendererType:
isDisassemblerAvailable
setupForAnalysis
analyzeBinary:uscSamples:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:
analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:
platformShaderAnalyzer
.cxx_destruct
.cxx_construct
_platformShaderAnalyzer
_isForInternalTool
_parallelQueue
_mutex
dataWithData:
writeToURL:atomically:
path
setupShaderInstructionInfoForBinary:forTargetIndex:
shaderInstructionInfoWithStartOffset:endOffset:
shaderInstructionInfoFromBinary:withStartOffset:forLength:targetIndex:
countByEnumeratingWithState:objects:count:
diassemblyString
irString
cost
opCodeType
opCodeSubType
opCode
offset
fileExistsAtPath:isDirectory:
removeItemAtURL:error:
c28@0:8^v16I24
c20@0:8i16
c16@0:8
@24@0:8@16
v16@0:8
@72@0:8@16@24i32@36@44@52I60@64
@60@0:8@16@24i32@36@44r^v52
@52@0:8@16@24i32@36@44
@28@0:8@16i24
d28@0:8@16I24
d36@0:8@16I24@28
{DebugInfo={vector<DebugInfo::LineEntry, std::allocator<DebugInfo::LineEntry>>=^{LineEntry}^{LineEntry}{__compressed_pair<DebugInfo::LineEntry *, std::allocator<DebugInfo::LineEntry>>=^{LineEntry}}}{vector<DebugInfo::LineDisassemblyInfo, std::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}^{LineDisassemblyInfo}{__compressed_pair<DebugInfo::LineDisassemblyInfo *, std::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}}}{unordered_map<std::string, unsigned int, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, unsigned int>>>={__hash_table<std::__hash_value_type<std::string, unsigned int>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned int>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned int>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, unsigned int>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned int>, std::hash<std::string>, std::equal_to<std::string>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned int>, std::equal_to<std::string>, std::hash<std::string>, true>>=f}}}{vector<std::string, std::allocator<std::string>>=^v^v{__compressed_pair<std::string *, std::allocator<std::string>>=^v}}IIIII}44@0:8@16@24i32@36
{pair<std::vector<unsigned int>, std::vector<std::vector<DebugInfo::LineEntry *>>>={vector<unsigned int, std::allocator<unsigned int>>=^I^I{__compressed_pair<unsigned int *, std::allocator<unsigned int>>=^I}}{vector<std::vector<DebugInfo::LineEntry *>, std::allocator<std::vector<DebugInfo::LineEntry *>>>=^v^v{__compressed_pair<std::vector<DebugInfo::LineEntry *> *, std::allocator<std::vector<DebugInfo::LineEntry *>>>=^v}}}24@0:8^v16
v72@0:8^v16^v24^v32d40I48I52i56r^{LineDisassemblyInfo=@@dIIII}60B68
@72@0:8^v16^v24^v32d40@48@56^v64
@28@0:8r^v16I24
@16@0:8
@"<DYPShaderAnalyzer>"
@"NSOperationQueue"
{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}
MbP?
L>St12length_error
St11logic_error
St9exception
St8bad_cast
gputools.GPUToolsDebugger.GPUToolsPlatform.ShaderProfiler.ParallelQueue
v8@?0
GlobalLoad
v32@?0@8@"NSNumber"16^c24
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
/tmp/com.apple.gputools.profiling/shaderProfilerResults/shader_cost_%s_%s.txt
SourceFiles
LineData
source
line
cost
percent
%u: %s      %.1f %.2f%%
%u: %s
ShaderRangeInfo
lineIndex
function
filename
fullpath
directory
      -----> %u:  %s : %s
callstackInfos
diassembly
offset
disasm
    %d %s %u %.1f %.2f%%
    %d %s
----------- Full Binary Disassembly -----------
disasmSource
irSource
costPercentage
opcodeType
opcodeSubType
opcode
    %d %s [%u %u] %.1f %.2f%%
    %d %s [%u %u]
binaryDisassemblyInfo
/tmp/com.apple.gputools.profiling/shaderProfilerResults/json/shader_cost_%s_%s.json
allDrawCall
perDrawCall
/program_source
Offset
GlobalStore
Sample
LocalLoad
LocalStore
totalCost
perLineCost
16777235-0
::air.vertexFetchFunction()
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
DYGLShaderProfilerMobileSupport
1D!1
DYShaderAnalyzerNextGPU
setFile:
platform
setDrawCallCost:
callStackInfo
setLineIndex:
opCode
setTotalPerLineCost:
irString
UTF8String
count
writeToFile:atomically:encoding:error:
setOpcodeSubType:
numberWithDouble:
setCallStackInfo:
deviceInfo
addOperation:
offset
setDisassembledLineInfo:
setTotalCost:
doubleValue
bytes
shaderInstructionInfoFromBinary:withStartOffset:forLength:targetIndex:
cost
invertedSet
perFileCost
setIrSource:
waitUntilFinished
defaultManager
setBinaryRangeInfo:
setOpcode:
addObject:
metalPluginForPlatform:
setOpcodeType:
setCost:
allValues
numberWithInt:
diassemblyString
writeToURL:atomically:
setName:
isForInternalTool
stringByDeletingPathExtension
countByEnumeratingWithState:objects:count:
setDrawCallPerLineCost:
characterSetWithCharactersInString:
fileExistsAtPath:
opCodeSubType
setCostPercentage:
numberWithUnsignedInt:
setPerFileCost:
dictionary
setObject:forKeyedSubscript:
stringByStandardizingPath
lastPathComponent
dataWithData:
removeItemAtURL:error:
opCodeType
enumerateKeysAndObjectsUsingBlock:
shaderAnalyzer
componentsJoinedByString:
binaryRangeInfo
setDirectory:
fileExistsAtPath:isDirectory:
dictionaryWithCapacity:
objectAtIndexedSubscript:
setSourceInfo:
setBinaryDisassemblyInfo:
dataWithJSONObject:options:error:
addDependency:
setOffset:
stringWithUTF8String:
length
shaderAnalyzerDyson
setFunction:
initWithData:encoding:
componentsSeparatedByCharactersInSet:
path
setSourcePath:
objectForKeyedSubscript:
disassembledLineInfo
setDisasmSource:
blockOperationWithBlock:
isRenderBeginWithEvents:type:
isRenderEndWithEvents:type:
isFramebufferFetchWithEvents:type:
initWithDelegate:
supportRendererType:
isDisassemblerAvailable
setupForAnalysis
analyzeBinary:uscSamples:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:
analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:withALUBlocks:
analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:
_calculatePerDrawCallWithGRCSampleData:targetIndex:
_calculatePerDrawCallCostWithSampleData:targetIndex:
_waitLatencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:
_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:
_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:
_getDebugInfoForBinary:withTextSegment:forTargetIndex:forKey:
_getAddressAndLineTableForDebugInfo:
_ProcessLineList:forFileCostMap:forDebugInfo:andCost:forAddr:andDrawIndex:andTargetIndex:withDefaultDisassemblyInfo:withALUInstructionType:
_processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:
_calculatePerLineCostWithSampleData:binary:targetIndex:withKey:withShaderSourcePath:withALUBlocks:
_calculatePerLineCostWithSampleData:binary:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:
_createPerLineCostDictionaryWith:lineOffset:
_createPerFileCostDictionaryWith:lineOffset:
platformShaderAnalyzer
.cxx_destruct
.cxx_construct
_platformShaderAnalyzer
_isForInternalTool
_parallelQueue
_mutex
setupShaderInstructionInfoForBinary:forTargetIndex:
shaderInstructionInfoWithStartOffset:endOffset:
B28@0:8^v16I24
B20@0:8i16
B16@0:8
@24@0:8@16
v16@0:8
@72@0:8@16@24i32@36@44@52I60@64
@60@0:8@16@24i32@36@44r^v52
@52@0:8@16@24i32@36@44
@28@0:8@16i24
d28@0:8@16I24
d36@0:8@16I24@28
{DebugInfo={vector<DebugInfo::LineEntry, std::allocator<DebugInfo::LineEntry>>=^{LineEntry}^{LineEntry}{__compressed_pair<DebugInfo::LineEntry *, std::allocator<DebugInfo::LineEntry>>=^{LineEntry}}}{vector<DebugInfo::LineDisassemblyInfo, std::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}^{LineDisassemblyInfo}{__compressed_pair<DebugInfo::LineDisassemblyInfo *, std::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}}}{unordered_map<std::string, unsigned int, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, unsigned int>>>={__hash_table<std::__hash_value_type<std::string, unsigned int>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned int>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned int>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, unsigned int>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned int>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned int>, std::hash<std::string>, std::equal_to<std::string>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned int>, std::equal_to<std::string>, std::hash<std::string>, true>>=f}}}{vector<std::string, std::allocator<std::string>>=^v^v{__compressed_pair<std::string *, std::allocator<std::string>>=^v}}IIIII}44@0:8@16@24i32@36
{pair<std::vector<unsigned int>, std::vector<std::vector<DebugInfo::LineEntry *>>>={vector<unsigned int, std::allocator<unsigned int>>=^I^I{__compressed_pair<unsigned int *, std::allocator<unsigned int>>=^I}}{vector<std::vector<DebugInfo::LineEntry *>, std::allocator<std::vector<DebugInfo::LineEntry *>>>=^v^v{__compressed_pair<std::vector<DebugInfo::LineEntry *> *, std::allocator<std::vector<DebugInfo::LineEntry *>>>=^v}}}24@0:8^v16
v72@0:8^v16^v24^v32d40I48I52i56r^{LineDisassemblyInfo=@@dIIII}60B68
@72@0:8^v16^v24^v32d40@48@56^v64
@28@0:8r^v16I24
@16@0:8
@"<DYPShaderAnalyzer>"
@"NSOperationQueue"
{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}
MbP?
St12length_error
St11logic_error
St9exception
St8bad_cast
gputools.GPUToolsDebugger.GPUToolsPlatform.ShaderProfiler.ParallelQueue
v8@?0
GlobalLoad
v32@?0@8@"NSNumber"16^B24
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
/tmp/com.apple.gputools.profiling/shaderProfilerResults/shader_cost_%s_%s.txt
SourceFiles
LineData
source
line
cost
percent
%u: %s      %.1f %.2f%%
%u: %s
ShaderRangeInfo
lineIndex
function
filename
fullpath
directory
      -----> %u:  %s : %s
callstackInfos
diassembly
offset
disasm
    %d %s %u %.1f %.2f%%
    %d %s
----------- Full Binary Disassembly -----------
disasmSource
irSource
costPercentage
opcodeType
opcodeSubType
opcode
    %d %s [%u %u] %.1f %.2f%%
    %d %s [%u %u]
binaryDisassemblyInfo
/tmp/com.apple.gputools.profiling/shaderProfilerResults/json/shader_cost_%s_%s.json
allDrawCall
perDrawCall
/program_source
Offset
GlobalStore
Sample
LocalLoad
LocalStore
totalCost
perLineCost
16777235-0
::air.vertexFetchFunction()
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
