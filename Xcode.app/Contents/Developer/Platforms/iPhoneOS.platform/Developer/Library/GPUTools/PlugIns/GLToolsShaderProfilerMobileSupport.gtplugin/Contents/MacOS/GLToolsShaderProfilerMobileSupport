DYGLShaderProfilerMobileSupport
0C!1
DYShaderAnalyzerNextGPU
isRenderBeginWithEvents:type:
isRenderEndWithEvents:type:
isFramebufferFetchWithEvents:type:
initWithDelegate:
deviceInfo
platform
metalPluginForPlatform:
isForInternalTool
shaderAnalyzer
shaderAnalyzerDyson
setName:
length
_calculatePerLineCostWithSampleData:binary:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:
_calculatePerDrawCallCostWithSampleData:targetIndex:
_calculatePerLineCostWithSampleData:binary:targetIndex:withKey:withShaderSourcePath:
_calculatePerDrawCallWithGRCSampleData:targetIndex:
bytes
setTotalCost:
dictionaryWithCapacity:
setDrawCallCost:
numberWithDouble:
numberWithUnsignedInt:
setObject:forKeyedSubscript:
objectAtIndexedSubscript:
objectForKeyedSubscript:
doubleValue
enumerateKeysAndObjectsUsingBlock:
defaultManager
fileExistsAtPath:
UTF8String
characterSetWithCharactersInString:
invertedSet
stringWithUTF8String:
lastPathComponent
stringByDeletingPathExtension
componentsSeparatedByCharactersInSet:
componentsJoinedByString:
addObject:
count
numberWithInt:
dataWithJSONObject:options:error:
initWithData:encoding:
writeToFile:atomically:encoding:error:
setPerFileCost:
_createPerFileCostDictionaryWith:lineOffset:
perFileCost
allValues
setTotalPerLineCost:
setDrawCallPerLineCost:
stringByStandardizingPath
setSourcePath:
setLineIndex:
setBinaryRangeInfo:
setDisassembledLineInfo:
setOffset:
setDisasmSource:
setIrSource:
setCost:
setCostPercentage:
setOpcodeType:
setOpcodeSubType:
setOpcode:
disassembledLineInfo
setCallStackInfo:
setFunction:
setFile:
setDirectory:
callStackInfo
binaryRangeInfo
setBinaryDisassemblyInfo:
setSourceInfo:
_getDebugInfoForBinary:withTextSegment:forTargetIndex:
_getAddressAndLineTableForDebugInfo:
_ProcessLineList:forFileCostMap:forDebugInfo:andCost:forAddr:andDrawIndex:andTargetIndex:withDefaultDisassemblyInfo:
blockOperationWithBlock:
addDependency:
addOperation:
waitUntilFinished
_processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:
arrayWithObjects:count:
_waitLatencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:
_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:
_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:
dictionary
_createPerLineCostDictionaryWith:lineOffset:
supportRendererType:
isDisassemblerAvailable
setupForAnalysis
analyzeBinary:uscSamples:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:
analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:
platformShaderAnalyzer
.cxx_destruct
.cxx_construct
_platformShaderAnalyzer
_isForInternalTool
_parallelQueue
_mutex
dataWithData:
writeToURL:atomically:
path
setupShaderInstructionInfoForBinary:forTargetIndex:
shaderInstructionInfoWithStartOffset:endOffset:
shaderInstructionInfoFromBinary:withStartOffset:forLength:targetIndex:
countByEnumeratingWithState:objects:count:
diassemblyString
irString
cost
opCodeType
opCodeSubType
opCode
offset
fileExistsAtPath:isDirectory:
removeItemAtURL:error:
c28@0:8^v16I24
c20@0:8i16
c16@0:8
@24@0:8@16
v16@0:8
@72@0:8@16@24i32@36@44@52I60@64
@52@0:8@16@24i32@36@44
@28@0:8@16i24
d28@0:8@16I24
d36@0:8@16I24@28
{DebugInfo={vector<DebugInfo::LineEntry, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}^{LineEntry}{__compressed_pair<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}}}{vector<DebugInfo::LineDisassemblyInfo, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}^{LineDisassemblyInfo}{__compressed_pair<DebugInfo::LineDisassemblyInfo *, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}}}{unordered_map<std::__1::basic_string<char>, unsigned int, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>>={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *>>>={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>>=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>>=f}}}{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}}}IIIII}36@0:8@16@24i32
{pair<std::__1::vector<unsigned int>, std::__1::vector<std::__1::vector<DebugInfo::LineEntry *>>>={vector<unsigned int, std::__1::allocator<unsigned int>>=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int>>=^I}}{vector<std::__1::vector<DebugInfo::LineEntry *>, std::__1::allocator<std::__1::vector<DebugInfo::LineEntry *>>>=^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>}^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>}{__compressed_pair<std::__1::vector<DebugInfo::LineEntry *> *, std::__1::allocator<std::__1::vector<DebugInfo::LineEntry *>>>=^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>}}}}24@0:8^{DebugInfo={vector<DebugInfo::LineEntry, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}^{LineEntry}{__compressed_pair<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}}}{vector<DebugInfo::LineDisassemblyInfo, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}^{LineDisassemblyInfo}{__compressed_pair<DebugInfo::LineDisassemblyInfo *, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}}}{unordered_map<std::__1::basic_string<char>, unsigned int, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>>={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *>>>={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>>=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>>=f}}}{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}}}IIIII}16
v68@0:8^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>=^^{LineEntry}^^{LineEntry}{__compressed_pair<DebugInfo::LineEntry **, std::__1::allocator<DebugInfo::LineEntry *>>=^^{LineEntry}}}16^{vector<PerFileCost, std::__1::allocator<PerFileCost>>=^{PerFileCost}^{PerFileCost}{__compressed_pair<PerFileCost *, std::__1::allocator<PerFileCost>>=^{PerFileCost}}}24^{DebugInfo={vector<DebugInfo::LineEntry, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}^{LineEntry}{__compressed_pair<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}}}{vector<DebugInfo::LineDisassemblyInfo, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}^{LineDisassemblyInfo}{__compressed_pair<DebugInfo::LineDisassemblyInfo *, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}}}{unordered_map<std::__1::basic_string<char>, unsigned int, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>>={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *>>>={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>>=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>>=f}}}{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}}}IIIII}32d40I48I52i56r^{LineDisassemblyInfo=@@dIIII}60
@72@0:8^{vector<std::__1::vector<DebugInfo::LineEntry *>, std::__1::allocator<std::__1::vector<DebugInfo::LineEntry *>>>=^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>}^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>}{__compressed_pair<std::__1::vector<DebugInfo::LineEntry *> *, std::__1::allocator<std::__1::vector<DebugInfo::LineEntry *>>>=^{vector<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry *>>}}}16^{vector<PerFileCost, std::__1::allocator<PerFileCost>>=^{PerFileCost}^{PerFileCost}{__compressed_pair<PerFileCost *, std::__1::allocator<PerFileCost>>=^{PerFileCost}}}24^{DebugInfo={vector<DebugInfo::LineEntry, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}^{LineEntry}{__compressed_pair<DebugInfo::LineEntry *, std::__1::allocator<DebugInfo::LineEntry>>=^{LineEntry}}}{vector<DebugInfo::LineDisassemblyInfo, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}^{LineDisassemblyInfo}{__compressed_pair<DebugInfo::LineDisassemblyInfo *, std::__1::allocator<DebugInfo::LineDisassemblyInfo>>=^{LineDisassemblyInfo}}}{unordered_map<std::__1::basic_string<char>, unsigned int, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>>={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *> *>>=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *>>>={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::hash<std::__1::basic_string<char>>, true>>=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, unsigned int>, std::__1::equal_to<std::__1::basic_string<char>>, true>>=f}}}{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char>>>=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>}}}IIIII}32d40@48@56^{unordered_map<unsigned int, double, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, double>>>={__hash_table<std::__1::__hash_value_type<unsigned int, double>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, double>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, double>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, double>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *> *>>={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *> *>>=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *>>>={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, double>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, double>, std::__1::hash<unsigned int>, true>>=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, double>, std::__1::equal_to<unsigned int>, true>>=f}}}64
@28@0:8r^{PerLineCost={vector<double, std::__1::allocator<double>>=^d^d{__compressed_pair<double *, std::__1::allocator<double>>=^d}}d}16I24
@28@0:8r^{PerFileCost={PerLineCost={vector<double, std::__1::allocator<double>>=^d^d{__compressed_pair<double *, std::__1::allocator<double>>=^d}}d}{unordered_map<unsigned int, PerFileCost::PerLineCost, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, PerFileCost::PerLineCost>>>={__hash_table<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>>>={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *> *>>>={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *> *>>>=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *> *>>={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *> *>>=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *>>>={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, std::__1::hash<unsigned int>, true>>=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, PerFileCost::PerLineCost>, std::__1::equal_to<unsigned int>, true>>=f}}}}16I24
@16@0:8
@"<DYPShaderAnalyzer>"
@"NSOperationQueue"
{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}
MbP?
L>St12length_error
St11logic_error
St9exception
St8bad_cast
gputools.GPUToolsDebugger.GPUToolsPlatform.ShaderProfiler.ParallelQueue
v8@?0
GlobalLoad
v32@?0@8@"NSNumber"16^c24
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
/tmp/com.apple.gputools.profiling/shaderProfilerResults/shader_cost_%s_%s.txt
SourceFiles
LineData
source
line
cost
percent
%u: %s      %.1f %.2f%%
%u: %s
ShaderRangeInfo
lineIndex
function
filename
fullpath
directory
      -----> %u:  %s : %s
callstackInfos
diassembly
offset
disasm
    %d %s %.1f %.2f%%
    %d %s
----------- Full Binary Disassembly -----------
disasmSource
irSource
costPercentage
opcodeType
opcodeSubType
opcode
    %d %s [%u %u] %.1f %.2f%%
    %d %s [%u %u]
binaryDisassemblyInfo
/tmp/com.apple.gputools.profiling/shaderProfilerResults/json/shader_cost_%s_%s.json
allDrawCall
perDrawCall
/program_source
Offset
GlobalStore
Sample
LocalLoad
LocalStore
totalCost
perLineCost
16777235-0
::air.vertexFetchFunction()
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
