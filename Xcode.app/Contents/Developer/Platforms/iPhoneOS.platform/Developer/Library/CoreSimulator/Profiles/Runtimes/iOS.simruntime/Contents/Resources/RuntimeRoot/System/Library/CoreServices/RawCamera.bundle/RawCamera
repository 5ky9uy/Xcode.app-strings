%g
% g
%"g
%$g
%&g
%(g
%*g
%,g
%.g
%0g
%2g
%4g
%6g
%8g
%:g
%<g
%>g
%@g
%Bg
%Dg
%Fg
%Hg
%Jg
%Lg
%Ng
%Pg
%Rg
%Tg
%Vg
%Xg
%Zg
%\g
%^g
%`g
%bg
%dg
%fg
%hg
%jg
%lg
%ng
%pg
%rg
%tg
%vg
%xg
%zg
%|g
%~g
%h
% h
%"h
%$h
%&h
%(h
%*h
%,h
%.h
%0h
%2h
%4h
%6h
%8h
%:h
%<h
%>h
%@h
%Bh
%Dh
%Fh
%Hh
%Jh
%Lh
%Nh
%Ph
%Rh
%Th
%Vh
%Xh
%Zh
%\h
%^h
%`h
%bh
%dh
%fh
%hh
%jh
%lh
%nh
%ph
%rh
%th
%vh
%xh
%zh
%|h
%~h
%i
% i
%"i
%$i
%&i
%(i
%*i
%,i
%.i
%0i
%2i
%4i
%6i
%8i
%:i
%<i
%>i
%@i
%Bi
%Di
%Fi
%Hi
%Ji
%Li
%Ni
%Pi
%Ri
%Ti
%Vi
%Xi
%Zi
%\i
%^i
%`i
%bi
%di
%fi
%hi
%ji
%li
%ni
%pi
%ri
%ti
%vi
%xi
%zi
%|i
%~i
P19CRawCameraException
19CRawCameraException
7CStream
NSt3__123enable_shared_from_thisI7CStreamEE
NSt3__120__shared_ptr_emplaceI11CFileStreamNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI13CMemoryStreamNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI14CSessionStreamNS_9allocatorIS1_EEEE
16CAutoreleasePool
7CObject
?333333
i@333333
?ffffff
@$(~
?14CRawProperties
30CISOTableNoiseCharacterization
22CNoiseCharacterization
29CISOPolyNoiseCharacterization
37CISOPolyHighlighNoiseCharacterization
11CFileStream
13CMemoryStream
12CImageParser
20CRawImageUnsupported
NSt3__120__shared_ptr_emplaceI22CEmbeddedJPEGThumbnailNS_9allocatorIS1_EEEE
MbP?
9CRawImage
16CTIFFImageParser
NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__120__shared_ptr_emplaceI22CEmbeddedTIFFThumbnailNS_9allocatorIS1_EEEE
7CMethod
NSt3__120__shared_ptr_emplaceI7CMethodNS_9allocatorIS1_EEEE
PSt9exception
17CDNGLossyUnpacker
20COpcodeMapPolynomial
20CCanonCR2ImageParser
30TImageParserRuntimeTypeFactoryI20CCanonCR2ImageParserE
23CImageParserBaseFactory
22CMinoltaMRWImageParser
30TImageParserRuntimeTypeFactoryI22CMinoltaMRWImageParserE
22COlympusORFImageParser
30TImageParserRuntimeTypeFactoryI22COlympusORFImageParserE
NSt3__120__shared_ptr_emplaceI26CAdobeLensCorrectionFilterNS_9allocatorIS1_EEEE
24COlympusORFORImageParser
30TImageParserRuntimeTypeFactoryI24COlympusORFORImageParserE
NSt3__120__shared_ptr_emplaceI17CUnpackedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI20COlympusE300UnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI20COlympusE410UnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI17CPacked12UnpackerNS_9allocatorIS1_EEEE
24COlympusORFSRImageParser
30TImageParserRuntimeTypeFactoryI24COlympusORFSRImageParserE
?24COutputToneResponseCurve
29CLeicaPanasonicRAWImageParser
30TImageParserRuntimeTypeFactoryI29CLeicaPanasonicRAWImageParserE
NSt3__120__shared_ptr_emplaceI30CPanasonicLensCorrectionFilterNS_9allocatorIS1_EEEE
aaaaIIII
1111!!!!
19CFujiRAFImageParser
30TImageParserRuntimeTypeFactoryI19CFujiRAFImageParserE
NSt3__120__shared_ptr_emplaceI25CFujiLensCorrectionFilterNS_9allocatorIS1_EEEE
20CCanonTIFImageParser
30TImageParserRuntimeTypeFactoryI20CCanonTIFImageParserE
12CImagePlugin
14CSessionStream
20CCanonRawImageParser
21COpcodeScalePerColumn
11COpcodeBase
333?
916CCIFFImageParser
30TImageParserRuntimeTypeFactoryI16CCIFFImageParserE
NSt3__120__shared_ptr_emplaceI11CSensorDataNS_9allocatorIS1_EEEE
13CClientBundle
11CSystemInfo
z>19CSonyARWImageParser
30TImageParserRuntimeTypeFactoryI19CSonyARWImageParserE
NSt3__120__shared_ptr_emplaceI24CPacked12SwappedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI23CSonyCompressedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI17CSonyA100UnpackerNS_9allocatorIS1_EEEE
19CSonySRFImageParser
30TImageParserRuntimeTypeFactoryI19CSonySRFImageParserE
21CPentaxPEFImageParser
30TImageParserRuntimeTypeFactoryI21CPentaxPEFImageParserE
19CLeafMOSImageParser
30TImageParserRuntimeTypeFactoryI19CLeafMOSImageParserE
NSt3__120__shared_ptr_emplaceI28CLosslessJpegRestartUnpackerNS_9allocatorIS1_EEEE
?ffffff
rJ@L
20CAdobeDNGImageParser
30TImageParserRuntimeTypeFactoryI20CAdobeDNGImageParserE
NSt3__120__shared_ptr_pointerIP11COpcodeBaseNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI11COpcodeBaseEE
NSt3__120__shared_ptr_emplaceI24CDNGUncompressedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI34CDNGUncompressedLinearizedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI24CDNGLosslessJpegUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI34CDNGLosslessJpegLinearizedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI13CLjpgUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI17CDNGLossyUnpackerNS_9allocatorIS1_EEEE
14COpcodeGainMap
25CHasselbladFFFImageParser
30TImageParserRuntimeTypeFactoryI25CHasselbladFFFImageParserE
25CHasselblad3FRImageParser
30TImageParserRuntimeTypeFactoryI25CHasselblad3FRImageParserE
5CData
12CMutableData
9CUnpacker
11CSensorData
NSt3__123enable_shared_from_thisI11CSensorDataEE
21CLosslessJpegUnpacker
5@20CKodakDCRImageParser
30TImageParserRuntimeTypeFactoryI20CKodakDCRImageParserE
NSt3__120__shared_ptr_emplaceI26CKodakUncompressedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI21CLosslessJpegUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI24CKodakCompressedUnpackerNS_9allocatorIS1_EEEE
20COlympusE300Unpacker
17CSonyA100Unpacker
9Z8'
\K:)
24CNikonCompressedUnpacker
17CPacked12Unpacker
30COlympus2FieldPacked12Unpacker
17CUnpackedUnpacker
27CUnpackedLE16Shift4Unpacker
34CUnpackedLE16Shift4Remove0Unpacker
13CSonyUnpacker
30CTIFFIdentificationImageParser
27CRawImageCalibratedAdobeDNG
17CRawImageCanonD30
30CCanonD30WhiteBalanceTagParser
20CIndexTagValueParserIjE
15CTagValueParserIjE
17CRawImageCanonD60
25CRawImageCanonPowerShotG5
25CRawImageCanonPowerShotG9
18CRawImageNikonD100
15CFujiS2Unpacker
19CPentaxK10DUnpacker
15CFujiS3Unpacker
I@-C
14CCameraProfile
22COpcodeWarpRectilinear
24COpcodeFixVignetteRadial
333333
21CRawImageCanonCR2Base
30CCanonD60WhiteBalanceTagParser
>21CHasselbladSourceInfo
28CHasselbladCalibrationHeader
18CEmbeddedThumbnail
22CEmbeddedJPEGThumbnail
18COpcodeWarpFisheye
22CEmbeddedTIFFThumbnail
19CSonySR2ImageParser
30TImageParserRuntimeTypeFactoryI19CSonySR2ImageParserE
15CRawImageSonyR1
17CRawImageAdobeDNG
27TRawImageRuntimeTypeFactoryI19CRawImagePluginBaseE
20CRawImageBaseFactory
27TRawImageRuntimeTypeFactoryI21CRawImageCanonTIFBaseE
27TRawImageRuntimeTypeFactoryI21CRawImageCanonCR2BaseE
27TRawImageRuntimeTypeFactoryI22CRawImageCanonSRawBaseE
27TRawImageRuntimeTypeFactoryI27CRawImageCanonPowerShotBaseE
27TRawImageRuntimeTypeFactoryI25CRawImageCanonPowerShotG9E
27TRawImageRuntimeTypeFactoryI21CRawImageCanonCRWBaseE
27TRawImageRuntimeTypeFactoryI25CRawImageCanonPowerShotG5E
27TRawImageRuntimeTypeFactoryI17CRawImageCanonD30E
27TRawImageRuntimeTypeFactoryI17CRawImageCanonD60E
27TRawImageRuntimeTypeFactoryI17CRawImageFujiBaseE
27TRawImageRuntimeTypeFactoryI22CRawImageFujiBayerBaseE
27TRawImageRuntimeTypeFactoryI27CRawImageLeicaPanasonicBaseE
27TRawImageRuntimeTypeFactoryI20CRawImageMinoltaBaseE
27TRawImageRuntimeTypeFactoryI27CRawImageOlympusCSeriesBaseE
27TRawImageRuntimeTypeFactoryI20CRawImageOlympusBaseE
27TRawImageRuntimeTypeFactoryI17CRawImageLeafBaseE
27TRawImageRuntimeTypeFactoryI19CRawImageMamiyaDM22E
19CRawImageMamiyaDM22
27TRawImageRuntimeTypeFactoryI19CRawImageMamiyaDM40E
19CRawImageMamiyaDM40
27TRawImageRuntimeTypeFactoryI26CRawImageHasselbladFFFBaseE
27TRawImageRuntimeTypeFactoryI26CRawImageHasselblad3FRBaseE
30TImageParserRuntimeTypeFactoryI17CNikonImageParserE
27TRawImageRuntimeTypeFactoryI18CRawImageNikonBaseE
27TRawImageRuntimeTypeFactoryI22CRawImageNikonRawSBaseE
27TRawImageRuntimeTypeFactoryI28CRawImageNikon12Bit14BitBaseE
27TRawImageRuntimeTypeFactoryI25CRawImageNikonCoolpixBaseE
27TRawImageRuntimeTypeFactoryI21CRawImageNikonNRWBaseE
21CRawImageNikonNRWBase
27TRawImageRuntimeTypeFactoryI18CRawImageNikonD100E
27TRawImageRuntimeTypeFactoryI19CRawImagePentaxBaseE
30TImageParserRuntimeTypeFactoryI22CSamsungSRWImageParserE
27TRawImageRuntimeTypeFactoryI23CRawImageSamsungSRWBaseE
27TRawImageRuntimeTypeFactoryI20CRawImageSonySRFBaseE
27TRawImageRuntimeTypeFactoryI15CRawImageSonyR1E
27TRawImageRuntimeTypeFactoryI20CRawImageSonyARWBaseE
30TImageParserRuntimeTypeFactoryI20CEpsonERFImageParserE
27TRawImageRuntimeTypeFactoryI21CRawImageEpsonRD1BaseE
27TRawImageRuntimeTypeFactoryI24CRawImageKodakDCSProSLRnE
30TImageParserRuntimeTypeFactoryI20CPhaseOneImageParserE
27TRawImageRuntimeTypeFactoryI21CRawImagePhaseOneBaseE
27TRawImageRuntimeTypeFactoryI19CRawImagePhaseOneIQE
27TRawImageRuntimeTypeFactoryI17CRawImageAdobeDNGE
27TRawImageRuntimeTypeFactoryI27CRawImageCalibratedAdobeDNGE
23CPixelBufferImageParser
NSt3__120__shared_ptr_emplaceI24COpcodeFixVignetteRadialNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI20CPixelBufferUnpackerNS_9allocatorIS1_EEEE
19CRawImagePentaxBase
27CRemapWhiteBalanceTagParser
NSt3__120__shared_ptr_emplaceI19CPentaxK10DUnpackerNS_9allocatorIS1_EEEE
18COpcodeDeltaPerRow
?EGr
lVUA@
/]=X9
17CRawImageFujiBase
NSt3__120__shared_ptr_emplaceI15CFujiS2UnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI15CFujiS3UnpackerNS_9allocatorIS1_EEEE
.A21CRawImageCanonCRWBase
29CCanonG6WhiteBalanceTagParser
NSt3__120__shared_ptr_emplaceI24CCanonCompressedUnpackerNS_9allocatorIS1_EEEE
3%A4B5Q678)y&
9VW('RUXCvYwTa
$3AB
Q4CR)5a9qb6S&8
yUE(rY
DiTX
IGcj
$21%3874569yWXY(Vx'A)w&Bv
jsJa
24CCanonCompressedUnpacker
24CParameterizedNoiseModel
11CNoiseModel
19CHasselbladUnpacker
IIIIaaaa
26CRawImageHasselbladFFFBase
NSt3__120__shared_ptr_emplaceI19CHasselbladUnpackerNS_9allocatorIS1_EEEE
17CRawImageLeafBase
17COpcodeTrimBounds
20CRawImageOlympusBase
NSt3__120__shared_ptr_emplaceI27CUnpackedLE16Shift4UnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI30COlympus2FieldPacked12UnpackerNS_9allocatorIS1_EEEE
20CRawImageMinoltaBase
21CRawImageCanonTIFBase
18CRawImageNikonBase
NSt3__120__shared_ptr_emplaceI24CNikonCompressedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI22CUnpackedYCbCrUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI17CNikonNRWUnpackerNS_9allocatorIS1_EEEE
24CDNGUncompressedUnpacker
24CDNGLosslessJpegUnpacker
28CLosslessJpegRestartUnpacker
23CSonyCompressedUnpacker
18CRawImageCanonBase
26CRawImageHasselblad3FRBase
27CRawImageOlympusCSeriesBase
20COlympusE410Unpacker
24CPacked12SwappedUnpacker
22CUnpackedYCbCrUnpacker
333?*B
Efff?
>ff&?33
33s?fff?
s+s+s+s+
20CPixelBufferUnpacker
$@M-[
N@\r
++MJ
?|'f
i@r3
 l@a
pw@L7
 |@)?
@gDio
?33333S7
@333333
16CDNGUnpackerBase
13CLjpgUnpacker
16CClientOverrides
20CEpsonERFImageParser
h"lxz
?ffffff
@ffffff
0Xr
?g|_\
27COpcodeFixBadPixelsConstant
3333333333333333
*?UU
@UUU@
24CRawImageKodakDCSProSLRn
24CKodakCompressedUnpacker
26CKodakUncompressedUnpacker
28CRawImageNikon12Bit14BitBase
17CPhaseOneUnpacker
21CPhaseOneUnpackerBase
 X
@27CPhaseOneCompressedUnpacker
28CGenericLensCorrectionFilter
NSt3__120__shared_ptr_emplaceI27CPhaseOneCompressedUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI17CPhaseOneUnpackerNS_9allocatorIS1_EEEE
25CLosslessJpegSRawUnpacker
14CDNGNoiseModel
17CNikonNRWUnpacker
23COpcodeFixBadPixelsList
==SY
aG/5
5aq/C/
%Imq
F|)LM
9PVJ
sCu
"rk>
w3MDx(<
/17CNikonImageParser
18CPanasonicUnpacker
34CDNGUncompressedLinearizedUnpacker
22CRawImageNikonRawSBase
19CPurgableImageStore
5CLock
34CDNGLosslessJpegLinearizedUnpacker
ffffff
D@333333
@A33
_F?l
?ffffff
?ffffff
?ffffff
14CImageBlockSet
11CImageBlock
21CSensorDataImageBlock
21CRawImageEpsonRD1Base
27CEpsonWhiteBalanceTagParser
22CRawImageCanonSRawBase
NSt3__120__shared_ptr_emplaceI25CLosslessJpegSRawUnpackerNS_9allocatorIS1_EEEE
9CStitcher
18CStitchDescription
NSt3__120__shared_ptr_emplaceI9CStitcherNS_9allocatorIS1_EEEE
21CPerChannelNoiseModel
17CSignalNoiseModel
16CBlackLevelModel
16CImageBlockCache
MbP?
MbP?
13CInterpolator
24CFourChannelInterpolator
18COpcodeScalePerRow
17CFujiInterpolator
17CSRAWInterpolator
ffffff
@29CUncalibratedSignalNoiseModel
12CDataAlign16
12CGuardedData
13CPurgableData
28CNonUniformScaleInterpolator
17CPacked14Unpacker
12CImageFilter
?30CPanasonicLensCorrectionFilter
27CRawImageLeicaPanasonicBase
NSt3__120__shared_ptr_emplaceI18CPanasonicUnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI34CUnpackedLE16Shift4Remove0UnpackerNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI23CPanasonic14BitUnpackerNS_9allocatorIS1_EEEE
26CCanonLensCorrectionFilter
26CAdobeLensCorrectionFilter
23CLinearizedInterpolator
22CSamsungSRWImageParser
20CRawImageSonyARWBase
NSt3__120__shared_ptr_emplaceI28CGenericLensCorrectionFilterNS_9allocatorIS1_EEEE
27CRawImageCanonPowerShotBase
NSt3__120__shared_ptr_emplaceI26CCanonLensCorrectionFilterNS_9allocatorIS1_EEEE
25CRawImageNikonCoolpixBase
22CRawImageFujiBayerBase
NSt3__120__shared_ptr_emplaceI17CPacked14UnpackerNS_9allocatorIS1_EEEE
8CZipFile
NSt3__120__shared_ptr_emplaceI8CZipFileNS_9allocatorIS1_EEEE
21COpcodeDeltaPerColumn
13CCameraPlugin
10CEvaluator
23CRawImageSamsungSRWBase
18CRawImageKodakBase
20CRawImageSonySRFBase
NSt3__120__shared_ptr_emplaceI13CSonyUnpackerNS_9allocatorIS1_EEEE
p>l$I=
h?6_Stack
3_Op
4@8U
czFK
19CRawImagePhaseOneIQ
20CPhaseOneCalibration
23P1TwoOutputCoefficients
16P1DualCorrection
23CPanasonic14BitUnpacker
ri?]t
`@wD
=ff&@
?W[5@
R>)\
=W[5
D<)\
;>@`
#9<o
#<)\
8e?|
=D`e<
>)\O?
:B`e<
ffffff
?5B?S
"E?: 
wt?t
4"@Y
@Pfff
a2U0*
}M?a2U0*
Mb@?
Mbp?
?W[5@
|(FY
cSz5k
'1>^c
U6+
%`Nf
|@9rJ
z@<T
9E`c
(c=+5
S3NO
tXE^
VeTB
E5vQ
)+G-)
4Iu$
h|cy
!D-O\
Ii^2]5
{KNS
/_lq
!5]$FP
?rFn?
=!Q7
DZe5
e=P{V$
.R)Sd}x
j44z
dhGB
9HAHV
h6J:
(Y C\|
(xS|0
f ~KF
~twz
sP_iZ
VQ0$
o{2&\
]|-w
ZDIo
Kqzj'C
o}h|
2z"G
o0.vn
P^]5
s#:r
(4F
8h4*
GYR9
DP**pg
g"JS=
wWN)
b8A`r
2i4N:L
,Uwrd
$H[!r
f!Oo
;~~S
y++y(V
)jz
b4VYW6
WN,$z
6+>7
]`Mt
F%Fm
U_M[\`
%NnAIW@yybb
_?nO
WKvD
U=&NeK);e
c{4N!
n/xW'
x{|&
*>8t
qrM~2T_
w`a#
ZYj}
}<%Lz\X
A9/`o<
NIpL,j)
J3/ZG
w'Uj
Zy(i
;gB=m80
\bz61
_3a(
_a_h
tnGO
<0:g
NmqW
_p="
0wV:\
y!'-
QyG&
l#Vo)b
t8\0
 ksu
)CDUWm
^Io.
/}?~Q|
[?zg
!5g4W
8EOp
[&UG
wd`+
N_G&
|@9{H_
N|P{
w$)[o
ypef
M_@`;
LtDK
h\&V
i5<d
Or9N
c(c
Ax!jXU
tU1'
'o0FF
o4ib
aH-#r
fD11
&&2$[XL
]C?A-
yr-r
EXRD
^t1R
3s.k
Tu,p
Cv4M
`tf>H#0
_2a4
{Ejk
sRZOq;
u?LS:
lGifP
$|}zB=
^2^t
(>s}\U
AY74
++9w%9
3(FA
e~c1
WWY0C
UQsb(
E{J>
Bez;'-l
 o4)
g76(
'h2+-1
LNa&N>
(6U+
8>cK
n|4@
"ieNf
c3]n?
k|yd
[<=
AduA
H}J<L
 i}1
<m 1
+>Mx
]`d}
==Y%D(
RYm@\6
$RN`
Wloo
,@\I
#@>N
Z3eH
u~@G.
Xo%(
]3QF
Hd'c;9
vrb'
2pQW
f\_q
QT2I
$Bav
$Jav
(Rav
(Zav
',FO
YAS8
oHPO.
@p=~
, BT
0lX"
IU\\
J|DU
Kp(
/$IdO
*0/6zeC
uN|j
sBn\
2iwu
VedVu
Dn-1
3^S[,
/sM^
[6s{
{T\X
8 kG<
U<@b-
3s%!
")J[Ua
SbWU
Y@9,^
W6Y8b
;@3C
%{95q`
q/A!J
$5EC
V9 N
}xpb
X-TSGR_A
)@l0W
IGUXu
0A+["
D%ZOk
)i(*
*9;TL
Z:$P
$v'>
;yf'
;yf'
N^ZIy+
O_@?}
+~.A1
|}XT
4Flc
N`3c
YjIy\
?}$z`
!8y=
BLqK
3fQI
D^9:&SC
M'iO*y
Wvd,58
Kr4TI<
v`6k.L
.l[`V
QIXp
cmKX
HbA!%
g5:p
L JW
]q4V
HY&O
ht>9
l%3X
`2:4Z%
\~4T
_L{p
{!a<
tdeQ0N/
xrzv6
Qtzz!^
H-L[
s|em;
#;t[W
!'u0
T.VF
y;U4
:*7f
aHatgJ
c9eO
Y^iC
!+Gg
X|SD'J
#{S?
Pbg_Qb
"s'0
@@.R2[
,4dy
>7fX
|+1,
<dN(
<'uWY
YZOSwi=E
KAZ)
"-:e
~]wD
.>PI
Yq5m
`hr3GT
}d`8
O3;^5)
#{cVS_TG
%MbE
&d%;P
d&w=
`DgZ
p.BI8;+3I8F+1I8]
gvb!
t9_t
P*63i
jE{]yr
%[2
H#$Z<
m7Bo
e-X&
ue\k?
Db"_
@v<p
G]D5
>$eh
*?nn
9xfx!
9blF
K9|#
5%T%
*b1YZ
Hij/
08RN
(o|."
7t187Ez:
Z0h?
yhh$
s2E5
(J$*5H
"G]%
0'%:
3Z@t$
~O],'
|}Cmc
2]) 
!y06
=e>T
h[qM
Sogvr
/lp"
WfAHnmAj
Onz|
xm4^
~m4_
!*s-
AKTaq
9.5Va
v[&e/
YCt/
~_|\e
_.xI
Ud1D
F&>w
Lu}'
(7q[8
!K22x
!@?x
Ngzy
#d{i
y\UE
MV%M
hPab
!B~<
F;i7
Bk#a[
YF?e
_$`f
\-S9
j],yN
E{AyZ
$:I;
Pk]1
3}Fq
L[HH
nL\3
'VtsX
3Z#;e=l)V
m$(mS
nam3<
G"dr
@G#av\Ni
E&A2
vgow
u|(G
[y\V
ey1~g
=}8D_F
>>|f
Ahg~O
Ud4uQ
_%LG
QX]#L
c_#MG
NE[D
Sm4e
2c.8&
>HQv
/jZ8
|":.
&d.'bt
@*oN
z3e[
R)zi.z
rrin
F^`,b3i
W-X7+
}l|7-
xJ!2jm
q=g)
Qa7C
TR'1
D7B4
2M!:{
yP3O:t
G!:A
}(^/
zQVe
+v}>
f5^m5
W2P@A!
Jilo
)Qf
q*i{
#p/q
sald
M_sh
=FzOX
fZ*<
Ca*"
C|(yOb
j5<`
*#yf
j[=.
BemT
k \#
5gq0
s(R8P
0fQ5Q
GooO
ik&SM
R#jw
]L;9
v.ud
<_Iri
&w,C
[{n,$
h?@iZ
c(y$nftfbt
$4yO4
mK!H]
:A&>
rCc:fy
_Ws7
R5u&RQv-E
ScPw
B?H<
O'=)5
%2#Y
eYTB
I8m%
f(L1
,>$O
Dwtf
y1e(NQ(
AUs9
T/n,L?g
i2j.
fd2=
Lof8A
y7nH-5
F AR
:GA.!
CiXF(
RJ0$
}z;_
qLamB
in<+/h
hS@z
Q1aT
,@EF
~ff5
|BaK"
Kcisb
jZ?K
Xg44O1n
Kmy>
4{Kq
yh[u&
138?)d
e*V9
8yhG
k*mX
KOb)
i^AN
^oW#^
qY:.K
jT\W
V%8N
 [{4
P%~R
U}UT
UHEU
Lzn|
]N|~!
4<\k
WzTR
!k6lE6{
zL9Q>
~l9Q>
8sK~
26GN
\gO*o
tmyR
Q::JGG
Q::JGG
#oX
K6L!
f{O{b
Y=*1d8
D/Y+
hX?F
[' e
sfvv
4&>u
5UcUN
JE=,u
u!)*
[TBqX
[]C9
g%v
X+.,pJ 
/gHI$EQ
1z ?
Sr|Z
'>>AU
l}nx
S. nB
z}<?p
y$C<
ydC<2
1v#2
LAlg
8I9#
*ta
F#Q5
]&Pd
#%77
b6D1
wF~~
I1C*
T&vr
<$l;O
B60j
S2eD
#!=70
-d1|
/3{,[
[y?l
 f:b
bJ b
*"?WP<V
N#W4rUCi
#m#u
i`6`zqa.
HCiE
0ks
xg c
y[;k
EJgH
V"u3
VZ/)/7
!g~3#^
Nl5|
y08<
p`kh
SjI"zB!
Q'A\V
R#A"
E7as
.t8xa
8lZ"
iIj4
R\oCS
^Y+!--_
.F P
;0IS
?iNz
Til{
PIio
37:)
Pjh(14
(&uT
U/SC/
0C 6}c
x>)N2
:lX}
:3Xg
{v8@
Q{r<U
#1j!a
%GMB
0H0;
_`YW
;z|5s
NRGy
SahTs\R
gfc._-
@C3S
o'Ky
)dX+
7#|1
ygz4b~7K
!(CP
5"jD
ygztx
1fn1s
-fn1s
-fn1s
K&X2
K&X2
K&X2
f,4c
f,4c
f,4c
_>/]
y,/<V&`
ll3><
+xQS
J*|Zf
7eiVJ
tHIr
tD'j
yg4_
15CMetadataParser
19CMetadataParserExif
HEAPCCDR
333?
919CMetadataParserCIFF
333333
UUUUUU
?UUUUUU
?ffffff
@ffffff
@20CMetadataParserCanon
20CMetadataParserEpson
19CMetadataParserFuji
25CMetadataParserHasselblad
20CMetadataParserKodak
19CMetadataParserLeaf
24CMetadataParserMakeModel
22CMetadataParserMinolta
p}?\
?Nikon
==SY
aG/5
5aq/C/
%Imq
F|)LM
9PVJ
sCu
"rk>
w3MDx(<
/20CMetadataParserNikon
15COpcodeMapTable
22CMetadataParserOlympus
24CMetadataParserPanasonic
21CMetadataParserPentax
22CMetadataParserSamsung
19CMetadataParserSony
19CRawImagePluginBase
]@|D
=B{)@B
%sf@]
17CRawCameraSupport
14CMappedZipFile
NSt3__120__shared_ptr_emplaceI23CRawCameraSupportBundleNS_9allocatorIS1_EEEE
21CRawImagePhaseOneBase
20CPhaseOneCaptureInfo
appl
mntrRGB XYZ 
acspAPPL
    
-    
desc
fcprt
$wtpt
rXYZ
gXYZ
bXYZ
rTRC
bTRC
gTRC
desc
BoostRGB
text
Copyright Apple, Inc., 2009
XYZ 
-XYZ 
XYZ 
kXYZ 
curv
<appl
mntrRGB XYZ 
9acspAPPL
APPL
-appl
desc
ocprt
#wtpt
rXYZ
gXYZ
bXYZ
rTRC
chad
,bTRC
gTRC
desc
Linear Display P3
text
Copyright Apple Inc., 2015
XYZ 
XYZ 
XYZ 
XYZ 
para
sf32
ncurv
ADBE
mntrRGB XYZ 
;acspAPPL
none
-ADBE
cprt
2desc
kwtpt
bkpt
rTRC
gTRC
bTRC
rXYZ
gXYZ
bXYZ
text
Copyright 2000 Adobe Systems Incorporated
desc
Adobe RGB linear
XYZ 
XYZ 
curv
XYZ 
XYZ 
XYZ 
APPL
mntrRGB XYZ 
acspAPPL
APPLsRGB
-APPL
desc
icprt
"wtpt
rXYZ
gXYZ
bXYZ
rTRC
bTRC
gTRC
desc
sRGB Linear
text
Copyright 2012 Apple Inc.
XYZ 
XYZ 
XYZ 
XYZ 
curv
$appl
mntrRGB XYZ 
9acspAPPL
APPL
-appl
desc
ecprt
#wtpt
rXYZ
gXYZ
bXYZ
rTRC
 chad
,bTRC
 gTRC
 desc
Display P3
text
Copyright Apple Inc., 2015
XYZ 
XYZ 
XYZ 
XYZ 
para
sf32
27CPhaseOneCaptureImageParser
20CPhaseOneImageParser
25CFujiLensCorrectionFilter
init
dealloc
initWithRawImage:reconstructionData:left:top:width:height:andPrintWhenCalled:shouldRetainRawImage:
enableHALF:
provideImageData:bytesPerRow:origin::size::userInfo:
image
_retainedImage
dataV4
left
width
height
_print
_outputHALF
_alphaOne
noiseEnvironment
rawEnvironment
class
filterWithDefaultsForClass:
valueForKey:
intValue
array
addObject:
arrayWithObjects:count:
addObjectsFromArray:
mutableCopy
autorelease
removeObjectsForKeys:
takeAttributesFromDictionary:
setValue:forKey:
objectForKeyedSubscript:
boolValue
doubleValue
setObject:forKey:
numberWithBool:
filterWithName:
valueWithBytes:objCType:
numberWithDouble:
filterWithName:keysAndValues:
numberWithInt:
setDefaults
takeAttributesFromDictionary:forKeys:
arrayWithArray:
isKindOfClass:
compatibilityVersion
superclass
outputMatrix
inputKeys
count
UTF8String
objectAtIndexedSubscript:
extent
emptyImage
dictionary
makeSerializable
enumerateKeysAndObjectsUsingBlock:
dictionaryWithDictionary:
keypathValueDictionary:
length
stringByAppendingFormat:
respondsToSelector:
addEntriesFromDictionary:
description
keypathValueDictionary
release
hasPrefix:
dataWithLength:
mutableBytes
bytes
null
dictionaryWithObjects:forKeys:count:
imageWithBitmapData:bytesPerRow:size:format:options:
retain
makeMapImages
vectorWithX:Y:Z:W:
_RAW_match_WorkingSpace_to_ColorSpace:
kernelWithName:
applyWithExtent:arguments:
_RAW_match_ColorSpace_to_WorkingSpace:
outputImage
inputImage
inputVignetteTableData
inputVignetteTableDataSize
inputColorSpace
vigImg
customAttributes
floatValue
imageWithBitmapData:bytesPerRow:size:format:colorSpace:
outputInputImageWithFixmeWarning
regionOf:destRect:userInfo:
inputVignetteTable
inputVignetteAmount
mapPoint:extent:map:mapWidth:mapHeight:amount:
unsignedIntValue
inputLateralCAAmount
inputLateralCAMap
inputLateralCAMapWidth
inputLateralCAMapHeight
mapImg
inputDistortionAmount
inputDistortionMap
inputDistortionMapWidth
inputDistortionMapHeight
unsignedLongValue
stringWithUTF8String:
componentsSeparatedByString:
numberWithUnsignedInt:
containsObject:
setObject:forKeyedSubscript:
numberWithUnsignedShort:
initWithRawImage:shouldRetainRawImage:
countByEnumeratingWithState:objects:count:
rcApplyFilters:withScaleFactor:
valueForKeyPath:
vectorWithX:Y:
vectorWithValues:count:
alloc
initWithCount:domainMin:domainMax:values:
function
initWithBlock:domainMin:domainMax:
inverse
vectorWithX:Y:Z:
vectorWithCGRect:
dataWithBytes:length:
imageWithImageProvider:size::format:colorSpace:options:
initWithImageProvider:size::format:colorSpace:options:
valueAtIndex:
imageByClampingToExtent
applyWithExtent:roiCallback:arguments:
imageByCroppingToRect:
inputScales
inputDraftMode
inputLDCExecuteFlags
inputVersion
inputScalesR
inputScalesB
mapPoint:info:
distortionRegionOf:destRect:userInfo:
inputDistortionScaleHalfMinorRadius
inputDistortionScaleMinorRadius
inputDistortionScaleMajorRadius
inputDistortionScaleMaxRadius
inputFocalLength
apply:image:arguments:inoutSpace:isPremultiplied:
inputShouldWarn
stringWithFormat:
numberWithUnsignedLong:
setFunction:
setInverse:
initWithGamma:
initWithInverseOf:
rangeMin
rangeMax
domainMin
domainMax
initWith:of:
initWithBlock:andInverse:
dataWithCapacity:
curve
curveWithGamma:
curveWithInverseOf:
curveWith:of:
curveWithBlock:andInverse:
curveWithBlock:domainMin:domainMax:
curveWithCount:domainMin:domainMax:values:
_function
_inverse
_domainMin
_domainMax
_rangeMin
_rangeMax
reconstructionData
firstObject
removeObjectAtIndex:
contextWithOptions:
render:toBitmap:rowBytes:bounds:format:colorSpace:
clearCaches
numberWithUnsignedChar:
numberWithShort:
dataWithContentsOfFile:
pathExtension
numberWithLongLong:
numberWithFloat:
imageWithCGImage:
debugDescription
objectForKey:
isEqualToString:
drain
numberWithLong:
phaseForBayer
phaseForXtrans
sensorType
versionfor:
phaseFor:
forceVersion
range
exposureFactor
crop
blacks
noiseModel
_imageBySamplingNearest
imageByColorMatchingColorSpaceToWorkingSpace:
inputBlacks
inputRange
inputFactors
inputPattern
inputDespeckle
inputCropRect
inputRepresentativeNoise
inputScaleFactor
inputNoiseModel
inputBaselineExposure
imageByColorMatchingWorkingSpaceToColorSpace:
imageByUnpremultiplyingAlpha
imageByPremultiplyingAlpha
_RAW_unpremultiply
_RAW_premultiply
stringByReplacingCharactersInRange:withString:
isEqualToNumber:
willChangeValueForKey:
didChangeValueForKey:
allowsKeyedCoding
raise:format:
initWithFormat:
encodeObject:forKey:
containsValueForKey:
decodeObjectForKey:
apply:image:extent:roi:userInfo:arguments:inoutSpace:isAlphaOne:
arrayWithCapacity:
arrayByAddingObjectsFromArray:
methodForSelector:
applyWithExtent:roiCallback:arguments:options:
apply:image:arguments:inoutSpace:isPremultiplied:isAlphaOne:
name
setObject:atIndexedSubscript:
applyWithExtent:arguments:options:
filteredImage:keysAndValues:
filterWithDefaultsForName:
setPrimitiveNumberValue:inVariable:forKey:
encodeWithCoder:
initWithCoder:
apply:image:extent:roi:userInfo:arguments:inoutSpace:
applyMatrixToImage:vectorR:vectorG:vectorB:vectorBias:inSpace:outSpace:
automaticallyNotifiesObserversForKey:
setInputBoostAmount:
inputM00
inputM01
inputM02
inputM10
inputM11
inputM12
inputM20
inputM21
inputM22
inputTRCs0
inputTRCy1
inputTRCs1
inputTRCy2
inputTRCs2
inputTRCy3
inputTRCs3
inputTRCs4
inputBoostKind
inputBoostAmount
inputBoostLuminanceAmount
inputBoostTransitionPoint
inputBoostTransitionWidth
inputBoostShadowAmount
inputBoostPreserveHueAmount
inputBoostPreserveRYHueAmount
inputBoostPreserveYGHueAmount
inputBoostPreserveGCHueAmount
inputBoostPreserveCBHueAmount
inputBoostPreserveBMHueAmount
inputBoostPreserveMRHueAmount
inputHueMagMR
inputHueMagRY
inputHueMagYG
inputHueMagGC
inputHueMagCB
inputHueMagBM
samplerWithImage:keysAndValues:
halfSize_roi:destRect:
adjustedRNAmount
grow1_roi:destRect:
growN_roi:destRect:userInfo:
grow4_roi:destRect:
expand_roi:destRect:
grow2_roi:destRect:
expandS1_roi:destRect:
reduce_roi:destRect:
grow3_roi:destRect:
computeScaleA:B:withSmoothingAmount:
grow2S0_roi:destRect:
growNS0_roi:destRect:userInfo:
expandS0_roi:destRect:
multiply:byNeutralFactors:
highFrequencyIntoAlpha:threshold:neutralFactors:
powerBlurFSHF:threshold:moireAmount:neutralFactors:
extractHalfSizeRGBHF:neutralFactors:threshold:
powerBlurHF:threshold:moireAmount:scale:
powerBlurDespeckleHF:threshold:moireAmount:scale:countThreshold:luminanceThreshold:diffAmount:
powerBlurEarlyOutHF:threshold:moireAmount:scale:
powerBlurEarlyOut2HF:threshold:moireAmount:scale:neutralThreshold:thresholdScale:
perceptualToLinear:
expandHalfSizeRGB:
powerBlurFS:threshold:neutralFactors:
extractHalfSizeRGB:neutralFactors:
powerBlur:threshold:scale:
powerBlurDespeckle:threshold:scale:countThreshold:luminanceThreshold:diffAmount:
powerBlurEarlyOut:threshold:scale:
powerBlurEarlyOut2:threshold:scale:neutralThreshold:thresholdScale:
V8OutputImage
setROISelector:
outputUnboost:
outputCNR:extent:returningDebugProduct:
viewRGB:sushiFactors:crop:
extractYOpponentColor:neutralFactors:luminanceFactors:noiseVector:
viewY:sushiFactors:crop:
extractY:neutralFactors:
computeLowThreshold:andFactor:withThreshold:andSoftness:
gaborFiltersToSmoothedLuminanceAndGradient:smoothAmt:tinyBlurFactor:
viewTG:lothresh:factor:crop:
reduce:
blurGradient:lothresh:factor:
viewG:scale:crop:
expandAndSharpenThroughGradientMaskGatherOpponentColor:halfSizeY:cnrRGB:originalY:sharpen:floor:sushiFactors:crop:lumFactors:
expandAndSharpenThroughGradientMaskGather:halfSizeY:cnrRGB:sharpen:floor:sushiFactors:crop:lumFactors:
YAndRGBGatherOpponentColor:cnrRGB:originalY:sushiFactors:crop:lumFactors:
YAndRGBGather:cnrRGB:sushiFactors:crop:lumFactors:
expandAndSharpenDetailsThroughGradientMaskGatherOpponentColor:halfSizeY:cnrRGB:originalY:sharpen:soften:floor:sushiFactors:crop:lumFactors:
expandAndSharpenDetailsThroughGradientMaskGather:halfSizeY:cnrRGB:sharpen:soften:floor:sushiFactors:crop:lumFactors:
expandAndMakeDetails:halfSize:
viewD:factor:crop:
fineGrainNoise2:tinyBlurFactor:
fineGrainNoise:
expandAndAddDetailsThroughGradientMask2:halfSize:fullSizeDetails:soften:sharpen:
addNoise:noise:amount:
expandAndAddDetailsWithOverdrive:fullSize:contrast:
gaborFiltersToLuminanceAndVectorField:thresh:
viewVF:crop:
gaborFiltersToVectorField:
smoothVectorFieldAlongVectors:
vectorFieldToDirectionsAndGradients:
directionsToCurvature:threshold:
viewC:crop:
viewDIR:do360:crop:
viewTGDIR:lothresh:factor:do360:crop:
blurGradientPlusCurvature:lothresh:factor:cthresh:cfactor:
smoothDetailsAlongDirectionsAtScaleWithSharpenAntiBloom:directions:scale:thresh:smooth:sharp:pscale:coringThreshold:maxContrast:
smoothDetailsAlongDirectionsAtScaleAntiBloom:directions:scale:thresh:smooth:maxContrast:
smoothDetailsAlongDirections:directions:amount:
viewGDIR:do360:crop:
powerBlurY:threshold:
compositeThroughGradientMask:fullSize:fullSizeMask:
expandAndAddDetailsThroughGradientMask:fullSize:fullSizeDetails:fullSizeMask:amount:contrastOverdrive:interpolant:
smoothDetailsAlongDirectionsAtScaleWithSharpen:directions:scale:thresh:smooth:sharp:pscale:coringThreshold:
smoothDetailsAlongDirectionsAtScale:directions:scale:thresh:smooth:
mergeHalfSizeCurvature:intoFullSizeCurvature:
expandAndAddDetailsThroughGradientMask3:fullSize:fullSizeDetails:fullSizeMask:amount:sharpen:interpolant:
outputBoost:
isBayerGreenAlignedforImage:andPattern:
image:croppedTo:
getCString:maxLength:encoding:
mainBundle
pathForResource:ofType:
getBytes:range:
stringWithCString:encoding:
kernelsWithString:
outputCNR:E0:E1:
smartNoiseStatistics:
smartNoiseAdjustmentsForValue:andStatistics:
default_roi:destRect:
samplerForImage:
expandAndSharpenThroughGradientMask:fullSizeY:sharpen:
viewBlend:sushiFactors:crop:
viewHue:sushiFactors:crop:
kernelWithName:inArray:
kernelArrayWithResourceName:
inputLNRAmount
inputCNRAmount
inputSharpenAmount
inputSharpenThreshold
inputContrastAmount
inputDetailAmount
inputMoireRadius
inputMoireAmount
inputOpponentColorEnabled
inputNeutralFactors
inputBoostMethod
inputLumFactors
inputISO
inputSensorPattern
inputISODictionary
inputTrimParameters
inputLowCurvatureThreshold
inputDespeckleParameters
inputHighFrequencyFactor
inputShowHF
imageByApplyingFilter:withInputParameters:
imageByApplyingTransform:
inputEnabled
setInputEnabled:
setInputShouldWarn:
colorSpace
setInputExposure:
setInputWhitePoint:
inputWhitePoint
inputExposure
defaultWhitePoint
setInputBias:
inputBias
inputVignetteK0
inputVignetteK1
inputVignetteK2
inputVignetteK3
inputVignetteK4
inputVignetteCenter
inputVignetteExecute
isEqualToArray:
cameraProfile
neutralWhitePointWithProfile:
setInputNeutral:
matrixFromArray:rowCount:columnCount:
inputNeutralXY
blendFactor
inputNeutral
inputFactor
inputCalibrationIlluminant1
inputCalibrationIlluminant2
inputXYZtoCamera1
inputXYZtoCamera2
inputCameraCalibration1
inputCameraCalibration2
inputReduction1
inputReduction2
inputForwardMatrix1
inputForwardMatrix2
inputShouldUseForwardMatrix
inputShouldRecoverHighlights
inputShouldLinearize
initWithData:encoding:
kernelSourceForGroup:
initWithCapacity:
allocWithZone:
loadKernelsForGroup:
sharedKernels
kernelWithName:group:
copyWithZone:
retainCount
priv
expandByOneROI:destRect:
expandByTwoROI:destRect:
expandByThreeROI:destRect:
expandByFourROI:destRect:
expandByFiveROI:destRect:
expandSelect:destRect:
expandSelectN:destRect:userInfo:
inputWidth
inputAxialWidth
kernelSourceWithBuffer:inflatedSize:deflatedSize:
deFringeKernelSource
fringeDirectionsKernelSource
fringeEdgesKernelSource
rcApplyFilters:
initWithFilters:sourceBitmap:targetBitmap:rowCount:columnCount:sourceRowBytes:targetRowBytes:bitsPerComponent:context:
applyFilters
applyFilters:toBitmap:targetBitmap:rowCount:columnCount:sourceRowBytes:targetRowBytes:bitsPerComponent:context:
filters
sourceBitmap
targetBitmap
rowCount
columnCount
sourceRowBytes
targetRowBytes
bitsPerComponent
samplesPerPixel
context
dataWithBytesNoCopy:length:freeWhenDone:
rangeOfString:options:
removeObjectForKey:
shortValue
substringWithRange:
stringWithString:
appendString:
characterAtIndex:
compare:options:
appendFormat:
whitespaceCharacterSet
stringByTrimmingCharactersInSet:
replaceOccurrencesOfString:withString:options:range:
uppercaseString
dictionaryWithContentsOfURL:
defaultManager
fileExistsAtPath:
initWithType:
augmentResultsWithState:
queryMetaDataSync
results
dateWithTimeIntervalSinceNow:
lastFetchDate
timeIntervalSinceDate:
startCatalogDownload:then:
lowercaseString
attributes
state
startDownload:
getLocalFileUrl
URLByAppendingPathComponent:
URLByAppendingPathExtension:
componentsJoinedByString:
stringByDeletingPathExtension
hasSuffix:
predicateWithBlock:
filteredArrayUsingPredicate:
arrayWithObject:
setWithArray:
allObjects
compare:
sortUsingSelector:
CGRectValue
makeMapSampler
inputGainMapData
inputGainMapApplyRegion
inputGainMapSize
inputGainMapRowPitch
inputGainMapColPitch
inputGainMapNumPlanes
inputGainMapExecute
_gainMapImg
inputKr
inputKt
inputCenter
regionOf:rect:userInfo:
inputPreSharpenAmount
inputPreSharpenBlurAmount
Sensor data is purged
provideImageData origin=(%4ld,%4ld) size=(%ldx%ld) rowbytes=%ld
/Contents/Resources
RawCameraException
RAWDemosaic filter: processRAWSubTileCI failed
inputVersion
inputBaselineExposure
inputContrastTrim
inputHighFrequencyFactor
inputISO
inputISODictionary
inputLNRTrim
inputLowCurvatureThreshold
inputOutmaskDetailTrim
inputColorSpace
inputNoiseModel
inputGainMapExecute
inputVignetteExecute
inputVignetteTableExecute
inputLDCExecuteFlags
inputScales
inputKr
inputCenter
inputKt
inputLinearizedDNG
inputPreSharpenAmount
inputPreSharpenBlurAmount
valueBlock
inputLinearized
inputScaleFactor
Never get here
inputCropRect
inputDraftMode
CIAffineTransform
{CGAffineTransform=dddddd}
inputTransform
inputXScale
inputYScale
CILanczosScaleTransform
inputScale
inputAspectRatio
inputRange
inputFactor
RAWCAMERA_BOOSTSPACE
Unable to create pthread key.
%s <%p>
CIImage
v32@?0@8@16^B24
%@%@
methodNumber
black
black0
black1
black2
black3
blackReplace
white
whiteRN
RAWCAMERA_M1
{ { %lg , %lg , %lg } , { %lg , %lg , %lg } , { %lg , %lg , %lg } }
RAWCAMERA_M2
linon
speen
voten
btpnt
btwid
blamt
bsamt
bphamt
RAWCAMERA_HUEMAG_MR
noten
hrknd
nrknd
cbknd
gscrc
gscgc
gscbc
aaamt
aagbs
aapnt
speth
nrrad
nrslo
esrad
esint
esalm
esein
eseth
esmsf
cbrad
cbetlo
cbethi
cbet2lo
cbet2hi
cbrad2
cbenf
scal1
scal2
sdpnt
sdwid
sdamt
notmn
notmx
spknd
neknd
pshrpn
cacen
cacpo
cacrs
cacbs
premul
ccref
gresc
MS_AMT
gpuen
lnramt
cnramt
fscnren
nrsamt
nrsth
nrcamt
nrdamt
processAllV4
usePreSushiFilters
isoab
cnacc
cnadc
cnaec
cnbcc
cnbdc
cnbec
isopn
hnacc
hnadc
hnaec
hnbcc
hnbdc
hnbec
h2nat
h2nacc
h2nadc
h2naec
h2nbt
h2nbcc
h2nbdc
h2nbec
otrc_2
otrc_3
otrc_4
otrc_5
otrc_6
otrc_7
otrc_8
^v16@?0r*8
%s_%d
Failed to open file[%d]: %s
IFD0:SUBIFD0
dng.
dng.adobe.generic
unsupported
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
com.canon.tif-raw-image
com.adobe.raw-image
com.canon.cr2-raw-image
com.leafamerica.raw-image
com.hasselblad.fff-raw-image
com.hasselblad.3fr-raw-image
com.nikon.raw-image
com.nikon.nrw-raw-image
com.pentax.raw-image
com.samsung.raw-image
com.sony.raw-image
com.sony.sr2-raw-image
com.sony.arw-raw-image
com.epson.raw-image
com.kodak.raw-image
com.canon.crw-raw-image
com.fuji.raw-image
com.panasonic.raw-image
com.panasonic.rw2-raw-image
com.leica.raw-image
com.leica.rwl-raw-image
com.konicaminolta.raw-image
com.olympus.sr-raw-image
com.olympus.or-raw-image
com.olympus.raw-image
com.phaseone.raw-image
^v16@?0^{__CFString=}8
7.dng
6.dng
2.dng
kCGImageSourceDisableVendorLensCACorrection
kCGImageSourceDisableVendorLensDistortionCorrection
kCGImageSourceDisableVendorLensVignettingCorrection
kCGImageSourceAltMode
kCGImageSourceAddThumbnailInformation
kCGImageSourceRawPropertiesHint
RAWCAMERA_DONT_USE_V4FAUX
ImportOnly
.dng
inputVignetteTableData
RAWVignetteTable disabled because inputImage is infinite
vignetteCorrectionTable
inputVignetteTable
inputVignetteAmount
LensCorrectionFilter inputVignetteMap must be of type NSData.
inputLateralCAMap
inputLateralCAAmount
LensCorrectionFilter inputLateralCAMapWidth/Height must be greater than 3.
LensCorrectionFilter inputLateralCAMap must be of type NSData.
LensCorrectionFilter inputLateralCAMap is not of the expected length.
inputDistortionMap
inputDistortionAmount
LensCorrectionFilter inputDistortionMapWidth/Height must be greater than 3.
LensCorrectionFilter inputDistortionMap must be of type NSData.
LensCorrectionFilter inputDistortionMap is not of the expected length.
:SUBIFD
:MAKERNOTE
GBGGRGRGRBGBGBGGRGGRGGBGBGBRGRGRGGBG
BGGRGGGRBGBRBGGRGGRGGBGGGBRGRBRGGBGG
GGRGGBRBGBRGGGRGGBGGBGGRBRGRBGGGBGGR
GRGGBGBGBRGRGRGGBGGBGGRGRGRBGBGBGGRG
RGGBGGGBRGRBRGGBGGBGGRGGGRBGBRBGGRGG
GGBGGRBRGRBGGGBGGRGGRGGBRBGBRGGGRGGB
RGRBGBGBGGRGGRGGBGBGBRGRGRGGBGGBGGRG
GRBGBRBGGRGGRGGBGGGBRGRBRGGBGGBGGRGG
RBGBRGGGRGGBGGBGGRBRGRBGGGBGGRGGRGGB
BGBRGRGRGGBGGBGGRGRGRBGBGBGGRGGRGGBG
GBRGRBRGGBGGBGGRGGGRBGBRBGGRGGRGGBGG
BRGRBGGGBGGRGGRGGBRBGBRGGGRGGBGGBGGR
GBGGRGGRGGBGBGBRGRGRGGBGGBGGRGRGRBGB
BGGRGGRGGBGGGBRGRBRGGBGGBGGRGGGRBGBR
GGRGGBGGBGGRBRGRBGGGBGGRGGRGGBRBGBRG
GRGGBGGBGGRGRGRBGBGBGGRGGRGGBGBGBRGR
RGGBGGBGGRGGGRBGBRBGGRGGRGGBGGGBRGRB
GGBGGRGGRGGBRBGBRGGGRGGBGGBGGRBRGRBG
best
0.0 
1.0 
2.0 
3.0 
4.0 
5.0 
6.0 
7.0 
8.0 
8.dng
%@.dng
Lossy DNG Unpacker I/O Queue
Lossy DNG Unpacker Queue
:CF2
:ShotInfo
:ColorBalance1
:BLACKLEVELS
:G9WhiteBalance
0123456789.
%d.%d.%d
RAWCAMERA_DUALPIXEL_SECOND_IMAGE
canon
minolta
OLYMPUS
OLYMP
:CameraSettings
:redBlueBalance
:ImageProcessing
:WBRedBlueLevels
olympus
EmbeddedThumbnail:
:OBCorrection
Panasonic
LEICA
Exif
leica
panasonic
FUJIFILM
kCGImageSourceShouldUseRawDataForFulleSize
kCGImageSourceShouldUseRawDataForFullSize
RAWCAMERA_IMAGEBLOCKSET_NOLOCK
kImageIOInfoHeader_plugin
kImageIOInfoHeader_session
disorientation
PreserveMargin
RAWCAMERA_FORCE_BANDING
kCGImageSourceXMPSidecar
Provider_Queue_%u
Provider_Queue_Sync
IFD3
IFD4
CIFF
CIFFv2
CFBundleShortVersionString
com.apple.Aperture
com.apple.Aperture3
com.apple.iPhoto
RAWCAMERA_ENABLE_PRELIMINARY_SUPPORT
{Exif}
{DNG}
DSC-R1
:SR2SubIFD
DSLR-A100
IFD0
:DNGPrivate
:BlackLevels
:0x7306
:WBLevels
:MRWInfo
:WBG
:SR2Private
SONY DSC 
PENTAX
SAMSUNG
PENTAX 
:WhitePoint
:ExpandedDynamicRange
pentax
samsung
Leaf
DCB2
Volare
Cantare
CMost
Valeo 6
Valeo 11
Valeo 22
Valeo 17
Valeo 4
Aptus 17
Aptus 22
Aptus 75
Aptus 65
Aptus 54S
Aptus 65S
Aptus 75S
AFi 5
AFi 6
AFi 7
CameraObj_ISO_speed
ShootObj_back_type
CaptProf_number_of_planes
NeutObj_neutrals
%d%d%d%d
CaptProf_raw_data_rotation
ImgProf_rotation_angle
CaptProf_mosaic_pattern
JPEG_preview_data
CaptureObj_selection
CaptureObj_tone_curve
CaptureObj_sharpness
ShootObj_color_setup
ShootObj_save_setup
com.dxo.raw-image
:DeltaH
:DeltaV
Hasselblad
dng.adobe.HasselbladH3D-39
dng.adobe.HasselbladCF
SourceInfo
hasselblad
%02xd
Huffman Decode Block
:EPExposureIndex
:KodakSubIFD
kodak
^v8@?0
hasWeirdCompressionMode
JPEGInterchangeFormat
JPEGInterchangeFormatLength
kCGImageSourceRawIdentifier
kCGImageSourceVendorLensCorrectionFeatures
kCGImageSourceSupportedSushiLevels
kCGImageSourceMethodVersion
kCGImageSourceSushiLevel
 dng
{Exif}.FocalPlaneXResolution
{Exif}.FocalPlaneResolutionUnit
{Exif}.FocalLength
{Exif}.FocalLenIn35mmFilm
PixelWidth
filters
otrcS0
otrcS1
otrcS2
otrcS3
otrcS4
otrcY1
otrcY2
otrcY3
mc00
mc01
mc02
mc10
mc11
mc12
mc20
mc21
mc22
version
bknd
bamt
max0
max1
max2
max3
cropOrigin
RAWCAMERA_ENABLE_RAW_IMPORT_IN_SPARK
jpegThumbnail
{{%f, %f}, {%f, %f}}
thumbnailCrop
rnSignalComponent
rnDarkComponent
sushiFactor
airyDiskRatio
pattern
leftmargin
blackNoise0
blackNoise1
blackNoise2
blackNoise3
blackStdDev0
blackStdDev1
blackStdDev2
blackStdDev3
factor0
factor1
factor2
blackDespeckleEnabled
shouldExtendRawEnabled
HREnabled
HRKind
AAEnabled
SPEEnabled
NREnabled
NRKind
votingEnabled
votingKind
sharpenEdgesEnabled
chromaBlurEnabled
chromaBlurKind
boostEnabled
boostKind
gamutLimitationCase
SPEThreshold
AAAmount
NRRadius
NRSlope
sharpenRadius
sharpenIntensity
sharpenAbsoluteLimit
sharpenEdgeIntensity
sharpenEdgeThreshold
sharpenEdgeMaskSoftness
sharpenNoiseFactor
chromaBlurRadius
chromaBlurNoiseFactor
powerBlurNoiseFactor
chromaBlurEdgeThreshold
chromaBlurEdgeThreshold2
chromaBlurRadius2
antiAliasingFilterStrength
noAntiAliasingFilter
powerBlurThreePass
greenReconstructionEdgeScale
scale1
scale2
boostTransitionPoint
boostTransitionWidth
boostLuminanceAmount
boostAmount
shadowDesaturatePoint
shadowDesaturateWidth
shadowDesaturateAmount
noiseInterpolant
ISOSetting
exposureTime
noiseTransitionEnabled
noiseEstimate
greenSplitRed
greenSplitGreen1
greenSplitBlue
greenBayerSplit
xScale
yScale
cameraV2PlusNoiseCharacterized
ISOABArray
noiseARegressionType
noiseACCoefficient
noiseADCoefficient
noiseAECoefficient
noiseBRegressionType
noiseBCCoefficient
noiseBDCoefficient
noiseBECoefficient
noiseISOpPin
cameraV2PlusHighlightNoiseCharacterized
breakpointFraction
noiseAHRegressionType
noiseAHCCoefficient
noiseAHDCoefficient
noiseAHECoefficient
noiseBHRegressionType
noiseBHCCoefficient
noiseBHDCoefficient
noiseBHECoefficient
noiseAH2RegressionType
noiseAH2CCoefficient
noiseAH2DCoefficient
noiseAH2ECoefficient
noiseBH2RegressionType
noiseBH2CCoefficient
noiseBH2DCoefficient
noiseBH2ECoefficient
destWidth
destHeight
sourceWidth
sourceHeight
destHorizOffset
destVertOffset
sensorSize
activeRect
cropRect
actualCropRect
paddedCropRect
blackLevelSource
v2blackSampleArea
bitsPerSample
signalNoiseModelA0
signalNoiseModelB0
signalNoiseModelC0
signalNoiseModelPRNU0
signalNoiseModelA1
signalNoiseModelB1
signalNoiseModelC1
signalNoiseModelPRNU1
signalNoiseModelA2
signalNoiseModelB2
signalNoiseModelC2
signalNoiseModelPRNU2
signalNoiseModelA3
signalNoiseModelB3
signalNoiseModelC3
signalNoiseModelPRNU3
individualQuadratics
darkNoise0
darkNoise1
darkNoise2
darkNoise3
CNRAmount
CNRNoiseFactor
CNRRadius
CNRBias
FujiCAEnable
FujiLensCorrectionEnable
FujiCANumberOfPoints
FujiCAMaxDistance
lrTable0
lrTable1
lrTable2
lrTable3
lrTable4
lrTable5
lrTable6
lrTable7
lrTable8
lrTable9
lrTable10
lrTable11
lrTable12
lrTable13
lrTable14
lrTable15
caRed0
caRed1
caRed2
caRed3
caRed4
caRed5
caRed6
caRed7
caRed8
caRed9
caRed10
caRed11
caRed12
caRed13
caRed14
caRed15
caBlue0
caBlue1
caBlue2
caBlue3
caBlue4
caBlue5
caBlue6
caBlue7
caBlue8
caBlue9
caBlue10
caBlue11
caBlue12
caBlue13
caBlue14
caBlue15
FujiLensCorrectionNumberOfPoints
FujiLensCorrectionMaxDistance
FujiLensCorrectionLR0
FujiLensCorrectionLR1
FujiLensCorrectionLR2
FujiLensCorrectionLR3
FujiLensCorrectionLR4
FujiLensCorrectionLR5
FujiLensCorrectionLR6
FujiLensCorrectionLR7
FujiLensCorrectionLR8
FujiLensCorrectionLR9
FujiLensCorrectionLR10
FujiLensCorrectionLR11
FujiLensCorrectionLR12
FujiLensCorrectionLR13
FujiLensCorrectionLR14
FujiLensCorrectionLR15
FujiLensCorrectionFactor0
FujiLensCorrectionFactor1
FujiLensCorrectionFactor2
FujiLensCorrectionFactor3
FujiLensCorrectionFactor4
FujiLensCorrectionFactor5
FujiLensCorrectionFactor6
FujiLensCorrectionFactor7
FujiLensCorrectionFactor8
FujiLensCorrectionFactor9
FujiLensCorrectionFactor10
FujiLensCorrectionFactor11
FujiLensCorrectionFactor12
FujiLensCorrectionFactor13
FujiLensCorrectionFactor14
FujiLensCorrectionFactor15
fullSize
supportedSushiLevels
inputLNRAmount
inputCNRAmount
inputSharpenAmount
inputSharpenThreshold
inputContrastAmount
inputDetailAmount
inputRepresentativeNoise
inputMoireRadius
inputMoireAmount
inputOpponentColorEnabled
inputNeutralFactors
inputSushiMode
inputBoostMethod
inputLumFactors
inputNeutral
inputShouldLinearize
inputSensorPattern
inputCalibrationIlluminant1
inputCalibrationIlluminant2
inputXYZtoCamera1
inputXYZtoCamera2
inputCameraCalibration1
inputCameraCalibration2
inputReduction1
inputReduction2
inputForwardMatrix1
inputForwardMatrix2
inputShouldUseForwardMatrix
inputShouldRecoverHighlights
inputBias
inputBoostKind
inputTRCs0
inputTRCs1
inputTRCs2
inputTRCs3
inputTRCs4
inputTRCy1
inputTRCy2
inputTRCy3
inputBoostTransitionPoint
inputBoostTransitionWidth
inputBoostLuminanceAmount
inputBoostShadowAmount
inputBoostPreserveHueAmount
inputBoostAmount
inputHueMagMR
inputHueMagRY
inputHueMagYG
inputHueMagGC
inputHueMagCB
inputHueMagBM
inputM00
inputM01
inputM02
inputM10
inputM11
inputM12
inputM20
inputM21
inputM22
d16@?0d8
inputPattern
inputBlacks
inputFactors
inputDespeckle
inputTargetSize
Unexpected CFA pattern
bad CFA index
mismatch in green channels
inputGainMapStartPlane
inputGainMapNumPlanes
inputGainMapApplyRegion
inputGainMapSize
inputGainMapData
Unexpected size of gainmap parameters
Gain Map will be ignored because of %s
unknown reason
inputVignetteK0
inputVignetteK1
inputVignetteK2
inputVignetteK3
inputVignetteK4
inputVignetteCenter
inputVignetteTableDataSize
@"NSString"24@?0@"NSString"8@"NSString"16
{%d, %d}
{{%d, %d}, {%d, %d}}
aspectRatioCrop
firmwareVersion
RadialLensCorrectionFilter inputScales must be of type CIVector.
RadialLensCorrectionFilter inputScales must be a vector with length greater than 2.
radialLens
radialLensDraft
{CGRect={CGPoint=dd}{CGSize=dd}}44@?0i8{CGRect={CGPoint=dd}{CGSize=dd}}12
inputScalesR
inputScalesB
RadialLensCorrectionFilterRB inputScalesR must be of type CIVector.
RadialLensCorrectionFilterRB inputScalesB must be of type CIVector.
RadialLensCorrectionFilterRB inputScalesR length must be same as inputScalesB length.
RadialLensCorrectionFilterRB inputScalesR must be a vector with length greater than 2.
radialLensRB
%04d:%02d:%02d %02d:%02d:%02d
RAWCAMERA_OVERRIDE_STITCHING
GAIN
{%u, %u}
LensInfo
ApertureValue
FNumber
ExposureTime
ISOSpeedRatings
AsShotNeutral
BaselineExposure
BlackLevel
WhiteLevel
CalibrationIlluminant1
CalibrationIlluminant2
UniqueCameraModel
ColorMatrix1
ColorMatrix2
NoiseProfile
FixVignetteRadial
activeRectAvailableAsTag
hasExtendedDynamicRangeAdjustment
extendedDynamicRangeAdjustment
dngBaselineExposureTag
pentaxShakeReduction
fujiHigh
fujiHighlightEnabled
fujiHybridMode
inputDistortionScaleHalfMinorRadius
inputDistortionScaleMinorRadius
inputDistortionScaleMajorRadius
inputDistortionScaleMaxRadius
parms
whiteLevelFromTag
exif
ShutterSpeedValue
DateTimeOriginal
FocalLength
ExposureMode
CreateDate
en_US
yyyy-MM-dd'T'HH:mm:ss
yyyy:MM:dd HH:mm
packingMethod
COOLPIX P7000
COOLPIX P7100
highSpeedCropMode
isMultipleExposure
NEFCompression
sensorBitDepth
encrypted
encrypted2
IFD0:EXIF:MAKERNOTE:0x14
DNG Unpacker I/O Queue
DNG Unpacker Queue
RAWCAMERA_LOG_WHITEPOINT
WhitePoint: x=%1.4lf  |  y=%1.4lf 
hw.optional.sse2
could not allocate red or blue buffer
FALSE
TRUE
inputShouldWarn
gamutWarning
gmKernel_v7
gmKernel_v6
Canon EOS 10D
crw.canon.2147484008.3152.2068
Canon EOS 20D
cr2.canon.2147484021.3596.2360
Canon EOS 300D DIGITAL
crw.canon.2147484016.3152.2068
Canon EOS 30D
cr2.canon.2147484212.3596.2360
Canon EOS 350D DIGITAL
cr2.canon.2147484041.3516.2328
Canon EOS 350D
Canon EOS 400D DIGITAL
cr2.canon.2147484214.3948.2622
Canon EOS 450D
cr2.canon.2147484022.4312.2876
Canon EOS 40D
cr2.canon.2147484048.3944.2622
Canon EOS 5D
cr2.canon.2147484179.4476.2954
Canon EOS D30
crw.canon.18087936.2224.1456
Canon EOS D60
crw.canon.23494656.3152.2068
Canon EOS DIGITAL REBEL XT
Canon EOS DIGITAL REBEL XTi
Canon EOS DIGITAL REBEL
Canon EOS DIGITAL REBEL XSi
Canon EOS Kiss Digital N
Canon EOS Kiss Digital X
Canon EOS Kiss Digital
Canon EOS Kiss X2
Canon EOS-1D Mark II N
cr2.canon.2147484210.3596.2360
Canon EOS-1D Mark II
cr2.canon.2147484020.3596.2360
Canon EOS-1D Mark III
cr2.canon.2147484009.3984.2622
Canon EOS-1D
tif.canon.2147483649
Canon EOS-1Ds Mark II
cr2.canon.2147484040.5108.3349
Canon EOS-1Ds Mark III
cr2.canon.2147484181.5712.3774
Canon EOS-1DS
tif.canon.2147484007
Canon PowerShot G3
crw.canon.18415616.2376.1728
Canon PowerShot G5
crw.canon.19464192.2672.1968
Canon PowerShot G6
crw.canon.20971520.3160.2344
Canon PowerShot G9
cr2.canon.35848192.4104.3048
Canon PowerShot Pro1
crw.canon.20381696.3344.2484
Canon PowerShot S60
crw.canon.20512768.2672.1968
Canon PowerShot S70
crw.canon.20447232.3160.2344
Epson R-D1
erf.epson.R-D1
Epson R-D1s
erf.epson.R-D1s
Fujifilm FinePix S3Pro
raf.fuji.FinePixS3Pro
Fujifilm FinePix S3Pro+
Fujifilm FinePix S5Pro
raf.fuji.FinePixS5Pro
Fujifilm FinePix S5Pro+
Fujifilm FinePixS2Pro
raf.fuji.FinePixS2Pro
Hasselblad 22MP F
fff.hasselblad.6
Hasselblad 22MP
3fr.hasselblad.6
Hasselblad 22MP-II F
Hasselblad 22MP-II
Hasselblad 31MP F
fff.hasselblad.8
Hasselblad 31MP
3fr.hasselblad.8
Hasselblad 39MP F
fff.hasselblad.9
Hasselblad 39MP
3fr.hasselblad.9
Konica Minolta ALPHA SWEET DIGITAL
mrw.minolta.ALPHASWEETDIGITAL
Konica Minolta ALPHA-5 DIGITAL
mrw.minolta.ALPHA-5DIGITAL
Konica Minolta ALPHA-7 DIGITAL
mrw.minolta.ALPHA-7DIGITAL
Konica Minolta DiMAGE A2
mrw.minolta.DiMAGEA2
Konica Minolta DYNAX 5D
mrw.minolta.DYNAX5D
Konica Minolta DYNAX 7D
mrw.minolta.DYNAX7D
Konica Minolta MAXXUM 5D
mrw.minolta.MAXXUM5D
Konica Minolta MAXXUM 7D
mrw.minolta.MAXXUM7D
Leaf Valeo 11
mos.leaf.6
Leaf Valeo 17
mos.leaf.9
Leaf Valeo 22
mos.leaf.7
Leaf Aptus 17
mos.leaf.11
Leaf Aptus 22
mos.leaf.12
Leaf Aptus 65
mos.leaf.14
Leaf Aptus 75
mos.leaf.13
Leaf Aptus 75S
mos.leaf.17
Leica D-LUX 3
raw.leica.D-LUX3
Leica D-LUX2
raw.leica.D-LUX2
Leica DIGILUX 2
raw.leica.DIGILUX2
Leica DIGILUX 3
raw.leica.DIGILUX3
Leica M8 Digital Camera
dng.adobe.M8DigitalCamera
Leica V-LUX 1
raw.leica.V-LUX1
Minolta DiMAGE A1
mrw.minolta.DiMAGEA1
Nikon D1
nef.nikon.D1
Nikon D100
nef.nikon.D100
Nikon D1H
nef.nikon.D1H
Nikon D1X
nef.nikon.D1X
Nikon D200
nef.nikon.D200
Nikon D2H
nef.nikon.D2H
Nikon D2Hs
nef.nikon.D2Hs
Nikon D2X
nef.nikon.D2X
Nikon D2Xs
nef.nikon.D2Xs
Nikon D3
nef.nikon.D3
Nikon D3+
Nikon D300
nef.nikon.D300
Nikon D300+
Nikon D40
nef.nikon.D40
Nikon D40X
nef.nikon.D40X
Nikon D50
nef.nikon.D50
Nikon D60
nef.nikon.D60
Nikon D70
nef.nikon.D70
Nikon D70s
nef.nikon.D70s
Nikon D80
nef.nikon.D80
Nikon E8400
nef.nikon.E8400
Nikon E8700
nef.nikon.E8700
Nikon E8800
nef.nikon.E8800
Olympus C70Z,C7000Z
orf.olympus.C70Z,C7000Z
Olympus C7070WZ
orf.olympus.C7070WZ
Olympus C8080WZ
orf.olympus.C8080WZ
Olympus E-1
orf.olympus.#4001
Olympus E-3
orf.olympus.#4031
Olympus E-300
orf.olympus.#4007
Olympus E-330
orf.olympus.#4016
Olympus E-400
orf.olympus.#4023
Olympus E-410
orf.olympus.#4038
Olympus E-500
orf.olympus.#4011
Olympus E-510
orf.olympus.#4046
Panasonic DMC-FZ50
raw.panasonic.DMC-FZ50
Panasonic DMC-L1
raw.panasonic.DMC-L1
Panasonic DMC-LC1
raw.panasonic.DMC-LC1
Panasonic DMC-LX1
raw.panasonic.DMC-LX1
Panasonic DMC-LX2
raw.panasonic.DMC-LX2
Pentax *ist D
pef.pentax.76180
Pentax *ist DL
pef.pentax.76570
Pentax *ist DS
pef.pentax.76450
Pentax K100D
pef.pentax.76700
Pentax K10D
pef.pentax.76830
Pentax K110D
pef.pentax.76701
Samsung GX-1L
pef.samsung.76672
Sony DSC-F828
srf.sony.DSC-F828
Sony DSC-V3
srf.sony.DSC-V3
Sony DSLR-A100
arw.sony.256
Sony DSLR-A700
arw.sony.258
Canon EOS 10D dng
dng.adobe.CanonEOS10D
Canon EOS 20D dng
dng.adobe.CanonEOS20D
Canon EOS 300D DIGITAL dng
dng.adobe.CanonEOS300D
Canon EOS 30D dng
dng.adobe.CanonEOS30D
Canon EOS 350D DIGITAL dng
dng.adobe.CanonEOS350D
Canon EOS 350D dng
Canon EOS 400D DIGITAL dng
dng.adobe.CanonEOS400D
Canon EOS 450D dng
dng.adobe.CanonEOS450D
Canon EOS 40D dng
dng.adobe.CanonEOS40D
Canon EOS 5D dng
dng.adobe.CanonEOS5D
Canon EOS D30 dng
dng.adobe.CanonEOSD30
Canon EOS D60 dng
dng.adobe.CanonEOSD60
Canon EOS DIGITAL REBEL XT dng
Canon EOS DIGITAL REBEL XTi dng
Canon EOS DIGITAL REBEL dng
Canon EOS DIGITAL REBEL XSi dng
Canon EOS Kiss Digital N dng
Canon EOS Kiss Digital X dng
Canon EOS Kiss Digital dng
Canon EOS Kiss X2 dng
Canon EOS-1D Mark II N dng
dng.adobe.CanonEOS-1DMarkIIN
Canon EOS-1D Mark II dng
dng.adobe.CanonEOS-1DMarkII
Canon EOS-1D Mark III dng
dng.adobe.CanonEOS-1DMarkIII
Canon EOS-1D dng
dng.adobe.CanonEOS-1D
Canon EOS-1Ds Mark II dng
dng.adobe.CanonEOS-1DsMarkII
Canon EOS-1Ds Mark III dng
dng.adobe.CanonEOS-1DsMarkIII
Canon EOS-1DS dng
dng.adobe.CanonEOS-1Ds
Canon PowerShot G3 dng
dng.adobe.CanonPowerShotG3
Canon PowerShot G5 dng
dng.adobe.CanonPowerShotG5
Canon PowerShot G6 dng
dng.adobe.CanonPowerShotG6
Canon PowerShot G9 dng
dng.adobe.CanonPowerShotG9
Canon PowerShot Pro1 dng
dng.adobe.CanonPowerShotPro1
Canon PowerShot S60 dng
dng.adobe.CanonPowerShotS60
Canon PowerShot S70 dng
dng.adobe.CanonPowerShotS70
Epson R-D1 dng
dng.adobe.EpsonR-D1
Epson R-D1s dng
dng.adobe.EpsonR-D1s
Fujifilm FinePix S3Pro dng
dng.adobe.FujifilmFinePixS3Pro
Fujifilm FinePix S3Pro+ dng
Fujifilm FinePix S5Pro dng
dng.adobe.FujifilmFinePixS5Pro
Fujifilm FinePix S5Pro+ dng
Fujifilm FinePixS2Pro dng
dng.adobe.FujifilmFinePixS2Pro
Hasselblad 22MP F dng
Hasselblad 22MP dng
Hasselblad 22MP-II F dng
Hasselblad 22MP-II dng
Hasselblad 31MP F dng
Hasselblad 31MP dng
Hasselblad 39MP F dng
Hasselblad 39MP dng
Konica Minolta ALPHA SWEET DIGITAL dng
dng.adobe.KonicaMinoltaMaxxum5D
Konica Minolta ALPHA-5 DIGITAL dng
Konica Minolta ALPHA-7 DIGITAL dng
dng.adobe.KonicaMinoltaMaxxum7D
Konica Minolta DiMAGE A2 dng
dng.adobe.KonicaMinoltaDiMAGEA2
Konica Minolta DYNAX 5D dng
Konica Minolta DYNAX 7D dng
Konica Minolta MAXXUM 5D dng
Konica Minolta MAXXUM 7D dng
Leaf Valeo 11 dng
dng.adobe.LeafValeo11
Leaf Valeo 17 dng
dng.adobe.LeafValeo17
Leaf Valeo 22 dng
dng.adobe.LeafValeo22
Leaf Aptus 17 dng
dng.adobe.LeafAptus17
Leaf Aptus 22 dng
dng.adobe.LeafAptus22
Leaf Aptus 65 dng
dng.adobe.LeafAptus65
Leaf Aptus 75 dng
dng.adobe.LeafAptus75
Leaf Aptus 75S dng
dng.adobe.LeafAptus75S
Leica D-LUX 3 dng
dng.adobe.LeicaD-LUX3
Leica D-LUX2 dng
dng.adobe.LeicaD-Lux2
Leica DIGILUX 2 dng
dng.adobe.LeicaDigilux2
Leica DIGILUX 3 dng
dng.adobe.LeicaDIGILUX3
Leica M8 Digital Camera dng
Leica V-LUX 1 dng
dng.adobe.LeicaV-LUX1
Minolta DiMAGE A1 dng
dng.adobe.MinoltaDiMAGEA1
Nikon D1 dng
dng.adobe.NikonD1
Nikon D100 dng
dng.adobe.NikonD100
Nikon D1H dng
dng.adobe.NikonD1H
Nikon D1X dng
dng.adobe.NikonD1X
Nikon D200 dng
dng.adobe.NikonD200
Nikon D2H dng
dng.adobe.NikonD2H
Nikon D2Hs dng
dng.adobe.NikonD2Hs
Nikon D2X dng
dng.adobe.NikonD2X
Nikon D2Xs dng
dng.adobe.NikonD2Xs
Nikon D3 dng
dng.adobe.NikonD3
Nikon D3+ dng
Nikon D300 dng
dng.adobe.NikonD300
Nikon D300+ dng
Nikon D40 dng
dng.adobe.NikonD40
Nikon D40X dng
dng.adobe.NikonD40X
Nikon D50 dng
dng.adobe.NikonD50
Nikon D60 dng
dng.adobe.NikonD60
Nikon D70 dng
dng.adobe.NikonD70
Nikon D70s dng
dng.adobe.NikonD70s
Nikon D80 dng
dng.adobe.NikonD80
Nikon E8400 dng
dng.adobe.NikonCoolpix8400
Nikon E8700 dng
dng.adobe.NikonCoolpix8700
Nikon E8800 dng
dng.adobe.NikonCoolpix8800
Olympus C70Z,C7000Z dng
dng.adobe.OlympusC-7000Z
Olympus C7070WZ dng
dng.adobe.OlympusC-7070WZ
Olympus C8080WZ dng
dng.adobe.OlympusC-8080WZ
Olympus E-1 dng
dng.adobe.OlympusE-1
Olympus E-3 dng
dng.adobe.OlympusE-3
Olympus E-300 dng
dng.adobe.OlympusE-300
Olympus E-330 dng
dng.adobe.OlympusE-330
Olympus E-400 dng
dng.adobe.OlympusE-400
Olympus E-410 dng
dng.adobe.OlympusE-410
Olympus E-500 dng
dng.adobe.OlympusE-500
Olympus E-510 dng
dng.adobe.OlympusE-510
Panasonic DMC-FZ50 dng
dng.adobe.PanasonicDMC-FZ50
Panasonic DMC-L1 dng
dng.adobe.PanasonicDMC-L1
Panasonic DMC-LC1 dng
dng.adobe.PanasonicDMC-LC1
Panasonic DMC-LX1 dng
dng.adobe.PanasonicDMC-LX1
Panasonic DMC-LX2 dng
dng.adobe.PanasonicDMC-LX2
Pentax *ist D dng
dng.adobe.Pentax*istD
Pentax *ist DL dng
dng.adobe.Pentax*istDL
Pentax *ist DS dng
dng.adobe.Pentax*istDS
Pentax K100D dng
dng.adobe.PentaxK100D
Pentax K10D dng
dng.adobe.PENTAXK10D
Pentax K110D dng
dng.adobe.PentaxK110D
Samsung GX-1L dng
dng.adobe.SamsungGX-1L
Sony DSC-F828 dng
dng.adobe.SonyDSC-F828
Sony DSC-V3 dng
dng.adobe.SonyDSC-V3
Sony DSLR-A100 dng
dng.adobe.SONYDSLR-A100
Sony DSLR-A700 dng
dng.adobe.SonyDSLR-A700
RCID_AdobeDNG
RCID_CanonEOS1000D
cr2.canon.2147484244.3948.2622
RCID_CanonEOS10D
RCID_CanonEOS1100D
cr2.canon.2147484296.4352.2874
RCID_CanonEOS1D
RCID_CanonEOS1DMarkII
RCID_CanonEOS1DMarkIII
RCID_CanonEOS1DMarkIII_sraw
cr2.canon.2147484009.sraw
RCID_CanonEOS1DMarkIIN
RCID_CanonEOS1DMarkIV
cr2.canon.2147484289.5120.3318
RCID_CanonEOS1DMarkIV_sraw
cr2.canon.2147484289.sraw
RCID_CanonEOS1DX
cr2.canon.2147484265.5344.3584
RCID_CanonEOS1DX_sraw
cr2.canon.2147484265.sraw
RCID_CanonEOS1Ds
RCID_CanonEOS1DsMarkII
RCID_CanonEOS1DsMarkIII
RCID_CanonEOS1DsMarkIII_sraw
cr2.canon.2147484181.sraw
RCID_CanonEOS20D
RCID_CanonEOS300D
RCID_CanonEOS30D
RCID_CanonEOS350D
RCID_CanonEOS400D
RCID_CanonEOS40D
RCID_CanonEOS40D_sraw
cr2.canon.2147484048.sraw
RCID_CanonEOS450D
RCID_CanonEOS500D
cr2.canon.2147484242.4832.3204
RCID_CanonEOS50D
cr2.canon.2147484257.4832.3228
RCID_CanonEOS50D_sraw
cr2.canon.2147484257.sraw
RCID_CanonEOS550D
cr2.canon.2147484272.5344.3516
RCID_CanonEOS5D
RCID_CanonEOS5DMarkII
cr2.canon.2147484184.5792.3804
RCID_CanonEOS5DMarkIII
cr2.canon.2147484293.5920.3950
RCID_CanonEOS5DMarkIII_sraw
cr2.canon.2147484293.sraw
RCID_CanonEOS5DMarkII_sraw
cr2.canon.2147484184.sraw
RCID_CanonEOS600D
cr2.canon.2147484294.5344.3516
RCID_CanonEOS60D
cr2.canon.2147484295.5344.3516
RCID_CanonEOS60D_sraw
cr2.canon.2147484295.sraw
RCID_CanonEOS7D
cr2.canon.2147484240.5360.3516
RCID_CanonEOS7D_sraw
cr2.canon.2147484240.sraw
RCID_CanonEOSD30
RCID_CanonEOSD60
RCID_CanonPowerShotG10
cr2.canon.38338560.4480.3348
RCID_CanonPowerShotG11
cr2.canon.40894464.3744.2784
RCID_CanonPowerShotG12
cr2.canon.43122688.3744.2784
RCID_CanonPowerShotG1X
cr2.canon.50855936.4496.3366
RCID_CanonPowerShotG3
RCID_CanonPowerShotG5
RCID_CanonPowerShotG6
RCID_CanonPowerShotG9
RCID_CanonPowerShotPro1
RCID_CanonPowerShotS100
cr2.canon.51445760.4160.3124
RCID_CanonPowerShotS60
RCID_CanonPowerShotS70
RCID_CanonPowerShotS90
cr2.canon.41025536.3744.2784
RCID_CanonPowerShotS95
cr2.canon.43319296.3744.2784
RCID_CanonPowerShotSX1
cr2.canon.38141952.4152.2772
RCID_EpsonRD1
RCID_EpsonRD1s
RCID_EpsonRD1x
erf.epson.R-D1x
RCID_FujifilmFinePixS2Pro
RCID_FujifilmFinePixS3Pro
RCID_FujifilmFinePixS5Pro
RCID_FujifilmFinePixX10
raf.fuji.X10
RCID_FujifilmFinePixX100
raf.fuji.FinePixX100
RCID_Hasselblad16MP_3FR
3fr.hasselblad.4
RCID_Hasselblad22MP_3FR
RCID_Hasselblad31MP_3FR
RCID_Hasselblad39MP_3FR
RCID_Hasselblad40MP_3FR
3fr.hasselblad.13
RCID_Hasselblad50MP_3FR
3fr.hasselblad.11
RCID_Hasselblad60MP_3FR
xxxxx
RCID_Hasselblad16MP_FFF
fff.hasselblad.4
RCID_Hasselblad22MP_FFF
RCID_Hasselblad31MP_FFF
RCID_Hasselblad39MP_FFF
RCID_Hasselblad40MP_FFF
fff.hasselblad.13
RCID_Hasselblad50MP_FFF
fff.hasselblad.11
RCID_KodakDCSProSLRn
dcr.kodak.DCSProSLR_n
RCID_LeafAFi5
mos.leaf.18
RCID_LeafAFi6
mos.leaf.19
RCID_LeafAFi7
mos.leaf.20
RCID_LeafAFiII6
mos.leaf.26
RCID_LeafAFiII7
mos.leaf.21
RCID_LeafAptus17
RCID_LeafAptus22
RCID_LeafAptus54S
mos.leaf.15
RCID_LeafAptus65
RCID_LeafAptus65S
mos.leaf.16
RCID_LeafAptus75
RCID_LeafAptus75S
RCID_LeafAptusII6
mos.leaf.24
RCID_LeafAptusII7
mos.leaf.22
RCID_LeafValeo11
RCID_LeafValeo17
RCID_LeafValeo22
RCID_LeafAFiII10
mos.leaf.25
RCID_LeafAFiII5
mos.leaf.28
RCID_LeafAFiII8
mos.leaf.34
RCID_LeafAptusII10
mos.leaf.27
RCID_MamiyaDM22
mos.leaf.32
RCID_MamiyaDM40
mos.leaf.35
RCID_LeicaDLux2
RCID_LeicaDLux3
RCID_LeicaDLux4
rwl.leica.D-LUX4
RCID_LeicaDLux5
rwl.leica.D-LUX5
RCID_LeicaDigilux2
RCID_LeicaDigilux3
RCID_LeicaM8
RCID_LeicaM9
dng.adobe.M9DigitalCamera
RCID_LeicaS2
dng.adobe.S2
RCID_LeicaVLux1
RCID_LeicaVLux2
rwl.leica.V-LUX2
RCID_LeicaX1
dng.adobe.LEICAX1
RCID_KonicaMinoltaMaxxum5D
RCID_KonicaMinoltaMaxxum7D
RCID_MinoltaDiMAGEA1
RCID_MinoltaDiMAGEA2
RCID_MinoltaDiMAGEA200
mrw.minolta.DiMAGEA200
RCID_NikonD1
RCID_NikonD100
RCID_NikonD1H
RCID_NikonD1X
RCID_NikonD200
RCID_NikonD2H
RCID_NikonD2Hs
RCID_NikonD2X
RCID_NikonD2Xs
RCID_NikonD3
RCID_NikonD300
RCID_NikonD3000
nef.nikon.D3000
RCID_NikonD300S
nef.nikon.D300S
RCID_NikonD3100
nef.nikon.D3100
RCID_NikonD3S
nef.nikon.D3S
RCID_NikonD3X
nef.nikon.D3X
RCID_NikonD4
nef.nikon.D4
RCID_NikonD40
RCID_NikonD40X
RCID_NikonD50
RCID_NikonD5000
nef.nikon.D5000
RCID_NikonD5100
nef.nikon.D5100
RCID_NikonD60
RCID_NikonD70
RCID_NikonD700
nef.nikon.D700
RCID_NikonD7000
nef.nikon.D7000
RCID_NikonD70s
RCID_NikonD80
RCID_NikonD800
nef.nikon.D800
RCID_NikonD800E
nef.nikon.D800E
RCID_NikonD90
nef.nikon.D90
RCID_NikonE8400
RCID_NikonE8700
RCID_NikonE8800
RCID_NikonJ1
nef.nikon.1J1
RCID_NikonP6000
nrw.nikon.P6000
RCID_NikonP7000
nrw.nikon.P7000
RCID_NikonP7100
nrw.nikon.P7100
RCID_NikonV1
nef.nikon.1V1
RCID_OlympusC7000Z
RCID_OlympusC7070WZ
RCID_OlympusC8080WZ
RCID_OlympusE1
RCID_OlympusE10
orf.olympus.E-10
RCID_OlympusE20
orf.olympus.E-20
RCID_OlympusE3
RCID_OlympusE30
orf.olympus.#4073
RCID_OlympusE300
RCID_OlympusE330
RCID_OlympusE400
RCID_OlympusE410
RCID_OlympusE420
orf.olympus.E-420
RCID_OlympusE450
orf.olympus.E-450
RCID_OlympusE5
orf.olympus.#4109
RCID_OlympusE500
RCID_OlympusE510
RCID_OlympusE520
orf.olympus.#4067
RCID_OlympusE600
orf.olympus.E-600
RCID_OlympusE620
orf.olympus.E-620
RCID_OlympusEM5
orf.olympus.#4138
RCID_OlympusEP1
orf.olympus.#4087
RCID_OlympusEP2
orf.olympus.#4096
RCID_OlympusEP3
orf.olympus.#4124
RCID_OlympusEPL1
orf.olympus.E-PL1
RCID_OlympusEPL1s
orf.olympus.E-PL1s
RCID_OlympusEPL2
orf.olympus.#4118
RCID_OlympusEPL3
orf.olympus.#4131
RCID_OlympusEPM1
orf.olympus.#4134
RCID_OlympusSP570UZ
orf.olympus.SP570UZ
RCID_OlympusXZ1
orf.olympus.#0237
RCID_PanasonicDMCFZ100
rw2.panasonic.DMC-FZ100
RCID_PanasonicDMCFZ150
rw2.panasonic.DMC-FZ150
RCID_PanasonicDMCFZ35
rw2.panasonic.DMC-FZ35
RCID_PanasonicDMCFZ38
rw2.panasonic.DMC-FZ38
RCID_PanasonicDMCFZ50
RCID_PanasonicDMCG1
rw2.panasonic.DMC-G1
RCID_PanasonicDMCG10
rw2.panasonic.DMC-G10
RCID_PanasonicDMCG2
rw2.panasonic.DMC-G2
RCID_PanasonicDMCG3
rw2.panasonic.DMC-G3
RCID_PanasonicDMCGF1
rw2.panasonic.DMC-GF1
RCID_PanasonicDMCGF2
rw2.panasonic.DMC-GF2
RCID_PanasonicDMCGF3
rw2.panasonic.DMC-GF3
RCID_PanasonicDMCGF5
rw2.panasonic.DMC-GF5
RCID_PanasonicDMCGH1
rw2.panasonic.DMC-GH1
RCID_PanasonicDMCGH2
rw2.panasonic.DMC-GH2
RCID_PanasonicDMCGX1
rw2.panasonic.DMC-GX1
RCID_PanasonicDMCL1
RCID_PanasonicDMCLC1
RCID_PanasonicDMCLX1
RCID_PanasonicDMCLX2
RCID_PanasonicDMCLX3
rw2.panasonic.DMC-LX3
RCID_PanasonicDMCLX5
rw2.panasonic.DMC-LX5
RCID_Pentax*istD
RCID_Pentax*istDL
RCID_Pentax*istDL2
pef.pentax.76670
RCID_Pentax*istDS
RCID_Pentax*istDS2
pef.pentax.76640
RCID_PentaxK100D
RCID_PentaxK100DSuper
pef.pentax.76706
RCID_PentaxK10D
RCID_PentaxK110D
RCID_PentaxK2000
pef.pentax.77170
RCID_PentaxK200D
pef.pentax.77050
RCID_PentaxK20D
pef.pentax.77010
RCID_PentaxK5
pef.pentax.77430
RCID_PentaxK7
pef.pentax.77240
RCID_PentaxKr
pef.pentax.77420
RCID_PentaxKx
pef.pentax.77310
RCID_SamsungGX1L
RCID_SamsungGX1S
pef.samsung.76642
RCID_SamsungNX10
srw.samsung.NX10
RCID_SamsungNX100
srw.samsung.NX100
RCID_SamsungNX11
srw.samsung.NX11
RCID_SamsungNX200
srw.samsung.NX200
RCID_SonyDSLRA100
RCID_SonyDSLRA200
arw.sony.259
RCID_SonyDSLRA230
arw.sony.265
RCID_SonyDSLRA290
arw.sony.266
RCID_SonyDSLRA300
arw.sony.261
RCID_SonyDSLRA330
arw.sony.264
RCID_SonyDSLRA350
arw.sony.260
RCID_SonyDSLRA380
arw.sony.263
RCID_SonyDSLRA390
RCID_SonyDSLRA450
arw.sony.275
RCID_SonyDSLRA500
arw.sony.274
RCID_SonyDSLRA550
arw.sony.273
RCID_SonyDSLRA560
arw.sony.282
RCID_SonyDSLRA580
arw.sony.283
RCID_SonyDSLRA700
RCID_SonyDSLRA850
arw.sony.269
RCID_SonyDSLRA900
arw.sony.257
RCID_SonyDSCF828
RCID_SonyDSLRNEX3
arw.sony.279
RCID_SonyDSLRNEX5
arw.sony.278
RCID_SonyNEX5N
arw.sony.288
RCID_SonyNEX7
arw.sony.289
RCID_SonyDSLRNEXC3
arw.sony.284
RCID_SonyNEXVG20
arw.sony.290
RCID_SonyDSCR1
sr2.sony.DSC-R1
RCID_SonyDSLRSLTA33
arw.sony.280
RCID_SonyDSLRSLTA35
arw.sony.285
RCID_SonyDSLRSLTA55
arw.sony.281
RCID_SonySLTA57
arw.sony.292
RCID_SonySLTA65
arw.sony.286
RCID_SonySLTA77
arw.sony.287
RCID_SonyDSCV3
RCID_AdobeDNG dng
RCID_CanonEOS1000D dng
dng.adobe.CanonEOS1000D
RCID_CanonEOS10D dng
RCID_CanonEOS1100D dng
dng.adobe.CanonEOS1100D
RCID_CanonEOS1D dng
RCID_CanonEOS1DMarkII dng
RCID_CanonEOS1DMarkIII dng
RCID_CanonEOS1DMarkIIN dng
RCID_CanonEOS1DMarkIV dng
dng.adobe.CanonEOS-1DMarkIV
RCID_CanonEOS1DX dng
xxxx
RCID_CanonEOS1Ds dng
RCID_CanonEOS1DsMarkII dng
RCID_CanonEOS1DsMarkIII dng
RCID_CanonEOS20D dng
RCID_CanonEOS300D dng
RCID_CanonEOS30D dng
RCID_CanonEOS350D dng
RCID_CanonEOS400D dng
RCID_CanonEOS40D dng
RCID_CanonEOS450D dng
RCID_CanonEOS500D dng
dng.adobe.CanonEOS500D
RCID_CanonEOS50D dng
dng.adobe.CanonEOS50D
RCID_CanonEOS550D dng
dng.adobe.CanonEOS550D
RCID_CanonEOS5D dng
RCID_CanonEOS5DMarkII dng
dng.adobe.CanonEOS5DMarkII
RCID_CanonEOS5DMarkIII dng
RCID_CanonEOS600D dng
dng.adobe.CanonEOS600D
RCID_CanonEOS60D dng
dng.adobe.CanonEOS60D
RCID_CanonEOS7D dng
dng.adobe.CanonEOS7D
RCID_CanonEOSD30 dng
RCID_CanonEOSD60 dng
RCID_CanonPowerShotG10 dng
dng.adobe.CanonPowerShotG10
RCID_CanonPowerShotG11 dng
dng.adobe.CanonPowerShotG11
RCID_CanonPowerShotG12 dng
dng.adobe.CanonPowerShotG12
RCID_CanonPowerShotG1X dng
RCID_CanonPowerShotG3 dng
RCID_CanonPowerShotG5 dng
RCID_CanonPowerShotG6 dng
RCID_CanonPowerShotG9 dng
RCID_CanonPowerShotPro1 dng
RCID_CanonPowerShotS100 dng
dng.adobe.CanonPowerShotS100
RCID_CanonPowerShotS60 dng
RCID_CanonPowerShotS70 dng
RCID_CanonPowerShotS90 dng
dng.adobe.CanonPowerShotS90
RCID_CanonPowerShotS95 dng
dng.adobe.CanonPowerShotS95
RCID_CanonPowerShotSX1 dng
dng.adobe.CanonPowerShotSX1IS
RCID_EpsonRD1 dng
RCID_EpsonRD1s dng
RCID_EpsonRD1x dng
dng.adobe.EpsonR-D1x
RCID_FujifilmFinePixS2Pro dng
RCID_FujifilmFinePixS3Pro dng
RCID_FujifilmFinePixS5Pro dng
RCID_FujifilmFinePixX10 dng
dng.adobe.FujifilmFinePixX10
RCID_FujifilmFinePixX100 dng
dng.adobe.FujifilmFinePixX100
RCID_Hasselblad16MP_3FR dng
RCID_Hasselblad22MP_3FR dng
RCID_Hasselblad31MP_3FR dng
RCID_Hasselblad39MP_3FR dng
RCID_Hasselblad40MP_3FR dng
RCID_Hasselblad50MP_3FR dng
RCID_Hasselblad60MP_3FR dng
RCID_Hasselblad16MP_FFF dng
RCID_Hasselblad22MP_FFF dng
RCID_Hasselblad31MP_FFF dng
RCID_Hasselblad39MP_FFF dng
RCID_Hasselblad40MP_FFF dng
RCID_Hasselblad50MP_FFF dng
RCID_KodakDCSProSLRn dng
dng.adobe.KodakDCSProSLRn
RCID_LeafAFi5 dng
dng.adobe.LeafAFi5
RCID_LeafAFi6 dng
dng.adobe.LeafAFi6
RCID_LeafAFi7 dng
dng.adobe.LeafAFi7
RCID_LeafAFiII6 dng
dng.adobe.LeafAFiII6
RCID_LeafAFiII7 dng
dng.adobe.LeafAFiII7
RCID_LeafAptus17 dng
RCID_LeafAptus22 dng
RCID_LeafAptus54S dng
dng.adobe.LeafAptus54S
RCID_LeafAptus65 dng
RCID_LeafAptus65S dng
dng.adobe.LeafAptus65S
RCID_LeafAptus75 dng
RCID_LeafAptus75S dng
RCID_LeafAptusII6 dng
dng.adobe.LeafAptusII6
RCID_LeafAptusII7 dng
dng.adobe.LeafAptusII7
RCID_LeafValeo11 dng
RCID_LeafValeo17 dng
RCID_LeafValeo22 dng
RCID_LeafAFiII10 dng
RCID_LeafAFiII5 dng
RCID_LeafAFiII8 dng
RCID_LeafAptusII10 dng
RCID_MamiyaDM22 dng
RCID_MamiyaDM40 dng
RCID_LeicaDLux2 dng
RCID_LeicaDLux3 dng
RCID_LeicaDigilux2 dng
RCID_LeicaDigilux3 dng
RCID_LeicaM8 dng
RCID_LeicaM9 dng
RCID_LeicaS2 dng
RCID_LeicaVLux1 dng
RCID_LeicaX1 dng
RCID_KonicaMinoltaMaxxum5D dng
RCID_KonicaMinoltaMaxxum7D dng
RCID_MinoltaDiMAGEA1 dng
RCID_MinoltaDiMAGEA2 dng
RCID_MinoltaDiMAGEA200 dng
dng.adobe.KonicaMinoltaDiMAGEA200
RCID_NikonD1 dng
RCID_NikonD100 dng
RCID_NikonD1H dng
RCID_NikonD1X dng
RCID_NikonD200 dng
RCID_NikonD2H dng
RCID_NikonD2Hs dng
RCID_NikonD2X dng
RCID_NikonD2Xs dng
RCID_NikonD3 dng
RCID_NikonD300 dng
RCID_NikonD3000 dng
dng.adobe.NikonD3000
RCID_NikonD300S dng
dng.adobe.NikonD300S
RCID_NikonD3100 dng
dng.adobe.NikonD3100
RCID_NikonD3S dng
dng.adobe.NikonD3S
RCID_NikonD3X dng
dng.adobe.NikonD3X
RCID_NikonD4 dng
dng.adobe.NikonD4
RCID_NikonD40 dng
RCID_NikonD40X dng
RCID_NikonD50 dng
RCID_NikonD5000 dng
dng.adobe.NikonD5000
RCID_NikonD5100 dng
dng.adobe.NikonD5100
RCID_NikonD60 dng
RCID_NikonD70 dng
RCID_NikonD700 dng
dng.adobe.NikonD700
RCID_NikonD7000 dng
dng.adobe.NikonD7000
RCID_NikonD70s dng
RCID_NikonD80 dng
RCID_NikonD800 dng
dng.adobe.NikonD800
RCID_NikonD800E dng
dng.adobe.NikonD800E
RCID_NikonD90 dng
dng.adobe.NikonD90
RCID_NikonE8400 dng
RCID_NikonE8700 dng
RCID_NikonE8800 dng
RCID_NikonP6000 dng
dng.adobe.NikonCoolpixP6000
RCID_NikonP7000 dng
dng.adobe.NikonCoolpixP7000
RCID_NikonP7100 dng
dng.adobe.NikonCoolpixP7100
RCID_OlympusC7000Z dng
RCID_OlympusC7070WZ dng
RCID_OlympusC8080WZ dng
RCID_OlympusE1 dng
RCID_OlympusE10 dng
dng.adobe.OlympusE-10
RCID_OlympusE20 dng
dng.adobe.OlympusE-20
RCID_OlympusE3 dng
RCID_OlympusE30 dng
dng.adobe.OlympusE-30
RCID_OlympusE300 dng
RCID_OlympusE330 dng
RCID_OlympusE400 dng
RCID_OlympusE410 dng
RCID_OlympusE420 dng
dng.adobe.OlympusE-420
RCID_OlympusE450 dng
dng.adobe.OlympusE-450
RCID_OlympusE5 dng
dng.adobe.OlympusE-5
RCID_OlympusE500 dng
RCID_OlympusE510 dng
RCID_OlympusE520 dng
dng.adobe.OlympusE-520
RCID_OlympusE600 dng
dng.adobe.OlympusE-620
RCID_OlympusE620 dng
RCID_OlympusSP570UZ dng
dng.adobe.OlympusSP-570UZ
RCID_PanasonicDMCFZ50 dng
RCID_PanasonicDMCL1 dng
RCID_PanasonicDMCLC1 dng
RCID_PanasonicDMCLX1 dng
RCID_PanasonicDMCLX2 dng
RCID_Pentax*istD dng
RCID_Pentax*istDL dng
RCID_Pentax*istDL2 dng
dng.adobe.Pentax*istDL2
RCID_Pentax*istDS dng
RCID_Pentax*istDS2 dng
dng.adobe.Pentax*istDS2
RCID_PentaxK100D dng
RCID_PentaxK100DSuper dng
dng.adobe.PentaxK100DSuper
RCID_PentaxK10D dng
RCID_PentaxK110D dng
RCID_PentaxK2000 dng
dng.adobe.PENTAXK2000
RCID_PentaxK200D dng
dng.adobe.PENTAXK200D
RCID_PentaxK20D dng
dng.adobe.PENTAXK20D
RCID_PentaxK5 dng
dng.adobe.PENTAXK-5
RCID_PentaxK7 dng
dng.adobe.PENTAXK-7
RCID_PentaxKr dng
dng.adobe.PENTAXK-r
RCID_PentaxKx dng
dng.adobe.PENTAXK-x
RCID_SamsungGX1L dng
RCID_SamsungGX1S dng
dng.adobe.SamsungGX-1S
RCID_SamsungNX10 dng
dng.adobe.SamsungNX10
RCID_SamsungNX100 dng
dng.adobe.SamsungNX100
RCID_SamsungNX11 dng
dng.adobe.SamsungNX11
RCID_SamsungNX200 dng
dng.adobe.SamsungNX200
RCID_SamsungGX10 dng
dng.adobe.SAMSUNGGX10
RCID_SamsungGX20 dng
dng.adobe.SAMSUNGGX20
RCID_SonyDSLRA100 dng
RCID_SonyDSLRA200 dng
dng.adobe.SonyDSLR-A200
RCID_SonyDSLRA230 dng
dng.adobe.SonyDSLR-A230
RCID_SonyDSLRA290 dng
dng.adobe.SonyDSLR-A290
RCID_SonyDSLRA300 dng
dng.adobe.SonyDSLR-A300
RCID_SonyDSLRA330 dng
dng.adobe.SonyDSLR-A330
RCID_SonyDSLRA350 dng
dng.adobe.SonyDSLR-A350
RCID_SonyDSLRA380 dng
dng.adobe.SonyDSLR-A380
RCID_SonyDSLRA390 dng
dng.adobe.SonyDSLR-A390
RCID_SonyDSLRA450 dng
dng.adobe.SonyDSLR-A450
RCID_SonyDSLRA500 dng
dng.adobe.SonyDSLR-A500
RCID_SonyDSLRA550 dng
dng.adobe.SonyDSLR-A550
RCID_SonyDSLRA560 dng
dng.adobe.SonyDSLR-A560
RCID_SonyDSLRA580 dng
dng.adobe.SonyDSLR-A580
RCID_SonyDSLRA700 dng
RCID_SonyDSLRA850 dng
dng.adobe.SonyDSLR-A850
RCID_SonyDSLRA900 dng
dng.adobe.SonyDSLR-A900
RCID_SonyDSCF828 dng
RCID_SonyDSLRNEX3 dng
dng.adobe.SonyNEX-3
RCID_SonyDSLRNEX5 dng
dng.adobe.SonyNEX-5
RCID_SonyNEX5N dng
dng.adobe.SonyNEX-5N
RCID_SonyNEX7 dng
dng.adobe.SonyNEX-7
RCID_SonyDSLRNEXC3 dng
dng.adobe.SonyNEX-C3
RCID_SonyNEXVG20 dng
dng.adobe.SonyNEX-VG20
RCID_SonyDSCR1 dng
dng.adobe.SonyDSC-R1
RCID_SonyDSLRSLTA33 dng
dng.adobe.SonySLT-A33
RCID_SonyDSLRSLTA35 dng
dng.adobe.SonySLT-A35
RCID_SonyDSLRSLTA55 dng
dng.adobe.SonySLT-A55V
RCID_SonySLTA57 dng
dng.adobe.SonySLT-A57
RCID_SonySLTA65 dng
dng.adobe.SonySLT-A65
RCID_SonySLTA77 dng
dng.adobe.SonySLT-A77
RCID_SonyDSCV3 dng
Leica S2
kCGImageSourceNoiseReductionAmount
kCGImageSourceNeutral
kCGImageSourceChromaBlurEnabled
kCGImageSourceChromaBlurMoireAmount
kCGImageSourceChromaBlurMoireSize
kCGImageSourceLuminanceNoiseReductionAmount
kCGImageSourceColorNoiseReductionAmount
kCGImageSourceFullSizeColorNoiseReductionEnabled
kCGImageSourceNoiseReductionSharpnessAmount
kCGImageSourceNoiseReductionSharpnessThreshold
kCGImageSourceNoiseReductionContrastAmount
kCGImageSourceNoiseReductionDetailAmount
kCGImageSourceUseGPUEnabled
SEIKO EPSON CORP.
EPSON
epson
bayerReconstructionV2: unknown bit depth %d bits
7055210: i=%d
illegal ISO A/B table: first ISO too large
illegal ISO A/B table: last ISO too small
mFullImageSize.width
mFullImageSize.height
mCroppedImageSize.width
mCroppedImageSize.height
mNumberOfPoints
mDestinationRadiusTable[%zu]
// %g
mCorrectionTable[%zu]
mImageSize.width
mImageSize.height
mRowBytes
mBitsPerSample
Nikon
:ISOInfo
:ISOExpansion
NRW 
:0x14
:DataDump
:ColorBalance
:100
:102
:103
COOLPIX
nikon
Unknown version for Nikon Lens Distortion Correction.  The values are major: %s and minor: %s
Unknown version for Nikon Lens CA Correction.  The values are major: %s and minor: %s
Unknown version for Nikon Lens Vignette Correction.  The values are major: %s and minor: %s
com.apple.rawcamera.images
function
T@?,C,V_function
inverse
T@?,C,V_inverse
domainMin
Td,R,V_domainMin
domainMax
Td,R,V_domainMax
rangeMin
Td,R,V_rangeMin
rangeMax
Td,R,V_rangeMax
.tif.
.dng.
.dxo.
.cr2.
.mos.
.fff.
.3fr.
.nef.
.nrw.
.pef.
.srw.
.srf.
.sr2.
.arw.
.erf.
.dcr.
.crw.
.raf.
.raw.
.rw2.
.rwl.
.mrw.
.orf.
.iiq.
RAWCAMERA_DENOISE_BAYER
bayerReconstructionV3: unknown bit depth %d bits
kCIContextUseMetalRenderer
RAWCAMERA_NO_BLOCKTILES
DISABLE_PRESUSHI_GPU
DISABLE_V6_CIIMAGE_TILE_PROVIDER
TILE_SIZE_V6
RAWCAMERA_TILE_SIZE
Out of bounds
RAWCAMERA_LENSCORRECTION
mWidth
mDCPix
PanasonicChromaticAberration
ChAber_SW
leicaCropRect
cropRectFromTag
mKr0
mKr1
mKr2
mKr3
mKt0
mKt1
mCxhat
mCyhat
:WhitePointDecrypted
:BlackLevel
isSonySRFCompressedRaw
PanasonicChromaticAberrationExtended
ChAber_SW_Extended
CA_blu0
CA_blu1
CA_blu2
CA_blu3
CA_blu4
CA_blu5
CA_blu6
CA_blu7
CA_red0
CA_red1
CA_red2
CA_red3
CA_red4
CA_red5
CA_red6
CA_red7
v8@?0
sourceRowBytes
destRowBytes
depth
passmask
0xffffffff
tileCount
tileInfo[%zu].index
tileInfo[%zu].destRowBytes
tileInfo[%zu].x
tileInfo[%zu].y
tileInfo[%zu].width
tileInfo[%zu].height
sourceSize.width
sourceSize.height
sourceChannelCount
cropOrigin.x
cropOrigin.y
destSize.width
destSize.height
destBitsPerSample
aspectScale.width
aspectScale.height
factors
RVector
GVector
BVector
bias
blacks
gamma
clipLevels
sharpenSlope0
sharpenSlope1
hilitefactors
normalizeOffsetFraction
verticalCorrelationEnabled
verticalCorrelationThreshold
horizontalCorrelationThreshold
diagonalCorrelationThreshold
greenDespeckleThreshold
verticalEdgeThreshold
verticalFlatnessThreshold
bitmapType
despeckleBlackNoiseEnabled
blackLevelExtendEnabled
blackDespeckleNoiseFactor
greenSplitEnabled
unknownDNGCamera
extendHighlightsThreshold
HRGreenClip
SPERobust
SPENoiseFactor1
SPENoiseFactor2
NRNoiseFactor
CACorrectionEnabled
CACorrectionRedPower
CACorrectionBluePower
CACorrectionRedScale
CACorrectionBlueScale
fullWidth
fullHeight
vignetteCorrectionEnabled
vignetteCorrectionPower
vignetteCorrectionAmount
chromaBlurHighFrequencyThreshold
highFrequencyNoiseFactor
highFrequencySignalType
gradientSignalType
halfSizeMethod
halfSizeImageGreenFraction
halfSizeHack
fringeProcessingEnabled
fringeProcessingMethod
fringeProcessingThreshold1
fringeProcessingThreshold2
fringeProcessingNoiseFactor
gradientProcessing
gradientThreshold
adaptiveNormalizationMethod
adaptiveNormalizationHard
adaptiveNormalizationNoiseFactor
directionNoiseFactor
directionLowThreshold
horizontalCorrelationEnabled
horizontalEdgeThreshold
diagonalCorrelationEnabled
correlationOldStyle
correlationHack
greenDespeckleEnabled
greenDespeckleDiagonalImprovement
interpolationType
extendedHighlightSmoothingType
redBlueNoiseReductionEnabled
redBlueHack
chromaScaleMethod
chromaScaleHard
chromaScaleDetailFactor
minimumSignalToNoiseRatio
maximumSignalToNoiseRatio
maximumDetailDifference
biasOff
hueMagMR
hueMagRY
hueMagYG
hueMagGC
hueMagCB
hueMagBM
noiseISOPin
cameraV2PlusByTable
isoab[0]
SPEDeadNoiseFactor
SPERobustThreshold
powerBlurEarlyOut
directionEdgeNoiseFactor
largeNoiseFactor
directionCornerNoiseFactor
directionHack
preserveCorners
smoothDirections
directionDespeckleSeparateBuffer
improveContrastAmount
directionDespeckle
smoothingAmount
blackLevels
darkNoise
signalNoiseModels[%d].a
signalNoiseModels[%d].b
signalNoiseModels[%d].c
signalNoiseModels[%d].PRNU
blacksPerScanlineEnabled
SPEDeadNoticeabilityFactor
SPEHotNoiseFactor
DESEnabled
DESNoiseFactor
DESSignalToNoiseThreshold
DESDoEarlyOut
DESEarlyOutFactor
DESDoRed
DESDoGreen
DESDoBlue
DESTaperMethod
DESMethod
CAParameters.ChAber_SW_Extended
CAParameters.CA_blu[%d]
CAParameters.CA_red[%d]
CAParameters.BG[%d]
CAParameters.RG[%d]
fujiCAParameters.FujiCAEnable
fujiCAParameters.numberOfPoints
fujiCAParameters.maxDistance
fujiCAParameters.CA_LR
fujiCAParameters.CA_red
fujiCAParameters.CA_blu
fujiLensParameters.FujiLensCorrectionEnable
fujiLensParameters.maxDistance
fujiLensParameters.numberOfPoints
fujiLensParameters.lengthRatio
fujiLensParameters.factor
cnrNoiseFactor
cnrRadius
cnrAmount
adaptiveNormalizationDirectionFindingMethod
fujiGreenReconstructionCopyRaw
fujiGreenReconstructionHighFrequency
fujiDirectionsNoiseFactor
fujiGreenSmoothingEnabled
fujiGreenSmoothingThreshold
fujiGreenSmoothingSharpeningAmount
fujiGreenSmoothingCornerThreshold
fujiGreenSmoothingAdjuster
fujiRedBluePlanarValidity
redBlueDefringe
redBlueRangeLimit
redBlueGradientThreshold
redBlueDumbOnly
redBlueGreenOnly
colorSmoothingEnabled
colorSmoothingSharpnessAmount
resampleHorizScale
resampleVertScale
resampleVSharpness
moireSuppressionEnabled
useGPUEnabled
luminanceNoiseReductionEnabled
chromaNoiseReductionEnabled
luminanceNoiseReductionAmount
vectorFieldProcessingEnabled
vectorFieldCorners
vectorFieldSmoothingCoefficient
vectorFieldCornerThreshold
fullSizeSmoothingAmount
halfSizeSmoothingAmount
quarterSizeSmoothingAmount
fullSizeThreshold
fullSizeThresholdSoftness
halfSizeThreshold
halfSizeThresholdSoftness
quarterSizeThreshold
quarterSizeThresholdSoftness
fullSizeGradientMaskAmount
halfSizeGradientMaskAmount
quarterSizeGradientMaskAmount
contrastOverdrive
addNoiseAmount
representativeNoiseAmount
CNR_value
CNR_radius
CNR_bias
CNR_noiseFactor
powerBlurPass1Enabled
powerBlurPass2Enabled
powerBlurPass3Enabled
powerBlurPass4Enabled
powerBlurPass1Threshold
powerBlurPass2Threshold
powerBlurPass3Threshold
powerBlurPass4Threshold
powerBlurPass2Despeckle
powerBlurPass2DespeckleCountThreshold
powerBlurPass2DespeckleLuminanceThreshold
powerBlurPass2DespeckleDifferenceAmount
powerBlurPass2DespeckleAverageCloseIn
blacks[%d]
maxs[%d]
matrix[0]
matrix[1]
matrix[2]
hrkind
gmkind
hueMagMR_halfSize_enabled
hueMagMR_halfSize
hueMagRY_halfSize
hueMagYG_halfSize
%@[%d]
// %lg
otrc.s0
otrc.y1
otrc.s1
otrc.y2
otrc.s2
otrc.y3
otrc.s3
otrc.s4
otrc.disabled
DebayerParameters
ReconstructionData
SushiImageFilterParameters
CoreImageInitialTreePre
CoreImageInitialTreePost
BayerImageHash
kCGImageSourceRawReconstructionOptions.kCGImageSourceSupportedSushiLevels
kCGImageSourceRawReconstructionOptions.kCGImageSourceRawReconstructionMethodVersions
{Raw}
path
v0 sushi
v1 sushi
v2 halfsize
v2 sushi
v3 halfsize
v3 sushi
v4 halfsize
v4 sushi
v5 halfsize
v5 sushi
v6 halfsize
v6 sushi
v6 sushi 1.5
v6 sushi 2
v6 sushi 3
v2.dng
v2.dng sushi
v6.dng
v6.dng sushi
v6.dng sushi 1.5
v6.dng sushi 2
v6.dng sushi 3
reconstruction
metadata
rawdata_checksum
automaticDynamicRange
hasExtendedRawData
rawImageClass
className
minRawCameraVersion
rawProperties
rawPlugin
isSupportedAsLinearizedDNG
supportedMethods
patternSize
premulIsAnalogBalance
dngBaselineExposureAdjustment
cameraMultipliersOverride
channelCount
hasThumbnailCropRect
applyLensCorrection
lensCorrectionFilter
lensVignetteCorrectionFilter
lensCorrectionParameters
applyGainMap
gainMapFilter
chromaticAberrationParameters
imageDataByteOrder
aspectScale
targetSize
pixelPitchInMicrons
dngSensorSize
dngActiveRect
dngCropRect
unpackerSetup
whiteBalanceIndexMap
whiteBalanceOrder
sensorPattern
dngSensorPattern
sensorMaximum
blackLevelAdjustMethod
dngBlackLevelSource
whiteLevelSource
whiteLevel
whiteLevelThreshold
whiteLevelForRN
dngBaselineExposure
whiteBalancePath
alternateWhiteBalancePath
v3BlackLevelSource
v2BlackSampleArea
adjustForExpandedDynamicRange
useNativeDngCameraProfileForDngFile
overrideDngWhiteLevelSource
useDngBaseLineExposureTag
applyLensCorrectionFilterFix
usePowerBlurThreePass
antiAliasingFilterEnabled
noiseEstimateScaleFactor
extremeMeasuresExposureTimeThreshold
blackLevelOffset
blackLevelOffsetAdjustment
blackLevelFactor
olympusBlackLevelSource
olympusFallbackBlackLevel
requireStiching
cnrModelRadius
cnrModelNoiseFactor
cnrModelBias
blackNoiseModel
blackLevelModel
signalNoiseModel
daylightMultipliersOffset
srawMultipliersOffset
add2WhenLessThan512
cameraMultipliersOffset
cameraMultipliersChannelCount
hren
aaen
nren
seen
cben
huemagmr
huemagry
huemagyg
huemaggc
huemagcb
huemagbm
bden
vknd
aafs
esnf
cbnf
nek1
nek2
nek3
nek4
nek5
nek6
spt1
spt2
spt3
bexp
plnr
otrc
shdb
pbnf
msen
msam
cnat
cnbt
hnat
hnbt
inherited
Inherited::%@
%-48s %.6f
initialize (RAW) context
compile (RAW) programs
create (RAW) compute kernels
allocate memory buffers
FujiXTransGeneral
FujiXTransReconstruction
gpu_32
x86_64
FujiEXRCMOSGeneral
FujiEXRCMOSReconstruction
FujiEXRResample
black_despeckle
green_split
black_subtract_and_premul
stuck_pixel_elimination
GeneralDespeckle
highlight_recovery
panasonic_chromatic_aberration
half_size_image
high_frequency
half_size_perceptual
power_blur
AdaptiveNormalization2_GPU
adaptive_normalizationGPU
RedBlueReconstruction2_GPU
Fuji X-Trans black subtract and premul
fujiXTransBlackSubtractAndPremultiply
Fuji stuck pixel elimination
fujiStuckPixelElimination
fuji X-Trans green despeckle
fujiXTransGreenDespeckle
Fuji X-Trans highlight recovery
highlightRecovery_FujiXTrans
Fuji X-Trans chromatic aberration
fujiXTransCACorrection
Fuji X-Trans red blue reconstruction
fujiXTransRedBlueReconstruction
Fuji defringe X-Trans
defringeXTrans
Fuji X-Trans green minmax range
minmaxGXTrans
Fuji X-Trans directions
fujiXTransDirections
Fuji mini green reconstruction
fujiMiniGreenReconstruction
Fuji X-Trans gradient
fujiXTransGradient
Fuji X-Trans directions post green reconstruction
fujiXTransDirectionsPostGreenReconstruction
Fuji X-Trans direction processing
fujiXTransDirectionProcessing
Fuji X-Trans green reconstruction
fujiXTransGreenReconstruction
Fuji X-Trans green smoothing
fujiXTransGreenSmoothing
Fuji X-Trans red blue planar 2
fujiXTransMakeRedBluePlanar2
Fuji EXR CMOS black subtract and premul
fujiEXRCMOSBlackSubtractAndPremultiply
fuji EXR CMOS green despeckle
fujiEXRCMOSGreenDespeckle2
Fuji EXR CMOS highlight recovery
highlightRecovery_FujiEXRCMOS
Fuji EXR CMOS chromatic aberration
fujiEXRCMOSCACorrection
Fuji EXR CMOS red blue reconstruction
fujiEXRCMOSRedBlueReconstruction
Fuji defringe EXR CMOS
defringeEXRCMOS
Fuji smooth EXR CMOS
smoothEXRCMOS
Fuji EXR CMOS green minmax range
minmaxGEXRCMOS
Fuji EXR CMOS green minmax range 2
minmaxGEXRCMOS2
Fuji EXR CMOS directions 2
fujiEXRCMOSDirections2
Fuji EXR CMOS gradient
fujiEXRCMOSGradient
Fuji EXR CMOS directions post green reconstruction
fujiEXRCMOSDirectionsPostGreenReconstruction
Fuji EXR CMOS direction processing
fujiEXRCMOSDirectionProcessing
Fuji EXR CMOS green reconstruction
fujiEXRCMOSGreenReconstruction
Fuji EXR CMOS green smoothing
fujiEXRCMOSGreenSmoothing
Fuji EXR CMOS red blue planar 2
fujiEXRCMOSMakeRedBluePlanar2
Fuji EXR CMOS resample
FujiEXRCMOSResample
Fuji EXR CMOS resample 2
FujiEXRCMOSResample2
black despeckle
blackDespeckle
black despeckleCI
blackDespeckleCI
black despeckle 8
blackDespeckleQ8
black despeckle subtract premul 1
blackDespeckleSubtractPremul_1
black despeckle subtract premul 1CI
blackDespeckleSubtractPremul_1CI
black despeckle subtract premul 8
blackDespeckleSubtractPremulQ8
green Bayer split
greenSplitCorrection
black subtract and premul
blackSubtractAndPremultiply
black subtract and premul 8
blackSubtractAndPremultiplyQ8
stuck pixel elimination
stuckPixelElimination
stuck pixel GPU
stuckPixelGPU
despeckle
despeckle2
highlight recovery
highlightRecovery
highlight recovery 1
highlightRecovery_1
Panasonic chromatic aberration
panasonicChromaticAberration
half-size image
halfSizeImage
half-size image 1
halfSizeImage_1
high frequency
highFrequency
high frequency 4
highFrequencyQ4
half-size perceptual
halfSizePerceptual
half-size perceptual 4
halfSizePerceptualQ4
power blur horizontal
PowerBlurHorizontal
power blur horizontal 4
PowerBlurHorizontalQ4
power blur vertical
PowerBlurVertical
power blur vertical 4
PowerBlurVerticalQ4
power blur 3X3
PowerBlur3X3
power blur 3X3 4
PowerBlur3X3Q4
adaptive normalization
adaptiveNormalization_GPU
adaptive normalization 1
adaptiveNormalization_GPU_1
adaptive normalization moire
adaptiveNormalization
adaptive normalization simple
adaptiveNormalizationSimple
red blue reconstruction RGB
redBlueReconstruction_RGB
red blue reconstruction RGB Moire
redBlueReconstruction_RGB_moire
red blue reconstruction RGB CI
redBlueReconstruction_RGB_CI
demosaic
monochrome noise
monochromeNoise
setRandomTile1
Set Random Tile 2
setRandomTile2
Set Random Tile 3
setRandomTile3
Set Random Tile 4
setRandomTile4
fujiXTransExtractAndPad:padBitmap
fujiEXRCMOSExtractAndPad:padBitmap
extractAndPad:padBitmap
Fuji input buffer
Fuji directions
temp red for CA
temp blue for CA
chromatic aberration
despeckled green
Fuji format result
Fuji green reconstruction
Fuji green reconstruction smoothed
Fuji green range
Fuji post green reconstruction directions
Fuji post green reconstruction directions - processed
Fuji early gradient
RGB16 red-blue reconstruction result
RGB16 color defringed result
Fuji directions unprocessed
Fuji despeckled green
RGB16 color smoothed result
RGB16 resampled result
input buffer
general despeckle
Bayer format result
high-frequency
power blur three-pass horizontal
power blur three-pass vertical
half-size power blurred
reconstructed green
RGB16 red blue reconstruction
RGB16 color result
unable to run fujiDirections
unable to run fujiBlackSubtractPremul
unable to run stuckPixelElimination
unable to run highlightRecovery
unable to run fujiRedBluePlanar
unable to run fujiCACorrection
unable to run fujiGreenDespeckle
unable to run fujiMiniGreenReconstruction
unable to run fujiGradient
unable to run fujiGreenReconstruction
unable to run fujiGreenRange
unable to run fujiDirectionsPostGreenReconstruction
unable to run fujiDirectionProcessing
unable to run fujiGreenSmoothing
unable to run fujiRedBlueReconstructionRGB
unable to run fujiDefringe
finish up and clFinish
unused
unknown
buffer %d ("%s" width %d height %d spp %d bps %d) is still in use at end of tile proc
openCLDemosaicTileProc: %s
unable to run fujiSmooth
unable to run fujiResample
unable to run blackDespeckleSubtractPremul
unable to run blackDespeckle
unable to run greenBayerSplit
unable to run blackSubtractAndPremul
unable to run generalDespeckle
unable to run chromaticAberration
unable to run halfSizeImage
unable to run highFrequency
unable to run halfSizePerceptual
unable to run powerBlur3X3
unable to run powerBlurHorizontal
unable to run powerBlurVertical
unable to run adaptiveNormalizationOld
unable to run redBlueReconstructionRGBMoire
unable to run monochromeNoise
unable to run demosaic
unable to run adaptiveNormalization
unable to run redBlueReconstructionRGB
power blur 3X3 temp result
power blur horizontal temp result
setUpOpenCLEnvironment: initializeContext failed
setUpOpenCLEnvironment: compileOpenCLBayerPrograms failed
setUpOpenCLEnvironment: createOpenCLBayerKernels failed
setUpOpenCLEnvironment: createOpenCLFujiEXRCMOSKernels failed
setUpOpenCLEnvironment: createOpenCLFujiXTransKernels failed
setUpOpenCLEnvironment: compileOpenCLFujiEXRCMOSPrograms failed
setUpOpenCLEnvironment: compileOpenCLFujiXTransPrograms failed
processRAWSubTile: cannot extract and pad buffer
processRAWSubTile: allocateBuffers failed
processRAWSubTile: processRAWTile failed
processRAWSubTile: cannot extract and pad buffer (Fuji EXR CMOS case)
processRAWSubTile: cannot extract and pad buffer (Fuji XTrans case)
fujiXTransExtractAndPad: raw bitmap is off screen
fujiXTransExtractAndPad: unable to allocate local bitmap
fujiEXRCMOSExtractAndPad: raw bitmap is off screen
fujiEXRCMOSExtractAndPad: unable to allocate local bitmap
extractAndPad: raw bitmap is off screen
extractAndPad: unable to allocate local bitmap
allocateBuffers: failure to allocate image buffers
processRAWTile: uploadNoiseTables failed
processRAWTile: allocateOpenCLBuffers failed
IRect is uninitialized
IRect 2 is uninitialized
IRect 1 is uninitialized
initBitmap: %s
v16@?0Q8
initialize (NR) context
compile (NR) programs
create (NR) compute kernels
pad buffer
ScatterGather
Laplacian
power_blur_NR_V2
Gabor
GaborAV
Gabor-5X5-8-W4
Detail
RandomTile
i386
%s/OpenCL/%s.cl.%s.bc
Scatter RGB -> Y+HRGB
RGB16ScatterToYAndHalfSizeRGB
Scatter RGB -> Y+HRGB 1
RGB16ScatterToYAndHalfSizeRGB_1
PB Diamond 1 Q4
PowerBlur_Diamond_1_Q4
PB Diamond 1 Q1
PowerBlur_Diamond_1_Q1
PB Diamond 3 Q16
PowerBlur_Diamond_3_Q16
PB Diamond 3 Q1
PowerBlur_Diamond_3_Q1
PB Diamond 7 Q4
PowerBlur_Diamond_7_Q4
PB Diamond 7 Q1
PowerBlur_Diamond_7_Q1
PB Diamond 14 Q4
PowerBlur_Diamond_14_Q4
PB Diamond 14 Q1
PowerBlur_Diamond_14_Q1
Smooth VF along VF 2
SmoothVectorFieldAlongVectors2
Gather Y+HRGB -> RGB
YAndHalfSizeRGBGatherToRGB16
Gather Y+HRGB -> RGB 1
YAndHalfSizeRGBGatherToRGB_1
Gabor F -> VF 4D
GaborFiltersToVectorField_4D
Gabor F -> VF 1 4D
GaborFiltersToVectorField_1_4D
Gabor F -> SmoothedLum 4D
GaborFiltersToSmoothedLuminance_4D
Gabor F -> SmoothedLum 1 4D
GaborFiltersToSmoothedLuminance_1_4D
Gabor F -> SmoothedLum+Grad 4D
GaborFiltersToSmoothedLuminanceAndGradient_4D
Gabor F -> SmoothedLum+Grad 1 4D
GaborFiltersToSmoothedLuminanceAndGradient_1_4D
Gabor F -> SmoothedLum+VF 4D
GaborFiltersToSmoothedLuminanceAndVectorField_4D
Gabor F -> SmoothedLum+VF 1 4D
GaborFiltersToSmoothedLuminanceAndVectorField_1_4D
Blur Grad 1
BlurGradient_1
Blur Grad 16
BlurGradient_Q16
Fine Grain Noise
FineGrainNoise
VF -> Dir+Grad 4D
VectorFieldToDirectionsAndGradients_4D
VF -> Dir+Grad 1 4D
VectorFieldToDirectionsAndGradients_1_4D
Smooth Details Along Dir 4D
SmoothDetailsAlongDirections_4D
Smooth Details Along Dir 1 4D
SmoothDetailsAlongDirections_1_4D
Reduce
reduce
Reduce 1
reduce_1
Expand+Make Details
expandAndMakeDetails
Expand+Make Details 4
expandAndMakeDetails_4
Expand+Add Details (Grad Mask)
expandAndAddDetailsThroughGradientMask
Expand+Add Details (Grad Mask)2
expandAndAddDetailsThroughGradientMask2
Expand+Add Details (Grad Mask)2 4
expandAndAddDetailsThroughGradientMask2_4
Expand+Sharpen Details (Grad Mask)
expandAndSharpenDetailsThroughGradientMask
Expand+Sharpen Details (Grad Mask) 4
expandAndSharpenDetailsThroughGradientMask_4
Expand+Add Details (Grad Mask)3
expandAndAddDetailsThroughGradientMask3
Expand+Add Details w/Overdrive
expandAndAddDetailsWithOverdrive
Expand+Add Details w/Overdrive 4
expandAndAddDetailsWithOverdrive_4
Expand+Sharpen (Grad Mask) 4
expandAndSharpenThroughGradientMask_4
Expand+Sharpen (Grad Mask) 1
expandAndSharpenThroughGradientMask_1
Expand+Sharpen Details(Grad Mask)+Gather 4
expandAndSharpenDetailsThroughGradientMaskGather_4
Expand+Sharpen Details(Grad Mask)+Gather 1
expandAndSharpenDetailsThroughGradientMaskGather
Expand+Sharpen (Grad Mask)+Gather 4
expandAndSharpenThroughGradientMaskGather_4
Expand+Sharpen (Grad Mask)+Gather 1
expandAndSharpenThroughGradientMaskGather_1
Add Noise
addNoiseStep
Set Random Tile 1
extractAndPadNR:padBitmap
%s buffer
full-size color NR
full-size Original Y
full-size Y
full-size detail
full-size fine grain noise
full-size smoothed detail
half-size Y
half-size RGB
half-size smoothed Y
half-size detail
half-size smoothed detail
half-size RGB NR
quarter-size Y
quarter-size smoothed Y
quarter-size detail
quarter-size smoothed detail
eighth-size Y
full-size vector field
full-size smoothed vector field
full-size directions
full-size gradients
full-size smoothed gradients
half-size vector field
half-size smoothed vector field
half-size directions
half-size gradients
half-size smoothed gradients
quarter-size vector field
quarter-size smoothed vector field
quarter-size directions
quarter-size gradients
quarter-size smoothed gradients
full-size NR Y
full-size edge-sharpened Y
full-size added-noise Y
half-size RGB PB 1-pass result
half-size RGB PB 3-pass result
half-size RGB PB 7-pass result
half-size RGB PB 14-pass result
red noise perceptual table
red noise table
green noise perceptual table
green noise table
blue noise perceptual table
blue noise table
perceptual table
green noise variance table
reciprocal table
boost table
reciprocal 2 table
high frequency table
create buffers
unable to run RGBToHSYRGB
unable to run GaborFiltersToSmoothedLuminanceAndGradient
unable to run reduce
unable to run BlurGradient
unable to run powerBlurRGB
unable to run expandAndSharpenThroughGradientMaskGather
unable to run GaborFiltersToSmoothedLuminance
unable to run HSYRGBToRGB
unable to run GaborFiltersToSmoothedLuminanceAndVectorField
unable to run expandAndSharpenDetailsThroughGradientMaskGather
unable to run expandAndMakeDetails
unable to run fineGrainNoise
unable to run expandAndAddDetailsThroughGradientMask2
unable to run addNoise
unable to run expandAndAddDetailsWithOverdrive
unable to run GaborFiltersToVectorField
unable to run smoothVectorFieldAlongVectors
unable to run vectorFieldToDirectionsAndGradients
unable to run smoothDetailsAlongDirections
unable to run expandAndAddDetailsThroughGradientMask
unable to run expandAndAddDetailsThroughGradientMask3
unable to run expandAndSharpenThroughGradientMask
persistent buffer %d (width %d height %d spp %d bps %d) was returned in tile proc
openCLNoiseReductionTileProc: %s
setUpNROpenCLEnvironment: initializeContext failed
setUpNROpenCLEnvironment: compileNROpenCLPrograms failed
setUpNROpenCLEnvironment: createNROpenCLKernels failed
processSubTile: allocateNRBuffers failed
processSubTile: processNRTile failed
processSubTile: cannot extract and pad buffer
extractAndPadNR: raw bitmap is off screen
extractAndPadNR: unable to allocate local bitmap
allocateNRBuffers: failure to allocate image buffers
processNRTile: allocateNROpenCLBuffers failed
RAWCAMERA_SHOW_OPENCL_TIMING
RAWCAMERA_USE_AUTO_VECTORIZER
V4 OpenCL tiled [%d x %d] demosaic and noise reduction %.6f s
V4 OpenCL [%d x %d] demosaic and noise reduction %.6f s
Error: missing open parentheses after function '%s'.
Error: close parentheses without matching open.
Error: open parentheses without matching close.
Error: expression could not be fully evaluated.
Error: Expression has invalid number.
Error: Expression has unterminated quote.
Error: Expression has unexpected character #%d
Error: Expression too long.
true
false
null
dictval
arrayval
dict
array
count
switchle
switch
round
floor
sqrt
log2
com.apple.RawExpression
Error: function '%s' requires 2 or more parameters.
Error: function '%s' requires 2 parameters.
Error: function '%s' requires 1 or more parameters.
Error: function '%s' requires 1 parameter.
Error: operator '%s' requires %d operands.
Error: unexpected operator '%s'.
CFByteOrderUnknown
CFByteOrderLittleEndian
CFByteOrderBigEndian
eUnknownLensCorrection
ePanasonicLensCorrection
eCanonPowerShotLensCorrection
eAdobeLensCorrection
eSonyLensCorrection
eGenericLensCorrection
eOlympusLensCorrection
eAdobeOpcodeLensCorrection
eFujiLensCorrection
eFujiLensCorrectionV2
eUnknownGainMap
eAdobeOpcodeGainMap
eUnknownLensVignetteCorrection
eFujiRAFVignetteCorrection
eNikonVignetteCorrection
MethodV0
MethodV1
MethodV2
MethodV2_1
MethodV3
MethodV4
MethodV5
MethodV6
MethodV7
MethodV8
sushiModeOff
sushiModeOn
sushiMode1_5
sushiMode2
sushiMode3
whiteLevelFromProperties
whiteLevelFromUnpacker
whiteLevelFromActiveSensorArea
whiteLevelFromCroppedSensorArea
whiteLevelFromDNG
whiteLevelCustom
blackLevelFromProperties
blackLevelV1FromTopMargin
blackLevelV1FromBottomMargin
blackLevelV1FromLeftMargin
blackLevelV1FromLeftMarginIgnoreFirst
blackLevelV1FromRightMargin
blackLevelV1FromTopAndBottomMargin
blackLevelV1FromLeftAndRightMargin
blackLevelV1FromAllMargins
blackLevelV2FromMargins
blackLevelFromTag
blackLevelFixedOffset
blackLevelFromDNG
blackLevelCustom
blackLevelFromModel
blackLevelFromModelOrTag
rsp_Unknown
rsp_FromTagData
rsp_BG_GR
rsp_GR_BG
rsp_GB_RG
rsp_RG_GB
rsp_BR_GG_RB_GG
rsp_RB_GG_BR_GG
rsp_RHBH_HGHG_BHRH_HGHG
rsp_HBHR_GHGH_HRHB_GHGH
rsp_GM_CY_MG_CY
rsp_CY_GM_CY_MG
rsp_CY_MG_YC_GM_CY_GM_YC_MG
rsp_YC_MG_CY_GM_YC_GM_CY_MG
rsp_GM_YC
rsp_MY_GC
rsp_YC_GM
rsp_MG_CY
rsp_GY_MC
rsp_CY_MG
rsp_YM_CY
rsp_GBG_GRG_RGR_BGB_GBG_GRG_GRG_GBG_BGB_RGR_GRG_GBG
rsp_BGG_RGG_GRB_GBR_BGG_RGG_RGG_BGG_GBR_GRB_RGG_BGG
rsp_GGR_GGB_RBG_BRG_GGR_GGB_GGB_GGR_BRG_RBG_GGB_GGR
rsp_GRG_GBG_BGB_RGR_GRG_GBG_GBG_GRG_RGR_BGB_GBG_GRG
rsp_RGG_BGG_GBR_GRB_RGG_BGG_BGG_RGG_GRB_GBR_BGG_RGG
rsp_GGB_GGR_BRG_RBG_GGB_GGR_GGR_GGB_RBG_BRG_GGR_GGB
rsp_RGR_BGB_GBG_GRG_GRG_GBG_BGB_RGR_GRG_GBG_GBG_GRG
rsp_GRB_GBR_BGG_RGG_RGG_BGG_GBR_GRB_RGG_BGG_BGG_RGG
rsp_RBG_BRG_GGR_GGB_GGB_GGR_BRG_RBG_GGB_GGR_GGR_GGB
rsp_BGB_RGR_GRG_GBG_GBG_GRG_RGR_BGB_GBG_GRG_GRG_GBG
rsp_GBR_GRB_RGG_BGG_BGG_RGG_GRB_GBR_BGG_RGG_RGG_BGG
rsp_BRG_RBG_GGB_GGR_GGR_GGB_RBG_BRG_GGR_GGB_GGB_GGR
rsp_GBG_GRG_GRG_GBG_BGB_RGR_GRG_GBG_GBG_GRG_RGR_BGB
rsp_BGG_RGG_RGG_BGG_GBR_GRB_RGG_BGG_BGG_RGG_GRB_GBR
rsp_GGR_GGB_GGB_GGR_BRG_RBG_GGB_GGR_GGR_GGB_RBG_BRG
rsp_GRG_GBG_GBG_GRG_RGR_BGB_GBG_GRG_GRG_GBG_BGB_RGR
rsp_RGG_BGG_BGG_RGG_GRB_GBR_BGG_RGG_RGG_BGG_GBR_GRB
rsp_GGB_GGR_GGR_GGB_RBG_BRG_GGR_GGB_GGB_GGR_BRG_RBG
WhiteBalanceOrder_RG1G2B
WhiteBalanceOrder_G2BRG1
WhiteBalanceOrder_RG1BG2
WhiteBalanceOrder_G1RG2B
eUnknownUnpacker
ePanasonicUnpacker
ePanasonic14BitUnpacker
eUnpackedLE16Shift4Unpacker
eUnpackedLE16Shift4Remove0Unpacker
eUnpackedUnpacker
ePacked12SwappedUnpacker
ePacked14Unpacker
eOlympus2FieldPacked12Unpacker
eFujiS2Unpacker
eFujiS3Unpacker
eSonyUnpacker
eLosslessJpegSRawUnpacker
ePacked12Unpacker
NikonHighSpeedCropFX
NikonHighSpeedCrop
NikonHighSpeedCropDX
NikonHighSpeedCrop5_4
NikonHighSpeedCrop1p2x
NikonHighSpeedCropSquare
NikonHighSpeedCropFXMovie
NikonHighSpeedCropDXMovie
NikonHighSpeedCropMovie9
NikonHighSpeedCropMovie10
NikonHighSpeedCropFX11
NikonHighSpeedCropDX12
eNikonCompressionLossyType1
eNikonCompressionUncompressed
eNikonCompressionLossless
eNikonCompressionLossyType2
eNikonCompressionOriginalNRW
eNikonCompressionUncompressed12Bit
eNikonCompressionUncompressedNRW
eNikonCompressionSmall
eNikonCompressionNewNRW
eOlympusUnknowPackingMethod
eOlympusUnpackedData
eOlympusPackedData
eOlympusCompressedData
inputGainMapRowPitch
inputGainMapColPitch
inputWhitePoint
RAWLinearSpacePlaceholder
RAW_FORCE_VERSION
unexpected xtrans pattern %d 0x%x
unsupported bayer pattern %d 0x%x
deXtrans
deXtransSharpHF
deXtrans8
deXtransDraft
deBayerRN
deBayerRN8
deBayerDraft
despeckleV8
deBayerV8
deBayerV9
inputImage
CIRequiresKeyedArchiver
CoreImage doesn't support old-style archiving
CI_%@
Kernel %@ should be of class CIColorKernel
Vectors of R/G/B/Bias matrix must not have 4 components.
CIColorMatrix
inputRVector
inputGVector
inputBVector
inputAVector
inputBiasVector
FIXME: outputImage of filter class %@ is unimplemented.
outputInputImageWithFixmeWarning
T@"CIImage",R,C,N
Adobe RGB Linear
kCIRAWFilterDoesClip
boost_v0
boost_v1
inputBoostPreserveRYHueAmount
inputBoostPreserveYGHueAmount
inputBoostPreserveGCHueAmount
inputBoostPreserveCBHueAmount
inputBoostPreserveBMHueAmount
inputBoostPreserveMRHueAmount
boost_v7
boost_v5
boost_v3
boost_v2_dng
boost_v2
raw_srgb_to_linear
raw_linear_to_srgb
RAWHueMagnetMR
RAWHueMagnetRY
RAWHueMagnetYG
RAWHueMagnetGC
RAWHueMagnetCB
RAWHueMagnetBM
inputShowHF
autoValue
sharpening
contrast
detail
extractY
extractYOpponentColor
extractHalfSizeRGB
extractHalfSizeRGBHF
highFrequencyIntoAlpha
multiplyByNeutralFactors
powerBlur
powerBlurDespeckle
powerBlurEarlyOut2
powerBlurFS
powerBlurHF
powerBlurDespeckleHF
powerBlurEarlyOutHF
powerBlurEarlyOut2HF
powerBlurFSHF
perceptualToLinear
expandHalfSizeRGB
powerBlurY
gaborFiltersToSmoothedLuminanceAndGradient
gaborFiltersToLuminanceAndVectorField
gaborFiltersToVectorField
smoothDetailsAlongDirections
smoothDetailsAlongDirectionsAtScale
smoothDetailsAlongDirectionsAtScaleAntiBloom
smoothDetailsAlongDirectionsAtScaleWithSharpen
smoothDetailsAlongDirectionsAtScaleWithSharpenAntiBloom
blurGradient
blurGradientPlusCurvature
expandAndSharpenDetailsThroughGradientMaskGatherOpponentColor
expandAndSharpenThroughGradientMaskGather
expandAndSharpenThroughGradientMaskGatherOpponentColor
expandAndSharpenThroughGradientMask
YAndRGBGather
YAndRGBGatherOpponentColor
FineGrainNoise2
compositeThroughGradientMask
AddNoise
vectorFieldToDirectionsAndGradients
smoothVectorFieldAlongVectors
directionsToCurvature
mergeHalfSizeCurvature
viewY
viewBlend
viewD
viewTG
viewVF
viewG
viewDIR360
viewDIR180
viewC
viewGDIR360
viewGDIR180
viewTGDIR360
viewTGDIR180
viewRGB
viewHue
inverseBoost
boost
V8 Noise Reduction requested, but no ISO Dictionary present.
CICrop
inputRectangle
outputImage
ISOList
color
FCNRa
FCNRb
FCNRc
FCNDa
FCNDb
FCNDc
HCNRa
HCNRb
HCNRc
HCNDa
HCNDb
HCNDc
QCNRa
QCNRb
QCNRc
QCNDa
QCNDb
QCNDc
ECNRa
ECNRb
ECNRc
ECNDa
ECNDb
ECNDc
enabled
SCSEnabled
SCSLuminanceThreshold
SCSSparkleThreshold
NCSEnabled
NCSSaturationThreshold
NCSRedBluePop
NCSContrastThreshold
NCSCountThreshold
BCSEnabled
BCSRedPop
BCSBlueness
BCSContrastThreshold
%s%s
powerBlurLFS
extractHRGB
%s%s%s
powerBlurL
powerBlurDespeckleL
powerBlurEarlyOutL
powerBlurEarlyOut2L
expandHRGB
kernel %s not found
cikernel
noise
smoothing
outmaskDetailAmount
outmaskDetailAttenuation
FYMa
FYMb
FYMc
FYSDa
FYSDb
FYSDc
HYMa
HYMb
HYMc
HYSDa
HYSDb
HYSDc
QYMa
QYMb
QYMc
QYSDa
QYSDb
QYSDc
EYMa
EYMb
EYMc
EYSDa
EYSDb
EYSDc
FullCMa
FullCMb
FullCMc
FullCSDa
FullCSDb
FullCSDc
HalfCMa
HalfCMb
HalfCMc
HalfCSDa
HalfCSDb
HalfCSDc
QuarterCMa
QuarterCMb
QuarterCMc
QuarterCSDa
QuarterCSDb
QuarterCSDc
EighthCMa
EighthCMb
EighthCMc
EighthCSDa
EighthCSDb
EighthCSDc
gaborToYAndVF
gaborToSYAndG
expandAndMakeD
gaborToVF
smoothVF
VFToGDIR
DIRToC
annealG
annealGAndC
smoothDSharpenAntiBloom
expandPlusDThruG
expandPlusDWithOverdrive
smoothDSharpen
expandPlusDThruG3
expandPlusDThruG2
addFGN
inputEnabled
huePreserveGamutMapWarning
huePreserveGamutMap
huePreserveGamutMap_v5
inputExposure
RAWVignetteRadial disabled because inputImage is infinite
GainMapParametric
ShouldLinearize
RAWRecoverHighlightsV2
cameraProfile
T{CCameraProfile=^^?ii{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}S{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}},R,N
default
Boost
GainMap
V8LNR
V8CNR
V8VIEW
1.2.11
com.apple.rawcamera.rawkernels.isolation
deFringeKernelSource
T@"NSString",R,C,N
fringeDirectionsKernelSource
fringeEdgesKernelSource
__ExifProperties
fujifilm
leaf
samsung techwin
ricoh
sony
_PlanarConfiguration
_SubfileType
_ImageWidth
_ImageLength
_BitsPerSample
_RowsPerStrip
_StripOffsets
_StripByteCounts
_JPEGInterchangeFormat
_JPEGInterchangeFormatLength
AFInfo
ImageStabilization
{LensInfo}
_MinFocalLength
_MaxFocalLength
_MaxApertureAtMinFocalLength
_MaxApertureAtMaxFocalLength
_AutoFocus
{PictStyleNormalized}
{PictStyleSetting}
{PictureStyle}
PictureStyle
ColorTone
FilterEffect
ToningEffect
PhotoEffect
Monochrome
PictStyleColorSpace
DNGVersion
DNGBackwardVersion
LocalizedCameraModel
CameraOwnerName
BodySerialNumber
LensSpecification
LensMake
LensModel
LensSerialNumber
{Temporary}
%@/%@
%.2d:%.2d:%05.2f
%@/GPS
%@/Makernote
%@/Exif
%@/SubIFD%d
IFD1
IFD2
IFD0/Exif/Makernote
IFD0/%@
IFD0/SubIFD0
IFD0/SubIFD1
IFD0/SubIFD2
sRGB
Adobe RGB
Pro Photo RGB
uncalibrated
%.1f mm f/%.1f
%.1f mm f/%.1f-%.1f
%.1f-%.1f mm f/%.1f
%.1f-%.1f mm f/%.1f-%.1f
%.1f mm
%.1f-%.1f mm
TemporaryIFD0SubIFD
TemporaryIFD1SubIFD
Firmware Version 
%010ld
%.2d:%.2d:%.2d %.2d:%.2d:%.2d
JPEGImage/Offset
JPEGImage/Length
JPEGThumbnail/Offset
JPEGThumbnail/Length
%04lX%05u
_CanonMakerShotInfo
_CanonFileInfo
UniqueModelID
SharpnessFreq
ImageSerialNumber
ContinuousDrive
AspectRatioInfo
MaxAperture
MinAperture
None
Standard
Portrait
High Saturation
Low Saturation
CM Set 1
CM Set 2
User Def. 1
User Def. 2
User Def. 3
External 1
External 2
External 3
Landscape
Neutral
Faithful
Vivid
Smooth
Sepia
B & W
Custom
My Color Data
Yellow
Orange
Green
Blue
Purple
Full auto
Manual
Fast shutter
Slow shutter
Night
Gray Scale
Sports
Macro
Black & White
Pan focus
Flash Off
Long Shutter
Super Macro
Foliage
Indoor
Fireworks
Beach
Underwater
Snow
Kids & Pets
Night Snapshot
Digital Macro
My Colors
Still Image
Color Accent
Color Swap
Aquarium
ISO 3200
Creative Auto
Sunset
POWERSHOT
Off (Manual Focus)
Single-point AF
Multi-point AF
Face Detect AF
UNKNOWN  AF MODE
CameraTemperatur
FocusDistanceUpper
FocusDistanceLower
%c%.2d
 or 
%@ + %.1lfx
%s%@
Canon
Canon 
 %.1lf-%.1lfmm
 %.1lfmm
A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  
{MakerEpson}
IFD0/Exif/Makernote/%@/Offset
Thumbnail
IFD0/Exif/Makernote/%@/Length
%@/%@/%@
Offset
Length
SoftwareRelease
{MakerFuji}
ColorMode
FilmSimulation
Normal
Medium High
High
Medium Low
Black and White
Film Simulation
X100
S9100
S9600
S3Pro
S2Pro
S20Pro
S5Pro
Chrome
F0/Standard
F1/Studio Portrait
F1a/Studio Portrait Enhanced Saturation
F1b/Studio Portrait Smooth Skin Tone
F1c/Studio Portrait Increased Sharpness
F2/Fujichrome
F3/Studio Portrait Ex
F4/Velvia
Soft
Soft2
Hard
Hard2
Medium Soft
Medium Hard
Auto
Night Scene
Program AE
Natural Light
Anti-blur
Beach and Snow
Museum
Party
Flower
Text
Natural Light and Flash
Aperture-priority AE
Shutter speed priority AE
{MakerHasselblad}
{MakerKodak}
{MakerLeaf}
com.apple.rawcamera
mobileasset
{MakerMinolta}
ALPHA SWEET DIGITAL
ALPHA-7 DIGITAL
MAXXUM 7D
IFD0/Exif/Makernote/%@
PreviewImageStart
PreviewImageLength
Center
Top-right
Right
Bottom-right
Bottom
Bottom-left
Left
Top-left
 or %@
VR-OFF
VR-Off
VR-ON
VR-On
NONE
MED.L
Med. Low
MID.L
NORMAL
MED.H
Med. High
MID.H
HIGH
ENHANCED
Enhanced
MODERATE
Moderate
CUSTOM
NEUTRAL
STANDARD
PORTRAIT
LANDSCAPE
SOFT
SHARP
Sharp
VIVID
MOREVIVID
Extra Vivid
DIRECTPRINT
Direct Print
MONOCHROME
BLACKANDWHITE
MANUAL
IFD0/Exif/Makernote/%@/%@
NikonThumbnail
_Nikon98Tag
ToneCompensation
HueAdjustment
_Nikon23Tag
ToningSaturation
PictureControlAdjust
D7000
D7100
D700
D3000
D3100
D3200
D300S
D300
D5000
D5100
D5200
D5300
wide
D800
D810
D600
D610
D750
D100
D200
P6000
E8400
E8700
E8800
P7000
Upper-left
Upper-right
Lower-left
Lower-right
Far Left
Far Right
Single Area
Dynamic Area
Dynamic Area, Closest Subject
Group Dynamic
Single Area (wide)
Dynamic Area (wide)
 UNKNOWN AF Mode
Closest Subject
Dynamic Area, (3D-tracking)
Auto-area AF
11 Point 3D
Single Area (Wide)
Dynamic Area (Wide)
11 Point 3D (Wide)
Cyanotype
Blue-green
Purple-blue
Red-purple 
%02X %02X %02X %02X %02X %02X %02X %02X
_NikonCaptureTag
VignetteControl
A01 = 1 10  A02 = 0 04  A03 = 0 80  B01 = 4 20  B02 = 4 04  B03 = 3 80  B04 = 3 10  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 08  B10 = 2 40  B11 = 3 02  C01 = 4 10  C02 = 4 02  C03 = 3 40  C04 = 3 08  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 04  C10 = 2 20  C11 = 3 01  D01 = 4 40  D02 = 4 08  D03 = 4 01  D04 = 3 20  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 02  D09 = 2 10  D10 = 2 80  D11 = 3 04  E01 = 1 40  E02 = 0 10  E03 = 1 02  
A01 = 5 20  A02 = 5 01  A03 = 4 08  A04 = 1 10  A05 = 0 04  A06 = 0 80  A07 = 2 02  A08 = 2 40  A09 = 3 08  B01 = 6 02  B02 = 5 10  B03 = 4 80  B04 = 4 04  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 20  B10 = 3 04  B11 = 3 80  C01 = 6 01  C02 = 5 08  C03 = 4 40  C04 = 4 02  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 10  C10 = 3 02  C11 = 3 40  D01 = 6 04  D02 = 5 40  D03 = 5 02  D04 = 4 10  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 04  D09 = 2 80  D10 = 3 10  D11 = 4 01  E01 = 5 80  E02 = 5 04  E03 = 4 20  E04 = 1 40  E05 = 0 10  E06 = 1 02  E07 = 2 08  E08 = 3 01  E09 = 3 20  
{MakerOlympus}
IFD0/Exif/Makernote/OlympusCameraSettings/%@
PreviewImageValid
PreviewImageOffset
JPEGThumbnail
XZ-1
E-P1
E-P2
E-PL1
E-PL2
%@/OlympusEquipment
%@/OlympusCameraSettings
%@/OlympusFocusInfo
Single Target
All Target
Dynamic Single Target
 UNKNOWN AF Target
Center (horizontal)
Center (vertical)
(none)
Top-left (horizontal)
Top-center (horizontal)
Top-right (horizontal)
Left (horizontal)
Mid-left (horizontal)
Mid-right (horizontal)
Right (horizontal)
Bottom-left (horizontal)
Bottom-center (horizontal)
Bottom-right (horizontal)
Top-left (vertical)
Top-center (vertical)
Top-right (vertical)
Left (vertical)
Mid-left (vertical)
Mid-right (vertical)
Right (vertical)
Bottom-left (vertical)
Bottom-center (vertical)
Bottom-right (vertical)
Natural
Muted
Monotone
%1X %02X %02X
Gradation
{MakerPanasonic}
%@/PanasonicThumbnail
Scenery
Night Portrait
Program
Aperture Priority
Shutter Priority
Spot
Movie Preview
Panning
Simple
Color Effects
Self Portrait
Economy
Night Scenery
Food
Baby
Soft Skin
Candlelight
Starry Night
High Sensitivity
Panorama Assist
Aerial Photo
Intelligent ISO
Clipboard
High Speed Continuous Shooting
Intelligent Auto
Multi-aspect
Flash Burst
Pin Hole
Film Grain
{MakerPentax}
IFD2/%@
FineSharpness
ShadowCompensation
*ist
GX-1S
GX-1L
K100D
K110D
PentaxModelID
%d %d
Mid-left
Mid-right
Center vertical
Shutter Speed Priority
Sport
Surf and Snow
Autumn
Panorama
Illustrations
Digital Filter
Green Mode
Light Pet
Dark Pet
Medium Pet
Natural Skin Tone
Synchro Sound Record
Frame Composite
Kids
Blur Reduction
Half-length Portrait
Bright
Vibrant
_PentaxLensType
SamsungThumbnail
IFD1/SubIFD0
{MakerSony}
SceneMode
 SSM
 SAM
 OSS
%dmm 
%d-%dmm 
F%.1f
F%.1f-%.1f
Sony 
%lld
Night View/Portrait
Clear
Deep
Ligth
Night view
Autumn Leaves
sushiMode
isV4Faux
cameraMake
cameraModel
isDNGFile
isDNGMethod
whiteLevelThresholdMultiplier
evenSensorSize
rawDataSize
longExposureNoiseReductionEnabled
focalLength
exifPixelXDimension
exifPixelYDimension
subsampling
initialize (Noise) context
compile (Noise) programs
create (Noise) compute kernels
allocate noise table memory buffers
create noise table buffers
table_calc
calculate tables
tableCalc
calculate tables 16
tableCalcQ16
calculate tables for RAW filter
tableCalcFilter
calculate tables for RAW filter 16
tableCalcFilterQ16
calculate reciprocal table
recipTable
calculate reciprocal table 16
recipTableQ16
Fuji EXR Resample
setUpNoiseOpenCLEnvironment: initializeContext failed
setUpNoiseOpenCLEnvironment: compileOpenCLPrograms failed
setUpNoiseOpenCLEnvironment: createOpenCLKernels failed
computeNoiseTables: allocateOpenCLBuffers failed
computeNoiseTables: tableCalc failed
computeNoiseTables: failure to allocate image buffers
Error: failed to read back red noise perceptual buffer
Error: failed to read back green noise perceptual buffer
Error: failed to read back green noise buffer
Error: failed to read back blue noise perceptual buffer
Error: failed to read back perceptual buffer
Error: failed to read back green noise variance buffer
Error: failed to read back reciprocal buffer
camera
RawCameraSupport Queue
/RegressionTest.octest/Contents/Resources
RawCamera.bundle
RawCameraSupport.bundle
/System/Library/CoreServices/RawCameraSupport.bundle
Failed to unmap data (%p; 0x%lx): %s.
com.apple.MobileAsset.RawCamera.Camera
RawCamera_Catalog_Access_Queue
RAWCAMERA_USE_RAWCAMERASUPPORT
com.apple.MobileAsset.RawCamera.Camera.ma.cached-metadata-updated
v12@?0i8
GetMobileAssetCatalog_block_invoke_2
GetMobileAssetCatalog_block_invoke
v16@?0q8
RawCamera_Update_MobileAsset_Catalog
FormatVersion
cameraVersionInfo
cameraContentVersion
GetAssetForKey_block_invoke
GetAssetForKey
cameraNames
pluginDictWithKey
version.contentVersion
alias
lensDictWithKey
resourceFromArchive
%@.%@
resourceFromMobileAsset
PlugIns
assets
.cam
cameraName
keyArray
camDict
version.cameraName
version.showInSystemProfiler
rawImageClass.supportedMethods
B24@?0@8@"NSDictionary"16
Error: Failed to create kernel %s (error %d)!
  ...program index %d program %p kernel index %d
Error: Failed to retrieve %s kernel work group info! %d
Error: Failed to read output array! %d
Error: Failed to build program executable: %s
CLProgramCreationQueue
insufficient buffers (looking for (%d by %d) %d components %d bytes per sample
  buffer %d width %d height %d spp %d bps %d inUse %d tag %d
insufficient buffers (looking for externally provided image (input %d))
  buffer %d width %d height %d spp %d bps %d inUse %d tag %d ext %d input %d
%s %s
Error: Failed to set kernel %d arguments index! %d
too many buffer arguments for kernel index %d
too many shape arguments for kernel index %d
too many other arguments for kernel index %d
other argument %d maximum size exceeded for kernel %d
Error: Failed to write buffer!
Error: Failed to create compute program!
returnBuffer: buffer is NULL
useBuffer: buffer not in use
useBuffer: buffer is NULL
Error: Failed to create a command commands!
Error: maximum number of program files exceeded!
Error: maximum number of kernels exceeded!
Error: maximum number of shapes of shared buffers exceeded!
com.apple.rawcamera.FEVirtualMemory.PointerToInfo
size=%ld
com.apple.rawcamera.FEVirtualMemory.RecycleArray
Unable to allocate memory. mmap() of %lu bytes failed. Aborting.
CaptureInfo
RAWGainMap disabled because of incorrect arguments
RAWGainMap disabled because inputImage is infinite
GainMapWithPitch
makeMapSampler
mDistance
mNumberOfPairs
mLensDistortionLengthRatio[%zu]
mLensDistortionFactor[%zu]
DemosaicTileProvider
Test
MakeSerializable
RAWVignetteTable
RAWLensCorrectionVignetteFilter
RAWLensCorrectionLateralCAFilter
RAWLensCorrectionDistortionFilter
BayerImageProvider
RawCamera
RAWRadialLensCorrection
RAWRadialLensCorrectionRB
RAWSimpleLensCorrectionFilter
BayerReconstructionV4ImageProvider
RAWGamutMap
Curve
FujiSuperCCDReconstructionImageProvider
RAWDemosaicFilter
RAWCompatability
RAWFilter
FixmeWarning
RAWLinearSpacePlaceholder
RAWAdjustColors
RAWAdjustColorTRC
RAWConvertSRGBtoLinear
RAWConvertLinearToSRGB
RAWHueMagnet
RAWReduceNoise
RAWPreserveHueGamutMap
KVCAccessors
RAWTemperatureAdjust
RAWAdjustExposureAndBias
RAWVignetteRadial
RAWConvert
Private
RAWKernels
NRKernels
LCKernels
DMKernels
GMKernels
HMKernels
BoostKernels
GainMapKernels
V8LNRKernels
V8CNRKernels
V8VIEWKernels
RAWDefringeFilter
__rawcamera
BitmapFilterer
RAWCropFilter
RAWGainMap
RAWLensCorrectionDNG
RAWEdgeSharpen
@16@0:8
@1052@0:8^{CRawImage=^^?i{shared_ptr<CUnpacker>=^{CUnpacker}^{__shared_weak_count}}i^{CInterpolator}^{CCameraPlugin}d{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}^{CRawProperties}B{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}^{CClientOverrides}{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}BBBBiiBB^{__CFString}^{CImageParser}I{geomPoint_t=ii}^{CLock}^{CMutableData}}16{reconstructionDataV4_s=IiBBfBBfffiBfBfffBffifiiiiif{?=C[8S][8S][8s][8s]}BffffiiBff{?=Cii[16f][16f][16f]}{?=Cii[16f][16f]}ffBBfffffffffBfBiBBfiifffBiiiiiifffffiiiff[3f][3f][3f][3f][3f][3f]iB{otrc_s=ffffffffB}ffffffi[4f][4f]B[4{signalNoiseModel_s=ffff}]BffffffB}24Q1012Q1020Q1028Q1036B1044B1048
v16@0:8
v20@0:8B16
v72@0:8^v16Q24Q32Q40Q48Q56@64
^{CRawImage=^^?i{shared_ptr<CUnpacker>=^{CUnpacker}^{__shared_weak_count}}i^{CInterpolator}^{CCameraPlugin}d{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}^{CRawProperties}B{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}^{CClientOverrides}{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}BBBBiiBB^{__CFString}^{CImageParser}I{geomPoint_t=ii}^{CLock}^{CMutableData}}
{reconstructionDataV4_s="pattern"I"bitmapType"i"despeckleBlackNoiseEnabled"B"blackLevelExtendEnabled"B"blackDespeckleNoiseFactor"f"greenSplitEnabled"B"unknownDNGCamera"B"greenSplitRed"f"greenSplitGreen1"f"greenSplitBlue"f"greenBayerSplit"i"HREnabled"B"HRGreenClip"f"SPEEnabled"B"SPEDeadNoiseFactor"f"SPEDeadNoticeabilityFactor"f"SPEHotNoiseFactor"f"DESEnabled"B"DESNoiseFactor"f"DESSignalToNoiseThreshold"f"DESDoEarlyOut"i"DESEarlyOutFactor"f"DESDoRed"i"DESDoGreen"i"DESDoBlue"i"DESTaperMethod"i"DESMethod"i"DESCloseThreshold"f"CAParameters"{?="ChAber_SW_Extended"C"CA_blu"[8S]"CA_red"[8S]"BG"[8s]"RG"[8s]}"CACorrectionEnabled"B"CACorrectionRedPower"f"CACorrectionBluePower"f"CACorrectionRedScale"f"CACorrectionBlueScale"f"fullWidth"i"fullHeight"i"vignetteCorrectionEnabled"B"vignetteCorrectionPower"f"vignetteCorrectionAmount"f"fujiCAParameters"{?="FujiCAEnable"C"numberOfPoints"i"maxDistance"i"CA_LR"[16f]"CA_red"[16f]"CA_blu"[16f]}"fujiLensParameters"{?="FujiLensCorrectionEnable"C"maxDistance"i"numberOfPoints"i"lengthRatio"[16f]"factor"[16f]}"chromaBlurHighFrequencyThreshold"f"highFrequencyNoiseFactor"f"chromaBlurEnabled"B"noAntiAliasingFilter"B"chromaBlurRadius"f"chromaBlurRadius2"f"powerBlurNoiseFactor"f"cnrNoiseFactor"f"cnrRadius"f"cnrAmount"f"cnrBias"f"chromaBlurEdgeThreshold"f"chromaBlurEdgeThreshold2"f"onePassDemosaic"B"adaptiveNormalizationNoiseFactor"f"adaptiveNormalizationSimple"B"adaptiveNormalizationDirectionFindingMethod"i"fujiGreenReconstructionCopyRaw"B"fujiGreenReconstructionHighFrequency"B"fujiDirectionsNoiseFactor"f"fujiGreenSmoothingEnabled"i"fujiGreenSmoothingThreshold"i"fujiGreenSmoothingSharpeningAmount"f"fujiGreenSmoothingCornerThreshold"f"fujiGreenSmoothingAdjuster"f"fujiRedBluePlanarValidity"B"redBlueDefringe"i"redBlueRangeLimit"i"redBlueGradientThreshold"i"redBlueDumbOnly"i"redBlueGreenOnly"i"colorSmoothingEnabled"i"colorSmoothingSharpnessAmount"f"resampleHorizScale"f"resampleVertScale"f"resampleSharpness"f"resamplePower"f"resampleRadial"i"sourceCropColumn"i"sourceCropRow"i"minimumSignalToNoiseRatio"f"maximumSignalToNoiseRatio"f"factors"[3f]"RVector"[3f]"GVector"[3f]"BVector"[3f]"bias"[3f]"clipLevels"[3f]"biasOff"i"boostEnabled"B"otrc"{otrc_s="s0"f"y1"f"s1"f"y2"f"s2"f"y3"f"s3"f"s4"f"disabled"B}"gamma"f"shadowDesaturatePoint"f"shadowDesaturateWidth"f"shadowDesaturateAmount"f"xScale"f"yScale"f"ISO"i"blackLevels"[4f]"darkNoise"[4f]"individualQuadratics"B"signalNoiseModels"[4{signalNoiseModel_s="a"f"b"f"c"f"PRNU"f}]"moireSuppressionEnabled"B"hueMagMR"f"hueMagRY"f"hueMagYG"f"hueMagGC"f"hueMagCB"f"hueMagBM"f"useGPUEnabled"B}
{?="initialized"i"ForRAWFilter"B"showTiming"i"T"{_tableVars="redNoisePerceptualBuffer"^{_OpenCLSharedBuffer}"redNoiseBuffer"^{_OpenCLSharedBuffer}"greenNoisePerceptualBuffer"^{_OpenCLSharedBuffer}"greenNoiseBuffer"^{_OpenCLSharedBuffer}"greenNoisePlainBuffer"^{_OpenCLSharedBuffer}"blueNoisePerceptualBuffer"^{_OpenCLSharedBuffer}"blueNoiseBuffer"^{_OpenCLSharedBuffer}"perceptualBuffer"^{_OpenCLSharedBuffer}"reciprocalBuffer"^{_OpenCLSharedBuffer}"reciprocal2Buffer"^{_OpenCLSharedBuffer}"boostBuffer"^{_OpenCLSharedBuffer}"highFrequencyBuffer"^{_OpenCLSharedBuffer}"FujiEXRResampleBuffer"^{_OpenCLSharedBuffer}"redSN1"i"redSN2"i"greenSN1"i"greenSN2"i"blueSN1"i"blueSN2"i"redMaxNoise"i"greenMaxNoise"i"blueMaxNoise"i"reciprocal2Table"^i"boostTable"^S"highFrequencyTable"^f}"N"{_noiseVars="factor4"[4f]"ifactor4"[4f]"blacklevel4"[4f]"darknoise24"[4f]"coeffA4"[4f]"coeffB4"[4f]"coeffC4"[4f]}"C"{?="initialized"i"contextProvidedExternally"B"inputAndOutputBuffersProvidedExternally"B"GPU"B"CPU32"B"useAutoVectorizer"B"device_id"Q"commands"^Q"nProgramIDs"i"nKernelIDs"i"nSharedBufferShapes"i"nSharedBuffers"i"programNames"[50*]"kernelInfoRecords"[100{?="width"i"height"i"name"*"programID"i"functionName"*"workGroupSize"i"CPUonly"i}]"sharedBufferShapes"[20{?="nBuffers"i"width"i"height"i"samplesPerPixel"i"bytesPerSample"i"flags"Q"inputSpecifier"i"highWaterMark"i}]"programs"[50^Q]"kernels"[100^Q]"nKernelInvocations"i"invocations"[6000{?="kernelID"i"width"i"height"i"event"^Q}]"inputBuffer1"^{_OpenCLSharedBuffer}"inputBuffer2"^{_OpenCLSharedBuffer}"inputBuffer3"^{_OpenCLSharedBuffer}"sharedBuffers"[64{_OpenCLSharedBuffer="size"Q"width"Q"height"Q"samplesPerPixel"i"bytesPerSample"i"externalRowSamples"Q"flags"Q"buf"^Q"inUse"B"externallyProvided"B"externalInput"B"tag"i}]"specs"[100{?="width"i"height"i"samplesPerPixel"i"bytesPerSample"i"size"i"factor"i"name"*}]"nSpecs"i"timeTotals"[100d]"externalTimeTotals"[9d]"sizes"[8i]"ntasks"i"tasks"[200{?="start"d"end"d"time"d"openCL"B"kernelID"i"str"[128c]}]"kernelDirectory"[1024c]}"mems"[13^S]"GPUDeviceName"[256c]}
{?="initialized"i"showTiming"i"clMaxInternalTileHeight"i"clMaxInternalTileWidth"i"clTileBorder"i"row"i"col"i"T"{_tableVars="redNoisePerceptualBuffer"^{_OpenCLSharedBuffer}"redNoiseBuffer"^{_OpenCLSharedBuffer}"greenNoisePerceptualBuffer"^{_OpenCLSharedBuffer}"greenNoiseBuffer"^{_OpenCLSharedBuffer}"greenNoisePlainBuffer"^{_OpenCLSharedBuffer}"blueNoisePerceptualBuffer"^{_OpenCLSharedBuffer}"blueNoiseBuffer"^{_OpenCLSharedBuffer}"perceptualBuffer"^{_OpenCLSharedBuffer}"reciprocalBuffer"^{_OpenCLSharedBuffer}"reciprocal2Buffer"^{_OpenCLSharedBuffer}"boostBuffer"^{_OpenCLSharedBuffer}"highFrequencyBuffer"^{_OpenCLSharedBuffer}"FujiEXRResampleBuffer"^{_OpenCLSharedBuffer}"redSN1"i"redSN2"i"greenSN1"i"greenSN2"i"blueSN1"i"blueSN2"i"redMaxNoise"i"greenMaxNoise"i"blueMaxNoise"i"reciprocal2Table"^i"boostTable"^S"highFrequencyTable"^f}"N"{_noiseVars="factor4"[4f]"ifactor4"[4f]"blacklevel4"[4f]"darknoise24"[4f]"coeffA4"[4f]"coeffB4"[4f]"coeffC4"[4f]}"V"{?="highFrequencyThreshold"i"iradius"i"maxradius"i"noAntiAliasingFilter"i"noiseFactor"f"pass1Enabled"B"pass2Enabled"B"pass3Enabled"B"pass4Enabled"B"thresh1"i"thresh2"i"thresh3"i"thresh4"i"pass2Despeckle"i"pass2DespeckleCountThreshold"i"pass2DespeckleLuminanceThreshold"i"pass2DespeckleDifferenceAmount"f"pass2DespeckleAverageCloseIn"i}"dataV4"{reconstructionDataV4_s="pattern"I"bitmapType"i"despeckleBlackNoiseEnabled"B"blackLevelExtendEnabled"B"blackDespeckleNoiseFactor"f"greenSplitEnabled"B"unknownDNGCamera"B"greenSplitRed"f"greenSplitGreen1"f"greenSplitBlue"f"greenBayerSplit"i"HREnabled"B"HRGreenClip"f"SPEEnabled"B"SPEDeadNoiseFactor"f"SPEDeadNoticeabilityFactor"f"SPEHotNoiseFactor"f"DESEnabled"B"DESNoiseFactor"f"DESSignalToNoiseThreshold"f"DESDoEarlyOut"i"DESEarlyOutFactor"f"DESDoRed"i"DESDoGreen"i"DESDoBlue"i"DESTaperMethod"i"DESMethod"i"DESCloseThreshold"f"CAParameters"{?="ChAber_SW_Extended"C"CA_blu"[8S]"CA_red"[8S]"BG"[8s]"RG"[8s]}"CACorrectionEnabled"B"CACorrectionRedPower"f"CACorrectionBluePower"f"CACorrectionRedScale"f"CACorrectionBlueScale"f"fullWidth"i"fullHeight"i"vignetteCorrectionEnabled"B"vignetteCorrectionPower"f"vignetteCorrectionAmount"f"fujiCAParameters"{?="FujiCAEnable"C"numberOfPoints"i"maxDistance"i"CA_LR"[16f]"CA_red"[16f]"CA_blu"[16f]}"fujiLensParameters"{?="FujiLensCorrectionEnable"C"maxDistance"i"numberOfPoints"i"lengthRatio"[16f]"factor"[16f]}"chromaBlurHighFrequencyThreshold"f"highFrequencyNoiseFactor"f"chromaBlurEnabled"B"noAntiAliasingFilter"B"chromaBlurRadius"f"chromaBlurRadius2"f"powerBlurNoiseFactor"f"cnrNoiseFactor"f"cnrRadius"f"cnrAmount"f"cnrBias"f"chromaBlurEdgeThreshold"f"chromaBlurEdgeThreshold2"f"onePassDemosaic"B"adaptiveNormalizationNoiseFactor"f"adaptiveNormalizationSimple"B"adaptiveNormalizationDirectionFindingMethod"i"fujiGreenReconstructionCopyRaw"B"fujiGreenReconstructionHighFrequency"B"fujiDirectionsNoiseFactor"f"fujiGreenSmoothingEnabled"i"fujiGreenSmoothingThreshold"i"fujiGreenSmoothingSharpeningAmount"f"fujiGreenSmoothingCornerThreshold"f"fujiGreenSmoothingAdjuster"f"fujiRedBluePlanarValidity"B"redBlueDefringe"i"redBlueRangeLimit"i"redBlueGradientThreshold"i"redBlueDumbOnly"i"redBlueGreenOnly"i"colorSmoothingEnabled"i"colorSmoothingSharpnessAmount"f"resampleHorizScale"f"resampleVertScale"f"resampleSharpness"f"resamplePower"f"resampleRadial"i"sourceCropColumn"i"sourceCropRow"i"minimumSignalToNoiseRatio"f"maximumSignalToNoiseRatio"f"factors"[3f]"RVector"[3f]"GVector"[3f]"BVector"[3f]"bias"[3f]"clipLevels"[3f]"biasOff"i"boostEnabled"B"otrc"{otrc_s="s0"f"y1"f"s1"f"y2"f"s2"f"y3"f"s3"f"s4"f"disabled"B}"gamma"f"shadowDesaturatePoint"f"shadowDesaturateWidth"f"shadowDesaturateAmount"f"xScale"f"yScale"f"ISO"i"blackLevels"[4f]"darkNoise"[4f]"individualQuadratics"B"signalNoiseModels"[4{signalNoiseModel_s="a"f"b"f"c"f"PRNU"f}]"moireSuppressionEnabled"B"hueMagMR"f"hueMagRY"f"hueMagYG"f"hueMagGC"f"hueMagCB"f"hueMagBM"f"useGPUEnabled"B}"outputHalf"B"nt"^{_noiseTables}"C"{?="initialized"i"contextProvidedExternally"B"inputAndOutputBuffersProvidedExternally"B"GPU"B"CPU32"B"useAutoVectorizer"B"device_id"Q"commands"^Q"nProgramIDs"i"nKernelIDs"i"nSharedBufferShapes"i"nSharedBuffers"i"programNames"[50*]"kernelInfoRecords"[100{?="width"i"height"i"name"*"programID"i"functionName"*"workGroupSize"i"CPUonly"i}]"sharedBufferShapes"[20{?="nBuffers"i"width"i"height"i"samplesPerPixel"i"bytesPerSample"i"flags"Q"inputSpecifier"i"highWaterMark"i}]"programs"[50^Q]"kernels"[100^Q]"nKernelInvocations"i"invocations"[6000{?="kernelID"i"width"i"height"i"event"^Q}]"inputBuffer1"^{_OpenCLSharedBuffer}"inputBuffer2"^{_OpenCLSharedBuffer}"inputBuffer3"^{_OpenCLSharedBuffer}"sharedBuffers"[64{_OpenCLSharedBuffer="size"Q"width"Q"height"Q"samplesPerPixel"i"bytesPerSample"i"externalRowSamples"Q"flags"Q"buf"^Q"inUse"B"externallyProvided"B"externalInput"B"tag"i}]"specs"[100{?="width"i"height"i"samplesPerPixel"i"bytesPerSample"i"size"i"factor"i"name"*}]"nSpecs"i"timeTotals"[100d]"externalTimeTotals"[9d]"sizes"[8i]"ntasks"i"tasks"[200{?="start"d"end"d"time"d"openCL"B"kernelID"i"str"[128c]}]"kernelDirectory"[1024c]}"nProducts"i"product"i"mems"[20^S]"lastAllocateBuffersWidth"i"lastAllocateBuffersHeight"i"lastAllocateBuffersShow"i"GPUDeviceName"[256c]"destinationTileRect"{?="minrow"i"maxrow"i"mincol"i"maxcol"i}}
{_noiseTables="tables"[13^S]"redSN1"i"redSN2"i"greenSN1"i"greenSN2"i"blueSN1"i"blueSN2"i"redMaxNoise"i"greenMaxNoise"i"blueMaxNoise"i"N"{_noiseVars="factor4"[4f]"ifactor4"[4f]"blacklevel4"[4f]"darknoise24"[4f]"coeffA4"[4f]"coeffB4"[4f]"coeffC4"[4f]}"V"{?="highFrequencyThreshold"i"iradius"i"maxradius"i"noAntiAliasingFilter"i"noiseFactor"f"pass1Enabled"B"pass2Enabled"B"pass3Enabled"B"pass4Enabled"B"thresh1"i"thresh2"i"thresh3"i"thresh4"i"pass2Despeckle"i"pass2DespeckleCountThreshold"i"pass2DespeckleLuminanceThreshold"i"pass2DespeckleDifferenceAmount"f"pass2DespeckleAverageCloseIn"i}}
@24@0:8@16
v32@0:8@16@24
B16@0:8
@"CIImage"
@"NSData"
@"NSNumber"
{CGRect={CGPoint=dd}{CGSize=dd}}60@0:8i16{CGRect={CGPoint=dd}{CGSize=dd}}20@52
{CGRect={CGPoint=dd}{CGSize=dd}}84@0:8{CGPoint=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32r^{vec4=ffff}64i72i76f80
{CGRect={CGPoint=dd}{CGSize=dd}}84@0:8{CGPoint=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32r^{vec2=ff}64i72i76f80
@28@0:8^{CRawImage=^^?i{shared_ptr<CUnpacker>=^{CUnpacker}^{__shared_weak_count}}i^{CInterpolator}^{CCameraPlugin}d{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}^{CRawProperties}B{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}^{CClientOverrides}{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}BBBBiiBB^{__CFString}^{CImageParser}I{geomPoint_t=ii}^{CLock}^{CMutableData}}16B24
@32@0:8@16d24
@"CIVector"
{CGPoint=dd}40@0:8{CGPoint=dd}16@32
@24@0:8d16
@32@0:8@16@24
@32@0:8@?16@?24
@40@0:8@?16d24d32
@44@0:8i16d20d28^d36
@?16@0:8
v24@0:8@?16
d16@0:8
@28@0:8^{CRawImageFujiBase=^^?i{shared_ptr<CUnpacker>=^{CUnpacker}^{__shared_weak_count}}i^{CInterpolator}^{CCameraPlugin}d{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}^{CRawProperties}B{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}^{CClientOverrides}{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}BBBBiiBB^{__CFString}^{CImageParser}I{geomPoint_t=ii}^{CLock}^{CMutableData}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<int, std::__1::allocator<int> > >={map<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >={map<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned int>={map<MethodNumber_e, unsigned int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned int> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned int>={map<MethodNumber_e, unsigned int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned int> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<whiteLevelSource_e>={map<MethodNumber_e, whiteLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, whiteLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, whiteLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<blackLevelSource_e>={map<MethodNumber_e, blackLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, blackLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, blackLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<blackLevelSource_e>={map<MethodNumber_e, blackLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, blackLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, blackLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<blackLevelSource_e>={map<MethodNumber_e, blackLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, blackLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, blackLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::basic_string<char> >={map<MethodNumber_e, std::__1::basic_string<char>, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::basic_string<char> > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::basic_string<char> >={map<MethodNumber_e, std::__1::basic_string<char>, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::basic_string<char> > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned int>={map<MethodNumber_e, unsigned int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned int> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<long>={map<MethodNumber_e, long, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, long> > >={__tree<std::__1::__value_type<MethodNumber_e, long>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, long>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, long>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<WhiteBalanceOrder_e>={map<MethodNumber_e, WhiteBalanceOrder_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, WhiteBalanceOrder_e> > >={__tree<std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CNoiseModel *>={map<MethodNumber_e, CNoiseModel *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CNoiseModel *> > >={__tree<std::__1::__value_type<MethodNumber_e, CNoiseModel *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseModel *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CNoiseModel *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CNoiseModel *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseModel *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CSignalNoiseModel *>={map<MethodNumber_e, CSignalNoiseModel *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CSignalNoiseModel *> > >={__tree<std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CBlackLevelModel *>={map<MethodNumber_e, CBlackLevelModel *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CBlackLevelModel *> > >={__tree<std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CBlackLevelModel *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >={map<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >={map<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<boostKind_e>={map<MethodNumber_e, boostKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, boostKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, boostKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, boostKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, boostKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, boostKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, boostKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<highlightRecoveryKind_e>={map<MethodNumber_e, highlightRecoveryKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, highlightRecoveryKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<noiseReductionKind_e>={map<MethodNumber_e, noiseReductionKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, noiseReductionKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, noiseReductionKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<votingKind_e>={map<MethodNumber_e, votingKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, votingKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, votingKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, votingKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, votingKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, votingKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, votingKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<chromaBlurKind_e>={map<MethodNumber_e, chromaBlurKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, chromaBlurKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, chromaBlurKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<int>={map<MethodNumber_e, int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, int> > >={__tree<std::__1::__value_type<MethodNumber_e, int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<stuckPixelKind_r>={map<MethodNumber_e, stuckPixelKind_r, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, stuckPixelKind_r> > >={__tree<std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, stuckPixelKind_r> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<noiseEstimateKind_e>={map<MethodNumber_e, noiseEstimateKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, noiseEstimateKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<COutputToneResponseCurve *>={map<MethodNumber_e, COutputToneResponseCurve *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, COutputToneResponseCurve *> > >={__tree<std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CNoiseCharacterization *>={map<MethodNumber_e, CNoiseCharacterization *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CNoiseCharacterization *> > >={__tree<std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}BS}16B24
^{CRawImageFujiBase=^^?i{shared_ptr<CUnpacker>=^{CUnpacker}^{__shared_weak_count}}i^{CInterpolator}^{CCameraPlugin}d{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}^{CRawProperties}B{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}^{CClientOverrides}{shared_ptr<CMethod>=^{CMethod}^{__shared_weak_count}}BBBBiiBB^{__CFString}^{CImageParser}I{geomPoint_t=ii}^{CLock}^{CMutableData}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomRect_t>={map<MethodNumber_e, geomRect_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomRect_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomRect_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomRect_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomRect_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<geomSize_t>={map<MethodNumber_e, geomSize_t, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, geomSize_t> > >={__tree<std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, geomSize_t> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, geomSize_t>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, geomSize_t>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<int, std::__1::allocator<int> > >={map<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >={map<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned int>={map<MethodNumber_e, unsigned int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned int> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned int>={map<MethodNumber_e, unsigned int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned int> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<whiteLevelSource_e>={map<MethodNumber_e, whiteLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, whiteLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, whiteLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, whiteLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<blackLevelSource_e>={map<MethodNumber_e, blackLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, blackLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, blackLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<blackLevelSource_e>={map<MethodNumber_e, blackLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, blackLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, blackLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<blackLevelSource_e>={map<MethodNumber_e, blackLevelSource_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, blackLevelSource_e> > >={__tree<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, blackLevelSource_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, blackLevelSource_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::basic_string<char> >={map<MethodNumber_e, std::__1::basic_string<char>, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::basic_string<char> > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::basic_string<char> >={map<MethodNumber_e, std::__1::basic_string<char>, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::basic_string<char> > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::basic_string<char> >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned int>={map<MethodNumber_e, unsigned int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned int> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<long>={map<MethodNumber_e, long, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, long> > >={__tree<std::__1::__value_type<MethodNumber_e, long>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, long>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, long>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<WhiteBalanceOrder_e>={map<MethodNumber_e, WhiteBalanceOrder_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, WhiteBalanceOrder_e> > >={__tree<std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, WhiteBalanceOrder_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CNoiseModel *>={map<MethodNumber_e, CNoiseModel *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CNoiseModel *> > >={__tree<std::__1::__value_type<MethodNumber_e, CNoiseModel *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseModel *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CNoiseModel *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CNoiseModel *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseModel *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CSignalNoiseModel *>={map<MethodNumber_e, CSignalNoiseModel *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CSignalNoiseModel *> > >={__tree<std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CSignalNoiseModel *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CBlackLevelModel *>={map<MethodNumber_e, CBlackLevelModel *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CBlackLevelModel *> > >={__tree<std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CBlackLevelModel *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CBlackLevelModel *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >={map<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >={map<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<unsigned short, std::__1::allocator<unsigned short> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<boostKind_e>={map<MethodNumber_e, boostKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, boostKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, boostKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, boostKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, boostKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, boostKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, boostKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<highlightRecoveryKind_e>={map<MethodNumber_e, highlightRecoveryKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, highlightRecoveryKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, highlightRecoveryKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<noiseReductionKind_e>={map<MethodNumber_e, noiseReductionKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, noiseReductionKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, noiseReductionKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseReductionKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<votingKind_e>={map<MethodNumber_e, votingKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, votingKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, votingKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, votingKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, votingKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, votingKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, votingKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<chromaBlurKind_e>={map<MethodNumber_e, chromaBlurKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, chromaBlurKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, chromaBlurKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, chromaBlurKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<int>={map<MethodNumber_e, int, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, int> > >={__tree<std::__1::__value_type<MethodNumber_e, int>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, int>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, int>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<stuckPixelKind_r>={map<MethodNumber_e, stuckPixelKind_r, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, stuckPixelKind_r> > >={__tree<std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, stuckPixelKind_r> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, stuckPixelKind_r>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<noiseEstimateKind_e>={map<MethodNumber_e, noiseEstimateKind_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, noiseEstimateKind_e> > >={__tree<std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, noiseEstimateKind_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<COutputToneResponseCurve *>={map<MethodNumber_e, COutputToneResponseCurve *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, COutputToneResponseCurve *> > >={__tree<std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, COutputToneResponseCurve *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CMatrix>={map<MethodNumber_e, CMatrix, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CMatrix> > >={__tree<std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CMatrix> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CMatrix>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CMatrix>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<bool>={map<MethodNumber_e, bool, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, bool> > >={__tree<std::__1::__value_type<MethodNumber_e, bool>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, bool>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<std::__1::vector<double, std::__1::allocator<double> > >={map<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> >, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >={__tree<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, std::__1::vector<double, std::__1::allocator<double> > >, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<unsigned short>={map<MethodNumber_e, unsigned short, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, unsigned short> > >={__tree<std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, unsigned short> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, unsigned short>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, unsigned short>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<NoiseRegressionType_e>={map<MethodNumber_e, NoiseRegressionType_e, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, NoiseRegressionType_e> > >={__tree<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, NoiseRegressionType_e>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<double>={map<MethodNumber_e, double, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, double> > >={__tree<std::__1::__value_type<MethodNumber_e, double>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, double>, std::__1::less<MethodNumber_e>, true> >=Q}}}}{CPluginValue<CNoiseCharacterization *>={map<MethodNumber_e, CNoiseCharacterization *, std::__1::less<MethodNumber_e>, std::__1::allocator<std::__1::pair<const MethodNumber_e, CNoiseCharacterization *> > >={__tree<std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, std::__1::less<MethodNumber_e>, true>, std::__1::allocator<std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MethodNumber_e, std::__1::__value_type<MethodNumber_e, CNoiseCharacterization *>, std::__1::less<MethodNumber_e>, true> >=Q}}}}BS}
{reconstructionDataV2_s="pattern"I"bitmapType"i"despeckleBlackNoiseEnabled"B"blackLevelExtendEnabled"B"blackDespeckleNoiseFactor"f"noiseEstimate"f"greenSplitEnabled"B"unknownDNGCamera"B"greenSplitRed"f"greenSplitGreen1"f"greenSplitBlue"f"greenBayerSplit"i"extendHighlightsThreshold"f"HREnabled"B"HRGreenClip"f"SPEEnabled"B"SPERobust"B"SPENoiseFactor1"f"SPENoiseFactor2"f"NREnabled"B"NRNoiseFactor"f"CACorrectionEnabled"B"CACorrectionRedPower"f"CACorrectionBluePower"f"CACorrectionRedScale"f"CACorrectionBlueScale"f"fullWidth"i"fullHeight"i"vignetteCorrectionEnabled"B"vignetteCorrectionPower"f"vignetteCorrectionAmount"f"chromaBlurHighFrequencyThreshold"f"highFrequencyNoiseFactor"f"highFrequencySignalType"i"gradientSignalType"i"halfSizeMethod"i"halfSizeImageGreenFraction"f"halfSizeHack"B"fringeProcessingEnabled"i"fringeProcessingMethod"i"fringeProcessingThreshold1"f"fringeProcessingThreshold2"f"fringeProcessingNoiseFactor"f"chromaBlurEnabled"B"noAntiAliasingFilter"B"powerBlurThreePass"B"gradientProcessing"B"chromaBlurRadius"f"chromaBlurRadius2"f"powerBlurNoiseFactor"f"chromaBlurEdgeThreshold"f"chromaBlurEdgeThreshold2"f"gradientThreshold"f"adaptiveNormalizationMethod"i"adaptiveNormalizationHard"i"adaptiveNormalizationNoiseFactor"f"normalizeOffsetFraction"f"directionNoiseFactor"f"directionLowThreshold"f"verticalCorrelationEnabled"B"verticalCorrelationThreshold"f"verticalEdgeThreshold"f"verticalFlatnessThreshold"f"horizontalCorrelationEnabled"B"horizontalCorrelationThreshold"f"horizontalEdgeThreshold"f"diagonalCorrelationEnabled"B"diagonalCorrelationThreshold"f"correlationOldStyle"i"correlationHack"B"greenDespeckleEnabled"B"greenDespeckleThreshold"f"greenDespeckleDiagonalImprovement"i"interpolationType"i"extendedHighlightSmoothingType"i"sharpenEdgesEnabled"B"sharpenRadius"f"sharpenIntensity"f"sharpenAbsoluteLimit"f"sharpenEdgeIntensity"f"sharpenEdgeMaskSoftness"f"sharpenNoiseFactor"f"redBlueNoiseReductionEnabled"B"redBlueHack"B"chromaScaleMethod"i"chromaScaleHard"B"chromaScaleDetailFactor"f"minimumSignalToNoiseRatio"f"maximumSignalToNoiseRatio"f"maximumDetailDifference"f"factors"[3f]"RVector"[3f]"GVector"[3f]"BVector"[3f]"bias"[3f]"blacks"[4f]"clipLevels"[3f]"biasOff"i"boostEnabled"B"otrc"{otrc_s="s0"f"y1"f"s1"f"y2"f"s2"f"y3"f"s3"f"s4"f"disabled"B}"gamma"f"hueMagMR"f"hueMagRY"f"hueMagYG"f"hueMagGC"f"hueMagCB"f"hueMagBM"f"shadowDesaturatePoint"f"shadowDesaturateWidth"f"shadowDesaturateAmount"f"xScale"f"yScale"f"noiseARegressionType"i"noiseACCoefficient"f"noiseADCoefficient"f"noiseAECoefficient"f"noiseBRegressionType"i"noiseBCCoefficient"f"noiseBDCoefficient"f"noiseBECoefficient"f"noiseISOPin"i"ISO"i"cameraV2PlusHighlightNoiseCharacterized"B"breakpointFraction"f"noiseAHRegressionType"i"noiseAHCCoefficient"f"noiseAHDCoefficient"f"noiseAHECoefficient"f"noiseBHRegressionType"i"noiseBHCCoefficient"f"noiseBHDCoefficient"f"noiseBHECoefficient"f"noiseAH2RegressionType"i"noiseAH2CCoefficient"f"noiseAH2DCoefficient"f"noiseAH2ECoefficient"f"noiseBH2RegressionType"i"noiseBH2CCoefficient"f"noiseBH2DCoefficient"f"noiseBH2ECoefficient"f"fujiHigh"f"hilitefactors"[3f]"cameraV2PlusByTable"B"isoab"[50[3f]]}
i16@0:8
i20@0:8i16
@20@0:8i16
@24@0:8^{CGColorSpace=}16
@24@0:8#16
v24@0:8@16
v40@0:8@16^@24@32
@96@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32:64@72@80^{CGColorSpace=}88
@100@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32:64@72@80^{CGColorSpace=}88B96
@52@0:8@16@24@32^{CGColorSpace=}40B48
@56@0:8@16@24@32^{CGColorSpace=}40B48B52
@72@0:8@16@24@32@40@48^{CGColorSpace=}56^{CGColorSpace=}64
B24@0:8@16
@32@0:8d16@24
{CGRect={CGPoint=dd}{CGSize=dd}}52@0:8i16{CGRect={CGPoint=dd}{CGSize=dd}}20
@48@0:8@16@24@32@40
@36@0:8@16@24f32
@36@0:8@16f24@28
@32@0:8@16f24f28
@44@0:8@16f24f28i32f36f40
@40@0:8@16f24f28f32f36
@36@0:8@16f24f28f32
@48@0:8@16f24f28f32i36f40f44
@44@0:8@16f24f28f32f36f40
@40@0:8@16f24f28@32
@28@0:8@16f24
@44@0:8@16@24f32f36f40
@48@0:8@16@24f32f36f40f44
@56@0:8@16@24f32f36f40f44f48f52
@60@0:8@16@24f32f36f40f44f48f52f56
@100@0:8@16@24@32f40f44f48@52{CGRect={CGPoint=dd}{CGSize=dd}}60@92
@108@0:8@16@24@32@40f48f52f56@60{CGRect={CGPoint=dd}{CGSize=dd}}68@100
@96@0:8@16@24@32f40f44@48{CGRect={CGPoint=dd}{CGSize=dd}}56@88
@104@0:8@16@24@32@40f48f52@56{CGRect={CGPoint=dd}{CGSize=dd}}64@96
@80@0:8@16@24@32{CGRect={CGPoint=dd}{CGSize=dd}}40@72
@88@0:8@16@24@32@40{CGRect={CGPoint=dd}{CGSize=dd}}48@80
@60@0:8@16@24@32@40f48f52f56
@40@0:8@16@24@32
@48@0:8@16@24@32f40f44
@64@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32
@60@0:8@16f24{CGRect={CGPoint=dd}{CGSize=dd}}28
@64@0:8@16f24f28{CGRect={CGPoint=dd}{CGSize=dd}}32
@56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24
@60@0:8@16B24{CGRect={CGPoint=dd}{CGSize=dd}}28
@68@0:8@16f24f28B32{CGRect={CGPoint=dd}{CGSize=dd}}36
v40@0:8^f16^f24f32f36
v36@0:8^f16^f24f32
f16@0:8
@64@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24^B56
B28@0:8@16i24
@88@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24{CGRect={CGPoint=dd}{CGSize=dd}}56
@"NSDictionary"
@"NSArray"
{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}40@0:8@16Q24Q32
{CCameraProfile=^^?ii{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}S{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}}16@0:8
{CWhitePoint=dd}24@0:8^{CCameraProfile=^^?ii{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}S{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CMatrix=II{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}}16
@24@0:8^{_NSZone=}16
Q16@0:8
Vv16@0:8
@"NSMutableDictionary"
@40@0:8r*16Q24Q32
v68@0:8@16r^S24^v32I40I44I48I52I56@60
@"CIContext"
@68@0:8@16r^S24^v32I40I44I48I52I56@60
%{public}s MobileAsset catalog was updated.
%{public}s Updated catalog
%{public}s Failed to query metadata (Err: %d)
%{public}s MobileAsset catalog not present. Initiating download
%{public}s MobileAsset may have been updated. Initiating download
%{public}s MobileAsset catalog download successful (Err: %d)
%{public}s Failed to download MobileAsset catalog (Err: %d)
%{public}s MobileAsset catalog download successful
%{public}s Download asset successful
%{public}s Failed to download asset (Err: %d)
%{public}s Found asset for "%@" (%@)
%{public}s No key specified
%{public}s No type specified
%{public}s Failed to load RawCameraSupport plugins archive
%{public}s Failed to load data for plugin "%@"
%{public}s Failed to create CFData for plugin "%@"
%{public}s Loaded asset data for "%@"
%{public}s Failed to open plist for plugin "%@"
