com.apple.SafariFoundation.CredentialProviderExtensionHelper
v8@?0
v16@?0@"NSError"8
user
password
site
date
externalCredential
<%@: %p; site = %@; user = %@; password = %@; date = %@
supportsSecureCoding
TB,R
T@"<SFSafariPasswordCredential>",R,N,V_externalCredential
T@"NSString",R,N,V_user
T@"NSString",R,N,V_password
T@"NSString",R,N,V_site
creationDate
T@"NSDate",R,N,V_creationDate
external
TB,R,N,GisExternal
com.apple.SafariFoundation.%@.%p
sf_identity_matches_domains
v16@?0q8
CREATE TABLE credential_identities (id INTEGER PRIMARY KEY AUTOINCREMENT,identity_type INTEGER DEFAULT 0,service_id TEXT NOT NULL,service_id_type INTEGER NOT NULL DEFAULT 0,external_record_id TEXT DEFAULT NULL,user TEXT DEFAULT NULL,rank INTEGER NOT NULL DEFAULT 0,UNIQUE(service_id, service_id_type, external_record_id, user, identity_type) ON CONFLICT REPLACE)
CREATE INDEX credential_identities__service_id ON credential_identities (service_id)
B8@?0
DELETE FROM credential_identities WHERE service_id = ? AND service_id_type = ? AND external_record_id = ? AND user = ? AND identity_type = ?
DELETE FROM credential_identities
VACUUM
INSERT INTO credential_identities (identity_type, service_id, service_id_type, external_record_id, user, rank) VALUES (?, ?, ?, ?, ?, ?)
UPDATE credential_identities SET identity_type = ?, service_id = ?, service_id_type = ?, external_record_id = ?, user = ?, rank = ? WHERE id = ?
SELECT * FROM credential_identities WHERE sf_identity_matches_domains(service_id, service_id_type, ?) == 1
SELECT * FROM credential_identities
SELECT EXISTS(SELECT 1 FROM credential_identities)
domainSet
SFAutoFillHelperErrorDomain
com.apple.SafariFoundation.AutoFillHelper
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
com.apple.developer.authentication-services.autofill-credential-provider
com.apple.authentication-services.access-credential-identities
com.apple.authentication-services-credential-provider-ui
ASCredentialProviderExtensionShowsConfigurationUI
.app.link
.test-app.link
.adj.st
.ulink.adjust.com
.app.goo.gl
.bttn.io
.c00.adobe.com
.bnc.lt
.onelink.me
.storeapp-promotions.com
.hastrk1.com
.hastrk2.com
.hastrk3.com
.api-01.com
.api-02.com
.api-03.com
.api-04.com
.api-05.com
.measurementapi.com
.tlnk.io
apple.com
amazon.com
facebook.com
google.com
intuit.com
@"SFSharedWebCredentialsDatabaseEntry"16@?0@"NSString"8
v16@?0@"NSArray"8
@"NSString"16@?0@"SFSharedWebCredentialsDatabaseEntry"8
v40@?0q8@"NSString"16@"NSArray"24@"NSArray"32
@"NSString"16@?0@"NSString"8
q24@?0@"SFSafariCredential"8@"SFSafariCredential"16
q24@?0@"SFSharedWebCredentialsDatabaseEntry"8@"SFSharedWebCredentialsDatabaseEntry"16
@"SFSharedWebCredentialsDatabaseEntry"16@?0@"SFSharedWebCredentialsDatabaseEntry"8
B16@?0@"SFSharedWebCredentialsDatabaseEntry"8
@16@?0@"NSDictionary"8
v20@?0i8^{__CFArray=}12
q24@?0@"SFPasswordCredentialIdentity"8@"SFPasswordCredentialIdentity"16
@"SFSafariCredential"16@?0@"SFPasswordCredentialIdentity"8
v24@?0@"SFCredentialProviderExtensionState"8@"NSArray"16
%@@%@
www.
.com
WBSAutoFillQuirks
plist
AutoFillQuirks
SFExternalCredentialIdentityStoreErrorDomain
rowIdentifier
serviceIdentifier
serviceIdentifierType
externalRecordIdentifier
rank
owningExtensionState
T@"NSString",R,C,N
T@"NSDate",R,N
Tq,N,V_rowIdentifier
T@"SFCredentialProviderExtensionState",&,N,V_owningExtensionState
Tq,R,N,V_serviceIdentifierType
T@"NSString",R,C,N,V_serviceIdentifier
T@"NSString",R,C,N,V_externalRecordIdentifier
T@"NSString",R,C,N,V_user
Tq,R,N,V_rank
enabled
supportsIncrementalUpdates
localizedDisplayName
containingAppBundleIdentifier
TB,R,N,GisEnabled,V_enabled
TB,R,N,V_supportsIncrementalUpdates
T@"NSString",R,C,N,V_localizedDisplayName
T@"NSString",R,C,N,V_containingAppBundleIdentifier
domain
appID
service
flags
<%@: %p; domain = %@; appID = %@; service = %@; isApproved = %d
T@"NSString",R,C,N,V_domain
T@"NSString",R,C,N,V_appID
Tq,R,N,V_service
approved
TB,R,N,GisApproved,V_approved
activitycontinuation
applinks
webcredentials
Unknown
v16@?0@"NSExtension"8
v20@?0B8@"NSError"12
/SystemData/com.apple.AuthenticationServices
Identities
Identities.db
AutoFillPasswords
com.apple.WebUI
DefaultValueForPasswordAndCreditCardAutoFill
com.apple.SafariShared
AutoFill
Credentials
CredentialProviderExtension
PasswordSharing
B16@?0@"SFSuggestedUser"8
v24@?0q8@"NSString"16
com.apple.AuthenticationServices.%@.%p
v24@?0@"NSArray"8@"NSError"16
B16@?0@"NSExtension"8
B24@?0@"NSExtension"8^B16
extensions
T@"NSSet",R,N
primaryExtension
T@"NSExtension",R,N
primaryExtensionSync
@16@?0@"NSExtension"8
suggestedUserValue
suggestedUserType
suggestedUserUsageFrequency
<%@ %p: value=%@; type=%@; usageFrequency=%@>
usageFrequency
Tq,N,V_usageFrequency
value
T@"NSString",R,C,N,V_value
type
Tq,R,N,V_type
sf_bundleIdentifierForContainingApp
username
displayName
highLevelDomain
protectionSpaces
data
safaricredential
encryptedPasswordData
T@"NSData",R,C,N,V_encryptedPasswordData
encryptionKeyReference
T@"NSData",R,C,N,V_encryptionKeyReference
com.apple.passwordsharing.%f
com.apple.sharing.safaripasswordsharing
T@"NSString",R,C,N,V_username
T@"NSString",R,C,N,V_password
T@"NSString",R,C,N,V_displayName
T@"NSString",R,C,N,V_highLevelDomain
T@"NSArray",R,C,N,V_protectionSpaces
passwordManagerURL
T@"NSURL",R,N
init
alloc
initWithServiceName:
getCredentialProviderExtensionStateWithCompletion:
saveCredentialIdentities:completion:
removeCredentialIdentities:completion:
removeAllCredentialIdentitiesWithCompletion:
replaceCredentialIdentitiesWithIdentities:completion:
fetchCredentialIdentitiesMatchingDomains:completion:
removeCredentialIdentityStoreForApplication:completion:
interfaceWithProtocol:
class
setWithObject:
setClasses:forSelector:argumentIndex:ofReply:
setWithObjects:
setRemoteObjectInterface:
setInvalidationHandler:
resume
invalidate
dealloc
safari_privacyPreservingDescription
remoteObjectProxyWithErrorHandler:
_proxyObject
credentialProviderExtensionWithDisabledState
errorWithDomain:code:userInfo:
.cxx_destruct
_connection
copy
user
password
site
creationDate
distantPast
isExternal
stringWithFormat:
isKindOfClass:
externalCredential
isEqual:
hash
decodeObjectOfClasses:forKey:
initWithExternalCredential:
decodeObjectOfClass:forKey:
initWithUser:password:site:creationDate:
encodeObject:forKey:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
description
_user
_password
_site
_creationDate
_externalCredential
initWithURL:protectionType:
UTF8String
databaseQueue
database
handle
initWithDatabase:
openAndCheckIntegrity:createIfNeeded:fallBackToMemoryStoreIfError:lockingPolicy:completionHandler:
lastErrorMessage
tryToPerformTransactionInBlock:
_saveCredentialIdentities:
_removeAllCredentialIdentities
_vacuum
_removeCredentialIdentities:
count
countByEnumeratingWithState:objects:count:
_removeCredentialIdentity:
statementForQuery:error:
serviceIdentifier
serviceIdentifierType
externalRecordIdentifier
execute
reset
rowIdentifier
_updateCredentialIdentity:
_insertCredentialIdentity:
rank
lastInsertRowID
setRowIdentifier:
_fetchCredentialIdentities
_fetchCredentialIdentitiesMatchingDomains:
int64AtIndex:
stringAtIndex:
initWithRowIdentifier:serviceIdentifier:serviceIdentifierType:externalRecordIdentifier:user:rank:
safari_highLevelDomainFromHost
lowercaseString
addObject:
initWithDatabase:query:
fetch
array
_credentialIdentityFromRow:
_fetchStoreIsEmpty
nextObject
initWithURL:
_databaseWillClose
_createFreshDatabaseSchema
_currentSchemaVersion
fetchCredentialIdentitiesWithCompletion:
fetchStoreEmptyStateWithCompletion:
_statements
_queue
stringWithUTF8String:
containsObject:
componentsWithString:
host
initWithDatabase:query:error:
code
reportErrorWithCode:statement:error:
bindString:atParameterIndex:
bindInt64:atParameterIndex:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
getAutomaticStrongPasswordForAppWithPasswordRules:confirmPasswordRules:completion:
hasPrefix:
substringFromIndex:
arrayWithObjects:count:
safari_hasCaseInsensitiveSuffix:
safari_isCaseInsensitiveEqualToString:
domainByStrippingSubdomainWildcardPrefixIfNecessary:
domainIsProhibitedForSavingCredentials:
highLevelDomainHasSuiteOfAssociatedApps:
_approvedSharedWebCredentialsDatabaseEntriesForAppWithAppID:completionHandler:
sharedFeatureManager
shouldAutoFillPasswords
sharedManager
primaryExtensionSync
shouldAutoFillPasswordsFromKeychain
sharedStore
savedPasswords
hasPasswordsEligibleForAutoFill
isAppAutoFillAvailable
getCredentialsForAppWithAppID:websiteURL:completionHandler:
getCredentialsForAppWithAppID:externallyVerifiedAndApprovedSharedWebCredentialDomains:websiteURL:completionHandler:
_initWithDomain:appID:service:isApproved:
safari_mapObjectsUsingBlock:
mutableCopy
setWithArray:
_getCredentialsForAppWithApprovedAndValidSharedWebCredentialsDatabaseEntries:websiteURL:completionHandler:
_approvedAndValidSharedWebCredentialsDatabaseEntriesForAppWithAppID:completionHandler:
_getExternalCredentialsMatchingSharedWebCredentialsDatabaseEntries:websiteURL:completion:
_credentialsMatchingSharedWebCredentialsDatabaseEntries:websiteURL:savedPasswords:
arrayByAddingObjectsFromArray:
domain
safari_setByApplyingBlock:
_highLevelDomainsFromDatabaseEntries:
userIsNeverSaveMarker
_savedPassword:isRelatedToEntryHighLevelDomains:andWebsiteURL:
sites
objectAtIndexedSubscript:
safari_simplifiedSiteNameForCredentialLookup
earliestModifiedDateForSites
setObject:forKey:
countForObject:
objectForKey:
firstObject
replaceObjectAtIndex:withObject:
_sortCredentials:usingApprovedSharedWebCredentialsDatabaseEntries:
_getAllowedActionForAppCredentialsWithAppID:websiteURL:user:password:shouldAnalyzeExistingCredentials:completionHandler:
service
isEqualToString:
protectionSpaces
addObjectsFromArray:
_bestDomainFromApprovedDomainsForWebCredentials:appLinks:continuity:appID:allDomains:
rangeOfString:
orderedSet
allObjects
insertObject:atIndex:
initWithArray:
highLevelDomain
numberWithUnsignedInteger:
compare:
caseInsensitiveCompare:
sortWithOptions:usingComparator:
sortedArrayUsingComparator:
safari_mapAndFilterObjectsUsingBlock:
subarrayWithRange:
getApprovedSharedWebCredentialsEntriesForAppWithAppID:completionHandler:
length
isApproved
safari_filterObjectsUsingBlock:
_sharedWebCredentialsDatabaseEntriesForAppWithAppID:completionHandler:
initWithDictionary:
_credentialProviderExtensionHelperProxy
compareForQuickTypeBar:
setOwningExtensionState:
titleForPasswordCredentialIdentity:formURL:
owningExtensionState
localizedDisplayName
getAllApprovedSharedWebCredentialsEntries:
isRemoteAutoFillAvailable
getCredentialsForAppWithAppID:completionHandler:
getCredentialsForAppWithAppID:externallyVerifiedAndApprovedSharedWebCredentialDomains:completionHandler:
getCanSaveCredentialsWithAppID:websiteURL:completionHandler:
getAllowedActionForAppCredentialsWithAppID:websiteURL:user:password:completionHandler:
bestDomainForAppID:completionHandler:
bestDomainForAutoFillFromDomains:appID:
getApprovedSharedWebCredentialsEntriesSortedByHighestValueForAppWithAppID:completionHandler:
textSuggestionHeaderForExternalCredential:
hasSuffix:
safari_countOfString:
componentsSeparatedByString:
reverseObjectEnumerator
componentsJoinedByString:
characterAtIndex:
safari_safariCoreBundle
URLForResource:withExtension:
defaultManager
safari_autoFillQuirksDownloadDirectoryURL
initWithBuiltInQuirksURL:downloadsDirectoryURL:resourceName:resourceVersion:updateDateDefaultsKey:updateInterval:
setShouldAttemptToDownloadConfiguration:
beginLoadingQuirksFromDisk
passwordGenerationManager
generatedPasswordMatchingRequirements:
safari_stringByRemovingWwwDotPrefix
defaultRequirementsForDomain:
parsePasswordRules:error:
mergePasswordRuleSet:withPasswordRuleSet:
requirementsForPasswordRuleSet:respectingMinLength:maxLength:
generatedPasswordForAppWithAppID:associatedDomains:passwordRules:confirmPasswordRules:
_passwordGenerationManager
encodeInt64:forKey:
decodeInt64ForKey:
initWithRowIdentifier:serviceIdentifier:serviceIdentifierType:externalRecordIdentifier:user:rank:owningExtensionState:
_domainWithoutWWWDot
copyWithZone:
initWithServiceIdentifier:serviceIdentifierType:externalRecordIdentifier:user:rank:
_rowIdentifier
_serviceIdentifierType
_serviceIdentifier
_externalRecordIdentifier
_rank
_owningExtensionState
initWithEnabledState:supportsIncrementalUpdates:
initWithEnabledState:supportsIncrementalUpdates:localizedDisplayName:containingAppBundleIdentifier:
decodeBoolForKey:
encodeBool:forKey:
isEnabled
supportsIncrementalUpdates
containingAppBundleIdentifier
_enabled
_supportsIncrementalUpdates
_localizedDisplayName
_containingAppBundleIdentifier
safari_stringForKey:
safari_numberForKey:
unsignedIntegerValue
appID
_approved
_domain
_appID
_service
sf_bundleIdentifierForContainingApp
_credentialIdentityStoreForBundleIdentifier:
getPrimaryExtensionWithCompletion:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
removeItemAtURL:error:
getPrimaryCredentialIdentityStoreWithCompletion:
getCredentialIdentityStoreForAppBundleIdentifier:completion:
removeCredentialIdentityStoreForAppBundleIdentifier:completion:
applicationProxyForIdentifier:
dataContainerURL
URLByAppendingPathComponent:
username
canSaveUser:password:forProtectionSpace:highLevelDomain:
saveUser:password:forProtectionSpace:highLevelDomain:
canSavePasswordWithoutConflict:
savePassword:
sharedConnection
addObserver:
_refreshCachedAutoFillRestrictionValues
removeObserver:
autoFillPreferencesDomain
defaultValueForPasswordAndCreditCardAutoFill
boolRestrictionForFeature:
effectiveBoolValueForSetting:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_cachedAutoFillRestrictionValue
_cachedPasswordAutoFillEffectiveValue
isEphemeralMultiUser
defaultCenter
_passwordStoreChangedNotification:
addObserver:selector:name:object:
sortUsingSelector:
_allCachedSuggestedUsersWithType:
value
safari_hasCaseInsensitivePrefix:
suggestedUsersOfType:matchingText:completionHandler:
_cachedSuggestedUsersWithType:matchingText:
_getSuggestedUsersFromSavedPasswords:suggestedEmails:suggestedNonEmails:
dictionary
objectForKeyedSubscript:
usageFrequency
setUsageFrequency:
suggestedUserWithValue:type:
setObject:forKeyedSubscript:
safari_looksLikeEmailAddress
allValues
sortedArrayUsingSelector:
sharedProvider
suggestedUsersOfType:completionHandler:
_suggestedEmails
_suggestedNonEmails
endMatchingExtensions:
dictionaryWithObjects:forKeys:count:
beginMatchingExtensionsWithAttributes:completion:
_updateExtensions:
_notifyObservers:
credentialProviderExtensionManagerExtensionListDidChange:
_extensions
_beginExtensionDiscovery
numberWithInteger:
extensionsWithMatchingAttributes:error:
removeObject:
_endExtensionDiscovery
extensionIsEnabled:
primaryExtension
_plugIn
setUserElection:
containingUrl
localizedContainingName
extensions
objectsPassingTest:
objectForInfoDictionaryKey:
attributes
safari_boolForKey:
setExtension:isEnabled:
displayNameForExtension:
shouldShowConfigurationUIForEnablingExtension:
_extensionMatchingToken
_observers
_errorEncounteredDuringLastExtensionDiscovery
entitlements
identifier
applicationProxyForBundleURL:
entitlementValueForKey:ofClass:
numberWithBool:
userElection
initWithValue:type:
type
_value
_type
_usageFrequency
bundleIdentifier
initWithEncryptedPasswordData:encryptionKeyReference:
encryptedPasswordData
encryptionKeyReference
_encryptedPasswordData
_encryptionKeyReference
_decryptedDataForEncryptedData:encryptionKeyReference:
sharablePasswordFromData:
unarchivedObjectOfClass:fromData:error:
scheme
componentsWithURL:resolvingAgainstBaseURL:
queryItems
name
initWithBase64EncodedString:options:
_encryptionInformationWithNewKey
base64EncodedStringWithOptions:
passwordManagerURLWithDictionary:
setScheme:
queryItemWithName:value:
setQueryItems:
displayName
initWithUsername:password:displayName:highLevelDomain:protectionSpaces:
date
timeIntervalSinceReferenceDate
dataUsingEncoding:
numberWithInt:
dateWithTimeIntervalSinceNow:
archivedDataWithRootObject:requiringSecureCoding:error:
sharablePasswordFromEncryptedData:encryptionKeyReference:
sharablePasswordFromURL:
passwordManagerURL
urlRepresentationForAirDrop
_username
_displayName
_highLevelDomain
_protectionSpaces
SFCredentialProviderExtensionHelperProtocol
SFCredentialProviderExtensionHelperProxy
SFSafariCredential
NSSecureCoding
NSCoding
SFExternalCredentialIdentityStore
SFAutoFillHelperProtocol
NSObject
SFAutoFillHelperProxy
SFDomainAssociationUtilities
SFSafariCredentialStore
SFStrongPasswordGenerator
SFPasswordCredentialIdentity
SFSafariPasswordCredential
NSCopying
SFCredentialProviderExtensionState
SFSharedWebCredentialsDatabaseEntry
SFExternalCredentialIdentityStoreManager
SFSharablePasswordReceiver
SFAutoFillFeatureManager
MCProfileConnectionObserver
SFSuggestedUserProvider
SFCredentialProviderExtensionManager
SFSuggestedUser
SafariFoundationExtras
_SFSharablePasswordEncryptionInformation
SFSharablePassword
v24@0:8@?16
v32@0:8@16@?24
v24@0:8@?<v@?@"SFCredentialProviderExtensionState">16
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"NSArray"16@?<v@?@"SFCredentialProviderExtensionState"@"NSArray">24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
@16@0:8
v16@0:8
@"NSXPCConnection"
B16@0:8
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@48@0:8@16@24@32@40
B24@0:8@16
Q16@0:8
@"NSString"
@"NSDate"
@"<SFSafariPasswordCredential>"
@32@0:8@16q24
v44@0:8B16B20B24q28@?36
i16@0:8
i24@0:8@16
@"WBSSQLiteStatementCache"
@"NSObject<OS_dispatch_queue>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v40@0:8@16@24@?32
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSString"@"NSError">32
v48@0:8@16@24@32@?40
@40@0:8@16@24@32
v56@0:8@16@24@32@40@?48
v60@0:8@16@24@32@40B48@?52
@56@0:8@16@24@32@40^@48
@32@0:8@16@24
B40@0:8@16@24@32
v32@0:8@16@24
@"WBSPasswordGenerationManager"
@24@0:8^{_NSZone=}16
@"NSDate"16@0:8
@64@0:8q16@24q32@40@48q56
@56@0:8@16q24@32@40q48
@72@0:8q16@24q32@40@48q56@64
q24@0:8@16
q16@0:8
v24@0:8q16
@"SFCredentialProviderExtensionState"
@24@0:8B16B20
@40@0:8B16B20@24@32
@44@0:8@16@24q32B40
r^{__CFString=}16@0:8
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
@24@0:8q16
@32@0:8q16@24
v32@0:8q16@?24
v40@0:8q16@24@?32
v40@0:8@16^@24^@32
@"NSArray"
v28@0:8@16B24
@"NSSet"
@"NSMutableOrderedSet"
@"NSData"
@56@0:8@16@24@32@40@48
Failed to get a remote proxy object with error: %{public}@
Failed to open credential identities database with error %ld
Failed to create identities table with error %{public}@
Failed to create index on identities table with error %{public}@
Failed to delete an entry from identities table with error %{public}@
Failed to delete an item from identities table with error %{public}@
Failed to delete entries from identities table with error %{public}@
Failed to vacuum identities table with error %{public}@
Failed to insert an item into identities table with error %{public}@
Failed to update an item of identities table with error %{public}@
Attempted to submit credential with user name that is not a string, got type: %@
Failed to create directory for identities database with error %{public}@
Skipping extension %{public}@ because it is missing the %{public}@ entitlement
Skipping extension %{public}@ because its containing app is missing the %{public}@ entitlement
Error: Multiple credential provider extensions are active. Which one will be used as the primary extension is undefined
Failed to unarchive sharable password with error %{public}@
Failed to create sharable password from URL because it has incorrect scheme
Failed to create sharable password from URL because it's missing data or key reference
Failed to create private key with error: %{public}@
Failed to encrypt password data with error: %{public}@
Failed to get persistent reference to private key with status: %d
Failed to get private key with status %d
Failed to decrypt password data with error %{public}@
