simd_float2x2
simd_float3x2
simd_float4x2
simd_float2x3
simd_float3x3
simd_float4x3
simd_float2x4
simd_float3x4
simd_float4x4
simd_double2x2
simd_double3x2
simd_double4x2
simd_double2x3
simd_double3x3
simd_double4x3
simd_double2x4
simd_double3x4
simd_double4x4
simd_quatf
simd_quatd
simd
float2
float3
float4
double2
double3
double4
int2
int3
int4
uint2
uint3
uint4
/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_simd_Sim/swiftlang-1001.2.45.3/8/simd.swift
Precondition failed
Vector index out of range
/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1001.2.45.3/swift/stdlib/public/core/Integers.swift
Not enough bits to represent the passed value
Fatal error
Unavailable function cannot be called
Requires array of 2 vectors
Column index out of range
Requires array of 3 vectors
Requires array of 4 vectors
simd_double4x2([
simd_double4x3([
simd_double4x4([
simd_quatf(real: 
simd_quatd(real: 
Can't form Range with upperBound < lowerBound
/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1001.2.45.3/swift/stdlib/public/core/Range.swift
Index out of range
/BuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-1001.2.45.3/swift/stdlib/public/core/Collection.swift
Out of bounds: range begins after bounds.upperBound
Out of bounds: range ends before bounds.lowerBound
Out of bounds: range ends after endIndex
Out of bounds: range begins before startIndex
Out of bounds: index > endIndex
Out of bounds: index < startIndex
Out of bounds: index >= endIndex
Only BidirectionalCollections can have end come before start
Only BidirectionalCollections can be advanced by a negative amount
simd_double3x4([
simd_double2x4([
simd_double3x3([
simd_double2x3([
simd_double3x2([
simd_double2x2([
uint4 requires a four-element array
uint3 requires a three-element array
uint2 requires a two-element array
int4 requires a four-element array
int3 requires a three-element array
int2 requires a two-element array
double4 requires a four-element array
double3 requires a three-element array
double2 requires a two-element array
float4 requires a four-element array
float3 requires a three-element array
float2 requires a two-element array
s5SliceVy4simd6float2VG
SIy4simd6float2VG
s16IndexingIteratorVy4simd6float2VG
s5SliceVy4simd6float3VG
SIy4simd6float3VG
s16IndexingIteratorVy4simd6float3VG
s5SliceVy4simd6float4VG
SIy4simd6float4VG
s16IndexingIteratorVy4simd6float4VG
s5SliceVy4simd7double2VG
SIy4simd7double2VG
s16IndexingIteratorVy4simd7double2VG
s5SliceVy4simd7double3VG
SIy4simd7double3VG
s16IndexingIteratorVy4simd7double3VG
s5SliceVy4simd7double4VG
SIy4simd7double4VG
s16IndexingIteratorVy4simd7double4VG
s5Int32V
s5SliceVy4simd4int2VG
SIy4simd4int2VG
s16IndexingIteratorVy4simd4int2VG
s5SliceVy4simd4int3VG
SIy4simd4int3VG
s16IndexingIteratorVy4simd4int3VG
s5SliceVy4simd4int4VG
SIy4simd4int4VG
s16IndexingIteratorVy4simd4int4VG
s6UInt32V
s5SliceVy4simd5uint2VG
SIy4simd5uint2VG
s16IndexingIteratorVy4simd5uint2VG
s5SliceVy4simd5uint3VG
SIy4simd5uint3VG
s16IndexingIteratorVy4simd5uint3VG
s5SliceVy4simd5uint4VG
SIy4simd5uint4VG
s16IndexingIteratorVy4simd5uint4VG
4simd6float2V
$ss25ExpressibleByArrayLiteralP
$ss10CollectionP
$ss8SequenceP
4simd6float3V
4simd6float4V
4simd7double2V
4simd7double3V
4simd7double4V
4simd4int2V
4simd4int3V
4simd4int4V
4simd5uint2V
4simd5uint3V
4simd5uint4V
So13simd_float2x2a
4simd6float2V_ACt
So13simd_float3x2a
4simd6float2V_A2Ct
So13simd_float4x2a
4simd6float2V_A3Ct
So13simd_float2x3a
4simd6float3V_ACt
So13simd_float3x3a
4simd6float3V_A2Ct
So13simd_float4x3a
4simd6float3V_A3Ct
So13simd_float2x4a
4simd6float4V_ACt
So13simd_float3x4a
4simd6float4V_A2Ct
So13simd_float4x4a
4simd6float4V_A3Ct
So14simd_double2x2a
4simd7double2V_ACt
So14simd_double3x2a
4simd7double2V_A2Ct
So14simd_double4x2a
4simd7double2V_A3Ct
So14simd_double2x3a
4simd7double3V_ACt
So14simd_double3x3a
4simd7double3V_A2Ct
So14simd_double4x3a
4simd7double3V_A3Ct
So14simd_double2x4a
4simd7double4V_ACt
So14simd_double3x4a
4simd7double4V_A2Ct
So14simd_double4x4a
4simd7double4V_A3Ct
So10simd_quatfa
So10simd_quatda
ArrayLiteralElement
Element
Index
Iterator
SubSequence
Indices
columns
vector
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>CFBundleIdentifier</key>
        <string>com.apple.dt.runtime.swiftsimd</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundleName</key>
        <string>swiftsimd</string>
        <key>CFBundleShortVersionString</key>
        <string></string>
        <key>CFBundleVersion</key>
        <string></string>
</dict>
</plist>
