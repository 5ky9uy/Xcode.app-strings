IDSDaemon
IDSFoundation
setting up the realtime encryption controller for the unique ID: %@
Warning
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
object
xpc-object
public-keys
object-type
object-context
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
v8@?0
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
com.apple.ids
DeviceHBI
com.apple.conference
forceRandomDeviceHeartbeatInterval
DeviceHeartbeat
forceDeviceHeartbeat
Registration
com.apple.identityservices.device-hbi
vc-temporary-get-dependent-interval
MagnetIso
%c MagnetIso(%s)  Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
UnexpectedState
bytesReceived
bytesSent
packetsReceived
packetsSent
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
cbuuid
T@"NSString",&
deviceUniqueID
linkTypeString
T@"NSString",R,GlinkTypeString
state
headerOverhead
delegate
T@"<IDSLinkDelegate>",W
alternateDelegate
T@"NSString",&,V_cbuuid
T@"NSString",&,V_deviceUniqueID
TQ,R,V_state
T@"<IDSLinkDelegate>",W,V_delegate
T@"<IDSLinkDelegate>",W,V_alternateDelegate
<%@: %p serviceIdentifier: %@, localURI: %@, subscribedURIs: %@>
v16@?0@"NSDictionary"8
v32@?0@"NSString"8@"IDSURI"16@"NSDictionary"24
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
endpointMap
T@"NSMutableDictionary",&,N,V_endpointMap
peerIDManagerToken
T@"NSString",R,N,V_peerIDManagerToken
serviceIdentifier
T@"NSString",R,N,V_serviceIdentifier
localURI
T@"IDSURI",R,N,V_localURI
subscribedURIs
T@"NSArray",R,N,V_subscribedURIs
resolvedEndpointsDidUpdateHandler
T@?,C,N,V_resolvedEndpointsDidUpdateHandler
x-push-cert
Warning, missing %@ to add to %s
dictionary
pnv-retry-count
hardware-version
os-version
software-version
device-name
IMSI
PLMN
test-data
id-preflight
status
mechanisms
mechanism
mechanism-data
SMSLess
protocolVersion
T@"NSString",C,N,V_protocolVersion
phoneNumberValidationRetryCount
T@"NSNumber",C,N,V_phoneNumberValidationRetryCount
hardwareVersion
T@"NSString",C,N,V_hardwareVersion
osVersion
T@"NSString",C,N,V_osVersion
softwareVersion
T@"NSString",C,N,V_softwareVersion
deviceName
T@"NSString",C,N,V_deviceName
T@"NSString",C,N,V_IMSI
T@"NSString",C,N,V_PLMN
testData
T@"NSString",C,N,V_testData
responseStatus
T@"NSNumber",C,N,V_responseStatus
responseMechanisms
T@"NSArray",C,N,V_responseMechanisms
<%p> name %@ instanceID [%s] nextStreamID %u
_serviceNameToStreamIDMap %@
_streamIDToServiceNameMap %@
UTunPeerServiceMap
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
serviceMap[%@ <=> %lu] serviceNameMismatch %@ streamIDMismatch %@ [%@ <=> %lu]
Unexpected streamID %lu found when asked to translate %@
ServiceMap is at maximum capacity! %lu
IDSDelivery-oversized
Previous Remote Instance IDs (next:%d) {%@}
count
com.apple.private.alloy.multiplex1
com.apple.private.alloy.willow
com.apple.identityservicesd.aps
Get Service User ID's Completed with response %@
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
Get Admin Access Tokens Completed with response %@
accessory-id
adminAccessTokenDict
access-token
expiry
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
v32@?0@"NSString"8Q16^B24
IDSDuet
-[IDSDuetInterface forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
%p %s Sending IDS message, no CoreDuet on platform
-[IDSDuetInterface checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
initialSyncClientIDs
T@"NSMutableSet",&,N,V_initialSyncClientIDs
reunionSyncClientIDs
T@"NSMutableSet",&,N,V_reunionSyncClientIDs
T@"<IDSDuetInterfaceDelegate>",W,N,V_delegate
v36@?0I8@"<NSObject>"12^B20^B28
UTun
Assign localCID(%04x) from CID set
Clear localCID(%04x) from CID set
Attempt to clear reserved CID 0, skip.
Link is connected, perform a block.
Cancelling block by ID needs to pass in ID and success var.
Cancel block by ID succeeded: %@
Link is connected, cancel a block.
T@"NSString",C,N,V_cbuuid
T@"NSString",C,N,V_deviceUniqueID
remoteSA
T@"IDSSockAddrWrapper",C,N,V_remoteSA
connectionsByID
T@"NSMutableDictionary",R,&,N,V_connectionsByID
controlChannel
T@"IDSUTunControlChannel",&,N,V_controlChannel
controlChannelCachedSYN
T@"NSData",&,N,V_controlChannelCachedSYN
controlChannelVersion
T@"NSString",&,N,V_controlChannelVersion
highPriorityConnectionSendingSet
T@"NSMutableSet",&,N,V_highPriorityConnectionSendingSet
suspendTraffic
TB,N,V_suspendTraffic
suspendTrafficCheckTime
Td,N,V_suspendTrafficCheckTime
linkLayerConnected
TB,N,V_linkLayerConnected
linkLayerDisconnectTime
Td,N,V_linkLayerDisconnectTime
vifName
T@"NSString",C,N,V_vifName
localSA
T@"IDSSockAddrWrapper",C,N,V_localSA
portMap
T^{IDSPortMap=[1024Q]S},R,N
connectionsTableByLocalRemotePortKey
T^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i},R,N
outgoingEncryptionTableBySSRC
incomingEncryptionTableBySSRC
utunSocket
Ti,N,V_utunSocket
selfInstanceID
T^[16C],R,N
instanceID
T^[16C],N
capabilityFlags
TQ,N,V_capabilityFlags
serviceMinCompatibilityVersion
TS,N,V_serviceMinCompatibilityVersion
shouldUseIPsecLink
TB,N,V_shouldUseIPsecLink
serviceConnector
T@"NSObject<OS_nw_service_connector>",&,N,V_serviceConnector
serviceConnectionCache
T@"NSMutableDictionary",R,&,N,V_serviceConnectionCache
Engram Error
v24@?0@"IDSMPFullAccountIdentityCluster"8Q16
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1171.53.12/IDSAgent/IDSAccountIdentityElector.m
currentCluster.groupID
![newServiceTypeNames containsObject:serviceTypeName]
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke_2
createdCluster.groupID
v24@?0@"IDSCloudKitKeyElectionStoreItem"8@"NSError"16
-[IDSAccountIdentityElector _createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:]
[oldCluster isParentOfCluster:newCluster]
newPublicCluster
[oldPublicCluster isParentOfCluster:newPublicCluster]
v32@?0@"IDSGroupServerKeyElectionStoreItem"8@"ENGroupID"16@"NSError"24
v24@?0@"IDSMPFullAccountIdentityCluster"8@"NSError"16
keychainElectionStore
T@"IDSKeychainKeyElectionStore",R,N,V_keychainElectionStore
cloudKitElectionStore
T@"IDSCloudKitKeyElectionStore",R,N,V_cloudKitElectionStore
groupServerElectionStore
T@"IDSGroupServerKeyElectionStore",R,N,V_groupServerElectionStore
user
T@"IDSPhoneUser",R,N,V_user
phoneSignature
T@"NSData",R,N,V_phoneSignature
certificateSigningRequest
T@"NSData",R,N,V_certificateSigningRequest
pushToken
T@"NSData",R,N,V_pushToken
Tq,R,N,V_status
authenticationCertificate
T@"IDSAuthenticationCertificate",R,N,V_authenticationCertificate
__kIDSRegistrationKeyManagerPrivateIdentityRebuiltNotification
__kIDSRegistrationKeyManagerPrivateIdentityGeneratedNotification
__kIDSRegistrationKeyManagerKeychainMigrationComplete
__kIDSRegistrationKeyManagerSavedGeneratedClassKeys
message-protection-key
message-protection-public-data-registered
ForceRefreshIdentityWithServer
PurgePreviousIdentityInterval
RegenerateIdentityInterval
com.apple.identityservicesd.identity-purge
com.apple.identityservicesd.identity-regenerate
IDSDDatabase
Setting IDSOutgoingMessage property %d of %d
New message record [%@] has ID [%lld].
IMDSpotlight
Done with IDSOutgoingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
v16@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND pending_delete = 0 LIMIT 1;
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND alternate_guid = ? AND pending_delete = 0 LIMIT 1;
v32@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I}16^{CSDBSqliteStatement=^{CSDBSqliteConnection}^{sqlite3_stmt}i}24
SELECT DISTINCT account_guid FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND bypass_duet = 0 AND pending_delete = 0 
AND duet_identifiers IS NOT NULL 
AND message_type 
LIMIT ?
v24@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I}16
SELECT duet_identifiers FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND bypass_duet = 0 AND pending_delete = 0 AND account_guid = ? 
SELECT SUM(stored_size) FROM outgoing_message WHERE pending_delete = 0 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid
SELECT account_guid, MAX(sum_stored_size) FROM (SELECT account_guid, SUM(stored_size) AS sum_stored_size FROM outgoing_message WHERE pending_delete = 0 GROUP BY account_guid ) 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid ORDER BY count(ROWID) DESC LIMIT 1 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress FROM outgoing_message 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress FROM outgoing_message 
ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress 
ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress 
WHERE pending_delete = 0 AND guid = ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid = ? 
AND local_destination_device_uuid = ? 
AND local_destination_device_uuid is null 
WHERE is_sent = 0 AND pending_delete = 0 AND expiration_date > 0 AND expiration_date <= ? LIMIT ? 
SELECT DISTINCT account_guid FROM outgoing_message WHERE is_sent = 0 AND pending_delete = 0 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
LIMIT ? 
NULL accountGUIDs passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriority(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL)
AND priority = ? 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriorityAndType(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL, int64_t, BOOL *)
AND message_type = ? 
NULL accountGUID passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimit(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL)
SELECT DISTINCT 
 FROM (   SELECT 
  FROM outgoing_message o   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC   LIMIT ? ) AS ofilt WHERE (SELECT SUM(stored_size) FROM outgoing_message s where s.ROWID <= ofilt.ROWID) <= ? UNION SELECT 
 FROM outgoing_message   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC LIMIT 1 ) 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimitWithTypes(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL, NSArray *__strong)
WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND account_guid = ? 
AND bypass_duet = 0 
ORDER BY ROWID ASC LIMIT ?
UPDATE outgoing_message SET is_sent = ? WHERE guid = ?
UPDATE outgoing_message SET is_sent = 0
Empty/nil accountGUIDs passed to %s
void IDSOutgoingMessageRecordUpdateLocalDestinationDeviceOnAccountsWithUUIDs(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET local_destination_device_uuid = ? WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
void IDSOutgoingMessageRecordUpdatePendingDeleteOnAccountsWithDeviceUUID(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET pending_delete = 1 WHERE local_destination_device_uuid = ? AND account_guid 
WHERE pending_delete = 1 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND enqueued_date > 0 AND enqueued_date <= ? AND local_destination_device_uuid IS NOT NULL AND local_destination_device_uuid != ? LIMIT ? 
InternalMigration
IDSOutgoingMessageRecord
Deleting postponed message GUIDs
IDSOutgoingMessageRecordDeleteMessage %@ alternateGUID %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress FROM outgoing_message WHERE guid = ? AND alternate_guid = ? ORDER BY ROWID ASC;
Could not delete outgoing message from database. Postponing delete. Guid: %@  AlternateGuid: %@
INSERT OR IGNORE INTO outgoing_messages_to_delete (data_protection_class, guid%s;
) VALUES (?, ?)
, alternate_guid) VALUES (?, ?, ?)
Could not postpone delete.
IDSOutgoingMessageRecordDeleteMessageWithQueueOneIdentifier %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress FROM outgoing_message WHERE queue_one_identifier = ? ORDER BY ROWID ASC;
IDSOutgoingMessageRecordDeleteMessagesForAccount %@
DELETE FROM outgoing_message WHERE account_guid = ? 
Attempted to get record identifier for NULL message record: %@
Attempted to get record identifier for NULL record: %@
NULL message passed to %s
CFStringRef IDSOutgoingMessageRecordCopyGUID(CFAllocatorRef, IDSOutgoingMessageRecordRef, IDSDatabase *__strong)
CFStringRef IDSOutgoingMessageRecordCopyGUIDUnlocked(CFAllocatorRef, IDSOutgoingMessageRecordRef, IDSDatabase *__strong)
CFStringRef IDSOutgoingMessageRecordCopyAccountGUID(CFAllocatorRef, IDSOutgoingMessageRecordRef, IDSDatabase *__strong)
int64_t IDSOutgoingMessageRecordGetDate(IDSOutgoingMessageRecordRef, IDSDatabase *__strong)
void IDSOutgoingMessageRecordBulkCopy(IDSOutgoingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, int64_t *, BOOL *, CFDataRef *, CFDataRef *, int64_t *, int64_t *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, CFDataRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, int64_t *, int64_t *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, IDSDatabase *__strong)
<IDSOutgoingMessageRecord %p [%p]>{}
guid
alternate_guid
account_guid
from_identifier
message_data
data
protobuf_data
destinations
data_to_encrypt
encrypt_payload
compress_payload
use_top_level_dict
wants_response
expiration_date
command
wants_delivery_status
delivery_status_context
message_uuid
priority
date
is_sent
identifier
forced_local
peer_response_identifier
expects_peer_response
wants_app_ack
non_waking
fire_and_forget
stored_size
duet_identifiers
bypass_duet
queue_one_identifier
enforce_remote_timeout
main_account_guid
pending_delete
local_destination_device_uuid
enqueued_date
message_type
skip_self
non_cloud_waking
live_delivery
require_bluetooth
require_local_wifi
wants_progress
Database
_IDSOutgoingMessageRecordCreate()
outgoing_message
packetBuffer
T^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]},R,N,V_packetBuffer
metadata
Tr*,R,N,V_metadata
metadataSize
TI,R,N,V_metadataSize
transportType
Tq,R,N,V_transportType
clientReady
TB,N,V_clientReady
closed
TB,R,N,V_closed
verboseFunctionalLogging
TB,N,V_verboseFunctionalLogging
verbosePerformanceLogging
TB,N,V_verbosePerformanceLogging
uuid
T@"NSUUID",C,N,SsetUUID:,V_uuid
readHandler
T@?,C,N,V_readHandler
writeHandler
T@?,C,N,V_writeHandler
packetBufferHandler
T@?,C,N,V_packetBufferHandler
hasMetadata
TB,R,N,V_hasMetadata
cachedDataForClient
T@"NSMutableArray",&,N,V_cachedDataForClient
excessiveCachingReportCounter
Ti,N,V_excessiveCachingReportCounter
excessiveCachingCount
Ti,N,V_excessiveCachingCount
destination
T@"NSString",R,N,V_destination
FTMessageDelivery
IDSAgent
%@ instance created with a dead file descriptor!
v12@?0B8
%@ endSession at %@!
SPConnection
%p: reset the stall detector
originalMessage
v32@?0@8Q16^B24
Error %d received on socket
Remote side closed the connection, cleaning up
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
v16@?0@"<IDSSocketPairConnectionDelegate>"8
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
idsotr
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
remainingFragments
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending socket
Failed to queue outgoing data - possible message fragmentation issue
socket timeout, ignoring...
got send error %d, cleaning up...
totalFragmentCount
fragmentedMessageID
%@ removing socket %d from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
isConnected
TB,R,N
isEmpty
fragmentationSize
TI,N
inFlightMessageCount
TQ,R,N
inFlightMessageCountLowWaterMark
TQ,N
inFlightMessages
T@"NSSet",R,N
maxAllowedMessageSize
TI,N,V_maxAllowedMessageSize
connectionID
T@"NSString",C,N,V_connectionID
lastSocketActivityTime
Td,R,N
outgoingStallDetector
T@"IDSStallDetector",&,N,V_outgoingStallDetector
Accounts
primaryAccount
personID
dsid
IDSSystemAccountAdapterErrorDomain
<%@: %p username: %@, DSID: %@>
username
T@"NSString",R,N,V_username
DSID
T@"NSString",R,N,V_DSID
B16@?0@"ACAccount"8
v24@?0@"ACAccount"8@"NSError"16
D:%@
ACAccountTypeIdentifierAppleAccount
ACAccountTypeIdentifieriTunesStore
x-ds-vetting-token
Email
Search
Attempt
pS: %llu pR: %llu bS: %llu bR: %llu
TQ,N,V_packetsSent
TQ,N,V_packetsReceived
TQ,N,V_bytesSent
TQ,N,V_bytesReceived
x-id-sub-service
x-service-user-id
user-id
user-handle
tokens
id-get-user-token
access-tokens
subService
T@"NSString",C,V_subService
serviceUserID
T@"NSString",C,V_serviceUserID
userID
T@"NSString",C,V_userID
userHandle
T@"NSString",C,V_userHandle
accessoryRequests
T@"NSArray",C,V_accessoryRequests
responseAccessTokens
T@"NSArray",C,V_responseAccessTokens
/System/Library/IdentityServices/Plugins/com.apple.NanoRegistry.bundle
com.apple.IDS.IDSNanoRegistryPluginManager.callbackQ
IDSNanoRegistryPluginManager
Bundle has no principal class
Failed to initialize bundle
Plugin initialized successfully
Plugin failed to initialize
Plugin does not conform to protocol
callbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_callbackQueue
pluginImplementsWatchDidStartAdvertising
TB,N,V_pluginImplementsWatchDidStartAdvertising
pluginImplementsWatchDidStopAdvertising
TB,N,V_pluginImplementsWatchDidStopAdvertising
peripheralManagers
T@"NSMutableArray",&,N,V_peripheralManagers
plugin
T@"<IDSPluginNanoRegistryProtocol>",&,N,V_plugin
Server Heartbeat
Need to re-register now
forceHeartbeat
com.apple.identityservices.registration-hbi
registrationHBI
forceRandomHeartbeatInterval
forceHeartbeatInterval
vc-registration-hbi
vc-profile-get-default-invitation-context
Default invitation context response: %@
region-id
base-phone-number
extra
validated
responseRegionID
T@"NSString",C,V_responseRegionID
responseBasePhoneNumber
T@"NSString",C,V_responseBasePhoneNumber
responseExtraInfo
T@"NSDictionary",C,V_responseExtraInfo
responseValidated
TB,V_responseValidated
PipePeripheralUUID
UTunPeer
Initing IDSUTunPeer %p
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@
incoming:%@
outgoing:%@
 Deallocing UTunPeer %p
%@ ignoring btuuid update from %@ to %@
localDeliveryQueueStatMessageCount
localDeliveryQueueStatBytes
localDeliveryQueueStatDeliveredMessageCount
localDeliveryQueueStatDeliveredBytes
localDeliveryQueueStatsLastDeliveredTime
IDSLocalOutgoingMessageBytes
IDSLocalOutgoingMessages
IDSLocalIncomingMessageBytes
IDSLocalIncomingMessages
URGENT
Default
Sync
IDSLocalStatisticsCategory
-[IDSUTunPeer _powerlogDictionaryForPriority:]
%s: self %p reporting stats for %@ %@
IDS Local Network Stats
IDSLocalOutgoingSocketBytes
IDSLocalOutgoingSocketPackets
IDSLocalIncomingSocketBytes
IDSLocalIncomingSocketPackets
Sockets
IDSUTunPeer
-[IDSUTunPeer _powerlogDictionaryForSockets]
%s: self %p reporting stats for sockets %@
Enabling power logging for transport stats
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
UTunConnection
enable urgent cloud connection %@.
enable default cloud connection %@.
enable sync cloud connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable cloud connection for peer %@:%p withReason %ld
Client Request
Idle Remove
IDSServicePrefersInfraWifi
Reason
InfraWiFiState
Services
IDS Local InfraWiFi Request
InfraWiFi
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
sendMessage: %@ priority: %@ messageType: %@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ Enqueuing message %@ on %@ connection %@
sync
default
urgent
urgent Cloud
default Cloud
sync Cloud
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Told to enable urgent cloud, but we are allready enabled
Enabling urgent Cloud Connection on this peer 
Told to enable default cloud, but we are allready enabled
Enabling default Cloud Connection on this peer 
Told to enable sync cloud, but we are allready enabled
Enabling sync Cloud Connection on this peer 
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
gl-cloud-msg-disable-interval
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
localSetupInProgress
TB,N,V_localSetupInProgress
T@"<IDSUTunPeerDelegate>",W,N,V_delegate
btUUID
T@"NSString",C,N,V_btUUID
uniqueID
T@"NSString",C,N,V_uniqueID
originalbtUUID
T@"NSString",C,N,V_originalbtUUID
isDefaultPairedDevice
TB,N,V_isDefaultPairedDevice
isNearby
TB,N,V_isNearby
isMagnetIndicatingPeerIsAwake
TB,N,V_isMagnetIndicatingPeerIsAwake
isPeerAlwaysConnected
TB,N,V_isPeerAlwaysConnected
isCloudConnected
TB,N,V_isCloudConnected
supportsCloudUrgentConnection
TB,N,V_supportsCloudUrgentConnection
supportsCloudDefaultConnection
TB,N,V_supportsCloudDefaultConnection
supportsCloudSyncConnection
TB,N,V_supportsCloudSyncConnection
pendingCloudUrgentEnable
TB,N,V_pendingCloudUrgentEnable
pendingCloudDefaultEnable
TB,N,V_pendingCloudDefaultEnable
pendingCloudSyncEnable
TB,N,V_pendingCloudSyncEnable
T@"NSString",R,N,V_identifier
sendingMessageStatistics
T@"NSDictionary",R,N
urgentPriorityMessageStatistics
urgentCloudPriorityMessageStatistics
defaultPriorityMessageStatistics
syncPriorityMessageStatistics
continuityConnectCount
Ti,N,V_continuityConnectCount
id-authenticate-%@
realm-user-id
authentication-data
x-protocol-version
x-ds-client-id
IDS Authentication response: %@
cert
alert
realm
T@"NSString",C,V_realm
T@"NSData",C,V_csr
authenticationInfo
T@"NSDictionary",C,V_authenticationInfo
responseUserID
T@"NSString",C,V_responseUserID
responseCertificate
T@"NSData",C,V_responseCertificate
IDSKeychainWrapperErrorDomain
IDSKeychainWrapperErrorOSStatus
isUnderFirstDataProtectionLock
IDSKeychainWrapper
Loading IDS keychain data with account %@
  => We need a keychain unlock, not loading anything!
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
  => We need a keychain migration, not saving anything!
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
systemMonitor
T@"<IDSKeychainWrapperSystemMonitor>",&,N,V_systemMonitor
listeners
T@"NSHashTable",&,N,V_listeners
isAvailable
com.apple.IDSRegistrationController
%s: Unable to create preferences handle: %s
-[IDSRegistrationController init]
Failed to create dynamic store
kScreenSharingChangedNotification
kiMessageChangedNotification
kFaceTimeChangedNotification
kCallingChangedNotification
*** Lockdown state is expired, not allowing registration
signature
Exception: %@ in handler: %@ while executing: %@
com.apple.madrid
com.apple.ess
%s (%@)
-[IDSRegistrationController center:succeededRegistration:]
Succeeded HTTP registration with info: %@
-[IDSRegistrationController center:allSucceededRegistrations:]
All succeeded HTTP registrations: %@
-[IDSRegistrationController center:succeededIdentification:phoneNumber:token:]
Succeeded SMS identification with info: %@
-[IDSRegistrationController center:failedIdentification:error:]
Failed SMS identification with info: %@ error: %d
-[IDSRegistrationController center:succeededIDSAuthentication:]
Succeeded IDS Authentication with info: %@
-[IDSRegistrationController center:succeededCurrentEmailsRequest:emailInfo:]
Succeeded Validated Email Query info: %@    Emails: %@
-[IDSRegistrationController center:failedCurrentEmailsRequest:error:info:]
Failed Validated Email Query info: %@  Info: %@
-[IDSRegistrationController center:succeededInitialRegionQuery:]
Succeeded Initial Region Query info: %@
-[IDSRegistrationController center:failedAuthentication:error:info:]
registration info: %@   error: %d  info: %@
-[IDSRegistrationController center:succeededLinkHandlesConfirmation:emailAddress:]
succeeded email confirmation: %@
-[IDSRegistrationController center:noteRegistrationRequired:]
noteRegistrationRequired: %@
*** Lockdown state is expired, ignoring
@16@?0@8
keychainWrapper
T@"IDSKeychainWrapper",&,N,V_keychainWrapper
trackedRegistrations
T@"NSArray",R,N,V_trackedRegistrations
authenticatedRegistrations
T@"NSArray",R,N,V_authenticatedRegistrations
activeRegistrations
T@"NSArray",R,N,V_activeRegistrations
activeRegistrationsToRegister
T@"NSArray",R,N
AggregateMessage
removing token %@ from %@
IDSDelivery
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature for message %@: blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
v32@?0@8@16^B24
sourcePeerID
T@"NSString",C,V_sourcePeerID
encryptionType
T@"NSString",C,V_encryptionType
messageID
T@"NSString",C,V_messageID
targetService
T@"NSString",C,V_targetService
T@"NSNumber",C,V_priority
expirationDate
T@"NSDate",C,V_expirationDate
fromIdentity
T@"NSData",C,V_fromIdentity
additionalDictionary
T@"NSDictionary",C,V_additionalDictionary
individualPeerMessages
T@"NSMutableSet",&,V_individualPeerMessages
pendingResponseTokens
T@"NSMutableSet",&,V_pendingResponseTokens
maxSize
Tq,V_maxSize
currentSize
Tq,V_currentSize
fireAndForget
TB,V_fireAndForget
hasReceivedAPSDAck
TB,V_hasReceivedAPSDAck
chunkNumber
T@"NSNumber",C,V_chunkNumber
isFinalMessage
TB,V_isFinalMessage
groupPayload
T@"NSData",C,N,V_groupPayload
groupIdentifer
T@"NSData",C,N,V_groupIdentifer
useTransportZone
TB,V_useTransportZone
params
participantID
T@"NSNumber",&,N,V_participantID
participantData
T@"NSData",&,N,V_participantData
publishedStreams
T@"NSArray",&,N,V_publishedStreams
subscribedStreams
T@"NSDictionary",&,N,V_subscribedStreams
maxConcurrentStreams
T@"NSNumber",&,N,V_maxConcurrentStreams
generationCounter
T@"NSNumber",&,N,V_generationCounter
urisToParticipantIDs
T@"NSDictionary",&,N,V_urisToParticipantIDs
clientContextData
T@"NSData",&,N,V_clientContextData
relaySessionID
T@"NSString",&,N,V_relaySessionID
dictionaryRepresentation
IDSPreflightStack { IMSI: %@, PLMN: %@, mechanisms: %@ }
validationMechanisms
T@"NSArray",R,N,V_validationMechanisms
T@"NSString",R,N,V_IMSI
T@"NSString",R,N,V_PLMN
IDSDSession
*** options : %@
[!] This session will be suppressing client notifications { _uniqueID: %@ }
SessionUseQRDirectly
SessionFunctionalLogging
SessionPerformanceLogging
inbox.appleid.apple.com
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
com.apple.private.alloy.phonecontinuity
QuickRelay is enabled for service: %@, session: %@.
phone_enableQR
useBTDatagramPipe
QuickRelay is disabled for service: %@, session: %@.
SessionBypassUTun
UTun bypass: %@ service: %@, session: %@.
com.apple.private.alloy.screensharing
com.apple.ids.Session-ConnectionQueue-%@
com.apple.private.alloy.facetime.mw
com.apple.private.alloy.facetime.multi
com.apple.private.alloy.facetime.video
com.apple.private.alloy.facetime.audio
com.apple.private.alloy.willow.stream
com.apple.private.alloy.safeview
com.apple.private.alloy.tincan.audio
use QR directly for %@.
Could not create APS Connection for session
outgoing
incoming
Created session (%@) %@ with destinations %@
QuickRelayLinkProtocol
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
IDSDSession::dealloc for %@
Destroyed session %@
<%p> - uniqueID: %@   accountID: %@   service: %@   destinations: %@   transportType: %@
Reliable
Unreliable
-[IDSDSession _cleanupSessionConnection]
%s: session %@ connection %p
Looking for device unique ID in: %@
  => Push token: %@
    => Found unique ID: %@
  => No unique ID found
Looking for device token in: %@
  => No token found
device:
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
%@ - No account with unique ID %@ found to send a message, bailing...
    My token -> %@
No destinations to send message to, ignoring...
sendMessage - using fromID %@ given aliases %@  destinations: %@
Sent message to %@
isLegacyOverride: %d
@16@?0@"NSString"8
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
v32@?0@"NSArray"8@"NSArray"16@"NSDictionary"24
Message %@ got response code %lu error %@ lastCall %@
v16@?0@"IDSDeliveryContext"8
This Phone Continuity session supports the local message. Trying the local...
Have %lu cached client data to send
session:
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
%@-%@
SessionLogDumpSimulateCrash
SessionLogDumpSysdiagnose
SessionLogDumpPacketCapture
SessionLogDumplskq
SessionLogDumplsof
Added cachedData - total %lu cached client data to send
IDSClientChannel has excessively cached too many packets
IDSClientChannel
%p: writeHandler: IDSDSession %p
generateClientChannelDataTest
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
v24@?0@"NSString"8@"IDSClientChannel"16
Not sending invitation because of missing uniqueID
message
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
connectQRServer failed due to invalid parameter.
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
sessionInfoCopy
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
Connect to QR server succeeded for %@.
Cannot fan out the join notification to the group, no groupID!
v16@?0@"NSError"8
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
options
allocateOptions
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
IDSDataChannels
<%@> read returned 0 bytes errno %d
ClientChannel read error %@
The client left the group session. IDSGroupSession can be removed.
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
B36@?0^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}8r^v16I24@"NSError"28
v24@?0Q8Q16
socket %d connected to IDSClientChannel %p
ClientChannel read error %@, _state %d
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
Adding sessionInfo data (size: %lu)
Couldn't decode kClientChannelMetadataType_SessionInfoKey bytes into NSDictionary
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
Couldn't create NSUUID for kClientChannelMetadataType_TimeDeltaBetweenFirstPacketAndMKIKey.
Unknown metadata type: %u
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
UnexpectedSendResult
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
No legacy connection, bailing...
Got connection data %@, _isLegacy %@
Failed to get connection data with error %@, _isLegacy %@
v24@?0@"NSData"8@"NSError"16
Trying to send invite to inactive device, ignoring %@...
Using local account, can only send invitation to active device, ignoring %@...
destinations %@ newDestinations %@ pairedDestinations %@ allOtherDestinations %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Creating connection data, _isLegacy: %@
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
We are the receiver, we can only DECLINE the invite, not CANCEL
Sending CANCEL %@, %@ <%@>
Sending unauthenticated public identity {localUnauthenticatedFullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
Malloc error when creating key material, ending call...
v24@?0^v8Q16
acceptInvitationWithData isWithDefaultDevice (%@) _enableQuickRelay (%@), _useQRDirectly (%@), _isFaceTime(%@)
No remote blob, bailing...
acceptInvitationWithData remoteBlob %@
Failed to get legacy connection data with error %@
At ACCEPT invitaion - from %@, session %@, expecting remote device encryption but remote does not specify
Failed to get local connection data, bailing...
Sending unauthenticated public identity {publicIdentity: %{private}@}
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Sending MESSAGE to %@, %@ <%@>
Ignoring incoming accept from %@, session is not waiting for an invite response anymore
Unauthenticated invitation accept missing public key, bailing...
No participantID, bailing...
No message version, bailing...
Setting peer protocol version to %d
Adding %@ to set to cancel
Canceling invitations to %@
Starting legacy connection with remote blob
Starting connection with remote blob
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
Ignoring Decline from %@, %@, not in destinations: %@
Invite was declined { givenReason: %u }
Invite was declined with reason alias deactivated { fromID: %@, _inviteTokens: %@ }
Suppressing decline, other recipients
Invite was declined, notifying everyone I invited: %@
Received CANCEL %@ from %@, %@
Ignoring CANCEL from %@, %@, not in destinations: %@
Received MESSAGE %@ from %@, %@
Received END %@ from %@, %@
Sending REINITIATE (subcommand %@) %@ to %@, %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Clearing invitation timeout timer
Setting invite timeout to %f seconds
SessionInviteTimeout
Session invite timed out after %f seconds
Clearing connection timeout timer
Setting connection timeout to %f seconds
SessionConnectionTimeout
Session connection timed out after %f seconds
Clearing end session timeout timer
Setting end session timeout to %f seconds
EndSessionTimeout
End session timed out after %f seconds
Clearing session packet loss timer
Setting session packet loss timer to %f seconds
PacketLossTimer
guest-device:
v20@?0B8@"NSData"12
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
set initial link type %d for session %@.
sessionID
session-initial-link-type
utunOptions
protocol
Made options to open socket %@
sessionStartWithSocketDescriptor socketDescriptor %d
session-device-socket
openSocketToDevice deviceID %@, _useQRDirectly %@, _isFaceTime %@
open socket for session
v16@?0^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}8
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
v64@?0@"NSString"8Q16^[16C]24S32i36Q40@"NSObject<OS_nw_connection>"48@"NSError"56
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
disconnectGlobalLink failed with error %@
Cleanup session: %@
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
Ending session with data
Sending END to %@, %@ <%@>
Ending session
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
Releasing the client channel %p
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Session: %@ received error: %@
Invalid error type posted to session: %@   error: %@    class: %@
Ignoring error, we're already dead anyway!
Enabling audio ? %@
Muting ? %@
Setting preferences %@
Setting invite timeout to: %d
%@ session did start %@ with error %@
%@ session did stop with error %@
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
Resetting preferences for service %{public}@
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
destinationsContainFromID: %@ is not in the destinations %@
Updated destinations for group %@ to %@ (triggeredLocally %@)
Participant query in process or defaults are not set for hardcoded QR session info, _groupID: %@, _destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
allocatorOptions
sessionInfoFromDefaults
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
newOptions
newLinkOptions
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
Received the new MKM %lld milleseconds after the membership change event for group %@
v24@?0@"NSError"8@"NSDictionary"16
participant-id to push token mapping changed for sessionID: %@, participants: %@
Allocation failure for session %@, status = %d, code = %d
<%@> getActiveParticipants - Couldn't look up the URI for participant ID %@
localUnauthenticatedFullIdentity
T@"IDSMPFullLegacyIdentity",&,N,V_localUnauthenticatedFullIdentity
remoteUnauthenticatedPublicIdentity
T@"IDSMPPublicLegacyIdentity",&,N,V_remoteUnauthenticatedPublicIdentity
T@"IDSDestination",&,N,V_destination
clientID
T@"NSString",&,N,V_clientID
clientType
Tq,R,N,V_clientType
T@"NSSet",R,N,V_destinations
fromID
T@"NSString",R,N,V_fromID
T@"NSString",R,N,V_uniqueID
T@"NSString",R,N,V_participantID
remoteBlob
T@"NSData",&,N,V_remoteBlob
accountID
T@"NSString",R,N,V_accountID
TI,R,N,V_state
isLegacy
TB,R,N,V_isLegacy
isInitiator
TB,R,N,V_isInitiator
disallowWifiInterface
TB,R,N,V_disallowWifiInterface
disallowCellularInterface
TB,R,N,V_disallowCellularInterface
groupID
T@"NSString",R,N,V_groupID
keyMaterial
T*,R,N
SSRCRecv
TI,N,V_SSRCRecv
seqRecvStart
TS,N,V_seqRecvStart
enableQuickRelay
TB,R,N,V_enableQuickRelay
enableSKE
TB,R,N,V_enableSKE
remoteUseCloudPairedControlChannel
T@"NSNumber",&,N,V_remoteUseCloudPairedControlChannel
remoteUsePhoneContinuityLocalMessage
T@"NSNumber",&,N,V_remoteUsePhoneContinuityLocalMessage
quickRelaySessionToken
T@"NSData",&,N,V_quickRelaySessionToken
qrReason
T@"NSNumber",&,N,V_qrReason
qrError
T@"NSNumber",&,N,V_qrError
previousAccessToken
T@"NSString",&,N,V_previousAccessToken
previousRelayIP
T@"NSString",&,N,V_previousRelayIP
QRAllocator
 invalid port %d
broadcastID
Tq,N,V_broadcastID
broadcastBlock
T@?,C,N,V_broadcastBlock
broadcastNeedsClientAck
TB,N,V_broadcastNeedsClientAck
broadcastPerformed
TB,N,V_broadcastPerformed
transient
TB,N,V_transient
messageUUID
T@"NSString",&,N,V_messageUUID
messagePriority
Tq,N,V_messagePriority
messageSenderID
T@"NSString",&,N,V_messageSenderID
messageSequenceNumber
TI,N,V_messageSequenceNumber
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_RemoveAllPair
IDSSockAddrPairTable_RemovePair - found no match for [%s-%s]
IDSSockAddrPairTable_RemovePair - removed [%s-%s], remaining %d pairs.
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
SATbl
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
IDSDaemonShutdownNotification
com.apple.identityservicesd
ids-persistent-map-metadata
ids-persistent-map
versionNumber
supportsSecureCoding
TB,R
Tq,R,N,V_versionNumber
@"NSMutableDictionary"24@?0@"NSDictionary"8q16
com.apple.ids.persistent-map.%@.read-write
com.apple.ids.persistent-map.%@.persist
-[IDSPersistentMap setObject:forKey:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1171.53.12/IDSAgent/IDSPersistentMap.m
key && obj
-[IDSPersistentMap removeObjectForKey:]
IDSPersistentMap
We're not loaded; ignoring save to disk for cache %@
-[IDSPersistentMap setObject:forKeyedSubscript:]
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@
  => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
com.apple.identityservices.%@
concurrentReadWriteQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_concurrentReadWriteQueue
serialPersistQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialPersistQueue
saveTimer
T@"NSObject<OS_dispatch_source>",&,N,V_saveTimer
writeCoalescingDelay
Td,N,V_writeCoalescingDelay
writeCoalescingLeeway
Td,N,V_writeCoalescingLeeway
migrationBlock
T@?,C,N,V_migrationBlock
persister
T@"<IDSPersistentMapPersister>",&,N,V_persister
decodableClasses
T@"NSSet",&,N,V_decodableClasses
isLoaded
TB,R,N,V_isLoaded
cachedMap
T@"NSMutableDictionary",R,N,V_cachedMap
com.apple.ids.IDSDGroupStatusNotificationController
GroupStatusNotificationController
Cannot get participantsForGroupID, no groupID!
GroupStatusNotification-oversize
participantsForGroupID %@ are %@
yyyy-MM-dd HH:mm:ssz
en_US
messageDict
Sent messageID %@ to the destination %@ command %@ (account %@, fromID %@, message %@)
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
v16@?0@"<IDSDaemonListenerProtocol>"8
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
v48@?0@"NSString"8@"NSDictionary"16@"NSString"24B32@"NSDictionary"36B44
Cannot find the push tokens, missing recipientIDs.
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
groups
T@"NSMutableSet",R,N,V_groups
events
T@"NSMutableDictionary",R,N,V_events
groupMemberPushTokens
T@"NSMutableDictionary",R,N,V_groupMemberPushTokens
No auth token
auth token
No profile ID
profile-id
profileInfo
x-vc-profile-id
x-vc-auth-token
Profile response: %@
profileID
T@"NSString",C,N,V_profileID
authToken
T@"NSString",C,N,V_authToken
pushPrivateKey
T^{__SecKey=},N,V_pushKey
pushPublicKey
T^{__SecKey=},N,V_pushPublicKey
pushCertificate
T@"NSData",C,N,V_pushCert
T@"NSData",C,N,V_pushToken
Traffic
*** Clearing traffic ***
global-%u
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
outgoing-messages
outgoing-fallback-messages
-fallback
peer%@-message-budget-global-daily-%u
     Server daily global%@ budget is: %@   Current count is: %@
     **** we are over budget
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
peer%@-message-budget-daily-%@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
peer%@-message-budget-default-daily-%u
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     No budget specified
outgoing-server-messages
server-message-budget-daily-%@
     Server daily budget is: %@   Current count is: %@
query-requests
query-ui-budget-daily-%@
queries
query-budget-daily-%@
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
incoming-messages
incoming-local-messages
WatchPairing
Finishing up switching
Calling completion block to finish switching
isQuickSwitching
identityservicesd
v16@?0@8
v28@?0B8@"NSArray"12@"NSError"20
IDSKeychainKeyElectionStoreErrorDomain
clusterData
group-pai-%@-%@
v20@?0B8@"NSError"12
T@"IDSKeychainWrapper",R,N,V_keychainWrapper
T@"NSDictionary",R,N,V_dictionaryRepresentation
v32@?0@"NSString"8@"NSData"16@"NSString"24
clientDatas
T@"NSDictionary",&,N,V_clientDatas
fullAccountIdentityCluster
T@"IDSMPFullAccountIdentityCluster",&,N,V_fullAccountIdentityCluster
userIDsForEngramAccountIdentities
T@"NSSet",&,N,V_userIDsForEngramAccountIdentities
BTLE
IDSBTLELink
setHasSpaceAvailable %@
didReceiveData length %luB
BTLELink
Received data too big (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
%c BTLE      (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
linkID
T@"NSString",R,V_linkID
innerDictionary
auth-token
id-validate-credentials
origin
authenticationDataSig
T@"NSData",C,V_authenticationDataSig
authenticationDataAuthToken
T@"NSString",C,V_authenticationDataAuthToken
authenticationDataUserID
T@"NSString",C,V_authenticationDataUserID
responseMessage
T@"NSString",C,V_responseMessage
T@"NSNumber",C,V_responseStatus
responseOrigin
T@"NSNumber",C,V_responseOrigin
v16@?0@"CUTAsyncReducerState"8
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1171.53.12/IDSAgent/IDSRapportDeliveryController.m
<Unknown File>
Any single bonjour message send shouldn't fail the whole send operation
v16@?0@"CUTResult"8
rapportClient
T@"<IDSRapportDeliveryControllerRapportClient>",&,N,V_rapportClient
T@"<IDSRapportDeliveryControllerDelegate>",W,N,V_delegate
targetSessionToken
T@"NSData",C,V_targetSessionToken
targetPeerID
T@"NSString",C,V_targetPeerID
targetToken
T@"NSData",C,V_targetToken
encryptedData
T@"NSData",C,V_encryptedData
hello (controlChannelVersion: [%@], productName: [%@], productVersion: [%@], productBuildVersion: [%@], model: [%@], protocol: %@ minCompatibilityVersion: %@ maxCompatibilityVersion: %@ deviceUniqueID: %@ instanceID: %@)
IDSNetworking
%@: control message: hello cannot decode controlChannelVersion
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
T@"NSString",C,V_controlChannelVersion
productName
T@"NSString",C,V_productName
productVersion
T@"NSString",C,V_productVersion
productBuildVersion
T@"NSString",C,V_productBuildVersion
model
T@"NSString",C,V_model
pairingProtocolVersion
T@"NSNumber",C,V_pairingProtocolVersion
minCompatibilityVersion
T@"NSNumber",C,V_minCompatibilityVersion
maxCompatibilityVersion
T@"NSNumber",C,V_maxCompatibilityVersion
T@"NSNumber",C,V_capabilityFlags
T@"NSNumber",C,V_serviceMinCompatibilityVersion
T@"NSUUID",C,V_instanceID
T@"NSUUID",C,V_deviceUniqueID
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
%@-%ld
Registration Control item was not present in the keychain
Registration Control can't be loaded because of a keychain error %d.
version
v24@?0@"ENGroup"8@"NSError"16
v48@?0@"IDSGroupPutMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
v16@?0@"NSArray"8
v48@?0@"IDSGroupGetMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
Unepxcted account key class. Expected IDSAccountIdentity
Unexpected cypher class. Expected IDSConversationGroupCypher
Unepxcted device key class. Expected IDSDeviceIdentity
groupServer
T@"IDSGroupServer",&,N,V_groupServer
forwarding-sig
<%@ %p key: %@, groupID: %@, data.length: %@, signature.length: %@>
publicKeyData
T@"NSData",&,N,V_publicKeyData
T@"NSData",&,N,V_data
T@"NSData",&,N,V_signature
T@"ENGroupID",&,N,V_groupID
forwardingTicket
T@"NSData",&,N,V_forwardingTicket
paired-devices
schema-version
name
entitlements
notificationServices
capabilities
bundleID
reg-update-limit
reg-update-time-limit
System is shutting down, not creating daemon
identityservicesd launched (%@) user: %d
May 25 2018
21:34:29
    (build time %s %s)
com.apple.homeKit-cloud-relay
Got id query completed with updates %@ fromURI %@ service %@ success %@ error %@
v44@?0@"NSDictionary"8@"NSString"16@"NSString"24B32@"NSError"36
Opening up the grant MIG port
Opening up the NSXPC Interface
Now accepting query grants, setup complete
Sysdiagnose
Daemon listener history
Sysdiagnose-oversized
Listener %@:%@ registered %@ with capabilities %@ bundleID %@
for entitlements %@
and notification services %@
@"NSString"8@?0
Resetting preferences to 0 for all services
dummyService
/Library/IdentityServices/delete/
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
======================================================================
===== Listener Information ===========================================
     Listener ID: %@ (%d:%@)
   Remote Object: %@
    Local Object: %@
    Entitlements: %@
        Commands: %@
    Capabilities: %@
      Bundle IDs: %@
===================================
agentRequested
TimingLogs
IDSAgent took %f seconds to launch
serviceInfo
enabledAccountsInfo
dependentDevices
deviceIdentifier
activeDeviceUniqueID
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
services
commands
processName
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
com.apple.healthd
Exception generating setup information for listener: %@
context
v16@?0Q8
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Exception performing validated listener block: %@
Tried to remove nil listener object
Removing listener ID: %@
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
callservicesd
assistantd
com.apple.private.alloy.siri.proxy
companion_proxy
com.apple.private.alloy.companionproxy
Starting push handling with services %@   topics: %@
Updating push handling with services %@  topics: %@
Updating local push handling with topics: %@
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
com.apple.private.ac
com.apple.private.alloy.accountssync
com.apple.private.alloy.health.sync.classc
com.apple.private.alloy.fitnessfriends.icloud
com.apple.private.alloy.fitnessfriends.imessage
v32@?0@"IDSIncomingMessageBroadcast"8Q16^B24
Broadcast: outgoing generic notification %lld
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
B16@?0q8
Broadcast: done working on outgoing notification id %lld
v16@?0@"NSObject<OS_xpc_object>"8
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
IDSClientWake
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
v32@?0@"NSString"8@"NSMutableArray"16^B24
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
idstool
accountsd
Allowing wildcard access
IDS access warning: %@ for service: %@ entitlement: %@ client: %@:%@:%d entitlements: %@
IDS access warning: %@ for service: %@ entitlement: %@ account: %@ entitlements: %@
############### Service not found
############### Unknown entitlement type
############### No entitlements found
v24@?0@"NSDictionary"8@"IMLocalObject"16
Granting access %d to listener: %@ pid: %d entitlements: %@
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
-[IDSDaemon registerForNotificationsOnServices:messageContext:]_block_invoke
%s: received client request to change notification services from %@ to %@ 
socket
socket-type
session-socket
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
raw-socket
Incorrect objet type passed in as file descriptor
service
completionHandlerID
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
device-socket
metrics
error
closesocket [%@]
v40@?0Q8Q16Q24Q32
syncMessagesStats
defaultMessagesStats
urgentMessagesStats
urgentCloudMessagesStats
sendingMessageStats
queuedIncomingMessages
linkStats
Broadcasting delivery stats to client
Non-dsBased account used self alias as fromURI! Defaulting to enabled alias - %lu available.
Accepting Incoming Grant Requests
IDSDaemonMIGInterface auth port died: %@
v24@?0@"NSObject<OS_xpc_object>"8@"NSObject<OS_xpc_object>"16
Incoming peer auth grant request
IDSDaemonMIGInterface: Could not create server with name: %@
_IDSDaemonRunningNotifyToken
T@"<IDSDaemonMIGInterfaceDelegate>",W,V_delegate
IDSDaemonMIGInterface
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
setup-request
received message from peer(%d): %s
portName
setupInfo
response
Incoming file descriptor request
received unknown from peer(%d): %s
anonymizedSenderID
T@"NSString",C,V_anonymizedSenderID
wantsDeliveryStatus
T@"NSNumber",C,V_wantsDeliveryStatus
completionBlock
T@?,C,V_completionBlock
ackBlock
T@?,C,V_ackBlock
T@"<IDSDGroupContextNotifyingObserverDelegate>",&,N,V_delegate
Timestamp
LinkPreferencesManager
updateService: %{public}@, withPreferences: %{public}@.
PacketsPerSecond
InputBytesPerSecond
OutputBytesPerSecond
Intent
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
forceBTClassic
LinkType
IDSEngramKeyStoreErrorDomain
iCloud.com.apple.Engram.Development
kIDSEngramKeyStoreFullDeviceIdentity
Engram key election failed
v40@?0@"IDSMPFullAccountIdentityCluster"8@"IDSMPFullServiceIdentityAdmin"16@"IDSMPFullServiceIdentitySigning"24@"NSError"32
Device is not currently in Keychain Sync Circle. Ensure your device has iCloud Keychain Sync enabled and device is not under first unlock
Engram is disabled on this device
Engram is disabled on this device. Update UserDefaults as described in IMUserDefaults
No registered account identity. Please re-register
Cluster missing full admin identity with type A
Cluster missing public admin identity with type A
Unable to extract device identity from serialized data
Account key rolling not implemented
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
seal
T@"CUTPromiseSeal",&,N,V_seal
ckContainer
T@"IDSCloudKitContainer",R,N,V_ckContainer
deviceKey
T@"NSData",R,N,V_deviceKey
%p <Control channel: uniqueID[%@] pendingReceive[%d] pendingSend[%d] outgoingMessages[%d] outgoingPriorityMessages[%d] encrypting[%u (pl:%u pr:%u)>
control channel simulating decryption failure ############### - close socket / call receive handler
control channel cannot use socket: -1
UTunController control channel for [%@] connected for read (getsockopt=%d error=%d: %s)
control channel receiving control message..
UTunController control channel for [%@] disconnected on recv: errno=%d: %s
UTunController control channel for [%@] disconnected on recv: connection closed
none
disabled
default paired PK
default paired none
remote UNENCRYPTED
remote PK
v44@?0@"NSData"8q16B24@"NSData"28q36
cloud paired PK
Dispatch receiveHandler
receiveHandler is being called, so ignore this one
control channel failed to decrypt (%s) of control channel data: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
control channel decrypted (%s) new message (%@, size=%lu  data: %@) (from %lu)
control channel corruption detection heuristic hit - resetting
UTunController control channel for [%{public}@] connected for write (getsockopt=%d error=%d: %s)
control channel sending control message.. (have %lu)
UTunController control channel for [%@] disconnected on send: errno=%d: %s
control channel sent 0 bytes - try again later (%d)
control channel sent %ld bytes (%lu left) (s:%d)
control channel finished sending bytes but no message to remove
control channel finished sending bytes no more message send pending
Clearing %@
control channel suspending (%d) awaiting default paired encryption negotiation
control channel failed to encrypt (%s) message [%@] error: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
control channel encrypted (%s) new message (%p, size=%lu original size=%u  data: %@) (_sendingPriorityMessage: %d)
Handle Fairplay authentication failure...
identityPair
T@"IDSUTunControlChannelIdentityPair",&,N,V_identityPair
remoteDeviceEncryptionInfo
T@"NSDictionary",C,N,V_remoteDeviceEncryptionInfo
disableEncryption
TB,N,V_disableEncryption
isDefaultPairedDeviceStartingToEncrypt
isReadyForEncrypting
TB,N,V_isReadyForEncrypting
isDefaultPairedDevicePairedLocally
TB,N,V_isDefaultPairedDevicePairedLocally
isDefaultPairedDevicePairedRemotely
TB,N,V_isDefaultPairedDevicePairedRemotely
didReceiveReestablishmentRequest
TB,N,V_didReceiveReestablishmentRequest
reestablishmentRequestReceiveTime
Td,N,V_reestablishmentRequestReceiveTime
checksumEnabled
TB,N,V_checksumEnabled
connected
avoidMainQueueOverrideToNO
TB,N,V_avoidMainQueueOverrideToNO
<%@:%p local: %@ remote: %@>
localFullIdentity
T@"IDSMPFullLegacyIdentity",R,N,V_localFullIdentity
remotePublicIdentity
T@"IDSMPPublicLegacyIdentity",R,N,V_remotePublicIdentity
NotifySMS
Unknown
unknown error
no error
bad invitation context
alias in use
no aliases set
alias not available
alias legacy or not active
not authorized
unconfirmed alias
server registration unsupported
invalid login
invalid password
login failed
account update needed
new password needed
permanently blocked
temporarily blocked
no device id
no push token
registration cancelled
not supported
denied by user
delivered too many sms
too many sms delivery failures
garbage signature
garbage phone number
server not found
server not available
server error
new signature required
bad signature
bad push token
empty result code
rate limit error
absinthe error
unsupported managed apple id
unsupported managed auditor id
user disabled sms authentication
user disabled sms registration
denied by server
bad credentials
irreparable failure
Messenger
Invitation
com.apple.private.alloy
phone-number
ds-id
v16@?0@?<v@?>8
IDSTTLCache fetch cached object
v32@?0@"NSString"8@"IDSTTLCacheItem"16^B24
backingStore
T@"NSMutableDictionary",&,N,V_backingStore
evictionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_evictionTimer
ttlInSeconds
Td,N,V_ttlInSeconds
multiQueue
T@"IMMultiQueue",&,N,V_multiQueue
T@"<IDSTTLCacheDelegate>",W,N,V_delegate
T@"NSString",&,N,V_key
T@,&,N,V_object
evictionDate
T@"NSDate",&,N,V_evictionDate
vc-profile-validate-invitation-context
Profile validation response: %@
regionID
T@"NSString",C,V_regionID
basePhoneNumber
T@"NSString",C,V_basePhoneNumber
fromURI
toURI
<service:%@,from:%@,to:%@>
hasMatchingURIs
TB,N,V_hasMatchingURIs
T@"NSString",R,N,V_service
T@"IDSURI",R,N,V_fromURI
T@"IDSURI",R,N,V_toURI
IDSValidationSessionErrorDomain
absinthe-v3-enabled
absinthe-baa-option-enabled
absinthe-baa-timeout
<%@ %p isInitializedForSigning: %@, isInitializedForScoring: %@>
absinthe-message
headerDictionary
absinthe-signature
absinthe-serv-key
absinthe-udid
absinthe-serial-number
absinthe-imei
absinthe-meid
true
false
absinthe-v4
absinthe-baa
isInitializedForSigning
stateFlags
Tq,N,V_stateFlags
helloMessage
T@"NSData",C,N,V_helloMessage
UDID
T@"NSString",C,N,V_UDID
serialNumber
T@"NSString",C,N,V_serialNumber
IMEI
T@"NSString",C,N,V_IMEI
MEID
T@"NSString",C,N,V_MEID
scoringNonce
T@"NSData",C,N,V_scoringNonce
BAACert
T@"NSData",C,N,V_BAACert
intermediateRootCert
T@"NSData",C,N,V_intermediateRootCert
isUsingAbsintheV3
isUsingAbsintheV4
isUsingBAA
isInitializedForScoring
resultData
T@"NSData",R,N,V_resultData
serverKey
T@"NSData",R,N,V_serverKey
T@"NSError",R,N,V_error
iMessage
FaceTime
deviceType
Tq,R,N
IDSDAccountController
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
APSConnection
ApplePushService
ids_authkit
IDS-List
InitialRepairInterval
LastRepairInterval
TotalRepairCount
com.apple.private.alloy.biz
Checking %@
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
P:%@
Account matches!
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
com.apple.private.alloy.sms
com.apple.private.alloy.electrictouch
Finished setting up local accounts
B16@?0@"IDSDAccount"8
ImportedLegacyIMAccounts
AuthToken
ActiveAccounts
ImportedLegacyIDSAccounts2
prefDictionary
Persisting %@ accounts
%@%d
ReRegisteredForDevicesv
ReRegisterForAliasRepair
DidCleanLegacyAccountPrefs
%@/Library/Preferences/%@.plist
MigratedToNewDisabledState
GDRRequestMadeForRelayRepair
RemovedServices
v24@?0@"IDSDAccount"8@"IDSDService"16
IDSDAcountController
-[IDSDAccountController loadStoredAccounts]
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
com.apple.private.alloy.maps
FaceTime_temporary
iMessage_temporary
IDS_temporary
@"NSArray"20@?0i8@"NSArray"12
v16@?0@"IDSDAccount"8
nsuuid
push-token
private-device-data
       found push token in: %@
com.apple.private.alloy.icloudpairing
com.apple.ids.deviceproperties
v32@?0@8@"NSDictionary"16^B24
AKAppleIDAuthenticationController
AuthKit
accounts
T@"NSArray",R,N,V_accounts
enabledAccounts
shouldSupressRepairLogic
TB,N,V_shouldSupressRepairLogic
hasHardDeregistered
TB,R,N,V_hasHardDeregistered
phone-registration-retry-interval-seconds
phone-registration-retry-max-interval-seconds
com.apple.imservice.iMessage
com.apple.imservice.FaceTime
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
UDPGlobalLink
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
UDPGlobal
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
phone_traffic_class
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
%c Global    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
localPartyID
T@"NSString",&,N,V_localPartyID
remotePartyID
T@"NSString",&,N,V_remotePartyID
TQ,R,V_headerOverhead
com.apple.private.alloy.itunes
Resetting
Unsupported
Unauthorized
PoweredOff
PoweredOn
WPLinkManager
============= New WPLinkManager %@ starting =============
From LinkManager: created a new WPContinuity instance %@
client instance created
calling continuityDidUpdateState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
UnexpectedType
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
Activity
TetheringTargetPresence
TetheringSourcePresence
IDS phone number authentication SPI requires entitlement: %@
IDSPeerIDManagerFromIdentityUserInfoKey
IDSPeerIDManagerErrorDomain
MessageService
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
v32@?0@"NSString"8@"NSError"16^B24
Missing object %@ or key %@ when changing accountInfo
-[IDSDAccount authenticationChanged]
-[IDSDAccount setupAccountWithCompletionBlock:]
IDSDAccount
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
-[IDSDAccount _writeAccountDefaults:force:]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Registration: %@  Registered: %@  Linked Accounts: %@  Registration Error: %ld]
<%@:%@:%@:%@:%@>
com.apple.private.alloy.bluetoothregistry
com.apple.private.alloy.bluetoothregistryclassc
activeAliases
T@"NSSet",&,N
T@"NSString",R,N
loginID
T@"NSString",&,N
displayName
dsHandle
dsID
T@"IDSDService",R,N
accountType
Ti,R,N
registration
T@"IDSRegistration",R,N,V_registrationInfo
registrationStatus
registrationErrorReason
registrationError
isRegistered
isEnabled
hasEverRegistered
wasDisabledAutomatically
TB,N,V_disabledAutomatically
isUsableForSending
isIssuingDependentCheck
TB,R,N,V_isIssuingDependentCheck
shouldAutoRegisterAllHandles
shouldRegisterUsingDSHandle
accountInfo
T@"NSDictionary",R,N,V_accountInfo
dependentRegistrations
registeredDevices
defaultPairedDependentRegistration
aliasStrings
uris
linkedAccounts
isBeingRemoved
TB,N,V_isBeingRemoved
isUserDisabled
TB,N
pendingDependentCheck
TB,N,V_pendingDependentCheck
superAccount
T@"IDSDAccount",R,N
shouldFilterInactiveAliases
accountSetupInfo
T@"NSDictionary",R,&,N
FaceTime and iMessage
IDSLocalizable
SMS Registration alert title: FaceTime and iMessage
Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert title: iMessage
Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert title: FaceTime
Your carrier may charge for SMS messages used to activate FaceTime.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime.
iCloud
SMS Registration alert title: iCloud
Your carrier may charge for SMS messages used to activate iCloud.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iCloud.
OK Button Title
Cancel
Cancel Button Title
stateMachine
T@"IDSPhoneNumberValidationStateMachine",R,N,V_stateMachine
registrations
T@"NSMutableArray",R,N,V_registrations
handlers
T@"NSMutableArray",R,N,V_handlers
userConsentCompletion
T@?,C,N,V_userConsentCompletion
route
retry-count
engram-id
required-update
sig-algorithm
forwarding-sig-algorithm
id-group-put-key
entries
T@"NSString",C,V_route
T@"NSString",C,V_hardwareVersion
T@"NSString",C,V_osVersion
T@"NSString",C,V_softwareVersion
T@"NSString",C,V_deviceName
engramID
T@"NSData",C,V_engramID
T@"NSNumber",C,V_version
T@"NSData",C,V_key
T@"NSData",C,V_data
requiredUpdate
T@"NSNumber",C,V_requiredUpdate
T@"NSData",C,V_signature
sigAlgorithm
T@"NSString",C,V_sigAlgorithm
forwardingSig
T@"NSData",C,V_forwardingSig
forwardingSigAlgorithm
T@"NSString",C,V_forwardingSigAlgorithm
responseEngramID
T@"NSData",C,V_responseEngramID
responseVersion
T@"NSNumber",C,V_responseVersion
responseEntries
T@"NSArray",C,V_responseEntries
disableService
TB,V_disableService
T@"NSString",&,V_name
active
TB,R,N,V_active
shouldPostNotifications
TB,N,V_shouldPostNotifications
__kIDSRestrictionsChangedNotification
-[IDSPairingManager _notifyDelegatesWithBlock:]
-[IDSPairingManager _notifyDelegatesDevicePairedToDevice:]
v16@?0@"<IDSPairingManagerDelegate>"8
-[IDSPairingManager _notifyDelegatesDeviceUnpairedFromDevice:]
-[IDSPairingManager _requestPairedDeviceInfo]
%@ -- %@
has-regenerated-secured-encryption-keys
-[IDSPairingManager _hasRegeneratedSecuredEncryptionKeys]
regenerated
UTunDelivery_Default_Sync
UTunDelivery_Default_Default
UTunDelivery_Default_Urgent
UTunDelivery_Default_UrgentCloud
-[IDSPairingManager localDevice]
-[IDSPairingManager gatherLocalDeviceInfoWithCompletionBlock:]
-[IDSPairingManager _updatePairedState:]
-[IDSPairingManager addLocalPairedDevice:]
-[IDSPairingManager removeLocalPairedDevice:]
-[IDSPairingManager activatePairedDeviceWithCBUUID:]
-[IDSPairingManager deactivatePairedDevices]
-[IDSPairingManager ensureCommunicationWithActivePairedDeviceIsPossible]
-[IDSPairingManager setPairedDeviceInfo:]
-[IDSPairingManager updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:]
+[IDSPairingManager devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:]
pairedDeviceUUIDString
pairedDeviceUniqueID
pairedDevicePairingProtocolVersion
TI,R,N
pairedDeviceMinCompatibilityVersion
pairedDeviceMaxCompatibilityVersion
pairedDeviceServiceMinCompatibilityVersion
TS,R,N
pairedDevice
pairedDevicePublicKey
T@"NSData",R,N
pairedDevicePublicClassAKey
pairedDevicePublicClassCKey
pairedDevicePushToken
pairedDevicePrivateData
localDevice
isPaired
allPairedUniqueIDs
Not Supported
%@ (%d)
%@%@
phoneNumber
T@"NSString",R,N,V_phoneNumber
next-key
SHA256withECDSA
messageDelivery
T@"<FTMessageDeliveryProtocol>",&,N,V_messageDelivery
pushHandler
T@"<IDSGroupServerPushHandler>",&,N,V_pushHandler
Encryption
Empty data, not encrypting
Public/Private Encryption success!
Public/Private Encryption failed :(
OTR Encryption success!
OTR Encryption failed :(
Engram Encryption success! {cypherIdentifier: %@}
Engram Encryption failed :(
Decryption ignored, nil data given? :(
Encryption specified, returning data
Public/Private decryption success!
Public/Private decryption failed :(
OTR Decryption success!
Decryption
encrypt
decrypt
******************************************************************
*******************  %@ Error ****************************
***Priority: %ld
***    From: %@
***      To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
AOVERCEncryption
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
numberOfSimultaneousOutgoingMessages
APSErrorDomain
IMTransferServicesController
IMTransferServices
appleID
T@"NSString",&,N,V_appleID
T@"NSString",&,N,V_deviceName
deviceModel
T@"NSString",&,N,V_deviceModel
aliases
T@"NSMutableSet",&,N,V_aliases
sessions
T@"NSMutableSet",&,N,V_sessions
serviceTypes
T@"NSMutableSet",&,N,V_serviceTypes
sessionToBlockMap
T@"NSDictionary",&,N,V_sessionToBlockMap
%@ and %@
Multiple service format
Yes Button Title
No Button Title
Add \U201C%@\U201D for %@
Apple ID alert title: Email Detected, arg1: phone number, arg2: service type
This email address was recently added to your Apple ID \U201C%@\U201D on \U201C%@\U201D.
Apple ID alert body: Email link message, arg1: apple ID  arg2: device associated on
This email address was recently added to your Apple ID \U201C%@\U201D.
Apple ID alert body: Email link message, arg1: apple ID
Add %@ for %@?
Apple ID alert title: Phone Number Detected, arg1: phone number, arg2: service type
This phone number was associated with the Apple ID \U201C%@\U201D on \U201C%@\U201D.
Apple ID alert body: Phone number link message, arg1: apple ID, arg2: device name added from
This phone number was associated with the Apple ID \U201C%@\U201D.
Apple ID alert body: Phone number link message, arg1: apple ID
ServerAlerts
hideUsageNotifications
v16@?0@"IMUserNotification"8
Apple ID and phone number
Apple ID
phone number
iCloud and %@
Two service format, iCloud First
iMessage and %@
Two service format, iMessage First
Two service format, iMessage First 
iCloud, iMessage, and FaceTime
Three service format, fixed order
If you recently signed into \U201C%@\U201D you can ignore this notification.
If you recently signed into Device you can ignore this notification. arg1:deviceName
Your %%@ %@ now being used for %%@ on a new %@.
Your accountType(s) are now being used for services(s) on a new DeviceType., arg1: Account Type (Apple ID, phone number, Combination)  arg2: service  name (iCloud, iMessage, Facetime, (any combination)) 
DisableAliasAvailablePopups
**** Suppressing popup for available alias %@
DisableUsedElsewherePopups
**** Suppressing popup for alias %@  is in use on device %@
v36@?0@"NSString"8@"NSString"16@"NSString"24B32
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
v24@?0@"IDSDeviceIdentity"8@"NSError"16
Registering for Registration Account Status Metric
com.apple.ids.registrationaccountstatusmetric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
LocalSetup
-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]
Initial: %s services: %@
-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]
-[IDSDaemon(Account) reunionSyncStartedForServices:requestID:messageContext:]
Reunion: %s services: %@
-[IDSDaemon(Account) reunionSyncCompletedForServices:requestID:messageContext:]
CloudPairing
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Ignoring, no change
iCloud Pairing Added
If this was unexpected, please file a radar (Transport) and attach output of 'idstool dump'. See 17180900 for reference
iCloud Pairing Removed
Sending continuity reset to IDS clients
Attempt to use the Registration Control API's without the correct entitlement, Failing request
Setup
System has left data protection lock: Checking Migration Status
System has left data protection lock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
data-to-encrypt
ids-destination-object
from
from-identity
original-uris
block
will-send-block
use-large-size
one-per-token
reg-props
fake-msg
always-skip-self
disallow-query-refresh
checkpoint-trace
gc-min-version
interesting
T@"NSArray",&,N,V_interesting
requireAll
T@"NSArray",&,N,V_requireAll
lackAll
T@"NSArray",&,N,V_lackAll
Forcing a bag fetch to refresh EN versioning
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
Bad signature for message: %@    blowing peer tokens
Message is destined for an accessory with uri %@
accessory:
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
MessageOnQueue
Pulled message guid %@ out of msg
Couldn't pull message guid out of %@, using %@
Send FT message action (Peers: %@)
GUIDTRACE
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
  All finished message sending message: %@   to: %@ completeSuccess: %@   completeError: %@  remainingGUIDForSend: %@  already ACK'd: %@ SendTimestamp: %@ 
  All finished acks for message: %@   to: %@ completeSuccess: %@   completeError: %@  remainingACKs: %@
 message is bigger than max size, sending as an attachment message with GUID %@. This will require encryption.
Creating Fanout Message
AggregateMessageSend
  => URI: %@
Skipping EN delivery for this token due to local versioning mismatch { myVersion: %ld, bagVersion: %ld , token: %@ }
Skipping EN delivery for this token due to remote versioning mismatch { remoteVersion: %ld, bagVersion: %ld, token: %@ }
Using EN delivery for this token { token: %@, myVersion: %ld, remoteVersion: %ld }
    ** Already sent to this token, skipping
    ** Token %@ lacks interesting property %@
    ** Token %@ lacks required property %@, skipping
    ** Token %@ has property %@ we do not want, skipping
  Finished ack'ing message: %@  to peer: %@   token: %@
v16@?0@"IDSBaseMessage"8
  Finished Individual ack'ing message: %@  to peer: %@   token: %@
  Fanout Message Finished sending message: %@  to peer: %@   token: %@
PeerDelivery
OutgoingMessage
  INDIVIDUAL Fanout message got completion Finished sending message: %@  to peer: %@   token: %@
 Remaining Guid for send %@
 received last 255 for this message, and there are no more messages to send for this one
Were about to skip, but we are the last one in the loop, just send if we need to and go ahead and skip
There is nothing in the fanout message, no need to send it
Creating Fanout Individual Message
 Fanout Individual Message contains %@
 Current Fanout message has size %lu
 This new message has size %lu
 Current Fanout message max size %lu
 Current individual message fits in current fanout message
 Fanout message now contains %lu messages
Message timeout %f is longer than session token timeout %f, capping.
 Current Destination Count %lu
 Total destination count %lu
We have added the last message, lets go ahead and send out now
Fanout message is full, going ahead and sending it
Now creating a new fanout message to replace the old one thats full
v24@?0@"NSData"8q16
 message encryption failure: %@ (Type: %d)
Failed encrypting message %ld
 message encryption success:  Size %u  Max size: %d
 encrypted message is bigger than max size, sending as an attachment message with GUID %@
Sent anything? %@
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
ForceAttachmentMessage
Forcing attachment message default set
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
Attachments
    Wrote data to path: %@
Failed to write wrapped data
Failed to create temporary directory
v32@?0Q8Q16Q24
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
mmcs-owner
mmcs-url
mmcs-signature-hex
idsMessage
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Error cleaning up text attachment path: %@  error: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
Failed uploading attachment file transfer
v76@?0@"NSString"8B16@"NSError"20@"NSString"28@"NSString"36@"NSData"44@"NSString"52@"NSData"60q68
v24@?0@"ENGroupContext"8@"NSError"16
Preparing to send message: %@ to people: %@   (have tokens: %@). People to query %@
IDQuery
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Found messagable people: %@
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
v24@?0@"IDSDestination"8@"NSError"16
Issuing query for: %@   from: %@
Sending IDSMessage: %@  topic: %@
service-max-timeout-%@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
id-check-unknown
x-push-token
x-hardware-version
x-os-version
x-software-version
sender
abusive
delay
OSVersion
T@"NSString",C,V_OSVersion
T@"NSString",C,V_sender
attemptCount
T@"NSNumber",C,V_attemptCount
T@"NSString",C,V_geo
Tq,V_status
TB,V_abusive
Td,V_delay
completionBlocks
T@"NSMutableSet",&,N,V_completionBlocks
Tq,N,V_priority
dataProtectionClass
TI,N,V_dataProtectionClass
expectsPeerResponse
TB,N,V_expectsPeerResponse
wantsAppAck
TB,N,V_wantsAppAck
compressPayload
TB,N,V_compressPayload
compressed
TB,N,V_compressed
nonWaking
TB,N,V_nonWaking
nonCloudWaking
TB,N,V_nonCloudWaking
requireBluetooth
TB,N,V_requireBluetooth
requireLocalWiFi
TB,N,V_requireLocalWiFi
queueOneIdentifier
T@"NSString",C,N,V_queueOneIdentifier
peerResponseIdentifier
T@"NSString",C,N,V_peerResponseIdentifier
payload
T@"NSData",C,N,V_payload
TI,N,V_messageID
timeEnqueued
Td,N,V_timeEnqueued
timeSent
Td,N,V_timeSent
T@"NSString",C,N,V_fromID
topic
T@"NSString",C,N,V_topic
awdTopic
T@"NSString",C,N,V_awdTopic
T@"NSString",C,N,V_messageUUID
T@"NSDate",&,N,V_expirationDate
domainHash
T@"NSNumber",&,N,V_domainHash
T@"NSNumber",&,N,V_command
toDeviceID
T@"NSString",&,N,V_toDeviceID
T@"NSString",&,N,V_toURI
T@?,C,N,V_completionBlock
progressBlock
T@?,C,N,V_progressBlock
fallbackBlock
T@?,C,N,V_fallbackBlock
didFallback
TB,N,V_didFallback
deniedToSend
TB,N,V_deniedToSend
shouldEnforceRemoteTimeout
TB,N,V_shouldEnforceRemoteTimeout
sentMessageDataSize
TQ,N,V_sentMessageDataSize
isDoneSending
TB,R,N,V_fullyAckd
protobuf
T@"IDSProtobuf",&,N,V_protobuf
resourcePath
T@"NSString",&,N,V_resourcePath
resourceMetadata
T@"NSDictionary",&,N,V_resourceMetadata
duetIdentifiersOverride
T@"NSArray",&,N,V_duetIdentifiersOverride
bypassDuet
TB,N,V_bypassDuet
manualQueueRemoval
TB,N,V_manualQueueRemoval
TQ,N,V_minCompatibilityVersion
messageType
Tq,N,V_messageType
messageState
Tq,R,N,V_messageState
underlyingSocketPairMessage
T@"IDSSocketPairMessage",&,N,V_underlyingSocketPairMessage
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Tq,N,V_state
reqCount
TS,N,V_reqCount
localCID
TS,N,V_localCID
remoteCID
TS,N,V_remoteCID
lastSentSeq
TI,N,V_lastSentSeq
lastSentAck
TI,N,V_lastSentAck
v32@?0@8@"IDSUTunPeer"16^B24
UTunDelivery
Received devices with unique ids -> cbuuids %@
v32@?0@"NSString"8@"NSString"16^B24
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
Delivery
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
bt-id
session-id
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
Devlivery
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
v32@?0@"NSString"8@"NSDictionary"16^B24
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
v24@?0@"NSString"8^B16
Got topic set update %@
IDSUTunDeliveryController
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add
UTunDelivery-Default
v32@?0@"NSString"8@"IDSUTunPeer"16^B24
peer nearby state changed: %@    screenLit: %@   uniqueID: %@   map: %@
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
com.apple.IDS.LocalConnectedTime
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
Class C
Class A
Class D
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer nearby changed: %@ -> %@
cloud connectivity changed for default peer: %@.
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Set Enable OTR Timer for 60.0 seconds
OTREnableTimer
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
T@"<IDSUTunDeliveryControllerDelegate>",W,N,V_delegate
isPresent
T@"NSDictionary",R
queuedIncomingMessageDictionary
allowedTrafficClasses
T@"NSSet",&,N,V_allowedTrafficClasses
enableOTR
TB,R,N,V_enableOTR
defaultPeerIsConnected
defaultPeerIsNearby
defaultPeerIsCloudConnected
lastCloudConnectedTime
Td,N,V_lastCloudConnectedTime
NSXPC
Daemon XPC Interface Up
com.apple.identityservicesd.nsxpc.auth
Incoming Daemon XPC Interface with new connection %@
DaemonProxy
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
listener
T@"NSXPCListener",&,N,V_listener
connection
T@"NSXPCConnection",&,N,V_connection
observer
T@"IDSDGroupContextNotifyingObserver",&,N,V_observer
observerProxies
T@"NSMutableArray",&,N,V_observerProxies
SessionController
Building Message delivery
com.apple.invitation-service
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Sender doesn't support alias deactivated decline, dropping
Couldn't create session for invite, bailing...
This invitation should be filtered { toID: %@, sessionUniqueID: %@ }
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Process incoming session %@ accept message
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Process incoming session %@ decline message
Enqueuing incoming session cancel block from %@ with key %@
Process incoming session %@ cancel message
Enqueuing incoming session message block from %@ with key %@
Process incoming session %@ session message
Enqueuing incoming session end block from %@ with key %@
Process incoming session %@ end message
Enqueuing incoming session reinitiate block from %@ with key %@
Process incoming session %@ reinitiate teardown message
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Storing the master key material %{private}@ for %@ token %@
Storing the public key %{private}@ for %@ token %@
Process incoming group session %@ session message
Couldn't find the session %@ to clean up!
Cleaning up session %@
IDSDSessionController
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
v32@?0@"IDSDSession"8Q16^B24
IDSDaemonClientID
IDSSessionController
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
Updating critical reliability, any sessions need critical state: %@
T@"FTMessageDelivery",R,V_messageDelivery
ForceRegistration
ForceSMSRegistration
expiry-epoch-milli-sec
setup-phone-auth-enabled
md-ids-gdr-day-limit
performedGDROverrides
last24PeriodGDRPerformed
forcedgdrcount
-[IDSDAccount(Registration) _rebuildRegistrationInfo:]
phone-number-registration
is-user-visible
-[IDSDAccount(Registration) _reregisterAndReProvision]
-[IDSDAccount(Registration) _removeAuthenticationCredentialsIncludingAuthToken:]
-[IDSDAccount(Registration) _reregisterAndReidentify:]
ForcePurgeRegistrationData
AppleID
Phone Number
Couldn't get bag url
-[IDSDAccount(Registration) _authenticateAccount]
-[IDSDAccount(Registration) authenticateAccount]
-[IDSDAccount(Registration) _registerAccount]
com.apple.identityservicesd-backup-check
-[IDSDAccount(Registration) registerAccount]
-[IDSDAccount(Registration) _unregisterAccount]
-[IDSDAccount(Registration) unregisterAccount]
-[IDSDAccount(Registration) passwordUpdated]
-[IDSDAccount(Registration) updateAuthorizationCredentials:token:]
-[IDSDAccount(Registration) handler:pushTokenChanged:]
-[IDSDAccount(Registration) handler:reloadBag:]
handles
v24@?0@"NSArray"8@"NSString"16
v36@?0@"IDSRegistration"8q16B24@"NSDictionary"28
-[IDSDAccount(Registration) handler:profile:deviceUpdated:service:]
-[IDSDAccount(Registration) handler:profileHandlesUpdated:status:]
-[IDSDAccount(Registration) center:succeededIdentification:phoneNumber:token:]
Succeeded SMS identification with info: %@    number: %@  token: %@
-[IDSDAccount(Registration) registrationController:registrationWillStart:]
-[IDSDAccount(Registration) registrationController:registrationUpdated:]
-[IDSDAccount(Registration) registrationController:registrationSucceeded:]
-[IDSDAccount(Registration) registrationController:registrationFailed:error:info:]
Disabled
Too many SMS attempts, you can re-enable this in Preferences
-[IDSDAccount(Registration) registrationController:deregistrationWillStart:]
-[IDSDAccount(Registration) registrationController:deregistrationSucceeded:]
-[IDSDAccount(Registration) center:startedAuthenticating:]
-[IDSDAccount(Registration) center:succeededAuthentication:]
-[IDSDAccount(Registration) center:failedAuthentication:error:info:]
-[IDSDAccount(Registration) center:succeededLinkHandlesConfirmation:emailAddress:]
-[IDSDAccount(Registration) center:succeededEmailValidationRequest:emailAddress:]
-[IDSDAccount(Registration) center:succeededUnlinkHandleRequest:handle:]
-[IDSDAccount(Registration) center:failedUnlinkHandleRequest:handle:error:info:]
-[IDSDAccount(Registration) center:failedLinkHandlesConfirmation:emailAddress:error:info:]
-[IDSDAccount(Registration) center:failedEmailValidationRequest:emailAddress:error:info:]
-[IDSDAccount(Registration) center:succeededCurrentEmailsRequest:emailInfo:]
-[IDSDAccount(Registration) center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:]
-[IDSDAccount(Registration) center:failedRegionValidation:error:info:]
-[IDSDAccount(Registration) _validateAliases:validateAlreadyValid:]
B16@?0@8
-[IDSDAccount(Registration) _validateAliases:]
-[IDSDAccount(Registration) validateAliases:]
-[IDSDAccount(Registration) _unvalidateAliases:]
-[IDSDAccount(Registration) unvalidateAliases:]
-[IDSDAccount(Registration) deactivateAndPurgeIdentify]
-[IDSDAccount(Registration) validateProfile]
ForcedGDR
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
ACAccountStore
accountController
T@"IDSDAccountController",R,N,V_accountController
serviceController
T@"IDSDServiceController",R,N,V_serviceController
passwordManager
T@"<FTPasswordManager>",R,N,V_passwordManager
iTunes
Invalid
ACAccountTypeIdentifierIdentityServices
ServerStorage
We allready have an inflight request for topic %@, checking if we have a backup
We allready have a backup request for topic %@, throwing this request away
We allready have an inflight request for this topic %@, adding it to the backup que
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
Topic %@, has timed out waiting for server response
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
deliveryController
T@"IDSDeliveryController",&,N,V_deliveryController
  iLen=%d KS=[%s]
 In=[%s]
 Out=[%s]
SRTPEnc (SSRC==%08lX,SEQ=%u):
SRTPDec (SSRC==%08lX,SEQ=%u):
SRTP
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
CCCrypt failed with status: %d
  counters: [%s]
personal-public-key-cache
personal-public-key-cache-v1
personal-public-key-cache-v2
personal-public-key-cache-v3
personal-public-key-cache-v4
====== Personal Key Cache:
   Device ID: %@    Public Key: %@
deviceID
T@"NSString",&,N,V_deviceID
publicKey
T@"NSData",&,N,V_publicKey
PublicKeyStore
Removing key {pushToken: %@}
peerIDManager
T@"IDSPeerIDManager",&,N,V_peerIDManager
T@"IDSDAccountController",&,N,V_accountController
lock
T{_opaque_pthread_mutex_t=q[56c]},N,V_lock
cache
T@"IDSPublicKeyStorageCache",&,N,V_cache
hasAllPublicKeys
hasCapabilityFlags
isActive
isPairing
privateData
publicClassAKey
publicClassCKey
publicClassDKey
mailto:__localURI__@__local__URI.com
-[IDSPairedDevice initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:]
-[IDSPairedDevice initWithPairedDevice:capabilityFlags:]
-[IDSPairedDevice initWithPairedDevice:deviceInfoPayload:]
-[IDSPairedDevice initWithPairedDevice:isActive:]
%@ _pairingProtocolVersion=%@ _minCompatibilityVersion=%@ _maxCompatibilityVersion=%@ _serviceMinCompatibilityVersion=%@ _capabilityFlags=%@ _properties=%@
%@ _uuid=%@ _cbuuid=%@ _isActive=%@ _pairingProtocolVersion=%@ _minCompatibilityVersion=%@ _serviceMinCompatibilityVersion=%@ _maxCompatibilityVersion=%@ _capabilityFlags=%@
buildVersion
shortDescription
Missing push certificate
push cert
Missing push token
push token
id-register
validation-data
account-keys
language
device-score
device-score-nonce
Registration response: %@
next-hbi
T@"NSString",C,V_language
privateDeviceData
T@"NSDictionary",C,V_privateDeviceData
accountKeys
T@"NSArray",C,V_accountKeys
T@"NSArray",C,V_services
validationData
T@"NSData",C,V_validationData
deviceScore
T@"NSData",C,V_deviceScore
deviceScoreNonce
T@"NSString",C,V_deviceScoreNonce
responseServices
T@"NSArray",C,V_responseServices
responseHBI
T@"NSNumber",C,V_responseHBI
com.apple.facetime
auth-certs
sms-signatures
com.apple.identityservices.keychain-manager
%@V%d
KeychainManager
FTServices
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Not saving, got a nil dictionary representation
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Reloading registration objects from keychain dictionary, %d entries
migrated-v0-dictionary
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
type
main-id
Setting IDS auth cert: %p   for ID: %@
phone-number-registration-main-id
Returning SMS main ID: %@   signature: %@
Setting SMS main ID: %@   signature: %@
T@"NSArray",R,C,D,N
AllowiMessage
AllowsFaceTimeAudio
DisableFaceTimeMultiway
vc-disable-ft-mw
coreTelephonyClient
T@"CoreTelephonyClient",R,N,V_coreTelephonyClient
supportedServicesToken
Ti,N,V_supportedServicesToken
(Daemon) Told to add a paired device %@
(Daemon) Notifying client paired device added: %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device.
Notifying client paired device deleted: %@
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)   (requestID: %@)   (localObject %@)
Responding to local device info query: %@
Broadcasting local device info to client
Responding to paired device info query: %@
Broadcasting paired device info to client
IDSAppleIDSRegistrationErrorDomain
userAgent
T@"NSString",C
retryInAirplaneMode
logToRegistration
currentMessage
T@"IDSBaseMessage",R
queuedMessages
T@"NSArray",R
com.apple.invitation-registration
v16@?0@"IDSRegistrationCenter"8
v32@?0@"IDSMPFullDeviceIdentity"8@"IDSMPFullAccountIdentityCluster"16@"NSError"24
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
IDS Authentication failure
IDS registration failure
Email query failure
com.apple.registration
overrideRegistrationResponseCode
overrideRegistrationResponseAlert
registerCodeOverride
phoneUserCodeOverrideService
restoredFromBackup
users
client-data
public-message-identity-key
phoneUserCodeOverride
emailUserCodeOverrideService
emailUserCodeOverride
Registration SUCCESS for %@ on %@
Bad signature, need to send SMS
deregistration
deregister
register
Sending IDS %@
&amp;amp;
&amp;quot;
&amp;#39;
&amp;gt;
&amp;lt;
com.apple.private.alloy.telephonyutilitiestemporary
com.apple.private.alloy.mediaidstest
com.apple.private.alloy.callhistorysynctemporary
com.apple.private.alloy.musictemporary
sub-services
userDictionary
v16@?0@"IDSClientDataResult"8
Sending IDS deregistration
hard deregister
info
overrideProvisionResponseCode
provisionCodeOverride
IDS Authentication failed: %d
Sending IDS Authentication request
UNKNOWN
Need to re-authenticate
Email query failed
sendAuthenticateRegistrationTask
T@"CUTDeferredTaskQueue",R,N,V_sendAuthenticateRegistrationTask
sendRegistrationTask
T@"CUTDeferredTaskQueue",R,N,V_sendRegistrationTask
sendDeregistrationTask
T@"CUTDeferredTaskQueue",R,N,V_sendDeregistrationTask
cleanupAbsintheTask
T@"CUTDeferredTaskQueue",R,N,V_cleanupAbsintheTask
action
button
Contact Support...
http://www.apple.com/support/validation/?code=4739-4725-5203&lang=en-us
body
If this is a new Apple ID, you do not need to create another one. To use this Apple ID with iMessage, contact iMessage support with the code below.
Customer Code: 4739-4725-5203
Close
title
Your Apple ID "hello@icloud.com" can't be used to set up iMessage at this time.
feather
light
heavy
weight
x-id-service
x-required-for-message
x-result-expected
id-query
Missing self identity
self URI
Missing uris
Handle ID query response: %@
results
T@"NSArray",C,SsetURIs:,V_uris
T@"NSString",C,V_weight
responseIdentities
T@"NSDictionary",C,V_responseIdentities
requiredForMessaging
T@"NSString",C,V_requiredForMessaging
resultExpected
TB,V_resultExpected
LinkManager
added mapping device ID [%@] to destination [%@]
        %s
%7d %s
%3llu msgs %sB pending, %5llu msgs %sB processed
Total
%3llu msgs %sB pending, %5llu msgs %sB processed
None
%5lld pkts %5lld KB  %5llu pkts %5llu KB
%5lld pkts %5lld KB  %5llu pkts %5llu KB
============= New LinkManager %@ starting =============
com.apple.demo-settings
StoreDemoMode
FProgramNumber
ReportFileOpenTimeInterval
FixedInterface
FixedInterfaceDestination
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
packetsDropped
total
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
=======================================================
closed FIFO file %s
                            Since last report (for %.1fs)
Cumulative total
  Combined              Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
                   Dropped %6llu pkts                       %6llu pkts
Streaming Usage Statistics:
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Connected
Disconnected
LinkReport
Sync priority messages queued:
Sync priority messages queued: %@
Default priority messages queued:
Default priority messages queued: %@
Urgent priority messages queued:
Urgent priority messages queued: %@
Urgent Cloud priority messages queued:
Urgent Cloud priority messages queued: %@
Messages being sent:
Messages being sent: %@
Incoming messages not claimed yet:
Incoming messages not claimed yet:
%3llu msgs
%3llu msgs
Total
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
ids-report.
%s%s
removing old fifo file %s
%s%s%u
IDSLinkBTKey
IDSLinkBTDatagramKey
IDSLinkBTLEKey
IDSLinkLocalUDPKey
IDSLinkGlobalUDPKey
IDSLinkGlobalKey
IDSLinkNoneKey
_suspendBTLink %@ -> %@
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending defaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending defaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending defaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
DisableRangeExtension
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
(prefer) 
(reply) 
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
will bring up WiFi when losing BTLink
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
(reply)
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
down
don't 
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
NoLink
Link type changed from %lu to %lu, current link: %@
IDSLinkType
IDS Local Link
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
linkOptions
@"NSString"72@?0@"NSString"8I16@"NSString"20q28S36Q40S48I52@"NSData"56B64B68
v32@?0I8I12I16I20Q24
v24@?0@"NSString"8@"NSString"16
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
a BT/BTLE link
removing %@ from links for device %@
%@ is still connecting or connected.
com.apple.idslinkmanager.networkinterfacelistener
State:/Network/Interface/[^/]+/IPv[46]
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
LOCAL-SETUP-STARTED
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
_deviceIDToGlobalLinkUp
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
Set alternateDelegate %@ for %@
No GlobalLink is found.
GlobalLink
disconnectGlobalLinkForDevice for  %@
_deviceIDToAllocRequests
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
there is no link for sendSKEData
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
currentCellularSignalStrength - sessionID %@.
get session info for group %@, session %@, options %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
receive session-info for group %@, session %@, success:%@.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
State:/Network/Interface/utun
State:/Network/Interface/pdp_ip
Addresses
_handleNetworkChanges %@ = %@
/IPv4
/IPv6
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
None
Magnet
InfraWifi
QuickRelayWiFi
QuickRelayWWAN
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
currentDefaultDeviceLinkType
TQ,R,N,V_currentDefaultDeviceLinkType
t:%@
kDefaultMultiQueueKey
ids-message
v16@?0@"RPCompanionLinkDevice"8
v24@?0@"NSDictionary"8@"NSDictionary"16
init
v32@?0@"RPCompanionLinkClient"8@"NSString"16@"NSError"24
v16@?0@"<IDSRapportClientDelegate>"8
guest-device:%@
v16@?0@"RPCompanionLinkClient"8
We failed to find a rapport destination for the provided deviceIdentifier
RPCompanionLinkClient
Rapport
companionLinkClient
T@"RPCompanionLinkClient",R,N,V_companionLinkClient
ttlCache
T@"IDSTTLCache",&,N,V_ttlCache
RPOptionAllowUnauthenticated
RPOptionSenderID
vc-profile-validate-handle
Validate handles query response: %@
vetting-status
T@"NSString",C,SsetURI:,V_uri
responseVettingStatus
T@"NSNumber",C,V_responseVettingStatus
Initing UTunConnection %@ %p
Deallocing UTunConnection %@ %p
B32@?0@8Q16^B24
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed to %@ %@
com.apple.private.alloy.continuity
Removing continuity message %@
WPConnection failed
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
-[IDSUTunConnection _nonThreadSafeStopConnection]
%p: %s
idstest
localdelivery
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
new local link established
UTunDelivery-Default-Urgent
kUTunConnectionDefaultUrgentOutgoingDetectorName
set the socket detector for %@
UTunDelivery-Default-Default
kUTunConnectionDefaultDefaultOutgoingDetectorName
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
@"NSData"24@?0@"NSData"8@"NSString"16
@"NSData"16@?0@"IDSSocketPairMessage"8
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
v32@?0@"IDSSocketPairMessage"8Q16^B24
%@ Failed to open UTun socket, waiting...
 (non waking)
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
queue one identifier
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Client Canceled
All queues are empty
Clearing fallback stickiness due to: %@
expiration
DisableCloudFallback
   **** cloud fallback disabled ****
ids-local-cloud-fallback-delay
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
timed out
%@ sending resource transfer cancel message %@
No in flight messages remaining
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
v32@?0@"IDSLocalDeliveryMessage"8Q16^B24
remote does not support new service
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
v24@?0@"IDSSocketPairMessage"8^B16
v32@?0@"NSArray"8Q16^B24
DisableLocalDelivery
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection %@ (%@, messageCount:%d)
Sending transport is not available, waiting...
No messages waiting for acks
IDSUTunConnection-sending-%@
IDSUTunConnection-sending
%@ created sending power assertion %@
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT useage is not allowed, failing message
Celluar Useage Policy states that BT is required
dequeueMessages check for %@ %u
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
cannot read chunk of resource
Message %@ added to queue, total message count %d, sendingTopics count %d
com.apple.private.alloy.idstool.testservice
DuplicateTestFileMessages
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
with sequenceNumber %u
%@ Sending message[%lu] %@ %@.
-[IDSUTunConnection _addMessageSize:forTopic:direction:dataProtectionClass:isResource:]
%s: statsDictionary is nil for direction %d
IDSUTunConnection
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
com.apple.identityservices.IDSUTunConnection-dequeueMessages
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
v16@?0@"NSString"8
Enable
Disable
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
com.apple.private.alloy.utunconnection
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
Data protection class unavailable
v12@?0I8
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
ResourceTransferReceiverError
ResourceTransferErrorOverride
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message %@ (originally %@) with command %d
%@ did decrypt message? %@
v16@?0@"NSData"8
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu)
Message %@ removed after ack, total message count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA WAS%@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
DLCCollectLogs
DiagnosticLogCollection
IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
message received via local link
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
local link did receive bytes
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
T@"<IDSUTunConnectionDelegate>",W,N,V_delegate
maxQueueSize
TQ,N,V_maxQueueSize
isAlwaysConnected
TB,N,V_isAlwaysConnected
queueStatistics
isIdle
cumulativeIncomingStatistics
T@"NSDictionary",R,N,V_cumulativeIncomingStatistics
cumulativeOutgoingStatistics
T@"NSDictionary",R,N,V_cumulativeOutgoingStatistics
TB,N,V_enableOTR
isCloudEnabled
TB,R,N,V_isCloudEnabled
supportsLegacyOTRSessionToken
TB,N,V_supportsLegacyOTRSessionToken
supportedMessageTypes
T@"NSArray",&,N,V_supportedMessageTypes
Td,R,N,V_rtt
T@"NSString",&,N,V_cbuuid
_otrTokenToArray: invalid OTR token %@
%@-%u-%1u-%@
%@-%u-%1u
IDSPhoneNumberValidationErrorDomain
phoneToken
T@"NSString",R,N,V_phoneToken
overrideSMSTimeout
smsTimeout
com.apple.identityservices.sms-delivery-hbi
Registration attempt
Trying to send phone number validation request { preflights: %d, sends: %d, attemptsWithoutSend: %d }
Failed Sending Phone Number Validation
Failed sending registration Phone Number Validation request #%d, trying again
Failed Phone Number Validation
Failed sending registration Phone Number Validation request #%d, giving up
Phone Number Validation Sending
Succeeded sending registration Phone Number Validation request #%d
Registration SMS
Received registration SMS
Phone Number Validation Timeout
Timed out waiting for Phone Number Validation request #%d
TotalSMSAttempts
TotalPreflightAttempts
httpMessageDelivery
T@"<IDSPhoneNumberValidationStateMachineMessageDelivery>",&,N,V_httpMessageDelivery
lockdownManager
T@"<IDSPhoneNumberValidationStateMachineLockdownManager>",&,N,V_lockdownManager
arbiter
T@"IDSPhoneNumberValidationModeArbiter",&,N,V_arbiter
deviceSupport
T@"<IDSPhoneNumberValidationStateMachineDeviceSupport>",&,N,V_deviceSupport
systemAccountAdapter
T@"IDSSystemAccountAdapter",&,N,V_systemAccountAdapter
inFlightHeartbeatBlock
T@?,C,N,V_inFlightHeartbeatBlock
inFlightSMSTimeoutBlock
T@?,C,N,V_inFlightSMSTimeoutBlock
currentPreflightStack
T@"IDSPreflightStack",C,N,V_currentPreflightStack
gdr-max-auth-retries
gdr-auth-retry-interval-seconds
OTRController
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
otr-timer-%@
Set OTR timer %p for %@
token
T@"NSString",R,N,V_token
isNegotiating
TB,N,V_isNegotiating
isReady
TB,N,V_isReady
isSuspended
TB,N,V_isSuspended
lastStartTime
Td,N,V_lastStartTime
negotiationCount
TI,N,V_negotiationCount
otrTestBlock
T@?,C,N,V_otrTestBlock
Unable to create session from session data
IDSOTR
No public key found for remote device
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
<%@: %p> count: %ld time: %f
time
Td,R,N,V_time
Tq,R,N,V_count
<%@: %p> limit: %ld timeLimit: %f map: %@
limit
Tq,N,V_limit
timeLimit
Td,N,V_timeLimit
cacheMap
T@"NSMutableDictionary",&,N,V_cacheMap
readWriteLock
T@"NSMultiReadUniWriteLock",&,N,V_readWriteLock
Topic
linkType
wasPrimary
timeTaken
totalProcessed
startTime
Td,N,V_startTime
endTime
Td,N,V_endTime
T@"NSString",&,N,V_topic
TB,N,V_wasPrimary
messageCount
Tq,N,V_messageCount
Tq,N,V_linkType
%@ - No account for service name %@ found to send a message, bailing...
IDSGroupSendAheadObserver
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
Group updated, sending ahead to members { topic : %@ }
Tq,N,V_command
T@"NSDictionary",C,N,V_payload
__kIDSOTRKeyStorageClassStorageIsAvailableNotification
__kIDSOTRKeyStorageClassKey
OTRStore
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
v32@?0@"NSString"8@16^B24
ids-otr-key-storage
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
com.apple.identityservices.otr-save-store
com.apple.identityservices.otr-purge-cache
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
%@:state = %d, isFinished = %d, isBeingHandedOff = %d, callID = %d, state = %d, inviteNeedsDelivery = %d
callID
TI,N,V_callID
remoteNATIP
T@"NSData",&,N,V_remoteNATIP
localNATIP
T@"NSData",&,N,V_localNATIP
localSKEData
T@"NSData",&,N,V_localSKEData
remoteSKEData
T@"NSData",&,N,V_remoteSKEData
remoteICEData
T@"NSData",&,N,V_remoteICEData
localICEData
T@"NSData",&,N,V_localICEData
localCallInfoData
T@"NSData",&,N,V_localCallInfoData
remoteCallInfoData
T@"NSData",&,N,V_remoteCallInfoData
remoteNATType
T@"NSNumber",&,N,V_remoteNATType
localNATType
T@"NSNumber",&,N,V_localNATType
peerCN
T@"NSString",&,N,V_peerCN
localCN
T@"NSString",&,N,V_localCN
isFinished
isBeingHandedOff
TB,N,V_isBeingHandedOff
isReinitiate
TB,N,V_isReinitiate
inviteNeedsDelivery
TB,N,V_inviteNeedsDelivery
isAudioPaused
TB,R,N,V_isAudioPaused
isVideoPaused
TB,N,V_isVideoPaused
relayInitiate
T@"NSDictionary",&,N,V_relayInitiate
relayUpdate
T@"NSDictionary",&,N,V_relayUpdate
relayCancel
T@"NSDictionary",&,N,V_relayCancel
localConnectionType
TQ,N,V_localConnectionType
remoteConnectionType
TQ,N,V_remoteConnectionType
SecIdentityCopyCertificate
Security
SecCertificateCopyCommonNames
IDSSessionConnectionInfo
array_ref = %@
firstCommonName = %@
IDSDaemonQueries
Completed ID query {uri: %@, fromURI: %@, error: %@}
IDSIDQuery
v32@?0@"NSString"8@"NSNumber"16^B24
IDSIDStatusQueryController
Purging tokens forURI %@ fromURI %@ fromService %@
v40@?0@"NSString"8@"NSData"16@"NSString"24@"NSString"32
com.apple.identityservices.id-status-cache
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@
Trying to cache Invalid for ourselves, ignoring...
LookupDate
IDStatus
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => Bogus ID query for: %@   ignoring this
 => From Service: %@
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
unknown
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over an hour, resetting query per hour count
New start query date %@
We have at least one valid result, returning cached results %@
We're at %d queries for this hour
We're at %d queries for this hour, can't do more
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
PeerCache
Current cache for service: %@  cache: %@
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
com.apple.identityservices.idstatuscache
CacheVersion
Loaded cache: %d items
Loaded cache, but empty
Saving cache: %d items
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
device-queries-per-hour
GKSErrorDetailedError
AVConference
GKSErrorReturnCode
v24@?0@"IDSRegistrationPushHandler"8@"NSDictionary"16
registered
md-peer-lookup-negative-cache-time-%@
md-peer-lookup-negative-cache-time
md-peer-lookup-unknown-cache-time-%@
md-peer-lookup-unknown-cache-time
QRAllocation destroyed
allocation for QR session %@ expired (%f > %@). Discard it.
allocation timeout timer cancelled
allocation timed out
requestIDStr
T@"NSString",C,V_requestIDStr
sessionIDStr
T@"NSString",C,V_sessionIDStr
request
T@"IDSQuickRelayAllocateMessage",C,V_request
responses
T@"NSMutableSet",&,V_responses
pushTokenToQRSessionID
T@"NSMutableDictionary",&,V_pushTokenToQRSessionID
recipientPushToken
T@"NSData",C,V_recipientPushToken
duration
Td,N,V_duration
sharedSessionHasJoined
TB,N,V_sharedSessionHasJoined
connectReadyHandler
T@?,C,V_connectReadyHandler
streamInfo
T@"QRStreamInfo",&,V_streamInfo
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
translate deviceID: %@
shared session allocation, previous connect status: %p
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
_requestIDToSession
QuickRelayServerProvider
requested QR allocation for specific provider %ld.
requested QR allocation for any provider
request allocation for a specific address %@
self->_requestIDToAllocateTime
failed sending allocate request: %@ error: %@  code: %ld
No device found
No push token for device %@
setup allocation for %@ service to device %@
No response found for groupID: %@
Cache response: %@
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
message added to cache: %@
Should switch from %@ to %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response %@ for %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@
trying to change a read-only dictionary
look up peer with URI: %@, push token count: %u, tokens: %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
No recipient is found.
Missing recipientIDs
use QR session info from user defaults: %@.
sessionInfo
no push token for participantID %@
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
requestOptions
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
failed to compose a QR sessionInfo dict
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined
participant has joined with cached response
connecting with sessionInfo %@
recipient waits for session acceptance
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
failed to get combined-software-id due to invalid parameter.
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
 is missing required attributes %@ in sessionInfo %@
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
No ids session for ids session id %@
No ids session id for request id %@
No request id
missing response. Skip AWD report
Success
ServerInternalError
BadRequest
MissingRequiredKey
ServerBusy
BadSessionToken
ExpiredSessionToken
Unknown status
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect
there is no URI list yet. stopped converting URI to Participant ID - %@
v32@?0@"NSString"8@"NSMutableSet"16^B24
failed to find allocation for session %@
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
add accepted session %@ with token %@
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms.
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
_sessionToAllocations
keepalive timer stopped for %@
FixedQuickRelayServerAddress
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
FixedQuickRelaySessionID
decoded base64 relay-session-id %@
FixedQuickRelaySessionToken
decoded base64 relay-session-token %@
FixedQuickRelaySessionKey
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
Cannot find allocation for session %@, all allocations: %@
keepalive timer started for %@
keepalive timer not found for %@
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
backoffProvider
T@?,C,N,V_backoffProvider
T@?,C,N,V_block
attempts
Tq,N,V_attempts
scheduledBlock
T@?,C,N,V_scheduledBlock
IDSPhoneNumberValidationMechanism { Type: %@, Context: %@ }
Tq,R,N,V_type
T@"NSString",R,N,V_context
PortMap
can't malloc to print
map (last @ %u):
================
================
can't allocated used port
can't release unallocated port
preflight-enabled
preflight-mechanism-delay
preflight-request-limit
sms-max-retries
sms-max-delivery-retries
overrideMaxSMSRetries
overrideMaxSMSDeliveryRetries
serverBag
T@"IDSServerBag",R,N,V_serverBag
validationMode
isValidationModeLegacy
isValidationModeUsingPreflight
isValidationModeShortCircuitingPreflight
preflightShortCircuitMechanismOverride
T@"IDSPhoneNumberValidationMechanism",R,N
preflightTestDataOverride
minimumIntervalBetweenValidationAttempts
maxAllowableNumberOfPreflightRequests
maxAllowableNumberOfSuccessfullySentVerifications
maxAllowableNumberOfValidationAttemptsWhileNoneHaveSentSuccessfully
GKVoiceChatServiceErrorDomain
v32@?0@"<NSCopying>"8@16@?<v@?@>24
IDSAsyncMapperQueue
id-validation-cert
Initialize Cert Response: %@
responseCertificateData
T@"NSData",C,N,V_responseCertificateData
BTLinkManager
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
UseSkywalkChannelToBTServer
UseSkywayChannelToBTServer
IDSBTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
com.apple.ids.datagram
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
Client
Server
%@ registering for service %@ as %@
skywalk
nsstream
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
T@"NSString",R,V_pipePeripheralUUIDString
isPoweredOn
TB,R,N,V_isPoweredOn
idsNRPluginManager
T@"IDSNanoRegistryPluginManager",&,N,V_idsNRPluginManager
isCountingDown
id-report-spam
spam-messages
Report Spam response: %@
spamMessages
T@"NSArray",C,V_spamMessages
responseSpamMessages
T@"NSArray",C,V_responseSpamMessages
neg-token-fail-limit
neg-token-time-limit
MessageLogErrorTypeFromIDSEncryptionErrorType unknown/unhandled error type: %ld
IDSEncryptionErrorType unknown/unhandled error type: %d
_IDSEncryptionQueueSync
_MessageEncryptionContextSync
_IDSEncryptionQueueDefault
_MessageEncryptionContextDefault
_IDSEncryptionQueueUrgent
_MessageEncryptionContextUrgent
Purge client data called for service %@ token %@ forURI %@ fromURI %@
kIDSEncryptionControllerToken
*************************************************************************************************************
********************** Access to encryption on the wrong thread, please file this asap **********************
Request to encrypt message data for token: %@ deviceID %@
Request to decrypt message data from token: %@ deviceID %@ type: %@
Request to decrypt message data from token: %@  type: %@
Missing queue for encryption priority, not running
failedTokenCache
T@"IDSNegativeTTLCache",&,N,V_failedTokenCache
com.apple.ids.connection.queue
IDSSessionConnection
Cleaning up: %@
connectionData
skeData
callInfoData
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
AVConferenceInviteDataConnectionBlob
AVConferenceInviteDataSKEBlob
AVConferenceInviteDataCallInfoBlob
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
v24@?0@"NSDictionary"8@"NSError"16
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnection
IMAVInterface
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
T@"<_IDSSessionConnectionDelegate>",W,N,V_delegate
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
VCCapabilities
GKSRelayParameter_ClientData
GKSRelayParameter_SelfNatType
GKSRelayParameter_SelfBlob
GKSRelayParameter_PeerID
GKSRelayParameter_PeerNatType
GKSRelayParameter_PeerBlob
GKSRelayType
GKSRelayParameter_ConnectionID
GKSRelayParameter_TransactionID
GKSRelayParameter_Token
GKSRelayParameter_PeerRelayIP
GKSRelayParameter_PeerRelayPort
GKSRelayParameter_SelfRelayIP
GKSRelayParameter_SelfRelayPort
GKSRelayParameter_SelfRelayNatIP
GKSRelayParameter_SelfRelayNatPort
GKSRelayParameter_PeerRelayNatIP
GKSRelayParameter_PeerRelayNatPort
GKSRelayParameter_SelfExternalAddr
GKSRelayParameter_PeerExternalAddr
GKSDidStartParameter_ConnType
GKSDidStartParameter_Error
GKSDidStartParameter_CallID
GKSCDXServerAddress
GKSCommNATServerCohortAddress
GKSCommNATServerMain0Address
GKSCommNATServerMain1Address
GKSCommNATServerCohortName
GKSCommNATServerMain0Name
GKSCommNATServerMain1Name
GKSPreEmptiveRelayTimeout
GKSMaxRelayBitrate
GKSICETimeout
GKSNATCheckTimeout
GKSConnectionBlobMaxBytes
GKSNoRemotePacketsTimeout
GKSNetworkConditionsTimeout
Exception caught archiving connectionData, skeData Exception: %@
accessToken
T@"NSData",C,V_accessToken
pairing-token
id-get-admin-token
accessoryID
T@"NSString",C,V_accessoryID
pairingToken
T@"NSData",C,V_pairingToken
responseAccessoryID
T@"NSString",C,V_responseAccessoryID
responseAdminAcccessToken
T@"NSData",C,V_responseAdminAcccessToken
responseExpiry
T@"NSNumber",C,V_responseExpiry
DaemonGroupContext
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
v20@?0@"NSArray"8B16
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
v24@?0@"NSSet"8@"NSError"16
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
/Library/IdentityServices/
Core Data Load Failed
Core Data Load sucdeeded
Engram is disabled
messagesGroupContext
T@"ENGroupContext",&,N,V_messagesGroupContext
T@"NSString",&,N,V_serviceIdentifier
servicePushTopic
T@"NSString",&,N,V_servicePushTopic
serviceDuetIdentifiers
T@"NSArray",&,N,V_serviceDuetIdentifiers
serviceAdHocType
TI,N,V_serviceAdHocType
serviceIsDSBased
TB,N,V_serviceIsDSBased
serviceWantsReflectedSend
TB,N,V_serviceWantsReflectedSend
serviceAllowProxyDelivery
TB,N,V_serviceAllowProxyDelivery
serviceAllowLocalDelivery
TB,N,V_serviceAllowLocalDelivery
serviceAllowWiProxDelivery
TB,N,V_serviceAllowWiProxDelivery
serviceAllowLiveMessageDelivery
TB,N,V_serviceAllowLiveMessageDelivery
serviceUseiMessageCallerID
TB,N,V_serviceUseiMessageCallerID
silentlyFailMessagesOnSwitch
TB,N,V_silentlyFailMessagesOnSwitch
shouldProtectTrafficUsingClassA
TB,N,V_shouldProtectTrafficUsingClassA
shouldAllowCloudDelivery
TB,N,V_shouldAllowCloudDelivery
shouldAllowLiveMessageDelivery
TB,N,V_shouldAllowLiveMessageDelivery
Ti,N,V_accountType
primaryRegistrationDSHandle
T@"NSString",&,N,V_primaryRegistrationDSHandle
primaryRegistrationURIs
T@"NSArray",&,N,V_primaryRegistrationURIs
isRegistrationActive
TB,N,V_isRegistrationActive
T@"NSArray",&,N,V_dependentRegistrations
defaultPairedDependentRegistrations
T@"NSDictionary",&,N,V_defaultPairedDependentRegistrations
appleIDPrimaryDependentRegistrations
T@"NSArray",&,N,V_appleIDPrimaryDependentRegistrations
T@"NSArray",&,N,V_aliasStrings
accountDescription
T@"NSString",&,N,V_accountDescription
accountDisplayName
T@"NSString",&,N,V_accountDisplayName
listenerID
T@,&,N,V_listenerID
T@"NSDictionary",&,N,V_entitlements
shouldIncludeDefaultDevice
TB,N,V_shouldIncludeDefaultDevice
T@"NSString",&,N,V_subService
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
@16@?0@"NSDictionary"8
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
token:
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
__localURI__
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Overwriting previous remote failure with local success
Messaging
Sending via account that's type Local -- forcing local delivery.
self-token:
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
CompressPayload
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@   dataToEncrypt %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@   dataToEncrypt %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ with forced live message delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Local send completion block with responseCode %ld error %@ lastCall %@ account %@
Calling combined completion block responseCode %ld error %@ lastCall %@ account %@
Attempted to send to remote destiantions on a local account, we are allowed to proxy, begining proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
device-id
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
service-disable-%@
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
v40@?0@"IDSDeliveryController"8@"NSArray"16@"NSArray"24@"NSDictionary"32
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
decryption-key
file-size
attach-mmcs-dict
attach-meta
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
IDS doesn't support sending protobuf or data to rapport destinations
Registration is not active on account %@, ignoring...
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage %@  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@   dataToEncrypt %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
No paired device exists, There is no need to proxy
Proxy Delivery is disabled in the service plist, No need to continue
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
LocalDevice
encryptionClassAKey
encryptionClassCKey
encryptionClassDKey
hasAllEncryptionKeys
T@"NSString",R,&,N
ids-rtencryption-mkm-expire-duration
ids-rtencryption-prekey-expire-duration
com.apple.ids.realtimeencryptioncontroller
v32@?0@"NSData"8Q16^B24
v16@?0@"NSTimer"8
v24@?0@"NSArray"8@"NSError"16
isTestRunning
TB,N,V_isTestRunning
accessory-ids
admin-id
id-get-consent-token
consent-tokens
accessoryIDs
T@"NSArray",C,V_accessoryIDs
adminID
T@"NSString",C,V_adminID
T@"NSString",C,V_expiry
responseConsentTokens
T@"NSArray",C,V_responseConsentTokens
T@"NSDictionary",C,V_message
T@"NSDictionary",C,V_protobuf
T@"NSString",C,V_fromID
T@"IDSDestination",C,V_destinations
accountGUID
T@"NSString",C,V_accountGUID
useDictAsTopLevel
TB,V_useDictAsTopLevel
dataToEncrypt
T@"NSData",C,V_dataToEncrypt
encryptPayload
TB,V_encryptPayload
TB,V_compressPayload
wantsResponse
TB,V_wantsResponse
T@"NSDate",&,V_expirationDate
T@"NSNumber",C,V_command
TB,V_wantsDeliveryStatus
deliveryStatusContext
T@"NSDictionary",C,V_deliveryStatusContext
T@"NSData",C,V_messageUUID
Tq,V_priority
T@"NSString",C,V_guid
alternateGUID
T@"NSString",C,V_alternateGUID
T@"NSString",C,V_identifier
forcedLocal
TB,V_forcedLocal
T@"NSString",C,V_peerResponseIdentifier
TB,V_expectsPeerResponse
TB,V_wantsAppAck
TB,V_nonWaking
TB,V_nonCloudWaking
storedSize
T@"NSNumber",C,V_storedSize
TB,V_bypassDuet
T@"NSArray",C,V_duetIdentifiersOverride
T@"NSString",C,V_queueOneIdentifier
enforceRemoteTimeouts
TB,V_enforceRemoteTimeouts
mainAccountGuid
T@"NSString",C,V_mainAccountGuid
localDestinationDeviceUUID
T@"NSString",C,V_localDestinationDeviceUUID
enqueuedDate
T@"NSDate",C,V_enqueuedDate
T@"NSNumber",C,V_messageType
alwaysSkipSelf
TB,V_alwaysSkipSelf
liveMessageDelivery
TB,V_liveMessageDelivery
TB,V_requireBluetooth
TB,V_requireLocalWiFi
sent
TB,V_sent
wantsProgress
TB,V_wantsProgress
combinedMessages
T@"NSArray",R,V_combinedMessages
T@"NSString",C,V_topic
isLocal
TB,V_isLocal
SELECT ROWID, data_protection_class, guid, alternate_guid FROM outgoing_messages_to_delete;
data_protection_class
IDSDMessageStore
Clearing postponed messages
DELETE FROM outgoing_messages_to_delete WHERE ROWID <= ?;
RunawayCheck: Account Guid %@ has %d messages
IDSMessageStore-ivarQueue
@16@?0@"NSArray"8
    %@  %@
Database state:
  Outgoing (account_guid, count)
%@  Incoming (topic, count)
IDS-DB-List
Performing initial database housekeeping
  => Setting cache size
  => Invalidating caches
Exception handling message %@, %@
Bad messageData for incoming message %@!
StoreInMessageStore
Ignoring storeMessage: %@ forTopic: %@ fromID: %@
Bad message data for incoming message %@!
Hit exception %@ decoding outgoing IDS message!
Hit exception %@ decoding outgoing duet identifier overrides!
Performing MarkingLocalDestiations with accounts %@ and device %@
Marking all pending delete messages for account %@
Asked to store outgoing message with GUID %@
Ignoring storeOutgoingMessageWithSendParameters: %@ destinations: %@ accountID: %@
Asked to bypass storage for message with GUID %@
StoreInDatabase
Bad destinationData for outgoing message %@!
Hit exception %@ encoding outgoing IDS message!
Asked to send Message with guid: %@  database check for similiar messages that should be sent first says %@
We already have message with guid %@ alternate %@ in the database, dropping this redundant resend without calling completion.
deleteOutgoingMessageWithGUID:alternateGUID: {guid: %@, alternateGUID: %@}
/Library/IdentityServices/files/
SendToClient
IncomingMessage
Exception performing database block %@
Under memory pressure, closing database
Leaving memory pressure, database remains closed
database
T@"IDSDatabase",R,&,N,V_database
messageStores
T@"NSArray",R,C
outgoing_messages_to_delete
Unexpected datatype. %@ should be of type %@, not %@
%@:requestID = %@, IDSSessionID = %@ relaySessionID = %@
requestID
T@"NSData",C,V_requestID
senderURI
T@"NSString",C,V_senderURI
allocateType
T@"NSNumber",C,V_allocateType
IDSSessionID
T@"NSData",C,V_IDSSessionID
recipients
T@"NSArray",C,V_recipients
invitationRetryCount
T@"NSNumber",C,V_invitationRetryCount
groupMemberCount
T@"NSNumber",C,V_groupMemberCount
selfAllocationCount
T@"NSNumber",C,V_selfAllocationCount
activeRelayIP
T@"NSData",C,V_activeRelayIP
activeRelaySessionToken
T@"NSData",C,V_activeRelaySessionToken
existingRelayIP
T@"NSData",C,V_existingRelayIP
existingRelaySessionToken
T@"NSData",C,V_existingRelaySessionToken
existingRelaySignature
T@"NSData",C,V_existingRelaySignature
senderExternalIP
T@"NSData",C,V_senderExternalIP
appID
T@"NSString",C,V_appID
allocateProtocolVersion
T@"NSNumber",C,V_allocateProtocolVersion
T@"NSString",C,V_protocol
isSharedSession
T@"NSNumber",C,V_isSharedSession
T@"NSString",C,V_groupID
T@"NSNumber",C,V_qrReason
T@"NSNumber",C,V_qrError
T@"NSData",C,V_previousAccessToken
T@"NSData",C,V_previousRelayIP
provider
T@"NSNumber",C,V_provider
testOptions
T@"NSString",C,V_testOptions
relayIP
T@"NSData",C,V_relayIP
relayPort
T@"NSNumber",C,V_relayPort
relaySessionToken
T@"NSData",C,V_relaySessionToken
relaySessionKey
T@"NSData",C,V_relaySessionKey
T@"NSData",C,V_relaySessionID
relayExpiryTimeStamp
T@"NSNumber",C,V_relayExpiryTimeStamp
inferredExternalIP
T@"NSData",C,V_inferredExternalIP
relaySoftwareVersion
T@"NSData",C,V_relaySoftwareVersion
errorCode
T@"NSNumber",C,V_errorCode
errorMessage
T@"NSString",C,V_errorMessage
We have exceeded the maximum queue size, dropping message %@
LocalDeliveryQueue
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
messages
statistics
NetworkAvailabilityCheckOverrideValue
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
B24@?0@8@"NSDictionary"16
IDSDaemonMIGQueryInterface
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - we're not on a call or wifi is usable, processing query immediately (On call: %@   Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
T@"<IDSDaemonMIGQueryInterfaceDelegate>",W,V_delegate
service-cache-request
cached-id-status-query
id-status-query
set-id-status
remote-device-status-query
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
transactionID
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
*** Incoming cached ID status query for (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
is-springboard
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
vc-disable-springboard-queries
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
email:myself
__HandleRemoteDeviceQuery - enqueuing
Setting IDSIncomingMessage property %d of %d
Done with IDSIncomingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
SELECT COUNT(*) FROM incoming_message
SELECT topic, count(ROWID) FROM incoming_message GROUP BY topic
SELECT ROWID, guid, topic, from_id, message_data, date, is_local FROM incoming_message WHERE is_local = ? ORDER BY ROWID DESC LIMIT ?
IDSIncomingMessageRecord
IDSIncomingMessageRecordDeleteMessageForGUID %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;
IDSIncomingMessageRecordDeleteMessagesOlderThanThreshold %lld
DELETE FROM incoming_message WHERE date < ? LIMIT ?; 
CFStringRef IDSIncomingMessageRecordCopyGUID(CFAllocatorRef, IDSIncomingMessageRecordRef, IDSDatabase *__strong)
CFStringRef IDSIncomingMessageRecordCopyGUIDUnlocked(CFAllocatorRef, IDSIncomingMessageRecordRef, IDSDatabase *__strong)
CFStringRef IDSIncomingMessageRecordCopyTopic(CFAllocatorRef, IDSIncomingMessageRecordRef, IDSDatabase *__strong)
CFStringRef IDSIncomingMessageRecordCopyFromID(CFAllocatorRef, IDSIncomingMessageRecordRef, IDSDatabase *__strong)
int64_t IDSIncomingMessageRecordGetDate(IDSIncomingMessageRecordRef, IDSDatabase *__strong)
void IDSIncomingMessageRecordBulkCopy(IDSIncomingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, int64_t *, BOOL *, IDSDatabase *__strong)
<IDSIncomingMessageRecord %p [%p]>{}
from_id
is_local
_IDSIncomingMessageRecordCreate()
incoming_message
personal-session-token-cache
personal-session-token-cache-v1
personal-session-token-cache-v2
personal-session-token-cache-v3
queryCompletionBlock
T@?,R,N,V_queryCompletionBlock
session-tokens
push-tokens
dates-expire
dates-refresh
anonymized-sender-ids
session-token
session-token-expires-seconds
session-token-refresh-seconds
anonymized-sender-id
biz-trusted
vc-disaster-sender-self-tokens
ForceSelfTokens
***** Forcing self tokens mode *****
PeerIDManager
Migrated peer id persistent map. {oldVersionNumber: %ld}
Sysdiagnose-Oversized
Query cache:
Key: %@
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
IDS-list
PeerLookup
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
_disasterModeTokens
identities
sender-correlation-identifier
Found identity:
             device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
IDSIDRefreshExpiry
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
B16@?0@"IDSEndpoint"8
Returning disaster mode token for from URI: %@   token: %@
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
Request is for a Number value, however the value for key %@ is not a Number, is %@
Request is for a String value, however the value for key %@ is not a String, is %@
** At least one session token expired for: %@, need to get new ones
B16@?0@"IDSPeerIDKey"8
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
@16@?0@"IDSURI"8
endpointQueryListeners
T@"NSMutableDictionary",&,N,V_endpointQueryListeners
clientDataUpdateBlocks
T@"NSMutableDictionary",&,N,V_clientDataUpdateBlocks
purgeClientDataBlocks
T@"NSMutableDictionary",&,N,V_purgeClientDataBlocks
disasterModeTokens
T@"NSMutableDictionary",&,N,V_disasterModeTokens
queryHandler
T@"<IDSPeerIDQueryHandler>",&,N,V_queryHandler
peerMap
T@"IDSPersistentMap",&,N,V_peerMap
T@"<IDSPeerIDPushHandler>",&,N,V_pushHandler
account
domain
suspendWait
preferSocket
connectionContext
IDSGenericConnectionID[%@,%@,%@] @%p (%lu)
T@"NSString",R,C,N,V_account
T@"NSString",R,C,N,V_service
T@"NSString",R,C,N,V_name
local[%@] remote[%@]
%u:::%u
localAddress
T@"IDSSockAddrWrapper",R,&,N,V_localAddress
remoteAddress
T@"IDSSockAddrWrapper",R,&,N,V_remoteAddress
-[IDSGenericConnection initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1171.53.12/IDSAgent/IDSUTunController.m
0 == SecRandomCopyBytes(kSecRandomDefault, keyMaterialLength, _localKeyMaterial)
TCP info (%u) tcpi_snd_nxt:%08x tcpi_rcv_nxt:%08x (connection: in:%08x out:%08x)
<IDSGenericConnection: id[%@] ports[%@] localGUID[%@] remoteGUID[%@] clientID[%@] proto[%d] sd[%d,%d,%d] error[%@] comp_state[%d] localContext[%d,%p] remoteContext[%d,%p] ( %s%s%s%s%s%s%s%s%s) (CT:%0.6lf) tcp[%@]>
opened 
handler-called 
control-sent 
control-received 
reset-sent 
reset-received 
sent-pkt 
received-pkt 
encryption-enabled 
( %s%s%s%s%s%s)
IDSUTunController
problem: %@ is going to use the main queue.
genericConnection for %@ using BT datagram link - stop
Cleanup: %@
IDSUTun
collectAllUTunSocketStall
%p %@ Stall detected [%@].
IDSGenericConnection
IDS detected the single UTun socket stall. Please file a bug "Transport|all", and attach a sysdiagnose and the contents of /Library/Logs/CrashReporter from both devices.
2020-01-01
UTun Socket Stall
UTun Socket stall
%p %@ Stall detected [%@] - only netdiagnose
%p %@ Stall detected [%@] - netdiagnose & simulate crash
%p %@ Stall warning [%@]
%p Created the stall detector %@
localConnectionGUID
T@"NSString",R,&,N,V_localConnectionGUID
remoteConnectionGUID
T@"NSString",C,N,V_remoteConnectionGUID
T@"NSString",C,N,V_clientID
T@"IDSGenericConnectionID",&,N,V_connectionID
addressPair
T@"IDSSockAddrWrapperPair",C,N,V_addressPair
Ti,R,N,V_protocol
Ti,N,V_sd
sdCopy
Ti,N,V_sdCopy
sdOriginal
Ti,N,V_sdOriginal
sdNumberNoClose
Ti,N,V_sdNumberNoClose
connectError
T@"NSError",&,N,V_connectError
completionQueue
T@"NSObject<OS_dispatch_queue>",N
openSocketCompletionHandler
T@?,C,N,V_openSocketCompletionHandler
firstIncomingSYNSequenceNumber
TI,N,V_firstIncomingSYNSequenceNumber
expectedNextIncomingSequenceNumber
TI,N,V_expectedNextIncomingSequenceNumber
expectedNextOutgoingSequenceNumber
TI,N,V_expectedNextOutgoingSequenceNumber
Ti,N,V_stateFlags
creationTime
Td,R,N,V_creationTime
socketTrafficClass
Tq,N,V_socketTrafficClass
hasMoreData
TB,N,V_hasMoreData
lastSuccessfulSentTime
Td,N,V_lastSuccessfulSentTime
compressionInfo
T@"IDSHCInfo",&,N,V_compressionInfo
compressionState
Tq,N,V_compressionState
suspended
TB,N,V_suspended
uint32Key
TI,N,V_uint32Key
TB,N,V_isCloudEnabled
isControlChannel
TB,N,V_isControlChannel
isRealTime
TB,N,V_isRealTime
shouldStopBTDatagramLink
TB,N,V_shouldStopBTDatagramLink
encryptionEnabled
TB,N,V_encryptionEnabled
keyMaterialLength
Ti,N,V_keyMaterialLength
localKeyMaterial
T*,N,V_localKeyMaterial
SSRCSend
TI,N,V_SSRCSend
seqSendStart
TS,N,V_seqSendStart
seqSend
TS,N,V_seqSend
srtpProtocolVersion
Ti,N,V_srtpProtocolVersion
checksumFailed
TB,N,V_checksumFailed
connectionSetupStartTime
Td,N,V_connectionSetupStartTime
firstPacketReceiveTime
Td,N,V_firstPacketReceiveTime
connectionInitTime
Td,N,V_connectionInitTime
firstDataPacketReceiveTime
Td,N,V_firstDataPacketReceiveTime
idsDeviceConnectionUUID
T@"NSString",C,N,V_idsDeviceConnectionUUID
serviceConnection
T@"NSObject<OS_nw_connection>",&,N,V_serviceConnection
outgoingStallDetectorName
T@"NSString",C,N,V_outgoingStallDetectorName
T@"IDSConnectionContext",&,N,V_connectionContext
T@?,R,N,V_readHandler
T@"IDSGenericConnection",&,N,V_connection
deviceConnectionInfo
T@"IDSDeviceConnectionInfo",&,N,V_deviceConnectionInfo
 o              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
timestamp
Td,R,N,V_timestamp
 i              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
 k              [%013.06lf] %18s%18s%18s%18.09f%18ld
com.apple.ids.utuntiminglogger
                [  timestamp  ]        total-time   processing-time  compression-only            kernel             bytes 
Timing events: (%0.9f to generate)
customTest
Custom Test 1 - simple control channel internal fail
Custom Test 2 - reset before control channel internal fail
Custom Test 3 - simulate the control channel connection reset loop
networkingLogDumpFlags
Custom Test 4 - dump logs with flags %08X
Test
Custom Test 5 - simulate reaching file descriptor limit
Custom Test 5 - made new socket %d
Custom Test 5
Custom Test 6 - pop alert
2017-01-01
CustomTest6
Custom Test 6
Message to pop up for testing
Custom Test 7 - trigger utun socket stall detection
TestTrigger
Custem Test 7 - Couldn't find the detector %@
Custom Test 8 - filling utun os_channel...
Custom Test 8 - filled utun os_channel after %d dummy writes
Custom Test 9 - Inject Corrupted BT packet.
ControlChannelAvoidMainQueue
Custom Test 10 - Control Message + main queue deadlock test (avoidMainQueue: %@
Custom Test 10 - skipping test for %@ on %@
Custom Test 10 - about to ask main queue to sync onto TransportThread for %@ on %@
Custom Test 10 - about to sync onto TransportThread for %@ on %@
Custom Test 10 - sync operation on TransportThread for %@ on %@
Custom Test 10 - sync onto TransportThread returned for %@ on %@
Custom Test 10 - telling control channel to encrypt and send message for %@ on %@
Custom Test 10 - asked main queue to sync onto TransportThread for %@ on %@
v40@?0@"NSString"8@"<NSObject>"16^B24^B32
Custom Test - unsupported %ld
kUTunConnectionControlChannelOutgoingDetectorName
%@: created the stall detector for %@
 ...
%@: Payload Handler! %u => %u proto:%d (len=%ld)
=> data[%@%s]
%@: device %@ is suspending traffic
%@: IDSHC_Compress failed (%lu), revert back to un-compressed
%@: outgoing header (compressed_bit:%d protocol_bit:%d local_cid:%d s_port:%u d_port:%u)
=> c(%luB): [%@%s]
Encryption failure: %u
First packet for connection %@
%@: Sending TCP %uB (flags[%02X] [%s%s%s%s])) noseq:%08x
[throughput] link throttling (s: %u)
%@: numPackets %u != max %u - dropping excess
%@: payload handler called while there are pending outgoing urgent packets - [%u] dropped
%@: payload handler called while there are pending outgoing regular packets - [%u] dropped
%@: dropping unknown proto[%u] packet [%@]
UTun-oversized
%@: cannot find connection for outgoing packet [%u => %u] in [%@]
reset TCP using seq:%08x ack:%08x
%@: handleMultiple - saving packet #%u (total %u) to list (urgent: %d)
%@: handleMultiple - saving packet to list (urgent: %d)
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
ids-ipsec: service string %@ needs to have 3 components
ids-ipsec: startDataChannelWithDevice called with generic connection %@ for service %@ and endpoint %@ connection-cache %@
error creating socket with [%@] [%@]
ids-ipsec: start_request returns error but data channel fine - assuming connected via available block. Error %@
startDataChannelWithDevice: finished with no error, but no socket and no connection
ids-ipsec: service connection %@ connected for service %@ but no generic connection - saving in cache
connect ready for nw_connection %@ socket %d (ports[%@]), event error: %@, connection[%@], device[%{public}@]
Enabled new connection, cancelling previous instance (%@)
serviceConnection (%@) does not match the one being cancelled (%@)
%@: nw_connection %@ in bad state %s
v20@?0i8@"NSObject<OS_nw_error>"12
about to wait for connect ready for socket %d
connect ready for socket %d (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
getsockopt failed %d
%@: socket failed (errno=%d)
UTunController dup() failed
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
Skipping header compression for phone continuity
scheduled wait for connect ready for socket %d
ids-ipsec: found service connection %@ in cache for service %@
fdfd::1
21314
IPSecLink
nw_service_connector service_available_block for %@ returns %@ for service %s
ids-control-channel
v24@?0@"NSObject<OS_nw_endpoint>"8r*16
useipsec
ids-ipsec: got useipsec %@ (isDefaultPairedDevice %@)
FairPlay authentication failed, obliterate device connection.
Device %@/%@ (CC:%@) is blacked out due to fairplay failures
Add a block for control channel reestablishment on link connects.
v28@?0B8@12^B20
Failed to decrypt control message with deviceUniqueID %@, try different peer for %@.
deviceUniqueID mismatch (%@!=%@), ignore decryption error.
Successfully decrypted control message, lock peer %@ for cbuuid %@.
%p: control channel got message %@ device conn info:%@
v32@?0@"NSData"8B16B20B24B28
Add a block for initial control channel setup on link connects.
TransportThread initialization failed
ids multiplex ipsec queue
enableSkywalkStat
kern.skywalk.ring_stat_enable
sysctl for kern.skywalk.ring_stat_enable failed %d
magnet pipe
Magnet stall detected [%@] - not reporting
Magnet stall detected [%@]
Magnet stall warning [%@]
verboseMagnetStallDetectionLogging
ids-ipsec: starting service connection for %s on %@ with parameters %@
nw_service_connector_start_request returned connection(%p) %@ error %@ for %s
nw_service_connector_start_request returned EEXIST - exit
nw_service_connector_start_request returned EINPROGRESS - exit
v24@?0@"NSObject<OS_nw_connection>"8^{__CFError=}16
ids-ipsec: start_request returns error but control channel fine - assuming connected via available block. Error %@
startControlChannelWithDevice: error creating control channel with [%@] [%@]
UTunController control channel for [%@] creation failed: %@
For the fixedInterface case, obliterate the connection.
UTunController control channel for default paired device could not be started for %0.3lf seconds
UTunController calling startControlChannelWithDevice for [%@] after %d seconds
startControlChannelWithDevice: finished with sd=%d [%@]
startControlChannelWithDevice: added the stall detector %@
v20@?0i8@"NSObject<OS_nw_connection>"12
startControlChannelWithDevice: finished with no error, but no socket and no connection
%@: closing connection %@
closeSocket for %@ using BT datagram link - stop
resetting all connections
%@: waiting for first openSocket
%@: encryption expects 0xe000 - packet is corrupt
%@: unable to find decryption context for ssrc:%08x data:[%@%s]
Decryption failure: %u
%@: dropping unknown proto[0x%01x] packet (encrypted) [%@]
%@: dropping unknown proto[0x%01x] packet [%@]
%@: failed to resolve connection for remoteCID 0x%04x
%@: found connection with mismatched (remoteCID 0x%04x != remoteCID 0x%04x)
%@: remoteContext is nil for remoteCID %d, decompression failed.
%@: IDSHC_DecompressSimple failed (%lu)
%@: checksum failed for connection %@
%@: Got TCP %dB (flags[%02X] [%s%s%s%s])) for %u <= %u (connection %@ (%p))
%@: dropping TCP (unencrypted) - expect to be encrypted
Control channel reestablishment request from [%@]
<= data[%@%s]
Control channel setDidReceiveReestablishment %@ after reestablishment request
%@: dropping TCP (unexpected - no first packet) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
Received the first data packet for %@
Got reset for connection %@
%@: dropping TCP (no connection) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
%@: dropping UDP (no connection) %dB for %u <= %u
%@: dropping UDP (unencrypted) %dB for %u <= %u
device %@: socket() failed: errno=%d: %s
UTunController socket() failed
for device %@: binding to [%@ [%@] @ scopeid=%d] iRet=%d (errno=%d)
device %@: can't bind to [%@ @ scopeid=%d]: errno=%d: %s
connecting to [%@ @ scope=%u] %d (%d)
device %@: can't connect to %@: errno=%d: %s
%@: got control message: compression_req %@
%@: UTCMType_CompressionRequest has invalid header length (%lu)
%@: UTCMType_CompressionRequest cannot decode remoteConnectionGUID
%@: UTCMType_CompressionRequest cannot decode localConnectionGUID
%@: invalid message size for UTCMType_CompressionRequest (%u != %u)
%@: recv compression_req (#:%u remoteCID:%u seq:%u ack:%u)
%@: UTCMType_CompressionRequest cannot decode account
%@: UTCMType_CompressionRequest cannot decode service
%@: UTCMType_CompressionRequest cannot decode name
%@: UTCMType_CompressionRequest found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionRequest resolved connection ports[%@]
%@: sending control message: compression_resp %@
%@: got control message: compression_resp %@
%@: UTCMType_CompressionResponse has invalid header length (%lu)
%@: UTCMType_CompressionResponse cannot decode remoteConnectionGUID
%@: UTCMType_CompressionResponse cannot decode localConnectionGUID
%@: invalid message size for UTCMType_CompressionResponse (%u != %u)
%@: recv compression_resp (#:%u)
%@: UTCMType_CompressionResponse cannot decode account
%@: UTCMType_CompressionResponse cannot decode service
%@: UTCMType_CompressionResponse cannot decode name
%@: UTCMType_CompressionResponse found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionResponse resolved connection ports[%@]
%@: compression_req (%u) acknowledged!
startCompressionForConnection failed due to invalid parameters
startCompressionForConnection ports[%@]
%@: failed to get local CID
%@: resolved next available localCID 0x%04x
%@: sending control message: compression_req (%@)
%@/%@/%@
%@: control message parsing..
%@: control message too small
%@: UTCMType_EncryptControlChannel missing data
%@: got control message: encrypt control channel flags %d ispairedlocally %d ispairedremotely %d (isencrypting: %d ispairedlocally %d ispairedremotely %d)
%@: UTCMType_SetupChannel insufficient header
%@: UTCMType_SetupChannel unexpected remoteGUID/account/service/name lengths (%u, %u, %u, %u)
%@: UTCMType_SetupChannel unexpected size (%u != %u)
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
control message in reply to cleaned up connection
control message not for current connection - assume local is current for now (message is old) and send CloseChannel for remote attempt
control message repeated for current connection - assume local is current and remote reconciled
stale connection
%@: found connection [%@] - remote wins
%@: send setup channel message ports[%u:::%u] guid[%s]
%@: SetupEncryptedChannel insufficient header
%@: SetupEncryptedChannel unexpected remoteGUID/account/service/name/key lengths (%u, %u, %u, %u, %u)
%@: SetupEncryptedChannel unexpected size (%u != %u)
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: nonmatching key material length (local:%u remote:%u)
%@: send setup encrypted channel message ports[%u:::%u] guid[%s] ssrc:%08x startSeq:%04x
%@: UTCMType_CloseChannel insufficient header
%@: UTCMType_CloseChannel unexpected size (%u != %u)
%@: UTCMType_CloseChannel cannot decode remoteConnectionGUID
%@: UTCMType_CloseChannel cannot decode localConnectionGUID
%@: UTCMType_CloseChannel cannot decode account
%@: UTCMType_CloseChannel cannot decode service
%@: UTCMType_CloseChannel cannot decode name
%@: got control message: close channel remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
remote close
%@: control message: hello control channel version is nil
%@: got control message: %@
Control channel checksum failed while receiving Hello. Resetting connection %@
%@: reset control channel didReceiveReestablishmentRequest NO
%@: got invalid control message %d
com.apple.private.alloy.fignero
com.apple.private.alloy.willow.proxy
UTunSocketProtocolOverride
%@: UTunSocketProtocolOverride [%@] instead of specified [%@]
%@: found connection [%@] for ID [%@]
%@: bypass utun with readHandler %p for connection [%@]
openSocket for %@ using BT datagram link - start
completionHandlerQueue
completionHandler
replace existing connection
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
%@: cannot allocate new port for service %@ name %@
%@: openSocketWithOptions unable to allocate new port - cannot continue
%@: closeSocketWithOptions called with options [%@] (connection %@)
%@: close channel control message [%@] created for connection %@
closeSocketWithOptions called
%@: openSocketWithOptions called with options [%@]
%@: localdevicecontroller is paired [%@]
%@: checking localdevicecontroller not paired
%@: openSocketWithOptions unable to create new device - cannot continue
Update deviceUniqueID for controlChannel %@
Device %@/%@ is blacked out due to fairplay failures
Canceled a previously scheduled openSocket for %@. Rescheduling openSocket with new options %@.
Add a block for data channel setup on link connects.
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
Cleaning up all connections for service
cleanupSocketsForClient: clientID is nil.
closeSocketWithOptions found deviceUniqueID mismatch (%@ != %@), ignore.
Canceled a previously scheduled openSocket for %@. Not scheduling closeSocket.
Add a block for data channel close on link connects.
Rescheduling suspend traffic check in %0.2lf seconds
Suspend traffic check: connections %lu =? suspended connections %lu
Scheduling a suspend traffic check in %0.2lf seconds
Extending suspend traffic check by %0.2lf seconds
%@: suspendSocketWithOptions called with options [%@] (connection %@)
%@: resumeSocketWithOptions called with options [%@] (connection %@)
removeDeviceConnectionInfoForDevice for %@
removeDeviceConnectionInfoForDevice found no match for %@
removeDeviceConnectionInfoForDevice for %@.
removeDeviceConnectionInfoForDevice found no match for %@.
obliterateConnectionInfo failed due to invalid linkManager
obliterateConnectionInfo: clear all connections for cbuuid %@
obliterateConnectionInfo: completionBlock
Clearing control channel
Couldn't find deviceConnection info
addPairedDevice failed due to invalid linkManager
addPairedDevice with cbuuid %@
connectPairedDevice failed due to invalid linkManager
connectPairedDevice with cbuuid %@
deletePairedDevice failed due to invalid linkManager
deletePairedDevice with cbuuid %@
copyLinkStatsDict failed due to invalid linkManager
-[IDSUTunController onTransportThread_PerServiceDataTransferredForDevice:services:]
%s: invalid arguments
%s: reporting service stats %@
-[IDSUTunController perServiceDataTransferredForDevice:services:]
-[IDSUTunController perServiceDataSentForDevice:services:]
-[IDSUTunController perServiceDataReceivedForDevice:services:]
getTransmittedPacketsForDevice: cannot find device %@
setPreferInfraWiFi failed due to invalid linkManager
setPreferInfraWiFi %@
setLinkPreferences failed due to invalid linkManager
Drop OTR negotiation message for %@, link is not connected.
Drop suspend OTR negotiation message for %@, link is not connected.
<null>
Cannot use invalid interface name [%s]
Cannot get interface state for %s on disconnect
Cannot set interface state to available for %s on disconnect
Set interface availability from %u to %u (0 is available) %s
Cannot open socket for ioctl for %s on disconnect
[throughput] Now cannot send to device %@
localdevicecontroller callback [%@]
control channel already paired
linkManager
T@"IDSLinkManager",R,N,V_linkManager
Made reset[%@]
setsockopt on socket (%d) succeeded for traffic class (%d).
setsockopt on socket (%d) failed for traffic class (%d), (error=%d: %s).
sending control message: encrypt control channel (%d, %d) %@
forRefresh
vc-disaster-sender-max-retries
vc-disaster-receiver-retry-interval
id-query-bad-signature-retry-enabled
id-query-bad-signature-retry-interval
id-query-bad-signature-retry-number
DebiliatedMode
***** Forcing debiliated mode *****
com.apple.madrid-lookup
Bag loaded notification! Is in backoff mode changed to %@
iMessage Debilitated Mode
iMessage server has %@ debilitated mode.
entered
left
No block supplied, but is this the first query: %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
URIs
FromIdentity
FromURI
FromService
ForSending
ForMessaging
ResultExpected
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! Returning success for all checked URIs %@. Original requested URIs: %@
com.apple.ids.query
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
forceHTTPQueries
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
Forcing cellular queries only
The Query Service Is %@
IDSPeerIDLookup
overrideQueryResponseCode
queryCodeOverride
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Chat
Query time was: %f  (URIs: %@)
uriToError
not 
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
dualInterfaceidQueryMessageDelivery
T@"FTMessageDelivery_DualMode",&,N,V_dualInterfaceidQueryMessageDelivery
queryQueue
T@"NSMutableArray",&,N,V_queryQueue
completionBlocksToURIsMap
T@"NSMutableDictionary",&,N,V_completionBlocksToURIsMap
extraCompletionBlocks
T@"NSMutableDictionary",&,N,V_extraCompletionBlocks
isInServerBackoffMode
TB,N,V_isInServerBackoffMode
T@"<IDSPeerIDDeviceSupport>",&,N,V_deviceSupport
networkChangeNotifier
T@"<IDSPeerIDNetworkChangeNotifier>",&,N,V_networkChangeNotifier
T@"<IDSPeerIDQueryHandlerDelegate>",W,N,V_delegate
dataSource
T@"<IDSPeerIDQueryHandlerDataSource>",&,N,V_dataSource
%@,%@
We have suffered %ld network failures. Forcing the server bag to reload.
*** Over budget, failing sendMessage on service: %@
Enabling encryption for this message though it isn't explicitly requested.
com.apple.private.alloy.bulletinboard
com.apple.private.alloy.keychainsync
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
DeliveryContext %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
adhoc type 2
not local type
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
Default Destination Device is %@
Message Delivery Type Is %@ for serviceIdentifier: %@
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
com.apple.ids.trafficclass.nanoregistry.check
com.apple.ids.trafficclass.nanoregistry.configure
com.apple.ids.trafficclass.nanoregistry.update
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
IDSService
Consumed sandbox extension [%@] handle [%llu] for file [%@]
No sandbox extension for received resource [%@]
Consumed sandbox extension [%@] handle [%llu] for original file [not %@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
CanSendUrgent %@ ForceImmediateSend %@ hasSpecialTrafficClass %@
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
message %@ on service %@
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
v24@?0@"NSString"8B16B20
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
max-ids-database-size
max-ids-database-client-enqueued
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
pendingMessageTimeout
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
com.apple.ids.dbvacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
SendToDaemon
(Messaging1) No account found for ID: %@
Result of can send message with account was no
Destination device is not active for this account
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
v32@?0@"NSString"8d16@"NSError"24
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
non-urgent
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeinterval for _nonUrgentInternetSendTimer as %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
md-low-priority-send-window-constraints
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
start-time
end-time
probability
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
v16@?0@"IDSDOutgoingMessage"8
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
 Enqueued item for key: %@    timeout: %f
enqueued message
mailto:support@apple.com
mailto:info@apple.com
mailto:alert@apple.com
.apple.com
topLevelPayload
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
The sender of this message with UUID %@ has Engram version %@
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message in %f seconds
** Had decryption error: %d
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
IDS-receive-%@
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@
-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:]
%s: could not find IDSDService for topic %@
IDSDeviceWokenUpByLocalTopic
IDS Local Message Received
The Account Was %@
pair
The message that will be broadcast is %@
The original send parameters were %@
Removing Local IDS device as a destination from this message
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
IDSIncomingLocalMessageService
IDSIncomingLocalMessageDeviceID
IDSIncomingLocalMessageBTUUID
IDSIncomingLocalMessageCommand
IDSIncomingLocalMessagePayload
IDSIncomingLocalMessageContext
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
AoverC
Class A key not avaialble for message %@ on topic %@
-[IDSDaemon(Messaging) _processStoredIncomingLocalMessages]
-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:]
%s: GUIDs count %lu
q24@?0@"IDSDIncomingMessage"8@"IDSDIncomingMessage"16
Processing %lu stored incoming remote messages
 => Deferring message, service wants messages after first unlock only
Filtering message with guid %@
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Revision lock forced failure
Destination device has unpaired
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
 => Empty message for message ID: %@
 => No error!?
 => OTR un-supported error for messageID: %@
 => Remote encryption credentials are invalid failure for messageID: %@
 => Remote identity encryption failure for messageID: %@
 => Remote Identity decryption failure for messageID: %@
 => Pair decryption failure for messageID: %@
 => Silient Pair decryption failure for messageID: %@
 => Pair encryption failure for messageID: %@
 => Remote attachment download failure for messageID: %@
IDSLogLevelLow
Noted decryption failure for engram group {group: %@, noteError: %@}
 => Engram stale decryption failure for messageID: %@
Broadcasting Group Share Message brodcast block
 => Engram fetch group decryption failure for messageID: %@
Received unknown/unhandled error type: %d
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
Told to filter message from %@
Message specifies an expiration date %@ %@
Message for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
Found no service for topic! %@
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {fromID: %@, service: %@, toIdentifier: %@}
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Filtering alias { accountUniqueID: %@, toIdentifier: %@, activeAliases: %@ }
Filtering but wants app ack
Filtering non-invitation message, stopping { command: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Finished decrypting message topLevelPayload: %@
This message came from user URI %@ their SenderCorrelationIdentifier was %@
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting GroupShare Message top
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Shouldn't broadcast for this command %@ for received message %@ with guid %@
v28@?0@"NSError"8@"NSDictionary"16B24
No Message Error, Processing Imediatly
  => Adding a delay of %f seconds to iCloud Pairing Messages
CloudPairingDelay
  => Processing immediately
Processing message for stored guid %@
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
AES128
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
com.apple.identityservices.deliver
SocketPairMessage
Issued sandbox extension [%s] for file [%@]
Failed to issue sandbox extension for file [%@]
Storage timer fired, guids we need to process: %@
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Encryption failed with error %ld
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
-[IDSDaemon(Messaging) _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]
%s: invalid topic for saving incoming message, ignoring!
-[IDSDaemon(Messaging) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:]
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
v40@?0@"IDSDeliveryContext"8@"NSNumber"16@"NSNumber"24B32B36
Please file a radar! Could not ack message with sequence number %u for connection %@ peer %@ priority %ld
Dropping ack for sequence number %u due to no peer %@ or no priorty %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
continuity
Local
The delivery path for message with guid %@ is %@, service: %@
Cloud Fallback
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
incoming-message-cleanup-threshold
BlockList
filtering message for handle: %@ = %@
InitialContextQueue
ValidationQueue
ConfirmQueue
UnlinkQueue
ProfileValidationQueue
AuthenticationQueue
Region Validation failed
Authentication failure
Handle unlink failure
Email validation request failure
FaceTimeLocalizable
overrideEmailValidationResponseCode
emailValidationCodeOverride
Email in use
Invalid Email
Email Legacy Or Inactive Email
Validation request failed
Handle unlink failed: %d
vetting-token
Email not vetted
Email confirmation failed: %d
Default context query failed
Region validation failed
v84@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64B72B76B80
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
authData
Trying to link phone number based ID: %@
PairedDevice
apple
-[IDSPairedDeviceKeychainPersister _saveToKeychainWithDictionary:]
-[IDSPairedDeviceKeychainPersister _removeFromKeychain]
IDSDaemonPriorityQueueSync
IDSDaemonPriorityQueueDefault
IDSDaemonPriorityQueueUrgent
id-get-service-user-id
service-user-id
responseServiceUserIDs
T@"NSArray",C,V_responseServiceUserIDs
registration-date
next-registration-date
invitation-version
ids-version
identity-version
cdma
identity-rsa-pair-signature
environment
region-base-phone-number
region-server-context
dependant-registrations
self-handle
dependant-registrations-ttl
dependant-registrations-response-code
dependant-registrations-auth-retries
ids-user-id
ids-registration-cert
ids-authentication-cert
service-identifier
bindings
dict
updated
removed
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [Phone Number: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [Heartbeat Date: %@]
T@"<FTPasswordManager>",&,N,V_passwordManager
_candidateEmails
T@"NSMutableArray",&,N,V_candidateEmails
T@"NSDictionary",R,D,N
migrationContext
T@"NSDictionary",&,N,V_migrationContext
Tq,N,V_registrationStatus
registrationType
Tq,N,V_registrationType
serviceType
T@"NSString",&,N,V_serviceType
retries
Ti,N,V_retries
absintheRetries
Ti,N,V_absintheRetries
needsMigration
TB,N,V_needsMigration
needsProvisioning
TB,N,V_needsProvisioning
runningSimpleAuthentication
TB,N,V_runningSimpleAuthentication
isDisabled
TB,N,V_isDisabled
mainID
T@"NSString",C,N,V_mainID
T@"NSString",R,N,V_guid
registrationDate
T@"NSDate",C,N,V_registrationDate
nextRegistrationDate
T@"NSDate",C,N,V_nextRegistrationDate
T@"NSString",C,N
email
confirmedEmails
vettedEmails
T@"NSArray",&,N,V_vettedEmails
T@"NSString",&,N,SsetDSHandle:,V_dsHandle
candidateEmails
T@"NSString",C,N,V_environment
keyPairSignature
T@"NSString",C,N,V_keyPairSignature
isCDMA
T@"NSNumber",C,N,V_isC2K
IDSVersion
T@"NSNumber",C,N,V_IDSVersion
applicationVersion
T@"NSNumber",C,N,V_applicationVersion
identityVersion
T@"NSNumber",C,N,V_identityVersion
authenticationToken
T@"NSString",C,N,V_regionID
regionBasePhoneNumber
T@"NSString",C,N,V_regionBasePhoneNumber
regionServerContext
T@"NSDictionary",C,N,V_regionServerContext
signaturePrefix
T@"NSArray",C,N,V_dependentRegistrations
dependentRegistrationsTTL
T@"NSDate",C,N,V_dependentRegistrationsTTL
dependentRegistrationResponseCode
T@"NSNumber",C,N,V_dependentRegistrationResponseCode
dependentRegistrationAuthRetries
T@"NSNumber",C,N,V_dependentRegistrationAuthRetries
idsUserID
T@"NSString",C,N,V_idsUserID
T@"NSArray",C,N,V_uris
authenticationCert
T@"NSData",C,N
registrationCert
T@"NSData",C,N,V_registrationCert
TB,N,V_shouldAutoRegisterAllHandles
TB,N,V_shouldRegisterUsingDSHandle
emailsToRegister
hasSentinel
canRegister
canSendRegistration
adHocServiceNames
T@"NSArray",&,N,V_adHocServiceNames
IDSDeviceConnectionAWDMetrics
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
vc-profile-link-handle
Link handles query response: %@
authenticationData
T@"NSDictionary",C,V_authenticationData
_kIDSDServiceControllerServicesChangedNotification
_kIDSDServiceControllerServicesRemovedNotification
SubServicesMap
Version
com.apple.ids.subservices
allServices
T@"NSArray",R,W,N
allServicesStrings
allAdHocServices
T@"NSSet",R,N,V_allAdHocServices
allPrimaryServices
iTunesService
%@ %@
B8@?0
%K == %@
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceDeactivation]
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceActivationWithCBUUID:]
HASH:%@
id-group-get-key
id-report-unknown
message-id
sender-uri
time-of-message
Report Unknown Sender response: %@
unknownSenderURI
T@"NSString",C,V_unknownSenderURI
messageServerTimestamp
Ti,V_messageServerTimestamp
IDSGroupServerKeyElectionStoreErrorDomain
accountBlob
T@"NSData",&,N,V_accountBlob
parentPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_parentPg
newPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_newPg
parentVersion
T@"NSNumber",&,N,V_parentVersion
ENID
T@"NSData",&,N,V_ENID
IDSMessageStore-%@
Saving database.
Destroying database.
Closed database.
^{__CFString=}8@?0
filename
T@"NSString",C,N,V_filename
v16@?0@"CSDBThreadedRecordStore"8
ids.db
ids-%@.db
Enabling WAL journal mode.
PRAGMA journal_mode = wal;
Enabling Foreign Key support.
PRAGMA foreign_keys = ON;
The current IDS database is v%d.  The current schema version is v%d
This DB can be migrated.
Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.
REINDEX
Reindexing the DB worked.
Reindexing the DB failed with SQLite result: %d
Database vacuum success
IDSDMessageStore vacuum failed!
IDSDMessageStore final integrity check failed!
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Unable to drop legacy table
Successfully dropped legacy table
DROP TABLE outgoing_message
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
DROP TABLE incoming_message
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding indexes on message guid
Unable to add outgoing_message guid index
Successfully added outgoing_message guid index
CREATE INDEX outgoing_message_guid_idx ON outgoing_message(guid);
Unable to add incoming_message guid index
Successfully added incoming_message guid index
CREATE INDEX incoming_message_guid_idx ON incoming_message(guid);
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
CREATE INDEX IF NOT EXISTS outgoing_message_guid_idx ON outgoing_message(guid);
CREATE INDEX IF NOT EXISTS incoming_message_guid_idx ON incoming_message(guid);
Add enforce_remote_timeout column to outgoing_message
INTEGER DEFAULT 0
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Unable to add outgoing_message similar message query index
Successfully added outgoing_message similar message query index
CREATE INDEX outgoing_message_similarity_idx ON outgoing_message(account_guid, priority, is_sent);
Add main_account_guid column to outgoing_message
TEXT
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
UPDATE outgoing_message SET expiration_date = %lld WHERE expiration_date = 0;
Unable to set expiration date on messages
Successfully added expiration date on messages
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Downgrading to a build with a different IDS database version is unsupported :(
vacuum
IDS DB migration took %f seconds.
%@ SQLiteResult: %d SQLite Message: %s
No migration block to execute!
Cannot perform _IDSDatabaseAddColumnOfTypeToTable(%@, %@, %@)
SELECT %@ FROM %@
The %@ column already exists on %@, skipping this step.
IDS DB migration failed to add column %@ to the %@ table.
Added %@ column to the %@ table.
ALTER TABLE %@ ADD COLUMN %@ %@;
IDSRTEncryptionController
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
T@"NSString",C,N,V_groupID
T@"NSString",C,N,V_sessionID
T@"NSString",C,N,V_participantID
T@"NSDate",C,N,V_expirationDate
isPublicKeyDistributed
TB,N,V_isPublicKeyDistributed
isExpired
publicIdentityData
T@"NSData",C,N,V_publicIdentityData
id-initialize-validation
session-info-request
absinthe-hello
Initialize Validation Response: %@
session-info
absinthe-response
sessionInfoRequest
T@"NSData",C,N,V_sessionInfoRequest
responseSessionInfo
T@"NSData",C,N,V_responseSessionInfo
responseTTL
T@"NSNumber",C,N,V_responseTTL
absintheUDID
T@"NSString",C,N,V_absintheUDID
absintheHello
T@"NSData",C,N,V_absintheHello
responseAbsintheServKey
T@"NSData",C,N,V_responseAbsintheServKey
responseAbsintheResponse
T@"NSData",C,N,V_responseAbsintheResponse
responseDeviceScoreNonce
T@"NSString",C,N,V_responseDeviceScoreNonce
id-get-handles
Handle query response: %@
responseHandles
T@"NSArray",C,V_responseHandles
selfHandle
T@"NSDictionary",C,V_selfHandle
SimpleUInt32ToObjectTable_SetObjectForKey
%s: table empty
UI32Table_Set: cannot allocate memory for %@
UI32Table_Set: table resize from %d to %d
UI32Table_Set: replacing object %@ with %@
UI32Table_Set: key %08X at %d (total elements: %d) store object %@
SimpleUInt32ToObjectTable_ObjectForKey_NoRetain
SimpleUInt32ToObjectTable_RemoveObjectForKey
UI32Table_Remove: did not find %08X (from %d entries)
UI32Table_Remove: removing %@ @%d (from %d entries)
SimpleNSStringToObjectTable_SetObjectForKey
NSSTable_Set: cannot allocate memory for %@
NSSTable_Set: table resize from %d to %d
NSSTable_Set: replacing object %@ with %@
NSSTable_Set: key %8@ at %d (total elements: %d) store object %@
SimpleNSStringToObjectTable_ObjectForKey_NoRetain
SimpleNSStringToObjectTable_RemoveObjectForKey
NSSTable_Remove: did not find %@ (from %d entries)
NSSTable_Remove: removing %@ @%d (from %d entries)
IDSPhoneUserRegistryErrorDomain
This device is not currently authenticated for a phone user
This device does not support phone number authentication
userStore
T@"IDSPhoneUserStore",R,N,V_userStore
server
T@"IDSServer",R,N,V_server
phoneNumberValidator
T@"IDSPhoneNumberValidationStateMachine",R,N,V_phoneNumberValidator
T@"FTDeviceSupport",R,N,V_deviceSupport
vc-profile-unlink-handle
forSending
TB,R,N,V_forSending
TB,R,N,V_forRefresh
forMessaging
TB,R,N,V_forMessaging
TB,R,N,V_resultExpected
com.apple.ids.service
**** Invalid Service Definition: Missing required key: %@  in service dictionary: %@, skipping
com.apple.private.alloy.airtraffic
%@.%@
IDSDService: %p [Identifier: %@ Display Name: %@ Topic: %@   Service: %@   Protocol: %@]
queryService
T@"NSString",&,N,V_queryService
protocolName
T@"NSString",&,N,V_protocolName
launchDarwinNotification
T@"NSString",&,N,V_launchDarwinNotification
launchMachServiceNotification
T@"NSString",&,N,V_launchMachServiceNotification
dataUsageBundleID
T@"NSString",&,N,V_dataUsageBundleID
allowWiProxDelivery
TB,N,V_allowWiProxDelivery
allowMagnetDelivery
TB,N,V_allowMagnetDelivery
shouldShowUsageNotifications
TB,N,V_shouldShowUsageNotifications
allowPartialSendsToSucceed
TB,N,V_allowPartialSendsToSucceed
canUseLargePayload
TB,N,V_canUseLargePayload
sendOnePerToken
TB,N,V_sendOnePerToken
wantsPhoneNumberAccount
TB,N,V_wantsPhoneNumberAccount
iCloudBasedService
TB,N,V_iCloudBasedService
tunnelService
TB,N,V_tunnelService
holdsMessagesUntilFirstUnlock
TB,N,V_holdsMessagesUntilFirstUnlock
shouldSyncAccounts
TB,N,V_shouldSyncAccounts
shouldNotSyncPhoneNumberAccounts
TB,N,V_shouldNotSyncPhoneNumberAccounts
shouldAllowProxyDelivery
TB,N,V_shouldAllowProxyDelivery
wantsLocalReflectedSend
TB,N,V_wantsLocalReflectedSend
wantsCheckTransportLogHint
TB,N,V_wantsCheckTransportLogHint
watchOnlyService
TB,N,V_watchOnlyService
allowsDuplicates
TB,N,V_allowsDuplicates
useiMessageCallerID
TB,N,V_useiMessageCallerID
allowPendingMessagesForInactiveDevice
TB,N,V_allowPendingMessagesForInactiveDevice
allowSendingMessagesToInactiveDevice
TB,N,V_allowSendingMessagesToInactiveDevice
shouldSilentlyFailMessagesOnSwitch
TB,N,V_shouldSilentlyFailMessagesOnSwitch
enabledOnlyWhenPaired
TB,N,V_enabledOnlyWhenPaired
forceHTTPQueriesOnly
TB,N,V_forceHTTPQueriesOnly
wantsRemoteErrors
TB,N,V_wantsRemoteErrors
TB,N,V_useTransportZone
TB,N,V_shouldFilterInactiveAliases
dontFilterSelfMessagesForUnknownDevice
TB,N,V_dontFilterSelfMessagesForUnknownDevice
passThroughMessagesFromStorage
TB,N,V_passThroughMessagesFromStorage
pushToWakeDisabled
TB,N,V_pushToWakeDisabled
disableOnLowRAMDevice
TB,N,V_disableOnLowRAMDevice
properties
T@"NSDictionary",&,N,V_properties
legacyIdentifier
T@"NSString",&,N,V_legacyIdentifier
linkedServiceNames
T@"NSArray",&,N,V_linkedServiceNames
adHocServiceType
TI,N,V_adHocServiceType
duetIdentifiers
T@"NSArray",&,N,V_duetIdentifiers
accountSyncMinCompatibilityVersion
TQ,N,V_accountSyncMinCompatibilityVersion
T@"NSString",&,N,V_identifier
pushTopic
T@"NSString",&,N,V_pushTopic
serviceName
T@"NSString",&,N,V_serviceName
T@"NSString",&,N,V_displayName
superService
T@"NSString",&,N,V_superService
allowLocalDelivery
preferencesDomain
legacyPreferencesDomain
linkedServices
adHocServices
start-count
DevicePolicy
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
iMessageSpam
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
v36@?0q8B16d20@"NSError"28
BTLink
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
hostState
releasing pipe %@
ReportDataCorruption
/bin/cp /dev/uart.log /tmp/uart-%.06f.log
IDSBTLink
Downstream
Upstream
Start collecting logs due to %@ Magnet corruption
Downstream data corruption
Upstream data corruption
DontSubmitDataCorruptionToAggd
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
com.apple.IDS.MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
-[IDSBTLink flushBuffer:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IdentityServices-1171.53.12/IDSAgent/IDSBTLink.m
direction == IDSLinkDirectionTransmit || direction == IDSLinkDirectionReceive
nil peer
asleep
awake
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
com.apple.IDS.MagnetDataCorruptionRecoveryTimeInMs
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
ready but already suspended
Ready to write into pipe %@
Link manager send2 errno %d
%c Magnet    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
T@"NSString",R,C,V_linkID
id-get-dependent-registrations
Get Dependent Registrations response: %@
T@"NSString",C,V_service
responseRegistrations
T@"NSArray",C,V_responseRegistrations
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
T@"IDSPeerIDManager",W,N,V_peerIDManager
IDStatusQueryController
T@"IDSIDStatusQueryController",&,N,V_IDStatusQueryController
sigs
T@"FTMessageDelivery",R,N,V_messageDelivery
setupNewSession configuration: %@
cleanup session %@ local object %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, triggered locally %@
%@ - Could not find session with uniqueID %@ to update members, ignoring...
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
SecMWCreateSessionSeed
MessageProtection
IDSRTEncryptionKeyMaterial
SecMWCreateSessionSeed for MKM (error %@)
SecMWCreateSessionSalt
_SecMWCreateSessionSalt for MKS (error %@)
T@"NSUUID",R,N,V_MKI
T@"NSData",R,N,V_MKS
T@"NSData",R,N,V_MKM
createdAt
T@"NSDate",R,N,V_createdAt
isSentLocally
TB,N,V_isSentLocally
isGeneratedLocally
TB,N,V_isGeneratedLocally
setting up the realtime encryption controller for the unique ID: %@
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
Did not find any date to schedule a heart beat, triggering get dependent request
%@ - Using random device heartbeat override value of %d seconds
%@ - Using device heartbeat override value of %d seconds
Expiration dates per user: 
%@ => %@
Next heartbeat date: %@ (in %.0f seconds)
We did not find any heartbeat to schedule
_scheduleDependentRegistrations for %.0f - %@
_scheduleRescueHeartBeat for %.0f
_updateDependentRegistrations fired
Resetting expiry for %@
Not setup yet, ignoring expiry update...
%@ - UserID is empty (%@), ignoring expiry update...
%@ -  updateExpiry failed sanity check. Returning current date + %f seconds expiry was %f
Setting new expiry %@ (seconds %f) for user %@
Not setup yet, ignoring accounts change...
Accounts changed, updating expiry map
Missing userID for account %@, ignoring...
Did not find existing expiry for user %@
Not setup yet, ignoring _fetchExpiryTimeIfNecessary
There is one or more valid accounts but none of them has an expiry date, refreshing the entire list!
Did not delete the heart beat date from the keychain, error: %d
Initializing endpoint subscription {self: %@}
Received endpoints for initial subscription state {self: %@, endpoints: %@}
Endpoints subscription source did discover relevant endpoints {self: %@, localURI: %@@, endpointMap: %@}
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
Unexpected streamID %lu found when asked to translate %@
Previous Remote Instance IDs (next:%d) {%@}
Get Service User ID's Completed with response %@
Get Admin Access Tokens Completed with response %@
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
%p %s Sending IDS message, no CoreDuet on platform
Assign localCID(%04x) from CID set
Clear localCID(%04x) from CID set
Attempt to clear reserved CID 0, skip.
Link is connected, perform a block.
Cancelling block by ID needs to pass in ID and success var.
Cancel block by ID succeeded: %@
Link is connected, cancel a block.
ElectAccountIdentity
!setState serviceTypeName=%@
RollAccountKey
CurrentCluster missing GroupIdentifier {currentCluster: %{public}@}
Failed to get fullClusterFromKeychain {accountGroupkey: %{public}@, error: %{public}@}
Failed to update groupID {accountIdentityCluster: %{public}@, groupID: %{public}@, error: %{public}@}
Create account keys
Create Account Key
!setState currentIdentity=%@
!setState serviceTypeNames=%@
!setState oldCluster=%@
Rolling full identity
Creating new full identity
!setState newAccountIdentity=%@
Failed to create new account identity -- Fail {error: %{public}@}
Failed to create adming identity -- Fail {adminServiceIdentity: %{public}@}
Failed to create signingServiceIdenitty -- Fail {signingServiceIdentity: %{public}@}
Created service identities {fullServiceAdminIdentities: %{public}@, fullServiceSigningIdentities: %{public}@}
Rolling old cluster
Creating new cluster
!setState newCluster=%@
!setState existingIdentityGroupName=%@
!setState accountIdentityGroupName=%@
Failed to create publicClusterBlob -- Fail {error: %{public}@}
!setState newGroupID=%@
Failed to fetch item from CloudKit -- Fail {fetchError: %{public}@}
Fetched CloudKit account -- Continue {fetchedCloudKitItem: %{private}@}
Unexpected existingGroupID class -- Fail {fetchedCloudKitItem: %{private}@}
recordName mismatch -- Fail {recordName: %{public}@, existingIdentityGroupName: %{public}@}
Failed to store cluster in keychain -- Fail {storeError: %{public}@, newCluster: %{public}@}
Stored cluster in Keychain
Failed to store in group server {groupServerItem: %{public}@, groupServerError: %{public}@
Stored cluster in GroupServer {groupServerItem: %{public}@}
!setState groupServerGroupID=%@
Failed to save identityItem to CloudKit -- Fail {cloudKitItem: %{public}@, cloudKitSetError: %{public}@}
Updating newCluster groupID {newCluster: %{public}@, groupID: %{public}@}
Stored Cluster in CloudKit -- Done {cluster: %{public}@}
Cleaning up after failed election {cluster %{public}@}
Failed to clean up failed election {cluster: %{public}@, error: %{error}@}
Saving key manager state {self: %@}
We need a keychain migration -- not saving anything
Registration key manager beginning locked load of identities
Loaded registration key pair {publicKey: %@, privateKey: %@, signature: %@, isMigratedSignature: %@, upgradePending: %@}
Unable to load a registration key pair {signature: %@, publicKey: %@, privateKey: %@}
 ********  DEFAULT SET TO FORCE IDENTITY REFRESH  *******************
 ****************  IDENTITY SERIALIZATION UPDATED  ******************
 ********************************************************************
Failed generating CSR due to insufficient context {userID: %@, privateKey: %p, publicKey: %@}
Removing current message protection identity and key pair
Failed to remove serialized message protection identity from keychain {error: %d}
Scheduling timer for purge of previous identity {delay: %f}
Already scheduled timer for purge of previous identity
Purge previous identity timer fired!
Scheduling timer for regneration of registered identity {delay: %f}
Regenerate identity timer fired!
We no longer need to re-generate our identity -- continuing without re-generation
%@ instance created with a dead file descriptor!
%@ endSession at %@!
%p: reset the stall detector
Error %d received on socket
Remote side closed the connection, cleaning up
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending socket
Failed to queue outgoing data - possible message fragmentation issue
Sent %ld bytes. Remaining outgoingData %lu (s:%d)
socket timeout, ignoring...
got send error %d, cleaning up...
%@ removing socket %d from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
Done checking for system signed in account { identifier: %@, systemAccount: %@ }
Already have search running for email: %@   registrationInfo: %@
Cancelling searches for email: %@
Bundle has no principal class
Failed to initialize bundle
Plugin initialized successfully
Plugin failed to initialize
Plugin does not conform to protocol
Starting pending registrations...
Skipping this registration for heartbeat consideration, it is an SMS one - and the SIM is not present: %@
    => %@
   * NOT sent, forcing through the registration controller
   * Registration says it can't register, not registering: %@
   * sent
...Done
Server heartbeat hit
Skipping this registration for heartbeat consideration, it is an Apple ID one - and it apparently can't register: %@
*************** Heartbeat: We need to register now! {timeToNextRegister: %f} *********************
  => *NOT* adding pending registration: %@, we're currently registering
  => adding pending registration: %@
  => *NOT* adding pending registration: %@
Registrations pending heartbeat: %@
Updating registration heartbeat
Posting pending registration heartbeat update
Starting registration heartbeat with interval: %f
                    Time to next registration: %f
                  Setting heartbeat timer for: %f
Stopping registration heartbeat
We missed a heartbeat, we should fire
Updating heartbeats if necessary
Registration state changed, re-checking registrations
Bag reloaded, checking intervals
These differ, reseting timer!
Adding registration info to heartbeat: %@
Removing registration info from heartbeat: %@
Using random heartbeat override value of %d seconds
Using heartbeat override value of %d seconds
Non-sensical heartbeat value: %@ from server, using default: %f
Initing IDSUTunPeer %p
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@
 Deallocing UTunPeer %p
%@ ignoring btuuid update from %@ to %@
%s: self %p reporting stats for %@ %@
%s: self %p reporting stats for sockets %@
Enabling power logging for transport stats
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
enable urgent cloud connection %@.
enable default cloud connection %@.
enable sync cloud connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable cloud connection for peer %@:%p withReason %ld
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
UTUNPeer sendMessage
sendMessage: %@ priority: %@ messageType: %@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ Enqueuing message %@ on %@ connection %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Told to enable urgent cloud, but we are allready enabled
Enabling urgent Cloud Connection on this peer 
Told to enable default cloud, but we are allready enabled
Enabling default Cloud Connection on this peer 
Told to enable sync cloud, but we are allready enabled
Enabling sync Cloud Connection on this peer 
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
Loading IDS keychain data with account %@
  => We need a keychain unlock, not loading anything!
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
  => We need a keychain migration, not saving anything!
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
Registration controller starting up (%@)
*** Lockdown state is expired, not allowing registration
Returning device support registration supported: %@
 SIM State says cannot register, registration State: %@
 SIM is not inserted, cannot register
System does not support SMS identification
System does not support Apple ID identification
We don't support this unknown registration type { registrationType: %d }
System does not support FaceTime
System does not support Calling
System does not support Multiway
System does not support iMessage
System does not support IDS
We don't support this unknown registration service type { serviceType: %@ }
We can't register this: %@
Registration controller register
Registration request: %@  (Environment: %@)
Cannot register, unsupported
Cannot register, invalid push token: %@
Unsupported registration on this system: %@
Request to register sms identified info: %@
We can try to migrate this guy: %@
Request to register apple ID based info: %@
Sending authentication for registration for new auth token and auth cert: %@
Sending IDS authentication for registration with existing auth token: %@
Sending IDS authentication for registration with existing auth token/cert: %@
Ensuring validation checks for: %@
Attempting to register unknown registration type (%d): %@
This registration is missing region information, despite being already authenticated, let's fix that: %@
  => We found a good one we can pull from, let's fix ourselves using that: %@
We were told that we're done authentication here, but we have no token... bailing register with bad signature
...trying to IDS Auth or Register: %@
...we didn't authenticate, and we can't ids authentcate or register. not good!
Request to unregister: %@  (Environment: %@)
Removing registration info from keychain
Cannot deregister, invalid cert: %@
Ignoring registration updated, registration is disabled: %@
Ignoring registration starting, registration is disabled: %@
Registration controller notify registration failure
Ignoring registration failure, registration is disabled: %@
Registration controller notify registration success
Ignoring registration success, registration is disabled: %@
Ignoring succeeded registration, registration is disabled: %@
** Empty vetted emails, we should make sure to query them
Failed HTTP registration with info: %@       error: %d
Ignoring need for new identification, registration is disabled: %@
Ignoring failed identification, registration is disabled: %@
SMS agent requested new identification
Ignoring succeeded IDS Authentication, registration is disabled: %@
Failed IDS Authentication with info: %@ error: %d info: %@
Ignoring failed IDS Authentication, registration is disabled: %@
IDS Authentication failed - Login failed
  This was an SMS reg
This was an apple ID reg
Let's re-auth, retry %d
Too many retries, failing
Failed, retry %d
 => Added confirmed emails: %@
We still have no vetted email response for: %@   waiting....
We still have no default profile response for: %@   waiting....
We already have a region ID, skipping query
We were told that we're done authentication here, but we have no token... not doing anything
This was just a simple auth, we're done here
Ignoring succeeded current emails request, registration is disabled: %@
 * Empty vetted emails, sending off handles gathering
 **** missing auth cert, can't send vetted email request
Empty region ID, querying initial region
Non empty region ID: %@
Registration Controller - sending IDS authentication: %@
Ignoring succeeded initial region query, registration is disabled: %@
Registration Controller - succeeded authentication: %@
Ignoring succeeded authentication, registration is disabled: %@
Registration Controller - succeeded region validation - registration info: %@   regionID: %@  phoneNumber: %@  extraContext: %@  verified: %@
Ignoring succeeded region validation, registration is disabled: %@
Ignoring failed authentication, registration is disabled: %@
System not setup, ignoring auth failure and not proceeding
Authentication failed. Notifying, and unregistering %@
Ignoring succeeded link handles confirmation, registration is disabled: %@
Ignoring note registration required, registration is disabled: %@
SIM Is not ready for registration, ignoring this.
  => Is CDMA: %@
  => Tracking %d registration(s)
  => Re-HTTP registering registration: %@
  => Registration matches, not re-registering: %@
  => No registrations active
  => Device is not entitled for this, ignoring tech change
Registration Status change, seeing if we need to re-register
SIM Inserted. Checking to see if we need to re-register due to SIM swap.
  => Re-sending HTTP registration for SMS registration: %@
SIM Removed. Checking to see if we need to re-register due to SIM removal.
  => Sending HTTP *deregistration* for SMS registration: %@
Adding registration to list of tracked registrations: %@
  => Adding registration: %@
Removing registration from list of tracked registrations: %@
Adding registration to list of authenticated registrations: %@
Removing registration from list of authenticated registrations: %@
Adding registration to list of active registrations: %@
Removing registration from list of active registrations: %@
Device name changed from %@ to %@
Device name was updated from %@ to %@  (Registration: %@)
  => Deferring registration for device name change, we're locked
  => Sending registration for device name change
First unlock, checking deferred registrations: %d
  => Sending deferred registration: %@
Missing MainID, Not sending IDS Authentication/Register for: %@
Missing ProfileID, Not sending IDS Authentication/Register for: %@
Missing regionID, Not sending IDS Authentication/Register for: %@
Missing regionBasePhoneNumber, Not sending IDS Authentication/Register for: %@
Sending IDS Authentication for: %@
Sending IDS Registration for: %@
Not sending IDS Registration or Authentication for: %@
removing token %@ from %@
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature for message %@: blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
*** options : %@
[!] This session will be suppressing client notifications { _uniqueID: %@ }
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
QuickRelay is enabled for service: %@, session: %@.
QuickRelay is disabled for service: %@, session: %@.
UTun bypass: %@ service: %@, session: %@.
use QR directly for %@.
Could not create APS Connection for session
Created session (%@) %@ with destinations %@
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
IDSDSession::dealloc for %@
Destroyed session %@
%s: session %@ connection %p
Looking for device unique ID in: %@
  => Push token: %@
    => Found unique ID: %@
  => No unique ID found
Looking for device token in: %@
  => No token found
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
%@ - No account with unique ID %@ found to send a message, bailing...
    My token -> %@
No destinations to send message to, ignoring...
sendMessage - using fromID %@ given aliases %@  destinations: %@
Sent message to %@
isLegacyOverride: %d
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
Message %@ got response code %lu error %@ lastCall %@
This Phone Continuity session supports the local message. Trying the local...
Have %lu cached client data to send
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
Added cachedData - total %lu cached client data to send
IDSClientChannel has excessively cached too many packets
%p: writeHandler: IDSDSession %p
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
Sending invitation to %@, %@ <%@>
connectQRServer failed due to invalid parameter.
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
Connect to QR server succeeded for %@.
Cannot fan out the join notification to the group, no groupID!
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
<%@> read returned 0 bytes errno %d
ClientChannel read error %@
The client left the group session. IDSGroupSession can be removed.
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
socket %d connected to IDSClientChannel %p
ClientChannel read error %@, _state %d
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
Adding sessionInfo data (size: %lu)
Couldn't decode kClientChannelMetadataType_SessionInfoKey bytes into NSDictionary
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
Couldn't create NSUUID for kClientChannelMetadataType_TimeDeltaBetweenFirstPacketAndMKIKey.
Unknown metadata type: %u
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
No legacy connection, bailing...
Got connection data %@, _isLegacy %@
Failed to get connection data with error %@, _isLegacy %@
Trying to send invite to inactive device, ignoring %@...
Using local account, can only send invitation to active device, ignoring %@...
destinations %@ newDestinations %@ pairedDestinations %@ allOtherDestinations %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Creating connection data, _isLegacy: %@
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
We are the receiver, we can only DECLINE the invite, not CANCEL
Sending CANCEL %@, %@ <%@>
Sending unauthenticated public identity {localUnauthenticatedFullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
Malloc error when creating key material, ending call...
Sending accept to %@, %@, <%@>
acceptInvitationWithData isWithDefaultDevice (%@) _enableQuickRelay (%@), _useQRDirectly (%@), _isFaceTime(%@)
No remote blob, bailing...
Failed to get legacy connection data with error %@
At ACCEPT invitaion - from %@, session %@, expecting remote device encryption but remote does not specify
acceptInvitationWithData remoteBlob %@
Failed to get local connection data, bailing...
Sending unauthenticated public identity {publicIdentity: %{private}@}
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Sending accept to %@, %@ <%@>
Sending decline to %@, %@ <%@>
Sending MESSAGE to %@, %@ <%@>
Ignoring incoming accept from %@, session is not waiting for an invite response anymore
No participantID, bailing...
No message version, bailing...
Setting peer protocol version to %d
Received accept from %@, session %@, fromToken %@.
Adding %@ to set to cancel
Canceling invitations to %@
Starting legacy connection with remote blob
Received accept from %@, session %@, expecting remote device encryption but remote does not specify
Starting connection with remote blob
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
Received decline %@ from %@, %@
Ignoring Decline from %@, %@, not in destinations: %@
Invite was declined { givenReason: %u }
Invite was declined with reason alias deactivated { fromID: %@, _inviteTokens: %@ }
Suppressing decline, other recipients
Invite was declined, notifying everyone I invited: %@
Received CANCEL %@ from %@, %@
Ignoring CANCEL from %@, %@, not in destinations: %@
Received MESSAGE %@ from %@, %@
Received END %@ from %@, %@
Sending REINITIATE (subcommand %@) %@ to %@, %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Clearing invitation timeout timer
Setting invite timeout to %f seconds
Session invite timed out after %f seconds
Clearing connection timeout timer
Setting connection timeout to %f seconds
Session connection timed out after %f seconds
Clearing end session timeout timer
Setting end session timeout to %f seconds
End session timed out after %f seconds
Clearing session packet loss timer
Setting session packet loss timer to %f seconds
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
set initial link type %d for session %@.
Made options to open socket %@
sessionStartWithSocketDescriptor socketDescriptor %d
openSocketToDevice deviceID %@, _useQRDirectly %@, _isFaceTime %@
open socket for session
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
disconnectGlobalLink failed with error %@
Cleanup session: %@
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
Ending session with data
Sending END to %@, %@ <%@>
Ending session
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
Releasing the client channel %p
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Session: %@ received error: %@
Invalid error type posted to session: %@   error: %@    class: %@
Ignoring error, we're already dead anyway!
Enabling audio ? %@
Muting ? %@
Setting preferences %@
Setting invite timeout to: %d
%@ session did start %@ with error %@
%@ session did stop with error %@
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
Resetting preferences for service %{public}@
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
destinationsContainFromID: %@ is not in the destinations %@
Updated destinations for group %@ to %@ (triggeredLocally %@)
Participant query in process or defaults are not set for hardcoded QR session info, _groupID: %@, _destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
Received the new MKM %lld milleseconds after the membership change event for group %@
participant-id to push token mapping changed for sessionID: %@, participants: %@
Allocation failure for session %@, status = %d, code = %d
<%@> getActiveParticipants - Couldn't look up the URI for participant ID %@
 invalid port %d
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_RemoveAllPair
IDSSockAddrPairTable_RemovePair - found no match for [%s-%s]
IDSSockAddrPairTable_RemovePair - removed [%s-%s], remaining %d pairs.
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
Quit - notifying about shutdown
Quit - shutting down daemon
Quit - goodbye!
*** Clearing ID status cache ***
*** Reloading Logging Settings ***
Unhandled signal: %d
Failed to set user dir suffix: %{darwin.errno}d
CSDB config lookaside {result: %d}
IDSAgent exception caught on main thread: %@
We're not loaded; ignoring save to disk for cache %@
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@
  => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Cannot get participantsForGroupID, no groupID!
participantsForGroupID %@ are %@
Sent messageID %@ to the destination %@ command %@ (account %@, fromID %@, message %@)
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
*** Clearing traffic ***
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
     Server daily global%@ budget is: %@   Current count is: %@
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     Server daily budget is: %@   Current count is: %@
     **** we are over budget
     No budget specified
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
isQuickSwitching set to %@
We're already switched to (cbuuid %@), ignoring request to switch...
Initiating QuickSwitch to (cbuuid %@)
Finishing up switching
QuickSwitch initiated with error: %@
QuickSwitch time %f
Resetting communication before QuickSwitch
Removing the keychain and in-memory data used for OTR communication.
Resetting all OTR sessions to allow communication with the new active paired device.
Calling completion block to finish switching
Skipping %@, paired device doesn't support syncing of that service
Trying to sync only phone number account, but this is disallowed by the service. { service : %@, accountInfo : %@ }
Syncing %@ account changes to paired device %@
Transmitting phone number
Received message is missing sync command %@, ignoring...
Incoming synchronization message %@
Incoming preferred account update message %@
Incoming sync message with unknown command %@ %@
We have no accounts, disabling all of them
This is an AppleID account on an iCloud based service, not disabling account %@
Disabling account %@
This is an AppleID account on an iCloud based service, not removing account %@
Removing account %@
No accounts in account info, ignoring...
Account info for %@ is not registered, ignoring...
Empty phone number alias
Retrieved phone number alias %@
This is an iCloud based service, ignoring Apple ID account
Found valid apple ID account, cleaning up sentinel alias
No phone number alias, stripping sentinel
Found valid Apple ID account, creating real account with remote info %@
  Creating a linked account: %@
Found existing account for service %@ and loginID %@
Account has unregistered but selected aliases -- registering {serviceName: %@, aliases: %@, uris: %@}
Found valid phone number account %@
Couldn't find service that matched %@, bailing
Service disallows syncing of phone accounts, bailing { serviceName : %@ }
Didn't find a local account, setting one up
Still don't have a local account to update
Updating local account
Failed to get name for full account identity cluster {cluster: %{public}@}
Fetching cluster from keychain
!setState keychainClusterIdentifier=%@
Deserialized cluster
Failed to create fullClust from clusterData {clusterData: %{private}@, error: %{public}@}
Deserialized dictionary missing clusterData {deserialized: %{private}@, error: %{public}@}
Unexpected object type in deserialized dictionary {deserialized: %{private}@, error: %{public}@}
Failed to deserialize group keychain data {data: %{private}@, error: %{public}@}
Failed to get keychain data {identifier: %{public}@, error: %{public}@}
Storing cluster in Keychain {fullCluster: %{public}@}
Stored cluster in keychain {fullCluster: %{public}@}
Failed to store cluster in keychain {error: %{public}@}
Failed to serialize cluster data {fullCluster: %{public}@, dictionary: %{private}@, error: %{public}@}
Failed to create data from cluster {fullCluster: %{public}@, error: %{public}@}
Failed to store data in keychain -- Not in Circle {error: %{public}@, identifier: %{public}@}
Removing cluster from keychain
Failed to remove item from keychain {identifier: %{public}@, error: %{public}@}
Failed to create cluster from data {error: %{public}@, data: %{private}@}
Failed to fetch message protection identity!
Failed to create publicDeviceIdentityData {publicDeviceIdentity: %{public}@, error: %{public}@}
Failed to create publicDeviceIdentity {fullDeviceIdentity: %{public}@, error: %{public}@}
Failed to create/roll device identity {cluster: %{public}@, error: %{public}@}
Failed to get account identities {error: %{public}@}
Failed to get public account identity data {publicAccountIdentity: %{public}@, error: %{public}@}
Failed to get public account identity {fullAccountIdentity: %{public}@, error: %{public}@}
Failed to get signing service Identity data {signingIdentities: %{public}@, serviceKeysDictionary: %{public}@, error: %{public}@}
Failed to get admin service Identity data {adminIdentities: %{public}@, serviceKeysDictionary: %{public}@, error: %{public}@}
Failed to get account identities for accountKeysDictionary {cluster:  %{public}@, fullAccountIdentity: %{public}@, adminIdentities: %{public}@, signingIdentities: %{public}@, groupID: %{public}@}
setHasSpaceAvailable %@
didReceiveData length %luB
Received data too big (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
Bonjour request to send local message {guid: %{public}@, topic: %{public}@, deviceIDs.count: %{public}@ command: %{public}@}
Bonjour send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
Bonjour did send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour failed to send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour did finish sending message {guid: %{public}@, topic: %{public}@, sentDeviceIDs.count: %{private}@
Bonjour failed to send message to any recipient {guid: %{public}@, topic: %{public}@, deviceIDs: %{private}@}
Bonjour received message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
%@: control message: hello cannot decode controlChannelVersion
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSDRegistrationPushManager now tracking registered account {accountID: %@}
IDSDRegistrationPushManager stopped tracking registered account {accountID: %@}
IDSDRegistrationPushManager is now accepting incoming pushes
IDSDRegistrationPushManager is no longer accepting incoming pushes
Registration push manager received registration push
Device received registration push {style: %@, userID: %@, service: %@}
System not setup -- ignoring registration push
Found matching candidate account for registration push {account: %@}
Unhandled action in registration push message {action: %ld}
Registration push manager re-identify
Re-identifying accounts in response to registration push
Registration push manager re-provision
Re-provisioning accounts in response to registration push
Registration push manager re-register
Re-registering accounts in response to registration push
Registration push manager repair registration
Repairing registration on accounts in response to registration push
Registration push manager validate credentials
Validating credentials in response to registration push
Received validate credentials response {userID: %@, status: %@, origin: %@, message: %@}
Validate credentials returned an error -- taking no action {status: %@}
Updating registration state {registrationType: %lld, toState: %lld, err: %d}
Registration Control item was not present in the keychain
Registration Control can't be loaded because of a keychain error %d.
Getting registration state {registrationType: %lld, keychainError: %@}
Unexpected deviceIdentity class {identity: %{public}@}
Unable to get group.publicRepresentation {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Unable to create group signature {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Saved group to group server {groupID: %{private}@}
Saved group to group server { groupID: %{public}@ }
Failed to save group to groupServer {pg: %{private}@, publicGroupRepresentation: %{private}@, signature: %{private}@, forwardingTicket: %{private}@, groupServerError: %{private}@}
responseEngram %@ responseGroupID %@ error %@
Got groups {%@ %@ %@ %@}
Fetched Entry from GroupServer {entry: %{public}@}
Fetched Group from GroupServer {groupID: %{public}@}
Failed to set groupID on created group {entry: %{public}@, group: %{public}@, groupID: %{public}@, error: %{public}@}
Failed to create group from server reponse entry {entry: %{public}@, publicSigningIdentity: %{public}@, error: %{public}@}
Failed to create fetched group, could not create publicSigningIdentity {deviceIdentity: %{public}@, error: %{public}@
Unexpected sponsot accountIdentity {sponsorPublicAccountIdentity: %{public}@}
No sponsor pair {entry.publicKeyData: %{public}@, keyToSponsorPairMap.lenth: %{public}@}
got groups %{public}@
Groups returned from server don't contain expected group {groupID: %{public}@, entries: %{public}@, resultGroup.applicationData: %{private}@}
Failed to get group {groupID: %{public}@, error: %{public}@}
group->groupPublicData -- Start {group: %{private}@}
Failed group->groupPublicData -- unexpected accountIdeneity class {groupContext.accountIdentity: %{public}@, group: %{private}@}
Failed group->groupPublicData -- unexpected cypher {group.cypher: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create publicGroupData {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create signature {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create data from entry {error: %{public}@, group: %{private}@}
group->groupPublicData -- Success {publicDataRepresentation.length: %{public}@}
group->groupPublicData -- Success {publicDataRepresentation: %{private}@}
groupPublicData->Group -- Start {data: %{private}@}
Failed groupPublicData->Group {error: %{public}@, data: %{private}@}
Failed group->groupPublicData -- unexpected deviceIdentity class {groupContext.accountIdentity: %{public}@, data: %{private}@}
Failed group->groupPublicData -- couldn't get pair from groupData {error: %{public}@, entry: %{private}@}
Failed group->groupPublicData -- no participants {pair: %{private}@}
Failed group->groupPublicData -- Failed to create group {error: %{public}@, entry: %{public}@, pair: %{public}@, sponsor: %{public}@}
Failed group->groupPublicData -- Unexpected sponsor accountKeyClass {sponsor: %{public}@}
group->groupPublicData -- Success {group: %{private}@}
Cypher was not of the expected type, this is a programmer error {cypher : %{public}@}
Unexpected class for deviceParticipantPublicKey {publicKey: %{public}@, participant: %{private}@
Failed to create GroupServerEntry from publicDataRepresentation -- failed to deserialize {error: %{public}@, data: %{private}@}
Failed to create GroupServerEntry dataRepresentation -- Failed to serialize {error: %{public}@, dictionary: %{public}@}
Unsupported schema version: %@
An unnecessary paired device keychain migration was attempted.
System is shutting down, not creating daemon
identityservicesd launched (%@) user: %d
identityservicesd launched: (%@) user: %d
    (build time %s %s)
Loading services
Done loading services
Bringing up capabilities
Bringing up restrictions
Got id query completed with updates %@ fromURI %@ service %@ success %@ error %@
Opening up the grant MIG port
Opening up the NSXPC Interface
Now accepting query grants, setup complete
Daemon listener history
Listener %@:%@ registered %@ with capabilities %@ bundleID %@
for entitlements %@
and notification services %@
Resetting preferences to 0 for all services
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
IDSAgent took %f seconds to launch
Service info: %@
Enabled accounts info: %@
Dependent devices info: %@
Active device uniqueID: %@
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
Exception generating setup information for listener: %@
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Tried to remove nil listener object
Removing listener ID: %@
Removed Apple Care listener
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
Starting push handling with services %@   topics: %@
Updating push handling with services %@  topics: %@
Updating local push handling with topics: %@
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
All targets for broadcast %@
Broadcast Priority: %d Service: %@ 
Broadcast ID: %lld
Broadcast: outgoing generic notification %lld
Working on outgoing broadcast
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: done working on outgoing notification id %lld
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
Entitling portName %@ for all services %@
Granting access %d to listener: %@ pid: %d entitlements: %@
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
%s: received client request to change notification services from %@ to %@ 
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
closesocket [%@]
Broadcasting delivery stats to client
Non-dsBased account used self alias as fromURI! Defaulting to enabled alias - %lu available.
IDSDaemonMIGInterface auth port died: %@
IDSDaemonMIGInterface: Could not create server with name: %@
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
Port name request for: %@ from pid: %d granted: %@
Incoming file descriptor request
updateService: %{public}@, withPreferences: %{public}@.
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
accountIdentitiesClusterForRegistration -- start
Account identity cluster election failed {error: %{public}@}
Tried to get account identity cluster with device not in keychain sync circle {error: %{public}@}
Engram inactive -- not fetching {error: %{public}@}
Existing account identity cluster fetch failed {error: %{public}@}, seal: %{public}@
Tried to get account identity cluster with Engram disabled {error: %{public}@}
existingFullDeviceIdentity -- start
Failed existingFullDeviceIdentity -- missing cluster {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain item not found {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain error getting device identity {error: %{public}@}
Failed getExistingFullDeviceIdentity -- missing fullAdminIdentity {error: %{public}@, cluster: %{public}@}
Failed existingFullDeviceIdentity -- missing publicAdminIdentity {error: %{public}@, fullAdminIdentity: %{public}@}
Failed existingFullDeviceidentity -- failed to create deviceIdentity {error: %{public}@, publicAdminIdentity: %{public}@, data: %{private}@}
existingFullDeviceIdentity -- success {deviceIdentity: %{public}@}
Engram key store keychain did become available -- invalidating caches
Notifying Engram key store that identities did update {listeners: %@}
control channel simulating decryption failure ############### - close socket / call receive handler
control channel cannot use socket: -1
UTunController control channel for [%@] connected for read (getsockopt=%d error=%d: %s)
control channel receiving control message..
UTunController control channel for [%@] disconnected on recv: errno=%d: %s
UTunController control channel for [%@] disconnected on recv: connection closed
Dispatch receiveHandler
receiveHandler is being called, so ignore this one
control channel failed to decrypt (%s) of control channel data: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
control channel decrypted (%s) new message (%@, size=%lu  data: %@) (from %lu)
control channel corruption detection heuristic hit - resetting
UTunController control channel for [%{public}@] connected for write (getsockopt=%d error=%d: %s)
control channel sending control message.. (have %lu)
UTunController control channel for [%@] disconnected on send: errno=%d: %s
control channel sent 0 bytes - try again later (%d)
control channel sent %ld bytes (%lu left) (s:%d)
control channel finished sending bytes but no message to remove
control channel finished sending bytes no more message send pending
Clearing %@
control channel suspending (%d) awaiting default paired encryption negotiation
control channel failed to encrypt (%s) message [%@] error: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
control channel encrypted (%s) new message (%p, size=%lu original size=%u  data: %@) (_sendingPriorityMessage: %d)
Handle Fairplay authentication failure...
%@ - %@
Caching object {key: %{private}@, object: %{private}@}
Evicting object {key: %{private}@
Delegate return NO to shouldEvict -- Bail {key: %{private}@}
Tried to evict object that is not in cache {key: %{private}@}
Eviction timer did start {interval: %.6f, leeway: %.6f
Stop eviction timer if empty
Not stopping eviction timer {backingStore.count: %ld}
Stopping eviction timer {backingStore.count: %ld}
Evicting items {currentDate: %{public}@}
Evicting item {key: %{private}@, evictionDate: %{public}@}
Not evicting item {key: %{private}@, evictionDate: %{public}@
Delegate returned NO shouldTTLCacheEvictExpiredItems -- Bail
Cache miss {key: %{private}@
Delegate replace cached object {key: %{private}@, previous: %{private}@, replacement: %{private}@}
Replacement object is nil {key: %{private}@}
Extending TTL for fetched object {key: %{private}@, oldEvictDate: %{public}@, newEvictDate: %{public}@
Current repair interval: %f multiplier: %ld index: %ld max: %f
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids/registration/account-controller/state
Current system account state { iCloudAccount: %@, iTunesAccount: %@ }
Current IDS device state { deviceName: %@, model: %@, productName: %@, productVersion: %@, build: %@, pushToken: %@, idsUniqueID: %@, environment: %@ }
Accounts list:
  * Device Name: %@    Service: %@     Hardware: %@    Token: %@   Unique ID: %@   Linked URIs: %@   Device Data: %@   Sub-services: %@   Identities: %@   Client data: %@   public key: %@ HSA trusted: %@
Phone repair timer hit
Next repair date %@
Not setting up repair (registrationSupported: %@) (supportsSMSIdentification: %@)
Loaded last repair date %@
We've missed the next repair date %@, repairing now...
Loaded initial repair date %@
Generated inital repair date %@
Resetting phone number repair counter
Hard deregister requested
Hard deregister complete, shutting down daemon
Triggering final deregister
Account with unique ID %@ already removed, ignoring...
Tried to remove a nil account, ignoring...
Tried to remove ad hoc account directly, ignoring... { uniqueID: %@ }
Tried to add a nil account, ignoring...
Account with unique ID %@ already added, ignoring...
Adding account %@
Broadcaster for account added
Tried to add a nil primary account, ignoring...
Tried to add ad hoc account directly, ignoring... { uniqueID: %@ }
Primary account with unique ID %@ already added, ignoring...
  ** Found existing matching account, removing: %@
Removing linked account: %@
Client requested add account with unique ID %@ (Environment: %@)
Client requested remove account with unique ID %@ (Environment: %@)
Tried to disable a primary account with no unique ID, ignoring...
Tried to disable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to disable ad hoc account directly, ignoring... { uniqueID: %@ }
Account with unique ID %@ is already disabled, ignoring...
Tried to disable an account with no unique ID, ignoring...
Tried to disable an account we don't know about, ignoring...
Disable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
Clearing BIZ cache
Tried to enable a primary account with no unique ID, ignoring...
Tried to enable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to enable ad hoc account directly, ignoring.. { uniqueID: %@ }
Account with unique ID %@ is already enabled, ignoring...
Tried to enable an account with no unique ID, ignoring...
Tried to enable an account we don't know about, ignoring...
Tried to enable an account with unsupported type -- ignoring and disabling... { serviceType: %@, accountType: %d }
Enable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
 Will disable similar account with accountID: %@
   Forcing account to disable: %@
Client requested enable account with unique ID %@ (Environment: %@)
Client requested disable account with unique ID %@ (Environment: %@)
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
Checking %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
Account matches!
Unknown myID type -- type must be a valid domain { myID: %@ }
  => Found **extra** account %@, deleting...
  => Found **mismatched** account %@ ID %@, deleting...
  => Found existing account %@
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
 => Creating a local account for service %@
Setting up local accounts
Finished setting up local accounts
Refreshing local accounts
Cleaning up local account %@
Cleaning up account for local service %@
Using %@ to trigger a re-register
One of the local accounts was registered in the cloud, triggering a re-register to update
Starting local setup
Stopping local setup
Waiting on accounts to load, the account controller isn't ready yet
 * Tried to setup ad hoc account directly %@, ignoring...
 * No adhoc services for %@, ignoring...
 * Setting up adhoc accounts for %@
  => Found **extra** adhoc account %@, deleting...
  => Found **mismatched** adhoc account %@ primary ID %@, deleting...
  => Found existing adhoc account %@
  => Created ad hoc account %@
  => Updating primary account info for %@
  * Enabling account: %@
  * Disabling account: %@
  => Triggering a re-register for primary account
 current service names %@ new service names %@
Setting up ad hoc accounts
 => Done setting up ad hoc accounts
Setting up linked accounts, if necessary
 Service: %@  has linked services: %@
 We already have linked accounts, let's just double check the activation
 * They're not the same, let's fix that
 * Enabling account: %@
 * Disabling account: %@
  ... and enabling it
 => Done setting up linked accounts
Not importing legacy accounts, we've already done this
Importing from domain %@ => %@
Skipping service import: %@, we already have accounts: %@
Legacy Keys: %@
Legacy Preferences: %@
  => Nothing interesting in the accounts, moving along
Importing accounts...
Importing account: %@
Login ID: %@, new login: %@
Exception migrating legacy accounts { service: %@, exception: %@ }
Migrating legacy account found no enabled accounts { legacyDomain : %@ }
Persisting %@ accounts
Deleting legacy account prefs {path: %@, success: %@, error: %@}
SU cleanup
Scheduling a re-register in %d seconds
Re-register timer hit
We still need to re-register, triggering it now...
We picked %@ to re-register
We've already re-registered, ignoring...
We found a phone number alias on the iMessage account, triggering GDR request for %@
We found a phone number alias on the FaceTime account, triggering GDR request for %@
All services to remove: %@
After SIM insertion, user denied SMS registration found, changing error {accounts: %@, service: %@
Registration state changed but we can't register; not enabling phone number accounts
After registration state changed, enabling account: %@ on service: %@
Not enabling account after registration state changed {isUserDisabled: %@, shouldDisableService: %@, registrationError: %ld, account: %@}
Setting up local
Not setting up local
Created new iTunes account based on system account { service: %@, account: %@ }
Loaded services { count: %@ }
We already have an existing account with for this uniqueID -- not loading { uniqueID: %@, existingAccountInfo: %@, newAccountInfo: %@ }
Failed to create account { uniqueID: %@, service: %@, accountInfo: %@ }
Tried to load account on a device that does not support this service/account type; dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Loaded accounts { count: %@ }
Enabling accounts { accounts: %@ }
Bad preference domain { service: %@ }
Defaults dictionary loaded { domain: %@, accounts: %@, enabledAccounts: %@ }
Failed to create account { service: %@, uniqueID: %@, dicitonary: %@ }
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
First unlock, kick accounts check
Waiting for migration, not firing timer
Under first lock, not firing timer
Repair timer fired: %@
Account repair timer fired
Cleaning up dead keychain items
Cleaning up keychain items for service: %@
 => Done
Checking disabled account {serviceIdentifier: %@, shouldRepair: %@, registrationError: %lld}
 => Enabled, account uniqueID: %@, service name: %@
 => Disabled, skipping: %@, service name: %@
 *** Done
  ** Found active SMS based account: %@
Bypassing repair -> Safeview?
Bypassing repair -> hasHardDeregistered
Checking if account is candidate for force repair {isUserDisabled: %@, isRegistered: %@, account: %@}
   Checking account for deletion: %@
   Account is primary, it should not be deleted
  => Account does not appear to be primary, disabling it, and deleting it  (%@ <> %@)
   Checking account registration status: %@
   Not attempting repair service/account pair {registrationError: %ld, account: %@}
   Account isn't enabled or registerd -- enabling {isEnabled: %@, unregistered: %@}
   Account appears to be in good form: %@
  => Account does not appear to be primary, we shouldn't be here...  {primaryUserName: %@, loginID: %@, hasActiveAppleIDBasedAccounts: %@}
   Not enabling account due to irreparable registration error {registrationError: %ld, account: %@}
   Account isn't enabled and/or registered -- enabling {isEnabled: %@, unregistered: %@}
  => We have no active SMS registrations, skipping
   Account isn't enabled, enabling local account
 => We have no active apple ID based accounts for service: %@
Creating new account based on existing account with service %@ login ID %@
 => No other signed in AppleID accounts, skipping
   => Has SMS Account active: %@
Repairing iTunes based accounts if needed (Primary account: %@)
 => Done repair attempt
iTunes isn't signed in, no repair needed, signing out
iTunes is signed in -- ignoring request to sign out { systemAccount: %@ }
Repairing iCloud based accounts if needed (Primary account: %@)
iCloud isn't signed in, no repair needed, signing out
iCloud is signed in -- ignoring request to sign out { systemAccount: %@ }
   => This was an SMS registration, let's see what we should repair
 => Kicking SMS based account: %@
 => Kicking SMS based linked account: %@
 => Kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based linked account: %@
 ** Tried to repair account: %@
   => This was an AppleID registration, let's see what we should repair
 => DSIDs match to %@, kicking for repair %@
 => Kicking Apple ID based account: %@
 => Kicking Apple ID based linked account: %@
Notified of registration success for service: %@   registration: %@   account: %@
Kicking phone number accounts repair
Kicking Apple ID iCloud based accounts repair
Kicking Apple ID non-iCloud based accounts matching dsID: %@ repair
Re-registered succesfully, setting force re-register version to %d
       found push token in: %@
Updating push token to device ID map
Missing push token or device ID for registration %@
New push token to device ID map: %@
No public key found {deviceID: %@}
Received connected change to %@ for device with uniqueID %@
Received nearby change to %@ for device with uniqueID %@
Received cloud connected change to %@ for device with uniqueID %@
No uniqueID provided, can't save uuid %@
New properties after set %@
Broadcasting nsuuid %@ to service %@
Device Properties - Current UniqueIDs: %@
Device Properties - New Unique IDs: %@
Device Properties - Old Unique IDs: %@
Saving device properties settings: %@   (domain: %@)
Loading device properties
 => Loaded device properties %@
 => No device properties loaded
Could not split the profileId in order to send only the numerical part to AuthKit. profileId: %@
DSID NSNumber extracted from the profile id is null. profileId: %@
Updating AuthKit for DSID: %@, AKAppleIDServiceType: %ld and inUse: %@
Couldn't find device certificate (service: %@)  (uri: %@)
Couldn't find account (service %@)  (uri: %@)
 => Failed account, let's see if we should kick it (Registration Error: %d)
 => Not retrying for error: %d, disabling account
 => We sent too many SMS, not retrying, disabling account
 => Garbage signature, disabling
 => This appeared to be a rate limit error, re-registering
 => This appeared to be a server or connectivity error, re-registering
 => We need a new signature, re-registering
 => This is a bad signature, re-registering
 => Default error: %d   disabling
 => Unregistered account, let's see if we can register it
 => account has no vetted aliases, and it's never registered, let's ignore it
 => Unknown account status, let's disable it
 => Authenticated, kicking a register
 => %@
 => *** Other status: %d
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
============= New WPLinkManager %@ starting =============
From LinkManager: created a new WPContinuity instance %@
client instance created
calling continuityDidUpdateState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
Missing phone number authentication entitlement -- failing authenticate phone request {client: %@}
Authenticating phone {uuid: %@, client: %@}
Missing phone number authentication entitlement -- failing phone authentication signature request {client: %@}
Generating phone authentication signature over data {uuid: %@, client: %@, data: %@, length: %lu}
Generated phone authentication signature {authCert: %@, publicKey: %@, nonce: %@, signature: %@}
Failed to generate phone authentication signature {error: %@}
Missing phone number authentication entitlement -- failing phone user subscription source request {client: %@}
Setting phone user subscription source {uuid: %@, client: %@, subscriptionSource: %@}
Fetching phone user subscription source {uuid: %@, client: %@}
Failed to fetch selected phone number registration subscription { error: %@ }
  Found unvalidated/failed alias: %@
  Found bad alias: %@ => %@
  Found bad alias, it was my phone number: %@ => %@
Account is missing sentinel alias, repairing...
Indicating that we need to re-register for alias repair
  Updating with repaired aliases: %@
No active aliases, setting default value { aliasStrings: %@ }
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
Query failed; refreshing credentials {error code: %d}
Setting registration error to %d (%@) from reason %d
IDSDAccount initWithDictionary %@ service %@ uniqueID %@
Tried to create an account with an empty uniqueID (%@)
Tried to create an account with an empty service (%@)
Tried to create an account with unknown account type %d
IDSDAccount initWithLoginID %@ service %@ uniqueID %@ accountType %d
Tried to create an ad hoc account (loginID %@   service %@) with no primary account
Tried to create a primary account using an ad hoc service %@
Dealloc IDSAccount: %@
Missing object %@ or key %@ when changing accountInfo
Display name changed for account: %@    %@ => %@
Requested display name: %@ is not part of valid account aliases: %@, ignoring!
Request to clear Display Name on Account, Removing Display name %@
Account with uniqueID %@ was disabled by user
Login ID changed for account: %@    %@ => %@, registering
IDSDAccount status %d, calling handler: %@
Can configure account with aliases: %@
* No aliases to configure, nothing to do here
Storing setup handler %p  %@
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
Activating alias { alias: %@, filteredAliases: %@ }
Deactivating alias { alias: %@, filteredAliases: %@ }
Found duplicate device %@, replaced with newer device %@
Duplicated device %@, ignoring...
Broadcasting registration status info changes
Broadcasting aliases changes
Broadcasting vetted aliases changes
Broadcasting profile changes
Broadcasting loginAs changes
Broadcasting displayName changes
Broadcasting account info changes %@
%s returning because duringInit %d isBeingRemoved %d
%@ - write account defaults: %@  (has changes: %@)
%@ - update account with defaults: %@
Current   aliases: %@
Aliases to remove: %@
Aliases to    add: %@
Calling out to linked account: %@
Broadcaster for localDeviceAdded %@ on account %@
Broadcaster for localDeviceRemoved %@ on account %@
Broadcaster for didUpdatePairedDevice %@ on account %@
Notifying %@ delegate of protocol changes to device
 => Checking %@
 => hit!
Push handler returned push token: %@
Starting Phone Number Validation request for %@   with token: %@
Adding self as a phone number validation requestor {self: %@}
Removing self as a phone number validation requestor {self: %@}
Updating registration info: %@
No registration info present, we must have been cancelled
Not reflecting back succeeded identification, registration is disabled: %@
User notification allowed Phone Number Validation delivery, sending
User notification denied Phone Number Validation delivery, not sending
IDSRestrictions - Active: %@
IDSRestrictions - %@ Disabled: %@
Waiting on account activate, the account controller isn't ready yet
 Updating account activation if needed
IDSRestrictions - Disabling account: %@
IDSRestrictions - Re-activating a disabled account: %@
IDSRestrictions -  Manged prefs changed
Notifying all IDS accounts device paired to: %@
Notifying all IDS accounts device unpaired from: %@
%s Set the pending-reset flag back to NO.
%s Could not set the pending-reset flag back to NO.
Able to determine the has-regenerated-secured-encryption-key status. Has regenerated? %@
Unable to determine the has-regenerated-secured-encryption-key status. keychainError: %d
Updated the has-regenerated-secured-encryption-keys flag to: %@  success? %@  keychainError: %d
Removed the has-regenerated-secured-encryption-keys flag from the keychain.
Failed to remove the has-regenerated-secured-encryption-keys flag from the keychain. error = %d
Cannot set paired device capability flags because there is no active paired device.
Regeneration status unknown until keychain becomes available.
Regeneration already occurred.
Regeneration not supported by paired device.
Regeneration necessary but prohibited due to device lock state.
Regeneration deemed necessary and possible.
Regenerating encryption keys...
Regenerated encryption keys. Marking the encryption keys as regenerated...
Marked the encryption keys as regenerated. Purging paired device keys...
Purged all paired device encryption keys. Requesting paired device info...
Requested paired device info. Regeneration complete!
Continuing local device info gathering after encryption keys were regenerated.
It was unnecessary to continue local device info gathering after regenerating encryption keys.
Unable to purge the paired device secured encryption keys.
Unable to mark the encryption keys as regenerated.
Cannot determine if regenerating keys is necessary until the keychain is available.
Regenerating keys is necessary but currently not possible.
Regenerating keys is unnecessary.
Continuing local device info gathering after determining that key regeneration is unnecessary.
Suspending OTR sessions for protection classes A and C...
Regenerating encryption keys for protection classes A and C...
Suspending OTR session with token: %@
Purged encryption keys for all paired devices. Success: %@
We have all the encryption keys, sending device info back
We're missing their keys but we sent our keys, requesting...
We're missing some keys (A: %p) (C: %p) (D: %p) (locked: %@) (firstLocked: %@) (isWaitingForCapabilityFlags: %@) (mightNeedToRegenerateMyKeys: %@)
Need to connect to the other device, waiting for capability flags...
Might need to regenerate encryption keys, waiting...
Missing class A key, waiting for keychain save...
Missing class C key, waiting for keychain save...
Pairing: Missing class D key
%s Updating notify token state to: isPaired %llu
Update notifier state for paired devices
All devices count: %@
Activating a paired device with CBUUID: %@
WARNING: Local pairing is not supported by this platform. Why was %s called?
Result of activating a paired device with CBUUID %@ is %@
Deactivating paired devices
Cannot ensure communication is possible because there is no active paired device.
Requesting information about the new active paired device.
Requesting information about the new active paired device was unnecessary. Communication is possible.
Received paired device info: %@
%s: received invalid paired device info: %@
%s: invoked when IDSPairingManager did not know about a paired device.
%s setting version %u
Refreshing Paired Device Encryption Keys
Requested paired device info. Refresh Complete!
Device saved class keys sending pending device info
%s reading version: %u, min/max: %u/%u
Empty data, not encrypting
Public/Private Encryption success!
Public/Private Encryption failed :(
OTR Encryption success!
OTR Encryption failed :(
Engram Encryption success! {cypherIdentifier: %@}
Engram Encryption failed :(
Decryption ignored, nil data given? :(
Encryption specified, returning data
Public/Private decryption success!
Public/Private decryption failed :(
OTR Decryption success!
*******************  %@ Error ****************************
***Priority: %ld
***    From: %@
***      To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
******************************************************************
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
** This is for my phone, ignoring
 => User hit yes, adding and validating
 => User hit no, ignoring
Successfully updated password for account (%@:%@): %@
Successfully updated auth token for account (%@:%@): %@
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
IDSDaemon: SetupAccountWithLoginID %@ serviceName %@ accountType %d accountConfig %@ transactionID %@ localObject %@
Process is not entitled for registration, not setting up account, bailing...
No loginID %@, not setting up account, bailing...
No serviceName %@, not setting up account, bailing...
No service registered for: %@, bailing...
Tried to setup ad hoc account directly, ignoring...
Tried to add account with unknown account type %d, bailing...
  ** Setting auth token for loginID: %@
  ** Setting password for loginID: %@
Creating new account with service name %@ login ID %@
Transaction ID %@  messageContext %@
Notifying listener %@ that account %@  is setup
Registration error %@
Linked account Transaction ID %@  messageContext %@
Notifying listener %@ that linked account %@  is setup
Linked registration error %@
IDSDaemon: AddAccountWithLoginID %@ serviceName %@ uniqueID %@ accountType %d accountInfo %@ localObject %@
Tried to add account with no serviceName %@, bailing...
No service registered for: %@, denying
Unique ID matches but not service name for account %@
Creating new account with service %@ uniqueID %@ login ID %@ accountType %d
Not creating new account, we have existing: %@
IDSDaemon _removeAccount %@ localObject %@
No uniqueID provided, bailing
_removeAndDeregisterAccount %@ localObject %@
Disabling and removing linked account: %@
updateAccount %@ localObject %@
enableAccount %@ localObject %@
Enabling linked account: %@
disableAccount %@ localObject %@
Disabling linked account: %@
ISDaemon setLoginID %@ uniqueID %@ localObject %@
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
authenticateAccount uniqueID %@ localObject %@
passwordUpdatedForAccount %@ localObject %@
updateAuthorizationCredentials %@ token %@ account %@ localObject %@
validateProfileForAccount %@ localObject %@
addAliases %@ toAccount %@ localObject %@
removeAliases %@ toAccount %@ localObject %@
validateAliases %@ forAccount %@ localObject %@
unvalidateAliases %@ forAccount %@ localObject %@
activateAlias %@ onAccount %@ localObject %@
deactivateAlias %@ onAccount %@ localObject %@
registerAccount %@ localObject %@
unregisterAccount %@ localObject %@
_reregisterAndReidentify %@ account %@ localObject %@
deactivateAndPurgeIdentifyForAccount %@ localObject %@
hard deregister localObject %@
Trigger final deregister localObject %@
Kicking get dependent for account %@ localObject %@
Trigger accounts repair { localObject: %@ }
Fetching registered identities
Registering for Registration Account Status Metric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Initial: %s services: %@
Reunion: %s services: %@
iCloudSignInWithUserName %@ localObject %@
iCloudUpdateForUserName %@ localObject %@
iCloudModifyForUserName %@ localObject %@
iCloudSignOut %@
iTunesSignInWithUserName %@ localObject %@
iTunesSignOut %@
iCloud sign in hack with userName %@ and password %@ localObject %@
iCloud sign out hack with localObject %@
Updating sub services %@ for service %@ deviceUniqueID %@
Save paired device info: %@
Setting NSUUID %@ on device with uniqueID %@  current pariedID: %@  service %@ localObject %@
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Noting it was before first unlock
 => Ignoring, no change
   => Device properties: %@
Sending continuity reset to IDS clients
Received request to regenerate registered identity
Missing key rolling entitlement -- returning early
System did leave first unlock, checking pending if we cloud paired before unlock
   we did! let's update accounts
in a few seconds
   => posting deferred device update
Broadcasting no devices for account %@ even though we have some
Attempt to use the Registration Control API's without the correct entitlement, Failing request
System has left data protection lock: Checking Migration Status
System has left data protection lock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
Forcing a bag fetch to refresh EN versioning
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
Bad signature for message: %@    blowing peer tokens
Message is destined for an accessory with uri %@
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
MessageOnQueue
Pulled message guid %@ out of msg
Couldn't pull message guid out of %@, using %@
Send FT message action (Peers: %@)
All sends complete
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
  All finished message sending message: %@   to: %@ completeSuccess: %@   completeError: %@  remainingGUIDForSend: %@  already ACK'd: %@ SendTimestamp: %@ 
  All finished acks for message: %@   to: %@ completeSuccess: %@   completeError: %@  remainingACKs: %@
 message is bigger than max size, sending as an attachment message with GUID %@. This will require encryption.
Creating Fanout Message
  => URI: %@
Skipping EN delivery for this token due to local versioning mismatch { myVersion: %ld, bagVersion: %ld , token: %@ }
Skipping EN delivery for this token due to remote versioning mismatch { remoteVersion: %ld, bagVersion: %ld, token: %@ }
Using EN delivery for this token { token: %@, myVersion: %ld, remoteVersion: %ld }
    ** Already sent to this token, skipping
    ** Token %@ lacks interesting property %@
    ** Token %@ lacks required property %@, skipping
    ** Token %@ has property %@ we do not want, skipping
  Finished ack'ing message: %@  to peer: %@   token: %@
  Finished Individual ack'ing message: %@  to peer: %@   token: %@
  Fanout Message Finished sending message: %@  to peer: %@   token: %@
  INDIVIDUAL Fanout message got completion Finished sending message: %@  to peer: %@   token: %@
 Remaining Guid for send %@
 received last 255 for this message, and there are no more messages to send for this one
Were about to skip, but we are the last one in the loop, just send if we need to and go ahead and skip
There is nothing in the fanout message, no need to send it
Creating Fanout Individual Message
 Fanout Individual Message contains %@
 Current Fanout message has size %lu
 This new message has size %lu
 Current Fanout message max size %lu
 Current individual message fits in current fanout message
 Fanout message now contains %lu messages
 Current Destination Count %lu
 Total destination count %lu
Fanout message is full, going ahead and sending it
Now creating a new fanout message to replace the old one thats full
Message timeout %f is longer than session token timeout %f, capping.
We have added the last message, lets go ahead and send out now
Encryption
 message encryption failure: %@ (Type: %d)
 message encryption success:  Size %u  Max size: %d
 encrypted message is bigger than max size, sending as an attachment message with GUID %@
Sent anything? %@
AggregateMessageSend
OutgoingMessage
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
START %@
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
    Wrote data to path: %@
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
IDSDeliveryController sendMessage
Preparing to send message: %@ to people: %@   (have tokens: %@). People to query %@
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Found messagable people: %@
IDQuery
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Sending IDSMessage: %@  topic: %@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
PeerDelivery
Starting Up
Told all registrations succeeded, calling completion blocks
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Received devices with unique ids -> cbuuids %@
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
UTUN sendData
!setState Size=%@
!setState topic=%@
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
Got topic set update %@
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add
peer nearby state changed: %@    screenLit: %@   uniqueID: %@   map: %@
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer nearby changed: %@ -> %@
cloud connectivity changed for default peer: %@.
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Set Enable OTR Timer for 60.0 seconds
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
Daemon XPC Interface Up
Incoming Daemon XPC Interface with new connection %@
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
Building Message delivery
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Sender doesn't support alias deactivated decline, dropping
Enqueuing incoming session invitation block from %@ with key %@
Couldn't create session for invite, bailing...
This invitation should be filtered { toID: %@, sessionUniqueID: %@ }
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Enqueuing incoming session cancel block from %@ with key %@
Enqueuing incoming session message block from %@ with key %@
Enqueuing incoming session end block from %@ with key %@
Enqueuing incoming session reinitiate block from %@ with key %@
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Storing the master key material %{private}@ for %@ token %@
Storing the public key %{private}@ for %@ token %@
Couldn't find the session %@ to clean up!
Cleaning up session %@
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
Updating critical reliability, any sessions need critical state: %@
Empty phone number after registering
Clearing out current aliases
Adding alias: %@
Setting alias as validated
Account already has phone number added, not adding
Ad hoc account %@, can't call %s, ignoring...
Local account %@, can't call %s, ignoring...
Under first lock and keychain upgrade pending, not loading registration for this account
We have no registration info, needs to be created
Our registration types don't match, needs rebuild  (%d vs %d)
Registration type is not supported: %d
Emails are different, we need to rebuild  (%@ vs %@)
Push tokens are different, we need to rebuild  (%@ vs %@)
Didn't find a registration in the keychain for %@ %@
Found pre-existing regionID %@
Found pre-existing base phone number %@
Found pre-existing region context %@
Found pre-existing confirmedEmails emails %@
Setting profileID %@ onto registration
Setting idsUserID (for auth cert), isCDMA, and keyPairSignature on registration using existing registration with the same profileID: %@
Rebuilding aliases for: %@
 => ignoring failed validation email: %@
Existing region profile: %@
We have a profile, and it's validated!
No region ID, we'll use our profile's
Setting idsUserID (for auth cert), mainID, isCDMA, and keyPairSignature on phone number registration {mainID: %@, isC2K: %@, keyPairSignature: %@}
Created new registration info: %@
Using cached registration info: %@
  We have no URIs registered, and we're not DS based, forcing unregistered
  We have no registration cert, forcing unregistered
Setting profileID %@ onto account
Current aliases: %@   for: %@
 => adding candidate email: %@
Adding ad hoc service names %@ to %@
Device Controller says I should maybe try to re-register now: %@
This indeed necessitated a re-register, kicking it off: %@
***** Notified that our previous identity was rebuilt from scratch -- purging identity and re-registering { account: %@ }
***** Notified that a new identity was generated -- re-registering { account: %@ }
***** Keychain migration completed
Account %@ is disabled, ignoring...
****** Forcing Registration, needs migration ******
****** NOT Forcing Registration, we were active, but unregistered, however there's nothing to register: %@ ******
****** Forcing Registration, we were active, but unregistered: %@ ******
Updating vetted aliases to: %@     current: %@   ID: %@
     Added: %@
   Removed: %@
   Registration requires keychain migration, not proceeding
Safely migrating key pair signature over: %@
Registration protocols are empty, this is probably a new install, we'll force a register
Registration identity protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration identity protocol versions different, we'll force a server registration   (%@ -> %@)
Registration identity versions different, we'll force a server registration   (%@ -> %@)
Registration application protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration application protocol versions are different, we'll force a server registration   (%@ -> %@)
Registration key pair signatures are different (%@ -> %@), clearing cert - forcing redentification
Message Protection Public Data Needs Update, we'll force a re-register
****** Someone set default for SMS re-register ******
****** Someone set default for HTTP re-register ******
****** Forcing FaceTime Registration ******
Calling account setup handler %p
We were registered but we have no aliases %@ or dsHandle %@
We were registered, but we're missing our private/public identity keys... will reregister: %@
Setting account: %@ to failed registration
Setting account: %@ to unregistered
Setting account: %@ to authenticating  (Reg status: %d)
Setting account: %@ to authenticated  (Reg status: %d)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for restore)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for push token)
Setting account: %@ to registering  (Reg status: %d)
Setting account: %@ to registered
  Stop Registration Agent for: %@
Registration is not active on account %@, ignoring...
 => Forwarding to Primary: %@
 => Re-registering and re-provisioning: %@
  ** Removing authentication credentials **
Device is still under first data protection lock, changing request to a deferred re-identification
Daemon reregister/reidentify account
  ** Re-identifying from beginning **
  ** Re-registering **
Device is still under first data protection lock, deferring request
Migration is complete, checking to see if we should re-register now
Account was created during setup assistant, no need to re-register: %@
System started backup: %@
System restore state changed: %@
We had a pending GDR, kicking it off now: %@
Daemon activate account registration
****** Purged keychain data ******
*** Activating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
Registration info is not supported on this device, disabling: %@
   ** Failed enabling registration, disabling... **
Using server: %@:%@
Couldn't get bag url
Priming Server bag
...done
Daemon deactivate account registration
*** Deactivating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
*** simply marking account as unregistered: %@
*** removing registration from keychain: %@
 => Authenticate (Environment: %@) %@
Starting auth for: %@
Asked to authenticate, but haven't received push token yet, waiting... (Mine: %@  APSD: %@)
Client requested re-authenticate (Environment: %@)
Retrying registration, to check for backup state
Migrating Apple ID based registration info: %@
Rebuilding aliases for: %@ (%@)
Checked whether system setup dependencies are complete { haveDependenciesCompleted: %@, accountType: %@, hasSetupCompleted: %@, isPhoneNumberAuthenticationDuringSetupAllowed: %@ }
Daemon register account
Re-register called (Environment: %@) %@
Asked to register, but haven't completed upgrade/restore, current state: %@
Asked to register, but phone accounts are disabled {currentStatus: %lld}
We were missing candidate alias: %@, adding it
Asked to register, but haven't received push token yet, waiting... (Mine: %@  APSD: %@  Env: %@)
Client requested re-register: %@ (Environment: %@)
Daemon unregister account
 => Deregister: %@ (Environment: %@)
Client requested de-register (Environment: %@)
Client password updated
Clearing signature, and re-registering
Client updating auth ID: %@  token: %@
... Saving
Informed of push token change to: %@, reregistering (from: %@)
Informed of push token change to: %@, but no need to reregister (from: %@)
Received reload bag push for: %@
 => Reloading iMessage bag
 => Reloading FaceTime bag
 => Reloading FaceTime Audio bag
 => Reloading FaceTime Multiway bag
 => Ignoring, we're not authenticated for: %@
 => Not updating handles, this is not an apple ID based account for: %@
Not issuing handle gathering, we're in progress now
 => Kicking off handle gathering for: %@
  (currentAliases: %@)
  (currentVettedAliases: %@)
  * Sending handle update request for: %@
Handles query completed with result: %@   account: %@
My current handles: %@
My current vetted handles: %@
My current vetted emails: %@
Asserted Emails: %@
My new aliases: %@
Newly added: %@
 => All handle based account, not showing available notification
 => DS handle based account, not showing available notification
 => Not adding, new handles does not contain this alias
 => Not adding, this is my phone number
** Adding notification for %@  on device %@  on apple ID: %@ for service: %@
** Not showing notification, service is not configured to show them
** No new handles!
 => We should auto configure all handles
    Vetted: %@
   Current: %@
      Checking: %@
         => Not in alias strings: %@
         => Not in auto register: %@
         => Already in auto register set
      => Already in alias set
** Auto registering handles: %@
No handles to auto register
 *** This was successful, but handles were empty? Ignoring...
 *** Handles query failed, status: %d
Received device updated push for profile: %@   token: %@   service: %@  for: %@
Ignoring update - we have recent registration events
System not setup, ignoring devices updated push for: %@
Device is still under first data protection lock, ignoring for: %@
  Empty user ID, ignoring for: %@
  Unknown profile ID ID, not proceeding for: %@
 => Ignoring a device update from myself for: %@
 => Ignoring, we're not registered for: %@
 => Kicking off device and handles gathering for: %@
Received handles updated push for profile: %@   status: %@   for: %@
System not setup, ignoring handles update push for: %@
Should retry (resultCode %ld) (retries %d) (%@)
Should not retry (resultCode %ld) (retries %d) (%@)
iCloud pairing account is usable, updating device properties
iCloud pairing account is not usable, not updating device properties (registered: %@, primaryRegistration: %@, isEnabled: %@)
Device is still under first data protection lock, deferring request for: %@
Not issuing dependancy check, we're not through buddy yet for: %@
Not issuing dependancy check, we're in progress now for: %@
Issued dependent registration check for account: %@   service: %@
Device query completed with   Account ID: %@   service: %@
  => seconds: %f
 *** This is our first dependent handles check, we're just storing them
 *** Devices query failed, retrying in %f
 *** Not notifying for device name: %@  service: %@, we already know about this one!   hardware: %@
 *** Not notifying for device name: %@  service: %@, don't have any valid handles!   hardware: %@
 Queued notification for device name: %@   service: %@  handle: %@ hardware: %@
  Found similar account: %@
We don't have an enabled account for service %@ with %@ as an alias, ignoring...
 Adding notification for device name: %@   service: %@  handle: %@
Flushing cache for: %@
Updating active URIs: %@   service: %@
   Sending to active sessions for URI: %@   sessions: %@
   No active sessions from: %@
Updating caller ID to phone number: %@
Starting registration for: %@
Updating registration for: %@
Succeeded registering: %@  (newly registered: %@)
Saved: %@
vettedAliases: %@
Checking to see if I should confirm aliases for: %@
Aliases that are unvalidated: %@
Forcing a handles query request post register to pull the current state
Registration failed for %@   (Error: %d)
Failed, %@ => Disabling service
Server denied registration
Removing keychain info
We've been rate limited, disabling
Absinthe failed, just disabling
Too many SMSs, deactivating me
 => Will retry SMS Registration: %@
 => Resetting status to waiting for auth response: %@
 => Will retry Authentication: %@
 => Not retrying, max retries hit
 => User has disabled SMS Authentication, disabling the account
 => User has disabled SMS Registration, disabling the account
Broadcasting registration failed for account %@
Needs deletion: %@ (%@)
Deleting account ID: %@
Deregistration succeeded for %@ - %@
Ignoring re-identification request, registration is disabled: %@
Registration controller requested new registration, starting from scratch
Ignoring re-identification request, this is an Apple ID based account
Started authenticating for info: %@
Succeeded authentication for info: %@
Updating profileID: %@
Authentication failed for info %@    with error code: %d
Auth failed but we're registered, ignoring...
Removing profileID
Updating vetted handles to include: %@
Successfully confirmed email address: %@
Successfully requested validation for email address: %@
Succeeded email unlink for handle: %@
Updating vetted handles to remove: %@
Failed email unlink for handle: %@
Failed email confirmation for address: %@
Need to authenticate: %@, re-registering
Failed email validation request for address: %@  error: %d
Succeeded Validated Email Query info: %@    Emails: %@  (Session: %@)
Succeeded region validation with region ID: %@  phoneNumber: %@  context: %@  verified: %@
Resulting registration info: %@
Failed region validation for registration info: %@      error: %@   info: %@
 => Remove aliases: %@   for: %@
Request to remove aliases: %@
Empty aliases, ignoring
Removing candidate email: %@
Email was candidate, just removing: %@
Removing confirmed email: %@
Alias is registered, needs re-register for: %@
Alias wasn't registered, moving along: %@
Email was unconfirmed, just removing: %@
Client request to remove aliases: %@
 => Add aliases: %@
Empty alias, ignoring
Request to add aliases: %@
 => Found my phone number: %@
 => Current aliases: %@
 => Vetted aliases: %@
 => Adding alias: %@  (and as candidate)
Client request to add aliases: %@  account: %@
Request to validate aliases: %@
%@ is already validated %@
Request to validate aliases: %@, but device is not authenticated
%@ needs to be validated
%@ should be registered
Alias all already validated, registered, returning
Found matching alias, starting validation
Failed to start email validation for aliases: %@  (Registration: %@)
We're under first lock, not validating aliases: %@
We've recently queried the vetted handles on the account, we'll use the local vetting status (%@)
Client request to validate: %@  account: %@
Request to unlink aliases: %@
Request to unvalidate aliases: %@, but device is not authenticated
We're under first unlock, not unvalidating aliases: %@
Found matching alias, removing it
Failed to start handle unlinke for handles: %@  (Registration: %@)
 => Final: %@
Client request to unvalidate: %@  account: %@
***** Request to deactivate and purge my identity
 => Unregistering
 => Purging my message protection identity
Client request to refresh valid aliases
Request to refresh valid aliases, but device is not authenticated
Client request to validate profile info: %@   account: %@
Broadcasting refresh registration for account %@
System did leave first unlock, checking pending items
   We had a pending handle request, kicking off
   We had a dependent reg request, kicking off
   We had a pending re-identify request, kicking off
   We had a pending re-register request, kicking off
Using Max GDR in 24 hour period override value of %d 
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
IDS responding to sign-in { domain: %@, username: %@, token: %@, hasPassword: %@, accountStatus: %@, handles: %@ }
Device has hard deregistered -- ignoring sign-in
No username provided -- ignoring sign-in
Saving status to the account { status: %ld }
Created new account for sign-in { service: %@, account: %@ }
Updated existing account with account info { service: %@, account: %@ }
Created new linked account for sign-in { service: %@, account: %@ }
Updated existing linked account with account info { service: %@, account: %@ }
IDS responding to sign-out { domain: %@ }
Device has hard deregistered -- ignoring sign-out
Removing account for sign-out { account: %@ }
Skipping removal of non-Apple ID account for sign-out { account: %@ }
IDS responding to updated account info { username: %@, accountInfo: %@ }
 Device has hard deregistered -- ignoring update
Update called but for account other than the primary iCloud -- ignoring update
Update called but for the primary iCloud -- committing update to relevant accounts
Updating matching account (and linked accounts) with account info { account: %@ }
IDS responding to account modification { username: %@ }
Checking IdentityServices accounts to know if we should attempt a repair { foundAccount: %@ }
Auth token found on account -- attempting to kick iCloud repair logic
We allready have an inflight request for topic %@, checking if we have a backup
We allready have a backup request for topic %@, throwing this request away
We allready have an inflight request for this topic %@, adding it to the backup que
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
Topic %@, has timed out waiting for server response
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
CCCrypt failed with status: %d
====== Personal Key Cache:
   Device ID: %@    Public Key: %@
Clearing public and personal keys
Removing key {pushToken: %@}
%s received nil pairedDevice
Paired device public key A %@
Paired device public key C %@
Paired device public key D %@
Reloading keychain information: %@
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Dictionary has %lu key-value pairs
    => Not saving, got a nil dictionary representation
Final keychain data array count: %lu
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Reloading registration objects from keychain dictionary, %d entries
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
Setting IDS auth cert: %p   for ID: %@
Returning SMS main ID: %@   signature: %@
Setting SMS main ID: %@   signature: %@
Posting iMessage allowed value from IDSDaemonCapabilities { allowiMessage: %@, allowFaceTimeAudio: %@, allowFaceTimeMultiway: %@, supportedServicesFlags: %llu }
IDSDaemonCapabilities received carrier bundle change callback -- updating capabilities
IDSDaemonCapabilities received operator bundle change callback -- updating capabilities
(Daemon) addPairedDevice (cbuuid: %@)   (requestID: %@)   (localObject %@)
(Daemon) Told to add a paired device %@
(Daemon) Notifying client paired device added: %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device.
(Daemon) connectPairedDevice (cbuuid: %@)   (requestID: %@)   (localObject %@)
(Daemon) setupCompletedForPairedDevice (cbuuid: %@)   (requestID: %@)   (localObject %@)
(Daemon) switchActivePairedDevice (cbuuid: %@)   (requestID: %@)   (localObject %@)
(Daemon) redeliverMessagesForDevice (device ID: %@)   (requestID: %@)   (localObject %@)
Notifying client paired device deleted: %@
(Daemon) unpairDevice (cbuuid: %@)   (requestID: %@)   (localObject %@)
(Daemon) forgetDevice (cbuuid: %@)   (requestID: %@)   (localObject %@)
(Daemon) getPairingDevices (requestID: %@)   (localObject %@)
(Daemon) getPairingDevices requestID %@ yielded CBUUIDs: %@
(Daemon) getPairedDevices (requestID: %@)   (localObject %@)
(Daemon) getPairedDevices requestID %@ yielded CBUUIDs: %@
(Daemon) setAllowedTrafficClassifiersForDevice (device ID: %@)   (classifiers: %@)   (requestID: %@)   (localObject %@)
Process is not entitled for setting the allowed traffic classifiers.
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)   (requestID: %@)   (localObject %@)
Process is not entitled for local pairing.
Processing local device info query...
Responding to local device info query: %@
Broadcasting local device info to client
Responding to paired device info query: %@
Broadcasting paired device info to client
Processed getDependent queue
IDS registration center notified that Engram key store did update identities; notifying listeners
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
*** Sending message: %@
 *** Too many registrations this last while, we need to come back to try later  (%d of %d)
Kicking dequeue of pending requests
 ** Not sending, we have current authentications in flight, %@
 Sending pending authentication: %@
 No pending authentication
 ** Not sending, we have current registrations in flight, %@
 Sending pending registration: %@
 Removing pending registration, can't register: %@
 No pending registration
 Sending pending deregistration...
*** Lockdown state is expired, not doing absinthe validation
ids/authenticate/fail
!setGroupState(%llu) main-id=%@
!setGroupState(%llu) service-id=%@
!setGroupState(%llu) successful=%@
!addGroup(%llu) authenticate
ids/authenticate/success
ids/registration/fail
!addGroup(%llu) register
ids/registration/success
IDS registration success
All IDS registrations success
Not reflecting back email query failure, registration is disabled: %@
Not reflecting back email query success, registration is disabled: %@
Registration identities updated; notifying listeners
 => Has registration in queue: %@
Registration center process registration message
Final Active registrations: %@  (For: %@)
Message class: %@  delivered with error: %@  code: %d result: %@   ID: %@
Overriding response code registration message! {overrideResultCode: %ld}
Overriding response alert on specified services! {phoneOverrideService: %@, emailOverrideService: %@}
  Message delivery failed with code: %d
  Message delivery failed with result code: %d  error: %@
Received registration response for: %@   HBI: %@  services: %@
Processing registration response for service { service: %@, status: %@, serverErrorDetail: %{public}@ }
No value in response, we're using HBI: %f
Success, next registration date is: %@
Success, Using fallback registration date
*** Matched registration user ID: %@ for user ID: %@
 Marking as C2K: %@
 Result status: %@
 Success!
 *** Server rejected registration { candidateRegistration: %@ }
 *** Server rejected registration permanently { candidateRegistration: %@ }
 *** Need new credentials { candidateRegistration: %@ }
 *** Unhandled status code: %@
 => We have a cert, treating as success
 => We have no cert, treating as failure
Registration not disabled, saving. { candidateRegistration : %@ }
Registration disabled, not saving. { candidateRegistration : %@ }
Extracted IDs from bindings
Setting number: %@  on registration: %@
Number is empty, not adjusting
 => Adding self handle
 => Adding sentinel, registration doesn't have a self-handle yet
 => Adding sentinel binding
 => ***** No registered identities, failing registration: %@ ******
Success, registered URIs are: %@
 Notifying for success of: %@
Registration SUCCESS for %@ on %@
***** Notifying, empty URI response: %@ *****
 ***** Notifying for failure (code: %@:%d) of: %@
 *** We have %d unhandled registrations leftover from this: %@
 All registrations were handled, we're good to go
 *** Absinthe Error from Server ***
 Retries so far: %d  trying again
 Maximum absinthe retries reached, failing registration %@
Server rejected registration permanently; failing all candidate registrations
Server rejected registration; failing all candidate registrations
Bad signature, will refresh credentials for all registrations
Registration attempt failed with no status code
Registration attempt failed with status code: %d   error: %@   result: %@
Communicating with registration server failed
Registration center send registration message
This is a deregister, and we have no pending deregistration, bailing
Waiting for setup to complete before sending registration message -- deferring registration
Push handler returned push token: %@, deferring (%@)
*** We have current (de)registrations, deferring (%@)
*** Lockdown state is expired, not sending %@
*** We have an ongoing authentication, deferring register
Constructing client data objects
Done constructing client data objects {serviceTypes: %@}
   *** Removing registration (from active) from queued/current, it is not possible to register: %@
   *** Removing registration (from queued) from queued/current, it is not possible to register: %@
   => Skipping, we have no auth user ID or cert: %@
   client info: %@
environment: %@    token: %@
Skipping sentinel: %@  for service: %@
Adding URI: %@  for service: %@
     already existing phone: %@         already existing appleID: %@
********* Not adding user dictionary, we already had another phone based registration: %@  (registrations: %@)
********* Not adding user dictionary, we already had another apple ID based registration: %@  (registrations: %@)
   Adding user dictionary: %@  for service: %@
   ** Not adding user dictionary, already had one: %@  (%@)
   => Adding auth user ID: %@    cert: %@
   Failing registration for user dictionary: %@,  service: %@
   Skipping user dictionary: %@, no URIs   for service: %@
Registering account keys {accountKeys: %{public}@}
   Services: %@ for register: %@
****** Received registration response: %@
Registering service %@: %@
Queued %@ for validation (%@)
Sending %@   (ID: %@ Environment: %@)
Not sending %@ we didn't have any authenticated registrations
Sending deregistration now...
*** Lockdown state is expired, not sending de-registration
Deferring deregistration for %@
Registration center send hard deregister
Sending hard deregistration now...
Registration center send authenticate registration
*** We have current IDS Authentications, deferring (%@)
*** Lockdown state is expired, not sending IDS Authentication
IDS authenticating registration info: %@
    Push handler returned push token: %@
     AuthInfo: %@
      User ID: %@
      Service: %@
        Realm: %@
  Environment: %@
Message class: %@  delivered with error: %@  code: %d result: %@
   Response user ID: %@
      Response cert: %@
Overriding response code for registration with: %d   remove %@: %@    to stop this
 *** Unauthenticated, need new auth token { auth info: %@ } ***
 *** Server rejected authentication request ***
 received IDS authentication response for message: %@
       response dict: %@
     response userID: %@
        reponse cert: %@
     ** fixed response userID: %@
Setting auth cert for user ID: %@
Found existing registrations to authenticate: %@
Sending IDS Authentication request: %@   (Environment: %@)
Sending report spam message
Sent report spam message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Sending report iMessage unknown sender message
Sent report iMessage unknown sender message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Registration center process handles message
  Received handles query response with result: %d   handles: %@   selfHandle: %@   (actual: %@)   (error: %@)
  Updating %@ with getHandles info
Failing registration, empty get handles response { queuedRegistration : %@ }
Requesting new authentication for registration: %@
Registration center query handles
  => Ignoring query, we have no registration, %@
Added registration %p to getHandles
Adding completion block %p to getHandles queue
Processed getHandles queue
Sending email query for: %@
Requesting validated emails for: %@
  => Ignoring query, we have no auth cert
Sending authenticate registration now...
Registration center authenticate registration
Not sending IDS authentication, we have no main ID for registration: %@
Not sending IDS authentication, we have no profile ID for registration: %@
Not sending IDS authentication, we have no auth token for registration: %@
*** Cannot authenticate, missing SMS signature
Not IDS authenticating, we have no authentication token for: %@
Adding IDS authentication to the queue: %@
 => Really adding
 => Removing old registration info object: %@
 => Simply adding registration info object: %@
Sending registrations now...
Registration center send registration
Not registering, we have no cert for: %@
Not registering, not able to register: %@
Sending registration for %@
Updating registration to the queue (replacing existing): %@
Adding registration to the queue: %@
Registration center send deregistration
Not deregistering, we have no cert for: %@
Adding deregistration to the queue: %@
Cancelling current registration
Removing current registration: %@
Cancelling queued registration: %@
Removing current registration
Removing current authentication
Cancelling queued authentications
Cancelling queued registration
Token changed, _dequeuePendingRequestsIfNecessary
  * Forcing a reset on the registration count, enough time has passed   %d -> 0
Noting another registration in the last %d minutes, we're now at %d registrations  (Max: %d)
Restarting number of registrations at %d (Max: %d)
added mapping device ID [%@] to destination [%@]
============= New LinkManager %@ starting =============
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
closed FIFO file %s
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Sync priority messages queued: %@
Default priority messages queued: %@
Urgent priority messages queued: %@
Urgent Cloud priority messages queued: %@
Messages being sent: %@
Incoming messages not claimed yet:
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
removing old fifo file %s
_suspendBTLink %@ -> %@
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending defaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending defaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending defaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
will bring up WiFi when losing BTLink
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
Link type changed from %lu to %lu, current link: %@
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
removing %@ from links for device %@
%@ is still connecting or connected.
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
Set alternateDelegate %@ for %@
disconnectGlobalLinkForDevice for  %@
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
currentCellularSignalStrength - sessionID %@.
get session info for group %@, session %@, options %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
receive session-info for group %@, session %@, success:%@.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
_handleNetworkChanges %@ = %@
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
Registering for events {eventID: %@, options: %@}
Incoming Rapport message
Rapport connection invalidated
Rapport connection interrupted
Failed to activate companionLinkClient, {Error:%@}
Activated companionLinkClient {self: %@}
Updated local device {device: %@, publicIdentifier: %@}
Start companionLinkClient setup
Dealloc'ing IDSRapportClient
outgoing IDS Message {deviceIentifier: %@, event: %@}
Failed to find companionLinkClient {error: %{public}@, deviceIdentifier: %{private}@}
Found companionLinkClient {deviceIdentifier: %{private}@, client: %{private}@}
Finished sending message {deviceIdentifier: %@, error: %@}
Discovered device %@
Lost device %@
incoming IDS Message {event: %@, options: %@}
Dropping event because it's missing senderID {options: %{private}@, event: %{private}@}
Dropping event because _RPOptionSenderID is undefined {options: %{private}@, event: %{private}@}
Initing UTunConnection %@ %p
Deallocing UTunConnection %@ %p
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed to %@ %@
Removing continuity message %@
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
set the socket detector for %@
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
%@ Failed to open UTun socket, waiting...
UTUNConnection sendMessage
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Clearing fallback stickiness due to: %@
   **** cloud fallback disabled ****
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
%@ sending resource transfer cancel message %@
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
%@ _dequeueMessage - %@ messageCount %lu
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection %@ (%@, messageCount:%d)
Sending transport is not available, waiting...
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT useage is not allowed, failing message
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
%@ created sending power assertion %@
Message %@ added to queue, total message count %d, sendingTopics count %d
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
%@ Sending message[%lu] %@ %@.
%s: statsDictionary is nil for direction %d
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message %@ (originally %@) with command %d
%@ did decrypt message? %@
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu)
Message %@ removed after ack, total message count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA WAS%@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
_otrTokenToArray: invalid OTR token %@
Registration is not supported on this device
Scheduling heartbeat in %f seconds
Phone Number Validation registration agent has sent %d SMSs
Lockdown state: %@
1. Setting SMS status to: IDSSMSIdentificationStatusIdle
Phone Number Validation agent dealloc
SMS registration center notify failure
2. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center notify success
3. Setting SMS status to: IDSSMSIdentificationStatusIdle
Device is currently locked down, we're not able to proceed (State: %@)
SIM is not ready to proceed with registration
Lockdown changed
     ==> We're activated, let's go, waiting...
Registering %@ for lockdown changes
Registration State Changed
     ==> We're in a good SIM State, checking heartbeat, waiting...
Device ID Changed
Checking to see if we restored from backup: %@
     ==> Restored from backup, and we need to re-register here, waiting...
     ==> System backup complete, waiting...
     ==> System restore state changed, waiting...
     ==> Keychain migration complete, waiting...
Phone Number Validation Request Delivery clear timer fired
We're idle, bailing
Overriding Phone Number Validation Request timeout for registration with: %f   remove %@: %@    to stop this
Constructing phone number registration request { mechanism: %@ }
Attempting to send SMS verification { mechanism: %@ }
Still waiting on timeout to clear for next Phone Number Validation request to be delivered, waiting
4. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
     ==> We have no push token, bailing, waiting...
6. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
We're currently iterating over Preflight mechanisms -- continuing { currentPreflightStack: %@ }
Sending Preflight message
Setting test data on preflight message { testData: %@ }
Setting IMSI and PLMN on preflight message { IMSI: %@, PLMN: %@ }
Received preflight response { error: %@, resultCode: %ld, resultDictionary: %@ }
Sending phone number verification { mechanisms: %@ }
Failed preflight -- failing phone number validation
Preflight unsuccessful -- cancelling scheduled heartbeat
_tryToSendSMSIdentification   state: %d
7. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Checking if user has disabled SMS Registration
Phone Number Validation has been disabled by the user
Required registration control value has not yet been set and system setup is in progress -- deferring SMS identification
     ==> We're not in the right state to being Phone Number Validation request identification, waiting...
     ==> Device can't register now, waiting...
     ==> SIM is not ready to register, waiting...
Need to request user permission for SMS, but system setup is in progress -- deferring SMS identification
Should notify about Phone Number Validation requests for this carrier
Obtained permission to send SMS from requestor -- kicking identification
Did not obtain permission to send SMS from requestor -- failing registration
Phone Number Validation Request Notification request is up
     ==> Can't send Phone Number Validation requests right now, need to wait for timeout, waiting...
Already completed max number of Preflights; deactivating service { maxPreflights: %d }
Haven't completed max number of Preflights yet { preflights: %d, maxPreflights: %d }
Already sent max number of SMS; deactivating service { maxSMSSends: %d }
Haven't sent max number of SMS yet { sends: %d, maxSMSSends: %d }
8. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
Preflight disabled; sending legacy phone number verification
Preflight short-circuiting; sending phone number verification with overrides
Beginning preflight
No requestors are present for delegation of SMS permission
SMS registration handle SMS delivery failed
Registration request failed delivery { preflights: %d, sends: %d, attemptsWithoutSend: %d }
No requestors -- we must have been cancelled
Retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d }
9. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Not retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d, shouldBypassRetry: %@ }
Max retries consumed -- failing phone number validation
10. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center handle SMS successfully delivered
Registration request successfully delivered
11. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationResponse
Using telephony-provided timeout { telephonyTimeout: %@ }
Setting timeout for Phone Number Validation Request { timeoutInSeconds: %f, minimumReasonableTimeout: %f, defaultTimeout: %f, telephonyTimeout: %@ }
SMS registration center handle incoming SMS
Received registration request response SMS
Phone number: %@     Class: %@
Signature: %@        Class: %@
Discarding registration request response, because we are not in the correct state to accept it
Invalid number provided: %@   Class: %@
Invalid signature provided: %@   Class: %@
12. Setting SMS status to: IDSSMSIdentificationStatusIdle
Resetting Phone Number Validation Attempt counter from %d to 0
Resetting Phone Number Preflight attempts to 0 { _numberOfPreflights : %d }
SMS registration center timed out waiting for SMS
Timed out waiting for Phone Number Validation response
Sending another
Adding phone number valiation requestor { requestor: %@, requestors: %@ }
Removing phone number valiation requestor { requestor: %@, requestors: %@ }
13. Setting SMS status to: IDSSMSIdentificationStatusIdle
Heartbeat
    State: Idle
    State: Waiting to begin Phone Number Validation request identity verification
    State: Waiting for Phone Number Validation request identity delivery
    State: Waiting for Phone Number Validation request identity response
    State: Unknown: %d
     ==> We're idle, ending this heartbeat madness now
     ==> Waiting for identity response, waiting...
     ==> Registration is not supported, skipping heartbeat
     ==> Waiting to begin SMS, starting now
     ==> Checking phone number state of affairs
CT phone number registration request sent { success: %@, timeout: %@, pushTokenHexEncoding: %@, context: %@ }
Successfully sent registration request
Failed to send registration request
CT phone number registration response received { data: %@, context: %@ }
Handling incoming phone number registration response { phoneNumber: %@, signature: %@ }
Received failed status in phone number registration response { status: %@ }
IDSPhoneNumberValidationStateMachine received carrier bundle change callback
IDSPhoneNumberValidationStateMachine received operator bundle change callback
Resetting cached carrier shortcode value { previousCarrierShortcodeSupportedValue: %ld }
Not getting dependent registrations, we don't have a registration
Not getting dependent registrations, we're not authenticated for: %@
*** Lockdown state is expired, not sending dependent registration check
Adding registration %p to getDependent queue
Adding completion block %p to getDependent queue
Requesting dependent device info for registration: %@
  Received get dependent registration response with result: %d  error: %@
 response for message: %@
   response idsUserID: %@
No GUID for registration %@, when processing getDependentRegistration response
Sending get dependent registration request: %@  (Environment: %@)
We have an outstanding getDependentRegistrations request for userID: %@
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
Set OTR timer %p for %@
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
Setting up negative cache {limit: %ld, timeLimit: %f}
Checking under limit {underLimit: %@, item: %@, cache: %@}
Noting item {item: %@, cache: %@}
Cleaning expired negative items {removeItems: %@, cache: %@}
No expired items to clean
%@ - No account for service name %@ found to send a message, bailing...
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
Group updated, sending ahead to members { topic : %@ }
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
Saving OTR session class %@ store (Success: %@)
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
array_ref = %@
firstCommonName = %@
Completed ID query {uri: %@, fromURI: %@, error: %@}
Purging tokens forURI %@ fromURI %@ fromService %@
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@
Trying to cache Invalid for ourselves, ignoring...
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => From Service: %@
 => Bogus ID query for: %@   ignoring this
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over an hour, resetting query per hour count
New start query date %@
We have at least one valid result, returning cached results %@
We're at %d queries for this hour
We're at %d queries for this hour, can't do more
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Loaded cache: %d items
Loaded cache, but empty
Saving cache: %d items
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
DB version up to date
Updated DB to version 100
Handling register push {userInfo: %@}
Exception caught in IDSRegistrationPushHandler {exception: %@, handler: %@, selector: %@}
Caught exception handling register push {exception: %@}
Handling reload bag push {userInfo: %@}
Caught exception handling reload bag push {exception: %@}
Handling handles updated push {userInfo: %@}
Caught exception handling handles updated push {exception: %@}
Handling devices updated push {userInfo: %@}
Caught exception handling devices updated push {exception: %@}
IDSRegistrationPushHandler - Accepting incoming pushes
IDSRegistrationPushHandler - No longer accepting incoming pushes
QRAllocation destroyed
allocation for QR session %@ expired (%f > %@). Discard it.
allocation timeout timer cancelled
allocation timed out
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
translate deviceID: %@
shared session allocation, previous connect status: %p
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
requested QR allocation for specific provider %ld.
requested QR allocation for any provider
request allocation for a specific address %@
Send allocate request, recipient count: %u, request: %@, time: %.6f.
failed sending allocate request: %@ error: %@  code: %ld
setup allocation for %@ service to device %@
No response found for groupID: %@
Cache response: %@
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
Should switch from %@ to %@
message added to cache: %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response %@ for %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@
trying to change a read-only dictionary
look up peer with URI: %@, push token count: %u, tokens: %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
use QR session info from user defaults: %@.
no push token for participantID %@
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
Received allocate response for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ with payload %@
failed to compose a QR sessionInfo dict
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined
participant has joined with cached response
connecting with sessionInfo %@
recipient waits for session acceptance
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
failed to get combined-software-id due to invalid parameter.
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
 is missing required attributes %@ in sessionInfo %@
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
No ids session for ids session id %@
No ids session id for request id %@
No request id
missing response. Skip AWD report
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect
there is no URI list yet. stopped converting URI to Participant ID - %@
failed to find allocation for session %@
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
add accepted session %@ with token %@
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms.
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
keepalive timer stopped for %@
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
decoded base64 relay-session-id %@
decoded base64 relay-session-token %@
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
Cannot find allocation for session %@, all allocations: %@
keepalive timer started for %@
keepalive timer not found for %@
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
can't malloc to print
map (last @ %u):
================
================
can't allocated used port
can't release unallocated port
Phone number validation mode overridden by user defaults { modeFromDefaults: %ld }
Preflight disabled by server bag override -- falling back to legacy
*********** Override max SMS retries value to %ld
*********** Override max SMS delivery retries value to %ld
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
%@ registering for service %@ as %@
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
Report Spam response: %@
MessageLogErrorTypeFromIDSEncryptionErrorType unknown/unhandled error type: %ld
IDSEncryptionErrorType unknown/unhandled error type: %d
Purge client data called for service %@ token %@ forURI %@ fromURI %@
********************** Access to encryption on the wrong thread, please file this asap **********************
*************************************************************************************************************
Request to encrypt message data for token: %@ deviceID %@
Request to decrypt message data from token: %@ deviceID %@ type: %@
Request to encrypt message data from token: %@  type: %@
Request to decrypt message data from token: %@  type: %@
Missing queue for encryption priority, not running
Cleaning up: %@
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
Exception caught archiving connectionData, skeData Exception: %@
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
Core Data Load Failed
Core Data Load sucdeeded
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Overwriting previous remote failure with local success
Sending via account that's type Local -- forcing local delivery.
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
END %@
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
CompressPayload
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@   dataToEncrypt %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@   dataToEncrypt %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ with forced live message delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Local send completion block with responseCode %ld error %@ lastCall %@ account %@
Calling combined completion block responseCode %ld error %@ lastCall %@ account %@
Attempted to send to remote destiantions on a local account, we are allowed to proxy, begining proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
IDSAccount send remotely
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
!setState command=%@
!setState destinations=%@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Send completed
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage %@  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@   dataToEncrypt %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
No paired device exists, There is no need to proxy
Proxy Delivery is disabled in the service plist, No need to continue
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
No unique ID found - generating new one %@
Loaded unique ID %@
Re-generated my uniqueID %@
Got kIDSRTEncryptionMKMExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionExpireDurationBagKey value, using default value of %u
setAccount: Add the registraion listener for account: %@
setAccount: added the accountID %@ for group %@
setAccount: Remove the registraion listener for account: %@
removeAccountForGroup: removed the account for group %@
requestKeyMaterialForGroup %@ sessionID %@ toSepcificMembers %@
There are no other participants yet. waiting...
_sendRenewedPrekeysToGroups: %@
_dispatchRenewPrekeyTimer is called. We'll renew prekeys in %d
_dispatchRenewPrekeyTimer - Couldn't find the identity for this device. Couldn't renew the prekey.
createRealTimeEncryptionFullIdentity for the token %@
createRealTimeEncryptionFullIdentity failed! Please check the account registration status.
createRealTimeEncryptionFullIdentity - found the existed one %@
createRealTimeEncryptionFullIdentity - the previous one %@ is expired
Created the full identity %{private}@ will be expired at %@
Created the full identity %{private}@, duration %f seconds, will be expired at %@
realTimeEncryptionPublicKeyData - trying to get my device identity
Need to create the full identity for this device first...
Identity is expired. Need to roll the fresh key.
Couldn't get the identity for this device
Returning public key data: %@
Current ACK'd number of prekey: %@ for group: %@
Report the prekey ACK'd (final count: %@) result for group: %@
setRealTimeEncryptionPublicKey: public key: %{private}@ expirationDate: %@ pushToken: %@
setRealTimeEncryptionPublicKey: (TEST) done: %{private}@
setRealTimeEncryptionPublicKey: done: %{private}@ fromID %@
realTimeEncryptionPublicKeyDataForDevice: %@
realTimeEncryptionPublicKeyDataForGroup: couldn't find any identity for %@!
publicKeys: %@
MKM %@ is expired. Removing...
createKeyMaterialForGroup: %@
Failed creating the master key material for the group %@
Created the master %{private}@, the salt %@ with the index %@ for the group %@
The MKI (%@) has been expired, but there is no other active participant for the group %@
The MKI (%@) has been expired for the group %@
setMasterKeyMaterial: %{private}@ forDevice:%@ fromID:%@ groupID:%@ sessionID:%@ 
setMasterKeyMaterial: We'll drop this MKM %{private}@ for group %@
setMasterKeyMaterial: There is no local full identity.
setMasterKeyMaterial: the simulator can't decrypt protectedMKMData %@
setMasterKeyMaterial: done: MKM: %{private}@ MKS: %@ MKI: %@ keyMaterials: %@
requestPendingKeyMaterialsForSession: couldn't find the session %@
We never got the key material for the group %@
We don't have any key material for the group %@
There is no the key material yet for %@. This shouldn't happen...
sendKeyMaterialsToGroup: %@, mkmData: %@, keyMaterialsForDevice: %@, _participantsForGroup: %@, destinations: %@
sendKeyMaterialsToGroup: the device %@ is already having this MKM: %@
sendKeyMaterialsToGroup: the test is going to use protectedMKMData %@, publicIdentity %@
createKeyMaterialForGroup: couldn't pass the key material to the session %@
reset the device prekey
resetKeysForGroup: %@ keyMaterialOfGroup: %@, shouldRemoveCurrentParticipants: %@
unsubscribeEndpointsForGroup: %@ updatedMembers: %@
reportTimeDifferenceBetweenFirstPacketAndMKI: timeDelta: %lld MKI: %@
sendMessage: account: %@ fromID: %@ - failed to get the account forGroup: %@
sendMessage: Sent messageID %@ to the destination %@ command %@ (message: %@)
sendPublicKeyToGroup: %@ - failed to get publicIdentityData
sendPublicKeyToGroup: %@, ACK'd: %@ (destination: %@)
sendPublicKeyToGroup: %@
sendKeyMaterialsToWaitingParticipantsForGroup - Sending the key material to %@ of the group %@ (pending participants %@)
sendKeyMaterialsToWaitingParticipantsForGroup - didn't send any key materials to %@ of the group %@ (pending participants %@)
rollNewKeysAfterResettingPrekeysForGroups: %@ reason: %ld
rollNewKeysAfterResettingPrekeysForGroup: Couldn't find the session for group %@! Coulnd't notifity the device change event
didReceiveEndpointsUpdate: %@ forGroup: %@ - invalidated the previous key rolling timer. Wait %f seconds more again to get more endpoint updates... (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - roll new keys for the group (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - nothing changed.(previous %@)
setMembers: %@ forGroup: %@
setMembers: endpointSubscription %p forGroup: %@
ACK'd prekey count is reset to 0 forGroup: %@
setMembers: endpointSubscription: %p initialResolvedEndpoints: %@ error: %@ _lastKnownGroupIDToPushTokens: %@
didUpdateMembers doesn't do anything since previous %@ and new %@ are same.
didUpdateMembers previous %@, new %@
didUpdateParticipants previous %@, new %@, diff %@
didUpdateParticipants - Sending the key material to %@ of the group %@ (pending participants %@)
didUpdateParticipants - didn't send any key materials to %@ of the group %@ (pending participants %@)
didUpdateRegisteredDevices: %@ for account: %@
Clearing postponed messages
RunawayCheck: Account Guid %@ has %d messages
Database state:
  Outgoing (account_guid, count)
%@  Incoming (topic, count)
Performing initial database housekeeping
  => Setting cache size
  => Invalidating caches
Exception handling message %@, %@
Bad messageData for incoming message %@!
StoreInMessageStore
Storing incoming message
Ignoring storeMessage: %@ forTopic: %@ fromID: %@
Bad message data for incoming message %@!
Finished storing message
Hit exception %@ decoding outgoing IDS message!
Hit exception %@ decoding outgoing duet identifier overrides!
Performing MarkingLocalDestiations with accounts %@ and device %@
Marking all pending delete messages for account %@
Asked to store outgoing message with GUID %@
Ignoring storeOutgoingMessageWithSendParameters: %@ destinations: %@ accountID: %@
Asked to bypass storage for message with GUID %@
StoreInDatabase
Bad destinationData for outgoing message %@!
Hit exception %@ encoding outgoing IDS message!
Asked to send Message with guid: %@  database check for similiar messages that should be sent first says %@
We already have message with guid %@ alternate %@ in the database, dropping this redundant resend without calling completion.
deleteOutgoingMessageWithGUID:alternateGUID: {guid: %@, alternateGUID: %@}
IncomingMessage
Exception performing database block %@
Under memory pressure, closing database
Leaving memory pressure, database remains closed
Message store map %@
Unexpected datatype. %@ should be of type %@, not %@
We have exceeded the maximum queue size, dropping message %@
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
* No pending messages not on %@
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - we're not on a call or wifi is usable, processing query immediately (On call: %@   Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
received message from peer(%d): %s
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
*** Incoming cached ID status query for (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
__HandleRemoteDeviceQuery - enqueuing
Migrated peer id persistent map. {oldVersionNumber: %ld}
Query cache:
Key: %@
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
Found identity:
             device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
Request is for a Number value, however the value for key %@ is not a Number, is %@
Request is for a String value, however the value for key %@ is not a String, is %@
** At least one session token expired for: %@, need to get new ones
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
problem: %@ is going to use the main queue.
genericConnection for %@ using BT datagram link - stop
%p %@ Stall warning [%@]
%p Created the stall detector %@
Timing events: (%0.9f to generate)
Custom Test 1 - simple control channel internal fail
Custom Test 2 - reset before control channel internal fail
Custom Test 3 - simulate the control channel connection reset loop
Custom Test 4 - dump logs with flags %08X
Custom Test 5 - simulate reaching file descriptor limit
Custom Test 5 - made new socket %d
Custom Test 6 - pop alert
Custom Test 7 - trigger utun socket stall detection
Custem Test 7 - Couldn't find the detector %@
Custom Test 8 - filling utun os_channel...
Custom Test 8 - filled utun os_channel after %d dummy writes
Custom Test 9 - Inject Corrupted BT packet.
Custom Test 10 - Control Message + main queue deadlock test (avoidMainQueue: %@
Custom Test 10 - skipping test for %@ on %@
Custom Test 10 - about to ask main queue to sync onto TransportThread for %@ on %@
Custom Test 10 - about to sync onto TransportThread for %@ on %@
Custom Test 10 - sync operation on TransportThread for %@ on %@
Custom Test 10 - sync onto TransportThread returned for %@ on %@
Custom Test 10 - telling control channel to encrypt and send message for %@ on %@
Custom Test 10 - asked main queue to sync onto TransportThread for %@ on %@
Custom Test - unsupported %ld
%@: created the stall detector for %@
%@: Payload Handler! %u => %u proto:%d (len=%ld)
=> data[%@%s]
%@: device %@ is suspending traffic
%@: IDSHC_Compress failed (%lu), revert back to un-compressed
%@: outgoing header (compressed_bit:%d protocol_bit:%d local_cid:%d s_port:%u d_port:%u)
=> c(%luB): [%@%s]
First packet for connection %@
%@: Sending TCP %uB (flags[%02X] [%s%s%s%s])) noseq:%08x
[throughput] link throttling (s: %u)
%@: numPackets %u != max %u - dropping excess
%@: payload handler called while there are pending outgoing urgent packets - [%u] dropped
%@: payload handler called while there are pending outgoing regular packets - [%u] dropped
%@: dropping unknown proto[%u] packet [%@]
%@: cannot find connection for outgoing packet [%u => %u] in [%@]
reset TCP using seq:%08x ack:%08x
%@: handleMultiple - saving packet #%u (total %u) to list (urgent: %d)
%@: handleMultiple - saving packet to list (urgent: %d)
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
ids-ipsec: service string %@ needs to have 3 components
ids-ipsec: startDataChannelWithDevice called with generic connection %@ for service %@ and endpoint %@ connection-cache %@
error creating socket with [%@] [%@]
ids-ipsec: start_request returns error but data channel fine - assuming connected via available block. Error %@
startDataChannelWithDevice: finished with no error, but no socket and no connection
ids-ipsec: service connection %@ connected for service %@ but no generic connection - saving in cache
connect ready for nw_connection %@ socket %d (ports[%@]), event error: %@, connection[%@], device[%{public}@]
Enabled new connection, cancelling previous instance (%@)
serviceConnection (%@) does not match the one being cancelled (%@)
about to wait for connect ready for socket %d
connect ready for socket %d (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
getsockopt failed %d
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
Skipping header compression for phone continuity
scheduled wait for connect ready for socket %d
ids-ipsec: found service connection %@ in cache for service %@
nw_service_connector service_available_block for %@ returns %@ for service %s
ids-ipsec: got useipsec %@ (isDefaultPairedDevice %@)
FairPlay authentication failed, obliterate device connection.
Device %@/%@ (CC:%@) is blacked out due to fairplay failures
Add a block for control channel reestablishment on link connects.
Failed to decrypt control message with deviceUniqueID %@, try different peer for %@.
deviceUniqueID mismatch (%@!=%@), ignore decryption error.
Successfully decrypted control message, lock peer %@ for cbuuid %@.
%p: control channel got message %@ device conn info:%@
Add a block for initial control channel setup on link connects.
TransportThread initialization failed
sysctl for kern.skywalk.ring_stat_enable failed %d
Magnet stall warning [%@]
ids-ipsec: starting service connection for %s on %@ with parameters %@
nw_service_connector_start_request returned connection(%p) %@ error %@ for %s
nw_service_connector_start_request returned EEXIST - exit
nw_service_connector_start_request returned EINPROGRESS - exit
ids-ipsec: start_request returns error but control channel fine - assuming connected via available block. Error %@
startControlChannelWithDevice: error creating control channel with [%@] [%@]
UTunController control channel for [%@] creation failed: %@
For the fixedInterface case, obliterate the connection.
UTunController control channel for default paired device could not be started for %0.3lf seconds
UTunController calling startControlChannelWithDevice for [%@] after %d seconds
startControlChannelWithDevice: finished with sd=%d [%@]
startControlChannelWithDevice: added the stall detector %@
startControlChannelWithDevice: finished with no error, but no socket and no connection
%@: closing connection %@
closeSocket for %@ using BT datagram link - stop
%@: waiting for first openSocket
%@: encryption expects 0xe000 - packet is corrupt
%@: unable to find decryption context for ssrc:%08x data:[%@%s]
%@: dropping unknown proto[0x%01x] packet (encrypted) [%@]
%@: dropping unknown proto[0x%01x] packet [%@]
%@: failed to resolve connection for remoteCID 0x%04x
%@: found connection with mismatched (remoteCID 0x%04x != remoteCID 0x%04x)
%@: remoteContext is nil for remoteCID %d, decompression failed.
%@: IDSHC_DecompressSimple failed (%lu)
%@: checksum failed for connection %@
%@: Got TCP %dB (flags[%02X] [%s%s%s%s])) for %u <= %u (connection %@ (%p))
%@: dropping TCP (unencrypted) - expect to be encrypted
Control channel reestablishment request from [%@]
<= data[%@%s]
Control channel setDidReceiveReestablishment %@ after reestablishment request
%@: dropping TCP (unexpected - no first packet) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
Received the first data packet for %@
Got reset for connection %@
%@: dropping TCP (no connection) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
%@: dropping UDP (no connection) %dB for %u <= %u
%@: dropping UDP (unencrypted) %dB for %u <= %u
for device %@: binding to [%@ [%@] @ scopeid=%d] iRet=%d (errno=%d)
connecting to [%@ @ scope=%u] %d (%d)
%@: got control message: compression_req %@
%@: UTCMType_CompressionRequest has invalid header length (%lu)
%@: UTCMType_CompressionRequest cannot decode remoteConnectionGUID
%@: UTCMType_CompressionRequest cannot decode localConnectionGUID
%@: invalid message size for UTCMType_CompressionRequest (%u != %u)
%@: recv compression_req (#:%u remoteCID:%u seq:%u ack:%u)
%@: UTCMType_CompressionRequest cannot decode account
%@: UTCMType_CompressionRequest cannot decode service
%@: UTCMType_CompressionRequest cannot decode name
%@: UTCMType_CompressionRequest found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionRequest resolved connection ports[%@]
%@: sending control message: compression_resp %@
%@: got control message: compression_resp %@
%@: UTCMType_CompressionResponse has invalid header length (%lu)
%@: UTCMType_CompressionResponse cannot decode remoteConnectionGUID
%@: UTCMType_CompressionResponse cannot decode localConnectionGUID
%@: invalid message size for UTCMType_CompressionResponse (%u != %u)
%@: recv compression_resp (#:%u)
%@: UTCMType_CompressionResponse cannot decode account
%@: UTCMType_CompressionResponse cannot decode service
%@: UTCMType_CompressionResponse cannot decode name
%@: UTCMType_CompressionResponse found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionResponse resolved connection ports[%@]
%@: compression_req (%u) acknowledged!
startCompressionForConnection failed due to invalid parameters
startCompressionForConnection ports[%@]
%@: failed to get local CID
%@: resolved next available localCID 0x%04x
%@: sending control message: compression_req (%@)
%@: control message parsing..
%@: control message too small
%@: UTCMType_EncryptControlChannel missing data
%@: got control message: encrypt control channel flags %d ispairedlocally %d ispairedremotely %d (isencrypting: %d ispairedlocally %d ispairedremotely %d)
%@: UTCMType_SetupChannel insufficient header
%@: UTCMType_SetupChannel unexpected remoteGUID/account/service/name lengths (%u, %u, %u, %u)
%@: UTCMType_SetupChannel unexpected size (%u != %u)
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: send setup channel message ports[%u:::%u] guid[%s]
%@: SetupEncryptedChannel insufficient header
%@: SetupEncryptedChannel unexpected remoteGUID/account/service/name/key lengths (%u, %u, %u, %u, %u)
%@: SetupEncryptedChannel unexpected size (%u != %u)
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
control message in reply to cleaned up connection
control message not for current connection - assume local is current for now (message is old) and send CloseChannel for remote attempt
control message repeated for current connection - assume local is current and remote reconciled
%@: nonmatching key material length (local:%u remote:%u)
%@: found connection [%@] - remote wins
%@: send setup encrypted channel message ports[%u:::%u] guid[%s] ssrc:%08x startSeq:%04x
%@: UTCMType_CloseChannel insufficient header
%@: UTCMType_CloseChannel unexpected size (%u != %u)
%@: UTCMType_CloseChannel cannot decode remoteConnectionGUID
%@: UTCMType_CloseChannel cannot decode localConnectionGUID
%@: UTCMType_CloseChannel cannot decode account
%@: UTCMType_CloseChannel cannot decode service
%@: UTCMType_CloseChannel cannot decode name
%@: got control message: close channel remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: control message: hello control channel version is nil
%@: got control message: %@
Control channel checksum failed while receiving Hello. Resetting connection %@
%@: reset control channel didReceiveReestablishmentRequest NO
%@: got invalid control message %d
%@: UTunSocketProtocolOverride [%@] instead of specified [%@]
%@: found connection [%@] for ID [%@]
%@: bypass utun with readHandler %p for connection [%@]
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
openSocket for %@ using BT datagram link - start
%@: cannot allocate new port for service %@ name %@
%@: closeSocketWithOptions called with options [%@] (connection %@)
%@: close channel control message [%@] created for connection %@
%@: openSocketWithOptions called with options [%@]
%@: localdevicecontroller is paired [%@]
%@: checking localdevicecontroller not paired
%@: openSocketWithOptions unable to create new device - cannot continue
Update deviceUniqueID for controlChannel %@
Device %@/%@ is blacked out due to fairplay failures
Canceled a previously scheduled openSocket for %@. Rescheduling openSocket with new options %@.
Add a block for data channel setup on link connects.
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
cleanupSocketsForClient: clientID is nil.
closeSocketWithOptions found deviceUniqueID mismatch (%@ != %@), ignore.
Canceled a previously scheduled openSocket for %@. Not scheduling closeSocket.
Add a block for data channel close on link connects.
Rescheduling suspend traffic check in %0.2lf seconds
Suspend traffic check: connections %lu =? suspended connections %lu
Scheduling a suspend traffic check in %0.2lf seconds
Extending suspend traffic check by %0.2lf seconds
%@: suspendSocketWithOptions called with options [%@] (connection %@)
%@: resumeSocketWithOptions called with options [%@] (connection %@)
removeDeviceConnectionInfoForDevice for %@
removeDeviceConnectionInfoForDevice found no match for %@
removeDeviceConnectionInfoForDevice for %@.
removeDeviceConnectionInfoForDevice found no match for %@.
obliterateConnectionInfo failed due to invalid linkManager
obliterateConnectionInfo: clear all connections for cbuuid %@
obliterateConnectionInfo: completionBlock
Clearing control channel
Couldn't find deviceConnection info
addPairedDevice failed due to invalid linkManager
addPairedDevice with cbuuid %@
connectPairedDevice failed due to invalid linkManager
connectPairedDevice with cbuuid %@
deletePairedDevice failed due to invalid linkManager
deletePairedDevice with cbuuid %@
copyLinkStatsDict failed due to invalid linkManager
%s: invalid arguments
%s: reporting service stats %@
getTransmittedPacketsForDevice: cannot find device %@
setPreferInfraWiFi failed due to invalid linkManager
setPreferInfraWiFi %@
setLinkPreferences failed due to invalid linkManager
Drop OTR negotiation message for %@, link is not connected.
Drop suspend OTR negotiation message for %@, link is not connected.
Cannot use invalid interface name [%s]
Cannot get interface state for %s on disconnect
Cannot set interface state to available for %s on disconnect
Set interface availability from %u to %u (0 is available) %s
Cannot open socket for ioctl for %s on disconnect
[throughput] Now cannot send to device %@
localdevicecontroller callback [%@]
control channel already paired
Made reset[%@]
setsockopt on socket (%d) succeeded for traffic class (%d).
setsockopt on socket (%d) failed for traffic class (%d), (error=%d: %s).
sending control message: encrypt control channel (%d, %d) %@
Bag loaded notification! Is in backoff mode changed to %@
No block supplied, but is this the first query: %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! Returning success for all checked URIs %@. Original requested URIs: %@
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
Forcing cellular queries only
The Query Service Is %@
Overriding response code for query with: %d   remove %@: %@    to stop this
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Query time was: %f  (URIs: %@)
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
Query used old certificate, retrying
Retries exhausted, not retrying
Server has disabled bad query signature recovery
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
We have suffered %ld network failures. Forcing the server bag to reload.
Daemon sendMessage with parameters
*** Over budget, failing sendMessage on service: %@
Enabling encryption for this message though it isn't explicitly requested.
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Send message with send parameters
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
DeliveryContext %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
At least one destination is mako {destinationURI: %@, guid: %{public}@, destinations: %@}
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
!setState Priority=%@
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
Default Destination Device is %@
Message Delivery Type Is %@ for serviceIdentifier: %@
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
Consumed sandbox extension [%@] handle [%llu] for file [%@]
Consumed sandbox extension [%@] handle [%llu] for original file [not %@]
No sandbox extension for received resource [%@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
CanSendUrgent %@ ForceImmediateSend %@ hasSpecialTrafficClass %@
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
SendToDaemon
(Messaging1) No account found for ID: %@
Result of can send message with account was no
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeinterval for _nonUrgentInternetSendTimer as %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
!setState traceIdentifier=%@
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
 Enqueued item for key: %@    timeout: %f
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
The sender of this message with UUID %@ has Engram version %@
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message in %f seconds
** Had decryption error: %d
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@
%s: could not find IDSDService for topic %@
The Account Was %@
The message that will be broadcast is %@
The original send parameters were %@
Removing Local IDS device as a destination from this message
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
Class A key not avaialble for message %@ on topic %@
Processing stored incoming remote messages
%s: GUIDs count %lu
Processing %lu stored incoming remote messages
 => Deferring message, service wants messages after first unlock only
Filtering message with guid %@
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
Noted decryption failure for engram group {group: %@, noteError: %@}
Broadcasting Group Share Message brodcast block
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
Incoming remote message
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
Told to filter message from %@
Message specifies an expiration date %@ %@
Message for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
Found no service for topic! %@
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {fromID: %@, service: %@, toIdentifier: %@}
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Filtering alias { accountUniqueID: %@, toIdentifier: %@, activeAliases: %@ }
Filtering but wants app ack
Filtering non-invitation message, stopping { command: %@ }
!setState incomingGUID=%@
!setState incomingTopic=%@
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Decryption
Finished decrypting message topLevelPayload: %@
This message came from user URI %@ their SenderCorrelationIdentifier was %@
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting GroupShare Message top
Received Sent Ahead Group {groupID: %{public}@}
Cached Sent Ahead Group {error: %{public}@, group: %{private}@}
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
SendToClient
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
Not broadcasting
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Not broadcasting command
Shouldn't broadcast for this command %@ for received message %@ with guid %@
No Message Error, Processing Imediatly
  => Adding a delay of %f seconds to iCloud Pairing Messages
  => Processing immediately
Processing message for stored guid %@
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
Issued sandbox extension [%s] for file [%@]
Failed to issue sandbox extension for file [%@]
Storage timer fired, guids we need to process: %@
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Storing under first lock
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Encryption failed with error %ld
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
%s: invalid topic for saving incoming message, ignoring!
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
Please file a radar! Could not ack message with sequence number %u for connection %@ peer %@ priority %ld
Dropping ack for sequence number %u due to no peer %@ or no priorty %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
The delivery path for message with guid %@ is %@, service: %@
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
Not reflecting back initial region query success, registration is disabled: %@
Not reflecting back region validation success, registration is disabled: %@
Notifying of region validation success for registration: %@    region: %@   phone number: %@   context: %@  verified: %@
Not reflecting back started authenticating, registration is disabled: %@
Not reflecting back registration required, registration is disabled: %@
Apple ID registration center notify authentication failure
Not reflecting back authentication failure, registration is disabled: %@
Apple ID registration center notify authentication success
Not reflecting back authentication success, registration is disabled: %@
Not reflecting back handle unlink failure, registration is disabled: %@
Not reflecting back handle unlink success, registration is disabled: %@
Handle unlink success: %@
Not reflecting back email confirmation failure, registration is disabled: %@
Not reflecting back email confirmation success, registration is disabled: %@
Email confirmation success: %@
Not reflecting back email validation request failure, registration is disabled: %@
Not reflecting back email validation request success, registration is disabled: %@
  Received validate handle response (URI: %@  ID: %@) with result: %d  (vetting status: %d) (error: %@) (response info: %@)
Overriding response code with: %d   remove %@: %@    to stop this
  Received unlink handle response with result: %d  (Error: %@)
  Received link handle response with result: %d  (error: %@)
  Received default invitation context with result: %d  error: %@  result dictionary: %@
  Received region validation response with result: %d  error: %@
Apple ID registration center note successful token
Noting successful token: %p   for profile ID: %@   self handle: %@  wasFetched: %@  registration: %@
About to insert bogus profile ID: %@  ignoring
Empty registration info supplied for password fetch, bailing
Starting renew for %@
Received auth token response for reg: %@
 We have a token, great!
 ** user cancelled, bailing
 ** empty token, bailing
Starting token fetch for %@
Token fetcher finished for registration info: %@
 We have a token, just sending auth
 ** Username/DSID is empty, but we have a token: %@
 ** No token found, requesting it!
Apple ID registration center authentication request
No email present for registration: %@
Not adding this to the queue, we're already trying to authenticate: %@
Fetching password for: %@  (Environment: %@)
Sending email validation request: %@ (%@)
Sending region validation request: %@ number: %@ (%@)
Sending initial context request for: %@
Sending unlink handle request request: %@  (%@)
Sending email confirmation request request: %@ (Token: %@) (%@)
Requesting initial context for: %@
Requesting region validation for: %@  number: %@, %@
Requesting email validation for: %@, %@
Sending email confirmation for: %@  with token: %@   %@
Sending unlink for: %@   (%@)
 => Resulting registration post remove: %@
 => Notifying that registration is required: %@
 => Authenticating registration: %@
Kicking off authentication request for: %@
Told about token: %@  for email: %@
Loaded paired device state from keychain but could not decode dictionary.
Didn't find device properties to load
Paired device properties can't be loaded because of a keychain error %d.
%s: Failed to save paired devices to keychain, err: %d
Removing the paired device repository's keychain entry.
%s: Failed to remove paired devices entry from keychain, err: %d
  Read %@: %@  (Class: %@)
Migrating this SMS auth token: %@  mainID: %@
*** No need to migrate SMS auth token, we already have one
******** We're missing an SMS auth token, this will SMS migration register ******** 
Using existing mainID: %@   token: %@
Loaded auth cert: %@    ID: %@
Migrating auth cert for IDS User ID: %@
Not migrating cert for user ID, we already have one: %@
keychainDictionary: nil %@
  ** Fixed Self ID to be: %@
  ** Fixed Profile ID to be: %@
Successfully fetched token for account (%@:%@:%@): %@  (Environment: %@)
Successfully %@ token for account (%@:%@): %@  (Environment: %@  New Token: %@)
Voided auth token for account (%@)
Successfully voided password for account (%@:%@): %@  (Environment: %@)
 ... finding emails to register for DS registration based account: %@:%@
 => Added self handle: %@ to URI set
 => **** Missing self handle, not adding ****: %@
 ... finding emails to register for auto register based account: %@:%@
 => Auto adding confirmed emails: %@ to URI set
 => Auto adding vetted emails: %@ to URI set
 => No confirmed emails...
 => Added candidate emails: %@ to URI set
 => Removing DS Handle
 ... finding emails to register for manual handle selection account: %@:%@
 => Added confirmed emails: %@ to URI set
   Device number: %@
 => Found sentinel alias, stripping
Skipping device number: %@  for service: %@
 => Final emails to register: %@    for service: %@  account: %@
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
Loading services...
... Done!
Skipping load of empty service dictionary
Not loading service, invalid dictionary %@ missing identifier
Not loading service %@
Loaded service: %@, registering successfully
Skipping unload of service %@
Sub-services - Couldn't find service %@ to load subService %@ with
   %@
Did not find service with serviceName %@, can't update sub-services
Did not find a paired device uniqueID matching %@, can't update sub-services
Current sub-services for device %@: %@
New set of subservices are the same, ignoring update
Updated sub-services map %@
Told to remove %@ but another device still needs it
Posting notification with userInfo %@
Unloading   %@
Loaded sub-services:
Top level map %@
Loading sub-services...
Loaded preferences from disk: %@
Loaded sub services from disk: %@
Stale entries: %@
Cleaned up map: %@
Fixed empty map %@
Combined services %@
No super service provided when updating service list, ignoring update...
Loaded a paired device from storage with an empty/missing CBUUID: %@
Cannot retrieve a paired device with an empty CBUUID.
Cannot retrieve a paired device with CBUUID: %@
Adding a paired device to the repository with CBUUID: %@
Invalid attempt to add the same paired device into a repository. CBUUID: %@
Putting paired device %@
Cannot store a paired device with an empty CBUUID
Removing a paired device from the repository with CBUUID: %@
Cannot remove a paired device with an empty CBUUID.
Attempting to remove an unrecognized paired device, whose CBUUID is %@
Activating paired device with CBUUID: %@
%s Deactivating paired device with CBUUID: %@
%s Cannot activate an unknown paired device. CBUUID: %@
Purging the secured encryption keys for all paired devices.
Updating a paired device in the repository with CBUUID: %@ with deviceInfoPayload: %@
Cannot apply a device info payload to a paired device with an empty CBUUID.
Could not update the paired device with payload. No device found with CBUUID: %@
Updating a paired device's capability flags to %llu in the repository with CBUUID: %@
Cannot update the capability flags of a paired device with an empty CBUUID.
Could not update the paired device's capability flags. No device found with CBUUID: %@
Updated paired device capability flags from: %llu to: %llu
Updating a paired device with CBUUID: %@ to (deviceUniqueID: %@) (buildVersion: %@) (productVersion: %@) (productName: %@) (pairingProtocolVersion: %u) (minCompatibilityVersion: %u) (maxCompatibilityVersion: %u) (serviceMinCompatibilityVersion: %u)
Cannot update the private data of a paired device with an empty CBUUID.
Could not update the paired device's build version, product version, etc. No device found with CBUUID: %@
Updated paired device build version from: %@ to: %@
Updated paired device product version from: %@ to: %@
Updated paired device product name from: %@ to: %@
Updated paired device uniqueID from: %@ to: %@
Updated paired device pairing protocol from: %u to: %u
Updated paired device min compatibility version from: %u to: %u
Updated paired device max compatibility version from: %u to: %u
Updated paired device service min compatibility version from: %u to: %u
Report Unknown Sender response: %@
SharedMessage store %@
Saving database.
Destroying database.
Closed database.
Enabling WAL journal mode.
Enabling Foreign Key support.
Reindexing the DB worked.
Database vacuum success
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
Adding indexes on message guid
Add enforce_remote_timeout column to outgoing_message
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Add main_account_guid column to outgoing_message
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
The %@ column already exists on %@, skipping this step.
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
%s: table empty
UI32Table_Set: cannot allocate memory for %@
UI32Table_Set: table resize from %d to %d
UI32Table_Set: replacing object %@ with %@
UI32Table_Set: key %08X at %d (total elements: %d) store object %@
UI32Table_Remove: did not find %08X (from %d entries)
UI32Table_Remove: removing %@ @%d (from %d entries)
NSSTable_Set: cannot allocate memory for %@
NSSTable_Set: table resize from %d to %d
NSSTable_Set: replacing object %@ with %@
NSSTable_Set: key %8@ at %d (total elements: %d) store object %@
NSSTable_Remove: did not find %@ (from %d entries)
NSSTable_Remove: removing %@ @%d (from %d entries)
Fetched phone auth certificate from phone user registry {currentPhoneUser: %@, phoneAuthCert: %@}
Identified phone number {phoneNumber: %@, phoneToken: %@}
Starting authenticate phone request {pushToken: %@, CSR: %@, phoneSignature: %@}
Failed to copy private key: %d
  Missing push identity
Failed to copy certificate: %d
State changed for device with no unique ID, ignoring...
Couldn't match default uniqueID to real uniqueID, ignoring...
We didn't find a notify token for %@, adding one...
Found existing notify token %d for name %@
Received device properties state change for device with uniqueID %@ - nearby %@  connected %@  cloud connected %@
Connectivity state changed (old: 0x%x) (new: 0x%x)
**** Invalid Service Definition: Missing required key: %@  in service dictionary: %@, skipping
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
releasing pipe %@
Start collecting logs due to %@ Magnet corruption
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
LMW %d/%d %c =%c (s:%d)
LMW errno %d =%c (s:%d)
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
LMR2 0/%d/%d/%u %c
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
LMR %d/%d/%u %c
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
ready but already suspended
Ready to write into pipe %@
LMW2 %d/%d %c =%c (s:%d)
Link manager send2 errno %d
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
setupNewSession configuration: %@
cleanup session %@ local object %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, triggered locally %@
%@ - Could not find session with uniqueID %@ to update members, ignoring...
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
SecMWCreateSessionSeed for MKM (error %@)
_SecMWCreateSessionSalt for MKS (error %@)
sharedInstance
accountWithUniqueID:
registration
pushToken
uris
firstObject
setAccount:fromID:forGroup:
createRealTimeEncryptionFullIdentityForDevice:completionBlock:
sessionWithUniqueID:
destinations
allObjects
uniqueID
setMembers:forGroup:sessionID:
sendPublicKeyToGroup:sessionID:
alloc
init
setShouldBoost:
service
pushTopic
broadcasterForTopic:entitlement:command:messageContext:
publicKeys
dictionary
sendXPCObject:
requestKeyMaterialForGroup:sessionID:toSpecificMembers:
resetKeysForGroup:shouldRemoveCurrentParticipants:
setupRealtimeEncryptionController:forAccountWithID:messageContext:
sendRealTimeMediaPrekey:toGroup:messageContext:
requestPublicKeysForRealTimeEncryption:forAccountWithID:messageContext:
sendRealTimeEncryptionMasterKeyMaterial:toGroup:messageContext:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:messageContext:
resetRealTimeEncryptionKeys:forGroup:messageContext:
addListener:
accountsChanged
printInfo
_fetchExpiryDatesIfNecessary
_cleanupKeychain
_scheduleDependentRegistrations
deviceHeartbeat
_scheduleRescueHeartBeat
issueGetDependentRequest
warning
initWithTimeIntervalSinceNow:
allValues
countByEnumeratingWithState:objects:count:
doubleValue
initWithTimeIntervalSince1970:
removeListener:
invalidateTimer
dealloc
allKeys
objectForKey:
dateWithTimeIntervalSince1970:
_getNextExpirationDate
timeIntervalSinceNow
invalidate
_updateDependentRegistrations
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
count
_heartBeat
updateExpiredDependent
_updateExpiry:forUser:
length
date
timeIntervalSince1970
numberWithDouble:
setObject:forKey:
removeAllObjects
accounts
_copyForEnumerating
isAdHocAccount
isEnabled
isRegistered
idsUserID
containsObject:
dependentRegistrationsTTL
addObject:
dependentRegistrationResponseCode
integerValue
systemDidBecomeIdle
systemDidBecomeUnidle
screenSaverDidStart
screenSaverDidStop
screenLocked
screenUnlocked
systemWillSleep
systemDidWake
systemDidEnterMemoryPressure
systemDidLeaveMemoryPressure
systemWillShutdown
systemApplicationDidEnterBackground
systemApplicationWillEnterForeground
systemApplicationDidBecomeActive
systemApplicationWillResignActive
systemApplicationDidSuspend
systemApplicationDidResume
systemApplicationDidSuspendForEventsOnly
systemApplicationDidResumeForEventsOnly
notificationCenterWillAppear
notificationCenterDidDisappear
systemDidStartBackup
systemDidStopBackup
systemDidFinishMigration
systemRestoreStateDidChange
systemDidFastUserSwitchOut
systemDidFastUserSwitchIn
systemDidLogout
systemDidLock
systemDidUnlock
systemScreenDidPowerUp
systemScreenDidPowerDown
systemDidLeaveFirstDataProtectionLock
systemDidLeaveDataProtectionLock
systemDidEnterDataProtectionLock
setup
resetExpiryForUser:
.cxx_destruct
_getDependentHeartbeatTimer
_usersToHeartbeatDatesMap
_isSetup
sharedInstanceForBagType:
stringWithFormat:
numberWithUnsignedLongLong:
initWithObjectsAndKeys:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
sendPacketBuffer:toDeviceUniqueID:cbuuid:
sendPacketBufferArray:arraySize:toDeviceUniqueID:cbuuid:
generateLinkReport:isCurrentLink:
copyLinkStatsDict
cbuuid
setCbuuid:
deviceUniqueID
setDeviceUniqueID:
linkTypeString
state
headerOverhead
delegate
setDelegate:
alternateDelegate
setAlternateDelegate:
start
initWithPipe:withDeviceUniqueID:cbuuid:
_processIncomingPacket
_cbuuid
_deviceUniqueID
_state
_totalBytesSent
_totalPacketsSent
_totalBytesReceived
_totalPacketsReceived
_previousBytesSent
_previousPacketsSent
_previousBytesReceived
_previousPacketsReceived
_previousReportTime
_delegate
_alternateDelegate
stringGUID
removeEndpointQueryCompletionBlockForToken:
serviceIdentifier
localURI
subscribedURIs
queue
peerIDManager
_registerEndpointQueryCompletionBlock
mutableCopy
setEndpointMap:
resolvedEndpoints
endpointsForURIs:serviceIdentifier:localURI:completion:queue:
endpointMap
addObjectsFromArray:
_noteSourceDidDiscoverEndpointMap:forLocalURI:
peerIDManagerToken
addEndpointQueryCompletionBlock:forToken:queue:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
_signalDidUpdateEndpoints
resolvedEndpointsDidUpdateHandler
initWithServiceIdentifier:localURI:subscribedURIs:queue:
initializeWithCompletion:
setResolvedEndpointsDidUpdateHandler:
_serviceIdentifier
_localURI
_subscribedURIs
_resolvedEndpointsDidUpdateHandler
_queue
_endpointMap
_peerIDManagerToken
query
copyWithZone:
protocolVersion
setProtocolVersion:
hardwareVersion
setHardwareVersion:
osVersion
setOsVersion:
softwareVersion
setSoftwareVersion:
deviceName
setDeviceName:
IMSI
setIMSI:
PLMN
setPLMN:
testData
setTestData:
responseStatus
setResponseStatus:
responseMechanisms
setResponseMechanisms:
additionalMessageHeaders
pushCertificate
_FTStringFromBaseData
messageBody
phoneNumberValidationRetryCount
_numberForKey:
isEqualToString:
initWithType:context:
requiredKeys
bagKey
handleResponseDictionary:
setPhoneNumberValidationRetryCount:
_protocolVersion
_phoneNumberValidationRetryCount
_hardwareVersion
_osVersion
_softwareVersion
_deviceName
_IMSI
_PLMN
_testData
_responseStatus
_responseMechanisms
initWithKeyOptions:valueOptions:capacity:
copy
_simulateCrashWithErrorString:
string
appendFormat:
_dumpServiceMap
processInfo
processName
initWithName:
setRemoteInstanceID:
associateServiceName:withStreamID:remoteInstanceID:remoteInstanceIDChanged:
translateStreamID:toServiceName:remoteInstanceID:remoteInstanceIDChanged:
translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:
dumpServiceMap
_name
_lock
_remoteInstanceID
_serviceNameToStreamIDMap
_streamIDToServiceNameMap
_nextStreamID
_previousRemoteInstanceIDs
_nextRemoteInstanceIDIndex
serviceWithIdentifier:
accountOnService:withType:
initWithDomain:code:userInfo:
cloudRelayRegisteredAccountWithError:
localObject
broadcasterForLocalObject:messageContext:
serviceUserIDs:error:
identityPrivateKey
setIdentityPrivateKey:
registrationCert
setIDCertificate:
setSubService:
dsHandle
setUserID:
sharedInstanceWithPortName:
setPushToken:
responseServiceUserIDs
setCompletionBlock:
sendMessage:
adminAccessTokens:error:
setServiceUserID:
setAccessoryID:
setPairingToken:
responseAccessoryID
responseAdminAcccessToken
responseExpiry
consentTokens:error:
setAdminID:
setAccessoryIDs:
responseConsentTokens
userAccessTokens:error:
setUserHandle:
setAccessoryRequests:
responseAccessTokens
homeKitGetServiceUserIDsWithMessageContext:
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:messageContext:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:messageContext:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:messageContext:
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:messageContext:
appendString:
enumerateObjectsUsingBlock:
initWithFormat:
_setupPairedSystemContext
_resourceAvailabilityChangedForIdentifiers:
setInitialSyncInProgress:forClientID:
initialSyncInProgress
setReunionSyncInProgress:forClientID:
reunionSyncInProgress
_newKeyForValues:priority:
_checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
clearAdmissionCheckCache
initialSyncClientIDs
setInitialSyncClientIDs:
reunionSyncClientIDs
setReunionSyncClientIDs:
_initialSyncClientIDs
_reunionSyncClientIDs
objectAtIndex:
removeObjectAtIndex:
portMap
connectionsTableByLocalRemotePortKey
outgoingEncryptionTableBySSRC
incomingEncryptionTableBySSRC
selfInstanceID
instanceID
setInstanceID:
nextAvailableLocalCID
clearLocalCID:
addBlocksOnLinkConnect:
performBlocksOnLinkConnect
cancelBlockOnLinkConnectWithID:cancelSucceeded:
cancelBlocksOnLinkConnect
remoteSA
setRemoteSA:
connectionsByID
controlChannel
setControlChannel:
controlChannelCachedSYN
setControlChannelCachedSYN:
highPriorityConnectionSendingSet
setHighPriorityConnectionSendingSet:
suspendTraffic
setSuspendTraffic:
suspendTrafficCheckTime
setSuspendTrafficCheckTime:
linkLayerConnected
setLinkLayerConnected:
linkLayerDisconnectTime
setLinkLayerDisconnectTime:
vifName
setVifName:
localSA
setLocalSA:
utunSocket
setUtunSocket:
capabilityFlags
setCapabilityFlags:
serviceMinCompatibilityVersion
setServiceMinCompatibilityVersion:
shouldUseIPsecLink
setShouldUseIPsecLink:
serviceConnector
setServiceConnector:
controlChannelVersion
setControlChannelVersion:
serviceConnectionCache
_remoteSA
_connectionsByID
_controlChannel
_controlChannelCachedSYN
_controlChannelVersion
_highPriorityConnectionSendingSet
_localCIDSet
_suspendTraffic
_suspendTrafficCheckTime
_linkLayerConnected
_linkLayerDisconnectTime
_vifName
_localSA
_portMap
_connectionsTableByLocalRemotePortKey
_outgoingEncryptionTableBySSRC
_incomingEncryptionTableBySSRC
_blocksOnLinkConnect
_utunSocket
urgentPackets
regularPackets
_shouldUseIPsecLink
_serviceConnector
_serviceConnectionCache
_selfInstanceID
_instanceID
_capabilityFlags
_serviceMinCompatibilityVersion
_getKeysForServiceTypeName:completion:
_rollAccountKeyWithFullCluster:completion:
_getCurrentAccountClusterWithCompletion:
groupID
adminServiceIdentityWithType:
signingServiceIdentityWithType:
fullServiceIdentitiesSigning
identityServiceTypeName
fullAccountIdentity
_createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:
cloudKitElectionStore
groupName
isItemNotFoundError:
keychainElectionStore
fetchFullClusterWithIdentifier:error:
clusterByUpdatingGroupID:error:
fetchAccountIdentityItemWithCompletion:
initWithCapacity:
rolledAccountIdenityWithError:
_fullAccountIdentityWithError:
_fullServiceIdentityAdminWithAccountIdentity:type:error:
_fullServiceIdentitySigningWithAccountIdentity:type:error:
rolledClusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
_fullClusterWithAccountIdentityClusterWithAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
isParentOfCluster:
identifierForFullCluster:
publicAccountClusterWithError:
dataRepresentationWithError:
_cleanupFailedElectionWithFullAccountIdentityCluster:
publicKey
forwardingTicket
signData:withError:
generation
numberWithLong:
stableGroupID
dataRepresentation
setAccountBlob:
setSignature:
setGroupID:
setForwardingTicket:
setParentPg:
setNewPg:
setParentVersion:
setENID:
groupServerElectionStore
domain
code
setGroupName:
storeAccountIdentityItem:withCompletion:
storeItem:withCompletion:
storeFullCluster:completion:
removeFullClusterWithIdentifier:error:
fullAccountIdentityWithError:
fullServiceIdentityWithFullAccountIdentity:type:error:
clusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
initWithKeychainElectionStore:cloudKitElectionStore:groupServerElectionStore:
getKeysForServiceTypeName:completion:
rollAccountKeyWithCompletion:
_keychainElectionStore
_cloudKitElectionStore
_groupServerElectionStore
accountIdentity
errorWithDomain:code:userInfo:
initWithUser:phoneSignature:certificateSigningRequest:pushToken:
user
phoneSignature
certificateSigningRequest
_user
_phoneSignature
_certificateSigningRequest
_pushToken
initWithStatus:user:authenticationCertificate:
status
authenticationCertificate
_status
_authenticationCertificate
IDSRealTimeEncryptionServiceName:activeParticipants:missingPrekeys:
IDSRealTimeEncryptionServiceName:activeParticipants:firstReceivedPacketMKMtimeDelta:
IDSRealTimeEncryptionServiceName:activeParticipants:membershipChangeMKMTimeDelta:
_privateKey
_publicKey
_signature
_isMigratedSignature
_loadIfNeeded:
isUnderFirstDataProtectionLock
lock
defaultCenter
__mainThreadPostNotificationName:object:
unlock
_save
setActive:
setWatchesDataProtectionLockState:
_removeEarlyListener:
publicMessageProtectionDataToRegister
requiresKeychainMigration
isEqualToData:
timeIntervalSinceReferenceDate
isInternalInstall
_purgePreviousIdentityTimerFired
_purgePreviousIdentityFromMemoryAndKeychain
_regenerateIdentityTimerFired
_shouldRegenerateRegisteredIdentity
regenerateRegisteredIdentity
setupKeys
_isUnderFirstDataProtectionLock
generateCSRForUserID:
fullMessageProtectionIdentity
notePublicIdentityDidRegister:
purgeMessageProtectionIdentity
generatePairingIdentitiesShouldRegenerateClassD:
loadPairingIdentities:
regeneratePairingIdentitiesIncludingClassD:
identityPublicKey
keyPairSignature
needsPublicDataUpdated
isMigratedKeyPairSignature
_randomizedIdentityRegenerationInterval
_schedulePurgeOfPreviousIdentityAfterDelay:
_scheduleRegenerationOfRegisteredIdentityAfterDelay:
_loaded
_identityLoaded
_detectedMigrationNeeded
_needsReRegister
_config
_purgePreviousIdentityTimer
_regenerateIdentityTimer
longLongValue
numberWithInt:
arrayWithObjects:count:
dataProtectionClass
guid
alternateGUID
ensureDatabaseIsInitialized
IDSDeviceConnectionForService:wasSuccessful:clientInitTime:clientOpenSocketCompletionTime:daemonOpenSocketTime:daemonOpenSocketCompletionTime:firstPacketReceiveTime:connectionInitTime:
command
initWithBytes:length:
bytes
initWithBytesBuffer:bufferSize:metadata:metadataSize:
initWithPacketBuffer:metadata:metadataSize:
packetBuffer
metadata
metadataSize
_metadataData
_metadataSize
_packetBuffer
_metadata
initWithDestination:
connectWithTransportThread
connectWithProtocoHandler
writeDatagram:datagramSize:metaData:metadataSize:
writePacketBuffer:metaData:metadataSize:moreComing:
writeBuffer:bufferSize:metaData:metadataSize:moreComing:
uuid
setUUID:
readHandler
setReadHandler:
writeHandler
setWriteHandler:
hasMetadata
excessiveCachingReportCounter
setExcessiveCachingReportCounter:
excessiveCachingCount
setExcessiveCachingCount:
clientReady
setClientReady:
destination
transportType
closed
verboseFunctionalLogging
setVerboseFunctionalLogging:
verbosePerformanceLogging
setVerbosePerformanceLogging:
packetBufferHandler
setPacketBufferHandler:
cachedDataForClient
setCachedDataForClient:
_hasMetadata
_clientReady
_closed
_verboseFunctionalLogging
_verbosePerformanceLogging
_excessiveCachingReportCounter
_excessiveCachingCount
_uuid
_readHandler
_writeHandler
_destination
_transportType
_packetBufferHandler
_cachedDataForClient
registerClientChannelDestination:connectHandler:
unregisterClientChannelDestination:
_processBytesAvailable
_sendToConnectedSocket
callStackSymbols
_endSession
reset
shouldEncrypt
protectionClass
addIndex:
enumerateObjectsWithOptions:usingBlock:
removeObjectsAtIndexes:
connectionDidReachInFlightMessageLowWaterMark:
_callDelegateWithBlock:
encrypted
sequenceNumber
streamID
_processIncomingMessage:
messageWithData:
fragmentIndex
fragmentedMessageID
numberWithUnsignedInt:
totalFragmentCount
arrayWithCapacity:
createOriginalMessageFromFragmentedMessages:
removeObjectForKey:
endSession
initWithData:
connection:didReceiveData:withIdentifier:
connection:didReceiveDataMessage:
priority
topicForStreamID:
_read:maxLength:
connectionDidReceiveBytes:
headerDataSize
appendBytes:length:
dataLengthFromHeaderData:
messageWithHeaderData:data:
setLength:
topic
data
underlyingData
initWithVersion:encrypted:shouldEncrypt:protectionClass:streamID:priority:sequenceNumber:data:
setTopic:
context
setContext:
connectionBecameEmpty:
_queueNextOutgoingData
IDSSocketPairConnectionTCPInfoLinkType:currentRTT:bandwidth:
produceBytes:
sendDataMessage:canFragment:
createMessageFragmentsFromOriginalMessage:withFragmentedMessageID:fragmentSize:
numberWithUnsignedInteger:
dictionaryWithObjects:forKeys:count:
connectionDidClose:
initWithSocket:queue:delegate:priority:connectionID:linkType:
isConnected
fragmentationSize
inFlightMessageCount
inFlightMessageCountLowWaterMark
isEmpty
lastSocketActivityTime
inFlightMessages
setFragmentationSize:
setInFlightMessageCountLowWaterMark:
removePendingMessagesForProtectionClass:
processStoredIncomingMessage:
sendDataMessage:
setNotifyWhenConnectionReceivesBytes:
setOTREncryptionBlock:decryptionBlock:
maxAllowedMessageSize
setMaxAllowedMessageSize:
connectionID
setConnectionID:
outgoingStallDetector
setOutgoingStallDetector:
_headerData
_currentMessageData
_delegateQueue
_currentOutgoingDataIndex
_outgoingData
_outgoingMessageArray
_currentOutgoingFragmentedMessageID
_inFlightMessageCountLowWaterMark
_incomingDataFragments
_connectionID
_fragmentationSize
_isConnected
_currentDataLength
_bytesReceived
_prevBPS
_connectedSocket
_writeSocketIsResumed
_lastDateCheck
_notifyWhenConnectionReceivesBytes
_priority
_encryptionBlock
_decryptionBlock
_maxAllowedMessageSize
_lastSocketActivityTime
_outgoingStallDetector
_linkType
socketPairConnection
initWithUsername:DSID:
username
DSID
_username
_DSID
accountPropertyForKey:
boolValue
_systemAccountWithIdentifier:DSIDKey:criteria:completion:
isActive
_systemAccountWithIdentifier:DSIDKey:criteria:error:
_systemAccountRepresentationOfACAccount:DSIDKey:
_ACAccountWithTypeIdentifier:matchingCriteria:completion:
_ACAccountWithTypeIdentifier:matchingCriteria:error:
accountsWithAccountType:
accountProperties
initWithQueue:
iCloudSystemAccountWithCompletion:
iTunesSystemAccountWithCompletion:
iCloudSystemAccountWithError:
iTunesSystemAccountWithError:
_firstAccountInStore:withType:matchingCriteria:
_cancelAllSearches
_startSearchingForRegistrationEmail:registrationInfo:attempt:
_cancelSearchesForEmail:
containsObjectIdenticalTo:
nonRetainingArray
removeObjectIdenticalTo:
_existingSearchForEmail:
startMonitoringForEmail:registrationInfo:
cancelMonitoringForEmail:registrationInfo:
_currentSearches
_handlers
packetsSent
setPacketsSent:
packetsReceived
setPacketsReceived:
bytesSent
setBytesSent:
bytesReceived
setBytesReceived:
_packetsSent
_packetsReceived
_bytesSent
subService
serviceUserID
userID
userHandle
accessoryRequests
setResponseAccessTokens:
_arrayForKey:
_subService
_serviceUserID
_userID
_userHandle
_accessoryRequests
_responseAccessTokens
_initializePlugin
pluginImplementsWatchDidStartAdvertising
plugin
watchDidStartAdvertising
removeObject:
pluginImplementsWatchDidStopAdvertising
watchDidStopAdvertising
_initializePluginWithClass:
initWithPath:
principalClass
notifyWatchDidStartAdvertisingWithPeripheralManager:
notifyWatchDidStopAdvertisingWithPeripheralManager:
initializePluginWithClass:
executeSynchronouslyOnCallbackQueue:
callbackQueue
setCallbackQueue:
setPluginImplementsWatchDidStartAdvertising:
setPluginImplementsWatchDidStopAdvertising:
peripheralManagers
setPeripheralManagers:
setPlugin:
_pluginImplementsWatchDidStartAdvertising
_pluginImplementsWatchDidStopAdvertising
_callbackQueue
_peripheralManagers
_plugin
_registrationsPendingHeartbeat
registrationType
validSIMStateForRegistration
sendRegistration:
canSendRegistration
registerInfo:
updateHeartbeat
_serverHeartBeat:
registrationDate
nextRegistrationDate
isRegistering:
_registration:needsRenewal:
_startRegistrationHeartbeat
__reallyUpdateRegistrationHeartbeat
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
_nextRegistrationHeartbeatTime
removeObserver:name:object:
_bagReloaded:
addObserver:selector:name:object:
_registrationStateChangedNotification:
dateWithTimeIntervalSinceNow:
_serverHeartBeatTimerHit:
_updateRegistrationHeartbeat
_stopRegistrationHeartbeat
checkHeartbeat
registrationHBI
addRegistrationInfo:
removeRegistrationInfo:
_registrations
_registrationHeartbeatDate
_registrationHeartbeatTimer
_baseRegistrationHBI
_pendingHeartbeat
setTimeout:
responseBasePhoneNumber
setResponseBasePhoneNumber:
responseRegionID
setResponseRegionID:
responseExtraInfo
setResponseExtraInfo:
responseValidated
setResponseValidated:
intValue
anisetteHeadersTimeout
_responseValidated
_responseBasePhoneNumber
_responseRegionID
_responseExtraInfo
assertRunningOnMain
performBlockSyncPriority:
performBlockDefaultPriority:
performBlockUrgentPriority:
assertRunningWithPriority:
hasSpaceForMessagesWithDataProtectionClass:
performBlockSYNCHRONOUSLYWithPriority:priority:
unsignedLongLongValue
valueForKey:
unsignedLongValue
sendingMessageStatistics
_copyStatisticsDict:
setWithArray:
unionSet:
_addStatsFromDict:toAggregate:
queueStatistics
arrayWithArray:
_addUniqueTopicsFrom:to:
_accumulateStats:intoMessages:andBytes:
cumulativeOutgoingStatistics
cumulativeIncomingStatistics
_copyPowerlogDictionaryWithOutgoingStats:incomingStats:
perServiceDataSentForDevice:services:
perServiceDataReceivedForDevice:services:
weakRefWithObject:
queueForPriority:
object
_powerlogDictionaryForPriority:
_powerlogDictionaryForSockets
setEnabled:
flushAllMessagesForReason:
setEnableOTR:
setIsMagnetIndicatingPeerIsAwake:
numberWithBool:
syncPriorityMessageStatistics
defaultPriorityMessageStatistics
urgentPriorityMessageStatistics
urgentCloudPriorityMessageStatistics
defaultCloudPriorityMessageStatistics
syncCloudPriorityMessageStatistics
totalPacketsReceivedForDevice:services:
_powerLogServices:prefersInfraWifi:
setPreferInfraWiFi:
_checkServicesPreferringInfraWiFi:
initWithSet:
isEqualToSet:
setLinkPreferences:
setLocalSetupInProgress:
dropDisallowedMessages
trafficClassesChanged
clearStats
cancelMessageID:
kickProgressBlockForMessageID:
numberWithInteger:
numberWithLongLong:
_connectionForPriority:messageType:
requireBluetooth
messageUUID
completionBlock
toDeviceID
shouldBlackOutDeviceWithCbuuid:
initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:
performBlockMainQueue:
requireLocalWiFi
rapportClient
isDeviceDiscovered:
_stringForConnection:
_messageTypeSupportedForCloudConnection:
isCloudEnabled
_priorityForConnection:
identifier
peerConnectivityChanged:
_connectionTypeForConnection:
peer:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:
peer:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:
peer:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:
peer:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:priority:connectionType:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:
supportedMessageTypes
peerHasSpaceForUrgentMessages:dataProtectionClass:withTypes:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:withTypes:
_startDisableTimerIfNecessary
_startCloudDisableTimerIfNecessary
setIsAlwaysConnected:
lockedContinuityPeerID:
_clearDisableTimer
_handleCBUUIDDidConnect:isDefaultPairedDevice:isAlwaysConnected:
_handleCBUUIDFailToConnect:withReason:
addContinuityPeer:btUUID:connectBlock:failureBlock:
setEnabled:withReason:
peerNearbyStateChanged:forceNotify:
isIdle
_disableTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setFireDate:
_allConnectionsAreIdle
_cloudDisableTimerFired:
_clearCloudDisableTimer
_allCloudConnectionsAreIdle
disconnectGlobalLinkForDevice:completionHandler:
forceOTRNegotiation:priority:completionBlock:
admissionPolicyChangedForTopic:allowed:
connectionConnectivityChanged:
connection:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:
connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:
connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:
connection:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:
connectionHasSpaceForMessages:dataProtectionClass:
connectionIsEmpty:
connectionIsEmptyOfCloudMessages:
manager:cbuuidDidConnect:isAlwaysConnected:
manager:cbuuidDidDisconnect:
manager:cbuuidDidDiscover:
manager:cbuuidDidFailToConnect:withReason:
initWithIdentifier:btUUID:uniqueID:
setBtUUID:
copyConnectionForPriority:
copyCloudConnectionForPriority:
hasSpaceForMessagesWithPriority:dataProtectionClass:messageType:
_powerlogTransportStats
enableConnection
enableCloudConnection
disableConnectionForReason:
disableCloudConnectionForReason:
setPreferInfraWiFi:services:
unpairStart
sendMessage:priority:messageType:
setIsPeerAlwaysConnected:
forceOTRNegotiationForTopic:priority:completionBlock:
btUUID
setUniqueID:
isDefaultPairedDevice
setIsDefaultPairedDevice:
isNearby
setIsNearby:
localSetupInProgress
isMagnetIndicatingPeerIsAwake
supportsCloudUrgentConnection
setSupportsCloudUrgentConnection:
supportsCloudSyncConnection
setSupportsCloudSyncConnection:
supportsCloudDefaultConnection
setSupportsCloudDefaultConnection:
pendingCloudSyncEnable
setPendingCloudSyncEnable:
pendingCloudUrgentEnable
setPendingCloudUrgentEnable:
pendingCloudDefaultEnable
setPendingCloudDefaultEnable:
isPeerAlwaysConnected
continuityConnectCount
setContinuityConnectCount:
originalbtUUID
setOriginalbtUUID:
isCloudConnected
setIsCloudConnected:
_identifier
_btUUID
_uniqueID
_originalbtUUID
_syncConnection
_defaultConnection
_urgentConnection
_syncCloudConnection
_defaultCloudConnection
_urgentCloudConnection
_isCloudConnected
_isNearby
_isMagnetIndicatingPeerIsAwake
_localSetupInProgress
_isPeerAlwaysConnected
_isDefaultPairedDevice
_waitForDefaultPairedDevice
_supportsCloudUrgentConnection
_supportsCloudDefaultConnection
_supportsCloudSyncConnection
_pendingCloudUrgentEnable
_pendingCloudDefaultEnable
_pendingCloudSyncEnable
_servicesPreferringInfraWiFi
_totalDeliveredMessagesInfraWiFi
_totalPacketsReceivedInfraWiFi
_totalPacketsReceivedClientSockets
_dispatchCounterInfraWiFi
_hadInfraWiFiTraffic
_disableTimer
_cloudDisableTimer
_powerLogTimerUrgent
_powerLogTimerDefault
_powerLogTimerSync
_powerLogTimerSockets
_continuityConnectCount
_incomingServiceMap
_outgoingServiceMap
lastObject
setWantsResponse:
realm
setRealm:
setCsr:
authenticationInfo
setAuthenticationInfo:
responseUserID
setResponseUserID:
responseCertificate
setResponseCertificate:
stringValue
dsAuthID
setResponseAlertInfo:
wantsBagKey
wantsHTTPHeaders
wantsCompressedBody
wantsBinaryPush
responseCommand
_realm
_csr
_authenticationInfo
_responseCertificate
_responseUserID
userInfo
initWithSystemMonitor:
weakObjectsHashTable
dataForIdentifier:error:
_keychainAccountFromBaseIdentifier:
isAvailable
saveData:forIdentifier:allowSync:error:
removeDataForIdentifier:error:
cloudCircleStatusError:
listeners
keychainWrapperDidBecomeAvailable
notifyListenersKeychainWrapperDidBecomeAvailable
dataForIdentifier:
saveData:forIdentifier:
saveData:forIdentifier:withCompletion:
removeDataForIdentifier:
isInCloudCircleWithError:
systemMonitor
setSystemMonitor:
setListeners:
_systemMonitor
_listeners
deviceInformationString
_registrationStatusChanged:
_SIMInserted:
_SIMRemoved:
_updateNotifyState
isExpired
registrationSupported
supportsSMSIdentification
registrationState
systemSupportsServiceType:registrationType:
supportsAppleIDIdentification
faceTimeSupported
callingSupported
multiwaySupported
iMessageSupported
identityServicesSupported
serviceType
systemSupportsServiceType:accountType:
systemSupportsRegistrationInfo:
registerInfo:requireSilentAuth:
registrationSupportedForRegistration:
_notifyRegistrationFailure:error:info:
setRunningSimpleAuthentication:
authenticationToken
migrationContext
setAuthenticationToken:
mainID
authenticationCert
setRegistrationStatus:
registrationStatus
profileID
authenticateRegistration:requireSilentAuth:
_sendIDSAuthenticationForRegistration:
_sendIDSAuthenticationOrRegistrationIfNeeded:
_ensureProfileQueriesAreReadyForRegistratration:
regionID
regionBasePhoneNumber
setRegionID:
setRegionBasePhoneNumber:
saveToKeychain
_notifyRegistrationStarting:
startTrackingActiveRegistration:
removeFromKeychain
setRegistrationCert:
stopTrackingActiveRegistration:
sendDeregistration:
_notifyDeregistrationStarting:
cancelActionsForRegistrationInfo:
reportSpamWithMessages:selfURI:registration:
reportiMessageUnknownSender:messageID:messageServerTimestamp:selfURI:registration:
registrationControllerNeedsNewRegistration:
isDisabled
registrationController:registrationUpdated:
registrationController:registrationWillStart:
registrationController:registrationFailed:error:info:
_submitRegistrationCompletedMetricWithRegistration:success:registrationError:
registrationController:registrationSucceeded:
notePhoneNumberRegistrationReset
registrationController:allRegistrationsSucceeded:
registrationController:deregistrationWillStart:
_shouldSubmitRegistrationCompletedMetricForRegistration:
keychainWrapper
initWithRegistrationType:serviceIdentifier:wasSuccessful:registrationError:circleStatus:
logger
logMetric:
loggerWithCategory:
vettedEmails
shouldRegisterUsingDSHandle
queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
_notifyRegistrationSuccess:
_notifyAllRegistrationSuccess:
_notifyNeedsNewRegistration
retries
setRetries:
authenticateRegistration:forceNewToken:
setMainID:
confirmedEmails
setUris:
addCandidateEmail:
_notifyRegistrationUpdated:
runningSimpleAuthentication
array
setVettedEmails:
queryInitialInvitationContextForRegistration:
buildValidationCredentialsIfNeeded
authenticateRegistration:
isSetup
unregisterInfo:
faceTimeNonWiFiEntitled
isC2KEquipment
isCDMA
_checkTechChange
caseInsensitiveCompare:
activeRegistrations
__imArrayByApplyingBlock:
initialize
center:succeededIdentification:phoneNumber:token:
center:failedIdentification:error:
centerNeedsNewIdentification:
center:noteRegistrationRequired:
center:startedAuthenticating:
center:succeededAuthentication:
center:succeededLinkHandlesConfirmation:emailAddress:
center:succeededUnlinkHandleRequest:handle:
center:succeededEmailValidationRequest:emailAddress:
center:succeededInitialRegionQuery:
center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:
center:failedAuthentication:error:info:
center:failedLinkHandlesConfirmation:emailAddress:error:info:
center:failedUnlinkHandleRequest:handle:error:info:
center:failedEmailValidationRequest:emailAddress:error:info:
center:failedRegionValidation:error:info:
center:succeededIDSAuthentication:
center:failedIDSAuthentication:error:info:
center:succeededRegistration:
center:failedRegistration:error:info:
center:allSucceededRegistrations:
center:succeededCurrentEmailsRequest:emailInfo:
center:failedCurrentEmailsRequest:error:info:
centerUpdatedRegistrationIdentities:
reportSpamWithMessages:toURI:registration:
reportiMessageUnknownSender:messageID:messageServerTimestamp:toURI:registration:
startTrackingRegistration:
stopTrackingRegistration:
addAuthenticatedRegistration:
removeAuthenticatedRegistration:
activeRegistrationsMatchingUserID:
activeRegistrationsOfType:
activeRegistrationsToRegister
_systemConfigurationPrefsChanged
trackedRegistrations
authenticatedRegistrations
setKeychainWrapper:
_activeRegistrations
_trackedRegistrations
_authenticatedRegistrations
_deferredRegisters
_screenSharingToken
_iMessageToken
_faceTimeToken
_callingToken
_keychainWrapper
lowercaseString
setHighPriority:
setChunkNumber:
highPriority
timeout
sourcePeerID
setSourcePeerID:
messageID
setMessageID:
fireAndForget
setFireAndForget:
wantsResponse
additionalDictionary
setAdditionalDictionary:
encryptionType
setEncryptionType:
setWantsMultipleResponses:
setMaxSize:
setPriority:
deliveryStatusContext
setDeliveryStatusContext:
setUserInfo:
serviceData
setServiceData:
clientInfo
setClientInfo:
setTargetService:
setFromIdentity:
setUseTransportZone:
sizeOfKeysWithValues
wantsMultipleResponses
targetToken
ackBlock
setHasReceivedAPSDAck:
responseToken
callAllIndividualCompletionBlocksWithDeliveryContext:
clearAllPendingResponseTokens
hasReceivedAPSDAck
callAllAckBlocks
responseError
responseCode
targetPeerID
targetService
fromIdentity
_processMessageResponseForMessage:withError:resultCode:toURI:fromURI:service:fromIdentity:
setResponseError:
responseTimeStamp
setIndividualPeerMessages:
targetSessionToken
sessionTokenForURI:pushToken:fromURI:service:expirationDate:refreshDate:fromIdentity:includeSelfDevice:
forgetPeerTokensForURI:fromURI:service:
dictionaryWithObjectsAndKeys:
uniqueIDString
expirationDate
setExpirationDate:
individualPeerMessages
pendingResponseTokens
setPendingResponseTokens:
maxSize
currentSize
setCurrentSize:
chunkNumber
isFinalMessage
setIsFinalMessage:
groupPayload
setGroupPayload:
groupIdentifer
setGroupIdentifer:
useTransportZone
UTF8String
enumerateKeysAndObjectsUsingBlock:
numberWithUnsignedLong:
isEqualToIgnoringCase:
dictionaryRepresentation
initWithHighPriority:
initWithPeerMessage:service:useTransportZone:fromIdentity:maxSize:
hasSpaceForAggregatableMessage:
addAggregatableMessage:
removeAllAggregatableMessages
noteResponseForToken:
expectingMoreResponses
logFailureInfo
_fireAndForget
_hasReceivedAPSDAck
_isFinalMessage
_useTransportZone
_sourcePeerID
_encryptionType
_messageID
_targetService
_expirationDate
_fromIdentity
_additionalDictionary
_individualPeerMessages
_pendingResponseTokens
_maxSize
_currentSize
_chunkNumber
_groupPayload
_groupIdentifer
initWithDictionary:
decodeObjectForKey:
encodeObject:forKey:
initWithCoder:
encodeWithCoder:
participantID
setParticipantID:
participantData
setParticipantData:
publishedStreams
setPublishedStreams:
subscribedStreams
setSubscribedStreams:
maxConcurrentStreams
setMaxConcurrentStreams:
generationCounter
setGenerationCounter:
urisToParticipantIDs
setUrisToParticipantIDs:
clientContextData
setClientContextData:
relaySessionID
setRelaySessionID:
_params
_participantID
_participantData
_publishedStreams
_subscribedStreams
_maxConcurrentStreams
_generationCounter
_urisToParticipantIDs
_clientContextData
_relaySessionID
validationMechanisms
removeFirstObject
initWithIMSI:PLMN:validationMechanisms:
matchesIMSI:PLMN:
containsMechanisms
topMechanism
preflightStackByPoppingMechanism
_validationMechanisms
initWithAccount:destinations:options:availabilityCheck:
displayName
unsignedIntValue
initWithUUIDString:
hasSuffix:
primaryRegistration
_stripFZIDPrefix
aliasStrings
_destinationIsDefaultPairedDevice:
startUDPGlobalLinkForDevice:
unsignedIntegerValue
_loggingFlags
initWithEnvironmentName:queue:
_setInvitationTimeoutTimer
updateCriticalReliabilityState
_setLinkProtocol:
openSocketToDevice:
_registerClientChannel
pushTokenLookup:forGroup:fromID:account:completionBlock:
destinationWithStrings:
_destinationIsGuestDevice:
identityWithError:
_publicIdentityFromData:
submitAWDMetricsForIDSSessionStarted
initWithString:
_resetPreferences:
_cleanupSessionConnection
invalidateSession:
_checkAndUnassertRealTimeMode
serviceName
_stripPotentialTokenURIWithToken:
deviceIDForPushToken:
hasPrefix:
localUnauthenticatedFullIdentity
publicIdentityWithError:
identityWithData:error:
_sendMessage:toDestinations:withCommand:
publicToken
anyObject
setDestinations:
setMessage:
setCommand:
setFromID:
setEncryptPayload:
setIdentifier:
setMessageUUID:
setLocalDelivery:
setAlwaysSkipSelf:
setInterestingRegistrationProperties:
setEnforceRemoteTimeouts:
setSessionID:
initWithArray:
session:invitationSentToTokens:shouldBreakBeforeMake:
idsResponseCode
lastCall
sendMessageWithSendParameters:willSendBlock:completionBlock:
isEqualToNumber:
remoteUsePhoneContinuityLocalMessage
_sendMessage:toDestinations:withCommand:fromID:
_sendSinglePathMessage:toDestinations:withCommand:forceLocalDelivery:messageGUID:fromID:
_canSendMessageLocally:toDestinations:withCommand:
objectAtIndexedSubscript:
removeObjectsInRange:
stringByAppendingString:
_checkAndSendCachedDataForClient:
_endSessionWithReason:
writeToClientChannel:packetBuffer:metaData:metadataSize:
_connectQRDirectlyToClientChannel:
_checkAndRunClientChannelTests:
_connectSocketDescriptor:toClientChannel:
_publicIdentityDataFromLocalFullIdentity
initWithBytesNoCopy:length:freeWhenDone:
numberWithUnsignedShort:
isWithDefaultPairedDevice
globalLinkErrorToSessionEndReason:
initWithGroupUUID:participantIdentifier:participantDestinationID:participantUpdateType:participantData:clientContextData:members:participantIDs:relaySessionID:
participantIDs
notifyJoinToGroup:members:params:fromAccount:fromID:sessionID:
sessionDidJoinGroup:participantUpdateDictionary:error:
connectGlobalLinkForDevice:sessionInfo:connectReadyHandler:
onTransportThread_SendSKEData:skeData:completionHandler:
setAcceptedRelaySession:relaySessionID:options:
_certForFromURI:
groupSessionDidTerminate:
connection
deviceConnectionInfo
onTransportThread_SendWithConnectionContext:packetBuffer:
getLinkInformationForDevice:completionHandler:
onTransportThread_SetDefaultUnderlyingLink:linkID:
onTransportThread_SetPacketNotificationFilter:linkID:uniqueTag:isEnabled:
numberWithUnsignedChar:
onTransportThread_DropIPPackets:linkID:payloadArray:
numberWithChar:
onTransportThread_StopKeepAlive:linkIDs:
dataWithBytes:length:
onTransportThread_UpdateProtocolQualityOfService:linkID:isGood:
onTransportThread_CurrentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
didReceiveCurrentCellularSignalRaw:signalStrength:signalGrade:
stringWithCString:encoding:
unarchivedObjectOfClass:fromData:error:
appendData:
unarchivedObjectOfClasses:fromData:error:
requestSessionInfoWithOptions:
initWithUUIDBytes:
reportTimeDifferenceBetweenFirstPacketAndMKI:forMKI:service:activeParticipants:
onTransportThread_SendToGlobalLinkWithSessionID:packetBufferArray:arraySize:
_sendInvitationMessageWithOptions:contextData:declineOnError:connectionData:
accountType
dependentRegistrationMatchingUUID:
createConnectionData:handler:
_bestGuessURI
_getQuickRelayAllocateOptions:
setupNewAllocation:sessionID:fromIdentity:fromURI:fromService:options:connectReadyHandler:
createConnectionDataForDevice:localPartyID:dataReadyHandler:
runNetworkAvailabilityCheckWithCompletionBlock:
_setLinkPreferences:
submitAWDMetricsForIDSSessionInvitationSentWithNumberOfRecipients:
_sendInvitationWithOptions:data:declineOnError:
sendCancelInvitationToDestinations:remoteEndReason:data:
declineInvitationWithData:
_clearAllTimers
submitAWDMetricsForIDSSessionCancelSentWithRemoteEndReason:numberOfRecipients:
sendCancelInvitationToDestinations:withData:
initWithBytesNoCopy:length:deallocator:
_sendMessage:withCommand:
_setConnectionTimeoutTimer
remoteBlob
receivedRemoteConnectionData:
_handleAVConferenceError:
startConnectionAsInitiator:peerProtocolVersion:errorHandler:
_sendAcceptMessageWithContext:connectionData:
_acceptedDeviceUniqueID
sessionStartWithSocketDescriptor:
requestAllocationForRecipient:
startConnectionForDevice:isInitiator:remotePartyID:useStunMICheck:
submitAWDMetricsForIDSSessionAcceptSent
acceptInvitationWithData:
addEntriesFromDictionary:
submitAWDMetricsForIDSSessionDeclineSent
declineInvitationWithData:forceFromID:additionalMessageAttributes:
submitAWDMetricsForIDSSessionAcceptReceived
setRemoteUseCloudPairedControlChannel:
setRemoteUsePhoneContinuityLocalMessage:
unsignedShortValue
stopUDPGlobalLinkForDevice:
initWithObjects:
setRemoteBlob:
_isLocalDeviceSafeviewAdviserInitiatorOnLoboMacOrLaterAndRemoteDeviceIsPreTiboAnyPlatform
getRelaySessionIDForIDSSessionID:pushToken:
setInitiatorsAcceptedToken:pushToken:
sessionAcceptReceived:fromID:withData:
submitAWDMetricsForIDSSessionDeclineReceived
_isValidDestination:
sessionDeclineReceived:fromID:withData:
submitAWDMetricsForIDSSessionCancelReceived
sessionCancelReceived:fromID:withData:
sessionMessageReceived:fromID:withData:
sessionEndReceived:fromID:withData:
_receivedReinitiateRequestMessage:fromID:
_receivedReinitiateTeardownMessage:fromID:
_receivedReinitiateTeardownAckMessage:fromID:
_receivedReinitiateBringupMessage:fromID:
_receivedReinitiateBringupAckMessage:fromID:
_reinitiate
_supportsReinitiate
stopGlobalLinkForDevice:
_sendReinitiateMessageWithSubcommand:
submitAWDMetricsForIDSSessionReinitiateConnected
submitAWDMetricsForIDSSessionReinitiateRequested
submitAWDMetricsForIDSSessionReinitiateStarted
_inviteTimedOut
_connectionTimedOut
_endSessionTimedOut
_checkPacketLossTime
didSessionReinitiated
_setPacketLossTimer:
_clearPacketLossTimer
_clearInvitationTimeoutTimer
_clearConnectionTimeoutTimer
_clearEndSessionTimeoutTimer
isDefaultPairedDeviceFromID:accountUniqueID:serviceName:
checkNetworkAvailabilityForSession:completionBlock:
checkLocalConnectivityForSession:withCompletionBlock:
socket
initWithSocket:queue:delegate:
remoteUnauthenticatedPublicIdentity
initWithLocalFullIdentity:remotePublicIdentity:
getFromService
getCallerCert
submitAWDMetricsForIDSSessionConnected
getServerProviderForIDSSessionID:
link:didReceiveReportEvent:
link:didReceivePacket:fromDeviceUniqueID:cbuuid:
initWithReadHandler:
_acceptedDeviceToken
__socketOptionsForDevice:uniqueID:pushToken:connectionSuffix:
_setInitialLinkType:
checkAndCallSessionStart
openSocketWithOptions:queue:completionHandler:
closeSocketWithOptions:
_notifyClientsSessionStopped
_cleanupSocketPairConnection
closeSocketToDevice:
unsubscribeEndpointsForGroup:
_cleanupQuickRelaySession
purgeFromKeychain:
setLocalUnauthenticatedFullIdentity:
setRemoteUnauthenticatedPublicIdentity:
_setEndSessionTimeoutTimer
stopConnection:
notifyLeaveToGroup:members:params:fromAccount:fromID:sessionID:
removeAccountForGroup:
removeUTunPeerWithSessionID:reason:
unlockContinuityPeer:
submitAWDMetricsForIDSSessionCompleted
cleanupSession:
submitAWDMetricsForIDSSessionWithEndReason:
timeIntervalSinceDate:
groupSessionEnded:withReason:error:
sessionEnded:withReason:error:
setAudioEnabled:
getAudioEnabled
session:audioEnabled:
setMuted:
muted
session:muted:
sessionStarted:
dataWithBytesNoCopy:length:freeWhenDone:
sendData:
dictionaryWithDictionary:
updateService:withPreferences:
defaultPeerSetLinkPreferences:
onTransportThread_getLinkType:
updateMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:
recvMembershipChangeEventWithReason:
didUpdateMembers:forGroup:sessionID:
streamWithParticipantID:streamArray:anyParticipant:anyStream:
getSessionInfoFromDefaults:groupID:
invalidateLatestResponse:qrReason:previousError:
setGroupStreamInfo:sessionInfo:
connectQRServer:
cleanUpCachedMappings:
sessionDidLeaveGroup:error:
reportPrekeyAckStatus:
getAllocateResponse:groupID:
onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:
setBypassStorage:
link:didReceiveEncryptionInformation:
link:didReceiveMembershipChangedInformation:
allocationDone:sessionInfo:
getActiveParticipants:pushTokenForParticipants:
getURIFromPushToken:forGroup:
initWithGroupUUID:participantIdentifier:isKnown:participantURI:
realTimeEncryptionPublicKeyData
didUpdateParticipants:forGroup:sessionID:
session:didReceiveActiveParticipants:success:
connection:didStart:error:
connectionDidStop:error:
connection:receivedData:
connection:didReceiveData:
sendKeyMaterialMessage:toDestination:
recvKeyMaterial:
_selectDefaultMic
initWithAccount:destinations:options:
keyMaterial
setAcceptedRelaySession:
getAppID
sendInvitationWithOptions:declineOnError:
sendInvitationWithData:declineOnError:
cancelInvitationWithRemoteEndedReasonOverride:
cancelInvitationWithData:
cancelInvitation
acceptInvitation
declineInvitation
sendSessionMessage:toDestinations:
receivedAcceptMessage:fromID:
receivedDeclineMessage:fromID:
receivedCancelMessage:fromID:
receivedSessionMessage:fromID:
receivedEndMessage:fromID:
receivedReinitiateMessage:fromID:
runConnectivityCheckWithCompletionBlock:
startListeningOnClientSocket:isRawSocket:
cleanupSession
endSessionWithData:
sessionDuration
connectDuration
setPreferences:
setInviteTimeout:
link:didConnectForDeviceUniqueID:cbuuid:
link:didDisconnectForDeviceUniqueID:cbuuid:
link:didReceiveSKEData:
link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:
link:didRATChange:
link:didCellularMTUChange:
link:didDisconnectUnderlyingLinkID:linkUUID:
link:didDefaultUnderlyingLinkChangeSucceeded:currentDefaultLinkID:
link:didReceiveDebugDataForClient:dataType:
link:didReceiveSessionInfo:relayGroupID:relaySessionID:success:
link:didReceiveSessionStats:relayGroupID:relaySessionID:success:
destinationsContainFromID:
updateMembers:withContext:triggeredLocally:
joinWithOptions:
leaveGroupSession:
sendAllocationRequest:
onParticipantID2PushTokenMappingChange:
processAllocationErrorStatus:errorCode:
clientID
setClientID:
clientType
remoteUseCloudPairedControlChannel
setDestination:
accountID
isLegacy
SSRCRecv
setSSRCRecv:
seqRecvStart
setSeqRecvStart:
disallowWifiInterface
disallowCellularInterface
fromID
isInitiator
enableQuickRelay
enableSKE
quickRelaySessionToken
setQuickRelaySessionToken:
qrReason
setQrReason:
qrError
setQrError:
previousAccessToken
setPreviousAccessToken:
previousRelayIP
setPreviousRelayIP:
_accountID
_qrReason
_qrError
_previousAccessToken
_previousRelayIP
_destinations
_inviteDestinations
_inviteTokens
_connectionQueue
_baseSocketPairConnection
_connection
_localBlob
_remoteBlob
_apsConnection
_serviceName
_clientID
_quickRelaySessionToken
_fromID
_clientUUID
_clientType
_stableGroupID
_groupID
_cachedNumberOfActiveParticipants
_groupStatusNotificationParams
_startConnectingDate
_startDate
_endDate
_lastPacketTime
_packetLossTimer
_inviteTimer
_connectionTimer
_endSessionTimer
_inviteTimerCleared
_connectionTimerCleared
_endSessionTimerCleared
_error
_initialLinkType
_connectionCountHint
_inviteTimeout
_connectionTimeout
_endSessionTimeout
_groupSessionState
_reason
_keyMaterial
_encryptionState
_SSRCSend
_SSRCRecv
_seqSendStart
_seqSend
_seqRecvStart
_peerProtocolVersion
_isLegacy
_joinGroupSessionPending
_inviteSentTime
_inviteRecvTime
_shouldAssertRealTimeMode
_assertedRealTimeMode
_isInitiator
_encryptionInitialized
_enableQuickRelay
_preferredAddressFamily
_remoteUseCloudPairedControlChannel
_socketDescriptor
_extraConnections
_extraConnectionCount
_connectionClaimed
_useQRDirectly
_packetBufferArray
_clientChannel
_sessionStartedCalled
_enableSKE
_skeData
_sharedSession
_disallowCellularInterface
_disallowWifiInterface
_preferCellularForCallSetup
_disableEncryption
_enableSingleChannelDirectMode
_cachedClientData
_linkProtocol
_relayPort
_invitationRetryCount
_alwaysSkipSelf
_membershipChangeEventTime
_newKeyEventTime
_useStunMICheck
_useSecureQRControlMessage
_currentGenerationCounter
_supressClientNotifications
_awdUniqueId
_awdStartTimestamp
_availabilityCheck
_useBTDatagramPipe
_bypassUTun
_connectionContext
_preferences
_localUnauthenticatedFullIdentity
_remoteUnauthenticatedPublicIdentity
_remoteAssumeRemoteDeviceEncryption
_disableRemoteDeviceEncryption
_sessionInfoMetaData
_remoteUsePhoneContinuityLocalMessage
IDSDSession
setBroadcastID:
setBroadcastNeedsClientAck:
setBroadcastBlock:
setMessagePriority:
setMessageSenderID:
setMessageSequenceNumber:
initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:
broadcastID
broadcastBlock
broadcastNeedsClientAck
transient
setTransient:
broadcastPerformed
setBroadcastPerformed:
messagePriority
messageSenderID
messageSequenceNumber
_broadcastID
_broadcastBlock
_broadcastNeedsClientAck
_broadcastPerformed
_transient
_messageUUID
_messagePriority
_messageSenderID
_messageSequenceNumber
initWithType:
stunRequestToBuffer:outputLength:transactionID:reqCount:userName:usernameLen:sendTime:keyData:
transactionID
daemon
shutdown
logState
clearCache
_cleanUpOutgoingMessageDatabaseAndClearStatementCache
_cleanupIncomingMessageDatabase
reloadSettings
currentRunLoop
decodeIntegerForKey:
versionNumber
encodeInteger:forKey:
supportsSecureCoding
initWithVersionNumber:
_versionNumber
initWithIdentifier:versionNumber:decodableClasses:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:writeCoalescingDelay:writeCoalescingLeeway:persister:migrationBlock:
setByAddingObjectsFromArray:
loadAndCheckStatus
_performCacheModifyingBlock:
delayedSave
_decodeMapData:
_versionNumberForPersistedMap:
_mapByStrippingMetadataFromMap:
_mapByAddingMetadataToMap:
_encodeMap:
archivedDataWithRootObject:requiringSecureCoding:error:
_timerIdentifierFromBaseIdentifier:
cachedMap
concurrentReadWriteQueue
setConcurrentReadWriteQueue:
serialPersistQueue
setSerialPersistQueue:
saveTimer
setSaveTimer:
writeCoalescingDelay
setWriteCoalescingDelay:
writeCoalescingLeeway
setWriteCoalescingLeeway:
migrationBlock
setMigrationBlock:
persister
setPersister:
decodableClasses
setDecodableClasses:
isLoaded
_isLoaded
_cachedMap
_concurrentReadWriteQueue
_serialPersistQueue
_saveTimer
_writeCoalescingDelay
_writeCoalescingLeeway
_migrationBlock
_persister
_decodableClasses
setDateFormat:
initWithLocaleIdentifier:
setLocale:
stringFromDate:
_sendFanoutMessage:account:toGroupMembers:fromID:command:
_specificOriginatorFromID:senderToken:accountUniqueID:
_broadcastGroupSessionParticpantUpdate:onTopic:toIdentifier:fromID:
sessionWithGroupID:
receivedGroupSessionParticipantUpdate:forTopic:toIdentifier:fromID:
enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:
startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:completionBlock:
pairedDeviceUniqueID
_dataForKey:
_stringForKey:
participantsForGroupID:
_currentDateString
processIncomingParticipantUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
groups
events
groupMemberPushTokens
_notifiers
_groups
_events
_groupMemberPushTokens
_participantInfo
_account
authToken
setAuthToken:
setProfileID:
setPushCertificate:
pushPrivateKey
setPushPrivateKey:
pushPublicKey
setPushPublicKey:
arrayWithObject:
hasRequiredKeys:
_FTDataFromHexString
additionalMessageHeadersForOutgoingPush
_pushCert
_pushKey
_pushPublicKey
_authToken
_profileID
_setDailyTimer
_setHourlyTimer
_dailyTimer:
_hourlyTimer:
_noteActionType:forService:serviceType:requestor:
noteQueryForService:requestor:
noteQueryRequestForService:requestor:
noteIncomingMessageForService:
noteIncomingLocalMessageForService:
noteOutgoingMessageForService:serviceType:requestor:
noteOutgoingFallbackMessageForService:serviceType:requestor:
noteOutgoingServerMessageForService:serviceType:requestor:
_traffic
_hourlyTimer
_dailyTimer
watchPairing
pairedDeviceUUIDString
_setIsQuickSwitching:
addUTunPeerWithDeviceUniqueID:btuuid:
prepareForQuickSwitch
activatePairedDeviceWithCBUUID:
addPairedDevice:
ensureCommunicationWithActivePairedDeviceIsPossible
updatecloudDeliveryStateOnDefaultPeer
didSwitchActivePairedDevice:
resetCommunicationStateBeforeQuickSwitchWithCompletionBlock:
accountsOfAdHocType:
allowPendingMessagesForInactiveDevice
markAllMessageAsPendingDeleteForAccounts:withDestinationDevice:
deactivatePairedDevices
broadcasterWithMessageContext:
removeSessionKeyForAllTokenFromMainQueue
removeAllCachedSessionsFromMainQueue
resetAllSessions
removeUTunPeerWithDeviceUniqueID:btuuid:reason:
tearDownEncryptionForDeviceUniqueID:cbuuid:
obliterateConnectionInfoWithCompletionBlock:completionQueue:
isQuickSwitching
initiateQuickSwitchToDeviceWithCBUUID:broadcaster:completionBlock:
_isQuickSwitchingMutex
_isQuickSwitching
pairingManager
isPaired
serviceController
allServices
shouldSyncAccounts
accountSyncMinCompatibilityVersion
pairedDeviceServiceMinCompatibilityVersion
accountSync
accountController
accountsOnService:
synchronizeAccounts:forService:
_shouldSyncAccount:forService:
accountInfo
shouldNotSyncPhoneNumberAccounts
_sendAccountSyncMessage:
synchronizeAccountsWithRemoteInfo:service:
_updatePreferredAccountWithAccountInfo:
serviceWithPushTopic:
iCloudBasedService
smallDescription
disableAccountWithUniqueID:
loginID
removeAccount:
_registerAccountsWithRemoteInfo:
useiMessageCallerID
clearDisplayName
_isAccountInfoRegistered:
_strippedAccountInfo:
serviceWithName:
accountWithServiceName:loginID:
initWithLoginID:service:uniqueID:accountType:accountConfig:
addPrimaryAccount:
enablePrimaryAccountWithUniqueID:
linkedAccounts
linkedServices
_updateAccountWithAccountInfo:
__imForEach:
aliases
registerAccount
existingAccountOnService:withType:loginID:
setupLocalAccountForService:
synchronizeAccounts
incomingSyncMessage:
validateListenerForLocalObject:andCheckEntitlement:
_respondToAppleCareRequestID:withMessageContext:error:
addBlockForRegistrationCompletion:
setShouldSupressRepairLogic:
signInResponder
iCloudSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
iCloudSignOut
listenerForLocalObject:
applecareResponseForRequestID:withError:
appleCareSignInUserName:DSID:authToken:requestID:messageContext:
appleCareSignOutUserWithRequestID:messageContext:
publicName
propertyListWithData:options:format:error:
_fullClusterFromData:error:
dataWithPropertyList:format:options:error:
_storeData:forIdentifier:completion:
clusterWithDataRepresentation:error:
initWithKeychainWrapper:
_keychainEntryForCluster:
accountIdentityClusterForRegistrationWithCompletion:
rollFullDeviceIdentityWithCluster:error:
initWithDictionaryRepresentation:
serviceTypesFromRegistrations:
serviceTypesToUseEngramFromRegistrations:
userIDsToUseEngramFromRegistrations:
setFullAccountIdentityCluster:
setUserIDsForEngramAccountIdentities:
publicDeviceIdentityWithError:
setClientDatas:
fulfillWithValue:
promise
implicitPromise
clientDatasForRegistrations:queue:keyStore:engramKeyStore:
_dictionaryRepresentation
fullAccountIdentityCluster
fullServiceIdentitiesAdmin
base64EncodedStringWithOptions:
publicServiceIdentityAdminWithError:
publicServiceIdentitySigningWithError:
publicAccountIdentityWithError:
userIDsForEngramAccountIdentities
accountKeysRegistrationRepresentation
clientDatas
_clientDatas
_fullAccountIdentityCluster
_userIDsForEngramAccountIdentities
_localDetectedCorruption
sendData:peerID:
link:hasSpaceAvailable:deviceUniqueID:cbuuid:
getBytes:length:
peripheralDidUpdateName:
peripheral:didModifyServices:
peripheralDidUpdateRSSI:error:
peripheral:didReadRSSI:error:
peripheral:didDiscoverServices:
peripheral:didDiscoverIncludedServicesForService:error:
peripheral:didDiscoverCharacteristicsForService:error:
peripheral:didUpdateValueForCharacteristic:error:
peripheral:didWriteValueForCharacteristic:error:
peripheral:didUpdateNotificationStateForCharacteristic:error:
peripheral:didDiscoverDescriptorsForCharacteristic:error:
peripheral:didUpdateValueForDescriptor:error:
peripheral:didWriteValueForDescriptor:error:
peripheralIsReadyToSendWriteWithoutResponse:
peripheral:didOpenL2CAPChannel:error:
initWithWPLinkManager:withIdentifier:
triggerBTCorruptionRecovery
setHasSpaceAvailable:
didReceiveData:
linkID
_linkID
_peerID
_wpLinkManager
_incomingPacketBuffer
_hasSpaceAvailable
_shouldSendHasSpaceAvailable
authenticationDataSig
setAuthenticationDataSig:
authenticationDataAuthToken
setAuthenticationDataAuthToken:
authenticationDataUserID
setAuthenticationDataUserID:
responseMessage
setResponseMessage:
responseOrigin
setResponseOrigin:
_authenticationDataSig
_authenticationDataAuthToken
_authenticationDataUserID
_responseMessage
_responseOrigin
addDelegate:
initWithRapportClient:
removeDelegate:
initWithInput:initialValue:
currentItem
currentResult
initWithResponseCode:deviceID:
setLastCall:
initWithResponseCode:error:lastCall:
setDeviceID:
continueWithResult:
sendMessage:toDeviceIdentifier:completionBlock:
setReducerBlock:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
value
reduceWithCompletion:
deliveryController:didReceiveMessage:topic:command:deviceID:messageID:
rapportClient:didDiscoverDevice:
rapportClient:didLoseDevice:
rapportClient:didReceiveMessage:fromID:
sendMessage:messageID:topic:command:destinationIDs:completionBlock:
_nextMessageID
setRapportClient:
_discoveredDeviceIDsLock
_rapportClient
bonjourDeliveryController
encryptedData
setEncryptedData:
setTargetPeerID:
setTargetToken:
setTargetSessionToken:
_encryptedData
_targetToken
_targetPeerID
_targetSessionToken
getUUIDBytes:
initWithBytes:length:encoding:
UUIDString
initWithBytes:length:loggingPrefixString:
productName
setProductName:
productVersion
setProductVersion:
productBuildVersion
setProductBuildVersion:
model
setModel:
pairingProtocolVersion
setPairingProtocolVersion:
minCompatibilityVersion
setMinCompatibilityVersion:
maxCompatibilityVersion
setMaxCompatibilityVersion:
_productName
_productVersion
_productBuildVersion
_model
_pairingProtocolVersion
_minCompatibilityVersion
_maxCompatibilityVersion
_ignoreIncomingPushes
_updatePushState
_acceptIncomingPushes
setRegistered:
handler:reregisterUserID:style:service:
adHocServiceType
_accountsWithService:
_isAccountRelevantForRegistrationPush:
_handleAction:forAccounts:
_handleReIdentifyActionForAccounts:
_handleReProvisionActionForAccounts:
_handleReRegisterActionForAccounts:
_handleValidateCredentialsActionForAccounts:
_handleForceRepairRegistrationActionForAccounts:
voidPassword
voidAuthenticationTokenAllowingGracePeriod
_removeAuthenticationCredentialsIncludingAuthToken:
reregister
setAuthenticationCert:
forceRepairAccounts:
validateCredentialsWithDeliveryCompletionBlock:
handler:pushTokenChanged:
handler:reloadBag:
handler:profileHandlesUpdated:status:
handler:profile:deviceUpdated:service:
startTrackingRegisteredAccountID:
stopTrackingRegisteredAccountID:
fakeIncomingPushForUserID:style:service:
_pushHandler
_registeredAccountIDs
_registeredForPushes
registrationStateForRegistrationType:error:
accountsWithType:
ids_secureUnarchiveObjectOfClass:withData:
updateRegistrationType:toState:error:
deviceKey
cypher
conversationGroup
_groupWithDeviceIdentity:parent:groupInfo:error:
signingIdentity
publicDataRepresentationWithSponsor:error:
dataWithData:
signData:error:
publicKeyData
groupServer
responseEntries
responseEngramID
initWithDataRepresentation:
initWithStableGroupID:generation:
_groupFromServerResponse:context:groupID:error:resultCode:resultDictionary:allEntries:completion:
responseVersion
conversationGroupWithUpdatedGroupID:error:
participants
initWithConversationGroup:deviceIdentity:participants:
initWithGroupInfo:groupID:cypher:
groupCrypto
publishGroupForKey:data:signature:forwardingSig:ENID:version:completion:
initWithStableGroupID:groupServerEntry:
signature
modernIdentity
conversationSponsorPairFromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:fullDeviceIdentity:error:
sponsorAlias
participantsByAlias:
accountPublicKey
conversationKey
conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:sponsor:error:
groupMembers
applicationData
initWithAccountIdentity:paricipants:sharedApplicationData:
_participantsForDestinations:completion:
queryGroupServerForENID:withCompletion:
accountKey
setData:
setPublicKeyData:
publicDataRepresentationWithError:
entryFromPublicDataRepresentation:error:
isParentOfGroup:
_sponsorAccount
endpointsForURIs:service:fromURI:
participantsFromEndpoints:
devices
devicePublicKey
_sponsorAlias
sharedApplicationData
conversationGroupWithParent:members:sponsorAlias:sponsor:applicationData:error:
groupContext:upsertGroupWithInfo:previousGroup:completion:
groupContext:fetchGroupWithID:completion:
publicDataRepresentationForGroup:inContext:completion:
groupFromPublicDataRepresentation:inContext:completion:
participantsForCypher:completion:
validateCachedGroup:isParentOfGroup:completion:
setGroupServer:
_groupServer
_publicKeyData
_data
_forwardingTicket
groupContext
_propertyDictionariesFromPairedDevices:
persistedProperties
_migrationTypeForKeychainDictionary:
_migrateFromSinglePairedDeviceToMultipleWithKeychainDictionary:
initWithProperties:
initWithPairedDevice:isActive:
keychainDictionaryWithPairedDevices:
isMigrationRequiredForKeychainDictionary:
migrateKeychainDictionary:
systemIsShuttingDown
_performSetup
pushHandlerForAPSDelegatePort
setShouldWaitToSetTopics:
daemonCapabilities
restrictions
_setExceptionHandlingDisabled:
defaultBroadcaster
initWithLimit:timeLimit:
HTTPMessageDeliveryClass
setUserAgent:
setReceivesMemoryWarnings:
setUsesPowerNotifications:
setWatchesSystemLockState:
uTunController
_cleanupIncomingFilesDirectory
_resetPreferences
uTunDeliveryController
rapportDeliveryController
registrationController
registrationPushManager
centralRegListener
loadStoredAccounts
deviceHeartbeatCenter
encryptionController
sessionController
currentDevice
_registerForInternalCoreTelephonyNotifications
_registerForCheckpointAndVacuumDB
registerForRegistrationAccountStatusMetric
idStatusQueryController
IDQueryCompletedWithFromURI:idStatusUpdates:service:success:error:
addCompletionBlock:forUniqueIdentifier:
daemonMIGInterface
acceptIncomingGrantRequests
daemonXPCInterface
daemonMIGQueryInterface
messageStoreMigrator
_processStoredMessagesIncludingClassD:
_startPushHandlingLocked
_postAliveNotification
cleanupExpiredItems
resetPreferencesForAllServices
arrayWithObjects:
pathWithComponents:
defaultManager
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
incomingFilePath
moveItemAtPath:toPath:error:
removeItemAtPath:error:
_terminate
removeCompletionBlockForUniqueIdentifier:
_processOutgoingNonUrgentInternetMessages
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:
denyIncomingGrantRequests
clientAtIndex:isEntitledToAccessService:forEntitlement:shouldWarn:
accountSetupInfo
isEnabledAccount:
dependentRegistrations
deviceIdentifier
removeListenerObject:
_resetQueuedBroadcastsForServices:priority:
intersectSet:
_processQueuedBroadcastsForServices:priority:forceRetry:
_dropQueuedBroadcastsForServices:priority:
_cleanupListenerWithPid:
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:
_removeAccount:
_removeAndDeregisterAccount:
updateAccount:withAccountInfo:
enableAccount:
disableAccount:
setLoginID:forAccount:
authTokenChanged:forAccount:
passwordChanged:forAccount:
authenticationChangedForAccount:
authenticateAccount:
passwordUpdatedForAccount:
updateAuthorizationCredentials:token:forAccount:
validateProfileForAccount:
addAliases:toAccount:
removeAliases:fromAccount:
validateAliases:forAccount:
unvalidateAliases:forAccount:
activateAlias:onAccount:
deactivateAlias:onAccount:
registerAccount:
unregisterAccount:
_reregisterAndReidentify:account:
deactivateAndPurgeIdentifyForAccount:
hardDeregister
triggerFinalDeregister
iCloudSignInHackWithUserName:password:
iCloudSignOutHack
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iCloudUpdateForUserName:accountInfo:
iCloudModifyForUserName:
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iTunesSignOut
updateUserWithOldUserName:newUserName:
kickGetDependentForAccount:
reRegisterWithUserID:action:service:
repairAccounts
getRegisteredIdentities
authenticatePhoneWithRequestUUID:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:
setPhoneUserSubscriptionSource:withRequestUUID:
fetchPhoneUserSubscriptionSourceWithRequestUUID:
startLocalSetup
stopLocalSetup
localSetupUnpair
localSetupUnpairStart
localSetupCompleted
connectPairedDevice:
deletePairedDevice:
getLocalDeviceInfo
getPairedDeviceInfo
getDeliveryStats
initialLocalSyncStartedForServices:
initialLocalSyncCompletedForServices:
setAllowedTrafficClasses:
dropAllMessagesWithoutAnyAllowedClassifier
addPairedDeviceWithID:requestID:
connectPairedDeviceWithID:requestID:
setupCompletedForPairedDeviceWithID:requestID:
switchActivePairedDeviceWithID:requestID:
redeliverMessagesForDevice:requestID:
deletePairedDeviceWithID:requestID:
unpairStartForDeviceWithID:requestID:
stopLocalPairingForDeviceWithID:requestID:
unpairDeviceWithID:requestID:
forgetDeviceWithID:requestID:
getPairingDevicesWithRequestID:
getPairedDevicesWithRequestID:
setAllowedTrafficClassifiersForDevice:classifiers:requestID:
dropAllMessagesWithoutAnyAllowedClassifierForDevice:requestID:
reunionSyncStartedForServices:requestID:
reunionSyncCompletedForServices:requestID:
updateSubServices:forService:deviceUniqueID:
setPairedDeviceInfo:
incomingAccountSyncMessage:
sendMessageWithSendParameters:
cancelItemWithIdentifier:service:
getProgressUpdateForIdentifier:service:
sendPersistedFile:userInfo:toDestinations:usingAccountWithUniqueID:identifier:
sendServerMessage:command:usingAccountWithUniqueID:
setPreferInfraWiFi:service:
setLinkPreferences:service:
startOTRTest:priority:
testCloudQRConnection:
failedDecryptingMessage:reason:forGroupID:onService:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:
setListenerServices:commands:capabilities:
registerForNotificationsOnServices:
xpcObject:objectContext:
openSocketWithOptions:
setNSUUID:onDeviceWithUniqueID:forService:
setupNewSessionWithConfiguration:
sendInvitation:withOptions:
sendInvitation:withData:declineOnError:
cancelInvitation:
cancelInvitation:withData:
cancelInvitation:withRemoteEndedReasonOverride:
acceptInvitation:
acceptInvitation:withData:
declineInvitation:
declineInvitation:withData:
endSession:
endSession:withData:
sendSessionMessage:toDestinations:forSessionWithUniqueID:
setAudioEnabled:forSessionWithUniqueID:
setMuted:forSessionWithUniqueID:
setPreferences:forSessionWithUniqueID:
setInviteTimetout:forSessionWithUniqueID:
acknowledgeSessionID:clientID:
sendAllocationRequest:options:
updateMembers:forGroup:sessionID:withContext:triggeredLocally:
joinGroupSession:withOptions:
leaveGroupSession:participantInfo:
requestActiveParticipantsForGroupSession:
setupRealtimeEncryptionController:forAccountWithID:
sendRealTimeMediaPrekey:toGroup:
requestPublicKeysForRealTimeEncryption:forAccountWithID:
sendRealTimeEncryptionMasterKeyMaterial:toGroup:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:
resetRealTimeEncryptionKeys:forGroup:
continuityClientInstanceCreated
continuityStartAdvertisingOfType:withData:withOptions:
continuityStopAdvertisingOfType:
continuityStartScanningForType:withData:mask:
continuityStartScanningForType:withData:mask:peers:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:
continuityStopScanningForType:
continuityConnectToPeer:
continuityDisconnectFromPeer:
continuityStartTrackingPeer:forType:
continuityStopTrackingPeer:forType:
reportiMessageSpam:toURI:
reportiMessageUnknownSender:messageID:messageServerTimestamp:toURI:
reportiMessageSpamCheckUnknown:count:requestID:
homeKitGetServiceUserIDs
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:
appleCareSignInUserName:DSID:authToken:requestID:
appleCareSignOutUserWithRequestID:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:
registrationControlGetCurrentiMessageStateWithContextForRequestID:
registrationControlGetRegistrationStateForRegistrationType:requestID:
initWithTarget:connection:protocol:forceSecureCoding:
connectionComplete:
setupCompleteWithInfo:
daemonConnected
daemonDisconnected
messageReceived:withGUID:withPayload:forTopic:toIdentifier:fromID:context:
dataReceived:withGUID:forTopic:toIdentifier:fromID:context:
accessoryDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
accessoryReportMessageReceived:accessoryID:controllerID:withGUID:forTopic:toIdentifier:fromID:context:
messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:
messageIdentifier:alternateCallbackID:forAccount:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
messageIdentifier:forTopic:toIdentifier:fromIdentifier:hasBeenDeliveredWithContext:
protobufReceived:withGUID:forTopic:toIdentifier:fromID:context:
OTRTestCallback:time:error:
groupShareReceived:withGUID:forTopic:toIdentifier:fromID:context:
engramDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
checkTransportLogWithReason:
accountAdded:
accountRemoved:
accountUpdated:
accountsChanged:forTopic:
accountEnabled:onService:
accountDisabled:onService:
setupCompleteForAccount:transactionID:setupError:
account:accountInfoChanged:
account:registrationStatusInfoChanged:
account:aliasesChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
registrationFailedForAccount:needsDeletion:
refreshRegistrationForAccount:
updateDeviceIdentity:error:
account:dependentDevicesUpdated:
account:dependentDevicesUpdatedUponReconnect:
account:localDeviceAdded:
account:localDeviceRemoved:
didAuthenticatePhoneWithAuthenticationCertificateData:requestUUID:error:
didGeneratePhoneAuthenticationSignature:nonce:certificate:inputData:requestUUID:error:
didSetPhoneUserSubscriptionSource:requestUUID:error:
didFetchPhoneUserSubscriptionSource:requestUUID:error:
sessionInvitationReceivedWithPayload:forTopic:sessionID:toIdentifier:fromID:transportType:
sessionDidJoinGroup:participantsInfo:error:
sessionDidJoinGroup:participantInfo:error:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
session:didGetGroupSessionParticipants:requestID:error:
openedSocket:forHandlerID:error:
localDeviceInfo:
pairedDeviceInfo:
deliveryStats:
device:nsuuidChanged:
device:pairingDeleted:
device:pairingAdded:
continuityDidUpdateState:
continuityDidLosePeer:
continuityDidLosePeer:forType:
continuityDidStartTrackingPeer:error:
continuityDidStartTrackingPeer:forType:error:
continuityDidStopTrackingPeer:
continuityDidStopTrackingPeer:forType:
continuityDidStartAdvertisingOfType:
continuityDidStopAdvertisingOfType:
continuityDidFailToStartAdvertisingOfType:withError:
continuityDidStartScanningForType:
continuityDidStopScanningForType:
continuityDidFailToStartScanningForType:withError:
continuityDidDiscoverType:withData:fromPeer:
continuityDidDiscoverPeerWithData:fromPeer:
continuityDidConnectToPeer:withError:
continuityDidDisconnectFromPeer:withError:
refreshUserAccessTokens:error:
deviceIdentifierDidChange:
didSwitchActivePairedDevice:forService:wasHandled:
localPairingResponseForRequestID:withError:
localPairingResponseForRequestID:withError:pairedDevices:
registrationControlResponseForRequestID:withError:
registrationControlResponseForRequestID:withBoolAnswer:andError:
registrationControlResponseForRequestID:withBoolAnswer:additionalContextData:andError:
registrationControlStatusResponseForRequestID:requestID:withError:
iMessageReportSpamCheckUnknownResponseForRequestID:status:abusive:delay:withError:
initWithConnection:protocol:alreadyConfigured:forceSecureCoding:
setPid:
isSubsetOfSet:
setProcessName:
healthDebug
indexOfObjectIdenticalTo:
updateTopics
_updatePushCommandsLocked
_newSetupInfoWithContext:
refreshBundleIDs
localObjectDiedNotification:
remoteObjectDiedNotification:
_resetBroadcastQueuesForServices:
_flushBroadcastQueuesForServices:existingServices:
validateListenerForLocalObject:andPerformBlock:
validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:
clientInstancesRemoved
appleCare
kickiCloudRepairLogic
cleanupSessionsForClient:
cleanupSocketsForClient:
flushProxy:
_removeListener:
_removeListenerObject:
_removeLocalListenerObject:
indexOfObject:
_processNameToServiceName:
removeLocalListenerObject:
registeredAccountsOnService:
launchDarwinNotification
launchMachServiceNotification
_pushTopics
_commands
addListener:topics:commands:queue:
pushToWakeDisabled
configureAsMacNotificationCenterObserver:withPushToWakeTopics:
setTopics:forListener:
_localPushTopics
setTopics:
enablePushHandler:
setCommands:forListener:
broadcastProxyForTargets:messageContext:protocol:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:
_lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:
broadcasterForTopic:entitlement:messageContext:
broadcasterForTopic:ignoreServiceListener:messageContext:
accountsDebugging
healthDebugging
broadcastAttemptQueueFromPriority:
enqueueIncomingMessageBroadcast:broadcastData:forTopic:entitlement:command:capabilities:messageContext:
_shouldLaunchClientForCapabilities:
_lockedRemoteObjectsWithNotificationService:entitlement:command:capabilities:
setWithObject:
_launchServiceOnDemand:
releaseBroadcastAttemptQueue:
_printBroadcastAttemptMapForPriority:service:
logAccessWarningForAccount:withService:entitlement:clientEntitlements:logMessage:
logAccessWarningForClientAtIndex:withService:entitlement:logMessage:
allServicesStrings
_setupListenerConnection:listenerID:pid:setupInfo:entitlements:setupCompletionBlock:
replaceObjectAtIndex:withObject:
minusSet:
accountWithIdentifier:localObject:requiredEntitlement:
awdMetricsForConnectionUUID:
setServiceName:forConnectionUUID:
setClientInitTime:forConnectionUUID:
setDaemonOpenSocketTime:forConnectionUUID:
socketOpenedForService:isToDefaultPairedDevice:openError:socketError:
setDaemonOpenSocketCompletionTime:forConnectionUUID:
setClientOpenSocketCompletionTime:forConnectionUUID:
setSuccess:forConnectionUUID:
reportAndRemoveForConnectionUUID:
socketClosedForService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
closeSocketWithOptions:queue:completionHandler:
queuedIncomingMessageDictionary
dictionaryWithCapacity:
entitlementDictionary:isEntitledToAccessService:forEntitlement:forAccount:shouldWarn:
handler:didReceiveMessage:forTopic:fromID:messageContext:
handler:didReceiveMessage:forTopic:fromID:checkpointTrace:messageContext:
handler:receivedOfflineMessagePendingForTopic:messageContext:
handler:receivedNoStorageResponseForTopic:messageContext:
handler:isConnectedChanged:
deliveryController:protobufReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:
deliveryController:dataReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:
deliveryController:messageReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:
deliveryController:receivedAppLevelAckWithTopic:deviceID:btUUID:messageID:peerResponseIdentifier:priority:connectionType:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:ofTypes:
deliveryControllerHasSpaceforUrgentMessages:dataProtectionClass:ofTypes:
deliveryControllerQueuedIncomingMessageDictionary:
duetInterface:resourceAvailabilityChangedForIdentifiers:
dropQueuedBroadcastsForServices:
validateListenerForLocalObject:
listenerWithName:
_stopPushHandling
broadcasterForTarget:messageContext:
broadcasterForEntitlement:messageContext:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:
registrationBroadcasterForTopic:messageContext:
broadcasterForTopic:messageContext:
launchOnDemandServicesForQueuedBroadcastAttempts
dequeueBroadcastWithID:forMessageUUID:service:priority:
daemonInterface:shouldGrantAccessForPID:auditToken:portName:listenerConnection:setupInfo:setupResponse:
_pidSuspended:
setListenerServices:commands:capabilities:messageContext:
registerForNotificationsOnServices:messageContext:
xpcObject:objectContext:messageContext:
openSocketWithOptions:messageContext:
closeSocketWithOptions:messageContext:
getDeliveryStatsWithMessageContext:
_listenerLock
_listenerLocalObjects
_listenerIDs
_listenerServices
_listenerNotificationServices
_listenerCommands
_listenerCapabilities
_listenerEntitlements
_listenerBundleIDs
_queuedBroadcastAttempts
_urgentQueuedBroadcastAttempts
_defaultQueuedBroadcastAttempts
_syncQueuedBroadcastAttempts
_listenerCachedServices
_listenerCachedCommands
_listenerHistory
_notifier
_birthDate
_storageTimer
_messagesReceivedDuringStorage
_forcedGDRTokens
_nonUrgentInternetSendTimer
_nonUrgentInternetLastAttempt
_incomingMessageMultiQueue
_pendingOutgoingAttachments
_pendingIncomingAttachments
_localIncomingGUIDsLock
_localIncomingGUIDs
_remoteIncomingGUIDs
_incomingLocalPowerAssertionLock
_incomingLocalPowerAssertionClients
_incomingLocalPowerAssertion
_isHardReset
_cloudPairingBeforeFirstUnlock
_hasProcessedMessagesAfterFirstUnlock
_deviceIsAsleep
_homeKitMessageDelivery
_signInResponder
_negativeRegistrationUpdateCache
__setupServer
_server
_notifyToken
_shuttingDown
_portDidBecomeInvalid
invocationWithMethodSignature:
retainArguments
setSelector:
setArgument:atIndex:
_enqueueInvocation:
protocolChecker
protocol
_enqueueInvocationWithPriority:priority:
performBlockWithPriority:priority:
signatureWithObjCTypes:
wantsDeliveryStatus
anonymizedSenderID
lengthOfBytesUsingEncoding:
setAckBlock:
setWantsDeliveryStatus:
setAnonymizedSenderID:
initWithTargetToken:sessionToken:targetPeerID:encryptedData:wantsDeliveryStatus:ackBlock:completionBlock:
_anonymizedSenderID
_wantsDeliveryStatus
_completionBlock
_ackBlock
didCreateGroup:
didCacheGroup:
didUpdateGroup:withNewGroup:
didReceiveDecryptionFailureForGroup:
didReceiveRegistrationIdentityUpdate
groupContext:didCreateGroup:
groupContext:didCacheGroup:
groupContext:didUpdateGroup:withNewGroup:
groupContext:didReceiveDecryptionFailureForGroup:
groupContextDidReceiveRegistrationIdentityUpdate:
initWithDelegate:
_validatePreferences:forService:
preferencesForService:
accumulativePreferencesForAllServices
_preferencesLock
_servicesWithPreferences
isEngramEnabled
initWithIdentifier:queue:
ckContainer
keyElectionStore
engram
setSeal:
accountIdentityElector
seal
failWithError:
null
error
registerResultBlock:
deviceIdentityWithFullAdminServiceIdentity:error:
_keychainIdentifier
deviceIdentityFromDataRepresentation:publicAdminServiceIdentity:error:
existingAccountIdentityClusterWithCompletion:
notifyListenersEngramKeyStoreDidUpdateIdentities
engramKeyStoreDidUpdateIdentities:
existingFullDeviceIdentityWithCompletion:
rollAccountIdentityWithCompletion:
setQueue:
_ckContainer
_seal
_deviceKey
_closeSocket
isDefaultPairedDeviceStartingToEncrypt
replaceBytesInRange:withBytes:length:
decryptMessageData:fromToken:type:deviceID:priority:isRetry:error:
decryptMessageData:myURI:myIdentity:fromURI:token:service:groupdID:type:priority:isRetry:completionBlock:avoidMainQueue:
_checkSendNewMessage
insertObject:atIndex:
encryptMessageData:toToken:type:deviceID:priority:error:
encryptMessageData:myURI:myIdentity:toURI:toToken:service:priority:groupIdentifier:completionBlock:avoidMainQueue:
issueDependentIDQueriesWithCompletionBlock:
_destroyFairplayDeviceSession
_destroyFairplayHostSession
initWithDeviceUniqueID:cbuuid:receiveHandler:
simulateDecryptionFailure
encryptControlChannelForStoredIdentities
useSocket:serviceConnection:withFirstMessage:
connected
clearChannel
sendPriorityMessage:
_utunControlMessageFairplayDeviceInfo
_utunControlMessageFairplayHostSessionInfo:deviceType:protocolVersion:
_utunControlMessageFairplayDeviceSessionInfo:grappaDeviceSessionInfoSize:
startFairplayAuthentication
processFairplayHostSessionInfo:
processFairplayDeviceInfo:
processFairplayDeviceSessionInfo:
_handleFairplayAuthenticationFailure
sendOTRNegotiationMessage:negotiationCount:negotiationData:
processOTRNegotiationMessage:
sendSuspendOTRNegotiationMessage:
processSuspendOTRNegotiationMessage:
suspendOTRNegotiation:
resumeOTRNegotiation
isReadyForEncrypting
setIsReadyForEncrypting:
isDefaultPairedDevicePairedLocally
setIsDefaultPairedDevicePairedLocally:
isDefaultPairedDevicePairedRemotely
setIsDefaultPairedDevicePairedRemotely:
disableEncryption
setDisableEncryption:
remoteDeviceEncryptionInfo
setRemoteDeviceEncryptionInfo:
didReceiveReestablishmentRequest
setDidReceiveReestablishmentRequest:
reestablishmentRequestReceiveTime
setReestablishmentRequestReceiveTime:
checksumEnabled
setChecksumEnabled:
avoidMainQueueOverrideToNO
setAvoidMainQueueOverrideToNO:
identityPair
setIdentityPair:
_receiveHandler
_receiveHandlerBeingCalled
_pendingDataReceive
_pendingDataSend
_outgoingMessages
_outgoingPriorityMessages
_sendingPriorityMessage
_sendSuspended
_newSocket
_fairplayAuthState
_grappaHostSessionID
_grappaDeviceSessionID
_isReadyForEncrypting
_isDefaultPairedDevicePairedLocally
_isDefaultPairedDevicePairedRemotely
_identityPair
_didReceiveReestablishmentRequest
_reestablishmentRequestReceiveTime
_dataReceivedWithoutMessageCount
_serviceConnection
_checksumEnabled
_avoidMainQueueOverrideToNO
_remoteDeviceEncryptionInfo
localFullIdentity
remotePublicIdentity
_localFullIdentity
_remotePublicIdentity
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
setUsesNotificationCenter:
addUserNotification:listener:
initWithObject:key:
ttlInSeconds
bumpEvictionDateToSecondsFromNow:
backingStore
_delegate_didCacheObject:forKey:
_startEvictionTimerIfNeeded
evictCachedObjectForKey:
multiQueue
_fetchCachedObjectForKey:completion:
addBlock:forKey:description:
_delegate_shouldEvictObject:forKey:
_delegate_DidEvictObject:forKey:
_stopEvictionTimerIfEmpty
_stopEvictionTimer
evictionTimer
setEvictionTimer:
_performEvictionSweep
_delegate_shouldTTLCacheEvictExpiredItems
evictionDate
compare:
cacheObject:forKey:
_delegate_willReturnCachedObject:forKey:completion:
ttlCache:didCacheObject:forKey:
ttlCache:willReturnCachedObject:forKey:completion:
ttlCache:shouldEvictObject:forKey:
ttlCache:didEvictObject:forKey:
shouldTTLCacheEvictExpiredItems:
initWithQueue:ttlInSeconds:
fetchCachedObjectForKey:completion:
setBackingStore:
setTtlInSeconds:
setMultiQueue:
_backingStore
_ttlInSeconds
_evictionTimer
_multiQueue
setEvictionDate:
setKey:
setObject:
_key
_object
_evictionDate
utilities
basePhoneNumber
setBasePhoneNumber:
wantsExtraTimeoutRetry
maxTimeoutRetries
_basePhoneNumber
_regionID
initWithService:fromURI:toURI:
isEqualToURI:
fromURI
toURI
decodeObjectOfClass:forKey:
peerIDKeyWithService:fromURI:toURI:
hasMatchingURIs
setHasMatchingURIs:
_hasMatchingURIs
_service
_fromURI
_toURI
isInitializedForSigning
isInitializedForScoring
setHelloMessage:
initWithResultData:serverKey:error:
signData:
serverKey
resultData
UDID
serialNumber
IMEI
MEID
isUsingAbsintheV4
isUsingBAA
setStateFlags:
setUDID:
setSerialNumber:
setIMEI:
setMEID:
setScoringNonce:
setBAACert:
setIntermediateRootCert:
stateFlags
isAbsintheV4Enabled
_isBAAOptionEnabledByServerBag
isBAACertDisabled
isDebugPiscoLoggingEnabled
isSigningSupported
isScoringSupported
_isAbsintheV3EnabledByServerBag
_BAAFetchTimeoutFromServerBag
headersBySigningData:error:
activateWithValidationData:serverKey:scoringNonce:
deviceScoreWithCompletion:
isUsingAbsintheV3
_shouldUseAbsintheV4
_shouldUseBAACertOption
_shouldUseDebugPiscoLogging
_deviceAbsintheUDID
_deviceAbsintheSerialNumber
_deviceAbsintheIMEI
_deviceAbsintheMEID
helloMessage
scoringNonce
BAACert
intermediateRootCert
_helloMessage
_UDID
_serialNumber
_IMEI
_MEID
_scoringNonce
_stateFlags
_BAACert
_intermediateRootCert
_resultData
_serverKey
deviceType
phoneRepair
defaultPairedDependentRegistration
sharedDefaults
addConnectivityDelegate:
_serviceRestrictionsChanged
_bagReloaded
_servicesRemoved:
_servicesChanged
_repairTimerHit:
sysdiagnose_oversized
setupPhoneNumberRepairTimer
_registerForAllRegistrationsSucceeded
loadDeviceProperties
_registerForPreferrediMessageAccountUpdates
initWithServiceController:registrationController:systemAccountAdapter:deviceSupport:
removeObserver:
removeConnectivityDelegate:
_storeAccounts
_repairPhoneNumberAccounts
_resetPhoneNumberRepairCounter
_totalRepairCountFromPrefs
userDefaults
removeAppValueForKey:
setAppValue:forKey:
_phoneNumberRepairIntervalForCount:
_phoneNumberRepairTimerHit:
appValueForKey:
_shouldNotSetupPhoneNumberRepairTimer
_lastRepairIntervalFromPrefs
dateWithTimeIntervalSinceReferenceDate:
sendHardDeregisterCompletionBlock:
_accountsForService:onIvarQueue:
setIsBeingRemoved:
cleanupAccount
_disableAccountWithUniqueID:
_removeAccount:fromService:
delayedSaveSettings
_cleanUpAccountCredentialForRemovedAccount:
adHocAccounts
dsID
_inUseUsernames
_inUseProfileIDs
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
cleanUpAccountsBasedOnInUseUsernames:profileIDs:completionBlock:
_addAccount:toService:
_addAccount:
_setupAdHocAccountsForPrimaryAccount:
_removePrimaryAccount:
_disablePrimaryAccountWithUniqueID:userAction:
setIsUserDisabled:
deactivateRegistration
forgetPeerTokensForService:
removeCachedEntriesForService:
_enableAccountWithUniqueID:
activateRegistration
hasAliasURI:
serviceToAccountsMap
accountsOnService:withType:
_setupPhoneNumberAccounts
refreshAdHocServiceNames
_setupLocalAccounts
_setupUsingRemoteInfo
isCurrentDevicePairedOrPairing
_setupForLocal
_setupAdHocAccounts
localAccountSetupCompleted
_cleanupLocalAccounts
isLoading
adHocServices
adHocServiceNames
isLocalSetupEnabled
enabledOnlyWhenPaired
wantsPhoneNumberAccount
initAdHocAccountWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:
primaryAccount
primaryAccountUniqueID
isEqualToArray:
__imArrayByFilteringWithBlock:
enableAccountWithUniqueID:
addAccount:
_migrateLegacyAccounts1
_migrateLegacyAccounts2
appBoolForKey:
setAppBool:forKey:
preferencesDomain
copyKeyListForAppID:
copyMultipleForCurrentKeys:appID:
_FZIDType
setMultiple:remove:appID:
synchronizeAppID:
_legacyAccountsOnService:
_persistAccounts:
_preferencesOnDomain:
_FTCopyGzippedData
setValue:forKey:appID:
internalCleanup
hasForcedReRegistered
issueGetDependentRequestForAccount:
_refreshLocalAccounts
sub_services
allPrimaryServices
isUserDisabled
shouldDisableService:
registrationError
_updateRegistrationStatusWithError:info:
_enumeratePrimaryAccountsOfType:block:
_migrateLegacyAccounts
_loadAndEnableStoredAccounts
_loadAndEnableStoredLegacyAccounts
_cleanupLegacyAccounts
_cleanupLegacyLocalAccounts
_setupLinkedAccounts
_cleanUpAccountCredentialStore
updateDeviceIDMap
_resumeGDRReAuthenticateIfNecessary
initWithDictionary:service:uniqueID:
_createiTunesAccountFromSystemIfNeeded
_addAccountDuringInitialSetup:
iTunesService
iCloud
copyValueForKey:appID:
_FTDecompressData
_createAccountWithDictionary:service:uniqueID:
_cleanupAccount
legacyPreferencesDomain
_recertifyDevice
_checkAccounts
_createAndEnableExistingSystemAccounts
performCleanUpWithCompletion:
_repairiCloudBasedAccounts
_repairiTunesBasedAccounts
shouldSupressRepairLogic
hasHardDeregistered
_hasActiveAppleIDBasedAccountOnService:
_hasActiveSMSAccount
_activeAppleIDAccount
setupAccountWithCompletionBlock:
_shouldBypassRepairLogic
repairService:withPrimaryUserName:
updateDevicePropertiesWithDevices:
_issueDependentCheck
gdrReAuthenticateIfNecessary
_updateHandles:
registrationListener
_repairAccountsWithSuccessfulPhoneNumberRegistration
_repairAccountsWithSuccessfullAppleIDRegistrationForDSID:service:
_updateDeviceProperties
_dictionaryForKey:
deviceIDMap
setState:forProperty:deviceUniqueID:
saveDevicePropertiesWithOldKeys:
deviceWithUniqueID:updatedUUID:
setDeviceUniqueIDToCBUUID:
componentsSeparatedByString:
registrationAuthKit
setAppleIDWithDSID:inUse:forService:
accountWithServiceName:aliasURI:
_phoneNumberRepairInterval
_phoneNumberRepairMaxInterval
deliveryController:uniqueID:isNearby:
deliveryController:uniqueID:isConnected:
deliveryController:uniqueID:isCloudConnected:
enabledAccounts
_missingDeviceIdentity:
disablePrimaryAccountWithUniqueID:
accountOnService:withAliasURI:
accountOnService:withLoginID:
accountWithServiceName:myID:
accountUniqueIDsWithType:
primaryAccountForAdHocAccount:
threadSafeServiceWithAccountUniqueID:
__pairedDeviceStateUpdated
accountsLoaded
issueGetDependentAndGetHandlesRequest
kickRepairLogic
isiCloudSignedIn
isiTunesSignedIn
cloudPairedIDForDeviceID:
threadSafeDeviceIDForPushToken:
pushTokenForDeviceID:
deviceNameForDeviceID:
publicKeyForDeviceID:
setNSUUID:onDeviceWithUniqueID:
propertiesForDeviceWithUniqueID:
authKitAccountUpdate:
deviceCertificateForService:uri:
_accounts
_serviceToAccountsMap
_accountIDMap
_enabledAccounts
_accountCheckTimer
_deviceProperties
_pushTokenToDeviceIDMap
_pushTokenToDeviceIDMapLock
_threadSafeAccountUUIDToServiceIDMap
_accountUUIDToServiceIDMapLock
_phoneRepairTimer
_lastBagRepairInterval
_accountsLoaded
_isLoading
_fetchedRemoteIMAccountInfo
_fetchedRemoteiCloudAccountInfo
_waitingForMigration
_shouldSupressRepairLogic
_hasHardDeregistered
_authkitQueue
_systemAccountAdapter
_serviceController
_registrationController
_deviceSupport
vettedAliases
hasEverRegistered
initWithDeviceUniqueID:cbuuid:
_stopEchoTimer
dictionaryWithObject:forKey:
setLocalPartyID:
_createSimpleConnectionData
copyCurrentNetworkInterfaces
wrapperWithSockAddr:
address
index
_sendConnectionCheckRequest
setRemotePartyID:
_updateLinkTransportAddress:localAddress:remoteAddress:
_sendNominateRequest
newSocketWithIPVersion:wantsAWDL:wantsWiFi:wantsCellular:
_startConnectionEcho:
_handleEchoTimer
setDestinationAddress:isFixedDestination:fromAddress:
setTrafficClass:
_startEchoTimer
getAttribute:attribute:
stunResponseToBuffer:outputLength:transactionID:reqCount:echoTime:delay:keyData:
_forwardPacketBuffer:fromDeviceUniqueID:cbuuid:
read:inputLength:
type
verifyMessageIntegrityWithKey:inputBuffer:inputLength:
_processStunBindingRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunBindingResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunEchoRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunEchoResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunDataIndication:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:packetBuffer:fromDeviceUniqueID:cbuuid:
dataIndicationToBuffer:outputLength:data:dataLen:keyData:
_processStunPacket:fromDevice:arrivalTime:fromDeviceUniqueID:cbuuid:
link:hostAwakeDidChange:deviceUniqueID:cbuuid:
link:didConnectOverCloud:cbuuid:
link:didFailToConnectOverCloud:cbuuid:
link:didDisconnectOverCloud:cbuuid:
createConnectionData:dataReadyHandler:
processRemoteConnectionData:completionHandler:
remoteHostAwake
localPartyID
remotePartyID
_udpLink
_dataReadyHandler
_completionHandler
_remoteAddressArray
_sockAddrPairTable
_sourceInterfaceIndex
_sourceAddress
_destinationAddress
_connectionRequestStartTime
_nominateRequestStartTime
_isInvalidated
_notifyReachableDone
_keyData
_localPartyID
_remotePartyID
_nominateBlocks
_echoTimer
_headerOverhead
isTelephonyDevice
_submitStatusForAccount:
_submitStatusForNonexistentAccountType:serviceIdentifier:
registrationErrorReason
_submitStatusForAccountType:serviceIdentifier:doesExist:isEnabled:isUserDisabled:isiCloudSignedIn:isiTunesSignedIn:registrationStatus:registrationError:registrationErrorReason:
_shouldSubmitRegistrationCompletedForServiceIdentifier:
queryAndSubmitStatusForAccounts
registrationCompletedForRegistrationType:serviceIdentifier:wasSuccessful:registrationError:
stopAdvertisingOfType:
stopScanningForType:
startAdvertisingOfType:withData:
startScanningForType:withData:peers:
startScanningForType:withData:mask:peers:
startScanningForType:withData:mask:peers:boostedScan:duplicates:
connectToPeer:
connectOnMainQueueToPeer:
disconnectFromPeer:
sendData:toPeer:
isScanningOrAdvertising
setAlwaysConnectedForCBUUID:
clientInstanceCreatedWithMessageContext:
startAdvertisingOfType:withData:withOptions:
startScanningForType:withData:mask:
startScanningForType:withData:mask:boostedScan:duplicates:
removeLink:
sendReset
_continuity
_advertisingTypes
_scanningTypes
_linkIDToLink
_linkIDsConnecting
_linkIDsDisconnecting
_linkIDsAlwaysConnected
_connectivityDelegates
_errorForMissingEntitlement:
authenticatePhoneUser
localPhoneAuthenticationCertificate
phoneAuthenticationCertificatePublicKey
phoneAuthenticationCertificatePrivateKey
setSelectedPhoneNumberRegistrationSubscriptionNumber:
selectedPhoneNumberRegistrationSubscriptionWithError:
_subscriptionSourceNumberForContext:
slotID
authenticatePhoneWithRequestUUID:messageContext:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:messageContext:
setPhoneUserSubscriptionSource:withRequestUUID:messageContext:
fetchPhoneUserSubscriptionSourceWithRequestUUID:messageContext:
accountCleanup
_writeAccountDefaults:force:
setActiveAliases:
_resetVariables
queryService
isDeviceRegistered
reIdentify
addCompletionBlock:forToken:
telephoneNumber
_appearsToBeDSID
_setupAccount
_initWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:isAdHocAccount:
_broadcastAccountInfoChanged
removeCompletionBlockForToken:
_stopRegistrationAgent
writeAccountDefaults:
shouldAutoRegisterAllHandles
addAliases:
validateAliases:
dependentRegistration:findDeviceUniqueID:btID:forURI:token:
dependentRegistration:hasDependentRegistrationWithURI:token:
sessionIDforPeer:
_dependentRegistrationsForDefaultPairedDevice:
superService
shouldFilterInactiveAliases
activeAliases
allPairedUniqueIDs
primaryServiceName
pairedDevicePairingProtocolVersion
pairedDeviceMinCompatibilityVersion
pairedDeviceMaxCompatibilityVersion
pairedDevicePrivateData
pairedDevice
pairedDeviceForUniqueID:
registeredDeviceFromDependentRegistrationDictionary:
accountAndAdHocAccounts
isNull
_broadcastAccountMessageBlock:
isEqualToDictionary:
isEqualToValue:
isEqualToAttributedString:
_notifyListenersWithChanges:
candidateEmails
accountUpdate
removeAliases:
arrayByApplyingSelector:
_notifyClientDelegatesWithBlock:
_notifyDelegatesAddedLocalDevice:
didAddPairedDevice:
didRemovePairedDevice:
didUpdatePairedDevice:
didUpdateProtocolForPairedDevice:
setDisplayName:
setLoginID:
authenticationChanged
isUsableForSending
findDeviceUniqueID:btID:forURI:token:
hasDependentRegistrationWithURI:token:
fromIDForCBUUID:
superAccount
activateAlias:
deactivateAlias:
registeredDevices
wasDisabledAutomatically
setWasDisabledAutomatically:
pendingDependentCheck
setPendingDependentCheck:
isIssuingDependentCheck
isBeingRemoved
_accountInfo
_registrationInfo
_setupHandlers
_registrationListeners
_restoreTimer
_dateOfLastHandlesCheck
_localServices
_disabledAutomatically
_duringInit
_createdDuringSetup
_shouldRequeryHandles
_issuingDependentCheck
_issuingHandlesCheck
_pendingDependentCheck
_pendingHandlesCheck
_pendingAuthenticate
_pendingReIdentify
_pendingReRegister
_isRegistrationActive
_pendingAccountInfoBroadcast
_isBeingRemoved
_isIssuingDependentCheck
phoneNumber
stateMachine
initWithPhoneNumberValidationStateMachine:
pushHandler
addPhoneNumberValidationRequestor:
_notifyFailureWithError:registration:
removePhoneNumberValidationRequestor:
resetSMSCounter
setPhoneNumber:
_notifySuccess:token:
_notifyNeedsNewIdentification
setUserConsentCompletion:
bundleForClass:
response
userConsentCompletion
requestUserConsentForPhoneNumberValidationWithCompletion:
validator:identifiedPhoneNumber:token:
validator:failedIdentificationWithRegistrationError:
validatorNeedsNewIdentification:
userNotificationDidFinish:
validator
registrations
handlers
_stateMachine
_userConsentCompletion
route
setRoute:
retryCount
setRetryCount:
engramID
setEngramID:
version
setVersion:
sigAlgorithm
setSigAlgorithm:
forwardingSig
setForwardingSig:
forwardingSigAlgorithm
setForwardingSigAlgorithm:
setResponseEngramID:
setResponseVersion:
setResponseEntries:
wantsForcedCellularQueries
requiredUpdate
allowDualDelivery
setRequiredUpdate:
_route
_engramID
_version
_requiredUpdate
_sigAlgorithm
_forwardingSig
_forwardingSigAlgorithm
_responseEngramID
_responseVersion
_responseEntries
setName:
disableService
setDisableService:
name
_disableService
setShouldPostNotifications:
_updateParentalSettings
_managedPrefsNotification:
active
updateAccountActivation
shouldDisableAccount:
_serviceWithName:
shouldPostNotifications
_parentalControls
_active
_shouldPostNotifications
IDSGenericConnectionForLink:connectionSetupStartTime:firstPacketReceiveTime:connectionType:success:errorCode:
NRPairing
_notifyDelegatesWithBlock:
activePairedDevice
_hasAllEncryptionKeys
_requestPairedDeviceInfo
_requestPairedDeviceInfoAfterDelay:
_loadPairedDevicePropertiesIfNeeded
_markSecuredEncryptionKeysAsRegenerated:
regeneration
dataUsingEncoding:
hasCapabilityFlags
_activePairedDeviceCBUUID
updatePairedDeviceWithCBUUID:capabilityFlags:
_hasRegeneratedSecuredEncryptionKeys
_isEncryptionKeyRegenerationSupportedByCapabilityFlags:
isUnderDataProtectionLock
_statusOfSecuredEncryptionKeyRegenerationWithCapabilityFlags:
_regenerateSecuredEncryptionKeys
_purgeSecuredEncryptionKeysForAllPairedDevices
gatherLocalDeviceInfoWithCompletionBlock:
_suspendOTRSessionsWithProtectionClass:
removeSessionKeyForToken:
suspendSessionNegotiation:askedByPairedDevice:
purgeSecuredEncryptionKeysForAllPairedDevices
encryptionClassAKey
encryptionClassCKey
encryptionClassDKey
_localDevicePrivateData
supportsSMS
supportsMMS
supportsApplePay
supportsHandoff
supportsTethering
deviceColor
enclosureColor
localDevice
pairedDevicePublicKey
pairedDevicePublicClassAKey
pairedDevicePublicClassCKey
_pairedDeviceCapabilityFlags
_hasPairedDeviceCapabilityFlags
pairing
buildVersion
publicClassDKey
publicClassAKey
publicClassCKey
privateData
_isPairedToDevice:
allPairedDevices
_updateActiveStateForAllPairedDevices:
deviceState
shortDescription
updateStateForDeviceWithUniqueID:
_updateActiveStateForAllPairedDevices
isMissingAnyPublicKeyForPairedDeviceWithCBUUID:
_cbuuidsWithIsPairingValue:
pairedDevicesWithIsPairingValue:
pairedDeviceWithCBUUID:
hasAllPublicKeys
pairingProtocolDebug
devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:
_notifyDelegatesDevicePairedToDevice:
_notifyDelegatesDeviceUnpairedFromDevice:
_migrateSecuredEncryptionKeys
_setPairedDeviceCapabilityFlags:
_regenerateSecuredEncryptionKeysWithCapabilityFlags:
pairedDeviceBuildVersion
pairedDeviceProductVersion
pairedDeviceProductName
pairedDevicePushToken
_updatePairedState:
addLocalPairedDevice:
removeLocalPairedDevice:
cbuuidsOfPairingDevices
cbuuidsOfPairedDevices
updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:
refreshPairedDeviceEncryptionKeys
savedGeneratedClassKeys:
_delegateMap
_pairedDeviceRepository
_hasLoadedPairedDevices
_pairingStateToken
_block
_isPendingResetOfKeyRegenerationFlag
_pairedDeviceInfoRequestCountdown
realmPrefixedIdentifier
isEqualToPhoneUser:
initWithPhoneNumber:
_phoneNumber
initWithPreferedType:
initWithMessageDelivery:
arrayByAddingObjectsFromArray:
_queryGroupServerENID:withPreviousEntries:completion:
_getMessageCompletionCurrentEntries:withCompletion:
productOSVersion
_putMessageCompletionWithCompletion:
messageDelivery
setMessageDelivery:
setPushHandler:
_messageDelivery
encryptMessage:forURI:fromURI:forService:forToken:otrToken:deviceID:encryptionType:priority:groupIdentifier:error:
noteEncryptionErrorForToken:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:
signAndConcealData:cypherIdentifier:error:
decryptMessage:forURI:fromURI:forService:fromToken:otrToken:deviceID:encryptionType:priority:isRetry:error:
publicKeyForURI:pushToken:fromURI:service:
encryptMessage:forURI:fromURI:forService:forToken:encryptionType:priority:groupIdentifier:error:
decryptMessage:forURI:fromURI:forService:fromToken:encryptionType:priority:isRetry:error:
encryptDataWithAESKey:data:
decryptDataWithAESKey:data:
encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:
decryptLocalDeliveryPayload:forService:withDataProtectionClass:fromDevice:encryptionType:priority:error:
areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:
checkThreadPriority:
APNSMessageDeliveryClass
setMaxConcurrentMessages:
addAlias:
addServiceType:
addSession:
addCompletionBlock:forSession:
appleID
setAppleID:
setAliases:
deviceModel
setDeviceModel:
sessions
setSessions:
serviceTypes
setServiceTypes:
sessionToBlockMap
setSessionToBlockMap:
_appleID
_deviceModel
_aliases
_sessions
_serviceTypes
_sessionToBlockMap
__imFirstObject
stringWithLTREmbedding
addUserNotification:listener:completionHandler:
marketingNameForModel:
_localizedServicesUsageStringForDevice:useSingular:
setRepresentedApplicationBundle:
_postAvailableNotificationForSessions:appleID:aliases:deviceName:serviceTypes:blockMap:
_postUsageNotificationForSessions:appleID:aliases:deviceName:deviceModel:serviceTypes:
_processAvailableNotifications
_processUsageNotifications
_noteNewAvailableNotification:
_noteNewUsageNotification:
addAvailableNotificationForSession:appleID:alias:deviceName:serviceType:completionBlock:
addUsageNotificationForSession:appleID:alias:deviceName:hardwareVersion:serviceType:
_availableNotifications
_usageNotifications
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
unregisterAccount
authenticateAccount
passwordUpdated
updateAuthorizationCredentials:token:
validateProfile
unvalidateAliases:
_reregisterAndReidentify:
deactivateAndPurgeIdentify
fetchRegisteredDeviceIdentityWithCompletion:
_submitRegistrationAccountStatusMetric
_submitRegistrationAccountStatusMetricForAccount:
_submitRegistrationAccountStatusMetricForNonexistantAccountType:serviceIdentifier:
_submitRegistrationAccountStatusMetricForAccountType:serviceIdentifier:doesExist:isEnabled:isUserDisabled:isiCloudSignedIn:isiTunesSignedIn:registrationStatus:registrationError:registrationErrorReason:
initWithAccountType:serviceIdentifier:doesExist:isEnabled:isUserDisabled:isiCloudSignedIn:isiTunesSignedIn:registrationStatus:registrationError:registrationErrorReason:
defaultPeerSetPreferInfraWiFi:services:
iCloudUpdateForUsername:accountInfo:
iCloudModifyForUsername:
iTunesSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
updateUserWithOldUsername:newUsername:
keyRoll
_respondToRegistrationControlWithRequestID:status:messageContext:error:
respondToRegistrationControlActionWithRequestID:messageContext:error:
isGreenTea
initWithRegistrationType:registrationControlStatus:isInterestingRegion:
_preferediMessageAccountGUID
_respondToRegistrationControlQuestionWithRequestID:answer:additionalContextData:messageContext:error:
isUsingIregulariMessageSettingsWithError:
migrateClassA
migrateClassC
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:messageContext:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:messageContext:
_removeAccount:messageContext:
_removeAndDeregisterAccount:messageContext:
updateAccount:withAccountInfo:messageContext:
enableAccount:messageContext:
disableAccount:messageContext:
setLoginID:forAccount:messageContext:
authTokenChanged:forAccount:messageContext:
passwordChanged:forAccount:messageContext:
authenticateAccount:messageContext:
passwordUpdatedForAccount:messageContext:
updateAuthorizationCredentials:token:forAccount:messageContext:
validateProfileForAccount:messageContext:
addAliases:toAccount:messageContext:
removeAliases:fromAccount:messageContext:
validateAliases:forAccount:messageContext:
unvalidateAliases:forAccount:messageContext:
activateAlias:onAccount:messageContext:
deactivateAlias:onAccount:messageContext:
registerAccount:messageContext:
unregisterAccount:messageContext:
_reregisterAndReidentify:account:messageContext:
deactivateAndPurgeIdentifyForAccount:messageContext:
hardDeregisterWithMessageContext:
triggerFinalDeregisterWithMessageContext:
kickGetDependentForAccount:messageContext:
reRegisterWithUserID:action:service:messageContext:
repairAccountsWithMessageContext:
getRegisteredIdentitiesWithMessageContext:
initialLocalSyncStartedForServices:messageContext:
initialLocalSyncCompletedForServices:messageContext:
reunionSyncStartedForServices:requestID:messageContext:
reunionSyncCompletedForServices:requestID:messageContext:
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iCloudUpdateForUserName:accountInfo:messageContext:
iCloudModifyForUserName:messageContext:
iCloudSignOutWithMessageContext:
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iTunesSignOutWithMessageContext:
updateUserWithOldUserName:newUserName:messageContext:
iCloudSignInHackWithUserName:password:messageContext:
iCloudSignOutHackWithMessageContext:
updateSubServices:forService:deviceUniqueID:messageContext:
setPairedDeviceInfo:messageContext:
setNSUUID:onDeviceWithUniqueID:forService:messageContext:
incomingAccountSyncMessage:messageContext:
regenerateRegisteredIdentityWithMessageContext:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:messageContext:
registrationControlGetRegistrationStateForRegistrationType:requestID:messageContext:
_iMessageAppleIDAccount
_preferediMessageAccount
registrationControlGetCurrentiMessageStateWithContextForRequestID:messageContext:
_respondToRegistrationControlQuestionWithRequestID:answer:messageContext:error:
isGuest
_submitAWDMetric:withContainer:
_submitIDSSessionAWDMetric:withContainer:
sessionStartedWithAWDGUID:protocolVersionNumber:serviceName:clientType:
sessionInvitationSentWithAWDGUID:numberOfRecipients:
sessionInvitationReceivedWithAWDGUID:
sessionCancelSentWithAWDGUID:numberOfRecipients:remoteSessionEndReason:
sessionCancelReceivedWithAWDGUID:
sessionDeclineSentWithAWDGUID:
sessionDeclineReceivedWithAWDGUID:
sessionAcceptSentWithAWDGUID:
sessionAcceptReceivedWithAWDGUID:
sessionConnectedWithAWDGUID:
sessionReinitiateRequestedWithAWDGUID:
sessionReinitiateStartedWithAWDGUID:
sessionReinitiateConnectedWithAWDGUID:
sessionCompletedWithAWDGUID:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isLegacySessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
sessionEndedWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
requireAll
setRequireAll:
lackAll
setLackAll:
interesting
setInteresting:
_interesting
_requireAll
_lackAll
shouldMinimizeBagCacheTime
forceBagLoad
startBagLoad
groupCryptoMinVersionNumber
maxLargeMessageSize
maxMessageSize
accessToken
deliveryError
setIdsResponseCode:
_sendFTMessage:service:fromID:toID:toToken:toSessionToken:toPeople:fromIdentity:completionBlock:
_keyForURIs:service:
_handleMessage:forURIs:service:
_checkFastDormancy
peerMessageTrace
messageOnQueue
_verifyMatchingName:
shouldLogTouches
_touchEndDate
signpostID
underlyingGroup
setDisplayIDs:
setResponseTimeStamp:
_maxPayloadSizeForMessage:
_sendAsAttachmentForMessage:payloadData:
_sessionTokensForMessage:URIs:service:
_destinationCountForURIsAndTokens:
checkpointByAppendingAggregateMessageSendCheckpoint
_touchStartDate
apsMessageTrace
setApsdCheckpointTrace:
numberValueOfProperty:forURI:pushToken:fromURI:service:
isSupportedEngramVersionNumber:
hasProperty:forURI:pushToken:fromURI:service:
deliveryAcknowledgementBlock
apsdCheckpointTrace
setApsMessageTrace:
report
awdLogger
submitOutgoingMessageTrace:
setDeliveryAcknowledgementBlock:
_sendFTFanoutMessage:service:fromID:toPeople:fromIdentity:completionBlock:
checkpointByAppendingEncryptionCheckpoint
_forceAttachmentForMessage:
_sendAttachmentWithGuid:service:topic:originalCommand:additionalDictionary:encryptedData:toToken:toID:fromID:fromIdentity:canUseLargePayload:checkpointTrace:destinationObject:ackBlock:completionBlock:
encryptMessageData:myURI:myIdentity:toURI:toToken:service:priority:groupIdentifier:completionBlock:
_effectiveMaxPayloadSizeIfCanUseLargePayload:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:allowRefresh:
messageBodyUsingCache
_processMessageResponse:error:resultCode:toURI:fromURI:service:fromIdentity:
_randomTemporaryPathWithSuffix:
writeToFile:atomically:
stringByResolvingAndStandardizingPath
stringGUIDForObject:
__imHexString
_tokenURIForToken:uri:
_sendMessageDictionary:lastRetryInterval:dataToEncrypt:onService:wantsResponse:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:highPriority:fireAndForget:expirationDate:enforceRemoteTimeouts:messageID:fromID:fromIdentity:toID:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:checkpointTrace:destinationObject:ackBlock:willSendBlock:sendCompletionBlock:
initWithPayload:command:
sendIDSMessage:service:topic:completionBlock:
sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:
cypherWithEndpoint:error:
devicePublicIdentity
initWithDevicePublicKey:cypher:identifier:
initWithAccountPublicKey:aliases:devices:
destinationWithGroup:
updateGroup:withParticipants:sharedApplicationData:completion:
groupContextForProtectionSpace:withCompletion:
_queueMessage:service:dataToEncrypt:fromID:fromIdentity:toID:toPeople:originallyToPeople:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:checkpointTrace:destinationObject:willSendBlock:completionBlock:
hasPeerTokensForURI:fromURI:service:
_handleMessagesForURIs:originalURIs:service:fromID:
IDQuery
_discardMessage:forURIs:service:
_sendMessage:dataToEncrypt:onService:fromID:fromIdentity:toID:toPeople:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:checkpointTrace:destinationObject:willSendBlock:completionBlock:firstAttemptDate:
_emptyMessagesForURIs:service:
_updateDestination:forService:queriedURIs:fromID:withCompletion:
initWithSending:refresh:messaging:resultExpected:
startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
setAccessToken:
_handleAccessoryMessageForID:msg:service:fromID:fromIdentity:completionBlock:
_sendErrorDictionary:onService:fromID:fromIdentity:toID:toToken:topic:sendCompletionBlock:
sendMessageDictionary:messageID:dataToEncrypt:onService:wantsResponse:expirationDate:enforceRemoteTimeouts:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:priority:fireAndForget:fromID:fromIdentity:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:checkpointTrace:destinationObject:ackBlock:willSendBlock:sendCompletionBlock:
_messageQueue
_pendingOfflineMessages
OSVersion
setOSVersion:
sender
setSender:
attemptCount
setAttemptCount:
setGeo:
setStatus:
abusive
setAbusive:
delay
setDelay:
additionalQueryStringParameters
wantsHTTPGet
_OSVersion
_sender
_attemptCount
_geo
_abusive
_delay
_callBlocksWithResult:registrations:error:
completionBlocks
setCompletionBlocks:
_completionBlocks
nextByte
totalBytes
domainHash
payload
protobuf
resourcePath
resourceMetadata
socketPairMessageWithCommand:streamID:sequenceNumber:messageID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:peerResponseIdentifier:messageUUID:payload:protobuf:resourcePath:resourceMetadata:expiryDate:
_niceToSocketCommand:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:peerResponseIdentifier:messageUUID:data:expiryDate:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:peerResponseIdentifier:messageUUID:expiryDate:protobuf:
initWithSequenceNumber:streamID:peerResponseIdentifier:
initWithResourceAtPath:metadata:sequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:peerResponseIdentifier:messageUUID:expiryDate:
kickProgressBlock
processAckForSocketPairMessage:
socketPairMessage
setPayload:
awdTopic
setAwdTopic:
setDomainHash:
setToDeviceID:
setToURI:
fallbackBlock
setFallbackBlock:
progressBlock
setProgressBlock:
expectsPeerResponse
setExpectsPeerResponse:
wantsAppAck
setWantsAppAck:
nonWaking
setNonWaking:
nonCloudWaking
setNonCloudWaking:
compressPayload
setCompressPayload:
compressed
setCompressed:
peerResponseIdentifier
setPeerResponseIdentifier:
timeEnqueued
setTimeEnqueued:
timeSent
setTimeSent:
isDoneSending
setProtobuf:
sentMessageDataSize
setSentMessageDataSize:
didFallback
setDidFallback:
queueOneIdentifier
setQueueOneIdentifier:
setRequireBluetooth:
setRequireLocalWiFi:
setResourcePath:
setResourceMetadata:
manualQueueRemoval
setManualQueueRemoval:
deniedToSend
setDeniedToSend:
shouldEnforceRemoteTimeout
setShouldEnforceRemoteTimeout:
setDataProtectionClass:
duetIdentifiersOverride
setDuetIdentifiersOverride:
bypassDuet
setBypassDuet:
messageType
setMessageType:
underlyingSocketPairMessage
setUnderlyingSocketPairMessage:
messageState
_payload
_topic
_awdTopic
_domainHash
_command
_toDeviceID
_fallbackBlock
_progressBlock
_timeEnqueued
_timeSent
_dataProtectionClass
_expectsPeerResponse
_wantsAppAck
_nonWaking
_nonCloudWaking
_requireBluetooth
_requireLocalWiFi
_compressPayload
_compressed
_peerResponseIdentifier
_queueOneIdentifier
_underlyingSocketPairMessage
_isSending
_fullyAckd
_protobuf
_sentMessageDataSize
_didFallback
_resourcePath
_resourceMetadata
_manualQueueRemoval
_deniedToSend
_shouldEnforceRemoteTimeout
_duetIdentifiersOverride
_bypassDuet
_messageType
_messageState
setLocalContext:
setRemoteContext:
localContext
remoteContext
setState:
reqCount
setReqCount:
localCID
setLocalCID:
remoteCID
setRemoteCID:
lastSentSeq
setLastSentSeq:
lastSentAck
setLastSentAck:
_localCID
_remoteCID
_reqCount
_lastSentSeq
_lastSentAck
_localContext
_remoteContext
_copyPeerWithID:
_copyPairedDevice
_createPeerFromDeviceInfo:
hashForString:
isPresent
defaultPeerConnectivityChanged:
_disableOTRForDefaultPairedDevice
_deviceIDForPeer:
isScreenLit
lastCloudConnectedTime
initWithInactiveTime:linkType:priorLinkType:
setLastCloudConnectedTime:
enableConnectionForDefaultPairedDevice:
_setCloudConnectionConnected:forPeer:
_createPeerFromDeviceID:
peerCloudConnectivityChanged:
_enableOTRForDefaultPairedDevice
_setOTREnableTimer
_cleanupContinuityPeerMaps:
_currentOTRTimer
isLiveDeliveryWarmUpEnabled
startGlobalLinkForDevice:
copyPeerWithID:
localSetupStarted
setPendingCloudFlagOnDefaultPeer
_removePeerFromDeviceID:
sendData:service:protobuf:resourcePath:resourceMetadata:priority:dataProtectionClass:nonWaking:nonCloudWaking:requireBluetooth:requireLocalWiFi:queueOneIdentifier:expirationDate:enforceRemoteTimeouts:expectsPeerResponse:wantsAppAck:compressPayload:compressed:peerResponseIdentifier:messageID:topic:awdTopic:command:fromID:uriToDeviceID:localDeviceDestinationDeviceUUID:bypassDuet:duetIdentifiersOverride:messageType:fallbackBlock:progressBlock:completionBlock:
defaultPeerIsConnected
defaultPeerIsNearby
defaultPeerIsCloudConnected
enableCloudConnectionForDefaultPairedDevice:
hasSpaceForMessagesWithPriority:dataProtectionClass:
hasSpaceForCloudMessagesWithPriority:dataProtectionClass:
allowedTrafficClasses
defaultPeerNearbyChanged:
defaultPeerCloudConnectivityChanged:
defaultPeerMagnetIndicationOfAwakeStateChanged:
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
peerCloudConnectivityChanged:isCloudConnected:
findDefaultPeerToForceOTRNegotiation:priority:completionBlock:
lockContinuityPeer:btUUID:
unlockAllContinuityPeers
pendingContinuityPeerID:
tryNextContinuityPeer:
isPeerForPhoneContinuityLocalMessage:
enableOTRForDefaultPairedDevice
enableOTR
_deviceIDToPeerLock
_deviceIDToPeer
_btuuidToSessionID
_streamIDToTopicLock
_streamIDToTopic
_lastConnectedTime
_lastIsNearbyBecameTrue
_isLinkForDefaultPeerConnected
_trafficClassLock
_allowedTrafficClasses
_enableOTR
_otrTimer
_otrInitialized
_localAccountSetupCompleted
_defaultPeerConnectedDeferred
_continuityPeerLock
_lockedPeerMap
_peerListMap
_pendingPeerMap
_peerConnectBlocksMap
_peerFailureBlocksMap
_lastCloudConnectedTime
groupContextController
observer
appendMiddleware:
initWithMachServiceName:
resume
upsertGroupWithInfo:previousGroup:completion:
fetchGroupWithID:completion:
publicDataRepresentationForGroup:completion:
groupFromPublicDataRepresentation:completion:
latestCachedGroupWithStableID:completion:
fetchAllKnownGroups:
deleteAllKnownGroupsWithCompletion:
deleteAllCachedValuesForGroupWithID:WithCompletion:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
didCreateGroup:completion:
didCacheGroup:completion:
didUpdateGroup:withNewGroup:completion:
didReceiveDecryptionFailureForGroup:completion:
didReceiveRegistrationIdentityUpdateWithCompletion:
setRemoteObjectInterface:
remoteObjectProxy
observerProxies
setInvalidationHandler:
setInterruptionHandler:
listener:shouldAcceptNewConnection:
listener
setListener:
setConnection:
setObserver:
setObserverProxies:
_listener
_observer
_observerProxies
setupNewIncomingSessionWithOptions:
submitAWDMetricsForIDSSessionInvitationReceived
addBlock:withTimeout:forKey:description:
unsignedCharValue
setMasterKeyMaterial:forDevice:fromID:groupID:sessionID:
processIncomingPrekeyAckForGroup:
setRealTimeEncryptionPublicKey:forDevice:fromID:groupID:sessionID:expirationDate:
removeObjectsForKeys:
setEnableCriticalReliability:
setupNewOutgoingSessionWithOptions:
processIncomingInvitationWithPayload:topic:fromToken:fromID:toID:shouldFilter:idsMessageContext:messageContext:
processIncomingSessionAcceptMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionDeclineMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionCancelMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionEndMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionReinitiateMessage:fromToken:fromID:idsMessageContext:
processIncomingGroupSessionMessage:fromToken:fromID:toID:topic:idsMessageContext:
cleanupSessionWithChannelDestination:
_handleClientDeath:
groupSessionGroupIDs
_sessionIDMultiQueue
SessionController
_currentForcedGDRCount
earlierDate:
dateByAddingTimeInterval:
_performedForcedGDRDatePeriod
_incrementForcedGDRCount
_updatePerformedForcedGDRDate
_clearForcedGDRCount
_clearForcedGDRDate
_updateVettedAliases:emailInfo:addToCurrentHandlesIfNeeded:
_validationStatusForAlias:
_addAliases:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:
_neededRegistrationType
email
registrationWithServiceType:registrationType:value:
setShouldAutoRegisterAllHandles:
setShouldRegisterUsingDSHandle:
regionServerContext
_rebuildRegistrationInfo:
setServiceType:
setServiceIdentifier:
setRegistrationType:
setEmail:
setIdsUserID:
setIsCDMA:
setKeyPairSignature:
_aliasStrings
setRegionServerContext:
smsSignatureAndMainID:
_IDFromFZIDType:
setAdHocServiceNames:
_registerAccount
_registrationAbilityChanged:
_identityRebuilt:
_identityGenerated:
_keychainMigrationComplete:
setIsDisabled:
needsMigration
canRegister
_checkRegistration
_refreshRegistration
_removeAliases:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:aliasProperties:
localizedCaseInsensitiveCompare:
sortedArrayUsingSelector:
applicationVersion
IDSVersion
identityVersion
_reregister
_notifyListenersAndSetDependentRegistrations:onRegistrationInfo:
setRegistrationStatus:error:alertInfo:
_updatePhoneNumberCallerID
_reregisterAndReProvision
_removeAuthenticationCredentials
_registerForDeviceCenterNotifications
registrationCenter
removeAllRegistrations
bagURL
host
port
_unregisterAccount
_deregisterDeviceCenterNotifications
_isPasswordPromptPermissibleDuringAuthentication
_authenticateAccount
_FZBestGuessFZIDType
setMigrationContext:
_isPhoneNumberAuthenticationDuringBuddyAllowed
_haveBuddyDependenciesCompleted
_retryRegister
_migrateRegistrationIfNeeded
setNeedsMigration:
isDeviceAuthenticated
shouldShowUsageNotifications
appleIDNotificationCenter
_validateAliases:validateAlreadyValid:
dateLastRegistered
_issueCriticalDependentCheck
setDependentRegistrationsTTL:
setDependentRegistrationAuthRetries:
setDependentRegistrationResponseCode:
dependentRegistrationAuthRetries
gdrCenter
shouldReAuthenticateForGDRResultCode:retries:
_reAuthenticate
setDependentRegistrations:
_notifyRegistrationListenersAccountDidUpdateRegisteredDevices
_hasBudgetForForcedGDR
_clearGDRState
tunnelService
_updateSessionsWithRegisteredURIs:
_flushTokensForRegisteredURIs:
_processReceivedDependentRegistration:oldDependentRegistrations:
_saveAndNotifyGDRUpdate
getDependentRegistrations:completionBlock:
_IDsFromURIs
arrayByAddingObject:
activeURIsFromURI:service:
sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encryptPayload:wantsResponse:expirationDate:command:wantsDeliveryStatus:deliveryStatusContext:messageUUID:priority:localDelivery:disallowRefresh:willSendBlock:completionBlock:
validationStatusForAlias:
_validateAliases:
invisibleAliases
trimmedString
removeCandidateEmail:
validateEmail:forRegistration:
unlinkHandle:forRegistration:
removeObjectsInArray:
_unvalidateAliases:
sendValidateCredential:withDeliveryCompletionBlock:
validateRegion:phoneNumber:forRegistration:
account:didUpdateRegisteredDevices:
isRegistrationActive
_issueForcedDependentCheckIfPossible
registrationController:deregistrationSucceeded:
refreshVettedAliases
reportSpamWithMessages:toURI:
addRegistrationListener:
removeRegistrationListener:
initWithAccountController:serviceController:passwordManager:
_signInDomain:withUsername:authToken:password:accountInfo:accountStatus:handles:
_updateDomainWithUsername:accountInfo:
_modifyDomainWithUsername:
_signOutDomain:
passwordManager
updatePreviousUsername:toNewUsername:
longValue
setHandlesForProfileID:username:service:handles:
_shouldServiceBeEnabledOnSignIn:forDomain:
_reregisterAndReProvisionForEDULoginWithUsername:
_shouldServiceBeDisabledOnSignOut:forDomain:
accountTypeWithAccountTypeIdentifier:
initWithErrorCode:timeIntervalSinceAuthenticationParameterRequest:
credential
token
isInMultiUserMode
_accountController
_passwordManager
initWithDeliveryController:
setDeliveryController:
makeObjectsPerformSelector:
startCollectingMetricsForServerStorageStateMachineFor:isPrimary:
_sendServerStorageMessageForTopic:retryCount:
terminateStateMachineForTopic:
_stateMachineTimedOut:
deliveryController
_startTimeoutTimerForTopic:
stopCollectingMetricsForServerStorageStateMachineFor:
incomingStorageRequestForTopic:primary:messageContext:
initWithTopic:isPrimary:
endCollector
reportMetric
incrementMessageCount
recievedNoStorageResponseForTopic:messageContext:
recievedLastMessageFromStorageForTopic:
inflightServerStorageStateMachineForTopic:
currentMetricCollectorForTopic:
incrementMessagesFromStorageForTopic:
metricCollectors
_currentStorageRetriesPerTopic
_deathTimerToTopicMap
_inflightStorageRequests
_pendingStorageRequests
_metricCollectors
_deliveryController
cachedPublicKeyForDeviceID:
cachePublicKey:forDeviceID:
removeCachedPublicKeyForDeviceID:
deviceID
setPublicKey:
_deviceID
initWithPeerIDManager:accountController:
_removeOldPersistence
peerMap
clientData
personalPublicKeyForDeviceID:
removePublicKeyForPushToken:
setPeerIDManager:
setAccountController:
setLock:
cache
setCache:
_peerIDManager
_cache
initWithProperties:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:
initWithCBUUID:
initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:
initWithPairedDevice:capabilityFlags:
initWithPairedDevice:deviceInfoPayload:
pairedDeviceWithoutSecuredEncryptionKeys
isPairing
_properties
language
setLanguage:
services
setServices:
privateDeviceData
setPrivateDeviceData:
accountKeys
setAccountKeys:
validationData
setValidationData:
deviceScore
setDeviceScore:
deviceScoreNonce
setDeviceScoreNonce:
responseServices
setResponseServices:
responseHBI
setResponseHBI:
nonStandardMessageHeadersForOutgoingPush
_validationData
_responseServices
_language
_services
_privateDeviceData
_responseHBI
_accountKeys
_deviceScore
_deviceScoreNonce
_addEarlyListener:
_flush
setFireTimeInterval:
reloadFromKeychain
keychainManager
keychainServiceForVersion:
keychainAccountForVersion:
keychainAccessGroupForVersion:
__saveToKeychain
_saveToKeychain
_setPurgeTimer
_reloadFromDictionary:
_loadIfNeeded
_keychain_comparisonValue
_keychain_isEqual:
addRegistration:
removeRegistration:
authenticationCertForID:
setAuthenticationCert:forID:
setSMSSignature:mainID:
_smsSignatures
_authenticationCerts
_registrationData
_purgeTimer
_purgeCancelBlock
_purgeEnqueueBlock
_setupTokens
_updateCapabilities
selectedPhoneNumberRegistrationRegistrationCarrierBundleValueForKey:ofType:withFallbackValue:
_deferredUpdateCapabilities
carrierBundleChange:
operatorBundleChange:
coreTelephonyClient
supportedServicesToken
setSupportedServicesToken:
_supportedServicesToken
_coreTelephonyClient
_validateListenerForLocalPairingWithMessageContext:error:
_respondToRequestID:withMessageContext:error:
obliterateConnectionInfo
allServicesWithAdHocServiceType:
_processMessagesUponUnpairing
_pairingDeviceCBUUIDs
_respondToRequestID:withMessageContext:error:pairedDevices:
_pairedDeviceCBUUIDs
_sortedArrayFromCBUUIDSet:
_processDisallowedMessages
addPairedDeviceWithID:requestID:messageContext:
setupCompletedForPairedDeviceWithID:requestID:messageContext:
connectPairedDeviceWithID:requestID:messageContext:
stopLocalPairingForDeviceWithID:requestID:messageContext:
unpairDeviceWithID:requestID:messageContext:
unpairStartForDeviceWithID:requestID:messageContext:
deletePairedDeviceWithID:requestID:messageContext:
dropAllMessagesWithoutAnyAllowedClassifierForDevice:requestID:messageContext:
setAllowedTrafficClassifiersForDevice:classifiers:requestID:messageContext:
switchActivePairedDeviceWithID:requestID:messageContext:
redeliverMessagesForDevice:requestID:messageContext:
forgetDeviceWithID:requestID:messageContext:
getPairingDevicesWithRequestID:messageContext:
getPairedDevicesWithRequestID:messageContext:
startLocalSetupWithMessageContext:
addPairedDevice:messageContext:
localSetupCompletedWithMessageContext:
connectPairedDevice:messageContext:
stopLocalSetupWithMessageContext:
localSetupUnpairWithMessageContext:
localSetupUnpairStartWithMessageContext:
deletePairedDevice:messageContext:
getLocalDeviceInfoWithMessageContext:
dropAllMessagesWithoutAnyAllowedClassifierWithMessageContext:
getPairedDeviceInfoWithMessageContext:
setAllowedTrafficClasses:messageContext:
cancelMessage:
userAgent
retryInAirplaneMode
setRetryInAirplaneMode:
logToRegistration
setLogToRegistration:
currentMessage
queuedMessages
__sendMessage:
_dequeuePendingRequestsIfNecessary
initWithPushHandler:lockdownManager:heartbeatCenter:ftNetworkSupport:sendMessageHandlerBlock:messageResponseHandlerBlock:
__reallySendAuthenticateRegistration
initWithQueue:block:
__reallySendRegistration
initWithCapacity:queue:block:
__reallySendDeregistration
__cleanupValidationInfo
initWithFullCluster:
initWithLegacyIdentity:modernIdentity:accountIdentity:
__dumpState
_checkOverRegistrations
_sendAuthenticateRegistration:
_sendRegistrationAsDeregister:
cancelPendingExecutions
enqueueExecutionWithTarget:afterDelay:
signingSession
__imDataWithRandomBytes:
wiFiActiveAndReachable
_noteRegistration
absintheRetries
setAbsintheRetries:
responseAlertInfo
setRegistrationDate:
setNextRegistrationDate:
apsEnvironmentName
setEnvironment:
setApplicationVersion:
setIdentityVersion:
setIDSVersion:
_notifyRegistrationFailure:responseCode:registrationError:error:info:
_notifyAllSuccessfulRegistrations:
_hasOngoingAuthentications
stringByReplacingOccurrencesOfString:withString:
_URIsFromIDs
emailsToRegister
hasSentinel
addAuthUserID:certificate:privateKey:publicKey:
_processRegistrationMessage:sentRegistrations:descriptionString:actionID:actionString:isDeregister:deliveredWithError:resultCode:resultDictionary:
FTMessageDelivery_oversized
descriptionForObject:options:
_queueBuildingValidationDataIfNecessaryForMessage:withCompletion:
registerFulfillBlock:
setDSAuthID:
substringToIndex:
_notifyIDSAuthenticationSuccess:
_notifyProvisionFailure:responseCode:registrationError:error:fatal:info:
cancelRegisterActionsForRegistrationInfo:
setSpamMessages:
setSelfURI:
iMessageSpam
setUnknownSenderURI:
setMessageServerTimestamp:
_geoRegion
_hasRegistration:inQueue:
responseHandles
selfHandle
_notifyEmailQueryFailure:responseCode:registrationError:error:info:
setDSHandle:
_notifyEmailQuerySuccess:emailInfo:
initWithDictionary:copyItems:
_processGetHandlesMessage:registrations:deliveredWithError:resultCode:resultDictionary:allowPasswordPrompt:
_queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
_sendDeregistration:
_FTDataFromBase64String
__queueValidationMessage:
__failValidationQueue
__flushValidationQueue
_sendAbsintheValidationCertRequestIfNeeded
_notifyRegistrationIdentitiesUpdated
reportiMessageSpamCheckUnknown:count:completionBlock:
sendAuthenticateRegistrationTask
sendRegistrationTask
sendDeregistrationTask
cleanupAbsintheTask
_queuedRegistrations
_queuedAuthentications
_currentAuthentications
_currentRegistrations
_pendingDequeue
_pendingDeregistration
_currentGetHandlesBlocks
_currentGetHandlesRegistrations
_successfulRegistrations
_dateSentLastHTTPMessage
_dateLastRegistered
_accountingHour
_httpMessageDelivery
_engramKeyStore
_gdrCenter
_sendAuthenticateRegistrationTask
_sendRegistrationTask
_sendDeregistrationTask
_cleanupAbsintheTask
setURIs:
weight
setWeight:
responseIdentities
setResponseIdentities:
requiredForMessaging
setRequiredForMessaging:
resultExpected
setResultExpected:
selfURI
wantsManagedRetries
wantsBodySignature
dataUsageBundleIdentifier
handleResponseHeaders:
_resultExpected
_uris
_weight
_responseIdentities
_requiredForMessaging
wrapperWithAddressString:withPortHostOrder:withInterfaceName:
initWithDelegate:pairedDevice:
_startNetworkInterfaceListener:
_startCellularDataStatusListener:
_startReporter
_createWiFiManagerClient
_bringUpWiFi:
stop
rangeOfString:
_newUDPLinkForDeviceUniqueID:cbuuid:IPVersion:port:
setDestinationAddressToDeviceIDMap:
_setBestLinkToCurrent:
_nearbyChangedForDefaultDevice
generateLinkReport:forceReport:
onTransportThread_PerServiceDataTransferredForDevice:services:
isLinkSuspended
suspendLink:
_startUDPLinkHandshakeForDefaultDevice:immediately:
_connectivityChangedForDefaultDevice:isCloudConnected:
interfaceAddressWithTransmittedBytes:length:withLocalInterfaceName:
IPVersion
initWithSockAddr:
_suspendBTLink:cbuuid:
_sendUDPLinkInterfaceAddresses:toDeviceID:isRetransmission:isReply:
remoteDetectedCorruption
isInvalidated
lastDestinationSent
lastDestinationReceived
setLastDestinationSent:
getTransmittableBytes:withPrefixByte:
defaultLinkType
_selectBestLink:
_processLinkChangeForDefaultDeviceFrom:to:
setPort:
setAllowsLinkLocal:
getAdditionalAllocationForAddress:selfAddress:relaySessionID:allocateType:qrReason:previousTime:previousError:previousRelayIP:previousAccessToken:requestSelfAllocation:isSessionIDRemoteDeviceID:
reportAWDAllocatorEvent:relayProviderType:transport:localRAT:duration:
startKeepAliveTimer:relaySessionID:
stopKeepAliveTimer:relaySessionID:
initWithBlocks:qraAWDBlock:qraCONBlock:qraDISBlock:
startWithOptions:
sendPacketBuffer:destination:toDeviceID:
_sendPacketBuffer:toDeviceUniqueID:cbuuid:link:
startLinkForDeviceUniqueID:cbuuid:
_removeAllLinksForDeviceID:
_hasGlobalLinkConnectingOrConnected
updatePairedDevice:
connect
_newUDPGlobalLinkForDeviceUniqueID:cbuuid:
startDatagramLink
stopDatagramLink
_removeAllocateRequestForDevice:requestID:
_newGlobalLinkForDeviceUniqueID:cbuuid:options:
connectWithSessionInfo:interfaceAddress:joinSession:completionHandler:
disconnectWithCompletionHandler:
setAcceptedRelaySession:options:
sendSKEData:
setDefaultUnderlyingLink:
setPacketNotificationFilter:uniqueTag:isEnabled:
dropIPPackets:payloadArray:
updateProtocolQualityOfService:isGood:
stopKeepAlive:
currentCellularSignalStrength:signalStrength:signalGrade:
getSessionInfo:relaySessionID:requestType:options:
_linkKeyForLink:
_removeLinkForDeviceID:linkKey:verifyWithLink:
_processLMCommandPacket:fromLink:deviceUniqueID:cbuuid:
_startAllocateRequestForDevice:
stopLinkForDeviceUniqueID:cbuuid:disconnectWP:
handleNetworkAddressChanges:hasIPv6AddressChange:
isEqualToWrapper:
reconnectWithLocalAddress:
radioAccessTechnology
handleCellularRATChange
manager:didPowerStateChange:
manager:linkDidConnect:
manager:linkDidDisconnect:
manager:didPairedDeviceChange:
cellularRadioAccessTechnologyDidChange:
triggerFixedInterfaceLinksDidConnect
injectFakePacketInBTLink:cbuuid:
flushBuffer:toDeviceUniqueID:cbuuid:
isConnectedToDeviceID:
triggerBTCorruptionRecoveryForCBUUID:
setRequireBT:
processRemoteConnectionDataForDevice:remoteConnectionData:completionHandler:
startBTDatagramLinkForDeviceUniqueID:cbuuid:
stopBTDatagramLinkForDeviceUniqueID:cbuuid:
_addAllocateRequestForDevice:requestID:
handleAllocateRequestFailureForDevice:requestID:errorCode:
sendSKEData:skeData:completionHandler:
setDefaultUnderlyingLink:linkID:
setPacketNotificationFilter:linkID:uniqueTag:isEnabled:
dropIPPackets:linkID:payloadArray:
updateProtocolQualityOfService:linkID:isGood:
stopKeepAlive:linkIDs:
currentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
getSessionInfo:relayGroupID:relaySessionID:options:
setIsOnPhoneCall:forDeviceID:
_handleNetworkChanges:
currentLinkType:andRATType:forDeviceID:
linkForCBUUID:
currentLinkType:
_getIDSLinkTypeString:
_handleWRMLinkRecommendation:
_subscribeToWRMForLinkRecommendation:
_unsubscribeFromWRMForLinkRecommendation
currentDefaultDeviceLinkType
_cbuuidToLinks
_deviceIDToCurrentLink
_deviceIDToUDPDestinations
_btLinkManager
_isCentral
_mayBringUpWiFi
_isWiFiBroughtUp
_shouldBringWiFiDown
_shouldKeepWiFiUp
_handshakeCounter
_WiFiBringUpCounter
_addressRetransmissionInterval
_requireBT
_deviceIDToAllocRequests
_deviceIDToGlobalLinkUp
_delayedDefaultDeviceAllocateRequest
_totalPacketsDropped
_previousPacketsDropped
_previousReportFileOpenTime
_minReportFileOpenTimeInterval
_reporterFile
_reporterFd
_isInternalInstall
_demoMode
_fixedInterface
_fixedInterfaceDestination
_hasFixedDestination
_reporterTimer
_dynamicStore
_cellularDataStatusListenerStarted
_defaultDeviceCbuuid
_doesDefaultDevicePreferInfraWiFi
_isDefaultDeviceUsingBTLink
_isDefaultDeviceNearby
_lastSentDefaultDeviceNearby
_lastSentDefaultDeviceConnectivity
_lastSentDefaultDeviceCloudConnectivity
_lastSentDefaultPeerConnectivity
_isDefaultDeviceOnPhoneCall
_hasDelayedNoConnectivityNotification
_localWiFiAddressUsedForDefaultDevice
_currentDefaultDeviceLinkType
SHA1HexString
uppercaseString
_newCompanionLinkClient
setDispatchQueue:
_handleDiscoveredDevice:
setDeviceFoundHandler:
_handleLostDevice:
setDeviceLostHandler:
_handleIncomingIDSMessageEvent:options:
registerEventID:options:handler:
activateWithCompletion:
publicIdentifier
setLocalDeviceUpdatedHandler:
sendEventID:event:destinationID:options:completion:
_companionLinkClientForDeviceIdentifier:completion:
_deviceWithIdentifier:error:
setDestinationDevice:
initWithError:
initWithSuccess:
companionLinkClient
statusFlags
idsDeviceIdentifier
_isDiscoveredOverWiFi:
ttlCache
activeDevices
effectiveIdentifier
flags
setFlags:
setTtlCache:
_companionLinkClient
_discoveredDevices
_ttlCache
delivery
setURI:
responseVettingStatus
setResponseVettingStatus:
_uri
_responseVettingStatus
initWithIdentifier:
classStorageBecameAvailable:
_nonThreadSafeStopConnection
_isMagnetConnection
_inflightMessageCount
indexesOfObjectsPassingTest:
countForDataProtectionClass:
_sendingMessageCountForClass:
countForDataMessageType:
_sendingMessageCountForType:
_pendingOutgoingBytesForClass:
statistics
_isWiProxPeer
_startConnection
_nonThreadSafeIsConnected
_nonThreadSafeSocketOptions
suspendSocketWithOptions:
_connectivityChanged
_removeSocketPairMessage:localMessage:reason:detailedError:responseCode:
messages
_dequeueMessages
_startConnectionForContinuityPeer
resumeSocketWithOptions:
_clearLastFallbackWithReason:
_currentLink
detectorWithName:
_checkAndStartConnection
_encryptDataWithOTR:token:
_decryptOTREncrtypedMessage:
_sendSocketMessage:
pushMessage:
_removeMessageFromStatistics:
_removeSocketPairMessage:localMessage:reason:responseCode:
enqueueMessage:
_resetFallbackTimeout:useNextFallback:
_startMessagesDequeueMessagesTimer
fireDate
_resetTimeout:
_handleBecomingEmptyForDataProtectionClass:
_handleBecomingEmpty
_handleBecomingEmptyOfCloudMessages
_clearSendingPowerAssertionWithReason:
_fallbackTimeout
_fallbackTimerFired
_messageIsAllowedToSendMessageOnTopic:
_performFallbackIfNecessary:
initWithIndex:
_timeoutTimerFired
initWithTimeInterval:name:shouldWake:target:selector:userInfo:useCurrentRunLoop:
_messageTimedOut:localMessage:
_inflightMessageCountForClass:
_shouldAWDLogMessage:
messageDeliveredForService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
cancelMessageWithSequenceNumber:streamID:messageUUID:cancelReason:
_sendSocketMessage:ignoreSequenceNumber:
setWpConnectionErrorDomain:
setWpConnectionErrorCode:
setWpConnectionErrorUserInfo:
dequeueMessage:
setCancelled:
nonBluetoothAvailableForBundleId:
_invalidateMessagesDequeueTimer
supportsMessageOfType:
_inflightMessageCountForType:
setWithSet:
nextSocketPairMessageNotOnServices:
checkServiceCompability:localMessage:
initWithIdentifier:timeout:
setStreamID:
setUseDynamicServiceName:
dataUsageBundleID
_nonBTAllowedForClientID:
duetIdentifiers
setMaxChunkSize:
setResumeResourceTransfers:
nextMessage
isDone
underlyingDataLength
_addOutgoingMessageSize:forTopic:dataProtectionClass:isResource:
messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:
setSequenceNumber:
_messageHasValidEncryptionStatus:
_sendEncryptedMessage:
_updateDictionary:addMessageSize:addMessageCount:
_addMessageSize:forTopic:direction:dataProtectionClass:isResource:
statisticsForDataProtectionClass:
_sendingMessageStatisticsForClass:
_dequeueMessagesTimerInterval
_dequeueMessagesTimerDidFire:
_requeueSendingMessage:
setSessionReady:
_requeueMessages:
startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
handleOTRNegotiationComplete:
addOTRSessionBlock:sessionBlock:key:
handleOTRNegotiationTimeout:
_processIncomingDataMessage:
encryptMessageData:toToken:otrToken:deviceID:type:priority:error:
cancelled
initWithVersion:encrypted:streamID:priority:sequenceNumber:fileXfer:data:
_sendOTREncryptedMessage:useEncryption:streamID:forPriority:flag:token:
encryptMessageData:deviceID:type:priority:completionBlock:
_sendPublicKeyEncryptedMessage:
isSessionReady:
_sendOTREncryptionQueue:streamID:
isSessionStoreAvailableForDataProtectionClass:
isUnderLock
fileXfer
_storeIncomingClassCDataMessageIfNeeded:topic:sequenceNumber:
hasMessagableOTRSessionForToken:
decryptMessageData:fromToken:otrToken:deviceID:type:priority:isRetry:error:
_handleOTRDecryptionSuccess:
_storeIncomingClassADataMesageIfNeeded:topic:sequenceNumber:
_handleOTRDecryptionError:
decryptMessageData:deviceID:type:priority:isRetry:completionBlock:
_decryptPublicKeyEncryptedMessage:completionBlock:
_flushMessagesAll:response:
initWithSequenceNumber:
sendAckForMessageWithSequenceNumber:
_processMessage:withSequenceNumberBlock:
linkManager
appendMessage:receiverError:
totalBytesReceived
resumeMessageWithSequenceNumber:streamID:messageUUID:nextByteOffset:
byteOffset
initWithMessage:resumeResourceTransfers:receiverError:
expiryDate
abortTransfer
setNextByte:
cancelReason
finalizedMessageDictionaryIfDone
_addIncomingMessageSize:forTopic:
messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:
_socketToNiceCommand:
_processDecryptedMessage:
_optionallyDecryptMessage:completionBlock:
_sendExpiredAckForMessage:
_dumpLogs
initWithReason:mappedStreamID:serviceName:
_sendAckForMessage:
_FTOptionallyDecompressData
isResponse
initWithProtobufData:type:isResponse:
_processIncomingResourceTransferMessage:messageUUID:streamID:topic:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:isDefaultPairedDevice:
reason
mappedStreamID
setOTRTestBlockFromCompletionBlock:token:
initWithIdentifier:socketPriority:btUUID:uniqueID:incomingServiceMap:outgoingServiceMap:isCloudEnabled:
setDeviceBTUUID:
maxQueueSize
setMaxQueueSize:
isAlwaysConnected
setSupportedMessageTypes:
supportsLegacyOTRSessionToken
setSupportsLegacyOTRSessionToken:
_sendingMessages
_fallbackMessages
_statistics
_cumulativeOutgoingStatistics
_cumulativeIncomingStatistics
_tokenToOTREncryptionQueue
_tokenToOTRError
_dataProtectedIncomingMessages
_socketConnection
_openSocketCalled
_connectionSuspended
_timeoutTimer
_fallbackTimer
_dequeueTimer
_otrTokenIdentifier
_deliveryQueue
_sendingPowerAssertion
_rtt
_cachedBytes
_maxQueueSize
_lastFallback
_enabled
_needsHandshake
_isAlwaysConnected
_isCloudEnabled
_incomingResourceTransfers
_resettingIncomingResourceTransfers
_resumingIncomingResourceTransfers
_resumeResourceTransfers
_useSharedOTRSession
_useNamedOTRSessionToken
_supportsLegacyOTRSessionToken
_newServiceSupported
_supportDynamicServices
_supportDynamicServicesOptimization
_admissionDeniedTopics
_incomingServiceMapUpdateCounter
_supportedMessageTypes
_shouldAbortOnMissingTopic
UTunConnection
initWithPhoneNumber:phoneToken:
phoneToken
_phoneToken
_cancelScheduledHeartbeat
heartbeat
setInFlightHeartbeatBlock:
inFlightHeartbeatBlock
_cancelScheduledSMSTimeout
timedOutWaitingForSMS
setInFlightSMSTimeoutBlock:
inFlightSMSTimeoutBlock
loadNumberOfSuccessfulValidationSends
loadNumberOfPreflightAttempts
initWithHTTPDelivery:lockdownManager:arbiter:deviceSupport:systemAccountAdapter:
_clearSMSDeliveryTimeout
_deviceIDChangedNotification:
_failPromisesWithError:
_fulfillPromisesWithPhoneNumber:token:
_errorCodeForRegistrationError:
isActivated
_scheduleHeartbeat:
_lockdownStateChanged:
_smsDeliveryClear
setPnrReqList:
setSvcCenterAddr:
setDestAddr:
setPnrMechanism:
_canDeliverSMSNow
_issueAsyncCoreTelephonyPhoneNumberValidationRequestWithPushToken:mechanism:
deviceSupport
currentPreflightStack
_sendPreflightVerificationWithIMSI:PLMN:
_performHighestPriorityPreflightVerification
setCurrentPreflightStack:
_sendSMSVerificationWithMechanism:
arbiter
validationMode
preflightTestDataOverride
_notifyFailureWithError:
httpMessageDelivery
persistNumberOfPreflightAttempts:
_isPhoneNumberIdentificationSupported
_userHasDisabledSMSRegistration
_isAwaitingRegistrationControlSelectionDuringSetup
_deviceCanRegisterPresently
carrierSupportsShortCode
_tryToSendSMSIdentification
_requestUserConsentForPhoneNumberValidationWithCompletion:
isValidationModeLegacy
maxAllowableNumberOfPreflightRequests
maxAllowableNumberOfSuccessfullySentVerifications
isValidationModeShortCircuitingPreflight
preflightShortCircuitMechanismOverride
_sendPreflightVerificationIfNeeded
handleRegistrationSMSDeliveryFailedWithShouldBypassRetry:
maxAllowableNumberOfValidationAttemptsWhileNoneHaveSentSuccessfully
_popHighestPriorityPreflightVerification
persistNumberOfSuccessfulValidationSends:
minimumIntervalBetweenValidationAttempts
_scheduleSMSTimeout:
handleRegistrationSMSDeliveryFailed
_checkRegistrationStatus
success
handleRegistrationSMSSuccessfullyDeliveredWithTelephonyTimeout:
handleIncomingSMSForPhoneNumber:signature:
_resetCarrierShortcodeSupportedCachedValue
pnrRequestSent:pnrReqData:
pnrResponseReceived:pnrRspData:
pnrReadyStateNotification:regState:
_registrationControlStatus
_registerForLockdownNotifications
_setSMSDeliveryTimeout:
_telephonyRequestForPushToken:phoneNumberValidationMechanism:
identifyPhoneNumberForRequestor:queue:
setHttpMessageDelivery:
lockdownManager
setLockdownManager:
setArbiter:
setDeviceSupport:
systemAccountAdapter
setSystemAccountAdapter:
_requestors
_promises
_numberOfSuccessfulSends
_numberOfAttemptsWithoutSuccessfulSend
_numberOfPreflights
_isSMSWarningUp
_hasAcceptedSMSRequest
_needsToCheckPhoneNumberState
_carrierShortcodeSupported
_phoneNumberValidationStartDate
_smsSendDate
_lastSendSMSTimer
_lockdownManager
_arbiter
_inFlightHeartbeatBlock
_inFlightSMSTimeoutBlock
_currentPreflightStack
sharedInstanceForDataProtectionClass:
messageStoreForDataProtectionClass:
serverStorageStateMachine
serverBagForBagType:
userIDArray
_submitGDRReponseToAWDWithResultCode:error:
initWithArray:copyItems:
_processStoredIncomingMessages
_hasReachedMaxNumberOfRetries:
_currentGetDependentRegistrationBlocks
_currentGetDependentRegistrations
_heartbeatCenter
_ftNetworkSupport
_sendMessageHandler
_messageResponseHandler
removeNegotiationTimer
performOTRSessionBlock:token:
OTRSessionNegotiation:priority:duration:result:
_handleNegotiationTimeout
initWithToken:
setNegotiationTimer
isNegotiating
setIsNegotiating:
isReady
setIsReady:
isSuspended
setIsSuspended:
lastStartTime
setLastStartTime:
negotiationCount
setNegotiationCount:
otrTestBlock
setOtrTestBlock:
_token
_isNegotiating
_isReady
_isSuspended
_lastStartTime
_negotiationTimer
_negotiationCount
_otrTestBlock
performBlock:priority:
copyOTRTestBlock:
setSessionNegotiationStart:
sessionNegotiationCount:
_onQueueStartOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
performBlock:waitUntilDone:priority:
setupNewSessionInfoWithToken:
sessionStartTimeWithToken:
setSessionNegotiationComplete:
resumeSessionNegotiation
isSessionNegotiating:
_reportOTRTestResult:setupTime:result:
processNegotiationData:deviceUniqueID:token:negotiationCount:
_kickoffOTRNegotiationWithDevice:token:negotiationData:
_storageLock
_sessionStorage
_sessionInfoToToken
_priorityToCompletionBlocks
_priorityToTimeoutBlocks
initWithTime:count:
time
_time
_count
encryption
cacheMap
limit
_unlockedDescription
performReadingBlock:
performWritingBlock:
timeLimit
underLimitForItem:
noteItem:
setLimit:
setTimeLimit:
setCacheMap:
readWriteLock
setReadWriteLock:
_limit
_timeLimit
_cacheMap
_readWriteLock
setWasPrimary:
setStartTime:
messageCount
setMessageCount:
setEndTime:
endTime
startTime
linkType
wasPrimary
noteServerStorageStateMachineEndedFor:linkType:wasPrimary:timeTaken:numberProcessed:
dictionaryMetric
setLinkType:
_wasPrimary
_startTime
_endTime
_messageCount
setUseDictAsTopLevel:
setDataToEncrypt:
_publicDataRepresentationForGroup:completion:
_sendAheadGroup:withContext:
initWithProtectionSpace:
loadStoreForDataProtectionClass:
_saveNow
postNotificationName:object:userInfo:
__saveStoreForDataProtectionClass:
OTRStore
__imDataWithHexString:
_purgeMap
_objectForKey:
_setObject:forKey:
_setSaveTimer
_removeObjectForKey:
_daemonWillShutdown:
sessionKeyForToken:
storeSessionKey:token:
_sessionKeyStorage
_saveCancelBlock
_saveEnqueueBlock
_isClassDStoreAvailable
_isClassCStoreAvailable
_isClassAStoreAvailable
isFinished
isBeingHandedOff
_addRemotePacketOutage
_numberOfOutagesSinceInterval:
relayInitiate
setRelayInitiate:
relayUpdate
setRelayUpdate:
relayCancel
setRelayCancel:
callID
setCallID:
setIsBeingHandedOff:
remoteICEData
setRemoteICEData:
localICEData
setLocalICEData:
localSKEData
setLocalSKEData:
remoteSKEData
setRemoteSKEData:
localCallInfoData
setLocalCallInfoData:
remoteCallInfoData
setRemoteCallInfoData:
localCN
setLocalCN:
peerCN
setPeerCN:
localNATType
setLocalNATType:
remoteNATType
setRemoteNATType:
localNATIP
setLocalNATIP:
remoteNATIP
setRemoteNATIP:
isAudioPaused
isVideoPaused
setIsVideoPaused:
isReinitiate
setIsReinitiate:
localConnectionType
setLocalConnectionType:
remoteConnectionType
setRemoteConnectionType:
inviteNeedsDelivery
setInviteNeedsDelivery:
_relayInitiate
_relayUpdate
_relayCancel
_remoteNATIP
_localNATIP
_remoteICEData
_localICEData
_localCN
_peerCN
_localNATType
_remoteNATType
_callID
_isBeingHandedOff
_isAudioPaused
_isVideoPaused
_isReinitiate
_localConnectionType
_remoteConnectionType
_remotePacketOutageTimes
_inviteNeedsDelivery
_localSKEData
_remoteSKEData
_localCallInfoData
_remoteCallInfoData
copyIdentity
_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:
_sendIDStatusChanges:forService:URI:success:error:
addPurgeClientDataBlock:forToken:
removePurgeClientDataBlockForToken:
timeToCacheURI:fromURI:service:forStatus:
timeToCacheResultsForIDStatus:forService:
_URIFromFZIDType:
_IDStatusForURI:fromService:
cachedIDStatusForID:fromURI:fromService:
_lookupDateForURI:fromService:
_cachedResultsForURIs:fromURI:fromService:
_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
requestIDStatusForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
cachedIDStatusForID:fromURI:fromService:respectExpiry:
endpointsForURIs:service:fromURI:ignoringTTL:
_saveCache
_loadCache
noteIncomingID:fromService:
hasValidStatusForURI:fromURI:fromService:
requestIDStatusForID:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
setCachedIDStatus:ForID:fromURI:fromService:
currentCache
currentCacheForService:
remoteDevicesForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
_idStatusCache
_startQueryDate
_numQueriesThisHour
_shouldSubmitMetricsBasedOnDate:isInitiator:
initWithCalendarIdentifier:
setTimeZone:
components:fromDate:
hour
minute
_shouldSubmitMetricsForThisSession
validNetworkEnabled
validNetworkActive
validNetworkReachable
natType
connectionType
_checkAndUpdateDBIfRequiredForClass:
internalMigrationVersionOnDatabase
liveMigration
markLocalDestinationDeviceUUIDForAccounts:deviceUUID:
updateInternalMigrationVersionOnDatabaseWithValue:
migrateClassD
copyHandlersForEnumerating
commandToHandlerBlock
_updateListenerIfNeeded
registered
_registeredForPush
_isListening
timeToCacheNegativeResultsForService:
timeToCacheUnknownResultsForService:
getAllocation
addAllocation:
_allocations
_nextIndex
initWithTimer:
_timer
initQRStreamInfo:subscribedStreams:generationCounter:maxConcurrentStreams:
requestIDStr
IDSSessionID
setPurgeAtExpiration:
_allocationTimeout
cancelAllocationTimeoutTimer
recipients
provider
allocateProtocolVersion
appID
IDSQuickRelayEventType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
_purgeAllocation
responses
invalidateAllocation:
initWithRequest:
initWithResponse:
setRequestIDStr:
sessionIDStr
setSessionIDStr:
request
setRequest:
setResponses:
pushTokenToQRSessionID
setPushTokenToQRSessionID:
recipientPushToken
setRecipientPushToken:
duration
setDuration:
sharedSessionHasJoined
setSharedSessionHasJoined:
connectReadyHandler
setConnectReadyHandler:
streamInfo
setStreamInfo:
_requestIDStr
_sessionIDStr
_request
_responses
_pushTokenToQRSessionID
_recipientPushToken
_duration
_sharedSessionHasJoined
_connectReadyHandler
_selfAllocations
_streamInfo
_setSessionInfoRequiredKeys
init:
setRecipients:
_uuidFromNSStringToNSData:
setIDSSessionID:
setSenderURI:
setAppID:
setAllocateType:
setActiveRelaySessionToken:
setActiveRelayIP:
setAllocateProtocolVersion:
setIsSharedSession:
setTestOptions:
setGroupMemberCount:
setProvider:
setExistingRelayIP:
setExistingRelaySessionToken:
setExistingRelaySignature:
setSenderExternalIP:
setSelfAllocationCount:
setInvitationRetryCount:
QRAllocator_oversized
_addAllocationForSession:allocation:
_startQRConnectionWithDefaults:
_setupNewAllocation:sessionID:isSessionIDRemoteDeviceID:fromIdentity:fromURI:fromService:options:connectReadyHandler:
_parseQuickRelayDefaults:gropuID:
_getResponseFromQRGroupID:
_createSessionInfoFromResponsePayload:
hasParticipantID:participantID:
_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:
_notifyParticipantID2PushTokenMappingChange:
_shouldUseCurrentResponse:cachedMessage:
_addConnectStatus:relaySessionID:previousTime:qrReason:previousError:previousRelayIP:previousAccessToken:
_findAllocationListForSessionID:
_handleIncomingAllocateResponse:isFromCache:requestOptions:
_storeMappingFromPushTokenToURIs:fromID:service:cert:forGroup:
UUID
_getSelfAllocationFromCache:
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:
_startQRConnectionForSession:isInitiatorsAcceptedSession:
_getPushTokenFromParticipantID:participantID:
_getGroupID:
senderURI
setValue:forKey:
getPushTokenForRelaySessionID:relaySessionID:
_findAllocationForSessionID:requestIDStr:
_isDuplicateResponse:newResponse:
_addResponseToCache:sessionInfo:modifiedMessage:
_isJoinRequestInProcess:
_processSelfAllocations:allocation:
_uriToParticpantID:
requestID
senderExternalIP
relaySoftwareVersion
_getCombinedSoftwareID:
relayPort
relayIP
relaySessionToken
relaySessionKey
relayExpiryTimeStamp
initWithDouble:
_getErrorCodeFromAllocationStatus:
requestLength
IDSQRAllocation:result:hasRecipientAccepted:payloadSize:topic:service:
_hasSessionInfoRequiredKeys:
_sendAWDMetricsForAllocation:status:hasRecipientAccepted:
allKeysForObject:
_invalidateSession:
_removeAllAllocationsForSessionID:
_discardAllocation:
initWithBase64EncodedString:options:
_processAllocationStatusResult:
_getResponse:relaySessionID:
_sendKeepAliveRequest:
setupNewAllocationToDevice:options:connectReadyHandler:
_getResponseForQRSessionID:sessionID:index:
getPushTokensFromParticipantIDs:participantIDs:
_getStatusMessageFromStatusCode:
getCountOfPendingRecipientsAcceptedSessions
getCountOfSessionToAllocations
_requestIDToSession
_sessionToAllocations
_sessionInfoRequiredKeys
_pendingRecipientsAcceptedSessions
_pendingInitiatorsAcceptedSessionsWithToken
_requestIDToAllocateTime
_allocateResponses
_pushTokenToURIForGroup
_idsSessionIDToqrSessionID
setAttempts:
_run
attempts
block
_isFinishedBlock
setScheduledBlock:
backoffProvider
_deferToQueue:after:block:
initWithQueue:backoffProvider:block:
setBackoffProvider:
setBlock:
scheduledBlock
_backoffProvider
_attempts
_scheduledBlock
SMSMechanismWithContext:
SMSLessMechanism
_type
_context
initWithServerBag:
phoneNumberValidationMode
isCarrierInstall
isPrefightEnabledByServerBag
phoneNumberValidationPreflightTestData
serverBag
isValidationModeUsingPreflight
_serverBag
allowAnyNetwork
nonWifiFaceTimeAvailable
mapArray:onQueue:withBlock:completion:onQueue:
mapDictionary:onQueue:withBlock:completion:onQueue:
mapArray:withBlock:completion:onQueue:
mapDictionary:withBlock:completion:onQueue:
responseCertificateData
setResponseCertificateData:
_responseCertificateData
startAdvertising:
nanoRegistryPluginManager
stopAdvertising
retrievePeripheralsWithIdentifiers:
connectPeripheral:options:
initWithDelegate:queue:
unregisterEndpoint:
_connectNow
cancelPeripheralConnection:
peer
initWithPipe:useSkywalkChannel:withDeviceUniqueID:cbuuid:
stringByAppendingFormat:
startDatagramLinkWithEndpointIdentifier:
stopDatagramLinkWithEndpointIdentifier:
registerEndpoint:type:priority:options:
_advertiseNow
_stopAdvertising
centralManagerDidUpdateState:
centralManager:willRestoreState:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didConnectPeripheral:
centralManager:didFailToConnectPeripheral:error:
centralManager:didDisconnectPeripheral:error:
peripheralManagerDidUpdateState:
peripheralManager:willRestoreState:
peripheralManagerDidStartAdvertising:error:
peripheralManager:didAddService:error:
peripheralManager:central:didSubscribeToCharacteristic:
peripheralManager:central:didUnsubscribeFromCharacteristic:
peripheralManager:didReceiveReadRequest:
peripheralManager:didReceiveWriteRequests:
peripheralManagerIsReadyToUpdateSubscribers:
peripheralManager:didPublishL2CAPChannel:error:
peripheralManager:didUnpublishL2CAPChannel:error:
peripheralManager:didOpenL2CAPChannel:error:
scalablePipeManagerDidUpdateState:
scalablePipeManager:didRegisterEndpoint:error:
scalablePipeManager:didUnregisterEndpoint:
scalablePipeManager:pipeDidConnect:
scalablePipeManager:pipeDidDisconnect:error:
startDatagramLinkWithName:
stopDatagramLinkWithName:
isPoweredOn
idsNRPluginManager
setIdsNRPluginManager:
_centralManager
_peripheralManager
_pipeManager
_pipePeripheral
_pendingPipes
_pipePeripheralUUIDString
_pipeRegistered
_useSkywalkChannel
_linkIDToDatagramLink
_isPipeConnectingOrConnected
_isAdvertising
_managerQueue
_isPoweredOn
_datagramPipeRegistration
_idsNRPluginManager
_criticalIsCountingDown
initWithTimeInterval:
startCountingDown
isCountingDown
_startDateMutex
_timeInterval
spamMessages
responseSpamMessages
setResponseSpamMessages:
_spamMessages
_responseSpamMessages
removeClientDataUpdateBlockForToken:
_specificForPriority:
_encryptMessageData:myURI:myIdentity:toURI:toToken:service:priority:groupIdentifier:deviceID:completionBlock:avoidMainQueue:
_decryptMessageData:myURI:myIdentity:fromURI:token:service:groupdID:deviceID:type:priority:isRetry:completionBlock:avoidMainQueue:
_queueForPriority:
decryptMessageData:myURI:myIdentity:fromURI:token:service:groupdID:type:priority:isRetry:completionBlock:
noteDecryptionErrorForToken:forURI:fromURI:forService:messageData:type:
noteEncryptionErrorForToken:forURI:fromURI:forService:messageData:type:
noteRemoteDecryptionErrorForToken:forURI:fromURI:forService:messageData:type:
noteRemoteEncryptionErrorForToken:forURI:fromURI:forService:messageData:type:
failedTokenCache
setFailedTokenCache:
_syncQueue
_defaultQueue
_urgentQueue
_contextMap
_failedTokenCache
stopCallID:
connectionInfoWithState:
initForReadingFromData:error:
setDecodingFailurePolicy:
finishDecoding
initializeNewCall
setPeerCN:callID:
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
setPeerProtocolVersion:forCallID:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:error:
sendData:forCallID:encrypted:
connectionInfoForCallID:
bestCallID
localCell
remoteCell
_connectionInfos
_connType
_localCell
_remoteCell
_connectionActive
_connectionEnableAudio
conference:updateInputFrequencyLevel:
conference:updateOutputFrequencyLevel:
conference:receivedNoRemotePacketsForTime:callID:
conference:didReceiveData:forCallID:
conference:withCallID:remoteMediaStalled:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:updateInputMeterLevel:
conference:updateOutputMeterLevel:
conference:receivedFirstRemoteFrameForCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteAudioPaused:callID:
conference:remoteVideoPaused:callID:
serverDiedForConference:
conference:inititiateRelayRequest:requestDict:
conference:sendRelayUpdate:updateDict:
conference:cancelRelayRequest:requestDict:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:networkHint:
conference:localIPChange:withCallID:
conference:didStartSession:withCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:didReceiveARPLData:withCallID:
conference:didChangeLocalVariablesForCallID:
conference:remoteAudioEnabled:forCallID:
conference:localAudioEnabled:forCallID:error:
conference:remoteCallingModeChanged:forCallID:
conference:reinitializeCallForCallID:
conference:closeConnectionForCallID:
conference:isRemoteAudioBelowThreshold:
initRequiringSecureCoding:
encodedData
setIsKeyExchangeEnabled:
setIsAudioEnabled:
setIsVideoEnabled:
setIsDTLSEnabled:
_accessToken
accessoryID
pairingToken
setResponseAdminAcccessToken:
setResponseExpiry:
setResponseAccessoryID:
_accessoryID
_pairingToken
_responseAccessoryID
_responseAdminAcccessToken
_responseExpiry
qSetupSeal
createGroupWithParticipants:sharedApplicationData:completion:
fetchGroupWithGroupID:completion:
_groupFromPublicDataRepresentation:completion:
_participantsForCypher:completion:
_validateCachedGroup:isParentOfGroup:completion:
fetchLatestGroupWithStableID:completion:
_messagesGroupContextWithCompletion:
_fetchAllLocalKnownGroups:
_dropLocalCache:
_dropLocalCacheForGroupID:compeltion:
_noteRegistrationIdentityUpdate
qGroupContextWithDeviceIdentity:completion:
messagesGroupContext
initWithAccountKey:deviceKey:
initWithAccountIdentity:dataSource:queue:
fileURLWithPath:
initOnDiskCacheWithContainerURL:Queue:
loadWithCompletion:
setMessagesGroupContext:
_messagesGroupContext
servicePushTopic
setServicePushTopic:
serviceDuetIdentifiers
setServiceDuetIdentifiers:
serviceAdHocType
setServiceAdHocType:
serviceIsDSBased
setServiceIsDSBased:
serviceWantsReflectedSend
setServiceWantsReflectedSend:
serviceAllowProxyDelivery
setServiceAllowProxyDelivery:
serviceAllowLocalDelivery
setServiceAllowLocalDelivery:
serviceAllowWiProxDelivery
setServiceAllowWiProxDelivery:
serviceAllowLiveMessageDelivery
setServiceAllowLiveMessageDelivery:
serviceUseiMessageCallerID
setServiceUseiMessageCallerID:
silentlyFailMessagesOnSwitch
setSilentlyFailMessagesOnSwitch:
shouldProtectTrafficUsingClassA
setShouldProtectTrafficUsingClassA:
shouldAllowCloudDelivery
setShouldAllowCloudDelivery:
shouldAllowLiveMessageDelivery
setShouldAllowLiveMessageDelivery:
setAccountType:
primaryRegistrationDSHandle
setPrimaryRegistrationDSHandle:
primaryRegistrationURIs
setPrimaryRegistrationURIs:
setIsRegistrationActive:
defaultPairedDependentRegistrations
setDefaultPairedDependentRegistrations:
appleIDPrimaryDependentRegistrations
setAppleIDPrimaryDependentRegistrations:
setAliasStrings:
accountDescription
setAccountDescription:
accountDisplayName
setAccountDisplayName:
listenerID
setListenerID:
entitlements
setEntitlements:
shouldIncludeDefaultDevice
setShouldIncludeDefaultDevice:
_serviceIsDSBased
_serviceWantsReflectedSend
_serviceAllowProxyDelivery
_serviceAllowLocalDelivery
_serviceAllowWiProxDelivery
_serviceAllowLiveMessageDelivery
_serviceUseiMessageCallerID
_silentlyFailMessagesOnSwitch
_shouldProtectTrafficUsingClassA
_shouldAllowCloudDelivery
_shouldAllowLiveMessageDelivery
_shouldIncludeDefaultDevice
_serviceAdHocType
_accountType
_servicePushTopic
_serviceDuetIdentifiers
_primaryRegistrationDSHandle
_primaryRegistrationURIs
_dependentRegistrations
_defaultPairedDependentRegistrations
_appleIDPrimaryDependentRegistrations
_accountDescription
_accountDisplayName
_listenerID
_entitlements
localizedCaseInsensitiveContainsString:
liveMessageDelivery
dataToEncrypt
metricReportIdentifier
localDelivery
accountUUID
setFinalDestinations:
_sendRemotelyWithSendParameters:data:protobuf:willSendBlock:completionBlock:
enforceRemoteTimeouts
localDestinationDeviceUUID
destinationURIs
substringFromIndex:
originalfromID
message
checkpointTrace
setUncompressedMessageSize:
setCompressedMessageSize:
setUncompressedData:
bulkedPayload
useDictAsTopLevel
encryptPayload
bypassSizeCheck
_splitDestinations:intoLocalDestinations:remoteDestinations:threadContext:sendParameters:
_sendLocallyWithSendParameters:service:uriToLocalDestination:data:protobuf:threadContext:progressBlock:completionBlock:
setIsProxiedOutgoingMessage:
setGroupData:
defaultPairedDeviceDestination
sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:
setCheckpointTrace:
shouldAllowProxyDelivery
allowLocalDelivery
allowWiProxDelivery
wantsLocalReflectedSend
shouldSilentlyFailMessagesOnSwitch
_splitDestinations:intoLocalDestinations:remoteDestinations:rapportDestinations:sendParameters:
_sendLocallyWithSendParameters:uriToLocalDestination:data:protobuf:completionBlock:
_rapportSendWithSendParameters:completionBlock:
sessionID
utunDeliveryController
dictionaryRepresentationWithUncompressedData
homeKitPayload
finalDestinations
interestingRegistrationProperties
requireAllRegistrationProperties
requireLackOfRegistrationProperties
canUseLargePayload
sendOnePerToken
allowPartialSendsToSucceed
fakeMessage
alwaysSkipSelf
disallowRefresh
displayIDs
_sendMessageWithSendParametersOnMainThread:filteredDestinations:data:compressedData:protobufToSend:willSendBlock:completionBlock:
setBulkedPayload:
setDisallowRefresh:
newSendMessageContext
sendServerMessage:command:completionBlock:
decryptMessageData:myURI:fromURI:token:groupID:encryptionType:isLiveRetry:completionBlock:
shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:
_deviceIdentifierKeychainID
hasAllEncryptionKeys
regenerateDeviceIdentifier
_localDeviceIdentifier
_isUsingAccount:
createKeyMaterialForGroup:sessionID:
sendKeyMaterialsToGroup:sessionID:toSpecificMembers:
_sendRenewedPrekeysToGroups
isTestRunning
setIsTestRunning:
_dispatchRenewPrekeyTimer
setPublicIdentityData:
sendKeyMaterialsToWaitingParticipantsForGroup:sessionID:
createdAt
cleanUpExpiredMasterKeyMaterial
initWithMKM:MKS:MKI:
setIsSentLocally:
requestPendingKeyMaterialsForGroup:sessionID:
isSentLocally
IsDeviceHasThisMKM:
sendMessage:toDestination:forGroup:command:
resetDevicePrekey
rollNewKeysAfterResettingPrekeysForGroups:withReason:
timerWithTimeInterval:repeats:block:
initWithPrefixedURI:
didReceiveEndpointsUpdate:forGroup:sessionID:
realTimeEncryptionPublicKeyDataForDevice:
_generateMKIfromGroupID:participantIndex:
masterKeyMaterialForGroup:
prekeysForPushTokens:
_realtimeEncryptionQueue
_isInternal
_writeLock
_prekeyExpireDuration
_mkmExpireDuration
_accountIDs
_fromIDs
_identityForDevice
_prekeyAckCountForGroup
_publicKeyForDevice
_keyMaterialOfGroup
_membersForGroup
_participantsForGroup
_participantsWaitingForKeyMaterials
_endpointSubscriptionForGroup
_lastKnownGroupIDToPushTokens
_lastKnownAccountIDToPushTokens
_endpointUpdateTimer
_isTestRunning
RealTimeEncryptionController
accessoryIDs
adminID
expiry
setExpiry:
setResponseConsentTokens:
_accessoryIDs
_adminID
_expiry
_responseConsentTokens
setAccountGUID:
setGuid:
setAlternateGUID:
setForcedLocal:
setStoredSize:
setMainAccountGuid:
setLocalDestinationDeviceUUID:
setEnqueuedDate:
setLiveMessageDelivery:
setSent:
setWantsProgress:
accountGUID
setAccountUUID:
forcedLocal
setAlternateCallbackID:
mainAccountGuid
setMainAccountUUID:
wantsProgress
initWithMessage:data:protobuf:fromID:toDestinations:accountGUID:useDictAsTopLevel:dataToEncrypt:encryptPayload:compressPayload:wantsResponse:expirationDate:enforceRemoteTimeouts:command:wantsDeliveryStatus:deliveryStatusContext:messageUUID:priority:guid:alternateGUID:identifier:forcedLocal:peerResponseIdentifier:expectsPeerResponse:wantsAppAck:fireAndForget:nonWaking:nonCloudWaking:storedSize:duetIdentifiersOverride:bypassDuet:mainAccountGuid:localDestinationDeviceUUID:enqueuedDate:messageType:alwaysSkipSelf:queueOneIdentifier:liveMessageDelivery:requireBluetooth:requireLocalWiFi:sent:wantsProgress:
canCombineWithMessage:
combineWithMessage:
copySendParameters
combinedMessages
storedSize
enqueuedDate
sent
_message
_accountGUID
_useDictAsTopLevel
_dataToEncrypt
_encryptPayload
_wantsResponse
_deliveryStatusContext
_guid
_alternateGUID
_forcedLocal
_storedSize
_enforceRemoteTimeouts
_liveMessageDelivery
_sent
_wantsProgress
_mainAccountGuid
_localDestinationDeviceUUID
_enqueuedDate
_combinedMessages
setIsLocal:
initWithMessage:fromID:topic:guid:isLocal:
isLocal
_isLocal
getOrCreateMessageStoreForDataProtectionClass:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:messageTypes:
unsentUrgentAccountUUIDsForMessageTypes:
messageStores
allOutgoingMessagesPendingDeleteWithLimit:
outgoingMessagesWithEnqueueDateOlderThan:notToDestinationDeviceID:andLimit:
database
setGUID:
deletePostponedMessages:classDDatabase:
deleteIncomingMessageWithGUID:
clearStatementCache
performBlock:
deleteExpiredIncomingMessagesOlderThan:withLimit:
deleteOutgoingMessageWithGUID:alternateGUID:classDDatabase:
incomingMessagesUpToLimit:messageTransportType:success:
unsentOutgoingMessagesUpToLimit:priority:wantsPayload:localDestinationDeviceID:
unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:
markAllOutgoingMessagesAsUnsent
databaseSizeInMB
largestPayloadSizeAccountUUID
largestEnquedMessagesAmountAccountUUID
deleteAllMessagesWithAccountGUID:
allOutgoingMessagesByGUID:
allOutgoingMessagesOnAccountGUID:localDestinationDeviceID:
allExpiredOutgoingMessages:
uniqueAccountGUIDsForUnsentOutgoingMessages:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:hardLimit:
allUnsentOutgoingMessagesForAccounts:priority:localDestinationDeviceID:hardLimit:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:wantsPayload:messageType:success:
checkpointAndVacuumDB
initWithDataProtectionClass:
initWithDatabase:
performBlock:waitUntilDone:
storeInMessageStore
storeIncomingMessage:forTopic:fromID:checkpointTrace:isLocal:completionBlock:
storeIncomingMessage:forTopic:fromID:isLocal:completionBlock:
_createOutgoingMessageRecordsFromSQLRecords:includeMessagePayloads:
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:messageTypes:
bypassStorage
storeInDatabase
daemonDeathResend
alternateCallbackID
mainAccountUUID
sendToClient
_clearDatabaseCloseTimerOnIvarQueue
__closeDatabaseOnIvarQueue
_setDatabaseCloseTimerOnIvarQueue
closeDatabase
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:withMessageTypes:
unsentUrgentAccountUUIDsWithDataProtectionClass:withMessageTypes:
deletePostponedMessages
deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:
deleteOutgoingMessageWithGUID:alternateGUID:
markOutgoingMessagesAsUnsentIncludingClassD:
databaseSizeBiggerThanThreshold:
largestEnquedMessagesAccountUUIDOverThreshold:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:
checkpointAndVacuumDBWithDataProtectionClass:
_performInitialHousekeeping
storeIncomingMessage:forTopic:fromID:checkpointTrace:completionBlock:
storeIncomingMessage:forTopic:fromID:completionBlock:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:messageTypes:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:
duetIdentifiersOverrideForAccountWithGUID:priority:
storeOutgoingMessageWithSendParameters:guid:canSend:canBypassSimilarMessages:fromQueue:completionBlock:
markOutgoingMessageWithGUID:asSent:
closeDatabaseSynchronously:
performBlock:afterDelay:
_ivarQueue
_databaseCloseTimer
_databaseLastUpdateTime
_database
_checkpoints
_mutex
_messageStores
setRequestID:
activeRelayIP
activeRelaySessionToken
existingRelayIP
existingRelaySessionToken
existingRelaySignature
setRelayIP:
setRelayPort:
setRelaySessionToken:
setRelaySessionKey:
setRelayExpiryTimeStamp:
setRelaySoftwareVersion:
inferredExternalIP
setInferredExternalIP:
isSharedSession
testOptions
invitationRetryCount
groupMemberCount
selfAllocationCount
errorCode
setErrorCode:
errorMessage
setErrorMessage:
allocateType
_recipientDataSize
wantsIntegerUniqueIDs
wantsAPSRetries
setProtocol:
_requestID
_allocateType
_IDSSessionID
_senderURI
_recipients
_activeRelayIP
_activeRelaySessionToken
_existingRelayIP
_existingRelaySessionToken
_existingRelaySignature
_senderExternalIP
_appID
_provider
_allocateProtocolVersion
_protocol
_isSharedSession
_testOptions
_relayIP
_relaySessionToken
_relaySessionKey
_relayExpiryTimeStamp
_inferredExternalIP
_relaySoftwareVersion
_errorCode
_errorMessage
_groupMemberCount
_selfAllocationCount
clientProcessReceivedMessage:messageSize:deltaTime:priority:
wifiSetupAttemptType:duration:result:client:
WRMLinkRecommendation:primaryLinkType:magnetState:infraWiFiState:
IDSWiProxDidConnectToPeer:resultCode:
IDSWiProxDidDisconnectFromPeer:resultCode:
IDSCoreAnalyticsWiProxConnectionEvent:duration:resultCode:
IDSWiProxDidSendData:
IDSCoreAnalyticsWiProxDidSendData:
noteMessageReceivedForService:accountType:fromStorage:serverTimestamp:localTimeDelta:
IDSMagnetCorruptionDetailedEvent:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
_addMessageToStatistics:
removeMessages:
_messages
_statisticsLock
localDeliveryQueue
networkCheckOverrideBehavior
dateScreenLightLastChanged
initWithFlags:options:timeout:wifiTimeout:completionBlock:
predicateWithBlock:
filteredArrayUsingPredicate:
_callStateChanged
isOnCall
enqueueQueryBlock:cleanup:
initWithQueryCompletionBlock:queue:
queryCompletionBlock
_queryCompletionBlock
initWithPeerIDManager:
initWithDelegate:dataSource:
initWithPushHandler:queryHandler:
setWithObjects:
sessionToken
expireDate
refreshDate
_peerIDKeysForService:andFromURI:
initWithEntries:
descriptionForDictionary:options:
_setDisasterModeToken:forURI:
initWithURI:clientData:pushToken:sessionToken:expireDate:refreshDate:accountKeyHistory:anonymizedSenderID:verifiedBusiness:senderCorrelationIdentifier:
_endpointsForService:fromURI:toURI:ignoreExpiration:
shouldUseSelfTokens
_disasterModeTokenForURI:
_datePassed:
senderCorrelationIdentifier
_valueOfProperty:forURI:pushToken:fromURI:service:
queryHandler
forgetSessionTokensForURI:fromURI:service:
prefixedURI
finishedQueryWithInfo:forURIs:fromURI:service:
hasPublicKeyForURI:pushToken:fromURI:service:
senderCorrelationIdentifierForURI:pushToken:fromURI:service:
stringValueOfProperty:forURI:pushToken:fromURI:service:
shouldShowPeerErrorsFor:pushToken:fromURI:service:
notePeerToken:forURI:fromURI:service:
hasPeerTokensForURIs:fromURI:service:
addClientDataUpdateBlock:forToken:
endpointQueryListeners
setEndpointQueryListeners:
clientDataUpdateBlocks
setClientDataUpdateBlocks:
purgeClientDataBlocks
setPurgeClientDataBlocks:
disasterModeTokens
setDisasterModeTokens:
setQueryHandler:
setPeerMap:
_endpointQueryListeners
_clientDataUpdateBlocks
_purgeClientDataBlocks
_disasterModeTokens
_queryHandler
_peerMap
initWithAccount:service:name:
account
idWithAccount:service:name:
_hash
initWithLocalAddress:remoteAddress:
saPortHostOrder
localAddress
remoteAddress
isEqualToSockAddrWrapperPair:
wrapperPairWithLocalAddress:remoteAddress:
shortDescriptionForLocalAddress:remoteAddress:
_localAddress
_remoteAddress
onTransportThread_StopBTDatagramLinkForDefaultPairedDevice
completionQueue
_triggerStallDetectionLogsForDetector:withEvent:
newDetectorWithName:stallDetectedBlock:stallWarningBlock:
setByteMovementDelayThreshold:
setVerboseLogging:
initWithConnectionID:protocol:isCloudEnabled:
initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:
encryptionState
flagsString
initWithAddressPair:protocol:
setCompletionQueue:
reportToAWD:connectionType:error:
openSocketCompletionHandler
_createStallDetectorWithName:
localConnectionGUID
remoteConnectionGUID
setRemoteConnectionGUID:
addressPair
setAddressPair:
setSd:
sdCopy
setSdCopy:
sdOriginal
setSdOriginal:
sdNumberNoClose
setSdNumberNoClose:
connectError
setConnectError:
setOpenSocketCompletionHandler:
firstIncomingSYNSequenceNumber
setFirstIncomingSYNSequenceNumber:
expectedNextOutgoingSequenceNumber
setExpectedNextOutgoingSequenceNumber:
expectedNextIncomingSequenceNumber
setExpectedNextIncomingSequenceNumber:
creationTime
socketTrafficClass
setSocketTrafficClass:
hasMoreData
setHasMoreData:
lastSuccessfulSentTime
setLastSuccessfulSentTime:
compressionInfo
setCompressionInfo:
compressionState
setCompressionState:
suspended
setSuspended:
uint32Key
setUint32Key:
setIsCloudEnabled:
isControlChannel
setIsControlChannel:
isRealTime
setIsRealTime:
shouldStopBTDatagramLink
setShouldStopBTDatagramLink:
encryptionEnabled
setEncryptionEnabled:
keyMaterialLength
setKeyMaterialLength:
localKeyMaterial
setLocalKeyMaterial:
SSRCSend
setSSRCSend:
seqSendStart
setSeqSendStart:
seqSend
setSeqSend:
srtpProtocolVersion
setSrtpProtocolVersion:
checksumFailed
setChecksumFailed:
connectionInitTime
setConnectionInitTime:
firstDataPacketReceiveTime
setFirstDataPacketReceiveTime:
idsDeviceConnectionUUID
setIdsDeviceConnectionUUID:
connectionSetupStartTime
setConnectionSetupStartTime:
firstPacketReceiveTime
setFirstPacketReceiveTime:
connectionContext
setConnectionContext:
serviceConnection
setServiceConnection:
outgoingStallDetectorName
setOutgoingStallDetectorName:
_localConnectionGUID
_remoteConnectionGUID
_addressPair
_sdCopy
_sdOriginal
_sdNumberNoClose
_connectError
_openSocketCompletionHandler
_firstIncomingSYNSequenceNumber
_expectedNextOutgoingSequenceNumber
_expectedNextIncomingSequenceNumber
_creationTime
_socketTrafficClass
_hasMoreData
_lastSuccessfulSentTime
_compressionInfo
_compressionState
_suspended
_completionQueue
_uint32Key
_isControlChannel
_isRealTime
_sentAWDReport
_encryptionEnabled
_keyMaterialLength
_localKeyMaterial
_srtpProtocolVersion
_connectionInitTime
_firstPacketReceiveTime
_firstDataPacketReceiveTime
_idsDeviceConnectionUUID
_lastStallDetectLogTime
_outgoingStallDetectorName
_shouldStopBTDatagramLink
_checksumFailed
_connectionSetupStartTime
setDeviceConnectionInfo:
_deviceConnectionInfo
appendToString:
timestamp
initWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
_timestamp
_processTime
_compressionTime
_sendTime
_bytes
initWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
_kernelTime
initWithTimestamp:kernelTime:bytes:
printCurrent
outgoingEventWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
incomingEventWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
kernelTestEventWithTimestamp:kernelTime:bytes:
addEvent:
_timingEvents
_lastPrintTime
_reloadSettings
resetTCPConnection:forDeviceConnectionInfo:
forceTriggerStallDetectedBlockWithEventName:
handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:
stringByPaddingToLength:withString:startingAtIndex:
removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:
stringComponentsForServiceConnectorService:
setConnectionInitTime:forConnectionUUID:
startCompressionForConnection:deviceConnectionInfo:
internalStartConnectionWithEndpoint:service:parameters:serviceConnector:completionHandler:
internalOpenSocketWithDestination:localSA:remoteSA:protocol:trafficClass:completionHandler:
startControlChannelWithDevice:endpoint:
startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:
setupIPsecLinkForDeviceConnectionInfo:
setupUTunForDeviceConnectionInfo:
resetAllConnectionsForDevice:
receiveControlChannelMessage:fromCbuuid:deviceUniqueID:
defaultPairedDeviceIdentityPair
setConsumeDelayThreshold:
obliterateConnectionInfoForCBUUID:completionBlock:completionQueue:
wrapperWithWrapper:andPortHostOrder:
_getStallDetectorForConnection:deviceConnecionInfo:
didConnectControlChannelForDeviceConnectionInfo:genericConnection:socketDescriptor:connection:error:
checkSuspendTrafficForDevice:wait:
setFirstPacketReceiveTime:forConnectionUUID:
serviceConnectorServiceForAccount:service:name:
processCompressionRequest:fromDeviceConnectionInfo:
processCompressionResponse:fromDeviceConnectionInfo:
setupNewDeviceConnectionInfoForCbuuid:deviceUniqueID:identityPair:remoteDeviceEncryptionInfo:
setupDataConnectionWithDeviceConnectionInfo:options:
closeDataConnectionWithDeviceConnectionInfo:options:
doCheckSuspendTrafficForDevice:
handleIncomingPacket:fromDeviceToken:
handleIPPayload:bytesLength:source:destination:upperProtocol:forDeviceConnectionInfo:flush:callerShouldStop:
handleUtunChannelRead:limit:
initWithName:address:andTestTransport:
controlChannelVersionForCbuuid:
onTransportThread_SendToGlobalLinkWithSessionID:packetBuffer:
perServiceDataTransferredForDevice:services:
totalPacketsSentForDevice:services:
_deviceConnectionInfoTableByCbuuid
_deviceConnectionInfoTableByCbuuidLock
_linkManager
_logPackets
_vifShouldReadMultiple
_vifMaxPendingPackets
_vifUseChannel
_controlChannelEncryptionDisabled
_controlChannelVersionCacheLock
_controlChannelVersionCache
_isSimulateResetLoopTest
_ipsecQueue
_ignoreUTunChannelWriteSignal
_alliMessageAccounts
_isIphone
isInDebilitatedMode
initWithDelegate:dataSource:dualMessageDelivery:networkChangeNotifier:deviceSupport:pushHandler:
isServerBackoffModeActive
_bagLoaded:
linkQualityForInterfaceType:
__IMStripPotentialTokenURIs
__imSetFromArray
_removeCompletionBlocksForURIs:fromURI:fromService:
dictionaryWithKeyArray:defaultValue:
forSending
forRefresh
forMessaging
_dequeuePendingQueryIfPossible
dataSource
hasQueryResultsForURI:fromURI:service:
_completionBlocksForURIs:fromURI:fromService:
setUnderlyingService:
setImportanceLevel:
setService:
forceHTTPQueriesOnly
_shouldForceCellularQueries
setAlwaysForceCellular:
componentsJoinedByString:
isQueryRetryForBadSignatureEnabled
serverBackoffModeMaxSenderRetries
forceCellular
IDCertificate
queryRetryNumberForBadSignature
queryRetry
setForceCellular:
queryRetryIntervalForBadSignature
serverBackoffModeReceiverRetryInterval
isServerAvailable
_addCompletionBlock:forURIs:fromURI:fromService:
_startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
dualInterfaceidQueryMessageDelivery
setDualInterfaceidQueryMessageDelivery:
queryQueue
setQueryQueue:
completionBlocksToURIsMap
setCompletionBlocksToURIsMap:
extraCompletionBlocks
setExtraCompletionBlocks:
isInServerBackoffMode
setIsInServerBackoffMode:
networkChangeNotifier
setNetworkChangeNotifier:
setDataSource:
_isInServerBackoffMode
_dualInterfaceidQueryMessageDelivery
_queryQueue
_completionBlocksToURIsMap
_extraCompletionBlocks
_networkChangeNotifier
_dataSource
setBypassSizeCheck:
forceEncryptionOff
currentAverageRTT
localMessageState
isDeviceBlackedOut
wpConnectionErrorDomain
wpConnectionErrorCode
wpConnectionErrorUserInfo
_sendMessageWithSendParameters:threadContext:onObject:willSendBlock:progressBlock:completionBlock:
disableAliasValidation
_shouldReplaceLocalDestination:
allowCloudDelivery
_canBulkMessageWithPriority:adHocServiceType:
_forwardSendMessageToAccountWithSendParameters:service:threadContext:guid:dataProtectionClass:willSendBlock:progressBlock:completionBlock:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:dataProtectionClass:
_canSendNonUrgentInternetMessageForTopic:
_performDuetCheckAndSendForServiceIdentifier:serviceDuetIdentifiers:sendParameters:logString:fromQueue:completionBlock:
_performDuetCheckAndSendForAccount:sendParameters:logString:fromQueue:completionBlock:
_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:
progressBlockForSendParameters:messageContext:topic:forObject:
_failSavedMessageCleanly:withResponseCode:
_cleanupOutgoingMessageDatabase
_cleanupOutgoingMessages
_cleanupOutgoingQWSMessages
_cleanupOutgoingExpiredMessages
_cleanupRunawayClientOutgoingMessages
_failSavedMessagesCleanly:withResponseCode:
_maxOutgoingDatabasesSizeInMB
_maxMessagesForRunawayClientConsideration
_cleanupExpiredIncomingMessages
allowSendingMessagesToInactiveDevice
containsString:
_fetchAccountEntitlements:listenerID:inContext:
sendToDaemon
setOriginalfromID:
groupData
_canSendMessageWithAccount:toDestination:
_shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:service:
setSubServiceAccountUUID:
sendMessageWithIDSSendParameters:messageContext:threadContext:progressBlock:onObject:
_sendErrorMessage:fromID:toDestinations:usingAccountWithUniqueID:useDictAsTopLevel:dataToEncrypt:wantsResponse:timeout:command:priority:completionBlock:
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:messageTypes:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:messageTypes:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:messageTypes:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:messageTypes:dataProtectionClass:
_nonUrgentInternetSendTimerFired
timeZoneForSecondsFromGMT:
second
_currentSecondsIntoDay
_nonUrgentInternetSendProbabilityForCurrentWindow
_rollDieForNonUrgentInternetSend
_hasNonUrgentInternetSendingBudget
_updateNonUrgentInternetSendTimer
initWithGuid:service:command:priority:
uniqueIdentifier
setStartDate:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:isLiveRetry:completionBlock:
_topicAllowsNoEncryption:fromIdentifier:
_shouldForgetCachedPeerTokensForDecryptionErrorType:
_shouldRetryForDecryptionErrorType:
_decryptionRetryInterval
_shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:
dataWithContentsOfURL:options:error:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:completionBlock:
receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
_checkIfDupeAndNoteGuid:local:topic:
getLocalIncomingPowerAssertion:queue:
_decryptAOverCMessage:topic:fromDeviceID:
_processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:
_processStoredIncomingLocalMessage:
sortedArrayUsingComparator:
_processIncomingRemoteMessage:forTopic:fromID:storedGuid:messageContext:
_processStoredIncomingLocalMessages
_processStoredIncomingRemoteMessagesWithGUIDs:
pairWithFirst:second:
first
_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:
_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:
_shouldDropMessageForIncomingDecryptionErrorType:
_noteDecryptionFailureForGroup:completion:
_commandIsSessionCommand:
_processIncomingRemoteMessage:forTopic:fromID:storedGuid:checkpointTrace:messageContext:
_doesMessageContainValidCombination:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:messageContext:
dontFilterSelfMessagesForUnknownDevice
_isDeviceInAccountRegistration:forService:
decryption
_messageStoreClass
_payloadFromDecryptedData:
_processNonMessagingPayloadWithCommand:dictionaryPayload:senderToken:topic:toIdentifier:fromID:peerResponseIdentifier:guid:service:shouldFilter:idsMessageContext:messageContext:
shouldProxyMessageForService:toIdentifier:
watchOnlyService
cacheIncomingGroup:completion:
_processIncomingRemoteResourceTransferMessage:guid:context:specificOriginator:broadcastTopic:toIdentifier:topic:messageContext:
wantsRemoteErrors
_processMessageError:topLevelMessage:error:messageID:service:serviceType:token:fromIdentifier:toIdentifier:groupID:completionBlock:
_handleIncomingAttachmentMessage:forTopic:fromID:completionBlock:
_enqueueBlock:withTimeout:forKey:
verifyAndRevealData:sendingDevice:cypherIdentifier:error:
_storageTimerFired
_updateStorageTimerWithInterval:
wantsCheckTransportLogHint
passThroughMessagesFromStorage
_isBulkingStorageMessagesForService:
_noteLastItemFromStorage:
_noteItemFromStorage:
_ackMessageWithSequenceNumber:forDeviceID:priority:connectionType:guid:
_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:
_shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:
_checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:
cancel
_unpublish
initWithParent:userInfo:
setTotalUnitCount:
URLWithString:
setFileURL:
setByteTotalCount:
setByteCompletedCount:
setKind:
setCancellable:
setPausable:
setFileOperationKind:
setUserInfoObject:forKey:
_publish
setCompletedUnitCount:
isValid
_addIncomingGUIDsWithGuid:isLocal:hasLock:
performBlock:withImplicitPriority:
initWithFirst:second:
_messageTypeForConnection:
allowsDuplicates
sendServerMessage:command:usingAccountWithUniqueID:messageContext:
sendMessageWithSendParameters:messageContext:
setPreferInfraWiFi:service:messageContext:
setLinkPreferences:service:messageContext:
startOTRTest:priority:messageContext:
testCloudQRConnection:messageContext:
failedDecryptingMessage:reason:forGroupID:onService:messageContext:
_canBulkMessageWithParameters:
_processStoredOutgoingUrgentMessagesProcessLocalAccounts:
_decryptEngramMessage:groupID:senderToken:fromID:guid:messageContext:
cancelItemWithIdentifier:service:messageContext:
getProgressUpdateForIdentifier:service:messageContext:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:messageContext:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:messageContext:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:messageContext:
lastPathComponent
attributesOfItemAtPath:error:
copyItemAtPath:toPath:error:
initWithMessageDelivery:passwordManager:
_queueForKey:
_setQueue:forKey:
removeBinding:
_notifyEmailValidationRequestSuccess:emailAddress:
_renewTokenForRegistrationInfo:failIfNotSilent:
_notifyEmailValidationRequestFailure:emailAddress:responseCode:registrationError:error:info:
_notifyEmailConfirmationSuccess:emailAddress:
_notifyHandleUnlinkSuccess:handle:
_notifyHandleUnlinkFailure:handle:responseCode:registrationError:error:info:
authenticationData
linkHandle:vettingToken:forRegistration:
_notifyEmailConfirmationFailure:emailAddress:responseCode:registrationError:error:info:
_notifyRegionValidationSuccess:regionID:phoneNumber:context:verified:
_notifyInitialRegionQuerySuccess:
_notifyRegionValidationFailure:responseCode:registrationError:error:info:
_notifyAuthenticationSuccess:
_serviceQueueForKey:
_noteSuccessfulToken:profileID:selfID:forRegistrationInfo:wasFetched:
_notifyAuthenticationFailure:responseCode:registrationError:error:info:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:failIfNotSilent:outRequestID:completionBlock:
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
_sendAuthenticationRequest:forceNew:failIfNotSilent:
_fetchTokenForRegistrationInfo:failIfNotSilent:failureBlock:
_processValidateHandleRequestMessage:deliveredWithError:resultCode:resultDictionary:
_registrationNeedsAuthentication:
_registrationIsAuthenticating:
_sendAuthenticationRequest:forceNew:
_processRegionValidationMessage:deliveredWithError:resultCode:resultDictionary:
_processDefaultInvitationContextMessage:deliveredWithError:resultCode:resultDictionary:
_processUnlinkHandleMessage:deliveredWithError:resultCode:resultDictionary:
setAuthenticationData:
_processLinkHandleMessage:deliveredWithError:resultCode:resultDictionary:
_queryInitialInvitationContextForRegistration:
_validateRegionID:phoneNumber:registration:
_sendValidationForEmail:registration:
_sendConfirmationForEmail:vettingToken:registration:
_sendUnlinkForHandle:registration:
_notifyRegistrationRequired:
_removeMessageForRegistration:fromQueueForKey:
center:foundEmail:vettingToken:forRegistrationInfo:
_haveQueuedMessageForRegistration:inQueueForKey:
_notifyAuthenticating:
_postUserNotificationWithTitle:message:identifier:completionHandler:
removeEmail:forRegistration:
_queues
_pairedDevicesFromPropertyDictionaries:
_saveToKeychainWithDictionary:
_removeFromKeychain
loadPairedDevices
savePairedDevices:
_keychainSchema
_checkContinuityEntitlementForMessageContext:
wpLinkManager
continuityClientInstanceCreatedWithMessageContext:
continuityStartAdvertisingOfType:withData:withOptions:messageContext:
continuityStopAdvertisingOfType:messageContext:
continuityStartScanningForType:withData:mask:peers:messageContext:
continuityStartScanningForType:withData:mask:messageContext:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:messageContext:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:messageContext:
continuityStopScanningForType:messageContext:
continuityStartTrackingPeer:forType:messageContext:
continuityStopTrackingPeer:forType:messageContext:
continuityConnectToPeer:messageContext:
continuityDisconnectFromPeer:messageContext:
_queueForImplicitPriority:
_sync_queue
_default_queue
_urgent_queue
setResponseServiceUserIDs:
_responseServiceUserIDs
initWithPasswordManager:
deviceIDPrefix
keychain
environment
removeAuthTokenAllowingGracePeriodForProfileID:username:
signaturePrefix
needsProvisioning
setNeedsProvisioning:
_candidateEmails
set_candidateEmails:
setPasswordManager:
_needsMigration
_needsProvisioning
_runningSimpleAuthentication
_isDisabled
_shouldRegisterUsingDSHandle
_shouldAutoRegisterAllHandles
_retries
_absintheRetries
_vettedEmails
_dsHandle
_IDSVersion
_applicationVersion
_environment
_registrationDate
_nextRegistrationDate
_isC2K
_registrationStatus
_registrationType
_mainID
_regionBasePhoneNumber
_regionServerContext
_registrationCert
_serviceType
_migrationContext
_identityVersion
_keyPairSignature
_idsUserID
_adHocServiceNames
_dependentRegistrationsTTL
_dependentRegistrationResponseCode
_dependentRegistrationAuthRetries
_reportAndRemoveForConnectionUUID:
_setCreatedAt:forConnectionUUID:
_canReportMetric:
_currentMetrics
_metrics
wantsSignature
_authenticationData
_loadServices
_loadSubServices
lowRAMDevice
disableOnLowRAMDevice
_loadServiceWithDictionary:
initWithServiceDictionary:
shouldLoadService:
_loadService:
setServiceName:
setPushTopic:
setSuperService:
_currentSubServicesForDevice:superService:
_updateSubServicesForDevice:superService:newSubservices:
_saveSubServices
_anyDeviceUsingSubService:superService:
_unloadServiceWithName:
_loadSubServiceWithName:usingService:completionBlock:
reloadAdHocServices
_combinedServicesForAllDevices
cloudKitContainerForService:
cloudKitContainerForServiceName:
allAdHocServices
_servicesToNameMap
_servicesToTopicMap
_deviceIDToSubServicesMap
_allAdHocServices
_accessPairedDevicesInCriticalSectionWithBlock:
_criticalLoadPairedDeviceArray:
pairedDeviceRepo
_criticalPairedDeviceWithCBUUID:
_criticalActivePairedDevice
_addPairedDevice:
_criticalPutPairedDevice:
_criticalPersistState
_performTransactionInCriticalSectionWithBlock:
_criticalRemovePairedDeviceWithCBUUID:
_criticalAllPairedDevices
predicateWithFormat:
filteredSetUsingPredicate:
_criticalActivatePairedDeviceWithCBUUID:
_criticalPerformPairedDeviceDeactivation
_criticalPerformPairedDeviceActivationWithCBUUID:
_criticalUpdatePairedDevice:isActive:
_criticalPurgeSecuredEncryptionKeysForAllPairedDevices
_criticalUpdatePairedDeviceWithCBUUID:deviceInfoPayload:
_criticalUpdatePairedDeviceWithCBUUID:capabilityFlags:
_criticalUpdatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
_criticalPerformTransactionWithBlock:
initWithPersister:
loadPairedDevicesFromStorage
containsPairedDeviceWithCBUUID:
addPairedDeviceWithCBUUID:
removePairedDeviceWithCBUUID:
updatePairedDeviceWithCBUUID:deviceInfoPayload:
updatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
_pairedDevices
_pairedDevicesLock
_isRegistrationTrackingAuthenticatedPhoneNumber:
_anyAuthenticatedPhoneNumber
currentPhoneUser
phoneTokenForUser:
setPhoneToken:forUser:
authenticationCertificateForUser:
setAuthenticationCertificate:forUser:
unknownSenderURI
messageServerTimestamp
_messageServerTimestamp
_unknownSenderURI
accountBlob
parentPg
newPg
parentVersion
ENID
_accountBlob
_parentPg
_newPg
_parentVersion
_ENID
initWithDataProtectionClass:filename:
setFilename:
filename
_filename
stringByAppendingPathComponent:
fileSystemRepresentation
isPublicKeyDistributed
setIsPublicKeyDistributed:
publicIdentityData
_sessionID
_isPublicKeyDistributed
_publicIdentityData
sessionInfoRequest
setSessionInfoRequest:
responseSessionInfo
setResponseSessionInfo:
responseTTL
setResponseTTL:
absintheUDID
setAbsintheUDID:
absintheHello
setAbsintheHello:
responseAbsintheServKey
setResponseAbsintheServKey:
responseAbsintheResponse
setResponseAbsintheResponse:
responseDeviceScoreNonce
setResponseDeviceScoreNonce:
_sessionInfoRequest
_responseSessionInfo
_responseTTL
_absintheUDID
_absintheHello
_responseAbsintheServKey
_responseAbsintheResponse
_responseDeviceScoreNonce
setResponseHandles:
setSelfHandle:
_responseHandles
_selfHandle
initWithQueue:userStore:server:phoneNumberValidator:deviceSupport:
userStore
phoneNumberValidator
phoneAuthenticationCertificateSigningRequestForUser:
server
authenticatePhoneUserWithRequest:
initWithQueue:userStore:deviceSupport:
_userStore
_phoneNumberValidator
_forSending
_forRefresh
_forMessaging
_notifyNames
_notifyTokens
_numberOfTokens
_notifyArraySize
allowMagnetDelivery
legacyIdentifier
protocolName
linkedServiceNames
setProtocolName:
setLegacyIdentifier:
setLaunchDarwinNotification:
setLaunchMachServiceNotification:
setDataUsageBundleID:
setAdHocServiceType:
setAllowWiProxDelivery:
setAllowPartialSendsToSucceed:
setCanUseLargePayload:
setSendOnePerToken:
setWantsPhoneNumberAccount:
setICloudBasedService:
setTunnelService:
setShouldShowUsageNotifications:
setShouldSyncAccounts:
setShouldNotSyncPhoneNumberAccounts:
setShouldAllowProxyDelivery:
setWantsLocalReflectedSend:
setWantsCheckTransportLogHint:
setWatchOnlyService:
setAllowsDuplicates:
setUseiMessageCallerID:
setAllowPendingMessagesForInactiveDevice:
setAllowSendingMessagesToInactiveDevice:
setShouldSilentlyFailMessagesOnSwitch:
setEnabledOnlyWhenPaired:
setForceHTTPQueriesOnly:
setWantsRemoteErrors:
setShouldFilterInactiveAliases:
setDontFilterSelfMessagesForUnknownDevice:
setPassThroughMessagesFromStorage:
setPushToWakeDisabled:
setDuetIdentifiers:
setAccountSyncMinCompatibilityVersion:
setQueryService:
setAllowMagnetDelivery:
setHoldsMessagesUntilFirstUnlock:
setLinkedServiceNames:
setDisableOnLowRAMDevice:
holdsMessagesUntilFirstUnlock
properties
setProperties:
_adHocServices
_adHocServicesLoaded
_allowWiProxDelivery
_allowMagnetDelivery
_shouldShowUsageNotifications
_allowPartialSendsToSucceed
_canUseLargePayload
_sendOnePerToken
_wantsPhoneNumberAccount
_iCloudBasedService
_tunnelService
_holdsMessagesUntilFirstUnlock
_shouldSyncAccounts
_shouldNotSyncPhoneNumberAccounts
_shouldAllowProxyDelivery
_wantsLocalReflectedSend
_wantsCheckTransportLogHint
_watchOnlyService
_allowsDuplicates
_useiMessageCallerID
_allowPendingMessagesForInactiveDevice
_allowSendingMessagesToInactiveDevice
_shouldSilentlyFailMessagesOnSwitch
_enabledOnlyWhenPaired
_forceHTTPQueriesOnly
_wantsRemoteErrors
_shouldFilterInactiveAliases
_dontFilterSelfMessagesForUnknownDevice
_passThroughMessagesFromStorage
_pushToWakeDisabled
_disableOnLowRAMDevice
_adHocServiceType
_displayName
_pushTopic
_queryService
_protocolName
_launchDarwinNotification
_launchMachServiceNotification
_superService
_dataUsageBundleID
_legacyIdentifier
_duetIdentifiers
_accountSyncMinCompatibilityVersion
_linkedServiceNames
startFairplayAuthenticationForDeviceWithCbuuid:
endFairplayAuthenticationForDeviceWithCbuuid:
_devices
reportiMessageSpam:toURI:messageContext:
reportiMessageUnknownSender:messageID:messageServerTimestamp:toURI:messageContext:
reportiMessageSpamCheckUnknown:count:requestID:messageContext:
channel
output
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
_dumpLogs:isDownstream:
_processOutgoingPacket
hostState
_readFromDataChannel:size:withFlags:isSynced:
_submitMagnetCorruptionMetricsToAWD
_resetMagnetCorruptionMetrics
stream:handleEvent:
flushBuffer:
observeValueForKeyPath:ofObject:change:context:
injectFakePacket:
_discardedRawBytes
_correctRawBytesSinceLastCorruption
_correctFramesSinceLastCorruption
_pipe
_dataChannel
_dataChannelPendingTx
_totalReceivedRawBytes
_currentIncomingPacket
_currentOutgoingPacket
_resyncing
_magnetCorruptionRecoveryMode
_previousCorruptionsDetected
_lastResyncTime
_lastNewMagnetCorruptionTime
_lastDownstreamDumpLogTime
_lastUpstreamDumpLogTime
_writeSuspended
_remoteHostAwake
_postedFirstHostStateChange
_linkSuspended
BTLink
responseRegistrations
setResponseRegistrations:
_responseRegistrations
initWithPeerIDManager:IDStatusQueryController:
IDStatusQueryController
setIDStatusQueryController:
_IDStatusQueryController
initWithQueue:messageDelivery:
_authenticateMessageForRequest:
_stringRepresentationForRealm:
_DSAuthIDForPushToken:
_checkEntitlement:forAccountWithID:messageContext:
_sessionWithUniqueID:messageContext:requiredEntitlement:
setupNewSessionWithConfiguration:messageContext:
cleanupSession:messageContext:
sendInvitation:withOptions:messageContext:
sendInvitation:withData:declineOnError:messageContext:
acceptInvitation:messageContext:
acceptInvitation:withData:messageContext:
cancelInvitation:messageContext:
cancelInvitation:withData:messageContext:
cancelInvitation:withRemoteEndedReasonOverride:messageContext:
declineInvitation:messageContext:
declineInvitation:withData:messageContext:
endSession:messageContext:
endSession:withData:messageContext:
sendSessionMessage:toDestinations:forSessionWithUniqueID:messageContext:
setAudioEnabled:forSessionWithUniqueID:messageContext:
setMuted:forSessionWithUniqueID:messageContext:
setPreferences:forSessionWithUniqueID:messageContext:
setInviteTimetout:forSessionWithUniqueID:messageContext:
acknowledgeSessionID:clientID:messageContext:
sendAllocationRequest:options:messageContext:
updateMembers:forGroup:sessionID:withContext:triggeredLocally:messageContext:
joinGroupSession:withOptions:messageContext:
leaveGroupSession:participantInfo:messageContext:
requestActiveParticipantsForGroupSession:messageContext:
_changeCreatedAt:
sentToDevice:
isGeneratedLocally
setIsGeneratedLocally:
_MKI
_MKS
_MKM
_createdAt
_isSentLocally
_isGeneratedLocally
_devicesToBeSent
RealTimeEncryption
IDSDeviceHeartbeatCenter
IMSystemMonitorListener
IDSBTDatagramLink
IDSLink
NSObject
IDSEndpointSubscription
IDSPreflightMessage
NSCopying
IDSUTunPeerServiceMap
HomeKit
IDSDuetInterface
IDSDeviceConnectionInfo
IDSAccountIdentityElector
IDSServerAuthenticatePhoneRequest
IDSServerAuthenticatePhoneResponse
IDSRealTimeEncryptionController
IDSRegistrationKeyConfig
IDSRegistrationKeyManager
IDSDeviceConnection
IDSPendingOfflineMessageResponse
IDSClientChannelData
IDSClientChannel
IDSClientChannelManager
IDSSocketPairConnection
IDSSystemAccount
IDSSystemAccountAdapter
IDSEmailInterface
MSSearchDelegate
IDSServiceStatistics
IDSHomeKitCloudRelayUserAccessTokensMessage
IDSPluginNanoRegistryProtocol
IDSNanoRegistryPluginManager
IDSHeartbeatCenter
IDSProfileGetDefaultInvitationContext
IDSUTunPeer
IDSUTunConnectionDelegate
IDSWPLinkManagerConnectivityDelegate
IDSAuthenticateMessage
IDSKeychainWrapper
IDSKeychainWrapperSystemMonitor
IDSKeychainWrapperSystemMonitorListener
IDSRegistrationController
IDSSMSRegistrationCenterListener
IDSAppleIDRegistrationCenterListener
IDSRegistrationCenterListener
IDSPeerAggregateMessage
IDSGroupStatusNotificationParameters
IDSPreflightStack
IDSDSession
_IDSSessionConnectionDelegate
IDSSocketPairConnectionDelegate
IDSBaseSocketPairConnectionDelegate
IDSRealTimeEncryptionDelegate
IDSIncomingMessageBroadcast
IDSPersistentMap
IDSPersistentMapPersister
IDSPersistentMapMetadata
NSSecureCoding
NSCoding
IDSDGroupStatusNotificationController
IDSProfileMessage
IDSTrafficMonitor
IDSQuickSwitchHelper
IDSAccountSync
AppleCare
IDSKeychainKeyElectionStore
IDSClientData
IDSClientDataEngramKeyStore
IDSClientDataRegistrationKeyManager
IDSClientDataResult
IDSBTLELink
CBPeripheralDelegate
IDSValidateCredentialsMessage
IDSRapportDeliveryController
IDSRapportClientDelegate
IDSRapportDeliveryControllerRapportClient
IDSPeerMessage
IDSUTunControlMessage_Hello
IDSDRegistrationPushManager
IDSRegistrationPushHandlerListener
IDSDRegistrationControl
IDSDGroupContextDataSource
ENGroupContextDataSource
IDSMPConversationGroupEntry
IDSPairedDeviceKeychainSchema
IDSDaemonProtocol
IDSDaemonListenerProtocol
IDSDaemon
IDSPushHandlerDelegate
IDSUTunDeliveryControllerDelegate
IDSDuetInterfaceDelegate
IDSRapportDeliveryControllerDelegate
IDSDaemonMIGInterface
IDSPeerAggregatableMessage
IDSDGroupContextNotifyingObserver
ENGroupContextObserverMiddleware
ENGroupContextMiddleware
IDSLinkPreferencesManager
IDSEngramKeyStore
IDSKeychainWrapperListener
IDSUTunControlChannel
IDSUTunControlChannelIdentityPair
IDSTTLCache
IDSTTLCacheItem
IDSProfileValidateInvitationContext
IDSPeerIDKey
IDSValidationSession
IDSBaseMessageSigningSession
IDSValidationSigningResult
Dependency
IDSDAccountControllerDeviceSupport
IDSDAccountController
IDSUTunDeliveryControllerConnectivityDelegate
IDSUDPGlobalLink
IDSLinkDelegate
Registration
IDSWPLinkManager
WPContinuityDelegate
IDSWPPacketSendingProtocol
PhoneNumberValidation
IDSDAccount
IDSPairingManagerDelegate
IDSSMSRegistrationCenter
IDSPhoneNumberValidationRequestor
IDSPhoneNumberValidationListener
IMUserNotificationListener
IDSGroupPutMessage
IDSRestrictionsService
IDSRestrictions
IDSGenericConnection
IDSPairingManager
IDSPhoneUser
IDSUser
IDSGroupServer
IDSGroupServerPushHandler
IDSEncryptionHelpers
IDSAppleIDNotification
IDSAppleIDNotificationCenter
Account
IDSSession
IDSRegistrationProperties
IDSDeliveryController
IDSCheckUnknownSenderMessage
IDSDRegistrationListener
IDSLocalDeliveryMessage
IDSHCInfo
IDSUTunDeliveryController
IDSUTunPeerDelegate
IDSGroupContextDaemonProtocol
IDSGroupContextDataSourceDaemonProtocol
IDSGroupContextCacheMiddlewareDaemonProtocol
IDSGroupContextObserverDaemonProtocol
IDSDaemonXPCInterface
NSXPCListenerDelegate
IDSDGroupContextNotifyingObserverDelegate
IDSDSessionController
IDSDSignInResponder
IDSServerStorageStateMachine
IDSPeerIDQuery
IDSPeerIDPushHandler
IDSPublicKeyStorageCache
IDSPublicKeyStorage
IDSPairedDevice
IDSRegistrationMessage
IDSRegistrationKeychainManager
KeychainManagerUtilities
IDSDaemonCapabilities
CoreTelephonyClientCarrierBundleDelegate
Pairing
IDSRegistrationCenter
IDSRegistrationCenterMessageDelivery
IDSEngramKeyStoreListener
IDSIDQueryMessage
IDSLinkManager
IDSBTLinkManagerDelegate
IDSWPLinkManagerDelegate
IDSCellularLinkDelegate
IDSRapportClient
IDSTTLCacheDelegate
IDSProfileValidateHandleMessage
IDSUTunConnection
IDSPhoneNumberValidationStateMachine
IDSPhoneNumberValidationStateMachineMessageDelivery
IDSPhoneNumberValidationStateMachineLockdownManager
IDSPhoneNumberValidationStateMachineDeviceSupport
IDSPhoneNumberIdentification
CoreTelephonyClientPNRDelegate
Collaborators
IDSGetDependentRegistrationsCenter
IDSOTRSessionInfo
IDSOTRController
IDSNegativeInfo
IDSNegativeTTLCache
IDSServerStorageMetricCollector
IDSGroupSendAheadObserver
IDSServerMessage
IDSOTRKeyStorage
_IDSSessionConnectionInfo
IDSIDStatusQueryController
IDSDMessageStoreMigrator
IDSRegistrationPushHandler
IDSBagUtilities
QRSelfAllocationArray
TimerWrapper
QRStreamInfo
QRAllocation
IDSQuickRelayAllocator
IDSBlockRetryHandler
IDSPhoneNumberValidationMechanism
IDSPhoneNumberValidationModeArbiter
IDSAsyncMapper
IDSValidationCertificateMessage
IDSBTLinkManager
CBCentralManagerDelegate
CBPeripheralManagerDelegate
CBScalablePipeManagerDelegate
IDSCountdown
IDSReportSpamMessage
IDSEncryptionController
_IDSSessionConnection
ConferenceDelegate
AVConferenceDelegate
IDSPeerAccessoryMessage
IDSHomeKitCloudRelayAdminAccessTokenMessage
IDSSocketPairConnectionTCPInfo
IDSDGroupContextController
IDSDAccountSendMessageContext
0 7C
Messaging
IDSCurrentDevice
IDSDAccountRegistrationListener
IDSHomeKitCloudRelayConsentTokensMessage
IDSDOutgoingMessage
IDSDIncomingMessage
IDSDMessageStore
IDSDMessageStoreMap
IDSQuickRelayAllocateMessage
IDSLocalDeliveryQueue
IDSDSessionDefaultAvailabilityCheck
IDSDSessionAvailabilityCheck
IDSStatusQueryQueue
IDSDaemonMIGQueryInterface
IDSPeerIDManagerEndpointQueryListener
IDSPeerIDManager
IDSPeerIDQueryHandlerDelegate
IDSGenericConnectionID
IDSSockAddrWrapperPair
IDSConnectionContext
IDSUTunTimingEventOutgoing
IDSUTunTimingEvent
IDSUTunTimingEventIncoming
IDSUTunTimingEventKernelTest
IDSUTunTimingLogger
IDSUTunController
IDSDRegistrationControliMessageChecker
IDSPeerIDQueryHandler
IDSAppleIDRegistrationCenter
IDSAppleIDRegistrationCenterMessageDelivery
IDSEmailInterfaceListener
IDSPairedDeviceKeychainPersister
IDSPairedDevicePersister
Continuity
IDSDaemonPriorityQueueController
IDSHomeKitCloudRelayServiceUserIDsMessage
IDSRegistration
IDSDeviceConnectionAWDMetrics
IDSProfileLinkHandleMessage
IDSDServiceController
IDSPairedDeviceRepository
IDSGroupGetMessage
IDSPhoneUserStore
IDSReportUnknownSenderMessage
IDSGroupServerKeyElectionStoreItem
IDSGroupServerKeyElectionStore
IDSDatabase
IDSRealTimeEncryptionIdentity
IDSInitializeValidationMessage
IDSProfileGetHandlesMessage
IDSPhoneUserRegistry
IDSProfileUnlinkHandleMessage
IDSPeerIDQueryContext
IDSDevicePropertiesStateNotifier
IDSDService
IDSDevicePolicyController
iMessageSpam
IDSBTLink
NSStreamDelegate
IDSGetDependentRegistrationMessage
IDSPeerIDQueryDataSource
IDSPeerIDQueryHandlerDataSource
IDSServer
Session
IDSRealTimeEncryptionKeyMaterial
v40@0:8@16@24@32
@16@0:8
v16@0:8
B16@0:8
v24@0:8@16
v32@0:8d16@24
@"IMTimer"
@"NSMutableDictionary"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Q40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24@32
Q44@0:8^^{?}16i24@28@36
@28@0:8d16B24
Q40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@"NSString"24@"NSString"32
Q44@0:8^^{?}16i24@"NSString"28@"NSString"36
@"NSString"28@0:8d16B24
@"NSDictionary"16@0:8
v24@0:8@"NSString"16
@"<IDSLinkDelegate>"16@0:8
v24@0:8@"<IDSLinkDelegate>"16
@40@0:8@16@24@32
@"NSString"
@"<IDSLinkDelegate>"
@48@0:8@16@24@32@40
v24@0:8@?16
v32@0:8@16@24
@?16@0:8
@"IDSURI"
@"NSArray"
@"NSObject<OS_dispatch_queue>"
@24@0:8^{_NSZone=}16
@"NSNumber"
@24@0:8@16
B24@0:8^[16C]16
B44@0:8@16S24^[16C]28^B36
B44@0:8S16^@20^[16C]28^B36
B60@0:8@16^S24B32^B36^[16C]44^B52
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
[16C]
@"NSMapTable"
[8[16C]]
@24@0:8^@16
v48@0:8@16@24@32@40
v56@0:8@16@24@32@40@48
v28@0:8B16@20
@32@0:8@16q24
v56@0:8@16q24@32@40@?48
@"<IDSDuetInterfaceDelegate>"
@"NSMutableSet"
^{IDSPortMap=[1024Q]S}16@0:8
^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i}16@0:8
^[16C]16@0:8
v24@0:8^[16C]16
S16@0:8
v20@0:8S16
v32@0:8@16^B24
v20@0:8B16
d16@0:8
v24@0:8d16
i16@0:8
v20@0:8i16
v24@0:8Q16
@"IDSSockAddrWrapper"
@"IDSUTunControlChannel"
@"NSData"
[2048I]
{IDSPortMap="ports"[1024Q]"lastAssignedPort"S}
{SimpleUInt32ToObjectTable="tableSize"i"elements"^{SimpleUInt32ToObjectTableElement}"elementCount"i}
@"NSMutableArray"
{IDSDCI_OutgoingPacketList="genericConnection"[64@]"sources"[64^v]"destinations"[64^v]"upperProtocols"[64C]"bytes"[64^v]"bytesLengths"[64Q]"numPackets"I"nextPacket"I}
@"NSObject<OS_nw_service_connector>"
v32@0:8@16@?24
v48@0:8@16@24@32@?40
@40@0:8@16q24^@32
@48@0:8@16@24@32^@40
@"IDSKeychainKeyElectionStore"
@"IDSCloudKitKeyElectionStore"
@"IDSGroupServerKeyElectionStore"
@"IDSPhoneUser"
@40@0:8q16@24@32
q16@0:8
@"IDSAuthenticationCertificate"
v40@0:8@16Q24Q32
v40@0:8@16q24q32
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
@"NSRecursiveLock"
@"IDSRegistrationKeyConfig"
v76@0:8@16B24@28@36@44@52@60@68
@40@0:8*16I24r*28I36
@36@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16r*24I32
^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@0:8
r*16@0:8
I16@0:8
^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}
B40@0:8r^v16I24r^v28I36
B40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16r^v24I32B36
B44@0:8*16I24r^v28I36B40
@"NSUUID"
B32@0:8@16@?24
@60@0:8i16@20@28q36@44Q52
v20@0:8I16
q32@0:8*16Q24
B28@0:8@16B24
v32@0:8@?16@?24
@"NSMutableData"
@"<IDSSocketPairConnectionDelegate>"
@"IDSStallDetector"
@32@0:8@16@24
v48@0:8@16@24@?32@?40
v40@0:8@16@?24@?32
@48@0:8@16@24@?32^@40
@40@0:8@16@?24^@32
@40@0:8@16@24@?32
v36@0:8@16@24i32
B32@0:8@16@24
v24@0:8#16
@"<IDSPluginNanoRegistryProtocol>"
B32@0:8@16^d24
@"NSDate"
@"NSDictionary"
v92@0:8@16@24@32@40@48@56B64B68@72@80B88
v28@0:8@16I24
v24@0:8@"IDSUTunConnection"16
v92@0:8@"IDSUTunConnection"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88
v92@0:8@"IDSUTunConnection"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88
v56@0:8@"IDSUTunConnection"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48
v28@0:8@"IDSUTunConnection"16I24
v36@0:8@16@24B32
v36@0:8@"IDSWPLinkManager"16@"NSString"24B32
v32@0:8@"IDSWPLinkManager"16@"NSString"24
B32@0:8@"IDSWPLinkManager"16@"NSString"24
v40@0:8@"IDSWPLinkManager"16@"NSString"24@"NSError"32
@24@0:8q16
B36@0:8q16I24q28
v40@0:8@16^Q24^Q32
v24@0:8q16
v28@0:8@16B24
@32@0:8q16q24
B24@0:8q16
q24@0:8@16
v32@0:8@16B24B28
v40@0:8@16q24@?32
@"IDSUTunConnection"
@"<IDSUTunPeerDelegate>"
@"NSTimer"
@"NSObject<OS_dispatch_source>"
@"IDSUTunPeerServiceMap"
v24@0:8@"<IDSKeychainWrapperSystemMonitorListener>"16
@32@0:8@16^@24
B44@0:8@16@24B32^@36
v40@0:8@16@24@?32
B32@0:8@16^@24
B24@0:8^@16
q24@0:8^@16
@"<IDSKeychainWrapperSystemMonitor>"
@"NSHashTable"
B28@0:8@16i24
B32@0:8@16q24
v40@0:8@16@24q32
v48@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40
v40@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24q32
v24@0:8@"IDSSMSRegistrationCenter"16
v60@0:8@16@24@32@40@48B56
v48@0:8@16@24q32@40
v56@0:8@16@24@32q40@48
v32@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24
v40@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24@"NSString"32
v60@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40@"NSDictionary"48B56
v48@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v56@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24@"NSString"32q40@"NSDictionary"48
v32@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"NSArray"24
v40@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24@"NSArray"32
v24@0:8@"IDSRegistrationCenter"16
v40@0:8@16q24@32
v36@0:8@16B24q28
@"IDSKeychainWrapper"
@20@0:8B16
@52@0:8@16@24B32@36Q44
@72@0:8@16@24q32@40@48@56@64
v36@0:8@16B24@28
v36@0:8@"_IDSSessionConnection"16B24@"NSError"28
v32@0:8@"_IDSSessionConnection"16@"NSError"24
v32@0:8@"_IDSSessionConnection"16@"NSData"24
v36@0:8@16@24I32
v36@0:8@"IDSSocketPairConnection"16@"NSData"24I32
v32@0:8@"IDSSocketPairConnection"16@"IDSSocketPairMessage"24
v24@0:8@"IDSSocketPairConnection"16
v32@0:8@"IDSBaseSocketPairConnection"16@"NSData"24
v24@0:8@"IDSBaseSocketPairConnection"16
v32@0:8@"NSDictionary"16@"IDSDestination"24
v24@0:8@"IDSRealTimeEncryptionKeyMaterial"16
*16@0:8
v60@0:8@16@24@32B40@44@52
B40@0:8@16@24@32
v44@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}24r*32I40
v44@0:8@16@24B32@36
v28@0:8i16@20
v36@0:8@16I24@28
I24@0:8q16
v24@0:8i16B20
v28@0:8i16i20i24
B48@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}24@32@40
v52@0:8@16c24@28@36@44
v28@0:8@16C24
v28@0:8@16S24
v36@0:8@16c24@28
v32@0:8@16B24c28
v36@0:8@16@24C32
v52@0:8@16@24@32@40B48
v20@0:8C16
v24@0:8i16i20
@"NSSet"
@"IDSDestination"
@"IDSBaseSocketPairConnection"
@"_IDSSessionConnection"
@"APSConnection"
@"IDSGroupStatusNotificationParameters"
@"NSError"
[60C]
{?="SRTPSend"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{?="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i}"SRTPRecv"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{?="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i}}
[8^{?}]
@"IDSClientChannel"
@"<IDSDSessionAvailabilityCheck>"
@"IDSConnectionContext"
@"IDSMPFullLegacyIdentity"
@"IDSMPPublicLegacyIdentity"
@56@0:8@?16B24@28q36@44I52
@"NSData"24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@48@0:8@16q24@32@?40
@72@0:8@16q24@32d40d48@56@?64
@"<IDSPersistentMapPersister>"
v64@0:8@16@24@32@40@48@56
v72@0:8@16@24@32@40@48@56@64
v56@0:8@16@24@32@40q48
v56@0:8@16@24@32@40@?48
@"IDSDAccount"
v24@0:8^{__SecKey=}16
^{__SecKey=}16@0:8
^{__SecKey=}
B44@0:8@16@24I32@36
B36@0:8@16I24@28
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
v24@0:8@?<v@?@"IDSMPFullAccountIdentityCluster"@"NSError">16
@"IDSMPFullDeviceIdentity"32@0:8@"IDSMPFullAccountIdentityCluster"16^@24
@"IDSMPFullAccountIdentityCluster"
v24@0:8@"CBPeripheral"16
v32@0:8@"CBPeripheral"16@"NSArray"24
v32@0:8@"CBPeripheral"16@"NSError"24
v40@0:8@"CBPeripheral"16@"NSNumber"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBCharacteristic"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBDescriptor"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBL2CAPChannel"24@"NSError"32
@"<IDSWPPacketSendingProtocol>"
v32@0:8@"IDSRapportClient"16@"NSString"24
v40@0:8@"IDSRapportClient"16@"NSDictionary"24@"NSString"32
v64@0:8@16@24@32@40@48@?56
@"<IDSRapportDeliveryControllerDelegate>"
@"IDSRapportClient"
v24@0:8@"<IDSRapportClientDelegate>"16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
@40@0:8^v16Q24@32
v32@0:8@"IDSRegistrationPushHandler"16@"NSData"24
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSString"24
v40@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSData"32@"NSString"40
v32@0:8q16@24
@"IDSRegistrationPushHandler"
v40@0:8q16q24^@32
q32@0:8q16^@24
v48@0:8@"ENGroupContext"16@"_ENGroupInfo"24@"ENGroup"32@?<v@?@"ENGroup"@"NSError">40
v40@0:8@"ENGroupContext"16@"ENGroupID"24@?<v@?@"ENGroup"@"NSError">32
v40@0:8@"ENGroup"16@"ENGroupContext"24@?<v@?@"NSData"@"NSError">32
v40@0:8@"NSData"16@"ENGroupContext"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"<ENCypher>"16@?<v@?@"NSArray"B>24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?B@"NSError">32
v80@0:8@16@24@32@40q48@56@64@?72
@"IDSGroupServer"
@"ENGroupID"
Q24@0:8@16
v68@0:8@16@24i32@36@44@52@60
v52@0:8@16@24@32i40@44
v32@0:8@16q24
v48@0:8@16q24@32@40
v80@0:8@16@24@32@40@48@56q64q72
v48@0:8@16@24@32q40
v40@0:8q16@24@32
v48@0:8q16@24@32@40
v48@0:8q16@24@32B40B44
v56@0:8q16@24@32@40B48B52
v40@0:8q16q24@32
v68@0:8@"NSString"16@"NSString"24i32@"NSDictionary"36@"NSString"44@"NSString"52@"NSString"60
v52@0:8@"NSString"16@"NSString"24@"NSString"32i40@"NSDictionary"44
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSString"24
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"NSNumber"16@"NSString"24
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSDictionary"40@"NSNumber"48@"NSArray"56
v40@0:8@"NSString"16@"NSNumber"24@"NSString"32
v24@0:8@"NSArray"16
v24@0:8@"NSSet"16
v40@0:8@"NSString"16@"NSArray"24@"NSString"32
v40@0:8@"NSArray"16@"NSString"24@"NSString"32
v24@0:8@"NSDictionary"16
v56@0:8@"NSURL"16@"NSDictionary"24@"NSArray"32@"NSString"40@"NSString"48
v40@0:8@"NSDictionary"16@"NSNumber"24@"NSString"32
v28@0:8B16@"NSString"20
v32@0:8@"NSDictionary"16@"NSString"24
v32@0:8@"NSString"16q24
v48@0:8@"NSDictionary"16q24@"ENGroupID"32@"NSString"40
v56@0:8@"NSString"16@"NSString"24@"NSNumber"32@"NSNumber"40@"NSNumber"48
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSNumber"40@"NSNumber"48@"NSNumber"56q64q72
v48@0:8@"NSString"16@"NSString"24@"NSString"32q40
v36@0:8@"NSSet"16@"NSSet"24I32
v32@0:8@"NSObject<OS_xpc_object>"16@"NSDictionary"24
v36@0:8@"NSString"16@"NSData"24B32
v32@0:8@"NSString"16@"NSData"24
v28@0:8@"NSString"16I24
v40@0:8@"NSData"16@"NSSet"24@"NSString"32
v32@0:8q16@"NSString"24
v52@0:8@"NSArray"16@"NSString"24@"NSString"32@"NSData"40B48
v40@0:8q16@"NSData"24@"NSDictionary"32
v40@0:8q16@"NSData"24@"NSData"32
v48@0:8q16@"NSData"24@"NSData"32@"NSArray"40
v48@0:8q16@"NSData"24@"NSData"32B40B44
v56@0:8q16@"NSData"24@"NSData"32@"NSArray"40B48B52
v48@0:8@"NSString"16@"NSString"24@"NSNumber"32@"NSString"40
v40@0:8@"NSString"16@"NSString"24@"NSData"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40
v40@0:8@"NSString"16@"NSString"24@"NSArray"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8q16q24@"NSString"32
v80@0:8@16@24@32@40@48@56@64@72
v68@0:8@16@24@32q40@48B56@60
v40@0:8@16d24@32
v52@0:8@16@24@32B40@44
v40@0:8@16@24^B32
v44@0:8@16B24@28@36
v52@0:8@16q24B32d36@44
v72@0:8@"NSDictionary"16@"NSString"24@"NSDictionary"32@"NSString"40@"NSString"48@"NSString"56@"NSDictionary"64
v64@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64@"NSDictionary"72
v68@0:8@"NSString"16@"NSString"24@"NSString"32q40@"NSError"48B56@"NSDictionary"60
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"NSDictionary"56
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v40@0:8@"NSString"16d24@"NSError"32
v40@0:8@"NSString"16@"NSString"24@"NSError"32
v32@0:8@"NSString"16@"NSArray"24
v32@0:8@"NSString"16@"NSNumber"24
v32@0:8@"NSData"16@"NSError"24
v40@0:8@"NSData"16@"NSString"24@"NSError"32
v64@0:8@"NSData"16@"NSData"24@"NSData"32@"NSData"40@"NSString"48@"NSError"56
v40@0:8@"NSNumber"16@"NSString"24@"NSError"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32B40@"NSError"44
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSNumber"56
v36@0:8@"NSString"16I24@"NSError"28
v36@0:8@"NSString"16@"NSSet"24B32
v28@0:8@"NSString"16B24
v40@0:8@"NSString"16@"NSArray"24@"NSError"32
v40@0:8@"NSString"16@"NSDictionary"24@"NSError"32
v32@0:8@"NSString"16@"NSError"24
v48@0:8@"NSString"16@"NSArray"24@"NSNumber"32@"NSNumber"40
v36@0:8@"NSString"16@"NSArray"24B32
v48@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8@"NSObject<OS_xpc_object>"16@"NSString"24@"NSError"32
v40@0:8@"NSString"16q24@"NSError"32
v32@0:8q16@"NSError"24
v40@0:8q16@"NSData"24@"NSString"32
v32@0:8@"NSArray"16@"NSError"24
v40@0:8@"NSString"16@"NSString"24^B32
v40@0:8@"NSString"16@"NSError"24@"NSArray"32
v36@0:8@"NSString"16B24@"NSError"28
v44@0:8@"NSString"16B24@"NSData"28@"NSError"36
v40@0:8q16@"NSString"24@"NSError"32
v52@0:8@"NSString"16q24B32d36@"NSError"44
B52@0:8@16@24@32@40B48
v32@0:8@"IDSPushHandler"16@"NSData"24
v56@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"NSString"40@"IMMessageContext"48
v64@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"NSString"40@"IDSIncomingMessageCheckpointTrace"48@"IMMessageContext"56
v40@0:8@"IDSPushHandler"16@"NSString"24@"IMMessageContext"32
v28@0:8@"IDSPushHandler"16B24
v116@0:8@16@24@32@40@48@56@64B72B76@80@88q96B104q108
v36@0:8@16q24I32
v44@0:8@16q24I32@36
v116@0:8@"IDSUTunDeliveryController"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108
v116@0:8@"IDSUTunDeliveryController"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108
v80@0:8@"IDSUTunDeliveryController"16@"NSString"24@"NSString"32@"NSString"40@"NSNumber"48@"NSString"56q64q72
v36@0:8@"IDSUTunDeliveryController"16q24I32
v44@0:8@"IDSUTunDeliveryController"16q24I32@"NSArray"36
v36@0:8@"IDSUTunDeliveryController"16I24@"NSArray"28
@"NSDictionary"24@0:8@"IDSUTunDeliveryController"16
v32@0:8@"IDSDuetInterface"16@"NSArray"24
v64@0:8@"IDSRapportDeliveryController"16@"NSDictionary"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56
@20@0:8i16
B60@0:8@16@24i32@36@44@?52
@44@0:8@16@24@32I40
@52@0:8@16@24@32I40B44B48
@48@0:8@16@24@32I40B44
@36@0:8@16B24@28
v60@0:8@?16@24@32@40I48@52
v68@0:8@?16@24@32@40@48I56@60
@48@0:8q16@24@32q40
B36@0:8@16q24B32
B20@0:8I16
v48@0:8Q16@24@32@40
B44@0:8Q16@24@32B40
B92@0:8@16i24{?=[8I]}28@60@68@76^@84
v44@0:8@16@24I32@36
@"IMRemoteObjectBroadcaster"
@"IMMultiQueue"
@"IMPair"
@"IMPowerAssertion"
@"FTMessageDelivery"
@"IDSDSignInResponder"
@"IDSNegativeTTLCache"
@"NSObject<OS_xpc_object>"
@68@0:8@16@24@32@40B48@?52@?60
v32@0:8@"ENGroupContext"16@"ENGroup"24
v40@0:8@"ENGroupContext"16@"ENGroup"24@"ENGroup"32
v24@0:8@"ENGroupContext"16
@"<IDSDGroupContextNotifyingObserverDelegate>"
@"IDSCloudKitContainer"
@"CUTPromiseSeal"
v36@0:8i16@20@28
@28@0:8C16C20I24
@28@0:8*16I24
@"IDSUTunControlChannelIdentityPair"
@"NSObject<OS_nw_connection>"
@32@0:8@16d24
@"<IDSTTLCacheDelegate>"
@"NSDictionary"32@0:8@"NSData"16^@24
d24@0:8q16
v36@0:8@"IDSUTunDeliveryController"16@"NSString"24B32
B24@0:8^B16
@28@0:8@16i24
@28@0:8@16B24
@36@0:8@16i24@28
v28@0:8i16@?20
@20@0:8I16
@"IDSSystemAccountAdapter"
@"IDSDServiceController"
@"IDSRegistrationController"
@"<IDSDAccountControllerDeviceSupport>"
v40@0:8@16@"NSString"24@"NSString"32
B48@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}24@"NSString"32@"NSString"40
v44@0:8@16B24@"NSString"28@"NSString"36
v32@0:8@16@"NSData"24
v52@0:8@16c24@"NSUUID"28@"NSDictionary"36@"NSDictionary"44
v36@0:8@16c24@"NSUUID"28
v52@0:8@16@"NSDictionary"24@"NSString"32@"NSString"40B48
v32@0:8@16@"NSDictionary"24
v40@0:8@16B24@28B36
v36@0:8I16^{sockaddr=CC[14c]}20^{sockaddr=CC[14c]}28
B60@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52
B84@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}60@68@76
B56@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24d32@40@48
v40@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24@32
@"IDSUDPLink"
{IDSSockAddrPairTable="iNumPair"i"iMaxNumPair"i"pairs"^{IDSSockAddrPair}"echoCount"i"digestKeyData"[1472C]"digestKeyDataLen"i}
{sockaddr_storage="ss_len"C"ss_family"C"__ss_pad1"[6c]"__ss_align"q"__ss_pad2"[112c]}
v68@0:8i16@20B28B32B36B40B44q48q56i64
v44@0:8q16@24B32q36
Q32@0:8@16@24
Q32@0:8@"NSData"16@"NSUUID"24
@"<WPContinuity>"
@"<IDSWPLinkManagerDelegate>"
v56@0:8@16^@24^@32@40@48
@64@0:8@16@24@32i40@44@52B60
@60@0:8@16@24@32i40@44@52
@52@0:8@16@24@32i40@44
v48@0:8^@16^@24@32@40
@"IDSRegistration"
@"IDSDService"
v24@0:8@?<v@?B>16
v40@0:8@"IDSPhoneNumberValidationStateMachine"16@"NSString"24@"NSString"32
v32@0:8@"IDSPhoneNumberValidationStateMachine"16q24
v24@0:8@"IDSPhoneNumberValidationStateMachine"16
v24@0:8@"IMUserNotification"16
@"IDSPhoneNumberValidationStateMachine"
v60@0:8Q16@24@32@40B48@52
B24@0:8Q16
v40@0:8^I16^I24^I32
B20@0:8B16
q24@0:8Q16
B72@0:8@16@24@32I40I44I48S52Q56@64
@"IDSPairedDeviceRepository"
@"IDSCountdown"
@"NSData"16@0:8
v72@0:8@16@24@32@40@48@56@?64
v72@0:8@"NSData"16@"NSData"24@"NSData"32@"NSData"40@"NSData"48@"NSNumber"56@?<v@?@"IDSGroupPutMessage"@"NSError"q@"NSDictionary"@"NSArray">64
v32@0:8@"NSData"16@?<v@?@"IDSGroupGetMessage"@"NSError"q@"NSDictionary"@"NSArray">24
@?32@0:8@16@?24
@?24@0:8@?16
@"<FTMessageDeliveryProtocol>"
@"<IDSGroupServerPushHandler>"
@88@0:8@16@24@32@40@48^q56q64@72^q80
@104@0:8@16@24@32@40@48@56@64^q72q80@88^q96
@84@0:8@16@24@32@40@48q56q64B72^q76
@100@0:8@16@24@32@40@48@56@64q72q80B88^q92
v80@0:8@16@24@32@40@48q56B64B68q72
@68@0:8@16@24@32I40q44q52^q60
@68@0:8@16@24I32@36q44q52^q60
v32@0:8@?16@24
v76@0:8@16@24i32@36@44@52@60@68
v60@0:8@16@24@32i40@44@52
v48@0:8q16q24@32@40
v52@0:8@16B24@28@36@44
v136@0:8@16@24@32q40B48B52B56B60B64q68Q76q84I92i96@100@108B116B120B124B128B132
v148@0:8@16I24I28I32I36@40B48B52B56I60@64@72@80I88I92I96B100@104@112@120B128@132@140
q20@0:8B16
v72@0:8@16@24q32@40@48@56@64
v140@0:8@16@24@32@40@48@56@64@72B80B84@88B96B100B104@108@116@?124@?132
v88@0:8@16@24@32@40@48@56@64@72@?80
v132@0:8@16@24@32@40@48@56@64@72@80@88B96@100@108@?116@?124
v144@0:8@16@24@32@40@48@56@64B72B76B80@84B92B96B100@104@112@?120@?128@136
v200@0:8@16d24@32@40B48B52B56B60B64B68@72B80@84@92@100@108@116@124@132@140B148B152B156@160@168@?176@?184@?192
v80@0:8@16@24@32@40@48@56@64@?72
v188@0:8@16@24@32@40B48@52B60B64B68B72q76B84@88@96@104@112@120@128B136B140B144@148@156@?164@?172@?180
v36@0:8B16@20@28
C24@0:8q16
@108@0:8q16S24I28I32B36B40B44B48@52@60@68@76@84@92@100
@"IDSSocketPairMessage"
@"IDSProtobuf"
v24@0:8^v16
^v16@0:8
v108@0:8@16@24@32@40@48@56B64B68@72@80q88B96q100
v72@0:8@16@24@32@40@48q56q64
v28@0:8@"IDSUTunPeer"16B24
v24@0:8@"IDSUTunPeer"16
v108@0:8@"IDSUTunPeer"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100
v108@0:8@"IDSUTunPeer"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100
v72@0:8@"IDSUTunPeer"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48q56q64
v36@0:8@"IDSUTunPeer"16q24I32
v44@0:8@"IDSUTunPeer"16q24I32@"NSArray"36
v36@0:8@"IDSUTunPeer"16I24@"NSArray"28
v228@0:8@16@24@32@40@48q56I64B68B72B76B80@84@92B100B104B108B112B116@120@128@136@144@152@160@168@176B184@188q196@?204@?212@?220
@20@0:8S16
B28@0:8q16I24
@"<IDSUTunDeliveryControllerDelegate>"
v40@0:8@"_ENGroupInfo"16@"ENGroup"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"ENGroupID"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENGroup"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"NSData"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENStableGroupID"16@?<v@?@"ENGroup">24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?>16
v32@0:8@"ENGroupID"16@?<v@?>24
v32@0:8@"ENGroup"16@?<v@?@"NSError">24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?@"NSError">32
v24@0:8@?<v@?@"NSError">16
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"ENGroup"16
v32@0:8@"ENGroup"16@"ENGroup"24
@"NSXPCListener"
@"NSXPCConnection"
@"IDSDGroupContextNotifyingObserver"
v76@0:8@16@24@32@40@48B56@60@68
v36@0:8i16q20@28
v60@0:8q16i24@28@36B44B48@52
v52@0:8q16i24@28@36B44B48
v72@0:8q16@24@32@40@48@56@64
@"IDSDAccountController"
@"<FTPasswordManager>"
v28@0:8@16i24
@"IDSDeliveryController"
{_opaque_pthread_mutex_t=q[56c]}16@0:8
v80@0:8{_opaque_pthread_mutex_t=q[56c]}16
@"IDSPeerIDManager"
@"IDSPublicKeyStorageCache"
@64@0:8@16@24@32@40@48@56
@56@0:8@16@24I32I36I40S44@48
@32@0:8@16Q24
@24@0:8Q16
@40@0:8@16q24@32
v24@0:8@"CTXPCServiceSubscriptionContext"16
@"CoreTelephonyClient"
B24@0:8@"IDSBaseMessage"16
v24@0:8@"IDSBaseMessage"16
@"IDSBaseMessage"16@0:8
@"NSArray"16@0:8
v24@0:8@"IDSEngramKeyStore"16
v60@0:8@16q24q32@40B48@52
v56@0:8@16q24q32@40@48
v84@0:8@16@24@32@40@48B56@60q68@76
v60@0:8@16@24@32q40@48B56
B36@0:8@16B24@?28
@"<IDSRegistrationCenterMessageDelivery>"
@"IDSPushHandler"
@"IDSEngramKeyStore"
@"IDSGetDependentRegistrationsCenter"
@"CUTDeferredTaskQueue"
v28@0:8@"IDSBTLinkManager"16B24
v32@0:8@"IDSBTLinkManager"16@24
v28@0:8@"IDSWPLinkManager"16B24
v32@0:8@"IDSWPLinkManager"16@24
v32@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24
v24@0:8B16B20
v48@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24@32@40
v40@0:8@16@24B32B36
B24@0:8B16B20
@44@0:8@16@24Q32S40
Q48@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24@32@40
v40@0:8Q16@24@32
v28@0:8@16c24
v36@0:8@16c24I28B32
v32@0:8@16c24B28
v48@0:8@16^i24^i32^i40
v40@0:8^Q16^Q24@32
@"IDSBTLinkManager"
@"IDSWPLinkManager"
[1025c]
^{__SCDynamicStore=}
v40@0:8@"IDSTTLCache"16@24@"NSString"32
v48@0:8@"IDSTTLCache"16@24@"NSString"32@?<v@?@>40
B40@0:8@"IDSTTLCache"16@24@"NSString"32
B24@0:8@"IDSTTLCache"16
@"RPCompanionLinkClient"
@"IDSTTLCache"
@68@0:8@16q24@32@40@48@56B64
Q20@0:8I16
Q24@0:8q16
v28@0:8d16B24
v44@0:8Q16@24C32I36B40
v32@0:8Q16@24
v40@0:8Q16@24I32B36
v52@0:8@16B24S28q32i40@44
B36@0:8@16@24I32
v28@0:8B16q20
q20@0:8C16
v64@0:8@16@24S32@36B44B48@52B60
@"<IDSUTunConnectionDelegate>"
@"IDSSocketPairConnection"
@"IDSLocalDeliveryQueue"
[3q]
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTPNRRequestSentInfo"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSDictionary"24
v28@0:8@"CTXPCServiceSubscriptionContext"16B24
@56@0:8@16@24@32@40@48
q24@0:8q16
@"<IDSPhoneNumberValidationStateMachineMessageDelivery>"
@"<IDSPhoneNumberValidationStateMachineLockdownManager>"
@"IDSPhoneNumberValidationModeArbiter"
@"<IDSPhoneNumberValidationStateMachineDeviceSupport>"
@"IDSPreflightStack"
@64@0:8@16@24@32@40@?48@?56
@"IMLockdownManager"
@"IDSDeviceHeartbeatCenter"
@"FTNetworkSupport"
v36@0:8C16@?20@28
v28@0:8C16@20
d24@0:8@16
I24@0:8@16
@?24@0:8@16
v36@0:8@16d24C32
v44@0:8@16@24@32I40
v44@0:8@16@24B32@?36
@32@0:8d16q24
@32@0:8q16d24
@"NSMultiReadUniWriteLock"
I24@0:8d16
v48@0:8@16@24@32B40B44
I32@0:8@16@24
v64@0:8@16@24@32@40B48B52@?56
v44@0:8I16@20@28@36
I40@0:8@16@24@32
I44@0:8@16@24@32B40
v28@0:8I16@20
d28@0:8I16@20
@"IDSQuickRelayAllocateMessage"
@"QRSelfAllocationArray"
@"QRStreamInfo"
@76@0:8@16@24@32B40@44^{?=SSIQI*}52@60@?68
@40@0:8@16@24^q32
@40@0:8@16@24^B32
B40@0:8@16@24^@32
B60@0:8@16@24Q32S40S44I48@52
B32@0:8@16S24S28
@76@0:8@16@24B32@36@44@52@60@?68
@72@0:8@16@24@32@40@48@56@?64
@80@0:8@16I24@28q36S44Q48S56I60@64B72B76
I20@0:8i16
v36@0:8@16q24B32
v48@0:8I16q20q28I36Q40
@40@0:8@16@?24@?32
@32@0:8q16@24
@"IDSServerBag"
v48@0:8@16@?24@?32@40
v56@0:8@16@24@?32@?40@48
v24@0:8@"CBCentralManager"16
v32@0:8@"CBCentralManager"16@"NSDictionary"24
v48@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSDictionary"32@"NSNumber"40
v32@0:8@"CBCentralManager"16@"CBPeripheral"24
v40@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSError"32
v36@0:8@16S24@28
v24@0:8@"CBPeripheralManager"16
v32@0:8@"CBPeripheralManager"16@"NSDictionary"24
v32@0:8@"CBPeripheralManager"16@"NSError"24
v40@0:8@"CBPeripheralManager"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheralManager"16@"CBCentral"24@"CBCharacteristic"32
v32@0:8@"CBPeripheralManager"16@"CBATTRequest"24
v32@0:8@"CBPeripheralManager"16@"NSArray"24
v36@0:8@"CBPeripheralManager"16S24@"NSError"28
v40@0:8@"CBPeripheralManager"16@"CBL2CAPChannel"24@"NSError"32
v24@0:8@"CBScalablePipeManager"16
v40@0:8@"CBScalablePipeManager"16@"NSString"24@"NSError"32
v32@0:8@"CBScalablePipeManager"16@"NSString"24
v32@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24
v40@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24@"NSError"32
@"CBCentralManager"
@"CBPeripheralManager"
@"CBScalablePipeManager"
@"CBPeripheral"
@"<IDSBTLinkManagerDelegate>"
@"IDSNanoRegistryPluginManager"
@24@0:8d16
r*24@0:8q16
v88@0:8@16@24@32@40@48@56q64@72@?80
v92@0:8@16@24@32@40@48@56q64@72@?80B88
v56@0:8@16@24q32q40@?48
v100@0:8@16@24@32@40@48@56q64@72@80@?88B96
v100@0:8@16@24@32@40@48@56@64q72q80B88@?92
v104@0:8@16@24@32@40@48@56@64q72q80B88@?92B100
v60@0:8@16@24q32q40B48@?52
v112@0:8@16@24@32@40@48@56@64@72q80q88B96@?100B108
@64@0:8@16@24^q32@40q48^q56
@72@0:8@16@24@32@40^q48q56^q64
@68@0:8@16@24q32@40q48B56^q60
@76@0:8@16@24@32@40q48q56B64^q68
v32@0:8@?16q24
v36@0:8@?16B24q28
v64@0:8@16@24@32@40@48q56
v28@0:8B16@?20
B32@0:8B16I20@?24
@"AVConference"
@"<_IDSSessionConnectionDelegate>"
v40@0:8@16d24q32
v28@0:8@16f24
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v44@0:8@16q24B32@36
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v32@0:8@16I24I28
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v40@0:8Q16Q24Q32
v32@0:8q16@?24
@"ENGroupContext"
v72@0:8@16@24@32@40@48@?56@?64
v56@0:8@16^@24^@32^@40@48
v56@0:8@16@24@32@?40@?48
v144@0:8@16@24@32@40@48B56@60B68B72@76@84B92@96@104q112B120B124@?128@?136
v76@0:8@16@24@32@40@48q56B64@?68
v80@0:8@16@24@32@40@48@56@?64@?72
v64@0:8@16@24@32@?40@?48@?56
v32@0:8@"IDSDAccount"16@"NSArray"24
@32@0:8@16@?24
B64@0:8@16@24@32@40@48@56
I28@0:8@16I24
v48@0:8q16@24@32q40
@"IDSRealTimeEncryptionIdentity"
@276@0:8@16@24@32@40@48@56B64@68B76B80B84@88B96@100B108@112@120q128@136@144@152B160@164B172B176B180B184B188@192@200B208@212@220@228@236B244@248B256B260B264B268B272
@52@0:8@16@24@32@40B48
@32@0:8B16q20I28
@40@0:8B16q20I28@32
@28@0:8I16@20
@40@0:8q16@24q32
v32@0:8d16q24
@36@0:8Q16C24^B28
@44@0:8Q16q24B32@36
@40@0:8Q16q24@32
@40@0:8@16@24q32
@48@0:8@16@24q32q40
@68@0:8@16@24q32q40B48q52^B60
v60@0:8@16@24@32@40B48@?52
v52@0:8@16@24@32B40@?44
@28@0:8^{__CFArray=}16B24
@48@0:8@16q24@32q40
@28@0:8B16q20
@36@0:8B16q20@28
@64@0:8Q16Q24q32@40B48B52@56
@72@0:8Q16Q24q32@40B48B52@56@64
@64@0:8@16q24Q32Q40@48@56
@56@0:8@16q24Q32Q40@48
v56@0:8@16@24B32B36@40@?48
v32@0:8@?16d24
v28@0:8@?16B24
@"IDSDatabase"
v52@0:8@16B24Q28Q36Q44
v48@0:8@16Q24Q32Q40
v68@0:8@16B24Q28Q36Q44Q52Q60
v52@0:8@16B24Q28Q36q44
v44@0:8@16B24Q28Q36
v76@0:8@16B24Q28Q36Q44Q52Q60Q68
v48@0:8Q16Q24Q32@40
v44@0:8@16Q24Q32I40
v32@0:8I16I20I24I28
v52@0:8Q16I24I28I32@36@44
v32@0:8Q16Q24
v52@0:8@16@24B32d36d44
v56@0:8Q16Q24Q32Q40Q48
v52@0:8@16q24B32d36q44
v32@0:8@"IDSDSession"16@?<v@?B>24
v32@0:8@"IDSDSession"16@?<v@?B@"NSData">24
@32@0:8@?16@24
@"NSDictionary"48@0:8@"NSDictionary"16@"NSArray"24@"NSString"32@"NSString"40
@56@0:8@16@24@32@40B48B52
@60@0:8@16@24@32@40B48B52B56
B48@0:8@16@24@32@40
@76@0:8@16@24@32@40^@48^@56@64B72
d44@0:8@16@24@32I40
B56@0:8@16@24@32@40@48
@44@0:8@16@24@32B40
B64@0:8@16@24@32@40B48B52@?56
B64@0:8@16@24@32@40@48@?56
v40@0:8@?16@24@32
v56@0:8@16@24@32@?40@48
@"<IDSPeerIDQueryHandler>"
@"IDSPersistentMap"
@"<IDSPeerIDPushHandler>"
@32@0:8@16i24B28
@36@0:8@16i24i28B32
^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={?=Q*}^{_CCCryptor}[404C]}S[1600C]i}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={?=Q*}^{_CCCryptor}[404C]}S[1600C]i}}16@0:8
v32@0:8Q16i24i28
v24@0:8*16
@"IDSGenericConnectionID"
@"IDSSockAddrWrapperPair"
@"IDSHCInfo"
@24@0:8@?16
@"IDSGenericConnection"
@"IDSDeviceConnectionInfo"
v24@0:8@"NSMutableString"16
@64@0:8d16d24d32d40d48q56
@40@0:8d16d24q32
v72@0:8r^v16Q24^{sockaddr=CC[14c]}32^{sockaddr=CC[14c]}40C48@52B60^B64
C60@0:8@16^{sockaddr=CC[14c]}24^{sockaddr=CC[14c]}32C40r^v44Q52
v56@0:8@16r*24@32@40@?48
v52@0:8@16@24i32@36@44
B32@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16@24
v56@0:8@16@24@32i40i44@?48
Q32@0:8@16^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}24
Q36@0:8@16^^{?}24i32
v40@0:8@16@?24@32
{SimpleNSStringToObjectTable="tableSize"i"elements"^{SimpleNSStringToObjectTableElement}"elementCount"i}
@"IDSLinkManager"
B64@0:8@"NSArray"16@"NSData"24@"NSString"32@"NSString"40@"IDSPeerIDQueryContext"48@?<v@?@"NSString"@"NSDictionary"@"NSString"B@"NSDictionary"B>56
v32@0:8@?<v@?@"NSString"@"NSDictionary"@"NSString"B@"NSDictionary"B>16@"NSString"24
B48@0:8@?16@24@32@40
^{NSMutableDictionary=#}16@0:8
v24@0:8^{NSMutableDictionary=#}16
@"FTMessageDelivery_DualMode"
^{NSMutableDictionary=#}
@"<IDSPeerIDDeviceSupport>"
@"<IDSPeerIDNetworkChangeNotifier>"
@"<IDSPeerIDQueryHandlerDelegate>"
@"<IDSPeerIDQueryHandlerDataSource>"
v40@0:8^@16^@24@32
v96@0:8@16@24@32@40B48@52B60d64@72q80@?88
v56@0:8@16q24@32@40@48
v40@0:8@?16d24@32
v68@0:8@16@24@32@40@48B56@?60
v88@0:8@16@24@32@40@48@56@64@72q80
v48@0:8q16@24q32@40
v100@0:8B16@20@28@36@44@52@60@68@76@84@?92
B108@0:8@16@24@32@40@48@56@64@72@80B88@92@100
@88@0:8@16@24@32@40@48@56@64B72B76@80
v52@0:8I16@20q28q36@44
v88@0:8@16@24@32@40@48@56q64q72@80
B40@0:8@16B24@28B36
B36@0:8@16B24@28
v76@0:8@16@24@32@40I48@?52@?60@?68
v44@0:8@16@24q32I40
v52@0:8@16@24q32@40I48
@?48@0:8@16@24@32@40
v48@0:8@"IDSEmailInterface"16@"NSString"24@"NSString"32@"IDSRegistration"40
v64@0:8@16@24q32q40@48@56
v36@0:8@16B24@?28
B32@0:8@16B24B28
@"<IDSAppleIDRegistrationCenterMessageDelivery>"
B24@0:8@"NSArray"16
@"IDSPairedDeviceKeychainSchema"
v56@0:8q16@24@32@40@48
v64@0:8q16@24@32@40B48B52@56
v56@0:8q16@24@32B40B44@48
v28@0:8@?16i24
B32@0:8@16Q24
B72@0:8@16@24@32@40@48I56I60I64S68
B24@0:8@?16
@"<IDSPairedDevicePersister>"
@"IDSPhoneUser"16@0:8
@"NSString"24@0:8@"IDSPhoneUser"16
v32@0:8@"NSString"16@"IDSPhoneUser"24
@"IDSAuthenticationCertificate"24@0:8@"IDSPhoneUser"16
v32@0:8@"IDSAuthenticationCertificate"16@"IDSPhoneUser"24
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
@"IDSPhoneUserStore"
@"IDSServer"
@"FTDeviceSupport"
@32@0:8B16B20B24B28
v40@0:8Q16Q24@32
v32@0:8@16Q24
v32@0:8@"NSStream"16Q24
@44@0:8@16B24@28@36
v48@0:8@16@24@32^v40
q44@0:8^v16Q24i32^B36
v24@0:8^{?=*QqqIBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}Si[8{?=*Si[12S]qCSCBBS{?=SSSSS}BI}]cci[0C]}16
@"CBScalablePipe"
B40@0:8@"NSString"16@"NSString"24@"NSString"32
@"IDSIDStatusQueryController"
v60@0:8@16@24@32@40B48@52
tcpssl
333333
fff?
1111111111111111
@@(#)PROGRAM:identityservicesd  PROJECT:IDSAgent-1000
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>abs-client</key>
<integer>772496756</integer>
<key>application-identifier</key>
<string>com.apple.identityservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>com.apple.BTServer.allowRestrictedServices</key>
<true/>
<key>com.apple.BTServer.appleMfgDataAdvertising</key>
<true/>
<key>com.apple.BTServer.appleMfgDataScanner</key>
<true/>
<key>com.apple.BTServer.le.att</key>
<true/>
<key>com.apple.BTServer.le.pipe</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.CoreTelephony.DataUsageInfo.allow</key>
<true/>
<key>com.apple.SystemConfiguration.SCDynamicStore-write-access</key>
<true/>
<key>com.apple.SystemConfiguration.SCPreferences-write-access</key>
<string>YES</string>
<key>com.apple.asd.client</key>
<string>6624379988</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.companionappd.connect.allow</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.coretelephony.Identity.get</key>
<true/>
<key>com.apple.gizmoappd.appmanager.allow</key>
<true/>
<key>com.apple.keystore.absinthe</key>
<true/>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mkb.usersession.info</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.mobilemail.mailservices</key>
<true/>
<key>com.apple.nano.nanoregistry.ids.plugin</key>
<true/>
<key>com.apple.networkd_privileged</key>
<true/>
<key>com.apple.private.MobileActivation</key>
<array>
<string>RequestReactivation</string>
<string>GetActivationState</string>
</array>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
<string>SerialNumber</string>
<string>InternationalMobileEquipmentIdentity</string>
<string>MobileEquipmentIdentifier</string>
<string>SysCfg</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.communicationsfilter</key>
<true/>
<key>com.apple.private.ids.remotecredentials</key>
<true/>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imtransferservice</key>
<true/>
<key>com.apple.private.kernel.global-proc-info</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/DevicePrivateKey</string>
<string>NULL/DeviceCertificate</string>
<string>NULL/ActivationPrivateKey</string>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.nehelper.privileged</key>
<true/>
<key>com.apple.private.network.interface-control</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.skywalk.register-kernel-pipe</key>
<true/>
<key>com.apple.private.skywalk.register-user-pipe</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceBluetoothPeripheral</string>
</array>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.sysdiagnose.service.xpc</string>
<string>com.apple.cloudd</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.rtcreportingd</string>
<string>com.apple.coreduetd.context</string>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.appconduitd.device-connection</string>
<string>com.apple.ProgressReporting</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.pisco.suinfo</string>
</array>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.telephony.cupolicy-monitor-access</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>fairplay-client</key>
<string>1004488730</string>
<key>keychain-access-groups</key>
<array>
<string>ichat</string>
<string>apple</string>
<string>lockdown-identities</string>
<string>com.apple.apsd</string>
</array>
<key>keychain-cloud-circle</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>identityservicesd</string>
</array>
</dict>
</plist>
