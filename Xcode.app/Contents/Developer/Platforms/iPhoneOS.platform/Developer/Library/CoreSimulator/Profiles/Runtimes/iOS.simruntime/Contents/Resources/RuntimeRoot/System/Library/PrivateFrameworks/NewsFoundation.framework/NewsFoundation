apple-internal-install
v8@?0
None
Graph
Singleton
@"NSString"16@?0Q8
<%@ %p: class=%@, scope=%@, pac=%@>
<%@ %p: protocol=%@, scope=%@, pac=%@>
<%@ %p: unsafe scope=%@, pac=%@>
-[NFDefinition withPrivateAccessInContainer:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-1345/feldsparfoundation/FeldsparFoundation/Container/NFDefinition.m
Definitions can only have access to a single private resolver. Unexpected results from overriding
source
TQ,N,V_source
T#,&,N,V_cls
protocol
T@"Protocol",&,N,V_protocol
factory
T@?,C,N,V_factory
scope
TQ,N,V_scope
canBeOverridden
TB,N,V_canBeOverridden
canBeNil
TB,N,V_canBeNil
validationBlock
T@?,C,N,V_validationBlock
configurationBlock
T@?,C,N,V_configurationBlock
privateAccessContainer
T@"<NFDefinitionContainer>",&,N,V_privateAccessContainer
%@:%@
NFContainerMissingDefinitionException
Missing defintion, key=%@
NFContainerDefinitionNotOverridable
Defintion not overridable, key=%@
NFContainerDefinitionNilFactoryException
Defintion does not allow nil, key=%@
NFContainerEnsuringNullableDefinitionException
Can not ensure a defintion that allows nil, key=%@
NFContainerDefinitionMismatchException
Defintion mismatch, key=%@
NFContainerCircularDependencyDetectedException
Circular dependency detected in container
{%p event=%@, fromState=%@, toState=%@, context=%@}
stateMachine
T@"NFStateMachine",&,N,V_stateMachine
fromState
T@"NFStateMachineState",&,N,V_fromState
toState
T@"NFStateMachineState",&,N,V_toState
event
T@"NFStateMachineEvent",&,N,V_event
context
T@"<NFStateMachineContextType>",&,N,V_context
Unavailable
Must create container with initWithAssemblies:
<%@, definitions=%@>
@"NFDefinition"8@?0
v32@?0@"NSString"8@"NFDefinition"16^B24
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
definitions
T@"NSMutableDictionary",&,N,V_definitions
pool
T@"NFContainerPool",&,N,V_pool
privateContainers
T@"NSMutableDictionary",&,N,V_privateContainers
resolver
T@"<NFResolver>",&,N,V_resolver
container
T@"NFContainer",&,N,V_container
privateContainer
T@"NFContainer",&,N,V_privateContainer
v24@?0@?<v@?@>8@?<v@?@"NSError">16
promise
T@"NFPromise",&,N,V_promise
resolve
T@?,C,N,V_resolve
reject
T@?,C,N,V_reject
com.apple.news.state.machine
T@"<NFResolver>",R,N,V_resolver
{%p state=%@, status=%ld, statusToken=%ld}
{%p state=%@, status=%ld, statusToken=%ld, states=%@, events=%@}
-[NFStateMachine addState:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-1345/feldsparfoundation/FeldsparFoundation/StateMachine/NFStateMachine.m
Attempting to register a state that already exists
-[NFStateMachine addEvent:]
Attempting to register an event that already exists
@8@?0
cannot fire event when state machine is not active
status
statusToken
event for name not found in state machine
eventName
event does not allow transition from current state
currentState
@"NFPromise"8@?0
@16@?0@8
-[NFStateMachine fireEventWithName:withContext:]_block_invoke
state machine did enter/exit is not allowed to throw errors as the state has already been alerted
v16@?0@"NSError"8
owner
T@,W,N,V_owner
states
T@"NSMutableDictionary",&,N,V_states
events
T@"NSMutableDictionary",&,N,V_events
state
T@"NFStateMachineState",&,N,V_state
TQ,N,V_status
lock
T@"NFMutexLock",&,N,V_lock
Tq,N,V_statusToken
v16@?0@"NFContainerPool"8
B16@?0@8
@24@?0^{NSMutableDictionary=#}8^{NSMutableDictionary=#}16
publicContainer
T@"<NFDefinitionContainer>",&,N,V_publicContainer
T@"<NFDefinitionContainer>",&,N,V_privateContainer
com.apple.news.promises.zalgo
com.apple.news.promises.zalgoIfMain
-[NFPromise init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-1345/feldsparfoundation/FeldsparFoundation/Promises/NFPromise.m
Do not call method
%@: %s
v16@?0@8
seal
T@"NFPromiseSeal",&,N,V_seal
v32@?0@"NSString"8@"NFContainerPoolObject"16^B24
singletons
T@"NSMutableDictionary",&,N,V_singletons
graph
T@"NSMutableDictionary",&,N,V_graph
depth
TQ,N,V_depth
drainDepth
TQ,N,V_drainDepth
objectGraphDrainingEnabled
TB,N,GisObjectGraphDrainingEnabled,V_objectGraphDrainingEnabled
onDrainBlocks
T@"NSMutableArray",&,N,V_onDrainBlocks
onDrainCopyPoolObjectGraphBlocks
T@"NSMutableArray",&,N,V_onDrainCopyPoolObjectGraphBlocks
poolPreparedForLockingGraph
TB,R,N,GisPoolPreparedForLockingGraph
%02x
-[NFPromiseSeal dealloc]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/FeldsparServices_Sim/Feldspar-1345/feldsparfoundation/FeldsparFoundation/Promises/NFPromiseSeal.m
pending promise is being deallocated
unexpected side effects of deallocating a seal with handlers
v32@?0Q8@16@"NSError"24
-[NFPromiseSeal seal:error:resolution:]
Seal must be pending to seal
value
T@,&,N,V_value
error
T@"NSError",&,N,V_error
TQ,N,V_state
handlers
T@"NSMutableArray",&,N,V_handlers
T@"NFMutexLock",R,N,V_lock
kNFReachabilityChangedNotification
alwaysReturnLocalWiFiStatus
TB,N,V_alwaysReturnLocalWiFiStatus
reachabilityRef
T^{__SCNetworkReachability=},N,V_reachabilityRef
{%p name=%@, from=%@, to=%@}
name
T@"NSString",C,N,V_name
T@"NSSet",&,N,V_states
destinationState
T@"NFStateMachineState",&,N,V_destinationState
fireBlock
T@?,C,N,V_fireBlock
{%p name=%@}
canTryBlock
T@?,C,N,V_canTryBlock
willExitBlock
T@?,C,N,V_willExitBlock
willEnterBlock
T@?,C,N,V_willEnterBlock
didExitBlock
T@?,C,N,V_didExitBlock
didEnterBlock
T@?,C,N,V_didEnterBlock
ownership
TQ,R,N,V_ownership
strongObject
T@,R,N,V_strongObject
weakObject
T@,R,W,N,V_weakObject
object
T@,R,N
NFRouterRouteToNonRoutable
Attempt to route to non-routable object, object=%@
init
source
class
scope
privateAccessContainer
stringWithFormat:
protocol
setScope:
setValidationBlock:
setConfigurationBlock:
setCanBeOverridden:
setCanBeNil:
alloc
initWithFormat:
setPrivateAccessContainer:
initWithClass:factory:
initWithProtocol:factory:
initWithUnsafeFactory:
description
inScope:
withValidation:
withConfiguration:
canBeOverridden:
canBeNil:
withPrivateAccessInContainer:
.cxx_destruct
setSource:
setCls:
setProtocol:
factory
setFactory:
canBeOverridden
canBeNil
validationBlock
configurationBlock
_canBeOverridden
_canBeNil
_source
_cls
_protocol
_factory
_scope
_validationBlock
_configurationBlock
_privateAccessContainer
exceptionWithName:reason:userInfo:
exceptionWithDefinitionKey:
exception
event
fromState
toState
context
initWithStateMachine:event:fromState:toState:context:
stateMachine
setStateMachine:
setEvent:
setFromState:
setToState:
setContext:
_stateMachine
_event
_fromState
_toState
_context
initWithFrameworkAssemblies:assemblies:
initWithPublicContainer:privateContainer:inPool:
countByEnumeratingWithState:objects:count:
assemblies
addObjectsFromArray:
initAsPrivateContainer
initWithContainer:privateContainer:
loadPublicContainer:privateContainer:
loadedContainer:
respondsToSelector:
pool
addObject:
definitions
registerClass:name:factory:
register:name:createDefinitionBlock:
registerProtocol:name:factory:
objectForKey:
setObject:forKey:
createProxyResolverForDefinition:
enumerateKeysAndObjectsUsingBlock:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
definitionForKey:
registerClass:factory:
registerProtocol:factory:
unsafeRegisterForKey:name:factory:
initWithAssemblies:
initWithFrameworkAssemblies:
validateDefinitionsWithProxyResolver:
resolver
setResolver:
setDefinitions:
setPool:
privateContainers
setPrivateContainers:
_resolver
_definitions
_pool
_privateContainers
container
privateContainer
setContainer:
setPrivateContainer:
_container
_privateContainer
initWithResolver:
promise
setPromise:
resolve
setResolve:
reject
setReject:
_promise
_resolve
_reject
initWithDomain:code:userInfo:
domain
isEqualToString:
code
fc_isStateMachineError:
fc_createStateMachineErrorForCode:userInfo:
resolveProtocol:
exceptionWithObject:
resolveRoutable:
name
dictionaryWithObject:forKey:
initWithOptions:
state
status
statusToken
states
events
isMainThread
setStatusToken:
setStatus:
activate
deactivate
owner
asVoid:
numberWithUnsignedInteger:
numberWithInteger:
dictionaryWithObjects:forKeys:count:
containsObject:
destinationState
canTry:withOwner:
lock
willExit:withOwner:
willEnter:withOwner:
setState:
didExit:withOwner:
firstly:
didEnter:withOwner:
thenOn:then:
errorOn:error:
unlock
alwaysOn:always:
fired:withOwner:
initWithState:withOwner:
activateIfNeeded
deactivateIfNeeded
addState:
addEvent:
fireEventWithName:withContext:
setOwner:
setStates:
setEvents:
setLock:
_status
_state
_owner
_states
_events
_lock
_statusToken
publicContainer
isPoolPreparedForLockingGraph
onDrainCopyPoolObjectGraph:
copyWithObjectGraphDrainingDisabled
linkDepth:
resolveClass:name:
resolve:name:validateBlock:
resolveProtocol:name:
ensure:name:
onDrain:
object
initWithObject:ownership:
enter:
currentObjectGraphResolver:
linkResolverWithLinkBlock:
resolveClass:
unsafeResolveForKey:name:
ensureClass:
ensureClass:name:
ensureProtocol:
ensureProtocol:name:
setPublicContainer:
_publicContainer
seal
resolve:
reject:
initWithValue:
initWithError:
setSeal:
dealloc
resolveOn:reject:resolve:
then:
error:
always:
_seal
copyWithZone:
asVoid
asDelay:onQueue:withValue:
asDelay:onQueue:withError:
asDelay:withValue:
asDelay:withError:
graph
singletons
depth
setDepth:
drain
onDrainBlocks
onDrainCopyPoolObjectGraphBlocks
count
drainDepth
setDrainDepth:
copy
setOnDrainBlocks:
setOnDrainCopyPoolObjectGraphBlocks:
isObjectGraphDrainingEnabled
setGraph:
setSingletons:
setObjectGraphDrainingEnabled:
_objectGraphDrainingEnabled
_singletons
_graph
_depth
_drainDepth
_onDrainBlocks
_onDrainCopyPoolObjectGraphBlocks
compare:
nf_object:isEqualToObject:
nf_compareObject:toObject:
dataUsingEncoding:
bytes
length
stringWithCapacity:
appendFormat:
nf_sha1
handlers
removeAllObjects
seal:error:resolution:
registerHandler:
error
value
setValue:
setError:
setHandlers:
_value
_error
_handlers
UTF8String
setReachabilityRef:
setAlwaysReturnLocalWiFiStatus:
reachabilityWithAddress:
stopNotifier
localWiFiStatusForFlags:
networkStatusForFlags:
reachabilityWithHostName:
reachabilityForInternetConnection
reachabilityForLocalWiFi
startNotifier
connectionRequired
currentReachabilityStatus
alwaysReturnLocalWiFiStatus
reachabilityRef
_alwaysReturnLocalWiFiStatus
_reachabilityRef
defaultCenter
postNotificationName:object:
performWithLockSync:
setFireBlock:
fireBlock
initWithName:transitionFromStates:toState:
onFire:
setName:
setDestinationState:
_name
_destinationState
_fireBlock
setCanTryBlock:
setWillExitBlock:
setDidExitBlock:
setWillEnterBlock:
setDidEnterBlock:
initWithName:
onCanTry:
onWillExit:
onDidExit:
onWillEnter:
onDidEnter:
canTryBlock
willExitBlock
willEnterBlock
didExitBlock
didEnterBlock
_canTryBlock
_willExitBlock
_willEnterBlock
_didExitBlock
_didEnterBlock
ownership
strongObject
weakObject
_ownership
_strongObject
_weakObject
*** Assertion failure: %s %s:%d %{public}@
NFDefinition
NFContainerException
NFContainerMissingDefinitionException
NFContainerDefinitionNotOverridableException
NFContainerDefinitionNilFactoryException
NFContainerEnsuringNullableDefinitionException
NFContainerDefinitionMismatchException
NFContainerCircularDependencyDetectedException
NFStateMachineTransition
NFContainer
NFDefinitionContainer
NSObject
NFRegistrationContainer
NFProxyContainer
NFPendingPromise
NFStateMachine
NFRoutable
NFRouter
NFProxyResolver
NFResolver
NFValidationResolver
NSError
NFPromise
Firstly
Void
NSCopying
Delay
NFContainerPool
NFAdditions
NFPromiseSeal
NFReachability
NFMutexLock
NFLocking
NSLocking
NFStateMachineEvent
NFStateMachineState
Private
NFContainerPoolObject
NFRouterException
NFRouterRouteToNonRoutable
@32@0:8#16@?24
@32@0:8@16@?24
@24@0:8@?16
@16@0:8
@24@0:8Q16
@20@0:8B16
@24@0:8@16
v16@0:8
Q16@0:8
v24@0:8Q16
#16@0:8
v24@0:8#16
v24@0:8@16
@?16@0:8
v24@0:8@?16
B16@0:8
v20@0:8B16
@"Protocol"
@"<NFDefinitionContainer>"
@56@0:8@16@24@32@40@48
@"NFStateMachine"
@"NFStateMachineEvent"
@"NFStateMachineState"
@"<NFStateMachineContextType>"
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NFDefinition"24@0:8@"NSString"16
@40@0:8#16@24@?32
@40@0:8@16@24@?32
@"NFDefinition"32@0:8#16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8#16@"NSString"24@?<@@?@"<NFResolver>">32
@"NFDefinition"32@0:8@"Protocol"16@?<@@?@"<NFResolver>">24
@"NFDefinition"40@0:8@"Protocol"16@"NSString"24@?<@@?@"<NFResolver>">32
@"NFDefinition"40@0:8@"NSString"16@"NSString"24@?<@@?@"<NFResolver>">32
@32@0:8@16@24
@"<NFResolver>"
@"NSMutableDictionary"
@"NFContainerPool"
@"NFContainer"
@"NFPromise"
B24@0:8q16
@32@0:8q16@24
@24@0:8@"Protocol"16
q16@0:8
v24@0:8q16
@"NFMutexLock"
@24@0:8#16
@32@0:8#16@24
@"<NFResolver>"24@0:8Q16
v24@0:8@?<v@?@?<v@?>>16
@32@0:8#16@"NSString"24
@32@0:8@"Protocol"16@"NSString"24
@32@0:8@"NSString"16@"NSString"24
v32@0:8#16@24
v32@0:8@16@24
v32@0:8#16@"NSString"24
v24@0:8@"Protocol"16
v32@0:8@"Protocol"16@"NSString"24
@40@0:8@16@24@32
@"NFPromiseSeal"
@24@0:8^{_NSZone=}16
@32@0:8d16@24
@40@0:8d16@24@32
^{NSMutableDictionary=#}16@0:8
v24@0:8^{NSMutableDictionary=#}16
^{NSMutableDictionary=#}
@"NSMutableArray"
B32@0:8@16@24
q32@0:8@16@24
v40@0:8@16@?24@?32
v32@0:8@16@?24
v40@0:8@16@24Q32
@"NSError"
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
v24@0:8^{__SCNetworkReachability=}16
q20@0:8I16
^{__SCNetworkReachability=}16@0:8
^{__SCNetworkReachability=}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@"NSString"
@"NSSet"
@32@0:8@16Q24
@(#)PROGRAM:NewsFoundation  PROJECT:FeldsparFoundation-1
