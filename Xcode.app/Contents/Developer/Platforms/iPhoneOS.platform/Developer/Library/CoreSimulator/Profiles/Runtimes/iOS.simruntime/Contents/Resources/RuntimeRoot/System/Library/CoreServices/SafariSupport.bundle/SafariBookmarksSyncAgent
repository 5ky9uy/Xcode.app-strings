v8@?0
com.apple.SafariBookmarksSyncAgent.Push
NewestLaunchedSafariBookmarksSyncAgentVersion
604.4
localMigrationState
Bookmarks Sync Agent State
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
com.apple.SafariBookmarksSyncAgent.ActivityCheckInQueue
v24@?0@"NSString"8@"NSError"16
Safari
v24@?0q8@"NSError"16
v24@?0@"WBSCloudBookmarksRemoteMigrationInfo"8@"NSError"16
v16@?0@"NSError"8
v24@?0@"NSArray"8@"NSArray"16
0.0.0
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
com.apple.icloud-container.
com.apple.SafariBookmarksSyncAgent
v24@?0@"CKSubscription"8@"NSError"16
v32@?0q8@"NSString"16@"NSError"24
v16@?0q8
v16@?0B8B12
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@?<v@?BB>8
v12@?0B8
com.apple.SafariBookmarksSyncAgent.XPC.ZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.PeriodicRemoteMigrationStateObserver
com.apple.SafariBookmarksSyncAgent.migration
Title
T@"NSData",R,C,N,V_key
keyID
T@"NSData",R,C,N,V_keyID
IdentityHash
MinimumAPIVersion
ParentAndPosition
ParentFolder
Position
Deleted
<None>
Update Remote
Update Local
Update Local Parent Or Position
Delete Local
Undelete Local
<%@>
DateAdded
DateLastViewed
ImageURL
PreviewText
+[CloudBookmark cloudBookmarkWithRecordName:inDatabase:]
+[CloudBookmark cloudBookmarkWithReparentedItem:updater:]
+[CloudBookmark cloudBookmarkToMigrateItemWithRecordName:inDatabase:updater:]
+[CloudBookmark _cloudBookmarkWithItem:]
+[CloudBookmark cloudBookmarkWithAddedRecord:inDatabase:]
v32@?0@"NSString"8@16^B24
v24@?0@"NSString"8@16
v32@?0@"NSString"8@"CloudBookmarkGeneration"16^B24
record
T@"CKRecord",R,N
recordType
T@"NSString",R,N
item
Tr^v,R,N,V_item
recordName
T@"NSString",R,C,N,V_recordName
parentRecordName
T@"NSString",R,C,N,V_parentRecordName
position
T@"CloudBookmarkPosition",&,N
state
Tq,N
duplicateHash
TQ,R,N
Move
Modify
Delete
Folder
Bookmark
cloudBookmarkAccountIdentityDidChange
cloudBookmarkAccountPropertiesDidChange
primaryAccount
account
T@"ACAccount",R,N
databaseAccessor
T@"<CloudBookmarkDatabaseAccessing>",R,N,V_databaseAccessor
dataclassEnabled
TB,R,N,GisDataclassEnabled
rootJSONObjectType
T#,R,N,V_rootJSONObjectType
deviceIdentifier
bookmarksRecordZoneID
T@"CKRecordZoneID",R,N
bookmarkStore
T@"CloudBookmarkStore",R,N,V_bookmarkStore
databaseRef
Tr^v,R,N,V_databaseRef
accountPropertiesStore
T@"CloudBookmarkAccountPropertiesStore",R,N,V_accountPropertiesStore
LastChangeID
LastServerChangeToken
DidNotSaveRecordsAfterMigration
supportsSecureCoding
TB,R
lastServerChangeToken
T@"CKServerChangeToken",&,N,V_lastServerChangeToken
didNotSaveRecordsAfterMigration
TB,N,V_didNotSaveRecordsAfterMigration
CloudBookmarksOverrideDeviceIdentifier
objectClass
T#,R,N,V_objectClass
generation
< %ld, %@ >
T@"NSString",R,N,V_deviceIdentifier
TQ,R,N,V_generation
isValid
TB,R,N
TitleURLAndIdentityHash
PreviewTextAndHasUserDefinedPreviewText
HasUserDefinedPreviewText
TitleAndIdentityHash
31742989
32414244
v32@?0@"NSString"8@"NSString"16^B24
q24@?0@"NSString"8@"NSString"16
q24@?0@"CloudBookmarkPosition"8@"CloudBookmarkPosition"16
hasUnverifiedMovedBookmarks
hasUndeletedRemovedBookmarks
numberOfMovedBookmarks
numberOfDeletedBookmarks
sortValues
dictionaryRepresentation
[ %@ ]
T@"NSArray",R,C,N,V_sortValues
T@"NSDictionary",R,N
v32@?0@"NSString"8@"NSSet"16^B24
v24@?0@"NSString"8^B16
@"NSString"16@?0@"NSString"8
v32@?0@"NSString"8Q16^B24
delegate
T@"<CloudBookmarkPositionGeneratorDelegate>",R,W,N,V_delegate
<%@: %p, record names: [ %@ ], before position: %@, after position: %@>
recordNames
T@"NSArray",R,C,N,V_recordNames
beforePosition
T@"CloudBookmarkPosition",R,C,N,V_beforePosition
afterPosition
T@"CloudBookmarkPosition",R,C,N,V_afterPosition
sortValue
changeID
{ %lld, %@, %lld }
Tq,R,N,V_sortValue
T@"NSString",R,C,N,V_deviceIdentifier
Tq,R,N,V_changeID
timeout
Td,N,V_timeout
_generation
_deviceIdentifier
BookmarkList
BookmarkLeaf
SyncRequirements
MinimumSyncAPIVersion
EncryptionInfo
MigrationState
MigratorDeviceIdentifier
safari_itemType
Tq,R,N
safari_recordName
safari_encodedSystemFieldsData
T@"NSData",R,N
safari_encodedRecordData
safari_bookmarkListRecord
TB,R,N,Gsafari_isBookmarkListRecord
safari_bookmarkLeafRecord
TB,R,N,Gsafari_isBookmarkLeafRecord
safari_syncRequirementsRecord
TB,R,N,Gsafari_isSyncRequirementsRecord
safari_minimumSyncAPIVersion
TQ,N,Ssafari_setMinimumSyncAPIVersion:
safari_encryptionInfoRecord
TB,R,N,Gsafari_isEncryptionInfoRecord
safari_migrationStateRecord
TB,R,N,Gsafari_isMigrationStateRecord
safari_migrationState
Tq,N,Ssafari_setMigrationState:
safari_migratorDeviceIdentifier
T@"NSString",&,N,Ssafari_setMigratorDeviceIdentifier:
safari_state
Tq,N,Ssafari_setState:
safari_minimumAPIVersion
TQ,N,Ssafari_setMinimumAPIVersion:
serverChangeToken
T@"CKServerChangeToken",&,N,V_serverChangeToken
clientChangeTokenData
T@"NSData",C,N,V_clientChangeTokenData
topBookmarkRecord
T@"CKRecord",R,N,V_topBookmarkRecord
migrationRecord
T@"CKRecord",R,N,V_migrationRecord
encryptionRecord
T@"CKRecord",R,N,V_encryptionRecord
bookmarkListRecords
T@"NSArray",R,C,N
bookmarkLeafRecords
allRecordIDs
deletedRecordIDs
Migration coordinator
CloudBookmarksDebugDelayInSecondsBeforeStealingRightToMigrate
v24@?0@"NSError"8@?<v@?>16
migrationState
namesOfLocalRecordsToDelete
T@"NSSet",R,C,N
DestinationDevice
TabURL
TabUUID
DestinationDeviceUUID
LastModified
DictionaryType
CloseTabRequest
<%@: %p; tabURL = "%@"; tabUUID = "%@"; destination device uuid = "%@";
requestUUIDString
T@"NSString",R,C,N
tabUUIDString
destinationDevice
T@"CKReference",R,N
destinationDeviceUUIDString
tabURLString
T@"CKRecord",R,N,V_record
wbsCloudTabCloseRequestDictionaryRepresentation
T@"NSDictionary",R,C,N
cloudBookmarkDidDetectBug
bugIDs
com.apple.Safari.CloudBookmarks
Errors
Request UUID: %@
RecordID: %@, Error: %@
v32@?0@8@"NSError"16^B24
None
Request UUID: %@; Partial errors: %@
safari_isMigrationStateRecordChangedError
safari_isCouldNotOpenDatabaseError
safari_isCloudKitMissingZoneError
safari_isUserDeletedZoneError
safari_isAtomicWriteError
safari_isCloudKitBatchTooLargeError
safari_isCloudKitExpiredChangeTokenError
safari_isUnrecoverableCloudKitError
CloudBookmarkStoreErrorDomain
Cloud Bookmark Migration State Check
Bookmarks
KeyID
ZoneSubscription
CloudTabs
CloudTabsZoneSubscription
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.internalQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.completionHandlerQueue
com.apple.SafariShared.WBSCloudBookmarksStore
Cloud Bookmark Subscription Request
v24@?0@"CKRecordID"8@"NSError"16
v24@?0@"NSDictionary"8@"NSError"16
v24@?0@"CloudBookmarksFetchResult"8@"NSError"16
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v24@?0Q8@"NSError"16
v24@?0@"CKRecord"8@"NSError"16
v16@?0@"CKRecord"8
B16@?0@"CKRecord"8
metadata_zone
v24@?0@"CKRecordID"8@"NSString"16
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
B16@?0@"NSError"8
includesMigrationRecordInSaveBatch
TB,N,V_threadUnsafeIncludesMigrationRecordInSaveBatch
localStorage
T@"<CloudBookmarkStoreLocalStorage>",R,N,V_threadUnsafeLocalStorage
bookmarkHashGenerator
T@"BookmarkHashGenerator",R,N
cloudTabsRecordZoneID
MigrationStateEncodedRecordData
migrationStateEncodedRecordData
T@"NSData",C,N
Sync coordinator
v20@?0q8B16
v16@?0@"WBSCloudBookmarksRemoteMigrationInfo"8
v16@?0@"NSTimer"8
@"CloudBookmark"16@?0^B8
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16q24
v16@?0@"CKRecordID"8
32548082
v32@?0@"CKServerChangeToken"8@"NSData"16@"NSError"24
EncodedCKRecordSystemFields
Generations
ModifiedAttributeMask
ExtraPositionData
default
IsSelectedFavoritesFolder
IsTabGroup
v16@?0@"NSString"8
T@"CKRecord",&,N,V_record
Tq,N,V_state
T@"CloudBookmarkPosition",&,N,V_position
minimumAPIVersion
TQ,N,V_minimumAPIVersion
positionDictionaryRepresentation
T@"NSDictionary",C,N
modifiedAttributeMask
TQ,N,V_modifiedAttributeMask
T@"CloudBookmarkPosition",R,N,V_position
v32@?0@"NSSet"8@"NSSet"16@"NSError"24
v24@?0@"NSSet"8@"NSError"16
Sync migration coordinator
(null)
hasAccountHash
changes
localBookmarks
domain
code
remoteMigrationStateError
remoteMigrationState
migratorDeviceIdentifier
AwaitingMigration
InProgress
Finished
Unknown
changeType
itemType
serverID
modifiedAttributes
hasSyncData
hasCKRecord
hasPosition
hasTitleGeneration
count
addCount
deleteCount
moveCount
modifyCount
summary
details
bookmarksCount
foldersCount
title
children
isFavorites
isTabGroup
folderType
bookmarkType
Regular
Favorites
ReadingList
BookmarksMenu
rootRecordName
T@"NSString",C,N,V_rootRecordName
parentGenerator
T@"CloudBookmarkSyncMigrationPositionGenerator",R,N,V_parentGenerator
T@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>",W,N,V_delegate
T@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>",W,N,V_delegate
v24@?0@"NSString"8@"NSString"16
T@"NSArray",R,C,N,V_changes
changeToken
T@,R,N,V_changeToken
movedRecordNames
T@"NSSet",R,C,N,V_movedRecordNames
deletedRecordNames
T@"NSSet",R,C,N,V_deletedRecordNames
parentRecordNamesToMovedChildRecordNames
T@"NSDictionary",R,C,N,V_parentRecordNamesToMovedChildRecordNames
Migration state lock arbiter property
Tr^v,R,N
databaseOpen
TB,R,N,GisDatabaseOpen
T@"<CloudBookmarkDatabaseLockArbiterDelegate>",W,N,V_delegate
TB,R,N,GisDatabaseOpen,V_databaseOpen
OwningDevice
IsShowingReader
IsPinned
ReaderScrollPositionPageIndex
pageIndex
ReaderScrollPosition
UUID
<%@: %p; title = "%@"; url = "%@"; uuid = "%@"; owning device uuid = "%@"; position = %@; isShowingReader = %d; readerScrollPositionPageIndex = %@; isPinned = %d>
owningDevice
owningDeviceUUIDString
urlString
T@"CloudBookmarkPosition",R,N
pinned
TB,R,N,GisPinned
showingReader
TB,R,N,GisShowingReader
readerScrollPositionDictionary
readerScrollPositionPageIndex
T@"NSNumber",R,N
wbsCloudTabDictionaryRepresentation
DeviceName
HasDuplicateDeviceName
IsEphemeralDevice
Capabilities
Tabs
CloudKitBookmarkSyncing
Device
B32@?0@"CloudTab"8Q16^B24
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; hasDuplicateName = %d; isEphemeralDevice = %d; tabs = (
    %@
    
deviceUUIDString
deviceName
hasDuplicateName
ephemeralDevice
TB,R,N,GisEphemeralDevice
lastModified
T@"NSDate",R,N
tabs
T@"NSArray",C,N,V_tabs
wbsCloudTabDeviceDictionary
CloudTabDevice
CloudTab
CloudTabCloseRequest
safari_cloudTabDeviceRecord
TB,R,N,Gsafari_isCloudTabDeviceRecord
safari_cloudTabRecord
TB,R,N,Gsafari_isCloudTabRecord
safari_cloudTabCloseRequestRecord
TB,R,N,Gsafari_isCloudTabCloseRequestRecord
server_change_token
com.apple.Safari.CloudBookmarks.CloudTabSQLiteStore
DELETE FROM cloud_tab_devices WHERE device_uuid = ?
DELETE FROM cloud_tabs WHERE tab_uuid = ?
DELETE FROM cloud_tab_close_requests WHERE close_request_uuid = ?
PRAGMA foreign_keys = ON
PRAGMA user_version
CREATE TABLE cloud_tab_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,has_duplicate_device_name BOOLEAN DEFAULT 0,is_ephemeral_device BOOLEAN DEFAULT 0,last_modified REAL NOT NULL)
CREATE TABLE cloud_tabs (tab_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_uuid TEXT NOT NULL,position BLOB NOT NULL,title TEXT,url TEXT NOT NULL,is_showing_reader BOOLEAN DEFAULT 0,is_pinned BOOLEAN DEFAULT 0,reader_scroll_position_page_index INTEGER,FOREIGN KEY(device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_tabs__device_uuid ON cloud_tabs (device_uuid)
CREATE TABLE cloud_tab_close_requests (close_request_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,destination_device_uuid TEXT NOT NULL,url TEXT NOT NULL,tab_uuid TEXT NOT NULL,FOREIGN KEY(destination_device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE TABLE metadata (key TEXT NOT NULL UNIQUE, value)
PRAGMA user_version = %d
SELECT value FROM metadata WHERE key = ?
DELETE FROM metadata WHERE key = ?
UPDATE metadata SET value = ? WHERE key = ?
INSERT INTO metadata (key, value) VALUES (?, ?)
DROP TABLE IF EXISTS cloud_tab_devices
DROP TABLE IF EXISTS cloud_tabs
DROP TABLE IF EXISTS cloud_tab_close_requests
DROP TABLE IF EXISTS metadata
VACUUM
SELECT device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices
SELECT system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices WHERE device_uuid = ?
INSERT OR REPLACE INTO cloud_tab_devices (device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified)VALUES (?, ?, ?, ?, ?, ?)
SELECT tab_uuid, system_fields, position, title, url, is_pinned, is_showing_reader, reader_scroll_position_page_index FROM cloud_tabs WHERE device_uuid = ?
q24@?0@"CloudTab"8@"CloudTab"16
INSERT OR REPLACE INTO cloud_tabs (tab_uuid, system_fields, device_uuid, position, title, url, is_showing_reader, is_pinned, reader_scroll_position_page_index)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid FROM cloud_tab_close_requests
INSERT OR REPLACE INTO cloud_tab_close_requests (close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid)VALUES (?, ?, ?, ?, ?)
Cloud Tab Data Fetching
Cloud Tab Data Saving
Cloud Tab Close Requests Saving
Cloud Tab Close Requests Deleting
Cloud Tab Devices Deleting
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabSavingQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabFetchingQueue
v16@?0@"CloudTabDevice"8
v16@?0@"NSData"8
v12@?0i8
Library/Safari/CloudTabs.db
DAV-
com.apple.CloudKitBookmarks.CyclerCloudBookmarksAssistant
https://fake-dav-id-for-testing/
Migration failed
Unable to acquire database lock
com.apple.SafariShared
CloudBookmarks
KeyedArchiver
DiagnosticExtension
__cpu_indicator_init
/BuildRoot/Library/Caches/com.apple.xbs/Sources/clang/clang-1000.2.21.14/src/projects/compiler-rt/lib/builtins/cpu_model.c
__cpu_model.__cpu_type < CPU_TYPE_MAX
__cpu_model.__cpu_subtype < CPU_SUBTYPE_MAX
alloc
init
currentRunLoop
dateWithTimeIntervalSinceNow:
runUntilDate:
setUpLogCollection
setDelegate:
standardUserDefaults
initWithUserDefaults:
initWithLocalStorage:
initWithBookmarkStore:databaseAccessor:accountStore:
initWithBookmarkStore:syncMigrationCoordinator:
migrationState
dictionaryWithObjects:forKeys:count:
dataWithPropertyList:format:options:error:
length
bytes
initWithBookmarkStore:accountStore:
registerMigrationXPCActivity:
initWithMachServiceName:
resume
_setUpPushConnection
_registerBookmarksZoneSubscriptionXPCActivityRegisteringIfNeeded:ignoreOngoingRegistration:qualityOfService:delay:
_registerCloudTabsZoneSubscriptionIfNeeded
_registerPeriodicRemoteMigrationStateObserverXPCActivityRegisteringIfNeeded:
defaultCenter
_didDetectPossibleBug:
addObserver:selector:name:object:
fetchUserIdentityInOperationGroup:withCompletionHandler:
_updatePushTopicSubscriptions
_userAccountDidChange:
_updateCloudTabsSyncCoordinatorAfterUserAccountChange:
clearCachedRecordZone
registerForPushNotificationsIfNeeded
postNotificationName:object:
_attemptSyncAndFallBackToMigrationIfPossibleForTrigger:
_isSyncEnabled
_pushTopic
arrayWithObjects:count:
setEnabledTopics:ignoredTopics:opportunisticTopics:
accountPropertiesStore
isDataclassEnabled
_userDidUpdateBookmarkDatabase
_performBookmarkSyncForTrigger:completionHandler:
safari_privacyPreservingDescription
sharedLogger
ckBookmarkSyncFinishedWithResult:error:
_sendNotificationForSyncResult:
_sendDetectedBugNotificationIfNeeded
safari_isUserDeletedZoneError
beginMigrationFromDAV
observeRemoteMigrationStateForSecondaryMigration
beginSyncingWithCompletionHandler:
numberWithInteger:
postNotificationName:object:userInfo:
createMigrationStateCheckOperationGroup
migratorDeviceIdentifier
fetchRemoteMigrationInfoInOperationGroup:withCompletionHandler:
_beginMigrationFromDAV
boolForKey:
initWithBookmarkStore:
collectDiagnosticsDataWithCompletionHandler:
saveTabsForCurrentDeviceWithDictionaryRepresentation:deviceUUIDString:completionHandler:
saveCloudTabCloseRequestWithDictionaryRepresentation:closeRequestUUIDString:completionHandler:
deleteDevicesWithUUIDStrings:completionHandler:
deleteCloudTabCloseRequestsWithUUIDStrings:completionHandler:
count
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
wbsCloudTabDeviceDictionary
deviceUUIDString
initWithUUIDString:deviceOrCloseRequestDictionary:
addObject:
wbsCloudTabCloseRequestDictionaryRepresentation
requestUUIDString
fetchDevicesWithCompletionHandler:
_cyclerAssistant
resetToDAVDatabaseWithCompletionHandler:
clearLocalDataIncludingMigrationState:completionHandler:
generateDAVServerIDsForExistingBookmarksWithCompletionHandler:
migrateToCloudKitWithCompletionHandler:
safari_cloudBookmarksDefaults
stringForKey:
mainBundle
safari_normalizedVersion
compare:options:
setObject:forKey:
localMigrationState
setLocalMigrationState:
databaseRef
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
setUsesOpportunisticPushTopic:
userDidUpdateBookmarkDatabase
userAccountDidChange:
fetchUserIdentityWithCompletionHandler:
fetchRemoteMigrationStateWithCompletionHandler:
saveTabsForCurrentDeviceWithDictionaryRepresentation:deviceUUIDString:
fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
userInfo
notificationFromRemoteNotificationDictionary:
subscriptionID
recordZoneSubscriptionIDForCloudBookmarksRecordZone:
isEqualToString:
_didReceiveBookmarksSubscriptionPushNotification
_didReceiveCloudTabsSubscriptionPushNotification
initWithEnvironmentName:namedDelegatePort:queue:
stringByAppendingString:
saveBookmarksZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchBookmarksZoneSubscriptionStatusCreatingZoneIfNeeded:inOperationGroup:withCompletionHandler:
saveCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
createSubscriptionRequestOperationGroupWithQualityOfService:
_saveCloudTabsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
clearCachedCloudTabsRecordZone
resetDatabaseWithCompletionHandler:
userAccountChanged
startCoordinatingMigrationWithCompletionHandler:
objectForKeyedSubscript:
doubleValue
_retryIntervalToRegisterBookmarksZoneSubscriptionWithNumberOfFailedAttempts:lastCKError:
code
safari_isCloudKitMissingZoneError
_saveBookmarksZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
_checkInXPCActivityWithIdentifier:criteria:registerIfNeeded:performBlock:
_migrateFromDAVWithCompletion:
initWithBookmarkStore:migrationCoordinator:
addObjectsFromArray:
removeObject:
allObjects
localizedStandardCompare:
sortedArrayUsingSelector:
removeAllObjects
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
databaseLockArbiterDidAcquireDatabaseLock:
listener:shouldAcceptNewConnection:
.cxx_destruct
_bookmarkStore
_xpcListener
_pushConnection
_usesOpportunisticPushTopic
_isSyncing
_isMigrating
_periodicallyObservingRemoteMigrationState
_didCheckAgentVersionOnDatabaseLock
_bookmarksSubscription
_databaseLockArbiter
_syncMigrationCoordinator
_migrationCoordinator
_bookmarkSyncCoordinator
_activityCheckInQueue
_numberOfFailedBookmarksZoneSubscriptionRegistrationAttempts
_ignoreOngoingBookmarksZoneSubscriptionRegistrationResult
_bookmarksZoneSubscriptionRegistrationTimer
_detectedBugIDs
_isRegisteringForCloudTabsZoneSubscription
_tabSyncCoordinator
_createEncryptionKeyData
_createEncryptionKeyIDDataUsingKey:
initWithKey:keyID:
copy
UTF8String
dataWithBytes:length:
appendBytes:length:
safari_descriptionWithoutSpaces
safari_minimumAPIVersion
safari_recordName
safari_isBookmarkListRecord
safari_isBookmarkLeafRecord
encryptedValuesByKey
reverseTransformedValue:
generateHashWithTitle:urlString:
isEqualToData:
UUID
getUUIDBytes:
verifyIdentityHashInBookmarkRecord:
keyID
_key
_keyID
componentsJoinedByString:
stringWithFormat:
initWithObjectClass:
positionInCloudBookmarkSyncDataFromData:
setHandler:
cloudBookmarkSyncDataFromData:
_initWithItem:syncData:
_initWithReparentedItem:updater:
_initWithItemToMigrate:updater:
record
clearAllGenerationsExceptState
incrementGenerationForKey:withDeviceIdentifier:
generationForKey:
encodedCloudBookmarkSyncData
_cloudBookmarkWithItem:
_updateGenerationsForChange:withDeviceIdentifier:
updateLocalItem
_initWithItem:
_initWithChange:updater:
safari_itemType
recordID
recordName
_initWithAddedRecord:forItem:
safari_folderTypeForRecordName:
_decodedSyncDataInData:
deviceIdentifier
_updateRecordParentAndPositionWithUpdater:
_initWithDeleteChange:updater:
_createRecordWithRecordName:updater:
setRecord:
_updateRecordWithChange:updater:
setState:
safari_setState:
safari_setGeneration:forKey:
dictionary
cloudBookmarkSyncData
safari_generationForKey:
isValid
jsonDictionaryTransformer
setPositionDictionaryRepresentation:
setGeneration:forKey:
position
safari_state
setMinimumAPIVersion:
_loadAttributesForKnownKeysIntoEmptyItemUsingRemoteRecord:
_updateRecordWithMissingAttributesWithUpdater:
allKeys
_updateGenerationsForAttributeKeys:withDeviceIdentifier:
_updateRecordWithModifiedAttributes:updater:
dealloc
modifiedAttributeMask
bookmarksRecordZoneID
initWithRecordName:zoneID:
recordType
_createRecordIDWithName:updater:
initWithRecordType:recordID:
initWithRecordID:action:
setPosition:
state
parentRecordName
modifiedOrLocalValueForKey:
setWithObject:
changedKeys
containsObject:
valueTransformerForAttributeKey:
transformedValue:
_createParentFolderReferenceWithRecordName:updater:
generateIdentityHashUsingUpdater:
identityHashKeys
knownKeys
generationKeyForKey:
safari_reverseTransformedValueOrNull:
setObject:forKeyedSubscript:
setModifiedAttributeMask:
positionForCloudBookmarkWithRecordName:
positionDictionaryRepresentation
safari_transformedValueOrNull:
isIdentityHashKey:
enumerateKeysAndObjectsUsingBlock:
canSaveIdentityHashAttributesInDictionary:
hasGenerationForKey:
_modifiedOrLocalIdentityHashWithUpdater:
resultFromMergingRecord:usingUpdater:isLocalUpdateOnly:
_resultByMergingMinimumAPIVersionWithRecord:
_resultByMergingStateWithRecord:shouldContinueMerge:
_resultByMergingParentAndPositionWithRecord:usingUpdater:
compare:
_transformedModifiedOrLocalValueForKey:isEncrypted:
_modifiedOrLocalParentReferenceWithUpdater:
minimumAPIVersion
safari_setMinimumAPIVersion:
positionForItemWithRecordName:inDatabase:
cloudBookmarkWithRecordName:inDatabase:
cloudBookmarkWithReparentedItem:updater:
cloudBookmarkToMigrateItemWithRecordName:inDatabase:updater:
updateSyncDataGenerationsWithChange:deviceIdentifier:
cloudBookmarkWithChange:updater:
cloudBookmarkWithAddedRecord:inDatabase:
duplicateHash
isDuplicateOfBookmark:
resultFromMergingRecord:usingUpdater:
item
_syncData
_remotelyModifiedAttributes
_item
_recordName
_parentRecordName
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
accountProperties
safari_boolForKey:
safari_primaryAppleAccount
_accountIdentityDidChange:
_accountPropertiesDidChange:
refresh
account
isEnabledForDataclass:
username
dataUsingEncoding:
safari_SHA1Hash
_setNeedsAccountHashCheck
setNeedsDataclassEnabledCheck
initWithAccountStore:databaseAccessor:
updateAccountHashIfNeeded
databaseAccessor
_accountStore
_dataclassEnabled
_needsDataclassEnabledCheck
_needsAccountHashCheck
_databaseAccessor
initWithRootJSONObjectType:
dataWithJSONObject:options:error:
safari_dataByCompressingData
safari_dataByDecompressingData
JSONObjectWithData:options:error:
defaultTransformer
jsonArrayTransformer
transformedValueClass
allowsReverseTransformation
rootJSONObjectType
_rootJSONObjectType
initWithBookmarkStore:database:accountPropertiesStore:
bookmarkStore
_databaseRef
_accountPropertiesStore
initForReadingFromData:error:
decodeObjectOfClass:forKey:
finishDecoding
name
databaseSyncDataWithData:
archivedDataWithRootObject:requiringSecureCoding:error:
encodedDatabaseSyncData
decodeInt64ForKey:
decodeBoolForKey:
encodeInt64:forKey:
encodeObject:forKey:
encodeBool:forKey:
supportsSecureCoding
databaseSyncDataInDatabase:
encodeWithCoder:
initWithCoder:
writeToDatabase:
nextChangeID
lastServerChangeToken
setLastServerChangeToken:
didNotSaveRecordsAfterMigration
setDidNotSaveRecordsAfterMigration:
_lastChangeID
_didNotSaveRecordsAfterMigration
_lastServerChangeToken
objectForKey:
initRequiringSecureCoding:
encodedData
objectClass
_objectClass
initWithDeviceIdentifier:generation:
decodeIntegerForKey:
encodeInteger:forKey:
copyWithZone:
incrementedGenerationWithDeviceIdentifier:
generation
_deviceIdentifier
_generation
setWithArray:
absoluteString
_insertBookmark:intoFolderWithRecordName:
removeObjectForKey:
_createBuiltInFolderWithRecordNameIfNeeded:
mutableCopy
minusSet:
_reorderChildrenOfTopBookmarkFolderGetLastPosition:
_recordNameOfAncestorToReparentForRecordName:verifiedRecordNames:
_localDatabaseContainsItemWithRecordName:getParentRecordName:
_insertBookmarkWithRecordName:intoExistingFolderWithRecordName:
_deleteTemporaryParentFolder
_bookmarksByVerifyingAndReparentingUnrootedBookmarksRememberOriginalParents:getLastValidPositionInRootFolder:
orderedSet
indexOfObject:
removeObjectsInRange:
_recordNameOfAncestorToReparentInLoop:
array
safari_minimumUsingComparator:
_reorderChildrenOfFolderWithServerSyncId:
_positionOfBookmarkWithRecordNameForFolderSorting:
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
lastObject
_lastValidPositionInRootFolder
_sortedRecordNamesWithChildIDs:getLastPosition:
initWithDatabase:
hasUnverifiedMovedBookmarks
hasUndeletedRemovedBookmarks
numberOfMovedBookmarks
numberOfDeletedBookmarks
addMovedBookmark:
didLocallyMoveBookmarkWithRecordName:
isDeletedRecordName:
didDeleteBookmarkWithRecordName:
bookmarksByVerifyingAndReparentingUnrootedBookmarksGetLastValidPositionInRootFolder:
verifyAndReparentUnrootedBookmarksRememberingOriginalParents
moveBookmarksIntoPlace
removeLocalItemsForDeletedRecordNames
_childRecordNamesToParentRecordNames
_movedBookmarkRecordNames
_deletedBookmarkRecordNames
_parentRecordNamesWithMovedChildren
_hasTemporaryParentFolder
_topBookmarkFolderRequiresReordering
null
initWithSortValue:deviceIdentifier:changeID:
initWithSortValues:
sortValues
firstObject
sortValue
positionSortValueWithSortValue:
objectAtIndexedSubscript:
isEqualToPositionSortValue:
subarrayWithRange:
initWithSortValue:parentSortValues:
arrayByAddingObject:
safari_arrayForKey:
initWithDictionaryRepresentation:
valueForKey:
isEqualToArray:
decodeObjectOfClasses:forKey:
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
dictionaryRepresentation
_sortValues
_stridesForSiblingRecords:
_generatePositionsForStrides:
addEntriesFromDictionary:
anyObject
_positionForRecordName:
_enumerateRecordNamesBeforeRecordWithName:usingBlock:
_enumerateRecordNamesAfterRecordWithName:usingBlock:
initWithRecordNames:beforePosition:afterPosition:
cloudBookmarkPositionGenerator:recordNameOfBookmarksBeforeRecordWithName:
cloudBookmarkPositionGenerator:recordNameOfBookmarksAfterRecordWithName:
removeObjectAtIndex:
recordNames
beforePosition
afterPosition
_generatePositionBetweenPosition:andPosition:
enumerateObjectsWithOptions:usingBlock:
deviceIdentifierForCloudBookmarkPositionGenerator:
nextChangeIDForPositionInCloudBookmarkPositionGenerator:
cloudBookmarkPositionGenerator:positionForRecordName:
initWithDelegate:
generatePositionsForChildRecordNamesGroupedByParentFolders:
positionForBookmarkWithRecordName:
delegate
_recordNamesToPositions
_delegate
_recordNames
_beforePosition
_afterPosition
safari_numberForKey:
safari_stringForKey:
longLongValue
numberWithLongLong:
changeID
_sortValue
_changeID
date
safari_isInCloudKitErrorDomain
timeIntervalSinceNow
scheduleRetryIfNeededForError:usingBlock:
timeout
setTimeout:
_dateRetryWasFirstRequested
_numberOfRetries
_timeout
integerValue
encodeSystemFieldsWithCoder:
unsignedIntegerValue
safari_minimumSyncAPIVersion
numberWithUnsignedInteger:
safari_migrationState
safari_migratorDeviceIdentifier
_safari_generationKeyForKey:
_safari_deviceIdentifierKeyForKey:
safari_initWithEncodedRecordData:
safari_encodedSystemFieldsData
safari_encodedRecordData
safari_isSyncRequirementsRecord
safari_setMinimumSyncAPIVersion:
safari_isEncryptionInfoRecord
safari_isMigrationStateRecord
safari_setMigrationState:
safari_setMigratorDeviceIdentifier:
safari_recordNameForFolderType:
bookmarkListRecords
bookmarkLeafRecords
deletedRecordIDs
allRecordIDs
addRecord:
addDeletedRecordID:
serverChangeToken
setServerChangeToken:
clientChangeTokenData
setClientChangeTokenData:
topBookmarkRecord
migrationRecord
encryptionRecord
_mutableBookmarkListRecords
_mutableBookmarkLeafRecords
_mutableDeletedBookmarkRecords
_serverChangeToken
_clientChangeTokenData
_topBookmarkRecord
_migrationRecord
_encryptionRecord
_hasValidDeviceIdentifier
unableToSilentlyMigrateToCKBookmarksWithReason:
_determineCourseOfActionFromLocalStateWithExternalCompletionHandler:
resetToNonMigratedStateWithCompletionHandler:
_attemptLocalMigrationBeforeTryingToBecomeResponsibleForMigrationWithExternalCompletionHandler:
_tryToBecomeResponsibleForMigrationWithExternalCompletionHandler:
_scheduleMigrationRetryIfNeededWithExternalCompletionHandler:
_transitionToMigrationState:
_tryToResumePendingRemoteMigrationFromMigrationInfo:externalCompletionHandler:
_performMigrationAsPrimaryDevice:withExternalCompletionHandler:
_tryToBecomeResponsibleForMigrationWithRetryManager:externalCompletionHandler:
safari_isUnrecoverableCloudKitError
safari_isCloudKitNonExistentRecordError
safari_isCloudKitBatchTooLargeError
safari_isCloudKitWriteConflictError
safari_onlyCloudKitPartialError
safari_isAtomicWriteError
_failedToBecomeResponsibleForMigrationDueToConflictWithExternalCompletionHandler:
_becameResponsibleForMigrationWithExternalCompletionHandler:
setRemoteMigrationState:deviceIdentifier:inOperationGroup:completionHandler:
lockForClient:
unlockForClient:
_handlePreemptionWithExternalCompletionHandler:
_resetToIdleAfterMigrationFailureWithExternalCompletionHandler:
serverModificationDate
deleteBookmarksZoneWithCompletionHandler:
_maximumNumberOfRetryAttempts
_delayBetweenRetryAttempts
setIncludesMigrationRecordInSaveBatch:
didStartMigratingToCKBookmarksAsPrimaryMigrator:localState:remoteState:
didFailToMigrateToCKBookmarksAsPrimaryMigrator:error:
didSuccessfullyMigrateToCKBookmarksAsPrimaryMigrator:
beginMigratingAsPrimaryMigrator:willBeginMigrationHandler:withCompletionHandler:
setMigrationState:
invalidateCachedDataclassEnabledness
_numberOfRetryAttempts
_cachedRemoteStateForAnalytics
doubleForKey:
dateByAddingTimeInterval:
collectAllRecordNamesInDatabase:
didReceiveRecordWithNameFromServer:
namesOfLocalRecordsToDelete
_namesOfLocalRecordsToDelete
safari_arrayByGroupingIntoArraysWithMaxCount:
_initWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
_initWithCKRecord:
zoneID
setTrackChanges:
_valueTransformerForTabURL
allocWithZone:
tabURLString
tabUUIDString
destinationDeviceUUIDString
modificationDate
cloudTabCloseRequestWithWBSCloudTabCloseRequestDictionaryRepresentation:closeRequestUUIDString:cloudTabsRecordZoneID:
cloudTabCloseRequestWithCKRecord:
cloudTabCloseRequestWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
destinationDevice
_record
errorWithDomain:code:userInfo:
domain
safari_isInCloudBookmarksErrorDomain
_safari_isOrContainsCloudKitErrorOfCodes:
safari_isCloudKitPartialFailureError
allValues
itemErrorFromError:forID:
safari_errorByAddingRequestUUIDInPrivacyPreservingUserInfo
safari_isMigrationStateRecordChangedError
safari_isCouldNotOpenDatabaseError
safari_isCloudKitExpiredChangeTokenError
safari_cloudKitPartialErrorForItemID:
safari_errorByAddingCloudKitPrivacyPreservingUserInfoForItemID:
safari_errorWithCloudBookmarksCode:userInfo:
safari_errorFromErrors:
migrationStateEncodedRecordData
containerWithIdentifier:
setSourceApplicationBundleIdentifier:
privateCloudDatabase
setQualityOfService:
setName:
setExpectedSendSize:
setExpectedReceiveSize:
setDefaultConfiguration:
createOperationGroupWithName:qualityOfService:
container
fetchUserRecordIDWithCompletionHandler:
_prepareBookmarksRecordZoneInOperationGroup:withCompletionHandler:
setMigrationStateEncodedRecordData:
setUpBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
initWithSubscriptionIDs:
setFetchSubscriptionCompletionBlock:
_scheduleOperation:inOperationGroup:operationQueue:
_saveRecordZoneSubscriptionForZoneID:subscriptionID:inOperationGroup:operationQueue:completionHandler:
_fetchRecordsOnInternalQueueWithServerChangeToken:inOperationGroup:result:completionHandler:
_fetchRecordsOnInternalQueueFromRecordZone:serverChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
setUpBookmarksRecordZoneInOperationGroup:withCompletionHandler:
deviceCount
_prepareBookmarksRecordZoneInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
initWithRecordZonesToSave:recordZoneIDsToDelete:
setModifyRecordZonesCompletionBlock:
_prepareBookmarksRecordZoneOnInternalQueueAfterExternalCompletionHandlersHaveBeenStashedInvalidatingCachedZone:createIfNeeded:retryManager:inOperationGroup:withCompletionHandler:
initWithRecordZoneIDs:
_setUpRecordZoneInOperationGroup:withCompletionHandler:
_setUpEncryptionInfoAndTopBookmarkInOperationGroup:withCompletionHandler:
_fetchEncryptionInfoInOperationGroup:withCompletionHandler:
fetchMinimumSyncAPIVersionInOperationGroup:withCompletionHandler:
setFetchRecordZonesCompletionBlock:
initWithRecordsToSave:recordIDsToDelete:
setModifyRecordsCompletionBlock:
_setUpEncryptionInfoAndTopBookmarkInOperationGroup:withRetryManager:completionHandler:
_hashGeneratorForEncryptionInfoRecord:
_saveOrLoadTopBookmarkInOperationGroup:withCompletionHandler:
_saveOrLoadRecord:inOperationGroup:withCompletionHandler:
_createEncryptionInfoRecordWithCompletionHandler:
_saveOrLoadTopBookmarkInOperationGroup:withRetryManager:completionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:mergeHandler:completionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:mergeHandler:completionHandler:
arrayByAddingObjectsFromArray:
_checkMigrationStateOnInternalQueueInRecord:error:
setPerRecordCompletionBlock:
safari_filterObjectsUsingBlock:
_addModifyRecordsOperations:inOperationGroup:operationQueue:
_fetchEncryptionInfoInOperationGroup:retryManager:completionHandler:
initWithRecordIDs:
setFetchRecordsCompletionBlock:
safari_encryptedDataForKey:
safari_dataForKey:
initWithZoneName:ownerName:
initWithRecordZoneIDs:configurationsByRecordZoneID:
setRecordChangedBlock:
setRecordWithIDWasDeletedBlock:
setRecordZoneFetchCompletionBlock:
setFetchRecordZoneChangesCompletionBlock:
initWithMigrationState:migratorDeviceIdentifier:serverModificationDate:
_fetchRemoteMigrationInfoInOperationGroup:withRetryManager:completionHandler:
_fetchMinimumSyncAPIVersionInOperationGroup:withRetryManager:completionHandler:
_createCloudTabsRecordZoneInOperationGroup:withRetryManager:completionHandler:
createCloudTabsRecordZoneInOperationGroup:completionHandler:
saveCloudTabsRecordBatch:createCloudTabsZoneIfMissing:inOperationGroup:completionHandler:
_saveCloudTabsRecordBatch:inOperationGroup:completionHandler:
_operationToDeleteCloudTabRecordIDs:completionHandler:
initWithZoneID:
_saveCloudTabsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
_recursivelyCancelDependentOperations:operationQueue:
_setUpRecordZoneInOperationGroup:withRetryManager:completionHandler:
setShouldSendContentAvailable:
initWithZoneID:subscriptionID:
setNotificationInfo:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
setModifySubscriptionsCompletionBlock:
setPreviousServerChangeToken:
_fetchRecordsOnInternalQueueFromRecordZone:retryManager:serverChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
_recordZoneIDOnInternalQueueForCloudBookmarksRecordZone:
_operationQueueForRecordZone:
operations
addDependency:
_addDependenciesForModifyRecordsOperation:operationQueue:
dependencies
isCancelled
cancel
setDatabase:
setGroup:
addOperation:
localStorage
includesMigrationRecordInSaveBatch
cloudTabsRecordZoneID
fetchAllBookmarkRecordsWithCompletionHandler:
fetchBookmarksRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleWithCompletionHandler:
saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
bookmarkHashGenerator
fetchEncryptionInfoWithCompletionHandler:
fetchMetadataZoneRecordsWithRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchCachedRemoteMigrationInfoWithCompletionHandler:
setMinimumSyncAPIVersion:completionHandler:
fetchCloudTabsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
deleteCloudTabRecords:inOperationGroup:completionHandler:
_internalQueue
_completionHandlerQueue
_threadUnsafeDatabase
_threadUnsafeBookmarksRecordZone
_bookmarksOperationQueue
_threadUnsafePrepareRecordZoneCompletionHandlers
_threadUnsafeBookmarkHashGenerator
_threadUnsafeSyncRequirementsRecord
_threadUnsafeMigrationStateRecord
_threadUnsafeCloudTabsRecordZone
_cloudTabsOperationQueue
_threadUnsafeIncludesMigrationRecordInSaveBatch
_threadUnsafeLocalStorage
dataForKey:
_defaults
_beginSyncingWithCompletionHandlers:
_scheduleRetryIfAbleWithCompletionHandlers:
openDatabase
closeDatabaseAndSave:
_resetSyncData
_didFailToSyncWithError:didOpenDatabase:
_bookmarkStoreDidFinishSetUp
scheduledTimerWithTimeInterval:repeats:block:
_processChanges
_continueSyncingAfterSyncDown:
_cleanUpAndCallCompletionHandlersWithError:
isDatabaseOpen
initWithDatabase:deviceIdentifier:
processChanges
changes
changeToken
movedRecordNames
parentRecordNamesToMovedChildRecordNames
_didSaveRecordsLocally
_nextRecordBatchGetRecordNamesToCloudBookmarks:withCloudBookmarkAllocationBlock:
_saveNextChangedRecordBatch
_saveRecordBatch:recordNamesToCloudBookmarks:successCompletionHandler:
sortUsingComparator:
_saveNextReparentedRecordBatch
size
_rebuildUndeletedBookmark:
_performSyncDownWithCompletionHandler:
_performSyncDownWithLastServerChangeToken:completionHandler:
_updateBookmarkWithRecord:
_handleExpiredChangeTokenError:completionHandler:
_didCompleteSyncDownAfterExpiredChangeTokenError
intersectsSet:
intersectSet:
unionSet:
_bookmarkForRemoteRecord:isNewBookmark:
_existingBookmarkForRemoteRecord:
_performSyncDown
_reparentAndSaveUnrootedBookmarks
_finishSyncing
_nextChangeID
_recordNameOfLastRecordInRoot
_syncingCompletionHandlers
_changeToken
_movedRecordNames
_unsavedChanges
_unsavedBookmarkFromLastBatch
_unsavedReparentedRecordNames
_lastKnownPositionOfLastItemInRootFolder
_namesOfRecordsSavedToTheServer
_namesOfRecordsMissingFromPreviousSyncDown
_namesOfRecordsExpectedOnSyncDown
_movedBookmarkManager
_positionGenerator
_expiredChangeTokenHandler
_isSynchronizing
_didReceiveSyncRequestWhileSyncing
_didResetSyncData
_retryTimer
setClass:forClassName:
safari_dictionaryForKey:
dictionaryWithObject:forKey:
_generations
_extraPositionData
_state
_position
_minimumAPIVersion
_modifiedAttributeMask
_prepareRecordsForMigration
_performMergingSyncDown
convertRecordsForMigration
_didSaveLocalRecords
_migrationDidCompleteWithError:
_generateAndSaveRecords
beginSyncDownKeepingRecordsMarkedAsDeletedLocally:withCompletionHandler:
beginFolderMigrationWithCompletionHandler:
_performSyncDownWithRetryManager:
_didFinishSyncDown
beginSyncDownWithCompletionHandler:
beginSavingReparentedBookmarksWithRecordNames:lastKnownPositionInRoot:completionHandler:
cloudBookmarkSyncMigrationSaveHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSaveHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSaveHandler:shouldSaveBookmark:
cloudBookmarkSyncMigrationSyncDownHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSyncDownHandler:didDeleteBookmarkWithRecordName:
beginMigrationWithCompletionHandler:
_completionHandler
_converter
_syncDownHandler
_saveReparentedBookmarksHandler
_hasSavedBookmarksLocally
_didFinishMigrationWithError:
_beginMigrationAsPrimaryMigrator:
_migrationConverter
_collectDiagnosticsDataWithRemoteMigrationInfo:remoteMigrationInfoError:completionHandler:
numberWithInt:
_changesDictionaryFromDatabase:
_localBookmarksDictionaryFromDatabase:
localizedDescription
_stringForRemoteMigrationState:
numberWithBool:
_traverseBookmarksInDatabase:parentFolderID:bookmarksCount:foldersCount:details:
_identifierForSensitiveString:
_stringForFolderType:
_stringForBookmarkType:
UUIDString
_sensitiveStringIdentifiers
setRootRecordName:
recordNameEnumerator
_generateAndSaveRemainingRecords
nextObject
positionForRecordName:
_didFailSavingWithError:
_didFinishSavingRecordsWithNames:
_nextCloudBookmarkToSave
_recordNameEnumerator
_generateRecordPositions
arrayWithObject:
_childRecordNamesInParentServerSyncId:
_recordNamesToGeneratePositionsForInRecordNames:inParentRecordName:getFolderRecordNames:getLastValidPosition:
_generatePositionsForChildRecordNames:withStartingPosition:
_existingPositionForRecordWithName:getIsFolder:
initWithParentPositionGenerator:
childRecordNamesForRecordName:
childFolderRecordNamesForRecordName:
rootRecordName
_recordNamesToChildRecordNames
_recordNamesToChildFolderRecordNames
_rootRecordName
parentGenerator
_folderRecordQueue
_currentChildRecordNames
_parentGenerator
_dequeueNextCloudBookmarkToSave
_saveRecordBatch:recordNamesToCloudBookmarks:
_recordByMergingRemoteRecord:withLocalRecord:recordNamesToCloudBookmarks:saveError:
_recordByMergingRemoteRecord:intoCloudBookmark:
recordIDForParentSyncServerID:
_unsavedProcessedBookmark
_namesOfRemainingRecordsToSave
_lastKnownPositionInRoot
_isSavingReparentedRecords
_updateLocalBookmarkWithCKRecord:
_didDeleteRecordWithName:
_didFinishSyncingReceivingRecordNames:error:
_cloudBookmarkForRecord:isNewBookmark:
_recordNamesToDelete
_createServerSyncIDForItem:
data
deletedRecordNames
_changes
_deletedRecordNames
_parentRecordNamesToMovedChildRecordNames
isMainThread
_databaseLockCount
_databaseOpen
initWithData:encoding:
URLWithString:
_initWithTabUUIDString:owningDeviceUUIDString:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_commonInitWithTabUUIDString:owningDeviceUUIDString:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_valueTransformerForTitleAndURL
title
urlString
positionTabAfterPosition:
isShowingReader
isPinned
readerScrollPositionPageIndex
_positionAfterPosition:
owningDeviceUUIDString
boolValue
readerScrollPositionDictionary
cloudTabWithWBSCloudTabDictionaryRepresentation:owningDeviceUUIDString:position:cloudTabsRecordZoneID:
cloudTabWithCKRecord:
cloudTabWithTabUUIDString:owningDeviceUUIDString:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTab:previousTabPosition:
owningDevice
wbsCloudTabDictionaryRepresentation
safari_dateForKey:
_initWithDeviceUUIDString:deviceName:hasDuplicateName:lastModified:isEphemeralDevice:encodedSystemFieldsData:cloudTabsRecordZoneID:
_setTabsFromWBSCloudTabDictionaryRepresentations:cloudTabsRecordZoneID:
_valueTransformerForDeviceName
deviceName
hasDuplicateName
isEphemeralDevice
lastModified
tabs
_updateTabsFromCloudTabs:
indexOfObjectPassingTest:
_positionAfterPosition:owningDeviceUUIDString:
setTabs:
cloudTabDeviceWithDictionaryRepresentation:deviceUUIDString:cloudTabsRecordZoneID:
cloudTabDeviceWithCKRecord:
cloudTabDeviceWithDeviceUUIDString:deviceName:hasDuplicateName:isEphemeralDevice:lastModified:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTabDevice:
_tabs
safari_isCloudTabDeviceRecord
safari_isCloudTabRecord
safari_isCloudTabCloseRequestRecord
_isDatabaseOpen
_openDatabase:deleteDatabaseFileOnError:
_closeDatabase
_resetDatabase
_migrateToCurrentSchemaVersionIfNeeded
_loadDevices
_loadTabsForDevice:
_loadCloseRequests
_loadDeviceWithUUIDString:
changedRowCount
_saveDevice:
_saveTab:
_saveCloseRequest:
_metadataDataValueForKey:
_setMetadataDataValue:forKey:
initWithURL:queue:
openWithAccessType:error:
_deleteDatabaseFileAndOpenDatabase:
setResourceValue:forKey:error:
enableWAL:
lastErrorMessage
close
defaultManager
safari_removeFileAtURL:error:
intAtIndex:
statement
invalidate
_createFreshDatabaseSchema
_setDatabaseSchemaVersion:
dataAtIndex:
_vacuum
stringAtIndex:
uncopiedDataAtIndex:
boolAtIndex:
doubleAtIndex:
dateWithTimeIntervalSinceReferenceDate:
initWithDatabase:query:
timeIntervalSinceReferenceDate
execute
reset
_cloudTabFromRow:deviceUUIDString:
initWithDatabaseURL:cloudTabsRecordZoneID:
openDatabaseIfNecessary
closeDatabaseWithCompletionHandler:
loadCloudTabDataWithCompletionHandler:
loadCloudTabDeviceWithUUIDString:completionHandler:
deleteRecordsWithPrimaryKeys:completionHandler:
saveCloudTabDevices:tabs:closeRequests:completionHandler:
getServerChangeTokenDataWithCompletionHandler:
setServerChangeTokenData:completionHandler:
_databaseURL
_cloudTabsRecordZoneID
_database
_databaseQueue
initWithDatabase:query:error:
handle
reportErrorWithCode:statement:error:
bindString:atParameterIndex:
fetch
bindData:atParameterIndex:
bindInt:atParameterIndex:
bindDouble:atParameterIndex:
bindInt64:atParameterIndex:
inMemoryDatabaseURL
_canCloseCloudTabStoreDatabase
_isResettingDatabase
_isDataclassEnabled
_continueSavingTabsForCurrentDevice
_shouldContinueSyncOperation
_mergeDeviceIntoDeviceFromSQLiteStoreIfNecessary
_saveDeviceToCloudKit
_deleteObsoleteTabRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingTabs
_finishedSavingDevice
_recordsForCloudTabDevice:
_saveNextRecordBatchCreatingCloudTabsZoneIfMissing:
_nextRecordBatchToSave
_clearCachedCloudTabsRecordZoneIfNecessaryForError:
_recordIDsFromDeviceOrTabUUIDStrings:
_updateSQLiteStoreFromCloudKitInOperationGroup:withCompletionHandler:
_continueSavingCloseRequest
_saveCloseRequestToCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingCloseRequest
_finishedSavingCloseRequest
_beginFetchingTabs
_continueFetchingTabs
_getServerChangeTokenFromSQLiteStore
_fetchChangesFromCloudKitCreatingCloudTabsZoneIfMissing:
_removeDeletedRecordsFromSQLiteStore
_saveModifiedRecordsToSQLiteStore
_setServerChangeTokenInSQLiteStore
_loadDevicesAndTabsFromSQLiteStore
_finishedFetching
_resetDatabaseAndRestartFetch
_didFetchModifiedRecord:
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudTabsZoneCompletedWithError:
_shouldResetDatabaseForError:
_deleteRecordsWithNames:inOperationGroup:completionHandler:
_continueDeleting
_deleteRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterDeletingRecords
_finishedDeletingRecords
_cloudTabStore
_resettingDatabaseCount
_savingQueue
_saveTabsOperationGroup
_tabSaveState
_saveTabsCompletion
_deviceToSave
_recordsToSave
_unsavedRecordFromLastBatch
_uuidStringsOfTabsToDelete
_saveCloseRequestsOperationGroup
_closeRequestSaveState
_saveCloseRequestCompletion
_closeRequestToSave
_saveCloseRequestError
_deleteCloseRequestsOperationGroup
_deleteDevicesOperationGroup
_deleteState
_currentDeleteOperationGroup
_deleteCompletion
_recordIDsToDelete
_deleteError
_fetchingQueue
_fetchTabsOperationGroup
_currentFetchOperationGroup
_fetchState
_fetchError
_isRefetchingAfterResettingDatabase
_fetchOperationType
_fetchDevicesCompletion
_updateSQLiteStoreFromCloudKitCompletion
_modifiedDevices
_modifiedTabs
_modifiedCloseRequests
_namesOfDeletedRecords
_fetchedDevices
_fetchedCloseRequests
stringByAppendingPathComponent:
fileURLWithPath:isDirectory:
_convertItem:
_cloudKitRecordNameForBookmarkDAVServerSyncId:
scheme
URLByDeletingPathExtension
lastPathComponent
_errorWithCode:
_descriptionForErrorCode:
Not updating push topic
User account changed
Updating push topic subscriptions with sync enabled = %d
Using opportunistic push topic
Using normal push topic
Not triggering sync since migration is in progress
*** Starting CloudKit bookmark sync for trigger: %lu
Transmitted Internet Records
*** CloudKit bookmark sync failed with result <%ld>: %{public}@
*** CloudKit bookmark sync finished with result: %ld
Attempting migration from DAV to CloudKit since we got back an explicit 'zone deleted' error
Fetching remote migration state
Simulating fetch of 'Unknown' migration state because Safari sync is disabled
Failed to fetch remote migration state: %{public}@
Fetched remote migration state: %ld
Asked to migrate, but bailing because migration is suppressed by the cycler
Bailing out from migration since migration was already in progress
Received a push notification
Ignoring push notification because notification is nil
Ignoring push notification because sync is disabled
Ignoring push notification %{public}@ because it does not match any known subscription
Set up push connection
Fetching Bookmarks zone subscription status failed with error: <%{public}@>.
Bookmarks zone subscription already exists
Saving Bookmarks zone subscription failed with error: <%{public}@>.
Saving Bookmarks zone subscription succeeded
Fetching CloudTabs zone subscription status failed with error: <%{public}@>.
CloudTabs zone subscription already exists
Saving CloudTabs zone subscription failed with error: <%{public}@>.
Saving CloudTabs zone subscription succeeded
Received a bookmarks subscription push notification
Will attempt sync/migration in response to trigger: %lu
Ignoring request to sync/migrate because migration is in progress
Ignoring request to sync/migrate because sync is in progress
Fetching remote migration state since we tried syncing while not locally migrated
Fetched remote migration state: %lu
Handling an existing CloudTabs zone subscription registration request. Ignoring the current request
Attempting to register CloudTabs zone subscription
Registering for CloudTabs zone subscription succeeded or we were already subscribed
Registering for CloudTabs zone subscription failed with error: <%{public}@>.
Received an iCloud Tabs subscription push notification
Attempting to sync bookmarks in response to an iCloud Tabs subscription push notification
*** Migration to CloudKit started
Checking In xpc activity with identifier %{public}s
Checked In xpc activity with identifier %{public}s
An activity with identifier %{public}s is already scheduled
No prior %{public}s activity was found. Registering a new one
No prior %{public}s activity was found and registration is not requested
Registering for Bookmarks zone subscription xpc activity. Register if needed: %d, ignore ongoing registration: %d delay: %lld
Attempting to save Bookmarks zone subscription
Saving Bookmarks zone subscription succeeded or we were already subscribed
Checking remote migration state for a chance to migrate as a secondary device
Remote migration state is set to finished; determining if secondary device migration can proceed
Attempting to migrate as secondary device
Not proceeding with migration because there is already an ongoing migration
Not proceeding with migration because this device was the primary migrator
No device has migrated yet; continuing to periodically check the remote migration state
Unsupported remote migration state returned; stopping the periodic remote migration check
Registering migration XPC activity
CloudKit bookmarks migration activity is running
Attempting to migrate to CloudKit
*** Migration to CloudKit finished with status: %d
Could not generate IdentityHash with empty title and URL
Could not generate IdentityHash with key %{public}@, keyID %{public}@
Could not generate IdentityHash for title %{private}@ and URL %{private}@, with key %{public}@, keyID %{public}@
Cannot verify identity hash of CKRecord with name %{public}@ because its minimumAPIVersion %ld is more recent than the version %ld of the client.
Valid identity hash for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identityHash: %{public}@, title: %{private}@
Valid identity hash for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identityHash: %{public}@, title: %{private}@, url: %{private}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@, title: %{private}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@, title: %{private}@, url: %{private}@
Asking the position for the root record makes no sense
Unknown item with record name: %{public}@
Item with record name does not have sync data: %{public}@
Creating CloudBookmarkLeaf to update locally with record name: %{public}@
Creating CloudBookmarkReadingListItem to update locally with record name: %{public}@
Creating CloudBookmarkList to update locally with record name: %{public}@
%{public}s Unknown item type %ld
Attempting to migrate record with name %{public}@ that does not exist in the local database.
Delete change %{private}@ to update does not have a valid record
Could not decode sync data in deleted change %{private}@ to update with record name: %{public}@.
No record object found in decoded sync data of deleted change %{private}@ to update with record name: %{public}@.
Updating state generation of deleted record with name: %{public}@, generation: %{public}@
Unknown type %ld for change %{private}@
Change of type %{public}@ for bookmark %{public}@ of type %{public}@ given without an associated item
BAChange %{private}@ is neither a folder change or bookmark change
Expecting CKBAItemTypeBookmark type for local item %p, but got %ld
Expecting CKBAItemTypeBookmark type for local item %{private}@, but got %ld
Expecting CKBABookmarkTypeReadingListItem type for local bookmark item %p, but got %ld
Expecting CKBABookmarkTypeReadingListItem type for local bookmark item %{private}@, but got %ld
Expecting CKBABookmarkTypeRegular type for local bookmark item %p, but got %ld
Expecting CKBABookmarkTypeRegular type for local bookmark item %{private}@, but got %ld
Expecting CKBAItemTypeFolder type for local item %p, but got %ld
Expecting CKBAItemTypeFolder type for local item %{private}@, but got %ld
Expecting %ld folder type for local folder item %p, but got %ld
Expecting %ld folder type for local folder item %{private}@, but got %ld
%{public}s Unknown CKRecord item type %ld
Local record with record name %{public}@ to reparent does not have a CKRecord stored in its sync data %{public}@
Reparenting record with record name: %{public}@
Delete change of type %{public}@ given without a Server ID
Assigning new record with record name %{public}@ to locally modified item, this could create an empty record on the server
Assigning new record with record name %{public}@ to locally added item
Deleted bookmark change %{private}@ does not have a valid record name.
Ignoring Delete Change object for built-in record with name: %{public}@.
Deleted bookmark change with record name %{public}@ does not have a CKRecord attached to it
Preparing record with name %{public}@ to mark as deleted on the server with generation: %{public}@
Encountered an item with no record name; ignoring it
CKRecord %{private}@ with invalid record name was received; ignoring it
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@ and position: %{public}@
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@
Remote record is missing generation for its parent and position fields
Local record to migrate %p has an invalid record name even though it should have one at this point
Local record to migrate %{private}@ has an invalid record name even though it should have one at this point
Creating %{public}@ to complement saved record with name: %{public}@
Migrated record %{public}@ known to the server has no position!
Creating %{public}@ to migrate record unknown to the server with name: %{public}@
Preparing %{public}@ record with name: %{public}@ for change of type %{public}@ to save to the server with updated keys: <%{public}@>
Attributes <%{public}@> are not included in the set of modified attributes to update the CKRecord despite being used to update the generation
Attributes <%{public}@> are included in the set of modified attributes to update the CKRecord despite not being used to update the generation
Trying to read the value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the value of ParentFolder on a record whose parent was not updated locally. Record name: <%{public}@>.
Trying to read the value of ParentFolder on a record that was deleted locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record whose Title or URL was not updated locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record that was deleted locally. Record name: <%{public}@>.
Saving record with name %{public}@ locally
Loading known keys <%{public}@> from remote record with name: %{public}@
Update generations of record %{public}@ with change of type %{public}@, updated keys <%{public}@>
Attributes <%{public}@> no longer need update despite those changes from a previous update not being validated
Record name: %{public}@, setting parent: %{public}@, generation: %{public}@, position: %{public}@
Non-built-in record with name %{public}@ does not have a position
Updating locally modified attributes <%{public}@>
%{public}@ attribute should have been saved during primary migration but has no generation locally.
Cannot save identity hash attributes since the local record is incomplete.
Will merge local and remote records. Record name: %{public}@
Did finish merging local and remote records with record name: %{public}@ due to state changes. Result: %{public}@
Parent and position were updated locally but were not saved to the server
Merging local and remote record fields.
No merging needed for key: %@ with local generation: %@, remote generation: %@
Attribute <%{public}@> expected to be saved to the server has an empty generation
Copy remote value into local record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Copy local value into remote record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Attribute %{public}@ was updated locally but was not saved to the server
Update IdentityHash on remote record.
Update local and remote generations.
Did finish merging local and remote records with record name: %{public}@. Result: %{public}@
Merging parent and position for record Name: %{public}@, local and remote generations are equal: %{public}@
Merging parent and position into local record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging parent and position into remote record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Did finish merging local and remote records with record name: %{public}@. Local record will be deleted because its minimum API version %ld is higher than the API version %ld supported by this client.
Merging minimum API version for record name: %{public}@, local and remote generations are equal: %{public}@
Local and remote minimum API versions differ, even though generations are the same. Record name: %{public}@.
Merging minimum API version into local record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging minimum API version into remote record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote state generations are equal even though their states are different. Local Deleted: %ld, generation: %{public}@, Remote Deleted %ld, generation: %{public}@
Server previously told us the record was deleted, now it is undeleted. Mark the record %{public}@ as moved and continue merging: local generation: %{public}@, remote generation: %{public}@
Local record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both local and remote records are deleted but remote record state generation needs to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both remote and local records are deleted and remote generation does not need to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote records are not deleted and have equal generations: %{public}@.
Updating local state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
Updating remote state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
BAChange %{private}@ is neither a folder change or a bookmark change
Checking account hash
Storing account hash
Account hash matches
Needs dataclass enabled check
Needs account hash check
JSON data could not be decompressed.
JSON data could not be parsed
Unexpected JSON root type, expecting: %{public}@ instead got: %{public}@
Trying to create CloudBookmarkDatabaseSyncData from data of size %lu
Successfully created CloudBookmarkDatabaseSyncData
Failed to create CloudBookmarkDatabaseSyncData with exception: %{public}@
Writing sync data of size %lu to database
Failed to read from cloud bookmark transformed value data: %{public}@
Failed to decode encrypted data with exception: %{public}@
Moving record %{public}@ into parent record %{public}@
Missing parent record name for bookmark with name %{public}@. Reparenting to root.
Marking record name %{public}@ as moved locally
Attempted to delete built-in record with name: %{public}@, ignoring
Marking record name %{public}@ as deleted
Could not insert record with name %{public}@ in root folder!
Could not insert record with name %{public}@ in built-in folder %{public}@!
Could not insert record with name %{public}@ in temporary folder!
Trying to move existing record with name %{public}@ into parent folder %{public}@ but the record does not exist locally!
Creating built-in folder with record name: %{public}@
The temporary folder contains %ld records that were not marked as deleted or moved to their final location. Record names: %{public}@
Record with name %{public}@ does not have a parent even though it was checked right before
Failed to insert %{public}@ into the root folder and for some reason the parent folder does not exist or creates a cycle!
Did finish checking hierarchy consistency, will move remaining records into their final location
Will move record %{public}@ into parent %{public}@
Could not move %{public}@ into folder %{public}@ even though all cycles and broken hierarchies should have been detected and fixed beforehand. Moving to the root.
Failed to insert %{public}@ into the root folder after failing to insert it into %{public}@, apparently there is no hierarchy to speak of.
Already verified parent chain fo record with name %{public}@
Checking parent chain of record with name %{public}@
Moved bookmark with record name %{public}@ was actually not saved to the database!
Parent %{public}@ was deleted, reparenting %{public}@
Loop detected, reparenting %{public}@ in list %{public}@
Parent %{public}@ is not in the database, reparenting %{public}@
Fixing order in local storage based on CloudKit positions
Record name %@, position: %@
Reordering children of root folder
Did finish reordering children of root folder
No children to reorder in folder with Server Sync ID: %@
Reordering children of record with Server Sync ID: %{public}@
Did finish reordering children of record with Server Sync ID: %{public}@
Removing %lu local items that were deleted on the server
Generate positions for children of record %{public}@, strides: %{public}@
Delegate returned nil position for record with name: %{public}@, we should never ask for the position of a record known to not have one!
Operation failed due to error %{public}@; not retrying because retry interval (%f seconds) exceeds timeout (%f seconds)
Will retry operation in %f seconds due to error %{public}@
Failed to read from encoded record data: %{public}@
Failed to get a valid device identifier to start coordinating migration.
Not migrating because Safari sync is disabled
Cannot read local migration state for migration due to invalid device identifier.
Not migrating because we've already migrated
Will attempt secondary migration
Will attempt primary migration
Failed to acquire lock on the database to read the migration state
Determining eligibility for local-only migration
Cannot determine eligibility for local-only migration due to invalid device identifier.
Bailing out from secondary migration without fetching remote migration info because Safari sync is disabled
Bailing out from secondary migration eligibility determination due to deallocation
Bailing out from secondary migration because Safari sync is disabled
Received an error fetching remote migration state: %{public}@; will attempt to become responsible for migration
Not eligible for local-only migration; will attempt to become responsible for migration
Remote migration pending; will decide whether we are responsible for resuming migration or should preempt the migrator
Performing local-only migration
Attempting to become responsible for migration by pushing state to the server
Cannot become responsible for migration due to invalid device identifier.
Bailing out from primary migration eligibility determination due to deallocation
Failed to become responsible for migration due to unrecoverable error: %{public}@
Failed to become responsible for migration due to CloudKit write error: %{public}@
Record zone unexpectedly deleted or missing; bailing out of primary migration
Migration coordinator retry limit exceeded
Pushed migration state successfully; assuming we are now responsible for migration
Bailing out from primary migration because Safari sync is disabled
Unable to lock backing store; bailing out from primary migration
Failed to push migration state because some other device modified it first; aborting
Cannot resume pending remote migration due to invalid device identifier
Received a migrationInfo with nil device identifier; will continue evaluating eligibility to steal right to migrate
Migration record indicates that we are the migrating device; attempting to resume migration
Not stealing right to migrate since no last modification date was stored in the migration record
Not stealing right to migrate since migration state was updated recently by another device
Deleting existing record zone in preparation for stealing right to migrate
Something went wrong deleting the existing record zone; bailing out: %{public}@
Stealing right to migrate due to migration timeout
Exceeded maximum migration retry limit
Scheduling migration retry
Starting PRIMARY migration
Starting SECONDARY migration
Migration failed with error %{public}@; resetting local and remote migration state
Migration succeeded
Unable to set remote migration state to %lu due to error: %{public}@; resetting local migration state, will attempt retry
Migration coordinator transitioning from state %zd to state %zd
*** Failed to instantiate CloudKit database!
Fetching user identity
Failed to fetch user identity due to missing zone: %{public}@
Attempting to fetch user record ID
Failed to fetch user record ID with error: %{public}@
Successfully fetched user record ID
Clearing cached record zone
Fetching Bookmarks zone subscription
Bailing out from fetching Bookmarks zone subscription due to deallocation
Failed to fetch Bookmarks zone subscription status due to missing zone: %{public}@
Fetching Bookmarks zone subscription by ID
Failed to fetch Bookmarks zone subscription by ID with error: %{public}@
Successfully fetched Bookmarks zone subscription
Saving Bookmarks zone subscription
Bailing out from saving Bookmarks zone subscription due to deallocation
Failed to save Bookmarks zone subscription due to missing zone: %{public}@
Fetching all records.
Fetching record changes for Bookmarks zone
Bailing out fetching record changes due to deallocation
Failed to fetch record changes due to missing zone: %{public}@
Fetching record changes with server change token %{public}@.
Saving record batch of size: %lu
Bailing out from saving record batch due to deallocation
Failed to save record batch due to missing zone: %{public}@
Attempting to delete bookmark zone
Bookmark zone deletion failed with error: %{public}@
Successfully deleted bookmark zone
Preparing bookmarks record zone, invalidateCachedZone: %d, createIfNeeded: %d
Cached record zone already present; nothing to do
Fetching record zone anew from CloudKit
Bailing out from zone setup due to deallocation
Zone setup retry limit exceeded
No existing record zone found
Will attempt to set up zone from scratch
Bailing out without setting up zone
Failed to fetch minimum sync API version when setting up record zone; bailing
*** Minimum sync API version is too new (%lu, our current version is %lu)
Attempting to save/load record
Failed to save/load record with error: %{public}@
Successfully saved/loaded record
Attempting to save/load encryption record
Failed to save/load encryption record due to unrecoverable error: %{public}@
Failed to save/load encryption record due to unexpected and unrecoverable write error: %{public}@
Record zone disappeared while setting up encryption information; bailing
Bailing out from encryption record setup due to deallocation
Encryption record retrieval retry limit exceeded
Attempting to save/load top bookmark
Failed to save/load top bookmark record due to unrecoverable error: %{public}@
Failed to save/load top bookmark record due to unexpected and unrecoverable write error: %{public}@
Record zone disappeared while setting up top bookmark; bailing
Bailing out from top bookmark record setup due to deallocation
Top bookmark retrieval retry limit exceeded
Saving record batch with %lu records
Failing save of record batch since migration record disappeared
Failed to save record due to unrecoverable error: %{public}@
Received batch too large error for an individual record change; bailing out
Failed to save record due to unexpected error: %{public}@
Failed to save record due to unexpected error outside the CKErrorDomain: %{public}@
Failed to save record due to CloudKit error which could not be handled: %{public}@
Will attempt to resave migration record due to recoverable error
Failed to save migration record: %{public}@
Will save merged record
Will retry save with updated batch after error: %{public}@
Batch record save operation completed but failed to save records due to unrecoverable error: %{public}@
Batch record save operation completed but failed to save migration record at end of batch save
Batch record save operation completed but bailing out from batch save due to previously cancelling the request
Batch record save operation completed but now retrying updated batch
Batch record save operation completed but server rejected the smallest batch we can send; bailing out
All attempts at re-batching record save failed
Attempting to re-batch record save
Batch record save operation completed but we need to re-batch
Modify records operation failed due to timeout of retryable error: %{public}@
Attempting to retry batch save request
Record batch save retry limit exceeded
Creating encryption record
Attempting to fetch encryption record from CloudKit
Encryption record fetch failed due to deallocation with error <%{public}@>.
Encryption record fetch retry limit exceeded
Encryption record fetch failed: %{public}@
Successfully fetched encryption record
Starting fetch of remote migration state
Failed to fetch remote migration state with error: %{public}@
Remote migration state fetch operation completed
Fetch remote migration state failed <%{public}@>.
Record zone disappeared while fetching remote migration state; bailing
Fetch remote migration state failed due to deallocation with error <%{public}@>.
Remote migration state retrieval retry limit exceeded
Fetch migration state failed <%{public}@>.
Enqueuing request to fetch remote migration state
Failed to set remote migration state due to missing zone: %{public}@
Completed operation to try to set remote migration state to %ld
Failed to set remote migration state to <%li>: %{public}@
Enqueuing request to set remote migration state to %ld
Minimum sync API version fetch operation completed
Fetch minimum sync API version failed due to deallocation
Minimum sync API version fetch retry limit exceeded
Fetch minimum sync API version failed <%{public}@>.
Failed to set minimum sync API version due to failure to set up record zone: %{public}@
Completed operation to try to set minimum sync API version to %ld
Failed to set minimum sync API version to <%li>: %{public}@
Enqueuing request to set minimum sync API version to %ld
Fetching CloudTabs zone subscription
Failed to fetch CloudTabs zone subscription by ID with error: %{public}@
Successfully fetched CloudTabs zone subscription
Saving CloudTabs zone subscription
Bailing out from saving CloudTabs zone subscription due to deallocation
Saving CloudTabs zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudTabs zone subscription because zone couldn't be created
Saving CloudTabs zone subscription after creating zone
Attempting to create CloudTabs zone before retrying save
Retrying save after creating CloudTabsZone
No records to delete.
Deleting %lu records.
Grouping delete requests for %lu objects into %lu batches
Deleting records failed: %{public}@
Clearing cached CloudTabs record zone
Creating CloudTabs zone
Failed to create CloudTabs zone with error: %{public}@
Bailing out of creating CloudTabs zone due to deallocation
Retrying creation of CloudTabs zone
Waiting to retry creation of CloudTabs zone
Zone creation retry limit exceeded
Successfully created CloudTabs zone
Modify records operation failed due to deallocation with error %{public}@
Error occurred deleting records, canceling dependent operations: %{public}@
Finished %@
Attempting to save new record zone
Failed to set up new record zone: %{public}@
Bailing out of record zone setup due to deallocation
Successfully set up new record zone
Attempting to save zone subscription for zone: %{public}@
Someone deleted the migration record during migration with error: %{public}@
Migrator device identifier changed
Migrator device identifier changed from %@ to %@
Migration state changed from %ld to %ld
Internal-only _fetchRecordsWithServerChangeToken called!
Record changed: %@
Record of type %{public}@ deleted: <%@>
Bailing out from record fetch due to deallocation with error %{public}@
Record fetch retry limit exceeded
Fetch record changes failed: %{public}@
Fetch records from record zone operation completed for record zone %ld
Fetch record zone changes operation failed: %{public}@
Enqueuing request to fetch records from record zone %ld
Enqueuing %lu modify records operations
Sync coordinator will begin syncing
Already synchronizing; ignoring request to sync
Attempting to start synchronization
Discontinuing sync because a retry has already been scheduled
Discontinuing sync because user is not signed in
Could not create BADatabase to synchronize
Device identifier is empty
Trying to open database after another client already did
Reading migration state %lu
Discontinuing sync since local migration has not yet completed
Discontinuing sync since local migration state cannot be read
Database sync data is unreadable, reset all sync data and attempt a migration again
Discontinuing sync because account hash differed
Discontinuing sync because bookmarks Safari sync is disabled
Beginning synchronization
Failed to set up Bookmarks Record Zone with error: %{public}@
Failed to fetch (or received invalid) remote migration state record with error: %{public}@
Scheduling retry #%d in %.1fs.
Discontinuing sync after attempting maximum number of retries
*** Resetting sync data
Bookmark Store setup done, opening database and processing changes
Failed to open database after finishing sync coordinator setup
Records were not saved locally, attempt merging to generate Add changes
Finish syncing
Sync coordinator failed to sync bookmarks with error: %{public}@
Database is unlocked despite having unlocked it before entering this method
Retrying sync after receiving synchronization request during synchronization
Not retrying sync after receiving synchronization request during sync since previous sync failed
Syncing done, calling completion handler
Number of processed changes %lu, locally moved records: %lu, change token: %{public}@
Performing hierarchy check for moved records, number of moved records: %lu, number of deleted records: %lu
Discontinuing sync because bookmarks dataclass was disabled during sync
Done saving all record changes
Record %{public}@ was deleted remotely
Did fail to save record batch with error: %{public}@
Error received while syncing down: %{public}@
Sync coordinator finished sync down
Performing sync down with last server change token: %{public}@
Did finish fetching records between server change token: %{public}@ and server change token: %{public}@
None of the %ld records sent to be saved to the server were received on sync down. Missing records: %{public}@
Did not receive %ld records on sync down out of the %ld records sent to be saved. Missing records: %{public}@
Did receive %ld records in current sync down that were supposed to be retrieved in the previous one. Received records: %{public}@
Change token is expired; trying a full sync down.
Successfully completed full sync down after expired change token error
Record %@ was not seen during sync down after expired change token error; marking it for deletion
Record %@ has MinimumAPIVersion %lu and will be deleted locally
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server before.
Record %@ does not exist locally and is deleted remotely
Has unsaved changes; saving next batch.
Have not performed a sync down yet; doing so now
Unrooted moved bookmarks are present; will reparent
Failed to decode _CloudBookmarkSyncDataForPositionDecoding with exception: %{public}@
Failed to decode CloudBookmarkSyncData with exception: %{public}@
Sync migration converter beginning migration
Saving bookmarks
Sync migration converter finished migration and sync down
Begin performing sync down while merging records
Did fail to perform merging sync down with error: %{public}@
Did finish merging sync down, temporarily reparent and sort records in case we have cycles or unrooted records in the hierarchy
Did finish reparenting, perform deduplication keeping records with sync data
Did finish deduplication keeping records with sync data, begin converting and saving remaining records
Failed to convert local records with error: %{public}@
Did finish converting and saving remaining records
Perform post-migration sync down
Failed to sync down after migration: %{public}@
Zone deleted during migration conversion; bailing
Bailing from sync down due to deallocation with error %{public}@
Sync migration converter retry limit exceeded
None of the %ld records saved to the server were retrieved on sync down. Missing records: %{public}@
Did finish post-migration sync down
Performing post-migration moved records verification
No records need to be reparented
Did fail to reparent unrooted bookmarks after migration with error: %{public}@
Did finish reparenting unrooted records
Fetching local migration state from database (isMigrating: %d)
Setting local migration state in database to %ld (isMigrating: %d)
Sync migration coordinator starting PRIMARY migration
Sync migration coordinator starting SECONDARY migration
Sync migration coordinator failed due to migration unexpectedly being in progress
Database was already open by another client, could not open database
Begin performing first deduplication
Did finish performing first deduplication
Starting migration conversion as primaryMigrator = %d
Migration conversion failed with error: %{public}@
Migration conversion succeeded
Sync migration coordinator did fail to migrate with error: %{public}@
Sync migration coordinator did finish migrating.
Sync migration post-processing handler called
Did finish migration, perform last deduplication
Did finish last deduplication
Failed to serialize bookmarks JSON with error: %{public}@
Change for item with server ID %{private}@ is neither bookmark nor folder.
Beginning conversion of folder contents
Did fail to migrate record hierarchy with error: %{public}@
Did finish migrating folder contents
Record %{public}@ has no position and needs saving in folder %{public}@
Found record %{public}@ with position %{public}@ after record %{public}@ with position %{public}@, folder %{public}@ should have been sorted before!
Found record with name %{public}@ after %ld records which do not have a position defined yet
Batch of size %lu with %lu records is full for %@
No more records to save.
Merging record %{public}@ with result %{public}@ indicates that the local record needs to be undeleted during migration. Migration never attempts to delete remote records before the last de-duplication phase.
Saving reparented records
Saving reparented records with record names: %@
Did fail to save reparented records with error: %{public}@
Did finish saving reparented records
Sync down handler starting sync, keep records marked as deleted locally = %d
Sync down handler did fail sync down with with error: %{public}@
Sync down handler did succcessfully sync down
Sync down handler fetching record changes from server change token: %{public}@
Canceling migration sync-down because Safari sync is disabled
Zone deleted during migration sync-down; bailing
Bailing out from sync down due to deallocation with error %{public}@
Sync down handler retry limit exceeded
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server during migration.
Record %{public}@ does not locally exist and cannot be saved locally because of its minimum API version
Record %{public}@ does not exist locally and is deleted remotely
Writing locally record %{public}@ despite the record not existing locally and being deleted remotely for merging
Processing %lu changes with changeToken: %@
Add change %{public}@ was provided without a corresponding changed item.
Move change %{public}@ was provided without a corresponding changed item.
Moved item %{public}@ for change %{public}@ did not have a record ID.
Attempted to delete built-in record with name: %{public}@, ignoring.
Attempting to check database open state from a background thread
Attempting to retrieve the database from a background thread
Attempting to retrieve the backing store lock from a background thread
%{public}@ attempting to lock backing store
%{public}@ backing store was already locked
%{public}@ successfully locked backing store
%{public}@ failed to lock backing store
Attempting to unlock the backing store from a background thread
Trying to unlock the database despite the database being already unlocked
%{public}@ did not unlock backing store due to outstanding lock requests
%{public}@ is unlocking the database even though the database is still open
%{public}@ unlocked backing store
Attempting to retrieve the migration state from a background thread
Fetching local migration state from database (isDatabaseLocked: %d, isDatabaseOpen: %d)
Fetched local migration state %ld from database
Attempting to set the migration state from a background thread
Setting local migration state in database to %ld (isDatabaseLocked: %d, isDatabaseOpen: %d)
Attempting to open the database from a background thread
Attempted to open the database without acquiring the lock first.
Attempted to open the database even though it is already open.
Will open the database
Attempting to close the database from a background thread
Attempted to close the database without acquiring the lock first (shouldSave: %d
Attempted to close the database without opening it first (shouldSave: %d
Did close database, did save %d
Opening iCloud Tabs SQLite database
Failed to open iCloud Tabs store at %{private}@: %{public}@
Failed to exclude CloudTabs.db from backup: %{public}@
Failed to enable write-ahead logging on iCloud Tabs store: %{public}@
Failed to enable foreign keys on iCloud Tabs store: %{public}@ (%d)
iCloud Tabs store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Removing iCloud Tabs store file and opening database again
Failed to remove iCloud Tabs store file at %{private}@: %{public}@
Failed to create the cloud_tab_devices table: %{public}@ (%d)
Failed to create the cloud_tabs table: %{public}@ (%d)
Failed to create the index for cloud_tabs table: %{public}@ (%d)
Failed to create the cloud_tab_close_requests table: %{public}@ (%d)
Failed to create the metadata table: %{public}@ (%d)
Failed to set the database schema version to %d: %{public}@ (%d)
Failed to delete metadata value for key %{public}@: %{public}@ (%d)
Failed to update metadata value for key %{public}@: %{public}@ (%d)
Failed to insert metadata value for key %{public}@: %{public}@ (%d)
Failed to execute query when resetting database: %{public}@ (%d)
Failed to vacuum database: %{public}@ (%d)
Closing iCloud Tabs SQLite database
Found a device without a UUID in the database.
Found a device without system fields in the database.
Failed to insert or replace device: %{public}@ (%d)
Found a tab without a UUID in the database.
Found a tab without system fields in the database.
Found a tab without a position dictionary in the database.
Couldn't create a tab's position from the position dictionary in the database.
Found a tab without a URL in the database.
Failed to insert or replace tab: %{public}@ (%d)
Found a close request without a request UUID in the database.
Found a close request without system fields in the database.
Found a close request without a destination device UUID in the database.
Found a close request without a tab URL in the database.
Found a close request without a tab UUID in the database.
Failed to create a CloudTabCloseRequest from the database.
Failed to insert or replace close request: %{public}@ (%d)
Failed to get iCloud Tabs database URL, falling back to in-memory database
Resetting the iCloud Tabs database
User account changed for iCloud Tabs
iCloud Tab syncing not available because user is not signed in
iCloud Tab syncing not available because Safari's dataclass isn't enabled
Saving tabs for the current device to CloudKit
No iCloud Tab device found to save
Stopping save of tabs for current device
Merging device with existing device in SQLite database, if necessary
Merging device with existing device in SQLite database
No existing device found in SQLite database
Saving device to CloudKit
Done saving device to CloudKit
Saving iCloud Tab record batch of size: %lu
Did fail to save iCloud Tab record batch with error: %{public}@
Deleting obsolete tab records from CloudKit
No obsolete tab records need to be deleted from CloudKit
Failed to delete obsolete tab records with error: %{public}@
Done deleting obsolete tab record from CloudKit
Updating SQLite store from CloudKit after saving tabs
Updating SQLite store from CloudKit after saving tabs failed with error: %{public}@
Done updating SQLite store from CloudKit after saving tabs
Finished saving tabs for the current device to CloudKit
Saving close request to CloudKit
No close request found to save
Stopping save of close requests
Updating SQLite store from CloudKit after saving close request
Updating SQLite store from CloudKit after saving close request failed with error: %{public}@
Done updating SQLite store from CloudKit after saving close request
Finished saving close request to CloudKit
Fetching iCloud Tab data from CloudKit
Stopping fetch of tabs
Resetting database and restarting fetch
Reading server change token from SQLite
Finished reading server change token from the SQLite database
Failed to read from server change token data: %{public}@
Failed to decode server change token with exception: %{public}@
Found server change token data in the SQLite database
Found server change token data in the SQLite database, but couldn't unarchive it
Found server change token data in the SQLite database, but couldn't unarchive it, even after resetting the database
No server change token found in the SQLite database
Fetching changes from CloudKit
Failed to fetch changes with error: %{public}@
Attempting to create CloudTabs zone before retrying fetch
Finished fetching changes from CloudKit
Fetching changes from CloudKit again after creating CloudTabs zone
Failed to create CloudTabs zone when fetching changes with error: %{public}@
No records to delete from SQLite
Removing %lu deleted records from SQLite
Finished removing deleted records from SQLite
No modified devices, tab records, or close requests to save to SQLite
Saving %lu device records, %lu tab records, and %lu close requests to SQLite
Failed to save modified device, tab, and close request records to the SQLite database with error: %d
Finished saving modified device, tab, and close request records to the SQLite database
Saving server change token to SQLite
Failed to archive server change token: %{public}@
Failed to save server change token to SQLite with error: %d
Done saving server change token to SQLite
Skipping loading devices, tabs, and close requests from SQLite
Loading devices, tabs, and close requests from SQLite
Finished loading devices, tabs, and close requests from SQLite
Finished fetching iCloud Tab data from CloudKit
Fetched an invalid iCloud Tab device record from CloudKit
Fetched an invalid iCloud Tab tab record from CloudKit
Fetched an invalid iCloud Tab close request record from CloudKit
Fetched an unrecognized record from CloudKit of type %{public}@
Deleting devices from CloudKit
No devices to delete
Deleting close requests from CloudKit
No close requests to delete
Stopping deletion of records
Deleting records from CloudKit
Failed to delete records with error: %{public}@
Done deleting records from CloudKit
Updating SQLite store from CloudKit after deleting records
Updating SQLite store from CloudKit after deleting records failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting records
Finished deleting records CloudKit
Prepare records for migration
Number of records prepared for migration: %ld
Convert built-in record with recordName %{public}@ for migration
Record of type %ld has built-in record name %{public}@ despite not being a built-in folder, generating a new record name
Convert new local record with created recordName %{public}@ for migration
Already converted record with recordName %{public}@ for migration
Convert Bookmark DAV record with recordName %{public}@ for migration
Trying to generate DAV server ID for bookmark with local ID %{public}@, but that bookmark doesn't exist
Received nil set of child local IDs for folder with local ID %{public}@ while generating DAV server IDs
WBSSafariBookmarksSyncAgentProtocol
WBSCyclerCloudBookmarksAssistant
NSObject
SafariBookmarksSyncAgent
APSConnectionDelegate
CloudBookmarkDatabaseLockArbiterDelegate
NSXPCListenerDelegate
BookmarkHashGenerator
CloudBookmarkEncryptedDataHandling
CloudBookmark
SafariBookmarksSyncExtras
CloudBookmarkAccountPropertiesStore
CloudBookmarkCompressedJSONValueTransformer
CloudBookmarkDatabaseHandler
CloudBookmarkUpdater
CloudBookmarkDatabaseSyncData
NSSecureCoding
NSCoding
CloudBookmarkEncryptedObjectValueTransformer
CloudBookmarkGeneration
NSCopying
CloudBookmarkLeaf
CloudBookmarkList
CloudBookmarkMovedBookmarkManager
CloudBookmarkExtras
CloudBookmarkPosition
CloudBookmarkPositionGenerator
_CloudBookmarkPositionGeneratorStride
CloudBookmarkPositionSortValue
CloudBookmarkOperationRetryManager
CloudBookmarksExtras
CloudBookmarksFetchResult
CloudBookmarksMigrationCoordinator
CloudBookmarkExpiredChangeTokenHandler
CloudTabCloseRequest
CloudBookmarkReadingListItem
CloudBookmarkStore
CloudBookmarkStoreUserDefaultsStorage
CloudBookmarkStoreLocalStorage
CloudBookmarkSyncCoordinator
CloudBookmarkPositionGeneratorDelegate
CloudBookmarkSyncData
_CloudBookmarkSyncDataForPositionDecoding
CloudBookmarkSyncMigrationConverter
CloudBookmarkSyncMigrationSaveHandlerDelegate
CloudBookmarkSyncMigrationSyncDownHandlerDelegate
CloudBookmarkSyncMigrationCoordinator
CloudBookmarksDiagnostics
CloudBookmarkSyncMigrationFolderContentConverter
CloudBookmarkSyncMigrationPositionGenerator
_CloudBookmarkSyncMigrationPositionGeneratorEnumerator
CloudBookmarkSyncMigrationSaveHandler
CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler
CloudBookmarkSyncMigrationSyncDownHandler
CloudBookmarkChangeProcessor
CloudBookmarkDatabaseLockArbiter
CloudBookmarkDatabaseAccessing
CloudBookmarkWindowsCompatibleStringValueTransformer
CloudBookmarkWindowsCompatibleURLValueTransformer
CloudTab
CloudTabDevice
CloudTabsExtras
CloudTabSQLiteStore
CloudTabSyncCoordinator
CloudBookmarkSyncMigrationHierarchyConverter
CyclerCloudBookmarksAssistant
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@?16
v28@0:8B16@?20
v24@0:8@?<v@?@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
v16@0:8
v20@0:8B16
v24@0:8q16
v32@0:8@16@24
v40@0:8@16@24@?32
v32@0:8@16@?24
v24@0:8@?<v@?@"NSString"@"NSError">16
v24@0:8@?<v@?q@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData">16
v32@0:8@"NSDictionary"16@"NSString"24
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSArray">16
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v24@0:8@16
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v24@0:8@"CloudBookmarkDatabaseLockArbiter"16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v32@0:8q16@?24
v44@0:8r*16@24B32@?36
d32@0:8q16@24
v40@0:8B16B20q24q32
@"CloudBookmarkStore"
@"NSXPCListener"
@"APSConnection"
@"CKSubscription"
@"CloudBookmarkDatabaseLockArbiter"
@"CloudBookmarkSyncMigrationCoordinator"
@"CloudBookmarksMigrationCoordinator"
@"CloudBookmarkSyncCoordinator"
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_source>"
@"CyclerCloudBookmarksAssistant"
@"NSMutableSet"
@"CloudTabSyncCoordinator"
@32@0:8@16@24
@24@0:8@16
@"NSData"
@32@0:8@16^v24
@32@0:8^v16@24
@40@0:8@16^v24@32
v32@0:8^v16@24
@24@0:8^v16
@32@0:8r^v16@24
B32@0:8^v16@24
q16@0:8
@32@0:8@16^B24
Q32@0:8@16@24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16^B24
r^v16@0:8
@"CloudBookmarkSyncData"
@"NSMutableDictionary"
@"NSString"
@"ACAccountStore"
@"<CloudBookmarkDatabaseAccessing>"
@24@0:8#16
@"NSData"32@0:8@"NSString"16@"NSString"24
@"CloudBookmarkPosition"24@0:8@"NSString"16
@"CKRecordZoneID"16@0:8
@"CloudBookmarkAccountPropertiesStore"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v24@0:8^v16
@"CKServerChangeToken"
@24@0:8^{_NSZone=}16
@32@0:8@16Q24
q24@0:8@16
@28@0:8B16^@20
@24@0:8^@16
B32@0:8@16^@24
@32@0:8@16^@24
v24@0:8^@16
@48@0:8@16@24@32q40
@"NSArray"
@"NSDictionary"
@"<CloudBookmarkPositionGeneratorDelegate>"
@40@0:8@16@24@32
@"CloudBookmarkPosition"
@40@0:8q16@24q32
@24@0:8q16
q32@0:8@16@?24
d16@0:8
v24@0:8d16
@"NSDate"
v24@0:8Q16
@"NSMutableArray"
@"CKRecord"
@24@0:8Q16
@64@0:8@16@24@32@40@48@56
@32@0:8q16@24
@32@0:8@16q24
v36@0:8B16@20@?28
v56@0:8@16@24@?32@?40@?48
v56@0:8@16@24@32@?40@?48
v40@0:8B16B20@24@?32
v48@0:8B16B20@24@32@?40
v72@0:8@16@24@32@40@48@?56@?64
v80@0:8@16@24@32@40@48@56@?64@?72
v40@0:8@?16@?24@?32
v48@0:8q16@24@32@?40
v32@0:8Q16@?24
v44@0:8@16B24@28@?36
v64@0:8@16@24@32@40@48@?56
@32@0:8@16@?24
v56@0:8@16@24@32@40@?48
v48@0:8@16@24@32@?40
v64@0:8q16@24@?32@?40@48@?56
v72@0:8q16@24@32@?40@?48@56@?64
@"CKDatabase"
@"CKRecordZone"
@"NSOperationQueue"
@"BookmarkHashGenerator"
@"<CloudBookmarkStoreLocalStorage>"
@"NSData"16@0:8
v24@0:8@"NSData"16
@"NSUserDefaults"
@"NSString"24@0:8@"CloudBookmarkPositionGenerator"16
q24@0:8@"CloudBookmarkPositionGenerator"16
@"CloudBookmarkPosition"32@0:8@"CloudBookmarkPositionGenerator"16@"NSString"24
@"NSString"32@0:8@"CloudBookmarkPositionGenerator"16@"NSString"24
@32@0:8^@16@?24
@"CloudBookmark"
@"CloudBookmarkMovedBookmarkManager"
@"CloudBookmarkPositionGenerator"
@"CloudBookmarkExpiredChangeTokenHandler"
@"NSTimer"
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"NSString"24
B32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"NSString"24
@"CloudBookmarkSyncMigrationFolderContentConverter"
@"CloudBookmarkSyncMigrationSyncDownHandler"
@"CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler"
@"NSSet"
v36@0:8B16@?20@?28
@"CloudBookmarkSyncMigrationConverter"
v56@0:8^v16@24^q32^q40@48
@"CloudBookmarkSyncMigrationPositionGenerator"
@"NSEnumerator"
@48@0:8@16@24^@32^@40
@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>"
@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>"
B24@0:8@"NSString"16
v24@0:8@"NSString"16
@"<CloudBookmarkDatabaseLockArbiterDelegate>"
@48@0:8@16@24@32@40
@88@0:8@16@24@32@40@48B56B60@64@72@80
v88@0:8@16@24@32@40@48B56B60@64@72@80
@64@0:8@16@24B32B36@40@48@56
@64@0:8@16@24B32@36B44@48@56
i16@0:8
i20@0:8i16
i32@0:8@16@24
i24@0:8@16
@"NSURL"
@"CKRecordZoneID"
@"WBSSQLiteDatabase"
@"CloudTabSQLiteStore"
@"CKOperationGroup"
@"CloudTabDevice"
@"CloudTabCloseRequest"
@"NSError"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mobilesafari</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.application-identifier</key>
<string>com.apple.Safari</string>
<key>com.apple.developer.aps-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>SafariBookmarksSyncAgent</string>
</array>
</dict>
</plist>
