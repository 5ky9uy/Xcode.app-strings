0E333333
MbP?
MbP?
>333?
>fff?
f@_p
>333333
?ffffff
?333333
?ffffff
@33s?
_,b?_,b?_,b?
kvz=kvz=kvz=
VUU
VUU
i\)7.
blnOq
sy2-
i\)7.
blnOq
sy2-
Ga==
8?Sx
?33s?333?
333?
333?
fff?
?fff?fff?
L>fff?
>fff?
?ff&?333?C
G &?RGBA
00000000000000007777777777777777
?fff?fff?fff?
@(#)PROGRAM:SceneKit  PROJECT:SceneKit-470.10
(knNff
`>9?
`>9?
8-0?
fff?
?333?
?333?
=fff@
v28@?0c8I12*16I24
v140@?0{__C3DShapeVertex={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dBi}8{CGPoint=dd}88f104{CGPoint=dd}108{CGPoint=dd}124
v8@?0
v32@?0@8@16^B24
C3DKeyValueStore
<C3DKeyValueStore>
triggerOptionsForRealtimeViewer
kSceneSourceAutoLimitMemoryForImages
kSceneSourceCreateCameraIfAbsent
kSceneSourceForceInProcess
kSceneSourceCreateLightIfAbsent
kSceneSourceCreateNormalsIfAbsent
kSceneSourceAdjustInvalidClippingPlanes
kSceneSourceFlattenScene
kSceneSourceSplitMeshesForGLES
kSceneSourceConvertToYUpIfNeeded
kSceneSourceConvertToUnit
kSceneSourceAnimationLoadingMode
keepSeparate
playRepeatedly
playOnce
playUsingSceneTime
kSceneSourceCleanupMeshes
kSceneSourceRemoveAllLights
kSceneSourceRemoveColorArrays
kSceneSourceInterleaveSources
kSceneSourceMakeSourcesCheaper
kSceneSourceSkipConsistencyCheck
kSceneSourceCheckConsistency
kSceneSourceUseSafeMode
kSceneSourceAssetDirectoryURLs
kSceneSourceOverrideAssetURLs
kSceneSourceStrictConformanceKey
kSceneSourceVerboseMode
kSceneSourceFormatHint
kSceneSourceSkipImagePathResolution
contributors
created
modified
up_axis
unit
authoring_tool
author
unitName
unitMeter
com.apple.SceneKit
kEnclosingDirectoryURL
C3DSceneSource
Collada is not supported by this version of SceneKit
Unknown or missing file
Could not load the scene
The document does not appear to be a valid COLLADA file. Please check that is has not been corrupted.
The document does not appear to be valid. Please re-create it from your original COLLADA assets.
<C3DSceneSource >
C3DSortSystem
<C3DSortSystem %p>
uniform 
.<>?:/|&^*/+-=%!~
float2
vec3
float3
float4
ivec2
int2
ivec3
int3
ivec4
int4
uvec2
uint2
uvec3
uint3
uvec4
uint4
mat2
float2x2
mat3
float3x3
mat4
mat2x4
float2x4
mat3x2
float3x2
mat3x3
mat4x2
float4x2
mat3x4
float3x4
u_time
scn_frame.time
u_viewTransform
scn_frame.viewTransform
u_inverseViewTransform
scn_frame.inverseViewTransform
u_projectionTransform
scn_frame.projectionTransform
u_inverseProjectionTransform
scn_frame.inverseProjectionTransform
u_cameraPosition
scn_frame.cameraPosition
u_viewToCubeWorld
scn_frame.viewToCubeWorld
u_inverseResolution
scn_frame.inverseResolution
u_modelTransform
scn_node.modelTransform
u_inverseModelTransform
scn_node.inverseModelTransform
u_modelViewTransform
scn_node.modelViewTransform
u_inverseModelViewTransform
scn_node.inverseModelViewTransform
u_normalTransform
scn_node.normalTransform
u_modelViewProjectionTransform
scn_node.modelViewProjectionTransform
u_inverseModelViewProjectionTransform
scn_node.inverseModelViewProjectionTransform
u_boundingBox
scn_node.boundingBox
u_worldBoundingBox
scn_node.worldBoundingBox
texture1d
sampler2D
texture2d
sampler3D
texture3d
samplerCube
texturecube
discard
discard_fragment()
gl_FragCoord
in.fragmentPosition
gl_FragColor
_output.color
gl_FrontFacing
isFrontFacing
texture1D
filter::linear
texture1DProj
texture1DLod
texture1DProjLod
texture2D
texture2DLod
textureLod
texture2DProj
texture2DProjLod
texture3D
texture3DProj
texture3DLod
texture3DProjLod
textureCube
textureCubeLod
shadow1D
shadow1DProj
shadow1DLod
shadow1DProjLod
shadow2D
shadow2DProj
shadow2DLod
shadow2DProjLod
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Engine/AppleEngine/C3DShaderConverter.mm
uniform
ParseUniform
mToken.mString == "uniform"
pragma
arguments
varyings
declaration
body
const
constant
Parse
mpTokenizer == nullptr
while
#pragma arguments
#pragma body
#pragma declaration
.sample(
Sampler
, level(
, bias(
float2(
float3(
float4(
sampler 
Sampler
_hide
v16@?0Q8
C3DParticleSystemInstance
<C3DParticleSystemInstanceRef>
<%@:%p "%@"
  mesh: %@
  mat%d: %@
bindInfos
name
type
address
semantic
mesh
overrideMaterial
materials
levelsOfDetail
sceneRef
C3DGeometry
unknown
aoCoord
lightmapCoord
bitangent
While creating SCNSkinner: Could not find SCNNode %@
morpher.weights[%d]
SCNSceneKitAssociatedObject
B32@?0@"SCNGeometrySource"8Q16^B24
blendShape%d
normal%d
textureCoordinate%d
color%d
ambient
diffuse
specular
reflective
opacity
metalness
roughness
displacement
normal
%@_%d
transform
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
targetShapes
T@"NSArray",R,N
shapeSetTargetWeights
shapeSetTargetCounts
weights
T@"MDLAnimatedScalarArray",R,N
jointPaths
jointBindTransforms
T@"NSData",R,N
meshBindTransform
T{?=[4]},R,N
AO_%@_%@.png
@"NSString"16@?0@"SCNNode"8
v32@?0@"SCNNode"8@"SCNGeometry"16@"NSArray"24
aoTexture
lightmapTexture
/tmp/ModelKit_AO_%@.png
fieldOfView
focalDistance
fstop
/%@.position
/%@.orientation
/%@.scale
Bad joint path detected for joint: %@
Color
Texture
C3DMeshElementGetIndexCountPerPrimitive
C3DMeshElementGetChannelsDefineSameTopology
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Core/C3DMeshElement.c
indicesDataLength > topologyIndicesLength
CHANNEL %ld/%ld
%4u : %4u %4u %4u
%4u : %4u %4u
%4u : %4u
%2u : [Polygon %4u]
 %4u
v24@?0I8^I12I20
C3DMeshElement
<C3DMeshElement %p type:%@ primCount:%d channels:%d indexBytes:%d offset:%d acmr:%f inst:%d dataSize:%d shared:%p>
triangles
triangleStrip
lines
points
polygons
triangleFan
invalid
doubleSided
linesArray
trianglesArray
pointsArray
trianglesStrip
polygonsArray
indexes
subElementsCount
bytesPerIndex
primitiveNormals
bbox[0]
bbox[1]
%@-splitContainer
splitContainer
B8@?0
q16@?0^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}8
B16@?0@?<v@?>8
v16@?0^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}8
v32@?0^{__C3DMeshSource={__C3DGenericSource={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}8c16q20C28
default camera
SceneKit
%@-split%d
v16@?0d8
scene
T^{__C3DScene=},R,V_scene
customAudioNode
TB,R,V_customAudioNode
completed
TB,V_completed
audioPlayer
T@"AVAudioPlayerNode",R,V_audioPlayer
willStartPlayback
T@?,C,N,VwillStartPlayback
didFinishPlayback
T@?,C,N,VdidFinishPlayback
audioNode
T@"AVAudioNode",R,N,V_audioNode
audioSource
T@"SCNAudioSource",R,N,V_audioSource
caff
aiff
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DKit/classes/SCNAudioSource.m
<Unknown File>
Error reading file into buffer, %@
volume
rate
reverbBlend
positional
loops
shouldStream
supportsSecureCoding
TB,R
TB,N,GisPositional,Vpositional
Tf,N,Vvolume
Tf,N,Vrate
Tf,N,VreverbBlend
TB,N,V_loops
TB,N,V_shouldStream
auth
v24@?0^^{__C3DNode}8q16
C3DHitTestResult
<C3DHitTestResult %@ %f,%f,%f>
C3DList
<C3DList %p: head %p, tail %p, %ld objects>
layer
T@"CALayer",&,N,V_layer
halfExtent
strength
falloffExponent
minimumDistance
active
scope
usesEllipsoidalExtent
exclusive
offset
direction
Td,N
TB,N,GisActive
TB,N,GisExclusive
T{SCNVector3=fff},N
TB,N
Tq,N
categoryBitMask
TQ,N
block
smoothness
animationSpeed
v24@?0^{__C3DNode=}8^B16
C3DFXFloorPass.plist
SceneKit_renderMirroredScene
SceneKit_renderFloor
u_floorReflectionColor
SceneKit-floor-color-%p
u_floorReflectionDepth
SceneKit-floor-depth-%p
u_floorNormal
u_floorTangent
u_floorCenter
u_floorExtent
u_floor_viewport
u_floorReflectivity
u_floorFalloffStart
u_floorFalloff
u_floorPlane
u_floorMVP_i
FloorGeomImpl.glsl
FloorGeomImpl-metal.h
USE_FALLOFF
USE_FALLOFF_START
USE_TRANSPARENCY
FloorImpl.glsl
FloorImpl-metal.h
v16@?0^{__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}8
com.apple.scenekit.jitteringUpdateQueue
enabled
TB,N,GisEnabled
C3DStack
<C3DStack>
bodyA
bodyB
axisA
axisB
anchorA
anchorB
T@"SCNPhysicsBody",R,N
v24@?0@"SCNNode"8^B16
v32@?0@8Q16^B24
_prepareSnapToAlignDataForAxis - unexpected axis
B24@?0@"SCNNode"8^B16
authoringEnvironment
T@"SCNAuthoringEnvironment",R
T{SCNMatrix4=ffffffffffffffff},R
manipulatorNode
T@"SCNNode",R
targets
T@"NSOrderedSet",&,N
target
T@"SCNNode",&,N
xAlignment
Tq,N,V_xAlignment
yAlignment
Tq,N,V_yAlignment
zAlignment
Tq,N,V_zAlignment
readonly
TB,N,V_readonly
features
T@"SKScene",&,N,V_scene
C3DAnimationClusterKeyframes
<C3DAnimationClusterKeyframes %p>
C3DAnimationCluster
<C3DAnimationCluster %p>
location
initFromPath
relativePath
runtimePath
vertexCount
componentsPerValue
componentsType
valuesCount
data
kGeometrySourceSemanticVertex
kGeometrySourceSemanticNormal
kGeometrySourceSemanticColor
kGeometrySourceSemanticTexcoord
stride
padding
sourceID
sourceTypeID
vertex
position
color
texcoord
textangent
joints
commonProfile
geometryID
materialsID
facesCount
kAnimationsKey
kBindingsKey
kActionsKey
kLightKey
kSkinnerKey
kMorpherKey
kCameraKey
kConstraints
kParticleSystem
kAudioPlayer
kLightmapInfoKey
kRenderingPriorityKey
kShaderModifiers
kPivotKey
libraryStorage
kMeshKey
rendererDelegate
kFilterKey
geometry
geometryElement
geometryElements
geometrySource
genericSource
node
material
effect
image
keyframedAnimations
animation
camera
light
skin
morph
linear
easeIn
easeOut
easeInEaseOut
default
function
avoidsOverlighting
double sided
cullMode
cullBack
cullFront
lambert
phong
blinn
physicallyBased
emission
transparent
filter
ambientOcclusion
selfIllumination
emissionColor
ambientColor
diffuseColor
specularColor
reflectiveColor
transparentColor
normalColor
filterColor
emissionImageID
ambientImageID
diffuseImageID
specularImageID
reflectiveImageID
transparentImageID
filterImageID
normalImageID
shininessImageID
emissionTextureSampler
ambientTextureSampler
diffuseTextureSampler
specularTextureSampler
reflectiveTextureSampler
transparentTextureSampler
filterTextureSampler
normalTextureSampler
shininessTextureSampler
emissionUVSet
ambientUVSet
diffuseUVSet
specularUVSet
reflectiveUVSet
transparentUVSet
normalUVSet
filterUVSet
shininessUVSet
ambientOcclusionUVSet
selfIlluminationUVSet
shininess
reflectivity
transparency
indexOfRefraction
fresnelExponent
transparencyMode
A_ONE
RGB_ZERO
minFilter
magFilter
mipFilter
wrapS
wrapT
wrapP
anisotropy
SCNKitErrorDomain
frustumCulling
defaultLight
defaultCamera
probeRendering
debugRendering
pointOfView
rootNode
mirrorNode
kHitTestFirstFoundOnly
kHitTestSearchMode
kHitTestSortResults
kHitTestClipToZRange
kHitTestSkipTransparentNode
kHitTestSkipHiddenNode
kHitTestCategoryBitMask
kHitTestBackFaceCulling
kHitTestBoundingBoxOnly
kHitTestIgnoreChildNodes
kHitTestRootNode
kHitTestAllLayers
kHitTestLayerMask
kHitTestShowDebugInfo
kC3DNotificationMeshSourceWillDie
kC3DNotificationMeshElementWillDie
kC3DNotificationImageWillDie
kC3DNotificationImageProxyWillDie
kC3DNotificationProgramWillDie
kC3DNotificationGeometryWillDie
kC3DNotificationMorphWillDie
kC3DNotificationSkinWillDie
kC3DNotificationMaterialWillDie
kC3DNotificationMeshWillDie
kC3DNotificationNodeWillDie
kC3DNotificationPassWillDie
kC3DNotificationEngineContextInvalidatePasses
kC3DNotificationEngineContextPassesDidUpdate
kC3DNotificationProfileWillDie
kC3DNotificationEntityAttributeDidChange
kC3DNotificationRendererElementWillDie
kC3DNotificationProgramHashCodeWillDie
kC3DSceneDidUpdateNotification
hidden
attributes
matrix
translation
rotation
orientation
scale
eulerAngles
quaternion
pivot
filters
dofIntensity
focalSize
aperture
apertureBladeCount
xFov
yFov
orthographicScale
zFar
projectionTransform
zNear
firstMaterial
selfIlluminationOcclusion
multiply
litPerPixel
lockAmbientWithDiffuse
contents
texture
contentsTransform
borderColor
intensity
shadowColor
shadowRadius
gobo
probeEnvironment
attenuationStart
attenuationEnd
attenuationFalloffExponent
spotInnerAngle
spotOuterAngle
spotFalloffExponent
morpher
shaderModifiers
background
environment
customProperty
animations
a_position
a_normal
a_tangent
a_color
a_skinningJoints
a_skinningWeights
a_texCoord0
a_texCoord1
a_texCoord2
a_texCoord3
a_texCoord4
a_texCoord5
a_texCoord6
a_texCoord7
<%@: %p
 '%@'
 point(%f %f %f)
 normal(%f %f %f)
 impulse(%f)
 distance:%f
nodeA
T@"SCNNode",R,N
nodeB
contactPoint
T{SCNVector3=fff},R,N
contactNormal
collisionImpulse
Td,R,N
penetrationDistance
sweepTestFraction
C3DCullingSystem
<C3DCullingSystem %p>
vertexCrease
edgeCrease
%4d : %3d %3d %3d %3d
%4d : %+.2f %+.2f
%4d : %+.2f %+.2f %+.2f
%4d : %+.2f %+.2f %+.2f %+.2f
type debugging not implemented
C3DMeshSource
<C3DMeshSource %p(%@) data:(%p) mut:%d count:%ld type:%@ divisor:%d mtl:%d offset:%d stride:%d
mkSemantic
accessor
C3D-GaussianBlur
#define unshareIndex %d
#define MAX_SAMPLE %d
#define COMPONENT %c
GaussianBlur_vert
GaussianBlur_frag
C3D-blur-radiusH
C3D-blur-radiusV
C3D-blur-offsets
C3D-blur-weights
C3D-blur-samples
C3DConvexPolyhedron
<C3DConvexPolyhedron %p>
v24@?0q8r^v16
B32@?0@8Q16^B24
C3DAnimationManager
<C3DAnimationManager %p>
q16@?0^{__C3DNode=}8
C3DKeyframeController
<C3DKeyframeController %p>
keyframeVersion
keyframeType
keyCount
keyframes
keytimes
keytimes-data
values
values-data
timingFunctions
timingFunctions-data
interpolationModes
interpolationModes-data
tensionValues
tensionValues-data
continuityValues
continuityValues-data
biasValues
biasValues-data
inTangents
inTangents-data
outTangents
outTangents-data
interpolationMode
calculationMode
0.12
Tq,N,Vtype
component
T@,&,N,Vcomponent
next
T@"SCNNodeComponent",&,N,Vnext
T@,W,N,Vcomponent
SCNAction: Run block actions can not be properly encoded, Objective-C blocks do not support NSSecureCoding.
SCNAction: Run block actions can not be properly decoded, Objective-C blocks do not support NSSecureCoding.
chunk
chunk->data
Format: %@ ; Size: %gx%g[%d] ; Texture: <%p> ; [rc:%ld/ts:%ld]
Name: %@ ; %@
-[SCNRenderTarget textureForSliceIndex:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/NewRenderer/SCNRenderTarget.m
_sliceTextures != nil
T@,&,N,V_texture
T@"NSString",C,N,V_name
referenceCount
Tq,N,V_referenceCount
timeStamp
Tq,N,V_timeStamp
viewportDependant
TB,R,N
renderBufferFormat
TC,R,N
C3DTimingFunction
<C3DTimingFunction>
sequence
passes
symbols
depth
program
metalLibraryFile
metalVertexShader
metalFragmentShader
clientProgram
inputs
owners
outputs
COLOR
C3DFXDefault_velocity.plist
C3DFXDefaultPass.plist
C3DFXDeferredShadingDefaultPass.plist
C3DFXTechnique
<C3DFXTechnique>
pass %d
plist
self
_audioSource
_wait
C3DKeyframedAnimation
<C3DKeyframedAnimation>
keyframeController
keyframedAnimation
failed to load technique from dictionary: %@
-[SCNTechnique setValue:forSymbolNamed:]
animations.%@.speed
valueForSymbol
animationKeys
T@"NSArray",R
dictionaryRepresentation
T@"NSDictionary",R
time
commandQueue
T@"<MTLCommandQueue>",R,N,V_commandQueue
commandBuffer
T@"<MTLCommandBuffer>",R,N,V_commandBuffer
device
T@"<MTLDevice>",R,N,V_device
initializationHandler
T@?,C,N
executionHandler
C3DAnimationPlayer
<C3DAnimationPlayer %p>
speed
blendFactor
C3DAnimationNode
<C3DAnimationNode %p>
C3DAnimationClusterNode
<C3DAnimationClusterNode %p>
SceneKit-CI-nodetree-color-
SceneKit-CI-effect-color-
SceneKit_renderCINodeTree-
SceneKit-CI-nodetree-depth
SceneKit_ApplyCIFilter
SceneKit_renderCIQuad
C3D-CIFilter_middleZ
C3D-CIFilter_extent
SceneKit-CI-nodetree-color
SceneKit-CI-effect-color
SceneKit_renderCINodeTree
^{__CFString=}16@?0^{__CFString=}8
C3DFXCIFilterPassMetal.json
C3DFXCIFilterPass.json
NSNumber
CICrop
inputRectangle
C3D-CIFilter_modelMatrix
SceneKit - Draw wireframe
u_color
u_transform
SCNPhysicsShapeTypeKey
SCNPhysicsShapeKeepAsCompoundKey
SCNPhysicsShapeScaleKey
SCNPhysicsShapeCollisionMarginKey
boundingBox
convexHull
concaveMesh
v32@?0@"SCNPhysicsShape"8Q16^B24
convexDecomposition
transformsCount
transform%d
referenceObject
options
T@"NSDictionary",R,N
sourceObject
T@,R,N,V_referenceObject
transforms
physicsShape[%f,%f,%f]
physicsShape
SCNDefaultPhysicsShape
btTriangleInfoData
btTriangleInfoMapData
isAttachment
C3DImage
<C3DImage %p src:%@ [%fx%f]>
<C3DImage %p src:%p [%fx%f]>
imageData
imageRelativePath
distantImageURL
file
cgImage
clientImage
bitmap
hasAlpha
size
pvrtc
minificationFilter
magnificationFilter
%f %f %f %f
maxAnisotropy
C3DTextureSampler
<C3DTextureSampler>
nearest
clamp
repeat
clampToBorder
Resource Manager Flush
C3D-EnvMap2D
textureSampler0
u_textureMatrix
C3D-EnvMapCube
u_mvp
u_zfar
C3DEngineContext
<C3DEngineContext>
velocity
jumpSpeed
C3DRendererElementState
<C3DRendererElementState>
v24@?0^{__CFString=}8^v16
uv_set
Reset all states
%02x
v16@?0^{__C3DRenderTarget={__CFRuntimeBase=QAQ}{?=CCCb1b1b1b1b1b1[4C]}^{__C3DTexture}Iq^vQIII}8
C3DRendererContext
<C3DRendererContext>
v24@?0C8^{__CFArray=}12I20
v20@?0I8r*12
v20@?0C8r*12
__drawCall
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Engine/AppleEngine/OpenGL/C3DRendererContextGL.c
ParticleSystem_MeshElement
C3D-ParticleSystem_Trail
C3D-ParticleSystem
C3D-ParticleSystem_PointSprite
%@%1d%c%c%c%c%c%c%c%1dO%1d%c
enableLighting
enableColorRamp
enableCubeMap
enableStretch
enableAnimation
enableFog
animationMode
blendMode
uberparticle_vert
uberparticleCube_frag
uberparticle_frag
.vsh
.fsh
precision highp float;
precision mediump float;
#define ENABLE_LIGHTING
#define ENABLE_COLOR_RAMP
#define ENABLE_CUBE_MAP
#define ENABLE_STRETCH
#define ENABLE_BILLBOARD_VIEW
#define ENABLE_ORIENTATION_FREE
#define ENABLE_BILLBOARD_Y
#define ENABLE_BILLBOARD_SCREEN
#define ENABLE_FOG
#define ENABLE_ANIMATION %d
#define ENABLE_SOFT
BlackPass
viewTransform
u_fresnelExponent
u_lightPosition0
u_lightColor0
u_colorRamp
u_stretchFactor
u_frameSize
u_softParameters
u_invProj
u_depthSampler0
u_fogParameters
u_fogColor
u_textureSampler0
C3DParticleManager
<C3DParticleManagerRef>
v28@?0I8^^{__C3DNode}12^^{__C3DLight}20
C3DFXJitteringPass.plist
SceneKit_JitterCopyFirstFrame
SceneKit_JitterToEven
SceneKit_JitterToOdd
SceneKit_JitterResolve
Copy_vert
Copy_frag
C3D-Copy
C3D-jitter-factor
IncrementalAverage_vert
IncrementalAverage_frag
C3D-IncrementalAverage
C3DBufferObject
<C3DBufferObject vbo:%ld  addr:0x%x lockCount:%d target:%d retainCount:%d>
overrides
ide_
ske_
simd
geometry.materials[%d]
particleSystems[0]
[%d]
SCNReferenceLoadingStack
referenceRoot
<%@: %p url=%@>
referenceURL
loadingPolicy
childNodes
T@"NSURL",C,N
Tq,N,V_loadingPolicy
loaded
TB,R,GisLoaded
referenceSceneName
T@"NSString",C,N,VreferenceSceneName
referenceNodeName
T@"NSString",C,N,VreferenceNodeName
referenceName
repeatCount
repeatDuration
usesSceneTimeBase
T@"NSString",C,N,VreferenceName
{CATransform3D=dddddddddddddddd}
rgba16f
rgba16unorm
rgba32f
r16f
r32f
rg8s
rg16
rg16f
rgba
framebufferColor
depth24
depth24stencil8
C3DFramebuffer
slot%d: %@ 
<C3DFramebuffer %p: color=%@ - depth=%@ color-samples=%d depth-samples=%d renderTargets:%@>
v28@?0f8r^{Triangle=}12r^20
B20@?0^8I16
C3DConstraintSlider
<C3DConstraintAcceleration>
C3DConstraintAvoidOccluder
<C3DConstraintAvoidOccluder %p>
com.apple.scenekit.resourceManagerDeletionQueue
C3DResourceManager
<C3DResourceManager>
kResourceManagerPendingMeshElementRemoval
kResourceManagerPendingImageRemoval
kResourceManagerPendingImageProxyRemoval
kResourceManagerPendingProgramRemoval
kResourceManagerPendingMeshRemoval
kResourceManagerPendingMeshSourceRemoval
C3DTexture
<C3DTexture>
C3DImageProxy
<C3DImageProxy>
C3DTextureProxy
<C3DTextureProxy>
-[NSData(SCNExtensions) scn_indexedDataEncodingHighWatermarkWithBytesPerIndex:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DKit/utils/NSData+SCNExtensions.m
-[NSData(SCNExtensions) scn_indexedDataDecodingHighWatermarkWithBytesPerIndex:]
-[NSData(SCNExtensions) scn_indexedDataEncodingDeltaWithBytesPerIndex:]
-[NSData(SCNExtensions) scn_indexedDataDecodingDeltaWithBytesPerIndex:]
v16@?0^{__C3DEngineContext=}8
C3DEnginePipeline
<C3DEnginePipeline %p>
com.apple.scenekit.scnview-renderer
C3DFXProgramDelegate
<C3DFXProgramDelegate %p>
SCN_ENABLE_COLLECTION
scenekit.fps
scenekit.primcnt
scenekit.frmtime
scenekit.phytime
scenekit.prttime
scenekit.animtime
scenekit.clientTime
scenekit.consttime
scenekit.rendertime
scenekit.cpuidletime
scenekit.cawaittime
scenekit.deviceutil
scenekit.rendererutil
scenekit.tilerutil
IOAcceleratorES
PerformanceStatistics
__scnPerformanceData
v24@?0{_CSTypeRef=QQ}8
scenekit.shaderCompilationTime
scenekit.shaderGenerationCount
Device Utilization %
Renderer Utilization %
Tiler Utilization %
containerPath
SceneKitShaderCache
commonProfile_
metal
error
can't create symbolicator for pid
__scnDebuggingInfo
can't find symbol __scnDebuggingInfo
can't mmap memory for symbol __scnDebuggingInfo
can't get mem rangefor symbol __scnDebuggingInfo
failed to read memory for symbol __scnDebuggingInfo
applicationContainerPath not set
none
float
bool
char
double
C3DFloat
float4x4
color4
short
half
uchar
ushort
ucharn
charn
10a2n
u10a2n
uchar4
char4
uchar4n
char4n
ushort2
ushort3
ushort4
shorn
short2
short3
short4
ushortn
ushort2n
ushort3n
ushort4n
short2n
short3n
short4n
half2
half3
half4
#ext
define
undef
ifndef
ifdef
else
elif
endif
hw.optional.sse2
hw.optional.sse3
hw.optional.supplementalsse3
hw.optional.sse4_1
hw.optional.sse4_2
hw.optional.avx1_0
hw.optional.fma
internalSettings
com.apple.scenekit
forceGLES
forceMetal
showsStatistics
cameraControlEnabled
batchMaxCount
disableLinearSpaceRendering
disableWideGamut
enablePostMorphUnifyNormals
enableStandardShadersWithFunctionConstants
forceNMOSBehavior
com.apple.sceneKit.isolateCacheMissShader
SCNDisableLinearSpaceRendering
SCNDisableWideGamut
SKESceneDocument
SKEDocumentSanitizer
sampler1D
vec2
vec4
mat44
#define %@ %@
defined
wrong syntax : defined() with no token
wrong syntax : unknown token
parsing error : extra parenthesis found
parsing error : parenthesis mismatch
C3DFXShader
<C3DFXShader %@>
source
stage
weakRef
T@,W,N,VweakRef
C3DLightProbesSystem
<C3DLightProbesSystem %p>
SCNLightingModelConstant
SCNLightingModelLambert
SCNLightingModelPhong
SCNLightingModelBlinn
SCNLightingModelNone
SCNLightingModelPhysicallyBased
SCNLightingModelInvalid
C3DEffectCommonProfile
<C3DCommonProfileEffect %p :
 lightingModel:%@
 perPixelLit:%d
 isOpaque:%d
 transparencyMode:%d
Emission
Ambient
Diffuse
Specular
Reflective
Transparent
Filter
Normal
Ambient Occlusion
Self Illumination
Metalness
Roughness
Displacement
Shininess
Reflectivity
Transparency
Fresnel
[%@] texture:%d xform:%d
versionNumber
ambientIntensity
diffuseIntensity
specularIntensity
emissionIntensity
multiplyIntensity
transparentIntensity
normalIntensity
ambientOcclusionIntensity
selfIlluminationIntensity
displacementIntensity
reflectiveIntensity
locksAmbientWithDiffuse
Intensity
lightingModel
imagesCount
C3DEffectSlot
<C3DEffectSlot>
sampler
mtltexture
imageProxy
uvSet
v16@?0@"NSTimer"8
delegate
T@"<SCNCameraControllerDelegate>",N,V_delegate
T@"SCNNode",&,N,V_pointOfView
interactionMode
Tq,N,V_interactionMode
automaticTarget
TB,N,V_automaticTarget
worldUp
inertiaEnabled
inertiaFriction
Tf,N
inertiaRunning
TB,R,N,GisInertiaRunning
minimumVerticalAngle
maximumVerticalAngle
minimumHorizontalAngle
maximumHorizontalAngle
drivenByDefaultNavigationCameraController
simdUp
simdTarget
verticalMaximumAngle
horizontalMaximumAngle
threshold
thresholdType
C3DLOD
<C3DLOD>
_duration
_timingMode
_beginTime
_pausedTime
_isRunning
_finished
duration
timingMode
timingFunction
T@?,N
T{SCNVector3=fff},N,Vposition
euler
T{SCNVector3=fff},N,Veuler
T{SCNVector3=fff},N,Vscale
T{SCNVector4=ffff},N,Vrotation
usesEuler
TB,N,VusesEuler
Tf,N,Vopacity
SCNActionCacheKey
C3DEdgeArray
<C3DEdgeArray>
C3DTriangulationInfo
<C3DTriangulationInfo>
C3DMeshElementEditor
<C3DMeshElementEditor>
script
JSContext
elapsedTime
T@"SCNNode",&,N,Vnode
elementIndex
TQ,N,VelementIndex
T{SCNMatrix4=ffffffffffffffff},N
worldTransform
elementPosition
C3DIndexSet
indexSet 
(no index)
[number of indexes: %lu (in %lu ranges), indexes: (
-%lu
mass
charge
friction
restitution
rollingFriction
ccdThreshold
damping
angularVelocity
angularDamping
linearRestingThreshold
angularRestingThreshold
velocityFactor
angularVelocityFactor
ignoreGravity
explicitMomentOfInertia
momentOfInertia
centerOfMassOffset
collisionBitMask
contactTestBitMask
allowsResting
isDefaultShape
linearSleepingThreshold
angularSleepingThreshold
usesDefaultMomentOfInertia
T@"SCNPhysicsShape",&,N
isResting
T{SCNVector4=ffff},N
affectedByGravity
TB,N,GisAffectedByGravity
continuousCollisionDetectionThreshold
Td,N,V_continuousCollisionDetectionThreshold
autoreverses
additive
cumulative
isAnimationClip
removeOnCompletion
sceneTimeBased
fillModeMask
timeOffset
beginTime
fadeInDuration
fadeOutDuration
C3DSimpleAnimation
<C3DSimpleAnimation>
baseType
startValue
byValue
endValue
C3DLight
<C3DLight %p> Type:%@ CastsShadow(Samples:%d Cascade:%d)
<C3DLight %p> Type:%@
Directional
Omni
Spot
Irradiance
Radiance
Unknown
attenuationEndDistance
attenuationStartDistance
shadowBias
temperature
property3
property4
castShadow
znear
zfar
shadowSoftenFactor
category
shadowMapSize
directionalExtent
shadowMaxSampleCount
C3DCamera
<C3DCamera>
fStop
aspectRatio
sensorHeight
averageGray
bloomBlurRadius
bloomIntensity
bloomThreshold
bloomIteration
colorFringeStrength
colorFringeIntensity
contrast
exposureAdaptationBrighteningSpeedFactor
exposureAdaptationDarkeningSpeedFactor
exposureAdaptationDuration
exposureAdaptationHistogramRangeHighProbability
exposureAdaptationHistogramRangeLowProbability
exposureOffset
focusDistance
focalLength
maximumExposure
minimumExposure
motionBlurIntensity
saturation
vignettingIntensity
vignettingPower
whitePoint
screenSpaceAmbientOcclusionIntensity
screenSpaceAmbientOcclusionRadius
screenSpaceAmbientOcclusionBias
screenSpaceAmbientOcclusionDepthThreshold
screenSpaceAmbientOcclusionNormalThreshold
screenSpaceAmbientOcclusionSampleCount
screenSpaceAmbientOcclusionDownSample
ortho
letterbox
fovHorizontal
customProj
autoZRange
xfov
yfov
xMag
bladeCount
dofSampleCount
sensorSize
orthoScale
C3DNode
<C3DNode:%p "%@"
  geometry: %@
  light: %@
  camera: %@
  skinner: %@
  morpher: %@
alpha
isJoint
matrix4x4
axisAngle
kC3D
firstChild
nextSibling
parent
skinner
v24@?0^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}8^B16
_opacityTarget
_opacityTargetReversed
_lastOpacity
_isRelative
sources
primarySourcesInfo
subIDs
C3DMesh
<C3DMesh %p "%@"
  element%d: %@
  source %@%d (channel:%d) : %@
  source %@ (channel:%d) : %@
  renderable element%d: %@
  renderable source %@%d: %@
  renderable source %@: %@
baseSourceLocators
verticesMask
boundingSphere
meshElements
_allocate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Containers/C3DHash.hpp
(new_size & (new_size - 1)) == 0
effectID
C3DMaterial
<C3DMaterial %p : "%@"
common profile %@
custom %@
__library__
enableWriteInDepthBuffer
enableReadsFromDepthBuffer
fillMode
nodeConstraints-%p
C3DScene
<C3DScene>
fogColor
fogDensityExponent
fogEndDistance
fogStartDistance
startTime
endTime
frameRate
upAxis
nodeTree
nodeID
childs
root
playbackSpeed
animationManager
lightingSystem
results
backfaceCulling
closest
ccdPenetration
behaviors
gravity
timeStep
contactDelegate
T@"<SCNPhysicsContactDelegate>",W
allBehaviors
{CGPoint=dd}
SKGlobalSharedContextRegistry
SCNLightAttenuationStartKey
SCNLightAttenuationEndKey
SCNLightAttenuationFalloffExponentKey
SCNLightSpotInnerAngleKey
SCNLightSpotOuterAngleKey
SCNLightSpotFalloffExponentKey
SCNLightShadowNearClippingKey
SCNLightShadowFarClippingKey
SCNLightGoboProjectShadows
SCNLightConstantAttenuationKey
SCNLightLinearAttenuationKey
SCNLightQuadraticAttenuationKey
SCNLightFallOffAngleKey
SCNLightFallOffExponentKey
SCNLightHotspotBeamKey
omni
directional
spot
probe
<%@: %p '%@' | type=%@>
<%@: %p | type=%@>
-[SCNLight setName:]
%@.%@
-[SCNLight setAttenuationEndDistance:]
-[SCNLight setAttenuationFalloffExponent:]
-[SCNLight setAttenuationStartDistance:]
-[SCNLight setBaked:]
-[SCNLight setCastsShadow:]
-[SCNLight setCategoryBitMask:]
-[SCNLight setColor:]
-[SCNLight setIntensity:]
-[SCNLight setOrthographicScale:]
-[SCNLight setShadowBias:]
-[SCNLight setShadowColor:]
-[SCNLight setShadowMapSize:]
-[SCNLight setShadowRadius:]
-[SCNLight setShadowSampleCount:]
-[SCNLight setSpotFalloffExponent:]
-[SCNLight setSpotInnerAngle:]
-[SCNLight setSpotOuterAngle:]
-[SCNLight setTechnique:]
-[SCNLight setTemperature:]
-[SCNLight setType:]
-[SCNLight setUsesDeferredShadows:]
-[SCNLight setUsesModulatedMode:]
-[SCNLight setZFar:]
-[SCNLight setZNear:]
-[SCNLight setShadowCascadeCount:]
-[SCNLight setAutomaticallyAdjustsShadowProjection:]
-[SCNLight setMaximumShadowDistance:]
-[SCNLight setForcesBackFaceCasters:]
-[SCNLight setSampleDistributedShadowMaps:]
-[SCNLight setShadowCascadeSplittingFactor:]
-[SCNLight set_shadowCascadeDebugFactor:]
usesDeferredShadows
lightCategoryBitMask
spotFallOffExponent
probeType
probeUpdateType
parallaxCorrectionEnabled
probeExtentsX
probeExtentsY
probeExtentsZ
probeOffsetX
probeOffsetY
probeOffsetZ
parallaxOffsetX
parallaxOffsetY
parallaxOffsetZ
parallaxExtentsFactorX
parallaxExtentsFactorY
parallaxExtentsFactorZ
maximumShadowDistance
autoShadowProjection
shadowCascadeCount
shadowCascadeSplittingFactor
forcesBackFaceCasters
sampleDistributedShadowMaps
version
castsShadow
usesModulatedMode
baked
shouldBakeDirectLighting
shouldBakeIndirectLighting
sphericalHarmonics
scncolor
shadowSampleCount
shadowSampleCount2
IESProfileURL
technique
probeTexture
T@"SCNTechnique",C,N
T@"NSString",C,N
T@,&,N
T{CGSize=dd},N
shadowMode
automaticallyAdjustsShadowProjection
T@"NSURL",&,N
sphericalHarmonicsCoefficients
T@"NSData",R,C,N
T@"SCNMaterialProperty",R,N
VertexCache
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Core/C3DMeshElement_Tools.cpp
cacheSize < kMaxCacheSize
C3DFramebufferRegistry
<C3DFramebufferRegistry>
(null)
v36@?0I8^^{__C3DNode}12^^{__C3DLight}20^(?={?=ffff})28
v36@?0I8^^{__C3DNode}12^^{__C3DLight}20^28
v36@?0I8^^{__C3DNode}12^^{__C3DLight}20^{?=ffff}28
C3DLightingSystem
<C3DLightingSystem %p>
offsetX
offsetY
mappingChannel
-[SCNMaterial setName:]
  %@=%@
.color
content
-[SCNMaterial _shadableSetValue:forUndefinedKey:]
shaderModifiers.
customMaterialProperties
customMaterialAttributes
-[SCNMaterial setShaderModifiers:]
-[SCNMaterial copyShaderModifiersFrom:]
-[SCNMaterial setProgram:]
valuesForUndefinedKeys
failed to archive material's custom attributes. %@ %@
lightingModelName
shadableHelper
avoidsOverLighting
writesToDepthBuffer
readsFromDepthBuffer
colorBufferWriteMask
T@"SCNProgram",&,N
T@"NSDictionary",C,N
TB,N,GisLitPerPixel
TB,N,GisDoubleSided
{CGRect={CGPoint=dd}{CGSize=dd}}
Position
Angle
RotationAxis
Velocity
AngularVelocity
Life
Opacity
Size
Frame
FrameRate
Bounce
Friction
Charge
ContactPoint
ContactNormal
-[SCNParticleSystem setName:]
scnp
failed to unarchive particle data at %@ (%@)
-[SCNParticleSystem setParticleGeometries:]
-[SCNParticleSystem setColliderNodes:]
-[SCNParticleSystem setPropertyControllers:]
-[SCNParticleSystem setParticleImage:]
-[SCNParticleSystem _setParticleImagePath:withResolvedPath:]
-[SCNParticleSystem setOrientationDirection:]
orientationDirection
-[SCNParticleSystem setLightEmissionRadiusFactor:]
fixedTimeStep
-[SCNParticleSystem setAffectedByGravity:]
-[SCNParticleSystem setAffectedByPhysicsFields:]
-[SCNParticleSystem setBirthDirection:]
-[SCNParticleSystem setBirthLocation:]
-[SCNParticleSystem setBirthRate:]
birthRate
-[SCNParticleSystem setBirthRateVariation:]
birthRateVariation
-[SCNParticleSystem setBlackPassEnabled:]
-[SCNParticleSystem setBlendMode:]
-[SCNParticleSystem setDampingFactor:]
dampingFactor
-[SCNParticleSystem setEmissionDuration:]
emissionDuration
-[SCNParticleSystem setEmissionDurationVariation:]
emissionDurationVariation
-[SCNParticleSystem setEmitterShape:]
-[SCNParticleSystem setFixedTimeStep:]
-[SCNParticleSystem setFresnelExponent:]
-[SCNParticleSystem setIdleDuration:]
idleDuration
-[SCNParticleSystem setIdleDurationVariation:]
idleDurationVariation
-[SCNParticleSystem setImageSequenceAnimationMode:]
-[SCNParticleSystem setImageSequenceColumnCount:]
imageSequenceColumnCount
-[SCNParticleSystem setImageSequenceFrameRate:]
imageSequenceFrameRate
-[SCNParticleSystem setImageSequenceFrameRateVariation:]
imageSequenceFrameRateVariation
-[SCNParticleSystem setImageSequenceInitialFrame:]
imageSequenceInitialFrame
-[SCNParticleSystem setImageSequenceInitialFrameVariation:]
imageSequenceInitialFrameVariation
-[SCNParticleSystem setImageSequenceRowCount:]
imageSequenceRowCount
-[SCNParticleSystem setIsLocal:]
isLocal
-[SCNParticleSystem setLightingEnabled:]
-[SCNParticleSystem setLoops:]
-[SCNParticleSystem setOrientationMode:]
-[SCNParticleSystem setParticleAngle:]
particleAngle
-[SCNParticleSystem setParticleAngleVariation:]
particleAngleVariation
-[SCNParticleSystem setParticleAngularVelocity:]
particleAngularVelocity
-[SCNParticleSystem setParticleAngularVelocityVariation:]
particleAngularVelocityVariation
-[SCNParticleSystem setParticleBounce:]
particleBounce
-[SCNParticleSystem setParticleBounceVariation:]
particleBounceVariation
-[SCNParticleSystem setParticleCharge:]
particleCharge
-[SCNParticleSystem setParticleChargeVariation:]
particleChargeVariation
-[SCNParticleSystem setParticleColor:]
particleColor
-[SCNParticleSystem setParticleDiesOnCollision:]
-[SCNParticleSystem setParticleFriction:]
particleFriction
-[SCNParticleSystem setParticleFrictionVariation:]
particleFrictionVariation
-[SCNParticleSystem setParticleLifeSpan:]
particleLifeSpan
-[SCNParticleSystem setParticleLifeSpanVariation:]
particleLifeSpanVariation
-[SCNParticleSystem setParticleMass:]
particleMass
-[SCNParticleSystem setParticleMassVariation:]
particleMassVariation
-[SCNParticleSystem setParticleSize:]
particleSize
-[SCNParticleSystem setParticleSizeVariation:]
particleSizeVariation
-[SCNParticleSystem setParticleVelocity:]
particleVelocity
-[SCNParticleSystem setParticleVelocityVariation:]
particleVelocityVariation
-[SCNParticleSystem setPhysicsCollisionsEnabled:]
-[SCNParticleSystem setRenderingMode:]
-[SCNParticleSystem setSeed:]
-[SCNParticleSystem setSoftParticlesEnabled:]
-[SCNParticleSystem setSortingMode:]
-[SCNParticleSystem setSpeedFactor:]
speedFactor
-[SCNParticleSystem setSpreadingAngle:]
spreadingAngle
-[SCNParticleSystem setStretchFactor:]
stretchFactor
-[SCNParticleSystem setSystemSpawnedOnCollision:]
-[SCNParticleSystem setSystemSpawnedOnDying:]
-[SCNParticleSystem setSystemSpawnedOnLiving:]
-[SCNParticleSystem setWarmupDuration:]
warmupDuration
-[SCNParticleSystem setParticleIntensity:]
particleIntensity
-[SCNParticleSystem setParticleIntensityVariation:]
particleIntensityVariation
-[SCNParticleSystem setParticleColorVariation:]
particleColorVariation
-[SCNParticleSystem setEmittingDirection:]
emittingDirection
-[SCNParticleSystem setAcceleration:]
acceleration
particleImage
emitterShape
birthLocation
birthDirection
affectedByPhysicsFields
physicsCollisionsEnabled
lightingEnabled
softParticlesEnabled
particleDiesOnCollision
blackPassEnabled
systemSpawnedOnCollision
systemSpawnedOnDying
systemSpawnedOnLiving
seed
renderingMode
orientationMode
imageSequenceAnimationMode
particleGeometries
colliderNodes
propertyControllers
sortingMode
T@"SCNGeometry",&,N
local
TB,N,GisLocal
T@"SCNParticleSystem",&,N
T@"UIColor",&,N
TB,N,GisBlackPassEnabled
TB,N,GisLightingEnabled
T@"NSArray",C,N
width
height
length
kProjectionTransform
kModelTransform
kViewTransform
kModelViewProjectionTransform
kModelViewTransform
kNormalTransform
kRenderPassName
-[SCNNode setName:]
%s%s {
dump node tree (%@)
------------------------------------------------------
%@%@
<%p>
-[SCNNode _setQuaternion:]
-[SCNNode _setPosition:]
-[SCNNode _setScale:]
-[SCNNode setMovabilityHint:]
-[SCNNode setCastsShadow:]
-[SCNNode setCategoryBitMask:]
-[SCNNode setHidden:]
-[SCNNode setOpacity:]
-[SCNNode setRenderingOrder:]
 pos(%f %f %f)
 rot(%f %f %f %f)
 scale(%f %f %f)
 light=%@
 camera=%@
 geometry=%@
 | no child
 | 1 child
 | %d children
nodes
filters.
-[SCNNode setValue:forUndefinedKey:]
Error: physicsBody %@ already has a owner: %@ that is not %@
constraints
physicsBody
physicsField
particleSystem
fixedBoundingBoxExtrema[0]
fixedBoundingBoxExtrema[1]
paused
focusBehavior
action-keys
actions
clientAttributes
failed to archive node's client attributes. %@ %@
movabilityHint
renderingOrder
hasActions
actionKeys
preferredFocusEnvironments
T@"NSArray",R,C,N
parentFocusEnvironment
T@"<UIFocusEnvironment>",R,W,N
focusItemContainer
T@"<UIFocusItemContainer>",R,N
preferredFocusedView
T@"UIView",R,W,N
canBecomeFocused
frame
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
T@"SCNLight",&,N
T@"SCNCamera",&,N
T@"SCNSkinner",&,N
T@"SCNMorpher",&,N
T{SCNMatrix4=ffffffffffffffff},R,N
worldPosition
worldOrientation
TB,N,GisHidden
parentNode
T@"SCNPhysicsBody",&,N
T@"SCNPhysicsField",&,N
T@"NSArray",C
presentationNode
TB,N,GisPaused
T@"<SCNNodeRendererDelegate>",N
worldRight
worldFront
localUp
localRight
localFront
-[SCNNode(SIMD) setSimdPivot:]
-[SCNNode(SIMD) setSimdTransform:]
-[SCNNode(SIMD) setSimdRotation:]
simdTransform
T{?=[4]},N
simdPosition
simdRotation
simdOrientation
T{?=},N
simdEulerAngles
simdScale
simdPivot
simdWorldPosition
simdWorldOrientation
simdWorldTransform
simdWorldUp
T,R,N
simdWorldRight
simdWorldFront
simdLocalUp
simdLocalRight
simdLocalFront
kSceneStartTimeAttributeKey
kSceneEndTimeAttributeKey
kSceneFrameRateAttributeKey
kSceneUpAxisAttributeKey
org.khronos.collada.digital-asset-exchange
scnz
com.apple.scenekit.scene
com.apple.scenekit.scene.zip
MDLAsset
sceneDump%d.scn
dumping scene to %@
children[
physicsWorld
userAttributes
sourceURL
T@"SCNPhysicsWorld",R,N
lightingEnvironment
SCNRendererOffscreenSampleCount
viewMatrix
T{SCNMatrix4=ffffffffffffffff},N,VviewMatrix
projectionMatrix
T{SCNMatrix4=ffffffffffffffff},N,VprojectionMatrix
transition pass
outgoingScene
T@"SCNScene",&,N,V_outgoingScene
transition
T@"SKTransition",&,N,V_transition
transitionStartTime
Td,N,V_transitionStartTime
outgoingPointOfView
T@"SCNNode",&,N,V_outgoingPointOfView
com.apple.scenekit.renderingQueue.%@%p
SKSCNRenderer
<SCNRenderer %p: scene = %@, pointOfView = %@, sceneTime = %f, context = %p>
SceneKit - Delete Framebuffer
SceneKit - Create Framebuffer
camera.xFov
camera.yFov
camera.fieldOfView
camera.orthographicScale
camera.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DKit/context/SCNRenderer.m
We should have an engine context at this stage
No C Scene associated with %@
Metal implementation not done
sceneTime
SpriteKit - Draw Overlay
SceneKit - Flush
SceneKit - Jitter
T@"SCNScene",&,N
T@"<SCNSceneRendererDelegate>",W,N
playing
TB,GisPlaying
autoenablesDefaultLighting
jitteringEnabled
TB,N,GisJitteringEnabled
debugOptions
overlaySKScene
T@"SKScene",&,N
renderingAPI
TQ,R,N
context
T^v,R,N
audioEngine
T@"AVAudioEngine",R,N
audioEnvironmentNode
T@"AVAudioEnvironmentNode",R,N
audioListener
nextFrameTime
textureID
TI,R,N
antialiasingMode
path
flatness
entityID
basic
keyframe
group
class
keyPath
animation-players
animation-keys
keyPathSrc
keyPathDst
bindings
.app/Contents/
imageNamed
imageNamed://
MDLSkyCubeTexture
turbidity
sunElevation
upperAtmosphereScattering
groundAlbedo
horizonElevation
gamma
exposure
brightness
channelEncoding
dimensions.x
dimensions.y
highDynamicRangeCompression.x
highDynamicRangeCompression.y
groundColor
Error: ranges and strings arrays must be of the same size
Error: ranges must be ordered
Error: incorrect ranges : cumulated size larger than the original string
SCNAnimationCommitOnCompletion
SCN_CAKeyframeAnimation %p (duration=%f, keyPath:%@)
c3dAnimation
commitsOnCompletion
removedOnCompletion
CAKeyframeAnimation based on CGPath are not supported
SCNAnimationAnimatesUsingSceneTimeKey
SCNAnimationFadeInDurationKey
SCNAnimationFadeOutDurationKey
SCNAnimationEventsKey
animationEvents
c3dTimingFunction
applyOnCompletion
fillForward
fillBackward
userInfo
failed to archive animation's userinfo. %@ %@
appliedOnCompletion
scna
<SCNAnimation(%p) keyPath=%@ duration=%f repeatCount=%f>
T@"SCNTimingFunction",&,N
blendInDuration
blendOutDuration
TB,N,GisRemovedOnCompletion
TB,N,GisAppliedOnCompletion
startDelay
fillsForward
fillsBackward
animationDidStart
animationDidStop
TB,N,GisAdditive
TB,N,GisCumulative
weight
<SCNAnimationPlayer(%p) animation=%@>
T@"SCNAnimation",R,N,V_animation
q24@?0@"SCNAnimationEvent"8@"SCNAnimationEvent"16
geometryMemory
textureMemory
SCNSceneSourceUseModelIOToLoadDAEFiles
kSceneSourceCacheScenesByURLKey
kSceneSourceSceneIndexKey
kSceneSourceForceMorphNormals
kSceneSourcePreserveOriginalTopology
SCNSourceURLForCurrentlyUnarchivedScene
SCNDetailedErrorsKey
SCNConsistencyElementIDErrorKey
SCNConsistencyElementTypeErrorKey
SCNConsistencyLineNumberErrorKey
kSceneSourceFormat
SCNSceneSourceInputSource
SCNSceneExportDestinationURL
SCNSceneExportUTIKey
SCNSceneExportCompressGeometryElements
SCNSceneExportEmbedImages
SCNSceneExportEmbedReferences
SCNSceneExportPresentationTree
[SCNSceneSource scenesSourceWithURL:] nil URL
<%@: %p | URL='%@'>
<%@: %p>
The document "%@" could not be opened.
The document data could not be read.
v32@?0f8i12^{__CFError=}16^B24
failed to unarchive data at %@ (%@)
failed to unarchive scene at %@ - unknown decoded object class (%@)
failed to unarchive scene at %@ (%@)
v36@?0f8q12@"NSError"20^B28
@16@?0^v8
NSColor
SCNScene
NSSecureCoding
T@"NSURL",R
T@"NSData",R
documentURL
T@"NSURL",&,N,V_documentURL
T@"NSDictionary",&,N,V_context
assetCatalog
T@"SCNAssetCatalog",&,N,V_assetCatalog
lookUpKey
T@"NSString",&,N,VlookUpKey
lookUpFoundInstance
T@,&,N,VlookUpFoundInstance
documentEnclosingURL
T@"NSURL",R,N
T@"NSDictionary",C,N,Voptions
bplist
textureCoordinate is deprecated - use textureCoordinateWithMappingChannel instead
<%@: %p <%f,%f,%f> | geometryIndex=%d node=%@ bone=%@>
geometryIndex
Tq,R,N
faceIndex
localCoordinates
worldCoordinates
localNormal
worldNormal
modelTransform
boneNode
simdLocalCoordinates
simdWorldCoordinates
simdLocalNormal
simdWorldNormal
simdModelTransform
a_vertexColor
a_TexTangent
a_diffuseTexcoord
a_ambientTexcoord
a_specularTexcoord
a_emissionTexcoord
a_filterTexcoord
a_transparentTexcoord
a_normalTexcoord
a_lightmapTexcoord
u_nodeOpacity
u_skinningJointMatrices
u_materialShininess
u_ambientColor
u_ambientIntensity
u_ambientTexture
u_ambientTextureMatrix
u_diffuseColor
u_diffuseIntensity
u_diffuseTexture
u_diffuseTextureMatrix
u_specularColor
u_specularIntensity
u_specularTexture
u_specularTextureMatrix
u_emissionColor
u_emissionIntensity
u_emissionTexture
u_emissionTextureMatrix
u_multiplyColor
u_multiplyIntensity
u_multiplyTexture
u_multiplyTextureMatrix
u_transparency
u_transparentColor
u_transparentIntensity
u_transparentTexture
u_transparentTextureMatrix
u_normalTexture
u_normalIntensity
u_normalTextureMatrix
u_shininessTexture
u_shininessTextureMatrix
u_lightmapTexture
u_reflectiveColor
u_reflectiveIntensity
u_reflectiveTexture
u_reflectiveTextureMatrix
u_fresnel
u_ambientLightColor
u_shCoefficients
u_light%d_attenuation
u_light%d_spotAttenuation
u_light%d_color
u_light%d_position
u_light%d_direction
u_light%d_up
u_light%d_right
u_light%d_gobo
u_light%d_goboMatrix
u_light%d_goboIntensity
u_light%d_iesMatrix
u_light%d_iesTex
u_light%d_shadow
u_light%d_shadowMatrix
u_light%d_shadowRadius
u_light%d_shadowColor
u_zRange
u_orientationPreserved
u_shadowKernel
_layerRoot
_overlayLayerRoot
_lightRoot
_cameraRoot
_particlesRoot
_physicsFieldRoot
_pointsOfViewRoot
Perspective
Bottom
Left
Right
Front
Back
_authoringCamera%s
lightAuth
particlesAuth
kSCNFreeViewCameraName
cameraAuth
cameraFrustumAuth
cameraNearPlaneAuth
fieldAuth
lightInnerAuth
lightOuterAuth
lightArrowAuth
lightShadowAuth
lightSpotAuth
probeGeometry
lightProbeExtents
DBGLightType
disabled
oa:%f ia:%f s:%f e:%f
AuthEnvHash
sourceShape
authoringLayer
authoringOverlayLayer
manipulator
T@"SCNManipulator",R,N
displayMask
authoringCameraType
C3DFXOutline.plist
C3DFXOutlineRetina.plist
C3DFXAuthoring.plist
PickedObject.glsl
ControllerAnimation
ControllerVariableMode
ControllerVariableOverLife
ControllerVariableOverDistance
ControllerVariableOverOtherProperty
ControllerVariableOrigin
ControllerVariableScale
ControllerVariableBias
C3DParticleSystem
<C3DParticleSystemRef>
InvLifeSpan
BirthTime
SortingIndices
Mass
TempData
EventIndex
C3DLibrarySubStorage
<C3DLibrarySubStorage>
C3DLibrary
<C3DLibrary>
kPrimitiveGenerateMappingCoordinates
kPrimitiveVertexTransformation
kPrimitiveWidthSegments
kPrimitiveHeightSegments
kPrimitiveLengthSegments
kPrimitiveChamferSegments
kPrimitiveRotationSegments
kPrimitiveCapSegments
kPrimitiveRingSegments
kPrimitivePipeSegments
kPrimitiveSphereType
kPrimitiveSphereSegments
kPrimitiveTypeSphere
kPrimitiveTypeGeosphere
widthSegmentCount
heightSegmentCount
lengthSegmentCount
chamferSegmentCount
segmentCount
radialSegmentCount
ringSegmentCount
pipeSegmentCount
-[SCNFloor setReflectionResolutionScaleFactor:]
-[SCNFloor setReflectionCategoryBitMask:]
-[SCNFloor setWidth:]
-[SCNFloor setLength:]
-[SCNFloor setReflectionFalloffEnd:]
reflectionFalloffEnd
-[SCNFloor setReflectionFalloffStart:]
reflectionFalloffStart
-[SCNFloor setReflectionSampleCount:]
-[SCNFloor setReflectivity:]
reflectionCategoryBitMask
reflectionResolutionScaleFactor
C3DFloor
<C3DFloor>
resolutionScaleFactor
sampleCount
reflectionBitMask
<%@: %p '%@'>
-[SCNCamera setName:]
-[SCNCamera setScreenSpaceAmbientOcclusionIntensity:]
-[SCNCamera setScreenSpaceAmbientOcclusionRadius:]
-[SCNCamera setScreenSpaceAmbientOcclusionBias:]
-[SCNCamera setScreenSpaceAmbientOcclusionDepthThreshold:]
-[SCNCamera setScreenSpaceAmbientOcclusionNormalThreshold:]
-[SCNCamera setScreenSpaceAmbientOcclusionSampleCount:]
-[SCNCamera setScreenSpaceAmbientOcclusionDownSample:]
-[SCNCamera setAutomaticallyAdjustsZRange:]
-[SCNCamera setAverageGray:]
-[SCNCamera setBloomBlurRadius:]
-[SCNCamera setBloomIntensity:]
-[SCNCamera setBloomThreshold:]
-[SCNCamera setBloomIteration:]
-[SCNCamera setCategoryBitMask:]
-[SCNCamera setColorFringeStrength:]
-[SCNCamera setColorFringeIntensity:]
-[SCNCamera setContrast:]
-[SCNCamera setExposureAdaptationBrighteningSpeedFactor:]
-[SCNCamera setExposureAdaptationDarkeningSpeedFactor:]
-[SCNCamera setExposureAdaptationDuration:]
-[SCNCamera setExposureAdaptationHistogramRangeHighProbability:]
-[SCNCamera setExposureAdaptationHistogramRangeLowProbability:]
-[SCNCamera setExposureAdaptationMode:]
-[SCNCamera setExposureOffset:]
-[SCNCamera setDofIntensity:]
-[SCNCamera setMaximumExposure:]
-[SCNCamera setMinimumExposure:]
-[SCNCamera setMotionBlurIntensity:]
-[SCNCamera setOrthographicScale:]
-[SCNCamera setSaturation:]
-[SCNCamera setUsesOrthographicProjection:]
-[SCNCamera setVignettingIntensity:]
-[SCNCamera setVignettingPower:]
-[SCNCamera setWantsExposureAdaptation:]
-[SCNCamera setWantsHDR:]
-[SCNCamera setWhitePoint:]
-[SCNCamera setXFov:]
-[SCNCamera setYFov:]
-[SCNCamera setZFar:]
-[SCNCamera setZNear:]
-[SCNCamera setFieldOfView:]
-[SCNCamera setSensorHeight:]
-[SCNCamera setFocalLength:]
-[SCNCamera setFStop:]
-[SCNCamera setApertureBladeCount:]
-[SCNCamera setFocalBlurSampleCount:]
-[SCNCamera setFocusDistance:]
-[SCNCamera setProjectionTransform:]
usesOrthographicProjection
automaticallyAdjustsZRange
projectionDirection
focalBlurSampleCount
exposureAdaptationMode
colorGrading
wantsHDR
wantsExposureAdaptation
focalBlurRadius
wantsDepthOfField
glID
TI,N,VglID
TI,N,Vtarget
T^v,N,Vcontext
T{CGSize=dd},N,Vsize
invalid wrapS value: %d
invalid wrapT value: %d
-[SCNMaterialProperty setContentsTransform:]
<%@: %p | contents=%@>
<data %p>
imageArray
skscene
sktexture
attachment
isCommonProfileProperty
propertyType
customSlotName
sRGB
textureComponents
SKScene
SKTexture
GLKTextureInfo
v24@?0Q8r^{SmartPtr<__C3DArray *, C3D::detail::CFRetainFct, C3D::detail::CFReleaseFct>=^{__C3DArray}}16
C3DProgramHashCodeStore
<C3DProgramHashCodeStore %p>
-[SCNGeometry setName:]
%@: %p '%@'
%@: %p
 | %d elements
<%@>
geometrySourceForSemantic is deprecated - use geometrySourcesForSemantic instead
-[SCNGeometry setBoundingBoxMin:max:]
materials[
q24@?0@8@16
-[SCNGeometry _shadableSetValue:forUndefinedKey:]
-[SCNGeometry setShaderModifiers:]
-[SCNGeometry copyShaderModifiersFrom:]
-[SCNGeometry setProgram:]
elements
sourceChannels
failed to archive geometry's custom attributes. %@ %@
subdivisionLevel
wantsAdaptiveSubdivision
edgeCreasesSource
edgeCreasesElement
subdivisionSettings
T@"SCNMaterial",&,N
geometrySources
geometryElementCount
T@"SCNGeometryElement",&,N
T@"SCNGeometrySource",&,N
C3DFXGLSLProgramObject
<C3DFXGLSLProgramObject %p>
SCNErrorDomain
item
T@,&,N,Vitem
timestamp
Td,N,Vtimestamp
scnasset
.scnassets
catalogURL
T@"NSURL",R,N,V_catalogURL
inputMode
inputScale
inputBias
inputOrigin
inputProperty
T@"CAAnimation",&,N
T@"SCNNode",W,N
skeleton
baseGeometry
baseGeometryBindTransform
bones
compressedSkinData
boneWeights
boneIndices
baseGeometryBindTransform-%d
boneInverseBindTransforms
T@"SCNGeometrySource",R,N
C3DGeometryInitSubdivTopologyInfoIfNeeded
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Core/C3DGeometryOpenSubdivSupportInternal.cpp
(int32_t)vertexCountPerFaceCurrentIndex == topologyInfo->topologyDescriptor.numFaces
vertIndicesPerFaceCurrentIndex == topologyInfo->totalIndexCount
C3DSubdivCreateMesh
faceVertexIndices.size() == 4
Interpolate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/primvarRefiner.h
level>0 && level<=(int)_refiner._refinements.size()
interpFromEdges
refinement.getNumChildVerticesFromFaces() > 0
Vtr::IndexIsValid(cVertOfFace)
interpFromVerts
vMask.AreFaceWeightsForFaceCenters()
assignSmoothMaskForVertex
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/../sdc/catmarkScheme.h
vertex.GetNumFaces() == vertex.GetNumEdges()
CombineVertexVertexMasks
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/../sdc/../sdc/scheme.h
this->AreFaceWeightsForFaceCenters() == dst.AreFaceWeightsForFaceCenters()
InterpolateVarying
InterpolateFaceVarying
interpFVarFromEdges
eFaceIndex == i
interpFVarFromVerts
pSibling == cSibling
CreateMeshSources
faceVertexCount == 4
Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.
limit
tan1Mask.GetNumFaceWeights() == tan2Mask.GetNumFaceWeights()
tan1Mask.GetNumEdgeWeights() == tan2Mask.GetNumEdgeWeights()
assignSmoothLimitMask
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/../sdc/loopScheme.h
valence != 2
preferredFrameRate
adaptativeFrameRate
C3DSkinner
<C3DSkinner %p skeleton:%p jointCount:%d cpuReady:%d gpuReady:%d
  skin:%p skinnedMesh:%p calcMode:%d
  JointBbox[%d] {%f,%f,%f} {%f,%f,%f}
skeletonID
skinID
meshCreated
bboxDirty
skinnedMesh
verticesJointsMatrices[%d]
normalsJointsMatrices[%d]
 %f %f %f %f
C3DSkin
<C3DSkin %p name:%@ joint:%d weight:%d vertexCount:%d
  maxInf:%d morpher:%p
defaultShapeMatrix
inverseBindMatrix
jointsCount
maxInfluences
inverseBindMatrices
defaultShapeMatrix
baseMeshID
weightsCount
vertexWeightIndices
jointsForVertexWeights
vertexWeights
maxInfluencesPerVertex
influencingMorpher
vertexWeightIndices[%d]
vertexWeights[%d]
jointsForVertexWeights[%d]
C3DIONSZipFileArchiveHeaderOffset
C3DIONSZipFileArchiveCompressionType
C3DIONSZipFileArchiveCRC
C3DIONSZipFileArchiveCompressedLength
C3DIONSZipFileArchiveUncompressedLength
1.2.11
C3DSourceAccessor
<C3DSourceAccessor %lx>
componentsCountPerValue
count
<C3DGenericSource %lx>
delegationBlock
C3DGenericSource
C3DResourceCache
<C3DResourceCache 0x%lx>
C3DAnimationGroup
<C3DAnimationGroup %p animations:%@>
channels
targetPath
subAnimations
normals
vehicle
wheelIndex
suspensionStiffness
suspensionCompression
suspensionDamping
maximumSuspensionTravel
frictionSlip
maximumSuspensionForce
connectionPosition
steeringAxis
axle
radius
suspensionRestLength
isFront
T{SCNVector3=fff}
T@,&,N,VsourceObject
T@"NSString",&,N,VkeyPathSrc
T@"NSString",&,N,VkeyPathDst
T@"NSDictionary",&,N,Voptions
v40@?0q8q16q24q32
v24@?0d8f16f20
v28@?0f8f12f16f20f24
-[SCNPlane setCornerRadius:]
cornerRadius
-[SCNPlane setCornerSegmentCount:]
cornerSegmentCount
-[SCNPlane setHeight:]
-[SCNPlane setHeightSegmentCount:]
-[SCNPlane setPrimitiveType:]
-[SCNPlane setWidth:]
-[SCNPlane setWidthSegmentCount:]
<%@ | width=%.3f height=%.3f>
primitiveType
-[SCNBox setChamferRadius:]
chamferRadius
-[SCNBox setChamferSegmentCount:]
-[SCNBox setHeight:]
-[SCNBox setHeightSegmentCount:]
-[SCNBox setLength:]
-[SCNBox setLengthSegmentCount:]
-[SCNBox setPrimitiveType:]
-[SCNBox setWidth:]
-[SCNBox setWidthSegmentCount:]
<%@ | width=%.3f height=%.3f length=%.3f chamferRadius=%.3f>
boxwidth
boxheight
boxlength
boxchamferRadius
boxwidthSegmentCount
boxheightSegmentCount
boxlengthSegmentCount
boxchamferSegmentCount
boxprimitiveType
-[SCNPyramid setHeight:]
-[SCNPyramid setHeightSegmentCount:]
-[SCNPyramid setLength:]
-[SCNPyramid setLengthSegmentCount:]
-[SCNPyramid setPrimitiveType:]
-[SCNPyramid setWidth:]
-[SCNPyramid setWidthSegmentCount:]
<%@ | width=%.3f height=%.3f length=%.3f>
pyramidwidth
pyramidheight
pyramidlength
pyramidwidthSegmentCount
pyramidheightSegmentCount
pyramidlengthSegmentCount
pyramidprimitiveType
-[SCNSphere setGeodesic:]
-[SCNSphere setHemispheric:]
-[SCNSphere setPrimitiveType:]
-[SCNSphere setRadialSpan:]
radialSpan
-[SCNSphere setRadius:]
-[SCNSphere setSegmentCount:]
<%@ | radius=%.3f>
sphereradius
sphereradialSpan
spheresegmentCount
sphereprimitiveType
spheregeodesic
spherehemispheric
geodesic
TB,N,GisGeodesic
-[SCNCylinder setHeight:]
-[SCNCylinder setHeightSegmentCount:]
-[SCNCylinder setPrimitiveType:]
-[SCNCylinder setRadialSegmentCount:]
-[SCNCylinder setRadialSpan:]
-[SCNCylinder setRadius:]
<%@ | radius=%.3f height=%.3f>
cylinderradius
cylinderheight
cylinderradialSpan
cylinderheightSegmentCount
cylinderradialSegmentCount
cylinderprimitiveType
-[SCNCone setBottomRadius:]
bottomRadius
-[SCNCone setHeight:]
-[SCNCone setHeightSegmentCount:]
-[SCNCone setPrimitiveType:]
-[SCNCone setRadialSegmentCount:]
-[SCNCone setTopRadius:]
topRadius
<%@ | topRadius=%.3f bottomRadius=%.3f height=%.3f>
conetopRadius
conebottomRadius
coneheight
coneheightSegmentCount
coneradialSegmentCount
coneprimitiveType
-[SCNTube setHeight:]
-[SCNTube setHeightSegmentCount:]
-[SCNTube setInnerRadius:]
innerRadius
-[SCNTube setOuterRadius:]
outerRadius
-[SCNTube setPrimitiveType:]
-[SCNTube setRadialSegmentCount:]
-[SCNTube setRadialSpan:]
<%@ | innerRadius=%.3f outerRadius=%.3f height=%.3f>
tubeinnerRadius
tubeouterRadius
tubeheight
tuberadialSpan
tubeheightSegmentCount
tuberadialSegmentCount
tubeprimitiveType
-[SCNCapsule setCapRadius:]
capRadius
-[SCNCapsule setCapSegmentCount:]
capSegmentCount
-[SCNCapsule setHeight:]
-[SCNCapsule setHeightSegmentCount:]
-[SCNCapsule setPrimitiveType:]
-[SCNCapsule setRadialSegmentCount:]
<%@ | capRadius=%.3f height=%.3f>
capsulecapRadius
capsuleheight
capsuleheightSegmentCount
capsuleradialSegmentCount
capsulecapSegmentCount
capsuleprimitiveType
-[SCNTorus setPipeRadius:]
pipeRadius
-[SCNTorus setPipeSegmentCount:]
-[SCNTorus setPrimitiveType:]
-[SCNTorus setRadialSpan:]
-[SCNTorus setRingRadius:]
ringRadius
-[SCNTorus setRingSegmentCount:]
<%@ | ringRadius=%.3f pipeRadius=%.3f>
torusringRadius
toruspipeRadius
torusradialSpan
torusringSegmentCount
toruspipeSegmentCount
torusprimitiveType
SCNAction: Custom actions can not be properly encoded, Objective-C blocks do not support NSSecureCoding.
SCNAction: Custom actions can not be properly decoded, Objective-C blocks do not support NSCoding.
_C3DParametricGeometryCreateCacheHash_not_thread_safe
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Core/C3DParametricGeometry.c
size <= sizeof(C3DParametricGeometryType) + sizeof(C3DParametricGeometryParameters)
C3DParametricGeometry
Pyramid
Cylinder
Cone
Tube
Capsule
Torus
Sphere
Plane
<%@<%@>:%p "%@"
true
false
vec2(
vec3(
vec4(
C3DValue
<C3DValue %p - type:%d bytes:%p >
value
C3DFXSampler
<C3DFXSampler>
preferredExtensions
B24@?0^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}8^B16
nodeFromflattenedMesh
frameA
frameB
maximumAngularLimit1
maximumAngularLimit2
maximumTwistAngle
0.10
0.11
kEnclosingFolderURL
kSceneSourceInputLibrary
kC3DIOSerializationExportDelegate
kCreatePropertyListShouldZipOption
kCreatePropertyListShouldKeepReferencesToFilesOption
readerMinimumRequiredVersion
library
Could not get the data for the serialized property list
Could not zip the serialized property list
zippedData
zipped
%.1f %.1f %.1f
meter
unnamed animation #%d
kIDKey
kNameKey
entity-name
entity-ID
_kvc
C3DEntity
<C3DEntity:%p>
C3DEngineNotificationQueue
<C3DEngineNotificationQueue %p>
C3DDynamicBatchingSystem
<C3DDynamicBatchingSystem %p>
SCNPreferredRenderingAPIKey
SCNPreferredDeviceKey
SCNPreferLowPowerDeviceKey
PrefersOpenGL
ibPreferredRenderingAPI
ibWantsMultisampling
allowsCameraControl
backgroundColor
ibSceneName
background.contents
kSCNViewObservingContext
SceneKit - SCNView Draw
renderer.%@
<%@: %p | scene=%@ sceneTime=%f frame=%@ pointOfView=%@>
_UIHostedWindow
SKNode
rendersContinuously
cameraControlConfiguration
T@"<SCNCameraControlConfiguration>",R,N
defaultCameraController
T@"SCNCameraController",R,N
preferredFramesPerSecond
eaglContext
T@"EAGLContext",&,N
SceneKit-spotShadowDepth-%p
SceneKit-spotShadowDepth
C3DFXDeferredShadowPass.json
C3DFXForwardShadowPass.json
SceneKit_renderSceneFromLight
SceneKit_applyDeferredShadows
--ShadowMaterial--
lightDepthSampler
C3D-spotShadow
#define TARGET_OS_IPHONE 1
#define MAX_SAMPLE %d
#define unshareIndex %d
#define SPOT_SHADOW 1
#define USE_PCF 1
C3D-u_lightPos-symbol
C3D-u_lightDir-symbol
C3D-u_lightSpotAtt-symbol
C3D-light_MVP-symbol
C3D-cascadeScale-symbol
C3D-cascadeBias-symbol
C3D-shadowCascadeDebugFactor-symbol
C3D-camera_MVP_i-symbol
C3D-shadowRadius-symbol
C3D-shadowColor-symbol
C3D-shadowKernel-symbol
v16@?0^{__C3DGenericSource={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}8
C3DMorph
<C3DMorph %p "%@"
  calc:%d morphNrm:%d targets:%ld
[%ld] weight:%f %@
morphingType
weightsID
targetIDs
weightsData
<unnamed %d>
C3DMorpher
<C3DMorpher %p baseGeom:%p morphedMesh:%p state:%d
  morph:%@
morphID
Error creating the xml writer
utf-8
Error at xmlTextWriterStartDocument
COLLADA
xmlns
http://www.collada.org/2005/11/COLLADASchema
1.4.1
Error at xmlTextWriterEndDocument
asset
contributor
SceneKit Collada Exporter v1.0
Y_UP
Z_UP
X_UP
yyyy-MM-dd'T'HH:mm:ss'Z'
library_animations
library_animation_clips
effect_
%@%d
(%ld)
can't mix euler and axisangle rotations
transform animation not supported
_copyComponentForColor4Address
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DIO/collada/C3DIOColladaExport.c
offset<4
_copyComponentForMatrixAddress
offset<16
(%zd)(%zd)
_copyComponentForVector3Address
offset<3
_copyComponentForVector4Address
float_array
int_array
Name_array
%s-array
_writeArrayWithWriterFunc
ccpv == 1
_writeArrayWithWriterFunc: unknown array type
technique_common
#%s-array
TIME
ANGLE
TRANSFORM
INTERPOLATION
_writeAccessor
cpv <= sizeof(XYZWNames) / sizeof(char*)
cpv <= sizeof(RGBANames) / sizeof(char*)
cpv <= sizeof(STPQNames) / sizeof(char*)
cpv <= 1
param
LINEAR
HERMITE
STEP
input
INPUT
OUTPUT
IN_TANGENT
OUT_TANGENT
_writeKeyframeAnimation: can't resolve animation path (root)
_writeKeyframeAnimation: can't resolve animation path
channel
%s/%s%s
SID_%d
animation_clip
start
instance_animation
library_cameras
optics
orthographic
xmag
perspective
library_lights
point
%g %g %g
constant_attenuation
linear_attenuation
quadratic_attenuation
falloff_angle
falloff_exponent
extra
profile
shadow
enable
%g %g %g %g
spotParameters
outerAngle
innerAngle
probeParameters
tmpProbe
library_images
init_from
./no-path-found
library_materials
instance_effect
#effect_%s
library_effects
effect_%s
profile_COMMON
common
index_of_refraction
constant_ambient
constant_diffuse
bump
extendedLightingModel
None
double_sided
invertCulling
ambient_diffuse_lock
intensities
newparam
_surface
%s_%s
surface
CUBE
CLAMP
WRAP
BORDER
MIRROR
wrap_s
wrap_t
NONE
NEAREST
minfilter
magfilter
mipfilter
opaque
CHANNEL%d
library_geometries
vertices
%s-vertices
POSITION
NORMAL
TEXCOORD
tristrips
VERTEX
TEXTANGENT
JOINT
WEIGHT
#%s-vertices
%ld 
library_controllers
controller
method
NORMALIZED
RELATIVE
%s-targets
IDREF_array
%s-targets-array
#%s-targets-array
MORPH_TARGET
IDREF
#%s-targets
MORPH_WEIGHT
bind_shape_matrix
INV_BIND_MATRIX
vertex_weights
vcount
%d %ld 
%.7g 
library_visual_scenes
visual_scene
instance_visual_scene
instance_camera
instance_light
user_properties
lightmap_path=%s
uv_set=%d
visibility
translate
rotate
0 0 1 %g
0 1 0 %g
1 0 0 %g
instance_controller
instance_geometry
bind_material
instance_material
symbol
bind_vertex_input
input_semantic
input_set
C3DFXContext
<C3DFXContext>
%d - %@
 (resolve)
 (%dx)
NoName
DEPTH
Ti,R,N
USE_%@
USE_%@_COLOR
USE_%@_INTENSITY
USE_%@_TEXTURE_COMPONENT
USE_%@TEXCOORD
USE_%@_MAP
USE_%@_CUBEMAP
C3D-DefaultProgram
C3DFXGLSLProgram
<C3DFXGLSLProgram %p>
vertexShader
fragmentShader
attributeNamesToIndexes
uniformNamesToIndexes
#extension
C3DRendererDelegate
<C3DRendererDelegate %p>
USE_SPECULAR
USE_VIEW
USE_SHININESS
SCNShaderLightDecl.glsl
float __shadow2DProj(sampler2DShadow tex, vec4 coord) {return shadow2DProjEXT( tex, coord );}
uniform vec4 u_shadowKernel[%d];
USE_FOG
USE_POSITION
USE_FRESNEL
USE_NORMAL
AVOID_OVERLIGHTING
USE_AMBIENT_LIGHTING
USE_LIGHTING
USE_PER_PIXEL_LIGHTING
USE_MODULATE
USE_PER_VERTEX_LIGHTING
USE_VERTEX_COLOR
SCNShaderSurfaceDecl.glsl
USE_AMBIENT_AS_AMBIENTOCCLUSION
USE_EMISSION_AS_SELFILLUMINATION
USE_TANGENT
USE_BITANGENT
    vec2 %@Texcoord;
    _surface.%@Texcoord = v_texcoord%d;
USE_DISCARD
} _surface;
varying vec2 v_texcoord%d;
uniform mat4 u_%@TextureMatrix;
v_texcoord%d = (u_%@TextureMatrix * vec4(_geometry.texcoords[%d], 0., 1.)).xy;
v_texcoord%d = _geometry.texcoords[%d];
NEED_IN_TEXCOORD%d
USE_TEXCOORD
#extension GL_EXT_shadow_samplers : require
C3D-UberShader.vsh
SCNShaderGeometryDecl.glsl
struct SCNShaderLightingContribution {vec3 ambient; vec3 diffuse; vec3 specular; vec3 modulate;} _lightingContribution;
SEPARATE_PROJECTION
__DoTexcoord__
#define kSCNTexcoordCount %ld
USE_SKINNING
MAX_BONE_INFLUENCES
USE_GEOMETRY_MODIFIER
__DoGeometryModifier__
__DoLighting__
#extension GL_OES_standard_derivatives : enable
C3D-UberShader.fsh
USE_SURFACE_MODIFIER
__DoSurfaceModifier__
USE_FRAGMENT_MODIFIER
__DoFragmentModifier__
LOCK_AMBIENT_WITH_DIFFUSE
USE_DOUBLE_SIDED
USE_NODE_OPACITY
DIFFUSE_PREMULTIPLIED
USE_TRANSPARENCY_RGBZERO
u_light%hu
    SCNShaderLight _light;
    _light.intensity = vec4(1.);
uniform vec4 %@_color;
    _light.intensity = %@_color;
uniform vec4 %@_direction;
    _light.direction = %@_direction.xyz;
uniform vec4 %@_position;
    vec3 _D = %@_position.xyz - _surface.position;
    _light.dist = length(_D);
    _light.direction = _D / _light.dist;
    _light.direction = normalize(%@_position.xyz - _surface.position);
    _light.dir = %@_direction.xyz;
//Unsupported
    _light._att = 1.;
uniform vec4 %@_attenuation;
    vec3 _att = %@_attenuation.xyz;
    _light._att *= step(_light.dist, _att.x);
    _light._att *= clamp(_light.dist * _att.x + _att.y, 0.0, 1.0);
    float _dstatt = clamp(_light.dist * _att.x + _att.y, 0.0, 1.0);
    _light._att *= (_dstatt  * _dstatt);
    _light._att *= pow(clamp(_light.dist * _att.x + _att.y, 0.0, 1.0), _att.z);
uniform vec4 %@_spotAttenuation;
    vec3 _spot = %@_spotAttenuation.xyz;
    _light._att *= step(_spot.x, dot(_light.direction, _light.dir));
    _light._att *= clamp(dot(_light.direction, _light.dir) * _spot.x + _spot.y, 0.0, 1.0);
    float _sptatt = clamp(dot(_light.direction, _light.dir) * _spot.x + _spot.y, 0.0, 1.0);
    _light._att *= _sptatt * _sptatt;
    _light._att *= pow(clamp(dot(_light.direction, _light.dir) * _spot.x + _spot.y, 0.0, 1.0), _spot.z);
uniform sampler2DShadow %@_shadow;
uniform mat4 %@_shadowMatrix;
uniform float %@_shadowRadius;
    float _shadowingTerm = 0.0;
    vec4 _lightScreen = (%@_shadowMatrix * vec4(_surface.position, 1.));
    float _filteringSizeFactor = %@_shadowRadius * _lightScreen.w;
    for(int i=0; i < %d; i++){
        _shadowingTerm += __shadow2DProj(%@_shadow, _lightScreen + (u_shadowKernel[i] * _filteringSizeFactor));
    }
    _shadowingTerm /= float(%d);
    float _shadowingTerm = __shadow2DProj(%@_shadow, (%@_shadowMatrix * vec4(_surface.position, 1.)));
uniform vec4 %@_shadowColor;
    _light._att *= (1. - _shadowingTerm * %@_shadowColor.a);
    _light._att *= (1. - _shadowingTerm);
uniform sampler2D %@_gobo;
uniform mat4 %@_goboMatrix;
uniform float %@_goboIntensity;
    _light.intensity *= mix(vec4(1.), texture2DProj(%@_gobo, (%@_goboMatrix * vec4(_surface.position, 1.))), %@_goboIntensity);
    _light.intensity *= %@_goboIntensity * texture2DProj(%@_gobo, (%@_goboMatrix * vec4(_surface.position, 1.)));
    _lightingContribution.modulate *= _light._att * _light.intensity.rgb;
    _light.intensity.rgb *= _light._att * max(0.0, dot(_surface.normal, _light.direction));
    _lightingContribution.diffuse += _light.intensity.rgb;
    vec3 _R = reflect(-_light.direction, _surface.normal);
    _lightingContribution.specular += pow(max(0.0, dot(_R, _surface.view)), _surface.shininess) * _light.intensity.rgb;
    vec3 _halfVector = normalize(_light.direction + _surface.view);
    _lightingContribution.specular += pow(max(0.0, dot(_surface.normal, _halfVector)), _surface.shininess) * _light.intensity.rgb;
  vec4 %@;
uniform %@ %@;
C3DFXDOFPass_deprecated.plist
SceneKit_downSample4x
SceneKit_DOF_blurCoc_H
SceneKit_DOF_blurCoc_V
SceneKit_blurColor4x_H
SceneKit_blurColor4x_V
C3D-dof-lerpBias
C3D-dof-lerpScale
C3D-dof-cocScaleBias
C3D-dof-invertPixelSize
SceneKit: C3DProgressDebugger fractionCompleted > 1.0
fractionCompleted
C3DNotificationCenter
<C3DNotificationCenter %p>
-[SCNMorpher setName:]
<SCNMorpher %p>
weights[%d]
-[SCNMorpher setWeight:forTargetAtIndex:]
-[SCNMorpher setCalculationMode:]
weightID
useSparseTargets
inBetweenCounts
inBetweenInfluenceWeights
shouldMorphNormals
channelTargetCounts
channelTargetWeights
T@"NSArray",&,N
unifiesNormals
com.apple.scenekit.programHashCodeQueue
C3DProgramHashCode
<C3DProgramHashCode %p : 
SM_Mat,
SM_Geo,
Aone,
Acst,
opq,
tgt,
lgh,
amb,
prob,
fog,
dynB,
pntR,
Constant
Lambert
Phong
Blinn
[%@:
PerPix|
Double|
OverLght|
WrNrm|
Nrmliz|
WriteDepth|
LinDepth|
LockAmb|
TrspA
TrspRGB
TrspSL
TrspDL
[Node:
skn(%d)|
LightMap|
VrtCol|
Tess|
AmbientOcclusion
SelfIllumination
Tex|
rgb0|
rgb1|
flt0|
texA|
int|
comp|
mat|
(1D)
(2D)
(3D)
(Cube)
[Lighting:
Soft(%d)
bbox %p - min:[%f %f %f] max:[%f %f %f]
T{SCNVector3=fff},N,Vmin
T{SCNVector3=fff},N,Vmax
bsphere %p - center:[%f %f %f] radius:%f
center
T{SCNVector3=fff},N,Vcenter
Td,N,Vradius
_actions
_mycaction->_animIndex
SCNUITreeDidChange
uiView
T@,&,N,V_uiView
uiWindow
T@,&,N,V_uiWindow
SCN_isBackingUIView
T@,&,N,V_source
_lastRatio
_posTarget.x
_posTarget.y
_posTarget.z
_posTargetReversed.x
_posTargetReversed.y
_posTargetReversed.z
_posStart.x
_posStart.y
_posStart.z
_isReversed
C3DParticleModifier
<C3DParticleModifierRef>
C3DCommandQueue
<C3DCommandQueue>
C3DTransaction
<C3DTransaction>
UITrackingRunLoopMode
animationTimingFunction not implemented for Javascript
animationDuration
animationTimingFunction
T@"CAMediaTimingFunction",C,N
disableActions
completionBlock
kGeometrySourceSemanticTangent
kGeometrySourceSemanticVertexCrease
kGeometrySourceSemanticEdgeCrease
kGeometrySourceSemanticBoneWeights
kGeometrySourceSemanticBoneIndices
<%@: %p | semantic=%@ vectors=%d %@x%d>
vectorCount
floatComponents
bytesPerComponent
componentType
componentsPerVector
dataOffset
dataStride
_geometrySourceWithSource - Conversion failed
Geometry source has invalid bounds
T@"NSString",R,N
mutableData
T@"NSMutableData",R,N
<%@: %p | %u x %@, %u channels, %@ indices>
compressedElementData
elementData
primitiveCount
primitiveRangeLocation
primitiveRangeLength
indicesChannelCount
interleavedIndicesChannels
ptSize
minimumPointScreenSpaceRadius
maximumPointScreenSpaceRadius
pointSize
primitiveRange
T{_NSRange=QQ},N
triangle
triangle strip
line
polygon
renderingAlgorithm
obstruction
occlusion
T{AVAudio3DPoint=fff},N
C3D-wireframe
ManipulatorWireframe_vert
ManipulatorWireframe_frag
SceneKit - Draw Statistics
v32@?0^q8^{CGSize=dd}16^^{?}24
v24@?0{CGSize=dd}8
Animations
Physics
Constraints
Particles
Delegate
Rendering
GL flush
--- ms
%2.1f s
%2.1f ms
$3$%@ $4$%@
Mt %dfps
GL %dfps
sceneRenderer
T@"<SCNSceneRenderer>",R
selectedNodes
selectionIsReadonly
shouldSnapOnGrid
TB,N,V_shouldSnapOnGrid
shouldSnapToAlign
TB,N,V_shouldSnapToAlign
graphicalSelectionEnabled
TB,N,V_graphicalSelectionEnabled
surroundToSelect
TB,N,V_surroundToSelect
authoringDisplayMask
gridUnit
Td,R,N,V_gridUnit
editingSpace
Tq,N,V_editingSpace
T@"<SCNAuthoringEnvironmentDelegate>",W,N,V_delegate
AuthEnvDraw
u_sampler
C3DManipulatorColorAndTexture
C3DManipulatorColorOnly
C3DManipulatorLightProbe
ManipulatorColorAndTexture_vert
ManipulatorColorAndTexture_frag
ManipulatorColorOnly_vert
ManipulatorColorOnly_frag
ManipulatorLightProbe_vert
ManipulatorLightProbe_frag
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
Menlo
%2.1fms
Menlo-Bold
%.3gK
%.3gM
%.3gG
view
T@"SCNView",R
enableFreeCamera
autoSwitchToFreeCamera
freeCamera
setGimbalLockVector is deprecated
Camera
gimbalLockMode
gimbalLockVector
stickyAxis
enableInertia
allowsTranslation
automaticCameraTarget
cameraTarget
_axisRot
_rotX
_rotY
_rotZ
_lastRotX
_lastRotY
_lastRotZ
_isAxisAngle
_isUnitArc
_qRot
http
C3DAvoidOccluderConstraintDelegate
<C3DAvoidOccluderConstraintDelegate %p>
flyModeVelocity
panSensitivity
truckSensitivity
rotationSensitivity
T@"SCNView",N
cameraController
T@"SCNCameraController",R,N,V_cameraController
T@"<SCNCameraNavigationControllerDelegate>",N,V_delegate
TB,N,V_autoSwitchToFreeCamera
Td,N,V_flyModeVelocity
Td,N,V_panSensitivity
Td,N,V_truckSensitivity
Td,N,V_rotationSensitivity
TB,N,V_enableFreeCamera
T@"SCNNode",R,N,V_freeViewCameraNode
T@"SCNView",N,V_view
SCNLayerTreeDidChange
kCARendererFlags
T@,&,N,V_delegate
kExportPointOfViewAttribute
SCNExportSceneIdentifier
SCNExportMovieMirrored
SCNExportMovieSupersamplingFactor
SCNExportMovieFrameRate
SCNExportOperation : error not implemented
T@,N,V_delegate
T^v,N,V_userInfo
didEndSelector
T:,N,V_didEndSelector
T@"SCNScene",&,N,V_scene
T{CGSize=dd},N,V_size
Td,N,V_startTime
Td,N,V_endTime
progress
Td,N,V_progress
canceled
TB,N,V_canceled
succeded
TB,N,V_succeded
T@"NSDictionary",&,N,V_attributes
outputURL
T@"NSURL",&,N,V_outputURL
T@"NSError",&,N,V_error
TQ,N,V_antialiasingMode
renderer
T@"SCNRenderer",&,N,V_renderer
QTAddImageCodecType
QTMovieRateAttribute
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DKit/utils/SCNExport.m
SceneKit: Couldn't create pixel buffer
serial assetwriter input queue
minLinearLimit
maxLinearLimit
minAngularLimit
maxAngularLimit
motorTargetLinearVelocity
motorMaximumForce
motorTargetAngularVelocity
motorMaximumTorque
minimumLinearLimit
maximumLinearLimit
minimumAngularLimit
maximumAngularLimit
C3DGlyphCreate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Primitives/Text/C3DGlyph.c
shapeParams.cgPath == NULL
C3DGlyph
<C3DGlyph '%@' in '%@'>
C3DTextFrame
<C3DTextFrame>
C3DRasterizerStates
<C3DRasterizerStates %p> ZRead:%d ZWrite:%d ZFunc:%d cull:%d fill:%d
B24@?0^{__C3DShapeBoundary=^{__C3DShapeVertex}IIddddi}8^{__C3DShapeBoundary=^{__C3DShapeVertex}IIddddi}16
v24@?0^{__C3DShapeBoundary=^{__C3DShapeVertex}IIddddi}8^{__C3DShapeBoundary=^{__C3DShapeVertex}IIddddi}16
v24@?0^{__C3DShapeBoundary=^{__C3DShapeVertex}IIddddi}8i16i20
C3DAppendPointToPath
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Primitives/Text/C3DShapeUtils.c
origin != C3DShapeVertexOriginCurveStart
C3DTextLine
<C3DTextLine>
astc
_scaleTarget
_scaleTargetReversed
_deltaScale
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Primitives/Text/C3DShapeTriangulation.c
C3DShapeTriangulationTriangleContainingPoint
C3DLinkIndexFromTriangleToTriangle
C3DVertexNotSharedByTriangles
C3DShapeConnectedComponentTriangulatePseudopolygon
list->count > 1
C3DShapeTriangulationAddEdge
recycledTriangles.count == 0
C3DSpokeCreate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Primitives/Text/C3DShapeStraightSkeleton.c
CGPointEqualToPoint(origin, prev) == false
CGPointEqualToPoint(origin, next) == false
!isnan(spoke.direction.x)
!isnan(spoke.direction.y)
intersectionForSpokeAndSpoke
fabs(CGPointNorm(spoke1->direction) - 1) < epsilon
fabs(CGPointNorm(spoke2->direction) - 1) < epsilon
intersectionForSpokeAndEdge
spoke != edgeStart
spoke != edgeEnd
splitJoinFace
event.type == C3DStraightSkeletonEventSplit
spoke->boundaryOfVerticesIndex != INVALID_INDEX
other->boundaryOfVerticesIndex != INVALID_INDEX
d != INVALID_INDEX
f != INVALID_INDEX
C3DOffsetBuild
newFace.boundaries == NULL
T@,&
T{CGRect={CGPoint=dd}{CGSize=dd}}
bounds
T{CGSize=dd}
vector3
T{SCNVector3=fff},R
vector4
T{SCNVector4=ffff},R
matrix4
JSValue
{SCNVector4=ffff}
{SCNVector3=fff}
{SCNMatrix4=ffffffffffffffff}
toVector4
toVector3
toTransform3D
valueWithVector3:inContext:
valueWithVector4:inContext:
valueWithTransform3D:inContext:
_SceneKitIsLoaded
SCNMaterialProperty
SCNBoundingBox
SCNBoundingSphere
SCNTransaction
SCNColor
CAMediaTimingFunction
CABasicAnimation
CAAnimationGroup
CAKeyframeAnimation
CALayer
SCNImage
SCNValue
SCNView
SCNNode
SCNGeometry
SCNPhysicsWorld
SCNPhysicsBody
SCNTransformConstraint
SCNLookAtConstraint
SCNLight
SCNCylinder
SCNGeometryElement
SCNIKConstraint
SCNPhysicsVehicleWheel
SCNRenderer
SCNTube
SCNParticleSystem
SCNMorpher
SCNBox
SCNCamera
SCNLevelOfDetail
SCNMaterial
SCNProgram
SCNParticlePropertyController
SCNConstraint
SCNPlane
SCNCone
SCNPhysicsBehavior
SCNPhysicsHingeJoint
SCNPhysicsField
SCNGeometrySource
SCNTorus
SCNPhysicsShape
SCNCapsule
SCNFloor
SCNShape
SCNText
SCNTechnique
SCNPyramid
SCNSceneSource
SCNSphere
SCNPhysicsBallSocketJoint
SCNPhysicsSliderJoint
SCNPhysicsContact
SCNHitTestResult
SCNAnimationEvent
SCNPhysicsVehicle
SCNAction
SCNActionTimingModeLinear
SCNActionTimingModeEaseIn
SCNActionTimingModeEaseOut
SCNActionTimingModeEaseInEaseOut
SCNEditingLocalSpace
SCNEditingParentSpace
SCNEditingWorldSpace
SCNEditingScreenSpace
SCNManipulatorPositionCenter
SCNManipulatorPositionMin
SCNManipulatorPositionMax
SCNAuthoringDisplayBoundingBoxes
SCNAuthoringDisplayBoundingSpheres
SCNAuthoringDisplayCameraFrustum
SCNAuthoringDisplayLightExtents
SCNAuthoringDisplayCameraPosition
SCNAuthoringDisplayLightPosition
SCNAuthoringDisplayPhysics
SCNAuthoringDisplayPhysicsFields
SCNAuthoringDisplayGrid
SCNAuthoringDisplayLightProbes
SCNAuthoringDisplayWireframe
SCNAuthoringDisplaySkeletons
SCNAuthoringDisplayConstraints
SCNAuthoringDisplayCreases
SCNAuthoringDisplayLightInfluence
SCNAuthoringCameraPerspective
SCNAuthoringCameraTop
SCNAuthoringCameraBottom
SCNAuthoringCameraLeft
SCNAuthoringCameraRight
SCNAuthoringCameraFront
SCNAuthoringCameraBack
SCNCameraProjectionDirectionVertical
SCNCameraProjectionDirectionHorizontal
SCNInteractionModeFly
SCNInteractionModeOrbitTurntable
SCNInteractionModeOrbitAngleMapping
SCNInteractionModeOrbitCenteredArcball
SCNInteractionModeOrbitArcball
SCNInteractionModePan
SCNInteractionModeTruck
SCNCameraFieldOfViewOrientationVertical
SCNCameraFieldOfViewOrientationHorizontal
SCNCameraExposureAdaptationModeFrameLuminance
SCNCameraExposureAdaptationModeHistogramLuminance
SCNCameraFillModeFill
SCNCameraFillModeLetterbox
SCNGeometryPrimitiveTypeTriangles
SCNGeometryPrimitiveTypeTriangleStrip
SCNGeometryPrimitiveTypeLine
SCNGeometryPrimitiveTypePoint
SCNGeometryPrimitiveTypePolygon
SCNSubdivisionBoundaryInterpolationRuleNone
SCNSubdivisionBoundaryInterpolationRuleEdgeOnly
SCNSubdivisionBoundaryInterpolationRuleEdgeAndCorner
SCNSubdivisionFaceVaryingInterpolationRuleLinearNone
SCNSubdivisionFaceVaryingInterpolationRuleLinearCornersOnly
SCNSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus1
SCNSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus2
SCNSubdivisionFaceVaryingInterpolationRuleLinearBoundaries
SCNSubdivisionFaceVaryingInterpolationRuleLinearAll
SCNSubdivisionNormalSmoothingModeCrossTriangle
SCNSubdivisionNormalSmoothingModeCrossQuad
SCNSubdivisionNormalSmoothingModeLimit
SCNHitTestSearchModeClosest
SCNHitTestSearchModeAll
SCNHitTestSearchModeAny
SCNLevelOfDetailThresholdModeWorldSpaceDistance
SCNLevelOfDetailThresholdModeScreenSpaceRadius
SCNShadowModeForward
SCNShadowModeDeferred
SCNShadowModeModulated
SCNMorpherCalculationModeNormalized
SCNMorpherCalculationModeAdditive
SCNMovabilityHintFixed
SCNMovabilityHintMovable
SCNChamferModeBoth
SCNChamferModeFront
SCNChamferModeBack
SCNParticleSortingModeNone
SCNParticleSortingModeProjectedDepth
SCNParticleSortingModeDistance
SCNParticleSortingModeOldestFirst
SCNParticleSortingModeYoungestFirst
SCNParticleBlendModeAdditive
SCNParticleBlendModeSubtract
SCNParticleBlendModeMultiply
SCNParticleBlendModeScreen
SCNParticleBlendModeAlpha
SCNParticleBlendModeReplace
SCNParticleOrientationModeBillboardScreenAligned
SCNParticleOrientationModeBillboardViewAligned
SCNParticleOrientationModeFree
SCNParticleOrientationModeBillboardYAligned
SCNParticleBirthLocationSurface
SCNParticleBirthLocationVolume
SCNParticleBirthLocationVertex
SCNParticleBirthDirectionConstant
SCNParticleBirthDirectionSurfaceNormal
SCNParticleBirthDirectionRandom
SCNParticleImageSequenceAnimationModeRepeat
SCNParticleImageSequenceAnimationModeClamp
SCNParticleImageSequenceAnimationModeAutoReverse
SCNParticleInputModeOverLife
SCNParticleInputModeOverDistance
SCNParticleInputModeOverOtherProperty
SCNParticleModifierStagePreDynamics
SCNParticleModifierStagePostDynamics
SCNParticleModifierStagePreCollision
SCNParticleModifierStagePostCollision
SCNParticleEventBirth
SCNParticleEventDeath
SCNParticleEventCollision
SCNParticleRenderingModeSprite
SCNParticleRenderingModePointSprite
SCNParticleRenderingModeTrail
SCNParticleRenderingModeBeam
SCNParticleRenderingModeGeometry
SCNReferenceLoadingPolicyImmediate
SCNReferenceLoadingPolicyOnDemand
SCNAntialiasingModeNone
SCNAntialiasingModeMultisampling2X
SCNAntialiasingModeMultisampling4X
SCNRenderingAPIMetal
SCNRenderingAPIOpenGLES2
SCNSceneSourceStatusParsing
SCNSceneSourceStatusValidating
SCNSceneSourceStatusProcessing
SCNSceneSourceStatusComplete
SCNSceneSourceStatusError
SCNCullBack
SCNCullFront
SCNBufferFrequencyPerFrame
SCNBufferFrequencyPerNode
SCNBufferFrequencyPerShadable
SCNFillModeFill
SCNFillModeLines
SCNCullModeBack
SCNCullModeFront
SCNTransparencyModeAOne
SCNTransparencyModeRGBZero
SCNTransparencyModeSingleLayer
SCNTransparencyModeDualLayer
SCNTransparencyModeDefault
SCNBlendModeAlpha
SCNBlendModeAdd
SCNBlendModeSubtract
SCNBlendModeMultiply
SCNBlendModeScreen
SCNBlendModeReplace
SCNBlendModeMax
SCNFilterModeNone
SCNFilterModeNearest
SCNFilterModeLinear
SCNWrapModeClamp
SCNWrapModeRepeat
SCNWrapModeMirror
SCNPhysicsBodyTypeStatic
SCNPhysicsBodyTypeDynamic
SCNPhysicsBodyTypeKinematic
SCNPhysicsFieldScopeInsideExtent
SCNPhysicsFieldScopeOutsideExtent
fromValue
toValue
T@"NSString",C
TB,GisAdditive
TB,GisCumulative
T@"CAMediaTimingFunction",&
TB,GisRemovedOnCompletion
T^{CGPath=}
keyTimes
T@,C,N
currentTime
T@,N
TB,N,GisPlaying
tessellationControlShader
tessellationEvaluationShader
geometryShader
vertexFunctionName
fragmentFunctionName
TB,N,GisOpaque
T@"<SCNProgramDelegate>",N
T@"<MTLLibrary>",&,N
presentationMorpher
T@"SCNMorpher",R,N
T@"SCNGeometry",R
screenSpaceRadius
Td,R
worldSpaceDistance
audioPlayers
particleSystems
hemispheric
TB,N,GisHemispheric
geometrySourceChannels
influenceFactor
incremental
TB,N,GisIncremental
presentationLight
T@"SCNLight",R,N
presentationMaterial
T@"SCNMaterial",R,N
speedInKilometersPerHour
wheels
chassisBody
targetOffset
upVector
gimbalLockEnabled
T@,R,N
TB,R,N,GhasInterleavedIndicesChannels
extrusionDepth
chamferMode
chamferProfile
chainRootNode
targetPosition
T@"<SCNPhysicsContactDelegate>"
string
font
wrapped
TB,N,GisWrapped
containerFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N
textSize
T{CGSize=dd},R,N
truncationMode
alignmentMode
SCNJS%@JSExport
SCN%@JSExport
%@JSExport
_hasFired
C3DRenderTarget
<C3DRenderTarget %p - texture:%@ rbo:%d>
C3DFXCIFilterPassMetalRenderGraph.json
C3D-Add.fsh
C3D-wireframe.vsh
C3D-DefaultProgram.fsh
C3D-EnvMap2D.fsh
C3D-Copy.vsh
C3D-Lighting.metal
C3D-dof-Resolve.vsh
C3D-dof-downSample4x.vsh
C3D-GaussianBlur.vsh
C3D-OpenSubdiv-Utils.h
C3DManipulator.vsh
C3DManipulatorColorOnly.vsh
C3D-IncrementalAverage.vsh
C3DFXPostProcess.json
C3D-OpenSubdiv_compute.metal
scn_standard_constants.h
C3D-OutlineMax.vsh
C3D-spotShadow.vsh
C3D-BlendAuthoring.vsh
C3D-Copy.fsh
C3D-OutlineRetina.vsh
C3D-CIFilterComposite.fsh
C3D-EnvMap2D.vsh
C3DFXMotionBlur.plist
C3DManipulator.fsh
C3DFXJitteringPassFloat.plist
C3D-dof-Resolve.fsh
scn_util.h
scn_standard_lighting.h
C3DFXPostProcess_depth.json
C3D-Outline.vsh
C3D-dof-ComputeNearCoc.fsh
C3DFXSSAO.json
C3D-GaussianBlurAlpha.vsh
C3D-WarmupTexture.vsh
C3DFXCopyPass.plist
C3D-Standard.metal
C3D-OutlineMax.fsh
C3D-IncrementalAverage.fsh
C3D-spotShadow.fsh
C3D-OpenSubdiv-Utils.metal
C3D-BlendAuthoring.fsh
C3D-EnvMapCube.vsh
C3D-CIFilterComposite.vsh
C3DManipulatorLightProbe.vsh
C3D-CommonProfile.metal
C3D-dof-ComputeNearCoc.vsh
C3D-dof-generateNearCoc.fsh
C3D-WarmupTexture.fsh
C3D-PickedObjects.vsh
SCNShaderLightingContribution.glsl
C3D-GaussianBlurAlpha.fsh
C3D-Mult_float.fsh
C3D-EnvMapCube.fsh
C3D-ParticleSystem.vsh
C3D-dof-Blur5x5.fsh
C3D-ParticleSystem_Trail.vsh
C3DManipulatorColorAndTexture.fsh
C3D-wireframe.fsh
C3D-DefaultProgram.vsh
C3DManipulatorLightProbe.fsh
C3D-dof-generateNearCoc.vsh
C3D-PickedObjects.fsh
scn_tessellation.h
C3D-PBR.metal
C3D-dof-downSample4x.fsh
C3D-Mult_float.vsh
C3D-Add.vsh
C3D-ParticleSystem.fsh
scn_metal
C3D-dof-Blur5x5.vsh
C3D-GaussianBlur.fsh
C3DManipulatorColorOnly.fsh
C3D-Outline.fsh
C3D-OutlineRetina.fsh
C3D-ParticleSystem_Trail.fsh
C3DManipulatorColorAndTexture.vsh
  "sequence" : [
                "SceneKit_renderCIQuad"
                ],
  "targets" : {
    "SceneKit-CI-effect-depth" : {
      "type" : "depth"
    },
    "SceneKit-CI-effect-color" : {
      "type" : "color",
      "format" : "rgba",
      "usage" : ["shaderWrite", "shaderRead"]
    }
  },
  "symbols" : {
    "C3D-CIFilter_middleZ" : {
      "type" : "float"
    },
    "C3D-CIFilter_extent" : {
      "type" : "vec4"
    }
  },
  "passes" : {
    "SceneKit_renderCIQuad" : {
      "inputs" : {
        "u_color" : {
          "target" : "SceneKit-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "C3D-CIFilter_middleZ",
        "u_extent" : "C3D-CIFilter_extent",
        "u_depth" : {
          "target" : "SceneKit-CI-effect-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "cullMode" : "none",
      "metalVertexShader" : "scn_filterCompositeVert",
      "metalFragmentShader" : "scn_filterCompositeFrag",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    },
uniform sampler2D textureSampler0;
uniform sampler2D textureSampler1;
varying vec2 TexCoord;
void main (void)
gl_FragColor = texture2D(textureSampler0,TexCoord) + texture2D(textureSampler1,TexCoord);
uniform mat4 u_modelViewProjectionTransform;
attribute vec4 a_position;
attribute vec4 a_color;
varying vec3 v_vertexCenter;
void main()
    vec3 pos = a_position.xyz;
    int id = int(a_position.w); //  Position stores the vertex ID in the current triangle. Yup, a bit ugly.
    gl_Position = (u_modelViewProjectionTransform * vec4(pos, 1.0));
    
    float s = 1.;
    mat3 centers = mat3(vec3(s, 0. ,0.), vec3(0., s, 0.), vec3(0., 0., s));
    v_vertexCenter = centers[id];
void main (void)
gl_FragColor =
vec4(1.0,0.0,1.0,1.0);
uniform sampler2D textureSampler0;
varying vec2 TexCoord;
void main (void)
gl_FragColor =
texture2D(textureSampler0,TexCoord);
attribute vec3 a_position;
varying vec2 TexCoord;
void main(void)
gl_Position = vec4(a_position, 1.0);
TexCoord = (a_position.xy + 1.0) * 0.5;
#define USE_QUAT_FOR_IES 1
// 256 bytes
struct scn_light
    float4 color; // color.rgb + shadowColor.a                                      16
    float3 pos; //                                                                  16 (12)
    float3 dir; //                                                                  16 (12)
    float shadowRadius; //                                                          4
    uint8_t lightType; //                                                           1
    uint8_t attenuationType; //                                                     1
    uint8_t shadowSampleCount; //                                                   1
                                //                                                  55  but in reality 64 for alignment reasons
    union {
        struct {
            float4      cascadeScale[4]; // max cascade count
            float4      cascadeBias[4];
        } directional; // 128
        struct {
            float4      attenuationFactors; // scale/bias/power/invSquareRadius                  16
            float3      shadowScaleBias; // xy: scale/bias for z_lin -> z_ndc, z: depth bias
        } omni;
        struct {
            float4      _attenuationFactors; // need to match omni, always use omni.attenuationFactors
            float2      scaleBias; // scale/bias to compute spot falloff
        } spot;
        struct {
            float4      _attenuationFactors; // need to match omni, always use omni.attenuationFactors
            float2      scaleBias; // scale/bias to compute ies LUT
#if USE_QUAT_FOR_IES
            float4      light_from_view_quat; // OPTIM: this could be a simple quaternion
#else
            float4x4    light_from_view; // OPTIM: this could be a simple quaternion
#endif
        } ies;
        struct {
            float3  offset;
            float4  halfExtents; // w: contains the blending distance
            float3  parallaxCenter;
            float3  parallaxExtents;
            int32_t index; // index of the probe in the probe array (do not use uint8_t because of compiler crash)
            int32_t parallaxCorrection; // do not use bool (compiler crash)
        } probe;
    } parameters; // 128
    float4x4    shadowMatrix; // 64
#if defined(__METAL_VERSION__) && __METAL_VERSION__ >= 120
#define ambientOcclusionTexcoord ambientTexcoord
struct SCNShaderSurface {
    float3 view;                // Direction from the point on the surface toward the camera (V)
    float3 position;            // Position of the fragment
    float3 normal;              // Normal of the fragment (N)
    float3 geometryNormal;      // Normal of the fragment - not taking into account normal map
    float2 normalTexcoord;      // Normal texture coordinates
    float3 tangent;             // Tangent of the fragment
    float3 bitangent;           // Bitangent of the fragment
    float4 ambient;             // Ambient property of the fragment
    float2 ambientTexcoord;     // Ambient texture coordinates
    float4 diffuse;             // Diffuse property of the fragment. Alpha contains the opacity.
    float2 diffuseTexcoord;     // Diffuse texture coordinates
    float4 specular;            // Specular property of the fragment
    float2 specularTexcoord;    // Specular texture coordinates
    float4 emission;            // Emission property of the fragment
    float2 emissionTexcoord;    // Emission texture coordinates
    float4 selfIllumination;            // selfIllumination property of the fragment
    float2 selfIlluminationTexcoord;    // selfIllumination texture coordinates
    float4 multiply;            // Multiply property of the fragment
    float2 multiplyTexcoord;    // Multiply texture coordinates
    float4 transparent;         // Transparent property of the fragment
    float2 transparentTexcoord; // Transparent texture coordinates
    float4 reflective;          // Reflective property of the fragment
    float  metalness;           // Metalness
    float2 metalnessTexcoord;   // Metalness texture coordinates
    float  roughness;           // Roughness
    float2 roughnessTexcoord;   // Roughness texture coordinates
    float shininess;            // Shininess property of the fragment.
    float fresnel;              // Fresnel property of the fragment.
    float ambientOcclusion;     // Ambient occlusion term of the fragment
    float3 _normalTS;           // UNDOCUMENTED in tangent space
#ifdef USE_SURFACE_EXTRA_DECL
    __SurfaceExtraDecl__
#endif
// Structure to gather property of a light, packed to give access in a light shader modifier
// This must be kept intact for back compatibility in lighting modifiers
struct SCNShaderLight {
    float4 intensity;
    float3 direction;
    float  _att;
    float3 _spotDirection;
    float  _distance;
enum SCNLightingModel
    SCNLightingModelConstant,
    SCNLightingModelLambert,
    SCNLightingModelPhong,
    SCNLightingModelBlinn,
    SCNLightingModelNone,
    SCNLightingModelPhysicallyBased,
    SCNLightingModelCustom // 6 implicit when using a lighting shader modifier
enum C3DLightAttenuationType
    kC3DLightAttenuationTypeNone,
    kC3DLightAttenuationTypeConstant,
    kC3DLightAttenuationTypeLinear,
    kC3DLightAttenuationTypeQuadratic,
    kC3DLightAttenuationTypeExponent,
    kC3DLightAttenuationTypePhysicallyBased,
#define PROBES_NORMALIZATION 0
#define PROBES_OUTER_BLENDING 1
struct SCNShaderLightingContribution
    float3 ambient;
    float3 diffuse;
    float3 specular;
    float3 modulate;
#if PROBES_NORMALIZATION
    float4 probesWeightedSum; // rgb: sum a:normalization factor
#else
    float  probeRadianceRemainingFactor;
#endif
    thread SCNShaderSurface& surface;
#ifdef USE_PER_VERTEX_LIGHTING
    commonprofile_io out;
#else
    commonprofile_io in;
#endif
#if USE_REVERSE_Z
    constant static constexpr bool reverseZ = true;
#else
    constant static constexpr bool reverseZ = false;
#endif
#ifdef USE_PBR
    static constexpr sampler linearSampler = sampler(filter::linear, mip_filter::linear);
    float  selfIlluminationOcclusion;
    float3 reflectance;
    float3 probeReflectance;
    float  NoV;
#endif
    SCNShaderLightingContribution(thread SCNShaderSurface& iSurface, commonprofile_io io):surface(iSurface)
#ifdef USE_PER_VERTEX_LIGHTING
    ,out(io)
#else
    ,in(io)
#endif
    {
        ambient = 0.f;
        diffuse = 0.f;
        specular = 0.f;
#if PROBES_NORMALIZATION
#if PROBES_OUTER_BLENDING
        probesWeightedSum = float4(0.f);
#else
        probesWeightedSum = float4(0.f, 0.f, 0.f, 0.000001f); // avoid divide by 0 with an epsilon
#endif
#else
        probeRadianceRemainingFactor = 1.f;
#endif
#ifdef USE_MODULATE
        modulate = 1.f;
#else
        modulate = 0.f;
#endif
    }
#ifdef USE_PBR
    void prepareForPBR(texture2d<float, access::sample> specularDFG, float occ)
    {
        selfIlluminationOcclusion = occ;
        float3 n = surface.normal;
        float3 v = surface.view;
        reflectance = mix(float3(PBR_F0_NON_METALLIC), surface.diffuse.rgb, surface.metalness);
        NoV = saturate(dot(n, v));
        float2 DFG = specularDFG.sample(linearSampler, float2(NoV, surface.roughness)).rg;
        probeReflectance = reflectance * DFG.r + DFG.g;
    }
#endif
#ifdef USE_LIGHT_MODIFIER
    __LightModifierExtraDecl__
#endif
    float4 debug_pixel(float2 fragmentPosition)
    {
        const int width = 64;
        switch (int(fragmentPosition.x + fragmentPosition.y ) / width) {
            case 0: return float4(surface.view, 1.f);
            case 1: return float4(surface.position, 1.f);
            case 2: return float4(surface.normal, 1.f);
            case 3: return float4(surface.geometryNormal, 1.f);
            case 4: return float4(float3(surface.ambientOcclusion), 1.f);
            case 5: return surface.diffuse;
            case 6: return float4(float3(surface.metalness), 1.f);
            case 7: return float4(float3(surface.roughness), 1.f);
            case 8: return float4(ambient, 1.f);
            case 9: return float4(diffuse, 1.f);
            default: return float4(specular, 1.f);
        }
    }
    // tool functions, could be external
    static inline float3 lambert_diffuse(float3 l, float3 n, float3 color, float intensity) {
        return color * (intensity * saturate(dot(n, l)));
    }
    void lambert(float3 l, float3 color, float intensity)
    {
        diffuse += lambert_diffuse(l, surface.normal, color, intensity);
    }
    void blinn(float3 l, float3 color, float intensity)
    {
        float3 D = lambert_diffuse(l, surface.normal, color, intensity);
        diffuse += D;
        float3 h = normalize(l + surface.view);
        specular += powr(saturate(dot(surface.normal, h)), surface.shininess) * D;
    }
    void phong(float3 l, float3 color, float intensity)
    {
        float3 D = lambert_diffuse(l, surface.normal, color, intensity);
        diffuse += D;
        float3 r = reflect(-l, surface.normal);
        specular += powr(saturate(dot(r, surface.view)), surface.shininess) * D;
    }
#ifdef USE_PBR
    void pbr(float3 l, float3 color, float intensity)
    {
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 h = normalize(l + v);
        float NoL = saturate(dot(n, l));
        float NoH = saturate(dot(n, h));
        float LoH = saturate(dot(l, h));
        float roughness = surface.roughness;
        float alpha = roughness * roughness; // perceptually-linear roughness
        float D   = scn_brdf_D(alpha, NoH);
        float3 F  = scn_brdf_F_opt(reflectance, LoH);
        float Vis = scn_brdf_V(alpha, NoL, NoV);
        // keep the scalar separated
        diffuse  += color * (NoL * M_1_PI_F * intensity);
        specular += color * F * ( NoL * D * Vis * intensity);
    }
#endif
    void custom(float3 _l, float3 _color, float _intensity)
    {
#ifdef USE_LIGHT_MODIFIER
        thread SCNShaderLightingContribution &_lightingContribution = *this;
        thread SCNShaderSurface& _surface = surface;
        SCNShaderLight _light = {.direction = _l, .intensity = float4(_color, 1.f), ._att = _intensity };
        // DoLightModifier START
        __DoLightModifier__
        // DoLightModifier END
#endif
    }
    void shade(float3 l, float3 color, float intensity)
    {
#ifdef LIGHTING_MODEL
        switch (LIGHTING_MODEL) {
            case SCNLightingModelLambert:           lambert(l, color, intensity); break;
            case SCNLightingModelBlinn:             blinn(l, color, intensity);   break;
            case SCNLightingModelPhong:             phong(l, color, intensity);   break;
#ifdef USE_PBR
            case SCNLightingModelPhysicallyBased:   pbr(l, color, intensity);     break;
#endif
            case SCNLightingModelCustom:            custom(l, color, intensity);  break;
            default:                                                                       break; // static_assert(0, "should not go there");
        }
#endif
    }
    // this implementation seems more correct as it never goes larger than when near (dist<1)
    // https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
    // cutoff must be computed with Eq(1) with lightAttenuationEnd and stored in the light struct
    float pbr_dist_attenuation_alternate(float3 l, float cutoff) {
        //        float radius = 0.01f; // consider point lights as 1cm
        float radius = 0.1f; // consider point lights as 10cm
        float factor = 1.f / (1.f + length(l)/radius);
        float attenuation = saturate(factor * factor); // Eq(1)
        return saturate((attenuation - cutoff) / (1.f - cutoff));
    }
    float pbr_dist_attenuation(float3 l, float inv_square_radius) {
        float sqr_dist = length_squared(l);
        float atten = 1.f / max(sqr_dist, 0.0001f);
        // smoothing factor to avoid hard clip of the lighting
        float factor = saturate(1.f - scn::sq(sqr_dist * inv_square_radius));
        return atten * factor * factor;
    }
    float dist_attenuation(float3 l, float4 att, C3DLightAttenuationType type)
    {
        switch (type) {
            case kC3DLightAttenuationTypeConstant:
                return step(length(l), att.x);
            case kC3DLightAttenuationTypeLinear:
                return saturate(length(l) * att.x + att.y);
            case kC3DLightAttenuationTypeQuadratic:
                return scn::sq(saturate(length(l) * att.x + att.y));
            case kC3DLightAttenuationTypeExponent:
                return powr(saturate(length(l) * att.x + att.y), att.z);
            case kC3DLightAttenuationTypePhysicallyBased:
                return pbr_dist_attenuation(l, att.w);
            default: // case kC3DLightAttenuationTypeNone:
                return 1.f;
        }
    }
    float spot_attenuation(float3 l, scn_light light)
    {
        // only support linear attenuation (spotExponent is SPI)
        return saturate(dot(l, light.dir) * light.parameters.spot.scaleBias.x + light.parameters.spot.scaleBias.y);
    }
    void shade_modulate(float3 l, float4 color, float intensity)
    {
        constexpr half3 white = half3(1.h);
        // color.a contains the gobo slot intensity -> used to fade it
        modulate *= float3(mix(white, half3(color.rgb), half(color.a * intensity)));
    }
    float3 gobo(float3 pos, scn_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
        half3 g = texture2DProj(goboTexture, goboSampler, (light.shadowMatrix * float4(pos, 1.f))).rgb;
        return light.color.rgb * float3(mix(1.h, g, half(light.color.a)));
    }
    float shadow(float3 pos, scn_light light, depth2d<float> shadowMap)
    {
        float shadow = ComputeShadow(scn_shadow_sampler, pos, light.shadowMatrix, shadowMap, reverseZ);
        return 1.f - shadow * light.color.a; // shadow color
    }
    // this versions takes the sample count from the light. This forces dynamic loops, not a good idea on iOS
    float shadow(float3 pos, scn_light light, depth2d<float> shadowMap, constant float4* shadowKernel)
    {
        float shadow = ComputeSoftShadow(scn_shadow_sampler, pos, light.shadowMatrix, shadowMap, shadowKernel, light.shadowSampleCount, light.shadowRadius, reverseZ);
        return 1.f - shadow * light.color.a; // shadow color
    }
    float shadow(float3 pos, scn_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int shadowSampleCount)
    {
        float shadow = ComputeSoftShadow(scn_shadow_sampler, pos, light.shadowMatrix, shadowMap, shadowKernel, shadowSampleCount, light.shadowRadius, reverseZ);
        return 1.f - shadow * light.color.a; // shadow color
    }
    float shadow(float3 pos, scn_light light, depth2d<float> shadowMap, int shadowSampleCount)
    {
        float shadow = ComputeSoftShadowGrid(scn_shadow_sampler, pos, light.shadowMatrix, shadowMap, shadowSampleCount, reverseZ);
        return 1.f - shadow * light.color.a; // shadow color
    }
    float shadow_omni(float3 pos_vs, float3 nrm_vs, scn_light light, depthcube<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        // else use hemispheric sampling
#define USE_TANGENT_SAMPLING 0
        float2 scaleBias = light.parameters.omni.shadowScaleBias.xy;
        float  depthBias = light.parameters.omni.shadowScaleBias.z;
        // offset/bias for shadow acne
        pos_vs += nrm_vs * depthBias;
        // transform pos from view space to light space
        float3 pos_ls = (light.shadowMatrix * float4(pos_vs, 1.f)).xyz;
        // compute z_lin for sample cube face (symetric so +x == -x, etc)
        float z_lin = scn::reduce_max(abs(pos_ls));
        // if we want to clip the shadows to the far planes of the cube...
        // if (z_lin > zFar)
        //   return 1.f;
        // transform linear_z to depthbuffer_z
        float z_ndc = (z_lin * scaleBias.x + scaleBias.y) / z_lin;
        // if sampleCount is known compileTime, this get rid of the shadowKernel binding
        float shadow;
        if (sampleCount <= 1) {
            shadow = shadowMap.sample_compare(scn_shadow_sampler, pos_ls.xyz, z_ndc);
        } else {
            // penumbra
            float filteringSizeFactor = light.shadowRadius;
#if USE_TANGENT_SAMPLING
            float3 tgt_x, tgt_y;
            scn::orthogonal_basis(pos_ls, tgt_x, tgt_y);
#else
            float3 nrm_ls = (light.shadowMatrix * float4(nrm_vs, 0.f)).xyz;
#endif
            //smooth all samples
            float totalAccum = 0.0;
            for(int i=0; i < sampleCount; i++){
#if USE_TANGENT_SAMPLING
                float2 scale = shadowKernel[i].xy * filteringSizeFactor * 2.f;
                float3 smp_ls = pos_ls.xyz + tgt_x * scale.x + tgt_y * scale.y;
#else
                float3 smp_ls = pos_ls.xyz + scn::randomHemisphereDir(nrm_ls, shadowKernel[i].xy) * filteringSizeFactor;
#endif
                // Do we want to compare with reference depth or smp depth?
                // z_lin = scn::reduce_max(abs(smp_ls));
                // z_ndc = (z_lin * scaleBias.x + scaleBias.y) / z_lin;
                totalAccum += shadowMap.sample_compare(scn_shadow_sampler, smp_ls, z_ndc);
            }
            shadow = totalAccum / float(sampleCount);
        }
        return 1.f - shadow * light.color.a; // shadow color
    }
    float shadow(float3 pos, constant scn_light& light, depth2d_array<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount)
    {
        float shadow = ComputeCascadedShadow(scn_shadow_sampler, pos, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius).a;
        return 1.f - shadow * light.color.a; // shadow color
    }
    // MARK: Directional
    void add_directional(scn_light light)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        shade(light.dir, light.color.rgb, intensity);
    }
    // gobo
    void add_directional(scn_light light, texture2d<half> goboTexture, sampler goboSampler, bool modulated)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        light.color.rgb = gobo(surface.position, light, goboTexture, goboSampler);
        if (modulated) {
            shade_modulate(light.dir, light.color, 1.f);
        } else {
            shade(light.dir, light.color.rgb, intensity);
        }
    }
    // support simple shadows (no soft, no cascade)
    void add_directional(scn_light light, depth2d<float> shadowMap)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        intensity *= shadow(surface.position, light, shadowMap);
        shade(light.dir, light.color.rgb, intensity);
    }
    // support soft shadows (non cascaded, dynamic sample count)
    void add_directional(scn_light light, depth2d<float> shadowMap, constant float4* shadowKernel)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, shadowKernel);
        shade(light.dir, light.color.rgb, intensity);
    }
    void add_directional(scn_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(light.dir, light.color.rgb, intensity);
    }
    // regular grid PCF
    void add_directional(scn_light light, depth2d<float> shadowMap, int sampleCount)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, sampleCount);
        shade(light.dir, light.color.rgb, intensity);
    }
    // version supporting cascade shadows
    void add_directional(constant scn_light& light, depth2d_array<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount, bool debugCascades)
    {
#ifdef USE_PBR
        float intensity = M_PI_F;
#else
        float intensity = 1.f;
#endif
        if (debugCascades) {
            float4 shadowDebug = ComputeCascadedShadow(scn_shadow_sampler, surface.position, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius);
            intensity *= (1.f - shadowDebug.a);
            shade(light.dir, light.color.rgb, intensity);
            diffuse.rgb = mix(diffuse.rgb, shadowDebug.rgb, light.color.a);
        } else {
            intensity *= shadow(surface.position, light, shadowMaps, cascadeCount, blendCascade, shadowKernel, sampleCount);
            shade(light.dir, light.color.rgb, intensity);
        }
    }
    // MARK: Omni
    float dist_attenuation(float3 unnormalized_l, scn_light light, bool local = false)
    {
#ifdef USE_PBR
        return 1000.f * pbr_dist_attenuation(unnormalized_l, light.parameters.omni.attenuationFactors.w);
        // This alternate model seems to better fit V-Ray render.... To confirm
        // float intensity = 1000.f * pbr_dist_attenuation_alternate(unnormalized_l, 0.f);
#else
        if (local)
            return dist_attenuation(unnormalized_l, light.parameters.omni.attenuationFactors, kC3DLightAttenuationTypeExponent);
        else
            return 1.f;
#endif
    }
    
    void add_omni(scn_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        shade(l, light.color.rgb, dist_attenuation(unnormalized_l, light));
    }
    void add_omni(scn_light light, depthcube<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity *= shadow_omni(surface.position, surface.normal, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    void add_local_omni(scn_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        shade(l, light.color.rgb, dist_attenuation(unnormalized_l, light, true));
    }
    // MARK: Spot
    void add_spot(scn_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= spot_attenuation(l, light);
        shade(l, light.color.rgb, intensity);
    }
    void add_spot(scn_light light, texture2d<half> goboTexture, sampler goboSampler, bool modulated)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= spot_attenuation(l, light);
        light.color.rgb = gobo(surface.position, light, goboTexture, goboSampler);
        if (modulated) {
            shade_modulate(l, light.color, intensity);
        } else {
            shade(l, light.color.rgb, intensity);
        }
    }
    void add_local_spot(scn_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light, true);
        intensity      *= spot_attenuation(l, light);
        shade(l, light.color.rgb, intensity);
    }
    // support simple shadows (non cascaded)
    void add_spot(scn_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= spot_attenuation(l, light);
        intensity      *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    // MARK: Probe
#ifdef USE_PBR
    // MARK: Radiance
#ifdef C3D_SUPPORT_CUBE_ARRAY
    void add_local_probe(scn_light light, texturecube_array<half> probeTextureArray)
#else
    void add_local_probe(scn_light light, texture2d_array<half> probeTextureArray)
#endif
    {
#if !PROBES_NORMALIZATION
        if (probeRadianceRemainingFactor <= 0.f)
            return;
#endif
        bool parallaxCorrection = light.parameters.probe.parallaxCorrection;
        int    probeIndex       = light.parameters.probe.index;
        float3 probeExtents     = light.parameters.probe.halfExtents.xyz;
        float  blendDist        = light.parameters.probe.halfExtents.w;
        float3 probeOffset      = light.parameters.probe.offset;
        float3 parallaxExtents  = light.parameters.probe.parallaxExtents;
        float3 parallaxCenter   = light.parameters.probe.parallaxCenter;
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 r = reflect(-v, n); // mirror vector (view vector around normal)
        float3 specDir = scn::mat4_mult_float3(light.shadowMatrix, r);
        // TODO blend weight ? accumulate in alpha and normalize ?
        float3 pos_ls = (light.shadowMatrix * float4(surface.position, 1.f)).xyz;
        // OPTIM: we should be able to multiply by the extents in CPU in matrix and use 1 here...
        float3 d = abs(pos_ls) - probeExtents;
#if PROBES_OUTER_BLENDING
        if (any(d > blendDist))
#else
        if (any(d > 0.f))
#endif
        {
            return;
        }
#if PROBES_NORMALIZATION
        //      inside    '  |  '   outside
        // nd      1      1 0.5 0      0      (per component)
#if PROBES_OUTER_BLENDING
        float3 nd = saturate(-(d / blendDist) * 0.5f + 0.5f);
#else
        float3 nd = saturate(-(d / blendDist));
#endif
        float probeFactor = (nd.x * nd.y * nd.z) * light.color.r;
#else
        // signed distance in the probe box
        float sd = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
#if PROBES_OUTER_BLENDING
        float probeFactor = saturate(1.f - sd / blendDist);
#else
        float probeFactor = saturate(-sd / blendDist);
#endif
        //      inside      |  '   outside
        // sd     -x        0  b      +x
        // fc      1        1  0       0
        probeFactor *= probeRadianceRemainingFactor * light.color.r; // Do we really need this or 1.f is enough (we need this for global probe anyway...)
#endif
        if (parallaxCorrection /* && all(d < 0.f) */) {
            // OPTIM: we should be able to multiply by the extents in CPU and use 1 here...
            float3 pos_off = pos_ls + parallaxCenter;
            float3 t1 = ( parallaxExtents - pos_off) / specDir;
            float3 t2 = (-parallaxExtents - pos_off) / specDir;
            float3 tmax = max(max(0, t1), t2); // max(0, ..) to avoid correction when outside the box (in the blending zone)
            float t = min(tmax.x, min(tmax.y, tmax.z));
            // Use Distance in WS directly to recover intersection
            float3 hit_ls = pos_ls + specDir * t;
            specDir = hit_ls - probeOffset;
        }
        float mipd = float(probeTextureArray.get_num_mip_levels()) - 1.f;
        const float intensity = surface.ambientOcclusion * probeFactor;
        float mips = surface.roughness * mipd;
#ifdef C3D_SUPPORT_CUBE_ARRAY
        float3 LD = float3(probeTextureArray.sample(linearSampler, specDir, probeIndex, level(mips)).rgb);
#else
        float2 specUV = scn::dual_paraboloid_from_cartesian(normalize(specDir));
        float3 LD = float3(probeTextureArray.sample(linearSampler, specUV, probeIndex, level(mips)).rgb);
#endif
        /* Debug blending with primary colors
        switch (probeIndex) {
            case 1: LD = float3(1.f, 0.f, 0.f); break;
            case 2: LD = float3(0.f, 1.f, 0.f); break;
            case 3: LD = float3(0.f, 0.f, 1.f); break;
            default: LD = float3(1.f, 1.f, 1.f); break;
        }*/
        // radiance
#if PROBES_NORMALIZATION
        probesWeightedSum += float4(LD * intensity * probeReflectance, probeFactor);
#else
        probeRadianceRemainingFactor = saturate(probeRadianceRemainingFactor - probeFactor);
        specular += LD * intensity * probeReflectance;
#endif
    }
    void add_global_probe(float4x4 localDirToWorldCubemapDir, float environmentIntensity,
#ifdef C3D_SUPPORT_CUBE_ARRAY
                          texturecube_array<half> probeTextureArray
#else
                          texture2d_array<half> probeTextureArray
#endif
                          )
    {
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 r = reflect(-v, n); // mirror vector (view vector around normal)
        float3 specDir = scn::mat4_mult_float3(localDirToWorldCubemapDir, r);
        float mipd = float(probeTextureArray.get_num_mip_levels()) - 1.f;
        const float intensity = surface.ambientOcclusion * environmentIntensity;
        float mips = surface.roughness * mipd;
#ifdef C3D_SUPPORT_CUBE_ARRAY
        float3 LD = float3(probeTextureArray.sample(linearSampler, specDir, 0, level(mips)).rgb);
#else
        float2 specUV = scn::dual_paraboloid_from_cartesian(normalize(specDir));
        float3 LD = float3(probeTextureArray.sample(linearSampler, specUV, 0, level(mips)).rgb);
#endif
        // radiance
        specular += LD * intensity * probeReflectance;
    }
    void add_global_probe(texturecube<float, access::sample> specularLD,
                          float4x4                           localDirToWorldCubemapDir,
                          float                              environmentIntensity)
    {
        float3 n        = surface.normal;
        float3 v        = surface.view;
        float3 r        = reflect(-v, n); // mirror vector (view vector around normal)
        float roughness = surface.roughness;
        float roughness2= roughness * roughness;
#if 1
        float smoothness = 1.0f - roughness2;
        float specularLerpFactor = (1. - smoothness * (sqrt(smoothness) + roughness2));
        // This does have an effect on smooth object : seems buggy (plus costly)
        //float NoV       = 1.f - saturate(dot(n, v));
        //specularLerpFactor = saturate(specularLerpFactor + 2.f*NoV*NoV*NoV);
        float3 specularDominantNDirection = mix(r, n, specularLerpFactor); // no need to normalize as we fetch in a cubemap
#else
        float3 specularDominantNDirection = r;
#endif
        
        // Specular
        float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
#if 0 // Seamless cubemap filtering
        float3 dirAbs = abs(specularDominantNDirection);
        float dirNormInf = max(dirAbs.x, max(dirAbs.y, dirAbs.z));
        float scale = 1.0f - exp2(mipLevel) / float(specularLD.get_width());
        if (dirAbs.x != dirNormInf) specularDominantNDirection.x *= scale;
        if (dirAbs.y != dirNormInf) specularDominantNDirection.y *= scale;
        if (dirAbs.z != dirNormInf) specularDominantNDirection.z *= scale;
#endif
        float3 LD = specularLD.sample(linearSampler, scn::mat4_mult_float3(localDirToWorldCubemapDir, specularDominantNDirection), level(mipLevel)).rgb;
#if 0 // Specular occlusion - not physically correct
        float specularOcclusion = saturate(pow(NoV + surface.ambientOcclusion, exp2(-16.0f * roughness - 1.0f)) - 1.0f + surface.ambientOcclusion);
        LD *= specularOcclusion;
#endif
        // effectiveAlbedo is multiplied in combine
        specular += LD * (surface.ambientOcclusion * environmentIntensity) * probeReflectance;
    }
    // MARK: Irradiance
    void add_irradiance_from_selfIllum()
    {
        float selfIlluminationAO = saturate(mix(1.f, surface.ambientOcclusion, selfIlluminationOcclusion));
        float3 irradiance = selfIlluminationAO * surface.selfIllumination.rgb;
        diffuse  += irradiance;
    }
    void add_global_irradiance_from_sh(float4x4         localDirToWorldCubemapDir,
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
                                       sh2_coefficients shCoefficients)
#else
    sh3_coefficients shCoefficients)
#endif
    {
        float3 n_sh_space = scn::mat4_mult_float3(localDirToWorldCubemapDir, surface.normal);
        float3 irradiance = shEvalDirection(float4(n_sh_space, 1.), shCoefficients);
        diffuse  += surface.ambientOcclusion * irradiance;
    }
    void add_global_irradiance_probe(texturecube<float, access::sample> irradianceTexture,
                                     float4x4                           localDirToWorldCubemapDir,
                                     float                              environmentIntensity)
    {
        float3 n_cube_space = scn::mat4_mult_float3(localDirToWorldCubemapDir, surface.normal);
        float3 irradiance = irradianceTexture.sample(linearSampler, n_cube_space).rgb;
        diffuse  += (surface.ambientOcclusion * environmentIntensity) * irradiance;
    }
#endif // USE_PBR
    // MARK: IES
    static constexpr sampler iesSampler = sampler(filter::linear, mip_filter::none, address::clamp_to_edge);
    float ies_attenuation(float3 l, scn_light light, texture2d<half> iesTexture)
    {
#if USE_QUAT_FOR_IES
        float3 v    = scn::quaternion_rotate_vector(light.parameters.ies.light_from_view_quat, -l);
#else
        float3 v    = scn::matrix_rotate(light.parameters.ies.light_from_view, -l);
#endif
        float phi   = (v.z * light.parameters.ies.scaleBias.x + light.parameters.ies.scaleBias.y);
        float theta = atan2(v.y, v.x) * 0.5f * M_1_PI_F;
        return iesTexture.sample(iesSampler, float2(phi, abs(theta))).r;
    }
    void add_ies(scn_light light, texture2d<half> iesTexture)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= ies_attenuation(l, light, iesTexture);
        shade(l, light.color.rgb, intensity);
    }
    void add_ies(scn_light light, texture2d<half> iesTexture, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= ies_attenuation(l, light, iesTexture);
        intensity      *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
#endif // #if defined(__METAL_VERSION__) && __METAL_VERSION__ >= 120
attribute vec4 a_position;
varying vec2 v_texCoord;
void main(void)
gl_Position = a_position;
    v_texCoord = (a_position.xy + 1.0) * 0.5;
attribute vec4 a_position;
uniform vec2 u_inversePixelSize;
varying vec2 v_tcColor0;
varying vec2 v_tcColor1;
varying vec2 v_tcDepth0;
varying vec2 v_tcDepth1;
varying vec2 v_tcDepth2;
varying vec2 v_tcDepth3;
void main(void)
gl_Position = a_position;
    vec2 tc = (a_position.xy + 1.0) * 0.5;
    v_tcColor0 = tc + vec2( -1.5, -1.5) * u_inversePixelSize * 0.25;
    v_tcColor1 = tc + vec2( +0.5, -1.5) * u_inversePixelSize * 0.25;
    v_tcDepth0 = tc + vec2( -2., -2. ) * u_inversePixelSize * 0.25;
    v_tcDepth1 = tc + vec2( -1., -2. ) * u_inversePixelSize * 0.25;
    v_tcDepth2 = tc + vec2( +0., -2. ) * u_inversePixelSize * 0.25;
    v_tcDepth3 = tc + vec2( +1., -2. ) * u_inversePixelSize * 0.25;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_downSample4x</string>
<string>SceneKit_DOF_generateNearCoc</string>
<string>SceneKit_DOF_blurCoc_H</string>
<string>SceneKit_DOF_blurCoc_V</string>
<string>SceneKit_blurColor4x_H</string>
<string>SceneKit_blurColor4x_V</string>
<string>SceneKit_DOF_computeNearCoc</string>
<string>SceneKit_DOF_smallBlur</string>
<string>SceneKit_DOF_resolve</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_downSample4x</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-color-downSample4x</string>
</dict>
<key>inputs</key>
<dict>
<key>colorSampler</key>
<string>COLOR</string>
<key>depthSampler</key>
<string>DEPTH</string>
<key>CocScaleBias</key>
<string>C3D-dof-cocScaleBias</string>
<key>u_inversePixelSize</key>
<string>C3D-dof-invertPixelSize</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-dof-downSample4x</string>
<key>clientProgram</key>
<false/>
<key>metalVertexShader</key>
<string>DownSample4x_vert</string>
<key>metalFragmentShader</key>
<string>DownSample4x_frag</string>
</dict>
<key>SceneKit_DOF_generateNearCoc</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-color-nearCoc</string>
</dict>
<key>inputs</key>
<dict>
<key>downSampler</key>
<dict>
<key>target</key>
<string>SceneKit-color-downSample4x</string>
<key>sampler</key>
<dict>
<key>minificationFilter</key>
<string>nearest</string>
<key>magnificationFilter</key>
<string>nearest</string>
</dict>
</dict>
<key>depthSampler</key>
<dict>
<key>sampler</key>
<dict>
<key>minificationFilter</key>
<string>nearest</string>
<key>magnificationFilter</key>
<string>nearest</string>
</dict>
<key>target</key>
<string>DEPTH</string>
</dict>
<key>CocScaleBias</key>
<string>C3D-dof-cocScaleBias</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-dof-generateNearCoc</string>
<key>metalVertexShader</key>
<string>GenerateNearCoc_vert</string>
<key>clientProgram</key>
<false/>
<key>metalFragmentShader</key>
<string>GenerateNearCoc_frag</string>
</dict>
<key>SceneKit_DOF_blurCoc_H</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit_DOF_blurCoc_H_output</string>
</dict>
<key>inputs</key>
<dict>
<key>radius</key>
<string>C3D-blur-radiusH</string>
<key>textureSampler0</key>
<string>SceneKit-color-nearCoc</string>
<key>offsets</key>
<string>C3D-blur-offsets</string>
<key>weights</key>
<string>C3D-blur-weights</string>
<key>n_sample</key>
<string>C3D-blur-samples</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_DOF_blurCoc_V</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit_DOF_blurCoc_V_output</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler0</key>
<string>SceneKit_DOF_blurCoc_H_output</string>
<key>radius</key>
<string>C3D-blur-radiusV</string>
<key>offsets</key>
<string>C3D-blur-offsets</string>
<key>weights</key>
<string>C3D-blur-weights</string>
<key>n_sample</key>
<string>C3D-blur-samples</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_blurColor4x_H</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit_blurColor4x_H_output</string>
</dict>
<key>inputs</key>
<dict>
<key>radius</key>
<string>C3D-blur-radiusH</string>
<key>textureSampler0</key>
<string>SceneKit-color-downSample4x</string>
<key>offsets</key>
<string>C3D-blur-offsets</string>
<key>weights</key>
<string>C3D-blur-weights</string>
<key>n_sample</key>
<string>C3D-blur-samples</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_blurColor4x_V</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit_blurColor4x_V_output</string>
</dict>
<key>inputs</key>
<dict>
<key>radius</key>
<string>C3D-blur-radiusV</string>
<key>textureSampler0</key>
<string>SceneKit_blurColor4x_H_output</string>
<key>offsets</key>
<string>C3D-blur-offsets</string>
<key>weights</key>
<string>C3D-blur-weights</string>
<key>n_sample</key>
<string>C3D-blur-samples</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_DOF_computeNearCoc</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit_DOF_computeNearCoc-output</string>
</dict>
<key>inputs</key>
<dict>
<key>downSampler</key>
<dict>
<key>sampler</key>
<dict>
<key>minificationFilter</key>
<string>nearest</string>
<key>magnificationFilter</key>
<string>nearest</string>
</dict>
<key>target</key>
<string>SceneKit-color-nearCoc</string>
</dict>
<key>blurSampler</key>
<dict>
<key>sampler</key>
<dict>
<key>minificationFilter</key>
<string>nearest</string>
<key>magnificationFilter</key>
<string>nearest</string>
</dict>
<key>target</key>
<string>SceneKit_DOF_blurCoc_V_output</string>
</dict>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-dof-ComputeNearCoc</string>
<key>clientProgram</key>
<false/>
<key>metalVertexShader</key>
<string>ComputeNearCoc_vert</string>
<key>metalFragmentShader</key>
<string>ComputeNearCoc_frag</string>
</dict>
<key>SceneKit_DOF_smallBlur</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit_DOF_smallBlur-ouput</string>
</dict>
<key>inputs</key>
<dict>
<key>colorSampler</key>
<dict>
<key>target</key>
<string>SceneKit_DOF_computeNearCoc-output</string>
<key>sampler</key>
<dict>
<key>minificationFilter</key>
<string>nearest</string>
<key>magnificationFilter</key>
<string>nearest</string>
</dict>
</dict>
<key>u_inversePixelSize</key>
<string>C3D-dof-invertPixelSize</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-dof-Blur5x5</string>
<key>clientProgram</key>
<false/>
<key>metalVertexShader</key>
<string>Blur5x5_vert</string>
<key>metalFragmentShader</key>
<string>Blur5x5_frag</string>
</dict>
<key>SceneKit_DOF_resolve</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>colorSampler</key>
<string>COLOR</string>
<key>depthSampler</key>
<string>DEPTH</string>
<key>smallBlurSampler</key>
<string>SceneKit_DOF_smallBlur-ouput</string>
<key>largeBlurSampler</key>
<string>SceneKit_blurColor4x_V_output</string>
<key>CocScaleBias</key>
<string>C3D-dof-cocScaleBias</string>
<key>dofLerpScale</key>
<string>C3D-dof-lerpScale</string>
<key>dofLerpBias</key>
<string>C3D-dof-lerpBias</string>
<key>u_inversePixelSize</key>
<string>C3D-dof-invertPixelSize</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-dof-Resolve</string>
<key>clientProgram</key>
<false/>
<key>metalVertexShader</key>
<string>ResolveDOF_vert</string>
<key>metalFragmentShader</key>
<string>ResolveDOF_frag</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>SceneKit-color-downSample4x</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit-color-nearCoc</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit_DOF_blurCoc_H_output</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit_DOF_blurCoc_V_output</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit_blurColor4x_H_output</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit_blurColor4x_V_output</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit_DOF_computeNearCoc-output</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
<key>SceneKit_DOF_smallBlur-ouput</key>
<dict>
<key>type</key>
<string>color</string>
<key>scaleFactor</key>
<real>0.25</real>
<key>format</key>
<string>rgba16f</string>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>C3D-dof-cocScaleBias</key>
<dict>
<key>type</key>
<string>vec3</string>
</dict>
<key>C3D-dof-invertPixelSize</key>
<dict>
<key>type</key>
<string>vec2</string>
</dict>
<key>C3D-dof-lerpScale</key>
<dict>
<key>type</key>
<string>vec4</string>
</dict>
<key>C3D-dof-lerpBias</key>
<dict>
<key>type</key>
<string>vec4</string>
</dict>
<key>C3D-blur-radiusV</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>C3D-blur-radiusH</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>C3D-blur-offsets</key>
<dict>
<key>type</key>
<string>vec2[31]</string>
</dict>
<key>C3D-blur-weights</key>
<dict>
<key>type</key>
<string>float[31]</string>
</dict>
<key>C3D-blur-samples</key>
<dict>
<key>type</key>
<string>int</string>
</dict>
</dict>
</dict>
</plist>
struct OsdFVarPrimvar {
    uint8_t isUsed;
    uint8_t offset;
struct OsdFVarChannelDesc {
    uint32_t indicesBufferOffset;
    uint32_t dataBufferOffset;
    uint32_t dataBufferFVarWidth;
    uint32_t patchParamsBufferOffset;
    uint32_t patchArraysBufferOffset;
    OsdFVarPrimvar colorPrimvar;
    OsdFVarPrimvar texcoordPrimvars[8];
uniform mat4 u_modelViewProjectionTransform;
uniform mat4 u_transform;
uniform vec4 u_color;
attribute vec3 a_position;
varying vec4 v_vertexColor;
void main()
    gl_Position = u_modelViewProjectionTransform * u_transform * vec4(a_position, 1.);
    v_vertexColor = u_color;
uniform mat4 u_modelViewProjectionTransform;
attribute vec3 a_position;
attribute vec4 a_color;
varying vec4 v_vertexColor;
void main()
    gl_Position = u_modelViewProjectionTransform * vec4(a_position, 1.);
    v_vertexColor = a_color;
    "sequence" : [ "SceneKit_PostProcess"],
    "passes" : {
        "SceneKit_PostProcess" : {
            "outputs" : {
                "color" : "COLOR"
            },
            "inputs" : {
                "colorBuffer" : "COLOR"
            },
            "draw" : "DRAW_QUAD",
            "clientProgram" : "NO",
            "program" : "C3D-GLSL-UNAVAILABLE",
        }
    },
    "symbols" : {
    },
//   Copyright 2013 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
#import <metal_stdlib>
using namespace metal;
#import "scn_metal"
struct SCNTessellatorTransforms {
    float4x4 modelViewTransform;
    float4x4 modelViewProjectionTransform;
    float4x4 projectionTransform;
#if OSD_IS_ADAPTIVE
//----------------------------------------------------------
// OSD Kernel
//----------------------------------------------------------
//The user of OSD should define this kernel which serves as the landing point for all patch computation
//This compute function should just be copied and pasted, modifying the section under "User Vertex Transform"
//Or the entire function may be modified as needed (for example to add a patch index buffer)
kernel void compute_opensubdiv(
                               constant SCNTessellatorTransforms&     transforms                     [[ buffer(TRANSFORMS_BUFFER_INDEX) ]],
                               constant float&                        tessellationLevel              [[ buffer(TESSELLATION_LEVEL_BUFFER_INDEX) ]],
                               unsigned                               thread_position_in_grid        [[ thread_position_in_grid ]],
                               unsigned                               thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],
                               unsigned                               threadgroup_position_in_grid   [[ threadgroup_position_in_grid ]],
                               OsdPatchParamBufferSet                 osdBuffers, //This struct contains all of the buffers needed by OSD
                               device MTLQuadTessellationFactorsHalf* quadTessellationFactors        [[ buffer(QUAD_TESSFACTORS_INDEX) ]]
#if OSD_USE_PATCH_INDEX_BUFFER
                               ,device unsigned* patchIndex                                          [[ buffer(OSD_PATCH_INDEX_BUFFER_INDEX) ]]
                               ,device MTLDrawPatchIndirectArguments* drawIndirectCommands           [[ buffer(OSD_DRAWINDIRECT_BUFFER_INDEX) ]]
#endif
                         )
    
    //----------------------------------------------------------
    // OSD Kernel Setup
    //----------------------------------------------------------
    
    //Contains the shared patchParam value used by all threads that act upon a single patch
    //the .z (sharpness) field is set to -1 (NAN) if that patch should be culled to signal other threads to return.
    threadgroup int3 patchParam[PATCHES_PER_THREADGROUP];
    
    threadgroup PatchVertexType patchVertices[PATCHES_PER_THREADGROUP * CONTROL_POINTS_PER_PATCH];
    
    const auto real_threadgroup = thread_position_in_grid / REAL_THREADGROUP_DIVISOR;
    const auto subthreadgroup_in_threadgroup = thread_position_in_threadgroup / REAL_THREADGROUP_DIVISOR;
    const auto real_thread_in_threadgroup = thread_position_in_threadgroup & (REAL_THREADGROUP_DIVISOR - 1);
    
#if NEEDS_BARRIER
    const auto validThread = thread_position_in_grid * CONTROL_POINTS_PER_THREAD < osdBuffers.kernelExecutionLimit;
#else
    const auto validThread = true;
    if(thread_position_in_grid * CONTROL_POINTS_PER_THREAD >= osdBuffers.kernelExecutionLimit)
        return;
#endif
    
    //----------------------------------------------------------
    // OSD Vertex Transform
    //----------------------------------------------------------
    if(validThread)
    {
        patchParam[subthreadgroup_in_threadgroup] = OsdGetPatchParam(real_threadgroup, osdBuffers.patchParamBuffer);
        
        for(unsigned threadOffset = 0; threadOffset < CONTROL_POINTS_PER_THREAD; threadOffset++)
        {
            const auto vertexId = osdBuffers.indexBuffer[(thread_position_in_grid * CONTROL_POINTS_PER_THREAD + threadOffset) * IndexLookupStride];
            const auto v = osdBuffers.vertexBuffer[vertexId];
            
            threadgroup auto& patchVertex = patchVertices[thread_position_in_threadgroup * CONTROL_POINTS_PER_THREAD + threadOffset];
            
            //----------------------------------------------------------
            // User Vertex Transform
            //----------------------------------------------------------
            
            OsdComputePerVertex(float4(v.position,1), patchVertex, vertexId, transforms.modelViewProjectionTransform, osdBuffers);
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_threadgroup);
#endif
    
    
    //----------------------------------------------------------
    // OSD Patch Cull
    //----------------------------------------------------------
    if(validThread)
    {
#if PATCHES_PER_THREADGROUP > 1
        auto patch = patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_THREAD * CONTROL_POINTS_PER_PATCH;
#else
        //Small optimization for the '1 patch per threadgroup' case
        auto patch = patchVertices;
#endif
        
        if(!OsdCullPerPatchVertex(patch, transforms.modelViewTransform))
        {
#if !OSD_USE_PATCH_INDEX_BUFFER
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[0] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[1] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[2] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[3] = 0.0h;
            quadTessellationFactors[real_threadgroup].insideTessellationFactor[0] = 0.0h;
            quadTessellationFactors[real_threadgroup].insideTessellationFactor[1] = 0.0h;
#endif
            
            patchParam[subthreadgroup_in_threadgroup].z = -1;
#if !NEEDS_BARRIER
            return;
#endif
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_threadgroup);
#endif
    
    //----------------------------------------------------------
    // OSD Patch Compute
    //----------------------------------------------------------
    if(validThread && patchParam[subthreadgroup_in_threadgroup].z != -1)
    {
        for(unsigned threadOffset = 0; threadOffset < CONTROL_POINTS_PER_THREAD; threadOffset++)
        {
            OsdComputePerPatchVertex(
                                     patchParam[subthreadgroup_in_threadgroup],
                                     real_thread_in_threadgroup * CONTROL_POINTS_PER_THREAD + threadOffset,
                                     real_threadgroup,
                                     thread_position_in_grid * CONTROL_POINTS_PER_THREAD + threadOffset,
                                     patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_PATCH,
                                     osdBuffers
                                     );
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_device_and_threadgroup);
#endif
    
    //----------------------------------------------------------
    // OSD Tessellation Factors
    //----------------------------------------------------------
    if(validThread && real_thread_in_threadgroup == 0)
    {
        
#if OSD_USE_PATCH_INDEX_BUFFER
        const auto patchId = atomic_fetch_add_explicit((device atomic_uint*)&drawIndirectCommands->patchCount, 1, memory_order_relaxed);
        patchIndex[patchId] = real_threadgroup;
#else
        const auto patchId = real_threadgroup;
#endif
        
        OsdComputePerPatchFactors(
                                  patchParam[subthreadgroup_in_threadgroup],
                                  tessellationLevel,
                                  real_threadgroup,
                                  transforms.projectionTransform,
                                  transforms.modelViewTransform,
                                  osdBuffers,
                                  patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_PATCH,
                                  quadTessellationFactors[patchId]
                                  );
    }
#endif // OSD_IS_ADAPTIVE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_JitterCopyFirstFrame</string>
<string>SceneKit_JitterToEven</string>
<string>SceneKit_JitterToOdd</string>
<string>SceneKit_JitterResolve</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_JitterCopyFirstFrame</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-jitter-even</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler0</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_JitterToOdd</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-jitter-odd</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler1</key>
<string>SceneKit-jitter-even</string>
<key>factor</key>
<string>C3D-jitter-factor</string>
<key>textureSampler0</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_JitterToEven</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-jitter-even</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler1</key>
<string>SceneKit-jitter-odd</string>
<key>textureSampler0</key>
<string>COLOR</string>
<key>factor</key>
<string>C3D-jitter-factor</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_JitterResolve</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler0</key>
<string>SceneKit-jitter-odd</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>clientProgram</key>
<false/>
</dict>
</dict>
<key>targets</key>
<dict>
<key>SceneKit-jitter-odd</key>
<dict>
<key>type</key>
<string>color</string>
<key>persistent</key>
<true/>
</dict>
<key>SceneKit-jitter-even</key>
<dict>
<key>type</key>
<string>color</string>
<key>persistent</key>
<true/>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>C3D-jitter-factor</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
</dict>
</dict>
</plist>
#ifdef __METAL_VERSION__
#define DECLARE_BOOL(a) constant bool a [[ function_constant( __COUNTER__ ) ]];
#define DECLARE_INT(a) constant int a [[ function_constant( 1000 + __COUNTER__ ) ]];
#define DECLARE_UINT(a) constant uint a [[ function_constant( 2000 + __COUNTER__ ) ]];
#define DECLARE_OPT_INT(a) constant int a [[ function_constant( 3000 + __COUNTER__ ) ]];
#define DECLARE_OPT_UINT(a) constant uint a [[ function_constant( 4000 + __COUNTER__ ) ]];
#else
#if !defined(DECLARE_BOOL) || !defined(DECLARE_INT) || !defined(DECLARE_UINT) || !defined(DECLARE_OPT_INT) || !defined(DECLARE_OPT_UINT)
#error Need to declare DECLARE_BOOL and DECLARE_INT macros
#endif
#endif
#define kSCNTexcoordCount 8
// Vertex inputs / attributes
DECLARE_BOOL(need_vertex_color)
DECLARE_BOOL(need_position)
DECLARE_BOOL(need_normal)
DECLARE_BOOL(need_tangent)
DECLARE_BOOL(need_texcoord0)
DECLARE_BOOL(need_texcoord1)
DECLARE_BOOL(need_texcoord2)
DECLARE_BOOL(need_texcoord3)
DECLARE_BOOL(need_texcoord4)
DECLARE_BOOL(need_texcoord5)
DECLARE_BOOL(need_texcoord6)
DECLARE_BOOL(need_texcoord7)
DECLARE_BOOL(use_io_vertex_color)
DECLARE_BOOL(use_io_position)
DECLARE_BOOL(use_io_normal)
DECLARE_BOOL(use_io_view)
// material specifics
DECLARE_BOOL(use_ambient)
DECLARE_BOOL(use_diffuse)
DECLARE_BOOL(use_specular)
DECLARE_BOOL(use_emission)
DECLARE_BOOL(use_multiply)
DECLARE_BOOL(use_reflective)
DECLARE_BOOL(use_transparent)
// Map Shared
DECLARE_BOOL(use_diffuse_map)
DECLARE_BOOL(use_normal_map)
DECLARE_BOOL(use_transparent_map)
DECLARE_BOOL(use_emission_map)
DECLARE_BOOL(use_ambient_map)
// Maps Non PBR
DECLARE_BOOL(use_multiply_map)
DECLARE_BOOL(use_specular_map)
DECLARE_BOOL(use_reflective_map)
DECLARE_BOOL(use_reflectivecube_map)
// Maps PBR
DECLARE_BOOL(use_roughness_map)
DECLARE_BOOL(use_metalness_map)
// Texture Components (only when used with maps)
DECLARE_OPT_INT(diffuse_texture_component)
DECLARE_OPT_INT(normal_texture_component)
DECLARE_OPT_INT(transparent_texture_component)
DECLARE_OPT_INT(emission_texture_component)
DECLARE_OPT_INT(ambient_texture_component)
DECLARE_OPT_INT(multiply_texture_component)
DECLARE_OPT_INT(specular_texture_component)
DECLARE_OPT_INT(reflective_texture_component)
DECLARE_OPT_INT(roughness_texture_component)
DECLARE_OPT_INT(metalness_texture_component)
// Intensity (only when used with maps)
DECLARE_BOOL(use_diffuse_intensity)
DECLARE_BOOL(use_normal_intensity)
DECLARE_BOOL(use_transparent_intensity)
DECLARE_BOOL(use_emission_intensity)
DECLARE_BOOL(use_ambient_intensity)
DECLARE_BOOL(use_multiply_intensity)
DECLARE_BOOL(use_specular_intensity)
DECLARE_BOOL(use_reflective_intensity)
DECLARE_BOOL(use_roughness_intensity)
DECLARE_BOOL(use_metalness_intensity)
DECLARE_BOOL(use_fresnel)
DECLARE_BOOL(use_transparency)
DECLARE_BOOL(use_transparency_rgbzero)
// Mapping Channel (only when used with maps)
DECLARE_INT(diffuse_channel)
DECLARE_INT(normal_channel)
DECLARE_INT(transparent_channel)
DECLARE_INT(emission_channel)
DECLARE_INT(ambient_channel)
DECLARE_INT(multiply_channel)
DECLARE_INT(specular_channel)
DECLARE_INT(roughness_channel)
DECLARE_INT(metalness_channel)
// io uv (only when used with maps)
DECLARE_OPT_INT(diffuse_texcoord_io_index)
DECLARE_OPT_INT(normal_texcoord_io_index)
DECLARE_OPT_INT(transparent_texcoord_io_index)
DECLARE_OPT_INT(emission_texcoord_io_index)
DECLARE_OPT_INT(ambient_texcoord_io_index)
DECLARE_OPT_INT(multiply_texcoord_io_index)
DECLARE_OPT_INT(specular_texcoord_io_index)
DECLARE_OPT_INT(roughness_texcoord_io_index)
DECLARE_OPT_INT(metalness_texcoord_io_index)
// Texture Transform (only when used with maps)
DECLARE_OPT_INT(diffuse_transform_index)
DECLARE_OPT_INT(normal_transform_index)
DECLARE_OPT_INT(transparent_transform_index)
DECLARE_OPT_INT(emission_transform_index)
DECLARE_OPT_INT(ambient_transform_index)
DECLARE_OPT_INT(multiply_transform_index)
DECLARE_OPT_INT(specular_transform_index)
DECLARE_OPT_INT(roughness_transform_index)
DECLARE_OPT_INT(metalness_transform_index)
DECLARE_BOOL(use_emission_as_selfIllumination)
DECLARE_BOOL(use_ambient_as_ambientOcclusion)
DECLARE_BOOL(use_texture_transforms)
DECLARE_BOOL(use_point_rendering)
DECLARE_BOOL(diffuse_premultiplied)
DECLARE_BOOL(use_discard)
// geometry specifics
DECLARE_BOOL(use_instancing)
DECLARE_INT(max_bone_count)
// lighting
DECLARE_INT(lighting_model)
DECLARE_BOOL(use_lighting) // Do we want this or a better suited/name depthOnly for shadow map ?
DECLARE_BOOL(use_ambient_lighting)
DECLARE_BOOL(use_modulate_lighting)
DECLARE_BOOL(use_per_vertex_lighting)
DECLARE_BOOL(avoid_overlighting) // this has to be disabled for HDR. Do we want to keep that
DECLARE_BOOL(use_double_sided)
DECLARE_BOOL(use_probes_lighting)
// only support SH3 for now, so no need for probes_order
DECLARE_OPT_UINT(use_light0);
DECLARE_OPT_UINT(use_light1);
DECLARE_OPT_UINT(use_light2);
DECLARE_OPT_UINT(use_light3);
// node specifics
DECLARE_BOOL(use_node_opacity)
// scene specifics
DECLARE_BOOL(use_fog)
DECLARE_BOOL(use_ssao)
// vertex output
DECLARE_INT(io_texcoord_count)
#undef DECLARE_BOOL
#undef DECLARE_INT
#undef DECLARE_UINT
#undef DECLARE_OPT_INT
#undef DECLARE_OPT_UINT
attribute vec4 a_position;
varying vec2 uv;
void main(void)
    gl_Position = a_position;
    uv = (a_position.xy + 1.0) * 0.5;
struct SCNShaderSurface
vec3 view; // in view space
vec3 position; // in view space
vec3 normal; // in view space
vec3 tangent; // in view space
vec3 bitangent; // in view space
float shininess;
    float fresnel;
    float ambientOcclusion;
vec3 _normalTS; // UNDOCUMENTED in tangent space
float hash(vec2 p)
    p  = fract(p * vec2(443.8975,397.2973));
    p += dot(p.xy, p.yx+19.19);
    return fract(p.x * p.y);
#pragma body
float x = hash(u_modelTransform[3].xy);
_output.color = vec4(x+1./255.);
uniform sampler2D u_color;
uniform sampler2D u_depth;
uniform float     u_middleZ;
varying vec2 TexCoord;
void main (void)
gl_FragColor = texture2D(u_color,TexCoord);
    
#ifndef GL_ES
    gl_FragDepth = texture2D(u_depth,TexCoord).r;
    
    if(gl_FragDepth == 1.0){
        gl_FragDepth = u_middleZ;
    }
#endif
    
    //gl_FragColor.g = 0.3;
    //gl_FragColor = vec4(0.0,1.0,0.0,1.0);
    
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_renderScene</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_renderScene</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
<key>depth</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>layerMask</key>
<integer>3</integer>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
<key>clearColor</key>
<string>sceneBackground</string>
</dict>
</dict>
</dict>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>Outline-pickedObjects</string>
<string>Outline-outline</string>
</array>
<key>passes</key>
<dict>
<key>Outline-pickedObjects</key>
<dict>
<key>outputs</key>
<dict>
<key>depth</key>
<string>pickedObjects-depth</string>
<key>color</key>
<string>pickedObjects-color</string>
</dict>
<key>inputs</key>
<dict>
<key>a_position</key>
<string>a_position-symbol</string>
<key>u_modelViewProjectionTransform</key>
<string>u_modelViewProjectionTransform-symbol</string>
<key>u_modelTransform</key>
<string>u_modelTransform-symbol</string>
</dict>
<key>draw</key>
<string>DRAW_NODES</string>
<key>samples</key>
<integer>1</integer>
<key>overridesCustomProgram</key>
<true/>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
<key>clearColor</key>
<string>&quot;0. 0. 0. 1.&quot;</string>
</dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
</dict>
<key>Outline-outline</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>a_position</key>
<string>a_position-symbol</string>
<key>pickedColorBuffer</key>
<string>pickedObjects-color</string>
<key>pickedDepthBuffer</key>
<string>pickedObjects-depth</string>
<key>colorBuffer</key>
<string>COLOR</string>
<key>depthBuffer</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-Outline</string>
<key>clientProgram</key>
<string>NO</string>
<key>metalVertexShader</key>
<string>outline_vert</string>
<key>metalFragmentShader</key>
<string>outline_frag</string>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>a_position-symbol</key>
<dict>
<key>semantic</key>
<string>vertex</string>
</dict>
<key>u_modelViewProjectionTransform-symbol</key>
<dict>
<key>semantic</key>
<string>modelViewProjectionTransform</string>
</dict>
<key>u_modelTransform-symbol</key>
<dict>
<key>semantic</key>
<string>modelTransform</string>
</dict>
<key>color</key>
<dict>
<key>semantic</key>
<string>none</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>pickedObjects-depth</key>
<dict>
<key>type</key>
<string>depth</string>
<key>format</key>
<string>depth24</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
<key>pickedObjects-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>r8</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
</dict>
</dict>
</plist>
  struct scn_floor {
    float2 u_floor_viewport;
    float u_floorReflectivity;
#ifdef USE_FALLOFF
    float4x4 u_floorMVP_i;
    float4 u_floorPlane;
    float u_floorFalloff;
#ifdef USE_FALLOFF_START
    float u_floorFalloffStart;
#endif
#endif
static inline float3 floorUnprojectPoint(float3 screenPos, float4x4 mvp_i)
    float4 pTmp = mvp_i * float4(screenPos.xy * 2.0 - 1.0, screenPos.z, 1.0);
    return pTmp.xyz / pTmp.w;
#pragma arguments
scn_floor scn_floorSurf
texture2d_layer u_floorReflectionColor;
depth2d u_floorReflectionDepth;
#pragma body
float2 normalizedFragCoord = in.fragmentPosition.xy * scn_floorSurf.u_floor_viewport;
normalizedFragCoord.xy += 0.2 * _surface._normalTS.xy;
constexpr sampler linear_sampler(filter::linear);
float4 floorColor = u_floorReflectionColor.sampleLayer(linear_sampler, normalizedFragCoord);
float reflectionFactor = scn_floorSurf.u_floorReflectivity;
#ifdef USE_FALLOFF
float floorDepth = u_floorReflectionDepth.sample(linear_sampler, normalizedFragCoord);
float3  floorPW = floorUnprojectPoint(float3(normalizedFragCoord.x, 1. - normalizedFragCoord.y, floorDepth), scn_floorSurf.u_floorMVP_i);
float floorDist = -dot(floorPW.xyz, scn_floorSurf.u_floorPlane.xyz) - scn_floorSurf.u_floorPlane.w;;
#ifdef USE_FALLOFF_START
floorDist -= scn_floorSurf.u_floorFalloffStart; // Falloff has been updated in CPU
#endif // USE_FALLOFF_START
reflectionFactor *= 1.0 - clamp(floorDist / scn_floorSurf.u_floorFalloff, 0.0, 1.0);
#endif // USE_FALLOFF
floorColor *= reflectionFactor; // integrate reflection factor
_output.color.rgb *= (1. - floorColor.a); // obscure existing color with reflection opacity
_output.color.rgba += floorColor.rgba; // additive blending with premultiplied alpha
attribute vec3 a_position;
varying vec2 TexCoord;
uniform mat4 u_textureMatrix;
void main(void)
gl_Position = vec4(a_position, 1.0);
    TexCoord = (u_textureMatrix * vec4(a_position.xy, 0., 1.)).xy * 0.5 + 0.5;
TexCoord.y = 1.0 - TexCoord.y;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>computeVelocity</string>
<string>blur1</string>
<string>blur2</string>
<string>renderMovableNodes</string>
</array>
<key>passes</key>
<dict>
<key>blur1</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>colorSampler</key>
<string>COLOR</string>
<key>velocitySampler</key>
<string>VELOCITY</string>
<key>intensity</key>
<string>C3D-MotionBlur-Intensity-symbol</string>
</dict>
<key>program</key>
<string>C3D-GLSL-UNAVAILABLE</string>
<key>clientProgram</key>
<string>NO</string>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>metalFragmentShader</key>
<string>scn_motionblur_blur_6taps</string>
<key>metalVertexShader</key>
<string>scn_motionblur_vert</string>
</dict>
<key>blur2</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>colorSampler</key>
<string>COLOR</string>
<key>velocitySampler</key>
<string>VELOCITY</string>
<key>intensity</key>
<string>C3D-MotionBlur-Intensity-symbol</string>
</dict>
<key>program</key>
<string>C3D-GLSL-UNAVAILABLE</string>
<key>clientProgram</key>
<string>NO</string>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>metalFragmentShader</key>
<string>scn_motionblur_blur_12taps</string>
<key>metalVertexShader</key>
<string>scn_motionblur_vert</string>
</dict>
<key>renderMovableNodes</key>
<dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
<key>depth</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>onlyMovableNodes</key>
<true/>
<key>samples</key>
<integer>1</integer>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>a_position-symbol</key>
<dict>
<key>semantic</key>
<string>vertex</string>
</dict>
<key>C3D-MotionBlur-Intensity-symbol</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>C3D-oldViewProjectionTransform-symbol</key>
<dict>
<key>type</key>
<string>mat4</string>
</dict>
<key>C3D-viewProjectionInverseTransform-symbol</key>
<dict>
<key>type</key>
<string>mat4</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>VELOCITY</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba16f</string>
<key>scaleFactor</key>
<real>0.25</real>
</dict>
<key>blur-target</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
</dict>
</dict>
</plist>
uniform float u_floorReflectivity;
uniform sampler2D u_floorReflectionColor;
uniform vec2 u_floor_viewport;
#ifdef USE_FALLOFF
uniform mat4 u_floorMVP_i;
uniform vec4 u_floorPlane;
uniform float u_floorFalloff;
#ifdef USE_FALLOFF_START
uniform float u_floorFalloffStart;
#endif
uniform sampler2D u_floorReflectionDepth;
vec3 floorUnprojectPoint(vec3 screenPos)
    vec4 pTmp;
    pTmp.xyz = (2.0 * screenPos.xyz) - 1.0;
    pTmp.w = 1.0;
    pTmp = u_floorMVP_i * pTmp;
    pTmp /= pTmp.w;
    return vec3(pTmp);
#endif // USE_FALLOFF
#pragma body
vec2 normalizedFragCoord = gl_FragCoord.xy * u_floor_viewport;
normalizedFragCoord.xy += 0.2 * _surface._normalTS.xy;
vec4 floorColor = texture2D(u_floorReflectionColor, normalizedFragCoord);
float reflectionFactor = u_floorReflectivity;
#ifdef USE_FALLOFF
float floorDepth = texture2D(u_floorReflectionDepth, normalizedFragCoord).x;
vec3  floorPW = floorUnprojectPoint(vec3(normalizedFragCoord, floorDepth));
float floorDist = - dot(vec4(floorPW.xyz, 1.0), u_floorPlane);
#ifdef USE_FALLOFF_START
floorDist -= u_floorFalloffStart; // Falloff has been updated in CPU
#endif // USE_FALLOFF_START
reflectionFactor *= 1.0 - clamp(floorDist / u_floorFalloff, 0.0, 1.0);
#endif // USE_FALLOFF
floorColor *= reflectionFactor; // integrate reflection factor
_output.color.rgb *= (1. - floorColor.a); // obscure existing color with reflection opacity
_output.color.rgba += floorColor.rgba; // additive blending with premultiplied alpha
  "passes" : {
    "SceneKit_ApplyCIFilter" : {
      "outputs" : {
        "color" : "SceneKit-CI-effect-color"
      },
      "inputs" : {
        "myInput1" : "SceneKit-CI-nodetree-color"
      },
      "draw" : "CUSTOM"
    },
    "SceneKit_renderCINodeTree" : {
      "outputs" : {
        "depth" : "SceneKit-CI-nodetree-depth",
        "color" : "SceneKit-CI-nodetree-color"
      },
      "ignoreFloors" : true,
      "draw" : "DRAW_NODE",
      "node" : "self"
    },
    "SceneKit_renderCIQuad" : {
      "inputs" : {
        "u_m" : "C3D-CIFilter_modelMatrix",
        "u_color" : {
          "target" : "SceneKit-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "C3D-CIFilter_middleZ",
        "u_depth" : {
          "target" : "SceneKit-CI-nodetree-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "program" : "C3D-CIFilterComposite",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    }
  },
  "sequence" : [
    "SceneKit_renderCINodeTree",
    "SceneKit_ApplyCIFilter",
    "SceneKit_renderCIQuad"
  ],
  "symbols" : {
    "C3D-CIFilter_middleZ" : {
      "type" : "float"
    },
    "C3D-CIFilter_modelMatrix" : {
      "type" : "mat4"
    }
  },
  "targets" : {
    "SceneKit-CI-effect-color" : {
      "type" : "color"
    },
    "SceneKit-CI-nodetree-color" : {
      "target" : "texture_rectangle",
      "type" : "color"
    },
    "SceneKit-CI-nodetree-depth" : {
      "type" : "depth"
    }
varying vec4 v_vertexColor;
void main()
    gl_FragColor = v_vertexColor;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_JitterCopyFirstFrame</string>
<string>SceneKit_JitterToEven</string>
<string>SceneKit_JitterToOdd</string>
<string>SceneKit_JitterResolve</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_JitterCopyFirstFrame</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-jitter-even</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler0</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_JitterToOdd</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-jitter-odd</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler1</key>
<string>SceneKit-jitter-even</string>
<key>textureSampler0</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_JitterToEven</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>SceneKit-jitter-even</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler1</key>
<string>SceneKit-jitter-odd</string>
<key>textureSampler0</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
<key>SceneKit_JitterResolve</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>textureSampler0</key>
<string>SceneKit-jitter-odd</string>
<key>factor</key>
<string>C3D-jitter-factor-resolve</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>clientProgram</key>
<false/>
</dict>
</dict>
<key>targets</key>
<dict>
<key>SceneKit-jitter-odd</key>
<dict>
<key>type</key>
<string>color</string>
<key>persistent</key>
<true/>
<key>format</key>
<string>rgba32f</string>
</dict>
<key>SceneKit-jitter-even</key>
<dict>
<key>type</key>
<string>color</string>
<key>persistent</key>
<true/>
<key>format</key>
<string>rgba32f</string>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>C3D-jitter-factor-resolve</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
</dict>
</dict>
</plist>
// Utility
// Helper for compute kernels
#ifndef __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
    #define RETURN_IF_OUTSIDE(dst) if ((index.x >= dst.get_width()) || (index.y >= dst.get_height())) return;
    #define RETURN_IF_OUTSIDE3D(dst) if ((index.x >= dst.get_width()) || (index.y >= dst.get_height()) || (index.z >= dst.get_depth())) return;
#else // On macOS, we use dispatchThread with won't execute on out of texture pixels
    #define RETURN_IF_OUTSIDE(dst)
    #define RETURN_IF_OUTSIDE3D(dst)
#endif
// Tool function
namespace scn {
    
    // MARK: - Matrix/Vector utils
    
    inline float3x3 mat3(float4x4 mat4)
    {
        return float3x3(mat4[0].xyz, mat4[1].xyz, mat4[2].xyz);
    }
    
    inline float3 mat4_mult_float3_normalized(float4x4 matrix, float3 src)
    {
        float3 dst  =  src.xxx * matrix[0].xyz;
        dst         += src.yyy * matrix[1].xyz;
        dst         += src.zzz * matrix[2].xyz;
        return normalize(dst);
    }
    
    inline float3 mat4_mult_float3(float4x4 matrix, float3 src)
    {
        float3 dst  =  src.xxx * matrix[0].xyz;
        dst         += src.yyy * matrix[1].xyz;
        dst         += src.zzz * matrix[2].xyz;
        return dst;
    }
    inline float3 matrix_rotate(float4x4 mat, float3 dir)
    {
        return  dir.xxx * mat[0].xyz +
                dir.yyy * mat[1].xyz +
                dir.zzz * mat[2].xyz;
    }
    inline float4 matrix_transform(float4x4 mat, float3 pos)
    {
        return  pos.xxxx * mat[0] +
                pos.yyyy * mat[1] +
                pos.zzzz * mat[2] +
                           mat[3];
    }
    inline float3 quaternion_rotate_vector(float4 q, float3 v)
    {
        float3 t = 2.f * cross(q.xyz, v);
        return v + q.w * t + cross(q.xyz, t);
    }
    // This seems unneeded with float. Maybe half ?
    template <class T>
    inline vec<T, 3> robust_normalize(vec<T, 3> v)
    {
        vec<T, 3> zero = 0.;
        return all(v == zero) ? zero : normalize(v);
    }
    template <class T>
    inline void generate_basis(vec<T, 3> inR, thread vec<T, 3> *outS, thread vec<T, 3> *outT)
    {
        // from http://marc-b-reynolds.github.io/quaternions/2016/07/06/Orthonormal.html
        T x  = -inR.x;
        T y  = inR.y;
        T z  = inR.z;
        T sz = copysign(T(1.), z);
        T a  = y / (abs(z) + T(1.));
        T b  = y * a;
        T c  = x * a;
        *outS = (vec<T, 3>){ z + sz * b,  sz * c,       x       };
        *outT = (vec<T, 3>){ c,           T(1.) - b,    -sz * y };
    }
    
    // MARK: - Blending operators
    
    inline float3 blend_add(float3 base, float3 blend)
    {
        return min(base + blend, 1.0);
    }
    
    inline float3 blend_lighten(float3 base, float3 blend)
    {
        return max(blend, base);
    }
    
    inline float3 blend_screen(float3 base, float3 blend)
    {
        return (1.0 - ((1.0 - base) * (1.0 - blend)));
    }
    // MARK: - Math
    
    inline half sq(half f) {
        return f * f;
    }
    inline float sq(float f) {
        return f * f;
    }
    
    inline float2 sincos(float angle) {
        float cs;
        float sn = ::sincos(angle, cs);
        return float2(sn, cs);
    }
    
    // max error ~ 9.10-3
    inline float acos_fast(float f) {
        float x = abs(f);
        float res = -0.156583f * x + M_PI_2_F;
        res *= sqrt(1.0f - x);
        return (f >= 0.f) ? res : M_PI_F - res;
    }
    inline float asin_fast(float f)
    {
        return M_PI_2_F - acos_fast(f);
    }
    // From Michal Drobot
    inline float atan_fast(float inX)
    {
        float  x = inX;
        return x*(-0.1784f * abs(x) - 0.0663f * x * x + 1.0301f);
    }
    
    inline float atan2_fast(float y, float x)
    {
        float sx = x > 0.f ? -1.f : 1.f;
        float abs_y = abs(y) + 1e-10f; // epsilon to prevent 0/0 condition
        float r = (x + abs_y*sx) / (abs_y - x*sx);
        float angle = sx * M_PI_4_F + M_PI_2_F;
        angle      += (0.1963f * r * r - 0.9817f) * r;
        return y > 0.f ? angle : -angle;
    }
    
    // phi/theta are in the [0..1] range
    template <class T>
    inline vec<T, 3> cartesian_from_spherical(vec<T, 2> uv)
    {
        // do not use sinpi() waiting for
        // <rdar://problem/28486742> sinpi(x) is 3x slower than sin(x * PI) on N71
        T cos_phi;
        T phi = uv.x * 2.0f * M_PI_F;
        T sin_phi = ::sincos(phi, cos_phi);
        
        T cos_theta;
        T theta     = uv.y * M_PI_F;
        T sin_theta = ::sincos(theta, cos_theta);
        return (vec<T, 3>)(cos_phi * sin_theta,
                           cos_theta,
                           -sin_phi * sin_theta);
    }
    inline float2 spherical_from_cartesian(float3 dir)
    {
        return float2( atan2(-dir.z, dir.x) * (0.5f * M_1_PI_F), acos(dir.y) * M_1_PI_F);
    }
    inline half2 spherical_from_cartesian(half3 dir)
    {
        return half2(atan2(-dir.z, dir.x) * 0.5h, acos(dir.y)) * M_1_PI_H;
    }
    inline float2 spherical_from_cartesian_fast(float3 dir)
    {
        return float2( atan2_fast(-dir.z, dir.x) * (0.5f * M_1_PI_F), acos_fast(dir.y) * M_1_PI_F);
    }
    inline half2 spherical_from_cartesian_fast(half3 dir)
    {
        return half2( atan2_fast(-dir.z, dir.x) * 0.5h, acos_fast(dir.y)) * M_1_PI_H;
    }
    #define dual_contract_factor  1.0
    template <class T>
    inline vec<T, 2> dual_paraboloid_from_cartesian(vec<T, 3> dir)
    {
        dir.xy /= abs(dir.z) + 1.0;
//        dir.xy /= dual_contract_factor;
        dir.y = 0.5 - dir.y * 0.5;
        T s   = sign(dir.z) * 0.25;
        dir.x = s * (dir.x - 1.0) + 0.5;
        return dir.xy;
    }
    
    // uv [0..1]
    template <class T>
    inline vec<T, 3> cartesian_from_dual_paraboloid(vec<T, 2>  uv)
    {
        // put uv in [-1..1] for each side
        T zside = 0.5 * sign(0.5 - uv.x);
        uv.x = 1.0 - abs(4.0 * uv.x - 2.0); // [-1..1|1..-1]
        uv.y   = 1.0 - uv.y * 2.0;
        T z = length_squared(uv); // * T(dual_contract_factor);
        z = (1.0 - z) * zside;
        
        return vec<T, 3>(uv.x, uv.y, z);
    }
    inline float reduce_min(float3 v) {
        return min(v.x, min(v.y, v.z));
    }
    
    inline float reduce_min(float4 v) {
        return min(min(v.x, v.y), min(v.z, v.w));
    }
    inline float reduce_max(float3 v) {
        return max(v.x, max(v.y, v.z));
    }
    inline float reduce_max(float4 v) {
        return max(max(v.x, v.y), max(v.z, v.w));
    }
    
    inline float3 randomSphereDir(float2 rnd)
    {
        float s = rnd.x * M_PI_F * 2.f;
        float t = rnd.y * 2.f - 1.f;
        return float3(sin(s), cos(s), t) / sqrt(1.f + t * t);
    }
    
    // from Sledgehammer slides
    template <class T>
    inline T interleaved_gradient_noise(vec<T, 2> pos)
    {
        vec<T, 3> magic( 0.06711056f, 0.00583715f, 52.9829189f );
        return fract( magic.z * fract( dot( pos, magic.xy ) ) );
    }
    
    inline float3 hemisphere_reflect(float3 v, float3 nrm)
    {
        return v * sign(dot(v, nrm));
    }
    
    inline float3 randomHemisphereDir(float3 dir, float2 rnd)
    {
        return hemisphere_reflect(randomSphereDir( rnd ), dir);
    }
    
    inline void orthogonal_basis(float3 n, thread float3& xp, thread float3& yp)
    {
        // method 2a variant
        float sz = n.z >= 0.f ? 1.f : -1.f;
        float a  =  n.y / (1.f + abs(n.z));
        float b  =  n.y * a;
        float c  = -n.x * a;
        
        xp = float3(n.z + sz * b,   sz * c,     -n.x);
        yp = float3(c,              1.f - b,    -sz * n.y);
    }
    template <class U>
    inline float2 normalized_coordinate(ushort2 index, U texture)
    {
        return float2(float(index.x) / float(texture.get_width()  - 1),
                      float(index.y) / float(texture.get_height() - 1));
    }
    template <class U>
    inline float2 normalized_coordinate(uint2 index, U texture)
    {
        return float2(float(index.x) / float(texture.get_width()  - 1),
                      float(index.y) / float(texture.get_height() - 1));
    }
    template <class U>
    inline half2 normalized_coordinate_half(uint2 index, U texture)
    {
        return half2(half(index.x) / half(texture.get_width()  - 1),
                     half(index.y) / half(texture.get_height() - 1));
    }
    // MARK: Working with cube textures
    template <class T>
    inline vec<T, 3> cubemap_dir_from_sampleCoord(uint face, vec<T, 2> sampleCoord) // sampleCoord in [-1, 1]
    {
        switch(face) {
            case 0: // +X
                return vec<T, 3>( 1.0, -sampleCoord.y, -sampleCoord.x);
            case 1: // -X
                return vec<T, 3>(-1.0, -sampleCoord.y,  sampleCoord.x);
            case 2: // +Y
                return vec<T, 3>(sampleCoord.x,  1.0,  sampleCoord.y);
            case 3: // -Y
                return vec<T, 3>(sampleCoord.x, -1.0, -sampleCoord.y);
            case 4: // +Z
                return vec<T, 3>( sampleCoord.x, -sampleCoord.y,  1.0);
            default: // -Z
                return vec<T, 3>(-sampleCoord.x, -sampleCoord.y, -1.0);
        }
    }
    // convert form [0..1] to [-1..1]
    template <class T>
    inline T signed_unit(T uv) {
        return uv * 2.0 - 1.0;
    }
    // convert form [-1..1] to [0..1]
    template <class T>
    inline T unsigned_unit(T uv) {
        return uv * 0.5 + 0.5;
    }
    template <class T>
    inline vec<T, 3> cubemap_dir_from_uv(uint face, vec<T, 2> uv) // uv in [0, 1]
    {
        return cubemap_dir_from_sampleCoord(face, signed_unit(uv));
    }
    template <class T>
    inline vec<T, 3> cubemap_dir_from_uv_unit(uint face, vec<T, 2> uv) // uv in [0, 1]
    {
        return normalize(cubemap_dir_from_uv(face, uv));
    }
    // MARK: - SIMD Extensions
    
    inline vector_float2 barycentric_mix(vector_float2 __x, vector_float2 __y, vector_float2 __z, vector_float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    inline vector_float3 barycentric_mix(vector_float3 __x, vector_float3 __y, vector_float3 __z, vector_float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    inline vector_float4 barycentric_mix(vector_float4 __x, vector_float4 __y, vector_float4 __z, vector_float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    
    static inline float rect(float2 lt, float2 rb, float2 uv)
    {
        float2 borders = step(lt, uv) * step(uv, rb);
        return borders.x * borders.y;
    }
    
    inline half4 debugColorForCascade(int cascade)
    {
        switch (cascade) {
            case 0:
            return half4(1.h, 0.h, 0.h, 1.h);
            case 1:
            return half4(0.9, 0.5, 0., 1.);
            case 2:
            return half4(1., 1., 0., 1.);
            case 3:
            return half4(0., 1., 0., 1.);
            default:
            return half4(0., 0., 0., 1.);
        }
    }
    inline half3 debugColorForFace(int count)
    {
        switch (count) {
            case 0:  return half3(1.0h, 0.1h, 0.1h);
            case 1:  return half3(0.1h, 1.0h, 1.0h);
            case 2:  return half3(0.1h, 1.0h, 0.1h);
            case 3:  return half3(1.0h, 0.1h, 1.0h);
            case 4:  return half3(0.1h, 0.1h, 1.0h);
            default: return half3(1.0h, 1.0h, 0.1h);
        }
    }
    inline half4 debugColorForCount(int count)
    {
        switch (count) {
            case 0: return half4(0.0h, 0.0h, 0.0h, 1.h);
            case 1: return half4(0.0h, 0.0h, 0.4h, 1.h);
            case 2: return half4(0.0h, 0.0h, 0.9h, 1.h);
            case 3: return half4(0.0h, 0.4h, 0.7h, 1.h);
            case 4: return half4(0.0h, 0.9h, 0.4h, 1.h);
            case 5: return half4(0.0h, 0.9h, 0.0h, 1.h);
            case 6: return half4(0.4h, 0.7h, 0.0h, 1.h);
            case 7: return half4(0.9h, 0.7h, 0.0h, 1.h);
            default: return half4(1., 0., 0., 1.);
        }
    }
    inline float grid(float2 lt, float2 rb, float2 gridSize, float thickness, float2 uv)
    {
        float insideRect = rect(lt, rb + thickness, uv);
        float2 gt = thickness * gridSize;
        float2 lines = step(abs(lt - fract(uv * gridSize)), gt);
        return insideRect * (lines.x + lines.y);
    }
    inline float checkerboard(float2 gridSize, float2 uv)
    {
        float2 check = floor(uv * gridSize);
        return step(fmod(check.x + check.y, 2.f), 0.f);
    }
    // MARK: - Colors
    
    inline float luminance(float3 color)
    {
        // `color` assumed to be in the linear sRGB color space
        // https://en.wikipedia.org/wiki/Relative_luminance
        return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
    }
    
    inline float srgb_to_linear(float c)
    {
        return (c <= 0.04045f) ? c / 12.92f : powr((c + 0.055f) / 1.055f, 2.4f);
    }
    
    inline half srgb_to_linear_fast(half c)
    {
        return powr(c, 2.2h);
    }
    
    inline half3 srgb_to_linear_fast(half3 c)
    {
        return powr(c, 2.2h);
    }
    
    inline half srgb_to_linear(half c)
    {
        // return (c <= 0.04045h) ? c / 12.92h : powr((c + 0.055h) / 1.055h, 2.4h);
        return (c <= 0.04045h) ? (c * 0.0773993808h) :  powr(0.9478672986h * c + 0.05213270142h, 2.4h);
    }
    
    inline float3 srgb_to_linear(float3 c)
    {
        return float3(srgb_to_linear(c.x), srgb_to_linear(c.y), srgb_to_linear(c.z));
    }
    
    inline float linear_to_srgb(float c)
    {
        return (c < 0.0031308f) ? (12.92f * c) : (1.055f * powr(c, 1.f/2.4f) - 0.055f);
    }
    
    inline float3 linear_to_srgb(float3 v) { // we do not saturate since linear extended values can be fed in
        return float3(linear_to_srgb(v.x), linear_to_srgb(v.y), linear_to_srgb(v.z));
    }
    
// MARK: GL helpers
template <typename T>
inline T dFdx(T v) {
    return dfdx(v);
// Y is up in GL and down in Metal
template <typename T>
inline T dFdy(T v) {
    return -dfdy(v);
// MARK: -
inline float4 texture2DProj(texture2d<float> tex, sampler smp, float4 uv)
    return tex.sample(smp, uv.xy / uv.w);
inline half4 texture2DProj(texture2d<half> tex, sampler smp, float4 uv)
    return tex.sample(smp, uv.xy / uv.w);
static constexpr sampler scn_shadow_sampler_rev_z = sampler(coord::normalized, filter::linear, mip_filter::none, address::clamp_to_zero, compare_func::less_equal);
static constexpr sampler scn_shadow_sampler_ord_z = sampler(coord::normalized, filter::linear, mip_filter::none, address::clamp_to_edge, compare_func::greater_equal);
#if defined(USE_REVERSE_Z) && USE_REVERSE_Z
static constexpr sampler scn_shadow_sampler = scn_shadow_sampler_rev_z;
#else
static constexpr sampler scn_shadow_sampler = scn_shadow_sampler_ord_z;
#endif
inline float shadow2DProj(sampler shadow_sampler, depth2d<float> tex, float4 uv)
    float3 uvp = uv.xyz / uv.w;
    return tex.sample_compare(shadow_sampler, uvp.xy, uvp.z);
inline float shadow2DArray(sampler shadow_sampler, depth2d_array<float> tex, float3 uv, uint slice)
    return tex.sample_compare(shadow_sampler, uv.xy, slice, uv.z);
inline float shadow2DArrayProj(sampler shadow_sampler, depth2d_array<float> tex, float4 uv, uint slice)
    float3 uvp = uv.xyz / uv.w;
    return tex.sample_compare(shadow_sampler, uvp.xy, slice, uvp.z);
// MARK Shadow
inline float4 transformViewPosInShadowSpace(float3 pos, float4x4 shadowMatrix, bool reverseZ)
    //project into light space
    float4 lightScreen =  shadowMatrix * float4(pos, 1.f);
    
    // ensure receiver after the shadow projection box are not in shadow (when no caster == 1. instead of infinite)
    // TODO : this is awkward : we maybe should rework the comparison order to have something more natural
    lightScreen.z = reverseZ ? max(lightScreen.z, 0.f) : min(lightScreen.z, 0.9999f * lightScreen.w);
    
    return lightScreen;
inline float ComputeShadow(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, bool reverseZ)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix, reverseZ);
    float shadow = shadow2DProj(shadow_sampler, shadowMap, lightScreen);
    // Is this useful ?
    shadow *= step(0., lightScreen.w);
    
    return shadow;
inline float ComputeSoftShadowGrid(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, int sampleCount, bool reverseZ)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix, reverseZ);
    // if sampleCount is known compileTime, this get rid of the shadowKernel binding
    float shadow;
    if (sampleCount <= 1) {
        shadow = shadow2DProj(shadow_sampler, shadowMap, lightScreen);
    } else {
        float3 uvp = lightScreen.xyz / lightScreen.w;
        uvp.z += reverseZ ? 0.005f : -0.005f; // TODO: get rid of hardcoded bias...
        float2 texelSize = 2.f / float2(shadowMap.get_width(), shadowMap.get_height());
        float2 origin    = uvp.xy - (sampleCount * 0.5f) * texelSize;
        // penumbra
        if (sampleCount <= 4) { // offset are limited to [-7..8]
            half totalAccum = 0.h;
            for (int y = 0; y < sampleCount; ++y) {
                for (int x = 0; x < sampleCount; ++x) {
                    totalAccum  += half(shadowMap.sample_compare(shadow_sampler, origin, uvp.z, 2 * int2(x,y)));
                }
            }
            shadow = totalAccum / half(sampleCount * sampleCount);
        } else {
            float totalAccum = 0.f;
            for (int y = 0; y < sampleCount; ++y) {
                for (int x = 0; x < sampleCount; ++x) {
                    float2 samplePos = origin + texelSize * float2(x, y);
                    totalAccum  += shadowMap.sample_compare(shadow_sampler, samplePos, uvp.z);
                }
            }
            shadow = totalAccum / float(sampleCount * sampleCount);
        }
    }
    // Is this useful ?
    shadow *= step(0., lightScreen.w);
    return shadow;
inline float ComputeSoftShadow(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount, float shadowRadius, bool reverseZ)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix, reverseZ);
    // if sampleCount is known compileTime, this get rid of the shadowKernel binding
    float shadow;
    if (sampleCount <= 1) {
        shadow = shadow2DProj(shadow_sampler, shadowMap, lightScreen);
    } else {
        //*
        // penumbra
        float filteringSizeFactor = shadowRadius * lightScreen.w;
        //smooth all samples
        float4 samplePos = lightScreen;
        float totalAccum = 0.0;
        for(int i=0; i < sampleCount; i++){
            samplePos.xyz = lightScreen.xyz + shadowKernel[i].xyz * filteringSizeFactor;
            totalAccum += shadow2DProj(shadow_sampler, shadowMap, samplePos);
        }
        /*/ This version could introduce more shadow acne
        float3 uvp = lightScreen.xyz / lightScreen.w;
        float2 texelSize = shadowRadius;
         //smooth all samples
         float totalAccum = 0.0;
         for (int i=0; i < sampleCount; i++){
            float2 samplePos = uvp.xy + texelSize * shadowKernel[i].xy;
            totalAccum  += shadowMap.sample_compare(shadow_sampler, samplePos, uvp.z);
         }
         //*/
        shadow = totalAccum / float(sampleCount);
    }
    // Is this useful ?
    shadow *= step(0., lightScreen.w);
    return shadow;
inline float ComputeCascadeBlendAmount(float3 shadowPos, bool cascadeBlending)
    const float cascadeBlendingFactor = 0.1f; // No need to configure that
    float3 cascadePos = abs(shadowPos.xyz * 2.f - 1.f);
    
    if (cascadeBlending) {
#if 0
        const float edge = 1.f - cascadeBlendingFactor;
        // could also do a smoothstep
        cascadePos = 1.f - saturate((cascadePos - edge) / cascadeBlendingFactor);
        return cascadePos.x * cascadePos.y * cascadePos.z; //min(o.x, o.y);
#else
        // OPTIM use reduce_max
        float distToEdge = 1.0f - max(max(cascadePos.x, cascadePos.y), cascadePos.z);
        return smoothstep(0.0f, cascadeBlendingFactor, distToEdge);
#endif
    } else {
        return step(cascadePos.x, 1.f) * step(cascadePos.y, 1.f) * step(cascadePos.z, 1.f);
    }
inline float4 SampleShadowCascade(sampler shadow_sampler, depth2d_array<float> shadowMaps, float3 shadowPosition, uint cascadeIndex, constant float4* shadowKernel, int sampleCount, float shadowRadius)
    // cascade debug + grid
    float2 gridSize = float2(shadowMaps.get_width(), shadowMaps.get_height()) / 32;
    float gd = scn::checkerboard(shadowPosition.xy, gridSize);
    float3 gridCol = mix(float3(scn::debugColorForCascade(cascadeIndex).rgb), float3(0.f), float3(gd > 0.f));
    
    float shadow = 0.f;
    if (sampleCount > 1) {
        // penumbra : sum all samples
        for (int i = 0; i < sampleCount; ++i) {
            shadow += shadow2DArray(shadow_sampler, shadowMaps, shadowKernel[i].xyz * shadowRadius + shadowPosition, cascadeIndex);
        }
        shadow /= float(sampleCount);
    } else {
        // OPTIM : do not use proj version since cascade are never projective
        shadow = shadow2DArray(shadow_sampler, shadowMaps, shadowPosition, cascadeIndex);
    }
    return float4(gridCol, shadow);
inline float4 ComputeCascadedShadow(sampler shadow_sampler, float3 viewPos, float4x4 shadowMatrix, constant float4 *cascadeScale, constant float4 *cascadeBias, int cascadeCount, depth2d_array<float> shadowMaps, bool enableCascadeBlending, constant float4* shadowKernel, int sampleCount, float shadowRadius)
    float4 shadow = 0.f;
    float opacitySum = 1.f;
    
    // get the position in light space
    float3 pos_ls =  (shadowMatrix * float4(viewPos, 1.f)).xyz;
    for (int c = 0; c < cascadeCount; ++c) {
        
        float3 pos_cs =  pos_ls * cascadeScale[c].xyz + cascadeBias[c].xyz;
        // we multiply the radius by the scale factor of the cascade
        float cascadeRadius = shadowRadius * cascadeScale[c].x;
        float opacity = ComputeCascadeBlendAmount(pos_cs, enableCascadeBlending);
        if (opacity > 0.f) { // this cascade should be considered
            
            float alpha = opacity * opacitySum;
            shadow += SampleShadowCascade(shadow_sampler, shadowMaps, pos_cs, c, shadowKernel, sampleCount, cascadeRadius) * alpha;
            opacitySum -= alpha;
        }
        if (opacitySum <= 0.f) // fully opaque shadow (no more blending needed) -> bail out
            break;
    }
    return shadow;
    "sequence" : [ "SceneKit_PostProcess"],
    "passes" : {
        "SceneKit_PostProcess" : {
            "outputs" : {
                "color" : "COLOR"
            },
            "inputs" : {
                "colorBuffer" : "COLOR",
                "depthBuffer" : "DEPTH"
            },
            "draw" : "DRAW_QUAD",
            "clientProgram" : "NO",
            "program" : "C3D-GLSL-UNAVAILABLE",
        }
    },
    "symbols" : {
    },
uniform sampler2D downSampler;
uniform sampler2D blurSampler;
varying vec2 v_texCoord;
void main (void)
    vec4 down = texture2D( downSampler, v_texCoord);
    vec4 blur = texture2D( blurSampler, v_texCoord);
    float coc = max( down.a, 2. * blur.a - down.a );
gl_FragColor = vec4(down.rgb, coc);
    // debug
    //gl_FragColor = vec4(coc, 0., 0., 1.);
    "sequence": [
                 "SceneKit_SSAO_DEPTH",
                 "SceneKit_SSAO"
                 ],
    "passes": {
        "SceneKit_SSAO_DEPTH": {
            "outputs": {
                "depth": "depth-target",
                "color": "ssao-depth"
            },
            "depthStates": {
                "clear": true
            },
            "colorStates": {
                "clear": true,
                "clearColor": "-100000. -100000. -100000. -100000."
            },
            "samples": 1,
            "__clientProgram": "NO",
            "draw": "DRAW_SCENE",
        },
        "SceneKit_SSAO": {
            "outputs": {
                "color": "COLOR"
            },
            "inputs": {
                "color": "COLOR"
            },
            "draw": "DRAW_QUAD",
            "clientProgram": "NO",
            "program": "C3D-GLSL-UNAVAILABLE"
        }
    },
    "symbols": {},
    "targets": {
        "depth-target": {
            "type": "depth",
        },
        "ssao-depth": {
            "format": "rgba16f",
            "type": "color",
            "global": true,
            "mipmapped": true,
            "scaleFactor": 1.0
        }
    }
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_renderScene</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_renderScene</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
<key>color1</key>
<string>ALBEDO</string>
<key>color2</key>
<string>NORMAL_DEPTH</string>
<key>color3</key>
<string>DS3</string>
<key>depth</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>drawSceneIncludesOverlays</key>
<true/>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
<key>clearColor</key>
<string>sceneBackground</string>
</dict>
</dict>
</dict>
<key>targets</key>
<dict>
<key>ALBEDO</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
<key>NORMAL_DEPTH</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba32f</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
<key>DS3</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba32f</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
</dict>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_copy</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_copy</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
<key>depth</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-Copy</string>
<key>clientProgram</key>
<false/>
<key>inputs</key>
<dict>
<key>textureSampler0</key>
<string>COLOR</string>
</dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
</dict>
</dict>
</dict>
</plist>
#import <metal_stdlib>
using namespace metal;
#if __METAL_VERSION__ >= 120
#import "scn_metal"
#import "scn_util.h"
#import "scn_standard_lighting.h"
#import "scn_standard_constants.h"
#import "C3D-PBR.metal"
// TODO list
// normalTransform should be 3x3 : would avoid the 3x3 conversion
// we could also have a noscale mode where normalTransform == modelView
// lighting
enum C3DLightingModel
    C3DLightingModelConstant,
    C3DLightingModelLambert,
    C3DLightingModelPhong,
    C3DLightingModelBlinn,
    C3DLightingModelNone,
    C3DLightingModelPhysicallyBased,
// derivated constants
// Do we want to pack property like this ?
// constant uint dummy [[ function_constant( 500 ) ]];
// constant uint dummy2  = ((dummy > 2) & 0x3);
constant bool use_per_vertex_diffuse    = use_per_vertex_lighting;
constant bool use_per_vertex_specular   = use_per_vertex_lighting && use_specular;
constant bool use_per_pixel_lighting    = !use_per_vertex_lighting; // && use_lighting ???
constant bool lighting_model_is_pbr     = (lighting_model == C3DLightingModelPhysicallyBased);
constant bool use_pbr                   = is_function_constant_defined(lighting_model) && lighting_model_is_pbr;
constant bool use_io_texcoord0          = io_texcoord_count > 0;
constant bool use_io_texcoord1          = io_texcoord_count > 1;
constant bool use_io_texcoord2          = io_texcoord_count > 2;
constant bool use_io_texcoord3          = io_texcoord_count > 3;
constant bool use_io_texcoord4          = io_texcoord_count > 4;
constant bool use_io_texcoord5          = io_texcoord_count > 5;
constant bool use_io_texcoord6          = io_texcoord_count > 6;
constant bool use_io_texcoord7          = io_texcoord_count > 7;
constant bool use_no_instancing             = !use_instancing;
constant bool use_skinning                  = max_bone_count > 0;
constant bool has_multiple_bone_per_vertex  = max_bone_count > 1; //  && max_bone_count > 1; crash the compiler
constant bool use_skinningWeights           = use_skinning && has_multiple_bone_per_vertex; // crash the compiler
constant bool use_skinningJoints            = use_skinning;
// dummy needed waiting for <rdar://problem/28298920> Too many? Function constants break my other shaders
constant bool dummy_shadow0             = LIGHT_HAS_SHADOW(use_light0);
constant bool use_shadow0               = is_function_constant_defined(use_light0) && dummy_shadow0;
constant bool dummy_shadow1             = LIGHT_HAS_SHADOW(use_light1);
constant bool use_shadow1               = is_function_constant_defined(use_light1) && dummy_shadow1;
constant bool dummy_shadow2             = LIGHT_HAS_SHADOW(use_light2);
constant bool use_shadow2               = is_function_constant_defined(use_light2) && dummy_shadow2;
constant bool dummy_shadow3             = LIGHT_HAS_SHADOW(use_light3);
constant bool use_shadow3               = is_function_constant_defined(use_light3) && dummy_shadow3;
constant bool dummy_gobo0               = LIGHT_HAS_GOBO(use_light0);
constant bool use_gobo0                 = is_function_constant_defined(use_light0) && dummy_gobo0;
constant bool dummy_gobo1               = LIGHT_HAS_GOBO(use_light1);
constant bool use_gobo1                 = is_function_constant_defined(use_light1) && dummy_gobo1;
constant bool dummy_gobo2               = LIGHT_HAS_GOBO(use_light2);
constant bool use_gobo2                 = is_function_constant_defined(use_light2) && dummy_gobo2;
constant bool dummy_gobo3               = LIGHT_HAS_GOBO(use_light3);
constant bool use_gobo3                 = is_function_constant_defined(use_light3) && dummy_gobo3;
constant bool dummy_ies0                = LIGHT_TYPE(use_light0) == kC3DLightTypeIES;
constant bool dummy_iesType2d0          = (LIGHT_IES_TYPE(use_light0) != kC3DLightIESTypeCubemap);
constant bool dummy_iesTypeCube0        = (LIGHT_IES_TYPE(use_light0) == kC3DLightIESTypeCubemap);
constant bool dummy_ies2d0              = dummy_ies0 && dummy_iesType2d0;
constant bool dummy_iesCube0            = dummy_ies0 && dummy_iesTypeCube0;
constant bool use_ies0                  = is_function_constant_defined(use_light0) && dummy_ies2d0;
constant bool use_iesCube0              = is_function_constant_defined(use_light0) && dummy_iesCube0;
constant bool dummy_ies1                = LIGHT_TYPE(use_light1) == kC3DLightTypeIES;
constant bool dummy_iesType2d1          = (LIGHT_IES_TYPE(use_light1) != kC3DLightIESTypeCubemap);
constant bool dummy_iesTypeCube1        = (LIGHT_IES_TYPE(use_light1) == kC3DLightIESTypeCubemap);
constant bool dummy_ies2d1              = dummy_ies1 && dummy_iesType2d1;
constant bool dummy_iesCube1            = dummy_ies1 && dummy_iesTypeCube1;
constant bool use_ies1                  = is_function_constant_defined(use_light1) && dummy_ies2d1;
constant bool use_iesCube1              = is_function_constant_defined(use_light1) && dummy_iesCube1;
constant bool dummy_ies2                = LIGHT_TYPE(use_light2) == kC3DLightTypeIES;
constant bool dummy_iesType2d2          = (LIGHT_IES_TYPE(use_light2) != kC3DLightIESTypeCubemap);
constant bool dummy_iesTypeCube2        = (LIGHT_IES_TYPE(use_light2) == kC3DLightIESTypeCubemap);
constant bool dummy_ies2d2              = dummy_ies2 && dummy_iesType2d2;
constant bool dummy_iesCube2            = dummy_ies2 && dummy_iesTypeCube2;
constant bool use_ies2                  = is_function_constant_defined(use_light2) && dummy_ies2d2;
constant bool use_iesCube2              = is_function_constant_defined(use_light2) && dummy_iesCube2;
constant bool dummy_ies3                = LIGHT_TYPE(use_light3) == kC3DLightTypeIES;
constant bool dummy_iesType2d3          = (LIGHT_IES_TYPE(use_light3) != kC3DLightIESTypeCubemap);
constant bool dummy_iesTypeCube3        = (LIGHT_IES_TYPE(use_light3) == kC3DLightIESTypeCubemap);
constant bool dummy_ies2d3              = dummy_ies3 && dummy_iesType2d3;
constant bool dummy_iesCube3            = dummy_ies3 && dummy_iesTypeCube3;
constant bool use_ies3                  = is_function_constant_defined(use_light3) && dummy_ies2d3;
constant bool use_iesCube3              = is_function_constant_defined(use_light3) && dummy_iesCube3;
constexpr sampler linearSampler(filter::linear, mip_filter::linear);
constexpr sampler shadowSampler(filter::linear, mip_filter::none, compare_func::greater_equal);
// Inputs
#define MAX_LIGHT_COUNT 8
typedef struct {
    // we always to transform to view_space, then project using scn_frame.projectionTransform
    float4x4 modelViewTransform;            // 64
    // the normal matrix may be the same than modelView if the model has no scale
    float4x4 normalTransform;               // + 64
    // we always to transform to view_space, then project using scn_frame.projectionTransform
    float4x4 modelTransform;            // 64
    uint8_t lightIndices[MAX_LIGHT_COUNT];  // + 8
    float nodeOpacity;                      // + 4
    
} scn_std_node;
//#ifdef USE_SKINNING // need to be last since we may cut the buffer size based on the real bone number
//    float4 skinningJointMatrices[765]; // Consider having a separate buffer ?
//#endif
typedef struct {
    float3 position         [[ attribute(SCNVertexSemanticPosition)]];
    float3 normal           [[ attribute(SCNVertexSemanticNormal),      function_constant(need_normal) ]];
    float4 tangent          [[ attribute(SCNVertexSemanticTangent),     function_constant(need_tangent) ]];
    float4 color            [[ attribute(SCNVertexSemanticColor)        function_constant(need_vertex_color) ]];
    float4 skinningWeights  [[ attribute(SCNVertexSemanticBoneWeights), function_constant(use_skinningWeights)]];
    uint4  skinningJoints   [[ attribute(SCNVertexSemanticBoneIndices), function_constant(use_skinningJoints)]];
    float2 texcoord0        [[ attribute(SCNVertexSemanticTexcoord0),   function_constant(need_texcoord0) ]];
    float2 texcoord1        [[ attribute(SCNVertexSemanticTexcoord1),   function_constant(need_texcoord1) ]];
    float2 texcoord2        [[ attribute(SCNVertexSemanticTexcoord2),   function_constant(need_texcoord2) ]];
    float2 texcoord3        [[ attribute(SCNVertexSemanticTexcoord3),   function_constant(need_texcoord3) ]];
    float2 texcoord4        [[ attribute(SCNVertexSemanticTexcoord4),   function_constant(need_texcoord4) ]];
    float2 texcoord5        [[ attribute(SCNVertexSemanticTexcoord5),   function_constant(need_texcoord5) ]];
    float2 texcoord6        [[ attribute(SCNVertexSemanticTexcoord6),   function_constant(need_texcoord6) ]];
    float2 texcoord7        [[ attribute(SCNVertexSemanticTexcoord7),   function_constant(need_texcoord7) ]];
} scn_vertex_t; // __attribute__((scn_per_frame));
// custom sources will be added as separate buffers
typedef struct {
    float4 fragmentPosition [[position]]; // The window relative coordinate (x, y, z, 1/w) values for the fragment
    
    float fragmentSize  [[ point_size, function_constant(use_point_rendering) ]];
    float4 vertexColor  [[ function_constant(use_io_vertex_color) ]];
    float3 position     [[ function_constant(use_io_position) ]];
    float3 normal       [[ function_constant(use_io_normal) ]];
    float3 tangent      [[ function_constant(need_tangent) ]];
    float3 bitangent    [[ function_constant(need_tangent) ]];
    // array are not supported in stage_in
    float2 texcoord0    [[ function_constant(use_io_texcoord0) ]];
    float2 texcoord1    [[ function_constant(use_io_texcoord1) ]];
    float2 texcoord2    [[ function_constant(use_io_texcoord2) ]];
    float2 texcoord3    [[ function_constant(use_io_texcoord3) ]];
    float2 texcoord4    [[ function_constant(use_io_texcoord4) ]];
    float2 texcoord5    [[ function_constant(use_io_texcoord5) ]];
    float2 texcoord6    [[ function_constant(use_io_texcoord6) ]];
    float2 texcoord7    [[ function_constant(use_io_texcoord7) ]];
    float3 diffuse      [[ function_constant(use_per_vertex_diffuse) ]];
    float3 specular     [[ function_constant(use_per_vertex_specular) ]];
    
#ifdef USE_EXTRA_VARYINGS
    __ExtraVaryingsDecl__
#endif
    
} commonprofile_io;
struct SCNShaderSurface {
    float3 view;                // Direction from the point on the surface toward the camera (V)
    float3 position;            // Position of the fragment
    float3 normal;              // Normal of the fragment (N)
    float3 geometryNormal;      // Normal of the fragment - not taking into account normal map
    float2 normalTexcoord;      // Normal texture coordinates
    float3 tangent;             // Tangent of the fragment
    float3 bitangent;           // Bitangent of the fragment
    float4 ambient;             // Ambient property of the fragment
    float2 ambientTexcoord;     // Ambient texture coordinates
    float4 diffuse;             // Diffuse property of the fragment. Alpha contains the opacity.
    float2 diffuseTexcoord;     // Diffuse texture coordinates
    float4 specular;            // Specular property of the fragment
    float2 specularTexcoord;    // Specular texture coordinates
    float4 emission;            // Emission property of the fragment
    float2 emissionTexcoord;    // Emission texture coordinates
    float4 multiply;            // Multiply property of the fragment
    float2 multiplyTexcoord;    // Multiply texture coordinates
    float4 transparent;         // Transparent property of the fragment
    float2 transparentTexcoord; // Transparent texture coordinates
    float4 reflective;          // Reflective property of the fragment
    float  metalness;           // Metalness
    float2 metalnessTexcoord;   // Metalness texture coordinates
    float  roughness;           // Roughness
    float2 roughnessTexcoord;   // Metalness texture coordinates
    float shininess;            // Shininess property of the fragment.
    float fresnel;              // Fresnel property of the fragment.
    float ambientOcclusion;     // Ambient occlusion term of the fragment
    float3 _normalTS;           // UNDOCUMENTED in tangent space
#ifdef USE_SURFACE_EXTRA_DECL
    __SurfaceExtraDecl__
#endif
struct SCNShaderGeometry
    float4 position;
    float3 normal;
    float4 tangent;
    float4 color;
    float2 texcoords[8]; // MAX_UV
struct commonprofile_uniforms {
    float4 diffuseColor;
    float4 specularColor;
    float4 ambientColor;
    float4 emissionColor;
    float4 reflectiveColor;
    float4 multiplyColor;
    float4 transparentColor;
    float metalness;
    float roughness;
    
    float diffuseIntensity;
    float specularIntensity;
    float normalIntensity;
    float ambientIntensity;
    float emissionIntensity;
    float reflectiveIntensity;
    float multiplyIntensity;
    float transparentIntensity;
    float metalnessIntensity;
    float roughnessIntensity;
    float displacementIntensity;
    
    float materialShininess;
    float selfIlluminationOcclusion;
    float transparency;
    float3 fresnel; // x: ((n1-n2)/(n1+n2))^2 y:1-x z:exponent
    
    // TODO max transform count but the CPU will not always copy all this size
    float4x4 textureTransforms[1];
// Shader modifiers declaration (only enabled if one modifier is present)
#ifdef USE_SHADER_MODIFIERS
__ShaderModifiersDecl__
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////
struct SCNShaderLightingContribution {
    float3 ambient;
    float3 diffuse;
    float3 specular;
    float3 modulate;
struct SCNLightTextures {
    // possible shadow maps
    depth2d<float> u_shadowTexture0                     [[ texture(12) ]];
    depth2d<float> u_shadowTexture1                     [[ texture(13) ]];
    depth2d<float> u_shadowTexture2                     [[ texture(14) ]];
    depth2d<float> u_shadowTexture3                     [[ texture(15) ]];
    
    // possible gobo
    texture2d<float> u_goboTexture0                     [[ texture(16) ]];
    texture2d<float> u_goboTexture1                     [[ texture(17) ]];
    texture2d<float> u_goboTexture2                     [[ texture(18) ]];
    texture2d<float> u_goboTexture3                     [[ texture(19) ]];
    depth2d<float> _getShadowMap(uint lightInfo, SCNLightTextures lightTextures)
    {
        ushort shadowMapIndex = LIGHT_SHADOW_MAP(lightInfo);
        switch (shadowMapIndex) {
            case 1: return lightTextures.u_shadowTexture0;
            case 2: return lightTextures.u_shadowTexture1;
            case 3: return lightTextures.u_shadowTexture2;
            case 4: return lightTextures.u_shadowTexture3;
        }
    }
struct SCNLightingParameters {
    
    SCNLightData        lightData;
    uint                lightInfo;
    float3              lightDirection;
    float3              attenuation;
    SCNShaderSurface    surface;
static float3 scn_lighting_direction(SCNLightData lightData, uint lightInfo, thread SCNShaderSurface& surface)
    uint lightType = LIGHT_TYPE(lightInfo);
    if (lightType == kC3DLightTypeDirectional) {
        return lightData.direction;
    }
    return normalize(lightData.position - surface.position);
    
static void scn_lambert_lighting(SCNLightingParameters params, thread SCNShaderLightingContribution& lightingContribution)
    SCNLightData lightData      = params.lightData;
    SCNShaderSurface surface    = params.surface;
    float3 l                    = params.lightDirection;
    
    float3 intensity = lightData.color.rgb * max(0.f, dot(surface.normal, l));
    lightingContribution.diffuse += intensity;
static void scn_blinn_lighting(SCNLightingParameters params, thread SCNShaderLightingContribution& lightingContribution)
    SCNLightData lightData      = params.lightData;
    SCNShaderSurface surface    = params.surface;
    float3 l                    = params.lightDirection;
    float3 intensity =  lightData.color.rgb * max(0.f, dot(surface.normal, l));
    lightingContribution.diffuse += intensity;
    float3 h = normalize(l + surface.view);
    lightingContribution.specular += powr(max(0.f, dot(surface.normal, h)), surface.shininess) * intensity;
static void scn_phong_lighting(SCNLightingParameters params, thread SCNShaderLightingContribution& lightingContribution)
    SCNLightData lightData      = params.lightData;
    SCNShaderSurface surface    = params.surface;
    float3 l                    = params.lightDirection;
    
    float3 intensity = lightData.color.rgb * max(0.f, dot(surface.normal, l));
    lightingContribution.diffuse += intensity;
    
    float3 r = reflect(-l, surface.normal);
    lightingContribution.specular += pow(max(0.f, dot(r, surface.view)), surface.shininess) * intensity;
inline void scn_pbr_lightingContribution_pointLight(float3         l,
                                                    float3         n,
                                                    float3         v,
                                                    float3         albedo,
                                                    float          metalness,
                                                    float          roughness,
                                                    thread float3& lightingContributionDiffuse,
                                                    thread float3& lightingContributionSpecular)
    float3 h = normalize(l + v);
    
    float NoL = saturate(dot(n, l));
    float NoH = saturate(dot(n, h));
    float LoH = saturate(dot(l, h));
    
    float  effectiveAlbedo = (1.f - metalness); // mix(float3(1.f), float3(0.f), metalness) with 1.f and not `albedo` because `SCNShaderLightingContribution.diffuse` will be multiplied by `pbr_surface.albedo` later in `scn_pbr_combine`
    float3 reflectance = mix(float3(PBR_F0_NON_METALLIC), albedo, metalness);
    
    float alpha = roughness * roughness; // perceptually-linear roughness
    
    float D   = scn_brdf_D(alpha, NoH);
    float3 F  = scn_brdf_F_opt(reflectance, LoH);
#if 0 // Optimization
    float Vis = scn_brdf_V_opt(alpha, LoH);
#else
    float NoV = saturate(dot(n, v));
    float Vis = scn_brdf_V(alpha, NoL, NoV);
#endif
    
    lightingContributionDiffuse = NoL * effectiveAlbedo * M_1_PI_F;
    lightingContributionSpecular = NoL * D * F * Vis;
static void scn_pbr_lighting(SCNLightingParameters params, thread SCNShaderLightingContribution& lightingContribution)
    SCNLightData lightData      = params.lightData;
    SCNShaderSurface surface    = params.surface;
    float3 l                    = params.lightDirection;
    
    float3 diffuseOut, specularOut;
    scn_pbr_lightingContribution_pointLight(l, surface.normal.xyz, surface.view, surface.diffuse.rgb, surface.metalness, surface.roughness, diffuseOut, specularOut);
    
    lightingContribution.diffuse    += diffuseOut  * lightData.pbrColor.rgb;
    lightingContribution.specular   += specularOut * lightData.pbrColor.rgb;
static float scn_distance_attenuation(SCNLightingParameters params)
    uint lightInfo          = params.lightInfo;
    SCNLightData lightData  = params.lightData;
    float3 l = params.surface.position - lightData.position;
    if (use_pbr) {
        uint lightType = LIGHT_TYPE(lightInfo);
        if (lightType == kC3DLightTypeDirectional) { // directional light cannot have attenuation ?
            return 1.f;
        }
        return scn_pbr_distanceAttenuation(l);
    } else {
        uint distAttType = LIGHT_DIST_ATT(lightInfo);
        if (distAttType != kC3DLightAttenuationTypeNone) {
            
            float3 att = lightData.distanceAttenuation;
            float dist = length(l);
            switch (distAttType) {
                case kC3DLightAttenuationTypeConstant:
                    return step(dist, att.x);
                case kC3DLightAttenuationTypeLinear:
                    return saturate(dist * att.x + att.y);
                case kC3DLightAttenuationTypeQuadratic:
                    return scn::sq(saturate(dist * att.x + att.y));
                case kC3DLightAttenuationTypeExponent:
                    return pow(saturate(dist * att.x + att.y), att.z);
            }
        }
    }
    return 1.f;
static float scn_spot_attenuation(SCNLightingParameters params)
    uint lightInfo          = params.lightInfo;
    SCNLightData lightData  = params.lightData;
    float3 l                = params.lightDirection;
    
    uint spotAttType = LIGHT_SPOT_ATT(lightInfo);
    if (spotAttType != kC3DLightAttenuationTypeNone) {
        
        float3 spotFactors = lightData.spotAttenuation;
        switch (spotAttType) {
            case kC3DLightAttenuationTypeConstant:
                return step(spotFactors.x, dot(l, lightData.direction));
            case kC3DLightAttenuationTypeLinear:
                return saturate(dot(l, lightData.direction) * spotFactors.x + spotFactors.y);
            case kC3DLightAttenuationTypeQuadratic:
                return scn::sq(saturate(dot(l, lightData.direction) * spotFactors.x + spotFactors.y));
            case kC3DLightAttenuationTypeExponent:
                return pow(saturate(dot(l, lightData.direction) * spotFactors.x + spotFactors.y), spotFactors.z);
        }
    }
    return 1.f;
/* This is the optimized version all-in-one, but we cannot pass nullptr as textures, so we had to split the shader
static void scn_optimized do_light(SCNLightingParameters params, depth2d<float> shadowMap, texture2d<float> goboMap, thread SCNShaderLightingContribution& lightingContrib)
    uint lightInfo          = params.lightInfo;
    // Do first the attenuations, working on light.color
    
    // Distance
    float attenuation = scn_distance_attenuation(params);
    
    // spot
    attenuation *= scn_spot_attenuation(params);
    
    // Shadow
    if (LIGHT_HAS_SHADOW(lightInfo)) {
        attenuation *= scn_shadow_attenuation(params, shadowMap);
    }
    
    // integrate attenuation in light.color
    params.lightData.color.rgb *= attenuation;
    
    // Gobo (keep it inline since it colorize the light color
    if (LIGHT_HAS_GOBO(lightInfo)) {
        SCNLightData lightData  = params.lightData;
        float goboIntensity = lightData.color.a; // TODO : what is this ? gobo intensity ?
        constexpr sampler goboSampler = sampler();
        float3 goboColor = texture2DProj(goboMap, goboSampler, (lightData.shadowMatrix * float4(params.surface.position, 1.f))).rgb;
        if (LIGHT_IS_MODULATE(lightInfo)) {
            params.lightData.color.rgb *= mix(float3(1.), goboColor, goboIntensity);
        } else {
            params.lightData.color.rgb *= goboColor * goboIntensity;
        }
    }
    
    // TODO IES
    
    switch (lighting_model) {
        case C3DLightingModelLambert:
            scn_lambert_lighting(params, lightingContrib);
            break;
        case C3DLightingModelBlinn:
            scn_blinn_lighting(params, lightingContrib);
            break;
        case C3DLightingModelPhong:
            scn_phong_lighting(params, lightingContrib);
            break;
        case C3DLightingModelPhysicallyBased:
            scn_pbr_lighting(params, lightingContrib);
            break;
        default:
            // static_assert(lighting_model == kLightingModelPhysicallyBased, "should not go there");
            break;
            //        case kLightingModelPhysicallyBased:
//            scn_pbr_lightingContribution_pointLight()
    }
static void scn_do_gobo(thread SCNLightingParameters& params, texture2d<float> goboMap)
    uint lightInfo          = params.lightInfo;
    SCNLightData lightData  = params.lightData;
    float goboIntensity = lightData.color.a; // TODO : what is this ? gobo intensity ?
    float3 goboColor = texture2DProj(goboMap, linearSampler, (lightData.shadowMatrix * float4(params.surface.position, 1.f))).rgb;
    if (LIGHT_IS_MODULATE(lightInfo)) {
        params.attenuation *= mix(float3(1.), goboColor, goboIntensity);
    } else {
        params.attenuation *= goboColor * goboIntensity;
    }
// IES 2D
static void scn_do_ies(thread SCNLightingParameters& params, texture2d<float> iesMap, sampler iesSampler)
    uint lightInfo          = params.lightInfo;
    SCNLightData lightData  = params.lightData;
    // OPTIMIZE : this is done twice posssibly (again in scn_light)
    params.lightDirection   = scn_lighting_direction(params.lightData, lightInfo, params.surface);
    float3 spotFactors      = lightData.spotAttenuation;
    float att = 0.f;
    switch (LIGHT_IES_TYPE(lightInfo)) {
        case kC3DLightIESType1D:
            att = iesMap.sample(iesSampler, float2(acos(dot(params.lightDirection, lightData.direction))*spotFactors.x, 0.f)).r;
            break;
            
        case kC3DLightIESType2D:
        {
            
            float vertAngle     = acos(dot(params.lightDirection, lightData.direction));
            // OPTIMIZE : store in params along the lightingDirection
            float3 surfaceRay   = params.surface.position - lightData.position;
            float3 projPos = normalize(surfaceRay - dot(surfaceRay, lightData.direction) * lightData.direction);
            float2 texCoord = float2(dot(projPos, lightData.right), dot(projPos, lightData.up)) * vertAngle * spotFactors.x;
            att = iesMap.sample(iesSampler, texCoord * 0.5f + 0.5f).r;
            
        } break;
    }
    params.attenuation.rgb *= att;
// overload to treat IES cubemaps
static void scn_do_ies(thread SCNLightingParameters& params, texturecube<float> iesMap, sampler iesSampler)
    uint lightInfo          = params.lightInfo;
    SCNLightData lightData  = params.lightData;
    // OPTIMIZE : this is done twice posssibly (again in scn_light)
    params.lightDirection   = scn_lighting_direction(params.lightData, lightInfo, params.surface);
    if (LIGHT_IES_TYPE(lightInfo) == kC3DLightIESTypeCubemap) {
        float att = iesMap.sample(iesSampler, (lightData.shadowMatrix * float4(params.surface.position, 1.f)).xyz).r;
        params.attenuation.rgb *= att;
    } // else we have a problem....
static void scn_do_shadow(thread SCNLightingParameters& params, depth2d<float> shadowMap, constant float4* u_shadowKernel)
    uint lightInfo          = params.lightInfo;
    SCNLightData lightData  = params.lightData;
    
    uchar sampleCount = LIGHT_SHADOW_SAMPLE(lightInfo);
    
    float4 lightScreen = lightData.shadowMatrix * float4(params.surface.position, 1.f);
    
    float shadowRadius = lightData.shadowRadius;
    
    float shadowingTerm = 0.f;
    if (sampleCount > 1) { // need soft shadows
        float filteringSizeFactor = shadowRadius * lightScreen.w;
        for (int i = 0; i < sampleCount; i++) {
            
            shadowingTerm += shadow2DProj(shadowSampler, shadowMap, lightScreen + (u_shadowKernel[i] * filteringSizeFactor));
        }
        shadowingTerm /= float(sampleCount);
    } else {
        shadowingTerm = shadow2DProj(shadowSampler, shadowMap, lightScreen);
    }
    
    // final shadow attenuation to lighting
    // shadow "color" stored in alpha of the light color
    params.attenuation *= (1.f - shadowingTerm * lightData.color.a);
static void scn_do_light(SCNLightingParameters params, thread SCNShaderLightingContribution& lightingContrib)
    uint lightInfo          = params.lightInfo;
    // update light direction (used for distance/spot attenuation, lighting...)
    params.lightDirection   = scn_lighting_direction(params.lightData, lightInfo, params.surface);
    
    // Do first the attenuations, working on light.color
    // Distance
    float attenuation = scn_distance_attenuation(params);
    
    // spot
    uint lightType = LIGHT_TYPE(lightInfo);
    if (lightType == kC3DLightTypeSpot) {
        attenuation *= scn_spot_attenuation(params);
    }
    params.attenuation *= attenuation;
    // integrate attenuation in light.color
    params.lightData.color.rgb *= params.attenuation;
    params.lightData.pbrColor.rgb *= params.attenuation;
    switch (lighting_model) {
        case C3DLightingModelLambert:
            scn_lambert_lighting(params, lightingContrib);
            break;
        case C3DLightingModelBlinn:
            scn_blinn_lighting(params, lightingContrib);
            break;
        case C3DLightingModelPhong:
            scn_phong_lighting(params, lightingContrib);
            break;
        case C3DLightingModelPhysicallyBased:
            scn_pbr_lighting(params, lightingContrib);
            break;
        default:
            // static_assert(lighting_model == kLightingModelPhysicallyBased, "should not go there");
            break;
            //        case kLightingModelPhysicallyBased:
            //            scn_pbr_lightingContribution_pointLight()
    }
///////////////////////////////////////////////////////////////////////////////////////////////////////////
inline SCNPBRSurface SCNShaderSurfaceToSCNPBRSurface(SCNShaderSurface surface)
    SCNPBRSurface s;
    
    s.n = surface.normal;
    s.v = surface.view;
    s.albedo = surface.diffuse.xyz;
    
    if (use_emission)
        s.emission = surface.emission.xyz;
    else
        s.emission = float3(0.);
    
    s.metalness = surface.metalness;
    s.roughness = surface.roughness;
    s.ao = surface.ambientOcclusion;
    return s;
static float4 scn_pbr_combine_cubemap(SCNPBRSurface                      surface,
                                     SCNShaderLightingContribution      lighting,
                                     texture2d<float, access::sample>   specularDFG,
                                     texturecube<float, access::sample> specularLD,
                                     texturecube<float, access::sample> irradianceTexture,
                                     constant SCNSceneBuffer&           scn_frame)
    // inputs
    float4x4 localDirToWorldCubemapDir = scn_frame.viewToCubeTransform;
    float environmentIntensity = scn_frame.environmentIntensity;
    
    float3 n = surface.n;
    float3 v = surface.v;
    float3 albedo = surface.albedo;
    float metalness = surface.metalness;
    float roughness = surface.roughness;
    float ambientOcclusion = surface.ao;
    
    float3 r = reflect(-v, n); // mirror vector (view vector around normal)
    float NoV = saturate(dot(n, v));
    
    float3 diffuseDominantNDirection = n;
    float3 specularDominantNDirection = r;
    
    // transform in cubespace
    diffuseDominantNDirection = scn::mat4_mult_float3(localDirToWorldCubemapDir, diffuseDominantNDirection);
    
    float3 irradiance;
    if (use_emission_as_selfIllumination) {
        irradiance = surface.emission;
    } else {
        // Diffuse
        irradiance = irradianceTexture.sample(linearSampler, diffuseDominantNDirection).rgb * environmentIntensity;
    }
    
    // Specular
    float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
    
    float3 LD = specularLD.sample(linearSampler, scn::mat4_mult_float3(localDirToWorldCubemapDir, specularDominantNDirection), level(mipLevel)).rgb * environmentIntensity;
    float2 DFG = specularDFG.sample(linearSampler, float2(NoV, roughness)).rg;
    
    float3 effectiveAlbedo = mix(albedo, float3(0.0), metalness);
    float3 reflectance = mix(float3(PBR_F0_NON_METALLIC), albedo, metalness);
    
    float3 diffuse = effectiveAlbedo * irradiance;
    float3 specular = LD * (reflectance * DFG.r + DFG.g);
    
    //
    float3 ibl_color;
    if (use_emission_as_selfIllumination) { // we have to invert the test compare to the first one due to a compiler bug
        
        float selfIlluminationAmbientOcclusion = saturate(mix(1., ambientOcclusion, surface.selfIlluminationOcclusion));
        ibl_color = selfIlluminationAmbientOcclusion * diffuse + ambientOcclusion * specular;
    } else {
        ibl_color = ambientOcclusion * (diffuse + specular);
    }
    
    float4 color;
    color.rgb = (lighting.ambient * surface.ao + lighting.diffuse) * surface.albedo.rgb + lighting.specular + ibl_color;
    
    if (use_emission && !use_emission_as_selfIllumination)
        color.rgb += surface.emission.rgb;
    
    return color;
static float4 scn_pbr_combine_probes(SCNPBRSurface                      surface,
                              SCNShaderLightingContribution      lighting,
                              texture2d<float, access::sample>   specularDFG,
                              texturecube<float, access::sample> specularLD,
                              sh3_coefficients                   shCoefficients,
                              constant SCNSceneBuffer&           scn_frame)
    // inputs
    float4x4 localDirToWorldCubemapDir = scn_frame.viewToCubeTransform;
    float environmentIntensity = scn_frame.environmentIntensity;
    
    float3 n = surface.n;
    float3 v = surface.v;
    float3 albedo = surface.albedo;
    float metalness = surface.metalness;
    float roughness = surface.roughness;
    float ambientOcclusion = surface.ao;
    
    float3 r = reflect(-v, n); // mirror vector (view vector around normal)
    float NoV = saturate(dot(n, v));
    
    float3 diffuseDominantNDirection = n;
    float3 specularDominantNDirection = r;
    
    // transform in cubespace
    diffuseDominantNDirection = scn::mat4_mult_float3(localDirToWorldCubemapDir, diffuseDominantNDirection);
    
    float3 irradiance;
    if (use_emission_as_selfIllumination) {
        irradiance = surface.emission;
    } else {
        irradiance = shEvalDirection(float4(diffuseDominantNDirection, 1.), shCoefficients) * environmentIntensity;
    }
    
    // Specular
    float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
    
    float3 LD = specularLD.sample(linearSampler, scn::mat4_mult_float3(localDirToWorldCubemapDir, specularDominantNDirection), level(mipLevel)).rgb * environmentIntensity;
    float2 DFG = specularDFG.sample(linearSampler, float2(NoV, roughness)).rg;
    
    float3 effectiveAlbedo = mix(albedo, float3(0.0), metalness);
    float3 reflectance = mix(float3(PBR_F0_NON_METALLIC), albedo, metalness);
    
    float3 diffuse = effectiveAlbedo * irradiance;
    float3 specular = LD * (reflectance * DFG.r + DFG.g);
    
    //
    float3 ibl_color;
    if (use_emission_as_selfIllumination) { // we have to invert the test compare to the first one due to a compiler bug
        
        float selfIlluminationAmbientOcclusion = saturate(mix(1., ambientOcclusion, surface.selfIlluminationOcclusion));
        ibl_color = selfIlluminationAmbientOcclusion * diffuse + ambientOcclusion * specular;
    } else {
        ibl_color = ambientOcclusion * (diffuse + specular);
    }
    
    float4 color;
    color.rgb = (lighting.ambient * surface.ao + lighting.diffuse) * surface.albedo.rgb + lighting.specular + ibl_color;
    
    if (use_emission && !use_emission_as_selfIllumination)
        color.rgb += surface.emission.rgb;
    
    return color;
inline float4 illuminate(SCNShaderSurface surface, SCNShaderLightingContribution lighting)
    float4 color = {0.,0.,0., surface.diffuse.a};
    
    float3 D = lighting.diffuse;
    if (use_ambient_lighting)
        D += lighting.ambient * surface.ambientOcclusion;
    if (use_emission_as_selfIllumination)
        D += surface.emission.rgb;
    // Do we want to clamp there ????
    color.rgb = surface.diffuse.rgb * D;
    if (use_specular || use_reflective) {
        float3 S = (use_specular) ? lighting.specular : float3(0.);
        if (use_reflective)
            S += surface.reflective.rgb * surface.ambientOcclusion;
        if (use_specular)
            S *= surface.specular.rgb;
        color.rgb += S;
    }
    
    if (use_ambient && !use_ambient_as_ambientOcclusion)
        color.rgb += surface.ambient.rgb * lighting.ambient;
    if (use_emission && !use_emission_as_selfIllumination)
        color.rgb += surface.emission.rgb;
    if (use_multiply)
        color.rgb *= surface.multiply.rgb;
    if (use_modulate_lighting)
        color.rgb *= lighting.modulate;
    return color;
// Vertex shader function
struct scn_patch_t {
    patch_control_point<scn_vertex_t> controlPoints;
static void standard_initalize_surface(thread SCNShaderSurface&  surface,
                                       thread SCNShaderGeometry& geometry,
                                       thread scn_std_node&      in_node)
    // if (use_position || use_instancing)
    surface.position = (in_node.modelViewTransform * geometry.position).xyz;
    
    if (use_io_normal)
        surface.normal = normalize(scn::mat3(in_node.normalTransform) * geometry.normal);
    
    if (need_tangent) {
        surface.tangent = normalize(scn::mat3(in_node.normalTransform) * geometry.tangent.xyz);
        // no need to renormalize since tangent and normal should be orthogonal
        surface.bitangent = geometry.tangent.w * cross(surface.tangent, surface.normal);
    }
    if (use_io_view)
        surface.view = normalize(-surface.position);
static void standard_initalize_geometry(thread scn_vertex_t&      in,
                                        thread SCNShaderGeometry& geometry)
    geometry.position = float4(in.position, 1.f);
    
    if (need_normal)
        geometry.normal = in.normal;
    
    if (need_tangent)
        geometry.tangent = in.tangent;
    
    if (need_texcoord0)
        geometry.texcoords[0] = in.texcoord0;
    if (need_texcoord1)
        geometry.texcoords[1] = in.texcoord1;
    if (need_texcoord2)
        geometry.texcoords[2] = in.texcoord2;
    if (need_texcoord3)
        geometry.texcoords[3] = in.texcoord3;
    if (need_texcoord4)
        geometry.texcoords[4] = in.texcoord4;
    if (need_texcoord5)
        geometry.texcoords[5] = in.texcoord5;
    if (need_texcoord6)
        geometry.texcoords[6] = in.texcoord6;
    if (need_texcoord7)
        geometry.texcoords[7] = in.texcoord7;
    
    geometry.color = (need_vertex_color) ? in.color : float4(1.f);
static void standard_initalize_geometry_post_tessellation(thread scn_patch_t&       in,
                                                          thread SCNShaderGeometry& geometry,
                                                          float3                    patchCoord)
    geometry.position = float4(scn::barycentric_mix(in.controlPoints[0].position, in.controlPoints[1].position, in.controlPoints[2].position, patchCoord), 1.0);
    
    if (need_normal)
        geometry.normal = normalize(scn::barycentric_mix(in.controlPoints[0].normal, in.controlPoints[1].normal, in.controlPoints[2].normal, patchCoord));
    
    if (need_tangent)
        geometry.tangent = normalize(scn::barycentric_mix(in.controlPoints[0].tangent, in.controlPoints[1].tangent, in.controlPoints[2].tangent, patchCoord));
    
    if (need_texcoord0)
        geometry.texcoords[0] = scn::barycentric_mix(in.controlPoints[0].texcoord0, in.controlPoints[1].texcoord0, in.controlPoints[2].texcoord0, patchCoord);
    if (need_texcoord1)
        geometry.texcoords[1] = scn::barycentric_mix(in.controlPoints[0].texcoord1, in.controlPoints[1].texcoord1, in.controlPoints[2].texcoord1, patchCoord);
    if (need_texcoord2)
        geometry.texcoords[2] = scn::barycentric_mix(in.controlPoints[0].texcoord2, in.controlPoints[1].texcoord2, in.controlPoints[2].texcoord2, patchCoord);
    if (need_texcoord3)
        geometry.texcoords[3] = scn::barycentric_mix(in.controlPoints[0].texcoord3, in.controlPoints[1].texcoord3, in.controlPoints[2].texcoord3, patchCoord);
    if (need_texcoord4)
        geometry.texcoords[4] = scn::barycentric_mix(in.controlPoints[0].texcoord4, in.controlPoints[1].texcoord4, in.controlPoints[2].texcoord4, patchCoord);
    if (need_texcoord5)
        geometry.texcoords[5] = scn::barycentric_mix(in.controlPoints[0].texcoord5, in.controlPoints[1].texcoord5, in.controlPoints[2].texcoord5, patchCoord);
    if (need_texcoord6)
        geometry.texcoords[6] = scn::barycentric_mix(in.controlPoints[0].texcoord6, in.controlPoints[1].texcoord6, in.controlPoints[2].texcoord6, patchCoord);
    if (need_texcoord7)
        geometry.texcoords[7] = scn::barycentric_mix(in.controlPoints[0].texcoord7, in.controlPoints[1].texcoord7, in.controlPoints[2].texcoord7, patchCoord);
    
    geometry.color = (need_vertex_color) ? scn::barycentric_mix(in.controlPoints[0].color, in.controlPoints[1].color, in.controlPoints[2].color, patchCoord) : float4(1.f);
static void standard_apply_skinning(float4                    skinningWeights,
                                    uint4                     skinningJoints,
                                    constant float4*          skinningJointMatrices,
                                    thread SCNShaderGeometry& geometry)
    float3 pos = 0.f;
    float3 nrm = 0.f;
    float3 tgt = 0.f;
    for (int i = 0; i < max_bone_count; ++i) {
        float weight = (max_bone_count > 1) ? skinningWeights[i] : 1.f;
        if (weight <= 0.f)
            continue;
        
        int idx = int(skinningJoints[i]) * 3;
        float4x4 jointMatrix = float4x4(skinningJointMatrices[idx],
                                        skinningJointMatrices[idx+1],
                                        skinningJointMatrices[idx+2],
                                        float4(0.f, 0.f, 0.f, 1.f));
        
        pos += (geometry.position * jointMatrix).xyz * weight;
        if (need_normal)
            nrm += geometry.normal * scn::mat3(jointMatrix) * weight;
        if (need_tangent)
            tgt += geometry.tangent.xyz * scn::mat3(jointMatrix) * weight;
    }
    
    geometry.position.xyz = pos;
    
    if (need_normal)
        geometry.normal = nrm;
    
    if (need_tangent)
        geometry.tangent.xyz = tgt;
static void standard_configure_out(constant commonprofile_uniforms& commonprofile,
                                   thread SCNShaderSurface&         surface,
                                   thread SCNShaderGeometry&        geometry,
                                   thread commonprofile_io&         out)
    if (use_io_position)
        out.position = surface.position;
    
    if (use_io_normal)
        out.normal = surface.normal;
    
    if (need_tangent) {
        out.tangent = surface.tangent;
        out.bitangent = surface.bitangent;
    }
    
    if (use_io_vertex_color)
        out.vertexColor = geometry.color;
    
    float2 uvOut[kSCNTexcoordCount];
    
    if (is_function_constant_defined(diffuse_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ diffuse_channel ];
        if (is_function_constant_defined(diffuse_transform_index))
            uv = (commonprofile.textureTransforms[diffuse_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ diffuse_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(normal_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ normal_channel ];
        if (is_function_constant_defined(normal_transform_index))
            uv = (commonprofile.textureTransforms[normal_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ normal_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(transparent_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ transparent_channel ];
        if (is_function_constant_defined(transparent_transform_index))
            uv = (commonprofile.textureTransforms[transparent_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ transparent_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(emission_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ emission_channel ];
        if (is_function_constant_defined(emission_transform_index))
            uv = (commonprofile.textureTransforms[emission_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ emission_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(ambient_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ ambient_channel ];
        if (is_function_constant_defined(ambient_transform_index))
            uv = (commonprofile.textureTransforms[ambient_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ ambient_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(multiply_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ multiply_channel ];
        if (is_function_constant_defined(multiply_transform_index))
            uv = (commonprofile.textureTransforms[multiply_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ multiply_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(specular_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ specular_channel ];
        if (is_function_constant_defined(specular_transform_index))
            uv = (commonprofile.textureTransforms[specular_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ specular_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(roughness_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ roughness_channel ];
        if (is_function_constant_defined(roughness_transform_index))
            uv = (commonprofile.textureTransforms[roughness_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ roughness_texcoord_io_index ] = uv;
    }
    
    if (is_function_constant_defined(metalness_texcoord_io_index)) {
        float2 uv = geometry.texcoords[ metalness_channel ];
        if (is_function_constant_defined(metalness_transform_index))
            uv = (commonprofile.textureTransforms[metalness_transform_index] * float4(uv, 0.f, 1.f)).xy;
        uvOut[ metalness_texcoord_io_index ] = uv;
    }
    
    switch (io_texcoord_count - 1) {
        case 7 : out.texcoord7 = uvOut[7];
        case 6 : out.texcoord6 = uvOut[6];
        case 5 : out.texcoord5 = uvOut[5];
        case 4 : out.texcoord4 = uvOut[4];
        case 3 : out.texcoord3 = uvOut[3];
        case 2 : out.texcoord2 = uvOut[2];
        case 1 : out.texcoord1 = uvOut[1];
        case 0 : out.texcoord0 = uvOut[0];
    }
vertex commonprofile_io standard_vert(scn_vertex_t                      in                        [[ stage_in ]],
                                      constant SCNSceneBuffer&          scn_frame                 [[ buffer(0) ]],
                                      constant scn_std_node&            scn_node                  [[ buffer(1), function_constant(use_no_instancing) ]],
                                      // we use device here to override the 64Ko limit of constant buffers on NV hardware
                                      device scn_std_node*              scn_nodeInstances         [[ buffer(1), function_constant(use_instancing) ]],
                                      device SCNLightData*              scn_lights                [[ buffer(2), function_constant(use_per_vertex_lighting) ]],
                                      constant commonprofile_uniforms&  scn_commonprofile         [[ buffer(3) ]],
                                      constant float4*                  scn_skinningJointMatrices [[ buffer(4), function_constant(use_skinning) ]], // should we use device ?
                                      uint                              instanceID                [[ instance_id, function_constant(use_instancing) ]]
                                      // used for texture transform and materialShininess in case of perVertexLighting
#ifdef USE_VERTEX_EXTRA_ARGUMENTS
                                      __VertexExtraArguments__
#endif
                                      )
    scn_std_node in_node;
    if (use_instancing) {
        in_node = scn_nodeInstances[instanceID];
    } else {
        in_node = scn_node;
    }
    SCNShaderGeometry _geometry;
    standard_initalize_geometry(in, _geometry);
    if (use_skinning) {
        standard_apply_skinning(in.skinningWeights, in.skinningJoints, scn_skinningJointMatrices, _geometry);
    }
    
#ifdef USE_GEOMETRY_MODIFIER
// DoGeometryModifier START
__DoGeometryModifier__
// DoGeometryModifier END
#endif
    
    // Transform the geometry elements in view space
    SCNShaderSurface _surface;
    standard_initalize_surface(_surface, _geometry, in_node);
    commonprofile_io out;
    
    // Lighting
    if (use_per_vertex_lighting) {
        SCNShaderLightingContribution _lightingContribution;
        _lightingContribution.diffuse = 0.;
        _lightingContribution.specular = 0.;
        _surface.shininess = scn_commonprofile.materialShininess;
        // TODO
        //__VertexDoLighting__
        out.diffuse = _lightingContribution.diffuse;
        if (use_specular)
            out.specular = _lightingContribution.specular;
    }
    standard_configure_out(scn_commonprofile, _surface, _geometry, out);
    
    // if we want to keep a fast path, we have to provide scn_node.modelViewProjectionTransform
    // out.fragmentPosition = scn_node.modelViewProjectionTransform * _geometry.position;
    out.fragmentPosition = scn_frame.projectionTransform * float4(_surface.position, 1.f);
    
    if (use_point_rendering) // TODO make this configurable
        out.fragmentSize = 1.f;
    return out;
[[ patch(triangle, 3) ]]
vertex commonprofile_io standard_post_tessellation_vert(scn_patch_t                       in                        [[ stage_in ]],
                                                        float3                            patchCoord                [[ position_in_patch ]],
                                                        constant SCNSceneBuffer&          scn_frame                 [[ buffer(0) ]],
                                                        constant scn_std_node&            scn_node                  [[ buffer(1), function_constant(use_no_instancing) ]],
                                                        // we use device here to override the 64Ko limit of constant buffers on NV hardware
                                                        device scn_std_node*              scn_nodeInstances         [[ buffer(1), function_constant(use_instancing) ]],
                                                        device SCNLightData*              scn_lights                [[ buffer(2), function_constant(use_per_vertex_lighting) ]],
                                                        constant commonprofile_uniforms&  scn_commonprofile         [[ buffer(3) ]],
                                                        constant float4*                  scn_skinningJointMatrices [[ buffer(4), function_constant(use_skinning) ]], // should we use device ?
                                                        // 168 bytes
                                                        uint                              instanceID                [[ instance_id, function_constant(use_instancing) ]]
                                                        // used for texture transform and materialShininess in case of perVertexLighting
#ifdef USE_VERTEX_EXTRA_ARGUMENTS
                                      __VertexExtraArgumentsPostTessellation__
#endif
                                      )
    scn_std_node in_node;
    if (use_instancing) {
        in_node = scn_nodeInstances[instanceID];
    } else {
        in_node = scn_node;
    }
    
    SCNShaderGeometry _geometry;
    standard_initalize_geometry_post_tessellation(in, _geometry, patchCoord);
    
    if (use_skinning) {
        //TODO standard_apply_skinning(in.skinningWeights, in.skinningJoints, scn_skinningJointMatrices, _geometry);
    }
    
#ifdef USE_GEOMETRY_MODIFIER
    // DoGeometryModifier START
    __DoGeometryModifierPostTessellation__
    // DoGeometryModifier END
#endif
    
    // Transform the geometry elements in view space
    SCNShaderSurface _surface;
    standard_initalize_surface(_surface, _geometry, in_node);
    
    commonprofile_io out;
    
    // Lighting
    if (use_per_vertex_lighting) {
        SCNShaderLightingContribution _lightingContribution;
        _lightingContribution.diffuse = 0.;
        _lightingContribution.specular = 0.;
        _surface.shininess = scn_commonprofile.materialShininess;
        
        // TODO
        //__VertexDoLightingPostTessellation__
        
        out.diffuse = _lightingContribution.diffuse;
        if (use_specular)
            out.specular = _lightingContribution.specular;
    }
    
    standard_configure_out(scn_commonprofile, _surface, _geometry, out);
    
    // if we want to keep a fast path, we have to provide scn_node.modelViewProjectionTransform
    // out.fragmentPosition = scn_node.modelViewProjectionTransform * _geometry.position;
    
    out.fragmentPosition = scn_frame.projectionTransform * float4(_surface.position, 1.f);
    
    if (use_point_rendering) // TODO make this configurable
        out.fragmentSize = 1.f;
    return out;
struct SCNOutput
    float4 color;
// Fragment shader function
fragment half4 standard_frag(commonprofile_io in [[stage_in]],
                             constant commonprofile_uniforms& scn_commonprofile [[buffer(0)]],
                             constant SCNSceneBuffer& scn_frame [[buffer(1)]]
                             
                             , device SCNLightData* scn_lights                     [[ buffer(2),  function_constant(use_per_pixel_lighting) ]]
                             , constant scn_std_node& scn_node                     [[ buffer(3), function_constant(use_no_instancing) ]]
                             , device scn_std_node* scn_nodeInstances              [[ buffer(3), function_constant(use_instancing) ]]
                             , constant float4* u_shadowKernel                     [[ buffer(4) ]] // will only be reflected if used
                             , constant sh3_coefficients& scn_shCoefficients       [[ buffer(5), function_constant(use_probes_lighting) ]]
                             , texture2d<float> u_emissionTexture                  [[ texture(0), function_constant(use_emission_map)]]
                             , sampler          u_emissionTextureSampler           [[ sampler(0), function_constant(use_emission_map)]]
                             , texture2d<float> u_ambientTexture                   [[ texture(1), function_constant(use_ambient_map)]]
                             , sampler          u_ambientTextureSampler            [[ sampler(1), function_constant(use_ambient_map)]]
                             , texture2d<float> u_diffuseTexture                   [[ texture(2), function_constant(use_diffuse_map)]]
                             , sampler          u_diffuseTextureSampler            [[ sampler(2), function_constant(use_diffuse_map)]]
                             , texture2d<float> u_specularTexture                  [[ texture(3), function_constant(use_specular_map)]]
                             , sampler          u_specularTextureSampler           [[ sampler(3), function_constant(use_specular_map)]]
                             , texture2d<float> u_reflectiveTexture                [[ texture(4), function_constant(use_reflective_map)]]
                             , sampler          u_reflectiveTextureSampler         [[ sampler(4), function_constant(use_reflective_map)]]
                             , texturecube<float> u_reflectiveCubeTexture          [[ texture(4), function_constant(use_reflectivecube_map)]]
                             , sampler            u_reflectiveCubeTextureSampler   [[ sampler(4), function_constant(use_reflectivecube_map)]]
                             , texture2d<float> u_transparentTexture               [[ texture(5), function_constant(use_transparent_map)]]
                             , sampler          u_transparentTextureSampler        [[ sampler(5), function_constant(use_transparent_map)]]
                             , texture2d<float> u_multiplyTexture                  [[ texture(6), function_constant(use_multiply_map)]]
                             , sampler          u_multiplyTextureSampler           [[ sampler(6), function_constant(use_multiply_map)]]
                             , texture2d<float> u_normalTexture                    [[ texture(7), function_constant(use_normal_map)]]
                             , sampler          u_normalTextureSampler             [[ sampler(7), function_constant(use_normal_map)]]
                             , texture2d<float> u_metalnessTexture                 [[ texture(3), function_constant(use_metalness_map) ]]
                             , sampler          u_metalnessTextureSampler          [[ sampler(3), function_constant(use_metalness_map) ]]
                             , texture2d<float> u_roughnessTexture                 [[ texture(4), function_constant(use_roughness_map) ]]
                             , sampler          u_roughnessTextureSampler          [[ sampler(4), function_constant(use_roughness_map) ]]
                             , texturecube<float> u_irradianceTexture              [[ texture(8), function_constant(use_pbr) ]]
                             
                             , texturecube<float> u_radianceTexture                [[ texture(9), function_constant(use_pbr) ]]
                             , texture2d<float>   u_specularDFGTexture             [[ texture(10), function_constant(use_pbr) ]]
                             , texture2d<float> u_ssaoTexture                      [[ texture(11), function_constant(use_ssao) ]]
                             // possible shadow maps
                             , depth2d<float> u_shadowTexture0                     [[ texture(12), function_constant(use_shadow0) ]]
                             , depth2d<float> u_shadowTexture1                     [[ texture(13), function_constant(use_shadow1) ]]
                             , depth2d<float> u_shadowTexture2                     [[ texture(14), function_constant(use_shadow2) ]]
                             , depth2d<float> u_shadowTexture3                     [[ texture(15), function_constant(use_shadow3) ]]
                             
                             // possible gobo
                             , texture2d<float> u_goboTexture0                     [[ texture(16), function_constant(use_gobo0) ]]
                             , texture2d<float> u_goboTexture1                     [[ texture(17), function_constant(use_gobo1) ]]
                             , texture2d<float> u_goboTexture2                     [[ texture(18), function_constant(use_gobo2) ]]
                             , texture2d<float> u_goboTexture3                     [[ texture(19), function_constant(use_gobo3) ]]
                             // we do not use external samplers for IES since it is not user configurable
                             // TODO but we should use some for GOBOs (but there are issues with the limited number of samplers)
                             // Moving to MSL 2.0, we should sampler array and indices
                             
                             // IES 2D
                             , texture2d<float> u_iesTexture0                      [[ texture(16), function_constant(use_ies0) ]]
                             , texture2d<float> u_iesTexture1                      [[ texture(17), function_constant(use_ies1) ]]
                             , texture2d<float> u_iesTexture2                      [[ texture(18), function_constant(use_ies2) ]]
                             , texture2d<float> u_iesTexture3                      [[ texture(19), function_constant(use_ies3) ]]
                             // IES Cube
                             , texturecube<float> u_iesCubeTexture0                [[ texture(16), function_constant(use_iesCube0) ]]
                             , texturecube<float> u_iesCubeTexture1                [[ texture(17), function_constant(use_iesCube1) ]]
                             , texturecube<float> u_iesCubeTexture2                [[ texture(18), function_constant(use_iesCube2) ]]
                             , texturecube<float> u_iesCubeTexture3                [[ texture(19), function_constant(use_iesCube3) ]]
                             
                             , bool isFrontFacing                                  [[ front_facing, function_constant(use_double_sided) ]]
#ifdef USE_FRAGMENT_EXTRA_ARGUMENTS
__FragmentExtraArguments__
#endif
                             )
    // <rdar://problem/28350584> Crash in metal compiler
    //  scn_std_node in_node = (use_instancing) ? scn_nodeInstances[0] : scn_node;
    scn_std_node in_node;
    if (use_instancing) {
        // TODO : we should pass the instance ID to the fragment shader
        in_node = scn_nodeInstances[0];
    } else {
        in_node = scn_node;
    }
    SCNShaderSurface _surface;
    float2 uv[kSCNTexcoordCount];
    switch (io_texcoord_count - 1) {
        case 7 : uv[7] = in.texcoord7;
        case 6 : uv[6] = in.texcoord6;
        case 5 : uv[5] = in.texcoord5;
        case 4 : uv[4] = in.texcoord4;
        case 3 : uv[3] = in.texcoord3;
        case 2 : uv[2] = in.texcoord2;
        case 1 : uv[1] = in.texcoord1;
        case 0 : uv[0] = in.texcoord0;
    }
    if (is_function_constant_defined(diffuse_texcoord_io_index))
        _surface.diffuseTexcoord = uv[diffuse_texcoord_io_index];
    
    if (is_function_constant_defined(normal_texcoord_io_index))
        _surface.normalTexcoord = uv[normal_texcoord_io_index];
    
    if (is_function_constant_defined(transparent_texcoord_io_index))
        _surface.transparentTexcoord = uv[transparent_texcoord_io_index];
    
    if (is_function_constant_defined(emission_texcoord_io_index))
        _surface.emissionTexcoord = uv[emission_texcoord_io_index];
    
    if (is_function_constant_defined(ambient_texcoord_io_index))
        _surface.ambientTexcoord = uv[ambient_texcoord_io_index];
    
    if (is_function_constant_defined(multiply_texcoord_io_index))
        _surface.multiplyTexcoord = uv[multiply_texcoord_io_index];
    
    if (is_function_constant_defined(specular_texcoord_io_index))
        _surface.specularTexcoord = uv[specular_texcoord_io_index];
    
    if (is_function_constant_defined(roughness_texcoord_io_index))
        _surface.roughnessTexcoord = uv[roughness_texcoord_io_index];
    if (is_function_constant_defined(metalness_texcoord_io_index))
        _surface.metalnessTexcoord = uv[metalness_texcoord_io_index];
    _surface.ambientOcclusion = 1.f; // default to no AO
    if (use_ambient_map) {
        float4 c = u_ambientTexture.sample(u_ambientTextureSampler, _surface.ambientTexcoord);
        if (is_function_constant_defined(ambient_texture_component)) {
            c = c[ambient_texture_component];
        }
        
        if (use_ambient_as_ambientOcclusion) {
            _surface.ambientOcclusion = c.r;
            if (use_ambient_intensity)
                _surface.ambientOcclusion = saturate(mix(1.f, _surface.ambientOcclusion, scn_commonprofile.ambientIntensity));
        } else {
            _surface.ambient = c;
            if (use_ambient_intensity)
                _surface.ambient *= scn_commonprofile.ambientIntensity;
        }
    } else {
        _surface.ambient = scn_commonprofile.ambientColor;
    }
    if (use_ambient && use_io_vertex_color)
        _surface.ambient *= in.vertexColor;
    if (use_ssao)
        _surface.ambientOcclusion *= u_ssaoTexture.sample( linearSampler, in.fragmentPosition.xy * scn_frame.inverseResolution.xy ).x;
    
    if (use_diffuse_map) {
        _surface.diffuse = u_diffuseTexture.sample(u_diffuseTextureSampler, _surface.diffuseTexcoord);
        if (is_function_constant_defined(diffuse_texture_component))
            _surface.diffuse = _surface.diffuse[diffuse_texture_component];
        if (use_diffuse_intensity)
            _surface.diffuse.rgb *= scn_commonprofile.diffuseIntensity;
    } else {
        _surface.diffuse = scn_commonprofile.diffuseColor;
    }
    if (use_diffuse && use_io_vertex_color) {
        _surface.diffuse *= in.vertexColor;
    }
    
    if (use_specular_map) {
        _surface.specular = u_specularTexture.sample(u_specularTextureSampler, _surface.specularTexcoord);
        if (is_function_constant_defined(specular_texture_component))
            _surface.specular = _surface.specular[specular_texture_component];
        if (use_specular_intensity)
            _surface.specular *= scn_commonprofile.specularIntensity;
    } else {
        _surface.specular = scn_commonprofile.specularColor;
    }
    if (use_emission_map) {
        _surface.emission = u_emissionTexture.sample(u_emissionTextureSampler, _surface.emissionTexcoord);
        if (is_function_constant_defined(emission_texture_component))
            _surface.emission = float4(_surface.emission[emission_texture_component]);
        if (use_emission_intensity)
            _surface.emission *= scn_commonprofile.emissionIntensity;
    } else {
        _surface.emission = scn_commonprofile.emissionColor;
    }
    if (use_multiply_map) {
        _surface.multiply = u_multiplyTexture.sample(u_multiplyTextureSampler, _surface.multiplyTexcoord);
        if (is_function_constant_defined(multiply_texture_component))
            _surface.multiply = float4(_surface.multiply[multiply_texture_component]);
        if (use_multiply_intensity)
            _surface.multiply = mix(float4(1.f), _surface.multiply, scn_commonprofile.multiplyIntensity);
    } else {
        _surface.multiply = scn_commonprofile.multiplyColor;
    }
    
    if (use_transparent_map) {
        _surface.transparent = u_transparentTexture.sample(u_transparentTextureSampler, _surface.transparentTexcoord);
        if (is_function_constant_defined(transparent_texture_component))
            _surface.transparent = float4(_surface.transparent[transparent_texture_component]);
        if (use_transparent_intensity)
            _surface.transparent *= scn_commonprofile.transparentIntensity;
    } else {
        _surface.transparent = scn_commonprofile.transparentColor;
    }
    if (use_metalness_map) {
        float4 c = u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord);
        if (is_function_constant_defined(metalness_texture_component))
            _surface.metalness = c[metalness_texture_component];
        else // metalness is monochromatic and we do support R8 texture
            _surface.metalness = c.r;
        if (use_metalness_intensity)
            _surface.metalness *= scn_commonprofile.metalnessIntensity;
    } else {
        _surface.metalness = scn_commonprofile.metalness;
    }
    
    if (use_roughness_map) {
        float4 c = u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord).r;
        if (is_function_constant_defined(roughness_texture_component))
            _surface.roughness = c[roughness_texture_component];
        else // roughness is monochromatic and we do support R8 texture
            _surface.roughness = c.r;
        if (use_roughness_intensity)
            _surface.roughness *= scn_commonprofile.roughnessIntensity;
    } else {
        _surface.roughness = scn_commonprofile.roughness;
    }
    // OPTIM : we could store intensity in roughness and always multiply by that (and init to 1 when no map)
    
    if (use_io_normal) {
        if (use_double_sided)
            _surface.geometryNormal = normalize(in.normal.xyz) * (in.normal.z >= 0.f ? 1.f : -1.f );
        else
            _surface.geometryNormal = normalize(in.normal.xyz);
        _surface.normal = _surface.geometryNormal;
    }
    if (need_tangent) {
        _surface.tangent = in.tangent;
        _surface.bitangent = in.bitangent;
    }
    if (use_io_position)
        _surface.position = in.position;
    if (use_io_view)
        _surface.view = normalize(-in.position);
    if (use_normal_map) {
        float3x3 ts2vs = float3x3(_surface.tangent, _surface.bitangent, _surface.normal);
        _surface._normalTS = u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord).rgb;
        if (is_function_constant_defined(normal_texture_component)) { // special case : normal reconstructed from rg
            _surface._normalTS.xy = _surface._normalTS.xy * 2.f - 1.f;
            _surface._normalTS.z = sqrt(1 - length_squared(_surface._normalTS.xy));
        } else {
            _surface._normalTS = _surface._normalTS * 2.f - 1.f;
        }
        if (use_normal_intensity)
            _surface._normalTS = mix(float3(0.f, 0.f, 1.f), _surface._normalTS, scn_commonprofile.normalIntensity);
        // transform the normal in view space
        _surface.normal.rgb = normalize(ts2vs * _surface._normalTS);
    } else {
        _surface._normalTS = float3(0.f);
    }
    
    if (use_reflective_map) {
        
        float3 refl = reflect( -_surface.view, _surface.normal );
        float m = 2.f * sqrt( refl.x*refl.x + refl.y*refl.y + scn::sq(refl.z + 1.f));
        _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, float2(float2(refl.x,-refl.y) / m) + 0.5f);
        if (is_function_constant_defined(reflective_texture_component))
            _surface.reflective = _surface.reflective[reflective_texture_component];
        
        if (use_reflective_intensity)
            _surface.reflective *= scn_commonprofile.reflectiveIntensity;
    
    } else if (use_reflectivecube_map) {
    
        float3 refl = reflect( _surface.position, _surface.normal );
        _surface.reflective = u_reflectiveCubeTexture.sample(u_reflectiveCubeTextureSampler, scn::mat4_mult_float3(scn_frame.viewToCubeTransform, refl)); // sample the cube map in world space
        if (is_function_constant_defined(reflective_texture_component))
            _surface.reflective = _surface.reflective[reflective_texture_component];
        
        if (use_reflective_intensity)
            _surface.reflective *= scn_commonprofile.reflectiveIntensity;
    
    } else {
        _surface.reflective = scn_commonprofile.reflectiveColor;
    }
    
    if (use_fresnel) {
        _surface.fresnel = scn_commonprofile.fresnel.x + scn_commonprofile.fresnel.y * pow(1.f - saturate(dot(_surface.view, _surface.normal)), scn_commonprofile.fresnel.z);
        _surface.reflective *= _surface.fresnel;
    }
    _surface.shininess = scn_commonprofile.materialShininess;
    
#ifdef USE_SURFACE_MODIFIER
// DoSurfaceModifier START
__DoSurfaceModifier__
// DoSurfaceModifier END
#endif
    SCNShaderLightingContribution _lightingContribution = {0};
    if (use_ambient_lighting)
        _lightingContribution.ambient = scn_frame.ambientLightingColor.rgb;
    
    if (use_lighting) {
        if (use_per_pixel_lighting) {
            _lightingContribution.diffuse = float3(0.f);
            if (use_modulate_lighting)
                _lightingContribution.modulate = float3(1.f);
            if (use_specular)
                _lightingContribution.specular = float3(0.f);
            
            if (is_function_constant_defined(use_light0)) {
                SCNLightingParameters params;
                params.surface = _surface;
                params.lightInfo = use_light0;
                params.lightData = scn_lights[ in_node.lightIndices[0] ];
                params.attenuation = float3(1.f);
                if (use_shadow0) scn_do_shadow(params, u_shadowTexture0, u_shadowKernel);
                if (use_gobo0)   scn_do_gobo(params, u_goboTexture0);
                if (use_ies0)    scn_do_ies(params, u_iesTexture0, linearSampler /* u_iesTexture0Sampler */);
                if (use_iesCube0)    scn_do_ies(params, u_iesCubeTexture0, linearSampler /* u_iesCubeTexture0Sampler */);
                scn_do_light(params, _lightingContribution);
            }
            if (is_function_constant_defined(use_light1)) {
                SCNLightingParameters params;
                params.surface = _surface;
                params.lightInfo = use_light1;
                params.lightData = scn_lights[ in_node.lightIndices[1] ];
                params.attenuation = float3(1.f);
                if (use_shadow1) scn_do_shadow(params, u_shadowTexture1, u_shadowKernel);
                if (use_gobo1)   scn_do_gobo(params, u_goboTexture1);
                if (use_ies1)    scn_do_ies(params, u_iesTexture1, linearSampler /* u_iesTexture1Sampler */);
                if (use_iesCube1)    scn_do_ies(params, u_iesCubeTexture1, linearSampler /* u_iesCubeTexture1Sampler */);
                scn_do_light(params, _lightingContribution);
            }
            if (is_function_constant_defined(use_light2)) {
                SCNLightingParameters params;
                params.surface = _surface;
                params.lightInfo = use_light2;
                params.lightData = scn_lights[ in_node.lightIndices[2] ];
                params.attenuation = float3(1.f);
                if (use_shadow2) scn_do_shadow(params, u_shadowTexture2, u_shadowKernel);
                if (use_gobo2)   scn_do_gobo(params, u_goboTexture2);
                if (use_ies2)    scn_do_ies(params, u_iesTexture2, linearSampler /* u_iesTexture1Sampler */);
                if (use_iesCube2)    scn_do_ies(params, u_iesCubeTexture2, linearSampler /* u_iesCubeTexture1Sampler */);
                scn_do_light(params, _lightingContribution);
            }
            
            if (is_function_constant_defined(use_light3)) {
                SCNLightingParameters params;
                params.surface = _surface;
                params.lightInfo = use_light3;
                params.lightData = scn_lights[ in_node.lightIndices[3] ];
                params.attenuation = float3(1.f);
                if (use_shadow3) scn_do_shadow(params, u_shadowTexture3, u_shadowKernel);
                if (use_gobo3)   scn_do_gobo(params, u_goboTexture3);
                if (use_ies3)    scn_do_ies(params, u_iesTexture3, linearSampler /* u_iesTexture1Sampler */);
                if (use_iesCube3)    scn_do_ies(params, u_iesCubeTexture3, linearSampler /* u_iesCubeTexture1Sampler */);
                scn_do_light(params, _lightingContribution);
            }
            
        } else { // per vertex lighting
            _lightingContribution.diffuse = in.diffuse;
            if (use_specular)
                _lightingContribution.specular = in.specular;
        }
        if (avoid_overlighting) {
            _lightingContribution.diffuse = saturate(_lightingContribution.diffuse);
            if (use_specular)
                _lightingContribution.specular = saturate(_lightingContribution.specular);
        }
    } else { // no lighting
        _lightingContribution.diffuse = float3(1.f);
    }
    
    // Combine
    SCNOutput _output;
    if (use_pbr) {
        SCNPBRSurface pbr_surface = SCNShaderSurfaceToSCNPBRSurface(_surface);
        pbr_surface.selfIlluminationOcclusion = scn_commonprofile.selfIlluminationOcclusion;
        if (use_probes_lighting) {
            _output.color = scn_pbr_combine_probes(pbr_surface, _lightingContribution, u_specularDFGTexture, u_radianceTexture, scn_shCoefficients, scn_frame);
        } else {
            _output.color = scn_pbr_combine_cubemap(pbr_surface, _lightingContribution, u_specularDFGTexture, u_radianceTexture, u_irradianceTexture, scn_frame);
        }
        _output.color.a = _surface.diffuse.a;
    } else {
        _output.color = illuminate(_surface, _lightingContribution);
    }
    
    if (use_fog) {
        float fogFactor = pow(clamp(length(_surface.position.xyz) * scn_frame.fogParameters.x + scn_frame.fogParameters.y, 0., scn_frame.fogColor.a), scn_frame.fogParameters.z);
        _output.color.rgb = mix(_output.color.rgb, scn_frame.fogColor.rgb * _output.color.a, fogFactor);
    }
    if (!diffuse_premultiplied)
        _output.color.rgb *= _surface.diffuse.a;
    float nodeOpacity = use_node_opacity ? in_node.nodeOpacity : 1.f;
    if (use_transparent) {
        if (use_transparency)
            _surface.transparent *= scn_commonprofile.transparency;
        
        if (use_transparency_rgbzero) {
            // compute luminance
            _surface.transparent.a = (_surface.transparent.r * 0.212671f) + (_surface.transparent.g * 0.715160f) + (_surface.transparent.b * 0.072169f);
            _output.color *= nodeOpacity * (float4(1.f) - _surface.transparent);
        } else { // ALPHA_ONE
            _output.color *= (nodeOpacity * _surface.transparent.a);
        }
    } else {
        if (use_transparency) { // TRANSPARENCY without TRANSPARENT slot (nodeOpacity + diffuse.a)
            _output.color *= (nodeOpacity * scn_commonprofile.transparency);
        }
    }
    
#ifdef USE_FRAGMENT_MODIFIER
// DoFragmentModifier START
__DoFragmentModifier__
// DoFragmentModifier END
#endif
    
//#ifdef USE_SSAO
//    _output.color.rgb = float3(_surface.ambientOcclusion);
//#endif
    
    if (use_discard && _output.color.a == 0.) // we could set a different limit here
        discard_fragment();
    return half4(_output.color);
#endif // __METAL_VERSION__
#ifdef USE_PER_VERTEX_LIGHTING
varying vec3 v_diffuse;
#ifdef USE_SPECULAR
varying vec3 v_specular;
#endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
varying vec3 v_position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2)
varying vec3 v_normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
varying vec3 v_tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
varying vec3 v_bitangent;
#endif
#ifdef USE_AMBIENT_LIGHTING
uniform vec4 u_ambientLightColor;
#endif
#ifdef USE_DIFFUSE_MAP
uniform sampler2D u_diffuseTexture;
#ifdef USE_DIFFUSE_INTENSITY
uniform float u_diffuseIntensity;
#endif
#elif defined(USE_DIFFUSE_COLOR)
uniform vec4 u_diffuseColor;
#endif
#ifdef USE_NORMAL_MAP
uniform sampler2D u_normalTexture;
#ifdef USE_NORMAL_INTENSITY
uniform float u_normalIntensity;
#endif
#endif
#ifdef USE_SHININESS
uniform float u_materialShininess;
#endif
#ifdef USE_SPECULAR
#ifdef USE_SPECULAR_MAP
uniform sampler2D u_specularTexture;
#ifdef USE_SPECULAR_INTENSITY
uniform float u_specularIntensity;
#endif
#elif defined(USE_SPECULAR_COLOR)
uniform vec4 u_specularColor;
#endif
#endif // USE_SPECULAR
#ifdef USE_AMBIENT_MAP
uniform sampler2D u_ambientTexture;
#ifdef USE_AMBIENT_INTENSITY
uniform float u_ambientIntensity;
#endif
#elif defined(USE_AMBIENT_COLOR)
uniform vec4 u_ambientColor;
#endif
#ifdef USE_REFLECTIVE_MAP
uniform sampler2D u_reflectiveTexture;
#elif defined(USE_REFLECTIVE_COLOR)
uniform vec4 u_reflectiveColor;
#endif
#if defined(USE_REFLECTIVE_CUBEMAP)
uniform samplerCube u_reflectiveTexture;
#endif
#if defined(USE_REFLECTIVE_CUBEMAP)
uniform mat4 u_viewToCubeWorld;
#endif
#ifdef USE_REFLECTIVE_INTENSITY
uniform float u_reflectiveIntensity;
#endif
#ifdef USE_FRESNEL
uniform vec3 u_fresnel; // x: ((n1-n2)/(n1+n2))^2 y:1-x z:exponent
#endif
#ifdef USE_EMISSION_MAP
uniform sampler2D u_emissionTexture;
#ifdef USE_EMISSION_INTENSITY
uniform float u_emissionIntensity;
#endif
#elif defined(USE_EMISSION_COLOR)
uniform vec4 u_emissionColor;
#endif
#ifdef USE_MULTIPLY_MAP
uniform sampler2D u_multiplyTexture;
#ifdef USE_MULTIPLY_INTENSITY
uniform float u_multiplyIntensity;
#endif
#elif defined(USE_MULTIPLY_COLOR)
uniform vec4 u_multiplyColor;
#endif
#ifdef USE_TRANSPARENT_MAP
uniform sampler2D u_transparentTexture;
#ifdef USE_TRANSPARENT_INTENSITY
uniform float u_transparentIntensity;
#endif
#elif defined(USE_TRANSPARENT_COLOR)
uniform vec4 u_transparentColor;
#endif
#ifdef USE_VERTEX_COLOR
varying vec4 v_vertexColor;
#endif
#ifdef USE_NODE_OPACITY // only for RGB_ZERO
uniform float u_nodeOpacity;
#endif
#ifdef USE_TRANSPARENCY // only for RGB_ZERO
uniform float u_transparency;
#endif
#ifdef USE_DOUBLE_SIDED
uniform float u_orientationPreserved;
#endif
#ifdef USE_TIME
uniform float u_time;
#endif
#ifdef USE_FOG
uniform vec4 u_fogColor;
uniform vec3 u_fogParameters; // x:-1/(end-start) y:1-start*x z:exp
#endif
float saturate(float x) {
    return clamp(x, 0., 1.);
vec2 saturate(vec2 x) {
    return clamp(x, vec2(0.), vec2(1.));
vec3 saturate(vec3 x) {
    return clamp(x, vec3(0.), vec3(1.));
vec4 saturate(vec4 x) {
    return clamp(x, vec4(0.), vec4(1.));
vec4 illuminate(SCNShaderSurface surface, SCNShaderLightingContribution lighting)
    vec4 color = vec4(0.,0.,0., surface.diffuse.a);
    
    vec3 D = lighting.diffuse;
#ifdef USE_AMBIENT_LIGHTING
#ifdef USE_AMBIENT_AS_AMBIENTOCCLUSION
    D += lighting.ambient * surface.ambientOcclusion;
#elif defined(LOCK_AMBIENT_WITH_DIFFUSE)
    D += lighting.ambient;
#endif
#endif //  defined(USE_AMBIENT_LIGHTING)
#ifdef USE_EMISSION_AS_SELFILLUMINATION
    D += surface.emission.rgb;
#endif
    
    // Do we want to clamp there ????
    
    color.rgb = surface.diffuse.rgb * D;
#if 1 // NEW_REFLECTIVE_BEHAVIOR
#ifdef USE_SPECULAR
    vec3 S = lighting.specular;
#elif defined(USE_REFLECTIVE)
    vec3 S = vec3(0.);
#endif
#ifdef USE_REFLECTIVE
#ifdef USE_AMBIENT_AS_AMBIENTOCCLUSION
    S += surface.reflective.rgb * surface.ambientOcclusion;
#else
    S += surface.reflective.rgb;
#endif
#endif
#ifdef USE_SPECULAR
    S *= surface.specular.rgb;
#endif
#if defined(USE_SPECULAR) || defined(USE_REFLECTIVE)
    color.rgb += S;
#endif
#else
#ifdef USE_SPECULAR
    color.rgb += surface.specular.rgb * lighting.specular;
#endif
#ifdef USE_REFLECTIVE
    color.rgb += surface.reflective.rgb * (lighting.diffuse + lighting.ambient);
#endif
#endif // NEW_REFLECTIVE_BEHAVIOR
#if defined(USE_AMBIENT) && !defined(USE_AMBIENT_AS_AMBIENTOCCLUSION)
    color.rgb += surface.ambient.rgb * lighting.ambient;
#endif
#if defined(USE_EMISSION) && !defined(USE_EMISSION_AS_SELFILLUMINATION)
    color.rgb += surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
    color.rgb *= surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
    color.rgb *= lighting.modulate;
#endif
    return color;
struct SCNOutput
    vec4 color;
} _output;
void main(void)
#ifdef USE_TEXCOORD
    __DoTexcoord__
#endif
    
    _surface.ambientOcclusion = 1.0;
    
    //ambient
#ifdef USE_AMBIENT_MAP
    _surface.ambient = texture2D(u_ambientTexture, _surface.ambientTexcoord);
#ifdef USE_AMBIENT_INTENSITY
#ifdef USE_AMBIENT_AS_AMBIENTOCCLUSION
    _surface.ambientOcclusion = mix(1., _surface.ambient.r, u_ambientIntensity);
#else
    _surface.ambient *= u_ambientIntensity;
#endif
#endif
#elif defined(USE_AMBIENT_COLOR)
    _surface.ambient = u_ambientColor;
#elif defined(USE_AMBIENT)
    _surface.ambient = vec4(0.);
#endif
#if defined(USE_AMBIENT) && defined(USE_VERTEX_COLOR)
    _surface.ambient *= v_vertexColor;
#endif
    
    //diffuse
#ifdef USE_DIFFUSE_MAP
    _surface.diffuse = texture2D(u_diffuseTexture, _surface.diffuseTexcoord);
#ifdef USE_DIFFUSE_INTENSITY
    _surface.diffuse.rgb *= u_diffuseIntensity;
#endif
#elif defined(USE_DIFFUSE_COLOR)
    _surface.diffuse = u_diffuseColor;
#elif defined(USE_DIFFUSE)
    _surface.diffuse = vec4(0.,0.,0.,1.);
#endif
#if defined(USE_DIFFUSE) && defined(USE_VERTEX_COLOR)
    _surface.diffuse *= v_vertexColor;
#endif
    
    //specular
#ifdef USE_SPECULAR_MAP
    _surface.specular = texture2D(u_specularTexture, _surface.specularTexcoord);
#ifdef USE_SPECULAR_INTENSITY
    _surface.specular *= u_specularIntensity;
#endif
#elif defined(USE_SPECULAR_COLOR)
    _surface.specular = u_specularColor;
#elif defined(USE_SPECULAR)
    _surface.specular = vec4(0.);
#endif
    
    //emission
#ifdef USE_EMISSION_MAP
    _surface.emission = texture2D(u_emissionTexture, _surface.emissionTexcoord);
#ifdef USE_EMISSION_INTENSITY
    _surface.emission *= u_emissionIntensity;
#endif
#elif defined(USE_EMISSION_COLOR)
    _surface.emission = u_emissionColor;
#elif defined(USE_EMISSION)
    _surface.emission = vec4(0.);
#endif
    
    //multiply
#ifdef USE_MULTIPLY_MAP
    _surface.multiply = texture2D(u_multiplyTexture, _surface.multiplyTexcoord);
#ifdef USE_MULTIPLY_INTENSITY
    _surface.multiply = mix(vec4(1.), _surface.multiply, u_multiplyIntensity);
#endif
#elif defined(USE_MULTIPLY_COLOR)
    _surface.multiply = u_multiplyColor;
#elif defined(USE_MULTIPLY)
    _surface.multiply = vec4(1.);
#endif
    
    //transparent
#ifdef USE_TRANSPARENT_MAP
    _surface.transparent = texture2D(u_transparentTexture, _surface.transparentTexcoord);
#ifdef USE_TRANSPARENT_INTENSITY
    _surface.transparent *= u_transparentIntensity;
#endif
#elif defined(USE_TRANSPARENT_COLOR)
    _surface.transparent = u_transparentColor;
#elif defined(USE_TRANSPARENT)
    _surface.transparent = vec4(1.);
#endif
    
    //normal
#if (defined USE_NORMAL) && (USE_NORMAL == 2)
#ifdef USE_DOUBLE_SIDED
    _surface.normal = normalize(v_normal.xyz) * u_orientationPreserved * ((float(gl_FrontFacing) * 2.0) - 1.0);
#else
    _surface.normal = normalize(v_normal.xyz);
#endif
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    _surface.tangent = v_tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    _surface.bitangent = v_bitangent;
#endif
#if (defined USE_POSITION) && (USE_POSITION == 2)
    _surface.position = v_position;
#endif
#if (defined USE_VIEW) && (USE_VIEW == 2)
    _surface.view = normalize(-v_position);
#endif
#ifdef USE_NORMAL_MAP
    mat3 ts2vs = mat3(_surface.tangent, _surface.bitangent, _surface.normal);
    _surface._normalTS = texture2D(u_normalTexture, _surface.normalTexcoord).rgb * 2. - 1.;
    // _surface.normal.z = 1. - sqrt(_surface.normal.x * _surface.normal.x + _surface.normal.y * _surface.normal.y);
#ifdef USE_NORMAL_INTENSITY
    _surface._normalTS = mix(vec3(0., 0., 1.), _surface._normalTS, u_normalIntensity);
#endif
    // transform the normal in view space
    _surface.normal.rgb = normalize(ts2vs * _surface._normalTS);
#else
    _surface._normalTS = vec3(0., 0., 0.);
#endif
    
    //reflective
#ifdef USE_REFLECTIVE_MAP
    vec3 refl = reflect( -_surface.view, _surface.normal );
    float m = 2.0 * sqrt( refl.x*refl.x + refl.y*refl.y + (refl.z+1.0)*(refl.z+1.0));
    _surface.reflective = texture2D(u_reflectiveTexture,vec2(vec2(refl.x,-refl.y) / m) + 0.5) ;
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective.rgb *= u_reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_CUBEMAP)
    vec3 refl = reflect( _surface.position, _surface.normal );
    _surface.reflective = textureCube(u_reflectiveTexture, mat3(u_viewToCubeWorld) * refl); // sample the cube map in world space
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective.rgb *= u_reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_COLOR)
    _surface.reflective = u_reflectiveColor;
#elif defined(USE_REFLECTIVE)
    _surface.reflective = vec4(0.);
#endif
#ifdef USE_FRESNEL
    _surface.fresnel = u_fresnel.x + u_fresnel.y * pow(1.0 - clamp(dot(_surface.view, _surface.normal), 0.0, 1.0), u_fresnel.z);
    _surface.reflective *= _surface.fresnel;
#endif
#ifdef USE_SHININESS
    _surface.shininess = u_materialShininess;
#endif
    
    
    
    
#ifdef USE_SURFACE_MODIFIER
// DoSurfaceModifier START
__DoSurfaceModifier__
// DoSurfaceModifier END
#endif
    
    
    // Lighting
#ifdef USE_AMBIENT_LIGHTING
    _lightingContribution.ambient = u_ambientLightColor.rgb;
#elif defined(USE_AMBIENT)
    _lightingContribution.ambient = vec3(0.);
#endif
    
#ifdef USE_LIGHTING
#ifdef USE_PER_PIXEL_LIGHTING
    _lightingContribution.diffuse = vec3(0.);
#ifdef USE_MODULATE
    _lightingContribution.modulate = vec3(1.);
#endif
#ifdef USE_SPECULAR
    _lightingContribution.specular = vec3(0.);
#endif
    
    __DoLighting__
    
#else // USE_PER_PIXEL_LIGHTING
    _lightingContribution.diffuse = v_diffuse;
#ifdef USE_SPECULAR
    _lightingContribution.specular = v_specular;
#endif
#endif
    
    
#ifdef AVOID_OVERLIGHTING
    _lightingContribution.diffuse = clamp(_lightingContribution.diffuse, vec3(0.), vec3(1.));
#ifdef USE_SPECULAR
    _lightingContribution.specular = clamp(_lightingContribution.specular, vec3(0.), vec3(1.));
#endif // USE_SPECULAR
#endif // AVOID_OVERLIGHTING
#else // USE_LIGHTING
    _lightingContribution.diffuse = vec3(1.);
#endif // USE_LIGHTING
    
    // Combine
    _output.color = illuminate(_surface, _lightingContribution);
    
#ifdef USE_FOG
    float fogFactor = pow(clamp(length(_surface.position.xyz) * u_fogParameters.x + u_fogParameters.y, 0., u_fogColor.a), u_fogParameters.z);
    _output.color.rgb = mix(_output.color.rgb, u_fogColor.rgb * _output.color.a, fogFactor);
#endif
    
#ifndef DIFFUSE_PREMULTIPLIED
    _output.color.rgb *= _surface.diffuse.a;
#endif
    
#ifdef USE_TRANSPARENT // Either a map or a color
    
#ifdef USE_TRANSPARENCY
    _surface.transparent *= u_transparency;
#endif
    
#ifdef USE_TRANSPARENCY_RGBZERO
#ifdef USE_NODE_OPACITY
    _output.color *= u_nodeOpacity;
#endif
    // compute luminance
    _surface.transparent.a = (_surface.transparent.r * 0.212671) + (_surface.transparent.g * 0.715160) + (_surface.transparent.b * 0.072169);
    _output.color *= (vec4(1.) - _surface.transparent);
#else // ALPHA_ONE
    _output.color *= _surface.transparent.a;
#endif
#else
#ifdef USE_TRANSPARENCY // TRANSPARENCY without TRANSPARENT slot (nodeOpacity + diffuse.a)
    _output.color *= u_transparency;
#endif
#endif
    
#ifdef USE_FRAGMENT_MODIFIER
// DoFragmentModifier START
__DoFragmentModifier__
// DoFragmentModifier END
#endif
    
#ifdef USE_DISCARD
    if (_output.color.a == 0.) // we could set a different limit here
        discard;
#endif
    
    gl_FragColor = _output.color;
uniform sampler2D colorBuffer;
uniform sampler2D outlineColorBuffer;
uniform vec2 u_inverseResolution;
varying vec2 uv;
void main()
    float alpha = 0.;
    for(int i=-1; i<2; i++)
    for(int j=-1; j<2; j++)
    {
        alpha += texture2D(outlineColorBuffer, uv+vec2(i,j)*u_inverseResolution).r;
    }
    alpha /= 9.;
    
    //Final antialiased mix
    gl_FragColor = mix( texture2D(colorBuffer, uv), vec4(1.,.6,.2,1.), vec4(min(alpha*2.,1.)) );
uniform sampler2D textureSampler0;
uniform sampler2D textureSampler1;
uniform float factor;
varying vec2 TexCoord;
void main (void)
    vec4 newFragment = texture2D(textureSampler0,TexCoord);
    vec4 oldColor = texture2D(textureSampler1,TexCoord);
    
    gl_FragColor = (factor-1.0)*(oldColor/factor) + newFragment/factor;
#ifdef USE_PCF
#ifdef GL_EXT_shadow_samplers // GL_ES 2
#extension GL_EXT_shadow_samplers : require
#endif
#endif
#if MAX_SAMPLE > 1
uniform vec4 u_kernel[MAX_SAMPLE];
#endif
uniform vec4 shadowColor;
uniform sampler2D colorSampler;
uniform sampler2D depthSampler;
#ifdef USE_PCF
#ifdef GL_EXT_shadow_samplers // GL_ES 2
    uniform sampler2DShadow lightDepthSampler;
    #define __shadow2DProj(tex,coord) shadow2DProjEXT( tex, coord )
#elif __VERSION__ <= 120 // GL Compatibility Profile
    uniform sampler2DShadow lightDepthSampler;
    #define __shadow2DProj(tex,coord) shadow2DProj( tex, coord ).x
#else // GL Core Profile or GL_ES 3
    uniform sampler2DShadow lightDepthSampler;
    #define __shadow2DProj(tex,coord) textureProj( tex, coord )
#endif
#else // NO PCF
    uniform sampler2D lightDepthSampler;
    #define __shadow2DProj(tex, coord) clamp(coord.z - texture2DProj(tex, coord).x * coord.w, 0.0, 1.0);
#endif
uniform mat4  camera_MVP_i;
uniform mat4  light_MVP;
uniform vec3  u_lightPos;
uniform vec3  u_lightDir;
uniform vec3  u_lightSpotAtt;
uniform float shadowRadius;
// shadow spot attenuation
#ifndef TARGET_OS_IPHONE
    #ifdef SPOT_SHADOW
        #define USE_SPOT_ATTENUATION 1
    #else
        #define USE_SPOT_ATTENUATION 0
    #endif
#else
    #define USE_SPOT_ATTENUATION 0
#endif
varying vec2 TexCoord;
vec3 unprojectPoint(vec3 screenPos)
vec4 pTmp;
    pTmp.xyz = (2.0 * screenPos.xyz) - 1.0;
pTmp.w = 1.0;
pTmp = camera_MVP_i * pTmp;
    pTmp /= pTmp.w;
return vec3(pTmp);
void main (void)
    //get color (no blur mode)
    vec4 color = texture2D(colorSampler, TexCoord);
    
//get z
float depthValue = texture2D(depthSampler, TexCoord).x;
//unproject to get world position
vec3 worldPos = unprojectPoint(vec3(TexCoord, depthValue));
//project into light space
vec4 lightScreen =  light_MVP * vec4(worldPos, 1.0);
    
    // compute spot attenuation ---------------------------------------------------------------------------------------------
#if USE_SPOT_ATTENUATION
    vec3 lightToFragment = normalize(u_lightPos - worldPos);
    
    // TODO we should also consider also distance attenuation and GOBO...
    float att;
    if (u_lightSpotAtt.z == 0.0)
        att = step(u_lightSpotAtt.x, dot(lightToFragment, u_lightDir) + 0.00004);
    else
        att = pow(clamp(dot(lightToFragment, u_lightDir) * u_lightSpotAtt.x + u_lightSpotAtt.y, 0.0, 1.0), u_lightSpotAtt.z);
    
    if (att == 0.) {
        gl_FragColor = color.rgba;
        return;
    }
#endif // USE_SPOT_ATTENUATION
    //-----------------------------------------------------------------------------------------------------------------------
    
#if MAX_SAMPLE == 1
    float shadow = __shadow2DProj(lightDepthSampler, lightScreen);
#else
    // penumbra
    float filteringSizeFactor = shadowRadius * lightScreen.w;//(distLight - lightDepth)*shadowRadius / lightDepth ;
    
    //smooth all samples
    float totalAccum = 0.0;
    for(int i=0; i<MAX_SAMPLE; i++){
        totalAccum += __shadow2DProj(lightDepthSampler, lightScreen + (u_kernel[i] * filteringSizeFactor));
    }
    
    float shadow = totalAccum / float(MAX_SAMPLE);
#endif
    
#if !USE_SPOT_ATTENUATION
    shadow *= step(0., lightScreen.w);
#endif
    
    //    vec2 clamp = step(lightScreen.xy * lightScreen.xy, vec2(1.));
    //    shadow *= clamp.x * clamp.y;
    shadow *= shadowColor.a;
#if USE_SPOT_ATTENUATION
    shadow = shadow * att;
#endif
    
    //apply shadow on color buffer
    gl_FragColor = mix(color.rgba, vec4(shadowColor.rgb, 1.0),  shadow);
#import <metal_stdlib>
using namespace metal;
int OsdGetPatchNumControlVertices(int patchType) {
    switch(patchType) {
        case 3: return 4;
        case 6: return 16;
        case 9: return 20;
        default: return 0;
    }
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
#if OSD_PATCH_REGULAR
struct ControlPoint
    
    float3 P [[attribute(0)]];
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 P1 [[attribute(1)]];
    float3 P2 [[attribute(2)]];
#if !USE_PTVS_SHARPNESS
    float2 vSegments [[attribute(3)]];
#endif // !USE_PTVS_SHARPNESS
#endif // OSD_PATCH_ENABLE_SINGLE_CREASE
struct PatchInput
    patch_control_point<ControlPoint> cv;
#if !USE_PTVS_FACTORS
    float4 tessOuterLo [[attribute(5)]];
    float4 tessOuterHi [[attribute(6)]];
#endif // !USE_PTVS_FACTORS
    int3 patchParam [[attribute(10)]];
#elif OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
struct ControlPoint
    
    float3 P [[attribute(0)]];
    float3 Ep [[attribute(1)]];
    float3 Em [[attribute(2)]];
    float3 Fp [[attribute(3)]];
    float3 Fm [[attribute(4)]];
struct PatchInput
    patch_control_point<ControlPoint> cv;
    int3 patchParam [[attribute(10)]];
#elif OSD_PATCH_GREGORY_BASIS
struct ControlPoint
    float3 position [[attribute(0)]];
struct PatchInput
    patch_control_point<ControlPoint> cv;
    int3 patchParam [[attribute(10)]];
#endif
#endif // USE_STAGE_IN
#endif // OSD_IS_ADAPTIVE
#if defined(OSD_FVAR_WIDTH)
static void OsdInterpolateFaceVarings(thread SCNShaderGeometry&          geometry
                                      , float2                           uv
                                      , int                              patchIndex
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
                                      , constant uint32_t&               osdFaceVaryingChannelCount
                                      , device OsdFVarChannelDesc const* osdFaceVaryingChannelDescriptors
                                      , constant uint32_t&               osdFaceVaryingPatchArrayIndex
                                      , device void const*               osdFaceVaryingChannelsPackedData
#else //OSD_FVAR_USES_MULTIPLE_CHANNELS
                                      , device int const*                osdFaceVaryingIndices
                                      , device float const*              osdFaceVaryingData
#if OSD_IS_ADAPTIVE
                                      , device packed_int3 const*        osdFaceVaryingPatchParams
                                      , constant packed_int4&            osdFaceVaryingPatchArray
#endif
#endif //OSD_FVAR_USES_MULTIPLE_CHANNELS
                                      )
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[0] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[1] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[2] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[3] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[4] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[5] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[6] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[7] = float2(0.0);
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.color = float4(0.0);
#endif
    
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    for (uint32_t channel = 0; channel < osdFaceVaryingChannelCount; ++channel) {
        OsdFVarChannelDesc channelDescriptor = osdFaceVaryingChannelDescriptors[channel];
        
        int4 osdFaceVaryingPatchArray = ((device packed_int4 *)((device uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.patchArraysBufferOffset))[osdFaceVaryingPatchArrayIndex];
        int indexBase = osdFaceVaryingPatchArray.z;
        
        device int const *osdFaceVaryingIndices = (device int *)((device uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.indicesBufferOffset) + indexBase * 3;
        device float const *osdFaceVaryingData = (device float *)((device uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.dataBufferOffset);
        
#if OSD_IS_ADAPTIVE
        int primitiveIdBase = osdFaceVaryingPatchArray.w;
        device packed_int3 const *osdFaceVaryingPatchParams = (device packed_int3 *)((device uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.patchParamsBufferOffset) + primitiveIdBase;
        
        int3 fvarPatchParam = osdFaceVaryingPatchParams[patchIndex];
        bool isRegular = OsdGetPatchIsRegular(fvarPatchParam);
        
        int4 patchArray = osdFaceVaryingPatchArray;
        int patchStride = OsdGetPatchNumControlVertices(patchArray.x);
        int patchType = select(patchArray.x, int(6), isRegular);
        int patchCVs = OsdGetPatchNumControlVertices(patchType);
        
        float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
        
        if (patchType == 3) {
            OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
        } else if (patchType == 6) {
            int boundaryMask = OsdGetPatchBoundaryMask(fvarPatchParam);
            OsdGetBSplinePatchWeights(uv.x, uv.y, 1.0f, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
        } else if (patchType == 9) {
            OsdGetGregoryPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
        }
#else
        float wP[4], wDs[4], wDt[4], wDss[4], wDst[4], wDtt[4];
        int patchCVs = 4;
        int patchStride = patchCVs;
        OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
#endif
        
        for (int i = 0; i < patchCVs; ++i) {
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.colorPrimvar.isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.colorPrimvar.offset;
                geometry.color += wP[i] * float4(osdFaceVaryingData[index], osdFaceVaryingData[index+1], osdFaceVaryingData[index+2], osdFaceVaryingData[index+3]);
            }
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[0].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[0].offset;
                geometry.texcoords[0] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[1].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[1].offset;
                geometry.texcoords[1] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[2].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[2].offset;
                geometry.texcoords[2] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[3].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[3].offset;
                geometry.texcoords[3] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[4].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[4].offset;
                geometry.texcoords[4] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[5].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[5].offset;
                geometry.texcoords[5] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[6].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[6].offset;
                geometry.texcoords[6] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[7].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[7].offset;
                geometry.texcoords[7] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
        }
    }
    
#else //OSD_FVAR_USES_MULTIPLE_CHANNELS
    
#if OSD_IS_ADAPTIVE
    int3 fvarPatchParam = osdFaceVaryingPatchParams[patchIndex];
    bool isRegular = OsdGetPatchIsRegular(fvarPatchParam);
    
    int4 patchArray = osdFaceVaryingPatchArray;
    int patchStride = OsdGetPatchNumControlVertices(patchArray.x);
    int patchType = select(patchArray.x, int(6), isRegular);
    int patchCVs = OsdGetPatchNumControlVertices(patchType);
    
    float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
    
    if (patchType == 3) {
        OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if (patchType == 6) {
        int boundaryMask = OsdGetPatchBoundaryMask(fvarPatchParam);
        OsdGetBSplinePatchWeights(uv.x, uv.y, 1.0f, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if (patchType == 9) {
        OsdGetGregoryPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
    }
#else
    float wP[4], wDs[4], wDt[4], wDss[4], wDst[4], wDtt[4];
    int patchCVs = 4;
    int patchStride = patchCVs;
    OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
#endif
    
    for (int i = 0; i < patchCVs; ++i) {
        int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * OSD_FVAR_WIDTH + 0 /* fvarOffset */;
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.color += wP[i] * float4(osdFaceVaryingData[index], osdFaceVaryingData[index+1], osdFaceVaryingData[index+2], osdFaceVaryingData[index+3]);
        index += 4;
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[0] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[1] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[2] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[3] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[4] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[5] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[6] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[7] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
    }
#endif //OSD_FVAR_USES_MULTIPLE_CHANNELS
#endif //defined(OSD_FVAR_WIDTH)
uniform sampler2D sceneColor;
uniform sampler2D authoringColor;
//uniform sampler2D sceneDepth;
//uniform sampler2D authoringDepth;
varying vec2 uv;
void main()
    vec4 scene = texture2D(sceneColor, uv);
    vec4 authoring = texture2D(authoringColor, uv);
//    float scene_depth = texture2D(sceneDepth, uv).r;
//    float authoring_depth = texture2D(authoringDepth, uv).r;
//    if(scene_depth < authoring_depth){
//        authoring.rgb *= 0.75;
////        authoring.rgb = mix(authoring.rgb, vec3(dot(authoring.rgb, authoring.rgb)), 0.5);
//    }
    
    gl_FragColor = mix(scene, authoring, authoring.a);
attribute vec3 a_position;
uniform mat4 u_mvp;
uniform float u_zfar;
varying vec3 TexCoord;
void main()
gl_Position = (u_mvp * vec4(a_position * u_zfar, 1.)).xyww;
//gl_Position = u_mvp * vec4(a_position, 1.);
//gl_Position.z = gl_Position.w*0.9999;
TexCoord = vec3(a_position.x, a_position.y, -a_position.z);
// dir.y *= -1.0;
attribute vec3 a_position;
uniform mat4 u_m;
varying vec2 TexCoord;
void main(void)
gl_Position = u_m * vec4(a_position, 1.0);
TexCoord = (gl_Position.xy + 1.0) * 0.5;
  "sequence" : [
                "SceneKit_renderCINodeTree",
                "SceneKit_ApplyCIFilter",
                "SceneKit_renderCIQuad"
                ],
  "targets" : {
    "SceneKit-CI-nodetree-depth" : {
      "type" : "depth"
    },
    "SceneKit-CI-nodetree-color" : {
      "type" : "color",
      "format" : "rgba",
    },
    "SceneKit-CI-effect-color" : {
      "type" : "color",
      "format" : "rgba",
      "usage" : ["shaderWrite", "shaderRead"]
    }
  },
  "symbols" : {
    "C3D-CIFilter_middleZ" : {
      "type" : "float"
    },
    "C3D-CIFilter_extent" : {
      "type" : "vec4"
    }
  },
  "passes" : {
    "SceneKit_renderCIQuad" : {
      "inputs" : {
        "u_color" : {
          "target" : "SceneKit-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "C3D-CIFilter_middleZ",
        "u_extent" : "C3D-CIFilter_extent",
        "u_depth" : {
          "target" : "SceneKit-CI-nodetree-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "cullMode" : "none",
      "metalVertexShader" : "scn_filterCompositeVert",
      "metalFragmentShader" : "scn_filterCompositeFrag",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    },
    "SceneKit_ApplyCIFilter" : {
      "outputs" : {
        "color" : "SceneKit-CI-effect-color"
      },
      "inputs" : {
        "myInput1" : "SceneKit-CI-nodetree-color"
      },
      "draw" : "CUSTOM"
    },
    "SceneKit_renderCINodeTree" : {
      "draw" : "DRAW_NODE",
      "node" : "self",
      "ignoreFloors" : true,
      "outputs" : {
        "depth" : "SceneKit-CI-nodetree-depth",
        "color" : "SceneKit-CI-nodetree-color"
      },
      "colorStates" : {
        "clear" : true
      },
      "depthStates" : {
        "clear" : true
      },
      
    }
uniform mat4 u_modelViewProjectionTransform;
attribute vec3 a_position;
void main()
    gl_Position = u_modelViewProjectionTransform * vec4(a_position, 1.);
//    v_vertexColor = a_color;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>symbols</key>
<dict>
<key>a_position-symbol</key>
<dict>
<key>semantic</key>
<string>vertex</string>
</dict>
<key>color</key>
<dict>
<key>semantic</key>
<string>none</string>
</dict>
</dict>
<key>sequence</key>
<array>
<string>authoring-overlay</string>
<string>authoringBlend</string>
</array>
<key>targets</key>
<dict>
<key>authoring-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba</string>
</dict>
<key>authoring-depth</key>
<dict>
<key>type</key>
<string>depth</string>
</dict>
</dict>
<key>passes</key>
<dict>
<key>authoring-overlay</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>authoring-color</string>
<key>depth</key>
<string>authoring-depth</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>layerMask</key>
<integer>4</integer>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clearColor</key>
<string>0 0 0 0</string>
<key>clear</key>
<true/>
</dict>
</dict>
<key>authoringBlend</key>
<dict>
<key>clientProgram</key>
<string>NO</string>
<key>program</key>
<string>C3D-BlendAuthoring</string>
<key>metalVertexShader</key>
<string>blendAuthoring_vert</string>
<key>metalFragmentShader</key>
<string>blendAuthoring_frag</string>
<key>inputs</key>
<dict>
<key>authoringColor</key>
<string>authoring-color</string>
<key>sceneColor</key>
<string>COLOR</string>
</dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>depthStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
<key>clearColor</key>
<string>sceneBackground</string>
</dict>
</dict>
</dict>
</dict>
</plist>
// initial geometry is [-1,1] in XY plane (so z is always 0)
  uniform vec3 u_floorNormal;
  uniform vec4 u_floorTangent;
  uniform vec3 u_floorCenter;
  uniform vec2 u_floorExtent;
#pragma body
  vec3 floorBitangent =  normalize(cross(u_floorTangent.xyz, u_floorNormal));
  _geometry.position.xyz = u_floorCenter.xyz + u_floorExtent.x * (_geometry.position.x * u_floorTangent.xyz) + u_floorExtent.y * (_geometry.position.y * floorBitangent);
  _geometry.normal = u_floorNormal;
  _geometry.tangent = u_floorTangent;
  // we could check if the texCoord are really needed with ifdef USE_xxxx_MAP , or, better, work only on texcoordN [0..1]
  vec2 tc;
  if (u_floorNormal.y != 0.)
    tc = _geometry.position.xz * 0.01;
  else if (u_floorNormal.z != 0.)
    tc = _geometry.position.xy * 0.01;
  else
    tc = _geometry.position.yz * 0.01;
  for (int i = 0; i < kSCNTexcoordCount; ++i)
    _geometry.texcoords[i] = tc;
#import <metal_stdlib>
using namespace metal;
#import "scn_metal"
#import "scn_util.h"
#import "C3D-PBR.metal"
#import "scn_tessellation.h"
// Macro for layered rendering & shadermodifier
#ifdef USE_LAYERED_RENDERING
#define texture2d_layer texture2d_array
#define sampleLayer(a,b) sample(a,b,in.sliceIndex)
#else
#define texture2d_layer texture2d
#define sampleLayer(a,b) sample(a,b)
#endif
#if defined(HAS_NORMAL) || defined(USE_OPENSUBDIV)
#define HAS_OR_GENERATES_NORMAL 1
#endif
#ifdef C3D_USE_TEXTURE_FOR_LIGHT_INDICES
#define LightIndex(lid) u_lightIndicesTexture.read((ushort)lid).x
#else
#define LightIndex(lid) u_lightIndicesBuffer[lid]
#endif
// Inputs
typedef struct {
#ifdef USE_MODELTRANSFORM
    float4x4 modelTransform;
#endif
#ifdef USE_INVERSEMODELTRANSFORM
    float4x4 inverseModelTransform;
#endif
#ifdef USE_MODELVIEWTRANSFORM
    float4x4 modelViewTransform;
#endif
#ifdef USE_INVERSEMODELVIEWTRANSFORM
    float4x4 inverseModelViewTransform;
#endif
#ifdef USE_NORMALTRANSFORM
    float4x4 normalTransform;
#endif
#ifdef USE_MODELVIEWPROJECTIONTRANSFORM
    float4x4 modelViewProjectionTransform;
#endif
#ifdef USE_INVERSEMODELVIEWPROJECTIONTRANSFORM
    float4x4 inverseModelViewProjectionTransform;
#endif
#ifdef USE_MOTIONBLUR
    float4x4 lastFrameModelTransform;
    float motionBlurIntensity;
#endif
#ifdef USE_BOUNDINGBOX
    float2x3 boundingBox;
#endif
#ifdef USE_WORLDBOUNDINGBOX
    float2x3 worldBoundingBox;
#endif
#ifdef USE_NODE_OPACITY
    float nodeOpacity;
#endif
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
    sh2_coefficients shCoefficients;
#elif defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 3)
    sh3_coefficients shCoefficients;
#endif
#ifdef USE_SKINNING // need to be last since we may cut the buffer size based on the real bone number
    float4 skinningJointMatrices[765]; // Consider having a separate buffer ?
#endif
} commonprofile_node;
typedef struct {
    float3 position         [[attribute(SCNVertexSemanticPosition)]];
#ifdef HAS_NORMAL
    float3 normal           [[attribute(SCNVertexSemanticNormal)]];
#endif
#ifdef USE_TANGENT
    float4 tangent          [[attribute(SCNVertexSemanticTangent)]];
#endif
#ifdef USE_VERTEX_COLOR
    float4 color            [[attribute(SCNVertexSemanticColor)]];
#endif
#ifdef USE_SKINNING
    float4 skinningWeights  [[attribute(SCNVertexSemanticBoneWeights)]];
    uint4  skinningJoints   [[attribute(SCNVertexSemanticBoneIndices)]];
#endif
#ifdef NEED_IN_TEXCOORD0
    float2 texcoord0        [[attribute(SCNVertexSemanticTexcoord0)]];
#endif
#ifdef NEED_IN_TEXCOORD1
    float2 texcoord1        [[attribute(SCNVertexSemanticTexcoord1)]];
#endif
#ifdef NEED_IN_TEXCOORD2
    float2 texcoord2        [[attribute(SCNVertexSemanticTexcoord2)]];
#endif
#ifdef NEED_IN_TEXCOORD3
    float2 texcoord3        [[attribute(SCNVertexSemanticTexcoord3)]];
#endif
#ifdef NEED_IN_TEXCOORD4
    float2 texcoord4        [[attribute(SCNVertexSemanticTexcoord4)]];
#endif
#ifdef NEED_IN_TEXCOORD5
    float2 texcoord5        [[attribute(SCNVertexSemanticTexcoord5)]];
#endif
#ifdef NEED_IN_TEXCOORD6
    float2 texcoord6        [[attribute(SCNVertexSemanticTexcoord6)]];
#endif
#ifdef NEED_IN_TEXCOORD7
    float2 texcoord7        [[attribute(SCNVertexSemanticTexcoord7)]];
#endif
} scn_vertex_t; // __attribute__((scn_per_frame));
typedef struct {
    float4 fragmentPosition [[position]]; // The window relative coordinate (x, y, z, 1/w) values for the fragment
#ifdef USE_POINT_RENDERING
    float fragmentSize [[point_size]];
#endif
#ifdef USE_VERTEX_COLOR
    float4 vertexColor;
#endif
#ifdef USE_PER_VERTEX_LIGHTING
    float3 diffuse;
#ifdef USE_SPECULAR
    float3 specular;
#endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
    float3 position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2) && defined(HAS_OR_GENERATES_NORMAL)
    float3 normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    float3 tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    float3 bitangent;
#endif
#ifdef USE_DISPLACEMENT_MAP
    float2 displacementTexcoord;   // Displacement texture coordinates
#endif
#ifdef USE_NODE_OPACITY
    float nodeOpacity;
#endif
#ifdef USE_TEXCOORD
    __TexcoordDecl__
#endif
    
#ifdef USE_EXTRA_VARYINGS
    __ExtraVaryingsDecl__
#endif
    
#ifdef USE_MOTIONBLUR
    float3 velocity;// [[ center_no_perspective ]];
#endif
#ifdef USE_OUTLINE
    float outlineHash [[ flat ]];
#endif
#if __METAL_VERSION__ >= 200
#ifdef USE_LAYERED_RENDERING
    uint   sliceIndex [[render_target_array_index]];
#endif
#ifdef USE_MULTIPLE_VIEWPORTS_RENDERING
    uint   sliceIndex [[viewport_array_index]];
#endif
#endif
} commonprofile_io;
// Shader modifiers declaration (only enabled if one modifier is present)
#ifdef USE_SHADER_MODIFIERS
__ShaderModifiersDecl__
#endif
// This may rely on shader modifiers declaration
#import "C3D-Lighting.metal"
enum C3DColorMask {
    kC3DColorMaskRed    = 0x1 << 3,
    kC3DColorMaskGreen  = 0x1 << 2,
    kC3DColorMaskBlue   = 0x1 << 1,
    kC3DColorMaskAlpha  = 0x1 << 0
float4 colorFromMask(float4 col, int mask)
    switch (mask) {
        case kC3DColorMaskRed:                      return col.r;
        case kC3DColorMaskRed|kC3DColorMaskGreen:   return float4(col.rg, 0.f, 1.f);
        case kC3DColorMaskRed|kC3DColorMaskBlue:    return float4(col.rb, 0.f, 1.f);
        case kC3DColorMaskRed|kC3DColorMaskAlpha:   return float4(col.ra, 0.f, 1.f);
        case kC3DColorMaskGreen:                    return col.g;
        case kC3DColorMaskGreen|kC3DColorMaskBlue:  return float4(col.bg, 0.f, 1.f);
        case kC3DColorMaskGreen|kC3DColorMaskAlpha: return float4(col.ag, 0.f, 1.f);
        case kC3DColorMaskBlue:     return col.b;
        case kC3DColorMaskBlue|kC3DColorMaskAlpha:  return float4(col.ab, 0.f, 1.f);
        case kC3DColorMaskAlpha:    return col.a;
    }
    return col;
#ifndef USE_PBR
inline float3 illuminate(SCNShaderSurface surface, SCNShaderLightingContribution lighting)
    float3 albedo = surface.diffuse.rgb * surface.ambientOcclusion;
    float3 color = lighting.diffuse * albedo;
#if defined(USE_AMBIENT_LIGHTING) && (defined(LOCK_AMBIENT_WITH_DIFFUSE) || defined(USE_AMBIENT_AS_AMBIENTOCCLUSION))
    color +=  lighting.ambient * albedo;
#endif
#ifdef USE_SELFILLUMINATION
    color += surface.diffuse.rgb * surface.selfIllumination.rgb;
#endif
    
    // Do we want to clamp there ????
    
#ifdef USE_SPECULAR
    float3 S = lighting.specular;
#elif defined(USE_REFLECTIVE)
    float3 S = float3(0.);
#endif
#ifdef USE_REFLECTIVE
    S += surface.reflective.rgb * surface.ambientOcclusion;
#endif
#ifdef USE_SPECULAR
    S *= surface.specular.rgb;
#endif
#if (defined(USE_SPECULAR) || defined(USE_REFLECTIVE)) && !defined(DISABLE_SPECULAR)
    color += S;
#endif
#if defined(USE_AMBIENT) && !defined(USE_AMBIENT_AS_AMBIENTOCCLUSION)
    color += surface.ambient.rgb * lighting.ambient;
#endif
#ifdef USE_EMISSION
    color += surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
    color *= surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
    color *= lighting.modulate;
#endif
    return color;
#endif
struct SCNShaderGeometry
    float4 position;
    float3 normal;
    float4 tangent;
    float4 color;
    float pointSize;
    float2 texcoords[8]; // MAX_UV
struct commonprofile_uniforms {
    // [id(0)]]
    float4 diffuseColor;
    float4 specularColor;
    float4 ambientColor;
    float4 emissionColor;
    float4 selfIlluminationColor;
    float4 reflectiveColor;
    float4 multiplyColor;
    float4 transparentColor;
    float metalness;
    float roughness;
    // [id(10)]]
    float diffuseIntensity;
    float specularIntensity;
    float normalIntensity;
    float ambientIntensity;
    float emissionIntensity;
    float selfIlluminationIntensity;
    float reflectiveIntensity;
    float multiplyIntensity;
    float transparentIntensity;
    float metalnessIntensity;
    // [id(20)]]
    float roughnessIntensity;
    float displacementIntensity;
    float materialShininess;
    float selfIlluminationOcclusion;
    float transparency;
    float3 fresnel; // x: ((n1-n2)/(n1+n2))^2 y:1-x z:exponent
#if USE_ARGUMENT_BUFFERS
    //[[id(26)]]
    texture2d<float>    emissionTexture;
    sampler             emissionSampler;
    texture2d<float>    ambientTexture;
    sampler             ambientSampler;
    //[[id(30)]]
    texture2d<float>    diffuseTexture;
    sampler             diffuseSampler;
    texture2d<float>    specularTexture;
    sampler             specularSampler;
#if defined(USE_REFLECTIVE_CUBEMAP)
    texturecube<float>  reflectiveTexture;
#else
    texture2d<float>    reflectiveTexture;
#endif
    sampler             reflectiveSampler;
    texture2d<float>    transparentTexture;
    sampler             transparentSampler;
    texture2d<float>    multiplyTexture;
    sampler             multiplySampler;
    //[[id(41)]]
    texture2d<float>    normalTexture;
    sampler             normalSampler;
    texture2d<float>    selfIlluminationTexture;
    sampler             selfIlluminationSampler;
    texture2d<float>    metalnessTexture;
    sampler             metalnessSampler;
    texture2d<float>    roughnessTexture;
    sampler             roughnessSampler;
    texture2d<float>    displacementTexture;
    sampler             displacementSampler;
    //[[id(51)]]
    
#endif // USE_ARGUMENT_BUFFERS
#ifdef TEXTURE_TRANSFORM_COUNT
    float4x4 textureTransforms[TEXTURE_TRANSFORM_COUNT];
#endif
#ifdef USE_OPENSUBDIV
__OpenSubdivDecl__
struct osd_packed_vertex {
    packed_float3 position;
#if defined(OSD_USER_VARYING_DECLARE_PACKED)
    OSD_USER_VARYING_DECLARE_PACKED
#endif
#endif
#ifdef USE_DISPLACEMENT_MAP
static void applyDisplacement(texture2d<float>                 displacementTexture,
                              sampler                          displacementTextureSampler,
                              float2                           displacementTexcoord,
                              thread SCNShaderGeometry&        geometry,
                              constant commonprofile_uniforms& scn_commonprofile)
#ifdef USE_DISPLACEMENT_TEXTURE_COMPONENT
float altitude = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
#ifdef USE_DISPLACEMENT_INTENSITY
altitude *= scn_commonprofile.displacementIntensity;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
float3 bitangent = geometry.tangent.w * normalize(cross(geometry.tangent.xyz, geometry.normal.xyz));
geometry.position.xyz += geometry.normal * altitude;
float3 offset = float3(1.f / displacementTexture.get_width(), 1.f / displacementTexture.get_height(), 0.f);
float3 h;
h.x = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
h.y = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.xz), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
h.z = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord-offset.zy), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
#ifdef USE_DISPLACEMENT_INTENSITY
h *= scn_commonprofile.displacementIntensity;
#endif
float3 n = normalize( float3( (h.x - h.y)/offset.x, 1., (h.x - h.z)/offset.y) );
geometry.normal = geometry.tangent.xyz * n.x + geometry.normal.xyz * n.y + bitangent.xyz * n.z;
geometry.tangent.xyz = normalize(cross(bitangent, geometry.normal));
#endif // USE_NORMAL
#else // USE_DISPLACEMENT_TEXTURE_COMPONENT
float3 displacement = displacementTexture.sample(displacementTextureSampler, displacementTexcoord).rgb;
#ifdef USE_DISPLACEMENT_INTENSITY
displacement *= scn_commonprofile.displacementIntensity;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
float3 bitangent = geometry.tangent.w * normalize(cross(geometry.tangent.xyz, geometry.normal.xyz));
geometry.position.xyz += geometry.tangent.xyz * displacement.x + geometry.normal.xyz * displacement.y + bitangent.xyz * displacement.z;
float3 offset = float3(1.f / displacementTexture.get_width(), 1.f / displacementTexture.get_height(), 0.f);
float3 a = displacementTexture.sample(displacementTextureSampler, displacementTexcoord).rgb;
float3 b = displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.xz).rgb;
float3 c = displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.zy).rgb;
#ifdef USE_DISPLACEMENT_INTENSITY
a *= scn_commonprofile.displacementIntensity;
b *= scn_commonprofile.displacementIntensity;
c *= scn_commonprofile.displacementIntensity;
#endif
b += offset.xzz;
c -= offset.zzy;
float3 n = (normalize( cross( b-a, c-a ) ));
geometry.normal = geometry.tangent.xyz * n.x + geometry.normal.xyz * n.y + bitangent.xyz * n.z;
geometry.tangent.xyz = normalize(cross(bitangent, geometry.normal));
#endif // USE_NORMAL
#endif // USE_DISPLACEMENT_TEXTURE_COMPONENT
#endif // USE_DISPLACEMENT_MAP
#ifdef USE_OUTLINE
static inline float hash(float2 p)
    const float2 kMod2 = float2(443.8975f, 397.2973f);
    p  = fract(p * kMod2);
    p += dot(p.xy, p.yx+19.19f);
    return fract(p.x * p.y);
#endif
// MARK: - Vertex and post-tessellation vertex functions
#if defined(USE_TESSELLATION)
struct scn_patch_t {
    patch_control_point<scn_vertex_t> controlPoints;
#endif
#if defined(USE_OPENSUBDIV)
#if OSD_IS_ADAPTIVE
[[ patch(quad, VERTEX_CONTROL_POINTS_PER_PATCH) ]]
#endif
#elif defined(USE_TESSELLATION)
[[ patch(triangle, 3) ]]
#endif
    
vertex commonprofile_io commonprofile_vert(
#if !defined(USE_TESSELLATION)
                                           scn_vertex_t                       in                               [[ stage_in ]]
                                           , uint                             scn_vertexID                     [[ vertex_id ]]
#else // USE_TESSELLATION
                                           
#ifdef USE_OPENSUBDIV
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
                                           PatchInput                         patchInput                       [[ stage_in ]]
#else
                                           OsdVertexBufferSet                 patchInput
#endif
                                           , float2                           patchCoord                       [[ position_in_patch ]]
                                           , uint                             patchID                          [[ patch_id ]]
                                           , constant float&                  osdTessellationLevel             [[ buffer(TESSELLATION_LEVEL_BUFFER_INDEX) ]]
#else // OSD_IS_ADAPTIVE
                                           device unsigned const*             osdIndicesBuffer                 [[ buffer(INDICES_BUFFER_INDEX) ]]
                                           , device osd_packed_vertex const*  osdVertexBuffer                  [[ buffer(VERTEX_BUFFER_INDEX) ]]
                                           , uint                             vertexID                         [[ vertex_id ]]
#endif // OSD_IS_ADAPTIVE
#if defined(OSD_FVAR_WIDTH)
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
                                           , constant uint32_t&               osdFaceVaryingChannelCount       [[ buffer(OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX) ]]
                                           , device OsdFVarChannelDesc const* osdFaceVaryingChannelDescriptors [[ buffer(OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX) ]]
                                           , constant uint32_t&               osdFaceVaryingPatchArrayIndex    [[ buffer(OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX) ]]
                                           , device void const*               osdFaceVaryingChannelsPackedData [[ buffer(OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX) ]]
#else
                                           , device float const*              osdFaceVaryingData               [[ buffer(OSD_FVAR_DATA_BUFFER_INDEX) ]]
                                           , device int const*                osdFaceVaryingIndices            [[ buffer(OSD_FVAR_INDICES_BUFFER_INDEX) ]]
#if OSD_IS_ADAPTIVE
                                           , device packed_int3 const*        osdFaceVaryingPatchParams        [[ buffer(OSD_FVAR_PATCHPARAM_BUFFER_INDEX) ]]
                                           , constant packed_int4&            osdFaceVaryingPatchArray         [[ buffer(OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX) ]]
#endif
#endif //OSD_FVAR_USES_MULTIPLE_CHANNELS
#endif //defined(OSD_FVAR_WIDTH)
#else // USE_OPENSUBDIV
                                           scn_patch_t                        in                               [[ stage_in ]]
                                           , float3                           patchCoord                       [[ position_in_patch ]]
#endif // USE_OPENSUBDIV
#endif // USE_TESSELLATION
                                           
#ifdef USE_MULTIPLE_RENDERING
                                           , device SCNSceneBuffer*           scn_frames                       [[ buffer(0) ]]
#else
                                           , constant SCNSceneBuffer&         scn_frame                        [[ buffer(0) ]]
#endif
#ifdef USE_INSTANCING
                                           // we use device here to override the 64Ko limit of constant buffers on NV hardware
                                           , device commonprofile_node*       scn_nodeInstances                [[ buffer(1) ]]
#else
                                           , constant commonprofile_node&     scn_node                         [[ buffer(1) ]]
#endif
#ifdef USE_PER_VERTEX_LIGHTING
                                           , constant scn_light*              scn_lights                       [[ buffer(2) ]]
                                           , constant float4*                 u_shadowKernel
#endif
                                           // used for texture transform and materialShininess in case of perVertexLighting
                                           , constant commonprofile_uniforms& scn_commonprofile
                                           , uint                             scn_instanceID                   [[ instance_id ]]
                                           
#ifdef USE_POINT_RENDERING
                                           // x:pointSize, y:minimumScreenSize, z:maximumScreenSize
                                           , constant float3&                 scn_pointSize
#endif
#ifdef USE_DISPLACEMENT_MAP
#if USE_ARGUMENT_BUFFERS
#define u_displacementTexture           scn_commonprofile.displacementTexture
#define u_displacementTextureSampler    scn_commonprofile.displacementSampler
#else
                                           , texture2d<float>                 u_displacementTexture
                                           , sampler                          u_displacementTextureSampler
#endif //USE_ARGUMENT_BUFFERS
#endif //USE_DISPLACEMENT_MAP
#ifdef USE_VERTEX_EXTRA_ARGUMENTS
                                           __VertexExtraArguments__
#endif
                                           )
    commonprofile_io out;
    
#ifdef USE_MULTIPLE_RENDERING
    
    out.sliceIndex = scn_instanceID % USE_MULTIPLE_RENDERING;
    
    device SCNSceneBuffer& scn_frame = scn_frames[0];
    device SCNSceneBuffer& scn_frame_slice = scn_frames[out.sliceIndex];
#ifdef USE_INSTANCING
    device commonprofile_node& scn_node = scn_nodeInstances[scn_instanceID / USE_MULTIPLE_RENDERING];
#endif
    
#else
    
#ifdef USE_INSTANCING
    device commonprofile_node& scn_node = scn_nodeInstances[scn_instanceID];
#endif
    
#endif
    
    
#ifdef USE_TESSELLATION
    uint scn_vertexID; // we need scn_vertexID if a geometry modifier is used
    scn_vertexID = 0;
#endif
    
    //
    // MARK: Populating the `_geometry` struct
    //
    
    SCNShaderGeometry _geometry;
    
#if !defined(USE_TESSELLATION)
    
    // OPTIM in could be already float4?
    _geometry.position = float4(in.position, 1.f);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
    _geometry.normal = in.normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = in.tangent;
#endif
#ifdef NEED_IN_TEXCOORD0
    _geometry.texcoords[0] = in.texcoord0;
#endif
#ifdef NEED_IN_TEXCOORD1
    _geometry.texcoords[1] = in.texcoord1;
#endif
#ifdef NEED_IN_TEXCOORD2
    _geometry.texcoords[2] = in.texcoord2;
#endif
#ifdef NEED_IN_TEXCOORD3
    _geometry.texcoords[3] = in.texcoord3;
#endif
#ifdef NEED_IN_TEXCOORD4
    _geometry.texcoords[4] = in.texcoord4;
#endif
#ifdef NEED_IN_TEXCOORD5
    _geometry.texcoords[5] = in.texcoord5;
#endif
#ifdef NEED_IN_TEXCOORD6
    _geometry.texcoords[6] = in.texcoord6;
#endif
#ifdef NEED_IN_TEXCOORD7
    _geometry.texcoords[7] = in.texcoord7;
#endif
#ifdef HAS_VERTEX_COLOR
    _geometry.color = in.color;
#elif USE_VERTEX_COLOR
    _geometry.color = float4(1.);
#endif
    
#else // USE_TESSELLATION
    
#ifdef USE_OPENSUBDIV
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
    int3 patchParam = patchInput.patchParam;
#else
    int3 patchParam = patchInput.patchParamBuffer[patchID];
#endif
    
    int refinementLevel = OsdGetPatchRefinementLevel(patchParam);
    float tessellationLevel = min(osdTessellationLevel, (float)OSD_MAX_TESS_LEVEL) / exp2((float)refinementLevel - 1);
    
    OsdPatchVertex patchVertex = OsdComputePatch(tessellationLevel, patchCoord, patchID, patchInput);
    
#if defined(OSD_FVAR_WIDTH)
    int patchIndex = OsdGetPatchIndex(patchID);
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    OsdInterpolateFaceVarings(_geometry, patchCoord.xy, patchIndex, osdFaceVaryingChannelCount, osdFaceVaryingChannelDescriptors, osdFaceVaryingPatchArrayIndex, osdFaceVaryingChannelsPackedData);
#else
    OsdInterpolateFaceVarings(_geometry, patchCoord.xy, patchIndex, osdFaceVaryingIndices, osdFaceVaryingData, osdFaceVaryingPatchParams, osdFaceVaryingPatchArray);
#endif
#endif
    
    _geometry.position = float4(patchVertex.position, 1.f);
    
#if defined(USE_NORMAL)
    _geometry.normal = patchVertex.normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = float4(patchVertex.tangent, -1.f);
    //_geometry.bitangent = patchVertex.bitangent;
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[0] = patchVertex.texcoord0;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[1] = patchVertex.texcoord1;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[2] = patchVertex.texcoord2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[3] = patchVertex.texcoord3;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[4] = patchVertex.texcoord4;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[5] = patchVertex.texcoord5;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[6] = patchVertex.texcoord6;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[7] = patchVertex.texcoord7;
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.color = patchVertex.color;
#endif
    
#else // OSD_IS_ADAPTIVE
    
#if OSD_PATCH_QUADS
    const uint primitiveIndex = vertexID / 6;
#ifdef USE_NORMAL
    float3 p0 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 0]].position;
    float3 p1 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 1]].position;
    float3 p2 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 2]].position;
    float3 normal = normalize(cross(p2 - p1, p0 - p1));
#endif
    const uint triangleIndices[6] = { 0, 1, 2, 0, 2, 3 };
    const uint quadVertexIndex = triangleIndices[vertexID % 6];
    osd_packed_vertex osdVertex = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + quadVertexIndex]];
#elif OSD_PATCH_TRIANGLES
    const uint primitiveIndex = vertexID / 3;
#ifdef USE_NORMAL
    float3 p0 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 0]].position;
    float3 p1 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 1]].position;
    float3 p2 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 2]].position;
    float3 normal = normalize(cross(p2 - p1, p0 - p1));
#endif
    osd_packed_vertex osdVertex = osdVertexBuffer[osdIndicesBuffer[vertexID]];
#endif
    
    float3 position = osdVertex.position;
    
#if defined(OSD_FVAR_WIDTH)
    int patchIndex = OsdGetPatchIndex(primitiveIndex);
#if OSD_PATCH_QUADS
    float2 quadUVs[4] = { float2(0,0), float2(1,0), float2(1,1), float2(0,1) };
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    OsdInterpolateFaceVarings(_geometry, quadUVs[quadVertexIndex], patchIndex, osdFaceVaryingChannelCount, osdFaceVaryingChannelDescriptors, osdFaceVaryingPatchArrayIndex, osdFaceVaryingChannelsPackedData);
#else
    OsdInterpolateFaceVarings(_geometry, quadUVs[quadVertexIndex], patchIndex, osdFaceVaryingIndices, osdFaceVaryingData);
#endif
#elif OSD_PATCH_TRIANGLES
    //TODO
#endif
#endif //defined(OSD_FVAR_WIDTH)
    
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[0] = osdVertex.texcoord0;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[1] = osdVertex.texcoord1;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[2] = osdVertex.texcoord2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[3] = osdVertex.texcoord3;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[4] = osdVertex.texcoord4;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[5] = osdVertex.texcoord5;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[6] = osdVertex.texcoord6;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[7] = osdVertex.texcoord7;
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.color = osdVertex.color;
#endif
    
    _geometry.position = float4(position, 1.f);
#ifdef USE_NORMAL
    _geometry.normal = normal;
#endif
    
#endif // OSD_IS_ADAPTIVE
    
#else // USE_OPENSUBDIV
    
    //
    // MARK: Geometry smooting
    //
    
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE) || defined(TESSELLATION_SMOOTHING_MODE_PHONG)
    float3 P0 = in.controlPoints[0].position;
    float3 P1 = in.controlPoints[1].position;
    float3 P2 = in.controlPoints[2].position;
    float3 N0 = in.controlPoints[0].normal;
    float3 N1 = in.controlPoints[1].normal;
    float3 N2 = in.controlPoints[2].normal;
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE)
    float3 position, normal;
    scn_smooth_geometry_pn_triangle(position, normal, patchCoord, P0, P1, P2, N0, N1, N2);
#elif defined(TESSELLATION_SMOOTHING_MODE_PHONG)
    float3 position, normal;
    scn_smooth_geometry_phong(position, normal, patchCoord, P0, P1, P2, N0, N1, N2);
#endif
    _geometry.position = float4(position, 1.f);
#ifdef USE_NORMAL
    _geometry.normal = normal;
#endif
#else // GEOMETRY_SMOOTHING
    // OPTIM in could be already float4?
    _geometry.position = float4(scn::barycentric_mix(in.controlPoints[0].position, in.controlPoints[1].position, in.controlPoints[2].position, patchCoord), 1.f);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
    _geometry.normal = normalize(scn::barycentric_mix(in.controlPoints[0].normal, in.controlPoints[1].normal, in.controlPoints[2].normal, patchCoord));
#endif
#endif // GEOMETRY_SMOOTHING
    
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = normalize(scn::barycentric_mix(in.controlPoints[0].tangent, in.controlPoints[1].tangent, in.controlPoints[2].tangent, patchCoord));
#endif
#ifdef NEED_IN_TEXCOORD0
    _geometry.texcoords[0] = scn::barycentric_mix(in.controlPoints[0].texcoord0, in.controlPoints[1].texcoord0, in.controlPoints[2].texcoord0, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD1
    _geometry.texcoords[1] = scn::barycentric_mix(in.controlPoints[0].texcoord1, in.controlPoints[1].texcoord1, in.controlPoints[2].texcoord1, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD2
    _geometry.texcoords[2] = scn::barycentric_mix(in.controlPoints[0].texcoord2, in.controlPoints[1].texcoord2, in.controlPoints[2].texcoord2, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD3
    _geometry.texcoords[3] = scn::barycentric_mix(in.controlPoints[0].texcoord3, in.controlPoints[1].texcoord3, in.controlPoints[2].texcoord3, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD4
    _geometry.texcoords[4] = scn::barycentric_mix(in.controlPoints[0].texcoord4, in.controlPoints[1].texcoord4, in.controlPoints[2].texcoord4, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD5
    _geometry.texcoords[5] = scn::barycentric_mix(in.controlPoints[0].texcoord5, in.controlPoints[1].texcoord5, in.controlPoints[2].texcoord5, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD6
    _geometry.texcoords[6] = scn::barycentric_mix(in.controlPoints[0].texcoord6, in.controlPoints[1].texcoord6, in.controlPoints[2].texcoord6, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD7
    _geometry.texcoords[7] = scn::barycentric_mix(in.controlPoints[0].texcoord7, in.controlPoints[1].texcoord7, in.controlPoints[2].texcoord7, patchCoord);
#endif
#ifdef HAS_VERTEX_COLOR
    _geometry.color = scn::barycentric_mix(in.controlPoints[0].color, in.controlPoints[1].color, in.controlPoints[2].color, patchCoord);
#elif USE_VERTEX_COLOR
    _geometry.color = float4(1.);
#endif
    
#endif // USE_OPENSUBDIV
    
#endif // USE_TESSELLATION
    
#ifdef USE_POINT_RENDERING
    _geometry.pointSize = scn_pointSize.x;
#endif
    
#ifdef USE_TEXCOORD
    __VertexDoVertexOnlyTexcoord__
#endif
    
#ifdef USE_DISPLACEMENT_MAP
    applyDisplacement(u_displacementTexture, u_displacementTextureSampler, _displacementTexcoord, _geometry, scn_commonprofile);
#endif
    
    //
    // MARK: Skinning
    //
    
#ifdef USE_SKINNING
#if !defined(USE_TESSELLATION)
    {
        float3 pos = 0.f;
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
        float3 nrm = 0.f;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
        float3 tgt = 0.f;
#endif
        for (int i = 0; i < MAX_BONE_INFLUENCES; ++i) {
#if MAX_BONE_INFLUENCES == 1
            float weight = 1.f;
#else
            float weight = in.skinningWeights[i];
            if (weight <= 0.f)
                continue;
            
#endif
            int idx = int(in.skinningJoints[i]) * 3;
            float4x4 jointMatrix = float4x4(scn_node.skinningJointMatrices[idx],
                                            scn_node.skinningJointMatrices[idx+1],
                                            scn_node.skinningJointMatrices[idx+2],
                                            float4(0., 0., 0., 1.));
            
            pos += (_geometry.position * jointMatrix).xyz * weight;
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
            nrm += _geometry.normal * scn::mat3(jointMatrix) * weight;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
            tgt += _geometry.tangent.xyz * scn::mat3(jointMatrix) * weight;
#endif
        }
        
        _geometry.position.xyz = pos;
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
        _geometry.normal = nrm;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
        _geometry.tangent.xyz = tgt;
#endif
    }
    
#else // USE_TESSELLATION
    
#if !defined(USE_OPENSUBDIV)
    {
        float3 pos[3] = {0.f, 0.f, 0.f};
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
        float3 nrm[3] = {0.f, 0.f, 0.f};
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
        float3 tgt[3] = {0.f, 0.f, 0.f};
#endif
        for (int controlPointIndex = 0; controlPointIndex < 3; ++controlPointIndex) {
            for (int i = 0; i < MAX_BONE_INFLUENCES; ++i) {
#if MAX_BONE_INFLUENCES == 1
                float weight = 1.f;
#else
                float weight = in.controlPoints[controlPointIndex].skinningWeights[i];
                if (weight <= 0.f)
                    continue;
                
#endif
                int idx = int(in.controlPoints[controlPointIndex].skinningJoints[i]) * 3;
                float4x4 jointMatrix = float4x4(scn_node.skinningJointMatrices[idx],
                                                scn_node.skinningJointMatrices[idx+1],
                                                scn_node.skinningJointMatrices[idx+2],
                                                float4(0., 0., 0., 1.));
                
                pos[controlPointIndex] += (_geometry.position * jointMatrix).xyz * weight;
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
                nrm[controlPointIndex] += _geometry.normal * scn::mat3(jointMatrix) * weight;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
                tgt[controlPointIndex] += _geometry.tangent.xyz * scn::mat3(jointMatrix) * weight;
#endif
            }
        }
        
        _geometry.position.xyz = scn::barycentric_mix(pos[0], pos[1], pos[2], patchCoord);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
        _geometry.normal = scn::barycentric_mix(nrm[0], nrm[1], nrm[2], patchCoord);
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
        _geometry.tangent.xyz = scn::barycentric_mix(tgt[0], tgt[1], tgt[2], patchCoord);
#endif
    }
#endif // !defined(USE_OPENSUBDIV)
#endif // USE_TESSELLATION
#endif // USE_SKINNING
    
    
#ifdef USE_DISPLACEMENT_MAP
    out.displacementTexcoord = _displacementTexcoord;
#endif
    
    //
    // MARK: Geometry shader modifier
    //
    
#ifdef USE_GEOMETRY_MODIFIER
    // DoGeometryModifier START
    __DoGeometryModifier__
    // DoGeometryModifier END
#endif
    
    //
    // MARK: Populating the `_surface` struct
    //
    
    // Transform the geometry elements in view space
#if defined(USE_POSITION) || (defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)) || defined(USE_TANGENT) || defined(USE_BITANGENT) || defined(USE_INSTANCING)
    SCNShaderSurface _surface;
#endif
#if defined(USE_POSITION) || defined(USE_INSTANCING)
#ifdef USE_MULTIPLE_RENDERING
    _surface.position = (scn_frame.viewTransform * scn_node.modelTransform * _geometry.position).xyz;
#else
    _surface.position = (scn_node.modelViewTransform * _geometry.position).xyz;
#endif
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
#ifdef USE_MULTIPLE_RENDERING
#ifdef HINT_UNIFORM_SCALE
    _surface.normal = (scn_frame.viewTransform * scn_node.modelTransform * float4(_geometry.normal,0.)).xyz;
#else
    _surface.normal = normalize( (scn_frame.inverseTransposeViewTransform * scn_node.modelTransform * float4(_geometry.normal,0.)).xyz );
#endif
#else
    float3x3 nrmTransform = scn::mat3(scn_node.modelViewTransform);
#ifdef HINT_UNIFORM_SCALE
    _surface.normal = nrmTransform * _geometry.normal;
#else
    float3 invScaleSquared = 1.f / float3(length_squared(nrmTransform[0]), length_squared(nrmTransform[1]), length_squared(nrmTransform[2]));
    _surface.normal = normalize(nrmTransform * (_geometry.normal * invScaleSquared));
#endif
#endif
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
#ifdef USE_MULTIPLE_RENDERING
    _surface.tangent = normalize( (scn_frame.viewTransform * scn_node.modelTransform * float4(_geometry.tangent.xyz, 0.f)).xyz );
#else
    _surface.tangent = normalize(scn::mat3(scn_node.modelViewTransform) * _geometry.tangent.xyz);
#endif
    _surface.bitangent = _geometry.tangent.w * cross(_surface.tangent, _surface.normal); // no need to renormalize since tangent and normal should be orthogonal
    // old code : _surface.bitangent =  normalize(cross(_surface.normal,_surface.tangent));
#endif
    
    //if USE_VIEW is 2 we may also need to set _surface.view. todo: make USE_VIEW a mask
#ifdef USE_VIEW
    _surface.view = normalize(-_surface.position);
#endif
    
    //
    // MARK: Per-vertex lighting
    //
    
#ifdef USE_PER_VERTEX_LIGHTING
    // Lighting
    SCNShaderLightingContribution _lightingContribution(_surface, out);
    _lightingContribution.diffuse = 0.;
  #ifdef USE_SPECULAR
    _lightingContribution.specular = 0.;
    _surface.shininess = scn_commonprofile.materialShininess;
  #endif
    __VertexDoLighting__
    out.diffuse = _lightingContribution.diffuse;
  #ifdef USE_SPECULAR
    out.specular = _lightingContribution.specular;
  #endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
    out.position = _surface.position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2) && defined(HAS_OR_GENERATES_NORMAL)
    out.normal = _surface.normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    out.tangent = _surface.tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    out.bitangent = _surface.bitangent;
#endif
#ifdef USE_VERTEX_COLOR
    out.vertexColor = _geometry.color;
#endif
#ifdef USE_TEXCOORD
    __VertexDoTexcoord__
#endif
    
    //
    // MARK: Determining the fragment position
    //
    
#if defined(USE_POSITION) || defined(USE_INSTANCING)
#ifdef USE_MULTIPLE_RENDERING
    out.fragmentPosition = scn_frame_slice.viewProjectionTransform * scn_node.modelTransform * _geometry.position;
#else
    out.fragmentPosition = scn_frame.projectionTransform * float4(_surface.position, 1.);
#endif
#elif defined(USE_MODELVIEWPROJECTIONTRANSFORM) // this means that the geometry are still in model space : we can transform it directly to NDC space
#ifdef USE_MULTIPLE_RENDERING
    out.fragmentPosition = scn_frame_slice.viewProjectionTransform * scn_node.modelTransform * _geometry.position;
#else
    out.fragmentPosition = scn_node.modelViewProjectionTransform * _geometry.position;
#endif
#endif
    
#ifdef USE_NODE_OPACITY
    out.nodeOpacity = scn_node.nodeOpacity;
#endif
    
#ifdef USE_POINT_RENDERING
    float screenSize = _geometry.pointSize / out.fragmentPosition.w;
    out.fragmentSize = clamp(screenSize, scn_pointSize.y, scn_pointSize.z);
#endif
    
#ifdef USE_MOTIONBLUR
    float4 lastFrameFragmentPosition = scn_frame.lastFrameViewProjectionTransform * scn_node.lastFrameModelTransform * _geometry.position;
    out.velocity.xy = lastFrameFragmentPosition.xy * float2(1., -1.);
    out.velocity.z = lastFrameFragmentPosition.w;
#endif
    
#ifdef USE_OUTLINE
out.outlineHash = hash(scn_node.modelTransform[3].xy)+1.f/255.f;
#endif
    
    return out;
// MARK: - Fragment shader function
struct SCNOutput
    float4 color [[ color(0) ]];
#ifdef USE_COLOR1_OUTPUT
    half4 color1 [[ color(1) ]];
#endif
#ifdef USE_REFLECTANCE_ROUGHNESS_OUTPUT
    half4 reflectanceRoughnessOutput [[ color(2) ]];
#endif
#ifdef USE_MOTIONBLUR
    half4 motionblur [[ color(3) ]];
#endif
#ifdef USE_NORMALS_OUTPUT
    half4 normals [[ color(4) ]];
#endif
fragment SCNOutput commonprofile_frag(commonprofile_io                 in                               [[ stage_in  ]]
                                      , constant commonprofile_uniforms& scn_commonprofile              [[ buffer(0) ]]
#ifdef USE_MULTIPLE_RENDERING
                                      , device SCNSceneBuffer*           scn_frames                     [[ buffer(1) ]]
#else
                                      , constant SCNSceneBuffer&         scn_frame                      [[ buffer(1) ]]
#endif
                                      , constant commonprofile_node&  scn_node                          [[ buffer(2) ]]
#ifdef USE_PER_PIXEL_LIGHTING
                                      , constant scn_light*            scn_lights                       [[ buffer(3) ]]
                                      , constant float4*               u_shadowKernel
#ifdef C3D_SUPPORT_CUBE_ARRAY
                                      , texturecube_array<half>        u_reflectionProbeTexture
#else
                                      , texture2d_array<half>          u_reflectionProbeTexture
#endif
                                      , texture3d<ushort>              u_clusterTexture
#ifdef C3D_USE_TEXTURE_FOR_LIGHT_INDICES
                                      , texture1d<ushort>              u_lightIndicesTexture
#else
                                      , constant C3DLightIndexType*    u_lightIndicesBuffer
#endif
#endif
#if USE_ARGUMENT_BUFFERS
#define u_emissionTexture               scn_commonprofile.emissionTexture
#define u_emissionTextureSampler        scn_commonprofile.emissionSampler
#define u_ambientTexture                scn_commonprofile.ambientTexture
#define u_ambientTextureSampler         scn_commonprofile.ambientSampler
#define u_diffuseTexture                scn_commonprofile.diffuseTexture
#define u_diffuseTextureSampler         scn_commonprofile.diffuseSampler
#define u_specularTexture               scn_commonprofile.specularTexture
#define u_specularTextureSampler        scn_commonprofile.specularSampler
#define u_reflectiveTexture             scn_commonprofile.reflectiveTexture
#define u_reflectiveTextureSampler      scn_commonprofile.reflectiveSampler
#define u_transparentTexture            scn_commonprofile.transparentTexture
#define u_transparentTextureSampler     scn_commonprofile.transparentSampler
#define u_multiplyTexture               scn_commonprofile.multiplyTexture
#define u_multiplyTextureSampler        scn_commonprofile.multiplySampler
#define u_normalTexture                 scn_commonprofile.normalTexture
#define u_normalTextureSampler          scn_commonprofile.normalSampler
#define u_selfIlluminationTexture       scn_commonprofile.selfIlluminationTexture
#define u_selfIlluminationTextureSampler scn_commonprofile.selfIlluminationSampler
#define u_metalnessTexture              scn_commonprofile.metalnessTexture
#define u_metalnessTextureSampler       scn_commonprofile.metalnessSampler
#define u_roughnessTexture              scn_commonprofile.roughnessTexture
#define u_roughnessTextureSampler       scn_commonprofile.roughnessSampler
#else
#ifdef USE_EMISSION_MAP
                                      , texture2d<float>              u_emissionTexture
                                      , sampler                       u_emissionTextureSampler
#endif
#ifdef USE_AMBIENT_MAP
                                      , texture2d<float>              u_ambientTexture
                                      , sampler                       u_ambientTextureSampler
#endif
#ifdef USE_DIFFUSE_MAP
                                      , texture2d<float>              u_diffuseTexture
                                      , sampler                       u_diffuseTextureSampler
#endif
#ifdef USE_SPECULAR_MAP
                                      , texture2d<float>              u_specularTexture
                                      , sampler                       u_specularTextureSampler
#endif
#ifdef USE_REFLECTIVE_MAP
                                      , texture2d<float>              u_reflectiveTexture
                                      , sampler                       u_reflectiveTextureSampler
#elif defined(USE_REFLECTIVE_CUBEMAP)
                                      , texturecube<float>            u_reflectiveTexture
                                      , sampler                       u_reflectiveTextureSampler
#endif
#ifdef USE_TRANSPARENT_MAP
                                      , texture2d<float>              u_transparentTexture
                                      , sampler                       u_transparentTextureSampler
#endif
#ifdef USE_MULTIPLY_MAP
                                      , texture2d<float>              u_multiplyTexture
                                      , sampler                       u_multiplyTextureSampler
#endif
#ifdef USE_NORMAL_MAP
                                      , texture2d<float>              u_normalTexture
                                      , sampler                       u_normalTextureSampler
#endif
#ifdef USE_SELFILLUMINATION_MAP
                                      , texture2d<float>              u_selfIlluminationTexture
                                      , sampler                       u_selfIlluminationTextureSampler
#endif
#ifdef USE_DISPLACEMENT_MAP
                                      , texture2d<float>              u_displacementTexture
                                      , sampler                       u_displacementTextureSampler
#endif
#ifdef USE_PBR
#ifdef USE_METALNESS_MAP
                                      , texture2d<float>              u_metalnessTexture
                                      , sampler                       u_metalnessTextureSampler
#endif
#ifdef USE_ROUGHNESS_MAP
                                      , texture2d<float>              u_roughnessTexture
                                      , sampler                       u_roughnessTextureSampler
#endif
#endif // USE_PBR
#endif // USE_ARGUMENT_BUFFERS
#ifdef USE_PBR
                                      , texturecube<float>            u_radianceTexture
                                      , texture2d<float>              u_specularDFGTexture
#if !defined(USE_SELFILLUMINATION_MAP)
                                      , texturecube<float>            u_irradianceTexture
#endif
#endif // USE_PBR
#ifdef USE_SSAO
                                      , texture2d<float>              u_ssaoTexture
#endif
#ifdef USE_FRAGMENT_EXTRA_ARGUMENTS
                                      __FragmentExtraArguments__
#endif
#if defined(USE_DOUBLE_SIDED)
                                      , bool                          isFrontFacing                    [[front_facing]]
#endif
#ifdef USE_POINT_RENDERING
                                      , float2                        pointCoord                       [[point_coord]]
#endif
                                      )
#ifdef USE_MULTIPLE_RENDERING
    device SCNSceneBuffer& scn_frame = scn_frames[0];
    device SCNSceneBuffer& scn_frame_slice = scn_frames[in.sliceIndex];
#endif
    SCNOutput _output;
    //
    // MARK: Populating the `_surface` struct
    //
    
    SCNShaderSurface _surface;
#ifdef USE_TEXCOORD
    __FragmentDoTexcoord__
#endif
    _surface.ambientOcclusion = 1.f; // default to no AO
#ifdef USE_AMBIENT_MAP
    #ifdef USE_AMBIENT_AS_AMBIENTOCCLUSION
        _surface.ambientOcclusion = u_ambientTexture.sample(u_ambientTextureSampler, _surface.ambientTexcoord).r;
        #ifdef USE_AMBIENT_INTENSITY
            _surface.ambientOcclusion = saturate(mix(1.f, _surface.ambientOcclusion, scn_commonprofile.ambientIntensity));
        #endif
    #else // AMBIENT_MAP
        _surface.ambient = u_ambientTexture.sample(u_ambientTextureSampler, _surface.ambientTexcoord);
        #ifdef USE_AMBIENT_INTENSITY
            _surface.ambient *= scn_commonprofile.ambientIntensity;
        #endif
    #endif // USE_AMBIENT_AS_AMBIENTOCCLUSION
#if defined(USE_AMBIENT_TEXTURE_COMPONENT)
    _surface.ambient = colorFromMask(_surface.ambient, USE_AMBIENT_TEXTURE_COMPONENT).r;
#endif
#elif defined(USE_AMBIENT_COLOR)
    _surface.ambient = scn_commonprofile.ambientColor;
#elif defined(USE_AMBIENT)
    _surface.ambient = float4(0.);
#endif
#if defined(USE_AMBIENT) && defined(USE_VERTEX_COLOR)
    _surface.ambient *= in.vertexColor;
#endif
#if  defined(USE_SSAO)
    _surface.ambientOcclusion *= u_ssaoTexture.sample( sampler(filter::linear), in.fragmentPosition.xy * scn_frame.inverseResolution.xy ).x;
#endif
    
#ifdef USE_DIFFUSE_MAP
    _surface.diffuse = u_diffuseTexture.sample(u_diffuseTextureSampler, _surface.diffuseTexcoord);
#if defined(USE_DIFFUSE_TEXTURE_COMPONENT)
    _surface.diffuse = colorFromMask(_surface.diffuse, USE_DIFFUSE_TEXTURE_COMPONENT);
#endif
#ifdef USE_DIFFUSE_INTENSITY
    _surface.diffuse.rgb *= scn_commonprofile.diffuseIntensity;
#endif
#elif defined(USE_DIFFUSE_COLOR)
    _surface.diffuse = scn_commonprofile.diffuseColor;
#else
    _surface.diffuse = float4(0.f,0.f,0.f,1.f);
#endif
#if defined(USE_DIFFUSE) && defined(USE_VERTEX_COLOR)
    _surface.diffuse.rgb    *= in.vertexColor.rgb;
    _surface.diffuse        *= in.vertexColor.a; // vertex color are not premultiplied to allow interpolation
#endif
#ifdef USE_SPECULAR_MAP
    _surface.specular = u_specularTexture.sample(u_specularTextureSampler, _surface.specularTexcoord);
#if defined(USE_SPECULAR_TEXTURE_COMPONENT)
    _surface.specular = colorFromMask(_surface.specular, USE_SPECULAR_TEXTURE_COMPONENT);
#endif
#ifdef USE_SPECULAR_INTENSITY
    _surface.specular *= scn_commonprofile.specularIntensity;
#endif
#elif defined(USE_SPECULAR_COLOR)
    _surface.specular = scn_commonprofile.specularColor;
#elif defined(USE_SPECULAR)
    _surface.specular = float4(0.f);
#endif
#ifdef USE_EMISSION_MAP
    _surface.emission = u_emissionTexture.sample(u_emissionTextureSampler, _surface.emissionTexcoord);
#if defined(USE_EMISSION_TEXTURE_COMPONENT)
    _surface.emission = colorFromMask(_surface.emission, USE_EMISSION_TEXTURE_COMPONENT);
#endif
#ifdef USE_EMISSION_INTENSITY
    _surface.emission *= scn_commonprofile.emissionIntensity;
#endif
#elif defined(USE_EMISSION_COLOR)
    _surface.emission = scn_commonprofile.emissionColor;
#elif defined(USE_EMISSION)
    _surface.emission = float4(0.);
#endif
#ifdef USE_SELFILLUMINATION_MAP
    _surface.selfIllumination = u_selfIlluminationTexture.sample(u_selfIlluminationTextureSampler, _surface.selfIlluminationTexcoord);
#if defined(USE_SELFILLUMINATION_TEXTURE_COMPONENT)
    _surface.selfIllumination = colorFromMask(_surface.selfIllumination, USE_SELFILLUMINATION_TEXTURE_COMPONENT);
#endif
#ifdef USE_SELFILLUMINATION_INTENSITY
    _surface.selfIllumination *= scn_commonprofile.selfIlluminationIntensity;
#endif
#elif defined(USE_SELFILLUMINATION_COLOR)
    _surface.selfIllumination = scn_commonprofile.selfIlluminationColor;
#elif defined(USE_SELFILLUMINATION)
    _surface.selfIllumination = float4(0.);
#endif
#ifdef USE_MULTIPLY_MAP
    _surface.multiply = u_multiplyTexture.sample(u_multiplyTextureSampler, _surface.multiplyTexcoord);
#if defined(USE_MULTIPLY_TEXTURE_COMPONENT)
    _surface.multiply = colorFromMask(_surface.multiply, USE_MULTIPLY_TEXTURE_COMPONENT);
#endif
#ifdef USE_MULTIPLY_INTENSITY
    _surface.multiply = mix(float4(1.), _surface.multiply, scn_commonprofile.multiplyIntensity);
#endif
#elif defined(USE_MULTIPLY_COLOR)
    _surface.multiply = scn_commonprofile.multiplyColor;
#elif defined(USE_MULTIPLY)
    _surface.multiply = float4(1.);
#endif
#ifdef USE_TRANSPARENT_MAP
    _surface.transparent = u_transparentTexture.sample(u_transparentTextureSampler, _surface.transparentTexcoord);
#if defined(USE_TRANSPARENT_TEXTURE_COMPONENT)
    _surface.transparent = colorFromMask(_surface.transparent, USE_TRANSPARENT_TEXTURE_COMPONENT);
#endif
#ifdef USE_TRANSPARENT_INTENSITY
    _surface.transparent *= scn_commonprofile.transparentIntensity;
#endif
#elif defined(USE_TRANSPARENT_COLOR)
    _surface.transparent = scn_commonprofile.transparentColor;
#elif defined(USE_TRANSPARENT)
    _surface.transparent = float4(1.f);
#endif
    
#ifdef USE_METALNESS_MAP
#if defined(USE_METALNESS_TEXTURE_COMPONENT)
    _surface.metalness = colorFromMask(u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord), USE_METALNESS_TEXTURE_COMPONENT).r;
#else
    _surface.metalness = u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord).r;
#endif
#ifdef USE_METALNESS_INTENSITY
    _surface.metalness *= scn_commonprofile.metalnessIntensity;
#endif
#elif defined(USE_METALNESS_COLOR)
    _surface.metalness = scn_commonprofile.metalness;
#else
    _surface.metalness = 0.f;
#endif
    
#ifdef USE_ROUGHNESS_MAP
#if defined(USE_ROUGHNESS_TEXTURE_COMPONENT)
    _surface.roughness = colorFromMask(u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord), USE_ROUGHNESS_TEXTURE_COMPONENT).r;
#else
    _surface.roughness = u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord).r;
#endif
#ifdef USE_ROUGHNESS_INTENSITY
    _surface.roughness *= scn_commonprofile.roughnessIntensity;
#endif
#elif defined(USE_ROUGHNESS_COLOR)
    _surface.roughness = scn_commonprofile.roughness;
#else
    _surface.roughness = 0.f;
#endif
#if (defined USE_POSITION) && (USE_POSITION == 2)
    _surface.position = in.position;
#endif
#if (defined USE_NORMAL) && (USE_NORMAL == 2)
#if defined(HAS_NORMAL) || defined(USE_OPENSUBDIV)
#ifdef USE_DOUBLE_SIDED
    _surface.geometryNormal = normalize(in.normal.xyz) * (isFrontFacing ? 1.f : -1.f );
#else
    _surface.geometryNormal = normalize(in.normal.xyz);
#endif
#else // need to generate the normal from the derivatives
    _surface.geometryNormal = normalize( cross(dfdy( _surface.position ), dfdx( _surface.position ) ));
#endif
    _surface.normal = _surface.geometryNormal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    _surface.tangent = in.tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    _surface.bitangent = in.bitangent;
#endif
#if (defined USE_VIEW) && (USE_VIEW == 2)
    _surface.view = normalize(-in.position);
#endif
#if defined(USE_NORMAL_MAP)
    {
        float3x3 ts2vs = float3x3(_surface.tangent, _surface.bitangent, _surface.normal);
#ifdef USE_NORMAL_MAP
#if defined(USE_NORMAL_TEXTURE_COMPONENT)
        _surface._normalTS.xy = colorFromMask(u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord), USE_NORMAL_TEXTURE_COMPONENT).rg * 2.f - 1.f;
        _surface._normalTS.z = sqrt(1.f - saturate(length_squared(_surface._normalTS.xy)));
#else
        _surface._normalTS = u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord).rgb;
        _surface._normalTS = _surface._normalTS * 2.f - 1.f;
#endif
#ifdef USE_NORMAL_INTENSITY
        _surface._normalTS = mix(float3(0.f, 0.f, 1.f), _surface._normalTS, scn_commonprofile.normalIntensity);
#endif
#else
        _surface._normalTS = float3(0.f, 0.f, 1.f);
#endif
        _surface.normal.rgb = normalize(ts2vs * _surface._normalTS.xyz );
    }
#else
    _surface._normalTS = float3(0.f, 0.f, 1.f);
#endif
#ifdef USE_REFLECTIVE_MAP
    float3 refl = reflect( -_surface.view, _surface.normal );
    float m = 2.f * sqrt( refl.x*refl.x + refl.y*refl.y + (refl.z+1.f)*(refl.z+1.f));
    _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, float2(float2(refl.x,-refl.y) / m) + 0.5f);
#if defined(USE_REFLECTIVE_TEXTURE_COMPONENT)
    _surface.reflective = colorFromMask(_surface.reflective, USE_REFLECTIVE_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective *= scn_commonprofile.reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_CUBEMAP)
    float3 refl = reflect( _surface.position, _surface.normal );
    _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, scn::mat4_mult_float3(scn_frame.viewToCubeTransform, refl)); // sample the cube map in world space
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective *= scn_commonprofile.reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_COLOR)
    _surface.reflective = scn_commonprofile.reflectiveColor;
#elif defined(USE_REFLECTIVE)
    _surface.reflective = float4(0.);
#endif
#ifdef USE_FRESNEL
    _surface.fresnel = scn_commonprofile.fresnel.x + scn_commonprofile.fresnel.y * pow(1.f - saturate(dot(_surface.view, _surface.normal)), scn_commonprofile.fresnel.z);
    _surface.reflective *= _surface.fresnel;
#endif
#ifdef USE_SHININESS
    _surface.shininess = scn_commonprofile.materialShininess;
#endif
    
    //
    // MARK: Surface shader modifier
    //
    
#ifdef USE_SURFACE_MODIFIER
    // DoSurfaceModifier START
    __DoSurfaceModifier__
    // DoSurfaceModifier END
#endif
    
    //
    // MARK: Lighting
    //
    
    SCNShaderLightingContribution _lightingContribution(_surface, in);
#ifdef USE_LIGHT_MODIFIER
    __LightModifierCopyDecl__
#endif
#ifdef USE_AMBIENT_LIGHTING
    _lightingContribution.ambient = scn_frame.ambientLightingColor.rgb;
#endif
#ifdef USE_LIGHTING
#ifdef USE_PER_PIXEL_LIGHTING
#ifdef USE_CLUSTERED_LIGHTING
    uint3 clusterIndex;
    clusterIndex.xy = uint2(in.fragmentPosition.xy * scn_frame.clusterScale.xy); // TODO Multiple rendering
    clusterIndex.z = in.position.z * scn_frame.clusterScale.z + scn_frame.clusterScale.w; // scale/bias
    
    // x:offset y:spot<<8|omni z:probe w:????
    ushort4 cluster_offset_count = u_clusterTexture.read(clusterIndex);
    int lid = cluster_offset_count.x;
#endif
#ifdef USE_PBR
    _lightingContribution.prepareForPBR(u_specularDFGTexture, scn_commonprofile.selfIlluminationOcclusion);
    
    // Irradiance
#ifdef USE_SELFILLUMINATION
    _lightingContribution.add_irradiance_from_selfIllum();
#else
#ifdef USE_PROBES_LIGHTING // Irradiance SH
    _lightingContribution.add_global_irradiance_from_sh(scn_frame.viewToCubeTransform, scn_node.shCoefficients);
#else
    _lightingContribution.add_global_irradiance_probe(u_irradianceTexture, scn_frame.viewToCubeTransform, scn_frame.environmentIntensity);
#endif
#endif
    // Radiance
#ifndef DISABLE_SPECULAR
#ifdef C3D_USE_REFLECTION_PROBES
    int probe_count = (cluster_offset_count.z & 0xff);
    for (int i = 0 ; i < probe_count; ++i, ++lid) {
        _lightingContribution.add_local_probe(scn_lights[LightIndex(lid)], u_reflectionProbeTexture);
    }
#if PROBES_NORMALIZATION
#if PROBES_OUTER_BLENDING
    _lightingContribution.specular += _lightingContribution.probesWeightedSum.rgb / max(1.f, _lightingContribution.probesWeightedSum.a);
#else
    _lightingContribution.specular += _lightingContribution.probesWeightedSum.rgb / _lightingContribution.probesWeightedSum.a;
#endif
    float globalFactor = saturate(1.f - _lightingContribution.probesWeightedSum.a);
#else
    float globalFactor = _lightingContribution.probeRadianceRemainingFactor;
#endif
    _lightingContribution.add_global_probe(scn_frame.viewToCubeTransform, globalFactor * scn_frame.environmentIntensity,
                                           u_reflectionProbeTexture);
#else // Global Probe
    _lightingContribution.add_global_probe(u_radianceTexture, scn_frame.viewToCubeTransform, scn_frame.environmentIntensity);
#endif // C3D_USE_REFLECTION_PROBES
#endif // DISABLE_SPECULAR
#endif // USE_PBR
    #if DEBUG_PIXEL
        switch (DEBUG_PIXEL) {
            case 1: _output.color = float4(_surface.normal * 0.5f + 0.5f, 1.f); break;
            case 2: _output.color = float4(_surface.geometryNormal * 0.5f + 0.5f, 1.f); break;
            case 3: _output.color = float4(_surface.tangent * 0.5f + 0.5f, 1.f); break;
            case 4: _output.color = float4(_surface.bitangent * 0.5f + 0.5f, 1.f); break;
            case 5: _output.color = float4(_surface.diffuse.rgb, 1.f); break;
            case 6: _output.color = float4(float3(_surface.roughness), 1.f); break;
            case 7: _output.color = float4(float3(_surface.metalness), 1.f); break;
            case 8: _output.color = float4(float3(_surface.ambientOcclusion), 1.f); break;
            default: break;
        }
        return _output;
    #endif
__FragmentDoLighting__
    #ifdef USE_CLUSTERED_LIGHTING
        // Omni lights
        int omni_count = cluster_offset_count.y & 0xff;
        for (int i = 0 ; i < omni_count; ++i, ++lid) {
            _lightingContribution.add_local_omni(scn_lights[LightIndex(lid)]);
        }
        // Spot lights
        int spot_count = (cluster_offset_count.y >> 8);
        for (int i = 0 ; i < spot_count; ++i, ++lid) {
            _lightingContribution.add_local_spot(scn_lights[LightIndex(lid)]);
        }
    #endif
#else // USE_PER_PIXEL_LIGHTING
        _lightingContribution.diffuse = in.diffuse;
    #ifdef USE_SPECULAR
        _lightingContribution.specular = in.specular;
    #endif
#endif // USE_PER_PIXEL_LIGHTING
    #ifdef AVOID_OVERLIGHTING
        _lightingContribution.diffuse = saturate(_lightingContribution.diffuse);
    #ifdef USE_SPECULAR
        _lightingContribution.specular = saturate(_lightingContribution.specular);
    #endif // USE_SPECULAR
    #endif // AVOID_OVERLIGHTING
#else // USE_LIGHTING
    _lightingContribution.diffuse = float3(1.);
#endif // USE_LIGHTING
    //
    // MARK: Populating the `_output` struct
    //
    
#ifdef USE_PBR
    { // combine IBL + lighting
        float3 albedo = _surface.diffuse.rgb;
        float3 diffuseAlbedo = mix(albedo, float3(0.0), _surface.metalness);
        // ambient
        float3 color = (_lightingContribution.ambient * _surface.ambientOcclusion) * albedo;
        color += _lightingContribution.diffuse * diffuseAlbedo;
#ifndef DISABLE_SPECULAR
        color += _lightingContribution.specular;
#endif
#ifdef USE_EMISSION
        color += _surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
        color *= _surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
        color *= _lightingContribution.modulate;
#endif
        _output.color.rgb = color;
    }
#else // USE_PBR
    _output.color.rgb = illuminate(_surface, _lightingContribution);
#endif
    _output.color.a = _surface.diffuse.a;
#ifdef USE_FOG
    float fogFactor = pow(clamp(length(_surface.position.xyz) * scn_frame.fogParameters.x + scn_frame.fogParameters.y, 0., scn_frame.fogColor.a), scn_frame.fogParameters.z);
    _output.color.rgb = mix(_output.color.rgb, scn_frame.fogColor.rgb * _output.color.a, fogFactor);
#endif
#ifndef DIFFUSE_PREMULTIPLIED
    _output.color.rgb *= _surface.diffuse.a;
#endif
    
    //
    // MARK: Opacity and transparency
    //
#ifdef USE_TRANSPARENT // Either a map or a color
    
#ifdef USE_TRANSPARENCY
    _surface.transparent *= scn_commonprofile.transparency;
#endif
    
#ifdef USE_TRANSPARENCY_RGBZERO
#ifdef USE_NODE_OPACITY
    _output.color *= in.nodeOpacity;
#endif
    // compute luminance
    _surface.transparent.a = (_surface.transparent.r * 0.212671f) + (_surface.transparent.g * 0.715160f) + (_surface.transparent.b * 0.072169f);
    _output.color *= (float4(1.f) - _surface.transparent);
#else // ALPHA_ONE
#ifdef USE_NODE_OPACITY
    _output.color *= (in.nodeOpacity * _surface.transparent.a);
#else
    _output.color *= _surface.transparent.a;
#endif
#endif
#else
#ifdef USE_TRANSPARENCY // TRANSPARENCY without TRANSPARENT slot (nodeOpacity + diffuse.a)
#ifdef USE_NODE_OPACITY
    _output.color *= (in.nodeOpacity * scn_commonprofile.transparency);
#else
    _output.color *= scn_commonprofile.transparency;
#endif // NODE_OPACITY
#endif
#endif
    
    //
    // MARK: Fragment shader modifier
    //
    
#ifdef USE_FRAGMENT_MODIFIER
    // DoFragmentModifier START
    __DoFragmentModifier__
    // DoFragmentModifier END
#endif
#if defined(USE_CLUSTERED_LIGHTING) && defined(DEBUG_CLUSTER_TILE)
    _output.color.rgb = mix(_output.color.rgb, float3(scn::debugColorForCount(clusterIndex.z).xyz), 0.1f);
    _output.color.rgb = mix(_output.color.rgb, float3(clusterIndex.x & 0x1 ^ clusterIndex.y & 0x1).xyz, 0.01f);
#endif
#ifdef DISABLE_LINEAR_RENDERING
    _output.color.rgb = scn::linear_to_srgb(_output.color.rgb);
#endif
    
#ifdef USE_DISCARD
    if (_output.color.a == 0.) // we could set a different limit here
        discard_fragment();
#endif
#ifdef USE_POINT_RENDERING
    if ((dfdx(pointCoord.x) < 0.5f) && (length_squared(pointCoord * 2.f - 1.f) > 1.f)) {
        discard_fragment();
    }
#endif
    
#ifdef USE_MOTIONBLUR
#ifdef USE_MULTIPLE_RENDERING
        _output.motionblur.xy = (half2(((in.fragmentPosition.xy-scn_frame_slice.viewport.zw)/scn_frame_slice.viewport.xy)*2.f-1.f) - half2((in.velocity.xy) / in.velocity.z)) * scn_frame_slice.motionBlurIntensity;
#else
    _output.motionblur.xy = (half2(in.fragmentPosition.xy*scn_frame.inverseResolution.xy*2.f-1.f) - half2((in.velocity.xy) / in.velocity.z)) * scn_frame.motionBlurIntensity;
#endif
    _output.motionblur.z = length(_output.motionblur.xy);
    _output.motionblur.w = half(-_surface.position.z);
#endif
#ifdef USE_NORMALS_OUTPUT
    _output.normals = half4( half3(_surface.normal.xyz), 0.h );
#endif
#ifdef USE_REFLECTANCE_ROUGHNESS_OUTPUT
#ifdef USE_PBR
    _output.reflectanceRoughnessOutput = half4( half3(_surface.diffuse.rgb * _lightingContribution.reflectance), half(_surface.roughness) );
#else // SSR on non pbr material is not supported
    _output.reflectanceRoughnessOutput = half4( 0.h );
#endif
#endif
    
#ifdef USE_OUTLINE
_output.color.rgb = in.outlineHash;
#endif
    return _output;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>SceneKit_renderMirroredScene</string>
<string>SceneKit_renderFloor</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_renderMirroredScene</key>
<dict>
<key>outputs</key>
<dict>
<key>depth</key>
<string>SceneKit-Floor-depth</string>
<key>color</key>
<string>SceneKit-Floor-color</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
</dict>
<key>SceneKit_renderFloor</key>
<dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>inputs</key>
<dict>
<key>u_floorReflectionDepth</key>
<string>SceneKit-Floor-depth</string>
<key>u_floorReflectionColor</key>
<string>SceneKit-Floor-color</string>
<key>u_floorNormal</key>
<string>u_floorNormal</string>
<key>u_floorTangent</key>
<string>u_floorTangent</string>
<key>u_floorCenter</key>
<string>u_floorCenter</string>
<key>u_floorExtent</key>
<string>u_floorExtent</string>
<key>u_floorReflectivity</key>
<string>u_floorReflectivity</string>
<key>u_floor_viewport</key>
<string>u_floor_viewport</string>
<key>u_floorMVP_i</key>
<string>u_floorMVP_i</string>
<key>u_floorPlane</key>
<string>u_floorPlane</string>
<key>u_floorFalloff</key>
<string>u_floorFalloff</string>
<key>u_floorFalloffStart</key>
<string>u_floorFalloffStart</string>
</dict>
<key>draw</key>
<string>DRAW_GEOMETRY</string>
<key>installViewport</key>
<false/>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>u_floorNormal</key>
<dict>
<key>type</key>
<string>vec3</string>
</dict>
<key>u_floorTangent</key>
<dict>
<key>type</key>
<string>vec4</string>
</dict>
<key>u_floorCenter</key>
<dict>
<key>type</key>
<string>vec3</string>
</dict>
<key>u_floorExtent</key>
<dict>
<key>type</key>
<string>vec2</string>
</dict>
<key>u_floor_viewport</key>
<dict>
<key>type</key>
<string>vec2</string>
</dict>
<key>u_floorReflectivity</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>u_floorMVP_i</key>
<dict>
<key>type</key>
<string>mat4</string>
</dict>
<key>u_floorPlane</key>
<dict>
<key>type</key>
<string>vec4</string>
</dict>
<key>u_floorFalloff</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>u_floorFalloffStart</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>SceneKit-Floor-depth</key>
<dict>
<key>type</key>
<string>depth</string>
</dict>
<key>SceneKit-Floor-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba</string>
</dict>
</dict>
</dict>
</plist>
uniform sampler2D downSampler;
uniform sampler2D depthSampler;
uniform vec3 CocScaleBias;
varying vec2 v_texCoord;
void main (void)
    vec4 down = texture2D( downSampler, v_texCoord);
    float depth = texture2D( depthSampler, v_texCoord).r;
    float coc = step(0., (depth * CocScaleBias.x + CocScaleBias.y)); // keep only near coc
gl_FragColor = vec4(down.rgb, coc * down.a);
    // debug
    //gl_FragColor = vec4(depth, 0., 0., 1.);
#extension GL_ARB_shader_texture_lod : enable
uniform sampler2D textureSampler0;
varying vec2 TexCoord;
void main (void)
gl_FragColor =
texture2DLod(textureSampler0,TexCoord, 0.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 1.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 2.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 3.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 4.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 5.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 6.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 7.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 8.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 9.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 10.0);
gl_FragColor +=
texture2DLod(textureSampler0,TexCoord, 11.0);    
    gl_FragColor /= 12.0;
// Attributes
attribute vec4 a_position;
//uniforms
uniform mat4 u_modelViewProjectionTransform;
void main()
    gl_Position = u_modelViewProjectionTransform * a_position;
struct SCNShaderLightingContribution
vec3 ambient;
vec3 diffuse;
vec3 specular;
} _lightingContribution;
#ifdef USE_SKINNING
uniform vec4 u_skinningJointMatrices[60];
attribute vec4 a_skinningWeights;
attribute vec4 a_skinningJoints;
#endif
// Attributes
attribute vec4 a_position;
#ifdef USE_NORMAL
attribute vec3 a_normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
attribute vec4 a_tangent;
#endif
#ifdef NEED_IN_TEXCOORD0
attribute vec2 a_texCoord0;
#endif
#ifdef NEED_IN_TEXCOORD1
attribute vec2 a_texCoord1;
#endif
#ifdef NEED_IN_TEXCOORD2
attribute vec2 a_texCoord2;
#endif
#ifdef NEED_IN_TEXCOORD3
attribute vec2 a_texCoord3;
#endif
#ifdef NEED_IN_TEXCOORD4
attribute vec2 a_texCoord4;
#endif
#ifdef NEED_IN_TEXCOORD5
attribute vec2 a_texCoord5;
#endif
#ifdef NEED_IN_TEXCOORD6
attribute vec2 a_texCoord6;
#endif
#ifdef NEED_IN_TEXCOORD7
attribute vec2 a_texCoord7;
#endif
#ifdef USE_VERTEX_COLOR
attribute vec4 a_color;
varying vec4 v_vertexColor;
#endif
// Varyings
#ifdef USE_PER_VERTEX_LIGHTING
varying vec3 v_diffuse;
#ifdef USE_SPECULAR
varying vec3 v_specular;
#endif
#endif
#if defined(USE_POSITION) || defined(USE_VIEW)
varying vec3 v_position;
#endif
#ifdef USE_NORMAL
varying vec3 v_normal;
#endif
#ifdef USE_TANGENT
varying vec3 v_tangent;
#endif
#ifdef USE_BITANGENT
varying vec3 v_bitangent;
#endif
#if defined(USE_SPECULAR) && defined(USE_PER_VERTEX_LIGHTING)
uniform float u_materialShininess;
#endif
void main(void)
  _geometry.position = a_position;
  #ifdef USE_NORMAL
  _geometry.normal = a_normal;
  #endif
  #if defined(USE_TANGENT) || defined(USE_BITANGENT)
  _geometry.tangent = a_tangent;
  #endif
  #ifdef NEED_IN_TEXCOORD0
  _geometry.texcoords[0] = a_texCoord0;
  #endif
  #ifdef NEED_IN_TEXCOORD1
  _geometry.texcoords[1] = a_texCoord1;
  #endif
  #ifdef NEED_IN_TEXCOORD2
  _geometry.texcoords[2] = a_texCoord2;
  #endif
  #ifdef NEED_IN_TEXCOORD3
  _geometry.texcoords[3] = a_texCoord3;
  #endif
  #ifdef NEED_IN_TEXCOORD4
  _geometry.texcoords[4] = a_texCoord4;
  #endif
  #ifdef NEED_IN_TEXCOORD5
  _geometry.texcoords[5] = a_texCoord5;
  #endif
  #ifdef NEED_IN_TEXCOORD6
  _geometry.texcoords[6] = a_texCoord6;
  #endif
  #ifdef NEED_IN_TEXCOORD7
  _geometry.texcoords[7] = a_texCoord7;
  #endif
#ifdef USE_VERTEX_COLOR
  _geometry.color = a_color;
#endif
  #ifdef USE_SKINNING
    vec3 pos = vec3(0.);
    #ifdef USE_NORMAL
    vec3 nrm = vec3(0.);
    #endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    vec3 tgt = vec3(0.);
    #endif
    for (int i = 0; i < MAX_BONE_INFLUENCES; ++i) {
#if MAX_BONE_INFLUENCES == 1
        float weight = 1.0;
#else
        float weight = a_skinningWeights[i];
        
#endif
      int idx = int(a_skinningJoints[i]) * 3;
      mat4 jointMatrix = mat4(u_skinningJointMatrices[idx], u_skinningJointMatrices[idx+1], u_skinningJointMatrices[idx+2], vec4(0., 0., 0., 1.));
            pos += (_geometry.position * jointMatrix).xyz * weight;
      #ifdef USE_NORMAL
            nrm += _geometry.normal * mat3(jointMatrix) * weight;
      #endif
      #if defined(USE_TANGENT) || defined(USE_BITANGENT)
            tgt += _geometry.tangent.xyz * mat3(jointMatrix) * weight;
      #endif
    }
    
    _geometry.position.xyz = pos;
    #ifdef USE_NORMAL
    _geometry.normal = nrm;
    #endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent.xyz = tgt;
    #endif
  #endif
  #ifdef USE_GEOMETRY_MODIFIER
// DoGeometryModifier START
__DoGeometryModifier__
// DoGeometryModifier END
  #endif
  // Transform the geometry elements in view space
  #ifdef USE_POSITION
  _surface.position = (u_modelViewTransform * _geometry.position).xyz;
  #endif
  #ifdef USE_NORMAL
  _surface.normal = normalize(mat3(u_normalTransform) * _geometry.normal);
  #endif
  #if defined(USE_TANGENT) || defined(USE_BITANGENT)
  _surface.tangent = normalize(mat3(u_normalTransform) * _geometry.tangent.xyz);
  _surface.bitangent = /*_geometry.tangent.w **/ cross(_surface.tangent, _surface.normal); // no need to renormalize since tangent and normal should be orthogonal
    // old code : _surface.bitangent =  normalize(cross(_surface.normal,_surface.tangent));
  #endif
  //if USE_VIEW is 2 we may also need to set _surface.view. todo: make USE_VIEW a mask
  #ifdef USE_VIEW
    _surface.view = normalize(-_surface.position);
  #endif
  #ifdef USE_PER_VERTEX_LIGHTING
  _lightingContribution.diffuse = vec3(0.);
  #ifdef USE_SPECULAR
  _lightingContribution.specular = vec3(0.);
  _surface.shininess = u_materialShininess;
  #endif
  // Lighting
__DoLighting__
  v_diffuse = _lightingContribution.diffuse;
  #ifdef USE_SPECULAR
  v_specular = _lightingContribution.specular;
  #endif
  #endif
  #if defined(USE_POSITION) && (USE_POSITION == 2)
  v_position = _surface.position;
  #endif
  #if defined(USE_NORMAL) && (USE_NORMAL == 2)
  v_normal = _surface.normal;
  #endif
  #if defined(USE_TANGENT) && (USE_TANGENT == 2)
  v_tangent = _surface.tangent;
  #endif
  #if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
  v_bitangent = _surface.bitangent;
  #endif
  #ifdef USE_VERTEX_COLOR
  v_vertexColor = _geometry.color;
  #endif
#ifdef USE_TEXCOORD
__DoTexcoord__
#endif
    
  // this means that the geometry are still in model space
  #if defined(SEPARATE_PROJECTION) && SEPARATE_PROJECTION
  gl_Position = u_projectionTransform * vec4(_surface.position, 1.);
  #else
  gl_Position = u_modelViewProjectionTransform * _geometry.position;
  #endif
varying vec2 TexCoord;
uniform sampler2D textureSampler0;
uniform vec2  offsets[MAX_SAMPLE];
uniform float weights[MAX_SAMPLE];
uniform int n_sample;
const float alphaThreshold = 0.9;
void main (void)
    int i;
    vec4 accum = vec4(0.0);
    float total = 0.0;
    for(i=0;i<n_sample;i++){
        vec4 c = texture2D(textureSampler0, TexCoord+offsets[i]);
        c.rgb *= c.a;
        accum += c * weights[i];
        total += weights[i] * c.a;
    }
    accum /= total;
gl_FragColor = accum;
// initial geometry is [-1,1] in XY plane (so z is always 0)
struct scn_floor_t {
    float3 u_floorNormal;
    float4 u_floorTangent;
    float3 u_floorCenter;
    float2 u_floorExtent;
#pragma arguments
    scn_floor_t scn_fg
#pragma body
    float3 u_floorNormal = scn_fg.u_floorNormal;
    float4 u_floorTangent = scn_fg.u_floorTangent;
    float3 u_floorCenter = scn_fg.u_floorCenter;
    float2 u_floorExtent = scn_fg.u_floorExtent;
    float3 floorBitangent =  normalize(cross(u_floorTangent.xyz, u_floorNormal));
    _geometry.position.xyz = u_floorCenter.xyz + u_floorExtent.x * (_geometry.position.x * u_floorTangent.xyz) + u_floorExtent.y * (_geometry.position.y * floorBitangent);
    _geometry.normal = u_floorNormal;
    _geometry.tangent = u_floorTangent;
    // we could check if the texCoord are really needed with ifdef USE_xxxx_MAP , or, better, work only on texcoordN [0..1]
    float2 tc;
    if (u_floorNormal.y != 0.)
        tc = _geometry.position.xz * 0.01;
    else if (u_floorNormal.z != 0.)
        tc = _geometry.position.xy * 0.01;
    else
        tc = _geometry.position.yz * 0.01;
    for (int i = 0; i < kSCNTexcoordCount; ++i)
        _geometry.texcoords[i] = tc;
uniform sampler2D textureSampler0;
uniform float factor;
varying vec2 TexCoord;
void main (void)
gl_FragColor =
texture2D(textureSampler0,TexCoord) * factor;
uniform samplerCube textureSampler0;
varying vec3 TexCoord;
#if __VERSION__ > 120 // GL Compatibility Profile
#define textureCube(tex,coord) texture( tex, coord )
#endif
void main (void)
    
gl_FragColor = textureCube(textureSampler0,TexCoord);
  "passes" : {
    "SceneKit_renderSceneFromLight" : {
      "outputs" : {
        "depth" : "SceneKit-spotShadowDepth"
      },
      "depthStates" : {
        "clear" : true
      },
      "isViewDependant" : false,
      "samples" : 1,
      "onlyShadowCasters" : true,
      "pointOfView" : "self",
      "ignoreFloors" : true,
      "draw" : "DRAW_SCENE"
    }
  },
  "sequence" : [
    "SceneKit_renderSceneFromLight"
  ],
  "targets" : {
    "SceneKit-spotShadowDepth" : {
      "global" : true,
      "type" : "depth"
    }
// vertex data
attribute vec2 a_texCoord1; // x:cornerX y:cornerY
// instance data
attribute vec4 a_position; // xyz: position, w:angle
attribute vec3 a_texCoord0; // x:life y:size z:frame (texture animation)
attribute vec4 a_color; // particle color
#ifdef ENABLE_STRETCH
attribute vec4 a_texCoord2; // velocity of the particle in .xyz
uniform float u_stretchFactor;
#elif defined(ENABLE_ORIENTATION_FREE)
attribute vec4 a_texCoord2; // orientation in free mode as an axis angle
mat3 axisangle_to_matrix(vec4 axis_angle)
float c = cos(axis_angle.w);
    float s = sin(axis_angle.w);
    float t = 1. - c;
    
    mat3 m;
    m[0][0] = c + axis_angle.x * axis_angle.x * t;
    m[1][1] = c + axis_angle.y * axis_angle.y * t;
    m[2][2] = c + axis_angle.z * axis_angle.z * t;
    
float tmp1 = axis_angle.x * axis_angle.y * t;
    float tmp2 = axis_angle.z * s;
    m[1][0] = tmp1 + tmp2;
    m[0][1] = tmp1 - tmp2;
    
    tmp1 = axis_angle.x * axis_angle.z * t;
    tmp2 = axis_angle.y * s;
    m[2][0] = tmp1 - tmp2;
    m[0][2] = tmp1 + tmp2;
    
    tmp1 = axis_angle.y*axis_angle.z*t;
    tmp2 = axis_angle.x*s;
    m[2][1] = tmp1 + tmp2;
    m[1][2] = tmp1 - tmp2;
    return m;
#endif
#ifdef ENABLE_FOG
uniform mediump vec4 u_fogColor;
uniform vec3 u_fogParameters; // x:-1/(end-start) y:1-start*x z:exp
#endif
#ifdef ENABLE_SOFT
varying float v_eyeLinearZ;
#endif
#ifdef ENABLE_CUBE_MAP
uniform mat4 u_viewToCubeWorld;
varying vec4 v_normal;
#endif
#ifdef ENABLE_ANIMATION
#define REPEAT 0
#define CLAMP 1
#define AUTOREVERSE  2
uniform vec4 u_frameSize; // 1/dimX, 1/dimY, dimX, dimX*dimY
// modf Only available for CoreProfile & GLES 3.0
float __modf(float value, out float intValue)
float fracValue = fract(value);
intValue = value - fracValue;
return fracValue;
vec4 ComputeUVS(vec2 iNormUV, float iFrame)
vec4 outUV;
#if ENABLE_ANIMATION == CLAMP
    
    iFrame = clamp(iFrame, 0., u_frameSize.w - 1.); // clamp frame
    
    float intFrame;
    float frameFrac = __modf(iFrame, intFrame);
    vec2 frame;
    frame.x = __modf(intFrame * u_frameSize.x, frame.y);
    frame.y *= u_frameSize.y;
    
    outUV.xy = frame + iNormUV * u_frameSize.xy;
    outUV.w = frameFrac;
    outUV.z = ((frame.x + u_frameSize.x) == 1.)?1.:0.; // next row or not
#elif ENABLE_ANIMATION == REPEAT
    
    float tmp = iFrame * u_frameSize.x;
    
    vec2 frame;
    frame.y = tmp - fract(tmp);
    frame.x = fract(tmp) * u_frameSize.z;
    
    float frameFrac = fract(frame.x);
    frame.x -= frameFrac;
    
    outUV.xy = (frame + iNormUV) * u_frameSize.xy;
    outUV.w = frameFrac;
    outUV.z = (frame.x == (u_frameSize.z - 1.))?1.:0.; // next row or not
#else // AUTOREVERSE
    
    float invFrameCount = u_frameSize.x * u_frameSize.y;
    float normFrame = iFrame * invFrameCount;
    float lastFrame = u_frameSize.w - 1.;
    float frameIndex = fract(normFrame) * u_frameSize.w;
    if (fract(normFrame * 0.5) > 0.5) {
        frameIndex = (lastFrame-frameIndex);
    }
    frameIndex = clamp(frameIndex, 0., lastFrame); // clamp frame
    
    float tmp = frameIndex * u_frameSize.x;
    
    vec2 frame;
    frame.y = tmp - fract(tmp);
    
    frame.x = fract(tmp) * u_frameSize.z;
    
    float frameFrac = fract(frame.x);
    frame.x -= frameFrac;
    
    outUV.xy = (frame + iNormUV) * u_frameSize.xy;
    
    outUV.w = frameFrac;
    outUV.z = (frame.x == (u_frameSize.z - 1.))?1.:0.; // next row or not
#endif
return outUV;
#endif
uniform mat4 viewTransform; // this should contain only the viewTransform if part are in world space or modelViewTransform otherwise
uniform mat4 u_projectionTransform;
#ifdef ENABLE_LIGHTING
// lighting
uniform vec3 u_lightPosition0; // in modelViewSpace already
uniform vec4 u_lightColor0;
#endif
#ifdef ENABLE_COLOR_RAMP
uniform sampler2D u_colorRamp;
#endif
#ifdef ENABLE_ANIMATION
varying vec3 v_uv0;
varying vec2 v_uv1;
#else
varying vec2 v_uv0;
#endif
varying vec4 v_vertexColor;
void main()
    // transform the particle in view space
    vec4 viewPos = viewTransform * vec4(a_position.xyz, 1);
#ifdef ENABLE_STRETCH
    // compute the trail direction in viewSpace
    vec4 viewDir = viewTransform * vec4(a_texCoord2.xyz, 0);
    viewDir *= u_stretchFactor;
    
    // move the top vertices to the end of the trail
    viewPos.xyz += (a_texCoord1.y > 0.) ? viewDir.xyz : vec3(0.);
    
    // compute the billboarding offsets
//    float len = length(viewDir.xy);
//    vec2 u = (len > 0.) ? viewDir.xy/len : vec2(0,1);
    vec2 u = normalize(viewDir.xy); // divide by 0 seems to work.. otherwise replace by code commented beneath
    vec2 r = vec2(-u.y, u.x);
    vec2 off = r * a_texCoord1.x + u * a_texCoord1.y ; // offset
    viewPos.xy += off * a_texCoord0.y; // * size
    vec3 N = normalize(vec3(-off.x, -off.y, -2));
    
#else // ENABLE_STRETCH
    
    // TODO only rotate if needed (angle != 0)
    float sn = sin(a_position.w);
    float cs = cos(a_position.w);
    // expand the quad corners
    vec2 dir = vec2( a_texCoord1.x * cs - a_texCoord1.y * sn,  a_texCoord1.y * cs + a_texCoord1.x * sn);
    dir *= a_texCoord0.y;
#ifdef ENABLE_ORIENTATION_FREE
    // TODO : we should work in world space then ? the transform is in worldSpace or localSpace...
    // TODO with version 120 we would not need this....
    mat3 vt = mat3(viewTransform[0].xyz, viewTransform[1].xyz, viewTransform[2].xyz);
    mat3 mat = vt * axisangle_to_matrix(a_texCoord2); // mat3(viewTransform)
    
#ifdef ENABLE_CUBE_MAP
    vec3 N = mat[0] * dir.x + mat[1] * dir.y + mat[2];
    viewPos.xy += dir;
#else
    vec3 off = mat[0] * dir.x + mat[1] * dir.y;
    viewPos.xyz += off;
#endif
    // TODO we should also tranform the normal for the lighting !!!!!
    
#elif defined(ENABLE_BILLBOARD_VIEW)
    vec3 u = vec3(0,1,0);
    vec3 r = normalize(cross(u, -viewPos.xyz));
    vec3 off = dir.x * r + dir.y * u;
    viewPos.xyz += off;
    vec3 N = normalize(vec3(-off.x/a_texCoord0.y, -off.y/a_texCoord0.y, -2));
#elif defined(ENABLE_BILLBOARD_Y)
    vec3 u = (viewTransform * vec4(0, 1, 0, 0)).xyz;
    vec3 r = normalize(cross(u, vec3(0,0,1))); // Screen Aligned
//    vec3 r = normalize(cross(u, -viewPos.xyz)); // ViewAligned
    vec3 off = dir.x * r + dir.y * u;
    viewPos.xyz += off;
    vec3 N = normalize(vec3(-off.x/a_texCoord0.y, -off.y/a_texCoord0.y, -2));
    
#else // defined(ENABLE_BILLBOARD_SCREEN)
    viewPos.xy += dir;
    vec3 N = normalize(vec3(-dir.x, -dir.y, -2));
    
#endif // ENABLE_ORIENTATION_FREE
#endif // ENABLE_STRETCH
#ifdef ENABLE_CUBE_MAP
#ifdef ENABLE_ORIENTATION_FREE
    v_normal.xyz = N;
#else
    vec3 refl = reflect( viewPos.xyz, N );
    v_normal.xyz = mat3(u_viewToCubeWorld) * refl;
#endif // ENABLE_ORIENTATION_FREE
#endif
#ifdef ENABLE_COLOR_RAMP
    v_vertexColor = a_color * texture2D(u_colorRamp, a_texCoord0.xx);
#else // use vertex color (TODO : use constant color if needed)
    v_vertexColor = a_color;
#endif
    
#ifndef ENABLE_BLACKPASS
#ifdef ENABLE_LIGHTING
    vec3 L = normalize(viewPos.xyz - u_lightPosition0);
#if defined(ENABLE_ORIENTATION_FREE) && !defined(ENABLE_CUBE_MAP)
    // if we want to bend the normal (but free orientation doesn't need too right ?)
    // vec3 N = (dot(mat[2], viewPos.xyz) > 0.) ? -normalize(-mat[2] + 0.1 * off) : -normalize(mat[2] + 0.1 * off);
//    vec3 N = (dot(mat[2], viewPos.xyz) > 0.) ? mat[2] : -mat[2];
    vec3 N = sign(dot(mat[2], viewPos.xyz)) * mat[2];
    // simple lambertian + back light diffusion
    float NdotL = dot(N, L);
//    vec3 diff = u_lightColor0.rgb * (max(0.0, NdotL) + 0.3 * max(0., -NdotL));
    vec3 diff = u_lightColor0.rgb * (max(0.0, NdotL) + 0.3 * (1. - abs(NdotL)));
    // Specular
    float _shininess = 100.0;
    vec3 halfVector = normalize(L + viewPos.xyz);
    float spec = max(0.0, pow(max(0.0, dot(N, halfVector)), _shininess));
    v_vertexColor.rgb *= diff;
    v_vertexColor.rgb += spec;
#else
    // simple lambertian
    vec3 diff = vec3(max(0.0, dot(N, L))) * u_lightColor0.rgb;
    // trilight model (lambertian + wrap around + hemispheric)
    //vec3 diff = lightColor0 * max(0., NdotL) + lightColor1 * (1. - abs(NdotL)) + lightColor2 * max(0., -NdotL);
    // todo : support ambient !!!!!!!!!!
    // diff += vec3(0.5);
    
    v_vertexColor.rgb *= diff;
#endif // ENABLE_ORIENTATION_FREE
#endif // ENABLE_LIGHTING
#endif // ENABLE_BLACKPASS
    // TexCoord
#ifdef ENABLE_ANIMATION
    vec4 animUVS = ComputeUVS(a_texCoord1.xy * vec2(0.5, -0.5) + 0.5, a_texCoord0.z);
    v_uv0 = animUVS.xyw;
    v_uv1 = animUVS.xy + u_frameSize.xy * vec2(1.0, animUVS.z);
#else
    v_uv0 = a_texCoord1.xy * vec2(0.5, -0.5) + 0.5;
#endif
    
#ifndef ENABLE_BLACKPASS
    #ifdef ENABLE_FOG
        float fogFactor = pow(clamp(viewPos.z * u_fogParameters.x + u_fogParameters.y, 0.0, u_fogColor.a), u_fogParameters.z);
        #ifdef ENABLE_CUBE_MAP
            v_normal.a = fogFactor;
        #else
            // vertex color is alpha premultiplied, but not the fogcolor
            v_vertexColor.rgb = mix(v_vertexColor.rgb, u_fogColor.rgb * v_vertexColor.a, fogFactor);
        #endif // ENABLE_CUBE_MAP
    #endif // ENABLE_FOG
#endif // ENABLE_BLACKPASS
#ifdef ENABLE_SOFT
    v_eyeLinearZ = viewPos.z;
#endif
    
    gl_Position = u_projectionTransform * viewPos;
// This pixel shader applies a 3 x 3 blur to the image in
// colorMapSampler, which is the same size as the render target.
// The sample weights are 1/16 in the corners, 2/16 on the edges,
// and 4/16 in the center.
uniform sampler2D colorSampler;
varying vec4 v_texCoord;
void main (void)
    // Use bilinear filtering to average 4 color samples for free.
    vec4 color;
    color  = texture2D( colorSampler, v_texCoord.xz );
    color += texture2D( colorSampler, v_texCoord.yz );
    color += texture2D( colorSampler, v_texCoord.xw );
    color += texture2D( colorSampler, v_texCoord.yw );
    color *= 0.25;
    
gl_FragColor = vec4(color);
attribute vec4 a_position;
attribute vec4 a_texCoord0; // x:life y:size z:cornerX w:cornerY
attribute vec4 a_texCoord1; // xyz:velocity w:cornerY
attribute vec4 a_color; // particle color
uniform mat4 viewTransform; // this should contain only the viewTransform if part are in world space or modelViewTransform otherwise
uniform mat4 u_projectionTransform;
varying vec2 v_uv0;
varying vec4 v_vertexColor;
void main()
    // transform the particle in view space
    vec4 viewPos = viewTransform * vec4(a_position.xyz, 1);
    vec2 dir0 = normalize((viewTransform * vec4(normalize(a_texCoord1.xyz), 0)).xy);
    vec2 tangent = vec2(-dir0.y, dir0.x);
    
    viewPos.xy += tangent * a_texCoord0.y * a_texCoord1.w;
    v_vertexColor = a_color;
    v_uv0 = vec2(a_texCoord0.x, a_texCoord1.w * 0.5 + 0.5);
    
    gl_Position = u_projectionTransform * viewPos;
varying vec4 v_vertexColor;
varying vec2 v_texCoord;
uniform sampler2D u_sampler;
void main()
    vec4 mask = texture2D(u_sampler, v_texCoord);
    gl_FragColor = v_vertexColor * mask;
#extension GL_OES_standard_derivatives : enable
precision highp float; 
uniform vec4 u_color;
varying vec3 v_vertexCenter;
#if 0
// Fragment shader function
vec3 smooth(vec3 edge0, vec3 edge1, vec3 x);
vec3 smooth(vec3 edge0, vec3 edge1, vec3 x)
    vec3 t = clamp((x - edge0)/(edge1 - edge0), vec3(0.), vec3(1));
    return t * t * (3. - 2. * t);
#endif
void main()
    vec3 d = fwidth(v_vertexCenter);
    vec3 a3 = smoothstep(vec3(0.0), d * 1.5, v_vertexCenter);
    //    vec3 a3 = smoothstep(vec3(0.0), d * 1.5, in.center);
    float edge =  min(min(a3.x, a3.y), a3.z);
    if (edge >= 1.0)
        discard;
    gl_FragColor = u_color * (1.0 - edge) * 0.95;
attribute vec4 a_position;
uniform mat4 u_modelViewProjectionTransform;
void main(void)
gl_Position = u_modelViewProjectionTransform * a_position;
struct SCNShaderLight
vec4 intensity; // lowp, light intensity
vec3 direction; // mediump, vector from the point toward the light
    
    // private
    float _att;
    vec3 dir; // lowp, vector from the point to the light for point and spot, dist attenuations
    float dist; // mediump, distance from the point to the light (same coord. than range)
void main()
    gl_FragColor = vec4(1.,0.,0.,1.);
uniform mat4 u_modelTransform;
#define MOD2 vec2(443.8975,397.2973)
float hash(vec2 p)
    p  = fract(p * MOD2);
    p += dot(p.xy, p.yx+19.19);
    return fract(p.x * p.y);
void main()
    float x = hash(u_modelTransform[3].xy);
gl_FragColor = vec4(vec3(x+1./255.),1.);
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE)
static inline void scn_smooth_geometry_pn_triangle(thread float3 &position, thread float3 &normal, float3 patchCoord, float3 P0, float3 P1, float3 P2, float3 N0, float3 N1, float3 N2)
    float u = patchCoord.y;
    float v = patchCoord.z;
    float w = patchCoord.x;
    
    float3 P0P1 = P1 - P0;
    float3 P1P2 = P2 - P1;
    float3 P2P0 = P0 - P2;
    
    float w12 = dot(P0P1, N0);
    float w23 = dot(P1P2, N1);
    float w31 = dot(P2P0, N2);
    
    float w21 = dot(-P0P1, N1);
    float w32 = dot(-P1P2, N2);
    float w13 = dot(-P2P0, N0);
    
    float inv3 = 1.f / 3.f;
    
    float3 b210 = (2.f * P0 + P1 - w12 * N0) * inv3;
    float3 b021 = (2.f * P1 + P2 - w23 * N1) * inv3;
    float3 b201 = (2.f * P0 + P2 - w13 * N0) * inv3;
    
    float3 b120 = (2.f * P1 + P0 - w21 * N1) * inv3;
    float3 b012 = (2.f * P2 + P1 - w32 * N2) * inv3;
    float3 b102 = (2.f * P2 + P0 - w31 * N2) * inv3;
    
    float3 E = (b210 + b120 + b021 + b012 + b201 + b102) / 6.f;
    float3 V = (P0 + P1 + P2) * inv3;
    float3 b111 = E + (E - V) / 2.f;
    
    position.xyz =
    P0 * (w * w * w) +
    P1 * (u * u * u) +
    P2 * (v * v * v) +
    b210 * (3.f * w * w * u) +
    b120 * (3.f * w * u * u) +
    b201 * (3.f * w * w * v) +
    b021 * (3.f * u * u * v) +
    b102 * (3.f * w * v * v) +
    b012 * (3.f * u * v * v) +
    b111 * (6.f * w * u * v);
    
    float3 v12 = 2.f * dot(P0P1, N0 + N1) / dot(P0P1, P0P1);
    float3 v23 = 2.f * dot(P1P2, N1 + N2) / dot(P1P2, P1P2);
    float3 v31 = 2.f * dot(P2P0, N2 + N0) / dot(P2P0, P2P0);
    
    float3 h110 = N0 + N1 - v12 * P0P1;
    float3 h011 = N1 + N2 - v23 * P1P2;
    float3 h101 = N2 + N0 - v31 * P2P0;
    
    float3 n010 = normalize(h110);
    float3 n011 = normalize(h011);
    float3 n001 = normalize(h101);
    
    normal = normalize(
    N0 * w * w +
    N1 * u * u +
    N2 * v * v +
    n010 * w * u +
    n011 * u * v +
    n001 * w * v);
#elif defined(TESSELLATION_SMOOTHING_MODE_PHONG)
static inline void scn_smooth_geometry_phong(thread float3 &position, thread float3 &normal, float3 patchCoord, float3 P0, float3 P1, float3 P2, float3 N0, float3 N1, float3 N2)
    float3 P = scn::barycentric_mix(P0, P1, P2, patchCoord);
    
    float3 proj0 = P - dot(P - P0, N0) * N0;
    float3 proj1 = P - dot(P - P1, N1) * N1;
    float3 proj2 = P - dot(P - P2, N2) * N2;
    
    float3 Pproj = scn::barycentric_mix(proj0, proj1, proj2, patchCoord);
    
    const float alpha = 0.75f;
    position = mix(P, Pproj, alpha);
    normal = normalize(scn::barycentric_mix(N0, N1, N2, patchCoord));
#endif // GEOMETRY_SMOOTHING
uniform vec3 CocScaleBias;
uniform sampler2D colorSampler;
uniform sampler2D depthSampler;
uniform vec2 u_inversePixelSize;
varying vec2 v_tcColor0;
varying vec2 v_tcColor1;
varying vec2 v_tcDepth0;
varying vec2 v_tcDepth1;
varying vec2 v_tcDepth2;
varying vec2 v_tcDepth3;
vec4 saturate(vec4 val)
    return clamp(val, vec4(0.), vec4(1.));
void main (void)
    // "rowOfs" reduces how many moves PS2.0 uses to emulate swizzling.
//    vec2 dofRowDelta = vec2(0., 0.25 * invPixelSize.y);
    vec4 dofRowDelta = vec4(0., 1., 2., 3.) * u_inversePixelSize.y * 0.25;
    vec2 rowOfs[4];
    rowOfs[0] = dofRowDelta.xx; // 0,0 useless...
    rowOfs[1] = dofRowDelta.xy;
    rowOfs[2] = dofRowDelta.xz;
    rowOfs[3] = dofRowDelta.xw;
    
    // Use bilinear filtering to average 4 color samples for free.
    vec3 color;
    color  = texture2D( colorSampler, v_tcColor0.xy ).rgb;
    color += texture2D( colorSampler, v_tcColor1.xy ).rgb;
    color += texture2D( colorSampler, v_tcColor0.xy + rowOfs[2] ).rgb;
    color += texture2D( colorSampler, v_tcColor1.xy + rowOfs[2] ).rgb;
    color *= 0.25;
    
    vec4 depth;
    depth[0] = texture2D( depthSampler, v_tcDepth0.xy + rowOfs[0] ).r;
    depth[1] = texture2D( depthSampler, v_tcDepth1.xy + rowOfs[0] ).r;
    depth[2] = texture2D( depthSampler, v_tcDepth2.xy + rowOfs[0] ).r;
    depth[3] = texture2D( depthSampler, v_tcDepth3.xy + rowOfs[0] ).r;
    vec4 coc = abs(depth * CocScaleBias.x + CocScaleBias.y);
    depth[0] = texture2D( depthSampler, v_tcDepth0.xy + rowOfs[1] ).r;
    depth[1] = texture2D( depthSampler, v_tcDepth1.xy + rowOfs[1] ).r;
    depth[2] = texture2D( depthSampler, v_tcDepth2.xy + rowOfs[1] ).r;
    depth[3] = texture2D( depthSampler, v_tcDepth3.xy + rowOfs[1] ).r;
    coc 
 = max(coc, abs(depth * CocScaleBias.x + CocScaleBias.y));
    
    depth[0] = texture2D( depthSampler, v_tcDepth0.xy + rowOfs[2] ).r;
    depth[1] = texture2D( depthSampler, v_tcDepth1.xy + rowOfs[2] ).r;
    depth[2] = texture2D( depthSampler, v_tcDepth2.xy + rowOfs[2] ).r;
    depth[3] = texture2D( depthSampler, v_tcDepth3.xy + rowOfs[2] ).r;
    coc 
 = max(coc, abs(depth * CocScaleBias.x + CocScaleBias.y));
    
    depth[0] = texture2D( depthSampler, v_tcDepth0.xy + rowOfs[3] ).r;
    depth[1] = texture2D( depthSampler, v_tcDepth1.xy + rowOfs[3] ).r;
    depth[2] = texture2D( depthSampler, v_tcDepth2.xy + rowOfs[3] ).r;
    depth[3] = texture2D( depthSampler, v_tcDepth3.xy + rowOfs[3] ).r;
    coc 
 = max(coc, abs(depth * CocScaleBias.x + CocScaleBias.y));
    float maxCoc = max( max( coc.x, coc.y ), max( coc.z, coc.w ) );
    //
    // this pass should be use to mark the zone not to blur = the zone which are in focus
gl_FragColor = vec4(color, maxCoc);
#ifdef ENABLE_CUBE_MAP
uniform samplerCube u_textureSampler0;
uniform float u_fresnelExponent;
varying vec4 v_normal;
#ifdef ENABLE_FOG
uniform vec4 u_fogColor;
#endif
#else // ENABLE_CUBE_MAP
uniform sampler2D u_textureSampler0;
#endif
varying vec4 v_vertexColor;
#ifdef ENABLE_ANIMATION
varying vec3 v_uv0;
varying vec2 v_uv1;
#else
varying vec2 v_uv0;
#endif
#if __VERSION__ > 120 // GL Compatibility Profile
#ifndef texture2D
#define texture2D(tex,coord) texture( tex, coord )
#endif
#define textureCube(tex,coord) texture( tex, coord )
#endif
#ifdef ENABLE_SOFT
uniform sampler2D u_depthSampler0;
uniform vec4 u_softParameters; // x: scale, y: power/contrast, zw : 1/viewPortSize
uniform mat4 u_invProj; // inverse of the projection transform, to reconstruct viewPos from screenPos
varying float v_eyeLinearZ;
float ComputeSoftFactor()
    vec2 normalizedFragCoord = gl_FragCoord.xy * u_softParameters.zw;
float depthValue = texture2D(u_depthSampler0, gl_FragCoord.xy * u_softParameters.zw).x;
    
    vec3 screenPos = vec3(normalizedFragCoord, depthValue);
vec4 viewPos = u_invProj * vec4(screenPos * 2. - 1., 1.);
viewPos /= viewPos.w;
    
    float factor = clamp((v_eyeLinearZ - viewPos.z) * u_softParameters.x ,0. , 1.);
    // Do we really need this pow?
    // factor = pow(factor, u_softParameters.y);
    
    return factor;
#endif
void main(){
#ifdef ENABLE_CUBE_MAP
    vec2 p = v_uv0 * 2. - 1.;
    float r = dot(p,p); // len^2
    vec4 tex = textureCube(u_textureSampler0, v_normal.xyz) * clamp(9.6 - 10. * r, 0., 1.0);
    // fresnel modulation
    tex.rgb *= pow(r, u_fresnelExponent);
#else // ENABLE_CUBE_MAP
#ifdef ENABLE_ANIMATION // belnd between two frames
    vec4 tex = mix(texture2D(u_textureSampler0, v_uv0.xy),
                   texture2D(u_textureSampler0, v_uv1.xy), v_uv0.z);
#else
    vec4 tex = texture2D(u_textureSampler0, v_uv0);
#endif // ENABLE_ANIMATION
#endif // ENABLE_CUBE_MAP
#ifdef ENABLE_SOFT
    tex *= ComputeSoftFactor();
#endif
    
    
#ifdef ENABLE_CUBE_MAP
    gl_FragColor.a = v_vertexColor.a * tex.a; // texture and colors need to be premultiplied
#ifdef ENABLE_FOG
    gl_FragColor.rgb = mix(v_vertexColor.rgb + tex.rgb, u_fogColor.rgb, v_normal.a) * gl_FragColor.a; // texture and colors need to be premultiplied
#else
    gl_FragColor.rgb = (v_vertexColor.rgb + tex.rgb) * gl_FragColor.a; // texture and colors need to be premultiplied
#endif // ENABLE_FOG
#else
    gl_FragColor = v_vertexColor * tex; // texture and colors need to be premultiplied
#endif
#ifndef __SCNMetalDefines__
#define __SCNMetalDefines__
enum {
    SCNVertexSemanticPosition,
    SCNVertexSemanticNormal,
    SCNVertexSemanticTangent,
    SCNVertexSemanticColor,
    SCNVertexSemanticBoneIndices,
    SCNVertexSemanticBoneWeights,
    SCNVertexSemanticTexcoord0,
    SCNVertexSemanticTexcoord1,
    SCNVertexSemanticTexcoord2,
    SCNVertexSemanticTexcoord3,
    SCNVertexSemanticTexcoord4,
    SCNVertexSemanticTexcoord5,
    SCNVertexSemanticTexcoord6,
    SCNVertexSemanticTexcoord7
// This structure hold all the informations that are constant through a render pass
// In a shader modifier, it is given both in vertex and fragment stage through an argument named "scn_frame".
struct SCNSceneBuffer {
    float4x4    viewTransform;
    float4x4    inverseViewTransform; // transform from view space to world space
    float4x4    projectionTransform;
    float4x4    viewProjectionTransform;
    float4x4    viewToCubeTransform; // transform from view space to cube texture space (canonical Y Up space)
    float4x4    lastFrameViewProjectionTransform;
    float4      ambientLightingColor;
    float4
fogColor;
    float3
fogParameters; // x:-1/(end-start) y:1-start*x z:exp
    float2      inverseResolution;
    float       time;
    float       sinTime;
    float       cosTime;
    float       random01;
    float       motionBlurIntensity;
    // new in macOS 10.12 and iOS 10
    float       environmentIntensity;
    float4x4    inverseProjectionTransform;
    float4x4    inverseViewProjectionTransform;
    // new in macOS 10.13 and iOS 11
    float2      nearFar; // x: near, y: far
    float4      viewportSize; // xy:size, zw:origin
    // new in macOS 10.14 and iOS 12
    float4x4    inverseTransposeViewTransform;
    // internal, DO NOT USE
    float4      clusterScale; // w contains z bias
// In custom shaders or in shader modifiers, you also have access to node relative information.
// This is done using an argument named "scn_node", which must be a struct with only the necessary fields
// among the following list:
// float4x4 modelTransform;
// float4x4 inverseModelTransform;
// float4x4 modelViewTransform;
// float4x4 inverseModelViewTransform;
// float4x4 normalTransform; // This is the inverseTransposeModelViewTransform, need for normal transformation
// float4x4 modelViewProjectionTransform;
// float4x4 inverseModelViewProjectionTransform;
// float2x3 boundingBox;
// float2x3 worldBoundingBox;
#endif /* defined(__SCNMetalDefines__) */
attribute vec4 a_position;
uniform vec2 u_inversePixelSize;
varying vec4 v_texCoord;
void main(void)
gl_Position = a_position;
    vec2 tc = (a_position.xy + 1.0) * 0.5;
    vec4 offset = vec4(-0.5, 0.5, -0.5, 0.5);
    v_texCoord = tc.xxyy + offset * u_inversePixelSize.xyxy;
varying vec2 TexCoord;
uniform sampler2D textureSampler0;
uniform vec2 offsets[MAX_SAMPLE];
uniform float weights[MAX_SAMPLE];
uniform int n_sample;
void main (void)
    int i;
    vec4 accum = vec4(0.0);
    for(i=0;i<n_sample;i++){
        accum += texture2D(textureSampler0, TexCoord+offsets[i]) *  weights[i];
    }
gl_FragColor = accum;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>targets</key>
<dict>
<key>VELOCITY</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba16f</string>
<key>scaleFactor</key>
<integer>1</integer>
<key>global</key>
<true/>
<key>clearColor</key>
<string>0. 0. 0. 999999999.</string>
</dict>
</dict>
<key>sequence</key>
<array>
<string>SceneKit_renderScene</string>
</array>
<key>passes</key>
<dict>
<key>SceneKit_renderScene</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
<key>color1</key>
<string>VELOCITY</string>
<key>depth</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
<key>clearColor</key>
<string>sceneBackground</string>
</dict>
</dict>
</dict>
</dict>
</plist>
  "passes" : {
    "SceneKit_renderSceneFromLight" : {
      "outputs" : {
        "depth" : "SceneKit-spotShadowDepth"
      },
      "depthStates" : {
        "clear" : true
      },
      "isViewDependant" : false,
      "samples" : 1,
      "onlyShadowCasters" : true,
      "pointOfView" : "self",
      "ignoreFloors" : true,
      "draw" : "DRAW_SCENE"
    },
    "SceneKit_applyDeferredShadows" : {
      "outputs" : {
        "color" : "COLOR"
      },
      "inputs" : {
          "light_MVP" : "C3D-light_MVP-symbol",
          "viewTransform" : "C3D-camera_view-symbol",
          "depthSampler" : {
          "target" : "DEPTH",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_kernel" : "C3D-shadowKernel-symbol",
        "lightDepthSampler" : {
          "target" : "SceneKit-spotShadowDepth",
          "sampler" : {
            "wrapS" : "clamp",
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest",
            "wrapT" : "clamp"
          }
        },
        "shadowColor" : "C3D-shadowColor-symbol",
        "colorSampler" : "COLOR",
        "camera_MVP_i" : "C3D-camera_MVP_i-symbol",
        "cascadeScale" : "C3D-cascadeScale-symbol",
        "cascadeBias" : "C3D-cascadeBias-symbol",
        "cascadeDebugFactor" : "C3D-shadowCascadeDebugFactor-symbol",
        "u_lightPos" : "C3D-u_lightPos-symbol",
        "u_lightDir" : "C3D-u_lightDir-symbol",
        "shadowRadius" : "C3D-shadowRadius-symbol",
        "u_lightSpotAtt" : "C3D-u_lightSpotAtt-symbol"
      },
      "metalFragmentShader" : "shadowMap_frag",
      "draw" : "DRAW_QUAD",
      "clientProgram" : false,
      "metalVertexShader" : "shadowMap_vert"
    }
  },
  "sequence" : [
    "SceneKit_renderSceneFromLight",
    "SceneKit_applyDeferredShadows"
  ],
  "symbols" : {
    "C3D-u_lightSpotAtt-symbol" : {
      "type" : "vec3"
    },
    "C3D-shadowColor-symbol" : {
      "type" : "vec4"
    },
    "C3D-camera_MVP_i-symbol" : {
      "type" : "mat4"
    },
    "C3D-camera_view-symbol" : {
      "type" : "mat4"
    },
    "C3D-u_lightPos-symbol" : {
      "type" : "vec3"
    },
    "C3D-zMapFactor-symbol" : {
      "type" : "float"
    },
    "C3D-light_MVP-symbol" : {
      "type" : "mat4"
    },
    "C3D-shadowRadius-symbol" : {
      "type" : "float"
    },
    "C3D-shadowCascadeDebugFactor-symbol" : {
      "type" : "float"
    },
    "C3D-shadowKernel-symbol" : {
      "type" : "vec4[128]"
    },
    "C3D-cascadeScale-symbol" : {
      "type" : "vec3[4]"
    },
    "C3D-cascadeBias-symbol" : {
      "type" : "vec3[4]"
    },
    "C3D-u_lightDir-symbol" : {
      "type" : "vec3"
    }
  },
  "targets" : {
    "SceneKit-spotShadowDepth" : {
      "type" : "depth"
    }
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>Outline-pickedObjects</string>
<string>Outline-outline</string>
<string>Outline-max</string>
</array>
<key>passes</key>
<dict>
<key>Outline-pickedObjects</key>
<dict>
<key>inputs</key>
<dict>
<key>a_position</key>
<string>a_position-symbol</string>
<key>u_modelViewProjectionTransform</key>
<string>u_modelViewProjectionTransform-symbol</string>
<key>u_modelTransform</key>
<string>u_modelTransform-symbol</string>
</dict>
<key>outputs</key>
<dict>
<key>depth</key>
<string>pickedObjects-depth</string>
<key>color</key>
<string>pickedObjects-color</string>
</dict>
<key>draw</key>
<string>DRAW_NODES</string>
<key>samples</key>
<integer>1</integer>
<key>overridesCustomProgram</key>
<true/>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
<key>clearColor</key>
<string>&quot;0. 0. 0. 1.&quot;</string>
</dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
</dict>
<key>Outline-outline</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>outline-color</string>
</dict>
<key>inputs</key>
<dict>
<key>a_position</key>
<string>a_position-symbol</string>
<key>pickedColorBuffer</key>
<string>pickedObjects-color</string>
<key>pickedDepthBuffer</key>
<string>pickedObjects-depth</string>
<key>colorBuffer</key>
<string>COLOR</string>
<key>depthBuffer</key>
<string>DEPTH</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-OutlineRetina</string>
<key>clientProgram</key>
<string>NO</string>
<key>metalVertexShader</key>
<string>outlineRetina_vert</string>
<key>metalFragmentShader</key>
<string>outlineRetina_frag</string>
</dict>
<key>Outline-max</key>
<dict>
<key>outputs</key>
<dict>
<key>color</key>
<string>COLOR</string>
</dict>
<key>inputs</key>
<dict>
<key>a_position</key>
<string>a_position-symbol</string>
<key>outlineColorBuffer</key>
<string>outline-color</string>
<key>colorBuffer</key>
<string>COLOR</string>
</dict>
<key>draw</key>
<string>DRAW_QUAD</string>
<key>program</key>
<string>C3D-OutlineMax</string>
<key>clientProgram</key>
<string>NO</string>
<key>metalVertexShader</key>
<string>outlineMax_vert</string>
<key>metalFragmentShader</key>
<string>outlineMax_frag</string>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>a_position-symbol</key>
<dict>
<key>semantic</key>
<string>vertex</string>
</dict>
<key>u_modelViewProjectionTransform-symbol</key>
<dict>
<key>semantic</key>
<string>modelViewProjectionTransform</string>
</dict>
<key>u_modelTransform-symbol</key>
<dict>
<key>semantic</key>
<string>modelTransform</string>
</dict>
<key>color</key>
<dict>
<key>semantic</key>
<string>none</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>outline-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>r8</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
<key>pickedObjects-depth</key>
<dict>
<key>type</key>
<string>depth</string>
<key>format</key>
<string>depth24</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
<key>pickedObjects-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>r8</string>
<key>scaleFactor</key>
<integer>1</integer>
</dict>
</dict>
</dict>
</plist>
uniform sampler2D colorBuffer;
uniform sampler2D pickedColorBuffer;
uniform sampler2D depthBuffer;
uniform sampler2D pickedDepthBuffer;
uniform vec2 u_inverseResolution;
varying vec2 uv;
void main()
    //Sobel
    float texels[9];
    texels[0] = texture2D(pickedColorBuffer, uv + vec2(-u_inverseResolution.x, -u_inverseResolution.y)).r;
    texels[1] = texture2D(pickedColorBuffer, uv + vec2(                0., -u_inverseResolution.y)).r;
    texels[2] = texture2D(pickedColorBuffer, uv + vec2( u_inverseResolution.x, -u_inverseResolution.y)).r;
    
    texels[3] = texture2D(pickedColorBuffer, uv + vec2(-u_inverseResolution.x, 0.)).r;
    //texels[4] = texture2D(pickedColorBuffer, uv + vec2(                0., 0.)).r;
    texels[5] = texture2D(pickedColorBuffer, uv + vec2( u_inverseResolution.x, 0.)).r;
    
    texels[6] = texture2D(pickedColorBuffer, uv + vec2(-u_inverseResolution.x, u_inverseResolution.y)).r;
    texels[7] = texture2D(pickedColorBuffer, uv + vec2(                0., u_inverseResolution.y)).r;
    texels[8] = texture2D(pickedColorBuffer, uv + vec2( u_inverseResolution.x, u_inverseResolution.y)).r;
    
    
    //A little hack for multi-objects selection
    vec3 a = vec3(texels[0],texels[3],texels[6]);
    vec3 b = vec3(texels[2],texels[5],texels[7]);
    bvec3 tmp = equal(a,b);
    vec3 retLin = mix( vec3(tmp), vec3(not(tmp)), vec3(equal(b,vec3(0.))) );
    
    
    a = vec3(texels[0],texels[1],texels[2]);
    b = vec3(texels[6],texels[7],texels[8]);
    tmp = equal(a,b);
    vec3 retCol = mix( vec3(tmp), vec3(not(tmp)), vec3(equal(b,vec3(0.))) );
    
    
    vec4 last = step(vec4(0.002), vec4(texels[5],texels[7],texels[8], min(retLin.x, retCol.x)) );
    
    //Get magnitude of the sobel filters
    float x = last.w + 2.*retLin.y + retLin.z - retCol.z - 2.*last.x - last.z;
    float y = last.w + 2.*retCol.y + retCol.z - retLin.z- 2.*last.y - last.z;
    float magnitude = sqrt( x*x + y*y );
    
    
    
    //Get min depth around 5x5 pixels
    float depth = 1.;
    for(int i=-2; i<3; i++)
    for(int j=-2; j<3; j++)
        depth = min(depth, texture2D(pickedDepthBuffer, uv + u_inverseResolution*vec2(i,j)).r);
    
    
    //Outline color
    vec3 outline = vec3(1.,.6,.2);
    if( texture2D(depthBuffer, uv).x < depth-0.0000001 &&  texture2D(pickedColorBuffer, uv).r > 0.  )
        gl_FragColor = mix( texture2D(colorBuffer, uv), vec4(outline,1.), .25);
    else
        gl_FragColor = mix( texture2D(colorBuffer, uv), vec4(outline,1.), min(magnitude/4.,1.) );
// In model space, must stay in it
struct SCNShaderGeometry
vec4 position;
vec3 normal;
vec4 tangent;
vec4 color;
vec2 texcoords[8]; // MAX_UV
} _geometry;
uniform sampler2D colorBuffer;
uniform sampler2D pickedColorBuffer;
uniform sampler2D depthBuffer;
uniform sampler2D pickedDepthBuffer;
uniform vec2 u_inverseResolution;
varying vec2 uv;
void main()
    //Sobel
    float texels[9];
    texels[0] = texture2D(pickedColorBuffer, uv + vec2(-u_inverseResolution.x, -u_inverseResolution.y)).r;
    texels[1] = texture2D(pickedColorBuffer, uv + vec2(                0., -u_inverseResolution.y)).r;
    texels[2] = texture2D(pickedColorBuffer, uv + vec2( u_inverseResolution.x, -u_inverseResolution.y)).r;
    
    texels[3] = texture2D(pickedColorBuffer, uv + vec2(-u_inverseResolution.x, 0.)).r;
    //texels[4] = texture2D(pickedColorBuffer, uv + vec2(                0., 0.)).r;
    texels[5] = texture2D(pickedColorBuffer, uv + vec2( u_inverseResolution.x, 0.)).r;
    
    texels[6] = texture2D(pickedColorBuffer, uv + vec2(-u_inverseResolution.x, u_inverseResolution.y)).r;
    texels[7] = texture2D(pickedColorBuffer, uv + vec2(                0., u_inverseResolution.y)).r;
    texels[8] = texture2D(pickedColorBuffer, uv + vec2( u_inverseResolution.x, u_inverseResolution.y)).r;
    
    
    //A little hack for multi-objects selection
    vec3 a = vec3(texels[0],texels[3],texels[6]);
    vec3 b = vec3(texels[2],texels[5],texels[7]);
    bvec3 tmp = equal(a,b);
    vec3 retLin = mix( vec3(tmp), vec3(not(tmp)), vec3(equal(b,vec3(0.))) );
    
    
    a = vec3(texels[0],texels[1],texels[2]);
    b = vec3(texels[6],texels[7],texels[8]);
    tmp = equal(a,b);
    vec3 retCol = mix( vec3(tmp), vec3(not(tmp)), vec3(equal(b,vec3(0.))) );
    
    
    vec4 last = step(vec4(0.002), vec4(texels[5],texels[7],texels[8], min(retLin.x, retCol.x)) );
    
    //Get magnitude of the sobel filters
    float x = last.w + 2.*retLin.y + retLin.z - retCol.z - 2.*last.x - last.z;
    float y = last.w + 2.*retCol.y + retCol.z - retLin.z- 2.*last.y - last.z;
    float magnitude = sqrt( x*x + y*y );
    
    
    
    //Get min depth around 3x3 pixels
    float depth = 1.;
    for(int i=-1; i<2; i++)
    for(int j=-1; j<2; j++)
        depth = min(depth, texture2D(pickedDepthBuffer, uv + u_inverseResolution*vec2(i,j)).r);
    
    
    //Outline color
    if( texture2D(depthBuffer, uv).x < depth-0.0000001 &&  texture2D(pickedColorBuffer, uv).r > 0.  )
        gl_FragColor = vec4(.25);
    else
        gl_FragColor = vec4( min(magnitude/4.,1.) );
    
// blend factors {One, InverseSourceAlpha}
uniform sampler2D u_textureSampler0;
varying vec2 v_uv0;
varying vec4 v_vertexColor;
void main(){
    vec4 tex = texture2D(u_textureSampler0, v_uv0);
    tex.rgb *= tex.a; // this premultiplied could be done upfront?
    
    vec4 col = v_vertexColor * tex;
gl_FragColor = vec4(col);
uniform mat4 u_modelViewProjectionTransform;
attribute vec3 a_position;
attribute vec4 a_color;
attribute vec2 a_texCoord0;
varying vec4 v_vertexColor;
varying vec2 v_texCoord;
void main()
    gl_Position = u_modelViewProjectionTransform * vec4(a_position, 1.);
    v_vertexColor = a_color;
    v_texCoord = a_texCoord0;
normalTexcoord
tangent
ambientTexcoord
diffuseTexcoord
specularTexcoord
emissionTexcoord
selfIlluminationTexcoord
multiplyTexcoord
transparentTexcoord
displacementTexcoord
fresnel
_surface.%@
u_%@Texture
_geometry.normal
_geometry.tangent
_geometry.color
C3DShaderModifier
<C3DShaderModifier %p language:%s, entryPoint:"%d" flags:%x
Metal
GLSL
  declaration : %@
  arguments : %@
  varyings : %@
  code : %@
USE_EMISSIVETEXCOORD
USE_AMBIENTTEXCOORD
USE_DIFFUSETEXCOORD
USE_SPECULARTEXCOORD
USE_REFLECTIVETEXCOORD
USE_TRANSPARENTTEXCOORD
USE_FILTERTEXCOORD
USE_NORMALTEXCOORD
USE_METALNESSTEXCOORD
USE_ROUGHNESSTEXCOORD
u_%@TextureMatrix
{_SCNVector4=dddd}
{_SCNVector3=ddd}
is%@%@
v@:^v
^v@:
v@:f
v@:i
v@:B
v@:c
v@:d
v@:{CGPoint=dd}
{CGPoint=dd}@:
v@:{SCNVector3=fff}
{SCNVector3=fff}@:
v@:{SCNVector4=ffff}
{SCNVector4=ffff}@:
v@:{SCNMatrix4=ffffffffffffffff}
{SCNMatrix4=ffffffffffffffff}@:
v@:{CATransform3D=ffffffffffffffff}
{CATransform3D=ffffffffffffffff}@:
v@:{C3DMatrix3x3=fffffffff}
{C3DMatrix3x3=fffffffff}@:
v@:{C3DColor4=ffff}
{C3DColor4=ffff}@:
v@:s
v@:C
v@:S
#pragma opaque
#pragma transparent
#pragma declaration
#pragma arguments
#pragma varyings
#pragma body
scn_node
scn_frame
C3DConstraintController
<C3DConstraintController>
C3DConstraint
<C3DConstraint %@ %p>
C3DConstraintLookAt
<C3DConstraintLookAt %p>
C3DConstraintBillboard
<C3DConstraintBillboard %p>
C3DConstraintConstantScale
<C3DConstraintConstantScale>
C3DConstraintProcedural
<C3DConstraintProcedural>
C3DConstraintIK
<C3DConstraintIK %p>
C3DConstraintDistance
<C3DConstraintDistance>
maximumDistance
C3DConstraintAcceleration
maximumLinearAcceleration
maximumLinearVelocity
decelerationDistance
C3DConstraintReplicator
<C3DConstraintReplicator>
orientationOffset
positionOffset
scaleOffset
wheel
C3DConstraintManager
<C3DConstraintManagerRef>
__controller
superClass
C3DModelTarget
<C3DModelTarget>
C3DModelValueStorageItem
<C3DModelValueStorageItem %p>
C3DModelValueStorage
<C3DModelValueStorage>
targetDirection
replicatesOrientation
replicatesScale
replicatesPosition
collisionCategoryBitMask
bias
T@"<SCNAvoidOccluderConstraintDelegate>",N
occluderCategoryBitMask
freeAxes
preserveScale
TQ,N,V_freeAxes
screenSpace
v36@?0^{__C3DConstraint={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}8^v16^{__C3DModelTarget={__CFRuntimeBase=QAQ}^v^vscCCB^?^?}24f32
joint
T@"SCNNode",W,N,Vjoint
maxAllowedRotationAngle
Td,N,VmaxAllowedRotationAngle
node%d
angle%d
ikTarget
C3DTransformTree
<C3DTransformTree %p>
ds_default_vert_N
ds_default_frag_N
ds_default_vert
ds_default_frag
IESNA:LM-63-1995
IESNA91
IESNA:LM-63-2002
TILT=NONE
TILT= NONE
TILT =NONE
TILT = NONE
TILT=
TILT =
C3DAnimationEvents
<C3DAnimationEvents>
v16@?0^v8
C3DRendererElementStore
<C3DRendererElementStore %p>
C3DIndexStore
<C3DIndexStore>
C3DAllocator
<C3DAllocator>
__C3DMeshElementCreateRenderablePrimitiveTypeCopy
C3DAnimatableParamController
<C3DAnimatableParamController>
_timesToRepeat
_timesRepeated
_repeatedAction
_forever
__allocateChunk
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Engine/Allocator/C3DStackAllocator.cpp
C3DStackAllocator
<C3DStackAllocator>
C3DFXMetalProgram
<C3DFXMetalProgram %p [vertex:`%@` fragment:`%@` macros:%@]>
T@?,C,N,V_block
frequency
Tq,N,V_frequency
T@"NSString",C,N,V_semantic
T@"NSDictionary",&,N,V_options
SCNProgramDidChangeNotification
parameter
sourceFile
semanticInfos
draw
ignoreFloors
onlyShadowCasters
onlyMovableNodes
hasConstantAlpha
installViewport
isViewDependant
overridesCustomProgram
layerMask
includeCategoryMask
excludeCategoryMask
viewport
samples
colorStates
clearColor
sceneBackground
clear
depthStates
enableWrite
enableRead
func
stencilStates
behavior
backFaceBehavior
blendStates
C3DFXPassInput
<C3DFXPassInput %@>
symbolName
uniformName
C3DFXPass
<C3DFXPass %@>
nameToInput
draw_scene
draw_node
draw_nodes
draw_geometry
draw_quad
metal_custom
draw_none
custom
preDraw
preFX
preToneMap
postFX
front
cullNone
back
never
always
equal
notEqual
less
lessEqual
greater
greaterEqual
depthFail
fail
pass
readMask
writeMask
referenceValue
keep
zero
replace
increment
decrement
invert
incrementWrap
decrementWrap
colorSrc
colorDst
alphaSrc
alphaDst
colorOp
alphaOp
srcColor
oneMinusSrcColor
srcAlpha
oneMinusSrcAlpha
dstColor
oneMinusDstColor
dstAlpha
oneMinusDstAlpha
constantColor
oneMinusConstantColor
constantAlpha
oneMinusConstantAlpha
alphaSaturate
substract
reverseSubstract
scaleFactor
mipmapped
%fx%f
texture_rectangle
color0
color1
color2
color3
stencil
format
modelViewProjectionTransform
modelViewTransform
normalTransform
modelViewProjectionInverseTransform
modelViewInverseTransform
modelInverseTransform
viewInverseTransform
projectionInverseTransform
normalInverseTransform
global
persistent
(1 - srcColor)
(1 - srcAlpha)
(1 - dstColor)
(1 - dstAlpha)
blendColor
(1 - blendColor)
blendAlpha
(1 - blendAlpha)
srcAlphaSat
C3DBlendStates
<C3DBlendStates %p targetCount:%d needsBlendColor:%d
  blend:%s col[(src * %@) %@ (dst * %@)] alpha[(src * %@) %@ (dst * %@)]
  blend:%s col[(src * %@) %@ (dst * %@)]
SCNShaderModifierEntryPointGeometry
SCNShaderModifierEntryPointSurface
SCNShaderModifierEntryPointFragment
SCNShaderModifierEntryPointLightingModel
v32@?0@"NSString"8@"SCNBufferBinding"16^B24
v24@?0i8^{__CFString=}12B20
owner
shaderModifiersArgumentsNames
SCNShadableDidCompileNotificationName
issues
shadable
T@"<SCNShadable>",R,N,V_shadable
entryPoint
T@"NSString",R,N,V_entryPoint
effectiveModifier
T@"NSString",R,N,V_effectiveModifier
message
T@"NSString",R,N,V_message
TQ,R,N,V_type
Tq,R,N,V_line
C3DArray
<C3DArray %p:, %d objects>
<%@ | string=%@ extrusionDepth=%.3f> 
-[SCNText set_wantsSeparateGeometryElements:]
-[SCNText setChamferRadius:]
-[SCNText setDiscretizedStraightLineMaxLength:]
-[SCNText setExtrusionDepth:]
-[SCNText setFlatness:]
-[SCNText setPrimitiveType:]
-[SCNText setString:]
-[SCNText setWrapped:]
-[SCNText setContainerFrame:]
discretizedStraightLineMaxLength
useCustomContainerFrame
customContainerFrame
_wantsSeparateGeometryElements
T@"UIFont",&,N
T@"UIBezierPath",C,N
<%@ | path=%@ extrusionDepth=%.3f> 
-[SCNShape setChamferMode:]
-[SCNShape setChamferRadius:]
-[SCNShape setDiscretizedStraightLineMaxLength:]
-[SCNShape setExtrusionDepth:]
-[SCNShape setPrimitiveType:]
C3DSpanAllocator
<C3DSpanAllocator %p>
C3DShape
<C3DShape '%@'>
C3DShapeGeometryValidate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/sources/Core3DRuntime/Core/C3DShapeGeometry.m
CFGetTypeID(geometry) == C3DShapeGeometryGetTypeID()
C3DShapeGeometryMeshForBoundingBox
^{__C3DMesh=}8@?0
C3DShapeGeometryGetBoundingBox
C3DShapeGeometryGetBoundingSphere
C3DShapeGeometry
C3DTextGeometry
levelOfDetail <%p>: geometry:%@ threshold:%f useDistance:%d
mode
mat2x3
scn_frame.invScreenPixelSize
float2x3
btOptimizedBvhNodeData
btQuantizedBvhNodeData
btBvhSubtreeInfoData
btQuantizedBvhFloatData
btCollisionObjectFloatData
Overflow in AABB, object removed from simulation
If you can reproduce this, please email bugs@continuousphysics.com
Please include above information, your Platform, version of OS.
Thanks.
Triangle
btConvexInternalShapeData
Box2d
btTriangleMeshShapeData
BVHTRIANGLEMESH
CapsuleShape
btCapsuleShapeData
btCollisionShapeData
btCompoundShapeChildData
btCompoundShapeData
Compound
btVector3FloatData
btConvexHullShapeData
Convex
ConvexTrimesh
CylinderY
btCylinderShapeData
btPositionAndRadius
btMultiSphereShapeData
MultiSphere
SPHERE
STATICPLANE
btStaticPlaneShapeData
btIntIndexData
btShortIntIndexTripletData
btCharIndexTripletData
btVector3DoubleData
btMeshPartData
btStridingMeshInterfaceData
TRIANGLEMESH
btConeTwistConstraintData
btHingeConstraintFloatData
btPoint2PointConstraintFloatData
btSliderConstraintData
btTypedConstraintData
btDynamicsWorldFloatData
btRigidBodyFloatData
completeTopologyFromFaceValues
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/vtr/fvarLevel.cpp
vSpan._size != 0
getVertexEdgeValues
edgeTopologyMatches(eIndex)
bilinear
catmark
loop
Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.
Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.
Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.
Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.
Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.
prepareComponentTopologySizing
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/topologyRefinerFactory.cpp
baseLevel.getNumFaceEdgesTotal() > 0
baseLevel.getNumEdgeVerticesTotal() > 0
baseLevel.getNumEdgeFacesTotal() > 0
baseLevel.getNumVertexFacesTotal() > 0
baseLevel.getNumVertexEdgesTotal() > 0
Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.
Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.
Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.
Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.
prepareComponentTagsAndSharpness
(schemeRegularInteriorValence == 4) || (schemeRegularInteriorValence == 6)
Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.
MISSING_EDGE_FACES
MISSING_EDGE_VERTS
MISSING_FACE_EDGES
MISSING_FACE_VERTS
MISSING_VERT_FACES
MISSING_VERT_EDGES
FAILED_CORRELATION_FACE_VERT
FAILED_CORRELATION_FACE_EDGE
FAILED_ORIENTATION_INCIDENT_EDGE
FAILED_ORIENTATION_INCIDENT_FACE
FAILED_ORIENTATION_INCIDENT_FACES_EDGES
DEGENERATE_EDGE
NON_MANIFOLD_EDGE
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/vtr/level.cpp
%s - missing face-verts
%s - missing vert-faces
%s - face %d correlation of vert %d failed
%s - missing edge-faces
%s - missing face-edges
%s - face %d correlation of edge %d failed
%s - missing edge-verts
%s - missing vert-edges
%s - edge %d correlation of vert %d failed
%s - vertex %d cannot orient incident faces and edges
%s - vertex %d orientation failure at incident face %d
%s - vertex %d orientation failure at incident edge %d
%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold
%s - edge %d with %d incident faces not tagged non-manifold
completeTopologyFromFaceVertices
(vCount > 0) && (fCount > 0) && (eCount == 0)
_maxValence > 0
orderVertexFacesAndEdges
eCountOrdered == eCount
fCountOrdered == fCount
Refinement
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/vtr/refinement.cpp
(childArg.getDepth() == 0) && (childArg.getNumVertices() == 0)
refine
_parent && _child
populateParentToChildMapping
"Unsupported empty sparse refinement detected in Refinement" == 0
subdivideFVarChannels
_child->_fvarChannels.size() == 0
this->_fvarChannels.size() == 0
markSparseVertexChildren
_parentVertexTag.size() > 0
markSparseEdgeChildren
_parentEdgeTag.size() > 0
No Error
Fatal Error
Coding Error (internal)
Coding Error
Error
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/error.cpp
err!=FAR_NO_ERROR
%s: %s
Warning: %s
estimateAndAllocateChildValues
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/vtr/fvarRefinement.cpp
_refinement.isChildVertexComplete(cVert)
propagateValueTags
propagateValueCreases
_childFVar.hasSmoothBoundaries()
populateChildValuesForEdgeVertex
cVertFaces.size() == cVertFaceSiblings.size()
cVertFaces.size() >= cValueCount
populateChildValuesForVertexVertex
populateFaceVerticesFromParentFaces
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/vtr/triRefinement.cpp
pFaceVerts.size() == 3
pFaceChildren.size() == 4
populateFaceEdgesFromParentFaces
pFaceChildFaces.size() == 4
pFaceChildEdges.size() == 3
populateEdgeVerticesFromParentFaces
pFaceEdges.size() == 3
populateEdgeFacesFromParentFaces
populateVertexFacesFromParentEdges
markSparseFaceChildren
_parentFaceTag.size() > 0
fChildFaces.size() == 4
fChildEdges.size() == 3
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/vtr/quadRefinement.cpp
_splitType == Sdc::SPLIT_TO_QUADS
initializeInventory
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SceneKit_Sim/SceneKit-470.10/lib/libOsd/sources/opensubdiv/far/topologyRefiner.cpp
_levels.size() == 1
Failure in TopologyRefiner::RefineUniform() -- base level is uninitialized.
Failure in TopologyRefiner::RefineUniform() -- previous refinements already applied.
Edge %d specified to be sharp does not exist (%d, %d)
Vertex %d specified to be sharp does not exist
Error: C3DMeshCreateTextFrame: C3DTextFrameRef object is NULL, will create NULL mesh
Error: type for key %@ is switching from %@ to %@, this will lead to improper animation
Error: unabled to create a read stream at %@
Error: failed to load %@ - unknown file format.
Error: COLLADA files are not supported on this platform.
Error: no file found at URL %@
Error: ParticleSystem: mismatch in meshes and meshElements
Error: Color deserialize: could not read the float array
Error: Color deserialize: no color or no deserialized data
Error: Geometry deserialization: cannot find the mesh ID
Error: Geometry deserialization: cannot find the specified mesh
Error: Geometry deserialization: cannot find the specified material
Warning: _C3DGeometryFinalizeDeserialization - material ID of 0 is unexpected
Error: cannot generate points : mismatch between vertices and normals count
Error: Cannot use volume generation on a generic mesh. fallbacking on surface
Error: Could not deserialize the property %@ in the serialized effect %@
Error: C3DImageToMDLTexture not supported for image 3D
Warning: Failed to create cubemap from Model I/O texture
Warning: Warning: unable to flip non-float2 texture coordinates, skipping
Error: unknown MKGeometryType
Error: a MDLObject has more than 1 child mesh - not supported
Error: failed to find MKMaterial corresponding SCNMaterial
Error: Unknown Model I/O semantic %@
Error: C3DMeshElementCreateByMergingElements - strip not supported
Error: C3DMeshElementCreateByMergingElements - merging elements with different byte per index
Warning: %s does not support non-renderable topologies.
Error: C3DMeshElementGetIndexCount:primitive type not handled
Error: unexpected vertex count
Error: Mesh element deserialization: no faces count
Error: Mesh element deserialization: no mesh element type
Error: Mesh element deserialization: no bytes per index
Error: Could not read the indexes
Error: Mesh element deserialization: no serialized indices
Warning: Unknown mesh element type %@, assuming triangles array.
Error: C3DMeshElementSetPrimitives invalid index buffer size
Error: __readIndexInBuffer - index (%u) out of bounds (%lu)
Warning: unlock not locked ressource
Error: C3DMeshSubdivide inconsistency
Warning: try to preload a geometry with no mesh
Error: WARNING: NULL data in mesh source (warming geometry)
Error: Cannot generate tangents without valid positions
Error: Cannot generate valid tangents without valid texture coordinates
Error: Cannot generate valid tangents without valid normals
Error: invalid geometry detected - skip C3DCreateTangentsWithGeometryOptimized
Error: target mesh has a different number of vertices (%d != %d)
Error: Cannot generate tangents without positions
Error: Cannot generate tangents without texture coordinates
Error: error in C3DMeshCreateTangentsIfNeeded
Warning: Cannot create an interleaved copy, count mismatch
Error: Given sources must be of the same length for interval list creation
Warning: __MergeMeshSources unknown source type
Error: C3DSourceAccessorCopyDataToAccessor failed
Warning: C3DUnifyNormalsFromGeometry can only process triangles and polygons
Warning: C3DUnifyNormalsFromGeometry empty indices
Error: failed to load audio source at %@
Error: can't archive audio data directly
Error: inconsistency in lru list
Error: inconsistency in lru list (2)
Error: SCNTextureLayerSource::textureProxy -> no layer
Welcome to SceneKit 470.10 (Feb 10 2019 21:49:44)
Error: can't share a SCNPhysicsField is already attached to a SCNNode
Error: object %@ doesn't conform to the copying protocol
Error: invalid ref count for entity %@
Error: didAddToPhysicsWorld - can't share a physics behavior to multiple world
Error: SCNTextureSpriteKitSource::textureProxy -> no scene
Error: Morph: target vertex count do not match base vertex count (%d != %d)
Error: MeshSource packing only supports non interleaved float sources
Error: Conversion from other types than float is not supported
Error: Conversion of an interleaved source is not supported, please convert your sources before interleaving
Error: C3DMeshSourceCreateCopyWithComponentsBaseType: unsupported type
Error: Conversion from %@ to %@ to is not supported
Error: no meshSource deserialize => semantic in mesh source
Error: _C3DMeshSourceCopyPropertyList unsupported semantic
Warning: fail to setup the animation - won't be added to the animation stack
Error: unable to resolve target keypath: %@(%@)
Error: trying to bind two incompatible keypath: %@(%@) -> %@(%@)
Error: _resolveAnimationGroupTargets - can't find common ancessor
Error: C3DKeyframeControllerSetKeyframeAtIndex - time is NaN
Error: C3DKeyframeControllerRef - index out of bounds
Error: failed to deserialize animation data
Error: _C3DKeyframeControllerFlattenKeyframeData unexpected value
Error: _C3DKeyframeControllerCreateKeyframeArray unknown key type
Warning: _C3DKeyDistance - can't compute key distance for type %d
Error: C3DFXTechniqueAppendPass out of capacity
Error: C3DFXTechniqueSetValueForSymbol - expect an image for paramName %@
Error: C3DFXTechniqueSetValueForSymbol - unknown param named %@
Error: C3DFXTechniqueGetValueForSymbol - unknown param named %@
Error: invalue description for input named %@ - expect a dictionary
Error: C3DFXTechniqueCompile - invalid description (sequence missing or empty) %@
Info: pass named %@ appears to be useless - skipping
Warning: Unknown render buffer format %hhu
Error: C3DES2SlotToAttachmentID : unknown slot
Error: _C3DKeyframedAnimationInitWithPropertyList plist invalid
Error: can't set a property (%s::%d) on the presentation instance %@ - ignoring
Error: attempt to add a null animation player on %@
Error: attempt to add a null animation on %@
Error: _applyCIFilter can't fint render target named SceneKit-CI-nodetree-color
Warning: CIFilter should have been clipped by the culling
Warning: CIFilter should have been clipped by the culling (2)
Warning: changing the content of a physics shape is not expected
Info: Non triangle list element type not yet supported in physics shape generation
Error: vertex format not supported for physics shape creation (%d)
Warning: Cannot create convex hull for entity %@
Error: Compound shapes cannot be created without shapes
Warning: SCNPhysicsShape does not support a SCNCone with TopRadius != 0.0
Warning: Physics shape construction does not support meshes with positions value type different from double or float. (%d)
Error: Cannot build cubemap from array of images because image at index %d is NULL
Error: Cannot build cubemap from array of images because image at index %d is not square: %fx%f
Error: Cannot build cubemap from array of images because image at index %d (%fx%f) does not have the expected size (%zux%zu)
Error: Cannot build cubemap from array of images because conversion to CGImageRef of image at index %d failed
Error: Cannot build column cubemap from non-cubemap image
Warning: Failed to create bitmap context for CG image %@
Info: FixIncorrectPremultiply %@ time %u x %u : %fms
Error: Unknown cubemap image type
Error: Cannot support rotation layout for compressed texture
Error: failed to load image with description: %@
Error: _C3DImageCopyPropertyList error retrieving path
Error: Failed to load : %@
Error: unable to get a CGImageRef from image
Warning: While reading a texture sampler: could not read %@ (serializedData: %@), using the default value %d instead
Error: Could not serialize an integer
Info: Reload Shaders
Warning: Character should already have a body
Warning: KTX file seems too small or is not a KTX
Error: Only big endian ktx are supported
Error: Only compressed ktx are supported
Error: Unsupported format in KTX file
Warning: Compression type %d not supported
Error: overflow reading mip %d (%d > %d)
Error: C3DRendererContextSetupResidentMeshSourceAtLocation - double not supported
Error: C3DRendererContextSetupResidentMeshSourceAtLocation:not handling type, using float as default
Error: C3DRendererContextCreateProgramObjectForProgram : missing vertex shader
Error: C3DRendererContextCreateProgramObjectForProgram : missing fragment shader
Error: C3DRendererContextCreateProgramObjectForProgram metal program unsupported
Error: C3DRendererContextCreateProgramObjectForProgram unsupported program
Warning: Trying to delete an empty or already released VBO
Error: image copy did fail: %@
Error: C3DRendererContextSetupFramebuffer invoked twice on a Framebuffer
Warning: C3DRendererContextInferTextureTargetForImageTypeAndTextureSampler: called with kC3DTextureUntype type should be resolved before calling it, using GL_TEXTURE_2D as fallback
Error: Physically based lighting model is not supported by the OpenGL renderer, using Phong instead
Error: C3DRendererContextCreateBufferObjectForMeshSource - mesh source has no data
Error: C3DRendererContextBindMeshElement unsupported byte per index (%d)
Error: __FillProgramObjectLocations uniform index out of bounds
Error: Cannot load image %@.
Error: For best performance when using OpenGL, consider adding the `SCNDisableLinearSpaceRendering` and `SCNDisableWideGamut` keys with a bool value of `YES` to your app's Info.plist
Error: C3DRendererCreateTextureWithImage : error while getting bitmap bytes
Error: _createTextureForRenderTarget - fbo size is zero
Error: _createRBOForRenderTargetDescription - fbo size is zero
Error: Max number of texture unit (%d) is reached - can't bind a new texture
Error: We do not handle property %d to get the program attribute enum for the texture (using default: diffuse)
Error: __CreateMeshElement unexpected byte per index
Error: ParticleSystem shaders missing : %@
Error: unsupported conversion %@ -> float4
Error: inconsistency - material count doesn't match - can't diff reference node
Error: inconsistency - material has custom properties - can't diff reference node
Error: inconsistency - hierarchy doesn't match - can't diff reference node
Error: inconsistency - hierarchy changed - can't diff reference node
Error: failed to parse key path %@ - missing '['
Error: failed to parse key path %@ - missing ']'
Error: failed to evaluate key path %@ - material index %d out of bounds (%d)
Error: failed to locate scene reference %@
Error: failed to resolve referenced scene (%@) cycle detected
Error: referenced animations can't be resolved without a SCNAssetCatalog
Error: referenced actions can't be resolved without a SCNAssetCatalog
Warning: Slider can only process triangles.
Warning: Occluder can only process triangles.
Error: C3DResourceManagerMakeProgramResident failed to compile program - fallback on default program
Error: rendererContext is not tracked by the resource manager
Error: __ResourceManagerDeleteTexture: texture to be deleted not found, bail out
Error: _C3DResourceManagerDeleteTexture source does not match to any stored texture (no texture samplers associated)
Error: _C3DResourceManagerDeleteTexture can't find image source
Error: Failed to load texture named %@ : %@
Warning: Warning _lightNodes not NULL in C3DEnginePipelineSetup
Error: unexpected renderer element with no material/technique/program
Warning: C3DTriangle3BarycentricCoordinates: unable to solve the equation
Error: C3DRendererContextSetValueUniformAtLocation not implemented for this type (%d) yet
Error: uniform has incorrect type
Error: unable to create the shader cache folder at %@ (%@)
Error: C3DBaseTypeForCFNumberType: Type not supported
Error: C3DConvertToPlatformIndependentData - archiving pointers makes no sense
Error: C3DConvertToPlatformIndependentData - Type not supported
Error: C3DConvertFromPlatformIndependentData: Not enough room for the specified count & stride to read
Error: C3DConvertFromPlatformIndependentData: Not enough room for the specified count & stride to write
Error: C3DConvertFromPlatformIndependentData - Type not supported
Warning: C3DBaseTypeFromDescription - signed/unsigned ambiguity
Error: C3DBaseTypeFromDescription - Type not supported
Error: C3DAddBaseType - type %d can't be added
Error: C3DAddBaseType - addition of half float not supported
Error: C3DAddBaseType - unknown type
Error: C3DSubBaseType - type %d can't be substracted
Error: C3DSubBaseType - substraction of half float not supported
Error: C3DSubBaseType - unknown type
Error: Conversion to C string failed
Warning: C3DParseVersionNumber - No version found
Assertion failed [comparisonDepth<=comparisonMaxCount] too many nested macros in shader
Error: failed to load resource named %@
Error: failed to load dictionary named %@
Error: failed to load json named %@
Error: failed to load json named %@ (reason: %@)
Info: linear rendering forced to %d
Error: Could not deserialize a number array (nil buffer or serialized data)
Error: Could not deserialize a number (%@) in a number array
Error: Could not deserialize a number array (unexpected type)
Warning: C3DBaseTypeFromString: unknown type name '%@'
Warning: operator incorreclty parsed : %@
Error: unsupported SH order
Error: SH order unsupported : %d
Error: _buildTetrahedrons - failed with first tetrahedron
Error: tetrahedrisation: index out of bounds
Error: No function %@ in the common profile %@
Error: Could not deserialize the color %@
Error: C3DEffectCommonProfile DeserializeColor: No property for the key %@
Error: Common profile deserialization: could not read the property %@
Error: Common profile deserialization: property found for the key %@
Error: Could not deserialize the texture sampler %@
Error: Cannot find the specified image
Error: Cannot find the image ID for the key %@ in the dictionary %@
Error: orphan effect common profile detected
Warning: __OpacityFromColorSlot:unexpected transparency mode %d
Error: Point of view has custom projection.
Error: C3DMeshSourceAppendVector3 - Type not supported
Error: C3DMeshSourceAppendVector2 - Type not supported
Error: C3DMeshSourceCreate: unsupported type
Error: C3DMeshElementEditorCreateWithMeshElement: mesh element is not a triangle array
Error: _C3DMeshElementEditorSetIndex unknown bytes per index
Error: C3DMeshElementEditorSubdivideTriangleAtIndex: triangleIndex out of bounds
Error: set transform not implemented on %@
Error: set world transform not implemented on %@
Error: set position not implemented on %@
Error: Index %ld out of range bounds [0...%ld]
Error: Index %ld out of bounds [0...%ld]
Error: unable to update the physics shape of %@
Warning: cannot change collision bit masks without physics world
Error: cannot apply force on a body that is not attached to a SCNNode
Error: cannot clear forces on a body that is not attached to a SCNNode
Error: cannot attach a body to a null node %p
Error: C3DSimpleAnimationEvaluate - invalid evaluation function
Error: _C3DSimpleAnimationInitWithPropertyList - no base type
Error: Failed to load IES profile : %@
Error: While deserializing a light: could not decode the number for the key %@ (serializedData : %@)
Error: While deserializing a light: no value for the key %@ (serializedData : %@)
Error: While deserializing a light: could not decode the color
Error: While deserializing a light: could not decode the shadowcolor
Info: invalid zNear value (0) set to camera
Error: C3DProjectionInfosUnproject : invalid viewport dimension
Error: error in C3DProjectionInfosUnproject
Info: loaded camera has an invalid zNear value (0)
Warning: C3DNodeGetWorldMatrix - no transform tree
Error: inconsistency in scene graph found in C3DNode finalize
Error: Could not read a matrix (serializedData: %@)
Error: Could not read a quaternion
Error: Could not read Euler
Error: Could not read the axis angle
Error: Could not read a matrix
Error: No data present to deserialize a rotation (serialized data : %@)
Error: Could not read a transform, position, scale and rotation have to be present (serializedData: %@)
Error: loading pivot from compressed collada file is not supported anymore - use SCN file format instead
Error: Node deserialization: cannot retrieve the object ID
Warning: Node<->attribute inconsistency finalizing deserialization
Error: Node deserialization: cannot retrieve the lightmap image ID
Error: Node deserialization: cannot retrieve the lightmap image
Warning: Mesh '%@' : sources of redundant semantic '%@' will be ignored in rendering
Error: Mesh deserialization: cannot find the sources in %@
Info: Mesh deserialization: Skipped a source that will be recreated at runtime : %@
Error: Mesh deserialization: cannot find the specified source
Error: Mesh deserialization: cannot deserialize a source
Error: Mesh deserialization: cannot init a mesh element
Warning: Can only convert to lines or points element type
Warning: Can only convert from triangle array to another element type
Error: Cannot find the specified primary source
Error: Cannot find the specified source
Error: Could not deserialize a source locator in %@
Warning: Can't add two position sources
Error: __C3DMeshCopy - unable to resolve interleaved mesh
Warning: Could not deserialize an effect
Warning: C3DSceneSetRootNode - old root node seems to be already connected to another scene
Warning: RootNode is not retained by the scene
Error: Could not read the animations manager
Error: C3DSceneRef _copySerializedHierarchy: lib entry not found
Warning: Some nodes failed to be deserialized
Error: ... and we do not even have a root node, so bailing out
Error: Scene deserialization : cannot finalize the deserialization of the animation manager
Error: Library could not remap the ID %@
Error: _deserializeHierarchy: could not find the specified node in the library
Error: _deserializeHierarchy: no nodeID specified!
Error: convexSweep only works with convex shapes
Warning: PhysicsWarn: %s
Error: failed to create a GL context
Warning: SCNCreateGLContext - failed to share our context with SpriteKit - fallback on a private context
Warning: Should not register a node without light to the light system
Error: Node is already registered to the light system
Error: Invalid runtime light index
Error: The shadow node is not registered
Error: Too many shadow caster lights at once. Limit is %d
Error: Too many effective lights at once. Limit is %d
Error: Missing shadow %@
Warning: can't prepare shadable animation with path %@
Error: Material : %@ is not an animatable path
Error: referenced particle systems can't be resolved without a SCNAssetCatalog
Error: particle reference name is nil
Error: animation class %@ is not supported for particle systems
Error: Can't introspect type of property %@
Error: unknown particle controller input mode
Error: attempt to add a parent node as a child node
Error: removeChildNodeAtIndex - index out of bounds
Error: error in removeFromParentNode : inconsistent tree
Error: removing the root node of a scene from its scene is not allowed
Error: Error: physicsBody %@ 's owner (%@) should be %@
Error: attempt to add a null particle system on %@
Error: attempt to add a null audio player on %@
Error: error while transposing skeleton or morph target
Error: error while transposing animations to cloned tree
Error: [SCNScene root] is deprecated, use rootNode instead
Error: _subnodeFromIndexPath - invalid keypath
Error: %@ is not in a scene yet
Warning: failed to load scene at %@
Error: failed to unarchive SCNScene - (secureCoding compliance issue?)
Error: SCNRenderer::init - no engine context
Warning: _deleteGLFramebuffer - No context!
Warning: _prepareGLRenderTarget - No context!
Error: Failed to bind EAGLDrawable: %@ to GL_RENDERBUFFER
Error: failed to create a framebuffer
Error: autoenablesDefaultLighting: renderer has no context
Error: setAutoenablesDefaultLighting: renderer has no context
Error: SCNRenderer::setTechnique - no engine available yet - ignoring
Error: prepareObject:shouldAbortBlock renderer has no GL context
Error: glError before rendering SceneKit contents: %x
Warning: createSnapshot: no GL context
Error: Light probe generation not supported without Metal support
Error: unknown light type %@
Error: SCNEncodeAnimations unknown animation: %@
Error: can't deserialize animation %@
Error: failed to deserialize animation %@
Error: SCNEncodeAnimations failed to encode animation: %@
Error: SCNEncodeAnimations unknown animation type: %@
Error: SCNDecodemage: invalid archive
Warning: CGPath archiving: unknown path element type
Warning: unable to infer the type of a basic animation: %@
Warning: unable to infer the type of a keyframed animation: %@
Error: animating between instances is not supported
Error: CAKeyframeAnimationToC3DAnimation :: too large value to animate : %d bytes
Error: CAKeyframeAnimation has no keyframe - skipping conversion
Error: can't add a NULL animation to %@
Error: can't encode an animation that has never been attached to any target
Error: failed to convert CAAnimation to SCNAnimation
Warning: default duration is zero - using default transaction duration
Error: This animation can't be changed to additive. To make this animation additive first convert it to a CAAnimation, set it to additive and convert back to SCNAnimation
Error: This animation can't be changed to cumulative. To make this animation cumulative first convert it to a CAAnimation, set it to cumulative and convert back to SCNAnimation
Error: unknown fill mode
Error: sub-animation %@ of %@ has no keyPath - ignoring
Error: C3DAnimationToCAAnimation: unsupported animation
Warning: SCNAnimationGroupToCAAnimationGroup - no target path
Warning: SCNSimpleAnimationToCABasicAnimation - can't convert startValue
Warning: SCNSimpleAnimationToCABasicAnimation - can't convert endValue
Warning: SCNSimpleAnimationToCABasicAnimation - can't convert byValue
Error: entryWithUID:withClass: object with uid %@ exists but is not a geometry
Error: entryWithUID:withClass: object with uid %@ exists but is not a material
Error: entryWithUID:withClass: object with uid %@ exists but is not an animation
Error: entryWithUID:withClass: object with uid %@ exists but is not a node
Error: entryWithUID:withClass: object with uid %@ exists but is not a light
Error: entryWithUID:withClass: object with uid %@ exists but is not a camera
Error: entryWithUID:withClass: object with uid %@ exists but is not a scene
Error: entryWithUID:withClass: object with uid %@ exists but is not a skinner
Error: entryWithUID:withClass: object with uid %@ exists but is not a morpher
Error: entryWithUID:withClass: object with uid %@ exists but is not an image
Error: entrieswithClass: class %@ is not a known C3D class
Error: light node already has an authoring node - skip
Error: particle node already has an authoring node - skip
Error: camera node already has an authoring node - skip
Error: physicsField node already has an authoring node - skip
Error: Too many properties added to this ParticleSystem
Error: Cannot animate this particle semantic : %@
Error: Try to parametrize with a variable property not present : %@
Error: Unknown controller mode : %@
Error: Try to set a controller on a property not present : %@
Error: C3DLibraryCreateEntryIdentifier - unknown type
Error: _remapInfos does not contain an entry %@
Error: library does not contain an entry %d with kind %d
Error: Library: could not deserialize the substorage for the type %@
Error: type %d is not serializable
Error: Library deserialization: could not finalize the deserialization of a substorage
Error: Library Deserialization: cannot finalize the deserialization of %@
Warning: C3DLibraryGetMemoryUsageForKind found an image with no sampler
Warning: %@: zNear of 0 is not allowed
Error: slotName %d not found
Error: array for material property contents must have 6 elements
Warning: copyC3DImageFromImage: invalid sub-image
Error: unknown material property type for archiving
Error: unknown archived material property type
Error: C3DProgramHashCodeStoreRegisterProgramForRendererElement - index out of capacity (%d > %d)
Error: leaking materials array
Error: Cannot set edge creases element because its primitive type is not SCNGeometryPrimitiveTypeLine
Error: Cannot set edge creases source because its semantic is not SCNGeometrySourceSemanticEdgeCrease
Warning: Found elements with different channel counts in the same geometry
Error: Missing channel for source at index %u
Error: Invalid channel (%d) for source at index %u
Warning: failed to transpose skeleton
Error: SCNSkinner setBaseGeometry is deprecated on iOS10 and OS X 10.12 and has no effect
Error: SCNSkinner: there must be the same number of bone weights and bone indices
Error: SCNSkinner: bone weights must be of type `float`
Error: SCNSkinner: bone indices must be uint8 or uint16 (maximum of 2 bytes)
Error: SCNSkinner: bone indices stride must be equal to componentsPerVector * bytesPerComponent
Error: SCNSkinner: bone weights stride must be equal to componentsPerVector * bytesPerComponent
Error: skinner: invalid index (%d)
Error: mismatch between the vertex count and the number of bones per vertex
Error: can't create a skinner with no bones
Error: can't create a skinner with no base geometry
Error: bones count and bind transform count don't match
Error: number of transforms (%d) doesn't match the number of joints (%d)
Error: Bones index too large for compressed representation : %d
Warning: Subdivision process might lead to gaps in surface because vertex welding is disabled when subdividing on the GPU
Error: Position must be float3 to be subdivided. Actual type is %d
Warning: C3DSkinnerTransposeSkeleton - unable to transpose every joints
Warning: Cannot update the joints using node names: unammed joint found
Warning: Cannot update the joints using node names: can't find node named %@
Warning: _C3DSkinnerUpdateBoundingBox - skinned node has no geometry
Error: We did not succeed in locating all the joints, so do not update the geometry as it might be worse if we use the wrong bones.
Error: C3DSkinnerUpdateJointsAndBoundingBox skinner has no mesh
Error: C3DSkinner serialization: lib entry not found
Warning: Skinner deserialization: cannot find the specified skeleton
Error: Skinner deserialization: cannot find a joint
Error: Skinner deserialization: cannot find the skin
Error: C3DSkinner deserialization: lib entry not found
Error: C3DSkinner deserialization: Could not get a valid number value
Error: Unsupported skin weight format
Error: invalid skin indices
Info: Too many influencing joints (%ld > %d) on the vertex #%u, will cap to %d and renormalize
Error: No jointsCount in the skin %@
Error: Unable to read the jointsCount in the skin %@
Warning: No maxInfluences in the skin %@, defaulting to 4. Please re-convert your assets.
Warning: Unable to read the maxInfluences in the skin %@, defaulting to 4. Please re-convert your assets.
Error: No inverseBindMatrices in the skin %@
Error: No defaultShapeMatrix in the skin %@
Error: A vertex weight index does not fit on an int
Error: Skin: Could not remap the ID for geometry %d
Error: Skin deserialization: no weightsCount in %@
Error: Skin deserialization: no jointsForVertexWeights in %@
Error: Skin deserialization: no vertexWeights in %@
Error: Skin deserialization: invalid vertexWeights
Error: GenericSource deserialize => no data type
Error: GenericSource deserialize => no count, bailing out
Error: GenericSource deserialize => no comp/value, bailing out
Error: GenericSource deserialize => no padding, bailing out
Error: Could not serialize the accessor's type
Error: accessor->_count too big
Error: accessor->_offset too big
Error: accessor->_padding too big
Error: Accessor serialization failed
Error: Accessor deserialization: Could not find the source ID
Error: Accessor deserialization: Could not find a valid source type
Error: Accessor deserialization: Could not remap the ID for source %d
Error: Accessor deserialization: : no serialized data
Error: C3DSourceAccessorGetValuePtrAtIndex - index out of bounds : %d > %d
Error: C3DSourceAccessorGetValuePtrAtIndex - no data
Error: C3DSourceAccessorGetMutableValuePtrAtIndex - index out of bounds : %d > %d
Error: C3DSourceAccessorGetVolatileValuePtrAtIndex - index out of bounds : %d > %d
Error: The destination does not have enough room to copy this data
Error: error in C3DSourceAccessorCopyDataToAccessor
Error: ERROR: GenericSource deserialize => no data type, bailing out
Error: ERROR: GenericSource deserialize => no count, bailing out
Error: ERROR: GenericSource deserialize => no stride, bailing out
Error: Could not deserialize an accessor
Error: Could not serialize an accessor
Error: Cannot finalize the deserialization of mesh source: accessor data missing
Warning: Cannot duplicate a Metal Buffer source. Create an empty data instead.
Error: Animation group deserialization: could not deserialize the animation
Error: Could not deserialize an animation
Error: Could not deserialize an animation: animation not found in %@
Error: Could not deserialize an animation: targetPath not found in %@
Error: _C3DAnimationChannelCopyPropertyList - no target path
Error: attaching a single wheel to multiple vehicle is not supported
Error: C3DGLSLProfileBindProfileInputs - profile has no technique
Error: wrong location returned for input named %@
Error: can't find input named %@
Warning: the same program is shared by two passes but indexed in a different manner
Error: failed to find texture target named %@
Error: declared type doesn't match the uniform named %@
Info: SCNSceneSourceConvertUnitsToMetersKey and SCNSceneSourceConvertToYUpKey have no effect on compressed assets. Use Xcode's compression options instead
Warning: Safe mode enabled, denying the download of a network URL %@
Warning: light_map uv_set:%d is pointing to an invalid uv_set(no corresponding source) and was reset to 1
Warning: invalid zRange detected (whole scene clipped)
Error: can't serize plist :%@
Error: Could not get the data for the serialized property list
Error: Could not zip the serialized property list
Error: This file cannot be opened (version is too old)
Error: This file cannot be opened (version of this c3d is too recent for this version of the framework)
Error: Could not find the zipped data
Error: Could not unzip the zipped data
Error: Error loading the unzipped data: %@
Error: cannot initialize library
Error: Cannot get the library in the serialized data
Error: cannot initialize scene
Error: cannot finalize scene deserialization
Warning: cannot finalize library deserialization
Warning: adding a node that was just removed %p
Error: unknown notification name
Info: PrefersOpenGL key is set in the plist but Metal is requested programmatically. GL will be used
Error: switchToCameraNamed: no camera named %@
Error: display link thread seems stuck
Error: _initializeRenderFromLightPass - no light
Error: _initializeDeferredShadows - no light
Error: _willExecuteDeferredShadows - no light
Error: _setupDeferredShadows - no light
Error: Could not create morph intervals : Target %d is useless
Error: No morphingType in the morph %@
Error: Unable to read the morphingType in the morph %@
Error: Could not remap the ID for mesh %d
Error: Could not remap the ID for weights source %d
Error: Morpher has %d targets weights, but has %d top-level morph targets (note: there are %d in-between morph targets)
Error: Internal consitency error. There should be %d runtime morph target weights, but we the current morph weight index is %d.
Error: Morpher deserialization: cannot find the morph
Error: C3DMorpher deserialization: lib entry not found
Error: C3DMorpher deserialization: Could not get a valid number value
Warning: C3DIO(warn) _writeAnimationChannel: animation not supported - won't be exported
Error: can't find index of animated buffer component
Error: can't mix affine and matrices animations
Error: %@
Warning: _writeSource - shared source detected (not supported)
Warning: _writeSource - shared accessor detected (not supported)
Warning: _writeArrayWithWriterFunc: infinite double encountered
Warning: _writeArrayWithWriterFunc: infinite float encountered
Error: failed to generate a path for an image
Error: found a texture with no sampler
Warning: geometry is partially double sided - not supported at export
Warning: failed to find source of morph
Warning: invalid light map info - not exported
Warning: C3DFXContextGetFirstPassInstanceWithGroupID: failed to find pass instance with name (%@)
Error: _C3DFXSetupPasses : no context
Error: shadows are only supported by spot lights and directional lights
Error: failed to bind program for pass %@
Error: pass %@ has no program set
Error: C3DEngineContextRenderTechnique - unknown draw instruction
Error: C3DFXRenderPassWillExecute: invalid framebuffer
Warning: Failed to create program for hashcode %@: %@
Error: C3DCommonProfileProgramReleaseHashCode can't find cache for tracked resource
Error: Physically based lighting model is not supported by the OpenGL renderer, using Phong instead (3)
Error: cannot handle more than one lighting modifier
Error: failed to load vertex uber shader.
Error: failed to load fragment uber shader.
Error: Physically based lighting model is not supported by the OpenGL renderer, using Phong instead (2)
Error: Invalid shader modifier : no code provided
Error: DOF pass: no point of view
Error: DOF pass: no camera
Error: %@ setWeight:forTargetAtIndex:%d - index out of bounds (%d)
Error: Too many uniform custom samplers given (Max is %d)
Error: invalid custom texture slot.
Error: [SCNAction sequence:] invoked with nil
Error: Unflushed transaction present.
Error: Transaction stack contains an uncommited transaction.
Warning: invalid keypath: %@ sent to object %@
Error: C3DTransactionCommit - transaction already committed
Error: C3DTransactionCommit - invalid transaction count - probably too many [transaction commit]
Error: Scene %@ is modified within a rendering callback of another scene (%@). This is not allowed and may lead to crash
Error: Error killing thread with uncommitted transaction.
Error: C3DTransactionRemoveChild - inconsistency
Error: unexpected transaction commit (missing being ?)
Error: geometrySourceWithData: interleaved buffers as doubles are not supported
Error: failed to convert color data - skip convertion
Error: Could not create mesh source
Error: SCNGeometryElement initialization - Invalid index size (%ld bytes)
Error: SCNGeometryElement initialization - Invalid polygon edge count (%ld)
Error: Cannot append manipulator vertex data because we encountered an overflow and we are not allowed to flush
Warning: ring buffer is full [%d/%d]
Error: Unable to create context
Warning: _beginTranslateAtLocation: invalid zRange
Warning: Warning: no C3DIntersectionRay3Plane
Error: Unable to resolve URL %@
Error: setGimbalLockVector is deprecated
Warning: _computeTranslationOrigin3DFromPoint: invalid zRange
Error: SCNTextureSource abstract method invoked %@
Error: SCNImageSource astract method invoked %@
Error: SCNTextureDelegateSource::textureProxy -> no delegate
Error: AVAssetWriter can't create a movie at %@ (error:%@)
Error: appendImage: failed to get a pixelBuffer from CVPixelBufferPoolRef
Error: append pixel buffer failed
Error: error while exporting movie: %@
Error: program failed to build:
Error: Cannot compile empty shader %@
Error: %3d: %@
Error: failed to link program: %s
Error: C3DParticleModifier_PhysicsField - no aether
Error: [SCNAction group:] invoked with nil
Error: C3DRenderBufferGetSlotForOutputBufferType : unsupported type %d
Error: modifier without code is invalid
Error: unexpected value (%@)
Warning: SCNDefaultValueWithBaseType - unknwon base type %d
Error: unexpected returned value for property %@ of object %@
Error: can't generate implementation for property of type %d
Error: syntax error in the uniform declaration : %@
Error: C3DConstraintApplyIK leef is not a child of root
Error: C3DConstraintApplyIK root and leaf nodes are the same node
Error: Can't create a vehicle with this chassis because it is not in the scene yet
Warning: Chassis should already have a body
Warning: unsupported ease out for contraint applied on base type %d
Error: C3DModelPathResolveCommonProfileProperty unknown path %@
Error: _C3DModelPathResolverRegistryResolvePathWithClassName unknown path %@
Error: _C3DModelPathResolveColor4 unknown path %@
Error: _C3DModelPathResolveCommonProfileTexture unknown path %@
Error: _C3DModelPathResolveMatrix unknown path %@
Error: _C3DModelPathResolveTransform unknown path %@
Error: _C3DModelPathResolveRotation unknown path %@
Error: _C3DModelPathResolveVector3 unknown path %@
Error: _C3DModelPathResolveVector4 unknown path %@
Error: _C3DModelPathResolveNode unknown path %@
Error: _C3DModelPathResolveDynamicParameter unknown path %@
Error: _C3DModelPathResolveCommonProfile unknown path %@
Error: _C3DModelPathResolveMorpher unknown path %@
Warning: _C3DCreateAnimationTargetFromPath: can't resolve a path (null model)
Warning: _C3DCreateAnimationTargetFromPath: can't resolve a path
Error: indexstore::_getNextFreeIndex - no more free index
Error: C3DAllocatorDelete - unknown address
Error: Failed to build renderable data for mesh %p
Warning: Mesh element %p of mesh %p has %d channels but they all define the same topology
Warning: Mesh %p has multiple channels but deindexing didn't have any effect
Warning: Deindexing - Vertex at index %u of %u is not used by any geometry element
Error: Deindexer failed - Source %p (%@) has no original data at index %u
Error: __writeIndexInBuffer - index (%u) out of bounds (%lu)
Error: %s - Invalid polygon edge count (%u)
Error: __C3DMeshElementCreateRenderablePrimitiveTypeCopy - polygon too large (%u) for index buffer (%u)
Error: Inconsistent index count after triangulation.
Error: repeatAction: invoked with a nil action
Error: repeatActionForever: invoked with a nil action
Error: technique should not be null
Error: too many blend states: max render target is %d
Warning: can't create a fbo description for pass %@ - can't find pass description with name %@
Error: failed to load program %@
Error: failed to load program %@ %@
Error: unknown cull mode named %@
Error: unknown depth comparison function named %@
Error: unknown blend factor named %@
Error: unknown blend op named %@
Error: _bufferTypeFromName - unknown output type: %@
Warning: unknown texture format : %@
Error: description for input named %@ is missing
Error: 'type' is required for symbol %@
Warning: symbol named %@ should be in "targets" not "symbols"
Warning: _convertOutputsDescriptionToOutputs - can't find output named %@
Error: _convertOutputsDescriptionToOutputs - unknown output type: %@
Error: C3DTransformGetValue - unexpected semantic
Error: C3DTransformSetValue unexptected component index %d
Error: C3DTransformSetValue - unexpected semantic
Error: Cannot use a program because shader modifiers are set
Error: ShaderModifiers - unkwnown supporting class '%@'
Error: Cannot use shader modifiers because a program is set
Warning: _updateC3DProgramInput can't find input named %@
Error: ShaderModifiers - unkwnown entrypoint '%@'
Warning: Unknown alignment mode %@
Warning: Unknown truncation mode %@
Error: RendererElementStore does not support span of more than %d
autorelease
enumerateKeysAndObjectsUsingBlock:
UTF8String
init
caction
setCppAction:
initWithCoder:
decodeBoolForKey:
encodeWithCoder:
encodeBool:forKey:
alloc
setDuration:
copyWithZone:
duration
numberWithInt:
arrayWithObjects:count:
supportsSecureCoding
hide
unhide
reversedAction
parameters
_mycaction
setHidden:
dataWithBytes:length:
initWithData:topLeftOrigin:name:dimensions:rowStride:channelCount:channelEncoding:isCube:
imageFromTexture
isCube
transformAnimation
animationWithCAAnimation:
animationWithMDLTransform:
transform
matrix
class
isKindOfClass:
initWithMatrix:
setTransform:
release
addObject:
children
countByEnumeratingWithState:objects:count:
objectForKeyedSubscript:
boolValue
initThroughSCNKitBridgeWithURL:preserveTopology:error:
resolver
loadTextures
sceneWithMDLAsset:options:
objectWithSCNNode:
jointPaths
removeAllObjects
jointBindTransforms
bytes
length
meshBindTransform
valueWithSCNMatrix4:
arrayWithCapacity:
numberWithDouble:
numberWithFloat:
animationWithKeyPath:
setValues:
setKeyTimes:
setBeginTime:
setAdditive:
setRemovedOnCompletion:
animation
setAnimations:
shapeSetTargetCounts
count
targetShapes
objectAtIndexedSubscript:
geometryWithMDLMesh:
name
setName:
setEdgeCreasesSource:
setEdgeCreasesElement:
initWithCapacity:
unsignedIntegerValue
shapeSetTargetWeights
setTargets:withInBetweenTargetCounts:inBetweenWeights:
setTargets:
weights
elementCount
keyTimes
doubleValue
getFloatArray:maxCount:atTime:
setWeights:
morpher
isAnimated
timeSampleCount
getTimes:maxCount:
getFloatArray:maxCount:
stringWithFormat:
valueForKey:
isEqualToString:
setUsesSceneTimeBase:
setRepeatCount:
addAnimation:forKey:
upAxis
respondsToSelector:
valueWithSCNVector3:
setAttribute:forKey:
nodeWithMDLObject:masterObjects:sceneNodes:skinnedMeshes:skelNodesMap:options:
rootNode
addChildNode:
path
_addSkinnerWithMDLMesh:sceneNodes:
animations
setObject:forKeyedSubscript:
_resetSceneTimeRange
startTime
setStartTime:
endTime
setEndTime:
sceneWithMDLAsset:
assetWithSCNNode:
assetWithSCNNode:bufferAllocator:
initWithBufferAllocator:
objectWithSCNNode:bufferAllocator:
assetWithSCNScene:
assetWithSCNScene:bufferAllocator:
setMatrix:
camera
cameraWithSCNCamera:
addChild:
light
type
lightProbeWithSCNLight:node:
lightWithSCNLight:
geometry
meshWithSCNGeometry:bufferAllocator:
childNodes
indicesChannelCount
data
bytesPerIndex
hasInterleavedIndicesChannels
primitiveCount
primitiveType
subdataWithRange:
initWithBytesNoCopy:length:
dataStride
dataOffset
isMemberOfClass:
flush
geometrySourceChannels
geometrySources
semantic
vectorCount
indexOfObjectPassingTest:
geometrySourcesForSemantic:
geometryElements
attributes
setFormat:
setBufferIndex:
newBuffer:type:
setOffset:
layouts
setStride:
newBufferWithData:type:
firstMaterial
multiply
contents
mappingChannel
selfIllumination
format
offset
bufferIndex
stride
geometryElementCount
materials
geometryElementAtIndex:
submeshWithSCNGeometryElement:bufferAllocator:positionSourceChannel:
submeshWithUniquedIndexData:andSCNGeometryElement:bufferAllocator:
materialWithSCNMaterial:
setMaterial:
initWithVertexBuffers:vertexCount:descriptor:submeshes:
meshWithSCNGeometry:
newSubmeshWithSCNGeometryElement:bufferAllocator:
newSubmeshWithSCNGeometryElement:bufferAllocator:positionSourceChannel:
newSubmeshWithUniquedIndexData:andSCNGeometryElement:bufferAllocator:
dataWithLength:
mutableBytes
initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:
initWithType:data:
setFaceCount:
setFaceTopology:
newSubmeshWithGeometryData:indexBufferLength:interleaved:channelCount:channelIdx:bytesPerIndex:indexType:geometryType:allocator:indexCount:topology:
submeshWithSCNGeometryElement:
submeshWithSCNGeometryElement:bufferAllocator:
initWithName:scatteringFunction:
ambient
diffuse
specular
reflective
transparent
metalness
roughness
displacement
normal
isDoubleSided
setMaterialFace:
setColorSpace:
color
CGColor
setColor:
attenuationStartDistance
setAttenuationStartDistance:
attenuationEndDistance
setAttenuationEndDistance:
attenuationFalloffExponent
setAttenuationFalloffExponent:
spotInnerAngle
setInnerConeAngle:
spotOuterAngle
setOuterConeAngle:
setLightType:
focusDistance
setFocusDistance:
sensorHeight
setSensorVerticalAperture:
apertureBladeCount
setApertureBladeCount:
useLegacyFov
yFov
fieldOfView
setFieldOfView:
aspectRatio
setSensorAspect:
zNear
setNearVisibilityDistance:
zFar
setFarVisibilityDistance:
focalBlurRadius
setMaximumCircleOfConfusion:
fStop
setFStop:
usesOrthographicProjection
setProjection:
nodeWithMDLObject:
node
submeshes
faceIndexing
geometryType
geometryWithMDLMesh:submesh:
setGeometry:
lightWithMDLLight:
setLight:
lightWithMDLLightProbe:
cameraWithMDLCamera:
setCamera:
objectForKey:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
conformsToProtocol:
retain
retainCount
zone
hash
superclass
description
debugDescription
componentConformingToProtocol:
setMorpher:
copyJointBindTransformsInto:maxCount:
setObject:forKey:
instance
hidden
skinnerWithBaseGeometry:bones:boneInverseBindTransforms:boneWeights:boneIndices:
setSkinner:
UUID
UUIDString
stringByAppendingPathComponent:
generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:
generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:
generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
_updateAssociatedSCNNodeWithGeometrySetter:texturePathProvider:vertexAttributeNamed:materialPropertyNamed:
_associatedMDLObject
_bakeNodes:folderPath:inVertex:bakeAO:quality:attenuation:geomSetter:terminateSetter:
nodeWithMDLAsset:
vertexDescriptor
containsString:
vertexBuffers
geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
setMkSemantic:
geometrySourceWithMDLVertexAttribute:mesh:
indexCount
geometryElementWithMDLSubmesh:
material
materialWithMDLMaterial:
geometryWithSources:elements:
setSubdivisionLevel:
setMaterials:
topology
initWithArray:copyItems:
numberWithUnsignedInteger:
geometryWithSources:elements:sourceChannels:
morpherWithMDLMesh:
faceTopology
indexBuffer
indexType
faceCount
setLength:
appendBytes:length:
geometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:
propertyNamed:
textureSamplerValue
texture
fileURLWithPath:
writeToURL:
setString:
mkSemantic
ambientOcclusion
setMappingChannel:
setContents:
scatteringFunction
setLightingModelName:
emission
materialFace
setDoubleSided:
propertyWithSemantic:
floatValue
setShininess:
_integrateModelKitComputedMaps:withGeometry:node:texturePathProvider:vertexAttributeNamed:materialPropertyNamed:filePath:
colorWithCGColor:
innerConeAngle
setSpotInnerAngle:
outerConeAngle
setSpotOuterAngle:
colorWithRed:green:blue:alpha:
lightType
setType:
focalLength
setFocalLength:
sensorVerticalAperture
setSensorHeight:
sensorAspect
setAspectRatio:
nearVisibilityDistance
setZNear:
farVisibilityDistance
setZFar:
setFocalBlurRadius:
projection
setUsesOrthographicProjection:
focalLengthAnimation
isSubclassOfClass:
values
objectAtIndex:
setKeyPath:
focalDistanceAnimation
fStopAnimation
array
initWithString:
copy
_associatedSCNNode
translations
rotations
scales
getFloat3Array:maxCount:
getFloatQuaternionArray:maxCount:
maximumTime
minimumTime
setFillMode:
rangeOfString:options:
substringFromIndex:
valueWithSCNVector4:
geometryBindTransform
setBaseGeometryBindTransform:
setSkeleton:
jointAnimation
skeleton
numberWithUnsignedInt:
getDouble4x4Array:maxCount:
unsignedLongValue
substringToIndex:
rangeOfString:
scn_C3DColorIgnoringColorSpace:success:
stringByAppendingString:
initWithName:semantic:float3:
initWithName:semantic:URL:
initWithName:semantic:string:
getC3DImageRef
setTexture:
initWithName:semantic:textureSampler:
setProperty:
jointRestTransforms
getFloat4x4Array:maxCount:
parentNode
vertexCount
vertexAttributeDataForAttributeNamed:
dataStart
edgeCreases
edgeCreaseIndices
edgeCreaseCount
vertexCreases
vertexCreaseIndices
vertexCreaseCount
hasSuffix:
attributeNamed:
URLValue
stringValue
absoluteString
_setImagePath:withResolvedPath:
setContentsTransform:
float4Value
float3Value
setWrapS:
setWrapT:
textureComponents
setTextureComponents:
hardwareFilter
sWrapMode
tWrapMode
minFilter
setMinificationFilter:
magFilter
setMagnificationFilter:
mipFilter
setMipFilter:
unsignedIntValue
geometryElementWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
contentScaleFactor
renderingAlgorithm
setRenderingAlgorithm:
rate
setRate:
volume
setVolume:
reverbBlend
setReverbBlend:
initWithAVAudioNode:
setWillStartPlayback:
setDidFinishPlayback:
anyObject
removeObject:
initWithSource:
dealloc
audioBuffer
didFinishPlayback
setCompleted:
shouldStream
recycle
postCommandWithContext:object:applyBlock:
loops
scheduleBuffer:atTime:options:completionHandler:
audioFile
play
scheduleFile:atTime:completionHandler:
willStartPlayback
reset
audioBufferFormat
audioPlayerWithAVAudioNode:
audioPlayerWithSource:
setNodeRef:
nodeRef
__CFObject
audioNode
audioPlayer
audioSource
scene
completed
customAudioNode
_audioNode
_audioPlayer
_audioSource
_nodeRef
_scene
_customAudioNode
_completed
initWithAVAudioPCMBuffer:
setPositional:
isPositional
pathExtension
stringByDeletingPathExtension
URLForResource:withExtension:
_loadURLWithBundle:
mainBundle
initWithFileNamed:inBundle:
dictionary
initWithFileNamed:
_load
initForReading:error:
processingFormat
initWithPCMFormat:frameCapacity:
readIntoBuffer:error:
stringWithUTF8String:
currentHandler
localizedDescription
handleFailureInMethod:object:file:lineNumber:description:
load
loadIfNeeded
frameLength
fileFormat
sampleRate
audioSourceNamed:
initWithURL:
audioSourceWithAVAudioPCMBuffer:
setLoops:
setShouldStream:
encodeObject:forKey:
encodeFloat:forKey:
decodeObjectOfClass:forKey:
decodeFloatForKey:
_customEncodingOfSCNAudioSource:
_customDecodingOfSCNAudioSource:
fileName
_audioFile
_audioBuffer
_audioURL
_audioName
_loops
_shouldStream
_loaded
positional
integerValue
layer
setLayer:
isOpaque
textureSource
_layer
sharedRegistry
sourceRendererForEngineContext:source:textureSource:
beginTime
__renderLayer:withCARenderer:engineContext:viewport:atTime:forceUpdate:didUpdate:
rendererContextForTextureSourceWithEngineContext:
setCurrentContext:
bounds
setBounds:
begin
numberWithBool:
setValue:forKey:
layerToFocusForRenderedLayer:
setAnchorPoint:
setPosition:
anchorPoint
commit
beginFrameAtTime:timeStamp:
updateBounds
nextFrameTime
endFrame
clearValue
addUpdateRect:
render
_bindFramebuffer:
_unbindFramebuffer:
_buildMipmaps:
cleanup:
contentsScale
layerSizeInPixels
_textureWithEngineContext:textureSampler:nextFrameTime:
__prepareFramebufferWithSize:withEngineContext:textureSampler:needsStencil:
__updateTextureWithLayer:engineContext:sampler:
supportsMetal
prefersGL3
renderWithEngineContext:textureSampler:nextFrameTime:
layerContentsScaleFactor
textureWithEngineContext:textureSampler:nextFrameTime:
_lastUpdate
_nextUpdateDate
initWithFormat:arguments:
_commonInit
_removeOwner
field
setBlock:
setSmoothness:
setAnimationSpeed:
doesNotRecognizeSelector:
archivedDataWithRootObject:requiringSecureCoding:error:
unarchiveObjectWithData:
physicsWorld
_postCommandWithBlock:
_aetherHandle
isExclusive
_removeFieldFromWorld:
_createField
_setupCommonProperties
_addFieldToWorld:
encodeDouble:forKey:
encodeInteger:forKey:
immediateMode
setImmediateMode:
setHalfExtent:
decodeDoubleForKey:
setStrength:
setFalloffExponent:
setMinimumDistance:
setActive:
decodeIntegerForKey:
setScope:
setUsesEllipsoidalExtent:
setExclusive:
containsValueForKey:
setDirection:
dragField
customFieldWithEvaluationBlock:
vortexField
radialGravityField
linearGravityField
noiseFieldWithSmoothness:animationSpeed:
turbulenceFieldWithSmoothness:animationSpeed:
springField
electricField
magneticField
_setDisplayScaleFactor:
_displayScaleFactor
strength
categoryBitMask
setCategoryBitMask:
falloffExponent
minimumDistance
isActive
scope
halfExtent
usesEllipsoidalExtent
exclusive
direction
supportsDirection
supportsOffset
_willRemoveFromPhysicsWorld
_setOwner:
_setWorld:
_owner
_handle
evalAtLocation:
_halfExtent
_strength
_falloffExponent
_minimumDistance
_active
_scope
_usesEllipsoidalExtent
_exclusive
_offset
_direction
_categoryBitMask
_world
_node
_field
gravity
block
_block
axis
valueForUndefinedKey:
setValue:forUndefinedKey:
smoothness
animationSpeed
_smoothness
_animationSpeed
update
restart
stopIfNeeded
_canJitter
jitter
loadDelegate
renderer
_jitterAtStep:updateMainFramebuffer:redisplay:jitterer:
initialize
initWithDelegate:
delegateWillDie
setEnabled:
isEnabled
isAborting
_enabled
_state
_iteration
_restartSourceIsSuspended
_delegate
_restartSource
initWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
initWithBody:axis:anchor:
jointWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
jointWithBody:axis:anchor:
bodyA
bodyB
axisA
setAxisA:
axisB
setAxisB:
anchorA
setAnchorA:
anchorB
setAnchorB:
_addToPhysicsWorld:
_willRemoveFromPhysicsWorld:
_definition
_constraint
authoringEnvironment
orderedSetWithCapacity:
component
parentItem
updateManipulatorNode
firstObject
orderedSetWithObject:
indexSet
_deleteOriginalData
removeFromParentNode
target
setTarget:
editingSpace
setupNode
scn_colorWithC3DColor:
setEulerAngles:
setRenderingOrder:
billboardConstraint
setPreserveScale:
sphereWithRadius:
setGeodesic:
setSegmentCount:
setColorBufferWriteMask:
nodeWithGeometry:
setOpacity:
boxWithWidth:height:length:chamferRadius:
updateManipulatorComponents
setSimdWorldTransform:
setScale:
effectiveEditingSpace
authoringOverlayLayer
manipulatorNode
blackColor
whiteColor
enumerateHierarchyUsingBlock:
numberWithInteger:
hitTest:options:
isHidden
hitTest:
unhighlightSelectedNode
orangeColor
_updateActionWithEvent:
worldTransform
setWorldTransform:
enumerateObjectsUsingBlock:
setDisableActions:
gridUnit
shouldSnapToAlign
_snapPositionToAlign:original:unit:axisMove:rayStart:rayDir:didSnap:snapIndexes:
shouldSnapOnGrid
addIndex:
updateItemsPosition
viewMatrix
updateItemsRotation:
updateItemsScale:
removeAllIndexes
_updateCloneStateWithEvent:
_applyWithEvent:
readonly
_saveOriginalData
clearSnapIndexes
validateClones
delegate
authoringEnvironment:didMoveItems:fromTransform:
mouseMoved:
sceneRenderer
removeItemsFromScene:
addItems:toScene:
authoringEnvironment:didCloneSelection:
validateClone
orderedSet
cloneForManipulators
childNodesPassingTest:
targets
getBoundingBoxMin:max:
convertPosition:toNode:
_prepareSnapToAlignData:minOffset:maxOffset:
sceneRef
lock
prepareSnapToAlignData
unlock
prepareSnapToAlignDataIfNeeded
_setAuthoringEnvironment:
isDragging
updateManipulatorPosition:
editingSpaceChanged
setFeatures:
setReadonly:
features
lockLayout
unlockLayout
mouseDragged:
mouseDown:
mouseUp:
removeClonesFromScene
addClonesToScene
setupClones
snapGuideIndexesOnAxis:
snapInfoAtIndex:axis:
xAlignment
setXAlignment:
yAlignment
setYAlignment:
zAlignment
setZAlignment:
_authoringEnvironment
_targets
_xAxisToZAxisTransform
_yAxisToZAxisTransform
_xyPlaneToYZPlaneTransform
_xyPlaneToXZPlaneTransform
_selectedAxis
_actionData
_isMouseDown
_readonly
_action
_originalMouseLocation
_originalData
_originalDataCount
_worldInitialMatrix
_worldMatrix
_snapToAlignCount
_snapToAlignOnX
_snapToAlignOnY
_snapToAlignOnZ
_snapXIndexes
_snapYIndexes
_snapZIndexes
_xAlignment
_yAlignment
_zAlignment
_planarTranslationHandleXY
_planarTranslationHandleYZ
_planarTranslationHandleXZ
_planarTranslationHandles
_axis
_arcHandleXY
_arcHandleYZ
_arcHandleXZ
_arcHandles
_scaleNode
_screenSpaceRotation
_highlightNode
_planarTranslationLayout
_layoutLocked
_zArrow
_rotationHandles
_occluder
_translateHandles
_billboard
_cloneSet
_cloning
_features
containsObject:
cylinderWithRadius:height:
coneWithTopRadius:bottomRadius:height:
flattenedCopy
clone
setAuthoringEnvironmentNode:
planeWithWidth:height:
torusWithRingRadius:pipeRadius:
setPipeSegmentCount:
setRingSegmentCount:
setTransparency:
setRadialSpan:
tubeWithInnerRadius:outerRadius:height:
setHittable:
setRingRadius:
setScene:
backgroundColor
_isDirty
_notifyNextDirtyState
__renderSKScene:withSKSCNRenderer:engineContext:viewport:atTime:
updateAtTime:
renderToFramebuffer:shouldClear:
size
__updateTextureWithSKScene:engineContext:sampler:
appendFormat:
appendString:
_setupWithManifold:index:point:
_contactWithManifold:index:
_fillNodeA:nodeB:contactPoint:collisionImpulse:distance:hitFraction:
_fillNodeA:nodeB:
nodeA
nodeB
contactPoint
contactNormal
collisionImpulse
penetrationDistance
sweepTestFraction
_prepareUpdate
_shouldPostUpdate
_nodeA
_nodeB
_contactPoint
_contactNormal
_collisionImpulse
_distance
_fraction
_updateCount
userAnimation
_source
_destination
indexesOfObjectsPassingTest:
removeObjectsAtIndexes:
mutableCopy
replaceObjectAtIndex:withObject:
setComponent:
initWithType:component:
.cxx_destruct
next
setNext:
finished
runBlock:queue:
isCustom
updateWithTarget:forTime:
_queue
setLabel:
initWithMTLTexture:options:
initWithDescription:size:arrayLength:
viewportDependant
renderBufferFormat
matchesDescription:size:arrayLength:
textureForSliceIndex:
ciImage
referenceCount
setReferenceCount:
timeStamp
setTimeStamp:
_description
_size
_arrayLength
_ciImage
_sliceTextures
_texture
_name
_referenceCount
_timeStamp
addObjectsFromArray:
addEntriesFromDictionary:
null
dictionaryWithObjects:forKeys:count:
_setupDuration
playAudioSource:waitForCompletion:
addAudioPlayer:
audioPlayers
removeAudioPlayer:
invalidate
initWithTechniqueRef:
techniqueRef
_symbolsAssignedValues
allKeys
dictionaryRepresentation
techniqueWithDictionary:
setValue:forSymbolNamed:
removeObjectForKey:
effectSlot
copyC3DImageFromImage:
postCommandWithContext:object:keyPath:applyBlock:
prepareWithTarget:implicitDuration:
animationPlayerWithSCNAnimation:
addAnimationPlayer:forKey:
_scnAnimationForKey:
animationWithSCNAnimation:
animationKeys
animationPlayerForKey:
animationManager
_pauseAnimation:forKey:pausedByNode:
removeAnimationForKey:blendOutDuration:
setSourceObject:
setKeyPathDst:
setKeyPathSrc:
setOptions:
initPresentationTechniqueWithTechniqueRef:
initWithFXPass:technique:
_setupPasses
decodeObjectOfClasses:forKey:
_customEncodingOfSCNTechnique:
_customDecodingOfSCNTechnique:
techniqueBySequencingTechniques:
techniqueWithTechniqueRef:
removeAllAnimations
removeAnimationForKey:
removeAnimationForKey:fadeOutDuration:
animationForKey:
pauseAnimationForKey:
resumeAnimationForKey:
setSpeed:forAnimationKey:
isAnimationForKeyPaused:
handleBindingOfSymbol:usingBlock:
valueForSymbolNamed:
__removeAnimation:forKey:
addAnimation:
_syncObjCAnimations
_copyAnimationsFrom:
_scnBindings
bindAnimatablePath:toObject:withKeyPath:options:
unbindAnimatablePath:
removeAllBindings
copyAnimationChannelForKeyPath:animation:
isPausedOrPausedByInheritance
presentationInstance
passAtIndex:
_didInstallInEngineContext:
_isPresentationInstance
_technique
_valueForSymbol
_animations
_bindings
_passes
time
commandQueue
commandBuffer
device
_context
_commandQueue
_commandBuffer
_device
setInitializationHandler:
initializationHandler
setExecutionHandler:
executionHandler
setValue:forPassPropertyKey:
valueForPassPropertyKey:
_fxPass
contextWithEAGLContext:
numberWithLong:
stringByReplacingOccurrencesOfString:withString:
intValue
vectorWithValues:count:
filterWithName:
setDefaults
vectorWithX:Y:Z:W:
extent
drawImage:inRect:fromRect:
initWithTexture:size:flipped:colorSpace:
geometryRef
SCNVector3Value
scale
initWithContent:options:
_setTransforms:
SCNMatrix4Value
pointerValue
shapeWithGeometry:options:
valueWithPointer:
_customEncodingOfSCNPhysicsShape:
_customDecodingOfSCNPhysicsShape:
setWithArray:
setReferenceObject:
shapeWithNode:options:
shapeWithShapes:transforms:
defaultShapeForGeometry:
initWithCachedObject:options:
referenceObject
options
transforms
sourceObject
_referenceObject
_options
_transforms
_cachedObject
_collisionShape
dictionaryWithObject:forKey:
defaultUICatalogForBundle:
namedTextureWithName:scaleFactor:
characterAtIndex:
bundlePath
resourcePath
lastPathComponent
URLByDeletingPathExtension
URLByAppendingPathExtension:
waitForDuration:withRange:
waitForDuration:
emptyShaderCache
clearCaches
generatorWithProfile:
deferredGeneratorWithProfile:
programWithHashCode:engineContext:trackedResource:introspectionDataPtr:
_handleCreateIfNeeded:
_allowGhostObjects
initWithCharacter:
setWalkingDirection:
canJump
jump
setVelocity:
velocity
setJumpSpeed:
jumpSpeed
_update
_characterController
_ghostObject
_filterCallback
_capsuleShape
setConstantValue:type:withName:
setReferenceURL:
willChangeValueForKey:
hasPrefix:
didChangeValueForKey:
_isNameUnique:
_diffObject:with:path:
properties
slotName
particleSystems
_diffNode:with:path:
removeAllOverrides
_resolveURL
_loadReferencedSceneWithURL:catalog:
setValue:forKeyPath:
valueForKeyPath:
removeParticleSystem:
addParticleSystem:
_applyUnsharing:alreadyShared:
replaceMaterialAtIndex:withMaterial:
_applyOverride:forKeyPath:
setLoadingPolicy:
assetCatalogWithURL:
bundleURL
scheme
isFileURL
relativePath
isAbsolutePath
URLByDeletingLastPathComponent
URLByAppendingPathComponent:
_loadWithCatalog:
_catalog
sceneWithURL:
sceneWithURL:options:error:
_loadWithURL:catalog:
_applyOverrides
assetCatalog
catalogURL
documentURL
referenceNodeWithURL:
collectOverrides
addOverride:forKeyPath:
removeForKeyPath:
overrides
setOverrides:
setOverride:forKeyPath:
_isAReference
referenceURL
unload
isLoaded
_loadWithURL:
loadingPolicy
_referenceURL
_overrides
_loadingPolicy
_catalogURL
_sourceDocumentURL
_reloadWithScene:
referenceSceneName
setReferenceSceneName:
referenceNodeName
setReferenceNodeName:
setReferenceName:
referenceName
repeatCount
repeatDuration
usesSceneTimeBase
setRepeatDuration:
animationNamed:
actionNamed:
setupWithActions:
componentsSeparatedByString:
hasReferenceToPhysicsBody:
sharegroup
initWithSharegroup:
textureWithName:scaleFactor:bundle:options:error:
width
height
_operateOnDataUsingCompressionAlgorithm:operation:
scn_compressedDataUsingCompressionAlgorithm:
scn_uncompressedDataUsingCompressionAlgorithm:
scn_indexedDataEncodingHighWatermarkWithBytesPerIndex:
scn_indexedDataDecodingHighWatermarkWithBytesPerIndex:
scn_indexedDataEncodingDeltaWithBytesPerIndex:
scn_indexedDataDecodingDeltaWithBytesPerIndex:
scn_indexedDataEncodingTrianglePairsWithBytesPerIndex:
scn_indexedDataDecodingTrianglePairsWithBytesPerIndex:
SCN_displayLinkCallback:
initWithQueue:block:
SCN_setupDisplayLinkWithQueue:
_renderingQueue
setDisplayLink:
preferredFramesPerSecond
displayLink
setPreferredFrameRate:
currentRunLoop
dateWithTimeIntervalSinceNow:
runMode:beforeDate:
_renderThreadPriority
_initializeDisplayLink
standardUserDefaults
boolForKey:
defaultManager
contentsOfDirectoryAtPath:error:
stringWithContentsOfFile:encoding:error:
removeItemAtURL:error:
startCollectingPerformanceStatisticsForPid:
stopCollectingPerformanceStatisticsForPid:
performanceStatisticsForPid:
collectedShadersForPid:
temporaryDirectory
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
stringFromByteCount:countStyle:
stringByReplacingCharactersInRange:withString:
standardizedURL
stringWithContentsOfURL:encoding:error:
dataUsingEncoding:
propertyListWithData:options:format:error:
dictionaryWithContentsOfURL:
JSONObjectWithData:options:error:
infoDictionary
weakRef
copyWeakRef
setWeakRef:
setFinished:
performSelector:onTarget:
_selector
_target
_setInertiaRunning:
simdTarget
setSimdTarget:
simdUp
setSimdUp:
setPointOfView:updateUpTransform:
isInertiaRunning
maximumVerticalAngle
maximumHorizontalAngle
setMaximumVerticalAngle:
setMaximumHorizontalAngle:
_translateInCameraSpaceByX:Y:Z:
pointOfView
simdLocalTranslateBy:
_resetOrientationState
_rotateByX:Y:
_directionForScreenPoint:viewport:
simdLocalRotateBy:
simdWorldTransform
simdWorldPosition
simdLocalFront
simdConvertVector:toNode:
interactionMode
simdWorldOrientation
simdWorldFront
useOrbitInteractionMode
simdLocalUp
unrolledWorldOrientation:
setSimdWorldOrientation:
setOrthographicScale:
setSimdPosition:
automaticTarget
hitTestResultsFromHitTestResultRef:
worldCoordinates
_mapToSphere:inViewport:
rotateByX:Y:
_updateArcballOrientation
_endDraggingWithVelocity:
simdOrientation
setSimdOrientation:
simdWorldRight
drivenByDefaultNavigationCameraController
simdConvertPosition:fromNode:
_updateRotation
simdConvertVector:fromNode:
simdLocalRight
simdWorldUp
_capOrientationAnglesToMaximum
_orientationForMode
simdRotateBy:aroundTarget:
_convertRotationFromWorldToPointOfView:
cameraInertiaWillStartForController:
_updateInertiaAtTime:
scheduledTimerWithTimeInterval:repeats:block:
cameraInertiaDidEndForController:
setUp:
worldUp
setWorldUp:
setPointOfView:
setInteractionMode:
inertiaEnabled
setInertiaEnabled:
inertiaFriction
setInertiaFriction:
minimumVerticalAngle
minimumHorizontalAngle
setMinimumVerticalAngle:
setMinimumHorizontalAngle:
verticalMaximumAngle
horizontalMaximumAngle
setVerticalMaximumAngle:
setHorizontalMaximumAngle:
translateInCameraSpaceByX:Y:Z:
translateInScreenSpaceTo:viewport:
rollCameraSpaceBy:withPoint:viewport:
rollAroundTarget:
dollyToTarget:
clearRoll
stopInertia
frameNodes:
lookAtWith:target:
beginInteraction:withViewport:
continueInteraction:withViewport:sensitivity:
endInteraction:withViewport:velocity:
rollBy:aroundScreenPoint:viewport:
dollyBy:onScreenPoint:viewport:
_targetRelativeToPointOfViewParent
_isLocationValid:inViewport:
setDelegate:
setAutomaticTarget:
_orientationState
_inputLocation
_arcball
_inertia
_minimumAngles
_maximumAngles
_handlingInteraction
_drivenBydefaultNavigationCameraController
_automaticTarget
_pointOfView
_interactionMode
_orthographicViewSpaceTranslationForZoomAtScreenPoint:scaleDelta:viewport:
updateInertiaAtTime:
setDrivenByDefaultNavigationCameraController:
moveByX:y:z:duration:
moveToX:y:z:duration:
rotateByX:y:z:duration:
rotateToX:y:z:duration:
rotateByAngle:aroundAxis:duration:
rotateToAxisAngle:duration:
rotateToX:y:z:duration:shortestUnitArc:
scaleBy:duration:
scaleTo:duration:
sequenceWithActions:
groupWithActions:
repeatAction:count:
repeatActionForever:
fadeInWithDuration:
fadeOutWithDuration:
fadeOpacityBy:duration:
fadeOpacityTo:duration:
runAction:onFirstChildWithName:
javaScriptActionWithDuration:script:
customActionWithDuration:actionBlock:
objectWithName:class:
editingModeEnabled
setEditingModeEnabled:
moveBy:duration:
moveTo:duration:
sequence:
group:
runBlock:
runAction:onChildNodeWithName:
javaScriptActionWithScript:duration:
timingFunction
setTimingFunction:
durationRange
setDurationRange:
timingMode
setTimingMode:
isRelative
setSpeed:
speed
_caction
wasPausedWithTarget:atTime:
willResumeWithTarget:atTime:
timeJumpWithTarget:timeOffset:
ratioForTime:
wasAddedToTarget:atTime:
wasRemovedFromTarget:atTime:
willStartWithTarget:atTime:
setKey:
setCompletionBlock:
_removeAction:forKey:
position
euler
setEuler:
rotation
setRotation:
usesEuler
setUsesEuler:
opacity
nodeWithNodeRef:
rotationRepresentation
eulerAngles
locationInNode:
nodeAtPoint:recursive:
isUserInteractionEnabled
parent
touchesBegan:withEvent:
touchesMoved:withEvent:
touchesEnded:withEvent:
touchesCancelled:withEvent:
_touchMap
_mouseIsDown
_rightMouseIsDown
_script
globalObject
setException:
evaluateScript:
exception
toString
setNode:
elementIndex
setScreenSize:
screenSize
isNodeManipulator
elementPosition
setElementIndex:
_screenSize
nodeManipulatorItemWithNode:screenSize:
setGizmo:
convertTransform:toNode:
_createBody
initWithType:shape:
bodyWithType:shape:
setMass:
physicsBody
isResting
setLinearRestingThreshold:
setAngularRestingThreshold:
_shapeHandleWithShape:owner:
_physicsWorldCreateIfNeeded:
moveToTransform:
presentationNode
physicsShape
mass
charge
setCharge:
friction
setFriction:
restitution
setRestitution:
rollingFriction
setRollingFriction:
damping
setDamping:
angularVelocity
setAngularVelocity:
angularDamping
setAngularDamping:
linearRestingThreshold
angularRestingThreshold
velocityFactor
setVelocityFactor:
angularVelocityFactor
setAngularVelocityFactor:
collisionBitMask
setCollisionBitMask:
contactTestBitMask
setContactTestBitMask:
allowsResting
setAllowsResting:
isAffectedByGravity
setAffectedByGravity:
usesDefaultMomentOfInertia
setUsesDefaultMomentOfInertia:
momentOfInertia
setMomentOfInertia:
centerOfMassOffset
setCenterOfMassOffset:
continuousCollisionDetectionThreshold
setContinuousCollisionDetectionThreshold:
commitImmediate
removePhysicsBody:handle:
addPhysicsBody:nodeRef:colGroup:colMask:colTest:
setPhysicsShape:
_didDecodeSCNPhysicsBody:
staticBody
dynamicBody
kinematicBody
respondsToCollision
setLinearSleepingThreshold:
linearSleepingThreshold
setAngularSleepingThreshold:
angularSleepingThreshold
continuousCollisionDetection
applyForce:impulse:
applyForce:atPosition:impulse:
applyTorque:impulse:
_activate
clearAllForces
setResting:
resetToTransform:
resetTransform
moveToPosition:
rotateToAxisAngle:
_ownerWillDie
_mass
_charge
_friction
_restitution
_rollingFriction
_continuousCollisionDetectionThreshold
_physicsShape
_type
_damping
_angularVelocity
_angularDamping
_velocityFactor
_angularVelocityFactor
_velocity
_ignoreGravity
_linearRestingThreshold
_angularRestingThreshold
_explicitMomentOfInertia
_momentOfInertia
_centerOfMassOffset
_collisionBitMask
_contactTestBitMask
_allowsResting
_isDefaultShape
_body
childNodeWithName:recursively:
runAction:
actionForKey:
runAction:afterActionWithKey:
_subSpriteKey
_actionKey
_waitForKeyedAction
_runOnSubSprite
_fired
_preTick:
commonInit
wakeUpAllBodies
removeBehavior:
parseSpecialKey:withPath:intoDestination:
initWithResult:
_rayTestWithSegmentFromPoint:toPoint:options:
arrayWithObject:
_createDynamicWorldIfNeeded
addBehavior:
_customEncodingOfSCNPhysicsWorld:
_customDecodingOfSCNPhysicsWorld:
setGravity:
setTimeStep:
_didDecodeSCNPhysicsWorld:
_physicsContact
initWithScene:
sceneWillDie
_isDefault
timeStep
contactDelegate
setContactDelegate:
removeAllBehaviors
objectInAllBehaviorsAtIndex:
allBehaviors
rayTestWithSegmentFromPoint:toPoint:options:
contactTestBetweenBody:andBody:options:
contactTestWithBody:options:
convexSweepTestWithShape:fromTransform:toTransform:options:
updateCollisionPairs
_needsRedraw
enumerateBodiesUsingBlock:
_reset
_findFieldAttachedToNode:
_updatePhysicsFieldsTrasforms
_step:
_defaultVehicleRayCaster
_drawDebugInAuthoringEnvironment:
.cxx_construct
_ghostPairCallback
_vehicleRayCaster
_debugDrawer
_aether
_hasActiveFields
_contactDelegate
_contact
_gravity
_speed
_scale
_timeStep
_fields
_elapsedTime
_behaviors
_bodies
physicsWorld:didBeginContact:
physicsWorld:didUpdateContact:
physicsWorld:didEndContact:
processInfo
operatingSystemVersion
bundleForClass:
getControlPointAtIndex:values:
functionWithControlPoints::::
SCN_simdMatrix4Value
SCN_arrayWithSimdMatrix4:
SCNVector4Value
valueWithBytes:objCType:
getValue:
valueWithCGRect:
valueWithCATransform3D:
CATransform3DValue
SCN_CGPointValue
SCN_valueWithCGPoint:
SCN_valueWithSimdMatrix4:
cameraRef
stringByResolvingSymlinksInPath
attributesOfItemAtPath:error:
timeIntervalSinceReferenceDate
globalGLSharedContext
initWithAPI:properties:
setGlobalGLSharedContext:
currentContext
_syncObjCModel
initWithLightRef:
parentWillDie:
initWithParent:propertyType:
_syncEntityObjCModel
initPresentationLightWithLightRef:
presentationLight
observeValueForKeyPath:ofObject:change:context:
identifier
setIdentifier:
intensity
setIntensity:
shadowColor
setShadowColor:
shadowRadius
setShadowRadius:
castsShadow
setCastsShadow:
shadowSampleCount
setShadowSampleCount:
orthographicScale
maximumShadowDistance
setMaximumShadowDistance:
automaticallyAdjustsShadowProjection
setAutomaticallyAdjustsShadowProjection:
shadowCascadeCount
setShadowCascadeCount:
gobo
copyPropertiesFrom:
IESProfileURL
setIESProfileURL:
probeType
setProbeType:
probeUpdateType
setProbeUpdateType:
probeExtents
setProbeExtents:
probeOffset
setProbeOffset:
parallaxCorrectionEnabled
setParallaxCorrectionEnabled:
_probeTextureMipsArray
set_probeTextureMipsArray:
probeEnvironment
setSpotFalloffExponent:
spotFalloffExponent
sphericalHarmonicsCoefficients
setSphericalHarmonicsCoefficients:
postCommandWithContext:object:key:applyBlock:
forcesBackFaceCasters
setForcesBackFaceCasters:
usesDeferredShadows
usesModulatedMode
setUsesDeferredShadows:
setUsesModulatedMode:
encodeInt:forKey:
encodeInt32:forKey:
setSampleDistributedShadowMaps:
decodeIntForKey:
setShadowCascadeSplittingFactor:
decodeInt32ForKey:
_customEncodingOfSCNLight:
valueWithCGSize:
_customDecodingOfSCNLight:
setBaked:
setShouldBakeDirectLighting:
setShouldBakeIndirectLighting:
set_sphericalHarmonics:
setParallaxCenterOffset:
setParallaxExtentsFactor:
setWithObject:
setTemperature:
CGSizeValue
setShadowMapSize:
setShadowBias:
setTechnique:
_didDecodeSCNLight:
lightWithLightRef:
technique
lightRef
copyAnimationChannelForKeyPath:property:
attributeForKey:
_sphericalHarmonics
shouldBakeDirectLighting
shouldBakeIndirectLighting
isBaked
shadowBias
shadowMapSize
temperature
forceBackFaceCasters
setForceBackFaceCasters:
adjustsShadowProjection
setAdjustsShadowProjection:
sampleDistributedShadowMaps
shadowCascadeSplittingFactor
_shadowCascadeDebugFactor
set_shadowCascadeDebugFactor:
shadowMode
setShadowMode:
parallaxCenterOffset
parallaxExtentsFactor
_light
_castsShadow
_usesDeferredShadows
_usesModulatedMode
_baked
_shouldBakeDirectLighting
_shouldBakeIndirectLighting
_automaticallyAdjustsShadowProjection
_forcesBackFaceCasters
_sampleDistributedShadowMaps
_color
_shadowColor
_shadowRadius
_intensity
_temperature
_orthographicScale
_shadowMapSize
_shadowSampleCount
_shadowCascadeCount
_maximumShadowDistance
_shadowCascadeSplittingFactor
_cascadeDebugFactor
_zNear
_zFar
_shadowBias
_probeType
_probeUpdateType
_parallaxCorrectionEnabled
_probeExtents
_probeOffset
_parallaxExtentsFactor
_parallaxCenterOffset
_attenuationStartDistance
_attenuationEndDistance
_attenuationFalloffExponent
_spotInnerAngle
_spotOuterAngle
_spotFalloffExponent
_gobo
_IESProfileURL
_probeEnvironment
sphericalHarmonicsLevel
initWithMaterialRef:
ownerWillDie
materialRef
setVertexShader:
setFragmentShader:
setProgram:
initPresentationMaterialWithMaterialRef:
presentationMaterial
commonProfile
_materialPropertyClass
_setColor:
_setC3DImageRef:
_setupContentsFromC3DImage
arrayWithObjects:
builtinProperties
customMaterialProperties
arrayByAddingObjectsFromArray:
_setupMaterialProperty:
presentationMaterialProperty
_property:
isLitPerPixel
_hasDefaultValues
propertyName
stringByAppendingFormat:
_copyAttributes:
shininess
transparency
transparencyMode
setTransparencyMode:
lightingModelName
setLitPerPixel:
cullMode
setCullMode:
program
locksAmbientWithDiffuse
setLocksAmbientWithDiffuse:
avoidsOverLighting
setAvoidsOverLighting:
fillMode
fresnelExponent
setFresnelExponent:
writesToDepthBuffer
setWritesToDepthBuffer:
readsFromDepthBuffer
setReadsFromDepthBuffer:
colorBufferWriteMask
blendMode
setBlendMode:
copyShaderModifiersFrom:
unlinkCustomPropertyWithParent:
linkCustomPropertyWithParent:andCustomName:
initWithOwner:
_setupShadableHelperIfNeeded
setShaderModifiers:
shaderModifiers
__shadableHelper
copyModifiersFrom:
shaderModifiersArgumentsNames
handleUnbindingOfSymbol:usingBlock:
_shadableSetValue:forUndefinedKey:
_setAttributes:
_customEncodingOfSCNMaterial:
_customDecodingOfSCNMaterial:
setIndexOfRefraction:
setSelfIlluminationOcclusion:
materialWithMaterialRef:
materialWithColor:
materialWithContents:
accessInstanceVariablesDirectly
resolveInstanceMethod:
materialNamed:
indexOfRefraction
selfIlluminationOcclusion
litPerPixel
content
setContent:
doubleSided
materialRefCreateIfNeeded
customMaterialPropertyNames
customMaterialAttributeNames
customMaterialAttributes
_material
_ambient
_diffuse
_specular
_emission
_reflective
_transparent
_multiply
_normal
_ambientOcclusion
_selfIllumination
_metalness
_roughness
_displacement
_valuesForUndefinedKeys
_shininess
_transparency
_indexOfRefraction
_fresnelExponent
_selfIlluminationOcclusion
_transparencyMode
_lightingModelName
_cullMode
_shadableHelper
_litPerPixel
_doubleSided
_locksAmbientWithDiffuse
_avoidsOverLighting
_writesToDepthBuffer
_readsFromDepthBuffer
_fillMode
_blendMode
_colorBufferWriteMask
objCType
URLForResource:withExtension:subdirectory:
dataWithContentsOfURL:
initForReadingFromData:error:
setClass:forClassName:
setRequiresSecureCoding:
setDecodingFailurePolicy:
particleSystemRef
geometryWithGeometryRef:
setEmitterShape:
setParticleColor:
particleImage
setParticleImage:
emissionDuration
setEmissionDuration:
emissionDurationVariation
setEmissionDurationVariation:
idleDuration
setIdleDuration:
idleDurationVariation
setIdleDurationVariation:
birthRate
setBirthRate:
birthRateVariation
setBirthRateVariation:
warmupDuration
setWarmupDuration:
emitterShape
birthLocation
setBirthLocation:
birthDirection
setBirthDirection:
emittingDirection
setEmittingDirection:
orientationDirection
setOrientationDirection:
acceleration
setAcceleration:
spreadingAngle
setSpreadingAngle:
isLocal
setIsLocal:
affectedByGravity
affectedByPhysicsFields
setAffectedByPhysicsFields:
physicsCollisionsEnabled
setPhysicsCollisionsEnabled:
isLightingEnabled
setLightingEnabled:
areSoftParticlesEnabled
setSoftParticlesEnabled:
particleDiesOnCollision
setParticleDiesOnCollision:
isBlackPassEnabled
setBlackPassEnabled:
particleAngle
setParticleAngle:
particleAngleVariation
setParticleAngleVariation:
particleVelocity
setParticleVelocity:
particleVelocityVariation
setParticleVelocityVariation:
particleAngularVelocity
setParticleAngularVelocity:
particleAngularVelocityVariation
setParticleAngularVelocityVariation:
particleLifeSpan
setParticleLifeSpan:
particleLifeSpanVariation
setParticleLifeSpanVariation:
particleBounce
setParticleBounce:
particleBounceVariation
setParticleBounceVariation:
particleFriction
setParticleFriction:
particleFrictionVariation
setParticleFrictionVariation:
particleCharge
setParticleCharge:
particleChargeVariation
setParticleChargeVariation:
particleColor
particleColorVariation
setParticleColorVariation:
systemSpawnedOnCollision
setSystemSpawnedOnCollision:
systemSpawnedOnDying
setSystemSpawnedOnDying:
systemSpawnedOnLiving
setSystemSpawnedOnLiving:
particleSize
setParticleSize:
particleSizeVariation
setParticleSizeVariation:
seed
setSeed:
renderingMode
setRenderingMode:
orientationMode
setOrientationMode:
imageSequenceAnimationMode
setImageSequenceAnimationMode:
particleGeometries
setParticleGeometries:
colliderNodes
setColliderNodes:
propertyControllers
setPropertyControllers:
sortingMode
setSortingMode:
particleMass
setParticleMass:
particleMassVariation
setParticleMassVariation:
dampingFactor
setDampingFactor:
speedFactor
setSpeedFactor:
fixedTimeStep
setFixedTimeStep:
stretchFactor
setStretchFactor:
imageSequenceRowCount
setImageSequenceRowCount:
imageSequenceColumnCount
setImageSequenceColumnCount:
imageSequenceInitialFrame
setImageSequenceInitialFrame:
imageSequenceInitialFrameVariation
setImageSequenceInitialFrameVariation:
imageSequenceFrameRate
setImageSequenceFrameRate:
imageSequenceFrameRateVariation
setImageSequenceFrameRateVariation:
initWithParticleSystemRef:
initPresentationSystemWithSystemRef:
numberWithShort:
_updateParticleC3DImage:
softParticlesEnabled
lightingEnabled
blackPassEnabled
_customEncodingOfSCNParticleSystem:
patchColorSecureDecodingIfNeeded
particleSystemNamed:
_customDecodingOfSCNParticleSystem:
setParticleIntensity:
setParticleIntensityVariation:
particleSystem
particleSystemNamed:inDirectory:
particleSystemWithParticleSystemRef:
typeOfProperty:
_setParticleImagePath:withResolvedPath:
setLocal:
lightEmissionRadiusFactor
setLightEmissionRadiusFactor:
particleIntensity
particleIntensityVariation
handleEvent:forProperties:withBlock:
addModifierForProperties:atStage:withBlock:
removeModifiersOfStage:
removeAllModifiers
_particleSystem
_emissionDuration
_emissionDurationVariation
_idleDuration
_idleDurationVariation
_birthRate
_birthRateVariation
_warmupDuration
_emitterShape
_birthLocation
_birthDirection
_emittingDirection
_orientationDirection
_acceleration
_spreadingAngle
_isLocal
_affectedByGravity
_affectedByPhysicsFields
_physicsCollisionsEnabled
_lightingEnabled
_softParticlesEnabled
_particleDiesOnCollision
_blackPassEnabled
_particleAngle
_particleAngleVariation
_particleVelocity
_particleVelocityVariation
_particleAngularVelocity
_particleAngularVelocityVariation
_particleLifeSpan
_particleLifeSpanVariation
_particleBounce
_particleBounceVariation
_particleFriction
_particleFrictionVariation
_particleCharge
_particleChargeVariation
_particleImage
_particleColor
_particleColorVariation
_systemSpawnedOnCollision
_systemSpawnedOnDying
_systemSpawnedOnLiving
_particleSize
_particleSizeVariation
_particleIntensity
_particleIntensityVariation
_seed
_renderingMode
_orientationMode
_imageSequenceAnimationMode
_particleGeometries
_colliderNodes
_propertyControllers
_sortingMode
_particleMass
_particleMassVariation
_dampingFactor
_speedFactor
_fixedTimeStep
_stretchFactor
_lightEmissionRadiusFactor
_imageSequenceColumnCount
_imageSequenceRowCount
_imageSequenceInitialFrame
_imageSequenceInitialFrameVariation
_imageSequenceFrameRate
_imageSequenceFrameRateVariation
_referenceName
dictionaryWithCapacity:
setC3dAnimation:
inputScale
inputBias
inputOrigin
inputMode
inputProperty
_setParent:
initPresentationNodeWithNodeRef:
physicsField
defaultCStringEncoding
cStringUsingEncoding:
_dump:
_dumpNodeTree:tab:
orientation
setOrientation:
pivot
setPivot:
renderingOrder
movabilityHint
setMovabilityHint:
rendererDelegate
setRendererDelegate:
setPhysicsField:
constraints
setConstraints:
authoringEnvironmentNode
focusBehavior
setFocusBehavior:
authoringEnvironmentCompanionNode
setAuthoringEnvironmentCompanionNode:
isGizmo
actionKeys
runAction:forKey:
skinner
setPhysicsBody:
_copyRecursively
initWithNodeRef:
_childNodesPassingTest:recursively:output:
childNodesPassingTest:recursively:
_enumerateChildNodesUsingBlock:
enumerateChildNodesUsingBlock:
_childNodesWithAttribute:output:recursively:
objectInChildNodesWithAttribute:firstOnly:
_findComponentWithType:
_setComponent:withType:
cameraWithCameraRef:
presentationCamera
presentationGeometry
skinnerWithSkinnerRef:
_setBaseGeometry:
morpherWithMorphRef:
simdConvertPosition:toNode:
_updateAffine
simdRotation
_quaternion
simdEulerAngles
setSimdEulerAngles:
simdPosition
setSimdScale:
simdScale
setSimdRotation:
setWithObjects:
setSimdTransform:
simdTransform
setSimdWorldPosition:
setSimdPivot:
simdPivot
_removeComponentWithType:
_assignComponent:toContainerWithType:
__light
__skinner
skinnerRef
__morpher
morphRef
__camera
__geometry
filters
renderNode:renderer:arguments:
rendererWithContext:options:
_engineContext
substringWithRange:
_reSyncModelTree
countOfChildNodes
insertObject:inChildNodesAtIndex:
canAddChildNode:
insertObject:atIndex:
_setHasFocusableChild
_setPausedOrPausedByInheritance:
__insertObject:inChildNodesAtIndex:
removeObjectAtIndex:
__removeObjectFromChildNodesAtIndex:
removeObjectFromChildNodesAtIndex:
_updateFocusableCache
indexOfChildNode:
replaceObjectInChildNodesAtIndex:withObject:
simdGetBoundingSphereCenter:radius:
isPresentationInstance
getBoundingSphereCenter:radius:
setCenter:
setRadius:
setMin:
setMax:
setGeometryRef:
flattenedClone
allValues
isPaused
_focusableCandidates:
_isEffectivelyHidden
isFocusInteractionEnabled
_isEligibleForFocus
focusSystemForEnvironment:
requestFocusUpdateToEnvironment:
updateFocusIfNeeded
currentUIFocusEnvironment
removeActionForKey:
runAction:forKey:completionHandler:
constraintRef
entity
_removeDeadParticleSystem:
_particleSystems
_audioPlayers
simdConvertTransform:toNode:
simdConvertTransform:fromNode:
setBoundingBoxMin:max:
setFilters:
_customEncodingOfSCNNode:usePresentationInstance:
_encodeNodePropertiesWithCoder:
_customDecodingOfSCNNode:
_didDecodeSCNNode:
keyPathsForValuesAffectingPosition
keyPathsForValuesAffectingTransform
keyPathsForValuesAffectingRotation
keyPathsForValuesAffectingEulerAngles
keyPathsForValuesAffectingOrientation
keyPathsForValuesAffectingScale
runAction:completionHandler:
removeAllActions
hasActions
setNeedsFocusUpdate
shouldUpdateFocusInContext:
didUpdateFocusInContext:withAnimationCoordinator:
preferredFocusEnvironments
parentFocusEnvironment
focusItemContainer
soundIdentifierForFocusUpdateInContext:
preferredFocusedView
canBecomeFocused
frame
didHintFocusMovement:
_initChildNodesArray
dump
_dumpTree
objectInChildNodesWithName:
enumerateNodesUsingBlock:
childNodesWithAttribute:recursively:
childNodeWithName:
jsChildNodesWithAttribute:
hitTestWithSegmentFromPoint:toPoint:options:
_registerAsObserver
_updateTransform
worldOrientation
setWorldOrientation:
quaternion
setQuaternion:
_setQuaternion:
_euler
_setPosition:
_setScale:
setWorldPosition:
worldPosition
isHittable
mutableChildNodes
isJoint
setIsJoint:
renderInContext:
objectInChildNodesAtIndex:
removeAllChilds
insertChildNode:atIndex:
replaceChildNode:with:
getFrustum:withViewport:
getBoundingSphere
getBoundingBox
_subdividedCopyWithSubdivisionLevel:
setPaused:
_isEligibleForFocusInteraction
actions
setEntity:
removeAllParticleSystems
countOfParticleSystems
objectInParticleSystemsAtIndex:
insertObject:inParticleSystemsAtIndex:
removeObjectFromParticleSystemsAtIndex:
replaceObjectInParticleSystemsAtIndex:withObject:
removeAllAudioPlayers
countOfAudioPlayers
objectInAudioPlayersAtIndex:
insertObject:inAudioPlayersAtIndex:
removeObjectFromAudioPlayersAtIndex:
replaceObjectInAudioPlayerAtIndex:withObject:
convertPosition:fromNode:
convertVector:toNode:
convertVector:fromNode:
convertTransform:fromNode:
authoringEnvironmentPresentationNode
setAuthoringEnvironmentPresentationNode:
_parent
_childNodes
_presentationInstance
_lightLoaded
_geometryLoaded
_cameraLoaded
_skinnerLoaded
_morpherLoaded
_paused
_pausedByInheritance
_affineUpToDate
_transformUpToDate
_hasPivot
_isJoint
_rotationRepresentation
_movability
_hidden
_ignoreAnimationWhenCopying_tmp
_focusBehavior
_isFocusableOrHasFocusableChild
_authoringEnvironmentNode
_hasComponentBitmask
_transform
_position
_rotation
_opacity
_renderingOrder
_components
_actions
_fixedBoundingBoxExtrema
_valueForKey
_rendererDelegate
simdLookAt:
simdLookAt:up:localFront:
worldRight
worldFront
lookAt:
lookAt:up:localFront:
localTranslateBy:
localRotateBy:
rotateBy:aroundTarget:
localUp
localRight
localFront
bones
setBones:
_setRootNode:
sceneNamed:inDirectory:options:
URLByResolvingSymlinksInPath
sceneSourceWithURL:options:
sceneWithClass:options:error:
dictionaryWithDictionary:
sceneWithData:options:
sceneSourceWithData:options:
initWithSceneRef:
lowercaseString
canImportFileExtension:
startDelay
frameRate
setFrameRate:
playbackSpeed
setPlaybackSpeed:
setUpAxis:
archivedDataWithRootObject:options:
writeToURL:options:error:
library
exportAssetToURL:
writeToURL:options:delegate:progressHandler:
indexAtPosition:
initWithIndexes:length:
_nodeWithIndexPath:
URLWithString:
initWithURL:options:
_createSceneRefWithOptions:statusHandler:
initForJavascript:
lightingEnvironment
set_allowsDefaultLightingEnvironmentFallback:
_customEncodingOfSCNScene:
_didEncodeSCNScene:
setDocumentURL:
_customDecodingOfSCNScene:
setRootNode:
setFogStartDistance:
setFogEndDistance:
setFogDensityExponent:
setFogColor:
_didDecodeSCNScene:
sceneNamed:
sceneNamed:options:
sceneWithURL:options:
sceneWithURL:atIndex:options:
sceneWithData:atIndex:options:
sceneWithSceneRef:
canImportFileUTI:
supportedFileUTIsForImport
supportedFileUTIsForExport
_indexPathForNode:
jsConstructor
_clearSceneRef
_setSourceURL:
_scenes
setSceneSource:
sceneSource
root
setRootNode:forLayer:
rootNodeForLayer:
_scaleSceneBy:
background
_allowsDefaultLightingEnvironmentFallback
fogColor
fogEndDistance
fogDensityExponent
fogStartDistance
_dumpToDisk
addSceneAnimation:forKey:target:
addParticleSystem:withTransform:
setPausedForEditing:
isPausedForEditing
_subnodeFromIndexPath:
_prettifyForPreview
_sceneSource
_physicsWorld
_rootNode
_layerRootNode
_background
_environment
_userAttributes
_fogStartDistance
_fogEndDistance
_fogDensityExponent
_fogColor
_sourceURL
_pausedForEditing
setViewMatrix:
projectionMatrix
setProjectionMatrix:
transitionStartTime
setTransitionStartTime:
transition
setTransition:
outgoingPointOfView
setOutgoingPointOfView:
outgoingScene
setOutgoingScene:
context
offscreenRendererWithContext:size:
setBackgroundColor:
sceneTime
setSceneTime:
setSize:
transitionPass
prepareRendererAtIndex:withScene:renderSize:pointOfView:parentRenderer:
_transitionStartTime
_transition
_outgoingScene
_outgoingPointOfView
completionHandler
_transitionPass
_renderers
clearColor
antialiasingMode
set_antialiasingMode:
_updateEngineCallbacks
sharedApplication
statusBarOrientation
defaultCenter
_UIOrientationDidChangeNotification:
addObserver:selector:name:object:
setContext:
setPrefersOpenGL:
_initWithOptions:isPrivateRenderer:privateRendererOwner:clearsOnDraw:context:renderingAPI:
removeObserver:
removeSourceRenderersForEngineContext:
viewportWithLetterboxingIfNeeded:
setContentScaleFactor:
_invalidateFramebuffer
_prepareSKRenderer
_prepareRenderTarget
_deleteGLFramebuffer
_createPrepareFramebufferIfNeeded
_createOffscreenFramebufferIfNeeded
_prepareGLRenderTarget
scn_backingLayer
renderbufferStorage:fromDrawable:
_sampleCount
_antialiasingMode
animationDuration
disableActions
postNotificationName:object:
setFromValue:
setToValue:
hasCustomProjectionTransform
xFov
projectionDirection
_projectPoint:viewport:
_unprojectPoint:viewport:
setImmediateModeRestrictedContext:
_getFrameIndex
renderer:didRenderScene:atTime:
_renderer:didRenderScene:atTime:
_renderer:willRenderScene:atTime:
renderer:willRenderScene:atTime:
_renderer:subdivDataForHash:
_renderer:didBuildSubdivDataForHash:dataProvider:
_isEditor
pausesIncomingScene
pausesOutgoingScene
setAnimationDuration:
_prepareForTransition:outgoingScene:outgoingPointOfView:completionHandler:
_defaultPOVForScene:
_contentsScaleFactor
setBackingScaleFactor:
_setupSKRendererIfNeeded
scaleMode
_sceneDidUpdate:
removeObserver:name:object:
_overlaysDidUpdate:
_installContext
_beginFrame
_endFrame
_collectCompilationErrors
_preparePreloadRenderer
_prepareObject:shouldAbortBlock:
_releasePreloadRenderer
currentProgress
isCancelled
_preloadResource:abortHandler:
progressWithTotalUnitCount:
becomeCurrentWithPendingUnitCount:
resignCurrent
renderer:updateAtTime:
renderer:didApplyAnimationsAtTime:
renderer:didSimulatePhysicsAtTime:
renderer:didApplyConstraintsAtTime:
_renderer:inputTimeForCurrentFrameWithTime:
_renderer:updateAtTime:
_renderer:didApplyAnimationsAtTime:
_renderer:didSimulatePhysicsAtTime:
_renderer:didApplyConstraintsAtTime:
setPlaying:
_setSceneTime:
updateCurrentTimeIfPlayingWithSystemTime:
authoringEnvironmentForSceneRenderer:createIfNeeded:
applicationState
_systemTime
_updateSystemTimeAndDeltaTimeWithCurrentTime:
_update:
_updateWithSystemTime:
_needsRepetitiveRedraw
render:
_hitTest:viewport:options:
_isNodeInsideFrustum:withPointOfView:viewport:
_nodesInsideFrustumWithPointOfView:viewport:
_play
_pause
setupAuthoringEnvironement
_resolveAndDiscardGL
presentRenderbuffer:
_showsAuthoringEnvironment
authoringDisplayMask
set_showsAuthoringEnvironment:
setAuthoringDisplayMask:
_compilationErrors
_reloadDebugOptions
_drawAtTime:
isJitteringEnabled
updateAndDrawStatisticsIfNeeded
_computeNextFrameTime
set_nextFrameTime:
_needsRedrawAsap
_drawSceneWithNewRenderer:
_drawSceneWithLegacyRenderer:
_clearBackBuffer
set_systemTime:
set_deltaTime:
_installViewport
_duration
settingsForTransition:atTime:renderIncomingToTexture:renderOutgoingToTexture:renderIncomingToScreen:renderOutgoingToScreen:
_viewport
set_viewport:
renderAtTime:
_drawScene:
textureID
renderTransition:withInputTexture:outputTexture:inputTextureSize:outputTextureSize:time:
_updatePointOfView
_renderAtTime:
_renderAtTime:viewport:encoder:passDescriptor:commandQueue:commandBuffer:
_installGLContextAndSetViewport
createSnapshot:
imageWithCGImage:
_setBackingSize:
snapshotRendererWithSize:
_computedLightingEnvironmentMapsPath
set_computedLightingEnvironmentMapsPath:
snapshotAtTime:
_setupOffscreenRendererWithSize:
overlaySKScene
setOverlaySKScene:
setJitteringEnabled:
autoenablesDefaultLighting
setAutoenablesDefaultLighting:
autoAdjustCamera
setAutoAdjustCamera:
isPlaying
debugOptions
setDebugOptions:
_superSamplingFactor
set_superSamplingFactor:
_screenTransform
set_screenTransform:
set_collectCompilationErrors:
__setTransitionContext:
updateProbes:atTime:
renderingAPI
_jitterRedisplay
drain
_setInterfaceOrientation:
rendererWithDevice:options:
presentScene:withTransition:incomingPointOfView:completionHandler:
isNodeInsideFrustum:withPointOfView:
nodesInsideFrustumWithPointOfView:
projectPoint:
unprojectPoint:
prepareObject:shouldAbortBlock:
prepareObjects:withCompletionHandler:
showsStatistics
setShowsStatistics:
audioEngine
audioEnvironmentNode
audioListener
setAudioListener:
currentCommandBuffer
currentRenderPassDescriptor
currentRenderCommandEncoder
_setContentsScaleFactor:
_backingSize
set_aspectRatio:
_aspectRatio
_rendererContextGL
_renderContextMetal
setPointOfCulling:
pointOfCulling
_projectPoints:count:viewport:
_didRenderScene:
_willRenderScene:
_readSubdivCacheForHash:
_writeSubdivCacheForHash:dataProvider:
setScene:completionHandler:
disableOverlays
setDisableOverlays:
_copyPassDescription
_copyRenderGraphDescription
set_renderGraphEnabled:
_renderGraphEnabled
_renderGraphFrameRecordingAtPath:withCompletion:
_recordWithoutExecute
set_recordWithoutExecute:
programWithNode:withMaterial:
_privateRendererShouldForwardSceneRendererDelegationMessagesToOwner
set_privateRendererShouldForwardSceneRendererDelegationMessagesToOwner:
_nextFrameTime
currentTime
setCurrentTime:
_drawOverlaySceneAtTime:
_stop
setRendersContinuously:
jitteringEnabled
frozen
setFrozen:
_copyPerformanceStatistics
_displayLinkStatsTick
_displayLinkStatsTack
_runningInExtension
_presentFramebuffer
_enablesDeferredShading
set_enablesDeferredShading:
_disableLinearRendering
set_disableLinearRendering:
_drawableSafeAreaInsets
set_drawableSafeAreaInsets:
_drawWithJitteringPresentationMode
_renderSceneWithEngineContext:sceneTime:
_draw
renderWithViewport:commandBuffer:passDescriptor:
renderAtTime:viewport:commandBuffer:passDescriptor:
renderAtTime:viewport:encoder:passDescriptor:commandQueue:
snapshotAtTime:withSize:antialiasingMode:
_updateProbes:withProgress:
copySnapshotWithSize:
initOffscreenRendererWithSize:options:
privateRendererOwner
_pointOfCulling
_lock
__renderingQueue
__antialiasingMode
__preparePixelFormat
_framebufferInfo
_mtlTexture
_pointOfViewWasSet
_shouldDeleteFramebuffer
_rendersContinuously
_isPrivateRenderer
_isViewPrivateRenderer
_renderingSnapshot
_renderingPrepare
_autoUpdate
_currentSceneTime
_currentSystemTime
_deltaTime
_forceSystemTime
_lastSystemTime
__nextFrameTime
_transitionContext
_playing
_isAnimating
_adaptativeState0
_adaptativeEndFrame
_adaptativeTechniqueTimeStamp
_renderingAPI
__viewport
__aspectRatio
__drawableSafeAreaInsets
_glContext
_renderContext
_jitteringEnabled
_frozen
_privateRendererOwnerDelegationConformance
_delegationConformance
_backgroundColor
_c3dBackgroundColor
_preloadRenderer
_privateRendererOwner
_snapshotRenderer
_overlayRenderer
_overlayScene
_disableOverlays
_contentScaleFactor
_isRunningInExtension
_watchAppInForeground
_debugOptions
_showStatistics
_showAuthoringEnvironment
_statisticsTimeStamp
snapshot
setAntialiasingMode:
encodeBytes:length:forKey:
decodeBytesForKey:returnedLength:
CGPath
flatness
bezierPathWithCGPath:
setFlatness:
unarchivedObjectOfClasses:fromData:error:
requiresSecureCoding
finishDecoding
animationRef
keyPathSrc
keyPathDst
animationWithC3DAnimation:
_setAnimation:
pathComponents
pathForResource:ofType:inDirectory:
initWithContentsOfFile:
CGImage
imageNamed:
checkResourceIsReachableAndReturnError:
groundColor
turbidity
sunElevation
upperAtmosphereScattering
groundAlbedo
horizonElevation
gamma
exposure
brightness
contrast
saturation
channelEncoding
dimensions
highDynamicRangeCompression
SCNMutableDeepCopy
keys
_setupFrom:
applyFunction:withContext:
_keys
_keyValues
addIndexes:
removeIndexes:
allObjects
_mutex
initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:upperAtmosphereScattering:groundAlbedo:
setHorizonElevation:
setGamma:
setExposure:
setBrightness:
setContrast:
setSaturation:
unarchivedObjectOfClass:fromData:error:
setGroundColor:
setHighDynamicRangeCompression:
updateTexture
rangeValue
stringWithCapacity:
stringWithString:
scn_stringByReplacingCharactersInRanges:withStrings:
_convertToCA
_clearC3DCache
timingFunctions
setTimingFunctions:
tensionValues
setTensionValues:
continuityValues
setContinuityValues:
biasValues
setBiasValues:
keyPath
setAutoreverses:
autoreverses
setTimeOffset:
timeOffset
setFadeInDuration:
fadeInDuration
setFadeOutDuration:
fadeOutDuration
isRemovedOnCompletion
setCommitsOnCompletion:
commitsOnCompletion
setAnimationEvents:
animationEvents
isAdditive
setCumulative:
isCumulative
c3dAnimation
additive
cumulative
_c3dAnimation
_caReady
setTime:
setEventBlock:
animationEventWithKeyTime:block:
eventBlock
_eventTime
_eventBlock
fromValue
toValue
byValue
animationTimingFunction
functionWithName:
animationPlayerWithAnimationPlayerRef:
calculationMode
animationPlayerRef
caAnimation
SCN_evaluateAtTime:reverse:to:
initWithTimingFunctionRef:
functionWithTimingMode:
functionWithCAMediaTimingFunction:
c3dTimingFunction
_timingFunction
_setAnimationRef:
initWithC3DAnimation:
isAppliedOnCompletion
fillsForward
fillsBackward
setStartDelay:
setAppliedOnCompletion:
setFillsForward:
setFillsBackward:
animationWithContentsOfURL:
animationFromScene:
initWithCAAnimation:
_didMutate
setBlendInDuration:
setBlendOutDuration:
animationDidStart
setAnimationDidStart:
animationDidStop
setAnimationDidStop:
blendInDuration
blendOutDuration
_animationRef
_keyPath
_repeatCount
_timeOffset
_beginTime
_autoreverses
_removedOnCompletion
_applyOnCompletion
_additive
_cumulative
_usesSceneTimeBase
_fillForward
_fillBackward
_animationEvents
_fadeInDuration
_fadeOutDuration
_animationDidStart
_animationDidStop
_userInfo
_caAnimationCache
_userAnimation
initWithAnimationPlayerRef:
initWithSCNAnimation:
weight
setWeight:
paused
setBlendFactor:
stopWithBlendOutDuration:
animationPlayerWithAnimation:
blendFactor
stop
stopWithFadeOutDuration:
_playerRef
_animation
_weight
sortedArrayUsingComparator:
stiffness
initialVelocity
animationDidStart:
componentsJoinedByString:
setByValue:
animationDidStop:finished:
_shouldCacheWithOptions:
sceneSourceOptions
initWithKeyOptions:valueOptions:capacity:
_cachedSceneSourceForURL:options:
_cacheSceneSource:forURL:options:
_removeCachedSceneSourceIfNeededForURL:
initWithData:options:
sceneCount
sceneWithOptions:error:
errorWithDomain:code:userInfo:
localizedStringForKey:value:table:
dictionaryWithObjectsAndKeys:
initForReadingWithData:secure:
assetCatalogForResourceURL:
setAssetCatalog:
_sceneWithClass:options:statusHandler:
sceneWithClass:options:statusHandler:
copyPropertiesAtIndex:options:
copyImageFromC3DImage:
numberWithUnsignedLong:
longValue
_appendToEntries:entriesWithType:passingTest:entryObjectConstructor:
entryWithIdentifier:withClass:
identifiersOfEntriesWithClass:
sceneTypes
sceneFileTypes
unarchiver:cannotDecodeObjectOfClassName:originalClasses:
unarchiver:didDecodeObject:
unarchiver:willReplaceObject:withObject:
unarchiverWillFinish:
unarchiverDidFinish:
countOfScenes
sceneAtIndex:options:
sceneAtIndex:options:error:
sceneWithOptions:statusHandler:
propertyForKey:
sceneSourceRef
c3dDataRepresentation
entriesPassingTest:
entryWithID:withClass:
IDsOfEntriesWithClass:
sourceStatus
canExportToColladaWithNoDataLoss
performConsistencyCheck
_lastLoadedScene
_lastOptions
_sceneLoaded
_sceneSourceOptions
documentEnclosingURL
initForReadingWithData:
lookUpKey
setLookUpKey:
lookUpFoundInstance
setLookUpFoundInstance:
_assetCatalog
_documentURL
allocWithZone:
initWithLength:
initForWritingWithMutableData:
finishEncoding
isEqualToDictionary:
simdLocalCoordinates
simdWorldCoordinates
simdLocalNormal
simdWorldNormal
textureCoordinatesWithMappingChannel:
geometryIndex
boneNode
faceIndex
localCoordinates
localNormal
worldNormal
textureCoordinate
modelTransform
_result
simdModelTransform
authoringEnvironmentForScene:createIfNeeded:
prepareScene:
addedNode:
setAutomaticallyAdjustsZRange:
setAuthoringCameraType:
setDisplayMask:
setFirstMaterial:
geometryForLightType:
particlesGeometry
compare:
cameraGeometry
cameraOrthographicFrustumGeometry
cameraFrustumGeometry
cameraNearPlaneGeometry
fieldGeometry
addLightNode:
addParticlesNode:
addCameraNode:
addPhysicsFieldNode:
removeLightNode:
removeParticlesNode:
removeCameraNode:
removePhysicsFieldNode:
member:
_resetLightAuthoringWithContainerNode:source:light:
updateLightTypeForNode:source:light:screenspaceScalingFactor:
setupParticleMeshEmitter:authoringNode:
defaultCameraController
_updateRootsVisibility
authoringEnvironmentForScene:
authoringCameraNodes
manipulator
removedNode:
selectNode:
addNodeToSelection:
selectNodes:
cancelSelection
updateLightNode:withSourceNode:
updateParticlesNode:withSourceNode:
updateCameraNode:withSourceNode:
updateFieldNode:withSourceNode:
updateWithRenderer:
authoringLayer
displayMask
didTapAtPoint:
setAuthoringCamera:forView:
authoringCamera:
_selection
_layerRoot
_overlayLayerRoot
_lightRoot
_cameraRoot
_particlesRoot
_physicsFieldsRoot
_cameraTarget
_pointsOfViewRoot
_lightsDictionary
_camerasDictionary
_particlesDictionary
_physicsFieldsDictionary
_renderer
_lightGeometry
_cameraFrustumGeometry
_cameraOrthographicFrustumGeometry
_cameraGeometry
_cameraNearPlaneGeometry
_particlesGeometry
_fieldGeometry
_displayMask
_paleGreen
_paleBlue
_red
_green
_blue
_cyan
_yellow
_orange
_pink
_grayLight
_grayMedium
_grayDark
_white
_manipulator
authoringCameraType
setValueForKey:optionKey:options:
pyramidWithWidth:height:length:
capsuleWithCapRadius:height:
floor
planeWithWidth:height:options:
boxWithWidth:height:length:cornerRadius:options:
pyramidWithWidth:height:length:options:
sphereWithRadius:options:
cylinderWithRadius:height:options:
coneWithHeight:topRadius:bottomRadius:options:
tubeWithInnerRadius:outerRadius:height:options:
capsuleWithRadius:height:options:
torusWithRingRadius:pipeRadius:options:
floorWithOptions:
initWithGeometryRef:
reflectionFalloffStart
reflectionFalloffEnd
setReflectionFalloffStart:
setReflectionFalloffEnd:
_setupObjCModelFrom:
reflectivity
setReflectivity:
reflectionResolutionScaleFactor
setReflectionResolutionScaleFactor:
reflectionSampleCount
setReflectionSampleCount:
reflectionCategoryBitMask
setReflectionCategoryBitMask:
setWidth:
_customDecodingOfSCNFloor:
initWithFloorGeometryRef:
floorRef
setHeight:
reflectionFallOffStart
reflectionFallOffEnd
setReflectionFallOffStart:
setReflectionFallOffEnd:
__createCFObject
_usesCustomScaleFactor
_reflectivity
_reflectionFalloffStart
_reflectionFalloffEnd
_reflectionCategoryBitMask
_width
_length
_reflectionResolutionScaleFactor
_reflectionSampleCount
initWithCameraRef:
setXFov:
setYFov:
_updateFocalLength
initPresentationCameraWithCameraRef:
dofIntensity
setDofIntensity:
_updateFov
setProjectionDirection:
projectionTransformWithViewportSize:
wantsDepthOfField
setWantsDepthOfField:
focalBlurSampleCount
setFocalBlurSampleCount:
focalSize
setFocalSize:
automaticallyAdjustsZRange
wantsHDR
setWantsHDR:
whitePoint
setWhitePoint:
averageGray
setAverageGray:
wantsExposureAdaptation
setWantsExposureAdaptation:
exposureAdaptationDuration
setExposureAdaptationDuration:
exposureAdaptationBrighteningSpeedFactor
setExposureAdaptationBrighteningSpeedFactor:
exposureAdaptationDarkeningSpeedFactor
setExposureAdaptationDarkeningSpeedFactor:
exposureAdaptationHistogramRangeLowProbability
setExposureAdaptationHistogramRangeLowProbability:
exposureAdaptationHistogramRangeHighProbability
setExposureAdaptationHistogramRangeHighProbability:
exposureAdaptationMode
setExposureAdaptationMode:
minimumExposure
setMinimumExposure:
maximumExposure
setMaximumExposure:
bloomIntensity
setBloomIntensity:
bloomThreshold
setBloomThreshold:
bloomIteration
setBloomIteration:
bloomBlurRadius
setBloomBlurRadius:
vignettingPower
setVignettingPower:
vignettingIntensity
setVignettingIntensity:
colorFringeStrength
setColorFringeStrength:
colorFringeIntensity
setColorFringeIntensity:
motionBlurIntensity
setMotionBlurIntensity:
screenSpaceAmbientOcclusionIntensity
setScreenSpaceAmbientOcclusionIntensity:
screenSpaceAmbientOcclusionRadius
setScreenSpaceAmbientOcclusionRadius:
screenSpaceAmbientOcclusionBias
setScreenSpaceAmbientOcclusionBias:
screenSpaceAmbientOcclusionDepthThreshold
setScreenSpaceAmbientOcclusionDepthThreshold:
screenSpaceAmbientOcclusionNormalThreshold
setScreenSpaceAmbientOcclusionNormalThreshold:
screenSpaceAmbientOcclusionSampleCount
setScreenSpaceAmbientOcclusionSampleCount:
screenSpaceAmbientOcclusionDownSample
setScreenSpaceAmbientOcclusionDownSample:
setProjectionTransform:
_customEncodingOfSCNCamera:
setExposureOffset:
_didDecodeSCNCamera:
keyPathsForValuesAffectingFieldOfView
keyPathsForValuesAffectingFocalLength
exposureOffset
aperture
setAperture:
fieldOfViewOrientation
setFieldOfViewOrientation:
xMag
setXMag:
yMag
setYMag:
projectionTransform
colorGrading
focalDistance
setFocalDistance:
_camera
_custom
_legacyFov
_usesOrthographicProjection
_automaticallyAdjustsZRange
_projectionDirection
_xFov
_yFov
_fieldOfView
_focalLength
_sensorSize
_fStop
_focusDistance
_dofIntensity
_bladeCount
_focalBlurSampleCount
_projectionTransform
_colorGrading
_wantsHDR
_whitePoint
_averageGray
_exposureOffset
_minimumExposure
_maximumExposure
_wantsExposureAdaptation
_exposureAdaptationDuration
_exposureAdaptationBrighteningSpeedFactor
_exposureAdaptationDarkeningSpeedFactor
_exposureAdaptationHistogramRangeHighProbability
_exposureAdaptationHistogramRangeLowProbability
_exposureAdaptationMode
_bloomIntensity
_bloomThreshold
_bloomIteration
_bloomBlurRadius
_motionBlurIntensity
_vignettingPower
_vignettingIntensity
_colorFringeStrength
_colorFringeIntensity
_saturation
_contrast
_screenSpaceAmbientOcclusion
materialAttachmentWithGLKTextureInfo:
glID
setGlID:
propertyType
_clearContents
removeSourceRenderersForSource:
_animationPathForKey:
_updateMaterialColor:
_updateMaterialNumber:
textureSampler
_updateMaterialFilters
_presentationMappingChannel
effectSlotCreateIfNeeded:
_updateMaterialBorderColor:
_updateMaterialAttachment:
_textureOptions
copyC3DImageFromImage:textureOptions:wasCached:
_updateMaterialImage:
_updateC3DImageWithContents:
_updateMaterialSKScene:
_updateMaterialSKTexture:
_updateMaterialLayer:
setUiView:
setUiWindow:
connectToProxy:
_layerDidChange:
_updateMaterialUIComponent:
setImage:
setSkScene:
setSkTexture:
setAttachment:
setUIView:
setUIWindow:
setFloatValue:
image
_updateMaterialProceduralContents:
_updateMaterialMTLTexture:
__allocateContentTransformIfNeeded
_updateMaterialPropertyTransform:
_copyC3DImageFromImageData:typeID:
copyC3DImageFromImage:textureOptions:
initWithCGImage:
_copyImageFromC3DImage:
minificationFilter
magnificationFilter
contentsTransform
wrapS
wrapT
sRGBTexture
setSRGBTexture:
borderColor
setBorderColor:
materialPropertyWithContents:
initPresentationMaterialPropertyWithModelProperty:
borderColor4
_skSceneDidChange:
hasAlpha
filteringMode
usesMipmaps
setMaxAnisotropy:
_customEncodingOfSCNMaterialProperty:
_customDecodingOfSCNMaterialProperty:
_didDecodeSCNMaterialProperty:
dvt_supportedTypesForPropertyContents
captureDeviceOutputConsumer
initWithParent:andCustomName:
color4
attachment
pvrtcData
skScene
skTexture
UIView
maxAnisotropy
setProceduralContents:
proceduralContents
setMtlTexture:
mtlTexture
_isCommonProfileProperty
_sRGB
_preventWarmup
_propertyType
_customSlotName
_borderColor
_contents
_contentType
_mappingChannel
_minificationFilter
_magnificationFilter
_mipFilter
_wrapS
_wrapT
_textureComponents
_maxAnisotropy
_customSlot
_c3dImage
_contentTransform
_runtimeResolvedPath
glTextureId
textureTarget
textureRect
isRotated
string
geometryDescription
initPresentationGeometryWithGeometryRef:
meshSource
meshElement
geometrySourceWithMeshSourceRef:
geometryElementWithMeshElementRef:
_setupGeometrySources
_setupGeometryElements
levelsOfDetail
setLevelsOfDetail:
subdivisionLevel
wantsAdaptiveSubdivision
setWantsAdaptiveSubdivision:
_subdivisionSettings
set_subdivisionSettings:
_copyAttributesTo:
_materialWithName:
_expand
mutableMaterials
_firstMaterial
removeMaterialAtIndex:
insertMaterial:atIndex:
replaceObjectInMaterialsAtIndex:withObject:
insertObject:inMaterialsAtIndex:
indexOfObject:
removeObjectFromMaterialsAtIndex:
removeAllMaterials
parseSpecialKey:withPath:intoDestination:remainingPath:
thresholdMode
thresholdValue
replaceMaterial:with:
removeMaterial:
_customEncodingOfSCNGeometry:
_customDecodingOfSCNGeometry:
_setGeometryRef:
_releaseCachedSourcesAndElements
geometrySourceForSemantic:
_hasFixedBoundingBoxExtrema
interleavedCopy
_renderableCopy
keyForNodeAttributes
materialWithName:
countOfMaterials
objectInMaterialsAtIndex:
setPrimitiveType:
edgeCreasesElement
edgeCreasesSource
_unifyNormals
_geometry
_sources
_elements
_sourceChannels
_materials
_levelsOfDetail
_subdivisionLevel
_subdivisionIsAdaptive
_edgeCreasesSource
_edgeCreasesElement
initWithMeshSource:
mutableGeometrySourcesForSemantic:
mutateGeometrySourcesWithSemantics:usingBlock:
item
setItem:
timestamp
setTimestamp:
cacheObject:withTimestamp:forKey:
URLOfResourceNamed:
dataWithContentsOfFile:
enumeratorAtPath:
nextObject
caseInsensitiveCompare:
lookUpKeyForObjectNamed:class:
recursivePathsForResourcesOfType:inDirectory:
fileURLWithPath:isDirectory:
assetCatalogNamed:
clearCache
pathByMakingURLRelativeToCatalog:
_cache
sceneDatabase
addInstance:withName:class:
setAnimation:
setInputMode:
setInputScale:
setInputBias:
setInputOrigin:
setInputProperty:
_customEncodingOfSCNParticlePropertyController:
_customDecodingOfSCNParticlePropertyController:
particlePropertyControllerWithAnimation:
controllerWithAnimation:
_inputMode
_inputScale
_inputBias
_inputOrigin
_inputProperty
initWithSkinnerRef:
_setSkeleton:
_createSkinnerWithVertexCount:bones:boneWeights:boneIndices:baseGeometry:
bytesPerComponent
floatComponents
componentsPerVector
createSkinnerWithBaseGeometry:bones:boneWeights:boneIndices:
setBoneInverseBindTransforms:
dataWithBytesNoCopy:length:freeWhenDone:
_geometrySourceWithData:semantic:vectorCount:componentType:componentCount:dataOffset:dataStride:
baseGeometry
baseGeometryBindTransform
boneWeights
boneIndices
boneInverseBindTransforms
_createSkinnerWithCompressedData:bonesCount:vertexCount:
_skinnerWithBaseGeometry:skinnableGeometry:bones:boneInverseBindTransforms:bindMatrix:
wantsCPUSkinning
setWantsCPUSkinning:
_bonesAndIndicesCompression
set_bonesAndIndicesCompression:
setBaseGeometry:
joints
_skinner
_baseGeometry
_skeleton
_caDisplayLinkCallback
displayLinkWithTarget:selector:
targetTimestamp
addToRunLoop:forMode:
_isInvalidated
setPreferredFramesPerSecond:
_callbackWithTime:
setPaused:nextFrameTimeHint:lastUpdate:
adaptativeFrameRate
setAdaptativeFrameRate:
preferredFrameRate
queuedFrameCount
_cleanup
setNeedsDisplay
_caDisplayLink
_supportTargetTimestamp
_adaptativeFrameDuration
_invalidated
_lastFrameTime
_preferredFrameRate
_runningLock
_queuedFrameCount
initWithData:options:error:
entryNames
contentsForEntryName:
initWithEntryNames:contents:properties:options:
archiveData
dataWithContentsOfFile:options:error:
archive:contentsForEntryName:
archive:streamForEntryName:
archive:propertiesForEntryName:
inputStreamWithData:
writeToFile:options:error:
replaceBytesInRange:withBytes:
appendData:
initWithPath:options:error:
initWithEntryNames:dataProvider:options:
streamForEntryName:
writeContentsForEntryName:toFile:options:error:
propertiesForEntryName:
archiveStream
isValid
_data
_provider
_desc
_path
_names
_properties
_cachedContents
_reserved
_zFlags
_reserved2
fileSystemRepresentation
initWithBytes:length:encoding:
numberWithUnsignedLongLong:
stringByStandardizingPath
initWithBodyA:anchorA:bodyB:anchorB:
initWithBody:anchor:
jointWithBodyA:anchorA:bodyB:anchorB:
jointWithBody:anchor:
addNormalsWithAttributeNamed:creaseThreshold:
_geometryByWeldingVerticesWithThreshold:normalThreshold:
_componentType
_geometryByUnifyingNormalsWithCreaseThreshold:
_geometryByAddingSourcesOfSkinner:
_geometryByRemovingSkinnerSources
_discardOriginalTopology
setConnectionPosition:
btVehicle
wheelWithNode:
suspensionStiffness
setSuspensionStiffness:
suspensionCompression
setSuspensionCompression:
suspensionDamping
setSuspensionDamping:
maximumSuspensionTravel
setMaximumSuspensionTravel:
frictionSlip
setFrictionSlip:
maximumSuspensionForce
setMaximumSuspensionForce:
connectionPosition
steeringAxis
setSteeringAxis:
axle
setAxle:
radius
suspensionRestLength
setSuspensionRestLength:
isFront
setIsFront:
_setVehicle:
_setWheelIndex:
_vehicle
_wheelIndex
_suspensionStiffness
_suspensionCompression
_suspensionDamping
_maximumSuspensionTravel
_frictionSlip
_maximumSuspensionForce
_connectionPosition
_steeringAxis
_axle
_radius
_suspensionRestLength
_isFront
_syncObjCModel:
initPresentationParametricGeometryWithParametricGeometryRef:
presentationPlane
cornerRadius
setCornerRadius:
widthSegmentCount
setWidthSegmentCount:
heightSegmentCount
setHeightSegmentCount:
cornerSegmentCount
setCornerSegmentCount:
initWithParametricGeometryRef:
_height
_cornerRadius
_widthSegmentCount
_heightSegmentCount
_cornerSegmentCount
_primitiveType
presentationBox
setChamferRadius:
chamferRadius
lengthSegmentCount
setLengthSegmentCount:
chamferSegmentCount
setChamferSegmentCount:
_boxwidth
_boxheight
_boxlength
_boxchamferRadius
_boxwidthSegmentCount
_boxheightSegmentCount
_boxlengthSegmentCount
_boxchamferSegmentCount
_boxprimitiveType
presentationPyramid
_pyramidwidth
_pyramidheight
_pyramidlength
_pyramidwidthSegmentCount
_pyramidheightSegmentCount
_pyramidlengthSegmentCount
_pyramidprimitiveType
presentationSphere
isGeodesic
radialSpan
segmentCount
isHemispheric
setHemispheric:
geodesic
_sphereradius
_sphereradialSpan
_spheresegmentCount
_sphereprimitiveType
_spheregeodesic
_spherehemispheric
presentationCylinder
radialSegmentCount
setRadialSegmentCount:
_cylinderradius
_cylinderheight
_cylinderradialSpan
_cylinderheightSegmentCount
_cylinderradialSegmentCount
_cylinderprimitiveType
presentationCone
topRadius
bottomRadius
setTopRadius:
setBottomRadius:
_conetopRadius
_conebottomRadius
_coneheight
_coneheightSegmentCount
_coneradialSegmentCount
_coneprimitiveType
presentationTube
outerRadius
setInnerRadius:
setOuterRadius:
innerRadius
_tubeinnerRadius
_tubeouterRadius
_tubeheight
_tuberadialSpan
_tubeheightSegmentCount
_tuberadialSegmentCount
_tubeprimitiveType
presentationCapsule
capRadius
setCapRadius:
capSegmentCount
setCapSegmentCount:
_capsulecapRadius
_capsuleheight
_capsuleheightSegmentCount
_capsuleradialSegmentCount
_capsulecapSegmentCount
_capsuleprimitiveType
presentationTorus
ringRadius
pipeRadius
setPipeRadius:
ringSegmentCount
pipeSegmentCount
_torusringRadius
_toruspipeRadius
_torusradialSpan
_torusringSegmentCount
_toruspipeSegmentCount
_torusprimitiveType
initWithBodyA:frameA:bodyB:frameB:
initWithBody:frame:
jointWithBodyA:frameA:bodyB:frameB:
jointWithBody:frame:
frameA
setFrameA:
frameB
setFrameB:
maximumAngularLimit1
setMaximumAngularLimit1:
maximumAngularLimit2
setMaximumAngularLimit2:
maximumTwistAngle
setMaximumTwistAngle:
geometrySourceWithVertices:count:
setEngineNotificationQueue:
engineNotificationQueue
setOpaque:
setDrawableProperties:
scn_setBackingLayer:
eaglContext
_enterForeground:
_enterBackground:
mainScreen
nativeScale
setContentMode:
setMultipleTouchEnabled:
_defaultBackgroundColor
setAllowsCameraControl:
initWithView:
setNavigationCameraController:
initWithFrame:options:
_selectRenderingAPIWithOptions:
initWithFrame:
_commonInit:
set_ibPreferredRenderingAPI:
set_ibWantsMultisampling:
_ibWantsMultisampling
decodeObjectForKey:
set_ibSceneName:
allowsCameraControl
_ibSceneName
_ibPreferredRenderingAPI
_flushDisplayLink
_setGestureRecognizers:
sceneWillChange
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
_setNeedsDisplay
sceneDidChange
_updateOpacity
_updateContentsScaleFactor
viewWillDrawAtTime:
viewDidDrawAtTime:
_checkAndUpdateDisplayLinkStateIfNeeded
layoutSubviews
_updateBackingSize
cameraWillChange
cameraDidChange
enabled
navigationCameraController
cameraController
_flipY:
keyPathsForValuesAffectingValueForKey:
_kvoKeysForwardedToRenderer
setByAddingObjectsFromSet:
automaticallyNotifiesObserversForKey:
setView:
_updateGestureRecognizers
_backgroundDidChange
willMoveFromView:
_didMoveToView:
eventHandler
wantsRedraw
_createDisplayLinkIfNeeded
setPointOfView:animate:
gestureRecognizers
removeGestureRecognizer:
addGestureRecognizer:
hitTest:withEvent:
locationInView:
window
resumeDisplayLink
didMoveToWindow
pauseDisplayLink
willMoveToWindow:
startAndReturnError:
pause
safeAreaInsetsDidChange
safeAreaInsets
_searchForFocusRegionsInContext:
searchArea
intersectsRect:
_getFocusableNodes
_focusFrameForSCNNode:
coordinateSpace
convertRect:toCoordinateSpace:
initWithFrame:item:
addRegion:
_getFocusNodes
_convertFrameToView:
_regionForFocusedItem:inCoordinateSpace:
renderingAPIForOptions:
_isMetalSupported
lowLatency
layerClass
set_renderOptions:
_renderOptions
_supportsJitteringSyncRedraw
scn_inLiveResize
_resetContentsScaleFactor
cameraControlConfiguration
rendersContinuously
play:
pause:
stop:
setEventHandler:
eventHandlerWantsRedraw
_wantsSceneRendererDelegationMessages
set_wantsSceneRendererDelegationMessages:
_systemTimeAnimationStarted:
switchToCameraNamed:
switchToNextCamera
ibPreferredRenderingAPI
setIbPreferredRenderingAPI:
ibSceneName
setIbSceneName:
ibWantsMultisampling
setIbWantsMultisampling:
_runFPSTestWithDuration:
setEaglContext:
displayLayer:
drawRect:
_controlsOwnScaleFactor
_focusedItemRegionContainer
_preferredFocusMovementStyle
__ibSceneName
__ibPreferredRenderingAPI
_ibNoMultisampling
_isOpaque
_firstDrawDone
_drawOnMainThreadPending
_appIsDeactivated
_viewIsOffscreen
_autoPausedScene
_inRenderQueueForLayerBackedGLRendering
_isInLiveResize
_didTriggerRedrawWhileRendering
_displayLinkCreationRequested
_displayLink
_preferredFramePerSeconds
_backingLayer
_jitterer
_boundsSize
_snapshotImageData
_snapshotImageDataLength
_navigationCameraController
_spriteKitEventHandler
_controllerGestureRecognizers
_program
_owners
initWithProfile:
_newProgramWithHashCode:engineContext:introspectionDataPtr:
profile
releaseProgramForResource:
_programMutex
_shaders
_trackedResourcesToHashcode
_profile
fractionCompleted
removeObserver:forKeyPath:context:
initWithMorphRef:
clearInBetweens
initPresentationMorpherWithMorphRef:
presentationMorpher
_weightIndexForTargetNamed:
setWeight:forTargetAtIndex:
weightForTargetAtIndex:
initWithFormat:
weightIndexStringForIndex:
subarrayWithRange:
setUnifiesNormals:
setCalculationMode:
unifiesNormals
_customEncodingOfSCNMorpher:
_customDecodingOfSCNMorpher:
_didDecodeSCNMorpher:
SCNUID_classForElementOfArray:
setWeight:forTargetNamed:
weightForTargetNamed:
channelTargetCounts
channelTargetWeights
setChannelTargetCounts:
setChannelTargetWeights:
targetsAndInBetween
_updateTargetsAndInBetween:
inBetweenTargetsForTargetAtIndex:
inBetweenWeightsForTargetAtIndex:
shouldMorphNormals
setShouldMorphNormals:
wantsCPUMorphing
setWantsCPUMorphing:
convertToAdditiveWithBaseGeometry:
_isUsingSparseTargets
convertToSparseWithBaseGeometry:
_morpher
_calculationMode
_weights
_topLevelAndInBetweenTargets
_inBetweenCounts
_inBetweenInfluenceWeights
_targetNameToIndexes
_unifyNormal
_useSparseTargets
center
sharedInstance
add:
remove:
registerUIKitSource:
unregisterUIKitSource:
apply:
scnView
convertPoint:toLayer:
_warpPoint:outOfBounds:
superview
convertPoint:fromView:
subviews
_isSettingFirstResponder
_setFirstResponder:
_canBecomeKeyWindow
_hitTest:withEvent:windowServerHitTestWindow:
warpPoint:
uiView
setWindowLevel:
addSubview:
prepareWindowIfNeeded
uiWindow
setSource:
setup
_uiView
_uiWindow
superlayer
_layerTreeDidUpdate
source
_setup
_windowReady
_sizeCache
_textureID
_textureSampler
isMultipleTouchEnabled
canBecomeFirstResponder
setAnimationTimingFunction:
completionBlock
immediateModeRestrictedContext
currentState
checkUncommittedTransactions
dataByConvertingDoublesToFloats:count:
initWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
initWithData:semantic:vectorCount:componentType:componentCount:dataOffset:dataStride:
dataWithVector3Array:count:bytesPerComponent:
dataWithPointArray:count:bytesPerComponent:
raise:format:
geometrySourceWithNormals:count:
geometrySourceWithTextureCoordinates:count:
geometrySourceWithColorComponents:count:hasAlpha:colorSpace:
_printData
_meshSource
_semantic
_vectorCount
_componentCount
_dataOffset
_dataStride
_mkSemantic
mutableData
initWithMeshElement:
initWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
_optimizedGeometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:
primitiveRange
setPrimitiveRange:
pointSize
setPointSize:
minimumPointScreenSpaceRadius
setMinimumPointScreenSpaceRadius:
maximumPointScreenSpaceRadius
setMaximumPointScreenSpaceRadius:
_optimizeTriangleIndices
_computeACMR
_meshElement
_elementData
_primitiveCount
_primitiveRange
_indicesChannelCount
_interleavedIndicesChannels
_bytesPerIndex
_pointSize
_minimumPointScreenSpaceRadius
_maximumPointScreenSpaceRadius
engine
disconnectNodeInput:
disconnectNodeOutput:
detachNode:
attachNode:
initStandardFormatWithSampleRate:channels:
mainMixerNode
connect:to:format:
setListenerPosition:
setListenerVectorOrientation:
isRunning
obstruction
setObstruction:
occlusion
setOcclusion:
defaultAuthoringDisplayMask
_initWithEngineContext:
mutableCopyWithZone:
rendererForSceneRenderer:
_setupAuthoringEnv2:
setupAuthoringEnv2
authoringEnvironment2
sceneDidChange:
selectedItems
boundingRectWithSize:options:attributes:context:
initWithString:attributes:
drawAtPoint:
bezierPathWithOvalInRect:
fill
beginEditingNodes:
orderedSetWithArray:
selectedNodes
authoringEnvironmentForSceneRenderer:
selectionIsReadonly
setSelectionIsReadonly:
setEditingSpace:
cancelEdition
beginEditingNode:
saveInitialSelection
beginOrbiting
endOrbiting
drawLineFromPoint:toPoint:color:
drawString:atPoint:color:
isEditingSubComponent
setShouldSnapOnGrid:
setShouldSnapToAlign:
graphicalSelectionEnabled
setGraphicalSelectionEnabled:
surroundToSelect
setSurroundToSelect:
_sceneRenderer
_sceneRendererIsSCNView
_noColorProgram
_colorOnlyProgram
_colorAndTextureProgram
_lightProbesProgram
_wireframeProgram
_logsInfo
_boldLogsInfo
_dynamicLinesInfo
_dynamicLinesNoDepthTestInfo
_dynamicTrianglesInfo
_overlayDynamicLinesInfo
_overlayDynamicTriangleInfo
_textInfo
_lightProbesInfo
_normalTextInfo
_boldTextInfo
_depthOnCullOnStates
_depthOffCullOnStates
_depthOnCullOffStates
_depthOffCullOffStates
_arrowIndicesOffset
_arrowIndicesCount
_quadrantIndicesOffset
_quadrantIndicesCount
_quadrantRingIndicesOffset
_quadrantRingIndicesCount
_timedRecordingExpirationTime
_timedRecordingBuffer
_timedRecordingBufferStart
_timedRecordingBufferEnd
_authoringDisplayMask
_hasLighting
_shouldSnapOnGrid
_shouldSnapToAlign
_selectionIsReadonly
_editingSpace
_graphicalSelectionEnabled
_selectionP0
_selectionP1
_selecting
_surroundToSelect
_initialSelection
_selectedNodes
_isOrbiting
_lastGridDistance
_gridUnit
_visibleManipulableItems
_wireframeRenderer
_consoleLineCount
_statisticsInfo
_drawScale
_authEnv2
firstIndex
indexGreaterThanIndex:
fontWithName:size:
setEnableFreeCamera:
view
freeCamera
enableFreeCamera
autoSwitchToFreeCamera
setAutoSwitchToFreeCamera:
activateFreeCamera
_view
_enableFreeCamera
_autoSwitchToFreeCamera
invalidateCameraTarget
setAutomaticCameraTarget:
_switchToFreeViewCamera
frontVector
_browseScale
setCameraTarget:
_resetFreeViewCamera
_prepareFreeViewCamera
viewedObjectSphere
updateBrowseScaleFactor
_freeCameraActivated
_installFreeViewCameraIfNeeded
computeAutomaticTargetPoint
cameraAutomaticTargetPoint
cameraTarget
zoomBy:animate:
_translationCoef
focusNode:
_resetBrowseScaleFactor
_rotateWithDrag:mode:stickyAxis:
_isInertiaRunning
_onInertiaTimer
_3DConnexionIsPressed
computeBoundingSphereOmittingFloorsForNode:sphere:
frontVectorWithPointOfView:
matrixWithNoRoll:
setMinimumPressDuration:
setNumberOfTapsRequired:
_handlePinch:
addTarget:action:
_handlePan:
_handlePress:
_handleRotation:
_handleDoubleTap:
setDelaysTouchesBegan:
setCancelsTouchesInView:
beginGesture:
pinchWithGestureRecognizer:
panWithGestureRecognizer:
rotateWithGestureRecognizer:
numberOfTouches
locationOfTouch:inView:
_startBrowsingIfNeeded:
_beginTranslateAtLocation:
setZoomFactor:
state
velocityInView:
endDraggingWithVelocity:
translationInView:
setTranslation:inView:
_translateTo:
allowsTranslation
setAllowsTranslation:
enableInertia
setEnableInertia:
gimbalLockMode
setGimbalLockMode:
gimbalLockVector
setGimbalLockVector:
automaticCameraTarget
stickyAxis
setStickyAxis:
rotateOf:
zoomBy:
zoomFactor
translateByX:Y:Z:
rotateWithVector:mode:
gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:
gestureRecognizerShouldBegin:
_freeViewCameraNode
_initialPoint
_initialMatrix
_initialZoom
_originalFovX
_originalFovY
_originalOrthoScale
_zoomFactor
_clickOrigin
_lastGestureFingerCount
_isDraggingWithOneFinger
_roll
_initialMatrixForRoll
_pressGesture
_tapGesture
_pinchGesture
_panGesture
_rotateGesture
_stickyAxis
_viewedObjectSphere
_isViewedObjectSphereComputed
_stateLock
_hasAutomaticCameraTarget
_automaticCameraTargetUpToDate
_didEverFocusNode
_allowsTranslation
_pinchShouldMoveCamera
_alternateMode
_upDirIsSet
_gimbalLockMode
_inertiaRunning
_browseMode
_upDir
_autoCameraTarget
_browseScaleFactor
_totalDragWithInertia
_inertiaVelocity
_lastSimulationTime
_computeAutomaticTargetPointIfNeeded
focusNodes:
_pointOfViewUsesOrthographicProjection
_pointOfViewOrthographicScale
_targetDistance
_orthographicScaleForZoomFactor:
_sceneBoundingSphere
_orthographicZoomFactorForProposedZoomFactor:
_setPointOfViewOrthographicScale:
_cappedTranslationDelta:
__didChangePointOfView
_defaultTargetForScene:
_stopInertia
_setupUpVector
_willBeginInteraction
_computeTranslationOrigin3DFromPoint:
__willChangePointOfView
_modeSensitivity
_translateToViewPoint:
panSensitivity
truckSensitivity
rotationSensitivity
willChangePointOfView
didChangePointOfView
flyModeVelocity
setFlyModeVelocity:
setPanSensitivity:
setTruckSensitivity:
setRotationSensitivity:
_effectiveStickyAxis
_computeBoundingSphereOmittingFloorsForNode:sphere:
_computeStickyAxisIfNeeded:
_cameraOriginalFieldOfView
_fieldOfViewZoomFactor
_orthographicZoomFactor
_translationAllowed
_isSceneBoundingSphereComputed
_cameraTargetComputed
_shouldUpdateTarget
_shouldIgnoreMomentumEvents
_recordingPointOfViewEvents
_mouseDown
_translationOrigin
_initialPointOfViewWorldPosition
_lastKeyInputTime
_flyModeVelocity
_panSensitivity
_truckSensitivity
_rotationSensitivity
_initialInputLocation
_lastInputLocation
_accumulatedDrag
_lastRotationAngle
_drawAtTimeLock
_keyboard
_scrollWheelModifiers
_cameraController
textureSize
MTLTextureCache
setMTLTextureCache:
glTextureCache
setGlTextureCache:
_mtlTextureCache
_glTextureCache
isPremultiplied
_createFramebufferWithEngineContext:size:
_usesIOSurface
_framebufferSize
_framebuffer
rendererOptions
rendererWithEAGLContext:options:
rendererDidChange:
_registry
drawInContext:atTime:
needsUpdate
contentSize
__updateTextureWithDelegate:engineContext:
initWithRenderer:size:attributes:outputURL:
main
error
renderMovieToURL:size:antialiasingMode:attributes:error:
setUserInfo:
setDidEndSelector:
_exportAsMovieOperationWithDestinationURL:size:attributes:delegate:didEndSelector:userInfo:
writeToURL:options:
exportAsMovieOperationWithDestinationURL:size:attributes:delegate:didEndSelector:userInfo:
succeded
progress
canceled
setCanceled:
cancel
setRenderer:
userInfo
didEndSelector
setProgress:
setAttributes:
outputURL
setOutputURL:
setError:
setSucceded:
_didEndSelector
_startTime
_endTime
_canceled
_succeded
_progress
_error
_attributes
_outputURL
initWithMediaType:outputSettings:
setExpectsMediaDataInRealTime:
initWithAssetWriterInput:sourcePixelBufferAttributes:
initWithURL:fileType:error:
status
addInput:
startWriting
startSessionAtSourceTime:
pixelBufferPool
appendPixelBuffer:withPresentationTime:
_copySnapshot:
isReadyForMoreMediaData
appendImage:withPresentationTime:usingAdaptor:
completedUnitCount
setCompletedUnitCount:
markAsFinished
requestMediaDataWhenReadyOnQueue:usingBlock:
finishWritingWithCompletionHandler:
_finishedExport
_setupMovieToWritableFile:
_assetWriterInput
_avAdaptor
_assetWriter
_rate
_mirrored
_supersampling
minimumLinearLimit
setMinimumLinearLimit:
maximumLinearLimit
setMaximumLinearLimit:
minimumAngularLimit
setMinimumAngularLimit:
maximumAngularLimit
setMaximumAngularLimit:
motorTargetLinearVelocity
setMotorTargetLinearVelocity:
motorMaximumForce
setMotorMaximumForce:
motorTargetAngularVelocity
setMotorTargetAngularVelocity:
motorMaximumTorque
setMotorMaximumTorque:
debugQuickLookObjectWithPointOfView:
debugQuickLookObject
debugQuickLookData
initWithContentsOfURL:options:error:
setFrame:
SCNJSExportProtocol
imageWithContentsOfFile:
imageWithURL:
imageWithPath:
vector3
vector4
matrix4
valueWithVector3:
valueWithVector4:
valueWithMatrix4:
color::::
toDouble
valueWithObject:inContext:
valueWithVector4:inContext:
valueWithVector3:inContext:
valueWithTransform3D:inContext:
toVector4
toVector3
toTransform3D
toBool
setValue:forProperty:
setPath:
handleBindingOfBufferNamed:frequency:usingBlock:
setSemantic:forSymbol:options:
semanticForSymbol:
vertexShader
fragmentShader
tessellationControlShader
setTessellationControlShader:
tessellationEvaluationShader
setTessellationEvaluationShader:
geometryShader
setGeometryShader:
vertexFunctionName
setVertexFunctionName:
fragmentFunctionName
setFragmentFunctionName:
setLibrary:
weightAtTargetIndex:
setWeight:atTargetIndex:
screenSpaceRadius
worldSpaceDistance
levelOfDetailWithGeometry:screenSpaceRadius:
levelOfDetailWithGeometry:worldSpaceDistance:
influenceFactor
setInfluenceFactor:
isIncremental
setIncremental:
applyEngineForce:forWheelAtIndex:
setSteeringAngle:forWheelAtIndex:
applyBrakingForce:forWheelAtIndex:
speedInKilometersPerHour
wheels
chassisBody
vehicleWithChassisBody:wheels:
targetOffset
setTargetOffset:
setLocalFront:
upVector
setUpVector:
gimbalLockEnabled
setGimbalLockEnabled:
lookAtConstraintWithTarget:
extrusionDepth
setExtrusionDepth:
chamferMode
setChamferMode:
chamferProfile
setChamferProfile:
shapeWithPath:extrusionDepth:
initWithChainRootNode:
setMaxAllowedRotationAngle:forJoint:
maxAllowedRotationAngleForJoint:
chainRootNode
targetPosition
setTargetPosition:
inverseKinematicsConstraintWithChainRootNode:
transformConstraintInWorldSpace:withBlock:
positionConstraintInWorldSpace:withBlock:
orientationConstraintInWorldSpace:withBlock:
font
setFont:
isWrapped
setWrapped:
containerFrame
setContainerFrame:
textSize
truncationMode
setTruncationMode:
alignmentMode
setAlignmentMode:
textWithString:extrusionDepth:
valueForProperty:
isUndefined
_hasFired
numberWithChar:
numberWithUnsignedChar:
valueWithCGPoint:
charValue
unsignedCharValue
CGPointValue
numberWithUnsignedShort:
capitalizedString
shortValue
unsignedShortValue
_initializeWheelsArray
initWithChassisBody:wheels:
_createWheel:
wheelAtIndex:
_customDecodingOfSCNPhysicsVehicle:
_chassisBody
_wheels
_speedKmHour
copyTo:
setConstraintRef:
finalizeDecodeConstraint:
_constraintRef
_incremental
_influenceFactor
initWithTarget:
_customEncodingOfSCNLookAtConstraint:
_customDecodingOfSCNLookAtConstraint:
_gimbalLockEnabled
_targetOffset
_upVector
_localFront
maximumDistance
setMaximumDistance:
_customEncodingOfSCNDistanceConstraint:
_customDecodingOfSCNDistanceConstraint:
distanceConstraint
distanceConstraintWithTarget:
targetDirection
setTargetDirection:
keepTargetDirection
setKeepTargetDirection:
_maximumDistance
_keepTargetDirection
_targetDirection
_maximumDirectionAngle
replicatorConstraint
replicatesOrientation
setReplicatesOrientation:
replicatesPosition
setReplicatesPosition:
replicatesScale
setReplicatesScale:
orientationOffset
setOrientationOffset:
positionOffset
setPositionOffset:
scaleOffset
setScaleOffset:
_customEncodingOfSCNReplicatorConstraint:
_customDecodingOfSCNReplicatorConstraint:
replicatorConstraintWithTarget:
_replicateOrientation
_replicatePosition
_replicateScale
_orientationOffset
_positionOffset
_scaleOffset
maximumLinearVelocity
setMaximumLinearVelocity:
maximumLinearAcceleration
setMaximumLinearAcceleration:
decelerationDistance
setDecelerationDistance:
accelerationConstraint
_maximumLinearVelocity
_maximumLinearAcceleration
_decelerationDistance
collisionCategoryBitMask
setCollisionCategoryBitMask:
sliderConstraint
occluderCategoryBitMask
setOccluderCategoryBitMask:
bias
setBias:
avoidOccluderConstraint:shouldAvoidOccluder:forNode:
avoidOccluderConstraint:didAvoidOccluder:forNode:
_customEncodingOfSCNAvoidOccluderConstraint:
_customDecodingOfSCNAvoidOccluderConstraint:
avoidOccluderConstraint
avoidOccluderConstraintWithTarget:
setFreeAxes:
freeAxes
preserveScale
_freeAxes
_preserveScale
setScreenSpace:
constantScaleConstraint
screenSpace
_screenSpace
initTransformInWorld:withBlock:
initPositionInWorld:withBlock:
initOrientationInWorldSpace:withBlock:
joint
setJoint:
maxAllowedRotationAngle
setMaxAllowedRotationAngle:
setChainRootNode:
jointForNode:
_customEncodingOfSCNIKConstraint:
_customDecodingOfSCNIKConstraint:
_didDecodeSCNIKConstraint:
_chainRootNode
_ikTarget
_jointsPerNode
_repeatedAction
frequency
setFrequency:
_frequency
setSemantic:
infoWithSemantic:options:
postNotificationName:object:userInfo:
setSemanticInfos:
_customEncodingOfSCNProgram:
_customDecodingOfSCNProgram:
setSourceFile:
setByAddingObject:
programWithLibrary:
shadingLanguage
sourceFile
_optionsForSymbol:
_allSymbolsWithSceneKitSemantic
_bufferBindings
setSemantic:forSymbol:
_vertexShader
_fragmentShader
_vertexFunctionName
_fragmentFunctionName
_sourceFile
_semanticInfos
_opaque
_library
_stopObservingProgram
_programDidChange:
_setC3DProgram
_startObservingProgram
owner
initWithDictionary:copyItems:
_parseAndSetShaderModifier:
shaderModifierCache
_updateC3DProgramInputForSymbol:
_programFromPassAtIndex:
_updateC3DProgramInput:forSymbol:
_updateAllC3DProgramInputs
_setC3DProgramDelegate
_customEncodingOfSCNShadableHelper:
_customDecodingOfSCNShadableHelper:
_didDecodeSCNShadableHelper:
_bindValueForSymbol:atLocation:programID:node:renderer:
_unbindValueForSymbol:atLocation:programID:node:renderer:
_shaderModifiers
_c3dShaderModifierCache
_argumentsNames
_symbolToBinder
_symbolToUnbinder
issueWithShadable:entryPoint:effectiveModifier:message:line:type:
shadable
entryPoint
effectiveModifier
message
line
_shadable
_entryPoint
_effectiveModifier
_message
_line
program:handleError:
initPresentationTextGeometryWithTextGeometryRef:
initWithTextGeometryRef:
params
_customEncodingOfSCNText:
_customDecodingOfSCNText:
setDiscretizedStraightLineMaxLength:
CGRectValue
set_wantsSeparateGeometryElements:
text
copyAnimationPathForKeyPath:animation:
_wantsSeparateGeometryElements
discretizedStraightLineMaxLength
_flatness
_chamferRadius
_extrusionDepth
_discretizedStraightLineMaxLength
_chamferProfile
_string
_font
_wrapped
_alignmentMode
_truncationMode
_useCustomContainerFrame
_customContainerFrame
__wantsSeparateGeometryElements
initPresentationShapeGeometryWithShapeGeometryRef:
_customEncodingOfSCNShape:
_customDecodingOfSCNShape:
initWithShapeGeometryRef:
_chamferMode
systemFontOfSize:
setAlignment:
setLineBreakMode:
attribute:atIndex:effectiveRange:
_setupWithGeometry:thresholdMode:value:
initWithGeometry:thresholdMode:lod:
_customEncodingOfSCNLevelOfDetail:
_didDecodeSCNLevelOfDetail:
initWithGeometry:thresholdMode:thresholdValue:
_lod
_mode
SCNActionHide
/////////$2@
SCNModelIO
MDLMorphDeformerComponent
MDLComponent
NSObject
MDLSkinDeformerComponent
SceneKitAdditions
SCNAudioPlayer
SCNAudioSource
NSCopying
NSSecureCoding
NSCoding
SCNLayerSource
SCNTextureLayerSource
SCNPhysicsField
SCNPhysicsLinearGravityField
SCNPhysicsRadialGravityField
SCNPhysicsSpringField
SCNPhysicsMagneticField
SCNPhysicsElectricField
SCNPhysicsDragField
SCNPhysicsCustomField
SCNPhysicsVortexField
SCNPhysicsNoiseField
SCNPhysicsTurbulenceField
SCNJitterer
SCNPhysicsHingeJoint
SCNManipulator
SCNSpriteKitSource
SCNTextureSpriteKitSource
SCNPhysicsContact
C3DAnimationBinding
SCNNodeComponent
SCNNodeWeakComponent
SCNActionRunBlock
SCNRenderTarget
SCNActionPlaySound
SCNTechnique
SCNAnimatable
SCNPassContext
SCNPass
SCNPhysicsShape
SCNActionWait
SCNPhysicsCharacter
SCNReferenceNode
SCNNodeReference
SCNAnimationReference
SCNActionReference
SCNPhysicsBehavior
SCNExtensions
SCN_DisplayLinkExtensions
SCNDisplayLink
SCNStatisticsProvider
SCNWeakPointer
SCNActionPerformSelector
SCNCameraController
SCNAction
Internal
SCNActionTargetState
SCNSpriteKitEventHandler
SCNActionJavaScript
SCNManipulableItem
SCNNodeManipulableItem
SCNPhysicsBody
SCNActionRunAction
SCNActionFade
SCNPhysicsWorld
SCNAdditions
Core3DKitAdditions
SCNLight
SCNTechniqueSupport
SCNMaterial
SCNShadable
SCNParticleSystem
SCNNode
SCNActionable
SCNBoundingVolume
UIFocusItem
UIFocusEnvironment
Transforms
SIMD
SCNScene
SCNRendererViewPoint
SCNRendererTransitionContext
SCNRenderer
SCNSceneRenderer
SCNOffscreenRenderer
SCNDeepCopy
SCNOrderedDictionary
SCNRecursiveLock
SCN_CAKeyframeAnimation
SCNAnimationEvent
SCNAddition
SCNTimingFunction
SCNAnimation
SCNAnimationPlayer
SCNSceneSource
NSKeyedUnarchiverDelegate
SCNKeyedUnarchiver
SCNKeyedArchiver
SCNHitTestResult
SCNAuthoringEnvironment2
SCNFloor
SCNCamera
SCNMaterialAttachment
SCNMaterialProperty
SCNGeometry
SCNMutableGeometry
SCNAssetCatalogCacheEntry
SCNAssetCatalog
SCNSceneDatabase
SCNSceneLookUpUnarchiver
SCNParticlePropertyController
SCNSkinner
C3DIONSZipFileArchive
SCNPhysicsBallSocketJoint
SCNUtils
SCNPhysicsVehicleWheel
C3DBinding
SCNPlane
SCNBox
SCNPyramid
SCNSphere
SCNCylinder
SCNCone
SCNTube
SCNCapsule
SCNTorus
SCNActionCustom
SCNPhysicsConeTwistJoint
C3DEngineNotificationQueueTransientWrapper
SCNView
SCNCommonProfileProgramCache
SCNCommonProfileProgramGenerator
SCNCommonProfileProgramGeneratorGL
_C3DProgressDebugger
SCNMorpher
SCNBoundingBox
SCNBoundingSphere
SCNActionSequence
_SCNUIKitSourceRegistry
_SCNUIApplicationObserver
_SCNSnapshotWindow
SCNUIKitSource
SCNTextureUIKitSource
SCNActionMove
SCNTransaction
SCNGeometrySource
SCNMutableGeometrySource
SCNGeometryElement
AVAudio3DMixing
SCNAuthoringEnvironment
SCNEventHandler
SCNCameraControlEventHandler
SCNActionRotate
SCNCameraNavigationController
SCNCameraControlConfiguration
SCNCameraControllerDelegate
SCNTextureSource
SCNImageSource
SCNTextureOffscreenRenderingSource
SCNSourceRendererRegistry
SCNDelegateSource
SCNTextureDelegateSource
SCNMovieExport
SCNExportAddition
SCNExportOperation
_SCNExportOperation
SCNMovieExportOperation
SCNPhysicsSliderJoint
SCN_DTAdditions
SCNActionScale
SCNActionGroup
SCNJSLayerJSExport
JSExport
SCN_JSSupport
SCNJSImageJSExport
SCNJSImage
SCNJSValueSExport
SCNJSValue
SCNJSExtensions
SCNJSValueTmpImp
SCNMaterialPropertyJSExport
SCNBoundingBoxJSExport
SCNBoundingSphereJSExport
SCNTransactionJSExport
SCNColorJSExport
SCNJSBasicAnimationJSExport
SCNJSAnimationGroupJSExport
SCNJSKeyframeAnimationJSExport
SCNViewJSExport
SCNMetalLayerJSExport
SCNPhysicsBehaviorJSExport
SCNParticlePropertyControllerJSExport
SCNPhysicsHingeJointJSExport
SCNPhysicsContactJSExport
SCNProgramJSExport
SCNTorusJSExport
SCNMorpherJSExport
SCNCapsuleJSExport
SCNLevelOfDetailJSExport
SCNRendererJSExport
SCNCylinderJSExport
SCNFloorJSExport
SCNNodeJSExport
SCNPlaneJSExport
SCNPhysicsBallSocketJointJSExport
SCNConeJSExport
SCNSphereJSExport
SCNGeometryJSExport
SCNConstraintJSExport
SCNPhysicsSliderJointJSExport
SCNLightJSExport
SCNMaterialJSExport
SCNParticleSystemJSExport
SCNHitTestResultJSExport
SCNPhysicsVehicleJSExport
SCNTubeJSExport
SCNLookAtConstraintJSExport
SCNPhysicsShapeJSExport
SCNGeometryElementJSExport
SCNGeometrySourceJSExport
SCNShapeJSExport
SCNSceneSourceJSExport
SCNPyramidJSExport
SCNCameraJSExport
SCNIKConstraintJSExport
SCNTechniqueJSExport
SCNPhysicsWorldJSExport
SCNPhysicsBodyJSExport
SCNBoxJSExport
SCNTransformConstraintJSExport
SCNAnimationEventJSExport
SCNActionJSExport
SCNSceneJSExport
SCNPhysicsVehicleWheelJSExport
SCNPhysicsFieldJSExport
SCNTextJSExport
SCNJSMediaTimingFunctionJSExport
SCNActionRemove
SCNPhysicsVehicle
SCNConstraint
SCNLookAtConstraint
SCNDistanceConstraint
SCNReplicatorConstraint
SCNAccelerationConstraint
SCNSliderConstraint
SCNAvoidOccluderConstraint
SCNBillboardConstraint
SCNConstantScaleConstraint
SCNTransformConstraint
SCNIKJoint
SCNIKConstraint
SCNDeferredProgramGeneratorMetal
SCNActionRepeat
SCNBufferBinding
SCNProgramSemanticInfo
SCNProgram
SCNShadableHelper
_SCNShadableCompilationIssue
SCNText
SCNShape
SCNLevelOfDetail
B16@0:8
@16@0:8
@24@0:8@16
v24@0:8@16
@24@0:8^{_NSZone=}16
^{SCNCActionHide=^^?f@?@BdddddBB@?^{__CFString}qddddB}
@32@0:8@16@24
@40@0:8@16@24Q32
@40@0:8@16@24@32
@100@0:8@16Q24B32Q36Q44Q52Q60q68@76Q84@92
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSArray"16@0:8
@"MDLAnimatedScalarArray"16@0:8
Q32@0:8^{?=[4]}16Q24
{?=[4]}16@0:8
@"NSData"16@0:8
v32@0:8@16@24
v64@0:8@16@24B32B36f40f44@?48@?56
@64@0:8@16@24@32@40^{SkelNodesMap={map<MDLSkeleton *, (anonymous namespace)::SkelNodes, std::__1::less<MDLSkeleton *>, std::__1::allocator<std::__1::pair<MDLSkeleton *const, (anonymous namespace)::SkelNodes> > >={__tree<std::__1::__value_type<MDLSkeleton *, (anonymous namespace)::SkelNodes>, std::__1::__map_value_compare<MDLSkeleton *, std::__1::__value_type<MDLSkeleton *, (anonymous namespace)::SkelNodes>, std::__1::less<MDLSkeleton *>, true>, std::__1::allocator<std::__1::__value_type<MDLSkeleton *, (anonymous namespace)::SkelNodes> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MDLSkeleton *, (anonymous namespace)::SkelNodes>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<MDLSkeleton *, std::__1::__value_type<MDLSkeleton *, (anonymous namespace)::SkelNodes>, std::__1::less<MDLSkeleton *>, true> >=Q}}}}48@56
@72@0:8@16@24@32@?40@48@56@64
v48@0:8@?16@?24@32@40
v16@0:8
v24@0:8^{__C3DNode=}16
^{__C3DNode=}16@0:8
r^v16@0:8
@?16@0:8
v24@0:8@?16
^{__C3DScene=}16@0:8
v20@0:8B16
@"AVAudioNode"
@"AVAudioPlayerNode"
@"SCNAudioSource"
^{__C3DNode=}
^{__C3DScene=}
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
q16@0:8
d16@0:8
f16@0:8
v20@0:8f16
@"AVAudioFile"
@"AVAudioPCMBuffer"
@"NSURL"
@"NSString"
@"CALayer"
v40@0:8^{__C3DEngineContext=}16^{__C3DTextureSampler={__CFRuntimeBase=QAQ}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}24^d32
d76@0:8@16@24^{__C3DEngineContext=}3240d56B64^B68
d40@0:8@16^{__C3DEngineContext=}24^{__C3DTextureSampler={__CFRuntimeBase=QAQ}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}32
v24@0:8^{__C3DRendererContext={__CFRuntimeBase=QAQ}iIIIIfI^{__C3DTexture}^{__C3DStack}^vBBBBB^{__CFDictionary}I^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}I^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][14{?=iII}][14I]^?^?^?^?^?^?^?^?^?}[2{VolatileObject=^{__C3DArray}II^{__CFArray}}]^{__C3DArray}I^{__CFDictionary}}16
{CGSize=dd}16@0:8
^{__C3DTexture=}40@0:8^{__C3DEngineContext=}16^{__C3DTextureSampler={__CFRuntimeBase=QAQ}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}24^d32
@24@0:8@?16
@32@0:8d16d24
v24@0:8d16
^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}16@0:8
v24@0:8Q16
v24@0:8q16
{SCNVector3=fff}16@0:8
v28@0:8{SCNVector3=fff}16
{SCNVector3=fff}28@0:8{SCNVector3=fff}16
{SCNVector3="x"f"y"f"z"f}
@"SCNPhysicsWorld"
@"SCNNode"
^{c3dPhysicsField=^^?{?=[4]}{?=[4]}fffIBBBBf}
@"<SCNJittererDelegate>"
@"NSObject<OS_dispatch_source>"
@80@0:8@16{SCNVector3=fff}24{SCNVector3=fff}36@48{SCNVector3=fff}56{SCNVector3=fff}68
@48@0:8@16{SCNVector3=fff}24{SCNVector3=fff}36
{?="bodyA"@"SCNPhysicsBody""bodyB"@"SCNPhysicsBody""anchorA"{SCNVector3="x"f"y"f"z"f}"anchorB"{SCNVector3="x"f"y"f"z"f}"axisA"{SCNVector3="x"f"y"f"z"f}"axisB"{SCNVector3="x"f"y"f"z"f}}
^{btHingeConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}][3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}ff{btAngularLimit=fffffffB}ffffBBBBBfifff}
{SCNMatrix4=ffffffffffffffff}16@0:8
v24@0:8^{__C3DEngineContext=}16
@96@0:8{?=@@{CGPoint=dd}{CGPoint=dd}{SCNVector3=fff}{SCNVector3=fff}d}16
v96@0:8{?=@@{CGPoint=dd}{CGPoint=dd}{SCNVector3=fff}{SCNVector3=fff}d}16
B96@0:8{?=@@{CGPoint=dd}{CGPoint=dd}{SCNVector3=fff}{SCNVector3=fff}d}16
v32@0:816
@24@0:8Q16
r^{?=f^vf}32@0:8Q16Q24
v52@0:8S162036
104@0:816{SCNVector3=fff}32d44B525672^B88^q96
@"SCNAuthoringEnvironment"
@"NSOrderedSet"
(C3DMatrix4x4="components"[16f]"m"[4]"simd"{?="columns"[4]})
(?="axisMove"{?="originalPosition""axisDirection""mouseDeltaVector"}"planeMove"{?="originalPosition""planeNormal""pointInPlane""mouseDeltaVector"}"axisRotate"{?="rotationSign"f"originalRotation"})
{CGPoint="x"d"y"d}
{?="positions"^"orientations"^"originalLocalMatrix"^{SCNMatrix4}"scales"^}
^{?=f^vf}
@"NSMutableIndexSet"
@"SCNBillboardConstraint"
@"SKScene"
v64@0:8@16@24^{__C3DEngineContext=}3240d56
@32@0:8r^{btPersistentManifold=i[4{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}]^{btCollisionObject}^{btCollisionObject}iffiii^{c3dContactCallback}}16q24
v72@0:8@16@24{SCNVector3=fff}32{SCNVector3=fff}44d56d64
v40@0:8r^{btPersistentManifold=i[4{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}]^{btCollisionObject}^{btCollisionObject}iffiii^{c3dContactCallback}}16q24r^{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}32
^{__C3DModelTarget={__CFRuntimeBase=QAQ}^v^vscCCB^?^?}
@32@0:8q16@24
@"SCNNodeComponent"
@32@0:8@?16@24
v32@0:8@16d24
@"NSObject<OS_dispatch_queue>"
@40@0:8^{?=CCCb1b1b1b1b1b1[4C]}1624Q32
C16@0:8
B40@0:8^{?=CCCb1b1b1b1b1b1[4C]}1624Q32
{?="format"C"sampleCount"C"textureUsage"C"renderToTexture"b1"forceTextureRect"b1"viewportDependant"b1"renderToIOSurface"b1"mipmapped"b1"textureCube"b1"padding"[4C]}
@"CIImage"
@"NSArray"
@28@0:8@16B24
^{SCNCPlaySound=^^?f@?@BdddddBB@?^{__CFString}qddddBB@}
@24@0:8^{__C3DFXTechnique=}16
v32@0:8d16@24
v32@0:8@"<SCNAnimation>"16@"NSString"24
v32@0:8@"SCNAnimationPlayer"16@"NSString"24
v24@0:8@"NSString"16
@"SCNAnimationPlayer"24@0:8@"NSString"16
v32@0:8@"NSString"16d24
@"CAAnimation"24@0:8@"NSString"16
v32@0:8d16@"NSString"24
B24@0:8@"NSString"16
v32@0:8@16@?24
^{__C3DFXTechnique=}16@0:8
^{__C3DAnimationManager=}16@0:8
B32@0:8@16@24
v32@0:8B16@20B28
v48@0:8@16@24@32@40
^{__C3DFXTechnique=}
@"NSMutableDictionary"
@"SCNOrderedDictionary"
^{?=^{__C3DFXPass}^{__C3DFXTechnique}^v^{__C3DEngineContext}^{__C3DFXProgramObject}d^v^{__C3DRendererElement}q}
@"<MTLCommandQueue>"
@"<MTLCommandBuffer>"
@"<MTLDevice>"
@32@0:8^{__C3DFXPass=}16@24
v32@0:8@16q24
@24@0:8q16
^{__C3DFXPass=}
@"SCNTechnique"
@32@0:8^v16@24
^{btCollisionShape=^^?i^v}16@0:8
@"NSDictionary"
^{btCollisionShape=^^?i^v}
@24@0:8d16
^{SCNCActionWait=^^?f@?@BdddddBB@?^{__CFString}qdddd}
{?="characterBody"@"SCNPhysicsBody""direction"{SCNVector3="x"f"y"f"z"f}"velocity"d"jumpSpeed"d}
^{btCharacterControllerInterface=^^?}
^{btPairCachingGhostObject=^^?{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}if^{btBroadphaseProxy}^{btCollisionShape}^v^{btCollisionShape}iiiiffffi^vfffi{btAlignedObjectArray<btCollisionObject *>={btAlignedAllocator<btCollisionObject *, 16>=}ii^^{btCollisionObject}B}^{btHashedOverlappingPairCache}}
^{btOverlapFilterCallback=^^?}
^{btCapsuleShape=^^?i^v{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffi}
v40@0:8@16@24@32
@24@0:8i16i20
@20@0:8i16
i20@0:8i16
v28@0:8@16B24
16@0:8
v28@0:8f16f20f24
v48@0:8{CGPoint=dd}16{CGSize=dd}32
v24@0:8f16f20
v52@0:8f16{CGPoint=dd}20{CGSize=dd}36
{?=}24@0:8o^f16
{?=[4]}48@0:81632
v56@0:8{CGPoint=dd}16{CGSize=dd}32d48
v64@0:8{CGPoint=dd}16{CGSize=dd}32{CGPoint=dd}48
48@0:8{CGPoint=dd}16{CGSize=dd}32
{?=}16@0:8
{?=}32@0:8{?=}16
B48@0:8{CGPoint=dd}16{CGSize=dd}32
v32@0:8{CGPoint=dd}16
{?="angles""initialAbsoluteAngles""initialTransformWorld"{?="columns"[4]}"initialOrientationWorld"{?="vector"}}
{?="start""current""last"}
{?="localArcballAdjustement""sphereLocationStart""sphereLocationCurrent"}
{?="inertiaEnabled"B"inertiaRunning"B"lastSimulationTime"d"friction"f"rotationSensitivity"f"translationSensitivity"f"velocity""timer"@"NSTimer"}
@"<SCNCameraControllerDelegate>"
44@0:816f24{CGSize=dd}28
@48@0:8d16d24d32d40
@36@0:8{SCNVector3=fff}16d28
@44@0:8d16{SCNVector3=fff}24d36
@40@0:8{SCNVector4=ffff}16d32
@52@0:8d16d24d32d40B48
@32@0:8@16Q24
@32@0:8@16d24
@32@0:8d16@?24
^{SCNCAction=^^?f@?@BdddddBB@?^{__CFString}qdddd}16@0:8
^{SCNCAction=^^?f@?@BdddddBB@?^{__CFString}qdddd}
v24@0:8^v16
d24@0:8d16
{SCNVector4=ffff}16@0:8
v32@0:8{SCNVector4=ffff}16
{SCNVector4="x"f"y"f"z"f"w"f}
@32@0:8d16@24
v80@0:8{SCNMatrix4=ffffffffffffffff}16
^{btRigidBody=^^?{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}if^{btBroadphaseProxy}^{btCollisionShape}^v^{btCollisionShape}iiiiffffi^vfffi{btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffBfffffff^{btMotionState}{btAlignedObjectArray<btTypedConstraint *>={btAlignedAllocator<btTypedConstraint *, 16>=}ii^^{btTypedConstraint}B}ii{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ii}16@0:8
^{btCollisionShape=^^?i^v}32@0:8@16@24
v32@0:8{SCNVector3=fff}16B28
v44@0:8{SCNVector3=fff}16{SCNVector3=fff}28B40
v36@0:8{SCNVector4=ffff}16B32
@"SCNPhysicsShape"
^{btRigidBody=^^?{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}if^{btBroadphaseProxy}^{btCollisionShape}^v^{btCollisionShape}iiiiffffi^vfffi{btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffBfffffff^{btMotionState}{btAlignedObjectArray<btTypedConstraint *>={btAlignedAllocator<btTypedConstraint *, 16>=}ii^^{btTypedConstraint}B}ii{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ii}
@"SCNAction"
^{SCNCActionFade=^^?f@?@BdddddBB@?^{__CFString}qddddfffB}
B40@0:8@16@24^@32
@48@0:8{SCNVector3=fff}16{SCNVector3=fff}28@40
@56@0:8{btVector3=(?=[4f])}16{btVector3=(?=[4f])}32@48
@160@0:8@16{SCNMatrix4=ffffffffffffffff}24{SCNMatrix4=ffffffffffffffff}88@152
^{c3dAether={vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> >=^^{c3dPhysicsField}^^{c3dPhysicsField}{__compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> >=^^{c3dPhysicsField}}}{vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> >=^^{c3dPhysicsField}^^{c3dPhysicsField}{__compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> >=^^{c3dPhysicsField}}}I}16@0:8
^{btVehicleRaycaster=^^?}16@0:8
^{btDynamicsWorld=^^?{btAlignedObjectArray<btCollisionObject *>={btAlignedAllocator<btCollisionObject *, 16>=}ii^^{btCollisionObject}B}^{btDispatcher}{btDispatcherInfo=fiifB^{btIDebugDraw}BBBfBf}^{btBroadphaseInterface}^{btIDebugDraw}B^?^?^v{btContactSolverInfo=fffffifffffiffffiiiff}f}16@0:8
v56@0:8@16^{__C3DNode=}24Q32Q40Q48
v32@0:8@16^v24
^{btDiscreteDynamicsWorld=^^?{btAlignedObjectArray<btCollisionObject *>={btAlignedAllocator<btCollisionObject *, 16>=}ii^^{btCollisionObject}B}^{btDispatcher}{btDispatcherInfo=fiifB^{btIDebugDraw}BBBfBf}^{btBroadphaseInterface}^{btIDebugDraw}B^?^?^v{btContactSolverInfo=fffffifffffiffffiiiff}f{btAlignedObjectArray<btTypedConstraint *>={btAlignedAllocator<btTypedConstraint *, 16>=}ii^^{btTypedConstraint}B}^{InplaceSolverIslandCallback}^{btConstraintSolver}^{btSimulationIslandManager}{btAlignedObjectArray<btTypedConstraint *>={btAlignedAllocator<btTypedConstraint *, 16>=}ii^^{btTypedConstraint}B}{btAlignedObjectArray<btRigidBody *>={btAlignedAllocator<btRigidBody *, 16>=}ii^^{btRigidBody}B}{btVector3=(?=[4f])}fBBBB{btAlignedObjectArray<btActionInterface *>={btAlignedAllocator<btActionInterface *, 16>=}ii^^{btActionInterface}B}i{btAlignedObjectArray<btPersistentManifold *>={btAlignedAllocator<btPersistentManifold *, 16>=}ii^^{btPersistentManifold}B}B}
^{btOverlappingPairCallback=^^?}
^{btVehicleRaycaster=^^?}
^{btC3DDebugDraw=^^?i^v}
{c3dAether="_fields"{vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> >="__begin_"^^{c3dPhysicsField}"__end_"^^{c3dPhysicsField}"__end_cap_"{__compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> >="__value_"^^{c3dPhysicsField}}}"_activeFields"{vector<c3dPhysicsField *, std::__1::allocator<c3dPhysicsField *> >="__begin_"^^{c3dPhysicsField}"__end_"^^{c3dPhysicsField}"__end_cap_"{__compressed_pair<c3dPhysicsField **, std::__1::allocator<c3dPhysicsField *> >="__value_"^^{c3dPhysicsField}}}"_lastOverrideIndex"I}
@"<SCNPhysicsContactDelegate>"
@"SCNPhysicsContact"
@"SCNScene"
@"NSMutableArray"
@"NSMutableSet"
{C3DColor4=(?=[4f]{?=ffff})}28@0:8B16^B20
@24@0:8r^{C3DColor4=(?=[4f]{?=ffff})}16
@80@0:8{?=[4]}16
{CGPoint=dd}16@0:8
@32@0:8{CGPoint=dd}16
@28@0:8{SCNVector3=fff}16
@32@0:8{SCNVector4=ffff}16
@80@0:8{SCNMatrix4=ffffffffffffffff}16
@24@0:8^{__C3DLight=}16
@"SCNTechnique"16@0:8
v24@0:8@"SCNTechnique"16
^{__C3DLight=}16@0:8
v48@0:8@16@24@32^v40
v32@0:8{CGSize=dd}16
^{__C3DLight=}
{CGSize="width"d"height"d}
@"SCNMaterialProperty"
@"NSData"
@24@0:8^{__C3DMaterial=}16
v32@0:8@"NSString"16@?<v@?II@"SCNNode"@"SCNRenderer">24
@"SCNProgram"16@0:8
v24@0:8@"SCNProgram"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
^{__C3DMaterial=}16@0:8
^{__C3DEffectCommonProfile={__CFRuntimeBase=QAQ}^{__C3DMaterial}i^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}^{__C3DEffectSlot}fffffCqBBb1b1b1b1b1b1b1b1b1b13}16@0:8
v24@0:8^@16
@24@0:8^@16
^{__C3DMaterial=}
@"SCNShadableHelper"
@24@0:8^{__C3DParticleSystem=}16
^{__C3DParticleSystem=}16@0:8
s24@0:8@16
v40@0:8q16@24@?32
v40@0:8@16q24@?32
^{__C3DParticleSystem=}
@"SCNGeometry"
@"UIColor"
@"SCNParticleSystem"
@24@0:8^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}16
v40@0:8@16@24@?32
v24@0:8@"SCNAction"16
v32@0:8@"SCNAction"16@?<v@?>24
v32@0:8@"SCNAction"16@"NSString"24
v40@0:8@"SCNAction"16@"NSString"24@?<v@?>32
@"SCNAction"24@0:8@"NSString"16
B32@0:8^{SCNVector3=fff}16^{SCNVector3=fff}24
v32@0:8^{SCNVector3=fff}16^{SCNVector3=fff}24
B32@0:8^{SCNVector3=fff}16^d24
B24@0:8@"UIFocusUpdateContext"16
v32@0:8@"UIFocusUpdateContext"16@"UIFocusAnimationCoordinator"24
@"<UIFocusEnvironment>"16@0:8
@"<UIFocusItemContainer>"16@0:8
@"NSString"24@0:8@"UIFocusUpdateContext"16
@"UIView"16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v24@0:8@"UIFocusMovementHint"16
B36@0:8@?16B24@28
@28@0:8@?16B24
B24@0:8@?16
v36@0:8#16@24B32
@28@0:8#16B24
^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}16@0:8
v32@0:8{?=}16
v32@0:8@16Q24
v32@0:8Q16@24
Q24@0:8@16
B40@0:8^{?=[6(?={?=ffff})]}1624
v24@0:8^{__C3DParticleSystem=}16
{SCNVector3=fff}36@0:8{SCNVector3=fff}16@28
{SCNMatrix4=ffffffffffffffff}88@0:8{SCNMatrix4=ffffffffffffffff}16@80
^{__C3DNode={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DNode}^{__C3DNode}^{__C3DNode}i{?=(C3DMatrix4x4=[16f][4]{?=[4]})(?=)}^(C3DMatrix4x4)BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3{?={?=SS}I}^{?}^{__C3DGeometry}^{__C3DSkinner}f{?=}}
{?="columns"[4]}
(?="eulerAngles""axisAngle""quaternion"{?="vector"})
^{SCNVector3=fff}
v52@0:8{SCNVector3=fff}16{SCNVector3=fff}28{SCNVector3=fff}40
v44@0:8{SCNVector4=ffff}16{SCNVector3=fff}32
B32@0:8^16^f24
v80@0:8{?=[4]}16
40@0:816@32
{?=[4]}88@0:8{?=[4]}16@80
v64@0:8163248
v48@0:8{?=}1632
@40@0:8@16@24^@32
@40@0:8@16q24@32
@24@0:8^{__C3DScene=}16
:16@0:8
v28@0:8@16i24
@20@0:8B16
B48@0:8@16@24@32@?40
v88@0:8@16{SCNMatrix4=ffffffffffffffff}24
@"SCNSceneSource"
[4@"SCNNode"]
{SCNMatrix4="m11"f"m12"f"m13"f"m14"f"m21"f"m22"f"m23"f"m24"f"m31"f"m32"f"m33"f"m34"f"m41"f"m42"f"m43"f"m44"f}
^{__C3DFXPass=}16@0:8
@60@0:8i16@20{CGSize=dd}28@44@52
@"SKTransition"
[2@"SCNOffscreenRenderer"]
v48@0:8@16@24@32@?40
@40@0:8{CGPoint=dd}16@32
B32@0:8@16@?24
^v16@0:8
v48@0:8@"SCNScene"16@"SKTransition"24@"SCNNode"32@?<v@?>40
@"NSArray"40@0:8{CGPoint=dd}16@"NSDictionary"32
B32@0:8@"SCNNode"16@"SCNNode"24
@"NSArray"24@0:8@"SCNNode"16
B32@0:8@16@?<B@?>24
v32@0:8@"NSArray"16@?<v@?B>24
@"SCNScene"16@0:8
v24@0:8@"SCNScene"16
@"<SCNSceneRendererDelegate>"16@0:8
v24@0:8@"<SCNSceneRendererDelegate>"16
@"SCNNode"16@0:8
v24@0:8@"SCNNode"16
@"SKScene"16@0:8
v24@0:8@"SKScene"16
@"AVAudioEngine"16@0:8
@"AVAudioEnvironmentNode"16@0:8
@56@0:8@16B24@28B36^v40Q48
^{__C3DEngineContext=}16@0:8
^{__C3DRendererContext={__CFRuntimeBase=QAQ}iIIIIfI^{__C3DTexture}^{__C3DStack}^vBBBBB^{__CFDictionary}I^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}I^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][14{?=iII}][14I]^?^?^?^?^?^?^?^?^?}[2{VolatileObject=^{__C3DArray}II^{__CFArray}}]^{__C3DArray}I^{__CFDictionary}}16@0:8
32@0:816
v48@0:8^{SCNVector3=fff}16Q24{SCNVector4=ffff}32
{SCNVector3=fff}44@0:8{SCNVector3=fff}16{SCNVector4=ffff}28
v24@0:8^{__C3DScene=}16
@56@0:8{CGPoint=dd}16{CGSize=dd}32@48
B48@0:8@16@24{SCNVector4=ffff}32
@40@0:8@16{SCNVector4=ffff}24
v32@0:8^{__C3DEngineContext=}16d24
B24@0:8^{__C3DScene=}16
v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48@56
v72@0:8d16{CGRect={CGPoint=dd}{CGSize=dd}}24@56@64
v88@0:8d16{CGRect={CGPoint=dd}{CGSize=dd}}24@56@64@72@80
v80@0:8d16{CGRect={CGPoint=dd}{CGSize=dd}}24@56@64@72
^{CGImage=}24@0:8d16
@48@0:8d16{CGSize=dd}24Q40
@32@0:8{CGSize=dd}16
^{CGImage=}32@0:8{CGSize=dd}16
@40@0:8{CGSize=dd}16@32
v40@0:8Q16B24B28@32
@"SCNRecursiveLock"
{?="frameBuffer"^{__C3DFramebuffer}"multisamplingFrameBuffer"^{__C3DFramebuffer}"drawableSize"{CGSize="width"d"height"d}}
@"<MTLTexture>"
@"SCNRendererTransitionContext"
^{__C3DEngineContext=}
@"EAGLContext"
@"SCNMTLRenderContext"
{?="supportsUpdate"b1"supportsDidApplyAnimations"b1"supportsDidSimulatePhysics"b1"supportsDidApplyConstraints"b1"supportsWillRender"b1"supportsDidRender"b1"supportsInputTime"b1"supportsReadSubdivCache"b1"supportsWriteSubdivCache"b1}
{C3DColor4=""(?="rgba"[4f]""{?="r"f"g"f"b"f"a"f}"simd")}
@"SCNRenderer"
@"<SCNSceneRenderer>"
@"__SKSCNRenderer"
@40@0:8@16{CGSize=dd}24
I16@0:8
v32@0:8^?16^v24
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
^{__C3DKeyframedAnimation=}16@0:8
v24@0:8^{__C3DKeyframedAnimation=}16
^{__C3DKeyframedAnimation=}
B36@0:8d16B24^v28
@24@0:8^{__C3DTimingFunction=}16
^{__C3DTimingFunction=}16@0:8
^{__C3DTimingFunction=}
@24@0:8^{__C3DAnimation=}16
v24@0:8^{__C3DAnimation=}16
^{__C3DAnimation=}16@0:8
^{__C3DAnimation=}
@"SCNTimingFunction"
@24@0:8^{__C3DAnimationPlayer=}16
^{__C3DAnimationPlayer=}16@0:8
^{__C3DAnimationPlayer=}
@"SCNAnimation"
#40@0:8@16@24@32
#40@0:8@"NSKeyedUnarchiver"16@"NSString"24@"NSArray"32
@32@0:8@"NSKeyedUnarchiver"16@24
v40@0:8@"NSKeyedUnarchiver"16@24@32
v24@0:8@"NSKeyedUnarchiver"16
@32@0:8Q16@24
@40@0:8Q16@24^@32
^{__C3DScene=}32@0:8@16@?24
@40@0:8#16@24@?32
@32@0:8@16@?24
@40@0:8#16@24^@32
@32@0:8@16^@24
^{__C3DSceneSource=}16@0:8
^{__C3DLibrary=}16@0:8
@32@0:8@16#24
@24@0:8#16
B48@0:8@16Q24@?32@?40
^{__C3DSceneSource=}
@"SCNAssetCatalog"
@24@0:8^{__CFArray=}16
@24@0:8^{__C3DHitTestResult=}16
{CGPoint=dd}24@0:8q16
^{__C3DHitTestResult=}
v44@0:8@16@24@32f40
B32@0:8{CGPoint=dd}16
v32@0:8q16@24
^{__CFDictionary=}
@"SCNManipulator"
@40@0:8d16d24@32
@56@0:8d16d24d32d40@48
@48@0:8d16d24d32@40
@24@0:8^{__C3DFloor={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}ffffifffQ}16
^{__C3DFloor={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}ffffifffQ}16@0:8
^{__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}16@0:8
@24@0:8^{__C3DCamera={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}{?=b1b1b1b1b1b1b1dddfd(C3DMatrix4x4=[16f][4]{?=[4]}){?=[4]}dd}ffffiib1b1b1b1C(C3DMatrix4x4=[16f][4]{?=[4]})ffffffffffffifffffffff{?=fffffii}^{__C3DEffectSlot}Q^{__C3DFXTechnique}}16
^{__C3DCamera={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}{?=b1b1b1b1b1b1b1dddfd(C3DMatrix4x4=[16f][4]{?=[4]}){?=[4]}dd}ffffiib1b1b1b1C(C3DMatrix4x4=[16f][4]{?=[4]})ffffffffffffifffffffff{?=fffffii}^{__C3DEffectSlot}Q^{__C3DFXTechnique}}16@0:8
{SCNMatrix4=ffffffffffffffff}32@0:8{CGSize=dd}16
^{__C3DCamera={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}{?=b1b1b1b1b1b1b1dddfd(C3DMatrix4x4=[16f][4]{?=[4]}){?=[4]}dd}ffffiib1b1b1b1C(C3DMatrix4x4=[16f][4]{?=[4]})ffffffffffffifffffffff{?=fffffii}^{__C3DEffectSlot}Q^{__C3DFXTechnique}}
{?="intensity"f"radius"f"bias"f"depthThreshold"f"normalThreshold"f"sampleCount"q"downSample"q}
v20@0:8I16
^{__C3DImage=}32@0:8@16Q24
^{__C3DImage=}36@0:8@16i24^B28
^{__C3DImage=}28@0:8@16i24
^{__C3DImage=}24@0:8@16
@24@0:8^{__C3DImage=}16
@28@0:8@16c24
^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}20@0:8B16
v24@0:8^{__C3DImage=}16
{C3DColor4=(?=[4f]{?=ffff})}16@0:8
i16@0:8
c16@0:8
^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}16@0:8
^{__C3DTextureSampler={__CFRuntimeBase=QAQ}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}16@0:8
v80@0:8(C3DMatrix4x4=[16f][4]{?=[4]})16
^{__C3DEffectSlot={__CFRuntimeBase=QAQ}{C3DColor4=(?=[4f]{?=ffff})}^v(?=^{__C3DImage}^v^{__C3DImageProxy}^{__C3DTexture})b8b1b1b1b4c^{__C3DTextureSampler}^(C3DMatrix4x4)fi^v}
^{__C3DImage=}
^{SCNMatrix4=ffffffffffffffff}
@24@0:8^{__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}16
v24@0:8^{__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}16
B48@0:8@16@24^@32^@40
{?=BCCC}16@0:8
v20@0:8{?=BCCC}16
^{__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}
{?="enableVertexWeldingAtImport"B"boundaryInterpolationRule"C"faceVaryingInterpolationRule"C"normalSmoothingMode"C}
@"SCNGeometrySource"
@"SCNGeometryElement"
v40@0:8@16d24@32
v40@0:8@16@24#32
@"CAAnimation"
@24@0:8^{__C3DSkinner=}16
^{__C3DSkinner=}48@0:8@16@24@32@40
^{__C3DSkinner=}56@0:8q16@24@32@40@48
^{__C3DSkinner=}40@0:8@16Q24Q32
@56@0:8@16@24@32@40@48
@112@0:8@16@24@32@40{SCNMatrix4=ffffffffffffffff}48
^{__C3DSkinner=}16@0:8
^{__C3DSkinner=}
B36@0:8B16d20d28
@"CADisplayLink"
@40@0:8@16Q24^@32
@48@0:8@16@24@32Q40
B48@0:8@16@24Q32^@40
B40@0:8@16Q24^@32
{__zFlags="providerSuppliesContents"b1"providerSuppliesStreams"b1"providerSuppliesProperties"b1"noContentsCaching"b1"fileOpen"b1"reserved"b27}
[5^v]
@56@0:8@16{SCNVector3=fff}24@36{SCNVector3=fff}44
@36@0:8@16{SCNVector3=fff}24
{?="bodyA"@"SCNPhysicsBody""bodyB"@"SCNPhysicsBody""anchorA"{SCNVector3="x"f"y"f"z"f}"anchorB"{SCNVector3="x"f"y"f"z"f}}
^{btPoint2PointConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btVector3=(?=[4f])}{btVector3=(?=[4f])}iffB{btConstraintSetting=fff}}
v20@0:8i16
@"SCNPhysicsVehicle"
@24@0:8^{__C3DParametricGeometry={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}{?=ffffffffffffiiiiiiiiiiiI}{?=^?^?^?^?^?^?}^{__CFData}}16
v24@0:8^{__C3DParametricGeometry={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}{?=ffffffffffffiiiiiiiiiiiI}{?=^?^?^?^?^?^?}^{__CFData}}16
@40@0:8d16d24d32
^{SCNCActionCustom=^^?f@?@BdddddBB@?^{__CFString}qdddd@?}
@160@0:8@16{SCNMatrix4=ffffffffffffffff}24@88{SCNMatrix4=ffffffffffffffff}96
@88@0:8@16{SCNMatrix4=ffffffffffffffff}24
{?="bodyA"@"SCNPhysicsBody""frameA"{SCNMatrix4="m11"f"m12"f"m13"f"m14"f"m21"f"m22"f"m23"f"m24"f"m31"f"m32"f"m33"f"m34"f"m41"f"m42"f"m43"f"m44"f}"bodyB"@"SCNPhysicsBody""frameB"{SCNMatrix4="m11"f"m12"f"m13"f"m14"f"m21"f"m22"f"m23"f"m24"f"m31"f"m32"f"m33"f"m34"f"m41"f"m42"f"m43"f"m44"f}"maximumAngularLimit1"d"maximumAngularLimit2"d"maximumTwistAngle"d}
^{btConeTwistConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}ffffffff{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffffffBBBBff{btVector3=(?=[4f])}BB{btQuaternion=(?=[4f])}f{btVector3=(?=[4f])}ifff}
v24@0:8^{__C3DEngineNotificationQueue={__CFRuntimeBase=QAQ}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}dBBB^v}16
^{__C3DEngineNotificationQueue={__CFRuntimeBase=QAQ}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}dBBB^v}16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
@"SCNDisplayLink"
@"SCNJitterer"
@"<SCNEventHandler>"
@"SCNSpriteKitEventHandler"
^{__C3DFXProgram=}
^{__CFSet=}
^{__C3DFXProgram=}48@0:8^{__C3DProgramHashCode=}16^{__C3DEngineContext=}24@32^v40
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
^{__C3DFXProgram=}40@0:8^{__C3DProgramHashCode=}16^{__C3DEngineContext=}24^v32
@24@0:8^{__C3DMorph=}16
#24@0:8@16
^{__C3DMorph=}16@0:8
q24@0:8@16
d24@0:8@16
v32@0:8d16Q24
d24@0:8Q16
^{__C3DMorph=}
^{SCNCActionSequence=^^?f@?@BdddddBB@?^{__CFString}qdddd{vector<SCNCAction *, std::__1::allocator<SCNCAction *> >=^^{SCNCAction}^^{SCNCAction}{__compressed_pair<SCNCAction **, std::__1::allocator<SCNCAction *> >=^^{SCNCAction}}}Qd}
@48@0:8{CGPoint=dd}16@32@40
{CGPoint=dd}40@0:8{CGPoint=dd}16^B32
{CGPoint=dd}32@0:8{CGPoint=dd}16
^{__C3DTextureSampler={__CFRuntimeBase=QAQ}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}
^{SCNCActionMove=^^?f@?@BdddddBB@?^{__CFString}qdddddBB}
v40@0:8^{__C3DScene=}16@24@?32
v48@0:8^{__C3DScene=}16@24@32@?40
@24@0:8^{__C3DMeshSource={__C3DGenericSource={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}16
@32@0:8r^d16q24
@40@0:8r^{SCNVector3=fff}16q24^q32
@40@0:8r^{CGPoint=dd}16q24^q32
@76@0:8@16@24q32B40q44q52q60q68
@68@0:8@16@24q32s40Q44q52q60
@32@0:8r^{SCNVector3=fff}16q24
@32@0:8r^{CGPoint=dd}16q24
@44@0:8r^f16q24B32^{CGColorSpace=}36
s16@0:8
r^{__C3DMeshSource={__C3DGenericSource={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}16@0:8
^{__C3DMeshSource={__C3DGenericSource={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}
@24@0:8^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}II^{__C3DMeshElement}CCC{?=c^{__CFData}I^I{?=qq}CB}fff^v^{__C3DMeshSource}[2]^{?}I}16
@60@0:8@16q24q32q40B48q52
@48@0:8@16q24q32q40
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}II^{__C3DMeshElement}CCC{?=c^{__CFData}I^I{?=qq}CB}fff^v^{__C3DMeshSource}[2]^{?}I}16@0:8
^{__C3DMeshElement={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}II^{__C3DMeshElement}CCC{?=c^{__CFData}I^I{?=qq}CB}fff^v^{__C3DMeshSource}[2]^{?}I}
{_NSRange="location"Q"length"Q}
{AVAudio3DPoint=fff}16@0:8
v28@0:8{AVAudio3DPoint=fff}16
@24@0:8^{__C3DEngineContext=}16
v48@0:8{SCNVector3=fff}16{SCNVector3=fff}28@40
v48@0:8@16{CGPoint=dd}24@40
^{__C3DFXProgram={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}ib1b1^{__C3DFXProgramDelegate}}
{?="weakProgram"^{__C3DFXProgram}"baseIndex"I"baseVertex"I"vertexSize"I"allocatedVerticesSize"I"allocatedIndicesSize"I"textureImage"^{__C3DImage}"texture"^{__C3DTexture}"drawMode"I"orthographic"B"clearDepthBuffer"B"enableDepthTest"B"enableCulling"B"isDynamic"B"mesh"^{__C3DMesh}"meshElement"^{__C3DMeshElement}"_cache"{?="verticesStride"Q"colorsStride"Q"uvsStride"Q"verticesData"*"colorsData"*"uvsData"*}"_usedMeshes"@"NSMutableSet""_freeMeshes"@"NSMutableSet""_usedMeshElements"@"NSMutableSet""_freeMeshElements"@"NSMutableSet"}
{?="textureInfo"{?="texture"^{__C3DImage}"textureSize"{CGSize="width"d"height"d}"isRetina"B}"lineHeight"d"characterWidth_texture"s"characterWidth_typography"^d"characterHeight_texture"s"symbolRects"^{?}}
^{__C3DRasterizerStates=}
[64000C]
@"NSSet"
@"NSMutableOrderedSet"
{?="initialized"B"showFullStatistics"B"showRenderOptionsPanel"B"fps"f"waitDisplayLinkTime"f"pressedButtonIndex"q"fpsString"^{__CFString}"shortString"^{__CFString}"internalString"^{__CFString}"lightingStatistics"[9I]"stats"{__C3DEngineStats="verticesProcessed"I"primitivesProcessed"I"drawCount"I"drawStep"I"frameCount"I"fboSwitches"I"vboSwitches"I"attSwitches"I"attEnabling"I"iboSwitches"I"vaoSwitches"I"prgSwitches"I"texSwitches"I"rssSwitches"I"getCount"I"uniformFloatSent"I"uniformIntSent"I"uniformVector2Sent"I"uniformVector3Sent"I"uniformVector4Sent"I"uniformMatrix4Sent"I"vboUploaded"I"iboUploaded"I"texUploaded"I"cpuTime"d"cstrTime"d"phyTime"d"prtTime"d"animTime"d"skinTime"d"mrphTime"d"rendTime"d"twoDTime"d"delegateTime"d"glFlushTime"d"waitDisplayLinkTime"d"drawableWaitTime"d"gpuTime"d"lastDisplayLinkTime"d"prgCount"I"texCount"I"fboCount"I"vboCount"I"rboCount"I"iboCount"I"cboCount"I"vaoCount"I"fboMemory"I"rboMemory"I"vboMemory"I"iboMemory"I"cboMemory"I"texMemory"I"backBufferMemory"I"depthBuffersMemory"I"onlineShaderCount"I"onlineShaderCompilationTime"d"renderPipelineCount"I"renderPipelineCompilationTime"d"computePipelineCount"I"computePipelineCompilationTime"d"frmAvgTime"d"frmMinTime"d"frmMaxTime"d"frameTimeHistory"[60d]"frameTimeCurrentIndex"I"startTime"d"lastFrameTime"d}}
@"SCNAuthoringEnvironment2"
@"SCNView"
24@0:8@16
{SCNMatrix4=ffffffffffffffff}80@0:8{SCNMatrix4=ffffffffffffffff}16
v24@0:8f16B20
v40@0:816q32
B32@0:8^{__C3DNode=}16^{C3DSphere=}24
{C3DSphere=}16@0:8
v48@0:8{CGPoint=dd}16q32Q40
@"UIGestureRecognizer"
{C3DSphere="vector"}
^{SCNCActionRotate=^^?f@?@BdddddBB@?^{__CFString}qddddfBBBBB}
@"SCNView"16@0:8
v24@0:8@"SCNView"16
v24@0:8@"SCNCameraController"16
f20@0:8f16
(?={?=ffff})16@0:8
(?="vector""center"""{?="x"f"y"f"z"f"radius"f})
{?="stickyMoveEnabled"B"direction""pickedAxis"Q"userStickyAxis"Q}
{?="automaticLocationUpToDate"B"hasAutomatic"B}
{?="lastDragLocation"{CGPoint="x"d"y"d}"velocity"{CGPoint="x"d"y"d}"lastDragTime"d}
{?="lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"keyCodeConfiguration"@"NSDictionary""keyDown"{set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short> >="__tree_"{__tree<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned short, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::less<unsigned short> >="__value_"Q}}}"forward"{vector<unsigned short, std::__1::allocator<unsigned short> >="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >="__value_"^S}}"backward"{vector<unsigned short, std::__1::allocator<unsigned short> >="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >="__value_"^S}}"left"{vector<unsigned short, std::__1::allocator<unsigned short> >="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >="__value_"^S}}"right"{vector<unsigned short, std::__1::allocator<unsigned short> >="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >="__value_"^S}}}
{?="hasShift"B"hasOption"B}
@"SCNCameraController"
@"<SCNCameraNavigationControllerDelegate>"
v24@0:816
^{__C3DRendererContext={__CFRuntimeBase=QAQ}iIIIIfI^{__C3DTexture}^{__C3DStack}^vBBBBB^{__CFDictionary}I^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}{C3DColor4=(?=[4f]{?=ffff})}^vq^{__C3DFXProgramObject}{__C3DEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}{Cache=[8I]Ii^{__C3DBlendStates}I^{__C3DRasterizerStates}^{__C3DMesh}^{__C3DMeshElement}IIiI^vii}{?=[2I][5i][14{?=iII}][14I]^?^?^?^?^?^?^?^?^?}[2{VolatileObject=^{__C3DArray}II^{__CFArray}}]^{__C3DArray}I^{__CFDictionary}}24@0:8^{__C3DEngineContext=}16
v24@0:8^{__C3DImageProxy=}16
v40@0:8^{__C3DEngineContext=}16{CGSize=dd}24
^{__C3DTexture=}52@0:8{CGSize=dd}16^{__C3DEngineContext=}32^{__C3DTextureSampler={__CFRuntimeBase=QAQ}iiiiii{C3DColor4=(?=[4f]{?=ffff})}fCiQ}40B48
^{__C3DFramebuffer=}
@40@0:8^{__C3DEngineContext=}16@24@32
v32@0:8@16^{__C3DEngineContext=}24
B64@0:8@16{CGSize=dd}24Q40@48^@56
@72@0:8@16{CGSize=dd}24@40@48:56^v64
v24@0:8:16
@"NSError"
@56@0:8@16{CGSize=dd}24@40@48
v56@0:8^{CGImage=}16{?=qiIq}24@48
@"AVAssetWriterInput"
@"AVAssetWriterInputPixelBufferAdaptor"
@"AVAssetWriter"
{?="bodyA"@"SCNPhysicsBody""bodyB"@"SCNPhysicsBody""axisA"{SCNVector3="x"f"y"f"z"f}"anchorA"{SCNVector3="x"f"y"f"z"f}"axisB"{SCNVector3="x"f"y"f"z"f}"anchorB"{SCNVector3="x"f"y"f"z"f}"minLinearLimit"d"maxLinearLimit"d"minAngularLimit"d"maxAngularLimit"d"motorTargetLinearVelocity"d"motorMaximumForce"d"motorTargetAngularVelocity"d"motorMaximumTorque"d}
^{btSliderConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}BB{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}BffffffffffffffffffffffffffffBBi[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}][3f][3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]f{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffBfffBfff}
^{SCNCActionScale=^^?f@?@BdddddBB@?^{__CFString}qddddfffffBB}
@"CALayer"16@0:8
@24@0:8@"NSString"16
@40@0:8{SCNVector4=ffff}16@32
@36@0:8{SCNVector3=fff}16@28
@88@0:8{SCNMatrix4=ffffffffffffffff}16@80
v32@0:8@"CAAnimation"16@"NSString"24
v32@0:8@16@"NSString"24
@"CAMediaTimingFunction"16@0:8
v24@0:8@"CAMediaTimingFunction"16
@"UIColor"48@0:8d16d24d32d40
v24@0:8@"NSArray"16
^{CGPath=}16@0:8
v24@0:8^{CGPath=}16
@"<SCNCameraControlConfiguration>"16@0:8
@"SCNCameraController"16@0:8
@"CAAnimation"16@0:8
v24@0:8@"CAAnimation"16
@24@0:8@"CAAnimation"16
@"SCNPhysicsBody"16@0:8
@80@0:8@"SCNPhysicsBody"16{SCNVector3=fff}24{SCNVector3=fff}36@"SCNPhysicsBody"48{SCNVector3=fff}56{SCNVector3=fff}68
@48@0:8@"SCNPhysicsBody"16{SCNVector3=fff}24{SCNVector3=fff}36
v40@0:8@"NSString"16q24@?<v@?@"<SCNBufferStream>"@"SCNNode"@"<SCNShadable>"@"SCNRenderer">32
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
@"NSString"24@0:8@"NSString"16
@"<SCNProgramDelegate>"16@0:8
v24@0:8@"<SCNProgramDelegate>"16
@"<MTLLibrary>"16@0:8
v24@0:8@"<MTLLibrary>"16
d24@0:8q16
v32@0:8d16q24
@"SCNMorpher"16@0:8
@"SCNGeometry"16@0:8
@32@0:8@"SCNGeometry"16d24
v72@0:8d16{CGRect={CGPoint=dd}{CGSize=dd}}24@"<MTLCommandBuffer>"56@"MTLRenderPassDescriptor"64
v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@"<MTLCommandBuffer>"48@"MTLRenderPassDescriptor"56
v32@0:8@"NSArray"16d24
@32@0:8^v16@"NSDictionary"24
@32@0:8@"<MTLDevice>"16@"NSDictionary"24
v24@0:8@"SCNAudioPlayer"16
v32@0:8@"SCNNode"16Q24
v32@0:8@"SCNNode"16@"SCNNode"24
@"SCNNode"28@0:8@"NSString"16B24
@"NSArray"24@0:8@?<B@?@"SCNNode"^B>16
v24@0:8@?<v@?@"SCNNode"^B>16
{SCNVector3=fff}36@0:8{SCNVector3=fff}16@"SCNNode"28
{SCNMatrix4=ffffffffffffffff}88@0:8{SCNMatrix4=ffffffffffffffff}16@"SCNNode"80
@"NSArray"48@0:8{SCNVector3=fff}16{SCNVector3=fff}28@"NSDictionary"40
v24@0:8@"SCNParticleSystem"16
@"SCNNode"24@0:8@"NSString"16
@"SCNLight"16@0:8
v24@0:8@"SCNLight"16
@"SCNCamera"16@0:8
v24@0:8@"SCNCamera"16
v24@0:8@"SCNGeometry"16
@"SCNSkinner"16@0:8
v24@0:8@"SCNSkinner"16
v24@0:8@"SCNMorpher"16
v24@0:8@"SCNPhysicsBody"16
@"SCNPhysicsField"16@0:8
v24@0:8@"SCNPhysicsField"16
@"<SCNNodeRendererDelegate>"16@0:8
v24@0:8@"<SCNNodeRendererDelegate>"16
@"SCNNode"24@0:8@"SCNGeometry"16
@24@0:8@"MDLObject"16
@56@0:8@"SCNPhysicsBody"16{SCNVector3=fff}24@"SCNPhysicsBody"36{SCNVector3=fff}44
@36@0:8@"SCNPhysicsBody"16{SCNVector3=fff}24
v32@0:8@"SCNMaterial"16Q24
v32@0:8Q16@"SCNMaterial"24
@"SCNMaterial"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
@"SCNGeometryElement"24@0:8q16
@"SCNMaterial"16@0:8
v24@0:8@"SCNMaterial"16
@"SCNGeometryElement"16@0:8
v24@0:8@"SCNGeometryElement"16
@"SCNGeometrySource"16@0:8
v24@0:8@"SCNGeometrySource"16
@32@0:8@"NSArray"16@"NSArray"24
@40@0:8@"NSArray"16@"NSArray"24@"NSArray"32
@24@0:8@"MDLMesh"16
@"SCNMaterialProperty"16@0:8
@"NSURL"16@0:8
v24@0:8@"NSURL"16
@24@0:8@"MDLLight"16
@24@0:8@"MDLMaterial"16
v40@0:8q16@"NSArray"24@?<v@?^^v^Q^Iq>32
v40@0:8@"NSArray"16q24@?<v@?^^v^Qqqf>32
@"SCNParticleSystem"16@0:8
@32@0:8@"NSString"16@"NSString"24
@32@0:8@"SCNPhysicsBody"16@"NSArray"24
@24@0:8@"SCNNode"16
@32@0:8@"SCNGeometry"16@"NSDictionary"24
@32@0:8@"SCNNode"16@"NSDictionary"24
@60@0:8@"NSData"16q24q32q40B48q52
@48@0:8@"NSData"16q24q32q40
@24@0:8@"MDLSubmesh"16
@76@0:8@"NSData"16@"NSString"24q32B40q44q52q60q68
@"SCNScene"32@0:8@"NSDictionary"16@?<v@?fq@"NSError"^B>24
@"SCNScene"32@0:8@"NSDictionary"16^@24
@32@0:8@"NSString"16#24
@"NSArray"24@0:8#16
@"NSArray"24@0:8@?<B@?@@"NSString"^B>16
@32@0:8@"NSURL"16@"NSDictionary"24
@32@0:8@"NSData"16@"NSDictionary"24
@24@0:8@"MDLCamera"16
v32@0:8d16@"SCNNode"24
d24@0:8@"SCNNode"16
v32@0:8@16@"<NSCopying>"24
@"SCNTechnique"24@0:8@"NSDictionary"16
@"SCNTechnique"24@0:8@"NSArray"16
v24@0:8@"SCNPhysicsBehavior"16
@"NSArray"40@0:8@"SCNPhysicsBody"16@"SCNPhysicsBody"24@"NSDictionary"32
@"NSArray"32@0:8@"SCNPhysicsBody"16@"NSDictionary"24
@"NSArray"160@0:8@"SCNPhysicsShape"16{SCNMatrix4=ffffffffffffffff}24{SCNMatrix4=ffffffffffffffff}88@"NSDictionary"152
@"<SCNPhysicsContactDelegate>"16@0:8
v24@0:8@"<SCNPhysicsContactDelegate>"16
@"SCNPhysicsShape"16@0:8
v24@0:8@"SCNPhysicsShape"16
@32@0:8q16@"SCNPhysicsShape"24
@28@0:8B16@?20
@28@0:8B16@?<{SCNMatrix4=ffffffffffffffff}@?@"SCNNode"{SCNMatrix4=ffffffffffffffff}>20
@28@0:8B16@?<{SCNVector3=fff}@?@"SCNNode"{SCNVector3=fff}>20
@28@0:8B16@?<{SCNVector4=ffff}@?@"SCNNode"{SCNVector4=ffff}>20
@32@0:8d16@?<v@?@"<SCNAnimation>"@B>24
@"SCNAction"16@0:8
@?<f@?f>16@0:8
v24@0:8@?<f@?f>16
@"SCNAction"48@0:8d16d24d32d40
@"SCNAction"36@0:8{SCNVector3=fff}16d28
@"SCNAction"52@0:8d16d24d32d40B48
@"SCNAction"44@0:8d16{SCNVector3=fff}24d36
@"SCNAction"40@0:8{SCNVector4=ffff}16d32
@"SCNAction"32@0:8d16d24
@"SCNAction"24@0:8@"NSArray"16
@"SCNAction"32@0:8@"SCNAction"16Q24
@"SCNAction"24@0:8@"SCNAction"16
@"SCNAction"24@0:8d16
@"SCNAction"24@0:8@?<v@?@"SCNNode">16
@"SCNAction"32@0:8@?<v@?@"SCNNode">16@"NSObject<OS_dispatch_queue>"24
@"SCNAction"32@0:8@"NSString"16d24
@"SCNAction"32@0:8d16@?<v@?@"SCNNode"d>24
v88@0:8@"SCNParticleSystem"16{SCNMatrix4=ffffffffffffffff}24
B48@0:8@"NSURL"16@"NSDictionary"24@"<SCNSceneExportDelegate>"32@?<v@?f@"NSError"^B>40
@"SCNPhysicsWorld"16@0:8
@40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
@40@0:8@"NSURL"16@"NSDictionary"24^@32
@24@0:8@"MDLAsset"16
@"SCNPhysicsField"32@0:8d16d24
@"SCNPhysicsField"24@0:8@?<{SCNVector3=fff}@?{SCNVector3=fff}{SCNVector3=fff}ffd>16
^{btRaycastVehicle=^^?{btAlignedObjectArray<btVector3>={btAlignedAllocator<btVector3, 16>=}ii^{btVector3}B}{btAlignedObjectArray<btVector3>={btAlignedAllocator<btVector3, 16>=}ii^{btVector3}B}{btAlignedObjectArray<float>={btAlignedAllocator<float, 16>=}ii^fB}{btAlignedObjectArray<float>={btAlignedAllocator<float, 16>=}ii^fB}iiff^{btVehicleRaycaster}fff^{btRigidBody}iii{btAlignedObjectArray<btWheelInfo>={btAlignedAllocator<btWheelInfo, 16>=}ii^{btWheelInfo}B}}16@0:8
@"SCNPhysicsBody"
^{btRaycastVehicle=^^?{btAlignedObjectArray<btVector3>={btAlignedAllocator<btVector3, 16>=}ii^{btVector3}B}{btAlignedObjectArray<btVector3>={btAlignedAllocator<btVector3, 16>=}ii^{btVector3}B}{btAlignedObjectArray<float>={btAlignedAllocator<float, 16>=}ii^fB}{btAlignedObjectArray<float>={btAlignedAllocator<float, 16>=}ii^fB}iiff^{btVehicleRaycaster}fff^{btRigidBody}iii{btAlignedObjectArray<btWheelInfo>={btAlignedAllocator<btWheelInfo, 16>=}ii^{btWheelInfo}B}}
^{__C3DConstraint={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}16@0:8
v24@0:8^{__C3DConstraint={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}16
^{__C3DConstraint={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}
^{SCNCActionRepeat=^^?f@?@BdddddBB@?^{__CFString}qdddd^{SCNCAction}QQdB}
B48@0:8@16I24I28@32@40
v48@0:8@16I24I28@32@40
^{__C3DFXGLSLProgram=}24@0:8q16
v32@0:8^{__C3DFXGLSLProgram=}16@24
@"SCNProgram"
@64@0:8@16@24@32@40q48Q56
@"<SCNShadable>"
v24@0:8^{__C3DTextGeometry={__C3DShapeGeometry={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__C3DMesh}[16C]}{?=^{__CTFrame}^v^viiBBB{CGRect={CGPoint=dd}{CGSize=dd}}}}16
@24@0:8^{__C3DTextGeometry={__C3DShapeGeometry={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__C3DMesh}[16C]}{?=^{__CTFrame}^v^viiBBB{CGRect={CGPoint=dd}{CGSize=dd}}}}16
{?={?=cddid^v^v}^v^viiBB{CGRect={CGPoint=dd}{CGSize=dd}}d}16@0:8
@"UIBezierPath"
@"UIFont"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
v24@0:8^{__C3DShapeGeometry={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__C3DMesh}[16C]}16
@24@0:8^{__C3DShapeGeometry={__C3DGeometry={__C3DEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__C3DScene}q}^{__C3DMesh}^{__C3DMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__C3DMeshElement}^{__C3DMeshSource}^{__C3DMesh}^v}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__C3DMesh}[16C]}16
{?=cddid^v^v}16@0:8
v40@0:8@16q24d32
@40@0:8@16q24^{__C3DLOD=}32
^{__C3DLOD=}
