initWithAccount:
_tearDownABNotifications
_tearDownCalNotifications
_tearDownNotesNotifications
account
existingTaskManager
shutdown
dealloc
eventCalendarsByFolderId
objectForKeyedSubscript:
contactStoresByFolderId
toDoCalendarsByFolderId
sharedInstance
noteDB
storeForObjectID:
_copyABAccount:
numberWithInt:
folderID
abDB
folderName
addressBookConstraintsPath
abProcessAddedRecords
changeTrackingID
_copyExchangeCalendarStore:
calDB
isEqualToString:
dataclass
usernameWithoutDomain
emailAddress
stringWithFormat:
URLWithString:
syncStoreIdentifier
accountForAccountId:
newlyAddedAccount
setAccountIdentifier:
setAccountType:
backingAccountInfo
displayAccount
accountDescription
setName:
noteSaveDB
_noteAccountObject:
newlyAddedStore
setAccount:
setExternalIdentifier:
defaultStore
setDefaultStore:
count
objectAtIndexedSubscript:
storeForExternalId:
deleteStore:
enabledForDADataclass:
setContactStoresByFolderId:
folderWithId:
setObject:forKeyedSubscript:
_folderHierarchy
stopMonitoringFolderWithID:
contactsFolders
countByEnumeratingWithState:objects:count:
_newABSourceForDAFolder:
defaultContactsFolder
_containerForFolderWithId:dataclass:
abSaveDB
setEventCalendarsByFolderId:
eventsFolders
_newCalCalendarForDAFolder:
defaultEventsFolder
allKeys
calSaveDB
setToDoCalendarsByFolderId:
toDosFolders
defaultToDosFolder
noteStoreObjectIdsByFolderId
setNoteStoreObjectIdsByFolderId:
removeAllObjects
stores
externalIdentifier
objectID
notesFolders
_newNoteSourceForDAFolder:
defaultNotesFolder
calOpenDBWithClientIdentifier:
abOpenDBWithClientIdentifier:
noteOpenDB
calCloseDBAndSave:
abCloseDBAndSave:
noteCloseDBAndSave:
alloc
initWithCapacity:
intValue
containsObject:
addObject:
removeObjectForKey:
defaultContainerIdentifierForDADataclass:
accountID
copy
name
monitorFolderWithID:
_appendSyncRequestForFoldersOfDataclasses:remoteChanges:
_syncAllContactFoldersWithRemoteChanges:
_syncAllEventsFoldersWithRemoteChanges:
_syncAllToDosFoldersWithRemoteChanges:
_syncAllNotesFoldersWithRemoteChanges:
_refirePendingCalendarInvitations
preferredEventDaysToSync
setEventsNumberOfPastDaysToSync:
array
setShouldUseOpportunisticSockets:
setWasUserInitiated:
foldersForFolderIDs:andDataclasses:
_appendSyncRequestForFolders:remoteChanges:
_syncStarted
foldersTag
setIsFirstSync:
visibleFolders
setOldFolders:
syncFolderHierarchyWithConsumer:requireChangedFolders:context:
setSyncWhenReachable:
_syncAllContactsEventsToDosAndNotesFolders
setSafeToPing:
_syncEndedWithError:
_openLocalDBConnections
isFirstSync
oldFolders
_abBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_calBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_notesBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_cacheFoldersForDataclasses:
_removeABSourceForDAFolder:
_removeCalCalendarForDAFolder:
_removeNoteSourceForDAFolder:
_updateFolderHierarchyRequireChangedFolders:
_nilOutContainersForDataclasses:
_closeLocalDBConnectionsWithoutSaving
_appendFolderHierarchyChangesForFoldersOfDataclasses:
serverID
displayName
folderId
parentFolderId
initWithFolderType:serverID:parentID:displayName:localID:
changeType
setChangeType:
renameOnCollision
setRenameOnCollision:
syncLocallyChangedFolder:consumer:completionBlock:
attemptInvitationLinkageForMetaDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
sharedDBWatcher
isMonitoring
_appendSyncRequestForFoldersOfDataclasses:
registerConcernedCalParty:withChangedBlock:
removeConcernedCalParty:
registerConcernedABParty:withChangedBlock:
removeConcernedABParty:
registerConcernedNoteParty:withChangedBlock:
removeConcernedNoteParty:
numberWithBool:
boolValue
setIsMonitoring:
observeReachabilityWithBlock:
_verifySearchStore
refreshFolderListRequireChangedFolders:isUserRequested:
defaultCenter
folderHierarchyUpdateNotification:
addObserver:selector:name:object:
folderHierarchyUpdateRequireChangedFoldersNotification:
folderContentsUpdate:
_setUpABNotifications
_setUpCalNotifications
_setUpNotesNotifications
folderIdsForPersistentPush
folderIdsForPersistentPushForDataclasses:clientID:
allObjects
monitorFoldersWithIDs:
sharedManager
addPersistentClientWithAccountID:clientID:watchedIDs:
stopObservingReachability
removeObserver:
lock
unlock
sharedGateKeeper
unregisterWaiterForDataclassLocks:
cleanUpFilesForAccountWithId:
rangeOfString:
substringToIndex:
_parentIdFromEventId:
initWithObjects:
notesForIntegerIds:
serverId
notesForServerIds:
integerId
syncAnchor
setSyncAnchor:
syncStartedForStoreWithExternalID:
syncEndedForStoreWithExternalID:withError:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
folderHierarchySuccessfullyUpdated:withNumChangedFolders:
folderHierarchyFailedToUpdate:withStatus:andError:
localChangeForFolder:finishedWithStatus:andError:completionBlock:
preferredDaysToSyncDidChange
matchedRecord
setMatchedRecord:
syncFolderIDs:forDataclasses:isUserRequested:
_handleDaemonBackedLocalFolderChangeWithDBChangeIndices:oldFolders:status:error:
processDAFolderChange:withCompletionBlock:
processMeetingRequestDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
startMonitoring
requestAgentStopMonitoringWithCompletionBlock:
_exchangeIdForLocalId:inContainer:dataclass:redirectToParent:
_localIdForExchangeId:inContainer:dataclass:
_syncKeyForFolderWithId:
_setSyncKey:forFolderWithId:
.cxx_destruct
outstandingFolderRequests
setOutstandingFolderRequests:
currentlySyncingFolderIds
setCurrentlySyncingFolderIds:
folderItemSyncRequestLock
setFolderItemSyncRequestLock:
folderIdToSequentialFailureCount
setFolderIdToSequentialFailureCount:
folderIdToSequentialServerErrorCount
setFolderIdToSequentialServerErrorCount:
numLocalFolderUpdatesInFlight
setNumLocalFolderUpdatesInFlight:
isShuttingDown
setIsShuttingDown:
calUnitTestMergedRequestsBlock
setCalUnitTestMergedRequestsBlock:
_matchedRecord
_isShuttingDown
_numLocalFolderUpdatesInFlight
_eventCalendarsByFolderId
_toDoCalendarsByFolderId
_contactStoresByFolderId
_noteStoreObjectIdsByFolderId
_outstandingFolderRequests
_currentlySyncingFolderIds
_folderItemSyncRequestLock
_folderIdToSequentialFailureCount
_folderIdToSequentialServerErrorCount
_calUnitTestMergedRequestsBlock
resetSystemTimeZone
systemTimeZone
personPredicateWithGroup:source:account:
firstName
personPredicateWithValue:comparison:forProperty:
lastName
middleName
companyName
andPredicateWithSubpredicates:
searchPeopleWithPredicate:sortOrder:inAddressBook:withDelegate:
uidForCalFramework
subject
startDateForCalFramework
timeIntervalSinceReferenceDate
dueDate
_copyExistingABRecordForContact:matchOnAttributes:inStore:
_copyExistingCalRecordForEvent:matchOnAttributes:inCalendar:
_copyExistingCalRecordForToDo:matchOnAttributes:inCalendar:
_copyExistingNoteRecordForNote:matchOnAttributes:inNoteStore:
initWithFolder:hasRemoteChanges:isInitialUberSync:
_appendSyncRequest:
folder
containsPostponedActions
removeObject:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
_noteSyncForFolderWithId:andTitle:finishedWithSuccess:
_removePostponedRequestForFolderWithId:
isResyncAfterConnectionFailed
isInitialSync
setIsResyncAfterConnectionFailed:
_queueServerFailureResyncForFolderWithId:isInitialSync:
newDataHandlerForDataclass:container:changeTrackingID:
openDB
closeDBAndSave:
setIsResyncAfterServerError:
_fireWaitingFolderItemSyncRequests
relinquishLocksForWaiter:dataclasses:moreComing:
_folderItemsSyncTask:failedWithErrorCode:
_moveItemsTask:failedWithErrorCode:
_smartMailTask:failedWithErrorCode:error:
_copyExistingLocalItemForExchangeItem:matchOnAttributes:inContainer:
initWithCalEvent:serverID:account:
eventByMergingInEvent:account:
isEqualToEvent:
initWithItemChangeType:changedItem:serverId:
itemChangeType
changedItem
removeObjectAtIndex:
_handleAction:inFolderWithId:dataclass:isInitialSync:resultingChangeActionsForServer:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:
_detectDuplicatedEventFromExchangeEvent:inFolderWithId:isInitialSync:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:resultingChangeActionsForServer:outEvent:outLocalItem:outDidTouchDB:
_setChangedItem:
protocol
useInstanceIdForException
instanceID
copyLocalObjectFromId:
saveWithLocalObject:toContainer:shouldMergeProperties:outMergeDidChooseLocalProperties:account:
clientID
getIdFromLocalObject:
getDAObjectWithLocalItem:serverId:account:
setLocalItem:
setClientID:
loadLocalItemWithAccount:
cachedOrganizerIsSelfWithAccount:
deletedItemsFolder
copySelfAttendeeGeneratedIfNecessaryWithLocalEvent:forAccount:
deleteFromContainer:
abPersonChangeId
abGroupChangeId
changeId
calEventChangeId
calRecurrenceChangeId
calAlarmChangeId
calAttendeeChangeId
highestSequenceNumber
changes
URIRepresentation
deleteChanges:
setContainer:
drainContainer
saveContainer
saveServerIDToExistingItem
sendEmailForMeetingInvitationAndResponse
attendees
eventByMergingInLosingEvent:account:
allValues
arrayByAddingObjectsFromArray:
fillOutMissingExternalIds
getTombstoneEndTimeForEvent:
setTombstoneEndTime:
_clearChangeHistoriesWithChangeIdContext:dataclass:inFolderWithId:pushedActions:
drainSuperfluousChanges
copyOfAllLocalObjectsInContainer
objectEnumerator
nextObject
initWithFormat:
setActions:
addObjectsFromArray:
_syncResultForFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:dataclass:resultingChangeActionsForServer:pushedActions:rejectedServerIds:eventsWithPendingInvitationEmails:
sendEmailsForCalEvents:consumer:
_finishInitialSyncForFolder:dataclass:
_wrapperSyncResultForFolder:dataclass:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
purgeAttendeesPendingDeletion
setCalEvent:
arrayWithObjects:count:
consumerFinishedInvitationActionsForEventWithUID:
code
context
messageDidSendWithContext:
eventUID
isMyInvite
emailResponse
_finishWithInvitationEvent:eventUID:expectedResponse:wasMyInvite:isStillInvite:
attendeeUUIDs
_reallyApplyMessageDidSendWithContext:
registerWaiter:forDataclassLocks:completionHandler:
organizerEmail
length
meetingResponseForEmail
_reallyFinishInvitationBatch:
status
bundleForClass:
localizedStringForKey:value:table:
calEventServerId
deliveryItemServerId
deliveryItemFolderId
eventWithCalEvent:serverID:account:
initWithCalFrameworkString:
uidWithoutExceptionDate
initWithCalEvent:originalEvent:account:
serverIdForCalFrameworkWithParentEvent:
responseRequested
meetingResponse
protocolVersion
setMeetingResponseForEmail:
pushedMoveRequests
origRequest
destID
destinationContainerId
setServerID:
verifyExternalIds
saveServerIDToCalendar
sourceServerId
sourceContainerId
initMoveRequestWithMessage:fromFolder:toFolder:
setContext:
performMoveRequests:consumer:
hasRemoteChanges
setHasRemoteChanges:
isResyncAfterServerError
actions
_copyCalendarItemMoveActionsInCalendar:dataHandler:deleteActionsByFolderId:
mutableCopy
_appendSyncRequest:atBeginning:
_reallySendMoves:
wipeServerIds
_copyABActionsInContainer:existingActions:dataHandler:wantPreserveActions:changeContext:
_copyCalendarItemActionsInContainer:existingActions:dataHandler:wantPreserveActions:skippedDetachments:changeContext:
_copyNotesActionsInNoteStore:existingActions:dataHandler:wantPreserveActions:changeSet:
setWithArray:
instanceId
forwardedAttendees
forwardedAttendeeUUIDs
forwardMeeting:withServerId:withInstanceId:withFolderId:toEmailAddresses:withAttendeeUUIDs:consumer:
isInitialUberSync
setContainsPostponedActions:
synchronizeContactsFolder:previousTag:previousSyncToken:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:previousTagIsSuspect:moreLocalChangesAvailable:consumer:
synchronizeEventsFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
synchronizeToDosFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
synchronizeNotesFolder:noteContext:previousTag:actions:changeSet:notesToDeleteAfterSync:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
_reallySyncRequest:
userInfo
_syncRequest:
insertObject:atIndex:
_addSimpleChangeForType:changedItemId:addedIds:modifiedIds:deletedIds:collapsedIds:
anyObject
folderType
parentID
enabledDataclassesBitmask
_getHierarchyChangeForDataclass:changedItemId:changeType:externalId:changeTableIndices:
_handleLocallyChangedFolderWithChangedItemId:changeType:externalId:changeTableIndices:dataclass:
localFileHandle
seekToFileOffset:
readDataOfLength:
initWithBase64EncodedData:options:
writeData:
reason
errorWithDomain:code:userInfo:
truncateFileAtOffset:
setLocalFileLength:
_saveAttachmentDataToDatabaseForTask:
attachmentUUID
consumerForTask:
downloadFinishedError:
localFileName
attachmentContentType
_reallyPrepareFetchAttachmentTask:
setAttachmentName:
setMessageID:
predicateShouldContinue:
predicateShouldContinue:afterFindingRecord:
actionFailed:forTask:error:
notesFolderWithId:failedToSyncWithStatus:error:
syncResultForContactsFolder:newTag:previousTag:newSyncToken:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:
syncResultForEventsFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
syncResultForToDosFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
syncResultForNotesFolder:noteContext:newTag:previousTag:actions:results:changeSet:notesToDeleteAfterSync:isInitialSync:moreAvailable:moreLocalChangesAvailable:
finishWithInvitationBatch:
meetingResponseFinishedWithStatus:error:successfulResponses:failedResponses:
_markEventWithLocalIDAsNeedingInvitationEmail:parentId:
resultsForMessageMove:
_appendSyncRequestForFolders:
waiterID
fetchAttachmentTask:receivedData:ofContentType:
fetchAttachmentTask:completedWithStatus:dataWasBase64:error:
prepareFetchAttachmentTask:
contactsFolderWithId:successfullyPushedActions:
messageDidSendWithContext:sentBytesCount:receivedBytesCount:
predicateShouldContinue:afterFindingRecord:metadata:
predicateShouldContinue:afterFindingRecord:moreComing:
predicateShouldContinue:afterFindingRecord:metadata:moreComing:
conciseDescription
initWithBackingAccountInfo:
scheduleIdentifier
initWithConnectionClass:delegate:delegateQueue:serviceIdentifier:
setPowerOptimizationsForExpensiveNetworkingDisabled:
earlyPingEnabled
setDisableEarlyFire:
setKeepAliveGracePeriod:
standardUserDefaults
integerForKey:
setMinimumKeepAliveInterval:
setMaximumKeepAliveInterval:
_handlePolicyUpdate
addObserverForName:object:queue:usingBlock:
da_newGUID
setPingPowerAssertionUUID:
arrayWithArray:
_stopMonitoringFoldersWithIds:
invalidate
_pingPowerAssertionIdentifier
_cancelPingTask
stopManager
cancelTask:
askedToCancelWhileModal
setDelegate:
tearDown
persistentUUID
initWithAccountPersistentUUID:
policyValues
stateString
appendFormat:
componentsJoinedByString:
_refireBlacklistFolderIdsSync
initWithArray:
queuedTasks
activeQueuedTask
currentRunLoop
currentMode
notificationWithName:object:
defaultQueue
enqueueNotification:postingStyle:coalesceMask:forModes:
foldersUnderFolderWithID:
folderCache
dictionary
valueForKey:
setValue:forKey:
setFolderCache:
localID
isGoogleAccount
domain
mcBackingPayload
blowAwayFolderCache
_handleSuccessfulFolderChangeForFolders:previousSyncKey:
_pruneFoldersToMonitorOfOrphanedFolders
_reportFolderHierarchySyncSuccessWithCount:
removeConsumerForTask:
dataclasses
initWithPreviousSyncKey:
setDataclasses:
setRequireChangedFolders:
setConsumer:forTask:
taskManager
submitExclusiveTask:
submitIndependentTask:
isEnabledForDataclass:
_reallySyncFolderHierarchyWithConsumer:requestDataclasses:requireChangedFolders:context:
rangeOfString:options:
stringByAppendingFormat:
substringFromIndex:
_setLocalDisplayName:forFolder:
_setFolderHierarchyNeedsUpdate:
_handleNameCollisionOnAddedFolder:consumer:completionBlock:
taskWithFolder:previousSyncKey:completionBlock:
setSourceApplicationBundleIdentifier:
_reallySyncLocallyChangedFolder:consumer:dataclasses:completionBlock:
currentThread
isMainThread
initWithTimeIntervalSinceNow:
reissuePingFromTimer:
initWithFireDate:interval:target:selector:userInfo:repeats:
addTimer:forMode:
dateWithTimeIntervalSinceNow:
_triggerFolderContentsChangedNotification
dictionaryWithObjects:forKeys:count:
notificationWithName:object:userInfo:
_refirePingAfterDelay:withGrowthAction:
removeFolderIDFromPingHistoryBlacklist:
initWithCount:
date
startTime
timeIntervalSinceDate:
setCount:
setStartTime:
folders
objectForKey:
setObject:forKey:
addFolderIDToPingHistoryBlacklist:
_foldersToSyncGivenResults:
inboxFolder
heartbeat
shouldClientScheduleReconnectDueToFailure
resumeManagerWithAction:
isEqualToSet:
_reissuePingTaskWithGrowthAction:
currentStyle
saveFetchingAutomaticallyState:
_pollFolders
getFetchingAutomaticallyState
wasUserInitiated
isFatPipe
isPluggedIn
_fixUpTimers
currentKeepAliveInterval
setInteger:forKey:
synchronize
initWithHeartbeat:folders:oldHeartbeat:oldFolders:
folderForID:
monitorFolder:
resumeMonitoringFolderID:
folderIdsThatExternalClientsCareAbout
minusSet:
unionSet:
setFolderIdsThatExternalClientsCareAbout:
folderIdsForPersistentPushForClientID:
setFolderIdsForPersistentPush:clientID:
initWithFolderID:
setPreviousSyncKey:
setWillUpdate:
setIsInitialSync:
setDataclass:
setMoreLocalChangesAvailable:
setPushedActions:
setPreservedActions:
suspendMonitoringFoldersWithIDs:
submitQueuedTask:
event
calAttendeeStatus
calAttendeePendingStatus
calEvent
meetingResponseForAccount:
includeExceptionsInParent
initWithItemChangeType:changedItem:serverId:instanceId:
responseItems
recurrence
exceptionStartTime
useEventIdsInMeetingResponse
responseComment
proposedStartTime
proposedEndTime
initWithDeliveryItemFolderId:deliveryItemServerId:instanceDate:meetingResponse:eventUID:responseComment:responseRequested:proposedStartTime:proposedEndTime:
initWithResponseItems:
setFilterDays:
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions:meetingResponseActions:emailEvents:
_respondToMeetingsForActions:inFolderWithId:consumer:
setMIMESupport:
setPushedMoveRequests:
message
fromFolder
toFolder
addSourceID:sourceFolder:destinatonFolder:
taskID
exceptionDate
activeSyncString
dateWithCalendarFormat:timeZone:
setAddressListForSender:
setAddressListForTo:
setHeader:forKey:
createMessageWithString:headers:
messageData
initWithMessage:messageID:messageType:originalMessageID:instanceId:originalFolderID:originalLongID:replaceMime:
setShouldNotRetry:
setAttendeeUUIDs:
initFreeBusyQueryWithStartDate:endDate:emailAddresses:
initWithInteger:
integerValue
cancelTaskWithID:
retrieveAvailability
init
mergedFreeBusy
UTF8String
dateByAddingTimeInterval:
_convertCalendarAvailabilityType:
initWithStartDate:endDate:type:
calendarAvailabilityRequestReturnedResults:
calendarAvailabilityRequestFinishedWithError:
type
subtype
setSubtype:
setBodyParameter:forKey:
ICSStringFromMethod:
removeHeaderForKey:
attachmentForData:mimeType:fileName:contentID:context:
appendString:withQuoteLevel:
createMessageWithPlainTextDocumentsAndAttachments:headers:
messageIDHeaderInFortyBytesOrLess
initWithData:encoding:
convertLineEndingsTo:
setMessageBody:
removeAttachmentForURL:
yearOfCommonEra
monthOfYear
dayOfMonth
hourOfDay
minuteOfHour
secondOfMinute
initWithYear:month:day:hour:minute:second:timeZone:
allDayEvent
endTime
timeZone
_copyICSDateFromDate:timeZone:
setDtstart:
setDtend:
setForcedAllDay:
initWithValue:type:
setProperty:forName:
uidForResponseEmailWithTimeZone:
until
setUid:
dTStamp
compare:
setDtstamp:
setLast_modified:
location
setLocation:
rrule
value
setUntil:
attendeesPendingDeletion
email
icsUserAddress
setAttendee:
combinedDateWithYMDFrom:HMSFrom:componentDatesTimezone:
setRecurrence_id:
setExdate:
_localizedStringForResponse:
attendee
selfAttendeeMeetingResponse
accountContainsEmailAddress:
setPartstat:
initWithEmailAddress:
setCutype:
setRsvp:
organizer
busyStatus
setClassification:
setComponents:options:
setProdid:
setMethod:
dataUsingEncoding:
copyMessageStringWithPlainTextString:vCalMethod:vCalAttachmentData:fromAddress:toAddresses:date:subject:outMessageID:
hasOccurrenceInTheFuture
isTombstoneEndTimeInFuture
timeIntervalSinceNow
CalCalendarItemStatus
fullEmailString
_stringWithRFC822DataFromEvent:icsMethod:recipients:recipientBareEmails:exceptionDate:outMessageID:
setExceptionDate:
null
removeObjectsInArray:
exceptions
isDeleted
addStringsToEmailForEventIOriginated:deletedExceptionOccurrenceDate:stringsToEmail:eventUUIDsToEmail:externalIDs:messageIDsToEmail:eventsDroppedDueToAge:checkEventForNeedingInvite:
fullOrganizerString
addStringsToEmailForEventIAmAttending:recipient:stringsToEmail:eventUUIDsToEmail:externalIDs:messageIDsToEmail:eventsDroppedDueToAge:checkEventForNeedingInvite:
setEventUID:
setEmailResponse:
setIsMyInvite:
sendMessageWithRFC822Data:messageID:outgoingMessageType:originalMessageFolderID:originalMessageItemID:originalMessageLongID:originalAccountID:useSmartTasksIfPossible:sourceApplicationBundleIdentifier:consumer:context:
sniffableTypeForFolder:
unarchivedObjectOfClass:fromData:error:
sortUsingFunction:context:
reverseObjectEnumerator
_copyDefaultExchangeEventsCalendar:
writeInviteToCalDBCreateAsRejected:defaultCalendar:account:
calOpenDBAsGenericClient
_clearOutInviteWithDeliveryFolderId:deliveryServerId:wasSoftDelete:considerInvitedToInvitations:
_reallyAttemptInvitationLinkageForMetaDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
registerPreemptiveWaiter:forDataclassLocks:completionHandler:
serverUpdatesAttendeeStatusOnEvents
supportsSettingsCommand
isHotmailAccount
setSetters:
setGetters:
accountDidUpdateProtocolVersion
userInformation
taskStatusForExchangeStatus:
initWithKey:status:result:
getResponse
result
primarySMTPAddress
emailAddresses
setPrimarySMTPAddress:emailAddresses:
settingsRequestFinishedWithResults:status:error:
dictionaryRepresentationForASSettingTask
removeFolderIDFromPingBlacklist:
addFolderIDToPingBlacklist:
fetchAttachmentsWithItemOperations
initForMessageUUID:
stringByAppendingPathComponent:
setLocalFileName:
initWithFileDescriptor:closeOnDealloc:
setLocalFileHandle:
agentWithAccountID:
seekToEndOfFile
setWriteAttachmentError:
localFileLength
setAttachmentContentType:
downloadProgressDownloadedByteCount:totalByteCount:
sharedAccountStore
persistentStore
accountTypeWithAccountTypeIdentifier:
initWithAccountType:
username
setUsername:
setAccountDescription:
supportedDataclasses
setProvisionedDataclasses:
enabledDataclasses
provisionedDataclasses
setEnabled:forDataclass:
credential
setCredential:
initWithPersistentAccount:
setSigningIdentityPersistentReference:forAddress:
setEncryptionIdentityPersistentReference:forAddress:
removeAccount:withCompletionHandler:
saveVerifiedAccount:withCompletionHandler:
_setForce7BitForUnitTests:
connectionManager:handleEvent:
connectionManager:handleEvent:context:
_newPolicyManager
folderSyncTask:completedWithStatus:error:foldersChanged:newSyncKey:
folderLocalUpdateTask:completedWithStatus:error:updatedFolder:newSyncKey:completionBlock:
shouldSavePropertiesForFolderPathsThatClientsCareAbout
pingTask:completedWithStatus:error:resultFolders:resultMaxFolders:resultHBInterval:
shouldCancelTaskDueToOnPowerFetchMode
deviceWillSleep
deviceDidWake
stopMonitoringFoldersWithIDs:
resumeMonitoringFoldersWithIDs:
setFolderIdsThatExternalClientsCareAboutAdded:deleted:foldersTag:
shouldFixOnDiskDeviceId
setFolderIdsForPersistentPushAdded:deleted:clientID:
clearFolderIdsForPersistentPushWithClientID:
sendMailTask:completedWithStatus:error:
meetingResponseTask:completedWithStatus:error:
requestCalendarAvailabilityForStartDate:endDate:ignoredEventID:addresses:consumer:
cancelCalendarAvailabilityRequestWithID:
resolveRecipientsTask:completedWithStatus:error:queriedEmailAddressToRecpient:
messageWriter:willGenerateHeadersForMimePart:
messageWriter:willEncodeHeaders:forMimePart:
_shouldSaveLastKnownProtocolVersion
_shouldEditNotesSupportOnProtocolChange
settingsTask:completedWithStatus:error:response:
updateOofSettingsWithParams:consumer:
retrieveOofSettingsForConsumer:
_reportFolderItemSyncSuccess:forFolderWithID:withItemsCount:
beginDownloadingAttachmentWithUUID:consumer:
cancelDownloadingInstance:error:
_turnIntoGmailAccount
pingPowerAssertionUUID
_pingTask
_foldersToMonitorById
_folderIdsWithUnacknowledgedPings
_busyFolderIds
_pingBlacklistFolderIds
_folderChangeHistory
_pingHistoryBlacklistFolderIds
_hierarchyChangeHistory
_isHierarchyChangeBlackListed
_noChangeHistory
_isNoChangeBlackListed
_safeToPing
_hasScheduledWake
_pcManager
_lastPingHeartBeat
_lastPingFolders
_eventsNumberOfPastDaysToSync
_delayedPingTimer
_pingBlacklistFolderSyncTimer
_pingBlacklistRetrySyncCount
_invitationActionsInFlight
_curReplyMethod
_noteObserver
_isTearingDown
_attachmentManager
_pingPowerAssertionUUID
_count
_startTime
delegate
_populateCurrentPolicyWithError:
cancelPendingPreflightRequest
_tearDownPreflighter
currentPolicyKey
initWithAccount:policyKey:
startPreflight
postNotificationName:object:userInfo:
policyManagerUpdatedPolicy:
restrictedBoolForFeature:withRestrictionsDictionary:
sharedConnection
sharedPowerAssertionManager
dropPowerAssertionsForGroupIdentifier:
isEphemeralMultiUser
_preflightEDUModeMCFeatures:
applyRestrictionDictionary:clientType:clientUUID:localizedClientDescription:localizedWarningMessage:complianceBlocking:displayImmediateAlert:outRestrictionChanged:outEffectiveSettingsChanged:outError:
reattainPowerAssertionsForGroupIdentifier:
acknowledgePolicyCompliance
cStringUsingEncoding:
preflighter:needsComplianceWithMCFeatures:perAccountPolicies:
policyManagerFailedToUpdatePolicy:
localizedDescription
setEnabled:forDADataclass:
saveAccountProperties
setPolicyKey:policyValues:
acknowledgeIntentionToRemoteWipe
acknowledgeAccountOnlyRemoteWipeWithSuccess:
isAppleInternalInstall
preflighter:successWithMCFeatures:perAccountPolicies:policyKey:
preflighterRemoteWipeRequested:
preflighterAccountOnlyRemoteWipeRequested:
preflighterRemoteWipeRequestResponseAcknowledged:
preflighterAccountOnlyRemoteWipeRequestResponseAcknowledged:
preflighter:error:
requestPolicyUpdate
preflighter
setPreflighter:
_account
_preflighter
initWithContainer:changeTrackingID:
abClearSuperfluousChanges
contactWithABRecord:serverID:
_containerHasItems
_newCalendarEntityType
dateWithTimeIntervalSinceReferenceDate:
calClearSuperfluousChanges
eventExceptionWithCalEvent:originalEvent:account:
getDAExceptionObjectWithLocalItem:originalEvent:account:
toDoWithCalTask:serverID:account:
setWithObject:
allVisibleNotesInCollection:
setServerId:
deleteNoteRegardlessOfConstraints:
noteWithLocalNoteObject:serverID:account:
_isFirstSync
_oldFolders
loadClientIDs
_addChangeForType:changedItemId:changeId:addedIdsToChangeId:modifiedIdsToChangeId:deletedIdsToChangeId:pseudoDeletedIdsToChangeId:changeIdsToClear:
_dbExternalIdForLocalId:dataclass:
setAbPersonChangeId:
setChangeId:
_isOrganizerSelfWithLocalEvent:
_handleChangeOnEventWithExchangeId:localId:changeType:eventChangeId:hasSignificantAttributeChanges:container:dataHandler:addedIdsToEventChangeId:modifiedIdsToEventChangeId:deletedIdsToEventChangeId:pseudoDeletedIdsToEventChangeId:eventChangeIdsToClear:allAddedDetachmentIds:localToExchangeIdMap:outShouldSaveDB:
_isOrganizerSelfWithEmail:
_instanceIdFromIdWithExceptionDate:
parentClientID
_faultInCalendarSubentitiesInCalendar:addedIdsToEventChangeId:modifiedIdsToEventChangeId:deletedIdsToEventChangeId:pseudoDeletedIdsToEventChangeId:localToExchangeIdMap:eventChangeIdsToClear:allAddedDetachmentIds:outRecurrenceId:outAlarmId:outAttendeeId:outHighestSequenceNumber:dataHandler:
_attendeeChangesDueToMeetingForwardingInCalendar:eventIdToAttendeeEmails:eventIdToAttendeeUUIDs:dataHandler:
setCalEventChangeId:
setCalRecurrenceChangeId:
setCalAlarmChangeId:
setCalAttendeeChangeId:
setHighestSequenceNumber:
useSmartMailTasks
activeSyncStringWithoutSeparators
setForwardedAttendees:
setForwardedAttendeeUUIDs:
syncSnoozeEvents
setDoNotSendBody:
setInstanceID:
setParentClientID:
_isDetachmentFromEventId:
_instanceIdFromEventId:
addEntriesFromDictionary:
initWithItemChangeType:changedItem:sourceContainerId:sourceServerId:destinationContainerId:
noteIntegerIds
noteServerIds
_instanceIdFromUniqueId:
SignificantTimeChangeNotification
mailto:%@
ASAccountFolderHierarchyExternallyChangedNotification
v8@?0
<!ExceptionDate!>
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
eventCalendarsByFolderId
T@"NSMutableDictionary",&,N,V_eventCalendarsByFolderId
toDoCalendarsByFolderId
T@"NSMutableDictionary",&,N,V_toDoCalendarsByFolderId
contactStoresByFolderId
T@"NSMutableDictionary",&,N,V_contactStoresByFolderId
noteStoreObjectIdsByFolderId
T@"NSMutableDictionary",&,N,V_noteStoreObjectIdsByFolderId
outstandingFolderRequests
T@"NSMutableArray",&,N,V_outstandingFolderRequests
currentlySyncingFolderIds
T@"NSMutableSet",&,N,V_currentlySyncingFolderIds
folderItemSyncRequestLock
T@"NSLock",&,N,V_folderItemSyncRequestLock
folderIdToSequentialFailureCount
T@"NSMutableDictionary",&,N,V_folderIdToSequentialFailureCount
folderIdToSequentialServerErrorCount
T@"NSMutableDictionary",&,N,V_folderIdToSequentialServerErrorCount
numLocalFolderUpdatesInFlight
Ti,N,V_numLocalFolderUpdatesInFlight
matchedRecord
T^v,N,V_matchedRecord
isShuttingDown
TB,N,V_isShuttingDown
calUnitTestMergedRequestsBlock
T@?,C,N,V_calUnitTestMergedRequestsBlock
/BuildRoot/Library/Caches/com.apple.xbs/Sources/DataAccessTools_Sim/DataAccess-1698.1.1/ActiveSync/ASAgent_FolderContentsSync.m
<Unknown File>
Task lost its folderId
%@%@%@
v20@?0q8B16
MEETING_RESPONSE_FAILURE_TITLE
DataAccess
MEETING_RESPONSE_FAILURE_BODY
Must only have one dataclass in move responses
-[ASAgent(FolderContentsSync) _fireWaitingFolderItemSyncRequests]
Attempted to queue a sync request for a folder with no folder id: %@
Got unexpected change type %ld
v40@?0@"NSString"8@"NSString"16q24@"NSError"32
attempted to queue a sync request for a folder with no folder id: %@
attachment fetch task must have a valid attachment UUID.
^{__CFDictionary=}24@?0^v8^v16
Person
Group
^{__CFDictionary=}24@?0^{CalDatabase={__CFRuntimeBase=QAQ}i^{CPRecordStore}^{CalEventOccurrenceCache}^{CalScheduledTaskCache}^{__CFDictionary}^{__CFDictionary}{_opaque_pthread_mutex_t=q[56c]}II^{__CFArray}^{__CFString}^{__CFArray}ii^{__CFString}^{__CFString}^{__CFString}i@?{_opaque_pthread_mutex_t=q[56c]}B^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}B@B}8^v16
Event
Todo
-//Apple Inc.//iPhone 3.0//EN
%@:%@
ForcedHBI
v16@?0@"NSNotification"8
dataaccessd_ping_power_assertion-%@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/DataAccessTools_Sim/DataAccess-1698.1.1/ActiveSync/ASDaemonAccount.m
We should never generate a new ping task in repsonse to a cancellation, and the cancellation callback should nil out the _pingTask pointer.
Last ping HBI %d
_foldersToMonitorById: %@
_folderIdsWithUnacknowledgedPings: %@
_busyFolderIds: %@
_pingBlacklistFolderIds: %@
_pingHistoryBlacklistFolderIds: %@
ASFolders
ASFoldersSyncKey
We should not get an ObjectAlreadyExists error for anything but a FolderCreate task.  Task was %@
 %lu
com.apple.MobileAddressBook
com.apple.mobilecal
com.apple.mobilenotes
%s should be on DAThread, instead on thread %@
-[ASDaemonAccount _refirePingAfterDelay:withGrowthAction:]
this timer shouldn't fire if we've got a ping task.
folderID
-[ASDaemonAccount connectionManager:handleEvent:]
-[ASDaemonAccount _fixUpTimers]
We should never ask to generate a new ping when we've got an outstanding one.
LastGoodPingHeartBeat
-[ASDaemonAccount suspendMonitoringFoldersWithIDs:]
-[ASDaemonAccount resumeMonitoringFolderID:]
 resync after connection failure
Must only have one dataclass in move requests
Must have at least one dataclass in moved objects
%a, %d %b %Y %H:%M:%S %z
Only free busy tasks are issued from dataccessd in resolve recipients requests
MEETING_RESPONSE_ACCEPTED
MEETING_RESPONSE_TENTATIVE
MEETING_RESPONSE_DECLINED
MEETING_RESPONSE_REPLY
multipart
mixed
alternative
text
calendar
utf-8
charset
METHOD
text/calendar
meeting.ics
X-MICROSOFT-CDO-ALLDAYEVENT
%@ %@
FREE
TENTATIVE
BUSY
X-MICROSOFT-CDO-INTENDEDSTATUS
Both of folderId (%@) and serverID (%@) should be non-nil
com.apple.mobilemail
DAAttachmentXXXXXX
GmailAccount
v20@?0B8@"NSError"12
not 
pingPowerAssertionUUID
T@"NSString",&,N,V_pingPowerAssertionUUID
count
Ti,N,V_count
startTime
T@"NSDate",&,N,V_startTime
conciseDescription
DA_POLICY_COMPLIANCE_WARNING
com.apple.eas.account
v12@?0i8
DA_POLICY_FAILURE_TITLE
DA_POLICY_FAILURE_BUTTON_TITLE
account
T@"ASAccount",W,N,V_account
preflighter
T@"ASPolicyPreflighter",&,N,V_preflighter
isFirstSync
TB,N,V_isFirstSync
oldFolders
T@"NSArray",&,N,V_oldFolders
/BuildRoot/Library/Caches/com.apple.xbs/Sources/DataAccessTools_Sim/DataAccess-1698.1.1/ActiveSync/ASAgent_ChangeGatherer.m
OwningID count and Email count mismatch! OwningID count:%lu, Email count:%lu
-[ASAgent(ChangeGatherer) _copyCalendarItemActionsInContainer:existingActions:dataHandler:wantPreserveActions:skippedDetachments:changeContext:]
[dh dataclass] == DADataclassEvents
changeIdNumber
oldContainerIdNumber
oldExternalId
Creating AB store for DAFolder %@
Creating cal calendar for DAFolder %@
Strike that, there's a pending delete for that folder.  Doing nothing
Creating IMAPNotes account in db for account id %@
Creating Note store for DAFolder %@
Deleting AB store for DAFolder %@
Asked to delete source with syncStoreIdentifier %@ folderId %@.  But that doesn't exist in the db
Deleting cal calendar for DAFolder %@
Deleting Note store for DAFolder %@
Caching folders for dataclasses %lx
Found an exchange contact store, with storeId %@
No known contact folder with id %@. folderHierarchy is %@
We ended up with a _contactStoresByFolderId of %@
Found an exchange calendar with externalId %@
We ended up with a _eventCalendarsByFolderId of %@
DADataclassEvents: Could not retreive / create an exchange store in the calendar store
Found an exchange calendar calendar with externalId %@
No known calendar folder with id %@. folderHierarchy is %@
We ended up with a _toDoCalendarsByFolderId of %@
Changing email address from %@ to %@
DADataclassToDos: Could not retreive / create an exchange store in the calendar store
Found an exchange note store with external id %@
No known note folder with id %@. folderHierarchy is %@
We ended up with a _noteStoreObjectIdsByFolderId of %@
Doing best-effort match of AB folders
Not deleting calendar with id %d, as it has a pending add
Deleting calendar with local id %d, external id %@, calTitle %@, as we couldn't find an exchange folder for it
Not adding event calendar with external id %@, as it has a pending delete
Not adding todo calendar with external id %@, as it has a pending delete
Unknown folder id: %@
syncing email accounts isn't supported via DataAccess framework
GAL searching has no folders to sync
discarding unknown bits set in sync request: %lx
network unreachable during folder sync. Waiting for reachability to signal a retry.
ASAgent folderHierarchySuccessfullyUpdated: oldFolders is %@, currentFolders is %@ isFirstSync %d
ASAgent folderHierarchySuccessfullyUpdated: deleting folder %@, because its id %@ wasn't in my map of %@
Failed to send folder change to server with status %ld error %@
changed folder %@ finished with status %ld and error %@, but I can't find the completion block for it!
Verifying search store is present
Account not enabled for contacts, marking search store as disabled
Account not enabled for contacts search, so whacking the search store
Found an extra search store.  Toss it
reachability indicates that the network is reachable.  We're going to retry our folder sync.
Start monitoring %lu mail folders for client: %@
No mail folders to monitor for client: %@
Attempted to set sync key %@ for folder with id %@.  But that events folder doesn't have a corresponding calendar
Attempted to set sync key %@ for folder with id %@.  But that tasks folder doesn't have a corresponding calendar
Attempted to set sync key %@ for folder with id %@.  But that contacts folder doesn't have a corresponding store
Attempted to set sync key %@ for folder with id %@.  But that notes folder doesn't have a corresponding store
Invoking CalDatabaseCopyEventWithExternalIDInCalendar with serverID: %@, instead of using UID
Did not find an event with serverID %@. Try searching with UID %@
Found %ld events with the same UID %@. 
Found one event with UID %@. This event already has an external id. Not what we are looking for.
Found one event with the same UID %@ and empty server ID. Keeping it.
Found more than one event with the same UID %@ and empty server ID. Not touching them. Creating duplicate events.
Folder with id %@ and title %@ has failed to sync %d time(s) in a row
Can't queue a retry sync, as we no longer have a folder with id %@
Remove a pending request since it contains postponded actions for a failed request. Removing request %@
%@ Unrecoverable error %d
Well, we tried twice, but couldn't connect to the server for this request.  Dropping this on the floor.  Task = %@
Connection error, but this is the first failure for this task, so trying again.  Task = %@
Server error, retry with sync key 0
User is out of disk space on the Exchange server.  We should probably put up a warning for this case
We synced a folder that no longer exists.  Gonna update my hierarchy now
Unhandled error (%d) from Folder Items Sync Task
Failed: %ld, %@
Received an add from Exchange for an event that we already knew about!  We're going to merge these events, and ignore the incoming event %@
Not considering event %@ for duplicates, since it's paired with a delete for an event with an identical serverid
Received an add from Exchange for an item that we already knew about!  We may be about to start a dupe war with Exchange.  Exchange Item %@
Received a mod from Exchange for an item we didn't already have.  Dropping this mod on the floor.  Exchange Item %@
adding %@
updating %@
saved %@, server id %@, clientID %@
Add of object %@ over local item with id %d resulted in keeping some local properties.  Queueing sync to server
Dropping the delete of %@ on the floor, as we have an add or mod with the same server ID in this set of incoming changes
Dropping the delete of %@ on the floor, as it's still linked to an invitation in the trash
Clearing change index %d
Clearing note changes: had change URIs %@, clearing changes %@
After draining the container with id %@ and dataclass %lx, that container disappeared
Actions were %@, are now %@
Do not send invitation email because event no longer exist in local DB %@
Do not send invitation email because event is not invitation from me
Could not save local container, dataclass is %lx
Dropping server action, because it had a belay-that-modify action associated with it.  Server action %@
Had a belay-that-action daaction, but no corresponding server action for id %@
More local changes are available. Will issue another sync request.
_finishWithInvitationEvent, for event with UID %@ expectedResponse of %d, was my invite %d is still invite %d
Found one event with UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for localEvent since there is only one event with this UID
Found %ld events with the same UID %@. Pick one using server ID.
Found local event using server ID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore
Found local event using event UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for localEvent when finishing invatation batch.
Meeting response failed with error %ld
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore in finishing meeting response
Meeting response was successful for event with UID %@
Found local event using cal event ID %@.
Found local event using delivery item server ID %@.
Found local event using UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for parentLocalEvent
parent ASEvent is %@, exception event is %@
Heard back from MeetingResponse: Not emailing about event %@, as the originator requested no responses
Not sending meeting response email about event %@. Protocol version %@
MeetingResponse was successful, but I can no longer find an event with uid %@
Unhandled error (%d) from Move Items Task
Draining changes because move items task had error %d.  task %@
Draining pending sync requests because move items task had error %d.  task %@
Our exchange store went missing, so releasing locks for EVENTS, as a guess
really syncing request %@
Found a sync request for the same folder.  Merging in %@
Asked to sync folder with id %@ and dataclass %lx, but I have no matching container
Was told to inject changes for folder with id %@, but that doesn't exist.  Clearing those changes
external change, folder %@, dataclass %lx
%lu changes
returning early, as we have a folder change with no remote changes, and no local changes
Couldn't fit all db actions in one request, will batch
putting request %@ in for the gate
%s: asked to sync folder request %@, but that has no server id.  Dropping this sync on the floor
A request containing postponed actions will not be synced. Request: %@
Appending sync request %@
sync request %@ had old actions %@, new actions %@, combined actions %@
Ignoring change of calendar with local id %d, as it doesn't contain items of my dataclass (%ld)
Looking at hierarchy change with id %d type %d exchangeId %@
Will drop local change to folder %@, as its our default folder, and we shouldn't muck with that
Will drop non-interesting folder change for %@ %@
Have a delete for a non-existent folder.  Will drop delete request. %@ %@
Dropping collapsed changes with ids %@
Acting on folder change with type %ld item id %d external id %@, change indices %@
Not syncing change as its folder went missing. Type %lu item id %d external id %@ dataclass 0x%lx
Handling daemon backed local folder change. Type %lu item id %d external id %@ dataclass 0x%lx
Exception while converting attachment file: %@
Cannot acquire the gatekeeper lock. The attachment %@ is not saved.
The gatekeeper lock has been granted. Beginning save of attachment %@
Couldn't save attachment file in the database for attachment %@
Attachment has been saved. Releasing gatekeeper lock
Couldn't get an attachment to set our downloaded file on
Cannot acquire the gatekeeper lock. Download task for attachment %@ does not start.
Couldn't get a store or database to clear AddressBook changes
Clearing %@ changes in store %d to index %d
Couldn't get a calendar or database to clear changes
Clearing %@ changes in calendar %d to index %d
Disabling early fire for Exchange account %@
Setting _delayedPingTimer to nil
Invoking _cancelPingTask
Current _pingBlacklistFolderIds after adding folderID %@: %@
Folder %@ added to the ping history blacklist
Current _pingBlacklistFolderIds after removing folderID %@: %@
Invalidating _pingBlacklistFolderSyncTimer
Remove folder hierarchy from ping history blacklist
Clearing folder hierarchy ping history, after a successful sync
Remove from ping no change blacklist
Clearing ping no change history, after a successful sync
Folder %@ removed from the ping history blacklist
Clearing folder %@ from ping history, after it has a successful sync
reacting to changed folder %@ with change type %lu
Original folderCache %@
Resulting folderCache %@
No support for locally modifying containers of dataclass %lx
A gmail-as-activesync account received a 403 for a folder sync.  If this is a new device, please change to using a gmail account instead.
%@ Unrecoverable error %ld
Folder change count: %lu
New folder cache due to local update: %@
Unrecognized folder dataclass: %ld
Invoking _refirePingAfterDelay
_delayedPingTimer is %@
Not going to ping, because there is no run loop mode to schedule our timer on
Creating _delayedPingTimer
Invoking _refireBlacklistFolderIdsSync
Not going to trigger a _pingBlacklistFolderIds Sync, because there is no run loop mode to schedule our timer on
Setting up timer (%@) for _pingBlacklistFolderIds Sync to fire at %@
#EASTrafficPosting a FolderContents changed notification to refresh ping blacklist folders.
Invoking setSafeToPing
ping task is %@, and _pingTask task is %@. They should be the same.
Ignoring response for old ping task %@
Ping task status %ld, resultHBInterval: %d
Setting _pingTask to nil.
Not refiring Ping request because it was canceled.
Refiring Ping request because it was canceled due to task manager modal hold.
Create no change history for no change responses.
Refresh no change history for no change responses. Discard old data.
Update no change ping count to %d
Ping request has more than 10 no change responses since %@. Adding it to black list. User must manually refresh to get it to push again.
Force fully specified ping since there were more than 5 ping responses with no changes in last 2 minutes.
Create ping history for folder %@.
Update ping history for folder %@. New count is %d.
Folder %@ has more than 5 changes in ping history, without a successful sync. Adding it to black list. User must manually refresh to get it to push again.
We pinged a folder that no longer exists.  Gonna update my hierarchy now
Create ping history for folder hierarchy.
Refresh ping history for folder hierarchy. Discard old data.
Update ping history for folder hierarchy to count %d
Folder hierarchy has more than 10 changes since %@ in ping history. Adding it to black list. User must manually refresh to get it to push again.
Received status 3 (Ping command request omitted required parameters) from server for Ping request.
Received status 111 (ServerErrorRetryLater) from server for Ping request.
PingTask: unhandled status of %ld
Remove from ping no change blacklist, after a ping response with status other than DAStatusNoChanges
Clearing ping no change history, after a ping response with status other than DAStatusNoChanges
Reissuing Ping request after 60 second delay
%s invoked: mgr: %@, reason:%d
Told to poll, but we're in manual PC mode.
%s cancelling ping task and reissuing with maintain, PC event was %d
Start fetching in automatically mode for account %@. Set automatic fetching state
%s cancelling ping task, syncing all folders, and maintaining heartbeat, as I'm polling
%s cancelling ping task and reissuing with shrink
%s style changed to %d.
%s pcManager callback out to lunch, event is: %d
Canceling task because conditions for on-power mode no longer exist (wi-fi)
Canceling task because conditions for on-power mode no longer exist (charging)
In %s, we had an outstanding _delayedPingTimer.  Likely because a ping was queued after we woke, but before we were told we woke
_pingTask is %@. It should be nil.
Asked to ping, but we're not currently pushing.  Not going to ping
Not going to ping because server couldn't update folder hierarchy
Not going to ping because server is rapidly returning no change responses
Not including folder %@ to ping task because it is black listed
Not including folder %@ to ping task because it is history black listed
Not including folder %@ to ping task because it is with unacknowledged ping
Adding folder %@ to ping task
PHMGetCurrentHeartbeatInterval returned %d, No Ping for you
Creating _pingTask with %lu ping folders
ping issued
monitoring folder %@, _foldersToMonitorById = %@, _busyFolderIds = %@
unmonitoring folder %@ - %@
Can't monitor folder with id %@, I don't know about that one.  Folders %@
marking folder as busy: %@
%s: Warning, unable to find folder for id %@
marking folder with id %@ as not busy, _busyFolderIds (%@)
%s: warning, unable to find busy folder for id %@.  _busyFolderIds is (%@)
Daemon setting folder ids to be monitored added:%@
deleted:%@
tag:%@
Dropping request to add folder that external clients care about.  Client's folder tag (%@) doesn't match daemon's: (%@)
Trying to set folderIdThatExternalClientsCareAbout for folder we don't know about. ID = %@
Daemon setting folder ids to be persistently monitored added:%@
deleted:%@
Trying to set folderIdsForPersistentPush for folder we don't know about. ID = %@
Daemon clearing folder ids to be persistently monitored
Have a modify action nixed by a belay action for server id %@.  Dropping the modify
Syncing Contacts folder with id %@, previous key %@%@, actions %@
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions, actions is %@
_invitationActionsInFlight is currently %@
Event has status %d, pending status %d, meeting response %d
Dropping request to sync %@, as it's a un-acted-upon invitation and we're trying to do something other than modify it
Do not respond to a canceled meeting for server id %@. Dropping the modify
Not syncing add of cancelled event that's not back by an exchange event.  Event %@
Dropping request to email about %@, as I currently have an invitation action in flight for it
Dropping request to do a MeetingResponse for %@, as I currently have an invitation action in flight for it
Not emailing about event %@, as I'm sending a meeting response for someone in his chain
Not emailing about event %@, as the originator requested no responses
Alarm! We have a command of type %lu, but the event isn't an ASEvent, rather it has class %@, and is %@
Not syncing command %@, as I'm sending a meeting response for someone in his chain
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions, commands are %@, meetingResponseActions are %@ emails are %@
Meeting response task %@ completed with status %ld error %@ results %@
Asked to respond to a meeting request.  But the DAEvent has no local event? DAEvent: %@
Asked to respond to a meeting request, but the local cal event is missing one or both of folder id %@ or item id %@
Syncing Calendar folder with id %@, previous key %@%@
Syncing ToDo folder with id %@, previous key %@%@
Syncing Notes folder with id %@, previous key %@%@
'ignoredEventID' supplied but it will not be used.
'nil 'requestID' given.  Will not cancel any calendar avilability requests.
We are sending an email for an invitation with response %d.  That's not right.  Dropping it.
We are sending an email for an invitation with response %d.  That's not right.  Dropping this email on the floor.  Event %@
Sending .ics attachment for event %@.  Attachment body
Couldn't cons up a cancel-all email for event %@
Couldn't cons up a cancel-some email for event %@
Couldn't cons up a request email for event %@
Couldn't cons up a response email for event %@, not going to reply
Detected an event that had the attendees ripped out from under it.  Not going to email about event %@
Not sending an email for the following invitation, because it only occurs in the past.  Invite %@
Not sending emails about events. Protocol version %@
Unable to decode meeting request: %@
Ignoring meeting request %@ because I have a more recent one
Clearing out invite with folder id %@ server id %@, wasSoftDelete = %d
While clearing out invite, I found an invite with event status %d, attendee status %d
Settings task submitted
%@:Settings task %@ completed with status %ld, error %@, response: %@
Settings task %@ UserInformation Get returned failure status %ld
User's email address set to primary SMTP address %@, or collection %@
Ignored getter item: %@, key: %d, result: %@
Getter item %@, key %d, returned unsuccessful status %ld
Exchange server does not support updating OOF settings. Protocol version %@
Exchange server does not support retrieving OOF settings. Protocol version %@
Remove folder hierarchy from ping history blacklist afetr a successful folder sync
Clearing folder hierarchy ping history after a successful folder sync
Couldn't create a temporary file with the format %s
Downloading attachmentto %s
'nil 'requestID' given.  Will not cancel any attachment downloading requests.
Exception writing attachment data to file: %@
Unexpected ASTask class: %@
Saving gmail account %@
Failed to save gmail account %@
That account delete was %@successful, error %@
Getting a new server policy
EDU Mode : PreFlighting MCRestrictions %@
Asking MC to comply with new policy
Applying restriction dictionary to MC
MCComplianceResult was %d
Device Set to Multi-User Mode. Can not Apply EAS Policies
Waiting for user to comply with new restrictions for account with persistent id %@
MCPasscodeChangedNotification fired, re-appyling restriction dictionary
Unable to register for message %@: %d
Could not put up alert telling the user the account is being disabled.  Got response flags 0x%lx
********* disabling * %@
Error setting client restrictions gave result %d: %@, %@
EDU Mode: Remote Wipe requested but we are not going to enforce it.
You asked for it, we're remote wiping now.  You probably will never ever see this log message
Not only that, but we're gonna brick you, too!
The account only remote wipe was %@successful, error %@
preflighter got error %@
There's no support for a data handler for dataclass %ld
_addChange for type %lu, changedItemId %@ changeId %@ addedIds %@ modifiedIds %@ deletedIds %@ pseudoDeletedIds %@, changeIdsToClear %@
A preset action for a sync request wanted a modify, but we have no server id.  Dropping the modify of %@
A preset action for a sync request couldn't load the associated local event in the db action %@
A preset action for a sync request didn't have an associated local event in the db action %@
A preset action for a sync request had change type %lu, which is unsupported.  Dropping that action
For a change with local id %d, found server id %@ in the change table, and server id %@ in the db.  Using the db-based id
Looking at change with id %d type %d exchangeId %@
Had a change of type %lu for an event that no longer exists.  Clearing that change (change id %@)
Discarding non-significant modifications to event with local ID: %d, Exchange ID:%@
No syncing changes with event id %d because the self attendee status is pending
No syncing changes with event id %d because the changes are by changing invitation status
Resetting change with id %d and type add to type modify
Resetting modify invitation change on event with id %d to EAS delete
Found %ld entries in participant changes table
Attendee with UUID %@ is receipient of forwarded meeting with id %d 
A deleted detachment is not ASEventException object, action %@
A preset action for a sync request didn't have an associated local changed item in the db action %@
Skipping local modify for event with id %@ as it's calendar (id %d) doesn't match the container we're interested in (id %d)
This is a newly added event, and user is not the organizer. This should not happen. Ignore this event.
Exchange server does not support adding a new event where user is not the organizer. Dropping that action with id: %@
Do not sync events added by snooze to Exchange server. Dropping that action with id: %@
Do not include event body when syncing events added by snooze to Exchange server
Skipping a newly created exception with modified parent event. Will sync it in a subsequent request.
Unable to save a newly created exception with modified parent event. The detachment will not be synced to the server.
Skipping a newly created exception in newly created parent event. Will sync it in a subsequent request.
Unable to save a newly created exception in newly created parent event. The detachment will not be synced to the server.
Dropping an addition without local item
Dropping and clearing local modify for event with id %@ as it's calendar (id %d) doesn't match the container we're interested in (id %d)
Dropping an action because event is modified by acknowledging. id: %@
Do not sync parent event modified by snooze. Dropping that action with id: %@
Skipping a modified detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a modified detachment with modified parent event. The detachment will not be synced to the server.
Do not include event body when syncing events modified by invitation status to Exchange server
Do not include event body when syncing events without significant changes
Dropping a modification without Exchange ID
Skipping a deleted detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a deleted detachment with modified parent event. The detachment will not be synced to the server.
Dropping a deletion without Exchange ID
Dropping a deleted detachment with parent also deleted
Skipping a pseudo deleted detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a pseudo deleted detachment with modified parent event. The detachment will not be synced to the server.
Drooping a detachment without a parent.
Dropping a paeudo deletion without Exchange ID
Dropping a paeudo deletion without local item
Dropping a deleted action without serverID, action %@
_addChange for move of calendarItem id %@, changeId %@ calendarItemIdsToMoveActions %@, calendarItemChangeIdsToClear %@
Looking at a move command, I couldn't come up with the old calendar.  old calendar id %d
Looking at a move command, I couldn't come up with the old calendar external id.  old calendar id %d
Looking at a move command, I couldn't come up with the new calendar external id.  new calendar id %d
consed deletes are %@
_addChange for type %lu, changeId %@ addedIds %@ modifiedIds %@ deletedIds %@
Unknown change type %@ from change object %@
Looking at change with id %d type %lu exchangeId %@
ASAgent
ASFolderHierarchyUpdateConsumer
NSObject
ASFolderHierarchyLocalChangeConsumer
DAPreferredDaysToSyncDidChangeObserver
FolderContentsSync
DAContactsUpdateConsumer
DAActionConsumer
DAEventsUpdateConsumer
DAMessageSendConsumer
DAToDosUpdateConsumer
DANotesUpdateConsumer
DADataclassLockWatcher
ABPredicateDelegate
DAMessageMoveRequestConsumer
ConciseDescription
ASDaemonAccount
PCConnectionManagerDelegate
ASFolderChangedHistory
ASDaemonPolicyManager
ASPolicyPreflighterDelegate
ASDataHandler
ASContactDataHandler
ASEventDataHandler
ASToDoDataHandler
ASNoteDataHandler
ASAgentFolderHierarchyContext
ChangeGatherer
v24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16Q24
v40@0:8@16q24@32
v32@0:8@"ASAgentFolderHierarchyContext"16Q24
v40@0:8@"ASAgentFolderHierarchyContext"16q24@"NSError"32
v48@0:8@16q24@32@?40
v48@0:8@"ASFolder"16q24@"NSError"32@?<v@?@"NSString"@"NSString"q@"NSError">40
v16@0:8
@24@0:8@16
^v16@0:8
v24@0:8^v16
^v32@0:8@16q24
^v24@0:8@16
@20@0:8B16
v24@0:8q16
B36@0:8@16@24B32
v20@0:8B16
@32@0:8@16q24
v36@0:8@16q24B32
v48@0:8^{__CFArray=}16@24q32@40
v32@0:8@16@?24
v56@0:8@16@24@32@40@?48
v24@0:8B16B20
v24@0:8@?16
@44@0:8@16^v24q32B40
@40@0:8@16^v24q32
v32@0:8@16@24
i16@0:8
v20@0:8i16
@?16@0:8
@"NSMutableDictionary"
@"NSMutableArray"
@"NSMutableSet"
@"NSLock"
B32@0:8@16^v24
^v36@0:8^{ASContact=#@@ii@i@?i@}16B24^v28
^v36@0:8^{ASEvent=#@@ii@i@?i@}16B24^v28
^v36@0:8^{ASToDo=#@@ii@i@?i@}16B24^v28
@36@0:8^{ASNote=#@@ii@i@?i@}16B24@28
^v36@0:8@16B24^v28
v36@0:8@16@24B32
v28@0:8@16B24
v28@0:8@16i24
v40@0:8q16@24@32
B84@0:8@16@24B32@36@44@52^@60r^^v68^B76
B68@0:8@16@24q32B40@44@52@60
B48@0:8@16q24@32@40
v112@0:8@16@24@32@40@48@56B64B68q72@80@88@96@104
v32@0:8@16q24
v100@0:8@16q24@32@40@48@56@64B72B76B80@84@92
v92@0:8@16@24@32@40@48@56@64B72B76B80@84
v92@0:8@16@24@32@40@48@56B64B68B72@76@84
v92@0:8@16@24@32@40@48@56@64@72B80B84B88
B44@0:8^v16@24i32B36B40
v36@0:8@16i24@28
v48@0:8q16@24@32@40
B24@0:8i16i20
v28@0:8q16B24
B56@0:8q16^i24^Q32^@40^{__CFArray=}48
B52@0:8i16Q20@28^{__CFArray=}36q44
v40@0:8@16@24@32
v44@0:8@16q24B32@36
v40@0:8q16@24@"NSError"32
v92@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"ContactFolderItemsSyncContext"64B72B76B80@"NSArray"84
v32@0:8@"NSString"16@"NSArray"24
v40@0:8@16Q24Q32
v92@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"EventsFolderItemsSyncContext"56B64B68B72@"NSArray"76@"NSSet"84
v48@0:8q16@"NSError"24@"NSArray"32@"NSArray"40
v24@0:8@"NSArray"16
v92@0:8@"NSString"16@"NoteContext"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSSet"64@"NSSet"72B80B84B88
v40@0:8@"NSString"16q24@"NSError"32
B40@0:8@16^v24@32
B36@0:8@16^v24B32
B44@0:8@16^v24@32B40
B24@0:8@"NSPredicate"16
B32@0:8@"NSPredicate"16^v24
B40@0:8@"NSPredicate"16^v24@"NSDictionary"32
B36@0:8@"NSPredicate"16^v24B32
B44@0:8@"NSPredicate"16^v24@"NSDictionary"32B40
q20@0:8c16
v28@0:8@"PCConnectionManager"16i24
v36@0:8@"PCConnectionManager"16i24@"NSDictionary"28
^{__CFString=}16@0:8
B32@0:8@16@24
v56@0:8@16q24@32@40@48
v36@0:8@16B24@28
B40@0:8@16@24@?32
v64@0:8@16q24@32@40@48@?56
v48@0:8@16@24q32@?40
v40@0:8@16@24@?32
v24@0:8f16i20
v56@0:8@16q24@32@40i48i52
B40@0:8@16@24@32
v80@0:8@16@24@32@40@48B56B60B64B68@72
@40@0:8@16@24@32
v68@0:8@16@24@32@40B48B52B56@60
v84@0:8@16@24@32@40@48@56B64B68B72@76
i32@0:8@16@24
i72@0:8@16@24@32@40@48@56@64
@56@0:8@16@24@32@40@48
v48@0:8@16q24@32@40
@20@0:8i16
@76@0:8@16i24@28@36@44@52@60^@68
@32@0:8@16@24
@60@0:8^{ASEvent=#@@ii@i@?i@}16i24@28@36@44^@52
v76@0:8@16@24@32@40@48@56@64B72
B76@0:8@16@24@32@40@48@56@64B72
B40@0:8@16@24B32B36
v36@0:8B16@20Q28
v24@0:8Q16
@"ASPingTask"
@"NSCountedSet"
@"ASFolderChangedHistory"
@"PCConnectionManager"
@"NSSet"
@"NSTimer"
@"MFAttachmentComposeManager"
@"NSString"
@"NSDate"
v48@0:8@16@24@32@40
v40@0:8@"ASPolicyPreflighter"16@"NSDictionary"24@"NSDictionary"32
v48@0:8@"ASPolicyPreflighter"16@"NSDictionary"24@"NSDictionary"32@"NSString"40
v24@0:8@"ASPolicyPreflighter"16
v32@0:8@"ASPolicyPreflighter"16@"NSError"24
i24@0:8@16
@"ASAccount"
@"ASPolicyPreflighter"
@40@0:8q16^v24@32
q16@0:8
i24@0:8^v16
^v20@0:8i16
B20@0:8B16
@40@0:8^v16@24@32
@"NSArray"
@28@0:8i16q20
v80@0:8Q16@24@32@40@48@56@64@72
@52@0:8^v16@24@32B40@44
v128@0:8@16i24Q28@36B44^v48@56@64@72@80@88@96@104@112^B120
v120@0:8^v16@24@32@40@48@56@64@72^i80^i88^i96^i104@112
v48@0:8^v16@24@32@40
B24@0:8^v16
@60@0:8^v16@24@32B40@44@52
v64@0:8Q16@24@32@40@48@56
@52@0:8@16@24@32B40@44
