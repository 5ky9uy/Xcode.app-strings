ClientData
SharedData
Macintosh
%02x
com.apple.RTCReportingBackendStateQueue
v8@?0
state
sessionID
TI,V_sessionID
combinedSessionIDString
T@"NSString",C,V_combinedSessionIDString
compType
Ti,V_compType
clientVersion
TS,V_clientVersion
udid
T*,V_udid
name
T@"NSString",C,V_name
displayURL
T@"NSString",C,V_displayURL
productVersion
T@"NSString",C,V_productVersion
buildVersion
T@"NSString",C,V_buildVersion
hardwareType
T@"NSString",C,V_hardwareType
productFamily
T@"NSString",C,V_productFamily
userInfoDict
T@"NSDictionary",C,V_userInfoDict
isInternal
TC,V_isInternal
requireUserInfo
TC,V_requireUserInfo
batchEvents
TC,V_batchEvents
samplingFactor
Td,V_samplingFactor
samplingThreshold
T@"NSNumber",V_samplingThreshold
digestKey
T@"NSData",C,V_digestKey
digestAlgorithm
Ti,V_digestAlgorithm
OSXA
HKCAM
CM-HLS
CM-CRABS
DEVPUBS
VIDEOS
MBLASSET
version
refresh_cycle
gamekit
coremedia
avconference
appletv
itunesradio
suggestions
osxanalytics
devpubs
videosapp
mobileasset
coreaudio
sahara
proactivesiri
lakitu
CFBundleVersion
com.apple.rtcreporting
environmentType
%@/%@?version=%@
If-Modified-Since
com.apple.system.diagnostics
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
apple_internal
active
development
release
1.0.0-AVConference-Fallback
Cache-Control
max-age
Last-Modified
signature
publicKey
rtcreporting_storebag_url
https://qtpartners.apple.com/storebags/maple
https://pancake.apple.com/bags/maple
seed
UniqueDeviceID
ProductVersion
BuildVersion
HWModelStr
SerialNumber
ProductType
DeviceName
ReleaseType
Internal
~/Library/Logs/RTCReports
rtcreportingd
messageLog.diag
%@_%d_%@
(%@) 
%@:%@:%@
uuid
1.2.11
Invalid parameter passed in to function.
Insufficient memory.
The version of zlib.h and the version of the library linked do not match.
Unknown error code.
Error occured while reading file.
The stream state was inconsistent (e.g., next_in or next_out was NULL).
The deflate data was invalid or incomplete.
Memory could not be allocated for processing.
Ran out of output buffer for writing compressed bytes.
StorebagVersion
GracefulTermination
Unknown
AutomaticTimeSet
Locale
SerialNum
Version
Build
Hardware
Product
ReportVers
URL not available
v24@?0@"NSString"8@"NSError"16
Could not retrieve identifiers from sessionInfo
finished
storebag not available
v16@?0@"NSError"8
[%@ -> sendMessageWithDictionary] %@
No backends available to send message
[%@ -> flushMessages] %@
[uploadFileWithURL] Upload %@ for file %@
succeeded
failed
%@.%@
[%@ -> sendMessageWithSessionInfo] %@
sessionIDString
T@"NSString",R,V_sessionIDString
storebagVersion
T@"NSString",C,V_storebagVersion
userInfo
T@"NSDictionary",R,N,V_userInfo
sessionInfo
T@"NSDictionary",R,N,V_sessionInfo
hasAggregator
TB,V_hasAggregator
hierarchyLevel
TI,R
hierarchyToken
T@"NSString",R
sendMessageWithMethod:respCode:dict:
/System/Library/PrivateFrameworks/AVConference.framework/Frameworks/GKSPerformance.framework
AWDAdaptor
Ti,V_state
numberOfChecks
Ti,V_numberOfChecks
numberOfRetransmits
Ti,V_numberOfRetransmits
eventNumber
TS,V_eventNumber
data
T@"NSData",&,V_data
port
com.apple.RTCReporting.networkProc
display_url
post_url
reliable
q24@?0@8@16
%s %s=%s
POST
application/octet-stream
Content-Type
LogDataUploadLocation
null
empty
%u.%03d %s 127.0.0.1 %s %5u %5u %5u %5u %5u %s
_HOME
_DARWIN_USER_CACHE_DIR
_DARWIN_USER_TEMP_DIR
com.apple.rtcreportingd
FaceTime AFRC log
%@?uuid=%s&sequence=%u&description=%@%%20(Uploaded%%20by%%20GKS)&filename=%@&raw=true
gzip
Content-Encoding
success
uploadURL
T@"NSString",C,V_uploadURL
com.apple.private.rtcreportingd
StorebagFetchTime
StorebagFetchState
Fetch Successful
StorebagMaxAge
StorebagData
%@_%@
SessionsCount
BatchSize
StorebagsCount
StorebagsSize
CalculatedMemoryUsage
ProcessMemoryUsage
StorebagLastModified
Fetch Failure
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
clients
httpsPostURL
httpsRealtimePostURL
forceEventLogging
_startTS
_sender
_clientVersion
_sessionID
_eventNumber
_method
_status
_clientTS
eventTime
_productFamily
_productModel
_osVersion
_build
_internal
%u.%u%@
_reportVers
_timezoneOffset
v32@?0@8@16^B24
postTime
clientId
events
postURL is nil
https
%@%@%@
X-RTC-Client-Name
X-RTC-Service-Name
X-RTC-Internal-Build
RTCReporting/%d.%d%@ (%@; %@)
User-Agent
X-RTC-Client-Version
X-RTC-Sender
%@ %@
X-RTC-Event-Map
application/json
Accept
Content-Length
X-RTC-DIGEST
backend %s disabled by server %d return code
method
status
action
remove
sha256
realtime_post_url
client
service
event_threshold
extras_on_internal
enabledSince
expedite
override_dnu
locale_whitelist
device_whitelist
device_blacklist
filters
sampling_threshold
per_country_sampling_thresholds
country
threshold
override_sampling
custom_clientId
event_whitelist
event_blacklist
use_wifi_only
SamplingThreshold
OverrideSampling
Batch
Flushed events:
Standalone event:
Nothing to flush
Can not flush: userInfo is required
Nothing to flush: batched events were completely filtered out
postURL
T@"NSString",C,V_postURL
isEqualToString:
alloc
initWithName:profile:productFamily:
initWithName:profile:productFamily:clientType:
UTF8String
length
stringWithCapacity:
appendFormat:
init
copy
release
dealloc
componentsSeparatedByString:
objectAtIndex:
integerValue
count
setState:
sendMessage:timestamp:method:respCode:eventID:flag:
setCombinedSessionIDString:
countByEnumeratingWithState:objects:count:
intValue
newBackendWithName:profile:productFamily:clientType:
convertIntoSHA256:
cleanup
setSelfVersion:
state
updateState
setStartTimestamp:
sendMessage:timestamp:method:respCode:flag:
flushMessagesWithCompletion:
uploadFileAtPath:extensionToken:
uploadLogData:
setCorrelatedSessionID:
isWhitelistedEvent:
isBlacklistedEvent:
batchedEventsSize
sessionID
setSessionID:
combinedSessionIDString
compType
setCompType:
clientVersion
setClientVersion:
udid
setUdid:
name
setName:
displayURL
setDisplayURL:
productVersion
setProductVersion:
buildVersion
setBuildVersion:
hardwareType
setHardwareType:
productFamily
setProductFamily:
isInternal
setIsInternal:
userInfoDict
setUserInfoDict:
requireUserInfo
setRequireUserInfo:
batchEvents
setBatchEvents:
samplingFactor
setSamplingFactor:
samplingThreshold
setSamplingThreshold:
digestKey
setDigestKey:
digestAlgorithm
setDigestAlgorithm:
_profile
_name
_state
_productVersion
_buildVersion
_hardwareType
_productFamily
_startTimeStamp
_sessionID
_combinedSessionIDString
_compType
_clientVersion
_eventID
_selfVersionMajor
_selfVersionMiddle
_selfVersionMinor
_isInternal
_requireUserInfo
_shouldUseWiFiOnly
_userInfoDict
_batchEvents
_udid
_displayURL
_samplingFactor
_samplingThreshold
_stateQueue
_eventWhitelist
_eventBlacklist
_digestKey
_digestAlgorithm
class
isKindOfClass:
objectForKeyedSubscript:
initWithString:
bundleForClass:
infoDictionary
objectForKey:
boolValue
setObject:forKey:
initWithSuiteName:
integerForKey:
stringForKey:
stringWithFormat:
URLWithString:
requestWithURL:cachePolicy:timeoutInterval:
setValue:forHTTPHeaderField:
defaultSessionConfiguration
set_sourceApplicationBundleIdentifier:
sessionWithConfiguration:
dataTaskWithRequest:completionHandler:
resume
autorelease
description
numberWithBool:
dictionaryWithObjects:forKeys:count:
numberWithInt:
allHeaderFields
characterSetWithCharactersInString:
componentsSeparatedByCharactersInSet:
indexOfObject:
propertyListWithData:options:format:error:
pathForResource:ofType:
dataWithContentsOfFile:
initWithBase64EncodedString:options:
bytes
retain
lowercaseString
dictionaryWithObjectsAndKeys:
initWithDomain:code:userInfo:
removeItemAtPath:error:
defaultManager
stringByExpandingTildeInPath
contentsOfDirectoryAtPath:error:
code
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
objectAtIndexedSubscript:
stringByAppendingPathComponent:
attributesOfItemAtPath:error:
date
timeIntervalSinceDate:
compare:
timeIntervalSince1970
createFileAtPath:contents:attributes:
fileExistsAtPath:
initWithFormat:arguments:
fileHandleForWritingAtPath:
seekToEndOfFile
dataUsingEncoding:
writeData:
closeFile
allKeys
allValues
dataWithLength:
mutableBytes
setLength:
gzipDeflate
dataWithBytes:length:
base64EncodedStringWithOptions:
setObject:forKeyedSubscript:
addAgentHealthInfoForSession:payload:
internalSendMessage:timestamp:method:respCode:
shutdownSessionAggregation
setStorebagVersion:
unsignedIntValue
updateCorrelatedSessions:
currentLocale
storebagForSession:
storebagVersionForSession:
createBackendsWithStorebag:
updateSessionWithDefaultSessionInfo
sendStartMessage
fetchReportingStates
receivedUserInfo:
sendMessageWithDictionary:error:
internalFlushMessagesWithCompletion:
uploadFileWithURL:extensionToken:completionHandler:
sendMessageWithSessionInfo:userInfo:storebag:category:type:payload:
updateSharedDataForSession:sharedData:
removeObjectFromSharedDataForSession:key:
sessionIDString
parentSessionForChild:
floatValue
hierarchyLevel
arrayWithCapacity:
addObject:
updateReportingStates
updateDownstreamSessions:
updateUserInfoForBackends
remoteObjectProxyWithErrorHandler:
sendMessageToClient:timestamp:category:type:payload:
initWithDictionary:
addEntriesFromDictionary:
getAncestorWithAggregatorForSession:
sendToAggregator:timestamp:category:type:payload:
aggregateMessage:timestamp:category:type:payload:
sharedDataForSession:
numberWithUnsignedShort:
path
absoluteString
parentSessionIDStringForSession:
setSessionInfo:userInfo:frameworksToCheck:hasAggregationBlock:
startConfigWithCompletionHandler:
fetchStatesWithUserInfo:completionHandler:
fetchDisplayURL:
sendMessageWithDictionary:reply:
finishSessionGracefully
uploadFileAtPath:extensionToken:completionHandler:
uploadLogData:completionHandler:
sendMessageWithSessionInfo:userInfo:category:type:payload:reply:
updateSharedDataWithDictionary:
updateSharedDataForKey:value:
setDigestKey:algorithm:
initWithSessionDelegate:connection:
syncReportingStates
hierarchyToken
updateCombinedSessionID
userInfo
sessionInfo
storebagVersion
hasAggregator
setHasAggregator:
_sessionInfo
_userInfo
_frameworks
_backends
_hierarchyDictionary
_periodicServices
_sessionDelegate
_sessionIDString
_storebagVersion
_deviceid
_connection
_hasAggregator
_hasFinishedGracefully
respondsToSelector:
methodSignatureForSelector:
invocationWithMethodSignature:
setSelector:
setTarget:
setArgument:atIndex:
invoke
isClientTypeAllowed:
initWithPath:
isLoaded
load
classNamed:
_clientBundle
_awdAdaptorClass
_awdAdaptor
initWithBytes:length:
initWithBytes:length:eventNum:
numberOfChecks
setNumberOfChecks:
numberOfRetransmits
setNumberOfRetransmits:
eventNumber
setEventNumber:
data
setData:
_numberOfChecks
_numberOfRetransmits
_eventNumber
_data
initWithName:profile:serverIP:serverPort:productFamily:
useReliableUDP
myPeriodicTask
cleanupSources
descriptionForObject:
keysSortedByValueUsingComparator:
sanitize:
writeLocalLog:
tryToSendMsg:length:eventNumber:
archivedDataWithRootObject:
requestWithURL:
setHTTPMethod:
setHTTPBody:
initWithData:encoding:
initWithName:serverIP:serverPort:productFamily:
sendMessage:timestamp:method:respCode:eventID:
_socketDescriptor
_messageQueue
_reliableUDP
_usingProfile
_networkProcQueue
_readSource
_timer
_cleanupState
_postURL
processSocketRead
removeObjectAtIndex:
removeObjectIdenticalTo:
stringByReplacingOccurrencesOfString:withString:
stringWithUTF8String:
fileSystemRepresentation
initWithMachServiceName:
setDelegate:
mainRunLoop
fileType
initWithContentsOfFile:
URLQueryAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
lastPathComponent
stringByAppendingString:
rangeOfString:
uploadURL
setUploadURL:
_uploadURL
removeObject:
removeObjectForKey:
createReportingSessionWithDelegate:connection:
invalidateReportingSession:
valueForEntitlement:
interfaceWithProtocol:
setExportedInterface:
setRemoteObjectInterface:
setExportedObject:
setInterruptionHandler:
setInvalidationHandler:
timeIntervalSinceNow
fetchAndCacheStorebag:
containsObject:
getFirstSessionWithHierarchy:inSessionList:
numberWithUnsignedInteger:
numberWithUnsignedLong:
addSessionHealthInfo:healthReport:
numberWithUnsignedLongLong:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retainCount
zone
hash
superclass
debugDescription
listener:shouldAcceptNewConnection:
_sessionList
_cachedStorebags
_correlatedSessions
_sharedData
getPersistentIdentifierForDNU:
numberWithLong:
numberWithUnsignedInt:
numberWithDouble:
numberWithUnsignedChar:
stringValue
localTimeZone
secondsFromGMT
numberWithInteger:
filterEvent:
enumerateKeysAndObjectsUsingBlock:
initWithObjectsAndKeys:
dataWithJSONObject:options:error:
caseInsensitiveCompare:
setAllowsCellularAccess:
setWaitsForConnectivity:
statusCode
rangeOfString:options:
matchExactStringWithList:wholeString:whitelist:
matchStringWithList:wholeString:whitelist:
matchClientNameAndServiceID:clientName:serviceID:
updatePostLink:
resetBackendStateWithClient:
isFrameworkEnabledForClient:
createFiltersFromArray:
doubleValue
updateBackendState
dictionaryWithDictionary:
newEventDictfromPayload:timestamp:method:respCode:eventID:
prepareEventForMessage:frameworkData:
batchEvent:
arrayWithObjects:count:
createMessageForPostAndLogging:prettyJsonString:
initWithFormat:
postJSONMessage:withFlag:method:responseCode:completion:
mutableCopy
initWithCapacity:
removeAllObjects
postURL
setPostURL:
_useDefaultPostURL
_realtimePostURL
_useDefaultRealtimePostURL
_batchedEvents
_queue
_numberOfFilters
_filters
_dnuEnabled
_dnuType
_eventThreshold
_extrasOnInternal
_overrideSampling
_eventMethodCounts
_uuidRespectDnu
_uuidOverrideDnu
_uuidCustom
_forceEventLogging
_immutable
RTCReportingBackend(newBackendWithName): %s
fetchStorebagForEnvironmentAndClientType: Could not find storebag name for client type %d
fetchStorebagForEnvironmentAndClientType: Could not fetch storebag for client type %d
fetchStorebagForEnvironmentAndClientType: Seed section is missing in the storebag.
fetchStorebagForEnvironmentAndClientType: Could not find storebag for client type %d with %s environment
fetchStorebagForEnvironmentAndClientType: Store bag override MaxAge=%d
createBackends: Attempted to create backends with nil storebag
createBackends: Attempted to create backends with nil session info
userDefaultsEnvironment: Invalid environment type %u
userDefaultsEnvironment: Environment type %u
fetchStorebagWithName: Storebag Server URL: %s
fetchStorebagWithName: Adding 'Last-Modified: %s' to the header
fetchStorebagWithName: Error resolving with lookup server %s, sendSynchronousRequest error %s
fetchStorebagWithName: Loading default storebag '%s'
fetchStorebagWithName: storebag content has not changed. using its cached version
fetchStorebagWithName: New 'Last-Modified: %s' received
fetchStorebagWithName: propertyListWithData error %s
fetchStorebagWithName: Signature is missing
fetchStorebagWithName: Signature can not be verified, %p
writeToLogFile: Deleted expired rtcreportingd log file %s (%s)
writeToLogFile: Creating rtcreportingd log directory at %s
writeToLogFile: Error reading from log directory: %s
writeToLogFile: Created new rtcreportingd log file %s (%s)
writeToLogFile: Failed to create new rtcreportingd log file %s
writeToLogFile: Saved log message to %s
getPersistentIdentifierForCustomClientIDSuffix: The value for %s: %s
compressDataWithZlibOrGzip: Cannot compress empty NSData
compressDataWithZlibOrGzip: deflateInit2() Error: "%s" Message: "%s"
compressDataWithZlibOrGzip: zlib error while attempting compression: "%s" Message: "%s"
compressDataWithZlibOrGzip: Compressed file from %u to %u
initWithSessionDelegate: ReportingdSession initWithSessionDelegate:%s
initWithSessionDelegate: Initialized session with UUID %s
dealloc: ReportingdSession dealloc: %u
setSessionInfo: Configuring session %u
setSessionInfo: Configure session: user info provided without requiring it
startConfigWithCompletionHandler: Starting configuration for session %u
fetchStatesWithUserInfo: Fetching states for session %u
fetchDisplayURL: Fetching display URL for session %u
sendMessageWithDictionary: Sending message for session %u
flushMessagesWithCompletion: Flushing messages for session %u
finishSessionGracefully: Session %u has been finished gracefully
uploadFileAtPath: Uploading file for session %u
sendMessageWithSessionInfo: Could not retrieve identifiers from sessionInfo
sendMessageWithSessionInfo: Sending message with session info for session %u
createBackendsWithStorebag: Creating backends for session %u
HTTPSPostBackend(syncReportingStates): %s: state and sampling rate updated to %d, %.02f%%
syncReportingStates: child session %u (backend %s) with hierarchy %d is missing its parent
receivedUserInfo: Received new user info for session %u
sendMessageWithDictionary: Failed to get remote object proxy: %s
shutdownSessionAggregation: Disable aggregation module for session %u
sendMessageWithDictionary: No backends available to send message
sendMessageWithDictionary: Missing mandatory parameter 'category'
sendMessageWithDictionary: Missing mandatory parameter 'type'
sendMessageWithDictionary: Dropping event with category %d as it is not whitelisted for backend %s
sendMessageWithDictionary: Dropping event with category %d as it is blacklisted for backend %s
internalSendMessage: Sent internal message (method:%d respCode:%d)
internalFlushMessagesWithCompletion: %s
uploadFileWithURL: File upload successful for %s
uploadFileWithURL: File upload failed for %s
uploadLogData: Log data array upload successful
uploadLogData: Log data array upload failed
updateCombinedSessionID: Updating combined session ID '%s' for session %u backends
sendMessageWithSessionInfo: Sending single message with sessionID %ld
RsendMessageWithSessionInfo: Attempted to send message with one or more nil parameters
sendMessageWithSessionInfo: No backends available to send single message
sendMessageWithSessionInfo: user info provided without requiring it.
sendMessageWithSessionInfo: Dropping event with category %d as it is not whitelisted for backend %s
sendMessageWithSessionInfo: Dropping event with category %d as it is blacklisted for backend %s
AWDBackend(sendMessage): AWD adaptor %s does not respond to forwarding selector %s
AWDBackend(initWithName): Loading AWD adaptor class for client type %d
AWDBackend(initWithName): No matching bundle found for client type %d
DashboardBackend(initWithName): can't resolve server IP
DashboardBackend(initWithName): can't resolve server port
DashboardBackend(initWithName): socket() failed (%d)
DashboardBackend(initWithName): initWitName with all null params.
DashboardBackend(initWithName): socket connect() failed.
DashboardBackend(initWithName): can't create timer source.
DashboardBackend(sendMessage): can't malloc.
DashboardBackend(uploadLogData): Post URL for log data array is nil
DashboardBackend(uploadLogData): Failed to serialize log data array for upload
DashboardBackend(uploadLogData): Error uploading log data array (%s)
DashboardBackend(uploadLogData): Log data uploaded to %s
DashboardBackend(useReliableUDP): can't bind socket, %d
DashboardBackend(useReliableUDP): can't create read source
DashboardBackend(myPeriodicTask): clean up at myPeriodicTask.
DashboardBackend(myPeriodicTask): scheduled last resort clean-up in %d ms.
startLogging: Daemon starts logging...
initRTCReportingSandbox: failed getting realpath for home dir with error %d
initRTCReportingSandbox: failed getting realpath for user cache dir with error %d
initRTCReportingSandbox: failed getting realpath for user temp dir with error %d
sandbox_init() fails: %s
main: Listener resumes with sandbox, start loop.
UploadBackend(initWithName): can't resolve upload post URL.
UploadBackend(uploadFileAtPath): Uploading file %s
UploadBackend(uploadFileAtPath): Only upload a regular file.
UploadBackend(uploadFileAtPath): Input file is empty
UploadBackend(uploadFileAtPath): Unable to create URL request
UploadBackend(uploadFileAtPath): sending to |%s|, Json output: %s
UploadBackend(uploadFileAtPath): post %s
listener: Accepting new XPC connection %s as it has proper entitlement, %d(%d) connections.
listener: new XPC connection %s does not have required rtcreporting entitlement. Closing connection...
listener: XPC connection to %s was interrupted
listener: XPC connection to %s was invalidated
storebagForSession: Retrieving storebag for session %u with client type %d
storebagForSession: Cached storebag found for client type %d
storebagForSession: Not fetching storebag for client type %d - must wait %d seconds between attempts
parentSessionIDStringForSession: Checking hierarchyToken '%s' for session %u
parentSessionIDStringForSession: ERROR: No sessions found for hierarchyToken %s
parentSessionIDStringForSession: Session %u not found for hierarchyToken %s
parentSessionIDStringForSession: Found a gap in hierarchy (one of parents missing): incomplete parentSessionID is '%s'
updateCorrelatedSessions: Session %u has no correlated sessions as it is a standalone session
updateCorrelatedSessions: Adding session %u to list for hierarchyToken %s with hierarchyLevel %d
parentSessionForChild: Checking hierarchyToken '%s' for session %u
parentSessionForChild: ERROR: No sessions found for hierarchyToken %s
parentSessionForChild: ERROR: Session %u not found for hierarchyToken %s
parentSessionForChild: Unable to find session with hierarchy of %d for hierarchyToken '%s'
updateDownstreamSessions: Updating combined session ID and syncing reporting states for session %u
fetchAndCacheStorebag: Fetching storebag for client type %d
fetchAndCacheStorebag: clientType %d is invalid
fetchAndCacheStorebag: Storebag max age: %d seconds
fetchAndCacheStorebag: Unable to fetch storebag for client type %d
HTTPSPostBackend(initWithName): can't find the client list.
HTTPSPostBackend(initWithName): Using user default '%s' for postURL
HTTPSPostBackend(initWithName): Using user default '%s' for realtimePostURL
HTTPSPostBackend(batchEvent): Flushing all batched events as we reached event threshold for method %d
HTTPSPostBackend(createMessageForPostAndLogging): NSJSONSerialization unable to handle key: %s, value: %s
HTTPSPostBackend(postJsonMessage): post error: %s
postJSONMessage: %s
HTTPSPostBackend(updatePostLink): Storebag '%s' for postURL
HTTPSPostBackend(updatePostLink): Storebag '%s' for realtimePostURL
HTTPSPostBackend(updatePostLink): realtimePostURL defaults to postURL '%s'
resetBackendStateWithClient: event_threshold set to %d
setBackendStateWithClient: extras on internal is set to %d
HTTPSPostBackend(updateBackendState): Store bag override  _batchEvent=%d
HTTPSPostBackend(updateBackendState): reporting disabled by DNU: %d.
HTTPSPostBackend(updateBackendState): (%s) isn't in country code list %s
HTTPSPostBackend(updateBackendState): (%s) isn't in device whitelist %s
HTTPSPostBackend(updateBackendState): (%s) is in device blacklist %s
HTTPSPostBackend(updateBackendState): filters are required.
HTTPSPostBackend(updateBackendState): sampling threshold for %s changed from %.02f to %.02f
HTTPSPostBackend(updateBackendState): %s: client found %s:%s, state=%d, samplingFactor=%f
HTTPSPostBackend(updateBackendState): %s: eventWhitelist=%@
HTTPSPostBackend(updateBackendState): %s: eventBlacklist=%@
HTTPSPostBackend(sendMessage): SESSION_TYPE_STOP message dictionary is nil
HTTPSPostBackend(sendMessage): Adding dnu type and sampling threshold to SESSION_TYPE_STOP message dictionary
HTTPSPostBackend(sendMessage): realtime is %d
HTTPSPostBackend(sendMessage): Batching %d, %d, %d
HTTPSPostBackend(sendMessage): Got a realtime event and some events have already been batched. Forcing Flush here to keep events in order.
HTTPSPostBackend(sendMessage): Sending %d, %d, %d
HTTPSPostBackend(flushMessagesWithCompletion): called
flushMessagesWithCompletion: Dropping event with category %d as it is not whitelisted for backend %s
flushMessagesWithCompletion: Dropping event with category %d as it is blacklisted for backend %s
RTCReportingBackend
ReportingdUtil
zlib
ReportingdSession
ClientSessionInterface
AWDBackend
UDPPacketToSend
DashboardBackend
PrivateMethods
PowerLogBackend
UploadBackend
Private
ClientSessionReplyInterface
ReportingdAgent
NSXPCListenerDelegate
NSObject
ReportingdSessionDelegate
HTTPSPostBackend
@44@0:8@16@24@32i40
@24@0:8@16
@40@0:8@16@24@32
v16@0:8
v24@0:8@16
i16@0:8
v20@0:8i16
@48@0:8@16r^{timeval=qi}24S32S36S40i44
v24@0:8r^{timeval=qi}16
@44@0:8@16r^{timeval=qi}24S32S36i40
@24@0:8@?16
B32@0:8@16*24
B24@0:8@16
B20@0:8S16
Q16@0:8
I16@0:8
v20@0:8I16
@16@0:8
S16@0:8
v20@0:8S16
*16@0:8
v24@0:8*16
C16@0:8
v20@0:8C16
d16@0:8
v24@0:8d16
@"NSDictionary"
@"NSString"
@"NSNumber"
@"NSObject<OS_dispatch_queue>"
@"NSArray"
@"NSData"
v56@0:8@16@24@32S40S44@48
v44@0:8@16@24@32B40
v24@0:8@?16
v32@0:8@16@?24
v40@0:8@16*24@?32
v56@0:8@16@24S32S36@40@?48
v32@0:8@16@24
v28@0:8@16i24
v44@0:8@"NSDictionary"16@"NSDictionary"24@"NSArray"32B40
v24@0:8@?<v@?@"NSArray">16
v32@0:8@"NSDictionary"16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSDictionary"16@?<v@?@"NSString">24
v24@0:8@?<v@?@"NSString"@"NSError">16
v40@0:8@"NSURL"16*24@?<v@?B>32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v56@0:8@"NSDictionary"16@"NSDictionary"24S32S36@"NSDictionary"40@?<v@?@"NSString">48
v24@0:8@"NSDictionary"16
v32@0:8@"NSString"16@"NSObject"24
v28@0:8@"NSData"16i24
@32@0:8@16@24
v48@0:8@16d24S32S36@40
v40@0:8@16r^{timeval=qi}24S32S36
B16@0:8
v20@0:8B16
@"NSMutableDictionary"
@"<ReportingdSessionDelegate>"
[41C]
@"NSXPCConnection"
B20@0:8i16
@"NSBundle"
@32@0:8*16S24S28
@52@0:8@16@24@32S40@44
@44@0:8@16@24S32@36
@44@0:8@16r^{timeval=qi}24S32S36S40
@"NSMutableArray"
@"NSObject<OS_dispatch_source>"
v32@0:8^{tagReportingPacket={tagReportingPacketHeader=CCCCIISSSS[40C]SS}[1024c]}16S24S28
@24@0:8^{tagReportingPacket={tagReportingPacketHeader=CCCCIISSSS[40C]SS}[1024c]}16
v48@0:8@"NSDictionary"16d24S32S36@"NSDictionary"40
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"NSDictionary"24@0:8@"ReportingdSession"16
@"NSString"24@0:8@"ReportingdSession"16
v24@0:8@"ReportingdSession"16
@"ReportingdSession"24@0:8@"ReportingdSession"16
v32@0:8@"ReportingdSession"16@"NSDictionary"24
v32@0:8@"ReportingdSession"16@"NSString"24
v32@0:8@"ReportingdSession"16@"NSMutableDictionary"24
@28@0:8i16@20
Q32@0:8@16@24
@32@0:8@16^@24
v52@0:8@16i24@28@36@?44
B36@0:8@16@24B32
B40@0:8@16@24@32
@"NSOperationQueue"
^{filterTag=iii@}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.nsurlsession.impersonate</key>
<true/>
</dict>
</plist>
