alloc
initWithXPCConnection:
init
setExportedObject:
serviceInterface
setExportedInterface:
serviceClientInterface
setRemoteObjectInterface:
stringWithFormat:
setInvalidationHandler:
setInterruptionHandler:
remoteObjectProxy
isEqual:
playbackPositionDomain
synchronizeImmediatelyWithCompletionHandler:
_sendSyncHandlerMessageWithBlock:
beginAccessingPlaybackPositionEntities
endAccessingPlaybackPositionEntities
persistPlaybackPositionEntity:isCheckpoint:completionBlock:
deletePlaybackPositionEntity:
deletePlaybackPositionEntities
updateForeignDatabaseWithValuesFromPlaybackPositionEntity:
pullLocalPlaybackPositionForEntityIdentifiers:completionBlock:
pullPlaybackPositionEntity:completionBlock:
_sendValueHandlerMessageWithBlock:
pushPlaybackPositionEntity:completionBlock:
supportsSyncProtocol
initWithDomain:
serviceForXPCConnection:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
setClientConfiguration:
.cxx_destruct
XPCConnection
queue
clientProxy
syncHandler
valueHandler
clientConfiguration
_XPCConnection
_queue
_clientProxy
_syncHandler
_valueHandler
_clientConfiguration
domain
_domain
integerValue
XPCInterfaceDebugDescription
server
start
_init
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
_updatePushNotificationRegistrations
defaultCenter
_accountsDidChangeNotification:
defaultStore
addObserver:selector:name:object:
_updateForAccountChangeAfterReloadingAccounts:
addObserverForName:object:queue:usingBlock:
_updateForSharedLibraryImportFinished
synchronizeForUpdateJobWithDomain:withCompletionHandler:
initializeBackgroundTaskAgentWithJobRunner:
removeObserver:name:object:
removeObserver:
valueForKey:
invalidate
makeObjectsPerformSelector:
suspend
setDelegate:
dealloc
arrayByAddingObject:
resume
newListener
synchronizeIfNeedsInitialSynchronization
enumerateSystemSyncHandlersWithBlock:
reloadAccounts
_pushNotificationController
updateNotificationRegistrationsWithCompletionBlock:
uniqueIdentifier
lastSynchronizedAccountIdentifier
lastSynchronizationFailureAccountIdentifier
longLongValue
synchronizeForChangedAccountByResetInvalidatingLocalChanges:
synchronizeForChangedAccountStatus
domainIdentifier
isEqualToString:
synchronizeForUpdatedRemoteDomainVersion:
array
addObject:
setDelegate:forBookkeeperDomain:
setEnabledDomains:
listener:shouldAcceptNewConnection:
pushNotificationController:didReceiveUpdateRequestForBookkeeperDomain:toDomainRevision:
xpcListener
pushNotificationController
serviceConnections
_SBKStoreAccountChangedNotificationObserver
_SBKSBKSharedMusicLibraryImportFinishedObserver
_accountChangeUpdatePending
_accountChangeUpdateShouldReloadAccounts
_xpcListener
_serviceConnections
enableTransactions
initWithIdentifier:
open
count
removeObject:
close
sharedInstance
beginTransactionWithIdentifier:
isInTransaction
endTransaction:
openTransactions
_openTransactions
beginTransaction
endTransaction
identifier
_isInTransaction
_identifier
currentRunLoop
dictionaryWithCapacity:
objectForKey:
initWithPlaybackPositionDomain:
setObject:forKey:
foreignDatabasePath
initWithPath:
uppDatabase
UPPDomainIdentifier
initWithDomain:dataSource:automaticSynchronizeOptions:isActive:
setMaxConcurrentOperationCount:
pollingIntervalInSeconds
loadBagContextWithCompletionBlock:
dateLastSynced
timeIntervalSinceReferenceDate
numberWithDouble:
date
hasRemoteChangesToPull
hasLocalChangesToPush
hasSyncedAtleastOnce
_onOperationQueue_scheduleSyncBeforeDate:isCheckpoint:
addOperationWithBlock:
lastNotificationDomainVersion
setLastNotificationDomainVersion:
updateUbiquitousDatabaseByPerformingWriteTransactionWithBlock:
currentRevision
setLastSyncedEntityRevision:
setLastSyncedDomainVersion:
distantFuture
setDateToSyncWithUbiquitousStore:
updateUbiquitousDatabaseByPersistingUbiquitousMetadataWithEntity:
foreignDatabaseEntityID
updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:
updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:
readUbiquitousDatabaseMetadataValuesForIdentifiers:
timeIntervalSinceNow
dateToSyncWithUbiquitousStore
timeIntervalSinceDate:
dateWithTimeIntervalSinceNow:
jobSchedulerForDomain:
schdeuleUpdateJobWithTimeInterval:replaceExisting:
numberWithBool:
predicateWithProperty:equalToValue:
anyInLibrary:predicate:
databasePath
stringByStandardizingPath
sharedLibrary
_isEnabled
SBKBeginTransactionWithItemsToSyncEnumerationBlock:
SBKCancelUniversalPlaybackPositionTransaction:
SBKCommitUniversalPlaybackPositionTransaction:domainVersion:metadataEnumerationBlock:
copy
countByEnumeratingWithState:objects:count:
bookkeeperStorageControllerDidSync:
storageControllerForPlaybackPositionDomain:
beginTransactionWithItemsToSyncEnumerationBlock:
cancelUniversalPlaybackPositionTransaction:
commitUniversalPlaybackPositionTransaction:domainVersion:metadataEnumerationBlock:
needsPoll
needsPull
needsPush
needsInitialSync
synchronizeBeforeDate:isCheckpoint:
synchronizeForUpdatedRemoteDomainVersion:beforeDate:
synchronizeForChangedAccountByResetInvalidatingLocalChanges:beforeDate:
persistPlaybackPositionEntity:completionBlock:
addStorageObserver:
removeStorageObserver:
_databaseHasBookmarkableContents
_observers
_operationQueue
_uppStore
_ubiquitousDatabase
_musicLibrary
_targetSyncDate
_playbackPositionDomain
supportsUPP
performDatabaseTransactionWithBlock:
valueForDatabaseProperty:
setValue:forDatabaseProperty:
numberWithUnsignedLongLong:
_setValue:forDatabaseProperty:
_valueForDatabaseProperty:
doubleValue
dateWithTimeIntervalSinceReferenceDate:
length
numberWithUnsignedInteger:
numberWithLongLong:
arrayWithObjects:count:
executeUpdate:withParameters:error:
_updateUbiquitousDatabase_setBookmarkMetadataWithValuesFromTrackWithMetadataIdentifier:hasBeenPlayed:playCount:bookmarkTime:timestamp:syncRevision:usingConnection:
ubiquitousIdentifier
_databaseHasEntryForEntity:
hasBeenPlayedModified
hasBeenPlayed
userPlayCountModified
userPlayCount
bookmarkTimeModified
bookmarkTime
bookmarkTimestampModified
bookmarkTimestamp
allKeys
appendFormat:
appendString:
enumerateObjectsUsingBlock:
executeQuery:withParameters:
numberForColumnIndex:
enumerateRowsWithBlock:
hasAtLeastOneRow
databaseConnectionAllowingWrites:withBlock:
initWithPersistentID:inLibrary:
valueForProperty:
boolValue
dictionaryWithObjects:forKeys:count:
setValuesForPropertiesWithDictionary:
numberWithInt:
defaultRenderer
statementWithPrefix:inParameterCount:
allObjects
firstObject
stringWithString:
subarrayWithRange:
domainForSyncingMusicLibraryWithLibraryPath:
stringForColumnIndex:
initWithPlaybackPositionDomain:ubiquitousIdentifier:foreignDatabaseEntityID:
unsignedIntegerValue
setUserPlayCount:
setHasBeenPlayed:
setBookmarkTime:
setBookmarkTimestamp:
lastSyncedDomainVersion
lastSyncedEntityRevision
musicLibrary
predicateWithProperty:value:comparison:
executeQuery:
UTF8String
stringValue
unsignedLongLongValue
initWithMusicLibrary:
setDateLastSynced:
updateUbiquitousDatabaseByInsertingUbiquitousMetadataForTrackWithMetadataIdentifier:hasBeenPlayed:playCount:bookmarkTime:timestamp:syncRevision:
updateUbiquitousDatabaseByResetingSyncEntityRevisionForItemsWithMetadataIdentifiers:
readUbiquitousDatabaseMetadataValuesForIdentifier:
dumpUbiquitousMetadata
sharedLibraryDatabasePath
setTimeStyle:
setDateStyle:
stringFromDate:
setMusicLibrary:
transactionEntityRevision
setTransactionEntityRevision:
ubiquitousIdentifiersToSync
setUbiquitousIdentifiersToSync:
_lastSyncedEntityRevision
_transactionEntityRevision
_lastSyncedDomainVersion
_ubiquitousIdentifiersToSync
entity
enumerateValuesForProperties:usingBlock:
initWithUbiquitousIdentifier:inLibrary:
_entity
dictionary
setWithArray:
null
objectAtIndex:
getValues:forProperties:count:
SBKPropertyValueForML3PropertyValue:ML3Property:
persistentID
track
_persistentID
_track
URLWithString:
unsignedIntValue
numberWithInteger:
unsignedLongValue
predicateMatchingPredicates:
unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:
SBKQueryForTracksNeedingPushWithEntityRevisionAnchor:orderingTerms:
enumeratePersistentIDsUsingBlock:
SBKSQLQueryStringForItemsNeedingPush
performReadOnlyDatabaseTransactionWithBlock:
itemIdentifier
timestamp
playCount
enumerateKeysAndObjectsUsingBlock:
removeObjectsForKeys:
delegate
_delegate
deviceSupportsPushNotifications
storeBookkeeperPreferences
objectForKey:withDefaultValue:
mutableCopy
_startServiceConnectionsWithCompletionHandler:
removeFromRunLoop
setEnabledTopics:
removeObjectForKey:
_onQueue_updateConnectionTopicsAndStoreRegistrations
containsObject:
isEqualToArray:
updateStoreBookkeeperNotificationRegistration:
initWithCapacity:
initWithObjects:
_portNameForEnvironmentName:
initWithEnvironmentName:namedDelegatePort:queue:
publicToken
base64EncodedStringWithOptions:
_loadURLBagWithCompletionHandler:
initWithURLBagContext:
valueForKeyPath:
loadWithCompletionBlock:
requestForDomain:optIn:accountID:typeRegistrationURL:
isEqualToRegistrationRequest:
cancel
requestProperties
statusCode
allHeaderFields
startWithConnectionResponseBlock:
_onQueue_updateStoreBookkeeperNotificationRegistration:
_onQueue_updateStoreBookkeeperNotificationRegistrationForDomain:optIn:accountID:withCompletionHandler:
optIn
storeAccountID
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
isEnabledForDomain:
enabledDomains
connection
weakDomainDelegates
pendingRequests
registeredDomains
registeredAccountID
_environment
_temporaryConnectionsByEnvironment
_typeRegistrationURL
_enabledDomains
_pushEnabled
_bagLoaded
_registrationUpdateScheduled
_fakeNotificationObserver
_connection
_weakDomainDelegates
_pendingRequests
_registeredDomains
_registeredAccountID
_requestPropertiesForDomain:optIn:typeRegistrationURL:
initWithRequestProperties:
initWithURL:
setHTTPMethod:
setValue:forHTTPHeaderField:
setITunesStoreRequest:
copyDeviceGUID
setRequestParameters:
initWithDomain:optIn:accountID:typeRegistrationURL:
_optIn
_storeAccountID
componentsSeparatedByString:
bodyData
propertyListFromData:mutabilityOption:format:errorDescription:
initWithDomain:code:userInfo:
_sharedSystemSyncHandlers
_onQueueSynchronizeWithInterval:isCheckpoint:
_onQueue_clearHasChanges
allSyncingDomains
synchronizeImmediately
syncedStorageController
preferredSynchronizeInterval
hasChangesToPush
isActive
_hasChangesToPush
_isActive
_syncedStorageController
_preferredSynchronizeInterval
copyWithValuesFromSBKUniversalPlaybackPositionMetadata:
pullMetadataItemWithItemIdentifier:completionBlock:
SBKUniversalPlaybackPositionMetadata
pushMetadataItem:completionBlock:
cloudStore
_cloudStore
setDomain:
removeScheduledJobs
%@ %@
[UPP-SBDPlaybackPositionService] 
Connection invalidated: %@
v8@?0
Connection interrupted: %@
ERROR: client %@ did not supply a domain in client connection configuration %@
v16@?0@"SBDDomainSyncServiceHandler"8
v16@?0@"SBDDomainValueServiceHandler"8
ERROR: attempt to use sync APIs on domain (%@) that does not support the sync protocol
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
clientProxy
T@"<SBCPlaybackPositionClientProtocol>",R,N,V_clientProxy
syncHandler
T@"SBDDomainSyncServiceHandler",R,N,V_syncHandler
valueHandler
T@"SBDDomainValueServiceHandler",R,N,V_valueHandler
clientConfiguration
T@"SBCClientConfiguration",R,N,V_clientConfiguration
XPCConnection
T@"NSXPCConnection",R,N,V_XPCConnection
domain
T@"SBCPlaybackPositionDomain",R,N,V_domain
logLevel
com.apple.storebookkeeper
[UPP] 
Starting storebookkeeperd
Vending services: %@
Exiting storebookkeeperd main()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/StoreBookkeeper_Sim/StoreBookkeeper-4015.600.1/storebookkeeperd/SBDServer.m
<Unknown File>
Use +sharedInstance instead
com.apple.storebookkeeperd.SBDServer
SBKStoreAccountChangedNotification
v16@?0@"NSNotification"8
SBKSharedMusicLibraryImportFinished
v24@?0@"NSString"8@?<v@?B@"NSError">16
v20@?0B8@"NSError"12
[UPP-SBDServer] 
Starting service 'SBCPlaybackPositionService'
com.apple.storebookkeeperd.launched
v24@?0@"SBDDomainSyncServiceHandler"8^B16
reloading store accounts
Handling account did change notification
scheduing reset sync (dropLocalChanges = %@).  accountIDs (old = %@, new = %@)
T@"NSObject<OS_dispatch_queue>",R,V_queue
xpcListener
T@"NSXPCListener",R,V_xpcListener
pushNotificationController
T@"SBDPushNotificationController",R,V_pushNotificationController
serviceConnections
T@"NSArray",R,V_serviceConnections
com.apple.storebookkeeperd.XPCTransactionController
openTransactions
T@"NSMutableArray",R,V_openTransactions
%@ identifier = %@%@
 (inactive)
identifier
T@"NSString",R,C,V_identifier
DaemonTemporaryKeepAlive
v20@?0@"SBKStoreURLBagContext"8B16
[UPP-SBDDomainSyncedStorageController] 
ERROR: unable to load bag and determine polling interval
checking needsPoll, pollIntervalInSeconds = %@, lastSynced = %@ (%@)
received request update for domain version change to version: %@
skipping scheduling a sync, last synced domain version already %@
B16@?0@"ML3DatabaseConnection"8
received request handle account change (set sync anchor to 0%@)
 and clear last-sync revision number
clearing all local changes that had been scheduled for push
reseting sync anchor to 0, and scheduling pull from server
running synchronizeImmediatelyWithCompletionHandler: now
received request to scheduleSyncBeforeDate: %@ (in %.2f sec)
target sync date from client: %@ (in %.2f sec)
target sync date in database has been passed, using sync date of 'now': %@ (in %.2f sec)
target sync date from database: %@ (in %.2f sec)
setting target date to: %@ (in %.2f sec)
scheduling sync NOW.
scheduling sync (via BackgroundTaskJob) %f seconds from now...
playbackPositionDomain
T@"SBCPlaybackPositionDomain",R,C,V_playbackPositionDomain
needsPoll
TB,R
needsPull
needsPush
needsInitialSync
lastSynchronizedAccountIdentifier
T@"NSNumber",R,C
lastSynchronizationFailureAccountIdentifier
/BuildRoot/Library/Caches/com.apple.xbs/Sources/StoreBookkeeper_Sim/StoreBookkeeper-4015.600.1/storebookkeeperd/SBDML3UbiquitousDatabase.m
use initWithMusicLibrary:
[StoreBookkeeper-ML]setting %@ to %@
MLUbiquitousBookmarkEntityRevisionAnchor
MPUbiquitousBookmarkDomainVersionAnchorToken
MPDateLastSynced
MPUbiquitousBookmarkDomainVersionRemoteToken
MPDateToSyncWithUbiquitousStore
INSERT OR REPLACE INTO cloud_kvs (key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp, bookmark_sync_revision) VALUES (?, ?, ?, ?, ?, ?)
[UPP-SBDML3UbiquitousDatabase] 
ERROR: failed to update ubiquitous bookmarkmatadata for metadata identifier %@.
has_been_played
play_count_user
bookmark_time_ms
bookmark_sync_timestamp
bookmark_sync_revision
%@ = ?
v32@?0@"NSString"8Q16^B24
UPDATE cloud_kvs SET %@ WHERE key = ?
SELECT item_pid, play_count_user, has_been_played, bookmark_time_ms FROM cloud_kvs INNER JOIN item_kvs USING (key) LEFT OUTER JOIN item USING (item_pid) WHERE key = ? AND item.item_pid IS NOT NULL
v32@?0@"ML3DatabaseRow"8@"NSError"16^B24
UPDATE item_stats SET bookmark_time_ms = ?, has_been_played = ?, play_count_user = ? where item_pid = ?
SELECT key FROM cloud_kvs WHERE key = ?
v16@?0@"ML3DatabaseConnection"8
DELETE FROM cloud_kvs WHERE key = ?
ERROR: updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:, persistentID %lld doesn't exist.
SELECT play_count_user, has_been_played, bookmark_time_ms FROM cloud_kvs WHERE key = ?
UPDATE cloud_kvs SET bookmark_sync_timestamp = ?, bookmark_sync_revision = ? WHERE key = ?
UPDATE cloud_kvs SET bookmark_sync_revision = 0 WHERE key
SELECT key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp FROM cloud_kvs WHERE key
SELECT key, title, item_pid, bookmark_sync_timestamp, bookmark_time_ms, has_been_played, play_count_user  FROM cloud_kvs JOIN item_kvs using (key) JOIN item_extra using (item_pid)
id = %s; titles = %s; item_pids = %s; timestamp = %s; bookmark_time_ms = %s; has_been_played = %s; play_count_user %s
musicLibrary
T@"ML3MusicLibrary",R,W,V_musicLibrary
lastSyncedEntityRevision
TQ,N
lastSyncedDomainVersion
T@"NSString",C,N
dateLastSynced
T@"NSDate",&,N
lastNotificationDomainVersion
dateToSyncWithUbiquitousStore
hasSyncedAtleastOnce
TB,R,N
hasRemoteChangesToPull
hasLocalChangesToPush
SenTestCase
__SBDML3UbiquitousDatabaseKey
LogSyncEvents
<NO VERSION>
%@: lastSyncedDomainVersion = %@, entityRevisions.lastSynced = %llu, entityRevisions.currentSyncTransaction = %llu)
T@"ML3MusicLibrary",&,V_musicLibrary
TQ,V_lastSyncedEntityRevision
transactionEntityRevision
TQ,V_transactionEntityRevision
T@"NSString",C,V_lastSyncedDomainVersion
ubiquitousIdentifiersToSync
T@"NSMutableSet",&,N,V_ubiquitousIdentifiersToSync
T@"NSString",R,V_identifier
entity
T@"SBCPlaybackPositionEntity",R,V_entity
v32@?0@"NSString"8@16^B24
%@ properties = %@
persistentID
Tq,R,V_persistentID
track
T@"ML3Track",R,V_track
@16@?0@8
SELECT key FROM cloud_kvs LEFT OUTER JOIN item_kvs using (key) WHERE item_pid IS NULL AND bookmark_sync_timestamp != 0 AND bookmark_sync_revision >= ?
v32@?0q8Q16^B24
v32@?0@"SBKUniversalPlaybackPositionMetadata"8@"ML3Track"16^B24
v32@?0@"SBKUniversalPlaybackPositionMetadata"8@16^B24
v32@?0@8@16^B24
push-notifications.environment
push-notification-types.add-push-notification-type-url
SBKPushNotificationRegisteredDomains
SBKPushNotificationRegisteredAccountID
delegate
T@"<SBDPushNotificationControllerDelegate>",W,N,V_delegate
com.apple.SBD.push-notification-controller
DeviceClass
AppleTV
[UPP-SBDPushNotificationController] 
%@ APSConnection (env:%@) = %@ removed from runloop in dealloc
v32@?0@"NSString"8@"APSConnection"16^B24
%@ connection:%@ didReceivePublicToken:%@
%@ connection:%@ didReceiveMessageForTopic:%@ userInfo:%@
Received push notification for storebookkeeper topic '%@' with userInfo %@
Received push notification for storebookkeeper domain '%@
Processing push notification for storebookkeeper domain '%@', version %@
%@ connection:%@ didReceiveIncomingMessage:%@
%@ connection:%@ didSendOutgoingMessage:%@
%@ connection:%@ didFailToSendOutgoingMessage:%@, error = %@
%@ connection:%@ didChangeConnectedStatus: connected = %d
%@ connectionDidReconnect:%@
Setting APNS connection enabled topics to %@ on connection %@
%@ Beginning APS bringup - creating connections...
%@ Push enabled: %d, environment: %@
%@->_connection (env:%@) = %@
%@ APSConnection (env:%@) = %@ removed from runloop
Push token: %@, DSID(SBK): %@
PushNotificationConfiguration-LoadURLBag
Loading URL Bag
Finished loading URL Bag.  _pushEnabled = %@, _typeRegistrationURL = %@, _env = %@
v24@?0@"NSDictionary"8@"NSError"16
com.apple.storebookkeeperd.aps
com.apple.storebookkeeperd.aps.dev
com.apple.storebookkeeperd.aps.demo
Unable to update push notification registration to %@ for domain '%@' (accountID %@): reason = 'URL bag has not been loaded'.
Unable to update push notification registration to %@ for domain '%@' (accountID %@): reason = 'type registration URL not found in URL bag'.
Skipping opt-in push notification registration attempt for domain '%@' (accountID %@).  reason = 'push is not enabled at the moment'.
Unable to update push notification registration to %@ for domain '%@' (accountID %@): reason = 'account ID missing, not set, or unspecified'.
Skipping opt-out push notification registration attempt for domain '%@' (accountID %@).  reason = 'itunesstored has already sent an opt-out on our behalf'.
Making sure blacklisted accountID %@ is opted-out for push notifications
%@ push notification registration for domain '%@' (accountID: %@)
Opt-in to
Opt-out of
StoreBookkeeper update push notification registration to %@ for domain '%@' (accountID %@) issuing request %@ with properties %@
, **error** = %@, %@
StoreBookkeeper update push notification registration to %@ for domain '%@' (accountID: %@) returned response %@ with status %ld with decoded body %@%@
...response-headers %@
status
v24@?0@"SSURLConnectionResponse"8@"NSError"16
v28@?0@"NSString"8B16@"NSNumber"20
v32@?0@"NSString"8@"SBDPushRegistrationRequest"16^B24
connection
T@"APSConnection",R,V_connection
weakDomainDelegates
T@"NSMutableDictionary",R,V_weakDomainDelegates
pendingRequests
T@"NSMutableDictionary",R,V_pendingRequests
registeredDomains
T@"NSMutableArray",R,V_registeredDomains
registeredAccountID
T@"NSNumber",R,V_registeredAccountID
enabledDomains
T@"NSArray",&
POST
application/x-apple-plist
Content-Type
bookkeeperDomain:%@
guid
notification-type
mzbookkeeper
put-parameters
storeAccountID
T@"NSNumber",R,V_storeAccountID
T@"NSString",R,C,V_domain
optIn
TB,R,V_optIn
SBKBlacklistedAccountIDs
ERROR: exception while handling SBKBlacklistedAccountIDs preference: %@
unknown error
bad password token
unrecognized push notification type
no push device error
bad parameters in request
Request Failed: response status error (%d) '%@'
[UPP-SBDDomainSyncServiceHandler]
Received request: -%@, entity %@
[UPP] ERROR: attempt to set hasChangeToPush while inactive may result in changes not being pushed to the servers.
v12@?0B8
received push notification event, %@'s version changed to %@
received changed account event, will reset sync%@
 (dropping local changes)
received request to do initial sync
received changed account event, will schedule sync
received request to synchronize immediately
syncedStorageController
T@"SBDDomainSyncedStorageController",R,N,V_syncedStorageController
preferredSynchronizeInterval
Td,R,N,V_preferredSynchronizeInterval
hasChangesToPush
TB,R,N,V_hasChangesToPush
isActive
TB,R,N,V_isActive
v40@?0@"SBKUniversalPlaybackPositionMetadata"8@"NSString"16@"NSString"24@"NSError"32
cloudStore
T@"SBKUniversalPlaybackPositionStore",R,N,V_cloudStore
T@"NSString",C,V_domain
SBDPlaybackPositionService
SBCPlaybackPositionServiceProtocol_Internal
SBCPlaybackPositionServiceProtocol
SBCDomainSyncServiceProtocol
NSObject
SBCDomainValueServiceProtocol
SBCDomainSyncServiceProtocol_Internal
SBDDomainServiceHandler
SBDServer
NSXPCListenerDelegate
SBDPushNotificationControllerDelegate
XPCTransactionController
XPCTransaction
SBDDomainSyncedStorageController
SBKUniversalPlaybackPositionDataSource
SBDML3UbiquitousDatabase
SBDPlaybackPositionTransaction
SBKUniversalPlaybackPositionTransactionContext
SBDPlaybackPositionMediaItem
SBKUniversalPlaybackPositionMediaItem
SBDPlaybackPositionML3TrackMediaItem
SBKML3Properties
SBKSync
SBDWeakDomainDelegate
SBDPushNotificationController
APSConnectionDelegate
SBDPushRegistrationRequest
SBDDomainSyncServiceHandler
SBDDomainSyncedStorageObserver
SBDDomainValueServiceHandler
SBDJobScheduler
@24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Vv36@0:8@16B24@?28
Vv24@0:8@16
Vv32@0:8@16@?24
Vv36@0:8@"SBCPlaybackPositionEntity"16B24@?<v@?B>28
Vv24@0:8@"SBCPlaybackPositionEntity"16
Vv32@0:8@"NSArray"16@?<v@?B@"NSError"@"NSArray">24
Vv32@0:8@"SBCPlaybackPositionEntity"16@?<v@?B@"NSError"@"SBCPlaybackPositionEntity">24
Vv24@0:8@?16
Vv24@0:8@?<v@?B@"NSError">16
Vv24@0:8@"SBCClientConfiguration"16
v24@0:8@?16
v16@0:8
@"NSXPCConnection"
@"NSObject<OS_dispatch_queue>"
@"<SBCPlaybackPositionClientProtocol>"
@"SBDDomainSyncServiceHandler"
@"SBDDomainValueServiceHandler"
@"SBCClientConfiguration"
@"SBCPlaybackPositionDomain"
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v40@0:8@16@24@32
v40@0:8@"SBDPushNotificationController"16@"NSString"24@"NSString"32
v20@0:8B16
v24@0:8@16
v32@0:8@16@?24
@"NSXPCListener"
@"SBDPushNotificationController"
@"NSArray"
@"NSMutableArray"
@"NSString"
@24@0:8@?16
v40@0:8@16@24@?32
@"<SBKUniversalPlaybackPositionTransactionContext>"24@0:8@?<v@?@"<SBKUniversalPlaybackPositionMediaItem>">16
v24@0:8@"<SBKUniversalPlaybackPositionTransactionContext>"16
v40@0:8@"<SBKUniversalPlaybackPositionTransactionContext>"16@"NSString"24@?<@"SBKUniversalPlaybackPositionMetadata"@?>32
v28@0:8@16B24
v32@0:8@16@24
v28@0:8B16@20
@"NSOperationQueue"
@"SBKUniversalPlaybackPositionStore"
@"SBDML3UbiquitousDatabase"
@"ML3MusicLibrary"
@"NSDate"
v24@0:8Q16
B68@0:8@16B24Q28d36d44q52@60
B60@0:8@16B24Q28d36d44q52
v24@0:8q16
@"NSMutableSet"
v32@0:8@"NSSet"16@?<v@?@"NSString"@^B>24
@32@0:8@16@24
@"SBCPlaybackPositionEntity"
@32@0:8q16@24
q16@0:8
@"ML3Track"
@32@0:8Q16@24
@"<SBDPushNotificationControllerDelegate>"
v48@0:8@16@24@32@40
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v44@0:8@16B24@28@?36
@"NSMutableDictionary"
@"NSURL"
@"APSConnection"
@"NSNumber"
@44@0:8@16B24@28@36
@36@0:8@16B24@28
v24@0:8@"SBDDomainSyncedStorageController"16
v28@0:8d16B24
d16@0:8
@"SBDDomainSyncedStorageController"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleExecutable</key>
<string>storebookkeeperd</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleIdentifier</key>
<string>com.apple.storebookkeeperd</string>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>DataProtectionClass</key>
<string>NSFileProtectionComplete</string>
<key>aps-connection-initiate</key>
<true/>
<key>com.apple.authkit.client.internal</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
</dict>
</plist>
