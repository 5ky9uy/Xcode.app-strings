alloc
init
setIsDaemon:
sharedInstance
runUntilIdleExit
drain
release
dealloc
stringWithFormat:
description
isAlive
setAlive:
message
setMessage:
messageType
setMessageType:
_alive
_messageType
_message
currentNetworkType
assignError:withCode:
_createRequest:
autorelease
sleepForTimeInterval:
_logIPAddressIfNecessary
sendSynchronousRequest:allowRedirects:returningResponse:error:
_parseResponse:error:
errorWithCode:
assignError:withError:translate:
serialNumber
hasCellularRadio
class
safeObjectForKey:ofClass:
retain
dictionary
numberWithInt:
setObject:forKey:
errorWithDomain:code:userInfo:
setSafeObject:forKey:
dataWithPropertyList:format:options:error:
URLWithString:
initWithURL:
setHTTPMethod:
setHTTPBody:
setValue:forHTTPHeaderField:
setCachePolicy:
setTimeoutInterval:
initWithData:encoding:
isEqualToString:
propertyListWithData:options:format:error:
isKindOfClass:
_createHealthcheckResponseFromDictionary:
hostWithName:
addresses
count
countByEnumeratingWithState:objects:count:
checkActivationServerStatus:
autoInstallManager
scheduleDefaultAutoScanTaskIfNecessary
scheduleEmergencyAutoScanTaskIfNecessary
scheduleAutodownloadRetryTaskIfNecessary
scheduleAutodownloadWifiPeriodEndTaskIfNecessary
cancelDefaultAutoScanTask
cancelEmergencyAutoScanTask
cancelAutodownloadRetryTask
cancelAutodownloadWifiPeriodEndTask
scheduleAutoInstallExpirationTask:
scheduleAutoInstallUnlockWindowStartTask:
scheduleAutoInstallStartInstallTask:
cancelAutoInstallWindowEndTask
cancelAutoInstallUnlockWindowStartTask
cancelAutoInstallStartInstallTask
suStartDate
scheduleAutoInstallStartInstallTaskWithDate:
scheduleAnyTasksIfNecessary
cancelAllTasks
cancelAllAutoscanTasks
cancelAllAutodownloadTasks
scheduleAllAutoInstallUpdateTasks:
cancelAllAutoInstallTasks
scheduleDelayEndAutoScan:
cancelDelayEndAutoScan
_addPowerRequirementsToRequest:
scheduleAutodownloadRetryTaskFromDate:toDate:policy:
_handleAutodownloadRetryTask:
scheduleAutodownloadWifiPeriodEndTask
_handleAutodownloadWifiPeriodEndTask:
scheduleAutoInstallTaskAtDate:jobName:needsNetwork:needsPower:
_handleAutoInstallUnlockStartTask:parameters:
_handleAutoInstallStartInstall:parameters:
_handleAutoInstallExpirationTask:parameters:
_manager
_autoInstallManager
currentState
mdmDelay
initWithDelay:
registerProfileChangeListener
unregisterProfileChangeListener
defaultCenter
profileChanged
addObserver:selector:name:object:
removeObserver:name:object:
refreshDelayedState
sharedConnection
isSoftwareUpdateResisted
shouldDelayUpdates
enforcedSoftwareUpdateDelayInDays
delayPeriod
setDelayPeriod:
managedDeviceDelayPeriodChanged:
respondsToSelector:
isDelayed
setIsDelayed:
setMdmDelay:
save
date
releaseDate
delayedStartDate
isEqualToDate:
prettyPrintDate:
setDelayedStartDate:
delayUnit
laterDate:
startDelayWindow:
mdmDelayInterval
updateDelayInterval
unsignedLongLongValue
timeIntervalSinceNow
shouldDelayUpdate:
delegate
setDelegate:
_delegate
_mdmDelay
options
setOptions:
callback
setCallback:
result
setResult:
error
setError:
_options
_callback
_result
_error
hashTableWithOptions:
addObserver:
_autoDownloadWiFiPeriodDidEnd
loadSavedState
removeObserver:
unlockCallbacks
mutableCopy
installPolicy
initWithInstallPolicyType:
mandatoryUpdateDict
addObject:
removeObject:
lock
unlock
beginTransaction:keepAlive:
endTransaction:
beginTransaction:
setHoldsWiFiAssertion:
isDownloading
lastScannedDescriptor
_setupManualDownloadPolicyPeriodIfNecessary:fromDate:save:
_updateAssetDownloadOptions
lastProductBuild
lastProductVersion
currentProductType
currentProductBuild
currentProductVersion
currentReleaseType
setCacheable:
_resumeFromLastKnownState
cleanupAllSoftwareUpdateAndRelatedAssets
setLastAutoInstallOperationModel:
_clearUnlockCallbacks
setMandatoryUpdateDictionary:
resetAllHistory
setLastProductType:
setLastProductBuild:
setLastProductVersion:
setLastReleaseType:
removeUnlockCallback:
lastDownload
copy
descriptor
progress
metadata
phase
getLocalDefaultSoftwareUpdateAssetIfExistsWithReleaseDate:
tryCreateDescriptorFromSoftwareUpdateAsset:withReleaseDate:
isValidDescriptor
isEqual:
getLocalUrl
setDownloading:
setDownloadAsset:
setDownload:
__startBrainAssetDownload
isInstalled
setPhase:
_updateLastSavedDownloadPhase:
_verifyAndPrepareUpdate
__startUpdateAssetDownload:
_purgeSUAsset:
isAutoDownload
activeDownloadPolicyType
_doAutodownload:error:
startDownloadWithMetadata:error:
cleanupAllSoftwareUpdateAssets
_cleanupPreviousDownload
isCellularRoaming
addType:
setIdentifier:
setForced:
initWithDescriptor:
lastScannedDescriptorTime
computeTimeOfWifiOnlyPeriodEndFromDate:
setScheduledAutodownloadWifiPeriodEndTime:
_tryOrScheduleAutodownloadWithPolicy:allowOneTimeRetry:
types
scanForUpdates:complete:
isInstalling
isDownloadable
isAutoDownloadDisabled
noteAutodownloadFailedToStartWithError:
_isWithinAutodownloadWifiWindow
isPowerRequired
scheduledAutodownloadWifiPeriodEndTime
timeIntervalSinceReferenceDate
gregorianCalendar
dateWithTimeIntervalSinceReferenceDate:
_endOrRescheduleAutodownloadRetryInOneDay:
setAutoDownload:
setActiveDownloadPolicyType:
_endAutodownloadTasksAndResetState:
automaticDownloadDidFailToStartForNewUpdateAvailable:withError:
setScheduledAutodownloadPolicyChangeTime:
setAutodownloadNeedsOneTimeRetry:
_isDateWithinAutodownloadWifiWindow:
endAutodownloadTasksAndResetState
isDownloadHalted
_cancelDownload:userRequested:error:
currentDescriptor
scanRequestDidStartForOptions:
scanRequestDidFinishForOptions:update:error:
scanDidCompleteWithNewUpdateAvailable:error:
scheduledManualDownloadWifiPeriodEndTime
wifiOnlyPeriodInDaysForUpdate:
addToDate:numberOfDays:
setScheduledManualDownloadWifiPeriodEndTime:
distantPast
requestedPMV
setRequestedPMV:
isSupervised
identifier
MDMUseDelayPeriod
numberWithInteger:
isPreparing
notifyScanRequestDidStart:
notifyScanRequestDidFinish:update:error:
notifyScanDidComplete:error:
isScanning
lastObject
setScanning:
setAssetToDownloadFromLastScan:
setAssetToDownloadFromLastScanReleaseDate:
translateError:
code
_handleScanError:
isForced
findsAnyUpdate
updateType
containsType:
rampEnabled
_sendDownloadInvalidatedForNewDescriptor:
productBuildVersion
compare:options:
setFailedPatchDescriptor:
updateInstallPolicy:
setManifestSubmitted:
_clearKeybagStash
setLastScannedDescriptorTime:
setLastScannedDescriptor:
removeAllObjects
_doScanWithRequestedPMV:andDelayPeriod:completion:
matcherForCurrentDeviceWithRequestedPMV:andDelayPeriod:
productVersion
errorWithCode:originalError:
setCurrentDescriptor:
documentation
hasAnyDocumentation
setDocumentation:
_fetchDocumentationFromSoftwareUpdateAsset:completion:
_remoteQueryWithMatcher:completion:
matcherDocumentationFromAsset:
tryCreateDocumentationFromDocumentationAsset:
cancelDownloadIfNecessary
_scheduleDocumentationDownloadTimeoutTimer:
assetType
stringForAssetType:
totalWritten
totalExpected
attachProgressCallBack:
setAllowsCellularAccess:
_invalidateDocumentationDownloadTimeoutTimer
startDownload:then:
invalidate
initWithObjectsAndKeys:
_documentationDownloadTimeout:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
userInfo
objectForKey:
cleanupAsset
findAssetWithMatcher:localSearch:releaseDate:error:
attributes
downloadWasInvalidatedForNewUpdateAvailable:
_killDownload:userRequested:error:
cancelDownload
numberWithBool:
dictionaryWithObjects:forKeys:count:
initWithDomain:code:userInfo:
_downloadFailedWithError:
setLastDownload:
setMetadata:
downloadProgressDidChange:
_updateLastSavedDownloadsMetadata:
_downloadPriority
assetDownloadOptionsFromMetadata:descriptor:priority:forBrain:
activeDownloadPolicy:
applyDownloadPolicy:
assetToDownloadFromLastScan
assetToDownloadFromLastScanReleaseDate
matcherForCurrentDevice
simulateAutoDownload
totalRequiredFreeSpace
minimumSystemPartitionSize
systemPartitionPadding
devicePadding:
downloadFeeAgreementStatus
hasEnoughDiskSpace:growth:deltaSpaceNeeded:isAutoDownload:includePurging:
cdLevel4Disabled
siriVoiceDeletionDisabled
appDemotionDisabled
freeCachedSpaceSynchronous:timeout:isAutoDownload:disableCDLevelFour:disableSiriDeletion:disableAppDemotion:
_cleanupPreviousDownload:
setIsDone:
setProgress:
setDescriptor:
downloadDidStart:
_reapplyExistingDownloadPolicyIfDownloadable:
percentComplete
refreshState
state
_updateDownloadProgress:withState:
isDownloadAllowableForCellular
allowsCellularAccess
_verifyAndPrepareWhenReady
cancelDownloadUserRequested:error:
isMainThread
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
normalizedPercentComplete
intValue
_orderForPhase:
allKeys
performSelector:
isPasscodeLocked
isStalled
_notePhaseCompleted:
expectedTimeRemaining
_changeDownloadPhase:progress:timeRemaining:
setPercentComplete:
setTimeRemaining:
_updateNormalizedDownloadProgressAndNotifyDelegate
_updateNormalizedDownloadProgress
_shouldSendUpdatedProgressToDelegate
_snapshotProgress
_isStreamingZipCapable
setNormalizedPercentComplete:
numberWithFloat:
localizedStringFromNumber:numberStyle:
downloadDidFail:withError:
translateError:withAddedUserInfo:
downloadDidFinish:withInstallPolicy:
setUnlockCallbacks:
removeObjectForKey:
currentThread
allObjects
manager:downloadWasInvalidated:
setPreparing:
taskQueue
_downloadFinished
purgeMSUUpdate:
disableKeybagStash
setStashbagPersisted:
enforceWifiOnlyOverride
_isUpdateReadyForInstallation:forceDiskCleanupIfNeeded:ShouldRetry:
path
initWithDownload:
unsatisfiedConstraints
initOnQueue:withDownload:
deltaSpaceNeeded
numberWithUnsignedLongLong:
refreshConstraints
unmetConstraints
unsignedIntegerValue
download
dismissNotification
postNotificationForError:withUpdateBuildNumber:
installUpdateWithOptions:error:
containsObject:
setInstalling:
installDidStart:
createPreventLockAssertionWithDuration:
domain
installDidFinish:
installDidFail:withError:
_setType:
setInstallPolicy:
installPolicyDidChange:
slaVersion
createInstallationKeybagForDescriptor:withSecret:forUnattendedInstall:
delayEndDate
mandatorySUFlags
integerValue
isEqualToDictionary:
setMandatoryUpdateDict:
autoScanAndDownloadIfAvailable:
_doUnlockEvents
initialize
self
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retainCount
zone
hash
superclass
debugDescription
keybagInterface:hasPasscodeSetDidChange:
keybagInterface:passcodeLockedStateDidChange:
networkChangedFromNetworkType:toNetworkType:
cellularRoamingStatusChanged:
carrierBundleChanged
operatorBundleChanged
setForeground:
resumeOrResetIfNecessary
tryAutodownload
purgeDownloadUserRequested:error:
pauseDownload:
resumeDownload:
updateDownloadMetadata:error:
_computedDownloadOptionsForBrain:
startDownload:
_isPhase:afterPhase:
_isPhase:beforePhase:
_updateDownloadStatusForBrainAssetState:
persistStashOnUnlock
_verifyAndPrepareOnUnlock
_changeDownloadPhase:progress:
addUnlockCallback:forKey:
_setVerifyExclusions:
isUpdateReadyForInstallation:shouldRetry:
autoSUFailedWithError:
installUpdate:
createInstallationKeybag:forUnattendedInstall:
isDelayingUpdates
mandatoryUpdateDictionary
setState:
isForeground
isInstallTonight
setIsInstallTonight:
downloadAsset
managedDeviceManager
setManagedDeviceManager:
_state
_foreground
_autoScanOptions
_scanning
_scanRequests
_managedScanInProgress
_assetToDownloadFromLastScan
_assetToDownloadFromLastScanReleaseDate
_downloading
_downloadAsset
_download
_downloadProgressSnapshot
_documentationDownloadTimer
_preparing
_installing
_installed
_isInstallTonight
_observers
_autoSUFailureNotification
_unlockCallbacks
_managedDeviceManager
_installPolicy
_mandatoryUpdateDictionary
_clientMessagabilityDidChange:
_clientForegroundnessDidChange:
manager
initWithManager:
currentAutoInstallOperationCreatingIfNecessary:error:
deviceHasSufficientSpaceForDownload:includeAppPurging:error:
installationKeybagStateForDescriptor:
installUpdateWithOptions:withResult:
operationModel
agreementStatus
forecast
suEndDate
compare:
trySchedulingAnotherTimeInInstallWindow:
cancelAutoInstallOperation:
consentToAutoInstallOperation:
proxy
object
isMessagable
_sendLatestStatusForClient:
_evaluateForegroundness
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
_clientForCurrentConnection
setType:
wakeupIfNecessary
downloadDidFinish:
autoInstallOperationDidConsent:
autoInstallOperationWasCancelled:
autoInstallOperationDidExpire:
autoInstallOperationIsReadyToInstall:withResult:
isScanning:
scanForUpdates:withResult:
isDownloading:
startDownloadWithMetadata:withResult:
cancelDownload:
purgeDownload:
updateDownloadMetadata:withResult:
downloadAndInstallState:
deviceHasSufficientSpaceForDownload:
extraSpaceNeededForDownloadWithoutAppPurging:
currentAutoInstallOperation:withResult:
cancelAutoInstallOperation:withResult:
consentToAutoInstallOperation:withResult:
isInstallationKeybagRequired:
isUpdateReadyForInstallation:
setClientType:withResult:
slaVersion:
isDelayingUpdates:
delayEndDate:
setMandatorySoftwareUpdateDictionary:
getMandatorySoftwareUpdateDictionary:
createInstallationKeybag:forUnattendedInstall:withResult:
autoInstallManager:operationWasConsented:
autoInstallManager:didCancelOperation:
autoInstallManager:didExpireOperation:
autoInstallManager:isReadyToInstall:
clients
addClient:
removeClient:
_clients
setKeepAliveClearable:
isKeepAliveEnabled
enableTransactions
initWithMachServiceName:
_setQueue:
resume
_notifyServerStart
resumeOrResetStateIfNecessary
clearKeepAliveIfNecessary:
_run
openTransactions
currentConnection
initWithConnection:
setInterruptionHandler:
setInvalidationHandler:
interfaceWithProtocol:
setRemoteObjectInterface:
setExportedInterface:
setExportedObject:
setUserInfo:
listener:shouldAcceptNewConnection:
_queue
auditToken
arrayWithObject:
initWithBundleIDs:states:
mostElevatedApplicationStateForPID:
_isStateMessagable:
_applicationStateChanged:
setHandler:
remoteObjectProxy
postNotificationName:object:
_isStateForeground:
hasPrefix:
_evaluateMessagability
type
isApplication
connection
_appStateMonitor
_lastAppState
_type
_pid
_identifier
_isApplication
_isMessagable
_isForeground
_connection
hasOpenTransactionForName:
_toggleKeepAliveStatus
_isKeepAliveEnabled:
_setKeepAlive:
_openTransactions
_keepAliveTransactions
_keepAliveClearable
lastAutoInstallOperationModel
unlockStartDate
noteAutoInstallOperationUnlockWindowDidBegin
isAutoSUDisabled
installTonightDisabled
isDone
_isExpired
noteAutoInstallOperationDidExpire
_createOperationModel
_clearAutoInstallOperationForReason:
setAgreementStatus:
unlockEndDate
dateWithTimeIntervalSinceNow:
_createForecast
setForecast:
UUID
setId:
noteAutoInstallOperationWantsToBegin
_operationModel
setRequest:
initWithRequest:delegate:startImmediately:
_finished
setData:
setResponse:
cancel
HTTPBody
HTTPMethod
cachePolicy
HTTPShouldHandleCookies
setHTTPShouldHandleCookies:
HTTPShouldUsePipelining
setHTTPShouldUsePipelining:
timeoutInterval
allHTTPHeaderFields
setAllHTTPHeaderFields:
setURL:
statusCode
length
initWithData:
appendData:
connection:didFailWithError:
connectionShouldUseCredentialStorage:
connection:willSendRequestForAuthenticationChallenge:
connection:canAuthenticateAgainstProtectionSpace:
connection:didReceiveAuthenticationChallenge:
connection:didCancelAuthenticationChallenge:
connection:willSendRequest:redirectResponse:
connection:didReceiveResponse:
connection:didReceiveData:
connection:needNewBodyStream:
connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:
connection:willCacheResponse:
connectionDidFinishLoading:
initWithRequest:
main
request
response
data
allowRedirects
setAllowRedirects:
setStatusCode:
_request
_data
_response
_statusCode
_allowRedirects
_done
_saveData
addOperation:
waitUntilAllOperationsAreFinished
MbP?
isAlive: %@
              Message: %@
              MessageType: %@
alive
TB,N,GisAlive,V_alive
messageType
Ti,N,V_messageType
message
T@"NSString",&,N,V_message
Attempting activation healthcheck: #%d...
Successfully connected for the healthcheck, but failed to parse the result: %@
Unable to contact the activation healthcheck after %d attempts: %@
Unable to create request for activation healthcheck: %@
CTErrorCode
Unable to retrieve telephony properties: %@
Unable to create connection to telephony.
SerialNumber
IMEI
ICCID
IMSI
MEID
https://albert.apple.com/WebObjects/ALUnbrick.woa/wa/ALActivationMonitor/checkUnbrickHealth
POST
iOS/SoftwareUpdate
User-Agent
Sending activation healthcheck request: %@
Status
Message
MessageType
WARN
ERROR
Unable to parse result from albert healthcheck: %@
Albert healthcheck result was not a dictionary: %@
albert.apple.com
Found IP address for activation healthcheck server: %@
No IP address found for activation healthcheck server.
v8@?0
scheduleAutoInstallStartInstallTask
recived profile change notification
Overridding shouldDelay to YES
delay interval is outside valid range. Defaulting to %d day delay interval
Setting delay period to %d days
Setting isDelayed to %d
Setting delayedStartTime to %@
Delayed updates not set in profile
delayedStartDate is nil. Not delaying
delayedStartDate is in the future. Resetting to now
Overriding delay interval via asset XML:  %llu
Overriding delay interval with CFPrefereneces setting:  %llu
Time delayed:  %llu
Time to delay: %llu
Delay timer has expired. No longer delaying update
Delay timer still active. Delaying update
ShouldDelay = %d
mdmDelay
T@"SUManagedDeviceUpdateDelay",&,N,V_mdmDelay
delegate
T@"<SUManagedDeviceManagerDelegate>",N,V_delegate
unlockCallbackVerifyAndPrepare
unlockCallbackResumeFromLastKnownState
options
T@"SUScanOptions",&,N,V_options
callback
T@?,C,N,V_callback
result
T@"SUDescriptor",&,N,V_result
error
T@"NSError",&,N,V_error
Found install policy: %@
No install policy saved, using default: %@
downloading
installing
com.apple.softwareupdateservicesd.installUpdate
Failed to acquire power assertion for update installation.
Failed to release power assertion for update installation.
scanning
Foreground status changed: isForeground? %@
Updating download options for foreground status change if necessary.
Attempting to resume from last known state.
New OS detected; resetting all prior state.
Internal
https://basejumper.apple.com/livability/%s
Emet
Setting default asset URLs to %@
State reset complete.
Previous update asset hadn't yet finished brain loading (downloading, verifying, or extracting).  Resuming brain download...
Previous update found on disk and verified.
Previous update found on disk and unarchived.  Resuming verification...
Calling verifyAndPrepareUpdate in resumeFromLastKnownState
Previous update asset hadn't yet finished update processing (downloading, verifying, or extracting).  Resuming update download...
Invalid descriptor found from asset for recovery.
Descriptor from asset (%@) doesn't match descriptor from download (%@).
No descriptor found from asset for recovery.
Previous update was found queued for downloading.  Attempting to resume download...
No previous download recognized; cleaning up all software update assets.
No previous download state to resume from.
Automatic scan for type [%@] disabled while roaming over cellular.
Coalesced auto-scan request for [%@] into existing autoscan.
auto-tryScan
Starting software update auto scan for type: %@
com.apple.softwareupdate.autoscan
Auto scan found update available: %@
Automatic scan for types [%@] failed with error: %@
v24@?0@"SUDescriptor"8@"NSError"16
auto-tryDownload
_tryOrScheduleAutodownloadWithPolicy: current network type: %@, within wifi window? %@, pluggedIntoPower? %@
_tryOrScheduleAutodownloadWithPolicy: wifi download failed to start due to error: %@
Download failed because auto-download has been disabled by preference.
Attempting to autodownload...
_doAutodownload: Error starting autodownload: %@
_endOrRecheduleAutodownloadRetryInOneDay: within wifi window
_endOrRecheduleAutodownloadRetryInOneDay: download should end
Sending autodownload did fail to start notification to clients.
Ending/clearing any oustanding autodownload tasks and state
Download is currently halted @ end of autodownload period - trying to cancel it silently.
Scheduled new manual wifi period ending: %@
com.apple.mdm
Scan [identifier: %@] requested during existing scan. This scan will take precedence
Scan request [identifier: %@] coalesced into existing scan
Scanning for new OTA software update...
Ignoring non managed scan result in favor of managed scan result
Error scanning for update: %@
Found update while delayed update is enabled
Update found for scan options is the same as the previously known update; no newer update exists.
Scanned for [%@] updates, but didn't find any.
Ramp is enabled in asset XML and scan is a background scan. Ignoring the update
Found update descriptor, but delaying due to MDM setttings: %@
Update found for scan options: %@
Update found was newer than curently download(ed|ing) update.  Attempting to cancel download.
Download successfully cancelled.
Unable to cancel download: %@
Previous download invalidated/destroyed for new update.
Unexpected result from scan - no update descriptor or error returned!
v36@?0@"SUDescriptor"8@"MAAsset"16B24@"NSError"28
Requested PMV %@ does not match PMV returned by MobileAsset %@
v24@?0@"SUDocumentation"8@"NSError"16
v36@?0@"MAAsset"8@"NSDate"16B24@"NSError"28
Fetching associated documentation.
Failed to find documentation asset: %@
Documentation asset found: %@
%@ download progress: %d% (%d/%d)
v16@?0@"MAProgressNotification"8
documentation download completed succesfully
Documentation asset download failed: %d
v16@?0q8
asset
Documentation download timed out.
com.apple.softwareupdateservices.scanQueue
Managed scan == %d
Asset refresh state: %@
Asset refresh error: %@
Found new update while waiting for unlock. Clearing download
Update asset has not started downloaded yet. Canceling planned download
Cancellation/purging success.
Error cancelling/purging software update asset: %@
Download metadata changed from: %@ 
Refreshing asset locally to start download...
Attempted to download update that's already on disk and downloaded.
Latest software update asset is not the last scanned update asset; should never occur, but updating last scanned descriptor to match.
Sytem partition growth = %llu bytes
Starting space checks for download
Insufficient space for download. Trying to free %llu bytes
Insufficient space after purging files. Update requires another %llu bytes
Unable to purge enough space for downlaod. Not starting download
SU asset
Documentation asset
Brain asset
allow SU download over cellular = %d
failed to download %@: %d
%@ asset already installed. Starting prepare
successfully downloaded %@
Resuming download found to be undownloadable, and unable to cancel the download: %@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SoftwareUpdateServices_Sim/SoftwareUpdateServices-286.50.33/SUManager.m
<Unknown File>
Download status can only be invoked on the main thread.
callback count = %lu
selector string = %@
Unknown selector %@ for SUManager
_verifyAndPrepareOnUnlock lockState = %d
calling _verifyAndPrepareUpdate from unlock callback
Download complete and brain is loadable. Verifying update
Software update download phase changed from %@ to %@.
Download halted after wifi window; attempting to cancel download silently.
Download %@ phase completed.
Download Phase: %@, Phase Progress: %@, Overall Progress: %@
Download failed with error: %@
Scheduling autodownload retry through BTA since we're within the wifi autodownload window.
Cannot add unlock callback with nil selector
Cannot add unlock callbakc with nil unlockCallbackKey
Failed to create NSString from selector
Adding unlock callback %@ for key %@
unlock callback count = %lu
removing unlock callback for key %@
Clearing unlock callbacks
Download status can only be invoked on the main thread, but was: %@
Update is currently preparing. Coalescing prepare requests.
com.apple.softwareupdateservicesd.verifyUpdate
Failed to acquire power assertion for update verification.
v16@?0@"NSError"8
Purging MSU update since it was cancelled - success? %d, error=%@
Failed to release power assertion for update verification.
Cellular operator status changed, and now the download is not downloadable.  Attempting to cancel the download.
Unable to cancel download for cellular bundle change: %@
Insufficient disk space detected for installation - attempting to free: %@ bytes
Insufficient disk space detected for installation but ignoring attempt to free space because we're within buffer from a prior attempt to do so.
InternalBuild
Is ready for installation?  No due to constraints unmet: %@
Requiring installation of asset: %@
Installation error: download not ready for installation: %@
Installation failed with error: %@
createInstallationKeybag - unattended:%d
Overriding mandatoryUpdateDictionary to %@
managedDeviceDelayPeriodChanged
Updated delay period takes us out of delay period
Failed to purge/cancel download: %@
Device lock status changed: passcodeLocked = %@
Device unlocked
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
state
T@"SUState",&,N,V_state
download
T@"SUDownload",&,N,V_download
TB,D,N,GisDownloading
TB,N,GisScanning,V_scanning
preparing
TB,N,GisPreparing,V_preparing
TB,N,GisInstalling,V_installing
downloadAsset
T@"MAAsset",&,N,V_downloadAsset
assetToDownloadFromLastScan
T@"MAAsset",&,N,V_assetToDownloadFromLastScan
assetToDownloadFromLastScanReleaseDate
T@"NSDate",&,N,V_assetToDownloadFromLastScanReleaseDate
managedDeviceManager
T@"SUManagedDeviceManager",&,N,V_managedDeviceManager
installPolicy
T@"SUInstallPolicy",&,N,V_installPolicy
T@"<SUManagerDelegate>",N,V_delegate
foreground
TB,N,GisForeground,V_foreground
isInstallTonight
TB,N,V_isInstallTonight
mandatoryUpdateDictionary
T@"NSDictionary",&,N,V_mandatoryUpdateDictionary
device does%@ have enough space for download
 not
Install Update Failed on AutoSU. Going to schedule retry
Added client: %@, count: %u
Removed client: %@, count: %u
isReadyToInstall (SUS) Returned NO
isReadyToInstall (SB) Returned NO
isReadyToInstall Returned YES
v20@?0B8@"NSError"12
Starting the server: keepAlive = %@
ENABLED
DISABLED
Starting the server.
SUMinimumLaunchTransaction
Notifying observers of start
Software update daemon continuing to run - transactions: %@
Software update daemon continuing to run - busy.
SUAddClientTransaction
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SoftwareUpdateServices_Sim/SoftwareUpdateServices-286.50.33/SUManagerServer_Daemon.m
Must be invoked on the main thread
SUClientMessagabilityChangedNotification
SUClientForegroundnessChangedNotification
v16@?0@"NSDictionary"8
com.apple.softwareupdateservicesd.wakeup
Trying to waking up client...: %@
Unable to wakeup client: %@
Client [%@:<%p>] - messagability changed: isMessagable? %@
Client [%@:<%p>] - foregroundness changed: isForeground? %@
Client <%p>:
            
type: %@
            
pid: %@
            
bundle ID: %@
            
application? %@
            
messagable? %@
            
foreground? %@
connection
T@"NSXPCConnection",R,N,V_connection
type
Ti,N,V_type
identifier
T@"NSString",R,N,V_identifier
Ti,R,N,V_pid
isApplication
TB,R,N,V_isApplication
isMessagable
TB,R,N,V_isMessagable
isForeground
TB,R,N,V_isForeground
proxy
T@"<SUManagerClientInterface>",R,D,N
Beginning transaction: %@%@
 (with keepAlive)
Ended transaction: %@
Keep alive status: %@
Enabled
Disabled
softwareupdateservicesd could not toggle keep alive status to launchd.
softwareupdateservicesd could not read keep alive status from launchd.
Saved SUAutoInstallOperation is expired
Last AutoInstall operation found
Unlock window passed. Firing unlock window timer manually
AutoSU disabled. Not scheduling AutoSU timers
AutoSU disabled for this update. Not scheduling AutoSU timers
Cancel
AutoSU consented
User consented during unlock window. Persisting stash
Window ending at %@, attempting to recheduling for date %@
Unlock window did begin
Auto install operation wants to begin
Ready to install timer fired, but operation model is nil
Ready to install timer fired, but operation was not agreed to
Could not install due to %@, retrying in 15 mins.
AutoInstallOperation expired
clearing autoInstallOperation for reason: %@
T@"<SUAutoInstallManagerDelegate>",N,V_delegate
operationModel
T@"_SUAutoInstallOperationModel",R,N,V_operationModel
T@"SUState",R,N,V_state
Connection completed successfully.
Connection failed with error: %@
Connection received redirect request to: %@
Connection received response: %d
Connection received %d bytes of data.
request
T@"NSURLRequest",&,N,V_request
data
T@"NSMutableData",&,N,V_data
response
T@"NSURLResponse",&,N,V_response
statusCode
Tq,N,V_statusCode
allowRedirects
TB,N,V_allowRedirects
SUActivationStatusResponse
SUActivationService
SUBackgroundTaskAgent
SUManagedDeviceManager
SUScanRequest
SUManager
SUKeybagInterfaceObserver
NSObject
SUNetworkObserver
SUManagedDeviceManagerDelegate
SUManagerServer
SUManagerServerInterface
SUManagerDelegate
SUAutoInstallManagerDelegate
SUManagerClientInterface
Daemon
SUManagerServerClient
SUTransactionManager
SUAutoInstallManager
SUManagerObserver
SUHttpOperation
NSURLConnectionDataDelegate
NSURLConnectionDelegate
v16@0:8
@16@0:8
B16@0:8
v20@0:8B16
v24@0:8@16
i16@0:8
v20@0:8i16
@"NSString"
@24@0:8^@16
@24@0:8@16
@32@0:8@16^@24
v40@0:8@16@24@32
v40@0:8@16r*24B32B36
v32@0:8r*16@24
@"SUManager"
@"SUAutoInstallManager"
B24@0:8@16
@"SUManagedDeviceUpdateDelay"
@"<SUManagedDeviceManagerDelegate>"
@?16@0:8
v24@0:8@?16
@"SUScanOptions"
@"SUDescriptor"
@"NSError"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v28@0:8@16B24
v28@0:8@"SUKeybagInterface"16B24
v24@0:8i16i20
v24@0:8@"SUManagedDeviceManager"16
B32@0:8@16^@24
v32@0:8@16@24
v36@0:8@16@24B32
v32@0:8@16@?24
v40@0:8@16@24@?32
B28@0:8B16^@20
B32@0:8B16B20^@24
B24@0:8^@16
v24@0:8^@16
@20@0:8B16
B20@0:8B16
i24@0:8@16
B32@0:8@16@24
v32@0:8@16q24
v28@0:8@16f24
v36@0:8@16f24d28
v32@0:8:16@24
B32@0:8^@16^B24
B36@0:8^@16B24^B28
v24@0:8Q16
B28@0:8@16B24
@"<SUManagerDelegate>"
@"SUState"
@"NSMutableArray"
@"MAAsset"
@"NSDate"
@"SUDownload"
@"SUOperationProgress"
@"NSTimer"
@"NSHashTable"
@"SUAutoInstallFailureNotification"
@"NSMutableDictionary"
@"SUManagedDeviceManager"
@"SUInstallPolicy"
@"NSDictionary"
v28@0:8B16@?20
v28@0:8i16@?20
v36@0:8@16B24@?28
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"SUScanOptions"16@?<v@?@"SUDescriptor"@"NSError">24
v32@0:8@"SUDownloadMetadata"16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"SUDownload"@"SUInstallPolicy"@"_SUAutoInstallOperationModel"@"NSError">16
v24@0:8@?<v@?@"NSNumber"@"NSError">16
v28@0:8B16@?<v@?@"_SUAutoInstallOperationModel"@"NSError">20
v32@0:8@"NSUUID"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v28@0:8i16@?<v@?B@"NSError">20
v24@0:8@?<v@?@"NSDate"@"NSError">16
v24@0:8@"NSDictionary"16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v36@0:8@"NSString"16B24@?<v@?B@"NSError">28
v24@0:8@"SUScanOptions"16
v40@0:8@"SUScanOptions"16@"SUDescriptor"24@"NSError"32
v32@0:8@"SUDescriptor"16@"NSError"24
v24@0:8@"SUDownload"16
v32@0:8@"SUDownload"16@"NSError"24
v32@0:8@"SUDownload"16@"SUInstallPolicy"24
v24@0:8@"SUDescriptor"16
v24@0:8@"SUInstallPolicy"16
v32@0:8@"SUAutoInstallManager"16@"_SUAutoInstallOperationModel"24
B36@0:8^@16B24^@28
v24@0:8@"NSUUID"16
B20@0:8I16
@"BKSApplicationStateMonitor"
@"NSXPCConnection"
@"NSMutableSet"
v32@0:8@"SUManager"16@"SUDownload"24
@28@0:8B16^@20
v24@0:8d16
@"<SUAutoInstallManagerDelegate>"
@"_SUAutoInstallOperationModel"
v32@0:8@"NSURLConnection"16@"NSError"24
B24@0:8@"NSURLConnection"16
v32@0:8@"NSURLConnection"16@"NSURLAuthenticationChallenge"24
B32@0:8@"NSURLConnection"16@"NSURLProtectionSpace"24
@40@0:8@16@24@32
@32@0:8@16@24
v48@0:8@16q24q32q40
@"NSURLRequest"40@0:8@"NSURLConnection"16@"NSURLRequest"24@"NSURLResponse"32
v32@0:8@"NSURLConnection"16@"NSURLResponse"24
v32@0:8@"NSURLConnection"16@"NSData"24
@"NSInputStream"32@0:8@"NSURLConnection"16@"NSURLRequest"24
v48@0:8@"NSURLConnection"16q24q32q40
@"NSCachedURLResponse"32@0:8@"NSURLConnection"16@"NSCachedURLResponse"24
v24@0:8@"NSURLConnection"16
q16@0:8
v24@0:8q16
@"NSURLConnection"
@"NSURLRequest"
@"NSMutableData"
@"NSURLResponse"
@44@0:8@16B24^@28^@36
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.softwareupdateservicesd</string>
<key>CFBundleName</key>
<string>${PRODUCT_NAME}</string>
<key>CFBundleExecutable</key>
<string>${EXECUTABLE_NAME}</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleVersion</key>
<string>1</string>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>allow-softwareupdated</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>identity</string>
</array>
<key>com.apple.appstored.private</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.keystore.device</key>
<true/>
<key>com.apple.keystore.lockassertion</key>
<true/>
<key>com.apple.keystore.stash.access</key>
<true/>
<key>com.apple.keystore.stash.persist</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.private.CacheDelete</key>
<array>
<string>SERVICE_REQUEST_ENTITLEMENT</string>
<string>DEMOTABLE_APPS_ENTITLEMENT</string>
<string>DEMOTE_APPS_ENTITLEMENT</string>
</array>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.VoiceServicesVocalizerVoice</string>
<string>com.apple.MobileAsset.VoiceServices.CustomVoice</string>
<string>com.apple.MobileAsset.VoiceServices.GryphonVoice</string>
<string>com.apple.MobileAsset.SoftwareUpdate</string>
<string>com.apple.MobileAsset.SoftwareUpdateDocumentation</string>
</array>
<key>com.apple.private.assets.change-daemon-config</key>
<true/>
<key>com.apple.private.kernel.darkboot</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.networkextension.configuration</key>
<true/>
<key>com.apple.security.system-container</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
</array>
<key>com.apple.wifi.manager-access</key>
<true/>
</dict>
</plist>
