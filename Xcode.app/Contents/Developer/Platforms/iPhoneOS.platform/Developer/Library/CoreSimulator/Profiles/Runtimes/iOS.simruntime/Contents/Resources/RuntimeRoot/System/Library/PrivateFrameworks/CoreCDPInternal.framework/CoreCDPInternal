%@ %@
timestamp
hasTimestamp
TB,N
TQ,N,V_timestamp
CDPDCircleStateObserver Event Queue
v12@?0i8
v32@?0@8Q16^B24
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
-[CDPDAccountRecoveryValidator confirmRecoveryKey:completion:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreCDP_Sim/CoreCDP-178/CoreCDPInternal/CDPDAccountRecoveryValidator.m
completion
_authProvider
v24@?0@"NSDictionary"8@"NSError"16
recoveredInfo
T@"NSDictionary",C,N,V_recoveredInfo
recoveryKey
T@"NSString",C,N,V_recoveryKey
v28@?0B8@"NSArray"12@"NSError"20
recoveryContext
T@"CDPDRecoveryFlowContext",&,N,V_recoveryContext
circleController
T@"CDPDCircleController",&,N,V_circleController
secureBackupController
T@"CDPDSecureBackupController",&,N,V_secureBackupController
uiProvider
T@"<CDPStateUIProviderInternal>",&,N,V_uiProvider
validator
T@"<CDPRemoteDeviceSecretValidatorProtocol>",&,N,V_validator
context
T@"CDPContext",&,N,V_context
hasPeersForRemoteApproval
TB,N,V_hasPeersForRemoteApproval
CDPDConnectionInvalidatedNotification
v8@?0
com.apple.cdp.daemon
com.apple.cdp.recovery
com.apple.cdp.statemachine
com.apple.cdp.utility
com.apple.cdp.followup
com.apple.cdp.recoverykey
com.apple.purplebuddy
com.apple.Preferences
listener
T@"NSXPCListener",&,N,V_listener
secretType
TQ,N,V_secretType
userDidCancel
TB,N,V_userDidCancel
userDidReset
TB,N,V_userDidReset
device
T@"CDPDevice",C,N,V_device
validSecret
T@"NSString",C,N,V_validSecret
shouldCompleteSignIn
cloudDataProtectionEnabled
errorDomain
errorCode
hasShouldCompleteSignIn
TB,N,V_shouldCompleteSignIn
hasCloudDataProtectionEnabled
TB,N,V_cloudDataProtectionEnabled
hasErrorDomain
TB,R,N
T@"NSString",&,N,V_errorDomain
hasErrorCode
Tq,N,V_errorCode
v24@?0@"CDPContext"8@"NSError"16
v24@?0@"CDPDRemoteSecretValidationResult"8@"NSError"16
v12@?0B8
v20@?0B8@"NSError"12
-[CDPDRecoveryValidatedJoinFlowController secretValidator:didFailRecovery:withError:completion:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreCDP_Sim/CoreCDP-178/CoreCDPInternal/CDPDRecoveryValidatedJoinFlowController.m
REMOTE_SECRET_ENTRY_FORGOT_CODE_DIALOG_RK
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_BUTTON_APPROVE
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_BUTTON_OK
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_BUTTON_RESET
GENERIC_CANCEL_BUTTON
v16@?0q8
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_TITLE
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_MESSAGE_SIGNIN
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_MESSAGE_NO_RESET
REMOTE_SECRET_ENTRY_MULTIPLE_INCORRECT_MESSAGE_RESET
REMOTE_SECRET_ENTRY_GLOBAL_LIMIT
RESET_CONFIRMATION_DIALOG_TITLE
RESET_CONFIRMATION_DIALOG_MESSAGE
RESET_CONFIRMATION_DIALOG_BUTTON_RESET
RESET_CONFIRMATION_DIALOG_TITLE_NO_RECOVERY
RESET_CONFIRMATION_DIALOG_MESSAGE_NO_RECOVERY
RESET_CONFIRMATION_DIALOG_BUTTON_RESET_NO_RECOVERY
hasSecretType
Tq,N,V_secretType
hasUserDidReset
pcsProxy
T@"<CDPProtectedCloudStorageProxy>",&,N,V_pcsProxy
CDP - SecureBackup account Info Fetch (async)
CDP - SecureBackup account Info Fetch
Fetched SecureBackup info
CDP - SecureBackup enable (async)
v16@?0@"NSError"8
CDP - SecureBackup enable
Enable secure backup
CDP - SecureBackup recovery (async)
CDP - SecureBackup recovery
Recover secure backup
CDP - SecureBackup disable (async)
CDP - SecureBackup disable
Disable secure backup
CDP - SecureBackup cache recovery key
CDP - SecureBackup uncache secrets
cdpContext
T@"CDPContext",&,N
T@"CDPContext",&,N,V_cdpContext
DeviceName
UserAssignedDeviceName
localizedRecoveryOption
T@"NSString",C,N,V_localizedRecoveryOption
recoveryHandler
T@?,C,N,V_recoveryHandler
recoveryOptionIndex
Tq,N,V_recoveryOptionIndex
isAuthenticationError
isAuthKitUnableToPromptDueToNetworkError
isAuthKitUnableToPromptError
AWDPostMetric
initAWDPostMetric
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreCDP_Sim/CoreCDP-178/CoreCDPInternal/AWDMetricReporter.m
softLinkAWDPostMetric
/System/Library/PrivateFrameworks/WirelessDiagnostics.framework/WirelessDiagnostics
WirelessDiagnosticsLibrary
frameworkLibrary
didJoin
TB,V_didJoin
needsBackupRecovery
TB,V_needsBackupRecovery
TB,V_hasPeersForRemoteApproval
hasPeersWithCDPBackupRecords
TB,V_hasPeersWithCDPBackupRecords
requiresEscrowRecordsFetch
TB,V_requiresEscrowRecordsFetch
requiresInitialSync
TB,V_requiresInitialSync
remotePeeriCKState
TQ,V_remotePeeriCKState
circleStatus
Ti,V_circleStatus
CDPChannelTTSURequestID
CDPChannelTTSUPayloadKey
CDPChannelTTSUPayloadBackupRecordsExistKey
CDPChannelTTSUPayloadiCloudKeychainEnabledKey
v28@?0i8@"NSDictionary"12@"NSDictionary"20
v32@?0@"NSDictionary"8@"NSDictionary"16@?<v@?i@"NSDictionary"@"NSDictionary">24
metadata
ClientMetadata
recordID
kSecureBackupEscrowedSPKIKey
success
hasSuccess
TB,N,V_success
B24@?0@"CDPDevice"8@"NSDictionary"16
v32@?0@"CDPDevice"8Q16^B24
v32@?0@"CDPDevice"8@"NSError"16^B24
recoveryRecords
T@"NSArray",&,N,V_recoveryRecords
resultParser
T@"<CDPDBackupRecoveryResultsParser>",&,N,V_resultParser
errorProvider
T@"<CDPDBackupRecoveryErrorProvider>",&,N,V_errorProvider
com.apple.cdpd.circleRequestQueue
CDP - SOSCCThisDeviceIsInCircle
v24@?0B8B12@"NSError"16
v24@?0@"CDPDCircleJoinResult"8@"NSError"16
B16@?0^@8
delegate
T@"NSObject<CDPDCircleDelegate>",W,N,V_delegate
circleProxy
T@"<CDPDCircleProxy>",&,N,V_circleProxy
v36@?0@"NSString"8Q16B24@"NSError"28
followUpProvider
T@"<CDPLocalSecretFollowUpProvider>",&,N,V_followUpProvider
v32@?0@"<CDPDAuthListener>"8Q16^B24
v24@?0@"NSString"8@"NSError"16
sbProxy
T@"<CDPDSecureBackupProxy>",&,N,V_sbProxy
recoveryAuthProvider
T@"<CDPAuthProviderInternal>",&,N,V_recoveryAuthProvider
internalAuthProvider
T@"<CDPDAuthProviderInternal>",&,N,V_internalAuthProvider
ICSC_ENTRY_MULTIPLE_INCORRECT_TITLE
ICSC_ENTRY_MULTIPLE_INCORRECT_MESSAGE
supportedEscapeOfferMask
TQ,N
isUsingMultipleICSC
TB,N,V_isUsingMultipleICSC
validSecretHandler
T@?,C,N,V_validSecretHandler
T@"<CDPDDeviceSecretValidatorDelegate>",W,N,V_delegate
TQ,N,VsupportedEscapeOfferMask
-[CDPDRecoveryKeyValidatorImpl confirmRecoveryKey:completion:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreCDP_Sim/CoreCDP-178/CoreCDPInternal/CDPDRecoveryKeyValidatorImpl.m
recoveryKeyVerified
TB,N,V_recoveryKeyVerified
device_name
device_model
device_model_version
device_model_class
device_color
device_enclosure_color
device_platform
device_mid
SecureBackupMetadataTimestamp
en_US_POSIX
dd-MM-yyyy HH:mm:ss
yyyy-MM-dd HH:mm:ss
v24@?0@"CDPDevice"8@"NSError"16
ForceRecoveryKeySupport
com.apple.corecdp
ForceUseCachedSecret
ForceCachedSecretPurge
v32@?0@"NSString"8Q16@"NSError"24
DSID
B24@?0@"ACAccount"8@"NSDictionary"16
v24@?0@"AKAnisetteData"8@"NSError"16
marketing-name
ProductType
DeviceColor
DeviceEnclosureColor
< REDACTED >
cachedAccountInfo
T@"NSDictionary",&,N,V_cachedAccountInfo
fakeNearlyDepletedRecords
TB,N,V_fakeNearlyDepletedRecords
secureBackupProxy
T@"<CDPDSecureBackupProxy>",&,N,V_secureBackupProxy
T@"<CDPDSecureBackupDelegate>",W,N,V_delegate
configuration
T@"CDPDSecureBackupConfiguration",&,N,V_configuration
T@"CDPContext",R,N,V_context
T@"<CDPStateUIProviderInternal>",R,N,V_uiProvider
userDisabledICK
hasDisabledKeychainExplicitly
OfflineLocalSecretChange
RepairCDPState
RegenerateCDPRecoveryKey
com.apple.cdp.repair.continue
com.apple.cdp.repair.recoverykey
com.apple.cdp.offlinesecret.continue
CONFIRM_SECRET_FOLLOWUP_ITEM_TITLE
CONFIRM_SECRET_FOLLOWUP_ITEM_INFORMATIVE
CONFIRM_SECRET_FOLLOWUP_NOTIFICATION_TITLE
CONFIRM_SECRET_FOLLOWUP_NOTIFICATION_INFORMATIVE
CONFIRM_SECRET_FOLLOWUP_NOTIFICATION_ACTIVATE_LABEL
TRUST_FOLLOWUP_ITEM_TITLE
TRUST_FOLLOWUP_NOTIFICATION_TITLE
TRUST_FOLLOWUP_ITEM_INFORMATIVE
TRUST_FOLLOWUP_NOTIFICATION_INFORMATIVE
SKIPPED_FOLLOWUP_ITEM_TITLE
SKIPPED_FOLLOWUP_ITEM_INFORMATIVE
SKIPPED_FOLLOWUP_NOTIFICATION_TITLE
SKIPPED_FOLLOWUP_NOTIFICATION_INFORMATIVE
TRUST_FOLLOWUP_NOTIFICATION_ACTIVATE_LABEL
RECOVERY_KEY_REPAIR_TITLE
RECOVERY_KEY_REPAIR_INFORMATIVE
RECOVERY_KEY_REPAIR_NOTIFICATION_TITLE
RECOVERY_KEY_REPAIR_FOLLOWUP_NOTIFICATION_INFORMATIVE
RECOVERY_KEY_REPAIR_FOLLOWUP_NOTIFICATION_ACTIVATE_LABEL
com.apple.CoreCDPUI.CDPFollowUpExtension
com.apple.notifyd.matching
v16@?0@"NSObject<OS_xpc_object>"8
com.apple.distnoted.matching
UserInfo
X-MMe-Client-Info
%@:%@
true
false
X-Apple-Account-Recovery
Basic %@
Authorization
ACCOUNT_RECOVERY_SOFT_LIMIT_REACHED_TITLE
ACCOUNT_RECOVERY_SOFT_LIMIT_REACHED_MESSAGE
GENERIC_ERROR_DEFAULT_BUTTON
ACCOUNT_RECOVERY_HARD_LIMIT_REACHED_TITLE
ACCOUNT_RECOVERY_HARD_LIMIT_REACHED_MESSAGE_GLOBAL
START_ACCOUNT_RECOVERY_BUTTON
ACCOUNT_RECOVERY_HARD_LIMIT_REACHED_MESSAGE_SINGLE
ACCOUNT_RECOVERY_HARD_LIMIT_REACHED_MESSAGE_MULTI
CDP - Handle CDP enroll
CDP - State repair
v16@?0@"NSNotification"8
CDP - Handle local secret change
CDP - Offline local secret change
hasCircleStatus
Tq,N,V_circleStatus
hasNeedsBackupRecovery
TB,N,V_needsBackupRecovery
hasHasPeersForRemoteApproval
FakeDepletedRecords
CDP - State machine run
v16@?0@"CDPStateHandlerResult"8
FakeRepairStateRequired
personID
CDPUI - Prompt for local secret
com.apple.cdp.async-enable-post-recovery
com.apple.cdp.async-enable
CoreCDP-user-elected
pcsController
T@"CDPDPCSController",&,N,V_pcsController
attemptedCDPEnable
TB,N,V_attemptedCDPEnable
TB,V_cloudDataProtectionEnabled
TB,V_shouldCompleteSignIn
peeriCloudKeychainState
TQ,V_peeriCloudKeychainState
error
T@"NSError",&,V_error
root
keychainCircleProxy
T@"<CDPKeychainCircleProxy>",&,N,V_keychainCircleProxy
secureChannelProxy
T@"<CDPSecureChannelProxy>",&,N,V_secureChannelProxy
https://setup.icloud.com/configurations/init?context=settings
urls
getRecoverySettings
escrowProxyUrl
iCloudEnv
com.apple.Dataclass.KeychainSync
com.apple.mobileme
CDPSecureBackupURLSession
en-us
Accept-Language
application/xml
Accept
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
localSecret
T@"NSString",C,N,V_localSecret
localSecretType
TQ,N,V_localSecretType
recoverySecret
T@"NSString",C,N,V_recoverySecret
silentRecovery
TB,N,V_silentRecovery
usePreviouslyCachedSecret
TB,N,V_usePreviouslyCachedSecret
circleJoinResult
T@"CDPDCircleJoinResult",&,N,V_circleJoinResult
REMOTE_SECRET_ENTRY_RECOVERY_ERROR_TITLE
GENERIC_ERROR_ICLOUD_CONNECTION_MESSAGE
v24@?0@"NSData"8@"NSError"16
v32@?0@"NSData"8^@16^@24
com.apple.icdp.corecdp.local-secret-changed
com.apple.icdp.corecdp.local-secret-removed
com.apple.icdp.corecdp.pcs-migration-succeeded
com.apple.icdp.corecdp.pcs-migration-failed
com.apple.icdp.corecdp.pcs-already-migrated
com.apple.icdp.corecdp.pcs-rollback-succeeded
com.apple.icdp.corecdp.pcs-rollback-failed
com.apple.icdp.corecdp.sign-in-failed.account-locked
com.apple.icdp.corecdp.sign-in-failed.incorrect-icsc-attempts
com.apple.icdp.corecdp.synctimeout
com.apple.icdp.corecdp.sign-in-succeeded.count
com.apple.icdp.corecdp.sign-in-succeeded.remote-approval
com.apple.icdp.corecdp.sign-in-succeeded.incorrect-icsc-attempts
com.apple.icdp.corecdp.sign-in-succeeded.user-skipped
com.apple.icdp.corecdp.sign-in-succeeded.user-reset
com.apple.icdp.corecdp.piggy.attempts
com.apple.icdp.corecdp.piggy.success-attempts
com.apple.icdp.corecdp.state-machine-started.buddy
com.apple.icdp.corecdp.state-machine-started.settings
com.apple.icdp.corecdp.account-locked
com.apple.icdp.corecdp.account-unlocked
v24@?0@"AKCircleRequestPayload"8@"NSError"16
eventHandler
T@?,C,V_eventHandler
CDPDNetworkObserver Event Queue
v32@?0@8@16^B24
description
dictionaryRepresentation
stringWithFormat:
dictionary
numberWithUnsignedLongLong:
setObject:forKey:
class
allocWithZone:
init
isMemberOfClass:
copyWithZone:
setTimestamp:
setHasTimestamp:
hasTimestamp
readFrom:
writeTo:
copyTo:
isEqual:
hash
mergeFrom:
timestamp
_timestamp
_has
alloc
dealloc
_notificationName
circleStatus:
observeCircleStateWithChangeHandler:
addObject:
circleViewStatusChanged
enumerateObjectsUsingBlock:
circleStatusChanged
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
eventReceived:eventValue:
eventReceived:eventInfo:
initWithProxy:
observeChangeToState:handler:
stopObservingCircleStatusChange
registerListener:
.cxx_destruct
_circleChangeToken
_isObserving
_eventQueue
_circleProxy
_circleObservers
setRecoveredInfo:
setRecoveryKey:
_cdpErrorFromAuthKitError:
cdpContext:verifyMasterKey:completion:
domain
isEqualToString:
code
confirmRecoveryKey:completion:
generateRecoveryKey:
initWithContext:authProvider:
recoveredInfo
recoveryKey
_authProvider
_context
_recoveredInfo
_recoveryKey
initWithUiProvider:delegate:circleProxy:
recoveryValidatorWithDevices:forMultipleICSC:withCompletionHandler:
beginInteractiveRecoveryForDevices:isUsingMultipleICSC:usingValidator:
retrieveInflatedDevices:
context
initWithContext:delegate:
setIsUsingMultipleICSC:
setValidSecretHandler:
count
setSupportedEscapeOfferMask:
hasPeersForRemoteApproval
copy
cdpContext:promptForRemoteSecretWithDevices:offeringRemoteApproval:validator:
objectAtIndexedSubscript:
hasNumericSecret
numericSecretLength
hasRandomSecret
cdpContext:promptForICSCWithIsNumeric:numericLength:isRandom:validator:
clearAccountInfoCache
useCircleInfoToUpdateNameForDevices:
getBackupRecordDevicesWithCompletion:
recoverSecureBackupWithContext:completion:
secretValidator:recoverSecureBackupWithContext:completion:
secretValidator:shouldContinueValidationAfterError:
secretValidatorWillAttemptRecovery
secretValidator:shouldAcceptRecoveryError:
secretValidator:didFailRecoveryWithErrors:completion:
secretValidator:didFailRecovery:withError:completion:
initWithContext:uiProvider:secureBackupController:circleProxy:
beginRecovery:
validator
setValidator:
recoveryContext
setRecoveryContext:
circleController
setCircleController:
secureBackupController
setSecureBackupController:
uiProvider
setUiProvider:
_validator
_recoveryFlow
_recoveryContext
_circleController
_secureBackupController
_uiProvider
setContext:
setHasPeersForRemoteApproval:
_hasPeersForRemoteApproval
initWithMachServiceName:
setDelegate:
resume
_connection:hasEntitlement:
_clientTypeForConnection:
_shouldAcceptNewConnectionWithEntitlements:
initWithConnection:entitlements:clientType:
setExportedInterface:
setExportedObject:
defaultCenter
postNotificationName:object:
setInvalidationHandler:
valueForEntitlement:
boolValue
processIdentifier
initWithBytes:length:encoding:
fileURLWithPath:
bundleWithURL:
bundleIdentifier
sharedInstance
listener:shouldAcceptNewConnection:
start
listener
setListener:
_listener
secretType
setSecretType:
userDidCancel
setUserDidCancel:
userDidReset
setUserDidReset:
device
setDevice:
validSecret
setValidSecret:
_userDidCancel
_userDidReset
_secretType
_device
_validSecret
numberWithBool:
numberWithLongLong:
setErrorDomain:
setShouldCompleteSignIn:
setHasShouldCompleteSignIn:
hasShouldCompleteSignIn
setCloudDataProtectionEnabled:
setHasCloudDataProtectionEnabled:
hasCloudDataProtectionEnabled
hasErrorDomain
setErrorCode:
setHasErrorCode:
hasErrorCode
shouldCompleteSignIn
cloudDataProtectionEnabled
errorDomain
errorCode
_errorCode
_errorDomain
_cloudDataProtectionEnabled
_shouldCompleteSignIn
objectForKeyedSubscript:
cdp_unarchivedRoot
machineID
setObject:forKeyedSubscript:
resultsDictionaryFromRecoveryResult:error:
idmsRecovery
passwordEquivToken
setPasswordEquivToken:
cdpContext:performSilentRecoveryTokenRenewal:
updateWithAuthenticationResults:
silentAuthenticationForContext:withCompletion:
reauthenticateUserWithCompletion:
_escapeOfferForDevices:remoteApproval:forMultipleICSC:
type
numberWithInteger:
supportsRecoveryKey
supportedEscapeOfferMask
resetAccountCDPState
cancelValidationWithError:
_showAccountResetConfirmationWithoutRecovery:
applyToJoinCircleWithJoinHandler:
cancelApplicationToJoinCircle
prepareCircleStateForRecovery
joinCircleAfterRecoveryWithCompletion:
isLoginHardLimit
cdpContext:beginRemoteApprovalWithValidator:completion:
_handleHardLimitErrorForCurrentContextWithDevice:completion:
isLoginSoftLimit
_handleSoftLimitErrorForCurrentContextWithDevice:completion:
_handleLimit:forDevice:completion:
_userInfoForLimit:withDevice:
mutableCopy
_fallbackRecoveryOptionWithCompletion:
_cancelRecoveryOptionWithCompletion:
_populateUserInfo:recoveryIndexHandlers:withRecoveryOption:
_accountResetRecoveryOptionWithCompletion:
_skipSignInRecoveryOptionWithCompletion:
_showEntryLimitError:withRecoveryOptionHandlers:defaultIndex:completion:
array
localizedRecoveryOption
recoveryHandler
numberWithUnsignedInteger:
_softLimitErrorBodyForDevice:
_entryLimitTitleForDevice:
_infoDictionaryWithTitle:andBody:
_hardLimitErrorBodyWithDevice:
builderForKey:
localizedString
setLocalizedRecoveryOption:
setRecoveryHandler:
_showAccountResetConfirmationWithCompletion:
cdpContext:showError:withDefaultIndex:withCompletion:
_entryLimitRecoveryKeyAvailableBodyForDevice:
_entryLimitResetAvailableBodyForDevice:
_entryLimitSignInBodyForDevice:
_entryLimitNoResetForRepairForDevice:
localSecretType
addSecretType:
localizedName
modelClass
addDeviceClass:
_resetDataErrorForCurrentContextWithRecoveryIndexMap:
arrayWithObjects:count:
numberWithInt:
_resetProtectedDataErrorUnrecoverable
remoteSecretValidator:applyToJoinCircleWithJoinHandler:
cancelRemoteSecretValidatorApplicationToJoinCircle:
_hardLimitUserInfoForDevice:
setHasSecretType:
hasSecretType
setHasUserDidReset:
hasUserDidReset
sessionWithCircleDelegate:session:error:
initialMessage:
processMessage:error:
isDone
proxyWithSession:error:
initiatingPayload:
processIncomingPayload:error:
isComplete
supportsInteractiveAuth
requiresInitialSync
_session
_delegate
_contextSetupDictionary
pcsRestoreLocalBackup:error:
checkiCDPStatusNetwork:withCompletion:
pcsSynchronizeKeysWithInfo:error:
_reauthenticateAndCheckiCDPStatusWithNetwork:completion:
isAuthenticationError
_checkiCDPStatusNetwork:withCompletion:
_getOrSetupIdentitySetRef:
pcsIdentitySetIsInICDPNetwork:options:error:
pcsIdentitySetIsInICDPLocal:error:
pcsAlreadyMigrated
pcsIdentityCreateWithInfo:error:
pcsIdentitySetCompanionInCircle:error:
pcsIdentitySetupWithInfo:error:
_enableCDPWithCompletion:
pcsIdentityMigrateToiCDPWithInfo:error:
pcsMigrationSucceeded
pcsMigrationFailed
_disableCDPWithCompletion:
pcsIdentityMigrateToStingrayWithInfo:error:
pcsRollbackSucceeded
pcsRollbackFailed
setupDictionaryWithContext:
initWithContext:pcsProxy:
recoverKeysWithCompletion:
recoverAndSynchronizeKeysWithCompletion:
isCloudProtectionEnabledLocally:
isCompanionInKeychainCircle:
enableCDPWithCompletion:
disableCDPWithCompletion:
pcsProxy
setPcsProxy:
_pcsProxy
_contextForPrimaryAccountSilentAuth
_authWithContext:completion:
_authContextForContext:
setShouldPreventInteractiveAuth:
setIsUsernameEditable:
authenticateWithContext:completion:
_contextForPrimaryAccount
dsid
stringValue
setDSID:
altDSID
setAltDSID:
appleID
setUsername:
primaryAccountAltDSID
primaryAccountUsername
silentAuthenticationForPrimaryAccountWithCompletion:
startMetricForEventName:
stopMetric:withAttributes:
_secureBackup
getAccountInfoWithInfo:completionBlockWithResults:
getAccountInfoWithInfo:results:
numberWithDouble:
enableWithInfo:completionBlock:
enableWithInfo:
logUnrecoverableError:
logRecoverableError:
recoverWithInfo:completionBlockWithResults:
recoverWithInfo:results:
disableWithInfo:completionBlock:
disableWithInfo:
cacheRecoveryKeyWithCompletionBlock:
uncachePassphrase
initWithContext:
accountInfoWithInfo:error:
disableWithInfo:error:
enableWithInfo:error:
recoverWithInfo:error:
cacheRecoveryKey:completionBlock:
uncacheAllSecrets
cdpContext
setCdpContext:
_cdpContext
_authContextFromCDPContext:
persistMasterKeyVerifier:context:completion:
cdpContext:persistMasterKeyVerifier:completion:
sharedConnection
isPasscodeSet
hasLocalSecret
serialNumber
deviceName
recoveryOptionIndex
setRecoveryOptionIndex:
_localizedRecoveryOption
_recoveryHandler
_recoveryOptionIndex
isAuthKitUnableToPromptError
userInfo
isAuthKitUnableToPromptDueToNetworkError
setSuccess:
error
circleStatus
setCircleStatus:
needsBackupRecovery
setNeedsBackupRecovery:
reportPiggyBackWithSuccess:error:
reportStateMachineCompletionShouldCompleteSignIn:cloudDataProtectionEnabled:error:
reportStateMachineLockAssertionWithError:
reportStateMachineEnableCDPResult:
reportStateMachineCircleJoinWithResult:error:
reportStateMachineRepairHSA2AuthWithError:
reportStateMachineRepairCircleAuth
reportStateMachineRecoveryWithSecretType:userDidReset:error:
unsignedIntegerValue
addEntriesFromDictionary:
errorWithDomain:code:userInfo:
isICSCRecoveryHardLimitError
isCoolDownError
isRecoveryPETHardLimitError
isRecoveryPETSoftLimitError
errorByExtendingUserInfoWithDictionary:
didJoin
setDidJoin:
hasPeersWithCDPBackupRecords
setHasPeersWithCDPBackupRecords:
requiresEscrowRecordsFetch
setRequiresEscrowRecordsFetch:
setRequiresInitialSync:
remotePeeriCKState
setRemotePeeriCKState:
_didJoin
_needsBackupRecovery
_hasPeersWithCDPBackupRecords
_requiresEscrowRecordsFetch
_requiresInitialSync
_circleStatus
_remotePeeriCKState
sharingChannel
initWithTemplate:
dictionaryWithObjects:forKeys:count:
integerValue
sendRequestID:options:request:responseHandler:
registerRequestID:options:handler:
activate
sendPayload:completion:
approverBackupRecordsExist
approveriCloudKeychainState
listenForPayloadsWithHandler:
setApproverBackupRecordsExist:
setApproveriCloudKeychainState:
_sharingSession
_approverBackupRecordsExist
_approveriCloudKeychainState
_sentInitialResponse
cancelApproveFromAnotherDevice
failedAttempts
signInSucceededWithIncorrectICSCAttemptCount:didUseRemoteApproval:
signInFailedDueIncorrectICSCAttempts
_decoratedDelegate
isAttemptingRecovery
validSecretHandler
delegate
approveFromAnotherDeviceWithCompletion:
supportedEscapeOfferMaskCompletion:
_requestToJoinCompletion
_isWaitingForRemoteApproval
initWithSecureBackupMetadataInfo:
setRecoveryStatus:
setCoolOffPeriod:
initWithSecureBackupRecordInfo:
setHasSuccess:
hasSuccess
success
_success
resultParser
allKeys
errorProvider
prevailingLocalSecretType
setPrevailingSecret:
recoveryStatus
predicateWithBlock:
filteredArrayUsingPredicate:
recordNotFoundErrorWithUnderlyingError:
verficationFailedErrorwithUnderlyingError:
supportsErrorPresentation
cdpContext:showError:withCompletion:
_recoveryListFromDevices:
cooldownErrorWithUnderlyingError:
handleSoftLimitError:completion:
setRecoveryRecords:
globalHardLimitError
handleHardLimitError:completion:
_updateRecordRecoveryStatusForRecordDictionary:
recordID
containsObject:
firstObject
globalHardLimitErrorWithRecord:
hardLimitErrorForRecord:
enumerateKeysAndObjectsUsingBlock:
beginRecoveryWithCompletion:
setResultParser:
setErrorProvider:
recoveryRecords
_resultParser
_errorProvider
_recoveryRecords
contextForController:
peerId
synchronizeCircleViews
stateMachineFailureDueToSyncFailure
removeThisDeviceFromCircle:
joinCircleIgnoringBackups:completion:
_joinCircleIgnoringBackups:completion:
_peerCount
_requestToJoinAndWaitForSuccessWithHandler:
circleController:secureBackupRecordsArePresentWithCompletion:
secureChannelContextForController:
initialize:
promptForCredentials:
joinCircle:
password
registerCredentialsFromContext:force:
cdpContext:promptForInteractiveAuthenticationWithCompletion:
peerCount
requestToJoinCircleAfterRestore:
resetCircleIncludingCloudKitData:cloudKitResetReasonDescription:withCompletion:
requestToResetCircle:
requestToResetCloudKitDataForReason:error:
_peerDeviceNamesByPeerID
countByEnumeratingWithState:objects:count:
objectForKey:
setLocalizedName:
peerDeviceNamesByPeerID
_requestToJoinWithObserver:completion:
requestToJoinCircle:
_requestCircleJoinWithObserver:requestBlock:completion:
_requestToJoinWithRequestBlock:completion:
peerID
joinCircleWithCompletion:
_requestToJoinAfterRestoreAndWaitForSuccessWithHandler:
circleProxy
setCircleProxy:
_circleJoinObserver
_requestSynchronizationQueue
setAppleID:
primaryAccountDSID
longLongValue
setDsid:
initWithContext:uiProvider:delegate:
length
followUpProvider
postRepairFollowUp
deleteLocalSecretChangeFollowUp
_handleCompletionStatus:
_localSecretChangedTo:secretType:completion:
_createContextForSecret:withCompletion:
_cdpStateMachine
_repairWithStateMachine:completion:
_collectLocalSecretWithCompletion:
shouldPerformRepairWithCompletion:
setLocalSecret:
setLocalSecretType:
didChangeLocalSecret
lock
unlock
checkAndRemoveExistingThenEnableSecureBackupRecordWithContext:completion:
didRemoveLocalSecret
postLocalSecretChangeFollowUp
set_alwaysCreateEscrowRecord:
repairCloudDataProtectionStateWithCompletion:
initWithAuthenticationResults:
setType:
_setContextWithAuthResults:
stashedPRK
initWithContext:uiProvider:
initWithContext:validSecretHandler:
cdpContext:promptForLocalSecretWithHandler:
backupRecordsArePresentWithCompletion:
circlePeerIDForSecureBackupController:
synchronizeCircleViewsForSecureBackupContext:
promptForAdoptionOfMultipleICSCWithCompletion:
promptForLocalSecretWithCompletion:
localSecretChangedTo:secretType:completion:
finishOfflineLocalSecretChangeWithCompletion:
setFollowUpProvider:
_followUpProvider
UTF8String
securityLevelChanged:
_authListeners
initWithContext:uiProvider:authProvider:
initWithContext:uiProvider:authProvider:circleProxy:secureBackupProxy:pcsProxy:
initWithContext:proxy:
recoveryKeyVerified
generateVerifierWithRcoveryKey:error:
cdpContext:presentRecoveryKeyWithValidator:completion:
disableRecoveryKeyWithCompletion:
cdpContext:promptForRecoveryKeyWithValidator:completion:
enableSecureBackupWithRecoveryKey:completion:
generateRecoveryKeyWithInfo:error:
enableBackupWithRecoveryKey:completion:
recoverState:
recoverAndSynchronizeStateWithServer:
generateNewRecoveryKey:
deleteRecoveryKey:
generateRandomRecoveryKey:
recoverDataUsingMasterKeyWithCompletion:
sbProxy
setSbProxy:
recoveryAuthProvider
setRecoveryAuthProvider:
internalAuthProvider
setInternalAuthProvider:
_pcsController
_sbProxy
_recoveryAuthProvider
_internalAuthProvider
_isFailedSecret:forDevice:
setRecoverySecret:
_handleMultiCSCRecoveryResults:type:secret:device:completion:
_attemptToRecoverWithRecoveryKey:completion:
isUsingMultipleICSC
_handleMultiCSCRecoveryFailureForDevice:recoveryError:secret:
remainingAttempts
removeObject:
_handleRecoveryFailureForFinalDevice:completion:
validateSecret:devices:type:withCompletion:
_attemptToRecoverDevice:withSecret:completion:
_performSingleiCSCRecoveryWithSecret:type:completion:
findMyiPhoneUUID
removeAllObjects
_handleDelegateValidationError:
_isInvalidICSCError:
setRemainingAttempts:
_failedSecretsForDevice:
_failedSingleICSCs
validateRecoveryKey:withCompletion:
_isAttemptingRecovery
_failedAttempts
_failedSecrets
_failedRecoveryKeys
_recoveryErrors
_depletedRemainingAttempts
_currentDevice
_isUsingMultipleICSC
_validSecretHandler
setRecoveryKeyVerified:
_recoveryKeyVerified
configurationWithContext:
accountInfoWithCompletion:
_accountInfo:
accountInfoFetchSetupDictionary
_sanitizedInfoDictionary:
_getBackupRecordDevicesIncludingUnrecoverableRecords:completion:
desiresAllRecords
fakeNearlyDepletedRecords
_dateWithSecureBackupDateString:
setRecordDate:
laterDate:
setHasRandomSecret:
localeWithLocaleIdentifier:
setLocale:
setDateFormat:
dateFromString:
timeZoneForSecondsFromGMT:
setTimeZone:
_enableSecureBackupWithContext:completion:
deleteSingleICSCBackupWithCompletion:
recordInfo
checkForExistingRecord:
checkForExistingRecordWithPeerId:completion:
checkForExistingRecordMatchingPredicate:completion:
_authenticatedEnableSecureBackupWithContext:completion:
authenticatedEnableSecureBackupWithRecoveryKey:error:
escrowAuthInfo
setUsePreviouslyCachedSecret:
localSecret
_clientMetadataWithSecretType:length:
usePreviouslyCachedSecret
_currentAnisetteData
archivedDataWithRootObject:requiringSecureCoding:error:
circleJoinResult
contextForStateRepair
postFollowUpItemForContext:error:
_disableThenEnableWithInfo:error:
_disableSecureBackup:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
accountPropertyForKey:
credentialForAccount:error:
credentialItemForKey:
anisetteDataWithCompletion:
_recoverBackupDictionaryWithContext:error:
_recoveryInfoDictionaryFromContext:
recoverySecret
isUsingMultipleiCSC
silentRecovery
_deleteAllBackupRecordsWithCompletion:
_deleteSingleICSCBackupWithCompletion:
_disableRecoveryKey:
synchronizeKeyValueStoreWithCompletion:
isEligibleForCDPWithCompletion:
enableSecureBackupWithContext:completion:
upgradeICSCRecordsThenEnableSecureBackupWithContext:completion:
deleteAllBackupRecordsWithCompletion:
disableSecureBackupWithCompletion:
cachedAccountInfo
setCachedAccountInfo:
setFakeNearlyDepletedRecords:
secureBackupProxy
setSecureBackupProxy:
configuration
setConfiguration:
_fakeNearlyDepletedRecords
_cachedAccountInfo
_secureBackupProxy
_configuration
primaryAppleAccount
setAccountProperty:forKey:
saveVerifiedAccount:error:
isICDPEnabledForDSID:checkWithServer:
hasDisabledKeychainExplicitly
setHasDisabledKeychainExplicitly:
isICDPEnabledForDSID:
followUpType
contextToIdentifierMap
_followUpForOfflineSecretChangeWithContext:
_followUpForRepairWithContext:
_followUpForRecoveryKeyRepairWithContext:
_baseFollowUpItemWithContext:
_offlineSecretChangeFollowUpAction
setActions:
notification
setActivateAction:
setFirstNotificationDelay:
setTitle:
setInformativeText:
setLabel:
setIdentifier:
_followUpActionForRepair
repairType
_followUpActionForRecoveryKeyRepair
setDisplayStyle:
setGroupIdentifier:
setUniqueIdentifier:
setExtensionIdentifier:
shouldNotify
setFrequency:
force
setForceDelivery:
setNotification:
identifierForContext:
followUpItemWithContext:
_localizedStringForKey:
_setupDarwinListener
_setupDistributedListener
sharedObserver
_eventListeners
setValue:forHTTPHeaderField:
dataUsingEncoding:
base64EncodedStringWithOptions:
currentDevice
serverFriendlyDescription
cdp_addAuthHeaderWithContext:
cdp_addClientInfoHeader
initWithClientIdentifier:machServiceName:delegate:
postFollowUpItem:error:
clearPendingFollowUpItemsWithUniqueIdentifiers:error:
setRepairType:
clearFollowUpWithContext:error:
_followUpController
_followUpFactory
_allowStateMachineAccess
stateMachineStartedFromClient:
set_useSecureBackupCachedPassphrase:
setSupportsSkipSignIn:
_startObservingConnectionStateForRepairWithStateMachine:
_removeObserver
handleCloudDataProtectionStateWithCompletion:
contextForPrimaryAccount
augmentWithCredentialsFromContext:
initWithContext:circleProxy:
startCircleApplicationApprovalServerWithContext:completion:
postFollowUpWithContext:completion:
addObserverForName:object:queue:usingBlock:
removeObserver:
_allowFollowUps
_allowDataRecovery
idmsMasterKeyRecovery
set_authProvider:
_performRecoveryWithContext:uiProvider:authProvider:errorProviuder:resultParser:secureBackUpController:completion:
keyChainSync
isUserVisibleKeychainSyncEnabled
setUserVisibleKeychainSyncEnabled:withCompletion:
keyChainSyncWithProxy:
removeNonViewAwarePeersFromCircleWithCompletion:
_allowRecoveryKey
preflightContext:
handleCloudDataProtectionStateWithContext:uiProvider:completion:
repairCloudDataProtectionStateWithContext:uiProvider:completion:
shouldPerformRepairForContext:completion:
recoverAndSynchronizeSquirrelWithContext:uiProvider:completion:
recoverSquirrelWithContext:uiProvider:completion:
localSecretChangedTo:secretType:context:uiProvider:completion:
finishOfflineLocalSecretChangeWithContext:uiProvider:completion:
generateNewRecoveryKeyWithContext:uiProvider:completion:
deleteRecoveryKeyWithContext:uiProvider:completion:
generateRandomRecoveryKeyWithContext:completion:
isICDPEnabledForDSID:checkWithServer:completion:
hasLocalSecretWithCompletion:
isUserVisibleKeychainSyncEnabledWithCompletion:
removeNonViewAwarePeersFromCircleWithContext:completion:
performRecoveryWithContext:uiProvider:authProvider:completion:
clearFollowUpWithContext:completion:
_allowUtilityAccess
_connection
_entitlements
_clientType
_notificationObject
setHasCircleStatus:
hasCircleStatus
setHasNeedsBackupRecovery:
hasNeedsBackupRecovery
setHasHasPeersForRemoteApproval:
hasHasPeersForRemoteApproval
lockWithError:
peeriCloudKeychainState
synchronizeKeychainViewSetWithOtherPeers:
matchKeychainViewState:
postNotificationName:object:userInfo:deliverImmediately:
isHSA2Account
stopWithAttributes:
signInCompleted
_handleCloudDataProtectionStateWithCompletion:
tryRegisteringCredentialsFromContext:
_enrollOrDisableCDPAfterEnabledStateVerified:
_handleiCDPStatusCheckError:completion:
_attemptCDPEnable:
_handlePreflightError:completion:
_preflightAccountStateWithContext:completion:
resultWithError:
resultWithCloudDataProtectionEnabled:shouldCompleteSignIn:error:
_handleJoinResult:completion:
_handleRecoveryResetRequestWithCompletion:
_recoverSecureBackupWithCircleJoinResult:completion:
_disableCloudDataProtectionWithCompletion:
_enableSecureBackupWithCircleJoinResult:completion:
successResult
_resetAccountCDPStateWithCompletion:
resultWithCloudDataProtectionEnabled:shouldCompleteSignIn:peeriCloudKeychainState:error:
_predicateForRecordUpgradeCheckIgnoringBottled
_alwaysCreateEscrowRecord
isFederatedAccount
_confirmCDPEligibilityWithCompletion:
_refreshAndAuthenticateWithContext:
_authenticatedShouldPerformRepairWithCompletion:
simplePublicKey
setPassword:
_authenticatedRepairCloudDataProtectionStateWithCompletion:
_performInteractivelyAuthenticatedRepair:
aa_primaryAppleAccount
accountProperties
_enableKVSForAccount:store:completion:
provisionedDataclasses
enabledDataclasses
setEnabled:forDataclass:
saveAccount:withCompletionHandler:
shouldAllowCDPEnrollment
cachedLocalSecret
_useSecureBackupCachedPassphrase
cachedLocalSecretType
_attemptBackupRecoveryWithLocalSecret:type:useCachedSecret:circleJoinResult:completion:
_handleInteractiveRecoveryFlowWithCircleJoinResult:completion:
setCachedLocalSecret:
setCachedLocalSecretType:
setSilentRecovery:
setCircleJoinResult:
_attemptBackupRecoveryByPromptingForRemoteSecretWithLocalSecret:localSecretType:useCachedSecret:circleJoinResult:completion:
_postRecoveryEnableSecureBackupWithContext:completion:
signInWithUserElectingResetProtectedData
signInWithUserSkippingFlow
cdpContext:promptForAdoptionOfMultipleICSC:
_predicateForRecordUpgradeCheck
pcsController
setPcsController:
attemptedCDPEnable
setAttemptedCDPEnable:
_attemptedCDPEnable
setPeeriCloudKeychainState:
setError:
_peeriCloudKeychainState
_error
initForReadingFromData:error:
decodeObjectOfClass:forKey:
name
reason
finishDecoding
userDidEnterValidSecret:type:
userDidCancelWithError:
_validationHandler
duplexSession
resumeContext
initWithChannel:dataProvider:circleProxy:
keychainCircleProxy
setKeychainCircleProxy:
secureChannelProxy
setSecureChannelProxy:
_keychainCircleProxy
_secureChannelProxy
configurationWithContext:andSession:
guestMode
_iCloudEnvironment
_escrowProxyURL
iCloudEnv
authToken
escrowURL
_escrowConfigurationBag
_setupConfigurationURLs
_escrowConfigurationBagFull
_fetchConfigurationDictionary
_fetchEscrowConfigurationBag
_escrowProxyConfigurationURL
_configurationRequestWithURLString:
URLWithString:
initWithURL:
_escrowProxyConfigurationURLRequest
_fetchConfigurationWithRequest:
_configurationInfoURLRequest
statusCode
propertyListWithData:options:format:error:
dataTaskWithRequest:completionHandler:
_configurationURLs
_escrowConfigurationURLs
defaultSessionConfiguration
initWithIdentifier:
set_appleIDContext:
sessionWithConfiguration:
_isThisDeviceInCircle
hasNonViewAwarePeers
viewMemberForAutofillPasswords:
_setKeychainSyncState:
_preflightCircleStatusWithCompletion:
_processAuthFailure:completion:
_defaultUserVisibleViewSet
setViewsWithEnableSet:disableSet:
removeNonViewAwarePeers:
anyPeerHasEnabledViewsInSet:error:
setWithObjects:
_silentRecovery
_usePreviouslyCachedSecret
_localSecret
_localSecretType
_recoverySecret
_circleJoinResult
_prevailingSecret
piggybackAttempt
piggybackSuccess
_processAndReplyWithMessage:completion:
primaryAccountSecurityLevel
_startListeningWithProxy:
beginTransaction
endTransaction
_secureChannelContext
contextForOfflinePasscodeChange
sharedAggregateDictionary
incrementKey:
setValue:forDistributionKey:
didLockAccount
didUnlockAccount
signInFailedDueToLockedAccount
_replyContextWithPakeData:
clientErrorCode
clientInfo
performCircleRequestWithContext:completion:
payload
replyPayload
setPayload:
setClientInfo:
eventHandler
setEventHandler:
_eventHandler
UUID
UUIDString
removeObjectForKey:
startObservingNetwork
_networkReachabilityDidChangeWithFlags:
addNetworkObserverWithEventHandler:
removeObserverWithToken:
_networkIsReachable
_clientsLock
_clientsByUUID
_networkReach
pairingChannelInitiator:
exchangePacket:complete:error:
pairingChannelAcceptor:
needInitialSync
_pairingChannel
_complete
AWDCoreCDPStateMachineRepairCircleAuth
NSCopying
CDPDCircleStateObserver
CDPDXPCEventListener
NSObject
CDPDAccountRecoveryValidator
CDPRecoveryKeyValidatorInternal
CDPDRecoveryFlowController
CDPDDeviceSecretValidatorDelegate
CDPDRecoveryFlowContext
CDPDXPCListener
NSXPCListenerDelegate
CDPDRemoteSecretValidationResult
AWDCoreCDPStateMachineCompletion
CDPDBackupIDMSResultsParser
CDPDBackupRecoveryResultsParser
Daemon
CDPDRecoveryValidatedJoinFlowController
CDPDRemoteDeviceSecretValidatorDelegate
AWDCoreCDPStateMachineRecovery
CDPPiggybackingPayloadProvider
CDPKeychainCircleProxy
CDPDPCSController
CDPAuthenticationHelper
CDPDSecureBackupProxyImpl
CDPDSecureBackupProxy
CDPDAuthProxyImpl
CDPDAuthProviderInternal
CDPDLocalDevice
CDPDRecoveryOption
AWDCoreCDPStateMachineLockAssertion
Authentication
AWDMetricReporter
SecureBackup
CDPDCircleJoinResult
CDPTTSUChannel
CDPSecureChannelProxy
CDPSecureChannelApprovingProxy
CDPDRemoteDeviceSecretValidator
AWDCoreCDPPiggyBack
CDPDBackupInfoRecoveryFlowController
CDPDCircleController
CDPDLocalSecretController
CDPDSecureBackupDelegate
CDPDCircleDelegate
CDPDAuthObserver
CDPDRecoveryKeyController
CDPDRecoveryKeyValidatorInternalDelegate
CDPDDeviceSecretValidator
CDPRemoteDeviceSecretValidatorProtocol
CDPDRecoveryKeyValidatorImpl
CDPDSecureBackupController
CDPDAccount
CDPDFollowUpFactory
CDPDXPCEventObserver
CDPDBackupFMIPResultsParser
CDPDBackupIDMSErrorProvider
CDPDFollowUpController
CDPDAuthListener
CDPDClientHandler
CDPDaemonProtocol
AWDCoreCDPStateMachineCircleJoin
CDPDStateMachine
CDPStateHandlerResult
Archive
CDPDLocalDeviceSecretHandler
CDPLocalDeviceSecretHandlerProtocol
CDPDSecureChannelContext
CDPDSecureBackupConfiguration
CDPDLockAssertion
CDPDKeychainSync
CDPDSecureBackupContext
CDPDBackupErrorProviderImpl
CDPDBackupRecoveryErrorProvider
CDPDSecureChannelController
CDPDLocalSecretFollowUpProviderImpl
CDPLocalSecretFollowUpProvider
AWDCoreCDPStateMachineRepairHSA2Auth
CDPDTelemetryController
CDPPiggybackingChannel
AWDCoreCDPStateMachineEnableCDP
CDPDNetworkObserverClient
CDPDNetworkObserver
CDPTTSUPayloadProvider
@24@0:8^{_NSZone=}16
v24@0:8Q16
v20@0:8B16
B16@0:8
@16@0:8
B24@0:8@16
v24@0:8@16
Q16@0:8
{?="timestamp"b1}
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8r*16Q24
v32@0:8r*16@24
v32@0:8r*16@"NSDictionary"24
@24@0:8@16
v16@0:8
r*16@0:8
v24@0:8@?16
v28@0:8i16@?20
@"NSObject<OS_dispatch_queue>"
@"<CDPDCircleProxy>"
@"NSMutableArray"
v32@0:8@16@?24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"NSString"@"NSError">16
@32@0:8@16@24
@"<CDPAuthProviderInternal>"
@"CDPContext"
@"NSDictionary"
@"NSString"
v40@0:8@16@24@?32
B32@0:8@16@24
B32@0:8@16^@24
v48@0:8@16@24@32@?40
v40@0:8@"CDPDDeviceSecretValidator"16@"CDPDSecureBackupContext"24@?<v@?@"NSDictionary"@"NSError">32
B32@0:8@"CDPDDeviceSecretValidator"16@"NSError"24
B32@0:8@"CDPDDeviceSecretValidator"16^@24
v40@0:8@"CDPDDeviceSecretValidator"16@"NSDictionary"24@?<v@?B@"NSError">32
v48@0:8@"CDPDDeviceSecretValidator"16@"CDPDevice"24@"NSError"32@?<v@?B@"NSError">40
@48@0:8@16@24@32@40
@36@0:8@16B24@?28
v36@0:8@16B24@28
@"<CDPRemoteDeviceSecretValidatorProtocol>"
@"NSObject<OS_os_activity>"
@"CDPDRecoveryFlowContext"
@"CDPDCircleController"
@"CDPDSecureBackupController"
@"<CDPStateUIProviderInternal>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
B24@0:8Q16
Q24@0:8@16
@"NSXPCListener"
@"CDPDevice"
v24@0:8q16
q16@0:8
{?="errorCode"b1"timestamp"b1"cloudDataProtectionEnabled"b1"shouldCompleteSignIn"b1}
@32@0:8@16^@24
@"NSDictionary"32@0:8@"CDPDRemoteSecretValidationResult"16^@24
v32@0:8@"CDPDRemoteDeviceSecretValidator"16@?<v@?B@"NSError">24
v24@0:8@"CDPDRemoteDeviceSecretValidator"16
Q32@0:8@16B24B28
v40@0:8Q16@24@?32
v40@0:8@16@24@32
@32@0:8Q16@24
@24@0:8@?16
v48@0:8@16@24q32@?40
{?="errorCode"b1"secretType"b1"timestamp"b1"userDidReset"b1}
@24@0:8^@16
@"NSData"24@0:8^@16
@"NSData"32@0:8@"NSData"16^@24
@"KCJoiningRequestCircleSession"
@"KCJoiningRequestAccountCircleDelegate"
v28@0:8B16@?20
B24@0:8^@16
^{_PCSIdentitySetData=}24@0:8^@16
@"<CDPProtectedCloudStorageProxy>"
@24@0:8@"CDPContext"16
@"NSDictionary"32@0:8@"NSDictionary"16^@24
B32@0:8@"NSDictionary"16^@24
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSError">24
@"CDPContext"16@0:8
v24@0:8@"CDPContext"16
v40@0:8@"CDPContext"16@"NSDictionary"24@?<v@?B@"NSError">32
@?16@0:8
{?="errorCode"b1"timestamp"b1}
v28@0:8B16@20
v32@0:8B16B20@24
v32@0:8@16@24
v36@0:8q16B24@28
i16@0:8
v20@0:8i16
v32@0:8@"NSData"16@?<v@?@"NSData"@"NSError">24
v24@0:8@?<v@?@"NSData"^@^@>16
@"CUMessageSession"
{?="errorCode"b1"timestamp"b1"success"b1}
@"<CDPDBackupRecoveryResultsParser>"
@"<CDPDBackupRecoveryErrorProvider>"
@"NSArray"
@40@0:8@16@24@32
v36@0:8B16@20@?28
v32@0:8@?16@?24
v40@0:8@16@?24@?32
@"CDPDCircleStateObserver"
@"NSObject<CDPDCircleDelegate>"
@"NSString"24@0:8@"CDPDSecureBackupController"16
B24@0:8@"CDPDSecureBackupContext"16
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?@"NSString"Q@"NSError">16
v32@0:8@"CDPDCircleController"16@?<v@?BB@"NSError">24
@"CDPContext"24@0:8@"CDPDCircleController"16
@"CDPDSecureChannelContext"24@0:8@"CDPDCircleController"16
v40@0:8@16Q24@?32
@"<CDPLocalSecretFollowUpProvider>"
@"NSString"32@0:8@"NSDictionary"16^@24
@64@0:8@16@24@32@40@48@56
@"CDPDPCSController"
@"<CDPDSecureBackupProxy>"
@"<CDPDAuthProviderInternal>"
v48@0:8@16@24Q32@?40
v48@0:8@"NSString"16@"NSArray"24Q32@?<v@?BB@"NSError">40
v32@0:8@"NSString"16@?<v@?BB@"NSError">24
v24@0:8@"NSError"16
v24@0:8@?<v@?Q>16
v56@0:8@16Q24@32@40@?48
@"NSMutableDictionary"
@"NSMutableSet"
@"<CDPDDeviceSecretValidatorDelegate>"
@"<CDPDRecoveryKeyValidatorInternalDelegate>"
@32@0:8Q16Q24
@"<CDPDSecureBackupDelegate>"
@"CDPDSecureBackupConfiguration"
B28@0:8@16B24
@"FLFollowUpController"
@"CDPDFollowUpFactory"
v36@0:8@16B24@?28
v40@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@?<v@?BB@"NSError">32
v32@0:8@"CDPContext"16@?<v@?B@"NSError">24
v40@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@?<v@?B@"NSError">32
v56@0:8@"NSString"16Q24@"CDPContext"32@"<CDPStateUIProviderInternal>"40@?<v@?B@"NSError">48
v32@0:8@"CDPContext"16@?<v@?@"NSString"@"NSError">24
v36@0:8@"NSString"16B24@?<v@?B>28
v24@0:8@?<v@?B>16
v28@0:8B16@?<v@?B@"NSError">20
v48@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@"<CDPAuthProviderInternal>"32@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"CDPFollowUpContext"16@?<v@?B@"NSError">24
@40@0:8@16Q24Q32
v72@0:8@16@24@32@40@48@56@?64
@"NSXPCConnection"
{?="circleStatus"b1"errorCode"b1"timestamp"b1"hasPeersForRemoteApproval"b1"needsBackupRecovery"b1}
v52@0:8@16Q24B32@36@?44
@32@0:8B16B20@24
@40@0:8B16B20Q24@32
@"NSError"
v32@0:8@16Q24
v32@0:8@"NSString"16Q24
@32@0:8@16@?24
@"<CDPKeychainCircleProxy>"
@"<CDPSecureChannelProxy>"
@"NSURLSession"
B20@0:8B16
@"CDPDCircleJoinResult"
@32@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24
@"NSError"24@0:8@"NSError"16
@"NSError"16@0:8
@"NSError"24@0:8@"CDPDevice"16
v32@0:8@"NSError"16@?<v@?@"NSError">24
@"CDPDSecureChannelContext"
v28@0:8Q16B24
v20@0:8I16
@"NSLock"
^{__SCNetworkReachability=}
@"KCPairingChannel"
"Initialized %@"
"Deallocated %@"
"%@ started observing state"
"Error checking circle status (%i) after observing kSOSCCCircleChangedNotification - %@"
"Circle state is %i after observing kSOSCCCircleChangedNotification (observer %p)"
"Circle observer ignoring: %s"
"%@ : Confirming recovery key"
"%@ : recovery failed with error %@"
"Programming error detected! File a radar!"
"CDPDRecoveryFlowController deallocated"
cdp: Recovery Flow
"Recovery flow failed due to device inflation error. %@"
"Requesting UI provider prompt for a remote device secret from one of %lu devices (offeringRemoteApproval=%i)"
"Requesting UI provider prompt for an ICSC isNumeric=%i numericLength=%@"
"Fetching backup record devices"
"Failed to fetch backup record devices: %@"
"Received new connection %@, checking entitlements..."
"CDP client connection invalidated: %@"
"Accepting new connection %@ with entitlements mask %i"
"Denying new connection %@"
"Client is Purple Buddy"
"Client is Preferences"
"Unknown client type with bundleID '%@'"
"Parsed a MID"
"Parsed a PRK"
"Attempting silent re-authentication..."
"Renew request completed! Error: %@"
"Silently re-fetched recovery token"
"Silent re-authentication succeeded"
"Silent re-authentication failed: %@"
"Context Type: %@"
"Escape available: other devices"
"Escape available: remote approval"
"Escape available: account reset"
"Escape available: skip flow"
"Escape available: recovery key"
"User attempted to sign in after burning out all recovery options, present hard limits"
"CDPDRemoteDeviceSecretValidatorDelegate applying to join circle"
"CDPDRemoteDeviceSecretValidatorDelegate cancelling application to join circle"
cdp: Post Recovery Circle Join
"Non-terminating error detected, with retry option: %@"
"Starting handling hard limit error..."
"Starting handling soft limit error..."
"Attempting to fallback recovery options..."
"Creating recovery option: Recovery Key"
"Creating recovery option: Remote Approval"
"No fallback available"
"Creating recovery option: Skip"
"Creating recovery option: Reset"
"User elected to Reset Encrypted Data, confirming..."
"Creating recovery option: Cancel"
"Attempting to preset alert (using: %@) for error: %@"
"User responded to presented alert with option: %@"
"Prompting user for Reset confirmation"
"Reset confirmation prompt came back with: %@"
"Creating a piggybacking data provider with session: %@"
"Starting to recover PCS state"
"PCS State restored %@ with error: %@"
"Starting to synchronize PCS state"
"PCS State synchronized %@ with error: %@"
"Silent auth requested prior to checking CDP state"
cdp: internal status check
"Checking iCDP State. Networked: %@"
"PCSIdentitySetIsICDPNetwork returned isEnabled=%i error=%@"
"Checking local iCDP state..."
"Checking companion circle state..."
"PCSIdentityCreate return NULL with error: %@"
"PCSIdentitySetup returned NULL with error: %@"
"PCS Identity fetched"
"Re-authenticating on error from enableCDPWithCompletion: %@"
"Re-authenticating on error from disableCDPWithCompletion:"
cdp: disabling data protection
cdp: Re-authentication
"%s took: %@"
"Failed to enable SecureBackup: %@"
"SecureBackup enabled"
"Failed to disable SecureBackup with error %@"
"Disabled SecureBackup!"
"Attempting to update recovery key cache..."
"Failed to cache recovery key with error: %@"
"Recovery key cache updated"
"Attempting to persist verifier: %@ for %@"
"Managed config (%@) reports isPasscodeSet=%i"
"Reporting current serial number: %@"
"Response received: %@"
"Starting to listen for initiating payload..."
"Payload received from requestor: %@"
"Sending response to requestor: %@"
"Attempting to join the circle using remote approval..."
"Circle join was approved from another device"
"Ignoring circle state change because a recovery is in progress"
"Ignoring circle state change because we're not supposed to be waiting for remote approval"
"Failed to request circle join approval from another device - %@"
"Fetching decorated delegate: %@"
"resetAccountCDPState was called"
"Failed to recover data dictionary: %@"
"Parsing recovered data: %@"
"Recovered data dictionary with keys: %@"
"Circle status before attempting recovery is %i"
"Circle state changed to a state other than pending, proceeding with recovery"
"Attempting to remove self from circle to break pending status"
cdp: circle join
"Circle join requested, but we are already in circle!"
"Circle has peers for remote approval"
"Circle does NOT have peers for remote approval"
"Falling back to recovery based circle flows..."
"Can't join circle, failed to check for presence of secure backup records: %@"
"Circle status is kSOSCCCircleAbsent and backups are NOT present... Trying to create and join the circle"
"Circle resume failed, re-authentication requested!"
"Failed to resume session: %@, start to fall back..."
"Secure channel worked, we joined the circle..."
"Failed to initialized secure channel with error: %@, starting to fall back..."
"UI provider failed to perform interactive authentication for repair with error %@"
"Circle join request succeeded after backup recovery"
"Circle status after successful request to join is %i"
"Circle status changed kSOSCCInCircle"
"Circle status is now %i (waiting for kSOSCCInCircle or kSOSCCRequestPending)"
"Failed to request circle join after restore with error %@"
"Attempting to reset and join new circle after recovery succeeded but resulted in a pending circle join..."
"Resetting circle after join attempt following recovery resulted in pending..."
"Circle reset successfully, attempting to join/create"
"Failed to reset: %@"
"Pending application state was resolved immediately after calling remove"
"Pending application state was not resolved immediately after calling remove... waiting to see state != Pending"
"Pending application state was resolved!"
"Updating device name for %@ to '%@' based on circle info"
"Requesting to join circle with handler"
"Request made, but we were already in circle, completing..."
"Successfully joined the circle"
"Failed to apply to circle: %@"
"CDPDLocalSecretController dealloc"
"Updating context for local secret change"
"Have local secret, attempting to enable secure backup"
"Successfully updated local secret by re-enabling SecureBackup"
"Failed to update local secret by re-enabling SecureBackup"
"No secret, no follow up"
"Failed to silently update local secret, starting repair"
@"Failed to reauthenticate before updating local secret"
"Refreshing context for input: (%@) - %@ - %@"
"Enabling backup, but we are missing a PRK, force interaction to get one"
"Refreshing context with PET"
"Prompting user to enter local secret..."
"Got peer id: %@ from %@"
"Detected security level change for %@"
"Auth observer ignoring non-primary account event"
"Auth observer ignoring: %s"
cdp: pcs recover
cdp: pcs synchronize
cdp: recovery key generation
"Invalid context, assuming no primary account available"
"Recovery key UI flow completed with %d - %@"
"Recovery Key verified!"
"Failed to persist RK verifier: %@"
cdp: recovery key deletion
"Failed to persist verifier: %@"
"CDPDRecoveryKeyController %p deallocated"
"Multiple-ICSC secret is known to be bad, skipping validation"
"Recovery delegate rejected recovery with error. %@"
"Recovery key is known to be bad, skipping validation"
"Set _isAttemptingRecovery to suppress acting on change in circle state"
"Remaining attempts: %@"
"Depleted remaining attempts for multiple-iCSC entry (%@)"
"Un-set _isAttemptingRecovery to resume acting upon circle changes after failed multiple iCSC recovery"
"Redirecting error to the delegate"
"Delegate finished handling the error and returned: %@"
"Reaching out to the delegate for error handling"
"Unsupported delegate"
"cancelValidationWithError was called"
"Event handled, skipping call to valid secret handler"
"Un-set _isAttemptingRecovery to resume acting upon circle changes after failed single iCSC recovery"
"Exceeded maximum attempts for iCSC entry"
"Key mismatch detected"
"%@ : Generating recovery key"
"Using cache account info"
"Re-authenticating after error calling accountInfoWithCompletion: %@"
"Clearing account cache..."
cdp: Fetching Account Info
"Fetching account info with %@"
"Failed to check for secure backup records: %@"
"backupRecordsArePresentWithCompletion got account info %@"
"Secure backup hasSingleICSCBackup=%@ hasMultipleICSCBackups=%@"
"getBackupRecordDevicesWithCompletion: called, fetching account info from SecureBackup"
"SecureBackup returned error %@"
"**** DEBUG **** Setting fake remaining attempts value of 1 for %@"
"Disqualified device %@ because the remaining attempts is %lu"
"Backup record found for device %@ with date %@ (%@)"
"Backup record date %@ is later than the previously known newest record (%@), promoting %@ as newest device record"
"Finished parsing multiple-iCSC records and found the newest record to be %@"
"Found a single-iCSC metadata record. Returning that as a faux-device using %@"
"No single-iCSC metadata record is present"
"Finished parsing backup records, returning %lu devices and isUsingMultipleICSC=%i"
"Already using multiple ICSC, no need to prompt for adoption"
"Single ICSC record deleted, proceeding with enable of secure backup"
"Failed to delete single-ICSC backup while attempting to enable secure backup: %@"
"Single ICSC that is complex or random and not using multiple ICSC, prompting for adoption..."
"Accepted multiple ICSC, deleting old record..."
"Single ICSC that is NOT random or complex, deleting old record and enabling multiple-ICSC"
"Calling enable without delete due to existing record metadata being present"
"No existing backup record found, continuing with enable"
"Checking if the peer has a secure backup: %@"
"Check for existing backup failed with error: %@"
"Found %@ matching devices"
"Forcing recovery key support by preference (com.apple.corecdp: ForceRecoveryKeySupport)"
"Re-authenticating after error from authenticatedEnableSecureBackupWithSecret: %@"
"Re-authenticating after error from authenticatedEnableSecureBackupWithRecoveryKey: %@"
cdp: Enabling Secure Backup - RK
"Attempting to enable SecureBackup with recovery key using info %@"
cdp: Enabling Secure Backup
"Forcing use of cached secret by preference (com.apple.corecdp: ForceUseCachedSecret)"
"Forcing purge of cached secret by preference (com.apple.corecdp: ForceCachedSecretPurge)"
"Failed to escrow account recovery data due to missing MID"
"Failed to escrow account recovery data due to missing recovery token"
"Posting followup for failed async path.)"
"Failed to enable SecureBackup because no cached secret was present when expected... prompting user to enter local secret"
"Attempt to enable Secure Backup again now that we have the local secret"
"Failed to get local secret"
"Failed to enable SecureBackup with error %@"
"Enabled SecureBackup!"
"Attempting to enable SecureBackup with validated local secret using info %@"
"Failed to enable due to existing record, disabling and trying again"
cdp: disable -> enable record
"Fetching PRK for %@"
"Found the right acount: %@"
"Escrowing a previously backed up PRK"
"Something went wrong... (%@) could not find a stashed token for context: <%@ : %@>"
"Failed to fetch Anisette data! Error: %@"
cdp: Recovery Backup
"Attempting to recover SecureBackup secret from device %@ using info %@"
"Recovery error had additional info: %@"
"Failed to recover SecureBackup with error %@"
"Recovered SecureBackup"
"Re-authenticating after error from _deleteAllBackupRecordsWithCompletion: %@"
cdp: Deleting all records
"Attempting to delete all SecureBackup records with info %@"
"Error attempting to delete all backup records %@"
"Re-authenticating after error from _deleteSingleICSCBackupWithCompletion: %@"
"Deleting existing single-iCSC backup..."
"Failed to delete existing single-iCSC backup: %@"
"Existing single-iCSC backup deleted successfully"
"No existing single-iCSC backup found to delete"
"Failed to get account info while deleting single-iCSC backup: %@"
"Re-authenticating after error from _disableSecureBackupWithCompletion: %@"
cdp: Disabling Backup
"Attempting to disable SecureBackup with info %@"
"Failed to disable SecureBackup because no local peerID could be found"
"Re-authenticating after error from disableRecoveryKeyWithCompletion: %@"
"Attempting to disable recovery key with info %@"
"Disabled recovery key!"
"Failed to disable recovery key"
"User previously disabled iCK: %@"
"User disabled iCloud keychain: %@"
"Failed to set user preference for iCloud keychain disable: %@"
"Error calling PCSIdentitySetIsICDP: %@"
"Failed to call PCSIdentitySetIsICDP: %@"
"Starting to listen for XPC events..."
"Darwin XPC event stream handler called: %s"
"XPC event value is: %llu"
"Notifying listener %@ of %s"
cdp/xpc-event
"Distributed XPC event stream handler called: %s"
"User Info: %@"
"Failed to add auth header"
cdp: post follow up
"Processing request for context: %@"
cdp: clear follow up
"Clearing a follow up: (%@) - %@"
"Denying access to state machine. Missing entitlement."
"Cannot enable cloud data protection silently. Missing uiProvider."
"Starting state machine..."
"Forcing _useSecureBackupCachedPassphrase=YES for iOS Buddy on a device with a local secret present"
"State machine completed shouldCompleteSignIn=%@ cloudDataProtectionEnabled=%@ error=%@"
"Starting state repair..."
"State machine repair completed didRepair=%@ error=%@"
"Denying access to state repair. Missing entitlement."
"Starting accepting side server..."
"Approving TTSU attempted without primary iCloud account, failing..."
"CDP flow interrupted"
"Checking whether repair should be performed on the CDP state..."
"State machine status check completed shouldRepair=%@ error=%@"
"Denying access to state machine. Missing entitlements"
"Handing change in local secret..."
"State machine finished handling local secret change with didUpdate=%@ error=%@"
"Finishing offline local secret change..."
"Updated local secret after offline change"
"Failed to update local secret after offline change: %@"
"Attempting to clear a follow up: %@"
"Denying access to cleraing follow ups. Missing entitlement."
"Attempting to post a follow up: %@"
"Denying access to posting follow ups. Missing entitlement."
"Initiating info recovery"
"Denying access to back up data. Missing entitlements"
"info recovery completed with error: %@"
"Denying access to recovery key operation. Missing entitlement."
"Denying access recovery key operation. Missing entitlement."
"**** DEBUG **** Fake nearly depleted records mode is ENABLED"
"CDPDStateMachine %p deallocated"
cdp: Handling Cloud Data Protection State
"State machine %@ is starting..."
"Successfully took device lock assertion or assertion already taken, proceeding with state machine"
"State machine %@ finished"
"Make sure device is unlocked before calling handleCloudDataProtectionStateWithCompletion:"
cdp: State Machine Run
"Starting preflight of account..."
"Preflight finished with shouldProceed=%i error=%@"
"Credential was provided, attempting to register..."
"Failed to register credentials with Security, lets try again..."
"Credential was not provided or we are not HSA2... moving on!"
"Checking iCDP status..."
"Finished checking iCDP status with isEnabled=%i error=%@"
cdp: enrollment
"iCDP is enabled on HSA2 account, attempting to join circle..."
"Attempting to RECOVER backup"
"Finished recovering backup with didRecover=%i didRequestReset=%i error=%@"
"Failed to join circle and recovery is not needed, aborting (error as %@)"
"iCDP is enabled, but the account is not HSA2 enabled. Rolling back iCDP enrollment..."
"Failed to disable iCDP on non-HSA2 account. Disallowing sign-in: %@"
"Hold on to your hats. User has requested a CDP reset."
"CDP reset succeeded, attempting to join/create the circle again"
"Joined circle after CDP reset. Enabling secure backup..."
"Finished enabling secure backup after CDP reset with didEnable=%i error=%@..."
"Joined circle after CDP reset. Skipping secure backup because we don't have a secret"
"CDP reset failed, can not proceed: %@"
"Enabling secure backup..."
"Finished enabling secure backup with didEnable=%i error=%@..."
"Device is in circle but has no local secret or already has a secure backup enabled, skipping secure backup enable"
cdp: Handling circle join event
"Checking for existing records before enabling secure backup..."
"Account preflight failed with error, aborting CDP state machine - %@"
cdp: Enabling iCDP
"Attempting to enable iCDP..."
"Finished enabling iCDP with didEnable=%i error=%@"
"Not eligible for iCDP - %@"
"Enabling iCDP has already been attempted, but checking the status reports iCDP is still not enabled. Aborting."
"iCDP is not enabled, but the account is not HSA2 enabled"
"**** DEBUG **** Fake that we must repair"
"Missing PET, starting to re-authenticate"
"Failed to refresh context: %@"
"non-HSA2 account detected, skipping validation"
"We are in circle and have secure backup with machine id and we are bottled, repair not needed"
"Local device does not have local secret and is already in circle, repair not needed"
"HSA2 account that is not in circle, suggesting repair needed"
"Starting silent authentication for repair"
"Failed to perform silent authentication for repair with error %@"
"Refreshing with context"
cdp: Preflight
"Failed to enable KVS with error %@"
"Account preflight failed - Primary account DSID (%@) does not match the DSID specified in the context (%@)"
"Account preflight failed - No primary account is present"
"Found primary account, isProvisionedForKVS=%i"
"Enabling KVS..."
"Finished enabling KVS with success=%i error=%@"
"KVS is already enabled!"
"KVS is not provisioned for account %@"
"Enabling iCDP on sign-in is disabled"
cdp: Backup Recovery
"Attempting to recover backup using the cached local secret..."
"Finished recovery attempt using the cached local secret with didRecover=%i didRequestReset=%i error=%@"
"Failed to recover SecureBackup because no UI provider is present to request the local and/or remote device secrets"
cdp: Prompting for local secret
"Proceeding with backup recovery attempt now that the local secret is known..."
"Finished backup recovery attempt with the user-provided local secret with didRecover=%i error=%@"
"Failed to get a local device secret from the UI provider with error %@"
"Prompting for local secret before recovering backup"
"Proceeding with backup recovery attempt without a local device secret"
"Finished backup recovery attempt without local secret with didRecover=%i error=%@"
cdp: Recovery with secret
"Attempting SILENT recovery with the local secret..."
"Silent recovery failed, attempting to recover by prompting for remote secret"
"Attempting to enable secure backup after successful SILENT recovery"
"Finished enabling secure backup after successful SILENT recovery with didEnable=%i error=%@"
"Local secret is not present, proceeding to recovery by prompting for remote secret"
cdp: Interactive Recovery
"Attempting to enable secure backup after successful INTERACTIVE recovery with multiple-ICSC already in use"
"Finished enabling secure backup after successful INTERACTIVE recovery with didEnable=%i error=%@"
"Skipping enable of SecureBackup after successful INTERACTIVE recovery due to no local secret being present"
"User cancelled remote device secret entry"
"User requested reset of their CDP state!"
"Error prompting user for remote device secret - %@"
"Finished asynchronous enabling Secure Backup"
"Attempting to enable secure backup using the cached secret"
"Finished enabling secure backup using the cached secret with didEnable=%i error=%@"
"Got a valid local secret, attempting to enable secure backup"
"User cancelled local device secret entry"
"Error prompting user for local device secret - %@"
"Asking the UI provider to prompt for the local device secret"
"Failed to enable SecureBackup because no UI provider is present to request the local device secret"
"Failed to delete all backup records with error %@"
"Disabling iCDP..."
"Disabled iCDP, proceeding with deleting all backup records"
"Deleted all backup records after rolling back from iCDP"
"Failed to delete all backup records after rolling back from iCDP: %@"
"Failed to disable iCDP at PCS level: %@"
"Initial sync not required, skipping..."
"Failed to parse data: %@ - %@"
"Context already initialized, returning..."
"Initializing piggybacking channel"
"Initializing TTSU channel"
"Failed to initialize a channel %@"
"Secure channel proxy going away..."
"Creating SecureBackup auth info"
"Failed to fetch iCloud Env"
"Failed to fetch EP URL"
"iCloud Env missing, bad things to come..."
"Auth Token missing, bad things to come..."
"Base URL missing, bad things to come..."
"Invalid configuration request detected"
"Attempting to fetch configuration using request: %@"
"Configuration Response: %@"
"Server Indicated that a retry attempt is needed"
"Failed to load configuraiton: %@"
"Configuration Fetched: %@"
"Older, non-view-aware peers are present therefore user visible keychain is implicitly enabled despite the state of views"
"The device is NOT in circle and so isUserVisibleKeychainSyncEnabled will return NO"
"CDP State repair is needed because the account is iCDP enabled but HSA2 silent auth failed with error %@"
cdp: Keychain setting preflight
"CDP State repair is needed because the account is iCDP enabled but not in circle"
cdp: Updating keychain views
"Calling SOSCCViewSet with enable=%@ disable=%@ returned success=%i"
cdp: Match keychain sync state
cdp: Synchronize Views with Peers
"Peers reported positive iCloud Keychain state, enabling..."
"Failed to synchronize keychain view state with error: %@"
cdp: resume secure channel session
"Creating initiating payload..."
"Sending initiating payload: %@"
"We completed, but ended up with error... %@"
@"Failed to send initiating message for resume: %@"
"Starting a CDP accepting server..."
"Starting server in dry move, we are not HSA2"
"Failed to process requestor payload on approver side with error: %@"
"Processing reply: %@"
"Failed to process reply with error: %@"
"Secure channel request completed..."
"Sending response: %@"
"Failed to send response with error: %@"
"Sending payload over piggybacking channel"
"Creating an initiating pairing channel..."
"Creating initiating TTSU payload"
"Created initiating TTSU payload with error: %@"
"Creating an accepting pairing channel..."
"Processing incoming TTSU payload"
"Processed incoming TTSU payload with result"
"Pairing channel indicated initial sync requirement: %d"
@(#)PROGRAM:CoreCDPInternal  PROJECT:CoreCDP-1
