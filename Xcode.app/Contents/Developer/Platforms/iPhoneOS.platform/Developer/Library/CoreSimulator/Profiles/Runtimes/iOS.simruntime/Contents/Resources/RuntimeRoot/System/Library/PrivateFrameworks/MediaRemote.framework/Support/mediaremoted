MRDAVSystemEndpointControllerActiveEndpointDidChangeNotification
ActiveSystemEndpointGroupLeaderUIDsKey
v8@?0
v24@?0^v8^{__CFError=}16
MediaRemote_ActiveSystemEndpointInfo.plist
systemEndpointBehavior
Tq,N,V_systemEndpointBehavior
activeEndpointGroupLeaderUIDs
T@"NSArray",R,N
com.apple.mediaremote.MRDRemoteControlServer
v20@?0I8^{__CFData=}12
v28@?0I8^{__CFData=}12@"MRDMediaRemoteClient"20
v12@?0B8
v32@?0@"NSString"8@"MRDRemoteControlContext"16^B24
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
MRXPC_COMMAND_STATUSES_DATA_KEY
v20@?0I8^{__CFArray=}12
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@"NSError"8
v16@?0@"NSNotification"8
com.apple.Fuse
v16@?0Q8
v12@?0i8
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
processingPlayCommand
TB,R,N,GisProcessingPlayCommand
remoteControlClients
MRXPC_COMMAND_KEY
MRXPC_COMMAND_OPTIONS_KEY
MRXPC_NOWPLAYING_DISPLAYID_KEY
MRXPC_COMMAND_APP_OPTIONS_KEY
MRXPC_NOWPLAYING_PID_KEY
{%s%@%s}
    
    
MRDVolumeControllerVolumeDidChangeNotification
MRDVolumeControllerVolumeUserInfoKey
MRDVolumeControllerMasterVolumeDidChangeNotification
routingDataSource
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
currentVolume
Tf,R,N,V_currentVolume
volumeWarningEnabled
TB,R,N,V_volumeWarningEnabled
volumeLimit
Tf,R,N,V_volumeLimit
warningState
TQ,N,V_warningState
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v32@?0@"NSString"8@"NSNumber"16^B24
contextID
T@"NSString",R,N,V_contextID
originatingAppDisplayID
T@"NSString",R,N,V_originatingAppDisplayID
routedCommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingDataSourceVolumeControlAvailableUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
com.apple.MRDAVRoutingDataSource.serialQueue
discoveryMode
TI,N,V_discoveryMode
pickedRoute
T@"MRDAVRoute",R,N,V_pickedRoute
externalScreenType
TI,R,N,V_externalScreenType
currentRouteSupportsVolumeControl
TB,R,N,V_currentRouteSupportsVolumeControl
subclass must implement
bundleID
T@"NSString",R,N,V_bundleID
processID
Ti,R,N,V_processID
v16@?0@"NSDictionary"8
appStateMonitor
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
cachedNowPlayingClients
T@"NSSet",&,N,V_cachedNowPlayingClients
cachedNowPlayingContentItem
T@"_MRContentItemProtobuf",&,N,V_cachedNowPlayingContentItem
serialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
com.apple.mediaremote.MRDNowPlayingPlayerClient
%@ %p {
  playerPath = %@
  playbackState = %@
  inferredPlaybackState = %@
  supportedCommands = %@
  capabilities = %ld
  playbackQueue = %@
  playbackQueueClient = %@
@16@?0@"NSData"8
v16@?0^v8
true
false
v32@?0@"MRDNowPlayingPlayerClientArtworkRequest"8Q16^B24
v32@?0@"NSString"8@"NSMutableArray"16^B24
v32@?0@8Q16^B24
v16@?0@"NSArray"8
v40@?0@"MRTransactionDestination"8@"NSArray"16@"_MRNowPlayingPlayerPathProtobuf"24@?<v@?I>32
pushStateIsPlaying
TB,N,V_pushStateIsPlaying
pushStatePlaybackState
TI,N,V_pushStatePlaybackState
pushStatePlayer
T@"_MRNowPlayingPlayerProtobuf",&,N,V_pushStatePlayer
playbackState
TI,N
inferredPlaybackState
supportedRemoteControlCommands
supportedRemoteControlCommandsData
T@"NSData",C,N
playbackQueue
T@"_MRPlaybackQueueProtobuf",C,N
playbackQueueCapabilities
TQ,N,V_playbackQueueCapabilities
isPlaying
TB,R,N
hasNowPlayingData
player
T@"_MRNowPlayingPlayerProtobuf",R,N
playerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N
nowPlayingState
T@"_MRSetStateMessageProtobuf",R,N
playbackQueueClient
T@"MRPlaybackQueuePlayerClient",R,N,V_playbackQueueClient
delegate
T@"<MRDNowPlayingPlayerClientDelegate>",W,N,V_delegate
contentItemIdentifer
T@"NSString",R,N,V_contentItemIdentifer
artworkIdentifier
T@"NSString",R,N,V_artworkIdentifier
T@"<MRDNowPlayingDataSourceDelegate>",W,N,V_delegate
nowPlayingApplicationDisplayID
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
nowPlayingApplicationPID
Ti,R,N,V_nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
TB,R,N,V_nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
TB,R,N,V_anyApplicationIsPlaying
MediaPlayback
v32@?0@"NSArray"8@"MRAVEndpoint"16@"NSError"24
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
airplay
tacl
tsco
screen
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
<Unknown>
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
callback
T@?,C,N,V_callback
timeoutTimer
T@"NSTimer",&,N,V_timeoutTimer
routeUID
T@"NSString",R,N,V_routeUID
MRXPC_INDEXPATH_DATA_KEY
v16@?0@"MRDMediaRemoteClient"8
MRXPC_CLIENT_ERROR_DATA_KEY
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
MRXPC_BUNDLE_ID_KEY
apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
%@ %p {
    discovery mode = %@
    xpc connection = %@
    pid = %d
    process name = %@
connection
T@"NSXPCConnection",R,N,V_connection
hostedRoutingController
T@"MRDAVHostedRoutingController",R,N,V_hostedRoutingController
T@"<MRDAVHostedDiscoverySessionDelegate>",W,N,V_delegate
%@ %p {
    credentials = %@
    deviceInfo = %@
    lastSupportedMessageType = %ld
    virtualTouchDevices = %@
    registeredVirtualVoiceInputDevices = %@
    playbackQueueRequests = %@
    sessionPeer = %@
    pinPairingToken = %@
    serverDelegate = %@
v16@?0I8I12
v32@?0@"NSNumber"8@"MREmulatedGameController"16^B24
credentials
T@"MRPasscodeCredentials",&,N,V_credentials
deviceInfo
T@"_MRDeviceInfoMessageProtobuf",&,N,V_deviceInfo
supportedMessages
T@"MRSupportedProtocolMessages",&,N,V_supportedMessages
virtualTouchDevices
registeredVirtualVoiceInputDevices
playbackQueueRequests
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
sessionPeer
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
pinPairingToken
T@,&,N,V_pinPairingToken
serverDelegate
T@"<MRDExternalDeviceServerClientConnectionDelegate>",W,N,V_serverDelegate
xpcEndpoint
T@"NSXPCListenerEndpoint",R,N
hostedDiscoverySessions
MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification
T@"<MRDHostedRoutingObserverDelegate>",W,N,V_delegate
MRDAVHostedRoutingController observer callout queue
v16@?0^{__CFArray=}8
{PurgeReason=BBBB}
cachedOutputDevices
T@"NSArray",C,N,V_cachedOutputDevices
hasAvailableEndpoints
availableHostedEndpoints
availableOutputDevices
TI,R,N
AVAudioSession
AVAudioSessionCategoryPlayback
v32@?0@"NSString"8@"NSSet"16^B24
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
path
T@"NSString",R,N,V_path
tokenRecords
owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
model
deviceID
AirPlayPortExtendedInfo
route
T@"NSDictionary",R,N,V_route
requiresPIN
modelName
T@"NSString",R,N
deviceIdentifier
canBeDefaultRoute
TB,R,N,V_canBeDefaultRoute
canBeSystemDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
T@"<MRTransactionDelegate>",W,N,V_delegate
name
TQ,R,N,V_name
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_playerPath
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
v12@?0I8
transactions
T@"NSMutableArray",R,N,V_transactions
T@"<MRDPinPairingDialogDelegate>",W,N,V_delegate
%@ (pid=%d)
<%@ %p %@ (pid=%d)>
registeredCallbacks
TQ,N,V_registeredCallbacks
notifications
TQ,N,V_notifications
connectionState
TI,N,V_connectionState
com.apple.mediaremoted.hostedEndpoint.externalDeviceCallbackQueue
v20@?0I8^{__CFError=}12
<%@ %p (%llu connected client%s) endpoint=%@>
%@ %p {
    underlying endpoint = %@
    external device = %@
    connection state = %@
    external device clients = %@
v16@?0^{__CFError=}8
v16@?0^{__CFString=}8
v24@?0^{__CFString=}8^{__CFData=}16
v28@?0f8^{__CFString=}12^{__CFString=}20
v24@?0{?=IB[2I]}8
T@"<MRDAVHostedEndpointDelegate>",W,N,V_delegate
concreteEndpoint
T@"MRAVConcreteEndpoint",R,N,V_concreteEndpoint
externalDeviceListenerEndpoint
externalDeviceClients
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
MRXPC_ERROR_CODE_KEY
com.apple.mediaremote.MRDPairedDevice
UserAssignedDeviceName
v24@?0^{__CFString=}8^{__CFDictionary=}16
T@"_MRDeviceInfoMessageProtobuf",R,N,V_deviceInfo
T@"<MRDDeviceInfoDataSourceDelegate>",W,N,V_delegate
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
    origin = %@
    deviceInfo = %@
    app activity = %@
    override client = %@
    current route volume control capabilities = %@
    active now playing client = %@
    now playing client = %@
    inferred now playing client = %@
    datasource = %@
    all now playing clients = %@
inferredNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_inferredNowPlayingClient
nowPlayingClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
pushStateNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_pushStateNowPlayingClient
pushStateAnyAppIsPlaying
TB,N,V_pushStateAnyAppIsPlaying
origin
T@"_MROriginProtobuf",R,N,V_origin
anyAppIsPlaying
volumeControlCapabilities
activeNowPlayingClient
T@"MRDNowPlayingClient",&,N
activity
T@"MRApplicationActivity",&,N,V_activity
overrideClient
T@"MRDMediaRemoteClient",&,N,V_overrideClient
nowPlayingDataSource
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
deviceInfoDataSource
T@"MRDDeviceInfoDataSource",&,N,V_deviceInfoDataSource
nowPlayingClients
T@"<MRDNowPlayingOriginClientDelegate>",W,N,V_delegate
<%@ %p: %@>
Speaker
AVController_RouteDescriptionKey_RouteUID
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVController_RouteDescriptionKey_RouteName
AVController_RouteDescriptionKey_RouteType
AVController_RouteDescriptionKey_IsCurrentlyPickedOnPairedDevice
AVController_RouteDescriptionKey_RouteCurrentlyPicked
AVController_RouteDescriptionKey_AVAudioRouteName
T@"<MRDNowPlayingStateObserverDelegate>",W,N,V_delegate
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
currentDiscoveryMode
TI,R,N,V_currentDiscoveryMode
AVSystemController_CurrentExternalScreenAttribute
AVController_PickableRoutesAttribute
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_CurrentRouteHasVolumeControlNotificationParameter
AVController_RouteDescriptionKey_PortStatusChangeReason
AVSystemController
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_ExternalScreenDidChangeNotification
AVController_PickableRoutesDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVAudioSessionMediaServicesWereResetNotification
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
AVSystemController_DiscoveryMode_PresenceScan
AVSystemController_DiscoveryMode_DetailedDiscovery
AVSystemController_DiscoveryMode_None
AVSystemController_DiscoveryModeAttribute
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
%@ is invalid.
%@ is invalid. use %@
<%@ %p communication channel = %@>
communicationChannel
T@"APReceiverMediaRemoteCommunicationChannel",R,N,V_communicationChannel
MRDMediaRemoteExternalDeviceServerClientInvalidatedNotification
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
B16@?0@"MRDExternalDeviceServerClientConnection"8
@"MRProtocolMessage"8@?0
@"MRProtocolMessage"16@?0@"MRDExternalDeviceServerClientConnection"8
kMRPlaybackQueueContextDataUserInfoKey
I12@?0I8
com.apple.TVRemote
com.apple.tvremotecore.xpc
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v16@?0@"_MRLyricsEventProtobuf"8
v20@?0{_MRHIDButtonEvent=IIB}8
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
v16@?0@"MRProtocolMessage"8
SBSUndimScreen
SpringBoardServices
v16@?0@"MRTransactionMessage"8
v24@?0@"CUPairedPeer"8Q16
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
v24@?0q8@?<v@?@"NSString">16
clients
endpoints
streamsRunLoop
T@"NSRunLoop",R,N
T@"<MRDExternalDeviceDelegate>",W,N,V_delegate
CURunLoopThread
/System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils
_MRDActiveOriginDataDefaultsKey
LastNowPlayingAppIsPlayingState
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
B32@?0@"MRDMediaRemoteClient"8@"NSDictionary"16^@24
activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
activeClientPID
Ti,R,N
localActiveClientPID
activeClientBundleIdentifier
localActiveClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
activePlayerClient
T@"MRDNowPlayingPlayerClient",R,N
localActivePlayerClient
T@"MRDNowPlayingClient",R,N
localActiveNowPlayingClient
activePlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",R,N
localActivePlayerPath
availableOrigins
allNowPlayingInfoClients
T@"NSSet",R,N
allLocalNowPlayingInfoClients
xpcClient
T@"MRDMediaRemoteClient",&,N,V_xpcClient
playerClient
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
originClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_playerPath
isActiveOrigin
TB,N,V_isActiveOrigin
isActiveClient
TB,N,V_isActiveClient
isActivePlayer
TB,N,V_isActivePlayer
error
TI,N,V_error
unresolvedPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_unresolvedPlayerPath
localOrigin
TB,R,N,GisLocalOrigin
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%p {
    player path = %@
    client = %@
    any player is playing = %s
    has now playing data = %s
    active player client = %@
    player clients = %@
nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
pushStateActivePlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
pushStateAnyPlayerIsPlaying
TB,N,V_pushStateAnyPlayerIsPlaying
pushStateClient
T@"_MRNowPlayingClientProtobuf",&,N,V_pushStateClient
anyPlayerIsPlaying
client
T@"_MRNowPlayingClientProtobuf",&,N
T@"MRDNowPlayingPlayerClient",&,N
playerClients
T@"<MRDNowPlayingClientDelegate>",W,N,V_delegate
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v32@?0@"NSNumber"8@"MRDMediaRemoteClient"16^B24
q24@?0@"MRDMediaRemoteClient"8@"MRDMediaRemoteClient"16
com.apple.mediaremote.mediaremoted.notificationQueue
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
com.apple.Music
MRXPC_APPLICATION_ACTIVITY_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
enabled
disabled
com.apple.
MRXPC_APP_INSTALLED_KEY
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
v32@?0@8@16^B24
com.apple.mediaremote.MRDMediaRemoteServer
No diagnostic info
v16@?0@"_MRDiagnosticProtobuf"8
MediaRemote Client Diagnostic
Collected at: %@
================================================================================
All clients timed out
(some clients timed out)
com.apple.mediaremoted
_DECNowPlayingRecommendationStarted
_DECNowPlayingRecommendationEnded
T@"NSArray",R,N,V_availableOrigins
nowPlayingServer
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
remoteControlServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
routingServer
T@"MRDAVRoutingServer",R,N,V_routingServer
transactionServer
T@"MRDTransactionServer",R,N,V_transactionServer
shouldSendCommandsDuringPhoneCall
TB,R,N,V_shouldSendCommandsDuringPhoneCall
localNowPlayingClient
T@"MRDMediaRemoteClient",R,N
systemMediaClient
frontmostClient
daemonClient
%@ is invalid. You must provide a type and bundleID with %@.
<%@ %p "%@"
<%@ %p
%@, type = %@, bundleID = %@, valid = %@>
type
Tq,R,N,V_type
valid
TB,R,N,GisValid
T@"NSString",C,N,V_name
SendCommand
RelayServerMessage
BrowsableContent
Transaction
RestoreState
UnknownAssertionType
com.apple.mediaremoted.%@
BrowsableContentMessage
UnknownType
APReceiverMediaRemoteXPCClient_SetDelegate
@"MSVPair"8@?0
T@"<MRDAirPlayRemoteControlServiceDelegate>",W,N,V_delegate
/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver
MediaRemote Diagnostic
================================================================================
Active Clients
Run Assertions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
Routing Server
System Discovery Mode (Legacy)
AirPlay Security Settings
Local Receiver Pairing Identity
Hosted Routing
Hosted Discovery Mode
Discovery Sessions
Endpoints
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
dateCreated
T@"NSDate",R,N,V_dateCreated
activeClients
T@"NSArray",C,N,V_activeClients
runAssertions
T@"NSArray",C,N,V_runAssertions
currentAppActivity
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
nowPlayingPlaybackState
TI,N,V_nowPlayingPlaybackState
originClients
T@"NSArray",C,N,V_originClients
activeOrigin
T@"_MROriginProtobuf",&,N,V_activeOrigin
enqueuedCommands
T@"NSDictionary",C,N,V_enqueuedCommands
remoteControlContexts
T@"NSArray",C,N,V_remoteControlContexts
queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
connectedExternalDevices
T@"NSArray",C,N,V_connectedExternalDevices
televisionEndpoints
T@"NSArray",C,N,V_televisionEndpoints
systemDiscoveryMode
TI,N,V_systemDiscoveryMode
airplaySecuritySettings
T@"_MRAVAirPlaySecuritySettingsProtobuf",&,N,V_airplaySecuritySettings
localReceiverPairingIdentity
T@"NSString",C,N,V_localReceiverPairingIdentity
hostedRouteDiscoveryMode
TI,N,V_hostedRouteDiscoveryMode
T@"NSArray",C,N,V_hostedDiscoverySessions
hostedEndpoints
T@"NSArray",C,N,V_hostedEndpoints
recordingEndpointClients
T@"NSArray",C,N,V_recordingEndpointClients
registeredVirtualAudioDevices
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
usedTransactionMemory
TQ,N,V_usedTransactionMemory
allowedTransactionMemory
TQ,N,V_allowedTransactionMemory
transactionWaitDuration
Td,N,V_transactionWaitDuration
CXCallObserver
MediaRemote
T@"<MRDPhoneCallObserverDelegate>",W,N,V_delegate
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
com.apple.airplay.password
MostRecentlyUsedAVOutputDeviceUIDs
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v16@?0@"NSString"8
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_UID_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v24@?0@"MRDAVRoute"8@"NSError"16
Just Got Splash Beats!
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_PAIRING_IDENTITY_STRING_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_CUSTOM_XPC_ENDPOINT_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_ROUTE_OPERATION
MRXPC_ROUTE_UIDS_KEY
MRXPC_PROTOBUF_DATA_KEY
APReceiverMediaRemoteXPCClient_CopyProperty
AirPlayGroupUUID
v16@?0@"MSVSystemDialogResponse"8
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
Route Discovery
AppleTV
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
com.apple.mediaremote
AirPlaySecuritySetting
password
activePasswordDialog
T@"MSVSystemDialog",&,N,V_activePasswordDialog
discoveryRunAssertion
T@"MRDRunAssertion",&,N,V_discoveryRunAssertion
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
RequestingAuthorizationToken
ReceivedAuthorizationToken
Retried
Completed
Cancelled
Failed
TI,R,N,V_connection
identifier
TI,R,N,V_identifier
port
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",W,N,V_delegate
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
T@"NSArray",R,C,N
registeredDevices
T@"<MRDVirtualAudioInputServerDelegate>",W,N,V_delegate
RegionalBehaviorEUVolumeLimit
CannotExceedEUVolumeLimit
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_EUVolumeLimitDidChangeNotification
AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
AVSystemController_EUVolumeLimitAttribute
AVSystemController_EUVolumeLimitEnforcedAttribute
AVSystemController_AudioVolumeNotificationParameter
AVSystemController_AudioCategoryNotificationParameter
AVSystemController_AudioVolumeChangeReasonNotificationParameter
AVSystemController_EUVolumeLimitNotificationParameter
AVSystemController_EUVolumeLimitEnforcedNotificationParameter
AVController_RouteDescriptionKey_RouteSubtype
AVSystemController_FullMuteAttribute
CUBluetoothClient
CoreUtils
v16@?0@"NSData"8
<%@ %p "%@">
local.
lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDTelevisionServerNetworkServiceDelegate>",W,N,V_delegate
netServiceType
T@"NSString",R,N,V_netServiceType
MRDMediaRemoteClientCanBeNowPlayingAppDidChange
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.MRDMediaRemoteClient
%@-%ld
<%@ %p, bundleIdentifier = %@, pid = %ld, processName = %@>
%@ %p {
    bundle identifier = %@
    pid = %ld
    xpc connection = %@
    current task assertion = %@
    registered custom origins = %@
    playback queue requests = %@
    can be now playing app = %s
    can be now playing timestamp = %@
    playbackState timestamp = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    keep alive = %s
    has requested legacy nowPlayingInfo = %s
iapd
iapd2
Sending remote control command %@
Relaying XPC message %llu to client %@
%@-%@
messageHandler
T@"<MRDXPCMessageHandling>",W,N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",W,N,V_delegate
T@"MRXPCConnection",R,N,V_connection
bundleIdentifier
T@"NSString",R,N,V_bundleIdentifier
processName
currentTaskAssertion
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
displayName
canBeNowPlayingApplication
TB,N,V_canBeNowPlayingApplication
hardwareRemoteBehavior
TI,N,V_hardwareRemoteBehavior
canBeNowPlayingTimestamp
T@"NSDate",&,N,V_canBeNowPlayingTimestamp
playbackStateSetToPlayTimestamp
T@"NSDate",&,N,V_playbackStateSetToPlayTimestamp
routeDiscoveryCount
TQ,R,N,V_routeDiscoveryCount
routeDiscoveryMode
TI,N,V_routeDiscoveryMode
outputDeviceDiscoveryMode
TI,N,V_outputDeviceDiscoveryMode
applicationPickedRoutes
T@"NSArray",C,N
isActive
keepAlive
TB,N,V_keepAlive
hasRequestedLegacyNowPlayingInfo
TB,N,V_hasRequestedLegacyNowPlayingInfo
v32@?0@"NSNumber"8@"NSValue"16^B24
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
deviceDescriptor
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
uniqueIdentifier
TQ,R,N,V_uniqueIdentifier
ioDevice
T^{__IOHIDUserDevice=},R,N,V_ioDevice
T@"MRDAVRoute",R,N,V_route
inputType
Tq,R,N,V_inputType
<%@ %p '%@'>
B24@?0r*8@"NSObject<OS_xpc_object>"16
A reply object could not be created.
A reply connection could not be obtained.
SBSCopyFrontmostApplicationDisplayIdentifier
CPCopyBundleIdentifierFromAuditToken
AppSupport
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
<%@ %p, command = %@, playerPath = %@,  remote control interface = %@>
<%@ %p, command = %@, playerPath = %@, remote control interface = %@, options = %@>
iap2d
BTAvrcp
com.apple.rcd
com.apple.AVRCP
commandType
TI,R,N,V_commandType
optionsData
T@"NSData",R,N
senderAppDisplayID
T@"NSString",R,N,V_senderAppDisplayID
destinationAppDisplayID
destinationAppProcessID
remoteControlInterfaceID
appOptions
TI,R,N,V_appOptions
protobufData
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
shouldImplicitlyLaunchApplication
originatedFromAccessory
originatedFromHID
avrcpCommand
TB,R,N,GisAVRCPCommand
TI,D,N
T@"NSData",C,D,N
T@"_MRNowPlayingPlayerPathProtobuf",C,D,N
T@"NSDate",&,D,N
T@"NSString",C,D,N
T@"NSString",C,N
Ti,N
<%@ %p, command = %@, routedToApp = %@>
routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
%s is abstract
-[MRDAVRoute initWithDictionary:]
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_type
T@"NSString",R,N,V_modelName
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
extendedInfo
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
dictionary
T@"NSDictionary",R,N,V_dictionary
indexPathData
T@"NSData",R,N,V_indexPathData
T@"NSString",R,N,V_deviceID
token
T@"NSString",R,N,V_token
expirationDate
T@"NSDate",R,N,V_expirationDate
T@"NSDate",C,D,N
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
outputDevice
T@"MRAVOutputDevice",R,N,V_outputDevice
avOutputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
AVOutputDevice
AirPlay
BuiltIn
Wired
Standard
Headphones
Headset
Receiver
LineOut
DisplayPort
HDMI
LowEnergy
SPDIF
init
class
alloc
sharedSystemAudioContext
_hasPersonalDeviceForContext:
_onQueue_synchronizePersistentStorage
defaultCenter
_originDidUnregisterNotification:
addObserver:selector:name:object:
_outputDevicesDidChangeNotification:
removeObserver:name:object:
dealloc
array
copy
removeAllObjects
indexOfObject:
indexSetWithIndex:
moveObjectsAtIndexes:toIndex:
insertObject:atIndex:
_onQueue_orderedListDidChange
removeObject:
userInfo
activeEndpointGroupLeaderUIDs
containsObject:
clearActiveEndpointStatusForGroupLeaderWithUID:
clearAllActiveEndpointStatus
outputDevices
countByEnumeratingWithState:objects:count:
deviceType
deviceSubtype
stringByAppendingPathComponent:
_persistantStoragePath
dictionaryWithObjects:forKeys:count:
writeToFile:atomically:
dictionaryWithContentsOfFile:
objectForKey:
addObjectsFromArray:
postNotificationName:object:
updateActiveEndpointStatusForGroupLeaderWithUID:
.cxx_destruct
systemEndpointBehavior
setSystemEndpointBehavior:
_serialQueue
_activeEndpointGroupLeaderUIDs
_persistentStorageDirty
_cachedHasPersonalDevices
_systemEndpointBehavior
_clientCanBeNowPlayingAppNotification:
removeObserver:
sendRemoteControlCommand:completion:
propertyListWithData:options:format:error:
playerPath
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
broadcastRemoteControlCommand:completion:
remoteControlClients
bundleIdentifier
initWithPID:bundleIdentifier:responseData:
arrayWithObjects:count:
server
clientWithRegisteredCustomOrigin:
count
sendRemoteControlCommand:toClients:completion:
clientForBundleIdentifier:
initWithCapacity:
lock
addObject:
unlock
_sendRemoteControlCommand:toDestinationClient:withCompletion:
currentSettings
broadcastCommandWaitDuration
_shouldIgnoreCommand:completion:
originatingAppDisplayID
isEqualToString:
enumerateKeysAndObjectsUsingBlock:
removeObjectsForKeys:
allClients
canBeNowPlayingApplication
_handleSendCommandMessage:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
setEnqueuedCommands:
allValues
setRemoteControlContexts:
bytes
length
nowPlayingServer
queryExistingPlayerPathForXPCMessage:
playerClient
supportedRemoteControlCommandsData
error
queryPlayerPathForXPCMessage:fromClient:
nowPlayingClient
setSupportedRemoteControlCommandsData:
object
_sendQueuedCommandsForDestinationClient:
commandType
mutableCopy
resolveContextualCommandForCurrentNowPlaying:
setCommandType:
appOptions
routeUID
routingServer
pickCachedRouteWithUID:
processName
createNowPlayingClient
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localActiveClientBundleIdentifier
localOriginClient
nowPlayingDataSource
nowPlayingApplicationDisplayID
destinationAppDisplayID
resolveExistingPlayerPath:
setPlayerPath:
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_applicationIsRunning:
initWithType:bundleID:
isValid
invalidate
_clearQueuedCommandsForApplicationWithDisplayID:
setDestinationAppDisplayID:
setObject:forKey:
removeObjectForKey:
_sendQueuedCommands:toClient:retry:
dateCreated
timeIntervalSinceNow
subarrayWithRange:
_sendQueuedPlayCommand:remainingCommands:client:
_completionHandler
mainQueue
localActivePlayerIsPlaying
localNowPlayingClient
isEqual:
addObserverForName:object:queue:usingBlock:
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
systemMediaClient
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
isAVRCPCommand
shouldSendCommandsDuringPhoneCall
shouldSendCommand:
numberOfActivePhoneCalls:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
isProcessingPlayCommand
_commandQueuesForDisplayIDs
_remoteControlContexts
_playCommandsBeingProcessed
_callObserver
dataWithBytes:length:
initWithCommandType:player:senderAppDisplayID:optionsData:
stringWithUTF8String:
setAppOptions:
setDestinationAppProcessID:
arrayWithCapacity:
unsignedIntValue
componentsJoinedByString:
stringWithFormat:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
routingDataSource
currentVolume
volumeWarningEnabled
volumeLimit
warningState
setWarningState:
_volumeWarningEnabled
_currentVolume
_volumeLimit
_routingDataSource
_warningState
standardUserDefaults
dictionaryForKey:
boolForKey:
setBool:forKey:
numberWithUnsignedInt:
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
clearRoutedCommands
_routedCommands
_contextID
_originatingAppDisplayID
uniqueIdentifier
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRouteForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
addAuthorizationCallbackForRoute:requestCallback:
removeAuthorizationCallbackForRoute:
authorizationRequestCallbackForRoute:
discoveryMode
setDiscoveryMode:
pickedRoute
externalScreenType
currentRouteSupportsVolumeControl
_authorizationCallbacks
_currentRouteSupportsVolumeControl
_discoveryMode
_externalScreenType
_pickedRoute
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_processID
_bundleID
initWithOriginClient:
initWithBundleIDs:states:
_frontmostApplicationDidChange:
setHandler:
_registerNotifications
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_unregisterNotifications
_mostRecentlyUpdatedClient
client
processIdentifier
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
_notifyDelegateNowPlayingApplicationDidChange
allLocalNowPlayingInfoClients
setCachedNowPlayingClients:
firstObject
setCachedNowPlayingContentItem:
_notifyDelegateNowPlayingPlaybackStateDidChange
delegate
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceAnyApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
activePlayerClient
playbackQueue
dateWithTimeIntervalSinceReferenceDate:
compare:
nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
cachedNowPlayingContentItem
serialQueue
setSerialQueue:
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
initWithPlayerPath:queue:
_registerCallbacks
player
_onQueue_supportedRemoteControlCommands
isEqualToData:
_onQueue_supportedCommandsDidChange:
_onQueue_pushState
_onQueue_playbackQueueDidChange:
_onQueue_popState
_onQueue_playbackState
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_isPlaying
updatePlaybackQueue:notifyObservers:
_onQueue_updatePlaybackQueue:notifyObservers:
_onQueue_playbackQueueContentItemsDidChange:
_onQueue_playbackQueueContentItemsArtworkDidChange:
nowPlayingPlayerClient:isPlayingDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackStateDidChange:forPlayerPath:
nowPlayingPlayerClient:supportedCommandsDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackQueueDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackQueueContentItemsDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackQueueArtworkContentItemsDidChange:forPlayerPath:
setPushStateIsPlaying:
setPushStatePlaybackState:
setPushStatePlayer:
pushStateIsPlaying
pushStatePlaybackState
_onQueue_playbackStateDidChanged:
_onQueue_isPlayingDidChange:
nowPlayingPlayerClient:playerStateDidChange:forPlayerPath:
artworkIdentifier
contentItemIdentifer
enumerateObjectsUsingBlock:
_onQueue_requestArtworkForContentItems:
initWithContentItem:
xpcClientForPlayerPath:
playbackQueueRequests
playbackQueueClientForPlayerPath:
subscribeToPlaybackQueue:forRequest:
setValue:forKey:
sharedManager
playerClientRequestsForPlayerPath:
name
daemonClient
subscribedContentItemsIdentifiers:forRequest:
identifier
data
_onQueue_updatePlaybackQueueWithItem:notifyObservers:
postNotificationName:object:userInfo:
unpacketize:completion:
addTransactionCallback:forName:
initWithPlayerPath:
inferredPlaybackState
supportedRemoteControlCommands
setPlaybackQueue:
setInferredPlaybackState:
setPlaybackState:
playbackState
setPlaybackQueueCapabilities:
isPlaying
hasNowPlayingData
nowPlayingState
updateClient:
updatePlayer:
updatePlaybackQueue:
artworkUpdatedForContentItems:
requestArtworkForContentItems:
playbackQueueCapabilities
playbackQueueClient
setDelegate:
pushStatePlayer
_playerPath
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueue
_playbackQueueCapabilities
_playbackState
_inferredPlaybackState
_inFlightArtworkRequests
_pushStateIsPlaying
_pushStatePlaybackState
_playbackQueueClient
_delegate
_pushStatePlayer
_contentItemIdentifer
_artworkIdentifier
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_anyApplicationIsPlaying
_nowPlayingApplicationPID
_nowPlayingApplicationDisplayID
initWithDeviceFeatures:
_activeSystemContext
outputDevice
canSetVolume
availableOutputDevices
initWithAVOutputDevice:
avOutputDevice
setOutputDevice:options:
isSpeakerRoute
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
setUseWeakMatching:
beginSearchWithTimeout:completion:
sharedSystemScreenContext
sharedAudioPresentationOutputContext
setOutputDevices:
_discoverySession
_activeReconnaissanceSessions
componentsSeparatedByString:
lastObject
numberWithInt:
objectForKeyedSubscript:
iTunesAudioContext
auxiliaryOutputContext
closeAll
closeForClient:userCancelled:
pinPairingToken
pinPairingDialogDidClose:forClient:userCancelled:
setPinPairingToken:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
_routingDataSourcePickableRoutesDidChange:
cancelSearch
setCallback:
_timeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setTimeoutTimer:
callback
_endSearch
matchesUniqueIdentifier:
_concludeSearchWithRoute:
timeoutTimer
initWithRouteUID:
_searchInProgress
_timeoutInterval
_routeUID
_callback
_timeoutTimer
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleRequestPlaybackQueueInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
setQueuedInitiatePlaybackMessages:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
relayXPCMessage:andReply:resultCallback:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
_handleSupportedAPIsDidChangeForClient:
dataWithPropertyList:format:options:error:
_messageRequiresMediaServerBlessing:
initWithType:pid:
relayXPCMessage:andReply:
_messageCanLaunchApp:
_takeProcessAssertionForClient:
indexPathData
UTF8String
connection
_scheduleEndProcessAssertionForClient:
initWithBytes:length:
localizedDescription
domain
code
numberWithInteger:
postClientNotificationNamed:userInfo:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
initWithUTF8String:
initWithBundleID:indexPathData:
_invalidate
weakProxyWithObject:
setExportedObject:
serviceInterface
setExportedInterface:
clientInterface
setRemoteObjectInterface:
setInterruptionHandler:
setInvalidationHandler:
resume
createObserver
_distantEndpointsFromHostedEndpoints:
remoteObjectProxy
availableEndpointsDidChange:
availableOutputDevicesDidChange:
hasAvailableEndpoints
availableHostedEndpoints
concreteEndpoint
descriptor
initWithDescriptor:
externalDeviceListenerEndpoint
setExternalDeviceListenerEndpoint:
hostedDiscoverySessionDidInvalidate:
getHasAvailableEndpointsWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
hostedRoutingObserver:endpointsDidChange:
hostedRoutingObserver:outputDevicesDidChange:
initWithConnection:hostedRoutingController:
hostedRoutingController
_hostedRoutingObserver
_connection
_hostedRoutingController
initWithInputStream:outputStream:runLoop:
initWithQueue:
unregisterAllVirtualVoiceInputDevices
stringByReplacingOccurrencesOfString:withString:
lastSupportedMessageType
numberWithUnsignedLongLong:
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
shortValue
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
credentials
setCredentials:
deviceInfo
setDeviceInfo:
supportedMessages
setSupportedMessages:
sessionPeer
serverDelegate
setServerDelegate:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_credentials
_deviceInfo
_supportedMessages
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
anonymousListener
allObjects
endpoint
isLocalEndpoint
setHostedRouteDiscoveryMode:
setHostedDiscoverySessions:
setHostedEndpoints:
listener:shouldAcceptNewConnection:
hostedDiscoverySessions
xpcEndpoint
hostedEndpointForOrigin:
concreteDeviceForUniqueID:
hostedEndpointForDeviceUniqueID:
_anonymousListener
_hostedDiscoverySessions
_init
initWithEndpointFeatures:
setAlwaysAllowUpdates:
sharedAudioPresentationContext
setRoutingContextUID:
auxiliarySession
setCategory:error:
opaqueSessionID
setTargetAudioSessionID:
weakObjectsHashTable
_endpointsChangedCallback:
addEndpointsChangedCallback:
_outputDevicesChangedCallback:
addOutputDevicesChangedCallback:
_observerDiscoveryModeDidChangeNotification:
_externalDeviceConnectionStateDidChangeNotification:
availableEndpoints
_onQueue_reloadHostedEndpointsWithEndpoints:
_onQueue_reloadCachedOutputDevicesWithOutputDevices:
removeEndpointsChangedCallback:
removeOutputDevicesChangedCallback:
_onQueue_purgeOrphanedHostedEndpoints
_allObservers
instanceIdentifier
initWithConcreteEndpoint:
setCachedOutputDevices:
valueForKeyPath:
setWithArray:
dictionary
externalDeviceClients
externalDevice
connectionState
valueWithBytes:objCType:
getValue:
hostedEndpoint:externalDeviceClientDidConnect:
hostedEndpoint:externalDeviceClientDidDisconnect:
cachedOutputDevices
_observerCalloutQueue
_weakObservers
_hostedEndpointsMap
_discoverySessionEndpointsToken
_discoverySessionOutputDevicesToken
_observerDiscoveryModeChangedToken
_externalDeviceConnectionStateChangedToken
_cachedOutputDevices
isEqualToSet:
intersectsSet:
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
timeIntervalSince1970
expirationDate
date
defaultManager
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
path
_dbHandle
_tokenRecords
_path
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
_query:
transactionWaitDurationOnOutOfMemory
_transactionEnded
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
_calculateMemory
outOfMemoryWaitDuration
_processMessage:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
send:toConnection:completion:
cancel
_bytesInUse
_taskAssertion
_name
start
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
setTransactions:
setUsedTransactionMemory:
setAllowedTransactionMemory:
setTransactionWaitDuration:
adjustMemory:
handleContentItemTransaction:packets:group:
handlePlaybackQueueRequestTransaction:packets:group:
hasRequest:
UUID
UUIDString
allKeys
sendContentItemTransaction:request:playerPath:
_sendContentItemTransaction:request:playerPath:
archivedDataWithRootObject:
setIdentifier:
setUserData:
initWithData:forKey:
sendContentItemTransactionWithPlaybackQueue:request:playerPath:
transactions
_queue
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
userData
null
hostedExternalDeviceConnectionStateDidChange:withError:
hostedExternalDeviceNameDidChange:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceVolumeDidChange:forEndpointWithIdentifier:forOutputDeviceWithIdentifier:
hostedExternalDeviceOutputContextDidChangeWithInfo:
initWithConnection:
registeredCallbacks
setRegisteredCallbacks:
notifications
setNotifications:
setConnectionState:
_connectionState
_registeredCallbacks
_notifications
setConnectionRecoveryBehavior:
_externalDevice:connectionStateDidChange:withError:
setConnectionStateCallback:withQueue:
shortDescription
_externalDeviceClientDidInvalidate:
setName:
hostName
setHostName:
port
setHostPort:
isPaired
setPaired:
isUsingSystemPairing
setUsingSystemPairing:
customOrigin
currentConnection
_externalDeviceClientForConnection:
_reloadHostedExternalDeviceCallbacks
_reloadHostedExternalDeviceNotifications
connectWithOptions:
disconnect:
unpair
outputDeviceVolume:queue:completion:
volumeWithQueue:completion:
setOutputDeviceVolume:outputDevice:queue:completion:
setVolume:queue:completion:
modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:withReplyQueue:completion:
sendCustomData:withName:
ping:callback:withQueue:
_allExternalDeviceClients
_externalDeviceClientsWithRegisteredCallbacks:
_externalDevice:deviceNameDidChange:
setNameCallback:withQueue:
_externalDevice:didReceiveCustomData:withName:
setCustomDataCallback:withQueue:
_externalDevice:volumeDidChange:forEndpointWithIdentifier:forOutputDeviceWithIdentifier:
setVolumeCallback:withQueue:
_externalDevice:outputContextDidChangeWithInfo:
setOutputContextCallback:withQueue:
setWantsNowPlayingNotifications:
setWantsVolumeNotifications:
getExternalDeviceMetadataWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:completion:
pingWithTimeout:callback:
_clearExternalDeviceCallbacks
_xpcListener
_externalDeviceCallbackQueue
_externalDeviceClients
_concreteEndpoint
objCType
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
hasRequestedLegacyNowPlayingInfo
setHasRequestedLegacyNowPlayingInfo:
addRequest:
createPlaybackQueueFromCacheForRequest:fromNowPlayingClient:toXpcClient:
sendPlaybackQueueResponse:forRequest:withMessage:fromNowPlayingClient:toXpcClient:completion:
relayRequest:withMessage:toNowPlayingClient:backToXpcClient:completion:
displayName
_cachingPolicyForRequest:forPlayerPath:
originClient
xpcClient
removeRequest:
handlePlaybackQueueRequest:fromClient:
_deviceInfoDidChange
sharedConnection
addObserver:
_outputContextDevicesDidChange
_deviceInfoDidChangeWithDeviceInfo:
deviceInfoDataSource:deviceInfoDidChange:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_gestaltNotificationToken
_accessSerialQueue
activeNowPlayingClient
nowPlayingOriginClient:deviceInfoDidChange:forOrigin:
nowPlayingOriginClient:currentRouteVolumeControlCapabilitiesDidChange:
setVolumeControlCapabilities:
_onQueue_activeNowPlayingClient
_onQueue_existingNowPlayingClientForClient:
_onQueue_anyAppIsPlaying
anyPlayerIsPlaying
setNowPlayingClient:
_onQueue_nowPlayingClientForClient:
primaryApplicationDisplayID
_onQueue_setNowPlayingClient:
_onQueue_setInferredNowPlayingClient:
_onQueue_setOverrideClient:
_onQueue_setActivity:
_onQueue_addNowPlayingClient:
nowPlayingOriginClient:clientDidRegister:forPlayerPath:
_reloadNowPlayingClientFromDataSource:
playerClientForPlayer:
existingNowPlayingClientForClient:
_onQueue_removeNowPlayingClientForClient:
playerClients
removePlayerClientForPlayer:
nowPlayingOriginClient:clientDidUnregister:forPlayerPath:
_stateFromDataSource:
nowPlayingOriginClient:anyAppIsPlayingDidChange:forOrigin:
updateDeviceInfo:
setPushStateNowPlayingClient:
setPushStateAnyAppIsPlaying:
pushStateNowPlayingClient
nowPlayingOriginClient:activeNowPlayingClientDidChangeFromNowPlayingClient:toNowPlayingClient:
pushStateAnyAppIsPlaying
_reloadNowPlayingClientFromDataSourceWithPid:displayID:playbackState:
setInferredNowPlayingClient:
initWithOrigin:
volumeControlCapabilities
flipVolumeControlCapabilityFlag:enable:
nowPlayingClients
anyAppIsPlaying
setActiveNowPlayingClient:
setOverrideClient:
setActivity:
nowPlayingClientForClient:
existingNowPlayingClientForPlayerPath:
existingNowPlayingClientForPid:
existingNowPlayingClientForDisplayID:
removeNowPlayingClientForClient:
setNowPlayingDataSource:
setDeviceInfoDataSource:
origin
activity
overrideClient
deviceInfoDataSource
inferredNowPlayingClient
_nowPlayingClients
_volumeControlCapabilities
_pushStateAnyAppIsPlaying
_origin
_activity
_overrideClient
_nowPlayingDataSource
_deviceInfoDataSource
_inferredNowPlayingClient
_nowPlayingClient
_pushStateNowPlayingClient
isEqualToDictionary:
extendedInfo
boolValue
matchesUID:
initWithDictionary:
type
isPicked
canBeDefaultSystemRoute
_routeDescription
stopReceivingUpdatesForSource:
_setReceiveUpdates:forSource:
_shouldNotifyChange:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
queryPlayerPath:
isActivePlayer
stateObserver:didReceiveSupportedCommandsChange:isActivePlayer:
stateObserver:didReceivePlayStateChange:isActivePlayer:
stateObserver:didReceivePlaybackQueueChange:isActivePlayer:
stateObserver:didReceivePlaybackQueueCapabilitiesChange:isActivePlayer:
stateObserver:didReceiveNowPlayingInfoChange:isActivePlayer:
stateObserver:didReceiveContentItemChange:playerPath:isActivePlayer:
stateObserver:didReceiveContentItemArtworkChange:playerPath:isActivePlayer:
stateObserver:didReceiveApplicationClientStateDidChange:
stateObserver:didReceivePlayerStateDidChange:
stateObserver:didReceiveClientDidUnregister:
stateObserver:didReceivePlayerDidUnregister:
stateObserver:didReceiveNowPlayingNotification:
stateObserver:didReceiveVolumeControlCapabilitiesChange:
stateObserver:didReceiveDeviceInfoDidChange:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_handleNowPlayingClientDidChange:
_addNowPlayingNotification:selector:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleNowPlayingInfoChanged:
_handleContentItemsChanged:
_handleContentItemArtworkChanged:
_handleApplicationClientStateChanged:
_handlePlayerStateChanged:
_handleRemoveClient:
_handleRemovePlayer:
_handleDeviceInfoChanged:
_removeNowPlayingNotifications
_handleVolumeAvailabilityDidChangeNotification:
beginReceivingUpdatesForSource:
_handleNowPlayingNotification:
_digest:
_coalescingNowPlayingUpdates
_coalescingArtworkUpdates
_observedNowPlayingNotifications
_observedVolumeControlNotificationToken
_registeredForNowPlayingCount
_registeredForVolumeAvailabilityCount
_registerAVSystemControllerNotifications
_unregisterAVSystemControllerNotifications
sharedCoordinator
clearDiscoveryModeForDataSource:
setDiscoveryMode:forDataSource:
_oddsShimDataSource
_mediaServerController
attributeForKey:
currentRouteHasVolumeControl
uppercaseString
numberWithBool:
didCancelRoutePicking:
setAttribute:forKey:error:
_notifyDelegateRoutesDidChange
intValue
sharedAVSystemController
_currentRouteHasVolumeControlDidChangeNotification:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_avSessionMediaServicesResetNotification:
sharedInstance
_descriptionForDiscoveryMode:
numberWithUnsignedInteger:
setObject:forKeyedSubscript:
_updateMediaServerDiscoveryMode
objectEnumerator
currentDiscoveryMode
_dataSourceHashesToDiscoveryModes
_currentDiscoveryMode
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
initWithOptions:
presentWithCompletion:
initWithURL:
handleDataReceived:
handleStreamDisconnect
didReceiveData:fromCommunicationChannel:
didCloseCommunicationChannel:
initWithCommunicationChannel:
dataWithBytesNoCopy:length:freeWhenDone:
notifyDelegateOfStreamEvent:
sendData:completionHandler:
initToMemory
initToBuffer:capacity:
initWithURL:append:
write:maxLength:
hasSpaceAvailable
communicationChannel
_communicationChannel
shouldInitializeGenericBonjourService
initWithNetServiceType:
shouldInitializeTelevisionBonjourService
transactionWaitDurationOnNetworkSend
initWithRoutingDataSource:volumeController:
stop
cryptoSession
activate
performBlock:
streamsRunLoop
_handleClientConnection:
setCryptoEnabled:
supportedProtocolMessages
_verifyClientVersionCompatibility:withError:
encryptionType
cryptoEnabled
_handleDeviceInfoRequest:fromClient:
_handleCryptoPairingMessage:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
event
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
initWithConnectionState:
clientConnection:didReceiveMessage:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeDevice:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
_handleModifyOutputContextRequestMessage:fromClient:
_handleGetVolumeMessage:fromClient:
_handleSetVolumeMessage:fromClient:
initWithUnderlyingCodableMessage:identifier:error:
_disconnectClient:
_sendStateUpdateMessageFromSource:predicate:trueCreateBlock:falseCreateBlock:
initWithDeviceInfo:
_sendStateUpdateMessageFromSource:usingCreateBlock:
initWithClient:
nowPlayingStateDidChange:createMessageBlock:createLegacyMessageBlock:
_shouldSendStateUpdateMessageFromSource:toClient:
isSupported:
localActivePlayerClient
initWithNowPlayingState:
clients
initWithName:object:userInfo:
initWithNotification:
subscribedContentItems:
initWithContentItems:forPlayerPath:
_filteredSupportedCommandsForCommands:destinedForClient:
initWithCapabilities:
_clientForPairingSession:
initWithPairingData:status:
shouldLogPairingSetupCode
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_notifyAndDisconnectClients:withError:completion:
setConnectedExternalDevices:
setTelevisionEndpoints:
externalDeviceSleepAssertionOnClientConnectDuration
initWithName:timeout:
registeredToNowPlayingUpdates
registeredVolumeControlAvailabilityUpdates
postClientNotificationNamed:
_findClientIf:
minimumSupportedProtocolVersion
integerValue
minimumSupportedHangdogApplicationVersion
registeredKeyboardUpdates
encryptedMessageWithState:text:attributes:usingCryptoSession:
initWithInputMode:
setUniqueIdentifier:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
sendMessage:queue:reply:
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
gameControllerConnectionDidInterrupt:
_handleSystemVolumeDidChangeNotification:
_handleMasterVolumeDidChangeNotification:
_handleVolumeOutputContextVolumeDidChangeNotification:
originClientRequestsForPlayerPath:
initWithName:packets:playerPath:
messageSentCallbacks
callbackWithQueue:block:
addCallback:
messagePurgedCallbacks
setTransactionCallback:forName:
pairingManager
setDispatchQueue:
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
setWithObjects:
effectiveValuesForUnionSetting:
lowercaseString
deleteIdentityWithError:
pairedDevices
stringWithCString:encoding:
_unpair:
sharedLogger
setShouldLog:
initWithKey:data:
_isConnectionForManagedConfigIDAllowed:
isRetrying
state
openInState:
close
setCryptoSession:
status
pairingData
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
initWithProtocolMessage:
externalDeviceServer:didReceiveCommand:completion:
initWithSendError:results:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
setRegisteredToNowPlayingUpdates:
volumeUpdates
setRegisteredVolumeControlAvailabilityUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
_syncVolumeToClient:
_syncNowPlayingStateToClient:
initWithDeviceID:errorCode:
buffer
time
gain
request
initWithPlaybackQueue:forPlayerPath:
initWithDevice:
updatePeer
initWithHiliteMode:
endpoints
contextType
addingOutputDeviceUIDs
removingOutputDeviceUIDs
settingOutputDeviceUIDs
localDeviceUID
arrayWithObject:
initWithRoute:inputType:
response
sendMessage:timeout:queue:reply:
isSubsetOfSet:
initWithRoute:status:
outputDeviceUID
isVolumeControlAvailable
volume
localReceiverPairingIdentity
initWithVolume:
setVolume:
floatValue
_handleVolumeDidChange:endpointIdentifier:outputDeviceIdentifier:
initWithVolume:endpointIdentifier:outputDeviceIdentifier:
stream:handleEvent:
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
airPlayRemoteControlService:didAcceptConnectionWithInputStream:outputStream:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
connectionBrowser:didAcceptConnectionWithInputStream:outputStream:
textEditingService:textEditingDidBegin:withAttributes:
textEditingService:textDidChange:
textEditingService:attributesDidChange:
textEditingServiceTextEditingDidEnd:
clientDidDisconnect:
clearEndpointForClient:
_broadcastKeyboardMessageWithState:text:attributes:
_handleHiliteModeChanged:
_genericNetworkService
_televisionNetworkService
_airPlayRemoteControlService
_volumeController
_streamsRunLoopThread
_streamsRunLoop
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_hidEventManager
_stateObserver
_pinPairingDialog
_sleepObserver
_pairingManager
_clientCanBeNowPlayingAppDidChangeNotification:
_addOrigin:withDeviceInfo:emitNotification:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleGetClientPropertiesMessage:fromClient:
_handleSetClientPropertiesMessage:fromClient:
_handleUpdateClientPropertiesMessage:fromClient:
_handleGetPlayerPropertiesMessage:fromClient:
_handleSetPlayerPropertiesMessage:fromClient:
_handleUpdatePlayerPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetNowPlayingAppPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleRegisterCustomOriginMessage:fromClient:
_handleRemoveCustomOriginMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleContentItemChangedMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
_handleGetDeviceInfo:fromClient:
_handleUpdateDeviceInfo:fromClient:
activeOriginClient
_onQueue_activeOriginClient
_onQueue_allNowPlayingInfoClients
_onQueue_originClientForOrigin:
_onQueue_availableOrigins
resolvePlayerPath:fromClient:
existingPlayerClientForPlayer:
_onQueue_queryPlayerPath:
initWithUnresolvedPlayerPath:
setOriginClient:
setIsActiveOrigin:
isActiveOrigin
setIsActiveClient:
existingPlayerClientForPlayerPath:
setPlayerClient:
isActiveClient
setIsActivePlayer:
setXpcClient:
availableOrigins
setActiveOrigin:
addRegisteredCustomOrigin:
removeRegisteredCustomOrigin:
_clientsWithRegisteredOrigin:
_removeOrigin:
setCanBeNowPlayingApplication:
setCanBeNowPlayingTimestamp:
setHardwareRemoteBehavior:
readData:
setClient:
setPlaybackStateSetToPlayTimestamp:
isLocalOrigin
setActivePlayerClient:
postNowPlayingPlayerStateDidChange:forPlayerPath:
postNowPlayingAppIsPlayingDidChange:forPlayerPath:isImplicitNotification:
postNowPlayingAppPlaybackStateDidChange:forPlayerPath:isImplicitNotification:
postSupportedCommandsDidChange:forPlayerPath:
postPlaybackQueueDidChange:forPlayerPath:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:
postPlaybackQueueContentItemsDidChange:forPlayerPath:
postPlaybackQueueContentItemsArtworkDidChange:forPlayerPath:
postActivePlayerDidChangeForPlayerPath:
postNowPlayingClientStateDidChange:forPlayerPath:
postPlayerDidRegisterForPlayerPath:
postPlayerDidUnregisterForPlayerPath:
postAnyPlayerIsPlayingDidChange:forPlayerPath:
postNowPlayingApplicationDidChangeForPlayerPath:isImplicitNotification:
postDeviceInfoDidChange:forOrigin:
postAnyAppIsPlayingDidChange:forOrigin:
postClientDidRegisterForPlayerPath:
postClientDidUnregisterForPlayerPath:
postCurrentRouteHasVolumeControl:forPlayerPath:
postActiveOriginDidChange:
setOriginClients:
postClientNotificationNamed:forPlayerPath:
postClientNotificationNamed:forPlayerPath:userInfo:
postClientDidRegisterCanBeNowPlayingForPlayerPath:
postClientDidUnregisterCanBeNowPlayingForPlayerPath:
activePlayerPath
postClientNotificationNamed:forPlayerPath:userInfo:predicate:
postClientNotificationNamed:forPlayerPath:predicate:
subscribedContentItems:forRequest:
numberWithUnsignedLong:
registeredCustomOrigins
arrayWithArray:
localActiveNowPlayingClient
_removeNowPlayingClient:forOrigin:
setLocalOriginClient:
postOriginDidRegister:
_onQueue_setActiveOrigin:saveState:
postOriginDidUnRegister:
setActiveOriginClient:
nowPlayingServer:activeOriginDidChangeFromOriginClient:toOriginClient:
_onQueue_savePersistentActiveOrigin:
hasRegisteredCustomOrigin:
nowPlayingClient:activePlayerDidChangeFromPlayerClient:toPlayerClient:
nowPlayingClient:clientStateDidChange:forPlayerPath:
nowPlayingClient:playerDidRegisterForPlayerPath:
nowPlayingClient:playerDidUnregisterForPlayerPath:
nowPlayingClient:anyPlayerIsPlayingDidChange:forPlayerPath:
activeClientPID
localActiveClientPID
activeClientBundleIdentifier
activePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
localActivePlayerPath
allNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
clearNowPlayingClientForXPCClient:
augmentUserInfo:
isOriginAvailable:
_onQueue_restoredActiveOrigin
_originClients
_nowPlayingApplicationIsPlayingStates
_playbackQueueServer
_activeOriginClient
_localOriginClient
stringByAppendingFormat:
unresolvedPlayerPath
_isActiveOrigin
_isActiveClient
_isActivePlayer
_error
_xpcClient
_playerClient
_originClient
_unresolvedPlayerPath
initializeBundleIdentifier
initializeDisplayName
_onQueue_setActivePlayerClient:
setNowPlayingPlayerClient:
_onQueue_activePlayerClient
_onQueue_existingPlayerClientForPlayer:
_onQueue_anyPlayerIsPlaying
_onQueue_playerClientForPlayer:
_onQueue_addPlayer:
_onQueue_removePlayerClientForPlayer:
setPushStateClient:
setPushStateActivePlayerClient:
setPushStateAnyPlayerIsPlaying:
isEqualToArray:
nowPlayingPlayerClient
pushStateActivePlayerClient
pushStateAnyPlayerIsPlaying
pushStateClient
_playerClients
_pushStateAnyPlayerIsPlaying
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_pushStateClient
_restoreNowPlayingClientState
playerIsPlayingDidChangeNotification:
makeObjectsPerformSelector:
_clientDidOpenConnection:
_saveClientsList
keepAlive
setConnectedClientPIDs:
canBeNowPlayingTimestamp
sortedArrayUsingComparator:
postClientNotificationNamed:predicate:
postClientNotificationNamed:userInfo:predicate:
initWithNotification:userInfo:queue:
addEntriesFromDictionary:
postNotification:
clientForPlayerPath:
_endApplicationActivity:
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
_beginApplicationActivity:withCompletion:
currentApplicationActivity
setCurrentApplicationActivity:withCompletion:
_postAppActivityNotificationNamed:withActivity:
runAssertionWithName:
initWithConnection:bundleIdentifier:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetCurrentApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleGetMediaAppIsInstalledMessage:fromClient:
_handlePing:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
_handleCollectClientDiagnosticsMessage:fromClient:
setKeepAlive:
_internalMediaRemoteNotificationIsLegal:
hasPrefix:
applicationProxyForIdentifier:
isInstalled
createDiagnosticInfo
_collectDiagnosticFromClient:completion:
appendString:
appendFormat:
creatorProcessID
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
removeClientForPID:
applicationStateForApplication:
setActiveClients:
setRunAssertions:
setCurrentAppActivity:
setLocalNowPlayingClient:
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
initWithObjects:
setStatus:
_prepareRemoteControlInterfacesForStartedActivity:
shouldPrepareAppPlaybackQueue
_prepareRemoteControlInterfacesForStartingActivity:
_teardownRemoteControlInterfacesForEndedActivity:
connectedClientPIDs
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
mostRecentCanBeNowPlayingClient
mostRecentPlayingClient
observeValueForKeyPath:ofObject:change:context:
addRunAssertionWithName:
removeRunAssertion:
_sendMediaRemoteCommand:withOrigin:
remoteControlServer
transactionServer
_listenerConnection
_connectionQueue
_localRoutingDataSource
_nowPlayingServer
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_applicationStateMonitors
_runAssertions
_currentAppActivity
_currentAppActivityLock
_shouldSendCommandsDuringPhoneCall
_availableOrigins
initWithBundleIdentifier:flags:reason:name:withHandler:
initWithPID:flags:reason:name:withHandler:
_initWithType:bundleID:orPID:
_cancelInvalidationTimerWithCompletion:
valid
_pid
_invalidationTimer
_acquired
_processAssertion
_type
initWithFormat:
strongToWeakObjectsMapTable
setCommunicationChannelDelegate:
pairWithFirst:second:
_didReceiveData:fromCommunicationChannelWithID:withIOStreamFactoryBlock:
_didCloseCommunicationChannelWithID:
first
second
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
_channelIDsToInputStreamsMap
_channelIDsToOutputStreamsMap
_started
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
string
_appendDescribableArray:toString:withTitle:indentLevel:
activeClients
runAssertions
currentAppActivity
nowPlayingPlaybackState
setNowPlayingPlaybackState:
originClients
activeOrigin
enqueuedCommands
remoteControlContexts
queuedInitiatePlaybackMessages
connectedExternalDevices
televisionEndpoints
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
setAirplaySecuritySettings:
setLocalReceiverPairingIdentity:
hostedRouteDiscoveryMode
hostedEndpoints
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
usedTransactionMemory
allowedTransactionMemory
transactionWaitDuration
_nowPlayingPlaybackState
_systemDiscoveryMode
_hostedRouteDiscoveryMode
_dateCreated
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_activeOrigin
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_airplaySecuritySettings
_localReceiverPairingIdentity
_hostedEndpoints
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
setDelegate:queue:
phoneCallDidChangeNotification:
_notifyDelegate:
phoneCallObserver:callDidChange:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
_assertionID
sharedAuthorizationSession
_loadMostRecentlyPicked
_updateSystemRouteDiscoveryMode
_setPickedRoute:withPassword:options:
applicationPickedRoutes
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetLocalReceiverPairingIdentityMessage:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_handleGetHostedRoutingXPCEndpointMessage:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleUpdateActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDsMessage:fromClient:
_handleGetHostedEndpointForOriginMessage:fromClient:
_handleCreateEndpointWithDevices:fromClient:
_handlePromptForRouteAuthorizationMessage:fromClient:
_handlePresentRouteAuthorizationStatusMessage:fromClient:
_handleGetGroupUID:fromClient:
_createAirPlaySecuritySettings
_savedPasswordForOutputDevice:
_clearPasswordForOutputDevice:
respondWithAuthorizationToken:completionHandler:
authorizationTokenType
initWithRoute:inputType:responseCallback:cancelCallback:
_handleAuthorizationRequest:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
useDebugAVRouteWithoutVolumeControl
_setApplicationPickedRoutes:updateRoutes:forClient:
_endpoint
indexOfObject:inRange:
removeObjectAtIndex:
removeObjectsInRange:
_saveMostRecentlyPicked
protocolMessageWithProtobufData:
initWithResponse:
protobufData
inputType
initWithOutputDevice:
_handleErrorStatus:forRoute:
_postExternalScreenDidChange
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_handleAuthenticationFailureForRoute:withOptions:
_postRouteStatusDidChangeNotificationForRoute:newStatus:
respondWithAuthorizationToken:
_passwordDialogForRouteWithName:usingInputType:
buttonIdentifier
textFieldValues
setActivePasswordDialog:
_clientInvalidatedNotification:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_activeEndpointDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
outputContextManagerForAllOutputContexts
setAlternateButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
discoveryRunAssertion
setDiscoveryRunAssertion:
containsString:
dismiss
_presentPasswordDialogForRoute:withOptions:
identifyingMACAddress
_existingKeychainAccountForOutputDevice:password:
isRemoteControllable
initWithOutputDevices:
setOutputDevices:withReplyQueue:completion:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
activePasswordDialog
_hostedRoutingService
_systemEndpointController
_routeUIDsToIgnorePortStatusFailures
_reconnaissanceSessions
_mostRecentlyPickedDevices
_mostRecentStatus
_activePasswordDialog
_discoveryRunAssertion
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
_identifier
_port
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
registeredDeviceWithID:
setRecordingState:
registeredDevices
_registeredDevices
_setupNotifications
_tearDownNotifications
_initializeVolumeLimitDataIfNecessary
_internalSetVolumeValue:
_systemVolumeDidChange:
_systemMuteDidChange:
_EUVolumeLimitDidChange:
_EUVolumeLimitEnforcedDidChange:
_volumeFromAVController
_postVolumeDidChange:
_updateVolumeValueCache
getVolumeForRoute:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
setVolumeForRouteTo:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
numberWithFloat:
_volumeValue
_deviceEnforcesEUVolumeLimit
_volumeLimitDataInitialized
setLastKnownBluetoothAddress:
_txtDataChanged
setBluetoothAddressChangedHandler:
_initializeBonjourServiceWithDeviceInfo:
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
publishWithOptions:
_txtDataChangedWithUserInfo:
_txtDataChangedWithDeviceInfo:
lastKnownBluetoothAddress
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerExternalDeviceConnections
setIncludesPeerToPeer:
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
netServiceType
_bluetoothClient
_networkService
_netServiceType
_lastKnownBluetoothAddress
initWithConnection:queue:
_handleXPCMessage:
copyWithZone:
notification
xpcMessage
_createNotificationMessage:userInfo:
setXpcMessage:
queue
optionsData
isActive
setOutputDeviceDiscoveryMode:
setApplicationPickedRoutes:
_runAssertionName
messageHandler
hardwareRemoteBehavior
playbackStateSetToPlayTimestamp
routeDiscoveryCount
outputDeviceDiscoveryMode
_source
_registeredCustomOrigins
_applicationPickedRoutes
_canBeNowPlayingApplication
_keepAlive
_hasRequestedLegacyNowPlayingInfo
_hardwareRemoteBehavior
_routeDiscoveryMode
_outputDeviceDiscoveryMode
_messageHandler
_bundleIdentifier
_currentTaskAssertion
_canBeNowPlayingTimestamp
_playbackStateSetToPlayTimestamp
_routeDiscoveryCount
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_uniqueIdentifier
_ioDevice
_responseCallback
_cancelCallback
_inputType
initWithName:
errorWithDomain:code:userInfo:
systemApplicationBundleIdentifier
initWithString:
localizedName
applicationInfoForApplication:completion:
command
options
remoteControlInterfaceID
_optionsDictionary
_copyWithZone:usingConcreteClass:
setCommand:
setOptions:
setOriginUID:
setSenderAppDisplayID:
setRemoteControlInterfaceID:
optionValueForKey:
mutableCopyWithZone:
originatedFromAccessory
originatedFromHID
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
setOptionsData:
setOptionValue:forKey:
_routedAppDisplayID
exceptionWithName:reason:userInfo:
sampleRate
_picked
_speakerRoute
_modelName
_dictionary
_indexPathData
_deviceID
_token
_expirationDate
modelID
sharedLocalDevice
requiresAuthorization
_outputDevice
initWithRoutingContextUID:multipleBuiltInDevices:
initWithAVOutputDevice:sourceInfo:
_avOutputDevice
[SystemEndpointController] Updating active endpoint status for group leader with UID: %{public}@
[SystemEndpointController] Clearing previous active system endpoints for exclusive behavior.
[SystemEndpointController] Clearing active endpoint status for group leader with UID: %{public}@
[SystemEndpointController] Clearing active status for all system endpoints
[SystemEndpointController] Clearing active system endpoint due to origin de-registration (group leader ID = %{public}@)
[SystemEndpointController] Clearing system endpoint because personal device was attached
[SystemEndpointController] Personal device was attached: %{public}@
[SystemEndpointController] Failed to write system endpoint info to file at path %{public}@
Command ignored because of device state: %{public}@
Broadcasting command to client: <%@>
Broadcast command timedout after %lf seconds
Broadcast command timed out
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %{public}@: %{public}@
Setting supported commands for %{public}@
ERROR: now playing client could not be found for setting supported commands
Error setting up playback initiation for %@.
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ replied to command with statuses: %{public}@
Client %{public}@ failed to reply to command (SendCommandErr = %ld)
Destination app %{public}@ is available but not ready for command %{public}@ -- Enqueueing command for later execution.
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Launch successful. Creating task assertion for %{public}@ to ensure command handler registration on launch.
Task assertion %{public}@ for post-launch setup is invalid.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Attempting to send previously queued play command %{public}@ to client %{public}@.
Sending previously queued command %{public}@ to client %{public}@.
Skipping previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Playback state changed after play command: sending previously queued commands
A different app started playing. Cancelled timer to send queued play command to %{public}@
Sending queued command has timed out after %ld attempts.
Attempt #%ld to send previously queued command to client %{public}@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because a phone call or FaceTime is active.
[iOSSim Data Source] Failed to load playback queue: %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is deserializing SupportedCommands: %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is setting SupportedCommands
[MRDNowPlayingPlayerClient] Client at path %{public}@ is setting playbackQueue %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is setting inferred playback state from %{public}@ to %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ setting playback state from %{public}@ to %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is setting playbackQueueCapabilities with: %{public}ld
[MRDNowPlayingPlayerClient] Client at path %{public}@ playbackState changed from %{public}@ to %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ isPlayingState changed to %{public}@
[MRDNowPlayingPlayerClient] Updating displayName from %{public}@ to %{public}@ for path %{public}@
[MRDNowPlayingPlayerClient] Updating audioSessionType from %{public}@ to %{public}@ for path %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is being asked to make artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ already has an in flight artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is making artworkRequest for %{public}@
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from system screen and system music contexts: %{public}@ %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
[HostedRoutingService] Hosted discovery session invalidated: %{public}@
[HostedRoutingService] Initializing hosted discovery session using XPC connection %{public}@
[HostedRoutingController] Failed to select playback category on auxiliary context. %{public}@
[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@
[HostedRoutingController] Creating new hosted endpoint for concrete endpoint: %{public}@
[HostedRoutingController] Removing hosted endpoint %{public}@ -- purge reasons: (
    endpoint group topology was modified = %{BOOL}u
    endpoint is no longer discoverable = %{BOOL}u
    endpoint has no connected external device clients = %{BOOL}u
    endpoint is disconnected = %{BOOL}u
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %ld
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ %@ sending client %@ subscribed packets %@
[MRTransactionServer] %@ received ack
[MRTransactionServer] %@ sending client %@ subscribed packets %@
[HostedEndpoint] -[MRDAVHostedEndpoint dealloc] for %{public}@
[HostedEndpoint] Hosted endpoint %{public}@ is accepting new XPC connection %{public}@
[HostedEndpoint] Client %{public}@ is setting the following registered callbacks on %{public}@: %{public}@
[HostedEndpoint] Client %{public}@ is setting the following notifications on %{public}@: %{public}@
[HostedEndpoint] Client %{public}@ is requesting to connect to external device using hosted endpoint %{public}@ with options %{public}@
[HostedEndpoint] Client %{public}@ is requesting to disconnect from external device using hosted endpoint %{public}@
[HostedEndpoint] Client %{public}@ is requesting to unpair from external device using hosted endpoint %{public}@
[HostedEndpoint] Client %{public}@ is requesting to set output device volume to %f using output device %{public}@ on hosted endpoint %{public}@
[HostedEndpoint] Client %{public}@ is requesting to modify the %{public}@ output context of hosted endpoint %{public}@ (adding=%{public}@, removing=%{public}@)
[HostedEndpoint] Client %{public}@ is requesting to send %llu bytes of custom data with name %{public}@ using hosted endpoint %{public}@
[HostedEndpoint] Client %{public}@ is requesting to ping external device with timeout %f using hosted endpoint %{public}@
[HostedEndpoint] Hosted endpoint %{public}@ connection state did change to %{public}@ with error %{public}@
[HostedEndpoint] Hosted endpoint %{public}@ device name did change to %{public}@
[HostedEndpoint] Hosted endpoint %{public}@ did receive %llu bytes of custom data with name %{public}@
[HostedEndpoint] Hosted endpoint %{public}@ did receive volume change to %f for endpoint with ID %{public}@ for output device with ID %{public}@
[HostedEndpoint] Hosted endpoint %{public}@ output context did change
[HostedEndpoint] Hosted endpoint %{public}@ client did disconnect: %{public}@
%{public}@ playbackQueue request %{public}@ returning with error: %{public}@
%{public}@ is requesting playbackQueue for %{public}@ with request %{public}@
PlaybackQueue request %{public}@ being handled by cache
PlaybackQueue request %{public}@ from %{public}@ is relaying to %{public}@
PlaybackQueue response received for request %{public}@
PlaybackQueue request %{public}@ received Error: %{public}@
[MRDNowPlayingOriginClient] Changing currentRouteHasVolumeControl from %{public}@ to %{public}@ for client %{public}@
[MRDNowPlayingOriginClient] Setting client %{public}@ as now playing client.
[MRDNowPlayingOriginClient] Setting client %{public}@ as inferred now playing client.
[MRDNowPlayingOriginClient] Setting client %{public}@ (pid = %d) as now playing application override.
[MRDNowPlayingOriginClient] Setting application activity %{public}@
[MRDNowPlayingOriginClient] Creating MRDNowPlayingClient for path %{public}@
[MRDNowPlayingOriginClient] Removing now playing client %{public}@
[MRDNowPlayingOriginClient] Removing now playing override client
[MRDNowPlayingOriginClient] Removing now playing client
[MRDNowPlayingOriginClient] Removing inferred now playing client
[MRDNowPlayingOriginClient] Removing activity now playing client
[MRDNowPlayingOriginClient] ActiveNowPlayingClient changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Reloaded now playing app from datasource: %{public}@
[TelevisionStateObserver] Registering for Now Playing Updates
[TelevisionStateObserver] Unregistering for Now Playing Updates
[TelevisionStateObserver] Registering for volume control updates
[TelevisionStateObserver] Unregistering for volume control updates
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %li for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
Updating media server route discovery mode to %{public}@
Error setting AVSystemController discovery mode. %{public}@
[AirPlayIO] InputStream received %llu bytes from communication channel: %{public}@
[AirPlayIO] MediaControlReceiver closed communication channel: %{public}@
[AirPlayIO] AirPlay output stream writing %llu bytes to communication channel: %{public}@
[AirPlayIO] Error sending data through channel: %{public}@
[ExternalDeviceServer] Removing television endpoint for client %{public}@
[ExternalDeviceServer] Creating stream runloop...
[ExternalDeviceServer] Got streams runloop %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@
[ExternalDeviceServer] didReceiveApplicationClientStateDidChange %@
[ExternalDeviceServer] didReceivePlayerStateDidChange %@
[ExternalDeviceServer] didReceiveClientDidUnregister %@
[ExternalDeviceServer] didReceivePlayerDidUnregister %@
[ExternalDeviceServer] didReceiveNowPlayingClientChange %@
[ExternalDeviceServer] didReceiveNowPlayingPlayerChange %@
[ExternalDeviceServer] didReceivePlaybackQueueChange %@
[ExternalDeviceServer] didReceiveContentItemChange %@ %@
[ExternalDeviceServer] didReceiveNowPlayingInfoChange %@
[ExternalDeviceServer] didReceivePlaybackQueueCapabilitiesChange %@
[ExternalDeviceServer] didReceiveSupportedCommandsChange %@
[ExternalDeviceServer] didReceivePlayStateChange %@
[ExternalDeviceServer] didReceiveNowPlayingNotification %@
[ExternalDeviceServer] didReceiveVolumeControlCapabilitiesChange %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] Attempting to disconnect client: %{public}@
[ExternalDeviceServer] Removing client: %{public}@
[ExternalDeviceServer] Unregistering client dependencies: %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] Notifying and Disconnecting client %{public}@. Error: %{public}@
[ExternalDeviceServer] Notify and disconnect notifying client %{public}@
[ExternalDeviceServer] Notify and disconnect response from client %{public}@
[ExternalDeviceServer] Notify and Disconnect timeout after %lf seconds
[ExternalDeviceServer] Sleeping for %lf seconds
[ExternalDeviceServer] Continuing after %lf second sleep
[ExternalDeviceServer] %@Transaction received packets %@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ to playerPath: %{public}@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ for playerPath: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
Checking if device with managedConfigDeviceID, %{public}@, allowed to connect
No managedConfig whitelist found. Allowing all devices
Device with managedConfigDeviceID, %{public}@, allowed: %d
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Creating new PairingSession for client %{public}@ from message %{public}@
[ExternalDeviceServer] Processing %lld bytes of crypto pairing data from client %{public}@
[ExternalDeviceServer] Error processing pairing exchange data. %{public}@
[ExternalDeviceServer] Handling pairing failure with OSStatus = %d
[ExternalDeviceServer] Received command: %{public}@ with identifier %{public}@
[ExternalDeviceServer] Responding to command: %{public}@ with identifier %{public}@ with statuses %{public}@
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Begin volume Sync for client %{public}@
[ExternalDeviceServer] End volume Sync for client %{public}@
[ExternalDeviceServer] Begin nowPlayingState Sync for client %{public}@
[ExternalDeviceServer] End nowPlayingState Sync for client %{public}@
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Invalid context type for modify request: Auxiliary
[ExternalDeviceServer] Invalid context type for modify request: iTunesAudio
[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Error setting devices on output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
[ExternalDeviceServer] Received get volume message: %{public}@
[ExternalDeviceServer] Replying to get volume message with the output context volume %f.
[ExternalDeviceServer] Replying to get volume message with the system volume %f.
[ExternalDeviceServer] Replying to volume message with the output device volume %f.
[ExternalDeviceServer] Received set volume message: %{public}@
[ExternalDeviceServer] Setting volume on output context.
[ExternalDeviceServer] Setting volume on volume controller.
[ExternalDeviceServer] Setting volume on output device.
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
PID Mismatch: Client %{public}@ is trying to make a nowPlayingClient with a different pid %d
PID Mismatch: Client %{public}@ is trying to making a nowPlayingClient with a different bundleID %{public}@
Resolving %{public}@ -> %{public}@ for client %@
Resolving Exisiting %{public}@ -> %{public}@
Client %{public}@ requesting available origins to %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Client %{public}@ requesting active origin to %{public}@
Client %{public}@ requesting to register origin %{public}@
Client %{public}@ requesting to unregister origin %{public}@
Not unregistering origin because is local origin
Not unregistering origin because other clients have a reference %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Added %{public}@ as possible now playing application.
Cleared %{public}@ as possible now playing application.
Setting hardware remote behavior to %{public}@ for client %{public}@
Restoring playbackState timestamp: %{public}@ for %{public}@
Setting playbackState timestamp for %{public}@
Unable to set playback state. No now playing client found for %@
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app for the local origin. Ignoring.
Sending contentItemUpdate for path %{public}@ to xpcClient %{public}@ %{public}@
Adding new origin %@
Removing origin %{public}@
Removing active origin %{public}@. Setting active origin to the local one.
Setting active origin from %@ to %@
Persisting active origin %@
[MRDNowPlayingClient] Setting pid for %{public}@ to %d
[MRDNowPlayingClient] Timeout trying to pid for %{public}@
[MRDNowPlayingClient] Initializing bundleIdentifier to %{public}@ for path %{public}@
[MRDNowPlayingClient] Initializing displayName to %{public}@ for path %{public}@
[MRDNowPlayingClient] Creating MRDNowPlayingPlayerClient for path %{public}@
[MRDNowPlayingClient] ActiveNowPlayingPlayer did change from %{public}@ to %{public}@
[MRDNowPlayingClient] AnyPlayerIsPlaying did change from %d to %d for path %{public}@
[MRDNowPlayingClient] Updating displayName from %{public}@ to %{public}@ for path %{public}@
[MRDNowPlayingClient] Updating parentAppBundleIdentifier from %{public}@ to %{public}@ for path %{public}@
[MRDNowPlayingClient] Updating bundleIdentifierHierarchy from %{public}@ to %{public}@ for path %{public}@
[MRDNowPlayingClient] Updating visibility from %{public}@ to %{public}@ for path %{public}@
[MRDNowPlayingClient] Updating tintColor from %{public}@ to %{public}@ for path %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %{public}@
Removing client %{public}@
Posting Notification %{public}@
UserInfo %{public}@
Posting Custom Notification %{public}@ to %{public}@
Custom UserInfo %{public}@
Ending activity %{public}@ due to playState change
App activity status did change: %{public}@
Remaining run assertions: %{public}@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Warning: attempted to begin a non-existent app activity.
Warning: Ignoring activity because a Play Command is being processed
Ending activity %{public}@
Warning: attempted to end non-existent app activity.
Get system volume: returning %f from volume controller %{public}@
Set system volume: overriding volume warning
Set system volume: setting volume to %f (warning state = %{public}s)
Adjust system volume: stepping volume by %f (warning state = %{public}s)
Disallowed bundle ID requested for installation status: %{public}@
No app bundle ID provided in call to GetMediaAppIsInstalled message
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Client %{public}@ invalidated.
Ending app activity for invalidated client %{public}@
Beginning new app activity %{public}@...
New app activity has begun. %{public}@
Error preparing application activity. %{public}@
Ending app activity %{public}@
Restoring client pids %{public}@
Failed to acquire process assertion for task %@.
Task assertion %@ was invalidated.
Timed out while waiting to acquire process assertion for task %@.
Began task assertion: %@
Invalidating task assertion: %{public}@ (dealloc)
Invalidating task assertion: %{public}@
[AirPlayRemoteControlService] Starting AirPlay remote control service
[AirPlayRemoteControlService] Stopping AirPlay remote control service
[AirPlayRemoteControlService] Received %llu bytes from output context communication channel: %{public}@
[AirPlayRemoteControlService] AVFoundation closed output context communication channel: %{public}@
[AirPlayRemoteControlService] Received %llu bytes from APReceiver communication channel: %{public}@
[AirPlayRemoteControlService] AirPlay closed APReceiver communication channel: %{public}@
[AirPlayRemoteControlService] Created new IO streams for channel with ID %llu -- notifying delegate of new client
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@ (status = %{public}@)
[AVRoutingServer] Authorization request using saved password for %{public}@: %@
[AVRoutingServer] Authorization token failed for %{public}@ : %@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Client %{public}@ is requesting the hosted routing XPC endpoint
[AVRoutingServer] Error getting AirPlay security settings dictionary (OSStatus = %d)
[AVRoutingServer] Failed to get AirPlay security settings. Symbol APReceiverMediaRemoteXPCClient_CopyProperty does not exist.
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Handling authorization request with custom callback for route %{public}@
[AVRoutingServer] Custom authorization callback returned for route %{public}@
[AVRoutingServer] Prompting user with authorization request route %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting run assertion: %{public}@
[AVRoutingServer] Discovery ended. Clearing run assertion %{public}@
[AVRoutingServer] AirPlay Error %ld: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %ld: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
[AVRoutingServer] Must have at least two endpoints in a newly created group.
[AVRoutingServer] Will add as an leader device: %{public}@
[AVRoutingServer] Will add as an additional device: %{public}@
[AVRoutingServer] Unable to find concrete device for %{public}@
[AVRoutingServer] Error adding devices to endpoint: %{public}@
Did receive System will Sleep notification.
Did receive System Did Wake notification.
Did recieve any power callback.
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MediaServerVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@
[MRDRemoteControlNetworkService] Starting network service: %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Stopping network service %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Did accept connection with service: %{public}@ using type: %{public}@ input: %{public}@ output: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement success with service: %{public}@ using type: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement failed with service: %{public}@ error: %{public}@
[MRDRemoteControlNetworkService] Retrying after 30s...
[MRDRemoteControlNetworkService] Updating txtData because deviceInfo changed...
[MRDRemoteControlNetworkService] Updating txtData because device restrictions changed...
[MRDRemoteControlNetworkService] Updating txtData: %{public}@
[MRDRemoteControlNetworkService] Stopping bonjour service %{public}@
[MRDRemoteControlNetworkService] Initializing bonjour service for type %{public}@
Configuring remote control network service with includesPeerToPeer = %s
Client switched route discovery mode to: %lu
Client switched output device discovery mode to: %lu
Taking process assertion for client %@.
Failed to acquire task assertion for client %@.
Error sending remote control command to %{public}@. %{public}s
Failed to acquire process assertion for client %@.
Invalidating process assertion %@
Custom origin registered: %@
Custom origin removed: %@
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
Error blessing %@ for playback initialization. %@
MRDAVSystemEndpointController
MRDRemoteControlServer
MRDXPCMessageHandling
NSObject
MRDDiagnosticCollecting
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDiOSSimulatorNowPlayingDataSource
MRDNowPlayingPlayerClient
MRDNowPlayingPlayerClientArtworkRequest
MRDNowPlayingDataSource
MRDOutputDeviceRoutingDataSource
MRDPinPairingDialog_ATV
MRDAVReconnaissanceSession
MRDBrowsableContentServer
MRDAVHostedDiscoverySession
MRAVDistantRoutingDiscoveryServiceProtocol
MRDHostedRoutingObserverDelegate
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MRDAVHostedRoutingService
NSXPCListenerDelegate
MRDAVHostedDiscoverySessionDelegate
MRDAVHostedRoutingObserver
MRDAVHostedRoutingController
MRDAVHostedEndpointDelegate
MRDExternalDeviceCredentialDatabase
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDPinPairingDialog
MRDAVHostedEndpointExternalDeviceClient
MRAVDistantExternalDeviceClientProtocol
MRDAVHostedEndpoint
MRAVDistantExternalDeviceServiceProtocol
MRHID
MRDNowPlayingPlaybackQueueServer
MRDDeviceInfoDataSource
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceDelegate
MRDDeviceInfoDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDMediaServerAVRoutingDataSource
_MRDMediaServerStateCoordinator
MRDPinPairingDialog_CFUN
MRDAirPlayInputStream
APReceiverMediaRemoteCommunicationChannelDelegate
MRDAirPlayOutputStream
MRDExternalDeviceRemoteServer
NSStreamDelegate
MRCryptoPairingSessionDelegate
MRDAirPlayRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTelevisionServerNetworkServiceDelegate
MRDTextEditingServiceDelegate
MRProtocolClientConnectionDelegate
MRDNowPlayingServer
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDExternalDeviceDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDTaskAssertion
MRDAirPlayRemoteControlService
AVOutputContextCommunicationChannelDelegate
MRDDiagnostic
MRDPhoneCallObserver
CXCallObserverDelegate
MRDSleepAssertion
MRDAVRoutingServer
AVOutputDeviceAuthorizationSessionDelegate
MRDSleepObserver
MRDVirtualAudioInputServer
MRDMediaServerVolumeController
MRDRemoteControlNetworkService
NSNetServiceDelegate
NSCopying
MRDMediaRemoteClient
MRDVirtualTouchDevice
MRDRouteAuthorizationRequest
MRDRunAssertion
MRDRemoteControlCommand
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDOutputDeviceRoute
MRDAVOutputDeviceRoute
@16@0:8
v16@0:8
v24@0:8@16
B24@0:8@16
q16@0:8
v24@0:8q16
@"NSObject<OS_dispatch_queue>"
@"NSMutableOrderedSet"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"NSObject<OS_xpc_object>"16@"MRDMediaRemoteClient"24
v24@0:8@"MRDDiagnostic"16
v32@0:8@16@?24
v40@0:8@16@24@?32
v36@0:8@16@24B32
v40@0:8@16@24@32
@24@0:8@16
@"NSMutableDictionary"
@"MRDPhoneCallObserver"
@24@0:8^{_NSZone=}16
B28@0:8f16^@20
f16@0:8
v24@0:8Q16
@"MRDAVRoutingDataSource"
I24@0:8@16
v28@0:8I16@20
@20@0:8I16
@32@0:8@16@24
@"NSMutableArray"
@"NSString"
@28@0:8@16I24
B32@0:8@16@24
B36@0:8@16@24I32
B20@0:8I16
@?24@0:8@16
I16@0:8
v20@0:8I16
@"MRDAVRoute"
v24@0:8^{__IOHIDEvent=}16
v24@0:8I16I20
^{__IOHIDEventSystemClient=}
@28@0:8@16i24
i16@0:8
@"BKSApplicationStateMonitor"
@"NSSet"
@"_MRContentItemProtobuf"
v28@0:8@16B24
v20@0:8B16
@"_MRNowPlayingPlayerPathProtobuf"
@"NSArray"
@"NSData"
@"_MRPlaybackQueueProtobuf"
@"MRPlaybackQueuePlayerClient"
@"<MRDNowPlayingPlayerClientDelegate>"
@"_MRNowPlayingPlayerProtobuf"
@"<MRDNowPlayingDataSourceDelegate>"
@"AVOutputDeviceDiscoverySession"
v32@0:8d16@?24
@?16@0:8
v24@0:8@?16
@"NSTimer"
v32@0:8@?16@24
v48@0:8@16{?=^QQ}24@40
@"MRDBrowsableContentAPICoordinator"
v28@0:8I16@?20
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?I@"NSError">16
v28@0:8I16@?<v@?@"NSError">20
v24@0:8@?<v@?@"NSArray"@"NSError">16
v32@0:8@"MRDAVHostedRoutingObserver"16@"NSArray"24
@"MRDAVHostedRoutingObserver"
@"NSXPCConnection"
@"MRDAVHostedRoutingController"
@"<MRDAVHostedDiscoverySessionDelegate>"
v32@0:8@"MREmulatedGameController"16@"_MRGameControllerPropertiesProtobuf"24
@40@0:8@16@24@32
Q24@0:8@16
@24@0:8Q16
Q24@0:8Q16
v28@0:8{_MRHIDButtonEvent=IIB}16
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRPasscodeCredentials"
@"_MRDeviceInfoMessageProtobuf"
@"MRSupportedProtocolMessages"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"MRDAVHostedDiscoverySession"16
@"NSXPCListener"
@"NSMutableSet"
@"<MRDHostedRoutingObserverDelegate>"
v32@0:8@"MRDAVHostedEndpoint"16@"MRDAVHostedEndpointExternalDeviceClient"24
@"MRAVConcreteRoutingDiscoverySession"
@"NSHashTable"
^{sqlite3=}
@"MRDMediaRemoteClient"
@"NSDictionary"
@40@0:8Q16@24@32
@32@0:8Q16@24
d16@0:8
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v64@0:8@16@24Q32Q40@48@?56
v32@0:8@16Q24
v64@0:8@"MRTransaction"16@"NSArray"24Q32Q40@"NSObject<OS_dispatch_queue>"48@?<v@?>56
v32@0:8@"MRTransaction"16Q24
Q24@0:8@"MRTransaction"16
@"<MRDPinPairingDialogDelegate>"
v36@0:8f16@20@28
v32@0:8{?=IB[2I]}16
v28@0:8I16@"NSError"20
v24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v36@0:8f16@"NSString"20@"NSString"28
v36@0:8f16@20@?28
v52@0:8I16@20@28@36@?44
v24@0:8@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v24@0:8@"NSError"16
v32@0:8@"MRAVDistantOutputDevice"16@?<v@?f@"NSError">24
v36@0:8f16@"MRAVDistantOutputDevice"20@?<v@?@"NSError">28
v52@0:8I16@"NSArray"20@"NSArray"28@"NSArray"36@?<v@?@"NSError">44
v32@0:8d16@?<v@?@"NSError">24
v36@0:8@16I24@28
v44@0:8@16f24@28@36
v40@0:8@16{?=IB[2I]}24
@"<MRDAVHostedEndpointDelegate>"
@"MRAVConcreteEndpoint"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16@0:8
@48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
v64@0:8@16@24@32@40@48@?56
v56@0:8@16@24@32@40@?48
I32@0:8@16@24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{MGNotificationTokenStruct=}
@"<MRDDeviceInfoDataSourceDelegate>"
v24@0:8@"MRDNowPlayingDataSource"16
v32@0:8@"MRDDeviceInfoDataSource"16@"_MRDeviceInfoMessageProtobuf"24
v24@0:8I16B20
@20@0:8i16
v32@0:8i16@20I28
@"_MROriginProtobuf"
@"MRApplicationActivity"
@"MRDNowPlayingDataSource"
@"MRDDeviceInfoDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDNowPlayingClient"
@"MRDAVRouteExtendedInfo"
v28@0:8B16q20
v32@0:8@16:24
@"<MRDNowPlayingStateObserverDelegate>"
@"MRDOutputDeviceRoutingDataSource"
v32@0:8@"NSData"16@"APReceiverMediaRemoteCommunicationChannel"24
v24@0:8@"APReceiverMediaRemoteCommunicationChannel"16
@32@0:8*16Q24
@28@0:8@16B24
q32@0:8r*16Q24
@"APReceiverMediaRemoteCommunicationChannel"
v32@0:8@"NSStream"16Q24
v40@0:8@16d24@?32
v32@0:8@"MRCryptoPairingSession"16@"NSData"24
v32@0:8@"MRCryptoPairingSession"16@"NSString"24
v24@0:8@"MRCryptoPairingSession"16
v40@0:8@"MRCryptoPairingSession"16d24@?<v@?@"NSString">32
v32@0:8@"MRCryptoPairingSession"16@"NSError"24
v40@0:8@"MRDAirPlayRemoteControlService"16@"NSInputStream"24@"NSOutputStream"32
v40@0:8@16Q24@32
v40@0:8@"MRDExternalDeviceServerClientConnection"16Q24@"_MRGameControllerPropertiesProtobuf"32
v44@0:8@16@24@32B40
v28@0:8@16I24
v32@0:8@"MRDNowPlayingStateObserver"16@"_MRDeviceInfoMessageProtobuf"24
v32@0:8@"MRDNowPlayingStateObserver"16@"_MRNowPlayingClientProtobuf"24
v32@0:8@"MRDNowPlayingStateObserver"16@"_MRNowPlayingPlayerPathProtobuf"24
v36@0:8@"MRDNowPlayingStateObserver"16@"_MRSetStateMessageProtobuf"24B32
v44@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"_MRNowPlayingPlayerPathProtobuf"32B40
v32@0:8@"MRDNowPlayingStateObserver"16@"NSNotification"24
v28@0:8@"MRDNowPlayingStateObserver"16I24
v32@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24
v36@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24B32
v32@0:8@"MRDSleepObserver"16@?<v@?>24
v24@0:8@"MRDSleepObserver"16
v40@0:8@"MRDRemoteControlNetworkService"16@"NSInputStream"24@"NSOutputStream"32
v40@0:8@"MRDTextEditingService"16@"NSString"24@"MRTextEditingAttributes"32
v32@0:8@"MRDTextEditingService"16@"NSString"24
v32@0:8@"MRDTextEditingService"16@"MRTextEditingAttributes"24
v24@0:8@"MRDTextEditingService"16
v32@0:8@"MRProtocolClientConnection"16@"MRProtocolMessage"24
v24@0:8@"MRProtocolClientConnection"16
v40@0:8@16@?24@?32
@24@0:8@?16
B32@0:8@16^@24
v48@0:8q16@?24@?32@?40
v32@0:8q16@?24
B32@0:8q16@24
v40@0:8Q16@24@32
v24@0:8B16B20
v36@0:8{_MRHIDButtonEvent=IIB}16@28
v64@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16Q48@56
@"MRDRemoteControlNetworkService"
@"MRDAirPlayRemoteControlService"
@"MRDVolumeController"
@"CURunLoopThread"
@"NSRunLoop"
@"MRDSystemHIDEventManager"
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"CUPairingManager"
@"<MRDExternalDeviceDelegate>"
v36@0:8@16B24@28
v40@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24@"MRDNowPlayingPlayerClient"32
v40@0:8@"MRDNowPlayingClient"16@"_MRNowPlayingClientProtobuf"24@"_MRNowPlayingPlayerPathProtobuf"32
v32@0:8@"MRDNowPlayingClient"16@"_MRNowPlayingPlayerPathProtobuf"24
v36@0:8@"MRDNowPlayingClient"16B24@"_MRNowPlayingPlayerPathProtobuf"28
v40@0:8@"MRDNowPlayingOriginClient"16@"_MRDeviceInfoMessageProtobuf"24@"_MROriginProtobuf"32
v40@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24@"MRDNowPlayingClient"32
v36@0:8@"MRDNowPlayingOriginClient"16B24@"_MROriginProtobuf"28
v40@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24@"_MRNowPlayingPlayerPathProtobuf"32
v28@0:8@"MRDNowPlayingOriginClient"16I24
v40@0:8@"MRDNowPlayingPlayerClient"16@"_MRNowPlayingPlayerProtobuf"24@"_MRNowPlayingPlayerPathProtobuf"32
v36@0:8@"MRDNowPlayingPlayerClient"16B24@"_MRNowPlayingPlayerPathProtobuf"28
v36@0:8@"MRDNowPlayingPlayerClient"16I24@"_MRNowPlayingPlayerPathProtobuf"28
v40@0:8@"MRDNowPlayingPlayerClient"16@"NSData"24@"_MRNowPlayingPlayerPathProtobuf"32
v40@0:8@"MRDNowPlayingPlayerClient"16@"_MRPlaybackQueueProtobuf"24@"_MRNowPlayingPlayerPathProtobuf"32
v40@0:8@"MRDNowPlayingPlayerClient"16Q24@"_MRNowPlayingPlayerPathProtobuf"32
v40@0:8@"MRDNowPlayingPlayerClient"16@"NSArray"24@"_MRNowPlayingPlayerPathProtobuf"32
v32@0:8B16@20B28
v32@0:8I16@20B28
v28@0:8B16@20
v32@0:8Q16@24
B36@0:8@16@24B32
@"MRDNowPlayingPlaybackQueueServer"
@"MRDNowPlayingOriginClient"
@"MRDNowPlayingPlayerClient"
@"<MRDNowPlayingClientDelegate>"
@"_MRNowPlayingClientProtobuf"
v24@0:8@"MRDMediaRemoteClient"16
v40@0:8@"MRDExternalDeviceRemoteServer"16@"MRDRemoteControlCommand"24@?<v@?I^{__CFArray=}>32
v36@0:8@"MRDVirtualAudioInputServer"16I24@"MRDVirtualAudioInputServerDevice"28
v32@0:8@"MRDPhoneCallController"16@"MRDRemoteControlCommand"24
v20@0:8i16
I20@0:8I16
v48@0:8@16@24@32@?40
v48@0:8@16@24@32^v40
@"NSObject<OS_xpc_object>"
@"MRDNowPlayingServer"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"MRMutableApplicationActivity"
@"NSLock"
@36@0:8q16@24i32
@32@0:8q16@24
@28@0:8q16i24
@"NSObject<OS_dispatch_source>"
@"BKSProcessAssertion"
v24@0:8@"AVOutputContext"16
v40@0:8@"AVOutputContext"16@"NSData"24@"AVOutputContextCommunicationChannel"32
v32@0:8@"AVOutputContext"16@"AVOutputContextCommunicationChannel"24
v40@0:8@16Q24@?32
^{NSMapTable=#}
@"<MRDAirPlayRemoteControlServiceDelegate>"
v44@0:8@16@24@32I40
v48@0:8@16@24@32I40B44
v24@0:8d16
@"NSDate"
@"_MRAVAirPlaySecuritySettingsProtobuf"
v32@0:8@"CXCallObserver"16@"CXCall"24
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
@32@0:8@16d24
B40@0:8@16@24@32
v32@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24
B40@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24@"NSString"32
v28@0:8@16i24
@32@0:8@16q24
v28@0:8i16@20
@32@0:8@16^@24
@"MRDAVHostedRoutingService"
@"MRDAVSystemEndpointController"
@"MSVSystemDialog"
@"MRDRunAssertion"
^{IONotificationPort=}16@0:8
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDVirtualAudioInputServerDelegate>"
v20@0:8f16
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
@"CUBluetoothClient"
@"NSNetService"
@"<MRDTelevisionServerNetworkServiceDelegate>"
v36@0:8@16B24@?28
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRXPCConnection"
B48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
^{__IOHIDUserDevice=}16@0:8
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
@48@0:8@16q24@?32@?40
@44@0:8I16@20@28@36
@24@0:8^{__CFString=}16
@32@0:8^{_NSZone=}16#24
v32@0:8@16^{__CFString=}24
@"MRAVOutputDevice"
@"AVOutputDevice"
bplist00
BuildMachineOSBuild_
CFBundleAllowMixedLocalizations_
CFBundleDevelopmentRegion_
CFBundleExecutable_
CFBundleIdentifier_
CFBundleInfoDictionaryVersion_
CFBundleSupportedPlatformsZDTCompiler_
DTPlatformBuild^DTPlatformName_
DTPlatformVersionZDTSDKBuildYDTSDKNameWDTXcode\DTXcodeBuild_
MinimumOSVersion^UIDeviceFamilyW16B2657
WEnglish\mediaremoted_
com.apple.mediaremotedS6.0
iPhoneSimulator_
"com.apple.compilers.llvm.clang.1_0P_
iphonesimulatorT11.3V15E175_
iphonesimulator11.3T0930U9P98d
#$%&'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string></string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.PairingManager</string>
</array>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
</dict>
</plist>
