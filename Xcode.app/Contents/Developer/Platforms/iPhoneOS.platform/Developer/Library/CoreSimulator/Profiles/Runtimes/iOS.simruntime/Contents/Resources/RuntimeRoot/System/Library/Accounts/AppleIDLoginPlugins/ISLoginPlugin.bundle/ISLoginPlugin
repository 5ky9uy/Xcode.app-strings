sharedAccountsConfig
mutableCopy
setCategory:
copy
init
setHandler:
dictionaryWithDictionary:
removeObjectForKey:
sharedConfig
shouldLog
OSLogObject
class
shouldLogToDisk
stringByReplacingOccurrencesOfString:withString:
alloc
initWithObjects:
pathWithComponents:
stringByDeletingLastPathComponent
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileURLWithPath:
initWithStorageLocation:
objectForKey:
errorWithDomain:code:userInfo:
_setCookiesWithString:userIdentifier:withCookieStorage:
_accountWithParameters:
defaultStore
saveAccount:verifyCredentials:completion:
isActive
resetExpiration
currentDevice
setStoreFrontIdentifier:
enableAllAutomaticDownloadKindsWithCompletionBlock:
_setupHomeSharingWithParameters:
_setupITunesMatchWithParameters:
_setupiTunesBiometricsWithParameters:
handler
objectForKeyedSubscript:
length
accountName
contextForSignIn
setAccountName:
altDSID
setAltDSID:
setAllowsRetry:
setCanSetActiveAccount:
setCanCreateNewAccount:
setPasswordEquivalentToken:
setPromptStyle:
initWithAuthenticationContext:
authenticatedAccount
startWithAuthenticateResponseBlock:
dictionary
activeAccount
numberWithBool:
setObject:forKey:
secureToken
uniqueIdentifier
sharedInstance
hardwareName
lowercaseString
guid
deviceName
productVersion
userAgent
accountWithUniqueIdentifier:
description
setAuthenticated:
setFirstName:
setLastName:
boolValue
respondsToSelector:
setManagedAppleID:
setNewCustomer:
isKindOfClass:
setSecureToken:
setUniqueIdentifier:
isEqualToNumber:
setActive:
initWithObjectsAndKeys:
URLWithString:
cookiesWithResponseHeaderFields:forURL:
setCookies:forUserIdentifier:
setAppleID:
setPassword:
canDetermineGroupID
determineGroupIDWithCompletionHandler:
sharedLibrary
isLibraryEmpty
contextWithBagType:
setUserIdentifier:
initWithURLBagContext:
invalidate
loadWithCompletionBlock:
authenticateWithCompletionHandler:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
serviceIdentifier
parametersForIdentityEstablishmentRequest
parametersForLoginRequest
handleLoginResponse:completion:
.cxx_destruct
_dispatchQueue
_handler
plugins.login
v8@?0
ISAppleIDLoginErrorDomain
library-daap
base-url
com.apple.ISAppleIDLoginPlugin
altDSID
cookies
dsid
email
firstName
lastName
newCustomer
password
storefront
strong-token
weak-token
is-managed-id
%{public}@: %{public}@ called. parameters = %@
{public}
Library
Cookies
com.apple.itunesstored.2.sqlitedb
%{public}@: Failing to complete login. The dsID is missing.
%{public}@: Setting up Home Sharing.
%{public}@: Setting up iTunes Match.
%{public}@: Setting up iTunes Biometrics.
%{public}@: Service setups are complete. Calling the completion handler.
%{public}@: Attempting to authenticate %{public}@. This will help ensure we have needed tokens.
%{public}@: Failed to authenticate %{public}@. The account won't have all needed tokens. error = %@
v24@?0@"SSAuthenticateResponse"8@"NSError"16
account-exists
apple-id
auth-token
device-name
drm-client
drm-type
drm-version
guid
user-agent
iTunes
com.apple.itunes
%{public}@: No account with DSID %{public}@ exists. We'll create a new one.
%{public}@: An account with DSID %{public}@ already exists. A merge will take place.
%{public}@: This is a managed account.
%{public}@: Setting up storefront ID: %{public}@
%{public}@: There's no active account. We'll set %{public}@ as active.
%{public}@: %{public}@ is already the active account.
%{public}@: There's already an active account. We'll add %{public}@ as inactive.
%{public}@: Setting cookies: %@
Set-Cookie
https://itunes.apple.com
%{public}@: Determining Home Sharing group ID.
v20@?0B8@"NSError"12
slot-acquired
%{public}@: Loading URL bag for dsID %{public}@.
%{public}@: library-daap dictionary: %@
v24@?0@"NSDictionary"8@"NSError"16
%{public}@: Authenticating for iCloud Music Library.
v16@?0@"NSError"8
%{public}@: iCloud Music Library isn't available.
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
handler
T@?,C,N,V_handler
%{public}@: %{public}@ called. parameters = %@
%{public}@: Failing to complete login. The dsID is missing.
%{public}@: Setting up Home Sharing.
%{public}@: Setting up iTunes Match.
%{public}@: Setting up iTunes Biometrics.
%{public}@: Service setups are complete. Calling the completion handler.
%{public}@: Attempting to authenticate %{public}@. This will help ensure we have needed tokens.
%{public}@: Failed to authenticate %{public}@. The account won't have all needed tokens. error = %@
%{public}@: No account with DSID %{public}@ exists. We'll create a new one.
%{public}@: An account with DSID %{public}@ already exists. A merge will take place.
%{public}@: This is a managed account.
%{public}@: Setting up storefront ID: %{public}@
%{public}@: There's no active account. We'll set %{public}@ as active.
%{public}@: %{public}@ is already the active account.
%{public}@: There's already an active account. We'll add %{public}@ as inactive.
%{public}@: Setting cookies: %@
%{public}@: Determining Home Sharing group ID.
%{public}@: Loading URL bag for dsID %{public}@.
%{public}@: library-daap dictionary: %@
%{public}@: Authenticating for iCloud Music Library.
%{public}@: iCloud Music Library isn't available.
ISAppleIDLoginPlugin
AAAppleIDLoginPlugin
NSObject
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@?24
@"NSDictionary"16@0:8
v32@0:8@"NSDictionary"16@?<v@?B@"NSError">24
@24@0:8@16
v40@0:8@16@24@32
v24@0:8@16
v16@0:8
@?16@0:8
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
