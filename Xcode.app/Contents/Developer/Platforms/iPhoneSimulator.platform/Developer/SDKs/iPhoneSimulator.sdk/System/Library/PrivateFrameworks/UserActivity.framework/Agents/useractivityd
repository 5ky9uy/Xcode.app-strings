%@ %@
timestamp
bundleIdentifier
activityType
payloadSize
transferSpeed
transferDurationNsec
errorCode
cancelled
source
browserFallback
suggestedActionType
hasTimestamp
TB,N
TQ,N,V_timestamp
hasBundleIdentifier
TB,R,N
T@"NSString",&,N,V_bundleIdentifier
hasActivityType
T@"NSString",&,N,V_activityType
hasPayloadSize
TQ,N,V_payloadSize
hasTransferSpeed
TQ,N,V_transferSpeed
hasTransferDurationNsec
TQ,N,V_transferDurationNsec
hasErrorCode
TQ,N,V_errorCode
hasCancelled
TB,N,V_cancelled
hasSource
TI,N,V_source
hasBrowserFallback
TB,N,V_browserFallback
hasSuggestedActionType
TI,N,V_suggestedActionType
clientWriteSize
clientWriteTime
clientWriteSpeed
usedStreams
streamOpenDelay
streamDataSize
streamDataXferTime
streamDataXferSpeed
totalTime
hasClientWriteSize
TQ,N,V_clientWriteSize
hasClientWriteTime
TQ,N,V_clientWriteTime
hasClientWriteSpeed
TQ,N,V_clientWriteSpeed
hasUsedStreams
TB,N,V_usedStreams
hasStreamOpenDelay
TQ,N,V_streamOpenDelay
hasStreamDataSize
TQ,N,V_streamDataSize
hasStreamDataXferTime
TQ,N,V_streamDataXferTime
hasStreamDataXferSpeed
TQ,N,V_streamDataXferSpeed
hasTotalTime
TQ,N,V_totalTime
Tq,N,V_errorCode
0123456789abcdef
%c%c
PingNotifier
com.apple.ping
v16@?0@"NSError"8
PingNotifier: %ld outstanding PONG responses; %ld total pongs sent.
pongItems
T@"NSMutableSet",R,C,V_pongItems
pongCount
Tq,V_pongCount
wasActive
 firstTime
Active
v8@?0
v24@?0Q8Q16
active
TB,V_active
block
T@?,C,V_block
queue
T@"NSObject<OS_dispatch_queue>",&,V_queue
userActivityNotificationRef
TQ,V_userActivityNotificationRef
startTime
T@"NSDate",&,V_startTime
firstTime
TB,V_firstTime
name
T@"NSString",R,V_name
enabled
TB,V_enabled
interval
Td,V_interval
com.apple.private.handoff.ping
PING!
com.apple.private.handoff.pong
PONG!
%@: payloadSize=%ld
wasContinuedBlock
T@?,C,V_wasContinuedBlock
SimReceiver
%@:%@
### UASimulatorReceiver: %@, %ld items
ACTIVE
receivedItems
T@"NSArray",R,C,V_receivedItems
simulator
T@"UASimulator",R,&,V_simulator
reason
hasReason
TI,N,V_reason
advertisedItem
T@"UAUserActivityInfo",&,V_advertisedItem
com.apple.private.coreservices.lsuseractivityd.bestappsuggestion
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
bestAppsListener
T@"NSXPCListener",&,V_bestAppsListener
supressionRec(%@ hard=%@ until=%@ (lastInterestingTime=%@)
itemUUID
T@"NSUUID",C,V_itemUUID
hardSupressUntil
T@"NSDate",C,V_hardSupressUntil
supressUntil
T@"NSDate",C,V_supressUntil
lastInterestingTime
T@"NSDate",C,V_lastInterestingTime
(PID:%ld)
BestApp
bestApp
%@/%@ %@ %@
%@/%ld:%@, next=%@/%lld
com.apple.AppStore
connection
T@"NSXPCConnection",&,V_connection
supressedUntil
T@"NSMutableDictionary",&,V_supressedUntil
wantsBestAppChangedNotifications
TB,V_wantsBestAppChangedNotifications
scheduler
T@"UADispatchScheduler",&,V_scheduler
possibleItems
T@"NSMutableDictionary",&,V_possibleItems
lastItemUUID
T@"NSUUID",C,V_lastItemUUID
lastItemWhen
T@"NSDate",C,V_lastItemWhen
lastItemStr
T@"NSString",C,V_lastItemStr
-sharingAdvertiser
-loggingAdvertiser
-noSandbox
-enableNetworkUserActivity
Nov  3 2016
16:52:10
Logger
AppsActivityCreator
BestAppController
PBClientController
PingController
%@%s
/System/Library/PrivateFrameworks/UserActivity.framework/
payloadXferTime
hasPayloadXferTime
TQ,N,V_payloadXferTime
pasteboard-server
shared-pasteboard/
kLocalPasteboardBlobName
kRemotePasteboardBlobName
currentLocalBlobPath
T@"NSString",&,V_currentLocalBlobPath
currentRemoteBlobPath
T@"NSString",&,V_currentRemoteBlobPath
unknown
com.apple.continuity.activity.isresumable.%@.%@
com.apple.continuity.activity.discovered.%@
com.apple.continuity.activity.wassuggested.%@.%@
%@.from_paired_device
com.apple.continuity.activity.wascontinued.%@.%@
%@.payload_size
%@.transfer_speed
%@.error
%@.cancelled
%@.duration
%@.suggestedActionType
%@.source.lock_screen
%@.source.multitasker
%@.browser_fallback
%@(%@ %@ browserFallback=%@ %ld/%.2fk/%.4f sec %@ %@ %lx)
T@"NSString",C,V_bundleIdentifier
T@"NSString",C,V_activityType
TQ,V_suggestedActionType
fromPairedDevice
TB,GisFromPairedDevice,V_fromPairedDevice
TB,GisBrowserFallback,V_browserFallback
TQ,V_payloadSize
Td,V_transferSpeed
transferDuration
Td,V_transferDuration
error
T@"NSError",C,V_error
TB,GisCancelled,V_cancelled
interactionType
Ti,V_interactionType
scheduledForSubmission
TB,V_scheduledForSubmission
:com.apple.
com.apple.
com.apple.iphone
com.apple.watch
com.apple.ipad
com.apple.ipod-touch
com.apple.ipod
public.computer
public.device
deviceType
T@"NSString",R,&
UAReceiverScanTypeUserActivity
UAReceiverScanTypeClipboard
%s: %@
receiving
TB,R,D
scanningForTypes
T@"NSSet",C,VscanningForTypes
(was already terminated)
%@: %@
uuid
T@"NSUUID",R,&,V_uuid
manager
T@"UACornerActionManager",R,&,V_manager
T@"NSString",C,V_name
priority
Tq,R,V_priority
TB,R
suspended
terminated
TB,R,V_terminated
originatingClient
T@"UAUserActivityClientProcess",W,V_originatingClient
AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE
EEEEEEEE-DDDD-CCCC-BBBB-AAAAAAAAAAAA
debugType
TQ,V_debugType
SimAdvertiser
### UASimulatorAdvertiser:
ReplayCreator
ReplayController: ITEM=%@
item
T@"UAUserActivityInfo",&,V_item
com.apple.coreservices.useractivityd.dynamicuseractivites
kUADynamicUserActivitiesKey
cornerActionManagerQ
idleDetermination
updateAdvertisedItems
SuspendAdvertisingIdleTracker
v12@?0B8
com.apple.coreservices.useractivity.reconnection
EnableDebugging
EnableDebugLogFile
q24@?0@"UAClientController"8@"UAClientController"16
because the item contains an unsynchronized cloud document item.
com.apple.screensaver.didstart
screenSaver
com.apple.screensaver.didstop
inactive
can advertise
FrameworkBundleID
com.apple.useractivityd
AssertType
PreventUserIdleSystemSleep
AssertName
Handoff
com.apple.language.changed
v12@?0i8
com.apple.backboardd.backlight.changed
v16@?0^{__CFString=}8
screenDimmedPowerAssertion
deviceUILockAssertion
kLSUserActivityDebuggingInfoCurrentAdvertisedItem
kLSUserActivityDebuggingInfoLastAdvertisedBytes
kLSUserActivityDebuggingInfoAdvertising
kLSUserActivityDebuggingInfoLastReceivedAdvertisementItem
kLSUserActivityDebuggingInfoDevices
Dynamic User Activities: (domain=%@) %@
Manager status: pid=%lld, uid=%lld, uptime=%@ %@ (Version %s, built %s %s %s)
16:52:11
q24@?0@"UAAdvertiser"8@"UAAdvertiser"16
ADVERTISING:
*** No UAAdvertisers defined at present, so no advertising is taking place.
RECEIVING:
No UAReceivers defined at present, so no activities will be received.
Manager status: pid=%lld, uid=%lld, uptime=%@ %@ runtime=%@ (Version %s, built %s %s %s)
### ADVERTISERS (%ld total) %@ nextCheck=%@
(SUSPENDED)
### RECEIVERS (%ld total)
### AdvertiseableItems ( that might be broadcast to other machines/remind me later)
 - %@%@
(advertised) 
CornerActionItems (potential items to appear on this device as resumable from other devices)
- %@
Pinned Activity Info
### NOTIFIERS (%ld total) nextCheck=%@
Idle determination:%s suspended=%s%s%s pick=%ld/%@ idle=%ld/%@ bestApp=%ld/%@
 userIdle
 locked:YES
 screenSaver:YES
PERF:%@
### HANDLERS: (%ld total)
Devices activities have been received from:
 - %@ %@%@%@
 (active)
NSUserActivityTypeBrowsingWeb
com.apple.mobilesafari
bestAppChangeNotificationsSet
T@"NSMutableSet",R,C
advertisementTimes
T@"NSMutableArray",&,V_advertisementTimes
nextUserIdleDeterminationScheduler
T@"UADispatchScheduler",R,&,V_nextUserIdleDeterminationScheduler
idleActivityNotificationHasBeenSuspended
TB,V_idleActivityNotificationHasBeenSuspended
nextUpdateAdvertisedItemsScheduler
T@"UADispatchScheduler",R,&,V_nextUpdateAdvertisedItemsScheduler
nextScheduleBestAppDeterminationScheduler
T@"UADispatchScheduler",R,&,V_nextScheduleBestAppDeterminationScheduler
systemHasSuspendedAdvertisements
screenSaverActive
TB,V_screenSaverActive
screenSaverActivePowerAssertion
T@"UATimedPowerAssertions",&,V_screenSaverActivePowerAssertion
deviceUILocked
TB,V_deviceUILocked
deviceUILockedPowerAssertion
T@"UATimedPowerAssertions",&,V_deviceUILockedPowerAssertion
screenDimmed
TB,V_screenDimmed
T@"UATimedPowerAssertions",&,V_screenDimmedPowerAssertion
backlightLevelToken
Ti,V_backlightLevelToken
holdPowerAssertionUntil
T@"NSDate",&,V_holdPowerAssertionUntil
holdPowerAssertionSourceTimer
T@"NSObject<OS_dispatch_source>",&,V_holdPowerAssertionSourceTimer
holdPowerAssertion
TI,V_holdPowerAssertion
userIdleTracker
T@"PowerManagerIdleTracker",&,V_userIdleTracker
userIsActive
TB,V_userIsActive
systemIsIdle
TB,V_systemIsIdle
debugManager
T@"ActivityManagerDebuggingManager",R,&,V_debugManager
lastTimePayloadWasRequestedForAdvertisedItem
T@"NSDate",C,V_lastTimePayloadWasRequestedForAdvertisedItem
systemPreferenceChangedToken
Ti,V_systemPreferenceChangedToken
uiLockStatusToken
Ti,V_uiLockStatusToken
devicesAndActivityTimes
T@"NSMutableDictionary",&,V_devicesAndActivityTimes
lastReceivedAdvertisementItem
T@"SharingBTLESuggestedItem",&,V_lastReceivedAdvertisementItem
pingMode
TB,V_pingMode
avgPingTime
Td,V_avgPingTime
pingStart
T@"NSDate",&,V_pingStart
pongSem
T@"NSObject<OS_dispatch_semaphore>",&,V_pongSem
pongs
T@"UAPingResults",&,V_pongs
pongTimer
T@"NSTimer",&,V_pongTimer
T@"NSUUID",R,C,V_uuid
activeDevicesIdentifiers
T@"NSSet",R
userDefaults
T@"NSUserDefaults",R,&,V_userDefaults
batterySaverModeEnabled
TB,R,GisBatterySaverModeEnabled,V_batterySaverModeEnabled
pinnedUserActivityInfoItem
T@"UAUserActivityInfo",&,V_pinnedUserActivityInfoItem
screenDimmedPinnedItems
T@"NSArray",C,V_screenDimmedPinnedItems
currentAdvertisementSignalUpdateThreadIfUserActivityDropsBelow
Td,V_currentAdvertisementSignalUpdateThreadIfUserActivityDropsBelow
backlightOn
TB,GisBacklightOn,V_backlightOn
activityAdvertisingAllowed
activityReceivingAllowed
advertisingSuspended
advertisers
T@"NSSet",R,C
receivingSuspended
TB,V_receivingSuspended
receivers
clients
notifiers
handlers
allHandlers
pasteboardController
T@"UASharedPasteboardClientController",&,V_pasteboardController
pingController
T@"UAPingController",&,V_pingController
mainDispatchQ
T@"NSObject<OS_dispatch_queue>",&,V_mainDispatchQ
PROJECT:UserActivity-
v24@?0@"NSString"8^B16
client
T@"UAPingClient",R,&,V_client
notifier
T@"UAPingNotifier",R,&,V_notifier
T@"NSObject<OS_dispatch_source>",R,&,V_source
T@"NSObject<OS_dispatch_queue>",R,&,V_queue
executingGroup
T@"NSObject<OS_dispatch_group>",R,&,V_executingGroup
frequency
Td,V_frequency
T@?,R,&,V_block
runCount
TQ,R,V_runCount
nextTime
TQ,R,V_nextTime
notifiedItems
T@"NSSet",C
items
T@"NSSet",C,D
com.apple.coreservices.uauseractivitypasteboardclient.xpc
com.apple.private.coreservices.useractivityd.sharedpasteboard
com.apple.coreservices.uasharedpboardclientq
/System/Library/PrivateFrameworks/UserActivity.framework
com.apple.continuitypasteboard
v24@?0@"UASharedPasteboardInfo"8@"NSError"16
v24@?0@"NSData"8@"NSError"16
UASharedPasteboard
v24@?0@"NSInputStream"8@"NSOutputStream"16
v24@?0@"UASharedPasteboardInfoWrapper"8@"NSError"16
v32@?0@"NSInputStream"8@"NSOutputStream"16@"NSError"24
v24@?0Q8@"NSError"16
main-label.title
Localizable
main-label.default-title
cancel-button.title
com.apple.UserActivity.UASharedPasteboardiOSUI
##### Screen Sharing session in progress, Universal Clipboard is disabled #####
##### Continuity Pasteboard: Remote Pasteboard:%@, Local generation=%ld, reflection:%@
Available
Unavailable
  %@
    "%@"
clientq
T@"NSObject<OS_dispatch_queue>",&,V_clientq
xpclistener
T@"NSXPCListener",&,V_xpclistener
clientConnection
T@"NSXPCConnection",&,V_clientConnection
currentLocalTypes
T@"UASharedPasteboardInfo",&,V_currentLocalTypes
currentLocalGeneration
TQ,V_currentLocalGeneration
localTimeout
T@"NSTimer",&,V_localTimeout
hasFetchedLocalData
TB,V_hasFetchedLocalData
currentLocalPasteboard
T@"NSArray",&,V_currentLocalPasteboard
currentLocalPasteboardSize
Tq,V_currentLocalPasteboardSize
advertiseTypes
TB,V_advertiseTypes
localReflection
remoteAvalible
TB,V_remoteAvalible
requester
T@"UASharedPasteboardDataRequester",&,V_requester
pasteAdvertiser
T@"SFCompanionAdvertiser",&,V_pasteAdvertiser
hasCurrentRemoteData
TB,V_hasCurrentRemoteData
currentRemoteData
T@"UASharedPasteboardInfo",&,V_currentRemoteData
pboardFetchSem
T@"NSObject<OS_dispatch_semaphore>",&,V_pboardFetchSem
pboardInfoToSend
T@"UASharedPasteboardInfoWrapper",&,V_pboardInfoToSend
outStream
T@"UASharedPasteboardOutputStreamManager",&,V_outStream
inStream
T@"UASharedPasteboardInputStreamManager",&,V_inStream
fetchProgress
T@"NSProgress",&,V_fetchProgress
showUITimer
T@"NSTimer",&,V_showUITimer
dontHideUIBefore
T@"NSDate",&,V_dontHideUIBefore
isUIVisible
TB,V_isUIVisible
osxUIConnection
T@"NSXPCConnection",&,V_osxUIConnection
notificationRef
T^{__CFUserNotification=},V_notificationRef
pasteFetchStartTime
TQ,V_pasteFetchStartTime
localSendStartTime
TQ,V_localSendStartTime
streamOpenStartTime
TQ,V_streamOpenStartTime
streamXferStartTime
TQ,V_streamXferStartTime
pasteInfo
T@"AWDHandoffRemotePasteboardWasRequested",&,V_pasteInfo
localInfo
T@"AWDHandoffDidSendLocalPasteboard",&,V_localInfo
uaBundle
T@"NSBundle",&,V_uaBundle
screenWatcherPresent
TB,GisScreenWatcherPresent
PingCreator
PingCreator:%@
hasBeenUsedAtLeastOnce
TB,V_hasBeenUsedAtLeastOnce
controller
T@"UAPingController",R,&,V_controller
-[UATimedPowerAssertions createAssertion]
PowerAssertions:
 %@{%@/%@}
ACTIVE:
timerSource
T@"NSObject<OS_dispatch_source>",R,&,V_timerSource
timerExpiration
T@"NSDate",C,V_timerExpiration
assertion
TI,R,V_assertion
T@"NSObject<OS_dispatch_queue>",R,&,V_mainDispatchQ
nextTimer
TQ,V_nextTimer
needToCallBlock
TB,V_needToCallBlock
T@"NSString",R,C,V_name
SimCreator
SimulatorAdvertisementCreator:%@ %@
(would be) 
Replay
ReplayAdvertiser
ReplayReceiver
iPhone5,1
Mac OS X
14A100
PEER
Orangeish
Greenish
BROADCAST $%@ %@
http://
HELP
COMMANDS: ...
 - ADVERTISEITEM:<tag> <activitytype> [<archivedUserActivityData>]
HANDOFF
VERSION
STARTUP
TERMINATE
ADVERTISEITEM
PAYLOAD
PULL
REMOVEITEM
PEERINFO
SF[$
RECEIVE
BROADCAST
REQUESTPAYLOAD
RETURNPAYLOADERROR $%@ %@
RETURNPAYLOAD $%@ [$%@]
v32@?0@"NSUUID"8@"NSData"16@"NSError"24
RETURNPAYLOAD
REQUESTPAYLOAD $%@
advertiser
T@"UAActivityReplayAdvertiser",&,V_advertiser
receiver
T@"UAActivityReplayReceiver",&,V_receiver
T@"UAReplayClientController",&,V_client
mockAdvertiser
T@"UAMockActivityAdvertiser",R,&,V_mockAdvertiser
mockScanner
T@"UAMockActivityScanner",R,&,V_mockScanner
T@"NSMutableDictionary",&,V_items
pairedPeer
T@"SFPeerDevice",&,V_pairedPeer
0123456789abcdefABCDEF$
0123456789abcdefABCDEF-
strings
Localization
iOSSimulator1,1
iOSSimulator
14A101
iOS Simulator
com.apple.coreservices.lsuseractivity.simulatorsupport
simulatorPort
TI,V_simulatorPort
ourPeerDevice
T@"SFPeerDevice",&,V_ourPeerDevice
dispatchQ
T@"NSObject<OS_dispatch_queue>",&,V_dispatchQ
simulators
T@"NSSet",R,&
ActivityAdvertisingAllowed
ActivityReceivingAllowed
ClipboardSharingEnabled
UserIdleInterval
MinimumTimeForAnAdvertisementToLive
MinimumTimeToLiveAfterRemovingAdvertisement
ScreenSaverRemovalDelay
ScreenDimRemovalDelay
DeviceLockAdvertisementDelay
DeviceLockPasteboardAdvertisementDelay
CornerItemSupressionInternal
BestAppSuggestionSupressionIntervalForUnchangingItem
AdvertisedItemWhichIsWebBrowserIntervalToRememberEarlierActivities
IntervalToAskClientWithUnsynchronizedDocumentsToUpdate
MaximumTimeoutAfterAdvertisingEndsThatActivityCanBeResumed
CornerItemTimeout
UACornerActionItemAdditionalTimeToLiveAfterValidIntervalExpires
UACornerActionItemMaximumTimeForBTLEItemToLive
UAReceivedBTLEItemTimeToLiveAfterDeviceLostIfPayloadIsQueued
ActivePayloadUpdateInterval
MaximumTimeoutToWaitForClientProcessToUpdateActivityInformation
MaximumActivityPayloadSizeInBytes
ActivityPayloadWarningSizeInBytes
MinimumIntervalBetweenAdvertisements
MaximumAdvertisementsPerTimeInterval
MaximumAdvertisementsTimeInterval
EnableHandoffInPowerSaverMode
ActivityBTLESharingEnabled
LoggingAdvertiserEnabled
UASharedPboardLocalAdvertisementTime
UASharedPboardLocalClearedAdvertisementTime
UASharedPboardRemoteAvailableTimeout
UASharedPboardLocalReflection
UASharedPboardEmbeddedPayloadSizeLimitInBytes
UASharedPboardShowUIDelayInSec
UASharedPboardUIMinimumDurrationInSec
UASharedPboardHideUIDelayInSec
TimeRemainingDelay
IgnoreLostDevice
IgnoreBluetoothDisabled
DEBUGValidatePayloadFetchTimeInterval
DEBUGValidateRetryPayloadFetchFailureInterval
DEBUGValidateSampleResponseMinimumActivityPayloadSizeInBytes
DEBUGValidateSampleResponseMaximumActivityPayloadSizeInBytes
DEBUGAdditionalPayloadReceiveTimeInterval
DEBUGUserActivityTimeOffset
DEBUGForceNewPayloadEncoder
DEBUGForceOldPayloadEncoder
DEBUGDontSendActivityTitle
DEBUGReadvertiseImmediately
DEBUGEnablePinging
DEBUGEnablePrefetch
DEBUGCrossoverAllActivities
EnableSharingFramework
EnableNetworkControlListener
EnableAutomaticRendevousPairing
NetworkControlListenerPort
SystemIdleRemovalDelay
RendevousPairingType
 %@=%@ (%@)
 %@=%@
Defaults: (domain=%@) %@
enableSharingFramework
com.apple.system.batterysavermode
LocalReceiver
LocalItems:%@
T@"UAUserActivityClientProcessesController",R,&,V_controller
com.apple.coreservices.lsuseractivitymanager.xpc
com.apple.coreservices.uatoolmanager.xpc
com.apple.coreservices.lsbestappsuggestionmanager.xpc
com.apple.coreservices.uasharedpasteboardmanager.xpc
com.apple.coreservices.lsuseractivityadministration.xpc
Logging
%@/Logs/Handoff/
%@/UALoggingAdvertiserItems.log
Advertisable:%@
ITEM:%@ %@ [0x%@]
ActivityLogger: Logging to %@.
UALoggingAdvertiser: ADVERTISING RESUMED.
UALoggingAdvertiser: ADVERTISING SUSPENDED.
outputFile
T@"NSFileHandle",&,V_outputFile
logFileDirectoryPath
T@"NSString",&,V_logFileDirectoryPath
logFilePath
T@"NSString",&,V_logFilePath
(%@, %@)
layoutUpdate
v16@?0@"FBSDisplayLayout"8
UIApplicationElement
TB,R,N,GisUIApplicationElement
T@"NSString",R,C,N
hasKeyboardFocus
identifier
frame
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
referenceFrame
level
Tq,R,N
com.apple.lock-screen
LSLivePastProcessExit
com.apple.coreservices.ping
options.%@
q24@?0@8@16
##### Client processes: %ld clients
 Layout:
%@ %@,
 - %@%@%@
Order:{
%@/%@ 
localReceiver
T@"UALocalItemReceiver",&,V_localReceiver
visibleUserActivityClients
layoutMonitor
T@"FBSDisplayLayoutMonitor",&,VlayoutMonitor
layout
T@"FBSDisplayLayout",&,V_layout
layoutUpdateScheduler
T@"UADispatchScheduler",R,&,V_layoutUpdateScheduler
ignoreLockScreenUntil
T@"NSDate",C,V_ignoreLockScreenUntil
userActivityClients
T@"NSArray",R,C,D
additionalUserActivityAdvertisableItems
appStateMonitor
T@"BKSApplicationStateMonitor",&,V_appStateMonitor
FullScreen
Overlay
pbpaste
pbtypes
peer
T@"SFPeerDevice",&,V_peer
scanner
T@"SFActivityScanner",&,V_scanner
teamID
type
BTLEUserActivityDataEncoding:"%@" userInfo=%@ %@%@%@
stream=%@
webPageURL=%@
 {teamID=%@ activityType=%@}
uniqueIdentifier
T@"NSUUID",C,V_ununiqueIdentifier
title
T@"NSString",C,V_title
when
T@"NSDate",C,V_when
userInfoPayload
T@"NSData",C,V_userInfoPayload
webpageURL
T@"NSURL",C,V_webpageURL
streamsData
T@"NSData",C,V_streamsData
T@"NSString",C,V_teamID
SharingReceiver
SharingReceiverPeriodic
-[UASharingReceiver receiveAdvertisement:scanner:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/UserActivity_Sim/UserActivity-63.15/Server/UASharingReceiver.m
advertisement
advertisement.device
SharingBTLE receiever %@%@%@ %@
 Clip
(NO SFActivityScanner) 
%ld scanners
 - %@%@%@ app:%@ %@ data=%@, from %@ at %@ remove at %@%s%s
 (PayloadReq)
 (PayloadAv)
 ActiveDevices:
, pb
(%@,%@%@)
activeDevices
periodicCleanup
T@"UADispatchScheduler",R,&,V_periodicCleanup
forceScanning
TB,V_forceScanning
lastSeenPasteboardDevice
T@"SFPeerDevice",&,V_lastSeenPasteboardDevice
lastSeenPasteboardVersionBit
Tq,V_lastSeenPasteboardVersionBit
remotePboardTimer
T@"NSTimer",&,V_remotePboardTimer
sfActivityScanners
PBDONE
Invalid message header
Invalid delimiter before pbinfo
Invalid delimiter before pb data
stream
T@"NSInputStream",&,V_stream
T@"NSOutputStream",&,V_outStream
file
T@"NSFileHandle",&,V_file
progress
T@"NSProgress",&,V_progress
handler
T@?,C,V_handler
typesToReceive
T@"NSSet",&,V_typesToReceive
pbwrapper
T@"UASharedPasteboardInfoWrapper",&,V_pbwrapper
receivedData
T@"NSMutableData",&,V_receivedData
streamStartTime
TQ,V_streamStartTime
timeRemaining
TQ,V_timeRemaining
bytesReceived
Tq,V_bytesReceived
expectedLength
Tq,V_expectedLength
state
TQ,V_state
receivedDelem
TB,V_receivedDelem
kUADynamicUserActivityHashKey
kUADynamicUserActivityDynamicActivityKey
kUADynamicUserActivityAppActivityKey
NOTIFICATION#
Watch
com.apple.GameController
BTLEItem:%@ %@%@ id=%@ when=%@ %@device=%@
%@%@%@/%lx
 webPage
 noPayload
remove:%@ 
 options=%@
 payload=$%@
 payloadRequested
 payload NA
UASharingBTLEItem:%@ %@/%@ %@
Last BTLE payload fetched for item %@, at %@, from %@
payloadRequestedCompletions
T@"NSMutableSet",&,V_payloadRequestedCompletions
T@"SFActivityScanner",R,&,V_scanner
T@"UASharingReceiver",R,&,V_receiver
BTLEPayloadData
T@"NSData",R,C,D
advertisementPayload
T@"SharingBTLEAdvertisementPayload",C,V_advertisementPayload
optionBits
TI,V_optionBits
currentUntilDate
T@"NSDate",C,V_currentUntilDate
teamIDs
T@"NSSet",C,V_teamIDs
dontPrefetchBefore
T@"NSDate",C,V_dontPrefetchBefore
removeAfter
T@"NSDate",C,V_removeAfter
payloadAvailabilityDelay
Td,V_payloadAvailabilityDelay
useractivity-team-identifier
com.apple.developer.team-identifier
0000000000
pasteboardTypes
T@"NSSet",&,V_pasteboardTypes
generation
Tq,V_generation
T@"NSOutputStream",&,V_stream
T@"NSInputStream",&,V_inStream
dataFile
T@"NSFileHandle",&,V_dataFile
typesToSend
T@"NSSet",&,V_typesToSend
sendErrorHandler
T@?,C,V_sendErrorHandler
currentSendData
T@"NSData",&,V_currentSendData
byteIndex
Tq,V_byteIndex
infoSent
T^B,V_infoSent
dataSent
TQ,V_dataSent
backupTimer
T@"NSTimer",&,V_backupTimer
T@"UAUserActivityClientProcess",W,V_client
alwaysPick
alwaysEligible
eligibleInBackground
%@ { type = %@; uuid = %@; title = "%@"; activityType = "%@"; userInfo = %@; url = "%@" %@ eligible=%@}
 webPageURL=%@
!eligibleForHandoff
%@%@%@ %@ %ld
%@%@%@ %@ "%@" %@%@%@%s%s%s %@%@
 dirty*
 !handOff
 AlwaysPickPriority=%li 
 cloudDoc
 unSynchCloudDoc
 fileProv
 url=%@
fakeAppleID@apple.com
T@"UAActivityReplay",&,V_controller
delegate
T@"<SFActivityAdvertiserDelegate>",V_delegate
T@"<SFActivityScannerDelegate>",V_delegate
version
payload
options
device
MockAdvertisement($%@/%@ from %@)
supportsSecureCoding
advertisementVersion
Tq,V_advertisementVersion
T@"NSData",C,V_advertisementPayload
T@"NSDictionary",C,V_options
T@"SFPeerDevice",&,V_device
kUADynamicUserActivityTeamIDKey
com.apple.private.coreservices.lsuseractivityd.LSAlwaysPick
com.apple.private.coreservices.canopenactivity
com.apple.private.coreservices.cangetcurrentactivityinfo
com.apple.private.coreservices.canalwaysadvertise
com.apple.private.coreservices.alwaysEligibleEvenWhenInBackground
application-identifier
v16@?0@"NSDictionary"8
UAUserActivityDebugStateChanged
v28@?0@"UAUserActivityInfo"8B16@"NSError"20
UserActivityClient(pid=%d/%@ uuids=%@)
CFBundleIdentifier
%@:%@:%@
NULL
UAUserActivity
stream=%@ 
(already current)
, and updating advertisment.
 iCloudDoc
 unSynchronizediCloudDoc
%@ pid=%d currentActive=%@%@
(dirty) 
%@%@ 
(dirty)
dirtyUUIDs
T@"NSMutableSet",C,V_dirtyUUIDs
userActivityAdvertisableItemsByUUID
T@"NSMutableDictionary",&,V_userActivityAdvertisableItemsByUUID
T@"UACornerActionManager",W,V_manager
clientIsSandboxed
TB,V_clientIsSandboxed
applicationIdentifier
T@"NSString",R,C,V_applicationIdentifier
allowedToAccessAnyItem
TC,V_allowedToAccessAnyItem
uniqueIdentifiers
T@"NSArray",R
T@"NSXPCConnection",R,W,V_connection
auditToken
T@"UAAuditToken",R,&,V_auditToken
currentAdvertisableActivity
T@"UAUserActivityAdvertisableItem",R,&,V_currentAdvertisableActivity
currentActivityUUID
T@"NSUUID",R,C,D
frontmost
TB,V_frontmost
allowedToUseLSAlwaysEligible
TB,V_allowedToUseLSAlwaysEligible
allowedToUseEligibleEvenWhenInBackground
TB,V_allowedToUseEligibleEvenWhenInBackground
allowedToUseLSAlwaysPick
TB,V_allowedToUseLSAlwaysPick
allowedToUseUAAlwaysAdvertise
TB,V_allowedToUseUAAlwaysAdvertise
allowedToGetCurrentActivityInfo
TB,V_allowedToGetCurrentActivityInfo
T@"NSString",R,C,V_bundleIdentifier
payloadXferSpeed
streamOpenTime
hasPayloadXferSpeed
TQ,N,V_payloadXferSpeed
hasStreamOpenTime
TQ,N,V_streamOpenTime
ReplayRendevousHandler
_handoff._tcp.
local
Network, %@  %@
listening, port=%ld
browsing for %@ in %@
Handoff:%@
NSNetServicesErrorDomain
NSNetServicesErrorCode
browserLookup
T@"NSNetServiceBrowser",&,V_browserLookup
T@"NSString",C,Vname
T@"NSString",C,V_type
domain
T@"NSString",C,V_domain
listeningService
T@"NSNetService",&,V_listeningService
From %@
From host
__kCFStreamPropertyPeerAddress
HANDOFF v%g %@
PEERINFO SF[$%@]
VERSION v%g %@
# Terminating connection because we seem to already have a connection to this peer.
TERMINATE
NetworkReplay:%@%@ peer:%@/%@ %@
TERMINATED
%@/%ld
inputStream
T@"NSInputStream",&,V_inputStream
outputStream
T@"NSOutputStream",&,V_outputStream
readBuffer
T@"NSMutableData",&,V_readBuffer
writeBuffer
T@"NSMutableData",&,V_writeBuffer
peerName
T@"NSString",C,V_peerName
peerUUID
T@"NSUUID",C,V_peerUUID
0123456789abcdef
.. %ld ..
forever
%ld seconds
roughly %ld minutes
roughly %ld hours
roughly %ld days
a long time
%2.1g seconds
%2ld seconds
%3ld seconds
roughly %2ld minutes
roughly %2ld hours
UserActivity
NotificationType
HardCodedType 
HeroApp 
OpenURL 
UASuggestedActionType=%ld
-[SharingBTLEAdvertisementPayload initWithItem:isCurrent:when:versionFlags:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/UserActivity_Sim/UserActivity-63.15/Server/SharingAdvertisementsPayload.mm
[hashedActivityType length] == sizeof( _bytes.hashedAdvertisementBytes )
UAPasteboardAvailable
UAPasteboardVersionBit
-[SharingBTLEAdvertisementPayload initWithType:string:dynamicType:teamID:webpageURL:options:isCurrent:when:versionFlags:]
-[SharingBTLEAdvertisementPayload setPayloadBytes:]
[payloadBytes length] == sizeof( sizeof( _bytes.hashedAdvertisementBytes ) )
$%@/%@%d%@%@%@%@
timeOffset
TC,D
epochStart
T@"NSDate",C,V_epochStart
current
TB,GisCurrent
time
T@"NSDate",R,C,D
currentUntil
validUntil
epochEnd
T@"NSDate",R,C,V_epochEnd
payloadBytes
T@"NSData",C
advertisementKind
Ti,R,D
activityUUID
T@"NSUUID",R,C,V_activityUUID
http
https
%@#%@
NOTIFICATION
UASharedPasteboardInfoWrapperPBInfoKey
UASharedPasteboardInfoWrapperExtraDataKey
UASharedPasteboardInfoWrapperExtraTypeKey
UASharedPasteboardInfoWrapperErrorKey
%@: Extra Data Type: %ld, Error: %@, PBInfo: %@
pbinfo
T@"UASharedPasteboardInfo",&,V_pbinfo
extraData
T@"NSData",&,V_extraData
extraDataType
Tq,V_extraDataType
T@"NSError",&,V_error
T@"UASimulator",&,V_simulator
{?=[8I]}
[pid=%d/%d uid=%d/%d gid=%d/%d asid=%d sb=%@]
<%@ %p> %@
auditTokenValue
T{?=[8I]},R,V_auditTokenValue
pidVersion
euid
TI,R,D
ruid
egid
rgid
asid
sandboxed
TB,R,D,GisSandboxed
SharingAdvertiser
UASharingAdvertiser
sharingUpdate
advertisingPeriodic
AdvertiserCurrent
BTLEAdvertisement
 FORCE
FORCE
%ld%c%ld
iPhone OS
OS X
v24@?0@"NSSet"8@"NSError"16
Pasteboard
com.apple.fetchsamplepayload
randomdata
Sample
NO-TEAM-ID
com.apple.fetchsamplepayloadactivity
EncodedPayloadSize
Sharing.framework Advertiser:
(No SFActivityAdvertiser) 
 ** Bluetooth is disabled but IgnoreBluetoothDisabled is set, so the activity will be advertised. **
 ** Bluetooth is disabled so no activity will be advertised. **
 ** BatterySaverMode is enabled so no activity will be advertised. **
 ** Activity advertising is disabled on this device. **
** SUSPENDED:
%ld sfActivityAdvertisers
, run=%ld times/%@ periodic=%ld/%@ %@%@%@
(current) 
+ Advertising Local Pasteboard.
ClipboardSharingDisabled
 ADVERTISING: %@%@ %@ / "%@", data=%@, at %@
 LAST:%@, at %@
 LAST: nil
 No AppleID, %@
 AppleID:%@, devices%s%s:
(no handoff)
(no pasteboard)
v24@?0@"NSString"8@"NSError"16
%@/%@-%@:+%ld, 
[%@/%@-%@], 
%@%@
helpersDispatchGroup
T@"NSObject<OS_dispatch_group>",R,&,V_helpersDispatchGroup
T@"NSObject<OS_dispatch_queue>",R,&,V_dispatchQ
nextScheduleUpdate
T@"UADispatchScheduler",R,&,V_nextScheduleUpdate
periodicUpdate
T@"UADispatchScheduler",R,&,V_periodicUpdate
dontAdvertiseAsCurrentUntil
T@"NSDate",&,V_dontAdvertiseAsCurrentUntil
currentAdvertisementPayload
T@"SharingBTLEAdvertisementPayload",&,V_currentAdvertisementPayload
lastAdvertismentTime
T@"NSDate",&,V_lastAdvertismentTime
lastAdvertisementPayload
T@"SharingBTLEAdvertisementPayload",C,V_lastAdvertisementPayload
currentAdvertisedItem
T@"UAUserActivityInfo",&,V_currentAdvertisedItem
currentAdvertisedItemOtherAdvertisedItems
T@"NSMutableDictionary",&,V_currentAdvertisedItemOtherAdvertisedItems
changeAdvertisementThreadSpinCount
TQ,V_changeAdvertisementThreadSpinCount
preventIdleSleepAssertion
T@"UATimedPowerAssertions",&,V_preventIdleSleepAssertion
userIsCurrent
TB,V_userIsCurrent
userIsCurrentIdleTracker
T@"PowerManagerIdleTracker",&,V_userIsCurrentIdleTracker
lastUserActiveTime
T@"NSDate",C,V_lastUserActiveTime
pairedDevices
T@"NSSet",C,V_pairedDevices
shouldAdvertiseHandoff
TB,R,V_shouldAdvertiseHandoff
shouldAdvertisePasteboard
TB,R,V_shouldAdvertisePasteboard
lastAdvertisedGeneration
Tq,V_lastAdvertisedGeneration
pboardBitToAdvertise
TB,V_pboardBitToAdvertise
sfActivityAdvertisers
%@/%@/%@/%@ 
macOS
Watch OS
watchOS
TVOS
tvOS
SimController
simQ
IN FRONT
not in front
 - SIMULATOR:%@
bootstrapName
T@"NSString",R,C,V_bootstrapName
T@"UASimulatorController",R,&,V_controller
ourDevice
T@"SFPeerDevice",&,V_ourDevice
peeredDevice
T@"SFPeerDevice",&,V_peeredDevice
T@"UASimulatorAdvertiser",R,&,V_advertiser
T@"UASimulatorReceiver",R,&,V_receiver
creator
T@"UASimulatorAdvertisementCreator",R,&,V_creator
activitiesShouldCrossover
TB,R,V_activitiesShouldCrossover
commandPort
TI,R,V_commandPort
pairedClientPort
wasResumed
T@"NSObject<OS_dispatch_semaphore>",R,&,V_wasResumed
com.apple.private.coreservices.lsuseractivityd.admininterface
com.apple.private.useractivity.sysdiagnose
EnableLogging
(user=%.5gs/system=%.5gs)
sharing
best
v24@?0@"UAUserActivityInfo"8^B16
This platform does not support the iOS simulator.
ReplayManager
fakeBTLEInjectedItem
T@"SharingBTLESuggestedItem",&,VfakeBTLEInjectedItem
listener
T@"NSXPCListener",&,Vlistener
subscribers
T@"NSMutableArray",C,Vsubscribers
replayManager
T@"UAActivityReplay",&,V_replayManager
networkConnectionHandler
T@"UANetworkReplayRendevousHandler",&,V_networkConnectionHandler
ignoredRTimeVal
T{timeval=qi},R,V_ignoredRTimeVal
T@"UACornerActionManager",&,Vmanager
%.1f seconds %s
from now
%ld seconds %s
%ld minutes %s
at %2.2ld:%2.2ld
(nil)
%4.1f seconds
%2ld minutes
%2.3f hours
%2ld days, %ld hours
%5ld days
advertisableItems
T@"NSArray",C,D
advertising
advertisingItems
T@"NSArray",R,C
description
dictionaryRepresentation
stringWithFormat:
dictionary
numberWithUnsignedLongLong:
setObject:forKey:
numberWithBool:
numberWithUnsignedInt:
setBundleIdentifier:
setActivityType:
class
allocWithZone:
init
copyWithZone:
isMemberOfClass:
isEqual:
hash
setTimestamp:
setHasTimestamp:
hasTimestamp
hasBundleIdentifier
hasActivityType
setPayloadSize:
setHasPayloadSize:
hasPayloadSize
setTransferSpeed:
setHasTransferSpeed:
hasTransferSpeed
setTransferDurationNsec:
setHasTransferDurationNsec:
hasTransferDurationNsec
setErrorCode:
setHasErrorCode:
hasErrorCode
setCancelled:
setHasCancelled:
hasCancelled
setSource:
setHasSource:
hasSource
setBrowserFallback:
setHasBrowserFallback:
hasBrowserFallback
setSuggestedActionType:
setHasSuggestedActionType:
hasSuggestedActionType
readFrom:
writeTo:
copyTo:
mergeFrom:
.cxx_destruct
timestamp
bundleIdentifier
activityType
payloadSize
transferSpeed
transferDurationNsec
errorCode
cancelled
source
browserFallback
suggestedActionType
_errorCode
_payloadSize
_timestamp
_transferDurationNsec
_transferSpeed
_activityType
_bundleIdentifier
_source
_suggestedActionType
_browserFallback
_cancelled
_has
numberWithLongLong:
setClientWriteSize:
setHasClientWriteSize:
hasClientWriteSize
setClientWriteTime:
setHasClientWriteTime:
hasClientWriteTime
setClientWriteSpeed:
setHasClientWriteSpeed:
hasClientWriteSpeed
setUsedStreams:
setHasUsedStreams:
hasUsedStreams
setStreamOpenDelay:
setHasStreamOpenDelay:
hasStreamOpenDelay
setStreamDataSize:
setHasStreamDataSize:
hasStreamDataSize
setStreamDataXferTime:
setHasStreamDataXferTime:
hasStreamDataXferTime
setStreamDataXferSpeed:
setHasStreamDataXferSpeed:
hasStreamDataXferSpeed
setTotalTime:
setHasTotalTime:
hasTotalTime
clientWriteSize
clientWriteTime
clientWriteSpeed
usedStreams
streamOpenDelay
streamDataSize
streamDataXferTime
streamDataXferSpeed
totalTime
_clientWriteSize
_clientWriteSpeed
_clientWriteTime
_streamDataSize
_streamDataXferSpeed
_streamDataXferTime
_streamOpenDelay
_totalTime
_usedStreams
string
bytes
length
appendString:
copy
data
characterAtIndex:
appendBytes:length:
initWithManager:name:
sharedDefaults
debugEnablePinging
countByEnumeratingWithState:objects:count:
sharedDebugManager
logForCategory:
alloc
initFromPing:
uuid
UUIDString
pongCount
setPongCount:
pongItems
removeObject:
setWasContinuedBlock:
addObject:
manager
scheduleUpdatingAdvertisableItems
requestPayloadWithCompletionHandler:
count
initWithManager:
active
items
setItems:
statusString
_pongItems
_pongCount
init:queue:interval:block:
setup:interval:
setUserActivityNotificationRef:
name
invalidate
dealloc
queue
firstTime
setActive:
cStringUsingEncoding:
interval
enabled
startTime
timeIntervalSinceNow
setFirstTime:
block
userActivityNotificationRef
date
idleTracker:queue:interval:block:
setEnabled:
setInterval:
setBlock:
setQueue:
setStartTime:
_active
_enabled
_firstTime
_interval
_name
_block
_queue
_userActivityNotificationRef
_startTime
initWithUUID:type:options:
setTitle:
setEligibleForHandoff:
dataWithLength:
mutableBytes
setPayload:identifier:
initWithUserActivityInfo:
setType:
title
payloadForIdentifier:
initWithPayloadSize:
wasContinuedBlock
_wasContinuedBlock
controller
receivedItems
arrayWithArray:
simulator
pairedClientPort
firstObject
activitiesShouldCrossover
array
webpageURL
setWebpageURL:
dateWithTimeIntervalSinceNow:
setWhen:
initWithUserActivityInfo:peerDevice:simulator:
defaultWorkspace
teamIdentifier
applicationForUserActivityType:
applicationProxyForWebBrowserSupportingContinuation
arrayWithObject:
scheduleBestAppDetermination
receiving
appendFormat:
initWithSimulator:
doSetReceivedItems:
fetchAdvertisedItems:
_simulator
_receivedItems
initWithBytes:length:
initForReadingWithData:
setRequiresSecureCoding:
decodeObjectOfClass:forKey:
decodeObjectForKey:
finishDecoding
setReason:
setHasReason:
hasReason
reason
_reason
advertising
advertisedItem
advertisableItems
setAdvertisedItem:
advertisingItems
setAdvertisableItems:
setItem:
_advertisableItems
_advertisedItem
initWithMachServiceName:
setDelegate:
setBestAppsListener:
suspend
bestAppsListener
resume
terminate
auditToken
valueForEntitlement:
boolValue
effectiveUserIdentifier
initWithManager:connection:
addActivityNotifier:
suspended
setSuspended:
initWithAuditToken:
listener:shouldAcceptNewConnection:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
_bestAppsListener
itemUUID
hardSupressUntil
supressUntil
lastInterestingTime
setItemUUID:
setHardSupressUntil:
setSupressUntil:
setLastInterestingTime:
_itemUUID
_hardSupressUntil
_supressUntil
_lastInterestingTime
initWithBytes:length:encoding:
setConnection:
setSupressedUntil:
update
dispatchScheduler:frequency:queue:block:
setScheduler:
setExportedInterface:
setRemoteObjectInterface:
setExportedObject:
connection
removeActivityNotifier:
setInvalidationHandler:
setInterruptionHandler:
triggerUserIdleDetermination
possibleItems
allValues
setWithArray:
setPossibleItems:
setObject:forKeyedSubscript:
bestCornerItemFromItems:
notifyBestAppChanged:atTime:
cornerActionItems
cornerActionItemTimeout
supressedUntil
objectForKey:
when
type
activityReceivingAllowed
dynamicActivityType
wantsBestAppChangedNotifications
lastItemUUID
lastItemWhen
logString
remoteObjectProxy
setLastItemUUID:
setLastItemWhen:
options
peerDevice
uniqueID
deviceType
notifyBestAppChanged:type:options:bundleIdentifier:activityType:dynamicIdentifier:when:confidence:deviceName:deviceIdentifier:deviceType:
setLastItemStr:
sharedManager
wasContinuedInfo
submitUserActivityWasSuggestedInfo:
objectForKeyedSubscript:
removeObjectForKey:
scheduler
scheduleAt:
lastItemStr
nextTime
runCount
modelIdentifier
userActivityInfoForUUID:
cornerActionItemSupressionInterval
bestAppSuggestionSupressionIntervalForUnchangingItem
scheduleNext:
cornerActionItemForUUID:
setWasContinuedInfo:
scheduledForSubmission
setScheduledForSubmission:
setInteractionType:
submitUserActivityWasContinuedInfo:
caseInsensitiveCompare:
initWithURL:resolvingAgainstBaseURL:
queryItems
value
dictionaryWithObjects:forKeys:count:
defaultCenter
postNotificationName:object:userInfo:
setWantsBestAppChangedNotifications:
doConnected
doStartBestAppSuggestion:
doDetermineBestAppSuggestionWithCompletionHandler:
doDetermineBestAppSuggestions:completionHandler:
doRemoveBestAppSuggestion:options:
doRegisterForBestAppChangeNotification
doUnregisterForBestAppChangeNotification
doQueueFetchOfPayloadForBestAppSuggestion:completionHandler:
doLaunchFollowUp:interactionType:cancelled:
_wantsBestAppChangedNotifications
_connection
_supressedUntil
_scheduler
_possibleItems
_lastItemUUID
_lastItemWhen
_lastItemStr
setIsServer:
standardUserDefaults
stringWithCString:encoding:
objectAtIndex:
isEqualToString:
removeObjectAtIndex:
enableSharingFramework
sharedAdvertiser
initWithManager:advertiser:
addAdvertiser:
initWithDelegate:
addSFActivityScanner:
addReceiver:
addClient:
setPasteboardController:
pasteboardController
setPingController:
addHandler:
enableTransactions
currentRunLoop
setPayloadXferTime:
setHasPayloadXferTime:
hasPayloadXferTime
payloadXferTime
_payloadXferTime
createSharedDataDirectory
stringByAppendingPathComponent:
defaultManager
sharedDataPath
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileExistsAtPath:
createFileAtPath:contents:attributes:
currentLocalBlobPath
stringForKey:
setCurrentLocalBlobPath:
removeItemAtPath:error:
UUID
createFileForUUID:
fileHandleForWritingAtPath:
fileHandleForReadingAtPath:
currentRemoteBlobPath
setCurrentRemoteBlobPath:
sharedInstance
createFileForLocalPasteboardBlob
localPasteboardBlobForReading
createFileForRemotePasteboardBlob
remotePasteboardBlobForReading
_currentLocalBlobPath
_currentRemoteBlobPath
error
isCancelled
transferDuration
interactionType
isBrowserFallback
submitWasSuggestedInfo
submit
isFromPairedDevice
setFromPairedDevice:
setTransferDuration:
setError:
_submitted
_fromPairedDevice
_scheduledForSubmission
_interactionType
_transferDuration
_error
hasPrefix:
setUniqueID:
setModelIdentifier:
setProductName:
setProductVersion:
setProductBuildVersion:
setName:
setDeviceColor:
setEnclosureColor:
deviceTypeForModelIdentifier:
initWithString:
peerForSelf
removeReceiver:
scanningForTypes
setScanningForTypes:
terminated
priority
_suspended
_terminated
_uuid
_manager
_priority
initWithUUID:type:options:originatingClient:
originatingClient
setOriginatingClient:
_originatingClient
initWithUUIDString:
setDebugType:
debugType
initWithType:manager:
advertisingBytes
_debugType
removeAllObjects
eligibleForHandoff
notifiedItems
updateItem:
scheduleUpdatingAdvertisableItems:
item
setWithObject:
addItem:
removeItem:
eligibleAdvertiseableItemsInOrder
_item
setMainDispatchQ:
debugManager
mainDispatchQ
_determineWhenSystemGoesIdleThread
_determineItemToAdvertiseForHandoffThread
_checkIfBestApplicationChangedThread
setAdvertisementTimes:
userIdleInterval
setUserIsActive:
nextUserIdleDeterminationScheduler
setUserIdleTracker:
removeObserver:forKeyPath:
advertisers
clients
setByAddingObjectsFromSet:
nextUpdateAdvertisedItemsScheduler
advertiseableItems
eligibleToAdvertise
allObjects
sortedArrayUsingComparator:
addObjectsFromArray:
screenDimmedPinnedItems
uaAdvertisableItemsInOrder
intervalToAskClientWithUnsynchronizedDocumentsToUpdate
lastTimePayloadWasRequestedForAdvertisedItem
setLastTimePayloadWasRequestedForAdvertisedItem:
requestPayloadWithCompletionHandlerEvenIfClean:withCompletionHandler:
screenSaverDelayToRemovingAdvertisements
setScreenSaverActivePowerAssertion:
initWithName:delta:queue:runAtCompletion:
setScreenSaverActive:
triggerAll
activityAdvertisingAllowed
debugUserActivityTimeOffset
triggerUserIdleDetermination:
userIdleTracker
screenDimmed
weHaveAtLeastOneItemToAdvertise
setScreenDimmedPowerAssertion:
screenDimmedPowerAssertion
screenSaverActive
screenSaverActivePowerAssertion
deviceUILocked
deviceUILockedPowerAssertion
okToSuspendAdvertising
notifiers
receivers
systemHasSuspendedAdvertisements
determineNumberOfSecondsSystemHasBeenIdle
setSystemHasSuspendedAdvertisements:
anyObject
haveBestAppChangeNotificationClients
scheduleBestAppDetermination:
nextScheduleBestAppDeterminationScheduler
handlers
systemPreferenceChangedToken
removeObserver:name:object:
uiLockStatusToken
setUiLockStatusToken:
suspendListeningForBluetooth
holdPowerAssertionUntil
setHoldPowerAssertionUntil:
holdPowerAssertionSourceTimer
setHoldPowerAssertionSourceTimer:
holdPowerAssertion
setHoldPowerAssertion:
distributedNotificationHook:
addObserver:selector:name:object:suspensionBehavior:
updateUIDeviceLockedState:
listenForScreenDimNotifications
backlightLevelToken
isBacklightOn
updateScreenDimStateState:
resumeListeningForBluetooth
reset
screenDimDelayBeforeRemovingAdvertisements
deviceLockDelayBeforeRemovingPasteboardAdvertisement
deviceLockDelayBeforeRemovingHandoffAdvertisement
setDeviceUILockedPowerAssertion:
weAreAdvertisingAnItem
dictionaryForAdvertisableItem:
bestCornerItem
dictionaryForCornerActionItem:
initWithSuiteName:
timeIntervalSinceDate:
currentPerfTime
advertisingSuspended
nextRunTimeString
containsObject:
pinnedUserActivityInfoItem
perfSummaryString
devicesAndActivityTimes
activeDevicesIdentifiers
containsString:
localPBStatus
receivingSuspended
unionSet:
bundleURL
fileSystemRepresentation
isInstalled
activityTypes
applicationProxyWillLaunchWithSupportedArchitecture:
applicationProxyForIdentifier:
cornerActionManager
sharedActivityManagerServer
applicationProxyCanHandleWebBrowserContinuation:
activityScanner:receivedAdvertisement:
activityScanner:foundDeviceWithDevice:
activityScanner:lostDeviceWithDevice:
activityScanner:pairedDevicesChanged:
advertiseableItemForUUID:
activeAdvertiseableItemsUUIDs
userActivityItemsChanged
isBluetoothEnabled
setAdvertisingSuspended:
bestCornerItem:
checkIfBestCornerItemChanged:
notifyBestAppChanged:atTime:withClientConnections:
registerForBestAppChangeNotification:
unregisterForBestAppChangeNotification:
bestAppChangeNotificationsSet
preventSystemSleepFor:
debuggingInfo
dynamicUserActivitiesString
shortStatusString
removeAdvertiser:
removeClient:
removeHandler:
allHandlers
userDefaults
lastReceivedAdvertisementItem
setLastReceivedAdvertisementItem:
setDevicesAndActivityTimes:
setBacklightOn:
isBatterySaverModeEnabled
setPinnedUserActivityInfoItem:
setScreenDimmedPinnedItems:
currentAdvertisementSignalUpdateThreadIfUserActivityDropsBelow
setCurrentAdvertisementSignalUpdateThreadIfUserActivityDropsBelow:
setReceivingSuspended:
pingController
advertisementTimes
idleActivityNotificationHasBeenSuspended
setIdleActivityNotificationHasBeenSuspended:
setDeviceUILocked:
setScreenDimmed:
setBacklightLevelToken:
userIsActive
systemIsIdle
setSystemIsIdle:
setSystemPreferenceChangedToken:
pingMode
setPingMode:
avgPingTime
setAvgPingTime:
pingStart
setPingStart:
pongSem
setPongSem:
pongs
setPongs:
pongTimer
setPongTimer:
_advertisers
_receivers
_clients
_notifiers
_handlers
_creationTime
_advertiseableItemsByUUID
_activeDevicesIdentifiers
_bestAppChangeNotificationsSet
_userDefaults
_managedSettingsChangedNotificationToken
_helpersDispatchGroup
_systemIdlePreviousTimeSinceLastUserActivity
_systemHasSuspendedAdvertisements
_advertisingSuspended
_backlightOn
_batterySaverModeEnabled
_receivingSuspended
_idleActivityNotificationHasBeenSuspended
_screenSaverActive
_deviceUILocked
_screenDimmed
_userIsActive
_systemIsIdle
_pingMode
_backlightLevelToken
_holdPowerAssertion
_systemPreferenceChangedToken
_uiLockStatusToken
_lastReceivedAdvertisementItem
_devicesAndActivityTimes
_pinnedUserActivityInfoItem
_screenDimmedPinnedItems
_currentAdvertisementSignalUpdateThreadIfUserActivityDropsBelow
_pasteboardController
_pingController
_mainDispatchQ
_advertisementTimes
_nextUserIdleDeterminationScheduler
_nextUpdateAdvertisedItemsScheduler
_nextScheduleBestAppDeterminationScheduler
_screenSaverActivePowerAssertion
_deviceUILockedPowerAssertion
_screenDimmedPowerAssertion
_holdPowerAssertionUntil
_holdPowerAssertionSourceTimer
_userIdleTracker
_debugManager
_lastTimePayloadWasRequestedForAdvertisedItem
_avgPingTime
_pingStart
_pongSem
_pongs
_pongTimer
enumerateLinesUsingBlock:
initWithController:
notifier
client
_client
_notifier
setFrequency:
frequency
doIt
init:frequency:queue:block:
executingGroup
updateFrequency:
waitUntilComplete
_frequency
_runCount
_nextTime
_executingGroup
setNotifiedItems:
setClientq:
setXpclistener:
xpclistener
setRemoteAvalible:
bundleWithPath:
setUaBundle:
uaBundle
load
localPasteboardRefection
setLocalPasteboardReflection:
setRemotePasteboardAvalibility:withDataRequester:
clearLocalPasteboardInformation
currentPasteboardActivityInfo
advertiseTypes
currentLocalTypes
types
allKeys
currentLocalGeneration
setGeneration:
setPasteboardTypes:
setUuid:
isScreenWatcherPresent
setRequester:
initWithMachServiceName:options:
remotePasteboardAvailable:
pasteboardWillBeFetched:
interfaceWithProtocol:
remoteObjectProxyWithErrorHandler:
remoteAvalible
setCurrentLocalTypes:
setCurrentLocalGeneration:
setHasFetchedLocalData:
localReflection
clientConnection
setCurrentLocalPasteboard:
dataSize
setCurrentLocalPasteboardSize:
writeLocalPasteboardToFile:withCompletion:
setAdvertiseTypes:
localTimeout
localPasteboardAvalibilityTimeout
clearLocalPasteboardTypes:
timerWithTimeInterval:target:selector:userInfo:repeats:
setLocalTimeout:
mainRunLoop
addTimer:forMode:
submitLocalPasteboardInfoWasCleared
pasteAdvertiser
stop
setPasteAdvertiser:
localInfo
setPboardInfoToSend:
localPasteboardAvalibilityClearedTimeout
removeLocalPasteboardFromAdvertisers:
currentLocalPasteboard
requester
absoluteToNSec:
errorWithDomain:code:userInfo:
submitRemotePasteboardBecameUnavailable:
code
submitRemotePasteboardTypeInfoRequested:
pbinfo
setDataFile:
extraDataType
setCurrentRemoteData:
setHasCurrentRemoteData:
extraData
writeData:
requestRemotePasteboardInfo:
pasteFetchStartTime
pasteInfo
submitRemotePasteboardWasRequested:
setPasteInfo:
showUITimer
hideProgressUI:
currentLocalPasteboardSize
setDataSize:
hasCurrentRemoteData
currentRemoteData
setPasteFetchStartTime:
pasteboardShowUIDelay
showProgressUI:
setShowUITimer:
currentProgress
initWithParent:userInfo:
setFetchProgress:
fetchProgress
setKind:
setCancellable:
inStream
cancel
setCancellationHandler:
_publish
setPayloadXferSpeed:
setTotalUnitCount:
setCompletedUnitCount:
receivePasteboardStreamDate:withCompletion:
requestStreamEndpointData:
initWithServiceType:
setStreamOpenStartTime:
streamStatus
open
close
streamOpenStartTime
setStreamOpenTime:
initWithInputStream:outputStream:dataFile:
setStreamXferStartTime:
streamXferStartTime
setInStream:
receiveTypes:withProgress:completionHandler:
getContinuationStreamsWithEndpointData:completionHandler:
setLocalReflection:
setPbinfo:
archivedDataWithRootObject:
setLocalSendStartTime:
setLocalInfo:
pboardInfoToSend
setExtraDataType:
readDataToEndOfFile
setExtraData:
localSendStartTime
submitDidSendLocalPasteboard:
setSupportsStreams:
start
serviceEndpointData
hasFetchedLocalData
pasteboardEmbeddedPayloadSizeLimitInBytes
pboardFetchSem
setPboardFetchSem:
clientq
initWithOutputStream:inputStream:pasteboard:
setOutStream:
sendTypes:completionHandler:
setClientConnection:
isUIVisible
setIsUIVisible:
pasteboardUIMinimumDurration
setDontHideUIBefore:
peer
deviceColor
localizedStringForKey:value:table:
notificationRef
setNotificationRef:
dontHideUIBefore
pasteboardHideUIDelay
_unpublish
fetchRemotePasteboardStatus:
localPasteboardTypesDidChange:forGeneration:
fetchRemotePasteboardTypesForProcess:withCompletion:
fetchRemotePasteboardForProcess:withCompletion:
advertiser:didReceiveInputStream:outputStream:
setScreenWatcherPresent:
getLocalPasteboardInfoData:
startServiceForPaste:
outStream
osxUIConnection
setOsxUIConnection:
_screenWatcherPresent
_hasFetchedLocalData
_advertiseTypes
_remoteAvalible
_hasCurrentRemoteData
_isUIVisible
_clientq
_xpclistener
_clientConnection
_currentLocalTypes
_currentLocalGeneration
_localTimeout
_currentLocalPasteboard
_currentLocalPasteboardSize
_requester
_pasteAdvertiser
_currentRemoteData
_pboardFetchSem
_pboardInfoToSend
_outStream
_inStream
_fetchProgress
_showUITimer
_dontHideUIBefore
_osxUIConnection
_notificationRef
_pasteFetchStartTime
_localSendStartTime
_streamOpenStartTime
_streamXferStartTime
_pasteInfo
_localInfo
_uaBundle
setHasBeenUsedAtLeastOnce:
insertObject:atIndex:
hasBeenUsedAtLeastOnce
pushItem:
_items
_hasBeenUsedAtLeastOnce
_controller
setNeedToCallBlock:
updateTimeUntilAssertionRelease:
timerSource
needToCallBlock
assertion
releaseAssertion:
setTimerExpiration:
nextTimer
setNextTimer:
createAssertion
stringWithString:
objectEnumerator
timerExpiration
initWithName:delta:queue:
releaseAssertion
_needToCallBlock
_assertion
_timerSource
_timerExpiration
_nextTimer
strongToWeakObjectsMapTable
receiver
initWithManager:simulator:
setAdvertiser:
setReceiver:
setClient:
setPairedPeer:
sharingAdvertiser
mockAdvertiser
addSFActivityAdvertiser:
sharingReceiver
mockScanner
delegate
pairedPeer
removeSFActivityScanner:
removeSFActivityAdvertiser:
dataWithJSONObject:options:error:
initWithData:encoding:
sendResponse:
scanString:intoString:
setDevice:
setAdvertisementPayload:
setAdvertisementVersion:
setOptions:
isAtEnd
scanLocation
substringFromIndex:
dataUsingEncoding:
JSONObjectWithData:options:error:
whitespaceCharacterSet
scanUpToCharactersFromSet:intoString:
scanInteger:
initWithType:string:dynamicType:teamID:webpageURL:options:isCurrent:when:
advertisementPayload
rangeOfString:
scannerWithString:
setCaseSensitive:
whitespaceAndNewlineCharacterSet
uppercaseString
scanDouble:
compare:options:
scanUpToString:intoString:
wasResumed
scanMockAdvertisement:
device
null
activityAdvertiser:activityPayloadForAdvertisementPayload:command:requestedByDevice:withCompletionHandler:
processCommand:
lostDeviceWithUUID:
advertiser
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
activityAdvertiser:pairedDevicesChangedNotification:
activityAdvertiser:activityPayloadForAdvertisementPayload:requestedByDevice:withCompletionHandler:
activityAdvertiser:didSendPayloadForActivityIdentifier:toDevice:error:
doAdvertiseAdvertisementPayload:options:
processCommands:completionHandler:
activityPayloadFromDevice:forAdvertisementPayload:command:withCompletionHandler:
_pendingPayloadFetches
_pairedPeer
_advertiser
_receiver
_mockAdvertiser
_mockScanner
characterSetWithCharactersInString:
scanCharactersFromSet:intoString:
_UABundle
localizations
preferredLanguages
preferredLocalizationsFromArray:forPreferences:
objectAtIndexedSubscript:
pathForResource:ofType:inDirectory:forLocalization:
initWithContentsOfFile:
localizedStringForKey:comment:
simulatorWithController:parentSimulatorPortName:
addSimulator:
simulators
dataWithBytes:length:
removeSimulator:
simulatorStatus
dispatchQ
setDispatchQ:
simulatorPort
setSimulatorPort:
ourPeerDevice
setOurPeerDevice:
_simulators
_simulatorPort
_dispatchQ
_ourPeerDevice
simulatorWithController:pairedPort:childSimPid:childVersion:
setPeeredDevice:
commandPort
initForWritingWithMutableData:
encodeObject:forKey:
finishEncoding
cornerActionItemDefaults
registerDefaults:
numberWithDouble:
numberWithInt:
boolForKey:
integerForKey:
doubleForKey:
boolValueForKey:default:
activityContinuationAllowed
timeIntervalForKey:default:
integerValueForKey:default:
setBool:forKey:
compare:
sortedArrayUsingSelector:
valueForKey:
mainBundle
setValue:forKey:
clipboardSharingEnabled
enableHandoffInPowerSaverMode
activityBTLESharingEnabled
loggingAdvertiserEnabled
minimumTimeForAnAdvertisementToLive
minimumTimeToLiveAfterRemovingAdvertisement
systemIdleDelayBeforeRemovingAdvertisements
maximumTimeoutAfterAdvertisingEndsThatActivityCanBeResumed
advertisedItemWhichIsWebBrowserIntervalToRememberEarlierActivities
cornerActionItemAdditionalTimeToLiveAfterValidIntervalExpires
cornerActionItemMaximumTimeForBTLEItemToLive
receivedBTLEItemTimeToLiveAfterDeviceLostIfPayloadIsQueued
activePayloadUpdateInterval
maximumTimeoutToWaitForClientProcessToUpdateActivityInformation
maximumActivityPayloadSizeInBytes
enableNetworkControlListener
enableAutomaticRendevousPairing
rendevousPairingType
networkControlListenerPort
activityPayloadWarningSizeInBytes
minimumIntervalBetweenAdvertisements
maximumAdvertisementsPerTimeInterval
maximumAdvertisementsTimeInterval
debugValidatePayloadFetchTimeInterval
debugAdditionalPayloadReceiveTimeInterval
debugValidateRetryPayloadFetchFailureInterval
debugValidateSampleResponseMinimumActivityPayloadSizeInBytes
debugValidateSampleResponseMaximumActivityPayloadSizeInBytes
debugForceNewPayloadEncoder
debugForceOldPayloadEncoder
dontSendActivityTitle
debugReadvertiseImmediately
debugEnablePrefetch
debugCrossoverAllActivities
setEnableSharingFramework:
remotePasteboardAvailableTimeout
pasteboardUITimeRemainingDelay
shouldIgnoreBluetoothDisabled
ignoreLostDevice
defaults:
setDefault:value:
clientIsActive:
initWithManager:controller:
submitUserActivityBecameCurrent:withToken:
submitUserActivityWasDiscovered:
firstPartyActivityTypeOrUnknown:
submitRemotePasteboardBecameAvailable
roundNum:to:
doInitializeWithClientVersion:clientInfo:completionHandler:
doRegisterUserActivityInfo:completionHandler:
doFetchUserActivityInfoWithUUID:completionHandler:
doUpdateUserActivityInfo:makeCurrent:completionHandler:
doUpdateUserActivityWithUUID:setActive:
doDeleteUserActivityWithUUID:
doAddDynamicUserActivity:matching:
doRemoveDynamicUserActivity:matching:
doMarkUserActivityAsDirty:forceImmediate:webpageURL:expiration:hasiCloudDocument:hasUnsynchronizediCloudDoc:
doPinUserActivityInfo:completionHandler:
doGetCurrentUserActivityInfo:
doDetermineIfUserActivityIsCurrent:completionHandler:
doGetLoggingFileForClient:options:completionHandler:
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
askClientUserActivityToSave:
askClientUserActivityToSave:completionHandler:
tellClientUserActivityItWasResumed:
tellClientDebuggingEnabled:logFileHandle:
doNOP:withCompletionHandler:
doSetDebugOption:value:
doFindMatchingUserActivityForString:withCompletionHandler:
doCopyAdvertisedUUIDWithCompletionHandler:
doCopyAllUUIDsOfType:withCompletionHandler:
doCopyEnabledUUIDsWithCompletionHandler:
doCopyDebuggingInfo:completionHandler:
doCopyStatusString:completionHandler:
doCopyDynamicUserActivitiesString:completionHandler:
doTerminateServer
doGetCurrentAdvertisedItemUUID:
doInjectBTLE:type:identifier:title:activityPayload:frameworkPayload:payloadDelay:
doCopySimulatorStatusString:completionHandler:
doCopyDefaults:completionHandler:
doSetDefaults:value:
doWillSaveDelegate:completionHandler:
doBroadcastPing:
doSetupNetworkedPairs:port:
doSetupRendevous:domain:activate:
startAdvertisingPingWithTimeInterval:
stopAdvertisingPing
getCurrentPeersAndClear:completionHandler:
doReplayCommands:completionHandler:
doSetRemotePasteboardAvalible:
doSetLocalPasteboardReflection:
doGetSysdiagnoseStringsIncludingPrivateData:completionHandler:
setLogFileDirectoryPath:
logFileDirectoryPath
setLogFilePath:
logFilePath
fileHandleForUpdatingAtPath:
setOutputFile:
initWithFileDescriptor:closeOnDealloc:
log:format:
outputFile
shouldLog:
initWithFormat:arguments:
log:format:args:
logItem:
_outputFile
_logFileDirectoryPath
_logFilePath
updateLayout
localReceiver
layoutMonitor
setLayoutMonitor:
appStateMonitor
setHandler:
setAppStateMonitor:
layoutMonitorUpdate:
initWithDisplayType:handler:
currentLayout
elements
identifier
frame
referenceFrame
level
isUIApplicationElement
hasKeyboardFocus
layoutRole
userActivityClientForBundleIdentifier:
setIgnoreLockScreenUntil:
ignoreLockScreenUntil
layoutUpdateScheduler
setLayout:
UTF8String
numberWithLong:
layout
userActivityClients
userActivityAdvertisableItemByUUID:
additionalUserActivityAdvertisableItems
setSet:
uniqueIdentifiers
currentAdvertisableActivity
addAdditionalUserActivityAdvertisableItems:
alwaysPick
eligibleInBackground
sortDescriptorWithKey:ascending:
arrayWithObjects:count:
sortUsingDescriptors:
sortUsingComparator:
advertiseableItemForBundleIdentifier:
initWithController:connection:
addUserActivityClient:
visibleUserActivityClients
setVisibleUserActivityClients:
userActivityClientForUUID:
userActivityClientForPID:
removeAdditionalUserActivityAdvertisableItems:
removeClientActivityClient:
clientIsVisible:
setLocalReceiver:
_activityManagerListener
_userActivityClientsByPID
_visibleUserActivityClients
_additionalUserActivityAdvertisableItems
_userActivityClientsByBundleID
_layout
_appStateMonitor
_localReceiver
_layoutUpdateScheduler
_ignoreLockScreenUntil
scanner
setPeer:
setScanner:
_peer
_scanner
URLWithString:
teamID
absoluteString
userInfoPayload
streamsData
init:title:date:userInfoPayload:teamID:activityType:
initWithNSError:
initWithData:
encodeAsData
uniqueIdentifier
setUniqueIdentifier:
setUserInfoPayload:
setStreamsData:
setTeamID:
_uniqueIdentifier
_title
_when
_userInfoPayload
_webpageURL
_streamsData
_teamID
_ununiqueIdentifier
appendData:
periodicCleanupFunc
sfActivityScanners
periodicCleanup
foundDevice:
activeDevices
lostDevice:
removeAllFromDevice:
lastSeenPasteboardDevice
setLastSeenPasteboardDevice:
remotePboardTimer
setRemotePboardTimer:
removeAfter
_addItem:
isPayloadRequested
isPayloadAvailable
timeIntervalSinceReferenceDate
currentUntilDate
dateWithTimeInterval:sinceDate:
setCurrentUntilDate:
setRemoveAfter:
isEqualHashedPayloadBytes:
receiveAdvertisement:scanner:
initWithSFActivityAdvertisement:
optionBits
lastSeenPasteboardVersionBit
setLastSeenPasteboardVersionBit:
clearRemotePasteboardAvalible:
sharingBTLESuggestedItemForAdvertisementPayload:forDevice:
time
setDontPrefetchBefore:
clearPayload
updateFromSFAdvertisement:
advertisementKind
cornerActionBTLEItemWithSFAdvertisement:optionBits:scanner:receiver:
timeIntervalSince1970
isCurrent
dontPrefetchBefore
sfActivityScanner
forceScanning
setForceScanning:
_sfActivityScanners
_activeDevices
_forceScanning
_periodicCleanup
_lastSeenPasteboardDevice
_lastSeenPasteboardVersionBit
_remotePboardTimer
scanForTypes:
setStream:
setFile:
setProgress:
setTypesToReceive:
setState:
setExpectedLength:
stream
scheduleInRunLoop:forMode:
setStreamStartTime:
streamDoneWithInfo:error:
state
write:maxLength:
removeFromRunLoop:forMode:
handler
progress
expectedLength
bytesReceived
read:maxLength:
setBytesReceived:
setReceivedData:
setReceivedDelem:
receivedData
receivedDelem
setPbwrapper:
pbwrapper
streamStartTime
setUserInfoObject:forKey:
dataWithBytesNoCopy:length:freeWhenDone:
file
streamError
stream:handleEvent:
typesToReceive
timeRemaining
setTimeRemaining:
_receivedDelem
_stream
_file
_progress
_handler
_typesToReceive
_pbwrapper
_receivedData
_streamStartTime
_timeRemaining
_bytesReceived
_expectedLength
_state
dictionaryWithDictionary:
stringByAppendingFormat:
initWithSFAdvertisement:optionBits:type:activityType:bundleIdentifier:teamIDs:advertisingOptions:scanner:receiver:dynamicIdentifier:
initWithSFAdvertisement:optionBits:type:activityType:bundleIdentifier:teamIDs:advertisingOptions:scanner:receiver:
setDynamicActivityType:
initWithAdvertisedBytes:
mutableCopy
setPeerDevice:
setTeamIDs:
currentUntil
validUntil
payloadRequestedCompletions
setPayloadRequestedCompletions:
setPayloadRequested:
payloadBytes
setPayloadAvailable:
teamIDs
payloadAvailabilityDelay
setPayloadAvailabilityDelay:
setOptionBits:
_optionBits
_currentUntilDate
_advertisementPayload
_payloadAvailabilityDelay
_payloadRequestedCompletions
_teamIDs
_dontPrefetchBefore
_removeAfter
entitlements
pasteboardTypes
generation
_pasteboardTypes
_generation
dataFile
setDataSent:
setTypesToSend:
setSendErrorHandler:
headerForData:
setCurrentSendData:
currentSendData
byteIndex
readDataOfLength:
setByteIndex:
shutdownTimerFired:
setBackupTimer:
backupTimer
shutdownStream
sendErrorHandler
dataSent
typesToSend
infoSent
setInfoSent:
_dataFile
_typesToSend
_sendErrorHandler
_currentSendData
_byteIndex
_infoSent
_dataSent
_backupTimer
setTeamIdentifier:
integerValue
allowedToUseLSAlwaysPick
allowedToUseUAAlwaysAdvertise
allowedToUseEligibleEvenWhenInBackground
payloads
setPayloads:
expirationDate
setExpirationDate:
eligibleForSearch
setEligibleForSearch:
eligibleForPublicIndexing
setEligibleForPublicIndexing:
isEligibleToAdvertiseWithUUID:
eligibleToAlwaysAdvertise
isEligibleToAlwaysAdvertiseWithUUID:
isDirtyActivityWithUUID:
askSourceProcessToUpdateActivityWithUUID:evenIfClean:completionHandler:
didResumeUserActivityWithUUID:completionHandler:
initWithUserActivityInfo:client:
initWithUUID:type:options:client:
alwaysEligible
update:
isDirty
needsUpdateBeforeAdvertising
wasResumedOnAnotherDeviceWithCompletionHandler:
_advertisingBytes
advertiseAdvertisementPayload:options:
fetchSFPeerDevicesWithCompletionHandler:
fetchPeerForUUID:withCompletionHandler:
fetchLoginIDWithCompletionHandler:
setController:
_delegate
advertisementVersion
encodeInt64:forKey:
decodeInt32ForKey:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
_advertisementVersion
_options
_device
isSandboxed
applicationIdentifier
applicationInfoForPID:completion:
debugStateChanged:
addObserver:selector:name:object:
removeUserActivityAdvertiseableItemByUUID:
allowedToAccessAnyItem
allowedToUseLSAlwaysEligible
clientIsSandboxed
synchronize
allowedToGetCurrentActivityInfo
createLogFileForClient:rotateLogs:
initWithDomain:code:userInfo:
addUserActivity:
copyUserActivityInfoWithUUID:
domain
dictionaryWithObject:forKey:
auditTokenValue
dirtyUUIDs
removeUserActivity:
setManager:
setClientIsSandboxed:
setAllowedToAccessAnyItem:
setDirtyUUIDs:
frontmost
setFrontmost:
setAllowedToUseLSAlwaysEligible:
setAllowedToUseEligibleEvenWhenInBackground:
setAllowedToUseLSAlwaysPick:
setAllowedToUseUAAlwaysAdvertise:
setAllowedToGetCurrentActivityInfo:
userActivityAdvertisableItemsByUUID
setUserActivityAdvertisableItemsByUUID:
_pendingResumeActivityUUIDs
_clientIsSandboxed
_allowedToAccessAnyItem
_frontmost
_allowedToUseLSAlwaysEligible
_allowedToUseEligibleEvenWhenInBackground
_allowedToUseLSAlwaysPick
_allowedToUseUAAlwaysAdvertise
_allowedToGetCurrentActivityInfo
_auditToken
_applicationIdentifier
_dirtyUUIDs
_currentAdvertisableActivity
_userActivityAdvertisableItemsByUUID
setHasPayloadXferSpeed:
hasPayloadXferSpeed
setHasStreamOpenTime:
hasStreamOpenTime
payloadXferSpeed
streamOpenTime
_payloadXferSpeed
_streamOpenTime
browserLookup
setDomain:
setBrowserLookup:
searchForServicesOfType:inDomain:
scanForPeersOfType:domain:
listeningService
port
initWithManager:service:
setListeningService:
initWithDomain:type:name:port:
publishWithOptions:
initWithManager:inputStream:outputStream:name:
netServiceBrowserWillSearch:
netServiceBrowserDidStopSearch:
netServiceBrowser:didNotSearch:
netServiceBrowser:didFindDomain:moreComing:
netServiceBrowser:didFindService:moreComing:
netServiceBrowser:didRemoveDomain:moreComing:
netServiceBrowser:didRemoveService:moreComing:
listenForIncomingConnections:port:type:
_browserLookup
_type
_domain
_listeningService
setPeerName:
setReadBuffer:
setInputStream:
setOutputStream:
getInputStream:outputStream:
inputStream
peerName
propertyForKey:
outputStream
peerUUID
readBuffer
writeBuffer
setWriteBuffer:
setPeerUUID:
getStreamsToHostWithName:port:inputStream:outputStream:
createConnection:host:port:
_inputStream
_outputStream
_readBuffer
_writeBuffer
_peerName
_peerUUID
substringToIndex:
replaceOccurrencesOfString:withString:options:range:
dateEpochStart:
setEpochStart:
initWithItem:isCurrent:when:versionFlags:
initWithType:string:dynamicType:teamID:webpageURL:options:isCurrent:when:versionFlags:
initWithAdvertisedBytes:options:
epochStart
getBytes:length:
timeOffset
initWithItem:isCurrent:when:
setPayloadBytes:
setCurrent:
setTimeOffset:
matchesItem:
epochEnd
activityUUID
_bytes
_activityUUID
_epochEnd
_epochStart
scheme
host
dateWithTimeIntervalSinceReferenceDate:
decodeIntegerForKey:
encodeInteger:forKey:
_pbinfo
_extraData
_extraDataType
initWithArchivedUserActivityInfo:
setSimulator:
getUUIDBytes:
initWithArchivedUserActivityInfo:peerDevice:simulator:
pidVersion
euid
ruid
egid
rgid
asid
getValue:
objCType
_auditTokenValue
_updateAdvertisement
_periodicIdleUpdate
setUserIsCurrent:
setLastUserActiveTime:
currentAdvertisedItem
shouldAdvertisePasteboard
scheduleAdvertisementUpdate
currentAdvertisementPayload
lastAdvertismentTime
preventIdleSleepAssertion
setPreventIdleSleepAssertion:
_advertisePayload:force:
updateAdvertisingPowerAssertion:
sfActivityAdvertisers
_advertisePayload:force:sfAdvertiser:
setCurrentAdvertisementPayload:
setLastAdvertismentTime:
scheduleAdvertisementUpdate:
setLastAdvertisementPayload:
scheduleIOPowerManagerUserIdleNotifications
userIsCurrent
pasteboardAvailible
pasteboardBitValue
lastUserActiveTime
setCurrentAdvertisedItem:
currentAdvertisedItemOtherAdvertisedItems
setCurrentAdvertisedItemOtherAdvertisedItems:
periodicUpdate
nextScheduleUpdate
changeAdvertisementThreadSpinCount
setChangeAdvertisementThreadSpinCount:
removeAdvertisement
shouldAdvertiseHandoff
advertiseItem:force:
advertisePayload:force:
removeIOPowerManagerUserIdleNotifications
productBuildVersion
productName
productVersion
_refreshPairedSFPeerDevices
setPairedDevices:
isDefaultPairedDevice
_updatePairedDeviceCapabilities
activityAdvertiser:activityPayloadForAdvertisementPayload:handoffCommand:requestedByDevice:withCompletionHandler:
dataWithCapacity:
increaseLengthBy:
peerDeviceCanAcceptNewerPayload:
encodedInfoToOldEncodedInfo:
encodedUserInfoError
dictionaryWithObjectsAndKeys:
userIsCurrentIdleTracker
lastAdvertisedGeneration
setLastAdvertisedGeneration:
pboardBitToAdvertise
setPboardBitToAdvertise:
sfActivityAdvertiser
lastAdvertisementPayload
validKey
keyCounter
currentAdvertisedBytes
mostRecentAdvertisedBytesTime
_advertisePayload:
pairedDevices
helpersDispatchGroup
dontAdvertiseAsCurrentUntil
setDontAdvertiseAsCurrentUntil:
setUserIsCurrentIdleTracker:
_sfAdvertisers
_needToRefreshPeerDevices
_shouldAdvertiseHandoff
_shouldAdvertisePasteboard
_userIsCurrent
_pboardBitToAdvertise
_pairedDevices
_currentAdvertisedItem
_nextScheduleUpdate
_periodicUpdate
_dontAdvertiseAsCurrentUntil
_currentAdvertisementPayload
_lastAdvertismentTime
_lastAdvertisementPayload
_currentAdvertisedItemOtherAdvertisedItems
_changeAdvertisementThreadSpinCount
_preventIdleSleepAssertion
_userIsCurrentIdleTracker
_lastUserActiveTime
_lastAdvertisedGeneration
creator
bootstrapName
reconnectToParentSimulator
ourDevice
peeredDevice
setSimulatorInFront:
setOurDevice:
_pairedClientPort
_notifyToken
_notifiedItems
_activitiesShouldCrossover
_commandPort
_ourDevice
_peeredDevice
_creator
_bootstrapName
initWithUUIDBytes:
replayableAdvertisableItemWithAdvertisableItem:
initWithUUID:
_wasResumed
setNetworkConnectionHandler:
networkConnectionHandler
hasSuffix:
enumerateObjectsUsingBlock:
replayManager
setReplayManager:
setDebugging:
receivePing:
doDidSaveDelegate:completionHandler:
fakeBTLEInjectedItem
setFakeBTLEInjectedItem:
listener
setListener:
subscribers
setSubscribers:
ignoredRTimeVal
_replayManager
_networkConnectionHandler
_ignoredRTimeVal
currentCalendar
components:fromDate:
hour
minute
AWDHandoffUserActivityWasContinued
NSCopying
AWDHandoffDidSendLocalPasteboard
UAPingNotifier
PowerManagerIdleTracker
UAPingUserActivityInfo
UASimulatorReceiver
AWDHandoffRemotePasteboardBecameUnavailable
UAActivityReplayAdvertiser
AWDHandoffUserActivityWasSuggested
AWDHandoffUserActivityBecameCurrent
UABestAppSuggestionController
NSXPCListenerDelegate
NSObject
UABestAppUserActivityInfoSuppressionRecord
UABestAppSuggestionNotifier
UABestAppSuggestionManagerProtocol
AWDHandoffRemotePasteboardTypeInfoRequested
UASharedPasteboardDataManager
_LSUserActivityWasContinuedInfo
UAActivityReplayReceiver
UAUserActivityAdditions
UAReceiver
UACornerActionManagerHandler
AWDHandoffRemotePasteboardBecameAvailable
UALocalCornerActionItem
UADebugAdvertisableItem
UASimulatorAdvertiser
UAReplayClientController
UACornerActionManager
SFActivityScannerDelegate
UAPingController
UAClientController
UADispatchScheduler
UAActivityNotifier
UAActivityNotifierProtocol
UAPasteboardClientProtocol
UASharedPasteboardClientController
UASharedPasteboardManagerProtocol
SFCompanionAdvertiserDelegate
UAPingClient
UATimedPowerAssertions
UASimulatorAdvertisementCreator
UAActivityReplay
NSNetServiceDelegate
SFActivityAdvertiserDelegate
UALocalizedString
UASimulatorController
UAPeerDevice
UAUserActivityDefaults
UALocalItemReceiver
UADiagnosticManager
UAUserActivityClientProtocol
UAUserActivityClientResponseProtocol
UABestAppSuggestionManagerResponseProtocol
UASharedPasteboardManagerResponseProtocol
UAResumableActivitiesAdministrativeProtocol
UAResumableActivitiesSysdiagnoseSupportProtocol
UAUserActivityDebugLoggingProtocol
UALoggingAdvertiser
FBSDisplayLayoutElement
FBSUIApplicationLayoutElement
UAUserActivityClientProcessesController
UASharedPasteboardDataRequester
UserActivityToBTLEPayload
UASharingReceiver
UASharedPasteboardInputStreamManager
NSStreamDelegate
SharingBTLESuggestedItem
UASharedPasteboardActivityInfo
UASharedPasteboardOutputStreamManager
UAUserActivityAdvertisableItem
UAAdvertisableItem
UAMockActivityAdvertiser
UAMockActivityScanner
UAMockActivityAdvertisement
NSSecureCoding
NSCoding
UAUserActivityClientProcess
AWDHandoffRemotePasteboardWasRequested
UANetworkReplayRendevousHandler
NSNetServiceBrowserDelegate
UANetworkReplayController
AWDHandoffUserActivityWasDiscovered
SharingBTLEAdvertisementPayload
UASharedPasteboardInfoWrapper
UASimulatorSuggestedItem
UAAuditToken
UASharingAdvertiser
UASimulator
UAReplayAdvertisableItem
UADispatchReceiver
ActivityManagerDebuggingManager
UAAdvertiser
@24@0:8^{_NSZone=}16
v24@0:8Q16
v20@0:8B16
B16@0:8
v20@0:8I16
@16@0:8
B24@0:8@16
v24@0:8@16
Q16@0:8
v16@0:8
I16@0:8
@"NSString"
{?="errorCode"b1"payloadSize"b1"timestamp"b1"transferDurationNsec"b1"transferSpeed"b1"source"b1"suggestedActionType"b1"browserFallback"b1"cancelled"b1}
v24@0:8q16
q16@0:8
{?="clientWriteSize"b1"clientWriteSpeed"b1"clientWriteTime"b1"errorCode"b1"streamDataSize"b1"streamDataXferSpeed"b1"streamDataXferTime"b1"streamOpenDelay"b1"timestamp"b1"totalTime"b1"usedStreams"b1}
@24@0:8@16
@"NSMutableSet"
@48@0:8@16@24d32@?40
Q32@0:8@16d24
d16@0:8
v24@0:8d16
@?16@0:8
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@"NSDate"
@24@0:8Q16
B20@0:8B16
@"UASimulator"
@"NSArray"
{?="timestamp"b1"reason"b1}
@"UAUserActivityInfo"
{?="timestamp"b1}
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8@"Protocol"16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
@32@0:8@16@24
@"NSXPCListener"
@"NSUUID"
v24@0:8@?<v@?@"NSUUID"Q@"NSString"@"NSString"@"NSDate"d@"NSString"@"NSString"@"NSString">16
v32@0:8q16@?24
v32@0:8q16@?<v@?@"NSArray"@"NSError">24
v32@0:8@16@24
v32@0:8@"NSUUID"16@"NSDictionary"24
v32@0:8@16@?24
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v36@0:8@16Q24B32
v36@0:8@"NSUUID"16Q24B32
@"NSXPCConnection"
@"NSMutableDictionary"
@"UADispatchScheduler"
{?="errorCode"b1"payloadSize"b1"payloadXferTime"b1"timestamp"b1}
i16@0:8
v20@0:8i16
@"NSError"
@"NSSet"
@"UACornerActionManager"
@48@0:8@16Q24@32@40
@"UAUserActivityClientProcess"
@32@0:8Q16@24
@"NSMutableArray"
v32@0:8@"SFActivityScanner"16@"SFActivityAdvertisement"24
v32@0:8@"SFActivityScanner"16@"SFPeerDevice"24
v32@0:8@"SFActivityScanner"16@"NSSet"24
B24@0:8d16
v40@0:8@16@24@32
@"NSUserDefaults"
@"NSObject<OS_dispatch_group>"
@"SharingBTLESuggestedItem"
@"UASharedPasteboardClientController"
@"UAPingController"
@"UATimedPowerAssertions"
@"NSObject<OS_dispatch_source>"
@"PowerManagerIdleTracker"
@"ActivityManagerDebuggingManager"
@"NSObject<OS_dispatch_semaphore>"
@"UAPingResults"
@"NSTimer"
@"UAPingClient"
@"UAPingNotifier"
@48@0:8@16d24@32@?40
@32@0:8@"UACornerActionManager"16@"NSString"24
@"NSSet"16@0:8
v24@0:8@"NSSet"16
v24@0:8@?<v@?>16
v24@0:8@?<v@?B>16
v32@0:8@16Q24
v32@0:8@"UASharedPasteboardInfo"16Q24
v28@0:8i16@?20
v28@0:8i16@?<v@?@"UASharedPasteboardInfo"@"NSError">20
v40@0:8@"SFCompanionAdvertiser"16@"NSInputStream"24@"NSOutputStream"32
v28@0:8B16@20
Q24@0:8Q16
^{__CFUserNotification=}16@0:8
v24@0:8^{__CFUserNotification=}16
@"UASharedPasteboardInfo"
@"UASharedPasteboardDataRequester"
@"SFCompanionAdvertiser"
@"UASharedPasteboardInfoWrapper"
@"UASharedPasteboardOutputStreamManager"
@"UASharedPasteboardInputStreamManager"
@"NSProgress"
^{__CFUserNotification=}
@"AWDHandoffRemotePasteboardWasRequested"
@"AWDHandoffDidSendLocalPasteboard"
@"NSBundle"
@40@0:8@16d24@32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
v56@0:8@16@24@32@40@?48
v56@0:8@"SFActivityAdvertiser"16@"NSData"24@"NSString"32@"SFPeerDevice"40@?<v@?@"NSUUID"@"NSData"@"NSError">48
v32@0:8@"SFActivityAdvertiser"16@"NSSet"24
v48@0:8@16@24@32@?40
v48@0:8@"SFActivityAdvertiser"16@"NSData"24@"SFPeerDevice"32@?<v@?@"NSUUID"@"NSData"@"NSError">40
v48@0:8@16@24@32@40
v48@0:8@"SFActivityAdvertiser"16@"NSUUID"24@"SFPeerDevice"32@"NSError"40
B32@0:8@16@?24
@"SFPeerDevice"
@"UAActivityReplayAdvertiser"
@"UAActivityReplayReceiver"
@"UAReplayClientController"
@"UAMockActivityAdvertiser"
@"UAMockActivityScanner"
B28@0:8@16B24
q32@0:8@16q24
d32@0:8@16d24
@20@0:8B16
@"UAUserActivityClientProcessesController"
v32@0:8@16r^{?=[8I]}24
Q32@0:8Q16Q24
v40@0:8q16@24@?32
v40@0:8q16@"NSDictionary"24@?<v@?q@"NSDictionary"@"NSError">32
v32@0:8@"UAUserActivityInfo"16@?<v@?@"NSError">24
v32@0:8@"NSUUID"16@?<v@?@"UAUserActivityInfo"@"NSError">24
v36@0:8@16B24@?28
v36@0:8@"UAUserActivityInfo"16B24@?<v@?@"NSError">28
v28@0:8@16B24
v28@0:8@"NSUUID"16B24
v24@0:8@"NSUUID"16
v32@0:8@"NSString"16@"NSString"24
v52@0:8@16B24@28@36B44B48
v52@0:8@"NSUUID"16B24@"NSURL"28@"NSDate"36B44B48
v32@0:8@"UAUserActivityInfo"16@?<v@?@"NSUUID"@"NSError">24
v24@0:8@?<v@?@"NSUUID"@"NSString"@"NSError">16
v32@0:8@"NSUUID"16@?<v@?B@"NSString"i@"NSString"@"NSError">24
v40@0:8@16@24@?32
v40@0:8@"NSString"16@"NSDictionary"24@?<v@?@"NSFileHandle"@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"UAUserActivityInfo"B@"NSError">24
v28@0:8B16@"NSFileHandle"20
v104@0:8@16Q24@32@40@48@56@64d72@80@88@96
v104@0:8@"NSUUID"16Q24@"NSDictionary"32@"NSString"40@"NSString"48@"NSString"56@"NSDate"64d72@"NSString"80@"NSString"88@"NSString"96
v32@0:8@"NSFileHandle"16@?<v@?@"UASharedPasteboardInfo"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSError">24
v32@0:8@"NSString"16@24
v32@0:8@"NSString"16@?<v@?@"NSUUID">24
v24@0:8@?<v@?@"NSUUID">16
v32@0:8Q16@?24
v32@0:8Q16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"NSArray">16
v32@0:8@"NSDictionary"16@?<v@?@"NSDictionary">24
v32@0:8@"NSDictionary"16@?<v@?@"NSString">24
v72@0:8@16Q24@32@40@48@56d64
v72@0:8@"NSUUID"16Q24@"NSString"32@"NSString"40@"NSData"48@"NSData"56d64
v28@0:8B16@?20
v28@0:8B16@?<v@?@"NSDictionary"@"NSError">20
v32@0:8@"NSString"16@"NSObject<NSSecureCoding>"24
v24@0:8@?<v@?@"UAPingResults">16
v32@0:8@16q24
v32@0:8@"NSString"16q24
v36@0:8@16@24B32
v36@0:8@"NSString"16@"NSString"24B32
v28@0:8B16@?<v@?@"UAPingResults">20
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v28@0:8B16@?<v@?@"NSArray">20
B20@0:8i16
v36@0:8i16@20[1{__va_list_tag=II^v^v}]28
v28@0:8i16@20
@"NSFileHandle"
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@20@0:8i16
@"FBSDisplayLayoutMonitor"
@"FBSDisplayLayout"
@"BKSApplicationStateMonitor"
@"UALocalItemReceiver"
@"SFActivityScanner"
@64@0:8@16@24@32@40@48@56
@"NSData"
@"NSURL"
v32@0:8@"NSStream"16Q24
@40@0:8@16@24@32
@"NSInputStream"
@"NSOutputStream"
@"NSMutableData"
@44@0:8@16I24@28@36
@92@0:8@16I24Q28@36@44@52@60@68@76@84
@84@0:8@16I24Q28@36@44@52@60@68@76
B24@0:8@?16
@"SharingBTLEAdvertisementPayload"
@"UASharingReceiver"
^B16@0:8
v24@0:8^B16
B28@0:8B16@?20
@"<SFActivityAdvertiserDelegate>"
@"UAActivityReplay"
@"<SFActivityScannerDelegate>"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"NSDictionary"
B36@0:8@16B24@?28
C16@0:8
v20@0:8C16
@"UAAuditToken"
@"UAUserActivityAdvertisableItem"
{?="errorCode"b1"payloadSize"b1"payloadXferSpeed"b1"payloadXferTime"b1"streamDataSize"b1"streamDataXferSpeed"b1"streamDataXferTime"b1"streamOpenTime"b1"timestamp"b1"totalTime"b1"cancelled"b1"usedStreams"b1}
v24@0:8@"NSNetServiceBrowser"16
v32@0:8@"NSNetServiceBrowser"16@"NSDictionary"24
v36@0:8@"NSNetServiceBrowser"16@"NSString"24B32
v36@0:8@"NSNetServiceBrowser"16@"NSNetService"24B32
B36@0:8@16i24@28
@"NSNetServiceBrowser"
@"NSNetService"
B40@0:8@16@24q32
@48@0:8@16@24@32@40
@40@0:8@16B24@28C36
@36@0:8@16B24@28
@80@0:8Q16@24@32@40@48@56B64@68C76
@76@0:8Q16@24@32@40@48@56B64@68
{?="hashedAdvertisementBytes"[7C]"optionBits"C"timeOffset"C}
@48@0:8{?=[8I]}16
v24@0:8^v16
r*16@0:8
{?=[8I]}16@0:8
{?="val"[8I]}
B36@0:8@16B24@28
@40@0:8@16I24i28Q32
@"UASimulatorController"
@"UASimulatorAdvertiser"
@"UASimulatorReceiver"
@"UASimulatorAdvertisementCreator"
{timeval=qi}16@0:8
@"UANetworkReplayRendevousHandler"
{timeval="tv_sec"q"tv_usec"i}
MbP?
?(knN
pbpaste!
pbtypes!
J@%L9
PING
PONG
pbpaste!
pbtypes!
@@(#)PROGRAM:useractivityd  PROJECT:UserActivity-63.15
33333
PING: Received payload for PING; creating PONG response. error=%{public}@
PING: Removing pong item %{public}@/%{private}@ because it was continued 
IdleTracker:alloc(%{public}@) interval=%{public}g
IdleTracker:dealloc(%{public}@
IdleTracker: %{public}@: mostSignificantLevel=%{public}@ %{public}s%{public}s weakSelf=%{public}p
IdleTracker: %{public}@, callingBlock, %{public}s, interval=%{public}@
SIMULATOR: Setting receivedItems to %{private}@
SIMULATOR: Items changed ( from %{private}@ ), so updating and signalling.
includePayload=%{public}s
SIMULATOR: Clearing current item, because it has been removed ( was %{public}@/%{private}@).
SIMULATOR: Updating existing item, %{public}@ %{private}@/%{private}@
SIMULATOR: Item %{public}@ seems to be different from %{public}@, so changing received item & updating lists.
SIMULATOR: Looking for %{private}@
SIMULATOR: Found bundle ID for item %{public}@/%{private}@, %{private}@
SIMULATOR: Unable to find application to handle typeIdentifier %{private}@:%{private}@ for item %{public}@
FAILED to decode %@ object for useractivityd <-> simulator connection, %@
BESTAPP: Created controller to handle connections to Springboard/Dock
BESTAPP: suspend
BESTAPP: resume
BESTAPP: terminate
BESTAPP: received listener request from process %ld
BESTAPP: Creating listening notifier for process %ld
*** Attempt to access BestAppSuggestion xpc interface fror process %{public}@, which doesn't have the %{public}@ entitlement
Removing bestAppSuggestion notifier %{public}@
Invalidating bestAppSuggestion notifier
setItems(%{private}@)
BESTAPP: -- Ignoring supressed item, %{private}@ %{public}@ (until %{public}@, now=%{public}@)
BESTAPP: -- Ignoring supressed item, %{private}@ %{public}@ (until %{public}@, item.when=%{public}@, now=%{public}@)
BESTAPP: Ignoring item %{public}@/%{private}@ %{public}@, because it is earlier than %{public}@
BESTAPP: -- Ignoring item %{public}@/%{private}@, because it is not a local action
BESTAPP: Not notifying clients about new best app %{public}@/%{private}@ .when=%{public}@ because it matches last item.
Notifying clients about new best app: %{public}@/%{private}@
Error when nudging cloud docs for bundleIdentifier=%{private}@, err=%{public}@
BESTAPP: supressedUntil=%{private}@
BESTAPP: Setting .hardSupressedUntil for %{public}@ to nil, because that time has passed.
BESTAPP: Setting .supressUntil for %{public}@ to nil, because that time has passed.
BESTAPP: Setting .supressedUntil for %{public}@ to nil, because the .lastInterestingTime is earlier the last update for this item (%{public}@ vs %{public}@ (%{public}@ vs %{public}@), when=%{public}@).
doConnected, bestApp client connected. pid=%d
doDetermineBestAppSuggestionWithCompletionHandler, bestApp=%{public}@/%{private}@
doDetermineBestAppSuggestionWithCompletionHandler, bestItem = nil
uuid=%{public}@ options=%{public}@
BESTAPP: Updating existing supression record for item %{public}@/%{private}@, %{public}@
BESTAPP: Setting supressedUntil for item %{public}@/%{private}@ item.when=%{public}@ to %{public}@/%{public}@ lastInterestingTime=%{public}@
-- Scheduling messagetracer info for submission: %{public}@, %{private}@
-- Sumbitting messagetracer info for %{public}@, %{private}@
Queuing fetch for bestAppUUID %{public}@
%{public}s: Starting up, %{public}s %{public}s version %g built on %{public}s %{public}s.  args=%{public}@
### Adding SFActivitySharingAdvertiser to manager, %{public}@
*** terminateServerIfExecutableIsReplaced fd = %d
*** Detected a change to %{public}s, so terminating server in %f seconds.
*** Cancelling source.
[FILE MANAGER] ERROR creating shared pasteboard dir: %@
[FILE MANAGER] Shared Path: %@
[FILE MANAGER] Path for file UUID: %@ -> %@
[FILE MANAGER] Created file at path: %@
[FILE MANAGER] Failed to create file at path: %@ / %s
[FILE MANAGER] Creating file for local pasteboard blob at path: %@
[FILE MANAGER] Created Handle: %@
[FILE MANAGER] Creating file for remote pasteboard blob at path: %@
HANDLER: %{public}@ is being suspended ( was not )
HANDLER: %{public}@ is being resumed ( was suspended )
HANDLER: %{public}@ is being terminated %{public}@
Setting advertisable items to %{private}@
SIMULATOR: Telling paired client that the advertised item %{public}@/%{private}@ changed.
result=%{private}@
-- signalling thread to determine what activity to advertise because one of our userActivityItems changed.
Determining list of items to be advertised thread starting up: 
POSSIBLE items to advertise:%{private}@
DETERMINE: Since this activityItem's .userInfo, %{public}@ "%{private}@" type=%{private}@, has unsynchronized cloud documents, we can't actually advertise this item.
DETERMINE: Activity %{public}@/%{private}@ had unsynchronized documents, so we asked it to update and we've heard back.
DETERMINE: Activity %{public}@/%{private}@ had unsynchronized documents, so we asked it to update and we've heard back with an error %{public}@.
PICKING: %{public}@/%{private}@ as the current item-to-advertise.
-- Received com.apple.screensaver.didstart so setting self.screenSaverActive to YES and signalling _userIdleDetermination thread. 
-- Received com.apple.screensaver.didstop so setting self.screenSaverActive to NO and signalling _userIdleDetermination thread. 
*** GOT NONSENSICAL TIME %f FROM BKSHIDServicesLastUserEventTime(); setting it to be roughly now.
Determining idleDetermination, entering.
IDLE: UserIdleTracker says the user is %{public}s; shouldSuspendAdvertising=%{public}s.
IDLE: Setting self.screenDimmedPowerAssertion == nil because there are no items being advertised.
IDLE: Setting shouldSuspendAdvertising == YES because self.screenDimmedPowerAssertion != nil
IDLE: Setting screenSaverActivePowerAssertion == nil because there are no items being advertised.
IDLE: Setting shouldSuspendAdvertising == YES because screenSaverActivePowerAssertion == nil
IDLE: Setting shouldSuspendAdvertising == NO because the device was recently locked and our assertion is still outstanding.
IDLE: Setting systemShouldNotBeAdvertising=NO because advertiser %{public}@ always wants to be advertised.
IDLE: Determined that the allowed-to-advertise state of the system didn't change (is %{public}@), so just spinning the userIdleDetection thread until (at most) the next time we check for user presence.
IDLE: Determined that advertising should be suspended, removing any active advertisement and setting self.systemHasSuspendedAdvertisements = YES ( idle=%.2f seconds, screensaver=%{public}@)
*** SUSPENDING ADVERTISERTISER %{public}@
*** RESUMING ADVERTISERTISER %{public}@
 -- there are listening clients, so firing the check-and-update-BestApplication thread.
Creating loop to check-for-and-update BestApplication
Candidate bestAppSuggestions: %{private}@
CornerActionManger:  suspend ( was suspended = %{public}@)
*** Suspending advertiser %{public}@
PICKING: 17052817 Scheduling holdPowerAssertionUntil to expire in (at most) %f seconds, at %{public}@
17052817: Releasing power manager assertion %lx.
IOPMAssertionCreateWithProperties returned %x
17052817: Created power manager assertion %lx, will release in %f seconds.
CornerActionManger:  resume
*** Resuming advertiser %{public}@
*** Resuming receiver %{public}@
UserActivity, received UAUserActivityManagerActivityContinuationIsEnabledChangedNotification notification, so spinning all threads.
Backlight %@
UPDATEADVERTISMENT: -- SBSEventObserverEventDimmed, creating self.screenDimPowerAssertion
UPDATEADVERTISMENT: -- SBSEventObserverEventUndimmed, clearing self.screenDimPowerAssertion
updateScreenDimState: %{public}@ (was %{public}@)
updateScreenDimmedState, setting to YES, so creating assertion.
screenDimmedPowerAssertion, power assertion timed out and expired, so triggering user idle determination.
screenDimmedPowerAssertion, screenDimmedPowerAssertion power assertion removed.
updateUIDeviceLockedState, setting to NO, so removing power assertion & triggering idle determination.
updateUIDeviceLockedState: %{public}@ (was %{public}@)
updateUIDeviceLockedState, setting to YES, so creating assertion if we have an advertisement.
UPDATEADVERTISMENT: -- Requesting payload for item %@ from client, because it is (was) an active item and we're about to deviceLock so want the activity.
Creating power assertion of %g seconds, to keep advertisement alive.
updateUIDeviceLockedState, power assertion timed out and expired, so triggering user idle determination.
updateUIDeviceLockedState, power assertion removed.
updateUIDeviceLockedState, device is unlocked, so removing power assertion & triggering idle determination.
addAdvertiser(%{public}@)
removeAdvertiser(%{public}@)
## Received com.apple.location.changed so restarting deamon
SCHEDULE:%{public}@, next=%{public}@ freq=%g
SCHEDULE:%{public}@ scheduleNext, interval=%g
SCHEDULE: Setting next time to DISPATCH_TIME_FOREVER because interval > anything reasonable
SCHEDULE:%{public}@, scheduling down to %f seconds ( _next=%{public}@ )
SCHEDULE:%{public}@, next=%{public}@/%lld ( was %{public}@/%lld )
SCHEDULE:%{public}@, next=NOW ( was %{public}@ ) freq=%g
SCHEDULE:%{public}@, run.  
SCHEDULE:%{public}@, DONE run, next=%{public}@
SCHEDULE:%{public}@, setFreq, next=%{public}@ freq=%g
SCHEDULE:%{public}@, RESET, next=FOREVER ( was %{public}@ ) freq=%g
[PBOARD CONTROLLER] Creating pboard client controller
[PBOARD CONTROLLER] Screen sharing session started, disabling universal clipboard
[PBOARD CONTROLLER] No more screen sharing sessions, enabling universal clipboard
[PBOARD CONTROLLER] Return Client Items in Order: %@
[PBOARD CONTROLLER] Screen Watcher Present, setting to NO and nil
[PBOARD CONTROLLER] Sending client xpc remote avalible update: %@
[PBOARD CONTROLLER] Error getting client connection: %@
[PBOARD CONTROLLER] Got type update from client, gen: %lu, %@
[PBOARD CONTROLLER] Ignoring type updates, screen sharing session in progress
[PBOARD CONTROLLER] Received pasteboard info: %@
[PBOARD CONTROLLER] Clear local pasteboard info: from client
[PBOARD CONTROLLER] Remove Local Types Fired
[PBOARD CONTROLLER] Remove Local Timer Fired
[PBOARD CONTROLLER] Pasteboard types fetch requested
[PBOARD CONTROLLER] Type payload fetch error: %{public}@
[PBOARD CONTROLLER] Recieved type info
[PBOARD CONTROLLER] Type Fetch Info: %{private}@
[PBOARD CONTROLLER] Recieved extra data, saving for later
[PBOARD CONTROLLER] Paste Fetch Info: %@
[PBOARD CONTROLLER] Pasteboard data fetch requested for pid: %d
[PBOARD CONTROLLER] Already have remote data, using it: %@
[PBOARD CONTROLLER] Requesting data from remote device
[PBOARD CONTROLLER] Starting timer to show UI in %lf sec
[PBOARD CONTROLLER] Pasteboard Fetch Cancelled
[PBOARD CONTROLLER] Payload fetch error: %{public}@
[PBOARD CONTROLLER] PBData came with stream request, was a small pboard
[PBOARD CONTROLLER] Error creating remote data file
[PBOARD CONTROLLER] Requesting to open streams
[PBOARD CONTROLLER] Opened streams with error: %{public}@
[PBOARD CONTROLLER] Opened streams
[PBOARD CONTROLLER] Could not create data file for remote pasteboard
[PBOARD CONTROLLER] Error receiving pboard info: %{public}@
[PBOARD CONTROLLER] Received error from remote: %{public}@
[PBOARD CONTROLLER] Received pboard info: %@
[PBOARD CONTROLLER] Pboard is small enough to send via BTLE payload
[PBOARD CONTROLLER] Pasteboard Sent Info: %{private}@
[PBOARD CONTROLLER] Starting pboard service for paste
[PBOARD CONTROLLER] Pasteboard data alread fetched sending now
[PBOARD CONTROLLER] Failed to create local pasteboard data file
[PBOARD CONTROLLER] Error getting client object proxy: %{public}@
[PBOARD CONTROLLER] pbsize: %ld, payload size limit: %ld
[PBOARD CONTROLLER] Telling client pboard will be fetched
[PBOARD CONTROLLER] Error getting client connection for write notification: %@
[PBOARD CONTROLLER] Attempting to get local pasteboard data
[PBOARD CONTROLLER] Getting pboard written to file
[PBOARD CONTROLLER] Recieved streams, waiting for local data to be avalible
[PBOARD CONTROLLER] Local data avalible, starting out stream
[PBOARD CONTROLLER] Error sending types: %{public}@
[PBOARD CONTROLLER] Finished sending types: %@
[PBOARD CONTROLLER] Local Pasteboard Sent Info: %{private}@
[PBOARD CONTROLLER] Timeout getting local pasteboard
[PBOARD CONTROLLER] New client connection does not have correct entitlement: %@
[PBOARD CONTROLLER] Received new client connection: %@
[PBOARD CONTROLLER] Client interrupted
[PBOARD CONTROLLER] Client invalidated
[PBOARD CONTROLLER] show pbui, but already visible, skipping
[PBOARD CONTROLLER] Setting durration time for %lf sec
[PBOARD CONTROLLER] Setup progress UI: %@, %@, %@
[PBOARD CONTROLLER] Creating notification for progress ui with options: %@
[PBOARD CONTROLLER] Notification creation err: %d
[PBOARD CONTROLLER] Waiting for notification result
[PBOARD CONTROLLER] Response flags: %lu
[PBOARD CONTROLLER] User cancelled the paste
[PBOARD CONTROLLER] Paste was cancelled
[PBOARD CONTROLLER] Unexpedted result from user notification
[PBOARD CONTROLLER] Adding hide delay of %lf sec
[PBOARD CONTROLLER] Hide progress in %lf sec with fail: %@
[PBOARD CONTROLLER] iOS needs a minimum delay of 1.25 sec, updating delay to 1.25
[PBOARD CONTROLLER] Canceling the user notification
[PBOARD CONTROLLER] No notification, must have already been canceled
-dealloc for power assertion %{public}@/%{public}@
ASSERTION: %{public}@ Calling block with NO, in -dealloc
ASSERTION: %{public}@ Releasing assertion %ld, in -dealloc
ASSERTION: %{public}@ Scheduling assertion for %g seconds.
ASSERTION: %{public}@ Rescheduling assertion for %g seconds (was %.2g seconds from now).
ASSERTION: %{public}@ No need to update assertion; request for %g seconds is less than current expiration, in %.2g seconds.
%s, IOPMAssertionCreateWithProperties returned %x
ASSERTION: %{public}@ Power assertion /%ld created.
ASSERTION: %{public}@ Power assertion %ld released.
ASSERTION: %{public}@ Calling block with YES because assertion timed out
SIMULATOR: Returning received activities %{private}@ as eligibleItems
PROCESSCOMMAND:%{private}@
REPLAY: Destroying replay object because the peer's UUID %{public}@ matched our own.
REPLAY: Terminating UAActivityReplay because TERMINATE was received.
=== Forcing item into replay client: %{private}@
=== UPDATED PAYLOD FOR item %{private}@ 
=== WAITING FOR ACTIVITY %{private}@ to be resumed (for %g seconds)
=== REMOVING ACTIVITY %{private}@ to be resumed
NETWORK: Received broadcasted advertisement %{private}@
REPLAY: PULLPAYLOAD request, for advertisementPayload=%{private}@
REPLAY: PULLPAYLOAD request, got encodedData %{private}@ from creating application for advertisementPayload %{private}@, so returning that to paired client over the network.
REPLAY: RETURNPAYLOAD request, for advertisementPayload=%{private}@
REPLAY: RETURNPAYLOAD request, found existing payloadHandler in _pendingPayloadFetches for advertisementPayload=%{private}@
REPLAY: Didn't find handler for advertisement %{public}@/%{private}@, pendingPayloads=%{private}@
REPLAY: Sending encoded data %{private}@ to activity handler.
terminate
Looking for localized string for key: %@
Falling back to NSLocalizedString
SIMULATOR: Terminating all UASimulators.
SIMULATOR: RegisterWithParentWithVersion simulatorVersion=%llu, serverPort=%x pid=%d
Metric AT for %{private}@ is %{private}@
AdvertisableItems:%{private}@
layout=%{private}@
LOCKSCREEN: Layout contains modal lock screen, %{private}@.
Adding client %{private}@, %{public}@, bundleID=%{private}@ to known userActivityClients.
Removing client %{private}@, application %{public}@, from known userActivityClients.
Moving 'LSLivePastProcessExit' activity %{public}@/%{private}@ from process %{public}@ into additionalUserActivityAdvertisableItems
Removing client %{public}@ from _userActivityClientsByPID
Removing client %{private}@ from _userActivityClientsByBundleIdentifier
*** FORCING item %{private}@ as the most eligible item, since it's a ping
-- Adding in eligibleItemsWhenInBackground items, %{private}@. 
listener=%{private}@ newConnection=%{private}@
[DATA REQUESTER] Requesting payload from: %@
[DATA REQUESTER] Requesting complete: %lu, %@
[DATA REQUESTER] Requesting pbinfo from: %@
*** ERROR: Received BTLEUserActivity error packet, but unable to de-archive it, so discarding it.
*** ERROR: Received BTLEUserActivity packet with unknown version, %ld, so discarding it.
-- Compressed data to %ld bytes (from %ld bytes) in data, ( %ld%% )
Using compressed data, because it is %ld bytes smaller than the uncompressed data.
UASharingReceiver, suspending activity scanner %{public}@.
UASharingReceiver, resuming activity scanner %{public}@.
foundDevice, deviceIdentifier=%{private}@ so .
foundDevice, deviceIdentifier=%{private}@
lostDevice, deviceIdentifier=%{private}@.
Retaining %{public}@ in _receivedItems because it's .payloadRequested or .payloadAvailable, so that it remains available for a bit, until %{public}@.
REMOVING: %{public}@ because it's on device %{private}@
SharingBTLEReceiver: Running periodicCleanupFunc to check for received items whose .removeAfter has passed.
Removing %{public}@ from .receivedItems because .removeAfter, %{public}@ has expired.
(%{private}@,%{public}@)
Received Ad: %{public}@ opts=%{public}@ from %{private}@/%{private}@
Ignoring received ActivityContinuation because the current profile disallows it, %{public}@ from %{private}@
SIMULATING foundDeviceForIdentifier: %{private}@
Received advertisement.advertisementPayload == nil, so removing the last received activity because that's what we do.
[PBOARD] Received pboard avalible advertisement
[PBOARD] Ad is from last seen device
[PBOARD] Pboard version bit flipped, notify client
[PBOARD] Ad is from new device, notify client
[PBOARD] Notify client of new remote pboard and reset timmer
[PBOARD] Recived add w/o remote pboard for last seen device, notify client and clear timmer
 -- Looking for activity matching advertisingPayload %{public}@, from %{private}@/%{private}@
 -- Found matching advertisingPayload to item already received from this device, %{public}@/%{private}@, so using it. %{public}@/%{private}@
 -- Clearing payload of item %{public}@/%{private}@ because the last active time from that device has changed.
 -- Because the optionBits in the packet changed, from %{public}@ to %{public}@, discarding current item and starting fresh, %{public}@ / %{private}@
 -- Matching dns- item to previously received one, mapping to %{private}@, for item already received from this device, %{public}@/%{private}@, so using it. %{private}@
 -- New advertisement of DNS type didn't seem to match to same app as  previous one, %{public}@ vs %{public}@, so can't use it. %{private}@
PING: Pong was sent, error=%{public}@
# RECEIVED advertisement, %{public}@ type=%{private}@ -> %{private}@, %{public}@, from %{private}@/%{private}@ options=%{public}@
*** Checking whether to do a pre-emptive fetch of the payload for item %{public}@/%{private}@
*** Ignoring prefetch for item %{public}@/%{private}@ because dontPrefetchBefore=%{public}@
*** Scheduling a pre-emptive fetch of the payload for item %{public}@/%{private}@
*** Completed a pre-emptive fetch of the payload for item %{public}@/%{private}@
[IN STREAM] Starting to receive types: %@
[IN STREAM] Input stream canceled
[IN STREAM] Done with input stream
[IN STREAM] Paste cancelled, closing stream
[IN STREAM] Receiving Header Info
[IN STREAM] Error, malformed data received. Have not received message header.
[IN STREAM] Receiving Header
[IN STREAM] Started receiving header
[IN STREAM] Error, malformed data received. Did not receive correct delimiter
[IN STREAM] Received Header: %@
[IN STREAM] Started receiving data file
[IN STREAM] Received data file
[IN STREAM] Stream Event Error: %@
[IN STREAM] Stream End Encountered
 -- Received a kLSAdvertisementStringUserActivityKind; finding application with advertising string %{public}@
 -- MATCHED, adverising bytes %{public}@ to activityType %{private}@, from application %{private}@
 -- Received a kLSAdvertisementStringDomainNameKind; looking for native application application with advertising string %{public}@
 -- Adding domains for bundleID: %{private}@
 -- Domain name strings: %{private}@
 -- MATCHED, adverising bytes %{public}@ to domain name %{private}@, from application %{private}@
 -- Received a kLSAdvertisementStringDomainNameKind; no match for native application, so looking for browser
 -- Received a kLSAdvertisementStringPrivateSpaceKind; finding application with private space string %{public}@
 -- MATCHED, adverising bytes %{public}@ to privateType string %{private}@, from application %{private}@
 -- Found application %{private}@, with matching advertisingIdentifier %{private}@, from %{private}@ for payload %{public}@
Creating CornerActionBTLEItem, advertisement=%{private}@ optionBit=%ld type=%{private}@ activityType=%{private}@ bundleID=%{private}@ teamID=%{private}@ advertisingOptions=%{public}@
Unable to determine application on this device for advertisement %{public}@/%{private}@, so ignoring this received activity.
RECEIVED advertisement, %{public}@, matched against existing corner item %{public}@ so merely update it from the flags & options
for item %{public}@ requested=%{public}@ available=%{public}@
Requesting payload for item %{public}@ payload, but it is already present, so dispatching directly.
Requesting payload for item %{public}@ advertisementPayload=%{public}@ bundleIdentifier=%{private}@
*** DELAYING payload receive by an additional %f seconds for DEBUGAdditionalPayloadReceiveTimeInterval
*** FINISHED DELAYING payload receive by an additional %f seconds for DEBUGAdditionalPayloadReceiveTimeInterval
PAYLOAD:GOT payload for item %{public}@/%{public}@, dataSize=%ld/%{private}@ error=%{public}@
Payload for item %{public}@/%{private}@ was received with error %{public}@
*** For activity %{public}@ of type NSUserActivityTypeBrowsingWeb, being reecived, since the teamID from received activity, %{private}@, and teamID associated with application targeted, %{private}@, do not match, setting the userInfoPayload to nil so we don't deliver an un-expected payload type to the target.
*** For activity %{public}@ of type NSUserActivityTypeBrowsingWeb, being received, since the teamID from received activity, %{private}@, and the target application has no teamID, setting the userInfoPayload to nil so we don't deliver an un-expected payload type to the target.
*** Mismatch for activity %{public}@  between teamID from received activity, %{private}@, and teamID associated with application targeted, %{private}@, so refusing to pass along activity to this target.  Error #%ld, UAContinuityUserActivityFailedValidation
*** Mismatch for activity %{public}@ between activityType from received activity, %{private}@, and activityType associated with application targeted, %{private}@, so refusing to pass along activity to this target, error #%ld.
Updating payload for item %{public}@ to %{private}@
Failed to fetch payload from sharingd for item %{public}@/%{private}@, with error %@
-- Calling %ld completionHandlers with payloadRequest information: error=%{public}@
PAYLOAD: clearing payload for activity %{public}@, self=%{private}@
--- item %{public}@ payload already present, so nil-ing it out.
[OUT STREAM] Sending pboard info: %@
[OUT STREAM] Starting to send types: %@
[OUT STREAM] Done sending pasteboard, waiting for end of stream
[OUT STREAM] Unexpected event code: %lu
[OUT STREAM] Got data back: %@
[OUT STREAM] Stream End Encountered, shutting down
[OUT STREAM] Stream Timer Fired, shutting down
-- item %{public}@/%{private}@ not eligible, because it has expired (on %{public}@)
requestPayload...:, %{public}@ from client application %{public}@
wasResumedOnAnotherDevice, %{public}@ to client pid=%ld
--- invalidation on connection to client %{private}@ pid=%ld
About to fetch bundleIdentifier for process with pid %d. Has appStateMonitor: %{public}@
Failed to fetch bundleIdentifier for process with pid %ld after 10 seconds
-- Initial process info, for pid %d, is %{private}@
UserActivityClient:%{public}@, teamID=%{private}@ applicationID=%{private}@ bundleID=%{private}@ accessAny=%{public}@ 
removing %{public}@ userActivityInfoItem
uuid=%{public}@
Removing item %{public}@/%{private}@ from additionalUserActivityAdvertisableItems
%{public}@ from client %ld
 - no need to call back to get updated info for activity %{public}@, because it is not dirty
 - A prepareToResume is already in progress for activity %{public}@, so refusing to schedule another one
Got error on connection back to client for %{public}@, error: %{public}@
Calling back to client to ask it to save activity %{public}@
FAILED: Calling back to client to ask it to save activity %{public}@ with error %{public}@.
Returned from back to client to ask it to save activity %{public}@, updatedInfo=%{private}@
Unable to call willSave for user activity %{public}@ for process %{private}@ because its owning process/connection seems to be gone.
error: %{public}@
Telling client that user activity %{public}@ was resumed (on another device).
CLIENT: version=%ld, %{public}@ %{private}@ any=%{public}@ sandbox=%{public}@ clientInfo=%{private}@
deleteUserActivity %{public}@
%{private}@ %{private}@
Pinned Activity Info: %{public}@/%{private}@
*** Attempt to pin activity from process %{public}@, which doesn't have the %{public}@ entitlement.
*** Attempt to get current activity information from process %{public}@, which doesn't have the %{public}@ entitlement.
doDetermineIfUserActivityIsCurrent: uuid=%{public}@
doDetermineIfUserActivityIsCurrent: Found uuid=%{public}@, in client %{public}@ as %{private}@
*** Attempt to determineIfUserActivityIsCurrent from process %{public}@, which doesn't have the %{public}@ entitlement.
registering userInfo: %{public}@/%{private}@
Application %{public}@ is trying to register an activity and we could not look up a bundle ID for them, and so cannot tell when the owning process is frontmost, so it likely will not function properly. UserActivity info: %{private}@
The provided uuid %{public}@ for the activity %{private}@ already belongs to another activity
The application with pid %ld/%{private}@ didn't provide a activityType.
The application with pid %ld/%{private}@ doesn't have a team identifier in its application-identifier, or isn't from com.apple., and is sandboxed, so unable to proceed.
Application %{public}@ is registering an activity with teamID %{private}@ bundleID=%{private}@ activityType=%{private}@
refusing to register user activity from client, and returning error %{public}@ for item %{public}@ %{private}@
-- activity with uuid %{public}@, so fetching payload for it.
-- activity with uuid %{public}@, completed fetching payload, %{private}@ %{private}@ %{private}@%{private}@, for it. error=%{public}@
 -- Received error %{public}@ trying to fetch payload for item uuid %{public}@
 -- Sending userActivityInfo back to client, %{public}@/%{private}@
 -- Removing cornerActionItem payload %{public}@/%{private}@ because a client fetched it.
 -- Sending Pinned userActivityInfo back to client: %{private}@
Activity with uuid %{public}@ fetch requested, but was neither a locally created item nor a corner action item, so returning error %{public}@
doUpdateUserActivityInfo: makeCurrent=%{public}@ newInfo = %{public}@/%{private}@
- Making %{public}@/%{private}@ into the currentItem from process %{private}@/%ld
BECOMECURRENT: updating advertisement for %{public}@/%{private}@ because the becomeCurrent item changed or a DNS item changed its URL
doUpdateUserActivityWithUUID(%{public}@/%{private}@, current=%{public}@)
Checking if the current item for %{public}@ is changed, %{public}@/%{private}@ %{public}@%{public}@
Triggering the update of the advertisable items because the current status of our application, %{public}@, has changed.
Triggering the update of the advertisable items because uuid == nil, for application %{public}@, has changed.
doMarkUserActivityAsDirty(%{public}@) for app %{public}@ forceImmediate=%{public}@ webpageURL=%{private}@ expiration=%{public}@%{public}s%{public}s
 -- dirty activities for this client: %{public}@
 -- Updating the user activity, because it's the currently advertised item, to let the server know it should (maybe) re-fetch the payload: %{public}@
Scheduling an advertising item update, for application %{public}@, because the   changed on a NSUserActivityTypeBrowsingWeb item, %{public}@/%{private}@
NETWORK:Starting browse for rendezous items for %{public}@ %{public}@.
NETWORK: browser=%@ service=%@/%@ more=%@
NETWORK: name=%{public}@ type=%{public}@ port=%ld
NETWORK: Setting up mDNS listener for connections, name=%{public}@ type=%{public}@ port=%ld
NETWORK: NSNetServicesErrorCode=%ld / %{public}@
NETWORK: netServicesDidStop, so terminating this listener, sender=%{private}@.
NETWORK: Sending initial packet to paired client %{private}@/%{public}@ from controllerUUID=%{public}@.
NETWORK: stream=%{private}@ have %ld/%{private}@ controllerUUID=%{public}@
NETWORK: stream=%{private}@ Remaining data, %ld/%{private}@
NETWORK: stream=%{private}@ error=%{public}@
NETWORK: stream=%{private}@ END ENCOUNTERED
COMMAND: %{private}@, from %{private}@/%{public}@
NETWORK: Responding to peer %{private}@/%{public}@ with our UUID, %{public}@, to establish connection from controllerUUID=%{public}@.
NETWORK: Destroying replay handler object because the peer's UUID %{public}@ matched our own, controllerUUID=%{public}@.
-- checking replayController %{public}@ against peerUUID=%{public}@
NETWORK: Destroying network replay object to %@ because we already have a different connection to that peerUUID %{public}@, controllerUUID=%{public}@
COMMANDRESPONSE: %{private}@ (controllerUUID=%{public}@ peerName=%{private}@)
controllerUUID=%{public}@
TIME: -- since timeOffsetByteInTicks == 0xff, storing maximum age time.
TIME: --- Guessing that their clock and our clock are in different epochs, ourOffset=%ld, theirs %ld, so falling back %ld seconds and setting delta to %ld. result=%{public}@/%{public}@
TIME: --- Guessing that their clock is somewhat ahead of our clock, and in the same epoch, ourOffset=%ld, theirs %ld, so setting result == no, result=%{public}@=%{public}@
TIME: --- Guessing that their clock is the same or behind of our clock, and in the same epoch, ourOffset=%ld, theirs %ld, so setting result to delta (%ld) + %ld seconds from epoch, result=%{public}@/%{public}@
TIME: result time = %{public}@ %{public}@
Calculated advertisingBytes for %ld / %{private}@, result=%{public}@
SIMULATOR: Requesting payload from paired client, uuid=%{public}@
SIMULATOR: Received payload from paired client, uuid=%{public}@, webPageURL=%{private}@ payload=%{private}@
SIMULATOR: Failed to get payload for activity %{public}@
SIMULATOR: Calling completion handler because activity %{public}@/%{private}@ was resumed, error=%{public}@
setAdvertisableItems:(%{public}@)
ADVERTISING: Scheduling an update to check the advertisement, because we've changed the list of advertised items.
--- Scheduling an update to check the advertisement, because we've cleared the list of advertisable items.
ADVERTISING: %{public}@ (old=%{public}@)%{public}@
ADVERTISING: Matched current advertisement, so not updating ( %{public}@ vs %{public}@)
ADVERTISING: Changing advertisement to nil because it's been removed, %{public}@
ADVERTISING: Advertising new item or updating user-idle time in previous advertisement, %{public}@/%{private}@
ADVERTISING: Time since last advertisement seems to have gone backwards, now=%{public}@ last=%{public}@
ADVERTISING: Setting supressAdvertisementChange = YES because the client attempted to change advertisement too quickly, %f since lastAdvertisementTime (now=%{public}@ last=%{public}@)
ADVERTISING: self.advertisementTimes=%ld %{public}@
ADVERTISING: Removing first item, %{public}@, becaues it is earlier than %{public}@
ADVERTISING: Setting supressAdvertisementChange = YES because the advertisement too quickly, %ld in last %f seconds (earliest=%{public}@ now=%{public}@)
ADVERTISING: Since supressAdvertisementChange == YES, not actually changing the active advertisement and relying on it happening again in the near future.
OLDWEB: Adding item %{private}@, date=%{public}@
ADVERTISING:%{public}@ %{public}@ type=%{private}@%{private}@ at %{public}@ opts=%{public}@
_updateAdvertisement, entering.
Removing .currentAdvertisedItem because Bluetooth is not enabled.
Not advertising because this device is in batterSaverModeEnabled == NO
UPDATEADVERTISEMENT: No item available to advertise, so removing any existing advertisement.
UPDATEADVERTISEMENT: Removing current advertisement item, %{public}@/%{private}@, because self.activityAdvertisingAllowed == NO
currentAdvertisementPayload=%{private}@
OLDWEB: Checking expiration of %{public}@ of %{private}@, expireBefore=%{public}@
OLDWEB: Removing (old) NSUserActivityTypeBrowsingWeb item, %{private}@, because it is older than %{public}@ (expired at %{public}@
-- CHECKING %{public}@ version %{public}@, %{public}@ = %ld.%c.%ld
PEERS: %ld/%{public}@, advertiseHandoff=%{public}s pastboard=%{public}s
PEERS: Our peers ability to received handoff or pasteboard advertisements has changed; scheduling an check for our advertisement. %{public}s/%{public}s
Setting pairedDevices=%ld/%{private}@
advertiserData=%{public}@ peer=%{private}@ %{public}@/%{public}@
[Sharing Advertiser] Payload request for ad: %{public}@, command: %{public}@, from: %{private}@
[PBOARD] Paste Requested
[PBOARD] Types Requested
Advertising: advertiserData=%{public}@ command=%{public}@ peer=%{private}@ %{public}@/%{public}@
-- the current advertised item, %{private}@/%{public}@, matches the advertisingPayload requested %{public}@, so using it.
-- the current advertised item, %{private}@/%{public}@, does not matche the advertisingPayload requested %{public}@.
OLDWEB: Checking against previous advertised NSUSerActivityTypeBrowsingWeb items, %{private}@
OLDWEB: the current advertised item, %{private}@/%{public}@, is a NSUserActivityTypeBrowsingWeb, and a previous advertisement %{public}@ from %{public}@ matches the requested payload.
SAMPLEPAYLOAD: Sending %ld bytes to device %{private}@
-- received data from advertiseableItem delegate callback to client, uuid=%{public}@ activity=%{public}@/%{private}@
Failure updating userActivity information from client application for activity %{public}@/%{private}@  %{public}@, using (possibly stale) payload instead.
-- Forcing new payload encoder to peer %{private}@/%{public}@ %{public}@ because debugForceNewPayloadEncoder == YES
-- Falling back to 'old' format of payload to support pre Blacktail era device, %{private}@/%{public}@ %{public}@ (size=%ld vs %ld)
-- ENCODING error from client instead of payload, %{public}@ / %{public}@
** The payload for user activity item %{public}@/%{private}@ was %ld bytes, larger than the maximum %ld, and so this user activity cannot be sent to the requesting device.
*** The payload for the user activity item %{public}@/%{private}@ is %ld bytes, larger than the recommended maximum %ld, which may cause slow transfers.
-- Responding to SFAdvertiser with data for advertisement %{public}@ activity %{public}@ type=%{private}@, data=%ld/%{private}@
Failure after updating userActivity information from client application for activity %{public}@/%{private}@ %{public}@; the activity disappeared/is no longer current and so cannot be handedOff.
RESPONDING: Unable to locate a userActivity for the payloadData %{public}@ so returning nil/nil and an error as the payload for the requesting device.
Failing request because self.activityAdvertisingAllowed == NO
User activity %{public}@ was resumed on another device, so inform (if desired) the author of the activity on this device
Failing because self.activityAdvertisingAllowed == NO, ignoring notification.
PAIRED DEVICES CHANGED: Now is %ld/%{private}@
Adopting paired devices, PAIRED DEVICES CHANGED: Now is %ld/%@
- Suspending sfActivityAdvertiser %{public}@
- resuming sfActivityAdvertiser %{public}@
SIMULATOR: Received message from child simulator on port %ld, so dispatching.
SIMULATOR: Tearing down dispatch_source_t for messages from child simulator port %ld
SIMULATOR: Creating UASimulator to talk to real useractivityd in OSX, portName=%{public}@
SIMULATOR: Received notification that parent simulator started up, so forcing a reconnect to re-establish state.
SIMULATOR: Looking up parent port in order to talk to useractivity in OSX
UASimRegisterWithParentWithVersion()=%ld parentVersion=%ld
SIMULATOR: Paired with parent simulator, commandPort=%ld pairedPort=%ld
SIMULATOR: Detected death of parent simulator port %ld.
SIMULATOR: *** Attempting to reconnect / relaunch parent simulator.
SIMULATOR: Cancelling parent simulator port death source, port %ld
SIMULATOR: Simulator application is %{public}@
SIMULATOR: Changing peer device info to %{private}@
SIMULATOR: Requesting payload for item %{public}@
SIMULATOR: Retrieved payload for item %{public}@, error=%{public}@
SIMULATOR: Sending information on item %{public}@ to paired simulator
SIMULATOR: Returning 'no advertised item' information to paired simulator.
SIMULATOR: Asking receiver to fetch the advertisement.
SIMULATOR: Telling manager to determine the bestApp again
SIMULATOR: Also telling advertisers to determine the item to advertise, because activitiesShouldCrossover=YES
SIMULATOR: Setting received item to %{public}@/%{private}@
SIMULATOR: Found item to send; %{public}@/%{private}@.  Fetching payload.
SIMULATOR: Got payload for item %{public}@/%{private}@.  Returning this info:%{private}@
SIMULATOR: Waiting for payload fetch to complete for item %{public}@
SIMULATOR: Finished wait for payload fetch to complete for item %{public}@
SIMULATOR: Failed to find activity matching uuid %{public}@, items=%{private}@
SIMULATOR: Found item ; %{public}@/%{private}@.  Calling its wasContinued.
*** Attempt to access adminstrative interface fror process pid=%{public}@, which doesn't have the %{public}@ entitlement.
*** SENDING PING %{private}@ to clients.
- doNOP, str=%{private}@, so echoing that back to client.
### DEBUGGING: doSetDebugOption:%{public}@ => %{public}@
### DEBUGGING: Changing EnableSharingFramework to %{public}@
### Removing SFActivityAdvertiser from UASharingAdvertiser
### Adding SFActivityAdvertiser to UASharingAdvertiser.
### Removing SFActivityScanner from UASharingReceiver.
### Adding SFActivityScanner to UASharingReceiver.
str=%{private}@
-- Matching current best item %{public}@/%{private}@
About to call prepareToResumeActivityWithUUID for activityUUID %{public}@
Finished call prepareToResumeActivityWithUUID for activityUUID %{public}@, error=%{public}@
About to call didResumeUserActivityWithUUID for activityUUID %{public}@
Finished call didResumeUserActivityWithUUID for activityUUID %{public}@
PING: PING was continude.
Setting up network connection to other machine %{private}@ %ld
bplist00
$%&'%,
\CFBundleName_
CFBundleAllowMixedLocalizationsWDTXcodeYDTSDKNameZDTSDKBuild_
CFBundleDevelopmentRegion_
CFBundleVersion_
BuildMachineOSBuild^DTPlatformName_
CFBundlePackageType_
CFBundleShortVersionString_
CFBundleSupportedPlatforms_
CFBundleInfoDictionaryVersion_
CFBundleExecutableZDTCompiler_
MinimumOSVersion_
CFBundleIdentifier^UIDeviceFamily_
DTPlatformVersion\DTXcodeBuild_
CFBundleDisplayName_
DTPlatformBuild]useractivityd
T0800_
iphonesimulator10.2PWEnglishQ1V15A284_
iphonesimulatorTAPPL
iPhoneSimulatorS6.0_
"com.apple.compilers.llvm.clang.1_0T10.2_
$com.apple.coreservices.useractivityd
()*+
V8R174l
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.coreservices.useractivityd</string>
<key>com.apple.PowerManagement.control</key>
<true/>
<key>com.apple.backboardd.lastUserEventTime</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.iokit.powerdxpc</key>
<true/>
<key>com.apple.private.associated-domains</key>
<true/>
<key>com.apple.private.librarian.container-proxy</key>
<true/>
<key>com.apple.system.powermanagement.useractivity</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.SharedWebCredentials</string>
</array>
<key>seatbelt-profiles</key>
<array>
<string>lsuseractivityd</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
