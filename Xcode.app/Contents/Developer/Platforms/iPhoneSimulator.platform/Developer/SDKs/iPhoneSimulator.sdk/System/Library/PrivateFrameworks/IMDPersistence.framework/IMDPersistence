init
serviceForMessages
retain
release
dealloc
suggestionsFromMessage:options:completionHandler:
suggestionsService:needsContextForConversationIdentifier:numberOfMessagesNeeded:
sgService
setSgService:
_sgService
stringWithFormat:
copy
UTF8String
errorFromResult:query:
countByEnumeratingWithState:objects:count:
runSimpleQuery:resultBlock:
createTablesSQL
runArrayOfQueries:resultBlock:
createIndexesSQL
createTriggersSQL
string
length
objectForKeyedSubscript:
appendString:
appendFormat:
path
tableNames
cloneTableContents:withOperation:resultBlock:
localizedDescription
initWithPath:tableNames:createTablesSQL:createIndexesSQL:createTriggersSQL:downgradesToVersion:
createTables:
createIndexes:
createTriggers:
isOpen
beginTransaction:
commitTransaction:
revertTransaction:
writeDatabaseVersion:resultBlock:
importDataFromWhitetailDatabaseWithSqlOperation:resultBlock:
open:
close:
database
setPath:
downgradesToVersion
setTableNames:
setCreateIndexesSQL:
setCreateTablesSQL:
setCreateTriggersSQL:
_inTransaction
_database
_path
_downgradesToVersion
_tableNames
_createIndexesSQL
_createTablesSQL
_createTriggersSQL
_readIntegerFromQuery:resultBlock:
readDatabaseVersion:
readRowCountForTable:resultBlock:
autorelease
alloc
initWithCString:encoding:
initWithFormat:
stringByAppendingFormat:
logString:toFolder:toFileNamed:
initWithString:
componentsSeparatedByString:
count
enumerateObjectsUsingBlock:
stringByExpandingTildeInPath
defaultManager
dictionaryWithObjects:forKeys:count:
setAttributes:ofItemAtPath:error:
description
initWithDouble:
initWithUnsignedLongLong:
errorWithDomain:code:userInfo:
logAtLevel:type:category:format:
timeIntervalSinceReferenceDate
arrayWithObjects:count:
stringWithUTF8String:
setObject:forKey:
array
addObject:
objectForKey:
containsObject:
stringByReplacingOccurrencesOfString:withString:
rangeOfString:
dictionary
isEqualToString:
currentHandler
handleFailureInFunction:file:lineNumber:description:
initWithInteger:
allObjects
compare:
sortedArrayUsingComparator:
integerValue
fileExistsAtPath:isDirectory:
dictionaryWithObject:forKey:
initWithDomain:code:userInfo:
unsignedLongLongValue
objectAtIndex:
initWithSourceDatabasePath:destinationDatabasePath:
copyDatabase:
deleteFailedArchiveAtPath:error:
destinationPath
sourcePath
_destinationPath
_sourcePath
stringWithCString:encoding:
setDateFormat:
pathExtension
stringByDeletingPathExtension
date
stringFromDate:
lastPathComponent
stringByAppendingPathComponent:
stringByDeletingLastPathComponent
initWithSourceDatabasePath:destinationDatabasePath:newerThanDays:
initWithSourceDatabasePath:destinationDatabasePath:messageCount:
lowercaseString
class
initWithTableName:
databaseQuery:
createQueryString
tableName
columns
setColumns:
where
setWhere:
limit
setLimit:
_tableName
_columns
_where
_limit
selectQueryForTable:
selectQueryForTable:withColumns:
selectQueryForTable:withColumns:where:
isIncoming
transferState
isAuxVideo
filename
_persistentPathForTransfer:
makeDirectoriesInPath:mode:
localPath
fileExistsAtPath:
copyItemAtPath:toPath:error:
removeItemAtPath:error:
moveItemAtPath:toPath:error:
isSticker
guid
stickerUserInfo
guidByStrippingAuxPrefix:
mimeType
type
sharedInstance
saveAttachmentForTransfer:
deleteAttachmentForTransfer:
cleanseOrphanedFileTransfers
hash
defaultHFSFileManager
pathExtensionForUTIType:
pathExtensionForMIMEType:
stringByAppendingPathExtension:
stringByResolvingAndStandardizingPath
attributesAtIndex:longestEffectiveRange:inRange:
characterAtIndex:
hasPrefix:
_appearsToBePhoneNumber
uppercaseString
stringGUID
dateWithTimeIntervalSince1970:
generatedRoomNameForGroupChat
setWithArray:
isEqualToSet:
appendAttributedString:
UTITypeOfPathExtension:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
writeToFile:atomically:
initWithObjectsAndKeys:
initWithString:attributes:
__imFirstObject
characterSetWithCharactersInString:
stringByRemovingCharactersFromSet:
initWithName:bundleIdentifier:
isEqualToIgnoringCase:
_stripFZIDPrefix
_appearsToBeEmail
initWithDisplayName:handles:handleIdentifier:
identifier
setContactIdentifier:
predicateForContactMatchingEmailAddress:
descriptorForRequiredKeysForStyle:
unifiedContactsMatchingPredicate:keysToFetch:error:
firstObject
phoneNumberWithStringValue:
predicateForContactMatchingPhoneNumber:
stringFromContact:style:
uniqueIdentifier
domainIdentifier
indexSearchableItems:completionHandler:
isUnderFirstDataProtectionLock
dateWithTimeIntervalSinceReferenceDate:
initWithCapacity:
recentEventForAddress:displayName:kind:date:weight:metadata:options:
initWithItemContentType:
setTextContent:
objectAtIndexedSubscript:
fileURLWithPath:isDirectory:
setThumbnailURL:
setTitle:
setContentCreationDate:
setAccountIdentifier:
setAccountHandles:
arrayByAddingObject:
setInstantMessageAddresses:
setAuthorAddresses:
isEqual:
removeObjectAtIndex:
insertObject:atIndex:
setAuthors:
setRecipientNames:
setRecipientAddresses:
setPrimaryRecipients:
setAlternateNames:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
distantFuture
setExpirationDate:
defaultInstance
recordContactEvents:recentsDomain:sendingAddress:source:userInitiated:
name
reason
userInfo
deleteSearchableItemsWithIdentifiers:completionHandler:
deleteSearchableItemsWithDomainIdentifiers:completionHandler:
startTimingForKey:
stopTimingForKey:
setEvictsObjectsWithDiscardedContent:
setCountLimit:
removeAllObjects
boolValue
numberWithBool:
performanceClass
dataWithContentsOfURL:options:error:
contactsWithData:error:
numberWithDouble:
postalAddresses
value
singleLineStringFromPostalAddress:addCountryName:
urlAddresses
label
URLWithString:
query
dictionaryWithObjectsAndKeys:
setWatchesDataProtectionLockState:
pathWithComponents:
hasSuffix:
fileSystemRepresentation
enumeratorAtPath:
nextObject
level
contentsOfDirectoryAtPath:error:
stringByAppendingString:
stringByAbbreviatingWithTildeInPath
initWithPath:
createDowngradeHelper
arrayOfTableNames
arrayOfCreateTablesSQL
arrayOfCreateIndexesSQL
arrayOfCreateTriggersSQL
isInternalInstall
fileURLWithPath:
linkItemAtURL:toURL:error:
copyItemAtURL:toURL:error:
attributesOfItemAtPath:error:
fileSize
initWithArray:
numberWithLongLong:
minusSet:
setDay:
currentCalendar
dateByAddingComponents:toDate:options:
countForObject:
numberWithInt:
initWithSender:time:guid:type:
setUnformattedID:
setCountryCode:
setOtherHandle:
setOtherUnformattedID:
setOtherCountryCode:
setService:
setAccount:
setAccountID:
_setMessageID:
setActionType:
setChangeType:
setStatus:
setDirection:
setOriginalMessageGUID:
setBalloonBundleID:
dictionaryWithMessageSummaryInfoData:
longLongValue
unsignedIntValue
initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:errorType:associatedMessageGUID:associatedMessageType:associatedMessageRange:messageSummaryInfo:
initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:errorType:
hasDataDetectorResults
setPlainBody:
flags
sender
isFromMe
valueForKey:
lastObject
arrayWithObjects:
initWithBool:
initWithUnsignedLong:
initWithUTF8String:
initWithTimeIntervalSinceReferenceDate:
mutableCopy
attribute:atIndex:effectiveRange:
deleteCharactersInRange:
enumerateAttribute:inRange:options:usingBlock:
initWithObjects:
isAbsolutePath
removeItemAtURL:error:
trimmedString
performMessageSelectionWithOperation:
newerThanDays
_newerThanDays
messageCount
_messageCount
trimDatabaseWithOperation:
stringWithString:
arrayWithCapacity:
IMDSuggestions
Exception caught trying to create the SGSuggestionsService: %@
Exception caught trying to get suggestions for message: %@
sgService
T@"<NSObject><SGSuggestionsServiceMessagesProtocol>",&,V_sgService
SGSuggestionsService
CoreSuggestions
v8@?0
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDSuggestions.m
void _IMDSuggestionsApiInit()
_IMDSuggestionsApiInit
Unexpected nil '%@' in %s at %s:%d. %@
IMSGSuggestionsService
ASSERTION FAILED: %@
BEGIN EXCLUSIVE;
Database
IMFoundation
"Database": Skipping commit of a non-existent transaction in Downgraded database
COMMIT;
"Database": Skipping revert of a non-existant transaction in Downgraded database.
REVERT;
UPDATE _SqliteDatabaseProperties SET value = %ld WHERE key = '_ClientVersion';
"Database": Cloning and downgrading table '%@' into Downgraded Database
PRAGMA dest.table_info(%@);
name
, %@
INSERT INTO dest.%@ SELECT %@ FROM main.%@
"Database": Downgrade: turning off foreign keys
PRAGMA foreign_keys = OFF;
"Database": Downgrade: attaching new (empty so far) downgraded database to the real database
ATTACH '%@' AS 'dest';
"Database": Downgrade: Beginning transaction
"Database": Downgrade: Copying table: %@
v20@?0B8@"NSError"12
"Database": Downgrade: Detaching database
DETACH DATABASE 'dest';
Warning
"Database": Downgraded database SQL query '%@' got error: '%@'
"Database": Downgraded database SQL query ran ok: '%@'
"Database": Opening Downgraded database at: '%@'...
Open database
PRAGMA page_size = 4096;
PRAGMA auto_vacuum = 2;
PRAGMA journal_mode = wal;
"Database": Closed Downgraded database at: '%@'...
path
T@"NSString",&,N,V_path
tableNames
T@"NSArray",&,N,V_tableNames
createIndexesSQL
T@"NSArray",&,N,V_createIndexesSQL
createTablesSQL
T@"NSArray",&,N,V_createTablesSQL
createTriggersSQL
T@"NSArray",&,N,V_createTriggersSQL
isOpen
TB,R,N
database
T^{sqlite3=},R,N,V_database
downgradesToVersion
Tq,R,N,V_downgradesToVersion
SELECT value FROM _SqliteDatabaseProperties WHERE key = '_ClientVersion';
SELECT count(*) FROM %@;
(%d)
%@-> %@
SMSMigrator
IMDPersistenceMerge.log
guid,style,state,account_id,properties,chat_identifier,service_name,room_name,account_login,is_archived,last_addressed_handle,display_name,group_id
id,country,service,uncanonicalized_id
guid,text,replace,service_center,handle_id,subject,country,attributedBody,version,type,service,account,account_guid,error,date,date_read,date_delivered,is_delivered,is_finished,is_emote,is_from_me,is_empty,is_delayed,is_auto_reply,is_prepared,is_read,is_system_message,is_sent,has_dd_results,is_service_message,is_forward,was_downgraded,is_archive,cache_has_attachments,cache_roomnames,was_data_detected,was_deduplicated,is_audio_message,is_played,date_played,item_type,other_handle,group_title,group_action_type,share_status,share_direction,is_expirable,expire_state,message_action_type
guid,created_date,start_date,filename,uti,mime_type,transfer_state,is_outgoing,user_info,transfer_name,total_bytes
chat_id,handle_id
chat_id,message_id
message_id,attachment_id
ProtectionMerge: unprotected database: %s, found: %s, error: %d
ProtectionMerge: failed to attach unprotected DB, bailing merge
ProtectionMerge: unprotected DB is empty, skipping merge
ProtectionMerge: begin merge
ProtectionMerge: end merge, success: %s
%@-shm
%@-wal
ProtectionMerge: unprotected database: %s, deleted: %s, error: %d
%F-%H-%M-%S
sms-temp-%s.db
ProtectionMerge: unprotected database: %s, renamed to %s: %s, error: %d
INSERT INTO CHAT ( ROWID, account_id, account_login, chat_identifier, display_name, group_id, guid, is_archived, is_filtered, last_addressed_handle, properties, room_name, service_name, state, style, successful_query) VALUES ( ?, NULL, NULL, NULL, NULL, NULL, "FAKE", 0, 0, NULL, NULL, NULL, NULL, 0, 0, 0);
DELETE FROM CHAT WHERE ROWID = ?;
ProtectionMerge: updated chat ROWID to %lld
ProtectionMerge: No temporary database exists, bailing merge!
ATTACH DATABASE '%@' AS prime
ProtectionMerge: query error: %d
v32@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I}16^{CSDBSqliteStatement=^{CSDBSqliteConnection}^{sqlite3_stmt}i}24
ProtectionMerge: result: %d, query: %s
SELECT COUNT(*) FROM prime.chat
ProtectionMerge: chat count: %lld, hasChats: %d, error: %d
DETACH DATABASE prime
UPDATE handle SET 
(SELECT p.%@ FROM prime.handle p WHERE p.id=handle.id AND p.service=handle.service)
v32@?0@8Q16^B24
 WHERE handle.ROWID IN 
(SELECT h.ROWID FROM handle h, prime.handle ph WHERE h.id=ph.id AND h.service=ph.service)
INSERT INTO handle (%@) SELECT 
pt.%@
 FROM prime.handle pt WHERE pt.ROWID NOT IN (SELECT p.ROWID FROM handle h, prime.handle p WHERE h.service=p.service AND h.id=p.id)
UPDATE message SET 
(SELECT p.%@ FROM prime.message p WHERE p.guid=message.guid)
 WHERE message.ROWID IN 
(SELECT h.ROWID FROM message h, prime.message ph WHERE h.guid=ph.guid)
INSERT INTO message (%@) SELECT 
 FROM prime.message pt WHERE pt.item_type != 2 AND pt.ROWID NOT IN (SELECT p.ROWID FROM message h, prime.message p WHERE h.guid=p.guid)
UPDATE attachment SET 
(SELECT p.%@ FROM prime.attachment p WHERE p.guid=attachment.guid)
 WHERE attachment.ROWID IN 
(SELECT h.ROWID FROM attachment h, prime.attachment ph WHERE h.guid=ph.guid)
INSERT INTO attachment (%@) SELECT 
 FROM prime.attachment pt WHERE pt.ROWID NOT IN (SELECT p.ROWID FROM attachment h, prime.attachment p WHERE h.guid=p.guid)
DROP TABLE imessage_group_chat
DROP TABLE other_chat
DROP TABLE imessage_group_chat_message_join
DROP TABLE other_chat_message_join
DROP TABLE other_chat_handle_join
CREATE TABLE IF NOT EXISTS imessage_group_chat AS SELECT * FROM prime.chat a WHERE a.service_name='iMessage' AND a.style='43' AND a.group_id IN (SELECT group_id FROM chat)
CREATE TABLE IF NOT EXISTS other_chat AS SELECT * FROM prime.chat EXCEPT SELECT * FROM imessage_group_chat
CREATE TABLE IF NOT EXISTS imessage_group_chat_message_join AS SELECT * FROM prime.chat_message_join a WHERE a.chat_id IN (SELECT ROWID FROM imessage_group_chat)
CREATE TABLE IF NOT EXISTS other_chat_message_join AS SELECT * FROM prime.chat_message_join a WHERE a.chat_id IN (SELECT ROWID FROM other_chat)
CREATE TABLE IF NOT EXISTS other_chat_handle_join AS SELECT * FROM prime.chat_handle_join a WHERE a.chat_id IN (SELECT ROWID FROM other_chat)
CREATE TABLE IF NOT EXISTS chat_prime_map (chat_id_prime INTEGER, chat_id_real INTEGER); DELETE FROM chat_prime_map
CREATE TABLE IF NOT EXISTS chat_partcipants_prime (cid integer, id text, service text); DELETE FROM chat_partcipants_prime
INSERT INTO chat_partcipants_prime SELECT d.chat_id,c.id,c.service FROM prime.handle c, other_chat_handle_join d WHERE c.ROWID=d.handle_id
CREATE TABLE IF NOT EXISTS chat_participants (cid integer, id text, service text); DELETE FROM chat_participants
INSERT INTO chat_participants SELECT d.chat_id,c.id,c.service FROM handle c, chat_handle_join d WHERE c.ROWID=d.handle_id
INSERT INTO chat_prime_map (chat_id_prime, chat_id_real) SELECT DISTINCT b.cid,a.cid FROM chat_participants a, chat_partcipants_prime b WHERE NOT EXISTS (SELECT id,service FROM chat_participants WHERE cid=a.cid EXCEPT SELECT id,service FROM chat_partcipants_prime WHERE cid=b.cid) AND NOT EXISTS (SELECT id,service FROM chat_partcipants_prime WHERE cid=b.cid EXCEPT SELECT id,service FROM chat_participants WHERE cid=a.cid)
UPDATE other_chat SET guid = (SELECT a.guid FROM chat a, chat_prime_map b, other_chat c WHERE a.ROWID=b.chat_id_real AND b.chat_id_prime=c.ROWID and c.ROWID=other_chat.ROWID), chat_identifier = (SELECT a.chat_identifier FROM chat a, chat_prime_map b, other_chat c WHERE a.ROWID=b.chat_id_real AND b.chat_id_prime=c.ROWID and c.ROWID=other_chat.ROWID), room_name = (SELECT a.room_name FROM chat a, chat_prime_map b, other_chat c WHERE a.ROWID=b.chat_id_real AND b.chat_id_prime=c.ROWID and c.ROWID=other_chat.ROWID), properties = (SELECT a.properties FROM chat a, chat_prime_map b, other_chat c WHERE a.ROWID=b.chat_id_real AND b.chat_id_prime=c.ROWID and c.ROWID=other_chat.ROWID) WHERE ROWID IN (SELECT d.chat_id_prime FROM chat_prime_map d, chat e, other_chat f WHERE d.chat_id_real=e.rowid and d.chat_id_prime=f.rowid and e.guid!=f.guid and e.service_name=f.service_name);
DROP TABLE chat_participants
DROP TABLE chat_partcipants_prime
DROP TABLE chat_prime_map
INSERT INTO chat (%@) SELECT 
 FROM other_chat pt WHERE pt.ROWID NOT IN (SELECT p.ROWID FROM chat h, other_chat p WHERE h.guid=p.guid)
UPDATE message SET handle_id = (SELECT handle.ROWID FROM handle WHERE handle.id = (SELECT a.id FROM prime.handle a WHERE a.ROWID = message.handle_id) AND handle.service = (SELECT b.service from prime.handle b where b.ROWID = message.handle_id)) WHERE message.ROWID IN (SELECT c.ROWID FROM message c, prime.message d WHERE c.guid = d.guid)
CREATE TABLE IF NOT EXISTS imessage_group_chat_message_join_copy (chat_id INTEGER, message_id INTEGER); DELETE FROM imessage_group_chat_message_join_copy
INSERT INTO imessage_group_chat_message_join_copy (chat_id, message_id) 
SELECT a.ROWID,b.ROWID FROM chat a, message b, imessage_group_chat_message_join c 
WHERE (a.group_id IN (SELECT group_id FROM imessage_group_chat WHERE ROWID = c.chat_id)) AND (b.guid IN (SELECT guid FROM prime.message WHERE ROWID = c.message_id))
INSERT INTO chat_message_join (chat_id,message_id) 
SELECT chat_id,message_id FROM imessage_group_chat_message_join_copy 
EXCEPT SELECT chat_id,message_id FROM chat_message_join
DROP TABLE imessage_group_chat_message_join_copy
CREATE TABLE IF NOT EXISTS chat_message_join_copy (chat_id INTEGER, message_id INTEGER); DELETE FROM chat_message_join_copy
INSERT INTO chat_message_join_copy (chat_id, message_id) 
SELECT a.ROWID,b.ROWID FROM chat a, message b, other_chat_message_join c 
WHERE (a.guid IN (SELECT guid FROM other_chat WHERE ROWID = c.chat_id)) AND (b.guid IN (SELECT guid FROM prime.message WHERE ROWID = c.message_id))
SELECT chat_id,message_id FROM chat_message_join_copy 
DROP TABLE chat_message_join_copy
CREATE TABLE IF NOT EXISTS chat_handle_join_copy (chat_id INTEGER, handle_id INTEGER); DELETE FROM chat_handle_join_copy
INSERT INTO chat_handle_join_copy (chat_id, handle_id) 
SELECT a.ROWID,b.ROWID FROM chat a, handle b, other_chat_handle_join c 
WHERE (a.guid IN (SELECT guid FROM other_chat WHERE ROWID = c.chat_id)) AND 
(b.id IN (SELECT id FROM prime.handle WHERE ROWID = c.handle_id) AND b.service IN (SELECT service FROM prime.handle WHERE ROWID = c.handle_id))
INSERT INTO chat_handle_join (chat_id,handle_id) 
SELECT chat_id,handle_id FROM chat_handle_join_copy 
EXCEPT SELECT chat_id,handle_id FROM chat_handle_join
DROP TABLE chat_handle_join_copy
CREATE TABLE IF NOT EXISTS message_attachment_join_copy (message_id INTEGER, attachment_id INTEGER); DELETE FROM message_attachment_join_copy
INSERT INTO message_attachment_join_copy (message_id, attachment_id) 
SELECT a.ROWID,b.ROWID FROM message a, attachment b, prime.message_attachment_join c 
WHERE (a.guid IN (SELECT guid FROM prime.message WHERE ROWID = c.message_id)) and (b.guid IN (SELECT guid FROM prime.attachment WHERE ROWID = c.attachment_id))
INSERT INTO message_attachment_join (message_id,attachment_id) 
SELECT message_id,attachment_id FROM message_attachment_join_copy 
EXCEPT SELECT message_id,attachment_id FROM message_attachment_join
DROP TABLE message_attachment_join_copy
SELECT filename FROM prime.attachment
ProtectionMerge: protecting file at: %s, success: %s, error: %s
statement == nil || statement->query == nil || statement->sql_statement == nil
void IMDSqlStatementBindTextFromCFString(IMDSqlStatement *, CFStringRef)
"Database": ASSERTION FAILED: Condition is unexpectedly true: %s in "%s" at line %d [%@]
string
"Database": ASSERTION FAILED: %s is unexpectedly nil in "%s" at line %d [%@]
strings
void IMDSqlStatementBindTextFromArrayOfCFStrings(IMDSqlStatement *, CFArrayRef)
void IMDSqlStatementBindInt64(IMDSqlStatement *, int64_t)
statement == nil || statement->sql_statement == nil
void IMDSqlStatementBindInt(IMDSqlStatement *, int32_t)
void IMDSqlStatementBindDouble(IMDSqlStatement *, double)
column.statement
int IMDIntFromSqlColumn(IMDSqlColumn)
statement
double IMDDoubleFromSqlColumn(IMDSqlColumn)
int64_t IMDInt64FromSqlColumn(IMDSqlColumn)
CFStringRef IMDStringFromSqlColumn(IMDSqlColumn)
CFDataRef IMDBlobFromSqlColumn(IMDSqlColumn)
block
void IMDSqlStatementIterateRow(IMDSqlStatement *, IMDSqlOperationColumnIterator)
sql_statement
IMDSqlColumn IMDSqlStatementColumnByIndex(IMDSqlStatement *, int)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDSqlStatement.m
IMDSqlStatementColumnByIndex
Unexpected false '%@' in %s at %s:%d. %@
index >= 0 && index < count
IMDSqlColumn IMDSqlStatementColumnByName(IMDSqlStatement *, const char *)
dictionary
void IMDSqlColumnSetColumnValueInXPCDictionary(xpc_object_t, IMDSqlColumn)
xpc_object_t IMDSqlStatementGetXPCRow(IMDSqlStatement *)
CFDictionaryRef IMDSqlStatementGetRow(IMDSqlStatement *)
operation
BOOL _IMDSqlOperationRunQuery(IMDSqlOperation *, CFStringRef, IMDBlock, IMDBlock, IMFileLocation_t *)
query
"Database": SQL ERROR: %@
operationBlock
BOOL IMDRunSqlOperation(IMDSqlOperationBlock)
BOOL _IMDSqlOperationRunQueryWithString(CFStringRef, NSError **, IMDSqlOperationBlock, IMFileLocation_t *)
"Database": "Database": Unable to perform database migration to %d - NO MIGRATOR FOUND
Unable to perform database migration to %d - NO MIGRATOR FOUND
!success && op.error == nil
BOOL _IMDDatabasePerformOneMigration(IMDDatabaseVersioner *, CSDBSqliteDatabase *, CSDBSqliteConnection *, int, int *, NSError **)
can't have migration %d to %d fail without error!! (Begin Transaction)
can't have migration %d to %d fail without error!! (Drop Triggers)
can't have migration %d to %d fail without error!! (Drop unknown indexes)
can't have migration  %d to %d fail without error!! (Actual migration))
Migration
Migration from %d to %d failed with error: %@
Migrated from %d to %d ok in %f seconds
Unable to perform database migration from %d to %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDDatabaseMigration.m
BOOL IMDCreateTriggersAndIndexes(IMDSqlOperation *, BOOL)
IMDCreateTriggersAndIndexes
success || operation->error != nil
can't have migration fail without error!!
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDUtils.h
BOOL IMDSetOutError(NSError **, NSError *)
IMDSetOutError
Unexpected not nil '%@' in %s at %s:%d. %@
*outError
outError is already pointing at an error, this could be a leak
v16@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8
IMDSMSRecordStoreCopyAllChats
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query FROM chat ORDER BY chat.ROWID ASC;
array_result
B24@?0Q8@"NSObject<OS_xpc_object>"16
v16@?0@"NSObject<OS_xpc_object>"8
IMDSMSRecordStoreCopyAllNamedChats
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query FROM chat WHERE display_name IS NOT NULL AND display_name != "" ORDER BY chat.ROWID ASC;
IMDSMSRecordStoreCopyAllActiveChats
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query FROM chat WHERE IS_ARCHIVED = 0 ORDER BY chat.ROWID ASC;
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query FROM chat WHERE guid = ? ORDER BY chat.ROWID ASC;
Did not get results for chat guid %@
No handle provided to IMDChatRecordCopyChatsWithRoomnameOnService
No service provided to IMDChatRecordCopyChatsWithRoomnameOnService
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query FROM chat WHERE    chat_identifier = ? AND    service_name = ? ORDER BY chat.ROWID ASC;
No roomname provided to IMDChatRecordCopyChatsWithRoomnameOnService
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived, last_addressed_handle, display_name, group_id, is_filtered, successful_query FROM chat WHERE    room_name = ? AND    service_name = ? ORDER BY chat.ROWID ASC;
guid == NULL || guid.length == 0
void IMDChatRecordDeleteChatForGUID_Fast(NSString *)
DELETE FROM chat WHERE guid = ?;
v16@?0^{IMDSqlOperation=^v^v^{__CFString}^v{IMDSqlStatement=^vi^{__CFString}^{sqlite3}iii{IMPerfMeasurement_t={IMFileLocation_t=****i}QQ^{__CFString}ddd}}^{__CFError}}8
Query for GUID yields %d results, deleting all
Unable to associate message with chat, the chat is NULL (chat guid: %@)
Unable to associate message with chat, the message is NULL (message guid: %@)
IMDCoreSpotlight
Not indexing message
IMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]
IMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]
Unable to disassociate message from chat, the chat is NULL.
Unable to disassociate message from chat, the message is NULL.
Unable to update filter flag, the chat record is NULL.
chat
guid
style
state
account_id
properties
chat_identifier
service_name
room_name
account_login
is_archived
last_addressed_handle
display_name
group_id
is_filtered
successful_query
IMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages
SELECT DISTINCT  c.guid FROM   chat c INNER JOIN chat_message_join cm ON   c.ROWID = cm.chat_id INNER JOIN message m ON   m.ROWID = cm.message_id WHERE   m.is_from_me = 0   AND m.is_played = 0   AND m.is_audio_message = 1   AND c.style = 45 
v24@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I}16
op == nil || op->connection == nil || op->database == nil
void IMDSqlOperationWasInitialized(IMDSqlOperation *)
chat_message_join
chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE, message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE, PRIMARY KEY (chat_id, message_id)
chat_handle_join
chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE, handle_id INTEGER REFERENCES handle (ROWID) ON DELETE CASCADE, UNIQUE(chat_id, handle_id)
message_attachment_join
message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE, attachment_id INTEGER REFERENCES attachment (ROWID) ON DELETE CASCADE, UNIQUE(message_id, attachment_id)
handle
ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, id TEXT NOT NULL, country TEXT, service TEXT NOT NULL, uncanonicalized_id TEXT, UNIQUE (id, service) 
deleted_messages
ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, guid TEXT NOT NULL
CREATE TABLE IF NOT EXISTS %@ (%@);
select name from sqlite_master where type = 'table'
v40@?0{IMDSqlColumn=^{IMDSqlStatement}*ii}8^B32
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDTables.m
int64_t IMDRowCountForTable(NSString *, NSError **)
IMDRowCountForTable
tableName
select count(*) from %@
void IMDCreateLegacyTables(IMDSqlOperation *)
IMDCreateLegacyTables
BOOL IMDCreateTablesWithOperation(IMDSqlOperation *, BOOL)
IMDCreateTablesWithOperation
"Database": "Database": Failed to create table %@ with error %@
Failed to create table %@ with error %@
Created table (if needed) ok: %@
BOOL IMDDropTableWithOperation(IMDSqlOperation *, NSString *, BOOL)
IMDDropTableWithOperation
DROP TABLE IF EXISTS %@;
"Database": "Database": Failed to drop table %@ with error %@
Failed to drop table %@ with error %@
Dropped table (if needed) ok: %@
sqlite_stat1
IF NOT EXISTS
SELECT name, sql FROM sqlite_master WHERE type = 'table';
Expected: %@
  Actual: %@
BOOL IMDConfirmTablesCreatedAsExpected(NSError **)
<Unknown Function>
<Unknown File>
index check failed
void IMDSqlOperationIterateRow(IMDSqlOperation *, IMDSqlOperationColumnIterator)
message
text
replace
service_center
handle_id
subject
country
attributedBody
version
type
service
account
account_guid
error
date
date_read
date_delivered
is_delivered
is_finished
is_emote
is_from_me
is_empty
is_delayed
is_auto_reply
is_prepared
is_read
is_system_message
is_sent
has_dd_results
is_service_message
is_forward
was_downgraded
is_archive
cache_has_attachments
cache_roomnames
was_data_detected
was_deduplicated
is_audio_message
is_played
date_played
item_type
other_handle
group_title
group_action_type
share_status
share_direction
is_expirable
expire_state
message_action_type
message_source
associated_message_guid
associated_message_type
balloon_bundle_id
payload_data
expressive_send_style_id
associated_message_range_location
associated_message_range_length
time_expressive_send_played
message_summary_info
attachment
created_date
start_date
filename
mime_type
transfer_state
is_outgoing
user_info
transfer_name
total_bytes
is_sticker
sticker_user_info
attribution_info
hide_attachment
void _IMDPerformBlockWithDelay(NSTimeInterval, dispatch_block_t, IMFileLocation_t *)
recordStore
void _IMDPerformBlock(dispatch_block_t, IMFileLocation_t *)
void _IMDPerformLockedMessageStoreBlock(CSDBLockedRecordStore, IMFileLocation_t *)
void _IMDPerformLockedMessageStoreBlockWithoutInitialize(CSDBLockedRecordStore, IMFileLocation_t *)
void _IMDPerformLockedDatabaseBlock(CSDBLockedDatabase, IMFileLocation_t *)
threadedRecordStore
recordStoreRef
void _IMDPerformLockedStatementBlockWithQuery(CFStringRef, CSDBLockedStatement, IMFileLocation_t *)
void _IMDPerformLockedConnectionBlock(CSDBLockedConnection, IMFileLocation_t *)
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) 
AND m.ROWID >= ( SELECT * FROM (SELECT mm.rowid FROM message mm WHERE mm.GUID = ? UNION SELECT 0 ) ORDER BY ROWID DESC LIMIT 1   ) 
 AND m.item_type == 0 AND m.associated_message_type == 0 
ORDER BY cm.chat_id, cm.message_id DESC 
LIMIT ?
"Database": No handles or services specified. Or handleCount != serviceCount. No rows will be returned.
q24@?0@8@16
SELECT FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid 
DELETE FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid 
com.apple.IMDPersistenceIPCQueue
IMDPersistenceConnection
IMDPersistenceAgent disconnected
Forcing a new xpc connection
com.apple.imdpersistence.IMDPersistenceAgent
IMDPersistenceDispatchQueue
void IMDSqlOperationInvalidateCaches(IMDSqlOperation *)
operation == nil || operation->connection == nil
void IMDSqlOperationUpdateLastDeleteSequenceNumber(IMDSqlOperation *)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDSqlOperationCoreSDB.m
IMDSqlOperationUpdateLastDeleteSequenceNumber
IMDSharedThreadedRecordStore()
CSDBRecordStoreRefFromThreadedRecordStoreRef(IMDSharedThreadedRecordStore())
operation->connection
connection
void _IMDUpdateSequenceNumberWithConnection(CSDBSqliteConnection *)
__CSDBRecordSequenceNumber
IMDSqlOperation IMDSqlOperationInitWithCSDBConnection(CSDBSqliteConnection *, CSDBSqliteDatabase *)
IMDSqlOperationInitWithCSDBConnection
IMDSqlOperation IMDSqlOperationInitWithCSDBDatabase(CSDBSqliteDatabase *)
IMDSqlOperationInitWithCSDBDatabase
sqlConnection
CSDBSqliteDatabaseConnectionForWriting returned a nil CSDBSqliteConnection
IMDSqlOperation IMDSqlOperationInitWithSharedCSDBDatabase()
IMDSharedSqliteDatabase() should not be nil
IMDSqlOperation IMDSqlOperationInitWithThreadedMessageStore(CSDBThreadedRecordStoreRef)
IMDSqlOperationInitWithThreadedMessageStore
messageStore
IMDSqlOperation IMDSqlOperationInitAndCreateIfNeededWithPath(NSString *)
IMDSqlOperationInitAndCreateIfNeededWithPath
IMDSqlOperation IMDSqlOperationInitWithPath(NSString *)
IMDSqlOperationInitWithPath
Database not found at %@
void IMDSqlOperationSetThreadedMessageStore(IMDSqlOperation *, CSDBThreadedRecordStoreRef)
IMDSqlOperationSetThreadedMessageStore
Error IMDMessageRecordCreateFromRecordIDWithLock could not create message for id %lld
Setting IMDMessageRecord property %d of %d
New message record [%@] has ID [%lld]  [%@].
"Database": Attempted to get record identifier for NULL message record: %@
"Database": Attempted to get record identifier for NULL record: %@
CFStringRef IMDMessageRecordCopyGUID(CFAllocatorRef, IMDMessageRecordRef)
"Database": NULL message passed to %s
CFStringRef IMDMessageRecordCopyGUIDUnlocked(CFAllocatorRef, IMDMessageRecordRef)
CFStringRef IMDMessageRecordCopyText(CFAllocatorRef, IMDMessageRecordRef)
int64_t IMDMessageRecordGetHandleID(IMDMessageRecordRef, Boolean)
"Database": NULL message passed when trying to get property: %ld
"Database": NULL message passed when trying to set property: %ld  (value:%d)
SELECT chat_id FROM chat_message_join WHERE message_id = ?;
SELECT attachment_id FROM message_attachment_join WHERE message_id = ?;
void IMDMessageRecordBulkCopy(IMDMessageRecordRef, IMDMessageRecordItemType *, int64_t *, int64_t *, CFStringRef *, int64_t *, int64_t *, int64_t *, int64_t *, CFStringRef *, CFDataRef *, CFNumberRef *, CFStringRef *, CFStringRef *, CFStringRef *, int64_t *, CFStringRef *, int64_t *, int64_t *, Boolean *, Boolean *, CFStringRef *, int64_t *, CFStringRef *, int64_t *, int64_t *, int64_t *, int64_t *, int64_t *, CFStringRef *, int64_t *, NSRange *, CFStringRef *, CFDataRef *, CFStringRef *, int64_t *, CFDataRef *)
"Database": Remote set other handle not implemented
Trying to associate attachment [%lld] with message [%lld]
INSERT OR IGNORE INTO message_attachment_join (message_id, attachment_id) VALUES (?, ?);
__IMDMessageRecordAddAttachmentIfNeededUnlocked_block_invoke
"Database": Error adding attachment join: %d (%s)
void IMDMessageRecordBulkUpdate(IMDMessageRecordRef, int64_t, CFStringRef, int64_t, int64_t, int64_t, int64_t, CFStringRef, CFDataRef, CFNumberRef, CFStringRef, CFStringRef, CFStringRef, int64_t, CFStringRef, int64_t, int64_t, int64_t, CFStringRef, int64_t, int64_t, int64_t, int64_t, int64_t, CFStringRef, int64_t, NSRange, CFDataRef, CFStringRef, int64_t, CFDataRef)
recordIdentifier
flags
void _IMDMessageRecordBulkCopyXPCDictionary(IMDMessageRecordRef, xpc_object_t, Boolean, Boolean, Boolean)
"Database": NULL dictionary passed to %s
"Database": NULL record passed to %s
handle_cache
other_handle_cache
attachments_cache
IMDMessageRecord
<IMDMessageRecord %p [%p]>{}
_IMDMessageRecordCreate()
void _IMDMessageRecordSetHandleID(IMDMessageRecordRef, int64_t)
void _IMDMessageRecordSetOtherHandleID(IMDMessageRecordRef, int64_t)
"Database": new IMDHandleRecordRef [%@] has id [%lld].
"Database": Attempted to get record identifier for NULL handle record: %@
CFStringRef IMDHandleRecordCopyID(CFAllocatorRef, IMDHandleRecordRef)
"Database": NULL handle passed to %s
CFStringRef IMDHandleRecordCopyCountry(CFAllocatorRef, IMDHandleRecordRef)
CFStringRef IMDHandleRecordCopyUncanonicalizedID(CFAllocatorRef, IMDHandleRecordRef)
void IMDHandleRecordBulkCopy(IMDHandleRecordRef, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *)
void IMDHandleRecordBulkUpdate(IMDHandleRecordRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef)
IMDHandle
Updating handle: %@   ID: %@   Country: %@   Service: %@  Unformatted: %@
void _IMDHandleRecordBulkCopyXPCDictionary(IMDHandleRecordRef, xpc_object_t, Boolean)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDHandleRecord.m
BOOL IMDDeleteOrphanedHandles(IMDSqlOperation *)
IMDDeleteOrphanedHandles
DELETE FROM handle WHERE ROWID IN (SELECT ROWID FROM handle h1 WHERE ((SELECT 1 from chat_handle_join WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE other_handle = h1.ROWID LIMIT 1) IS NULL));
SELECT ROWID FROM handle h1 WHERE ((SELECT 1 from chat_handle_join WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE handle_id = h1.ROWID LIMIT 1) IS NULL AND (SELECT 1 from message WHERE other_handle = h1.ROWID LIMIT 1) IS NULL);
IMDHandleRecord
<IMDHandleRecord %p [%p]>{}
"Database": _IMDHandleRecordCreate()
uncanonicalized_id
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMAbstractDatabaseArchiver.m
-[IMAbstractDatabaseArchiver initWithSourceDatabasePath:destinationDatabasePath:]
sourcePath
destinationPath
-[IMAbstractDatabaseArchiver copyDatabase:]
Failure in %s at %s:%d. %@
required override
Attempting to delete failed anonymized database...
unable to delete failed anonymous database: %@ at %@
T@"NSString",R,N,V_sourcePath
T@"NSString",R,N,V_destinationPath
before_delete_on_attachment
BEFORE DELETE ON attachment BEGIN   SELECT before_delete_attachment_path(OLD.ROWID, OLD.guid); END
after_delete_on_attachment
AFTER DELETE ON attachment BEGIN   SELECT delete_attachment_path(OLD.filename); END
after_delete_on_chat_message_join
AFTER DELETE ON chat_message_join BEGIN     UPDATE message       SET cache_roomnames = (         SELECT group_concat(c.room_name)         FROM chat c         INNER JOIN chat_message_join j ON c.ROWID = j.chat_id         WHERE           j.message_id = OLD.message_id       )       WHERE         message.ROWID = OLD.message_id;  DELETE FROM message WHERE message.ROWID = OLD.message_id AND OLD.message_id NOT IN (SELECT chat_message_join.message_id from chat_message_join WHERE chat_message_join.message_id = OLD.message_id LIMIT 1); END
after_insert_on_chat_message_join 
AFTER INSERT ON chat_message_join BEGIN     UPDATE message       SET cache_roomnames = (         SELECT group_concat(c.room_name)         FROM chat c         INNER JOIN chat_message_join j ON c.ROWID = j.chat_id         WHERE           j.message_id = NEW.message_id       )       WHERE         message.ROWID = NEW.message_id; END
after_delete_on_message_attachment_join
AFTER DELETE ON message_attachment_join BEGIN     UPDATE message       SET cache_has_attachments = 0     WHERE       message.ROWID = OLD.message_id       AND       (SELECT 1 from message_attachment_join WHERE message_id = OLD.message_id LIMIT 1) IS NULL; END
after_insert_on_message_attachment_join
AFTER INSERT ON message_attachment_join BEGIN     UPDATE message       SET cache_has_attachments = 1     WHERE       message.ROWID = NEW.message_id; END
after_delete_on_message
AFTER DELETE ON message BEGIN     DELETE FROM handle         WHERE handle.ROWID = OLD.handle_id     AND         (SELECT 1 from chat_handle_join WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE other_handle = OLD.handle_id LIMIT 1) IS NULL; END
after_delete_on_chat_handle_join
AFTER DELETE ON chat_handle_join BEGIN     DELETE FROM handle         WHERE handle.ROWID = OLD.handle_id     AND         (SELECT 1 from chat_handle_join WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE other_handle = OLD.handle_id LIMIT 1) IS NULL; END
AFTER DELETE ON message_attachment_join BEGIN     DELETE FROM attachment         WHERE attachment.ROWID = OLD.attachment_id     AND         (SELECT 1 from message_attachment_join WHERE attachment_id = OLD.attachment_id LIMIT 1) IS NULL; END
add_to_deleted_messages
AFTER DELETE ON message BEGIN     INSERT INTO deleted_messages (guid) VALUES (OLD.guid); END
after_delete_on_chat
AFTER DELETE ON chat BEGIN DELETE FROM chat_message_join WHERE chat_id = OLD.ROWID; END
delete_associated_messages_after_delete_on_message
AFTER DELETE ON message BEGIN DELETE FROM message WHERE (OLD.associated_message_guid IS NULL AND associated_message_guid IS NOT NULL AND guid = OLD.associated_message_guid); END
CREATE TRIGGER IF NOT EXISTS %@ %@
SELECT name FROM sqlite_master WHERE type = 'trigger'
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDTriggers.m
DROP TRIGGER IF EXISTS %@
Dropped trigger failed: %@: %@
Dropped trigger: %@
select * from sqlite_master where type = 'trigger'
BOOL IMDCreateTriggersWithOperation(IMDSqlOperation *, BOOL)
IMDCreateTriggersWithOperation
Create trigger failed: %@: %@
Created trigger ok: %@
BOOL IMDDropTriggersWithTriggerNames(NSArray *, BOOL)
IMDDropTriggersWithTriggerNames
names
dropping trigger failed: %@: %@
dropped trigger ok: %@
BOOL IMDCreateTriggersWithTriggerNames(NSArray *, BOOL)
IMDCreateTriggersWithTriggerNames
IMDSqlColumn IMDSqlOperationColumnByIndex(IMDSqlOperation *, int)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDSqliteUtilities.m
NSString *IMDGetTimeStampedFilePath(NSString *, NSString *)
IMDGetTimeStampedFilePath
yyMMdd-HHmmss
-%@.%@
-%@-%@.%@
NSString *IMDGetDestinationFilePath(NSString *, NSString *, NSString *)
IMDGetDestinationFilePath
originalPath
destFolder
fileName
newFileName
NSString *IMDGetDatabasePath()
IMDGetDatabasePath
/var/mobile/Library/Logs/CrashReporter/Messages/AnonymizedDatabases
anon
bool_result
trimmed
Tried to change DB on non gizmo device. This is not supported!!
"Database": QuickSwitch about to downgrade database at path %@ to %@
Database QuickSwitch tried to downgraded incompatible database versioin %ld
"Database": Quickswitch Downgrade Sending XPC now...
Database QuickSwitch Downgrade got unsuccessful result
BOOL _IMDArchiveDatabase(IMAbstractDatabaseArchiver *, NSError **)
_IMDArchiveDatabase
copier
SELECT   c.ROWID, c2.ROWID, ch.handle_id FROM   chat c INNER JOIN chat c2 ON   c2.chat_identifier = lower(c.chat_identifier)   AND c2.style = c.style INNER JOIN chat_handle_join ch ON   c2.ROWID = ch.chat_id WHERE   c.style = 45   AND c.chat_identifier != lower(c.chat_identifier) 
UPDATE   message SET   handle_id = ? WHERE   handle_id = (SELECT ch.handle_id FROM chat_handle_join ch WHERE ch.chat_id = ? LIMIT 1) 
UPDATE   chat_message_join SET   chat_id = ? WHERE   chat_id = ?   AND message_id NOT IN (SELECT cm.message_id FROM chat_message_join cm WHERE cm.chat_id = ?) 
DELETE FROM   chat WHERE   rowid = ? 
SELECT   c.ROWID, c.guid, c.chat_identifier FROM   chat c WHERE   c.style = 45   AND c.chat_identifier != lower(c.chat_identifier) 
UPDATE   chat SET     guid = ?,     chat_identifier = ? WHERE     ROWID = ?
SELECT   h.rowid, h2.rowid FROM   handle h INNER JOIN handle h2 ON   h2.id = lower(h.id)   AND h2.service = h.service WHERE   h.id != lower(h.id) 
UPDATE   chat_handle_join SET   handle_id = ? WHERE   handle_id = ?   AND chat_id NOT IN (SELECT ch2.chat_id FROM chat_handle_join ch2 WHERE ch2.handle_id = ?) 
UPDATE   message SET   handle_id = ? WHERE   handle_id = ? 
DELETE FROM   handle WHERE   rowid = ? 
UPDATE   handle SET     uncanonicalized_id = id,     id = lower(id) WHERE     id != lower(id)
SELECT ROWID, id, country, service, uncanonicalized_id FROM handle WHERE   id = ? AND   service = ? ORDER BY handle.ROWID ASC;
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/IMDPersistenceTests/IMDSqlQuery.m
-[IMDSqlQuery createQueryString]
Use one of the subclasses
T@"NSString",R,C,N,V_tableName
columns
T@"NSString",C,N,V_columns
limit
Tq,N,V_limit
where
T@"NSString",C,N,V_where
SELECT %@ FROM %@
 WHERE %@
 LIMIT %lld
Attachments
Request to save transfer to store: %@ [isIncoming = %d, %d], isAuxVideo %@
   => transfer has empty file name, bailing: %@
   => transfer is not ready to save
   => persistent path is zero length for transfer: %@
   => transfer could not ensure persistent path: %@
   => local path is already the same as destination path. Not moving or copying.
   => file already exists for transfer: %@
   => file is already in attachment store: %@
   => successfully copied file to path: %@
        ...removing old file in 10: %@
        ...removing old file: %@
   => ** failed copying file to path: %@
          The error was %@
kevin: had to move, error: %@
   => failed copy file to path: %@, will try move
      The error was %@
   => ** failed moving file to path: %@
Changing permissions on attachment file at %@
    => Permissions changed: %@  error: %@
   => Success! returning path: %@
Request to delete attachment for transfer: %@
  => No persistent path for transfer found: %@
  => failed to remove item at path: %@  for transfer: %@
  => Successfully deleted item at path: %@  for transfer: %@
Generating path for sticker transfer %@ isSticker %@
Overriding guid for transfer in _persistentPathForTransfer %@
%02x
%02d
Local path is %@
/var/mobile/Library/SMS/Attachments
Resulting path %@   for transfer: %@
Input path: %@
DB Path: %@
/var/mobile/Library/SMS
Anonymizing database at: '%@'...
Copying database (to be anonymized) from %@ to %@ failed: %@
Anonymizing data:
Anonymizing failed with error: %@
Failed to delete partially anonymized database at with error: %@
IMPORTANT -- Please manually delete database here:
Successfully Deleted partially anonymized database at '%@'
  no query function set
  Replacing '%@' in '%@' with '%@ <ROWNUM>'
UPDATE %@ SET %@ = "[%@ " || ROWID || "]";
UPDATE %@ SET %@ = "[%@ " || ROWID || "]" WHERE %@ IS NOT NULL AND %@ != '';
UPDATE attachment SET filename = ((SELECT rtrim(filename, (SELECT transfer_name FROM attachment WHERE ROWID = a1.ROWID)) FROM attachment a1) || ROWID || ".JPG");
Cleaning attachment path
UPDATE attachment SET transfer_name = ROWID || ".JPG" WHERE transfer_name IS NOT NULL AND transfer_name != '';
Cleaning attachment name
UPDATE attachment SET mime_type = "image/jpeg";
Updating attachment mimetype
UPDATE attachment SET uti = "public.jpeg";
Updating attachment uti
UPDATE attachment SET total_bytes = 0;
setting attachment size to zero (for now)
UPDATE message SET attributedBody = NULL;
clearing attributed body text - no attachments will show
  %@
Starting migration from V21 to V22.
DROP TRIGGER IF EXISTS delete_attachment_files;
Failed to delete trigger delete_attachment_files [SQLite result %d reason %s]
Failed to delete trigger delete_attachment_files [SQLite result %d]
Whoa, pardner, where is the V21_MIGRATION_GROUP_CHAT_MAP ?!
Whoa, pardner, where is the V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP ?!
SELECT ROWID, address, date, text, flags, replace, svc_center, group_id, association_id, height, UIFlags, version, subject, country, headers, recipients, read, madrid_attributedBody, madrid_handle, madrid_version, madrid_guid, madrid_type, madrid_roomname, madrid_service, madrid_account, madrid_account_guid, madrid_flags, madrid_attachmentInfo, madrid_url, madrid_error, is_madrid, madrid_date_read, madrid_date_delivered FROM message_legacy ORDER BY ROWID ASC
"Database": "Database": [Database] ERROR: **** Failed ingesting legacy message with row ID: %d
[Database] ERROR: **** Failed ingesting legacy message with row ID: %d
Successful migration for legacy message [%d]
No message rows available to migrate, great success!!
Whoa pardner, we didn't drop the group to chat map table. C'est la vie.
Whoa pardner, we didn't drop the non-canonical group to handle map table. C'est la vie.
Asking DB to analyze.
analyze;
Migration ended with result %d
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CREATE TABLE IF NOT EXISTS V21_MIGRATION_GROUP_CHAT_MAP (chat_id INTEGER REFERENCES chat(ROWID), group_id INTEGER NOT NULL, is_broadcast INTEGER NOT NULL, UNIQUE (chat_id, group_id, is_broadcast) );
CREATE TABLE IF NOT EXISTS V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP (group_id INTEGER REFERENCES msg_group_legacy(ROWID), handle_id INTEGER REFERENCES handle(rowid), UNIQUE (group_id, handle_id) );
ORPHAN: Unable to find/create a chat for handle[%@] and roomname[%@] for legacy messageID[%d]. Skipping this message.
INSERT INTO message (  guid,   text,   replace,   service_center,   subject,   country,   attributedBody,   version,   type,   service,   account,   account_guid,   error,   date,   date_read,   date_delivered ) SELECT   madrid_guid,   text,   replace,   svc_center,   subject,   country,   madrid_attributedBody,   1,   madrid_type,   'iMessage',   madrid_account,   madrid_account_guid,   madrid_error,   date,   madrid_date_read,   madrid_date_delivered FROM   message_legacy WHERE   ROWID = ?
"Database": "Database": [Database] ERROR: Unable to migrate message row %d with error: %d
[Database] ERROR: Unable to migrate message row %d with error: %d
UPDATE   message SET   is_delivered = ?,   is_finished = ?,   is_emote = ?,   is_from_me = ?,   is_empty = ?,   is_delayed = ?,   is_auto_reply = ?,   is_prepared = ?,   is_read = ?,   is_system_message = ?,   is_sent = ?,   has_dd_results = ?,   is_service_message = ?,   is_forward = ?,   was_downgraded = ?,   is_archive = ? WHERE   ROWID = ? 
Unable to update flags row %d with error: %d
SELECT   ROWID FROM   chat WHERE   room_name = ?     OR    chat_identifier = ?   AND service_name = 'iMessage' LIMIT 1
SELECT   ROWID FROM   chat WHERE   chat_identifier = ?   AND service_name = 'iMessage' LIMIT 1
SELECT ROWID, style, state, account_id, properties, chat_identifier, service_name, guid, room_name, account_login, participants FROM   madrid_chat_legacy WHERE   room_name = ?     OR   chat_identifier = ? LIMIT 1
SELECT ROWID, style, state, account_id, properties, chat_identifier, service_name, guid, room_name, account_login, participants FROM   madrid_chat_legacy WHERE   chat_identifier = ? LIMIT 1
"Database": "Database": [DATABASE] There don't appear to be any participants in this chat, so it will NOT be migrated. RowID: %lld Handle %@ Roomname %@
[DATABASE] There don't appear to be any participants in this chat, so it will NOT be migrated. RowID: %lld Handle %@ Roomname %@
INSERT INTO chat (  guid,   style,   state,   account_id,   properties,   chat_identifier,   service_name,   room_name,   account_login ) SELECT   guid,   style,   state,   account_id,   properties,   chat_identifier,   'iMessage',   room_name,   account_login FROM   madrid_chat_legacy WHERE   ROWID = ?
Unable to migrate chat row %lld with error: %d
UPDATE chat SET room_name = ? WHERE ROWID = ? AND room_name is NULL
Unable to update chatID[%lld]'s room_name.
UPDATE chat SET guid = ? WHERE ROWID = ?
Unable to update chatID[%lld] with guid[%@]
"Database": "Database": [Database] ERROR: Could not create chat from handle[%@] and roomname[%@].
[Database] ERROR: Could not create chat from handle[%@] and roomname[%@].
ORPHAN: Unable to find a legacy madrid chat record for handle[%@] and roomname[%@] with sqlite status (%d). This usually means that a chat was deleted but the messages it contained weren't. Failing chat creation.
** You attempted to bind HandleID [%lld] to ChatID [%lld]. One of these values is bogus.
INSERT INTO chat_handle_join (handle_id, chat_id) values (?, ?)
"Database": "Database": [Database] ERROR: Failed to join Handle [%lld] to Chat [%lld]. SQLite error: %d
[Database] ERROR: Failed to join Handle [%lld] to Chat [%lld]. SQLite error: %d
INSERT INTO chat_message_join (   chat_id,   message_id ) VALUES (   ?,   ? )
"Database": "Database": [Database] ERROR: Unable to bind chat id[%lld] to message id[%lld]: %d
[Database] ERROR: Unable to bind chat id[%lld] to message id[%lld]: %d
AWOL handle for uncanonicalizedID [%@]  canonicalizedID [%@] Service [%@] Country [%@]
SELECT   ROWID FROM   handle WHERE   id = ?   AND service = ? LIMIT 1 
int64_t __createHandleRecord(CSDBSqliteConnection *, CFStringRef, CFStringRef, CFStringRef, CFStringRef)
Got an invalid IDs uncanon: (%@) canon: (%@) in %s.
Got an invalid service (%@) in %s.
Got an invalid identifier (%@) (%@) in %s.
INSERT INTO handle (  id,   service,   country,   uncanonicalized_id ) VALUES (   ?,   ?,   ?,   ? ) 
"Database": "Database": [Database] ERROR: Unable to create handle row with uncanonid[%@] canonid[%@] service[%@] country[%@]
[Database] ERROR: Unable to create handle row with uncanonid[%@] canonid[%@] service[%@] country[%@]
missed call
Invalid handleID[%lld] or messageID[%lld] passed for binding
UPDATE   message SET   handle_id = ? WHERE   ROWID = ? 
Unable to update handle id on message row %lld with error: %d
Boolean __findOrCreateiMessageAttachmentsForLegacyGUID(CSDBSqliteConnection *, CFStringRef, int64_t)
Invalid legacy guid provided in %s - this is bad but non-fatal.
"Database": Invalid legacy guid provided in %s - this is bad but non-fatal.
Invalid message rowID[%lld] provided in %s
Unable to find legacy attachment for guid[%@]. Not fatal, but bailing.
Fatal error binding attachmentID[%lld - %@] to messageID[%lld]
SELECT   ROWID FROM   attachment WHERE   guid = ? LIMIT 1 
SELECT   ROWID FROM   madrid_attachment_legacy WHERE   attachment_guid = ? 
INSERT INTO attachment (  guid,   created_date,   start_date,   filename,   uti,   mime_type,   transfer_state ) SELECT   attachment_guid,   created_date,   start_date,   filename,   uti_type,   mime_type,   transfer_state FROM   madrid_attachment_legacy WHERE   ROWID = ?
Unable to migrate attachment row %lld with error: %d
Invalid attachmentID[%lld] or messageID[%lld] passed for binding
INSERT INTO message_attachment_join (   message_id,   attachment_id ) VALUES (   ?,   ? )
Unable to bind attachmentID[%lld] to messageID[%lld]: %d
ORPHAN: Could not find an appropriate chat to use for messageID[%d]. Skipping this message.
INSERT INTO message (guid, text) values (?, ?);
"Database": "Database": [Database] ERROR: Failed to create new message row. SQLite error: %d
[Database] ERROR: Failed to create new message row. SQLite error: %d
This message is empty, and we should NOT keep it.
This message lacks a handle, and we should NOT keep it.
DELETE FROM message WHERE ROWID = ?;
Message [%lld] Legacy [%d] was problematic, thus we skip it.
Problems deleting message [%lld], SQLite error: %d
Unable to delete message.
"Database": "Database": [Database] Bailing early on a problematic message.
[Database] Bailing early on a problematic message.
UPDATE message SET     attributedBody = ?,     text = ?,     date = ?,     date_read = ?,     date_delivered = ?,     service_center = ?,     version = ?,     country = ?,     service = ?,     is_delivered = ?,     is_finished = ?,     is_emote = ?,     is_from_me = ?,     is_empty = ?,     is_delayed = ?,     is_auto_reply = ?,     is_prepared = ?,     is_read = ?,     is_system_message = ?,     is_sent = ?,     has_dd_results = ?,     is_service_message = ?,     is_forward = ?,     was_downgraded = ?,     subject = ?,     error = ?,     handle_id = ? WHERE     ROWID = ?
"Database": "Database": [Database] ORPHAN: Failed to update message. SQLite error: %d
[Database] ORPHAN: Failed to update message. SQLite error: %d
"Database": "Database": [Database] ORPHAN: Failed to insert message. SQLite error was: %d
[Database] ORPHAN: Failed to insert message. SQLite error was: %d
SELECT   COUNT(ROWID) FROM   message_legacy WHERE   ROWID < ?   AND group_id = ?   AND association_id = ?   AND is_madrid = 0 
"Database": "Database": [Database] ****** Result from select query: %d
[Database] ****** Result from select query: %d
"Database": "Database": [Database] ERROR: * * * * * Holy Smokes, the group row id is bogus! * * * * * *
[Database] ERROR: * * * * * Holy Smokes, the group row id is bogus! * * * * * *
ORPHAN: Unable to find handles for groupID[%d]. This means we have message rows without a matching group. Failing the chat lookup.
INSERT INTO chat (   guid,   style,   state,   chat_identifier,   service_name,   room_name ) VALUES (   ?,   ?,   ?,   ?,   ?,   ? )
"Database": "Database": [Database] ERROR: Got a NULL identifier for handleID[%lld]. Something is seriously wrong.
[Database] ERROR: Got a NULL identifier for handleID[%lld]. Something is seriously wrong.
"Database": "Database": [Database] ERROR: Was slinging around an invalid handleID for messageID[%d] to create chat. Something is wrong.
[Database] ERROR: Was slinging around an invalid handleID for messageID[%d] to create chat. Something is wrong.
"Database": "Database": [Database] ERROR: Got a NULL handleID for messageID[%d] to create chat. Something is wrong.
[Database] ERROR: Got a NULL handleID for messageID[%d] to create chat. Something is wrong.
"Database": "Database": [Database] ERROR: Failed to create chat record. SQLite error: %d
[Database] ERROR: Failed to create chat record. SQLite error: %d
SELECT count(rowid) FROM group_member_legacy WHERE group_id = ?
SELECT ROWID, group_id, address, country FROM group_member_legacy WHERE group_id = ?
Ugh, the address '%@' wouldn't canonicalize.
MsgAddress '%@' was null, we won't even try to canonicalize it.
"Database": "Database": [Database] ERROR: Uh, not gonna find a chat with an invalid GroupID [%lld]
[Database] ERROR: Uh, not gonna find a chat with an invalid GroupID [%lld]
SELECT handle_id from V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP where group_id = ?
Got an invalid rowid looking for a handle mapped to group id: %lld
"Database": "Database": [Database] Invalid group id '%lld' passed to __addressFromMessagesMatchingLegacyGroupID
[Database] Invalid group id '%lld' passed to __addressFromMessagesMatchingLegacyGroupID
SELECT address from message_legacy where group_id = ?
"Database": "Database": [Database] ERROR: You tried to join handle [%lld] to group [%lld] with an invalid row id.
[Database] ERROR: You tried to join handle [%lld] to group [%lld] with an invalid row id.
INSERT INTO V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP (group_id, handle_id) values (?, ?)
"Database": "Database": [Database] ERROR: Failed to asscociate handle [%lld] to group [%lld] with sqlite result: %d.
[Database] ERROR: Failed to asscociate handle [%lld] to group [%lld] with sqlite result: %d.
SELECT chat_id from V21_MIGRATION_GROUP_CHAT_MAP where group_id = ? AND is_broadcast = ?
Got an invalid rowid looking for a chat mapped to group id: %lld
SELECT ROWID, guid, style, state, account_id, properties, chat_identifier, service_name, room_name, account_login, is_archived FROM chat WHERE     style = ? AND     service_name = ? ORDER BY ROWID ASC
SELECT handle_id from chat_handle_join where chat_id = ? ORDER BY handle_id ASC
"Database": "Database": [Database] ERROR: You tried to join chat [%lld] to group [%lld] with an invalid row id.
[Database] ERROR: You tried to join chat [%lld] to group [%lld] with an invalid row id.
INSERT INTO V21_MIGRATION_GROUP_CHAT_MAP (chat_id,group_id,is_broadcast) values (?, ?, ?)
"Database": "Database": [Database] ERROR: Failed to Asscociated chat [%lld] for group [%lld] (isBroadcast[%d]) with Sqlite result: %d.
[Database] ERROR: Failed to Asscociated chat [%lld] for group [%lld] (isBroadcast[%d]) with Sqlite result: %d.
"Database": "Database": [Database] ERROR: Unable to copy identifier for invalid handleID[%lld]
[Database] ERROR: Unable to copy identifier for invalid handleID[%lld]
SELECT   id FROM   handle WHERE   ROWID = ? LIMIT 1
"Database": "Database": [Database] ERROR: Unable to update placeholder property on invalid chatID
[Database] ERROR: Unable to update placeholder property on invalid chatID
SELECT   COUNT(message_id) FROM   chat_message_join WHERE   chat_id = ? 
CKPlaceholderTimeSince1970Property
"Database": "Database": [Database] ERROR: Unable to set properties on an invalid chat
[Database] ERROR: Unable to set properties on an invalid chat
UPDATE   chat SET   properties = ? WHERE   ROWID = ? 
"Database": "Database": [Database] ERROR: Unable to set properties for chat[%lld]: %d
[Database] ERROR: Unable to set properties for chat[%lld]: %d
SELECT ROWID, message_id, data, part_id, preview_part, content_type, height, version, flags, content_id, content_loc, headers FROM msg_pieces_legacy WHERE message_id = ? AND preview_part < 0 ORDER BY part_id ASC
application/smil
text/plain
INSERT INTO attachment (guid, mime_type, uti, created_date, transfer_state) values (?, ?, ?, ?, 5);
"Database": "Database": [Database] ORPHAN: Failed to create new attachment record. SQLite error: %d.
[Database] ORPHAN: Failed to create new attachment record. SQLite error: %d.
INSERT INTO message_attachment_join (message_id, attachment_id) values (?, ?);
"Database": "Database": [Database] ERROR: Failed joining new attachment to message with SQLite result: %d
[Database] ERROR: Failed joining new attachment to message with SQLite result: %d
"Database": "Database": [Database] ERROR: Failed to create directory [%@]: %@
[Database] ERROR: Failed to create directory [%@]: %@
"Database": "Database": [Database] ERROR: Failed to write piece data to FS.
[Database] ERROR: Failed to write piece data to FS.
UPDATE attachment SET filename  = ? WHERE guid = ?
"Database": "Database": [Database] ERROR: Failed updating the filename on the new attachment record with SQLite result: %d
[Database] ERROR: Failed updating the filename on the new attachment record with SQLite result: %d
%d-%d
/var/mobile/Library/SMS/Parts/
SELECT handle_id FROM chat_handle_join WHERE chat_id = ?
DROP TABLE IF EXISTS V21_MIGRATION_GROUP_CHAT_MAP
DROP TABLE IF EXISTS V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP
BOOL _IMDSqlOperationBeginQuery(IMDSqlOperation *, CFStringRef, IMFileLocation_t *)
operation->statement.sql_statement
"Database": ASSERTION FAILED: %s is unexpectedly NOT nil in "%s" at line %d [%@]
"Database": Starting new query with pending error: : %@
void IMDSqlOperationSetError(IMDSqlOperation *, CFErrorRef)
BOOL IMDSqlOperationFinishQuery(IMDSqlOperation *)
BOOL IMDSqlOperationBeginTransaction(IMDSqlOperation *)
BEGIN IMMEDIATE;
BOOL IMDSqlOperationCommitTransaction(IMDSqlOperation *)
operation->transaction
trying to commit transaction when we don't have one.
BOOL IMDSqlOperationRevertTransaction(IMDSqlOperation *)
Trying to revert transaction when we don't have one. This may mean we have a transaction open on this same sql_connection with another IMDSqlOperation
ROLLBACK;
BOOL IMDSqlOperationCommitOrRevertTransaction(IMDSqlOperation *)
BOOL IMDSqlOperationRelease(IMDSqlOperation *, NSError **)
"Database": reverting uncommitted transation with error: %@
"Database": committing uncommitted transation
NSArray *_IMDSqlOperationGetRowsWithBindingBlock(IMDSqlOperation *, CFStringRef, dispatch_block_t)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDSqlOperation.m
_IMDSqlOperationGetRowsWithBindingBlock
binder
rows
NSArray *_IMDSqlOperationGetRowsForQueryWithBindingBlock(CFStringRef, NSError **, IMDSqlOperationBlock)
_IMDSqlOperationGetRowsForQueryWithBindingBlock
binderBlock
BOOL IMDSqlOperationExecuteQuery(IMDSqlOperation *, NSString *, IMDBlock)
IMDSqlOperationExecuteQuery
BOOL IMDSqlOperationHasRows(IMDSqlOperation *)
void _IMDSqlOperationSetQuery(IMDSqlOperation *, CFStringRef)
operation->statement.query
void _IMDSqlOperationReleaseQuery(IMDSqlOperation *)
(operation->error == nil && operation->statement.stepCount == 0)
SQL operation results never read from statement
_IMDChatRecordSetProperty [%d of %d]
"Database": Attempted to get identifier for NULL chat record: %@
CFStringRef IMDChatRecordCopyGUID(CFAllocatorRef, IMDChatRecordRef)
"Database": NULL chat passed to %s
CFStringRef IMDChatRecordCopyGUIDUnlocked(CFAllocatorRef, IMDChatRecordRef)
SELECT message_id FROM chat_message_join WHERE chat_id = ? ORDER BY ROWID DESC LIMIT ?;
void IMDChatRecordBulkCopy(IMDChatRecordRef, int64_t *, int64_t *, CFStringRef *, CFDataRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, int64_t *, int64_t *, int64_t *)
void IMDChatRecordSetIsArchived(IMDChatRecordRef, int64_t)
Trying to associate message [%lld] with chat [%lld]
INSERT OR IGNORE INTO chat_message_join (chat_id, message_id) VALUES (?, ?);
SQLite returned %d from IMDChatRecordAddMessageIfNeeded
void IMDChatRecordRemoveMessage(IMDChatRecordRef, IMDMessageRecordRef)
DELETE FROM chat_message_join WHERE chat_id = ? AND message_id = ?;
IMDSpotlight
Finished remove message [%@] from chat [%@], updating the spotlight index for this chat.
Trying to associate handle [%lld] with chat [%lld]
INSERT INTO chat_handle_join (chat_id, handle_id) VALUES (?, ?)
SQLite returned %d from IMDChatRecordAddHandle
DELETE FROM chat_handle_join WHERE chat_id = ? AND handle_id = ?
SQLite returned %d from IMDChatRecordRemoveHandle
IMDChatRecordBulkUpdateChat %@
void IMDChatRecordBulkUpdate(IMDChatRecordRef, int64_t, int64_t, CFStringRef, CFDataRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, CFStringRef, int64_t, int64_t, int64_t)
void _IMDChatRecordBulkCopyXPCDictionary(IMDChatRecordRef, xpc_object_t, Boolean, Boolean, Boolean, Boolean)
handles_cache
last_message_cache
unread_count_cache
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDChatRecord.m
BOOL IMDMergeDuplicateChatsWithOperation(IMDSqlOperation *, NSArray<NSString *> *, NSString *)
IMDMergeDuplicateChatsWithOperation
losingChatGUIDs
winningChatGUID
ForkMerge
failed dropping triggers: %@
UPDATE chat_message_join SET chat_id = (SELECT ROWID FROM chat WHERE guid = ?) WHERE (chat_id = (SELECT ROWID FROM chat WHERE guid = ?) AND message_id NOT IN (SELECT message_id from chat_message_join WHERE chat_id =  (SELECT ROWID FROM chat WHERE guid = ?)));
failed updating chat_message_join table: %@ for unwanted chat: %@
DELETE FROM chat_handle_join WHERE chat_id IN (SELECT ROWID FROM chat WHERE guid %@)
failed deleting chat_handle_join rows failed (%@) - for unwanted chats: %@
failed recreating the triggers: (%@) - for unwanted chats: %@
Finished merging %ld (%@) unwanted chats into %@ 
Being to merge %lld (%@) duplicate chats into winning chat %@
IMDMergeDuplicateChatsWithOperation failed in db with error: %@
Finished repairing %lld duplicate chats in %f seconds
error_domain
error_code
error_localized_description
Finished merging duplicated chats in %f seconds
IMDMergeDuplicateChatsWithOperation in agent failed with error: %@
IMDChatRecord
<IMDChatRecord %p [%p]>[%lld]{}
_IMDChatRecordCreate()
Got record in _IMDChatRecordCreateFromRecordIDWithLock (%lld) : %@
Could not get chat record for identifier %lld
SELECT ROWID from message m WHERE m.item_type == 0 AND m.ROWID in (SELECT message_id FROM chat_message_join where chat_id = ?) ORDER BY ROWID DESC LIMIT ?;
SELECT   m.ROWID, m.attributedBody FROM   message m WHERE   m.text IS NULL   AND m.attributedBody IS NOT NULL   AND (    SELECT       COUNT(*)     FROM       message_attachment_join     WHERE       message_id = m.ROWID   ) = 0 
UPDATE   message SET     text = ? WHERE     ROWID = ?
%@, error: %@
SQL_ERROR
"Database": Sqlite3 Error: %@
CRAddressKindPhoneNumber
CoreRecents
CRAddressKindInstantMessage
CRAddressKindEmail
CRAddressKindMapLocation
CRRecentsDomainMessages
CRRecentsDomainMaps
CRRecentContactsLibrary
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDCoreSpotlight.m
void _IMDCoreRecentsApiInit()
_IMDCoreRecentsApiInit
kIMCoreRecentsAddressKindEmail
kIMCoreRecentsAddressKindPhoneNumber
kIMCoreRecentsAddressKindInstantMessage
kIMCoreRecentsRecentsDomainMessages
IMCoreRecentsContactsLibraryClass
CNContactEmailAddressesKey
Contacts
CNContactPhoneNumbersKey
CNContactInstantMessageAddressesKey
CNContactVCardSerialization
CNLabeledValue
CNPostalAddressFormatter
CNContactStore
CNContact
CNPhoneNumber
CNContactFormatter
CNPostalAddress
void _IMDContactsApiInit()
_IMDContactsApiInit
kIMContactsContactEmailAddressesKey
kIMContactsContactPhoneNumbersKey
kIMContactsContactInstantMessageAddressesKey
CSSearchableItemAttributeSet
CoreSpotlight
CSSearchableItem
CSSearchableIndex
CSPerson
com.apple.MobileSMS
IMDCoreSpotlightProcessingQueue
void _IMDCoreSpotlightApiInit()
_IMDCoreSpotlightApiInit
IMCoreSpotlightSearchableItemAttributeSet
IMCoreSpotlightSearchableItem
IMCoreSpotlightSearchableIndex
IMCoreSpotlightPerson
sSearchableIndex
iMessage
NSString *_IMDCoreSpotlightHandleID(IMDHandleRecordRef)
_IMDCoreSpotlightHandleID
NSString *_IMDCoreRecentsKindForHandleID(NSString *, NSString *)
_IMDCoreRecentsKindForHandleID
handleID
NSString *_IMDContactsKindForID(NSString *, NSString *)
_IMDContactsKindForID
CSPerson *_IMDCoreSpotlightPerson(NSString *, NSString *, CNContact *, NSString *)
_IMDCoreSpotlightPerson
CNContact *_IMDCoreSpotlightCNContactForHandle(IMDHandleRecordRef)
_IMDCoreSpotlightCNContactForHandle
Indexing New messasge
Number of pseudo-contacts %@
Number of pseudo-event %@
v40@?0@"NSError"8@"NSArray"16@"NSArray"24@"NSArray"32
IMDChatAddMessageToSpotlight: indexing searchable items failed with error %@
 => Indexed message: %@ in chat: %@
v16@?0@"NSError"8
 => Before first unlock, skipping indexing
CSSearchableItem *_IMDChatAddMessageToSpotlight(IMDChatRecordRef, IMDMessageRecordRef, BOOL, IMDCoreSpotlightFiltered *)
_IMDChatAddMessageToSpotlight
bailing early, chatGUID (%@) or sender handle (%@) was nil
%@:%@
Caught exception: %@   name: %@   reason: %@   userInfo: %@ in function: %s
 => Nuking messages: %@
IMDChatAddMessageToSpotlight: deleting message for searchable items failed with error %@
 => Nuking chat: %@
IMDChatAddMessageToSpotlight: chat for searchable items failed with error %@
com.apple.imdpersistenceagent.notification.mergecompleted
history query
generate indexable item
Request to reindex all chats
totalTime
copy chats
Done indexing, time: %@
Indexing %ld chats
com.apple.imdsmsrecordstore
mobile
kIMDPersistenceLastBuild
Needs migration, not allowing indexing, lastBuild: %@, currentBuild: %@
No current build version, allowing indexing
We have migrated, lastBuild: %@
kIMDPersistenceHasFixedIsFiltered
Needs to fix is filtered: %@
Doesnt to fix is filtered: %@
We fixed isFiltered
Couldn't read data from file %@ ; error %@
Couldn't serialize data to CNContacts from file %@ ; error %@
CRRecentWeightMessagesReceivedAddress
map url
CRRecentContactMetadataEventTime
CRRecentContactMetadataReferenceURL
CRRecentContactMetadataFromAddress
CRRecentContactMetadataFromAddressKind
CRRecentContactMetadataFrom
sms:/open?message-guid=%@
DataDetectors
CoreRecents metadata:%@
Library
sms.db
sms-temp.db
uint64_result
counter_in_all
counter_out_all
counter_last_reset
v32@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I}16^{CSDBSqliteConnection=^{CSDBSqliteDatabase}^{sqlite3}^{__CFDictionary}^v^?I}24
Beginning file cleanse.
Beginning sticker attachment cleanse.
Beginning browser snapshot deletion
Attachments. Could not delete browser snapshot cache at path %@
counter_out_lifetime
counter_in_lifetime
Skipping '%@' as its level is %d and our target level is %d.
Examining '%@' as it looks like it contains a guid '%@'.
To Delete: %@
Cleaned up '%@'
Could ~not~ clean up '%@' due to error '%@'.
Keeping '%@' we have a record for it in the DB.
  Deleting preview: %@
  Not deleting the actual attachment: %@
Beginning iteration of _IMDCleanseOrphanedAttachmentsWithEnumerator attachments
File cleanse ended %@
successfully.
in failure.
Attachments _IMDCleanseOrpanedStickersInStickerCachePath nil stickerCachePath
Sticker cache path %@
Attachments. Error getting contents of directory %@ error %@
Looking at filePath %@
sticker with path is in use %@
sticker with path is not in use. Will delete %@
Attachments. Could not delete sticker at path %@
"Database": Unable to create record for attachment.
Attempted to get record identifier for NULL attachment record: %@
CFStringRef IMDAttachmentRecordCopyGUID(CFAllocatorRef, IMDAttachmentRecordRef)
"Database": NULL attachment passed to %s
int64_t IMDAttachmentRecordGetCreatedDate(IMDAttachmentRecordRef)
int64_t IMDAttachmentRecordGetStartDate(IMDAttachmentRecordRef)
Boolean IMDAttachmentRecordGetIsOutgoing(IMDAttachmentRecordRef)
CFStringRef IMDAttachmentRecordCopyFilename(CFAllocatorRef, IMDAttachmentRecordRef)
CFStringRef IMDAttachmentRecordCopyTransferName(CFAllocatorRef, IMDAttachmentRecordRef)
CFStringRef IMDAttachmentRecordCopyUTIType(CFAllocatorRef, IMDAttachmentRecordRef)
CFDictionaryRef IMDAttachmentRecordCopyUserInfo(CFAllocatorRef, IMDAttachmentRecordRef)
CFStringRef IMDAttachmentRecordCopyMIMEType(CFAllocatorRef, IMDAttachmentRecordRef)
int64_t IMDAttachmentRecordGetTransferState(IMDAttachmentRecordRef)
void IMDAttachmentRecordBulkCopy(IMDAttachmentRecordRef, CFStringRef *, int64_t *, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, int64_t *, Boolean *, int64_t *, CFDictionaryRef *, Boolean *, CFDictionaryRef *, CFDictionaryRef *, Boolean *)
void IMDAttachmentRecordBulkUpdate(IMDAttachmentRecordRef, CFStringRef, int64_t, int64_t, CFStringRef, CFStringRef, CFStringRef, CFStringRef, int64_t, Boolean, int64_t, CFDictionaryRef, Boolean, CFDictionaryRef, CFDictionaryRef, Boolean)
void _IMDAttachmentRecordBulkCopyXPCDictionary(IMDAttachmentRecordRef, xpc_object_t, Boolean)
IMDAttachmentRecord
CFStringRef _AttachmentCopyDescription(_IMDAttachmentRecord *)
<IMDAttachmentRecord %p [%p]>{}
"Database": _IMDAttachmentRecordCreate()
CREATE TABLE _SqliteDatabaseProperties (key TEXT, value TEXT, UNIQUE(key));
CREATE TABLE message (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, guid TEXT UNIQUE NOT NULL, text TEXT, replace INTEGER DEFAULT 0, service_center TEXT, handle_id INTEGER DEFAULT 0, subject TEXT, country TEXT, attributedBody BLOB, version INTEGER DEFAULT 0, type INTEGER DEFAULT 0, service TEXT, account TEXT, account_guid TEXT, error INTEGER DEFAULT 0, date INTEGER, date_read INTEGER, date_delivered INTEGER, is_delivered INTEGER DEFAULT 0, is_finished INTEGER DEFAULT 0, is_emote INTEGER DEFAULT 0, is_from_me INTEGER DEFAULT 0, is_empty INTEGER DEFAULT 0, is_delayed INTEGER DEFAULT 0, is_auto_reply INTEGER DEFAULT 0, is_prepared INTEGER DEFAULT 0, is_read INTEGER DEFAULT 0, is_system_message INTEGER DEFAULT 0, is_sent INTEGER DEFAULT 0, has_dd_results INTEGER DEFAULT 0, is_service_message INTEGER DEFAULT 0, is_forward INTEGER DEFAULT 0, was_downgraded INTEGER DEFAULT 0, is_archive INTEGER DEFAULT 0, cache_has_attachments INTEGER DEFAULT 0, cache_roomnames TEXT, was_data_detected INTEGER DEFAULT 0, was_deduplicated INTEGER DEFAULT 0, is_audio_message INTEGER DEFAULT 0, is_played INTEGER DEFAULT 0, date_played INTEGER, item_type INTEGER DEFAULT 0, other_handle INTEGER DEFAULT -1, group_title TEXT, group_action_type INTEGER DEFAULT 0, share_status INTEGER, share_direction INTEGER, is_expirable INTEGER DEFAULT 0, expire_state INTEGER DEFAULT 0, message_action_type INTEGER DEFAULT 0, message_source INTEGER DEFAULT 0);
CREATE TABLE chat (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, guid TEXT UNIQUE NOT NULL, style INTEGER, state INTEGER, account_id TEXT, properties BLOB, chat_identifier TEXT, service_name TEXT, room_name TEXT, account_login TEXT, is_archived INTEGER DEFAULT 0, last_addressed_handle TEXT, display_name TEXT, group_id TEXT, is_filtered INTEGER DEFAULT 0, successful_query INTEGER DEFAULT 1);
CREATE TABLE attachment (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, guid TEXT UNIQUE NOT NULL, created_date INTEGER DEFAULT 0, start_date INTEGER DEFAULT 0, filename TEXT, uti TEXT, mime_type TEXT, transfer_state INTEGER DEFAULT 0, is_outgoing INTEGER DEFAULT 0, user_info BLOB, transfer_name TEXT, total_bytes INTEGER DEFAULT -1);
CREATE TABLE handle ( ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, id TEXT NOT NULL, country TEXT, service TEXT NOT NULL, uncanonicalized_id TEXT, UNIQUE (id, service) );
CREATE TABLE message_attachment_join ( message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE, attachment_id INTEGER REFERENCES attachment (ROWID) ON DELETE CASCADE, UNIQUE(message_id, attachment_id));
CREATE TABLE chat_message_join ( chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE, message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE, PRIMARY KEY (chat_id, message_id));
CREATE TABLE chat_handle_join ( chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE, handle_id INTEGER REFERENCES handle (ROWID) ON DELETE CASCADE, UNIQUE(chat_id, handle_id));
CREATE TABLE deleted_messages (ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, guid TEXT NOT NULL);
_SqliteDatabaseProperties
CREATE INDEX message_idx_is_read ON message(is_read, is_from_me, is_finished);
CREATE INDEX message_idx_failed ON message(is_finished, is_from_me, error);
CREATE INDEX message_idx_handle ON message(handle_id, date);
CREATE INDEX message_idx_was_downgraded ON message(was_downgraded);
CREATE INDEX chat_message_join_idx_message_id ON chat_message_join(message_id, chat_id);
CREATE INDEX message_idx_date ON message(date);
CREATE INDEX chat_idx_chat_identifier_service_name ON chat(chat_identifier, service_name);
CREATE INDEX chat_idx_chat_identifier ON chat(chat_identifier);
CREATE INDEX chat_idx_chat_room_name_service_name ON chat(room_name, service_name);
CREATE INDEX message_attachment_join_idx_message_id ON message_attachment_join(message_id);
CREATE INDEX chat_handle_join_idx_handle_id ON chat_handle_join(handle_id);
CREATE INDEX message_attachment_join_idx_attachment_id ON message_attachment_join(attachment_id);
CREATE INDEX message_idx_handle_id ON message(handle_id);
CREATE INDEX chat_message_join_idx_chat_id ON chat_message_join(chat_id);
CREATE INDEX message_idx_other_handle ON message(other_handle);
CREATE INDEX message_idx_expire_state ON message(expire_state);
CREATE INDEX chat_message_join_idx_message_id_only ON chat_message_join(message_id);
CREATE INDEX chat_idx_is_archived ON chat(is_archived);
CREATE TRIGGER after_delete_on_chat AFTER DELETE ON chat BEGIN DELETE FROM chat_message_join WHERE chat_id = OLD.ROWID; END;
CREATE TRIGGER after_delete_on_message_attachment_join AFTER DELETE ON message_attachment_join BEGIN     DELETE FROM attachment         WHERE attachment.ROWID = OLD.attachment_id     AND         (SELECT 1 from message_attachment_join WHERE attachment_id = OLD.attachment_id LIMIT 1) IS NULL; END;
CREATE TRIGGER after_insert_on_message_attachment_join AFTER INSERT ON message_attachment_join BEGIN     UPDATE message       SET cache_has_attachments = 1     WHERE       message.ROWID = NEW.message_id; END;
CREATE TRIGGER add_to_deleted_messages AFTER DELETE ON message BEGIN     INSERT INTO deleted_messages (guid) VALUES (OLD.guid); END;
CREATE TRIGGER after_delete_on_chat_message_join AFTER DELETE ON chat_message_join BEGIN     UPDATE message       SET cache_roomnames = (         SELECT group_concat(c.room_name)         FROM chat c         INNER JOIN chat_message_join j ON c.ROWID = j.chat_id         WHERE           j.message_id = OLD.message_id       )       WHERE         message.ROWID = OLD.message_id;  DELETE FROM message WHERE message.ROWID = OLD.message_id AND OLD.message_id NOT IN (SELECT chat_message_join.message_id from chat_message_join WHERE chat_message_join.message_id = OLD.message_id LIMIT 1); END;
CREATE TRIGGER after_delete_on_chat_handle_join AFTER DELETE ON chat_handle_join BEGIN     DELETE FROM handle         WHERE handle.ROWID = OLD.handle_id     AND         (SELECT 1 from chat_handle_join WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE other_handle = OLD.handle_id LIMIT 1) IS NULL; END;
CREATE TRIGGER after_delete_on_message AFTER DELETE ON message BEGIN     DELETE FROM handle         WHERE handle.ROWID = OLD.handle_id     AND         (SELECT 1 from chat_handle_join WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE handle_id = OLD.handle_id LIMIT 1) IS NULL     AND         (SELECT 1 from message WHERE other_handle = OLD.handle_id LIMIT 1) IS NULL; END;
CREATE TRIGGER before_delete_on_attachment BEFORE DELETE ON attachment BEGIN   SELECT before_delete_attachment_path(OLD.ROWID, OLD.guid); END;
CREATE TRIGGER after_delete_on_attachment AFTER DELETE ON attachment BEGIN   SELECT delete_attachment_path(OLD.filename); END;
CREATE TRIGGER after_insert_on_chat_message_join  AFTER INSERT ON chat_message_join BEGIN     UPDATE message       SET cache_roomnames = (         SELECT group_concat(c.room_name)         FROM chat c         INNER JOIN chat_message_join j ON c.ROWID = j.chat_id         WHERE           j.message_id = NEW.message_id       )       WHERE         message.ROWID = NEW.message_id; END;
"Database": Downgrade: Opening new coral database
"Database": Downgrade: Creating Tables
"Database": Downgrade: Creating Indexes
"Database": Downgrade: Committing phase 1
"Database": Downgrade: Beginning to copy tables
"Database": Downgrade: Creating triggers
"Database": Downgrade: Updating Version
"Database": Downgrade: Committing phase 2
Database downgrade failed with error: %@
"Database": Downgrade completed ok! :-D
"Database": Unable to perform query %@. Error %d
SELECT ROWID FROM chat WHERE GUID = ?
SELECT ROWID FROM message WHERE GUID = ?
SELECT ROWID FROM attachment WHERE GUID = ?
SELECT ROWID FROM handle WHERE id = ? AND service = ?
INSERT INTO chat (  guid,   style,   state,   properties,   chat_identifier,   service_name,   room_name,   is_archived ) VALUES (   ?,   ?,   ?,   ?,   ?,   ?,   ?,   ? );
INSERT INTO handle ( id,  service )  VALUES (  ?,  ? );
INSERT OR IGNORE INTO chat_handle_join ( chat_id,  handle_id )  VALUES (  ?,  ? );
INSERT INTO attachment ( guid,  created_date,  start_date,  filename,  uti,  mime_type,  transfer_state,  is_outgoing,  transfer_name,  total_bytes) VALUES (   ?,   ?,   ?,   ?,   ?,   ?,   ?,   ?,   ?,   ? );
INSERT INTO message ( guid,  text,  handle_id,  subject,  attributedBody,  service,  account,  account_guid,  error,  date,  date_read,  date_delivered,  is_delivered,  is_finished,  is_emote,  is_from_me,  is_empty,  is_delayed,  is_auto_reply,  is_prepared,  is_read,  is_system_message,  is_sent,  is_service_message,  is_forward,  is_archive,  order_date ) VALUES ( ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ?,  ? );
INSERT OR IGNORE INTO chat_message_join (chat_id, message_id) VALUES (?, ?)
importbackup
MessageImport
Backing up database to %@
ALTER TABLE message ADD COLUMN order_date INTEGER DEFAULT 0
UPDATE message SET order_date = date
SELECT ROWID, date FROM message ORDER BY ROWID ASC
UPDATE message SET order_date = ? where ROWID = ?
"Database": Couldn't update %lld with order date %lld
DROP INDEX IF EXISTS %@
"Database": MessageImport failed in ImportBegin
IMDMessageImportEnd
"Database": %s called, but not during import, ignoring
ALTER TABLE message RENAME TO message_import
CREATE INDEX message_import_idx ON message_import(date, ROWID)
INSERT INTO message (guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated) SELECT guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated FROM message_import ORDER BY message_import.order_date ASC, message_import.ROWID ASC;
CREATE TABLE IF NOT EXISTS message_new_to_old (            ROWID        INTEGER PRIMARY KEY,            old_rowid    INTEGER            ); 
INSERT INTO message_new_to_old (old_rowid) SELECT message_import.ROWID FROM message_import ORDER BY message_import.order_date ASC, message_import.ROWID ASC
CREATE INDEX message_new_to_old_idx ON message_new_to_old(old_rowid);
ALTER TABLE chat_message_join RENAME TO chat_message_join_import
CREATE TABLE IF NOT EXISTS chat_message_join ( chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE, message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE, PRIMARY KEY (chat_id, message_id));
INSERT INTO chat_message_join    SELECT cmi.chat_id, mno.ROWID    FROM      chat_message_join_import cmi    INNER JOIN message_new_to_old mno ON      cmi.message_id = mno.old_rowid    ; 
ALTER TABLE message_attachment_join RENAME TO message_attachment_join_import
CREATE TABLE IF NOT EXISTS message_attachment_join ( message_id INTEGER REFERENCES message (ROWID) ON DELETE CASCADE, attachment_id INTEGER REFERENCES attachment (ROWID) ON DELETE CASCADE, UNIQUE(message_id, attachment_id));
INSERT INTO message_attachment_join   SELECT mno.ROWID, mai.attachment_id   FROM     message_attachment_join_import mai   INNER JOIN message_new_to_old mno ON     mai.message_id = mno.old_rowid   ;
UPDATE message SET cache_has_attachments = IFNULL((SELECT 1 FROM message_attachment_join maj WHERE message.ROWID = maj.message_id LIMIT 1), 0)
UPDATE message SET cache_roomnames = (                           SELECT group_concat(c.room_name)                           FROM                             chat c                           INNER JOIN                             chat_message_join j                           ON                             c.ROWID = j.chat_id                           WHERE                             j.message_id = message.ROWID                           ) WHERE message.ROWID = (select j.message_id FROM chat c INNER JOIN chat_message_join j ON c.rowid = j.chat_id WHERE c.room_name IS NOT NULL); 
DELETE FROM message WHERE (SELECT 1 from chat_message_join cmj WHERE message.ROWID = cmj.message_id LIMIT 1) IS NULL;
DELETE FROM attachment WHERE (SELECT 1 from message_attachment_join maj WHERE attachment.ROWID = maj.attachment_id LIMIT 1) IS NULL
Successful import! This is not an internal install so let's delete the backup database stored at %@
IMDCopyGUIDForImportedOneToOneChat
"Database": %s called for chat: %@, but not during import, ignoring
Creating chat for guid: %@
Created new chat with row id: %lld
Creating handle for: %lld
"Database": Failed to add handle: %lld to chat: %lld
"Database": Failed to create new chat for guid: %@
Already have chat for guid: %@
IMDCopyGUIDForImportedChat
Created new chat: %lld
Creating handle for: %@
Import attachment %@ with data
Import attachment %@ with filePath %@
IMDImportMessage
SELECT MIN(ROWID) FROM message m WHERE m.ROWID IN (SELECT message_id FROM chat_message_join where chat_id = ?) AND m.text = ? AND m.date > ? AND m.date < ?
Found duplicate for %@ at %lld
Found chat for guid: %@
Created message for guid: %@  associating with chat: %@
"Database": Failed to create message for guid: %@
Not inserting %@  already have message in chat: %@
"Database": No chat found for guid: %@   failing message import for GUID: %@
Associated attachment GUID %@ with message GUID: %@
INSERT OR IGNORE INTO message_attachment_join (message_id, attachment_id) VALUES (?, ?)
_IMDServerImportAttachmentWithDataOrPath
"Database": MessageImport - IMDImportAttachmentWithPath - empty guid
"Database": Unable to create directories for %@ when saving attachment %@
"Database": MessageImport - couldn't link/copy attachment from %@ to %@ - %@
"Database": Could not write attachmentData to path %@
Created attachment id %lld with path %@ for guid %@
Already have an attachment for guid %@
CSDBSqliteDatabase *IMDSharedSqliteDatabase()
NSString *IMDSharedSqliteDatabasePath()
Sqlite database path is nil
com.apple.IMDSMSRecordStore.MessagesRecordStore
_MessagesRecordStore
__IMDSharedThreadedRecordStore_block_invoke
CSDBCreateThreadedRecordStore failed
CSDBThreadedRecordStoreRef IMDSharedThreadedRecordStore()
CSDBCreateThreadedRecordStore should not be nil. Did attempt to init: %@
CSDBRecordStoreRef CSDBSharedRecordStore()
void IMDEnsureSharedRecordStoreInitialized()
recordStore is nil, will not initialize
^{__CFString=}8@?0
"Database": Saving database.
"Database": Destroying database.
"Database": Closed database.
store
void _initializeDB(CSDBRecordStoreRef, CSDBSqliteConnection *)
"Database": Create tables...
void _initializeConnection(CSDBSqliteDatabase *, CSDBSqliteConnection *)
"Database": Setting page size.
"Database": Enabling auto vacuum.
"Database": Enabling WAL journal mode.
"Database": Enabling Foreign Key support.
PRAGMA foreign_keys = ON;
"Database": Registering external functions.
delete_attachment_path
before_delete_attachment_path
im_trim
v16@?0@"CSDBThreadedRecordStore"8
"Database": Creating triggers for %p after db init failed: %@
DeleteSequenceNumber
_Bool _databaseVersionCanBeMigrated(CSDBSqliteDatabase *, CSDBSqliteConnection *, int, void *)
"Database": "Database": The current SMS database is v%d.  The current schema version is v%d. Can be migrated: %@
The current SMS database is v%d.  The current schema version is v%d. Can be migrated: %@
CSDBSqliteMigrationContinuation _performMigrationCallback(CSDBSqliteDatabase *, CSDBSqliteConnection *, int, void *)
"Database": "Database": Beginning migration.  The SMS db is currently at v%d, upgrading to v%d.
Beginning migration.  The SMS db is currently at v%d, upgrading to v%d.
Initial Integrity checked success
vacuum
com.apple.MobileSMS.Migration.Migration_Successful
"Database": "Database": Message database migration passed post migrate integrity check
Message database migration passed post migrate integrity check
"Database": "Database": Message database migration failed post migrate integrity check
Message database migration failed post migrate integrity check
com.apple.MobileSMS.Migration.Migration_Failure
"Database": "Database": Migration failed, made it to version: %d: error: %@
Migration failed, made it to version: %d: error: %@
"Database": "Database": Message database migration failed - Database integrity check failed
Message database migration failed - Database integrity check failed
"Database": "Database": Message's DB migration took %f seconds.
Message's DB migration took %f seconds.
BOOL _IMDCheckDatabaseIntegrity(CSDBSqliteDatabase *, CSDBSqliteConnection *)
com.apple.MobileSMS.InitialIntegrityCheck_Failure
REINDEX
Reindexing the DB worked.
com.apple.MobileSMS.Migration.Reindex_Success
"Database": "Database": Database Reindexing the DB failed with SQLite result: %d
Database Reindexing the DB failed with SQLite result: %d
com.apple.MobileSMS.Migration.Reindex_Failure
com.apple.MobileSMS.PostReindex.IntegrityCheck_Failure
Vacuuming DB success
com.apple.MobileSMS.Migration.Vacuum_Success
"Database": "Database": Database Vacuuming failed with SQLite result: %d
Database Vacuuming failed with SQLite result: %d
com.apple.MobileSMS.Migration.Vacuum_Failure
Post Vacuuming integrity check success
com.apple.MobileSMS.Migration.PostVacuum.IntegrityCheck_Success
"Database": "Database": Database Post Vacuuming integrity checked failed failed
Database Post Vacuuming integrity checked failed failed
com.apple.MobileSMS.Migration.PostVacuum.IntegrityCheck_Failure
Integrity checked success
com.apple.MobileSMS.PostReindex.IntegrityCheck_Success
com.apple.MobileSMS.InitialIntegrityCheck_Success
BOOL IMDSqliteDatabaseCheckIntegrity(CSDBSqliteConnection *)
com.apple.MobileSMS.Migration.IntegrityCheck_Failure
BOOL IMDSqlOperationIsQueryIndexed(IMDSqlOperation *, NSArray **)
detail
SCAN TABLE
*** Query is indexed: %@
    query: %@
         : %@
BOOL IMDSqlOperationColumnExistsOnTableWithOperation(IMDSqlOperation *, CFStringRef, CFStringRef)
columnName
PRAGMA table_info(%@);
BOOL IMDSqlOperationAddColumnIfNotExistsToTableWithOperation(IMDSqlOperation *, CFStringRef, CFStringRef, CFStringRef)
typeAndDefault
Found column %@ on %@, no need to add it
ALTER TABLE %@ ADD COLUMN %@ %@;
Adding column %@ to %@ succeeded: %@
BOOL IMDSqlOperationAddColumnIfNotExistsToTable(CFStringRef, CFStringRef, CFStringRef)
uint64_t IMDSqlOperationGetRowCountForTable(CFStringRef)
SELECT count(*) from %@;
CFStringRef IMDSqlOperationGetDatabasePath(IMDSqlOperation *)
main
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDSqlOperationUtilities.m
BOOL IMDDatabaseCopy(NSString *, NSString *, NSError **)
IMDDatabaseCopy
fromPath
toPath
[[fromPath pathExtension] isEqualToString:@"db"]
[[toPath pathExtension] isEqualToString:@"db"]
Unable to open source database at %@ (%d)
Unable to open destination database at %@ (%d)
Unable to replace database at %@ (%d)
uint32_t IMDSqlStatementColumnCount(IMDSqlStatement *)
statement->sql_statement
chat_message_join_idx_message_id_only
chat_message_join(message_id)
chat_message_join_idx_message_id
chat_message_join(message_id, chat_id)
chat_message_join_idx_chat_id
chat_message_join(chat_id)
chat_handle_join_idx_handle_id
chat_handle_join(handle_id)
message_attachment_join_idx_attachment_id
message_attachment_join(attachment_id)
message_attachment_join_idx_message_id
message_attachment_join(message_id)
message_idx_failed
message(is_finished, is_from_me, error)
message_idx_handle
message(handle_id, date)
message_idx_handle_id
message(handle_id)
message_idx_other_handle
message(other_handle)
message_idx_is_read
message(is_read, is_from_me, is_finished)
message_idx_was_downgraded
message(was_downgraded)
message_idx_date
message(date)
message_idx_expire_state
message(expire_state)
message_idx_associated_message
message(associated_message_guid)
chat_idx_is_archived
chat(is_archived)
chat_idx_chat_identifier_service_name
chat(chat_identifier, service_name)
chat_idx_chat_identifier
chat(chat_identifier)
chat_idx_chat_room_name_service_name
chat(room_name, service_name)
CREATE INDEX IF NOT EXISTS %@ ON %@;
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/Source/IMDIndexes.m
BOOL IMDCreateIndexesWithOperation(IMDSqlOperation *, BOOL)
IMDCreateIndexesWithOperation
Create index failed: %@: %@
Created index ok: %@
SELECT name, sql FROM sqlite_master WHERE type = 'index'
sqlite_autoindex
DROP INDEX %@
Dropped index failed: %@: %@
Dropped index: %@
SELECT name FROM sqlite_master WHERE type = 'index';
Dropping unknown index failed: %@: %@
Dropped unknown index: %@
SELECT name, sql FROM sqlite_master WHERE type = 'index';
expected: %@:%@
  actual: %@:%@
Not updating Spotlight index, a NULL chat was passed to _IMDUpdateSpotlightForChatThresholdMessage
Updating the Spotlight index for chat [%lld]
SELECT message_id from chat_message_join WHERE chat_id = ? ORDER BY message_id DESC LIMIT 1 OFFSET ?;
"Database": Found %ld messages guids to remove from spotlight
"Database": Found 0 messages guids to remove from spotlight
xpc_object_t IMDSqlOperationGetXpcRows(IMDSqlOperation *)
xpc_object_t IMDSqlOperationGetXpcRowsForQuery(CFStringRef)
__xpc__event_code__
createdDate
startDate
transferName
utiType
mimeType
transferState
isOutgoing
userInfo
stickerUserInfo
isSticker
attributionInfo
hideAttachment
totalBytes
spath
days
numRecents
chatIdentifiers
services
unformattedID
uncanonicalizedID
messageId
messageGUID
attachmentGUID
associatedMessageGUID
guids
lowerRowID
maxRowID
chatIdentifier
rowID
rowIDs
roomname
only_messages
upToGUID
dateRef
fromMe
body
servicesToSkip
guidsToSkip
searchAfter
chatServices
includeFromMe
replaceID
afterRowID
originalMessageGUID
chatID
fallbackGUID
addresses
dateRead
dateDelivered
datePlayed
accountGUID
handleString
countryCode
itemType
otherHandleID
groupActionType
shareStatus
shareDirection
groupTitle
expireState
messageActionType
associatedMessageType
associatedMessageRangeLocation
associatedMessageRangeLength
balloonBundleID
payloadData
expressiveSendStyleID
timeExpressiveSendPlayed
messageSummaryInfo
messageID
fzGuid
fzDate
fzDateRead
fzDateDelivered
fzDatePlayed
fzBody
fzAttributedBody
fzFlags
fzService
fzAccount
fzAccountGUID
fzSubject
fzError
fzType
timePlayedExpressiveSend
accountID
propertiesData
serviceName
displayName
lastAddressedLocalHandle
accountLogin
groupID
isArchived
isFiltered
hasHadSuccessfulQuery
chatRowID
identifier
chatGUID
winning_guid
losing_guids
backup_path
message_count
target_db_path
sender
file
recipients
isIncoming
source
destination
"Database": __XPCIMDMessageStoreSendXPCMessage got a bogus message to send...bailing!
__xpc_wants_reply__
"Database": __XPCIMDMessageStoreSendXPCMessage has failed %lu time(s)!
"Database": __XPCIMDMessageStoreSendXPCMessage failed to copy the xpc_connection_t!
"Database": __XPCIMDMessageStoreSendXPCMessage failed several consecutive times - sleeping for 1+ the launchd throttle time.
"Database": __XPCIMDMessageStoreSendXPCMessage failed too many times...bailing!
SELECT   c.ROWID, c.guid FROM   chat c WHERE   c.style != 45 
UPDATE   chat SET     chat_identifier = ?,     room_name = ? WHERE     ROWID = ?
wrong number of arguments
Failed to create index pieces_message_index.
Created index pieces_message_index.
CREATE INDEX pieces_message_index ON msg_pieces(message_id);
Updating madrid indices.
Failed to create index madrid_handle_index.
Created index madrid_handle_index.
CREATE INDEX madrid_handle_index ON message(madrid_handle);
Failed to create index madrid_guid_index.
Created index madrid_guid_index.
CREATE INDEX madrid_guid_index ON message(madrid_guid);
Failed to create index madrid_roomname_index.
Created index madrid_roomname_index.
CREATE INDEX madrid_roomname_index ON message(madrid_roomname);
Failed to create index madrid_service_index.
Created index madrid_service_index.
CREATE INDEX madrid_service_index ON message(madrid_service);
Failed to create index madrid_account_index.
Created index madrid_account_index.
CREATE INDEX madrid_account_index ON message(madrid_account);
Failed to create index madrid_url_index.
Created index madrid_url_index.
CREATE INDEX madrid_url_index ON message(madrid_url);
Failed to create index madrid_flags_index.
Created index madrid_flags_index.
CREATE INDEX madrid_flags_index ON message(madrid_flags);
Nuking bogus madrid message indices.
Failed to drop index madrid_handle_index.
Dropped index madrid_handle_index.
DROP INDEX madrid_handle_index;
Failed to drop index madrid_roomname_index.
Dropped index madrid_roomname_index.
DROP INDEX madrid_roomname_index;
Failed to drop index madrid_service_index.
Dropped index madrid_service_index.
DROP INDEX madrid_service_index;
Failed to drop index madrid_account_index.
Dropped index madrid_account_index.
DROP INDEX madrid_account_index;
Failed to drop index madrid_url_index.
Dropped index madrid_url_index.
DROP INDEX madrid_url_index;
Failed to drop index madrid_flags_index.
Dropped index madrid_flags_index.
DROP INDEX madrid_flags_index;
Failed to create index madrid_roomname_service_index.
Created index madrid_roomname_service_index.
CREATE INDEX madrid_roomname_service_index ON message(madrid_roomname, madrid_service);
Failed to create index madrid_handle_service_index.
Created index madrid_handle_service_index.
CREATE INDEX madrid_handle_service_index ON message(madrid_handle, madrid_service);
Failed to create message_group_index.
Created message_group_index
CREATE INDEX message_group_index ON message(group_id, ROWID);
Failed to create message_flags_index.
Created message_flags_index
CREATE INDEX message_flags_index ON message(flags);
Failed to create index madrid_attachment_message_index.
Created index madrid_attachment_message_index.
CREATE INDEX IF NOT EXISTS madrid_attachment_message_index ON madrid_attachment(message_id);
Failed to create index madrid_attachment_guid_index.
Created index madrid_attachment_guid_index.
CREATE INDEX IF NOT EXISTS madrid_attachment_guid_index ON madrid_attachment(attachment_guid);
Failed to create index madrid_attachment_filename_index.
Created index madrid_attachment_filename_index.
CREATE INDEX IF NOT EXISTS madrid_attachment_filename_index ON madrid_attachment(filename);
Failed to create madrid_attachment table
Created madrid_attachment table
CREATE TABLE IF NOT EXISTS madrid_attachment (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, attachment_guid TEXT, created_date INTEGER, start_date INTEGER, filename TEXT, uti_type TEXT, mime_type TEXT, transfer_state INTEGER, is_incoming INTEGER, message_id INTEGER)
Failed to create madrid_chat table
Created madrid_chat table
CREATE TABLE madrid_chat (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, style INTEGER, state INTEGER, account_id TEXT, properties BLOB, chat_identifier TEXT, service_name TEXT, guid TEXT, room_name TEXT, account_login TEXT, participants BLOB)
Failed to create index madrid_chat_style_index.
Created index madrid_chat_style_index.
CREATE INDEX IF NOT EXISTS madrid_chat_style_index ON madrid_chat(style)
Failed to create index madrid_chat_state_index.
Created index madrid_chat_state_index.
CREATE INDEX IF NOT EXISTS madrid_chat_state_index ON madrid_chat(state)
Failed to create index madrid_chat_account_id_index.
Created index madrid_chat_account_id_index.
CREATE INDEX IF NOT EXISTS madrid_chat_account_id_index ON madrid_chat(account_id)
Failed to create index madrid_chat_chat_identifier_index.
Created index madrid_chat_chat_identifier_index.
CREATE INDEX IF NOT EXISTS madrid_chat_chat_identifier_index ON madrid_chat(chat_identifier)
Failed to create index madrid_chat_service_name_index.
Created index madrid_chat_service_name_index.
CREATE INDEX IF NOT EXISTS madrid_chat_service_name_index ON madrid_chat(service_name)
Failed to create index madrid_chat_guid_index.
Created index madrid_chat_guid_index.
CREATE INDEX IF NOT EXISTS madrid_chat_guid_index ON madrid_chat(guid)
Failed to create index madrid_chat_room_name_index.
Created index madrid_chat_room_name_index.
CREATE INDEX IF NOT EXISTS madrid_chat_room_name_index ON madrid_chat(room_name)
Failed to create index madrid_chat_account_login_index.
Created index madrid_chat_account_login_index.
CREATE INDEX IF NOT EXISTS madrid_chat_account_login_index ON madrid_chat(account_login)
Failed to drop table: %@
Successfully dropped table: %@
Failed to drop index: %@
Successfully dropped index: %@
DROP INDEX IF EXISTS %@;
Failed to create index: %@
Successfully created index: %@
Failed to create table msg_pieces.
Created table msg_pieces.
CREATE TABLE IF NOT EXISTS msg_pieces (ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, message_id INTEGER, data BLOB, part_id INTEGER, preview_part INTEGER, content_type TEXT, height INTEGER, version INTEGER, flags INTEGER, content_id TEXT, content_loc TEXT, headers BLOB);
Failed to add column subject.
Added column subject.
ALTER TABLE message ADD COLUMN subject TEXT
Failed to add column country.
Added column country.
ALTER TABLE message ADD COLUMN country TEXT
Failed to add column headers.
Added column headers.
ALTER TABLE message ADD COLUMN headers BLOB
Failed to add column recipients.
Added column recipients.
ALTER TABLE message ADD COLUMN recipients BLOB
Failed to add column hash.
Added column hash.
ALTER TABLE msg_group ADD COLUMN hash INTEGER
Failed to add index hash_index.
Added index hash_index.
CREATE INDEX hash_index ON msg_group(hash)
ALTER TABLE group_member ADD COLUMN country TEXT
Failed to add column content_id.
Added column content_id.
ALTER TABLE msg_pieces ADD COLUMN content_id TEXT;
Failed to add column content_loc.
Added column content_loc.
ALTER TABLE msg_pieces ADD COLUMN content_loc TEXT;
ALTER TABLE msg_pieces ADD COLUMN headers BLOB;
Failed to add column madrid_attributedBody.
Added column madrid_attributedBody.
ALTER TABLE message ADD COLUMN madrid_attributedBody BLOB
Failed to add column madrid_handle.
Added column madrid_handle.
ALTER TABLE message ADD COLUMN madrid_handle TEXT
Failed to add column madrid_version.
Added column madrid_version.
ALTER TABLE message ADD COLUMN madrid_version INTEGER
Failed to add column madrid_guid.
Added column madrid_guid.
ALTER TABLE message ADD COLUMN madrid_guid TEXT
Failed to add column madrid_type.
Added column madrid_type.
ALTER TABLE message ADD COLUMN madrid_type INTEGER
Failed to add column madrid_roomname.
Added column madrid_roomname.
ALTER TABLE message ADD COLUMN madrid_roomname TEXT
Failed to add column madrid_service.
Added column madrid_service.
ALTER TABLE message ADD COLUMN madrid_service TEXT
Failed to add column madrid_account.
Added column madrid_account.
ALTER TABLE message ADD COLUMN madrid_account TEXT
Failed to add column madrid_flags.
Added column madrid_flags.
ALTER TABLE message ADD COLUMN madrid_flags INTEGER
Failed to add column madrid_attachmentInfo.
Added column madrid_attachmentInfo.
ALTER TABLE message ADD COLUMN madrid_attachmentInfo BLOB;
Failed to add column madrid_url.
Added column madrid_url.
ALTER TABLE message ADD COLUMN madrid_url TEXT
Failed to add column madrid_error.
Added column madrid_error.
ALTER TABLE message ADD COLUMN madrid_error INTEGER
Failed to add column is_madrid.
Added column is_madrid.
ALTER TABLE message ADD COLUMN is_madrid INTEGER;
"Database": "Database": %@ SQLiteResult: %d SQLite Message: %s
%@ SQLiteResult: %d SQLite Message: %s
"Database": "Database": No migration block to execute!
No migration block to execute!
Failed to add column read.
Added column read.
ALTER TABLE message ADD COLUMN read INTEGER
Failed to update flags.
Updated flags.
UPDATE message SET read = ((flags >> 1) & 1)
Failed to create index update message_groupid_read_index.
Created index message_groupid_read_index.
CREATE INDEX message_groupid_read_index ON message(group_id, read)
Create tables...
CREATE TABLE IF NOT EXISTS handle ( ROWID INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, id TEXT NOT NULL, country TEXT, service TEXT NOT NULL, uncanonicalized_id TEXT, UNIQUE (id, service) )
Table for handle was created successfully.
Failed to create table for handle. SQLiteError: %d
BOOL IMDLegacyMigrator(IMDSqlOperation *, int)
"Database": "Database": Migration unsupported.  The SMS db is currently at v%d, cannot upgrade to v%d.
Migration unsupported.  The SMS db is currently at v%d, cannot upgrade to v%d.
read
Updating DB to sort by ROWID instead of date.
MobileSMS DB Migration failed while dropping message_group_index.
Successfully dropped index message_group_index.
DROP INDEX message_group_index;
MobileSMS DB Migration failed while creating message_group_index.
Created index message_group_index
Updating DB to support madrid.
Updating DB from version 12 to current.
MobileSMS DB Migration failed adding madrid_error column to message table.
Added madrid_error column.
ALTER TABLE message ADD COLUMN madrid_error INTEGER;
MobileSMS DB Migration failed adding is_madrid column to message table.
Added column is_madrid
MobileSMS DB Migration failed creating index madrid_flags_index.
Added index madrid_flags_index.
Updating DB from version 13 to current.
MobileSMS DB Migration failed adding column madrid_date_read.
Added column madrid_date_read.
ALTER TABLE message ADD COLUMN madrid_date_read INTEGER;
MobileSMS DB Migration failed adding column madrid_date_delivered.
Added column madrid_date_delivered.
ALTER TABLE message ADD COLUMN madrid_date_delivered INTEGER;
Updating DB from version 14 to current.
Adding index for group_id on group_member
MobileSMS DB Migration failed adding index group_id_index
Added index group_id_index
CREATE INDEX group_id_index ON group_member(group_id);
Adding support for Chats and Participants.
Ensuring sanity of is_madrid column.
MobileSMS DB Migration failed updating the values for is_madrid.
Updated values for is_madrid.
UPDATE message SET is_madrid = 0 WHERE is_madrid IS NULL;
Cleaning message indices for iMessage.
Adding column for iMessage Account GUID
MobileSMS DB Migration failed adding column madrid_account_guid.
Added column madrid_account_guid.
ALTER TABLE message ADD COLUMN madrid_account_guid TEXT;
Moving old tables to *_legacy and adding tables for the new schema.
MobileSMS DB migration failed to rename group_member table.
Renamed group_member table.
ALTER TABLE group_member RENAME TO group_member_legacy;
MobileSMS DB migration failed to rename madrid_attachment table.
Renamed madrid_attachment table.
ALTER TABLE madrid_attachment RENAME TO madrid_attachment_legacy;
MobileSMS DB migration failed to rename madrid_chat table.
Renamed madrid_chat table.
ALTER TABLE madrid_chat RENAME TO madrid_chat_legacy;
Renamed message table.
ALTER TABLE message RENAME TO message_legacy;
MobileSMS DB migration failed to rename msg_group table.
Renamed msg_group table.
ALTER TABLE msg_group RENAME TO msg_group_legacy;
MobileSMS DB migration failed to rename msg_pieces table.
Renamed msg_pieces table.
ALTER TABLE msg_pieces RENAME TO msg_pieces_legacy;
SELECT is_archived FROM chat
The is_archived column already exists on chat, skipping this step.
MobileSMS DB migration failed to add column is_archived to the chat table.
Added is_archived column to the chat table.
ALTER TABLE chat ADD COLUMN is_archived DEFAULT 0
PRAGMA vacuum
SQLite result was %d
Fixing missing text in group field
SELECT was_data_detected FROM message
The was_data_detected column already exists on message, skipping this step.
MobileSMS DB migration failed to add column was_data_detected to the message table.
Added was_data_detected column to the message table.
ALTER TABLE message ADD COLUMN was_data_detected INTEGER DEFAULT 0
SELECT last_addressed_handle FROM chat
The last_addressed_handle column already exists on chat, skipping this step.
MobileSMS DB migration failed to add column last_addressed_handle to the chat table.
Added last_addressed_handle column to the chat table.
ALTER TABLE chat ADD COLUMN last_addressed_handle TEXT
MobileSMS DB migration failed to delete V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP.
Dropped unneeded V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP.
SELECT was_deduplicated FROM message
The was_deduplicated column already exists on message, skipping this step.
MobileSMS DB migration failed to add column was_deduplicated to the message table.
Added was_deduplicated column to the message table.
ALTER TABLE message ADD COLUMN was_deduplicated INTEGER DEFAULT 0
CREATE INDEX message_idx_failed ON message(is_finished, is_from_me, error)
CREATE INDEX IF NOT EXISTS message_idx_handle ON message(handle_id, date);
chat_idx_identifier
CREATE INDEX IF NOT EXISTS chat_idx_identifier ON chat(chat_identifier)
chat_idx_room_name
CREATE INDEX IF NOT EXISTS chat_idx_room_name ON chat(room_name)
CREATE INDEX IF NOT EXISTS message_idx_was_downgraded ON message(was_downgraded);
CREATE INDEX IF NOT EXISTS chat_message_join_idx_message_id ON chat_message_join(message_id, chat_id)
madrid_attachment_legacy
group_member_legacy
madrid_chat_legacy
message_legacy
msg_group_legacy
msg_pieces_legacy
Fixing busted chat identifiers for group chats
Adding attachment is_outgoing column
SELECT is_outgoing FROM attachment
The is_outgoing column already exists on attachment, skipping this step.
MobileSMS DB migration failed to add column is_outgoing to the attachment table.
Added is_outgoing column to the attachment table.
ALTER TABLE attachment ADD COLUMN is_outgoing INTEGER DEFAULT 0
Fixing up uncanonicalized identifiers that had previously been incorrectly treated as canonicalized.
Fixing up uncanonicalized handle identifiers that failed to migrate due to conflicts.
Adding attachment user_info column
SELECT user_info FROM attachment
The user_info column already exists on attachment, skipping this step.
MobileSMS DB migration failed to add column user_info to the attachment table.
Added user_info column to the attachment table.
ALTER TABLE attachment ADD COLUMN user_info BLOB
Adding attachment transfer_name column
SELECT transfer_name FROM attachment
The transfer_name column already exists on attachment, skipping this step.
MobileSMS DB migration failed to add column transfer_name to the attachment table.
Added transfer_name column to the attachment table.
ALTER TABLE attachment ADD COLUMN transfer_name TEXT
Adding chat display_name column
SELECT display_name FROM chat
The display_name column already exists on chat, skipping this step.
MobileSMS DB migration failed to add column display_name to the display_name table.
Added display_name column to the display_name table.
ALTER TABLE chat ADD COLUMN display_name TEXT
Adding attachment total_bytes column
SELECT total_bytes FROM attachment
MobileSMS DB migration failed to add column total_bytes to the attachment table.
Added total_bytes column to the attachment table.
ALTER TABLE attachment ADD COLUMN total_bytes INTEGER DEFAULT -1
Purging orphaned messages
Purged orphaned messages failed :-(.
Purged orphaned messages.
Adding message is_audio_message, is_played, and date_played column
SELECT is_audio_message, is_played, date_played FROM message
The is_audio_message, is_played, and date_played columns already exist on message, skipping this step.
MobileSMS DB migration failed to add column is_audio_message to the message table.
Added is_audio_message column to the message table.
ALTER TABLE message ADD COLUMN is_audio_message INTEGER DEFAULT 0
MobileSMS DB migration failed to add column is_played to the message table.
Added is_played column to the message table.
ALTER TABLE message ADD COLUMN is_played INTEGER DEFAULT 0
MobileSMS DB migration failed to add column date_played to the message table.
Added date_played column to the message table.
ALTER TABLE message ADD COLUMN date_played INTEGER
Purging orphaned messages - again
Adding message item_type, other_handle, group_title, group_action_type, share_status, share_direction
SELECT item_type, other_handle, group_title, group_action_type, share_status, share_direction FROM message
The item_type, other_handle, group_title, group_action_type, share_status, share_direction columns already exist on message, skipping this step.
MobileSMS DB migration failed to add column item_type to the message table.
Added item_type column to the message table.
ALTER TABLE message ADD COLUMN item_type INTEGER DEFAULT 0
MobileSMS DB migration failed to add column other_handle to the message table.
Added other_handle column to the message table.
ALTER TABLE message ADD COLUMN other_handle INTEGER DEFAULT -1
MobileSMS DB migration failed to add column group_title to the message table.
Added group_title column to the message table.
ALTER TABLE message ADD COLUMN group_title TEXT
MobileSMS DB migration failed to add column group_action_type to the message table.
Added group_action_type column to the message table.
ALTER TABLE message ADD COLUMN group_action_type INTEGER DEFAULT 0
MobileSMS DB migration failed to add column share_status to the message table.
Added share_status column to the message table.
ALTER TABLE message ADD COLUMN share_status INTEGER
MobileSMS DB migration failed to add column share_direction to the message table.
Added share_direction column to the message table.
ALTER TABLE message ADD COLUMN share_direction INTEGER
SELECT group_id FROM chat
The group_id columns already exist on chat, skipping this step.
MobileSMS DB migration failed to add column group_id to the chat table.
Added group_id column to the chat table.
ALTER TABLE chat ADD COLUMN group_id TEXT
Adding message is_expirable, expire_state, and message_action_type column
SELECT is_expirable, expire_state, message_action_type FROM message LIMIT 1
The is_expirable, expire_state, and message_action_type columns already exist on message, skipping this step.
MobileSMS DB migration failed to add column is_expirable to the message table.
Added is_expirable column to the message table.
ALTER TABLE message ADD COLUMN is_expirable INTEGER DEFAULT 0
MobileSMS DB migration failed to add column expire_state to the message table.
Added expire_state column to the message table.
ALTER TABLE message ADD COLUMN expire_state INTEGER DEFAULT 0
MobileSMS DB migration failed to add column message_action_type to the message table.
Added message_action_type column to the message table.
ALTER TABLE message ADD COLUMN message_action_type INTEGER DEFAULT 0
Adding message message_source column
SELECT message_source FROM message LIMIT 1
The message_source column already exists on message, skipping this step.
MobileSMS DB migration failed to add column message_source to the message table.
Added message_source column to the message table.
ALTER TABLE message ADD COLUMN message_source INTEGER DEFAULT 0
"Database": "Database": Migration failed, made it to version: %d
Migration failed, made it to version: %d
Join table for Chat <--> Message was created successfully.
Failed to create join table for Chat <--> Message. SQLiteError: %d
CREATE TABLE IF NOT EXISTS chat_handle_join ( chat_id INTEGER REFERENCES chat (ROWID) ON DELETE CASCADE, handle_id INTEGER REFERENCES handle (ROWID) ON DELETE CASCADE, UNIQUE(chat_id, handle_id));
Join table for Chat <--> Handle was created successfully.
Failed to create join table for Chat <--> Handle. SQLiteError: %d
Join table for Message <--> Attachment was created successfully.
Failed to create join table for Message <--> Attachment. SQLiteError: %d
INTEGER DEFAULT 0
INTEGER DEFAULT 1
STRING DEFAULT NULL
BLOB
BLOB DEFAULT NULL
UPDATE message SET message_summary_info = NULL WHERE message_summary_info IS NOT NULL;
SELECT count(message_id) FROM     (SELECT ocj.message_id FROM chat_message_join ocj WHERE ocj.chat_id IN         (SELECT cj.chat_id FROM chat_message_join cj WHERE cj.message_id = ?)     ORDER BY ocj.message_id DESC LIMIT ?) WHERE message_id = ? 
IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@
Cannot unassociate attachment from empty message GUID
Cannot unassociate attachment with empty attachment GUID
DELETE FROM message_attachment_join WHERE   ROWID IN (     SELECT       j.ROWID     FROM       message_attachment_join j     INNER JOIN message m ON j.message_id = m.ROWID     INNER JOIN attachment a ON j.attachment_id = a.ROWID     WHERE       m.guid = ?       AND a.guid = ?   ) 
DELETE FROM message WHERE message.ROWID NOT IN (SELECT message_id from chat_message_join);
Orphaned attachment cleanup complete
Unable to associate message and attachment, empty attachment GUID.
Unable to associate message and attachment, empty message GUID.
IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@
IMDMessageRecordCopyMessagesForAssociatedGUID [%@]
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE associated_message_guid = ? ORDER BY message.ROWID ASC;
IMDMessageRecordCopyMessagesForGUIDs [%@]
__IMDMessageRecordCopyMessagesForGUIDs_block_invoke
IMDMessageRecordCopyMessageForGUID [%@]
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE guid = ? ORDER BY message.ROWID ASC;
IMDMessageRecordCopyLastReadMessageForChatGUID [%@]
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m INNER JOIN chat_message_join j ON m.ROWID = j.message_id INNER JOIN chat c ON c.ROWID = j.chat_id WHERE c.chat_identifier = ? AND m.is_read == 1 AND is_from_me == 0 AND is_finished == 1 ORDER BY m.ROWID DESC LIMIT 1
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE error == 0 AND is_from_me == 0 AND is_finished == 1 ORDER BY ROWID DESC LIMIT 1;
results from last received: %@
IMDMessageRecordCopyMessageForRowID [%lld]
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE ROWID = ? ORDER BY message.ROWID ASC;
dictionary_result
newMessages
readMessageIDs
lastFailedRowID
B24@?0r*8@"NSObject<OS_xpc_object>"16
IMDMessageRecordCopyMessageForGUIDUnlocked failed to get results
/BuildRoot/Library/Caches/com.apple.xbs/Sources/IMCore_Sim/IMCore-1757.31.9/IMDPersistence/IMDMessageQueries.m
BOOL IMDMessageRecordDeleteBatchOfDeletedMessageGuids(int, NSArray **, NSError **)
IMDMessageRecordDeleteBatchOfDeletedMessageGuids
batchAmount > 0
rowIDs.count == guids.count
IMDMessageRecordDeleteMessagesForGUIDs %@
IMDMessageRecordDeleteMessagesForGUIDs has no GUIDs to delete.
IMDSelectMessagesForDeletionAfterDaysWithQuery %lld
SELECT guid from message WHERE date < ?;
SELECT guid from message WHERE date < ? LIMIT 100;
SELECT * from deleted_messages ORDER BY ROWID ASC LIMIT ?;
SELECT * from deleted_messages ORDER BY ROWID ASC;
BOOL _IMDDeleteDeletedMessagesWithRangeOfRowIDs(IMDSqlOperation *, uint64_t, uint64_t)
_IMDDeleteDeletedMessagesWithRangeOfRowIDs
lastRowID >= firstRowID
DELETE FROM deleted_messages where ROWID >= ? AND ROWID <= ?;
BOOL _IMDDeleteDeletedMessagesWithArrayOfRowIDs(IMDSqlOperation *, NSArray *)
_IMDDeleteDeletedMessagesWithArrayOfRowIDs
"Database": IMDMessageRecordDeleteMessagesOlderThanDays %lld
DELETE from message WHERE date < ?;
"Database": No roomname or service specified. No rows will be returned.
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m INNER JOIN chat_message_join j ON   m.ROWID = j.message_id INNER JOIN chat c ON   c.ROWID = j.chat_id WHERE   c.room_name = ?   AND c.service_name = ? ORDER BY   m.ROWID DESC LIMIT ?
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWID = ch.chat_id WHERE   ch.handle_id = ?   AND c.room_name IS NULL ORDER BY m.ROWID DESC LIMIT ?
CFArrayRef IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit(CFArrayRef, CFArrayRef, CFStringRef, Boolean, int64_t)
results
__IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit_block_invoke
__IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit_block_invoke_3
history query:
rowID == 0
__IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit_block_invoke_4
history query: rowID should be > 0
"Database": history query got %lu rows
__IMDMessageRecordCopyMessagesWithChatIdentifiersOnServicesUpToGUIDOrLimit_block_invoke.321
"Database": history query: IMDP client got at least one message: %@
"Database": IMDP client got null array_result back: %@
SELECT m.guid FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)
"Database": No handles or services specified. Or handleCount != serviceCount. Or guidCount == 0. No rows will be returned.
"Database": Deleted %ld messages in %f seconds on %ld chats and %ld services
SELECT   m.guid FROM   message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE   cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)   AND m.ROWID <= (SELECT m2.ROWID FROM message m2 WHERE m2.guid = ?)   AND m.is_read = 0   AND m.is_from_me = ? 
SELECT   m.guid FROM   message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE   cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)   AND m.is_read = 0   AND m.is_from_me = ? 
UPDATE   message SET   is_read = 1,   date_read = ?   %s WHERE   guid = ? 
, is_delivered = 1 
"Database": No handle or service specified. No rows will be returned.
IMDMessageRecordRef IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDs(CFStringRef, CFStringRef, CFArrayRef, CFArrayRef, NSTimeInterval)
IMDMessageRecordCopyUndeliveredOneToOneMadridMessages
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m WHERE   m.cache_roomnames IS NULL   AND m.service = '%@'   AND m.is_sent = 1   AND m.is_delivered = 0   AND m.was_downgraded = 0   AND m.item_type == 0   AND m.ROWID > ? ORDER BY m.date ASC
IMDMessageRecordCopyExpiredOrExpiringiMessages
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m WHERE   (m.expire_state = %d OR m.expire_state = %d)  AND m.item_type == 0   AND m.ROWID > ? ORDER BY m.date ASC
IMDMessageRecordCopyUnsentUnfailedMessages
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m WHERE   m.is_from_me = 1   AND m.is_sent = 0   AND m.error = 0   AND m.item_type = 0   AND m.ROWID > ? ORDER BY m.date ASC
IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID [%@]
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE subject = ?   AND item_type = ? ORDER BY message.ROWID ASC;
SELECT COUNT(1) FROM (SELECT m.rowid , cm.message_id FROM message m INNER JOIN chat_message_join cm ON cm.message_id = m.rowid WHERE m.is_read == 0 and m.is_finished == 1 and m.is_from_me == 0 and m.item_type == 0 and m.is_system_message == 0)
sint64_result
"Database": Can't determine unread count when GUID is NULL or empty.
SELECT   COUNT(m.ROWID) FROM   message m INNER JOIN chat_message_join   cm ON m.ROWID = cm.message_id WHERE   cm.chat_id = ?   AND m.item_type == 0   AND m.is_read == 0   AND m.is_from_me == 0 
"Database": Can't determine unplayed audio messages GUID is NULL or empty.
SELECT   m.ROWID FROM   message m WHERE   m.error != 0   AND m.is_from_me == 1   AND m.is_finished == 1  ORDER BY ROWID DESC LIMIT 1
Marking all unsent and failed messages as sent.
UPDATE message SET error = ? WHERE (is_sent = 0 AND is_from_me = 1 AND error = 0)
Row ID is %lld for message with guid [%@]
IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingHandleOnService
IMDMessageRecordCopyAndMarkAsReadMessagesMatchingRoomnameOnService
SELECT seq FROM SQLITE_SEQUENCE WHERE name = 'message';
int64_result
IMDMessageRecordCopyMessagesBetweenRowIDs [%lld:%lld]
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE rowID >= ?   AND rowID <= ?   AND item_type == 0 ORDER BY message.ROWID ASC;
"Database": The RowID is out of bounds.  We were asked for rows after [%lld] which exceeds the current sequence number [%lld]
IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID limit: %lld  rowID: %lld
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m  INNER JOIN chat_message_join cm ON cm.message_id = m.rowid  WHERE m.ROWID > ?  AND m.is_read == 0  AND m.is_finished == 1  AND m.is_from_me == 0  AND m.item_type == 0  AND m.is_system_message == 0  ORDER BY m.ROWID DESC LIMIT ?;
IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %ld rows
IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %zu rows from XPC
IMDMessageRecordCopyNewestUnreadIncomingMessagesToLimitAfterRowID got back %d rows after deserialization
Asked to load up to oldest unread or fallback message: %@
SELECT * FROM (  SELECT ROWID from (      SELECT m1.ROWID FROM message m1 WHERE m1.GUID = ?    UNION      SELECT m2.ROWID FROM message m2        INNER JOIN chat_message_join cm ON          m2.ROWID = cm.message_id        WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)        AND m2.is_read = 0        AND m2.item_type = 0        AND m2.is_from_me = 0  )) ORDER BY ROWID ASC LIMIT 1;
Query failed to look up message for guid: %@ error: %d
"Database": Final adjusted row ID: %lld
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id WHERE cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND m.ROWID >= ? AND m.item_type == 0 ORDER BY cm.chat_id, cm.message_id DESC LIMIT ?;
IMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterRowID limit: %lld  rowID: %lld
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE ROWID > ?   AND item_type == 0   AND error != 0   AND is_from_me = 1   AND is_finished = 1 ORDER BY ROWID DESC LIMIT ?;
IMDMessageRecordCopyMessagesDataDetectionResults limit: %lld  rowID: %lld
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE ROWID > ?   AND item_type == 0   AND has_dd_results == 1 ORDER BY ROWID DESC LIMIT ?;
"Database": No addresses provided to IMDMessageRecordCopyMostRecentUseageOfAddresses().
"Database": No addresses to lookup, no results for you.
"Database": Matching addresses (in order) are %@
CFArrayRef IMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender(NSString *, NSString *, NSError **)
IMDMessageRecordCopyArrayOfAssociatedMessagesForMessageGUIDFromSender
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE (associated_message_guid = ?) AND (handle_id = (SELECT ROWID FROM handle where id = ?));
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message WHERE ((associated_message_guid = ?) AND (is_from_me = 1));
error_description
"Database": Found %ld associated messages for messageGUID: %@, forSender: %@
SELECT m.ROWID, m.guid, m.text, m.replace, m.service_center, m.handle_id, m.subject, m.country, m.attributedBody, m.version, m.type, m.service, m.account, m.account_guid, m.error, m.date, m.date_read, m.date_delivered, m.is_delivered, m.is_finished, m.is_emote, m.is_from_me, m.is_empty, m.is_delayed, m.is_auto_reply, m.is_prepared, m.is_read, m.is_system_message, m.is_sent, m.has_dd_results, m.is_service_message, m.is_forward, m.was_downgraded, m.is_archive, m.cache_has_attachments, m.cache_roomnames, m.was_data_detected, m.was_deduplicated, m.is_audio_message, m.is_played, m.date_played, m.item_type, m.other_handle, m.group_title, m.group_action_type, m.share_status, m.share_direction, m.is_expirable, m.expire_state, m.message_action_type, m.message_source, m.associated_message_guid, m.associated_message_type, m.balloon_bundle_id, m.payload_data, m.expressive_send_style_id, m.associated_message_range_location, m.associated_message_range_length, m.time_expressive_send_played, m.message_summary_info FROM message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWID = ch.chat_id WHERE   ch.handle_id = ?   AND c.room_name IS NULL   AND m.replace = ? ORDER BY m.ROWID DESC LIMIT ?
IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID
SELECT   m.guid FROM   message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id WHERE   m.is_from_me = 0   AND m.is_played = 0   AND m.is_audio_message = 1   AND c.guid = ? ORDER BY m.ROWID ASC
IMDMessageRecordCopyAndMarkAsReadMessagesMatchingHandleOnService
SELECT   m.guid FROM   message m INNER JOIN chat_message_join cm ON   m.ROWID = cm.message_id INNER JOIN chat c ON   c.ROWID = cm.chat_id INNER JOIN chat_handle_join ch ON   c.ROWID = ch.chat_id WHERE   c.room_name IS NULL   AND ch.handle_id = ?   AND m.is_read = 0   AND m.is_from_me = ?   AND m.is_sent = ?   %s ORDER BY m.ROWID ASC
 AND m.ROWID <= ? 
UPDATE   message SET   is_read = 1,   date_read = ?   %s WHERE ROWID IN (   SELECT     m.ROWID   FROM     message m   INNER JOIN chat_message_join cm ON     m.ROWID = cm.message_id   INNER JOIN chat c ON     c.ROWID = cm.chat_id   INNER JOIN chat_handle_join ch ON     c.ROWID = ch.chat_id   WHERE     c.room_name IS NULL     AND ch.handle_id = ?     AND m.is_read = 0     AND m.is_from_me = ?     AND m.is_sent = ?     %s ) 
Query results were null or empty bulk reading messages for %@ on %@
SELECT   m.guid FROM   message m INNER JOIN chat_message_join j ON   m.ROWID = j.message_id INNER JOIN chat c ON   c.ROWID = j.chat_id WHERE   c.room_name = ?   AND c.service_name = ?   AND m.is_read = 0   AND m.is_from_me = ?   AND m.is_sent = ?   %s ORDER BY m.ROWID ASC
UPDATE   message SET   is_read = 1,   date_read = ?   %s WHERE ROWID IN (   SELECT     m.ROWID   FROM     message m   INNER JOIN chat_message_join j ON     m.ROWID = j.message_id   INNER JOIN chat c ON     c.ROWID = j.chat_id   WHERE     c.room_name = ?     AND c.service_name = ?     AND m.is_read = 0     AND m.is_from_me = ?     AND m.is_sent = ?     %s   ORDER BY m.ROWID ASC) 
Attempted to create IMMessageItem from NULL IMDMessageRecordRef.
Exception caught creating IMMessageItem from IMDMessageRecordRef: %@
ID: %@
Account: %@
AccountID: %@
Service Name: %@
Service: %@  Account: %@ AccountID: %@
Creating group title item with GUID: %@   title: %@   handle: %@   date: %@  otherHandle: %@   serviceName: %@
Creating group action item with GUID: %@   action: %d   handle: %@   date: %@  otherHandle: %@   serviceName: %@
Creating participant change item with GUID: %@   action: %d   handle: %@   date: %@  otherHandle: %@   serviceName: %@
Creating location status update with GUID: %@   status: %@   direction: %@   handle: %@   date: %@  otherHandle: %@   serviceName: %@
start
stop
incoming
outgoing
Creating message action item with GUID: %@   action: %d   handle: %@   date: %@  otherHandle: %@   serviceName: %@
Unarchived incoming message with empty sender, ignoring this (IMDMessageRecordRef: %@  IMMessageItem: %@)
Unarchived message with empty sender, ignoring this (IMDMessageRecordRef: %@  IMMessageItem: %@)
Unarchived message with empty guid, ignoring this (IMDMessageRecordRef: %@  IMMessageItem: %@)
DELETE FROM message WHERE (guid = ?
 OR guid = ?
SELECT message_id FROM chat_message_join cm WHERE chat_id = (SELECT c.rowid FROM chat c WHERE (c.chat_identifier = ? AND c.service_name = ?) 
) ORDER BY cm.message_id DESC LIMIT ?;
) ORDER BY cm.message_id DESC;
DELETE
SELECT *
guidCount
CFStringRef IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery1(int)
"Database": ASSERTION FAILED: Conditions are unexpectedly equal: %s == %s in "%s" at line %d [%@]
theQuery
DELETE FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id IN (SELECT m.ROWID FROM message m WHERE m.guid IN (?
DELETE FROM chat_message_join WHERE chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?) AND message_id = (SELECT m.ROWID FROM message m WHERE m.guid = ?);
CFStringRef IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery2(int)
cleanOrphanedMessageString
DELETE FROM message WHERE (     SELECT 1 FROM chat_message_join     WHERE message_id = message.rowid     LIMIT 1 ) IS NULL AND message.guid 
CFStringRef IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServicesQuery3(int)
updateCacheRoomnamesString
UPDATE message SET cache_roomnames = (SELECT group_concat(c.room_name)                    FROM chat c INNER JOIN chat_message_join j                    ON c.ROWID = j.chat_id                    WHERE j.message_id = message.ROWID) WHERE message.guid 
AND h.service NOT %@
AND m.guid NOT %@
SELECT   MAX(m.ROWID) FROM   message m WHERE  (   %@  m.handle_id IN (    SELECT       h.rowid     FROM       handle h     WHERE       h.id = ?       %@)  )   AND m.date >= ?   AND m.was_deduplicated = 0   AND m.cache_has_attachments = 0   %@   AND im_trim(m.text) = im_trim(?)   AND m.ROWID IN (     SELECT        cm.message_id      FROM        chat_message_join cm      WHERE        m.ROWID = cm.message_id        AND cm.chat_id = (SELECT c.rowid FROM chat c WHERE c.chat_identifier = ? AND c.service_name = ?)   ) 
m.is_from_me = 1 OR
m.is_from_me = 0 AND
SELECT   MAX(m.ROWID) FROM   message m WHERE   m.handle_id IN (    SELECT       h.rowid     FROM       handle h     WHERE       h.id = ?       %@  )  AND m.date >= ?   AND m.is_from_me = 0   AND m.was_deduplicated = 0   AND m.cache_roomnames IS NULL   %@   AND im_trim(m.text) = im_trim(?) 
CFStringRef IMDMessageRecordCopyMessageMatchingBodyStringWithHandleSkippingServicesSkippingGUIDsQuery(int, int)
CFStringRef IMDMessageRecordCopyMostRecentUseageOfAddressesQuery(int)
SELECT   MAX(cm.message_id), h.ID FROM chat_message_join cm   INNER JOIN chat_handle_join j     ON cm.chat_id = j.chat_id       INNER JOIN handle h         ON h.ROWID = j.handle_id WHERE h.ID 
 GROUP BY h.ID 
 ORDER BY cm.message_id DESC 
CFStringRef IMDMessageRecordCopyMessagesForGUIDsQuery(int)
SELECT ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info FROM message 
WHERE guid 
ORDER BY message.ROWID ASC;
rowCount
CFStringRef IMDCreateDeleteDeletedMessagesGuidsQuery(int)
DELETE from deleted_messages where (ROWID = ?
 OR ROWID = ?
CFStringRef _IMDCreateQueryRemoveMessagesFromChatMessageJoinWithArrayOfMessageGuids(CFArrayRef, NSArray **)
spotlightMessageGuids
DELETE FROM chat_message_join WHERE message_id = ?
message_guid=%@
 OR message_id = ?
SELECT count(rowid) FROM Attachment where guid = ?
SELECT ROWID, guid, created_date, start_date, filename, uti, mime_type, transfer_state, is_outgoing, user_info, transfer_name, total_bytes, is_sticker, sticker_user_info, attribution_info, hide_attachment FROM attachment WHERE guid = ? ORDER BY ROWID DESC;
"Database": There appears to be more than one attachment with GUID [%@]
SELECT sticker_user_info, filename, created_date, attribution_info FROM attachment a INNER JOIN message_attachment_join ma ON a.ROWID = ma.attachment_id INNER JOIN message m ON ma.message_id = m.ROWID WHERE a.sticker_user_info IS NOT NULL AND m.is_from_me=1 AND a.transfer_state=5 GROUP BY filename ORDER BY a.ROWID DESC LIMIT ?;
accessibility_string
Invalid parameter to IMDAttachmentCountAttachmentsWithStickerPath stickerCachePath %@
SELECT ROWID, guid, created_date, start_date, filename, uti, mime_type, transfer_state, is_outgoing, user_info, transfer_name, total_bytes, is_sticker, sticker_user_info, attribution_info, hide_attachment FROM attachment WHERE filename LIKE ?;
StickerAttachmentCount
There appears to be more than one sticker with sticker path [%@]
SELECT filename from attachment where mime_type in ("image/jpeg", "image/png", "image/gif")  order by ROWID DESC LIMIT ?
SELECT guid from attachment order by ROWID DESC LIMIT ?
Previews
Beginning iteration of _IMDAttachmentRecordDeleteAttachmentsExceptPreviewsToKeep attachments
_IMDAttachmentRecordDeleteAttachmentsExceptPreviewsToKeep File cleanse ended
DELETE FROM attachment WHERE created_date < ?;
SELECT c.rowid FROM chat c WHERE (c.chat_identifier = ? AND c.service_name = ?)
 OR (c.chat_identifier = ? AND c.service_name = ?)
SELECT a.filename, a.guid, a.is_sticker, a.created_date FROM attachment a INNER JOIN message_attachment_join ma ON   a.ROWID = ma.attachment_id INNER JOIN chat_message_join cm ON   ma.message_id = cm.message_id INNER JOIN message m ON   ma.message_id = m.ROWID WHERE   m.cache_has_attachments   AND m.expire_state != %d   AND cm.chat_id IN (%@)   AND a.hide_attachment == 0 ORDER BY ma.message_id ASC
"Database": Not removing attachments, we got a NULL or 0 length GUID [%@]
DELETE FROM attachment WHERE guid = ?;
accessl
"Database": TRIGGER: custom function is already executing -- this is not reentrant!
"Database": TRIGGER: Before deleting attachment, finding messageRowID for attachment rowID %d
SELECT message_id FROM message_attachment_join WHERE attachment_id = ? LIMIT 1
"Database": TRIGGER: Before deleting attachment, message row id: %lli
"Database": TRIGGER: Before deleting attachment, messageRecord: %@
"Database": TRIGGER: Before deleting attachment, we found attachment guid: %@
"Database": TRIGGER: Before deleting attachment, guid in message part: %@
"Database": TRIGGER: Before deleting attachment, was equal, deleting range
v40@?0@"NSNumber"8{_NSRange=QQ}16^B32
"Database": TRIGGER: Before deleting attachment,deleted messages for guid
"Database": TRIGGER: deferred deletion of messageGUID: %@
UPDATE message set attributedBody = ?, text = ? where guid = ?
"Database": TRIGGER: Before deleting attachment, updated attributedBody and text
"Database": TRIGGER: Before deleting attachment, no message record found
"Database": TRIGGER: Before deleting attachment, all done!
_IMDSMSRecordStoreCustomFunctionDeleteAttachment: wrong number of arguments
"Database": TRIGGER: Deleting attachment files based on path: %@, pathIsInStickerCache %@
"Database": Deleting this guid directory too: %@
"Database": Just deleting the original path: %@
"Database": Did not delete attachment at path %@
_IMDSMSRecordStoreCustomFunctionTrim: wrong number of arguments
_IMDSMSRecordStoreCustomFunctionTrim: sqlite3_value was NULL.
_IMDSMSRecordStoreCustomFunctionTrim: SQLite text of value[0] was NULL.
INSERT INTO message SELECT %@ from source.message WHERE date >= ?;
ROWID, guid, text, replace, service_center, handle_id, subject, country, attributedBody, version, type, service, account, account_guid, error, date, date_read, date_delivered, is_delivered, is_finished, is_emote, is_from_me, is_empty, is_delayed, is_auto_reply, is_prepared, is_read, is_system_message, is_sent, has_dd_results, is_service_message, is_forward, was_downgraded, is_archive, cache_has_attachments, cache_roomnames, was_data_detected, was_deduplicated, is_audio_message, is_played, date_played, item_type, other_handle, group_title, group_action_type, share_status,  share_direction, is_expirable, expire_state, message_action_type, message_source, associated_message_guid, associated_message_type, balloon_bundle_id, payload_data, expressive_send_style_id,  associated_message_range_location, associated_message_range_length, time_expressive_send_played, message_summary_info
newerThanDays
Tq,R,N,V_newerThanDays
INSERT INTO message SELECT %@ from source.message ORDER BY ROWID DESC LIMIT ?;
messageCount
Tq,R,N,V_messageCount
INSERT INTO chat SELECT * from source.chat WHERE ROWID IN (SELECT chat_id from source.chat_message_join where message_id IN (SELECT ROWID from message));
INSERT INTO chat_message_join SELECT * from source.chat_message_join WHERE message_id IN (SELECT ROWID from message);
INSERT INTO handle SELECT * from source.handle WHERE ROWID IN (SELECT handle_id from source.chat_handle_join where chat_id IN (select ROWID from chat));
INSERT INTO chat_handle_join SELECT * from source.chat_handle_join WHERE chat_id IN (SELECT ROWID from chat);
INSERT OR IGNORE INTO handle SELECT * from source.handle WHERE ROWID IN (SELECT handle_id from message);
INSERT OR IGNORE INTO handle SELECT * from source.handle WHERE ROWID IN (SELECT other_handle from message);
INSERT INTO attachment SELECT * from source.attachment WHERE ROWID IN (SELECT attachment_id from source.message_attachment_join where message_id IN (select ROWID from message));
UPDATE attachment SET transfer_state = 0; 
INSERT INTO message_attachment_join SELECT * from source.message_attachment_join WHERE attachment_id IN (SELECT ROWID from attachment);
Trimming database at: '%@'...
ATTACH '%@' AS source;
__kIMDSMSFailedToSendNotification
__kIMDSMSMarkAsReadCompletedNotification
IN (
? ) 
Aggregate
Submitting persistence event: %@
ROWID
_IMDPersistenceClientQueue
IMDSuggestions
SGMessagesSuggestionsServiceDelegate
IMDDatabaseDowngradeHelper
Testing
IMAbstractDatabaseArchiver
IMDSqlQuery
IMDSqlSelectQuery
IMDPersistentAttachmentController
IMDatabaseAnonymizer
IMDWhitetailToCoralDowngrader
IMDWhitetailToCoralDowngradeHelper
IMDAbstractDatabaseDowngrader
IMTrimDatabaseToDays
IMTrimDatabaseToMessageCount
IMAbstractDatabaseTrimmer
@40@0:8@16@24Q32
@"NSArray"40@0:8@"NSObject<SGSuggestionsServiceMessagesProtocol>"16@"NSString"24Q32
@16@0:8
v16@0:8
v40@0:8@16Q24@?32
v24@0:8@16
@"<NSObject><SGSuggestionsServiceMessagesProtocol>"
@64@0:8@16@24@32@40@48q56
B32@0:8@16@?24
B24@0:8@?16
B16@0:8
B32@0:8q16@?24
B40@0:8@16^{IMDSqlOperation=^v^v^{__CFString}^v{IMDSqlStatement=^vi^{__CFString}^{sqlite3}iii{IMPerfMeasurement_t={IMFileLocation_t=****i}QQ^{__CFString}ddd}}^{__CFError}}24@?32
B32@0:8^{IMDSqlOperation=^v^v^{__CFString}^v{IMDSqlStatement=^vi^{__CFString}^{sqlite3}iii{IMPerfMeasurement_t={IMFileLocation_t=****i}QQ^{__CFString}ddd}}^{__CFError}}16@?24
@28@0:8i16@20
^{sqlite3=}16@0:8
q16@0:8
^{sqlite3=}
@"NSString"
@"NSArray"
@32@0:8@16@24
B32@0:8@16^@24
@24@0:8@16
v24@0:8q16
@40@0:8@16@24@32
B24@0:8@16
@40@0:8@16@24q32
v24@0:8^{IMDSqlOperation=^v^v^{__CFString}^v{IMDSqlStatement=^vi^{__CFString}^{sqlite3}iii{IMPerfMeasurement_t={IMFileLocation_t=****i}QQ^{__CFString}ddd}}^{__CFError}}16
B24@0:8^{IMDSqlOperation=^v^v^{__CFString}^v{IMDSqlStatement=^vi^{__CFString}^{sqlite3}iii{IMPerfMeasurement_t={IMFileLocation_t=****i}QQ^{__CFString}ddd}}^{__CFError}}16
"Database": Skipping commit of a non-existent transaction in Downgraded database
"Database": Skipping revert of a non-existant transaction in Downgraded database.
"Database": Cloning and downgrading table '%@' into Downgraded Database
"Database": Downgrade: turning off foreign keys
"Database": Downgrade: attaching new (empty so far) downgraded database to the real database
"Database": Downgrade: Beginning transaction
"Database": Downgrade: Copying table: %@
"Database": Downgrade: Detaching database
"Database": Downgraded database SQL query '%@' got error: '%@'
"Database": Downgraded database SQL query ran ok: '%@'
"Database": Opening Downgraded database at: '%@'...
"Database": Closed Downgraded database at: '%@'...
"Database": ASSERTION FAILED: Condition is unexpectedly true: %s in "%s" at line %d [%@]
"Database": ASSERTION FAILED: %s is unexpectedly nil in "%s" at line %d [%@]
"Database": SQL ERROR: %@
Unable to perform database migration to %d - NO MIGRATOR FOUND
"Database": "Database": Unable to perform database migration to %d - NO MIGRATOR FOUND
Migration from %d to %d failed with error: %@
Migrated from %d to %d ok in %f seconds
Unable to perform database migration from %d to %d
IMDSMSRecordStoreCopyAllChats
IMDSMSRecordStoreCopyAllNamedChats
IMDSMSRecordStoreCopyAllActiveChats
IMDChatRecordAssociateMessageWithGUIDToChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]
IMDChatRecordDisassociateMessageWithGUIDFromChatWithGUIDIfNeeded [ChatGUID: %@] [MessageGUID: %@]
IMDChatRecordCopyChatGUIDsWithUnplayedAudioMessages
Failed to create table %@ with error %@
"Database": "Database": Failed to create table %@ with error %@
Created table (if needed) ok: %@
Failed to drop table %@ with error %@
"Database": "Database": Failed to drop table %@ with error %@
Dropped table (if needed) ok: %@
"Database": No handles or services specified. Or handleCount != serviceCount. No rows will be returned.
Setting IMDMessageRecord property %d of %d
New message record [%@] has ID [%lld]  [%@].
"Database": Attempted to get record identifier for NULL message record: %@
"Database": Attempted to get record identifier for NULL record: %@
"Database": NULL message passed to %s
"Database": NULL message passed when trying to get property: %ld
"Database": NULL message passed when trying to set property: %ld  (value:%d)
"Database": Remote set other handle not implemented
Trying to associate attachment [%lld] with message [%lld]
"Database": Error adding attachment join: %d (%s)
"Database": NULL dictionary passed to %s
"Database": NULL record passed to %s
_IMDMessageRecordCreate()
"Database": new IMDHandleRecordRef [%@] has id [%lld].
"Database": Attempted to get record identifier for NULL handle record: %@
"Database": NULL handle passed to %s
"Database": _IMDHandleRecordCreate()
Dropped trigger failed: %@: %@
Dropped trigger: %@
Create trigger failed: %@: %@
Created trigger ok: %@
dropping trigger failed: %@: %@
dropped trigger ok: %@
"Database": QuickSwitch about to downgrade database at path %@ to %@
"Database": Quickswitch Downgrade Sending XPC now...
Starting migration from V21 to V22.
Failed to delete trigger delete_attachment_files [SQLite result %d reason %s]
Failed to delete trigger delete_attachment_files [SQLite result %d]
Whoa, pardner, where is the V21_MIGRATION_GROUP_CHAT_MAP ?!
Whoa, pardner, where is the V21_MIGRATION_NONCANONICAL_GROUP_HANDLE_MAP ?!
[Database] ERROR: **** Failed ingesting legacy message with row ID: %d
"Database": "Database": [Database] ERROR: **** Failed ingesting legacy message with row ID: %d
Successful migration for legacy message [%d]
No message rows available to migrate, great success!!
Whoa pardner, we didn't drop the group to chat map table. C'est la vie.
Whoa pardner, we didn't drop the non-canonical group to handle map table. C'est la vie.
Asking DB to analyze.
Migration ended with result %d
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ORPHAN: Unable to find/create a chat for handle[%@] and roomname[%@] for legacy messageID[%d]. Skipping this message.
[Database] ERROR: Unable to migrate message row %d with error: %d
"Database": "Database": [Database] ERROR: Unable to migrate message row %d with error: %d
Unable to update flags row %d with error: %d
[DATABASE] There don't appear to be any participants in this chat, so it will NOT be migrated. RowID: %lld Handle %@ Roomname %@
"Database": "Database": [DATABASE] There don't appear to be any participants in this chat, so it will NOT be migrated. RowID: %lld Handle %@ Roomname %@
Unable to migrate chat row %lld with error: %d
Unable to update chatID[%lld]'s room_name.
Unable to update chatID[%lld] with guid[%@]
[Database] ERROR: Could not create chat from handle[%@] and roomname[%@].
"Database": "Database": [Database] ERROR: Could not create chat from handle[%@] and roomname[%@].
ORPHAN: Unable to find a legacy madrid chat record for handle[%@] and roomname[%@] with sqlite status (%d). This usually means that a chat was deleted but the messages it contained weren't. Failing chat creation.
** You attempted to bind HandleID [%lld] to ChatID [%lld]. One of these values is bogus.
[Database] ERROR: Failed to join Handle [%lld] to Chat [%lld]. SQLite error: %d
"Database": "Database": [Database] ERROR: Failed to join Handle [%lld] to Chat [%lld]. SQLite error: %d
[Database] ERROR: Unable to bind chat id[%lld] to message id[%lld]: %d
"Database": "Database": [Database] ERROR: Unable to bind chat id[%lld] to message id[%lld]: %d
AWOL handle for uncanonicalizedID [%@]  canonicalizedID [%@] Service [%@] Country [%@]
Got an invalid IDs uncanon: (%@) canon: (%@) in %s.
Got an invalid service (%@) in %s.
Got an invalid identifier (%@) (%@) in %s.
[Database] ERROR: Unable to create handle row with uncanonid[%@] canonid[%@] service[%@] country[%@]
"Database": "Database": [Database] ERROR: Unable to create handle row with uncanonid[%@] canonid[%@] service[%@] country[%@]
Invalid handleID[%lld] or messageID[%lld] passed for binding
Unable to update handle id on message row %lld with error: %d
Invalid legacy guid provided in %s - this is bad but non-fatal.
"Database": Invalid legacy guid provided in %s - this is bad but non-fatal.
Invalid message rowID[%lld] provided in %s
Unable to find legacy attachment for guid[%@]. Not fatal, but bailing.
Fatal error binding attachmentID[%lld - %@] to messageID[%lld]
Unable to migrate attachment row %lld with error: %d
Invalid attachmentID[%lld] or messageID[%lld] passed for binding
Unable to bind attachmentID[%lld] to messageID[%lld]: %d
ORPHAN: Could not find an appropriate chat to use for messageID[%d]. Skipping this message.
[Database] ERROR: Failed to create new message row. SQLite error: %d
"Database": "Database": [Database] ERROR: Failed to create new message row. SQLite error: %d
This message is empty, and we should NOT keep it.
This message lacks a handle, and we should NOT keep it.
Message [%lld] Legacy [%d] was problematic, thus we skip it.
Problems deleting message [%lld], SQLite error: %d
Unable to delete message.
[Database] Bailing early on a problematic message.
"Database": "Database": [Database] Bailing early on a problematic message.
[Database] ORPHAN: Failed to update message. SQLite error: %d
"Database": "Database": [Database] ORPHAN: Failed to update message. SQLite error: %d
[Database] ORPHAN: Failed to insert message. SQLite error was: %d
"Database": "Database": [Database] ORPHAN: Failed to insert message. SQLite error was: %d
[Database] ****** Result from select query: %d
"Database": "Database": [Database] ****** Result from select query: %d
[Database] ERROR: * * * * * Holy Smokes, the group row id is bogus! * * * * * *
"Database": "Database": [Database] ERROR: * * * * * Holy Smokes, the group row id is bogus! * * * * * *
ORPHAN: Unable to find handles for groupID[%d]. This means we have message rows without a matching group. Failing the chat lookup.
[Database] ERROR: Got a NULL identifier for handleID[%lld]. Something is seriously wrong.
"Database": "Database": [Database] ERROR: Got a NULL identifier for handleID[%lld]. Something is seriously wrong.
[Database] ERROR: Was slinging around an invalid handleID for messageID[%d] to create chat. Something is wrong.
"Database": "Database": [Database] ERROR: Was slinging around an invalid handleID for messageID[%d] to create chat. Something is wrong.
[Database] ERROR: Got a NULL handleID for messageID[%d] to create chat. Something is wrong.
"Database": "Database": [Database] ERROR: Got a NULL handleID for messageID[%d] to create chat. Something is wrong.
[Database] ERROR: Failed to create chat record. SQLite error: %d
"Database": "Database": [Database] ERROR: Failed to create chat record. SQLite error: %d
Ugh, the address '%@' wouldn't canonicalize.
MsgAddress '%@' was null, we won't even try to canonicalize it.
Got an invalid rowid looking for a handle mapped to group id: %lld
[Database] Invalid group id '%lld' passed to __addressFromMessagesMatchingLegacyGroupID
"Database": "Database": [Database] Invalid group id '%lld' passed to __addressFromMessagesMatchingLegacyGroupID
[Database] ERROR: You tried to join handle [%lld] to group [%lld] with an invalid row id.
"Database": "Database": [Database] ERROR: You tried to join handle [%lld] to group [%lld] with an invalid row id.
[Database] ERROR: Failed to asscociate handle [%lld] to group [%lld] with sqlite result: %d.
"Database": "Database": [Database] ERROR: Failed to asscociate handle [%lld] to group [%lld] with sqlite result: %d.
[Database] ERROR: Uh, not gonna find a chat with an invalid GroupID [%lld]
"Database": "Database": [Database] ERROR: Uh, not gonna find a chat with an invalid GroupID [%lld]
Got an invalid rowid looking for a chat mapped to group id: %lld
[Database] ERROR: You tried to join chat [%lld] to group [%lld] with an invalid row id.
"Database": "Database": [Database] ERROR: You tried to join chat [%lld] to group [%lld] with an invalid row id.
[Database] ERROR: Failed to Asscociated chat [%lld] for group [%lld] (isBroadcast[%d]) with Sqlite result: %d.
"Database": "Database": [Database] ERROR: Failed to Asscociated chat [%lld] for group [%lld] (isBroadcast[%d]) with Sqlite result: %d.
[Database] ERROR: Unable to copy identifier for invalid handleID[%lld]
"Database": "Database": [Database] ERROR: Unable to copy identifier for invalid handleID[%lld]
[Database] ERROR: Unable to update placeholder property on invalid chatID
"Database": "Database": [Database] ERROR: Unable to update placeholder property on invalid chatID
[Database] ERROR: Unable to set properties on an invalid chat
"Database": "Database": [Database] ERROR: Unable to set properties on an invalid chat
[Database] ERROR: Unable to set properties for chat[%lld]: %d
"Database": "Database": [Database] ERROR: Unable to set properties for chat[%lld]: %d
[Database] ORPHAN: Failed to create new attachment record. SQLite error: %d.
"Database": "Database": [Database] ORPHAN: Failed to create new attachment record. SQLite error: %d.
[Database] ERROR: Failed joining new attachment to message with SQLite result: %d
"Database": "Database": [Database] ERROR: Failed joining new attachment to message with SQLite result: %d
[Database] ERROR: Failed to create directory [%@]: %@
"Database": "Database": [Database] ERROR: Failed to create directory [%@]: %@
[Database] ERROR: Failed to write piece data to FS.
"Database": "Database": [Database] ERROR: Failed to write piece data to FS.
[Database] ERROR: Failed updating the filename on the new attachment record with SQLite result: %d
"Database": "Database": [Database] ERROR: Failed updating the filename on the new attachment record with SQLite result: %d
"Database": ASSERTION FAILED: %s is unexpectedly NOT nil in "%s" at line %d [%@]
"Database": Starting new query with pending error: : %@
"Database": reverting uncommitted transation with error: %@
"Database": committing uncommitted transation
_IMDChatRecordSetProperty [%d of %d]
"Database": Attempted to get identifier for NULL chat record: %@
"Database": NULL chat passed to %s
Trying to associate message [%lld] with chat [%lld]
SQLite returned %d from IMDChatRecordAddMessageIfNeeded
Finished remove message [%@] from chat [%@], updating the spotlight index for this chat.
Trying to associate handle [%lld] with chat [%lld]
SQLite returned %d from IMDChatRecordAddHandle
SQLite returned %d from IMDChatRecordRemoveHandle
IMDChatRecordBulkUpdateChat %@
_IMDChatRecordCreate()
Got record in _IMDChatRecordCreateFromRecordIDWithLock (%lld) : %@
"Database": Sqlite3 Error: %@
"Database": Unable to create record for attachment.
"Database": NULL attachment passed to %s
"Database": _IMDAttachmentRecordCreate()
"Database": Downgrade: Opening new coral database
"Database": Downgrade: Creating Tables
"Database": Downgrade: Creating Indexes
"Database": Downgrade: Committing phase 1
"Database": Downgrade: Beginning to copy tables
"Database": Downgrade: Creating triggers
"Database": Downgrade: Updating Version
"Database": Downgrade: Committing phase 2
"Database": Downgrade completed ok! :-D
"Database": Unable to perform query %@. Error %d
"Database": Couldn't update %lld with order date %lld
"Database": MessageImport failed in ImportBegin
"Database": %s called, but not during import, ignoring
"Database": %s called for chat: %@, but not during import, ignoring
"Database": Failed to add handle: %lld to chat: %lld
"Database": Failed to create new chat for guid: %@
"Database": Failed to create message for guid: %@
"Database": No chat found for guid: %@   failing message import for GUID: %@
"Database": MessageImport - IMDImportAttachmentWithPath - empty guid
"Database": Unable to create directories for %@ when saving attachment %@
"Database": MessageImport - couldn't link/copy attachment from %@ to %@ - %@
"Database": Could not write attachmentData to path %@
"Database": Saving database.
"Database": Destroying database.
"Database": Closed database.
"Database": Create tables...
"Database": Setting page size.
"Database": Enabling auto vacuum.
"Database": Enabling WAL journal mode.
"Database": Enabling Foreign Key support.
"Database": Registering external functions.
"Database": Creating triggers for %p after db init failed: %@
The current SMS database is v%d.  The current schema version is v%d. Can be migrated: %@
"Database": "Database": The current SMS database is v%d.  The current schema version is v%d. Can be migrated: %@
Beginning migration.  The SMS db is currently at v%d, upgrading to v%d.
"Database": "Database": Beginning migration.  The SMS db is currently at v%d, upgrading to v%d.
Initial Integrity checked success
Message database migration passed post migrate integrity check
"Database": "Database": Message database migration passed post migrate integrity check
Message database migration failed post migrate integrity check
"Database": "Database": Message database migration failed post migrate integrity check
Migration failed, made it to version: %d: error: %@
"Database": "Database": Migration failed, made it to version: %d: error: %@
Message database migration failed - Database integrity check failed
"Database": "Database": Message database migration failed - Database integrity check failed
Message's DB migration took %f seconds.
"Database": "Database": Message's DB migration took %f seconds.
Reindexing the DB worked.
Database Reindexing the DB failed with SQLite result: %d
"Database": "Database": Database Reindexing the DB failed with SQLite result: %d
Vacuuming DB success
Database Vacuuming failed with SQLite result: %d
"Database": "Database": Database Vacuuming failed with SQLite result: %d
Post Vacuuming integrity check success
Database Post Vacuuming integrity checked failed failed
"Database": "Database": Database Post Vacuuming integrity checked failed failed
Integrity checked success
Found column %@ on %@, no need to add it
Adding column %@ to %@ succeeded: %@
Create index failed: %@: %@
Created index ok: %@
Dropped index failed: %@: %@
Dropped index: %@
Dropping unknown index failed: %@: %@
Dropped unknown index: %@
"Database": Found %ld messages guids to remove from spotlight
"Database": Found 0 messages guids to remove from spotlight
"Database": __XPCIMDMessageStoreSendXPCMessage got a bogus message to send...bailing!
"Database": __XPCIMDMessageStoreSendXPCMessage has failed %lu time(s)!
"Database": __XPCIMDMessageStoreSendXPCMessage failed to copy the xpc_connection_t!
"Database": __XPCIMDMessageStoreSendXPCMessage failed several consecutive times - sleeping for 1+ the launchd throttle time.
"Database": __XPCIMDMessageStoreSendXPCMessage failed too many times...bailing!
Updating madrid indices.
Nuking bogus madrid message indices.
%@ SQLiteResult: %d SQLite Message: %s
"Database": "Database": %@ SQLiteResult: %d SQLite Message: %s
No migration block to execute!
"Database": "Database": No migration block to execute!
Create tables...
Table for handle was created successfully.
Failed to create table for handle. SQLiteError: %d
Migration unsupported.  The SMS db is currently at v%d, cannot upgrade to v%d.
"Database": "Database": Migration unsupported.  The SMS db is currently at v%d, cannot upgrade to v%d.
Updating DB to sort by ROWID instead of date.
Updating DB to support madrid.
Updating DB from version 12 to current.
Updating DB from version 13 to current.
Updating DB from version 14 to current.
Adding index for group_id on group_member
Adding support for Chats and Participants.
Ensuring sanity of is_madrid column.
Cleaning message indices for iMessage.
Adding column for iMessage Account GUID
Moving old tables to *_legacy and adding tables for the new schema.
The is_archived column already exists on chat, skipping this step.
Fixing missing text in group field
The was_data_detected column already exists on message, skipping this step.
SQLite result was %d
The last_addressed_handle column already exists on chat, skipping this step.
The was_deduplicated column already exists on message, skipping this step.
Fixing busted chat identifiers for group chats
Adding attachment is_outgoing column
The is_outgoing column already exists on attachment, skipping this step.
Fixing up uncanonicalized identifiers that had previously been incorrectly treated as canonicalized.
Fixing up uncanonicalized handle identifiers that failed to migrate due to conflicts.
Adding attachment user_info column
The user_info column already exists on attachment, skipping this step.
Adding attachment transfer_name column
Adding chat display_name column
The display_name column already exists on chat, skipping this step.
Adding attachment total_bytes column
The transfer_name column already exists on attachment, skipping this step.
Purging orphaned messages
Adding message is_audio_message, is_played, and date_played column
The is_audio_message, is_played, and date_played columns already exist on message, skipping this step.
Purging orphaned messages - again
Adding message item_type, other_handle, group_title, group_action_type, share_status, share_direction
The item_type, other_handle, group_title, group_action_type, share_status, share_direction columns already exist on message, skipping this step.
The group_id columns already exist on chat, skipping this step.
Adding message is_expirable, expire_state, and message_action_type column
The is_expirable, expire_state, and message_action_type columns already exist on message, skipping this step.
Adding message message_source column
The message_source column already exists on message, skipping this step.
Migration failed, made it to version: %d
"Database": "Database": Migration failed, made it to version: %d
Join table for Chat <--> Message was created successfully.
Failed to create join table for Chat <--> Message. SQLiteError: %d
Join table for Chat <--> Handle was created successfully.
Failed to create join table for Chat <--> Handle. SQLiteError: %d
Join table for Message <--> Attachment was created successfully.
Failed to create join table for Message <--> Attachment. SQLiteError: %d
IMDMessageRecordUnassociateMessageWithGUIDFromAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@
Orphaned attachment cleanup complete
IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID [MessageGUID: %@] [AttachmentGUID: %@
IMDMessageRecordCopyMessagesForAssociatedGUID [%@]
IMDMessageRecordCopyMessagesForGUIDs [%@]
IMDMessageRecordCopyLastReadMessageForChatGUID [%@]
results from last received: %@
IMDMessageRecordCopyMessageForRowID [%lld]
IMDMessageRecordCopyMessageForGUID [%@]
IMDMessageRecordDeleteMessagesForGUIDs %@
IMDSelectMessagesForDeletionAfterDaysWithQuery %lld
"Database": IMDMessageRecordDeleteMessagesOlderThanDays %lld
"Database": No roomname or service specified. No rows will be returned.
"Database": history query got %lu rows
"Database": history query: IMDP client got at least one message: %@
"Database": IMDP client got null array_result back: %@
"Database": No handles or services specified. Or handleCount != serviceCount. Or guidCount == 0. No rows will be returned.
"Database": Deleted %ld messages in %f seconds on %ld chats and %ld services
"Database": No handle or service specified. No rows will be returned.
IMDMessageRecordCopyUndeliveredOneToOneMadridMessages
IMDMessageRecordCopyExpiredOrExpiringiMessages
IMDMessageRecordCopyUnsentUnfailedMessages
IMDMessageRecordCopyMessageActionItemsForOriginalMessageGUID [%@]
"Database": Can't determine unread count when GUID is NULL or empty.
"Database": Can't determine unplayed audio messages GUID is NULL or empty.
Marking all unsent and failed messages as sent.
Row ID is %lld for message with guid [%@]
IMDMessageRecordCopyAndMarkAsReadMessagesPriorToGuidMatchingHandleOnService
IMDMessageRecordCopyAndMarkAsReadMessagesMatchingRoomnameOnService
IMDMessageRecordCopyMessagesBetweenRowIDs [%lld:%lld]
"Database": The RowID is out of bounds.  We were asked for rows after [%lld] which exceeds the current sequence number [%lld]
"Database": Final adjusted row ID: %lld
IMDMessageRecordCopyNewestFailedOutgoingMessagesToLimitAfterRowID limit: %lld  rowID: %lld
IMDMessageRecordCopyMessagesDataDetectionResults limit: %lld  rowID: %lld
"Database": No addresses provided to IMDMessageRecordCopyMostRecentUseageOfAddresses().
"Database": No addresses to lookup, no results for you.
"Database": Matching addresses (in order) are %@
"Database": Found %ld associated messages for messageGUID: %@, forSender: %@
IMDMessageRecordCopyAllUnplayedMessageGUIDsForChatGUID
IMDMessageRecordCopyAndMarkAsReadMessagesMatchingHandleOnService
"Database": ASSERTION FAILED: Conditions are unexpectedly equal: %s == %s in "%s" at line %d [%@]
"Database": There appears to be more than one attachment with GUID [%@]
"Database": Not removing attachments, we got a NULL or 0 length GUID [%@]
"Database": TRIGGER: custom function is already executing -- this is not reentrant!
"Database": TRIGGER: Before deleting attachment, finding messageRowID for attachment rowID %d
"Database": TRIGGER: Before deleting attachment, message row id: %lli
"Database": TRIGGER: Before deleting attachment, messageRecord: %@
"Database": TRIGGER: Before deleting attachment, we found attachment guid: %@
"Database": TRIGGER: Before deleting attachment, guid in message part: %@
"Database": TRIGGER: Before deleting attachment, was equal, deleting range
"Database": TRIGGER: Before deleting attachment,deleted messages for guid
"Database": TRIGGER: deferred deletion of messageGUID: %@
"Database": TRIGGER: Before deleting attachment, updated attributedBody and text
"Database": TRIGGER: Before deleting attachment, no message record found
"Database": TRIGGER: Before deleting attachment, all done!
"Database": TRIGGER: Deleting attachment files based on path: %@, pathIsInStickerCache %@
"Database": Deleting this guid directory too: %@
"Database": Just deleting the original path: %@
"Database": Did not delete attachment at path %@
@(#)PROGRAM:IMDPersistence  PROJECT:IMDPersistence-
