init
copy
isOutgoing
sourceIdentifier
initWithCallOutgoing:accessibilityDefaultRoute:audioSourceKey:
stringWithFormat:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
formattedDictionaryRepresentation
description
class
isKindOfClass:
isEqualToActivationContext:
accessibilityDefaultRoute
audioSourceKey
hash
_callDirection
_accessibilityPreference
isEqualToString:
dictionary
numberWithInteger:
setObject:forKeyedSubscript:
numberWithUnsignedInteger:
dictionaryRepresentation
mutableCopy
allKeys
countByEnumeratingWithState:objects:count:
objectForKeyedSubscript:
unsignedIntValue
initWithCall:
isEqual:
.cxx_destruct
setOutgoing:
setAccessibilityDefaultRoute:
setAudioSourceKey:
_outgoing
_accessibilityDefaultRoute
_audioSourceKey
dataWithBytes:length:
alloc
initWithData:encoding:
callStateController
relayMessagingController
callController
sharedInstance
_allCalls
allCalls
setCallStateController:
_callStateController
setObjectsWithTransactions:
defaultCenter
handleCallStatusChanged:
addObserver:selector:name:object:
handleSessionStateChanged:
beginTransactionIfNecessaryForObject:
endTransactionIfNecessaryForObject:
removeObserver:
dealloc
objectsWithTransactions
containsObject:
addObject:
count
beginTransaction
removeObject:
endTransaction
object
status
state
_objectsWithTransactions
bundleIdentifier
invalidate
name
initWithBundleIdentifier:flags:reason:name:withHandler:
setProcessAssertion:
processAssertionNameForBundleIdentifier:
initWithBundleIdentifier:flags:reason:name:
processAssertionWithBundleIdentifier:
initWithBundleIdentifier:
acquireWithCompletionHandler:
processAssertion
_bundleIdentifier
_processAssertion
conferenceProvider
setDelegate:
queue
setState:
setConfiguration:
conferenceProviderClass
configuration
clientUUID
initWithClientUUID:
setConferenceProvider:
deviceRole
initializeNewCallWithDeviceRole:
localPortraitAspectRatio
localLandscapeAspectRatio
setLocalPortraitAspectRatio:localLandscapeAspectRatio:
delegate
conference:finishedPreparingLocalInviteDictionary:
_performDelegateCallback:
_setEndedWithReason:error:
remoteInviteDictionary
callID
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
isCaller
capabilities
startConnectionAsCaller:remoteInviteDictionary:capabilities:destination:error:
date
timeIntervalSince1970
_setUpDidStartTimeout
stop
cancel
setEndedReason:
setEndedError:
_sendDelegateEndedWithReason:error:
setRemoteInviteDictionary:
setDateStartedConnecting:
setDateConnected:
setDateEnded:
_isMuted
isMicrophoneMuted
setMicrophoneMuted:
_sendDelegateMutedChanged
_isSendingAudio
isAudioPaused
setAudioPaused:
_isSendingVideo
isVideoPaused
setVideoPaused:
setRemoteVideoPresentationSize:
setRemoteVideoPresentationState:
connectionTimeout
setDeviceRole:
updateCapabilities:
delegateQueue
conferenceStarted:
respondsToSelector:
conference:endedWithReason:error:
mutedChangedForConference:
sendingAudioChangedForConference:
receivedFirstRemoteFrameForConference:
remoteVideoPausedForConference:
conference:inputFrequencyLevelChangedTo:
conference:outputFrequencyLevelChangedTo:
conference:changedBytesOfDataUsed:
code
_sendDelegateStarted
_endedReasonForDidStopError:error:
integerValue
_sendDelegateBytesOfDataUsageChanged:
_sendDelegateInputFrequencyLevelChanged:
_sendDelegateOutputFrequencyLevelChanged:
_sendDelegateSendingAudioChanged
setHasReceivedFirstRemoteFrame:
_sendDelegateReceivedFirstRemoteFrame
setRemoteVideoPaused:
_sendDelegateRemoteVideoPaused
conferenceProvider:didStartSession:error:
conferenceProvider:didStopWithError:callMetadata:
serverDiedForConferenceProvider:
conferenceProvider:updateInputFrequencyLevel:
conferenceProvider:updateOutputFrequencyLevel:
conferenceProvider:didPauseAudio:error:
conferenceProviderReceivedFirstRemoteFrame:
conferenceProvider:remoteVideoPaused:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
prepareWithConfiguration:
startConnectionWithDestination:
endedReason
isMuted
setMuted:
isSendingAudio
setSendingAudio:
hasReceivedFirstRemoteFrame
isSendingVideo
setSendingVideo:
isRemoteVideoPaused
remoteVideoPresentationSize
remoteVideoPresentationState
setDelegateQueue:
setConnectionTimeout:
endedError
dateStartedConnecting
dateConnected
dateEnded
setQueue:
setConferenceProviderClass:
_hasReceivedFirstRemoteFrame
_remoteVideoPaused
_state
_remoteVideoPresentationState
_delegate
_delegateQueue
_connectionTimeout
_endedError
_dateStartedConnecting
_dateConnected
_dateEnded
_queue
_endedReason
_configuration
_conferenceProvider
_conferenceProviderClass
_remoteVideoPresentationSize
setCaller:
setCapabilities:
setClientUUID:
setLocalLandscapeAspectRatio:
setLocalPortraitAspectRatio:
_caller
_capabilities
_clientUUID
_remoteInviteDictionary
_localLandscapeAspectRatio
_localPortraitAspectRatio
initWithDictionaryRepresentation:
UUID
UUIDString
initWithHandoffIdentifier:
initWithType:value:
setRemoteHandle:
setContext:
context
remoteHandle
value
numberWithInt:
initWithHandoffActivityUserInfo:
handoffActivityUserInfo
providerIdentifierForHandoffActivityUserInfo:
protoProtocolVersion
setProtoProtocolVersion:
protoWantsVideo
setProtoWantsVideo:
setProtocolVersion:
protocolVersion
wantsVideo
setWantsVideo:
addProtocolVersion
setActivityCommunicator:
activityCommunicator
callStatusChanged:
callContinuityChanged:
shouldSuppressRingtoneChanged:
callStartedConnecting:
callConnected:
providerManager
addDelegate:queue:
updateCallHandoffRegistration
updateAppHistoryActivityForCall
updateHandoffActivityState
updateSuppressRingtoneActivityListeningState
supportsPrimaryCalling
stopListeningForActivityType:
providers
handoffIdentifiers
listenForActivityType:dynamicIdentifier:
currentCalls
firstObject
isHostedOnCurrentDevice
isEndpointOnCurrentDevice
handoffDynamicIdentifier
activityWithType:dynamicIdentifier:userInfo:
handoffActivity
endHandoffActivity
broadcastActivity:
setHandoffActivity:
stopBroadcastingActivity:
wasDeclined
startSuppressRingtoneActivityBroadcastingForCall:
handle
broadcastActivity:withTimeout:shouldPrioritize:
shouldSuppressRingtone
callPassingTest:
currentAudioAndVideoCalls
localizedLabel
isoCountryCode
arrayWithCapacity:
displayName
callIdentifier
dictionaryWithCapacity:
provider
identifier
appHistoryActivityWithTitle:subtitle:keywords:userInfo:
startSuppressRingtoneActivityBroadcastingIfNecessaryForCallWithStatusChange:
ringtoneSuppressedRemotely
componentsSeparatedByString:
lastObject
audioAndVideoCallsWithStatus:
suppressRingtoneDueToRemoteSuppression
providersChangedForProviderManager:
receivedBroadcastedActivityType:dynamicIdentifier:
_activityCommunicator
_handoffActivity
messageSendTime
typeString
uniqueProxyIdentifier
appendFormat:
block
reportingController:statusChangedForCall:totalCallCount:
reportingController:callEnteredForeground:
allCallsBackgroundedForReportingController:
reportingController:relayMessageReceived:fromPairedDevice:
reportingController:transactionGroupCompleted:
reportingController:providerFailedWithAction:forCall:
setBlock:
_block
conferenceID
hasPrefix:
length
substringFromIndex:
GUID
dataUploaded
dataDownloaded
otherIMHandle
initWithDestinationID:
isVideo
setHasVideo:
setSupportsHolding:
setSupportsGrouping:
setSupportsUngrouping:
setSupportsDTMF:
setRequiresInCallSounds:
setCrossDeviceIdentifier:
setAudioInterruptionProvider:
setAudioInterruptionOperationMode:
setAudioCategory:
setAudioMode:
handleWithTUHandle:
crossDeviceIdentifier
initWithChat:
faceTimeTransportType
setFaceTimeTransportType:
exceptionWithName:reason:userInfo:
raise
setObject:forKey:
numberWithBool:
numberWithUnsignedLongLong:
numberWithUnsignedInt:
numberWithLongLong:
setCallUuid:
setProviderId:
featuresCount
clearFeatures
featuresAtIndex:
addFeatures:
allocWithZone:
copyWithZone:
hasCallUuid
hasProviderId
setIsIncoming:
setHasIsIncoming:
hasIsIncoming
setIsHeld:
setHasIsHeld:
hasIsHeld
setHasConnected:
setHasHasConnected:
hasHasConnected
setHasEnded:
setHasHasEnded:
hasHasEnded
setIsCurrentlyGrouped:
setHasIsCurrentlyGrouped:
hasIsCurrentlyGrouped
setDurationMs:
setHasDurationMs:
hasDurationMs
setSetupTimeMs:
setHasSetupTimeMs:
hasSetupTimeMs
setConnectionTimeMs:
setHasConnectionTimeMs:
hasConnectionTimeMs
features
setFeatures:count:
setEndReason:
setHasEndReason:
hasEndReason
setHasFaceTimeTransportType:
hasFaceTimeTransportType
setTelephonyTransportType:
setHasTelephonyTransportType:
hasTelephonyTransportType
setProviderErrorCode:
setHasProviderErrorCode:
hasProviderErrorCode
setIsRelay:
setHasIsRelay:
hasIsRelay
setProviderEndedReason:
setHasProviderEndedReason:
hasProviderEndedReason
readFrom:
writeTo:
copyTo:
mergeFrom:
callUuid
providerId
isIncoming
isHeld
hasConnected
hasEnded
isCurrentlyGrouped
durationMs
setupTimeMs
connectionTimeMs
endReason
telephonyTransportType
providerErrorCode
isRelay
providerEndedReason
_features
_connectionTimeMs
_durationMs
_endReason
_providerEndedReason
_providerErrorCode
_setupTimeMs
_callUuid
_faceTimeTransportType
_providerId
_telephonyTransportType
_hasConnected
_hasEnded
_isCurrentlyGrouped
_isHeld
_isIncoming
_isRelay
_has
orderedSet
supportsDisplayingFaceTimeAudioCalls
supportsDisplayingFaceTimeVideoCalls
daemonConnected:
handleChatStateChanged:
handleChatFirstRemoteFrameArrived:
handleChatInvitationSent:
handleChatCallInfoChangedNotification:
handleChatConferenceIDChangedNotification:
handleChatConferenceMetadataUpdated:
handleChatMayRequireBreakBeforeMakeChanged:
handleChatInFrequencyChangedNotification:
handleChatOutFrequencyChangedNotification:
setIMAVCapabilities:toCaps:
setupIMAVController
setBlockIncomingInvitationsDuringCall:
setBlockMultipleIncomingInvitations:
_requestPendingInvites
requestPendingACInvitations
requestPendingVCInvitations
cachedChats
chatWithUUID:
_endChatWithUUID:withEndedReason:
endChatWithReason:
facetimeService
callService
isRegistered
imHandleWithID:
arrayWithObjects:count:
callUUID
initOutgoingTo:isVideo:isRelayed:GUID:
setConnectionTimeoutTime:
isUpgrade
setInvitationTimeoutTime:
_setLocalLandscapeAspectRatio:localPortraitAspectRatio:forChat:
invite:additionalPeers:excludingPushTokens:
isComplete
reportCallWithUUID:updated:
fulfill
faceTimeDemuxerDelegate
providerDelegate:callWithUUID:startedConnectingAtDate:
reportOutgoingCallWithUUID:connectedAtDate:
pendingCallActionsOfClass:withCallUUID:
fulfillWithDateConnected:
fail
trace:
registerChat:
_updateProviderForConnectingChat:
_updateProviderForConnectedChat:
_updateProviderForEndedChat:
failureContextForChat:
providerDelegate:callWithUUID:endedAtDate:withReason:failureContext:
setFailureReason:
supportsWLAN
allowAnyNetwork
supportsNonWiFiCalling
supportsNonWiFiFaceTime
localizedStringForKey:value:table:
setTitle:
setMessage:
setHasWiFiSettingsRemediation:
setHasCellularSettingsRemediation:
setHasDateAndTimeSettingsRemediation:
setHasLocationSettingsRemediation:
destinationIdIsPhoneNumber
isLocalParticipant
avChat
reportOutgoingCallWithUUID:sentInvitationAtDate:
_activeCallID
setVideoStreamToken:
reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
mayRequireBreakBeforeMake
setMayRequireBreakBeforeMake:
inFrequencyLevel
reportCallWithUUID:changedFrequencyData:forDirection:
outFrequencyLevel
declineInvitationWithResponse:
reportNewIncomingCallWithUUID:update:completion:
setProvider:
_setUpListeners
endChat
acceptInvitation
isOnHold
setIsSendingAudio:
setIsSendingVideo:
videoPresentationSize
videoPresentationState
IMAVChatRemoteVideoPresentationStateFromCXVideoPresentationState:
isRelaying
setRelayed:
setMute:
invitedToIMAVChat:
createdOutgoingIMAVChat:
inviteFailedFromIMHandle:reason:
isManagingCallWithUUID:
hasCallStartedConnectingWithUUID:
endCallWithUUIDAsAnsweredElsewhere:
endCallWithUUIDAsDeclinedElsewhere:
provider:performSendMMIOrUSSDCodeAction:
provider:performSetSendingVideoCallAction:
provider:performSetRelayingCallAction:
provider:performPullCallAction:
provider:performSetVideoPresentationSizeCallAction:
provider:performSetVideoPresentationStateCallAction:
providerDidReset:
providerDidBegin:
provider:executeTransaction:
provider:performStartCallAction:
provider:performAnswerCallAction:
provider:performEndCallAction:
provider:performSetHeldCallAction:
provider:performSetMutedCallAction:
provider:performSetGroupCallAction:
provider:performPlayDTMFCallAction:
provider:timedOutPerformingAction:
provider:didActivateAudioSession:
provider:didDeactivateAudioSession:
inviteIMAVPeersWithAction:additionalPeers:tokensToExclude:
setFaceTimeDemuxerDelegate:
setCachedChats:
_faceTimeDemuxerDelegate
_provider
_cachedChats
initWithUUIDString:
initWithService:
faceTimeIMAccountCallerIDChanged:
callerID
postNotificationName:object:
setCallerID:
_callerID
array
setIdsCallDataSource:
idsCallDataSource
setCallController:
setRelayCallDataSource:
relayCallDataSource
setMockCallDataSource:
mockCallDataSource
setProviderCallDataSource:
providerCallDataSource
setTelephonyCallDataSource:
telephonyCallDataSource
setFaceTimeCallDataSource:
faceTimeCallDataSource
setCallDataSources:
registerCall:
callControllerHost
cxCall
removeCall:
addOrUpdateCall:
callDataSources
callWithUniqueProxyIdentifier:
relayCallWithUniqueProxyIdentifier:
calls
addObjectsFromArray:
proxyCallWithCall:
idsCallWithUniqueProxyIdentifier:
relayCallWithProxyCall:
currentRelayCalls
currentProxyCalls
_telephonyCallDataSource
_faceTimeCallDataSource
_idsCallDataSource
_relayCallDataSource
_providerCallDataSource
_mockCallDataSource
_callDataSources
serviceName
setHasSupportsHolding:
hasSupportsHolding
setHasSupportsGrouping:
hasSupportsGrouping
setHasSupportsUngrouping:
hasSupportsUngrouping
setHasSupportsDTMF:
hasSupportsDTMF
setSupportsUnambiguousMultiPartyState:
setHasSupportsUnambiguousMultiPartyState:
hasSupportsUnambiguousMultiPartyState
setSupportsAddCall:
setHasSupportsAddCall:
hasSupportsAddCall
setSupportsSendingToVoicemail:
setHasSupportsSendingToVoicemail:
hasSupportsSendingToVoicemail
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
_supportsAddCall
_supportsDTMF
_supportsGrouping
_supportsHolding
_supportsSendingToVoicemail
_supportsUnambiguousMultiPartyState
_supportsUngrouping
initWithRelayMessage:outgoing:
hostCallCreationTime
setHostCreationTime:
setHostMessageSendTime:
setClientMessageReceiveTime:
_dumpStackshotForIncomingCallMessageForCall:
cannotBeAnswered
setEndpointOnCurrentDevice:
cannotRelayAudioOrVideoOnPairedDevice
setCannotRelayAudioOrVideo:
propertiesChangedForCall:
updateWithRelayMessage:
setLocallyDisconnectedWithReasonIfNone:
disconnectedReason
setLocallyActiveAndSetStartTime:
callModel
setModel:
stopConferenceForIdentifier:
setWantsHoldMusic:
callsHostedElsewhere
setWithArray:
protoCalls
isEqualToCall:
updateRelayCall:
initWithUniqueProxyIdentifier:endpointOnCurrentDevice:
hardPauseDigits
setHardPauseDigits:
hardPauseDigitsState
setHardPauseDigitsState:
pullRemotelyHostedCalls
callCapabilitiesState
updatePairedHostDeviceCallCapabilitiesState:
needsManualInCallSounds
setNeedsManualInCallSounds:
soundRegion
setSoundRegion:
setHasSentInvitation:
becomeEndpointForPullFromRemoteDevice
hostCreationTime
hostMessageSendTime
clientMessageReceiveTime
isWalkaboutEnabled
handleIncomingCallMessageFromHost:fromPairedDevice:
handleCallDialedMessageFromHost:fromPairedDevice:
handleCallAnsweredElsewhereMessageFromHost:fromPairedDevice:
handleCallDisconnectedMessageFromHost:
handleCallConnectedMessageFromHost:
handlePullRelayingCallsMessageFromHost:fromPairedDevice:
handleResetWantsHoldMusicFromHost:
handleUpdateCallModelMessageFromHost:
handleDeviceUnavailableMessageFromHost:
handleResetStateMessageFromHost:
handleHardPauseDigitsAvailabilityMessageFromHost:
handleUpdateRemoteCallStateMessageFromHost:
handleCallStartedConnectingMessageFromHost:
handlePushHostedCallsMessageFromHost:
handleUpdateCallCapabilitiesMessageFromHost:
handleNeedsManualInCallSoundsChangeMessageFromHost:
handleInvitationSentMessageFromHost:
isLocal
audioSession
opaqueSessionID
category
setCategory:error:
mode
setMode:error:
activationContext
setActivationContext:error:
_audioSessionSetActiveOptionsForOptions:
setActive:withOptions:error:
setActiveDescriptor:
activeDescriptor
priority
setPriority:
setCategory:
setMode:
setActivationContext:
setActiveDescriptor:withOptions:
overrideOutputAudioPort:error:
interruptionPriority
avAudioSessionPriorityFromPriority:
setInterruptionPriority:error:
deactivateAndSetInterruptionPriority:error:
beginOrUpdateInterruptionWithDescriptor:
endInterruptionWithOptions:
resetState
isActive
initWithAudioSession:local:
setAudioSession:
setLocal:
_local
_activeDescriptor
_audioSession
_activationContext
intValue
initWithType:
setDestinationID:
setService:
setUniqueProxyIdentifier:
setSourceIdentifier:
boolValue
setDTMFKey:
setDisconnectedReason:
enumerateKeysAndObjectsUsingBlock:
setType:
pairedDeviceExists
setMessageSendTime:
type
receivedMessageType
service
providerWithService:video:
initWithProvider:
tuHandle
setHandle:
setVideo:
setAudioSourceIdentifier:
isVoicemail
setDialType:
isEmergency
isSOS
setSOS:
contactIdentifier
setContactIdentifier:
protoService
setProtoService:
protoWantsHoldMusic
setProtoWantsHoldMusic:
protoDisconnectedReason
setProtoDisconnectedReason:
protoCannotBeAnswered
setProtoCannotBeAnswered:
protoDTMFKey
bytes
setProtoDTMFKey:
protoVoicemail
setProtoVoicemail:
hardPauseState
setHardPauseState:
protoShouldSuppressRingtone
setProtoShouldSuppressRingtone:
protoNeedsManualInCallSounds
setProtoNeedsManualInCallSounds:
protoSoundRegion
setProtoSoundRegion:
protoCannotRelayAudioOrVideoOnPairedDevice
setProtoCannotRelayAudioOrVideoOnPairedDevice:
protoExpectedEndpointOnMessagingDevice
setProtoExpectedEndpointOnMessagingDevice:
initWithCallCapabilitiesState:
setProtoCallCapabilitiesState:
protoCallCapabilitiesState
protoEmergency
setProtoEmergency:
protoSOS
setProtoSOS:
protoCallModel
protoCallModelState
holdAllowed
mergeable
takingCallsPrivateAllowed
ambiguityState
addCallAllowed
sendToVoicemailAllowed
setProtoCallModel:
setProtoCallModelState:
setAmbiguityState:
setSwappable:
setMergeable:
setHoldAllowed:
setAddCallAllowed:
setTakingCallsPrivateAllowed:
setHardPauseAvailable:
setEndAndAnswerAllowed:
isHoldAndAnswerAllowed
setHoldAndAnswerAllowed:
setSendToVoicemailAllowed:
setStatus:
isConferenced
setConferenced:
setTuHandle:
wantsHoldMusic
setVoicemail:
callerNameFromNetwork
setCallerNameFromNetwork:
startTime
setStartTime:
setShouldSuppressRingtone:
setEmergency:
addProtoCall:
destinationID
destinationIdIsEmailAddress
initWithDictionary:
initWithType:uniqueProxyIdentifier:
receivedMessageTypeString
dialRequest
setCannotBeAnswered:
DTMFKey
customizeForProtocolVersion:
setCannotRelayAudioOrVideoOnPairedDevice:
isExpectedEndpointOnMessagingDevice
setExpectedEndpointOnMessagingDevice:
setCallCapabilitiesState:
setCallModel:
addCall:
setValue:
setHasType:
hasType
typeAsString:
StringAsType:
hasValue
_type
_value
callUpdateWithDefaultValuesSet
systemMuteStatusChanged:
hasVideo
sanitizedCallUpdate
updateWithCallUpdate:
baseDestinationID
initWithDialRequest:
endpointOnCurrentDevice
initOutgoingWithUniqueProxyIdentifier:callUpdate:isVideo:endpointOnCurrentDevice:
initWithStartCallAction:
callStatus
propertiesChanged
backingCallSource
displayCallSourceIdentifier
mergedCallUpdate
updateWithUpdate:
model
handleUpdatedPropertiesAfterChangesInBlock:
hasStartedOutgoing
hasStartedConnecting
isTelephonyProvider
failureContext
failureReason
endedReasonUserInfoForCall:
localizedCallerName
callHistoryIdentifier
pauseDigitsQueue
originalPauseDigitsString
stringByAppendingString:
hasSet
isUsingBaseband
isWiFiCallingCurrentlyAvailable
isBlocked
isSystemProvider
videoStreamToken
audioInterruptionProvider
audioInterruptionOperationMode
audioInterruptionProviderType
audioSessionID
retrieveSessionWithID:
audioCategory
proxyAVAudioSession
audioMode
requiresInCallSounds
inCallSoundRegion
ttyType
handoffContext
handoffIdentifier
providerCallDelegate
providerWithIdentifier:
backingProvider
timeIntervalSinceReferenceDate
timeIntervalSinceDate:
timeIntervalSinceNow
dateStartedOutgoing
dateSentInvitation
nextPauseDigits
isHardPause
digits
hasQueuedHardPauseDigits
sendingVideo
sharedAudioSystemController
isUplinkMuted
isUnderlyingUplinkMuted
isDownlinkMuted
processIdentifier
callGroupUUID
setDateStartedOutgoing:
setDateSentInvitation:
_sendSoftPauseDigitsIfNecessary
updateForDisconnection
uniqueProxyIdentifierUUID
initWithCallUUID:relaying:
performCallAction:forCall:
isVideoUpgradeFromCall:
anyCallPassesTest:
initWithCallUUID:handle:
setRelay:
setUpgrade:
setTTYType:
dialType
dialWithRequest:
callSourceForDialRequest:
setBackingCallSource:
startCallActionWithDialRequest:
performStartCallAction:forCall:
beginWithCompletionHandler:
answerWithRequest:
initWithCallUUID:
hold
_setIsOnHold:
unhold
initWithCallUUID:onHold:
dequeueAllPauseDigits
groupWithOtherCall:
initWithCallUUID:callUUIDToGroupWith:
ungroup
disconnectWithReason:
initWithCallUUID:sendingVideo:
setUnderlyingUplinkMuted:
initWithCallUUID:muted:
setUplinkMuted:
setDownlinkMuted:
_sendDTMFDigits:type:
stringWithCharacters:length:
initWithCallUUID:videoPresentationSize:
initWithCallUUID:videoPresentationState:
dequeueNextPauseDigits
initWithCallUUID:digits:type:
pauseDigitsQueueChanged:
initIncomingWithBackingCallSource:UUID:update:
initOutgoingWithDialRequest:
initOutgoingWithRequestedStartCallAction:
initWithHandoffContext:
canBeControlledByCallSource:
audioInterruptionActivationStateObserver
endedReasonUserInfo
isThirdPartyVideo
providerContext
displayProvider
callStatusFromUnderlyingSource
callDuration
isConnecting
isConnected
hasSentInvitation
callRelaySupport
providerProcessIdentifier
setHeld:
setCallGroupUUID:
setFailureContext:
sendHardPauseDigits
playDTMFToneForKey:
setProviderCallDelegate:
setDisplayCallSourceIdentifier:
setMergedCallUpdate:
setPauseDigitsQueue:
_held
_sendingVideo
_underlyingUplinkMuted
_video
_startTime
_callGroupUUID
_dateStartedOutgoing
_dateSentInvitation
_providerCallDelegate
_backingCallSource
_displayCallSourceIdentifier
_failureContext
_mergedCallUpdate
_pauseDigitsQueue
handleCallStatusChangedNotification:
handleCallStartedConnectingNotification:
handleCallConnectedNotification:
handleCallMayRequireBreakBeforeMakeChangedNotification:
_handleCallStatusChanged:
_handleCallStartedConnecting:
_handleCallConnected:
_handleCallMayRequireBreakBeforeMakeChanged:
wantsBreakBeforeMake
nonWifiFaceTimeAvailable
wiFiActiveAndReachable
objectForKey:
doubleValue
_setUpCallDurationLimitIfNecessary
callCenter
disconnectCall:
_disconnectOrPullExistingCallsForCallIfNecessary:
unsuppressRingtoneIfNecessary
hasCurrentCalls
_setUpBreakBeforeMakeTimerIfNecessaryForCall:
pullRelayingCallsFromClient
breakBeforeMakeTimeout
hasRestrictionsInRetailEnvironment
callDurationLimitTimer
_handleCallDurationTimerFired
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setCallDurationLimitTimer:
callsPassingTest:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
setUsesNotificationCenter:
setRepresentedApplicationBundle:
addUserNotification:listener:completionHandler:
_callDurationLimitTimer
initWithResolver:
updateAssertion
resolver
resolvedDescriptor
inCallStatusBarAssertionWithDescriptor:
assertion
statusString
setStatusString:
setAssertion:
acquireWithHandler:invalidationHandler:
resolutionChangedForResolver:
setResolver:
_resolver
_assertion
resolvedCallProvider
currentCallsHaveMixedProviders
resolvedCallProviderProcessIdentifier
assertionProcessIdentifier
inCallUIWantsStatusBarSuppression
assertionWithStatusBarStyleOverrides:forPID:exclusive:showsWhenForeground:
resolvedCallStatusBarString
setName:
modelIdentifier
setModelIdentifier:
uniqueIDOverride
setUniqueID:
phoneNumberURI
setPhoneNumberURI:
isDefaultPairedDevice
setDefaultPairedDevice:
initWithIDSDevice:
_setOnHold:
chat
addCallConnectedObserver
provisionalHoldStatus
removeCallConnectedObserver
handleCallConnected:
removeObserver:name:object:
imService
setBundleId:
setTimestamp:
setHasTimestamp:
hasTimestamp
hasBundleId
setHasFailureReason:
hasFailureReason
setActionType:
setHasActionType:
hasActionType
setProviderWasReset:
setHasProviderWasReset:
hasProviderWasReset
timestamp
bundleId
actionType
providerWasReset
_actionType
_failureReason
_timestamp
_bundleId
_providerWasReset
_categoryForCall:
initWithCategory:
_priorityForCall:providerType:
_usesLocalAudioSessionForCall:
providerType
operationMode
usesLocalAudioSession
isEqualToDescriptor:
activationStateObserver
isTTY
setProviderType:
setOperationMode:
setUsesLocalAudioSession:
setAudioSessionID:
setActivationStateObserver:
_wantsHoldMusic
_usesLocalAudioSession
_audioSessionID
_providerType
_category
_mode
_priority
_operationMode
_activationStateObserver
thumperCallingCapabilitiesChanged:
devicesChanged:
_updateThumperIsNowSupportedDefault
_updateThumperIsNowEnabledDefault
_updateDefaultPairedDeviceUniqueIDDefault
_checkIfDevicesShouldBeUnenrolled
initWithDomain:
domainAccessor
boolForKey:keyExistsAndHasValidFormat:
setBool:forKey:
synchronize
isThumperCallingEnabled
showReminderNotificationOnSecondaryDevice
removeReminderNotificationOnSecondaryDevice
_checkIfDevicesShouldBeEnrolled
showEmergencyAddressDisclaimerOnSecondaryDevice
removeEmergencyAddressDisclaimerOnSecondaryDevice
areCTCapabilitiesValid
supportsThumperCalling
_thumperIsNowSupported
_thumperIsNoLongerSupported
_thumperIsNowEnabled
_thumperIsNoLongerEnabled
defaultPairedDevice
_defaultPairedDeviceChanged
isThumperCallingAllowedOnDefaultPairedSecondaryDevice
thumperCallingAllowedOnDefaultPairedDeviceDefault
setThumperCallingAllowedOnDefaultPairedSecondaryDevice:
devices
valueForKey:
dataSource
localThumperAccount
allowedSecondaryDeviceIDs
setThumperCallingAllowed:onSecondaryDeviceWithID:
supportsThumperCallingOverCellularData
countForIdentifier:
response
requestPinFromPrimaryDevice
removeNotificationsForServiceIdentifier:
preferencesURL
setThumperCallingAllowedOnDefaultPairedDeviceDefault:
setDataSource:
setDomainAccessor:
_dataSource
_domainAccessor
UTF8String
addServiceDelegate:queue:
callerIDChanged:
addListenerID:forService:
serviceAvailabilityChanged:
_faceTimeAudioAvailability
_faceTimeVideoAvailability
_updateOutgoingCallerID
removeListenerID:forService:
faceTimeIDMatchesAppleID
outgoingCallerID
accountsChanged
updateOutgoingCallerIDAndSendDelegateCallbacksIfNecessary
faceTimeAvailabilityChanged
iCloudAccount
profileID
isEqualToIgnoringCase:
availabilityForListenerID:forService:
outgoingCallerIDChanged
availableOutgoingRelayCallerIDs
account
vettedAliases
localizedCaseInsensitiveCompare:
sortedArrayUsingSelector:
allObjects
caseInsensitiveCompare:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:
service:account:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
service:account:incomingTopLevelMessage:fromID:messageContext:
service:token:time:error:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
isFaceTimeAudioAvailable
isFaceTimeVideoAvailable
setOutgoingCallerID:
_outgoingCallerID
initWithDigits:isHardPause:
setDigits:
setHardPause:
_hardPause
_digits
initWithDataSource:queue:
callProviderManagerClientXPCInterface
setRemoteObjectInterface:
callProviderManagerServerXPCInterface
setExportedInterface:
setExportedObject:
setRequiredConnectionCapability:
setInterruptionHandler:
setInvalidationHandler:
asynchronousExportedObjectProxy
setAsynchronousServer:
synchronousExportedObjectProxy
setSynchronousServer:
initWithMachServiceName:
resume
providerManagerDataSource
registerProvider:
clientManager
acceptConnection:completion:
providersByIdentifier
addLocalClientObject:
providersChangedForDataSource:
updateProvidersByIdentifier:
performBlockOnClients:coalescedByIdentifier:
listener:shouldAcceptNewConnection:
providersByIdentifier:
registerClient:
xpcListener
setXpcListener:
setClientManager:
_xpcListener
_clientManager
applicationProxyForIdentifier:
machOUUIDs
setSession:
session
faceTimeProvider
failedToInitializeSession
invitedPushTokens
conference
isInitiator
idsCallDelegate
idsServiceForIDSCall:
underlyingErrorCode
setInvitationTimeOut:
invitationTimeOut
setIsKeyExchangeEnabled:
setIsAudioEnabled:
setIsVideoEnabled:
isVideoEnabled
setIsDuplexAudioOnly:
setIsRelayForced:
setIsRelayEnabled:
setIsAudioPausedToStart:
setRelaying:
_setLocalAspectRatiosForVideoAspectRatioDescriptor:
idsService
countryCode
phoneNumberWithDigits:countryCode:
unformattedInternationalRepresentation
IDSFormattedDestinationID
setWithObject:
dictionaryWithObjects:forKeys:count:
initWithAccount:destinations:options:
initAsInitiatorWithSession:
prepareConference
setFailedToInitializeSession:
_handlePushTokensInvited:didSendInvitation:didCancelInvitation:
cancelInvitationWithReason:
declineInvitation
setConference:
faceTimeAppUUID
setInvitedPushTokens:
invitedTokensCallback
setInvitedTokensCallback:
deviceForFromID:
idsDestination
initWithData:
inviteData
inviteDictionary
isWiFiAllowed
setWiFiAllowed:
isCellularDataAllowed
setCellularDataAllowed:
isCarPlayRouteAvailable
setCellularDataPreferred:
initWithInviteDictionary:
setInviteData:
data
sendDataAndSendInvitationIfNecessary:completion:declineOnError:
sendDataAndAcceptInvitationIfNecessary:completion:
idsCall:inputFrequencyLevelChangedTo:
idsCall:outputFrequencyLevelChangedTo:
idsCall:changedBytesOfDataUsed:
sessionStarted:
session:invitationSentToPushTokens:shouldBreakBeforeMake:
session:endedWithReason:previousState:
session:receivedInvitationAcceptWithData:
session:receivedInvitationDeclineWithData:fromDevice:
session:receivedInvitationCancelWithData:fromDevice:
session:receivedData:fromDevice:
initWithSession:remoteHandle:wantsVideo:
startWithAction:additionalPeers:
answerWithAction:
disconnect
cancelInvitationWithAnsweredElsewhere
cancelInvitationWithDeclinedElsewhere
setIdsCallDelegate:
reportedVideoStreamToken
setReportedVideoStreamToken:
reportedHasSentInvitation
setReportedHasSentInvitation:
reportedHasStartedConnecting
setReportedHasStartedConnecting:
reportedHasConnected
setReportedHasConnected:
reportedHasDisconnected
setReportedHasDisconnected:
_hasSentInvitation
_mayRequireBreakBeforeMake
_reportedVideoStreamToken
_reportedHasSentInvitation
_reportedHasStartedConnecting
_reportedHasConnected
_reportedHasDisconnected
_relaying
_failedToInitializeSession
_handle
_idsCallDelegate
_session
_invitedTokensCallback
_conference
_invitedPushTokens
removeAllObjects
objectAtIndex:
initWithCapacity:
numberWithDouble:
addOtherUniqueProxyIdentifiers:
setOBSOLETEConferenceIdentifier:
protoCallsCount
clearProtoCalls
protoCallAtIndex:
setDummyPayload:
otherUniqueProxyIdentifiersCount
clearOtherUniqueProxyIdentifiers
otherUniqueProxyIdentifiersAtIndex:
protoCallType
otherUniqueProxyIdentifiersType
hasUniqueProxyIdentifier
hasDestinationID
hasSourceIdentifier
hasProtoCallModelState
setHasProtoService:
hasProtoService
setHasProtoWantsHoldMusic:
hasProtoWantsHoldMusic
setHasProtoCannotBeAnswered:
hasProtoCannotBeAnswered
hasProtoDTMFKey
setHasProtoDisconnectedReason:
hasProtoDisconnectedReason
hasOBSOLETEConferenceIdentifier
setHasProtoVoicemail:
hasProtoVoicemail
hasCallerNameFromNetwork
hasHardPauseDigits
setHasHardPauseState:
hasHardPauseState
setReceivedMessageType:
setHasReceivedMessageType:
hasReceivedMessageType
receivedMessageTypeAsString:
StringAsReceivedMessageType:
setHasProtoProtocolVersion:
hasProtoProtocolVersion
setHasProtoShouldSuppressRingtone:
hasProtoShouldSuppressRingtone
hasDummyPayload
setHostCallCreationTime:
setHasHostCallCreationTime:
hasHostCallCreationTime
setHasMessageSendTime:
hasMessageSendTime
setHasProtoNeedsManualInCallSounds:
hasProtoNeedsManualInCallSounds
setHasProtoCannotRelayAudioOrVideoOnPairedDevice:
hasProtoCannotRelayAudioOrVideoOnPairedDevice
setHasProtoExpectedEndpointOnMessagingDevice:
hasProtoExpectedEndpointOnMessagingDevice
hasContactIdentifier
hasProtoCallCapabilitiesState
setHasProtoSoundRegion:
hasProtoSoundRegion
setHasProtoEmergency:
hasProtoEmergency
hasProtoCallModel
hasHandle
setHasProtoSOS:
hasProtoSOS
oBSOLETEConferenceIdentifier
setProtoCalls:
dummyPayload
otherUniqueProxyIdentifiers
setOtherUniqueProxyIdentifiers:
_hostCallCreationTime
_messageSendTime
_callerNameFromNetwork
_contactIdentifier
_destinationID
_dummyPayload
_hardPauseDigits
_hardPauseState
_oBSOLETEConferenceIdentifier
_otherUniqueProxyIdentifiers
_protoCallCapabilitiesState
_protoCallModel
_protoCallModelState
_protoCalls
_protoDTMFKey
_protoDisconnectedReason
_protoProtocolVersion
_protoService
_protoSoundRegion
_receivedMessageType
_sourceIdentifier
_uniqueProxyIdentifier
_protoCannotBeAnswered
_protoCannotRelayAudioOrVideoOnPairedDevice
_protoEmergency
_protoExpectedEndpointOnMessagingDevice
_protoNeedsManualInCallSounds
_protoSOS
_protoShouldSuppressRingtone
_protoVoicemail
_protoWantsHoldMusic
addHandoffIdentifier:
addEmergencyLabeledHandles:
setIdentifier:
setLocalizedName:
setBundleURLString:
setRingtoneSoundURLString:
setOriginalRingtoneSoundURLString:
handoffIdentifiersCount
clearHandoffIdentifiers
handoffIdentifierAtIndex:
protoSupportedHandleTypesCount
clearProtoSupportedHandleTypes
protoSupportedHandleTypeAtIndex:
addProtoSupportedHandleType:
emergencyLabeledHandlesCount
clearEmergencyLabeledHandles
emergencyLabeledHandlesAtIndex:
handoffIdentifierType
emergencyLabeledHandlesType
hasIdentifier
hasLocalizedName
hasBundleURLString
setMaximumCallGroups:
setHasMaximumCallGroups:
hasMaximumCallGroups
setMaximumCallsPerCallGroup:
setHasMaximumCallsPerCallGroup:
hasMaximumCallsPerCallGroup
setSupportsAudioOnly:
setHasSupportsAudioOnly:
hasSupportsAudioOnly
setSupportsAudioAndVideo:
setHasSupportsAudioAndVideo:
hasSupportsAudioAndVideo
setSupportsEmergency:
setHasSupportsEmergency:
hasSupportsEmergency
setSupportsVoicemail:
setHasSupportsVoicemail:
hasSupportsVoicemail
hasRingtoneSoundURLString
hasOriginalRingtoneSoundURLString
protoSupportedHandleTypes
setProtoSupportedHandleTypes:count:
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
setHandoffIdentifiers:
emergencyLabeledHandles
setEmergencyLabeledHandles:
_protoSupportedHandleTypes
_bundleURLString
_emergencyLabeledHandles
_handoffIdentifiers
_identifier
_localizedName
_maximumCallGroups
_maximumCallsPerCallGroup
_originalRingtoneSoundURLString
_ringtoneSoundURLString
_supportsAudioAndVideo
_supportsAudioOnly
_supportsEmergency
_supportsVoicemail
setSessionMessenger:
sessionMessenger
setPairedDeviceMessenger:
pairedDeviceMessenger
handleFakeIncomingMessageNotification
handleFakeOutgoingMessageNotification
_handleConferenceConnectionWillClose:
_handleConferenceConnectionDidClose:
dialingIDSDevice
prepareConnectedSessionsToEnd
endEndingSessions
setDialingIDSDevice:
isPairedDevice
outgoingRelayCallerID
linkedUserURIs
_stripFZIDPrefix
deviceWithActiveSession
pairedDevice
sendMessage:completionHandler:
sendMessage:andStartSessionIfNecessaryForIdentifier:toDevicesSupportingService:withTimeout:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:completionHandler:
_shouldSendToPairedIDSDevice
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier:
sendMessage:andStartSessionIfNecessaryForIdentifiers:toDevice:timeout:completionHandler:
hostMessagingDelegate
pushHostedCalls
_updateDialingIDSDevice
sendMessage:andStartSessionIfNecessaryForIdentifier:toDevice:timeout:completionHandler:
cannotRelayAudioOrVideo
sendMessage:andAcceptInvitationIfNecessaryForIdentifier:
sessionProtocolVersionForIdentifier:
callWithStatus:
isFaceTimeProvider
sendHoldCallMessageToHostForCall:
sendAnswerCallMessageToHostForCall:
sendMessage:timeout:completionHandler:
clientMessagingDelegate
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
canReceiveRelayedCalls
reportRelayMessageReceived:fromPairedDevice:
acceptInvitationForIdentifier:
handleDialCallMessageFromClient:fromPairedDevice:completion:
handleAnswerCallMessageFromClient:fromPairedDevice:
handlePlayDTMFToneForKeyMessageFromClient:
handleHoldCallMessageFromClient:
handleUnholdCallMessageFromClient:
handleGroupCallMessageFromClient:
handleUngroupCallMessageFromClient:
handleDisconnectCallMessageFromClient:
handleSwapCallsMessageFromClient:
handleEndActiveAndAnswerMessageFromClient:
handleEndHeldAndAnswerMessageFromClient:
handleDisconnectCurrentCallAndActivateHeldMessageFromClient:
handleDisconnectAllCallsMessageFromClient:
handleSendHardPauseDigitsMessageFromClient:
commonMessagingDelegate
handleSuppressRingtoneMessage:
handleRequestCallStateMessageFromClient:
handlePullHostedCallsMessageFromClient:
handlePushRelayingCallsMessageFromClient:
handleHoldActiveAndAnswerMessageFromClient:
shouldDeclineSessionInviteWithMessageWhenRelayIsDisabled:
_callsWithUniqueProxyIdentifiers:
messagingConnectionEndedForCalls:didStartConnecting:
messagingConnectionFailedForCalls:didStartConnecting:
messagingConnectionCouldNotEstablishLinkForCalls:didStartConnecting:
_shouldDeclineSessionInviteWithMessage:
allowCallForDestinationID:providerIdentifier:isFromBlockList:
shouldPreferRelayOverDirectSecondaryCallingForProvider:
isDirectTelephonyCallingCurrentlyAvailable
isThumperCallingCurrentlyAvailable
isVoLTECallingCurrentlyAvailable
isCSCallingCurrentlyAvailable
isDirectFaceTimeAudioCallingCurrentlyAvailable
availableSocket
performBlockOnSocketAvailability:forIdentifier:
_messengerForType:
deviceWithUniqueID:
messenger:handledMessage:fromDevice:
messengerConnectionEnded:forIdentifiers:didStartConnecting:
messengerConnectionFailed:forIdentifiers:didStartConnecting:
messengerConnectionCouldNotEstablishLink:forIdentifiers:didStartConnecting:
shouldDeclineSecondSessionInviteWithMessage:
shouldIgnoreSessionInviteWithMessage:
timeoutForInvitationWithMessage:
identifiersForSessionInvitationWithMessage:
_relayInvitationTimeoutForTimeout:
sendIncomingCallMessageToClientForCall:cannotBeAnswered:cannotRelayAudioOrVideoOnPairedDevice:
sendCallDialedMessageToClientForCall:
sendCallAnsweredElsewhereMessageToClientForCall:
sendCallDisconnectedMessageToClientForCall:
sendCallConnectedMessageToClientForCall:
sendResetWantsHoldMusicMessageToClientForCall:
sendUpdateCallModelMessageToClientForCall:
sendDeviceUnavailableMessageToClientForUniqueProxyIdentifier:
sendPullRelayingCallsMessageToClient
sendResetStateMessageToClient
sendHardPauseAvailabilityMessageToClientForState:digits:
sendUpdateRemoteCallStateMessageToClient
sendCallStartedConnectingMessageToClientForCall:
sendDialCallFailedForUniqueProxyIdentifier:
sendPushCallsMessageToClient
sendUpdateCallCapabilitiesMessageToClient
sendNeedsManualInCallSoundsChangeMessageToClientForCall:
sendInvitationSentMessageToClientForCall:
sendDialCallMessageToHostForCall:completionHandler:
sendPlayDTMFToneForKeyMessageToHostForCall:DTMFKey:
sendDisconnectCallMessageToHostForCall:
sendUnholdCallMessageToHostForCall:
sendGroupCallMessageToHostForCall:otherCall:
sendUngroupCallMessageToHostForCall:
sendSwapCallsMessageToHost
sendEndActiveAndAnswerCallMessageToHostForCall:
sendEndHeldAndAnswerCallMessageToHostForCall:
sendHoldActiveAndAnswerCallMessageToHostForCall:
sendDisconnectCurrentCallAndActivateHeldMessageToHostForDisconnectedCall:
sendDisconnectAllCallsMessageToHostForDisconnectedCall:
sendSendHardPauseDigitsMessageToHostForCall:
sendRequestCallStateMessageToHost
sendPullCallsMessageToHost
sendPushRelayingCallsMessageToHostForSourceIdentifier:
sendSuppressRingtoneMessageForCall:
setClientMessagingDelegate:
setHostMessagingDelegate:
setCommonMessagingDelegate:
fakeIncomingMessageNotifyToken
setFakeIncomingMessageNotifyToken:
fakeOutgoingMessageNotifyToken
setFakeOutgoingMessageNotifyToken:
_fakeIncomingMessageNotifyToken
_fakeOutgoingMessageNotifyToken
_clientMessagingDelegate
_hostMessagingDelegate
_commonMessagingDelegate
_sessionMessenger
_pairedDeviceMessenger
_dialingIDSDevice
setSKEBlob:
setMediaBlob:
setCallInfoBlob:
sKEBlob
mediaBlob
callInfoBlob
handleFailureInFunction:file:lineNumber:description:
recentsController
clearNotificationsIfNecessary
voipApplicationController
handleApplicationUninstalledNotification:
handleCTCallEndedInDoNotDisturbNotification:
setCallStateMonitor:
setRelayMessagingController:
addReporter:
setStatusBarManager:
setCallDirectoryManager:
setCallDirectoryExtensionManager:
callDirectoryExtensionManager
setDelegate:queue:
beginMatchingExtensions
setVoipApplicationController:
setRelayClientController:
relayClientController
setRelayHostController:
relayHostController
setRelayCommonController:
relayCommonController
setAudioInterruptionController:
audioInterruptionController
_setUpLoggingListener
_setUpLanguageChangeListener
handleAllNewCalls
shouldLogChangedObserver
string
registerForShouldLogChangedNotification
mainQueue
addObserverForName:object:queue:usingBlock:
setShouldLogChangedObserver:
enablePhoneLogging
callDirectoryManager
synchronizeExtensionsWithCompletionHandler:
extensionsChangedForCallDirectoryExtensionManager:
callStateMonitor
statusBarManager
_callStateMonitor
_relayMessagingController
_relayClientController
_relayHostController
_relayCommonController
_statusBarManager
_callDirectoryManager
_callDirectoryExtensionManager
_voipApplicationController
_shouldLogChangedObserver
_audioInterruptionController
isLoaded
startBagLoad
cachedCalls
_isCallSupported:
callWithUUID:
isCallActive:
serverBag
compare:
callWithHandle:status:
initWithUniqueProxyIdentifier:
dataActiveAndReachable
initAsReceiverWithSession:initiatingProtocolVersion:
_updateProviderWithInvitationSentForCallIfNecessary:
_updateProviderForConnectingCallIfNecessary:
_updateProviderForConnectedCallIfNecessary:
_updateProviderForDisconnectedCallIfNecessary:
TUCallRemoteVideoPresentationStateFromCXVideoPresentationState:
wifiAllowedForBundleId:
inviteIDSPeersWithAction:additionalPeers:completion:
setCachedCalls:
setServerBag:
_cachedCalls
_serverBag
hasSKEBlob
hasMediaBlob
hasCallInfoBlob
_callInfoBlob
_mediaBlob
_sKEBlob
initWithComponentId:andBlockOnConfiguration:
setServerConnection:
setUpQueriableMetrics
_awdRelayMessageTypeForMessageType:
setMessageType:
_awdCallServiceForService:
setCallService:
setLatencyMs:
_reportMetricId:usingBlock:
displayContext
_awdCallInfoForCall:
_awdCallInfoSourceForDisplayContext:
callDirectoryLabel
callDirectoryExtensionIdentifier
setCallInfo:
setCallInfoSource:
setCallDirectoryProviderBundleId:
callSources
transactionForCallSource:
actions
_awdActionTypeForAction:
_awdActionStateForState:
_awdFailureReasonForAction:
commitDate
setCompletionTimeMs:
addActions:
setFailed:
setTimedOut:
serverConnection
addCalls:
newMetricContainerWithIdentifier:
setMetric:
submitMetric:
registerQueriableMetric:callback:
_awdFaceTimeTransportTypeForFaceTimeTransportType:
_awdTelephonyTransportTypeForTelephonyCallSubType:
contactName
mapName
suggestedName
location
_serverConnection
setAccountID:
setPrimaryDeviceID:
setPhoneNumber:
setPhoneNumberMCC:
setPhoneNumberISOCountryCode:
setAvailableDeviceSlots:
setMutableAllowedSecondaryDeviceIDs:
phoneNumberISOCountryCode
phoneNumber
phoneNumberMCC
accountID
primaryDeviceID
availableDeviceSlots
mutableAllowedSecondaryDeviceIDs
addAllowedSecondaryDeviceID:
_accountID
_primaryDeviceID
_phoneNumberURI
_availableDeviceSlots
_mutableAllowedSecondaryDeviceIDs
_phoneNumber
_phoneNumberMCC
_phoneNumberISOCountryCode
initWithSerialQueue:timeout:
serialQueue
callSourceWithIdentifier:
_fetchCallSourceForExtensionIdentifier:containingAppBundle:completion:
_waitForCallSourceWithIdentifier:completion:
pendingCompletions
timeout
bundlePath
initWithExtension:
extensionsWithMatchingAttributes:completion:
initWithSerialQueue:
fetchCallSourceForIdentifier:containingAppBundle:extensionIdentifier:completion:
handleCallSourcesChanged
setSerialQueue:
setTimeout:
setPendingCompletions:
_serialQueue
_timeout
_pendingCompletions
rangeOfString:
normalizedDeviceType
setRelayCallingEnabled:forDeviceWithID:
_unenrollDeviceWithUniqueID:
updateUINotification
stringByAppendingFormat:
arrayWithObject:
dictionaryWithObjectsAndKeys:
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
responseInformation
activateServiceWithPrimaryDevice:
updateCallerID:
setRelayCallingEnabled:
setThumperCallingEnabled:
supportsPhoneCalls
uriForFromID:
ctServiceType
serviceDescription
displayPinMessageForDevice:completionHandler:
enrollDevice:
unenrollDevice:
displayServiceConfirmationWithCompletionHandler:
displayPinRequestFailure
displayIncomingPinCode:fromID:completionHandler:
pinCodeEnteredSuccessfully:cancelled:onPrimaryDevice:
resetOneTimeMessage
launchFaceTime
_thumperCallingAllowedOnDefaultPairedDeviceDefault
setProtoStatus:
setHasProtoStatus:
hasProtoStatus
setProtoConferenced:
setHasProtoConferenced:
hasProtoConferenced
setHasStartTime:
hasStartTime
setProtoOutgoing:
setHasProtoOutgoing:
hasProtoOutgoing
setProtoHasSentInvitation:
setHasProtoHasSentInvitation:
hasProtoHasSentInvitation
protoStatus
protoConferenced
protoOutgoing
protoHasSentInvitation
_protoStatus
_protoConferenced
_protoHasSentInvitation
_protoOutgoing
setBackingProvider:
canBeAnsweredWithAudioOrVideoRelayWithRequest:
canOnlyBeAnsweredWithoutAudioOrVideoRelayWithRequest:
hasRelaySupport:
relayDelegate
relayCall:didGroupWithOtherCall:
relayCallDidUngroup:
isMutedForIdentifier:
setMuted:forIdentifier:
isSendingAudioForIdentifier:
setSendingAudio:forIdentifier:
setCallStatus:
relayCallDidDial:
relayCall:didAnswerWithRequest:
relayCallDidDisconnect:
relayCallConferenceDidStartSuccessfullyForIncomingAnsweredCall:
relayCallConferenceFailedToStart:
relayCallConferenceDidStop:cleanly:error:
startConferenceForCall:withSocket:didStartHandler:didStopHandler:
relayCallConferenceDidStartSuccessfullyForOutgoingDialedCall:
relayCallConferenceDidStartSuccessfullyForPulledCall:
relayCallDidHold:
relayCallDidUnhold:
relayCall:didPlayDTMFToneForKey:
relayCallDidSendHardPauseDigits:
relayCallDidBecomeEndpointForPull:
setConnecting:
setConnected:
setLocallyDisconnectedWithReasonIfNone:stopConference:
prepareToStopConferenceForIdentifier:
canBeAnsweredWithRequest:
setHasStartedOutgoing:
startConferenceForAnsweredCallWithSocket:
startConferenceForDialedCallWithSocket:
startConferenceForPulledCallWithSocket:
setRelayDelegate:
_voicemail
_emergency
_sos
_hasStartedOutgoing
_needsManualInCallSounds
_cannotRelayAudioOrVideo
_callStatus
_backingProvider
_relayDelegate
_parsePauseDigitsFromDestinationID:
pauseDigits
appendString:
removeFirstObject
characterSetWithCharactersInString:
formUnionWithCharacterSet:
rangeOfCharacterFromSet:options:range:
substringWithRange:
characterAtIndex:
characterIsMember:
insertObject:atIndex:
setBaseDestinationID:
setOriginalPauseDigitsString:
setPauseDigits:
_baseDestinationID
_originalPauseDigitsString
_pauseDigits
initWithObject:queue:
connection
processName
setProcessName:
processBundleIdentifier
setProcessBundleIdentifier:
valueForEntitlement:
setEntitlements:
propertiesDescription
entitlements
remoteObjectProxy
addBarrierBlock:
initWithConnection:queue:
isRemote
objectForBlock
performBlockAfterCoalescing:
isEntitledForCapability:
_processName
_processBundleIdentifier
_entitlements
sharedUtilityProvider
utilityProvider
currentPreferredTransportMethod
transportMethod
bundleURL
absoluteString
ringtoneSoundURL
originalRingtoneSoundURL
supportedHandleTypes
setSupportedHandleTypes:
initWithIdentifier:
URLWithString:
setBundleURL:
isFileURL
bundleWithURL:
setBundleIdentifier:
setRingtoneSoundURL:
setOriginalRingtoneSoundURL:
setWithCapacity:
removeServiceDelegate:
pairedDeviceUniqueIDOverrideExists
removeObjectForKey:
_sendMessageOptionsWithTimeout:
sendData:toDestinations:priority:options:identifier:error:
updateMockCallWithProxyCall:
confirmAllPendingMessagesReceivedWithReply:
interfaceWithProtocol:
updateWithCall:
currentClient
callForProxyCall:
proxyAVAudioSessionInterruptionProviderForAudioSessionID:
localAVAudioSessionInterruptionProvider
avAudioClientInterruptionProvider
callStateContext
_registerCallStopEvent
_registerCallStartEventForCall:
visibilityContext
_registerCallBackgroundedEvent
_registerCallForegroundedEventForCall:
eventBlock
_contextDictionaryWithCall:
setCallStateContext:
_registerEventWithContext:status:
setVisibilityContext:
_bundleIdentifierForCall:
setEventBlock:
_eventBlock
_callStateContext
_visibilityContext
providerConfiguration
initWithIdentifier:callSource:configuration:
initWithLocalizedName:
setSupportsVideo:
setWithObjects:
reportAudioFinishedForCallWithUUID:
contactStore
unifiedContactWithIdentifier:keysToFetch:error:
personFromContact:
callIdentifierWithContactIdentifier:
reportOutgoingCallWithUUID:startedConnectingAtDate:
faceTimeIDSProviderDelegate
faceTimeIMAVProviderDelegate
reportCallWithUUID:failedAtDate:withContext:
reportCallWithUUID:endedAtDate:privateReason:
deferReportingAudioFinishedForCallWithUUID:
additionalPeersForContactIdentifier:
initWithCallSource:
setContactStore:
setFaceTimeIDSProviderDelegate:
setFaceTimeIMAVProviderDelegate:
_contactStore
_faceTimeIDSProviderDelegate
_faceTimeIMAVProviderDelegate
setPendingPayloads:
initWithBundleIDs:states:
setApplicationStateMonitor:
applicationStateMonitor
applicationStateForApplication:
_updateIsRunningForApplicationState:
setHandler:
environment
client
isRunning
token
pendingPayloads
bundleWithIdentifier:
infoDictionary
_deliverTokenToApplication
_deliverPendingPayloadsToApplication
setToken:
voipRegistrationSucceededWithDeviceToken:
voipPayloadReceived:
setRunning:
initWithBundleIdentifier:queue:
hasVoIPEntitlement
setClient:
deliverToken:
deliverPayload:
setEnvironment:
_running
_token
_environment
_client
_pendingPayloads
_applicationStateMonitor
initWithTriggers:
initWithCallCenterObserver:
updateResolvedDescriptor
callDurationUpdateTimer
resolvedCall
_statusBarStringForCall:
setResolvedCallStatusBarString:
setResolvedCallProvider:
setResolvedCallProviderProcessIdentifier:
setCurrentCallsHaveMixedProviders:
inCallServiceWantsStatusBarSuppression
setInCallUIWantsStatusBarSuppression:
setResolvedDescriptor:
setCallDurationUpdateTimer:
callCenterObserver
inCallServiceWantsStatusBarSuppressionState
callDurationString
callCenterObserver:callChanged:
callsChangedForCallCenterObserver:
setCallCenterObserver:
setInCallServiceWantsStatusBarSuppressionState:
inCallServiceWantsStatusBarSuppressionToken
setInCallServiceWantsStatusBarSuppressionToken:
_inCallServiceWantsStatusBarSuppressionToken
_resolvedDescriptor
_callCenterObserver
_callDurationUpdateTimer
_inCallServiceWantsStatusBarSuppressionState
setConferenceConnections:
uplinkMutedStatusChanged:
_cleanUpConference
_conferenceConnectionForIdentifier:
conferenceConnections
getIsAudioPaused:callID:error:
setPauseAudio:callID:error:
hasActiveConference
setConferenceActiveForIdentifier:
invokeDidStartIfNecessary:error:
_startConferenceForConferenceConnection:withSocket:
setDidStartHandler:
setDidStopHandler:
startConferenceConnection:withSocket:
setUsingBaseband:
setAudioDisabled:
updateCapabilities:forCallID:
isAudioDisabled
updateConferenceForIdentifier:isUsingBaseband:disableAudio:
setPreparedToStop:
isPreparedToStop
_cleanUpAllConferenceConnectionsWithError:
_cleanUpConferenceConnection:error:
isHost
initWithClientUUID:transportType:
setCallID:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:error:
_setUpDidStartTimeoutForConference:conferenceConnection:
receivedSuccessfulDidStart
errorWithDomain:code:userInfo:
invokeDidStopIfNecessary:error:
_endConference
stopCallID:
setHasActiveConference:
_shouldIgnoreAVConferenceError:
conference:withCallID:remoteMediaStalled:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:updateInputFrequencyLevel:
conference:updateOutputFrequencyLevel:
conference:receivedFirstRemoteFrameForCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteAudioPaused:callID:
conference:remoteVideoPaused:callID:
serverDiedForConference:
conference:inititiateRelayRequest:requestDict:
conference:sendRelayUpdate:updateDict:
conference:cancelRelayRequest:requestDict:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:networkHint:
conference:localIPChange:withCallID:
conference:didStartSession:withCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:didReceiveARPLData:withCallID:
conference:didReceiveData:forCallID:
conference:didChangeLocalVariablesForCallID:
conference:remoteAudioEnabled:forCallID:
conference:localAudioEnabled:forCallID:error:
conference:remoteCallingModeChanged:forCallID:
conference:reinitializeCallForCallID:
conference:closeConnectionForCallID:
conference:updateInputMeterLevel:
conference:updateOutputMeterLevel:
conference:isRemoteAudioBelowThreshold:
_hasActiveConference
_conferenceConnections
_callID
URLForDirectory:inDomain:appropriateForURL:create:error:
URLByAppendingPathComponent:isDirectory:
URLByStandardizingPath
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
defaultManager
initWithName:fileManager:error:
lastPathComponent
urlForFilename:
fileManager
path
fileExistsAtPath:
getResourceValue:forKey:error:
removeItemAtURL:error:
linkItemAtURL:toURL:error:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
minusSet:
URLByAppendingPathComponent:
initWithName:error:
createLinkIfNecessaryWithFilename:toURL:error:
removeLinksForFilenamesNotInArray:error:
setURL:
setFileManager:
_URL
_fileManager
sendPinCodeToDeviceAndPromptForResponse:
idsDeviceFromUniqueID:
accountsSupportSecondaryCalling
displayMismatchedAccountsNotification
pinExchangeDelegate
sendIDSAction:toDevice:
allIDSTelephonyDevices
uniqueID
sendApprovalDisplayPinToDevice:
_numberForKey:
numberFromString:
isEqualToNumber:
displayPinErrorNotification
sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:
pendingCodesToDevicesForApproval
randomSixDigitCode
sendIDSAction:toDevices:
dictionaryWithObject:forKey:
_FTCopyGzippedData
__imSetFromArray
sendMessage:fromAccount:toDestinations:priority:options:identifier:error:
displayErrorNotificationWithMessage:
_FTDecompressData
isHSATrusted
enrollSecondaryDeviceInService:
cancelPinRequests
handlePINCodeEnteredSuccessfully:canceled:fromDevice:isPrimaryDevice:
initWithDelegate:
unenrollSecondaryDeviceInService:
requestPinFromDevice:
displaySlotsFullNotification
setPendingCodesToDevicesForApproval:
setPinExchangeDelegate:
outgoingPinRequestIdentifier
setOutgoingPinRequestIdentifier:
_pendingCodesToDevicesForApproval
_pinExchangeDelegate
_outgoingPinRequestIdentifier
setHasCompletionTimeMs:
hasCompletionTimeMs
setHasState:
hasState
completionTimeMs
_completionTimeMs
setAccountsController:
accountsController
setTelephonyCallCapabilities:
telephonyCallCapabilities
deviceListChanged:
deviceCapabilityChanged:
_initializePairedHostDeviceState
_updateState
callCapabilitiesClientXPCInterface
callCapabilitiesServerXPCInterface
_setClientServer:
setThumperPushHandler:
thumperPushHandler
setThumperPinExchangeController:
setThumperCapabilitiesMonitor:
thumperCapabilitiesMonitor
pairedHostDeviceState
publiclyAccessibleCopy
capabilityStateUpdated:
_setWiFiCallingEnabled:
_setWiFiCallingRoamingEnabled:
_setVoLTECallingEnabled:
_setThumperCallingEnabled:
_setRelayCallingEnabled:
_setThumperCallingAllowed:onSecondaryDeviceWithID:
_setThumperCallingAllowedOnDefaultPairedDevice:
_setRelayCallingEnabled:forDeviceWithID:
endEmergencyCallbackMode
invalidateAndRefreshWiFiCallingCapabilities
invalidateAndRefreshThumperCallingCapabilities
_primaryThumperAccountRequiringAvailableDeviceSlots
thumperPinExchangeController
thumperAccounts
_updateDynamicCapabilitiesAndUpdateClients
_updateHostingAndDisplayingSupport
_updateClientsWithState
_updateCTSystemCapabilities
_updateCallAvailability
_updateRelayCapabilities
_updateCTCapabilities
_isTelephonyDevice
setTelephonyDevice:
_supportsCellularData
setSupportsCellularData:
_supportsDisplayingTelephonyCalls
setSupportsDisplayingTelephonyCalls:
_supportsDisplayingFaceTimeAudioCalls
setSupportsDisplayingFaceTimeAudioCalls:
_supportsDisplayingFaceTimeVideoCalls
setSupportsDisplayingFaceTimeVideoCalls:
isTelephonyDevice
_defaultOverrideForDisableDefault:forceDefault:
supportsCellularData
callingSupported
faceTimeSupported
setFaceTimeAudioAvailable:
setFaceTimeVideoAvailable:
areCapabilitiesValid
setCtCapabilitiesValid:
wiFiCallingCapabilityInfo
setWiFiCallingCapabilityInfo:
voLTECallingCapabilityInfo
setVoLTECallingCapabilityInfo:
thumperCallingCapabilityInfo
setThumperCallingCapabilityInfo:
localThumperDeviceID
setThumperCallingLocalDeviceID:
setThumperCallingAllowedSecondaryDeviceIDs:
setCanEnable:
setWiFiCallingCurrentlyAvailable:
setThumperCallingCurrentlyAvailable:
setCsCallingCurrentlyAvailable:
setVoLTECallingCurrentlyAvailable:
isWiFiEmergencyCallingAvailable
setWiFiEmergencyCallingAvailable:
isWiFiEmergencyCallingSupported
setWiFiEmergencyCallingSupported:
_supportsThumperCalling
setSupportsThumperCalling:
_isThumperCallingAllowedForCurrentDevice
setThumperCallingAllowedForCurrentDevice:
isRelayCallingEnabled
isThumperCallingAllowedForCurrentDevice
isEnabled
_primaryThumperAccountRequiringMatchingCallerID
_setThumperCallingAccountID:
supportsSimultaneousVoiceAndData
setSupportsSimultaneousVoiceAndData:
isEmergencyCallbackModeEnabled
setEmergencyCallbackModeEnabled:
setWiFiCallingEnabled:
setVoLTECallingEnabled:
isRoamingEnabled
setWiFiCallingRoamingEnabled:
setThumperCallingAccountID:
thumperCallingAllowedSecondaryDeviceIDs
cloudCallingDevices
canEnable
_primaryThumperAccount
supportsRelayCalling
thumperCallingLocalDeviceID
_primaryThumperAccountRequiringMatchingCallerID:requiringAvailableDeviceSlots:
primaryThumperAccountUsingDevices:outgoingCallerIDURI:requireMatchingCallerIDURI:requireAvailableDeviceSlots:
_supportsRelayCalling
setSupportsRelayCalling:
_relayCallingEnabledDefault
setRelayCallingAvailability:
setSupportsFaceTimeAudioRelayCalling:
setSupportsFaceTimeVideoRelayCalling:
setSupportsTelephonyRelayCalling:
_relayCallingDisabledForDeviceIDDefault
setRelayCallingDisabledForDeviceID:
setOutgoingRelayCallerID:
setPairedDeviceExists:
_accountsMatchForSecondaryCalling
setAccountsMatchForSecondaryCalling:
_cloudCallingDevices
setCloudCallingDevices:
defaultPairedDeviceExists
telephonyCapableDeviceExists
relayCapableDeviceExists
sortedArrayUsingComparator:
_setRelayCallingEnabledDefault:
relayCallingDisabledForDeviceID
_setRelayCallingEnabledDefault:forDeviceWithID:
callCapabilitiesState:
setThumperCallingAllowedOnDefaultPairedDevice:
invalidateAndRefreshWiFiCallingProvisioningURL
invalidateAndRefreshThumperCallingProvisioningURL
cancelPinRequestFromPrimaryDevice
telephonyCallCapabilitiesChanged
updateState
_savePairedHostDeviceState
setPairedHostDeviceState:
_pairedHostDeviceState
_accountsController
_telephonyCallCapabilities
_thumperPushHandler
_thumperPinExchangeController
_thumperCapabilitiesMonitor
invite:additionalPeers:
setChat:
_setLocalAspectRatiosFromRequest:
_inviteWithCallIdentifier:
faceTimeCallDelegate
faceTimeCallDidDial:
endedReasonString
remoteParticipant
remoteParticipants
localParticipant
person
recordID
controller
statsForCallID:
sourceAccount
abUID
setValue:forKey:
faceTimeIDStatus
localFrequency
remoteFrequency
callStats
endedErrorString
setFaceTimeCallDelegate:
_faceTimeCallDelegate
_chat
isValid
setDialRequest:
isDialAssisted
setWasDialAssisted:
audioSourceIdentifier
setCompletionHandler:
start
transitionStatus
setTransitionStatus:
wasDialAssisted
setFaceTimeIDStatus:
hasAudioFinished
setHasAudioFinished:
hasUpdatedAudio
setHasUpdatedAudio:
shouldOverrideCallStatus
callStatusFromOverride
_refreshFaceTimeIDSStatusIfNecessary
faceTimeIDStatusRefreshed
setFaceTimeIDStatusRefreshed:
currentIDStatusForDestination:service:listenerID:queue:completionBlock:
initWithCall:serialQueue:
initWithUUID:
setOnHold:
setDisplayContext:
displayContextChanged:
updateWithProxyCall:
audioInterruptionRequiresDelayedEnd
bytesOfDataUsed
setBytesOfDataUsed:
_faceTimeIDStatusRefreshed
_displayContext
_dialRequest
_bytesOfDataUsed
audioDeviceController
addDelegate:
pickableRoutesDidChangeNotification:
preferredExternalRouteDidChangeNotification:
carPlayIsConnectedChanged:
serverConnectionDiedNotification:
_initializeAudioRouteCollections
_updatePickableRoutes
_updateCarPlayDeviceConnected
_audioRouteCollectionForCall:
isAnyRouteAvailableWithUniqueIdentifier:
isCarPlayDeviceConnected
_isAnyAudioDevicePreferred
isAnyPreferredRouteAvailableAndActive
audioRouteCollections
allValues
preferredAndActiveRoute
isAnyRouteAvailableWithBluetoothEndpointType:
_postNotificationName:
updatePickableRoutes
initWithCategory:mode:
isPreferredDevice
setAudioRouteCollections:
sharedAVSystemController
attributeForKey:
setCarPlayDeviceConnected:
audioDeviceControllerDeviceListChanged:
isAnyRouteAvailableWithUniqueIdentifier:forCall:
isAnyPreferredRouteAvailableAndActiveForCall:
isAnyPreferredRouteAvailableAndActiveForAnyCall
preferredAndActiveAudioRouteForCall:
isAnyVehicleRouteAvailableForCall:
_carPlayDeviceConnected
_audioRouteCollections
setUniqueId:
setCallerId:
handleTypeForTUHandle:
setHandleType:
setIsoCountryCode:
setDuration:
setServiceProvider:
setMediaType:
setTtyType:
dateWithTimeIntervalSinceNow:
setDate:
setRead:
setCallerNetworkName:
setCallerIdAvailability:
uniqueId
mediaType
callMediaTypeAsString:
callTTYTypeAsString:
callerId
callerNameForDisplay
callerIdSubStringForDisplay
callerIdIsBlocked
addressBookRecordId
setCallIdentifier:
providerForRecentCall:
handleType
descriptionForShortcutItem
dialRequestForRedial
setHasProtocolVersion:
hasProtocolVersion
setHasMessageType:
hasMessageType
setHasCallService:
hasCallService
setHasLatencyMs:
hasLatencyMs
messageType
latencyMs
_latencyMs
_protocolVersion
_callService
_messageType
setHasProtoWantsVideo:
hasProtoWantsVideo
hasInviteData
_inviteData
_protoWantsVideo
faceTimeAudioAvailable
faceTimeVideoAvailable
isPreferred
preferredRouteOptions
routeDictionaries
_audioRoutePassingTest:
isReceiver
_anyAudioRoutePassesTest:
isSpeaker
isWirelessHeadset
isAirTunes
isCarAudio
isBluetooth
bluetoothEndpointType
uniqueIdentifier
routes
enumerateObjectsUsingBlock:
enumerateRoutesInvokingBlock:forRoutesPassingTest:
isReceiverRouteAvailable
isSpeakerRouteAvailable
isWirelessHeadsetRouteAvailable
isAirTunesRouteAvailable
isCarAudioRouteAvailable
isBluetoothRouteAvailable
setRouteDictionaries:
_routeDictionaries
currentRunLoop
hasCallInfo
callInfoSource
setHasCallInfoSource:
hasCallInfoSource
callInfoSourceAsString:
StringAsCallInfoSource:
hasCallDirectoryProviderBundleId
callInfo
callDirectoryProviderBundleId
_callDirectoryProviderBundleId
_callInfo
_callInfoSource
setHasFaceTimeAudioAvailable:
hasFaceTimeAudioAvailable
setHasFaceTimeVideoAvailable:
hasFaceTimeVideoAvailable
_faceTimeAudioAvailable
_faceTimeVideoAvailable
operationModeFromDescriptor:
priorityFromDescriptor:
audioSessionPropertiesWithDescriptor:
setAudioSessionProperties:
startAudioSessionWithCompletionHandler:
stopAudioSession
resetAudioSessionOutputPortOverride
handleWithDestinationID:
processAssertions
countForObject:
acquireProcessAssertionForBundleIdentifier:
invalidateProcessAssertionForBundleIdentifier:
setProcessAssertions:
_processAssertions
initWithQueue:
initForReadingWithError:
initWithDeviceLockObserver:callDirectoryStoreBuilder:
setCallDirectoryStore:
performBlockAfterFirstUnlock:
isDNDEnabled
setDndEnabled:
_callFilterBlock
_doNotDisturbAllowsCallFromSourceAddress:
_callDirectoryAllowsCallFromSourceAddress:
callDirectoryAllowsCallFromSourceAddress:countryCode:
callDirectoryStore
_callDirectoryPhoneNumberVariantsForSourceAddress:countryCode:
containsBlockingEntryWithPhoneNumberInArray:error:
initWithDigits:countryCode:
callDirectorySanitizer
canonicalizedPhoneNumber:
deviceLockObserver
setDeviceLockObserver:
setCallDirectorySanitizer:
_dndEnabled
_callDirectoryStore
_deviceLockObserver
_callDirectorySanitizer
_callStatusChanged:
_callHistoryChanged:
_callConnected:
transactionObjectsAwaitingCallHistory
_canAddCallToCallHistory:
_callHistoryTransactionObjectWithIdentifier:
addCallToCallHistory:
_endTransactionForObjectAfterCallHistoryDatabaseChanges:
markReadRecentCallsMatchingHandle:
recentsManager
addToCallHistory:
read
postMissedCallNotificationForCall:
predicateWithFormat:
recentCallsWithPredicate:
clearReadNotificationsIgnoringHandleIds:
updateBytesOfDataUsedFor:with:
markAllCallsAsReadWithPredicate:
recentCalls
serviceProvider
deleteTheseCalls:
addCallToCallHistoryIfEligible:
updateBytesOfDataUsed:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
setRecentsManager:
callProviderManager
setCallProviderManager:
setTransactionObjectsAwaitingCallHistory:
incomingCallFilter
setIncomingCallFilter:
_recentsManager
_callProviderManager
_transactionObjectsAwaitingCallHistory
_incomingCallFilter
setIdentifiers:
setPendingData:
setBlocksPendingSocketAvailability:
setPreferences:
setStreamPreferences:
initAsInitiatorWithSession:identifiers:
initWithSession:identifiers:
setInitiator:
initAsReceiverWithSession:identifiers:initiatingDevice:initiatingProtocolVersion:
setRemoteDevice:
setRemoteProtocolVersionNumber:
remoteProtocolVersionNumber
runBlocksPendingSocketAvailability:
pendingData
second
sessionEndedReason
preferences
_updateSessionPreferences
identifiers
allIdentifiers
blocksPendingSocketAvailability
performBlockOnSocketAvailability:
socket
pairWithFirst:second:
first
sendData:waitUntilConnected:completion:
pendData:completion:
sendSessionMessage:
sendInvitationWithData:declineOnError:
sendInvitation
acceptInvitationWithData:
sendDataAndCancelInvitationIfNecessary:completion:
_sendDataAndCancelInvitationIfNecessary:reason:completion:
cancelInvitationWithData:
cancelInvitation
cancelInvitationWithRemoteEndedReasonOverride:
sendDataAndDeclineInvitationIfNecessary:completion:
declineInvitationWithData:
endSession
destination
sessionID
session:receivedInvitationAcceptFromID:withData:
session:receivedInvitationDeclineFromID:withData:
session:receivedInvitationCancelFromID:withData:
setDidConnect:
sendPendingData
sessionEnded:withReason:error:
session:receivedSessionMessageFromID:withData:
session:receivedSessionEndFromID:withData:
session:invitationSentToTokens:
session:invitationSentToTokens:shouldBreakBeforeMake:
session:receivedInvitationAcceptFromID:
session:receivedInvitationDeclineFromID:
session:receivedInvitationCancelFromID:
sessionEnded:
session:didReceiveData:
remoteProtocolVersion
setReceiverProtocolVersion:
isCellularDataPreferred
hasIdentifier:
addIdentifier:
addIdentifiers:
removeIdentifier:
removeIdentifiers:
mergeSession:
prepareToEnd
remoteDevice
didConnect
_initiator
_didConnect
_remoteDevice
_remoteProtocolVersionNumber
_identifiers
_pendingData
_blocksPendingSocketAvailability
_preferences
setActivityQueue:
setBestAppSuggestionManager:
bestAppSuggestionManager
broadcastActivity:withTimeout:
_broadcastActivity:withTimeout:shouldPrioritize:
_stopBroadcastingActivity:
_listenForActivityType:dynamicIdentifier:
_stopListeningForActivityType:
activityQueue
userActivity
becomeCurrent
_updateCurrentlyBroadcastedActivity
registerActivityType:dynamicIdentifier:
activityTypeRequiresBestAppSuggestionListener:
startListeningForBestAppSuggestions
unregisterActivityType:dynamicIdentifier:
stopListeningForBestAppSuggestions
activityType
activityTypeForUserActivityTypeString:
dynamicIdentifier
bestAppSuggestionMayHaveChanged
bestAppSuggestionChanged:
connectionInterrupted
currentlyBroadcastedActivity
setCurrentlyBroadcastedActivity:
_activityQueue
_currentlyBroadcastedActivity
_bestAppSuggestionManager
initWithCallCenterObserver:ttyProviderObserver:
ttyProviderObserver
lastResolvedDescriptor
setLastResolvedDescriptor:
resolutionChangedForResolver:fromDescriptor:toDescriptor:triggeredByCall:
updateResolutionTriggeredByCall:
setTtyProviderObserver:
_ttyProviderObserver
_lastResolvedDescriptor
setDirtyCalls:
isMainThread
dirtyCalls
dispatchDrain
dirtyCallManager:processCall:
drain
_dirtyCalls
setProviderManager:
setRelayCallDelegate:
relayCallDelegate
weakObjectsHashTable
setHandledCalls:
setDirtyCallManager:
dirtyCallManager
callServicesClientXPCInterface
callServicesDaemonDelegateXPCInterface
wantsCallDisconnectionOnInvalidation
disconnectAllCalls
sharedInstanceWithQueue:daemonDelegate:shouldRegister:
callServicesInterface
registerWithCompletionHandler:
_handleRelayCallingChanged
setRecentsController:
_handleCallStatusChangedNotification:
_handleRelayCallingChangedNotification:
_handlePreferredRouteChangedNotification:
supportsRelayingToOtherDevices
areRelayCallingFeaturesEnabled
_requestCallStateFromHost
_addRelayNotificationListeners
callsWithAnEndpointElsewhere
disconnectCall:withReason:
_removeRelayNotificationListeners
_handleCallStartedOutgoingNotification:
_handleCallStartedConnectingNotification:
_handleCallConnectedNotification:
_handleNeedsManualInCallSoundsChangedNotification:
_handleCallWantsHoldMusicChangedNotification:
_handleCallShouldSuppressRingtoneChangedNotification:
_handleCallModelChangedNotification:
_handleResetCallStateNotification:
_handleHardPauseStateChangedNotification:
_handleCallIsUsingBasebandChangedNotification:
_handleFaceTimeAvailabilityChangedNotification:
_handleInvitationSentNotification:
handleCurrentCallsChanged:callDisconnected:
performBlockOnClients:
handleFrequencyChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
wantsFrequencyChangeNotifications
arrayByApplyingSelector:
filterClientsUsingPredicate:andPerformBlock:coalescedByIdentifier:
resetCallProvisionalStates
sendClientsNotificationName:forCall:userInfo:
handleNotificationName:forCallWithUniqueProxyIdentifier:userInfo:
_handleNewCall:
_handleDisconnectedCallStatusChangeForHostedCall:
_handleDisconnectedCallStatusChangeForVoicemailCall
_handleActiveCallStatusChangeForHostedCall:
_handleHeldCallStatusChangeForHostedCall:
_handleConnectingCallStatusChangeForHostedCall:
_endProxyCallsForConnectingVideoCall
_handleConnectedCallStatusChangeForHostedCall:
userInfo
initWithCTCall:
isExpectedEndpointOnPairedClientDevice
performPushHostedCallsToPairedClientDevice
performPullRelayingCallsFromClientAndUpdateExpectedEndpoint:
shouldRelayToOtherDevices
_shouldHandleCallStatusChangeForHostedCall:
_nonRingingCallExistsOnThisDevice
setCallDelegatesIfNeeded:
telephonyCallDelegate
setTelephonyCallDelegate:
outgoingCallFromDialRequest:
callsWithGroupUUID:
holdCalls:whileUnholdingCalls:
groupCalls:withCalls:
ungroupCall:fromOtherCallsInGroup:
addCalls:forIdentifier:
dataSources
callsForDataSource:identifier:
answerCall:withRequest:whileDisconnectingActiveCalls:
disconnectCalls:whileHoldingCalls:andUnholdingCalls:andUngroupingCalls:
answerCall:withRequest:whileDisconnectingHeldCalls:andHoldingCalls:
currentlyPickedRouteIdForCategory:andMode:
sourceIdentifierForRouteID:
answerCall:withRequest:whileHoldingActiveCalls:
disconnectCall:whileUngroupingCall:
disconnectAllCalls:
setExpectedEndpointOnPairedClientDevice:
sendMMIOrUSSDCodeWithRequest:
setUplinkMuted:forCalls:
pullCallWithHandoffActivityUserInfo:completion:
allCallsPassTest:
handledCalls
_launchInCallApplicationForIncomingCallIfNecessary
_handleNewHostedCall:
_handleRingingCallStatusChangeForHostedCall:
_handleSendingCallStatusChangeForHostedCall:
_dial:completion:
callForClient:usingCall:
currentCallsForClient:
performDialCall:
behavior
performEndActiveAndAnswerCall:withRequest:
performEndHeldAndAnswerCall:withRequest:
performHoldActiveAndAnswerCall:withRequest:
performAnswerCallAsVideoUpgrade:withRequest:
performHoldCall:
performUnholdCall:
performDisconnectCall:
performGroupCall:withCall:
performUngroupCall:
performSwapCalls
performDisconnectCurrentCallAndActivateHeld
performDisconnectAllCalls
performPushRelayingCallsToHostWithSourceIdentifier:
performPullCallFromClientUsingHandoffActivityUserInfo:completion:
performSendMMIOrUSSDCodeWithRequest:
performSetUplinkMuted:forCall:
performPullHostedCallsFromPairedHostDevice
performSendTelephonyDigits:
performUpdateCallWithProxy:
reportCallEnteredForeground:
reportAllCallsBackgrounded
setCurrentInputDeviceToDeviceWithUID:
setCurrentOutputDeviceToDeviceWithUID:
predicateWithBlock:
filteredArrayUsingPredicate:
_handleMessagingConnectionEndForCalls:withDisconnectedReason:didStartConnecting:
updateClientsWithCall:
requestInitialState:
dialWithRequest:reply:
pullCallFromClientUsingHandoffActivityUserInfo:reply:
answerCallWithRequest:
holdCallWithUniqueProxyIdentifier:
unholdCallWithUniqueProxyIdentifier:
disconnectCallWithUniqueProxyIdentifier:
groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:
ungroupCallWithUniqueProxyIdentifier:
swapCalls
playDTMFToneForCallWithUniqueProxyIdentifier:key:
disconnectCurrentCallAndActivateHeld
pushRelayingCallsToHostWithSourceIdentifier:
pushHostedCallsToPairedClientDevice
pullHostedCallsFromPairedHostDevice
sendHardPauseDigitsForCallWithUniqueProxyIdentifier:
sendTelephonyDigits:
updateCallWithProxy:
enteredForegroundForCallWithUniqueProxyIdentifier:
enteredBackgroundForAllCalls
setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:
setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:
setUplinkMuted:forCallWithUniqueProxyIdentifier:
setDownlinkMuted:forCallWithUniqueProxyIdentifier:
setClientCapabilities:
updateClientsWithFrequency:inDirection:forCalls:
resetClientCallProvisionalStates
sendClientsNotificationName:
sendClientsNotificationName:forCall:
_callController
_recentsController
_relayCallDelegate
_handledCalls
_dirtyCallManager
setOriginatingProcessId:
actionsCount
clearActions
actionsAtIndex:
actionsType
hasOriginatingProcessId
setHasFailed:
hasFailed
setHasTimedOut:
hasTimedOut
originatingProcessId
failed
timedOut
setActions:
_actions
_originatingProcessId
_failed
_timedOut
_handleDeviceFirstUnlockNotification
setCallback:
initWithNotifyObserver:queue:
hasBeenUnlocked
hasBeenUnlockedBlock
setHasBeenUnlocked:
_refreshHasBeenUnlocked
notifyObserver
endObserving
firstUnlockCallbacks
isObserving
beginObserving
setHasBeenUnlockedBlock:
setFirstUnlockCallbacks:
setNotifyObserver:
_hasBeenUnlocked
_hasBeenUnlockedBlock
_firstUnlockCallbacks
_notifyObserver
setBundleIdentifierToVoIPApplication:
voipRegistrationFailed
voipRegister
voipUnregister
bundleIdentifierToVoIPApplication
_apsConnectionForEnvironment:
_findOrCreateApplicationWithBundleIdentifier:
_unregisterApplication:inEnvironment:
developmentConnection
removeFromRunLoop
productionConnection
_registerApplicationWithBundleIdentifier:client:environment:
topicFromBundleId:
requestTokenForTopic:identifier:
bundleIdFromTopic:
topic
openApplication:options:withResult:
acquire
_createAPSConnectionForEnvironment:namedDelegatePort:
initWithEnvironmentName:namedDelegatePort:queue:
enabledTopics
arrayByAddingObject:
setEnabledTopics:
_removeTopic:fromConnection:
invalidateTokenForTopic:identifier:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
setProductionConnection:
setDevelopmentConnection:
_productionConnection
_developmentConnection
_bundleIdentifierToVoIPApplication
strongToStrongObjectsMapTable
dataSourceToIdentifierToCalls
setDataSourceToIdentifierToCalls:
_dataSourceToIdentifierToCalls
bundle
iconTemplateImageData
setIconTemplateImageData:
supportsVideo
supportedTUHandleTypes
emergencyTULabeledHandles
initWithCallSource:configuration:
sandboxedRingtoneSoundLinkFilename
_provisioningStatusFromProvisioningStatusString:
setProvisioningStatus:
setProvisioningURL:
setProvisioningPostData:
setEnabled:
setRoamingEnabled:
setCanEnableRoaming:
initWithCapabilityDictionary:
setLocalizedLabel:
hasLocalizedLabel
_localizedLabel
identifiersWithPendingCoalescingBlocks
blockToExecuteAfterPendingCoalescingBlocksByIdentifier
performBlock:coalescedByIdentifier:
processInfo
performBlock:
setObject:
setIdentifiersWithPendingCoalescingBlocks:
setBlockToExecuteAfterPendingCoalescingBlocksByIdentifier:
_object
_identifiersWithPendingCoalescingBlocks
_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
handleWithType:value:
_conferenceDidStopForCall:cleanly:error:
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
dialWithRequest:completion:
anyCallIsEndpointOnCurrentDevice
setHost:
answerCall:withSourceIdentifier:wantsHoldMusic:
setBehavior:
_answerHostedCall:completionHandler:
holdCall:
unholdCall:
groupCall:withOtherCall:
ungroupCall:
endActiveAndAnswerCall:
endHeldAndAnswerCall:
holdActiveAndAnswerCall:
faceTimeShowInCallUIURL
_userActivityTypeStringForActivityType:
_initWithTypeIdentifier:suggestedActionType:options:
_setContentType:
setExpirationDate:
setEligibleForSearch:
setEligibleForPublicIndexing:
setEligibleForHandoff:
_setSubtitle:
_setContentUserAction:
setKeywords:
setUserActivity:
setUserInfo:
_initWithUserActivityType:dynamicActivityType:options:
setDynamicIdentifier:
_registerUserActivityType:dynamicActivityType:
_unregisterUserActivityType:dynamicActivityType:
_userActivity
_dynamicIdentifier
_loadRegisteredProviders
_unregisterUninstalledProviders
handleApplicationUnregisteredNotification:
setURLScheme:
isSymbolicLinkAtURL:
ringtonesSandboxExtensionDirectory
mutableProvidersByIdentifier
isEqualToCallProvider:
_saveRegisteredProviders
attributesOfItemAtPath:error:
setMutableProvidersByIdentifier:
defaultProviders
_providerRingtoneSoundFilenames
isInstalled
blockUntilInitialStateReceived
setRingtonesSandboxExtensionDirectory:
_mutableProvidersByIdentifier
_ringtonesSandboxExtensionDirectory
shouldTraceSingposts
lastReportedInCallValue
_updateDuetInCall:
setLastReportedInCallValue:
waitForCurrentReportingOperationsToComplete
_lastReportedInCallValue
title
message
stringByReplacingOccurrencesOfString:withString:
hasCellularSettingsRemediation
hasWiFiSettingsRemediation
hasDateAndTimeSettingsRemediation
hasLocationSettingsRemediation
objectAtIndexedSubscript:
didStartHandler
setReceivedSuccessfulDidStart:
didStopHandler
_host
_usingBaseband
_audioDisabled
_receivedSuccessfulDidStart
_preparedToStop
_didStartHandler
_didStopHandler
setCapabilityToLastSavedAccountID:
_thumperAccountMatchingAccountID:
_setTelephonyCapability:enabled:
_setTelephonyCapability:enabled:capabilityInformation:
_setTelephonyCapability:accountID:
_setTelephonyCapability:allowed:forDeviceWithUniqueID:
invalidateProvisioningURL
_refreshAccountStateForCapabilitiy:
_updateAllCapabilitiesState
_thumperAccountPassingTest:
_updateCapabilitiesValidState
_infoForTelephonyCapability:
_updateWiFiCallingStateUsingCapabilityInfo:
_updateVoLTECallingStateUsingCapabilityInfo:
_updateThumperCallingStateUsingCapabilityInfo:
_updateTelephonySystemCapabilitiesState
_updateTelephonyCallManagementState
_updateEmergencyCallbackModeEnabledState
_areTelephonyCapabilitiesValid
_updateThumperAccountState
_telephonyCallManagementState
_telephonySystemCapabilities
_isEmergencyCallbackModeEnabled
_deviceInfoDictionaryForTelephonyCapability:
_deviceListDictionaryForTelephonyCapability:
_isCTErrorFatal:
capabilityToLastSavedAccountID
invalidateAndRefreshVoLTECallingCapabilities
_updateStateUsingCapabilitiesChangedNotificationUserInfo:
setCapabilitiesValid:
telephonySystemCapabilities
setTelephonySystemCapabilities:
telephonyCallManagementState
setTelephonyCallManagementState:
setLocalThumperDeviceID:
localThumperAccountID
setLocalThumperAccountID:
setThumperAccounts:
_emergencyCallbackModeEnabled
_capabilitiesValid
_localThumperDeviceID
_localThumperAccountID
_thumperAccounts
_wiFiCallingCapabilityInfo
_voLTECallingCapabilityInfo
_thumperCallingCapabilityInfo
_capabilityToLastSavedAccountID
handleChatIsMuteChangedNotification:
handleChatSendingAudioChangedNotification:
chatList
callForChat:
isStateFinal
handleBytesOfDataUsedChanged:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
_propertiesChangedForChat:
_propertiesChangedForChatParticipant:
handleFrequencyDataChanged:inDirection:forCalls:
filteredIncomingIMAVChat:
_setAllCallsToHeldExceptCall:
initWithHandle:localizedLabel:
tuLabeledHandle
initWithFactory:
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
factory
avAudioSessioninterruptionProviderForDescriptor:
interruptionProviderForDescriptor:
handleAudioSessionActivationStateChangedTo:
interruptionProviders
beginOrUpdateInterruptionForProviderWithDescriptor:oldDescriptor:
endInterruptionForAllProvidersWithOptions:
resetStateForAllProviders
setFactory:
setLocalAVAudioSessionInterruptionProvider:
setProxyAVAudioSessionInterruptionProvidersByAudioSessionID:
setAvAudioClientInterruptionProvider:
_factory
_localAVAudioSessionInterruptionProvider
_proxyAVAudioSessionInterruptionProvidersByAudioSessionID
_avAudioClientInterruptionProvider
callsCount
clearCalls
callsAtIndex:
callsType
setCalls:
_calls
imDaemonDidConnect:
connectToDaemon
_initializeLastKnownCallerID
faceTimeIMAccount
hasAlias:
addAlias:
validationStatusForAlias:
validationErrorReasonForAlias:
setDisplayName:
displayNameChanged:
preferredAccountChanged:
_saveLastKnownFaceTimeCallerID
mockCallFromBlock:
setMockHostedOnCurrentDevice:
setMockEndpointOnCurrentDevice:
setMockAudioInterruptionProviderType:
setMockUniqueProxyIdentifier:
setMockBackingProvider:
setMockDisplayProvider:
setMockHandle:
setMockCallStatus:
setMockCallUUID:
setMockCallerNameFromNetwork:
setMockUsingBaseband:
setMockVoicemail:
setMockNeedsManualInCallSounds:
setMockStartTime:
hostOnCurrentDevice
mockCall
setMockService:
setMockIsVideo:
setMockBlocked:
setMockCallDuration:
setMockEmergency:
setMockOutgoing:
setMockConferenced:
setMockTTYType:
setMockDisconnectedReason:
setMockLocalizedLabel:
companyName
setMockCompanyName:
setMockBytesOfDataUsed:
subtype
setMockSubtype:
setMockAudioCategory:
setMockAudioMode:
setMockCallGroupUUID:
setMockProviderContext:
setMockHasAudioFinished:
setMockHasStartedOutgoing:
setMockHasSentInvitation:
setMockConnecting:
setMockConnected:
setMockMayRequireBreakBeforeMake:
_mockIsVideo
_mockHostedOnCurrentDevice
_mockEndpointOnCurrentDevice
_mockBlocked
_mockVoicemail
_mockEmergency
_mockSOS
_mockOutgoing
_mockConferenced
_mockUsingBaseband
_mockNeedsManualInCallSounds
_mockHasAudioFinished
_mockHasStartedOutgoing
_mockHasSentInvitation
_mockConnecting
_mockConnected
_mockUplinkMuted
_mockMayRequireBreakBeforeMake
_callIdentifier
_mockService
_mockCallStatus
_mockTTYType
_mockDisconnectedReason
_mockSubtype
_mockUniqueProxyIdentifier
_mockCallDuration
_mockStartTime
_mockHandle
_mockLocalizedLabel
_mockCompanyName
_mockCallUUID
_mockCallerNameFromNetwork
_mockBytesOfDataUsed
_mockAudioCategory
_mockAudioMode
_mockCallGroupUUID
_mockBackingProvider
_mockDisplayProvider
_mockProviderContext
_mockAudioInterruptionProviderType
setHasAmbiguityState:
hasAmbiguityState
setHasSwappable:
hasSwappable
setHasMergeable:
hasMergeable
setHasHoldAllowed:
hasHoldAllowed
setHasAddCallAllowed:
hasAddCallAllowed
setHasTakingCallsPrivateAllowed:
hasTakingCallsPrivateAllowed
setHasHardPauseAvailable:
hasHardPauseAvailable
setHasEndAndAnswerAllowed:
hasEndAndAnswerAllowed
setHasHoldAndAnswerAllowed:
hasHoldAndAnswerAllowed
setHasSendToVoicemailAllowed:
hasSendToVoicemailAllowed
swappable
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
_ambiguityState
_addCallAllowed
_endAndAnswerAllowed
_hardPauseAvailable
_holdAllowed
_holdAndAnswerAllowed
_mergeable
_sendToVoicemailAllowed
_swappable
_takingCallsPrivateAllowed
reporters
currentAudioAndVideoCallCount
reportTransactionGroupCompleted:
reportProviderFailedWithAction:forCall:
setReporters:
_reporters
setIdsService:
_update
removeDelegate:
accounts
anyObject
aliasStrings
accountInfo
accountType
telephoneNumber
regionBasePhoneNumber
componentsJoinedByString:
update
setTelephonyCapableDeviceExists:
setRelayCapableDeviceExists:
setDevices:
setPairedDevice:
setAvailableOutgoingRelayCallerIDs:
_telephonyCapableDeviceExists
_relayCapableDeviceExists
_idsService
_devices
_pairedDevice
_defaultPairedDevice
_availableOutgoingRelayCallerIDs
pairedDeviceUniqueIDOverride
isRelayCallingEnabledForDeviceWithID:
canReceiveMessagesForCallService:
strongToWeakObjectsMapTable
setCtCallRefToTelephonyCallTable:
setCtCallRefToTelephonyCallTableSemaphore:
modelChangedNotification:
updateHardPauseStateIfNecessary
callsUsingCache:
callForCTCall:
answerEndingActive
answerEndingHeld
ctCallRefToTelephonyCallTableSemaphore
ctCallRefToTelephonyCallTable
call
startTrackingCall:
stopTrackingCall:
handleCallAudioUpdatedForCall:userInfo:
postClientNotificationName:
updateMediaStatus
isAlerting
_sendHardPauseDigits
_resetHardPauseDigitsState
_updateHardPauseStateIfNecessary
setCachedHardPauseDigitsStateIsValid:
cachedHardPauseDigitsStateIsValid
_DTMFHardPauseDigits:
cachedMediaStatus
isCachedMediaStatusInitialized
setCachedMediaStatusInitialized:
setCachedMediaStatus:
isMediaStatusActive
requestHandoffWithInfo:completion:
handleCallStatusChanged:userInfo:
handleCallerIDChanged:
handleCallSubTypeChanged:
handleCallControlFailureWithUserInfo:
handleAudioFinishedForCall:
handleAudioToneRelayChanged:audioToneStandard:
handleSetupAudioInterruptionChanged:
handleMediaStatusChanged
handleStatusBecameAlertingForCall:
resetHardPauseDigitsState
_cachedHardPauseDigitsStateIsValid
_cachedMediaStatus
_cachedMediaStatusInitialized
_hardPauseDigitsState
_ctCallRefToTelephonyCallTable
_ctCallRefToTelephonyCallTableSemaphore
displayedCall
activeVideoCall
postClientNotificationName:forCall:
setSessions:
currentSession
_sessionForIdentifier:
waitingSession
_createSessionToDevices:
initWithAccount:destinations:transportType:
sessions
_createSessionToAllDevicesSupportingService:
_startSession:withMessage:identifiers:timeout:declineOnError:
_sendMessage:andCancelInvitationIfNecessaryForSession:
_sendMessage:andDeclineInvitationIfNecessaryForSession:
sendMessage:customizedForRemoteProtocolVersion:completionHandler:
_destroySession:
deviceWithWaitingSession
cancelOrDeclineInvitationForIdentifier:
endSessionForIdentifier:
endingSession
_endingSession
_sessions
isInputFrequencyMeteringEnabled
setInputFrequencyMeteringEnabled:
isOutputFrequencyMeteringEnabled
setOutputFrequencyMeteringEnabled:
getIsVideoPaused:callID:error:
setPauseVideo:callID:error:
setConferenceVisualRectangle:forCallID:
setConferenceState:forCallID:
avChat:setLocalPortraitRatio:localLandscapeRatio:
startConnectionWithCallID:inviteData:isCaller:capabilities:destination:error:
cancelCallID:
emergencyCallStatusChangedNotification:
faceTimeIDStatusRequested
_refreshFaceTimeIDSStatus
__imArrayByApplyingBlock:
currentIDStatusForDestinations:service:listenerID:queue:completionBlock:
setFaceTimeIDStatusRequested:
standardUserDefaults
boolForKey:
_dialWithOptions:
setCall:
_answerWithBehavior:sourceIdentifier:wantsHoldMusic:
causeCodeString
causeCode
carrierSupportsUserBusyCauseCode
telephonyProvider
isThumperCall
stopPlayingDTMFTone
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
isWiFiCall
_alerting
_faceTimeIDStatusRequested
_call
_telephonyCallDelegate
completionHandler
_completionHandler
initWithDelegate:queue:
initWithCalls:delegate:queue:
addCallSource:
processAssertionManager
callSourceManager
failOutstandingActionsForCallWithUUID:
callGroupUUIDToCalls
setDeferCommittingTransactions:
_commitUncommittedTransactions
commitUncommittedTransactions
allActions
dateStarted
callUUIDToGroupWith
_callWithUUID:
_providerForCallSource:
_callWithUUID:controllableByCallSource:
_callGroupsWithBackingCallSource:
cx_requestTransactionErrorWithCode:
addAction:toUncommittedTransactionForCallSource:
_addSupplementalActionsForRequestedTransaction:onCallSource:
answerCall:withRequest:whileDisconnectingCalls:andHoldingCalls:
_deferCommittingTransactionsUntilAfterRunningBlock:
setCode:
setHandoffContext:
pendingPulledCallContexts
initWithExtensionIdentifier:
telephonyCallSource
faceTimeCallSource
deferCommittingTransactions
cx_incomingCallErrorWithCode:
_callWithUUID:backingCallSource:
expediteDeferredEndInterruptionForCallWithUUID:
_allowRevertingStateForCompletedTransactionGroup:
_processCompletedCallAction:forCall:allowRevertingState:
callSource:reportedCallWithUUID:endedAtDate:privateReason:failureContext:
callSourceFetcher
_shouldAllowRequestedTransaction:forCallSource:error:
_performRequestedTransaction:onCallSource:
callSourceManager:completedTransactionGroup:
callSourcesChangedForCallSourceManager:
callSource:registeredWithConfiguration:
callSource:reportedNewIncomingCallWithUUID:update:completion:
callSource:reportedCallWithUUID:updated:
callSource:reportedOutgoingCallWithUUID:sentInvitationAtDate:
callSource:reportedOutgoingCallWithUUID:startedConnectingAtDate:
callSource:reportedOutgoingCallWithUUID:connectedAtDate:
callSource:reportedAudioFinishedForCallWithUUID:
callSource:reportedCallWithUUID:changedFrequencyData:forDirection:
callSource:reportedCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
callControllerHost:clientWithIdentifier:bundle:extensionIdentifier:requestedTransaction:completion:
performCallActions:forCall:
setCallControllerHost:
setProcessAssertionManager:
setCallSourceManager:
setFaceTimeCallSource:
faceTimeProviderDelegate
setFaceTimeProviderDelegate:
setCallSourceFetcher:
setPendingPulledCallContexts:
_deferCommittingTransactions
_callControllerHost
_providerManager
_processAssertionManager
_callSourceManager
_faceTimeCallSource
_faceTimeProviderDelegate
_callSourceFetcher
_pendingPulledCallContexts
initWithResolver:audioInterruptionProviderPool:notificationCenter:audioInterruptionProviderQueue:
handleMediaServicesWereResetNotification:
handleAudioSessionInterruptionNotification:
audioInterruptionProviderQueue
deferredEndInterruptionBlock
_endInterruptionForAllProviders
setDeferredEndInterruptionBlock:
audioInterruptionProviderPool
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
deferralDelegate
endInterruptionDelayForInterruptionController:
updateInterruptionFromDescriptor:toDescriptor:triggeredByCall:
unsignedIntegerValue
setDeferralDelegate:
setAudioInterruptionProviderQueue:
setAudioInterruptionProviderPool:
notificationCenter
setNotificationCenter:
setPendingExpeditedEndInterruptionUUIDs:
_deferralDelegate
_audioInterruptionProviderQueue
_audioInterruptionProviderPool
_notificationCenter
_deferredEndInterruptionBlock
_pendingExpeditedEndInterruptionUUIDs
setSynchronous:
mutableClientsByObject
currentConnection
localClients
addClient:
_xpcClientForConnection:
requiredConnectionCapability
clients
clientsPassingTest:
_performBlock:onClients:coalescedByIdentifier:
filterClientsUsingPredicate:andPerformBlock:
_updatedQOSBlockForBlock:
remoteObjectInterface
exportedInterface
exportedObject
interruptionHandler
_connectionEndedHandlerForXPCClient:withCustomBlock:
invalidationHandler
removeClient:
setTarget:
handleInvocation:forConnection:synchronously:
clientManager:handleInvocation:forConnection:
setCurrentConnection:
invoke
retainArguments
handleInvocation:forConnection:
replacementObjectForXPCConnection:encoder:object:
connection:handleInvocation:isReply:
acceptConnection:
clientsEntitledForCapability:
filterClientsEntitledForCapability:andPerformBlock:
handleInvocation:synchronously:
setAsynchronousExportedObjectProxy:
setSynchronousExportedObjectProxy:
setMutableClientsByObject:
setLocalClients:
_remoteObjectInterface
_exportedInterface
_exportedObject
_interruptionHandler
_invalidationHandler
_asynchronousExportedObjectProxy
_synchronousExportedObjectProxy
_requiredConnectionCapability
_mutableClientsByObject
_localClients
_currentConnection
methodSignatureForSelector:
isSynchronous
forwardInvocation:
_synchronous
setUniqueProxyIdentifierToCallTable:
setUniqueProxyIdentifierToCallTableSemaphore:
setCurrentCallSet:
currentCallSet
uniqueProxyIdentifierToCallTableSemaphore
uniqueProxyIdentifierToCallTable
_postClientNotificationName:forCall:userInfo:
postClientNotificationName:forCall:userInfo:
_uniqueProxyIdentifierToCallTable
_uniqueProxyIdentifierToCallTableSemaphore
_currentCallSet
getValue:
handleLocalFrequencyChanged:
handleRemoteFrequencyChanged:
handleMutedChanged:
handleSendingAudioChanged:
_currentCallsHaveMixedProviders
_inCallUIWantsStatusBarSuppression
_resolvedCallProviderProcessIdentifier
_resolvedCallStatusBarString
_resolvedCallProvider
handleTrigger:
sendDelegateCallsChangedTriggeredByCall:
** TUAssertion failure: %@
Don't call %s, call a designated initializer instead.
-[CSDAudioActivationContext init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDAudioActivationContext.m
<Unknown File>
outgoing
TB,N,GisOutgoing,V_outgoing
accessibilityDefaultRoute
Ti,N,V_accessibilityDefaultRoute
audioSourceKey
T@"NSString",C,N,V_audioSourceKey
dictionaryRepresentation
T@"NSDictionary",R,C,N
formattedDictionaryRepresentation
callStateController
T@"CSDCallStateController",&,N,V_callStateController
relayMessagingController
T@"CSDRelayMessagingController",R,N
callController
T@"CSDCallController",R,N
allCalls
T@"NSArray",R,N
v8@?0
Phone
TransactionManager
Beginning transaction for %@. Transaction count is now %lu
Ending transaction for %@. Transaction count is now %lu
objectsWithTransactions
T@"NSMutableSet",&,N,V_objectsWithTransactions
CSDVoIPProcessAssertion
Invalidating process assertion for %@
%@-%@
processAssertion
T@"BKSProcessAssertion",&,N,V_processAssertion
bundleIdentifier
T@"NSString",R,C,N,V_bundleIdentifier
com.apple.telephonyutilities.callservicesdaemon.csdavconference
<%@ %p state=%d conference=%@>
AVConference
Preparing conference with configuration: %@
Initializing new callID with device role %d
Fetched local invite dictionary: %@
Error fetching local invite dictionary %@: %@
v24@?0@"NSDictionary"8@"NSError"16
Fetching local invite dictionary using remote invite dictionary %@
Failed to initialize a new call with device role %d.
Failed to create an AVConference instance. This usually happens when the AVConference SPI can't communicate with mediaserverd over XPC
Attempted to prepare conference which has already started preparing (state=%d)
%s: destination: %@  configuration: %@
__50-[CSDAVConference startConnectionWithDestination:]_block_invoke
Successfully started connection with configuration=%@ (timestamp: %f)
Failed to start connection with configuration=%@: %@
Attempted to start conference which has not been prepared (state=%d)
Conference does not exist
Calling stop on conference %@
Calling cancel on conference %@
Attempted to cancel a conference that has already started connecting: %@
Setting remote invite dictionary from %@ to %@
Attempting to set state to %d, which precedes current state %d
Setting microphoneMuted to %d for %@
Setting sendingAudio to %d
Setting sendingVideo to %d
Setting remoteVideoPresentationSize from %@ to %@
Setting remoteVideoPresentationState from %d to %d
Conference didStart timeout fired
Updating device role from %d to %d
%s: conference=%@ didStartSession=%d error=%@
__60-[CSDAVConference conferenceProvider:didStartSession:error:]_block_invoke
Successfully started session
Failed to start session. error=%@
%s: didStopError=%@ callMetadata=%@
__68-[CSDAVConference conferenceProvider:didStopWithError:callMetadata:]_block_invoke
AVConference stopped in failure: %@
AVConferenceSessionSentBytes
AVConferenceSessionReceivedBytes
Sending delegate bytesOfDataUsageChanged: %ld
%s: didPauseAudio=%d error=%@
__58-[CSDAVConference conferenceProvider:didPauseAudio:error:]_block_invoke
%s: 
__62-[CSDAVConference conferenceProviderReceivedFirstRemoteFrame:]_block_invoke
%s: remoteVideoPaused=%d
__56-[CSDAVConference conferenceProvider:remoteVideoPaused:]_block_invoke
__51-[CSDAVConference serverDiedForConferenceProvider:]_block_invoke
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
queue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
state
Ti,N,V_state
endedReason
Tq,N,V_endedReason
endedError
T@"NSError",&,N,V_endedError
dateStartedConnecting
T@"NSDate",&,N,V_dateStartedConnecting
dateConnected
T@"NSDate",&,N,V_dateConnected
dateEnded
T@"NSDate",&,N,V_dateEnded
hasReceivedFirstRemoteFrame
TB,N,V_hasReceivedFirstRemoteFrame
remoteVideoPaused
TB,N,GisRemoteVideoPaused,V_remoteVideoPaused
configuration
T@"CSDAVConferenceConfiguration",&,N,V_configuration
conferenceProvider
T@"<CSDAVConferenceProvider>",&,N,V_conferenceProvider
conferenceProviderClass
T#,&,N,V_conferenceProviderClass
delegate
T@"<CSDAVConferenceDelegate>",W,N,V_delegate
delegateQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_delegateQueue
remoteInviteDictionary
T@"NSDictionary",C,N
callID
Tq,R,N
connectionTimeout
Td,N,V_connectionTimeout
deviceRole
Ti,N
muted
TB,N,GisMuted
sendingAudio
TB,N,GisSendingAudio
sendingVideo
TB,N,GisSendingVideo
remoteVideoPresentationSize
T{CGSize=dd},N,V_remoteVideoPresentationSize
remoteVideoPresentationState
TI,N,V_remoteVideoPresentationState
<%@ %p caller=%d capabilities=%@ deviceRole=%d>
caller
TB,N,GisCaller,V_caller
capabilities
T@"VCCapabilities",&,N,V_capabilities
Ti,R,N
clientUUID
T@"NSUUID",C,N,V_clientUUID
T@"NSDictionary",C,N,V_remoteInviteDictionary
localLandscapeAspectRatio
T{CGSize=dd},N,V_localLandscapeAspectRatio
localPortraitAspectRatio
T{CGSize=dd},N,V_localPortraitAspectRatio
TUCallUserActivityCTInfoKey
TUCallUserActivityServiceKey
kCTCallDirection
kCTCallDirectionOutgoing
kCTCallDirectionIncoming
kCTCallPhoneNumber
kCTCallId
kCTCallStartTime
com.apple.coretelephony
handoffActivityUserInfo
protocolVersion
wantsVideo
TB,N
UserActivityManager
Registering to handle call handoff activity type with dynamic identifier %@ for provider %@
Frontmost call is hosted here ...
... and it is an endpoint here ...
... and we are a secondary device ...
... using a broadcast activity with dynamic identifier: %@.
... but no dynamic identifier could be found (%d) or no handoff user info exists (%d). Not broadcasting frontmost call
... but we are a primary device. Not broadcasting frontmost call
... and it is being relayed elsewhere. Using a local activity
Beginning handoff activity %@ for call %@
Ending handoff activity: %@
Broadcasting suppress ringtone activity for declined call: %@
B16@?0@"TUCall"8
Began app history activity %@ for call %@
Broadcasting suppress ringtone activity for call that suppressed its ringtone: %@
Broadcasting suppress ringtone activity for incoming call that started connecting: %@
Received broadcast for activity type %d and destination ID %@. Suppressing ringtone due to remote suppression for call %@
Received broadcast for activity type %d but ignoring it because its destination ID (%@) does not match this ringing call's desination ID (%@)
activityCommunicator
T@"CSDUserActivityCommunicator",&,N,V_activityCommunicator
handoffActivity
T@"CSDUserActivity",&,N,V_handoffActivity
AggregateDictionaryReporter
Calling ADClientSetValueForDistributionKey() with key %@ and value %f
ADClientSetValueForDistributionKey
AggregateDictionary
v24@?0@"NSString"8d16
%@.%@.%f
block
T@?,C,N,V_block
ConferenceID:
CXCallUpdate_FaceTime
Tried to get the call history identifier for this call (%@) but no conference ID was available (%@), we'll fall back to another method (GUID = %@). This call may now not sync properly between devices.
This chat's conferenceID and GUID are nil or empty, we cannot create a safe call history identifier
kCMSessionAudioCategory_PlayAndRecord_NoBluetooth
CoreMedia
kCMSessionAudioMode_VoiceChat
kCMSessionAudioMode_VideoChat
faceTimeTransportType
Tq,N
idx (%tu) is out of range (%tu)
%@ %@
call_uuid
provider_id
is_incoming
is_held
has_connected
has_ended
is_currently_grouped
duration_ms
setup_time_ms
connection_time_ms
features
end_reason
face_time_transport_type
telephony_transport_type
provider_error_code
is_relay
provider_ended_reason
hasCallUuid
TB,R,N
callUuid
T@"NSString",&,N,V_callUuid
hasProviderId
providerId
T@"NSString",&,N,V_providerId
hasIsIncoming
isIncoming
TB,N,V_isIncoming
hasIsHeld
isHeld
TB,N,V_isHeld
hasHasConnected
hasConnected
TB,N,V_hasConnected
hasHasEnded
hasEnded
TB,N,V_hasEnded
hasIsCurrentlyGrouped
isCurrentlyGrouped
TB,N,V_isCurrentlyGrouped
hasDurationMs
durationMs
TQ,N,V_durationMs
hasSetupTimeMs
setupTimeMs
TQ,N,V_setupTimeMs
hasConnectionTimeMs
connectionTimeMs
TQ,N,V_connectionTimeMs
featuresCount
TQ,R,N
T^I,R,N
hasEndReason
endReason
TQ,N,V_endReason
hasFaceTimeTransportType
TI,N,V_faceTimeTransportType
hasTelephonyTransportType
telephonyTransportType
TI,N,V_telephonyTransportType
hasProviderErrorCode
providerErrorCode
Tq,N,V_providerErrorCode
hasIsRelay
isRelay
TB,N,V_isRelay
hasProviderEndedReason
providerEndedReason
Tq,N,V_providerEndedReason
CSDFaceTimeIMAVProviderDelegateErrorDomain
IMDaemonDidConnectNotification
IMAVCore
FaceTimeIMAVProviderDelegate
Could not weak link notification string '%@'. Not observing notifications for it.
IMAVChatStateChangedNotification
IMAVChatParticipantReceivedFirstFrameNotification
IMAVChatParticipantInvitationDeliveredNotification
IMAVChatParticipantCallInfoChangedNotification
IMAVChatConferenceIDChangedNotification
IMAVChatConferenceMetadataUpdatedNotification
IMAVChatMayRequireBreakBeforeMakeChangedNotification
IMAVChatParticipantInFrequencyChangedNotification
IMAVChatParticipantOutFrequencyChangedNotification
IMAVController
Calling endChatWithReason on chat %@ with reason %ld
IMPreferredAccountForService
IMCore
%s: Using account %@
-[CSDFaceTimeIMAVProviderDelegate inviteIMAVPeersWithAction:additionalPeers:tokensToExclude:]
IMAVChat
Inviting additional peers %@, excluding push tokens %@
%s: Could not initiate FaceTime call - No chat returned for handle %@ with account %@
%s: Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
%s: Could not initiate FaceTime Call - Account %@ not registered
Fulfilling pending answer call action because a chat with matching UUID connected: %@
%s: No pending answer call actions found with UUID: %@
-[CSDFaceTimeIMAVProviderDelegate _updateProviderForConnectedChat:]
Failing answer call action for chat because it ended before connecting: %@
-[CSDFaceTimeIMAVProviderDelegate daemonConnected:]
%s: %@
-[CSDFaceTimeIMAVProviderDelegate handleChatStateChanged:]
_NSStringDescriptionForIMAVChatEndedReason
Using call ended reason remote hangup because ended reason is %@
Using call ended reason answered elsewhere because ended reason is %@
Using call ended reason declined elsewhere because ended reason is %@
Using call ended reason unanswered because ended reason is %@
Using call ended reason failed because ended reason is %@
CALL_FAILED_NO_NETWORK_CONNECTION_TITLE
TelephonyUtilities
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_WIFI_MESSAGE
ALERT_VIDEO_FAILED_TITLE
CALL_FAILED_TITLE
ALERT_VIDEO_FAILED_BAD_NONCE_TIMESTAMP
CALL_FAILED_BAD_NONCE_TIMESTAMP
ALERT_VIDEO_FAILED_UPDATE_LOCATION_MESSAGE
CALL_FAILED_UPDATE_LOCATION_MESSAGE
ALERT_VIDEO_FAILED_REGION_INFO_INSUFFICIENT
CALL_FAILED_REGION_INFO_INSUFFICIENT
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NUMBER
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NAME
ALERT_VIDEO_NOT_AVAILABLE_TITLE
CALL_NOT_AVAILABLE_TITLE
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NUMBER
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NUMBER
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NAME
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NAME
-[CSDFaceTimeIMAVProviderDelegate handleChatFirstRemoteFrameArrived:]
-[CSDFaceTimeIMAVProviderDelegate handleChatInvitationSent:]
-[CSDFaceTimeIMAVProviderDelegate handleChatCallInfoChangedNotification:]
-[CSDFaceTimeIMAVProviderDelegate handleChatConferenceIDChangedNotification:]
-[CSDFaceTimeIMAVProviderDelegate handleChatConferenceMetadataUpdated:]
-[CSDFaceTimeIMAVProviderDelegate handleChatMayRequireBreakBeforeMakeChanged:]
-[CSDFaceTimeIMAVProviderDelegate invitedToIMAVChat:]
Incoming call was denied with error %@ so declining chat with IMAVResponseFilteredCall: %@
v16@?0@"NSError"8
%s: provider: %@
-[CSDFaceTimeIMAVProviderDelegate providerDidBegin:]
-[CSDFaceTimeIMAVProviderDelegate providerDidReset:]
%s: action: %@
-[CSDFaceTimeIMAVProviderDelegate provider:performAnswerCallAction:]
Calling acceptInvitation on chat %@
Not accepting invitation to chat %@ since it is already Connected
-[CSDFaceTimeIMAVProviderDelegate provider:performEndCallAction:]
Calling endChat on chat %@
-[CSDFaceTimeIMAVProviderDelegate provider:performSetHeldCallAction:]
Calling setIsSendingAudio with %d for chat %@
Not holding chat %@ since it is not yet Connected
-[CSDFaceTimeIMAVProviderDelegate provider:performSetSendingVideoCallAction:]
Calling setIsSendingVideo with %d for chat %@
-[CSDFaceTimeIMAVProviderDelegate provider:performSetVideoPresentationSizeCallAction:]
Calling setRemoteVideoPresentationSize with %@ for call %@
-[CSDFaceTimeIMAVProviderDelegate provider:performSetVideoPresentationStateCallAction:]
Calling setRemoteVideoPresentationState with %ld for chat %@
-[CSDFaceTimeIMAVProviderDelegate provider:performSetRelayingCallAction:]
Calling setRelayed with %d for chat %@
-[CSDFaceTimeIMAVProviderDelegate provider:performSetMutedCallAction:]
Calling setMuted with %d for chat %@
provider
T@"CXProvider",&,N,V_provider
cachedChats
T@"NSMutableOrderedSet",&,N,V_cachedChats
faceTimeDemuxerDelegate
T@"<CSDFaceTimeProviderDelegateManagerDelegate>",W,N,V_faceTimeDemuxerDelegate
callerID
T@"NSString",C,N,V_callerID
telephonyCallDataSource
T@"CSDTelephonyCallDataSource",&,N,V_telephonyCallDataSource
faceTimeCallDataSource
T@"CSDFaceTimeCallDataSource",&,N,V_faceTimeCallDataSource
idsCallDataSource
T@"CSDIDSCallDataSource",&,N,V_idsCallDataSource
relayCallDataSource
T@"CSDRelayCallDataSource",&,N,V_relayCallDataSource
mockCallDataSource
T@"CSDMockCallDataSource",&,N,V_mockCallDataSource
providerCallDataSource
T@"CSDProviderCallDataSource",&,N,V_providerCallDataSource
callDataSources
T@"NSArray",C,N,V_callDataSources
currentCalls
currentProxyCalls
currentRelayCalls
T@"CSDCallStateController",W,N,V_callStateController
com.apple.private.alloy.phonecontinuity
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
hasSupportsHolding
TB,N,V_supportsHolding
hasSupportsGrouping
TB,N,V_supportsGrouping
hasSupportsUngrouping
TB,N,V_supportsUngrouping
hasSupportsDTMF
TB,N,V_supportsDTMF
hasSupportsUnambiguousMultiPartyState
TB,N,V_supportsUnambiguousMultiPartyState
hasSupportsAddCall
TB,N,V_supportsAddCall
hasSupportsSendingToVoicemail
TB,N,V_supportsSendingToVoicemail
RelayClientController
Ignoring %@ message because we already have a call with this uniqueProxyIdentifier: %@
We already have a call for this %@ message: %@. Updating it with new values
Creating new call for %@ message
Ignoring %@ message because no call exists for %@ and the message is not from the paired device
Could not find call with uniqueProxyIdentifier %@. All current calls: %@
Call answered elsewhere message had no uniqueProxyIdentifier set. Using current calls
%s: Could not find call with uniqueProxyIdentifier %@. All current calls: %@
-[CSDRelayClientController handleCallDisconnectedMessageFromHost:]
-[CSDRelayClientController handleCallConnectedMessageFromHost:]
-[CSDRelayClientController handleResetWantsHoldMusicFromHost:]
-[CSDRelayClientController handleUpdateCallModelMessageFromHost:]
Resetting call %@ with protoCall %@
Not resetting call %@ with protoCall %@ because they are equal
Creating new call with protoCall %@
Existing call no longer exists and is not sending: %@
Updating call %@ with protoCall %@
Not updating call %@ with protoCall %@ because they are equal
Not updating remote call state for call because it is an endpoint here: %@
-[CSDRelayClientController handleUpdateRemoteCallStateMessageFromHost:]
-[CSDRelayClientController handleCallStartedConnectingMessageFromHost:]
-[CSDRelayClientController handleNeedsManualInCallSoundsChangeMessageFromHost:]
-[CSDRelayClientController handleInvitationSentMessageFromHost:]
Pulling remotely hosted call: %@
Incoming call times:
Host call creation time: %f
Host message send time: %f
Client message receive time: %f
Dumping stackshot because difference between creation time and message receive time is >2s
Incoming Call -- Creation:%f Send:%f Receive:%f
WriteStackshotReport_async
CrashReporterSupport
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDAVAudioSessionInterruptionProvider.m
%s is not available. Use a designated initializer instead.
-[CSDAVAudioSessionInterruptionProvider init]
<%@ %p local=%d audioSessionID=%ld>
AVAudioSessionInterruptionProvider
Setting audio category: %@ for provider %@
Successfully set audio category
Error setting audio category to %@ for provider %@: %@
Setting audio mode: %@ for provider %@
Successfully set audio mode
Error setting audio mode to %@ for provider %@: %@
Setting audio activation context: %@ for provider %@
Successfully set audio activation context
Error setting audio activation context to %@ for provider %@: %@
Setting audio active: %d options: %ld for provider %@
Successfully set audio active: %d options: %ld
Error setting audio active to %d for provider %@: %@
Error overriding output audio port to AVAudioSessionPortOverrideNone: %@
Resetting state
Setting audio interruption priority: %ld for provider %@
Successfully set audio interruption priority
Error setting audio interruption priority to %ld for provider %@: %@
Deactivating and setting audio interruption priority: %ld for provider %@
Successfully deactivated and set audio interruption priority
Error deactivating and setting audio interruption priority to %ld for provider %@: %@
active
TB,R,N,GisActive
activeDescriptor
T@"CSDAudioInterruptionDescriptor",R,C,N
priority
audioSession
T@"AVAudioSession",&,N,V_audioSession
local
TB,N,GisLocal,V_local
category
T@"NSString",C,N
mode
activationContext
T@"CSDAudioActivationContext",&,N,V_activationContext
T@"CSDAudioInterruptionDescriptor",C,N,V_activeDescriptor
type
destinationID
service
uniqueProxyIdentifier
sourceIdentifier
wantsHoldMusic
dtmfKey
disconnectedReason
v32@?0@"NSString"8@16^B24
MessagingRelayMessage
%s: Replacing hardPauseDigits '%@' with '%@' since protocolVersion is %d
-[CSDMessagingRelayMessage(Additions) customizeForProtocolVersion:]
%s: Replacing soundRegion %ld with %ld since protocolVersion is %d
typeString
T@"NSString",R,C,N
receivedMessageTypeString
dialRequest
T@"TUDialRequest",R,N
cannotBeAnswered
DTMFKey
TC,N
voicemail
TB,N,GisVoicemail
hardPauseDigitsState
shouldSuppressRingtone
needsManualInCallSounds
soundRegion
cannotRelayAudioOrVideoOnPairedDevice
expectedEndpointOnMessagingDevice
TB,N,GisExpectedEndpointOnMessagingDevice
callCapabilitiesState
T@"TUCallCapabilitiesState",&,N
emergency
TB,N,GisEmergency
TB,N,GisSOS,SsetSOS:
callModel
T@"TUCallModel",&,N
tuHandle
T@"TUHandle",&,N
NoAction
IncomingCall
DialCall
CallDialed
AnswerCall
CallAnsweredElsewhere
CallDisconnected
PlayDTMFToneForKey
CallConnected
DisconnectCall
PullRelayingCalls
HoldCall
UnholdCall
GroupCall
UngroupCall
ResetWantsHoldMusic
SwapCalls
UpdateCallModel
DeviceUnavailable
EndActiveAndAnswer
EndHeldAndAnswer
DisconnectCurrentCallAndActivateHeld
DisconnectAllCalls
ResetState
HardPauseDigitsAvailability
SendHardPauseDigits
UpdateRemoteCallState
SuppressRingtone
RequestCallState
CallStartedConnecting
PushHostedCalls
PullHostedCalls
PushRelayingCalls
UpdateCallCapabilitiesState
NeedsManualInCallSoundsChange
InvitationSent
HoldActiveAndAnswer
(unknown: %i)
value
hasType
Ti,N,V_type
hasValue
T@"NSString",&,N,V_value
None
Generic
PhoneNumber
EmailAddress
ProviderCall
Created pause digits queue: %@
Setting disconnected reason to dial failed because call is outgoing but has not started outgoing
Setting disconnected reason to remote hangup because call has started connecting and ended reason is %ld
Setting disconnected reason to remote hangup because outgoing call has not started connecting and ended reason is %ld but call is a telephony call
Setting disconnected reason to remote unavailable because outgoing call has not started connecting and ended reason is %ld
Setting disconnected reason to answered elsewhere because ended reason is %ld
Setting disconnected reason to declined elsewhere because ended reason is %ld
Setting disconnected reason to handed off because ended reason is %ld
Setting disconnected reason to user busy because ended reason is %ld
Setting disconnected reason to remote hangup because ended reason is %ld
Setting disconnected reason to call failed because failure reason is %ld
Setting disconnected reason to account unsupported because failure reason is %ld
Setting disconnected reason to network unsupported because failure reason is %ld
Setting disconnected reason to provider crashed because failure reason is %ld
Setting disconnected reason to media start failed because failure reason is %ld
Setting disconnected reason to media server crashed because failure reason is %ld
Setting disconnected reason to other secondary device in use because failure reason is %ld
Setting disconnected reason to call failed because ended reason is %ld
Error starting call source %@ when dialing call: %@
Failed to find a call source to dial with for dial request: %@
%s: for call: %@ pauseDigitsQueue: %@
-[CSDProviderCall sendHardPauseDigits]
Next pause digits are not hard pause
No next pause digits exist
%s: for call: %@ key: %d
-[CSDProviderCall playDTMFToneForKey:]
%s: for call: %@ remoteVideoPresentationSize: %@
-[CSDProviderCall setRemoteVideoPresentationSize:]
%s: for call: %@ remoteVideoPresentationState: %d
-[CSDProviderCall setRemoteVideoPresentationState:]
Dequeueing next pause digits
Sending pause digits: %@ type: %ld
Found queued soft pause digits: %@
%s: for pauseDigitsQueue: %@
-[CSDProviderCall pauseDigitsQueueChanged:]
mergedCallUpdate
T@"CXCallUpdate",&,N,V_mergedCallUpdate
pauseDigitsQueue
T@"CSDPauseDigitsQueue",&,N,V_pauseDigitsQueue
video
TB,N,GisVideo,V_video
proxyAVAudioSession
T@"AVAudioSession",R,N
providerCallDelegate
T@"<CSDProviderCallDelegate>",W,N,V_providerCallDelegate
backingCallSource
T@"CXCallSource",&,N,V_backingCallSource
displayCallSourceIdentifier
T@"NSString",&,N,V_displayCallSourceIdentifier
startTime
Td,N,V_startTime
held
TB,N,GisHeld,V_held
callGroupUUID
T@"NSUUID",C,N,V_callGroupUUID
dateStartedOutgoing
T@"NSDate",C,N,V_dateStartedOutgoing
dateSentInvitation
T@"NSDate",C,N,V_dateSentInvitation
T@"NSDate",C,N,V_dateStartedConnecting
hasStartedConnecting
T@"NSDate",C,N,V_dateConnected
T@"NSDate",C,N,V_dateEnded
TB,N,V_sendingVideo
underlyingUplinkMuted
TB,N,GisUnderlyingUplinkMuted,V_underlyingUplinkMuted
failureContext
T@"CXCallFailureContext",&,N,V_failureContext
gk-invitation-break-before-make-timeout
CSDCallStateMonitor
Call started outgoing: %@
Disconnecting video call because another call started outgoing: %@
Disconnecting call using the baseband because a video call started outgoing and wantsBreakBeforeMake=YES: %@
All calls ended. Setting uplink and downlink muted to NO
Call started connecting: %@
Video call connected: %@
Disconnecting current call because another video call connected: %@
Requesting to pull call %@ because its continuity state is different from call %@
Disconnecting call %@ because its continuity state is different from call %@
Starting break before make timer of %lfs for call: %@
Disconnecting call because video call is still sending and break before make timeout fired: %@
StoreDemoMode
com.apple.demo-settings
Store demo mode enabled. Limiting certain calls
Starting call duration limit timer as we are in a retail environment
Stopping call duration limit timer
Disconnecting restricted calls because the limited call duration timer fired: %@
RetailDemoNotification
CALL_ENDED
CALL_ENDED_DEMO_EXPLANATION
callDurationLimitTimer
T@"NSTimer",&,V_callDurationLimitTimer
callCenter
T@"TUCallCenter",R,N
wantsBreakBeforeMake
breakBeforeMakeTimeout
Td,R,N
com.apple.telephonyutilities.callservicesd.statusbarmanager
CSDStatusBarManager
Created status bar assertion %@ with pid %d and statusString %@
Successfully acquired status bar assertion: %@
Failed to acquire status bar assertion: %@
v12@?0B8
Status bar assertion invalidated: %@
Invalidating status bar assertion: %@
resolver
T@"<CSDStatusBarResolver>",&,N,V_resolver
assertion
T@"SBSStatusBarStyleOverridesAssertion",&,N,V_assertion
assertionProcessIdentifier
timestamp
bundle_id
failure_reason
action_type
provider_was_reset
hasTimestamp
TQ,N,V_timestamp
hasBundleId
bundleId
T@"NSString",&,N,V_bundleId
hasFailureReason
failureReason
TQ,N,V_failureReason
hasActionType
actionType
TQ,N,V_actionType
hasProviderWasReset
providerWasReset
TB,N,V_providerWasReset
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDAudioInterruptionDescriptor.m
%s is not available. Use another initializer instead.
-[CSDAudioInterruptionDescriptor init]
<%@ %p providerType=%ld category=%@ mode=%@ activationContext=%@ priority=%ld wantsHoldMusic=%d operationMode=%ld usesLocalAudioSession=%d audioSessionID=%u>
providerType
Tq,N,V_providerType
T@"NSString",C,N,V_category
T@"NSString",C,N,V_mode
Tq,N,V_priority
TB,N,V_wantsHoldMusic
operationMode
Tq,N,V_operationMode
usesLocalAudioSession
TB,N,V_usesLocalAudioSession
audioSessionID
TI,N,V_audioSessionID
activationStateObserver
T@"<CXAudioSessionActivationStateObserver>",W,N,V_activationStateObserver
com.apple.telephonyutilities.callservicesd.thumpercapabilitiesmonitor
NPSDomainAccessor
NanoPreferencesSync
thumperCallingAllowedOnDefaultPairedDevice
ThumperCapabilitiesMonitor
thumperCallingAllowedOnDefaultPairedDeviceDefault keyExists: %d isAllowed: %d
Setting %@ default to %d
Error synchronizing NPS defaults: %@
Posting Thumper available notification on secondary device.
Not posting Thumper available notification on secondary device because Thumper is also enabled already.
Dismissing Thumper available notification on secondary device.
Check if devices should be enrolled now that Thumper is enabled.
Displaying Thumper enabled disclaimer on secondary device.
Dismissing Thumper enabled disclaimer on secondary device.
Check if devices should be enrolled now that the default paired device changed.
ThumperWasPreviouslySupported
Thumper support default was %d and current value is now %d
ThumperWasPreviouslyEnabled
Thumper enabled default was %d and current value is now %d
PreviousDefaultPairedDeviceUniqueID
Default paired device unique ID was %@ and is now %@
Setting Thumper calling allowed on default paired secondary device because Thumper is enabled and we have a default paired device that isn't allowed for Thumper
Checking to see if any devices have been removed from this iCloud account.
uniqueIDOverride
Device with the uniqueID %@ will be unpaired from Thumper because it is no longer on the IDSService.
Show a reminder to the user that thumper is now available.
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumpersupported
THUMPER_CALLING
NOT_NOW
TURN_ON
MAKE_RECEIVE_THUMPER_CELLULAR_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_CELLULAR
MAKE_RECEIVE_THUMPER
User requested to Turn On Thumper calling
v16@?0@"IMUserNotification"8
Not adding user notification because we are already displaying one
Removing existing reminder notification
Show a disclaimer to the user about their emergency address info now that thumper is enabled.
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumperenabled
THUMPER_EMERGENCY_ADDRESS_INFO_TITLE
THUMPER_EMERGENCY_ADDRESS_INFO_MESSAGE
PREFERENCES_BUTTON_TITLE
PSFaceTimeSettingsDetail
Preferences
Emergency Address disclaimer: Preferences button pressed, open URL (%@).
Removing existing emergency address disclaimer
domainAccessor
T@"NPSDomainAccessor",&,N,V_domainAccessor
dataSource
T@"<CSDThumperCapabilitiesMonitorDataSource>",W,N,V_dataSource
AccountsController
Initializing %@
com.apple.telephonyutilities.callservicesd.accountscontroller
FaceTime Audio availability is %ld. FaceTime Video availability is %ld
Initialized %@
    faceTimeIDMatchesAppleID: %@
    faceTimeAudioAvailability: %ld
    faceTimeVideoAvailability: %ld
    outgoingCallerID: %@
Active accounts changed for service %@: %@
Received caller ID changed notification: %@
Received service availability changed notification: %@
Received devices changed notification: %@
FaceTime iCloud account is %@ (isActive=%d, profileID=%@) and relay iCloud account is %@ (isActive=%d, profileID=%@)
IMStringIsPhoneNumber
IMFoundation
Choosing outgoingRelayCallerID based on FaceTime caller ID %@ and available outgoing relay caller IDs %@
Outgoing Caller ID %@ does not appear to be a phone number (%d) or is not in our list of available outgoing relay Caller IDs (%d). Sorting the aliases and picking the first one that satisfies the aforementioned requirements: %@
No aliases appear to be a phone number either and exist in our list of available outgoing relay Caller IDs. Sorting the available outgoing relay Caller IDs and picking the first one: %@
Outgoing Caller ID is %@
outgoingCallerID
T@"NSString",C,N,V_outgoingCallerID
T@"NSObject<CSDAccountsControllerDelegate>",N,V_delegate
faceTimeIDMatchesAppleID
faceTimeAudioAvailable
TB,R,N,GisFaceTimeAudioAvailable
faceTimeVideoAvailable
TB,R,N,GisFaceTimeVideoAvailable
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDPauseDigits.m
-[CSDPauseDigits init]
<%@ %p digits=%@ isHardPause=%d>
digits
T@"NSString",C,N,V_digits
hardPause
TB,N,GisHardPause,V_hardPause
com.apple.telephonyutilities.callservicesd.callprovidermanager
CSDCallProviderManager
XPC connection interrupted from client %@
v16@?0@"CSDClient"8
XPC connection invalidated from client %@
com.apple.telephonyutilities.callservicesdaemon.callprovidermanager
Listener: %@ shouldAcceptNewConnection: %@
Accepted new client to CSDCallProviderManager: %@
v24@?0@"CSDClient"8@"<TUCallProviderManagerXPCClient>"16
xpcListener
T@"NSXPCListener",&,N,V_xpcListener
clientManager
T@"CSDClientManager",&,N,V_clientManager
providerManagerDataSource
T@"CSDCallProviderManagerDataSource",R,N
com.apple.private.alloy.facetime.video
IDSCall
Could not determine UUID for %@
Setting disconnected reason to call failed because CSDIDSSession ended reason is %ld for call %@
Using call ended reason answered elsewhere because CSDIDSSession ended reason is %ld
Using call ended reason declined elsewhere because CSDIDSSession ended reason is %ld
Using call ended reason unanswered because CSDIDSSession ended reason is %ld
Using call ended reason remote ended because CSDIDSSession ended reason is %ld
Setting disconnected reason to call failed because CSDAVConference ended reason is %ld for call %@
Using call ended reason remote ended because CSDAVConference ended reason is %ld
IMAVLocalPreviewClient
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@
VCCapabilities
%s: startCallAction: %@
-[CSDIDSCall startWithAction:additionalPeers:]
Used country code '%@' to determine international phone number representation for outgoing call: %@
Starting FaceTime IDS call using account: %@ destinations: %@ options: %@
Cannot start FaceTime IDS call using handle value '%@' because IDS destination was '%@'
Cannot start FaceTime IDS call using service %@ because account is not active: %@
%s: answerCallAction: %@
-[CSDIDSCall answerWithAction:]
%s: self: %@
-[CSDIDSCall disconnect]
Stopping conference
Canceling session
Declining session
Ending session
%s: for call %@
-[CSDIDSCall cancelInvitationWithAnsweredElsewhere]
-[CSDIDSCall cancelInvitationWithDeclinedElsewhere]
Ignoring request to hold call because it is already held: %@
Ignoring request to unhold call because it isn't held: %@
Setting isSendingAudio to %d for call %@
Setting isSendingVideo to %d for call %@
Setting relaying from %d to %d for call %@
%s: destination: %@
-[CSDIDSCall startConnectionWithDestination:]
sessionStarted: %@
Not starting connection because conference state is %d
session %@ invitationSentToPushTokens %@ shouldBreakBeforeMake %d
session %@ endedWithReason %d
session %@ receivedInvitationAcceptWithData %@
Not starting connecting because session state is %d and conference state is %d
Ignoring incoming message since message with type=%@ was not invite.
Ignoring incoming accept since accompanying message was nil
session %@ receivedInvitationDeclineWithData %@
session %@ receivedInvitationCancelWithData %@
non-nil
session %@ receivedData (data is %@)
-[CSDIDSCall conference:finishedPreparingLocalInviteDictionary:]
-[CSDIDSCall conferenceStarted:]
First frame not received after %f seconds for %@
%s: reason=%ld error=%@
-[CSDIDSCall conference:endedWithReason:error:]
-[CSDIDSCall mutedChangedForConference:]
-[CSDIDSCall sendingAudioChangedForConference:]
-[CSDIDSCall receivedFirstRemoteFrameForConference:]
-[CSDIDSCall remoteVideoPausedForConference:]
session
T@"CSDIDSSession",&,N,V_session
idsService
T@"CSDIDSService",R,N
conference
T@"CSDAVConference",&,N,V_conference
handle
T@"TUHandle",&,N,V_handle
failedToInitializeSession
TB,N,V_failedToInitializeSession
mayRequireBreakBeforeMake
TB,N,V_mayRequireBreakBeforeMake
invitedPushTokens
T@"NSArray",C,N,V_invitedPushTokens
idsCallDelegate
T@"<CSDIDSCallDelegate>",W,N,V_idsCallDelegate
T@"NSDate",R,N
crossDeviceIdentifier
T@"CXCallFailureContext",R,N
reportedVideoStreamToken
TB,N,V_reportedVideoStreamToken
reportedHasSentInvitation
TB,N,V_reportedHasSentInvitation
reportedHasStartedConnecting
TB,N,V_reportedHasStartedConnecting
reportedHasConnected
TB,N,V_reportedHasConnected
reportedHasDisconnected
TB,N,V_reportedHasDisconnected
invitationTimeOut
Td,N
invitedTokensCallback
T@?,C,N,V_invitedTokensCallback
relaying
TB,N,GisRelaying,V_relaying
Unknown
Invite
protoCallModelState
protoService
protoWantsHoldMusic
protoCannotBeAnswered
protoDTMFKey
protoDisconnectedReason
OBSOLETE_conferenceIdentifier
protoVoicemail
callerNameFromNetwork
protoCall
hardPauseDigits
hardPauseState
receivedMessageType
protoProtocolVersion
protoShouldSuppressRingtone
dummyPayload
hostCallCreationTime
messageSendTime
protoNeedsManualInCallSounds
protoCannotRelayAudioOrVideoOnPairedDevice
protoExpectedEndpointOnMessagingDevice
contactIdentifier
protoCallCapabilitiesState
protoSoundRegion
protoEmergency
otherUniqueProxyIdentifiers
protoCallModel
protoSOS
hasUniqueProxyIdentifier
T@"NSString",&,N,V_uniqueProxyIdentifier
hasDestinationID
T@"NSString",&,N,V_destinationID
hasSourceIdentifier
T@"NSString",&,N,V_sourceIdentifier
hasProtoCallModelState
T@"CSDMessagingCallModelState",&,N,V_protoCallModelState
hasProtoService
TI,N,V_protoService
hasProtoWantsHoldMusic
TB,N,V_protoWantsHoldMusic
hasProtoCannotBeAnswered
TB,N,V_protoCannotBeAnswered
hasProtoDTMFKey
T@"NSData",&,N,V_protoDTMFKey
hasProtoDisconnectedReason
TI,N,V_protoDisconnectedReason
hasOBSOLETEConferenceIdentifier
oBSOLETEConferenceIdentifier
T@"NSString",&,N,V_oBSOLETEConferenceIdentifier
hasProtoVoicemail
TB,N,V_protoVoicemail
hasCallerNameFromNetwork
T@"NSString",&,N,V_callerNameFromNetwork
protoCalls
T@"NSMutableArray",&,N,V_protoCalls
hasHardPauseDigits
T@"NSString",&,N,V_hardPauseDigits
hasHardPauseState
TI,N,V_hardPauseState
hasReceivedMessageType
Ti,N,V_receivedMessageType
hasProtoProtocolVersion
TI,N,V_protoProtocolVersion
hasProtoShouldSuppressRingtone
TB,N,V_protoShouldSuppressRingtone
hasDummyPayload
T@"NSData",&,N,V_dummyPayload
hasHostCallCreationTime
Td,N,V_hostCallCreationTime
hasMessageSendTime
Td,N,V_messageSendTime
hasProtoNeedsManualInCallSounds
TB,N,V_protoNeedsManualInCallSounds
hasProtoCannotRelayAudioOrVideoOnPairedDevice
TB,N,V_protoCannotRelayAudioOrVideoOnPairedDevice
hasProtoExpectedEndpointOnMessagingDevice
TB,N,V_protoExpectedEndpointOnMessagingDevice
hasContactIdentifier
T@"NSString",&,N,V_contactIdentifier
hasProtoCallCapabilitiesState
T@"CSDMessagingCallCapabilitiesState",&,N,V_protoCallCapabilitiesState
hasProtoSoundRegion
TI,N,V_protoSoundRegion
hasProtoEmergency
TB,N,V_protoEmergency
T@"NSMutableArray",&,N,V_otherUniqueProxyIdentifiers
hasProtoCallModel
T@"CSDMessagingCallModel",&,N,V_protoCallModel
hasHandle
T@"CSDMessagingHandle",&,N,V_handle
hasProtoSOS
TB,N,V_protoSOS
identifier
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
handoffIdentifier
protoSupportedHandleType
emergencyLabeledHandles
hasIdentifier
T@"NSString",&,N,V_identifier
hasLocalizedName
T@"NSString",&,N,V_localizedName
hasBundleURLString
T@"NSString",&,N,V_bundleURLString
hasMaximumCallGroups
TI,N,V_maximumCallGroups
hasMaximumCallsPerCallGroup
TI,N,V_maximumCallsPerCallGroup
hasSupportsAudioOnly
TB,N,V_supportsAudioOnly
hasSupportsAudioAndVideo
TB,N,V_supportsAudioAndVideo
hasSupportsEmergency
TB,N,V_supportsEmergency
hasSupportsVoicemail
TB,N,V_supportsVoicemail
hasRingtoneSoundURLString
T@"NSString",&,N,V_ringtoneSoundURLString
hasOriginalRingtoneSoundURLString
T@"NSString",&,N,V_originalRingtoneSoundURLString
handoffIdentifiers
T@"NSMutableArray",&,N,V_handoffIdentifiers
protoSupportedHandleTypesCount
protoSupportedHandleTypes
T@"NSMutableArray",&,N,V_emergencyLabeledHandles
fakeMessagePayload
fakeMessageDeviceID
fakeMessageMessengerType
com.apple.telephonyutilities.callservicesd.fakeincomingmessage
v12@?0i8
com.apple.telephonyutilities.callservicesd.fakeoutgoingmessage
    dialingIDSDevice: %@
MessagingController
Handling %@ by preparing connected sessions to end
Transport
Handling %@ by ending ending sessions
Updating dialingIDSDevice using device list %@
A paired device exists, so using that as the dialing device: %@
We found two devices with matching linkedUserURIs (arbitrarily choosing the first): %@ and %@
A device exists with a linkedUserURI that matches Caller ID %@, so using that as the dialing device: %@
Could not find a dialingIDSDevice. No paired devices exist and no devices that support phone calls and have a linkedUserURI for %@ exist.
(IDSMessaging Host->Client) sendIncomingCallMessageToClientForCall: %@
Call cannot be answered. Only notifying the paired device
(IDSMessaging Host->Client) sendCallDialedMessageToClientForCall: %@
v20@?0i8^B12
(IDSMessaging Host->Client) sendCallAnsweredElsewhereMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallDisconnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallConnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendResetWantsHoldMusicMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallModelMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDeviceUnavailableMessageToClient
(IDSMessaging Host->Client) sendPullRelayingCallsMessageToClient
(IDSMessaging Host->Client) sendResetStateMessageToClient
(IDSMessaging Host->Client) sendHardPauseAvailabilityMessageToClientForState %d digits: %@
(IDSMessaging Host->Client) sendUpdateRemoteCallStateMessageToClient
(IDSMessaging Host->Client) sendCallStartedConnectingMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDialCallFailedForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendPushCallsMessageToClient
(IDSMessaging Host->Client) sendNeedsManualInCallSoundsChangeMessageToClientForCall: %@
(IDSMessaging Host->Client) sendInvitationSentMessageToClientForCall: %@
(IDSMessaging Client->Host) sendDialCallMessageToHostForCall: %@
No dialing IDS device found. If we aren't already in a session, this dial call attempt will fail.
(IDSMessaging Client->Host) sendAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendUnholdCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendGroupCallMessageToHostForCall: %@ otherCall: %@
(IDSMessaging Client->Host) sendUngroupCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendSwapCallsMessageToHost
(IDSMessaging Client->Host) sendEndActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendEndHeldAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCurrentCallAndActivateHeldToHost
(IDSMessaging Client->Host) sendDisconnectAllCallsToHost
(IDSMessaging Client->Host) sendSendHardPauseDigitsMessageToHost
(IDSMessaging Client->Host) sendRequestCallStateMessageToHost
(IDSMessaging Client->Host) sendPullCallsMessageToHost
(IDSMessaging Client->Host) sendPushRelayingCallsMessageToHostForSourceIdentifier: %@
(IDSMessaging Client<->Host) sendSuppressRingtoneMessageForCall
Handle incoming %@ message: %@
Messaging device can't receive relayed calls ...
... and we were told to decline the session invite. Declining incoming %@ message: %@
... and we were told not to decline the session invite. Ignoring incoming %@ message: %@
Setting should ignore session to YES because TUICFInterface allowCall = NO for destinationID %@ and service %d
Setting should ignore session to YES because a call exists with sending status: %@
Setting should ignore session to YES because relay is not preferred, message service is TUCallServiceTelephony, and isThumperCallingCurrentlyAvailable=%d and isVoLTECallingCurrentlyAvailable=%d and isCSCallingCurrentlyAvailable=%d
Setting should ignore session to YES because relay is not preferred, message service is TUCallServiceFaceTimeAudio, and isFaceTimeAudioAvailable is YES
Setting should ignore session to YES because no calls exist with an endpoint on the current device: %@
Handling CSDFakeIncomingMessageNotification
Faking incoming message %@ with device %@ from messenger %@
Handling CSDFakeOutgoingMessageNotification
Faking outgoing message %@ with device %@ through messenger %@
No device found with uniqueID=%@. Cannot fake outgoing message %@.
sessionMessenger
T@"CSDIDSSessionMessenger",&,N,V_sessionMessenger
pairedDeviceMessenger
T@"CSDPairedIDSDeviceMessenger",&,N,V_pairedDeviceMessenger
dialingIDSDevice
T@"IDSDevice",&,N,V_dialingIDSDevice
fakeIncomingMessageNotifyToken
Ti,N,V_fakeIncomingMessageNotifyToken
fakeOutgoingMessageNotifyToken
Ti,N,V_fakeOutgoingMessageNotifyToken
T@"<CSDRelayMessagingControllerDelegate>",W,N,V_delegate
clientMessagingDelegate
T@"<CSDRelayMessagingControllerClientMessagingDelegate>",W,N,V_clientMessagingDelegate
hostMessagingDelegate
T@"<CSDRelayMessagingControllerHostMessagingDelegate>",W,N,V_hostMessagingDelegate
commonMessagingDelegate
T@"<CSDRelayMessagingControllerCommonMessagingDelegate>",W,N,V_commonMessagingDelegate
availableSocket
inviteDictionary
AVConferenceInviteDataSKEBlob
GameKitServices
___AVConferenceInviteDataSKEBlob_block_invoke
<Unknown Function>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/proto/Categories/CSDMessagingAVConferenceInviteData_Additions.m
Failed to weak link AVConferenceInviteDataSKEBlob from %@ framework
AVConferenceInviteDataMediaBlob
___AVConferenceInviteDataMediaBlob_block_invoke
Failed to weak link AVConferenceInviteDataMediaBlob from %@ framework
AVConferenceInviteDataCallInfoBlob
___AVConferenceInviteDataCallInfoBlob_block_invoke
Failed to weak link AVConferenceInviteDataCallInfoBlob from %@ framework
CallServicesDaemon
Initializing CSDDaemon
com.apple.notifyd.matching
Launched by fake incoming message
Launched by fake outgoing message
com.apple.telephonyutilities.callservicesd.kFZACAppBundleIdentifierLaunchNotification
Launched by IMDaemon notification
v16@?0@"NSObject<OS_xpc_object>"8
com.apple.distnoted.matching
com.apple.callhistory.save.distributed.notification
com.apple.telephonyutilities.callservicesdaemon.app-installed
Launched by application installed notification
com.apple.telephonyutilities.callservicesdaemon.app-uninstalled
Launched by application uninstalled notification
Could not create notification for XPC event %@
com.apple.CTTelephonyCenter
com.apple.telephonyutilities.callservicesd.kCTSettingCallCapabilitiesChangedNotification
com.apple.telephonyutilities.callservicesd.kCTCallStatusChangeNotification
com.apple.telephonyutilities.callservicesd.kCTCallEndedInDoNotDisturbNotification
com.apple.telephonyutilities.callservicesdaemon.connectionrequest
Initialized CSDDaemon
enabled
disabled
Logging is now %@
Dumping debug info
v16@?0@"NSNotification"8
Enabled Phone logging because walkabout is enabled
com.apple.language.changed
Calling xpc_transaction_exit_clean() due to language change
extensionsChangedForCallDirectoryExtensionManager-%lu
Error synchronizing call directory extensions: %@
Successfully synchronized call directory extensions
callStateMonitor
T@"CSDCallStateMonitor",&,N,V_callStateMonitor
T@"CSDRelayMessagingController",&,N,V_relayMessagingController
relayClientController
T@"CSDRelayClientController",&,N,V_relayClientController
relayHostController
T@"CSDRelayHostController",&,N,V_relayHostController
relayCommonController
T@"CSDRelayCommonController",&,N,V_relayCommonController
statusBarManager
T@"CSDStatusBarManager",&,N,V_statusBarManager
callDirectoryManager
T@"CXCallDirectoryManager",&,N,V_callDirectoryManager
callDirectoryExtensionManager
T@"CXCallDirectoryExtensionManager",&,N,V_callDirectoryExtensionManager
voipApplicationController
T@"CSDVoIPApplicationController",&,N,V_voipApplicationController
shouldLogChangedObserver
T@"<NSObject>",&,N,V_shouldLogChangedObserver
audioInterruptionController
T@"CSDAudioInterruptionController",&,N,V_audioInterruptionController
CSDFaceTimeIDSProviderDelegateErrorDomain
qr-invitations-enabled
FaceTimeIDSProviderDelegate
Server bag does not support quick relay. Minimum supported version is %@ and current operating version is %@
Server bag is not loaded. Assuming we can make a FaceTime call over quick relay
Tried to make an outgoing call when we already had a ringing call with the same destination.
Not attempting to use IDSSession for outgoing FT call
-[CSDFaceTimeIDSProviderDelegate _updateProviderForConnectedCallIfNecessary:]
Failing answer call action for call because it disconnected before connecting: %@
Invite received for session %@ account %@ from (fromID=%@) with data: %@
Found a sending call with the same destination. Cancelling this invite by disconnecting the associated call.
Incoming call was denied with error %@ so ignoring call: %@
Ignoring incoming invite since no available network is allowed (isWiFiAvailable=%d isWiFiAllowed=%d isCellularDataAvailable=%d isCellularDataAllowed=%d)
Ignoring incoming invite since message with type=%@ was not an invite.
Ignoring incoming invite since accompanying message was nil
-[CSDFaceTimeIDSProviderDelegate propertiesChangedForCall:]
-[CSDFaceTimeIDSProviderDelegate providerDidBegin:]
-[CSDFaceTimeIDSProviderDelegate providerDidReset:]
-[CSDFaceTimeIDSProviderDelegate provider:performAnswerCallAction:]
Calling acceptInvitation on call %@
Not accepting invitation to call %@ since it is already Connected
-[CSDFaceTimeIDSProviderDelegate provider:performEndCallAction:]
Calling endCall on call %@
-[CSDFaceTimeIDSProviderDelegate provider:performSetHeldCallAction:]
Calling setIsSendingAudio for call %@
Not holding call %@ since it is not yet Connected
-[CSDFaceTimeIDSProviderDelegate provider:performSetSendingVideoCallAction:]
Calling setIsSendingVideo with %d for call %@
-[CSDFaceTimeIDSProviderDelegate provider:performSetVideoPresentationSizeCallAction:]
-[CSDFaceTimeIDSProviderDelegate provider:performSetVideoPresentationStateCallAction:]
-[CSDFaceTimeIDSProviderDelegate provider:performSetRelayingCallAction:]
-[CSDFaceTimeIDSProviderDelegate provider:performSetMutedCallAction:]
wiFiAllowed
TB,R,N,GisWiFiAllowed
cellularDataAllowed
TB,R,N,GisCellularDataAllowed
cachedCalls
T@"NSMutableOrderedSet",&,N,V_cachedCalls
serverBag
T@"FTServerBag",&,N,V_serverBag
SKEBlob
mediaBlob
callInfoBlob
hasSKEBlob
sKEBlob
T@"NSData",&,N,V_sKEBlob
hasMediaBlob
T@"NSData",&,N,V_mediaBlob
hasCallInfoBlob
T@"NSData",&,N,V_callInfoBlob
com.apple.telephonyutilities.callservicesd.awdreporter
@"PBCodable"8@?0
AWDReporter
Generated end call metric=%@
v12@?0I8
Got metric container for metricId=%lu
Skipping reporting for metricId=%lu since no metric container was provided
kCallSubType
kCallSubTypeWifi
kCallSubTypeVoLTE
kCallSubTypeTelephony
serverConnection
T@"AWDServerConnection",&,N,V_serverConnection
T@"<CSDIDSMessengerDelegate>",W,N,V_delegate
Use -initWithDictionary:
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDThumperAccount.m
<%@ %p accountID=%@ primaryDeviceID=%@ phoneNumber=%@ phoneNumberMCC=%@ phoneNumberISOCountryCode=%@ phoneNumberURI=%@ availableDeviceSlots=%ld allowedSecondaryDeviceIDs=%@
mutableAllowedSecondaryDeviceIDs
T@"NSMutableSet",&,N,V_mutableAllowedSecondaryDeviceIDs
accountID
T@"NSString",C,N,V_accountID
primaryDeviceID
T@"NSString",C,N,V_primaryDeviceID
phoneNumber
T@"NSString",C,N,V_phoneNumber
phoneNumberMCC
T@"NSString",C,N,V_phoneNumberMCC
phoneNumberISOCountryCode
T@"NSString",C,N,V_phoneNumberISOCountryCode
phoneNumberURI
T@"NSString",C,N,V_phoneNumberURI
availableDeviceSlots
Tq,N,V_availableDeviceSlots
allowedSecondaryDeviceIDs
T@"NSSet",R,N
RelayCommonController
-[CSDRelayCommonController handleSuppressRingtoneMessage:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDCallSourceFetcher.m
-[CSDCallSourceFetcher init]
CSDCallSourceFetcher
Calling fetch completion block for call source with identifier %@
Waiting for call source with identifier %@
Timed out waiting for call source with identifier %@ to check in
Found a matching extension for identifier %@ and containing app bundle %@: %@
Using existing extension call source: %@
Creating a new extension call source
Could not start call source %@: %@
No matching extensions found for extension identifier %@ and bundle %@: %@
v24@?0@"NSArray"8@"NSError"16
serialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
timeout
Td,N,V_timeout
pendingCompletions
T@"NSMutableDictionary",&,N,V_pendingCompletions
T@"<CSDCallSourceFetcherDataSource>",W,N,V_dataSource
iPod
IPOD
iPad
IPAD
iPhone
IPHONE
ThumperPushHandler
Couldn't identify device type based on model identifier (%@)
THUMPER_SERVICE_NAME
ENTER_CODE_FOR_%@
ALLOW
CANCEL
PrimaryDeviceNotification
User notification has been completed with response %lu and entered PIN %@
Showing service confirmation dialog to user
THUMPER_PUSH_HANDLER_CONSENT_ALERT_MESSAGE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_TITLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_ENABLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_CANCEL
SecondaryDeviceNotification
Requesting pin from iPhone
Canceling pin request from iPhone
PIN code entered with success=%d cancelled=%d
No phone number URI found for primary device: %@. We will not be able to update the outgoing caller ID of this device to match the Thumper primary device.
Device Pin Exchange received an incoming approval request
We received an incoming pin code alert from a non-telephony device: %@
RECEIVE_THUMPER_CALLS_FROM_PHONE_NUMBER_ENTER_CODE_%@_%@
User tapped cancel on the Pin Display Alert
Request for pin exchange failed
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_TITLE
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_MESSAGE
thumperCallingAllowedOnDefaultPairedDeviceDefault
TB,N,V_thumperCallingAllowedOnDefaultPairedDeviceDefault
protoStatus
protoConferenced
protoOutgoing
protoHasSentInvitation
hasProtoStatus
TI,N,V_protoStatus
hasProtoConferenced
TB,N,V_protoConferenced
hasStartTime
hasProtoOutgoing
TB,N,V_protoOutgoing
hasProtoHasSentInvitation
TB,N,V_protoHasSentInvitation
kCMSessionAudioMode_RemoteVoiceChat
RelayCall
Ignoring request to group call because it is already grouped: %@
Ignoring request to ungroup call because it isn't grouped: %@
Setting uplinkMuted to %d for call %@
Started conference successfully for answered relay call %@
Failed to start conference connection when answering call %@: %@
v20@?0B8@"NSError"12
Conference connection stopped (cleanly=%d) for answered call %@: %@
Started conference successfully for dialed relay call %@
Failed to start conference connection when dialing call %@: %@
Conference connection stopped (cleanly=%d) for dialed call %@: %@
Started conference successfully for pulled relay call %@
Failed to start conference connection when pulling call %@: %@
Conference connection stopped (cleanly=%d) for pulled call %@: %@
relayDelegate
T@"<CSDRelayCallDelegate>",W,N,V_relayDelegate
callStatus
Ti,N,V_callStatus
backingProvider
T@"TUCallProvider",&,N,V_backingProvider
TB,N,GisVoicemail,V_voicemail
TB,N,GisEmergency,V_emergency
TB,N,GisSOS,SsetSOS:,V_sos
hasStartedOutgoing
TB,N,V_hasStartedOutgoing
T@"NSString",C,N,V_callerNameFromNetwork
TB,N,V_needsManualInCallSounds
cannotRelayAudioOrVideo
TB,N,V_cannotRelayAudioOrVideo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDPauseDigitsQueue.m
-[CSDPauseDigitsQueue init]
<%@ %p
 baseDestinationID=%@
 originalPauseDigitsString=%@
 pauseDigits=%@
baseDestinationID
T@"NSString",C,N,V_baseDestinationID
originalPauseDigitsString
T@"NSString",C,N,V_originalPauseDigitsString
pauseDigits
T@"NSMutableArray",&,N,V_pauseDigits
T@"<CSDPauseDigitsQueueDelegate>",W,N,V_delegate
nextPauseDigits
T@"CSDPauseDigits",R,N
hasQueuedHardPauseDigits
XPCClient
Entitlement for key '%@' is non-nil but is not an NSArray (%@), so assuming process with bundle identifier %@ has no entitlements
%@ entitlements=%@
processName
T@"NSString",&,N,V_processName
processBundleIdentifier
T@"NSString",&,N,V_processBundleIdentifier
entitlements
T@"NSArray",&,N,V_entitlements
connection
T@"NSXPCConnection",R,N
TTYUtilities
/System/Library/PrivateFrameworks/Accessibility.framework/Frameworks/AXHearingSupport.framework
transportMethod
utilityProvider
T@"TTYUtilities",R,N
T@"TUCallProvider",R,C,N
supportedHandleTypes
T@"NSSet",C,N
com.apple.telephonyutilities.callservicesd.pairedidsdevicemessenger
PairedIDSDeviceMessenger
Received successful didSend for message with identifier %@ using account %@
Received unsuccessful didSend for message with identifier %@ using account %@: %@
Incoming message of type %@ from device %@: %@
Received message %@ from device %@ but our paired device is %@
No device found for fromID %@. All devices: %@
Removing IDSSendMessageOptionForceLocalDeliveryKey key from sendMessage options because pairedDeviceUniqueIDOverride exists
Sending %@ message with identifier %@ and options %@ to destinations %@: %@
Successfully sent %@ message
Failed to send %@ message: %@
com.apple.telephonyutilities.callservicesdaemon.mockcalls
MockCallDataSource
Accepted new connection from client %@
-[CSDMockCallDataSource updateMockCallWithProxyCall:]
-[CSDMockCallDataSource confirmAllPendingMessagesReceivedWithReply:]
localAVAudioSessionInterruptionProvider
T@"<CSDAudioInterruptionProvider>",R,N
avAudioClientInterruptionProvider
sanitizedCallUpdate
T@"CXCallUpdate",R,C,N
CallState
status
bundleID
providerIdentifier
providerContext
hostedOnCurrentDevice
endpointOnCurrentDevice
callStart
callStop
callForegrounded
callBackgrounded
callStateContext
T@"NSDictionary",&,N,V_callStateContext
visibilityContext
T@"NSDictionary",&,N,V_visibilityContext
eventBlock
T@?,C,N,V_eventBlock
CSDFaceTimeProviderDelegateErrorDomain
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDFaceTimeProviderDelegate.m
-[CSDFaceTimeProviderDelegate init]
com.apple.telephonyutilities.callservicesd.FaceTimeProvider
FACETIME_SERVICE
FaceTimeProviderDelegate
No contact returned with identifier %@
Returning additional peers %@ for contact %@
%s: providerDelegate: %@ callUUID: %@ dateStartedConnecting: %@
-[CSDFaceTimeProviderDelegate providerDelegate:callWithUUID:startedConnectingAtDate:]
%s: providerDelegate: %@ callUUID: %@ dateEnded: %@ endedReason: %ld failureContext: %@
-[CSDFaceTimeProviderDelegate providerDelegate:callWithUUID:endedAtDate:withReason:failureContext:]
Ending call with UUID %@ on other provider delegate %@ because ended reason was %ld
-[CSDFaceTimeProviderDelegate provider:timedOutPerformingAction:]
-[CSDFaceTimeProviderDelegate provider:performStartCallAction:]
Invited push tokens via IDS: %@ wasCanceled: %d
Could not initiate FaceTime call - No IDS or IMAV call returned for handle %@
Not sending IMAV invites because IDS session was canceled
v20@?0@"NSArray"8B16
%s: Neither provider delegate is managing call for action %@
-[CSDFaceTimeProviderDelegate provider:performAnswerCallAction:]
-[CSDFaceTimeProviderDelegate provider:performEndCallAction:]
-[CSDFaceTimeProviderDelegate provider:performSetHeldCallAction:]
-[CSDFaceTimeProviderDelegate provider:performSetSendingVideoCallAction:]
-[CSDFaceTimeProviderDelegate provider:performSetVideoPresentationSizeCallAction:]
-[CSDFaceTimeProviderDelegate provider:performSetVideoPresentationStateCallAction:]
-[CSDFaceTimeProviderDelegate provider:performSetRelayingCallAction:]
-[CSDFaceTimeProviderDelegate provider:performSetMutedCallAction:]
contactStore
T@"CNContactStore",&,N,V_contactStore
faceTimeIDSProviderDelegate
T@"CSDFaceTimeIDSProviderDelegate",&,N,V_faceTimeIDSProviderDelegate
faceTimeIMAVProviderDelegate
T@"CSDFaceTimeIMAVProviderDelegate",&,N,V_faceTimeIMAVProviderDelegate
-[CSDVoIPApplication init] is not supported. Use -[CSDVoIPApplication initWithBundleIdentifier:] instead
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDVoIPApplication.m
CSDVoIPApplication
Updated isRunning for %@ because new application state is %d
v16@?0@"NSDictionary"8
<%@ %p bundleIdentifier=%@ environment=%@ client=%@ isRunning=%d token=%@ pendingPayloadCount=%lu>
UIBackgroundModes
voip
Asked to deliver token %@ to application %@
Asked to deliver payload %p to application %@
Delivering token %@ to application %@
Pending token delivery until a connection exists
Delivering %lu payload(s) to application %@
Pending payload deliveries until a connection exists
T@"NSString",C,N,V_bundleIdentifier
token
T@"NSData",C,N,V_token
pendingPayloads
T@"NSMutableArray",&,N,V_pendingPayloads
running
TB,N,GisRunning,V_running
applicationStateMonitor
T@"BKSApplicationStateMonitor",&,N,V_applicationStateMonitor
environment
T@"NSString",C,N,V_environment
client
T@"CSDClient",&,N,V_client
hasVoIPEntitlement
CSDStatusBarResolver
inCallServiceWantsStatusBarSuppressionState is now %llu
Initialized inCallServiceWantsStatusBarSuppressionState to %llu
FACETIME_VIDEO_DURATION_PREAMBLE
FACETIME_AUDIO_DURATION_PREAMBLE
DURATION_PREAMBLE
T@"<CSDStatusBarResolverDelegate>",W,N
resolvedDescriptor
T@"CSDStatusBarDescriptor",R,N
callCenterObserver
T@"<CSDCallCenterObserver>",&,N,V_callCenterObserver
callDurationUpdateTimer
T@"NSTimer",&,N,V_callDurationUpdateTimer
T@"CSDStatusBarDescriptor",&,N,V_resolvedDescriptor
inCallServiceWantsStatusBarSuppression
inCallServiceWantsStatusBarSuppressionState
TQ,N,V_inCallServiceWantsStatusBarSuppressionState
inCallServiceWantsStatusBarSuppressionToken
Ti,N,V_inCallServiceWantsStatusBarSuppressionToken
resolvedCall
T@"CSDCall",R,N
currentCallsHaveMixedProviders
T@"<CSDStatusBarResolverDelegate>",W,N,V_delegate
CSDRelayConferenceLocalFrequencyChanged
CSDRelayConferenceRemoteFrequencyChanged
CSDRelayConferenceMutedChanged
CSDRelayConferenceSendingAudioChanged
CSDRelayConferenceConnectionWillCloseNotification
CSDRelayConferenceConnectionDidCloseNotification
RelayConferenceInterface
setMuted:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Error calling getIsAudioPaused: %@
Setting pause audio to %d for %@
Error calling setPauseAudio: %@
setSendingAudio:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Asked to start conference connection %@ with socket %d
We already have an active conference. Invoking this conference connection's didStart immediately
We are already relaying a call to this call's device, but our conference isn't active. Either a conference just finished, but is still using the socket, or a conference has yet to start.
Asked to update conference for identifier %@ with isUsingBaseband=%d disableAudio=%d
Updating device role for identifier %@ to %d
Did not find conference connection for identifier %@. All conference connections: %@
Setting conference connection active: %@
Asked to prepare to stop conference for identifier %@
Pausing audio and setting up timeout for identifier %@
It's been %ds since asked to prepare to stop conference and conference connection still exists: %@. Forcefully cleaning up all conferences now
Asked to stop conference for identifier %@
Successfully started connection with callID=%ld, capabilities=%@, socket=%d, isCaller=%d (timestamp: %f)
Failed to start connection with callID=%ld, capabilities=%@, socket=%d, isCaller=%d: %@
Failed to initialize a new callID (callID=%ld) with device role %d.
Conference didStart timeout fired for conference %@ and conferenceConnection %@
com.apple.telephonyutilities
Conference did not start after %d seconds
Cleaning up conference connection %@
Conference cleaned up before handling a didStart with error: %@
Cleaning up conference since last conference connection never received a didStart
Calling stopCallID on conference %@ with callID %ld
Posting %@
Cleaning up conference
%s: isStalled=%d callID=%ld
-[CSDRelayConferenceInterface conference:withCallID:remoteMediaStalled:]
%s: callID=%ld didPauseAudio=%d error=%@
__73-[CSDRelayConferenceInterface conference:withCallID:didPauseAudio:error:]_block_invoke
GKSDidStartParameter_Error
Successfully started session. UserInfo = %@
Failed to start session. UserInfo = %@
Received didStartSession=%d, error=%@ for conference %@ that has already been cleaned up. This probably happened because our conference didStart timeout fired.
%s: . didStopWithCallID=%ld. error=%@
__66-[CSDRelayConferenceInterface conference:didStopWithCallID:error:]_block_invoke
Ignoring didStop error %@
Timed out waiting for conference %@ to call closeConnectionForCallID after receiving didStop
%s: callID=%ld
__67-[CSDRelayConferenceInterface conference:closeConnectionForCallID:]_block_invoke
-[CSDRelayConferenceInterface conference:updateInputMeterLevel:]
-[CSDRelayConferenceInterface conference:updateOutputMeterLevel:]
%s: . callID=%ld.
-[CSDRelayConferenceInterface conference:receivedFirstRemoteFrameForCallID:]
-[CSDRelayConferenceInterface conference:remoteScreenAttributesChanged:callID:]
-[CSDRelayConferenceInterface conference:remoteVideoAttributesChanged:callID:]
%s: didPause=%d callID=%ld
-[CSDRelayConferenceInterface conference:remoteAudioPaused:callID:]
-[CSDRelayConferenceInterface conference:remoteVideoPaused:callID:]
%s: conference=%@
__55-[CSDRelayConferenceInterface serverDiedForConference:]_block_invoke
Conference server crashed
-[CSDRelayConferenceInterface conference:inititiateRelayRequest:requestDict:]
-[CSDRelayConferenceInterface conference:sendRelayUpdate:updateDict:]
-[CSDRelayConferenceInterface conference:cancelRelayRequest:requestDict:]
-[CSDRelayConferenceInterface conference:videoQualityNotificationForCallID:isDegraded:isRemote:]
%s: isNetworkBad=%d callID=%ld
-[CSDRelayConferenceInterface conference:withCallID:networkHint:]
conferenceConnections
T@"NSMutableArray",&,N,V_conferenceConnections
T@"AVConference",&,N,V_conference
Tq,N,V_callID
hasActiveConference
TB,N,V_hasActiveConference
CallServices
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDSandboxExtensionDirectory.m
-[CSDSandboxExtensionDirectory init]
SandboxedFileManager
Unable to get URL for filename '%@'
Unable to get standardized URL for URL '%@'
fileManager
T@"NSFileManager",&,N,V_fileManager
T@"NSURL",&,N,V_URL
name
CSDPinExchangeCompressedDataKey
CSDPinExchangeActionKey
CSDPinExchangePinKey
CSDPinExchangeActionRequestPIN
CSDPinExchangeActionSendPIN
CSDPinExchangeActionOneTimeReminder
CSDPinExchangeActionApproved
CSDPinExchangeActionUnapproved
CSDPinExchangeActionCancelledPrimary
CSDPinExchangeActionCancelledSecondary
PinExchangeController
Setting up Pin Exchange controller
%s: nil deviceID passed in to 
-[CSDPinExchangeController enrollSecondaryDeviceInService:]
Thumper - received request to enroll device ID %@ into Thumper
-[CSDPinExchangeController unenrollSecondaryDeviceInService:]
Could not unenroll device as secondary device could not be identified
Requesting PIN from device %@
accountsSupportSecondaryCalling=NO. Displaying mismatched accounts notification
Canceling all PIN requests
Could not find device for unique ID %@
The entered PIN code is correct
The entered PIN code is incorrect, could not register device.
The user entered no code... or the code entered was not an NSString
v20@?0B8@"NSString"12
We were unable to send the PIN to the other device to be displayed, Sorry
Sending a PIN code to device %@ to display to enroll them into Thumper
Ignoring request to send PIN code because we already have one pending for device with unique ID %@
Sending IDS action %@ to device %@ with message %@
Thumper IDS action sent to device with success: %@ error: %@ identifier: %@
com.apple.telephonyutilities.callservicesd.pinexchangeerror
Displaying PIN error notification
INCORRECT_PIN_ENTERED
Displaying mismatched accounts notification
THUMPER_MISMATCHED_ACCOUNTS
Displaying slots full notification
MAX_SLOTS_FILLED
Received message for service %@ from device %@ (isHSATrusted=%d): %@
Ignoring pin request: There is already a pending pin request that has not yet completed.
Device requesting PIN is HSA trusted. Forgoing PIN exchange and enrolling the device immediately
Received didSendWithSuccess=YES for message with identifier %@
Received didSendWithSuccess=NO for message with identifier %@: %@
pendingCodesToDevicesForApproval
T@"NSMutableDictionary",&,V_pendingCodesToDevicesForApproval
pinExchangeDelegate
T@"<CSDPinExchangeDelegate>",&,V_pinExchangeDelegate
outgoingPinRequestIdentifier
T@"NSString",&,V_outgoingPinRequestIdentifier
completion_time_ms
hasCompletionTimeMs
completionTimeMs
TQ,N,V_completionTimeMs
hasState
TI,N,V_state
TI,N,V_failureReason
com.apple.telephonyutilities.callservicesd.callcapabilities
CallCapabilities
Initialized capability state: %@
com.apple.telephonyutilities.callservicesdaemon.callcapabilities
State: %@
Telephony capabilities: %@
Accounts controller: %@
Paired Host Device State: %@
Updating clients with new call capabilities state: %@
v24@?0@"CSDClient"8@"<TUCallCapabilitiesXPCClient>"16
Accepted new XPC connection to CSDCallCapabilities from pid: %d, bundle ID: %@, connection: %@, client: %@
TUCallCapabilitiesXPCServer - callCapabilitiesState request from %@
TUCallCapabilitiesXPCServer - setWiFiCallingEnabled: %d
-[CSDCallCapabilities setWiFiCallingEnabled:]
TUCallCapabilitiesXPCServer - setWiFiCallingRoamingEnabled: %d
-[CSDCallCapabilities setWiFiCallingRoamingEnabled:]
TUCallCapabilitiesXPCServer - setVoLTECallingEnabled: %d
-[CSDCallCapabilities setVoLTECallingEnabled:]
TUCallCapabilitiesXPCServer - setThumperCallingEnabled: %d
-[CSDCallCapabilities setThumperCallingEnabled:]
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d
-[CSDCallCapabilities setRelayCallingEnabled:]
TUCallCapabilitiesXPCServer - setThumperCallingAllowed: %d secondaryDeviceID: %@
-[CSDCallCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:]
TUCallCapabilitiesXPCServer - setThumperCallingAllowedOnDefaultPairedDevice: %d
-[CSDCallCapabilities setThumperCallingAllowedOnDefaultPairedDevice:]
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d forDeviceWithID: %@
-[CSDCallCapabilities setRelayCallingEnabled:forDeviceWithID:]
TUCallCapabilitiesXPCServer - invalidateAndRefreshWiFiCallingProvisioningURL
-[CSDCallCapabilities invalidateAndRefreshWiFiCallingProvisioningURL]
TUCallCapabilitiesXPCServer - invalidateAndRefreshThumperCallingProvisioningURL
-[CSDCallCapabilities invalidateAndRefreshThumperCallingProvisioningURL]
TUCallCapabilitiesXPCServer - requestPinFromPrimaryDevice
Using the following account for the PIN request: %@
No device found for account %@. All accounts: %@
No primary Thumper account found for PIN request. This should only happen because an account exists but has no empty device slots. All accounts: %@
-[CSDCallCapabilities requestPinFromPrimaryDevice]
TUCallCapabilitiesXPCServer - cancelPinRequestFromPrimaryDevice
-[CSDCallCapabilities cancelPinRequestFromPrimaryDevice]
Received device list changed notification: %@
Received device capability changed notification: %@
Received accounts changed delegate callback
Received FaceTime availability changed delegate callback
Received outgoingCallerIDChanged delegate callback
Received telephonyCallCapabilitiesChanged delegate callback
Disabling support because %@ was set to YES
Enabling support because %@ was set to YES
disableIsTelephonyDevice
forceIsTelephonyDevice
disableSupportsCellularData
forceSupportsCellularData
disableDisplayingTelephonyCallSupport
forceDisplayingTelephonyCallSupport
disableDisplayingFaceTimeAudioCallSupport
forceDisplayingFaceTimeAudioCallSupport
disableDisplayingFaceTimeVideoCallSupport
forceDisplayingFaceTimeVideoCallSupport
disableCanEnableWiFiCalling
forceCanEnableWiFiCalling
disableCanEnableVoLTECalling
forceCanEnableVoLTECalling
disableCanEnableThumperCalling
forceCanEnableThumperCalling
_setWiFiCallingEnabled: asking to change value from %d to %d
_setWiFiCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setVoLTECallingEnabled: asking to change value from %d to %d
_setVoLTECallingEnabled: not updating value. Is currently %d and asked to set to %d
_setWiFiCallingRoamingEnabled: asking to change value from %d to %d
_setWiFiCallingRoamingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingEnabled: asking to change value from %d to %d
_setThumperCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingAccountID: asking to set account ID to %@
_setThumperCallingAllowed: asking to change value from %d to %d on secondary device ID %@
_setThumperCallingAllowed: not updating value. No device slots remain for this device. Displaying notification to the user
_setThumperCallingAllowed: not updating value. Is currently %d and asked to set to %d on secondary device ID %@
No cloud calling device appears to be a default paired device: %@. Ignoring setThumperCallingAllowedOnDefaultPairedDevice request
_devicesSupportRelayCalling - telephonyDeviceExists = %d, relayCapableDeviceExists = %d, defaultPairedDeviceExists = %d
q24@?0@"TUCloudCallingDevice"8@"TUCloudCallingDevice"16
relayCallingDisabled
_setRelayCallingEnabledDefault: changing value to %d
_setRelayCallingEnabled: Changing value from %d to %d
_setRelayCallingEnabled: Not updating value. Is currently %d and asked to set to %d
relayCallingDisabledForDeviceID
setRelayCallingEnabledDefault:forDeviceWithID: changing value to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Changing value from %d to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Not updating value. Is currently %d and asked to set to %d for %@
localThumperAccount
T@"CSDThumperAccount",R,N
T@"TUCallCapabilitiesState",&,N,V_state
pairedHostDeviceState
T@"TUCallCapabilitiesState",&,N,V_pairedHostDeviceState
accountsController
T@"CSDAccountsController",&,N,V_accountsController
telephonyCallCapabilities
T@"CSDTelephonyCallCapabilities",&,N,V_telephonyCallCapabilities
thumperPushHandler
T@"CSDThumperPushHandler",&,N,V_thumperPushHandler
thumperPinExchangeController
T@"CSDPinExchangeController",&,N,V_thumperPinExchangeController
thumperCapabilitiesMonitor
T@"CSDThumperCapabilitiesMonitor",&,N,V_thumperCapabilitiesMonitor
T@"TUCallCapabilitiesState",R,N
CSDFaceTimeCall
Inviting handle %@ and additional peers %@ to chat %@
dialWithRequest: Using account %@
dialWithRequest: Could not initiate FaceTime call - No chat returned for handle %@ with account %@
dialWithRequest: Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
dialWithRequest: Could not initiate FaceTime Call - Account %@ not registered
dialWithRequest: Could not initiate FaceTime Call - No IM service
dialWithRequest: No chat returned, setting disconnectedReason to TUCallDisconnectedReasonDialFailed
Calling declineInvitation on chat %@
Setting disconnected reason to remote hangup because ended reason is %@
Setting disconnected reason to answered elsewhere because ended reason is %@
Setting disconnected reason to declined elsewhere because ended reason is %@
Setting disconnected reason to remote unavailable because ended reason is %@
Setting disconnected reason to account unsupported because ended reason is %@
Setting disconnected reason to network unsupported because ended reason is %@
Setting disconnected reason to call failed because ended reason is %@
Calling setRemoteVideoPresentationSize with %@ for chat %@
IMAVInterface
_NSStringDescriptionForIMAVChatError
WLAN_SETTINGS
WIFI_SETTINGS
prefs:root=WIFI
SETTINGS
prefs:root=General&path=DATE_AND_TIME
prefs:root=FACETIME&path=LOCATION&guid=%@
ALERT_VIDEO_FAILED_LOCAL_INCOMPATIBLE_MESSAGE
faceTimeCallDelegate
T@"<CSDFaceTimeCallDelegate>",W,N,V_faceTimeCallDelegate
chat
T@"IMAVChat",&,N,V_chat
imService
T@"IMService",R,N
CSDCallMayRequireBreakBeforeMakeChangedNotification
CSDCallHasStartedOutgoingChangedNotification
CSDCall
dialWithRequest: dialRequest %@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDCall.m
dialRequest is invalid: %@
SFCoordinatedAlertRequest
Sharing
Coordinated alert request came back with bestIsMe: %d info: %@ error: %@
v28@?0@"NSError"8B16@"NSDictionary"20
Starting coordinated alert request to determine ringtone un-suppression: %@
faceTimeIDSStatus for destinationID: %@ is: %@
v16@?0q8
Invalidating display context for %@
Posting %@ because mayRequireBreakBeforeMake changed from %d to %d for %@
Posting %@ because hasStartedOutgoing changed from %d to %d for %@
T@"TUDialRequest",&,N,V_dialRequest
displayContext
T@"TUCallDisplayContext",&,N,V_displayContext
faceTimeIDStatusRefreshed
TB,N,V_faceTimeIDStatusRefreshed
T@"<CSDCallDelegate>",W,N,V_delegate
T@"CSDCallDataSource",W,N,V_dataSource
audioInterruptionActivationStateObserver
T@"<CXAudioSessionActivationStateObserver>",R,N
callStatusFromUnderlyingSource
T@"NSDate",R,C,N,V_dateStartedOutgoing
T@"NSDate",R,C,N,V_dateSentInvitation
T@"NSDate",R,C,N,V_dateStartedConnecting
T@"NSDate",R,C,N,V_dateConnected
shouldOverrideCallStatus
callStatusFromOverride
isSendingAudio
TB,N,V_isSendingAudio
audioInterruptionProviderType
audioInterruptionOperationMode
audioInterruptionRequiresDelayedEnd
handoffDynamicIdentifier
providerProcessIdentifier
cxCall
T@"CXCall",R,N
bytesOfDataUsed
Tq,N,V_bytesOfDataUsed
CSDRouteManagerPreferredRouteChangedNotification
com.apple.telephonyutilities.callservicesd.routemanager
AVSystemController_PickableRoutesDidChangeNotification
Celestial
RouteManager
AVSystemController_PreferredExternalRouteDidChangeNotification
AVSystemController_CarPlayIsConnectedDidChangeNotification
AVSystemController_ServerConnectionDiedNotification
Pickable Routes Changed: %@
Preferred external route changed: %@
CarPlay is connected changed: %@
Server connection died: %@
Audio device list changed
No audio route collection found for audio category %@ and audio mode %@ for call %@
Found preferred AVAudioDevice: %@
PhoneCall
StarkCapability
AVSystemController
AVSystemController_CarPlayIsConnectedAttribute
Updating isCarPlayDeviceConnected to %d
audioRouteCollections
T@"NSDictionary",C,N,V_audioRouteCollections
carPlayDeviceConnected
TB,N,GisCarPlayDeviceConnected,V_carPlayDeviceConnected
anyPreferredRouteAvailableAndActiveForAnyCall
TB,R,N,GisAnyPreferredRouteAvailableAndActiveForAnyCall
carPlayRouteAvailable
TB,R,N,GisCarPlayRouteAvailable
This call's call history identifier is nil
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CHRecentCall_CSD.m
<%@: %p uniqueId=%@ mediaType=%@ ttyType=%@ callerId=%@ callerNameForDisplay=%@ callerIdSubStringForDisplay=%@ callerIdIsBlocked=%d addressBookRecordId=%@>
descriptionForShortcutItem
T@"NSString",R,N
dialRequestForRedial
T@"TUHandle",R,N
messageType
callService
latencyMs
hasProtocolVersion
TQ,N,V_protocolVersion
hasMessageType
Ti,N,V_messageType
hasCallService
TI,N,V_callService
hasLatencyMs
TQ,N,V_latencyMs
protoWantsVideo
inviteData
hasProtoWantsVideo
TB,N,V_protoWantsVideo
hasInviteData
T@"CSDMessagingAVConferenceInviteData",&,N,V_inviteData
B16@?0@"TUAudioRoute"8
com.apple.telephonyutilities.callservicesd.audioroutecollection
v32@?0@"TUAudioRoute"8Q16^B24
v24@?0@"TUAudioRoute"8^B16
T@"NSString",&,N,V_category
T@"NSString",&,N,V_mode
routeDictionaries
T@"NSArray",&,N,V_routeDictionaries
routes
receiverRouteAvailable
TB,R,N,GisReceiverRouteAvailable
speakerRouteAvailable
TB,R,N,GisSpeakerRouteAvailable
wirelessHeadsetAvailable
TB,R,N,GisWirelessHeadsetRouteAvailable
airTunesRouteAvailable
TB,R,N,GisAirTunesRouteAvailable
carAudioRouteAvailable
TB,R,N,GisCarAudioRouteAvailable
bluetoothRouteAvailable
TB,R,N,GisBluetoothRouteAvailable
isAnyPreferredRouteAvailableAndActive
preferredAndActiveRoute
T@"TUAudioRoute",R,N
main
Caught SIGINFO. Dumping debug info.
Caught SIGUSR1
Caught SIGUSR2
callservicesd launched
com.apple.private.alloy.facetime.audio
call_info
call_info_source
call_directory_provider_bundle_id
hasCallInfo
callInfo
T@"AWDCSDCallStatus",&,N,V_callInfo
hasCallInfoSource
callInfoSource
Ti,N,V_callInfoSource
hasCallDirectoryProviderBundleId
callDirectoryProviderBundleId
T@"NSString",&,N,V_callDirectoryProviderBundleId
CSDCallInfoSourceNone
CSDCallInfoSourceContacts
CSDCallInfoSourceMaps
CSDCallInfoSourceSuggestions
CSDCallInfoSourceCallDirectory
CSDCallInfoSourceLocation
hasFaceTimeAudioAvailable
TB,N,V_faceTimeAudioAvailable
hasFaceTimeVideoAvailable
TB,N,V_faceTimeVideoAvailable
kCMSessionProperty_AudioCategory
kCMSessionProperty_AudioMode
kCMSessionProperty_ClientPriority
kCMSessionProperty_InitiationDescription
kCMSessionProperty_CreateSpeakerDevice
kAUVoiceIOProperty_OperationMode
AVAudioClient
AVAudioClientInterruptionProvider
Setting audio session properties: %@
Starting audio session
Successfully started audio session
Failed to start audio session: %@
Not starting audio session since it is already active
Stopping audio session
Not stopping audio session since it is not active
00000000-0000-0000-0000-000000000000
conferenced
TB,N,GisConferenced
TB,N,GisOutgoing
hasSentInvitation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDVoIPProcessAssertionManager.m
%s is unavailable
-[CSDVoIPProcessAssertionManager init]
CSDVoIPProcessAssertionManager
%s: bundleIdentifier: %@
-[CSDVoIPProcessAssertionManager acquireProcessAssertionForBundleIdentifier:]
Acquiring process assertion for bundle identifier %@
Acquired process assertion for bundle identifier %@
Failed to acquire process assertion for bundle identifier %@
Incremented count of process assertion for bundle identifier %@ to %lu
-[CSDVoIPProcessAssertionManager invalidateProcessAssertionForBundleIdentifier:]
Decremented count of process assertion for bundle identifier %@ to %lu
processAssertions
T@"NSCountedSet",&,N,V_processAssertions
IncomingCallFilter
Initialized CXCallDirectoryStore for reading
Unable to initialize CXCallDirectoryStore for reading: %@
@"CXCallDirectoryStore"8@?0
Device first unlock block invoked, attempting to initialize CXCallDirectoryStore...
DND changed from %d to %d
%s: Incoming call filter block called with sourceAddress: %@ providerIdentifier: %@
__41-[CSDIncomingCallFilter _callFilterBlock]_block_invoke
%s: Disallowing call with sourceAddress %@ since _doNotDisturbAllowsCallFromSourceAddress returned NO
%s: Blocking call with sourceAddress %@ since _callDirectoryAllowsCallFromSourceAddress returned NO
q24@?0@"NSString"8@"NSString"16
DND enabled: %@ onCall: %@
%s: Even though DND is enabled, BBNotificationBehaviorShouldPresentNotificationFromSenderWithHandler says we should present for source address %@
__66-[CSDIncomingCallFilter _doNotDisturbAllowsCallFromSourceAddress:]_block_invoke
%s: Timed out waiting for BBNotificationBehaviorShouldPresentNotificationFromSenderWithHandler, allowing call to be presented
-[CSDIncomingCallFilter _doNotDisturbAllowsCallFromSourceAddress:]
Error checking if call directory database contains blocking entry for source address %@: %@
%s: Disallowing call from source address %@ since blocked by call directory
-[CSDIncomingCallFilter callDirectoryAllowsCallFromSourceAddress:countryCode:]
dndEnabled
TB,N,GisDNDEnabled,V_dndEnabled
deviceLockObserver
T@"<CSDDeviceLockStateObserver>",&,N,V_deviceLockObserver
callDirectoryStore
T@"CXCallDirectoryStore",&,N,V_callDirectoryStore
callDirectorySanitizer
T@"CXCallDirectorySanitizer",&,N,V_callDirectorySanitizer
CSDRecentsController
Call history changed
Call status changed for call: %@
Call connected. Marking all calls as read.
Writing recent call to history: %@
%@:%@
Adding transaction object to transactionObjectsAwaitingCallHistory: %@
Ending transaction for %@ because we timed out waiting for a call history database changed notification
read == NO
callerId
%s: bytesOfDataUsed: %ld uniqueProxyIdentifier: %@ callHistoryIdentifier: %@
-[CSDRecentsController updateBytesOfDataUsed:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:]
Call still exists so updating its bytes of data used: %@
No call still exists so updating bytes of data used via CHManager
%s: handle: %@
-[CSDRecentsController markReadRecentCallsMatchingHandle:]
read == %@
%s: There are %d missed calls to consider
%s: Checking whether %@ matches this call
__58-[CSDRecentsController markReadRecentCallsMatchingHandle:]_block_invoke
%s: Call %@ with phone number destination ID %@ matches
%s: %@ and %@ are NOT equal
%s: Recent call (%@) matches handle (%@)
v32@?0@"CHRecentCall"8Q16^B24
uniqueId IN %@
Deleting recent call with UUID %@ because provider %@ no longer exists
recentsManager
T@"CHManager",&,N,V_recentsManager
callProviderManager
T@"TUCallProviderManager",&,N,V_callProviderManager
T@"<CSDRecentsNotificationDelegate>",W,N,V_delegate
transactionObjectsAwaitingCallHistory
T@"NSMutableArray",&,N,V_transactionObjectsAwaitingCallHistory
T@"NSMutableDictionary",&,N,V_cachedCalls
incomingCallFilter
T@"CSDIncomingCallFilter",&,N,V_incomingCallFilter
CSDIDSSessionStateChangedNotification
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDIDSSession.m
-[CSDIDSSession init]
forceBTClassic
<%@ %p isInitiator=%d state=%d remoteProtocolVersion=%@ session=%@>
CSDIDSSession
%s: called for session %@ that was not the initiator (%d) or that already had a version set (%d)
-[CSDIDSSession setReceiverProtocolVersion:]
%s: self: %@ wiFiAllowed: %d
-[CSDIDSSession setWiFiAllowed:]
%s: self: %@ cellularDataAllowed: %d
-[CSDIDSSession setCellularDataAllowed:]
%s: self: %@ cellularDataPreferred: %d
-[CSDIDSSession setCellularDataPreferred:]
%s: self: %@ clientUUID: %@
-[CSDIDSSession setClientUUID:]
Running block %@ with socketDidBecomeAvailable=%d
Pending block on socket availability: %@
Socket availability block timed out: %@
-[CSDIDSSession sendData:waitUntilConnected:completion:]
Session is not connected and waitUntilConnected is YES. Pending data
Session is not connected but waitUntilConnected is NO. Sending data (timestamp: %f)
Session is connected. Sending data (timestamp: %f)
Session is ending/ended. Dropping data on the floor
%s: self: %@ data: %@
-[CSDIDSSession sendDataAndSendInvitationIfNecessary:completion:declineOnError:]
Session is waiting. Sending invitation for session (timestamp: %f)
Session is not waiting. Not sending invitation
-[CSDIDSSession sendDataAndAcceptInvitationIfNecessary:completion:]
Session is waiting. Accepting invitation for session (timestamp: %f)
Session is not waiting. Attempting to send data
%s: self: %@ data: %@ reason: %d
-[CSDIDSSession _sendDataAndCancelInvitationIfNecessary:reason:completion:]
Session is waiting. Canceling invitation for session (timestamp: %f)
-[CSDIDSSession sendDataAndDeclineInvitationIfNecessary:completion:]
Session is waiting. Declining invitation for session (timestamp: %f)
Setting session %@ to ending for prepareToEnd
Not setting session %@ to ending for prepareToEnd because session is not connected
Ending session %@
Received invitation ACCEPT from %@ (timestamp: %f)
Received invitation DECLINE from %@ (timestamp: %f)
Received invitation CANCEL from %@ (timestamp: %f)
Session %@ started (socket is %d)
Session %@ ended with no reason
Session %@ ended with reason %d: %@
Session appears to have ended with a local hangup reason: %d
Session appears to have ended with a remote hangup reason: %d
Session appears to have ended with an unanswered reason: %d
Session appears to have ended with an accepted elsewhere reason: %d
Session appears to have ended with a declined elsewhere reason: %d
Session appears to have ended with a fatal reason: %d
Session appears to have ended due to mismatched networks reason: %d
Received invitation SENT for session %@ with tokens %@ shouldBreakBeforeMake %d (timestamp: %f)
Received invitation ACCEPT with data for session %@ from (fromID=%@) device %@ (timestamp: %f)
Received invitation CANCEL with data for session %@ from (fromID=%@) device %@ (timestamp: %f)
Received invitation DECLINE with data for session %@ from (fromID=%@) device %@ (timestamp: %f)
Received session MESSAGE for session %@ from (fromID=%@) device %@ (timestamp: %f)
T@"IDSSession",&,N,V_session
remoteDevice
T@"IDSDevice",&,N,V_remoteDevice
remoteProtocolVersionNumber
T@"NSNumber",&,N,V_remoteProtocolVersionNumber
identifiers
T@"NSMutableSet",&,N,V_identifiers
initiator
TB,N,GisInitiator,V_initiator
didConnect
TB,N,V_didConnect
Ti,N,V_endedReason
pendingData
T@"NSMutableArray",&,N,V_pendingData
blocksPendingSocketAvailability
T@"NSMutableArray",&,N,V_blocksPendingSocketAvailability
preferences
T@"NSMutableDictionary",&,N,V_preferences
T@"<CSDIDSSessionDelegate>",W,N,V_delegate
remoteProtocolVersion
underlyingErrorCode
idsDestination
UUID
TB,N,GisWiFiAllowed
TB,N,GisCellularDataAllowed
cellularDataPreferred
TB,N,GisCellularDataPreferred
T@"NSUUID",C,N
allIdentifiers
T@"NSArray",R,C,N
com.apple.telephonyutilities.callservicesd.useractivitycommunicator
UserActivityCommunicator
Updated currently broadcasted activity to %@
Queueing activity at beginning of queue: %@ (timeout: %f)
Queueing activity at end of queue: %@ (timeout: %f)
Dequeueing activity: %@
Registered to listen for activity type %d and dynamic identifier %@ and started listening for best app suggestions
Registered to listen for activity type %d and dynamic identifier %@
Unregistered to listen for activity type %d and stopped listening for best app suggestions
Unregistered to listen for activity type %d
Best app suggestion changed to %@
Firing delegate callback with activity type %d (userActivityType=%@) and dynamicIdentifier %@
activityQueue
T@"NSMutableOrderedSet",&,N,V_activityQueue
currentlyBroadcastedActivity
T@"CSDUserActivity",&,N,V_currentlyBroadcastedActivity
bestAppSuggestionManager
T@"UABestAppSuggestionManager",&,N,V_bestAppSuggestionManager
T@"<CSDUserActivityCommunicatorDelegate>",W,N,V_delegate
com.apple.private.alloy.phone.auth
B16@?0@"CSDCall"8
AudioInterruptionResolver
%s: resolved descriptor changed, updated lastResolvedDescriptor to %@
-[CSDAudioInterruptionResolver updateResolutionTriggeredByCall:]
%s: calls: %@ call: %@
-[CSDAudioInterruptionResolver callCenterObserver:callChanged:]
T@"<CSDAudioInterruptionResolverDelegate>",W,N
T@"CSDAudioInterruptionDescriptor",R,N
ttyProviderObserver
T@"<CSDTTYProviderObserver>",&,N,V_ttyProviderObserver
lastResolvedDescriptor
T@"CSDAudioInterruptionDescriptor",&,N,V_lastResolvedDescriptor
T@"<CSDAudioInterruptionResolverDelegate>",W,N,Vdelegate
%s must be called from the main thread
-[CSDDirtyCallManager addCall:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDDirtyCallManager.m
DirtyCallManager
Adding call %@ to dirty calls pool
Draining pool with dirty calls: %@
Asked to dispatch drain the pool
dirtyCalls
T@"NSMutableOrderedSet",&,N,V_dirtyCalls
T@"<CSDDirtyCallManagerDelegate>",W,N,V_delegate
CallStateController
Disconnecting all calls because wantsCallDisconnectionOnInvalidation=YES for %@
Initializing XPC listener
com.apple.telephonyutilities.callservicesdaemon.callstatecontroller
Relay capabilities enabled
Relay capabilities disabled
Disconnecting relaying call because relay calling is no longer enabled: %@
Disconnecting call being relayed elsewhere because relay calling is no longer enabled: %@
Disconnecting proxy call because a video call started connecting: %@
Accepted new XPC connection to CSDCallStateController from pid: %d, bundle ID: %@, connection: %@, client: %@
Updating clients with call: %@
Updating client %@ with disconnected call: %@ calls: %@
Updating client %@ with calls: %@
v24@?0@"CSDClient"8@"<TUCallServicesClient>"16
%@-%d
B16@?0@"CSDClient"8
Handling %@ for %@
Handling %@
Handling %@ with user info %@
-[CSDCallStateController handleCTCallEndedInDoNotDisturbNotification:]
%s: got back TUCall %@
%s: error deserializing CTCallRef from data: %@
%s: no call found since userInfo[kCTCallSerialized] is nil
Pushing all calls to paired client device because no preferred route is active and we found a call hosted here with its expected endpoint on the paired client device: %@
Pulling all calls from paired client device because a preferred route is active and we found a call with an endpoint elsewhere: %@
Non-ringing call found on device: %@. All calls: %@
Ignoring ringing call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d) or a vehicle route is available (%d) or call is TTY (%d)
Ignoring sending call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Not sending out call started connecting message because call is already disconnected: %@
Ignoring connecting call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Not sending out call connected message because call is already disconnected: %@
Ignoring connected call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Ignoring active call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Ignoring held call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
com.apple.telephonyutilities.callservicesdaemon.voicemailcallended
Sending voicemail call ended notification %@
Ignoring disconnected call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
performDialCall: nil call returned from outgoingCallFromProxyCall: for dial request %@
%s: current calls are %@
-[CSDCallStateController performHoldCall:]
-[CSDCallStateController performUnholdCall:]
-[CSDCallStateController performGroupCall:withCall:]
-[CSDCallStateController performUngroupCall:]
Ignoring request to performUngroupCall because the call is not grouped
-[CSDCallStateController performSwapCalls]
callsToHold
callsToUnhold
Ignoring request to performSwapCalls because either there is no active call (%d) or there is no held call (%d)
-[CSDCallStateController performEndActiveAndAnswerCall:withRequest:]
callsToDisconnect
callsToAnswer
-[CSDCallStateController performEndHeldAndAnswerCall:withRequest:]
-[CSDCallStateController performHoldActiveAndAnswerCall:withRequest:]
%s: Changed sourceIdentifier of answerRequest to %@
-[CSDCallStateController performDisconnectCall:]
-[CSDCallStateController performDisconnectCurrentCallAndActivateHeld]
   ... sending calls were found so adding them to list of calls to disconnect: %@
   ... and adding held calls to the list of calls to unhold: %@
   ... no sending calls were found so adding all active calls to list of calls to disconnect: %@
   ... no sending or active calls were found so adding all held calls to list of calls to disconnect: %@
   ... and moving call %@ from call to unhold to call to disconnect because a disconnected call from the same provider doesn't support unambiguous multi-party state: %@
-[CSDCallStateController performDisconnectAllCalls]
-[CSDCallStateController performSetUplinkMuted:forCall:]
Handoff context did not include any handoff payload. Assuming this is for a relay call
Ignoring request to performPushHostedCallsToPairedClientDevice because not all calls are hosted here and an endpoint here and relayable. All calls: %@
Ignoring request to performPushHostedCallsToPairedClientDevice because no paired device exists
Ignoring request to performPullHostedCallsFromPairedHostDevice because not all calls are not hosted here and not an endpoint here and relayable. All calls: %@
Ignoring request to performPullHostedCallsFromPairedHostDevice because no paired device exists
Field Mode: Sending digits %@
Disconnecting call with disconnected reason %d: %@
Disconnecting call normally since it was outgoing (%d) or was never connecting to relay (%d): %@
Not handling new call because the call was already handled: %@
Not handling new hosted call because it is neither ringing nor sending: %@
%s: dialRequest: %@
-[CSDCallStateController dialWithRequest:]
-[CSDCallStateController dialWithRequest:reply:]
v16@?0@"TUCall"8
Dialed call: %@
%s: answerRequest: %@
-[CSDCallStateController answerCallWithRequest:]
%s: uniqueProxyIdentifier: %@
-[CSDCallStateController holdCallWithUniqueProxyIdentifier:]
Could not find call for uniqueProxyIdentifier %@. All calls: %@
-[CSDCallStateController unholdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController disconnectCallWithUniqueProxyIdentifier:]
%s: uniqueProxyIdentifier: %@ otherUniqueProxyIdentifier: %@
-[CSDCallStateController groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:]
Asked to group call with data source %@ with another call with a different data source %@
Could not find call for uniqueProxyIdentifier %@ (%d) or could not find call for otherUniqueProxyIdentifier %@ (%d)
-[CSDCallStateController ungroupCallWithUniqueProxyIdentifier:]
-[CSDCallStateController swapCalls]
%s: uniqueProxyIdentifier: %@ key: %d
-[CSDCallStateController playDTMFToneForCallWithUniqueProxyIdentifier:key:]
-[CSDCallStateController disconnectCurrentCallAndActivateHeld]
-[CSDCallStateController disconnectAllCalls]
-[CSDCallStateController pullRelayingCallsFromClient]
%s: sourceIdentifier: %@
-[CSDCallStateController pushRelayingCallsToHostWithSourceIdentifier:]
%s: userInfo: %@
-[CSDCallStateController pullCallFromClientUsingHandoffActivityUserInfo:reply:]
-[CSDCallStateController sendMMIOrUSSDCodeWithRequest:]
%s: uplinkMuted: %d
-[CSDCallStateController setUplinkMuted:forCallWithUniqueProxyIdentifier:]
%s: downlinkMuted: %d
-[CSDCallStateController setDownlinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pushHostedCallsToPairedClientDevice]
-[CSDCallStateController pullHostedCallsFromPairedHostDevice]
-[CSDCallStateController sendHardPauseDigitsForCallWithUniqueProxyIdentifier:]
%s: digits: %@
-[CSDCallStateController sendTelephonyDigits:]
%s: proxyCall: %@
-[CSDCallStateController updateCallWithProxy:]
-[CSDCallStateController enteredForegroundForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController enteredBackgroundForAllCalls]
%s: uniqueProxyIdentifier: %@ size: %@
-[CSDCallStateController setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:]
%s: uniqueProxyIdentifier: %@ presentationState: %d
-[CSDCallStateController setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:]
%s: deviceUID: %@
-[CSDCallStateController setCurrentInputDeviceToDeviceWithUID:]
-[CSDCallStateController setCurrentOutputDeviceToDeviceWithUID:]
%s: clientCapabilities: %@
-[CSDCallStateController setClientCapabilities:]
Messaging connection ended for calls %@. Disconnecting calls that are an endpoint here but are not hosted here.
B24@?0@"TUCall"8@"NSDictionary"16
Messaging connection failed for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Messaging connection could not establish link for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
%s: call: %@
-[CSDCallStateController faceTimeCallDidDial:]
%s: holding call %@
-[CSDCallStateController requestInitialState:]
shouldRelayToOtherDevices
T@"CSDCallProviderManager",&,N,V_callProviderManager
T@"CSDCallController",&,N,V_callController
recentsController
T@"CSDRecentsController",&,N,V_recentsController
relayCallDelegate
T@"CSDRelayCallDelegate",&,N,V_relayCallDelegate
handledCalls
T@"NSHashTable",&,N,V_handledCalls
dirtyCallManager
T@"CSDDirtyCallManager",&,N,V_dirtyCallManager
originating_process_id
failed
timed_out
actions
hasOriginatingProcessId
originatingProcessId
T@"NSString",&,N,V_originatingProcessId
hasFailed
TB,N,V_failed
hasTimedOut
timedOut
TB,N,V_timedOut
T@"NSMutableArray",&,N,V_actions
B8@?0
DeviceLockStateObserver
hasBeenUnlocked changing from %d to %d
Device has been unlocked, so invoking block immediately
Device has not been unlocked, so storing block to be performed upon first unlock
Device has not been unlocked and is not yet observing device lock changes, so beginning to observe device lock changes
firstUnlockCallbacks
T@"NSMutableArray",&,N,V_firstUnlockCallbacks
hasBeenUnlocked
TB,N,V_hasBeenUnlocked
notifyObserver
T@"<TUNotifyObserver>",&,N,V_notifyObserver
hasBeenUnlockedBlock
T@?,C,N,V_hasBeenUnlockedBlock
com.apple.telephonyutilities.callservicesd.voipapplicationcontroller
CSDVoIPApplicationController
com.apple.telephonyutilities.callservicesdaemon.voip
com.apple.pushkit.launch.voip
bundleIDs
-[CSDVoIPApplicationController voipRegister]
aps-environment
Asked to register bundle ID %@ with APS environment %@ for VoIP
Ignoring voipRegister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
-[CSDVoIPApplicationController voipUnregister]
Asked to unregister bundle ID %@ with APS environment %@ from VoIP
Ignoring voipUnregister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
%s: for connection: %@ publicToken: %@
-[CSDVoIPApplicationController connection:didReceivePublicToken:]
Requesting token for topic %@ for bundle ID %@
No environment found for connection %@
%s: for connection: %@ token: %@ topic: %@ identifier: %@
-[CSDVoIPApplicationController connection:didReceiveToken:forTopic:identifier:]
%s: for connection: %@ message: %@
-[CSDVoIPApplicationController connection:didReceiveIncomingMessage:]
Incoming message has topic: %@ bundleID: %@
Application %@ is not running. Will attempt to open the application and acquire a process assertion
Error opening bundle ID %@: %@
Dropping incoming message because the bundle ID failed to launch
Dropping incoming message because the bundle ID did not launch in time
Successfully opened application
Successfully took out process assertion
Dropping incoming message because the process assertion could not be acquired
Invalidating process assertion for bundle ID %@
No existing VoIP application found for bundle ID %@
%@.%@
com.apple.telephonyutilities.callservicesdaemon.voip.push
com.apple.telephonyutilities.callservicesdaemon.voip.push.development
No APS connection found for environment %@
Registering application with bundle ID %@ and client %@ in environment %@
Not registering bundle ID %@ because it is not entitled (%d) or no APS connection exists for the environment (%d)
Environment was %@ but is now %@. Flushing out old registration with previous environment
Requesting token for topic %@
Setting enabled topics from %@ to %@
Unregistering application %@ in environment %@
Supplied environment was nil. Inferring it as %@
Disabling topic %@ and invalidating its token for connection %@
Disabling topic %@ and invalidating its token for all connections
productionConnection
T@"APSConnection",&,N,V_productionConnection
developmentConnection
T@"APSConnection",&,N,V_developmentConnection
bundleIdentifierToVoIPApplication
T@"NSMutableDictionary",&,N,V_bundleIdentifierToVoIPApplication
dataSourceToIdentifierToCalls
T@"NSMapTable",&,N,V_dataSourceToIdentifierToCalls
dataSources
sandboxedRingtoneSoundLinkFilename
localizedLabel
hasLocalizedLabel
T@"NSString",&,N,V_localizedLabel
<%@: %p %@>
object=%@ processName=%@ processBundleIdentifier=%@
object
T@,&,N,V_object
identifiersWithPendingCoalescingBlocks
T@"NSMutableSet",&,N,V_identifiersWithPendingCoalescingBlocks
blockToExecuteAfterPendingCoalescingBlocksByIdentifier
T@"NSMutableDictionary",&,N,V_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
remote
TB,R,N,GisRemote
T@"TUCallServicesClientCapabilities",&,N,V_capabilities
propertiesDescription
RelayHostController
Failed to start conference connection for answered call %@: %@. Disconnecting call with relay failed
Socket did not become available for answered call %@
v16@?0B8i12
Conference connection failed for call %@: %@. Disconnecting call with relay failed
Not disconnecting call because it is hosted and an endpoint here or it is neither hosted nor an endpoint here: %@
Received did stop for call that is already disconnecting/disconnected
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
SBSLaunchApplicationWithIdentifier
SpringBoardServices
Dialing without relay because cannotRelayAudioOrVideoOnPairedDevice is set (%d) or a preferred route is active (%d)
Nil call returned when dialing call. Notifying client of failed dial call for %@
Nil call returned when dialing call. Notifying client of failed dial call for %@ 
Failed to start conference connection for dialed call uniqueProxyIdentifier %@: %@.
Conference connection stopped (cleanly=%d) for dialed call uniqueProxyIdentifier %@: %@
Received %@ message, but the socket didn't become available
Received %@ message, but we already have some non-relaying calls. Sending device busy message.
Answering without relay because wantsHoldMusic is set (%d) or cannotRelayAudioOrVideoOnPairedDevice is set (%d)
-[CSDRelayHostController handleAnswerCallMessageFromClient:fromPairedDevice:]
-[CSDRelayHostController handlePlayDTMFToneForKeyMessageFromClient:]
-[CSDRelayHostController handleDisconnectCallMessageFromClient:]
-[CSDRelayHostController handleHoldCallMessageFromClient:]
-[CSDRelayHostController handleUnholdCallMessageFromClient:]
%s: Could not find call with other uniqueProxyIdentifier %@. All current calls: %@
-[CSDRelayHostController handleGroupCallMessageFromClient:]
%s: No other unique proxy identifiers included. Assuming legacy behavior
Could not find another call to group with. All calls: %@
-[CSDRelayHostController handleUngroupCallMessageFromClient:]
-[CSDRelayHostController handleEndActiveAndAnswerMessageFromClient:]
-[CSDRelayHostController handleEndHeldAndAnswerMessageFromClient:]
-[CSDRelayHostController handleHoldActiveAndAnswerMessageFromClient:]
No call was specified with SendHardPauseDigits message...
...so sending hard pause digits for call %@
...and no hosted call was found with TUHardPauseDigitsStateDigitsAvailable, so not sending hard pause digits
Setting sourceIdentifier to %@ for all calls before pulling
Opening URL for handled pushRelayingCalls message from client: %@
Could not find any audio route with source identifier %@. Ignoring push relaying calls request
Asked to pull relaying calls from client when no calls with an endpoint elsewhere exist. All calls: %@
Pushing hosted call: %@
Conference did not start successfully when pushing call. Resetting endpointOnCurrent device to YES for %@
Socket did not become available when pushing call. Resetting endpointOnCurrent device to YES for %@
access-calls
modify-calls
mock-calls
access-call-capabilities
modify-call-capabilities
access-call-providers
modify-call-providers
Entitlement check: In %s, client %@ lacks capability '%@'
CSDUserActivity
%s: Bad activity type: %d
+[CSDUserActivity activityWithType:dynamicIdentifier:userInfo:]
Registering for %@ user activity type and dynamic identifier %@
com.apple.telephonyutilities.suppressringtone
Asked to register for activity type %d, but that is not supported
Unregistering for %@ user activity type and dynamic identifier %@
Asked to unregister for activity type %d, but that is not supported
com.apple.mobilephone
<%@ %p activityType=%@ dynamicIdentifier=%@ activityUserInfo=%@>
userActivity
T@"NSUserActivity",&,N,V_userActivity
dynamicIdentifier
T@"NSString",&,N,V_dynamicIdentifier
Ringtones
com.apple.telephonyutilities.callservicesd.callprovidermanagerdatasource
CSDCallProviderManagerDataSource
Error creating '%@' sandbox extension directory: %@
com.apple.LaunchServices.applicationUnregistered
Error creating link to source ringtone sound URL '%@' with filename '%@': %@
Skipping Sandboxing URL as the passed in URL turns out to be a symbolic link: %@
Updating provider from %@ to %@
Error while querying file attributes: %@
registeredProvidersVersion
registeredProviders
Could not deserialize data to TUCallProvider instance: %@
Archived object was of unexpected class %@: %@
Registered providers object was of unexpected class %@: %@
Not loading registered providers because current registered providers version is %ld and minimum version is %d
Loaded registered providers: %@
Saving registered providers: %@
Error removing links for filenames not in array (%@): %@
Unregistering provider because its application is no longer installed: %@
providersByIdentifier
T@"<TUCallProviderManagerDataSourceDelegate>",W,N
mutableProvidersByIdentifier
T@"NSMutableDictionary",&,N,V_mutableProvidersByIdentifier
ringtonesSandboxExtensionDirectory
T@"CSDSandboxExtensionDirectory",&,N,V_ringtonesSandboxExtensionDirectory
T@"<TUCallProviderManagerDataSourceDelegate>",W,N,V_delegate
shouldTraceSignposts
com.apple.telephonyutilities.callservicesd.duetreporter
lastReportedInCallValue
TB,N,V_lastReportedInCallValue
<display_name>
CELLULAR_SETTINGS
prefs:root=MOBILE_DATA_SETTINGS_ID
%s is unavailable, call another initializer instead.
-[CSDRelayConferenceConnection init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDRelayConferenceConnection.m
<%@ %p identifier=%@ isHost=%d isUsingBaseband=%d isAudioDisabled=%d receivedSuccessfulDidStart=%d>
receivedSuccessfulDidStart
TB,N,V_receivedSuccessfulDidStart
T@"NSString",C,N,V_identifier
host
TB,N,GisHost,V_host
usingBaseband
TB,N,GisUsingBaseband,V_usingBaseband
audioDisabled
TB,N,GisAudioDisabled,V_audioDisabled
T@"VCCapabilities",R,C,N
preparedToStop
TB,N,GisPreparedToStop,V_preparedToStop
didStartHandler
T@?,C,N,V_didStartHandler
didStopHandler
T@?,C,N,V_didStopHandler
com.apple.telephonyutilities.callservicesd.telephonycallcapabilities
<%@ %p>
    Are capabilities valid: %@
    System capabilities: %@
    Call management state: %@
    WiFi capability info: %@
    VoLTE capability info: %@
    Thumper capability info: %@
    Thumper local device ID: %@
    Thumper local account ID: %@
    Thumper accounts: %@
TelephonyCallCapabilities
No primary Thumper account found for outgoingRelayCallerID %@ but requireMatchingCallerID is NO. Arbitrarily choosing last Thumper account from list: %@
CSDTelephonyCallCapabilities asked to end Emergency Callback Mode
B16@?0@"CSDThumperAccount"8
Updated call management state to %@
Updated telephony system capabilities to %@
Updated emergency callback mode to %d
Updated local Thumper account ID to %@ and local Thumper device ID to %@
q24@?0@"CSDThumperAccount"8@"CSDThumperAccount"16
Updated thumper accounts to %@
Error getting can set capability for %@ (domain=%d, code=%d)
Error getting device info for %@ calling (domain=%d, code=%d)
Error getting device list for %@ calling (domain=%d, code=%d)
Error getting system capabilities (domain=%d, code=%d)
Calling _CTServerConnectionSetCapabilityExtended() with capability: %@ value: %d capabilityInformation: %@
Error setting capability for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAddDevice() with capability: %@ uniqueID: %@
Calling _CTServerConnectionPhoneServicesRemoveDevice() with capability: %@ uniqueID: %@
Error adding/removing device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAccountStatusChanged() and _CTServerConnectionSendBarrier() with capability: %@
capabilitiesValid
TB,N,GareCapabilitiesValid,V_capabilitiesValid
telephonySystemCapabilities
T@"NSDictionary",&,N,V_telephonySystemCapabilities
telephonyCallManagementState
T@"NSDictionary",&,N,V_telephonyCallManagementState
localThumperDeviceID
T@"NSString",C,N,V_localThumperDeviceID
localThumperAccountID
T@"NSString",C,N,V_localThumperAccountID
thumperAccounts
T@"NSArray",C,N,V_thumperAccounts
wiFiCallingCapabilityInfo
T@"TUCTCapabilityInfo",&,N,V_wiFiCallingCapabilityInfo
voLTECallingCapabilityInfo
T@"TUCTCapabilityInfo",&,N,V_voLTECallingCapabilityInfo
thumperCallingCapabilityInfo
T@"TUCTCapabilityInfo",&,N,V_thumperCallingCapabilityInfo
capabilityToLastSavedAccountID
T@"NSMutableDictionary",&,N,V_capabilityToLastSavedAccountID
T@"<CSDTelephonyCallCapabilitiesDelegate>",W,N,V_delegate
supportsSimultaneousVoiceAndData
csCallingCurrentlyAvailable
TB,R,N,GisCSCallingCurrentlyAvailable
wiFiCallingCurrentlyAvailable
TB,R,N,GisWiFiCallingCurrentlyAvailable
wiFiEmergencyCallingAvailable
TB,R,N,GisWiFiEmergencyCallingAvailable
wiFiEmergencyCallingSupported
TB,R,N,GisWiFiEmergencyCallingSupported
voLTECallingCurrentlyAvailable
TB,R,N,GisVoLTECallingCurrentlyAvailable
emergencyCallbackModeEnabled
TB,R,N,GisEmergencyCallbackModeEnabled,V_emergencyCallbackModeEnabled
Received %@ with object %@ and userInfo %@
Received CT call management state changed notification
Received Emergency Callback Mode Changed notification %@ with object %@ and userInfo %@
FaceTimeCallDataSource
IMAVChatIsMutedChangedNotification
IMAVChatSendingAudioChangedNotification
callForChat: No cached call found. Initializing new call with chat %@
daemonConnected:
handleChatStateChanged: %@
handleChatStateChanged: call %@ ended with reason '%@', error '%@'
handleChatFirstRemoteFrameArrived: %@
handleChatInvitationSent: %@
handleChatConferenceMetadataUpdated: %@
handleChatIsMuteChangedNotification: %@
handleChatSendingAudioChangedNotification: %@
handleChatCallInfoChangedNotification: %@
invitedToIMAVChat %@
filteredIncomingIMAVChat %@
RelayCallDelegate
This call can't relay audio/video (%d) or another call already has an endpoint elsewhere (%d). Setting endpoint to be elsewhere and not attempting to start a conference
Asked to dial call %@ but the host was unavailable
Asked to dial call %@ but the session was unavailable
v16@?0B8B12
Socket did not become available when dialing call %@
Setting endpoint elsewhere for call because it can't be answered with audio or video relay: %@
Socket did not become available when answering call %@
Socket did not become available when pulling call. Resetting endpointOnCurrent device to NO for %@
Disconnecting call with conference failed disconnected reason: %@
Not disconnecting call for failed conference start because it is not an endpoint here: %@
Not disconnecting call for conference didStop because it is not an endpoint here: %@
tuLabeledHandle
T@"TULabeledHandle",R,N
AudioInterruptionProviderPool
No existing AVAudioSession interruption provider for ID %u (usesLocalAudioSession: %d), creating a new one
Created AVAudioSession interruption provider %@
Error retrieving AVAudioSession provider with ID %u
Decreasing priority of other proxy AVAudioSession interruption provider %@ to Default
No provider returned for descriptor %@
factory
T@"<CSDAudioInterruptionProviderFactory>",&,N,V_factory
interruptionProviders
T@"<CSDAudioInterruptionProvider>",&,N,V_localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
T@"NSMutableDictionary",&,N,V_proxyAVAudioSessionInterruptionProvidersByAudioSessionID
T@"<CSDAudioInterruptionProvider>",&,N,V_avAudioClientInterruptionProvider
com.apple.calls.callservicesd
Default
calls
T@"NSMutableArray",&,N,V_calls
CSDFaceTimeIMAccountCallerIDChangedNotification
com.apple.telephonyutilities.callservicesd.facetimeimaccount
CSDFaceTimeIMAccount
Adding %@ as an alias on account %@
Failed to add alias %@ to account %@. Validation status: %ld, validation error reason: %ld, vetted aliases: %@
Updating display name to %@ on account %@
Received IMDaemon connected notification: %@
Received display name changed notification: %@
Received preferred account changed notification: %@
lastKnownFaceTimeCallerID
Loaded last known FaceTime caller ID as %@
Last known FaceTime caller ID value was not a string: %@ (class=%@)
Saving last known FaceTime caller ID as %@
FaceTime callerID changed from %@ to %@
sharedInstance
T@"CSDFaceTimeIMAccount",R,N
CSDMockCallDidDisconnectNotification
callIdentifier
Ti,N,V_callIdentifier
mockService
Ti,N,Gservice,V_mockService
mockCallStatus
Ti,N,GcallStatus,V_mockCallStatus
mockUniqueProxyIdentifier
T@"NSString",C,N,GuniqueProxyIdentifier,V_mockUniqueProxyIdentifier
mockIsVideo
TB,N,GisVideo,V_mockIsVideo
mockHostedOnCurrentDevice
TB,N,GisHostedOnCurrentDevice,V_mockHostedOnCurrentDevice
mockEndpointOnCurrentDevice
TB,N,GisEndpointOnCurrentDevice,V_mockEndpointOnCurrentDevice
mockBlocked
TB,N,GisBlocked,V_mockBlocked
mockVoicemail
TB,N,GisVoicemail,V_mockVoicemail
mockCallDuration
Td,N,GcallDuration,V_mockCallDuration
mockEmergency
TB,N,GisEmergency,V_mockEmergency
mockSOS
TB,N,GisSOS,SsetSOS:,V_mockSOS
mockOutgoing
TB,N,GisOutgoing,V_mockOutgoing
mockConferenced
TB,N,GisConferenced,V_mockConferenced
mockUsingBaseband
TB,N,GisUsingBaseband,V_mockUsingBaseband
mockTTYType
Ti,N,GttyType,V_mockTTYType
mockStartTime
Td,N,GstartTime,V_mockStartTime
mockDisconnectedReason
Ti,N,GdisconnectedReason,V_mockDisconnectedReason
mockHandle
T@"TUHandle",&,N,Ghandle,V_mockHandle
mockLocalizedLabel
T@"NSString",C,N,GlocalizedLabel,V_mockLocalizedLabel
mockCompanyName
T@"NSString",C,N,GcompanyName,V_mockCompanyName
mockCallUUID
T@"NSString",C,N,GcallUUID,V_mockCallUUID
mockCallerNameFromNetwork
T@"NSString",C,N,GcallerNameFromNetwork,V_mockCallerNameFromNetwork
mockBytesOfDataUsed
Tq,N,GbytesOfDataUsed,V_mockBytesOfDataUsed
mockSubtype
Ti,N,Gsubtype,V_mockSubtype
mockNeedsManualInCallSounds
TB,N,GneedsManualInCallSounds,V_mockNeedsManualInCallSounds
mockAudioCategory
T@"NSString",C,N,GaudioCategory,V_mockAudioCategory
mockAudioMode
T@"NSString",C,N,GaudioMode,V_mockAudioMode
mockCallGroupUUID
T@"NSUUID",C,N,GcallGroupUUID,V_mockCallGroupUUID
mockBackingProvider
T@"TUCallProvider",C,N,GbackingProvider,V_mockBackingProvider
mockDisplayProvider
T@"TUCallProvider",C,N,GdisplayProvider,V_mockDisplayProvider
mockProviderContext
T@"NSDictionary",C,N,GproviderContext,V_mockProviderContext
mockHasAudioFinished
TB,N,GhasAudioFinished,V_mockHasAudioFinished
mockHasStartedOutgoing
TB,N,GhasStartedOutgoing,V_mockHasStartedOutgoing
mockHasSentInvitation
TB,N,GhasSentInvitation,V_mockHasSentInvitation
mockConnecting
TB,N,GisConnecting,V_mockConnecting
mockConnected
TB,N,GisConnected,V_mockConnected
mockUplinkMuted
TB,N,GisUplinkMuted,SsetUplinkMuted:,V_mockUplinkMuted
mockMayRequireBreakBeforeMake
TB,N,GmayRequireBreakBeforeMake,V_mockMayRequireBreakBeforeMake
mockAudioInterruptionProviderType
Tq,N,GaudioInterruptionProviderType,V_mockAudioInterruptionProviderType
ambiguityState
swappable
mergeable
holdAllowed
addCallAllowed
takingCallsPrivateAllowed
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
sendToVoicemailAllowed
hasAmbiguityState
TI,N,V_ambiguityState
hasSwappable
TB,N,V_swappable
hasMergeable
TB,N,V_mergeable
hasHoldAllowed
TB,N,V_holdAllowed
hasAddCallAllowed
TB,N,V_addCallAllowed
hasTakingCallsPrivateAllowed
TB,N,V_takingCallsPrivateAllowed
hasHardPauseAvailable
TB,N,V_hardPauseAvailable
hasEndAndAnswerAllowed
TB,N,V_endAndAnswerAllowed
hasHoldAndAnswerAllowed
TB,N,V_holdAndAnswerAllowed
hasSendToVoicemailAllowed
TB,N,V_sendToVoicemailAllowed
ReportingController
%s: for call: %@
-[CSDReportingController reportCallEnteredForeground:]
-[CSDReportingController reportAllCallsBackgrounded]
%s: for message: %@
-[CSDReportingController reportRelayMessageReceived:fromPairedDevice:]
%s: transactionGroup: %@
-[CSDReportingController reportTransactionGroupCompleted:]
%s: with action: %@ for call %@
-[CSDReportingController reportProviderFailedWithAction:forCall:]
reporters
T@"NSMutableArray",&,N,V_reporters
CSDIDSDeviceListChangedNotification
CSDIDSServiceCallerIDChangedNotification
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDIDSService.m
All CSDIDSService subclasses must override +sharedInstance
com.apple.telephonyutilities.callservicesd.%@
CSDIDSService
%@ initialized for service %@ with the following devices: %@
All CSDIDSService subclasses must override -serviceName
    devices: %@
    availableOutgoingRelayCallerIDs: %@
    defaultPairedDevice: %@
    pairedDevice: %@
    telephonyCapableDeviceExists: %@
    relayCapableDeviceExists: %@
Determining country code using account info %@
%@: Active accounts changed
%@: Devices changed
%@: Nearby devices changed
", "
%@ updated state: defaultPairedDeviceExists=%d, pairedDeviceExists=%d, telephonyCapableDeviceExists=%d, relayCapableDeviceExists=%d, availableOutgoingRelayCallerIDs=%@ deviceNames="%@"
T@"IDSService",&,N,V_idsService
telephonyCapableDeviceExists
TB,N,V_telephonyCapableDeviceExists
relayCapableDeviceExists
TB,N,V_relayCapableDeviceExists
devices
T@"NSArray",&,N,V_devices
pairedDevice
T@"IDSDevice",&,N,V_pairedDevice
defaultPairedDevice
T@"IDSDevice",&,N,V_defaultPairedDevice
availableOutgoingRelayCallerIDs
T@"NSSet",&,N,V_availableOutgoingRelayCallerIDs
serviceName
account
T@"IDSAccount",R,N
T@"IDSService",R,N
countryCode
defaultPairedDeviceExists
pairedDeviceExists
pairedDeviceUniqueIDOverride
TB,R,N,GisPairedDevice
canReceiveRelayedCalls
com.apple.telephonyutilities.callservicesd.telephonycalldatasource
TelephonyCallDataSource
Asked to answer telephony call %@ while disconnecting active telephony calls %@
Asked to answer telephony call %@ while disconnecting held telephony calls %@ and holding telephony calls %@
Asked to answer telephony call %@ while holding telephony calls %@
Asked to hold telephony calls %@ while unholding telephony calls %@
Asked to group telephony calls %@ with other telephony calls %@
Asked to ungroup telephony call %@ from other telephony calls %@
Asked to disconnect all telephony calls %@
Asked to disconnect telephony calls %@ while unholding telephony calls %@
Calling CTCallListDisconnect()
callForCTCall: No cached call found. Initializing new call with ctCall %@
handleCallAudioUpdatedForCall setting sourceIdentifier to %@ for call %@
Handling call control failure with cached calls %@ and current calls %@
Disconnecting call with TUCallDisconnectedReasonCallFailed because of call control failure: %@
Calling CTDTMFSendDigitsNow() with current hard pause digits: %@
Hard pause digits state changed from %d to %d
Updated cached media status to %d
mediaStatusActive
TB,R,N,GisMediaStatusActive
ctCallRefToTelephonyCallTable
T@"NSMapTable",&,N,V_ctCallRefToTelephonyCallTable
ctCallRefToTelephonyCallTableSemaphore
T@"NSObject<OS_dispatch_semaphore>",&,N,V_ctCallRefToTelephonyCallTableSemaphore
Ti,N,V_hardPauseDigitsState
T@"NSString",C,N,V_hardPauseDigits
cachedHardPauseDigitsStateIsValid
TB,N,V_cachedHardPauseDigitsStateIsValid
cachedMediaStatus
TB,N,V_cachedMediaStatus
cachedMediaStatusInitialized
TB,N,GisCachedMediaStatusInitialized,V_cachedMediaStatusInitialized
CSDTelephonyCallStatusChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallStatusChangedHandler got back TUCall %@
CSDTelephonyAlternateCallStatusChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallerIDChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallSubTypeChangedHandler for %@ with object %@ userInfo %@
CSDTelephonyCallCenterDaemonRestartedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallControlFailureHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyNewCarrierHandler callback for notification name: %@ object: %@ userInfo: %@
com.apple.carrier
CSDTelephonyCallAudioFinishedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyDTMFDigitsReadyHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyAudioToneRelayChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyAudioToneRelayChangedHandler: not handling audio tone relay changed since call is nil (%d) or kCTCallAudioToneStandard not found in user info %@ (%d)
CSDTelephonySetupAudioInterruptionChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyMediaStatusChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyStatusBecameAlertingHandler with object %@ user info %@
IDSSessionMessenger
Could not find session for identifier %@ to perform block on socket availability for. Dropping this block on the floor
No devices found that support service %d. Not creating a session.
Creating session to devices: %@
IDSCopyIDForDevice() for device returned a nil value, so we are going to skip creating a session to it: %@
Would have created a session to an empty destination set. Returning a nil session
Destroying session %@
Asked to prepare connected sessions to end
Accepting session for identifier %@
Canceling/declining session for identifier %@
Asked to end session for identifier %@
Asked to end ending sessions
sendMessageAndStartSessionIfNecessary for service %d and message type %@: %@
A session exists for this identifier already. Not starting a new one.
No session exists. Starting a new one by inviting all devices that support service %d
A session exists with a device that supports service %d: %@
We'll send this message via the existing session
Starting another session to the device
A session exists, but it's with a device that doesn't support service %d. Not starting a new session
Did not create session
sendMessageAndStartSessionIfNecessary for message type %@: %@
No IDSSession exists. Starting a new one by inviting to device %@
No IDSSession exists, and given device is nil. We can't start this session
A session exists: %@
Sending the message through the existing session
Starting a new session to the device
sendMessage:andAcceptInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session for identifier is %@
A current session already exists: %@
Sending the message through the current session
Sending the message through the current session and declining this one %@
No current session already exists, so sending the message through this session %@
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
_sendMessage:andCancelInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
_sendMessage:andDeclineInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
%s: for message type: %@ identifier: %@ waitUntilConnected: %d: %@
-[CSDIDSSessionMessenger sendMessage:forIdentifier:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:]
sendMessage through session %@ for message type %@: %@
Not sending message because protocolVersionCustomizationBlock's preventMessageSend was set to YES for message type %@: %@
No session available to send message type %@: %@
Invite received for session %@ from (fromID=%@) device %@ with message %@ (timestamp: %f)
... and it is from the same device that we have an active session with (%d) or we don't have a session (%d)
... so we are going to handle the session's message
... but we were told to ignore the invite
... but there was no accompanying message so just ignoring the invite
... but it is from a different device than the one that we have an active session with
... and we were told to decline the invite
... and we were NOT told to decline the invite, so just ignoring it
Session ended with reason %d and previous state %d
Notifying delegate of connection end
Notifying delegate of connection failure
Notifying delegate that connection could not establish link
Received invitation accept with no data payload.
Received invitation cancel with no data payload. Assuming the invitation was answered elsewhere
Received invitation decline with no data payload. Assuming invitation was accepted by sending a message through another session
waitingSession
T@"CSDIDSSession",R,N
currentSession
endingSession
T@"CSDIDSSession",R,N,V_endingSession
sessions
T@"NSMutableArray",&,N,V_sessions
T@"<CSDIDSSessionMessengerDelegate>",W,D,N
deviceWithWaitingSession
T@"IDSDevice",R,N
deviceWithActiveSession
AVConferenceProvider
Initializing AVConference with client UUID %@
Error calling getIsVideoPaused: %@
Setting pause video to %d for %@
Error calling setPauseVideo: %@
Setting conference visual rectangle of size %@ for %@
Setting conference state %@ for %@
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@ for %@
Failed to initialize a new call with device role %d. Got callID=%ld
Starting AVConference connection with isCaller=%d callID=%ld remoteInviteDictionary=%@ capabilities=%@ destination=%@
Stopping AVConference with callID=%ld
Canceling AVConference with callID=%ld
%s: conference=%@ didStartSession=%d userInfo=%@
-[CSDAVConferenceProvider conference:didStartSession:withUserInfo:]
%s: callID=%ld error=%@
-[CSDAVConferenceProvider conference:didStopWithCallID:error:]
%s: callID=%ld error=%@ callMetadata=%@
-[CSDAVConferenceProvider conference:didStopWithCallID:error:callMetadata:]
-[CSDAVConferenceProvider conference:receivedFirstRemoteFrameForCallID:]
%s: screenAttributes=%@ callID=%ld
-[CSDAVConferenceProvider conference:remoteScreenAttributesChanged:callID:]
%s: videoAttributes=%@ callID=%ld
-[CSDAVConferenceProvider conference:remoteVideoAttributesChanged:callID:]
-[CSDAVConferenceProvider conference:withCallID:didPauseAudio:error:]
-[CSDAVConferenceProvider conference:remoteAudioPaused:callID:]
-[CSDAVConferenceProvider conference:remoteVideoPaused:callID:]
%s: callID=%ld isStalled=%d
-[CSDAVConferenceProvider conference:withCallID:remoteMediaStalled:]
-[CSDAVConferenceProvider serverDiedForConference:]
%s: callID=%ld parameters=%@
-[CSDAVConferenceProvider conference:inititiateRelayRequest:requestDict:]
-[CSDAVConferenceProvider conference:sendRelayUpdate:updateDict:]
-[CSDAVConferenceProvider conference:cancelRelayRequest:requestDict:]
%s: callID=%ld isDegraded=%d isRemoteVideo=%d
-[CSDAVConferenceProvider conference:videoQualityNotificationForCallID:isDegraded:isRemote:]
%s: callID=%ld isNetworkBad=%d
-[CSDAVConferenceProvider conference:withCallID:networkHint:]
T@"<CSDAVConferenceProviderDelegate>",W,N
inputFrequencyMeteringEnabled
TB,N,GisInputFrequencyMeteringEnabled
outputFrequencyMeteringEnabled
TB,N,GisOutputFrequencyMeteringEnabled
microphoneMuted
TB,N,GisMicrophoneMuted
audioPaused
TB,N,GisAudioPaused
videoPaused
TB,N,GisVideoPaused
T@"<CSDAVConferenceProviderDelegate>",W,N,Vdelegate
UseEmergencyServicesTestNumber
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDTelephonyCall.m
CSDTelephonyCall -initWithCTCall: was called without a CTCallRef object
@16@?0@"NSString"8
IDSIDQueryController
IDSServiceNameFaceTime
TelephonyCall
Calling CTCallDialWithOptions() with options: %@
dialWithRequest: set destinationID to %@, since %@ is YES and this is an internal device
dialWithRequest: set destinationID to %@, since destinationID was nil and either %@ is NO (%d) or this is not an internal device (%d)
dialWithRequest: no CTCallRef returned from CTCallDialWithOptions(), setting TUCallDisconnectedReasonMMIOrUSSDLikely since TUIsMMIOrUSSDNumber is YES
dialWithRequest: no CTCallRef returned from CTCallDialWithOptions(), setting TUCallDisconnectedReasonDialFailed since TUIsMMIOrUSSDNumber is NO
Calling CTCallAnswerWithOptions with %@
Calling CTCallHold on call %@
Calling CTCallResume on call %@
Calling CTCallDisconnect on %@
SupportsUserBusyCauseCode
com.apple.operator
Setting disconnected reason to answered elsewhere because cause code string is answered elsewhere (%@ code=%d) for call %@
Setting disconnected reason to client device busy because cause code string is secondary device already in use (%@ code=%d) for call %@
Setting disconnected reason to handed off because cause code string is handed off (%@ code=%d) for call %@
Setting disconnected reason to remote busy because cause code string is user busy (%@ code=%d) and user busy is supported for call %@
Setting disconnected reason to call failed because cause code string is user busy (%@ code=%d) but user busy is NOT supported for call %@
Ignoring user busy cause code string (%@ code=%d) because this call is not outgoing: %@
Setting disconnected reason to call failed because cause code string is non-nil but is not recognized (%@ code=%d) for call %@
Setting disconnected reason to remote hangup because CTCallDidDeviceOriginateEnd returned NO for call %@
Calling CTCallJoinConference for %@
Calling CTCallLeaveConference for %@
Calling CTCallSwitchCallSource on %@ to %@
Setting downlinkMuted to %d for call %@
Asked to set isSendingAudio from %d to %d
Calling CTDTMFPlayStart() with key %d
Calling CTDTMFPlayStop()
call
T^{__CTCall=},N,V_call
faceTimeIDStatusRequested
TB,N,V_faceTimeIDStatusRequested
subtype
alerting
TB,R,N,GisAlerting,V_alerting
telephonyCallDelegate
T@"<CSDTelephonyCallDelegate>",W,N,V_telephonyCallDelegate
T@"CSDProviderCall",&,N,V_call
completionHandler
T@?,C,N,V_completionHandler
ProviderCallDataSource
Start call action fulfilled: %@
Start call action failed: %@
Answer call action fulfilled: %@
Answer call action failed: %@
End call action fulfilled: %@
End call action failed: %@
Set held call action fulfilled: %@
Set held call action failed but reverting state is allowed: %@
Set held call action failed and reverting state is not allowed: %@
Set group call action fulfilled: %@
Could not find call to group with for set group call action: %@. All call: %@
Set group call action failed but reverting state is allowed: %@
Play DTMF call action fulfilled: %@
Play DTMF call action failed: %@
Set sending video call action fulfilled: %@
Set sending video call action failed: %@
Set muted call action fulfilled: %@
Set muted call action failed: %@
Action fulfilled: %@
Action failed: %@
Not allowing requested start call action because call source %@ is at the maximum call group count of %lu: %@
Not allowing requested start call action because call with same UUID already exists: %@
Not allowing requested transaction because no call was found for call UUID %@ and call source %@. All calls: %@
Not allowing requested transaction because action is not allowed to be requested: %@
Not allowing requested transaction because it is empty: %@
Dialing new call due to requested start call action: %@
Adding supplemental set held call action for existing call %@
Could not serialize handoffActivityUserInfo into a CXHandoffContext: %@
com.apple.callkit.MyCallService.Provider
Could not use text extension provider with identifier %@. Make sure the test extension is installed
Could not determine call source for dial request: %@. All call sources: %@
Asked to perform action %@ for call %@
Asked to perform start call action %@ for call %@
Call source %@ registered with configuration %@
Received add incoming call request from call source %@ with UUID %@ update %@
Returning error for add incoming call request because allowCall=%d and isFromBlockList=%d
Returning error for add incoming call request because it is a video call and we are connected to CarPlay
Returning error for add incoming call request because it is a direct call to a secondary device and relay calling is preferred over direct calling
Ignoring add incoming call request because a call already exists with the same call UUID: %@
Call source %@ updated call with UUID %@ with update %@
No call found for call source %@ and UUID %@. All calls: %@
Call source %@ ended call with UUID %@ with ended at date %@ with reason %ld failure context %@
Call %@ already has a date ended
Call source %@ sent invitation for outgoing call with UUID %@ at date %@
Call %@ already has a date started outgoing
Call %@ is not outgoing
Call source %@ started connecting call with UUID %@ at date %@
Call %@ already has a date started connecting
Call source %@ connected outgoing call with UUID %@ at date %@
Call %@ already has a date connected
Call source %@ finished audio for call with UUID %@
Found call %@ for UUID %@, so setting hasAudioFinished
Did not find a call for UUID %@, so expediting deferred end interruption instead
Call source %@ received call with UUID: %@ crossDeviceIdentifier %@ bytesOfDataUsed %ld
Call source manager %@ completed transaction group %@
Pull call action fulfilled: %@
Pull call action failed: %@
Could not find pulled call context for completed pull call action %@. All contexts: %@
Call action completed for call: %@
Could not find call for completed call action: %@. All calls: %@
Action completed: %@
Call sources changed: %@
Ending call %@ since its backing call source %@ is no longer connected
Call controller host %@ requested transaction %@ for connection with identifier: %@ bundle: %@ extensionIdentifier: %@
Using call source %@ for requested transaction %@
Allowing requested transaction: %@
Not allowing requested transaction: %@
Not allowing requested transaction because no call source was found. All call sources: %@
v16@?0@"CXCallSource"8
Marking all calls as changed because providers changed
processAssertionManager
T@"CSDVoIPProcessAssertionManager",&,N,V_processAssertionManager
callSourceManager
T@"CXCallSourceManager",&,N,V_callSourceManager
deferCommittingTransactions
TB,N,V_deferCommittingTransactions
telephonyCallSource
T@"CXCallSource",R,N
faceTimeCallSource
T@"CXInProcessCallSource",&,N,V_faceTimeCallSource
faceTimeProviderDelegate
T@"<CXProviderDelegatePrivate>",&,N,V_faceTimeProviderDelegate
callControllerHost
T@"CXCallControllerHost",&,N,V_callControllerHost
callSourceFetcher
T@"CSDCallSourceFetcher",&,N,V_callSourceFetcher
pendingPulledCallContexts
T@"NSMutableDictionary",&,N,V_pendingPulledCallContexts
providerManager
T@"CSDCallProviderManager",&,N,V_providerManager
com.apple.telephonyutilities.callservicesd.audiointerruptionproviderqueue
AudioInterruptionController
%s: oldDescriptor: %@ descriptor: %@ call: %@
-[CSDAudioInterruptionController updateInterruptionFromDescriptor:toDescriptor:triggeredByCall:]
An end interruption was deferred but we now have an interruption descriptor, so ending interruption for all providers (before beginning new interruption) and canceling the deferred end interruption
Deferring end interruption by %.2f sec, since call requires delayed end interruption and there is no pending expedited end interruption
Ending interruption immediately, since hasPendingExpeditedEndInterruption=%d (for UUID %@) and audioInterruptionRequiresDelayedEnd=%d
Not ending interruption immediately, despite no longer having a resolved descriptor, since an end interruption has already been deferred
%s: UUID: %@
-[CSDAudioInterruptionController expediteDeferredEndInterruptionForCallWithUUID:]
Expediting deferred end interruption block
Attempted to expedite deferred end interruption block prematurely, so pending the UUID %@
-[CSDAudioInterruptionController resolutionChangedForResolver:fromDescriptor:toDescriptor:triggeredByCall:]
%s: notification: %@
-[CSDAudioInterruptionController handleMediaServicesWereResetNotification:]
-[CSDAudioInterruptionController handleAudioSessionInterruptionNotification:]
Other interruption has ended with shouldResume=%d
Notification userInfo did not include AVAudioSessionInterruptionOptionKey, so assuming we should not resume
audioInterruptionProviderQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_audioInterruptionProviderQueue
T@"<CSDAudioInterruptionResolver>",&,N,V_resolver
audioInterruptionProviderPool
T@"CSDAudioInterruptionProviderPool",&,N,V_audioInterruptionProviderPool
notificationCenter
T@"NSNotificationCenter",&,N,V_notificationCenter
deferredEndInterruptionBlock
T@?,C,N,V_deferredEndInterruptionBlock
pendingExpeditedEndInterruptionUUIDs
T@"NSMutableSet",&,N,V_pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
deferralDelegate
T@"<CSDAudioInterruptionControllerDeferralDelegate>",W,N,V_deferralDelegate
We have an active XPC connection but no corresponding CSDClient
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDClientManager.m
ClientManager
Rejecting client because it lacks the %@ capability: %@
B24@?0@8@"NSDictionary"16
-[CSDClientManager filterClientsEntitledForCapability:andPerformBlock:]
mutableClientsByObject
T@"NSMapTable",&,N,V_mutableClientsByObject
localClients
T@"NSHashTable",&,N,V_localClients
currentConnection
T@"NSXPCConnection",&,N,V_currentConnection
asynchronousExportedObjectProxy
T@,&,N,V_asynchronousExportedObjectProxy
synchronousExportedObjectProxy
T@,&,N,V_synchronousExportedObjectProxy
clients
currentClient
T@"CSDClient",R,N
remoteObjectInterface
T@"NSXPCInterface",&,N,V_remoteObjectInterface
exportedInterface
T@"NSXPCInterface",&,N,V_exportedInterface
exportedObject
T@,&,N,V_exportedObject
interruptionHandler
T@?,C,N,V_interruptionHandler
invalidationHandler
T@?,C,N,V_invalidationHandler
requiredConnectionCapability
T@"NSString",C,N,V_requiredConnectionCapability
T@"<CSDClientManagerDelegate>",W,N,V_delegate
T@"CSDClientManager",W,N,V_clientManager
synchronous
TB,N,GisSynchronous,V_synchronous
com.apple.TUCallCenter
CallDataSource
Started tracking call: %@
Stopped tracking call: %@
Asked to answer call %@ while disconnecting calls %@ and holding calls %@
Asked to hold calls %@ while unholding calls %@
Asked to group calls %@ with calls %@
Asked to ungroup call %@ from other calls in group %@
Asked to disconnect call %@ while ungrouping call %@
Asked to disconnect all calls %@
Asked to disconnect calls %@ while holding calls %@ and unholding calls %@ and ungrouping calls %@
Asked to set uplink muted to %d for calls %@
handleCallStatusChanged %@
%s: bytesOfDataUsed: %ld callHistoryIdentifier: %@
-[CSDCallDataSource handleBytesOfDataUsedChanged:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:]
uniqueProxyIdentifierToCallTable
T@"NSMapTable",&,N,V_uniqueProxyIdentifierToCallTable
uniqueProxyIdentifierToCallTableSemaphore
T@"NSObject<OS_dispatch_semaphore>",&,N,V_uniqueProxyIdentifierToCallTableSemaphore
currentCallSet
T@"NSMutableOrderedSet",&,N,V_currentCallSet
T@"NSOrderedSet",R,N
T@"CSDCallController",W,N,V_callController
CXProviderConfiguration
Invalid TULabeledHandle generated from CXLabelHandle %@
supportedTUHandleTypes
T@"NSSet",R,C,N
emergencyTULabeledHandles
RelayCallDataSource
Asked to hold relay calls %@ while unholding relay calls %@
Asked to answer relay call %@ while disconnecting active relay calls %@
Ignoring request to answer call because canBeAnswered is NO: %@
Asked to answer relay call %@ while disconnecting held relay calls %@ and holding relay calls %@
Asked to answer relay call %@ while holding relay calls %@
Asked to group relay calls %@ with relay calls %@
Asked to ungroup relay call %@ from other relay calls in group %@
Asked to disconnect relay call %@ while ungrouping relay call %@
Asked to disconnect relay calls %@
Asked to disconnect relay calls %@ while holding relay calls %@ and unholding relay calls %@ and ungrouping calls %@
Received notification: %@
<%@ %p string=%@ provider=%@ pid=%d mixed=%d suppress=%d>
resolvedCallStatusBarString
T@"NSString",C,N,V_resolvedCallStatusBarString
resolvedCallProvider
T@"TUCallProvider",C,N,V_resolvedCallProvider
resolvedCallProviderProcessIdentifier
Ti,N,V_resolvedCallProviderProcessIdentifier
TB,N,V_currentCallsHaveMixedProviders
inCallUIWantsStatusBarSuppression
TB,N,V_inCallUIWantsStatusBarSuppression
/BuildRoot/Library/Caches/com.apple.xbs/Sources/callservicesd_Sim/TelephonyUtilities-838.2.10/TUCallServicesDaemon/CSDCallCenterObserver.m
-[CSDCallCenterObserver init]
T@"<CSDCallCenterObserverDelegate>",W,N
T@"<CSDCallCenterObserverDelegate>",W,N,Vdelegate
CSDAudioActivationContext
CSDRelayController
CSDTransactionManager
CSDVoIPProcessAssertion
CSDAVConference
CSDAVConferenceProviderDelegate
NSObject
CSDAVConferenceConfiguration
Additions
CSDUserActivityManager
TUCallProviderManagerDelegate
CSDUserActivityCommunicatorDelegate
CSDIDSCallDataSource
CSDAggregateDictionaryReporter
CSDReporter
FaceTime
AWDCSDCallStatus
NSCopying
CSDFaceTimeIMAVProviderDelegate
IMAVControllerDelegate
CSDFaceTimeProviderDelegate
CXProviderDelegatePrivate
CXProviderDelegate
CSDFaceTimeIDSService
CSDCallController
CSDRelayIDSService
CSDMessagingCallModel
CSDRelayClientController
CSDRelayMessagingControllerClientMessagingDelegate
CSDAVAudioSessionInterruptionProvider
CSDAudioInterruptionProvider
CSDMessagingHandle
CSDProviderCall
CSDPauseDigitsQueueDelegate
CSDCallStateMonitor
CSDStatusBarManager
CSDStatusBarResolverDelegate
ManagerAdditions
CSDAdditions
CSDFaceTimeAudioCall
AWDCSDOtherFailureReport
CSDAudioInterruptionDescriptor
CSDThumperCapabilitiesMonitor
CSDAccountsController
IDSServiceDelegatePrivate
IDSServiceDelegate
CSDPauseDigits
CSDCallProviderManager
NSXPCListenerDelegate
TUCallProviderManagerXPCServer
TUCallProviderManagerInProcessServer
CSDFaceTimeVideoIDSService
CSDIDSCall
CSDIDSSessionDelegate
CSDAVConferenceDelegate
CSDMessagingRelayMessage
CSDMessagingCallProvider
CSDRelayMessagingController
CSDIDSMessengerDelegate
CSDIDSSessionMessengerDelegate
CSDDaemon
CXCallDirectoryExtensionManagerDelegate
CSDFaceTimeIDSProviderDelegate
CSDIDSCallDelegate
CSDCallDelegate
CSDMessagingAVConferenceInviteData
CSDAWDReporter
CSDIDSMessenger
CSDThumperAccount
CSDRelayCommonController
CSDRelayMessagingControllerCommonMessagingDelegate
CSDCallSourceFetcher
CSDThumperPushHandlerAdditions
CSDThumperPushHandler
CSDPinExchangeDelegate
CSDMessagingCall
CSDRelayCall
CSDPauseDigitsQueue
CSDXPCClient
CSDTTYProviderObserver
CSDPairedIDSDeviceMessenger
TUMockCallXPCProtocol
CSDMockCallDataSource
CSDAudioInterruptionProviderFactory
CSDPowerLogReporter
CSDFaceTimeProviderDelegateManagerDelegate
CSDVoIPApplication
CSDStatusBarResolver
CSDCallCenterObserverDelegate
CSDRelayConferenceInterface
AVConferenceDelegate
CSDSandboxExtensionDirectory
CSDPinExchangeController
AWDCSDCallAction
CSDCallCapabilities
TUCallCapabilitiesXPCServer
TUCallCapabilitiesXPCServerState
TUCallCapabilitiesXPCServerActions
CSDAccountsControllerDelegate
CSDTelephonyCallCapabilitiesDelegate
CSDThumperCapabilitiesMonitorDataSource
CSDFaceTimeCall
CSDCall
TUCallDisplayContextDelegate
CSDRouteManager
TUAudioDeviceControllerDelegate
AWDCSDRelayMessageReceived
CSDMessagingCallMessage
CSDAudioRouteCollection
CSDFaceTimeAudioIDSService
AWDCSDCallEnd
CSDMessagingCallCapabilitiesState
CSDAVAudioClientInterruptionProvider
CSDVoIPProcessAssertionManager
CSDIncomingCallFilter
CSDRecentsController
CSDIDSSession
IDSSessionDelegatePrivate
IDSSessionDelegate
CSDUserActivityCommunicator
UABestAppSuggestionManagerDelegate
CSDThumperIDSService
CSDAudioInterruptionResolver
CSDDirtyCallManager
CSDCallStateController
CSDFaceTimeCallDelegate
CSDDirtyCallManagerDelegate
TUCallServicesDaemonDelegate
TUCallServicesProtocol
TUCallServicesProxyCallActions
TUAudioDeviceControllerActions
TUCallServicesClientCapabilitiesActions
CSDRelayMessagingControllerDelegate
AWDCSDCallTransactionComplete
CSDDeviceLockStateObserver
PKVoIPXPCClient
PKVoIPXPCServer
CSDVoIPApplicationController
APSConnectionDelegate
CSDCallDataSourceMap
CSDMessagingLabeledHandle
CSDClient
CSDRelayHostController
CSDRelayMessagingControllerHostMessagingDelegate
CSDUserActivity
CSDCallProviderManagerDataSource
TUCallProviderManagerDataSource
CSDSignposts
CSDDuetReporter
CSDRelayConferenceConnection
CSDTelephonyCallCapabilities
CSDFaceTimeCallDataSource
CSDRelayCallDelegate
CSDAudioInterruptionProviderPool
AWDCSDCurrentCalls
CSDFaceTimeIMAccount
CSDMockCall
CSDMessagingCallModelState
CSDReportingController
CSDIDSService
Messaging
CSDTelephonyCallDataSource
CSDTelephonyCallDelegate
CSDIDSSessionMessenger
CSDAVConferenceProvider
CSDTelephonyCall
CSDPulledCallContext
CSDProviderCallDataSource
CXCallSourceManagerDelegate
CXCallSourceUpdates
CXCallControllerHostDelegate
CSDCallSourceFetcherDataSource
CSDProviderCallDelegate
CSDAudioInterruptionController
CSDAudioInterruptionResolverDelegate
CSDClientManager
NSXPCConnectionDelegate
CSDClientManagerExportedObjectProxy
CSDCallDataSource
CSDRelayCallDataSource
CSDStatusBarDescriptor
CSDCallCenterObserver
CSDFaceTimeVideoCall
@32@0:8B16i20@24
@24@0:8@16
@16@0:8
B24@0:8@16
Q16@0:8
v16@0:8
B16@0:8
v20@0:8B16
i16@0:8
v20@0:8i16
v24@0:8@16
@"NSString"
@"CSDCallStateController"
@"NSMutableSet"
v24@0:8@?16
@"BKSProcessAssertion"
v36@0:8@16B24@28
v36@0:8@"<CSDAVConferenceProvider>"16B24@"NSError"28
v40@0:8@16@24@32
v40@0:8@"<CSDAVConferenceProvider>"16@"NSError"24@"NSDictionary"32
v24@0:8@"<CSDAVConferenceProvider>"16
v32@0:8@16@24
v32@0:8@"<CSDAVConferenceProvider>"16@"NSData"24
v28@0:8@16B24
v28@0:8@"<CSDAVConferenceProvider>"16B24
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8@"Protocol"16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
v32@0:8q16@24
q16@0:8
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
I16@0:8
v20@0:8I16
v24@0:8q16
q32@0:8@16^@24
d16@0:8
v24@0:8d16
v24@0:8#16
@"<CSDAVConferenceDelegate>"
@"NSObject<OS_dispatch_queue>"
@"NSError"
@"NSDate"
@"CSDAVConferenceConfiguration"
@"<CSDAVConferenceProvider>"
{CGSize="width"d"height"d}
@"VCCapabilities"
@"NSUUID"
@"NSDictionary"
v24@0:8@"TUCallProviderManager"16
v28@0:8I16@20
v28@0:8I16@"NSString"20
@"CSDUserActivityCommunicator"
@"CSDUserActivity"
v40@0:8@16@24Q32
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@16@24B32
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
@?16@0:8
@24@0:8^{_NSZone=}16
v24@0:8Q16
^I16@0:8
I24@0:8Q16
v32@0:8^I16Q24
{?="list"^I"count"Q"size"Q}
{?="connectionTimeMs"b1"durationMs"b1"endReason"b1"providerEndedReason"b1"providerErrorCode"b1"setupTimeMs"b1"faceTimeTransportType"b1"telephonyTransportType"b1"hasConnected"b1"hasEnded"b1"isCurrentlyGrouped"b1"isHeld"b1"isIncoming"b1"isRelay"b1}
v24@0:8@"IMAVChat"16
v32@0:8@16q24
v32@0:8@"IMHandle"16q24
B24@0:8@"NSUUID"16
v24@0:8@"NSUUID"16
v32@0:8@"CXProvider"16@"CXSendMMIOrUSSDCodeAction"24
v32@0:8@"CXProvider"16@"CXSetSendingVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetRelayingCallAction"24
v32@0:8@"CXProvider"16@"CXPullCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationSizeCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationStateCallAction"24
v24@0:8@"CXProvider"16
B32@0:8@16@24
B32@0:8@"CXProvider"16@"CXTransaction"24
v32@0:8@"CXProvider"16@"CXStartCallAction"24
v32@0:8@"CXProvider"16@"CXAnswerCallAction"24
v32@0:8@"CXProvider"16@"CXEndCallAction"24
v32@0:8@"CXProvider"16@"CXSetHeldCallAction"24
v32@0:8@"CXProvider"16@"CXSetMutedCallAction"24
v32@0:8@"CXProvider"16@"CXSetGroupCallAction"24
v32@0:8@"CXProvider"16@"CXPlayDTMFCallAction"24
v32@0:8@"CXProvider"16@"CXAction"24
v32@0:8@"CXProvider"16@"AVAudioSession"24
v28@0:8@16I24
v56@0:8{CGSize=dd}16{CGSize=dd}32@48
I24@0:8q16
@"<CSDFaceTimeProviderDelegateManagerDelegate>"
@"CXProvider"
@"NSMutableOrderedSet"
@"CSDTelephonyCallDataSource"
@"CSDFaceTimeCallDataSource"
@"CSDIDSCallDataSource"
@"CSDRelayCallDataSource"
@"CSDProviderCallDataSource"
@"CSDMockCallDataSource"
@"NSArray"
{?="supportsAddCall"b1"supportsDTMF"b1"supportsGrouping"b1"supportsHolding"b1"supportsSendingToVoicemail"b1"supportsUnambiguousMultiPartyState"b1"supportsUngrouping"b1}
v28@0:8@"CSDMessagingRelayMessage"16B24
v24@0:8@"CSDMessagingRelayMessage"16
v24@0:8@"CSDAudioInterruptionDescriptor"16
@"CSDAudioInterruptionDescriptor"16@0:8
@28@0:8@16B24
q24@0:8q16
Q24@0:8q16
@"CSDAudioInterruptionDescriptor"
@"AVAudioSession"
@"CSDAudioActivationContext"
@20@0:8i16
@28@0:8i16@20
C16@0:8
v20@0:8C16
i24@0:8@16
{?="type"b1}
v24@0:8@"CSDPauseDigitsQueue"16
@40@0:8@16@24@32
@40@0:8@16@24B32B36
@"<CSDProviderCallDelegate>"
@"CXCallSource"
@"CXCallFailureContext"
@"CXCallUpdate"
@"CSDPauseDigitsQueue"
@"NSTimer"
v24@0:8@"<CSDStatusBarResolver>"16
@"<CSDStatusBarResolver>"
@"SBSStatusBarStyleOverridesAssertion"
{?="actionType"b1"failureReason"b1"timestamp"b1"providerWasReset"b1}
q32@0:8@16q24
@"<CXAudioSessionActivationStateObserver>"
@"<CSDThumperCapabilitiesMonitorDataSource>"
@"NPSDomainAccessor"
v68@0:8@16@24@32@40q48@56B64
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v72@0:8@16@24@32@40@48@56@64
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@16@24@32@40@48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@16@24d32@40
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@16@24@32@40@48@56
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@16@24@32B40@44
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@16@24@32B40@44@52
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v48@0:8@16@24@32@40
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v24@0:8@"IDSService"16
v40@0:8@16@24@?32
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@"NSObject<CSDAccountsControllerDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
Vv24@0:8@?16
Vv24@0:8@?<v@?@"NSDictionary">16
v24@0:8@"<TUCallProviderManagerXPCClient>"16
@32@0:8@16@24
@"NSXPCListener"
@"CSDClientManager"
@"IDSDevice"24@0:8@"NSString"16
v24@0:8@"CSDIDSSession"16
v36@0:8@"CSDIDSSession"16@"NSArray"24B32
v32@0:8@16i24i28
v32@0:8@"CSDIDSSession"16i24i28
v32@0:8@"CSDIDSSession"16@"NSData"24
v40@0:8@"CSDIDSSession"16@"NSData"24@"IDSDevice"32
v32@0:8@"CSDAVConference"16@"NSDictionary"24
v24@0:8@"CSDAVConference"16
v40@0:8@16q24@32
v40@0:8@"CSDAVConference"16q24@"NSError"32
v32@0:8@"CSDAVConference"16@"NSData"24
v32@0:8@"CSDAVConference"16q24
@36@0:8@16@24B32
v32@0:8@16B24B28
@"TUHandle"
@"<CSDIDSCallDelegate>"
@"CSDIDSSession"
@"CSDAVConference"
@24@0:8Q16
@"NSData"
@"CSDMessagingHandle"
@"NSMutableArray"
@"CSDMessagingCallCapabilitiesState"
@"CSDMessagingCallModel"
@"CSDMessagingCallModelState"
{?="hostCallCreationTime"b1"messageSendTime"b1"hardPauseState"b1"protoDisconnectedReason"b1"protoProtocolVersion"b1"protoService"b1"protoSoundRegion"b1"receivedMessageType"b1"type"b1"protoCannotBeAnswered"b1"protoCannotRelayAudioOrVideoOnPairedDevice"b1"protoEmergency"b1"protoExpectedEndpointOnMessagingDevice"b1"protoNeedsManualInCallSounds"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
{?="maximumCallGroups"b1"maximumCallsPerCallGroup"b1"supportsAudioAndVideo"b1"supportsAudioOnly"b1"supportsEmergency"b1"supportsVoicemail"b1}
v40@0:8@"CSDIDSMessenger"16@"CSDMessagingRelayMessage"24@"IDSDevice"32
v36@0:8@"CSDIDSMessenger"16@"NSArray"24B32
B24@0:8@"CSDMessagingRelayMessage"16
q24@0:8@16
q24@0:8@"CSDMessagingRelayMessage"16
@"NSArray"24@0:8@"CSDMessagingRelayMessage"16
v28@0:8i16@20
v32@0:8@16@?24
v28@0:8@16C24
v32@0:8@?16@24
@"<CSDRelayMessagingControllerDelegate>"
@"<CSDRelayMessagingControllerClientMessagingDelegate>"
@"<CSDRelayMessagingControllerHostMessagingDelegate>"
@"<CSDRelayMessagingControllerCommonMessagingDelegate>"
@"CSDIDSSessionMessenger"
@"CSDPairedIDSDeviceMessenger"
@"IDSDevice"
v24@0:8@"CXCallDirectoryExtensionManager"16
@"CSDCallStateMonitor"
@"CSDRelayMessagingController"
@"CSDRelayClientController"
@"CSDRelayHostController"
@"CSDRelayCommonController"
@"CSDStatusBarManager"
@"CXCallDirectoryManager"
@"CXCallDirectoryExtensionManager"
@"CSDVoIPApplicationController"
@"<NSObject>"
@"CSDAudioInterruptionController"
@"CSDIDSService"24@0:8@"CSDIDSCall"16
v32@0:8@"CSDIDSCall"16@"NSData"24
v32@0:8@"CSDIDSCall"16q24
v24@0:8@"CSDCall"16
@28@0:8@16i24
i24@0:8q16
@"FTServerBag"
v28@0:8I16@?20
i20@0:8i16
@"AWDServerConnection"
@"<CSDIDSMessengerDelegate>"
@32@0:8@16d24
v48@0:8@16@24@32@?40
@"<CSDCallSourceFetcherDataSource>"
@"NSMutableDictionary"
^{__CFString=}16@0:8
v32@0:8@"IDSDevice"16@?<v@?B@"NSString">24
v24@0:8@"IDSDevice"16
v24@0:8@?<v@?B>16
v40@0:8@"NSNumber"16@"NSString"24@?<v@?B>32
v32@0:8B16B20@24
v32@0:8B16B20@"IDSDevice"24
{?="startTime"b1"protoDisconnectedReason"b1"protoService"b1"protoSoundRegion"b1"protoStatus"b1"protoConferenced"b1"protoEmergency"b1"protoHasSentInvitation"b1"protoNeedsManualInCallSounds"b1"protoOutgoing"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8i16B20
@"TUCallProvider"
@"<CSDRelayCallDelegate>"
@"<CSDPauseDigitsQueueDelegate>"
@24@0:8d16
v40@0:8@16d24@?32
v24@0:8@"TUProxyCall"16
v24@0:8@?<v@?>16
@20@0:8I16
@"<CSDAudioInterruptionProvider>"20@0:8I16
@"<CSDAudioInterruptionProvider>"16@0:8
v40@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32
v56@0:8@16@24@32q40@48
v56@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
@"CNContactStore"
@"CSDFaceTimeIDSProviderDelegate"
@"CSDFaceTimeIMAVProviderDelegate"
@"CSDClient"
@"BKSApplicationStateMonitor"
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
@"<CSDStatusBarResolverDelegate>"16@0:8
v24@0:8@"<CSDStatusBarResolverDelegate>"16
@"CSDStatusBarDescriptor"16@0:8
@"<CSDStatusBarResolverDelegate>"
@"CSDStatusBarDescriptor"
@"<CSDCallCenterObserver>"
v36@0:8@16q24B32
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@16@24q32
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@16B24q28
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@16q24B32B36
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@16B24q28@36
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@16q24@32@40
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@16q24B32@36
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@16B24I28
v32@0:8@"AVConference"16B24I28
v40@0:8@16B24I28@32
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@16I24I28
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@16f24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v28@0:8B16@20
v28@0:8@16i24
v44@0:8@16i24@?28@?36
@"AVConference"
@40@0:8@16@24^@32
@32@0:8@16^@24
B32@0:8@16^@24
@"NSURL"
@"NSFileManager"
v36@0:8B16B20@24B32
@"<CSDPinExchangeDelegate>"
{?="actionType"b1"completionTimeMs"b1"failureReason"b1"state"b1}
v24@0:8@?<v@?@"TUCallCapabilitiesState">16
v28@0:8B16@"NSString"20
@"CSDThumperAccount"16@0:8
C32@0:8@16@24
@24@0:8B16B20
@"TUCallCapabilitiesState"
@"CSDAccountsController"
@"CSDTelephonyCallCapabilities"
@"CSDThumperPushHandler"
@"CSDPinExchangeController"
@"CSDThumperCapabilitiesMonitor"
@"<CSDFaceTimeCallDelegate>"
@"IMAVChat"
v24@0:8@"TUCallDisplayContext"16
@"TUCallDisplayContext"
@"<CSDCallDelegate>"
@"CSDCallDataSource"
@"TUDialRequest"
v24@0:8@"TUAudioDeviceController"16
{?="latencyMs"b1"protocolVersion"b1"timestamp"b1"callService"b1"messageType"b1}
@"CSDMessagingAVConferenceInviteData"
{?="protoProtocolVersion"b1"type"b1"protoWantsVideo"b1}
B24@0:8q16
v32@0:8@?16@?24
@24@0:8@?16
B24@0:8@?16
@"AWDCSDCallStatus"
{?="timestamp"b1"callInfoSource"b1}
{?="faceTimeAudioAvailable"b1"faceTimeVideoAvailable"b1}
@"NSCountedSet"
@32@0:8@16@?24
@"CXCallDirectoryStore"
@"<CSDDeviceLockStateObserver>"
@"CXCallDirectorySanitizer"
v40@0:8q16@24@32
@"CHManager"
@"TUCallProviderManager"
@"<CSDRecentsNotificationDelegate>"
@"CSDIncomingCallFilter"
v40@0:8@"IDSSession"16@"NSString"24@"NSData"32
v32@0:8@"IDSSession"16@"NSSet"24
v36@0:8@"IDSSession"16@"NSSet"24B32
v32@0:8@"IDSSession"16@"NSString"24
v24@0:8@"IDSSession"16
v36@0:8@16I24@28
v36@0:8@"IDSSession"16I24@"NSError"28
v32@0:8@"NSString"16@"NSData"24
@44@0:8@16@24@32i40
v36@0:8@16B24@?28
v36@0:8@16@?24B32
v36@0:8@16I24@?28
@"<CSDIDSSessionDelegate>"
@"IDSSession"
@"NSNumber"
v24@0:8@"UABestAppSuggestion"16
v32@0:8@16d24
v36@0:8@16d24B32
@"<CSDUserActivityCommunicatorDelegate>"
@"UABestAppSuggestionManager"
@"<CSDAudioInterruptionResolverDelegate>"16@0:8
v24@0:8@"<CSDAudioInterruptionResolverDelegate>"16
@"<CSDAudioInterruptionResolverDelegate>"
@"<CSDTTYProviderObserver>"
@"<CSDDirtyCallManagerDelegate>"
v24@0:8@"CSDFaceTimeCall"16
v32@0:8@"CSDDirtyCallManager"16@"CSDCall"24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@"TUDialRequest"16
v32@0:8@"TUDialRequest"16@?<v@?@"TUCall"@"NSArray">24
v32@0:8@"NSDictionary"16@?<v@?@"TUCall"@"NSArray">24
v24@0:8@"TUAnswerRequest"16
v24@0:8@"NSString"16
v32@0:8@"NSString"16@"NSString"24
v28@0:8@"NSString"16C24
v40@0:8@16{CGSize=dd}24
v40@0:8@"NSString"16{CGSize=dd}24
v28@0:8@"NSString"16i24
v24@0:8@"TUCallServicesClientCapabilities"16
v28@0:8@"NSArray"16B24
@"CSDCallController"16@0:8
v36@0:8@16i24@28
v32@0:8@16i24B28
@"CSDCallProviderManager"
@"CSDCallController"
@"CSDRecentsController"
@"CSDRelayCallDelegate"
@"NSHashTable"
@"CSDDirtyCallManager"
{?="completionTimeMs"b1"timestamp"b1"failed"b1"timedOut"b1}
@"<TUNotifyObserver>"
v24@0:8@"NSData"16
v24@0:8@"NSDictionary"16
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
@"APSConnection"
@"NSMapTable"
@"TUCallServicesClientCapabilities"
v36@0:8@"CSDMessagingRelayMessage"16B24@?<v@?B>28
@48@0:8@16@24@32@40
@36@0:8I16@20@28
B20@0:8I16
I24@0:8@16
@"NSUserActivity"
@"NSDictionary"16@0:8
@"<TUCallProviderManagerDataSourceDelegate>"16@0:8
v24@0:8@"<TUCallProviderManagerDataSourceDelegate>"16
@"<TUCallProviderManagerDataSourceDelegate>"
@"CSDSandboxExtensionDirectory"
B24@0:8{?=ii}16
@24@0:8r^{__CFString=}16
v28@0:8r^{__CFString=}16B24
v32@0:8r^{__CFString=}16@24
v36@0:8r^{__CFString=}16B24@28
v24@0:8r^{__CFString=}16
@"<CSDTelephonyCallCapabilitiesDelegate>"
@"TUCTCapabilityInfo"
v24@0:8@"CSDRelayCall"16
v32@0:8@"CSDRelayCall"16@"TUAnswerRequest"24
v32@0:8@"CSDRelayCall"16@"TUCall"24
v28@0:8@"CSDRelayCall"16C24
v36@0:8@"CSDRelayCall"16B24@"NSError"28
@"<CSDAudioInterruptionProviderFactory>"
@"<CSDAudioInterruptionProvider>"
{?="timestamp"b1}
{?="ambiguityState"b1"addCallAllowed"b1"endAndAnswerAllowed"b1"hardPauseAvailable"b1"holdAllowed"b1"holdAndAnswerAllowed"b1"mergeable"b1"sendToVoicemailAllowed"b1"swappable"b1"takingCallsPrivateAllowed"b1}
@"IDSService"
@"NSSet"
B20@0:8i16
@20@0:8B16
@24@0:8^{__CTCall=}16
@24@0:8^B16
@"NSObject<OS_dispatch_semaphore>"
v52@0:8@16@24@32q40B48
v44@0:8@16@24i32q36
v56@0:8@16@24@32q40@?48
v40@0:8@16@?24@?32
v48@0:8@16@24@?32@?40
v52@0:8@16@24@?32B40@?44
@24@0:8@"NSUUID"16
v48@0:8{CGSize=dd}16{CGSize=dd}32
B52@0:8B16@20@28@36^@44
B52@0:8B16@"NSDictionary"20@"VCCapabilities"28@"NSString"36^@44
v56@0:8q16@24d32@?40@48
v56@0:8q16@"NSDictionary"24d32@?<v@?@"NSDictionary"@"NSError">40@"NSObject<OS_dispatch_queue>"48
v24@0:8@"VCCapabilities"16
@"<CSDAVConferenceProviderDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceProviderDelegate>"16
@"<CSDAVConferenceProviderDelegate>"
^{__CTCall=}24@0:8@16
^{__CTCall=}16@0:8
v24@0:8^{__CTCall=}16
^{__CTCall=}
@"<CSDTelephonyCallDelegate>"
@"CSDProviderCall"
v32@0:8@"CXCallSourceManager"16@"CXTransactionGroup"24
v24@0:8@"CXCallSourceManager"16
v32@0:8@"CXCallSource"16@"CXProviderConfiguration"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32@?<v@?@"NSError">40
v40@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32
v56@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32
v32@0:8@"CXCallSource"16@"NSUUID"24
v48@0:8@16@24@32q40
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSData"32q40
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSString"32q40
v64@0:8@16@24@32@40@48@?56
v64@0:8@"CXCallControllerHost"16@"NSString"24@"NSBundle"32@"NSString"40@"CXTransaction"48@?<v@?@"NSError">56
@"CXCallSource"24@0:8@"NSString"16
@"CXCallSource"24@0:8@"TUDialRequest"16
@"TUCallProvider"24@0:8@"NSString"16
v32@0:8@"CXCallAction"16@"CSDProviderCall"24
v32@0:8@"NSArray"16@"CSDProviderCall"24
v32@0:8@"CXStartCallAction"16@"CSDProviderCall"24
B40@0:8@16@24^@32
@"CXCallControllerHost"
@"CSDVoIPProcessAssertionManager"
@"CXCallSourceManager"
@"CXInProcessCallSource"
@"<CXProviderDelegatePrivate>"
@"CSDCallSourceFetcher"
v48@0:8@"<CSDAudioInterruptionResolver>"16@"CSDAudioInterruptionDescriptor"24@"CSDAudioInterruptionDescriptor"32@"CSDCall"40
@"<CSDAudioInterruptionControllerDeferralDelegate>"
@"<CSDAudioInterruptionResolver>"
@"CSDAudioInterruptionProviderPool"
@"NSNotificationCenter"
@"<NSSecureCoding>"40@0:8@"NSXPCConnection"16@"NSXPCCoder"24@32
v36@0:8@"NSXPCConnection"16@"NSInvocation"24B32
B32@0:8@16@?24
v40@0:8@?16@?24@32
@?24@0:8@?16
v40@0:8@?16@24@32
@?32@0:8@16@?24
@"NSXPCInterface"
@"<CSDClientManagerDelegate>"
@"NSXPCConnection"
@"CSDCall"24@0:8@?<B@?@"CSDCall">16
@"<CSDCallCenterObserverDelegate>"16@0:8
v24@0:8@"<CSDCallCenterObserverDelegate>"16
@"NSArray"16@0:8
@"<CSDCallCenterObserverDelegate>"
otua
eulb
rkps
Beginning transaction for %@. Transaction count is now %lu
Ending transaction for %@. Transaction count is now %lu
Invalidating process assertion for %@
Preparing conference with configuration: %@
Initializing new callID with device role %d
Fetched local invite dictionary: %@
Error fetching local invite dictionary %@: %@
Fetching local invite dictionary using remote invite dictionary %@
Failed to initialize a new call with device role %d.
Failed to create an AVConference instance. This usually happens when the AVConference SPI can't communicate with mediaserverd over XPC
[WARN] Attempted to prepare conference which has already started preparing (state=%d)
destination: %@  configuration: %@
Successfully started connection with configuration=%@ (timestamp: %f)
Failed to start connection with configuration=%@: %@
[WARN] Attempted to start conference which has not been prepared (state=%d)
[WARN] Conference does not exist
Calling stop on conference %@
Calling cancel on conference %@
[WARN] Attempted to cancel a conference that has already started connecting: %@
Setting remote invite dictionary from %@ to %@
Attempting to set state to %d, which precedes current state %d
Setting microphoneMuted to %d for %@
Setting sendingAudio to %d
Setting sendingVideo to %d
Setting remoteVideoPresentationSize from %@ to %@
Setting remoteVideoPresentationState from %d to %d
Conference didStart timeout fired
Updating device role from %d to %d
conference=%@ didStartSession=%d error=%@
Successfully started session
Failed to start session. error=%@
didStopError=%@ callMetadata=%@
AVConference stopped in failure: %@
Sending delegate bytesOfDataUsageChanged: %ld
didPauseAudio=%d error=%@
remoteVideoPaused=%d
Registering to handle call handoff activity type with dynamic identifier %@ for provider %@
Frontmost call is hosted here ...
... and it is an endpoint here ...
... and we are a secondary device ...
... using a broadcast activity with dynamic identifier: %@.
[WARN] ... but no dynamic identifier could be found (%d) or no handoff user info exists (%d). Not broadcasting frontmost call
... but we are a primary device. Not broadcasting frontmost call
... and it is being relayed elsewhere. Using a local activity
Beginning handoff activity %@ for call %@
Ending handoff activity: %@
Broadcasting suppress ringtone activity for declined call: %@
Began app history activity %@ for call %@
Broadcasting suppress ringtone activity for call that suppressed its ringtone: %@
Broadcasting suppress ringtone activity for incoming call that started connecting: %@
Received broadcast for activity type %d and destination ID %@. Suppressing ringtone due to remote suppression for call %@
Received broadcast for activity type %d but ignoring it because its destination ID (%@) does not match this ringing call's desination ID (%@)
Calling ADClientSetValueForDistributionKey() with key %@ and value %f
[WARN] Tried to get the call history identifier for this call (%@) but no conference ID was available (%@), we'll fall back to another method (GUID = %@). This call may now not sync properly between devices.
This chat's conferenceID and GUID are nil or empty, we cannot create a safe call history identifier
[WARN] Could not weak link notification string '%@'. Not observing notifications for it.
Calling endChatWithReason on chat %@ with reason %ld
Using account %@
Inviting additional peers %@, excluding push tokens %@
Could not initiate FaceTime call - No chat returned for handle %@ with account %@
Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
Could not initiate FaceTime Call - Account %@ not registered
Fulfilling pending answer call action because a chat with matching UUID connected: %@
[WARN] No pending answer call actions found with UUID: %@
Failing answer call action for chat because it ended before connecting: %@
Using call ended reason remote hangup because ended reason is %@
Using call ended reason answered elsewhere because ended reason is %@
Using call ended reason declined elsewhere because ended reason is %@
Using call ended reason unanswered because ended reason is %@
Using call ended reason failed because ended reason is %@
Incoming call was denied with error %@ so declining chat with IMAVResponseFilteredCall: %@
provider: %@
Calling acceptInvitation on chat %@
Not accepting invitation to chat %@ since it is already Connected
Calling endChat on chat %@
Calling setIsSendingAudio with %d for chat %@
Not holding chat %@ since it is not yet Connected
Calling setIsSendingVideo with %d for chat %@
Calling setRemoteVideoPresentationSize with %@ for call %@
Calling setRemoteVideoPresentationState with %ld for chat %@
Calling setRelayed with %d for chat %@
Calling setMuted with %d for chat %@
Ignoring %@ message because we already have a call with this uniqueProxyIdentifier: %@
We already have a call for this %@ message: %@. Updating it with new values
Creating new call for %@ message
[WARN] Ignoring %@ message because no call exists for %@ and the message is not from the paired device
[WARN] Could not find call with uniqueProxyIdentifier %@. All current calls: %@
Call answered elsewhere message had no uniqueProxyIdentifier set. Using current calls
Resetting call %@ with protoCall %@
Not resetting call %@ with protoCall %@ because they are equal
Creating new call with protoCall %@
Existing call no longer exists and is not sending: %@
Updating call %@ with protoCall %@
Not updating call %@ with protoCall %@ because they are equal
Not updating remote call state for call because it is an endpoint here: %@
Pulling remotely hosted call: %@
Incoming call times:
Host call creation time: %f
Host message send time: %f
Client message receive time: %f
[WARN] Dumping stackshot because difference between creation time and message receive time is >2s
Setting audio category: %@ for provider %@
Successfully set audio category
Error setting audio category to %@ for provider %@: %@
Setting audio mode: %@ for provider %@
Successfully set audio mode
Error setting audio mode to %@ for provider %@: %@
Setting audio activation context: %@ for provider %@
Successfully set audio activation context
Error setting audio activation context to %@ for provider %@: %@
Setting audio active: %d options: %ld for provider %@
Successfully set audio active: %d options: %ld
Error setting audio active to %d for provider %@: %@
Error overriding output audio port to AVAudioSessionPortOverrideNone: %@
Resetting state
Setting audio interruption priority: %ld for provider %@
Successfully set audio interruption priority
Error setting audio interruption priority to %ld for provider %@: %@
Deactivating and setting audio interruption priority: %ld for provider %@
Successfully deactivated and set audio interruption priority
Error deactivating and setting audio interruption priority to %ld for provider %@: %@
Replacing hardPauseDigits '%@' with '%@' since protocolVersion is %d
Replacing soundRegion %ld with %ld since protocolVersion is %d
Created pause digits queue: %@
Setting disconnected reason to dial failed because call is outgoing but has not started outgoing
Setting disconnected reason to remote hangup because call has started connecting and ended reason is %ld
Setting disconnected reason to remote hangup because outgoing call has not started connecting and ended reason is %ld but call is a telephony call
Setting disconnected reason to remote unavailable because outgoing call has not started connecting and ended reason is %ld
Setting disconnected reason to answered elsewhere because ended reason is %ld
Setting disconnected reason to declined elsewhere because ended reason is %ld
Setting disconnected reason to handed off because ended reason is %ld
Setting disconnected reason to user busy because ended reason is %ld
Setting disconnected reason to remote hangup because ended reason is %ld
Setting disconnected reason to call failed because failure reason is %ld
Setting disconnected reason to account unsupported because failure reason is %ld
Setting disconnected reason to network unsupported because failure reason is %ld
Setting disconnected reason to provider crashed because failure reason is %ld
Setting disconnected reason to media start failed because failure reason is %ld
Setting disconnected reason to media server crashed because failure reason is %ld
Setting disconnected reason to other secondary device in use because failure reason is %ld
Setting disconnected reason to call failed because ended reason is %ld
Error starting call source %@ when dialing call: %@
Failed to find a call source to dial with for dial request: %@
for call: %@ pauseDigitsQueue: %@
[WARN] Next pause digits are not hard pause
[WARN] No next pause digits exist
for call: %@ key: %d
for call: %@ remoteVideoPresentationSize: %@
for call: %@ remoteVideoPresentationState: %d
Dequeueing next pause digits
Sending pause digits: %@ type: %ld
Found queued soft pause digits: %@
for pauseDigitsQueue: %@
Call started outgoing: %@
Disconnecting video call because another call started outgoing: %@
Disconnecting call using the baseband because a video call started outgoing and wantsBreakBeforeMake=YES: %@
All calls ended. Setting uplink and downlink muted to NO
Call started connecting: %@
Video call connected: %@
Disconnecting current call because another video call connected: %@
Requesting to pull call %@ because its continuity state is different from call %@
Disconnecting call %@ because its continuity state is different from call %@
Starting break before make timer of %lfs for call: %@
Disconnecting call because video call is still sending and break before make timeout fired: %@
[WARN] Store demo mode enabled. Limiting certain calls
Starting call duration limit timer as we are in a retail environment
Stopping call duration limit timer
Disconnecting restricted calls because the limited call duration timer fired: %@
Created status bar assertion %@ with pid %d and statusString %@
Successfully acquired status bar assertion: %@
Failed to acquire status bar assertion: %@
Status bar assertion invalidated: %@
Invalidating status bar assertion: %@
thumperCallingAllowedOnDefaultPairedDeviceDefault keyExists: %d isAllowed: %d
Setting %@ default to %d
Error synchronizing NPS defaults: %@
Posting Thumper available notification on secondary device.
Not posting Thumper available notification on secondary device because Thumper is also enabled already.
Dismissing Thumper available notification on secondary device.
Check if devices should be enrolled now that Thumper is enabled.
Displaying Thumper enabled disclaimer on secondary device.
Dismissing Thumper enabled disclaimer on secondary device.
Check if devices should be enrolled now that the default paired device changed.
Thumper support default was %d and current value is now %d
Thumper enabled default was %d and current value is now %d
Default paired device unique ID was %@ and is now %@
Setting Thumper calling allowed on default paired secondary device because Thumper is enabled and we have a default paired device that isn't allowed for Thumper
Checking to see if any devices have been removed from this iCloud account.
Device with the uniqueID %@ will be unpaired from Thumper because it is no longer on the IDSService.
Show a reminder to the user that thumper is now available.
User requested to Turn On Thumper calling
[WARN] Not adding user notification because we are already displaying one
Removing existing reminder notification
Show a disclaimer to the user about their emergency address info now that thumper is enabled.
Emergency Address disclaimer: Preferences button pressed, open URL (%@).
Removing existing emergency address disclaimer
Initializing %@
FaceTime Audio availability is %ld. FaceTime Video availability is %ld
Initialized %@
Active accounts changed for service %@: %@
Received caller ID changed notification: %@
Received service availability changed notification: %@
Received devices changed notification: %@
FaceTime iCloud account is %@ (isActive=%d, profileID=%@) and relay iCloud account is %@ (isActive=%d, profileID=%@)
Choosing outgoingRelayCallerID based on FaceTime caller ID %@ and available outgoing relay caller IDs %@
Outgoing Caller ID %@ does not appear to be a phone number (%d) or is not in our list of available outgoing relay Caller IDs (%d). Sorting the aliases and picking the first one that satisfies the aforementioned requirements: %@
No aliases appear to be a phone number either and exist in our list of available outgoing relay Caller IDs. Sorting the available outgoing relay Caller IDs and picking the first one: %@
Outgoing Caller ID is %@
XPC connection interrupted from client %@
XPC connection invalidated from client %@
Listener: %@ shouldAcceptNewConnection: %@
Accepted new client to CSDCallProviderManager: %@
[WARN] Could not determine UUID for %@
Setting disconnected reason to call failed because CSDIDSSession ended reason is %ld for call %@
Using call ended reason answered elsewhere because CSDIDSSession ended reason is %ld
Using call ended reason declined elsewhere because CSDIDSSession ended reason is %ld
Using call ended reason unanswered because CSDIDSSession ended reason is %ld
Using call ended reason remote ended because CSDIDSSession ended reason is %ld
Setting disconnected reason to call failed because CSDAVConference ended reason is %ld for call %@
Using call ended reason remote ended because CSDAVConference ended reason is %ld
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@
startCallAction: %@
Used country code '%@' to determine international phone number representation for outgoing call: %@
Starting FaceTime IDS call using account: %@ destinations: %@ options: %@
Cannot start FaceTime IDS call using handle value '%@' because IDS destination was '%@'
Cannot start FaceTime IDS call using service %@ because account is not active: %@
answerCallAction: %@
self: %@
Stopping conference
Canceling session
Declining session
Ending session
for call %@
Ignoring request to hold call because it is already held: %@
Ignoring request to unhold call because it isn't held: %@
Setting isSendingAudio to %d for call %@
Setting isSendingVideo to %d for call %@
Setting relaying from %d to %d for call %@
destination: %@
sessionStarted: %@
Not starting connection because conference state is %d
session %@ invitationSentToPushTokens %@ shouldBreakBeforeMake %d
session %@ endedWithReason %d
session %@ receivedInvitationAcceptWithData %@
Not starting connecting because session state is %d and conference state is %d
Ignoring incoming message since message with type=%@ was not invite.
[WARN] Ignoring incoming accept since accompanying message was nil
session %@ receivedInvitationDeclineWithData %@
session %@ receivedInvitationCancelWithData %@
session %@ receivedData (data is %@)
[WARN] First frame not received after %f seconds for %@
reason=%ld error=%@
Handling %@ by preparing connected sessions to end
Handling %@ by ending ending sessions
Updating dialingIDSDevice using device list %@
A paired device exists, so using that as the dialing device: %@
[WARN] We found two devices with matching linkedUserURIs (arbitrarily choosing the first): %@ and %@
A device exists with a linkedUserURI that matches Caller ID %@, so using that as the dialing device: %@
[WARN] Could not find a dialingIDSDevice. No paired devices exist and no devices that support phone calls and have a linkedUserURI for %@ exist.
(IDSMessaging Host->Client) sendIncomingCallMessageToClientForCall: %@
Call cannot be answered. Only notifying the paired device
(IDSMessaging Host->Client) sendCallDialedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallAnsweredElsewhereMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallDisconnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallConnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendResetWantsHoldMusicMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallModelMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDeviceUnavailableMessageToClient
(IDSMessaging Host->Client) sendPullRelayingCallsMessageToClient
(IDSMessaging Host->Client) sendResetStateMessageToClient
(IDSMessaging Host->Client) sendHardPauseAvailabilityMessageToClientForState %d digits: %@
(IDSMessaging Host->Client) sendUpdateRemoteCallStateMessageToClient
(IDSMessaging Host->Client) sendCallStartedConnectingMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDialCallFailedForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendPushCallsMessageToClient
(IDSMessaging Host->Client) sendNeedsManualInCallSoundsChangeMessageToClientForCall: %@
(IDSMessaging Host->Client) sendInvitationSentMessageToClientForCall: %@
(IDSMessaging Client->Host) sendDialCallMessageToHostForCall: %@
No dialing IDS device found. If we aren't already in a session, this dial call attempt will fail.
(IDSMessaging Client->Host) sendAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendUnholdCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendGroupCallMessageToHostForCall: %@ otherCall: %@
(IDSMessaging Client->Host) sendUngroupCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendSwapCallsMessageToHost
(IDSMessaging Client->Host) sendEndActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendEndHeldAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCurrentCallAndActivateHeldToHost
(IDSMessaging Client->Host) sendDisconnectAllCallsToHost
(IDSMessaging Client->Host) sendSendHardPauseDigitsMessageToHost
(IDSMessaging Client->Host) sendRequestCallStateMessageToHost
(IDSMessaging Client->Host) sendPullCallsMessageToHost
(IDSMessaging Client->Host) sendPushRelayingCallsMessageToHostForSourceIdentifier: %@
(IDSMessaging Client<->Host) sendSuppressRingtoneMessageForCall
Handle incoming %@ message: %@
Messaging device can't receive relayed calls ...
... and we were told to decline the session invite. Declining incoming %@ message: %@
... and we were told not to decline the session invite. Ignoring incoming %@ message: %@
[WARN] Setting should ignore session to YES because TUICFInterface allowCall = NO for destinationID %@ and service %d
[WARN] Setting should ignore session to YES because a call exists with sending status: %@
[WARN] Setting should ignore session to YES because relay is not preferred, message service is TUCallServiceTelephony, and isThumperCallingCurrentlyAvailable=%d and isVoLTECallingCurrentlyAvailable=%d and isCSCallingCurrentlyAvailable=%d
[WARN] Setting should ignore session to YES because relay is not preferred, message service is TUCallServiceFaceTimeAudio, and isFaceTimeAudioAvailable is YES
[WARN] Setting should ignore session to YES because no calls exist with an endpoint on the current device: %@
Handling CSDFakeIncomingMessageNotification
[WARN] Faking incoming message %@ with device %@ from messenger %@
Handling CSDFakeOutgoingMessageNotification
[WARN] Faking outgoing message %@ with device %@ through messenger %@
[WARN] No device found with uniqueID=%@. Cannot fake outgoing message %@.
Initializing CSDDaemon
Launched by fake incoming message
Launched by fake outgoing message
Launched by IMDaemon notification
Launched by application installed notification
Launched by application uninstalled notification
Could not create notification for XPC event %@
Initialized CSDDaemon
Logging is now %@
Dumping debug info
Enabled Phone logging because walkabout is enabled
Calling xpc_transaction_exit_clean() due to language change
Error synchronizing call directory extensions: %@
Successfully synchronized call directory extensions
[WARN] Server bag does not support quick relay. Minimum supported version is %@ and current operating version is %@
Server bag is not loaded. Assuming we can make a FaceTime call over quick relay
Tried to make an outgoing call when we already had a ringing call with the same destination.
[WARN] Not attempting to use IDSSession for outgoing FT call
Failing answer call action for call because it disconnected before connecting: %@
Invite received for session %@ account %@ from (fromID=%@) with data: %@
Found a sending call with the same destination. Cancelling this invite by disconnecting the associated call.
Incoming call was denied with error %@ so ignoring call: %@
Ignoring incoming invite since no available network is allowed (isWiFiAvailable=%d isWiFiAllowed=%d isCellularDataAvailable=%d isCellularDataAllowed=%d)
Ignoring incoming invite since message with type=%@ was not an invite.
[WARN] Ignoring incoming invite since accompanying message was nil
action: %@
Calling acceptInvitation on call %@
Not accepting invitation to call %@ since it is already Connected
Calling endCall on call %@
Calling setIsSendingAudio for call %@
Not holding call %@ since it is not yet Connected
Calling setIsSendingVideo with %d for call %@
Generated end call metric=%@
Got metric container for metricId=%lu
Skipping reporting for metricId=%lu since no metric container was provided
Calling fetch completion block for call source with identifier %@
Waiting for call source with identifier %@
[WARN] Timed out waiting for call source with identifier %@ to check in
Found a matching extension for identifier %@ and containing app bundle %@: %@
Using existing extension call source: %@
Creating a new extension call source
Could not start call source %@: %@
[WARN] No matching extensions found for extension identifier %@ and bundle %@: %@
[WARN] Couldn't identify device type based on model identifier (%@)
User notification has been completed with response %lu and entered PIN %@
Showing service confirmation dialog to user
Requesting pin from iPhone
Canceling pin request from iPhone
PIN code entered with success=%d cancelled=%d
[WARN] No phone number URI found for primary device: %@. We will not be able to update the outgoing caller ID of this device to match the Thumper primary device.
Device Pin Exchange received an incoming approval request
[WARN] We received an incoming pin code alert from a non-telephony device: %@
User tapped cancel on the Pin Display Alert
Request for pin exchange failed
[WARN] Ignoring request to group call because it is already grouped: %@
[WARN] Ignoring request to ungroup call because it isn't grouped: %@
Setting uplinkMuted to %d for call %@
Started conference successfully for answered relay call %@
[WARN] Failed to start conference connection when answering call %@: %@
Conference connection stopped (cleanly=%d) for answered call %@: %@
Started conference successfully for dialed relay call %@
[WARN] Failed to start conference connection when dialing call %@: %@
Conference connection stopped (cleanly=%d) for dialed call %@: %@
Started conference successfully for pulled relay call %@
Failed to start conference connection when pulling call %@: %@
Conference connection stopped (cleanly=%d) for pulled call %@: %@
[WARN] Ignoring request to hold call because it is already held: %@
[WARN] Ignoring request to unhold call because it isn't held: %@
Entitlement for key '%@' is non-nil but is not an NSArray (%@), so assuming process with bundle identifier %@ has no entitlements
Received successful didSend for message with identifier %@ using account %@
Received unsuccessful didSend for message with identifier %@ using account %@: %@
Incoming message of type %@ from device %@: %@
[WARN] Received message %@ from device %@ but our paired device is %@
[WARN] No device found for fromID %@. All devices: %@
[WARN] Removing IDSSendMessageOptionForceLocalDeliveryKey key from sendMessage options because pairedDeviceUniqueIDOverride exists
Sending %@ message with identifier %@ and options %@ to destinations %@: %@
Successfully sent %@ message
Failed to send %@ message: %@
Accepted new connection from client %@
No contact returned with identifier %@
Returning additional peers %@ for contact %@
providerDelegate: %@ callUUID: %@ dateStartedConnecting: %@
providerDelegate: %@ callUUID: %@ dateEnded: %@ endedReason: %ld failureContext: %@
Ending call with UUID %@ on other provider delegate %@ because ended reason was %ld
[WARN] action: %@
Invited push tokens via IDS: %@ wasCanceled: %d
Could not initiate FaceTime call - No IDS or IMAV call returned for handle %@
Not sending IMAV invites because IDS session was canceled
[WARN] Neither provider delegate is managing call for action %@
Updated isRunning for %@ because new application state is %d
Asked to deliver token %@ to application %@
Asked to deliver payload %p to application %@
Delivering token %@ to application %@
Pending token delivery until a connection exists
Delivering %lu payload(s) to application %@
Pending payload deliveries until a connection exists
inCallServiceWantsStatusBarSuppressionState is now %llu
Initialized inCallServiceWantsStatusBarSuppressionState to %llu
[WARN] setMuted:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
[WARN] Error calling getIsAudioPaused: %@
Setting pause audio to %d for %@
[WARN] Error calling setPauseAudio: %@
[WARN] setSendingAudio:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Asked to start conference connection %@ with socket %d
We already have an active conference. Invoking this conference connection's didStart immediately
[WARN] We are already relaying a call to this call's device, but our conference isn't active. Either a conference just finished, but is still using the socket, or a conference has yet to start.
Asked to update conference for identifier %@ with isUsingBaseband=%d disableAudio=%d
Updating device role for identifier %@ to %d
Did not find conference connection for identifier %@. All conference connections: %@
Setting conference connection active: %@
Asked to prepare to stop conference for identifier %@
Pausing audio and setting up timeout for identifier %@
It's been %ds since asked to prepare to stop conference and conference connection still exists: %@. Forcefully cleaning up all conferences now
Asked to stop conference for identifier %@
Successfully started connection with callID=%ld, capabilities=%@, socket=%d, isCaller=%d (timestamp: %f)
Failed to start connection with callID=%ld, capabilities=%@, socket=%d, isCaller=%d: %@
Failed to initialize a new callID (callID=%ld) with device role %d.
Conference didStart timeout fired for conference %@ and conferenceConnection %@
Cleaning up conference connection %@
Cleaning up conference since last conference connection never received a didStart
Calling stopCallID on conference %@ with callID %ld
Posting %@
Cleaning up conference
[WARN] isStalled=%d callID=%ld
callID=%ld didPauseAudio=%d error=%@
Successfully started session. UserInfo = %@
Failed to start session. UserInfo = %@
Received didStartSession=%d, error=%@ for conference %@ that has already been cleaned up. This probably happened because our conference didStart timeout fired.
. didStopWithCallID=%ld. error=%@
Ignoring didStop error %@
[WARN] Timed out waiting for conference %@ to call closeConnectionForCallID after receiving didStop
callID=%ld
. callID=%ld.
didPause=%d callID=%ld
conference=%@
[WARN] isNetworkBad=%d callID=%ld
[WARN] Unable to get URL for filename '%@'
[WARN] Unable to get standardized URL for URL '%@'
Setting up Pin Exchange controller
[WARN] nil deviceID passed in to 
Thumper - received request to enroll device ID %@ into Thumper
[WARN] Could not unenroll device as secondary device could not be identified
Requesting PIN from device %@
[WARN] accountsSupportSecondaryCalling=NO. Displaying mismatched accounts notification
Canceling all PIN requests
[WARN] Could not find device for unique ID %@
The entered PIN code is correct
[WARN] The entered PIN code is incorrect, could not register device.
The user entered no code... or the code entered was not an NSString
We were unable to send the PIN to the other device to be displayed, Sorry
Sending a PIN code to device %@ to display to enroll them into Thumper
[WARN] Ignoring request to send PIN code because we already have one pending for device with unique ID %@
Sending IDS action %@ to device %@ with message %@
Thumper IDS action sent to device with success: %@ error: %@ identifier: %@
[WARN] Displaying PIN error notification
[WARN] Displaying mismatched accounts notification
[WARN] Displaying slots full notification
Received message for service %@ from device %@ (isHSATrusted=%d): %@
Ignoring pin request: There is already a pending pin request that has not yet completed.
Device requesting PIN is HSA trusted. Forgoing PIN exchange and enrolling the device immediately
Received didSendWithSuccess=YES for message with identifier %@
Received didSendWithSuccess=NO for message with identifier %@: %@
Initialized capability state: %@
Updating clients with new call capabilities state: %@
Accepted new XPC connection to CSDCallCapabilities from pid: %d, bundle ID: %@, connection: %@, client: %@
TUCallCapabilitiesXPCServer - callCapabilitiesState request from %@
TUCallCapabilitiesXPCServer - setWiFiCallingEnabled: %d
TUCallCapabilitiesXPCServer - setWiFiCallingRoamingEnabled: %d
TUCallCapabilitiesXPCServer - setVoLTECallingEnabled: %d
TUCallCapabilitiesXPCServer - setThumperCallingEnabled: %d
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d
TUCallCapabilitiesXPCServer - setThumperCallingAllowed: %d secondaryDeviceID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowedOnDefaultPairedDevice: %d
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d forDeviceWithID: %@
TUCallCapabilitiesXPCServer - invalidateAndRefreshWiFiCallingProvisioningURL
TUCallCapabilitiesXPCServer - invalidateAndRefreshThumperCallingProvisioningURL
TUCallCapabilitiesXPCServer - requestPinFromPrimaryDevice
Using the following account for the PIN request: %@
No device found for account %@. All accounts: %@
[WARN] No primary Thumper account found for PIN request. This should only happen because an account exists but has no empty device slots. All accounts: %@
TUCallCapabilitiesXPCServer - cancelPinRequestFromPrimaryDevice
Received device list changed notification: %@
Received device capability changed notification: %@
Received accounts changed delegate callback
Received FaceTime availability changed delegate callback
Received outgoingCallerIDChanged delegate callback
Received telephonyCallCapabilitiesChanged delegate callback
[WARN] Disabling support because %@ was set to YES
[WARN] Enabling support because %@ was set to YES
_setWiFiCallingEnabled: asking to change value from %d to %d
_setWiFiCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setVoLTECallingEnabled: asking to change value from %d to %d
_setVoLTECallingEnabled: not updating value. Is currently %d and asked to set to %d
_setWiFiCallingRoamingEnabled: asking to change value from %d to %d
_setWiFiCallingRoamingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingEnabled: asking to change value from %d to %d
_setThumperCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingAccountID: asking to set account ID to %@
_setThumperCallingAllowed: asking to change value from %d to %d on secondary device ID %@
[WARN] _setThumperCallingAllowed: not updating value. No device slots remain for this device. Displaying notification to the user
_setThumperCallingAllowed: not updating value. Is currently %d and asked to set to %d on secondary device ID %@
[WARN] No cloud calling device appears to be a default paired device: %@. Ignoring setThumperCallingAllowedOnDefaultPairedDevice request
_devicesSupportRelayCalling - telephonyDeviceExists = %d, relayCapableDeviceExists = %d, defaultPairedDeviceExists = %d
_setRelayCallingEnabledDefault: changing value to %d
_setRelayCallingEnabled: Changing value from %d to %d
_setRelayCallingEnabled: Not updating value. Is currently %d and asked to set to %d
setRelayCallingEnabledDefault:forDeviceWithID: changing value to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Changing value from %d to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Not updating value. Is currently %d and asked to set to %d for %@
Inviting handle %@ and additional peers %@ to chat %@
dialWithRequest: Using account %@
dialWithRequest: Could not initiate FaceTime call - No chat returned for handle %@ with account %@
dialWithRequest: Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
dialWithRequest: Could not initiate FaceTime Call - Account %@ not registered
dialWithRequest: Could not initiate FaceTime Call - No IM service
dialWithRequest: No chat returned, setting disconnectedReason to TUCallDisconnectedReasonDialFailed
Calling declineInvitation on chat %@
Setting disconnected reason to remote hangup because ended reason is %@
Setting disconnected reason to answered elsewhere because ended reason is %@
Setting disconnected reason to declined elsewhere because ended reason is %@
Setting disconnected reason to remote unavailable because ended reason is %@
Setting disconnected reason to account unsupported because ended reason is %@
Setting disconnected reason to network unsupported because ended reason is %@
Setting disconnected reason to call failed because ended reason is %@
Calling setRemoteVideoPresentationSize with %@ for chat %@
dialWithRequest: dialRequest %@
Coordinated alert request came back with bestIsMe: %d info: %@ error: %@
Starting coordinated alert request to determine ringtone un-suppression: %@
faceTimeIDSStatus for destinationID: %@ is: %@
Invalidating display context for %@
Posting %@ because mayRequireBreakBeforeMake changed from %d to %d for %@
Posting %@ because hasStartedOutgoing changed from %d to %d for %@
Pickable Routes Changed: %@
Preferred external route changed: %@
CarPlay is connected changed: %@
Server connection died: %@
Audio device list changed
[WARN] No audio route collection found for audio category %@ and audio mode %@ for call %@
Found preferred AVAudioDevice: %@
Updating isCarPlayDeviceConnected to %d
Caught SIGINFO. Dumping debug info.
Caught SIGUSR1
Caught SIGUSR2
callservicesd launched
Setting audio session properties: %@
Starting audio session
Successfully started audio session
Failed to start audio session: %@
Not starting audio session since it is already active
Stopping audio session
Not stopping audio session since it is not active
bundleIdentifier: %@
Acquiring process assertion for bundle identifier %@
Acquired process assertion for bundle identifier %@
Failed to acquire process assertion for bundle identifier %@
Incremented count of process assertion for bundle identifier %@ to %lu
Decremented count of process assertion for bundle identifier %@ to %lu
Initialized CXCallDirectoryStore for reading
Unable to initialize CXCallDirectoryStore for reading: %@
Device first unlock block invoked, attempting to initialize CXCallDirectoryStore...
DND changed from %d to %d
Incoming call filter block called with sourceAddress: %@ providerIdentifier: %@
Disallowing call with sourceAddress %@ since _doNotDisturbAllowsCallFromSourceAddress returned NO
Blocking call with sourceAddress %@ since _callDirectoryAllowsCallFromSourceAddress returned NO
DND enabled: %@ onCall: %@
Even though DND is enabled, BBNotificationBehaviorShouldPresentNotificationFromSenderWithHandler says we should present for source address %@
[WARN] Timed out waiting for BBNotificationBehaviorShouldPresentNotificationFromSenderWithHandler, allowing call to be presented
Error checking if call directory database contains blocking entry for source address %@: %@
Disallowing call from source address %@ since blocked by call directory
Call history changed
Call status changed for call: %@
Call connected. Marking all calls as read.
Writing recent call to history: %@
Adding transaction object to transactionObjectsAwaitingCallHistory: %@
[WARN] Ending transaction for %@ because we timed out waiting for a call history database changed notification
bytesOfDataUsed: %ld uniqueProxyIdentifier: %@ callHistoryIdentifier: %@
Call still exists so updating its bytes of data used: %@
No call still exists so updating bytes of data used via CHManager
handle: %@
There are %d missed calls to consider
Checking whether %@ matches this call
Call %@ with phone number destination ID %@ matches
%@ and %@ are NOT equal
Recent call (%@) matches handle (%@)
Deleting recent call with UUID %@ because provider %@ no longer exists
[WARN] called for session %@ that was not the initiator (%d) or that already had a version set (%d)
self: %@ wiFiAllowed: %d
self: %@ cellularDataAllowed: %d
self: %@ cellularDataPreferred: %d
self: %@ clientUUID: %@
Running block %@ with socketDidBecomeAvailable=%d
Pending block on socket availability: %@
[WARN] Socket availability block timed out: %@
Session is not connected and waitUntilConnected is YES. Pending data
Session is not connected but waitUntilConnected is NO. Sending data (timestamp: %f)
Session is connected. Sending data (timestamp: %f)
Session is ending/ended. Dropping data on the floor
self: %@ data: %@
Session is waiting. Sending invitation for session (timestamp: %f)
Session is not waiting. Not sending invitation
Session is waiting. Accepting invitation for session (timestamp: %f)
Session is not waiting. Attempting to send data
self: %@ data: %@ reason: %d
Session is waiting. Canceling invitation for session (timestamp: %f)
Session is waiting. Declining invitation for session (timestamp: %f)
Setting session %@ to ending for prepareToEnd
Not setting session %@ to ending for prepareToEnd because session is not connected
Ending session %@
Received invitation ACCEPT from %@ (timestamp: %f)
Received invitation DECLINE from %@ (timestamp: %f)
Received invitation CANCEL from %@ (timestamp: %f)
Session %@ started (socket is %d)
Session %@ ended with no reason
Session %@ ended with reason %d: %@
Session appears to have ended with an unanswered reason: %d
Session appears to have ended with a local hangup reason: %d
Session appears to have ended with a remote hangup reason: %d
Session appears to have ended with an accepted elsewhere reason: %d
Session appears to have ended with a declined elsewhere reason: %d
Session appears to have ended with a fatal reason: %d
Session appears to have ended due to mismatched networks reason: %d
Received invitation SENT for session %@ with tokens %@ shouldBreakBeforeMake %d (timestamp: %f)
Received invitation ACCEPT with data for session %@ from (fromID=%@) device %@ (timestamp: %f)
Received invitation CANCEL with data for session %@ from (fromID=%@) device %@ (timestamp: %f)
Received invitation DECLINE with data for session %@ from (fromID=%@) device %@ (timestamp: %f)
Received session MESSAGE for session %@ from (fromID=%@) device %@ (timestamp: %f)
Updated currently broadcasted activity to %@
Queueing activity at beginning of queue: %@ (timeout: %f)
Queueing activity at end of queue: %@ (timeout: %f)
Dequeueing activity: %@
Registered to listen for activity type %d and dynamic identifier %@ and started listening for best app suggestions
Registered to listen for activity type %d and dynamic identifier %@
Unregistered to listen for activity type %d and stopped listening for best app suggestions
Unregistered to listen for activity type %d
Best app suggestion changed to %@
Firing delegate callback with activity type %d (userActivityType=%@) and dynamicIdentifier %@
resolved descriptor changed, updated lastResolvedDescriptor to %@
calls: %@ call: %@
Adding call %@ to dirty calls pool
Draining pool with dirty calls: %@
Asked to dispatch drain the pool
Disconnecting all calls because wantsCallDisconnectionOnInvalidation=YES for %@
Initializing XPC listener
Relay capabilities enabled
Relay capabilities disabled
Disconnecting relaying call because relay calling is no longer enabled: %@
Disconnecting call being relayed elsewhere because relay calling is no longer enabled: %@
Disconnecting proxy call because a video call started connecting: %@
Accepted new XPC connection to CSDCallStateController from pid: %d, bundle ID: %@, connection: %@, client: %@
Updating clients with call: %@
Updating client %@ with disconnected call: %@ calls: %@
Updating client %@ with calls: %@
Handling %@ for %@
Handling %@ with user info %@
Handling %@
got back TUCall %@
error deserializing CTCallRef from data: %@
no call found since userInfo[kCTCallSerialized] is nil
Pushing all calls to paired client device because no preferred route is active and we found a call hosted here with its expected endpoint on the paired client device: %@
Pulling all calls from paired client device because a preferred route is active and we found a call with an endpoint elsewhere: %@
Non-ringing call found on device: %@. All calls: %@
Ignoring ringing call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d) or a vehicle route is available (%d) or call is TTY (%d)
Ignoring sending call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Not sending out call started connecting message because call is already disconnected: %@
Ignoring connecting call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Not sending out call connected message because call is already disconnected: %@
Ignoring connected call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Ignoring active call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Ignoring held call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
Sending voicemail call ended notification %@
Ignoring disconnected call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d)
performDialCall: nil call returned from outgoingCallFromProxyCall: for dial request %@
current calls are %@
[WARN] Ignoring request to performUngroupCall because the call is not grouped
[WARN] Ignoring request to performSwapCalls because either there is no active call (%d) or there is no held call (%d)
Changed sourceIdentifier of answerRequest to %@
   ... sending calls were found so adding them to list of calls to disconnect: %@
   ... no sending calls were found so adding all active calls to list of calls to disconnect: %@
   ... and adding held calls to the list of calls to unhold: %@
   ... no sending or active calls were found so adding all held calls to list of calls to disconnect: %@
   ... and moving call %@ from call to unhold to call to disconnect because a disconnected call from the same provider doesn't support unambiguous multi-party state: %@
Handoff context did not include any handoff payload. Assuming this is for a relay call
[WARN] Ignoring request to performPushHostedCallsToPairedClientDevice because not all calls are hosted here and an endpoint here and relayable. All calls: %@
[WARN] Ignoring request to performPushHostedCallsToPairedClientDevice because no paired device exists
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because not all calls are not hosted here and not an endpoint here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because no paired device exists
Field Mode: Sending digits %@
Disconnecting call with disconnected reason %d: %@
Disconnecting call normally since it was outgoing (%d) or was never connecting to relay (%d): %@
Not handling new call because the call was already handled: %@
Not handling new hosted call because it is neither ringing nor sending: %@
dialRequest: %@
Dialed call: %@
answerRequest: %@
uniqueProxyIdentifier: %@
[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@
uniqueProxyIdentifier: %@ otherUniqueProxyIdentifier: %@
[WARN] Asked to group call with data source %@ with another call with a different data source %@
[WARN] Could not find call for uniqueProxyIdentifier %@ (%d) or could not find call for otherUniqueProxyIdentifier %@ (%d)
uniqueProxyIdentifier: %@ key: %d
sourceIdentifier: %@
userInfo: %@
uplinkMuted: %d
downlinkMuted: %d
digits: %@
proxyCall: %@
uniqueProxyIdentifier: %@ size: %@
uniqueProxyIdentifier: %@ presentationState: %d
deviceUID: %@
clientCapabilities: %@
Messaging connection ended for calls %@. Disconnecting calls that are an endpoint here but are not hosted here.
Messaging connection failed for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Messaging connection could not establish link for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
call: %@
holding call %@
hasBeenUnlocked changing from %d to %d
Device has been unlocked, so invoking block immediately
Device has not been unlocked, so storing block to be performed upon first unlock
Device has not been unlocked and is not yet observing device lock changes, so beginning to observe device lock changes
Asked to register bundle ID %@ with APS environment %@ for VoIP
[WARN] Ignoring voipRegister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
Asked to unregister bundle ID %@ with APS environment %@ from VoIP
[WARN] Ignoring voipUnregister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
for connection: %@ publicToken: %@
Requesting token for topic %@ for bundle ID %@
[WARN] No environment found for connection %@
for connection: %@ token: %@ topic: %@ identifier: %@
for connection: %@ message: %@
Incoming message has topic: %@ bundleID: %@
Application %@ is not running. Will attempt to open the application and acquire a process assertion
Error opening bundle ID %@: %@
Dropping incoming message because the bundle ID failed to launch
Dropping incoming message because the bundle ID did not launch in time
Successfully opened application
Successfully took out process assertion
Dropping incoming message because the process assertion could not be acquired
Invalidating process assertion for bundle ID %@
[WARN] No existing VoIP application found for bundle ID %@
[WARN] No APS connection found for environment %@
Registering application with bundle ID %@ and client %@ in environment %@
Not registering bundle ID %@ because it is not entitled (%d) or no APS connection exists for the environment (%d)
Environment was %@ but is now %@. Flushing out old registration with previous environment
Requesting token for topic %@
Setting enabled topics from %@ to %@
Unregistering application %@ in environment %@
Supplied environment was nil. Inferring it as %@
Disabling topic %@ and invalidating its token for connection %@
Disabling topic %@ and invalidating its token for all connections
Failed to start conference connection for answered call %@: %@. Disconnecting call with relay failed
Socket did not become available for answered call %@
Conference connection failed for call %@: %@. Disconnecting call with relay failed
Not disconnecting call because it is hosted and an endpoint here or it is neither hosted nor an endpoint here: %@
Received did stop for call that is already disconnecting/disconnected
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
Dialing without relay because cannotRelayAudioOrVideoOnPairedDevice is set (%d) or a preferred route is active (%d)
Nil call returned when dialing call. Notifying client of failed dial call for %@
Nil call returned when dialing call. Notifying client of failed dial call for %@ 
Failed to start conference connection for dialed call uniqueProxyIdentifier %@: %@.
Conference connection stopped (cleanly=%d) for dialed call uniqueProxyIdentifier %@: %@
[WARN] Received %@ message, but the socket didn't become available
[WARN] Received %@ message, but we already have some non-relaying calls. Sending device busy message.
Answering without relay because wantsHoldMusic is set (%d) or cannotRelayAudioOrVideoOnPairedDevice is set (%d)
[WARN] Could not find call with other uniqueProxyIdentifier %@. All current calls: %@
No other unique proxy identifiers included. Assuming legacy behavior
[WARN] Could not find another call to group with. All calls: %@
No call was specified with SendHardPauseDigits message...
...so sending hard pause digits for call %@
...and no hosted call was found with TUHardPauseDigitsStateDigitsAvailable, so not sending hard pause digits
Setting sourceIdentifier to %@ for all calls before pulling
Opening URL for handled pushRelayingCalls message from client: %@
[WARN] Could not find any audio route with source identifier %@. Ignoring push relaying calls request
[WARN] Asked to pull relaying calls from client when no calls with an endpoint elsewhere exist. All calls: %@
Pushing hosted call: %@
Conference did not start successfully when pushing call. Resetting endpointOnCurrent device to YES for %@
Socket did not become available when pushing call. Resetting endpointOnCurrent device to YES for %@
[WARN] Bad activity type: %d
Registering for %@ user activity type and dynamic identifier %@
[WARN] Asked to register for activity type %d, but that is not supported
Unregistering for %@ user activity type and dynamic identifier %@
[WARN] Asked to unregister for activity type %d, but that is not supported
Error creating '%@' sandbox extension directory: %@
Error creating link to source ringtone sound URL '%@' with filename '%@': %@
[WARN] Skipping Sandboxing URL as the passed in URL turns out to be a symbolic link: %@
Updating provider from %@ to %@
Error while querying file attributes: %@
Could not deserialize data to TUCallProvider instance: %@
Archived object was of unexpected class %@: %@
Registered providers object was of unexpected class %@: %@
[WARN] Not loading registered providers because current registered providers version is %ld and minimum version is %d
Loaded registered providers: %@
Saving registered providers: %@
Error removing links for filenames not in array (%@): %@
Unregistering provider because its application is no longer installed: %@
No primary Thumper account found for outgoingRelayCallerID %@ but requireMatchingCallerID is NO. Arbitrarily choosing last Thumper account from list: %@
CSDTelephonyCallCapabilities asked to end Emergency Callback Mode
Updated call management state to %@
Updated telephony system capabilities to %@
Updated emergency callback mode to %d
Updated local Thumper account ID to %@ and local Thumper device ID to %@
Updated thumper accounts to %@
Error getting can set capability for %@ (domain=%d, code=%d)
Error getting device info for %@ calling (domain=%d, code=%d)
Error getting device list for %@ calling (domain=%d, code=%d)
Error getting system capabilities (domain=%d, code=%d)
Calling _CTServerConnectionSetCapabilityExtended() with capability: %@ value: %d capabilityInformation: %@
Error setting capability for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAddDevice() with capability: %@ uniqueID: %@
Calling _CTServerConnectionPhoneServicesRemoveDevice() with capability: %@ uniqueID: %@
Error adding/removing device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAccountStatusChanged() and _CTServerConnectionSendBarrier() with capability: %@
Received %@ with object %@ and userInfo %@
Received CT call management state changed notification
Received Emergency Callback Mode Changed notification %@ with object %@ and userInfo %@
callForChat: No cached call found. Initializing new call with chat %@
daemonConnected:
handleChatStateChanged: %@
handleChatStateChanged: call %@ ended with reason '%@', error '%@'
handleChatFirstRemoteFrameArrived: %@
handleChatInvitationSent: %@
handleChatConferenceMetadataUpdated: %@
handleChatIsMuteChangedNotification: %@
handleChatSendingAudioChangedNotification: %@
handleChatCallInfoChangedNotification: %@
invitedToIMAVChat %@
filteredIncomingIMAVChat %@
This call can't relay audio/video (%d) or another call already has an endpoint elsewhere (%d). Setting endpoint to be elsewhere and not attempting to start a conference
Asked to dial call %@ but the host was unavailable
Asked to dial call %@ but the session was unavailable
[WARN] Socket did not become available when dialing call %@
Setting endpoint elsewhere for call because it can't be answered with audio or video relay: %@
Socket did not become available when answering call %@
Socket did not become available when pulling call. Resetting endpointOnCurrent device to NO for %@
Disconnecting call with conference failed disconnected reason: %@
Not disconnecting call for failed conference start because it is not an endpoint here: %@
Not disconnecting call for conference didStop because it is not an endpoint here: %@
No existing AVAudioSession interruption provider for ID %u (usesLocalAudioSession: %d), creating a new one
Created AVAudioSession interruption provider %@
Error retrieving AVAudioSession provider with ID %u
Decreasing priority of other proxy AVAudioSession interruption provider %@ to Default
No provider returned for descriptor %@
Adding %@ as an alias on account %@
Failed to add alias %@ to account %@. Validation status: %ld, validation error reason: %ld, vetted aliases: %@
Updating display name to %@ on account %@
Received IMDaemon connected notification: %@
Received display name changed notification: %@
Received preferred account changed notification: %@
Loaded last known FaceTime caller ID as %@
[WARN] Last known FaceTime caller ID value was not a string: %@ (class=%@)
Saving last known FaceTime caller ID as %@
FaceTime callerID changed from %@ to %@
for call: %@
for message: %@
transactionGroup: %@
with action: %@ for call %@
%@ initialized for service %@ with the following devices: %@
Determining country code using account info %@
%@: Active accounts changed
%@: Devices changed
%@: Nearby devices changed
%@ updated state: defaultPairedDeviceExists=%d, pairedDeviceExists=%d, telephonyCapableDeviceExists=%d, relayCapableDeviceExists=%d, availableOutgoingRelayCallerIDs=%@ deviceNames="%@"
Asked to answer telephony call %@ while disconnecting active telephony calls %@
Asked to answer telephony call %@ while disconnecting held telephony calls %@ and holding telephony calls %@
Asked to answer telephony call %@ while holding telephony calls %@
Asked to hold telephony calls %@ while unholding telephony calls %@
Asked to group telephony calls %@ with other telephony calls %@
Asked to ungroup telephony call %@ from other telephony calls %@
Asked to disconnect all telephony calls %@
Asked to disconnect telephony calls %@ while unholding telephony calls %@
Calling CTCallListDisconnect()
callForCTCall: No cached call found. Initializing new call with ctCall %@
handleCallAudioUpdatedForCall setting sourceIdentifier to %@ for call %@
Handling call control failure with cached calls %@ and current calls %@
Disconnecting call with TUCallDisconnectedReasonCallFailed because of call control failure: %@
Calling CTDTMFSendDigitsNow() with current hard pause digits: %@
Hard pause digits state changed from %d to %d
Updated cached media status to %d
CSDTelephonyCallStatusChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallStatusChangedHandler got back TUCall %@
CSDTelephonyAlternateCallStatusChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallerIDChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallSubTypeChangedHandler for %@ with object %@ userInfo %@
[WARN] CSDTelephonyCallCenterDaemonRestartedHandler callback for notification name: %@ object: %@ userInfo: %@
[WARN] CSDTelephonyCallControlFailureHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyNewCarrierHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyCallAudioFinishedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyDTMFDigitsReadyHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyAudioToneRelayChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyAudioToneRelayChangedHandler: not handling audio tone relay changed since call is nil (%d) or kCTCallAudioToneStandard not found in user info %@ (%d)
CSDTelephonySetupAudioInterruptionChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyMediaStatusChangedHandler callback for notification name: %@ object: %@ userInfo: %@
CSDTelephonyStatusBecameAlertingHandler with object %@ user info %@
[WARN] Could not find session for identifier %@ to perform block on socket availability for. Dropping this block on the floor
No devices found that support service %d. Not creating a session.
Creating session to devices: %@
[WARN] IDSCopyIDForDevice() for device returned a nil value, so we are going to skip creating a session to it: %@
Would have created a session to an empty destination set. Returning a nil session
Destroying session %@
Asked to prepare connected sessions to end
Accepting session for identifier %@
Canceling/declining session for identifier %@
Asked to end session for identifier %@
Asked to end ending sessions
sendMessageAndStartSessionIfNecessary for service %d and message type %@: %@
[WARN] A session exists for this identifier already. Not starting a new one.
No session exists. Starting a new one by inviting all devices that support service %d
A session exists with a device that supports service %d: %@
We'll send this message via the existing session
Starting another session to the device
[WARN] A session exists, but it's with a device that doesn't support service %d. Not starting a new session
Did not create session
sendMessageAndStartSessionIfNecessary for message type %@: %@
No IDSSession exists. Starting a new one by inviting to device %@
[WARN] No IDSSession exists, and given device is nil. We can't start this session
A session exists: %@
Sending the message through the existing session
Starting a new session to the device
sendMessage:andAcceptInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session for identifier is %@
A current session already exists: %@
Sending the message through the current session
Sending the message through the current session and declining this one %@
No current session already exists, so sending the message through this session %@
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
_sendMessage:andCancelInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
_sendMessage:andDeclineInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
for message type: %@ identifier: %@ waitUntilConnected: %d: %@
sendMessage through session %@ for message type %@: %@
Not sending message because protocolVersionCustomizationBlock's preventMessageSend was set to YES for message type %@: %@
No session available to send message type %@: %@
Invite received for session %@ from (fromID=%@) device %@ with message %@ (timestamp: %f)
... and it is from the same device that we have an active session with (%d) or we don't have a session (%d)
... so we are going to handle the session's message
... but we were told to ignore the invite
... but there was no accompanying message so just ignoring the invite
... but it is from a different device than the one that we have an active session with
... and we were told to decline the invite
... and we were NOT told to decline the invite, so just ignoring it
Session ended with reason %d and previous state %d
Notifying delegate of connection end
[WARN] Notifying delegate of connection failure
[WARN] Notifying delegate that connection could not establish link
Received invitation accept with no data payload.
Received invitation cancel with no data payload. Assuming the invitation was answered elsewhere
Received invitation decline with no data payload. Assuming invitation was accepted by sending a message through another session
Initializing AVConference with client UUID %@
[WARN] Error calling getIsVideoPaused: %@
Setting pause video to %d for %@
[WARN] Error calling setPauseVideo: %@
Setting conference visual rectangle of size %@ for %@
Setting conference state %@ for %@
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@ for %@
Failed to initialize a new call with device role %d. Got callID=%ld
Starting AVConference connection with isCaller=%d callID=%ld remoteInviteDictionary=%@ capabilities=%@ destination=%@
Stopping AVConference with callID=%ld
Canceling AVConference with callID=%ld
conference=%@ didStartSession=%d userInfo=%@
callID=%ld error=%@
callID=%ld error=%@ callMetadata=%@
screenAttributes=%@ callID=%ld
videoAttributes=%@ callID=%ld
[WARN] callID=%ld isStalled=%d
callID=%ld parameters=%@
callID=%ld isDegraded=%d isRemoteVideo=%d
[WARN] callID=%ld isNetworkBad=%d
Calling CTCallDialWithOptions() with options: %@
dialWithRequest: set destinationID to %@, since %@ is YES and this is an internal device
dialWithRequest: set destinationID to %@, since destinationID was nil and either %@ is NO (%d) or this is not an internal device (%d)
dialWithRequest: no CTCallRef returned from CTCallDialWithOptions(), setting TUCallDisconnectedReasonMMIOrUSSDLikely since TUIsMMIOrUSSDNumber is YES
dialWithRequest: no CTCallRef returned from CTCallDialWithOptions(), setting TUCallDisconnectedReasonDialFailed since TUIsMMIOrUSSDNumber is NO
Calling CTCallAnswerWithOptions with %@
Calling CTCallHold on call %@
Calling CTCallResume on call %@
Calling CTCallDisconnect on %@
Setting disconnected reason to answered elsewhere because cause code string is answered elsewhere (%@ code=%d) for call %@
[WARN] Setting disconnected reason to client device busy because cause code string is secondary device already in use (%@ code=%d) for call %@
Setting disconnected reason to handed off because cause code string is handed off (%@ code=%d) for call %@
[WARN] Setting disconnected reason to remote busy because cause code string is user busy (%@ code=%d) and user busy is supported for call %@
Setting disconnected reason to call failed because cause code string is user busy (%@ code=%d) but user busy is NOT supported for call %@
[WARN] Ignoring user busy cause code string (%@ code=%d) because this call is not outgoing: %@
Setting disconnected reason to call failed because cause code string is non-nil but is not recognized (%@ code=%d) for call %@
Setting disconnected reason to remote hangup because CTCallDidDeviceOriginateEnd returned NO for call %@
Calling CTCallJoinConference for %@
Calling CTCallLeaveConference for %@
Calling CTCallSwitchCallSource on %@ to %@
Setting downlinkMuted to %d for call %@
Asked to set isSendingAudio from %d to %d
Calling CTDTMFPlayStart() with key %d
Calling CTDTMFPlayStop()
Start call action fulfilled: %@
Start call action failed: %@
Answer call action fulfilled: %@
Answer call action failed: %@
End call action fulfilled: %@
End call action failed: %@
Set held call action fulfilled: %@
[WARN] Set held call action failed but reverting state is allowed: %@
Set group call action fulfilled: %@
Could not find call to group with for set group call action: %@. All call: %@
[WARN] Set group call action failed but reverting state is allowed: %@
Set held call action failed and reverting state is not allowed: %@
Play DTMF call action fulfilled: %@
Play DTMF call action failed: %@
Set sending video call action fulfilled: %@
Set sending video call action failed: %@
Set muted call action fulfilled: %@
Set muted call action failed: %@
Action fulfilled: %@
Action failed: %@
[WARN] Not allowing requested start call action because call source %@ is at the maximum call group count of %lu: %@
[WARN] Not allowing requested start call action because call with same UUID already exists: %@
[WARN] Not allowing requested transaction because no call was found for call UUID %@ and call source %@. All calls: %@
[WARN] Not allowing requested transaction because action is not allowed to be requested: %@
[WARN] Not allowing requested transaction because it is empty: %@
Dialing new call due to requested start call action: %@
Adding supplemental set held call action for existing call %@
Could not serialize handoffActivityUserInfo into a CXHandoffContext: %@
Could not use text extension provider with identifier %@. Make sure the test extension is installed
[WARN] Could not determine call source for dial request: %@. All call sources: %@
Asked to perform action %@ for call %@
Asked to perform start call action %@ for call %@
Call source %@ registered with configuration %@
Received add incoming call request from call source %@ with UUID %@ update %@
[WARN] Returning error for add incoming call request because allowCall=%d and isFromBlockList=%d
[WARN] Returning error for add incoming call request because it is a video call and we are connected to CarPlay
[WARN] Returning error for add incoming call request because it is a direct call to a secondary device and relay calling is preferred over direct calling
[WARN] Ignoring add incoming call request because a call already exists with the same call UUID: %@
Call source %@ updated call with UUID %@ with update %@
[WARN] No call found for call source %@ and UUID %@. All calls: %@
Call source %@ ended call with UUID %@ with ended at date %@ with reason %ld failure context %@
[WARN] Call %@ already has a date ended
Call source %@ sent invitation for outgoing call with UUID %@ at date %@
[WARN] Call %@ already has a date started outgoing
[WARN] Call %@ is not outgoing
Call source %@ started connecting call with UUID %@ at date %@
[WARN] Call %@ already has a date started connecting
Call source %@ connected outgoing call with UUID %@ at date %@
[WARN] Call %@ already has a date connected
Call source %@ finished audio for call with UUID %@
Found call %@ for UUID %@, so setting hasAudioFinished
Did not find a call for UUID %@, so expediting deferred end interruption instead
Call source %@ received call with UUID: %@ crossDeviceIdentifier %@ bytesOfDataUsed %ld
Call source manager %@ completed transaction group %@
Pull call action fulfilled: %@
Pull call action failed: %@
Could not find pulled call context for completed pull call action %@. All contexts: %@
Call action completed for call: %@
[WARN] Could not find call for completed call action: %@. All calls: %@
Action completed: %@
Call sources changed: %@
Ending call %@ since its backing call source %@ is no longer connected
Call controller host %@ requested transaction %@ for connection with identifier: %@ bundle: %@ extensionIdentifier: %@
Using call source %@ for requested transaction %@
Allowing requested transaction: %@
[WARN] Not allowing requested transaction: %@
[WARN] Not allowing requested transaction because no call source was found. All call sources: %@
Marking all calls as changed because providers changed
oldDescriptor: %@ descriptor: %@ call: %@
An end interruption was deferred but we now have an interruption descriptor, so ending interruption for all providers (before beginning new interruption) and canceling the deferred end interruption
Deferring end interruption by %.2f sec, since call requires delayed end interruption and there is no pending expedited end interruption
Ending interruption immediately, since hasPendingExpeditedEndInterruption=%d (for UUID %@) and audioInterruptionRequiresDelayedEnd=%d
Not ending interruption immediately, despite no longer having a resolved descriptor, since an end interruption has already been deferred
UUID: %@
Expediting deferred end interruption block
Attempted to expedite deferred end interruption block prematurely, so pending the UUID %@
notification: %@
Other interruption has ended with shouldResume=%d
[WARN] Notification userInfo did not include AVAudioSessionInterruptionOptionKey, so assuming we should not resume
Rejecting client because it lacks the %@ capability: %@
Started tracking call: %@
Stopped tracking call: %@
Asked to answer call %@ while disconnecting calls %@ and holding calls %@
Asked to hold calls %@ while unholding calls %@
Asked to group calls %@ with calls %@
Asked to ungroup call %@ from other calls in group %@
Asked to disconnect call %@ while ungrouping call %@
Asked to disconnect all calls %@
Asked to disconnect calls %@ while holding calls %@ and unholding calls %@ and ungrouping calls %@
Asked to set uplink muted to %d for calls %@
handleCallStatusChanged %@
bytesOfDataUsed: %ld callHistoryIdentifier: %@
[WARN] Invalid TULabeledHandle generated from CXLabelHandle %@
Asked to hold relay calls %@ while unholding relay calls %@
Asked to answer relay call %@ while disconnecting active relay calls %@
[WARN] Ignoring request to answer call because canBeAnswered is NO: %@
Asked to answer relay call %@ while disconnecting held relay calls %@ and holding relay calls %@
Asked to answer relay call %@ while holding relay calls %@
Asked to group relay calls %@ with relay calls %@
Asked to ungroup relay call %@ from other relay calls in group %@
Asked to disconnect relay call %@ while ungrouping relay call %@
Asked to disconnect relay calls %@
Asked to disconnect relay calls %@ while holding relay calls %@ and unholding relay calls %@ and ungrouping calls %@
Received notification: %@
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.telephonyutilities.callservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>development</string>
<key>com.apple.CallHistory.sync.allow</key>
<true/>
<key>com.apple.CallKit.call-directory</key>
<array>
<string>synchronize-extensions</string>
<string>query-identification-entries</string>
</array>
<key>com.apple.CallKit.call-directory.extension-host</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>phone</string>
<string>voice</string>
<string>identity</string>
<string>data-usage</string>
<string>data-allowed</string>
<string>data-allowed-write</string>
</array>
<key>com.apple.Contacts.database-allow</key>
<true/>
<key>com.apple.FaceTime.CallLaunch</key>
<true/>
<key>com.apple.FaceTime.NoPrompt</key>
<true/>
<key>com.apple.backboardd.launchapplications</key>
<true/>
<key>com.apple.bulletinboard.utilities</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.developer.notificationcenter-identifiers</key>
<array>
<string>com.apple.FaceTime</string>
</array>
<key>com.apple.duet.expertcenter.consumer</key>
<true/>
<key>com.apple.imagent</key>
<true/>
<key>com.apple.imagent.av</key>
<true/>
<key>com.apple.multitasking.voipassertions</key>
<true/>
<key>com.apple.private.CallHistory.read-write</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coremedia.interruptions.phonecallpriority.allow</key>
<true/>
<key>com.apple.private.coreservices.canalwaysadvertise</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.LSAlwaysPick</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.bestappsuggestion</key>
<true/>
<key>com.apple.private.icfcallserver</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.ess</string>
<string>com.apple.private.alloy.phone.auth</string>
</array>
<key>com.apple.private.ids.messaging.high-priority</key>
<array>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.phone.auth</string>
</array>
<key>com.apple.private.ids.self-session</key>
<array>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
</array>
<key>com.apple.private.ids.session</key>
<array>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
</array>
<key>com.apple.private.ids.session-private</key>
<array>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
</array>
<key>com.apple.private.imavcore.imavagent</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.notificationcenter.internalpushclient</key>
<true/>
<key>com.apple.private.notificationcenterui.alerts</key>
<true/>
<key>com.apple.private.suggestions.contacts</key>
<true/>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceAddressBook</string>
</array>
<key>com.apple.private.tcc.manager</key>
<true/>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.personal-information.addressbook</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.springboard.statusbarstyleoverrides</key>
<true/>
<key>com.apple.videoconference.allow-conferencing</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
</dict>
</plist>
