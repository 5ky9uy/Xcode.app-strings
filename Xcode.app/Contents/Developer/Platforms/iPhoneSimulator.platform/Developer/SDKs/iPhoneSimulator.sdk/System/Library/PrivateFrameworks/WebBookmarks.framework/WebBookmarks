init
changeTypeDescription
stringWithFormat:
initWithBookmarkCollection:bookmark:changeType:
description
.cxx_destruct
collection
bookmark
changeType
_collection
_bookmark
_changeType
initWithBookmarkCollection:bookmark:
setBookmark:
beginSyncTransaction
commitSyncTransaction
_postBookmarksDidReloadNotificationAndStartReadingListFetcherIfChangesWereMade
_restoreMissingSpecialBookmarks
rollbackSyncTransaction
class
unlockSync
syncDataForKey:
setSyncData:forKey:
_clearAllDAVSyncData
alloc
initWithTitle:address:
initFolderWithParentID:
_markSpecial:
_bookmarkWithServerID:
serverID
copy
isInserted
_setServerID:forBookmark:
setServerID:
parentID
_serverIDForBookmarkID:
syncKey
_setSyncKey:forBookmark:
setSyncKey:
syncData
_setSyncData:forBookmark:
setSyncData:
title
setTitle:
_saveBookmark:withSpecialID:updateGenerationIfNeeded:
extraAttributes
wb_boolForKey:
setExtraAttributes:
cleanupRedundantPreviewText
identifier
address
initWithString:
absoluteString
setAddress:
specialID
_orderChildrenWithServerIDs:inFolderWithServerID:
_syncKeysForServerIDs:
_serverIDsInFolderWithServerID:
_serverIDAtOrderIndex:inFolderWithServerID:
isReadingListItem
UUID
clearReadingListArchiveWithUUID:
isReadingListFolder
clearAllReadingListArchives
_deleteBookmark:leaveTombstone:
isFolder
readingListWithUnreadOnly:
_orderIndex
_reverseOrderIndex:
_changeList
_DAVGeneration
initWithInt:
_clearChangeList
setMerging:
lockSync
initSafariBookmarkCollectionCheckingIntegrity:
_bookmarkIDForServerID:
isMerging
_bookmarkWithSpecialID:
_mergeCandidateFolderWithTitle:parent:
_mergeCandidateBookmarkWithAddress:parent:
isEqualToString:
length
count
isEqualToDictionary:
mutableCopy
addEntriesFromDictionary:
localAttributes
setLocalAttributes:
_markBookmarkID:added:
_setParentID:
sharedFeatureManager
favoritesFolderSelectionShouldSync
favoritesFolder
setFavoritesFolderIdentifier:postChangeNotification:
domain
code
wb_privacyPreservingDescription
initWithBookmark:bookmarkID:parentID:changeType:
wb_numberForKey:isValid:
intValue
integerValue
wb_dictionaryForKey:isValid:
initWithDictionaryRepresentationForInMemoryChangeTracking:
dictionary
numberWithInt:
setObject:forKeyedSubscript:
numberWithInteger:
dictionaryRepresentationForInMemoryChangeTracking
bookmarkAddChangeWithBookmark:
initWithBookmarkID:parentID:changeType:
initWithDictionaryRepresentation:
dictionaryRepresentation
bookmarkID
setBookmarkID:
setParentID:
_bookmarkID
_parentID
UTF8String
callStackSymbols
sharedAggregateDictionary
incrementKey:
orderedSet
_readPersistedChanges
array
_addChange:
addObject:
objectForKeyedSubscript:
removeObject:
removeObjectForKey:
_removeAllChanges
removeAllObjects
defaultManager
removeItemAtURL:error:
countByEnumeratingWithState:objects:count:
_setID:
_setInserted:
arrayWithCapacity:
dictionaryWithObjects:forKeys:count:
dataWithPropertyList:format:options:error:
writeToURL:options:error:
dataWithContentsOfURL:options:error:
propertyListWithData:options:format:error:
wb_arrayForKey:isValid:
isKindOfClass:
setSharedChangeSet:
sharedChangeSet
initWithFileURL:
nextBookmarkIDForAddingBookmarkInMemory
changes
addChange:
removeChange:
removeAllChanges
replayChangesToBookmark:
isBookmarkDeleted:
deletedBookmarkIDsInBookmarkFolder:
addedBookmarksInBookmarkFolder:
numberOfAddedBookmarksInBookmarkFolder:
updateAddChangesWithInMemoryBookmarkID:toDatabaseGeneratedID:
bookmarkIsAddedInMemory:
persistChangesWithCompletion:
fileURL
_queue
_lastBookmarkIDForAddingInMemoryBookmark
_changes
_bookmarkIDToChanges
_folderIDToDeletedChildrenChanges
_folderIDToAddedChildrenChanges
_fileURL
initClientForMachService:
_serverConnection
messageWithName:
sendMessage:
didToggleCloudTabs:terminateAfterUpdating:
clearAllCloudTabDevices
clearTabsForCurrentDevice
didToggleCloudTabs:
didTogglePrivateBrowsing:
_trimmedTitle:
_trimmedPreviewText:
isOfflineReadingListAvailable
startReadingListFetcher
_addReadingListItemWithURL:title:previewText:
_connection
_webBookmarks_isHTTPFamilyURL
_init
exceptionWithName:reason:userInfo:
supportsURL:
errorWithDomain:code:userInfo:
defaultReadingList
addReadingListItemWithURL:title:previewText:error:
_private
_serialQueue
_uniqueExternalUUID
_setUUID:
numberWithBool:
setValue:forKey:
initBuiltinDeviceBookmarkWithTitle:address:
isEqualToBookmark:
hash
string
shortTypeDescription
appendFormat:
_web_bestURLForUserTypedString
copyWithZone:
initCarrierBookmarkWithTitle:address:
initWhiteListBookmarkWithTitle:address:
isEqual:
localizedTitle
isBookmarksBarFolder
isBookmarksMenuFolder
isWebFilterWhiteListFolder
isFrequentlyVisitedSitesFolder
isEditable
isDeletable
isHidden
isSyncable
needsSyncUpdate
setNeedsSyncUpdate:
fetchedIconData
setFetchedIconData:
iconData
setIconData:
_folder
_title
_url
_UUID
_serverID
_syncKey
_syncData
_editable
_deletable
_hidden
_syncable
_fetchedIconData
_iconData
_locallyAdded
_archiveStatus
_webFilterStatus
_extraAttributes
_localAttributes
_specialID
_inserted
_needsSyncUpdate
_setupWithPath:checkIntegrity:
_setupInMemoryChangeSet
_trackChangesInMemoryIfDatabaseWriteIsNotAllowed
initWithWebBookmarkCollectionClass:
setDelegate:
_openDatabaseAtPath:checkIntegrity:error:
fileExistsAtPath:isDirectory:
_primaryCollection
lastPathComponent
stringByAppendingPathExtension:
_web_pathWithUniqueFilenameForPath:
moveItemAtPath:toPath:error:
stringByAppendingPathComponent:
_web_removeFileOnlyAtPath:
stringByAppendingString:
fileExistsAtPath:
userInfo
objectForKey:
syncSetString:forKey:
_registerForSyncBookmarksFileChangedNotification
initWithPath:checkIntegrity:
initSafariBookmarkCollectionCheckingIntegrity:readonlyCollection:
safariDirectoryPath
stringByResolvingSymlinksInPath
initWithPath:migratingBookmarksPlist:syncAnchorPlist:checkIntegrity:readonlyCollection:
_errorForMostRecentSQLiteError
_createSchema
_errorForMostRecentSQLiteErrorWithErrorCode:
_checkDatabaseIntegrity
_migrateToCurrentSchema
isLockedSync
_setupWithPath:migratingBookmarksPlist:syncAnchorPlist:checkIntegrity:
_migrateBookmarksPlist:syncAnchorPlist:
stringWithUTF8String:
_currentProcessContainerPath
applicationProxyForIdentifier:placeholder:
dataContainerURL
path
_safariContainerPath
objectAtIndex:
_web_createDirectoryAtPathWithIntermediateDirectories:attributes:
readingListArchivesDirectoryPath
enumeratorAtPath:
attributesOfItemAtPath:error:
fileSize
dealloc
contentsOfDirectoryAtPath:error:
readingListFolderBookmarkID
_fastFetchBookmarksInBookmarkFolder:
archiveStatus
removeItemAtPath:error:
_executeSQL:
_safariFetcherServerProxy
sharedWebFilterSettings
userSettings
_readingListItemsWhere:filteredBy:
contentFilterOverridesEnabled
whiteListEnabled
markWebContentFilterAllowsAllReadingListItems
bookmarkArray
URLWithString:
contentFilterListsAllowURL:
setWebFilterStatus:
saveBookmark:startReadingListFetcher:
_executeSQLWithCString:
initWithFormat:
initWithBookmarksWhere:orderBy:usingFilter:
initWithQuery:skipOffset:collection:
bookmarkCount
initWithCalendarIdentifier:
setDay:
dateByAddingComponents:toDate:options:
dateLastViewed
compare:
purgeableReadingListItems
archiveSize
date
setArchiveStatus:
setDateLastArchived:
saveBookmark:
clearArchiveSynchronously
vacuum
_selectBookmarksWhere:
_finalizeStatementIfNotNull:
_initWithSqliteRow:
isWebFilterWhiteListOnlyModeEnabled
rootBookmark
subarrayWithRange:
lastObject
bookmarkWithID:
listWithID:skipOffset:
_intFromExecutingSQL:
listWithID:
listWithID:skipOffset:includeHidden:
listWithID:skipOffset:includeHidden:filteredUsingString:
initWithFolderID:inCollection:includeHidden:usingFilter:
listWithSpecialID:
readingListWithUnreadOnly:filteredUsingString:
insertString:atIndex:
initWithBookmarksWhere:folderID:orderBy:usingFilter:
webFilterWhiteListFolderBookmarkID
frequentlyVisitedSitesFolderBookmarkID
arrayWithObject:
_webBookmarks_hasCaseInsensitivePrefix:
_parentIdentifiersOfBookmarksNeedingIcons
containsObject:
componentsJoinedByString:
_simulateCrashWithDescription:
applyInMemoryChangesToDatabase
_specialIDForBookmarkBeingSaved:
_postBookmarksChangedSyncNotification
_postBookmarksSpecialFoldersDidChangeNotification
unsignedIntValue
_postBookmarksFolderContentsDidChangeNotification:
_saveBookmark:startReadingListFetcher:forApplyingInMemoryChanges:
_startReadingListFetcher
_deleteBookmark:postChangeNotification:forApplyingInMemoryChanges:
_incrementGeneration
clearArchive
deleteBookmark:postChangeNotification:
_moveBookmark:toFolderWithID:
_moveBookmark:toIndex:
_setOrderIndex:
bookmarkAtIndex:
_moveBookmarkAtIndex:toIndex:
characterAtIndex:
stringWithString:
stringWithCharacters:length:
replaceCharactersInRange:withString:
initWithUTF8String:
rangeOfString:options:
_normalizeSearchString:
_enumerateBookmarksForMatchStatement:normalizedQuery:usingBlock:
_web_possibleURLPrefixesForUserTypedString
_addBookmarksForReadingListMatchStatement:normalizedQuery:toArray:maxResults:
sortUsingComparator:
removeObjectsInRange:
_firstBookmarkWithURLMatchingString:prefixMatch:inParent:
_postBookmarksDidReloadNotification
_tableExpressionForArchiveMode:
_orderedWhereClauseForArchiveMode:
_selectBookmarksWhere:returnType:
fullArchiveAvailable
rollingListOfArchivedReadingListItems
_cullReadingListBookmarksList:toSize:
boolValue
UUIDString
_clearAndCreateBookmarksTables
_clearAndCreateAncestorTable
_clearAndCreateBookmarksTitleWordTable
_indexAllTitleWords
_normalizeDatabaseURLs
_rebuildAncestorTable
dateWithTimeIntervalSince1970:
setObject:forKey:
arrayWithObjects:count:
initWithObjects:forKeys:
deleteAllFavoriteIcons
markAllFavoritesAsNeedingIcons
_migrateSchemaVersion3ToVersion4
_migrateSchemaVersion4ToVersion5
_migrateSchemaVersion5ToVersion6
_migrateSchemaVersion6ToVersion7
_migrateSchemaVersion7ToVersion8
_migrateSchemaVersion8ToVersion9
_migrateSchemaVersion9ToVersion10
_migrateSchemaVersion10ToVersion11
_migrateSchemaVersion11And12And13ToVersion14
_migrateSchemaVersion14ToVersion15
_migrateSchemaVersion15ToVersion16
_migrateSchemaVersion16AndVersion17AndVersion18ToVersion19
_migrateSchemaVersion21ToVersion22
_migrateSchemaVersion22ToVersion23
_migrateSchemaVersion23ToVersion24
_migrateSchemaVersion24ToVersion25
_userVersion
_migrateSchemaVersion0ToVersion1
_migrateSchemaVersion1And2ToVersion3
_migrateSchemaVersion19And20ToVersion21
_migrateSchemaVersion25ToVersion26
_migrateSchemaVersion26ToVersion27
_migrateSchemaVersion27ToVersion28
_migrateSchemaVersion28ToVersion29
_migrateSchemaVersion29ToVersion30
_migrateSchemaVersion30ToVersion31
_migrateSchemaVersion31ToVersion32
_migrateSchemaVersion32ToVersion33
_migrateSchemaVersion33ToVersion34
_migrateSchemaVersion34ToVersion35
_migrateSchemaVersion35ToVersion36
_migrateSchemaVersion36ToVersion37
_migrateSchemaVersion37ToVersion38
_rerunMigrationsIfNecessary
_importBookmarksPlist:
_importSyncAnchorPlist:
_insertAncestorTableEntriesForBookmarkID:withAncestorIDs:
_restoreBookmarkBarIfMissing
_restoreOrMergeReadingListFolderWithChangeNotification:
restoreOrMergeWhiteListFolderAndContentsWithChangeNotification:
initWithDomain:code:userInfo:
_orderIndexForBookmarkInsertedIntoParent:insertAtBeginning:
_updateCachedChildCountForParentID:inDirection:
_clearSyncKeysUnderBookmarkID:isFolder:
_insertTombstoneWithServerID:
_deleteAncestorTableEntriesForBookmarkID:
_insertAncestorTableEntriesForBookmarkID:withParentID:
_clearAllSyncKeys
_clearAllTombstones
_deleteRecursively:
initWithBytes:length:
locallyAdded
webFilterStatus
_specialIDForBookmarkTitle:
_databaseTitleForSpecialID:
_childrenOfParentBookmarkAreUnsyncable:
_setSyncable:
_addBookmarkWithTitle:address:parentID:orderIndex:isFolder:externalUUID:associatedBookmark:updateParentChildCount:updateAncestorEntries:
respondsToSelector:
_setHidden:
_updateHiddenAncestorCountForBookmarksUnderFolderID:addingOffset:
_markBookmarkID:withSpecialID:
_reindexBookmarkID:title:
_wb_stringByStandardizingDAVServerID
cStringUsingEncoding:
bytes
removeObjectAtIndex:
reverseObjectEnumerator
_unsafeOrderChildrenWithServerIDs:inFolderWithServerID:
setString:
advanceToNextToken
_clearTitleWordsForBookmarkID:
_indexBookmarkID:title:
initWithCString:encoding:
_collectChangesOfType:withClause:intoArray:
_incrementDAVGeneration
postBookmarksDidReloadNotification
syncStringForKey:
bookmarksBarBookmark
_favoritesFolderIdentifier
_lazyCreateFrequentlyVisitedSitesBookmark
dictionaryWithObject:forKey:
defaultCenter
postNotificationName:object:userInfo:
dictionaryWithContentsOfFile:
mergeWithBookmarksDictionary:clearHidden:error:
whiteListAllowedSites
_restoreOrMergeWhiteListFolderAndContentsWithWebFilterWhiteList:ensureChildCount:postChangeNotification:
webFilterWhiteListFolder
indexSet
_ensureFolderChildrenCount:
valueForKey:
webFilterWhiteList
indexOfObject:
addIndex:
removeObjectsAtIndexes:
moveBookmark:toFolderWithID:
initReadingListBookmarkWithTitle:address:previewText:
arrayByAddingObject:
folderID
_inMemoryChangeSet
_initWithSqliteRow:hasIcon:
insertObject:atIndex:
initWithTopLevelDuplicateBookmarksCount:allDuplicateBookmarksCount:
mainBundle
bundleIdentifier
_safariInMemoryChangesFilePath
fileURLWithPath:
_applyInMemoryChangesToDatabasePostChangeNotification:
releaseLock
acquireLockWithTimeout:
_enumerateContentsOfBookmarkFolder:includingSubfolders:usingBlock:
firstObject
_safariPreferencesDomain
readingListArchivesDiskUsage
safariBookmarkCollection
_syncLockFileName
databaseLockAcquisitor:acquiredLock:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
enumerateBookmarks:andReadingListItems:matchingString:usingBlock:
readingListBookmarksMatchingString:maxResults:onlyArchivedBookmarks:
databaseHealthInformation
initWithPath:
initReadonlySafariBookmarkCollection
initWithPath:migratingBookmarksPlist:syncAnchorPlist:
cleanupReadingListArchives
markArchivedReadingListItemsAsNonRecoverable
updateReadingListWebFilterStatusForUnsetItemsOnly:
localeSettingsChanged
purgeableSpace
purge:
bookmarkWithUUID:
readingListFolder
bookmarkAtPath:
subfoldersOfID:
rootList
bookmarksBarList
isEmpty
shouldFetchIconForBookmark:
bookmarksNeedingIcons
saveBookmarks:postNotification:
deleteBookmark:
reorderBookmark:toIndex:
reorderList:moveBookmarkAtIndex:toIndex:
_prefixSearch:usingColumns:maxCount:
bookmarksMatchingString:
_bookmarksFromStatementSelectingIDs:withQuery:
firstReadingListBookmarkWithURLMatchingString:prefixMatch:
indexOfReadingListBookmark:countingOnlyUnread:
countReadingListBookmarksNeedingArchiveInMode:
firstReadingListBookmarkNeedingArchiveInMode:
readingListBookmarksNeedingArchiveInMode:
rollOutLastReadingListItem
rollOutReadingListItemIfNeededToMakeRoomForOneNewItem
rollingReadingListMaximumCount
clearCarrierBookmarks
_rootFolderHiddenChildrenClause
_sqliteStatementWithQuery:
_clearCachedFavoritesFolderIdentifier
setFavoritesFolder:localOnly:
favoritesFolderList
bookmarkIsFavoritesFolder:
frequentlyVisitedSitesFolder
frequentlyVisitedSitesList
iconDataForBookmark:
fastFetchBookmarksInBookmarkList:
hasInMemoryChanges
deleteBookmarkInMemory:
addBookmarkInMemory:toFolderWithID:
_test_preventPeriodicallyApplyingInMemoryChangesToDatabase
test_restoreMissingSpecialBookmarks
_locale
_wordTokenizer
_rootBookmark
_merging
_dirty
_readonly
_databaseLockAcquisitor
substringToIndex:
timeIntervalSince1970
_addChildrenOfID:toCollection:recursive:error:
_bookmarkDictionaryForSqliteRow:recursive:error:
_syncAdd:toParent:withOrderIndex:error:
_mergeChildrenOfID:referencingBase:error:
_markSpecialBookmarks
_deleteSyncPropertyForKey:
_syncPropertyExistsForKey:
dataWithBytes:length:
_isLockedSync
_syncFlags
syncLockFileDescriptor
_lockSync
setUnlockSyncRequested:
setSyncLockFileDescriptor:
_unlockSync
lockSyncHoldRequestorPointers
postDAVSyncNotificationWhenUnlocking
_postBookmarksChangedSyncNotificationOnSyncQueue
setPostDAVSyncNotificationWhenUnlocking:
valueWithPointer:
unlockSyncRequested
syncAllowed
_bookmarkCollectionSyncAllowed
initWithSyncAllowed:
bookmarksDictionary
removePersistedInMemoryBookmarkChangesFile
generation
containsOnlyStockBookmarks
holdLockSync:
unholdLockSync:
_syncAllowed
_postDAVSyncNotificationWhenUnlocking
_unlockSyncRequested
_syncLockFileDescriptor
_lockSyncHoldRequestorPointers
componentsWithString:
_wb_stringByDeletingTrailingSlash
hasSuffix:
isCustomQuery
bookmarksInCollection:fromIndex:toIndex:
addObjectsFromArray:
bookmarkArrayRequestingCount:
_bookmarks
_bookmarkCount
_skipOffset
_query
countInCollection:
initWithUserName:
restrictionType
reloadSettings
isWebFilterEnabled
_userSettings
setString:withSearchRange:
longCharacterIsMember:
initialize
_string
_stringLength
_rangeOfNextToken
_startOfUnclassifiedRangeBeforeNextToken
addCharactersInRange:
_normalizeUserTypedString:
_preparePrefixesFromNormalizedString:
_listQueryType
_sqliteNotInConditionForInMemoryDeletedBookmarksInFolder:collection:
_filterBookmarks:
_childCountInDatabaseForFolderFetchInCollection:skipCountingInDatabaseBookmarksThatAreDeletedInMemory:
_inMemoryAddedChildrenCountForBookmarkFolder:collection:skipCountingBookmarksThatAreDeletedInMemory:
_whereClauseByAddingCondition:
initWithCapacity:
objectAtIndexedSubscript:
substringWithRange:
_queryWithOrderBy
_orderBy
_titleWordPrefixes
_titleWordPrefixesForInMemoryFiltering
_urlFilter
_includeHidden
_countShouldUseNumChildrenIfPossible
_customQuery
_folderID
appendString:
whitespaceAndNewlineCharacterSet
formUnionWithCharacterSet:
punctuationCharacterSet
componentsSeparatedByCharactersInSet:
indexOfObjectPassingTest:
wb_stringForKey:isValid:
numberWithUnsignedInt:
isEqualToData:
_initWithDomain:
_initWithDomain:usage:securityOriginHosts:cookieDomains:
websiteDataRecordWithDomain:
websiteDataRecordFromXPCDictionary:
XPCDictionaryRepresentation
usage
setUsage:
cookieDomains
securityOriginHosts
_domain
_usage
_cookieDomains
_securityOriginHosts
setWithCapacity:
enumerateObjectsUsingBlock:
topLevelDuplicateBookmarksCount
allDuplicateBookmarksCount
_topLevelDuplicateBookmarksCount
_allDuplicateBookmarksCount
_readingListPropertyNamed:
_modifyExtraReadingListAttributes:
_modifyLocalReadingListAttributes:
previewText
localPreviewText
stringByTrimmingCharactersInSet:
stringByReplacingOccurrencesOfString:withString:options:range:
setPreviewText:
setLocallyAdded:
dateLastArchived
dateAdded
setDateAdded:
setDateLastViewed:
dateLastFetched
setDateLastFetched:
sourceLocalizedAppName
setSourceLocalizedAppName:
sourceBundleID
setSourceBundleID:
setTitle:previewText:dateLastFetched:
setNextPageURLs:
nextPageURLs
siteName
setSiteName:
setLocalPreviewText:
mainFrame
DOMDocument
webArchive
data
dataSource
mainResource
writeToFile:options:error:
mainFrameURL
createSymbolicLinkAtPath:withDestinationPath:error:
response
quickLookContentForURL:
_writeDataAtPath:asArchive:
_createSymlinkInDirectory:pointingToPath:
_quickLookContentFilePath
suggestedFilename
pathExtension
MIMEType
preferredExtensionForMIMEType:
_web_userVisibleString
_suggestedFileNameForWebView:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
linkItemAtPath:toPath:error:
fileType
subpathsOfDirectoryAtPath:error:
_sizeForFileOrDirectory:withAttributes:
_removeDirectoryAtPath:
webarchivePathInReaderForm:fileExists:
webarchivePathForNextPageURL:
writeOfflineWebView:asArchive:inReaderForm:
shouldReattemptArchive
_updateToAccessLevel:
accessLevel
_offlineReadingListAvailable
_favoritesFolderSelectionShouldSync
_accessLevel
sharedConnection
isEphemeralMultiUser
setValue:forScalarKey:
didFinishFetching
setHandler:forMessageNamed:
didUpdateProgressWithMessage:
didStartFetchingReadingListItemWithMessage:
didStopFetchingReadingListItemWithMessage:
bookmarksServerProxy:didStartFetchingReadingListItem:
bookmarksServerProxy:didStopFetchingReadingListItem:
bookmarksServerProxy:didUpdateReadingListFetchingProgress:
bookmarksServerProxyDidFinishFetching:
connection:didCloseWithError:
delegate
_delegate
wb_objectOfType:forKey:isValid:
wb_numberForKey:
sendMessage:withReplyHandler:
getSafariWebDataUsageWithCompletion:
deleteAllSafariSecurityOrigins
deleteSafariWebsiteDataRecord:
deleteSafariPersistentURLCacheStorage
getSafariDataUsageByteCountWithCompletionHandler:
clearAllSafariHistory
getCurrentlySelectedSearchEngineWithCompletion:
scheduleBookmarksDatabaseMaintenance
_attemptToLockSyncAndNotifyDelegateOnFailure:
_startTimerWithTimeout:
_stopTimer
isValid
invalidate
_retryTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
_timer
_webBookmarkCollectionClass
_lockAcquired
_maxRetryCount
_retryCount
_handleMessage:
initWithConnection:
setMessageHandlers:
hasBoolEntitlement:
connection
_messageHandlers
_entitlementLookupCache
_handleIncomingConnection:
initListenerForMachService:
_listenerConnection
_clientConnections
Modify
Delete
%@: %@
collection
T@"WebBookmarkCollection",R,N,V_collection
bookmark
T@"WebBookmark",R,N,V_bookmark
changeType
Ti,R,N,V_changeType
<BABookmarkItem %p> wrapping {%@}
T@"WebBookmark",&,N,V_bookmark
Error: domain=%@, code=%ld
BookmarkID
ParentID
Type
AssociatedBookmark
dictionaryRepresentation
T@"NSDictionary",R,C,N
bookmarkID
Ti,N,V_bookmarkID
parentID
Ti,N,V_parentID
Tq,R,N,V_changeType
ROLLBACK
COMMIT
BEGIN DEFERRED
SELECT NULL FROM bookmarks
apple-internal-install
BEGIN IMMEDIATE
com.apple.MobileSafari.StopSyncing
com.apple.WebBookmarks.BookmarkDAVHealth.TaskSubmitted
com.apple.WebBookmarks.BookmarkDAVHealth.TaskSucceeded
com.apple.WebBookmarks.BookmarkDAVHealth.TaskFailed
com.apple.WebBookmarks.BookmarkDAVHealth.TaskGroupSubmitted
com.apple.WebBookmarks.BookmarkDAVHealth.TaskGroupSucceeded
com.apple.WebBookmarks.BookmarkDAVHealth.TaskGroupFailed
com.apple.WebBookmarks.BookmarkDAVHealth.WokenByPush
Changes
com.apple.WebBookmarks.WebBookmarkChangeSet.%p
v8@?0
fileURL
T@"NSURL",R,C,N,V_fileURL
changes
T@"NSArray",R,C,N
WBErrorDomain
Misuse of WBReadingList interface. Use class method defaultReadingList.
com.apple.WebBookmarks.AddToReadingListQueue
%@ %d (%d)
 '%@' [%@] [%@]
needsSyncUpdate
TB,N,V_needsSyncUpdate
title
T@"NSString",&,N,V_title
address
T@"NSString",&,N,V_url
Ti,R,N,V_parentID
identifier
Ti,R,N,V_id
UUID
T@"NSString",R,N,V_UUID
specialID
Ti,R,N,V_specialID
editable
TB,R,N,GisEditable,V_editable
deletable
TB,R,N,GisDeletable,V_deletable
hidden
TB,R,N,GisHidden,V_hidden
folder
TB,R,N,GisFolder,V_folder
inserted
TB,R,N,GisInserted,V_inserted
syncable
TB,R,N,GisSyncable,V_syncable
fetchedIconData
TB,N,V_fetchedIconData
iconData
T@"NSData",&,N,V_iconData
extraAttributes
T@"NSDictionary",&,N,V_extraAttributes
localAttributes
T@"NSDictionary",&,N,V_localAttributes
DidDownloadIconsNotification
BookmarkIdentifier
com.apple.WebBookmarks.SQLiteError
WebBookmarksFolderContentsDidChangeNotification
WebBookmarksDidReloadNotification
WebBookmarksSpecialFoldersDidChangeNotification
WebBookmarksChangedFolderID
com.apple.bookmarks.OmitFromUI
_DatabaseResetReason
com.apple.bookmarks.IsBuiltinDeviceBookmark
com.apple.bookmarks.IsCarrierBookmark
com.apple.bookmarks.SelectedFavoritesFolder
com.apple.webbookmarksd.readingListfetching
com.apple.WebBookmarks.webbookmarksd
WebBookmarksDataclassDidChangeNotification
WebBookmarksResetCloudHistoryAccount
ComputerAnchorKey
BASyncData
_FavoritesFolderID
BookmarksBar
BookmarksMenu
com.apple.ReadingList
com.apple.WebFilterWhiteList
com.apple.FrequentlyVisitedSites
Bookmarks.db
corrupted
%@.corrupted
-journal
Bookmarks.plist
Bookmarks.plist.anchor.plist
:memory:
SELECT * FROM bookmarks LIMIT 1
Database failed full integrity check.
PRAGMA integrity_check(1)
com.apple.mobilesafari
Library/Preferences/com.apple.mobilesafari
bookmarkChanges.plist
Library/Caches
ReadingListArchives
Library/Safari
UPDATE bookmarks SET archive_status = ? WHERE archive_status = ? OR archive_status = ?
PendingBookmarkChanges.plist
UPDATE bookmarks SET archive_status = ? WHERE parent = ? AND id IN (%@)
parent = %d AND deleted = 0 AND (archive_status = %d OR archive_status = %d)
UPDATE bookmarks SET archive_status = %d WHERE %@
web_filter_status = %d
UPDATE bookmarks SET web_filter_status = ? WHERE parent = ? AND deleted = 0 AND web_filter_status != ?
VACUUM
parent = %d AND deleted = 0 AND read = 1 AND (archive_status = %d OR archive_status = %d)
id = %d AND deleted = 0
external_uuid = ? AND deleted = 0
SELECT id FROM bookmarks WHERE parent = ? AND type = 1 AND title = ? AND deleted = 0
parent = ? AND title = ? AND deleted = 0 ORDER BY order_index
parent = %d AND type = 1 AND deleted = 0 AND hidden = 0 AND hidden_ancestor_count = 0 ORDER BY order_index
SELECT id FROM bookmarks WHERE special_id = %d AND deleted = 0
web_filter_status != %d
read = 0 AND 
parent = %d AND deleted = 0
 AND %@
order_index DESC
SELECT id FROM bookmarks WHERE special_id = %d
SELECT COUNT(*) FROM bookmarks WHERE special_id == 0 AND id != 0 AND deleted = 0;
http
https
fetched_icon = 0 AND (url LIKE 'http:%%' OR url LIKE 'https:%%') AND parent IN (%@)
UPDATE bookmarks SET fetched_icon = 0 WHERE parent IN (%@)
UPDATE bookmarks SET icon = NULL, fetched_icon = 0 WHERE parent IN (%@)
Trying to save bookmarks without first obtaining the bookmarks database file lock.
Trying to save a bookmark without first obtaining the bookmarks database file lock.
UPDATE bookmarks SET order_index = order_index + 1 WHERE order_index < ? AND order_index >= ? AND parent = ?
UPDATE bookmarks SET order_index = order_index - 1 WHERE order_index > ? AND order_index <= ? AND parent = ?
UPDATE bookmarks SET order_index = ?, dav_generation = ? WHERE id = ?
DISTINCT url
SELECT %s FROM bookmarks WHERE type = 0 AND url >= ? AND url < ? AND deleted = 0 LIMIT ?
SELECT %s FROM bookmarks WHERE type = 0 AND deleted = 0 LIMIT ?
SELECT id, title, url FROM bookmarks WHERE type = 0 AND deleted = 0
AND parent = %d
AND hidden = 0 AND hidden_ancestor_count = 0
SELECT %s FROM bookmarks INNER JOIN bookmark_title_words ON bookmarks.id = bookmark_title_words.bookmark_id WHERE bookmark_title_words.word LIKE ? AND type = 0 AND deleted = 0 AND web_filter_status != %d AND title IS NOT NULL AND url IS NOT NULL %@
PRAGMA case_sensitive_like = true
@"WebBookmark"8@?0
v32@?0@"NSString"8@"NSString"16^{BookmarkSQLStatement=^^?^{sqlite3_stmt}BBi}24
SELECT %s FROM bookmarks WHERE url LIKE ? AND type = 0 AND deleted = 0 AND web_filter_status != %d AND title IS NOT NULL AND url IS NOT NULL %@
PRAGMA case_sensitive_like = false
 AND (archive_status = %d OR archive_status = %d)
deleted = 0 AND parent = ? AND web_filter_status != ? AND title IS NOT NULL AND url IS NOT NULL%@ ORDER BY order_index DESC LIMIT ?
SELECT %s FROM bookmarks INNER JOIN bookmark_title_words ON bookmarks.id = bookmark_title_words.bookmark_id WHERE bookmark_title_words.word LIKE ? AND %@
SELECT %s FROM bookmarks WHERE url LIKE ? AND %@
q24@?0@8@16
SELECT COUNT(*) FROM bookmarks WHERE order_index < ? AND read = 0 AND deleted = 0 AND parent = ?
SELECT id FROM bookmarks WHERE parent = %d AND deleted = 0 AND web_filter_status = %d ORDER BY order_index DESC LIMIT %d
id IN (%@) AND 
(archive_status = %d OR archive_status = %d)
(archive_status = %d OR archive_status = %d) AND (locally_added = 1 OR read = 0)
(archive_status = %d OR archive_status = %d) AND locally_added = 1
 ORDER BY archive_status ASC, read ASC, locally_added DESC, order_index DESC
 LIMIT 1
read ASC, order_index DESC
syncable = 0 AND parent = 0
com.apple.Bookmarks.lock
SELECT MAX(order_index) + 1 FROM bookmarks WHERE special_id != 0
SELECT COUNT(*), MAX(order_index) FROM bookmarks WHERE parent = ? AND deleted = 0 AND syncable = 1
special_id = ? AND deleted = 0
%@%%
url LIKE ? AND deleted = 0 AND parent = ? LIMIT 1
url = ? AND deleted = 0 AND parent = ? ORDER BY last_modified ASC LIMIT 1
type = 1 AND title = ? AND parent = ? AND deleted = 0 AND server_id IS NULL
type = 0 AND url = ? AND parent = ? AND deleted = 0 AND server_id IS NULL
PRAGMA user_version
PRAGMA journal_mode = wal
BEGIN
CREATE TABLE generations (generation INTEGER NOT NULL)
INSERT INTO generations (generation) VALUES (1)
CREATE TABLE sync_properties (key TEXT NOT NULL, value TEXT NOT NULL)
CREATE INDEX sync_properties_key_index ON sync_properties (key)
INSERT INTO sync_properties (key, value) VALUES ('_dav_generation', 1)
INSERT INTO bookmarks (id, special_id, parent, type, order_index, num_children, editable, deletable, title, external_uuid) VALUES (1, 1, 0, 1, 0, 0, 0, 0, 'BookmarksBar', '%@')
UPDATE bookmarks SET num_children = 1 WHERE id = 0
PRAGMA user_version = %d
DROP TABLE IF EXISTS bookmark_title_words
CREATE TABLE bookmark_title_words (id INTEGER PRIMARY KEY, bookmark_id INTEGER NOT NULL CONSTRAINT fk_bookmark_id REFERENCES bookmarks(id) ON DELETE CASCADE, word TEXT, word_index INTEGER)
CREATE TRIGGER fkd_bookmark_title_words_bookmark_id BEFORE DELETE ON bookmarks      FOR EACH ROW BEGIN DELETE FROM bookmark_title_words WHERE bookmark_id = OLD.id;      END;
CREATE INDEX title_word_index ON bookmark_title_words(word)
CREATE INDEX title_bookmark_id_index ON bookmark_title_words(bookmark_id)
DROP TABLE IF EXISTS bookmarks
CREATE TABLE bookmarks (id INTEGER PRIMARY KEY,                                                           special_id INTEGER DEFAULT 0,                                                           parent INTEGER,                                                           type INTEGER,                                                           title TEXT,                                                           url TEXT COLLATE NOCASE,                                                           num_children INTEGER DEFAULT 0,                                                           editable INTEGER DEFAULT 1,                                                           deletable INTEGER DEFAULT 1,                                                           hidden INTEGER DEFAULT 0,                                                           hidden_ancestor_count INTEGER DEFAULT 0,                                                           order_index INTEGER NOT NULL,                                                           external_uuid TEXT,                                                           read INTEGER DEFAULT NULL,                                                           last_modified REAL DEFAULT NULL,                                                           server_id TEXT,                                                           sync_key TEXT,                                                           sync_data BLOB,                                                           added INTEGER DEFAULT 1,                                                           deleted INTEGER DEFAULT 0,                                                           extra_attributes BLOB DEFAULT NULL,                                                           local_attributes BLOB DEFAULT NULL,                                                           fetched_icon BOOL DEFAULT 0,                                                           icon BLOB DEFAULT NULL,                                                           dav_generation INTEGER DEFAULT 0,                                                           locally_added BOOL DEFAULT 0,                                                           archive_status INTEGER DEFAULT 0,                                                           syncable BOOL DEFAULT 1,                                                           web_filter_status INTEGER DEFAULT 0)
CREATE INDEX special_id_index ON bookmarks (special_id)
CREATE INDEX autocomplete_index ON bookmarks (url)
CREATE INDEX folder_list_index ON bookmarks (parent, type, order_index)
CREATE INDEX group_index ON bookmarks (parent, order_index)
CREATE INDEX sync_index ON bookmarks (external_uuid)
CREATE INDEX server_id_index ON bookmarks(server_id)
CREATE INDEX dav_generation_index ON bookmarks(dav_generation)
INSERT INTO bookmarks (id, type, order_index, num_children, title, external_uuid) VALUES (0, 1, 0, 0, 'Root', 'Root')
ALTER TABLE bookmarks ADD COLUMN special_id INTEGER DEFAULT 0
UPDATE bookmarks SET title = 'Root', external_uuid = 'Root' WHERE id = 0
UPDATE bookmarks SET special_id = 1 WHERE id = 1
UPDATE bookmarks SET special_id = 2 WHERE id = 2
PRAGMA user_version = 1
CREATE TRIGGER fkd_bookmark_title_words_bookmark_id BEFORE DELETE ON bookmarks         FOR EACH ROW BEGIN DELETE FROM bookmark_title_words WHERE bookmark_id = OLD.id;         END;
PRAGMA user_version = 3
ALTER TABLE bookmarks ADD COLUMN server_id TEXT
ALTER TABLE bookmarks ADD COLUMN sync_key TEXT
ALTER TABLE bookmarks ADD COLUMN sync_data BLOB
PRAGMA user_version = 4
SELECT count(*) FROM sync_properties WHERE key = '_dav_generation'
ALTER TABLE bookmarks ADD COLUMN deleted INTEGER DEFAULT 0
ALTER TABLE bookmarks ADD COLUMN dav_generation INTEGER DEFAULT 0
PRAGMA user_version = 5
PRAGMA user_version = 6
CREATE TABLE folder_ancestors (id INTEGER PRIMARY KEY, folder_id INTEGER NOT NULL CONSTRAINT fk_ancestors_folder_id REFERENCES bookmarks(id) ON DELETE CASCADE, ancestor_id INTEGER NOT NULL)
CREATE TRIGGER fkd_ancestors_folder_id BEFORE DELETE ON bookmarks FOR EACH ROW BEGIN DELETE FROM folder_ancestors WHERE folder_id = OLD.id; END;
CREATE INDEX ancestor_folder_id_index on folder_ancestors(folder_id)
CREATE INDEX ancestor_ancestor_id_index on folder_ancestors(ancestor_id)
PRAGMA user_version = 7
ALTER TABLE bookmarks ADD COLUMN extra_attributes BLOB DEFAULT NULL
PRAGMA user_version = 8
DROP INDEX IF EXISTS deleted_index
DROP INDEX IF EXISTS autocomplete_index
CREATE INDEX autocomplete_index ON bookmarks(url)
PRAGMA user_version = 9
ALTER TABLE bookmarks ADD COLUMN hidden INTEGER DEFAULT 0
PRAGMA user_version = 10
ALTER TABLE bookmarks ADD COLUMN hidden_ancestor_count INTEGER DEFAULT 0
PRAGMA user_version = 11
ALTER TABLE bookmarks ADD COLUMN read INTEGER DEFAULT NULL
ALTER TABLE bookmarks ADD COLUMN last_modified REAL DEFAULT NULL
PRAGMA user_version = 14
SELECT id FROM bookmarks WHERE special_id = 3
UPDATE bookmarks SET read = 0 WHERE read IS NULL and parent = ?
PRAGMA user_version = 15
CREATE INDEX title_word_bookmark_id_index ON bookmark_title_words(bookmark_id)
PRAGMA user_version = 16
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS count_bookmarks WHERE count_bookmarks.parent = bookmarks.id AND hidden = 0) WHERE type = 1
PRAGMA user_version = 19
SELECT count(*) FROM bookmarks WHERE parent = ? AND deleted = 0
UPDATE bookmarks SET order_index = ? - order_index - 1 WHERE parent = ?
PRAGMA user_version = 21
ALTER TABLE bookmarks ADD COLUMN icon BLOB DEFAULT NULL
ALTER TABLE bookmarks ADD COLUMN fetched_icon BOOL DEFAULT 0
SELECT id, extra_attributes FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET icon = ?, fetched_icon = ?, extra_attributes = ?, dav_generation = ? WHERE id = ?
PRAGMA user_version = 22
DELETE FROM sync_properties WHERE key = '_dav_generation'
INSERT INTO sync_properties (key, value) VALUES ('_dav_generation', ?)
PRAGMA user_version = 23
ALTER TABLE bookmarks ADD COLUMN added INTEGER DEFAULT 1
UPDATE bookmarks SET added = 0 WHERE server_id IS NOT NULL
PRAGMA user_version = 24
ALTER TABLE bookmarks ADD COLUMN archived_offline BOOL DEFAULT 0
ALTER TABLE bookmarks ADD COLUMN last_archived REAL DEFAULT NULL
PRAGMA user_version = 25
PRAGMA user_version = 26
PRAGMA user_version = 27
PRAGMA user_version = 28
ALTER TABLE bookmarks ADD COLUMN locally_added BOOL DEFAULT 0
PRAGMA user_version = 29
ALTER TABLE bookmarks ADD COLUMN local_attributes BLOB DEFAULT NULL
SELECT id, extra_attributes, last_archived FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET extra_attributes = ?, local_attributes = ?, dav_generation = ? WHERE id = ?
ALTER TABLE bookmarks DROP COLUMN last_archived
PRAGMA user_version = 30
ALTER TABLE bookmarks ADD COLUMN archive_status INTEGER DEFAULT 0
UPDATE bookmarks SET archive_status = archived_offline
UPDATE bookmarks SET archived_offline = NULL
UPDATE bookmarks SET last_archived = NULL
PRAGMA user_version = 31
PRAGMA user_version = 32
UPDATE bookmarks SET fetched_icon = 0, icon = NULL WHERE parent = (SELECT id FROM bookmarks WHERE special_id = 3)
PRAGMA user_version = 33
ALTER TABLE bookmarks ADD COLUMN syncable BOOL DEFAULT 1
PRAGMA user_version = 34
UPDATE bookmarks SET archive_status = 0 WHERE archive_status IS NULL
PRAGMA user_version = 35
ALTER TABLE bookmarks ADD COLUMN web_filter_status INTEGER DEFAULT 0
PRAGMA user_version = 36
PRAGMA user_version = 37
PRAGMA user_version = 38
SELECT %s, %s FROM bookmarks
SELECT COUNT(*) FROM bookmarks WHERE special_id = 1
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = 0
INSERT INTO bookmarks (special_id, parent, type, order_index, editable, deletable, title, external_uuid) VALUES (1, 0, 1, 0, 0, 0, 'BookmarksBar', '')
UPDATE bookmarks SET num_children = num_children + 1 WHERE id = 0
AND hidden = 0 AND id != %d AND (num_children > 0 OR special_id != %d)
SELECT count(*) FROM bookmarks WHERE %@
SELECT id FROM bookmarks WHERE %@
SELECT %s FROM bookmarks WHERE %@
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = ? AND order_index >= ?
UPDATE bookmarks SET parent = ?, order_index = ?, icon = NULL, fetched_icon = 0 WHERE id = ?
UPDATE bookmarks SET order_index = (order_index - 1) WHERE parent = ? AND order_index > ?
INSERT INTO bookmarks (order_index, deleted, parent, server_id) VALUES (0, 1, -1, ?)
DELETE FROM bookmarks WHERE deleted = 1
UPDATE bookmarks SET added = 1, server_id = NULL, sync_key = NULL, sync_data = NULL WHERE parent IN (select folder_id from folder_ancestors where ancestor_id = ?) OR parent = ? OR id = ?
UPDATE bookmarks SET server_id = NULL, sync_key = NULL, sync_data = NULL
UPDATE bookmarks SET added = 1
UPDATE bookmarks SET order_index = (order_index - 1) WHERE parent = %d AND order_index > %d
DELETE FROM bookmarks WHERE parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) OR parent = ? OR id = ?
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = %d AND order_index >= %d
SELECT (hidden + hidden_ancestor_count) FROM bookmarks WHERE id = ?
INSERT INTO bookmarks (title, url, parent, type, external_uuid, order_index, extra_attributes, fetched_icon, icon, locally_added, archive_status, web_filter_status, hidden_ancestor_count, editable, local_attributes, syncable) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT count(*) FROM Bookmarks WHERE special_id = %u
UPDATE bookmarks SET title = ?1, url = ?2, extra_attributes = ?3, local_attributes = ?11, fetched_icon = ?4, icon = ?5, locally_added = ?10, archive_status = ?8, web_filter_status = ?12, dav_generation = ?7 WHERE id = ?6
UPDATE bookmarks SET title = ?1, url = ?2, extra_attributes = ?3, local_attributes = ?11, fetched_icon = ?4, icon = ?5, locally_added = ?10, archive_status = ?8, web_filter_status = ?12 WHERE id = ?6
UPDATE bookmarks SET hidden = ? WHERE id = ?
UPDATE bookmarks SET last_modified = ?, read = ? WHERE id = ?
UPDATE bookmarks SET external_uuid = '%@' WHERE id = %d
UPDATE bookmarks SET special_id = %u, editable = 0, deletable = 0 WHERE id = %u
UPDATE bookmarks SET num_children = num_children - 1 WHERE id = %d
UPDATE bookmarks SET num_children = num_children + 1 WHERE id = %d
SELECT server_id FROM bookmarks WHERE id = ?
SELECT id FROM bookmarks WHERE %@ ORDER BY server_id ASC
rtrim(server_id, '/') LIKE ?
server_id = ?
%%%@
%@ ORDER BY server_id ASC
UPDATE bookmarks SET server_id = ? WHERE id = ?
UPDATE bookmarks SET sync_key = ? WHERE id = ?
UPDATE bookmarks SET sync_data = ? WHERE id = ?
SELECT sync_key FROM bookmarks WHERE server_id = ? AND deleted = 0 ORDER BY server_id ASC
SELECT sync_key FROM bookmarks WHERE deleted = 0 AND rtrim(server_id, '/') LIKE ? ORDER BY server_id ASC
SELECT server_id from bookmarks where parent = ? AND deleted = 0
SELECT server_id FROM bookmarks WHERE parent = ? AND deleted = 0 AND order_index = ?
UPDATE bookmarks SET order_index = ? WHERE id = ?
SAVEPOINT bookmarksdav_order
RELEASE SAVEPOINT bookmarksdav_order
ROLLBACK TRANSACTION TO SAVEPOINT bookmarksdav_order
SELECT ancestor_id from folder_ancestors WHERE folder_id = ?
DELETE FROM folder_ancestors WHERE folder_id IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) OR folder_id = ?;
DELETE FROM bookmark_title_words WHERE bookmark_id = %d
INSERT INTO bookmark_title_words (bookmark_id, word, word_index) VALUES (?, ?, ?)
SELECT id, title FROM bookmarks where type = 0 AND deleted = 0
UPDATE generations SET generation = generation + 1
SELECT %s %@
FROM folder_ancestors LEFT OUTER JOIN bookmarks ON folder_id = bookmarks.id WHERE bookmarks.id != 0 AND added = 1 AND syncable = 1 GROUP BY folder_id ORDER BY count(ancestor_id) ASC
FROM bookmarks WHERE added = 1 AND id != 0 AND type = 0 AND syncable = 1
FROM bookmarks WHERE dav_generation = %d AND deleted = 0 AND added = 0 AND id != 0 AND syncable = 1
FROM bookmarks WHERE deleted = 1 AND server_id IS NOT NULL AND syncable = 1
UPDATE bookmarks SET added = 0
UPDATE bookmarks SET added = ? WHERE id = ?
SELECT value from sync_properties WHERE key = '_dav_generation'
UPDATE sync_properties SET value = value + 1 WHERE key = '_dav_generation'
SELECT id FROM bookmarks WHERE special_id = ?
SELECT id, URL FROM bookmarks WHERE type = 0 AND deleted = 0
UPDATE bookmarks SET URL = ? WHERE id = ?
pageTitle
bookmarkPath
title = ? AND parent = 0 AND deleted = 0 ORDER BY order_index ASC
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS count_bookmarks WHERE count_bookmarks.parent = %d) WHERE (bookmarks.id = %d AND bookmarks.num_children < 0)
DROP TABLE IF EXISTS folder_ancestors
DROP TRIGGER IF EXISTS fkd_ancestors_folder_id
INSERT INTO folder_ancestors (folder_id, ancestor_id) VALUES (?, ?)
SELECT id FROM bookmarks WHERE parent = ? AND type = 1 AND deleted = 0
UPDATE bookmarks SET hidden_ancestor_count = hidden_ancestor_count + ? WHERE parent IN (SELECT folder_id from folder_ancestors WHERE ancestor_id = ?) OR parent = ?
SELECT bookmarks.icon FROM bookmarks WHERE id = ?
SELECT parent, count(*) AS identical_bookmarks FROM bookmarks GROUP BY parent, type, title, url HAVING identical_bookmarks > 1
v16@?0@"WebBookmark"8
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
merging
TB,N,GisMerging,V_merging
com.apple.WebBookmarks.bookmarksCollectionQueue
com.apple.WebBookmarks.titleWordTokenizerAccess
DeviceClass
iPad
com.apple.bookmarks.BookmarksFileChanged
WebBookmarkTypeList
WebBookmarkTypeLeaf
WebBookmarkType
Title
URIDictionary
URLString
Children
WebBookmarkUUID
SELECT type, title, url, id, external_uuid FROM bookmarks WHERE parent = ? AND deleted = 0 AND hidden = 0 AND syncable = 1 ORDER BY order_index
SELECT type, title, url, id, external_uuid FROM bookmarks WHERE id = 0
UPDATE bookmarks SET special_id = 1, editable = 0, deletable = 0 WHERE id = (SELECT id FROM bookmarks WHERE title = 'BookmarksBar' AND parent = 0 ORDER BY id ASC LIMIT 1);
UPDATE bookmarks SET special_id = 2, editable = 0, deletable = 0 WHERE id = (SELECT id FROM bookmarks WHERE title = 'BookmarksMenu' AND parent = 0 ORDER BY id ASC LIMIT 1);
DELETE FROM bookmarks WHERE id != 0 AND syncable = 1
DELETE FROM bookmarks WHERE id != 0 AND hidden = 0 AND hidden_ancestor_count = 0 AND syncable = 1
SELECT generation FROM generations
SELECT COUNT(*) FROM sync_properties WHERE key = ?
DELETE FROM sync_properties WHERE key = ?
UPDATE sync_properties SET value = ? WHERE key = ?
INSERT INTO sync_properties (value, key) VALUES (?, ?)
SELECT value FROM sync_properties WHERE key = ?
com.apple.bookmarks.dbchanged
SELECT COUNT(*) FROM bookmarks WHERE special_id == 0
syncAllowed
TB,R,N,V_syncAllowed
syncLockFileDescriptor
Ti,N,V_syncLockFileDescriptor
postDAVSyncNotificationWhenUnlocking
TB,N,V_postDAVSyncNotificationWhenUnlocking
lockSyncHoldRequestorPointers
T@"NSMutableSet",R,N,V_lockSyncHoldRequestorPointers
unlockSyncRequested
TB,N,V_unlockSyncRequested
com.apple.WebBookmarks.ErrorDomain
SQLiteResult
come.apple.WebBookmarks.syncLockQueue
com.apple.mobilesafari.bookmarks_changed
folderID
Ti,R,N
com.apple.WebBookmarks
Bookmarks
History (bookmark proxy)
Reading List
Allowed Sites
Favorites
Bookmarks Menu
WebBookmarkWebFilterSettingsDidChange
com.apple.ManagedConfiguration.webContentFilterChanged
userSettings
T@"WFUserSettings",R,N
webFilterEnabled
TB,R,N,GisWebFilterEnabled
webFilterWhiteListOnlyModeEnabled
TB,R,N,GisWebFilterWhiteListOnlyModeEnabled
WFUserSettings
Unable to find class %s
/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis
TIWordTokenizer
/System/Library/PrivateFrameworks/TextInput.framework/TextInput
AND hidden = 0
parent = %d %@
order_index ASC
%%%@%%
%@ AND %@
%@ ORDER BY %@
<%@:%p; customQuery = %@; query = "%@"; orderBy = "%@"; titleWordPrefixes = %@>
SELECT COUNT(*) FROM bookmarks WHERE %@
SELECT num_children FROM bookmarks WHERE id = %d
 AND (%@)
 ORDER BY %@
id NOT IN (%@)
%@ LIMIT ? OFFSET ?
customQuery
TB,R,N,GisCustomQuery,V_customQuery
Ti,R,N,V_folderID
((%@) OR url LIKE ?)
id IN (SELECT bookmark_id FROM bookmark_title_words WHERE word GLOB ?)
 AND id IN (SELECT bookmark_id FROM bookmark_title_words WHERE word GLOB ?)
B32@?0@"NSString"8Q16^B24
bookmarks.type, bookmarks.title, bookmarks.url, bookmarks.id, bookmarks.editable, bookmarks.deletable, bookmarks.hidden,                                            bookmarks.parent, bookmarks.order_index, bookmarks.external_uuid, bookmarks.special_id,                                            bookmarks.server_id, bookmarks.sync_key, bookmarks.sync_data, bookmarks.extra_attributes, bookmarks.local_attributes,                                            bookmarks.fetched_icon, bookmarks.icon, bookmarks.locally_added, bookmarks.archive_status, bookmarks.syncable, bookmarks.web_filter_status
SELECT bookmarks.type, bookmarks.title, bookmarks.url, bookmarks.id, bookmarks.editable, bookmarks.deletable, bookmarks.hidden,                                            bookmarks.parent, bookmarks.order_index, bookmarks.external_uuid, bookmarks.special_id,                                            bookmarks.server_id, bookmarks.sync_key, bookmarks.sync_data, bookmarks.extra_attributes, bookmarks.local_attributes,                                            bookmarks.fetched_icon, bookmarks.locally_added, bookmarks.archive_status, bookmarks.syncable, bookmarks.web_filter_status                                             FROM bookmarks WHERE parent = ? AND hidden = 0 ORDER BY order_index ASC
bookmarks.read, bookmarks.deleted
IsFolder
IsEditable
IsDeletable
IsHidden
IsSyncable
IsLocallyAdded
SpecialID
OrderIndex
IsInserted
NeedsSyncUpdate
serverID
T@"NSString",&,N
syncKey
syncData
T@"NSData",&,N
dictionaryRepresentationForInMemoryChangeTracking
WebsiteDataRecordDomain
WebsiteDataRecordUsage
WebsiteDataRecordOriginHosts
WebsiteDataRecordCookieDomains
XPCDictionaryRepresentation
T@"NSObject<OS_xpc_object>",R,C,N
domain
T@"NSString",R,C,N,V_domain
usage
TQ,N,V_usage
cookieDomains
T@"NSMutableSet",R,N,V_cookieDomains
securityOriginHosts
T@"NSMutableSet",R,N,V_securityOriginHosts
B24@?0Q8@"NSObject<OS_xpc_object>"16
v24@?0@"NSString"8^B16
BookmarkSync
DataMigration
topLevelDuplicateBookmarksCount
TQ,R,N,V_topLevelDuplicateBookmarksCount
allDuplicateBookmarksCount
TQ,R,N,V_allDuplicateBookmarksCount
/file
Reader.webarchive
Page.webarchive
v16@?0@"NSMutableDictionary"8
previewText
locallyAdded
TB,N
archiveStatus
Ti,N
webFilterStatus
dateLastArchived
T@"NSDate",&,N
dateAdded
dateLastViewed
dateLastFetched
nextPageURLs
T@"NSDictionary",&,N
localPreviewText
siteName
sourceBundleID
sourceLocalizedAppName
Page
PreviewText
DateAdded
DateLastViewed
DateLastFetched
SourceBundleID
SourceLocalizedAppName
DateLastArchived
NextPageURLs
LocalPreviewText
SiteName
Icon
DateLastFetchedIcon
SafariDebugOverrideLaunchMode
accessLevel
Tq,R,N,V_accessLevel
offlineReadingListAvailable
TB,R,N,GisOfflineReadingListAvailable,V_offlineReadingListAvailable
favoritesFolderSelectionShouldSync
TB,R,N,V_favoritesFolderSelectionShouldSync
com.apple.mobilesafari.WebBoomarks.migration.markReadingListItemsForWebContentFilterTime
com.apple.mobilesafari.WebBoomarks.migration.vacuumTime
v24@?0@"WebBookmarksXPCConnection"8@"NSObject<OS_xpc_object>"16
delegate
T@"<WebBookmarksClientDelegateProtocol>",W,N,V_delegate
com.apple.safarifetcherd
AddToReadingList
ClearAllCloudTabDevices
ClearCloudTabsForCurrentDevice
DidToggleCloudTabs
DidTogglePrivateBrowsing
RegisterForReadingListFetcherUpdates
StartReadingListFetcher
UnregisterForReadingListFetcherUpdates
DidFinishFetching
DidUpdateProgress
DidStartFetchingItem
DidStopFetchingItem
ClearAllReadingListArchives
ClearReadingListArchive
GetSafariWebDatabaseUsage
DeleteSafariWebSecurityOrigin
DeleteAllSafariWebSecurityOrigins
DeleteSafariPersistentURLCacheStorage
GetSafariDataUsageSummary
ClearAllSafariHistory
ScheduleBookmarksDatabaseMaintenanceTask
Address
ClientBundleID
ClientName
Enabled
Items
Progress
TerminateAfterUpdating
DataUsageSize
WebsiteDataAllRecords
WebsiteDataRecord
SafariGetCurrentlySelectedSearchEngineMessage
SearchEngineShortName
ContentBlockerIdentifier
ContentBlockerError
http:
https:
v12@?0B8
v16@?0@"NSObject<OS_xpc_object>"8
T@"<WBDatabaseLockAcquisitorDelegate>",W,N,V_delegate
connection
T@"NSObject<OS_xpc_object>",R,N,V_connection
T@"<WebBookmarksXPCConnectionDelegate>",N,V_delegate
_name
BAChangeRecord
BABookmarkItem
WBNSErrorExtras
WebBookmarkChange
WebBookmarkChangeSet
CloudTabServices
WBReadingListPrivate
WBReadingList
WebBookmark
NSCopying
WebBookmarkCollection
WBDatabaseLockAcquisitorDelegate
NSObject
WBBookmarkProvider
Sync
WebBookmarkCollectionSyncFlags
WebBookmarksExtras
WebBookmarkList
Internal
WebBookmarkWebFilterSettings
WebBookmarkTitleWordTokenizer
WebBookmarkListQuery
WebBookmarkReadonlyCollection
WBWebsiteDataRecord
WBBookmarksDatabaseHealthInformation
ReadingList
ReadingListFetcherExtras
ReadingListArchives
ReadingListInternal
WBFeatureManager
SafariFetcherServerProxy
WebBookmarksXPCConnectionDelegate
WBNSDictionaryExtras
WebBookmarksSettingsGateway
WBDatabaseLockAcquisitor
WebBookmarksXPCConnection
WebBookmarksXPCListener
@36@0:8@16@24i32
@16@0:8
v16@0:8
i16@0:8
@"WebBookmarkCollection"
@"WebBookmark"
@32@0:8@16@24
v24@0:8@16
@24@0:8@16
@32@0:8i16i20q24
@40@0:8@16i24i28q32
v20@0:8i16
q16@0:8
q24@0:8@16
B20@0:8i16
@20@0:8i16
Q20@0:8i16
v24@0:8i16i20
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@"NSMutableOrderedSet"
@"NSMutableDictionary"
@"NSURL"
v20@0:8B16
v24@0:8B16B20
v40@0:8@16@24@32
@"WebBookmarksXPCConnection"
B24@0:8@16
B48@0:8@16@24@32^@40
@"WBReadingListPrivate"
@24@0:8^{_NSZone=}16
Q16@0:8
B16@0:8
@"NSString"
@"NSData"
@"NSDictionary"
v28@0:8@16B24
v28@0:8@"WBDatabaseLockAcquisitor"16B24
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8@"Protocol"16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
v40@0:8B16B20@24@?32
v40@0:8B16B20@"NSString"24@?<v@?@"NSString"@"NSString"@?<@"WebBookmark"@?>>32
@32@0:8@16I24B28
@"NSArray"32@0:8@"NSString"16I24B28
@"WBBookmarksDatabaseHealthInformation"16@0:8
@28@0:8@16B24
B28@0:8@16B24
@20@0:8B16
@24@0:8B16B20
B36@0:8@16B24^@28
@48@0:8@16@24@32B40B44
B44@0:8@16@24@32B40
@40@0:8@16@24@32
B20@0:8B16
Q24@0:8Q16
@24@0:8i16I20
@28@0:8i16I20B24
@36@0:8i16I20B24@28
@28@0:8B16@20
B32@0:8@16B24B28
B28@0:8@16i24
B28@0:8@16I24
B32@0:8@16I24I28
^{sqlite3_stmt=}36@0:8@16r*24I32
v40@0:8@16@24@?32
@32@0:8r*16@24
v44@0:8@16@24@32i40
Q28@0:8@16B24
v32@0:8@16Q24
I24@0:8i16B20
@32@0:8@16B24i28
@28@0:8@16i24
B32@0:8@16@24
^{sqlite3_stmt=}24@0:8@16
^{sqlite3_stmt=}32@0:8@16q24
i24@0:8^{sqlite3_stmt=}16
@24@0:8q16
i24@0:8@16
i24@0:8r*16
B24@0:8i16B20
B68@0:8@16@24i32I36B40@44@52B60B64
B32@0:8@16i24B28
B24@0:8i16i20
@28@0:8I16@20
v24@0:8^{__CFString=}16
B28@0:8i16@20
v36@0:8i16@20@28
v24@0:8i16B20
v32@0:8@16B24B28
v28@0:8@16i24
v32@0:8i16B20@?24
^{sqlite3=}
^{__CFLocale=}
@"WebBookmarkTitleWordTokenizer"
@"SafariFetcherServerProxy"
@"WBDatabaseLockAcquisitor"
@36@0:8^{sqlite3_stmt=}16B24^@28
B40@0:8i16@20B28^@32
B40@0:8@16i24I28^@32
B36@0:8i16@20^@28
v24@0:8r^v16
@"NSMutableSet"
@20@0:8I16
I16@0:8
@"NSMutableArray"
@"WebBookmarkListQuery"
@36@0:8@16I24@28
v24@0:8I16I20
I20@0:8I16
@"WFUserSettings"
{_NSRange=QQ}16@0:8
@"TIWordTokenizer"
{_NSRange="location"Q"length"Q}
@40@0:8i16@20B28@32
@44@0:8@16i24@28@36
i28@0:8@16B24
i32@0:8i16@20B28
@28@0:8i16@20
@32@0:8@16I24I28
@"NSArray"
@24@0:8^{sqlite3_stmt=}16
@28@0:8^{sqlite3_stmt=}16B24
v20@0:8I16
@48@0:8@16Q24@32@40
v24@0:8Q16
@32@0:8Q16Q24
@28@0:8B16^B20
Q32@0:8@16@24
v24@0:8q16
v32@0:8@16@24
v32@0:8@"WebBookmarksXPCConnection"16@"NSObject<OS_xpc_object>"24
@"<WebBookmarksClientDelegateProtocol>"
@32@0:8@16^B24
@40@0:8#16@24^B32
@24@0:8#16
v24@0:8d16
@"NSTimer"
@"<WBDatabaseLockAcquisitorDelegate>"
@24@0:8r*16
v32@0:8@?16r*24
v32@0:8@16@?24
@"NSObject<OS_xpc_object>"
@"<WebBookmarksXPCConnectionDelegate>"
BADatabaseOpen()
BADatabaseSave()
BADatabaseClose(shouldSave: %d)
BADatabaseCreateBookmark() returning %{private}@
BADatabaseCreateFolder(folderType: %d) returning %{private}@
BADatabaseAddBookmarkUnderFolderWithServerId(bookmark: %{private}@, parentServerID: %{private}@)
BADatabaseAddFolderUnderFolderWithServerId(bookmark: %{private}@, parentServerID: %{private}@)
BADatabaseCopyBookmarkWithServerId(serverId: %{private}@) returning %{private}@
BADatabaseCopyFolderWithServerId(serverId: %{private}@) returning %{private}@
BAItemSetServerId(item: %{private}@, serverId: %{private}@)
BAItemSetSyncKey(item: %{private}@, syncKey: %{private}@)
BAItemSetSyncData(item: %{private}@, syncData: %{private}@)
BAItemSetTitle(item: %{private}@, title: %{private}@)
BAItemSetExtraAttributes(item: %{private}@, attributes: %{private}@)
BABookmarkSetURL(item: %{private}@, url: %{private}@)
BADatabaseSetChildrenOrderForFolderWithServerId(folderServerId: %{private}@, orderedServerIds: %{private}@)
BADatabaseRemoveItemWithServerId(serverId: %{private}@)
BADatabaseCopyChanges() returning %@
BADatabaseClearChangesForToken()
BADatabaseBeginMergingChanges()
BADatabaseFinishMergingChanges()
BADatabaseCreate()
Item was merged with %{private}@
WebBookmarks could not start a deferred transaction; sleeping and trying again later
WebBookmarks still could not start a deferred transaction; sleeping longer
WebBookmarks could not start a deferred transaction; bailing. Error was: %{public}s
WebBookmarks could not start a deferred transaction; bailing. Result code was: %d
WebBookmarks could not start an immediate transaction; sleeping.
WebBookmarks could not start an immediate transaction; sleeping longer.
WebBookmarks could not start an immediate transaction; bailing. Error was: %{public}s
WebBookmarks could not start an immediate transaction; bailing. Result code was: %d
Error converting in-memory changes into plist data: %@{public}
Failed to persist in-memory bookmarks changes plist: %{public}@
Error converting plist data to dictionary: %{public}@
Persisted bookmark changes plist is corrupted.
Cannot create a Reading List item. URLs must begin with http or https.
Couldn't create bookmarks database at %{public}@
Refusing to remove corrupted bookmarks database at %{public}@: The path appears to be a directory.
Refusing to remove corrupted bookmarks database at %{public}@: The file is not named Bookmarks.db.
Removing corrupted bookmarks database %{public}@
Corrupted bookmarks saved as %{public}@
Also removed the journal file %{public}@.
Failed to remove the journal file at %{public}@.
Could not remove bookmarks database %{public}@
Still could not open bookmarks database: %{public}@
Could not open bookmarks database: %{public}@
Skipping integrity check because database is busy or locked (sqlite code = %d)
sqlite3_prepare_v2 failed for integrity_check with error code %d
sqlite3_step failed for integrity_check with error code %d
sqlite integrity_check returned a NULL pointer
Unable to initialize WebBookmarkCollection. Nil was returned from +initSafariBookmarkCollectionCheckingIntegrity:
Starting to migrate and cleanup Reading List archives
Failed to migrate Reading List archives; couldn't reset record status.
Failed to migrate Reading List archives; couldn't update record status to "pending" (error code = %d)
Failed to remove Reading List archive directory %{public}@: %{public}@
Failed to get list of archive directories: %{public}@
Failed to remove Reading List archive directory with UUID %{public}@: %{public}@
Failed to remove reading list archive at path %{public}@: %{public}@
Migrating Reading List web filter status
Starting to mark all Reading List items as allowed by Web Content Filter
Finished marking all Reading List items as allowed by Web Content Filter
Failed to mark all Reading List items as allowed by Web Content Filter with result code: %i
Failed to save bookmark with UUID %{public}@: %{public}@
Failed to save bookmark %{public}@: Write transation isn't valid
Bookmarks database appears to have skipped migration steps. Rerunning migration.
Warning: The web bookmarks database has a greater version number than expected. Restoring a database from a newer version is not supported.
Couldn't get current version of bookmarks database.
Clearing all DAV sync data, likely because the user is logging out
Refusing to save a bookmark with no address.
Crashing since we can't save a bookmark with no address. Please file a bug.
Failed to save bookmark %{public}@: Invalid parentID %d
%{public}@ Please file a bug citing the following caller:
Error reading bookmark attributes: %{public}@
Bookmarks failed to begin sync transaction with result code: %i. SQL Error: %{public}s
Bookmarks failed to begin sync transaction with result code: %i
%{public}@
Failed to open bookmarks sync lock file at: %{public}s
Error reading bookmark extra attributes: %{public}@
Error reading bookmark local attributes: %{public}@
Could not archive: %{private}@ to path: %{public}@: %{public}@
Could not remove sym link: %{public}@: %{public}@
Could not create sym link from %{public}@ to %{public}@: %{public}@
Could not create Directory for Reading List item archives: %{public}@
Offline Reading List: Overwriting existing archive for bookmark UUID %{public}@.
Could not create hard link for quicklook content: %{public}@
Error calculating directory size getting directory subpaths for offline reading list item at path: %{public}@
Failed to delete %{public}@: %{public}@
Deleted %{public}@ as a result of deleting the bookmark
WBDatabaseLockAcquisitor: releasing database lock
WBDatabaseLockAcquisitor: successfully acquired database lock
WBDatabaseLockAcquisitor: failed to acquire database lock
WebBookmarksXPCConnection: No handler registered for the message %{public}s.
N12WebBookmarks20BookmarkSQLStatementE
N12WebBookmarks22BookmarkSQLTransactionE
N12WebBookmarks26BookmarkSQLReadTransactionE
N12WebBookmarks27BookmarkSQLWriteTransactionE
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
