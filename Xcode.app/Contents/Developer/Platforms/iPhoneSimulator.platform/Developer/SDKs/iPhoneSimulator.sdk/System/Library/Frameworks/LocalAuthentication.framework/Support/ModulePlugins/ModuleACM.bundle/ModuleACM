initWithContextOwner:
stringWithFormat:
sharedInstance
contextOwner
dealloc
objectForKey:
_isBiometricOnlyPolicy:
code
deviceHasBiometryWithError:
errorWithCode:message:
_acmPolicyForPolicy:
numberWithInteger:
parameterErrorWithMessage:
createInternalInfoWithPolicy:policyOptions:originator:
_handleAcmRequirement:policy:constraintData:internalInfo:uiDelegate:originator:reply:
error:hasCode:
array
boolValue
arrayByAddingObject:
enumerateKeysAndObjectsUsingBlock:
dictionaryWithObject:forKey:
objectForKeyedSubscript:
enrolledFingersHash:
setObject:forKey:
userInfo
dictionaryByMerging:with:
errorWithCode:userInfo:
alloc
initWithACMContext:cachedExternalizationDelegate:
event:params:reply:
finishedAuthenticationForPolicy:constraintData:internalInfo:uiDelegate:originator:availabilityEvents:result:error:reply:
authenticateForPolicy:constraintData:internalInfo:uiDelegate:originator:mechanism:reply:
mechanismForACMRequirement:acmContextRecord:policy:internalInfo:uiDelegate:originator:reply:
setResultInfo:
class
isKindOfClass:
integerValue
processId
checkEntitlement:
intValue
callerDisplayNameWithPid:bundleId:
count
evaluateACL:operation:options:uiDelegate:originator:callerName:callerBundleId:reply:
_decodeOperation:
isEqualToString:
_validateACL:evaluateOperation:options:uiDelegate:originator:callerName:callerBundleId:reply:
_evaluateACL:operation:options:uiDelegate:originator:callerName:callerBundleId:reply:
_validatePassword:options:uiDelegate:originator:callerName:callerBundleId:reply:
_evaluateOperation:aclRef:options:uiDelegate:originator:validate:callerName:callerBundleId:reply:
dictionary
errorNotSupported
member:
keyEnumerator
_validateOperations:aclRef:evaluateOperation:options:uiDelegate:originator:currentResult:reply:
nextObject
stringWithUTF8String:
dictionaryWithObjects:forKeys:count:
dictionaryByMergingWith:
_validateOperation:aclRef:evaluateOperation:options:uiDelegate:originator:reply:
isEqual:
internalErrorWithMessage:
dataUsingEncoding:
initWithACMContext:contextOwner:
_acmParamForPolicy:userId:secondPass:paramCount:
evaluatePolicy:options:uiDelegate:originator:reply:
evaluateACL:operation:options:uiDelegate:originator:reply:
_fillConstraint:options:userId:error:
_isSimpleACLConstraint:
isCredentialSet:originator:reply:
setCredential:type:originator:reply:
checkCredentialSatisfied:policy:reply:
externalizedContextWithReply:
resetWithOriginator:reply:
acmContext
_applicationPasswordWasSet
_applicationPasswordCounter
_userId
_userIdParam
_acmContext
init
initWithProcessId:invalidationBlock:
.cxx_destruct
invalidationBlock
_pid
_invalidationBlock
initWithMechanismManager:
weakToStrongObjectsMapTable
_trackPlugin:processId:invalidationBlock:
allObjects
_cleanupMostGreedyProcess
numberWithInt:
addObject:
arrayWithObject:
numberWithUnsignedInteger:
enumerateObjectsUsingBlock:
contextPluginWithExternalizedContext:processId:invalidationBlock:reply:
_activePlugins
_mechanismForACMRequirement:acmContextRecord:policy:internalInfo:uiDelegate:originator:reply:
_loadACMMechanismFromPlugin:acmContextRecord:internalInfo:error:
arrayWithObjects:count:
mechanismWithK:ofSubmechanisms:serial:
bestEffortAvailableMechanismForPurpose:error:
eventIdentifier
availabilityEventsForPurpose:
_restrictedNonUiMechanism:availabilityEvents:policy:purpose:internalInfo:
_buildUiForMechanism:policy:internalInfo:uiDelegate:originator:error:
loadMechanism:initParams:className:error:
initWithNonUiMechanism:eventProcessing:policy:internalInfo:
requiresUiWithEventProcessing:
findMechanismWithEventIdentifier:
isBiometryOnForStockholm:
numberWithBool:
mechanismForApplicationPasswordMode:acmContextRecord:options:internalInfo:uiDelegate:originator:reply:
%s %@ on %@
-[ContextPluginACM dealloc]
ContextACM
ACMContextDelete failed: %d
DeviceOwnerAuthentication
TouchIdEnrollment
DeviceOwnerAuthenticationWithBiometrics
HumanPresence
UserIdentificationWithBiometrics
Stockholm
Oslo
OsloPIN
Result
No fingers are enrolled with Touch ID.
v24@?0@"NSDictionary"8@"NSError"16
Can't find ACM policy for: %@
v32@?0@"NSNumber"8@"NSNumber"16^B24
UserId
v32@?0@"NSDictionary"8@"NSDictionary"16@"NSError"24
v32@?0@"MechanismBase"8@"NSDictionary"16@"NSError"24
com.apple.private.LocalAuthentication.CallerPID
com.apple.private.LocalAuthentication.CallerName
Invalid operation: %@
Invalid ACL: '%@'
v20@?0B8@"NSError"12
@"NSDictionary"16@?0@"NSError"8
-[ContextPluginACM _evaluateOperation:aclRef:options:uiDelegate:originator:validate:callerName:callerBundleId:reply:]
v8@?0
v32@?0@8@16^B24
resu
-[ContextPluginACM _validateOperation:aclRef:evaluateOperation:options:uiDelegate:originator:reply:]
-[ContextPluginACM isCredentialSet:originator:reply:]
-[ContextPluginACM setCredential:type:originator:reply:]
%@, %@
-[ContextPluginACM checkCredentialSatisfied:policy:reply:]
ACMContextVerifyPolicyEx failed: %d
Policy not satisfied.
v24@?0i8B12r^{__ACMRequirement=}16
-[ContextPluginACM externalizedContextWithReply:]
simulated ACM context
-[ContextPluginACM resetWithOriginator:reply:]
acmContext
T^{__ACMHandle=},R,N,V_acmContext
Ti,R,N,V_pid
invalidationBlock
T@?,R,N,V_invalidationBlock
-[ModuleACM _cleanupMostGreedyProcess]
ModuleACM
greediest pid: %@ holds %@ contexts which will be invalidated
v32@?0@8Q16^B24
%p, %@, %@, %@
-[MechanismManagerACM _mechanismForACMRequirement:acmContextRecord:policy:internalInfo:uiDelegate:originator:reply:]
MechanismManagerACM
nonUiMechanism: %@
availableNonUiMechanism: %@
Options
restrictedNonUiMechanism: %@
uiMechanism: %@
PasswordMode
AcmContextRecord
MechanismPassword
Unexpected mechanism class: %@
acmh
salt
iter
ckon
cbio
pcma
pkofn
dacl
odel
osgn
oskc
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_Sim/AppleCredentialManager-125.50.2/common/Helpers.c
cred
(data && dataLength) || (!data && !dataLength)
(credential->type == kACMCredentialTypePasscodeValidated) || (credential->type == kACMCredentialTypeTouchIdMatched)
dataLength <= 64
buffer
dataLength == sizeof(uint32_t)
credential->type == kACMCredentialTypePasscodeValidated
dataLength == sizeof(int32_t)
credential->type == kACMCredentialTypePassphraseEntered
dataLength <= 128
dataLength == sizeof(ACMPassphrasePurpose)
credential->type == kACMCredentialTypeTouchIdMatched
dataLength == 16
dataLength == 32
dataLength == sizeof(uid_t)
credential->type == kACMCredentialTypeUserOutputDisplayed
dataLength == 24
data
length
dataLength
requirement->type == kACMCredentialTypePassphraseEntered
requirement->type == kACMRequirementTypeTouchIdMatched
requirement->type == kACMRequirementTypeKofN
requirement->type == kACMRequirementTypeUserOutputDisplayed
handle
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_Sim/AppleCredentialManager-125.50.2/common/utils.c
outSize
policyLength <= 128
!param.parameterDataLength
param.parameterDataLength == sizeof(int32_t)
param.parameterDataLength && (param.parameterDataLength <= 64)
param.parameterDataLength && (param.parameterDataLength <= 1000)
param.parameterDataLength && param.parameterDataLength == sizeof(uid_t)
parametersLength + param.parameterDataLength > parametersLength
sizeof(ACMHandle) + policyLength + 1 + sizeof(uint8_t) + sizeof(uint32_t) + sizeof(uint32_t) + parametersLength > parametersLength
(parameters && parametersCount) || (!parameters && !parametersCount)
parametersCount <= 10
outBuffer
*outSize >= requiredSize
preflight
maxGlobalCredentialAge
parameters
parametersCount
(size - offset) >= sizeof(ACMHandle)
(policyLength <= 128)
(size - offset) >= (policyLength + 1)
policy
(size - offset) >= sizeof(uint8_t)
(size - offset) >= sizeof(uint32_t)
paramsCount <= 10
params
(size - offset) >= sizeof(ACMParameterType) + sizeof(uint32_t)
(size - offset) >= params[i].parameterDataLength
!params[i].parameterDataLength
params[i].parameterDataLength == sizeof(int32_t)
params[i].parameterDataLength && (params[i].parameterDataLength <= 64)
params[i].parameterDataLength && (params[i].parameterDataLength <= 1000)
params[i].parameterDataLength && params[i].parameterDataLength == sizeof(uid_t)
params[i].parameterData
aclConstraint
aclConstraintLength
constraint
(size - offset) >= constraintLength
sizeof(ACMHandle) + sizeof(uint64_t) + sizeof(uint32_t) + operationLength + sizeof(uint32_t) + sizeof(uint32_t) > operationLength && sizeof(ACMHandle) + sizeof(uint64_t) + aclLength + sizeof(uint32_t) + operationLength + sizeof(uint32_t) + sizeof(uint32_t) > aclLength && sizeof(ACMHandle) + sizeof(uint64_t) + aclLength + sizeof(uint32_t) + operationLength + sizeof(uint32_t) + sizeof(uint32_t) + parametersLength > parametersLength
aclLength
operation
operationLength
tmpAcl
(size - offset) >= tmpAclLength
(size - offset) >= opLen
bufferSize
reqLen <= *bufferSize
size >= sizeof(ACMRequirement)
consumedBytes
size >= reqSize
reqSize > offset || ((ACMRequirementDataAnd *)(inReq->data))->subrequirementsCount == 0
reqSize > offset || ((ACMRequirementDataKofN *)(inReq->data))->subrequirementsCount == 0
credLen <= *outSize
size >= sizeof(ACMCredential)
dataLength == 0
dataLength == sizeof(ACMCredentialDataPassphraseEntered)
dataLength == sizeof(ACMCredentialDataUserOutputDisplayed)
dataLength >= __builtin_offsetof(ACMCredentialDataTouchIdMatched, keybagUuid)
dataLength >= __builtin_offsetof(ACMCredentialDataPasscodeValidated, keybagUuid)
size >= credSize
size >= (sizeof(ACMCredential) + __builtin_offsetof(ACMCredentialDataTouchIdMatched, keybagUuid))
(size - offset) >= touchIdData->keybagUuidLength
touchIdData->keybagUuidLength <= 64
touchIdData->keybagUuid
size >= (sizeof(ACMCredential) + __builtin_offsetof(ACMCredentialDataPasscodeValidated, keybagUuid))
(size - offset) >= passcodeData->keybagUuidLength
passcodeData->keybagUuidLength <= 64
passcodeData->keybagUuid
copy
passcodeDataCopy->keybagUuid
touchIdDataCopy->keybagUuid
credential1
credential2
equal
!data1->keybagUuidLength || (data1->keybagUuid && data2->keybagUuid)
handle || scope == kACMScopeGlobal
size >= sizeof(ACMHandle) + sizeof(ACMCredential) + sizeof(ACMScope)
scope
size - offset >= sizeof(ACMScope)
credentialList || (count == 0)
credentialList[i]
credentialList
count
credCount <= 1000
list
property
(size - offset) >= sizeof(ACMContextProperty)
AssertMacros: %s, %s file: %s, line: %d
externalForm
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_Sim/AppleCredentialManager-125.50.2/SCred/ACMLib.c
dataLength == sizeof(ACMHandle)
err == 0 
context
processExternalForm
context || scope == kACMScopeGlobal
credential
policyId
processRequirement
aclConstraint && aclConstraintLength
acl && aclLength
processConstraintCharacteristics
processProperty
requirement
processSubrequirement
%{public}s: %{public}@
determining authentication mechanisms
ContextPluginACM
PluginInfo
ModuleACM
MechanismManagerACM
@28@0:8^{__ACMHandle=}16B24
v16@0:8
*24@0:8q16
^{?=I^vI}40@0:8q16I24B28^I32
B24@0:8q16
v56@0:8q16@24@32@40@?48
v72@0:8r^{__ACMRequirement=}16q24@32@40@48@56@?64
v88@0:8q16@24@32@40@48@56@64@72@?80
@24@0:8@16
v64@0:8@16@24@32@40@48@?56
v80@0:8@16@24@32@40@48@56@64@?72
@48@0:8@16@24@32^@40
v84@0:8@16@24@32@40@48B56@60@68@?76
B24@0:8@16
v72@0:8@16@24@32@40@48@56@?64
B72@0:8q16@24@32@40@48@56@?64
v40@0:8q16@24@?32
v48@0:8@16q24@32@?40
v40@0:8q16q24@?32
v24@0:8@?16
v32@0:8@16@?24
^{__ACMHandle=}16@0:8
{?="parameterType"I"parameterData"^v"parameterDataLength"I}
^{__ACMHandle=}
@28@0:8i16@?20
i16@0:8
@?16@0:8
@16@0:8
v44@0:8@16i24@?28@?36
v36@0:8@16i24@?28
@"NSMapTable"
v72@0:8r^{__ACMRequirement=}16@24q32@40@48@56@?64
v72@0:8q16@24@32@40@48@56@?64
@64@0:8@16q24@32@40@48^@56
@56@0:8@16^@24q32q40@48
@48@0:8q16@24@32^@40
@(#)PROGRAM:ModuleACM  PROJECT:CoreAuthentication-240.50.24
