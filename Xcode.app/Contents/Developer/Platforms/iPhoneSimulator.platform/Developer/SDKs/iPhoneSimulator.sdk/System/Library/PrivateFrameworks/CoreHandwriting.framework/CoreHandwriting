=17TriangleRegressor
9Regressor
10CHTriangle
26CHRSketchRecognitionResult
6CHStar
MbP?
@UUUUUU
E6MatrixIdE
&@333333
?fffff
?333333
MbP?
15CHManhattanLine
6CHLine
9SymbolMap
12CHChatBubble
19ChatBubbleRegressor
?333333
?333333
?ffffff
?6MatrixIfE
9CHEllipse
?15CHOutlinedArrow
12CHBasicShape
ffffff
18RectangleRegressor
11CHRectangle
NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
UUUUUU
?UUUUUU
14CHStraightLine
12CHBezierLine
@333333
?UUUUUU
15CHNeuralNetwork
28CHNeuralNetworkFloatingPoint
25CHNeuralNetworkFixedPoint
NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
6MatrixIsE
10MatrixMMapIsE
10MatrixMMapIfE
6MatrixIiE
10CHPentagon
bounds
pointCountForStrokeIndex:
pointForStrokeIndex:pointIndex:
retain
copy
release
alloc
init
addPoint:
cStringUsingEncoding:
pointCount
strokeCount
string
stringWithFormat:
appendString:
drawing
setDrawing:
autorelease
class
allocWithZone:
copyWithZone:
initWithContentsOfFile:
endStroke
clear
isPrefixForDrawing:
matchingStrokePrefixRangeForDrawing:
xyRepresentation
bitmapRepresentationForSize:
bitmapRepresentationForSize:drawingAlgorithm:
orientationRepresentationForSampling:convolutionWidth:
sortedDrawing
strokeIndicesSortedByMinXCoordinate
setLineHeight:
.cxx_destruct
.cxx_construct
_drawing
length
enumerateSubstringsInRange:options:usingBlock:
score
description
initWithScore:
setScore:
_score
wordIDs
count
wordRanges
countByEnumeratingWithState:objects:count:
unsignedIntValue
rangeValue
dealloc
initWithString:score:rare:wordRanges:wordIDs:
mecabraCandidate
rare
_rare
_string
_wordRanges
_wordIDs
initWithString:score:rotation:
rotation
_rotation
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:pathPoints:
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:
startEndpointType
endEndpointType
startLocation
endLocation
midpointLocation
controlPoint
pathPoints
cornerLine
_cornerLine
_startEndpointType
_endEndpointType
_pathPoints
_startLocation
_endLocation
_midpointLocation
_controlPoint
initWithString:score:rotation:center:size:controlPointLocation:
center
size
_center
_size
initWithString:score:rotation:upperLeftPoint:upperRightPoint:lowerLeftPoint:lowerRightPoint:
upperLeftPoint
upperRightPoint
lowerLeftPoint
lowerRightPoint
_upperLeftPoint
_upperRightPoint
_lowerLeftPoint
_lowerRightPoint
initWithString:score:rotation:vertex1:vertex2:vertex3:
vertex1
vertex2
vertex3
_vertex1
_vertex2
_vertex3
initWithString:score:rotation:center:size:
initWithString:score:rotation:center:size:stemLocation:stemWidth:
stemLocation
stemWidth
_stemWidth
_stemLocation
array
numberWithInt:
arrayWithObjects:count:
stringByAppendingString:
valueWithRange:
addObject:
indexSet
loadEngineModel
dictionaryWithObjects:forKeys:count:
logCandidateIfAppropriate:
initWithType:mode:learningDictionaryURL:
releaseLMResources
numberWithInteger:
objectForKey:
addCharactersInRange:
sketchDescriptionForCode:
sketchCodeForDescription:
integerValue
manhattanLineCandidateResultForDrawing:candidate:rejectionResult:
valueWithPoint:
insertObject:atIndex:
chatBubbleCandidateResultForDrawing:candidate:
ellipseCandidateResultForDrawing:candidate:
rectangleCandidateResultForDrawing:candidate:
triangleCandidateResultForDrawing:candidate:
starCandidateResultForDrawing:candidate:
lineCandidateResultForDrawing:candidate:rejectionResult:
pentagonCandidateResultForDrawing:candidate:
outlineArrowCandidateResultForDrawing:candidate:
objectAtIndex:
exchangeObjectAtIndex:withObjectAtIndex:
rescoreCandidatesWithLangaugeModel:history:
applyTransliterationAndSyntheticCandidates:
stringWithCharacters:length:
applySentenceTransliterationCandidates:codesLen:codesMax:
stringWithString:
stringByReplacingOccurrencesOfString:withString:
containsObject:
setCachedDrawing:
bestNetworkPaths:count:mecabraIDs:
setSavedDrawing:
setSaveDrawingUntilNextCandidateAccepted:
setSavedTop1CandidateString:
removeAllIndexes
defaultPunctuationResultsForRecognitionType:
addIndexesInRange:
recognitionResultsForSketchDrawing:options:
recognitionResultsForSingleCharacterDrawing:options:
recognitionResultsForMultipleCharacterDrawing:sortedStrokeIndices:network:options:ch:shouldCancel:
addIndex:
firstObject
recognitionResultsForDrawing:options:shouldCancel:
updateAddressBookLexicon:
updateUserDictionaryLexicon:
candidatesCleared
candidateAccepted:
completionsForCandidate:prefix:option:
completionsForCandidate:candidateContext:prefix:option:
strokeIndexesForLastCharacter
initWithType:mode:
supportedCharacterSet
supportedStrings
characterSetForStrings:
endpointsForDrawing:startLocation:endLocation:
recognitionResultsForDrawing:options:
setMaxRecognitionResultCount:
setRecognitionType:
setRecognitionMode:
setActiveCharacterSet:
maxRecognitionResultCount
recognitionType
recognitionMode
activeCharacterSet
engine
setEngine:
freeformEngine
setFreeformEngine:
recognitionQueue
setRecognitionQueue:
minimumDrawingSize
radicalClusterFST
setRadicalClusterFST:
formatGrammarFST
setFormatGrammarFST:
languageModel
setLanguageModel:
mecabra
setMecabra:
mecabraStaticLexicon
setMecabraStaticLexicon:
mecabraDynamicLexicon
setMecabraDynamicLexicon:
learningDictionaryURL
setLearningDictionaryURL:
savedDrawing
savedTop1CandidateString
saveDrawingUntilNextCandidateAccepted
cachedDrawing
cachedResults
setCachedResults:
scVariantMap
setScVariantMap:
tcVariantMap
setTcVariantMap:
icuTransliterator
setIcuTransliterator:
lastCharacterStrokeCount
setLastCharacterStrokeCount:
lastCharacterStrokeIndexes
setLastCharacterStrokeIndexes:
_saveDrawingUntilNextCandidateAccepted
_recognitionType
_recognitionMode
_maxRecognitionResultCount
_activeCharacterSet
_engine
_freeformEngine
_recognitionQueue
_radicalClusterFST
_formatGrammarFST
_languageModel
_mecabra
_mecabraStaticLexicon
_mecabraDynamicLexicon
_learningDictionaryURL
_savedDrawing
_savedTop1CandidateString
_cachedDrawing
_scVariantMap
_tcVariantMap
_icuTransliterator
_lastCharacterStrokeCount
_lastCharacterStrokeIndexes
_minimumDrawingSize
_cachedResults
characterAtIndex:
nextFIFO
emitPoint:
flush
initWithFIFO:
setNextFIFO:
_nextFIFO
strokes
setStrokes:
_strokes
initWithFIFO:width:spacing:
emitAveragedPoint
initWithFIFO:width:
width
setWidth:
spacing
setSpacing:
prevPoints
setPrevPoints:
_spacing
_width
_prevPoints
setUnitScale:
path
setPath:
view
lineWidth
setNeedsDisplayInRect:
interpolateFromPoint:toPoint:controlPoint:time:
initWithFIFO:strokeView:
setUnitScaleForViewSize:normalizedSize:contentScaleFactor:
unitScale
emitInterpolatedPoints
setEmitInterpolatedPoints:
emissionHandler
setEmissionHandler:
setLineWidth:
points
setPoints:
controlPoints
setControlPoints:
lastPoint
setLastPoint:
setView:
_emitInterpolatedPoints
_unitScale
_emissionHandler
_path
_lineWidth
_view
_lastPoint
_points
_controlPoints
intValue
isEqualToString:
defaultCStringEncoding
stringWithCString:encoding:
dataWithContentsOfFile:
JSONObjectWithData:options:error:
UTF8String
characterIsMember:
CHTriangle
CHStar
%d %d
%d %d %d
drawing
T{CJKChar={vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}QI{Matrix<double>=^^?^dII}d},N,V_drawing
CHRecognitionOptionTextBefore
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
class: %@ score: %3.5f string: %@
score
Td,V_score
rare
TB,R,V_rare
string
T@"NSString",R,V_string
wordRanges
T@"NSArray",R,V_wordRanges
wordIDs
T@"NSArray",R,V_wordIDs
rotation
Td,R,V_rotation
startEndpointType
Ti,R,V_startEndpointType
endEndpointType
Ti,R,V_endEndpointType
startLocation
T{CGPoint=dd},R,V_startLocation
endLocation
T{CGPoint=dd},R,V_endLocation
midpointLocation
T{CGPoint=dd},R,V_midpointLocation
controlPoint
T{CGPoint=dd},R,V_controlPoint
pathPoints
T@"NSArray",R,V_pathPoints
cornerLine
TB,R,V_cornerLine
center
T{CGPoint=dd},R,V_center
size
T{CGSize=dd},R,V_size
upperLeftPoint
T{CGPoint=dd},R,V_upperLeftPoint
upperRightPoint
T{CGPoint=dd},R,V_upperRightPoint
lowerLeftPoint
T{CGPoint=dd},R,V_lowerLeftPoint
lowerRightPoint
T{CGPoint=dd},R,V_lowerRightPoint
vertex1
T{CGPoint=dd},R,V_vertex1
vertex2
T{CGPoint=dd},R,V_vertex2
vertex3
T{CGPoint=dd},R,V_vertex3
stemLocation
T{CGPoint=dd},R,V_stemLocation
stemWidth
Td,R,V_stemWidth
Freeform
model_zh.bin
zh-Hans
R.bin
G.bin
zh-Hant
model_vo.bin
model_is.bin
model_gd.bin
v8@?0
Oval
Line
Outline Arrow
Triangle
Rectangle
Pentagon
Manhattan Line
Chat Bubble
Star
Heart
Cloud
Scribble
com.apple.CoreHandwriting
HWRTriangleAlignToAxisThreshold
HWRTriangleIsoscelesLengthRatioThreshold
HWRTriangleEquilateralLengthRatioThreshold
HWROvalFitToCircleRadiiRatioThreshold
HWROvalAlignToIncrementsOf
HWRRectangleFitToSquareLengthRatioThreshold
HWRRectangleAlignToIncrementsOf
HWROutlinedArrowAlignToIncrementsOf
HWRLineAlignToAxisThreshold
HWRLineLengthRatioThreshold
synthetics_zh-hans.txt
synthetics_zh-hant.txt
engine
T^{CHNeuralNetwork=^^?i*Q^IIIIII},N,V_engine
freeformEngine
T^{CHNeuralNetwork=^^?i*Q^IIIIII},N,V_freeformEngine
recognitionQueue
T@"NSObject<OS_dispatch_queue>",N,V_recognitionQueue
minimumDrawingSize
T{CGSize=dd},R,N,V_minimumDrawingSize
radicalClusterFST
T^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}},N,V_radicalClusterFST
formatGrammarFST
T^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}},N,V_formatGrammarFST
languageModel
T^v,N,V_languageModel
mecabra
T^{__Mecabra=},N,V_mecabra
mecabraStaticLexicon
T^v,N,V_mecabraStaticLexicon
mecabraDynamicLexicon
T^v,N,V_mecabraDynamicLexicon
learningDictionaryURL
T@"NSURL",&,N,V_learningDictionaryURL
savedDrawing
T@"CHDrawing",C,N,V_savedDrawing
savedTop1CandidateString
T@"NSString",C,N,V_savedTop1CandidateString
saveDrawingUntilNextCandidateAccepted
TB,N,V_saveDrawingUntilNextCandidateAccepted
cachedDrawing
T@"CHDrawing",C,N,V_cachedDrawing
cachedResults
T{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >={__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >=Q}}},N,V_cachedResults
scVariantMap
T^{VariantMap=^i^i^ii^iQ},N,V_scVariantMap
tcVariantMap
T^{VariantMap=^i^i^ii^iQ},N,V_tcVariantMap
icuTransliterator
T^^v,N,V_icuTransliterator
lastCharacterStrokeCount
TQ,N,V_lastCharacterStrokeCount
lastCharacterStrokeIndexes
T@"NSMutableIndexSet",N,V_lastCharacterStrokeIndexes
maxRecognitionResultCount
TQ,N,V_maxRecognitionResultCount
recognitionType
Ti,N,V_recognitionType
recognitionMode
Ti,N,V_recognitionMode
activeCharacterSet
T@"NSCharacterSet",&,N,V_activeCharacterSet
CHChatBubble
CHManhattanLine
without spatial boundary 
0.5 
greedy-on-orgseq
greedy-on-0.3seq
greedy-on-spat-seq
greedy-lattice-on-spat-seq
detailed: 
from non-linear
CHEllipse
nextFIFO
T@"CHPointFIFO",&,N,V_nextFIFO
strokes
T@"CHDrawing",N,V_strokes
T@"CHDrawing",N,V_drawing
prevPoints
T{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}},N,V_prevPoints
width
TQ,N,V_width
spacing
Tf,N,V_spacing
points
T{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}},N,V_points
controlPoints
T{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}},N,V_controlPoints
lastPoint
T,N,V_lastPoint
view
T@"UIView",&,N,V_view
unitScale
Tf,N,V_unitScale
emitInterpolatedPoints
TB,N,V_emitInterpolatedPoints
emissionHandler
T@?,C,V_emissionHandler
path
T^{CGPath=},N,V_path
lineWidth
Td,N,V_lineWidth
0x%x
CHOutlinedArrow
CHRectangle
CHStraightLine
CHBezierLine
<div style="clear:both;margin:auto;font-size:250%%;" >
<p>WARNING : NOTHING WAS SAVED : YOU MUST CLICK ON THE FOLLOWING LINK !</p>
<p><a href="#" onclick="SendMail(%d);">Send via email to Antoine !</a></p>
</div>
<p>For information, here are the files you flagged:</p>
<p id="po-term%d" style="margin:0;" \>
</body>
</html>
CHPentagon
Unsupported Network Version %s
    max mlp %f
    min mlp %f
    max mlp bias %f
    min mlp bias %f
    min bit count requirement %d
    fixed bit count: %d
        sign bits:       %d
        fractional bits: %d
        integer bits:    %d
error: min mlp bits needed %i is less than allocated %li
error: min bias bits needed %i is less than allocated %li
    max conv %f
    min conv %f
input-width
input-height
type
ConvolutionMaxPool
kernel-width
kernel-height
kernel-count
pool-width
pool-height
activation-function
tanh-lecun
rectified-linear
output-size
    padding hidden count to %i
Error: unable to mmap resource %s
Unsupported Model Version %s
Unsupported Neural Network Encoding %s
Reading MLP Layer Weights...
Reading Convolution Layer Weights...
CHDrawing
NSCopying
CHRecognitionResult
CHTextRecognitionResult
CHSketchRecognitionResult
CHLineSketchRecognitionResult
CHManhattanLineSketchRecognitionResult
CHOutlinedArrowSketchRecognitionResult
CHRectangleSketchRecognitionResult
CHTriangleRecognitionResult
CHEllipseRecognitionResult
CHChatBubbleRecognitionResult
CHStarRecognitionResult
CHPentagonRecognitionResult
CHScribbleRecognitionResult
CHHeartRecognitionResult
CHCloudRecognitionResult
CHFreeformRecognitionResult
CHRecognizer
CHPointFIFO
CHPointStrokeFIFO
CHBoxcarFilterPointFIFO
CHQuadCurvePointFIFO
@24@0:8^{_NSZone=}16
@24@0:8@16
v528@0:8{CJKChar={vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}QI{Matrix<double>=^^?^dII}d}16
Q16@0:8
Q24@0:8Q16
{CGPoint=dd}32@0:8Q16Q24
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v32@0:8{CGPoint=dd}16
v16@0:8
B24@0:8@16
{_NSRange=QQ}24@0:8@16
@16@0:8
{Matrix<float>=^^?^fII}32@0:8{CGSize=dd}16
{Matrix<float>=^^?^fII}36@0:8{CGSize=dd}16i32
{Matrix<float>=^^?^fII}32@0:8Q16Q24
{vector<unsigned long, std::__1::allocator<unsigned long> >=^Q^Q{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^Q}}16@0:8
v24@0:8d16
{CJKChar={vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}QI{Matrix<double>=^^?^dII}d}16@0:8
{CJKChar="strokes"{vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >="__begin_"^{vector<double, std::__1::allocator<double> >}"__end_"^{vector<double, std::__1::allocator<double> >}"__end_cap_"{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >="__first_"^{vector<double, std::__1::allocator<double> >}}}"currentStrokeIndex"Q"mSize"I"bitmap"{Matrix<double>="_vptr$Matrix"^^?"_data"^d"_w"I"_h"I}"lineHeight"d}
@24@0:8d16
d16@0:8
@52@0:8@16d24B32@36@44
B16@0:8
@"NSString"
@"NSArray"
@40@0:8@16d24d32
@120@0:8@16d24d32{CGPoint=dd}40i56{CGPoint=dd}60i76{CGPoint=dd}80{CGPoint=dd}96@112
@112@0:8@16d24d32{CGPoint=dd}40i56{CGPoint=dd}60i76{CGPoint=dd}80{CGPoint=dd}96
i16@0:8
{CGPoint=dd}16@0:8
{CGPoint="x"d"y"d}
@88@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56{CGPoint=dd}72
{CGSize=dd}16@0:8
{CGSize="width"d"height"d}
@104@0:8@16d24d32{CGPoint=dd}40{CGPoint=dd}56{CGPoint=dd}72{CGPoint=dd}88
@88@0:8@16d24d32{CGPoint=dd}40{CGPoint=dd}56{CGPoint=dd}72
@72@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56
@96@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56{CGPoint=dd}72d88
@20@0:8i16
@32@0:8i16i20@24
v24@0:8^v16
v24@0:8@16
{vector<const void *, std::__1::allocator<const void *> >=^^v^^v{__compressed_pair<const void **, std::__1::allocator<const void *> >=^^v}}40@0:8@16@24Q32
{vector<const void *, std::__1::allocator<const void *> >=^^v^^v{__compressed_pair<const void **, std::__1::allocator<const void *> >=^^v}}48@0:8@16@24@32Q40
@24@0:8i16i20
v40@0:8@16^{CGPoint=dd}24^{CGPoint=dd}32
@32@0:8@16^{CHCandidateResult=If}24
@40@0:8@16^{CHCandidateResult=If}24^@32
@32@0:8@16@24
@40@0:8^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}}16Q24^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}32
@64@0:8@16^{vector<unsigned long, std::__1::allocator<unsigned long> >=^Q^Q{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^Q}}24^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}}32@40^{Hanzi={vector<std::__1::vector<Coord, std::__1::allocator<Coord> >, std::__1::allocator<std::__1::vector<Coord, std::__1::allocator<Coord> > > >=^{vector<Coord, std::__1::allocator<Coord> >}^{vector<Coord, std::__1::allocator<Coord> >}{__compressed_pair<std::__1::vector<Coord, std::__1::allocator<Coord> > *, std::__1::allocator<std::__1::vector<Coord, std::__1::allocator<Coord> > > >=^{vector<Coord, std::__1::allocator<Coord> >}}}}48@?56
@40@0:8@16@24@?32
@32@0:8^S16i24i28
v24@0:8^{vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}^{CHCandidateResult}{__compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}}}16
v32@0:8^{vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}^{CHCandidateResult}{__compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}}}16@24
v24@0:8Q16
v20@0:8i16
^{CHNeuralNetwork=^^?i*Q^IIIIII}16@0:8
v24@0:8^{CHNeuralNetwork=^^?i*Q^IIIIII}16
^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}}16@0:8
v24@0:8^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}}16
^v16@0:8
^{__Mecabra=}16@0:8
v24@0:8^{__Mecabra=}16
v20@0:8B16
{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >={__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >=Q}}}16@0:8
v40@0:8{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >={__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >=Q}}}16
^{VariantMap=^i^i^ii^iQ}16@0:8
v24@0:8^{VariantMap=^i^i^ii^iQ}16
^^v16@0:8
v24@0:8^^v16
@"NSCharacterSet"
^{CHNeuralNetwork=^^?i*Q^IIIIII}
@"NSObject<OS_dispatch_queue>"
^{Network=II{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=Q}}}}{map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true> >=Q}}}BB[2^f]{map<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >={__tree<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > >, std::__1::less<unsigned int>, true> >=Q}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=Q}}}}
^{__Mecabra=}
@"NSURL"
@"CHDrawing"
^{VariantMap=^i^i^ii^iQ}
@"NSMutableIndexSet"
{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >="__tree_"{__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >="__first_"Q}}}
v32@0:816
@"CHPointFIFO"
@36@0:8@16Q24f32
@32@0:8@16Q24
f16@0:8
v20@0:8f16
{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}}16@0:8
v40@0:8{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}}16
{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >="__first_"^}}
68@0:8163248f64
v56@0:8{CGSize=dd}16{CGSize=dd}32d48
@?16@0:8
v24@0:8@?16
^{CGPath=}16@0:8
v24@0:8^{CGPath=}16
16@0:8
^{CGPath=}
@"UIView"
