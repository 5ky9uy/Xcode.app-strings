@(#)PROGRAM:KeyboardArbiter  PROJECT:UIKit-1
Don't call %@.
-[UIDelayedAction init]
blurredScene
lastActiveScene
com.apple.Spotlight
com.apple.UIKit.remote-keyboard
com.apple.UIKit.keyboard-arbiter
v8@?0
invalid.remote-keyboards
v16@?0@"NSDictionary"8
scene data omitted;
disabler = %@;
lastEventSource = %ld;
current state = %@;
active handle = %@;
handles = %@>
Message
error
Type
Timestamp
v16@?0@"NSArray"8
v16@?0@?<v@?@"NSArray">8
v16@?0@?<v@?@>8
Description
v16@?0@8
Active
LastActivated
FocusRequested
Suspended
Process
Invalid response
Timed out/hung
v24@?0@"<_UIKeyboardArbitrationClient>"8@?<v@?>16
Failed to connect - scheduling retry
v12@?0B8
-[_UIKeyboardArbiter runOperations:onHandler:]_block_invoke
%s Failed to access %@ remote service: %@
v16@?0@"NSError"8
-[_UIKeyboardArbiter runOperations:onHandler:]
%s Failed to create proxy for %@
HW kbd: target process %d (%{public}@) scene:%{public}@
HW kbd: no change
HW kbd: Keyboard set successfully pid:%d (%{public}@) scene:%{public}@
HW kbd: Failed to set keyboard focus pid:%d (%{public}@) scene:%{public}@
[%@] Dropping %@
[%@] _activeHandle is now %{public}@; information: %{public}@
v16@?0@"_UIKeyboardArbiterHandle"8
Client %@ attempted to connect, but no scene
[%@] Rejecting attach for %@ (currently %@)
[%@] Attaching [%@] %@
[%@] Found no clients
[%@] Found several potential clients: %@
[%@] Found expected client: %@
[%@] Detaching [%@] %@
[%@] Updating scene to %@ level %f
v16@?0@"FBSMutableSceneSettings"8
[%@] Setting suppressed %@ on %@
NO HANDLE for NIL token 
NO HANDLE for %{public}@ -- choices:%{public}@ 
[%@] started running
[%@] abnormal state - resuming handle was already active
[%@] suspended
[%@] foregrounded
[%@] no longer foreground
[%{public}@] Handler requested focus: %{public}@; steal keyboard: %{public}@
[%@] _focusRequestedHandle is now %{public}@; stole keyboard: %{public}@
_UIKeyboardArbiter.m
Handler must have a remote scene identity: %@
[%{public}@] Handler requested forced scene identity update in the client: %{public}@
v16@?0Q8
[%{public}@] No handle found for currently focused PID: %{public}d; sceneIdentity: %{public}@
[%{public}@] Handle scene identity for currently focused PID does not match last deliberation result: deliberation sceneIdentity: %{public}@; currentFocusedHandle: %{public}@
Advisor: KeyboardFocus from _activeHandleForFocusEvaluation [%@]
Advisor: No active handle. Returning nil.
Advisor: KeyboardFocus from _previouslyActiveHandle [%@]
B32@?0@"_UIKeyboardArbiterHandle"8Q16^B24
Advisor: KeyboardFocus from _recentlyActiveSceneIdentities [%@]
Advisor: KeyboardFocus from _clients [%@]
Advisor: Last resort, returning nil (FrontBoard decides)
Advisor: Scene focus update without advisor input enqueued on the main thread: generation: %lu; PID: %d; sceneIdentity: %@
Advisor: Scene focus update without advisor input: generation: %lu; PID: %d; sceneIdentity: %@
Advisor: Applying pending scene focus update from omniscient delegate: generation: %lu; PID: %d; sceneIdentity: %@
Advisor: Skipping reevaluation as there is no change. Active PID: %d, activeHandleID: %@
Advisor: Triggering reevaluation. Active PID: %d, activeHandleID: %@
Advisor: Deliberation result: %@
Advisor: Stealing keyboard for handle: %@
com.apple.TapToRadar
com.apple.appleseed.FeedbackAssistant
[%@] Received new connection [%@]
[%@] Lost connection [%@]
%@ was not invalidated before release
[%@] %@: currentKeyboard: %@; sceneIdentity: %@; pids: %@
[%@] %@ Rejecting update as the handle is currently acquiring focus and this update could lead to a loop: updated sceneIdentity: %@
[%@] %@ Clearing acquiring focus flags for update: sceneIdentity: %@
[%@] %@ sceneIdentity: %@; %i/%@/%f
[%@] %@ Rejecting update as the handle or its hosted services are not on screen: sceneIdentity: %@
[%@] Releasing: %@
[%@] Created: %@
[%@] %@ sceneIdentity: %@
Layer must exist for us to attach visibility to.
v16@?0@"<BSServiceConnectionEndpointInjectorConfiguring>"8
[%@] %@: %@
[%@] %@
[%@] %@: %i/%@
[%@] %@: %@/%i/%@
<%@: %p; PID %i: %@ <%@>%@; hosting PIDs %@; level %f; active %@ [wants %@]; suppression %i; iav %f; on screen %@>
 (suspended)
com.apple.UIKit.KeyboardManagement.message
[%@] took process assertion
[%@] could not take process assertion
[%@] requested process assertion (count=%lu)
[%@] timed out with %lu assertions remaining, disconnecting
[%@] released process assertion (count=%lu)
[%@] Disabled keyboard disablement due to invalidation
[%@] %@ <%@> %{public}@
[%{public}@] %{public}@: remoteSceneIdentity: %{public}@; handle: %{public}@; stealKeyboard: %{public}@
[%@] %@: %@ (%@)
[%@] %@: %d
FBSceneManager
Class getFBSceneManagerClass(void)_block_invoke
Unable to find class %s
void *FrontBoardLibrary(void)
/System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard
/System/Library/PrivateFrameworks/FrontBoard.framework/Contents/MacOS/FrontBoard
FBDisplayManager
Class getFBDisplayManagerClass(void)_block_invoke
com.apple.UIKit
KeyboardArbiter
com.apple.UIKit.keyboard-arbiter.debug
DisableKeyboardDebugInfo
com.apple.keyboard
Info
Debug
Error
softlink:r:path:/System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard
Failed to connect - scheduling retry
%s Failed to access %@ remote service: %@
%s Failed to create proxy for %@
HW kbd: target process %d (%{public}@) scene:%{public}@
HW kbd: no change
HW kbd: Keyboard set successfully pid:%d (%{public}@) scene:%{public}@
HW kbd: Failed to set keyboard focus pid:%d (%{public}@) scene:%{public}@
[%@] Dropping %@
[%@] _activeHandle is now %{public}@; information: %{public}@
Client %@ attempted to connect, but no scene
[%@] Rejecting attach for %@ (currently %@)
[%@] Attaching [%@] %@
[%@] Found no clients
[%@] Found several potential clients: %@
[%@] Found expected client: %@
[%@] Detaching [%@] %@
[%@] Updating scene to %@ level %f
[%@] Setting suppressed %@ on %@
NO HANDLE for NIL token 
NO HANDLE for %{public}@ -- choices:%{public}@ 
[%@] started running
[%@] abnormal state - resuming handle was already active
[%@] suspended
[%@] foregrounded
[%@] no longer foreground
[%{public}@] Handler requested focus: %{public}@; steal keyboard: %{public}@
[%@] _focusRequestedHandle is now %{public}@; stole keyboard: %{public}@
[%{public}@] Handler requested forced scene identity update in the client: %{public}@
[%{public}@] No handle found for currently focused PID: %{public}d; sceneIdentity: %{public}@
[%{public}@] Handle scene identity for currently focused PID does not match last deliberation result: deliberation sceneIdentity: %{public}@; currentFocusedHandle: %{public}@
Advisor: KeyboardFocus from _activeHandleForFocusEvaluation [%@]
Advisor: No active handle. Returning nil.
Advisor: KeyboardFocus from _previouslyActiveHandle [%@]
Advisor: KeyboardFocus from _recentlyActiveSceneIdentities [%@]
Advisor: KeyboardFocus from _clients [%@]
Advisor: Last resort, returning nil (FrontBoard decides)
Advisor: Scene focus update without advisor input enqueued on the main thread: generation: %lu; PID: %d; sceneIdentity: %@
Advisor: Scene focus update without advisor input: generation: %lu; PID: %d; sceneIdentity: %@
Advisor: Applying pending scene focus update from omniscient delegate: generation: %lu; PID: %d; sceneIdentity: %@
Advisor: Skipping reevaluation as there is no change. Active PID: %d, activeHandleID: %@
Advisor: Triggering reevaluation. Active PID: %d, activeHandleID: %@
Advisor: Deliberation result: %@
Advisor: Stealing keyboard for handle: %@
[%@] Received new connection [%@]
[%@] Lost connection [%@]
%@ was not invalidated before release
[%@] %@: currentKeyboard: %@; sceneIdentity: %@; pids: %@
[%@] %@ Rejecting update as the handle is currently acquiring focus and this update could lead to a loop: updated sceneIdentity: %@
[%@] %@ Clearing acquiring focus flags for update: sceneIdentity: %@
[%@] %@ sceneIdentity: %@; %i/%@/%f
[%@] %@ Rejecting update as the handle or its hosted services are not on screen: sceneIdentity: %@
[%@] Releasing: %@
[%@] Created: %@
[%@] %@ sceneIdentity: %@
Keyboard attaching layer before removing prior layer...
[%@] %@: %@
[%@] %@
[%@] %@: %f
[%@] %@: %i/%@
[%@] %@: %@/%i/%@
[%@] took process assertion
[%@] could not take process assertion
[%@] requested process assertion (count=%lu)
[%@] timed out with %lu assertions remaining, disconnecting
[%@] released process assertion (count=%lu)
[%@] Disabled keyboard disablement due to invalidation
[%@] %@ <%@> %{public}@
[%{public}@] %{public}@: remoteSceneIdentity: %{public}@; handle: %{public}@; stealKeyboard: %{public}@
[%@] %@: %@ (%@)
[%@] %@: %d
zPLR
zPLR
UIDelayedAction
UIHeldAction
_UIKeyboardArbiter
NSXPCListenerDelegate
NSObject
_UIKeyboardArbiterAdvisor
_UIKeyboardArbiterHandle
_UIKeyboardArbitration
_UIKeyboardChangedInformationWithManualFence
_UIKeyboardArbiterDebug
_UIKeyboardArbiterDebugEntry
_UIKeyboardArbiterDebugEntryString
_UIKeyboardArbiterDebugEntryDictionaries
stringWithUTF8String:
raise:format:
init
copy
touchWithDelay:
initWithTarget:action:userInfo:delay:mode:
invalidate
dealloc
date
dateByAddingTimeInterval:
setFireDate:
timerFired:
initWithFireDate:interval:target:selector:userInfo:repeats:
currentRunLoop
addTimer:forMode:
unschedule
isValid
cancel
initWithTarget:action:userInfo:delay:
touch
scheduled
delay
target
setTarget:
userInfo
setUserInfo:
_startDate
_canceled
.cxx_destruct
m_target
m_action
m_userInfo
m_delay
m_timer
m_canceled
m_runLoopMode
m_startDate
T@"NSDate",R,Vm_startDate
TB,R,Vm_canceled
T@,&,Vm_target
T@,&,Vm_userInfo
timeIntervalSinceDate:
hold
resume
isHolding
_holding
_holdBegan
_baseDelay
_timeBalance
arrayWithCapacity:
setOwner:
orderedSet
sceneLink
connectWithQueue:
attemptConnection
serviceName
serviceListener
initWithMachServiceName:
setDelegate:
initWithBundleIDs:states:elevatedPriority:
objectForKey:
intValue
processWithPID:foreground:suspended:
setHandler:
sharedInstance
description
mutableCopy
length
deleteCharactersInRange:
appendString:
appendFormat:
lastUpdate
_descriptionWithScene:
getDebugInfoDictionariesWithCompletionHandler:
retrieveClientDebugInformationWithCompletion:
arrayByAddingObjectsFromArray:
addAsynchronousData:
array
dictionaryWithObjects:forKeys:count:
addObject:
countByEnumeratingWithState:objects:count:
dictionary
setObject:forKey:
numberWithInt:
running
queue_getDebugInfoWithCompletion:
addEntriesFromDictionary:
runOperations:onHandler:
errorWithFormat:
createSceneWithCompletion:
connection
remoteObjectProxyWithErrorHandler:
takeProcessAssertionOnRemoteWithQueue:
releaseProcessAssertion
reevaluateFocusedSceneIdentityForKeyboardFocusWithChangeInformation:stealingKeyboardOnSuccess:
_activeHandleForFocusEvaluation
processIdentifier
remoteSceneIdentity
bundleIdentifier
infoWithFormat:
stringRepresentation
tokenForString:
sharedService
_updateCurrentKeyboardFocusToPID:sceneIdentity:
setKeyboardFocusApplicationPID:deferringToken:completion:
active
hasHostedPids
sceneLayer
contextID
setWindowContextID:sceneIdentity:windowState:withLevel:
queue_keyboardChangedWithCompletion:
containsObject:
isHostingPID:
hostForHandle:hosts:
count
removeObjectsInRange:
isKeyboardOnScreen
_cullRecentlyActiveSceneIdentities
keyboardOnScreen
hostBundleIdentifierForHandle:hosts:
setHostBundleIdentifier:
copyWithoutIAV
keyboardPosition
keyboardPositionWithIAV
setKeyboardPositionWithRemoteIAV:
setPrevActiveIdentifier:
debugWithFormat:
setLastUpdate:
_trackRecentlyActiveArbiterHandle:
isHandlerShowableWithHandler:
wantedState
level
multipleScenes
copyWithoutFence
wantsFence
queue_keyboardChanged:onComplete:
deactivating
resetAnimationFencing
scheduleWindowTimeout
captureStateForDebug
_findForHandle:deepestHandleHandler:checklist:
iavHeight
numberWithDouble:
_findForHandle:deepestHandleHandler:
allValues
doubleValue
allKeys
queue_keyboardIAVChanged:onComplete:
handlerForPID:
updateKeyboardStatus:fromHandler:
informationForKeyboardDown
handlerRequestedFocus:shouldStealKeyboard:
isAvailable
detach:
attach:
didAttachLayer
clearAcquiringFocusFlags
lastObject
checkActivation:
reevaluateSceneClientSettings
updateKeyboardSceneSettings
didDetachLayer
reevaluateHardwareKeyboardClientStealingKeyboardOnSuccess:
setPreferredLevel:
setPreferredSceneHostIdentity:
sceneFromIdentityToken:
settings
displayConfiguration
mainConfiguration
keyboardScene
bounds
setDisplayConfiguration:
setFrame:
updateSettingsWithBlock:
queue_keyboardSuppressed:withCompletion:
notifyHostedPIDsOfSuppression:active:
suppressionCount
updateSuppression:ofPID:active:
updateSceneSettings
activateHandle:
isEqualToString:
_string
updateInterestedBundleIDs:
setRunning:
removeObject:
uncacheWindowContext
cacheWindowContext
queue_keyboardTransition:event:withInfo:onComplete:
queue_sceneBecameFocused:withCompletion:
setSourceSceneIdentityString:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
requestedCorrectionOfClientSceneIdentityWhileAcquiringFocus
setRequestedCorrectionOfClientSceneIdentityWhileAcquiringFocus:
errorWithDomain:code:userInfo:
pushFence:
popFence
completeKeyboardStatusChangedFromHandler:
queue_setKeyboardDisabled:withCompletion:
queue_setLastEventSource:withCompletion:
isEqual:
reverseObjectEnumerator
indexOfObjectPassingTest:
objectAtIndex:
isMainThread
_arbiterQueue_keyboardFocusDidChangeWithoutAdvisorInputForGeneration:pid:sceneIdentity:
_applyPendingSceneFocusUpdateFromOmniscientDelegateForGeneration:
_currentFocusedHandle
keyboardArbiterAdvisor:requestedSceneFocusDeliberationForFocusedPid:
setAcquiringFocus:
handlerWithArbiter:forConnection:
setExportedObject:
setPause:
updateInterestedBundleIDs
setInvalidationHandler:
setExportedInterface:
setRemoteObjectInterface:
_setQueue:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
listener:shouldAcceptNewConnection:
preferredSceneIdentityForKeyboardFocusWithChangeInformation:
keyboardFocusDidChangeWithoutAdvisorInputToPid:sceneIdentity:
presentingKeyboardProcessIdentifier
Ti,R,N
initWithLink:
retrieveDebugInformationWithCompletion:
notifyHeightUpdated:
newClientConnected:withExpectedState:onConnected:
checkHostingState
deactivateHandle:
handleUnexpectedDeallocForHandler:
updateSceneClientSettings:
setSuppressionCount:ofPIDs:
updateSuppression:ofPIDs:active:
activateClients
handlerForBundleID:
handlerForToken:
transition:eventStage:withInfo:fromHandler:
handlerRequestedForcedClientSceneIdentityUpdate:
setKeyboardTotalDisable:withFence:fromHandler:completionHandler:
signalEventSourceChanged:fromHandler:completionHandler:
omniscientDelegate
setOmniscientDelegate:
activeHandle
focusRequestedHandle
_queue
_listener
_clients
_activeHandle
_previouslyActiveHandle
_currentFocusPID
_currentFocusSceneIdentity
_pendingFocusLock
_pendingFocusLock_generation
_pendingFocusLock_PID
_pendingFocusLock_sceneIdentity
_lastActivatedHandle
_focusRequestedHandle
_recentlyActiveSceneIdentities
_workspace
_scene
_updateCounter
_stateMonitor
_lastEventSource
_sceneLayer
_disablingHandle
_sceneLink
_omniscientDelegate
_lastUpdate
T@"_UIKeyboardChangedInformation",&,N,V_lastUpdate
T@"_UIKeyboardArbiterHandle",R,W,V_activeHandle
T@"_UIKeyboardArbiterHandle",R,W,V_focusRequestedHandle
T@"FBSSceneLayer",R
T@"<_UIKeyboardArbiterLink>",R,N,V_sceneLink
T@"<_UIKeyboardArbiterOmniscientDelegate>",W,N,V_omniscientDelegate
_xpcConnection
addObjectsFromArray:
setWithArray:
startArbitrationWithExpectedState:sceneIdentity:hostingPIDs:usingFence:withSuppression:onConnected:
addHostedPids:
updateSuspensionCountForPids:active:
prevActiveIdentifier
queue_activeProcessResignWithCompletion:
_isKeyboardOnScreen:
isAcquiringFocus
_shouldRejectSceneIdentityUpdateCorrectingClientIfNeeded:fromSelector:
_deactivateScene
initWithCAContextID:level:
_reevaluateRemoteSceneIdentity:
identityForIdentifier:
newSceneIdentityTokenForIdentity:
targetWithPid:environmentIdentifier:
setInheritingEnvironment:
grantWithNamespace:sourceEnvironment:attributes:
arrayWithObjects:count:
setAdditionalAttributes:
injectorWithConfigurator:
setWithObject:
notifyIAVHeight:
stringWithFormat:
initWithPID:flags:reason:name:withHandler:
numberWithUnsignedInt:
null
objectAtIndexedSubscript:
focusApplicationWithProcessIdentifier:sceneIdentity:stealingKeyboard:onCompletion:
retrieveDebugInformation:
retrieveMoreDebugInformationWithCompletion:
setDeactivating:
startArbitrationWithExpectedState:hostingPIDs:usingFence:withSuppression:onConnected:
setWantsFencing:
setSceneIdentity:
signalKeyboardChanged:onCompletion:
signalKeyboardChangeComplete
setWindowHostingPID:active:
notifyHostedPIDsOfSuppression:
transition:eventStage:withInfo:
applicationShouldFocusWithBundle:onCompletion:
focusApplicationWithProcessIdentifier:sceneIdentity:onCompletion:
setKeyboardTotalDisable:withFence:completionHandler:
signalEventSourceChanged:completionHandler:
setSuppressionCount:
_invalidated
_bundleIdentifier
_owner
_running
_remoteSceneIdentity
_active
_wantedState
_level
_hostedPids
_checkingShowability
_suppressionCount
_childrenSuppressionCount
_wantsFence
_deactivating
_keyboardOnScreen
_multipleScenes
_remoteKeepAliveAssertion
_remoteKeepAliveAssertionCount
_remoteKeepAliveTimerCount
_cachedContext
_endpointGrantInjector
_acquiringFocus
_requestedCorrectionOfClientSceneIdentityWhileAcquiringFocus
_prevActiveIdentifier
_connection
_iavHeight
Ti,R
T@"NSString",R,&,V_bundleIdentifier
T@"NSXPCConnection",R,V_connection
TB,V_running
T@"FBSCAContextSceneLayer",R,&,V_sceneLayer
T@"FBSSceneIdentityToken",R,&,V_remoteSceneIdentity
TB,R,V_active
TQ,R,V_wantedState
Td,R,V_level
Td,R,V_iavHeight
TB,R
Ti,V_prevActiveIdentifier
TB,R,V_wantsFence
TB,R,V_deactivating
TB,R,V_multipleScenes
Ti,V_suppressionCount
acquiringFocus
TB,N,GisAcquiringFocus,V_acquiringFocus
TB,N,V_requestedCorrectionOfClientSceneIdentityWhileAcquiringFocus
removeLastObject
animationFence
handleFailureInFunction:file:lineNumber:description:
boolValue
pause
importance
firstObject
removeObjectAtIndex:
entryWithFormat:arguments:withType:
addEntry:
entryWithDictionaries:
enumerateContents:
_importantCount
_entries
_disable
_pause
TB,N,V_pause
_timestamp
initWithFormat:arguments:
_message
_type
_dictionaries
@16@0:8
@56@0:8@16:24@32d40@48
@48@0:8@16:24@32d40
v16@0:8
v24@0:8d16
B16@0:8
d16@0:8
v24@0:8@16
@"NSTimer"
@"NSString"
@"NSDate"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@24@0:8@16
v28@0:8i16@20
i16@0:8
@"FBSSceneIdentityToken"24@0:8@"NSDictionary"16
v28@0:8i16@"FBSSceneIdentityToken"20
@20@0:8B16
v24@0:8@?16
v32@0:8@?16@24
v20@0:8B16
@32@0:8@16@24
v32@0:8@16@24
v40@0:8@16@?24@32
v32@0:8@16@?24
v40@0:8@16@24@?32
v32@0:8B16@20B28
@20@0:8i16
v28@0:8i16B20B24
v48@0:8@16Q24@32@40
v28@0:8@16B24
v44@0:8B16@20@28@?36
v40@0:8q16@24@?32
v36@0:8Q16i24@28
v24@0:8Q16
@"NSObject<OS_dispatch_queue>"
@"NSXPCListener"
@"NSMutableArray"
@"_UIKeyboardArbiterHandle"
@"FBSSceneIdentityToken"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"NSMutableOrderedSet"
@"FBSWorkspace"
@"FBSScene"
@"BKSApplicationStateMonitor"
@"FBSSceneLayer"
@"<_UIKeyboardArbiterLink>"
@"<_UIKeyboardArbiterOmniscientDelegate>"
@"_UIKeyboardChangedInformation"
v48@0:8@16@24B32i36@?40
v56@0:8@16@24@32B40i44@?48
v44@0:8I16@20Q28d36
v24@0:8i16B20
v40@0:8@16Q24@32
v36@0:8i16@20@?28
v40@0:8i16@20B28@?32
v36@0:8B16@20@?28
v32@0:8q16@?24
v24@0:8@?<v@?@"NSString">16
v24@0:8@?<v@?@"NSArray">16
v48@0:8@"_UIKeyboardChangedInformation"16@"NSArray"24B32i36@?<v@?@"_UIKeyboardChangedInformation"qB>40
v56@0:8@"_UIKeyboardChangedInformation"16@"FBSSceneIdentityToken"24@"NSArray"32B40i44@?<v@?@"_UIKeyboardChangedInformation"qB>48
v44@0:8I16@"FBSSceneIdentityToken"20Q28d36
v24@0:8@"FBSSceneIdentityToken"16
v32@0:8@"_UIKeyboardChangedInformation"16@?<v@?>24
v40@0:8@"NSString"16Q24@"NSDictionary"32
v32@0:8@"NSString"16@?<v@?B>24
v36@0:8i16@"FBSSceneIdentityToken"20@?<v@?B>28
v40@0:8i16@"FBSSceneIdentityToken"20B28@?<v@?B>32
v36@0:8B16@"BKSAnimationFenceHandle"20@?<v@?@"NSError">28
v32@0:8q16@?<v@?>24
B32@0:8@16:24
v24@0:8B16B20
B20@0:8i16
v20@0:8i16
@"_UIKeyboardArbiter"
@"FBSCAContextSceneLayer"
@"NSMutableSet"
@"BKSProcessAssertion"
@"NSArray"
@"BSServiceConnectionEndpointInjector"
@"NSXPCConnection"
v24@0:8r*16
@40@0:8@16[1{__va_list_tag=II^v^v}]24@32
