MusicEQPresetName
MusicSoundCheckEnabledSetting
com.apple.mobileipod-prefsChanged
SpeakerRouteEnabled
StageDemoMode
UserRequestedSubscriptionHidden
VolumeControlMultiplier
v8@?0
com.apple.mobileipod
PerformingBatchNMCPrefsUpdate
deviceLibraryPersistentID
syncID
globalPlaylistID
storeAdamID
formerStoreAdamIDs
socialProfileID
storeCloudID
cloudUniversalLibraryID
storeCloudAlbumID
storeRecommendationID
storePurchasedAdamID
storeSubscriptionAdamID
radioStationStringID
radioStationHash
radioStationID
contentItemID
lyricsID
vendorID
informalMediaClipID
informalStaticAssetID
v16@?0@"MPIdentifierSet<MPMutableIdentifierSet>"8
76,8194
76,8207
76,8198
76,8197
76,8195
76,8201
76,8203
%u,%u
<%@:%p name: %@, address: %@, type: %@, connected: %@>
hasSystemRoute
TB,N,V_hasSystemRoute
name
T@"NSString",R,C,N
address
type
Tq,R,N
routeType
connected
TB,R,N,GisConnected
NMCBluetoothAudioDeviceTypeUnknown
NMCBluetoothAudioDeviceTypeHeadset
NMCBluetoothAudioDeviceTypeHandsFree
NMCBluetoothAudioDeviceTypeSpeaker
NMCBluetoothAudioDeviceTypeHeadphones
NMCBluetoothAudioDeviceTypeCarStereo
NMCBluetoothAudioDeviceTypeHiFiStereo
NMCBluetoothAudioDeviceTypeA2DP
com.apple.NanoMusic.telemetry
com.apple.NanoMusic.launched
com.apple.NanoMusic.localMusicSelected
com.apple.NanoMusic.viewedAlbums
com.apple.NanoMusic.viewedArtists
com.apple.NanoMusic.viewedSongs
NMCCloudAvailabilityDidChangeNotification
v16@?0@"NMRCloudAvailabilityMessage"8
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
transferring
TB,N,GisTransferring,V_transferring
T@"NSString",R,C,N,V_name
hasSystemRoute: %@
, isPicked: %@
, isSystemSpeaker: %@
, isW1Route: %@
bluetoothDevice: %@
, isConnected: %@
<%@:%p name: %@, %@, %@>
systemRoute
T@"MPAVRoute",&,N,V_systemRoute
bluetoothDevice
T@"NMCBluetoothAudioDevice",&,N,V_bluetoothDevice
hearingDevice
T@"NMCHearingAidAudioDevice",&,N,V_hearingDevice
cachedPicked
TB,N,V_cachedPicked
picked
TB,R,N,GisPicked
systemSpeaker
TB,R,N,GisSystemSpeaker
playerResponseItem
T@"MPCPlayerResponseItem",W,N
playerResponse
T@"MPCPlayerResponse",R,N,V_playerResponse
request
T@"NMCPlaybackQueueRequest",C,N,V_request
responseHandler
T@?,C,N,V_responseHandler
playerRequest
T@"MPCPlayerRequest",&,N,V_playerRequest
T@"MPCPlayerResponse",R,N
%@:%@:%@
v16@?0@"MPIdentifierSet"8
pptIdentifier
T@"NSString",R,N
_identifiers
T@"MPIdentifierSet",R,N
com.apple.NanoMusicCore.NMCConnectivityManager
CONNECTED
DISCONNECTED
v16@?0@"NSError"8
com.apple.NanoMusicCore.ClearPlaybackQueue
v12@?0i8
v16@?0q8
v28@?0I8^{__CFDictionary=}12@?<v@?^{__CFArray=}>20
AutomaticallyPauseWhenTakenOffWrist
MusicAllowsCellularData
NanoMusic fallback playback request
-[NMCMediaPlayerModelPlaybackController performMediaRemoteCommand:options:completionHandler:]_block_invoke
sharedController
T@"NMCMediaPlayerModelPlaybackController",R,N
wantsRadioSupport
TB,N,V_wantsRadioSupport
wantsDefaultMusicFallbackPlaybackIntent
TB,N,V_wantsDefaultMusicFallbackPlaybackIntent
nowPlayingController
T@"NMRNowPlayingController",&,N,V_nowPlayingController
/bfa1LxXd7G1WqHujpjsdA
-[MPCPlayerResponse(NanoMusicCore) nmc_commandRequestWithMediaRemoteCommand:options:]
NMCPairedBluetoothAudioDeviceFailedToConnectNotification
NMCPairedBluetoothAudioDevicesChangedNotification
NMCSystemAudioRouteFailedToConnectNotification
NMCSystemAudioRoutesChangedNotification
NMCVirtualAudioRoutesDidChangeNotification
NMCVirtualAudioRouteUserInfoKey
virtualAudioRoutes
T@"NSArray",C,N,V_virtualAudioRoutes
systemAudioRoutes
T@"NSArray",C,N,V_systemAudioRoutes
pickedVirtualAudioRoute
T@"NMCVirtualAudioRoute",&,N,V_pickedVirtualAudioRoute
hasPickedVirtualAudioRoute
TB,N,V_hasPickedVirtualAudioRoute
hasAvailableW1Route
TB,N,V_hasAvailableW1Route
Audio/Video
com.apple.NanoMusic.NMCAudioRoutingManager
v16@?0@"NSArray"8
q24@?0@"NMCVirtualAudioRoute"8@"NMCVirtualAudioRoute"16
v32@?0@"NMCVirtualAudioRoute"8Q16^B24
paired
not paired!
disconnected
available
unavailable
enabled
disabled
bluetoothAvailableAndEnabled
TB,N,GisBluetoothAvailableAndEnabled,V_bluetoothAvailableAndEnabled
audioCategory
T@"NSString",C,D,N
routingControllerName
speakerRouteEnabled
TB,N,GisSpeakerRouteEnabled,V_speakerRouteEnabled
pairedBluetoothAudioDevices
T@"NSArray",R,C,N
T@"NMCVirtualAudioRoute",R,N
TB,R,N
NanoMusicCore
NanoMediaRemote
NanoAudioControl
NanoMusicSync
NanoMediaUI
NanoMediaTool
NanoMediaRemote-Oversize
NanoMusicSync-Oversize
com.apple.nanomusic
newWasSubscriberLastCheck
NMCSubscriptionStatusDidChangeNotification
NMCSubscriptionManagerCloudMusicLibraryEnabledStateDidChangeNotification
com.apple.NanoMusicCore.NMCSubscriptionManager
v12@?0B8
subscriber
TB,R,N,GisSubscriber
cloudMusicLibraryEnabled
TB,R,N,GisCloudMusicLibraryEnabled
-[NMCWiFiManager applicationDidBecomeActive:]
-[NMCWiFiManager applicationDidEnterBackground:]
-[NMCWiFiManager originObserver:didUpdateNowPlayingInfoForOrigin:]
-[NMCWiFiManager originObserver:didUpdateElapsedTimeForOrigin:]
-[NMCWiFiManager originObserver:didUpdatePlaybackStateForOrigin:]
PreferWiFiOverMagnet
PreferWifiOverMagnetTimeoutInSeconds
NSURLSessionProxyWiFiToken
directWiFiAssertionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_directWiFiAssertionTimer
holdingWiFiAssertion
TB,N,V_holdingWiFiAssertion
TB,N,V_enabled
wifiTimerLengthInSeconds
TQ,N,V_wifiTimerLengthInSeconds
com.apple.rootrobot
configuration
minimal
PPTDevice
NMCDefaults initialized.
Received an unrecognized Bluetooth ProductID:%@
[NMCConnectivityManager] Connectivity state changed from %@ to %@.
[NMCConnectivityManager] We were connected but now we're not.  Waiting %d seconds to see if things clear up...
[NMCConnectivityManager] Nope, still not connected
[NMCConnectivityManager] All good after waiting!
-addPlaybackIntent:withOptions:completion: failed with error: %@
-insertAfterPlayingItemWithPlaybackIntent: failed with error: %@
Clearing playback queue...
Cleared playback queue with error: %@
Registering media remote command handler block.
Received media remote command: %u
Creating playbackEngine to handle media remote command: %u
Unregistering media remote command handler block.
On-Wrist state changed %@
Device was taken off-wrist, pausing music.
Failed to execute request: %@ with error: %@
On-Wrist state is %@
Playback did fail due to activation failure with error %@
Playback did pause for lease end
Playback error %@
%s command request %@ failed with error: %@
Cellular Error: Cellular not supported
Cellular Error: Cellular data settings not enabled
Cellular Error: No ctServerConnection
Cellular Error: No cellular policy. Defaulting to NO
Cellular Error: can use cellular exists %x can use cellular %x
%s ignoring MRMediaRemoteCommand: %d
[Routing] Attempting to pick system route %@.
[Routing] Failed to pick system route %@ due to %@.
[Routing] Attempting to connect to a Bluetooth device that doesn't currently have a system route %@.
[Routing] Force reloading available audio routes from MediaRemote.
[Routing] Removing virtual route: %@
[Routing] (MPAVRoute) Created virtual route for MPAVRoute: %@
[Routing] (MPAVRoute) Updated virtual route for MPAVRoute: %@
[Routing] (Bluetooth) Created virtual route for device: %@.
[Routing] (Bluetooth) Updated virtual route for device %@.
[Routing] Virtual routes updated: %@
[Routing] (MPAVRoute) Available routes did change.
[Routing] (MPAVRoute) Picked routes did change: %@.
[Routing] (MPAVRoute) Failed to pick system route with error: %@
[Routing] (MPAVRoute) System routes with category (%@) updated to %@
[Routing] (MPAVRoute) Skipped updating for invalid route %@
[Routing] (MPAVRoute) Pending route now has system route, trying to pick %@.
[Routing] (MPAVRoute) Route does not exists, removing %@
[Routing] (Bluetooth) Device %@ discovered; adding the the list.
[Routing] (Bluetooth) Device %@ removed but is still either paired or connected; ignoring.
[Routing] (Bluetooth) Device %@ removed.
[Routing] (Bluetooth) Device %@ unpaired.
[Routing] (Bluetooth) Audio device %@ connected.
[Routing] (Bluetooth) Device %@ (%@) failed to connect (%@), but we're ignoring the error per <rdar://problem/19657430>.
[Routing] (Bluetooth) Device %@ (%@) failed to connect (%@).
[Routing] (Bluetooth) Device %@ disconnected (currently %@).
[Routing] (Bluetooth) Failed to disconnect from device %@ (%@).
[Routing] (Bluetooth) Connection status changed to %@.
[Routing] (Bluetooth) Device paired status changed.
[Routing] (Bluetooth) Bluetooth became %@ and %@.
[Routing] (Bluetooth) Refreshing paired bluetooth devices list!
[Routing] (Bluetooth) Bluetooth device does not exist, removing %@
No cached ICMusicSubscriptionStatus, will assume the user is not subscribed
Apple Music subscription status: %lu
iCloud Music Library authenticated: %d
[WiFiManager] %s
[WiFiManager] Functionality disabled
[WiFiManager] playback rate > 0.0, reschedule disabling Wi-Fi assertion
[WiFiManager] the application is active, reschedule disabling Wi-Fi assertion
[WiFiManager] scheduling disabling Wi-Fi assertion
[WiFiManager] Disabling Wi-Fi assertion fired
[WiFiManager] Enabling Wi-Fi
[WiFiManager] Already enabled
[WiFiManager] Disabling Wi-Fi
zPLR
zPLR
zPLR
zPLR
NanoMusicCore
NMCBluetoothAudioDevice
NMCTelemetry
NMCCloudAvailabilityController
HSCloudAvailability
NSObject
NMCKeyValueObserver
NMCHearingAidAudioDevice
NMCMediaPlayerModelPlaybackIntent
NMCPlayerPlaybackIntent
NMCVirtualAudioRoute
NMCPlaybackQueueRequest
NMCPlaybackQueueResponseDataSource
MPLazySectionedCollectionDataSource
NMCPlaybackQueueRequestOperation
MPRequestResponseControllerDelegate
NMCPlaybackQueueResponse
NMCConnectivityManager
CSLSConnectionStatusObserver
NMCMediaPlayerModelPlaybackController
MPCPlaybackEngineDelegate
NMCFeatureSupport
NMCAudioRoutesInfo
NMCAudioRoutingManager
MPAVRoutingControllerDelegate
NMCSubscriptionManager
NMCWiFiManager
NMROriginObserverDelegate
countByEnumeratingWithState:objects:count:
objectForKey:
boolValue
eqPresetForName:
typeForAVController
numberWithBool:
currentThread
threadDictionary
setObject:forKeyedSubscript:
removeObjectForKey:
dictionaryWithObjects:forKeys:count:
valueForKey:
defaultCenter
postNotificationName:object:
name
isEqualToString:
value
longLongValue
setDeviceLibraryPersistentID:
setSyncID:
setGlobalPlaylistID:
setStoreAdamID:
array
componentsSeparatedByString:
numberWithLongLong:
addObject:
copy
setFormerStoreAdamIDs:
setSocialProfileID:
setStoreCloudID:
setCloudUniversalLibraryID:
setStoreCloudAlbumID:
setStoreRecommendationID:
setStorePurchasedAdamID:
setStoreSubscriptionAdamID:
setRadioStationStringID:
setRadioStationHash:
setRadioStationID:
setContentItemID:
setLyricsID:
setVendorID:
setInformalMediaClipID:
setInformalStaticAssetID:
initWithModelKind:block:
deviceLibraryPersistentID
stringValue
queryItemWithName:value:
syncID
globalPlaylistID
storeAdamID
formerStoreAdamIDs
count
componentsJoinedByString:
socialProfileID
storeCloudID
numberWithUnsignedLongLong:
cloudUniversalLibraryID
storeCloudAlbumID
storeRecommendationID
storePurchasedAdamID
storeSubscriptionAdamID
radioStationStringID
radioStationHash
radioStationID
contentItemID
lyricsID
vendorID
informalMediaClipID
informalStaticAssetID
nmc_urlQueryItems
nmc_isEmpty
nmc_identifierSetWithURLQueryItems:modelKind:
init
address
type
vendorId
productId
stringWithFormat:
connected
connect
routeSubtype
routeUID
_addressMatchesRouteUID:
isConnected
rangeOfString:
initWithDevice:
routeType
matchesSystemRoute:
description
isEqual:
.cxx_destruct
hasSystemRoute
setHasSystemRoute:
_device
_hasSystemRoute
launched
localMusicSelected
displayedAlbums
displayedArtists
displayedSongs
_queue
_fetchCompanionCloudAvailability
dealloc
_handleCloudAvailabilityMessage:
hasProperNetworkConditionsToPlayMedia
canShowCloudMusic
sharedController
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
hasProperNetworkConditionsToShowCloudMedia
isCellularDataRestrictedForMusic
shouldProhibitMusicActionForCurrentNetworkConditions
isCellularDataRestrictedForVideos
shouldProhibitVideosActionForCurrentNetworkConditions
isCellularDataRestrictedForStoreApps
shouldProhibitStoreAppsActionForCurrentNetworkConditions
canShowCloudDownloadButtons
canShowCloudVideo
isCellularDataRestricted
shouldProhibitActionsForCurrentNetworkConditions
_hasProperNetworkConditionsToPlayMedia
_canShowCloudMusic
setWithObject:
initWithObject:keyPaths:options:handler:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
observeValueForKeyPath:ofObject:change:context:
initWithObject:keyPath:options:handler:
_object
_keyPaths
_handler
setTransferring:
sharedInstance
requestHearingAidConnectionWithReason:
initWithName:
isTransferring
_transferring
_name
replacePlaybackQueueWithIntent:preventingAutomaticPlayback:completionHandler:
performMediaRemoteCommand:completionHandler:
insertPlaybackIntent:intoPlaybackQueueAtInsertionPosition:completionHandler:
clearPlaybackQueueWithCompletionHandler:
mediaPlaybackCorePlaybackIntent
nmc_applicationPlayerPath
getRemotePlaybackQueueRepresentationWithPlayerPath:completion:
replacePlaybackQueueWhilePreventingAutomaticPlayback:completionHandler:
resumePlayback
insertIntoPlaybackQueueAtInsertionPosition:completionHandler:
initWithSiriPlayMediaIntent:
getCompanionPlaybackQueueRepresentationWithCompletionHandler:
getRemotePlaybackQueueRepresentationWithCompletionHandler:
routeName
length
_bluetoothDeviceName
hearingDevice
isPicked
isSystemSpeaker
systemRoute
routeTypeFromMPAVRoute:
isAirpodsRoute
isPowerbeatsRoute
isB444Route
isBeatsSoloRoute
isBeatsStudioRoute
isBeatsXRoute
isCarplayRoute
isAppleTVRoute
isHomePodRoute
isW1Route
isW2Route
stringByAppendingFormat:
isEqualToVirtualAudioRoute:
setSystemRoute:
bluetoothDevice
setBluetoothDevice:
setHearingDevice:
cachedPicked
setCachedPicked:
_cachedPicked
_systemRoute
_bluetoothDevice
_hearingDevice
playerResponseItem
setPlayerResponseItem:
tracklist
items
numberOfSections
sectionAtIndex:
metadataObject
numberOfItemsInSection:
itemAtIndexPath:
identifiersForItemAtIndexPath:
identifiersForSectionAtIndex:
indexPathForItemWithIdentifiersIntersectingSet:
sectionIndexTitles
optionalSectionIndexTitlesRange
indexOfSectionForSectionIndexTitleAtIndex:
hasSameContentAsDataSource:
initWithPlayerResponse:
playerResponse
_playerResponse
playerRequest
setRequest:
setDelegate:
beginAutomaticResponseLoading
initWithRequest:
_setRequestResponseController:
response
initWithDataSource:
setResults:
finishWithError:
controller:defersResponseReplacement:
controller:shouldRetryFailedRequestWithError:
willBeginLoadingRequestForController:
didFinishLoadingRequestForController:
execute
request
responseHandler
setResponseHandler:
_requestResponseController
_request
_responseHandler
setQualityOfService:
mainBundle
bundleIdentifier
pathWithRoute:bundleID:playerID:
setPlayerPath:
setTracklistRange:
copyWithZone:
newOperationWithResponseHandler:
setPlayerRequest:
_playerRequest
_handleResponseDidInvalidateNotification:
addObserver:selector:name:object:
removeObserver:
object
_invalidate
nmc_localPlayerPath
title
album
artist
itemPersistentID
itemCompanionPersistentID
initWithBlock:
pptIdentifier
_identifiers
weakObjectsHashTable
addObserver:
status
_updateConnectivityState
containsObject:
removeObject:
_notifyObserversForConnectedState
manager:connectivityDidChange:
sharedManager
connectionStatusDidChange:
wifiSignalStrengthBarsDidChange:
registrationStatusDidChange:
cellularSignalStrengthBarsDidChange:
lastKnownCountryCodeDidChange:
simActiveDidChange:
_connectionStatus
_connectionStatusQueue
_observers
_connected
_waitingForReconnect
alloc
_configureForStageDemoModeIfNeeded
setDisablePlaybackStateValidation:
setNowPlayingController:
_setupPlaybackEngineIfNecessary
_registerMediaRemoteCommandHandlerIfNeeded
setActionAfterQueueLoad:
setFallbackPlaybackIntent:
resetCommand
replaceWithPlaybackIntent:
performRequest:completion:
insertCommand
insertAfterPlayingItemWithPlaybackIntent:
insertAtEndOfTracklistWithPlaybackIntent:
clear
setSystemMusicApplication:
numberWithInteger:
arrayWithObjects:count:
_unregisterMediaRemoteCommandHandlerIfNeeded
infoDictionary
objectForKeyedSubscript:
initWithPlayerID:
isSystemMusicApplication
isSpeakerRouteEnabled
setAudioSessionCategory:
audioSessionOptions
setAudioSessionOptions:
_configureLocalOriginObserverAndCommandHandler
_configureDefaultFallbackPlaybackIntentIfNeededWithPlaybackEngine:
becomeActive
start
standardUserDefaults
boolForKey:
pause
setChangeHandler:
getWristState:
domain
code
_playbackErrorFromError:
userInfo
playbackControllerDidPauseForLeaseEnd:
playbackController:didFailToActivateWithError:resolution:
_playbackErrorTypeFromTopLevelError:
playbackController:didFailToPlayItem:error:errorType:
localOrigin
initWithPlayerPath:options:
setOriginObserver:forOrigin:
setOriginCommandHandler:forOrigin:
wantsDefaultMusicFallbackPlaybackIntent
setLabel:
kindWithVariants:
setItemKind:
setFilteringOptions:
setShuffleMode:
setTracklistToken:
setTracklistSource:
performMediaRemoteCommand:options:completionHandler:
nmc_commandRequestWithMediaRemoteCommand:options:
engineDidPauseForLeaseEnd:
engine:didPauseForLeaseEndWithError:
engine:prepareForActivationWithCompletion:
engine:didFailToActivateWithError:resolution:
engine:didFailToPlayFirstItem:withError:
engine:didFailToPlayItem:withError:
engine:requiresAuthorizationToPlayItem:authorizationHandler:
engine:requiresAuthorizationToPlayItem:reason:authorizationHandler:
setupPlaybackEngine
prepareToHandleMediaRemoteCommands
addErrorHandler:
removeErrorHandler:
wantsRadioSupport
setWantsRadioSupport:
setWantsDefaultMusicFallbackPlaybackIntent:
nowPlayingController
_playbackEngine
_mediaRemoteCommandObserver
_errorHandlers
_systemMusicApplication
_onWristMonitor
_shouldPauseNextTimeOffWrist
_wifiManager
_wantsRadioSupport
_wantsDefaultMusicFallbackPlaybackIntent
_nowPlayingController
deviceSupportsCellularData
isEnabled
deviceSupportsMediaStreaming
play
stop
changeItemCommand
nextItem
previousItem
doubleValue
playingItem
seekCommand
jumpByInterval:
beginSeekWithDirection:
floatValue
playbackRateCommand
setPlaybackRate:
likeCommand
changeValue:
dislikeCommand
wishlistCommand
integerValue
repeatCommand
setRepeatType:
shuffleCommand
setShuffleType:
virtualAudioRoutes
setVirtualAudioRoutes:
pickedVirtualAudioRoute
setPickedVirtualAudioRoute:
systemAudioRoutes
setSystemAudioRoutes:
hasPickedVirtualAudioRoute
setHasPickedVirtualAudioRoute:
hasAvailableW1Route
setHasAvailableW1Route:
_hasPickedVirtualAudioRoute
_hasAvailableW1Route
_virtualAudioRoutes
_pickedVirtualAudioRoute
_systemAudioRoutes
setAudioCategory:
setRoutingControllerName:
beginObservingAudioRoutes
_updateSpeakerRouteEnabled
_registerForBluetoothManagerNotifications
_refreshBluetoothDevices
_hearingDevicesDidChange
setDiscoveryMode:
_performBlockAfterFetchingAvailableRoutesIgnoringCache:withCompletion:
allValues
fetchAudioRoutesInfoIgnoringCache:withCompletion:
_cancelPickRouteTimeout
selectRoute:operation:completion:
_beginPickRouteTimeoutWithRoute:
setCategory:
category
setName:
availableRoutes
_updateSystemAudioRoutesWithRoutes:
w1Route
fetchAvailableRoutesWithCompletionHandler:
compare:
indexOfObject:inSortedRange:options:usingComparator:
_indexOfVirtualAudioRoute:forInsertion:
insertObject:atIndex:
removeObjectAtIndex:
_existingVirtualAudioRouteForMPAVRoute:
_addVirtualAudioRoute:
_existingVirtualAudioRouteForBluetoothAudioDevice:
_removeVirtualAudioRoute:
_postVirtualAudioRoutesChangedNotification
audioCategory
initWithCapacity:
_createOrUpdateVirtualAudioRouteForMPAVRoute:
setWithArray:
enumerateObjectsUsingBlock:
_postSystemAudioRoutesChangedNotification
_bluetoothAvailabilityChangedNotification:
_bluetoothPowerChangedNotification:
_bluetoothDeviceDiscoveredNotification:
_bluetoothDeviceRemovedNotification:
_bluetoothDeviceUnpairedNotification:
_bluetoothDeviceConnectSuccessNotification:
_bluetoothDeviceConnectFailedNotification:
_bluetoothDeviceDisconnectSuccessNotification:
_bluetoothDeviceDisconnectFailedNotification:
_bluetoothConnectionStatusChangedNotification:
_bluetoothDevicePairedStatusChangedNotification:
_handleBluetoothAvailabilityChange
_setNeedsRefreshingBluetoothDevices
paired
connectingDevices
postNotificationName:object:userInfo:
available
enabled
pairedDevices
allKeys
_createOrUpdateVirtualAudioRouteForBluetoothAudioDevice:
isEqualToSet:
_postPairedBluetoothAudioDevicesChangedNotification
setSpeakerRouteEnabled:
routingControllerAvailableRoutesDidChange:
routingController:didFailToPickRouteWithError:
routingController:pickedRoutesDidChange:
routingController:pickedRouteDidChange:
routingController:shouldHijackRoute:alertStyle:busyRouteName:presentingAppName:completion:
routingController:volumeControlAvailabilityDidChange:
routingControllerExternalScreenTypeDidChange:
routingControllerDidPauseFromActiveRouteChange:
pairedBluetoothAudioDevices
fetchAudioRoutesInfoWithCompletion:
pickVirtualAudioRoute:
routingControllerName
isBluetoothAvailableAndEnabled
setBluetoothAvailableAndEnabled:
_pairedBluetoothDevices
_routingController
_pendingVirtualRouteChangeNotification
_pendingPairedBluetoothAudioDeviceChangeNotification
_pendingSystemAudioRoutesChangedNotification
_pendingPickedRoutesStateDidChangeNotification
_hasFetchedInitialAvailableRoutes
_availableRoutesFetchGroup
_pickRouteTimer
_pendingPickingRoute
_bluetoothNotificationTimer
_bluetoothAvailableAndEnabled
_speakerRouteEnabled
isServiceSupported:
_updateAppleMusicSubscriptionStatus
_updateCloudMusicLibraryEnabledStatus
_handleSubscriptionStatusDidChangeNotification:
subscriptionStatus
setValue:forKey:
_handleUserIdentityStoreDidChangeNotification:
defaultIdentityStore
isAuthenticatedWithCompletionHandler:
isSubscriber
preloadAppleMusicSubscriptionStatus
isCloudMusicLibraryEnabled
preloadCloudMusicLibraryEnabledStatus
_cloudClient
_cloudMusicLibraryEnabled
_subscriptionManager
_subscriber
_readDefaults
_enableWiFiAssertionIfNeeded
applicationDidBecomeActive:
applicationDidEnterBackground:
_removeWoWClient
endObservingOrigins
removeObserverDelegate:
addObserverDelegate:
beginObservingOrigins
_disableWiFiAssertionWhenNeeded
setEnabled:
setWifiTimerLengthInSeconds:
_addWoWClient
_scheduleDisablingWiFiAssertion
activeNowPlayingOrigin
nowPlayingStateForOrigin:
playbackRate
sharedApplication
applicationState
directWiFiAssertionTimer
setDirectWiFiAssertionTimer:
wifiTimerLengthInSeconds
holdingWiFiAssertion
addWoWClient:
addWiFiAutoAssociationClientToken:
setHoldingWiFiAssertion:
removeWoWClient:
removeWiFiAutoAssociationClientToken:
originObserver:didUpdateNowPlayingInfoForOrigin:
originObserver:didUpdateNowPlayingApplicationBundleIdentifierForOrigin:
originObserver:didUpdatePlaybackStateForOrigin:
originObserver:didUpdateSupportedCommandsForOrigin:
originObserver:didUpdateElapsedTimeForOrigin:
originObserver:didUpdateTimestampForOrigin:
originObserver:didUpdatePlaybackQueueForOrigin:
_holdingWiFiAssertion
_enabled
_directWiFiAssertionTimer
_wifiTimerLengthInSeconds
isRunningInStoreDemoMode
initWithSuiteName:
stringForKey:
@16@0:8
B16@0:8
@32@0:8@16@24
@24@0:8@16
q16@0:8
v16@0:8
B24@0:8@16
v20@0:8B16
@"BluetoothDevice"
@"NSObject<OS_dispatch_queue>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@16
@48@0:8@16@24Q32@?40
v48@0:8@16@24@32^v40
@"NSObject"
@"NSSet"
@"NSString"
v28@0:8B16@?20
v32@0:8Q16@?24
v24@0:8@?16
v28@0:8B16@?<v@?@"NSError">20
v32@0:8Q16@?<v@?@"NSError">24
@24@0:8@"INPlayMediaIntent"16
v24@0:8@?<v@?@"MPRemotePlaybackQueue"@"NSError">16
q24@0:8@16
@"MPAVRoute"
@"NMCBluetoothAudioDevice"
@"NMCHearingAidAudioDevice"
@24@0:8Q16
Q24@0:8Q16
@24@0:8q16
{_NSRange=QQ}16@0:8
q24@0:8q16
@24@0:8@"NSIndexPath"16
@"MPIdentifierSet"24@0:8@"NSIndexPath"16
@"MPIdentifierSet"24@0:8q16
@"NSIndexPath"24@0:8@"MPIdentifierSet"16
@"NSArray"16@0:8
B24@0:8@"<MPLazySectionedCollectionDataSource>"16
@"MPCPlayerResponse"
v32@0:8@16@?24
B32@0:8@16@24
v32@0:8@"MPRequestResponseController"16@?<v@?>24
B32@0:8@"MPRequestResponseController"16@"NSError"24
v24@0:8@"MPRequestResponseController"16
@?16@0:8
@"MPRequestResponseController"
@"NMCPlaybackQueueRequest"
@24@0:8^{_NSZone=}16
@24@0:8@?16
@"MPCPlayerRequest"
v24@0:8Q16
v20@0:8i16
v24@0:8q16
v24@0:8@"NSString"16
@"NSHashTable"
v32@0:8@16@24
v40@0:8@16@24@?32
v40@0:8@16@24@32
v48@0:8@16@24q32@?40
v24@0:8@"MPCPlaybackEngine"16
v32@0:8@"MPCPlaybackEngine"16@"NSError"24
v32@0:8@"MPCPlaybackEngine"16@?<v@?B@"NSError">24
v40@0:8@"MPCPlaybackEngine"16@"NSError"24@?<v@?B>32
v40@0:8@"MPCPlaybackEngine"16@"MPAVItem"24@"NSError"32
v40@0:8@"MPCPlaybackEngine"16@"MPAVItem"24@?<v@?B@"NSError">32
v48@0:8@"MPCPlaybackEngine"16@"MPAVItem"24q32@?<v@?B@"NSError">40
v36@0:8@16B24@?28
v40@0:8@16Q24@?32
v28@0:8I16@?20
v36@0:8I16@20@?28
@"MPCPlaybackEngine"
@"CSLSOnWristMonitor"
@"NMCWiFiManager"
@"NMRNowPlayingController"
@28@0:8I16@20
@"NSArray"
@"NMCVirtualAudioRoute"
v64@0:8@16@24q32@40@48@?56
v28@0:8@16B24
v24@0:8@"MPAVRoutingController"16
v32@0:8@"MPAVRoutingController"16@"NSError"24
v32@0:8@"MPAVRoutingController"16@"NSArray"24
v32@0:8@"MPAVRoutingController"16@"MPAVRoute"24
v64@0:8@"MPAVRoutingController"16@"MPAVRoute"24q32@"NSString"40@"NSString"48@?<v@?B>56
v28@0:8@"MPAVRoutingController"16B24
Q28@0:8@16B24
@"NSMutableDictionary"
@"MPAVRoutingController"
@"NSMutableArray"
@"NSObject<OS_dispatch_group>"
@"NSObject<OS_dispatch_source>"
@"HSCloudClient"
@"NMSSubscriptionManager"
v32@0:8@16@"NMROrigin"24
