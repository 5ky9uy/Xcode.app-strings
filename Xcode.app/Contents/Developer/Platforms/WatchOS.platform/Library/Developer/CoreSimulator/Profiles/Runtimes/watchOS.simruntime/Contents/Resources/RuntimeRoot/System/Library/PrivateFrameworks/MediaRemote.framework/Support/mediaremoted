MbP?
%@-%@-%@-%@-%@
outputDeviceUID
T@"NSString",&,N,V_outputDeviceUID
type
Tq,N,V_type
date
T@"NSDate",&,N,V_date
event
Tq,N,V_event
eventReason
T@"NSString",&,N,V_eventReason
selectionReason
T@"NSString",&,N,V_selectionReason
com.apple.mediaremote
eventdescription
selectionreason
eventreason
timesince
v8@?0
B8@?0
Restoring previous
v12@?0B8
%@ origin registered <%@> (<%@>) 
origin de-registration of <%@> (<%@>) 
personal device was attached
Playback changed for %@
was not playing sort of recently <%lf> seconds ago
was playing recently <%lf> seconds ago
was not <%@> sort of recently <%lf> seconds ago
was <%@> recently <%lf> ago
was not playing recently <%lf> ago and was not <%@> recently <%lf> seconds ago
Could not find origin with deviceUID = <%@>
No %@SystemEndpoint
Internal Setting not set
local activePlayer %@ is playing
Fallback to Local
%@SystemEndpoint changed from <%@> to <%@> with changeType = <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
%@ endpoint disconnected and attempting to reconnect
v16@?0@"MRAVEndpoint"8
v24@?0d8@?<v@?B>16
%@Endpoint changed
com.apple.mediaremote.systemendpointcontroller.userselectedtimer
 %@ timeout event %@ after <%lf> seconds 
%@Endpoint timeout imminent
%@Endpoint is playing
%@Endpoint is local
com.apple.mediaremote.systemendpointcontroller.playbacktimer
%@ playback timedout event %@ after <%lf> seconds
SystemEndpoint
v32@?0@8@"NSDictionary"16^B24
Startup
StartUp
ConnectionAdded
ConnectionRemoved
UserSelected
UserSelectedTimeout
Playback
PlaybackTimeout
NowPlayingAppRemoved
systemEndpointInfo
T@"NSDictionary",R,N
delegate
T@"<MRDAVSystemEndpointControllerDelegate>",W,N,V_delegate
com.apple.mediaremote.MRDRemoteControlServer
v20@?0I8@"NSArray"12
com.apple.mediaremote.broadcastcommand.%@
v32@?0@"NSString"8@"MRDRemoteControlContext"16^B24
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
MRXPC_COMMAND_STATUSES_DATA_KEY
@"NSData"16@?0@"_MRSendCommandResultMessageProtobuf"8
%@ started playback
phone call began
v16@?0Q8
NSUnderlyingError
FBSOpenApplicationErrorDomain
v16@?0@"NSError"8
com.apple.Fuse
v12@?0i8
com.apple.MediaPlayer.RemotePlayerService
com.apple.iBooks
airtunesd
com.apple.HomePodCannedDemo
coreduetd
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
remoteControlClients
T@"NSArray",R,N
com.apple.mediaremote.send-commands
MRXPC_COMMAND_KEY
MRXPC_COMMAND_OPTIONS_KEY
routingDataSource
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
currentVolume
Tf,R,N,V_currentVolume
volumeWarningEnabled
TB,R,N,V_volumeWarningEnabled
volumeLimit
Tf,R,N,V_volumeLimit
warningState
TQ,N,V_warningState
v16@?0@"RPCompanionLinkDevice"8
com.apple.mediaremote.event
protobufData
v24@?0@"NSDictionary"8@"NSDictionary"16
com.apple.mediaremote.disconnect
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v32@?0@"NSString"8@"NSNumber"16^B24
contextID
T@"NSString",R,N,V_contextID
originatingAppDisplayID
T@"NSString",R,N,V_originatingAppDisplayID
routedCommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingDataSourceVolumeControlAvailableUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
com.apple.MRDAVRoutingDataSource.serialQueue
discoveryMode
TI,N,V_discoveryMode
pickedRoute
T@"MRDAVRoute",R,N,V_pickedRoute
pickedRoutes
externalScreenType
TI,R,N,V_externalScreenType
currentRouteSupportsVolumeControl
TB,R,N,V_currentRouteSupportsVolumeControl
subclass must implement
bundleID
T@"NSString",R,N,V_bundleID
processID
Ti,R,N,V_processID
v16@?0@"NSDictionary"8
v24@?0^v8^{__CFError=}16
appStateMonitor
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
cachedNowPlayingClients
T@"NSSet",&,N,V_cachedNowPlayingClients
cachedNowPlayingContentItem
T@"_MRContentItemProtobuf",&,N,V_cachedNowPlayingContentItem
serialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
com.apple.mediaremote.%@.%@
v32@?0@"NSNumber"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16^B24
%@ %p {
  playerPath = %@
  transaction = %@
  playbackState = %@
  inferredPlaybackState = %@
  playbackStateHistory = %@
  supportedCommands = %@
  capabilities = %@
  playbackQueue = %@
  subscriptionController = %@
@16@?0@"NSData"8
supportedCommands
playbackQueue
nowPlayingItem
inferred playback state
playback state
playbackQueueCapabilities
v16@?0^v8
q24@?0@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"8@"MRDNowPlayingPlayerClientPlaybackStateSnapshot"16
@"NSString"24@?0@"NSData"8@"NSString"16
@"NSString"16@?0@"_MRContentItemProtobuf"8
com.apple.mediaremoted.MRDNowPlayingPlayerClient/%@
true
false
v32@?0@"MRDNowPlayingPlayerClientArtworkRequest"8Q16^B24
v32@?0@"NSString"8@"NSMutableArray"16^B24
v32@?0@8Q16^B24
v32@?0@"NSString"8@"NSString"16^B24
v16@?0@"NSArray"8
v40@?0@"MRTransactionDestination"8@"NSArray"16@"_MRNowPlayingPlayerPathProtobuf"24@?<v@?I>32
pushStateIsPlaying
TB,N,V_pushStateIsPlaying
pushStatePlaybackState
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_pushStatePlaybackState
pushStatePlayer
T@"_MRNowPlayingPlayerProtobuf",&,N,V_pushStatePlayer
pushStateHasNowPlayingData
TB,N,V_pushStateHasNowPlayingData
playbackState
TI,R,N
inferredPlaybackState
TI,N
supportedRemoteControlCommands
supportedRemoteControlCommandsData
T@"NSData",C,N
T@"_MRPlaybackQueueProtobuf",C,N
nowPlayingContentItem
T@"_MRContentItemProtobuf",R,N
TQ,N
isPlaying
TB,R,N
hasNowPlayingData
timeSincePlaying
Td,R,N
lastPlayingDate
T@"NSDate",R,N,V_lastPlayingDate
player
T@"_MRNowPlayingPlayerProtobuf",R,N
playerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N
nowPlayingState
T@"_MRSetStateMessageProtobuf",R,N
subscriptionController
T@"MRPlaybackQueueSubscriptionController",R,N,V_subscriptionController
snapshots
T@"<MRDNowPlayingPlayerClientDelegate>",W,N,V_delegate
contentItemIdentifer
T@"NSString",R,N,V_contentItemIdentifer
artworkIdentifier
T@"NSString",R,N,V_artworkIdentifier
%@-%@
TI,R,N,V_playbackState
T@"NSDate",R,N,V_date
playerPlaybackState
T@"MRDNowPlayingPlayerClientPlaybackState",&,N,V_playerPlaybackState
T@"NSDate",R,N
playbackStateDescription
T@"NSString",R,N
CUBluetoothClient
CoreUtils
v16@?0@"NSData"8
<%@ %p "%@">
local.
lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDBonjourRemoteControlServiceDelegate>",W,N,V_delegate
netServiceType
T@"NSString",R,N,V_netServiceType
T@"<MRDNowPlayingDataSourceDelegate>",W,N,V_delegate
nowPlayingApplicationDisplayID
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
nowPlayingApplicationPID
Ti,R,N,V_nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
TB,R,N,V_nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
TB,R,N,V_anyApplicationIsPlaying
MediaPlayback
v32@?0@"NSArray"8@"MRAVEndpoint"16@"NSError"24
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
airplay
tacl
tsco
screen
Unknown
SharedAudioPresentation
SharedSystemAudio
SharedSystemScreen
iTunesAudio
Auxiliary
<Unknown>
T@"<MRDRapportRemoteControlServiceDelegate>",W,N,V_delegate
com.apple.MediaRemote.ProximityController
v16@?0@"NSString"8
v24@?0@"NSString"8q16
v16@?0q8
v24@?0@"MRDNearbyMigrationEvent"8@"NSError"16
v24@?0@"MRDFarAwayMigrationEvent"8@"NSError"16
<%@> is playing with playerPath %@
lockScreen controls are active with playerPath %@
<%@> is no longer playing
is no longer playing recently (<%lf> > <%lf> seconds ago)
lockScreen controls are no longer active
v32@?0@"NSString"8@"MRDNearbyMigrationEvent"16^B24
%@ (%@)
events
nearbyDevices
triggeredDevices
promptingDevices
immediateDevices
migratingDevices
isAdvertising
advertisingReasonDescription
Client
UserDismiss
UserTap
Untrigger
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
<%@: %p>, %@, isPreparing=%@, isPrepared=%@, error=%@
%@->%@ (%@-%@)
%s is abstract
-[MRDMigrationEvent _prepareWithCompletion:]
-[MRDMigrationEvent migrateWithCompletion:]
-[MRDMigrationEvent createNotificationInfo]
T@"<MRDMigrationEventDelegate>",W,N,V_delegate
deviceUID
T@"NSString",&,N,V_deviceUID
error
T@"NSError",R,N,V_error
isPrepared
TB,R,N,V_isPrepared
isPreparing
TB,R,N,V_isPreparing
rapportUID
T@"NSString",R,N,V_rapportUID
inputUID
T@"NSString",R,N,V_inputUID
name
T@"NSString",R,N,V_name
label
%@, %@->%@, %@, nominationReason=%@
Could not nominate a sourcePlayer
Could not find remote device <%@>
v24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
proxMigrate
prox
%@<%@>
v24@?0@"NSArray"8@"NSError"16
v16@?0@?<v@?@"NSArray">8
Already airplaying to prox device. Removing All outputDevices instead...
removeOutputDevices
Adding prox device to proactiveEndpoint
addOutputDevices
TITLE_BY_ARTIST_FORMAT
PLAYING_ON_DEVICE_DELIMITER
FROM_DEVICE_FORMAT
PLAY_ON_DEVICE_FORMAT
Proximity to <%@>
Both remote and proactive are playing. Defaulting to active
remote %@ is playing
proactive %@ is playing
proactive %@ has playbackQueue
B16@?0@"MRAVOutputDevice"8
playerPathData
v24@?0^{_MRDeviceInfoMessageProtobuf=#Q@@@@i@@@@I@@I@@@I@@@@@BBBBBBBBBB{?=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}8@"NSDictionary"16
%@ %@ playbackSessionType=%@
farAwayDevice request for %@
v24@?0^{__CFArray=}8^{__CFError=}16
v24@?0@"NSDictionary"8@"NSError"16
Move %@ from %@ to %@
sfDeviceClassCode
TC,R,N
callback
T@?,C,N,V_callback
timeoutTimer
T@"NSTimer",&,N,V_timeoutTimer
routeUID
T@"NSString",R,N,V_routeUID
MRXPC_INDEXPATH_DATA_KEY
v16@?0@"NSObject<OS_xpc_object>"8
v16@?0@"MRDMediaRemoteClient"8
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
BrowsableContent playback initiated
Sending initiatePlaybackMessage
MRXPC_BUNDLE_ID_KEY
apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
com.apple.mediaremote.hostedDiscoverySession/serialQueue
%@ %p {
    discovery mode = %@
    xpc connection = %@
    pid = %d
    process name = %@
com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)
transaction
T@"NSObject<OS_os_transaction>",&,N,V_transaction
enableThrottling
TB,N,V_enableThrottling
updatedEndpoints
T@"NSArray",&,N,V_updatedEndpoints
updatedOutputDevices
T@"NSArray",&,N,V_updatedOutputDevices
endpointsDelayed
TB,N,V_endpointsDelayed
devicesDelayed
TB,N,V_devicesDelayed
connection
T@"NSXPCConnection",R,N,V_connection
hostedRoutingController
T@"MRDAVHostedRoutingController",R,N,V_hostedRoutingController
T@"<MRDAVHostedDiscoverySessionDelegate>",W,N,V_delegate
    
NowPlaying 
OutputDevices 
Volume 
Keyboard 
%@ %p {
    credentials = %@
    deviceInfo = %@
    lastSupportedMessageType = %ld
    virtualTouchDevices = %@
    registeredVirtualVoiceInputDevices = %@
    playbackQueueRequests = %@
    sessionPeer = %@
    pinPairingToken = %@
    serverDelegate = %@
    registeredUpdates = %@
v16@?0I8I12
v32@?0@"NSNumber"8@"MREmulatedGameController"16^B24
credentials
T@"MRPasscodeCredentials",&,N,V_credentials
virtualTouchDevices
registeredVirtualVoiceInputDevices
playbackQueueRequests
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
sessionPeer
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
pinPairingToken
T@,&,N,V_pinPairingToken
serverDelegate
T@"<MRDExternalDeviceServerClientConnectionDelegate>",W,N,V_serverDelegate
xpcEndpoint
T@"NSXPCListenerEndpoint",R,N
MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification
com.apple.mediaremoted.MRDAVHostedRoutingController/calloutQueue
v16@?0^{__CFArray=}8
v32@?0@"NSString"8@"MRDAVHostedExternalDevice"16^B24
q24@?0@"MRAVOutputDevice"8@"MRAVOutputDevice"16
observerCalloutQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_observerCalloutQueue
discoverySession
T@"MRAVConcreteRoutingDiscoverySession",&,N,V_discoverySession
weakObservers
T@"NSHashTable",&,N,V_weakObservers
externalDeviceMap
T@"NSMutableDictionary",&,N,V_externalDeviceMap
externalDeviceGraveyard
T@"NSMutableArray",&,N,V_externalDeviceGraveyard
discoverySessionOutputDevicesToken
T@,&,N,V_discoverySessionOutputDevicesToken
outputDevices
T@"NSArray",&,N,V_outputDevices
concreteOutputDevices
T@"NSDictionary",&,N,V_concreteOutputDevices
endpoints
T@"NSArray",&,N,V_endpoints
localEndpoint
T@"MRAVConcreteEndpoint",&,N,V_localEndpoint
devicePresenceDetected
availableEndpoints
availableExternalDevices
availableOutputDevices
availableConcreteOutputDevices
ignoreExistingLeader
preferExistingConnection
preferSubscription
preferCloudLibrary
preferHomePod
preferAppleTV
none
{ %@ }
proxyGroupPlayer
relayable
remoteControllable
existingConnection
appleMusicSubscription
iCloudMusicLibrary
existingLeader
HomePod
AppleTV
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
path
T@"NSString",R,N,V_path
tokenRecords
owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
model
deviceID
AirPlayPortExtendedInfo
route
T@"NSDictionary",R,N,V_route
requiresPIN
modelName
deviceIdentifier
canBeDefaultRoute
TB,R,N,V_canBeDefaultRoute
canBeSystemDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
v32@?0^{_MRDeviceInfoMessageProtobuf=#Q@@@@i@@@@I@@I@@@I@@@@@BBBBBBBBBB{?=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSError">24
RecentlyPlayedEntries
v32@?0@"NSDictionary"8Q16^B24
q24@?0@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"8@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"16
lastSentEntry
T@"MRDExternalDeviceHomeServerRecentlyPlayedEntry",&,N,V_lastSentEntry
entries
T@"NSMutableArray",&,N,V_entries
userDefaults
T@"NSUserDefaults",&,N,V_userDefaults
sendingPlaybackStateToCompanion
TB,N,V_sendingPlaybackStateToCompanion
proximityController
T@"MRDProximityController",&,N,V_proximityController
mostRecentDeviceUID
lastNotPlayingDate
currentPlaybackSessionTypes
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
%@-%@-%@-%@-%@-%@(%@)-%@-%@
PLAYING
NOT PLAYING
playerPathDescription
contentItemDescription
TB,N,V_isPlaying
T@"NSDate",&,N,V_lastPlayingDate
T@"NSDate",&,N,V_lastNotPlayingDate
deviceInfo
T@"_MRDeviceInfoMessageProtobuf",&,N,V_deviceInfo
T@"NSArray",&,N,V_currentPlaybackSessionTypes
T@"NSArray",&,N,V_supportedPlaybackSessionTypes
T@"NSString",&,N,V_currentPlaybackSessionIdentifier
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_playerPath
contentItem
T@"_MRContentItemProtobuf",&,N,V_contentItem
dictionaryRepresentation
T@"NSDictionary",&,N,V_dictionaryRepresentation
MPStoreClientTokenDidChangeNotification
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
T@"<MRTransactionDelegate>",W,N,V_delegate
TQ,R,N,V_name
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_playerPath
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
v12@?0I8
transactions
T@"NSMutableArray",R,N,V_transactions
T@"<MRDPinPairingDialogDelegate>",W,N,V_delegate
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
MRXPC_ERROR_CODE_KEY
com.apple.mediaremote.MRDDeviceInfoDataSource
UserAssignedDeviceName
v24@?0^{__CFString=}8^{__CFDictionary=}16
com.apple.airplay.prefsChanged
com.apple.airplay.active
T@"_MRDeviceInfoMessageProtobuf",R,N,V_deviceInfo
T@"<MRDDeviceInfoDataSourceDelegate>",W,N,V_delegate
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
  origin = %@
  deviceInfo = %@
  app activity = %@
  override client = %@
  volume = %f
  current route volume control capabilities = %@
  time since playing = %lf
  is playing = %@
  active now playing client = %@
  explicit now playing client = %@
  computed now playing client = %@
  inferred now playing client = %@
  datasource = %@
  default supportedCommands = %@
  all now playing clients = %@
volume
volumeCapabilities
q24@?0@"MRDNowPlayingPlayerClient"8@"MRDNowPlayingPlayerClient"16
computedNowPlayingClient
explicitNowPlayingClient
inferredNowPlayingClient
overrideNowPlayingClient
applicationActivity
v32@?0@"NSString"8@"NSData"16^B24
com.apple.mediaremoted.MRDNowPlayingOriginClient/%@
com.apple.mediaremote.originclient.playbacktimer
%@ was not playing recently
%@ is playing for notification <%@>
T@"MRDNowPlayingClient",&,N,V_computedNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_inferredNowPlayingClient
origin
T@"_MROriginProtobuf",R,N,V_origin
Tf,N
volumeControlCapabilities
deviceInfoData
T@"NSData",&,N,V_deviceInfoData
activity
T@"MRMutableApplicationActivity",&,N,V_activity
overrideClient
T@"MRDMediaRemoteClient",&,N,V_overrideClient
T@"MRDNowPlayingClient",&,N,V_explicitNowPlayingClient
nowPlayingDataSource
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
deviceInfoDataSource
T@"MRDDeviceInfoDataSource",&,N,V_deviceInfoDataSource
registrationDate
T@"NSDate",R,N,V_registrationDate
isActivityActive
activeNowPlayingClient
T@"MRDNowPlayingClient",R,N
nowPlayingClients
mostRecentPlayers
defaultSupportedCommands
T@"<MRDNowPlayingOriginClientDelegate>",W,N,V_delegate
<%@ %p: %@>
B32@?0@"MRAVDistantOutputDevice"8Q16^B24
Speaker
v16@?0@"NSNotification"8
T@"<MRDNowPlayingStateObserverDelegate>",W,N,V_delegate
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
currentDiscoveryMode
TI,R,N,V_currentDiscoveryMode
AVSystemController_CurrentExternalScreenAttribute
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_CurrentRouteHasVolumeControlNotificationParameter
AVSystemController
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_ExternalScreenDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVAudioSessionMediaServicesWereResetNotification
AVAudioSession
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
AVSystemController_DiscoveryMode_PresenceScan
AVSystemController_DiscoveryMode_DetailedDiscovery
AVSystemController_DiscoveryMode_None
AVSystemController_DiscoveryModeAttribute
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
com.apple.mediaremote.MRDLockScreenController
Previous playerPath %@ invalidated
PlayerPath changed from %@ to %@ with changeType %@
visible
NOT visible
LayoutChange
ElectedPlayer %@ playback
started
stopped
assertion
T@"MRDLockScreenAssertion",&,N,V_assertion
electedPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_electedPlayerPath
previousPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_previousPlayerPath
changeType
Tq,N,V_changeType
eventType
Tq,N,V_eventType
T@"<MRDLockScreenControllerDelegate>",N,V_delegate
lockScreenWidgetActive
TB,R,N,GisLockScreenWidgetActive
lockScreenWidgetVisible
TB,R,N,GisLockScreenWidgetVisible
com.apple.mediaremoted.LockScreen
SBDashBoardNowPlayingAssertionIdentifier
T@"SBSLockScreenContentAssertion",&,N,V_assertion
SBSLockScreenContentAssertion
/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices
SBSLockScreenContentAssertionSlotPlatter
%@ (pid=%d)
<%@ %p %@ (pid=%d)>
processName
T@"NSString",R,N,V_processName
registeredCallbacks
TQ,N,V_registeredCallbacks
notifications
TQ,N,V_notifications
connectionState
TI,N,V_connectionState
com.apple.mediaremoted.hostedExternalDevice.serialQueue
com.apple.mediaremoted.hostedExternalDevice.callbackQueue
<%@: %p externalDeviceName=%@>
%@: %p {
    external device = %@
    connection state = %@
    can migrate to local endpoint error = %@
    external device clients = %@
    external output context = %@
v16@?0^{__CFError=}8
Local device is groupable
v20@?0I8^{__CFError=}12
v20@?0f8@"NSString"12
v20@?0I8@"NSString"12
init
Endpoint is not initialized
v16@?0^{__CFString=}8
v24@?0^{__CFString=}8^{__CFData=}16
mediaremotetool
B32@?0@"MRDMediaRemoteClient"8@"NSDictionary"16^@24
groupContainsGroupLeader
groupLeader
topology
q24@?0@"NSString"8@"NSString"16
xpcListener
T@"NSXPCListener",&,N,V_xpcListener
externalDeviceCallbackQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_externalDeviceCallbackQueue
mutableExternalDeviceClients
T@"NSMutableSet",&,N,V_mutableExternalDeviceClients
externalOutputContext
T@"MRExternalOutputContextDataSource",R,N,V_externalOutputContext
endpoint
T@"MRAVDistantEndpoint",R,N,V_endpoint
useOutputDeviceCache
TB,N,V_useOutputDeviceCache
tombstoned
TB,N,V_tombstoned
personalOutputDevices
silentDiscoverySession
T@"MRAVRoutingDiscoverySession",&,N,V_silentDiscoverySession
canMigrateToLocalEndpointError
T@"NSError",&,N,V_canMigrateToLocalEndpointError
externalDevice
T@"MRTransportExternalDevice",R,N,V_externalDevice
externalDeviceListenerEndpoint
%@ is invalid.
MRDMediaRemoteExternalDeviceServerClientInvalidatedNotification
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
B16@?0@"MRDExternalDeviceServerClientConnection"8
@"MRProtocolMessage"8@?0
@"MRProtocolMessage"16@?0@"MRDExternalDeviceServerClientConnection"8
kMRPlaybackQueueContextDataUserInfoKey
B16@?0@"_MRDeviceInfoMessageProtobuf"8
com.apple.TVRemote
com.apple.tvremotecore.xpc
I12@?0I8
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v16@?0@"_MRLyricsEventProtobuf"8
v20@?0{_MRHIDButtonEvent=IIB}8
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
v16@?0@"MRProtocolMessage"8
SBSUndimScreen
SpringBoardServices
v24@?0@"CUPairedPeer"8Q16
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
v20@?0I8^{__CFArray=}12
v32@?0@"NSString"8@"NSArray"16^B24
v24@?0q8@?<v@?@"NSString">16
v24@?0@"MRPlaybackSessionMigrateRequest"8@"NSError"16
clients
streamsRunLoop
T@"NSRunLoop",R,N
CURunLoopThread
/System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils
_MRDActiveOriginDataDefaultsKey
LastNowPlayingAppIsPlayingState
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
MRXPC_NOWPLAYING_DISPLAYID_KEY
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_TIMESTAMP
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
v24@?0@"MRDMediaRemoteClient"8@"NSError"16
event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>
v32@?0@"_MRContentItemProtobuf"8@"_MRPlaybackQueueRequestProtobuf"16^B24
Playing
Not Playing
activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
activeClientPID
Ti,R,N
localActiveClientPID
activeClientBundleIdentifier
localActiveClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
activePlayerClient
T@"MRDNowPlayingPlayerClient",R,N
localActivePlayerClient
localActiveNowPlayingClient
originClients
activePlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",R,N
localActivePlayerPath
allNowPlayingInfoClients
T@"NSSet",R,N
allLocalNowPlayingInfoClients
electedPlayerController
T@"MRDElectedPlayerController",R,N,V_electedPlayerController
lockScreenController
T@"MRDLockScreenController",R,N,V_lockScreenController
xpcClient
T@"MRDMediaRemoteClient",&,N,V_xpcClient
playerClient
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
nowPlayingClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
originClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
isActiveOrigin
TB,N,V_isActiveOrigin
isActiveClient
TB,N,V_isActiveClient
isActivePlayer
TB,N,V_isActivePlayer
TI,N,V_error
unresolvedPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_unresolvedPlayerPath
isLocalOrigin
isActivity
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%p {
    player path = %@
    client = %@
    any player is playing = %s
    has now playing data = %s
    foregrounded = %s
    supportsBackgroundAudio = %s
    active player client = %@
    player clients = %@
effectiveBundleIdentifier
UIBackgroundModes
audio
displayName
nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
pushStateActivePlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
pushStateClient
T@"_MRNowPlayingClientProtobuf",&,N,V_pushStateClient
stateMonitor
T@"BKSApplicationStateMonitor",&,N,V_stateMonitor
anyPlayerIsPlaying
isForegrounded
TB,N,V_isForegrounded
supportsBackgroundAudio
TB,N,V_supportsBackgroundAudio
client
T@"_MRNowPlayingClientProtobuf",&,N
T@"MRDNowPlayingPlayerClient",&,N
playerClients
T@"<MRDNowPlayingClientDelegate>",W,N,V_delegate
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v32@?0@"NSNumber"8@"MRDMediaRemoteClient"16^B24
q24@?0@"MRDMediaRemoteClient"8@"MRDMediaRemoteClient"16
com.apple.mediaremote.mediaremoted.notificationQueue
_MROriginatingNotification
com.apple.mediaremote.companionLinkClient
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
enabled
disabled
com.apple.
MRXPC_APP_INSTALLED_KEY
com.apple.mediaremote.MRDMediaRemoteServer
No diagnostic info
v16@?0@"_MRDiagnosticProtobuf"8
MediaRemote Client Diagnostic
Collected at: %@
================================================================================
All clients timed out
(some clients timed out)
com.apple.mediaremoted
Restoring state of client after daemon launch
server
T@"MRDMediaRemoteServer",R,N
availableOrigins
T@"NSArray",R,N,V_availableOrigins
nowPlayingServer
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
remoteControlServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
routingServer
T@"MRDAVRoutingServer",R,N,V_routingServer
transactionServer
T@"MRDTransactionServer",R,N,V_transactionServer
shouldSendCommandsDuringPhoneCall
TB,R,N,V_shouldSendCommandsDuringPhoneCall
localNowPlayingClient
T@"MRDMediaRemoteClient",R,N
systemMediaClient
systemPodcastClient
frontmostClient
daemonClient
sharedDisplayMonitor
T@"FBSDisplayLayoutMonitor",R,N,V_sharedDisplayMonitor
sharedCompanionLinkClient
T@"RPCompanionLinkClient",R,N
%@, %@
%@ is invalid. You must provide a type and bundleID with %@ or type and PID with %@.
Tq,R,N,V_type
SendCommand
RelayServerMessage
BrowsableContentMessage
Transaction
RestoreState
UnknownType
com.apple.mediaremote.MRDAutoConnectionController
player %@ started playing
q24@?0@"MRAVEndpoint"8@"MRAVEndpoint"16
%@ endpoint changed
v24@?0@"MRAVEndpoint"8@"NSError"16
autoConnectToEndpoint
autoConnectingEndpoints
autoConnectedEndpoints
MRDElectedPlayerControllerEventUserInfoKey
com.apple.mediaremote.electedPlayerController
ElectedOrigin changed from <%@> (<%@>) to <%@> (<%@>)
%@ Playback %@
NowPlayingAppChanged to %@
Was %@grounded
Fore
Back
is playing
SiriIntent
was not playing recently. Last played <%lf> seconds ago
%@ has no activePlayer
%@ is not foregrounded and does not support background audio
%@ has no activeNowPlayingClient
com.apple.mediaremote.electedplayercontroller.playbacktimer
%@ playback timeout event %@ after <%lf> seconds
electedPlayer %@ was not playing recently for event <%@>
electedPlayer %@ is playing for event <%@>
no electedPlayer for event <%@>
OriginChanged
PlaybackChanged
NowPlayingAppChanged
NowPlayingAppForegroundChanged
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_electedPlayerPath
previousElectedPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",R,N,V_previousElectedPlayerPath
T@"NSString",R,N,V_event
T@"NSString",R,N,V_eventReason
T@"NSString",R,N,V_selectionReason
mostRecentEvent
T@"NSString",R,N,V_mostRecentEvent
mostRecentEventReason
T@"NSString",R,N,V_mostRecentEventReason
mostRecentSelectionReason
T@"NSString",R,N,V_mostRecentSelectionReason
T@"<MRDElectedPlayerControllerDelegate>",N,V_delegate
@"MSVPair"8@?0
com.apple.mediaremoted.MRDAirPlayRemoteControlService
T@"<MRDAirPlayRemoteControlServiceDelegate>",W,N,V_delegate
MediaRemote Diagnostic
================================================================================
Active Clients
Active Transactions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Elected Player
Elected Player Reason
LockScreen Widget Active
LockScreen Widget Visible
LockScreen Widget PlayerPath
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
Local OutputContextDataSource
Routing Server
System Discovery Mode (Legacy)
AirPlay Security Settings
Local Receiver Pairing Identity
System Active Endpoints
Auto Connecting Endpoints
Auto Connected Endpoints
Migration Events
Nearby Devices
Immediate Devices
Triggered Devices
Prompting Devices
Migrating Devices
Hosted Routing
Hosted Discovery Mode
Discovery Sessions
Endpoints:
Endpoint
External Device
v32@?0@"MRAVDistantEndpoint"8Q16^B24
Remaining External Devices
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
dateCreated
T@"NSDate",R,N,V_dateCreated
activeClients
T@"NSArray",C,N,V_activeClients
activeTransactions
T@"NSArray",C,N,V_activeTransactions
currentAppActivity
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
T@"NSArray",C,N,V_originClients
activeOrigin
T@"_MROriginProtobuf",&,N,V_activeOrigin
electedPlayer
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_electedPlayer
electedPlayerReason
T@"NSString",&,N,V_electedPlayerReason
TB,N,V_lockScreenWidgetActive
TB,N,V_lockScreenWidgetVisible
lockScreenPlayerPath
T@"_MRNowPlayingPlayerPathProtobuf",&,N,V_lockScreenPlayerPath
enqueuedCommands
T@"NSDictionary",C,N,V_enqueuedCommands
remoteControlContexts
T@"NSArray",C,N,V_remoteControlContexts
queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
connectedExternalDevices
T@"NSArray",C,N,V_connectedExternalDevices
televisionEndpoints
T@"NSArray",C,N,V_televisionEndpoints
localOutputContextDataSource
T@"MROutputContextDataSource",&,N,V_localOutputContextDataSource
systemDiscoveryMode
TI,N,V_systemDiscoveryMode
airplaySecuritySettings
T@"_MRAVAirPlaySecuritySettingsProtobuf",&,N,V_airplaySecuritySettings
localReceiverPairingIdentity
T@"NSString",C,N,V_localReceiverPairingIdentity
systemActiveEndpoints
T@"NSDictionary",C,N,V_systemActiveEndpoints
T@"NSArray",C,N,V_autoConnectedEndpoints
T@"NSArray",C,N,V_autoConnectingEndpoints
migrationEvents
T@"NSArray",C,N,V_migrationEvents
T@"NSArray",C,N,V_nearbyDevices
T@"NSArray",C,N,V_triggeredDevices
T@"NSArray",C,N,V_promptingDevices
T@"NSArray",C,N,V_immediateDevices
T@"NSArray",C,N,V_migratingDevices
isAdvertisingProximity
TB,N,V_isAdvertisingProximity
T@"NSString",C,N,V_advertisingReasonDescription
hostedRouteDiscoveryMode
TI,N,V_hostedRouteDiscoveryMode
hostedDiscoverySessions
T@"NSArray",C,N,V_hostedDiscoverySessions
T@"NSArray",C,N,V_endpoints
hostedExternalDevices
T@"NSDictionary",C,N,V_hostedExternalDevices
recordingEndpointClients
T@"NSArray",C,N,V_recordingEndpointClients
registeredVirtualAudioDevices
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
usedTransactionMemory
TQ,N,V_usedTransactionMemory
allowedTransactionMemory
TQ,N,V_allowedTransactionMemory
transactionWaitDuration
Td,N,V_transactionWaitDuration
genericNetworkService
T@"MRDBonjourRemoteControlService",&,N,V_genericNetworkService
televisionNetworkService
T@"MRDBonjourRemoteControlService",&,N,V_televisionNetworkService
airPlayService
T@"MRDAirPlayRemoteControlService",&,N,V_airPlayService
rapportService
T@"MRDRapportRemoteControlService",&,N,V_rapportService
T@"<MRDRemoteControlServiceDelegate>",W,N,V_delegate
CXCallObserver
MediaRemote
T@"<MRDPhoneCallObserverDelegate>",W,N,V_delegate
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
com.apple.airplay.password
MostRecentlyUsedAVOutputDeviceUIDs
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_UID_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v24@?0@"MRDAVRoute"8@"NSError"16
MRXPC_ROUTE_VOLUME_CONTROL_CAPABILITIES_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
MRXPC_CUSTOM_XPC_ENDPOINT_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
MRXPC_ROUTE_OPERATION
outputDevice = <%@>, client = <%@>, reason = <%@>, operation = <%@>
MRXPC_AIRPLAY_LEADER_TYPE
requestID
v20@?0@"MRAVEndpoint"8I16
v16@?0@"MRAVOutputDevice"8
com.apple.mediaremote.removeFromParentGroup
v16@?0@"MSVSystemDialogResponse"8
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
com.apple.mediaremoted.MRDAVRoutingServer
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_NOT_CONNETED_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
B32@?0@"MRAVConcreteOutputDevice"8Q16^B24
activePasswordDialog
T@"MSVSystemDialog",&,N,V_activePasswordDialog
discoveryTransaction
T@"NSObject<OS_os_transaction>",&,N,V_discoveryTransaction
hostedRoutingService
T@"MRDAVHostedRoutingService",R,N,V_hostedRoutingService
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
RequestingAuthorizationToken
ReceivedAuthorizationToken
Retried
Completed
Cancelled
Failed
TI,R,N,V_connection
identifier
TI,R,N,V_identifier
port
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",W,N,V_delegate
CanSleep
WillSleep
WillPowerOn
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
T@"NSArray",R,C,N
registeredDevices
T@"<MRDVirtualAudioInputServerDelegate>",W,N,V_delegate
RegionalBehaviorEUVolumeLimit
CannotExceedEUVolumeLimit
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_EUVolumeLimitDidChangeNotification
AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
AVSystemController_EUVolumeLimitAttribute
AVSystemController_EUVolumeLimitEnforcedAttribute
AVSystemController_AudioVolumeNotificationParameter
AVSystemController_AudioCategoryNotificationParameter
AVSystemController_AudioVolumeChangeReasonNotificationParameter
AVSystemController_EUVolumeLimitNotificationParameter
AVSystemController_EUVolumeLimitEnforcedNotificationParameter
AVController_RouteDescriptionKey_AVAudioRouteName
AVController_RouteDescriptionKey_RouteSubtype
AVController_RouteDescriptionKey_RouteUID
AVSystemController_FullMuteAttribute
MRDMediaRemoteClientCanBeNowPlayingAppDidChange
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.MRDMediaRemoteClient
com.apple.AssistantServices
com.apple.mediaremote.nearby-device
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
com.apple.PairingManager
%@-%ld
<%@ %p, bundleIdentifier = %@, pid = %ld>
%p {
    bundle identifier = %@
    pid = %ld
    xpc connection = %@
    current task assertion = %@
    assertions = %@
    registered custom origins = %@
    playback queue requests = %@
    can be now playing app = %s
    can be now playing timestamp = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    keep alive = %s
    has requested legacy nowPlayingInfo = %s
    has requested supported commands = %s
iapd
iapd2
v32@?0@8@16^B24
Sending remote control command %@
RequestPlaybackQueue
BeginLoadingBrowsableContent
%llu
Relaying XPC message %@ to client %@
messageHandler
T@"<MRDXPCMessageHandling>",W,N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",W,N,V_delegate
T@"MRXPCConnection",R,N,V_connection
bundleIdentifier
currentTaskAssertion
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
canBeNowPlayingApplication
TB,N,V_canBeNowPlayingApplication
hardwareRemoteBehavior
TI,N,V_hardwareRemoteBehavior
canBeNowPlayingTimestamp
T@"NSDate",&,N,V_canBeNowPlayingTimestamp
routeDiscoveryCount
TQ,R,N,V_routeDiscoveryCount
routeDiscoveryMode
TI,N,V_routeDiscoveryMode
outputDeviceDiscoveryMode
TI,N,V_outputDeviceDiscoveryMode
applicationPickedRoutes
T@"NSArray",C,N
remoteUIService
T@"MRDMediaRemoteUIService",&,N,V_remoteUIService
isActive
keepAlive
TB,N,V_keepAlive
hasRequestedLegacyNowPlayingInfo
TB,N,V_hasRequestedLegacyNowPlayingInfo
hasRequestedSupportedCommands
TB,N,V_hasRequestedSupportedCommands
entitlements
TQ,R,N,V_entitlements
v32@?0@"NSNumber"8@"NSValue"16^B24
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
deviceDescriptor
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
uniqueIdentifier
TQ,R,N,V_uniqueIdentifier
ioDevice
T^{__IOHIDUserDevice=},R,N,V_ioDevice
MRDisplayMonitorLayoutDidChange
MRDisplayMonitorDisplayDidChangeNotification
com.apple.mediaremote.MRDDisplayMonitor
v32@?0@"FBSDisplayLayoutMonitor"8@"FBSDisplayLayout"16@"FBSDisplayLayoutTransitionContext"24
Display%@
LockScreen%@grounded
LockScreen%@Visible
displayOn
TB,N,V_displayOn
lockScreenForegrounded
TB,N,V_lockScreenForegrounded
lockScreenForegroundedDate
T@"NSDate",&,N,V_lockScreenForegroundedDate
lockScreenUnforegroundedDate
T@"NSDate",&,N,V_lockScreenUnforegroundedDate
displayOnDate
T@"NSDate",&,N,V_displayOnDate
displayOffDate
T@"NSDate",&,N,V_displayOffDate
lockScreenVisible
FBSDisplayLayoutMonitor
/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices
FBSDisplayLayoutMonitorConfiguration
FBSDisplayLayoutElementLockScreenIdentifier
isPlayingEvent
playbackSessionChanged
requestNowPlayingState
requestPlaybackSession
userInfoData
eventID
T@"NSString",&,N,V_eventID
userInfo
T@"NSDictionary",&,N,V_userInfo
destination
T@"NSString",&,N,V_destination
T@"NSString",&,N,V_uid
v16@?0@"RPCompanionLinkClient"8
v32@?0@"NSDictionary"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSDictionary"@"NSError">24
request <%@> timeouted after <%lf>
v32@?0@"NSDictionary"8@"NSDictionary"16@"NSError"24
com.apple.mediaremote.%@
T@"RPCompanionLinkClient",&,N,V_connection
eventCallbacks
T@"NSMutableDictionary",&,N,V_eventCallbacks
requestCallbacks
T@"NSMutableDictionary",&,N,V_requestCallbacks
T@"MRDAVRoute",R,N,V_route
inputType
Tq,R,N,V_inputType
B24@?0r*8@"NSObject<OS_xpc_object>"16
A reply object could not be created.
A reply connection could not be obtained.
Application <%@> did not become canBeNowPlaying in <%lf> seconds
SBSCopyFrontmostApplicationDisplayIdentifier
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
<%@ %p, command = %@, %@, commandID = %@, remote control interface = %@, appOptions = %ld, path = %@>
<%@ %p, command = %@, %@, commandID = %@, remote control interface = %@, appOptions = %ld, path = %@, options = %@>
iap2d
BTAvrcp
com.apple.rcd
com.apple.AVRCP
commandType
TI,R,N,V_commandType
optionsData
T@"NSData",R,N
senderAppDisplayID
T@"NSString",R,N,V_senderAppDisplayID
destinationAppDisplayID
destinationAppProcessID
remoteControlInterfaceID
senderID
commandID
appOptions
TI,R,N,V_appOptions
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
shouldImplicitlyLaunchApplication
originatedFromAccessory
originatedFromHID
avrcpCommand
TB,R,N,GisAVRCPCommand
TI,D,N
T@"NSData",C,D,N
T@"_MRNowPlayingPlayerPathProtobuf",C,D,N
T@"NSDate",C,D,N
T@"NSString",C,D,N
T@"NSString",C,N
Ti,N
<%@ %p, command = %@, routedToApp = %@>
routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
-[MRDAVRoute initWithDictionary:]
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_type
T@"NSString",R,N,V_modelName
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
extendedInfo
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
dictionary
T@"NSDictionary",R,N,V_dictionary
indexPathData
T@"NSData",R,N,V_indexPathData
T@"NSString",R,N,V_deviceID
token
T@"NSString",R,N,V_token
expirationDate
T@"NSDate",R,N,V_expirationDate
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
outputDevice
T@"MRAVOutputDevice",R,N,V_outputDevice
avOutputDevice
T@"AVOutputDevice",R,N,V_avOutputDevice
AVOutputDevice
AirPlay
BuiltIn
Wired
Standard
Headphones
Headset
Receiver
LineOut
DisplayPort
HDMI
LowEnergy
SPDIF
outputDeviceUID
type
date
eventReason
selectionReason
initWithFormat:
description
.cxx_destruct
setOutputDeviceUID:
setType:
setDate:
event
setEvent:
setEventReason:
setSelectionReason:
_outputDeviceUID
_type
_date
_event
_eventReason
_selectionReason
init
server
nowPlayingServer
initWithSuiteName:
sharedSystemAudioContext
_hasPersonalDeviceForContext:
_initializeSystemEndpointInfo
defaultCenter
_handleOriginDidRegisterNotification:
addObserver:selector:name:object:
_handleOriginDidUnregisterNotification:
_handleOutputContextDidAddOutputDeviceNotification:
_handleIsPlayingDidChangeNotification:
removeObserver:
dealloc
allValues
countByEnumeratingWithState:objects:count:
numberWithLong:
setObject:forKeyedSubscript:
numberWithInteger:
timeIntervalSinceNow
numberWithDouble:
objectForKeyedSubscript:
updateUserSelectedOutputDeviceUID:event:reason:
_onSerialQueue_updateOutputDeviceUID:type:event:eventReason:selectionReason:
activeOutputDeviceUID:
isEqualToString:
_onSerialQueue_reconnectToOutputDevice:completion:
userInfo
deviceUID
name
originClientForDeviceUID:
clearUserSelectedOutputDeviceUID:event:reason:
object
clearUserSelectedOutputDeviceUIDWithReason:
playerPath
client
processIdentifier
_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:
_onSerialQueue_maybeSetupPlaybackTimerForEvent:
_onSerialQueue_calculateActiveEndpoint:event:reason:
_onSerialQueue_calculateUserSelectedEndpointForEvent:reason:
_onSerialQueue_calculateProactiveEndpoint:
_originClientForDeviceUID:
timeSincePlaying
currentSettings
mediaRecentlyPlayedInterval
endpointRecentlyUserSelectedInterval
localOriginClient
useProactiveEndpoint
activeNowPlayingClient
activePlayerClient
isPlaying
systemEndpointInfo
_writeSystemEndpointInfo:
systemEndpointController:activeOutputDeviceUIDDidChange:type:change:originClient:reason:
_onSerialQueue_maybeSetupUserSelectedTimerForEvent:
sharedConnectionController
connectToOutputDevice:reason:queue:completion:
invalidateWithReason:
initWithInterval:name:queue:block:
origin
availableEndpoints
outputDeviceUIDs
containsObject:
externalDevice
customOrigin
originClientForOrigin:
registrationDate
compare:
outputDevices
deviceType
deviceSubtype
setObject:forKey:
objectForKey:
intValue
enumerateKeysAndObjectsUsingBlock:
activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval
initWithRoutingController:
updateUserSelectedOutputDeviceUID:reason:
delegate
setDelegate:
_serialQueue
_nowPlayingServer
_routingController
_systemEndpointEntries
_cachedHasPersonalDevices
_userDefaults
_userSelectedTimer
_playbackTimer
_delegate
dictionary
_clientCanBeNowPlayingAppNotification:
_handlePlayerIsPlayingDidChangeNotification:
sendRemoteControlCommand:completion:
array
addObject:
unsignedIntValue
initWithData:
optionValueForKey:
commandType
setValue:forKey:
removeObjectForKey:
mutableCopy
setPlayerPath:
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
broadcastRemoteControlCommand:completion:
remoteControlClients
sendRemoteControlCommand:toClients:completion:
commandID
UTF8String
count
initWithCapacity:
_createBroadcastCommandPlayerPathForClient:
bundleIdentifier
_createBroadcastCommandResponseFromStatuses:forClient:
_sendRemoteControlCommand:toDestinationClient:withCompletion:
broadcastCommandWaitDuration
initWithInterval:repeats:queue:block:
_shouldIgnoreCommand:completion:
originatingAppDisplayID
removeObjectsForKeys:
allClients
canBeNowPlayingApplication
_handleSendCommandMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
_handlePrewarmMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsCommandMessage:fromClient:
_handleDismissMediaControlsCommandMessage:fromClient:
_handlePresentMediaControlsLanguageOptionsCommandMessage:fromClient:
setEnqueuedCommands:
setRemoteControlContexts:
data
_sendQueuedCommandsForDestinationClient:
isLocal
boolValue
_clearAllQueuedCommandsForReason:
numberOfActivePhoneCalls:
appOptions
routeUID
length
routingServer
pickCachedRouteWithUID:
displayName
createNowPlayingClient
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localActiveClientBundleIdentifier
nowPlayingDataSource
nowPlayingApplicationDisplayID
clientForBundleIdentifier:
destinationAppDisplayID
resolveExistingPlayerPath:
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
clientWithRegisteredCustomOrigin:
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_applicationIsRunning:
senderID
numberWithUnsignedInt:
initWithType:bundleID:name:
isValid
invalidate
_clearQueuedCommandsForApplicationWithDisplayID:
setDestinationAppDisplayID:
code
domain
queuedCommandsTimeoutInterval
dateCreated
_completionHandler
removeObject:
copy
removeAllObjects
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
localNowPlayingClient
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
isAVRCPCommand
shouldSendCommandsDuringPhoneCall
shouldSendCommand:
setOrigin:
setClient:
setProcessIdentifier:
setBundleIdentifier:
addHandlerReturnStatus:
queryPlayerPath:
nowPlayingClient
arrayWithObjects:count:
initWithArray:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
phoneCallObserver:callDidChange:
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
_commandQueuesForDisplayIDs
_remoteControlContexts
_callObserver
_playerPathCache
entitlements
setPlayer:
initWithCommandType:player:senderAppDisplayID:optionsData:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
routingDataSource
currentVolume
volumeWarningEnabled
volumeLimit
warningState
setWarningState:
_volumeWarningEnabled
_currentVolume
_volumeLimit
_routingDataSource
_warningState
dataWithBytes:length:
notifyDelegateOfStreamEvent:
setInvalidationHandler:
effectiveIdentifier
setDeviceLostHandler:
setDestinationDevice:
handleDataReceived:
registerEventID:options:handler:
activateWithCompletion:
initWithDevice:
_client
_device
sendEventID:event:destinationID:options:completion:
write:maxLength:
standardUserDefaults
dictionaryForKey:
boolForKey:
setBool:forKey:
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
clearRoutedCommands
_routedCommands
_contextID
_originatingAppDisplayID
pickedRoute
pickedRouteForCategory:source:
uniqueIdentifier
pickedRoutes
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRoutesForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
addAuthorizationCallbackForRoute:requestCallback:
removeAuthorizationCallbackForRoute:
authorizationRequestCallbackForRoute:
discoveryMode
setDiscoveryMode:
externalScreenType
currentRouteSupportsVolumeControl
_authorizationCallbacks
_currentRouteSupportsVolumeControl
_discoveryMode
_externalScreenType
_pickedRoute
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
bytes
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_processID
_bundleID
initWithBundleIDs:states:
_frontmostApplicationDidChange:
setHandler:
_registerNotifications
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_unregisterNotifications
_mostRecentlyUpdatedClient
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
removeObserver:name:object:
_notifyDelegateNowPlayingApplicationDidChange
allLocalNowPlayingInfoClients
setCachedNowPlayingClients:
firstObject
setCachedNowPlayingContentItem:
_notifyDelegateNowPlayingPlaybackStateDidChange
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceAnyApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
playbackQueue
dateWithTimeIntervalSinceReferenceDate:
nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
cachedNowPlayingContentItem
serialQueue
setSerialQueue:
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
initWithPlayerPath:
distantPast
_registerCallbacksForPlayerPath:
stringWithFormat:
player
_onQueue_supportedRemoteControlCommands
isEqualToData:
_onQueue_supportedCommandsDidChange:
_onQueue_popState
_onQueue_pushState
_onQueue_playbackQueueDidChange:
playbackState
initWithPlaybackState:date:
_onQueue_playbackState
metadata
hasPlaybackRate
hasElapsedTimeTimestamp
elapsedTimeTimestamp
initWithTimeIntervalSinceReferenceDate:
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_isPlaying
timeIntervalSinceReferenceDate
_onQueue_lastPlayingDate
updatePlaybackQueue:notifyObservers:
_onQueue_updatePlaybackQueue:notifyObservers:
_onQueue_playbackQueueContentItemsDidChange:
_onQueue_playbackQueueContentItemsArtworkDidChange:
_sortSnapshots:
snapshotsForIsPlaying:
sortedArrayUsingComparator:
artworkFileURL
artworkData
_onQueue_saveNowPlayingItemArtworkURL
artworkAvailable
requestArtworkForContentItems:
fileURLWithPath:
defaultManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
writeToURL:options:error:
absoluteString
identifier
stringByReplacingOccurrencesOfString:withString:
updatePlaybackQueue:
nowPlayingPlayerClient:isPlayingDidChange:
setPlayerPlaybackState:
nowPlayingPlayerClient:playbackStateDidChange:
nowPlayingPlayerClient:supportedCommandsDidChange:
nowPlayingPlayerClient:playbackQueueDidChange:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:
nowPlayingPlayerClient:playbackQueueContentItemsDidChange:
nowPlayingPlayerClient:playbackQueueArtworkContentItemsDidChange:
setPushStateIsPlaying:
setPushStatePlaybackState:
setPushStatePlayer:
hasNowPlayingData
setPushStateHasNowPlayingData:
pushStateHasNowPlayingData
pushStateIsPlaying
pushStatePlaybackState
_onQueue_playbackStateDidChanged:
_onQueue_isPlayingDidChange:
nowPlayingPlayerClient:playerStateDidChange:
artworkIdentifier
contentItemIdentifer
enumerateObjectsUsingBlock:
_onQueue_requestArtworkForContentItems:
initWithContentItem:
xpcClientForPlayerPath:
playbackQueueRequests
subscriptionControllerForPlayerPath:
subscribeToPlaybackQueue:forRequest:
sharedManager
playerClientRequestsForPlayerPath:
daemonClient
setWithCapacity:
null
hasRequest:
requestForSubscribedContentItemIdentifier:
_onQueue_updatePlaybackQueueWithItem:notifyObservers:
dictionaryWithObjects:forKeys:count:
postNotificationName:object:userInfo:
unpacketize:completion:
addTransactionCallback:forName:
supportedRemoteControlCommandsData
supportedRemoteControlCommands
setSupportedRemoteControlCommandsData:
setPlaybackQueue:
nowPlayingContentItem
setInferredPlaybackState:
inferredPlaybackState
updatePlaybackState:date:
setPlaybackQueueCapabilities:
playbackQueueCapabilities
nowPlayingState
updateClient:
updatePlayer:
artworkUpdatedForContentItems:
snapshotForPlaybackState:
snapshotForIsPlaying:
snapshots
saveNowPlayingArtworkFileURL
lastPlayingDate
subscriptionController
pushStatePlayer
_playerPath
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueue
_playbackQueueCapabilities
_playerPlaybackState
_inferredPlayerPlaybackState
_playbackStateHistory
_inFlightArtworkRequests
_scheduledSaveNowPlayingArtworkFileURL
_hasNowPlayingDataTransaction
_pushStateIsPlaying
_pushStateHasNowPlayingData
_lastPlayingDate
_subscriptionController
_pushStatePlaybackState
_pushStatePlayer
_contentItemIdentifer
_artworkIdentifier
_playbackState
playerPlaybackState
playbackStateDescription
alloc
setDispatchQueue:
setLastKnownBluetoothAddress:
_txtDataChanged
setBluetoothAddressChangedHandler:
_initializeBonjourServiceWithDeviceInfo:
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
stop
activate
publishWithOptions:
bonjourRemoteControlService:didAcceptConnectionWithInputStream:outputStream:
_txtDataChangedWithUserInfo:
_txtDataChangedWithDeviceInfo:
lastKnownBluetoothAddress
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerExternalDeviceConnections
setIncludesPeerToPeer:
start
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
initWithNetServiceType:
netServiceType
_bluetoothClient
_networkService
_started
_netServiceType
_lastKnownBluetoothAddress
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_anyApplicationIsPlaying
_nowPlayingApplicationPID
_nowPlayingApplicationDisplayID
initWithDeviceFeatures:
_activeSystemContext
outputDevice
canSetVolume
availableOutputDevices
initWithAVOutputDevice:
avOutputDevice
setOutputDevice:options:
isSpeakerRoute
initWithOutputDeviceUIDs:outputDeviceGroupID:features:
setUseWeakMatching:
beginSearchWithTimeout:completion:
sharedSystemScreenContext
sharedAudioPresentationOutputContext
setOutputDevices:
_discoverySession
_activeReconnaissanceSessions
componentsSeparatedByString:
lastObject
numberWithInt:
subarrayWithRange:
componentsJoinedByString:
iTunesAudioContext
auxiliaryOutputContext
_maybeShouldAdvertiseDidChange:
_initializeProximityClient
supportProximityMigration
_attemptInitializeProximityClient
setInterruptionHandler:
_onSerialQueue_prepareNearbyDevice:completion:
setDeviceEnteredNearbyHandler:
setDeviceExitedNearbyHandler:
_onSerialQueue_triggerForDevice:force:update:completion:
setDeviceWillTriggerHandler:
setDeviceDidUntriggerHandler:
_onSerialQueue_migrateNearbyDevice:completion:
setDeviceWasSelectedHandler:
dismissContentForDevice:completion:
_onSerialQueue_triggerAndMigrateDevice:completion:
setDeviceEnteredImmediateHandler:
setDeviceExitedImmediateHandler:
setDeviceWasDismissedHandlerEx:
initWithTimeout:interruptionHandler:
disarm
_reevaluateShouldAdvertise
setShouldAdvertise:
_onSerialQueue_migrateFarAwayDevice:
addObjectsFromArray:
label
_onSerialQueue_prepareFarAwayDevice:completion:
createNotificationInfo
inputUID
updateContent:forDevice:completion:
provideContent:forDevice:force:completion:
migrateWithCompletion:
_onSerialQueue_nearbyEventForUID:
prepareWithCompletion:
_onSerialQueue_farAwayEventForUID:
initWithUID:delegate:
lockScreenController
isLockScreenWidgetActive
_calculateShouldAdvertiseForDescription:
_updateShouldAdvertise:withDescription:
sharedCompanionLinkClient
nameForUID:
proximityEventDidInvalidate:
promptForDevice:
migrate:
events
nearbyDevices
triggeredDevices
promptingDevices
immediateDevices
migratingDevices
isAdvertising
advertisingReasonDescription
_proximityClient
_nearbyEvents
_migratingEvents
_farAwayEvents
_failedFarAwayEvents
_nearbyDevices
_nearbyTriggeredDevices
_nearbyPromptingDevices
_nearbyImmediateDevices
_initializingProximityClient
_shouldAdvertise
_shouldAdvertiseReason
_shouldAdvertiseDescription
closeAll
closeForClient:userCancelled:
pinPairingToken
pinPairingDialogDidClose:forClient:userCancelled:
setPinPairingToken:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
sharedIDSCompanionLinkClient
deviceUIDForRapportUID:
rapportUIDForDeviceUID:
_prepareWithCompletion:
exceptionWithName:reason:userInfo:
rapportUID
setDeviceUID:
error
isPrepared
isPreparing
_prepareCompletions
_isPrepared
_isPreparing
_rapportUID
_inputUID
_name
_deviceUID
_error
playerPathDidInvalidateNotification:
originDidInvalidateNotification:
activeEndpointDidChangeNotification:
localizedName
_nominateDirectionFromEndpoints:proactiveEndpoint:forReason:
isLocalEndpoint
canMigrateToEndpoint:queue:completion:
_fetchEndpointForOutputDeviceAndProactiveEndpoint:completion:
startEvent:
requestID
endEvent:withError:
timeIntervalSinceDate:
report
logicalDeviceID
searchForLogicalOutputDeviceUID:timeout:reason:queue:completion:
setOutputDevices:initiator:withReplyQueue:completion:
addOutputDevices:initiator:withReplyQueue:completion:
endpointOptions
setEndpointOptions:
migrateToLogicalOutputDevice:request:initiator:queue:completion:
migrateToEndpoint:request:queue:completion:
_bodyFromContentItem:
setBody:
setHeader:
_title
setTitle:
_interactionDirection
setInteractionDirection:
sfDeviceClassCode
setDeviceClass:
initWithString:
setAttachmentURL:
title
trackArtistName
albumArtistName
radioStationName
stringByAppendingString:
sharedLocalEndpointForRoutingContextWithUID:
connectToExternalDeviceWithCompletion:
contentItems
outputDevicesMatchingPredicate:
deviceInfo
_invalidateForNotitication:
_sourceEndpoint
_destinationEndpoint
_outputDevice
_sourcePlayerClient
_nominationReason
_invalidated
registerEvent:callback:
setLabel:
resolvedPlayerPath
isAirplayActive
sendRequest:destination:userInfo:timeout:response:
_supportedCommands
_playbackSessionType
_deviceInfo
_routingDataSourcePickableRoutesDidChange:
cancelSearch
setCallback:
_timeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setTimeoutTimer:
callback
_endSearch
matchesUniqueIdentifier:
_concludeSearchWithRoute:
timeoutTimer
initWithRouteUID:
_searchInProgress
_timeoutInterval
_routeUID
_callback
_timeoutTimer
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
setQueuedInitiatePlaybackMessages:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
relayXPCMessage:andReply:resultCallback:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
_handleSupportedAPIsDidChangeForClient:
dataWithPropertyList:format:options:error:
_messageRequiresMediaServerBlessing:
initWithType:pid:name:
relayXPCMessage:andReply:
_messageCanLaunchApp:
_takeProcessAssertionForClient:withReason:
indexPathData
connection
_scheduleEndProcessAssertionForClient:
initWithBytes:length:
localizedDescription
postClientNotificationNamed:userInfo:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
initWithBundleID:indexPathData:
_invalidate
clientInterface
setRemoteObjectInterface:
serviceInterface
setExportedInterface:
exportedInterface
protocol
weakProxyWithObject:protocol:
setExportedObject:
resume
addObserver:
postNotificationName:object:
remoteObjectProxy
availableEndpointsDidChange:
availableOutputDevicesDidChange:
devicePresenceDetected
setEnableThrottling:
hostedDiscoverySessionDidInvalidate:
getDevicePresenceDetectedWithCompletion:
getDiscoveryModeWithCompletion:
setDiscoveryMode:enableThrottling:withCompletion:
getAvailableEndpointsWithCompletion:
getAvailableOutputDevicesWithCompletion:
hostedRoutingController:endpointsDidChange:
hostedRoutingController:outputDevicesDidChange:
initWithConnection:hostedRoutingController:
hostedRoutingController
transaction
setTransaction:
enableThrottling
updatedEndpoints
setUpdatedEndpoints:
updatedOutputDevices
setUpdatedOutputDevices:
endpointsDelayed
setEndpointsDelayed:
devicesDelayed
setDevicesDelayed:
_enableThrottling
_endpointsDelayed
_devicesDelayed
_connection
_hostedRoutingController
_transaction
_updatedEndpoints
_updatedOutputDevices
initWithInputStream:outputStream:runLoop:
initWithQueue:
unregisterAllVirtualVoiceInputDevices
registeredToNowPlayingUpdates
appendString:
registeredToOutputDeviceUpdates
registeredToVolumeUpdates
registeredKeyboardUpdates
supportedMessages
lastSupportedMessageType
numberWithUnsignedLongLong:
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
shortValue
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
credentials
setCredentials:
sessionPeer
serverDelegate
setServerDelegate:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_credentials
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
anonymousListener
endpoint
connectionType
externalDeviceForEndpoint:
setHostedRouteDiscoveryMode:
allObjects
setHostedDiscoverySessions:
setEndpoints:
availableExternalDevices
setHostedExternalDevices:
listener:shouldAcceptNewConnection:
xpcEndpoint
endpointForOrigin:
endpointForDeviceUID:
_anonymousListener
_hostedDiscoverySessions
initWithEndpointFeatures:
setAlwaysAllowUpdates:
sharedAudioPresentationContext
setRoutingContextUID:
weakObjectsHashTable
_handleObserverDiscoveryModeDidChangeNotification:
_handleExternalDeviceConnectionStateDidChangeNotification:
_handleEndpointOutputDevicesDidChangeNotification:
_onQueue_reloadWithOutputDevices:
addOutputDevicesChangedCallback:
removeOutputDevicesChangedCallback:
_onQueue_determineGroupLeaderForOutputDevices:options:
initWithDesignatedGroupLeader:outputDevices:
_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:
valueForKey:
_processDiscoveryObserverChanges
_onQueue_removeExternalDeviceWithEndpointIdentifier:
_onQueue_reloadGroups
isProxyGroupPlayer
canRelayCommunicationChannel
isGroupable
isLocalDevice
isRemoteControllable
connectionState
canAccessAppleMusic
canAccessiCloudMusicLibrary
isGroupLeader
designatedGroupLeader
initWithOutputDevice:avOutputDevice:connectionType:
initWithTransport:
initWithExternalDevice:
setExternalDevice:
setGroupID:
descriptor
initWithDescriptor:
groupID
transport
hostedExternalDeviceEndpointDidChange:
externalDeviceListenerEndpoint
setExternalDeviceListenerEndpoint:
arrayWithCapacity:
dictionaryWithCapacity:
tombstone
removeObjectIdenticalTo:
availableConcreteOutputDevices
makeEndpointWithOutputDevices:options:
endpointForOutputDeviceIdentifier:
_allObservers
observerCalloutQueue
setObserverCalloutQueue:
discoverySession
setDiscoverySession:
weakObservers
setWeakObservers:
externalDeviceMap
setExternalDeviceMap:
externalDeviceGraveyard
setExternalDeviceGraveyard:
discoverySessionOutputDevicesToken
setDiscoverySessionOutputDevicesToken:
concreteOutputDevices
setConcreteOutputDevices:
endpoints
localEndpoint
setLocalEndpoint:
_observerCalloutQueue
_weakObservers
_externalDeviceMap
_externalDeviceGraveyard
_discoverySessionOutputDevicesToken
_outputDevices
_concreteOutputDevices
_endpoints
_localEndpoint
parentGroupIdentifier
isAirPlayReceiverSessionActive
parentGroupContainsDiscoverableLeader
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
timeIntervalSince1970
expirationDate
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
stringWithUTF8String:
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
path
_dbHandle
_tokenRecords
_path
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
decodeEntries
_handleLocalPlaybackBeganNotification:
_maybeMostRecentlyPlayedDeviceChanged:
_handleDidAddPersonalDeviceNotifciation:
initWithDictionaryRepresenation:
_addEntry:
registerRequest:callback:
_shouldSendCompanionLinkMessage
sendEventToHome:userInfo:
sendPlaybackSessionUpdateToCompanionCoalesceInterval
_maybeSendPlaybackStateMessageToCompanion
supportLastPlayingDevice
mostRecentDeviceUID
setCurrentPlaybackSessionTypes:
setSupportedPlaybackSessionTypes:
setCurrentPlaybackSessionIdentifier:
setIsPlaying:
setLastPlayingDate:
setLastNotPlayingDate:
setContentItem:
setDeviceInfo:
dictionaryRepresentation
addEntriesFromDictionary:
sendLastPlayingDeviceToHome
sendEventToCompanion:userInfo:
encodeEntries
lastPlayingDeviceThresholdInterval
sortUsingComparator:
initWithProximityController:
lastSentEntry
setLastSentEntry:
entries
setEntries:
userDefaults
setUserDefaults:
sendingPlaybackStateToCompanion
setSendingPlaybackStateToCompanion:
proximityController
setProximityController:
_sendingPlaybackStateToCompanion
_lastSentEntry
_entries
_proximityController
isEqualToDate:
contentItem
currentPlaybackSessionTypes
isEqualToArray:
supportedPlaybackSessionTypes
currentPlaybackSessionIdentifier
setIncludeMetadata:
numberWithBool:
lastNotPlayingDate
setDictionaryRepresentation:
_isPlaying
_lastNotPlayingDate
_currentPlaybackSessionTypes
_supportedPlaybackSessionTypes
_currentPlaybackSessionIdentifier
_contentItem
_dictionaryRepresentation
initWithCString:encoding:
whitelist
_query:
transactionWaitDurationOnOutOfMemory
_transactionEnded
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
_calculateMemory
outOfMemoryWaitDuration
_processMessage:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
send:toConnection:completion:
cancel
_bytesInUse
_taskAssertion
initializeServer
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
setTransactions:
setUsedTransactionMemory:
setAllowedTransactionMemory:
setTransactionWaitDuration:
adjustMemory:
handleContentItemTransaction:packets:group:
handlePlaybackQueueRequestTransaction:packets:group:
UUID
UUIDString
allKeys
sendContentItemTransaction:request:playerPath:
_sendContentItemTransaction:request:playerPath:
archivedDataWithRootObject:requiringSecureCoding:error:
setIdentifier:
setUserData:
initWithData:forKey:
sendContentItemTransactionWithPlaybackQueue:request:playerPath:
transactions
_queue
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
userData
valueWithBytes:objCType:
objCType
getValue:
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
queryExistingPlayerPathForXPCMessage:
hasRequestedLegacyNowPlayingInfo
setHasRequestedLegacyNowPlayingInfo:
addRequest:
playerClient
location
setLocation:
setLength:
hasLocation
hasLength
createPlaybackQueueFromCacheForRequest:fromNowPlayingClient:toXpcClient:
sendPlaybackQueueResponse:forRequest:withMessage:fromNowPlayingClient:toXpcClient:completion:
relayRequest:withMessage:toNowPlayingClient:backToXpcClient:completion:
_cachingPolicyForRequest:forPlayerPath:
originClient
xpcClient
removeRequest:
handlePlaybackQueueRequest:fromClient:
originClientRequestsForPlayerPath:
_deviceInfoDidChange
sharedConnection
_outputContextDevicesDidChange
_onAccessQueue_deviceInfoDidChangeWithDeviceInfo:
deviceInfoDataSource:deviceInfoDidChange:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_gestaltNotificationToken
_airplayPerfsNotifyToken
_airplayActiveNotifyToken
_accessSerialQueue
_deviceInfoReloadScheduled
localPlaybackState
localLastPlayingDate
_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:
_registerCallbacks
defaultSupportedCommands
nowPlayingOriginClient:deviceInfoDidChange:previousDeviceInfo:
numberWithFloat:
nowPlayingOriginClient:currentRouteVolumeDidChange:
nowPlayingOriginClient:currentRouteVolumeControlCapabilitiesDidChange:
setVolumeControlCapabilities:
existingNowPlayingClientForClient:
nowPlayingClients
playerClients
_reevaluateState
nowPlayingOriginClient:applicationActivityDidEnd:
_updateActivityStatus:
nowPlayingOriginClient:applicationActivityDidBegin:
creatorProcessID
nowPlayingClientForPlayerPath:
existingNowPlayingClientForPlayerPath:
_onQueue_addNowPlayingClient:
removePlayerClientForPlayer:
nowPlayingOriginClient:clientDidUnregister:
setOverrideClient:
setExplicitNowPlayingClient:
setInferredNowPlayingClient:
_calculateComputedNowPlayingClient
setComputedNowPlayingClient:
setActivity:
updateDefaultSupportedCommandsData:forClient:
defaultSupportedCommandsDataForClient:
defaultSupportedCommandsData
_reloadNowPlayingClientFromDataSource:
_stateFromDataSource:
_shouldHandleNotification:
laterDate:
_onQueue_maybeSavePlaybackStateForNotification:
existingNowPlayingClientForPid:
computeNowPlayingApplication
nowPlayingClientForClient:
mostRecentPlayers
nowPlayingApplicationTimeout
_playerPathForNowPlayingClient:
_calculateActiveNowPlayingClient
nowPlayingOriginClient:activePlayerPathDidChange:withPlaybackState:
status
setStatus:
nowPlayingOriginClient:applicationActivityStatusDidChange:
nowPlayingOriginClient:clientDidRegister:
playerClientForPlayer:
inferredNowPlayingClient
_handleNowPlayingAppMaybeDidChange:
nowPlayingOriginClientPlaybackDidTimeout:
setLocalPlaybackState:
setLocalLastPlayingDate:
_handlePlayerIsPlayingDidChange:
_handleOriginIsPlayingDidChange:
initWithOrigin:
deviceInfoData
volume
setVolume:
volumeControlCapabilities
flipVolumeControlCapabilityFlag:enable:
isActivityActive
existingNowPlayingClientForDisplayID:
removeNowPlayingClientForClient:
defaultSupportedCommandsForClient:
setNowPlayingDataSource:
setDeviceInfoDataSource:
setDeviceInfoData:
activity
overrideClient
explicitNowPlayingClient
deviceInfoDataSource
computedNowPlayingClient
_nowPlayingClients
_volumeControlCapabilities
_volume
_explicitNowPlayingClient
_activeNowPlayingClient
_activeNowPlayingClientTransaction
_defaultSupportedCommandsData
_origin
_deviceInfoData
_activity
_overrideClient
_nowPlayingDataSource
_deviceInfoDataSource
_registrationDate
_computedNowPlayingClient
_inferredNowPlayingClient
isEqualToDictionary:
extendedInfo
outputDevicesSnapshot
indexOfObjectPassingTest:
matchesUID:
initWithDictionary:
isPicked
canBeDefaultSystemRoute
_routeDescription
stopReceivingUpdatesForSource:
_setReceiveUpdates:forSource:
_shouldNotifyChange:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
isActivePlayer
stateObserver:didReceiveSupportedCommandsChange:isActivePlayer:
stateObserver:didReceivePlayStateChange:isActivePlayer:
stateObserver:didReceivePlaybackQueueChange:isActivePlayer:
stateObserver:didReceivePlaybackQueueCapabilitiesChange:isActivePlayer:
stateObserver:didReceiveNowPlayingInfoChange:isActivePlayer:
stateObserver:didReceiveContentItemChange:playerPath:isActivePlayer:
stateObserver:didReceiveContentItemArtworkChange:playerPath:isActivePlayer:
stateObserver:didReceiveApplicationClientStateDidChange:
stateObserver:didReceivePlayerStateDidChange:
stateObserver:didReceiveClientDidUnregister:
stateObserver:didReceivePlayerDidUnregister:
stateObserver:didReceiveNowPlayingNotification:
stateObserver:didReceiveVolumeControlCapabilitiesChange:
stateObserver:didReceiveDeviceInfoDidChange:
stateObserver:didReceiveDefaultSupportedCommandsChange:playerPath:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_handleNowPlayingClientDidChange:
_addNowPlayingNotification:selector:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleNowPlayingInfoChanged:
_handleContentItemsChanged:
_handleContentItemArtworkChanged:
_handleApplicationClientStateChanged:
_handlePlayerStateChanged:
_handleRemoveClient:
_handleRemovePlayer:
_handleDeviceInfoChanged:
_handleDefaultSupportedCommandsChanged:
_removeNowPlayingNotifications
_handleVolumeAvailabilityDidChangeNotification:
addObserverForName:object:queue:usingBlock:
beginReceivingUpdatesForSource:
_handleNowPlayingNotification:
_coalescingNowPlayingUpdates
_coalescingArtworkUpdates
_observedNowPlayingNotifications
_observedVolumeControlNotificationToken
_registeredForNowPlayingCount
_registeredForVolumeAvailabilityCount
_registerAVSystemControllerNotifications
_unregisterAVSystemControllerNotifications
sharedCoordinator
clearDiscoveryModeForDataSource:
setDiscoveryMode:forDataSource:
_oddsShimDataSource
_mediaServerController
attributeForKey:
currentRouteHasVolumeControl
uppercaseString
valueForKeyPath:
didCancelRoutePicking:
setAttribute:forKey:error:
_notifyDelegateRoutesDidChange
_postCurrentRouteHasVolumeControlDidChangeNotification:
sharedAVSystemController
_currentRouteHasVolumeControlDidChangeNotification:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_avSessionMediaServicesResetNotification:
sharedInstance
_descriptionForDiscoveryMode:
numberWithUnsignedInteger:
_updateMediaServerDiscoveryMode
objectEnumerator
currentDiscoveryMode
_dataSourceHashesToDiscoveryModes
_currentDiscoveryMode
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
initWithOptions:
presentWithCompletion:
_handleLayoutDidChangeNotification:
_handleElectedPlayerDidChangeNotification:
_onQueue_reevaluateShouldShowLockScreenForReason:
lockScreenVisible
lockScreenController:lockScreenWidgetActiveDidChange:
setPreviousPlayerPath:
previousPlayerPath
isLockScreenWidgetVisible
lockScreenController:playerPathDidChange:
_onSerialQueue_restoreElectedPlayer
_onQueue_calculateShouldShowLockScreenForReason:
setAssertion:
assertion
electedPlayerPath
setElectedPlayerPath:
changeType
setChangeType:
eventType
setEventType:
_displayMonitor
_playerResult
_previousPlayerPath
_playerPathInvalidationToken
_previousPlayerPathInvalidationToken
_timer
_assertion
_electedPlayerPath
_changeType
_eventType
createAssertion
delayCreateAssertion
acquireContentProviderAssertionForType:slot:identifier:errorHandler:
hostedExternalDeviceConnectionStateDidChange:withError:
hostedExternalDeviceNameDidChange:
hostedExternalDeviceDidReceiveCustomData:withName:
hostedExternalDeviceVolumeDidChange:forEndpointWithIdentifier:forOutputDeviceWithIdentifier:
hostedExternalDeviceVolumeCapabilitiesDidChange:forEndpointWithIdentifier:forOutputDeviceWithIdentifier:
initWithConnection:
registeredCallbacks
setRegisteredCallbacks:
notifications
setNotifications:
setConnectionState:
processName
_connectionState
_registeredCallbacks
_notifications
_processName
_initializeExternalDevice:
setName:
setUniqueIdentifier:
_externalDeviceClientDidInvalidate:
hostName
setHostName:
port
setHostPort:
setSupportedMessages:
isPaired
setPaired:
isUsingSystemPairing
setUsingSystemPairing:
currentConnection
_externalDeviceClientForConnection:
_reloadHostedExternalDeviceCallbacks
_reloadHostedExternalDeviceNotifications
connectWithOptions:
disconnect:
unpair
_endpointSupportsVolumeControl:
setOutputDeviceVolume:outputDeviceUID:queue:completion:
wantsVolumeNotifications
outputDeviceForUID:
isVolumeControlAvailable
outputDeviceVolume:queue:completion:
volumeCapabilities
outputDeviceVolumeControlCapabilities:queue:completion:
modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:withReplyQueue:completion:
sendCustomData:withName:
ping:callback:withQueue:
sendButtonEvent:
_processCanMigrateToLocalEndpointEvent:error:
_reloadEndpoint
_maybePostVolumeDidChange:outputDevice:
_maybePostVolumeControlCapabilitiesDidChange:outputDevice:
removeAllOutputDevices
_allExternalDeviceClients
_mutableExternalDeviceClientsWithRegisteredCallbacks:
personalOutputDevices
setDistantPersonalOutputDevices:
_onSerialQueue_reevaluateVolumeControlCapabilitiesForEndpoint:
initWithObjects:
initWithUniqueIdentifier:
setConnectionRecoveryBehavior:
setConnectionStateCallback:withQueue:
setUseOutputDeviceCache:
externalOutputContext
updateOutputDevices:
setOutputDevicesUpdatedCallback:withQueue:
removeOutputDevices:
setOutputDevicesRemovedCallback:withQueue:
useOutputDeviceCache
updateVolume:outputDeviceUID:
setVolumeCallback:withQueue:
updateVolumeControlCapabilities:outputDeviceUID:
setVolumeControlCapabilitiesCallback:withQueue:
discoverySessionWithEndpointFeatures:
_handleMaybeCanMigrateToLocalEndpointDidChange:
setNameCallback:withQueue:
setCustomDataCallback:withQueue:
setWantsNowPlayingNotifications:
setWantsVolumeNotifications:
setWantsOutputDeviceNotifications:
_endpointShouldPostVolumeNotifications:outputDevice:
_postVolumeDidChange:endpoint:outputDevice:
_externalDeviceClientPIDs
containsString:
postClientNotificationNamed:userInfo:predicate:
_postVolumeControlCapabilitiesDidChange:endpoint:outputDevice:
_isEndpointsDesignatedGroupLeader:
groupContainsGroupLeader
isEqualToOrderedSet:
outputDeviceUIDsMatchingPredicate:
_endpointIsSolo:
logicalOutputDeviceCount
outputContextDataSource:didAddOutputDevice:
outputContextDataSource:didRemoveOutputDevice:
outputContextDataSource:outputDevice:didChangeVolume:
outputContextDataSource:outputDevice:didChangeVolumeControlCapabilities:
getExternalDeviceMetadataWithCompletion:
getCustomOriginDataWithCompletion:
getConnectionStateWithCompletion:
outputDeviceVolume:withCompletion:
setOutputDeviceVolume:forOutputDevice:withCompletion:
outputDeviceVolumeControlCapabilities:withCompletion:
modifyOutputContextOfType:addingDeviceUIDs:removingDeviceUIDs:settingDeviceUIDs:completion:
pingWithTimeout:callback:
sendButtonEventWithUsagePage:usage:down:
externalDeviceClients
_resetExternalDevice:
xpcListener
setXpcListener:
externalDeviceCallbackQueue
setExternalDeviceCallbackQueue:
mutableExternalDeviceClients
setMutableExternalDeviceClients:
tombstoned
setTombstoned:
silentDiscoverySession
setSilentDiscoverySession:
canMigrateToLocalEndpointError
setCanMigrateToLocalEndpointError:
_useOutputDeviceCache
_tombstoned
_externalDevice
_xpcListener
_externalDeviceCallbackQueue
_mutableExternalDeviceClients
_externalOutputContext
_endpoint
_silentDiscoverySession
_canMigrateToLocalEndpointError
initWithURL:
sharedOutputContextController
transactionWaitDurationOnNetworkSend
cryptoSession
performBlock:
streamsRunLoop
_handleClientConnection:
supportedProtocolMessages
_verifyClientVersionCompatibility:withError:
encryptionType
cryptoEnabled
_handleDeviceInfoRequest:fromClient:
_handleCryptoPairingMessage:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleGetRemoteTextInputSessionMessage:fromClient:
_handleRemoteTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
initWithConnectionState:
clientConnection:didReceiveMessage:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeDevice:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
_handleModifyOutputContextRequestMessage:fromClient:
_handleGetVolumeMessage:fromClient:
_handleSetVolumeMessage:fromClient:
_handleGetVolumeControlCapabilitiesMessage:fromClient:
_handlePlaybackSessionRequestMessage:fromClient:
_handlePlaybackSessionMigrateRequestMessage:fromClient:
initWithUnderlyingCodableMessage:error:
replyWithMessage:
_disconnectClient:
_sendStateUpdateMessageFromSource:predicate:ifPredicateTrueBlock:ifPredicateFalseBlock:
initWithDeviceInfo:
_sendStateUpdateMessageFromSource:usingCreateBlock:
initWithClient:
nowPlayingStateDidChange:createMessageBlock:createLegacyMessageBlock:
_shouldSendStateUpdateMessageFromSource:toClient:
isSupported:
localActivePlayerClient
initWithNowPlayingState:
clients
initWithName:object:userInfo:
initWithNotification:
filteredContentItemsBySubscriptionsForContentItems:
initWithContentItems:forPlayerPath:
_filteredSupportedCommandsForCommands:destinedForClient:
sharedQueueVersion
applicationBundleIdentifier
supportsSharedQueue
setPlaybackState:
playbackStateTimestamp
setPlaybackStateTimestamp:
initWithCapabilities:
initWithDefaultSupportedCommands:forClient:
_clientForPairingSession:
initWithPairingData:status:
shouldLogPairingSetupCode
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
_createLocalizedOutputDevice:
setIsVolumeControlAvailable:
setHasIsVolumeControlAvailable:
setHasVolume:
initWithSkeleton:
_createLocalizedOutputDevices:
_createVolumelessOutputDevices:
initWithOutputDevices:
_createSkeletonOutputDevices:
initWithOutputDeviceUIDs:
initWithVolume:endpointUID:outputDeviceUID:
initWithCapabilities:endpointUID:outputDeviceUID:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_notifyAndDisconnectClients:withError:completion:
setConnectedExternalDevices:
setTelevisionEndpoints:
setLocalOutputContextDataSource:
externalDeviceSleepAssertionOnClientConnectDuration
initWithName:timeout:
postClientNotificationNamed:
_findClientIf:
minimumSupportedProtocolVersion
integerValue
minimumSupportedHangdogApplicationVersion
encryptedMessageWithState:text:attributes:usingCryptoSession:
version
initWithVersion:data:
initWithInputMode:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
sendMessage:queue:reply:
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
gameControllerConnectionDidInterrupt:
initWithName:packets:playerPath:
messageSentCallbacks
callbackWithQueue:block:
addCallback:
messagePurgedCallbacks
setTransactionCallback:forName:
pairingManager
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
setWithObjects:
deleteIdentityWithError:
pairedDevices
stringWithCString:encoding:
_unpair:
sharedLogger
setShouldLog:
initWithKey:data:
_isConnectionForManagedConfigIDAllowed:
isRetrying
setCryptoSession:
state
openInState:
pairingData
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
command
options
initWithCommandID:sendError:results:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
setRegisteredToNowPlayingUpdates:
volumeUpdates
setRegisteredToVolumeUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
outputDeviceUpdates
setRegisteredToOutputDeviceUpdates:
_addOutputDevicesToMessage:forClient:
_addVolumeToMessage:forClient:
_addNowPlayingStateToMessage:forClient:
addMessage:
initWithHiliteMode:
initWithDeviceID:errorCode:
buffer
time
gain
request
initWithPlaybackQueue:forPlayerPath:
updatePeer
_syncStateToClient:
contextType
addingOutputDeviceUIDs
removingOutputDeviceUIDs
settingOutputDeviceUIDs
setWithArray:
setReturnPartialResults:
isEqualToSet:
initWithRoute:inputType:
response
sendMessage:timeout:queue:reply:
isSubsetOfSet:
initWithRoute:status:
intersectsSet:
localDeviceUID
volumeForOutputDeviceUID:
initWithVolume:
volumeControlCapabilitiesForOutputDeviceUID:
setVolume:outputDeviceUID:
initWithPlaybackSession:
playbackSession
initWithRequest:
stream:handleEvent:
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
remoteControlService:didAcceptConnectionWithInputStream:outputStream:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
textEditingService:textEditingDidBegin:withAttributes:payload:
textEditingService:textDidChange:payload:
textEditingService:attributesDidChange:payload:
textEditingServiceTextEditingDidEnd:
textEditingService:echoWithText:
clientDidDisconnect:
clearEndpointForClient:
_broadcastKeyboardMessageWithState:text:attributes:
_broadcastRemoteTextInputMessageWithPayload:
_handleHiliteModeChanged:
_remoteControlService
_streamsRunLoopThread
_streamsRunLoop
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_hidEventManager
_stateObserver
_pinPairingDialog
_sleepObserver
_pairingManager
_outputContextController
takelockScreenAssertion
_addOrigin:withDeviceInfo:emitNotification:
initWithOriginClient:
_clientCanBeNowPlayingAppDidChangeNotification:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleGetClientPropertiesMessage:fromClient:
_handleSetClientPropertiesMessage:fromClient:
_handleUpdateClientPropertiesMessage:fromClient:
_handleGetPlayerPropertiesMessage:fromClient:
_handleSetPlayerPropertiesMessage:fromClient:
_handleUpdatePlayerPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleRegisterCustomOriginMessage:fromClient:
_handleRemoveCustomOriginMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleContentItemChangedMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
_handleGetDeviceInfo:fromClient:
_handleUpdateDeviceInfo:fromClient:
_handleGetElectedPlayerPathMessage:fromClient:
_handlePlaybackSessionRequest:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleSetDefaultSupportedCommandsMessage:fromClient:
_handleSendPlaybackSessionMessage:
activeOriginClient
_onQueue_activeOriginClient
_onQueue_allNowPlayingInfoClients
_onQueue_originClientForOrigin:
resolvePlayerPath:fromClient:
existingPlayerClientForPlayer:
_onQueue_queryPlayerPath:
initWithUnresolvedPlayerPath:
setOriginClient:
setIsActiveOrigin:
setNowPlayingClient:
isActiveOrigin
setIsActiveClient:
existingPlayerClientForPlayerPath:
setPlayerClient:
isActiveClient
setIsActivePlayer:
setXpcClient:
_onQueue_originClientForDeviceUID:
_onQueue_originClientForGroupLeaderOfDeviceUID:
registeredCustomOrigins
arrayWithArray:
localActiveNowPlayingClient
_removeNowPlayingClient:forOrigin:
removeRegisteredCustomOrigin:
_clientsWithRegisteredOrigin:
_removeOrigin:
originClients
setActiveOrigin:
addRegisteredCustomOrigin:
setCanBeNowPlayingApplication:
initWithUTF8String:
setCanBeNowPlayingTimestamp:
queryPlayerPathForXPCMessage:fromClient:
setHardwareRemoteBehavior:
unarchivedObjectOfClass:fromData:error:
restoreStateFromController:
isLocalOrigin
setActivePlayerClient:
setHasRequestedSupportedCommands:
unresolvedPlayerPath
postSupportedCommandsDidChange:forPlayerPath:
postClientNotificationNamed:forPlayerPath:
postNowPlayingPlayerStateDidChange:forPlayerPath:
postIsPlayingDidChange:forPlayerPath:
maybePostDistrubtedIsPlayingNotification
postPlabackStateDidChange:forPlayerPath:
postPlaybackQueueDidChange:forPlayerPath:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:
postPlaybackQueueContentItemsDidChange:forPlayerPath:
postPlaybackQueueContentItemsArtworkDidChange:forPlayerPath:
postActivePlayerDidChangeForPlayerPath:withPlaybackState:
postNowPlayingClientStateDidChange:forPlayerPath:
postPlayerDidRegisterForPlayerPath:
postPlayerDidUnregisterWithPlaybackState:forPlayerPath:
postClientNotificationNamed:forPlayerPath:userInfo:predicate:
postNowPlayingApplicationDidChangeForPlayerPath:withPlaybackState:
postDeviceInfoDidChange:previousDeviceInfo:forOrigin:
postClientDidRegisterForPlayerPath:
postClientDidUnregisterForPlayerPath:
postClientNotificationNamed:forPlayerPath:userInfo:
postActiveOriginDidChange:withPlaybackState:
setOriginClients:
setElectedPlayer:
mostRecentEvent
mostRecentEventReason
mostRecentSelectionReason
setElectedPlayerReason:
setLockScreenWidgetActive:
setLockScreenWidgetVisible:
setLockScreenPlayerPath:
postClientDidRegisterCanBeNowPlayingForPlayerPath:
postClientDidUnregisterCanBeNowPlayingForPlayerPath:
hasRequestedSupportedCommands
postClientNotificationNamed:forPlayerPath:predicate:
enumerateFilteredContentItemsBySubscriptionsForContentItems:block:
numberWithUnsignedLong:
activePlayerPath
setLocalOriginClient:
postOriginDidRegister:
_onQueue_setActiveOrigin:saveState:
postOriginDidUnRegister:deviceInfo:
setActiveOriginClient:
nowPlayingServer:activeOriginDidChangeFromOriginClient:toOriginClient:
_onQueue_savePersistentActiveOrigin:
groupedDevices
hasRegisteredCustomOrigin:
lockScreenController:lockScreenWidgetVisibleDidChange:
electedPlayerController:electedPlayerDidChange:change:event:reason:
nowPlayingClient:activePlayerDidChangeFromPlayerClient:toPlayerClient:
nowPlayingClient:clientStateDidChange:
nowPlayingClient:playerDidRegister:
nowPlayingClient:playerDidUnregister:
nowPlayingClient:applicationDidForeground:
activeClientPID
localActiveClientPID
activeClientBundleIdentifier
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
localActivePlayerPath
allNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
localPlayersForXpcClient:
originClientForGroupLeaderOfDeviceUID:
clearNowPlayingClientForXPCClient:
augmentUserInfo:
_onQueue_restoredActiveOrigin
electedPlayerController
_originClients
_nowPlayingApplicationIsPlayingStates
_playbackQueueServer
_electedPlayerController
_lockScreenController
_activeOriginClient
_localOriginClient
stringByAppendingFormat:
isActivity
_isActiveOrigin
_isActiveClient
_isActivePlayer
_xpcClient
_playerClient
_nowPlayingClient
_originClient
_unresolvedPlayerPath
initializeBundleIdentifier
initializeDisplayName
anyPlayerIsPlaying
isForegrounded
supportsBackgroundAudio
setProcessUserIdentifier:
parentApplicationBundleIdentifier
needNowPlayingForegroundState
setIsForegrounded:
applicationInfoForApplication:
bundleInfoValueForKey:PID:
setSupportsBackgroundAudio:
_onQueue_setActivePlayerClient:
setNowPlayingPlayerClient:
_onQueue_activePlayerClient
_onQueue_existingPlayerClientForPlayer:
_onQueue_anyPlayerIsPlaying
_onQueue_playerClientForPlayer:
_onQueue_addPlayer:
_onQueue_removePlayerClientForPlayer:
setPushStateClient:
setPushStateActivePlayerClient:
notificationPlayerPathFromPlayer:
nowPlayingPlayerClient
pushStateActivePlayerClient
pushStateClient
stateMonitor
setStateMonitor:
_playerClients
_isForegrounded
_supportsBackgroundAudio
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_pushStateClient
_stateMonitor
_init
_restoreNowPlayingClientState
_clientDidOpenConnection:
_saveClientsList
keepAlive
setConnectedClientPIDs:
canBeNowPlayingClients
canBeNowPlayingTimestamp
insertObject:atIndex:
postClientNotificationNamed:predicate:
initWithNotification:userInfo:queue:
postNotification:
clientForPlayerPath:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleGetMediaAppIsInstalledMessage:fromClient:
_handlePing:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
_handleCollectClientDiagnosticsMessage:fromClient:
setKeepAlive:
_internalMediaRemoteNotificationIsLegal:
hasPrefix:
applicationProxyForIdentifier:
appState
createDiagnosticInfo
_collectDiagnosticFromClient:completion:
appendFormat:
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
removeClientForPID:
setActiveClients:
setActiveTransactions:
setLocalNowPlayingClient:
systemMediaClient
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
connectedClientPIDs
_postAppActivityNotificationNamed:withActivity:
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
mostRecentCanBeNowPlayingClient
mostRecentPlayingClient
systemPodcastClient
_sendMediaRemoteCommand:withOrigin:
availableOrigins
remoteControlServer
transactionServer
sharedDisplayMonitor
_listenerConnection
_connectionQueue
_localRoutingDataSource
_volumeController
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_shouldSendCommandsDuringPhoneCall
_availableOrigins
_sharedDisplayMonitor
initWithName:bundleID:subsystem:reason:flags:
initWithName:pid:subsystem:reason:flags:
connectToAllEndpointsWhenAnyEndpointBeginsPlayback
connectToAllOutputDevicesForReason:comparator:queue:completion:
connectToEndpointWhenBeginsPlayback
connectToUserSelectedEndpoint
_handleActiveSystemEndpointDidChangeNotification:
initWithDeallocHandler:
_connectToAllOutputDevicesForReason:comparator:queue:completion:
_connectToOutputDevice:reason:completion:
_discoverOutputDevice:reason:completion:
_onSerialQueue_connectToEndpoint:reason:queue:completion:
addEndpointsChangedCallback:
discoverEndpointTimeoutInterval
_onSerialQueue_discoverOutputDevice:connect:reason:completion:
hostedRoutingService
searchEndpointsForOutputDeviceUID:timeout:reason:queue:completion:
debugName
_onSerialQueue_addConnectedEndpoint:
_handleEndpointDidInvalidateNotification:
_onSerialQueue_removeConnectedEndpoint:
autoConnectingEndpoints
autoConnectedEndpoints
discoverOutputDevice:reason:queue:completion:
_pendingReconSessions
_pendingReconSessionCompletions
_connectedEndpoints
_connectingEndpoints
_pendingConnectingEndpointCompletions
_handleNowPlayingApplicationDidChangeNotification:
_handleNowPlayingApplicationDidForegroundNotification:
_onQueue_reevaluateElectedPlayerForEvent:withReason:
_shouldUseNotification:
_onQueue_maybeSetupPlaybackTimeoutTimerForEvent:
setOriginClient:withChangeType:
_onQueue_calculateElectedPlayerForOriginClient:event:reason:
_resolveChangeTypeWithOriginClient:forEvent:
previousElectedPlayerPath
_previousElectedPlayerPath
_mostRecentEvent
_mostRecentEventReason
_mostRecentSelectionReason
strongToWeakObjectsMapTable
setCommunicationChannelDelegate:
initWithCommunicationChannel:
pairWithFirst:second:
_didReceiveData:fromCommunicationChannelWithID:withIOStreamFactoryBlock:
_didCloseCommunicationChannelWithID:
first
second
airPlayRemoteControlService:didAcceptConnectionWithInputStream:outputStream:
handleStreamDisconnect
outputContextOutgoingCommunicationChannelDidBecomeAvailable:
outputContext:didReceiveData:fromCommunicationChannel:
outputContext:didCloseCommunicationChannel:
_channelIDsToInputStreamsMap
_channelIDsToOutputStreamsMap
_systemMusicContext
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
string
_appendDescribableArray:toString:withTitle:indentLevel:
activeClients
activeTransactions
currentAppActivity
setCurrentAppActivity:
activeOrigin
electedPlayer
electedPlayerReason
lockScreenWidgetActive
lockScreenWidgetVisible
lockScreenPlayerPath
enqueuedCommands
remoteControlContexts
queuedInitiatePlaybackMessages
connectedExternalDevices
televisionEndpoints
localOutputContextDataSource
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
setAirplaySecuritySettings:
localReceiverPairingIdentity
setLocalReceiverPairingIdentity:
systemActiveEndpoints
setSystemActiveEndpoints:
setAutoConnectedEndpoints:
setAutoConnectingEndpoints:
migrationEvents
setMigrationEvents:
setNearbyDevices:
setTriggeredDevices:
setPromptingDevices:
setImmediateDevices:
setMigratingDevices:
isAdvertisingProximity
setIsAdvertisingProximity:
setAdvertisingReasonDescription:
hostedRouteDiscoveryMode
hostedDiscoverySessions
hostedExternalDevices
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
usedTransactionMemory
allowedTransactionMemory
transactionWaitDuration
_lockScreenWidgetActive
_lockScreenWidgetVisible
_isAdvertisingProximity
_systemDiscoveryMode
_hostedRouteDiscoveryMode
_dateCreated
_activeTransactions
_currentAppActivity
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_activeOrigin
_electedPlayer
_electedPlayerReason
_lockScreenPlayerPath
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_localOutputContextDataSource
_airplaySecuritySettings
_localReceiverPairingIdentity
_systemActiveEndpoints
_autoConnectedEndpoints
_autoConnectingEndpoints
_migrationEvents
_triggeredDevices
_promptingDevices
_immediateDevices
_migratingDevices
_advertisingReasonDescription
_hostedExternalDevices
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
shouldInitializeGenericBonjourService
shouldInitializeTelevisionBonjourService
shouldInitializeRapportService
_notifyDelegateWithInputSteam:outputStream:
rapportRemoteControlService:didAcceptConnectionWithInputStream:outputStream:
genericNetworkService
setGenericNetworkService:
televisionNetworkService
setTelevisionNetworkService:
airPlayService
setAirPlayService:
rapportService
setRapportService:
_genericNetworkService
_televisionNetworkService
_airPlayService
_rapportService
setDelegate:queue:
phoneCallDidChangeNotification:
_notifyDelegate:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
_assertionID
sharedAuthorizationSession
_loadMostRecentlyPicked
_updateSystemRouteDiscoveryMode
_setPickedRoute:withPassword:options:
applicationPickedRoutes
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleClearAllAVRoutePasswordsMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_handleGetHostedRoutingXPCEndpointMessage:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleUpdateActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDsMessage:fromClient:
_handleGetHostedEndpointForOriginMessage:fromClient:
_handleGetHostedEndpointForDeviceUIDMessage:fromClient:
_handleCreateEndpointWithDevices:fromClient:
_handleGroupDevicesAndSendCommand:fromClient:
_handlePredictGroupLeader:fromClient:
_handleRemoveFromParentGroup:fromClient:
_handlePromptForRouteAuthorizationMessage:fromClient:
_handlePresentRouteAuthorizationStatusMessage:fromClient:
_handleGetAirplayStatus:fromClient:
_handleSetNearbyDevice:fromClient:
_handleResetOutputContextMessage:fromClient:
_createAirPlaySecuritySettings
_postRouteStatusDidChangeNotificationForRoute:newStatus:
_savedPasswordForOutputDevice:
_clearPasswordForOutputDevice:
respondWithAuthorizationToken:completionHandler:
authorizationTokenType
initWithRoute:inputType:responseCallback:cancelCallback:
_handleAuthorizationRequest:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
_setApplicationPickedRoutes:updateRoutes:forClient:
indexOfObject:inRange:
removeObjectAtIndex:
removeObjectsInRange:
_saveMostRecentlyPicked
initWithResponse:
inputType
initWithOutputDevice:
_handleErrorStatus:forRoute:
_resolveEndpointForOutputDeviceIDs:completion:
_predictGroupLeaderForOutputDeviceIDs:completion:
removeOutputDeviceFromParentGroup:queue:completion:
_postExternalScreenDidChange
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_handleAuthenticationFailureForRoute:withOptions:
respondWithAuthorizationToken:
_passwordDialogForRouteWithName:usingInputType:
buttonIdentifier
textFieldValues
dictionaryWithDictionary:
setActivePasswordDialog:
_clientInvalidatedNotification:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
outputContextManagerForAllOutputContexts
setAlternateButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
discoveryTransaction
setDiscoveryTransaction:
dismiss
_presentPasswordDialogForRoute:withOptions:
identifyingMACAddress
lowercaseString
_existingKeychainAccountForOutputDevice:password:
indexesOfObjectsPassingTest:
objectsAtIndexes:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
activePasswordDialog
_systemEndpointController
_autoConnectionController
_routeUIDsToIgnorePortStatusFailures
_reconnaissanceSessions
_mostRecentlyPickedDevices
_mostRecentStatus
_lastAirplayActiveState
_airplayActiveNotificationToken
_homeServer
_hostedRoutingService
_activePasswordDialog
_discoveryTransaction
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
_identifier
_port
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
registeredDeviceWithID:
setRecordingState:
indexOfObject:
registeredDevices
_registeredDevices
_setupNotifications
_tearDownNotifications
_initializeVolumeLimitDataIfNecessary
_internalSetVolumeValue:
_systemVolumeDidChange:
_systemMuteDidChange:
_EUVolumeLimitDidChange:
_EUVolumeLimitEnforcedDidChange:
_volumeFromAVController
floatValue
_postVolumeDidChange:
_updateVolumeValueCache
getVolumeForRoute:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
volumeCategoryForAudioCategory:
setVolumeTo:forCategory:
_volumeValue
_deviceEnforcesEUVolumeLimit
_volumeLimitDataInitialized
initWithConnection:queue:
setMaxConcurrentOperationCount:
_handleXPCMessage:
copyWithZone:
sharedServiceClient
setActivePlayerPath:
notification
xpcMessage
_createNotificationMessage:userInfo:
setXpcMessage:
queue
optionsData
_relayXPCMessage:andReply:resultCallback:
addOperationWithBlock:
isActive
setOutputDeviceDiscoveryMode:
setApplicationPickedRoutes:
setRemoteUIService:
_runAssertionName
messageHandler
hardwareRemoteBehavior
routeDiscoveryCount
outputDeviceDiscoveryMode
remoteUIService
_source
_registeredCustomOrigins
_applicationPickedRoutes
_bundleIdentifier
_assertions
_relayingMessages
_entitlements
_canBeNowPlayingApplication
_keepAlive
_hasRequestedLegacyNowPlayingInfo
_hasRequestedSupportedCommands
_hardwareRemoteBehavior
_routeDiscoveryMode
_outputDeviceDiscoveryMode
_messageHandler
_currentTaskAssertion
_canBeNowPlayingTimestamp
_routeDiscoveryCount
_remoteUIService
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_uniqueIdentifier
_ioDevice
_fbsDisplayMonitorConfiguration
layoutMonitor:didUpdateDisplayLayout:withContext:
setTransitionHandler:
monitorWithConfiguration:
configurationForDefaultMainDisplayMonitor
scheduleLayoutChangeForReason:
displayOn
lockScreenForegrounded
displayBacklightLevel
setDisplayOn:
elements
setLockScreenForegrounded:
lockScreenForegroundedDate
setLockScreenForegroundedDate:
lockScreenUnforegroundedDate
setLockScreenUnforegroundedDate:
displayOnDate
setDisplayOnDate:
displayOffDate
setDisplayOffDate:
_layoutChangeScheduled
_displayOn
_lockScreenForegrounded
_lockScreenForegroundedDate
_lockScreenUnforegroundedDate
_displayOnDate
_displayOffDate
eventID
setEventID:
setUserInfo:
destination
setDestination:
setUid:
_eventID
_userInfo
_destination
_uid
setConnection:
rapportCompanionLinkClient:
_registerEvent:
_registerRequest:
_sendEvent:userInfo:destination:uid:
_sendRequest:userInfo:destination:uid:date:response:
activeDevices
mediaRouteIdentifier
mediaRemoteIdentifier
_resolveEventID:
_handleEventID:event:options:
_handleRequestID:request:options:response:
registerRequestID:options:handler:
sendEvent:destination:userInfo:
_enqueueEvent:userInfo:destination:uid:
_enqueueRequest:userInfo:destination:uid:date:response:
sendRequestID:request:destinationID:options:responseHandler:
eventCallbacks
setEventCallbacks:
requestCallbacks
setRequestCallbacks:
_pendingRegisteredEvents
_registeredEvents
_pendingEvents
_pendingRegisteredRequests
_registeredRequests
_pendingRequests
_eventCallbacks
_requestCallbacks
_responseCallback
_cancelCallback
_inputType
errorWithDomain:code:userInfo:
launchApplicationTimeoutInterval
defaultWorkspace
applicationIsInstalled:
applicationInfoForApplication:completion:
remoteControlInterfaceID
_optionsDictionary
_copyWithZone:usingConcreteClass:
setCommand:
setOptions:
setOriginUID:
setSenderAppDisplayID:
setDestinationAppProcessID:
setRemoteControlInterfaceID:
setAppOptions:
propertyListWithData:options:format:error:
mutableCopyWithZone:
initWithProtocolMessage:
protobufData
originatedFromAccessory
originatedFromHID
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
setCommandType:
setOptionsData:
setOptionValue:forKey:
_routedAppDisplayID
sampleRate
_picked
_speakerRoute
_modelName
_dictionary
_indexPathData
_deviceID
_token
_expirationDate
modelID
sharedLocalDevice
requiresAuthorization
initWithRoutingContextUID:multipleBuiltInDevices:
initWithAVOutputDevice:sourceInfo:
_avOutputDevice
MRDSystemEndpointEntry
MRDAVSystemEndpointController
MRDRemoteControlServer
MRDPhoneCallObserverDelegate
NSObject
MRDXPCMessageHandling
MRDDiagnosticCollecting
MRDVolumeController
MRRapportInputStream
MRRapportOutputStream
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDiOSSimulatorNowPlayingDataSource
MRDNowPlayingPlayerClient
MRDNowPlayingPlayerClientArtworkRequest
MRDNowPlayingPlayerClientPlaybackState
MRDNowPlayingPlayerClientPlaybackStateSnapshot
MRDBonjourRemoteControlService
NSNetServiceDelegate
MRDNowPlayingDataSource
MRDOutputDeviceRoutingDataSource
MRDRapportRemoteControlService
MRDProximityController
MRDMigrationEventDelegate
MRDPinPairingDialog_ATV
MRDMigrationEvent
MRDNearbyMigrationEvent
MRDFarAwayMigrationEvent
MRDMigrationEventAdditions
MRDAVReconnaissanceSession
MRDBrowsableContentServer
MRDAVHostedDiscoverySession
MRAVDistantRoutingDiscoveryServiceProtocol
MRDAVHostedRoutingObserver
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MRDAVHostedRoutingService
NSXPCListenerDelegate
MRDAVHostedDiscoverySessionDelegate
MRDAVHostedRoutingController
MRDExternalDeviceCredentialDatabase
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDExternalDeviceHomeServer
MRDExternalDeviceHomeServerRecentlyPlayedEntry
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDPinPairingDialog
MRHID
MRDNowPlayingPlaybackQueueServer
MRDDeviceInfoDataSource
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceDelegate
MRDDeviceInfoDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDMediaServerAVRoutingDataSource
_MRDMediaServerStateCoordinator
MRDPinPairingDialog_CFUN
MRDLockScreenController
MRDLockScreenAssertion
MRDAVHostedExternalDeviceClient
MRAVDistantExternalDeviceClientProtocol
MRDAVHostedExternalDevice
MROutputContextDataSourceDelegate
MRAVDistantExternalDeviceServiceProtocol
MRDAirPlayInputStream
MRDAirPlayOutputStream
MRDExternalDeviceRemoteServer
NSStreamDelegate
MRCryptoPairingSessionDelegate
MRDRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTextEditingServiceDelegate
MRProtocolClientConnectionDelegate
MRDNowPlayingServer
MRDLockScreenControllerDelegate
MRDElectedPlayerControllerDelegate
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDTaskAssertion
MRDAutoConnectionController
MRDElectedPlayerController
MRDAirPlayRemoteControlService
AVOutputContextCommunicationChannelDelegate
MRDDiagnostic
MRDRemoteControlService
MRDAirPlayRemoteControlServiceDelegate
MRDBonjourRemoteControlServiceDelegate
MRDRapportRemoteControlServiceDelegate
MRDPhoneCallObserver
CXCallObserverDelegate
MRDSleepAssertion
MRDAVRoutingServer
AVOutputDeviceAuthorizationSessionDelegate
MRDAVSystemEndpointControllerDelegate
MRDSleepObserver
MRDVirtualAudioInputServer
MRDMediaServerVolumeController
NSCopying
MRDMediaRemoteClient
MRDVirtualTouchDevice
MRDDisplayMonitor
MRCompanionLinkClientEvent
MRCompanionLinkClientRequest
MRCompanionLinkClient
MRDRouteAuthorizationRequest
MRDRemoteControlCommand
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDOutputDeviceRoute
MRDAVOutputDeviceRoute
@16@0:8
v16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
@"NSString"
@"NSDate"
@24@0:8@16
@24@0:8q16
v32@0:8@16@24
v40@0:8@16q24@32
v40@0:8q16q24@32
@40@0:8q16q24^@32
@32@0:8q16^@24
@24@0:8^@16
v56@0:8@16q24q32@40@48
v32@0:8@16@?24
B24@0:8@16
@"NSObject<OS_dispatch_queue>"
@"MRDNowPlayingServer"
@"MRDAVHostedRoutingController"
@"NSMutableDictionary"
@"NSUserDefaults"
@"MSVPersistentTimer"
@"<MRDAVSystemEndpointControllerDelegate>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@"MRDPhoneCallObserver"16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"MRDMediaRemoteClient"24
v24@0:8@"MRDDiagnostic"16
v40@0:8@16@24@?32
@32@0:8@16@24
@"MRDPhoneCallObserver"
@24@0:8^{_NSZone=}16
B28@0:8f16^@20
f16@0:8
v24@0:8Q16
@"MRDAVRoutingDataSource"
@"RPCompanionLinkClient"
@"RPCompanionLinkDevice"
q32@0:8r*16Q24
I24@0:8@16
v28@0:8I16@20
@20@0:8I16
@"NSMutableArray"
@28@0:8@16I24
B32@0:8@16@24
B36@0:8@16@24I32
B20@0:8I16
@?24@0:8@16
I16@0:8
v20@0:8I16
@"MRDAVRoute"
v24@0:8^{__IOHIDEvent=}16
v24@0:8I16I20
^{__IOHIDEventSystemClient=}
@28@0:8@16i24
i16@0:8
@"BKSApplicationStateMonitor"
@"NSSet"
@"_MRContentItemProtobuf"
d16@0:8
v28@0:8@16B24
@20@0:8B16
v20@0:8B16
@"_MRNowPlayingPlayerPathProtobuf"
@"NSArray"
@"NSData"
@"_MRPlaybackQueueProtobuf"
@"MRDNowPlayingPlayerClientPlaybackState"
@"NSObject<OS_os_transaction>"
@"MRPlaybackQueueSubscriptionController"
@"<MRDNowPlayingPlayerClientDelegate>"
@"_MRNowPlayingPlayerProtobuf"
@28@0:8I16@20
q24@0:8@16
v40@0:8@16@24@32
v24@0:8@"NSNetService"16
v32@0:8@"NSNetService"16@"NSDictionary"24
v32@0:8@"NSNetService"16@"NSData"24
v40@0:8@"NSNetService"16@"NSInputStream"24@"NSOutputStream"32
@"CUBluetoothClient"
@"NSNetService"
@"<MRDBonjourRemoteControlServiceDelegate>"
@"<MRDNowPlayingDataSourceDelegate>"
@"AVOutputDeviceDiscoverySession"
@"<MRDRapportRemoteControlServiceDelegate>"
v24@0:8@"MRDMigrationEvent"16
v40@0:8@16B24B28@?32
v32@0:8q16@24
q24@0:8^@16
@"SFProximityClient"
@"NSMutableSet"
v24@0:8@?16
@"<MRDMigrationEventDelegate>"
@"NSError"
C16@0:8
B40@0:8@16@24^@32
@"MRAVEndpoint"
@"MRAVOutputDevice"
@"MRDNowPlayingPlayerClient"
^{_MRNowPlayingPlayerPathProtobuf=#@@@}
^{_MRDeviceInfoMessageProtobuf=#Q@@@@i@@@@I@@I@@@I@@@@@BBBBBBBBBB{?=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}
v32@0:8d16@?24
@?16@0:8
@"NSTimer"
v32@0:8@?16@24
v48@0:8@16{?=^QQ}24@40
@"MRDBrowsableContentAPICoordinator"
v32@0:8I16B20@?24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?I@"NSError">16
v32@0:8I16B20@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v32@0:8@"MRDAVHostedRoutingController"16@"NSArray"24
@"NSXPCConnection"
@"<MRDAVHostedDiscoverySessionDelegate>"
v32@0:8@"MREmulatedGameController"16@"_MRGameControllerPropertiesProtobuf"24
@40@0:8@16@24@32
Q24@0:8@16
@24@0:8Q16
Q24@0:8Q16
v28@0:8{_MRHIDButtonEvent=IIB}16
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRPasscodeCredentials"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"MRDAVHostedDiscoverySession"16
@"NSXPCListener"
@32@0:8@16Q24
@32@0:8@16^B24
@"MRAVConcreteRoutingDiscoverySession"
@"NSHashTable"
@"NSDictionary"
@"MRAVConcreteEndpoint"
^{sqlite3=}
@"MRDMediaRemoteClient"
@"MRDExternalDeviceHomeServerRecentlyPlayedEntry"
@"MRDProximityController"
^{_MRDeviceInfoMessageProtobuf=#Q@@@@i@@@@I@@I@@@I@@@@@BBBBBBBBBB{?=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}16@0:8
v24@0:8^{_MRDeviceInfoMessageProtobuf=#Q@@@@i@@@@I@@I@@@I@@@@@BBBBBBBBBB{?=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}16
^{_MRNowPlayingPlayerPathProtobuf=#@@@}16@0:8
v24@0:8^{_MRNowPlayingPlayerPathProtobuf=#@@@}16
@40@0:8Q16@24@32
@32@0:8Q16@24
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v64@0:8@16@24Q32Q40@48@?56
v32@0:8@16Q24
v64@0:8@"MRTransaction"16@"NSArray"24Q32Q40@"NSObject<OS_dispatch_queue>"48@?<v@?>56
v32@0:8@"MRTransaction"16Q24
Q24@0:8@"MRTransaction"16
@"<MRDPinPairingDialogDelegate>"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16@0:8
@48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
v64@0:8@16@24@32@40@48@?56
v56@0:8@16@24@32@40@?48
I32@0:8@16@24
v32@0:8@"MCProfileConnection"16@"NSDictionary"24
^{MGNotificationTokenStruct=}
@"_MRDeviceInfoMessageProtobuf"
@"<MRDDeviceInfoDataSourceDelegate>"
v24@0:8@"MRDNowPlayingDataSource"16
v32@0:8@"MRDDeviceInfoDataSource"16@"_MRDeviceInfoMessageProtobuf"24
v20@0:8f16
v24@0:8I16B20
@20@0:8i16
v20@0:8i16
@"MRDNowPlayingClient"
@"_MROriginProtobuf"
@"MRMutableApplicationActivity"
@"MRDNowPlayingDataSource"
@"MRDDeviceInfoDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDAVRouteExtendedInfo"
v28@0:8B16q20
v32@0:8@16:24
@"<MRDNowPlayingStateObserverDelegate>"
@"MRDOutputDeviceRoutingDataSource"
B24@0:8^@16
@"MRDDisplayMonitor"
@"MRDNowPlayingServerResult"
@"MSVTimer"
@"<MRDLockScreenControllerDelegate>"
@"MRDLockScreenAssertion"
@"SBSLockScreenContentAssertion"
v36@0:8f16@20@28
v36@0:8I16@20@28
v28@0:8I16@"NSError"20
v24@0:8@"NSString"16
v32@0:8@"NSData"16@"NSString"24
v36@0:8f16@"NSString"20@"NSString"28
v24@0:8@"MRAVDistantEndpoint"16
v36@0:8I16@"NSString"20@"NSString"28
v36@0:8@16@24f32
v36@0:8@16@24I32
v32@0:8@"MROutputContextDataSource"16@"MRAVOutputDevice"24
v36@0:8@"MROutputContextDataSource"16@"MRAVOutputDevice"24f32
v36@0:8@"MROutputContextDataSource"16@"MRAVOutputDevice"24I32
v36@0:8f16@20@?28
v52@0:8I16@20@28@36@?44
v28@0:8I16I20B24
v24@0:8@?<v@?@"MRAVDistantExternalDeviceMetadata"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v24@0:8@"NSError"16
v32@0:8@"NSString"16@?<v@?f@"NSError">24
v36@0:8f16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?I@"NSError">24
v52@0:8I16@"NSArray"20@"NSArray"28@"NSArray"36@?<v@?@"NSError">44
v32@0:8d16@?<v@?@"NSError">24
v28@0:8f16@20
@"MRTransportExternalDevice"
@"MRExternalOutputContextDataSource"
@"MRAVDistantEndpoint"
@"MRAVRoutingDiscoverySession"
v32@0:8@"NSStream"16Q24
v40@0:8@16d24@?32
v32@0:8@"MRCryptoPairingSession"16@"NSData"24
v32@0:8@"MRCryptoPairingSession"16@"NSString"24
v24@0:8@"MRCryptoPairingSession"16
v40@0:8@"MRCryptoPairingSession"16d24@?<v@?@"NSString">32
v32@0:8@"MRCryptoPairingSession"16@"NSError"24
v40@0:8@"MRDRemoteControlService"16@"NSInputStream"24@"NSOutputStream"32
v40@0:8@16Q24@32
v40@0:8@"MRDExternalDeviceServerClientConnection"16Q24@"_MRGameControllerPropertiesProtobuf"32
v36@0:8@16@24B32
v44@0:8@16@24@32B40
v28@0:8@16I24
v32@0:8@"MRDNowPlayingStateObserver"16@"_MRDeviceInfoMessageProtobuf"24
v32@0:8@"MRDNowPlayingStateObserver"16@"_MRNowPlayingClientProtobuf"24
v32@0:8@"MRDNowPlayingStateObserver"16@"_MRNowPlayingPlayerPathProtobuf"24
v36@0:8@"MRDNowPlayingStateObserver"16@"_MRSetStateMessageProtobuf"24B32
v44@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"_MRNowPlayingPlayerPathProtobuf"32B40
v32@0:8@"MRDNowPlayingStateObserver"16@"NSNotification"24
v28@0:8@"MRDNowPlayingStateObserver"16I24
v40@0:8@"MRDNowPlayingStateObserver"16@"NSArray"24@"_MRNowPlayingPlayerPathProtobuf"32
v32@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24
v36@0:8@"MRDPinPairingDialog"16@"MRDExternalDeviceServerClientConnection"24B32
v32@0:8@"MRDSleepObserver"16@?<v@?>24
v24@0:8@"MRDSleepObserver"16
v48@0:8@16@24@32@40
v48@0:8@"MRDTextEditingService"16@"NSString"24@"MRTextEditingAttributes"32@"RTIDataPayload"40
v40@0:8@"MRDTextEditingService"16@"NSString"24@"RTIDataPayload"32
v40@0:8@"MRDTextEditingService"16@"MRTextEditingAttributes"24@"RTIDataPayload"32
v24@0:8@"MRDTextEditingService"16
v32@0:8@"MRDTextEditingService"16@"NSString"24
v32@0:8@"MRProtocolClientConnection"16@"MRProtocolMessage"24
v24@0:8@"MRProtocolClientConnection"16
v40@0:8@16@?24@?32
@24@0:8@?16
B32@0:8@16^@24
v48@0:8q16@?24@?32@?40
v32@0:8q16@?24
B32@0:8q16@24
v40@0:8Q16@24@32
v24@0:8B16B20
v36@0:8{_MRHIDButtonEvent=IIB}16@28
v64@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16Q48@56
@"MRDRemoteControlService"
@"CURunLoopThread"
@"NSRunLoop"
@"MRDSystemHIDEventManager"
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"CUPairingManager"
@"MROutputContextController"
v28@0:8@"MRDLockScreenController"16B24
v32@0:8@"MRDLockScreenController"16@"_MRNowPlayingPlayerPathProtobuf"24
v56@0:8@16@24q32q40@48
v56@0:8@"MRDElectedPlayerController"16@"_MRNowPlayingPlayerPathProtobuf"24q32q40@"NSString"48
v40@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24@"MRDNowPlayingPlayerClient"32
v32@0:8@"MRDNowPlayingClient"16@"_MRNowPlayingClientProtobuf"24
v32@0:8@"MRDNowPlayingClient"16@"MRDNowPlayingPlayerClient"24
v28@0:8@"MRDNowPlayingClient"16B24
v28@0:8@16f24
v40@0:8@"MRDNowPlayingOriginClient"16@"_MRDeviceInfoMessageProtobuf"24@"_MRDeviceInfoMessageProtobuf"32
v36@0:8@"MRDNowPlayingOriginClient"16@"_MRNowPlayingPlayerPathProtobuf"24I32
v32@0:8@"MRDNowPlayingOriginClient"16@"MRApplicationActivity"24
v32@0:8@"MRDNowPlayingOriginClient"16@"MRDNowPlayingClient"24
v28@0:8@"MRDNowPlayingOriginClient"16I24
v28@0:8@"MRDNowPlayingOriginClient"16f24
v24@0:8@"MRDNowPlayingOriginClient"16
v32@0:8@"MRDNowPlayingPlayerClient"16@"_MRNowPlayingPlayerProtobuf"24
v28@0:8@"MRDNowPlayingPlayerClient"16B24
v28@0:8@"MRDNowPlayingPlayerClient"16I24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSData"24
v32@0:8@"MRDNowPlayingPlayerClient"16@"_MRPlaybackQueueProtobuf"24
v32@0:8@"MRDNowPlayingPlayerClient"16Q24
v32@0:8@"MRDNowPlayingPlayerClient"16@"NSArray"24
v28@0:8B16@20
v32@0:8Q16@24
B36@0:8@16@24B32
@"MRDNowPlayingPlaybackQueueServer"
@"MRDElectedPlayerController"
@"MRDLockScreenController"
@"MRDNowPlayingOriginClient"
@"<MRDNowPlayingClientDelegate>"
@"_MRNowPlayingClientProtobuf"
v24@0:8@"MRDMediaRemoteClient"16
v36@0:8@16I24@28
v36@0:8@"MRDVirtualAudioInputServer"16I24@"MRDVirtualAudioInputServerDevice"28
v32@0:8@"MRDPhoneCallController"16@"MRDRemoteControlCommand"24
v48@0:8@16@24@32@?40
@"NSObject<OS_xpc_object>"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"FBSDisplayLayoutMonitor"
@40@0:8q16@24@32
@36@0:8q16i24@28
v48@0:8@16@?24@32@?40
v44@0:8@16B24@28@?36
v32@0:8@16q24
q32@0:8@16q24
@40@0:8@16q24^@32
@"NSNumber"
@"<MRDElectedPlayerControllerDelegate>"
v24@0:8@"AVOutputContext"16
v40@0:8@"AVOutputContext"16@"NSData"24@"AVOutputContextCommunicationChannel"32
v32@0:8@"AVOutputContext"16@"AVOutputContextCommunicationChannel"24
v40@0:8@16Q24@?32
^{NSMapTable=#}
@"AVOutputContext"
@"<MRDAirPlayRemoteControlServiceDelegate>"
v44@0:8@16@24@32I40
v48@0:8@16@24@32I40B44
v24@0:8d16
@"MRApplicationActivity"
@"MROutputContextDataSource"
@"_MRAVAirPlaySecuritySettingsProtobuf"
v40@0:8@"MRDAirPlayRemoteControlService"16@"NSInputStream"24@"NSOutputStream"32
v40@0:8@"MRDBonjourRemoteControlService"16@"NSInputStream"24@"NSOutputStream"32
v40@0:8@"MRDRapportRemoteControlService"16@"NSInputStream"24@"NSOutputStream"32
@"<MRDRemoteControlServiceDelegate>"
@"MRDBonjourRemoteControlService"
@"MRDAirPlayRemoteControlService"
@"MRDRapportRemoteControlService"
v32@0:8@"CXCallObserver"16@"CXCall"24
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
@32@0:8@16d24
B40@0:8@16@24@32
v32@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24
B40@0:8@"AVOutputDeviceAuthorizationSession"16@"AVOutputDeviceAuthorizationRequest"24@"NSString"32
v64@0:8@16@24q32q40@48@56
v64@0:8@"MRDAVSystemEndpointController"16@"NSString"24q32q40@"MRDNowPlayingOriginClient"48@"NSString"56
v28@0:8@16i24
@32@0:8@16q24
v28@0:8i16@20
@32@0:8@16^@24
v36@0:8@16B24@28
@"MRDAVSystemEndpointController"
@"MRDAutoConnectionController"
@"MRDExternalDeviceHomeServer"
@"MRDAVHostedRoutingService"
@"MSVSystemDialog"
^{IONotificationPort=}16@0:8
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDVirtualAudioInputServerDelegate>"
v36@0:8@16B24@?28
@"NSObject<OS_dispatch_source>"
@"NSOperationQueue"
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRXPCConnection"
@"MRDMediaRemoteUIService"
B48@0:8{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}16
^{__IOHIDUserDevice=}16@0:8
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
v56@0:8@16@24@32d40@?48
@48@0:8@16q24@?32@?40
@44@0:8I16@20@28@36
@24@0:8^{__CFString=}16
@32@0:8^{_NSZone=}16#24
v32@0:8@16^{__CFString=}24
@"AVOutputDevice"
[SystemEndpointController] Reevaluating %{public}@ActiveEndpoint because %{public}@
[SystemEndpointController] %{public}@
[SystemEndpointController] %@SystemEndpoint remains <%@>, eventType = <%@>, eventReason = <%@>, selectionReason = <%@>
[SystemEndpointController] Updating activeEndpointInfo %@
Caching resolved player path %{public}@ for context %{public}@.
Expiring player path for context %{public}@.
Got a Play command from assistant, context: %{public}@.
Redirecting to cached path: %{public}@
Command <%{public}@> ignored because of device state
Broadcasting command <%{public}@> to client: <%@>
Broadcast command %{public}@ timedout after %lf seconds
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %{public}@: %{public}@
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
Command ignored because of device state: %{public}@
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Set AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute for command %{public}@
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ failed to reply to command (SendCommandErr = %@)
Destination app %{public}@ is available but not ready for command %{public}@ -- Enqueueing command for later execution.
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Launch successful. Creating task assertion for %{public}@ to ensure command handler registration on launch.
Task assertion %{public}@ for post-launch setup is invalid.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Sending previously queued command %{public}@ to client %{public}@.
Removing queued commands for %{public}@ %{public}@
Removing queued commands because %{public}@ %@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because a phone call or FaceTime is active.
Client <%{public}@> missing entitlement <%@> needed to send commands to arbitrary apps. Sending to NowPlayingApp instead.
[iOSSim Data Source] Failed to load playback queue: %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is deserializing supportedCommands: %{public}@
Set: %{public}@ setting %{public}@ from <%{public}@> to <%{public}@>
Set: %{public}@ setting %{public}@ to <%{public}@>
[MRDNowPlayingPlayerClient] Successfully write artworkData <%@> to disk %@
[MRDNowPlayingPlayerClient] Could not write artworkData to url <%@> with error %@
[MRDNowPlayingPlayerClient] Could not write artworkData directory <%@> with error %@
[MRDNowPlayingPlayerClient] Taking hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] Removing hasNowPlayingData transaction for %{public}@
[MRDNowPlayingPlayerClient] PlaybackState changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] isPlaying changed to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] AudioSessionType changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is being asked to make artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ already has an in flight artworkRequest for %{public}@
[MRDNowPlayingPlayerClient] Client at path %{public}@ is making artworkRequest for %{public}@
[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@
[MRDRemoteControlNetworkService] Starting network service: %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Stopping network service %{public}@ for type %{public}@
[MRDRemoteControlNetworkService] Did accept connection with service: %{public}@ using type: %{public}@ input: %{public}@ output: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement success with service: %{public}@ using type: %{public}@
[MRDRemoteControlNetworkService] Remote server advertisement failed with service: %{public}@ error: %{public}@
[MRDRemoteControlNetworkService] Retrying after 30s...
[MRDRemoteControlNetworkService] Updating txtData because deviceInfo changed...
[MRDRemoteControlNetworkService] Updating txtData because device restrictions changed...
[MRDRemoteControlNetworkService] Updating txtData: %{public}@
[MRDRemoteControlNetworkService] Stopping bonjour service %{public}@
[MRDRemoteControlNetworkService] Initializing bonjour service for type %{public}@
Configuring remote control network service with includesPeerToPeer = %s
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from system screen and system music contexts: %{public}@ %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[ProximityController] Initializing SFProximityClient...
[ProximityController] Proximity feature not enabled
[ProximityController] interrupted
[ProximityController] invalidated
[ProximityController] deviceEnteredNearbyHandler <%{public}@>
[ProximityController] deviceExitedNearbyHandler exited <%{public}@>
[ProximityController] deviceWillTriggerHandler <%{public}@>
[ProximityController] deviceDidUntriggerHandler <%{public}@>
[ProximityController] deviceWasSelectedHandler <%{public}@>
[ProximityController] deviceEnteredImmediateHandler <%{public}@>
[ProximityController] deviceExitedImmediateHandler exited <%{public}@>
[ProximityController] deviceWasDismissedHandler <%{public}@> for reason %{public}@
[ProximityController] SFProximityClient:activate has not activated within <%lf> seconds
[ProximityController] Error activating SFProximityClient %{public}@
[ProximityController] SFProximityClient activated
[ProximityController] Attempting to initialize SFProximityClient in <%lf> seconds
[ProximityController] Update prompting device %{public}@ %{public}@ for event %{public}@
[ProximityController] Error %{public}@ trying to update content for device <%{public}@> with event %{public}@
[ProximityController] Prompting device %{public}@ %{public}@ for event %{public}@
[ProximityController] Error %{public}@ trying to provide content for device <%{public}@> with event %{public}@
[ProximityController] Error %{public}@ trying to prompt for device <%{public}@>
[ProximityController] Error %{public}@ trying to dismiss prompt for device <%{public}@>
[ProximityController] Migrating nearbyDevice <%{public}@>
[ProximityController] Migrated nearbyDevice %{public}@ for event %{public}@
[ProximityController] Already migrating nearbyDevice %{public}@ for event %{public}@. Ignoring...
[ProximityController] Error %{public}@ migrating nearbyDevice <%{public}@> for event %{public}@
[ProximityController] Migrating farAwayDevice <%{public}@>
[ProximityController] Migrated farAwayDevice %{public}@ for event %{public}@
[ProximityController] Error %{public}@ migrating farAwayDevice <%{public}@> for event %{public}@
[ProximityController] Preparing nearbyDevice <%{public}@>
[ProximityController] Preparing farAwayDevice <%{public}@>
[ProximityController] Error preparing farAwayDevice <%{public}@> with error %{public}@
[ProximityController] farAwayDevice <%{public}@> prepared with event %@
[ProximityController] Setting SFProximityClient shouldAdvertise to %{public}@ because %{public}@
[ProximityController] Maintaining SFProximityClient shouldAdvertise to %{public}@ because %{public}@ (previously %{public}@)
[ProximityController] nearbyDevice %@ invalidated while triggered...
[ProximityController] nearbyDevice %@ invalidated while nearby...
[MigrationEvent] <%{public}@: %p %@> Timing out error after <%lf> seconds: %{public}@
[MigrationEvent] <%{public}@: %p %@> Prepare failed with error %{public}@
[MigrationEvent] <%{public}@: %p %@> Prepared
[MigrationEvent] <%{public}@: %p %@> Preparing...
[MigrationEvent] <%{public}@: %p %@> Found <%@> with endpoint %{public}@...
[MigrationEvent] %{public}@: %p %@> Nominating sourcePlayer %{public}@ beacuse <%{public}@...>
Request: %{public}@<%{public}@> for %{public}@
Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds
Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds
Update: %{public}@<%{public}@> %{public}@
[MigrationEvent] <%{public}@: %p %@> Event did invalidate because <%{public}@ for %{public}@...
[MigrationEvent] <%{public}@: %p %@> Migrating...
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
Failed to make endpoint due to no qualified group leader in devices: %{public}@
- Selecting devices (non-default selection options) from: %{public}@
- Selection options: %{public}@
- Updating preferred group leader %{public}@ based on better criteria: %{public}@
-- Final preferred group leader: %{public}@ based on criteria: %{public}@
Created new hosted external device: %{public}@ for group leader: %{public}@
Failed to created new hosted external device, missing AVOutputDevice for UID: %{public}@
Skipping invalid output device: %{public}@
Purging undiscovered external device: %{public}@ for outputDeviceIdentifier: %{public}@
[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
Attempted to enqueue unwhitelisted background task %@
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %ld
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ %@ sending client %@ subscribed packets %@
[MRTransactionServer] %@ received ack
[MRTransactionServer] %@ sending client %@ subscribed packets %@
[MRDNowPlayingPlaybackQueueServer] Handling playbackQueueRequest <%{public}@> from <%{public}@> for <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Modifying playbackQueueRequest <%{public}@< to <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Error handling playbackQueueRequest <%{public}@>: <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Relaying playbackQueueRequest <%{public}@> to <%{public}@>...
[MRDNowPlayingPlaybackQueueServer] Relay responded to playbackQueueRequest <%{public}@>
[MRDNowPlayingPlaybackQueueServer] Error relaying playbackQueueRequest <%{public}@>: %{public}@
[MRDNowPlayingOriginClient] Updating deviceInfo for <%@>
[MRDNowPlayingOriginClient] Previous deviceInfo: %{public}@
[MRDNowPlayingOriginClient] Updated deviceInfo: %{public}@
[MRDNowPlayingOriginClient] Application Activity %{public}@ already set
[MRDNowPlayingOriginClient] Removing nowPlayingClient %{public}@ for %{public}@
[MRDNowPlayingOriginClient] ActiveNowPlayingClient changed from %{public}@ to %{public}@
[MRDNowPlayingOriginClient] Taking activeNowPLayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] Removing activeNowPlayingClient transaction for %{public}@
[MRDNowPlayingOriginClient] Creating nowPlayingClient for %{public}@
[TelevisionStateObserver] Registering for Now Playing Updates
[TelevisionStateObserver] Unregistering for Now Playing Updates
[TelevisionStateObserver] Registering for volume control updates
[TelevisionStateObserver] Unregistering for volume control updates
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %li for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
Updating media server route discovery mode to %{public}@
Error setting AVSystemController discovery mode. %{public}@
[MRDLockScreenController] Setting playerPath from %{public}@ to %{public}@
[MRDLockScreenController] Deferring setting playerPath from %{public}@ to %{public}@ because changeType is <%{public}@> and lock screen is <%{public}@>
[MRDLockScreenController] Restoring defered playerPath from %{public}@ to electedPlayerPath %{public}@
[MRDLockScreenController] Reevaluating shouldShowLockScreen for reason %@
[MRDLockScreenController] Delaying deactivation of lockScreen
[MRDLockScreenController] LockScreen now showing empty controls. Will be dismissed when lock screen is no longer visible
[MRDLockScreenController] Activating lockScreenAssertion
[MRDLockScreenController] Deactivating lockScreenAssertion
[MRDLockScreenController] lockScreenAssertion error %{public}@
[MRDAVHostedExternalDevice] %{public}@ is tombstoned, rejecting new XPC connection %{public}@
[MRDAVHostedExternalDevice] %{public}@ is accepting new XPC connection %{public}@ %@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following registered callbacks on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is setting the following notifications on %{public}@: %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to connect to external device using hosted endpoint %{public}@ with options %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to disconnect from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to unpair from external device using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to set output device volume to %f using output device %{public}@ on hosted endpoint %{public}@
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to modify the %{public}@ output context of hosted endpoint %{public}@ (adding=%{public}@, removing=%{public}@)
[MRDAVHostedExternalDevice] Client %{public}@ is requesting to send %llu bytes of custom data with name %{public}@ using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] [Client %{public}@ is requesting to ping external device with timeout %f using hosted endpoint %{public}@
[MRDAVHostedExternalDevice] %{public}@ maintaing no localRoute for %{public}@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ removing localRoute for %@ because %{public}@
[MRDAVHostedExternalDevice] %{public}@ adding localRoute for %@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ connection state did change to %{public}@ with error %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ device name did change to %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ did receive %llu bytes of custom data with name %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volume did change to %f for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ volumeCapabilities did change to %{public}@ for outputDevice %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint %{public}@ client did disconnect: %{public}@
[MRDAVHostedExternalDevice] Hosted endpoint <%{public}@> reevaluating volume control because %{public}@ changed from <%{public}@> to <%{public}@>
[ExternalDeviceServer] Removing television endpoint for client %{public}@
[ExternalDeviceServer] Creating stream runloop...
[ExternalDeviceServer] Got streams runloop %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@
[ExternalDeviceServer] didReceiveApplicationClientStateDidChange %@
[ExternalDeviceServer] didReceivePlayerStateDidChange %@
[ExternalDeviceServer] didReceiveClientDidUnregister %@
[ExternalDeviceServer] didReceivePlayerDidUnregister %@
[ExternalDeviceServer] didReceiveNowPlayingClientChange %@
[ExternalDeviceServer] didReceiveNowPlayingPlayerChange %@
[ExternalDeviceServer] didReceivePlaybackQueueChange %@
[ExternalDeviceServer] didReceiveContentItemChange %@ %@
[ExternalDeviceServer] didReceiveNowPlayingInfoChange %@
[ExternalDeviceServer] didReceivePlaybackQueueCapabilitiesChange %@
[ExternalDeviceServer] didReceiveSupportedCommandsChange %@
[ExternalDeviceServer] didReceivePlayStateChange %@
[ExternalDeviceServer] didReceiveNowPlayingNotification %@
[ExternalDeviceServer] didReceiveVolumeControlCapabilitiesChange %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] Attempting to disconnect client: %{public}@
[ExternalDeviceServer] Removing client: %{public}@
[ExternalDeviceServer] Unregistering client dependencies: %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] %@Transaction received packets %@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ to playerPath: %{public}@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ for playerPath: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
Checking if device with managedConfigDeviceID, %{public}@, allowed to connect
Device with managedConfigDeviceID, %{public}@, allowed: %d
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Creating new PairingSession for client %{public}@ from message %{public}@
[ExternalDeviceServer] Processing %lld bytes of crypto pairing data from client %{public}@
[ExternalDeviceServer] Error processing pairing exchange data. %{public}@
[ExternalDeviceServer] Handling pairing failure with OSStatus = %d
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Invalid context type for modify request: Auxiliary
[ExternalDeviceServer] Invalid context type for modify request: iTunesAudio
[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Error setting devices on output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
[ExternalDeviceServer] Completed recon session: %{public}@
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
PID Mismatch: Client %{public}@ is trying to make a nowPlayingClient with a different pid %d
PID Mismatch: Client %{public}@ is trying to making a nowPlayingClient with a different bundleID %{public}@
Resolving %{public}@ -> %{public}@ for client %@
Resolving Exisiting %{public}@ -> %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Client %{public}@ requesting to register origin %{public}@
Client %{public}@ requesting to unregister origin %{public}@
Not unregistering origin because is local origin
Not unregistering origin because other clients have a reference %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Setting hardware remote behavior to %{public}@ for client %{public}@
Unable to set playback state. No now playing client found for %@
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app for the local origin. Ignoring.
ERROR: now playing client could not be found for setting supported commands
Posting kMRNowPlayingAppIsPlayingDidChangeDistributedNotificationName with %@
Adding new origin %@
Removing origin %{public}@
Removing active origin %{public}@. Setting active origin to the local one.
Setting active origin from %@ to %@
Persisting active origin %@
[MRDNowPlayingClient] Setting pid for %{public}@ to %d
[MRDNowPlayingClient] Timeout trying to pid for %{public}@
[MRDNowPlayingClient] Creating playerClient for %{public}@
[MRDNowPlayingClient] ActiveNowPlayingPlayer changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] DisplayName changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] ParentAppBundleIdentifier changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] BundleIdentifierHierarchy changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] Visibility changed from %{public}@ to %{public}@ for %{public}@
[MRDNowPlayingClient] TintColor changed from %{public}@ to %{public}@ for %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %{public}@
Removing client %{public}@
Posting Notification %{public}@
UserInfo %{public}@
Posting Custom Notification %{public}@ to %{public}@
Custom UserInfo %{public}@
CompanionLinkClient invalidation
CompanionLinkClient interrupted
Error activating CompanionLinkClient %{public}@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Set system volume: overriding volume warning
Set system volume: setting volume to %f (warning state = %{public}s)
Adjust system volume: stepping volume by %f (warning state = %{public}s)
Disallowed bundle ID requested for installation status: %{public}@
No app bundle ID provided in call to GetMediaAppIsInstalled message
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Client %{public}@ invalidated.
Restoring client pids %{public}@
[MRDAutoConnectionController] Begin DiscoverySession %@ because %@
[MRDAutoConnectionController] End DiscoverySession %@
Request: %{public}@<%{public}@> for %{public}@ because %{public}@
[MRDAutoConnectionController] Removing outdated endpoint <%@> (<%@>)
[MRDAutoConnectionController] Removing endpoint <%@> (<%@>)
[MRDElectedPlayerController] Reevaluating electedPlayer event = %{public}@, reason =  %{public}@
[MRDElectedPlayerController] ElectedPlayer changed from <%@> to <%@> changeType=<%{public}@>, event=%{public}@, eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] ElectedPlayer remained <%@> eventReason=%{public}@, selectionReason=%{public}@
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because previousPlayerPath %{public}@ does not exist anymore
[MRDElectedPlayerController] Manually setting changeType to %{public}@ because changeType uninitialized and playerPath %{public}@ is nil and previousPlayerPath %{public}@ is still valid
[AirPlayRemoteControlService] Received %llu bytes from output context communication channel: %{public}@
[AirPlayRemoteControlService] AVFoundation closed output context communication channel: %{public}@
[AirPlayRemoteControlService] Created new IO streams for channel with ID %llu -- notifying delegate of new client
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
[AVRoutingServer] received airplay active notification: %llu
[AVRoutingServer] Failed to register for airplay active events. status = %u
[AVRoutingServer] current airplay active state = %d
[AVRoutingServer] Failed to get current airplay active state. status = %u
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@ (status = %{public}@)
[AVRoutingServer] Authorization request using saved password for %{public}@: %@
[AVRoutingServer] Authorization token failed for %{public}@ : %@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to clear all AirPlay route passwords...
[AVRoutingServer] Error %ld trying to delete passwords
[AVRoutingServer] No passwords to delete
[AVRoutingServer] Error %ld trying to query passwords
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Client %{public}@ is requesting the hosted routing XPC endpoint
Specified outputDeviceUID %@ to clear
[AVRoutingServer] Failed to remove output device UIDs: %{public}@ from parent group with error: %{public}@
[AVRoutingServer] No group leader, nothing to remove for: %{public}@
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Handling authorization request with custom callback for route %{public}@
[AVRoutingServer] Custom authorization callback returned for route %{public}@
[AVRoutingServer] Prompting user with authorization request route %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting transaction: %{public}@
[AVRoutingServer] Discovery ended. Clearing transaction %{public}@
[AVRoutingServer] AirPlay Error %ld: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %ld: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
Resolving endpoint for output device UIDs %{public}@
Returning endpoint with only a subset of specified output devices:
    - %{public}@
    + %{public}@
Resolved to endpoint: %{public}@
Setting output devices on endpoint: %{public}@
Error adding devices to endpoint:%{public}@ error:%{public}@
Could not make endpoint for output devices: %{public}@
Predicting endpoint for output device UIDs %{public}@
POWER: Did recieve power callback %{public}@-%{public}@
POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MediaServerVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
Added %{public}@ as possible now playing application.
Cleared %{public}@ as possible now playing application.
Client switched route discovery mode to: %lu
Client switched output device discovery mode to: %lu
Error sending remote control command to %{public}@. %{public}s
Unable to relay message
Custom origin registered: %@
Custom origin removed: %@
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
[MRDDisplayMonitor] Layout Changed %@
[CompanionLinkClient] CompanionLinkClient invalidation
[CompanionLinkClient] CompanionLinkClient interrupted
[CompanionLinkClient] CompanionLinkClient:activate has not activated within <%lf> seconds
[CompanionLinkClient] Error activating CompanionLinkClient %{public}@
[CompanionLinkClient] CompanionLinkClient activated
[CompanionLinkClient] Setting Connection %@
[CompanionLinkClient] Mapped inputUID <%{public}@> to effectiveIdentifier <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped inputUID <%{public}@> to identifier <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped inputUID <%{public}@> to mediaRouteIdentifier <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped inputUID <%{public}@> to mediaRemoteIdentifier <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped deviceUID <%{public}@> to rapportUID <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped effectiveIdentifier <%{public}@> to rapportUID <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped identifier <%{public}@> to rapportUID <%{public}@> <(%{public}@)>
[CompanionLinkClient] Mapped mediaRemoteIdentifier <%{public}@> to rapportUID <%{public}@> <(%{public}@)>
[CompanionLinkClient] Request: <%{public}@> <%{public}@> to destination <%@> with userInfo %@
[CompanionLinkClient] Response: <%{public}@> <%{public}@> returned error <%{public}@> in <%lf> seconds
[CompanionLinkClient] Response: <%{public}@> <%{public}@> returned in <%lf> seconds with %{public}@@
[CompanionLinkClient] Sending event <%{public}@> <%{public}@> to destination <%@> with userInfo %@
[CompanionLinkClient] Error sending <%{public}@> <%{public}@> event to <%@> <%{public}@>
[CompanionLinkClient] Enqueing event <%{public}@> <%{public}@> to destination <%@> with userInfo %@
[CompanionLinkClient] Sending request <%{public}@> <%{public}@> to destination <%@> with userInfo %@
[CompanionLinkClient] Enqueing request <%{public}@> <%{public}@> to destination <%@> with userInfo %@
[CompanionLinkClient] Received event <%{public}@> <%{public}@> from <%{public}@> (%{public}@) with %@ <%{public}@> userInfo %@
[CompanionLinkClient] Received event <%{public}@> from <%{public}@> (%{public}@) with <%@> <%@> but could not find device
[CompanionLinkClient] Received request <%{public}@> <%{public}@> from <%{public}@> (%{public}@) with %@ <%{public}@> userInfo %@
[CompanionLinkClient] Responding to request <%{public}@> <%{public}@> with error <%{public}@>
[CompanionLinkClient] Responding to request <%{public}@> <%{public}@> with <%{public}@>
Error blessing %@ for playback initialization. %@
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>18A391011</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>mediaremoted</string>
<key>CFBundleIdentifier</key>
<string>com.apple.mediaremoted</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>WatchSimulator</string>
</array>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>11L374m</string>
<key>DTPlatformName</key>
<string>watchsimulator</string>
<key>DTPlatformVersion</key>
<string>6.0</string>
<key>DTSDKBuild</key>
<string>17R573</string>
<key>DTSDKName</key>
<string>watchsimulator6.0.internal</string>
<key>DTXcode</key>
<string>1100</string>
<key>DTXcodeBuild</key>
<string>11L374m</string>
<key>MinimumOSVersion</key>
<string>6.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>4</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.bluetooth.system</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.frontboardservices.display-layout-monitor</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.mediaremote.nearby-device</key>
<string>YES</string>
<key>com.apple.mediaremote.send-commands</key>
<true/>
<key>com.apple.mediaremote.set-playback-state</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.private.associated-domains</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string></string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.SharingServices</string>
<string>com.apple.CompanionLink</string>
<string>com.apple.PairingManager</string>
<string>com.apple.SharedWebCredentials</string>
</array>
<key>com.apple.sharing.ProximityClient</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.activateRemoteAlert</key>
<true/>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.lockScreenContentAssertion</key>
<true/>
<key>com.apple.springboard.remote-alert</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
