%@ detected: %@
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
timeRange
T{?={?=qiIq}{?=qiIq}},R,N
T{?={?=qiIq}{?=qiIq}},N
confidence
Td,R,N
Td,N
detected
TB,N,V_detected
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
FormatMatchingNode
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/ProcessingTree/SoundAnalysis_FormatMatchingNode.cpp
upstreamFormat.mBlockSize == 1
downstreamFormat.mBlockSize == 1
setUpstreamFormat
formatMatchingGraph
input
channelMapper
output
processBuffer
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/ProcessingTree/SoundAnalysis_ProcessingTree.cpp
inputBuffer.mNumFrames == expectedNumberOfFrames
treeGraph
addProcessingContext
!findAnalyzerNodeForContext(processingContext)
setProcessingContexts
format().mBlockSize > 0
removeNodeRecursively
node
removeProcessingContext
requestProcessingNode
convertSampleTimeToRootSampleTime
Couldn't find GraphBox containing graph
Processing tree graph is null
.dot
buildTreeGraphRecursively
downstreamNode->upstreamNode()
formatsAreEquivalent(downstreamNode->upstreamFB(), downstreamNode->upstreamNode()->downstreamFB())
deadEnd
CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h
Box::out inIndex out of range! box %s has %lu outputs but input %d was requested
Box::in inIndex out of range! box %s has %lu inputs but input %d was requested
GraphBoxCommon
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/DSPGraph/DSPGraph_GraphBox.h
inGraph
%s %s graph must have at least one input bus.
%s %s graph must have the same sample rate for all input busses to be used in a GraphBox
%s %s graph must have the same sample rate for all output busses to be used in a GraphBox
MultiRateGraphBox
innerGraph %p
setParameter
DSPGraph parameters must have global scope and master element.
getParameter
getParameterInfo
DSPGraph parameters must have global scope.
process
isIntegral(numPacketsToWrite)
prepareGraphIOData
mGraphIODataIn.at(0).mNumFrames == inNumFrames
isIntegral(numPacketsOut)
outNumBytes <= mOutBufferList->GetCapacityBytes()
SingleRateGraphBox
findGraphBoxContainingBox
Tick delta too large
analyzer
T@"<SNAnalyzing>",R,W,N
sampleRate
blockSize
TI,N
magnitudeThreshold
signalDetector
-[SNDetectSignalThresholdRequestImpl resultsFromBox:renderedWithFrameCount:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SignalDetector/SNDetectSignalThresholdRequest.mm
allBussesSignalRanges.size() == 1
allBussesSignalRanges.at(0).size() == 1
detectorEndPosition >= detectorStartPosition
graph
T{shared_ptr<DSPGraph::Graph>=^{Graph}^{__shared_weak_count}},R,N
resultsBox
T^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq},R,N
Td,N,V_sampleRate
TI,N,V_blockSize
Td,N,V_magnitudeThreshold
-init is not a valid initializer for the class SNClassificationResult
+new is not a valid class method for the class SNClassificationResult
classifications
T@"NSArray",C,N,V_classifications
T{?={?=qiIq}{?=qiIq}},N,V_timeRange
-init is not a valid initializer for the class SNClassification
+new is not a valid class method for the class SNClassification
identifier
T@"NSString",C,N,V_identifier
Td,N,V_confidence
LogMelSpectrogram
logMelContext
melTransform
com.apple.soundanalysis
explanation
T@"NSString",&,N,V_explanation
T@"NSString",&,N,V_key
initialValue
T@,&,N,V_initialValue
v8@?0
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNUserDefaults.mm
<Unknown File>
sDefaults should be non-nil
allDefaultsInfo
T@"NSArray",R,N
userDefaults
T@"NSUserDefaults",&,N,V_userDefaults
Type
DSPGraph
AUStrip
PropertyStrip
Path
Text
IncludePaths
Substitutions
path
T@"NSString",&,N,V_path
text
T@"NSString",&,N,V_text
includePaths
T@"NSArray",&,N,V_includePaths
substitutions
T@"NSDictionary",&,N,V_substitutions
Value
T@"NSString",R,N,V_path
value
T@"NSDictionary",R,N,V_value
resourcePath
T@"NSString",R,N,V_resourcePath
dspItems
T@"NSArray",&,N,V_dspItems
ProcessingContext
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/ProcessingTree/SoundAnalysis_ProcessingContext.cpp
requestProcessingGraph->configured()
sharedProcessingGraph->configured()
%f, %d
channelCount
TI,N,V_channelCount
com.apple.SoundAnalysis.FileAnalyzer
-[SNAudioFileAnalyzer analyze]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNAudioFileAnalyzer.mm
self->_audioFile.length > self->_audioFile.framePosition
Couldn't read audio into buffer with error %@
-[SNAnalyzerHost adaptToSystemConfiguration:error:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNAnalyzerHost.mm
-[SNAnalyzerHost clientResultsFromProcessorResults:]
clientEndPosition >= clientStartPosition
sharedProcessorConfiguration
T@,R,N
requestState
Tq,N,V_requestState
Do not call %@
-[SNDSPGraphBox init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNDSPGraphBox.mm
Invalid parameter not satisfying: %@
T^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq},R,N,V_box
numInputs
Tq,R,N
numOutputs
name
T@"NSString",R,N
context
createGraphWithModel
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNClassifySoundRequest.mm
overlapFactor >= 0.0
overlapFactor < 1.0
-init is not a valid initializer for the class SNClassifySoundRequest
+new is not a valid class method for the class SNClassifySoundRequest
Model not valid for sound classification
q24@?0@8@16
overlapFactor
Td,V_overlapFactor
primeFrameCount
Ti,R,V_primeFrameCount
overlapFactor >= 0.f
overlapFactor < 1.f
Classifier
Unexpected MultiArray size %ld
Unexpected error
com.apple
Must only have one input audio feature
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/CustomModels/SNCustomModels.mm
Model needs an input constraint
Must allow %@ shaped vector as input
Must only have one output multiarray feature
Model needs an output constraint
Must allow %@ shaped vector as output
preProcessCallback
T@?,C,N,V_preProcessCallback
_SNVGGishFrontEndProcessingCustomModel
adjustSingleChannelIODataAhead
data.mBufferList->mBuffers[0].mDataByteSize >= framesToAdjust * sizeof(float)
v24@?0^{Graph=^^?{unordered_set<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, std::__1::hash<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > >, std::__1::equal_to<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > > >={__hash_table<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, std::__1::hash<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > >, std::__1::equal_to<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > > >=Q}{__compressed_pair<float, std::__1::equal_to<std::__1::unique_ptr<DSPGraph::Box, std::__1::default_delete<DSPGraph::Box> > > >=f}}}{unordered_set<DSPGraph::Wire *, std::__1::hash<DSPGraph::Wire *>, std::__1::equal_to<DSPGraph::Wire *>, std::__1::allocator<DSPGraph::Wire *> >={__hash_table<DSPGraph::Wire *, std::__1::hash<DSPGraph::Wire *>, std::__1::equal_to<DSPGraph::Wire *>, std::__1::allocator<DSPGraph::Wire *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Wire *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Wire *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Wire *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Wire *> >=f}}}{unordered_set<DSPGraph::Analyzer *, std::__1::hash<DSPGraph::Analyzer *>, std::__1::equal_to<DSPGraph::Analyzer *>, std::__1::allocator<DSPGraph::Analyzer *> >={__hash_table<DSPGraph::Analyzer *, std::__1::hash<DSPGraph::Analyzer *>, std::__1::equal_to<DSPGraph::Analyzer *>, std::__1::allocator<DSPGraph::Analyzer *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Analyzer *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Analyzer *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Analyzer *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Analyzer *> >=f}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> > > >=^{unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> >}^{unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> > > >=^{unique_ptr<DSPGraph::InternalBuffer, std::__1::default_delete<DSPGraph::InternalBuffer> >}}}{unordered_set<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, std::__1::hash<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > >, std::__1::equal_to<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > > >={__hash_table<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, std::__1::hash<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > >, std::__1::equal_to<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > > >=Q}{__compressed_pair<float, std::__1::equal_to<std::__1::unique_ptr<DSPGraph::IsoGroup, std::__1::default_delete<DSPGraph::IsoGroup> > > >=f}}}{vector<DSPGraph::IsoGroup *, std::__1::allocator<DSPGraph::IsoGroup *> >=^^{IsoGroup}^^{IsoGroup}{__compressed_pair<DSPGraph::IsoGroup **, std::__1::allocator<DSPGraph::IsoGroup *> >=^^{IsoGroup}}}{vector<DSPGraph::GraphInput *, std::__1::allocator<DSPGraph::GraphInput *> >=^^{GraphInput}^^{GraphInput}{__compressed_pair<DSPGraph::GraphInput **, std::__1::allocator<DSPGraph::GraphInput *> >=^^{GraphInput}}}{vector<DSPGraph::GraphOutput *, std::__1::allocator<DSPGraph::GraphOutput *> >=^^{GraphOutput}^^{GraphOutput}{__compressed_pair<DSPGraph::GraphOutput **, std::__1::allocator<DSPGraph::GraphOutput *> >=^^{GraphOutput}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{unordered_set<DSPGraph::FCBox *, std::__1::hash<DSPGraph::FCBox *>, std::__1::equal_to<DSPGraph::FCBox *>, std::__1::allocator<DSPGraph::FCBox *> >={__hash_table<DSPGraph::FCBox *, std::__1::hash<DSPGraph::FCBox *>, std::__1::equal_to<DSPGraph::FCBox *>, std::__1::allocator<DSPGraph::FCBox *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::FCBox *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::FCBox *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::FCBox *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::FCBox *> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}Q{vector<DSPGraph::Graph::ParameterConnection, std::__1::allocator<DSPGraph::Graph::ParameterConnection> >=^{ParameterConnection}^{ParameterConnection}{__compressed_pair<DSPGraph::Graph::ParameterConnection *, std::__1::allocator<DSPGraph::Graph::ParameterConnection> >=^{ParameterConnection}}}{vector<DSPGraph::Graph::PropertyConnection, std::__1::allocator<DSPGraph::Graph::PropertyConnection> >=^{PropertyConnection}^{PropertyConnection}{__compressed_pair<DSPGraph::Graph::PropertyConnection *, std::__1::allocator<DSPGraph::Graph::PropertyConnection> >=^{PropertyConnection}}}{unordered_map<unsigned int, DSPGraph::Graph::GraphParameter, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, DSPGraph::Graph::GraphParameter> > >={__hash_table<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphParameter>, std::__1::equal_to<unsigned int>, true> >=f}}}{unordered_map<unsigned int, DSPGraph::Graph::GraphProperty, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, DSPGraph::Graph::GraphProperty> > >={__hash_table<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::Graph::GraphProperty>, std::__1::equal_to<unsigned int>, true> >=f}}}{unordered_map<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::FormatAndBlockSize>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}{unordered_map<std::__1::basic_string<char>, DSPGraph::Jack, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, DSPGraph::Jack> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Jack>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}iiqqqqqqqdBBBBBBBBq^{VPTimeFreqConverterSetup}{unordered_map<std::__1::basic_string<char>, DSPGraph::Box *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, DSPGraph::Box *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Box *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}{unordered_map<long long, DSPGraph::Box *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, DSPGraph::Box *> > >={__hash_table<std::__1::__hash_value_type<long long, DSPGraph::Box *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, DSPGraph::Box *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, DSPGraph::Box *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, DSPGraph::Box *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Box *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, DSPGraph::Box *>, std::__1::hash<long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, DSPGraph::Box *>, std::__1::equal_to<long long>, true> >=f}}}{unordered_map<long long, DSPGraph::Analyzer *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, DSPGraph::Analyzer *> > >={__hash_table<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, std::__1::hash<long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, DSPGraph::Analyzer *>, std::__1::equal_to<long long>, true> >=f}}}{vector<std::__1::unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> > > >=^{unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> >}^{unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> > > >=^{unique_ptr<DSPGraph::Subset, std::__1::default_delete<DSPGraph::Subset> >}}}iiBI{AnalyzerBuilder=^^?{unordered_map<unsigned int, DSPGraph::AnalyzerBuilder::Info, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, DSPGraph::AnalyzerBuilder::Info> > >={__hash_table<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, DSPGraph::AnalyzerBuilder::Info>, std::__1::equal_to<unsigned int>, true> >=f}}}}{vector<DSPGraph::Graph::GraphBridge, std::__1::allocator<DSPGraph::Graph::GraphBridge> >=^{GraphBridge}^{GraphBridge}{__compressed_pair<DSPGraph::Graph::GraphBridge *, std::__1::allocator<DSPGraph::Graph::GraphBridge> >=^{GraphBridge}}}{unique_ptr<DSPGraph::Graph::profiler_t, std::__1::default_delete<DSPGraph::Graph::profiler_t> >={__compressed_pair<DSPGraph::Graph::profiler_t *, std::__1::default_delete<DSPGraph::Graph::profiler_t> >=^{profiler_t}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{unordered_map<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, DSPGraph::Graph::profiler_t> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, DSPGraph::Graph::profiler_t>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}}8^{GraphIOData=iI{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}^{AudioBufferList}}16
operator()
scratchFloatSpace.size() >= multiArray.count
false
decisionDelay
Td,R
AUNeuralNetVAD.dspg
AUNeuralNetVAD_SiriEndpointer.propstrip
AUNeuralNetVAD_Siri.austrip
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SpeechUtteranceDetector/SNDetectSpeechUtteranceRequest.mm
Error creating graph
NNVAD
hardVAD
TB,R,N
request
T@"<SNAnalyzerProviding>",&,N,V_request
resultsObserver
T@"<SNResultsObserving>",W,N,V_resultsObserver
analyzerHost
T@"SNAnalyzerHost",&,N,V_analyzerHost
sharedProcessor
T@"<SNProcessing>",&,N,V_sharedProcessor
configured
TB,N,V_configured
configurationError
T@"NSError",&,N,V_configurationError
Audio format must be PCM
InvalidFormatException
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNAudioStreamAnalyzer.mm
Unknown request
Required shared request not found with configuration %@
Error updating tree format
Unexpected error during analysis
clientSampleRate
shouldProduceResults
TB,R,N,V_shouldProduceResults
+[SNUtils copyAudioBufferList:to:frameCount:bytesPerFrame:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNUtils.mm
sourceBufferList->mNumberBuffers > 0
sourceBufferList->mNumberBuffers == destinationBufferList->mNumberBuffers
sourceBufferList->mBuffers[bufferIdx].mNumberChannels > 0
frameCount*bytesPerFrame <= sourceBufferList->mBuffers[bufferIdx].mDataByteSize
frameCount*bytesPerFrame <= destinationBufferList->mBuffers[bufferIdx].mDataByteSize
MultiArrayInput
MultiArrayOutput
results
errors
completeCount
Tq,R,N,V_completeCount
-[SNDSPGraph init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNDSPGraph.mm
@"SNDSPGraphBox"8@?0
@"NSMutableSet"8@?0
@"NSString"8@?0
T{shared_ptr<DSPGraph::Graph>=^{Graph}^{__shared_weak_count}},R,N,V_graph
T@"NSString",C,N
numberOfInputs
numberOfOutputs
sliceDurationInSamples
initialized
boxes
T@"NSSet",R,N
addDownstreamNodes
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/ProcessingTree/SoundAnalysis_ProcessingNode.cpp
!elementFoundInList(node, mDownstreamNodes)
CAStreamBasicDescription::IsEquivalent(node->upstreamFB().mFormat, downstreamFB().mFormat)
removeDownstreamNodes
elementFoundInList(node, mDownstreamNodes)
processingBox
mProcessingBox
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/DSPGraph/DSPGraph_ContextBox.cpp
validateFormats
Context box can't produce variable output frames.
input and output channel counts don't match
initialize
ContextBox has no inputs
mMaxFrames > 1
number of context frames must be greater than block size
isIntegral(mOutputHopSize)
inNumFrames <= mMaxFrames
inNumFrames == mMaxFrames
selfLatencyInTicks
setHistoricalBuffer
historical buffer size must match ring buffer readAvail
yyyy-MM-dd-HHmmss
%@/%@_%@_bus%d_%@.caf
%@ startRecordingPort was unsuccessful
SNDSPGraphUtilities
/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib
RegisterAudioUnits_InternalUnsearchable
computationalDutyCycle
graphIsDeadEnded
TB,N
shouldThrowException
Throwing a fake exception to aid in unit testing
Td,N,V_computationalDutyCycle
TB,N,V_graphIsDeadEnded
TB,N,V_shouldThrowException
B8@?0
@"SNDSPGraph"8@?0
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/SNAudioProcessorCache.mm
Processor not found with configuration %@
Model must have MLMultiArray features
Error allocating MLMultiArray
featureNames
T@"MLMultiArray",&,N,V_input
model
T@"<DSPGMLModel>",&,N,V_model
modelDescription
T@"MLModelDescription",&,N,V_modelDescription
inputProvider
T@"DSPGMLInputProvider",&,N,V_inputProvider
outputProvider
T@"<MLFeatureProvider>",&,N,V_outputProvider
outputs
T@"NSArray",&,N,V_outputs
outputLabels
T@"NSArray",&,N,V_outputLabels
Unable to compile model at @% with error %@
MLModel successfully loaded!
No CoreML model set: %@
MLModel must have at least one feature in and one feature out
Error creating input provider
Entering single sample mode, setting delay line to %d samples
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/DSPGraph/DSPGraph_CoreMLBox.mm
only supports 1 bus in 1 bus out
input must be single channel
output must be single channel
input and output sample rates must match
No CoreML model given. Bypassing.
No MLModel, bypassing this process call
inABL
outABL
inABL->mBuffers[0].mDataByteSize == mInputNumBytes
input data must be Float32
Error: Model input size (
 bytes) doesn't match audio input size (
 bytes)
prediction failed
MLModel output must have only one feature (MLMultiArray)
MLModel output must be an MLMultiArray
Error: Model output size (
unsupported CoreML data type
Audio is already running. Model will be loaded next time audio is restarted
Set CoreMLModel URL at path %@
Error creating URL from path: %@
CoreMLBox
levelMeasurer
dead
inputSensitivity
Tf,R,N,V_inputSensitivity
decibelLevel
Tf,N,V_decibelLevel
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/DSPGraph/DSPGraph_SignalDetectorBox.cpp
inputs must be LPCM
mInputSignalRanges.at(busIdx).at(channelIdx).capacity() >= inNumFrames
SignalDetectorBox
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/Framework/Internal/DSPGraph/DSPGraph_LogMelTransformBox.cpp
LogMelTransformBox
Applause
Babble
Cheering
Laughter
Music
Speech
Distressed Baby
block size %d
buffer %p
source port %p box %p %s
format %s
num dests %d
%3d dest %p, box name %s
Wire
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp
wire already has a source: %s %s output %d
output port already has a wire: %s %s output %d
box %s %s output %d is not connected
no format was ever set on the wire from box %s %s output %d
Wire from box %s: format
%s, %d block size
does not match the one previously set
%s, %d block size
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp
CalculationBox doesn't support parameter ID 
 in scope 
CalculationBox can't get input scope element 
 with parameter ID 
CalculationBox can't get output scope element 
CalculationBox can't get parameter in scope 
CalculationBox can't set input scope element 
CalculationBox can't set parameter in scope 
Resampler2 bad sample rate(s) : %11.2f %11.2f
Someone is deleting a Resampler while it is in use.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp
buffer list number of buffers doesn't match format channel count.
box %p
index %d
Port
OutputPort
InputPort
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp
expected name in 'box' command: %s
expected class name or component description in 'box' command: %s
box : box type '
' not found
expected ')' at end of component description, got '%c' %d
()[]{}";
NewBoxRegistry registered boxes:
NewBoxRegistry
parameter_add
parameter_subtract
parameter_negate
property_logical_or
property_logical_and
property_not
property_equal
property_not_equal
wrong number of inputs for SingleRateLPCMConverterBox. must be 1.
wrong number of outputs for SingleRateLPCMConverterBox. must be 1.
There must be two inputs and one output, instead of %i and %i.
The inputs must have the same channel count, but have %i and %i.
The inputs and output must have the same channel count, but have %i and %i.
The buffer passed for input 0 should be sized to %i bytes, but is %i.
The buffer passed for input 1 should be sized to %i bytes, but is %i.
asum
wrong number of outputs for arithmetic difference box. Must be 1.
adif
amin
amul
cannot open file %s
parsing exception at line %u
param
property
wire
wireParam
wireProperty
wireGraphParam
wireGraphProperty
order
beginSubset
endSubset
graphName
componentName
format
jack
record
analysis
analysisDefine
unknown command name '%s'
expected name in 'analysisDefine' command: %s
expected class name or component description in 'analysisDefine' command: %s
expected ')' at end of port description, got '%c' %d
TMPDIR
/tmp/
-@/#,
constant bit rate formats must have a block size and bytes per packet.
expected ')' at end of format, got '%c' %d
sliceDuration
variableSliceDuration
performADryRun
recordFileType
unknown value name '%s' in 'set' command
expected ')' at end of property endpoint, got '%c' %d
global
group
part
parameter endpoint : box not found: 
expected ')' at end of param endpoint, got '%c' %d
source port description parse failed. {%s}
wire : source "
" index 
 not found
wire : destination "
GraphInput
out 
GraphOutput
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp
analysis %p
Analyzer
%s%s %s
AudioStreamBasicDescription:
AudioUnitInitialize %s
AUAnalyzer
AnalyzerBuilder
%-3d
[truncated?]
%s %p
strips
effects
aupreset
displayname
bypass
version
data
classname
type
subtype
manufacturer
                                                                
\x%02x
%2d ch, %6.0f Hz, 
 (0x%08X) 
(freq 
0123456789ABCDEF
_-+=|./:!@#$%^&*<>?~
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp
file too large to read into memory
mABL->mNumberBuffers (%u) != toABL->mNumberBuffers (%u)
fromBytePos (%u) + numBytesToCopy (%u) > mABL->mBuffers[%u].mDataByteSize (%u)
toBytePos (%u) + numBytesToCopy (%u) > toABL->mBuffers[%u].mDataByteSize (%u)
numZeroes is greater than buffer capacity %d > %d
advancing write by more packets than provided with %d > %d
ring buffer overflow  %d > %d
ring buffer underflow  %d > %d
num buffers %d
flags %x
ABL %p
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Buffer.cpp
Buffer::copyFrom, fromABL->mNumberBuffers != toABL->mNumberBuffers
Buffer::copyFrom, fromABL->mBuffers[i].mDataByteSize > mByteCapacity
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp
frequency data is passed through a No Frequency Safe Box-> %s %s
analysis %qd
(%s %d)
analysis 
 (%s %d)
order %s %s
true
wireProperty (%s %d %d %d) (%s %d %d %d) %s
wireParam (%s %d %d %d) (%s %d %d %d) %s
wire 
(%s %d) 
box %qd %s 
 %d %d
componentName %s %s
box %s 
B%qd -> B%qd
 [label="
B%qd [shape=box, label="%s\n
latency %f (%f)
Box::topologicalSort, There is a cycle in the graph. The graph must be acyclic.
Latency compensation of %d samples required at frequency-domain wire : %s -> %s
-latency-delay-
delay samples
DelayBox
parameters
This line should never be reached, please file a bug report
null
Unknown parse error
Expected opening quote
Expected UTF-16 low surrogate
Invalid escape sequence
Invalid UTF-16 character
Expected closing quote
Invalid value
Unterminated value
Expected opening bracket
Expected colon
Expected comma or closing bracket
Nested object or array not parsed
Exceeded nesting limit (32)
AudioComponentDescription
%s '%s' %qd %p 
graph %p
num inputs %d
num outputs %d
AudioUnitUninitialize in 
AudioUnitInitialize in 
AudioComponentInstanceDispose in 
AudioComponentFindNext in 
AudioComponentInstanceNew in 
AudioUnitProcess error in 
AudioUnitProcessMultiple in 
AUBox::setFormatOnUnit %s %s : %s
enabled %d
AU %p
num param taps %d
ParameterTap
source %p
source      %p scope %d   element %d   ID %d
destination %p scope %d   element %d   ID %d
AUBox
GainBox input and output formats don't match (
 != 
mute
gain
dbgain
test
copy
There must be one input and output, instead of %i and %i.
The input and output ports must have the same number of channels, but have %i and %i.
freq
time
The input and output must both be frequency-domain, but are '%s' and '%s'
VectorGainBox
SumBox output channel count must be mono or matched when input is single-bus
ChannelJoinerBox output format must be 32-bit floating-point PCM or 'freq'
ChannelJoinerBox input format must be 32-bit floating-point PCM or 'freq'
ChannelJoinerBox channel mismatch: can't join %d input channels into %d output channels
outBufferIndex < outABL->mNumberBuffers
ChannelJoiner
ChannelSplitterBox channel mismatch: in has %d channels, but only has %d outs
ChannelSplitterBox output format must be non-interleaved float or 'freq' 
ChannelSplitterBox outputs must be mono 
ChannelSplitterBox output is in time-domain but input is in frequency-domain 
ChannelSplitterBox output is in frequency-domain but input is in time-domain 
ChannelSplitter
ChannelCopierBox input format must be mono, non-interleaved float
ChannelCopierBox output format must be non-interleaved float 
ChannelCopier
DeadEndBox
ConstantSourceBox output format must be non-interleaved float or 'freq'
imag value (freq domain only)
real value
ConstantSourceBox
DBValue
LinearValue
DecibelControlBox
SingleRateLPCMConverterBox input must have a non-zero number of channels
SingleRateLPCMConverterBox output format must be non-interleaved float
SingleRateLPCMConverterBox output must have a non-zero number of channels
SingleRateLPCMConverterBox input and output sample rates must match
SingleRateLPCMConverterBox
unordered_map::at: key not found
min() cannot be computed with a complex LHS.
min() cannot be computed with a complex RHS.
min() cannot be computed with complex arguments.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/VP/Utility/vpTimeFreqConverter.cpp
Analyze
Synthesize
: Encountered total 
 frames with Non finite sample <nan> or <inf> in one audio start/stop cycle!
 frames with loud input signal (over 
 dB) in one audio start/stop cycle!
Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.h
print
NonFiniteProtection
com.apple.coreaudio
nfnp_key
%Y-%m-%d %H:%M:%S
%s.%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h
: Encountered Non finite sample <nan> or <inf> in 
 frames!
: Encountered loud signal in 
NonFiniteProtectionBox
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_IsoGroup.cpp
number of blocks to process is out of range  %d   %d %d
IsoGroup::topologicalSort, There is a cycle in the graph. The graph must be acyclic.
sample rates in group do not match  %d %d %s
block sizes in group do not match  %d %d %s
RamstadSRC::processMono, wrong channel count
RamstadSRC process called without preflight and arguments don't match preflight.
RamstadSRC process called for different number of output samples than preflight.
RamstadSRC process called for number of input samples than outside range of preflight.
RamstadSRC::processStereo, wrong channel count
RamstadSRC::processStereoFrac preflight prediction failed.
wire %p
file data pos %d
FileInjector
FileRecorder
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp
allocateFileData
totalFrames * mBytesPerFrame overflows 32 bits
0x%x
ExtAudioFileGetProperty
ExtAudioFileSetProperty
ExtAudioFileRead
ExtAudioFileClose
Source/PublicUtility/CAExtAudioFile.h
Open
couldn't convert path to CFURLRef
ExtAudioFileOpenURL
%s ('%s') failed
%s failed
inject
NewAudioCapturerImpl
/usr/local/lib/libAudioDiagnostics.dylib
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp
preprocessor error: recursive call to macro %s.
preprocessor error: macro %s: wrong number of arguments expected %d. got %d
WARNING: Preprocessor: redefining macro '%s'
undef
counter
letCounter
localCounter
defined
ifdef
ifset
include
preprocessor error: cannot open include file '%s'
preprocessor error: cannot find include file '%s'
preprocessor error: macro %s not found.
;()[]{}`'";\
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Graph.cpp
initialized %d
can process in place %d
num boxes %d
num wires %d
num internal buffers %d
num sorted groups %d
num graph inputs %d
num graph outputs %d
BOXES
WIRES
INTERNAL BUFFERS
GRAPH INPUTS
%3d box 
GRAPH OUTPUTS
GRAPH SINKS
Graph
InternalBuffer
box %s %s input port is not connected.
%s %s box not connected
input and output data are identical, but graph cannot process in-place
preflight slice duration is greater than the graph's maximum slice duration.
the slice duration cannot vary, yet a different duration was supplied to preflight.
input %d packet count %d is inconsistent with preflight %d
output %d frame count %d is inconsistent with preflight %d
number of frames are different in different ports though the sample rates are the same. %d %d
AudioBufferList mDataByteSize is too small for the number of packets for input %d.  mDataByteSize %d   expectedByteSize %d
AudioBufferList mDataByteSize is too small for the number of frames for output %d.  mDataByteSize %d   expectedByteSize %d
boxes within a group have different sample rates! group has sample rate %d, but box %s has sample rate %d on one of its input ports
boxes within a group have different block sizes! group has block sizes %d, but box %s has block sizes %d on one of its input ports
box %s %s output port is not connected.
boxes within a group have different sample rates! group has sample rate %d, but box %s %s has sample rate %d on one of its output ports
boxes within a group have different block sizes! group has block sizes %d, but box %s has block sizes %d on one of its output ports
IsoGroup
input port 
 on 
 box is not connected to anything
output port 
Box::in inIndex out of range! negative input %d was requested for box %s
Box::out inIndex out of range! negative output %d was requested for box %s
couldn't open file '%s'
digraph 
Box %s not found
%s setProperty %d %d %d failed with error %d
%s setProperty %d %d %d to %u failed with error %d
%s setProperty %d %d %d to %Lu failed with error %d
%s setProperty %d %d %d to %f failed with error %d
%s setProperty %d %d %d to %lf failed with error %d
Couldn't load plist from path '%s'. CFURLCreateWithFileSystemPath failed.
Must pass property strip's resource path if plist path is relative
Couldn't create resource URL from path '%s'.
Couldn't load plist from path '%s'. CFReadStreamCreateWithFile failed.
Couldn't load plist from path '%s'. CFPropertyListCreateWithStream failed.
Must provide either a 'Value', 'Path', 'Data', or a recognized number type for properties
Float64
Float32
UInt64
UInt32
Data
Element
Scope
Number
PropertyID
Properties
Name
Boxes
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp
ResamplerSRCKernel
RamstadSRCKernel
reblocker
/BuildRoot/Library/Caches/com.apple.xbs/Sources/Listen_Sim/Listen-30/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp
Decibel gain
Mapped slider value
Raw slider value
Maximum volume
Minimum volume
Transfer function
VolumeCurveBox
CA_NoVector
CA_NoVector set; Vector unit optimized routines will be bypassed
hw.optional.avx2_0
hw.optional.avx1_0
hw.optional.sse4_2
hw.optional.sse4_1
hw.optional.sse3
hw.optional.sse2
spew
minutiae
details
info
notice
note
warning
error
%02X
%2d ch, %6.0f Hz, %s (0x%08X) 
 little-endian
 big-endian
 unsigned
 signed
integer
float
packed in %d bytes
unpacked in %d bytes
, deinterleaved
 low-aligned
 high-aligned
%d.%d
%s-bit%s%s %s%s%s%s%s
from %d-bit source, 
from UNKNOWN source bit depth, 
%d frames/packet
%d bits/channel, %d bytes/packet, %d frames/packet, %d bytes/frame
-@/#
Expected fractional bits following '.'
non-interleaved flag invalid for non-PCM formats
extra characters at end of format string: %s
Invalid format string: %s
Syntax of format strings is: 
ESt11logic_error
xfuapargxoba
MbP?St13runtime_error
St9exception
NSt3__117bad_function_callE
xfuaxtncxoba
xfualmrcxoba
mcpl)
?xfuamlpslppa
xfuadgisxoba
xfuaftmlxoba
@(#)PROGRAM:SoundAnalysis  PROJECT:SoundAnalysis-1
xfuarfmtxoba
Mb`?A
xfuamusaxoba
xfuafidaxoba
xfuanimaxoba
xfualumaxoba
nguatpnixoba
xfuatpuoxoba
xfuayledxoba
xfuaniagxoba
xfuangbdxoba
xfuatsetxoba
xfuaypocxoba
xfuangcvxoba
xfuammusxoba
xmuaxximxoba
xfuanjhcxoba
xfuapshcxoba
xfuapchcxoba
xfuadaedxoba
xfuatsncxoba
ltnctcbdxoba
xfuaclrsxoba
xfuapnfnxoba
cfuaccrsxoba
@`@cfualberxoba
ltncvrucxoba
p?UL
+Hub?
Y@q=
^@ffffff
?fffff6t@\
@St12length_error
St18bad_variant_access
-__pn__p&&_v||_v!__v==_v=!_v
St9bad_alloc
xfuaniagxoba
xfualumaxoba
xfuanimaxoba
xfuafidaxoba
xfuamusaxoba
xfuangcvxoba
xfuangbdxoba
xfuaypocxoba
xfuammusxoba
xmuaxximxoba
xfuatsetxoba
cfuaccrsxoba
cfualberxoba
xfuarfmtxoba
xfuanjhcxoba
xfuapshcxoba
xfuapchcxoba
xfuayledxoba
xfuadaedxoba
xfuatsncxoba
ltnctcbdxoba
ltncvrucxoba
xfuapnfnxoba
xfuaclrsxoba
N8DSPGraph9ExceptionE
N8minijson6detail18number_parse_errorE
N8minijson6detail14encoding_errorE
N8minijson11parse_errorE
St12out_of_range
?/';
 9j*
!H"H
VrH-
GRty
]kK"
Z?Lq
12CAXException
St8bad_cast
IncludePaths parse failed
Substitutions parse failed
SNDSPConfiguration parse failed
Applying AUStrip %@ to graph %@ failed
Error applying AUStrip. DSPGraph must be the first item in a DSPConfiguration.
Applying PropertyStrip %@ to graph %@ failed
Error applying PropertyStrip. DSPGraph must be the first item in a DSPConfiguration.
DSPGraphInfo doesn't specify either text or path
AUStripInfo doesn't specify either value or path
PropertyStripInfo doesn't specify either value or path
Couldn't open audio file %@ with error %@
Unknown exception caught!
Caught OSStatus exception %d %4.4s
std::exception caught: %s.
Caught graph exception %d %4.4s %s in %s:%i
Invalid model, inputDescriptions.count = %lu
Invalid model, input feature must be a multi-array
Invalid model, classification models must have 'predictedProbabilitesName' and 'predictedFeaturesKey' properties
Could register audio units. Returning nil for %@
request failed to adapt to system configuration %@ with error %@
failed to set processing contexts
Unknown error
Unimplemented
Unknown error processing tree
No sample rate metadata provided in model. Defaulting to 16kHz.
AUStrip is nil
PropertyStrip is nil
Box %s doesn't exist in graph
Error: Unable to call RegisterAudioUnits_InternalUnsearchable from libAudioDSP.dylib.
Graph %@ couldn't be compiled
Graph couldn't be compiled from text
throwing DSPGraph::Exception with backtrace:
%s:%d:%s: _vp: vptimefreqconverter::analyze: not configured for conversion
%s:%d:%s: _vp: vptimefreqconverter::analyze: not configured for analysis
%s:%d:%s: _vp: vptimefreqconverter::synthesize: not configured for conversion
%s:%d:%s: _vp: vptimefreqconverter::synthesize: not configured for synthesis
%s:%d:%s: %s
%s:%d:%s: about to throw %s: %s
 PackednessIsSignificant only applies for PCM
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
SNSpeechUtteranceResult
SNTimeRangeProvidingWritable
SNTimeRangeProviding
NSObject
SNConfidenceProvidingWritable
SNConfidenceProviding
SNDetectSignalThresholdRequest
SNAnalyzerProviding
SNRequest
SNDetectSignalThresholdRequestImpl
SNAnalyzing
SNProcessing
SNClassificationResult
SNResult
SNClassification
SNDefaultInfo
SNUserDefaults
SNDSPItemInfo
SNDSPGraphInfo
SNAUStripInfo
SNPropertyStripInfo
SNDSPConfiguration
SNDSPGraphLoader
SNSystemConfiguration
SNAudioFileAnalyzer
SNAnalyzerHost
SNDSPGraphBox
SNSoundClassifier
SNClassifySoundRequest
SNDSPGraphCustomModel
_SNVGGishFrontEndProcessingCustomModel
MLCustomModel
SNDetectSpeechUtteranceRequest
SNSpeechUtteranceDetector
SNAnalyzerInfo
SNAudioStreamAnalyzer
SNTimeConverting
SNResultsGating
SNUtils
SNResultsCollector
SNResultsObserving
SNDSPGraph
SNDSPGraphUtilities
SNError
SNAudioUnitRegistration
SNNullRequest
SNNullDetector
SNDSPGraphInterpreter
SNSignalThresholdResult
SNAudioProcessorCache
DSPGMLInputProvider
MLFeatureProvider
DSPGCoreMLInfo
SNNullResult
SNMeasureLKFSRequest
SNAudioLevelMeasurer
SNLKFSResult
description
detected
stringWithFormat:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
timeRange
setTimeRange:
confidence
setConfidence:
setDetected:
_detected
init
sampleRate
setSampleRate:
blockSize
setBlockSize:
magnitudeThreshold
setMagnitudeThreshold:
analyzer
.cxx_destruct
_detector
array
addObject:
updateGraph
adaptToSystemConfiguration:error:
graph
resultsFromBox:renderedWithFrameCount:
sharedProcessorConfiguration
resultsBox
primeGraph
.cxx_construct
_systemConfiguration
_graph
_blockSize
_sampleRate
_magnitudeThreshold
exceptionWithName:reason:userInfo:
_init
classifications
setClassifications:
_classifications
_timeRange
identifier
setIdentifier:
_identifier
_confidence
explanation
setExplanation:
setKey:
initialValue
setInitialValue:
_explanation
_key
_initialValue
alloc
instance
userDefaults
initWithSuiteName:
setUserDefaults:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
arrayWithArray:
allDefaultsInfo
_userDefaults
objectForKeyedSubscript:
initWithDictionary:resourcePath:
stringByAppendingPathComponent:
countByEnumeratingWithState:objects:count:
path
text
includePaths
substitutions
setPath:
setText:
setIncludePaths:
setSubstitutions:
_path
_text
_includePaths
_substitutions
value
containsOnlyAUStrips:
_value
resourcePath
_resourcePath
initWithArray:resourcePath:
dspItems
setDspItems:
_dspItems
graphWithGraphInfo:
applyAUStrip:toGraph:
name
applyPropertyStrip:toGraph:
compileText:withSubstitutions:includingPaths:
compileFile:withSubstitutions:includingPaths:
setAUStrip:
dictionaryWithContentsOfFile:
setPropertyStrip:withResourcePath:
graphWithConfiguration:
allocWithZone:
initWithSampleRate:channelCount:
initWithDouble:
channelCount
initWithUnsignedInt:
copyWithZone:
setChannelCount:
_channelCount
initForReading:commonFormat:interleaved:error:
processingFormat
initWithFormat:
initWithPCMFormat:frameCapacity:
length
framePosition
readIntoBuffer:frameCount:error:
analyzeAudioBuffer:atAudioFramePosition:
frameLength
completeAnalysis
analyze
addRequest:withObserver:error:
removeRequest:
removeAllRequests
detailedDescription
primeWithFormat:
initWithURL:error:
analyzeWithCompletionHandler:
cancelAnalysis
_audioFile
_streamAnalyzer
_queue
_wasCancelled
requestDidComplete:
request:didFailWithError:
copy
clientSampleTimeFromSampleTime:fromBox:
clientSampleRate
initWithRequest:resultsObserver:timeConverter:resultsGater:
handleAnalyzerCompletion
handleAnalyzerError:
clientResultsFromProcessorResults:
requestDidReturnError:
primeAnalyzerGraph
requestState
setRequestState:
_request
_analyzer
_timeConverter
_resultsObserver
_resultsGater
_requestState
request:didProduceResult:
shouldProduceResults
raise:format:
initWithBox:fromGraph:
startRecordingPort:toFile:
stopRecordingPort:
startInjectingPort:toFile:shouldLoop:
stopInjectingPort:
numInputs
numOutputs
getParameterList:numParameterIDs:inScope:
getParameterInfo:forID:inScope:
getParameter:forID:scope:element:
hasParameter:scope:element:
setParameter:forID:scope:element:bufferOffset:
_box
UTF8String
modelDescription
inputDescriptionsByName
count
allValues
objectAtIndexedSubscript:
multiArrayConstraint
shape
predictedProbabilitiesName
predictedFeatureName
modelSampleRate:withDefaultRate:
modelBlockSize:
errorForInvalidModelWithLocalizedDescription:
outputProvider
featureValueForName:
dictionaryValue
arrayWithCapacity:
doubleValue
numberWithFloat:
compare:
sortedArrayUsingComparator:
subarrayWithRange:
completeTimingInfoInResult:usingBox:modelBlockSize:
arrayWithObjects:count:
initWithMLModel:error:
overlapFactor
setOverlapFactor:
primeFrameCount
_model
_modelBlockSize
_resultsToDiscardCount
_primeFrameCount
_overlapFactor
_classifier
featureNames
anyObject
multiArrayValue
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
initWithDictionary:error:
type
isAllowedShape:error:
outputDescriptionsByName
intValue
initWithShape:dataType:error:
allKeys
preProcessCallback
initWithModelDescription:expectedInputShape:expectedOutputShape:graph:error:
predictionFromFeatures:options:error:
setPreProcessCallback:
_modelDescription
_inputConstraint
_outputConstraint
_scratchFloatSpace
_modelOutput
_preProcessCallback
numberWithInt:
initWithModelDescription:parameterDictionary:error:
predictionsFromBatch:options:error:
dataType
dataPointer
registerAudioUnits
initWithRequestType:
hardVAD
decisionDelay
createGraph
bundleForClass:
softVAD
_requestType
request
setRequest:
resultsObserver
setResultsObserver:
analyzerHost
setAnalyzerHost:
sharedProcessor
setSharedProcessor:
configured
setConfigured:
configurationError
setConfigurationError:
_configured
_analyzerHost
_sharedProcessor
_configurationError
streamDescription
validateFormatIsPCM:
removeObject:
containsObject:
arrayByAddingObject:
addAnalyzerInfoForRequest:resultsObserver:
removeAnalyzerInfoForRequest:
sharedProcessorWithConfiguration:
markAllAnalyzersNeedConfiguring
updateProcessingTreeFormatWithFormat:
configureUnconfiguredAnalyzersWithFormat:
updateTreeProcessingContexts
format
sendUnexpectedErrorToAllRequests
_analyzeAudioBuffer:atAudioFramePosition:
splitBuffer:intoBuffersWithFrameCount:
audioBufferList
sendErrorToAllRequests:
analyzerInfoForRequest:
_removeRequest:
analyzeAudioBufferList:withAudioFrameCount:atAudioFramePosition:
writeDSPGraphDotFilesToDirectory:
_processorCache
_processingContexts
_processingTree
_currentFormat
_requests
_analyzerInfos
_needToConfigureAnalyzers
_shouldProduceResults
mutableAudioBufferList
setFrameLength:
frameCapacity
vggishFrontEndProcessingInputShape
vggishFrontEndProcessingOutputShape
constraintWithShape:dataType:
featureDescriptionWithName:type:optional:constraints:
initWithInputDescriptions:outputDescriptions:predictedFeatureName:predictedProbabilitiesName:metadata:
metadata
numberOfElements:
silenceUnfilledFramesInBuffer:
copyAudioBufferList:to:frameCount:bytesPerFrame:
vggishFeatureEmbeddingInputShape
vggishFeatureEmbeddingOutputShape
vggishFrontEndProcessingModelDescription
modelInputBlockSize:
modelOutputBlockSize:
removeAllObjects
results
clearResults
errors
clearErrors
clearCompleteCount
completeCount
_results
_errors
_completeCount
initWithDSPGraph:
setVariableSliceDuration:forSampleRate:
sliceDurationInSamples
initialized
configure
unconfigure
initialize
uninitialize
reset
getParameter:forID:
hasParameter:
setParameter:forID:
getPropertySize:isWritable:forID:
getProperty:withSize:forID:
setProperty:withSize:forID:
boxWithName:
boxes
setName:
numberOfInputs
numberOfOutputs
writeDotFileToPath:
stopRecordingBoxesInGraph:
defaultManager
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
setDateFormat:
date
stringFromDate:
componentsSeparatedByString:
boolValue
startRecordingBoxes:inGraph:toDirectory:error:
startInjectingBoxes:inGraph:error:
stopInjectingBoxesInGraph:
dictionaryWithObjectsAndKeys:
errorWithCode:message:
errorForInvalidFormatWithLocalizedDescription:
errorForOperationFailedWithLocalizedDescription:
computationalDutyCycle
setComputationalDutyCycle:
graphIsDeadEnded
setGraphIsDeadEnded:
shouldThrowException
setShouldThrowException:
_graphIsDeadEnded
_shouldThrowException
_computationalDutyCycle
stringMapFromStringDictionary:
stringVectorFromStringArray:
_interpreter
dictionary
audioProcessorWithConfiguration:
objectForKey:
createAudioProcessorWithConfiguration:
setObject:forKey:
_activeProcessorsCache
setWithObjects:
isEqualToString:
featureValueWithMultiArray:
initWithFeatureDescription:
input
setInput:
_featureDescription
_input
model
setModel:
setModelDescription:
inputProvider
setInputProvider:
setOutputProvider:
outputs
setOutputs:
outputLabels
setOutputLabels:
_inputProvider
_outputProvider
_outputs
_outputLabels
modelWithContentsOfURL:error:
allObjects
firstObject
fileURLWithPath:
initWithInputSensitivity:
setDecibelLevel:
inputSensitivity
_inputSensitivity
decibelLevel
_decibelLevel
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
{?={?=qiIq}{?=qiIq}}16@0:8
v64@0:8{?={?=qiIq}{?=qiIq}}16
d16@0:8
v24@0:8d16
v20@0:8B16
{?="start"{?="value"q"timescale"i"flags"I"epoch"q}"duration"{?="value"q"timescale"i"flags"I"epoch"q}}
@"<SNAnalyzing>"16@0:8
I16@0:8
v20@0:8I16
v16@0:8
@"SNDetectSignalThresholdRequestImpl"
B32@0:8@16^@24
{shared_ptr<DSPGraph::Graph>=^{Graph}^{__shared_weak_count}}16@0:8
B32@0:8@"SNSystemConfiguration"16^@24
@28@0:8^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}16i24
^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}16@0:8
@"NSArray"28@0:8^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}16i24
@"SNSystemConfiguration"
{shared_ptr<DSPGraph::Graph>="__ptr_"^{Graph}"__cntrl_"^{__shared_weak_count}}
v24@0:8@16
@"NSArray"
@"NSString"
@"NSUserDefaults"
@32@0:8@16@24
@"NSDictionary"
@24@0:8@16
B32@0:8@16@24
@28@0:8d16I24
@24@0:8^{_NSZone=}16
@32@0:8@16^@24
v24@0:8@?16
B40@0:8@16@24^@32
@"AVAudioFile"
@"SNAudioStreamAnalyzer"
@"NSObject<OS_dispatch_queue>"
@48@0:8@16@24@32@40
q16@0:8
v24@0:8q16
@"<SNAnalyzerProviding>"
@"<SNAnalyzing>"
@"<SNTimeConverting>"
@"<SNResultsObserving>"
@"<SNResultsGating>"
@40@0:8^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}16{shared_ptr<DSPGraph::Graph>=^{Graph}^{__shared_weak_count}}24
B32@0:8q16@24
B24@0:8q16
B36@0:8q16@24B32
B36@0:8^I16^q24I32
B32@0:8^{AudioUnitParameterInfo=[52c]^{__CFString}I^{__CFString}IfffI}16I24I28
B36@0:8^f16I24I28I32
B28@0:8I16I20I24
B40@0:8f16I20I24I28q32
^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}
v40@0:8@16^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}24q32
i16@0:8
@"MLModel"
@"SNSoundClassifier"
@56@0:8@16@24@32{unique_ptr<DSPGraph::Graph, std::__1::default_delete<DSPGraph::Graph> >={__compressed_pair<DSPGraph::Graph *, std::__1::default_delete<DSPGraph::Graph> >=^{Graph}}}40^@48
@40@0:8@16@24^@32
@?16@0:8
@"MLModelDescription"
@"MLMultiArrayConstraint"
{unique_ptr<DSPGraph::Graph, std::__1::default_delete<DSPGraph::Graph> >="__ptr_"{__compressed_pair<DSPGraph::Graph *, std::__1::default_delete<DSPGraph::Graph> >="__value_"^{Graph}}}
{vector<float, std::__1::allocator<float> >="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::__1::allocator<float> >="__value_"^f}}
@"MLMultiArray"
@40@0:8@"MLModelDescription"16@"NSDictionary"24^@32
@"<MLFeatureProvider>"40@0:8@"<MLFeatureProvider>"16@"MLPredictionOptions"24^@32
@"<MLBatchProvider>"40@0:8@"<MLBatchProvider>"16@"MLPredictionOptions"24^@32
@"SNDSPGraphCustomModel"
@24@0:8q16
@"SNSpeechUtteranceDetector"
f16@0:8
@"SNAnalyzerHost"
@"<SNProcessing>"
@"NSError"
q32@0:8q16^{Box=^^?^{Graph}^{IsoGroup}^{Subset}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}q{vector<DSPGraph::InputPort, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}^{InputPort}{__compressed_pair<DSPGraph::InputPort *, std::__1::allocator<DSPGraph::InputPort> >=^{InputPort}}}{vector<DSPGraph::OutputPort, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}^{OutputPort}{__compressed_pair<DSPGraph::OutputPort *, std::__1::allocator<DSPGraph::OutputPort> >=^{OutputPort}}}{unordered_set<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={__hash_table<DSPGraph::Box *, std::__1::hash<DSPGraph::Box *>, std::__1::equal_to<DSPGraph::Box *>, std::__1::allocator<DSPGraph::Box *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>, std::__1::allocator<std::__1::__hash_node<DSPGraph::Box *, void *> > >={__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>=^{__hash_node_base<std::__1::__hash_node<DSPGraph::Box *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<DSPGraph::Box *> >=Q}{__compressed_pair<float, std::__1::equal_to<DSPGraph::Box *> >=f}}}{vector<DSPGraph::ParameterTap, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}^{ParameterTap}{__compressed_pair<DSPGraph::ParameterTap *, std::__1::allocator<DSPGraph::ParameterTap> >=^{ParameterTap}}}{vector<DSPGraph::PropertyTap, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}^{PropertyTap}{__compressed_pair<DSPGraph::PropertyTap *, std::__1::allocator<DSPGraph::PropertyTap> >=^{PropertyTap}}}{vector<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> > > >=^{unique_ptr<DSPGraph::FileRecorder, std::__1::default_delete<DSPGraph::FileRecorder> >}}}{vector<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> > > >=^{unique_ptr<DSPGraph::FileInjector, std::__1::default_delete<DSPGraph::FileInjector> >}}}{mutex={_opaque_pthread_mutex_t=q[56c]}}{vector<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}{__compressed_pair<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > *, std::__1::allocator<std::__1::unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> > > >=^{unique_ptr<DSPGraph::Analyzer, std::__1::default_delete<DSPGraph::Analyzer> >}}}{Set<DSPGraph::Analyzer *>=^{Member}Q}{map<std::__1::pair<unsigned int, int>, long long, std::__1::less<std::__1::pair<unsigned int, int> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned int, int>, long long> > >={__tree<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned int, int>, std::__1::__value_type<std::__1::pair<unsigned int, int>, long long>, std::__1::less<std::__1::pair<unsigned int, int> >, true> >=Q}}}{function<void (double)>={__value_func<void (double)>={type=[32C]}^{__base<void (double)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}{function<void (DSPGraph::Box *, int)>={__value_func<void (DSPGraph::Box *, int)>={type=[32C]}^{__base<void (DSPGraph::Box *, int)>}}}BBBBq}24
v32@0:8@16@24
v36@0:8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16I24q28
v32@0:8@16q24
@"SNAudioProcessorCache"
{list<SoundAnalysis::ProcessingContext, std::__1::allocator<SoundAnalysis::ProcessingContext> >="__end_"{__list_node_base<SoundAnalysis::ProcessingContext, void *>="__prev_"^{__list_node_base<SoundAnalysis::ProcessingContext, void *>}"__next_"^{__list_node_base<SoundAnalysis::ProcessingContext, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingContext, void *> > >="__value_"Q}}
{ProcessingTree="mGraph"{shared_ptr<DSPGraph::Graph>="__ptr_"^{Graph}"__cntrl_"^{__shared_weak_count}}"mProcessingContexts"{list<SoundAnalysis::ProcessingContext, std::__1::allocator<SoundAnalysis::ProcessingContext> >="__end_"{__list_node_base<SoundAnalysis::ProcessingContext, void *>="__prev_"^{__list_node_base<SoundAnalysis::ProcessingContext, void *>}"__next_"^{__list_node_base<SoundAnalysis::ProcessingContext, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingContext, void *> > >="__value_"Q}}"mFormatMatchingNodes"{list<SoundAnalysis::FormatMatchingNode, std::__1::allocator<SoundAnalysis::FormatMatchingNode> >="__end_"{__list_node_base<SoundAnalysis::FormatMatchingNode, void *>="__prev_"^{__list_node_base<SoundAnalysis::FormatMatchingNode, void *>}"__next_"^{__list_node_base<SoundAnalysis::FormatMatchingNode, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::FormatMatchingNode, void *> > >="__value_"Q}}"mSharedProcessingNodes"{list<SoundAnalysis::SharedProcessingNode, std::__1::allocator<SoundAnalysis::SharedProcessingNode> >="__end_"{__list_node_base<SoundAnalysis::SharedProcessingNode, void *>="__prev_"^{__list_node_base<SoundAnalysis::SharedProcessingNode, void *>}"__next_"^{__list_node_base<SoundAnalysis::SharedProcessingNode, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::SharedProcessingNode, void *> > >="__value_"Q}}"mAnalyzerNodes"{list<SoundAnalysis::AnalyzerNode, std::__1::allocator<SoundAnalysis::AnalyzerNode> >="__end_"{__list_node_base<SoundAnalysis::AnalyzerNode, void *>="__prev_"^{__list_node_base<SoundAnalysis::AnalyzerNode, void *>}"__next_"^{__list_node_base<SoundAnalysis::AnalyzerNode, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::AnalyzerNode, void *> > >="__value_"Q}}"mRootNode"{RootNode="_vptr$ProcessingNode"^^?"mUpstreamNode"^{ProcessingNode}"mDownstreamNodes"{list<SoundAnalysis::ProcessingNode *, std::__1::allocator<SoundAnalysis::ProcessingNode *> >="__end_"{__list_node_base<SoundAnalysis::ProcessingNode *, void *>="__prev_"^{__list_node_base<SoundAnalysis::ProcessingNode *, void *>}"__next_"^{__list_node_base<SoundAnalysis::ProcessingNode *, void *>}}"__size_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SoundAnalysis::ProcessingNode *, void *> > >="__value_"Q}}"mProcessingBox"^{Box}"mUpstreamFormat"{FormatAndBlockSize="mFormat"{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}"mBlockSize"i}"mDownstreamFormat"{FormatAndBlockSize="mFormat"{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}"mBlockSize"i}}"mMaxFramesPerSlice"i}
@"AVAudioFormat"
@"NSMutableArray"
@28@0:8@16I24
v40@0:8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16^{AudioBufferList=I[1{AudioBuffer=II^v}]}24I32I36
i24@0:8@16
i28@0:8@16i24
v32@0:8@"<SNRequest>"16@"<SNResult>"24
v32@0:8@"<SNRequest>"16@"NSError"24
v24@0:8@"<SNRequest>"16
@32@0:8{shared_ptr<DSPGraph::Graph>=^{Graph}^{__shared_weak_count}}16
B32@0:8q16q24
B28@0:8^f16I24
B20@0:8I16
B24@0:8f16I20
B36@0:8^I16^B24I32
B36@0:8^v16^I24I32
B32@0:8r^v16I24I28
B48@0:8@16@24@32^@40
@32@0:8q16@24
@"SNNullDetector"
@40@0:8@16@24@32
{unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}24@0:8@16
{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}24@0:8@16
{unique_ptr<DSPGraph::Interpreter, std::__1::default_delete<DSPGraph::Interpreter> >="__ptr_"{__compressed_pair<DSPGraph::Interpreter *, std::__1::default_delete<DSPGraph::Interpreter> >="__value_"^{Interpreter}}}
@"NSMutableDictionary"
@"MLFeatureValue"24@0:8@"NSString"16
@"NSSet"16@0:8
@"MLFeatureDescription"
@"<DSPGMLModel>"
@"DSPGMLInputProvider"
@"<MLFeatureProvider>"
@"SNAudioLevelMeasurer"
@20@0:8f16
v20@0:8f16
