MbP?
>fff?
?33s?
<ffffff
MbP?{
?ffffff
+ :|
Z;Doq;
F<&U[<
AB=o
I%?^
D?|,I?
LQ?"
{a?8
vf?*
o?7Sq?
z?Ee{?
s}?S
~?^I~?
r~?x
?333333
@(#)PROGRAM:SiriUICore  PROJECT:SiriUICore-1
glyph_check
caar
v8@?0
position
bounds
transform
contents
anchorPoint
opacity
strokeStart
strokeEnd
strokeColor
fillColor
duration
Td,R,N
mass
Td,N,V_mass
stiffness
Td,N,V_stiffness
damping
Td,N,V_damping
velocity
Td,N,V_velocity
timing
T@"CAMediaTimingFunction",&,N,V_timing
com.apple.VoiceShorcutsUI.additive
%@.%@
%@.%lu
primaryColor
T@"UIColor",C,N,V_primaryColor
revealed
TB,N
com.apple.siriuicore.springAnimationFactory
Distance Matrix:
Order of Precedence:%@
operationPrecedenceArray
T@"NSArray",C,N,V_operationPrecedenceArray
script
T@"NSMutableArray",&,N,V_script
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
progress
T@"NSProgress",R
T@"NSProgress",&,N,V_progress
%%0%ldld 
iSize
TQ,R,N,V_iSize
jSize
TQ,R,N,V_jSize
shouldBoundsCheck
TB,N,V_shouldBoundsCheck
SUICSetSiriUILanguageCode
Localizable
strings
TickMarkView:setHidden:%d
TickMarkView:didMoveToSuperview
TickMarkView:layoutSubviews
com.apple.SUICApplicationStateHelper.queue
v16@?0@"NSDictionary"8
v16@?0@"NSArray"8
v32@?0@"NSDictionary"8Q16^B24
v32@?0@"FBSDisplayLayoutElement"8Q16^B24
numAuraIndices
TI,N,V_numAuraIndices
numAuraIndicesCulled
TI,N,V_numAuraIndicesCulled
numWaveIndices
TI,N,V_numWaveIndices
gl_indices
T^I,N,V_gl_indices
kSUICFlamesViewUIApplicationNotificationReason
GdXjx1ixZYvN9Gg8iSf68A
in_Polar
in_FittedBounds
in_Time_ZTime_Height_Alpha
in_States
in_ViewportDim_ScreenScale_UnitLength
in_FragmentColor
-[SUICFlamesViewLegacy _setupVertexBuffer]
isRenderingEnabled
TB,R,N
flamesDelegate
T@"<SUICFlamesViewProvidingDelegate>",W,N
mode
Tq,N
state
showAura
freezesAura
reduceFrameRate
reduceThinkingFramerate
activeFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N
overlayImage
T@"UIImage",&,N
dictationColor
T@"UIColor",&,N
renderInBackground
paused
horizontalScaleFactor
Td,N
accelerateTransitions
T@"<SUICFlamesViewProvidingDelegate>",W,N,V_flamesDelegate
Tq,N,V_mode
Tq,N,V_state
TB,N,V_showAura
TB,N,V_freezesAura
TB,N,V_reduceFrameRate
TB,N,V_reduceThinkingFramerate
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_activeFrame
T@"UIImage",&,N,V_overlayImage
T@"UIColor",&,N,V_dictationColor
TB,N,V_renderInBackground
TB,N,V_paused
Td,N,V_horizontalScaleFactor
TB,N,V_accelerateTransitions
#version 100
#extension GL_EXT_separate_shader_objects : enable
layout(location = 0) attribute vec4 in_Polar;
layout(location = 1) attribute vec4 in_ViewportDim_ScreenScale_UnitLength;
layout(location = 2) attribute vec4 in_FittedBounds;
layout(location = 3) attribute vec4 in_Time_ZTime_Height_Alpha;
layout(location = 4) attribute vec4 in_States;
varying mediump vec3 out_ChannelCoord;
varying mediump vec3 out_ColorNoise;
varying mediump vec3 out_Alpha3f;
varying mediump float out_Alpha1f;
varying mediump float out_CenterY;
vec3 mod289(vec3 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 mod289(vec4 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 permute(vec4 x) {
return mod289(((x*34.0)+1.0)*x);
vec4 taylorInvSqrt(vec4 r)
return 1.79284291400159 - 0.85373472095314 * r;
float snoise(vec3 v)
const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
vec3 i  = floor(v + dot(v, C.yyy) );
vec3 x0 =   v - i + dot(i, C.xxx) ;
vec3 g = step(x0.yzx, x0.xyz);
vec3 l = 1.0 - g;
vec3 i1 = min( g.xyz, l.zxy );
vec3 i2 = max( g.xyz, l.zxy );
vec3 x1 = x0 - i1 + C.xxx;
vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
i = mod289(i);
vec4 p = permute( permute( permute(
i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
float n_ = 0.142857142857; // 1.0/7.0
vec3  ns = n_ * D.wyz - D.xzx;
vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
vec4 x_ = floor(j * ns.z);
vec4 y_ = floor(j - 7.0 * x_ );
vec4 x = x_ *ns.x + ns.yyyy;
vec4 y = y_ *ns.x + ns.yyyy;
vec4 h = 1.0 - abs(x) - abs(y);
vec4 b0 = vec4( x.xy, y.xy );
vec4 b1 = vec4( x.zw, y.zw );
vec4 s0 = floor(b0)*2.0 + 1.0;
vec4 s1 = floor(b1)*2.0 + 1.0;
vec4 sh = -step(h, vec4(0.0));
vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
vec3 p0 = vec3(a0.xy,h.x);
vec3 p1 = vec3(a0.zw,h.y);
vec3 p2 = vec3(a1.xy,h.z);
vec3 p3 = vec3(a1.zw,h.w);
vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
p0 *= norm.x;
p1 *= norm.y;
p2 *= norm.z;
p3 *= norm.w;
vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
m = m * m;
return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
dot(p2,x2), dot(p3,x3) ) );
const float kThinkingHeightMax = 0.45;
const float kFastTimeMultiplier = 4.4;
const float pi = 3.1415926535;
float FastSin( float rad )
   float x = mod(rad, 2.0 * pi) - pi;
   return (-4.0/(pi*pi)) * x * (pi - abs(x));
float FastCos( float rad )
   return FastSin(rad + pi * 0.5);
void main(void)
float time =   in_Time_ZTime_Height_Alpha.x;
float zTime =  in_Time_ZTime_Height_Alpha.y;
float height = in_Time_ZTime_Height_Alpha.z;
float globalAlpha = in_Time_ZTime_Height_Alpha.w;
float r_orig = in_Polar.x;
float q_orig = in_Polar.y;
float q_noise = in_Polar.w;
vec2 scale = in_FittedBounds.zw / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z);
vec2 center = (in_FittedBounds.xy + (in_FittedBounds.zw * 0.5)) / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z) * 2.0 - 1.0;
center.y = -center.y;
vec2 device_pixel = 2.0 / in_ViewportDim_ScreenScale_UnitLength.xy;
float abs_q_orig_ndc = abs(q_orig - pi)/pi * 2.0 - 1.0;
float abs_q_noise_ndc = abs(q_noise - pi)/pi * 2.0 - 1.0;
float sin_q = FastSin(q_orig);
float cos_q = FastCos(q_orig);
float state_0 = smoothstep(0.0, 1.0, in_States.x);
float state_1 = smoothstep(0.0, 1.0, in_States.y);
float state_2 = smoothstep(0.0, 1.0, in_States.z);
float state_3_fadeOut =    smoothstep(0.0, 0.25, in_States.w);
float state_3_change =     smoothstep(0.25, 0.5, in_States.w);
float state_3_fadeIn =     smoothstep(0.5, 1.0, in_States.w);
vec2 theta_geom = mix(vec2(abs_q_orig_ndc, sign(sin_q)), vec2(cos_q, sin_q), state_3_change);
vec2 theta_noise = mix(vec2(abs_q_noise_ndc, sign(sin_q)), vec2(cos_q, sin_q), state_3_change);
vec2 cartesian_orig = theta_geom * r_orig;
vec2 r_geom = mix(vec2(r_orig * (1.0 - state_0), 0.0) * scale, vec2(r_orig * distance(center, vec2(1.0))), state_3_change);
float wave_falloff = (smoothstep(-1.0, -0.5, cartesian_orig.x) - smoothstep(0.5, 1.0, cartesian_orig.x)) * (1.0 - in_States.x * in_States.x * in_States.x);
float aura_point_dist = length(cartesian_orig);
float falloff_aura = mix(1.0, smoothstep(1.0, 0.9, aura_point_dist), state_3_change);
falloff_aura = mix(falloff_aura, 1.0, state_3_change);
float listeningMap = smoothstep(-0.75, 0.0, cartesian_orig.x) - smoothstep(0.0, 0.75, cartesian_orig.x);
listeningMap *= height;
listeningMap *= (state_1 + state_0);
float thinkingMap = smoothstep(-0.3, 0.0, cartesian_orig.x) - smoothstep(0.0, 0.3, cartesian_orig.x);
thinkingMap *= state_2 * ((FastSin(time * kFastTimeMultiplier) + 2.0) * 0.5 * kThinkingHeightMax);
float mapSum = mix(listeningMap + thinkingMap, 1.0, state_3_change);
vec2 cartesian_noise = theta_noise * r_geom;
float noiseFrequency = ((0.00267 + height * 0.004) * (state_0 + state_1) + 0.00267 * state_2) * min(500.0 , max(in_FittedBounds.z, 200.0)) + state_3_change * 0.4;
float noise0 = snoise(vec3(cartesian_noise * noiseFrequency, zTime));
float noise1 = snoise(vec3(cartesian_noise * noiseFrequency, zTime + 1.0));
float noise2 = snoise(vec3(cartesian_noise * noiseFrequency, zTime + 2.0));
float abs_noise0 = abs(noise0);
float abs_noise1 = abs(noise1);
float abs_noise2 = abs(noise2);
float abs_noise = max(max(abs_noise0, abs_noise1), abs_noise2);
r_geom.y = mix(max(mapSum * abs_noise * scale.y, device_pixel.y * 2.0 * (state_1 + state_2)), r_geom.y, state_3_change);
vec2 cartesian_geom = theta_geom * r_geom + center;
vec3 wave_alpha = (1.0 - mapSum * vec3(abs_noise0, abs_noise1, abs_noise2) * 0.95);
wave_alpha *= wave_alpha;
gl_Position = vec4(cartesian_geom, 0.0, 1.0);
out_ChannelCoord = max(mapSum * vec3(abs_noise0, abs_noise1, abs_noise2) * (in_FittedBounds.w * 0.5) * in_ViewportDim_ScreenScale_UnitLength.z, 2.0 * (state_1 + state_2));
out_ColorNoise = 1.0 - (1.0 - vec3(1.0, 0.176, 0.333) * noise0) * (1.0 - vec3(0.251, 1.0, 0.639) * noise1) * (1.0 - vec3(0.0, 0.478, 1.0) * noise2);
out_Alpha3f = wave_alpha * wave_falloff * globalAlpha * (1.0 - state_3_fadeOut);
out_Alpha1f = max(out_ColorNoise.x, max(out_ColorNoise.y, out_ColorNoise.z)) * 0.4 * falloff_aura * (globalAlpha * state_3_fadeIn);
out_CenterY = (in_ViewportDim_ScreenScale_UnitLength.y - (in_FittedBounds.y + (in_FittedBounds.w * 0.5)) * in_ViewportDim_ScreenScale_UnitLength.z);
#version 100
#extension GL_EXT_separate_shader_objects : enable
layout(location = 0) attribute vec4 in_Polar;
layout(location = 1) attribute vec4 in_ViewportDim_ScreenScale_UnitLength;
layout(location = 2) attribute vec4 in_FittedBounds;
layout(location = 3) attribute vec4 in_Time_ZTime_Height_Alpha;
layout(location = 4) attribute vec4 in_States;
varying mediump vec3 out_ChannelCoord;
varying mediump vec3 out_ColorNoise;
varying mediump vec3 out_Alpha3f;
varying mediump float out_Alpha1f;
varying mediump float out_CenterY;
vec3 mod289(vec3 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 mod289(vec4 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 permute(vec4 x) {
return mod289(((x*34.0)+1.0)*x);
vec4 taylorInvSqrt(vec4 r)
return 1.79284291400159 - 0.85373472095314 * r;
float snoise(vec3 v)
const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
vec3 i  = floor(v + dot(v, C.yyy) );
vec3 x0 =   v - i + dot(i, C.xxx) ;
vec3 g = step(x0.yzx, x0.xyz);
vec3 l = 1.0 - g;
vec3 i1 = min( g.xyz, l.zxy );
vec3 i2 = max( g.xyz, l.zxy );
vec3 x1 = x0 - i1 + C.xxx;
vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
i = mod289(i);
vec4 p = permute( permute( permute(
i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
float n_ = 0.142857142857; // 1.0/7.0
vec3  ns = n_ * D.wyz - D.xzx;
vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
vec4 x_ = floor(j * ns.z);
vec4 y_ = floor(j - 7.0 * x_ );
vec4 x = x_ *ns.x + ns.yyyy;
vec4 y = y_ *ns.x + ns.yyyy;
vec4 h = 1.0 - abs(x) - abs(y);
vec4 b0 = vec4( x.xy, y.xy );
vec4 b1 = vec4( x.zw, y.zw );
vec4 s0 = floor(b0)*2.0 + 1.0;
vec4 s1 = floor(b1)*2.0 + 1.0;
vec4 sh = -step(h, vec4(0.0));
vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
vec3 p0 = vec3(a0.xy,h.x);
vec3 p1 = vec3(a0.zw,h.y);
vec3 p2 = vec3(a1.xy,h.z);
vec3 p3 = vec3(a1.zw,h.w);
vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
p0 *= norm.x;
p1 *= norm.y;
p2 *= norm.z;
p3 *= norm.w;
vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
m = m * m;
return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
dot(p2,x2), dot(p3,x3) ) );
const float kThinkingHeightMax = 0.2;
const float kFastTimeMultiplier = 4.4;
const float pi = 3.1415926535;
float FastSin( float rad )
   float x = mod(rad, 2.0 * pi) - pi;
   return (-4.0/(pi*pi)) * x * (pi - abs(x));
float FastCos( float rad )
   return FastSin(rad + pi * 0.5);
void main(void)
float time =   in_Time_ZTime_Height_Alpha.x;
float zTime =  in_Time_ZTime_Height_Alpha.y;
float height = in_Time_ZTime_Height_Alpha.z;
float globalAlpha = in_Time_ZTime_Height_Alpha.w;
float r_orig = in_Polar.x;
float q_orig = in_Polar.y;
float q_noise = in_Polar.w;
vec2 scale = in_FittedBounds.zw / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z);
vec2 center = (in_FittedBounds.xy + (in_FittedBounds.zw * 0.5)) / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z) * 2.0 - 1.0;
center.y = -center.y;
vec2 device_pixel = 2.0 / in_ViewportDim_ScreenScale_UnitLength.xy;
float abs_q_orig_ndc = abs(q_orig - pi)/pi * 2.0 - 1.0;
float abs_q_noise_ndc = abs(q_noise - pi)/pi * 2.0 - 1.0;
float sin_q = FastSin(q_orig);
float cos_q = FastCos(q_orig);
float state_0 = smoothstep(0.0, 1.0, in_States.x);
float state_1 = smoothstep(0.0, 1.0, in_States.y);
float state_2 = smoothstep(0.0, 1.0, in_States.z);
float state_3a = smoothstep(0.0, 0.25, in_States.w);
float state_3b = smoothstep(0.0, 0.5, in_States.w);
float state_3c = smoothstep(0.0, 1.0, in_States.w);
float state_3d = smoothstep(0.75, 1.0, in_States.w);
vec2 theta_geom = mix(vec2(abs_q_orig_ndc, sign(sin_q)), vec2(cos_q, sin_q), state_3c);
vec2 theta_noise = mix(vec2(abs_q_noise_ndc, sign(sin_q)), vec2(cos_q, sin_q), state_3c);
vec2 cartesian_orig = theta_geom * r_orig;
vec2 r_geom = mix(vec2(r_orig * (1.0 - state_0), 0.0) * scale, vec2(r_orig * distance(center, vec2(1.0))), state_3b);
float wave_falloff = (smoothstep(-1.0, -0.5, cartesian_orig.x) - smoothstep(0.5, 1.0, cartesian_orig.x)) * (1.0 - in_States.x * in_States.x * in_States.x);
float aura_point_dist = length(cartesian_orig);
float falloff_aura = mix(1.0, smoothstep(1.0, 0.9, aura_point_dist), state_3a);
falloff_aura = mix(falloff_aura, 1.0, state_3d);
float map_x = abs(theta_geom.x * r_geom.x);
float waitingMap = clamp(FastSin((map_x + in_States.x * 1.5 - 1.0) * pi), 0.0, 1.0);
waitingMap *= 1.0 - 0.6 * state_0 * state_0;
float listeningMap = smoothstep(-0.75, 0.0, cartesian_orig.x) - smoothstep(0.0, 0.75, cartesian_orig.x);
listeningMap *= height;
listeningMap *= (state_1 + state_0);
float pingPong = FastSin(time * kFastTimeMultiplier) * 0.9;
float leftScale = max(0.0, FastSin(time * kFastTimeMultiplier + 0.4 * pi));
leftScale = (leftScale * leftScale * 0.9 + 0.1) * 0.9;
float rightScale = max(0.0, FastSin(time * kFastTimeMultiplier - 0.6 * pi));
rightScale = (rightScale * rightScale * 0.9 + 0.1) * 0.9;
float thinkingMap = smoothstep(pingPong - leftScale, pingPong, abs_q_orig_ndc) * smoothstep(pingPong + rightScale, pingPong, abs_q_orig_ndc) * kThinkingHeightMax;
thinkingMap *= state_2;
float mirroredSineMap = clamp(FastSin((map_x + (1.0 - in_States.z) * 2.0 - 1.0) * pi), 0.0, 1.0);
mirroredSineMap *= 0.3;
thinkingMap += mirroredSineMap;
float mapSum = mix(waitingMap + listeningMap + thinkingMap, 1.0, state_3a);
vec2 cartesian_noise = theta_noise * r_geom;
float noiseFrequency = ((0.00267 + height * 0.004) * (state_0 + state_1) + 0.001333 * state_2) * min(500.0 , max(in_FittedBounds.z, 200.0)) + state_3a * 0.4;
float noise0 = snoise(vec3(cartesian_noise * noiseFrequency, zTime));
float noise1 = snoise(vec3(cartesian_noise * noiseFrequency, zTime + 1.0));
float noise2 = snoise(vec3(cartesian_noise * noiseFrequency, zTime + 2.0));
float abs_noise0 = abs(noise0);
float abs_noise1 = abs(noise1);
float abs_noise2 = abs(noise2);
float abs_noise = max(max(abs_noise0, abs_noise1), abs_noise2);
r_geom.y = mix(max(mapSum * abs_noise * scale.y, device_pixel.y * 2.0 * state_1), r_geom.y, state_3b);
vec2 cartesian_geom = theta_geom * r_geom + center;
vec3 wave_alpha = (1.0 - mapSum * vec3(abs_noise0, abs_noise1, abs_noise2) * 0.95);
wave_alpha *= wave_alpha;
gl_Position = vec4(cartesian_geom, 0.0, 1.0);
out_ChannelCoord = max(mapSum * vec3(abs_noise0, abs_noise1, abs_noise2) * (in_FittedBounds.w * 0.5) * in_ViewportDim_ScreenScale_UnitLength.z, 2.0 * state_1);
out_ColorNoise = 1.0 - (1.0 - vec3(1.0, 0.176, 0.333) * noise0) * (1.0 - vec3(0.251, 1.0, 0.639) * noise1) * (1.0 - vec3(0.0, 0.478, 1.0) * noise2);
out_Alpha3f = wave_alpha * wave_falloff * globalAlpha;
out_Alpha1f = max(out_ColorNoise.x, max(out_ColorNoise.y, out_ColorNoise.z)) * 0.4 * falloff_aura * globalAlpha;
out_CenterY = (in_ViewportDim_ScreenScale_UnitLength.y - (in_FittedBounds.y + (in_FittedBounds.w * 0.5)) * in_ViewportDim_ScreenScale_UnitLength.z);
#version 100
varying mediump vec3 out_ChannelCoord;
varying mediump vec3 out_Alpha3f;
varying mediump float out_CenterY;
void main(void)
   mediump float p = abs(gl_FragCoord.y - out_CenterY);
   mediump vec3 wave_channel = smoothstep(out_ChannelCoord, out_ChannelCoord - 2.0, vec3(p));
   mediump vec4 xColor = vec4(1.0, 0.176, 0.333, out_Alpha3f.x) * wave_channel.x;
   mediump vec4 yColor = vec4(0.251, 1.0, 0.639, out_Alpha3f.y) * wave_channel.y;
   mediump vec4 zColor = vec4(0.0, 0.478, 1.0, out_Alpha3f.z) * wave_channel.z;
   gl_FragColor = 1.0 - (1.0 - xColor) * (1.0 - yColor) * (1.0 - zColor);
#version 100
varying mediump vec3 out_ColorNoise;
varying mediump float out_Alpha1f;
void main(void)
   gl_FragColor = vec4(out_ColorNoise, out_Alpha1f);
#version 100
#extension GL_EXT_separate_shader_objects : enable
layout(location = 0) attribute vec4 in_Polar;
layout(location = 1) attribute vec4 in_ViewportDim_ScreenScale_UnitLength;
layout(location = 2) attribute vec4 in_FittedBounds;
layout(location = 3) attribute vec4 in_Time_ZTime_Height_Alpha;
layout(location = 4) attribute vec4 in_States;
layout(location = 5) attribute vec3 in_FragmentColor;
varying mediump vec4 out_Height_Center_Alpha_UnitSize;
varying mediump vec4 out_Viewport;
varying mediump vec4 out_FittedBounds;
varying mediump vec3 out_FragmentColor;
vec3 mod289(vec3 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 mod289(vec4 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 permute(vec4 x) {
return mod289(((x*34.0)+1.0)*x);
vec4 taylorInvSqrt(vec4 r)
return 1.79284291400159 - 0.85373472095314 * r;
float snoise(vec3 v)
const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
vec3 i  = floor(v + dot(v, C.yyy) );
vec3 x0 =   v - i + dot(i, C.xxx) ;
vec3 g = step(x0.yzx, x0.xyz);
vec3 l = 1.0 - g;
vec3 i1 = min( g.xyz, l.zxy );
vec3 i2 = max( g.xyz, l.zxy );
vec3 x1 = x0 - i1 + C.xxx;
vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
i = mod289(i);
vec4 p = permute( permute( permute(
i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
float n_ = 0.142857142857; // 1.0/7.0
vec3  ns = n_ * D.wyz - D.xzx;
vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
vec4 x_ = floor(j * ns.z);
vec4 y_ = floor(j - 7.0 * x_ );
vec4 x = x_ *ns.x + ns.yyyy;
vec4 y = y_ *ns.x + ns.yyyy;
vec4 h = 1.0 - abs(x) - abs(y);
vec4 b0 = vec4( x.xy, y.xy );
vec4 b1 = vec4( x.zw, y.zw );
vec4 s0 = floor(b0)*2.0 + 1.0;
vec4 s1 = floor(b1)*2.0 + 1.0;
vec4 sh = -step(h, vec4(0.0));
vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
vec3 p0 = vec3(a0.xy,h.x);
vec3 p1 = vec3(a0.zw,h.y);
vec3 p2 = vec3(a1.xy,h.z);
vec3 p3 = vec3(a1.zw,h.w);
vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
p0 *= norm.x;
p1 *= norm.y;
p2 *= norm.z;
p3 *= norm.w;
vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
m = m * m;
return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
dot(p2,x2), dot(p3,x3) ) );
const float kThinkingHeightMax = 0.2;
const float kFastTimeMultiplier = 3.0;
const float pi = 3.1415926535;
float FastSin( float rad )
   float x = mod(rad, 2.0 * pi) - pi;
   return (-4.0/(pi*pi)) * x * (pi - abs(x));
float FastCos( float rad )
   return FastSin(rad + pi * 0.5);
void main(void)
float time =   in_Time_ZTime_Height_Alpha.x;
float zTime =  in_Time_ZTime_Height_Alpha.y;
float height = in_Time_ZTime_Height_Alpha.z;
float globalAlpha = in_Time_ZTime_Height_Alpha.w;
float r_orig = in_Polar.x;
float q_orig = in_Polar.y;
float q_noise = in_Polar.w;
vec2 scale = in_FittedBounds.zw / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z);
vec2 center = (in_FittedBounds.xy + (in_FittedBounds.zw * 0.5)) / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z) * 2.0 - 1.0;
center.y = -center.y;
vec2 logical_pixel = 1.0 / (in_ViewportDim_ScreenScale_UnitLength.xy);
float abs_q_orig_ndc = abs(q_orig - pi)/pi * 2.0 - 1.0;
float abs_q_noise_ndc = abs(q_noise - pi)/pi * 2.0 - 1.0;
float sin_q = FastSin(q_orig);
float cos_q = FastCos(q_orig);
float state_0 = smoothstep(0.0, 1.0, in_States.x);
float state_1 = smoothstep(0.0, 1.0, in_States.y);
vec2 theta_geom = vec2(abs_q_orig_ndc, sign(sin_q));
vec2 theta_noise = vec2(abs_q_noise_ndc, sign(sin_q));
vec2 cartesian_orig = theta_geom * r_orig;
vec2 r_geom = vec2(r_orig * (1.0 - state_0), 0.0) * scale;
vec2 cartesian_noise = theta_noise * r_geom;
float map_x = abs(theta_geom.x * r_geom.x);
float waitingMap = clamp(FastSin((map_x + in_States.x * 1.5 - 1.0) * pi), 0.0, 1.0);
waitingMap *= 1.0 - 0.6 * state_0 * state_0;
float listeningMap = smoothstep(-1.0, -0.25, cartesian_noise.x) - smoothstep(0.25, 1.0, cartesian_noise.x);
listeningMap *= height;
listeningMap *= (state_1 + state_0);
float mapSum = waitingMap + listeningMap;
float noiseFrequency = (0.01 + height * 0.02) * (state_0 + state_1) * max(in_FittedBounds.z, 250.0);
float noise = snoise(vec3(cartesian_noise * noiseFrequency, zTime));
float abs_noise = abs(noise);
r_geom.y = max(mapSum * abs_noise * scale.y, logical_pixel.y * in_ViewportDim_ScreenScale_UnitLength.z * 3.0);
vec2 cartesian_geom = theta_geom * r_geom;
cartesian_geom += center;
float y_center_window = in_ViewportDim_ScreenScale_UnitLength.y - (in_FittedBounds.y + (in_FittedBounds.w * 0.5)) * in_ViewportDim_ScreenScale_UnitLength.z;
float r_window = max(mapSum * abs_noise * (in_FittedBounds.w * 0.5) * in_ViewportDim_ScreenScale_UnitLength.z, 2.0);
gl_Position = vec4(cartesian_geom, 0.0, 1.0);
out_Height_Center_Alpha_UnitSize = vec4(r_window, y_center_window, globalAlpha, in_ViewportDim_ScreenScale_UnitLength.w);
out_Viewport = in_ViewportDim_ScreenScale_UnitLength;
out_FittedBounds = in_FittedBounds;
out_FragmentColor = in_FragmentColor;
#version 100
varying mediump vec4 out_Height_Center_Alpha_UnitSize;
varying mediump vec4 out_Viewport;
varying mediump vec4 out_FittedBounds;
varying mediump vec3 out_FragmentColor;
void main(void)
   mediump float unitSize = out_Height_Center_Alpha_UnitSize.w;
   mediump float halfUnitSize = unitSize * 0.5;
   mediump float halfLineSize = 0.25 + out_Viewport.z;
   mediump float halfLineSize_sq = halfLineSize*halfLineSize;
   mediump vec2 p = floor(vec2(mod(gl_FragCoord.x - (out_FittedBounds.x * out_Viewport.z) + halfUnitSize, unitSize) - halfUnitSize, abs(gl_FragCoord.y - out_Height_Center_Alpha_UnitSize.y) - max(0.0, out_Height_Center_Alpha_UnitSize.x - halfLineSize * 2.0)));
   mediump float end = step(p.y, 0.0);
   mediump float d = (1.0 - smoothstep(0.25, halfLineSize_sq, dot(p, p))) * (1.0 - end);
   mediump float x = (1.0 - smoothstep(halfLineSize_sq - 1.0, halfLineSize_sq, p.x*p.x)) * end;
   gl_FragColor = vec4(out_FragmentColor.x, out_FragmentColor.y, out_FragmentColor.z, (x+d)*out_Height_Center_Alpha_UnitSize.z);
#version 100
#extension GL_EXT_separate_shader_objects : enable
layout(location = 0) attribute vec4 in_Polar;
layout(location = 1) attribute vec4 in_ViewportDim_ScreenScale_UnitLength;
layout(location = 2) attribute vec4 in_FittedBounds;
layout(location = 3) attribute vec4 in_Time_ZTime_Height_Alpha;
layout(location = 4) attribute vec4 in_States;
varying mediump vec3 out_ChannelCoord;
varying mediump vec3 out_Alpha3f;
varying mediump float out_Alpha1f;
varying mediump float out_CenterY;
vec3 mod289(vec3 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 mod289(vec4 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
vec4 permute(vec4 x) {
return mod289(((x*34.0)+1.0)*x);
vec4 taylorInvSqrt(vec4 r)
return 1.79284291400159 - 0.85373472095314 * r;
float snoise(vec3 v)
const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
vec3 i  = floor(v + dot(v, C.yyy) );
vec3 x0 =   v - i + dot(i, C.xxx) ;
vec3 g = step(x0.yzx, x0.xyz);
vec3 l = 1.0 - g;
vec3 i1 = min( g.xyz, l.zxy );
vec3 i2 = max( g.xyz, l.zxy );
vec3 x1 = x0 - i1 + C.xxx;
vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
i = mod289(i);
vec4 p = permute( permute( permute(
i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
float n_ = 0.142857142857; // 1.0/7.0
vec3  ns = n_ * D.wyz - D.xzx;
vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
vec4 x_ = floor(j * ns.z);
vec4 y_ = floor(j - 7.0 * x_ );
vec4 x = x_ *ns.x + ns.yyyy;
vec4 y = y_ *ns.x + ns.yyyy;
vec4 h = 1.0 - abs(x) - abs(y);
vec4 b0 = vec4( x.xy, y.xy );
vec4 b1 = vec4( x.zw, y.zw );
vec4 s0 = floor(b0)*2.0 + 1.0;
vec4 s1 = floor(b1)*2.0 + 1.0;
vec4 sh = -step(h, vec4(0.0));
vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
vec3 p0 = vec3(a0.xy,h.x);
vec3 p1 = vec3(a0.zw,h.y);
vec3 p2 = vec3(a1.xy,h.z);
vec3 p3 = vec3(a1.zw,h.w);
vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
p0 *= norm.x;
p1 *= norm.y;
p2 *= norm.z;
p3 *= norm.w;
vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
m = m * m;
return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
dot(p2,x2), dot(p3,x3) ) );
const float kThinkingHeightMax = 0.2;
const float kFastTimeMultiplier = 4.4;
const float pi = 3.1415926535;
float FastSin( float rad )
   float x = mod(rad, 2.0 * pi) - pi;
   return (-4.0/(pi*pi)) * x * (pi - abs(x));
float FastCos( float rad )
   return FastSin(rad + pi * 0.5);
void main(void)
float time =   in_Time_ZTime_Height_Alpha.x;
float zTime =  in_Time_ZTime_Height_Alpha.y;
float height = in_Time_ZTime_Height_Alpha.z;
float globalAlpha = in_Time_ZTime_Height_Alpha.w;
float r_orig = in_Polar.x;
float q_orig = in_Polar.y;
float q_noise = in_Polar.w;
vec2 scale = in_FittedBounds.zw / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z);
vec2 center = (in_FittedBounds.xy + (in_FittedBounds.zw * 0.5)) / (in_ViewportDim_ScreenScale_UnitLength.xy / in_ViewportDim_ScreenScale_UnitLength.z) * 2.0 - 1.0;
center.y = -center.y;
vec2 device_pixel = 2.0 / in_ViewportDim_ScreenScale_UnitLength.xy;
float abs_q_orig_ndc = abs(q_orig - pi)/pi * 2.0 - 1.0;
float abs_q_noise_ndc = abs(q_noise - pi)/pi * 2.0 - 1.0;
float sin_q = FastSin(q_orig);
float cos_q = FastCos(q_orig);
float state_0 = smoothstep(0.0, 1.0, in_States.x);
float state_1 = smoothstep(0.0, 1.0, in_States.y);
float state_2 = smoothstep(0.0, 1.0, in_States.z);
vec2 theta_geom = vec2(abs_q_orig_ndc, sign(sin_q));
vec2 theta_noise = vec2(abs_q_noise_ndc, sign(sin_q));
vec2 cartesian_orig = theta_geom * r_orig;
vec2 r_geom = vec2(r_orig * (1.0 - state_0), 0.0) * scale;
float wave_falloff = (smoothstep(-1.0, -0.5, cartesian_orig.x) - smoothstep(0.5, 1.0, cartesian_orig.x)) * (1.0 - in_States.x * in_States.x * in_States.x);
float map_x = abs(theta_geom.x * r_geom.x);
float waitingMap = clamp(FastSin((map_x + in_States.x * 1.5 - 1.0) * pi), 0.0, 1.0);
waitingMap *= 1.0 - 0.6 * state_0 * state_0;
float listeningMap = smoothstep(-0.75, 0.0, cartesian_orig.x) - smoothstep(0.0, 0.75, cartesian_orig.x);
listeningMap *= height;
listeningMap *= (state_1 + state_0);
float pingPong = FastSin(time * kFastTimeMultiplier) * 0.9;
float leftScale = max(0.0, FastSin(time * kFastTimeMultiplier + 0.4 * pi));
leftScale = (leftScale * leftScale * 0.9 + 0.1) * 0.9;
float rightScale = max(0.0, FastSin(time * kFastTimeMultiplier - 0.6 * pi));
rightScale = (rightScale * rightScale * 0.9 + 0.1) * 0.9;
float thinkingMap = smoothstep(pingPong - leftScale, pingPong, abs_q_orig_ndc) * smoothstep(pingPong + rightScale, pingPong, abs_q_orig_ndc) * kThinkingHeightMax;
thinkingMap *= state_2;
float mirroredSineMap = clamp(FastSin((map_x + (1.0 - in_States.z) * 2.0 - 1.0) * pi), 0.0, 1.0);
mirroredSineMap *= 0.5;
thinkingMap += mirroredSineMap;
float mapSum = waitingMap + listeningMap + thinkingMap;
vec2 cartesian_noise = theta_noise * r_geom;
float noiseFrequency = ((0.00267 + height * 0.004) * (state_0 + state_1) + 0.001333 * state_2) * min(500.0 , max(in_FittedBounds.z, 200.0));
float noise0 = snoise(vec3(cartesian_noise * noiseFrequency, zTime));
float noise1 = snoise(vec3(cartesian_noise * noiseFrequency, zTime + 1.0));
float noise2 = snoise(vec3(cartesian_noise * noiseFrequency, zTime + 2.0));
float abs_noise0 = abs(noise0);
float abs_noise1 = abs(noise1);
float abs_noise2 = abs(noise2);
float abs_noise = max(max(abs_noise0, abs_noise1), abs_noise2);
r_geom.y = max(mapSum * abs_noise * scale.y, device_pixel.y * 2.0 * state_1);
vec2 cartesian_geom = theta_geom * r_geom + center;
vec3 wave_alpha = (1.0 - mapSum * vec3(abs_noise0, abs_noise1, abs_noise2) * 0.95);
wave_alpha *= wave_alpha;
gl_Position = vec4(cartesian_geom, 0.0, 1.0);
out_ChannelCoord = max(mapSum * vec3(abs_noise0, abs_noise1, abs_noise2) * (in_FittedBounds.w * 0.5) * in_ViewportDim_ScreenScale_UnitLength.z, 2.0 * state_1);
out_Alpha3f = wave_alpha * globalAlpha;
out_Alpha1f = wave_falloff * globalAlpha;
out_CenterY = (in_ViewportDim_ScreenScale_UnitLength.y - (in_FittedBounds.y + (in_FittedBounds.w * 0.5)) * in_ViewportDim_ScreenScale_UnitLength.z);
#version 100
varying mediump vec3 out_ChannelCoord;
varying mediump vec3 out_Alpha3f;
varying mediump float out_Alpha1f;
varying mediump float out_CenterY;
void main(void)
   mediump float p = abs(gl_FragCoord.y - out_CenterY);
   mediump vec3 wave_channel = smoothstep(out_ChannelCoord, out_ChannelCoord - 2.0, vec3(p));
   mediump vec4 colorModifier = vec4(0.3,0.3,0.3,0.0);
   mediump vec4 xColor = (vec4(1.0, 0.286, 0.333, out_Alpha1f) + colorModifier * (1.0 - out_Alpha3f.x)) * wave_channel.x;
   mediump vec4 yColor = (vec4(0.298, 0.85, 0.39, out_Alpha1f) + colorModifier * (1.0 - out_Alpha3f.y)) * wave_channel.y;
   mediump vec4 zColor = (vec4(0.0, 0.478, 1.0, out_Alpha1f) + colorModifier * (1.0 - out_Alpha3f.z)) * wave_channel.z;
   mediump vec4 screen = 1.0 - (1.0 - xColor) * (1.0 - yColor) * (1.0 - zColor);
   gl_FragColor = screen;
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
data
T@"NSArray",&,N,V_data
cachedStringValue
T@"NSString",&,N,V_cachedStringValue
v16@?0@"<UIViewControllerTransitionCoordinatorContext>"8
blurStyle
TQ,N,V_blurStyle
T@"<SUICFlamesViewDelegate>",W,N,V_flamesDelegate
-[SUICProgressIndicatorViewController progressStateMachine:didTransitionToState:fromState:forEvent:]
v12@?0B8
-[SUICProgressIndicatorViewController progressStateMachine:ignoredEvent:]
progressIndicatorView
T@"SUICProgressIndicatorView",&,N,G_progressIndicatorView,S_setProgressIndicatorView:,V_progressIndicatorView
dataSource
T@"<SUICProgressIndicatorViewControllerDataSource>",W,N,V_dataSource
BYSetupAssistantHasCompletedInitialRun
en-GB
en-AU
%@-%@
delegate
T@"<SUICSiriLanguageDelegate>",R,W,N,G_delegate,V_delegate
spokenLanguageCode
T@"NSString",C,N,S_setSpokenLanguageCode:,V_spokenLanguageCode
setupAssistantHasCompletedInitialRunChecked
TB,N,V_setupAssistantHasCompletedInitialRunChecked
setupAssistantHasCompletedInitialRunAvailable
TB,N,G_setupAssistantHasCompletedInitialRunAvailable,V_setupAssistantHasCompletedInitialRunAvailable
/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant
SiriBulletinBoardNotificationName
SiriBulletinBoardNotificationAppIDKey
SiriBulletinBoardNotificationUserActivityKey
None
Arbitrary
Percentage
Done
Unknown
Start
Report
Finish
Fail
Reset
Abstract
q16@?0@"CUStateEvent"8
v32@?0@"<SUICProgressStateMachineObserving>"8Q16^B24
stateMachineObservers
T@"NSPointerArray",&,N,G_stateMachineObservers,S_setStateMachineObservers:,V_stateMachineObservers
usesExponentialCurve
TB,R,N,V_usesExponentialCurve
usesAttackAndDecaySpeed
TB,R,N,V_usesAttackAndDecaySpeed
minimumPower
Tf,N,V_minimumPower
maximumPower
Tf,N,V_maximumPower
attackSpeed
Tf,N,V_attackSpeed
decaySpeed
Tf,N,V_decaySpeed
baseValue
Tf,N,V_baseValue
exponentMultiplier
Tf,N,V_exponentMultiplier
transform.rotation.z
spinning
TB,N,V_spinning
Td,N,V_progress
SUICAutoDismissalReasonNavigation
SUICAutoDismissalReasonVoiceActivationIntoSiriNotAvailable
SUICAutoDismissalReasonHandsOffActivation
SUICAutoDismissalReasonExtendedTimeoutExceeded
autoDismissalReason
Tq,N,V_autoDismissalReason
idleTimeout
Td,R,N,V_idleTimeout
extendedIdleTimeout
Td,R,N,V_extendedIdleTimeout
deviceSupportsFaceDetection
TB,R,N,V_deviceSupportsFaceDetection
deviceSupportsRaiseGestureDetection
TB,R,N,V_deviceSupportsRaiseGestureDetection
viewRequiringExtendedTimeoutStartTime
Td,R,N,V_viewRequiringExtendedTimeoutStartTime
T@"<SUICAutoDismissalStrategyDelegate>",W,N,V_delegate
userInteractedWithTouchScreen
TB,N,V_userInteractedWithTouchScreen
userInteractedWithTouchIDSensor
TB,N,V_userInteractedWithTouchIDSensor
latestFaceAwarenessEvent
Tq,N,V_latestFaceAwarenessEvent
latestDeviceMotionEvent
Tq,N,V_latestDeviceMotionEvent
videoPlaying
TB,N,GisVideoPlaying,V_videoPlaying
viewRequiringExtendedTimeoutVisible
TB,N,GisViewRequiringExtendedTimeoutVisible,V_viewRequiringExtendedTimeoutVisible
idleTimeInterval
Td,R,N,V_idleTimeInterval
shouldDismiss
TB,R,N,V_shouldDismiss
ActionArrow
arrowVisible
TB,N,GisArrowVisible
progressValue
TB,N,GisSpinning
checkmarkVisible
TB,N,GisCheckmarkVisible
darkened
TB,N,GisDarkened
B8@?0
Waveform
Tick Mark
TickMask400x400
XMask400x400
DeviceIntroN61
DeviceDoneN61Cable
DeviceDoneN61NoCable
[blank]
[space]
(%lu, %lu):%@
editRange
T{_NSRange=QQ},N,V_editRange
replacementText
T@"NSString",&,N,V_replacementText
ringColor
T@"UIColor",C,N
NO-OP
SUBSTITUTE
INSERT
DELETE
editOpertaion:%@, editIndex:%lu newText:%@ indexInArrayB:%@
editOperation
Tq,N,V_editOperation
indexToEdit
TQ,N,V_indexToEdit
indexInArrayB
TQ,N,V_indexInArrayB
%@%@
stringA
T@"NSString",R,W,N
stringB
%@.%ld.%.2f.%ld.%d.%d
metal_indices
T^I,N,V_metal_indices
previous
T@"_SUICStreamingWord",&,N,V_previous
insertType
Tq,N,V_insertType
textRange
T{_NSRange=QQ},N,V_textRange
glyphLocationInWordX
Td,N,V_glyphLocationInWordX
wordLayer
T@"CALayer",&,N,V_wordLayer
beginImage
T@"UIImage",&,N,V_beginImage
endImage
T@"UIImage",&,N,V_endImage
v24@?0Q8q16
v16@?0Q8
v24@?0Q8^B16
v32@?0@"NSString"8Q16^B24
font
T@"UIFont",&,N,V_font
hyphenationFactor
Td,N,V_hyphenationFactor
startTextColor
T@"UIColor",&,N,V_startTextColor
endTextColor
T@"UIColor",&,N,V_endTextColor
animationDuration
Td,N,V_animationDuration
animated
TB,N,V_animated
textColor
T@"UIColor",&,N,V_textColor
words
T@"NSArray",C,N
text
T@"NSString",R,N
stateTime: %f  zTime: %f  transitionPhase: %f  stateModifiers: %f, %f, %f, %f  globalAlpha: %f  isAura: %@  isDyingOff: %@
stateTime
Tf,N,V_stateTime
zTime
Tf,N,V_zTime
globalAlpha
Tf,N,V_globalAlpha
transitionPhase
Tf,N,V_transitionPhase
transitionPhasePtr
T^f,N,V_transitionPhasePtr
stateModifiers
T,N,V_stateModifiers
stateModifiersPtr
T^,N,V_stateModifiersPtr
isAura
TB,N,V_isAura
isDyingOff
TB,N,V_isDyingOff
SiriFlamesLoop~watch-Compact
DictationFlamesLoop~watch-Compact
SiriFlamesLoop~watch-Regular
DictationFlamesLoop~watch-Regular
FauxFlames
bytes
T^v,R,N,V_bytes
length
TQ,R,N,V_length
-[SUICFauxFlamesView start:]
-[SUICFauxFlamesView stop:]
-[SUICFauxFlamesView _cleanupView]
+[SUICFauxFlamesView _frameImagesForSequence:]
artwork
-[SUICFlamesViewMetal initWithFrame:screen:fidelity:]
-[SUICFlamesViewMetal _initMetalAndSetupDisplayLink:]
-[SUICFlamesViewMetal _loadPipelineLibraries]
Flame Pipeline
siriFlameAccessibilityVertexShader
siriFlameVertexShader
siriFlameFragmentShader
Aura Pipeline
siriAuraFragmentShader
Dictation Pipeline
siriDictationVertexShader
siriDictationFragmentShader
Training Pipeline
siriTrainingVertexShader
siriTrainingFragmentShader
-[SUICFlamesViewMetal _didSkipFrameUpdateWithReason:]
No current flame group
not initialized
rendering disabled
no drawable available
SUICFlamesViewMetalBuffer
SUICFlamesViewMetalEncoder
v16@?0@"<MTLCommandBuffer>"8
AssistantVoiceDialects
plist
HONG_KONG_SHORT_COUNTRY_NAME
REGION_%@
MANDARIN_SPOKEN_DIALECT
LANGUAGE_WITH_REGION_AND_DIALECT
LANGUAGE_WITH_REGION
cachedAvailableVoices
T@"NSMutableDictionary",&,N,V_cachedAvailableVoices
%s %s updated language code to: %@
%s Vertex buffer data cached: %d
%s State machine %@ doesn't match data source state machine %@, not listening to event %@
%s State machine %@ transitioned to state %@ from state %@ for event %@
%s State machine %@ doesn't match data source state machine %@, not listening to event
%s State machine %@ ignored event %@
%s Starting faux flames view
%s Already animating flames, exiting
%s Faux flames alpha set to 1
%s Number of image frames: %lu, 
%s Added faux flames animation
%s Stopping faux flames view
%s Not animating flames, exiting
%s Cleaning up faux flames view
%s Images not in cache, reloading.
%s Created flames view: %@
%s Setup Metal Rendering
%s Metal is not supported on this device
%s Unable to setup pipeline library
%s Metal Rendering Setup Complete
%s Started Loading Pipeline Libraries
%s Failed to create flame pipeline state, error %@
%s Failed to create aura pipeline state, error %@
%s Failed to create dictation pipeline state, error %@
%s Failed to create training pipeline state, error %@
%s Finished Loading Pipeline Libraries
%s Frame Skip Reason: %@
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
_SUICCheckGlyphSpringAnimationFactory
SUICCAUtilities
_SUICCheckGlyphLayer
_SUICEditScript
SUICProgressEventViewController
SUICProgressIndicatorViewControllerDataSource
NSProgressReporting
NSObject
_SUICIntArray2D
SUICLocalization
SUICTickMarkView
SUICApplicationStateHelper
FBSDisplayLayoutObserver
SUICGLIndexCacheEntry
SUICFlamesViewLegacy
SUICFlamesViewProviding
_SUICEditScriptDataArray
_SUICEditScriptData
SUICFullScreenBlurPresentationController
SUICFlamesView
SUICFlamesViewProvidingDelegate
SUICProgressIndicatorViewController
SUICProgressStateMachineObserving
SUICSiriLanguage
SUICProgressStateMachine
SUICAudioLevelSmoother
SUICSemanticContentModifiable
SiriUICore
_SUICProgressRingLayer
SUICAutoDismissalStrategy
SUICProgressIndicatorView
SUICSigmoid
SUICHandsOnAutoDismissalStrategy
SUICArtworksManager
_SUICAtomRanged
_SUICRingLayer
_SUICAtomIndexed
_SUICEditScriptRanged
SUICIndexCacheEntry
SUICProgressDebugViewController
_SUICEditScriptIndexed
_SUICStreamingWord
SUICStreamingTextView
SUICFlameGroup
SUICFauxFlamesImageDataContainer
SUICFauxFlamesView
SUICFlamesViewMetal
"A7A!
SUICHandsOffAutoDismissalStrategy
SUICAssistantVoiceSettingsConnection
null
dictionaryWithObjects:forKeys:count:
_solveForInput:
initWithControlPoints::::
springAnimationWithKeyPath:velocity:
setVelocity:
springAnimationWithKeyPath:
initWithVelocity:
defaultTimingFunction
initWithVelocity:timing:
initWithMass:stiffness:damping:velocity:timing:
init
dealloc
_springAnimationWithKeyPath:
setAdditive:
animationWithKeyPath:
setMass:
setStiffness:
setDamping:
setTimingFunction:
setFillMode:
setBeginTimeMode:
duration
setDuration:
durationForEpsilon:
_updateDurationIfNecessary
defaultDuration
initWithMass:stiffness:damping:velocity:
_timingFunctionForAnimation
setTiming:
.cxx_destruct
mass
stiffness
damping
velocity
timing
_duration
_needsDurationUpdate
_mass
_stiffness
_damping
_velocity
_timing
length
stringWithFormat:
unsignedIntegerValue
animationKeys
countByEnumeratingWithState:objects:count:
hasPrefix:
_suic_additiveAnimationKeyPrefixForKeyPath:
numberWithUnsignedInteger:
_suic_nextAdditiveAnimationKeyWithKeyPath:
addAnimation:forKey:
_suic_addAdditiveAnimation:withKeyPath:
_suic_addAdditiveAnimation:
_suic_updateForAdditiveAnimationFromScalar:toScalar:withLayerScalar:
numberWithDouble:
setFromValue:
setToValue:
_suic_updateForAdditiveAnimationFromPoint:toPoint:withLayerPoint:
valueWithPoint:
_suic_updateForAdditiveAnimationFromSize:toSize:withLayerSize:
valueWithSize:
_suic_updateForAdditiveAnimationFromTransform:toTransform:withLayerTransform:
valueWithCATransform3D:
_suic_updateForAdditiveAnimationFromScalar:toScalar:
_suic_updateForAdditiveAnimationFromPoint:toPoint:
_suic_updateForAdditiveAnimationFromSize:toSize:
_suic_updateForAdditiveAnimationFromTransform:toTransform:
bundleForClass:
URLForResource:withExtension:
packageWithContentsOfURL:type:options:error:
rootLayer
isGeometryFlipped
setGeometryFlipped:
setLineCap:
bounds
setActions:
setTransform:
setFrame:
addSublayer:
_createMask
_updateCovered:completion:
layoutSublayers
_pointScaleToMatchBoundsSize:
setPosition:
whiteColor
CGColor
colorWithWhite:alpha:
arrayWithObjects:count:
setColors:
setAnchorPoint:
setMask:
setBounds:
setStartPoint:
setEndPoint:
setPrimaryColor:animated:completion:
isEqual:
copy
presentationLayer
strokeColor
fillColor
begin
setCompletionBlock:
removeAnimationForKey:
commit
setStrokeColor:
setFillColor:
setRevealed:animated:completion:
setCovered:animated:completion:
transform
initWithFrame:
setPrimaryColor:
revealed
setRevealed:
primaryColor
_checkPackageLayer
_maskLayer
_covered
_uncoveredTransform
_coveredTransform
_primaryColor
timingFunction
numberWithInteger:
operationPrecedenceArrayFromOperationPrecedence:
arrayWithCapacity:
setScript:
stringWithCapacity:
description
appendFormat:
appendString:
arrayWithISize:jSize:
setShouldBoundsCheck:
::newValue:
stringAtIndex:
isEqualToString:
initializeCurrentScriptAtom
iSize
jSize
::outOfBoundsReturnValue:
count
objectAtIndex:
integerValue
addToCurrentScriptAtomEditOperation:editIndex:newText:indexInArrayB:
finalizeCurrentScriptAtom
initWithOperationPrecedence:orderAtomsAscending:
computeDistanceMatrix
computeEditsFromMatrix
operationPrecedenceArray
setOperationPrecedenceArray:
script
_orderAtomsAscending
_distanceMatrix
_currentOperation
_itemAData
_itemBData
_operationPrecedenceArray
_script
initWithNibName:bundle:
addObserver:
setDataSource:
handleEvent:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
progress
stateMachineForProgressIndicatorViewController:
shouldAnimateTransitionToState:fromState:forProgressIndicatorViewController:
setProgress:
_stateMachine
_progress
initWithISize:jSize:
assertBoundsForIIndex:jIndex:
inBoundsForIIndex:jIndex:
shouldBoundsCheck
_arrayData
_iSize
_jSize
_shouldBoundsCheck
characterDirectionForLanguage:
dictionary
bundleIdentifier
objectForKey:
setObject:forKey:
localizations
arrayWithObject:
URLForResource:withExtension:subdirectory:localization:
dictionaryWithContentsOfURL:
suic_localizedStringForKey:value:table:
suic_localizedStringForKey:table:
suic_localizedStringForKey:
initialize
colorWithRed:green:blue:alpha:
setOpaque:
setUpDisplayLink
sigmoid_norm:
lock
unlock
setNeedsDisplay
layer
imageMask:
setContents:
setPreferredFramesPerSecond:
handleSafetyTimer:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
imageNamed:inBundle:compatibleWithTraitCollection:
CGImage
invalidate
displayLinkWithTarget:selector:
currentRunLoop
addToRunLoop:forMode:
setHidden:
tearDownDisplayLink
superview
drawRect:
startAnimationsForTickMark:fadeInFrames:pauseFrames:fadeOutFrames:completion:
didMoveToSuperview
layoutSubviews
_displayLink
_shown
_currentPreferredFrameRate
_currentFrame
_animState
_safetyTimer
_completionCalled
_completionBlock
_completionLock
_fadeInFrames
_pauseFrames
_fadeOutFrames
_handleApplicationStateUpdate:
setHandler:
sharedMonitorForDisplayType:
removeObserver:
_foregroundAppInfosFor:
displayType
_updateForAppInfoDictionaries:displayType:
_appInfoDictionariesForDisplayLayout:completion:
intValue
unsignedIntValue
boolValue
setIdentifier:
setPid:
removeObject:
addObject:
enumerateObjectsUsingBlock:
elements
layoutRole
level
displayConfiguration
isCarDisplay
applicationInfoForApplication:completion:
insertObject:atIndex:
layoutMonitor:didUpdateDisplayLayout:
layoutMonitor:didUpdateDisplayLayout:withContext:
foregroundAppInfos
foregroundAppInfosForCarPlay
_updateForAppInfoDictionaries:
_appStateMonitor
_foregroundAppInfos
_queue
numAuraIndices
setNumAuraIndices:
numAuraIndicesCulled
setNumAuraIndicesCulled:
numWaveIndices
setNumWaveIndices:
gl_indices
setGl_indices:
_numAuraIndices
_numAuraIndicesCulled
_numWaveIndices
_gl_indices
_currentDisplayScale
_numVerticesPerCircle
defaultCenter
_reduceMotionStatusChanged:
addObserver:selector:name:object:
_applicationWillResignActive:
_applicationWillEnterForeground:
_applicationDidBecomeActive:
initWithMinimumPower:maximumPower:historyLength:attackSpeed:decaySpeed:
setMode:
_setValuesForFidelity:
initWithAPI:
_setCurrentContext
_restoreCurrentContext
mainScreen
initWithFrame:screen:fidelity:
_tearDownDisplayLink
_cleanupGL
_setupDisplayLink
clearColor
setBackgroundColor:
setUserInteractionEnabled:
setTransitionPhase:
setStateTime:
setIsAura:
setIsDyingOff:
_setPreferredFramesPerSecond
_updateDisplayLinkPausedState
isAura
_supportsAdaptiveFramerate
maximumFramesPerSecond
preferredFramesPerSecond
setPaused:
_initGLAndSetupDisplayLink:
getRed:green:blue:alpha:
frame
initWithImage:
addSubview:
removeFromSuperview
setParameter:to:
prewarmShadersForScreen:size:fidelity:
prewarmShadersForScreen:size:fidelity:prewarmInBackground:
prewarmShadersForScreen:initialFrame:activeFrame:fidelity:prewarmInBackground:
setRenderInBackground:
setActiveFrame:
_prewarmShaders
setAffineTransform:
removeObjectsInArray:
_updateCurveLayer:
isRenderingEnabled
setNeedsLayout
currentContext
setCurrentContext:
resetAndReinitialize:
setRenderingEnabled:forReason:
isHidden
mainRunLoop
renderbufferStorage:fromDrawable:
_predeterminedVertexPositionForAuraWithPolarVertex:
_indexCache
_generateIndicesForNumCircleShapes:withMaxSubdivisionLevel:startingWithNumSubdivisionLevel:forIndices:atStartIndex:withFill:withCullingForAura:forVertices:
setContentsScale:
_setupFramebuffer
_setupVertexBuffer
_setupShaders
_resizeFromLayer:
_updateOrthoProjection
traitCollection
displayScale
scale
_deviceNeeds2xFlamesWithCurrentScale:
mode
isDrawableAvailable
transitionPhasePtr
stateModifiersPtr
setDecaySpeed:
_currentMicPowerLevel
stateTime
zTime
setZTime:
isDyingOff
globalAlpha
setGlobalAlpha:
flamesDelegate
flamesViewAuraDidDisplay:
presentRenderbuffer:
_didFinishTransition
setCountLimit:
audioLevelForFlamesView:
smoothedLevelForMicPower:
traitCollectionDidChange:
layerClass
prewarmShadersForScreen:size:
prewarmShadersForScreen:activeFrame:fidelity:
setIndexCacheSize:
prewarmShadersForCurrentMode
fadeOutCurrentAura
setFlamesDelegate:
state
setState:
showAura
setShowAura:
freezesAura
setFreezesAura:
reduceFrameRate
setReduceFrameRate:
reduceThinkingFramerate
setReduceThinkingFramerate:
activeFrame
overlayImage
setOverlayImage:
dictationColor
setDictationColor:
renderInBackground
paused
horizontalScaleFactor
setHorizontalScaleFactor:
accelerateTransitions
setAccelerateTransitions:
initWithFrame:screenScale:fidelity:
_preferredFramesPerSecond
inSiriMode
inDictationMode
stopRenderingAndCleanupGL
_isOriginatingProcessInBackground
_eaglContext
_previousContext
_currentContextCount
_renderingDisabledReasons
_framebufferHandle
_renderbufferHandle
_flameProgramHandle
_auraProgramHandle
_vShadID
_fShadID
_vertexArrayObjectHandle
_vertexBufferHandle
_elementArrayHandle
_numVertices
_maxVertexCircles
_auraVertexCircles
_maxSubdivisionLevel
_auraMinSubdivisionLevel
_auraMaxSubdivisionLevel
_flameGroups
_currentFlameGroup
_viewWidth
_viewHeight
_dictationUnitSize
_screen
_overlayImageView
_startTime
_dictationRedColor
_dictationGreenColor
_dictationBlueColor
_levelSmoother
_fidelity
_frameRateScalingFactor
_transitionFinished
_isInitialized
_hasCustomActiveFrame
_shadersAreCompiled
_reduceMotionEnabled
_showAura
_freezesAura
_renderInBackground
_paused
_accelerateTransitions
_reduceFrameRate
_reduceThinkingFramerate
_mode
_state
_horizontalScaleFactor
_overlayImage
_flamesDelegate
_dictationColor
_activeFrame
setCachedStringValue:
enumerateSubstringsInRange:options:usingBlock:
whitespaceCharacterSet
punctuationCharacterSet
formUnionWithCharacterSet:
substringWithRange:
initWithString:chunkSize:
initWithArray:
componentsJoinedByString:
lengthOfItem:
whitespaceAndNewlineCharacterSet
EditScriptDataWithString:chunkSize:
EditScriptDataWithArray:
stringValue
characterIndexForItem:
indexOfFirstDifferenceWithOtherData:shouldReverseIterate:fallsOnWordBoundary:
data
setData:
cachedStringValue
_data
_cachedStringValue
characterAtIndex:
longCharacterIsMember:
characterIsMember:
initWithPresentedViewController:presentingViewController:blurStyle:
setAlpha:
_stageViewsForFadeIn
presentingViewController
transitionCoordinator
presentedViewController
becomeFirstResponder
animateAlongsideTransition:completion:
view
resignFirstResponder
initWithPresentedViewController:presentingViewController:
containerView
presentationTransitionWillBegin
presentationTransitionDidEnd:
dismissalTransitionWillBegin
dismissalTransitionDidEnd:
setBlurStyle:
blurStyle
_fullScreenBlurView
_blurStyle
_isMetalAvailable
resetAndReinitializeMetal:
setDelegate:
_flamesView
dataSource
setView:
_shouldAcceptEventsFromStateMachine:
setProgressValue:animated:completion:
setSpinning:
setArrowVisible:delay:animated:completion:
setDarkened:animated:completion:
setCheckmarkVisible:animated:completion:
completedUnitCount
totalUnitCount
progressStateMachine:didTransitionToState:fromState:forEvent:
progressStateMachine:ignoredEvent:
loadView
_canShowWhileLocked
_progressIndicatorView
_setProgressIndicatorView:
_dataSource
_computeSpokenLanguageCode
_spokenLanguageDidChange:
_currentLocaleDidChange:
initWithDelegate:
_updateSpokenLanguageCode
_setSpokenLanguageCode:
_delegate
siriLanguageSpokenLanguageCodeDidChange:
sharedPreferences
languageCode
_setupAssistantHasCompletedInitialRunAvailable
preferredLanguages
currentLocale
substringToIndex:
containsObject:
spokenLanguageCode
setupAssistantHasCompletedInitialRunChecked
setSetupAssistantHasCompletedInitialRunChecked:
setSetupAssistantHasCompletedInitialRunAvailable:
_setupAssistantHasCompletedInitialRunChecked
_spokenLanguageCode
initWithName:parent:
setEventHandler:
name
_transitionToState:forEvent:
_ignoreEvent:
setStates:
setInitialState:
start
initWithName:userInfo:
dispatchEvent:
addObservers:
_stateMachineObservers
addPointer:
weakObjectsPointerArray
compact
allObjects
transitionToState:
setObservers:
_setStateMachineObservers:
_underlyingStateMachine
_stateForStateName
_currentState
_abstractState
_initWithHistoryLength:
initWithMinimumPower:maximumPower:historyLength:
_updateMedianWithNewValue:
initWithBaseValue:exponentMultiplier:historyLength:
clearHistory
usesExponentialCurve
usesAttackAndDecaySpeed
minimumPower
setMinimumPower:
maximumPower
setMaximumPower:
attackSpeed
setAttackSpeed:
decaySpeed
baseValue
setBaseValue:
exponentMultiplier
setExponentMultiplier:
_minimumPower
_maximumPower
_historyLength
_samplesSinceLastCleared
_runningPowerLevels
_powerPointer
_previousLevel
_attackVelocity
_decayVelocity
_usesExponentialCurve
_usesAttackAndDecaySpeed
_attackSpeed
_decaySpeed
_baseValue
_exponentMultiplier
disallowSemanticContentModification
suic_recursiveSetSemanticContentAttribute:
subviews
semanticContentAttribute
setSemanticContentAttribute:
setTextAlignment:
textAlignment
userInterfaceLayoutDirectionForSemanticContentAttribute:
suic_updateViewHierarchyToUseSiriLanguageSemanticContentAttribute
setStrokeEnd:
setCumulative:
setRepeatCount:
keyPath
setProgress:animated:completion:
animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:
spinning
_spinning
_notifyDelegateOfAutoDismissalDecisionChangeIfNeededPermanent:
_notifyDelegateOfAutoDismissalDecisionChangeIfNeeded
timeIntervalSinceReferenceDate
shouldDismiss
numberWithBool:
autoDismissalReason
autoDismissalStrategyDidChangeAutoDismissalDecision:dismissalReason:permanent:
initWithIdleTimeout:extendedIdleTimeout:deviceSupportsFaceDetection:deviceSupportsRaiseGestureDetection:
setUserInteractedWithTouchScreen:
setUserInteractedWithTouchIDSensor:
setLatestFaceAwarenessEvent:
setLatestDeviceMotionEvent:
setVideoPlaying:
setViewRequiringExtendedTimeoutVisible:
setViewRequiringExtendedTimeoutStartTime:
delegate
userInteractedWithTouchScreen
userInteractedWithTouchIDSensor
latestFaceAwarenessEvent
latestDeviceMotionEvent
isVideoPlaying
isViewRequiringExtendedTimeoutVisible
idleTimeInterval
setAutoDismissalReason:
idleTimeout
extendedIdleTimeout
deviceSupportsFaceDetection
deviceSupportsRaiseGestureDetection
viewRequiringExtendedTimeoutStartTime
_lastShouldDismissValue
_userInteractedWithTouchScreen
_userInteractedWithTouchIDSensor
_videoPlaying
_viewRequiringExtendedTimeoutVisible
_shouldDismiss
_deviceSupportsFaceDetection
_deviceSupportsRaiseGestureDetection
_latestFaceAwarenessEvent
_latestDeviceMotionEvent
_idleTimeInterval
_autoDismissalReason
_idleTimeout
_extendedIdleTimeout
_viewRequiringExtendedTimeoutStartTime
userInterfaceStyle
darkGrayColor
lightGrayColor
setRingColor:
blackColor
setContentMode:
setArrowVisible:
setProgressValue:
setCheckmarkVisible:
setDarkened:
layoutSublayersOfLayer:
alpha
isArrowVisible
isCheckmarkVisible
isDarkened
setShadowColor:
progressValue
isSpinning
_shadowRingLayer
_progressRingLayer
_checkGlyphLayer
_actionArrowImageView
sigmoid:
_mapsNavigationStatusIsActiveBlock
_setMapsNavigationStatusIsActiveBlock:
FontWeightTitle
FontWeightMain
FontWeightFooter
FontWeightProgress
FontWeightButton
FontWeightButtonSmall
setEditRange:
setReplacementText:
isEqualToEditScriptAtomRanged:
editRange
replacementText
initWithEditRange:replacementText:
atomWithEditRange:replacementText:
_replacementText
_editRange
colorWithCGColor:
setLineWidth:
bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:
CGPath
setPath:
ringColor
setEditOperation:
setIndexToEdit:
setIndexInArrayB:
initWithEditOperation:indexToEdit:newText:indexInArrayB:
atomWithEditOperation:indexToEdit:newText:indexInArrayB:
editOperation
indexToEdit
indexInArrayB
_editOperation
_indexToEdit
_indexInArrayB
editScriptFromString:toString:chunkSize:orderAtomsAscending:operationPrecedence:options:
initWithOperationPrecedence:dataClass:chunkSize:stringA:stringB:orderAtomsAscending:options:
mutableCopy
replaceCharactersInRange:withString:
removeAnyOverlapBetweenIndexOfFirstDifference:andReverseIndexOfLastDifference:shouldShortenFirstDifference:
editScriptForSmallestSingleEditFromString:toString:chunkSize:
computeSmallestSingleEdit
editScriptFromString:toString:
editScriptForSmallestSingleEditFromString:toString:
stringA
stringB
applyToString:
_options
_currentScriptAtom
metal_indices
setMetal_indices:
_metal_indices
_eventGeneratorButtonTouchedUpInside:
addTarget:action:forControlEvents:
viewDidLoad
addChildViewController:
didMoveToParentViewController:
viewDidLayoutSubviews
progressWithTotalUnitCount:
setCompletedUnitCount:
_indicatorViewController
_eventGeneratorButton
_testEventLoopCounter
editScriptFromArray:toArray:orderAtomsAscending:operationPrecedence:
initWithOperationPrecedence:dataClass:fromArray:toArray:orderAtomsAscending:
setObject:atIndexedSubscript:
removeObjectAtIndex:
editScriptFromArray:toArray:
applyToArray:
setWordLayer:
previous
setPrevious:
insertType
setInsertType:
textRange
setTextRange:
glyphLocationInWordX
setGlyphLocationInWordX:
wordLayer
beginImage
setBeginImage:
endImage
setEndImage:
_previous
_insertType
_glyphLocationInWordX
_wordLayer
_beginImage
_endImage
_textRange
_sharedInit
initWithCoder:
setTextStorage:
addLayoutManager:
initWithSize:
setLineFragmentPadding:
addTextContainer:
preferredFontForTextStyle:
setHyphenationFactor:
_updateAnimatedInternal
_updateText:
layoutIfNeeded
_resetState
string
setEndTextColor:
removeFromSuperlayer
ensureLayoutForTextContainer:
usedRectForTextContainer:
setSize:
_layoutFrames
objectAtIndexedSubscript:
replaceObjectAtIndex:withObject:
addIndex:
enumerateIndexesUsingBlock:
setAlignment:
font
deleteCharactersInRange:
initWithString:attributes:
appendAttributedString:
glyphRangeForCharacterRange:actualCharacterRange:
boundingRectForGlyphRange:inTextContainer:
locationForGlyphAtIndex:
_glyphImageForWord:frame:glyphRange:textColor:
superlayer
_animateLayers
_animateWordIn:
_animateWordOut:
setOpacity:
removeAllObjects
addAttribute:value:range:
_createGlyphImage:glyphRange:layoutManager:
drawGlyphsForGlyphRange:atPoint:
setWords:
words
text
setTextColor:
setAnimated:
setAnimationDuration:
sizeThatFits:
setFont:
hyphenationFactor
startTextColor
setStartTextColor:
endTextColor
animationDuration
animated
textColor
_layoutManager
_textStorage
_textContainer
_words
_wordsToShow
_wordsToDelete
_animatedInternal
_animated
_font
_hyphenationFactor
_startTextColor
_endTextColor
_animationDuration
_textColor
transitionPhase
setTransitionPhasePtr:
stateModifiers
setStateModifiers:
setStateModifiersPtr:
_isAura
_isDyingOff
_stateTime
_zTime
_globalAlpha
_transitionPhase
_transitionPhasePtr
_stateModifiersPtr
_stateModifiers
fileSystemRepresentation
initWithPath:length:
bytes
_bytes
_length
initWithStyle:screenSize:
_cleanupView
stop:
_frameImagesForSequence:
isAnimating
setValues:
setBeginTime:
setCalculationMode:
setSpeed:
addKeyframeWithRelativeStartTime:relativeDuration:animations:
animateKeyframesWithDuration:delay:options:animations:completion:
animateWithDuration:animations:completion:
animationForKey:
removeAllAnimations
stringWithUTF8String:
pathForResource:ofType:
defaultManager
fileExistsAtPath:
attributesOfItemAtPath:error:
array
initWithStyle:
prewarm
start:
_style
_width
_sequenceAttributes
isPaused
_initMetalAndSetupDisplayLink:
initWithLength:
mutableBytes
initWithBytesNoCopy:length:freeWhenDone:
device
newBufferWithBytes:length:options:
contentsScale
setDrawableSize:
setDevice:
newCommandQueue
_loadPipelineLibraries
newDefaultLibraryWithBundle:error:
newDefaultLibrary
colorPixelFormat
colorAttachments
setPixelFormat:
setBlendingEnabled:
setRgbBlendOperation:
setSourceRGBBlendFactor:
setDestinationRGBBlendFactor:
setLabel:
newFunctionWithName:
setVertexFunction:
setFragmentFunction:
newRenderPipelineStateWithDescriptor:error:
_metalLayer
_didSkipFrameUpdateWithReason:
setClearColor:
currentRenderPassDescriptor
commandBuffer
renderCommandEncoderWithDescriptor:
drawableSize
setViewport:
setVertexBuffer:offset:atIndex:
setVertexBytes:length:atIndex:
setRenderPipelineState:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
endEncoding
currentDrawable
presentDrawable:
isMainThread
addCompletedHandler:
_numIndices
_pipelineState
_commandQueue
_vertexBuffer
_indexBuffer
_viewportSize
getAvailableVoicesForLanguage:
isCustom
gender
dictionaryWithContentsOfFile:
objectForKeyedSubscript:
setWithArray:
setWithObjects:
languageHasBothGender:
getAvailableDialectsForLanguage:
deviceLanguage
localeWithLocaleIdentifier:
componentsFromLocaleIdentifier:
displayNameForKey:value:
localizedStringForKey:value:table:
_regionForLanguageIdentifier:
setOutputVoice:withCompletion:
setOutputVoice:
titlesForLanguageIdentifiers:
dictionaryWithCapacity:
shortTitlesForLanguageIdentifiers:deviceLanguageLocale:
capitalizeFirstPartOfCountry:
countForObject:
setValue:forKey:
characterSetWithCharactersInString:
componentsSeparatedByCharactersInSet:
capitalizedString
initWithString:
outputLanguageIdentifiers
assistantLanguageTitlesDictionary
languageHasCustomVoice:
nonCacheAvailableVoicesForLanguage:
languageHasVoiceSelection:
dialectForLanguageIdentifier:
setOutputVoiceLanguage:gender:
cachedAvailableVoices
setCachedAvailableVoices:
_cachedAvailableVoices
@16@0:8
d16@0:8
@24@0:8@16
@32@0:8@16d24
@24@0:8d16
@32@0:8d16@24
@48@0:8d16d24d32d40
@56@0:8d16d24d32d40@48
v16@0:8
v24@0:8d16
v24@0:8@16
@"CAMediaTimingFunction"
@32@0:8@16@24
v32@0:8d16d24
v40@0:8d16d24d32
v48@0:8{CGPoint=dd}16{CGPoint=dd}32
v64@0:8{CGPoint=dd}16{CGPoint=dd}32{CGPoint=dd}48
v48@0:8{CGSize=dd}16{CGSize=dd}32
v64@0:8{CGSize=dd}16{CGSize=dd}32{CGSize=dd}48
v272@0:8{CATransform3D=dddddddddddddddd}16{CATransform3D=dddddddddddddddd}144
v400@0:8{CATransform3D=dddddddddddddddd}16{CATransform3D=dddddddddddddddd}144{CATransform3D=dddddddddddddddd}272
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
d32@0:8{CGSize=dd}16
v36@0:8@16B24@?28
B16@0:8
v20@0:8B16
v32@0:8B16B20@?24
d32@0:8B16B20@?24
d28@0:8B16@?20
@"CAShapeLayer"
@"CAGradientLayer"
{CATransform3D="m11"d"m12"d"m13"d"m14"d"m21"d"m22"d"m23"d"m24"d"m31"d"m32"d"m33"d"m34"d"m41"d"m42"d"m43"d"m44"d}
@"UIColor"
@24@0:8q16
@28@0:8q16B24
v48@0:8q16Q24@32Q40
@"_SUICIntArray2D"
@"<_SUICEditScriptData>"
@"NSArray"
@"NSMutableArray"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSProgress"16@0:8
B40@0:8Q16Q24@32
@"SUICProgressStateMachine"24@0:8@"SUICProgressIndicatorViewController"16
B40@0:8Q16Q24@"SUICProgressIndicatorViewController"32
v24@0:8Q16
@"SUICProgressStateMachine"
@"NSProgress"
@32@0:8Q16Q24
B32@0:8Q16Q24
v32@0:8Q16Q24
q32@0:8Q16Q24
q40@0:8Q16Q24q32
v40@0:8Q16Q24q32
@40@0:8@16@24@32
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v52@0:8B16q20q28q36@?44
^{CGImage=}20@0:8B16
@"CADisplayLink"
@"NSTimer"
@"NSLock"
v32@0:8@16@24
v40@0:8@16@24@32
v32@0:8@"FBSDisplayLayoutMonitor"16@"FBSDisplayLayout"24
v40@0:8@"FBSDisplayLayoutMonitor"16@"FBSDisplayLayout"24@"FBSDisplayLayoutTransitionContext"32
v32@0:8@16@?24
@"BKSApplicationStateMonitor"
@"NSMutableDictionary"
@"NSObject<OS_dispatch_queue>"
I16@0:8
v20@0:8I16
^I16@0:8
v24@0:8^I16
v40@0:8@16{CGSize=dd}24
v48@0:8@16{CGSize=dd}24q40
v52@0:8@16{CGSize=dd}24q40B48
v64@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24q56
v100@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24{CGRect={CGPoint=dd}{CGSize=dd}}56q88B96
v28@0:8B16@20
q16@0:8
v24@0:8q16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v28@0:8B16@"NSString"20
@"<SUICFlamesViewProvidingDelegate>"16@0:8
v24@0:8@"<SUICFlamesViewProvidingDelegate>"16
@"UIImage"16@0:8
v24@0:8@"UIImage"16
@"UIColor"16@0:8
v24@0:8@"UIColor"16
@64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48q56
@64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16d48q56
24@0:816
i56@0:8i16f20f24^^I28i36B40B44^{?=}48
B20@0:8B16
B24@0:8d16
f16@0:8
@"EAGLContext"
@"NSMutableSet"
@"SUICFlameGroup"
@"UIScreen"
@"UIImageView"
@"SUICAudioLevelSmoother"
@"UIImage"
@"<SUICFlamesViewProvidingDelegate>"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@32@0:8@16q24
q24@0:8q16
q36@0:8@16B24^B28
@"NSString"24@0:8q16
q36@0:8@"<_SUICEditScriptData>"16B24^B28
@"<_SUICEditScriptData>"32@0:8@"NSString"16q24
@"<_SUICEditScriptData>"24@0:8@"NSArray"16
@"NSString"
@40@0:8@16@24Q32
@"UIView"
f24@0:8@16
f24@0:8@"<SUICFlamesViewProviding>"16
v24@0:8@"<SUICFlamesViewProviding>"16
@"UIView<SUICFlamesViewProviding>"
@"<SUICFlamesViewDelegate>"
v48@0:8@16Q24Q32Q40
v32@0:8@16Q24
v48@0:8@"SUICProgressStateMachine"16Q24Q32Q40
v32@0:8@"SUICProgressStateMachine"16Q24
@"SUICProgressIndicatorView"
@"<SUICProgressIndicatorViewControllerDataSource>"
@"<SUICSiriLanguageDelegate>"
@"CUStateMachine"
@"NSDictionary"
@"CUState"
@"NSPointerArray"
@32@0:8f16f20q24
@40@0:8f16f20q24f32f36
f20@0:8f16
v20@0:8f16
v36@0:8d16B24@?28
@40@0:8d16d24B32B36
@"NSNumber"
@"<SUICAutoDismissalStrategyDelegate>"
v40@0:8B16d20B28@?32
@"_SUICRingLayer"
@"_SUICProgressRingLayer"
@"_SUICCheckGlyphLayer"
@?16@0:8
v24@0:8@?16
@40@0:8{_NSRange=QQ}16@32
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
{_NSRange="location"Q"length"Q}
@48@0:8q16Q24@32Q40
@60@0:8@16@24q32B40q44q52
@40@0:8@16@24q32
@68@0:8q16#24q32@40@48B56q60
v36@0:8^q16^q24B32
@"_SUICAtomRanged"
@"SUICProgressIndicatorViewController"
@"UIButton"
@44@0:8@16@24B32q36
@52@0:8q16#24@32@40B48
@"_SUICAtomIndexed"
@"_SUICStreamingWord"
@"CALayer"
{CGSize=dd}32@0:8{CGSize=dd}16
@80@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24{_NSRange=QQ}56@72
@72@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{_NSRange=QQ}48@64
@"NSLayoutManager"
@"NSTextStorage"
@"NSTextContainer"
@"UIFont"
^f16@0:8
v24@0:8^f16
16@0:8
v32@0:816
^16@0:8
v24@0:8^16
@32@0:8@16Q24
^v16@0:8
@48@0:8{?=ddi*}16
@32@0:8q16q24
{?="imageHeight"d"imageWidth"d"frameCount"i"fileName"*}
[4@"<MTLRenderPipelineState>"]
@"<MTLCommandQueue>"
@"<MTLBuffer>"
v32@0:8@16q24
