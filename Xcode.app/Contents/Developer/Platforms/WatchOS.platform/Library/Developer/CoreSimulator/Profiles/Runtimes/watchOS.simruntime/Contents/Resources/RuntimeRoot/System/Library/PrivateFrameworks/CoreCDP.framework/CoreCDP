@(#)PROGRAM:CoreCDP  PROJECT:CoreCDP-1
"setting companion in circle"
"pcsIdentitySetupWithInfo:"
"pcsIdentityMigrateToiCDPWithInfo:"
"pcsIdentityMigrateToStingrayWithInfo:"
"pcsSynchronizeKeysWithInfo:"
"pcsRestoreLocalBackup:"
"Preflighting invalid context: dsid missing"
"Preflighting invalid context: altDSID missing"
"Preflighting context with altDSID: %@"
"Preflighting context with dsid %@ for a non-primary acccount.. dragons may be ahead"
"CircleProxyImpl init is missing required dsid. Barring no primary account, problems lie ahead 
"CircleProxyImpl init is missing required cliqueConfiguration. Problems lie ahead 
"Circle status check failed with error: %@"
"Failed to retrieve cachedCliqueStatus: %@"
"Call to cachedCliqueStatus returned a status: %@"
 enableTelemetry=YES 
BEGIN [%lld]: CachedCircleStatus  enableTelemetry=YES 
 status=%{public,signpost.telemetry:number1,name=status}d 
CachedCircleStatus
END [%lld] %fs: CachedCircleStatus  status=%{public,signpost.telemetry:number1,name=status}d 
"Beneficiary account detected. Faking cached SOS circle status."
"Checking circle status with SOSCCThisDeviceIsInCircle"
"Failed to check circle status: %@"
"Call to SOSCCThisDeviceIsInCircle returned a status: %d"
"Checking combined circle status"
"%s (%d) called"
"Clique waitForOctagonUpgrade %@ with error %@"
"This is not an HSA2 account, not calling waitForOctagonUpgrade"
"Reporting success for %@"
"Reporting failure for %@"
CircleStatus
BEGIN [%lld]: CircleStatus  enableTelemetry=YES 
"Checking clique status with fetchCliqueStatus from %@"
"Call to fetchCliqueStatus returned a status: %@"
END [%lld] %fs: CircleStatus  status=%{public,signpost.telemetry:number1,name=status}d 
"Beneficiary account detected. Faking non-cached SOS circle status."
BEGIN [%lld]: SOSCircleStatus  enableTelemetry=YES 
SOSCircleStatus
END [%lld] %fs: SOSCircleStatus  status=%{public,signpost.telemetry:number1,name=status}d 
BEGIN [%lld]: SynchronizeCircleViews  enableTelemetry=YES 
"Calling SOSCCWaitForInitialSync to wait for views to sync"
"Finished calling SOSCCWaitForInitialSync didSync=%i error=%@"
"We failed to sync and now we failed to remove self form circle, nothing good will happen here"
"We failed to sync but managed to get out of the circle, hopefully the next attempt will work"
 didSync=%{public,signpost.telemetry:number1,name=didSync}d 
SynchronizeCircleViews
END [%lld] %fs: SynchronizeCircleViews  didSync=%{public,signpost.telemetry:number1,name=didSync}d 
"Attempting to remove self from circle"
"Removed device from circle successfully"
"Failed to remove self from circle - %@"
"Failed to check for non-view-aware peers with error %@"
"Removed old peers from circle: %@"
"Failed to remove old peers from circle with error %@ (peers: %@)"
"Failed to check for non-view-aware peers before removing them from circle with error %@"
"Calling SOSCCSetUserCredentialsAndDSID"
BEGIN [%lld]: SetUserCredentialsAndDSID  enableTelemetry=YES 
"Failed to call SOSCCSetUserCredentialsAndDSID with error %@"
 Error=%{public,signpost.telemetry:number1,name=Error}d 
SetUserCredentialsAndDSID
END [%lld] %fs: SetUserCredentialsAndDSID  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Security indicated that no credential is needed nor did we force"
"Skipping registering credentials, insufficient parameters"
BEGIN [%lld]: TryUserCredentialsAndDSID  enableTelemetry=YES 
"Registered credentials through try attempt"
"Failed to call SOSCCTryUserCredentialsAndDSID with error %@"
TryUserCredentialsAndDSID
END [%lld] %fs: TryUserCredentialsAndDSID  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Skipping try registering credentials, insufficient parameters"
"Security requires credentials..."
"Obtaining recovery key from security for custodian recovery with UUID: %@"
"Failed to obtain custodian recovery key from security with error: %@"
"Attempting to recover octagon usign custodian recovery key"
cdp: enabled status check
"XPC Error while checking if iCDP is enabled for DSID %@: %@"
"Checking iCDP status for DSID %@ (checkWithServer=%i)"
"iCDP status for DSID %@ is %@"
"Creating context for %@"
"Fetching PRK for primary Account"
"Escrowing a previously backed up PRK"
"Something went wrong... (%@) could not find a stashed token for primary Account: <%@ : %@>"
"Starting token renewal"
"Token completion block called"
"Starting MRK verification for %@"
"MRK verification completion block called"
"CDPCustodianController init is missing required dsid. Unable to process request, problems lie ahead 
"Asking security to create custodian recovery key for %@"
CustodianCreateRecoveryKey
BEGIN [%lld]: CustodianCreateRecoveryKey  enableTelemetry=YES 
END [%lld] %fs: CustodianCreateRecoveryKey  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Error creating custodian recovery key: %@"
"Asking security to delete custodian recovery key for %@"
CustodianDeleteRecoveryKey
BEGIN [%lld]: CustodianDeleteRecoveryKey  enableTelemetry=YES 
END [%lld] %fs: CustodianDeleteRecoveryKey  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Error deleting custodian recovery key: %@"
"Deleted custodian recovery key: for %@"
"CDPCustodianController init is missing required dsid. Unable to process preflight request"
"Error validating custodian recovery key: %@"
"Custodian recovery key is valid for: %@"
"Generating Inheritance access key for CDP account. Beneficiary: %@"
"Generating Inheritance access key for non-CDP account - not saved on OT. Beneficiary: %@"
"Creating the access key for beneficiary: %@"
"Unable to create the access key without access string or data."
"Attempting to recover Octagon with the inheritance key."
"Error validating inheritance key: %@"
"Inheritance key valid for beneficiary: %@"
"Attempted to present CDPUI with incomplete uiProvider: %s"
LocalSecretCollect
BEGIN [%lld]: LocalSecretCollect  enableTelemetry=YES 
END [%lld] %fs: LocalSecretCollect 
"CDPUIProvider does not respond to promptForLocalSecretWithCompletion, falling back to handler: %s"
"CDPUIProvider does not respond to promptForLocalSecretWithHandler either: %s"
"Warning: UI provider %@ does not respond to selector cdpContext:promptForRemoteSecretWithDevices:offeringRemoteApproval:validator:"
"Bailed out of interactive authentication. Preventing appearance of prompt because network is unreachable."
"Attempting to show error: %@"
"Warning: UI provider %@ does not respond to selector cdpContext:showError:withCompletion:"
"Warning: UI provider %@ does not respond to selector cdpContext:showError:withDefaultIndex:withCompletion:"
cdp: post follow up
"XPC Error posting a follow up: %@"
"Posted follow ups (%@) with error: %@"
cdp: clear follow up
"XPC Error cleaning up follow ups: %@"
"Cleared follow ups (%@) with error: %@"
"Invalidating connection"
"iCloud Env missing, bad things to come..."
"Auth Token missing, bad things to come..."
"Base URL missing, bad things to come..."
"Creating the access code from data."
"Creating the access code from string."
"Error creating key from access key string. Error - %@"
"Already sent CDPCA event %@"
"Sending report %@ (time: %f)"
"Attempting to validate secret using validator %@"
"Validator returned response of isValid=%i canRetry=%i error=%@ ... dispatching completion block on to main queue"
"Invoking validateSecret:devices:type:withCompletion: completion block on the main queue"
"Attempting to validate recovery key using validator %@"
"Invoking validateRecoveryKey:withCompletion: completion block on the main queue"
"Attempting to validate custodian recovery info using validator %@"
"InvokingvalidateCustodianRecoveryInfo:withCompletion: completion block on the main queue"
"Requesting approval from another device..."
"Cancelling request for remote approval..."
"Requesting reset of CDP account state..."
"Cancelling validation with error %@"
"Supported Escape Offers: %lu"
cdp/saveTermsAcceptance
"Saving of terms acceptance completed with error %@"
"XPC Error while attempting to save terms info: %@"
cdp/fetchTermsAcceptance
"Fetched terms acceptance completed with error %@ and result %@"
"XPC Error while attempting to fetch terms info: %@"
DataPrivacy: checking status of complete data privacy
"XPC Error while checking status for complete data privacy."
"Error getting status for complete data privacy - %@"
"Status for complete data privacy - %lu"
DataPrivacy: Update data privacy status
"XPC Error while updating data privacy."
"User declined losing access to devices."
"Error updating data privacy state without user's consent on devices that lose access."
"Error updating data privacy status - %@"
"Complete data privacy update."
cdp: Keychain Status Check
"XPC Error while checking if user-visible keychain sync is enabled: %@"
"Checking user-visible keychain sync status"
"User-visible keychain sync status is %@"
cdp: Keychain Status Change
"Setting user-visible keychain sync to %@"
"User-visibile keychain sync set to %@"
"Failed to set user-visibile keychain sync set to %@: %@"
cdp: Remove Legacy Peers
"XPC Error while remove non-view-aware peers: %@"
"Removing non-view-aware peers from the circle"
"Successfully removed non-view-aware peers from the circle"
"Failed to remove non-view-aware peers from the circle: %@"
"Trying to determine manatee availability..."
"Checking security eligibility state..."
"We are HSA2, but Security is not ready, waiting for Security state resolution..."
"We are no longer HSA2, reporting not eligible"
"Processing circle status change to calculate manatee availability"
"Processed circle state change event"
"Processing circle view change event"
"Processed circle view change event"
"All systems go!!! Manatee available"
"All systems are not go... Manatee not available"
"Sending %s, value: %llu"
"Checking local iCDP state..."
"Checking companion circle state..."
cdp/manatee-availability
"Requesting manatee state..."
"Manatee is not available, error: %@"
"Manatee is available"
cdp/statemachine-handle
HandleCloudDataProtectionState
BEGIN [%lld]: HandleCloudDataProtectionState  enableTelemetry=YES 
END [%lld] %fs: HandleCloudDataProtectionState  Error=%{public,signpost.telemetry:number1,name=Error}d 
"State machine completed shouldCompleteSignIn=%@ cloudDataProtectionEnabled=%@ error=%@"
"XPC Error while starting state machine: %@"
"Requesting start of CDP state machine..."
cdp/statemachine-repair
RepairCloudDataProtectionState
BEGIN [%lld]: RepairCloudDataProtectionState  enableTelemetry=YES 
END [%lld] %fs: RepairCloudDataProtectionState  Error=%{public,signpost.telemetry:number1,name=Error}d 
"State machine repair completed didRepair=%@ error=%@"
"XPC Error while repairing state: %@"
"Requesting repair of CDP state..."
"XPC Error while accepting sharing session: %@"
"Requesting start of accepting sharing session..."
"Requesting start of accepting sharing session, skipping escrow fetches..."
"Requesting repair and synchronization of CDP state with Squirrel..."
"Requesting repair of CDP state with Squirrel..."
"XPC Error while attempting to escrow preRecord: %@"
"Informing daemon of attempting to escrow preRecord..."
"XPC Error while updating local secret: %@"
"Informing daemon of local secret change..."
"Attempting to finish offline local secret change..."
"XPC Error while finishing Cyrus secure terms flow: %@"
"Attempting to finish secure terms flow..."
cdp: repair state check
"XPC Error while checking recovery existence: %@"
cdp/generate-rk
"XPC Error while generating a recovery key: %@"
"Attempting to generate a new recovery key"
cdp/delete-rk
"XPC Error while deleting a recovery key: %@"
"Attempting to delete a recovery key"
"XPC Error while fetching recovery key state: %@"
cdp/rk-availability
"Attempting to fetch recovery key state"
"Failed to fetch recovery key availability with error %@"
"Recovery key availability - %@"
"XPC Error while fetching recovery key availability."
"Handling URL action: %@"
cdp: recovery flow
"XPC Error while recovering data: %@"
"XPC Error while checking if the local device has a secret: %@"
"Checking if the local device has a secret"
"Local device DOES have a secret"
"Local device DOES NOT have a secret"
"Reporting current serial number: %@"
"Unable to check self process entitlements without SecTaskRef."
"Error when checking self process for entitlement %@. error:%@"
"Invalidating connection for controller %@"
"Daemon connection invalidated!"
"Daemon connection interrupted!"
"XPC Error from daemon: %@"
B16@?0^^{__CFError}8
kCDPStateRepair
kCDPOfflinePasscodeChange
kCDPRecoveryKeyRegenerate
kCDPUpgradeSetupBioMetrics
kCDPSecureTerms
kCDPConfirmExistingSecret
_followUpType
_shouldNotify
_force
_repairType
<%@: %p - type=%@ shouldNotify=%@ force=%@>
_authenticationResults
_appleID
_password
_passwordEquivToken
_dsid
_isHSA2Account
_didUseSMSVerification
_cachedLocalSecret
_cachedLocalSecretType
__useSecureBackupCachedPassphrase
__alwaysCreateEscrowRecord
__skipEscrowFetches
__recoveryToken
_guestMode
_idmsRecovery
_idmsMasterKeyRecovery
_duplexSession
_resumeContext
_sharingChannel
_type
_findMyiPhoneUUID
_supportsSkipSignIn
_altDSID
_isFederatedAccount
_isBeneficiaryAccount
__ignoreLockAssertErrors
_custodianRecoveryInfo
_beneficiaryAccount
_beneficiaryWrappedKeyData
__supportsCustodianRecovery
_bundleID
CDPContext was missing DSID when CircleProxyImpl was initialized. Its OTClique was not created.
-[CDPCircleProxyImpl waitForUpdate]
v16@?0@"NSError"8
ENABLED
DISABLED
v12@?0B8
v8@?0
personID
escrowProxyUrl
com.apple.Dataclass.Account
iCloudEnv
v24@?0@"CDPContext"8@"NSError"16
v24@?0@"NSDictionary"8@"NSError"16
v24@?0@"OTCustodianRecoveryKey"8@"NSError"16
statusToSet
userAcceptedDevicesToLoseAccountAccess
devicesThatLoseAccountAccessOnEnable
v24@?0@"OTInheritanceKey"8@"NSError"16
-[CDPStateUIProviderProxy cdpContext:promptForAdoptionOfMultipleICSC:]
v20@?0B8@"NSError"12
-[CDPStateUIProviderProxy cdpContext:promptForICSCWithIsNumeric:numericLength:isRandom:validator:]
-[CDPStateUIProviderProxy cdpContext:promptForLocalSecretWithCompletion:]
v24@?0@"CDPLocalSecret"8@"NSError"16
-[CDPStateUIProviderProxy cdpContext:promptForLocalSecretWithHandler:]
-[CDPStateUIProviderProxy cdpContext:beginRemoteApprovalWithValidator:completion:]_block_invoke
-[CDPStateUIProviderProxy cdpContext:promptForInteractiveAuthenticationWithCompletion:]
v16@?0q8
com.apple.CoreCDP.BackupRecovery
backupRecoveryResult
backupRecoveryThroughRemoteSecretDidSucceed
backupRecoveryThroughRemoteSecretDidSucceedWithoutLocalSecret
backupRecoveryThroughRemoteSecretDidCancel
backupRecoveryThroughRemoteSecretDidReset
backupRecoveryThroughRemoteSecretDidFail
joinMethod
attemptedMethods
callingProcessBundleID
iphone
IPHONE
ipad
IPAD
ipod touch
IPOD_TOUCH
macbook
MACBOOK
macbook pro
MACBOOK_PRO
mac pro
MAC_PRO
apple tv
apple watch
WATCH
DEVICE
_PASSWORD
_PASSCODE
Unknown
<%@: %p - hasMID=%@ isBottled=%@ recordID=%@ name=%@ model=%@ platform=%@ date=%@ encodedMetadata=%@>
encodedMetadata
_localizedName
_model
_modelVersion
_modelClass
_platform
_recordID
_machineID
_recordDate
_hasRandomSecret
_hasNumericSecret
_numericSecretLength
_isUsingMultipleiCSC
_remainingAttempts
_serialNumber
_isCurrentDevice
recordInfo
_deviceColor
_enclosureColor
CDPStateError
wasSuccess
errorDomain
errorCode
duration
__OSINSTALL_ENVIRONMENT
__AKSYNCBUBBLE
<%@: %p> EventName: [%@], ReportData: %@
v24@?0B8B12@"NSError"16
v16@?0Q8
v24@?0@"NSString"8@"NSError"16
com.apple.cdp
core
signpost
v24@?0Q8@"NSError"16
v24@?0@"CDPUpdateDataPrivacyContext"8@"NSError"16
A remote secret or recovery key is required to attempt backup recovery (use -remote <secret> OR -mk <recoveryKey>)
Remote secret is invalid... cancelling prompt/validation
Recovery key is invalid... cancelling prompt/validation
An iCSC is required to attempt backup recovery (use -icsc <iCSC>)
ICSC is invalid... cancelling prompt/validation
C5DDE5DD-2FF7-4735-80A3-0108488556DE
com.apple.CoreCDP
com.apple.cdp.cloudDataProtectionEnabled
com.apple.cdp.manatee-availability
com.apple.cdp.manatee-state
command
rejoin
offline-secret-change
regenerate
findMyPhoneIdentity
marketing-name
HWModelStr
ProductType
ProductVersion
BuildVersion
DeviceName
SerialNumber
UserAssignedDeviceName
com.apple.managedconfiguration.profiled-access
DeviceClassNumber
CDPDLocalDeviceSecretProxyImpl
/System/Library/PrivateFrameworks/CoreCDPInternal.framework/CoreCDPInternal
com.apple.cdp.daemon
_validatedSecret
_secretType
_wrappedRKC
_wrappingKey
_custodianUUID
<%@: %p> for UUID: %@
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
CDPProtectedCloudStorageProxyImpl
CDPProtectedCloudStorageProxy
NSObject
CDPDeviceProtocol
CDPStateUIProviderInternal
CDPLocalDeviceSecretHandlerProtocol
CDPRemoteDeviceSecretValidatorProtocol
CDPRecoveryKeyValidator
CDPAuthProviderInternal
CDPDaemonProtocol
CDPFollowUpContext
NSSecureCoding
NSCoding
HSA2
CDPContext
NSCopying
Account
CDPCircleProxyImpl
CDPDCircleProxy
CDPAccount
CDPAuthProviderProxy
CDPCustodianRecoveryKeyController
CDPUpdateDataPrivacyContext
CDPInheritanceTrustController
CDPStateUIProviderProxy
CDPCABackupRecoveryReporter
CDPFollowUpController
CDPPCSUtilities
CDPLocalizedStringBuilder
CDPDevice
CoreCDP
CDPCAReporter
CDPRemoteDeviceSecretValidator
CDPLocalDeviceSecretHandler
CDPRecoveryKeyValidatorProxyImpl
CDPTermsInfoBackupController
CDPDataPrivacyController
CDPKeychainSync
CDPToolFakeUIProvider
CDPStateUIProvider
CDPRecoveryKeyUIProvider
CDPUtilities
CDPManateeStateController
CDPDAuthListener
CDPDCircleListener
CDPStateController
CDPRecoveryController
CDPLocalDeviceSecretProxyImpl
CDPLocalDeviceSecretProxy
CDPLocalDevice
CDPController
CDPDaemonConnection
CDPLocalSecret
CDPCustodianRecoveryInfo
hasFullCDPSupport
_performPCSBlock:error:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
pcsIdentityCreateWithInfo:error:
pcsIdentitySetupWithInfo:error:
pcsIdentitySetIsInICDPNetwork:options:error:
pcsIdentitySetIsInICDPLocal:error:
pcsIdentitySetCompanionInCircle:error:
pcsIdentityMigrateToiCDPWithInfo:error:
pcsIdentityMigrateToStingrayWithInfo:error:
pcsSynchronizeKeysWithInfo:error:
pcsRestoreLocalBackup:error:
count
countByEnumeratingWithState:objects:count:
localSecretType
prevailingLocalSecretType
hasMixedSecretType
TQ,R,N
TB,R,N
setWithObjects:
cdpContext:promptForLocalSecretWithCompletion:
cdpContext:promptForLocalSecretWithHandler:
cdpContext:beginRemoteApprovalWithValidator:completion:
cdpContext:promptForRemoteSecretWithDevices:offeringRemoteApproval:validator:
cdpContext:promptForICSCWithIsNumeric:numericLength:isRandom:validator:
cdpContext:promptForAdoptionOfMultipleICSC:
cdpContext:promptForInteractiveAuthenticationWithCompletion:
cdpContext:showError:withCompletion:
cdpContext:showError:withDefaultIndex:withCompletion:
cdpContext:presentRecoveryKeyWithValidator:completion:
cdpContext:promptForRecoveryKeyWithValidator:completion:
cdpContext:promptForBeneficiaryAccessKeyWithCompletion:
interfaceWithProtocol:
setClasses:forSelector:argumentIndex:ofReply:
userDidEnterValidSecret:type:
userDidCancelWithError:
setInterface:forSelector:argumentIndex:ofReply:
validateSecret:devices:type:withCompletion:
validateRecoveryKey:withCompletion:
cancelValidationWithError:
approveFromAnotherDeviceWithCompletion:
cancelApproveFromAnotherDevice
resetAccountCDPState
supportedEscapeOfferMaskCompletion:
validateCustodianRecoveryInfo:withCompletion:
supportedEscapeOfferMask
setSupportedEscapeOfferMask:
TQ,N
confirmRecoveryKey:completion:
generateRecoveryKey:
generateRecoveryKeyWithError:
confirmRecoveryKey:error:
arrayWithObjects:count:
setWithArray:
cdpContext:performSilentRecoveryTokenRenewal:
cdpContext:verifyMasterKey:completion:
setWithObject:
handleCloudDataProtectionStateWithContext:uiProvider:completion:
startCircleApplicationApprovalServerWithContext:completion:
repairCloudDataProtectionStateWithContext:uiProvider:completion:
shouldPerformRepairForContext:forceFetch:completion:
recoverAndSynchronizeSquirrelWithContext:uiProvider:completion:
recoverSquirrelWithContext:uiProvider:completion:
localSecretChangedTo:secretType:context:uiProvider:completion:
attemptToEscrowPreRecord:context:completion:
finishOfflineLocalSecretChangeWithContext:uiProvider:completion:
finishCyrusFlowAfterTermsAgreementWithContext:uiProvider:completion:
generateNewRecoveryKeyWithContext:uiProvider:completion:
deleteRecoveryKeyWithContext:uiProvider:completion:
generateRandomRecoveryKeyWithContext:completion:
isRecoveryKeyAvailableWithCompletion:
isICDPEnabledForDSID:checkWithServer:completion:
hasLocalSecretWithCompletion:
isUserVisibleKeychainSyncEnabledWithCompletion:
setUserVisibleKeychainSyncEnabled:withCompletion:
removeNonViewAwarePeersFromCircleWithContext:completion:
performRecoveryWithContext:uiProvider:authProvider:completion:
clearFollowUpWithContext:completion:
postFollowUpWithContext:completion:
statusForDataPrivacyWithCompletion:
updateDataPrivacyWithContext:completion:
saveTermsAcceptance:completion:
fetchTermsAcceptanceForAccount:completion:
setShouldNotify:
setFollowUpType:
contextWithType:
encodeObject:forKey:
encodeBool:forKey:
encodeInteger:forKey:
init
decodeObjectOfClass:forKey:
decodeBoolForKey:
decodeIntegerForKey:
stringWithFormat:
contextForOfflinePasscodeChange
contextForRecoveryKeyRepair
contextForSettingUpBiometrics
contextForSecureTerms
contextForConfirmExistingSecret
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
shouldNotify
force
setForce:
followUpType
.cxx_destruct
_repairType
_shouldNotify
_force
_followUpType
T@"NSString",C,N,V_followUpType
TB,N,V_shouldNotify
TB,N,V_force
setRepairType:
repairType
contextForStateRepair
objectForKeyedSubscript:
boolValue
unsignedIntegerValue
initWithUUIDString:
copy
initWithBase64EncodedString:options:
mutableCopy
removeObjectForKey:
idmsRecovery
findMyiPhoneUUID
cdp_sanitizedCopy
decodeObjectOfClasses:forKey:
appleID
password
passwordEquivToken
dsid
altDSID
setContext:
stringValue
setDsid:
setAltDSID:
duplexSession
resumeContext
sharingChannel
initWithContext:
copyWithZone:
initWithAuthenticationResults:
purgeResumeData
desiresAllRecords
updateWithAuthenticationResults:
augmentWithCredentialsFromContext:
cliqueConfiguration
isPiggybackingRecovery
isTTSURecovery
analyticsReporter
authenticationResults
setAuthenticationResults:
setAppleID:
setPassword:
setPasswordEquivToken:
isHSA2Account
setIsHSA2Account:
isFederatedAccount
setIsFederatedAccount:
isBeneficiaryAccount
setIsBeneficiaryAccount:
didUseSMSVerification
setDidUseSMSVerification:
type
setType:
cachedLocalSecret
setCachedLocalSecret:
cachedLocalSecretType
setCachedLocalSecretType:
guestMode
setGuestMode:
setFindMyiPhoneUUID:
supportsSkipSignIn
setSupportsSkipSignIn:
beneficiaryIdentifier
setBeneficiaryIdentifier:
_authProvider
set_authProvider:
setDuplexSession:
setResumeContext:
failSignInOnError
setFailSignInOnError:
_supportsCustodianRecovery
set_supportsCustodianRecovery:
setSharingChannel:
_useSecureBackupCachedPassphrase
set_useSecureBackupCachedPassphrase:
_alwaysCreateEscrowRecord
set_alwaysCreateEscrowRecord:
_skipEscrowFetches
set_skipEscrowFetches:
_recoveryToken
set_recoveryToken:
_ignoreLockAssertErrors
set_ignoreLockAssertErrors:
setIdmsRecovery:
idmsMasterKeyRecovery
setIdmsMasterKeyRecovery:
custodianRecoveryInfo
setCustodianRecoveryInfo:
beneficiaryWrappedKeyData
setBeneficiaryWrappedKeyData:
bundleID
setBundleID:
_analyticsReporter
_isHSA2Account
_isFederatedAccount
_isBeneficiaryAccount
_didUseSMSVerification
_guestMode
_supportsSkipSignIn
_failSignInOnError
__supportsCustodianRecovery
__useSecureBackupCachedPassphrase
__alwaysCreateEscrowRecord
__skipEscrowFetches
__ignoreLockAssertErrors
_idmsRecovery
_idmsMasterKeyRecovery
_authenticationResults
_appleID
_password
_passwordEquivToken
_dsid
_altDSID
_type
_cachedLocalSecret
_cachedLocalSecretType
_findMyiPhoneUUID
_beneficiaryIdentifier
__authProvider
_duplexSession
_resumeContext
_sharingChannel
__recoveryToken
_custodianRecoveryInfo
_beneficiaryWrappedKeyData
_bundleID
T@"<CDPAuthProviderInternal>",&,N,V__authProvider
T@"KCAESGCMDuplexSession",&,N,V_duplexSession
T@"AKCircleRequestContext",&,N,V_resumeContext
TB,N,V_failSignInOnError
T@"CDPCABackupRecoveryReporter",R,N
TB,N,V__supportsCustodianRecovery
T@"CUMessageSession",&,N,V_sharingChannel
TB,N,V__useSecureBackupCachedPassphrase
TB,N,V__alwaysCreateEscrowRecord
TB,N,V__skipEscrowFetches
T@"NSString",C,N,V__recoveryToken
TB,N,V__ignoreLockAssertErrors
TB,N,V_idmsRecovery
TB,N,V_idmsMasterKeyRecovery
Tq,N,V_type
T@"CDPCustodianRecoveryInfo",&,N,V_custodianRecoveryInfo
T@"NSData",&,N,V_beneficiaryWrappedKeyData
T@"NSString",C,N,V_bundleID
T@"NSDictionary",C,N,V_authenticationResults
T@"NSString",C,N,V_appleID
T@"NSString",C,N,V_password
T@"NSString",C,N,V_passwordEquivToken
T@"NSNumber",C,N,V_dsid
T@"NSString",C,N,V_altDSID
TB,N,V_isHSA2Account
TB,N,V_isFederatedAccount
TB,N,V_isBeneficiaryAccount
TB,N,V_didUseSMSVerification
T@"NSString",C,N,V_cachedLocalSecret
TQ,N,V_cachedLocalSecretType
TB,N,V_guestMode
T@"NSString",C,V_findMyiPhoneUUID
TB,V_supportsSkipSignIn
T@"NSUUID",C,N,V_beneficiaryIdentifier
sharedInstance
contextForPrimaryAccount
preflightContext:
initWithContextData:
dictionaryWithObjects:forKeys:count:
setUseCachedAccountStatus:
fetchCliqueStatus:error:
numberWithInteger:
cdpStatusFromOT:
cachedCliqueStatus:
platformSupportsSOS
cachedSOSCircleStatus:
cdpStatusFromSOS:
_authenticatedCliqueStatus:
_sos_circleStatus:
waitForOctagonUpgrade:
contextType
performedSuccessfulCDPStateMachineRun:reply:
performedFailureCDPStateMachineRun:error:reply:
fetchCliqueStatus:
_cliqueStatus:
_sos_authenticatedCircleStatus:
tryRegisteringCredentials
registerCredentials
nonCachedSOSCircleStatus:
cliqueMemberIdentifier
peerDeviceNamesByPeerID:
waitForInitialSync:
combinedCircleStatus:
removeThisDeviceFromCircle:
leaveClique:
requestToJoinCircle:
joinAfterRestore:
setPasswordEquivalentToken:
setAuthenticationAppleID:
resetProtectedData:error:
fetchUserControllableViewsSyncingEnabled:
allObjects
peersHaveViewsEnabled:error:
copyViewUnawarePeerInfo:
removeFriendsInClique:error:
setUserControllableViewsSyncStatus:error:
_registerCredentialsOnlyIfNeeded:
canAuthenticate
dataUsingEncoding:
setUserCredentialsAndDSID:password:error:
code
tryUserCredentialsAndDSID:password:error:
accountUserKeyAvailable
_pairingChannelContext
setupPairingChannelAsInitiator:
setupPairingChannelAsAcceptor:
hardwareModel
setModel:
modelVersion
setModelVersion:
deviceClass
setModelClass:
osVersion
setOsVersion:
custodianUUID
wrappedRKC
wrappingKey
initWithWrappedKey:wrappingKey:uuid:error:
recoverOctagonUsingCustodianRecoveryKey:custodianRecoveryKey:reply:
combinedCachedCircleStatus:
peerId
peerDeviceNamesByPeerID
didJoinCircleAfterRecovery:
generateRecoveryKeyWithInfo:error:
generateVerifierWithRecoveryKey:error:
synchronizeCircleViews
requestToJoinCircleAfterRestore:
requestToResetProtectedData:
anyPeerHasEnabledViewsInSet:error:
setViewsWithEnableSet:disableSet:
hasNonViewAwarePeers
removeNonViewAwarePeers:
isLastBackupMakingPeer:
registerCredentialsIfMissing
pairingChannelInitiator
pairingChannelAcceptor
waitForUpdate
reportSuccess
reportFailure:
recoverOctagonUsingCustodianInfo:completion:
cdpContext
T@"CDPContext",R,N
sos_circleStatus:
_clique
_cdpContext
T@"CDPContext",R,N,V_cdpContext
isICDPEnabledForDSID:checkWithServer:
synchronousDaemonWithErrorHandler:
connection
invalidate
primaryAppleAccount
username
accountProperties
altDSIDForAccount:
primaryAccountAltDSID
authKitAccountWithAltDSID:
securityLevelForAccount:
primaryAuthKitAccount
isBeneficiaryForAccount:
aa_authToken
propertiesForDataclass:
objectForKey:
dataclassProperties
primaryAccountDSID
longLongValue
numberWithLongLong:
primaryAccountUsername
primaryAccountIsBeneficiary
aa_firstName
aa_fullName
defaultStore
aa_primaryAppleAccount
credentialForAccount:error:
credentialItemForKey:
isICDPEnabledForDSID:
primaryAccountSecurityLevel
authToken
escrowURL
iCloudEnv
primaryAccountFirstName
primaryAccountFullName
primaryAccountStashedPRK
proxyWithAuthProvider:
cdp_errorWithCode:
wrappedKey
initWithWrappedRKC:wrappingKey:custodianUUID:
createCustodianRecoveryKey:uuid:reply:
removeCustodianRecoveryKey:custodianRecoveryKeyUUID:reply:
preflightRecoverOctagonUsingCustodianRecoveryKey:custodianRecoveryKey:reply:
createRecoveryKeyWithContext:forUUID:completion:
deleteRecoveryKeyWithContext:forUUID:completion:
validateRecoveryKey:withContext:completion:
numberWithUnsignedInteger:
unsignedIntValue
initWithStatusToUpdate:
statusToSet
setStatusToSet:
userAcceptedDevicesToLoseAccountAccess
setUserAcceptedDevicesToLoseAccountAccess:
devicesThatLoseAccountAccessOnEnable
setDevicesThatLoseAccountAccessOnEnable:
_userAcceptedDevicesToLoseAccountAccess
_statusToSet
_devicesThatLoseAccountAccessOnEnable
TQ,N,V_statusToSet
TB,N,V_userAcceptedDevicesToLoseAccountAccess
T@"NSArray",&,N,V_devicesThatLoseAccountAccessOnEnable
accessCode
createInheritanceKey:uuid:reply:
generateInheritanceKey:uuid:reply:
initFromAccessKey:
beneficiaryID
recoverOctagonUsingInheritanceKey:inheritanceKey:reply:
removeInheritanceKey:inheritanceKeyUUID:reply:
preflightRecoverOctagonUsingInheritanceKey:inheritanceKey:reply:
createInheritanceKeyWithContext:completion:
recoverOctagonWithContext:inheritanceKey:completion:
isInheritanceAccessKeyValid:
deleteInheritanceAccessKeyWithContext:completion:
validateAccessKey:withContext:completion:
errorWithDomain:code:userInfo:
initWithContext:validator:
initWithContext:handler:
validatedSecret
secretType
cdpContext:beginRemoteApprovalWithValidator:
reachabilityForInternetConnection
currentReachabilityStatus
initWithRemoteObject:
initWithUIProvider:
uiProvider
setUiProvider:
_uiProvider
T@"<CDPStateUIProvider>",&,N,V_uiProvider
initWithEvent:
setObject:forKeyedSubscript:
backupRecoverySetAttemptedMethod:
sendReport
domain
backupRecoveryDidSucceed
backupRecoveryDidSucceedWithoutLocalSecret
backupRecoveryDidCancel
backupRecoveryDidReset
backupRecoverySetJoinFromBundleID:
backupRecoveryDidFailWithError:
_attemptedMethods
dealloc
postFollowUpWithContext:error:
clearFollowUpWithContext:error:
_daemonConn
dictionary
_pcsConfigForPrimaryAccount
addEntriesFromDictionary:
setupDictionaryWithContext:
lowercaseString
containsString:
stringByAppendingString:
builderForKey:
addDeviceClass:
addUnqualifiedDeviceClass:
addSecretType:
localizedString
currentKey
_key
wrappingKeyData
length
wrappedKeyData
initWithWrappedKeyData:wrappingKeyData:uuid:error:
wrappingKeyString
initWithWrappedKeyData:wrappingKeyString:uuid:error:
uuid
initWithBeneficiairyIdentifier:
claimTokenData
setClaimTokenData:
claimTokenString
setClaimTokenString:
setWrappingKeyData:
setWrappingKeyString:
setWrappedKeyData:
wrappedKeyString
setWrappedKeyString:
T@"AKInheritanceAccessKey",R,N
numberWithInt:
localizedName
setLocalizedName:
model
modelClass
platform
setPlatform:
recordID
setRecordID:
machineID
setMachineID:
recordDate
setRecordDate:
hasRandomSecret
setHasRandomSecret:
hasNumericSecret
setHasNumericSecret:
numericSecretLength
setNumericSecretLength:
isUsingMultipleiCSC
setIsUsingMultipleiCSC:
remainingAttempts
setRemainingAttempts:
serialNumber
setSerialNumber:
isCurrentDevice
setIsCurrentDevice:
deviceColor
setDeviceColor:
enclosureColor
setEnclosureColor:
localizedDescription
setLocalizedDescription:
recoveryStatus
setRecoveryStatus:
coolOffPeriod
setCoolOffPeriod:
recordInfo
setRecordInfo:
simplePublicKey
setSimplePublicKey:
_localizedName
_model
_modelVersion
_modelClass
_platform
_recordID
_machineID
_simplePublicKey
_recordDate
_recordInfo
_hasRandomSecret
_hasNumericSecret
_numericSecretLength
_isUsingMultipleiCSC
_remainingAttempts
_deviceColor
_enclosureColor
_serialNumber
_isCurrentDevice
_localizedDescription
_recoveryStatus
_coolOffPeriod
T@"NSString",C,N,V_localizedName
T@"NSString",C,N,V_model
T@"NSString",C,N,V_modelVersion
T@"NSString",C,N,V_modelClass
TQ,N,V_platform
T@"NSString",C,N,V_recordID
T@"NSString",C,N,V_machineID
T@"NSDate",C,N,V_recordDate
TB,N,V_hasRandomSecret
TB,N,V_hasNumericSecret
T@"NSNumber",C,N,V_numericSecretLength
TB,N,V_isUsingMultipleiCSC
TQ,N,V_remainingAttempts
T@"NSString",C,N,V_serialNumber
TB,N,V_isCurrentDevice
TQ,N,V_recoveryStatus
T@"NSNumber",&,N,V_coolOffPeriod
T@"NSString",C,N,V_deviceColor
T@"NSString",C,N,V_enclosureColor
T@"NSDictionary",C,N,V_recordInfo
T@"NSData",C,N,V_simplePublicKey
T@"NSString",C,N,V_localizedDescription
cdp_errorWithCode:userInfo:
isEqualToString:
cdp_isCDPErrorWithCode:
cdp_isLoginHardLimit
cdp_isLoginSoftLimit
cdp_errorWithCode:underlyingError:
machAbsoluteTimeToTimeInterval:
numberWithDouble:
_eventName
_reportData
_initTime
_clock_timebase
_executeSyncOnMainThreadIfNeeded:
isMainThread
_validator
context
_handlerProxy
_context
T@"CDPContext",R,N,V_context
daemonConn
setDaemonConn:
T@"CDPDaemonConnection",&,N,V_daemonConn
daemonWithErrorHandler:
_checkUseConsentForContext:shouldContinue:completion:
_logDataPrivacyStatUpdateError:completion:
_updateDataPrivacyWithContext:completion:
updateDataPrivacyWithContext:shouldContinue:completion:
isUserVisibleKeychainSyncEnabled
initWithValidatedSecret:secretType:
recoveryKey
accessKey
cdpContext:promptToInformUserOfAccountUnlockWithCompletion:
cdpContext:promptToInformUserOfAccountLockOutWithCompletion:
localSecret
setLocalSecret:
remoteSecret
setRemoteSecret:
icsc
setIcsc:
setRecoveryKey:
setAccessKey:
_localSecret
_remoteSecret
_icsc
_recoveryKey
_accessKey
T@"NSString",C,N,V_localSecret
T@"NSString",C,N,V_remoteSecret
T@"NSString",C,N,V_icsc
T@"NSString",C,N,V_recoveryKey
T@"AKInheritanceAccessKey",C,N,V_accessKey
getActivePairedDevice
activeDeviceSelectorBlock
getDevicesMatching:
firstObject
supportsCapability:
activePairedDeviceSelectorBlock
getAllDevicesWithArchivedAltAccountDevicesMatching:
valueForProperty:
isInternalBuild
bundleForClass:
localizedStringForKey:value:table:
isPrimaryAccountHSA2
_checkSecurityEligibility:
_checkCircleStatusWithContext:error:
_didCreateCircleProxy
reportManateeAvailable
reportManateeUnavailable
_sendNotification:withValue:
numberWithUnsignedLongLong:
defaultCenter
stringWithUTF8String:
postNotificationName:object:userInfo:deliverImmediately:
postNotificationName:object:userInfo:
securityLevelChanged:
circleStatusChanged
circleViewStatusChanged
isManateeAvailable:
circleProxy
setCircleProxy:
_circleProxy
T@"<CDPDCircleProxy>",&,N,V_circleProxy
uiProviderProxy
startCircleApplicationApprovalServer:
attemptToEscrowPreRecord:completion:
handleURLActionWithInfo:completion:
repairCloudDataProtectionStateWithCompletion:
finishOfflineLocalSecretChangeWithCompletion:
generateNewRecoveryKey:
handleCloudDataProtectionStateWithCompletion:
startCircleApplicationApprovalServerSkipEscrowFetches:
recoverAndSynchronizeWithSquirrel:
recoverWithSquirrel:
attemptToEscrowPreRecord:preRecordUUID:secretType:completion:
localSecretChangedTo:secretType:completion:
finishCyrusFlowAfterTermsAgreementWithContext:
shouldPerformRepairWithOptionForceFetch:error:
deleteRecoveryKey:
deleteRecoveryKeyWithError:
isRecoveryKeyAvailableWithError:
generateRandomRecoveryKey:
handleURLActionWithInfo:
_sanitizedRecoveryErrorWithError:
authProvider
performRecovery:
hasLocalSecret
_currentProcessCreatesDaemonTypeProxy
_currentProcessHasEntitlement:
supportsSecureBackupRecovery
marketingModel
deviceName
_isHomePod
_localSecretProxy
setDaemonXPCEndpoint:
initWithXpcEndpoint:context:
setAuthProvider:
setUiProviderProxy:
_uiProviderProxy
T@"CDPStateUIProviderProxy",&,N,V_uiProviderProxy
T@"<CDPAuthProvider>",&,N,V_authProvider
shouldDisplayToUser
lock
initWithMachServiceName:options:
initWithListenerEndpoint:
unlock
setInvalidationHandler:
setInterruptionHandler:
setRemoteObjectInterface:
resume
remoteObjectProxyWithErrorHandler:
synchronousRemoteObjectProxyWithErrorHandler:
daemon
daemonXPCEndpoint
_conn
_connLock
_daemonXPCEndpoint
T@"NSXPCListenerEndpoint",&,N,V_daemonXPCEndpoint
integerValue
_validatedSecret
_secretType
T@"NSString",R,N,V_validatedSecret
TQ,R,N,V_secretType
allocWithZone:
UUIDString
_wrappedRKC
_wrappingKey
_custodianUUID
T@"NSData",R,C,N,V_wrappedRKC
T@"NSData",R,C,N,V_wrappingKey
T@"NSUUID",R,C,N,V_custodianUUID
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
^{_PCSIdentitySetData=}32@0:8@16^@24
B40@0:8^{_PCSIdentitySetData=}16@24^@32
B32@0:8^{_PCSIdentitySetData=}16^@24
B32@0:8@16^@24
^{_PCSIdentitySetData=}32@0:8@"NSDictionary"16^@24
B40@0:8^{_PCSIdentitySetData=}16@"NSDictionary"24^@32
B32@0:8@"NSDictionary"16^@24
B32@0:8@?16^@24
v32@0:8@16@?24
v32@0:8@16@24
v40@0:8@16@24@?32
v44@0:8@16@24B32@36
v48@0:8@16B24@28B36@40
v48@0:8@16@24q32@?40
v32@0:8@"CDPContext"16@?<v@?@"CDPLocalSecret"@"NSError">24
v32@0:8@"CDPContext"16@"<CDPLocalDeviceSecretHandlerProtocol>"24
v40@0:8@"CDPContext"16@"<CDPRemoteDeviceSecretValidatorProtocol>"24@?<v@?B@"NSError">32
v44@0:8@"CDPContext"16@"NSArray"24B32@"<CDPRemoteDeviceSecretValidatorProtocol>"36
v48@0:8@"CDPContext"16B24@"NSNumber"28B36@"<CDPRemoteDeviceSecretValidatorProtocol>"40
v32@0:8@"CDPContext"16@?<v@?B@"NSError">24
v32@0:8@"CDPContext"16@?<v@?@"NSDictionary"@"NSError">24
v40@0:8@"CDPContext"16@"NSError"24@?<v@?q>32
v48@0:8@"CDPContext"16@"NSError"24q32@?<v@?q>40
v40@0:8@"CDPContext"16@"<CDPRecoveryKeyValidatorInternal>"24@?<v@?B@"NSError">32
v32@0:8@"CDPContext"16@?<v@?@"AKInheritanceAccessKey"@"NSError">24
v32@0:8@16Q24
v24@0:8@16
v32@0:8@"NSString"16Q24
v24@0:8@"NSError"16
v48@0:8@16@24Q32@?40
v24@0:8@?16
v16@0:8
v24@0:8Q16
v48@0:8@"NSString"16@"NSArray"24Q32@?<v@?BB@"NSError">40
v32@0:8@"NSString"16@?<v@?BB@"NSError">24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?Q>16
v32@0:8@"CDPCustodianRecoveryInfo"16@?<v@?B@"NSError">24
@24@0:8^@16
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"NSString"@"NSError">16
@"NSString"24@0:8^@16
B32@0:8@"NSString"16^@24
v32@0:8@"CDPContext"16@?<v@?@"CDPContext"@"NSError">24
v40@0:8@"CDPContext"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v36@0:8@16B24@?28
v56@0:8@16Q24@32@40@?48
Vv24@0:8@?16
v28@0:8B16@?20
v48@0:8@16@24@32@?40
Vv32@0:8@16@?24
v40@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@?<v@?BB@"NSError">32
v40@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@?<v@?B@"NSError">32
v36@0:8@"CDPContext"16B24@?<v@?B@"NSError">28
v56@0:8@"NSString"16Q24@"CDPContext"32@"<CDPStateUIProviderInternal>"40@?<v@?B@"NSError">48
v40@0:8@"NSString"16@"CDPContext"24@?<v@?B@"NSError">32
v32@0:8@"CDPContext"16@?<v@?@"NSString"@"NSError">24
Vv24@0:8@?<v@?B@"NSError">16
v36@0:8@"NSString"16B24@?<v@?B>28
v24@0:8@?<v@?B>16
v28@0:8B16@?<v@?B@"NSError">20
v48@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@"<CDPAuthProviderInternal>"32@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"CDPFollowUpContext"16@?<v@?B@"NSError">24
Vv24@0:8@?<v@?Q@"NSError">16
Vv32@0:8@"CDPUpdateDataPrivacyContext"16@?<v@?@"CDPUpdateDataPrivacyContext"@"NSError">24
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v32@0:8@"ACAccount"16@?<v@?@"NSDictionary"@"NSError">24
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v20@0:8B16
@"NSString"
@24@0:8^{_NSZone=}16
q16@0:8
v24@0:8q16
@"CDPCABackupRecoveryReporter"
@"NSDictionary"
@"NSNumber"
@"NSUUID"
@"<CDPAuthProviderInternal>"
@"KCAESGCMDuplexSession"
@"AKCircleRequestContext"
@"CUMessageSession"
@"CDPCustodianRecoveryInfo"
@"NSData"
Q24@0:8^@16
i24@0:8^@16
@32@0:8@16^@24
B24@0:8^@16
B32@0:8@16@24
B28@0:8B16^@20
@"NSDictionary"16@0:8
v24@0:8@"OTClique"16
@"NSString"32@0:8@"NSDictionary"16^@24
@"NSDictionary"32@0:8@"NSString"16^@24
@"OTClique"24@0:8^@16
B32@0:8@"NSSet"16^@24
B32@0:8@"NSSet"16@"NSSet"24
@"KCPairingChannel"16@0:8
v32@0:8@"CDPCustodianRecoveryInfo"16@?<v@?@"NSError">24
@"CDPContext"16@0:8
Q20@0:8i16
Q24@0:8q16
q24@0:8^@16
B20@0:8B16
@"OTClique"
@"CDPContext"
B28@0:8@16B24
@"<CDPAuthProvider>"
@24@0:8Q16
@"NSArray"
@"<CDPStateUIProvider>"
@"CDPDaemonConnection"
@"NSDate"
B24@0:8q16
@24@0:8q16
@32@0:8q16@24
d24@0:8Q16
@"NSMutableDictionary"
{mach_timebase_info="numer"I"denom"I}
@32@0:8@16@24
@"<CDPRemoteDeviceSecretValidatorProtocol>"
@"<CDPLocalDeviceSecretHandlerProtocol>"
@"<CDPRecoveryKeyValidator>"
v40@0:8@16@?24@?32
v40@0:8@"CDPContext"16@"<CDPRecoveryKeyValidator>"24@?<v@?B@"NSError">32
v44@0:8@"CDPContext"16@"NSArray"24B32@"CDPRemoteDeviceSecretValidator"36
v48@0:8@"CDPContext"16B24@"NSNumber"28B36@"CDPRemoteDeviceSecretValidator"40
v32@0:8@"CDPContext"16@"CDPLocalDeviceSecretHandler"24
v32@0:8@"CDPContext"16@"CDPRemoteDeviceSecretValidator"24
v32@0:8@"CDPContext"16@?<v@?>24
@"AKInheritanceAccessKey"
v32@0:8r*16Q24
@"<CDPDCircleProxy>"
v40@0:8@16Q24@?32
@"<CDPLocalDeviceSecretProxy>"
@"CDPStateUIProviderProxy"
@24@0:8@?16
@"NSXPCConnection"
@"NSLock"
@"NSXPCListenerEndpoint"
@32@0:8@16Q24
@40@0:8@16@24@32
@(#)PROGRAM:CoreCDP  PROJECT:CoreCDP-1
"setting companion in circle"
"pcsIdentitySetupWithInfo:"
"pcsIdentityMigrateToiCDPWithInfo:"
"pcsIdentityMigrateToStingrayWithInfo:"
"pcsSynchronizeKeysWithInfo:"
"pcsRestoreLocalBackup:"
"Preflighting invalid context: dsid missing"
"Preflighting invalid context: altDSID missing"
"Preflighting context with altDSID: %@"
"Preflighting context with dsid %@ for a non-primary acccount.. dragons may be ahead"
"CircleProxyImpl init is missing required dsid. Barring no primary account, problems lie ahead 
"CircleProxyImpl init is missing required cliqueConfiguration. Problems lie ahead 
"Circle status check failed with error: %@"
"Failed to retrieve cachedCliqueStatus: %@"
"Call to cachedCliqueStatus returned a status: %@"
 enableTelemetry=YES 
BEGIN [%lld]: CachedCircleStatus  enableTelemetry=YES 
 status=%{public,signpost.telemetry:number1,name=status}d 
CachedCircleStatus
END [%lld] %fs: CachedCircleStatus  status=%{public,signpost.telemetry:number1,name=status}d 
"Beneficiary account detected. Faking cached SOS circle status."
"Checking circle status with SOSCCThisDeviceIsInCircle"
"Failed to check circle status: %@"
"Call to SOSCCThisDeviceIsInCircle returned a status: %d"
"Checking combined circle status"
"%s (%d) called"
"Clique waitForOctagonUpgrade %@ with error %@"
"This is not an HSA2 account, not calling waitForOctagonUpgrade"
"Reporting success for %@"
"Reporting failure for %@"
BEGIN [%lld]: CircleStatus  enableTelemetry=YES 
"Checking clique status with fetchCliqueStatus from %@"
"Call to fetchCliqueStatus returned a status: %@"
CircleStatus
END [%lld] %fs: CircleStatus  status=%{public,signpost.telemetry:number1,name=status}d 
"Beneficiary account detected. Faking non-cached SOS circle status."
BEGIN [%lld]: SOSCircleStatus  enableTelemetry=YES 
SOSCircleStatus
END [%lld] %fs: SOSCircleStatus  status=%{public,signpost.telemetry:number1,name=status}d 
BEGIN [%lld]: SynchronizeCircleViews  enableTelemetry=YES 
"Calling SOSCCWaitForInitialSync to wait for views to sync"
"Finished calling SOSCCWaitForInitialSync didSync=%i error=%@"
"We failed to sync and now we failed to remove self form circle, nothing good will happen here"
"We failed to sync but managed to get out of the circle, hopefully the next attempt will work"
 didSync=%{public,signpost.telemetry:number1,name=didSync}d 
SynchronizeCircleViews
END [%lld] %fs: SynchronizeCircleViews  didSync=%{public,signpost.telemetry:number1,name=didSync}d 
"Attempting to remove self from circle"
"Removed device from circle successfully"
"Failed to remove self from circle - %@"
"Failed to check for non-view-aware peers with error %@"
"Removed old peers from circle: %@"
"Failed to remove old peers from circle with error %@ (peers: %@)"
"Failed to check for non-view-aware peers before removing them from circle with error %@"
"Calling SOSCCSetUserCredentialsAndDSID"
BEGIN [%lld]: SetUserCredentialsAndDSID  enableTelemetry=YES 
"Failed to call SOSCCSetUserCredentialsAndDSID with error %@"
 Error=%{public,signpost.telemetry:number1,name=Error}d 
SetUserCredentialsAndDSID
END [%lld] %fs: SetUserCredentialsAndDSID  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Security indicated that no credential is needed nor did we force"
"Skipping registering credentials, insufficient parameters"
BEGIN [%lld]: TryUserCredentialsAndDSID  enableTelemetry=YES 
"Registered credentials through try attempt"
"Failed to call SOSCCTryUserCredentialsAndDSID with error %@"
TryUserCredentialsAndDSID
END [%lld] %fs: TryUserCredentialsAndDSID  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Skipping try registering credentials, insufficient parameters"
"Security requires credentials..."
"Obtaining recovery key from security for custodian recovery with UUID: %@"
"Failed to obtain custodian recovery key from security with error: %@"
"Attempting to recover octagon usign custodian recovery key"
cdp: enabled status check
"XPC Error while checking if iCDP is enabled for DSID %@: %@"
"Checking iCDP status for DSID %@ (checkWithServer=%i)"
"iCDP status for DSID %@ is %@"
"Creating context for %@"
"Fetching PRK for primary Account"
"Escrowing a previously backed up PRK"
"Something went wrong... (%@) could not find a stashed token for primary Account: <%@ : %@>"
"Starting token renewal"
"Token completion block called"
"Starting MRK verification for %@"
"MRK verification completion block called"
"CDPCustodianController init is missing required dsid. Unable to process request, problems lie ahead 
"Asking security to create custodian recovery key for %@"
CustodianCreateRecoveryKey
BEGIN [%lld]: CustodianCreateRecoveryKey  enableTelemetry=YES 
END [%lld] %fs: CustodianCreateRecoveryKey  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Error creating custodian recovery key: %@"
"Asking security to delete custodian recovery key for %@"
CustodianDeleteRecoveryKey
BEGIN [%lld]: CustodianDeleteRecoveryKey  enableTelemetry=YES 
END [%lld] %fs: CustodianDeleteRecoveryKey  Error=%{public,signpost.telemetry:number1,name=Error}d 
"Error deleting custodian recovery key: %@"
"Deleted custodian recovery key: for %@"
"CDPCustodianController init is missing required dsid. Unable to process preflight request"
"Error validating custodian recovery key: %@"
"Custodian recovery key is valid for: %@"
"Generating Inheritance access key for CDP account. Beneficiary: %@"
"Generating Inheritance access key for non-CDP account - not saved on OT. Beneficiary: %@"
"Creating the access key for beneficiary: %@"
"Unable to create the access key without access string or data."
"Attempting to recover Octagon with the inheritance key."
"Error validating inheritance key: %@"
"Inheritance key valid for beneficiary: %@"
"Attempted to present CDPUI with incomplete uiProvider: %s"
LocalSecretCollect
BEGIN [%lld]: LocalSecretCollect  enableTelemetry=YES 
END [%lld] %fs: LocalSecretCollect 
"CDPUIProvider does not respond to promptForLocalSecretWithCompletion, falling back to handler: %s"
"CDPUIProvider does not respond to promptForLocalSecretWithHandler either: %s"
"Warning: UI provider %@ does not respond to selector cdpContext:promptForRemoteSecretWithDevices:offeringRemoteApproval:validator:"
"Bailed out of interactive authentication. Preventing appearance of prompt because network is unreachable."
"Attempting to show error: %@"
"Warning: UI provider %@ does not respond to selector cdpContext:showError:withCompletion:"
"Warning: UI provider %@ does not respond to selector cdpContext:showError:withDefaultIndex:withCompletion:"
cdp: post follow up
"XPC Error posting a follow up: %@"
"Posted follow ups (%@) with error: %@"
cdp: clear follow up
"XPC Error cleaning up follow ups: %@"
"Cleared follow ups (%@) with error: %@"
"Invalidating connection"
"iCloud Env missing, bad things to come..."
"Auth Token missing, bad things to come..."
"Base URL missing, bad things to come..."
"Creating the access code from data."
"Creating the access code from string."
"Error creating key from access key string. Error - %@"
"Already sent CDPCA event %@"
"Sending report %@ (time: %f)"
"Attempting to validate secret using validator %@"
"Validator returned response of isValid=%i canRetry=%i error=%@ ... dispatching completion block on to main queue"
"Invoking validateSecret:devices:type:withCompletion: completion block on the main queue"
"Attempting to validate recovery key using validator %@"
"Invoking validateRecoveryKey:withCompletion: completion block on the main queue"
"Attempting to validate custodian recovery info using validator %@"
"InvokingvalidateCustodianRecoveryInfo:withCompletion: completion block on the main queue"
"Requesting approval from another device..."
"Cancelling request for remote approval..."
"Requesting reset of CDP account state..."
"Cancelling validation with error %@"
"Supported Escape Offers: %lu"
cdp/saveTermsAcceptance
"Saving of terms acceptance completed with error %@"
"XPC Error while attempting to save terms info: %@"
cdp/fetchTermsAcceptance
"Fetched terms acceptance completed with error %@ and result %@"
"XPC Error while attempting to fetch terms info: %@"
DataPrivacy: checking status of complete data privacy
"XPC Error while checking status for complete data privacy."
"Error getting status for complete data privacy - %@"
"Status for complete data privacy - %lu"
DataPrivacy: Update data privacy status
"XPC Error while updating data privacy."
"User declined losing access to devices."
"Error updating data privacy state without user's consent on devices that lose access."
"Error updating data privacy status - %@"
"Complete data privacy update."
cdp: Keychain Status Check
"XPC Error while checking if user-visible keychain sync is enabled: %@"
"Checking user-visible keychain sync status"
"User-visible keychain sync status is %@"
cdp: Keychain Status Change
"Setting user-visible keychain sync to %@"
"User-visibile keychain sync set to %@"
"Failed to set user-visibile keychain sync set to %@: %@"
cdp: Remove Legacy Peers
"XPC Error while remove non-view-aware peers: %@"
"Removing non-view-aware peers from the circle"
"Successfully removed non-view-aware peers from the circle"
"Failed to remove non-view-aware peers from the circle: %@"
"Trying to determine manatee availability..."
"Checking security eligibility state..."
"We are HSA2, but Security is not ready, waiting for Security state resolution..."
"We are no longer HSA2, reporting not eligible"
"Processing circle status change to calculate manatee availability"
"Processed circle state change event"
"Processing circle view change event"
"Processed circle view change event"
"All systems go!!! Manatee available"
"All systems are not go... Manatee not available"
"Sending %s, value: %llu"
"Checking local iCDP state..."
"Checking companion circle state..."
cdp/manatee-availability
"Requesting manatee state..."
"Manatee is not available, error: %@"
"Manatee is available"
cdp/statemachine-handle
HandleCloudDataProtectionState
BEGIN [%lld]: HandleCloudDataProtectionState  enableTelemetry=YES 
END [%lld] %fs: HandleCloudDataProtectionState  Error=%{public,signpost.telemetry:number1,name=Error}d 
"State machine completed shouldCompleteSignIn=%@ cloudDataProtectionEnabled=%@ error=%@"
"XPC Error while starting state machine: %@"
"Requesting start of CDP state machine..."
cdp/statemachine-repair
RepairCloudDataProtectionState
BEGIN [%lld]: RepairCloudDataProtectionState  enableTelemetry=YES 
END [%lld] %fs: RepairCloudDataProtectionState  Error=%{public,signpost.telemetry:number1,name=Error}d 
"State machine repair completed didRepair=%@ error=%@"
"XPC Error while repairing state: %@"
"Requesting repair of CDP state..."
"XPC Error while accepting sharing session: %@"
"Requesting start of accepting sharing session..."
"Requesting start of accepting sharing session, skipping escrow fetches..."
"Requesting repair and synchronization of CDP state with Squirrel..."
"Requesting repair of CDP state with Squirrel..."
"XPC Error while attempting to escrow preRecord: %@"
"Informing daemon of attempting to escrow preRecord..."
"XPC Error while updating local secret: %@"
"Informing daemon of local secret change..."
"Attempting to finish offline local secret change..."
"XPC Error while finishing Cyrus secure terms flow: %@"
"Attempting to finish secure terms flow..."
cdp: repair state check
"XPC Error while checking recovery existence: %@"
cdp/generate-rk
"XPC Error while generating a recovery key: %@"
"Attempting to generate a new recovery key"
cdp/delete-rk
"XPC Error while deleting a recovery key: %@"
"Attempting to delete a recovery key"
"XPC Error while fetching recovery key state: %@"
cdp/rk-availability
"Attempting to fetch recovery key state"
"Failed to fetch recovery key availability with error %@"
"Recovery key availability - %@"
"XPC Error while fetching recovery key availability."
"Handling URL action: %@"
cdp: recovery flow
"XPC Error while recovering data: %@"
"XPC Error while checking if the local device has a secret: %@"
"Checking if the local device has a secret"
"Local device DOES have a secret"
"Local device DOES NOT have a secret"
"Reporting current serial number: %@"
"Unable to check self process entitlements without SecTaskRef."
"Error when checking self process for entitlement %@. error:%@"
"Invalidating connection for controller %@"
"Daemon connection invalidated!"
"Daemon connection interrupted!"
"XPC Error from daemon: %@"
B16@?0^^{__CFError}8
kCDPStateRepair
kCDPOfflinePasscodeChange
kCDPRecoveryKeyRegenerate
kCDPUpgradeSetupBioMetrics
kCDPSecureTerms
kCDPConfirmExistingSecret
_followUpType
_shouldNotify
_force
_repairType
<%@: %p - type=%@ shouldNotify=%@ force=%@>
_authenticationResults
_appleID
_password
_passwordEquivToken
_dsid
_isHSA2Account
_didUseSMSVerification
_cachedLocalSecret
_cachedLocalSecretType
__useSecureBackupCachedPassphrase
__alwaysCreateEscrowRecord
__skipEscrowFetches
__recoveryToken
_guestMode
_idmsRecovery
_idmsMasterKeyRecovery
_duplexSession
_resumeContext
_sharingChannel
_type
_findMyiPhoneUUID
_supportsSkipSignIn
_altDSID
_isFederatedAccount
_isBeneficiaryAccount
__ignoreLockAssertErrors
_custodianRecoveryInfo
_beneficiaryAccount
_beneficiaryWrappedKeyData
__supportsCustodianRecovery
_bundleID
CDPContext was missing DSID when CircleProxyImpl was initialized. Its OTClique was not created.
-[CDPCircleProxyImpl waitForUpdate]
v16@?0@"NSError"8
ENABLED
DISABLED
v12@?0B8
v8@?0
personID
escrowProxyUrl
com.apple.Dataclass.Account
iCloudEnv
v24@?0@"CDPContext"8@"NSError"16
v24@?0@"NSDictionary"8@"NSError"16
v24@?0@"OTCustodianRecoveryKey"8@"NSError"16
statusToSet
userAcceptedDevicesToLoseAccountAccess
devicesThatLoseAccountAccessOnEnable
v24@?0@"OTInheritanceKey"8@"NSError"16
-[CDPStateUIProviderProxy cdpContext:promptForAdoptionOfMultipleICSC:]
v20@?0B8@"NSError"12
-[CDPStateUIProviderProxy cdpContext:promptForICSCWithIsNumeric:numericLength:isRandom:validator:]
-[CDPStateUIProviderProxy cdpContext:promptForLocalSecretWithCompletion:]
v24@?0@"CDPLocalSecret"8@"NSError"16
-[CDPStateUIProviderProxy cdpContext:promptForLocalSecretWithHandler:]
-[CDPStateUIProviderProxy cdpContext:beginRemoteApprovalWithValidator:completion:]_block_invoke
-[CDPStateUIProviderProxy cdpContext:promptForInteractiveAuthenticationWithCompletion:]
v16@?0q8
com.apple.CoreCDP.BackupRecovery
backupRecoveryResult
backupRecoveryThroughRemoteSecretDidSucceed
backupRecoveryThroughRemoteSecretDidSucceedWithoutLocalSecret
backupRecoveryThroughRemoteSecretDidCancel
backupRecoveryThroughRemoteSecretDidReset
backupRecoveryThroughRemoteSecretDidFail
joinMethod
attemptedMethods
callingProcessBundleID
iphone
IPHONE
ipad
IPAD
ipod touch
IPOD_TOUCH
macbook
MACBOOK
macbook pro
MACBOOK_PRO
mac pro
MAC_PRO
apple tv
apple watch
WATCH
DEVICE
_PASSWORD
_PASSCODE
Unknown
<%@: %p - hasMID=%@ isBottled=%@ recordID=%@ name=%@ model=%@ platform=%@ date=%@ encodedMetadata=%@>
encodedMetadata
_localizedName
_model
_modelVersion
_modelClass
_platform
_recordID
_machineID
_recordDate
_hasRandomSecret
_hasNumericSecret
_numericSecretLength
_isUsingMultipleiCSC
_remainingAttempts
_serialNumber
_isCurrentDevice
recordInfo
_deviceColor
_enclosureColor
CDPStateError
wasSuccess
errorDomain
errorCode
duration
__OSINSTALL_ENVIRONMENT
__AKSYNCBUBBLE
<%@: %p> EventName: [%@], ReportData: %@
v24@?0B8B12@"NSError"16
v16@?0Q8
v24@?0@"NSString"8@"NSError"16
com.apple.cdp
core
signpost
v24@?0Q8@"NSError"16
v24@?0@"CDPUpdateDataPrivacyContext"8@"NSError"16
A remote secret or recovery key is required to attempt backup recovery (use -remote <secret> OR -mk <recoveryKey>)
Remote secret is invalid... cancelling prompt/validation
Recovery key is invalid... cancelling prompt/validation
An iCSC is required to attempt backup recovery (use -icsc <iCSC>)
ICSC is invalid... cancelling prompt/validation
C5DDE5DD-2FF7-4735-80A3-0108488556DE
com.apple.CoreCDP
com.apple.cdp.cloudDataProtectionEnabled
com.apple.cdp.manatee-availability
com.apple.cdp.manatee-state
command
rejoin
offline-secret-change
regenerate
findMyPhoneIdentity
marketing-name
HWModelStr
ProductType
ProductVersion
BuildVersion
DeviceName
SerialNumber
UserAssignedDeviceName
com.apple.managedconfiguration.profiled-access
DeviceClassNumber
CDPDLocalDeviceSecretProxyImpl
/System/Library/PrivateFrameworks/CoreCDPInternal.framework/CoreCDPInternal
com.apple.cdp.daemon
_validatedSecret
_secretType
_wrappedRKC
_wrappingKey
_custodianUUID
<%@: %p> for UUID: %@
CDPProtectedCloudStorageProxyImpl
CDPProtectedCloudStorageProxy
NSObject
CDPDeviceProtocol
CDPStateUIProviderInternal
CDPLocalDeviceSecretHandlerProtocol
CDPRemoteDeviceSecretValidatorProtocol
CDPRecoveryKeyValidator
CDPAuthProviderInternal
CDPDaemonProtocol
CDPFollowUpContext
NSSecureCoding
NSCoding
HSA2
CDPContext
NSCopying
Account
CDPCircleProxyImpl
CDPDCircleProxy
CDPAccount
CDPAuthProviderProxy
CDPCustodianRecoveryKeyController
CDPUpdateDataPrivacyContext
CDPInheritanceTrustController
CDPStateUIProviderProxy
CDPCABackupRecoveryReporter
CDPFollowUpController
CDPPCSUtilities
CDPLocalizedStringBuilder
CDPDevice
CoreCDP
CDPCAReporter
CDPRemoteDeviceSecretValidator
CDPLocalDeviceSecretHandler
CDPRecoveryKeyValidatorProxyImpl
CDPTermsInfoBackupController
CDPDataPrivacyController
CDPKeychainSync
CDPToolFakeUIProvider
CDPStateUIProvider
CDPRecoveryKeyUIProvider
CDPUtilities
CDPManateeStateController
CDPDAuthListener
CDPDCircleListener
CDPStateController
CDPRecoveryController
CDPLocalDeviceSecretProxyImpl
CDPLocalDeviceSecretProxy
CDPLocalDevice
CDPController
CDPDaemonConnection
CDPLocalSecret
CDPCustodianRecoveryInfo
hasFullCDPSupport
_performPCSBlock:error:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
pcsIdentityCreateWithInfo:error:
pcsIdentitySetupWithInfo:error:
pcsIdentitySetIsInICDPNetwork:options:error:
pcsIdentitySetIsInICDPLocal:error:
pcsIdentitySetCompanionInCircle:error:
pcsIdentityMigrateToiCDPWithInfo:error:
pcsIdentityMigrateToStingrayWithInfo:error:
pcsSynchronizeKeysWithInfo:error:
pcsRestoreLocalBackup:error:
count
countByEnumeratingWithState:objects:count:
localSecretType
prevailingLocalSecretType
hasMixedSecretType
TQ,R,N
TB,R,N
setWithObjects:
cdpContext:promptForLocalSecretWithCompletion:
cdpContext:promptForLocalSecretWithHandler:
cdpContext:beginRemoteApprovalWithValidator:completion:
cdpContext:promptForRemoteSecretWithDevices:offeringRemoteApproval:validator:
cdpContext:promptForICSCWithIsNumeric:numericLength:isRandom:validator:
cdpContext:promptForAdoptionOfMultipleICSC:
cdpContext:promptForInteractiveAuthenticationWithCompletion:
cdpContext:showError:withCompletion:
cdpContext:showError:withDefaultIndex:withCompletion:
cdpContext:presentRecoveryKeyWithValidator:completion:
cdpContext:promptForRecoveryKeyWithValidator:completion:
cdpContext:promptForBeneficiaryAccessKeyWithCompletion:
interfaceWithProtocol:
setClasses:forSelector:argumentIndex:ofReply:
userDidEnterValidSecret:type:
userDidCancelWithError:
setInterface:forSelector:argumentIndex:ofReply:
validateSecret:devices:type:withCompletion:
validateRecoveryKey:withCompletion:
cancelValidationWithError:
approveFromAnotherDeviceWithCompletion:
cancelApproveFromAnotherDevice
resetAccountCDPState
supportedEscapeOfferMaskCompletion:
validateCustodianRecoveryInfo:withCompletion:
supportedEscapeOfferMask
setSupportedEscapeOfferMask:
TQ,N
confirmRecoveryKey:completion:
generateRecoveryKey:
generateRecoveryKeyWithError:
confirmRecoveryKey:error:
arrayWithObjects:count:
setWithArray:
cdpContext:performSilentRecoveryTokenRenewal:
cdpContext:verifyMasterKey:completion:
setWithObject:
handleCloudDataProtectionStateWithContext:uiProvider:completion:
startCircleApplicationApprovalServerWithContext:completion:
repairCloudDataProtectionStateWithContext:uiProvider:completion:
shouldPerformRepairForContext:forceFetch:completion:
recoverAndSynchronizeSquirrelWithContext:uiProvider:completion:
recoverSquirrelWithContext:uiProvider:completion:
localSecretChangedTo:secretType:context:uiProvider:completion:
attemptToEscrowPreRecord:context:completion:
finishOfflineLocalSecretChangeWithContext:uiProvider:completion:
finishCyrusFlowAfterTermsAgreementWithContext:uiProvider:completion:
generateNewRecoveryKeyWithContext:uiProvider:completion:
deleteRecoveryKeyWithContext:uiProvider:completion:
generateRandomRecoveryKeyWithContext:completion:
isRecoveryKeyAvailableWithCompletion:
isICDPEnabledForDSID:checkWithServer:completion:
hasLocalSecretWithCompletion:
isUserVisibleKeychainSyncEnabledWithCompletion:
setUserVisibleKeychainSyncEnabled:withCompletion:
removeNonViewAwarePeersFromCircleWithContext:completion:
performRecoveryWithContext:uiProvider:authProvider:completion:
clearFollowUpWithContext:completion:
postFollowUpWithContext:completion:
statusForDataPrivacyWithCompletion:
updateDataPrivacyWithContext:completion:
saveTermsAcceptance:completion:
fetchTermsAcceptanceForAccount:completion:
setShouldNotify:
setFollowUpType:
contextWithType:
encodeObject:forKey:
encodeBool:forKey:
encodeInteger:forKey:
init
decodeObjectOfClass:forKey:
decodeBoolForKey:
decodeIntegerForKey:
stringWithFormat:
contextForOfflinePasscodeChange
contextForRecoveryKeyRepair
contextForSettingUpBiometrics
contextForSecureTerms
contextForConfirmExistingSecret
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
shouldNotify
force
setForce:
followUpType
.cxx_destruct
_repairType
_shouldNotify
_force
_followUpType
T@"NSString",C,N,V_followUpType
TB,N,V_shouldNotify
TB,N,V_force
setRepairType:
repairType
contextForStateRepair
objectForKeyedSubscript:
boolValue
unsignedIntegerValue
initWithUUIDString:
copy
initWithBase64EncodedString:options:
mutableCopy
removeObjectForKey:
idmsRecovery
findMyiPhoneUUID
cdp_sanitizedCopy
decodeObjectOfClasses:forKey:
appleID
password
passwordEquivToken
dsid
altDSID
setContext:
stringValue
setDsid:
setAltDSID:
duplexSession
resumeContext
sharingChannel
initWithContext:
copyWithZone:
initWithAuthenticationResults:
purgeResumeData
desiresAllRecords
updateWithAuthenticationResults:
augmentWithCredentialsFromContext:
cliqueConfiguration
isPiggybackingRecovery
isTTSURecovery
analyticsReporter
authenticationResults
setAuthenticationResults:
setAppleID:
setPassword:
setPasswordEquivToken:
isHSA2Account
setIsHSA2Account:
isFederatedAccount
setIsFederatedAccount:
isBeneficiaryAccount
setIsBeneficiaryAccount:
didUseSMSVerification
setDidUseSMSVerification:
type
setType:
cachedLocalSecret
setCachedLocalSecret:
cachedLocalSecretType
setCachedLocalSecretType:
guestMode
setGuestMode:
setFindMyiPhoneUUID:
supportsSkipSignIn
setSupportsSkipSignIn:
beneficiaryIdentifier
setBeneficiaryIdentifier:
_authProvider
set_authProvider:
setDuplexSession:
setResumeContext:
failSignInOnError
setFailSignInOnError:
_supportsCustodianRecovery
set_supportsCustodianRecovery:
setSharingChannel:
_useSecureBackupCachedPassphrase
set_useSecureBackupCachedPassphrase:
_alwaysCreateEscrowRecord
set_alwaysCreateEscrowRecord:
_skipEscrowFetches
set_skipEscrowFetches:
_recoveryToken
set_recoveryToken:
_ignoreLockAssertErrors
set_ignoreLockAssertErrors:
setIdmsRecovery:
idmsMasterKeyRecovery
setIdmsMasterKeyRecovery:
custodianRecoveryInfo
setCustodianRecoveryInfo:
beneficiaryWrappedKeyData
setBeneficiaryWrappedKeyData:
bundleID
setBundleID:
_analyticsReporter
_isHSA2Account
_isFederatedAccount
_isBeneficiaryAccount
_didUseSMSVerification
_guestMode
_supportsSkipSignIn
_failSignInOnError
__supportsCustodianRecovery
__useSecureBackupCachedPassphrase
__alwaysCreateEscrowRecord
__skipEscrowFetches
__ignoreLockAssertErrors
_idmsRecovery
_idmsMasterKeyRecovery
_authenticationResults
_appleID
_password
_passwordEquivToken
_dsid
_altDSID
_type
_cachedLocalSecret
_cachedLocalSecretType
_findMyiPhoneUUID
_beneficiaryIdentifier
__authProvider
_duplexSession
_resumeContext
_sharingChannel
__recoveryToken
_custodianRecoveryInfo
_beneficiaryWrappedKeyData
_bundleID
T@"<CDPAuthProviderInternal>",&,N,V__authProvider
T@"KCAESGCMDuplexSession",&,N,V_duplexSession
T@"AKCircleRequestContext",&,N,V_resumeContext
TB,N,V_failSignInOnError
T@"CDPCABackupRecoveryReporter",R,N
TB,N,V__supportsCustodianRecovery
T@"CUMessageSession",&,N,V_sharingChannel
TB,N,V__useSecureBackupCachedPassphrase
TB,N,V__alwaysCreateEscrowRecord
TB,N,V__skipEscrowFetches
T@"NSString",C,N,V__recoveryToken
TB,N,V__ignoreLockAssertErrors
TB,N,V_idmsRecovery
TB,N,V_idmsMasterKeyRecovery
Tq,N,V_type
T@"CDPCustodianRecoveryInfo",&,N,V_custodianRecoveryInfo
T@"NSData",&,N,V_beneficiaryWrappedKeyData
T@"NSString",C,N,V_bundleID
T@"NSDictionary",C,N,V_authenticationResults
T@"NSString",C,N,V_appleID
T@"NSString",C,N,V_password
T@"NSString",C,N,V_passwordEquivToken
T@"NSNumber",C,N,V_dsid
T@"NSString",C,N,V_altDSID
TB,N,V_isHSA2Account
TB,N,V_isFederatedAccount
TB,N,V_isBeneficiaryAccount
TB,N,V_didUseSMSVerification
T@"NSString",C,N,V_cachedLocalSecret
TQ,N,V_cachedLocalSecretType
TB,N,V_guestMode
T@"NSString",C,V_findMyiPhoneUUID
TB,V_supportsSkipSignIn
T@"NSUUID",C,N,V_beneficiaryIdentifier
sharedInstance
contextForPrimaryAccount
preflightContext:
initWithContextData:
dictionaryWithObjects:forKeys:count:
setUseCachedAccountStatus:
fetchCliqueStatus:error:
numberWithInteger:
cdpStatusFromOT:
cachedCliqueStatus:
platformSupportsSOS
cachedSOSCircleStatus:
cdpStatusFromSOS:
_authenticatedCliqueStatus:
_sos_circleStatus:
waitForOctagonUpgrade:
contextType
performedSuccessfulCDPStateMachineRun:reply:
performedFailureCDPStateMachineRun:error:reply:
fetchCliqueStatus:
_cliqueStatus:
_sos_authenticatedCircleStatus:
tryRegisteringCredentials
registerCredentials
nonCachedSOSCircleStatus:
cliqueMemberIdentifier
peerDeviceNamesByPeerID:
waitForInitialSync:
combinedCircleStatus:
removeThisDeviceFromCircle:
leaveClique:
requestToJoinCircle:
joinAfterRestore:
setPasswordEquivalentToken:
setAuthenticationAppleID:
resetProtectedData:error:
fetchUserControllableViewsSyncingEnabled:
allObjects
peersHaveViewsEnabled:error:
copyViewUnawarePeerInfo:
removeFriendsInClique:error:
setUserControllableViewsSyncStatus:error:
_registerCredentialsOnlyIfNeeded:
canAuthenticate
dataUsingEncoding:
setUserCredentialsAndDSID:password:error:
code
tryUserCredentialsAndDSID:password:error:
accountUserKeyAvailable
_pairingChannelContext
setupPairingChannelAsInitiator:
setupPairingChannelAsAcceptor:
hardwareModel
setModel:
modelVersion
setModelVersion:
deviceClass
setModelClass:
osVersion
setOsVersion:
custodianUUID
wrappedRKC
wrappingKey
initWithWrappedKey:wrappingKey:uuid:error:
recoverOctagonUsingCustodianRecoveryKey:custodianRecoveryKey:reply:
combinedCachedCircleStatus:
peerId
peerDeviceNamesByPeerID
didJoinCircleAfterRecovery:
generateRecoveryKeyWithInfo:error:
generateVerifierWithRecoveryKey:error:
synchronizeCircleViews
requestToJoinCircleAfterRestore:
requestToResetProtectedData:
anyPeerHasEnabledViewsInSet:error:
setViewsWithEnableSet:disableSet:
hasNonViewAwarePeers
removeNonViewAwarePeers:
isLastBackupMakingPeer:
registerCredentialsIfMissing
pairingChannelInitiator
pairingChannelAcceptor
waitForUpdate
reportSuccess
reportFailure:
recoverOctagonUsingCustodianInfo:completion:
cdpContext
T@"CDPContext",R,N
sos_circleStatus:
_clique
_cdpContext
T@"CDPContext",R,N,V_cdpContext
isICDPEnabledForDSID:checkWithServer:
synchronousDaemonWithErrorHandler:
connection
invalidate
primaryAppleAccount
username
accountProperties
altDSIDForAccount:
primaryAccountAltDSID
authKitAccountWithAltDSID:
securityLevelForAccount:
primaryAuthKitAccount
isBeneficiaryForAccount:
aa_authToken
propertiesForDataclass:
objectForKey:
dataclassProperties
primaryAccountDSID
longLongValue
numberWithLongLong:
primaryAccountUsername
primaryAccountIsBeneficiary
aa_firstName
aa_fullName
defaultStore
aa_primaryAppleAccount
credentialForAccount:error:
credentialItemForKey:
isICDPEnabledForDSID:
primaryAccountSecurityLevel
authToken
escrowURL
iCloudEnv
primaryAccountFirstName
primaryAccountFullName
primaryAccountStashedPRK
proxyWithAuthProvider:
cdp_errorWithCode:
wrappedKey
initWithWrappedRKC:wrappingKey:custodianUUID:
createCustodianRecoveryKey:uuid:reply:
removeCustodianRecoveryKey:custodianRecoveryKeyUUID:reply:
preflightRecoverOctagonUsingCustodianRecoveryKey:custodianRecoveryKey:reply:
createRecoveryKeyWithContext:forUUID:completion:
deleteRecoveryKeyWithContext:forUUID:completion:
validateRecoveryKey:withContext:completion:
numberWithUnsignedInteger:
unsignedIntValue
initWithStatusToUpdate:
statusToSet
setStatusToSet:
userAcceptedDevicesToLoseAccountAccess
setUserAcceptedDevicesToLoseAccountAccess:
devicesThatLoseAccountAccessOnEnable
setDevicesThatLoseAccountAccessOnEnable:
_userAcceptedDevicesToLoseAccountAccess
_statusToSet
_devicesThatLoseAccountAccessOnEnable
TQ,N,V_statusToSet
TB,N,V_userAcceptedDevicesToLoseAccountAccess
T@"NSArray",&,N,V_devicesThatLoseAccountAccessOnEnable
accessCode
createInheritanceKey:uuid:reply:
generateInheritanceKey:uuid:reply:
initFromAccessKey:
beneficiaryID
recoverOctagonUsingInheritanceKey:inheritanceKey:reply:
removeInheritanceKey:inheritanceKeyUUID:reply:
preflightRecoverOctagonUsingInheritanceKey:inheritanceKey:reply:
createInheritanceKeyWithContext:completion:
recoverOctagonWithContext:inheritanceKey:completion:
isInheritanceAccessKeyValid:
deleteInheritanceAccessKeyWithContext:completion:
validateAccessKey:withContext:completion:
errorWithDomain:code:userInfo:
initWithContext:validator:
initWithContext:handler:
validatedSecret
secretType
cdpContext:beginRemoteApprovalWithValidator:
reachabilityForInternetConnection
currentReachabilityStatus
initWithRemoteObject:
initWithUIProvider:
uiProvider
setUiProvider:
_uiProvider
T@"<CDPStateUIProvider>",&,N,V_uiProvider
initWithEvent:
setObject:forKeyedSubscript:
backupRecoverySetAttemptedMethod:
sendReport
domain
backupRecoveryDidSucceed
backupRecoveryDidSucceedWithoutLocalSecret
backupRecoveryDidCancel
backupRecoveryDidReset
backupRecoverySetJoinFromBundleID:
backupRecoveryDidFailWithError:
_attemptedMethods
dealloc
postFollowUpWithContext:error:
clearFollowUpWithContext:error:
_daemonConn
dictionary
_pcsConfigForPrimaryAccount
addEntriesFromDictionary:
setupDictionaryWithContext:
lowercaseString
containsString:
stringByAppendingString:
builderForKey:
addDeviceClass:
addUnqualifiedDeviceClass:
addSecretType:
localizedString
currentKey
_key
wrappingKeyData
length
wrappedKeyData
initWithWrappedKeyData:wrappingKeyData:uuid:error:
wrappingKeyString
initWithWrappedKeyData:wrappingKeyString:uuid:error:
uuid
initWithBeneficiairyIdentifier:
claimTokenData
setClaimTokenData:
claimTokenString
setClaimTokenString:
setWrappingKeyData:
setWrappingKeyString:
setWrappedKeyData:
wrappedKeyString
setWrappedKeyString:
T@"AKInheritanceAccessKey",R,N
numberWithInt:
localizedName
setLocalizedName:
model
modelClass
platform
setPlatform:
recordID
setRecordID:
machineID
setMachineID:
recordDate
setRecordDate:
hasRandomSecret
setHasRandomSecret:
hasNumericSecret
setHasNumericSecret:
numericSecretLength
setNumericSecretLength:
isUsingMultipleiCSC
setIsUsingMultipleiCSC:
remainingAttempts
setRemainingAttempts:
serialNumber
setSerialNumber:
isCurrentDevice
setIsCurrentDevice:
deviceColor
setDeviceColor:
enclosureColor
setEnclosureColor:
localizedDescription
setLocalizedDescription:
recoveryStatus
setRecoveryStatus:
coolOffPeriod
setCoolOffPeriod:
recordInfo
setRecordInfo:
simplePublicKey
setSimplePublicKey:
_localizedName
_model
_modelVersion
_modelClass
_platform
_recordID
_machineID
_simplePublicKey
_recordDate
_recordInfo
_hasRandomSecret
_hasNumericSecret
_numericSecretLength
_isUsingMultipleiCSC
_remainingAttempts
_deviceColor
_enclosureColor
_serialNumber
_isCurrentDevice
_localizedDescription
_recoveryStatus
_coolOffPeriod
T@"NSString",C,N,V_localizedName
T@"NSString",C,N,V_model
T@"NSString",C,N,V_modelVersion
T@"NSString",C,N,V_modelClass
TQ,N,V_platform
T@"NSString",C,N,V_recordID
T@"NSString",C,N,V_machineID
T@"NSDate",C,N,V_recordDate
TB,N,V_hasRandomSecret
TB,N,V_hasNumericSecret
T@"NSNumber",C,N,V_numericSecretLength
TB,N,V_isUsingMultipleiCSC
TQ,N,V_remainingAttempts
T@"NSString",C,N,V_serialNumber
TB,N,V_isCurrentDevice
TQ,N,V_recoveryStatus
T@"NSNumber",&,N,V_coolOffPeriod
T@"NSString",C,N,V_deviceColor
T@"NSString",C,N,V_enclosureColor
T@"NSDictionary",C,N,V_recordInfo
T@"NSData",C,N,V_simplePublicKey
T@"NSString",C,N,V_localizedDescription
cdp_errorWithCode:userInfo:
isEqualToString:
cdp_isCDPErrorWithCode:
cdp_isLoginHardLimit
cdp_isLoginSoftLimit
cdp_errorWithCode:underlyingError:
machAbsoluteTimeToTimeInterval:
numberWithDouble:
_eventName
_reportData
_initTime
_clock_timebase
_executeSyncOnMainThreadIfNeeded:
isMainThread
_validator
context
_handlerProxy
_context
T@"CDPContext",R,N,V_context
daemonConn
setDaemonConn:
T@"CDPDaemonConnection",&,N,V_daemonConn
daemonWithErrorHandler:
_checkUseConsentForContext:shouldContinue:completion:
_logDataPrivacyStatUpdateError:completion:
_updateDataPrivacyWithContext:completion:
updateDataPrivacyWithContext:shouldContinue:completion:
isUserVisibleKeychainSyncEnabled
initWithValidatedSecret:secretType:
recoveryKey
accessKey
cdpContext:promptToInformUserOfAccountUnlockWithCompletion:
cdpContext:promptToInformUserOfAccountLockOutWithCompletion:
localSecret
setLocalSecret:
remoteSecret
setRemoteSecret:
icsc
setIcsc:
setRecoveryKey:
setAccessKey:
_localSecret
_remoteSecret
_icsc
_recoveryKey
_accessKey
T@"NSString",C,N,V_localSecret
T@"NSString",C,N,V_remoteSecret
T@"NSString",C,N,V_icsc
T@"NSString",C,N,V_recoveryKey
T@"AKInheritanceAccessKey",C,N,V_accessKey
getActivePairedDevice
activeDeviceSelectorBlock
getDevicesMatching:
firstObject
supportsCapability:
activePairedDeviceSelectorBlock
getAllDevicesWithArchivedAltAccountDevicesMatching:
valueForProperty:
isInternalBuild
bundleForClass:
localizedStringForKey:value:table:
isPrimaryAccountHSA2
_checkSecurityEligibility:
_checkCircleStatusWithContext:error:
_didCreateCircleProxy
reportManateeAvailable
reportManateeUnavailable
_sendNotification:withValue:
numberWithUnsignedLongLong:
defaultCenter
stringWithUTF8String:
postNotificationName:object:userInfo:deliverImmediately:
postNotificationName:object:userInfo:
securityLevelChanged:
circleStatusChanged
circleViewStatusChanged
isManateeAvailable:
circleProxy
setCircleProxy:
_circleProxy
T@"<CDPDCircleProxy>",&,N,V_circleProxy
uiProviderProxy
startCircleApplicationApprovalServer:
attemptToEscrowPreRecord:completion:
handleURLActionWithInfo:completion:
repairCloudDataProtectionStateWithCompletion:
finishOfflineLocalSecretChangeWithCompletion:
generateNewRecoveryKey:
handleCloudDataProtectionStateWithCompletion:
startCircleApplicationApprovalServerSkipEscrowFetches:
recoverAndSynchronizeWithSquirrel:
recoverWithSquirrel:
attemptToEscrowPreRecord:preRecordUUID:secretType:completion:
localSecretChangedTo:secretType:completion:
finishCyrusFlowAfterTermsAgreementWithContext:
shouldPerformRepairWithOptionForceFetch:error:
deleteRecoveryKey:
deleteRecoveryKeyWithError:
isRecoveryKeyAvailableWithError:
generateRandomRecoveryKey:
handleURLActionWithInfo:
_sanitizedRecoveryErrorWithError:
authProvider
performRecovery:
hasLocalSecret
_currentProcessCreatesDaemonTypeProxy
_currentProcessHasEntitlement:
supportsSecureBackupRecovery
marketingModel
deviceName
_isHomePod
_localSecretProxy
setDaemonXPCEndpoint:
initWithXpcEndpoint:context:
setAuthProvider:
setUiProviderProxy:
_uiProviderProxy
T@"CDPStateUIProviderProxy",&,N,V_uiProviderProxy
T@"<CDPAuthProvider>",&,N,V_authProvider
shouldDisplayToUser
lock
initWithMachServiceName:options:
initWithListenerEndpoint:
unlock
setInvalidationHandler:
setInterruptionHandler:
setRemoteObjectInterface:
resume
remoteObjectProxyWithErrorHandler:
synchronousRemoteObjectProxyWithErrorHandler:
daemon
daemonXPCEndpoint
_conn
_connLock
_daemonXPCEndpoint
T@"NSXPCListenerEndpoint",&,N,V_daemonXPCEndpoint
integerValue
_validatedSecret
_secretType
T@"NSString",R,N,V_validatedSecret
TQ,R,N,V_secretType
allocWithZone:
UUIDString
_wrappedRKC
_wrappingKey
_custodianUUID
T@"NSData",R,C,N,V_wrappedRKC
T@"NSData",R,C,N,V_wrappingKey
T@"NSUUID",R,C,N,V_custodianUUID
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
^{_PCSIdentitySetData=}32@0:8@16^@24
B40@0:8^{_PCSIdentitySetData=}16@24^@32
B32@0:8^{_PCSIdentitySetData=}16^@24
B32@0:8@16^@24
^{_PCSIdentitySetData=}32@0:8@"NSDictionary"16^@24
B40@0:8^{_PCSIdentitySetData=}16@"NSDictionary"24^@32
B32@0:8@"NSDictionary"16^@24
B32@0:8@?16^@24
v32@0:8@16@?24
v32@0:8@16@24
v40@0:8@16@24@?32
v44@0:8@16@24B32@36
v48@0:8@16B24@28B36@40
v48@0:8@16@24q32@?40
v32@0:8@"CDPContext"16@?<v@?@"CDPLocalSecret"@"NSError">24
v32@0:8@"CDPContext"16@"<CDPLocalDeviceSecretHandlerProtocol>"24
v40@0:8@"CDPContext"16@"<CDPRemoteDeviceSecretValidatorProtocol>"24@?<v@?B@"NSError">32
v44@0:8@"CDPContext"16@"NSArray"24B32@"<CDPRemoteDeviceSecretValidatorProtocol>"36
v48@0:8@"CDPContext"16B24@"NSNumber"28B36@"<CDPRemoteDeviceSecretValidatorProtocol>"40
v32@0:8@"CDPContext"16@?<v@?B@"NSError">24
v32@0:8@"CDPContext"16@?<v@?@"NSDictionary"@"NSError">24
v40@0:8@"CDPContext"16@"NSError"24@?<v@?q>32
v48@0:8@"CDPContext"16@"NSError"24q32@?<v@?q>40
v40@0:8@"CDPContext"16@"<CDPRecoveryKeyValidatorInternal>"24@?<v@?B@"NSError">32
v32@0:8@"CDPContext"16@?<v@?@"AKInheritanceAccessKey"@"NSError">24
v32@0:8@16Q24
v24@0:8@16
v32@0:8@"NSString"16Q24
v24@0:8@"NSError"16
v48@0:8@16@24Q32@?40
v24@0:8@?16
v16@0:8
v24@0:8Q16
v48@0:8@"NSString"16@"NSArray"24Q32@?<v@?BB@"NSError">40
v32@0:8@"NSString"16@?<v@?BB@"NSError">24
v24@0:8@?<v@?B@"NSError">16
v24@0:8@?<v@?Q>16
v32@0:8@"CDPCustodianRecoveryInfo"16@?<v@?B@"NSError">24
@24@0:8^@16
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"NSString"@"NSError">16
@"NSString"24@0:8^@16
B32@0:8@"NSString"16^@24
v32@0:8@"CDPContext"16@?<v@?@"CDPContext"@"NSError">24
v40@0:8@"CDPContext"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v36@0:8@16B24@?28
v56@0:8@16Q24@32@40@?48
Vv24@0:8@?16
v28@0:8B16@?20
v48@0:8@16@24@32@?40
Vv32@0:8@16@?24
v40@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@?<v@?BB@"NSError">32
v40@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@?<v@?B@"NSError">32
v36@0:8@"CDPContext"16B24@?<v@?B@"NSError">28
v56@0:8@"NSString"16Q24@"CDPContext"32@"<CDPStateUIProviderInternal>"40@?<v@?B@"NSError">48
v40@0:8@"NSString"16@"CDPContext"24@?<v@?B@"NSError">32
v32@0:8@"CDPContext"16@?<v@?@"NSString"@"NSError">24
Vv24@0:8@?<v@?B@"NSError">16
v36@0:8@"NSString"16B24@?<v@?B>28
v24@0:8@?<v@?B>16
v28@0:8B16@?<v@?B@"NSError">20
v48@0:8@"CDPContext"16@"<CDPStateUIProviderInternal>"24@"<CDPAuthProviderInternal>"32@?<v@?@"NSDictionary"@"NSError">40
v32@0:8@"CDPFollowUpContext"16@?<v@?B@"NSError">24
Vv24@0:8@?<v@?Q@"NSError">16
Vv32@0:8@"CDPUpdateDataPrivacyContext"16@?<v@?@"CDPUpdateDataPrivacyContext"@"NSError">24
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
v32@0:8@"ACAccount"16@?<v@?@"NSDictionary"@"NSError">24
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v20@0:8B16
@"NSString"
@24@0:8^{_NSZone=}16
q16@0:8
v24@0:8q16
@"CDPCABackupRecoveryReporter"
@"NSDictionary"
@"NSNumber"
@"NSUUID"
@"<CDPAuthProviderInternal>"
@"KCAESGCMDuplexSession"
@"AKCircleRequestContext"
@"CUMessageSession"
@"CDPCustodianRecoveryInfo"
@"NSData"
Q24@0:8^@16
i24@0:8^@16
@32@0:8@16^@24
B24@0:8^@16
B32@0:8@16@24
B28@0:8B16^@20
@"NSDictionary"16@0:8
v24@0:8@"OTClique"16
@"NSString"32@0:8@"NSDictionary"16^@24
@"NSDictionary"32@0:8@"NSString"16^@24
@"OTClique"24@0:8^@16
B32@0:8@"NSSet"16^@24
B32@0:8@"NSSet"16@"NSSet"24
@"KCPairingChannel"16@0:8
v32@0:8@"CDPCustodianRecoveryInfo"16@?<v@?@"NSError">24
@"CDPContext"16@0:8
Q20@0:8i16
Q24@0:8q16
q24@0:8^@16
B20@0:8B16
@"OTClique"
@"CDPContext"
B28@0:8@16B24
@"<CDPAuthProvider>"
@24@0:8Q16
@"NSArray"
@"<CDPStateUIProvider>"
@"CDPDaemonConnection"
@"NSDate"
B24@0:8q16
@24@0:8q16
@32@0:8q16@24
d24@0:8Q16
@"NSMutableDictionary"
{mach_timebase_info="numer"I"denom"I}
@32@0:8@16@24
@"<CDPRemoteDeviceSecretValidatorProtocol>"
@"<CDPLocalDeviceSecretHandlerProtocol>"
@"<CDPRecoveryKeyValidator>"
v40@0:8@16@?24@?32
v40@0:8@"CDPContext"16@"<CDPRecoveryKeyValidator>"24@?<v@?B@"NSError">32
v44@0:8@"CDPContext"16@"NSArray"24B32@"CDPRemoteDeviceSecretValidator"36
v48@0:8@"CDPContext"16B24@"NSNumber"28B36@"CDPRemoteDeviceSecretValidator"40
v32@0:8@"CDPContext"16@"CDPLocalDeviceSecretHandler"24
v32@0:8@"CDPContext"16@"CDPRemoteDeviceSecretValidator"24
v32@0:8@"CDPContext"16@?<v@?>24
@"AKInheritanceAccessKey"
v32@0:8r*16Q24
@"<CDPDCircleProxy>"
v40@0:8@16Q24@?32
@"<CDPLocalDeviceSecretProxy>"
@"CDPStateUIProviderProxy"
@24@0:8@?16
@"NSXPCConnection"
@"NSLock"
@"NSXPCListenerEndpoint"
@32@0:8@16Q24
@40@0:8@16@24@32
