SigningPublicKey with data representation: %@
Cannot pad a nil message.
Error obtaining the padding length: %@
The padding configuration suggested is larger than what can be represented in the payload: %li
An issue occured while generating random bytes for padding with error: %i
Cannot unpad a nil message.
The message is too short (%lu) to contain any padding.
The message is too short (%lu) to contain the indicated padding(%u).
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
formattedSignedData
T@"NSData",R,N,V_formattedSignedData
v8@?0
com.apple.messageprotection
MessageProtection
Failed to initialize a full key: %@
Failed to initiate a full key from the passed serialization.
We failed to initialize a key with error: %@
FullKey with public data representation: %@
keychainTag
T@"NSString",&,V_keychainTag
T@"<P256PrivateKeyProtocol>",R,V_key
keyStore
Ti,R,V_keyStore
v32@?0@"NGMFullPrekey"8Q16^B24
Failure to get the public prekey of a new ephemeral.
Failure to verify the signature for the freshly generated prekey.
Failed to deserialize a prekey containing public key: %@ 
 signature: %@ 
 timestamp: %f 
 because of error: %@
NGMFullPrekey with DHKey: %@
 Public Prekey: %@.
dhKey
T@"DHKey",R,N,V_dhKey
publicPrekey
T@"NGMPublicPreKey",R,N,V_publicPrekey
NGMPrekeySignature
prekeyPublic
T@"NSData",R,N,V_prekeyPublic
timestamp
Td,R,N,V_timestamp
Failed to initialize the public identity.
prekey
T@"NGMFullPrekey",R,N,V_prekey
registrationInfo
T@"NGMPublicDeviceIdentity",R,N,V_registrationInfo
Parameter error, all pointers must be valid. sourceMessage = %p, sender = %p, receiver = %p, protected message = %p.
Unknown format of message to verify and expose
Failed to Encrypt message
Failed to Decrypt message
iMessage Signing Key
iMessage Encryption Key
SecMPFullIdentity
Error generating EC key, OSError in status
Error generating RSA key, OSError in status
Keychain lookup failed
Failed to update protection class
Invalid version of identity
OSStatus returned in error code
NULL parameter passed
<SecMPFullIdentity: %p %02x%02x%02x%02x%02x%02x%02x%02x>
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
Failed during sign and protect test
Failed during verify and expose test
Message was not intact after sign/protect/verify/expose test
Failed to create public key
Unable to generate Full Identity
Failed to export private key
The deserialization of the public fixed device identity failed.
Failed to encrypt to prekey that is no longer valid: %f.
Failed to generate an ephemeral P-256 key for message sealing.
LastPawn-MessageKeys
The encryption of an outgoing message failed.
NGMPublicDeviceIdentity with device signing key: %@ 
 prekey: %@
signingKey
T@"SigningPublicKey",&,N,V_signingKey
T@"NGMPublicPreKey",&,N,V_prekey
Failed to obtain data for the public key.
Failed to initialize compact corecrypto public key.
Failed to initialize masking rng for corecrypto key agreement.
Failure to compute a shared secret with corecrypto.
full_key
T^{ccec_full_ctx=^{ccec_cp}[8C][0{ccec_projective_point=[1Q]}]},V_full_key
upper_buffer_index
TI,V_upper_buffer_index
valid_values_buffer
T*,V_valid_values_buffer
valid_values_buffer_size
TI,V_valid_values_buffer_size
DHKey with public data representation: %@
com.apple.security.messageprotection.error
Message to be encrypted larger than 64K
Size larger than 64K
Failed to read size
Failed to export public key
Invalid input size
Invalid message type
Invalid handling
A NGMFullDeviceIdentity Key generation was requested,                                                              but failed because it was requested with access: %@
The deserialization of the NGMFullDeviceIdentity failed.
Failed to initialize signing keys from NGMFullDeviceIdentity data.
v32@?0@"NSData"8@"NSError"16@?<B@?^@>24
The outer structure of the message is malformed.
The outer structure of the message is missing the ephemeral DH key.
An error occured while decrypting the message, after a valid signature check.
Inside of the incoming payload could not be parsed.
No Replay Counter Found.
An error occured while validating the counter: %@
The message was rejected because of a detected replay.
No key could be found to validate the signature, with optional failure: %@.
None
NGMFullDeviceIdentity with device signing key: %@ 
 Prekeys: %@
deviceSigningKey
T@"SigningKey",&,N,V_deviceSigningKey
devicePrekeys
T@"NSMutableArray",&,N,V_devicePrekeys
Error verifying message because of error %d
Error signing message. OSStatus in error code.
SecMPPublicIdentity
Error creating public identity from bytes
Unable to create Canonical public key
Unable to create public key bytes
Signature larger than available memory
Unable to recreate signature blob.
PKI Encryption failed
<SecMPPublicIdentity: %p %02x%02x%02x%02x%02x%02x%02x%02x>
No error set
Incorrect data for public key: %@
publicKeyRef
T^{__SecKey=},V_publicKeyRef
serializedKey
T@"NSData",&,V_serializedKey
Deserialization of SecKey failed with description: %@
This key is not allowed to do a DH key agreement.
Attempting to sign with a key that doesn't support that operation.
Key Validation String
Failed to test sign with SecKeyP256 during initialization.
Failed to verify signature with SecKeyP256 during initialization.
privateKeyBlob
T@"NSData",R,N,V_privateKeyBlob
publicKey
T@"SecKeyP256Public",&,N,V_publicKey
Discarding this payload because of bad NGM version.
No prekeys were found on the device
Sender and receiver's keys are incorrect.
%@%@
v32@?0@8Q16^B24
Receiver's keys are incorrect.
The receiver's %@ and sender's identity keys are incorrect.
encryption key
signing key
The receiver's signing key is incorrect.
The receiver's encryption key is incorrect.
The sender key is incorrect.
Unhandled key validator case.
DHPublicKey with data representation: %@
SigningKey with public data representation: %@
Failed to deserialize the device public prekey.
Failed to initialize the DHPublicKey for the prekey.
The prekey was incorrectly signed, rejecting.
The ephemeral prekey has expired.
NGMPublicPreKey with DHKey: %@
 Timestamp:%f 
 Signature: %@.
T@"DHPublicKey",R,N,V_dhKey
signature
T@"NSData",R,N,V_signature
/NGMTrustStore-%@.db
/Library/IdentityServices
no error
com.apple.MessageProtection
NGMTrustStore
momd
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
Outgoing
Incoming
destinationHash == %@
Replay Protection Error: Ran out of counters
It appears we have a collision in the hashes.
An issue occured while validating the counter: %@
B16@?0^@8
We have duplicate entries on the incoming validation counter for key: %@ 
,                                 destinationHash: %@.
committing
validating
tag = %@
We have duplicate entries on registered prekey: %@.
registrationDate < %@
v32@?0@"SendingDestination"8Q16^B24
persistentContainer
T@"NSPersistentContainer",&,V_persistentContainer
registering
encrypting to
validating signature of message
date
T@"NSDate",&,V_date
MP MW Ephemeral Device Identity
SecRandomCopyBytes
MP MW Ephemeral Wrapping Key
PublicKey with data representation: %@
T@"<P256PublicKeyProtocol>",&,V_key
%@ %@
prekey_signature
hasDhKey
TB,R,N
T@"NGMPBP256Key",&,N,V_dhKey
Td,N,V_timestamp
prekeySignature
T@"NSData",&,N,V_prekeySignature
prekeys
T@"NGMPBP256Key",&,N,V_signingKey
T@"NSMutableArray",&,N,V_prekeys
message
counter
debug_info
T@"NSData",&,N,V_message
hasCounter
TB,N
TI,N,V_counter
hasDebugInfo
debugInfo
T@"NSData",&,N,V_debugInfo
encryptedPayload
ephemeralPubKey
keyValidator
T@"NSData",&,N,V_encryptedPayload
T@"NSData",&,N,V_ephemeralPubKey
T@"NSData",&,N,V_signature
hasKeyValidator
T@"NSData",&,N,V_keyValidator
signing_key
T@"NSData",&,N,V_signingKey
T@"NSData",&,N,V_prekey
keystore
keyData
hasKeychainTag
T@"NSString",&,N,V_keychainTag
Ti,N,V_keystore
hasKeyData
T@"NSData",&,N,V_keyData
Software
SecKey
CTKTokenOID
(unknown: %i)
RegisteredPreKey
T@"NSString",C,D,N
senders
T@"NSSet",&,D,N
SenderPublicIdentity
T@"NSDate",C,D,N
destinationHash
skippedCounters
T@"NSData",&,D,N
upperBufferIndex
Ti,D,N
messagedKey
T@"RegisteredPreKey",&,D,N
SendingDestination
registrationDate
validOutgoingCounter
%@. The error was not assigned to an NSError.
Unsupported key store: %d
The `CTKTokenOID protobuf passed had a missing keyData field.
Deletion of a keychain item failed for after migration with error: %i
Migration to CTKOID failed.
Migration to CTKOID key storage done.
Failed to sign a new prekey with error: %@
Failed to delete prekey ephemeral key (%@) with error: %@
Failed to generate a key rolling ticket because of failed prekey generation.
Message Encryption: sender/receiver hash: %@ status: %@
Message Encryption: sender/receiver hash: %@ status: success
Message Decryption: sender/receiver hash: %@ status: %@
Message Decryption: sender/receiver hash: %@ status: success
Failed to obtain the persistent ref of key with error code: %i.
Failed to obtain the dataRepresentation of the signing key
Cannot retrieve prekey information because the timestamp of the signature is too old to be registered.
Attempting to register an invalidly signed public key: %@
Error while obtaining counter %@
Failed to generate an ephemeral ECDH key error code: %i
Reached the unimplemented keychainData method on CoreCryptoP256.
Reached the unimplemented sign method on CoreCryptoP256.
Reached the unimplemented initWithData method on CoreCryptoP256.
Message Encryption: nextPowerOfTwo invalid input %llx, %llx
Message Encryption: nextPowerOfTwo invalid input %llx
Signing key generation failed: %@
Failed to deserialize prekey in NGMFullDeviceIdentity initialization.
Starting key migration to CTKOID.
No device prekey is available, rolling should occur.
Failed to get the data representation of the SecKeyP256 public key: %@
Failed to import key from SecKeyCopyExternalRepresentation into ccec: %i
Failed to initialize public key from data with error: %@ for data: %@.
Failed verifying P-256 signature: %@
Failed to establish public DH Key.
Failed to initialize the public key with error: %@
Error initializing SecKeyRef for getting public key with error: %@
Error initializing SecKeyRef for signing with error: %@
Failed to get a Private Key Ref with error while initializing SecKeyP256: %@
No key validator was found.
Failed to get public key of a prekey while checking the key validator.
While checking the key validator, we found the following issues: 
 %@%@%@
Failed to create intermediary directories for NGM database: %@
Failed to initialize NSManagedObjectModel with URL: %@
Failed to load persistent store: %@
Loaded container with description: %@
Database query failed while obtaining sending counter: %@
Sending counter using the previous hashing scheme for existing destinationHash.
An issue occured persisting the managed object context: %@
Validating counter (%i) for destination hash: %@
Counter (%i) is considered valid.
Counter (%i) is considered invalid.
Database Query Failure while obtaining incoming counter: %@
There was an issue obtaining the registered prekey: %@
Successfully fetched counters for destination (%@) and counter is %s valid.
An error happened while %@ the counter: %@
Database query failed while cleaning up old counters: %@
Failed to delete the counters associated with %@: %@
No counters to delete for %@, probably never received any messages to that prekey.
Database query failure while deleting old keys: %@
Failed to delete the counters on the sending flow for keys: %@
The encryption prekey appears to have been signed with a date in the future
The encryption prekey is older (%@) than the last allowed date (%@) for %@ at %@.
The encryption prekey appears to have been signed with a date in the future.                    The time was probably rolled back on the phone.
Removing prekey %@ since it's safe to delete it now (expired).
Time has been rolled back since the last time we registered a key.
It's been a week since the last registration, let's roll.
Attempting to initialize public key with invalid format: %@ and error: %@
zPLR
zPLR
zPLR
zPLR
zPLR
SigningPublicKey
NGMPadding
NGMMessageSignatureFormatter
SignatureFormatter
NSObject
FullKey
MigrationToModernizedKeyStorage
NGMFullPrekey
NGMPrekeySignatureFormatter
NGMKeyRollingTicket
NGMPublicDeviceIdentity
HKDF
NGMMessageFormatter
CoreCryptoP256Private
P256PrivateKeyProtocol
NGMMessageHasher
NGMRollingBitmaskBuffer
DHKey
NGMProtocolVersion
NGMFullDeviceIdentity
MP_AES_CTR
SecKeyP256Public
P256PublicKeyProtocol
SecKeyP256Private
NGMKeyValidator
DHPublicKey
SigningKey
NGMPublicPreKey
NGMReplayManager
NGMTimeBasedEvaluations
PublicKey
NGMPBDevicePreKey
NSCopying
NGMPBFullDeviceIdentity
NGMPBInnerMessage
NGMPBOuterMessage
NGMPBPublicDeviceIdentity
NGMPBPublicDevicePrekey
NGMPBP256Key
RegisteredPreKey
CoreDataProperties
SenderPublicIdentity
SendingDestination
signedData
verifySignature:ofData:
verifySignature:data:
dataRepresentation
stringWithFormat:
verifySignature:formatter:
description
length
initWithLength:
bytes
replaceBytesInRange:withBytes:
mutableBytes
getBytes:range:
subdataWithRange:
padMessage:error:
unpadMessage:error:
mutableCopy
appendData:
init
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
initWithDHOutput:prekeyPub:ephemeralPub:recipientPub:ciphertext:
.cxx_destruct
formattedSignedData
_formattedSignedData
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
generateNewKeyWithAccess:forceNoSEP:error:
alloc
generate
initWithKey:error:
generateWithAccessControl:
keystore
keychainTag
initWithKeychainTag:error:
hasKeyData
keyData
initWithCTKTokenOID:error:
hasKeychainTag
initWithData:error:
numberWithBool:
initWithData:
publicKey
base64EncodedStringWithOptions:
setKeychainTag:
keychainData
setKeyData:
setKeystore:
generateNewKeyWithAccess:error:
initWithProtobufferData:error:
keyIdentifier
protobuffer
keyStore
_keyStore
_key
_keychainTag
deviceSigningKey
devicePrekeys
dhKey
enumerateObjectsUsingBlock:
deleteKeyWithTag:
requiresMigration
postMigrationKeychainCleanup
initToSignKey:
signDataWithFormatter:error:
timestamp
initWithPublicKey:signature:timestamp:
prekeySignature
publicPrekey
setTimestamp:
setDhKey:
signature
setPrekeySignature:
sharedManager
deleteReceivingCountersForKey:
initWithPrekeySignedBy:error:
initWithPBPrekey:error:
pbDevicePrekey
delete
_dhKey
_publicPrekey
nowDate
timeIntervalSince1970
dataUsingEncoding:
dataWithData:
prekeyPublic
dataWithBytes:length:
initWithPublicPrekey:
_timestamp
_prekeyPublic
initWithPrekey:signingKey:
registrationInfo
identityData
prekeyData
initTicketWithSigningKey:error:
publicDeviceIdentity
prekey
_prekey
_registrationInfo
signingKey
initRemotePrekeyWithPublicPrekey:signedBy:error:
setSigningKey:
data
validateFetchedPrekeyTimestamp:forEvaluationType:
setPrekey:
identityWithIdentityData:prekeyData:error:
isValidSigningDestination
keyAgreementWithPublicKey:error:
deriveKeyWithSeed:info:salt:outputSize:
formatOutgoingInnerMessageWithPayload:destinationIdentity:sendingIdentity:error:
encrypt:key:IV:
keyValidatorWithReceiversIdentity:sendersIdentity:
formatOutgoingMessageWithEncryptedPayload:ephemeral:signature:keyValidator:
sealMessage:signedByFullIdentity:error:
_signingKey
dataWithLength:
setEncryptedPayload:
setEphemeralPubKey:
setSignature:
setKeyValidator:
counterForDestinationWithIdentityKey:sendingIdentity:error:success:
setCounter:
setMessage:
initWithKey:
dealloc
signData:error:
keyAgreement:error:
full_key
setFull_key:
_full_key
encryptedPayload
ephemeralPubKey
computeHashForMessage:
valid_values_buffer
valid_values_buffer_size
initWithBytes:length:
initWithData:upperBufferIndex:
processIncomingCounter:
bufferData
upper_buffer_index
setUpper_buffer_index:
setValid_values_buffer:
setValid_values_buffer_size:
_upper_buffer_index
_valid_values_buffer_size
_valid_values_buffer
isVersionSupported:
supportedVersion
setDeviceSigningKey:
setDevicePrekeys:
identityWithAccess:error:
isEqualToString:
array
initWithSigningKey:devicePrekeys:
addObject:
prekeys
count
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
addPrekeys:
lastObject
unsealMessage:signedByPublicIdentity:decryptionBlock:
reverseObjectEnumerator
decrypt:key:IV:
hasCounter
counter
validateIncomingCounter:prekey:publicIdentity:error:
message
keyValidator
isValidKeyValidator:receiversIdentity:sendersIdentity:error:
prekeyShouldBeRolled:
prekeyCanBeDeleted:
deleteExpiredSendingDestinations
removeObjectsInArray:
string
appendString:
identityWithAccess:usageIdentifier:error:
identityWithDataRepresentation:error:
dataRepresentationWithError:
publicDeviceIdentityWithError:
unsealMessage:signedByPublicIdentity:error:
shouldRollEncryptionIdentity
eraseFromKeyChain:
keyRollingTicketWithError:
updateWithRegisteredTicket:error:
_deviceSigningKey
_devicePrekeys
crypt:key:IV:
publicKeyRef
numberWithInt:
initWithSecKeyRef:
setPublicKeyRef:
serializedKey
setSerializedKey:
_publicKeyRef
_serializedKey
objectForKeyedSubscript:
privateKeyBlob
keyAgreement:error:isRetry:
getPrivateKeyRefWithError:
setPublicKey:
_privateKeyBlob
_publicKey
rangeOnPublicKey
versionByte
validatorLength
isEqualToData:
code
dataWithCapacity:
isValidlySignedBy:error:
_signature
processInfo
processName
dbNameFromProcess
arrayWithObjects:
pathWithComponents:
defaultManager
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
stringByAppendingString:
initFileURLWithPath:
initWithURL:
setOption:forKey:
persistentStoreDescriptionWithError:
bundleWithIdentifier:
URLForResource:withExtension:
initWithContentsOfURL:
initWithName:managedObjectModel:
setPersistentContainer:
arrayWithObjects:count:
persistentContainer
setPersistentStoreDescriptions:
loadPersistentStoresWithCompletionHandler:
initWithConcurrencyType:
persistentStoreCoordinator
setPersistentStoreCoordinator:
fetchRequest
computeDestinationHashForOutgoingMessageTo:withLocalKey:
predicateWithFormat:
setPredicate:
executeFetchRequest:error:
objectAtIndexedSubscript:
validOutgoingCounter
setValidOutgoingCounter:
save:
firstObject
initWithContext:
setDestinationHash:
dateWithTimeIntervalSince1970:
setRegistrationDate:
performBlockAndWait:
computeDestinationHashForIncomingMessageFrom:toLocalKey:
processFetchRequestAndValidate:counter:commit:theirIdentity:prekey:error:
skippedCounters
upperBufferIndex
setDate:
registeredPrekeyForNGMPrekey:objectContext:
setMessagedKey:
setSkippedCounters:
setUpperBufferIndex:
setTag:
deleteObject:
oldestDateAllowedToSendTo
_persistentContainer
date
timeIntervalAllowedForAction:
debugDescriptionForAction:
setNowDate:
_date
setKey:
dictionaryRepresentation
dictionary
setObject:forKey:
numberWithDouble:
allocWithZone:
copyWithZone:
mergeFrom:
hasDhKey
readFrom:
writeTo:
copyTo:
_prekeySignature
removeAllObjects
objectAtIndex:
initWithCapacity:
prekeysCount
clearPrekeys
prekeysAtIndex:
prekeysType
setPrekeys:
_prekeys
numberWithUnsignedInt:
setDebugInfo:
setHasCounter:
hasDebugInfo
debugInfo
_counter
_debugInfo
_message
_has
hasKeyValidator
_encryptedPayload
_ephemeralPubKey
_keyValidator
keystoreAsString:
StringAsKeystore:
_keyData
_keystore
fetchRequestWithEntityName:
B32@0:8@16@24
@16@0:8
@32@0:8@16^@24
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSData"16@0:8
@56@0:8@16@24@32@40@48
v16@0:8
@"NSData"
@36@0:8@16B24^@28
i16@0:8
v24@0:8@16
@"<P256PrivateKeyProtocol>"
@"NSString"
@"DHKey"
@"NGMPublicPreKey"
@24@0:8@16
d16@0:8
@"NGMFullPrekey"
@"NGMPublicDeviceIdentity"
@40@0:8@16@24^@32
@32@0:8@16@24
@"SigningPublicKey"
@48@0:8@16@24@32Q40
@48@0:8@16@24@32@40
@48@0:8@16@24@32^@40
@32@0:8@"NSData"16^@24
@"NSData"32@0:8@"NSData"16^@24
@"NSData"32@0:8@"<P256PublicKeyProtocol>"16^@24
@"<P256PublicKeyProtocol>"16@0:8
@24@0:8^{ccec_full_ctx=^{ccec_cp}[8C][0{ccec_projective_point=[1Q]}]}16
^{ccec_full_ctx=^{ccec_cp}[8C][0{ccec_projective_point=[1Q]}]}16@0:8
v24@0:8^{ccec_full_ctx=^{ccec_cp}[8C][0{ccec_projective_point=[1Q]}]}16
^{ccec_full_ctx=^{ccec_cp}[8C][0{ccec_projective_point=[1Q]}]}
@28@0:8@16I24
B20@0:8I16
I16@0:8
v20@0:8I16
*16@0:8
v24@0:8*16
@24@0:8^@16
v40@0:8@16@24@?32
B24@0:8^@16
B32@0:8@16^@24
@"SigningKey"
@"NSMutableArray"
@40@0:8@16@24@32
B32@0:8@"NSData"16@"NSData"24
@24@0:8^{__SecKey=}16
^{__SecKey=}16@0:8
v24@0:8^{__SecKey=}16
^{__SecKey=}
@24@0:8^{__CFString=}16
@36@0:8@16^@24B32
@"SecKeyP256Public"
{_NSRange=QQ}16@0:8
B48@0:8@16@24@32^@40
@40@0:8@16@24d32
@"DHPublicKey"
I48@0:8@16@24^@32^B40
@?44@0:8I16@20@28^@36
B56@0:8@16I24B28@32@40^@48
@"NSPersistentContainer"
d24@0:8Q16
@24@0:8Q16
B32@0:8d16Q24
@"NSDate"
@"<P256PublicKeyProtocol>"
@24@0:8^{_NSZone=}16
v24@0:8d16
@"NGMPBP256Key"
v20@0:8B16
{?="counter"b1}
@20@0:8i16
i24@0:8@16
v20@0:8i16
