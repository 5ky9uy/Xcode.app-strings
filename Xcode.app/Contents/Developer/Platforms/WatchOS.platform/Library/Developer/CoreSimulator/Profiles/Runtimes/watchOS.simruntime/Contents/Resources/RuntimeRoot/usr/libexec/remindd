@(#)PROGRAM:remindd  PROJECT:ReminderKit-
Y@ffffff
main
barebonesDaemon
dataaccess
notifyd
f@RetainedMainDaemonObject
REMAccountType
REMStoreMode
os_unfair_lock_s
_NSRange
REMSmartListType
Scope
NCKDatabaseScope
REMReminderNextThirdsHour
NLTag
NLTagScheme
ComparisonResult
NNSComparisonResult
DACalendarShareResponse
REMAlarmVehicleTriggerEvent
BMMiningTaskCompletionStatus
QualityOfService
NNSQualityOfService
Foundation
NaturalLanguage
CloudKit
@StartMigrationRequest
StartMigrationResponse
UnmigrateRequest
UnmigrateResponse
remindd
OneOf_Source
Credential
OneOf_Result
Details
Error
MigrateRequest
Option
User
MigrateResponse
NextStep
EmptyRequest
BasicResponse
PingRequest
PingResponse
TantorMigrationAPIAsyncClient
TantorMigrationAPIAsync
_StorageClass
remindd
Fields
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
listTypeRawValue
listID
lastAccessedSinceReferenceDate
RDApplicationShortcutAssembly
ChangeTrackingAccountProvider
RDAssignmentNotificationEngine
BabysitTarget
RDDebouncing
LoadFactor
RDDebouncer
RDDebouncerWithNumber
Policy
Interval
REMCDReminder
Completable
RDExchangeAccountComplimentaryService
PersonIDHashing
RDExchangeAccountComplimentaryServiceDelegate
identifier
personID
DataDeserializationError
 @X
DataSerializationError
DataSerializationVersion
 @|W
333333
h"lx
daemonStatus
testInitialSync
remindd
RDXPCDebugPerformer
DebugPerformerManualHashtagLabelUpdaterDelegate
identifier
markedForDeletion
lastAccessedSinceReferenceDate
listTypeRawValue
listID
account
REMCDAccountListData
remindd
RDClientConnectionListener
RDEventStream
RDTimeEventStream
DataAccessSyncPerformer
RDXPCSyncInterfacePerformerFactory
RDXPCSyncInterfacePerformer
CDObjectID
title
completed
dueDate
parentReminder
identifier
list
RDAssignmentNotificationEngineAssembly
remindd
Fields
REMAlarmTriggerCDIngestor
REMAlarmTimeIntervalTriggerCDIngestor
REMAlarmDateTriggerCDIngestor_ObjC
REMAlarmDateTriggerCDIngestor
REMAlarmLocationTriggerCDIngestor
REMAlarmVehicleTriggerCDIngestor
ValueKey
RelationshipKey
RDClientIdentity
REMListsDataViewInvocation_fetchListsInAccount
REMListsDataViewInvocation_fetchListsInGroup
REMListsDataViewInvocation_fetchByObjectIDs
REMListsDataViewInvocation_fetchDefaultList
REMListsDataViewInvocation_fetchDefaultListRequiringCloudKit
REMListsDataViewInvocation_fetchUserSelectableDefaultLists
REMListsDataViewInvocation_dataAccessFetchListsInAccount
REMListsDataViewInvocation_dataAccessFetchByObjectID
REMListsDataViewInvocation_dataAccessFetchByExternalIdentifier
REMListsDataViewInvocation_changeTrackingFetchByObjectIDIncludingConcealed
REMListsDataViewInvocation_userActivityFetchByExternalIdentifier
REMListsDataViewInvocation_debugFetchPhantomLists
identifier
account
parentAccount
remindd
Fields
RDJSONCodable
RDJSONCoder
RDHashtagLabelUpdater
BabysitTarget
ChangeTrackingAccountProvider
RDHashtagLabelUpdaterDelegate
ManualHashtagLabelUpdaterDelegate
RDHashtagLabelRepairer
reminder
identifier
sharedToMeReminderCKIdentifier
canonicalName
hashtags
hashtagLabel
account
name
creationDate
account.identifier
HashtagTombstone
REMCDAlarmTimeIntervalTrigger
REMCDAlarmDateTrigger
REMCDAlarmLocationTrigger
REMCDAlarmVehicleTrigger
REMAlarmCDIngestor
AlarmTriggerRepresentable
RelationshipKey
ValueKey
RDReminderManualSortIDAdapter
reminder.account.identifier
RDDARequestsQueueDelegate
RDDARequestsQueue
REMSmartListStorageCDIngestor
RelationshipKey
ValueKey
hashtags
alarmStorage
flagged
priority
displayDateDate
displayDateIsAllDay
list
completed
identifier
ReminderIDsWithMatchingHashtagsProvider
REMContactRepresentation
remindd
Fields
RDXPCSuggestedAttributesPerformer
MLModels
ConfigurationSource
RDDispatchQueue_ObjC
RDAlarmCoreSuggestionsConsumer
RDApplicationShortcutUpdater
RDTodayNotificationAssembly
xpc_event
RDXPCEventInterface
RDXPCEventStream
SystemXPCEventInterface
Token
AlarmHandler
Alarm
identifier
DistributedEvaluation
RDStoreControllerExporter
AlarmDate
List
FuzzedEmbeddings
Account
Reminder
ExportResult
CodingKeys
none
enter
leave
RDNotifydEventStream
NotificationName
RDContactInteractionAlarmProducerDataSource
RDContactInteractionAlarmProducerSessionManager
RDContactInteractionAlarmProducer
accountID
orderedIdentifierMap
RDFirstUnlockManager
UnlockState
RDAlarmNotificationConsumer
BannerBehavior
REMNSPersistentHistoryTracking
REMReminderStorageCDIngestor
CDAuxiliaryReminderChangeInfo
RelationshipKey
ValueKey
REMCDManualSortHint
ListType
ModelSkippedError
SampleTooSmallError
KeyTuple
REMAccountStorageCDIngestor
RelationshipOrderingValueKey
OrderableRelationshipKey
RelationshipKey
ValueKey
RDBeforeFirstUnlockNotificationEngine
REMAccountsDataViewInvocation_fetchAll
REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount
REMAccountsDataViewInvocation_fetchByObjectID
REMAccountsDataViewInvocation_fetchByExternalIdentifier
REMAssignmentCDIngestor
identifier
RelationshipKey
ValueKey
state
isTerminated
RDMigrationClient
State
accountIdentifier
RDDifferentialPrivacyRecorder
type
account.identifier
sharedToMeReminderCKIdentifier
reminder
reminder.ckIdentifier
hashtagLabel
RDStoreControllerCloudKitNetworkActivityObserver
RDDataStoreApplicationShortcutListProvider
remindd
RDManagedObjectIDCache
RDPrimaryActiveCloudKitAccountManagedObjectIDCache
RDPredefinedManagedObjectIDCache
account.identifier
name
remindd
Fields
identifier
parentReminder
account.identifier
title
dueDate
allDay
timeZone
remindd
Fields
StringType
TypedPredicate
REMHashtagCDIngestor
RelationshipKey
ValueKey
RDXPCActivityTimeEventStream
Name
REMRecurrenceRuleCDIngestor
DayOfWeek
RelationshipKey
ValueKey
CodingKeys
remindd
BaseFields
URLFields
FileFields
ImageFields
RDLaunchAnalytics
title
RDWidgetRefreshEngine
RDXPCChangeTrackingPerformer
CDIngestionCoordinator
CDAuxiliaryChangeInfo
CoreDataType
REMAlarmTimeIntervalTrigger
REMAlarmDateTrigger
RDTimeAlarmProducerDataSource
RDFireDateSource
RDTimeAlarmProducer
RDXPCDaemonProtocol
RDXPCDaemon
RDCoreSuggestionsHandling
RDCoreSuggestionsController
identifier
list.markedForDeletion
list.parentList
list.parentList.markedForDeletion
parentReminder
parentReminder.markedForDeletion
completed
completionDate
account.identifier
account.inactive
list.daIsEventOnlyContainer
list.daIsNotificationsCollection
list.identifier
recurrenceRules
displayDateDate
children
flagged
daCalendarItemUniqueIdentifier
creationDate
lastModifiedDate
title
allDay
alarmStorage
contactHandles
dueDate
externalIdentifier
parentReminder.identifier
list
remObjectID
self
priority
RelationshipKey
ConcealedPredicate
CompletionPredicate
Predicates
type
identifier
inactive
externalIdentifier
name
alarmProalarmProducer
RDAlarmProducerDataSource
identifier
alarm.reminder.account.identifier
alarm.reminder.list.daIsEventOnlyContainer
alarm.reminder.list.daIsNotificationsCollection
account.inactive
alarm.reminder.completed
account.identifier
alarm.reminder.identifier
alarm.originalAlarmUID
alarm.ckDirtyFlags
REMEventKitBridgingDataViewInvocation_fetchLists
REMEventKitBridgingDataViewInvocation_fetchReminders
REMEventKitBridgingDataViewInvocation_fetchIncompleteRemindersWithDueDate
REMEventKitBridgingDataViewInvocation_fetchCompletedRemindersWithCompletionDate
remindd
Fields
hashtags
canonicalName
name
recencyDate
CDIngestableKey
CDIngestor
CDIngestableStorageType CDIngestableCoreDataType CDIngestableValueKey CDIngestableRelationshipKey CDIngestableOrderableRelationshipKey CDIngestableRelationshipOrderingValueKey
NoRelationshipOrderingValueKey
CDIngestorPredefinedIngestableKey
NoOrderableRelationshipKey
REMCalDAVNotificationCDIngestor
RelationshipKey
ValueKey
RDStoreControllerNotificationCenter
CollectAndCoalescedOutputWithInputCount
Output
FireValue
Observer
Token
CollectAndCoalescedSetOfFireValuesWithInputCount
EntityFilterOption
RDBogusCalendarCleaner
RDDecodeFromJSONDataValueTransformer
REMDaemonUserDefaults
RDUserInteractionSessionManagerUserDefaults
RDUserInteractionSessionManager
RDAccountInitializer
DidCompleteInitializeAllAccountsObserver
dueDate
list
priority
creationDate
title
RDReminderManualSortIDCacheContextDelegate
RDReminderManualSortIDCacheContext
RDReminderManualSortIDCacheReadOnlyContext
RDReminderManualSortIDCacheReadAndWriteContext
REMShareeCDIngestor
RelationshipKey
ValueKey
RDTransactionRegistrar
Reader
Writer
RDChannel
 @=Q
REMRemindersDataViewInvocation_fetchByListID
REMRemindersDataViewInvocation_fetchByParentReminderID
REMRemindersDataViewInvocation_fetchByParentReminderIDs
REMRemindersDataViewInvocation_fetchReminderIDsByParentReminderID
REMRemindersDataViewInvocation_fetchByObjectID
REMRemindersDataViewInvocation_fetchByPredicateDescriptor
REMRemindersDataViewInvocation_fetchByExternalIdentifier
REMRemindersDataViewInvocation_fetchByDACalendarItemUniqueIdentifier
REMRemindersDataViewInvocation_fetchRemindersCountByListID
REMRemindersDataViewInvocation_fetchRemindersCountByParentReminderID
REMAssignmentsDataViewInvocation_fetchByObjectID
REMHashtagsDataViewInvocation_fetchByObjectID
identifier
account
reminder
dueDate
list
priority
creationDate
title
RDMergePolicy
REMDaemonUserDefaults
REMAccountsListDataViewUserDefaults
PolymorphicListItem
Model
name
Cache
CodingKeys
RDApplicationShortcutEngineInterface
RDApplicationShortcutEngine
REMManualOrderingCDIngestor
RelationshipKey
ValueKey
REMCDURLAttachment
REMCDFileAttachment
remindd
REMAttachmentRepresentable
REMAttachmentCDIngestor
REMFileAttachmentCDIngestor
REMImageAttachmentCDIngestor
REMURLAttachmentCDIngestor
RelationshipKey
ValueKey
remindd
RDClientConnection
RDClientConnectionDelegate
RDThrottler
RDApplicationShortcutListProvider
RDApplicationShortcutListProviderDelegate
RDCoreBehaviorModel
RDCoreBehaviorModelTrainingDelegate
Result
Prediction
Context
Feedback
CodingKeys
RDVehicleAlarmProducerDataSource
RDVehicleAlarmProducer
REMCRMergeableOrderedSet
REMCRMergeableStringDocument
remindd
REMCDObjectFields
REMCDObjectResolutionTokenFields
REMCRSerializable
Fields
RDAccountStoresRemovalEventHandler
RDXPCIndexingPerformer
RDAccountDataMover
RDReminderDataCopier
RDReminderDataICSCopier
RDReminderDataCloudKitCopier
RDReminderDataExchangeCopier
Statistics
REMListFetchExecutor
list
parentAccount
name
RDDynamicSignificantTimeNotificationEngineEventSetter
RDDynamicSignificantTimeNotificationEngine
XPCEventSetter
CDFetching
locationManager
remindd
RDLocationManagerDelegate
RDLocationManagerType
RDLocationManager
RDMentionsExtractor
ExtractionResult
Candidate
REMColor
RDXPCBarebonesDaemon
REMSmartListsDataViewInvocation_fetchSmartList
REMSmartListsDataViewInvocation_fetchCustomSmartListsInAccount
REMSmartListsDataViewInvocation_fetchCustomSmartListsInGroup
RDAccountPropertiesNotifier
REMTipKitDataViewInvocation_fetchListsCount
REMTipKitDataViewInvocation_fetchListsWithCustomBadgeCount
REMTipKitDataViewInvocation_fetchUncompletedRemindersCount
REMTipKitDataViewInvocation_fetchCompletedRemindersCount
REMTipKitDataViewInvocation_fetchCompletedRemindersCountInList
REMTipKitDataViewInvocation_fetchCustomSmartListsCount
REMTipKitDataViewInvocation_fetchHashtagsCount
Fields
remindd
RDUserNotificationPresenting
RDUserNotificationCenterDelegate
RDUserNotificationCenter
RDAccountManualSortID
identifier
type
personID
personIDSalt_v1
children
identifier
completed
priority
displayDateDate
title
name
list
parentReminder
displayDateIsAllDay
displayDateTimeZone
ListKey
SortingStyle
sharedListPropertyKey
Utilities
RDReplicaManagerUtilities
identifier
RDReplicaManagerPayload
RDReminderManualSortIDCache
parentAccount
parentList
parentList.markedForDeletion
isGroup
account.identifier
account.inactive
daIsEventOnlyContainer
daIsNotificationsCollection
badgeEmblem
name
identifier
parentAccount.identifier
sharingStatus
externalIdentifier
sharees
parentList.identifier
remObjectID
self
RDDACalDAVShareRequestHandler
RDDaemonController
RDDARequest
remindd
RDXPCStorePerformer
identifier
REMDaemonUserDefaults
ICCloudConfiguration
RDSyncPollerUserDefaults
RDSyncPollerConfiguration
RDSyncPoller
canonicalName
name
hashtags
ValidationError
RDManualSortHint
REMDaemonUserDefaults
RDICCloudConfigurationUpdaterUserDefaults
RDICCloudConfigurationUpdater
RDObjectDescription
REMAlarmLocationTrigger
RDLocationAlarmProducerDataSource
RDCLRegionSource
RDLocationAlarmProducer
RDAccountPersonIDSaltObserver
AccountInfo
SaltValueError
RDManualSortIDHashKeyProviding
_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider
RDManualSortIDUnitTestHashKeyProvider
RDDynamicXPCActivity
Criteria
CompletionStatus
Identifier
ProtectionClass
MotionState
Priority
IntervalInfo
RDDisplayDateUpdater
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
RDCache
RDCacheContext
RDCacheReadOnlyContext
KeyType ObjectType
RDCacheReadAndWriteContext
ReminderIDsMergeableOrderingHelper
ReminderIDsMergeableOrdering
completionDate
dueDate
RDDaemonProtocol
RDDaemon
RDBarebonesDaemon
REMListStorageCDIngestor
identifier
parentReminder
creationDate
icsDisplayOrder
RelationshipOrderingValueKey
OrderableRelationshipKey
RelationshipKey
ValueKey
accountUtils
RDAccountUtils
InactivatedICloudCalDavDataMover
LocalDataToICloudMover
AccountInfo
ACAccountProperty
NoInactivatedICloudCalDavREMAccountError
DidNotChooseToMigrationCloudKitError
NoCloudKitREMAccountError
LocalAccountIsEmptyError
TargetAccountIsNonEmptyError
NoICloudREMAccountError
status
account.identifier
reminder.completed
reminder.identifier
reminder.completionDate
Predicates
REMReminderFetchExecutor
dueDate
list
priority
creationDate
title
REMSiriSearchLimitedDataViewInvocation_fetchReminders
remindd
LocationFields
RDStoreControllerAnalytics
REMDaemonUserDefaults
RDSuggestedAttributesAutoTrainerPersistentStorage
RDSuggestedAttributesAutoTrainer
RDInvocable
RDStoreControllerInvocable
RDSwiftInvocableProtocol
Performer
AnyRDSwiftInvocableProtocol
smartListType
parentAccount.identifier
parentList.identifier
parentList
name
identifier
parentAccount
displayDateDate
type
remindd
Fields
NSXPCConnection
RDClientAccessLevelTruthSource
RDClientAccessLevel
REMResolutionToken
REMResolutionTokenMap
RDTodayNotificationEngine
RDReminderManualSortID
account
identifier
ckIdentifier
externalIdentifier
alarmEngine
RDAlarmProducing
RDAlarmConsuming
RDAlarmProducerDelegate
RDAlarmEngine
RDProducerAlarmOrigin
RDDataSourceAlarm
RDProducerAlarm
RDProducerAlarmType
RDDatabaseSaver
remindd
RDDataAccess
RDDataAccessREMStoreProvider
RDDataAccessUserNotificationPresentingProvider
InvernessClientLocal
HTTPClient
HTTPError
Codeagent_ErrorCode
Codeagent_CodeServiceRequest
ServiceType
ContainerType
DatabaseType
ServiceClientConfig
ClientConfig
AccountConfig
RequestContext
Codeagent_CodeServiceResponse
Codeagent_Error
Codeagent_InitializeContainerRequest
Codeagent_InitializeContainerResponse
Codeagent_StopContainerRequest
Codeagent_StopContainerResponse
Codeagent_StopAllContainerRequest
Codeagent_StopAllContainerResponse
Codeagent_CheckContainerHealthRequest
Codeagent_CheckContainerHealthResponse
_StorageClass
InvernessClientError
Ckdbcore_CKDBRequestContext
Ckdbcore_ResolvedContainer
Ckdbcore_ResolvedUser
Ckdbcore_RequestOperation
Header
Database
_StorageClass
InvernessClient
Ckcode_SerializationFormat
DatabaseType
InvernessClient
Invocable
organization
CloudKitWS
CloudKitWSError
Environment
Error
Credentials
TextFormatEncoder
AnyExtensionField
ExtensionField
ValueType
OptionalExtensionField
RepeatedExtensionField
PackedExtensionField
OptionalEnumExtensionField
RepeatedEnumExtensionField
PackedEnumExtensionField
OptionalMessageExtensionField
RepeatedMessageExtensionField
OptionalGroupExtensionField
RepeatedGroupExtensionField
JSONEncodingOptions
SelectiveVisitor
BinaryDecodingError
JSONScanner
BinaryDecodingOptions
Google_Protobuf_Duration
SwiftProtobuf
_ProtoNameProviding
JSONEncodingError
UnknownStorage
JSONDecodingError
JSONDecoder
Google_Protobuf_Syntax
Google_Protobuf_Type
Google_Protobuf_Field
Kind
Cardinality
Google_Protobuf_Enum
Google_Protobuf_EnumValue
Google_Protobuf_Option
_StorageClass
DoubleFormatter
Google_Protobuf_Empty
ExtensionMap
Message
_MessageImplementationBase
JSONMapEncodingVisitor
JSONDecodingOptions
BinaryEncodingVisitor
BinaryEncodingMessageSetVisitor
AnyUnpackError
TextFormatDecoder
WireFormat
ExtensionFieldValueSet
Decoder
AnyMessageExtension
MessageExtension
Google_Protobuf_DoubleValue
Google_Protobuf_FloatValue
Google_Protobuf_Int64Value
Google_Protobuf_UInt64Value
Google_Protobuf_Int32Value
Google_Protobuf_UInt32Value
Google_Protobuf_BoolValue
Google_Protobuf_StringValue
Google_Protobuf_BytesValue
BinaryDecoder
TextFormatDecodingError
HashVisitor
BinaryEncodingError
Internal
FieldType
BaseType
MapKeyType
MapValueType
ProtobufFloat
ProtobufDouble
ProtobufInt32
ProtobufInt64
ProtobufUInt32
ProtobufUInt64
ProtobufSInt32
ProtobufSInt64
ProtobufFixed32
ProtobufFixed64
ProtobufSFixed32
ProtobufSFixed64
ProtobufBool
ProtobufString
ProtobufBytes
Visitor
Google_Protobuf_Timestamp
_CustomJSONCodable
Google_Protobuf_SourceContext
Google_Protobuf_Api
Google_Protobuf_Method
Google_Protobuf_Mixin
_StorageClass
JSONEncoder
AnyMessageStorage
InternalState
JSONEncodingVisitor
Google_Protobuf_FieldMask
Enum
TextFormatScanner
ExtensibleMessage
TextFormatEncodingVisitor
SimpleExtensionMap
BinaryEncodingSizeVisitor
BinaryEncodingMessageSetSizeVisitor
InternPool
_NameMap
NameDescription
Name
Names
NameString
Google_Protobuf_NullValue
Google_Protobuf_Struct
Google_Protobuf_Value
OneOf_Kind
Google_Protobuf_ListValue
_StorageClass
BinaryEncoder
Google_Protobuf_Any
options
setOptions:
addPrivateOptions:
rem_shouldUseShortCompleteString
objectForKeyedSubscript:
integerValue
migrateStore:
setObject:forKeyedSubscript:
initWithConcurrencyType:
persistentStoreCoordinator
setPersistentStoreCoordinator:
setTransactionAuthor:
fetchRequest
setPropertiesToFetch:
arrayWithObjects:count:
setAffectedStores:
setFetchBatchSize:
predicateWithFormat:
setPredicate:
initWithFetchRequest:
setResultType:
executeRequest:error:
save:
performBlockAndWait:
result
unsignedIntegerValue
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
migrateStoreIfNeeded:metadata:
container
appendString:
stringByAppendingString:
ic_prettyDescriptionWithTabLevel:
appendFormat:
enumerateKeysAndObjectsUsingBlock:
ic_setNonNilObject:forKey:
ic_addKey:forNonNilObject:
isConnectedToAccountObject:
fetchRequestWithEntityName:
canonicalName
T@"NSString",C,D,N
firstOccurrenceCreationDate
T@"NSDate",C,D,N
name
recencyDate
hashtags
T@"NSSet",&,D,N
callStackSymbols
isAbstract
cdEntityName
utility
databaseScope
Ts,D,N
ownerName
serverChangeTokenData
T@"NSData",&,D,N
zoneName
account
T@"REMCDAccount",&,D,N
badgeEmblem
color
T@"REMColor",&,D,N
filterData
showingLargeAttachments
TB,D,N
smartListType
sortingStyle
parentAccount
parentList
T@"REMCDList",&,D,N
init
setTarget:
setSelector:
setDelay:
setWaitToFireUntilRequestsStop:
setCallOnMainThread:
setRequestQueue:
requestQueue
_cancelFireRequests
dealloc
waitToFireUntilRequestsStop
fireBlock
setFireBlock:
callTargetSelector
callOnMainThread
delay
isMainThread
target
selector
methodForSelector:
initWithTarget:selector:delay:waitToFireUntilRequestsStop:callOnMainThread:
requestFire
fireImmediately
isScheduledToFire
cancelPreviousFireRequests
.cxx_destruct
_waitToFireUntilRequestsStop
_callOnMainThread
_target
_selector
_delay
_requestQueue
_fireBlock
T@,W,N,V_target
T:,N,V_selector
TB,N,V_waitToFireUntilRequestsStop
TB,N,V_callOnMainThread
T@"NSObject<OS_dispatch_queue>",&,N,V_requestQueue
T@?,C,N,V_fireBlock
Td,V_delay
TB,R,N
cloudkit
isDummyStoreURL:
migrateStore:metadata:
setFetchLimit:
executeFetchRequest:error:
count
firstObject
identifier
UUIDString
setThrottlingLevels:
setResetInterval:
loadSavedPolicyState
policyStartDate
timeIntervalSinceNow
resetInterval
resetPolicy
startPolicyResetTimer
policyResetTimer
invalidate
setPolicyResetTimer:
defaultCenter
removeObserver:
currentBatchCount
setCurrentBatchCount:
currentLevel
numberOfBatches
numberWithUnsignedInteger:
stringValue
currentLevelIndex
throttlingLevels
changeLevelIfNecessary
savePolicyState
setCurrentLevelIndex:
postNotificationName:object:
batchInterval
objectAtIndexedSubscript:
date
setPolicyStartDate:
isValid
dateByAddingTimeInterval:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
sharedUserDefaults
removeObjectForKey:
objectForKey:
doubleForKey:
dateWithTimeIntervalSinceReferenceDate:
setObject:forKey:
timeIntervalSinceReferenceDate
setDouble:forKey:
resetSavedPolicyState
initWithThrottlingLevels:resetInterval:
incrementBatchCount
_throttlingLevels
_resetInterval
_currentBatchCount
_currentLevelIndex
_policyStartDate
_policyResetTimer
TQ,N,V_currentBatchCount
T@"NSArray",&,N,V_throttlingLevels
TQ,N,V_currentLevelIndex
T@"ICCloudThrottlingLevel",R,N
Td,V_resetInterval
T@"NSDate",&,V_policyStartDate
T@"NSTimer",&,V_policyResetTimer
Td,R,N
utilityQueue
setOperationQueue:
operationQueue
setMaxConcurrentOperationCount:
processingQueue
setProcessingQueue:
setObjectIDsToProcess:
setZoneIDsNeedingToBeSaved:
setObjectIDsToRetry:
dictionary
setRetryCountsByOperationType:
initWithSyncReason:
setLastSyncMetrics:
setDiscretionaryNetwork:
setHasRetryTimer:
initWithCapacity:
setDatabaseScopeStringsNeedingRetryFetchChanges:
isInternetReachable
setWasInternetReachable:
setLastSyncSinceInternetReachable:
sharedSettings
hasOptions:
supportsSyncingToCloudKit
setSupportsCloudKitSyncing:
setShouldUnregisterBuddy:
setDisabled:
setDisabledInternal:
setQualityOfService:
setDiscretionaryNetworkBehavior:
discretionaryNetwork
setAutomaticallyRetryNetworkFailures:
setTimeoutIntervalForResource:
setFetchingEnabled:
setDidCheckForLongLivedOperations:
initWithDebouncingInterval:queue:handler:
setApsNotificationHandlingDebouncer:
sharedConfiguration
accountChangedDebouncerInterval
setAccountChangedNotificationHandlingDebouncer:
loadZoneFetchState
contextDidSave:
addObserver:selector:name:object:
setRecognizedCloudObjectClasses:
sharedInstance
setAppleAccountUtilities:
defaultCloudContainer
setContainer:
setSourceApplicationBundleIdentifier:
reachabilityChanged:
sharedReachabilityForInternetConnection
cloudKitAccountChanged:
setIsSystemAvailableForSyncing:
bootstrapSyncingOnLaunchIfSystemReady
waitForSyncEngineSystemAvailabilityBlockingQueue:completionQueue:completionBlock:
setPendingAccountInitializerCompleteOnLaunch:
accountInitializerDidCompleteOnLaunchObserver
unobserve
setAccountInitializerDidCompleteOnLaunchObserver:
initWithHandler:queue:
observe
updateConfiguration
updateSelectorDelayers
handleUnrecoverableError
addObserver:forKeyPath:options:context:
setDidAddObservers:
addStateHandler
setBuddyStateObserver:
setHasPassedBuddy:
hasPassedBuddy
registerForBuddy
isSystemAvailableForSyncing
pendingAccountInitializerCompleteOnLaunch
loadSubscribedSubscriptionIDs
setupAPSConnection
adjustAPSNotificationDebouncerInterval
observePersonIDSaltChanges
retryProcessingCloudObjects
updateCloudContextStateWithReason:
initWithQueue:
pq_unregisterForBuddy
buddyStateObserver
setBuddyDidFinishHandler:
start
stop
length
storeController
newBackgroundContextWithAuthor:
primaryCloudKitAccountInContext:
personID
hashedAccountPersonIDWithSalt:
setPersonID:
base64EncodedStringWithOptions:
ic_saveWithLogDescription:
personIDSalt
accountPersonIDSaltObserver
uuid
savePrimaryCloudKitAccountPersonIDHashedWithSalt:
InitiallyNilError
resetPrimaryCloudKitAccountPersonIDWithError:
observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
setAccountPersonIDSaltObserver:
context
cloudKitAccountsInContext:
countByEnumeratingWithState:objects:count:
newCloudContainerForAccountID:
copy
containersByAccountID
mutableCopy
shouldUnregisterBuddy
didAddObservers
removeObserver:forKeyPath:
cancelPreviousPerformRequestsWithTarget:
retryTimer
processingSelectorDelayer
pollingSelectorDelayer
newBackgroundContextWithAuthor:enableQueryGenerationToken:
contextWithQueryGenerationTokenEnabled:
batchFetchHelperWithContext:
setBatchFetchHelper:
contextWithBatchFetchHelper
fetchBatchSize
fetchCacheCountLimit
initWithQueue:managedObjectContext:batchSize:cacheCountLimit:
userInfo
isEqualToString:
appleAccountUtilities
unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:
accountStatus
syncDisabledByServer
isCloudKitAccountAvailable
isDisabled
isDisabledInternal
stringWithFormat:
supportsCloudKitSyncing
isCloudKitAccountAvailableRequiringActive:
isReadyToSyncWithActiveAccountAvailable:
_isCloudKitAccountAvailableWithManagedObjectContext:requireActive:
inactive
minimumClientVersion
componentsSeparatedByString:
intValue
processInfo
isOperatingSystemAtLeastVersion:
setSyncDisabledByServer:
operatingSystemVersionString
disableCloudSyncingIfCurrentVersionNotSuppported
throttlingPolicy
processPendingCloudObjects
setProcessingSelectorDelayer:
pollingInterval
deleteAllServerChangeTokens
syncWithReason:discretionary:completionHandler:
systemBuildVersion
recordTypes
_cloudObjectClassesByRecordType
array
addObjectsFromArray:
initWithZoneName:ownerName:
wasInternetReachable
lastSyncSinceInternetReachable
reachabilityChangeSyncThrottleInterval
updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:
accountChangedNotificationHandlingDebouncer
setWithObject:
updateAccountStatusWithCompletionHandler:
fire:completion:
operationCount
string
operations
ic_loggingDescription
dataWithPropertyList:format:options:error:
bytes
ic_loggingIdentifier
ic_loggingValues
addStateHandlerWithName:stateBlock:
persistenceCloudSchemaVersionWithContext:
daemonUserDefaults
cloudKitSchemaCatchUpSyncLastSuccessDate
cloudKitSchemaCatchUpSyncLastSuccessBuildVersion
resultsLimitPerSyncOperation
persistedSubscriptionIDsValidityPeriod
mergeLocalObjectsInitialRetryInterval
mergeLocalObjectsMaximumRetryCount
mergeLocalObjectsRetryStartOverThrottleInterval
cloudSchemaCatchUpSyncInitialRetryInterval
cloudSchemaCatchUpSyncMaximumRetryCount
objectEffectiveVersionValidationFlushBatchSize
manualSortHintClientSideExpiration
manualSortHintLastAccessedUpdatePolicy
_systemBuildVersion
appZoneID
metadataZoneID
ic_isOwnedByCurrentUser
zoneIDsNeedingToBeSaved
addObject:
cloudContextDelegate
cloudContext:receivedZoneNotFound:
zoneIDsNeedingFetchChanges
removeObject:
cloudContext:sharedZoneWasDeleted:
saveZoneFetchState
database
deleteServerChangeTokenForRecordZoneID:databaseScope:
allCloudObjectsOfClassesPassingTest:inContext:
allValues
ic_objectsPassingTest:
allCloudObjectsInContext:
allCloudObjectIDsOfClassesPassingTest:inContext:
allCloudObjectIDsInContext:
allDirtyCloudObjectIDsInContext:
enableAutoGenerateCKPersonIDSalt
generateAndSavePersonIDSaltIfNeededWithContext:
retryCountsByOperationType
cloudSchemaCatchUpSyncDidCompleteWithContext:
clearRetryCountForOperationType:
retryLaterErrorWithInterval:
incrementOrClearRetryCountForOperationType:error:
startRetryTimerIfNecessaryWithError:
cStringUsingEncoding:
isReadyToSync
readinessLoggingDescription
errorForDisabledCloudSyncing
sync
_existingCloudDirtyToken
isFetchingEnabled
errorFromErrors:
timeIntervalSinceDate:
processAllDirtyCloudObjectsWithCompletionHandler:
shouldPerformCloudSchemaCatchUpSyncWithContext:outPersistenceCloudSchemaVersion:
sharedBabysitter
tokenByRegisteringAccount:forOperationWithName:
babySatErrorWithOperationName:
dictionaryWithObjects:forKeys:count:
postEventWithName:payload:error:performAutoBugCaptureOnError:
waiterID
setCloudKitSchemaCatchUpSyncLastSuccessDate:
setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion:
retryPerformingCloudSchemaCatchUpSync
lastSyncMetrics
finishWithSuccess:
_generateAndSavePersonIDSaltIfNeeded:
_clearCloudDirtyForToken:
_syncWithReason:ignoreServerChangeTokens:completionHandler:
fetchRecordZoneChangesWithReason:ignoreServerChangeTokens:completionHandler:
fetchDatabaseChangesWithReason:ignoreServerChangeTokens:completionHandler:
accountInitializerDidCompleteOnAccountsDidChangeObserver
setAccountInitializerDidCompleteOnAccountsDidChangeObserver:
ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock_50200031
clearPendingActivity
cancelAllOperations
boolValue
UTF8String
waitUntilAllOperationsAreFinished
zoneIDsFetchingChanges
unionSet:
setZoneIDsFetchingChanges:
setOperationCount:
qualityOfService
discretionaryNetworkBehavior
configuration
automaticallyRetryNetworkFailures
timeoutIntervalForResource
initWithRecordZonesToSave:recordZoneIDsToDelete:
configureOperation:
privateCloudDatabase
setDatabase:
setMarkZonesAsUserPurged:
clearServerRecord
saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:
setModifyRecordZonesCompletionBlock:
setName:
setQuantity:
setExpectedSendSize:
setExpectedReceiveSize:
setGroup:
addOperation:
errorWithDomain:code:userInfo:
error
doubleValue
code
domain
canRetryImmediatelyAfterError:
blockOperationWithBlock:
recordIDsToDelete
containsObject:
recordsToSave
recordID
recordIDs
addDependency:
integerForKey:
setInteger:forKey:
synchronize
setAccountStatus:
clearSubscribedSubscriptionIDs
clearZoneFetchState
accountStatusWithCompletionHandler:
fetchCurrentUserRecordOperation
setPerRecordCompletionBlock:
setFetchRecordsCompletionBlock:
fetchUserRecordOperationWithContainer:completionHandler:
fetchUserRecordWithContainer:completionHandler:
containerForAccountID:
fetchUserRecordOperationWithCompletionHandler:
initWithRecordsToSave:recordIDsToDelete:
setModifyRecordsCompletionBlock:
recordType
existingCloudObjectForRecordID:recordType:context:
cloudObjectClassesByRecordType
existingCloudObjectForRecordID:context:
newCloudObjectForRecord:context:
newPlaceholderObjectForRecordID:account:context:
addFetchOperationsForRecordIDs:operationGroupName:runExclusively:completionHandler:
operationsToFetchRecordIDs:operationGroupName:
addRunExclusivelyOperations:operationQueue:
addOperations:waitUntilFinished:
errorFromOperations:
objectsByDatabaseScope:
databaseWithDatabaseScope:
operationsToFetchRecordIDs:database:
ic_arrayByGroupingIntoArraysWithMaxCount:
operationToFetchRecordIDs:database:
initWithRecordIDs:
fetchOperation:progressWithRecordID:progress:
setPerRecordProgressBlock:
fetchedRecordCount
setFetchedRecordCount:
fetchOperation:fetchedRecord:recordID:error:
fetchOperation:didCompleteWithRecordsByRecordID:error:
objectWasFetchedButDoesNotExistInCloud
zoneID
receivedZoneNotFound:operation:
objectIDsToRetry
objectID
didFetchShare:context:
objectWasFetchedFromCloudWithRecord:
operationID
performAndWaitContextWithBatchFetchHelper:
rootRecordID
recordName
initWithRecordName:zoneID:
newPlaceholderObjectForRecordID:account:recordType:context:
setServerShareIfNewer:
addModifyRecordsOperationsWithCloudObjectsToSave:delete:operationGroupName:waitForDependencies:completionHandler:
isSharedRootObject
shortLoggingDescription
enumerateObjectsUsingBlock:
operationsToModifyRecordsForCloudObjectsToSave:delete:deleteShares:operationGroupName:addDependencies:
newBackgroundContext
ic_objectsFromObjectIDs:context:
allObjects
ckServerShare
ic_containsObjectPassingTest:
fetchRecordZoneChangesForZoneIDs:reason:ignoreServerChangeTokens:completionHandler:
ic_objectIDsFromObjects:
_addModifyRecordsOperationsWithCloudObjectsToSave:delete:operationGroupName:waitForDependencies:completionHandler:
recursivelyFixCrossZoneRelationship:perObjectHandler:
faultAndPromptToFileRadarWithLogMessage:
deduplicatedRecordsForCloudObjects:
ckServerRecord
setCkServerShare:
ic_removeRecordsWithSameCKRecordIDInRecords:
operationsToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:
operationToSaveZonesIfNecessary
objectWillBePushedToCloudWithOperation:
size
addDependenciesForModifyRecordsOperation:
ic_map:
arrayWithCapacity:
ckRecordType
removeObjectsInRange:
removeObjectAtIndex:
sortedRecords:
reverseObjectEnumerator
operationToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:
batchRecordsToSave:delete:maxRecordCountPerBatch:maxRecordSizePerBatch:withBlock:
addCallbackBlocksToModifyRecordsOperation:rootRecordIDsByShareID:
modifyRecordsOperation:perSaveRecordCompletion:context:onProcessingQueue:error:
modifiedRecordCount
setModifiedRecordCount:
modifyRecordsOperation:didCompleteWithSavedRecords:deletedRecordIDs:rootRecordIDsByShareID:error:
internalContextWithBatchFetchHelper
ckIdentifierFromRecordName:
batchFetchHelper
existingCloudObjectForRecord:context:
objectFailedToBePushedToCloudWithOperation:record:error:
incrementFailureCounts
objectWasPushedToCloudWithOperation:serverRecord:
shouldBeIgnoredForSync
decrementFailureCounts
addCKIdentifiers:onCurrentQueue:dispatchBlock:
flushOnCurrentQueue:
isOwnedByCurrentUser
markedForDeletion
deleteFromLocalDatabase
objectWasDeletedFromCloud
supportsDeletionByTTL
fixBrokenReferences
modifyRecordsOperation:perDeleteRecordIDCompletion:rootRecordIDsByShareID:context:onProcessingQueue:error:
recursiveCancelDependentOperations:
handleGenericPartialFailuresForError:operation:
didFailPushingExceededStorageQuotaForContext:
cloudContext:userDidDeleteRecordZoneWithID:
topologicallySortRecords:withError:
setObject:atIndexedSubscript:
numberWithUnsignedLong:
alarmReferenceCKRecordType
numberWithInteger:
recursivelyFixCrossZoneRelationshipWithVisitedMap:perObjectHandler:
setWithCapacity:
newlyCreatedRecord
errorsFromError:
initWithShouldValidateMoveAcrossSharedList:saveShouldContinueIfCustomValidationFailed:
setValidationPolicy:
customValidationFailed
completionBlock
setCompletionBlock:
addBarrierBlock:
dependencies
isCancelled
cancel
isInternalInstall
promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:
recordZonesToSave
operationToSaveZonesForZoneIDs:
initWithZoneID:
storesForAccountTypes:
valueForKey:
persistentStore
minusSet:
setWithSet:
objectIDsToProcess
hasRetryTimer
fireDate
ic_isEarlierThanDate:
addExecutionBlock:
needsToProcessAllDirtyObjects
setNeedsToProcessAllDirtyObjects:
processPendingCloudObjectsWithLabel:withCompletionHandler:
_addOperationToProcessBlock:
addOperationToProcessObjectsWithLabel:withCompletionHandler:
uploadSuspended
daWasMigrated
processObjectIDs:operationQueue:completionHandler:
setNeedsToMergeLocalObjects:
mergeLocalObjectsFetchContext
didChooseToMigrate
didFinishMigration
ckUserRecordName
isSubclassOfClass:
shouldAttemptLocalObjectMerge
_objectIDsThatShouldAttemptLocalObjectMergeWithCloudObjects:
setWithArray:
processPendingToMergeObjectIDs:operationQueue:completionHandler:
setCloudKitMergeLocalLastDateMaxRetryReached:
setCloudKitMergeLocalLastBuildVersionMaxRetryReached:
cloudKitMergeLocalLastDateMaxRetryReached
cloudKitMergeLocalLastBuildVersionMaxRetryReached
ic_localDateWithSeconds
isConcealed
isInCloud
numberWithInt:
mergeLocalObjectsWriteContext
_performLocalObjectMergeWithFetchedCloudObjectIDs:primaryCloudKitAccount:managedObjectContext:error:
_processFetchedCloudObjectsWithObjectIDs:withManagedObjectContext:usingBlock:
setDaWasMigrated:
ckIdentifier
objectWithID:
existingLocalObjectToMergeWithPredicate:
mergeWithLocalObject:
numberWithBool:
refreshObject:mergeChanges:
cleanUpAfterLocalObjectMerge
addOperationToMergeLocalObjectsWithCompletionHandler:
_processCloudObjectIDs:operationQueue:completionHandler:
_processFetchedCloudObjectsWithObjectIDs:usingBlock:
entity
initWithArray:
ic_objectsFromObjectIDs:relationshipKeyPathsForPrefetching:context:
object
recognizedCloudObjectClasses
addOperationWithBlock:
existingObjectWithID:error:
_isRecognizedCloudObjectClass:
isInICloudAccount
ckNeedsToBeFetchedFromCloud
canBeRootShareObject
share
needsToBePushedToCloud
hasAllMandatoryFields
loggingDescription
needsToBeDeletedFromCloud
needsToDeleteShare
reset
subscriptionID
notificationType
notificationID
apsNotificationHandlingDebouncer
_handleDatabaseNotificationWithScope:notificationID:ignoreServerChangeTokens:completionHandler:
localizedDescription
fetchDatabaseChangesForDatabases:reason:ignoreServerChangeTokens:completionHandler:
componentsJoinedByString:
addOperationsToFetchRecordZoneChangesForZoneIDs:reason:ignoreServerChangeTokens:completionHandler:
operationsToFetchRecordZoneChangesForZoneIDs:ignoreServerChangeTokens:
setSuspended:
isFinished
isExecuting
operationToFetchRecordZoneChangesForZoneIDs:database:ignoreServerChangeTokens:
group
quantity
serverChangeTokenForRecordZoneID:databaseScope:
setPreviousServerChangeToken:
setResultsLimit:
setFetchNewestChangesFirst:
configurationsByRecordZoneID
isZoneConfigurations:subsetOfZoneConfigurations:
newOperationToFetchRecordZoneChangesWithZoneConfigurations:database:
allKeys
previousServerChangeToken
initWithRecordZoneIDs:configurationsByRecordZoneID:
setFetchAllChanges:
setupToPerformCloudSchemaCatchUpSyncIfNeeded
setShouldSortChildrenAfterFetching:
setRecordIDsToSortChildrenAfterFetching:
_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:
saveCount
setSaveCount:
setProcessedRecordCount:
addDispatchBlock:
fetchRecordZoneChangesOperation:recordChanged:context:
setRecordChangedBlock:
deletedRecordsCount
setDeletedRecordsCount:
fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:recordType:context:
setRecordWithIDWasDeletedBlock:
fetchRecordZoneChangesOperation:zoneID:changeTokenUpdated:batchFetchHelper:
setRecordZoneChangeTokensUpdatedBlock:
flush
fetchRecordZoneChangesOperation:completedFetchForZoneID:serverChangeToken:batchFetchHelper:error:
setRecordZoneFetchCompletionBlock:
fetchRecordZoneChangesOperationDidComplete:error:
setFetchRecordZoneChangesCompletionBlock:
saveServerChangeToken:forRecordZoneID:databaseScope:
recordZoneIDs
parent
ic_shortLoggingDescription
addCKIdentifiers:dispatchBlock:
ckZoneOwnerName
objectWasDeletedFromCloudByAnotherDevice
shouldSortChildrenAfterFetching
recordIDsToSortChildrenAfterFetching
_recordTypesToSortChildrenAfterFetch
sortChildrenObjects
sharedCloudDatabase
stringByAppendingFormat:
operationToFetchDatabaseChangesForDatabase:ignoreServerChangeTokens:completionHandler:
serverChangeTokenForChangedZonesInDatabase:
initWithPreviousServerChangeToken:
fetchDatabaseChangesOperation:recordZoneWithIDChanged:
setRecordZoneWithIDChangedBlock:
fetchDatabaseChangesOperation:recordZoneWithIDWasDeleted:
setRecordZoneWithIDWasDeletedBlock:
fetchDatabaseChangesOperation:changeTokenUpdated:
setChangeTokenUpdatedBlock:
fetchDatabaseChangesOperation:finishedWithServerChangeToken:error:completionHandler:
setFetchDatabaseChangesCompletionBlock:
ic_objectsMatchingPredicate:context:
sharedZoneWasDeleted:
saveServerChangeToken:forChangedZonesInDatabase:
deleteServerChangeTokenForChangedZonesInDatabase:
databaseScopeStringsNeedingRetryFetchChanges
zoneIDsFromZoneInfos:
setZoneIDsNeedingFetchChanges:
zoneInfosFromZoneIDs:
initWithSubscriptionID:
setShouldSendContentAvailable:
setNotificationInfo:
apsConnection
isSandboxEnvironment
initWithEnvironmentName:namedDelegatePort:queue:
setApsTopic:
apsTopic
_setEnabledTopics:
setDelegate:
setApsConnection:
setNeedsToUpdateSubscriptions:
unsafeUntilSystemReady_primaryICloudACAccount
rem_isRemindersMigrated
subscriptionForDatabase:
subscribedSubscriptionIDs
saveSubscriptionsForDatabase:completionHandler:
fetchAllSubscriptionsOperation
addSubscribedSubscriptionIDs:
setFetchSubscriptionCompletionBlock:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
subscriptionsToSave
setModifySubscriptionsCompletionBlock:
setSubscribedSubscriptionIDsLastModifiedDate:
distantPast
numberWithDouble:
subscribedSubscriptionIDsLastModifiedDate
stringArrayForKey:
setSubscribedSubscriptionIDs:
setByAddingObject:
isInForeground
didCheckForLongLivedOperations
checkForLongLivedOperations
needsToUpdateSubscriptions
updateSubscriptionsWithCompletionHandler:
ckServerChangeTokens
hasPrefix:
cloudContext:didFetchUserRecord:
operationQueueFetchUserRecordWithCompletionHandler:
fetchLongLivedOperationWithID:completionHandler:
fetchAllLongLivedOperationIDsWithCompletionHandler:
shouldIgnoreErrorForBackoffTimer:operationType:
incrementRetryCountForOperationType:
setWithObjects:
errorCodesToIgnoreForBackoffTimer
timeIntervalToRetryAfterFromError:
retryOperationsIfNecessary
setRetryTimer:
needsToMergeLocalObjects
needsToUpdateCloudContextOnAccountsDidChange
setNeedsToUpdateCloudContextOnAccountsDidChange:
unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled
accountDescription
aa_accountClass
serverChangeTokenForAccount:zoneID:databaseScope:context:
setServerChangeToken:
addServerChangeTokenForAccount:ckServerChangeToken:zoneID:databaseScope:context:
serverChangeToken
deleteObject:
removeCkServerChangeTokensObject:
clearUserRecord:
migrationZoneID
deleteRecordZonesWithZoneIDs:markZonesAsUserPurged:completionHandler:
updateUserRecordWithUpdateFunction:completionHandler:
cancelEverythingWithCompletionHandler:
postNotificationName:object:userInfo:
printOperationQueue
observeValueForKeyPath:ofObject:change:context:
registerDefaults:
boolForKey:
clearContainers
unobservePrimaryCloudKitAccountPersonIDSaltChanges:
didCompleteInitializeAllAccounts:
topic
notificationFromRemoteNotificationDictionary:
_markCloudAsDirtyAndReturnToken
handleNotification:completionHandler:
arrayWithObject:
writeMigrationStateTo:didChooseToMigrate:didFinishMigration:
adjustAPSNotificationDebouncerIntervalWithMigrationState:
setUploadSuspended:
apsDebouncerWatchMigrationInProgressInterval
apsDebouncerMigrationInProgressInterval
apsDebouncerWatchDefaultInterval
apsDebouncerDefaultInterval
setDebouncingInterval:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
initWithStoreController:
notificationContainsCloudContextInternalChangesOnly:
hasPendingOperations
status
configurationDump
allZoneIDs
isFetchingAllRecordZones
finishOperationsForRecordID:completionHandler:
fetchUserRecordWithCompletionHandler:
fetchUserRecordWithAccountID:completionHandler:
fetchRecordIDs:operationGroupName:runExclusively:completionHandler:
pushCloudObjects:operationGroupName:completionHandler:
deleteSharesForObjects:completionHandler:
deleteCloudObjects:operationGroupName:completionHandler:
partialError:containsErrorCode:
firePollingSyncRequest
fetchSubscriptionsForDatabase:completionHandler:
deleteAllApplicationDataFromServerWithCompletion:
shouldPollCloudKitWhenLaunchingAndBackgrounding
accountsDidChange
applicationDidEnterBackground
applicationWillTerminate
applicationWillEnterForeground
setMigrationStateToDidChooseToMigrate:didFinishMigration:completionHandler:
migrationStateDidChange:didFinishMigration:
setCloudContextDelegate:
fetchOperationsPending
setPollingSelectorDelayer:
setContainersByAccountID:
containersByAccountIDLock
setContainersByAccountIDLock:
accountInitializerDidCompleteOnAccountsDidChangeObserverLock
setAccountInitializerDidCompleteOnAccountsDidChangeObserverLock:
_fetchOperationsPending
_needsToUpdateSubscriptions
_disabled
_hasPassedBuddy
_isSystemAvailableForSyncing
_hasRetryTimer
_disabledInternal
_needsToProcessAllDirtyObjects
_didAddObservers
_fetchingEnabled
_syncDisabledByServer
_uploadSuspended
_supportsCloudKitSyncing
_shouldUnregisterBuddy
_didCheckForLongLivedOperations
_discretionaryNetwork
_automaticallyRetryNetworkFailures
_wasInternetReachable
_pendingAccountInitializerCompleteOnLaunch
_needsToMergeLocalObjects
_needsToUpdateCloudContextOnAccountsDidChange
_containersByAccountIDLock
_accountInitializerDidCompleteOnAccountsDidChangeObserverLock
_storeController
_container
_cloudContextDelegate
_qualityOfService
_discretionaryNetworkBehavior
_processingQueue
_operationQueue
_appleAccountUtilities
_lastSyncMetrics
_objectIDsToRetry
_retryTimer
_retryCountsByOperationType
_databaseScopeStringsNeedingRetryFetchChanges
_objectIDsToProcess
_processingSelectorDelayer
_pollingSelectorDelayer
_containersByAccountID
_zoneIDsNeedingFetchChanges
_zoneIDsFetchingChanges
_zoneIDsNeedingToBeSaved
_subscribedSubscriptionIDs
_subscribedSubscriptionIDsLastModifiedDate
_timeoutIntervalForResource
_apsTopic
_apsConnection
_apsNotificationHandlingDebouncer
_accountChangedNotificationHandlingDebouncer
_lastSyncSinceInternetReachable
_buddyStateObserver
_accountInitializerDidCompleteOnLaunchObserver
_accountInitializerDidCompleteOnAccountsDidChangeObserver
_recognizedCloudObjectClasses
_accountPersonIDSaltObserver
T@"NSObject<OS_dispatch_queue>",&,N,V_processingQueue
T@"NSOperationQueue",&,N,V_operationQueue
T@"REMAppleAccountUtilities",&,N,V_appleAccountUtilities
T@"ICCloudContextSyncMetrics",&,V_lastSyncMetrics
TB,N,V_hasPassedBuddy
TB,N,V_isSystemAvailableForSyncing
T@"NSMutableSet",&,N,V_objectIDsToRetry
TB,V_hasRetryTimer
T@"NSTimer",&,V_retryTimer
T@"NSMutableDictionary",&,N,V_retryCountsByOperationType
T@"NSMutableSet",&,N,V_databaseScopeStringsNeedingRetryFetchChanges
Tq,N
disabledInternal
TB,GisDisabledInternal,V_disabledInternal
T@"NSDictionary",R,N
TB,N,V_needsToProcessAllDirtyObjects
T@"NSMutableSet",&,N,V_objectIDsToProcess
T@"ICSelectorDelayer",&,V_processingSelectorDelayer
T@"ICSelectorDelayer",&,V_pollingSelectorDelayer
TB,N,V_didAddObservers
fetchingEnabled
TB,N,GisFetchingEnabled,V_fetchingEnabled
TB,N,V_syncDisabledByServer
TB,N,V_uploadSuspended
TB,N,V_supportsCloudKitSyncing
TB,N,V_shouldUnregisterBuddy
T@"NSDictionary",&,N,V_containersByAccountID
T{os_unfair_lock_s=I},N,V_containersByAccountIDLock
T@"NSMutableSet",&,N,V_zoneIDsNeedingFetchChanges
T@"NSMutableSet",&,N,V_zoneIDsFetchingChanges
T@"NSMutableSet",&,N,V_zoneIDsNeedingToBeSaved
T@"NSSet",&,V_subscribedSubscriptionIDs
T@"NSDate",&,V_subscribedSubscriptionIDsLastModifiedDate
TB,N,V_didCheckForLongLivedOperations
TB,N,V_discretionaryNetwork
TB,N,V_automaticallyRetryNetworkFailures
Td,N,V_timeoutIntervalForResource
T@"NSString",&,N,V_apsTopic
T@"APSConnection",&,N,V_apsConnection
T@"_TtC7remindd21RDDebouncerWithNumber",&,N,V_apsNotificationHandlingDebouncer
T@"_TtC7remindd21RDDebouncerWithNumber",&,N,V_accountChangedNotificationHandlingDebouncer
TB,N,V_wasInternetReachable
Td,N,V_lastSyncSinceInternetReachable
T@"DADBuddyStateObserver",&,N,V_buddyStateObserver
TB,N,V_pendingAccountInitializerCompleteOnLaunch
T@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver",&,N,V_accountInitializerDidCompleteOnLaunchObserver
TB,N,V_needsToMergeLocalObjects
TB,N,V_needsToUpdateCloudContextOnAccountsDidChange
T@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver",&,N,V_accountInitializerDidCompleteOnAccountsDidChangeObserver
T{os_unfair_lock_s=I},N,V_accountInitializerDidCompleteOnAccountsDidChangeObserverLock
T@"NSMutableDictionary",&,N,V_recognizedCloudObjectClasses
T@"RDAccountPersonIDSaltObserver",&,N,V_accountPersonIDSaltObserver
T@"RDStoreController",R,N,V_storeController
T@"CKContainer",&,N,V_container
T@"<ICCloudContextDelegate>",W,N,V_cloudContextDelegate
TB,R,N,V_fetchOperationsPending
TB,V_needsToUpdateSubscriptions
Tq,N,V_qualityOfService
TQ,N,V_discretionaryNetworkBehavior
disabled
TB,GisDisabled,V_disabled
endDate
startDate
processedRecordCount
syncReason
success
processIdentifier
setEndDate:
setSuccess:
dictionaryRepresentation
setSyncReason:
bytesDownloaded
setBytesDownloaded:
bytesUploaded
setBytesUploaded:
averageRecordsPerSecond
setAverageRecordsPerSecond:
cloudKitDuration
setCloudKitDuration:
setStartDate:
_success
_syncReason
_fetchedRecordCount
_deletedRecordsCount
_modifiedRecordCount
_processedRecordCount
_bytesDownloaded
_bytesUploaded
_operationCount
_saveCount
_averageRecordsPerSecond
_cloudKitDuration
_startDate
_endDate
T@"NSString",&,V_syncReason
Tq,V_fetchedRecordCount
Tq,V_deletedRecordsCount
Tq,V_modifiedRecordCount
Tq,V_processedRecordCount
Tq,V_bytesDownloaded
Tq,V_bytesUploaded
Tq,V_operationCount
Tq,V_saveCount
Tq,V_averageRecordsPerSecond
Td,V_cloudKitDuration
TB,V_success
T@"NSDate",&,V_startDate
T@"NSDate",&,V_endDate
allDay
ckParentReminderIdentifier
completed
completionDate
contactHandles
creationDate
daCalendarItemUniqueIdentifier
displayDateDate
displayDateIsAllDay
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Tq,D,N
dueDate
flagged
icsDisplayOrder
icsUrl
T@"NSURL",C,D,N
importedICSData
lastBannerPresentationDate
lastModifiedDate
notes
notesDocument
priority
siriFoundInAppsData
timeZone
title
titleDocument
userActivity
spotlightIndexCount
alarmStorage
T@"NSOrderedSet",&,D,N
assignments
attachments
children
list
parentReminder
T@"REMCDReminder",&,D,N
recurrenceRules
sharedToMeReminderPlaceholder
T@"REMCDSharedToMeReminderPlaceholder",&,D,N
willChangeValueForKey:
setPrimitiveValue:forKey:
didChangeValueForKey:
alarm
reminder
updateDisplayDateWithAlarm:
setAlarm:
ic_loggingDescriptionIncludingBrackets:
ic_isEqual:
reminderIdentifier
remObjectID
propertiesThatShouldTriggerReindexing
spotlightObjectToReindex
setReminderIdentifier:
write
fileSize
fileName
maxInlineAssetSizeBytes
maximumAttachmentSizeMB
maxAttachmentsPerNote
maxSubAttachmentsPerAttachment
launchAndSignificantTimeChangePollThrottleInterval
cloudConfigurationDownloadThrottleInterval
extraneousAlarmsCleanUpTriggerReductionFactor
extraneousAlarmsDeleteCountLimit
extraneousAlarmsDeleteCountThreshold
extraneousAlarmsBackoffThrottleInterval
extraneousAlarmsThrottleInterval
suggestedAttributesTrainingOverrides
suggestedAttributesHarvestingOverrides
alarmIDsLimitPerReminder
T@"ICCloudThrottlingPolicy",R
Td,R
T@"NSNumber",R
T@"NSString",R
T@"NSDictionary",R
setMinimumClientVersion:
setThrottlingPolicy:
setPollingInterval:
setMaxInlineAssetSizeBytes:
setMaximumAttachmentSizeMB:
setMaxAttachmentsPerNote:
setMaxSubAttachmentsPerAttachment:
setResultsLimitPerSyncOperation:
setFetchCacheCountLimit:
setReachabilityChangeSyncThrottleInterval:
setLaunchAndSignificantTimeChangePollThrottleInterval:
setCloudConfigurationDownloadThrottleInterval:
setPersistedSubscriptionIDsValidityPeriod:
setApsDebouncerDefaultInterval:
setApsDebouncerMigrationInProgressInterval:
setApsDebouncerWatchDefaultInterval:
setApsDebouncerWatchMigrationInProgressInterval:
setAccountChangedDebouncerInterval:
setMergeLocalObjectsInitialRetryInterval:
setMergeLocalObjectsMaximumRetryCount:
setMergeLocalObjectsRetryStartOverThrottleInterval:
setExtraneousAlarmsCleanUpTriggerReductionFactor:
setExtraneousAlarmsDeleteCountLimit:
setExtraneousAlarmsDeleteCountThreshold:
setExtraneousAlarmsBackoffThrottleInterval:
setExtraneousAlarmsThrottleInterval:
setCloudSchemaCatchUpSyncInitialRetryInterval:
setCloudSchemaCatchUpSyncMaximumRetryCount:
setObjectEffectiveVersionValidationFlushBatchSize:
setSuggestedAttributesTrainingOverrides:
setSuggestedAttributesHarvestingOverrides:
setManualSortHintClientSideExpiration:
setManualSortHintLastAccessedUpdatePolicy:
setAlarmIDsLimitPerReminder:
_minimumClientVersion
_throttlingPolicy
_pollingInterval
_maxInlineAssetSizeBytes
_maximumAttachmentSizeMB
_maxAttachmentsPerNote
_maxSubAttachmentsPerAttachment
_resultsLimitPerSyncOperation
_fetchBatchSize
_fetchCacheCountLimit
_reachabilityChangeSyncThrottleInterval
_launchAndSignificantTimeChangePollThrottleInterval
_cloudConfigurationDownloadThrottleInterval
_persistedSubscriptionIDsValidityPeriod
_apsDebouncerDefaultInterval
_apsDebouncerMigrationInProgressInterval
_apsDebouncerWatchDefaultInterval
_apsDebouncerWatchMigrationInProgressInterval
_accountChangedDebouncerInterval
_mergeLocalObjectsInitialRetryInterval
_mergeLocalObjectsMaximumRetryCount
_mergeLocalObjectsRetryStartOverThrottleInterval
_extraneousAlarmsCleanUpTriggerReductionFactor
_extraneousAlarmsDeleteCountLimit
_extraneousAlarmsDeleteCountThreshold
_extraneousAlarmsBackoffThrottleInterval
_extraneousAlarmsThrottleInterval
_cloudSchemaCatchUpSyncInitialRetryInterval
_cloudSchemaCatchUpSyncMaximumRetryCount
_objectEffectiveVersionValidationFlushBatchSize
_suggestedAttributesTrainingOverrides
_suggestedAttributesHarvestingOverrides
_manualSortHintClientSideExpiration
_manualSortHintLastAccessedUpdatePolicy
_alarmIDsLimitPerReminder
T@"NSString",&,V_minimumClientVersion
T@"ICCloudThrottlingPolicy",&,V_throttlingPolicy
Td,V_pollingInterval
TQ,V_maxInlineAssetSizeBytes
T@"NSNumber",&,V_maximumAttachmentSizeMB
TQ,V_maxAttachmentsPerNote
TQ,V_maxSubAttachmentsPerAttachment
TQ,V_resultsLimitPerSyncOperation
TQ,V_fetchBatchSize
TQ,V_fetchCacheCountLimit
Td,V_reachabilityChangeSyncThrottleInterval
Td,V_launchAndSignificantTimeChangePollThrottleInterval
Td,V_cloudConfigurationDownloadThrottleInterval
Td,V_persistedSubscriptionIDsValidityPeriod
Td,V_apsDebouncerDefaultInterval
Td,V_apsDebouncerMigrationInProgressInterval
Td,V_apsDebouncerWatchDefaultInterval
Td,V_apsDebouncerWatchMigrationInProgressInterval
Td,V_accountChangedDebouncerInterval
Td,V_mergeLocalObjectsInitialRetryInterval
TQ,V_mergeLocalObjectsMaximumRetryCount
Td,V_mergeLocalObjectsRetryStartOverThrottleInterval
T@"NSNumber",&,V_extraneousAlarmsCleanUpTriggerReductionFactor
TQ,V_extraneousAlarmsDeleteCountLimit
TQ,V_extraneousAlarmsDeleteCountThreshold
Td,V_extraneousAlarmsBackoffThrottleInterval
Td,V_extraneousAlarmsThrottleInterval
Td,V_cloudSchemaCatchUpSyncInitialRetryInterval
TQ,V_cloudSchemaCatchUpSyncMaximumRetryCount
TQ,V_objectEffectiveVersionValidationFlushBatchSize
T@"NSDictionary",&,V_suggestedAttributesTrainingOverrides
T@"NSDictionary",&,V_suggestedAttributesHarvestingOverrides
Td,V_manualSortHintClientSideExpiration
T@"NSString",&,V_manualSortHintLastAccessedUpdatePolicy
TQ,V_alarmIDsLimitPerReminder
defaultSessionConfiguration
setDiscretionary:
set_sourceApplicationBundleIdentifier:
sessionWithConfiguration:
loadLocalConfigurationFile
stringForKey:
fileURLWithPath:
checkResourceIsReachableAndReturnError:
availableConfigurationURLs
lastPathComponent
ic_objectPassingTest:
setDefaultConfigurationURL:
containsString:
path
defaultManager
URLForDirectory:inDomain:appropriateForURL:create:error:
URLByAppendingPathComponent:isDirectory:
URLByAppendingPathExtension:
bundleForClass:
resourceURL
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
cachedConfigurationURL
dictionaryWithContentsOfURL:
isConfigurationValid:
setConfigurationFromDictionary:
defaultConfigurationURL
loadConfigurationFromURL:
URLWithString:
downloadConfigurationFromRemoteURL:completionHandler:
session
statusCode
propertyListWithData:options:format:error:
writeToURL:error:
localizedStringForStatusCode:
dataTaskWithURL:completionHandler:
resume
initWithBatchInterval:numberOfBatches:
cloudKitResultsLimitPerSyncOperation
unsignedIntValue
setStorage:
storage
setValue:forKey:
downloadRemoteConfiguration
forwardingTargetForSelector:
valueForUndefinedKey:
setValue:forUndefinedKey:
setSession:
_storage
_session
T@"_ICCloudConfigurationStorage",&,V_storage
T@"NSURLSession",&,V_session
T@"ICCloudThrottlingPolicy",R,D
Td,R,D
TQ,R,D
T@"NSNumber",R,D
T@"NSString",R,D
T@"NSDictionary",R,D
numberWithUnsignedLongLong:
objectIdentifier
primitiveValueForKey:
setPreviousList:
validateForInsert:
_validateForReminderTreeConsistency:
storeControllerManagedObjectContext
validationPolicy
saveShouldContinueIfCustomValidationFailed
setCustomValidationFailed:
validateForUpdate:
_validateMoveAcrossLists:
shouldValidateMoveAcrossSharedList
_validateMoveAcrossSharedLists:
_validateAssignmentsForInvalidSharees:
type
initWithAccountType:
supportsMoveAcrossLists
previousList
validationErrorMoveReminderFromList:toList:inAccount:
supportsMoveAcrossSharedLists
isShared
validationErrorNestedSubtask:parentReminderID:
ckNeedsInitialFetchFromCloud
validationErrorSubtaskAndParentNotOnSameList:parentReminderID:
supportsAssignments
objectEnumerator
assignee
originator
isShareeActivelyParticipatingWithSharee:
setAssignee:
setOriginator:
timeZoneWithName:
initWithDate:allDay:timeZone:
displayDate
setDisplayDateDate:
isAllDay
setDisplayDateIsAllDay:
setDisplayDateTimeZone:
defaultTimeZone
secondsFromGMT
setDisplayDateUpdatedForSecondsFromGMT:
willSave
willSave_handledUpdateDisplayDate
setWillSave_handledUpdateDisplayDate:
changedValues
updateDisplayDate
didSave
displayDateUtils
dueDateComponents
alarms
displayDateWithDueDateComponents:alarms:
setDisplayDate:
modelObject
updateDisplayDateWithDueDateComponents:alarm:alarmsProviding:
setSpotlightIndexCount:
incrementSpotlightIndexCount
setList:
_displayDateUtils
T@"REMCDList",&,N,VpreviousList
T@"REMDisplayDate",&,N
T@"REMDisplayDateUtils",R,&,N,V_displayDateUtils
TB,N,VwillSave_handledUpdateDisplayDate
requestFreeSpace:atPath:effortLevel:queue:completionBlock:
effectiveMinimumSupportedVersion
parentEffectiveMinimumSupportedVersion
keyPathsForValuesAffectingEffectiveMinimumSupportedVersion
uuidString
hostURL
owner
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
firstDayOfTheWeek
frequency
interval
monthsOfTheYear
occurrenceCount
setPositions
weeksOfTheYear
willAccessValueForKey:
didAccessValueForKey:
compare:
validationErrorListHasNoAccount:
sharees
sharingStatus
isSharedWithShareeCount:sharingStatus:
reminderIDsMergeableOrdering
setReminderIDsMergeableOrdering:
timeZoneFromName:
rem_dateComponentsWithDateUsingArchivingTimeZone:isAllDay:
rem_dateComponentsWithDate:timeZone:isAllDay:
setDueDate:
rem_isAllDayDateComponents
setAllDay:
setTimeZone:
rem_dateWithDateComponentsUsingArchivingTimeZone:
rem_dateWithDateComponents:timeZone:
isDeleted
setIcsDisplayOrder:
setDueDateComponents:
startDateComponents
setStartDateComponents:
displayOrder
setDisplayOrder:
T@"NSDateComponents",C,N
T@"NSArray",R,N
TQ,N
data
timeInterval
Td,D,N
accountIdentifier
clientName
lastConsumedChangeTokenData
lastConsumedDate
T@"NSUUID",C,D,N
sharedToMeReminderCKIdentifier
hashtagLabel
T@"REMCDHashtagLabel",&,D,N
initRequiringSecureCoding:
encodeSystemFieldsWithCoder:
finishEncoding
encodedData
initForReadingFromData:error:
initWithCoder:
transformedValueClass
transformedValue:
reverseTransformedValue:
oldExternalIdentifier
oldListIdentifier
managerData
version
setIncludesSubentities:
setRelationshipKeyPathsForPrefetching:
isTemporaryID
managedObjectContext
obtainPermanentIDsForObjects:error:
ic_obtainPermanentObjectIDIfNecessary
ic_permanentObjectID
performBlock:
addObserverForName:object:queue:usingBlock:
setSortDescriptors:
ic_objectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:context:
ic_resultsMatchingPredicate:sortDescriptors:resultType:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
ic_objectsMatchingPredicate:sortDescriptors:context:
ic_objectIDsMatchingPredicate:sortDescriptors:context:
ic_postNotificationOnMainThreadWithName:
ic_postNotificationOnMainThreadAfterSaveWithName:
ic_objectFromObjectID:context:
ic_permanentObjectIDsFromObjects:
ic_objectIDsMatchingPredicate:context:
ic_dictionariesMatchingPredicate:propertiesToFetch:context:
isPhantom
isUnsupported
awakeFromInsert
insertCloudStateOnAwakeFromInsert
awakeFromFetch
insertCloudStateIfNeededOnAwakeFromFetch
didTurnIntoFault
clearTransformedCKServerValueCachesOnDidTurnIntoFault
_allowsObjectSupportedVersion
_markDirtyForEffectiveMinimumSupportedVersionValidation
cached_CDResolutionMap
resolutionTokenMapFromJsonData:
jsonDataFromResolutionTokenMap:
setResolutionTokenMapData:
setCached_CDResolutionMap:
setHack_resolutionTokenMapCopy:
hack_resolutionTokenMapCopy
isEqualToData:
objc_toJSONString
dataUsingEncoding:
initWithData:encoding:
objc_newObjectFromJSONString:
resolutionTokenMap
setResolutionTokenMap:
setPreviousAccount:
hack_willSaveHandled
setHack_willSaveHandled:
supportsCoreSpotlightIndexing
spotlightIndexCountUpdated
intersectSet:
setSpotlightIndexCountUpdated:
hack_didHandleShouldSyncUpDelete
setHack_didHandleShouldSyncUpDelete:
transactionAuthor
setShouldSyncUpDelete
willSave_Swift
didSave_Swift
previousAccount
validationErrorMoveFromAccount:toAccout:
shouldMarkAsDeletedInsteadOfDeletingImmediately
markForDeletion
deleteAllChildrenFromLocalDatabase
recursiveMarkForDeletion:usingVisitedMap:
relationshipsByName
deleteRule
objectIDsForRelationshipNamed:
shouldCascadeMarkAsDeleteInto:forRelationship:
traverseObjectTreeUsingVisitedMap:handler:
unmarkForDeletion
externalIdentifier
encodeExternalIdentifierForMarkedForDeletionObject:
attributesByName
attributeType
className
decodeExternalIdentifierForMarkedForDeletionObject:
minimumSupportedAppVersion
setMinimumSupportedAppVersion:
effectiveMinimumSupportedAppVersion
setEffectiveMinimumSupportedAppVersion:
managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
destinationEntity
superentity
minimumSupportedVersion
setEffectiveMinimumSupportedVersion:
objectIDWithUUID:entityName:
internalErrorWithDebugDescription:
UUID
objectIDWithUUID:
relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:
newObjectID
T@"REMObjectID",R,N
T@"NSString",R,N
remObjectIDWithError:
Tq,R,N
setMinimumSupportedVersion:
validateEffectiveMinimumSupportedVersion
isPlaceholder
resolutionTokenMapData
createResolutionTokenMapIfNecessary
setAccount:
updateDeletedFlagAccordingToOrphanState:
allChildObjects
fixValueBeforeMarkingForDeletionForKey:
fixValueBeforeUnmarkingForDeletionForKey:
_ckServerRecord
_ckServerShare
_mergeDataRefusedToMergeMarkedForDeletion
_mergeDataRevertedLocallyMarkedForDeletion
_shouldPerformCloudSchemaCatchUpSync
T@"REMCDAccount",&,N,VpreviousAccount
T@"REMResolutionTokenMap",&,N,Vhack_resolutionTokenMapCopy
TB,N,Vhack_willSaveHandled
TB,N,Vhack_didHandleShouldSyncUpDelete
T@"REMResolutionTokenMap",&,N,Vcached_CDResolutionMap
TB,N,VspotlightIndexCountUpdated
T@"RDStoreControllerManagedObjectContext",R,N
T@"REMResolutionTokenMap",&,N
T@"NSData",&,N
shouldSyncToCloud
initWithDomain:code:userInfo:
currentReachabilityStatus
raise:format:
initWithTimeInterval:
storageFrom:accountID:alarmID:
setTitle:
latitude
setLatitude:
longitude
setLongitude:
radius
setRadius:
referenceFrameString
setReferenceFrameString:
proximity
initWithStructuredLocation:proximity:
event
initWithEvent:
userDefaults
currentCalendar
components:fromDate:
dateFromComponents:
isEqualToDate:
setDay:
dateByAddingComponents:toDate:options:
setTimeStyle:
setDateStyle:
stringFromDate:
ic_isToday
ic_isYesterday
setDoesRelativeDateFormatting:
distantFuture
dateByAddingUnit:value:toDate:options:
currentLocale
dateFormatFromTemplate:options:locale:
setDateFormat:
ic_shortFormattedDate
ic_briefFormattedDate
ic_isLaterThanDate:
trigger
initWithTrigger:objectID:
didHandleMarkingExtraneousAlarmDuringWillSave
setDidHandleMarkingExtraneousAlarmDuringWillSave:
setIsExtraneous:
setReminder:
TB,N,VdidHandleMarkingExtraneousAlarmDuringWillSave
_groundTruth_primaryActiveCloudKitAccountInContext:
persistenceCloudSchemaVersion
numberWithLongLong:
setPersistenceCloudSchemaVersion:
ic_save
shouldPerformCloudSchemaCatchUpSyncForExistingCloudObject:persistenceCloudSchemaVersion:
insertNewObjectForEntityForName:inManagedObjectContext:
setCkCloudState:
ckCloudState
setObject:
parentCloudObject
cloudAccount
ckDirtyFlags
numberWithShort:
setCkIdentifier:
setCkDirtyFlags:
_isInICloudAccount
_setCKIdentifierIfNecessary
currentLocalVersion
setCurrentLocalVersion:
setLatestVersionSyncedToCloud:
setLocalVersionDate:
setCkServerRecord:
rangeOfString:
substringFromIndex:
objectWithCKIdentifier:context:
isMissingCKIdentifier:
cachedManagedObjectForCKIdentifier:
failureCountQueue
failedToSyncCountsByCKIdentifier
numberOfPushAttemptsToWaitByCKIdentifier
numberOfPushAttemptsToWaitCount
setNumberOfPushAttemptsToWaitCount:
failedToSyncCount
setFailedToSyncCount:
deleteChangeTokensAndReSync
removeAllObjects
primitiveCkZoneOwnerName
recordZoneName
shouldSyncUpDelete
newCloudObjectForRecord:account:context:
newObjectWithCKIdentifier:context:account:
initWithUUIDString:
setIdentifier:
setCachedManagedObject:forCKIdentifier:
setDaCalendarItemUniqueIdentifier:
newPlaceholderObjectForCKIdentifier:account:context:
setCkNeedsInitialFetchFromCloud:
setInCloud:
lastObject
allCloudObjectsPredicate
allDirtyCloudObjectsPredicate
initWithRecordType:recordID:
setParent:
initWithRecordID:action:
ckRecordKeyForMinimumSupportedVersion
hasSuccessfullyPushedLatestVersionToCloud
setMarkedForDeletion:
shouldPerformCloudSchemaCatchUpSync
mergeSystemPropertiesIntoCDObject:fromCKRecord:
latestVersionSyncedToCloud
isPushingSameOrLaterThanVersion:
isSharedReadOnly
setCkNeedsToBeFetchedFromCloud:
updateChangeCount
needsToReFetchServerRecordValue:
fileURL
isSharedViaICloud
shouldBeDeletedFromLocalDatabaseUnlessByThisDevice:
setVersion:forOperation:
needsToFetchAfterServerRecordChanged:
deleteTemporaryAssetFilesForOperation:
versionForOperation:
resetFailureCounts
modificationDate
recordChangeTag
mergeDataFromRecord:
updateParentReferenceIfNecessary
temporaryAssets
temporaryAssetDirectoryURL
writeToURL:options:error:
initWithFileURL:
mainBundle
bundleIdentifier
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
deleteTemporaryFilesForAsset:
removeItemAtURL:error:
isDeletable
deletedByThisDevice
objectsToBeDeletedBeforeThisObject
uniquenessConstraints
setDeletedByThisDevice:
serverShareCheckingParent
currentUserParticipant
permission
participantID
uppercaseString
cloudkitCollaboration
restoreParentReferenceAfterUnmarkingForDeletion
weakToStrongObjectsMapTable
versionsByOperationQueue
versionsByRecordIDByOperation
longLongValue
deletedByThisDeviceOperationQueue
deletedByThisDeviceSet
recordSystemFieldsTransformer
setCkServerRecordData:
setCkZoneOwnerName:
ckServerRecordData
setObjectIdentifier:
setOwnerName:
removeCkSharedObjectOwnerNamesObject:
updateObjectWithShare:
shareSystemFieldsTransformer
setCkServerShareData:
ckServerShareData
inCloud
localVersionDate
getResolutionTokenMapFromRecord:
updateForKey:
clearChangeCount
isValidObject
forcePushToCloud
canBeSharedViaICloud
shareTitle
shareType
currentUserShareParticipantID
didAcceptShare:
updateSharedObjectOwnerName:
resetUniqueIdentifier
cloudKitReferenceWithRecordIDAndValidateAction:
generateReolutionTokenMapForTestingWithKeys:
mergeDataRefusedToMergeMarkedForDeletion
mergeDataRevertedLocallyMarkedForDeletion
keyPathsForValuesAffectingCloudAccount
objectWithRecordID:context:
keyPathsForValuesAffectingCkZoneOwnerName
newObjectWithCKRecordName:context:account:
cloudObjectWithCKIdentifier:context:
keyPathsForValuesAffectingNeedsToBePushedToCloud
assetForData:
deleteAllTemporaryAssetFilesForAllObjects
keyPathsForValuesAffectingNeedsToBeDeletedFromCloud
keyPathsForValuesAffectingCanBeSharedViaICloud
keyPathsForValuesAffectingIsSharedViaICloud
keyPathsForValuesAffectingIsSharedReadOnly
keyPathsForValuesAffectingServerShareCheckingParent
resetAllDeletedByThisDeviceProperties
TB,R
TB,N,GisInCloud
TB,N
T@"CKRecord",&,N
T@"CKShare",&,N
T@"NSString",&,D,N
taskSpecificItemWithIdentifier:valueClass:
hourOfDay
hourOfDaySlot
dayOfWeek
isWeekend
appInFocus
T@"RDBMItemType",R,C,N
_identifier
T@"NSString",R,C,N,V_identifier
itemWithType:stringValue:
itemWithType:numberValue:
initWithType:value:
value
_type
_value
T@"RDBMItemType",R,N,V_type
T@,R,C,N,V_value
initWithStartDate:endDate:item:
initWithAntecedent:consequent:support:confidence:
antecedent
consequent
support
confidence
_antecedent
_consequent
_support
_confidence
T@"NSSet",R,N,V_antecedent
T@"NSSet",R,N,V_consequent
Td,R,N,V_support
Td,R,N,V_confidence
supportsTaskSpecificEvents
initWithStorageURL:types:targetTypes:samplingInterval:absoluteSupport:confidence:
mine
terminateEarly
miningTaskDidFinish:
delegate
coreAnalyticsDict
completionStatus
_delegate
_coreAnalyticsDict
_completionStatus
T@"<RDBMMiningTaskDelegate>",W,N,V_delegate
T@"NSMutableDictionary",R,N,V_coreAnalyticsDict
Tq,R,N,V_completionStatus
initWithURL:taskSpecificItemTypes:
retrieveRulesWithFilters:
retrieveRulesWithSupport:confidence:filters:
isAccountTypeValid:
notificationUserInfoPropertyNameKey
notificationUserInfoPropertyValueKey
notificationUserInfoAccountObjectIDKey
notificationUserInfoAccountTypeKey
setPersonIDSalt:
listIDsMergeableOrdering
setListIDsMergeableOrdering:
postAccountPropertyChangeNotificationWithKey:changedValue:
height
width
rem_isDiskFullSQLError
didCleanUpManualSortHintOnDeletion
setDidCleanUpManualSortHintOnDeletion:
wasDeletedDueToUserInitiatedChanges
setWasDeletedDueToUserInitiatedChanges:
TB,N,VdidCleanUpManualSortHintOnDeletion
TB,N,VwasDeletedDueToUserInitiatedChanges
token
initWithPersistentHistoryToken:
setToken:
setChanges:
timestamp
setTimestamp:
transactionNumber
setTransactionNumber:
storeID
setStoreID:
bundleID
setBundleID:
processID
setProcessID:
contextName
setContextName:
author
setAuthor:
initWithStorage:
entityNamesToIncludeFromTrackingWithOptionProvider:
changes
changedObjectID
isKindOfEntity:
initWithPersistentHistoryChange:
setInternal_ChangeTransaction:
initWithPersistentHistoryTransaction:
totalMigratedCount
setTotalMigratedCount:
migrateTokenResolutionMapInObject:
migrateCRDTsInObject:
updatedObjects
totalListCount
migratedAccount
migratedListsCount
migrateCRDTsInAccount:
migrateCRDTsInList:
initWithAccountID:objectID:property:
initWithReplicaIDSource:serializedData:error:
orderedSet
initWithReplicaIDSource:orderedSet:
serializedData
setMigratedAccount:
setTotalListCount:
reminderIDsMergeableOrderingReplicaIDSourceWithAccountID:listID:
reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:
setMigratedListsCount:
_migratedAccount
_totalMigratedCount
_totalListCount
_migratedListsCount
TQ,N,V_totalMigratedCount
TQ,N,V_totalListCount
TB,N,V_migratedAccount
TQ,N,V_migratedListsCount
exceptionWithName:reason:userInfo:
persistentStores
_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:
withManagedObjectContext:
_persistenceStoreIDsForAccountTypes:
persistentStoreForIdentifier:
_persistenceStoreIDForAccountID:
dateWithTimeIntervalSince1970:
fetchHistoryAfterDate:
_changeTokenFromCDTrackingState:error:
setLastConsumedChangeToken:
setLastConsumedDate:
_fetchCDTrackingStateWithClientID:andPerformBlock:
lastConsumedChangeToken
archivedDataWithRootObject:requiringSecureCoding:error:
errorWithREMChangeErrorCode:underlyingError:
_persistenceStoreForAccountID:
errorWithREMChangeErrorCode:
assignObject:toPersistentStore:
setClientName:
setAccountIdentifier:
setLastConsumedChangeTokenData:
_fetchRequestWithPredicateUsingEntityNames:managedObjectContext:error:
setFetchRequest:
_errorChangeSetWithError:
_resultChangeSetByExecutingRequest:managedObjectContext:error:
fetchHistoryAfterToken:
entityForName:inManagedObjectContext:
invalidParameterErrorWithDescription:
entityDescriptionWithContext:
propertiesByName
setEntity:
deleteHistoryBeforeDate:
_executeDeleteHistoryRequest:
deleteHistoryBeforeToken:
_fetchCDAuxiliaryChangeInfosWithObjectID:inManagedObjectContext:error:
_accountTypeMaskWithBitMask:
_persistenceStoresForAccountTypes:
cachedAccountIDsByStoreIDsMap
_accountIdentifierForPersistenceStoreID:
currentPersistentHistoryTokenFromStores:
errorChangeSetWithError:
_accountIDForPersistenceStoreID:
_resolveAccountID:
_resolveObjectIDsInChanges:deletedObjectsIDMap:inManagedObjectContext:
initWithChangeTransactions:
changedManagedObjectID
resolveWithObjectID:
tombstone
unarchivedObjectOfClass:fromData:error:
currentChangeToken
currentChangeTokenForAccountTypes:
currentChangeTokenForAccountID:
earliestChangeTokenForAccountID:
getTrackingStateWithClientID:completionHandler:
saveTrackingState:withClientID:completionHandler:
fetchHistoryAfterDate:entityNames:transactionFetchLimit:completionHandler:
fetchHistoryAfterToken:entityNames:transactionFetchLimit:completionHandler:
deleteHistoryBeforeDate:completionHandler:
deleteHistoryBeforeToken:completionHandler:
fetchAuxiliaryChangeInfos:completionHandler:
setCachedAccountIDsByStoreIDsMap:
_cachedAccountIDsByStoreIDsMap
T@"NSCache",&,N,V_cachedAccountIDsByStoreIDsMap
changeTracking
initWithManagedObjectContext:
objectTreeProcessorDelegateFactoryWithTreeNode:
metrics
cloudKitMetrics
duration
initWithOptions:
initSharedSettingsWithOptions:
hasAnyOptions:
_options
TQ,N,V_options
backingCDObject
setManagedObjectID:
setBackingCDObject:
setExpanded:
managedObjectID
childrenNodes
expanded
markAsExpanded
_managedObjectID
_backingCDObject
T@"NSManagedObjectID",&,N,V_managedObjectID
T@"REMCDObject",&,N,V_backingCDObject
TB,N,Vexpanded
hasChanges
coreDataSave:
preprocessTreeNode:
processBatchOfTreeNodes:
setManagedObjectContext:
_managedObjectContext
T@"RDStoreControllerManagedObjectContext",W,N,V_managedObjectContext
dateComponentsData
externalModificationTag
daSyncToken
daPushKey
T@"REMCKCloudState",&,D,N
resolutionTokenMap_v2_JSON
T@"REMResolutionTokenMap",&,D,N
resolutionTokenMap_v3_JSONData
acknowledgedDate
alarmUID
isExtraneous
originalAlarmUID
T@"REMCDAlarmTrigger",&,D,N
indexOfObjectPassingTest:
objectAtIndex:
indexesOfObjectsPassingTest:
objectsAtIndexes:
indexOfObject:inSortedRange:options:usingComparator:
ic_objectBefore:wrap:
ic_objectAfter:wrap:
indexOfObject:
arrayByAddingObject:
arrayByAddingObjectsFromArray:
ic_randomObject
ic_objectsOfClass:
ic_indexOfSortedObject:insertionIndex:usingComparator:
ic_indexIsValid:
ic_objectBefore:
ic_objectAfter:
ic_arrayByAddingNonNilObject:
ic_arrayByAddingObjectsFromNonNilArray:
T@,R,N
insertObject:atIndex:
nextObject
removeObjectsInArray:
ic_addNonNilObject:
ic_addObjectsFromNonNilArray:
ic_insertNonNilObject:atIndex:
T@"REMCDObject",&,D,N
ic_loggingDescriptionFromLoggable:isPretty:
ic_prettyLoggingDescription
didCleanUpManualSortHintOnMarkingForDeletion
setDidCleanUpManualSortHintOnMarkingForDeletion:
TB,N,VdidCleanUpManualSortHintOnMarkingForDeletion
address
contactLabel
mapKitHandle
routing
locationUID
initWithData:
setServerChangeTokenData:
addCkServerChangeTokensObject:
setZoneName:
setDatabaseScope:
andPredicateWithSubpredicates:
serverChangeTokensMatchingPredicate:inContext:
_serverChangeToken
T@"CKServerChangeToken",&,N,V_serverChangeToken
failureCount
retryCount
state
timeElapsed
isTerminated
setCloudContext:
cloudContext
existingShareForObject:
newShareForObject:
prepareShare:forObject:completionHandler:
rootRecordForObject:
initWithRootRecord:shareID:
initWithRootRecord:
populateShare:withObject:
setObjectContext:
saveShare:forObject:completionHandler:
saveShare:withRootRecord:object:completionHandler:
setQueuePriority:
saveServerShare:completionHandler:
objectForShare:context:
acceptShareWithMetadata:andFetchObjectWithCompletionHandler:
initWithShareMetadatas:
setPerShareCompletionBlock:
setAcceptSharesCompletionBlock:
initWithCloudContext:
fetchShareForObjectWithManagedObjectID:
createShareForObjectWithManagedObjectID:appIconData:queue:completionHandler:
fetchShareIfNecessaryForObject:completionHandler:
didSaveShare:queue:completionHandler:
didStopSharing:queue:completionHandler:
acceptShareWithMetadata:queue:completionHandler:
objectContext
_cloudContext
_objectContext
T@"ICCloudContext",&,N,V_cloudContext
T@"NSManagedObjectContext",&,N,V_objectContext
_shouldValidateMoveAcrossSharedList
_saveShouldContinueIfCustomValidationFailed
_customValidationFailed
TB,R,N,V_shouldValidateMoveAcrossSharedList
TB,R,N,V_saveShouldContinueIfCustomValidationFailed
TB,N,V_customValidationFailed
insertedObjects
deletedObjects
hasPendingListNameRelatedChanges
validateDirtyEffectiveMinimumSupportedVersions
recordSaveWith:
affectedStores
read
entityName
propertiesToFetch
recordFetchWith:
countForFetchRequest:error:
setShouldPerformCloudSchemaCatchUpSync:
_cdEntityNameOfREMCDObject
valueForKeyPath:
subentities
_heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation:heightMap:
removeLastObject
topologicallyWeightedEntitiesForEffectiveMinimumSupportedVersionPropagation
sortedArrayUsingComparator:
_validateDirtyEffectiveMinimumSupportedVersionsWithBatchSize:isManualValidation:
managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:
initWithTraversalOrder:batchSize:delegate:
traverse:
_setAllowsExpandedUserInfoKeys:
containerShouldSortChildrenAfterFetchingWithRecordID:
_rem_setAllowsExpandedUserInfoKeys:
_unittest_managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:
_unittest_validateDirtyEffectiveMinimumSupportedVersionsManually
setStoreController:
setManagedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion:
_unittest_awakeCounts
set_unittest_awakeCounts:
_shouldSortChildrenAfterFetching
_validationPolicy
_affectedStores
_batchFetchHelper
_persistenceCloudSchemaVersion
_recordIDsToSortChildrenAfterFetching
_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
__unittest_awakeCounts
T@"RDStoreController",W,N,V_storeController
T@"RDStoreControllerValidationPolicy",&,N,V_validationPolicy
T@"NSArray",&,N,V_affectedStores
T@"ICBatchFetchHelper",&,N,V_batchFetchHelper
TB,N,V_shouldPerformCloudSchemaCatchUpSync
Tq,N,V_persistenceCloudSchemaVersion
TB,N,V_shouldSortChildrenAfterFetching
T@"NSMutableSet",&,N,V_recordIDsToSortChildrenAfterFetching
T@"NSMutableSet",&,N,V_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
T@"NSDictionary",&,N,V__unittest_awakeCounts
search
initWithIsolated:coordinator:
validateIndexVersionWithCompletionHandler:
createAndAttachCoreSpotlightDelegateForStoreWithDescription:
deleteIndicesForStore:
activateCoreSpotlightDelegates
stopCoreSpotlightDelegatesForStores:
reindexAllSearchableItems
reindexSearchableItemsWithIdentifiers:
enableCoreSpotlightIndexing
setEnableCoreSpotlightIndexing:
isActivated
setIsActivated:
pendingReindexAll
setPendingReindexAll:
pendingReindexIdentifiers
earlyStoppedStoreIdentifiers
_enableCoreSpotlightIndexing
_isActivated
_pendingReindexAll
_persistentStoreCoordinator
_pendingReindexIdentifiers
_earlyStoppedStoreIdentifiers
T@"NSPersistentStoreCoordinator",R,N,V_persistentStoreCoordinator
TB,N,V_isActivated
TB,N,V_pendingReindexAll
T@"NSMutableSet",R,N,V_pendingReindexIdentifiers
T@"NSMutableSet",R,N,V_earlyStoppedStoreIdentifiers
TB,N,V_enableCoreSpotlightIndexing
daAllowsCalendarAddDeleteModify
daConstraintsDescriptionPath
daSupportsSharedCalendars
didChooseToMigrateLocally
listIDsMergeableOrdering_v2
personIDSalt_v1
ckSharedObjectOwnerNames
lists
reminders
smartLists
accessLevel
displayName
firstName
lastName
middleName
namePrefix
nameSuffix
nickname
owningListIdentifier
originatedAssignments
existingOperationToDeleteRecordID:
existingOperationToFetchRecordID:
existingOperationToSaveRecordID:
containsOperationToDeleteRecordID:
containsOperationToFetchRecordID:
containsOperationToSaveRecordID:
mergedModelFromBundles:
initWithIsolated:containerURL:
mainContainerURL
defaultMergePolicy
_makePersistentStoreCoordinator
strongToWeakObjectsMapTable
setL_accountStoreMap:
strongToStrongObjectsMapTable
setL_accountStorageCacheByObjectIDs:
setL_accountExternalIdentifiersToObjectIDsMap:
hashTableWithOptions:
setL_allGenericAccountsObjectIDs:
l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:error:
l_activateCoreSpotlightDelegates
cloudContextHasPendingOperationsDidChange:
setAccountPropertiesNotifier:
managedObjectContextDidSave:
startNotifier
containerURL
URLByAppendingPathComponent:
databaseDirectoryURL
storeFileNameWithStoreName:
stringByDeletingPathExtension
managedObjectModel
initWithManagedObjectModel:
createDirectoryIfNecessary:
l_loadPPTStoreStatus
_discoverAccountStoreURLsFromFilesOnDiskDeletingFilesMarkedDeleted:error:
l_createOrLoadAccountStoresWithURLs:error:
l_loadDummyStoreIfNeeded
l_validateAccountStoresAndConstructAccountStoreMap
l_performManualStoreMigrations:
l_accountStoreMap
keyEnumerator
pptSentinelURLInContainerURL:
fileExistsAtPath:
setIsPPTStore:
isPPTStore
debugSimulateSqliteFull
absoluteString
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
persistentStoreOptions
pathExtension
lowercaseString
getResourceValue:forKey:error:
metadataForPersistentStoreOfType:URL:options:error:
dictionaryWithObject:forKey:
setHasFailedLoadingAccountStoresFromDiskDueToDiskFull:
supportsLocalInternalAccount
localInternalAccountID
URLByResolvingSymlinksInPath
storeURLWithName:
persistentStoreForURL:
predicateWithValue:
l_accountStorageCacheByObjectIDs
l_accountExternalIdentifiersToObjectIDsMap
l_allGenericAccountsObjectIDs
l_markAccountStoreDeletedAndDeleteData:deletedObjectIDs:error:
metadata
isEqualToDictionary:
setMetadata:
setReturnsDistinctResults:
fileExistsAtPath:isDirectory:
l_createAccountStoresWithIdentifiers:didAddNewStores:error:
dictionaryWithCapacity:
persistentStoreDescriptionWithURL:
setType:
setShouldMigrateStoreAutomatically:
setShouldInferMappingModelAutomatically:
setConfiguration:
setOption:forKey:
setShouldAddStoreAsynchronously:
addPersistentStoreWithDescription:completionHandler:
coreSpotlightDelegateManager
isInitializing
l_removeAccountStoresWithIdentifiers:deletedObjectIDs:error:
_postDidRemoveAccountStoresNotificationWithDeletedObjectIDs:
entities
initWithEntityName:
filesDirectoryURL
URLForAttachmentDirectory:accountID:
startAccessingSecurityScopedResource
copyItemAtURL:toURL:error:
moveItemAtURL:toURL:error:
stopAccessingSecurityScopedResource
_writableURLForMLModelForContainerName:error:
_removeAllPersistentStores:
isolated
mergePolicy
setMergePolicy:
currentQueryGenerationToken
setQueryGenerationFromToken:error:
notificationContainsChangeTrackingChangesOnly:
cloudKitNetworkActivityObservers
_notifyCloudKitNetworkActivityObservers:
isObsolete
_cleanUpCloudKitNetworkActivityObservers
updateNetworkActivityWithValue:
mergeMigrationStateFromRecord:
deleteCloudObjectIfFullyPushed:
invalidatePrimaryICloudACAccount
clearAppleCloudKitTable
AccountAbsentError
initWithAccountObjectID:accountType:initialSaltValue:callbackQueue:successHandler:errorHandler:
accountPropertiesNotifier
observeWithObserver:
unobserveWithObserver:
l_primaryActiveCloudKitAccountREMObjectID
supportsAccountUtils
supportsAlarmEngine
supportsAssignmentNotificationEngine
supportsApplicationShortcuts
supportsSuggestedAttributes
entityNamesToIncludeFromTracking
accountIdentifierForStoreID:
storeForAccountIdentifier:
createAccountStoresWithIdentifiers:didAddNewStores:error:
removeAccountStoresWithIdentifiers:error:
URLForAttachmentFile:accountID:fileName:
updateAttachmentFile:accountID:fileName:fileURL:keepSource:error:
readableURLForMLModel
writableURLForMLModelWithError:
temporaryURLForMLModelWithError:
nukeDataWithError:
invalidateStoreConnectionsWithError:
purgeDeletedObjectsWithCompletionHandler:
requestFreeSpaceToLoadAccountStoresWithQueue:completionBlock:
notificationContainsInternalChangesOnly:
startObservingCloudKitNetworkActivityWithObserver:
_getCloudKitAccountInContext:
handleCloudAccountsDidChange:
logStoresDirectoryContents
_set_cloudContext:
supportsHashtagLabelUpdater
supportsWidgetRefresh
unittest_setEnableCoreSpotlightIndexing:
setContainerURL:
setIsolated:
accountUtils
setAccountUtils:
hasFailedLoadingAccountStoresFromDiskDueToDiskFull
setSupportsLocalInternalAccount:
ivarLock
setIvarLock:
setIsInitializing:
setSupportsSuggestedAttributes:
setCloudKitNetworkActivityObservers:
setL_primaryActiveCloudKitAccountREMObjectID:
_isolated
_hasFailedLoadingAccountStoresFromDiskDueToDiskFull
_supportsLocalInternalAccount
_isInitializing
_isPPTStore
_supportsSuggestedAttributes
_ivarLock
_accountPropertiesNotifier
_containerURL
_accountUtils
_mergePolicy
_l_accountStoreMap
_l_accountStorageCacheByObjectIDs
_l_accountExternalIdentifiersToObjectIDsMap
_l_allGenericAccountsObjectIDs
_coreSpotlightDelegateManager
_cloudKitNetworkActivityObservers
_l_primaryActiveCloudKitAccountREMObjectID
T{os_unfair_lock_s=I},N,V_ivarLock
T@"NSMergePolicy",&,N,V_mergePolicy
T@"NSURL",&,N,V_containerURL
T@"NSURL",R,N
T@"NSMapTable",&,N,V_l_accountStoreMap
T@"NSMapTable",&,N,V_l_accountStorageCacheByObjectIDs
T@"NSMapTable",&,N,V_l_accountExternalIdentifiersToObjectIDsMap
T@"NSHashTable",&,N,V_l_allGenericAccountsObjectIDs
TB,N,V_isolated
T@"RDCoreSpotlightDelegateManager",R,N,V_coreSpotlightDelegateManager
TB,N,V_isInitializing
TB,N,V_hasFailedLoadingAccountStoresFromDiskDueToDiskFull
TB,N,V_isPPTStore
TB,N,V_supportsLocalInternalAccount
TB,N,V_supportsSuggestedAttributes
T@"NSMutableSet",&,N,V_cloudKitNetworkActivityObservers
T@"REMObjectID",&,N,V_l_primaryActiveCloudKitAccountREMObjectID
T@"RDAccountPropertiesNotifier",&,N,V_accountPropertiesNotifier
T@"RDAccountUtils",&,N,V_accountUtils
inMemoryPrimaryActiveCKAccountREMObjectID
updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:
l_accountStoragesForAccountObjectIDs:
l_setAccountStorages:forAccountObjectIDs:
accountStoragesForAccountObjectIDs:
setAccountStorages:forAccountObjectIDs:
accountStoragesForAccountExternalIdentifiers:
setAccountStorages:forAccountExternalIdentifiers:
accountStoragesForAllGenericAccounts
setAccountStoragesForAllGenericAccountsWithStorages:
transcribedText
ic_stringValue
displayNameFromListName:isPlaceholder:
daBulkRequests
daDisplayOrder
daExternalIdentificationTag
daIsEventOnlyContainer
daIsImmutable
daIsNotificationsCollection
daIsReadOnly
isGroup
lastUserAccessDate
reminderIDsMergeableOrdering_v2_JSON
sharedOwnerAddress
sharedOwnerName
calDAVNotifications
childLists
sharedOwner
T@"REMCDSharee",&,D,N
childSmartLists
setBatchInterval:
setNumberOfBatches:
_batchInterval
_numberOfBatches
Td,N,V_batchInterval
TQ,N,V_numberOfBatches
entitiesByName
isOptional
defaultValue
initWithEntity:
setPropertiesToUpdate:
executeRequest:withContext:error:
resultType
reachabilityWithAddress:
reachabilityForInternetConnection
stopNotifier
localWiFiStatusForFlags:
networkStatusForFlags:
reachabilityWithHostName:
reachabilityForLocalWiFi
connectionRequired
_alwaysReturnLocalWiFiStatus
_reachabilityRef
setCountLimit:
queue
ckIdentifiers
missingCKIdentifierCache
managedObjectIDCache
dispatchBlocks
batchSize
_flush
_dispatchBlockApplyingBackPressureIfNeeded:
_canObtainPermanentIDForObject:context:ckIdentifier:
removeCachedManagedObjectForCKIdentifier:
setBatchSize:
setCkIdentifiers:
setDispatchBlocks:
setManagedObjectIDCache:
setMissingCKIdentifierCache:
setQueue:
_batchSize
_ckIdentifiers
_dispatchBlocks
_managedObjectIDCache
_missingCKIdentifierCache
_queue
Tq,V_batchSize
T@"NSMutableSet",&,N,V_ckIdentifiers
T@"NSManagedObjectContext",W,N,V_managedObjectContext
T@"NSMutableArray",&,N,V_dispatchBlocks
T@"NSCache",&,N,V_managedObjectIDCache
T@"NSCache",&,N,V_missingCKIdentifierCache
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"REMCDAlarm",&,D,N
traversalOrder
traverseByPostOrder:
_flushIfNeeded:
_flushRemaining:
_traversalOrder
TQ,R,N,V_traversalOrder
TQ,R,N,V_batchSize
T@"<REMCDObjectTreeProcessorDelegate>",W,N,V_delegate
initWithFormat:arguments:
ic_debugName
setIc_debugName:
ic_performBlock:andPerformBlockOnMainThread:
ic_performBlockAndWait:andPerformBlockAndWaitOnMainThread:
T@"NSString",&,N
batchUpdateRequestWithEntityName:
expressionForKeyPath:
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
rem_dataWithRandomBytesWithLength:
randomSalt
_fetchCloudKitAccountsInContext:
countCloudBasedAccountsInContext:
getTokenForKey:
initialize
_unitTest_randomPersonIDSalt
allowsReverseTransformation
updateDisplayDatesIn:
isSetupUser
initWithBundleIdentifier:
initWithDaemonController:
cloudAccountsDidChange
stopObserving
callbackQueue
propertyName
notify:
showNotificationWithIdentifier:content:completion:
calDAVSharedListNotificationContentWithList:
cloudKitNetworkActivityDidUpdate:
supportsSecureCoding
copyWithZone:
encodeWithCoder:
moveObjectsAtIndexes:toIndex:
_forceDisableFullRemindersSorting
sortWithOptions:usingComparator:
URIRepresentation
replicaIDSource
initWithUUID:entityName:
setStatus:
setOwningReminderIdentifier:
encryptedValues
setCkOriginatorIdentifier:
setCkAssigneeIdentifier:
setAssignedDate:
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
listTypeRawValue
listID
setConcatenatedElementIDsWithLocalElementIDPrefix:
setConcatenatedContainerIDsWithLocalContainerIDPrefix:
__swift_objectForKeyedSubscript:
lastAccessedSinceReferenceDate
accountID
setAccountID:
rem_accountObjectID
setRem_accountObjectID:
setAccountDescription:
actionIdentifier
fetchRemindersWithObjectIDs:error:
initWithStore:
assignmentContext
saveWithQueue:completion:
removeAllAssignments
updateReminder:
shareeContext
requestAuthorizationWithOptions:completionHandler:
titleAsString
setBody:
isOriginatorNullified
originatorID
shortName
fetchChangesSinceLastConsumed
sinceToken
upToToken
changedModelObjectsOfModelClass:ofChangeType:
markChangesConsumed
reminderID
isCompleted
assigneeID
currentAssignment
fetchPrimaryActiveCloudKitAccountREMObjectIDWithError:
initWithREMDAAccount:clientName:withREMStore:entityNames:
fetchAndInitializeChangeTrackingStateIfNeeded
markChangesConsumed:
enableAssignmentNotifications
compareCurrentChangeTokenToLastConsumedWithResult:error:
debouncingInterval
accountStore
accountWithIdentifier:
accountType
username
enableHashingUserIdentifiablesWithPersonIDSalt
dataWithJSONObject:options:error:
JSONObjectWithData:options:error:
daemonVersion:
daemonStatus:
nukeDatabase:
testInitialSyncWithAccountName:completion:
testReinitializeCloudKitWithCompletionHandler:
cancelCloudKitSync:
cloudKitStatus:
fireDebugNotificationWithText:identifier:categoryIdentifier:reference:isRemove:completion:
fetchGeofencesWithCompletion:
removeGeofenceWithUUID:completion:
addGeofenceWithLatitude:longitude:radius:uuid:completion:
simulateCoreLocationEnterRegionWithIdentifier:completion:
simulateCoreLocationExitRegionWithIdentifier:completion:
persistenceStoreIDForAccountID:completion:
crashDaemonWithMessage:
fetchContactsMatching:completion:
createIsolatedStoreContainerWithCompletion:
destroyIsolatedStoreContainerWithToken:completion:
dataAccessStatusReports:
resetBabysitterWithRestrictedAccountID:completion:
downloadContainerToOutputDir:completion:
fetchAllManualSortHintsWithDetails:completion:
fetchManualSortHintWithListType:listID:completion:
removeManualSortHintWithIdentifier:completion:
resetAllManualSortHintsWithCompletion:
resetManualSortHintWithIdentifier:completion:
resetManualSortHintWithListType:listID:completion:
resetManualSortHintBeforeLastAccessed:completion:
updateManualSortHintWithIdentifier:lastAccessed:completion:
setupManualHashtagLabelUpdater
refreshHashtagLabelsImmediately
validateHashtagLabelsWithoutHashtagWithRepair:completion:
validateHashtagLabelsWithConcealedHashtagsWithRepair:completion:
validateHashtagsWithoutHashtagLabelWithRepair:completion:
validateHashtagsWithMismatchedHashtagsWithRepair:completion:
validateHashtagsWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifierWithRepair:completion:
validateSharedToMeReminderPlaceholdersWithRepair:completion:
fetchAccountListOrderedIdentifiersWithAccountID:completion:
updateMinimumSupportedVersionWithObjectID:minimumSupportedVersion:completion:
updateRemCurrentRuntimeVersionDebuggingOverride:
initWithInteger:
setRemCurrentRuntimeVersionDebuggingOverride:
predicateWithFormat:argumentArray:
orderedIdentifiers
setLastAccessedSinceReferenceDate:
setETag:
setHintData:
setSerializationVersion:
setListID:
setListTypeRawValue:
hintData
eTag
serializationVersion
giveAccountWithIDAnotherChance:
sharedManager
stateString
urlForIsolatedContainerWithIdentifier:
initWithIdentifier:
descriptorForRequiredKeysForStyle:
initWithKeysToFetch:
setStyle:
enumerateContactsWithFetchRequest:error:usingBlock:
predicateForContactsMatchingName:
stringFromContact:
phoneNumbers
emailAddresses
initWithCenter:radius:identifier:
setNotifyOnEntry:
setNotifyOnExit:
retainNotificationWithIdentifier:reference:content:skipBanner:completion:
releaseNotificationWithIdentifier:reference:completion:
setCategoryIdentifier:
errorSanitizedForXPCFromError:
displayAccount
_unsetMigrationFlagsWithACAccount:inStore:completionHandler:
fetchAccountWithObjectID:error:
updateAccount:
removeFromStore
saveSynchronouslyWithError:
setCkUserRecordName:
setListIDsMergeableOrdering_v2:
setCkServerChangeTokens:
setCkSharedObjectOwnerNames:
setLists:
setReminders:
environment
arguments
lastExtraneousAlarmsProcessedDate
useExtraneousAlarmBackOffThrottleInterval
statusReportWithCompletionBlock:
initWithEntity:insertIntoManagedObjectContext:
listener:shouldAcceptNewConnection:
_setQueue:
syncCloudKitWithReason:discretionary:bypassThrottler:completion:
restartCloudKitSyncWithReason:bypassThrottler:completion:
syncDataAccessAccountsWithAccountIDs:bypassThrottler:completion:
deleteApplicationDataFromCloudKitWithCompletion:
migrateICloudCalDavToCloudKitForAccountID:disableCache:userInitiated:completion:
debugDownloadMigrationCacheWithCompletion:
fetchUserRecordWithCompletion:
setMigrationStateToDidChooseToMigrate:didFinishMigration:completion:
fetchServerRecordFor:completion:
observeCloudKitNetworkActivityChanges
noSuchObjectErrorWithObjectID:
performQuery:inZoneWithID:completionHandler:
setDidChooseToMigrateLocally:
descriptors
text
textMatching
startingDueDate
endingDueDate
parentReminderID
objectIDs
setOriginalAlarmUID:
setAlarmUID:
setAcknowledgedDate:
dateComponents
setDateComponentsData:
structuredLocation
setLocationUID:
setAddress:
setRouting:
setContactLabel:
setMapKitHandle:
setProximity:
setEvent:
unexpectedNilPropertyWithClass:property:
initWithObjectID:dateComponents:
initWithObjectID:event:
initWithTitle:locationUID:
initWithObjectID:structuredLocation:proximity:
initWithObjectID:timeInterval:
preferredDefaultListObjectIDUrl
preferredDefaultListID
setPreferredDefaultListID:
setPreferredDefaultListObjectIDUrl:
managedObjectIDForURIRepresentation:
evaluateWithObject:
initWithAccountStorages:listStorages:objectIDs:
accountObjectID
externalIdentifiers
groupObjectID
shouldUseResolutionTokenMapForMergingData
setSortingStyle:
setSmartListType:
setShowingLargeAttachments:
setParentList:
setParentAccount:
setFilterData:
setColor:
setBadgeEmblem:
allowsKeyedCoding
encodeBool:forKey:
encodeInt:forKey:
encodeInteger:forKey:
encodeDouble:forKey:
encodeObject:forKey:
setSharedToMeReminderCKIdentifier:
addHashtags:
removeHashtags:
setRecencyDate:
setCanonicalName:
setFirstOccurrenceCreationDate:
setHashtags:
changedIdentifiersOfModelClass:ofChangeType:
changeSet
applyFilterByTransactionAuthors:isExclusion:
setCreationDate:
mergeWithMap:forKey:
parentListID
setToken:forKey:
parentAccountID
setParentAccountID:
manualOrdering
changedKeys
topLevelReminderIDs
initWithObjectID:accountID:smartListType:
setIsPersisted:
initWithObjectID:listID:
setManualOrdering:
setParentListID:
setPriority:
initWithPhones:emails:
preWarmModels
performSwiftInvocation:withParametersData:storages:completion:
siriFoundInAppsListID
hack_overrideReminderIDsOrderingWithOrderedObjectIDs:
TT_gzipDeflate
includeSystemLanguage
includeSystemTimezone
includeAccountType
includeListNames
includeListNameFuzzedEmbeddings
includeListGroupInfo
creationDateWithinDays
dominantLanguageForString:
wordEmbeddingForLanguage:
revision
embeddingWithContentsOfURL:error:
dimension
initWithTagSchemes:
setString:
relevantWordTagsIncludeOtherWord
includeDayOfWeek
includeDates
includeReminderTitles
includeReminderTitleSaltedHash
includeReminderTitleFuzzedEmbeddings
includeIsFlagged
includePriority
includeRecurrenceInfo
includeAttachmentUTIs
includeRemindMeWhenMessagingInfo
includeUserActivityInfo
includeSubtaskInfo
includeAlarmDates
dateResolutionInSeconds
iCalendarDescription
localizedStringForLabel:
includeReminderTitleCategorySentence2Vec
includeReminderTitleCategoryUniversalGrammar
includeReminderTitleCategoryFilteredStopWords
matchesContactRepresentation:
orderedIdentifierMap
setOrderedIdentifierMap:
setUpdateLastModifiedDates:
setSyncToCloudKit:
setLastBannerPresentationDate:
request
isSnooze
setParentReminder:
isInserted
hashtagIDsToUndelete
validationErrorUndeleteHashtagFromAnotherReminder:expectedReminderID:
subtaskIDsToUndelete
setOldExternalIdentifier:
setOldListIdentifier:
attributedString
mergedWithDocument:error:
archivedDictionaryData
setUserActivity:
setImportedICSData:
setIcsUrl:
archivedData
setContactHandles:
setLastModifiedDate:
setFlagged:
setCompletionDate:
setCompleted:
setNotesDocument:
setNotes:
setTitleDocument:
setSiriFoundInAppsData:
setDaPushKey:
setDaSyncToken:
setExternalModificationTag:
setExternalIdentifier:
primaryLocaleInferredFromLastUsedKeyboard
initWithObjectID:listID:accountID:
setParentReminderID:
setTitleDocumentData:
setRecurrenceRules:
setNotesDocumentData:
setAttachments:
setAlarms:
userActivityWithDictionaryData:error:
representationFromData:
setAssignments:
.cxx_construct
unexpectedError
iconWithSystemImageName:
actionWithIdentifier:title:options:icon:
categoryWithIdentifier:actions:intentIdentifiers:options:
setHiddenPreviewsBodyPlaceholder:
setActions:
setCategorySummaryFormat:
body
defaultSound
setSound:
soundWithAlertType:
legacyNotificationIdentifier
setShouldPreventNotificationDismissalAfterDefaultAction:
setInterruptionLevel:
initWithCGImage:scale:orientation:
globallyUniqueString
attachmentWithIdentifier:URL:options:error:
setDate:
setShouldHideTime:
hourForNextThirdsFromHour:
rem_isWeekendDateComponents
fetchDefaultListWithError:
setCoreBehaviorTrainingParameters:
setBestKForKNN:
listsDADisplayOrderChanged
mutableOrderedSetValueForKey:
setListsDADisplayOrderChanged:
setDidFinishMigration:
setDidChooseToMigrate:
setInactive:
listIDsMergeableOrderingReplicaIDSource
setDaSupportsSharedCalendars:
setDaAllowsCalendarAddDeleteModify:
setDaConstraintsDescriptionPath:
localAccountID
mergedOrderedSetWithOrderedSet:error:
sortedArrayWithOptions:usingComparator:
setDaDisplayOrder:
smartListIDsToUndelete
listIDsToUndelete
listIDsMergeableOrderingReplicaIDSourceWithAccountID:
initWithObjectID:type:name:listIDsMergeableOrdering:
lastPresentAlarmDate
nextScheduledAlarmDate
setNextScheduledAlarmDate:
setLastPresentAlarmDate:
content
initWithStorages:
fetchREMObjectIDOnly
initWithAccountIDs:
purpose
nullifiedRelationshipErrorWithRelationshipName:
nullifiedOriginatorAssignmentWithObjectID:accountID:reminderID:assigneeID:status:assignedDate:
set_debug_cdAssigneeLinked:
set_debug_cdOriginatorLinked:
initWithObjectID:accountID:reminderID:assigneeID:originatorID:status:assignedDate:
reachabilityChangedWithNotification:
unsafeUntilSystemReady_primaryICloudAccountCalDavService
initWithPattern:options:error:
firstMatchInString:options:range:
numberOfRanges
rangeAtIndex:
cloudKitMigrationDelayAfterError
initWithState:IsObserver:timeElapsed:listsMigrated:remindersMigrated:log:
cloudKitMigrationObserverPollingInterval
remindersMigrated
listsMigrated
isObserver
cloudKitMigrationMaxNumInvocations
cloudKitMigrationMaxNumFailures
cloudKitMigrationSimulatedError
cloudKitMigrationDisableCleanUp
defaultCloudContainerName
requestUUID
initWithContext:
setState:
setRetryCount:
setFailureCount:
setIsTerminated:
setHashtagLabel:
setIsGroup:
setSharingStatus:
setSharedOwner:
setSharees:
participants
addShareesObject:
userIdentity
lookupInfo
emailAddress
phoneNumber
nameComponents
setAccessLevel:
acceptanceStatus
rem_addingTel
rem_addingMailto
setFirstName:
setMiddleName:
setLastName:
setNamePrefix:
setNameSuffix:
setNickname:
givenName
familyName
initWithType:subpredicates:
removeListsObject:
reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:
update
removeRemindersObject:
addRemindersObject:
setLastUserAccessDate:
ckShortDescription
initWithSet:
cloudKitMaxNumAlarmIDsInReminderCKRecordDebugOverride
addAlarmStorageObject:
addRecurrenceRulesObject:
removeRecurrenceRules:
removeAlarmStorage:
mutableDocument
initWithString:
wipeAndReplaceWithString:
setCkParentReminderIdentifier:
initWithObjectID:accountID:reminderID:type:name:creationDate:
recurrenceEndWithOccurrenceCount:
recurrenceEndWithEndDate:
initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:
dayOfWeek:weekNumber:
setSetPositions:
setMonthsOfTheYear:
setWeeksOfTheYear:
setDaysOfTheYear:
setDaysOfTheMonth:
setDaysOfTheWeek:
dayOfTheWeek
weekNumber
setFirstDayOfTheWeek:
setInterval:
setFrequency:
recurrenceEnd
setOccurrenceCount:
setUti:
setHeight:
setWidth:
setFileSize:
setFileName:
setUrl:
currentChangeToken:
currentChangeTokenForAccountTypes:completion:
currentChangeTokenForAccountID:completion:
earliestChangeTokenForAccountID:completion:
getTrackingStateWithClientID:completion:
attachmentPushedToiCloudForType:
isRecurrent
isOverdue
siriFoundInAppsUserConfirmation
setAlarmStorage:
setChildren:
setDaIsNotificationsCollection:
setDaIsEventOnlyContainer:
orPredicateWithSubpredicates:
setFetchOffset:
initWithKey:ascending:reverseNullOrder:
initWithContactRepresentation:
initWithTrigger:
disableAlarmEngineDataSourcePrefetching
phones
initWithStringValue:
emails
isLikePhoneNumber:
fetchListWithObjectID:error:
capabilities
escapedPatternForString:
range
matchesInString:options:range:
stringByReplacingMatchesInString:options:range:withTemplate:
baseLanguageFromLanguage:
listIDs
keyPath
localizedStandardCompare:
initWithKey:ascending:selector:
initWithKey:ascending:
setHostURL:
setUuidString:
initCalDAVNotificationWithObjectID:accountID:listID:uuidString:hostURL:externalIdentifier:externalModificationTag:
handleNotification:
currentThread
undateify
__swift_setObject:forKeyedSubscript:
fetchAllRecordZonesOperation
setFetchRecordZonesCompletionBlock:
isDefaultRecordZoneID
CKDescriptionPropertiesWithPublic:private:shouldExpand:
containsAssetValues
valueStore
rootDatabasePath
addEntriesFromDictionary:
userInteractionsData
setUserInteractionsData:
DidCompleteInitializeAllAccountsNotification
fetchAccountsWithError:
isEnabledForDataclass:
acAccountIdentifierToMergeLocalDataIntoSyncData
setAcAccountIdentifierToMergeLocalDataIntoSyncData:
acAccountIdentifierToMigrateInactivatedCalDavData
setAcAccountIdentifierToMigrateInactivatedCalDavData:
isDatabaseMigrated
_addAccountWithType:name:accountObjectID:
fetchListsWithError:
localAccountDefaultListID
addListWithName:toAccountChangeItem:listObjectID:
postNotification:
removeObserver:name:object:
ascending
initWithOrderedIdentifiers:
setDisplayName:
initShareeWithObjectID:accountID:listID:displayName:firstName:middleName:lastName:namePrefix:nameSuffix:nickname:address:status:accessLevel:
initWithAccountStorages:listStorages:reminderStorages:objectIDs:
allowConcealedObjects
initWithHashtags:
initWithAssignments:
storeProperty:forKey:
daCalendarItemUniqueIdentifiers
listObjectID
predicateDescriptor
sortDescriptors
includeConcealedObjects
includeIncomplete
includeCompleted
parentReminderIDs
includeUnsupported
includingSubtasks
initWithMergeType:
resolveConflicts:error:
sourceObject
persistedSnapshot
cachedSnapshot
resolutionTokenMapWithJSONData:keyMap:
getTokenKeys
constraint
constraintValues
databaseObject
constraintConflictWithIdentifier:constraint:
conflictingObjects
documentFromSerializedData:replicaIDSource:forKey:ofObjectID:
supportsCRDTs
notesReplicaIDSourceWithAccountID:reminderID:
titleReplicaIDSourceWithAccountID:reminderID:
fetchResultTokenToDiffAgainst
changeType
updatedProperties
initWithStore:storage:
supportsCustomSmartLists
accountsListCategorizedCountsCache
setAccountsListCategorizedCountsCache:
customContext
showRemindersAsOverdue
initWithFetchResultTokenToDiffAgainst:
isDate:overdueAtReferenceDate:allDay:showAllDayRemindersAsOverdue:
fetchResultTokenFromDataRepresentation:error:
dataRepresentationWithError:
attachmentRepresentationAndReturnError:
initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:
initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:width:height:
initWithObjectID:accountID:reminderID:url:metadata:
changeTrackingPerformerWithStoreContainerToken:reason:completion:
debugPerformerWithStoreContainerToken:reason:completion:
storePerformerWithProcessName:storeContainerToken:reason:completion:
syncInterfacePerformerWithReason:completion:
indexingPerformerWithReason:completion:
remoteObjectProxyWithErrorHandler:
xpcPerformerUnavailableErrorWithDescription:
serviceName
setExportedObject:
interface
setExportedInterface:
setRemoteObjectInterface:
setInterruptionHandler:
setInvalidationHandler:
valueForEntitlement:
auditToken
activePairedDeviceSelectorBlock
getAllDevicesWithArchivedAltAccountDevicesMatching:
valueForProperty:
throttledErrorWithRemainingTimeInterval:
miningTask:filteredRulesForExtractedRules:
scheduledTimerWithTimeInterval:repeats:block:
initWithContentsOfURL:options:error:
compareAndMergeWithMap:forKey:
forceMergeFromMap:forKey:
initTokenWithDefaultValueIfNecessaryForKey:
testIndexDummyItemWithCompletion:
reindexAllSearchableItemsWithAcknowledgementHandler:
reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
deleteAllSearchableItemsWithCompletionHandler:
initWithName:protectionClass:bundleIdentifier:
initWithItemContentType:
localizedStringFromDate:dateStyle:timeStyle:
setContentDescription:
setProviderDataTypeIdentifiers:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
indexSearchableItems:completionHandler:
saveRequest
updateReminderChangeItem:fromICSTodo:icsCalendar:isNew:withOptions:
exportICSCalendarFromReminders:
components
_trackedListChangeItemForObjectID:
addReminderWithTitle:toListChangeItem:
setRemindersICSDisplayOrderChanged:
trackedReminderChangeItems
fetchRemindersWithError:
updateList:
removeFromParent
trackedListChangeItems
removeFromList
supportsGroups
addListWithName:toAccountChangeItem:
copyListDataFrom:
isSharedToMe
nextRecurrentDueDateAfter:dueDate:timeZone:allDay:recurrenceRules:
initWithIncompleteReminderCounts:scheduledCount:
initWithMetadata:
sortDescriptorSortingByOrderingInAccountAscending:
initWithCount:
initWithListStorages:
initWithAccountStorages:listStorages:reminderStorages:requestedObjectIDs:metadata:
modifiedDate
uncommitedRemindersAccountID
subtaskIDsByTopLevelReminderID
initWithRequestedObjectIDs:
locationManager:didEnterRegion:
locationManager:didExitRegion:
locationManager:didDetermineState:forRegion:
locationManager:didFailWithError:
locationManager:monitoringDidFailForRegion:withError:
locationManagerDidChangeAuthorization:
minimumRegionMonitoringDistance
notifyOnEntry
notifyOnExit
authorizationStatus
monitoredRegions
stopMonitoringForRegion:
setOnBehalfOfBundleId:
startMonitoringForRegion:
initWithEffectiveBundle:delegate:onQueue:
locationBundleURL
initWithURL:
locationManager:didUpdateToLocation:fromLocation:
locationManager:didUpdateLocations:
locationManager:didUpdateHeading:
locationManagerShouldDisplayHeadingCalibration:
locationManager:didRangeBeacons:inRegion:
locationManager:rangingBeaconsDidFailForRegion:withError:
locationManager:didRangeBeacons:satisfyingConstraint:
locationManager:didFailRangingBeaconsForConstraint:error:
locationManager:didChangeAuthorizationStatus:
locationManager:didStartMonitoringForRegion:
locationManagerDidPauseLocationUpdates:
locationManagerDidResumeLocationUpdates:
locationManager:didFinishDeferredUpdatesWithError:
locationManager:didVisit:
initWithDASymbolicColorName:daHexString:
initWithRed:green:blue:alpha:colorSpace:daSymbolicColorName:daHexString:ckSymbolicColorName:
initWithSmartListStorages:accountStorages:parentListStorages:
initWithSmartListStorages:
noPrimaryActiveCloudKitAccountError
createIfNeeded
noSuchSmartListErrorWithSmartListType:
tipKitCachedCountOfHashtags
setTipKitCachedCountOfHashtags:
tipKitCachedCountOfCustomSmartLists
setTipKitCachedCountOfCustomSmartLists:
tipKitCachedCountOfUncompletedReminders
setTipKitCachedCountOfUncompletedReminders:
tipKitCachedCountOfListsWithCustomBadge
setTipKitCachedCountOfListsWithCustomBadge:
tipKitCachedCountOfLists
setTipKitCachedCountOfLists:
notification
initWithQueue:notificationCenter:
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
getDeliveredNotificationsWithCompletionHandler:
requestWithIdentifier:content:trigger:destinations:
addNotificationRequest:withCompletionHandler:
replaceContentForRequestWithIdentifier:replacementContent:completionHandler:
subtitle
categoryIdentifier
setUserInfo:
setWantsNotificationResponsesDelivered
setNotificationCategories:
requestWithIdentifier:content:trigger:
removeDeliveredNotificationsWithIdentifiers:
setPersonIDSalt_v1:
orderValueWithAssignedDate:objectIdentifier:
expressionForFunction:arguments:
setExpression:
setExpressionResultType:
setReturnsObjectsAsFaults:
setPropertiesToGroupBy:
alarmEngine
siriKit
dataAccess
migration
suggestedAttributes
applicationShortcut
setManagerData:
setVersion:
initWithManagerData:version:
attachmentPushedToiCloudForUTType:
initWithAccountID:calendarID:
setRemXPCCompletion:
sharedMain
addToOperationsQueueDisabledCheckAndGoBlock:wrappedBlock:
transactionId
respondToShareRequestWithResponse:
rem_storeProvider
activeAgents
syncChangeTrackingPerformerWithReason:errorHandler:
syncDebugPerformerWithReason:errorHandler:
syncDebugPerformerWithErrorHandler:
syncStorePerformerWithReason:errorHandler:
asyncStorePerformerWithReason:loadHandler:errorHandler:
syncSyncInterfacePerformerWithReason:errorHandler:
asyncSyncInterfacePerformerWithReason:loadHandler:errorHandler:
syncIndexingPerformerWithReason:errorHandler:
asyncIndexingPerformerWithReason:loadHandler:errorHandler:
executeFetchRequest:completion:
performInvocation:completion:
fetchReplicaManagerForAccountID:completion:
fetchReplicaManagersForAccountID:bundleID:completion:
compressedDistributedEvaluationDataWithOptions:completion:
saveAccountStorages:listStorages:smartListStorages:reminderStorages:changedKeys:replicaManagers:author:mode:synchronously:syncToCloudKit:completion:
fetchShareForObjectWithID:completion:
createShareForObjectWithID:appIconData:completion:
updateShare:completion:
stopShare:completion:
acceptShareWithMetadata:completion:
acceptCalDAVShareWithCalendarURL:acAccountID:completion:
rejectCalDAVShareWithCalendarURL:acAccountID:completion:
notifyOfInteractionWithPeople:completion:
updateAccountsAndFetchMigrationState:completion:
updateAccountWithACAccountID:restartDA:completion:
removeOrphanedAccountWithCompletion:
requestToMergeLocalDataIntoSyncDataWithAccountIdentifier:completion:
requestToDeleteSyncDataWithAccountIdentifier:completion:
requestToDeleteLocalDataWithCompletion:
uncachedSuggestedAttributesPerformerWithReason:completion:
MCIsManagedAccountWithObjectID:completion:
requestToUpdateClientConnectionsWithShouldKeepAlive:
initWithBool:
personHandle
aliases
contactIdentifier
saveErrorWithCoreDataError:
initWithResultData:storages:latestFetchResultToken:
fetchExecutor
setLastSyncPoll:
lastSyncPoll
triggerThrottledSyncWithReason:discretionary:WithCompletion:
initWithName:
setLastCloudConfigurationDownload:
lastCloudConfigurationDownload
center
geoReferenceFrame
setGeoReferenceFrame:
NilValueError
InvalidValueError
setPropertyName:
initWithPersistentHistoryTokens:
persistentHistoryTokens
initWithMachServiceName:
remindersICSDisplayOrderChanged
reminderIDsOrderingHints
setSharedOwnerAddress:
setSharedOwnerName:
setDaIsImmutable:
setDaIsReadOnly:
setDaBulkRequests:
setDaExternalIdentificationTag:
hasDeserializedReminderIDsMergeableOrdering
reminderIDsMergeableOrderingData
setOwner:
sharedOwnerID
reminderIDsToUndelete
childSmartListIDsToUndelete
childListIDsToUndelete
initWithObjectID:accountID:name:isGroup:reminderIDsMergeableOrderingData:
setSharedOwnerID:
setIsPlaceholder:
setCurrentUserShareParticipantID:
setCalDAVNotifications:
setMode:
childAccountsWithAccountTypeIdentifier:
enabledDataclasses
accountPropertyForKey:
rem_isManagedAppleID
accountDescriptionWithACAccount:
aa_isAccountClass:
saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:
_addAccountWithType:name:
setObjectID:
disableMonitoringAgents
aa_accountsEnabledForDataclass:
isActive
fetchAccountsIncludingInactive:error:
enableMonitoringAgentsWithToken:
accountsWithAccountTypeIdentifiers:error:
saveAccount:withCompletionHandler:
setAccountProperty:forKey:
rem_didChooseToMigrate
initWithDueDateCounts:
initWithSubtaskCounts:
sortDescriptorSortingByOrderingInListAscending:
initWithDueDate:count:
initWithReminderStorages:
compareObject:toObject:
dueAfter
dueBefore
hasLocation
location
setTimeInterval:
postSummaryFor:
stringRepresentation
initWithQueue:store:
setLastSuggestedAttributesAutoTrainingToken:
lastSuggestedAttributesAutoTrainingToken
smartListStorages
accountStorages
parentListStorages
listsFromAccountStorages:listStorages:store:
initWithStore:account:parentList:storage:
indexOfEqualObject:
mutableOrderedSet
immutableOrderedSet
initWithOrderedSet:
setReplicaManagerProvider:
unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:
unauthorizedErrorWithMissingEntitlement:
newObjectFromJSONObject:
initWithDictionary:
initWithMap:
initWithCounter:modificationTime:replicaID:
todayNotificationFireTime
streamTodayNotificationFireTime:
supportsSubtasks
snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:
snoozeToNextThirds
snoozeFromNowForTimeInterval:
snoozeForever
processName
_isAddingNonPrimaryCKAccountForTesting
markedForRemoval
isOrdered
setOwningListIdentifier:
_debug_cdOriginatorLinked
_debug_cdAssigneeLinked
rem_storeForDataAccess
rem_supportsClearingOrphanedStores
rem_saveRequestForDataAccess
rd_observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges:
rd_isPersonIDSaltInitiallyNilError:
rd_base64EncodedHMACStringFromString:usingPersonIDSalt:
rem_notificationPresentingForDataAccess
remindersDatabaseDidChange
updateContentsOfAllFoldersForAccountIDs:
isDataAccessEnabled
vendDaemons:
waitForSystemAvailabilityWithCompletionBlock:completionQueue:
setRem_storeProvider:
sharedDBWatcher
setRem_localDBWatcher:
setRem_userNotificationPresentingProvider:
setRem_xpcEventHandler:
_loadAndStartMonitoringAgents:
rem_localDBWatcher
sharedSession
uploadTaskWithRequest:fromData:completionHandler:
containerWithIdentifier:
fetchUserRecordIDWithCompletionHandler:
initWithAPIToken:
setFetchWebAuthTokenCompletionBlock:
initWithServiceName:functionName:serializedRequest:
setFunctionInvokeCompletionBlock:
initWithContainerIdentifier:environment:
initWithContainerID:options:
organizationCloudDatabase
setRequestCompletedBlock:
publicCloudDatabase
setApplicationBundleIdentifierOverride:
ReminderKitAdditions
RDStoreControllerMigrator_RemoveOrphanedLists
RDStoreControllerMigrator
NSObject
ModelObjectConversions
CoreDataProperties
REMCDAuxiliaryChangeInfo
ICSelectorDelayer
REMCDAuxiliaryReminderChangeMoveInfo
RDStoreControllerMigrator_AccountIdentifierMetadata
ICCloudThrottlingPolicy
REMCKSharedObjectOwnerName
REMCDImageAttachment
ICCloudContext
APSConnectionDelegate
DABabysittable
ICCloudContextSyncMetrics
ICLoggable
REMCDAlarmTrigger
ICHasDatabaseScope
REMCDHashtag
REMRDSpotlightIndexInvalidating
_ICCloudConfigurationStorage
ICCloudConfigurationProtocol
ICCloudConfiguration
ICCloudConfigurationDownloadable
ICCloudConfigurationExtraneousAlarm
_ICCloudDefaultValuesConfigurationStorage
REMCDReminder
REMAlarmsProviding
REMRDSpotlightIndexProviding
RDDiskSpaceUtils
REMCDAuxiliaryReminderChangeInfo
REMCDAlarmVehicleTrigger
REMCDList
CKRecordSystemFieldsTransformer
CKShareSystemFieldsTransformer
REMCDAlarmTimeIntervalTrigger
REMCDAlarmLocationTrigger
REMCDMigrationState
REMCDReplicaManager
Phantom
REMCDObject
REMThrowingObjectIDProviding
REMNullableObjectIDProviding
REMSupportedVersionParentEffectiveVersionProviding
REMSupportedVersionProviding
REMSupportedVersionUpdating
REMCDCalDAVNotification
ICUtilities
SaveExtension
ICUserDefaults
REMCDAlarm
ICCloudSchemaCompatibilityUtils
CloudKit
ICCloudObject
REMCDAudioAttachment
RDBMItemType
RDBMItem
RDBMEvent
RDBMRule
RDBMMiningTask
RDBMBehaviorRetriever
REMCDAccount
reminddAdditions
REMCDHashtagLabel
REMCDAuxiliaryReminderChangeDeleteInfo
CoreDataProcessingAdditions
RDStoreControllerMigrator_JSONProperties
_REMNSPersistentHistoryTrackingAbstract
REMCKCloudState
REMCDObjectTreeProcessorDelegateFactory
REMCDRecurrenceRule
ICSyncSettings
REMCDFileAttachment
REMCDSharee
REMCDObjectEffectiveVersionValidationNode
REMCDObjectProcessableTreeNode
REMCDObjectIdentifiableTreeNode
REMCDObjectEffectiveVersionValidationDelegateImpl
REMCDObjectTreeProcessorDelegate
_REMCDObjectEffectiveVersionManualValidationNode
_REMCDObjectEffectiveVersionManualValidationDelegateImpl
REMCDAssignment
REMCDSharedToMeReminderPlaceholder
REMCDSmartList
REMCKServerChangeToken
REMCDAlarmDateTrigger
ICCollaborationController
RDStoreControllerValidationPolicy
RDStoreControllerManagedObjectContext
RDCoreSpotlightDelegateManager
REMCDChangeTrackingState
REMCDURLAttachment
REMCDAttachment
RDStoreController
ICCloudContextDelegate
REMChangeTrackingOptionsProviding
InMemoryPrimaryActiveCKAccountREMObjectID
AccountStorageCaching
ICDataExtensions
ICCloudThrottlingLevel
RDStoreControllerMigrator_PopulateDefaultValues
ICReachability
ICBatchFetchHelper
REMCDObjectTreeProcessor
RDStoreControllerMigrator_CKParentReminderIdentifier
PersonIDSaltGenerator
CloudKitUtils
NSValueTransformer_JSON_REMResoutionTokenMap
NSSecureUnarchiveFromDataTransformer_REMResolutionTokenMap
NSSecureUnarchiveFromDataTransformer_REMColor
NSSecureUnarchiveFromDataTransformer_REMOrderedIdentifierMap
RDStoreControllerMigrator_DisplayDate
v24@0:8Q16
B16@0:8
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"NSPersistentStore"16@"NSMutableDictionary"24
v24@0:8@16
@24@0:8Q16
@48@0:8@16:24d32B40B44
v16@0:8
:16@0:8
v24@0:8:16
d16@0:8
v24@0:8d16
v20@0:8B16
@?16@0:8
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@32@0:8@16d24
@"NSArray"
@"NSDate"
@"NSTimer"
@32@0:8@?16@24
@24@0:8@16
v56@0:8@16@24Q32Q40@?48
v32@0:8@16@?24
v36@0:8@16B24@28
B48@0:8@16@24@32^@40
B32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
@20@0:8B16
B20@0:8B16
B28@0:8@16B24
v32@0:8r*16@?24
v36@0:8@16B24@?28
d24@0:8@16
q16@0:8
v24@0:8q16
@32@0:8@16@?24
@24@0:8@?16
v32@0:8@?16@?24
@32@0:8@16@24
@40@0:8@16@24@32
@48@0:8@16@24@32@40
v44@0:8@16@24B32@?36
v40@0:8@16@24d32
v40@0:8@16@24@?32
v52@0:8@16@24@32B40@?44
@52@0:8@16@24@32@40B48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32@40B48@52
v56@0:8@16@24@32@40@48
B32@0:8@16q24
v44@0:8q16@24B32@?36
@28@0:8@16B24
@36@0:8@16@24B32
@36@0:8@16B24@?28
v48@0:8@16@24@32@?40
v40@0:8q16@24@?32
v40@0:8@16@24q32
@32@0:8@16q24
v32@0:8@16q24
v48@0:8@16@24@32^v40
v32@0:8B16B20@?24
v24@0:8B16B20
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"RDStoreController"
@"CKContainer"
@"<ICCloudContextDelegate>"
@"NSOperationQueue"
@"REMAppleAccountUtilities"
@"ICCloudContextSyncMetrics"
@"NSMutableSet"
@"NSMutableDictionary"
@"ICSelectorDelayer"
@"NSDictionary"
@"NSSet"
@"NSString"
@"APSConnection"
@"_TtC7remindd21RDDebouncerWithNumber"
@"DADBuddyStateObserver"
@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver"
@"RDAccountPersonIDSaltObserver"
@"NSDictionary"16@0:8
@"<REMRDSpotlightIndexProviding>"16@0:8
@"NSSet"16@0:8
@"ICCloudThrottlingPolicy"16@0:8
@"NSNumber"16@0:8
@"ICCloudThrottlingPolicy"
@"NSNumber"
@"_ICCloudConfigurationStorage"
@"NSURLSession"
@"NSArray"16@0:8
B24@0:8^@16
@"REMDisplayDateUtils"
@"REMCDList"
v56@0:8Q16@24Q32@40@?48
q24@0:8@16
@64@0:8@16@24Q32@40@48@56
@"REMObjectID"16@0:8
@"REMObjectID"24@0:8@"NSUUID"16
@24@0:8^@16
@"REMObjectID"24@0:8^@16
@"NSArray"24@0:8@"NSEntityDescription"16
v28@0:8B16@20
@"CKRecord"
@"CKShare"
@"REMCDAccount"
@"REMResolutionTokenMap"
B32@0:8@16^q24
v32@0:8q16@24
q24@0:8q16
@"CKRecordID"16@0:8
@"CKRecord"16@0:8
v32@0:8@"NSMutableSet"16@?<v@?@"<ICCloudObject>"@"CKRecord">24
v24@0:8@"CKRecord"16
v24@0:8@"CKModifyRecordsOperation"16
v32@0:8@"CKModifyRecordsOperation"16@"CKRecord"24
v40@0:8@"CKModifyRecordsOperation"16@"CKRecord"24@"NSError"32
@"NSManagedObjectID"16@0:8
@32@0:8@"CKRecordID"16@"NSManagedObjectContext"24
@32@0:8@"CKRecord"16@"NSManagedObjectContext"24
@40@0:8@"CKRecord"16@"REMCDAccount"24@"NSManagedObjectContext"32
@40@0:8@"CKRecordID"16@"REMCDAccount"24@"NSManagedObjectContext"32
@"NSArray"24@0:8@"NSManagedObjectContext"16
@32@0:8@16#24
@"RDBMItemType"
@48@0:8@16@24d32d40
@64@0:8@16@24@32d40Q48d56
@"<RDBMMiningTaskDelegate>"
@40@0:8d16d24@32
B20@0:8s16
@24@0:8q16
v48@0:8@16@24Q32@?40
@40@0:8@16@24^@32
@32@0:8@16^@24
@"NSCache"
B24@0:8Q16
@"<REMCDObjectTreeNodeIdentifierProtocol>"16@0:8
@"NSManagedObjectID"
@"REMCDObject"
B24@0:8@"<REMCDObjectProcessableTreeNode>"16
v24@0:8@"NSArray"16
@"RDStoreControllerManagedObjectContext"
B24@0:8@?16
@24@0:8#16
Q40@0:8@16o^Q24@?32
B24@0:8q16
@56@0:8@16@24@32q40@48
@48@0:8@16@24q32@40
@"CKServerChangeToken"
@"ICCloudContext"
@"NSManagedObjectContext"
@24@0:8B16B20
Q32@0:8@16@24
Q32@0:8@16^@24
Q28@0:8Q16B24
@"RDStoreControllerValidationPolicy"
@"ICBatchFetchHelper"
@28@0:8B16@20
@"NSPersistentStoreCoordinator"
v32@0:8@"ICCloudContext"16@"CKRecordZoneID"24
v32@0:8@"ICCloudContext"16@"CKRecord"24
v24@0:8@"ICCloudContext"16
B28@0:8B16^@20
@28@0:8B16^@20
B40@0:8@16^B24^@32
B32@0:8@16^@24
B40@0:8@16^@24^@32
B60@0:8@16@24@32@40B48^@52
@40@0:8@16@?24@?32
@"RDAccountPropertiesNotifier"
@"NSURL"
@"RDAccountUtils"
@"NSMergePolicy"
@"NSMapTable"
@"NSHashTable"
@"RDCoreSpotlightDelegateManager"
@"REMObjectID"
@32@0:8d16Q24
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
q20@0:8I16
^{__SCNetworkReachability=}
@48@0:8@16@24Q32Q40
B40@0:8@16@24@32
@"NSMutableArray"
@40@0:8Q16Q24@32
@"<REMCDObjectTreeProcessorDelegate>"
Q24@0:8@16
RDStoreControllerMigrator_RemoveUnparentedObjects
account == NULL
%@%@ = %@
v32@?0@8@16^B24
REMCDHashtagLabel
REMCDAuxiliaryChangeInfo
REMCKServerChangeToken
REMCDSmartList
com.apple.reminders.coalescer.requests
REMCDAuxiliaryReminderChangeMoveInfo
ICCloudBatchIntervalDidChangeNotification
ThrottlingPolicyCurrentBatchCount
ThrottlingPolicyCurrentLevelIndex
ThrottlingPolicyStartTime
unlimited
com.apple.remindd.cloudkit.sync.crashDetected
com.apple.reminders.cloud.waiting
Reminders
RemindersMigration
Metadata
CloudKitAccountStatus
CloudKitZonesNeedingFetchChanges
CloudDirtyUUIDKey
ZoneName
OwnerName
SubscriptionIDs
SubscriptionIDsLastModifiedDate
CloudKitLastSyncSinceInternetReachable
RootRecord
RootRecordType
ICCloudContextFetchRecordChangeOperationDidFinishNotification
ICCloudContextHasPendingOperationsDidChangeNotification
operationCount
ICCloudContextUnrecoverableErrorNotification
com.apple.reminders.cloud
Errors
com.apple.icloud-container.
com.apple.remindd.ICCloudContext.setPersonID
com.apple.remindd.ICCloudContext.setPersonIDSalt
com.apple.remindd.ICCloudContext.mergeLocalObjects
CloudKitUpdateCloudContextState
SYNC[FULL]
SYNC[APS]
SYNC[COREDATA]
PRIMARY-CLOUDKIT
not syncing
v16@?0@"NSSet"8
com.apple.remindd.cloudkit.launch.pending.accounts.initializer
com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver
v16@?0@"NSNotification"8
initWithStoreController
Setting account .personID (accountID: %@, personID: %@, salt: %@)
Unsetting account personID on salt update error (error: %@, accountID: %@, old.personID: %@, account.personIDSalt: %@)
accountStatus=%@ syncDisabledByServer=%d accountAvailable=%d storeControllerSupportCloudKitSyncing=%d icSyncSetting=%d isDisabled=(%d %d) isSystemAvailableForSyncing=%d passedBuddy=%d pendingAccountInitializerCompleteOnLaunch=%d 
UnrecoverableError
reachabilityChanged
cloudKitAccountChanged
v24@?0q8@"NSError"16
v20@?0B8@"NSSet"12
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
Cloud Context
%@ %@
operations
@"NSDictionary"8@?0
Syncing in progress
No Sync in progress
runtimeCloudKitSchemaVersion
cloudKitSchemaCatchUpSyncLastSuccessDate
cloudKitSchemaCatchUpSyncLastSuccessBuildVersion
throttlingPolicy.processingInterval
minimumClientOSSupportedByServer
pollingInterval
reachabilityChangeSyncThrottleInterval
resultsLimitPerSyncOperation
numberOfRecordsToProcessBeforeSaving
fetchBatchSize
persistedSubscriptionIDsValidityPeriod
mergeLocalObjectsInitialRetryInterval
mergeLocalObjectsMaximumRetryCount
mergeLocalObjectsRetryStartOverThrottleInterval
cloudSchemaCatchUpSyncInitialRetryInterval
cloudSchemaCatchUpSyncMaximumRetryCount
objectEffectiveVersionValidationFlushBatchSize
manualSortHintClientSideExpiration
manualSortHintLastAccessedUpdatePolicy
_systemBuildVersion
SyncInterface(UpdateAccounts)
SyncInterface(AppDelegate)
CloudSchemaCatchUpSync
com.apple.remindd.cloudkit.sync.full[%@]
deleteRecordZonesWithZoneIDs
deleting record zones
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
DeleteRecordZones
Cloud syncing is not enabled.
v32@?0@"CKRecordID"8@"NSError"16^B24
v32@?0@"CKRecord"8@"CKRecordID"16@"NSError"24
FetchUserRecord
FetchCompletion
v32@?0@"NSNumber"8@"NSArray"16^B24
FetchIndividualRecords
v24@?0@"CKRecordID"8d16
fetch records operation %@
v16@?0@"NSManagedObjectContext"8
v32@?0@"REMCDObject"8Q16^B24
DeleteShares
objects with shares deleted
SyncAfterDeleteShare
B32@?0@"REMCDObject"8Q16^B24
deleteSharesForObjectsFetchAndCompletion
ModifyCompletion
v24@?0@"<ICCloudObject>"8@"CKRecord"16
Records with cross zone relationship are found. Will try to delete old records and upload new records. {count: %lu}
ModifyRecords
Oversized CloudKit Record
v32@?0@"CKOperation"8Q16^B24
@16@?0@"CKRecord"8
v32@?0Q8@"NSArray"16@"NSArray"24
v24@?0@"CKRecord"8d16
pushing record %@
finished modify (delete) operation without error
finished modify (save) operation with error(s)
finished modify (delete) operation with error(s)
v32@?0@8@"NSError"16^B24
Record counts[%lu] after sorting[%lu] in ICCloudContext were not equal
Fail to save context for %@
@16@?0@"NSOperation"8
You encountered a serious bug in remindd. Will you please file a Radar?
Reminders: %@
Reminders: %@.
Please run 'remindtool diagnose' and attach the log file to the radar.
SaveRecordZones
ProcessObjects
requestFire
com.apple.remindd.cloudkit.sync.coredata
B32@?0#8Q16^B24
Merge.Local
com.apple.remindd.cloudkit.merge.local.coredata
v24@?0@"NSArray"8@"NSManagedObjectContext"16
unset .daWasMigrated
merged objects
needsToProcessAllDirtyObjects
REMCKCloudState
object
SaveChangedObjects
ProcessCompletion
PushNotification
CreateFetchZoneChanges
FetchZoneChangesCompletion
FetchRecordZoneChanges
record changed
v16@?0@"RDStoreControllerManagedObjectContext"8
v24@?0@"CKRecordID"8@"NSString"16
zone change token updated
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24
record zone fetch completion
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
fetch record zone changes completion
Poll
FetchDatabaseChanges
FetchDatabaseChangesCompletion
v16@?0@"CKRecordZoneID"8
v16@?0@"CKServerChangeToken"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
ckZoneOwnerName == %@
deleting shared zone
DatabaseSubscription-%@
v24@?0@"CKDatabase"8@"NSError"16
SaveSubscriptions
Foreground
Background
reachable
not reachable
com.apple.remindd.cloudkit.updateCloudContextState
accountsDidChange
RestartCloudKit
UpdateContextState
v24@?0@"CKOperation"8@"NSError"16
B32@?0@"NSError"8Q16^B24
v32@?0@"NSString"8@"NSNumber"16^B24
Subscriptions
RetryCKFetchDatabaseChangesOperation
Retrying
RetryCloudSchemaCatchUpSync
RetryMergeLocalObjects
zone changes
(name: %@, id: %@, inactive: %d)
(name: %@, id: %@, class: %@)
(name: %@, id: %@)
saving server change token
deleting server change token
deleting all server change tokens
PollCloudKitWhenLaunchingAndBackgrounding
accountsDidChange_cancelEverything
com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver
applicationWillEnterForeground
com.apple.remindd.cloudkit.sync.aps
Account/%@
ICCloudContext
reason
fetchedRecordCount
deletedRecordsCount
modifiedRecordCount
processedRecordCount
averageRecordsPerSecond
saveCount
duration
%.4f
REMCDReminder
isExecuting
isFinished
alarm
hashtagLabel
REMCDFileAttachment
CloudConfigurationPath
ICCloudConfigurationChangedNotification
throttlingPolicy
throttlingPolicyResetIntervalSeconds
count
intervalSeconds
maxInlineAssetSizeBytes
maxAttachmentsPerNote
maxSubAttachmentsPerAttachment
pollingIntervalSeconds
fetchCacheCountLimit
maximumAttachmentSizeMB
minimumClientVersions
configurationVersion
launchAndSignificantTimeChangePollThrottleIntervalV2
cloudConfigurationDownloadThrottleInterval
apsDebouncerDefaultInterval
apsDebouncerMigrationInProgressInterval
apsDebouncerWatchDefaultInterval
apsDebouncerWatchMigrationInProgressInterval
accountChangedDebouncerInterval
extraneousAlarmsCleanUpTriggerReductionFactor
extraneousAlarmsDeleteCountLimit
extraneousAlarmsDeleteCountThreshold
extraneousAlarmsBackoffThrottleInterval
extraneousAlarmsThrottleInterval
suggestedAttributesTrainingOverrides
suggestedAttributesHarvestingOverrides
alarmIDsLimitPerReminder
WATCH
5,0,0
https://configuration.apple.com/configurations/internetservices/cloudkit/reminders-1.0.plist
B32@?0@"NSURL"8Q16^B24
Normal
RemoteConfiguration
plist
CloudConfigurations
v12@?0B8
coreBehavior
support
embedding
enabledOniOS
enabledOnmacOS
relativeSupport
neighborsToConsider
REMCKSharedObjectOwnerName
list
assignments
hashtags
recurrenceRules
reminder
REMCDAuxiliaryReminderChangeInfo
REMCDCalDAVNotification
<%@>
<%@ %@>
REMCDRecurrenceRule
reminderIDsOrdering
reminderIDsMergeableOrdering_v2_JSON
parentAccount
parentReminder
<ServerChangeToken %@>
REMCDAlarmTimeIntervalTrigger
REMCDChangeTrackingState
REMCDHashtag
parentList
com.apple.remindd.RDAccountPropertiesErrorDomain
REMCDReplicaManager
SELF in %@
B32@?0@"NSManagedObject"8Q16^B24
resolutionTokenMap_v3_JSONData
resolutionTokenMapData
B16@?0@"REMCDObject"8
Failed to create REMObjectID: REMCDObject.identifier or REMCDObject.entity.name is nil.
REMCDObject
com.apple.reminders
Abstract method called -[%@ %@]
com.apple.reminderkit
default
cccc
Deleted
Imported
ResolutionTokenMap
MinimumSupportedAppVersion
parentCloudObject.cloudAccount
ckNeedsToBeFetchedFromCloud
ckDirtyFlags
com.apple.reminders.cloud.failure-counts
%@/%@
parentCloudObject
ckZoneOwnerName
account.type == %@
ckDirtyFlags > 0
ckNeedsInitialFetchFromCloud
%@-%@
TemporaryAssetFiles
B24@?0@"NSURL"8@"NSError"16
isSharedViaICloud
cloudAccount.accountType
ckServerShare
ckServerRecord
parentCloudObject.isSharedViaICloud
serverShareCheckingParent
serverShare
com.apple.reminders.cloud.versions-by-operation
com.apple.reminders.cloud.deleted-by-this-device
objectIdentifier == %@
inCloud
needsToBePushedToCloud
needsToBeDeletedFromCloud
latestVersionSyncedToCloud
currentLocalVersion
localVersionDate
hasAllMandatoryFields
failedToSyncCount
numberOfPushAttemptsToWaitCount
minimumSupportedAppVersion
REMCDAudioAttachment
fakeItemType
personIDSalt_v1
REMCDAttachment
REMCDImageAttachment
REMCDAuxiliaryReminderChangeDeleteInfo
RDStoreControllerMigrator_JSONProperties
resolutionTokenMap_v2_JSON
changedEntity
You must override %@ in a subclass
v32@?0@"NSManagedObjectContext"8@"REMCDChangeTrackingState"16^@24
Failed to find entity name in -fetchHistoryAfterToken:entityName.
%K IN %@
Attempting to get errorChangeSet with nil error.
clientName == %@ AND accountIdentifier == %@
databaseScope
(none)
v32@?0@"CKRecordZoneID"8@"CKFetchRecordZoneChangesConfiguration"16^B24
serverChangeToken
backingCDObject
v32@?0@8Q16^B24
REMCDAlarmDateTrigger
REMCDAlarm
B32@?0@8Q16^B24
<%@ 
UNKNOWN_IDENTIFIER
%@ = %@
 %@=%@
v32@?0@"NSString"8@16^B24
REMCDAlarmLocationTrigger
account == %@
zoneName == %@
ownerName == %@
databaseScope == %ld
zoneName
REMCDAlarmVehicleTrigger
REMCDMigrationState
The object we want to share is not found (objectID: %@}
v24@?0@"CKShare"8@"NSData"16
Failed to create share for object {object: %@}
Saving Share
SaveShare
FetchShare
shareURL
v32@?0@"CKShareMetadata"8@"CKShare"16@"NSError"24
FetchRecordForAcceptedShare
SyncAfterAcceptShare
AcceptShare
com.apple.reminder.list.name.siri_data_changed
nil author
destinationEntity.name
q24@?0@"NSManagedObjectID"8@"NSManagedObjectID"16
v32@?0@"NSManagedObjectID"8Q16^B24
REMCDAccount
REMCDSharee
B32@?0@"CKRecord"8Q16^B24
RDStoreControllerDidRemoveAccountStoresNotification
RDStoreControllerAccountIdentifier
RDStoreControllerCloudAccountsDidChangeNotification
RDStoreControllerCloudAccountsDidChangeNotificationRemovedAccountObjectIDsKey
RDStoreControllerREMAccountPropertiesDidUpdateNotification
local
Data-
Stores/
Files/
MLModels/
TemporaryMLModels/
RDMarkedForDeletion
%@%@.sqlite
sqlite
com.apple.remindd.RDStoreController.validateAccounts
UUIDString
type IN %@
com.apple.remindd.RDStoreController.storesForAccounts
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
Account-
Attachment-
Failed to create mlModelsContainerURL {url: %@}
(nil)
com.apple.RDStoreController.purgeDeleted
markedForDeletion == YES
type == %d
com.apple.RDStoreController.ckFetchUser
merged migration state from user record
com.apple.RDStoreController.ckZoneNotFound
cleared server records for all cloud objects
com.apple.RDStoreController.ckSharedZoneWasDeleted
deleted all local database objects after shared zone was deleted
com.apple.RDStoreController.ckDeleteZone
com.apple.remindd.RDStoreController.observePrimaryCloudKitAccountPersonIDSaltChanges
accountStore.%@
{storeID: %@, URL: %@}
accountExternalIDsMap.%@
accountStorageCache.keys
accountStorageCache.hasAllGenericAccounts
containerURL
isolated
primaryActiveCKAccountID
remCurrentRuntimeVersion
supportsAccountUtils
supportsAlarmEngine
supportsAssignmentNotificationEngine
supportsCoreSpotlightIndexing
supportsSyncingToCloudKit
supportsApplicationShortcuts
supportsLocalInternalAccount
supportsSuggestedAttributes
<%@ %@
 changeTag=%@
 share=%@
REMCDURLAttachment
REMCDList
<batchInterval=%d numberOfBatches=%d>
RDStoreControllerMigrator_PopulateDefaultValues
%K == NULL
%@.%@(%@)
kNetworkReachabilityChangedNotification
ckIdentifier IN %@
REMCDAlarmTrigger
REMCDObjectTreeProcessor: Unsupported traversal order {%ld}
RDStoreControllerMigrator_CKParentReminderIdentifier
%K != NULL
ckServerRecordData
%@.%@
ckIdentifier
ckParentReminderIdentifier
REMCDAssignment
Setting account .personIDSalt {accountID: %@, salt: %@, resolutionToken: %@}
REMCDSharedToMeReminderPlaceholder
RDStoreControllerMigrator_DisplayDate
LAUNCH remindd {pid: %d}
INSearchForNotebookItemsIntent
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
status
disabled
month
acknowledgedDate
alarmUID
originalAlarmUID
triggerID
alarmID
minimumSupportedVersion
smartListType
sortingStyle
manualOrdering
name
color
badgeEmblem
filterData
showingLargeAttachments
modifiedDate
daCalendarItemUniqueIdentifier
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
titleDocumentData
titleDocument
completed
completionDate
priority
flagged
creationDate
lastModifiedDate
startDateComponents
dueDateComponents
timeZone
allDay
notesDocumentData
notesDocument
attachments
alarms
contactHandles
icsDisplayOrder
icsUrl
importedICSData
userActivity
siriFoundInAppsData
lastBannerPresentationDate
primaryLocaleInferredFromLastUsedKeyboard
parentReminderID
subtaskIDsToUndelete
hashtagIDsToUndelete
siriFoundInAppsUserConfirmation
type
listIDsMergeableOrdering
listsDADisplayOrderChanged
markedForRemoval
personID
personIDSalt
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
persistenceCloudSchemaVersion
inactive
daConstraintsDescriptionPath
daAllowsCalendarAddDeleteModify
daSupportsSharedCalendars
daWasMigrated
listIDsToUndelete
smartListIDsToUndelete
childListIDsToUndelete
childSmartListIDsToUndelete
parentAccountID
parentListID
reminderIDsToUndelete
sharedOwnerID
reminderIDsMergeableOrdering
remindersICSDisplayOrderChanged
daExternalIdentificationTag
daBulkRequests
daDisplayOrder
daIsEventOnlyContainer
daIsReadOnly
daIsImmutable
daIsNotificationsCollection
isGroup
lastUserAccessDate
reminderIDsMergeableOrderingData
reminderIDsOrderingHints
sharedOwnerName
sharedOwnerAddress
sharingStatus
sharees
calDAVNotifications
timeInterval
dateComponents
structuredLocation
proximity
event
reminderIDsMergeableOrderingAsset
reminderIDs
reminderIDsAsset
alarmIDs
attachmentIDs
assignmentIDs
dueDate
hashtagIDs
notesDocumentAsset
recurrenceRuleIDs
startDate
titleDocumentAsset
listIDsMergeableOrderingAsset
sharedListIDsToOwnerNames
firstOccurrenceCreationDate
trigger
reminderID
sharedToMeReminderCKIdentifier
Sentence2Vec
UniversalGrammar
FilteredStopWords
SignificantTimeChangeNotification
com.apple.mobile.keybagd.first_unlock
lists
assigneeID
originatorID
recurrenceEnd
frequency
interval
firstDayOfTheWeek
daysOfTheWeek
daysOfTheMonth
daysOfTheYear
weeksOfTheYear
monthsOfTheYear
setPositions
File
Image
fileName
fileSize
height
width
metadata
metadataAsset
alarmStorage
alarm.reminder.identifier
endDate
occurrenceCount
nonExistentRelationship
nonExistentValue
uuidString
hostURL
Reminders 
Lembretes 
Recordatoris 
Podsjetnici 
ipom
nky 
mindelser 
Herinneringen 
Muistutukset 
Erinnerungen 
keztet
Pengingat 
Promemoria 
Peringatan 
minnelser 
Przypomnienia 
Mementouri 
Pripomienky 
Recordatorios 
msat
lar 
c nh
Where are my reminders?
Onde est
o meus lembretes?
On s
n els meus recordatoris?
Gdje su moji podsjetnici?
Kde jsou m
ipom
nky?
Hvor er mine p
mindelser?
Waar zijn mij herinneringen?
Miss
 muistutukseni ovat?
 sont mes rappels
 sont mes rappels?
Wo sind meine Erinnerungen?
Hol vannak az eml
keztet
Di mana pengingat saya?
Dove sono i miei promemoria?
Mana peringatan saya?
Hvor er p
minnelsene mine?
Gdzie s
 moje przypomnienia?
Onde est
o os meus lembretes?
Unde sunt mementourile mele?
Kde s
 moje pripomienky?
nde est
n mis recordatorios?
Var 
r mina p
minnelser?
msat
m nerede?
i nh
The creator of this list has upgraded these reminders.
O criador desta lista atualizou esses lembretes.
usuari que ha creat aquesta llista ha actualitzat els recordatoris.
Autor ovog popisa nadogradio je podsjetnike.
rce tohoto seznamu aktualizoval tyto p
ipom
nky.
Opretteren af denne liste har opdateret p
mindelserne.
De maker van deze lijst heeft deze herinneringen bijgewerkt.
n listan luoja on p
ivitt
nyt n
 muistutukset.
Le cr
ateur de cette liste a actualis
 ces rappels.
Der Ersteller dieser Liste hat diese Erinnerungen aktualisiert.
A lista k
je friss
tette ezeket az eml
keztet
ket.
Pembuat daftar tersebut telah meningkatkan pengingat ini.
Il creatore dell
elenco ha aggiornato i promemoria.
Pencipta senarai ini telah mengemas kini peringatan ini.
Oppretteren av denne listen har oppgradert disse p
minnelsene.
rca listy uaktualni
 przypomnienia
O criador desta lista atualizou estes lembretes.
Creatorul acestei liste a f
cut upgrade pentru aceste mementouri.
Autor tohto zoznamu aktualizoval tieto pripomienky.
El usuario que ha creado esta lista ha actualizado estos recordatorios.
Personen som skapade listan har uppgraderat dessa p
minnelser.
Bu listeyi olu
turan ki
i bu an
msat
kseltti.
o danh s
ch n
ng c
p nh
ng l
i nh
displayName
firstName
middleName
lastName
namePrefix
nameSuffix
nickname
address
accessLevel
fileURL
isTemporaryFileURL
eTag
hintDataExcludingRemindersInLocalAccountAsAsset
hintDataExcludingRemindersInLocalAccountAsBytes
hintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
hintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
lastAccessed
serializationVersion
com.apple.UNNotificationDismissActionIdentifier
com.apple.remindd.reminderAlarm.debugDismiss
com.apple.remindd.reminderAlarm.markAsCompleted
com.apple.remindd.reminderAlarm.snoozeOneHour
com.apple.remindd.reminderAlarm.snoozeOneDay
com.apple.remindd.reminderAlarm.snoozeToNextThirds
com.apple.remindd.reminderAlarm.snoozeToNextWeekend
com.apple.remindd.siriFoundInApps.addToReminders
com.apple.remindd.assignmentNotification.viewAssignmentInList
com.apple.remindd.assignmentNotification.declineAssignment
latitude
longitude
radius
locationUID
ckServerShareData
com.apple.remindd.suggestedAttributesAutoTrainer
com.apple.remindd.ICCloudConfigurationUpdater
com.apple.remindd.UnitTests
complete
pendingWork
noWork
error
reminders
Date
Location
TimeInterval
Vehicle
contactLabel
mapKitHandle
referenceFrameString
routing
Remindd Launch
DataAccess.Requests.Channel
Not Running DataAccess
v16@?0@"<OS_xpc_object>"8
com.apple.notifyd.matching
Running DataAccess
DataAccess.Requests.Queue
v32@?0Q8Q16Q24
Could not load some of our databases due to disk full. Going to run a barebones daemon.
Running in the buddy setup user. Going to run a barebones daemon.
BarebonesDaemon dropping XPC RDDynamicXPCActivity {identifier: %{public}@}
Failed to get name from xpc event. Not posting analytics for notifyd notification
os_transaction INIT {name: com.apple.remindd.xpcEvents}
com.apple.remindd.xpcEvents
Reminder barebones daemon started
os_transaction RELEASE {name: com.apple.remindd.xpcEvents}
Unknown RDFreeSpaceResult value
RDStoreController.requestFreeSpaceToLoadAccountStores did not succeed {result: %d, requested: %llu, available: %llu}
remindd couldn't get the requested free space to load account stores, will terminate after {delay: %d}
remindd is now exiting in response to requested free space to load account stores {requested: %llu, available: %llu}
Notifying stores must refresh due to relaunching upon requested free space to load account stores
remindd raised signal (%d) in try to terminate asap
RDStoreController.requestFreeSpaceToLoadAccountStores completes with .success but still doesn't have enough space {requested: %llu, available: %llu}
remindd is now exiting after failure to get requested disk space to load account stores in hope to get relaunched in some better future
BarebonesDaemon (DiskFull) dropping XPC RDDynamicXPCActivity {identifier: %{public}@}
Unexpected eventHandler queue {self.queue: %@, queue: %@}
Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %@}
Dropping reader message because target has been deallocated {identifier: %@}
remindd/RDXPCEventStream.swift
There must be exactly one XPCEventStream instance per run
Triggered proactiveExitStream.eventHandler. Exiting... {name: com.apple.remindd.xpcEvents}
Contact Interaction
Alarm and today engines are disabled because store controller does not support them
Assignment notification engine is disabled because store controller does not support it
RDHashtagLabelUpdater is disabled because store controller does not support it
Application shortcut engine is disabled because store controller does not support application shortcuts
Suggested attributes disabled because not supported by store controller
Widget refresh disabled because not supported by store controller
suggestedAttributesAutoTrainer
applicationShortcut
AssignmentNotifEngine
Starting RDTodayNotificationAssembly
com.apple.remindd.today-notification
todayNotificationEngine
os_transaction INIT {name: com.apple.remindd.RDAlarmEngineAssembly}
com.apple.remindd.RDAlarmEngineAssembly
Starting alarm engine assembly
com.apple.remindd.time-alarm
notificationConsumer
Failed to register notify token for _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {status: %d}
Starting RDAssignmentNotificationEngineAssembly
refreshFromLastConsumed
refreshFromLastConsumedOnLaunch
com.apple.remindd.assignmentNotificationEngine.crashDetected
AssignmentNotificationEngine
Notifying stores did change
remindd is now exiting in response to first unlock
Notifying stores must refresh due to relaunching upon first unlock notification
Sandbox: realpath(%@) failed %{public}d (%@)
Sandbox: confstr() for type %{public}d failed %{public}d (%@)
Sandbox: TMPDIR=%@
Sandbox: _set_user_dir_suffix() failed %{public}d (%@)
os_transaction INIT {name: com.apple.remindd.launch}
com.apple.remindd.launch
os_transaction RELEASE {name: com.apple.remindd.launch}
CKRecordValue
CNKeyDescriptor
REMUserDefaultsObserveToken
OS_os_transaction
RDAccountPropertiesObserving
uuid
callbackQueue
T@"OS_dispatch_queue",N,R
account
T@"<_TtP7remindd20ObservingAccountInfo_>",N,R
propertyName
T@"NSString",N,R
@"OS_dispatch_queue"16@0:8
@"<_TtP7remindd20ObservingAccountInfo_>"16@0:8
@"NSString"16@0:8
ICCloudConfigurationDownloadable
_TtP7remindd20ObservingAccountInfo_
T@"REMObjectID",N,R
Tq,N,R
@"REMObjectID"16@0:8
DADREMUserNotificationPresenting
v40@0:8@16@24@?32
v40@0:8@"NSString"16@"<DADREMUserNotificationContent>"24@?<v@?@"NSError">32
@"<DADREMUserNotificationContent>"24@0:8@"REMList"16
OS_xpc_object
v24@0:8@"NSNumber"16
NSSecureCoding
supportsSecureCoding
REMDAChangedIdentifierResult
REMDAChangedModelObjectResult
REMNullableObjectIDProviding
@"REMObjectID"24@0:8@"NSUUID"16
cdEntityName
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
NSCopying
@24@0:8^{_NSZone=}16
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
B32@?0@8q16^B24
[implSort] pre-sort: moved object {objectID: %@, from: %d, to: %d}
[implSort] pre-sort: we have more than 1 sorting hints but we currently only support to accomate 1 {count: %d}
[implSort] Count of CD objects is not same as that of the Ordering Map {allCDObjects#: %d, orderingIndexMap#: %d}
[implSort] Unexpected CD object in ordered set {object: %@}
[implSort] Objects are already in correct order. Will skip sorting
[implSort] Performing full CD mutableOrderedSet.sort {total.count: %d}
[implSort] _forceDisableFullRemindersSorting = YES so we will abort from running mutableOrderedSet.sort now.
[implSort] LOOKATME: Pre-sorted but full CD mutableOrderedSet.sort still needed.
relationship contains non-REMCDObject objects
could not get a sorting order from object
Invalid UUID found in REMCRMergeableOrderedSet<NSString> when converting it to REMCRMergeableOrderedSet<REMObjectID> {uuidString: %@}
submitAllHubbleKPIs
StartMigrationRequest.Credential
StartMigrationResponse.Details
StartMigrationResponse.Error
MigrateRequest.User
MigrateResponse.Details
MigrateResponse.Error
MigrateResponse.NextStep
UnmigrateResponse.Details
UnmigrateResponse.Error
_TtC7remindd29TantorMigrationAPIAsyncClient
invocable
_TtCV7remindd21StartMigrationRequestP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_source
_disableCache
_TtCV7remindd22StartMigrationResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_state
_result
_log
_TtCV7remindd14MigrateRequestP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_options
_userInitiated
_simulatedError
_TtCV7remindd15MigrateResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_nextStep
_logs
_TtCV7remindd17UnmigrateResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
message
success
time_elapsed
logs
NONE
defined
is_terminated
next_invocation_in_seconds
invocation_count
failure_count
retry_count
is_observer
lists_migrated
reminders_migrated
state
next_step
dsID
partition
DRY_RUN
DISABLE_SHARING
SAVE_ORIGINAL_JSON
USER_INITIATED
NO_CLEANUP
archivePath
embeddedTestData
user_initiated
simulated_error
baseURL
hostname
mmeAuthToken
credential
disableCache
Trying to merge CKRecord to an object without MOC
OwningReminderIdentifier
Cannot convert to a UUID from CKRecord to owningReminderIdentifier {ckIdentifier: %@}
EncryptedOriginatorIdentifier
Originator object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %@, originatorID: %@}
EncryptedAssigneeIdentifier
Assignee object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %@, assigneeID: %@}
Fixing broken references for assignment {assignmentID: %{public}@, reminderID: %@{public}}
Reminder is marked for deletion but assignment is not {assignmentID: %{public}@, reminderID: %{public}@}
MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %@.
MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %@.
MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %@.
@32@0:8@16@24
@40@0:8@16@24@32
ckIdentifier == %@
fetching manual sort hint object ID returned more than one result {listType: %@ listID: %@, count: %@}
predefinedSmartList
DELETE(-soft) manual sort hint (listType: %d, listID: %{public}@, identifier: %{public}@)
_TtC7remindd29RDApplicationShortcutAssembly
_TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider
@16@0:8
rem_accountObjectID
accountDescription
T@"NSString",N,C
T@"REMObjectID",N,&,Vrem_accountObjectID
_TtC7remindd30RDAssignmentNotificationEngine
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
userNotificationCenter
storeControllerNotificationCenter
daemonController
manualTestRun
storeControllerObservationToken
started
currentUserShareParticipantIDsOverrideByListID
_TtCC7remindd30RDAssignmentNotificationEngine13BabysitTarget
RDAssignmentNotificationEngine doesn't expect to receive actions of this type. {type: %@, response: %@}
RDAssignmentNotificationEngine: Completing action handler by calling completionHandler now.
RDAssignmentNotificationEngine: Processing assignment notification response {actionIdentifier:%@, reminderIDs: %@}
RDAssignmentNotificationEngine: Unexpected action %@ for notification type .assignmentNotification
RDAssignmentNotificationEngine: Error trying to retrieve reminder {reminderIDs: %@, error: %@}
v16@?0@"NSError"8
RDAssignmentNotificationEngine: Updated reminder successfully. {actionIdentifier: %@, reminderIDs: %@}
RDAssignmentNotificationEngine: Save error. Failed to save updates from notification response {error: %@ , reminderIDs: %@, actionIdentifier: %@}
com.apple.remindd.assignmentNotificationEngine.babysitter
RDAssignmentNotificationEngine: List has no sharee, huh? {listID: %{public}@}
RDAssignmentNotificationEngine: Can't find any item to populate, this is not expected {map: %@}
RDAssignmentNotificationEngine: Populating assignment notification content with all nullified originators {listID: %{public}@, assignedCount: %ld, selected: %{public}@}
com.apple.remindd.assignmentNotification.
v20@?0B8@"NSError"12
RDAssignmentNotificationEngine: Populating assignment notification content {listID: %{public}@, assignedCount: %ld, originatorCount: %ld, selected: %{public}@}
RDAssignmentNotificationEngine: Posted Assignment notification {listID: %{public}@, count: %ld}
com.apple.remindd.userAction
Posted Assignment Notification
RDAssignmentNotificationEngine: Unable to post Assignment notification {error: %@, listID: %{public}@, count: %ld}
RDAssignmentNotificationEngine: Programming fault: {%@}
Unknown combination of number of assignments and orignators.
You must have at least 1 assignment and 1 originator.
RDAssignmentNotificationEngine: Couldn't match the sharee object of the originator and it is not nullified {reminderID: %{public}@, assignment: %{public}@}
RDAssignmentNotificationEngine: The originator has absolutely no hint of how to display a formatted name... {assignment: %{public}@}
RDAssignmentNotificationEngine: No since-token from change tracking {account: %{public}@}
RDAssignmentNotificationEngine: No updated change token from change tracking (no changes) {account: %{public}@, since: %{public}@}
RDAssignmentNotificationEngine: Processing change set {account: %{public}@, since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: No inserted assignments found in change {since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: Error ocurred when fetching inserted assignments' reminders {error: %@}
RDAssignmentNotificationEngine: Tracked insertion is not an REMAssignment, huh? {inserted: %@}
RDAssignmentNotificationEngine: User opts to not posting assignment notifications, mark change set as consumed right away {account: %{public}@, since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: Current user is not participating the list of this inserted assignment {list: %{public}@}
RDAssignmentNotificationEngine: Can't find the correspinding inserted assignments from the reminderID, how come? {reminder: %{public}@}
RDAssignmentNotificationEngine: This is an inserted assignment we want to notify {list: %{public}@, reminder: %{public}@, assignment: %{public}@}
RDAssignmentNotificationEngine: Should have selected only the ONE most recent current assignment, not multiple {reminder: %{public}@}
RDAssignmentNotificationEngine: Reminder is already completed, skipping from showing assignment notification {reminder: %{public}@}
RDAssignmentNotificationEngine: Not tracking changes since there's no active cloudkit account logged in or enabled
com.apple.remindd.assignmentNotificationEngine
Babysitting RDAssignmentNotificationEngine because it failed too many times {waiterID: %{public}@}.
RDAssignmentNotificationEngine: Mark to current token as consumed due to Babysitting {account: %{public}@, token: %{public}@}
RDAssignmentNotificationEngine: User has disabled assignment notifications.
<%@>: %ld inserted assignments
RDAssignmentNotificationEngine: Assignments to notify in this change set {stats: %{public}@}
RDAssignmentNotificationEngine: No assignment to notify in this change set
RDAssignmentNotificationEngine: No account eligible for assignment change tracking, no assignment to notify.
RDAssignmentNotificationEngine: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}@, error: %@}
RDAssignmentNotificationEngine.start() must be called exactly once
Starting RDAssignmentNotificationEngine
os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.start}
com.apple.remindd.assignmentNotificationEngine.start
RDAssignmentNotificationEngine: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %d}
RDAssignmentNotificationEngine: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %@}
os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.start}
Received storeController changed notification after RDAssignmentNotificationEngine was deallocated
os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}
com.apple.remindd.assignmentNotificationEngine.storeControllerChange
os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}
RDAssignmentNotificationEngine: (Re-)initialized changeTrackingHelpers upon cloudAccountsDidChange.
REMDAAccountProviding
#16@0:8
superclass
description
_TtC7remindd12RDDebouncing
_TtCC7remindd12RDDebouncing10LoadFactor
windowSize
thresholdForNewWindow
averageInterval
numOfSamples
measurements
lastFire
handler
debouncingPolicy
loadFactor
label
isEnabled
pendingWorkItem
pendingValues
pendingCompletionBlocks
coalescedUpdates
_TtC7remindd21RDDebouncerWithNumber
d16@0:8
v24@0:8d16
@40@0:8d16@24@?32
debouncer
debouncingInterval
Td,N
remindd.RDDebouncerWithNumber
remindd.RDDebouncer
_TtC7remindd37RDExchangeAccountComplimentaryService
setPersonIDAuthor
personIDSaltObserver
pendingSystemAvailable
bootstrapCancellables
storeControllerEventCancellables
systemAvailabilityCheckerBlockingQueue
appleAccountUtilities
com.apple.remindd.ExchACS.accountSetPersonID.author
com.apple.remindd.ExchACS.launch.systemAvailabilityBlockingQueue
os_transaction INIT {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}
com.apple.remindd.ExchACS.launch.pending.pendingSystemAvailable
ExchACS: Couldn't create os_transaction_t for waiting pendingSystemAvailable
ExchACS: Received RDStoreControllerCloudAccountsDidChange, gonna reset the personIDSaltObserver {observer: %{public}@}
ExchACS: Received DidCompleteInitializeAllAccountsNotification
ExchACS: StoreController is nil when observePrimaryCloudKitAccountPersonIDSaltChanges() is invoked
ExchACS is not observing primary CK account personIDSalt changes this time as we have no exchange account right now
v16@?0@"NSData"8
ExchACS failed to start observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}@}
ExchACS is now observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}@, observer: %{public}@}
ExchACS is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}@}
ExchACS: Trying to call observePrimaryCloudKitAccountPersonIDSaltChanges() while still pending system to be available
ExchACS received a primary CK account personIDSalt error {debugTrackingUUID: %{public}@, saltError: %{public}@}
ExchACS failed to reset account personID to nil {accountIDs: %{public}@, saltError: %{public}@, saveError: %@}
ExchACS will reset account personID to nil {accountID: %{public}@, origPersonID: %@, saltError: %{public}@}
ExchACS failed to fetch Exchange accounts from database {error: %@}
ExchACS received a primary CK account personIDSalt change or initial value {debugTrackingUUID: %{public}@}
ExchACS failed to saved account personID {accountIDs: %{public}@, saveError: %@}
ExchACS failed to generate a hashed personID from the salt {accountID: %{public}@}
ExchACS will save update to account personID {accountIDs: %{public}@, newPersonID: %@, oldPersonID: %@}
ExchACS: hashedAccountPersonID: account: %@, nonNilUsername = %@
os_transaction RELEASE {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}
ExchACS: Done waiting for system to become available upon daemon launch, now trying to observe for primary CK account PersonIDSalt changes
topLevelElementIDs
secondaryLevelElementIDsByTopLevelElementID
topLevelElementIDsByContainerID
lastModifiedByContainerID
_TtC7remindd19RDXPCDebugPerformer
storeContainerToken
notificationCenter
storeControllerByContainerURL
manualHashtagLabelUpdater
v24@0:8@?16
v60@0:8@16@24@32@40B48@?52
v56@0:8d16d24d32@40@?48
v40@0:8@16q24@?32
v24@0:8q16
_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3847DebugPerformerManualHashtagLabelUpdaterDelegate
RDXPCDebugPerformer: updateRemCurrentRuntimeVersionDebuggingOverride initiated
RDXPCDebugPerformer: updateMinimumSupportedVersion initiated
updateMinimumSupportedVersion
identifier == %@
 object with identifier 
RDXPCDebugPerformer: fetchAccountListOrderedIdentifiers initiated
fetchAccountListOrderedIdentifiers
RDXPCDebugPerformer: validateSharedToMeReminderPlaceholders initiated
validateSharedToMeReminderPlaceholder
RDXPCDebugPerformer: validateHashtagsWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifier initiated
validateHashtagWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifier
RDXPCDebugPerformer: validateHashtagLabelsWithMismatchedHashtags initiated
validateHashtagWithMismatchedHashtags
RDXPCDebugPerformer: validateHashtagsWithoutHashtagLabel initiated
validateHashtagsWithoutHashtagLabel
RDXPCDebugPerformer: validateHashtagLabelsWithConcealedHashtags initiated
validateHashtagLabelsWithConcealedHashtags
RDXPCDebugPerformer: validateHashtagLabelsWithoutHashtag initiated
validateHashtagLabelsWithoutHashtag
RDXPCDebugPerformer: Failed to refresh hashtag labels; missing manualHashtagLabelUpdater
RDXPCDebugPerformer: Failed to set up manual hashtag label updater; missing xpcDaemon
RDXPCDebugPerformer: updateManualSortHint initiated
updateManualSortHint
There is no manual sort hint with given uuid: 
There are more than one manual sort hint for given uuid: 
resetManualSortHintWithBeforeLastAccessed
RDXPCDebugPerformer: %@ initiated
resetAllManualSortHintWithListID
Incorrect REMCDManualSortHint.ListType: 
There are more than one manual sort hint for given listType[
resetManualSortHintWithIdentifier
resetAllManualSortHints
RDXPCDebugPerformer: removeManualSortHint initiated
removeManualSortHint
fetchManualSortHintWithListTypeID
containerIDsWithLocalContainerIDPrefix
elementIDsWithLocalElementIDPrefix
RDXPCDebugPerformer: CloudContext is nil -- can't sync to cloudKit
nil RDStoreController.cloudContext
RDXPCDebugPerformer: Called resetBabysitter {waiterID: %@}
RDXPCDebugPerformer: Request to destroy isolated container {token: %@, storeControllers: %@}
RDXPCDebugPerformer: Failed to delete isolated container {error: %@, token: %@}
RDXPCDebugPerformer: Destroyed isolated container {token: %@, url: %@}
RDXPCDebugPerformer: Destroying an isolated container that still has live references to it - can be normal {token: %@, url: %@}
RDXPCDebugPerformer: Created isolated store {token: %@}
v24@?0@"CNContact"8^B16
RDXPCDebugPerformer called crash {message: %@}
RDXPCDebugPerformer: persistenceStoreID for {accountID: %@}
RDXPCDebugPerformer: Debug: addGeofence {center=(%.4lf,%.4lf), r=%.4lf, UUID=%@}
RDXPCDebugPerformer: Debug: removeGeofence {UUID=%@}
RDXPCDebugPerformer: Debug: fetchGeofences
RDXPCDebugPerformer: fireDebugNotification initiated with text: %@
storeController.disabled (ppt mode?)
cloudContext == nil
No CloudKit Account
CloudKit Account is not active
StoreController has CloudKit disabled. Running in ppt mode?
RDXPCDebugPerformer: Failed cancelCloudKitSync {error: %@}
StoreController missing CloudContext
RDXPCDebugPerformer: testReinitializeCloudKit initiated
No primary iCloud account signed in with ACAccount
RDXPCDebugPerformer: testReinitializeCloudKit: Done ACAccont migration flags unset {acAccount: %@}
testReinitializeCloudKit
RDXPCDebugPerformer: testReinitializeCloudKit: ERROR unsetting ACAccount migration flags {acAccount: %@, error: %@}
Can't get CK account identifier
StoreController missing AccountUtils
RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit disabled.
CloudKit account not found (or inactive) 1
RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit cancelEverything completed.
RDXPCDebugPerformer: testReinitializeCloudKit: CK account removed from DB. CloudKit re-enabled.
RDXPCDebugPerformer: testReinitializeCloudKit: Completed updateState() didAddAccount: %d, didUpdateAccount: %d, updateAccountError: %@
RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}
RDXPCDebugPerformer: testInitialSync initiated
RDXPCDebugPerformer: Failed testInitialSync {error: %@}
Multiple accounts found with that name {accountIDs: 
Account has no objectID
Unsupported account type {accountID: 
Account is inactive {accountID: 
Account not found
prepare.cancelCloudKit.duration
prepare.deletedCDObjects.count
prepare.deleteCDObject.duration
prepare.deleteCKCloudState.count
prepare.deleteCKCloudState.duration
prepare.resetAccount.success
sync.totalDuration
RDXPCDebugPerformer: nukeDatabase initiated
RDXPCDebugPerformer: Failed to nuke database {error: %@}
aa_primaryAppleAccount.
storeController.
userDefaults.lastExtraneousAlarmsProcessedDate
userDefaults.useExtraneousAlarmBackOffThrottleInterval
Babysitter report is empty
cloudContext.readinessLoggingDescription
cloudContext.configuration.
cloudContext.lastSyncMetrics.
v16@?0@"NSDictionary"8
remindd.RDXPCDebugPerformer
REMXPCDebugPerformer
v24@0:8@?<v@?@"NSString">16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v24@0:8@?<v@?@"NSError">16
v32@0:8@"NSString"16@?<v@?q@"NSDictionary"@"NSError">24
v24@0:8@?<v@?@"NSString"@"NSDictionary"@"NSError">16
v60@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40B48@?<v@?@"NSError">52
v32@0:8@"REMObjectID"16@?<v@?@"NSString">24
v24@0:8@?<v@?@"NSArray">16
v56@0:8d16d24d32@"NSUUID"40@?<v@?>48
v32@0:8@"NSUUID"16@?<v@?>24
v32@0:8@"NSString"16@?<v@?>24
v24@0:8@"NSString"16
v32@0:8@"NSString"16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"REMStoreContainerToken"@"NSError">16
v32@0:8@"REMStoreContainerToken"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v32@0:8@"NSString"16@?<v@?@"NSError">24
v32@0:8@"NSURL"16@?<v@?@"NSError">24
v28@0:8B16@?<v@?@"NSArray"@"NSError">20
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSArray"@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSDate"16@?<v@?@"NSError">24
v40@0:8@"NSUUID"16@"NSDate"24@?<v@?@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"REMObjectID"16q24@?<v@?@"NSError">32
_TtC7remindd26RDClientConnectionListener
xpcListener
xpcListenerUserInteractive
listenerQueue
clientConnections
B32@0:8@16@24
New client connection {connection: %{public}@, queue: %{public}@}
Connection count: %lu
Connection requested as UserInteractive but is missing the entitlement. Using xpc Queue {connection: %@}
clientConnection.accessLevel has no read/write access {clientConnection: %{public}@}
clientConnection.accessLevel == .none. Rejecting connection {clientConnection: %{public}@}
Client connection closed: %@
remindd.RDClientConnectionListener
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
_TtC7remindd34RDXPCSyncInterfacePerformerFactory
discretionaryCloudKitThrottler
cloudKitThrottler
dataAccessThrottler
dataAccessRequestsWriter
_TtC7remindd27RDXPCSyncInterfacePerformer
v40@0:8@16B24B28@?32
v36@0:8@16B24@?28
v32@0:8B16B20@?24
clientConnection
remindd.RDXPCSyncInterfacePerformer
Perform has no clientConnection. Is this really an XPC call? Without a real XPC call, I cannot ask the storeController to actively notify anything.
Received request to observe CloudKit traffic {clientConnection: %@}
Failed to fetch object. {objectID: %@, error: %@}
Tried to fetch non-existent object {remObjectID: %@}
Force set migration state
CloudContext is nil -- can't set migration state
Can't set migration state
AccountUtils is nil -- can't clear migration state cache
Can't clear migration state cache
Failed to set migration state {error: %@, didChooseToMigrate: %@, didFinishMigration: %@
Manual fetch user record
CloudContext is nil -- can't fetch user record
Can't fetch user record
v24@?0@"CKRecord"8@"NSError"16
v24@?0@"NSArray"8@"NSError"16
Can't fetch migration cache records: 
Couldn't determine the display account ID for setting flag didChooseToMigrateLocally {accountID: %{public}@}
Failed to set flag didChooseToMigrateLocally before migration {accountID: %{public}@, error: %{public}}
Account flag didChooseToMigrateLocally is already true {displayACAccountID: %{public}@, accountID: %{public}@}
Saved flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@}
Failed to save flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@, error: %{public}@}
Reset migration state
No primary account found! Try to delete application data anyway
Primary account found - calling unmigration service for the account
Failed to unmigrate account - server returned error
Unknown unmigration error
Server unmigration succeed {timeElapsed: %f}
Delete Application data from CloudKit
CloudContext is nil -- can't delete server data
Missing account utils -- can't purge migration state cache
nil RDStoreController.accountUtils
Failed to delete application data from server {error: %@}
Failed to purge migration state cache {error: %@}
(daemon) Requested trigger DataAccess sync {accountIDs: %@}
(daemon) Trigger DataAccess sync {accountIDs: %@}
RestartCloudKitSync: Requested Restart CloudKit sync
RestartCloudKitSync: Bypassed throttler and restart CloudKit sync now {reason: %{public}@}
RestartCloudKitSync: Restart CloudKit sync {reason: %{public}@}
RestartCloudKitSync: CloudContext is nil -- can't restart cloudkit sync
RestartCloudKitSync: Done cancelling works in ICCC and now calls updateCloudContextStateWithSyncOption {reason: %{public}@}
syncCloudKit(withReason): Requested Trigger CloudKit sync {discretionary: %d, reason: %{public}@}
syncCloudKit(withReason): Dropping CloudKit sync Request {discretionary: %d, reason: %{public}@}
syncCloudKit(withReason): Bypassed throttler and run sync now {discretionary: %d, reason: %{public}@}
syncCloudKit(withReason): Trigger CloudKit sync {discretionary: %d, reason: %{public}@}
syncCloudKit(withReason): CloudContext is nil -- can't sync to cloudKit
syncCloudKit(withReason): CloudKit Sync did finish {discretionary: %d, reason: %{public}@}
syncCloudKit(withReason): Sync interface cloudkit sync finished with error {error: %@}
CloudKit Sync - Discretionary
REMXPCSyncInterfacePerformer
v40@0:8@"NSString"16B24B28@?<v@?@"NSError">32
v36@0:8@"NSString"16B24@?<v@?@"NSError">28
v36@0:8@"NSArray"16B24@?<v@?@"NSError">28
v40@0:8@"REMObjectID"16B24B28@?<v@?@"REMMigrationResult"@"NSError">32
v24@0:8@?<v@?@"CKRecord"@"NSError">16
v32@0:8B16B20@?<v@?@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"CKRecord"@"NSError">24
unknown type
Predicate missing parameter: descriptors
Predicate missing parameter: text
unknown textMatching
Predicate missing parameter: startingDueDate and/or endingDueDate
Predicate missing parameter: endingDueDate
Predicate missing parameter: startingDueDate
Predicate missing parameter: parentReminderID
Predicate missing parameter: objectIDs
Predicate missing parameter: listID
_TtC7remindd38RDAssignmentNotificationEngineAssembly
OriginalAlarmUID
AcknowledgedDate
Fixing broken references for alarm {alarmID: %{public}@, reminderID: %{public}@}
Reminder is marked for deletion but alarm is not {alarmID: %{public}@, reminderID: %{public}@}
v16@0:8
ckRecordType
_TtC7remindd25REMAlarmTriggerCDIngestor
accountID
_TtC7remindd37REMAlarmTimeIntervalTriggerCDIngestor
_TtC7remindd34REMAlarmDateTriggerCDIngestor_ObjC
_TtC7remindd29REMAlarmDateTriggerCDIngestor
_TtC7remindd33REMAlarmLocationTriggerCDIngestor
_TtC7remindd32REMAlarmVehicleTriggerCDIngestor
Failed to code cdAlarmTrigger {error: %{public}@}
REMAlarmDateTriggerCDIngestor: cdAlarmDateTrigger.dateComponentsData is nil {cdAlarmDateTrigger.remObjectID: %@}
dateComponentsData
Failed to decode Trigger date components data
com.apple.xctest
com.apple.remindd.
Evaluating TypedPredicate with nil NSPredicate against object {object: %@}
ShowingLargeAttachments
REMCDSmartList is not expected to be shared, we shouldn't upload it for non-owner (smartListID: %{public}@)
REMCDSmartList.parentList is exclusive feature to CSL (smartListID: %{public}@)
IsLinkedToAccount
v24@0:8@16
RDJSONCoder failed to encode object as JSON {class: %@, error: %@}
RDJSONEncoder can't encode output string as utf8 data
SmartList (ckIdentifier: %{public}@) does not have a sorting style
SmartList (ckIdentifier: %{public}@) does not have smart list type
REMCDObjectMergeConflictResolving
ICCloudObject
v32@0:8@16@?24
v40@0:8@16@24@32
@"CKRecordID"16@0:8
@"CKRecord"16@0:8
v32@0:8@"NSMutableSet"16@?<v@?@"<ICCloudObject>"@"CKRecord">24
v24@0:8@"CKRecord"16
@"NSArray"16@0:8
v24@0:8@"CKModifyRecordsOperation"16
v32@0:8@"CKModifyRecordsOperation"16@"CKRecord"24
v40@0:8@"CKModifyRecordsOperation"16@"CKRecord"24@"NSError"32
@"NSManagedObjectID"16@0:8
@32@0:8@"CKRecordID"16@"NSManagedObjectContext"24
@32@0:8@"CKRecord"16@"NSManagedObjectContext"24
@40@0:8@"CKRecord"16@"REMCDAccount"24@"NSManagedObjectContext"32
@40@0:8@"CKRecordID"16@"REMCDAccount"24@"NSManagedObjectContext"32
@"NSArray"24@0:8@"NSManagedObjectContext"16
@32@0:8:16@24
ICHasDatabaseScope
_TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder
v28@0:8B16@20
v28@0:8i16@20
v32@0:8q16@24
v32@0:8d16@24
dicts
arrays
allowsKeyedCoding
RDJSONDecoding can't encode input string as utf8 data {class: %@}
RDJSONDecoding can't decode JSON {class: %@, error: %@}
Invalid JSONSerialization.jsonObject return value {class: %@}
JSON encode error: expected at least one dict
JSON encode error: expected at least one array
_TtC7remindd21RDHashtagLabelUpdater
processingQueue
timeGroupingStrategy
cloudAccountsDidChangeCancellable
hashtagInsertEventCancellables
highPrioritySubscriptionTransactionRegistrar
lowPrioritySubscriptionTransactionRegistrar
changeTrackingClientName
_TtCC7remindd21RDHashtagLabelUpdaterP33_45435200B10504FC9CF3E682DD4A9AA213BabysitTarget
_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider
T@"REMObjectID",N,R,Vrem_accountObjectID
_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA233ManualHashtagLabelUpdaterDelegate
_TtC7remindd22RDHashtagLabelRepairer
persistentStore
remindd.ChangeTrackingAccountProvider
com.apple.remindd.RDHashtagLabelUpdater.babysitter
RDHashtagLabelRepairer removes sharedToMeReminerPlaceholder[%@] with reminderID[%@]
remindd/TypedPredicate.swift
Failed to create cdPropertyKey for keyPath: 
REMCDHashtagLabelRepairer: failed to fetch sharedToMeReminderPlaceholder from database {error: %@}
RDHashtagLabelRepairer: Impossible as hashtag[%@] without sharedToMeReminderCKIdentifier
RDHashtagLabelRepairer: fixes hashtag[%@] with sharedToMeReminderCKIdentifier[%@] and original reminder id [%@]
RDHashtagLabelRepairer: reminder[%@] is not found in database. It may not be sync down yet.
RDHashtagLabelUpdater: failed to fetch reminders from database {error: %@}
REMCDHashtagLabelRepairer: failed to fetch hashtag with sharedToMeReminderCKIdentifier, reminder and mismatchedReminder from database {error: %@}
RDHashtagLabelRepairer: Hashtag[%@] without name
REMCDHashtagLabelRepairer: hashtag[%@] without name
RDHashtagLabelRepairer: updates hashtag [%@] from old label canonical name [%@] to new canonical name [%@]
RDHashtagLabelUpdater: Impossible to get here, hashtag[%{public}@] without account identifier should have been filtered
RDHashtagLabelUpdater: failed to fetch hashtag label from database {error: %@}
RDHashtagLabelUpdater: got more than one hashtag label for labelName: %@
REMCDHashtagLabelRepairer: failed to fetch all hashtag label with mismatched hashtag name from database {error: %@}
RDHashtagLabelRepairer: updates hashtag[%@] with label[%@]
REMCDHashtagLabelRepairer: failed to fetch hashtag from database {error: %@}
RDHashtagLabelRepairer: removes hashtags with isConcealed for hashtag label [%@]: %@
REMCDHashtagLabelRepairer: failed to fetch hashtag label with concealed hashtag from database {error: %@}
RDHashtagLabelRepairer: removes hashtag label without hashtag: %@
REMCDHashtagLabelRepairer: failed to fetch hashtag label from database {error: %@}
Babysitting RDHashtagLabelUpdater because it failed too many times {waiterID: %{public}@}.
RDHashtagLabelUpdater: Mark to current token as consumed due to Babysitting {account: %{public}@, token: %{public}@}
RDHashtagLabelUpdater: No account eligible for hashtag change tracking
RDHashtagLabelUpdater: No since-token from change tracking {account: %{public}@}
RDHashtagLabelUpdater: No updated change token from change tracking (no changes) {account: %{public}@, since: %{public}@}
RDHashtagLabelUpdater: Processing change set {account: %{public}@, since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}@}
RDHashtagLabelUpdater: Failed to save hashtage label for %@
RDHashtagLabelUpdater: Marked change set consumed {account: %{public}@, since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Tracked insertion is not an REMSharedToMeReminderPlaceholder, huh? {inserted: %@}
RDHashtagLabelUpdater: Tracked insertion is not an REMObjectID, huh? {inserted: %@}
RDHashtagLabelUpdater: Tracked deletion is not an REMDAHashtagTombstone (or nil) huh? {deleted: %@}
RDHashtagLabelUpdater: Tracked deletion tombstone does not contain an objectIdentifier, huh? {deleted: %@}
RDHashtagLabelUpdater: Tracked deletion tombstone does not contain the hashtag name, huh? {deleted: %@}
RDHashtagLabelUpdater: No inserted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: No user initiated deleted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: No ICCC deleted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: No shared reminder placeholders found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Saving changes - insert: %ld, update: %ld, delete: %ld
RDHashtagLabelUpdater: inserted sharedToMeReminderPlaceHolder IDs: %{public}@
RDHashtagLabelUpdater: deleted hashtag IDs by ICCC: %{public}@
RDHashtagLabelUpdater: deleted hashtag IDs initiated by user: %{public}@
RDHashtagLabelUpdater: inserted hashtag IDs: %@
RDHashtagLabelUpdater: Impossible to get here, inserted hashtag[%{public}@] with nil name should have been filtered
RDHashtagLabelUpdater created new hashtag label {canonicalName: %@, firstHashtag.objectID: %{public}@}
RDHashtagLabelUpdater updated hashtag label recencyDate {new-recencyDate: %@}
RDHashtagLabelUpdater updated hashtag label first occurrence {canonicalName: %@, new-name: %@, new-firstOccurrenceCreationDate: %@}
RDHashtagLabelUpdater processing inserted hashtags: %@
RDHashtagLabelUpdater updated hashtags that need to be associated to shared-to-me-reminders {hashtagsNeedAssociatingToReminder.count: %ld, shared-to-me-reminders.count: %ld}
Error occured when mapping object from %@ to %@ {error: %@}
RDHashtagLabelUpdater: failed to fetch hashtag from database {error: %@}
RDHashtagLabelUpdater deleted hashtag label {canonicalName: %@}
RDHashtagLabelUpdater updated hashtag label recency date {canonicalName: %@, new-recencyDate: %@}
RDHashtagLabelUpdater: Cannot find a non-nil next occurrence hashtag name. We have non empty hashtagLabel.hashtags but we can't find one with non-nil name.
RDHashtagLabelUpdater updated hashtag label name to next occurrence {canonicalName: %@, nextOccurrenceHashtagName: %@}
RDHashtagLabelUpdater: Impossible to get here, concealed hashtag[%@] with nil name should have been filtered
RDHashtagLabelUpdater processing hashtag tombstones {canonicalName: %@, deletedIDs: %{public}@}
RDHashtagLabelUpdater: Unexpected hashtag with nil or empty name %{public}@
RDHashtagLabelUpdater process shared to me reminders: %{public}@
RDHashtagLabelUpdater: failed to fetch unassociated hashtags with sharedToMEReminderCkIdentifier from database {error: %@}
RDHashtagLabelUpdater: failed to fetch sharedToMeReminderPlaceholder from database {error: %@}
RDHashtagLabelUpdater: Not tracking changes since there's no active cloudkit account logged in or enabled
RDHashtagLabelUpdater.start() must be called exactly once
Starting RDHashtagLabelUpdater
com.apple.remindd.RDHashtagLabelUpdater
os_transaction INIT {name: com.apple.remindd.RDHashtagLabelUpdater.start}
com.apple.remindd.RDHashtagLabelUpdater.start
RDHashtagLabelUpdater: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %d}
RDHashtagLabelUpdater: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %@}
os_transaction RELEASE {name: com.apple.remindd.RDHashtagLabelUpdater.start}
RDHashtagLabelUpdater: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}@, error: %@}
com.apple.remindd.storeControllerNotificationCenter.publisher
RDHashtagLabelUpdater: (Re-)initialized changeTrackingHelpers upon cloudAccountsDidChange.
com.apple.remindd.RDHashtagLabelUpdater.highPrioritySubscription
com.apple.remindd.RDHashtagLabelUpdater.lowPrioritySubscription
com.apple.remindd.RDHashtagLabelUpdater.crashDetected
HashtagLabelUpdater
com.apple.remindd.RDHashtagLabelUpdater.hashtagInsertEventScheduler
DABabysittable
_TtC7remindd18REMAlarmCDIngestor
Unhandled trigger type {trigger: 
REMAlarmCDIngestor: cdAlarm.trigger is nil {cdAlarm.remObjectID: %@}
Trigger is not AlarmTriggerRepresentable {cdTrigger: 
_TtC7remindd29RDReminderManualSortIDAdapter
hashKeyProvider
cache
_TtC7remindd17RDDARequestsQueue
identifier
dispatchQueue
requestChannelReader
pendingRequests
RDDARequestsQueue: Draining {identifier: %@, count: %d, hasDelegate: %d}.
RDDARequestsQueue: Appending new request {identifier: %@, request: %@, hasDelegate: %d}.
RDDataAccess: Did add pending request {from: %{public}@}.
_TtC7remindd29REMSmartListStorageCDIngestor
primaryCKAccountID
REMSmartListStorageCDIngestor: establishRelationship(onStorage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}@}
resolutionTokenMap
Updating smartList.parentList {smartList: %@, parentList: %@}
Updating smartList.parentAccount {smartList: %{public}@, parentAccount: %{public}@}
Updating smartList.account {smartList: %{public}@, account: %{public}@}
REMSmartListStorage has an accountID that does not match the current primary CK account's accountID {storage.accountID: %{public}@}
Missing relationship {key: %@, objectID: %@}
Missing relationship {key: 
Mismatching class for relationship {key: %@, expectedType: %@, found: %@}
Mismatching class for relationship {key: 
, expectedType: 
Unknown ingestable key {key: %@}
REMSmartListStorage has an parentAccountID neither the current primary CK account's nor the placeholder accountID {storage.parentAccountID: %{public}@}
REMSmartListStorageCDIngestor: merge(storage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}@}
skipping ingestion of manual ordering because REMFeatureFlags.smartListManualSort is not enabled {smart list: %{public}@, smart list type: %{public}@}
storage.manualOrdering should not be nil {smart list: %{public}@, smart list type: %{public}@}
ingesting manual ordering {smart list: %{public}@, smart list type: %{public}@, top-level reminders count: %ld}
Manual ordering not supported {smartListType: %@}
skipping ingestion of manual ordering because it is unchanged {smart list: %{public}@, smart list type: %{public}@}
REMSmartListStorageCDIngestor: cdSmartList.account is nil {cdSmartList.remObjectID: %{public}@}
REMSmartListStorageCDIngestor: cdSmartList.smartListType is nil {cdSmartList.remObjectID: %{public}@}
Unable to initialize REMSmartListType with stringValue 
REMSmartListStorageCDIngestor: Unable to fetch custom smart list's manual ordering objectID because `\REMCDSmartList.managedObjectContext` is nil {cdSmartList.remObjectID: %{public}@}
Can't construct REMContactRepresentation from invalid JSON
displayDateIsAllDay
SharedToMeReminderCKIdentifier
REMCDHashtag+CloudKit: mergeData(from:) unexpected nil record['SharedToMeReminderCKIdentifier'] when record['Reminder'] is nil and hashtag not markedForDeletion, the former must present otherwise we have no way to associate the tag to the reminder {hashtag: %{public}@}
REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from SharedToMeReminderCKIdentifier {hashtag: %{public}@, sharedToMeReminderCKIdentifier: %{public}@}
REMCDHashtag+CloudKit: mergeData(from:) hashtag is markedForDeletion so we should not try to merge SharedToMeReminderCKIdentifier {hashtag: %{public}@}
REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from a CK reference {hashtag: %{public}@, reminderIdentifier: %{public}@, markedForDeletion: %{public}@}
REMCDHashtag+CloudKit: mergeData(from:) unexpected nil cdReminder.remObjectID when merging cdHashtag.reminder {hashtag: %{public}@, reminderIdentifier: %{public}@}
Hashtag does not have a name
Hashtag does not have creation date
REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil in newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) {hashtag: %{public}@, reminder: %{public}@}
REMCDHashtag+CloudKit: newlyCreatedRecord() will write to SharedToMeReminderCKIdentifier only if the tag was created by a participant {owner?: %{public}@, isShared?: %{public}@, hashtag: %{public}@, reminder: %{public}@}
REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) unsetting SharedToMeReminderCKIdentifier as the hashtag is markedForDeletion {hashtag: %{public}@}
REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil in newlyCreatedRecord() (key=.reminder) {hashtag: %{public}@}
REMCDHashtag+CloudKit: newlyCreatedRecord() will set up a CK reference only if the tag was created by the owner {owner?: %{public}@, hashtag: %{public}@, reminder: %{public}@}
REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.reminder) unsetting reminder CK reference as the hashtag is markedForDeletion {hashtag: %{public}@}
Fixing broken references for hashtag {hashtagID: %{public}@, reminderID: %{public}@}
Reminder is marked for deletion but hashtag is not {hashtagID: %{public}@, reminderID: %{public}@}
_TtC7remindd33RDXPCSuggestedAttributesPerformer
v48@0:8@16@24@32@?40
configurationSource
cancellables
cachedList
cachedEditingSessionID
storePerformer
cachedMLModels
cachedContacts
contactStore
remindd.RDXPCSuggestedAttributesPerformer
Prewarming models
Loaded MLModels {models: %{public}@}
Sugested Attribute Performer failed loading embedding config
Unrecognized embedding method: 
 in Suugested Attribute Performer
Deallocating SuggestedAttributesPerformer
REMXPCSuggestedAttributesPerformer
v48@0:8@"REMStoreSwiftInvocation"16@"NSData"24@"NSDictionary"32@?<v@?@"REMStoreSwiftInvocationResult"@"NSError">40
_TtC7remindd20RDDispatchQueue_ObjC
utilityQueue
com.apple.remindd.xpc.default
com.apple.remindd.background
com.apple.remindd.discretionary
com.apple.remindd.xpc.listener
com.apple.remindd.save
com.apple.remindd.xpc.ui.
com.apple.remindd.utility
com.apple.remindd.xpc.notification
_TtC7remindd30RDAlarmCoreSuggestionsConsumer
coreSuggestionHandler
RDAlarmCoreSuggestionsConsumer consume %ld producerAlarms
_TtC7remindd27RDTodayNotificationAssembly
_TtC7remindd16RDXPCEventStream
alarmHandlers
eventInterface
_TtCC7remindd16RDXPCEventStreamP33_42BD93B4E4BDBF740267D11659A1191423SystemXPCEventInterface
<XPCEventStream.Token: 
Not scheduling alarm because timeIntervalInSeconds > Int64.max
UserVisible
Setting xpc event {xpc_event: %@, date: %@}
com.apple.alarm
Not scheduling alarm becuase dateInNanoSeconds > Int64.max
Starting XPC Event Stream
Tried to start XPCEventStream twice. Crashing...
Received xpc event {xpc_event: %@}
Received xpc_event missing name {xpc_event: %@}
Unsetting alarm {eventName: %@}
Delivering xpc_event to handlers {handlers.count: %ld}
os_transaction INIT {name: com.apple.remindd.xpcalarm}
com.apple.remindd.xpcalarm
os_transaction RELEASE {name: com.apple.remindd.xpcalarm}
Received xpc_event with no handlers -- Dropping {xpc_event: %@}
_TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation
storeController
salt
timezone
options
embeddingsURL
reminderTitleEmbeddings
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/ReminderKit-490/remindd/RDStoreControllerExporter.swift
<unknown.default>
DES unrecognized embedding
Failed to load embedding config for Distributed Evaluation
DES recipe has includeReminderTitleCategoryFilteredStopWords = true, but failed initializing embedding for {lang: %@}
DES recipe has includeReminderTitleCategoryUniversalGrammar = true, but failed initializing embedding for {lang: %@}
DES recipe has includeReminderTitleCategorySentence2Vec = true, but failed initializing embedding for {lang: %@}
systemTimeZoneName
systemTimeZoneOffset
titleFuzzedEmbeddings
creationDayOfWeek
completionDayOfWeek
displayDayOfWeek
universalGrammar
filteredStopWords
locationAlarmIdentifier
locationAlarmProximity
recurrenceDescription
hasRemindMeWhenMessaging
_TtC7remindd20RDNotifydEventStream
notificationName
notifyToken
Deallocating notifyd stream {notificationName: %@}
Failed to register for notifyd notification {notificationName: %@, status: %d}
Registered notifyd notification {notificationName: %@}
Received notifyd notification after event stream was deallocated {name: %@}
notifydEventStream
Received notifyd notification {name: %@}
Dropped notification becuase we don't have an event handler {notificationName: %@}
_TtC7remindd33RDContactInteractionAlarmProducer
dataSource
delegate
userInteractionSessionManager
shouldNotifyOfInteractionWithPeopleNotifyToken
shouldNotifyOfInteractionWithPeople
Producer did produce alarms {producer: %@, alarms.count: %d}
shouldNotifyOfInteractionWithPeople value changed. Updating state {previousValue: %d, value: %d}
shouldNotifyOfInteractionWithPeopleNotifyToken is invalid. Failed to update state {token: %d, value: %d}
Failed to update or post update to _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {notifySetStateStatus: %d,  notifyPostStatus: %d, value: %d}
Starting people interaction alarm producer {producer: %@}
remindd.RDContactInteractionAlarmProducer
os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
RDContactInteractionAlarmProducer received contact event
os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
DataSource returned alarms for contact interaction. {count: %ld}
os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}
com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery
RDContactInteractionAlarmProducer.REMContactsProvider
Resolving contact names for newlySeenContactReps {newlySeenContactReps: %@}
DataSource returned no alarms for contact interaction. Done {contacts: %@}
All contactReps interacted with are recently-checkedIn already. Not producing anything. {contactRepresentation: %@}
No stored checkIns -- returning empty array
Failed to decode stored checkIns -- returning empty array {error: %{public}@}
didInteract.contacts is empty. Skipping
Producing alarms for contact interaction {activeCount: %ld, totalCount: %ld}
os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}
dataSource returned alarms that don't match any input contactReps {reminderID: %@, newlySeenContactReps: %@}
_TtC7remindd20RDFirstUnlockManager
RDFirstUnlockManager: Device is in unlocked state (MobileKeyBag not available on this platform). Executing unlockHandler.
_TtC7remindd27RDAlarmNotificationConsumer
beforeFirstUnlockNotificationEngine
RDAlarmNotificationConsumer {identifier: %{public}@ allowedSet: %@, count %{public}d}
RDAlarmNotificationConsumer {identifier: %{public}@ createSet: %@, count: %{public}d}
Updating lastBannerPresentationDate {reminderIDs: %{public}@, lastBannerPresentationDate: %{public}@}
os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}@}
com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate
Unable to update lastBannerPresentationDate reminder is Phantom {reminderID: %{public}@}
RDAlarmNotificationConsumer skipping retain on alarm because already retained alarm for reminder in this consumeAlarms() run { identifier: %{public}@ identifiersPresentedInThisRun:%{public}@ }
os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}@}
com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms
os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}@}
Updated lastBannerPresentationDate {reminderIDs: %{public}@, lastBannerPresentationDate: %{public}@}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}@}
Unable to update lastBannerPresentationDate {reminderIDs: %{public}@, error: %@}
RDAlarmNotificationConsumer {identifier: %{public}@ currentSet: %@, count: %{public}d}
RDAlarmNotificationConsumer {identifier: %{public}@ removeSet: %@, count: %{public}d}
notificationCenter.releaseNotification {identifier: %{public}@}
notificationCenter.retainNotification {reminderID: %{public}@, skipBanner: %{public}@}
bannerBehavior determined {bannerBehavior: %{public}@, reminderID: %{public}@}
notificationCenter.retainNotification will not be called because lastBannerPresentationDate is too recent {reminderID: %{public}@}
Not presenting reminderAlarm banner for SiriFoundInApps reminders. {reminderID: %@}
Unable to determine fireDate. An alarm without fireDate shouldn't have reached here. {alarm: %@, reminder: %@}
allowBanner? {lastBannerPresentationDate: %{public}@, fireDate: %{public}@, now: %{public}@, showBanner: %{public}@}
RDAlarmNotificationConsumer: Posted Alarm notification {reminderID: %{public}@}
peopleInteraction
Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: %@}
com.apple.reminders.notification
RDAlarmNotificationConsumer: Unable to post Alarm notification {error: %@}
_TtC7remindd30REMNSPersistentHistoryTracking
remindd.REMNSPersistentHistoryTracking
com.apple.remindd.historyTracking
_TtC7remindd28REMReminderStorageCDIngestor
REMReminderStorageCDIngestor:establishRelationship(onStorage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}@}
Updating reminder.list {reminder: %{public}@, list: %{public}@}
XXX: Reminder has no oldList, is this an undo-delete?? {reminder: %@, newList: %@}
Adding an anxiliary reminder change DELETE info {reminder: %@, oldList: %@, newList: %@}
Adding an auxiliary reminder change MOVE info {reminder: %@, oldList: %@, newList: %@}
Undeleting hashtag {hashtagID: %{public}@, reminder: %{public}@}
Updating reminder.account {reminder: %{public}@, account: %{public}@}
Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: %{public}@, cdType: %@}.
Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: 
Inserted %@ {author: %{public}@}
Can't merge documents for reminder because remObjectID is nil {reminder.objectID: %@, key: %@}
Failed to merge documents for reminder {reminder.objectID: %@, key: %@}: %@
REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}@}
Differential privacy common words collection
Title POS data collection
other_token_count
com.apple.reminders.created
Removing alarm from reminder {reminder.objectID: %@, alarm.objectID: %@}
Removing assignment from reminder {reminder.objectID: %@, assignment.objectID: %@}
Can't merge attachment for reminder because cdAttachment.remObjectID is nil {cdReminder.objectID: %@, cdAttachment.objectID: %@}
Removing attachment from reminder {reminder.objectID: %@, attachment.objectID: %@}
Removing hashtag from reminder {reminder.objectID: %@, hashtag.objectID: %@}
structured_tag_count
inline_tag_count
Can't merge recurrence rule for reminder because cdRecurrenceRule.remObjectID is nil {cdReminder.objectID: %@, cdRecurrenceRule.objectID: %@}
Removing recurrenceRule from reminder {reminder.objectID: %@, recurrenceRule.objectID: %@}
REMReminderStorageCDIngestor: cdReminder.account is nil {cdReminder.remObjectID: %@}
Found a dangling assignment with nullified assignee, we will skip it from the reminder.assignments {objectID: %@, originator: %@, assignee: %@, reminderID: %@}
isAbstract
TB,N,R
separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
separatorInConcatenatedElementIDsWithLocalElementIDPrefix
storeControllerManagedObjectContext
Updated lastAccessed in REMCDManualSortHint {objectID: %@}
Failed to update lastAccessed in REMCDManualSortHint {objectID: %@, error: %@}
com.apple.remindd.beforeFirstUnlock
largecircle.fill.circle
unknown thirds
com.apple.remindd.reminderAlarm
com.apple.remindd.assignmentNotification.multiple
com.apple.remindd.assignmentNotification.single
com.apple.remindd.dataaccess.caldav.sharedList
com.apple.remindd.todayNotificationBadge
com.apple.remindd.todayNotification
Trying to create an assignment notification content without reminderIDs. Returning empty content. {reminderIDs: %@}
Trying to create an assignment notification content with inconsistent reminderIDs in parameters. Returning empty content. {reminderIDs: %@}
Trying to create an assignment notification content without a list. Returning empty content. {reminderIDs: %@}
Trying to create an assignment notification content with 0 reminderIDs. Returning empty content. {reminderIDs: %@}
(caldavSharedList) Trying to create a notificationContent with a list whose objectID doesn't match with the listID in the enum. Returning empty content. {list.objectID: %@, enum.listID: %@}
Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %@}
Error creating UNNotificationAttachment from UIImage {error: %@}
fetching reminders for training batch by batch {batchsize: %d}
Done with fetching reminders for training. %d distinct reminders fetched
Training REMFilteredTitleEmbedding with %@
failed saving embedding config file to %@
embedding config file saved to %@
com.apple.remindd.training
due_weekday_accuracy
location_accuracy
corebehavior
CoreBehavior terminated early. Retrying with support = %d
trainEvaluatekNN started at %{public}@
best k for kNN model is %{public}d
kNN model training time: %{public}d
Failed to save kNN model
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/ReminderKit-490/remindd/SuggestedAttributes/REMSuggestedAttributesTrainer+RDInvocable.swift
_TtC7remindd27REMAccountStorageCDIngestor
REMCDAccountStorage+CDIngestor: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {remObjectID: %@, changedKey: %@, changedValue: %@}
sorting ordered set account.lists - before - {account: %@, lists: %@}
v32@?0@"NSString"8Q16^B24
sorting ordered set account.lists - after - {account: %@, lists: %@}
REMAccountStorage+CDIngestor.mutateOrdering(): Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}@}
REMAccountStorage+CDIngestor.mutateOrdering(): Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}@, #csls: %ld, #lists: %ld}
REMAccountStorage+CDIngestor.mutateOrdering(): Sorted account.smartLists {account: %{public}@, #smartLists: %ld}
Some lists have changes in .daDisplayOrder so DA display orders is taking precedence as the true sort hint - {account: %@}
REMAccountStorageCDIngestor: mutateOrdering() cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}@}
Cannot get any REMCDAccount from the ordered set of lists in the account.
REMAccountStorageCDIngestor: merge(storage:into cdAccount:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}@}
Actually really doing nothing for a merge on .listsDADisplayOrderChanged
NSManagedObjectContext missing author when updating account.type {storage: %@}
Creating Extraneous Local Account {author: %@}
Can't merge list ordering for account because remObjectID is nil {account.objectID: %@, key: %@}
Failed to merge ordered set for {objectID: %@, key: %@, error: %@}
v32@?0@"REMObjectID"8Q16^B24
Going to back propagate ordering changes to CD lists {listsCount: %ld}
Back propagated ordering changes to CD lists - {changes: %@}
REMAccountStorageCDIngestor tries to establishRelationship .smartListIDsToUndelete with an non CK account {accountID: 
Unexpected nil mergeable ordering data {objectID: %@, key: %@}
Failed to deserialize CR ordered set {objectID: %@, key: %@}: %@
_TtC7remindd37RDBeforeFirstUnlockNotificationEngine
RDBeforeFirstUnlockNotificationEngine didn't expect to receive actions of this type. {type: %@, response: %@}
Completing action handler by calling completionHandler now.
Processing notification response {actionIdentifier: %@, action: %@}
Unexpected action for notification type .beforeFirstUnlock {action: %@}
Handled dismissal of before first unlock notification successfully.
RDBeforeFirstUnlockNotificationEngine: Updating nextScheduledAlarmDate as we got a new future alarm date.
RDBeforeFirstUnlockNotificationEngine: Posted Before First Unlock notification
Posted Before First Unlock Notification
RDBeforeFirstUnlockNotificationEngine: Unable to post Before First Unlock notification {error: %@}
RDBeforeFirstUnlockNotificationEngine: Not going to presenting before first unlock notification as we don't have a due date.
RDBeforeFirstUnlockNotificationEngine: Scheduling to present before first unlock notification at a future time.
v8@?0
RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification now because we have already passed the due date.
RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification as we're now due.
RDBeforeFirstUnlockNotificationEngine: Going to update lastPresentAlarmDate based on delivered notifications.
RDBeforeFirstUnlockNotificationEngine: Found %ld delivered notifications, %ld considered for lastPresentAlarmDate.
Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier
Fetching account storage by ExtID {input#: %d, hit#: %d, miss#: %d, name: %@}
Couldn't fetch all requested accounts {extIds: %@, name: %@}
Putting account storages fetched from DB to cache {extIds: %@, name: %@}
None of the requested accounts could be fetched {extIds: %@, name: %@}
Fetching account storage by ObjectID {input#: %d, hit#: %d, miss#: %d, name: %@}
Couldn't fetch all requested accounts {objIDs: %@, name: %@}
Putting account storages fetched from DB to cache {objIDs: %@, name: %@}
None of the requested accounts could be fetched {objIDs: %@, name: %@}
Unexpectedly calling the invoke() with the MoC instead of with the storeController for REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount
Should not be calling REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount.invoke(in managedObjectContext:)
No need to fetching account storage because no active primary CK account is enabled {name: %@}
Fetching account storage by ObjectID {input: %@, hit?: %d, name: %@}
Unexpectedly fetched more than 1 account storage with inMemoryPrimaryActiveCKAccountREMObjectID()
Putting account storage fetched from primaryActiveCloudKitAccountOptimized() to storage cache {accountID: %@, name: %@}
Unexpected nil primary active cloudkit account while inMemoryPrimaryActiveCKAccountREMObjectID() is non-nil
unknown purpose
Fetching all generic account storages {cached#: %d, name: %@}
Putting all generic account storages fetched from DB to cache {fetched#: %d, name: %@}
Couldn't fetch all generic account storages from database {name: %@}
_TtC7remindd23REMAssignmentCDIngestor
REMAssignmentCDIngestor: cdAssignment.account is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: cdAssignment.reminder is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: cdAssignment.owningReminderIdentifier of this markedForDeletion assignment is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: nullifiedRelationship assignee {assignmentID: %{public}@, reminderID: %{public}@}
REMAssignmentCDIngestor: assignee status is disallowed {assignmentID: %{public}@, reminderID: %{public}@}, assignee.status: %d
REMAssignmentCDIngestor: assignee not belongs to the same list to the reminder's {assignmentID: %{public}@, candidateAssignee.list: %{public}@, assignment.reminder.list: %{public}@}
storage(from cdAssignment:): originator of this assignment was nullified {objectID: %{public}@, reminderID: %{public}@}
REMAssignmentCDIngestor: originator status is disallowed {assignmentID: %{public}@, reminderID: %{public}@, originator.status: %d}
REMAssignmentCDIngestor: originator not belongs to the same list to the reminder's {cdAssignment.remObjectID: %{public}@, candidateOriginator.list: %@, assignment.reminder.list: %@}
REMAssignmentCDIngestor: cdAssignment.ckAssigneeIdentifier is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: Can't create UUID from ckAssigneeIdentifier {cdAssignment.remObjectID: %@}
Cannot get managedObjectContext from the given REMCDAssignment
FETCH COREDATA originatorIDFromCKOriginatorIdentifier() fetched sharee {uuid: %{public}@, result: %@, assignment: %@}
FETCH COREDATA originatorIDFromCKOriginatorIdentifier() sharee not found {uuid: %{public}@, assignment: %@}
FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() fetched sharee {uuid: %{public}@, result: %@, assignment: %@}
FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() sharee not found {uuid: %{public}@, assignment: %@}
_TtC7remindd17RDMigrationClient
completionHandlers
migrationResult
invocationCount
failureCount
stateRestored
dismissed
waitingForReachability
wasUserInitiated
Migration: account ID not found in the ACAccount store, will try to migrate anyway but expect failure {accountID: %{public}@}
Creating new migration client {accountID: %{public}@}
com.apple.remindd.migration-fetchState
Internet is not available. Will resume when we have reachability
migration-resume
No primary account with Reminders enabled, or the account ID doesn't match this migration client {accountID: 
, primaryAccountID: 
Completing migration {error: %{public}@}
Setting up migration service call
^https?://p([0-9]+)
Failed to determine user CalDAV partition
Making request to inverness for migration
Invalid response from migrate request
Migration service response received {json: %{public}@)
Migration server error {error: %{public}@}
We are an observer and will poll again in a %{public}d seconds
Migrate request failed {error: %{public}@}
Migration client is told to dismiss. Ignore server response.
com.apple.remindd.cloudKitMigration.finished
remindersMigrated
Completing migration {result: %{public}@}
No next-step info from Server. Client will fallback to handle retry by itself
Client will retry migration {delay: %{public}f, invocationCount: %{public}d, failureCount: %{public}d}
Client terminated migration after too many retries {invocationCount: %{public}d, failureCount: %{public}d}
Client terminated migration after 
 invocations and 
 failures. Migration terminated.
Server instructed to retry migration {delay: %{public}d, invocationCount: %{public}d, failureCount: %{public}d}
Server terminated migration after too many retries {invocationCount: %{public}d, failureCount: %{public}d}
Server terminated migration after 
re-enable CloudKit account object and delete CalDAV account
RDAccountUtils will %{public}@
No RDAccountUtils is found. Unable to %{public}@
re-create CalDAV account object and hide CloudKit account
com.apple.remindd.cloudKitMigration.revertToCalDAV
Reloaded accounts succesfully
Failed to %{public}@ {error: %{public}@}
Retry migration after delay {delay: %{public}f}
Cancel delayed retry becaue migration client was dismissed
Creating Inverness client
reminders-migration
Completed Inverness request {requestUUID: %{public}@, accountID: %{public}@}
Can't find CoreData store for saving CloudKit account migration state {accountID: %{public}@}
Failed saving migration state {error: %{public}@}
Migration failed
Setting up unmigration service call
Making request to inverness for unmigration
No response from unmigration service
Invalid unmigration response
Unmigration service returned error: 
Purge all migration clients' states
com.apple.remindd.migration-purge
Failed to delete migration state entities from the database {error: %{public}@}
Notify all migration clients to dismiss
com.apple.remindd.migration-client
Resume all uncompleted migration processes
com.apple.remindd.migration-resume-all
Failed to fetch migration states. Assume no active migration sessions
Wake up migration client {accountID: %{public}@}
_TtC7remindd29RDDifferentialPrivacyRecorder
$__lazy_storage_$_wordTokenizer
_TtC7remindd48RDStoreControllerCloudKitNetworkActivityObserver
isObsolete
remindd.RDStoreControllerCloudKitNetworkActivityObserver
_TtC7remindd42RDDataStoreApplicationShortcutListProvider
applicationShortcutLists
preferredDefaultListIDObservationToken
isStarted
Removing RDDataStoreApplicationShortcutListProvider observer on store controller
_TtC7remindd22RDManagedObjectIDCache
_TtC7remindd50RDPrimaryActiveCloudKitAccountManagedObjectIDCache
_TtC7remindd32RDPredefinedManagedObjectIDCache
RDManagedObjectIDCacheProtocol
remindd/REMCDList+CloudKit.swift
Can not instantiate REMCDList, should never happen
LastUserAccessDate
ReminderIDsMergeableOrdering
ReminderIDsMergeableOrderingAsset
ReminderIDsAsset
com.apple.reminders.list
Update list's sharing information and sharees with new CKShare {list: %@, share: %@}
Failed to update REMCDList with CKShare: managed object context is nil {list: %@, CKShare: %@}
Share stopped, clear sharing information and sharees
Removing sharees {count: %d}
unknown permission
unknown acceptanceStatus
(ckCloudState.inCloud == NULL OR ckCloudState.inCloud == 0)
MERGE.LOCAL: ...REMCDList.existingLocalObjectToMerge found a matching local REMCDList! {self: %{public}@, matched: %{public}@}
MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed list, race condition? {self: %{public}@ %{public}@}
MERGE.LOCAL: ...done merging local list to the cloud list, now delete the local object {local.list: %{public}@, cloud.list: %{public}@}
MERGE.LOCAL: Error decoding reminder IDs ordered set and thus not able to add local reminders and sort child reminders {error : %@}
MERGE.LOCAL: ...updating reminderIDs ordering and re-sorting with added reminders {list: %{public}@}
MERGE.LOCAL: ...this local reminder is not matched/merged so we're adding it to the list {local.reminder: %{public}@, local.list: %{public}@, cloud.list: %{public}@}
isConcealed:(markedForDeletion=
MERGE.LOCAL: ...deleting isConcealed local reminder permanently {reminder: %{public}@ %{public}@}
MERGE.LOCAL: ...childReminders is unexpectedly nil {self: %{public}@}
MERGE.LOCAL: ...this REMCDList should not try to merge with itself! {self: %{public}@, local: %{public}@}
MERGE.LOCAL: ...Should not attempt to merge with a concealed local list, race condition or corrupted database? {self: %{public}@, local: %{public}@ %{public}@}
B16@0:8
%K == NO AND %K <= %@
markedForDeletion
effectiveMinimumSupportedAppVersion
%K == YES OR %K > %@
Not sorting child reminders becuase REMCDList.mutableOrderedSetValue(forKey: reminders) is nil
Sorting child reminders deferred {listRecordID: %{public}@}
MERGE.LOCAL: ...no matching local reminder found for cloud reminder {reminder: %{public}@, list: %{public}@}
MERGE.LOCAL: ...BEFORE merging local reminder to cloud reminder {cloud: %{public}@, local: %{public}@, list: %{public}@}
MERGE.LOCAL: ...AFTER merging local reminder to cloud reminder (success: %{public}@, cloud: %{public}@, local: %{public}@, list: %{public}@}
Failed to create replicaIDSource when decoding mergeable ordered set for reminder IDS {cdList: %@}
Failed to decode mergeable ordered set for reminder IDS {error: %@, cdList: %@}
Deserializing reminderIDsMergeableOrdering from readMaybeBigStringOrderedSet() {recordID: %@}
Failed to parse UUID strings JSON data {error: %@}
Error decoding reminder IDs ordered set and thus not able to sort child reminders {error : %@}
REMCDList+CloudKit.sortChildReminders(): deserialized reminderIDsMergeableOrdering from data {remObjID: %@}
Tried to update listIDsMergableOrdering after fetching share / undeleting list but list has no parent account {listID: %{public}@}
TitleDocumentAsset
RecurrenceRuleIDs
NotesDocumentAsset
LastModifiedDate
Create Reminder CK record {self: %{public}@ %{public}@} has %ld alarms exceeding limit %d
MERGE.LOCAL: ......REMCDReminder.existingLocalObjectToMerge found a matching local REMCDReminder! {self: %{public}@, matched: %{public}@}
MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed reminder, race condition? {self: %{public}@ %{public}@}
MERGE.LOCAL: ......adding local alarms to the cloud reminder {local.alarms.count: %d}.
MERGE.LOCAL: ......adding local recurrence rules to the cloud reminder {local.rrules.count: %d}.
MERGE.LOCAL: ...done merging local reminder to the cloud reminder, now delete the local object {local.reminder: %{public}@, cloud.reminder: %{public}@}
MERGE.LOCAL: ......removing original recurrence rules of the cloud reminder {cloud.rrules.count: %d}.
merge(withLocalObject): We do actually expect recurrence-rules to support markForDeletion.
MERGE.LOCAL: ......removing original alarms of the cloud reminder {cloud.alarms.count: %d}.
MERGE.LOCAL: ......merge(withLocalObject): We expect alarms to support markForDeletion.
MERGE.LOCAL: ......server copy is newer, keep server data and delete local. {cloud: %{public}@, local: %{public}@, cloud.lastmod: %{public}@, local.lastmod: %{public}@}
MERGE.LOCAL: ......should not try to merge with itself! {self: %{public}@, local: %{public}@}
MERGE.LOCAL: ...Should not attempt to merge with a concealed local reminder, race condition or corrupted database? {self: %{public}@, local: %{public}@ %{public}@}
Fixing broken references for reminder {reminderID: %@, list: %{public}@, parentReminder: %{public}@}
Parent reminder is marked for deletion but this reminer is not {reminderID: %{public}@, parentReminder: %{public}@}
List is marked for deletion but this reminer is not {reminderID: %{public}@, list: %{public}@}
T@"CKRecord",N,&
Unable to deserialize CR property from CKRecord because replicaIDSource isn't available {key: %{public}@, cdObject: %@}
Failed to deserialize CRDT property {objectID: %{public}@, key: %{public}@}
validateAndFixupReminderTree BEGIN {objectID: %@, parentID: %@, listID: %@}
validateAndFixupReminderTree: Reminder is detached from lists. Nothing needs to be done.
validateAndFixupReminderTree: Reminder has parent but no list. Assuming self.list = parent.list.
validateAndFixupReminderTree {potentiallyConnectedReminders: %{public}@}
validateAndFixupReminderTree {rootMap: %{public}@}
validateAndFixupReminderTree: Can't resolve the root of the reminder tree. {ckIdentifier: %{public}@}
validateAndFixupReminderTree: {allConnectedReminders: %{public}@}
validateAndFixupReminderTree {resolvedRoot: %@, childReminders: %{public}@}
validateAndFixupReminderTree: Going to update root. {objectID: %@}
validateAndFixupReminderTree: ...Updated {root.list: %@}
validateAndFixupReminderTree: Going to update newly computed children.
validateAndFixupReminderTree: Going to update mismatched lists of remaining children attached to root.
validateAndFixupReminderTree: Going to update old children.
validateAndFixupReminderTree: ...Updated {root.parent: nil}
validateAndFixupReminderTree: Detected a loop in reminder tree in CK server data. Selecting a stable root.
validateAndFixupReminderTree: Reminder has new root.
validateAndFixupReminderTree: Reminder has old root.
validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the current reminder had both parent and children. Totally unexpected because the save request should have been rejected. {objectID: %@}
validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the new root had both parent and children. Totally unexpected because the save request should have been rejected. {rootID: %@}
validateAndFixupReminderTree: Detected a loop in the new reminder tree. Multiple client may have raced. Going to fix the tree locally.
validateAndFixupReminderTree: Current reminder tree looks good. Skipping the fixup.
validateAndFixupReminderTree: Neither parent nor list is changed. Nothing needs to be done.
validateAndFixupReminderTree: ...Going to update child. {objectID: %@}
validateAndFixupReminderTree: ......Updated {child.parent: %@}
validateAndFixupReminderTree: ......Updated {child.list: %@}
findReminderRoot BEGIN {id: %{public}@}
findReminderRoot: This reminder has no parent. The root is self. {%{public}@ => %{public}@}
findReminderRoot END {id: %{public}@}
findReminderRoot: Recursively found the root. {%{public}@ => %{public}@}
findReminderRoot: Already visited this reminder. There is a loop. Assuming root is self. {%{public}@ => %{public}@}
findReminderRoot: Root already computed. {%{public}@ => %{public}@}
addSubtree: ckIdentifier is nil {objectID: %@}
canSkipFixupReminderTree: Moving across parent. We can't skip the validation because self's children may have been flattened to siblings in previous saves.
canSkipFixupReminderTree: List changed and has children. Need to validate children.
canSkipFixupReminderTree: Child list mismatch. Need to fixup.
canSkipFixupReminderTree: Multiple layers of subtasks. Need to flatten.
canSkipFixupReminderTree: Parent changed list. Need to validate siblings.
canSkipFixupReminderTree: Sibling list mismatch. Need to fixup.
validateAndFixupReminderTree END {objectID: %@, parentID: %@, listID: %@}
Trying to create REMCDSharedToMeReminderPlaceholder to a reminder object without MOC
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because storeController isn't available {reminder: %{public}@}
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because accountIdentifier is nil where account %{public}@ nil and account.identifier %{public}@ nil, {reminder: %{public}@}
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because there is problem finding the persistent store for the accountIdentifier %{public}@ and the reminder {reminder: %{public}@}
Creating REMCDSharedToMeReminderPlaceholder for CloudKit: %{public}@
primaryActiveCloudKitAccountOptimized: Unexpectedly the primaryActiveCloudKitAccount.objectID() isTemporary, current design is to defer setting the account NSManagedObjectID cache until after saved {remObjectID: %{public}@}
updatePrimaryActiveCloudKitAccount: ATTENTION Someone is trying to inactivate an existing CK account {remObjectID: %{public}@}
updatePrimaryActiveCloudKitAccount: Writing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with updated CD account {remObjectID: %{public}@, mid: %{public}@}
updatePrimaryActiveCloudKitAccount: Clearing RDPredefinedManagedObjectIDCache with nil input account
updatePrimaryActiveCloudKitAccount: Clearing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with nil input account
primaryActiveCloudKitAccountREMObjectID: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).
primaryActiveCloudKitAccountREMObjectID: {elapsed: %lf}
primaryActiveCloudKitAccountOptimized: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).
primaryActiveCloudKitAccountOptimized: Returning nil because inMemoryPrimaryActiveCKAccountREMObjectID is nil {elapsed: %lf}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss (before cache-write) {elapsed: %lf}
primaryActiveCloudKitAccountOptimized: Unexpectedly fetched no active CK account from persistence. Should have returned early for nil inMemoryPrimaryActiveCKAccountREMObjectID if no active CK account is signed in. Indicates there is a bug.
primaryActiveCloudKitAccountOptimized: Mismatching cdAccount.remObjectID with inMemoryPrimaryActiveCKAccountREMObjectID {cdAccount.remObjectID: %{public}@, in-memory: %{public}@}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss + write (after cache-write) {elapsed: %lf (from start)}
primaryActiveCloudKitAccountOptimized: Unexpectedly primary CK REMCDAccount's objectID() isTemporary, should have saved the CD account before trying to access it via this API {remObjectID: %{public}@}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache hit {elapsed: %lf, mid: %@}
_TtC7remindd20REMHashtagCDIngestor
REMHashtagCDIngestor: cdHashtag.account is nil {cdHashtag.remObjectID: %{public}@}
REMHashtagCDIngestor: cdHashtag.reminder is nil when nil reminder reference is not legit {cdHashtag.remObjectID: %@}
REMHashtagCDIngestor: cdHashtag.reminderIdentifier is nil {cdHashtag.remObjectID: %{public}@, markedForDeletion: %{public}@, cdHashtag.sharedToMeReminderCKIdentifier: %{public}@}
reminderIdentifier
_TtC7remindd28RDXPCActivityTimeEventStream
xpcEventStream
xpcEventStreamToken
eventHandler
Registering Time Event Handler
XPCActivityTimeEventStream received event {xpc_event: %@}
Unregistering xpcEventStreamToken {xpcEventStreamToken: %@}
Adding XPC time event {date: %{public}@}
_TtC7remindd27REMRecurrenceRuleCDIngestor
REMRecurrenceRuleCDIngestor: cdRecurrenceRule.account is nil {cdRecurrenceRule.remObjectID: %@}
REMRecurrenceRuleCDIngestor: cdRecurrenceRule.reminder is nil {cdRecurrenceRule.remObjectID: %@}
newCloudObject: Unknown attachment type {type: %@}
mergeData: Unknown attachment type {type: %@}
Fixing broken references for attachment {attachmentID: %{public}@, reminderID: %{public}@}
Reminder is marked for deletion but attachment is not {attachmentID: %{public}@, reminderID: %{public}@}
Not a file attachment {Type: %@}
No store controller for updating file attachment {record: %@}
File attachment has no remObjectID {record: %@}
File attachment has no account {record: %@}
Record.type is image but this is not an image attachment {type: %@}
Record.type is file but this is not a file attachment object {type: %@}
Filename is not a string {value: %@}
File asset missing for file attachment {record: %@}
Failed to update attachment file {error: %@, record: %@}
Record.type is url but this is not a URL attachment {type: %@}
_TtC7remindd17RDLaunchAnalytics
lock
alreadyPosted
LAUNCH EVENT {client: %{public}@, reason: %{public}@}
_TtC7remindd21RDWidgetRefreshEngine
storeControllerNotificationCenterToken
widgetRefresh
unknown qualityOfService
requested widget refresh
_TtC7remindd28RDXPCChangeTrackingPerformer
v32@0:8q16@?24
v48@0:8@16@24Q32@?40
implementation
fetchAuxiliaryChangeInfos with {auxiliaryChangeInfoObjectIDs: %{public}@}
v24@?0@"NSDictionary"8@"NSError"16
fetchHistory after {date: %{public}@}
fetchHistory after {token: %{public}@}
v24@?0@"REMChangeSet"8@"NSError"16
saveTrackingState with {clientID: %{public}@, trackingState: %{public}@}
getTrackingState with {clientID: %{public}@}
v24@?0@"REMChangeTrackingState"8@"NSError"16
remindd.RDXPCChangeTrackingPerformer
earliestChangeToken for {accountID: %{public}@}
currentChangeToken for {accountID: %{public}@}
currentChangeToken for {accountTypes: %ld}
currentChangeToken initiated
REMXPCChangeTrackingPerformer
v24@0:8@?<v@?@"REMChangeToken">16
v32@0:8q16@?<v@?@"REMChangeToken">24
v32@0:8@"NSString"16@?<v@?@"REMChangeToken">24
v32@0:8@"<REMChangeTrackingClientIdentifying>"16@?<v@?@"REMChangeTrackingState"@"NSError">24
v40@0:8@"REMChangeTrackingState"16@"<REMChangeTrackingClientIdentifying>"24@?<v@?@"NSError">32
v48@0:8@"REMChangeToken"16@"NSArray"24Q32@?<v@?@"REMChangeSet"@"NSError">40
v48@0:8@"NSDate"16@"NSArray"24Q32@?<v@?@"REMChangeSet"@"NSError">40
v32@0:8@"REMChangeToken"16@?<v@?@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSDictionary"@"NSError">24
_TtC7remindd22CDIngestionCoordinator
applyCRDTsWithoutMerging
noSideEffectChanges
differentialPrivacyRecorder
changedKeys
managedObjectContext
mode
syncToCloudKit
upsertBlocks
establishRelationshipBlocks
mutateRelationshipOrderingBlocks
afterSaveActionBlocks
fetchedObjectsMap
insertedObjectsMap
cdChangedValuesMap
_TtC7remindd19RDTimeAlarmProducer
timeEventStream
Alarm trigger did change for time alarm producer
os_transaction INIT {name: com.apple.remindd.RDTimeAlarmProducer.reload}
com.apple.remindd.RDTimeAlarmProducer.reload
RDTimeAlarmProducer.reload
RDAlarmProducerDataSource.fetchAllTimeDataSourceAlarms
os_transaction RELEASE {name: com.apple.remindd.RDTimeAlarmProducer.reload}
RDTimeAlarmProducer.start() must be called before setupTimers
RDTimeAlarmProducer.addNextAlarmTimeEvent
RDTimeAlarmProducer is setting up the timers
No alarm with future fireDate -- Done
Next alarm is in the past -- Not adding event {fireDate: %{public}@}
Scheduling next alarm {fireDate: %{public}@, nextAlarm: %@, reminderID: %{public}@, recurrent: %{public}@, overdue: %{public}@}
RDTimeAlarmProducer.start() must be called before fireExpiredAlarms
RDTimeAlarmProducer.produceExpiredAlarms
RDTimeAlarmProducer is firing expired alarms
RDTimeAlarmProducer is firing expired alarms, count = %d
RDTimeAlarmProducer expiredAlarm {reminderID: %{public}@, fireDate: %{public}@ alarmType: %{public}@, recurrent: %{public}@}
Did hit error while producing alarms. Returning empty array {error: %@}
Starting time alarm producer {producer: %@}
RDTimeAlarmProducer.start() must be called exactly once
Received RDTimeEventHandler event on deallocated RDTimeAlarmProducer
remindd.RDTimeAlarmProducer
Tried to fire timeInterval alarm with nil dueDate {reminder: %@}
_TtC7remindd11RDXPCDaemon
daemon
debugPerformer
syncInterfacePerformerFactory
indexingPerformer
contactInteractionWriter
coreSuggestionsHandler
Tried to create REMStore after RDXPCDaemon was deallocated
storeControllerForStoreContainerToken
remindd.RDXPCDaemon
_TtC7remindd27RDCoreSuggestionsController
service
Processing %ld expiredReminders {reminders: %@}
Done processing expiredReminders, counts {expire: %ld, error: %ld}
Unable to find siriFoundInAppsData. {reminderID: %@}
Reminder is not in SiriFoundInApps list {reminderID: %@, listID: %@}
Unable to get SGRecordId from siriFoundInAppsData. {reminderID: %@, siriFoundInAppsData.count: %d}
CoreSuggestions reminderAlarmTriggered(for:) completed
CoreSuggestions reminderAlarmTriggered(for:) completed with error {error: %@}
Processing %ld reminderStorages {reminderStorages: %@}
Done processing reminderStorages, counts {confirm: %ld, reject: %ld, none: %ld, error: %ld, irrelevant: %ld}
unknown siriFoundInAppsUserConfirmation
CoreSuggestions rejectReminder sent {sgRecordID: %@}
CoreSuggestions confirmReminder sent {sgRecordID: %@}
CoreSuggestions confirmReminder completed
CoreSuggestions confirmReminder completed with error {error: %@}
CoreSuggestions rejectReminder completed
CoreSuggestions rejectReminder completed with error {error: %@}
Searching by spotlightItemIdentifier in CoreData is unsupported
Searching REMCDReminder by location is unsupported. {criteria: %@}
$a.trigger.entity = %@
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/ReminderKit-490/remindd/Store/REMCDReminder+Fetching.swift
Failed to pre-fetch reminders to mutate ordering; This save will be slow
Pre-fetching {result.count: %ld}
Reminder missing account {error: 
alarmStorage.trigger
unknown accountType
Unexpected .count in AccountsListDataView
Unexpected .localInternal in AccountsListDataView
_TtC7remindd25RDAlarmProducerDataSource
debug_currentUserSharee
clientIdentity
Failed to perform managedObjectContext operation {error: %@, managedObjectContext: %@}
Fetched reminder is missing contact handle. Skipping {reminderID: %{public}@}
Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter alarm {alarmID: %{public}@ isSnooze: %{public}@ isRecurring: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore alarm {alarmID: %{public}@ isSnooze: %{public}@ isRecurring: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}
TimeDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}
VehicleDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}
LocationDataSourceAlarms: Failed to get cdAlarm from trigger. {cdTrigger: %@}
LocationDataSourceAlarms: Failed to get reminderID from cdAlarm.reminder. {cdAlarm: %@}
LocationDataSourceAlarms: Failed to get remReminder from dataView result {reminderID: %{public}@}
LocationDataSourceAlarms: Failed to get remAlarm from remReminder.alarms {alarmID: %{public}@}
LocationDataSourceAlarms: remAlarm.trigger is not a RDCLRegionSource (REMAlarmLocationTrigger) {remAlarm.trigger: %@}
LocationDataSourceAlarms: Unable to get CLRegion from remAlarm.trigger {remAlarm.trigger: %@, reminderID: %{public}@}
LocationDataSourceAlarms: remReminder is not assigned to current user. Skipping {reminderID: %{public}@}
No cached value found for session: %@ list: %@
Loading cached list: %@ for session: %@
Swift/Dictionary.swift
Swift/NativeDictionary.swift
Duplicate values for key: '
loaded model in invocation
loaded parameter: %@
FirstDayOfTheWeek
Fixing broken references for recurrence rule {recurrenceRuleID: %{public}@, reminderID: %{public}}
Reminder is marked for deletion but recurrence rule is not {recurrenceRuleID: %{public}@, reminderID: %{public}@}
B24@0:8@16
Failed to compute subQueryPredicate for REMCDHashtagLabel.Predicates.withConcealedHashtag
_TtC7remindd31REMCalDAVNotificationCDIngestor
.daPushKey should not be practically used in REMCalDAVNotification
.daSyncToken should not be practically used in REMCalDAVNotification
REMCalDAVNotificationCDIngestor: cdCalDAVNotification.account is nil {cdCalDAVNotification.remObjectID: %@}
REMCalDAVNotificationCDIngestor: cdCalDAVNotification.owner is nil {cdCalDAVNotification.remObjectID: %@}
_TtC7remindd35RDStoreControllerNotificationCenter
observers
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter}, label: %@
com.apple.remindd.storeControllerNotificationCenter
RDStoreControllerNotificationCenter: Store notification is ICCC or change tracking internal changes only. Skipping.
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter}, label: %@
Firing latest value after delay {coalescedUpdates: %d, value: %@, completionBlocks: %d, debouncer: %@}
Cancelling pending work item {debouncer: %@}
RDDebouncer.sampleFire: First fire sampled {label: %@}
RDDebouncer.sampleFire: Sample exceeds threshold for starting a new window, resetting load measurements {label: %@, elapsed: %lf, threshold: %lf}
RDDebouncer.sampleFire: Sampled {label: %@, elapsed: %lf, n: %d}
No measurements to dequeue from to get the oldest sample value when updating load factor
os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %@
com.apple.remindd.rddebouncer
loadFactor wasn't properly initialized even with debouncing interval option set to .loadFunction
os_transaction RELEASE {name: com.apple.remindd.rddebouncer}, label: %@
Failed to cast userInfo[%{public}@] to Set<NSManagedObjectID>
Entity in the given filter option not recognized in managedObjectContext {entityName: %@, managedObjectContext: %@}
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.publisher}, label: %@
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.publisher}, label: %@
RDStoreControllerNotificationCenter.storeControllerDidChange: Received notification {notification.author: %{public}@}
Received store did change notification but observer is deallocated
_TtC7remindd22RDBogusCalendarCleaner
remindd2
cleanUpManualSortHintIfNeeded: Unexpectedly having a non-custom smart-list getting markedForDeletion {type: %{public}@, remObjectID: %{public}@}
cleanUpManualSortHintIfNeeded: CSL was deleted due to non-user-initiated changes, cleanup is not needed {listID: %{public}@}
cleanUpManualSortHintIfNeeded: CSL was deleted due to user-initiated changes, will delete its associated sort hint {listID: %{public}@}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of CSL being deleted {listID: %{public}@, error: %@}
REMCDModelSwiftHooks
REMCDModelNSManagedObjectSwiftHooks
remindd
Downloading records in zone %@
v16@?0@"CKRecord"8
Failed to serialize record {record: %@, error: %@}
Not pulling in CKPackage, the db of which lives at %@
ListIDsMergeableOrderingAsset
ListIDsMergeableOrdering
com.apple.remindd.RDCloudDebuggingUtils
DecodedListIDsMergeableOrdering
Error fetching record zones {error: %@}
_TtC7remindd31RDUserInteractionSessionManager
userDefaults
Failed to decoded encoded CheckIns -- return empty array {error: %{public}@}
Unexpected count for checkIn {count: %ld}
No checked-in -- Checking in {interaction: %@}
timeout expired -- reset check-in {interaction: %@}
timeout hasn't expired -- don't check-in {interaction: %@}
CheckIn not found -- Adding new one {interaction: %@, date: %@}
Failed to encode stored for checkIns {error: %{public}@, interaction: %@}
Replacing existing checkIn {interaction: %@, date: %@}
Failed to encode checkIns -- encodging empty array {error: %{public}@}
_TtC7remindd20RDAccountInitializer
DidCompleteInitializeAllAccountsNotification
RDAccountInitializerDidCompleteInitializeAllAccountsObserver
@32@0:8@?16@24
RDAccountInitializer: Error occured trying to initialize local accounts {error: %{public}@}
RDAccountInitializer: unknown account type
RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is active as there's no cloud account signed in.
RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is inactive (if empty) as we have some cloud accounts.
RDAccountInitializer: Setting account inactive value {accountID: %{public}@, inactive: %{public}@}
RDAccountInitializer: Not handling account data moves because we have not passed buddy or system data migrator
RDAccountInitializer: No primary iCloud account signed in or not enabled Reminders.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Data move not needed as no merge action flag was not set by the DCO.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: DCO has set the merge action flag asking us to move data to cloud, let's move on... {flagged: %{public}@}
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: The DCO flagged identifier is not the same as that of the current primary iCloud account. Something went wrong or we've found a race condition, don't move data {flagged: %{public}@, primary: %{public}@}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Error occurred when trying to move data from local to iCloud {flagged: %{public}@ error: %{public}@}
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: No iCloud REM account found in database, we can't move data. {flagged: %{public}@}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Local account is empty, we won't move local data to cloud {flagged: %{public}@}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: There's no inactivated CalDAV account store to remove, we 're done {appleAccountIdentifier: %{public}@}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: Removed inactivated CalDAV account store {remAccountObjID: %{public}@}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded save failed {error: %@}
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data as the signal flag is not set.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: AccountUtil has set the flag indicating we should try to 'migrate' inactivated CalDAV data to CloudKit if any {flagged: %{public}@}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: The flagged account identifier is not the same as the current primary iCloud account, something went wrong or we've found a race condition, don't move data {flagged: %{public}@, primary: %{public}@}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: Error occurred when trying to move data from inactivated iCloud CalDav to CloudKit account {flagged: %{public}@, error: %@}
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: cloudKitAccount.didChooseToMigrate should be true at this point but it isn't, something went wrong and we can't move data {flagged: %{public}@}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No CloudKit REM account found in database, something went wrong and we can't move data {flagged: %{public}@}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No inactive iCloud CalDAV account was found, no need to move data {flagged: %{public}@}.
RDAccountInitializer: System data migration has not finished
RDAccountInitializer: Creating local account {changeItem: %@}
RDAccountInitializer: No local account is found or created
RDAccountInitializer: Creating default list for local account {accountID: %{public}@}
RDAccountInitializer: This should never happen: the store told us there's no lists in this account but we did find a list with the default list ID {listID: %{public}@}
StoreController not supportsLocalInternalAccount. Skipping initializeLocalInternalAccountIfNeeded
RDAccountInitializer: Creating localInternal account {accountChangeItem: %@}
RDAccountInitializer: Creating SiriFoundInApps list {listChangeItem: %@}
Removing Extraneous Local Accounts {candidateAccounts.count: %ld}
Failed to query whether Extraneous Local Account is empty. Skipping {accountObjID: %{public}@, account: %@}
Extraneous Local Account is not empty. Not Removing {accountObjID: %{public}@, account: %@}
Extraneous Local Account is empty. Removing {accountObjID: %{public}@, account: %@}
com.apple.remindd.extraneousLocalAccountRemoved
RDAccountInitializer: Posting notification initialized all accounts done.
RDAccountInitializer: Posting notification initialized all accounts failed.
RDAccountInitializerDidCompleteInitializeAllAccounts
com.apple.reminders.RDAccountInitializer
RDAccountInitializer: No need to update in-memory PrimaryActiveCKAccountCaches {current: %{public}@
RDAccountInitializer: Calling updateInMemoryPrimaryActiveCKAccountCachesIfNeeded with {remObjectID: %{public}@, managedObjectID: %{public}@}
remindd.DidCompleteInitializeAllAccountsObserver
remindd.RDAccountInitializer
_TtP7remindd28RDAccountInitializerObserver_
cleanUpManualSortHintIfNeeded: Deleted hashtag label has nil canonicalName, abort cleanup
cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to non-user-initiated changes, cleanup is not needed {canonicalName: %@}
cleanUpManualSortHintIfNeeded: No primary active CK account when the hashtag label is deleted {canonicalName: %@}
cleanUpManualSortHintIfNeeded: Could not obtain manualSortIDHashKeyProvider in the CK account when the hashtag label is deleted {canonicalName: %@}
cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to user-initiated changes, will delete all associated sort hints for the label {canonicalName: %@}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of hashtag label being deleted {canonicalName: %@, error: %@}
cdAccount.managedObjectContext is nil for REMCDAccountListData.upsert(orderedIdentifiers:account:into:)
_TtC7remindd34RDReminderManualSortIDCacheContext
accountManualSortIDByAccountIDCache
reminderManualSortIDByReminderIDCache
RDReminderManualSortIDCache starts observing account changes
RDReminderManualSortIDCacheContext > initialized
_TtC7remindd19REMShareeCDIngestor
REMShareeCDIngestor: cdSharee.account is nil {cdSharee.remObjectID: %@}
REMShareeCDIngestor: cdSharee.list is nil {cdSharee.remObjectID: %@}
_TtC7remindd22RDTransactionRegistrar
counter
osTransaction
RDTransactionRegistrar[%{public}@]: Transaction count decremented to {count: %ld}
os_transaction RELEASE {name: %{public}@}
RDTransactionRegistrar[%{public}@]: Trying to decrement counter to negative, grounding to zero {count: %ld, n: %ld}
RDTransactionRegistrar[%{public}@]: Transaction count is not zero when osTransaction is nil {count: %ld}
RDTransactionRegistrar[%{public}@]: Transaction count is zero when osTransaction is not nil
RDTransactionRegistrar[%{public}@]: Transaction count is negative {count: %ld}
os_transaction INIT {name: %{public}@}
RDTransactionRegistrar[%{public}@]: Transaction count incremented to {count: %ld}
target
reader
_TtC7remindd13RDMergePolicy
@24@0:8Q16
B32@0:8@16^@24
RDMergePolicy: Unknown conflict or non-REMCDObject merge conflict is not handled by remindd {conflict: %@}
RDMergePolicy: Neither persisted or cached snapshot is defined {conflict: %@}
RDMergePolicy: Resolution token map missing from the CDObject snapshot, don't know how to resolve conflict {conflict: %@
RDMergePolicy: Cannot decode data to resolution token map from the CDObject snapshot, don't know how to resolve conflict {conflict: %@
RDMergePolicy: skip merging key because it does not exist in the snapshot {key: %@, remObjectID: %@}
RDMergePolicy: Resolution token map says we shouldn't merge key: {key: %@, remObjectID: %@}
RDMergePolicy: Going to merge key: {key: %@, remObjectID: %@}
RDMergePolicy: Missing managed object context for resolving merge conflict {key: %@, remObjectID: %@}
listIDsMergeableOrdering_v2
RDMergePolicy: Error occured while trying to merge ordered set for: {key: %@, remObjectID: %@}
RDMergePolicy: let's check if we need to merge this key: {key: %@, remObjectID: %@}
RDMergePolicy: Constraint conflict is not handled by remindd, and expect some confusing error message from CoreData {constraint: %@, constraintValues: %@}
<not-remcdobject>
RDMergePolicy: Missing managed object context for resolving constraint conflict {conflict: %@}
RDMergePolicy: cdReminder has no remObjectID {key: %@, cdReminder.objectID: %@}
RDMergePolicy: Could not get a replicaIDSource for reminder for key {key: %@, remObjectID: %@}
RDMergePolicy: Store snapshot document data is nil for the mergeable string document key {key: %@, remObjectID: %@}
RDMergePolicy: Failed to get the reminder remObjectID from the CDReminder {cdReminder: %@}
RDMergePolicy: Failed to get the account remObjectID from the CDReminder {cdReminder: %@}
RDMergePolicy: Unexpected reminder property key to get a replicaIDSource for it {key: %@}
RDMergePolicy: Store snapshot reminderIDs ordering data is nil for key {key: %@, remObjectID: %@}
RDMergePolicy: Deserialized reminderIDsMergeableOrdering from data {remObjectID: %@}
RDMergePolicy: cdAccount has no remObjectID {key: %@, cdAccount.objectID: %@}
RDMergePolicy: Could not get a replicaIDSource for account for key {key: %@, remObjectID: %@}
RDMergePolicy: Store snapshot listIDs ordering data is nil for key {key: %@, remObjectID: %@}
RDMergePolicy: Failed to get the account remObjectID from the CDAccount {cdAccount: %@}
RDMergePolicy: Unexpected account property key to get a replicaIDSource for it {key: %@}
RDMergePolicy: Merge policy type is not compatible with this merge policy, please use defaultMergePolicy() instead.
_TtCE7reminddCC19ReminderKitInternal23REMAccountsListDataView10InvocationP33_F1336D37D702B2C1BEEF72784365A11019PolymorphicListItem
modelObject
remObjectID
Skipping transaction becuase it contains no changes {transaction: %@}
Skipping change becuase it's not update {change: %@}
Skipping change unhandled type {objectID: %@}
Failed to cast managedObject to REMCDReminder {objectID: %@}
Updated reminder has no list -- skipping {reminder: %@}
Failed to cast managedObject to REMCDList {objectID: %@}
Failed to get remObjectID from REMCDList {objectID: %@}
Failed to cast managedObject to REMCDAccount {objectID: %@}
Failed to get remObjectID from REMCDAccount {objectID: %@}
Ignorning account change becuase it didn't update the name
Trying to call accountChildListOrSmartList() when modelObject is a group
Trying to call accountChildGroup() when modelObject isn't a group
Trying to call groupChildListOrSmartList() when modelObject is a group
unknown or unsupported REM object type for REMAccountsListDataView.ListItem
REMAccountsListDataView.Invocation no cache
REMAccountsListDataView.Invocation unable to decode cache
Unable to encode accounts list cache %@
REMAccountsListDataView.ReminderCounts Saving cache data size %ld
Computing reminders count in every list by fetching reminders as dictionaries {postFetchPredicateTypes: %@}
Reminder missing list identifier. Skipping {reminder.identifier: %{public}@}
Computing reminders count in every list by fetching reminders as an array of REMCDReminder {postFetchPredicateTypes: %@}
REMAccountsListDataView.Invocation fetchCounts() failed to fetch custom smart lists {error: %@}
Unable to decode accounts list cache
REMObjectIDIdentifiable
_TtC7remindd27RDApplicationShortcutEngine
listProvider
shortcutUpdater
_TtC7remindd27REMManualOrderingCDIngestor
listType
merging manual ordering {list type: %@, list ID: %@, top-level reminders count: %ld}
No primary active CloudKit account found when trying to merge manual ordering {list type: %@, list ID: %@}
RDReminderManualSortIDAdapter > initialized
Error upon merging manual ordering {list type: %@, listID: %@, error: %@}
REMCDManualSortHintDidContainIDsWithLocalPrefix
remindd1
@24@0:8^@16
_TtC7remindd23REMAttachmentCDIngestor
_TtC7remindd27REMFileAttachmentCDIngestor
_TtC7remindd28REMImageAttachmentCDIngestor
_TtC7remindd26REMURLAttachmentCDIngestor
REMFileAttachmentCDIngestor: cdFileAttachment.account is nil {cdFileAttachment.remObjectID: %@}
REMFileAttachmentCDIngestor: cdFileAttachment.reminder is nil {cdFileAttachment.remObjectID: %@}
REMFileAttachmentCDIngestor: cdFileAttachment.uti is nil {cdFileAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.account is nil {cdImageAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.reminder is nil {cdImageAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.uti is nil {cdImageAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.account is nil {cdURLAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.reminder is nil {cdURLAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.uti is nil {cdURLAttachment.remObjectID: %@}
_TtC7remindd18RDClientConnection
xpcDaemon
xpcConnection
notificationSubscriptionQueue
keepAliveTransaction
com.apple.remindd.RDClientConnection.shouldKeepAlive
com.apple.remindd.RDClientConnection.shouldNotKeepAlive
No clientProxy obtained.
Unable to get remoteObjectProxy for the app from the daemon. Maybe the client is gone? {error: %@}
Failed to create XPC performer. Is this a barebones daemon / before first unlock?
os_transaction RELEASE {name: %@}
com.apple.remindd.keepAlive[
remindd.RDClientConnection
 clientIdentity=
] xpcConnection=
Connection was invalidated {clientIdentity: %{public}@}
Connection was interrupted unexpectedly {clientIdentity: %{public}@}
AAACCOUNTS.com.apple.accountsd
com.apple.private.accounts.allaccounts
com.apple.private.systemmigration.daemonclient
com.apple.suggestd
com.apple.CoreSuggestions.suggest_tool
com.apple.private.calendar.syncclient
com.apple.exchangesync.exchangesyncd
com.apple.private.remindd
Device is running a non-internal Install. Not providing remindtool access level
Unexpected privateRemindd entitlement format {reminddEntitlements: %{public}@}
Unexpected type for remindd entitlement {entitlement: %{public}@, value: %{public}@, type: %{public}@}
com.apple.siri-distributed-evaluation
com.apple.suggestd.reminders
com.apple.remindd.userInteractive
com.apple.remindd
com.apple.analyticsd
REMXPCDaemon
v40@0:8@"REMStoreContainerToken"16@"NSString"24@?<v@?@"<REMXPCChangeTrackingPerformer>"@"NSError">32
v40@0:8@"REMStoreContainerToken"16@"NSString"24@?<v@?@"<REMXPCDebugPerformer>"@"NSError">32
v48@0:8@"NSString"16@"REMStoreContainerToken"24@"NSString"32@?<v@?@"<REMXPCStorePerformer>"@"NSError">40
v32@0:8@"NSString"16@?<v@?@"<REMXPCSyncInterfacePerformer>"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"<REMXPCIndexingPerformer>"@"NSError">24
REMXPCClient
Can't get NRPairedDeviceRegistry instance: assume AltAccount=NO
Can't get matching devices from NRPairedDeviceRegistry: assume AltAccount=NO
Can't get NRDevicePropertyIsAltAccount : assume AltAccount=NO
Matching devices from NRPairedDeviceRegistry is empty: assume AltAccount=NO
B16@?0@"NRDevice"8
_TtC7remindd11RDThrottler
allowedOperationsCount
throttleInterval
throttleResetDate
currentIntervalAllowedOperationsCount
Throttler allows and is going to run operation {identifier: %{public}@, op: %{public}@}
Throttler denied operation {identifier: %{public}@, op: %{public}@, remainingTimeInterval: %.4f, throttleResetDate: %{public}@}
REMCDAccountListData
T@"NSUUID",N,D,C
orderedIdentifierMap
T@"REMOrderedIdentifierMap",N,D,&
_TtC7remindd19RDCoreBehaviorModel
baseUrl
behaviorRetriever
trained
confidenceThreshold
timer
feedbackVersion
feedbackForRules
rules
_TtC7remindd35RDCoreBehaviorModelTrainingDelegate
trainingDataFrame
intentWords
metrics
RDCoreBehaviorFeedback.json
Failed to encode feedback data
Failed to save feedback data {error: %@}
New feedback info saved to {%@}
remindd.RDCoreBehaviorModelTrainingDelegate
Filtered rules {rules.count: %ld, filtered.count: %ld}
ReminderContactLabel
remindd/RDCoreBehaviorModel.swift
Failed to cast bmtype {uncasted: 
ReminderPriority
ReminderTitleIntent
ReminderDueDayOfWeek
ReminderAlarmLocationLabel
ReminderListIdentifier
CoreBehavior is not up to date
RDCoreBehaviorModel.sqlite
No existing CoreBehavior
removing rule: %@
corebehavior context: %@
number of matching rules: %{public}d
matching rules:
all corebehavior predictions: %@
top corebehavior predictions: %@
Current feedback version {%d}, skipping reset to version {%d}
v16@?0@"NSTimer"8
CoreBehavior mining task has run %@ seconds
CoreBehavior mining task terminating early due to shouldDefer is true
CoreBehavior mining task terminating early due to time out
RDBMMiningTaskDelegate
BMTaskSpecificEventProvider
q16@0:8
@24@0:8:16
_TtC7remindd22RDVehicleAlarmProducer
connectedToken
disconnectedToken
Unable to get infer RDProducerAlarmTrigger enum from trigger {trigger: %@}
This is an incorrect use of API. peopleInteraction origin takes an additional parameter that cannot be deduced solely by the REMAlarm. You need to create the origin enum manually
Starting RDVehicleAlarmProducer
com.apple.locationd.vehicle.connected
com.apple.locationd.vehicle.disconnected
RDVehicleAlarmProducer.start() must be called exactly once
Did receive vehicle disconnected notification
v12@?0i8
Failed to register notify handler. {status: %ld}
VehicleConnectionDidChange
Received vehicle change notification with nil producer
Did receive vehicle connected notification
remindd.RDVehicleAlarmProducer
v32@0:8@16@24
Error reading from asset URL {key: %{public}@, url: %{public}@, error: %{public}@}
remObjectID is not defined for cdObject {cdObject: %@}
accountID is not defined for cdObject {cdObject: %@}
Key in CKRecord's resolution token map is unrecognized {key: %{public}@, recordType: %{public}@, fieldType: %{public}@}
merge() did repair resolution token map for {recordType=%{public}@, recordID=%{public}@}
merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}@, recordID=%{public}@}
repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}@, recordID=%{public}@}
repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}@, recordKey=%{public}@, remappedRecordKey=%{public}@}
DidFinishMigration
DidChooseToMigrate
repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}@, recordID=%{public}@}
repairResolutionTokenMapForImportedRecord - recordID=%{public}@
repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}@
Unable to merge CR property from CKRecord into coredata object because replicaIDSource isn't available {key: %{public}@, cdObject: %@}
Unable to merge CR property from CKRecord into coredata object {key: %{public}@, cdObject: %@, error: %{public}@}
REMCDObjectSystemFieldsMerging: Found a case we are merging down a Unset version number from CK while local object version isn't unset {entity: %{public}@, identifier: %{public}@}
REMCDObjectSystemFieldsMerging: Unknown kind of value in ckRecord[%{public}@] {entity: %{public}@, identifier: %{public}@, value: %@}
REMCDObjectSystemFieldsMerging: Merged updated minimumSupportedVersion as NSNumber from CK record {entity: %{public}@, identifier: %{public}@}
Can't create data from object and not able to save it as asset {object: %@}
REMCDObjectSystemFieldsMerging
v32@0:8@"REMCDObject"16@"CKRecord"24
_TtC7remindd34RDAccountStoresRemovalEventHandler
RDAccountStoresRemovalEventHandler did reset accountsListDataViewUserDefaults
_TtC7remindd22RDXPCIndexingPerformer
remindd.RDXPCIndexingPerformer
Daemon receives reindexSearchableItems {identifiers: %@}
Daemon receives reindexAllSearchableItems
Created by remindd on 
REMXPCIndexingPerformer
v24@0:8@?<v@?>16
v32@0:8@"NSArray"16@?<v@?>24
_TtC7remindd18RDAccountDataMover
remindersBatchSize
accountDataMoverSaveRequestAuthorString
statistics
excludeSharedToMeLists
potentialDenylistItemIDs
_useSourceObjectIDAsExternalID
_copyListSharingStatus
currentSaveRequest
_TtC7remindd23RDReminderDataICSCopier
_TtC7remindd28RDReminderDataCloudKitCopier
_TtC7remindd28RDReminderDataExchangeCopier
RDAccountDataMover: RDReminderDataICSCopier: source reminder exported as ICS {objectID: %{public}@, icsTodo: %@}
RDAccountDataMover: RDReminderDataICSCopier: imported ICS into as reminder {objectID: %{public}@, storage: %@}
Failed to export reminder as ICSTodo and ICSCalendar {reminderID: 
RDAccountDataMover: Attempted to save with a current save request.
RDAccountDataMover: _copySliceOfReminders: Cannot copy reminders because list change item is not tracked and is nil {targetListID: %{public}@}
RDAccountDataMover: Processed copying source reminders {count: %d}
RDAccountDataMover: _copySliceOfReminders: Source reminder is denylisted to copy to the target list {sourceReminder: %{public}@}
REMReminder.dataCopierFactory: Could not create data copier for account data move because account type is not supported for now {type: %d, reminderID: %@}.
RDAccountDataMover: removeData: given account is not empty, now remove its lists and reminders {objectID: %{public}@}
default-list-absent
RDAccountDataMover: removeData: done removing data from account {objectID: %{public}@, lists.count: %d, remindersFromDefaultList: %d}
RDAccountDataMover: removeData: given account is already empty (no reminder or list count < 2) so we stopped {objectID: %{public}@}
RDAccountDataMover: Failed to create save request.
RDAccountDataMover: Processing source list to consider... {objectID: %{public}@}
RDAccountDataMover: Done copying source list {sourceList: %{public}@, targetList: %{public}@}
RDAccountDataMover: Source lists processed {count: %d}
RDAccountDataMover: Can't find target list change item with {objectID: %{public}@}
RDAccountDataMover: Source list is denylisted to copy to the target and it does not contain any non-denylisted child reminder {sourceList: %{public}@, targetList: %{public}@}
RDAccountDataMover: Processing target list to copy reminders into {objectID: %{public}@}
RDAccountDataMover: we chose to exclude this source list since someone else owns it {objectID: %{public}@}
RDAccountDataMover: The copy-from account is not a local account {%{public}@}.
RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.
RDAccountDataMover: Saved all changes and set .daWasMigrated=YES to cloud account {cloudAccount: %{public}@}
RDAccountDataMover: The copy-from account is an inactivated account {%{public}@}.
RDAccountDataMover: The copy-from account is not a CalDAV account {%{public}@}.
RDAccountDataMover: Copied data from inactivated account, saved all changes and set .daWasMigrated=YES to cloud account {inactivatedAccount: %{public}@, cloudAccount: %{public}@}
List Fetch Metadata
Created list fetchRequest {fetchRequest: %@}
List Fetch Count
List Fetch Storages
List Fetch Storages And Parents
List missing account {error: 
_TtC7remindd42RDDynamicSignificantTimeNotificationEngine
xpcEventSetter
currentStatus
dynamicSignificantTimeChangeNotificationEngine
Error updating significantTimeChageNotification {error: %{public}@}
DISABLE significantTimeChageNotification XPC event
DISABLE significantTimeChageNotification XPC event. Skipping because values match
ENABLE significantTimeChageNotification XPC event
Notification
ENABLE significantTimeChageNotification XPC event. Skipping because values match
_TtC7remindd17RDLocationManager
queue
q_locationManager
v40@0:8@16q24@32
Radius less than minimum:%@ for regionToMonitor:%@
 conservativeEntry:
didChangeAuthorization
os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}@}
com.apple.remindd.RDLocationManagerDelegate.
RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}@
os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}@}
didChangeAuthorization: {status: %{public}@}
monitoringDidFailFor: {region=%@, error=%@}
didFailWithError: %@
didDetermineState: {state=%@, region=%@}
didExitRegion: %@
RDLocationAlarmProducer didExitRegion: %@
didEnterRegion: %@
RDLocationAlarmProducer didEnterRegion: %@
stopMonitoring: %@
startMonitoring: %@, authStatus: %{public}@
locationManagerDidStart, reconciling all geofences
locationManagerDidStart
daemonLocationBundle() cannot locate bundle at %@, using Bundle.main instead. Location services will not work. This is expected for simulator.
daemonLocationBundle() successfully obtained from from %@
remindd.RDLocationManager
CLLocationManagerDelegate
v28@0:8@16i24
v40@0:8@"CLLocationManager"16@"CLLocation"24@"CLLocation"32
v32@0:8@"CLLocationManager"16@"NSArray"24
v32@0:8@"CLLocationManager"16@"CLHeading"24
B24@0:8@"CLLocationManager"16
v40@0:8@"CLLocationManager"16q24@"CLRegion"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconRegion"32
v40@0:8@"CLLocationManager"16@"CLBeaconRegion"24@"NSError"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconIdentityConstraint"32
v40@0:8@"CLLocationManager"16@"CLBeaconIdentityConstraint"24@"NSError"32
v32@0:8@"CLLocationManager"16@"CLRegion"24
v32@0:8@"CLLocationManager"16@"NSError"24
v40@0:8@"CLLocationManager"16@"CLRegion"24@"NSError"32
v28@0:8@"CLLocationManager"16i24
v24@0:8@"CLLocationManager"16
v32@0:8@"CLLocationManager"16@"CLVisit"24
daSymbolicColorName
ckSymbolicColorName
Can't construct REMColor from invalid JSON
_TtC7remindd20RDXPCBarebonesDaemon
Failed to ingest primary CD account to account storage when populating REMSmartListsDataViewInvocationResult
Warning: Trying to fetch CSLs from a non-CK account {accountID: %{public}@}
create empty storage for smart list {smartListType: %@}
You should not try to create a CSL using the fetchSmartList API
notificationUserInfoAccountObjectIDKey
notificationUserInfoAccountTypeKey
notificationUserInfoPropertyNameKey
notificationUserInfoPropertyValueKey
l_observers
l_cancellables
Trying to remove observer to RDAccountPropertiesNotifier but input observer is nil
RDAccountPropertiesNotifier cannot unobserve as the observer is not found {uuid: %@}
RDAccountPropertiesNotifier removed observer {uuid: %@}
Trying to add observer to RDAccountPropertiesNotifier but input observer is nil
RDAccountPropertiesNotifier added observer {uuid: %@}
Received RDStoreControllerREMAccountPropertiesDidUpdate has no userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no account REMObjectID in the userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no account type in the userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no property name in the userInfo
T@"NSUUID",N,R
objectID
newlyCreatedRecord: Failed to serialize/deserialize hintData in REMCDManualSortHint {ckIdentifier: %{public}@, list type: %@, listID: %@, error: %{public}@}
SerializationVersion
HintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
HintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
HintDataExcludingRemindersInLocalAccountAsAsset
HintDataExcludingRemindersInLocalAccountAsBytes
Unable to support REMCDManualSortHint serialization version introduced in a subsequent release
Skip merging for different in eTag
mergeData: Invalid remoteHintData for REMCDManualSortHint {ckIdentifier: %{public}@, list type: %@, listID: %@, dataSerializationVersion: %@, error: %{public}@}
mergeData: Invalid hintData in REMCDManualSortHint {ckIdentifier: %{public}@, list type: %@, listID: %@, error: %{public}@}
remindd.RDUserNotificationCenter
userNotificationCenter willPresent
Unknown notification action. {actionIdentifier: %@}
Unknown notification type from content. {content: %@}
Forwarding .assignmentNotification response to assignmentNotificationDelegate
Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate
remindd didn't expect to receive actions from .caldavSharedList. {response: %@}
remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}
remindd didn't expect to receive actions from .todayNotification. {response: %@}
Forwarding .reminderAlarm notification response to reminderAlarmDelegate
userNotificationCenter openSettingsForNotification, but we don't have any settings pane yet so bye ;)
_TtC7remindd24RDUserNotificationCenter
reminderAlarmDelegate
beforeFirstUnlockReminderDelegate
assignmentNotificationDelegate
v52@0:8@16@24@32B40@?44
v16@?0@"NSArray"8
RDUserNotificationRetainingReferences
Determine useReplaceInsteadOfAdd {identifier: %@, deliveredNotifications: %@}
Strategy: no existing notification {identifier: %{public}@, useReplaceInsteadOfAdd: false}
Issuing: notificationCenter.add(request) {identifier: %{public}@, skipBanner: %{public}@, userInfo: %@}
Unable to get UNMutableNotificationContent from UNNotificationContent {notification: %@}
Strategy: !alreadyRetained {identifier: %{public}@, useReplaceInsteadOfAdd: false}
Strategy: alreadyRetained && !contentChanged, nothing to do {identifier: %{public}@}
Strategy: alreadyRetained && contentChanged {identifier: %{public}@, useReplaceInsteadOfAdd: true}
Issuing: replaceContentForRequest() {identifier: %{public}@}
Strategy: alreadyRetained && recurring reminder {identifier: %{public}@, useReplaceInsteadOfAdd: false}
retainNotification content replaced {error: %@}
retainNotification request added {error: %@}
Issuing: showNotification notificationCenter.add(request) {identifier: %{public}@}
showNotification request added {error: %@}
User denied notification from Settings.
Unable to requestAuthorization from UNUserNotificationCenter, error = %@
Unable to create UNMutableNotificationContent from UNNotificationContent
releaseNotification: {identifier: %{public}@, userInfo = %@}
Issuing: replaceContentForRequest {identifier: %{public}@}
Issuing: removeDeliveredNotifications since retain count is zero {identifier: %{public}@}
releaseNotification: replaced content {identifier: %{public}@, error: %@}
UNUserNotificationCenterDelegate
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
NSObject
_TtC7remindd21RDAccountManualSortID
ckContainerID
accountType
REMRemindersListDataView.AssignedInvocation: cdAssignment has no ckAssigneeIdentifier {identifier: %@}
REMRemindersListDataView.AssignedInvocation: cdAssignment has no identifier %@
REMRemindersListDataView.AssignedInvocation: cdAssignment has no owning reminder {identifier: %@}
REMRemindersListDataView.AssignedInvocation - Got a shared to/from me list that doesn't have the current user in the sharee list, huh?! {listID: %{public}@}
Failed to get remObjectID from REMCDReminder {objectID: %@}
Failed to fetch signed-in accounts {error: %@}
No primary active CloudKit account found when trying to fetch reminders in REMRemindersListDataView invocation with .manualWithSortHint sorting style
REMCDReminder.displayDateSortDescriptor should not be nil
Failed to fetch reminders from reminderLites. Not returning initial reminder {error: %{public}@}
fetchRemindersDue objectIDs %@
fetchRemindersDue predicate %@
fetchRemindersDue cdReminders %@
Attempted to fetch duplicate initial reminders {subtask.objectID: %{public}@}
Attempted to fetch duplicate initial reminders {reminderLite.objectID: %{public}@}
Failed to fetch manual sort hint {list type: %@, listID: %@, error: %@}
Creating tagged smart list with empty storage because tagged smart list not found due to error {error: %@}
Failed to fetch smart list {smart list type: %@, error: %@}
Failed to group reminders by due date
alarm.reminder.completed
alarm.reminder.completionDate
reminders %ld updated %ld inserted %ld
_TtC7remindd25RDReplicaManagerUtilities
Skipping replica manager update. Version in database is newer {inputVersion: %llu, currentVersion: %llu}
_TtC7remindd27RDReminderManualSortIDCache
accountChangesSubscription
RDReminderManualSortIDCache cancels observing account changes
RDReminderManualSortIDCacheContext > cleared all
RDReminderManualSortIDCache filters account changes notification
Dropping unsupported criterion for searching REMCDList. {criterion: %@}
REMCDList's parentList is unexpectedly deleted {identifier: %@}
_TtC7remindd29RDDACalDAVShareRequestHandler
RDDACalDAVShareRequestHandler: Creating a DADREMShareResponseDelegate to call onto respondToShareRequest() {DATransaction.id: %@, accountID: %@, calendarURL: %@}
DADREMShareResponseDelegate has completed, but DATransaction was nil?! {error: %@}
DADREMShareResponseDelegate has completed with DATransaction {transactionId: %@, error: %@}
DADREMShareResponseDelegate has done calling XPC completion, but DATransaction was nil?! {error: %@}
DADREMShareResponseDelegate has done calling XPC completion with DATransaction {transactionId: %@, error: %@}
RDDACalDAVShareRequestHandler: Attempted to call DADREMShareResponseDelegate when DataAccess is disabled, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DataAccess is not yet up and running, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager is not yet set up properly, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager has no active accounts, aborting...
_TtC7remindd18RDDaemonController
@32@0:8@16@?24
@24@0:8@?16
v40@0:8@16@?24@?32
remindd.RDDaemonController
REMDaemonController
@"<REMXPCChangeTrackingPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
@"<REMXPCDebugPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
@"<REMXPCDebugPerformer>"24@0:8@?<v@?@"NSError">16
@"<REMXPCStorePerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCStorePerformer>">24@?<v@?@"NSError">32
@"<REMXPCSyncInterfacePerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCSyncInterfacePerformer>">24@?<v@?@"NSError">32
@"<REMXPCIndexingPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCIndexingPerformer>">24@?<v@?@"NSError">32
{shareResponse: declinded, calendarURL: 
{shareResponse: accepted, calendarURL: 
_TtC7remindd19RDXPCStorePerformer
storeProvider
v96@0:8@16@24@32@40@48@56@64Q72B80B84@?88
v28@0:8B16@?20
v20@0:8B16
Missing account utils for requesting to delete local data.
Missing account utils for requesting to initiate merging local data into sync data {acAccountIdentifier: 
Missing account utils for removing orphaned accounts
RDAccountUtils: Remove orphaned accounts
Failed to create REMStore for removing orphaned accounts
Missing account utils for updating account {acAccountID: 
Missing account utils for updating account database
RDAccountUtils: Updating system accounts
Failed to create REMStore for updating account database
notifyOfInteraction: {personHandle: %@, aliases: %@, contactIdentifier: %@}
Putting event {identifier: %@, reader: %@}
INPerson has no phone numbers or emails. Skipping {person: %@}
INPerson alias has missing value. Skipping {person: %@, handle: %@}
INPerson has unknown alias type. Skipping {person: %@, handle: %@}
Cloud Context is not intialized
v20@?0@"NSError"8B16
Failed to create share. {error: %@}
Fetching object with ID {objectID: %@}
v24@?0@"CKShare"8@"NSError"16
Found multiple instances of object with identifier: 
Failed to fetch share object. {error: %@}
(daemon) SAVE START {author: %{public}@, accountStorage.count: %lu, listStorage.count: %lu, smartListStorages.count: %lu, reminderStorage.count: %lu, changedKeys.count: %lu, replicaManagers.count: %lu
Will not save replica managers. Bundle ID is missing
mergePolicyTestSaveQueue
Converted saveError to remError {saveError: %@, remError: %@}
(daemon) SAVE FAIL {saveError: %@}
(daemon) SAVE END {author: %{public}@, accountStorages.count: %lu, listStorages.count: %lu, smartListStorages.count: %lu, reminderStorages.count: %lu, replicaManagers.count: %lu}
Error performing invocation {invocation.name: %@, error: %@}
Invocation does not conform to RDInvocable {invocation: %@}
Invocation does not confrom to RDInvocable {invocation: 
Performing invocation {invocation: %@, client: %@}
Error performing invocation {invocation: %@, error %@}
Finished performing {invocation: %@}
Performing store controller invocation {invocation: %@, client: %@}
Error performing store controller invocation {invocation: %@, error: %@}
Finished performing store controller invocation  {invocation: %@}
Executing fetch request {fetchRequest: %@}
Failed to perform fetch {error: %@}
Performing query in daemon {fetchRequest: %@}
Finished performing query in daemon {fetchRequest: %@, result: %@}
remindd.RDXPCStorePerformer
Deallocating RDXPCStorePerformer
REMXPCStorePerformer
v32@0:8@"REMFetchRequest"16@?<v@?@"REMFetchResult"@"NSError">24
v32@0:8@"REMStoreInvocation"16@?<v@?@"REMStoreInvocationResult"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"REMReplicaManagerSerializedData"@"NSError">24
v40@0:8@"REMObjectID"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"REMDistributedEvaluationCollectionOptions"16@?<v@?@"NSData"@"NSError">24
v96@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSDictionary"48@"NSDictionary"56@"NSString"64Q72B80B84@?<v@?@"NSError">88
v32@0:8@"REMObjectID"16@?<v@?@"CKShare"@"NSError">24
v40@0:8@"REMObjectID"16@"NSData"24@?<v@?@"CKShare"@"NSError">32
v32@0:8@"CKShare"16@?<v@?@"NSError">24
v32@0:8@"CKShareMetadata"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v28@0:8B16@?<v@?BB@"NSError">20
v36@0:8@"NSString"16B24@?<v@?BB@"NSError">28
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"NSString"16@?<v@?@"<REMXPCSuggestedAttributesPerformer>"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"NSNumber"@"NSError">24
_TtC7remindd12RDSyncPoller
pollBlock
eventStream
configuration
nil lastSyncPoll. Polling
lastSyncPoll < throttingInterval. Not Polling {lastSyncPoll: %{public}@, throttingInterval: %.3f}
lastSyncPoll > configurationInterval. Polling {lastSyncPoll: %{public}@, throttingInterval: %.3f}
SignificantTimeChange
Polling sync did finish {error: %{public}@}
Unexpected nil name REMCDHashtagLabel from AllHashtagLabelsInvocation {mid: %@}
Feature flag for `hashtags` is not enabled
Feature flag for `smartListManualSort` is not enabled
Unable to fetch manual ordering ID for tagged smart list without hash key provider
Matching manual sort hint not found {list type: %@, listID: %@, error: %@}
HashtagLabel with nil name
missing storeController
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/ReminderKit-490/remindd/SuggestedAttributes/REMSuggestedAttributesFeatureExtractor+RDInvocable.swift
title,creationDate,list,dueWeekDay,location,intentWord
_TtC7remindd29RDICCloudConfigurationUpdater
downloadableCloudConfiguration
xpcActivity
isUnitTest
ICCCU: Starting ICCloudConfigurationUpdater
ICCCU: Unexpectedly could not create an xpcActivity when trying to schedule a new one
ICCCU: Updating xpcActivity criteria {throttlingInterval: %lf, randomizedDelay: %lf}
ICCCU: Unexpectedly having pending activity on the xpcActivity when trying to create and schedule a new one
ICCCU: Unexpectedly having an existing non-nil xpcActivity when trying to create and schedule a new one
ICCCU: Running scheduled XPC activity, let's check if we should download remote cloud configuration file
ICCCU: lastCloudConfigurationDownload == nil, downloading remote config
ICCCU: lastCloudConfigurationDownload < throttingInterval, not downloading remote config {lastCloudConfigurationDownload: %{public}@, throttingInterval: %.3f}
ICCCU: lastCloudConfigurationDownload > configurationInterval, should download remote config {lastCloudConfigurationDownload: %{public}@, throttingInterval: %.3f}
ICCloudConfigurationUpdater
_TtC7remindd19RDObjectDescription
_TtC7remindd23RDLocationAlarmProducer
locationManager
alarmDatabaseDidChange, reconciling all geofences
Reminder has no displayDate, firing geofence as active
Reminder has displayDate that's in the future, firing geofence as passive instead of active. {displayDate.date: %@}
Reminder has displayDate that's in the past or same day, firing geofence as active as usual {displayDate.date: %@}
locationManager hasn't started. Not reconciling geofences.
reconcileAllGeofences desiredSet = %@
reconcileAllGeofences existingSet = %@
reconcileAllGeofences setToRemove = %@
reconcileAllGeofences setToAdd = %@
Starting location alarm producer {producer: %@}
locationManager started, reconciling all geofences
remindd.RDLocationAlarmProducer
init()
os_transaction INIT {name: com.apple.remindd.RDLocationAlarmProducer.%{public}@}
com.apple.remindd.RDLocationAlarmProducer.
RDLocationAlarmProducer: Couldn't create os_transaction_t for %{public}@
os_transaction RELEASE {name: com.apple.remindd.RDLocationAlarmProducer.%{public}@}
unknown proximity
InitiallyNilError
T@"NSError",N,R
NilValueError
InvalidValueError
AccountAbsentError
@64@0:8@16q24@32@40@?48@?56
successHandler
errorHandler
currentValueSubject
T@"<_TtP7remindd20ObservingAccountInfo_>",N,R,Vaccount
T@"OS_dispatch_queue",N,R,VcallbackQueue
_TtCC7remindd29RDAccountPersonIDSaltObserverP33_E6769D87973B1BC8029E74FBB6A323F311AccountInfo
T@"REMObjectID",N,R,VobjectID
Tq,N,R,Vtype
remindd.RDAccountPersonIDSaltObserver
<RDAccountPersonIDSaltObserver uuid:
@"NSUUID"16@0:8
_TtC7reminddP33_B5AC59DA85A1771DB62C8FFA793A471252_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider
hashKeyForManualSortID
_TtC7remindd37RDManualSortIDUnitTestHashKeyProvider
cdAccount
We don't currently support providing hash key other than from the primary cloudkit account. This log indicates there's some programming errors to pass on an incorrect account object {account: %{public}@}
_TtC7remindd20RDDynamicXPCActivity
shouldDefer
asyncHandler
l_pendingCriteria
RDDynamicXPCActivity UPDATE START {identifier: %{public}@, newCriteria: %{public}@}
RDDynamicXPCActivity UPDATE END pendingCriteria == newCriteria {identifier: %{public}@}
RDDynamicXPCActivity UPDATE executed on deallocated instance {identifier: %{public}@}
RDDynamicXPCActivity unexpected state {identifier: %{public}@, state: %d}
RDDynamicXPCActivity should defer {identifier: %{public}@}
RDDynamicXPCActivity UPDATE RUN {identifier: %{public}@
RDDynamicXPCActivity UPDATE
RDDynamicXPCActivity UPDATE END Updated {identifier: %{public}@, newCriteria: %{public}@}
RDDynamicXPCActivity RUN START {identifier: %{public}@}
RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_CONTINUE) failed {identifier: %{public}@}
RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_DONE) failed {identifier: %{public}@}
RDDynamicXPCActivity RUN END {identifier: %{public}@, completionStatus: %{public}@}
Clearing l_pendingCriteria
RDDynamicXPCActivity CHECKIN executed on deallocated instance {identifier: %{public}@}
RDDynamicXPCActivity CHECKIN ERROR unexpected state {identifier: %{public}@, state: %d}
RDDynamicXPCActivity CHECKIN RUN {identifier: %{public}@}
RDDynamicXPCActivity CHECKIN
RDDynamicXPCActivity CHECKIN CHECKIN {identifier: %{public}@}
RDDynamicXPCActivity registered more than once {identifier: %{public}@}
allCheckedInActivities called more than once
ManagedObjectContext missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: %@}
ManagedObjectContext missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: 
Store has no transactions. Not getting tokens {store: %@}
Failed to fetch object with ID {moc: %@, objectID: %@, error: %@}
The objectID's store does not exist in the PSC of MOC. This is an account store just got removed? {moc: %@, psc: %@, storeID: %@, objectID: %@, error: %@}
Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: %@}
Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: 
Failed to get transaction from CoreData. No error. {invocation: %@}
Failed to get transaction from CoreData. No error. {invocation: 
Fetched transactions for store {transactions.count: %ld, store.identifier: %@, store.url: %@, historyToken: %@}
Fetched all transactions {allTransactions.count: %ld, sourceToken: %@}
DADBuddyStateObserver(Swift extension) hasPassedBuddyFuture fulfilled
DADSystemAvailabilityChecker(Swift extension) systemAvailableFuture fulfilled
_TtC7remindd20RDDisplayDateUpdater
significantTimeNotificationStream
remindd.RDDisplayDateUpdater
UpdateDisplayDates BEGIN {store: %@}
UpdateDisplayDates END {store: %@}
Failed to update display dates {error: %@}
Not saving since there are no changes {totalUpdatedCount: %ld}
Saving last objects {updatedObjectsCount: %ld, totalUpdatedCount: %ld}
Saving batch {updatedObjectsCount: %ld, totalUpdatedCount: %ld}
Updating display dates in all stores due to significant time change
cacheQueue
cacheContext
cacheImplementation
_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0734ReminderIDsMergeableOrderingHelper
orderingByListID
listsWithOrdering
_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0728ReminderIDsMergeableOrdering
orderingChanged
needsSortReminders
data
$__lazy_storage_$_orderedSet
minCompletionDate
REMRemindersListBatchDeleteInvocation: updating REMCDList ordering {listID: %@, orderingChanged: %@, needsSortReminders: %@}
Failed to decode reminderIDsMergeableOrdering {error: %@}
ReminderIDsMergeableOrderingHelper orderedSet count: %d -> %d
Moving subtask IDs to reflect top level ordering. {subtaskIDs: %@, parentID: %@}
Found subtasks not to be deleted; make them top level instead. {subtaskID: %@, parentID: %@}
_TtC7remindd8RDDaemon
xpcClientConnectionListener
accountStoresRemovalEventHandler
alarmEngine
todayEngine
assignmentNotificationEngine
hashtagLabelUpdater
applicationShortcutEngine
coreSuggestionController
cloudConfigurationUpdater
manualSortHintUpdater
_TtC7remindd17RDBarebonesDaemon
xpcClientConnectionListener.
Reminder daemon started
remindd.RDDaemon
_TtC7remindd24REMListStorageCDIngestor
REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.reminderIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}@}
REMListStorageCDIngestor:mutateOrdering - number of reminderIDsOrderingHints {count: %d}
Some reminders have changes in .icsDisplayOrder so ICS display orders is taking precedence as the true sort hint - {list: %@}
REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}@}
Cannot get any REMCDList from the ordered set of reminders in the list.
REMListStorageCDIngestor: merge(storage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}@}
Actually really doing nothing for a merge on .remindersICSDisplayOrderChanged
Actually really doing nothing for a merge on .reminderIDsOrderingHints
mergeOrderedSet(): REMCDList.reminderIDsMergeableOrdering data is nil. Serializing from inutput orderedSet directly. {objectID: %@}
mergeOrderedSet(): Merge not supported for REMCDList.reminderIDsMergeableOrdering for now, directly serializing from input orderedSet. {objectID: %@, count: %d}
mergeOrderedSet(): Failed to merge ordered set for list {list.objectID: %@, key: %@}: %@
Serialized to json data from REMListStorage.reminderIDsMergeableOrdering during ingesting. {objectID: %@}
Removing sharee from list {list.objectID: %@, shareeobjectID: %@}
Removing calDAVNotification from list {list.objectID: %@, calDAVNotificationobjectID: %@}
Going to back propagate ordering changes to CD reminders {remindersCount: %ld, startIndexToKeepUntouched: %ld, maxDisplayOrder: %lu}
backPropagateOrderingChangesToICSDisplayOrder: Failed to obtain an managedObjextContext from a changed reminder
backPropagateOrderingChangesToICSDisplayOrder: Failed to pre-fetch changing reminders
Back propagated ordering changes to CD reminders - {changes: %@}
Produced empty change logs when trying to back propagated ordering changes to CD reminders, maybe a bug or should shortcut earlier.
Back propagating ordering changes: display order has gone too large in first try. Going to reset from 1 {maxDisplayOrder: %lu, largestDisplayOrder: %lu}
REMListStorageCDIngestor: establishRelationship(onStorage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}@}
Updating list.parentList {list: %@, parentList: %@}
Updating list.parentAccount {list: %@, account: %@}
Trying to undelete a smart list without an active primary CloudKit account
Updating list.account {list: %@, account: %@}
REMListStorageCDIngestor: cdList.account is nil {cdList.remObjectID: %@}
REMListStorageCDIngestor: cdList.reminderIDsMergeableOrdering is nil, replacing with `Data()` {cdList.remObjectID: %@}
_TtC7remindd14RDAccountUtils
_TtCC7remindd14RDAccountUtils32InactivatedICloudCalDavDataMover
store
_TtCC7remindd14RDAccountUtils22LocalDataToICloudMover
com.apple.remindd.accountUtils.accountDataMover
RDAccountUtils.LocalDataToICloudMover: Completed moving data from local to iCloud {target: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}@}
RDAccountUtils.LocalDataToICloudMover: Local account emptied {stats: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: No .calDav iCloud REMAccount found at all {accountIdentifier: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Found an active .calDav iCloud REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Found a .calDav iCloud REMAccount but it is inactive {objectID: %{public}@, accountIdentifier: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Found an active .cloudKit REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.
RDAccountUtils: Not an UUID {uuidString: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Failed to get the display account {accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Given ACAccount is not Apple account {accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Reminders is not enabled for the given ACAccount {accountIdentifier: %{public}@}.
RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated non-empy iCloud CalDAV account, now going to perform data move... {remObjectID: %{public}@}
RDAccountUtils.InactivatedICloudCalDavDataMover: Completed moving data from the inactivated iCloud CalDAV account to CloudKit {ckAccount: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}@}
RDAccountUtils.InactivatedICloudCalDavDataMover: The inactivated CalDAV account is now emptied after the data move {stats: %{public}@}.
RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated iCloud CalDAV account but it is empty, we're done {remObjectID: %{public}@}
RDAccountUtils.fetchInactiveCalDavAccount: Didn't find any .calDav iCloud REMAccount {appleACAccountID: %{public}@}
RDAccountUtils.fetchInactiveCalDavAccount: Didn't find an inactve .calDav iCloud REMAccount but found an active one {appleACAccountID: %{public}@}
RDAccountUtils.fetchInactiveCalDavAccount: Found an inactive .calDav iCloud REMAccount {appleACAccountID: %{public}@}
RDAccountUtils: Missing store controller, can't stop ICCC.
RDAccountUtils: Missing ICCC, can't stop ICCC.
RDAccountUtils: Disabled ICCC
RDAccountUtils: Missing store controller, can't start ICCC.
RDAccountUtils: Missing ICCC, can't start ICCC.
RDAccountUtils: Enabled ICCC
RDAccountUtils: _initializeAllAccounts: Missing store controller.
RDAccountUtils: _initializeAllAccounts: Calling RDAccountInitializer.initializeAllAccounts()
RDAccountUtils: _initializeAllAccounts: RDAccountInitializer.initializeAllAccounts() finished, calling completion.
Failed to create store because the XPC daemon is gone
Failed to create store because storeController does not support accountUtils
ACAccount type is not supported or reminders dataclass is not enabled {accountType: %@}
UpdateAccountWithACAccount: Try to update account object {accountID: %@}
UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %@}
UpdateAccountWithACAccount: Will process account {displayAccountID: %@, accountType: %d}
UpdateAccountWithACAccount: Resolved account object ID from displayACAccount: {resolved: %@, displayACAccount: %@}.
UpdateAccountWithACAccount: Will process non-primary iCloud CalDAV account {accountID: %@}
UpdateAccountWithACAccount: Will not fetch migration state {accountID: %@}
UpdateAccountWithACAccount: Will process CloudKit account {accountID: %@, didChooseToMigrate: %d, shouldShowCloudKitAccount: %d, didFinishMigration: %d}
UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %@, didChooseToMigrate: %d}
Store controller missing for checking whether migration has failed
Display ACAccount ID is not an UUID {displayACAccountID: %@}
UpdateAccountWithACAccount: Got a Managed Apple ID. Will only process iCloud CalDAV account for it {accountID: %@}
UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %@}
Missing cloud context for fetching migration state {accountID: %@}
Missing Cloud Context and not be able to fetch migration state
Fetch migration state from user record {accountID: %@}
Received migration state from user record {accountID: %@}
Failed to fetch user record. Let's assume the account is not migrated {accountID: %@}
Cache migration state in ACAccount object {accountID: %@}
Error updating migration flags for ACAccount {acAccount: %@, error: %@}
Migration state cache saved {accountID: %@}
UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %@, accountID: %@}
UpdateAccountWithACAccount: Migration state fetched {accountID: %@}
UpdateAccountsWithAccountInfos: Updating account object {accountID: %@}
UpdateAccountsWithAccountInfos: Saving account object changes
UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %@}
UpdateAccountsWithAccountInfos won't create inactive accounts unless it is .cloudkit {name: %@, accountID: %@, type: %d}
UpdateAccountsWithAccountInfos is creating account object {name: %@, accountID: %@, type: %d}
UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %@, accountID: %@, expectedType: %d, actualType: %d}
UpdateAccountsWithAccountInfos is updating existing account object {name: %@, accountID: %@, type: %d}
UpdateAccountsWithAccountInfos is going to delete account {accountName: %@, accountID: %@, type: %d}.
UpdateAccountsWithAccountInfos: Account object changes saved
UpdateAccountsWithAccountInfos: Error saving context after adding account {error: %@}
Found ACAccount without identifier
ACAccount type not allowlisted, assume it's CalDAV {typeIdentifier: %@}
Failed to create REMStore for requestToMergeLocalDataIntoSyncData
RDAccountUtils: requestToDeleteLocalData: Error occurred when trying to delete local data {error: %{public}@}
Error occurred when trying to delete local data {error: 
RDAccountUtils: requestToDeleteLocalData: Local account emptied {stats: %{public}@}.
RDAccountUtils: requestToMergeLocalDataIntoSyncData {acAccountIdentifier: %{public}@}
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Could not find an Apple ACAccount for {acAccountIdentifier: %{public}@}
RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store already exists, move local data now {acAccountIdentifier: %{public}@}
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Error occurred when trying to move data from local to iCloud {acAccountIdentifier: %{public}@ error: %{public}@}
Error occurred when trying to move data from local to iCloud {acAccountIdentifier: 
RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store does not exists yet, will move local data later {acAccountIdentifier: %{public}@}
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Local account is empty, we won't move local data to cloud {acAccountIdentifier: %{public}@}.
Local account is empty error occurred when trying to move data from local to iCloud {acAccountIdentifier: 
RDAccountUtils: Trying to remove orphaned accounts
RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.
Couldn't fetch accounts from ACAccountStore.
Failed to fetch accounts which are no longer signed-in {error: %@}
Failed to remove accounts which are no longer signed-in
Removing orphaned accounts {accounts: %@}
No orphaned accounts to remove.
Orphaned accounts removed
DADMain is disabled after we stop monitoring agents. Will not try re-starting agents.
RDAccountUtils: Updating account {accountID: %@}
No ACAccount is found for updating account object {acAccountID: 
Failed to create REMStore for updating account object {acAccountID: 
No reminders accounts is found
RDAccountUtils: Finished updating account {accountID: %@}
Failed to update some or all of the system accounts {error: %@}
Failed to restart DA monitoring agents
RDAccountUtils: Completed updating system accounts, calling updateAccountsAndFetchMigrationState completion {didAddOrRemoveAccounts: %d, didUpdateAccounts: %d, error: %@}
Purge ACAccount migration state cache
Failed to fetch account from account store for resetting migration state {error: %@}
Error saving ACAccount {error: %@}
RDAccountUtils: Process migration state change
No ACAccount is found for updating migration state {acAccountID: %@}
Failed to create REMStore for migrating preferred default list
Can't migrate default list ID {error: %@}
Default list is CalDAV but has no external identifer
Default list with unrecognized external identifier (missing slash) {externalIdentifier: 
Default list with unrecognized external identifier (invalid UUID) {externalIdentifier: 
Failed to create REMStore for process migration state change
reminder.list.daIsEventOnlyContainer
reminder.list.daIsNotificationsCollection
account.inactive
Created reminder fetchRequest {fetchRequest: %@}
Due date sorting missing due date
q24@?0@8@16
Given cdReminders should not contain any element that is not a REMCDReminder.
newCloudObject: Unknown alarm trigger type {type: %@}
mergeData: Unknown trigger type {type: %@}
ReferenceFrameString
DateComponentsData
Fixing broken references for alarmTrigger {alarmTriggerID: %{public}@, alarmID: %{public}@}
Alarm is marked for deletion but alarm trigger is not {alarmTriggerID: %{public}@, alarmID: %{public}@}
alarmReferenceCKRecordType
Record.type is date but this is not a date trigger {type: %@}
Record.type is location but this is not a location trigger {type: %@}
Record.type is time interval but this is not a time interval trigger {type: %@}
Record.type is vehicle but this is not a vehicle trigger {type: %@}
_TtC7remindd26RDStoreControllerAnalytics
q_fetchCounts
q_saveCounts
q_postEventWorkItem
enabled
storeControllerReadWriteEventName
remindd.RDStoreControllerAnalytics
com.apple.remindd.storecontroller.readwrite
totalReminderCount
incompleteReminderCount
sharedListsCount
parentReminderCount
flaggedReminderCount
structuredTagCount
incompleteLocationAlarmsCount
incompleteTimeAlarmsCount
_TtC7remindd32RDSuggestedAttributesAutoTrainer
persistentStorage
storeControllerObserverToken
Starting RDSuggestedAttributesAutoTrainer
Started RDSuggestedAttributesAutoTrainer more than once
Scheduling XPCActivity before start()
RDSuggestedAttributesAutoTrainer schedule {isDatabaseDirty: %d, assumeDatabaseDirty: %d}
Error getting latest FetchResultToken. Returning q_isDatabaseDirty == false {error: %{public}@}
RDSuggestedAttributesAutoTrainer TRAIN START
RDSuggestedAttributesAutoTrainer TRAIN END {results: %{public}@}
Failed to decode the parameters of RDSwiftInvocable {error: %@, invocation: %@}
Failed to encode the result of RDSwiftInvocable {error: %@, invocation: %@}
Dropping unsupported criterion for searching REMCDSmartList. {criterion: %@}
expecting a valid REMAccount for a custom smart list
Error ingesting cdSmartList.parentList into list storage {error: %@}
REMSmartCDList's parentList is unexpectedly deleted {identifier: %{public}@}
fetching smart list returned more than one result {type: %@ objectID: %@, count: %@}
REMCDAccount.recordName() cannot be determined because it is called before .ckUserRecordName is initialized {account: %{public}@}
REMCDAccount.sortChildrenObjects() Not expected to be called practically {account: %{public}@}
ERROR mergeMigrationState(fromRecord:) - Trying to merge account record that toggles didFinishMigration->FALSE after finishing migration {isAccountRecord: %d, accountID: %{public}@}
mergeMigrationState(fromRecord:) - Printing resolution tokens for debugging upon toggling didFinishMigration->FALSE - {didChooseToMigrate: (record=%@, CD=%@), didFinishMigration: (record=%@, CD=%@)}
Migration state did change {accountID: %@, didChooseMigration: %d, didFinishMigration: %d}
Missing store controller for processing migration state change {accountID: %@}
Missing cloud context for processing migration state change {accountID: %@}
Missing account utils for processing migration state change {accountID: %@}
mergeMigrationState(fromRecord:) - Toggling didFinishMigration->FALSE {isAccountRecord: %d, accountID: %{public}@, didChooseToMigrateChanged: %d, didChooseToMigrate: %d}
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no remObjectID (ckIdentifier: %{public}@, externalIdentifier: %{public}@).
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no listIDsMergeableOrdering (accountID: %{public}@).
MERGE.LOCAL: Clean up account.listIDsOrdering {listIDs.to.remove: %@}
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has nil lists (accountID: %{public}@).
B20@0:8B16
v32@0:8@16B24B28
REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because storeController isn't available {account: %{public}@}
REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}@}
REMCDAccount+CloudKit: Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}@, #csls: %ld, #lists: %ld}
REMCDAccount+CloudKit: Not sorting child smartLists becuase REMCDAccount.mutableOrderedSetValue(forKey: smartLists) is nil
REMCDAccount+CloudKit: Sort ordered set account.smartLists - before - {smartLists: %@, ordering: %@}
REMCDAccount+CloudKit: Sort ordered set account.smartLists - after - {smartLists: %@}
REMCDAccount+CloudKit: Sorted CSLs into account.smartLists {account: %{public}@, #csls: %ld}
Not sorting child lists becuase REMCDAccount.mutableOrderedSetValue(forKey: lists) is nil
Sort ordered set account.lists - before - {lists: %@, ordering: %@}
Sort ordered set account.lists - after - {lists: %@}
SharedListIDsToOwnerNames
Failed to encode ckSharedObjectOwnerNames in JSON {error: %@}
Invalid ckSharedObjectOwnerName entry {objectIdentifier: %@, ownerName: %@}
Failed to create a new listIDsMergeableOrdering when trying to update listIDsMergableOrdering for missing list(s)
Tried to update listIDsMergableOrdering for missing list but list has no identifier {list: %@}
Unable to create new listIDsMergeableOrdering because replicaIDSource isn't available {key: %{public}@, cdObject: %@}
REMCDAccount.mergeData(from): Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %@, changedValue: %@}
REMCDAccount.mergeData(from): Synced and merged account .personIDSalt change from CloudKit record {accountID: %@}
Succesfully processed migration state change after merging CK user record
Failed to process migration state change after merging CK user record {error: %@}
listTypeRawValue
Ts,N,D
listID
T@"NSString",N,D,C
hintData
T@"NSData",N,D,C
lastAccessedSinceReferenceDate
Ti,N,D
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
Operation denied {requestedAccessLevel: %{public}@, currentAccesslevel: %{public}@}
com.apple.private.dark-wake-push
com.apple.private.xpc.domain-extension
com.apple.private.DistributedEvaluation.RecordAccess-com.apple.reminders.des
com.apple.private.des-service
com.apple.security.exception.shared-preference.read-only
com.apple.security.temporary-exception.shared-preference.read-only
com.apple.security.exception.shared-preference.read-write
com.apple.security.temporary-exception.shared-preference.read-write
com.apple.symptom_diagnostics.report
com.apple.private.tcc.manager
com.apple.private.tcc.allow.overridable
com.apple.private.tcc.allow
com.apple.security.exception.mach-lookup.global-name
com.apple.security.temporary-exception.mach-lookup.global-name
application-identifier
com.apple.application-identifier
.internalTestTool
.peopleInteraction
.userInteractive
.readWriteLocalInternal
.readWritePublic
@24@0:8@16
Can't construct REMResolutionTokenMap from invalid JSON
Can't construct REMResolutionToken from invalid JSON
modificationTime
_TtC7remindd25RDTodayNotificationEngine
bannerTimeEventStream
badgeEventStream
dynamicSignificantTimeNotificationEngine
todayNotificationTimeObserver
User doesn't want today notifications at all. Not adding next time event.
Error fetching scheduled reminders when getting nextReminderDueDateMidnight {error: %@}
Deciding when to wake up for the next TodayNotification {todayTimeCandidates: %@, now: %@}
No time in todayTimeCandidates is in the future. Not adding next time event. {todayTimeCandidates: %@}
Scheduled next todayNotification fire date {nextFireDate: %{public}@}
User doesn't want today notifications at all. Not posting today notification.
Unable to find last fire date. Not firing Today Notification. {todayNotificationFireTime: %{public}@, now: %{public}@}
Current time is >%{public}fs after desired fire time. Not firing Today Notification {lastFireDate: %{public}@, now: %{public}@}
Unable to fetch REMTodayDataView. Not posting any todayNotification. {error: %@}
REMRemindersListDataView.fetchScheduled up to now fetched AllDay reminders. {count: %ld}
No all-day reminder whose lastBannerPresentationDate is before their own dueDate (at TodayNotificationFireTime). Not posting TodayNotification.
No reminderIDs found in Today smart list. Not posting TodayNotification.
No reminders in Today view. Not showing today notification.
TodayNotificationEngine has updated lastBannerPresentationDate {reminderIDs: %{public}@, lastBannerPresentationDate: %{public}@}
TodayNotificationEngine is unable to update lastBannerPresentationDate {reminderIDs: %{public}@, error: %@}
RDTodayNotificationEngine: Posted Today notification {body: %@}
Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: today}
today
RDTodayNotificationEngine: Unable to post Today notification {error: %@}
Evaluating whether to trigger TodayNotification {reminderID: %{public}@, lastPresentationTime: %{public}@, fireDate: %{public}@, now: %{public}@}
Starting RDTodayNotificationEngine
os_transaction INIT {name: com.apple.remindd.todayEngine.start}
com.apple.remindd.todayEngine.start
v16@?0@"NSDateComponents"8
os_transaction RELEASE {name: com.apple.remindd.todayEngine.start}
RDTodayNotificationEngine.start() must be called exactly once
Received storeController changed notification after RDTodayNotificationEngine was deallocated
os_transaction INIT {name: com.apple.remindd.todayEngine.storeControllerChange}
com.apple.remindd.todayEngine.storeControllerChange
os_transaction RELEASE {name: com.apple.remindd.todayEngine.storeControllerChange}
Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine
todayNotificationBadge event triggered
os_transaction INIT {name: com.apple.remindd.todayEngine.badgeEventStream}
com.apple.remindd.todayEngine.badgeEventStream
os_transaction RELEASE {name: com.apple.remindd.todayEngine.badgeEventStream}
streamTodayNotificationFireTime: %@
Received streamTodayNotificationFireTime callback on deallocated RDTodayNotificationEngine
os_transaction INIT {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}
com.apple.remindd.todayEngine.todayNotificationTimeObserver
os_transaction RELEASE {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}
todayNotification XPC Event triggered
os_transaction INIT {name: com.apple.remindd.todayEngine.bannerTimeEventStream}
com.apple.remindd.todayEngine.bannerTimeEventStream
os_transaction RELEASE {name: com.apple.remindd.todayEngine.bannerTimeEventStream}
_TtC7remindd22RDReminderManualSortID
ckElementID
localUUID
_TtC7remindd13RDAlarmEngine
producers
consumers
AlarmEngine didn't expect to receive actions of this type. {type: %@, response: %@}
Processing notification response {actionIdentifier: %{public}@, notificationIdentifier: %{public}@}
Error trying to retrieve reminder {notificationIdentifier: %{public}@, error: %@}
Handle notification action for reminder {reminderID: %{public}@, action: %{public}@}
Unexpected .declineAssignment action for notification type .reminderAlarm
Unexpected .viewAssignmentInList action for notification type .reminderAlarm
Unexpected .addToReminders action for notification type .reminderAlarm
Updated reminder successfully. {actionIdentifier: %{public}@, reminderID: %@}
Save error. Failed to save updates from notification response {error: %@ , reminderID: %{public}@, actionIdentifier: %{public}@}
Starting alarmEngine {engine: %@, producers.count: %ld, consumers.count: %ld}
Finished starting alarmEngine {engine: %@, producers.count: %ld}
remindd/RDAlarmEngine.swift
Started RDAlarmEngine twice -- Crashing
os_transaction INIT {name: com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange}
com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange
Received store changes with deallocated alarm engine
os_transaction RELEASE {name: com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange}
Triggered alarmEngine database did change. Notifying producers
os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngineAssembly}
RDAlarmEngine:debouncePolicy: DB load is '%@', debounce interval to use: %lf s, stats: {average: %lf, #sample: %d}
_TtC7remindd15RDDatabaseSaver
RDDatabaseSaver: Primary CloudKit account added or activated, setting inMemoryPrimaryActiveCKAccountREMObjectID {newCKAccountID: %{public}@}
RDDatabaseSaver: A primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are adding or activating another different CloudKit account, we will still update the in-memory value {currentCKAccountID: %{public}@, newCKAccountID: %{public}@}
RDDatabaseSaver: Primary CloudKit account removed or deactivated, unsetting both inMemoryPrimaryActiveCKAccountREMObjectID and clear its NSManagedObjectID cache {removing: %{public}@}
RDDatabaseSaver: A different primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are removing or deactivating another different CloudKit account, not updating the in-memory value in this case {currentCKAccountID: %{public}@, removedCKAccountID: %{public}@}
RDDatabaseSaver: ingestionCoordinator.run()
RDDatabaseSaver: managedObjectContext.save()
SAVE END {request.author: %{public}@, clientIdentity: %{public}@, containerURL: %@}
RDDatabaseSaver: Unexpected use of REMStoreModeEventKitSync to edit/insert/remove .cloudKit account(s) {author: %{public}@, clientIdentity: %{public}@}
RDDatabaseSaver: These accounts are marked for removal {clientIdentity: %@, accountIdentifiers: %@}
RDDatabaseSaver: Error performing save when trying to remove account stores. {error: %@}
RDDatabaseSaver: Removed account stores {clientIdentity: %@, accountIdentifiers: %@}
Failed to get entity for CDObject {remObjectID: %@, CDObject: %@}
Failed to get entity for CDObject {remObjectID: 
cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %@}
CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %@, momEntityNames: %@}
CoreData entity not found for remObjectID.entity {remObjectID: 
, momEntityNames: 
ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %@}
ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: 
Tried to perform after-save action with non-existent target object -- bail {author: %{public}@, cdObjectID: %@}
Could not find the changed keys & values to perform after-save action -- bail {author: %{public}@, cdObjectID: %@}
Fetching pending objects from database {cdPendingObjectIDs.count: %d}
Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}@}
Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}@, cdObjectID: %@}
Tried to mutate ordering in relationships with non-existent target object -- bail {author: 
Tried to establish relationship with non-existing object -- skipping {author: %{public}@, cdObjectID: %@}
Tried to establish relationship with non-existing object -- skipping {author: 
UPDATE RELATIONSHIPS {cdObjectID: %@, changedRelationshipKeys: %@}
Tried to establish realtionship with non-existent target object -- bail {author: %{public}@, cdObjectID: %@, relationshipObjectID: %@}
Tried to establish realtionship with non-existent target object -- bail {author: 
, relationshipObjectID: 
No relationships to establish for mappable -- skipping {CDType: %@}
unknown mode
Performing fetch during upsert {CDType: %@}
Persistent store is not found for this object, which means the store is removed before the object gets saved. We will drop this object. {objectID: %{public}@}
INSERT {objectID: %{public}@, managedObjectID: %@}
UPDATE VALUES {objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}@} with syncToCloudKit: %d
Upsert: updateChangeCount() skipped {syncToCloudKit: %d, immutableType: %d, objectID: %{public}@, changedValues.keys: %{public}@}
Client doesn't have permission to write key {changedValueKey: %{public}@}
Skipping fetch during upsert {CDType: %@}
Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}@, cdObjectID: %@, orderableRelationhipKey: %@}
Tried to mutate ordering of a non-existing relationship -- bail {author: 
, orderableRelationhipKey:
Tried to mutate a relationship that is not ordered -- bail {author: %{public}@, cdObjectID: %@, orderableRelationhipKey: %@}
Tried to mutate a relationship that is not ordered -- bail {author: 
Updating relationship ordering of %{public}@ {author: %{public}@, changedValueKey: %{public}@, orderableRelationshipKey: %{public}@}
Not mutating ordering because mutableOrderedSet for relationship is nil {orderableRelationshipKey: %@}
Skipping afterSaveAction() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
Skipping mutateRelationshipOrdering() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
Upsert: Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
REMCDManualSortHint
DADREMUserNotificationPresenting: content must be kind of UNMutableNotificationContent
DADREMUserNotificationPresenting: show notification for DA {identifier: %{public}@, category: %{public}@, content.userInfo: %@}
_TtC7remindd12RDDataAccess
dataAccessRequestsQueue
remStoreProvider
userNotificationCenterProvider
_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B28RDDataAccessREMStoreProvider
@40@0:8@16@?24@?32
rdDaemonController
_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B46RDDataAccessUserNotificationPresentingProvider
Implementation of REMDAAccountPropertiesObserving must be actually RDAccountPersonIDSaltObserver
You should set up a RDStoreControllerNotificationCenter and work queue before starting RDDataAccess in order to observe reminders database.
Received store changes with deallocated RDDataAccess!
RDDataAccess: Received store controller changes!
RDDataAccess RDDARequest.updateContentsOfAllFolders {accountIDs: %{public}@}
AltAccount=%d
Platform does not support DataAccess {dataAccessEnabled: false}
BehaviorManager says dataAccess is not enabled {dataAccessEnabled: false}
Did query DataAccess Enabled status {dataAccessEnabled: true}
RDDataAccess is starting...
os_transaction INIT {name: com.apple.remindd.dataaccess.launch}
com.apple.remindd.dataaccess.launch
RDDataAccess has done waitForSystemAvailability, now adding to operation queue to bootstrap DADAgentManager
os_transaction INIT {name: com.apple.remindd.dataaccess.agentManager.load}
com.apple.remindd.dataaccess.agentManager.load
RDDataAccess finished starting (note that DADAgentManager may not have done loading up yet)
os_transaction RELEASE {name: com.apple.remindd.dataaccess.launch}
RDDataAccess has done _loadAndStartMonitoringAgents on DADAgentManager
os_transaction RELEASE {name: com.apple.remindd.dataaccess.agentManager.load}
remindd/RDDataAccess.swift
You must first call RDDataAccess.setup(...) to set up a RDDaemonController before accessing RDDataAccess.shared
You must first call RDDataAccess.setup(...) to set up a rdUserNotificationCenter that conforms to DADREMUserNotificationPresenting before accessing RDDataAccess.shared
You must first call RDDataAccess.setup(...) to set up a rdStoreControllerNotificationCenter before accessing RDDataAccess.shared
REMDAAccountPropertiesObserving
DADREMStoreProvider
@"REMStore"16@0:8
@"REMSaveRequest"16@0:8
@"<REMDAAccountPropertiesObserving>"40@0:8@"OS_dispatch_queue"16@?<v@?@"NSData">24@?<v@?@"NSError">32
v24@0:8@"<REMDAAccountPropertiesObserving>"16
B24@0:8@"NSError"16
@"NSString"32@0:8@"NSString"16@"NSData"24
DADREMUserNotificationPresentingProvider
@"<DADREMUserNotificationPresenting>"16@0:8
DADREMUserNotificationContent
title
body
application/json
application/protobuf
development
_TtC15InvernessClient20InvernessClientLocal
apiToken
localServer
Failed to extract host name from database URL: 
Failed to extract port from database URL: 
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
/code/databaseContext
http://127.0.0.1:31234
v24@?0@"CKRecordID"8@"NSError"16
v24@?0@"NSString"8@"NSError"16
Bad header line: 
codeagent.CodeServiceRequest
codeagent.CodeServiceRequest.ServiceClientConfig
codeagent.CodeServiceRequest.ClientConfig
codeagent.CodeServiceRequest.AccountConfig
codeagent.CodeServiceRequest.RequestContext
codeagent.CodeServiceResponse
codeagent.InitializeContainerRequest
codeagent.InitializeContainerResponse
codeagent.StopContainerRequest
codeagent.StopContainerResponse
codeagent.StopAllContainerRequest
codeagent.StopAllContainerResponse
codeagent.CheckContainerHealthRequest
codeagent.CheckContainerHealthResponse
_TtCV15InvernessClient28Codeagent_CodeServiceRequestP33_DA494235803A0FD6629E2250EBE90E6613_StorageClass
_serviceName
_functionName
_serializedParameters
_serializationFormat
_clientConfig
_accountConfig
_requestContext
_TtCVV15InvernessClient28Codeagent_CodeServiceRequest12ClientConfigP33_DA494235803A0FD6629E2250EBE90E6613_StorageClass
_serviceType
_config
_TtCV15InvernessClient29Codeagent_CodeServiceResponseP33_DA494235803A0FD6629E2250EBE90E6613_StorageClass
_serializedResult
_error
path
code
serializedResult
userId
databaseEnvironment
databaseType
deviceId
applicationBundleId
databasePartition
clientInfo
dsid
userAgent
corporateSharingEnabled
serviceType
config
host
port
useTls
privateDatabase
publicDatabase
sharedDatabase
orgDatabase
sandbox
production
PUSH
DATABASE
functionName
serializedParameters
serializationFormat
clientConfig
accountConfig
requestContext
FUNCTION_TIMEOUT
FUNCTION_ERROR
INTERNAL_ERROR
ckdbcore.CKDBRequestContext
ckdbcore.ResolvedContainer
ckdbcore.ResolvedUser
ckdbcore.RequestOperation
ckdbcore.RequestOperation.Header
_TtCV15InvernessClient27Ckdbcore_CKDBRequestContextP33_96D6BEFA65B5400CAC0737F27CB51BDE13_StorageClass
_container
_database
_databasePartition
_owner
_user
_deviceID
_applicationBundleID
_synchronousMode
privateDB
publicDB
sharedDB
ckUserId
environment
version
container
database
owner
user
synchronousMode
PROTO
JSON
v24@?0@"NSData"8@"NSError"16
v16@?0@"CKRequestInfo"8
_TtC15InvernessClient15InvernessClient
serviceName
containerName
qualityOfService
sourceApplicationBundleIdentifier
requestCompletedBlock
_TtC15InvernessClient10CloudKitWS
credentials
unable to percent encode webAuthToken
&ckWebAuthToken=
url is malformed: 
https://api.apple-cloudkit.com/database/1/
-inf
SwiftProtobuf/JSONScanner.swift
Fatal error
Somehow JSONDecoding unwound more objects than it started
google.protobuf.Duration
google.protobuf.Type
google.protobuf.Field
google.protobuf.Enum
google.protobuf.EnumValue
google.protobuf.Option
_TtCV13SwiftProtobuf20Google_Protobuf_TypeP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_name
_fields
_oneofs
_sourceContext
_TtCV13SwiftProtobuf20Google_Protobuf_EnumP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_enumvalue
_TtCV13SwiftProtobuf22Google_Protobuf_OptionP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_value
value
number
enumvalue
syntax
CARDINALITY_UNKNOWN
CARDINALITY_OPTIONAL
CARDINALITY_REQUIRED
CARDINALITY_REPEATED
TYPE_UNKNOWN
TYPE_DOUBLE
TYPE_FLOAT
TYPE_INT64
TYPE_UINT64
TYPE_INT32
TYPE_FIXED64
TYPE_FIXED32
TYPE_BOOL
TYPE_STRING
TYPE_GROUP
TYPE_MESSAGE
TYPE_BYTES
TYPE_UINT32
TYPE_ENUM
TYPE_SFIXED32
TYPE_SFIXED64
TYPE_SINT32
TYPE_SINT64
kind
cardinality
type_url
oneof_index
packed
json_name
default_value
oneofs
SYNTAX_PROTO2
SYNTAX_PROTO3
_TtC13SwiftProtobuf15DoubleFormatter
doubleFormatString
work
google.protobuf.Empty
fieldNumber
fieldName
messageType
google.protobuf.DoubleValue
google.protobuf.FloatValue
google.protobuf.Int64Value
google.protobuf.UInt64Value
google.protobuf.Int32Value
google.protobuf.UInt32Value
google.protobuf.BoolValue
google.protobuf.StringValue
google.protobuf.BytesValue
SwiftProtobuf/BinaryDecoder.swift
Somehow BinaryDecoding unwound more objects than it started
org.swift.protobuf.typeRegistry
google.protobuf.Timestamp
seconds
nanos
google.protobuf.SourceContext
file_name
google.protobuf.Api
google.protobuf.Method
google.protobuf.Mixin
_TtCV13SwiftProtobuf19Google_Protobuf_ApiP33_CEA2A4FA6D1C07D784D5EE9B6CE9521113_StorageClass
_methods
_version
_mixins
_syntax
root
request_type_url
request_streaming
response_type_url
response_streaming
methods
source_context
mixins
\u00
_TtC13SwiftProtobuf17AnyMessageStorage
_typeURL
type.googleapis.com
#json: 
"NaN"
"Infinity"
"-Infinity"
google.protobuf.FieldMask
paths
key value 
false
true
SimpleExtensionMap(
_TtC13SwiftProtobufP33_ACE262E8B2F1F7C26CC1ADDF6C99D01E10InternPool
interned
google.protobuf.Struct
google.protobuf.Value
google.protobuf.ListValue
_TtCV13SwiftProtobuf21Google_Protobuf_ValueP33_D700BA243E574A08E6B851AAC52D261C13_StorageClass
_kind
SwiftProtobuf/TextFormatEncodingVisitor.swift
SwiftProtobuf/Google_Protobuf_Any+Extensions.swift
values
null_value
number_value
string_value
bool_value
struct_value
list_value
fields
NULL_VALUE
google.protobuf.Any
SwiftProtobuf/Message+TextFormatAdditions.swift
UnparentedObjectsMigration BEGIN {store: %@}
Failed to save delete batch. Migration error {deleteError: %@}
UnparentedObjectsMigration End {store: %@, countDeleted: %ld}
Called cdEntityName on REMCDAuxiliaryChangeInfo. This is an abstract core data model super class. {callstack: %@}
Could not get method for selector %@ on target %@
Store missing url. Failed to populate RDStoreControllerAccountIdentifier {store: %{public}@}
Error fetching accounts. Failed to populate RDStoreControllerAccountIdentifier {error: %{public}@}
No account found in store {store: %{public}@}
Account has nil identifier. Failed to populate RDStoreControllerAccountIdentifier {account: %{public}@}
Populating RDStoreControllerAccountIdentifier {store: %{public}@, identifier: %{public}@}
Processing cloud batch (%d of %@) in throttling level (%d of %d): %@
Switching to cloud throttling level (%d of %d): %@
Resetting cloud throttling policy to the first level: %@
ICCloudContext INIT {supportsCloudKitSyncing: %ld, syncSettingsSupportsCloudKitSyncing: %ld, storeControllerSupportsCloudKitSyncing: %ld}
os_transaction INIT {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}
ICCC: Done waiting DADSystemAvailabilityChecker upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}
os_transaction INIT {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Observing RDAccountInitializer.DidCompleteInitializeAllAccountsNotification on daemon launch before we enable syncing.
ICCC: Actually running bootstrapSyncingOnLaunchIfSystemReady to bootstrap CloudKit syncing.
ICCC: bootstrapSyncingOnLaunchIfSystemReady: Not ready to bootstrap syncing yet {isSystemAvailableForSyncing=%d, pendingAccountInitializerCompleteOnLaunch=%d}
Not passed buddy. ICCC now registers for buddy.
ICCC received buddy finished notification.
ICCC now unregisters buddy observer.
ICCC is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}@}
ICCC no longer available upon our RDAccountPersonIDSaltObserver success handler is called
ICCC received a primary CK account personIDSalt change or initial value {observer: %{public}@}
ICCC no longer available upon our RDAccountPersonIDSaltObserver error handler is called
ICCC received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}
Clearing cloud containers.
OS version sent from server is in the incorrect format. Should be majorVersion,minorVersion,patchVersion
Current version of the OS (%{public}@) is not supported for sync. Needs at least (%{public}@)
Re-gain internet connection after losing it for a short time. Not going to sync. (throttled)
Cloud context found an internet connection.
Cloud context lost an internet connection.
Reachability sync finished {error: %{public}@}
CloudKit account status may have changed
Operation queue has 0 operations
Operation queue has %d operation(s):%{public}@
Adding os_state handler: %{public}s
Processing os_state handler: %{public}s
Error serializing state data for "%{public}s": %{public}@
Error serializing state data for "%{public}s": data size greater than UINT32_MAX
Zone not found %{public}@ %{public}@
Shared zone not found %{public}@ %{public}@
Not generating PersonIDSalt because the sync reason wasn't initiated by the user {reason: %@}
Cannot generate PersonIDSalt because there's no primary CK account, shouldn't even call this function
CloudSchemaCatchUpSync: Maximum retry count reached, aborting (maxRetryCount: %lu)
CloudSchemaCatchUpSync completed with error, will retry later (currentRetryCount: %d)
SYNC[FULL] START {reason: %{public}@}
os_transaction INIT {name: %{public}@}
os_transaction RELEASE {name: %{public}@}
SYNC[FULL] FAIL - store controller syncing disabled
SYNC[FULL] FAIL - no CloudKit account
SYNC[FULL] FAIL - not ready {readinessDescription: %{public}@}
SYNC[FULL] FAIL - no network connection
cloudkit.full
SYNC[FULL] CONTINUE - Trying to sync with fetching disabled, so only pushing. {isFetchingEnabled: %d, discretionary: %d, cloudDirtyToken: %{public}@}
SYNC[FULL] FAIL {error: %{public}@}
SYNC[FULL] {duration: %.4f}
SYNC[FULL] CONTINUE - Performing full sync {discretionary: %d, cloudDirtyToken: %{public}@, persistenceCloudSchemaVersion: %lld, runtimeCloudSchemaVersion: %lld}
Babysitting SYNC[FULL] because it failed too many times {waiterID: %{public}@}
SYNC[FULL] > CloudSchemaCatchUpSync: completed successfully, persistenceCloudSchemaVersion bumped {didUpdate: %d, syncReason: %{public}@, buildVersion: %{public}@}
SYNC[FULL] > CloudSchemaCatchUpSync: completed with error but max retry reached, persistenceCloudSchemaVersion bumped {syncReason: %{public}@, error: %@, buildVersion: %{public}@}
SYNC[FULL] > CloudSchemaCatchUpSync: completed with error, persistenceCloudSchemaVersion not bumped yet, will retry later {syncReason: %{public}@, error: %@, buildVersion: %{public}@}
SYNC[FULL] FAIL {error: %{public}@, syncReason: %{public}@}
SYNC[FULL] END {duration: %.4f, syncReason: %{public}@}
SYNC[FULL] - PersonIDSalt generated for primary CK account.
_syncWithReason: Error fetching database changes during full sync {fetchDatabaseChangesError: %{public}@}
_syncWithReason: Fetched database changes for full sync
_syncWithReason: Error fetching record zone changes during full sync {fetchRecordZoneChangesError: %{public}@}
_syncWithReason: Fetched record zone changes for full sync
_syncWithReason: Error while processing for full sync {processingErrors.first: %{public}@}
_syncWithReason: Processed everything for full sync
cancelEverything: Performing cleanup in ICCC.
Timed out when cancelling the cloud operations. Performing cleanup anyway.
Zone IDs that need to resume fetching: fetching=%{public}@; needingFetch=%{public}@
Deleting record zones (markZonesAsUserPurged=%d): %{public}@
Error deleting zones {operationError: %{public}@}
Deleted record zones {deletedRecordZoneIDs: %{public}@}
Finishing operations for record ID %{public}@
All operations finished for record ID %{public}@
Waiting on operation %{public}@ for record ID %{public}@
Updating CloudKit account status
Error updating account status {error: %{public}@}
CloudKit account status changed {accountStatus: %{public}@}
No change in CloudKit account status {accountStatus: %{public}@}
Fetching user record in cloud context {operation: %{public}@}
Fetched user record in cloud context {userRecord: %{private}@}
Per-record error fetching user record {userRecordError: %{public}@}
Fetch user record operation completed: %{public}@
Error fetching user record: %{public}@
Trying to fetchUserRecordWithAccountID with empty accountID.
Adding operations to fetch %ld records
Fetching records with operation group %{public}@
Grouping fetch requests for %d %{public}@ records into %d batches
Creating %{public}@
Will fetch %{public}@ %{public}@
Progress fetching %{public}@: %d%% %{public}@
Tried to fetch record that doesn't exist: %{public}@ %{public}@
Failed to fetch %{public}@ %{public}@: %{public}@
Fetched %@ %{public}@
Error fetching {operation: %{public}@, error: %{public}@}
Finished {operatin: %{public}@}
No root record type in share %@ for %{public}@
didFetchShare: Cannot get primary CK account for newPlaceholderObjectForRecordID {record: %{public}@, rootRecordType: %{public}@}
Received share %{public}@ for %{public}@ %{public}@
Received share for unknown object: %{public}@
Received a share with no root record ID: %{public}@
Will Delete Shares for %lu Objects:
Will delete share for %@
SYNC[SyncAfterDeleteShare] START}
SYNC[SyncAfterDeleteShare] END
Creating operations to push %ld records
Creating operations to delete %ld records
Creating operations to delete %ld share records
Record to delete share from doesn't have a server share %{public}@
No root record ID when trying to delete share for %{public}@
Record size (%lu bytes) exceeds CloudKit limit for record: %{public}@
Grouping modify operations into %ld batches
Modifying records with operation group %{public}@
Batching with recordsToSave:%@ recordsToDelete:%@, maxRecordCountPerBatch:%lu, maxRecordSizePerBatch:%lu
Ending batch because an impossible batch was detected ICCloudContext. Alarm: %{public}@ AlarmTrigger: %{public}@
Adding Alarm/AlarmTrigger pair to batch: %@ %@
Ending batch because Alarm/AlarmTrigger pair does not fit isCountOK: %d Alarm: %@ AlarmTrigger: %@
Ending batch because an impossible batch was detected ICCloudContext: %{public}@
Adding record to save batch: %@
Ending batch because record does not fit: %@
Adding record to delete batch: %@
Ending batch because we're out of records
Ending batch because we've reached maxRecordCountPerBatch
Finished batch with batchRecordsToSave:%@ batchRecordIDsToDelete:%@
About to create modify operation for database: %{public}@
Creating modify operation %{public}@
Will push %@ %{public}@
Will delete %{public}@ %{public}@
Progress pushing %@: %d%%
Pushed %@ %{public}@
Deleted share %{public}@ %{public}@
Deleted record %{public}@ %{public}@
Actually deleting object %{public}@ with supportsDeletionByTTL = false from local DB upon completion of CKModifyRecordsOperation.
Unknown item deleting share %{public}@ for %@ %{public}@
Zone not found deleting share %{public}@ for %@ %{public}@
Error deleting share %{public}@ for %@ %{public}@: %{public}@
No record on server to delete %{public}@ %{public}@
Reference violation for %{public}@ %{public}@
Batch request failed for deleting %{public}@ %{public}@
Error deleting record %{public}@ %{public}@: %{public}@
Error modifying records, canceling dependent operations: %{public}@
Partial error for modify operation %{public}@: %{public}@
Error modifying records %{public}@: %{public}@
Finished modify operation %{public}@
Unexpected item id %{public}@
User exceeded iCloud quota
User deleted zone %{public}@
Error topologically sorting records: %{public}@
No record ID when trying to modify record
Trying to modify two instances of the same object %@
Continue to save context while having custom validation failures for %{public}@
Run exclusively operation start: {%{public}@}
Run exclusively operations end: {%{public}@}
rem_log_fault_if(partialError.code != CKErrorPartialFailure) -- Called -partialFailure:containsError with a non-partialFailure.
Canceling operation: %{public}@
%{public}@
Will save zone %{public}@ %{public}@
Error saving zones %{public}@: %{public}@
Saved record zones %{public}@
Saved record zone %{public}@ %{public}@
Enqueued %ld object IDs because of coredata changes
Processing objects with operation %{public}p
Adding process objects operation %{public}p. allDirtyObjects=%d
Process operation %{public}p waiting on %ld other operations
Running process all dirty objects operation.
SYNC[COREDATA] START {label: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.sync.coredata}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.coredata}
SYNC[COREDATA] ERROR - no CloudKit account
SYNC[COREDATA] ERROR - is pendingAccountInitializerCompleteOnLaunch {idsToProc.count: %d, idsToRetry.count: %d, readinessDescription: %{public}@}
SYNC[COREDATA] ERROR - not ready {readinessDescription: %{public}@}
SYNC[COREDATA] ERROR - network isn't reachable
SYNC[COREDATA] ERROR - upload is suspended
SYNC[COREDATA] FAIL
cloudkit.coredata
Babysitting processPendingCloudObjects because it failed too many times {waiterID: %{public}@}
SYNC[COREDATA] END(DEFERRED due to MERGE.LOCAL needs to happen before we can processObjectIDs) {label: %{public}@, duration: %.4f, numIDsToProcessAddingToRetry: %ld}
SYNC[COREDATA] CONTINUE {label: %{public}@, objectIDsToProcess.count: %ld, retryIDsCount: %ld}
SYNC[COREDATA] FAIL {duration: %.4f, errors.first: %{public}@, errors.count: %ld}
SYNC[COREDATA] END {label: %{public}@, duration: %.4f}
MERGE.LOCAL: This primary CK account has never attempted migration, how come? We will let to go through...
MERGE.LOCAL: Gathering all cloud objectIDs that should run attempt merging local objects.
MERGE.LOCAL: Cannot merge local objects at this time because account has not finished migration or needs to fetch user record or has not yet flipped the inactive flag due to race, will retry later (accountNeedsToMergeLocalObjects: %d, accountDidNotFinishMigration: %d, accountNeedsToFetchUserRecord: %d, accountInactive: %d, currentRetryCount: %d).
MERGE.LOCAL: Maximum retry count reached for Merge.Local, aborting {accountNeedsToMergeLocalObjects: %d, accountDidNotFinishMigration: %d, accountNeedsToFetchUserRecord: %d, accountInactive: %d}
MERGE.LOCAL: Maximum retry count previously reached, aborting {lastMaxRetry: {date: %@, build: %@}, currentBuild: %@}
MERGE.LOCAL: No need to merge local objects or no objectIDsInCloud (accountNeedsToMergeLocalObjects: %d, account.daWasMigrated: %d).
MERGE.LOCAL: ...found an REMCDObject that isInCloud && shouldAttemptLocalObjectMerge. (objectID=%{public}@, hasServerRecord=%{public}@)
MERGE.LOCAL: ...this REMCDObject is NOT isInCloud (objectID=%{public}@, hasServerRecord=%{public}@
rem_log_fault_if(cloudObject != nil) -- MERGE.LOCAL: Unexpected ICCloudObject type: %{public}@
MERGE.LOCAL: _objectIDsThatShouldAttemptLocalObjectMerge: summary (objectsInCloudThatShouldMerge=%{public}@, objectsNotInCloud=%{public}@).
MERGE.LOCAL[COREDATA] START
os_transaction INIT {name: com.apple.remindd.cloudkit.merge.local.coredata}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.merge.local.coredata}
MERGE.LOCAL[COREDATA] CONTINUE {in-cloud-objectIDs.count: %ld}
MERGE.LOCAL: processPendingToMergeObjectIDs: here's the objectIDs to fetch and process (objectIDs: %{public}@).
MERGE.LOCAL[COREDATA] MERGE SAVE FAILED!
MERGE.LOCAL[COREDATA] MERGE LOCAL SAVED.
MERGE.LOCAL[COREDATA] END {duration: %.4f}
MERGE.LOCAL: Unsetting .daWasMigrated (accountIdentifier=%{public}@, flagSaved=1)
MERGE.LOCAL: ...found an existingLocalObjectToMerge (objectMID=%{public}@, localObjectMID=%{public}@)
MERGE.LOCAL: ...mergeWithLocalObject (didMerge=%{public}@)
MERGE.LOCAL: ...no matching existingLocalObjectToMerge (objectMID=%{public}@)
MERGE.LOCAL: final step to clean up account and lists, then save... (accountIdentifier=%{public}@)
MERGE.LOCAL: Collected error upon merge local objects completion: {error: %{public}@}.
Retrying to process %d cloud objects
Processing %lu cloud objects, now going to fetch from CD and submit items to operation queue
Failed to fault-in object while processing cloudObjectIDs {error: %{public}@, cloudObjectID: %{public}@}
Found non-REMCDObject to process. Skipping {objectID: %{public}@}
Unrecognized subclass of REMCDObject. We don't save this object to the cloud {class: %{public}@}
Not syncing object because it's missing mandatory fields: %@
_processCloudObjects adding fetch&/modify cloud objects operation to operation queue: %{public}@
SYNC[APS] ERROR - Disabled or not ready {readinessDescription: %{public}@}
SYNC[APS] CONTINUE {notification.class: %{public}@, subscriptionID: %{public}@}
SYNC[APS] CONTINUE - Received CloudKit database notification {scope: %{public}@, notificationID: %{public}@}
SYNC[APS] CONTINUE - Fired from APS debouncer to execute CKDatabase notification handler {scope: %{public}@, notificationID: %{public}@, persistenceCloudSchemaVersion: %lld, runtimeCloudSchemaVersion: %lld}
...SYNC[APS] CloudSchemaCatchUpSync completed successfully, persistenceCloudSchemaVersion bumped {didUpdate: %d, scope: %{public}@, notificationID: %{public}@, buildVersion: %{public}@}}
SYNC[APS] > CloudSchemaCatchUpSync: completed with error but max retry reached, persistenceCloudSchemaVersion bumped {error: %@, buildVersion: %{public}@}}
SYNC[APS] > CloudSchemaCatchUpSync: completed with error, persistenceCloudSchemaVersion not bumped yet, will retry later {error: %@, buildVersion: %{public}@}}
SYNC[APS] SKIP - Skip handling CloudKit database notification because debouncer has already {scope: %{public}@, notificationID: %{public}@}
SYNC[APS] FAULT - Received database notificiation (%{public}@), but expected %{public}@
SYNC[APS] NOOP - Not handling CloudKit database notification %{public}@
...SYNC[APS] Handling CloudKit database notification, with potential debounced scopes from other notifications {scope: %{public}@, notificationID: %{public}@}
...SYNC[APS] ERROR fetching database changes during aps notification sync {error: %{public}@}
...SYNC[APS] Fetched database changes for aps notification sync
...SYNC[APS] ERROR fetching record zone changes during aps notification sync {error: %{public}@}
...SYNC[APS] Fetched record zone changes for aps notification zone
...SYNC[APS] ERROR processing for aps notification sync {processingErrors.first: %{public}@}
...SYNC[APS] Handled CloudKit database notification {scope: %{public}@, notificationID: %{public}@}
Asking to fetch changes for zone IDs %{public}@
Waiting for previous fetch zone changes operation to finish %{public}@
Not adding operation to queue. isFinished=%d isExecuting=%d isCancelled=%d %{public}@
Filtered the current users zone from being fetched from the shared db.
Fetching record zone changes with operation group %{public}@
Will set CKFetchRecordZoneChangesConfiguration.previousServerChangeToken = nil {databaseScope: %@, zoneIDs: %@}
Not trying to sync the default record zone.
Found existing operation with identical zone options %{public}@
Fetch changes operation %{public}@ with %{public}@ took %f s
Creating fetch changes operation %{public}@
Fetched changes for record zone %{public}@ %{public}@
Server change token expired for zone %{public}@ %{public}@
User deleted zone %{public}@ %{public}@
Non-fatal error fetching zone changes for zone %{public}@ %{public}@: %{public}@
Error fetching zone changes %{public}@ %{public}@: %{public}@
Fetched zone changes %{public}@
Fetch changes operation had partial failure %{public}@
Non-fatal error fetching zone changes %{public}@: %{public}@
Error fetching zone changes %{public}@: %{public}@
Record changed %@ %{public}@
No account after record changed %{public}@
Share was deleted %{public}@ %{public}@
Record was deleted %{public}@ %{public}@
Zone change token updated %{public}@ %{public}@ %{public}@
Sorted children objects after fetching RecordZoneChanges {sortedRecordIDs: %{public}@}
rem_log_fault_if(ckRecordIDs.count > 0) -- Some record IDs marked as needing to sort children are left not sorted {ckRecordIDs: %{public}@}
ICCloudContext Polling Timer Fired
Polling timer fired
Fetching database changes with operation group %{public}@
Will create CKFetchDatabaseChangesOperation with nil previousServerChangeToken {databaseScope: %@}
Creating fetch database changes operation %{public}@
Database changes operation %{public}@ will wait for %{public}@
Zone changed %{public}@ %{public}@
Shared zone was deleted: %{public}@
Deleting shared %@ for zoneID %{public}@
Not deleting shared %@ in wrong zone %{public}@ for zone ID %{public}@
Zone was deleted %{public}@ %{public}@
Callback for operation in shared database says private zone was deleted %{public}@: %{public}@
Database change token updated %{public}@ %{public}@
Fetched database changes %{public}@
Database changes server change token expired %{public}@
Operation to fetch database changes was cancelled %{public}@
Operation to fetch database changes failed with no network connection %{public}@
Error fetching database changes %{public}@: %{public}@
Error fetching database changes, canceling dependent operations: %{public}@
Loaded zone fetch state. zonesNeedingFetchChanges=%ld
Saving zone fetch state. zonesNeedingFetchChanges=%ld
Updating subscriptions
Not fetching subscriptions for %{public}@, already subscribed to %{public}@
Not sure if subscribed to %{public}@
Fetching subscriptions %{public}@
Fetched subscription %{public}@ %{public}@
Error fetching subscriptions %{public}@: %{public}@
Fetched subscriptions %{public}@
Not saving subscriptions for %{public}@, already subscribed to %{public}@
Saving subscription %{public}@ %{public}@
Error saving subscriptions %{public}@: %{public}@
Saved subscriptions %{public}@
Saved subscription %{public}@ %{public}@
Loaded subscribed subscription IDs last updated time from user defaults {timestamp: %{public}@, date: %{public}@, validityPeriod: %{public}@}
Loaded subscribed subscription IDs from user defaults: %@
Persisting subscribed subscription ID to user defaults {subscriptionID: %{public}@}
Clearing subscribed subscription IDs
Not updating cloud context state because it's disabled {%{public}@}
Updating cloud context state. %{public}@ and internet %{public}@. {reason: %{public}@, option: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.updateCloudContextState}
Babysitting updateCloudContextState because it failed too many times {waiterID: %{public}@}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}
No longer in foreground after updating cloud context state
No longer reachable after updating cloud context state
Not ready to sync after updating cloud context state: %{public}@
Syncing enabled after updating account status
WARNING: LOOKATME: UpdateCloudContextState: CK account is inactive but didChooseToMigrate=YES && didFinishMigration=NO, try FetchUserRecord again... {accountID: %{public}@}
UpdateCloudContextState: Triggering a sync {syncReason: %{public}@, syncOption: %{public}@}
UpdateCloudContextState: Sync completed {syncReason: %{public}@, error: %@}
UpdateCloudContextState: Going to fetch user record before sync {syncReason: %{public}@}
UpdateCloudContextState: Error fetching user record: %{public}@
UpdateCloudContextState: Fetched user record %{private}@
error fetching all long lived operation IDs: %{public}@
error fetching long lived operation, ID: %{public}@ error: %{public}@
Not adding long-lived operation because it's finished: %{public}@
Not adding long-lived operation because it's cancelled: %{public}@
Adding long-lived operation back to the queue: %{public}@
Marking cloud as dirty {newToken: %{public}@}
Clearing cloud dirty {currentToken: %{public}@, cloudDirtyToken: %{public}@}
NOT clearing cloud dirty {currentToken: %{public}@, cloudDirtyToken: %{public}@}
Incrementing retry count for %{public}@ from %d to %d
Clearing retry count for %{public}@
ICCC: Not retrying because we have no internet connection
ICCC: Not retrying because we're not ready: %{public}@
ICCC: Starting a retry timer if necessary for error: %{public}@
Using backoff time for retry (%.0fs)
Retrying operations after %ds
CloudKit Retry
Retry timer fired, but we have no internet connection
Retry timer fired, but we're not ready to sync: %{public}@
Retrying operations
Retrying to update subscriptions
Retrying to save record zones
Retrying CKFetchDatabaseChangesOperation databaseScopes: %{public}@
CKFetchDatabaseChangesOperation: Error occured when retrying to sync {error: %{public}@}
CKFetchDatabaseChangesOperation: Retry sync completed.
Retrying to fetch record zone changes
Retrying to process changes
CloudSchemaCatchUpSync: Retrying {persistenceCloudSchemaVersion: %lld, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: Error occured when retrying to catch-up sync {error: %{public}@}
CloudSchemaCatchUpSync: Retry catch-up sync completed.
MERGE.LOCAL: Retrying to merge local objects
MERGE.LOCAL: Error occured when retrying to merge local objects {error: %{public}@}
MERGE.LOCAL: Retry merging local objects completed.
Retry calling UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.
Saving server change token for %{public}@ %{public}@: %{public}@
Trying to save server change token without an account {accounts: [%@], primaryACAccount: %@, acAccounts: [%@], isReadyToSync: %d}
Deleting server change token for %{public}@ %{public}@
Deleting all server change tokens
Deleting all server data
Failed to fetch user record for updating
Failed to update user record for resetting migration state {error: %{public}@}
Successfully cleaned user record
ICCC received accountsDidChange from RDStoreController.
ICCC: Stopping all CloudKit operations after deleting CloudKit account
os_transaction INIT {name: com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification after accountsDidChange.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Observing DidCompleteInitializeAllAccountsNotification on accountsDidChange.
ICCC: RDAccountInitializer failed, so we won't UpdateCloudContext after accountsDidChange: {error: %{public}@}
ICCC: Calling -didCompleteInitializeAllAccounts:
ICCC still disabled after accountsDidChange and DidCompleteInitializeAllAccountsNotification, will retry UpdateCloudContext in a few seconds... {%{public}@}
ICCC: Now call UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.
Cloud context received application will enter foreground notification
Push connection established with iCloud
Failed to get push token: %{public}@
SYNC[APS]
SYNC[APS] START {topic: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.sync.aps}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.aps}
SYNC[APS] FAIL - unexpected aps topic {topic: %{public}@}
SYNC[APS] FAIL - CKNotification failed to parse APS message {apsTopic: %{public}@}
cloudkit.aps
Babysitting APS's didReceiveIncomingMessage because it failed too many times {waiterID: %{public}@}
SYNC[APS] PUSH FAIL {error: %{public}@}
SYNC[APS] END {duration: %.4f}
Force set migration state {didChooseToMigrate: %d, didFinishMigration: %d}
Fetched user record for force-setting migration state {record: %@}
Fetched account record for force-setting migration state {record: %@}
Timeout fetching user / account record for force-setting migration state
Completed modify records operation for force-setting migration state
Failed to modify records operation for force-setting migration state {error: %{public}@}
Suspend upload
Resume upload
Adjust APS debouncer interval according to migration state {didChooseToMigrate: %d, didFinishMigration: %d}
Setting APS debouncer interval to %f
Called cdEntityName on REMCDAlarmTrigger. This is an abstract core data model super class. {callstack: %@}
Should not unset the tombstone field .reminderIdentifier of an REMCDHashtag {cdHashtag: %{public}@}
Configuration has no version
Configuration version (%ld) is not the expected version (%ld)
Checking cached configuration
Using cached remote configuration
Cache directory is unavailable for reading configuration cache
Using default configuration
ICCloudConfiguration: Start downloading configuration from {remoteURL: %{public}@}
Unable to download remote configuration.
ICCloudConfiguration: Received remote configuration
ICCloudConfiguration: Applying remote configuration
ICCloudConfiguration: Updating locally cached configuration {cacheURL: %{public}@}
Not able to write remote configuration to cache. {writeError: %{public}@}
Cache directory is unavailable for writing configuration cache
Error serializing plist data to dictionary: %@
Connected to remote configuration plist server but got back non 200 response: %{public}@
Error downloading remote configuration plist: %{public}@
Loading cloud configuration {configurationURL: %{public}@}
Failed to load cloud configuration dictionary {configurationURL: %{public}@}
Trying to create a cloud configuration with no minimum client version
Trying to create a cloud configuration with no throttling levels
Trying to create a cloud configuration with no max inline asset size
Trying to create a cloud configuration with no max attachments per note
Trying to create a cloud configuration with no max sub attachments per attachment
Trying to create a cloud configuration with no max attachment size
Validation Failure: Tried to move reminders accross lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Failure: Tried to move reminders accross shared lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Failure: Tried to create nested subtasks {list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Failure: Tried to set a subtask on a different list to its parent reminder {parentList.identifier: %{public}@, list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Failure: Subtasks are left on a different list to its parent reminder {subtask.list.identifier: %{public}@, list.identifier: %{public}@, subtask.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Update: Moving reminder to another list nullifies assignee in its assignments {assignment.identifier: %{public}@, reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Moving reminder to another list nullifies origiantor in its assignments {assignment.identifier: %{public}@, reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Assignee in disallowed status and hence will be nullified {assignment.identifier: %{public}@, reminder.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Originator in disallowed status and hence will be nullified {assignment.identifier: %{public}@, reminder.identifier: %{public}@, account.identifier: %{public}@}
Validation WARNING: Attempt to move a reminder with assignments to a different list while supportsMoveAcrossSharedLists=NO {reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Called cdEntityName on REMCDAuxiliaryReminderChangeInfo. This is an abstract core data model super class. {callstack: %@}
Calling -isConnectedToAccountObject: on REMCDSharedToMeReminderPlaceholder is unexpected as this is not a class that should be updated or saved directly from a save request {callstack: %{public}@}
Error creating unarchiver: %@
Error creating unarchiver: %{public}@
Trying to get an object from a nil object ID: %{public}@
Unable to find object from objectID: %{public}@
Error finding object from objectID: %{public}@, %{public}@
rem_log_fault_if(!entityName) -- Unexpected error: found entity with no name
Error fetching objects from (%ld) object IDs: %{public}@
Error obtaining permanent object ID for objects with error: %{public}@
Error obtaining permanent object ID for %{public}@: %{public}@
Error fetching %{public}@ (predicate=%@ sortDescriptors=%{public}@): %{public}@
Nil objects array fetching %{public}@ (predicate=%@ sortDescriptors=%{public}@ context=%{public}@)
Called isAbstract on REMCDObject. This is an abstract core data model super class. {callstack: %@}
SET %@ <- %@
REMSupportedVersionUpdating: didChangeValueForKey:[%{public}@] calling _markObjectDirtyForSupportedVersionValidation on {remObjectID: %{public}@}
Validation Failure: We have a REMCDObject that is not a REMCDAccount and is missing an account relationship {entity: %{public}@, identifier: %{public}@}
Validation Failure: Tried to move lists accross accounts {fromAccount.identifier: %{public}@, toAccount.identifier: %{public}@}
Mark shared-to-me root %{public}@ for deletion and recursively deleted all child objects from local database
Begin recursiveMarkForDeletion:%{public}@ from %{public}@
Deleting orphan object %{public}@ permanently from local database
Not recursiveMarkForDeletion for %{public}@ because isDelete == self.markedForDeletion
Unexpected nil remObjectID when recursively traversing object tree. {self.objectID = %@, visitedMap = %@}
Unexpected cyclic graph when recursively traversing object tree. {self.remObjectID = %@, visitedMap = %@}
Failed to fetch objects in {relationship: %{public}@} of object {type: %{public}@}
Skipped traverseObjectTreeUsingVisitedMap for {remObjectID: %@, managedObjectID: %@}
Continue recursiveMarkForDeletion:%@ from %@
Stopping recurssion because isDeleted == self.markedForDeletion
Don't know how to handle property %{public}@ of entity %{public}@ to avoid constraint violation before marking for deletion
REMSupportedVersionUpdating: Changing minimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}
REMSupportedVersionUpdating: setMinimumSupportedVersion {newValue: %{public}@, oldValue: %{public}@, remObjectID: %{public}@}
REMSupportedVersionUpdating: setMinimumSupportedVersion: calling _markObjectDirtyForSupportedVersionValidation on {remObjectID: %{public}@}
REMSupportedVersionUpdating: Setting effectiveMinimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}
REMSupportedVersionUpdating: Abstact method called for -parentEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}
REMSupportedVersionUpdating: Abstact method called for -keyPathsForValuesAffectingEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}
rem_log_fault_if(dirtySet == nil) -- REMSupportedVersionUpdating: Failed to obtain managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion from storeControllerManagedObjectContext {storeControllerManagedObjectContext: %{public}@}
REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion cannot process %{public}@ because it does not currently allow object supported version {identifier: %{public}@}
REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion indicates that my descendants should also be validated since my effective version changed {myVersion: %lld, parentEffectiveVersion: %lld, oldValue: %lld, remObjectID: %{public}@}
Called cdEntityName on REMCDObject. This is an abstract core data model super class. {callstack: %@}
Missing requirements to get alarmDateTrigger {accountID: %{public}@, alarmID: %{public}@}
ICCSCU shouldPerformCloudSchemaCatchUpSync? {persistence: %lld, runtime: %lld}
ICCSCU cloudSchemaCatchUpSyncDidComplete: Will update account.persistenceCloudSchemaVersion {persistence: %lld, runtime: %lld}
ICCSCU cloudSchemaCatchUpSyncDidComplete: persistenceCloudSchemaVersion is already >= kRuntimeCloudSchemaVersion, stopping {persistence: %lld, runtime: %lld}
ICCSCU cloudSchemaCatchUpSyncDidComplete: ckAccount.persistenceCloudSchemaVersion updated SUCCESS {accountID: %{public}@}
ICCSCU cloudSchemaCatchUpSyncDidComplete: Update ckAccount.persistenceCloudSchemaVersion FAILED {accountID: %{public}@}
ICCSCU existing cloud object should perform CloudSchemaCatchUpSync {entity: %{public}@, identifier: %{public}@, persistenceVersion: %lld, runtimeVersion: %lld}
rem_log_fault_if(!context) -- Expected non-nil value for managedObjectContext
Nil cloud state for %@. Sorry. Fixing now.
Failed to find cloud account for %@ %@
_setCKIdentifierIfNecessary: .identifier.UUIDString is nil %{public}@ %{public}@ %{public}@
_setCKIdentifierIfNecessary: .ckIdentifier is still nil %{public}@ %{public}@ %{public}@
%{public}@ is in batchFetchHelper missing cache
%{public}@ does not correspond to a batchFetchHelper cachedManagedObject
Missing ckIdentifier. Failed to get failedToSyncCount
Missing ckIdentifier. Failed to set failedToSyncCount
Missing ckIdentifier. Failed to get numberOfPushAttemptstoWaitCount
Missing ckIdentifier. Failed to set numberOfPushAttemptstoWaitCount
%@ failed to be pushed. Incrementing failedToSyncCount, failure (%d/%d) before being temporarily ignored. (%d/%d) before deleting change tokens and full re-sync. %@
Decrementing failure counts for %@, %d push attempts before it is retried. %@
Failed to sync %@ %d times. Now resetting failure counts, deleting change tokens, and trying full re-sync. %@
%@ failed to be pushed %d times. Max number of retries is %d. It will now be ignored for %d push attempts. %@
CKIdentifier is undefined. This should not happen since [_setCKIdentifierIfNecessary] should set it already { class: %{public}@, objectID: %{public}@, identifier: %{public}@}
Trying to get recordID with no context %{public}@ %{public}@
Trying to get recordID with no record name %{public}@ %{public}@
Trying to get recordID with empty record name %{public}@ %{public}@
Trying to get recordID with no zone name %{public}@ %{public}@
Cannot get primary CK account for newCloudObjectForRecord {record: %{public}@, class: %{public}@}
newObjectWithCKIdentifier attempted to create an instance from an abstract entity {class: %{public}@, ckIdentifier: %{public}@}
rem_log_fault_if(!entityName) -- Unexpected error: cdEntityName name not defined
rem_log_fault_if(!entityName) -- Unexpected error: entity name not defined
newObjectWithCKIdentifier attempted to create a non REMCDAccount CD object with nil account {class: %{public}@, ckIdentifier: %{public}@}
rem_log_fault_if(!newObject) -- Unexpected error: Could not create and insert new object with {entity: %{public}@, ckIdentifier: %{public}@, account.ckID: %{public}@}
Unable to decode UUID string %@, will generate a random one. Expect something not working.
rem_log_fault_if(!batchFetchHelper) -- Unexpected error: batchFetchHelper not defined
Creating REMCDObject for CloudKit: %{public}@ .identifier=%{public}@ .ckIdentifier=%{public}@ .daCalendarItemUniqueIdentifier=%{public}@
Cross-zone parent record relationship found. Resetting ckServerRecord. { class: %{public}@, recordID: %{public}@, parentClass: %{public}@, parentRecordID: %{public}@ }
Trying to create record without record ID for %@
Not creating cross-zone parent record relationship from %{public}@ %{public}@ to parent %{public}@ %{public}@
Error encoding resolution token map of CDObject {CDObject: %@}
Setting %{public}@ marked for deletion when merging data from record
Setting mergeDataRefusedToMergeMarkedForDeletion=YES for %{public}@ when merging data from record
Setting mergeDataRevertedLocallyMarkedForDeletion=YES for %{public}@ when merging data from record
REMCDObjectSystemFieldsMerging: Calling +mergeSystemPropertiesIntoCDObject:fromCKRecord: {class: %@, identifier: %@}
REMCDObjectSystemFieldsMerging: Duck typing failed to work. We are expecting REMCDObject must be conforming to REMCDObjectSystemFieldsMerging {class: %{public}@, identifier: %{public}@}
Shared object was deleted %@
Marking %@ for deletion after being deleted from cloud by another device
Invalid cached server record %@ %@: %@
Server record changed (needs refetch) %@ %@: %@
Server record changed %@ %@: %@
Server record changed with no server record in the error %@ %@: %@
Reference violation for server record in: %@ %{public}@: %{public}@
Error pushing %@ %@: %@
Tried to cache a record that is older than or equal to our current version: %@
Object fetched is older or equal to then our current record: %@
Object fetched does not have a share removing our severShare: %@
Not merging fetched record with same change tag %@
Deleting shared %@ because it no longer exists in cloud
Error writing temporary asset file: %@
Error creating temporary assets directory: %@
Error deleting file for temporary asset: %@
Error while enumerating all temporary asset files: %@
Error deleting temporary asset file: %@
Trying to purge CDObject with a read only persistent store {CDObject: %@}
Marking %@ for deletion
Unmarking %@ for deletion
Setting markedForDeletion %d on {identifier: %{public}@, cdEntity: %{public}@}
updateParentReferenceIfNecessary: self.parentCloudObject.recordID is nil %{public}@ %{public}@ %{public}@ %{public}@ %{public}@
Server record for %@ has no parent, but expects one. Re-saving record.
Server record for %@ parent %@ is different from expected parent %@. Re-saving record.
Updating sharees for %@ is not supported
No server share for %@, setting to %@
Existing server share for %@ %@ has the same change tag as %@
Existing server share for %@ %@ is newer than %@
Replacing old server share for %@ %@ with %@
Undeleting shared %@
Update shared object's owner names {class: %@, ownerName: %@}
Missing managed object context for updating owner name for %@ %@
Missing account for updating owner name for %@ %@
Error decoding resolution token map of CDObject {CDObject: %@}
Called cdEntityName on REMCDAudioAttachment. We don't have a way to create these from the API. How did we get here?
Warning: Calling super (REMCDObject's) -isConnectedToAccountObject:, make sure this model class implements proper connection to the account to avoid being auto marked as deleted {self: %@}.
Non-REMCDObject in NS changes, do we want to exclude this entity from change tracking? (%@)
Not an REM change tracking allowlisted entity, excluding this entity from change tracking? (%@)
JSONPropertiesMigration BEGIN {store: %@}
Failed to fetch objects. Migration failed {error: %@}
Saving batch {updatedObjectsCount: %ld, totalMigratedCount: %ld}
Failed to save batch. Migration error {error: %@}
Failed to save last object. Migration error {error: %@}
JSONPropertiesMigration END {totalMigratedCount: %ld, totalListCount: %ld, migratedAccount: %d. migratedListsCount: %ld, store: %@}
Unable to create REMCRMergeableOrderedSet. Skipipng listIDsMergeableOrdering migration {error: %@, cdAccount: %@}
Failed to create NSUUID from item in legacyOrderedSet. Skipping {item: %@}
Unable to migrate legacyOrderedSet. Skipping listIDsMergeableOrdering migration {error: %@, cdAccount: %@}
cdList missing account. Skipping reminderListOrdering migration {cdList: %@}
Unable to create REMCRMergeableOrderedSet. Skipipng reminderListOrdering migration {error: %@, cdList: %@}
Unable to migrate legacyOrderedSet. Skipping reminderListOrdering migration {error: %@, cdList: %@}
earliestChangeTokenForAccountID: COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}
earliestChangeTokenForAccountID: could not get a PHT token from fetch result {author: %{public}@, nsTransactions: %@}
CT Implementation: getTrackingStateWithClientID:%@
CT Implementation: saveTrackingState {state: %@, clientID: %{public}@}
Couldn't archive REMChangeToken to save tracking state for {clientID: %{public}@, encodeError: %@}
Couldn't get a persistence store to save tracking state for {clientID: %{public}@}
Failed to save tracking state to CoreData with error %@
rem_log_fault_if(transactionFetchLimit > 0 && entityNames.count > 0) -- transactionFetchLimit and entityNames are incompatible with each other and cannot be set at the same time
Failed to find entity name in -fetchHistoryAfterToken:entityName: {name: %{public}@}
Could not encode CD object into plist data {objectID: %@, error: %@, dictionary: %@}
rem_log_fault_if(!error) -- Attempting to get errorChangeSet with nil error.
COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}
rem_log_fault_if(!historyResult) -- Failed to get HistoryResult from request {request: %@}
COREDATA NSPersistentHistoryChangeRequest EXECUTED {author: %{public}@, txn.count: %llu}
REMNSPersistentHistoryTransaction has no storeID {transaction: %@}
Failed to get account objectID from storeID {storeID: %@}
Failed to get entity name from persistent history change {change: %@}
Non-REMCDObjects (non-REMNullableObjectIDProviding objects) or objects with nil remObjectID in changes {managedObject: %@}
We may have found a race condition where object got deleted in context before we could fetch a deletion change history! {mID: %@}
nil REMObjectID in persistent history change {mID: %@, change: %@}
rem_log_fault_if(!res) -- nil persistent history result {request: %@}
Failed fetch request to get REMCDTrackingState for {clientID: %{public}@, error: %@}
rem_log_fault_if(cdTrackingStates.count > 1) -- Unexpectedly found more than 1 entry of REMCDTrackingState for {clientID: %{public}@}
Unexpected nil lastConsumedChangeTokenData from the fetched REMCDTrackingState entry for {clientName: %@, accountIdentifier: %@}
Couldn't unarchive REMChangeToken from an REMCDTrackingState for {clientName: %@, accountIdentifier: %@, decodeError: %@}
Failed fetch request to get REMCDAuxiliaryChangeInfo {identifier: %@, error: %@}
Could not find REMCDAuxiliaryChangeInfo with {identifier: %@}
-[REMCDObjectTreeProcessorDelegate preprocessTreeNode:] Unknown node type {type: %{public}@}
rem_log_fault_if(sharedSettings != nil) -- Sync settings have already been initialized. {sharedSettings: %@}
rem_log_fault_if(!backingCDObject) -- invalid nil value for '%s'
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Failed to fetch managed object {mid: %{public}@, error: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@, managedObject.class: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Incorrect node type passed to REMCDObjectEffectiveVersionValidationDelegateImpl {type: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: SAVE COREDATA ERROR {author: %{public}@, nodesToFlush.count: %ld, update.count: %ld, error: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: SAVE COREDATA {author: %{public}@, nodesToFlush.count: %ld, update.count: %ld}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: No changes in MoC, no need to save {author: %{public}@, nodesToFlush.count: %ld}
-[REMCDObjectTreeProcessorDelegate processBatchOfTreeNodes:] Unexpectedly processes a node with nil REMCDObject {node: %{public}@}
manual processBatchOfTreeNodes does not actually save
Trying to insert object in mutableArray at negative index %ld
Trying to insert object in mutableArray at index (%ld) greater than count (%ld)
rem_log_fault_if(!entityName) -- Nil NSManagedObject.entity.name {mangedObject: %@}
Error fetching server change tokens: %@
Using existing share for %@
No existing share for %@
Trying to get root record for %@, but we don't have a server record. This likely won't work.
Created share %@ with existing share reference for %@
Created share %@ for %@
Trying to populate share %@ with no record ID for %@
Trying to populate share %@ with no record type for %@
Checking for an existing share for %@
Checking for share on %@ serverShare=%@ serverRecord.share=%@
Have a share that wasn't persisted for %@
Not checking parent object %@ for %@ because it's not in the same zone (object in %@ and parent in %@)
Preparing share %@ for %@
Finished waiting for operations before preparing share for %@
rem_log_fault_if(!object) -- invalid nil value for '%s'
No root record for %@
Retrying to save share for %@
Using saved server share when retrying %@
Saving Share: %@ with root record: %@ %@
Partial failure saving share for %@ %@
Error saving share for %@ when saving record ID %@ %@: %@
Saving server record %@ for %@ %@
Saving server share %@ for %@ %@
Server record %@ is not a share %@
No server record from error saving share for %@ %@ %@
Error saving share %@ for %@ %@: %@
Saved share %@ %@
No CKShare or error returned for %@ %@
Need to fetch share %@ for %@
Fetching share %@ with %@
Fetched share %@ %@
Error fetching share %@ %@: %@
Setting server share on %@ %@ %@
Couldn't find cloud object for share %@
No record type in share %@
No root record reference for share %@
User stopped sharing %@ %@
User removed themselves from shared %@ %@
Accepting share for metadata %@
Found existing object %@ for share metadata %@
No existing object for share metadata %@
rem_log_fault_if(!shareURL) -- invalid nil value for '%s'
Accepting shared object at URL: %@
Error accepting share at URL %@ %@: %@
Share accepted for URL %@ %@
Fetching record from share %@
Error fetching record from share %@: %@
Fetched record from share %@
Using share from per-share completion block %@: %@
Falling back to share from metadata %@: %@
No root record when accepting share: %@
Accepting %@ with %@
SAVE COREDATA ERROR {author: %{public}@, insert.count: %ld, update.count: %ld, delete.count: %ld, error: %{public}@}
SAVE COREDATA {author: %{public}@, insert.count: %ld, update.count: %ld, delete.count: %ld}
Performed save with nil author
COREDATA REQUEST {author: %{public}@, request: %@}
COREDATA REQUEST ERROR {author: %{public}@, request: %{public}@, error: %{public}@}
FETCH COREDATA REQUEST {author: %{public}@, request: %@}
FETCH COREDATA ERROR {author: %{public}@, entityName: %{public}@, error: %{public}@}
BATCH FETCH COREDATA {author: %{public}@, entityName: %{public}@, result.count: %ld, affectedStores.count: %ld, propsToFetch.count: %ld, fetchBatchSize: %ld}
FETCH COREDATA {author: %{public}@, entityName: %{public}@, result.count: %ld, affectedStores.count: %ld, propsToFetch.count: %ld}
Performed fetch with nil author
FETCH COUNT COREDATA REQUEST {author: %{public}@, request: %@}
FETCH COUNT COREDATA ERROR {author: %{public}@, entityName: %{public}@, error: %{public}@}
FETCH COUNT COREDATA {author: %{public}@, entityName: %{public}@, count: %ld, affectedStores.count: %ld}
ICCC: Set up RDStoreControllerManagedObjectContext for CloudSchemaCatchUpSync {persistence: %lld, runtime: %lld}
Entity has nil name {entity: %{public}@}
[entity-height-in-MoM-tree] node.entity=%{public}@, node.entity.relationships=%{public}@
sTopologicallyWeightedEntities = %{public}@
REMSupportedVersionUpdating: VALIDATING dirty MOIDs for effectiveMinimumSupportedVersion {author: %{public}@, dirtyObjectIDs.count: %ld}
Failed to fetch dirty object for effectiveMinimumSupportedVersion validation {managedObjectID: %{public}@}
Dirty object for effectiveMinimumSupportedVersion validation is not REMCDObject {managedObjectID: %{public}@}
REMSupportedVersionUpdating: VALIDATION COMPLETED for effectiveMinimumSupportedVersion {author: %{public}@, subtrees.count: %ld, elapsed: %.4f s}
%@ called on unsupported platform.
Called cdEntityName on REMCDAttachment. This is an abstract core data model super class. {callstack: %@}
Error occured when loading accounts from disk {error: %{public}@}
Error occured trying to delete all spotlight indices. Will not enable CoreSpotlight delegates {error: %{public}@}
Deallocating RDStoreController {pointer: %p, containerURL: %{private}@}
Loaded accounts from disk {accountIdentifiers: %{public}@}
Failed to load accountStoreFromDisk. {error: %{public}@}
Failed to discover account identifiers on disk. {error: %{public}@}
Found ppt sentinel. Marking as PPTStore {pptSentinelURL: %{private}@}
Store was marked as PPT but sentinel is gone. Marking a non-PPTStore {pptSentinelURL: %{private}@}
Before getting files from URL {url: %{private}@}
Done getting files from URL {url: %{private}@, count: %ld}
Failed to get file size {file: %{public}@, error: %{public}@}
Failed to fetch store metadata for sqlite file due to disk full {file: %{public}@, error: %{public}@}
Failed to fetch store metadata for sqlite file {file: %{public}@, error: %{public}@}
The store sqlite file is neither initialized or marked as deleted. The file is probably corrupted. Will delete the file if <= 4096 bytes (i.e. empty) {file: %{public}@}
Unsupported storeURL. DELETING {store: %{public}@, identifier: %{public}@}
Found sqlite file in RDStoreController.databaseDirectoryURL doesn't have prefix RDPathComponentStoreFilePrefix {file: %{public}@}
Failed to get filename from sqlite file in RDStoreController.databaseDirectoryURL {file: %{public}@}
Removed store file marked deleted {file: %{public}@}
Failed to remove store file marked deleted {file: %{public}@, error: %{public}@}
Finished discovering account identifiers on disk {file.count: %ld, storeURLs.count: %ld, deletedStores.count: %ld}
Failed to enumerate files in RDStoreController.databaseDirectoryURL - Failed to load accounts from disk {error: %{public}@, databaseDirectoryURL: %{private}@}
[RDStoreController validateAccountStores] Local store is not loaded to the PSC. Probably it's corrupted and failed to load. Going to delete the file and reload again. {error: %{public}@}
[RDStoreController validateAccountStores] Failed to delete local store file {error: %{public}@}
[RDStoreController validateAccountStores] Failed to load local store {error: %{public}@}
[RDStoreController validateAccountStores] Re-created and loaded local store {store: %{public}@}
[RDStoreController validateAccountStores] Still unable to load local store after deleting and reloading.
Account storage invocation caches invalidated upon validating account store
[RDStoreController validateAccountStores] Found corrupted store with unkwown account type {accountID: %{public}@, store: %@}
[RDStoreController validateAccountStores] Unexpectedly having 2 stores for the same account {accountID: %{public}@, store1: %@, store2: %@}
[RDStoreController validateAccountStores] Found store with no REMCDAccount. Going to disconnect and destroy {store: %@}
[RDStoreController validateAccountStores] Found corrupted store with %ld REMCDAccount objects {accountIDs: %{public}@, store: %@}
[RDStoreController validateAccountStores] Error fetching account ID from store {error: %{public}@, store: %@}
MIGRATE STORES BEGIN {stores.count: %ld}
MIGRATE STORE BEGIN {store: %@}
MIGRATE STORE END {store: %@}
Did update stores metadata
MIGRATE STORE ERROR. Failed to flush stores metadata {error: %{public}@, updatedStores: %@}
MIGRATE STORES END {updatedStores: %@}
Error fetching stores from account types {error: %{public}@, types: %{public}@}
Failed to create directory %@: %{public}@
File %@ already exists and is not a directory!
Identifier already loaded -- skipping {identifier: %{public}@}
No account is missing. No need to load missing accounts
Add persistentStores BEGIN {identifiers.count: %ld, accountStoreMap.count: %ld}
Add persistentStores END {accountStoreMap.count: %ld, newStores.count: %ld, lastError: %{public}@}
[RDStoreController createOrLoad] Will add store {storeURL: %@}
[RDStoreController createOrLoad] didAdd store {fileName: %{public}@, addedStoreDescription: %@}
[RDStoreController createOrLoad] Failed to add store {error: %@, fileName: %{public}@}
Tried to remove store for unknown account -- skipping {accountIdentifier: %{public}@}
Going to remove store for account {accountIdentifier: %{public}@, store: %@}
Account storage invocation caches invalidated upon remove accounts
DeleteAccountStore: Marking account store as deleted {store: %@}
DeleteAccountStore: Failed to mark account store as deleted {store: %@, error: %{public}@}
DeleteAccountStore: Deleting spotlight indices {store: %@}
DeleteAccountStore: Going to delete objects for entity {entity: %@, store: %@}
DeleteAccountStore: Failed to delete objects for entity {entity: %@, store: %@, error: %{public}@}
RDStoreController nukeData. *** NOTE *** This will only mark database files as deleted without actually deleting the files, as deleting database files while remindd is running is likely to cause a CoreData crash. The files will be deleted the next time remindd launches, or you can run `remindtool nuke`, or manually kill remindd and delete the whole container directory. {containerURL: %@, accountIDToDatabaseFileNameMap: %@}
Account storage invocation caches invalidated by nuke
RDStoreController nukeData completed {allSuccess: %ld, error: %{public}@}
Account storage invocation caches invalidated with store connection
Failed to set query generation token to current {error: %{public}@}
Deleting object from database because it's marked for deletion and its deletion has synced: %@
Error purging deleted objects: %{public}@
[RDStoreController requestFreeSpaceToLoadAccountStores] Files from URL {url: %{private}@, count: %ld, error: %@}
[RDStoreController requestFreeSpaceToLoadAccountStores] Failed to get file size {file: %{public}@, error: %{public}@}
[RDStoreController requestFreeSpaceToLoadAccountStores] File size is {file: %@, size: %@}
[RDStoreController requestFreeSpaceToLoadAccountStores] Trying to request free space (multiplied) {space: %llu, multiplier: %llu}
[RDStoreController requestFreeSpaceToLoadAccountStores] Aborted requesting free space, dispatch to call completion directly
Error fetching REMCDExtendedAccount: %{public}@
didFetchUserRecord: %@
Received an error that a zone (%@) wasn't found. Re-uploading everything for that zone.
Shared zone was deleted: %@
Deleting shared %@
Not deleting shared %@ in wrong zone %@
userDidDeleteRecordZoneWithID: %@
Error saving after notes zone deleted by user: %@
%@ (%@) hasn't been fully pushed to the cloud. Not deleting.
didFailPushingExceededStorageQuotaForContext: %@
Released the cached CloudKit account
Deleted object {managedObjectID: %@}
Inserted object {managedObjectID: %@}
Updated object {managedObjectID: %@}
Account storage invocation caches invalidated by account changes {self: %p, keys: %@}
Not creating an RDAccountPersonIDSaltObserver because the system is not ready to retrieve the primary cloudkit account
Not creating an RDAccountPersonIDSaltObserver because primary cloudkit account is not available. Notifying caller explicitly to handle RDAccountPersonIDSaltObserver.AccountAbsentError... {accountID: %{public}@}
Created an RDAccountPersonIDSaltObserver and added to accountPropertiesNotifier {observerID: %@, accountObjID: %@}
Failed to create an RDAccountPersonIDSaltObserver to add to accountPropertiesNotifier {accountObjID: %@}
Removed RDAccountPersonIDSaltObserver from accountPropertiesNotifier {observerID: %@}
Failed to list contents of store directory {error: %{public}@}
Existing contents of stores diretory:
Store %d: %@
PopulateDefaultValuesMigration BEGIN {store: %@}
Non-optional attribute has no default value. Skipping {entityName: %@, attributeName: %@}
Attribute belongs to super entity. Skipping {entityName: %@, attributeName: %@}
PopulateDefaultValues BEGIN {entity: %@, attributeName: %@}
PopulateDefaultValues END {entity: %@, attributeName: %@, updated.count: %@}
PopulateDefaultValues ERROR {updateError: %@, entity: %@, attributeName: %@}
PopulateDefaultValuesMigration END {store: %@, populateAttributeNames: %@}
Cannot obtain permanet ID for ckIdentifier %{public}@ with error: %{public}@
managedObjectContext should not be nil in BatchFatchHelper._canObtainPermanentIDForObject for ckIdentifier %{public}@
ICBatchFetchHelper excludes %{public}@ as it is in missingCKIdentifierCache
ICBatchFetchHelper excludes %{public}@ as it is in managedObjectIDCache
Cannot obtain permanet ID for ckIdentifier %{public}@
managedObjectContext should not be nil in BatchFatchHelper._flush
%{public}@ perform dispatch block sync took %f s
%{public}@ flush (onCurrentQueue = %d) took %f s
ICBatchFetchHelper: existingObjectWithID:%{public}@ with error %{public}@
ICBatchFetchHelper: existingObjectWithID:%{public}@ is nil
managedObjectContext should not be nil in BatchFatchHelper.cachedManagedObjectForCKIdentifier for ckIdentifier %{public}@
ICBatchFetchHelper: ckIdentifier %{public}@ is not in cachedManagedObjectForCKIdentifier
Number of dispatch blocks not run in ICBatchFetchHelper : %lu
REMCDObjectTreeProcessor: START traversing post-order from {rootNode: %{public}@, batchSize: %ld}
REMCDObjectTreeProcessor: 
CYCLIC REFERENCE in object tree detected! Tail node has already been flushed before {tailNode: %{public}@}
REMCDObjectTreeProcessor: 
STATUS {traversalStack.count: %ld, flushQueue.count: %ld, flushed.count: %ld, tailNode: %{public}@}
REMCDObjectTreeProcessor: END traversal for {processed.count: %ld, elapsed: %.4f s, rootNode: %{public}@}
REMCDObjectTreeProcessor: 
FLUSHING {count: %ld}
Error saving context (%{public}@): %{public}@
Error saving context: %{public}@
Saved context: %{public}@
CKParentReminderIdentifierMigration BEGIN {store: %@}
CKParentReminderIdentifierMigration ERROR {updateError: %{public}@}
CKParentReminderIdentifierMigration END {store: %@, updated.count: %ld}
PersonIDSaltGenerator failed to generate random salt with exception: %@.
Failed to fetch CD accounts: %@
Found extended account without CK user record name: %@
Failed to fetch cloud-based accounts: %@
Trying to get a primary active CloudKit account but can't find any
Trying to get a primary active CloudKit account based on the assumption that there should only be at most 1 active (primary) .cloudKit account type object but multiple was found {count: %lu, first.identifier: %@}
CloudKitUtils: No CloudKit REMCDAccount found in the database
CloudKitUtils: Trying to get the primary iCloud ACAccount but can't find any
CloudKitUtils: Found a CloudKit REMCDAccount that matches the primary iCloud ACAccount {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a CloudKit REMCDAccount that does NOT match with the primary iCloud ACAccount {cdAccount: %{public}@, acAccount: %{public}@}
rem_log_fault_if(self.type != REMAccountTypeCloudKit) -- Generating PersonIDSalt is supported on the CloudKit account only
No need to generate PersonIDSalt because we don't currently have any feature that needs PersonID to be set if the user doesn't have any secondary accounts
generateAndSavePersonIDSaltIfNeeded...: Could not generate random salt due to system error {accountID: %@}
generateAndSavePersonIDSaltIfNeeded...: Posted RDStoreControllerREMAccountPropertiesDidUpdate {accountID: %@, salt: %@}
generateAndSavePersonIDSaltIfNeeded...: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %@, salt: %@}
generateAndSavePersonIDSaltIfNeeded...: Account .personIDSalt is already set {accountID: %@, salt: %@}
DisplayDateMigration BEGIN {store: %@}
DisplayDateMigration END {store: %@}
$s7remindd24RetainedMainDaemonObjectP
$sSY
_pSgG
_pSgG
So17OS_os_transaction_pSg
SgXw
qd__SgXwz_
Rld__Cr__lXX
Ieggn_
y_So17OS_dispatch_queueCG
_pSg
So17OS_dispatch_queueC
ySaySo24REMContactRepresentationCG_G
SgXw
qd__SgXwz_SaySo24REMContactRepresentationCG_
Rld__Cr__lXX
SaySo24REMContactRepresentationCGIeggn_
SaySo24REMContactRepresentationCG
ySaySo24REMContactRepresentationCG_G
So8NSStringC
$ss21_ObjectiveCBridgeableP
ypSg
So11REMObjectIDC
ypSiSpy
GSbIgnyyd_
SDySo17NSManagedObjectIDC
ypyp
Ignnd_
_pSgIeggg_
_pSgIegng_
_pSgIeggg_
_pSgIeggg_
_pSgIeggg_
$ss12CaseIterableP
$s7remindd23TantorMigrationAPIAsyncP
ySi_
ySSG
So13CKRecordValue_p
So15REMCDAssignmentCm
So15REMCDAssignmentC
SSSg
yypG
ySo16NSSortDescriptorCG
So17NSManagedObjectIDCSg
So17NSManagedObjectIDCSgz_Xx
ySo11REMObjectIDCSo015NSManagedObjectB0CGSgXw
yxq_GSgXwz_So11REMObjectIDC_So015NSManagedObjectB0CRlzCRl_Cr0_lXX
ySo11REMObjectIDCSo015NSManagedObjectB0CGIegg_
So17NSManagedObjectIDC
So8NSObjectC
So11REMObjectIDCSg
SDySo11REMObjectIDCSSGSg
SaySo11REMObjectIDCG
So22UNNotificationResponseC
ySo11REMObjectIDCSo11REMReminderC_G
SbIegy_Sg
SaySo9REMShareeCG
SDySo13REMAssignmentCSo11REMReminderCG
So7REMListC
So17OS_dispatch_groupC
_pSgIegg_Sg
So21UNNotificationContentC
So24UNUserNotificationCenterCSgIegg_
ySo13REMAssignmentCSo11REMReminderC_G
ySS_So8NSObjectCtG
ySS_yptG
So29REMDAChangedModelObjectResult_p
ySo11REMObjectIDCSaySo13REMAssignmentCG_G
SDySo11REMObjectIDCSaySo13REMAssignmentCGG
SaySo13REMAssignmentCG
SDySo7REMListCSaySo11REMReminderCGG
SaySo11REMReminderCG
ySS_So8NSStringCtG
So14REMChangeTokenCSg
So29DABabysitterRegistrationTokenCSg
SbSgIegy_Sg
SgXw
SaySo25REMDAChangeTrackingHelperCG
SbSg
ySdG
yShyxGc
ShyxG
SayySb_ShyxGtcG
ySo8NSNumberCG
So5NSSetCIeyByy_
So5NSSetCIeyBy_
c_SiSdt
So13REMCDReminderC
$s7remindd11Completable33_D969633BE2061D27916D1A5EBAC77335LLP
ySo13REMCDReminderCG
ySo13REMCDReminderCG
So17RDStoreControllerCSgXw
_pSgXw
So24REMAppleAccountUtilitiesC
$s7remindd15PersonIDHashingP
$s7remindd45RDExchangeAccountComplimentaryServiceDelegateP
So17OS_dispatch_queueCG
GSo17OS_dispatch_queueCG
So21DADBuddyStateObserverCSg
So17OS_os_transaction_p
Ieggn_
So37RDStoreControllerManagedObjectContextC
SgXw
SgXwz_Xx
So7NSErrorC
SaySSG
ySo12REMCDAccountCGG
So6NSDataC
yt_yt
SDySSSaySSGG
SDySSSdG
SDySSypG
yS2SG
20serializationVersion_t
SS3key_
yS2S_G20serializationVersiont
yS2S_G20serializationVersion_t
So22REMStoreContainerTokenCSg
_pSgXw
So10NSMapTableCySo5NSURLCSo17RDStoreControllerCG
So7NSErrorCSgIeyBy_
So7NSArrayCSo7NSErrorCSgIeyByy_
So7NSArrayCSgSo7NSErrorCSgIeyByy_
_pSgIegg_
SayypGSg
_pSgIeggg_
So10NSMapTableC
ySo15CNKeyDescriptor_pG
So15CNKeyDescriptor_p
So18CNContactFormatterC
SaySSGz_Xx
So14CNLabeledValueC
IeyB_
So16CLCircularRegionC
Ieg_
So7NSArrayCIeyBy_
SaySSGIegg_
ySo8CLRegionC_G
_pSg
So9ACAccountC
_pSgz_Xx
So14ICCloudContextC
SiSo12NSDictionaryCSgSo7NSErrorCSgIeyByyy_
SDyS2SG
SiSDyS2SGSg
_pSgIegygg_
SDyS2SGz_Xx
_pIegg_
SiIegy_
So11REMCDObjectC
So14NSFetchRequestC
So12DABabysitterC
Sbz_Xx
SaySS_SDySSSo8NSNumberCGtG
So15NSManagedObjectC
So13NSXPCListenerC
$s7remindd13RDEventStreamP
$s7remindd17RDTimeEventStreamP
$s7remindd23DataAccessSyncPerformerP
So8REMStoreCyKc
SgXw
So8CKRecordCSgSo7NSErrorCSgIeyByy_
So8CKRecordCSg
_pSgIeggg_
So12NSDictionaryCSgSo7NSErrorCSgIeyByy_
SDySS
_pSgIeggg_
So18REMMigrationResultCSgSo7NSErrorCSgIeyByy_
So18REMMigrationResultCSg
_pSgIeggg_
So18REMMigrationResultCSg
So18REMMigrationResultCSgz_Xx
SSz_Xx
ySo13REMCDReminderCGG
So13REMCDReminderCSg
So10REMCDAlarmCm
So10REMCDAlarmC
So22REMAlarmVehicleTriggerC
So24REMCDAlarmVehicleTriggerC
$s7remindd10CDIngestorP
So23REMAlarmLocationTriggerC
So19REMAlarmDateTriggerC
So21REMCDAlarmDateTriggerC
So27REMAlarmTimeIntervalTriggerC
So29REMCDAlarmTimeIntervalTriggerC
SS10identifier_t
3pid_SSSg16bundleIdentifierAC11processName
11accessLevelt
ySo9REMCDListCG
ySo9REMCDListCGG
ySo11REMObjectIDCG
ySo9REMCDListCGG
ySo17NSManagedObjectIDCG
SaySo9REMCDListCG
So14REMCDSmartListCm
So14REMCDSmartListC
$s7remindd13RDJSONCodableP
So7NSCoderC
SaySDySSypGG
SaySayypGG
So14NSSecureCoding_p
SS3key_yp5valuetSg
SayypG
ySDySSypGG
_pSgXw
$s7remindd29RDHashtagLabelUpdaterDelegateP
So17NSPersistentStoreCSg
ySo34REMCDSharedToMeReminderPlaceholderCSo13REMCDReminderCSgGG
So34REMCDSharedToMeReminderPlaceholderC
ySo34REMCDSharedToMeReminderPlaceholderCG
ySo12REMCDHashtagCSSSgGG
So12REMCDHashtagC
ySo12REMCDHashtagCG
ySo12REMCDHashtagCSo13REMCDReminderCSgGG
ySo12REMCDHashtagCG
So17REMCDHashtagLabelC
ySo17REMCDHashtagLabelCShySo0A0CGSgGG
ShySo12REMCDHashtagCGSg
ySo17REMCDHashtagLabelCG
So17REMCDHashtagLabelCSg
ySo12REMCDHashtagCGG
ySo12REMCDHashtagC_G
So28REMDAChangedIdentifierResult_p
SaySo12REMCDHashtagCG
So12REMCDHashtagCm
ySo12REMCDHashtagC
SgGG
SDySSSaySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
ySo34REMCDSharedToMeReminderPlaceholderCGG
y_ACy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
y_ADy_AAy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
y_AEy_ABy_
yShy
GAHGGGGSo17OS_dispatch_queueCG
GAPG
y_AAy_
yShy
GAEGGG
y_ABy_
yShy
GAFGGGG
y_ACy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
yShy
GAEGG
GIeggn_
yShy
GADG
GABIeggo_
yShy
So17OS_dispatch_queueC_
So11REMCDShareeCm
So9REMShareeCm
So23REMCDCalDAVNotificationCm
So21REMCalDAVNotificationCm
So12REMCDAccountCm
So17REMAccountStorageCm
So9REMCDListCm
So14REMListStorageCm
SSSgm
So13REMCDReminderCm
So18REMReminderStorageCm
So10REMHashtagCm
So8REMAlarmCm
So13REMAttachmentCm
So19REMCDRecurrenceRuleCm
So17REMRecurrenceRuleCm
So17NSManagedObjectIDCm
So13REMAssignmentCm
$s7remindd25AlarmTriggerRepresentableP
So8REMAlarmC
ySo22REMAlarmVehicleTriggerCG
ySo23REMAlarmLocationTriggerCG
ySo19REMAlarmDateTriggerCG
ySo27REMAlarmTimeIntervalTriggerCG
_pSg
_pSg
SDySo11REMObjectIDC
ShySo13REMCDReminderCG
SgXw
SgXwz_Xx
_pIegn_
SDySo11REMObjectIDC
ShySo12REMCDAccountCG
ShySo11REMObjectIDCG
SDySo11REMObjectIDC
Gz_Xx
ShySo11REMObjectIDCGz_Xx
_pIegn_
SDySo11REMObjectIDC
Gz_Xx
SDySo11REMObjectIDC
So11REMObjectIDC3key_yp5valuetSg
So11REMObjectIDC3key_yp5valuet
So15REMCDAttachmentC
$s7remindd25RDDARequestsQueueDelegateP
_pSgXw
So19REMSmartListStorageC
_pSg
ySo17REMManualOrderingCG
So12NSOrderedSetCSg
ySo13REMCDReminderCG
So7REMListCSg
SDySo24REMContactRepresentationCSo9CNContactCSgG
So14CNContactStoreC
So12NSDictionaryCSgyc
GSo17OS_dispatch_queueCG
SDySo11REMObjectIDCSo9CNContactCG
$s7remindd28RDApplicationShortcutUpdaterP
$s7remindd19RDXPCEventInterfaceP
ySS_So13OS_xpc_object_ptc
SgXw
_ShySo19NSEntityDescriptionCGt
$s7remindd24RDSwiftInvocableProtocolP
So41REMDistributedEvaluationCollectionOptionsC
SaySo13REMCDReminderCG
SiSg
SaySaySdGG
Sg_ABt
SaySdG
yycSg
SgXw
SgXwz_Xx
$s7remindd43RDContactInteractionAlarmProducerDataSourceP
$s7remindd47RDContactInteractionAlarmProducerSessionManagerP
_pXo
So24REMContactRepresentationC_
So24REMContactRepresentationC_
ySSSgG
ySSSgGG
_So24REMContactRepresentationCtG
SaySSSgG
_pIeggzo_
So23REMOrderedIdentifierMapCSgGG
So23REMOrderedIdentifierMapCSg
Iegy_
So17OS_dispatch_groupCSg
ShySSG
So17OS_dispatch_groupCSgz_Xx
So11REMReminderC
So39_REMNSPersistentHistoryTrackingAbstractC
So37RDStoreControllerManagedObjectContextCIeyBy_
So37RDStoreControllerManagedObjectContextCIegg_
$s7remindd29CDAuxiliaryReminderChangeInfoP
So18REMReminderStorageC
Sg_ABt
ySS_So8NSNumberCtG
ShySo15REMCDAssignmentCG
ySo13REMAssignmentC_G
SaySo13REMAttachmentCG
ShySo12REMCDHashtagCG
ySo10REMHashtagC_G
SaySo19REMCDRecurrenceRuleCG
SaySo10REMCDAlarmCG
SaySo15REMCDAssignmentCG
_pGIegg_
ySo20UNNotificationActionCSgG
ySo20UNNotificationActionCG
ySo24UNNotificationAttachmentCG
ySS5title_SS4listtG
ySSG
_yptG
ySS_SdtG
So17RDStoreControllerCSg
So17REMAccountStorageC
SDySS
SDySo11REMObjectIDCSuG
SaySSSg_SStG
ySnySiGG
SgXw
SgXwz_Xx
So24OS_dispatch_source_timer_p
ySo17REMAccountStorageCG
So13REMAssignmentC
SaySo11REMCDObjectCG
SaySo11REMCDShareeCG
Sayy
ySo18REMMigrationResultC
_pGcG
ySo18REMMigrationResultC
_pGSg
So19REMCDMigrationStateC
ySo19REMCDMigrationStateCG
So22NSManagedObjectContextCSo19REMCDMigrationStateCSgIggg_
ySo18REMMigrationResultC
_pGIegg_
SbSd
_pSgIegyyg_
3key_
5valuetSg
3key_
5valuet
ySo19REMCDMigrationStateCGG
So11NLTokenizerCSg
_pSgXw
So27REMUserDefaultsObserveToken_pSg
So8REMStoreC
ySo11REMObjectIDCSo015NSManagedObjectB0CG
ySo11REMObjectIDCSo015NSManagedObjectB0CG
ySSSgG
ySo21REMReminderChangeItemCG
ySo11REMReminderCG
ySo17NSPersistentStoreCG
_So24REMContactRepresentationCt
_So24REMContactRepresentationCtG
ySo13REMCDReminderCGG
ySo13REMCDReminderCG
ySSG
ySo14UNNotificationCG
15dataSourceAlarm_
8fireDatet
15dataSourceAlarm_
8fireDatetG
ySo17REMCDAlarmTriggerCGG
ySo17REMCDAlarmTriggerCG
ySo17REMCDAlarmTriggerCGG
ySsG
yS2SG
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCGG
_So8CLRegionCt
_So8CLRegionCtG
ySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCGG
ySSSo8CLRegionCG
So11REMReminderC_
ySo11REMReminderC_
ySSSo8NSObjectCG
ySSSiG
ySo7REMListCG
yytG
yytGG
ySo10REMAccountCG
ySo19REMCDMigrationStateCG
ySSSo24NSPersistentHistoryTokenCG
ySo24REMContactRepresentationCG
ySSypG
SS_ypt
yyyKcG
ySo14REMCDSmartListCG_So15NSManagedObjectCt
ySo14REMCDSmartListCG_So15NSManagedObjectCtG
ySo11REMObjectIDCSo15NSManagedObjectCG
ySo14REMCDSmartListCGADG
ySo14REMCDSmartListCGG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCGG
ySo19REMSmartListStorageCG
ySo11REMObjectIDCSo11REMCDObjectCG
ySo11REMCDObjectCG_So15NSManagedObjectCt
ySo11REMCDObjectCG_So15NSManagedObjectCtG
ySo11REMCDObjectCGADG
ySo11REMCDObjectCGG
ySo11REMCDObjectCG
ySo11REMCDObjectCGG
ySo11REMObjectIDCG
So19REMSmartListStorageC_Say
ySo19REMSmartListStorageC_Say
ySo11REMObjectIDCSDySSypGG
ySo13REMCDReminderCG_So15NSManagedObjectCt
ySo13REMCDReminderCG_So15NSManagedObjectCtG
ySo13REMCDReminderCGADG
ySo13REMCDReminderCGG
ySo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo18REMReminderStorageCG
So18REMReminderStorageC_Say
ySo18REMReminderStorageC_Say
ySo9REMCDListCG_So15NSManagedObjectCt
ySo9REMCDListCG_So15NSManagedObjectCtG
ySo9REMCDListCGADG
ySo9REMCDListCGG
ySo9REMCDListCG
ySo9REMCDListCGG
ySo14REMListStorageCG
ySo11REMCDShareeCG_So15NSManagedObjectCt
ySo11REMCDShareeCG_So15NSManagedObjectCtG
ySo11REMCDShareeCGADG
ySo11REMCDShareeCGG
ySo11REMCDShareeCG
ySo11REMCDShareeCGG
ySo9REMShareeCG
So9REMShareeC_Say
ySo9REMShareeC_Say
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCt
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCtG
ySo23REMCDCalDAVNotificationCGADG
ySo23REMCDCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCG
ySo23REMCDCalDAVNotificationCGG
ySo21REMCalDAVNotificationCG
So21REMCalDAVNotificationC_Say
ySo21REMCalDAVNotificationC_Say
ySSSg_SStG
SSSg_SSt
So13REMCDReminderC_Su_Sutt
ySo13REMCDReminderC_Su_SuttG
ySo17NSManagedObjectIDC
ySo11REMObjectIDCSiG
So14REMListStorageC_Say
ySo14REMListStorageC_Say
ySo12REMCDAccountCG_So15NSManagedObjectCt
ySo12REMCDAccountCG_So15NSManagedObjectCtG
ySo12REMCDAccountCGADG
ySo12REMCDAccountCGG
ySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySo11REMObjectIDCSuG
SSSg_
_ABtt
ySSSg_
_ACttG
So17REMAccountStorageC_Say
ySo17REMAccountStorageC_Say
ySSSo19REMCDReplicaManagerCG
ySaySdGG
ySdG
SS_Sdt
ySo22REMRecurrenceDayOfWeekCG
ySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySo19REMCDReplicaManagerCG
ySSSo31REMReplicaManagerSerializedDataCG
ySo22UNNotificationCategoryCG
ySo22UNNotificationCategoryCG
ySSSaySSGG
ySSSdG
yS2SGSg
So28RDAccountPropertiesObserving_pG
ySo11REMObjectIDCSo7REMListCG
ySo8RDBMRuleCG
ySo15NSManagedObjectCG
yySb_Shy
GtcG
ySo19NSEntityDescriptionCG
ySo17NSManagedObjectIDCG
ySo15NSManagedObjectCG
ySSSo8NSNumberCG
ySo10REMCDAlarmCG_So15NSManagedObjectCt
ySo10REMCDAlarmCG_So15NSManagedObjectCtG
ySo10REMCDAlarmCGADG
ySo10REMCDAlarmCGG
ySo10REMCDAlarmCG
ySo10REMCDAlarmCGG
So8REMAlarmC_Say
ySo8REMAlarmC_Say
ySo15REMCDAssignmentCG_So15NSManagedObjectCt
ySo15REMCDAssignmentCG_So15NSManagedObjectCtG
ySo15REMCDAssignmentCGADG
ySo15REMCDAssignmentCGG
ySo15REMCDAssignmentCG
ySo15REMCDAssignmentCGG
So13REMAssignmentC_Say
ySo13REMAssignmentC_Say
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCt
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCtG
ySo18REMCDURLAttachmentCGADG
ySo18REMCDURLAttachmentCGG
ySo18REMCDURLAttachmentCG
ySo18REMCDURLAttachmentCGG
So16REMURLAttachmentC_Say
ySo16REMURLAttachmentC_Say
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCt
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCtG
ySo20REMCDImageAttachmentCGADG
ySo20REMCDImageAttachmentCGG
ySo20REMCDImageAttachmentCG
ySo20REMCDImageAttachmentCGG
So18REMImageAttachmentC_Say
ySo18REMImageAttachmentC_Say
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCt
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCtG
ySo19REMCDFileAttachmentCGADG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCG
ySo19REMCDFileAttachmentCGG
So17REMFileAttachmentC_Say
ySo17REMFileAttachmentC_Say
ySo15REMCDAttachmentCG
ySo12REMCDHashtagCG_So15NSManagedObjectCt
ySo12REMCDHashtagCG_So15NSManagedObjectCtG
ySo12REMCDHashtagCGADG
ySo12REMCDHashtagCGG
ySo12REMCDHashtagCG
ySo12REMCDHashtagCGG
So10REMHashtagC_Say
ySo10REMHashtagC_Say
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCt
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCtG
ySo19REMCDRecurrenceRuleCGADG
ySo19REMCDRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCG
ySo19REMCDRecurrenceRuleCGG
So17REMRecurrenceRuleC_Say
ySo17REMRecurrenceRuleC_Say
ySo19REMCDRecurrenceRuleCG
ySo8RDBMRuleCG
So12RDBMItemTypeC
ySo12RDBMItemTypeCG
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
GACG
So17REMManualOrderingC_Say
ySo17REMManualOrderingC_Say
ySo11REMObjectIDC
ySo11REMObjectIDCSo13REMCDReminderCG
ySo12REMCDAccountCG
ySo11REMObjectIDC
ySo11REMObjectIDCSo12REMCDAccountCG
ySo13REMCDReminderCG
ySo12REMCDAccountCGG
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCt
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCtG
ySo29REMCDAlarmTimeIntervalTriggerCGADG
ySo29REMCDAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCG
ySo29REMCDAlarmTimeIntervalTriggerCGG
So27REMAlarmTimeIntervalTriggerC_Say
ySo27REMAlarmTimeIntervalTriggerC_Say
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCt
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCtG
ySo21REMCDAlarmDateTriggerCGADG
ySo21REMCDAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCGG
So19REMAlarmDateTriggerC_Say
ySo19REMAlarmDateTriggerC_Say
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCt
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCtG
ySo25REMCDAlarmLocationTriggerCGADG
ySo25REMCDAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCGG
So23REMAlarmLocationTriggerC_Say
ySo23REMAlarmLocationTriggerC_Say
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCt
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCtG
ySo24REMCDAlarmVehicleTriggerCGADG
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCGG
So22REMAlarmVehicleTriggerC_Say
ySo22REMAlarmVehicleTriggerC_Say
ySayypGG
ySo18REMMigrationResultC
_pGcG
ySo34REMCDSharedToMeReminderPlaceholderCSo13REMCDReminderCSgG
ySo12REMCDHashtagCSo13REMCDReminderCSgG
ySo12REMCDHashtagCSSSgG
ySo12REMCDHashtagCG
ySo12REMCDHashtagCG
ySo17REMCDHashtagLabelCShySo0A0CGSgG
ySo17REMCDHashtagLabelCG
ySo17REMCDHashtagLabelCGG
ySSSaySo12REMCDHashtagCGG
ySSSo13REMCDReminderCG
ySo12REMCDHashtagC
ySo12REMCDHashtagCGG
ySSSay
ySo34REMCDSharedToMeReminderPlaceholderCG
ySo34REMCDSharedToMeReminderPlaceholderCGG
ySSSo8NSStringCG
ySo25REMDAChangeTrackingHelperCG
ySo19NSEntityDescriptionCG
ySo14CKRecordZoneIDCG
ySo11REMCDObjectCG
ySo11REMObjectIDCSgG
SS_SDySSSo8NSNumberCGt
ySS_SDySSSo8NSNumberCGtG
ySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCGG
ySo15REMCDAttachmentCG
ySo15REMCDAttachmentCGG
ySo15REMCDAttachmentCG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCGG
yySb_ShySo8NSNumberCGtcG
ySo8NSNumberCG
ySo7REMListCSDySo13REMAssignmentCSo11REMReminderCGG
ySo13REMAssignmentCG
ySo13REMAssignmentCSo11REMReminderCG
ySo30NSPersistentHistoryTransactionCG
ySo11REMObjectIDCypG
ySo12REMCDAccountCG
ySo9REMCDListCGG
ySo11REMObjectIDCSo10REMAccountCG
ySo11REMObjectIDCSo14REMListStorageCG
ySo11REMObjectIDCSo17REMAccountStorageCG
ySo15REMAlarmTriggerCG
ySo15REMCDAssignmentCG
ySo17NSManagedObjectIDCSo15REMCDAssignmentCG
ySo15REMCDAssignmentCG
ySo15REMCDAssignmentCGG
ySo15REMCDAssignmentCG
_Shy
So11REMObjectIDC_ypt
ySo13REMAssignmentCG
ySo10REMHashtagCG
ySo11REMObjectIDCSo8NSNumberCG
ySo36REMReminderFetchMetadataDueDateCountCG
ySSSaySS5title_SS4listtGG
SS5title_SS4listt
ySaySiGG
SaySiG
ySSShy
ySo17REMCDHashtagLabelCSSSgG
ySo13REMCDReminderCGG
ySo13REMCDReminderCG
ySo11REMObjectIDCSaySo13REMCDReminderCGG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
SaySo13REMCDReminderCGG
ySo25REMCDAlarmLocationTriggerCG
yS2dG
ySSSDyS2dGG
ySo9REMShareeC_G
ySo9REMShareeC_GG
ySo9REMShareeC_GG
ySo9REMShareeC_G
ySi_SitG
yS2iG
ySo11REMObjectIDCSo9CNContactCG
ySo24REMContactRepresentationCSo9CNContactCSgG
So8RDBMItemC
ySo8RDBMItemCG
ySo8RDBMItemCG
ySiG
ySay
_ypt
ySo8NSObjectCyXlG
ySo8NSStringCG
ySo14REMCDSmartListCG
ySuG
ySo8NSStringCG
ySuG
Sg_ABt
ySo11NSPredicateCG
ySo9REMCDListCG
ySSSo11REMCDShareeCG
ySo11REMCDShareeCG
_pSg
So11REMObjectIDCSg_SSt
ySo11REMObjectIDCSg_SStG
ySo24REMContactRepresentationC_
ySaySo8NSObjectCGG
SaySo8NSObjectCG
ySSSgGG
ySo13CNPhoneNumberCG
_ShySo19NSEntityDescriptionCGtG
Sg_ABt
ySo10REMHashtagCG
ySSSgG
So24REMContactRepresentationCm
SaySo11REMObjectIDCSgG
So8REMColorCm
$s7remindd10StringTypeP
So11NSPredicateCSg
So10REMHashtagC
So17REMRecurrenceRuleC
So19REMCDRecurrenceRuleC
SaySo8NSNumberCG
So15REMCDAttachmentCm
SgXw
SDySo11REMObjectIDC
_pSgIeggg_
So12REMChangeSetC
_pSgIeggg_
So22REMChangeTrackingStateCSg
_pSgIeggg_
So12NSDictionaryCSo7NSErrorCSgIeyByy_
So12REMChangeSetCSo7NSErrorCSgIeyByy_
So22REMChangeTrackingStateCSgSo7NSErrorCSgIeyByy_
SDySo11REMObjectIDCShySSGG
SayyyKcG
SDySo11REMObjectIDCSo15NSManagedObjectCG
SDySo11REMObjectIDCSDySSypGG
$s7remindd21CDAuxiliaryChangeInfoP
$s7remindd29RDTimeAlarmProducerDataSourceP
$s7remindd16RDFireDateSourceP
15dataSourceAlarm_
8fireDatetSg
15dataSourceAlarm_
8fireDatetG
SgXw
$s7remindd19RDXPCDaemonProtocolP
SgXw
SgXw
SgXwz_Xx
$s7remindd25RDCoreSuggestionsHandlingP
SaySo18REMReminderStorageCG
ySo13REMCDReminderCG24adjustedContentPredicate_
010completionD0t
SaySo11REMObjectIDCG11reminderIDs_
Sg19completedBeforeDatet
ySo11REMObjectIDC_G
6filter_
Sg19completedBeforeDatet
SaySo11REMObjectIDCG7listIDs_
Sg19completedBeforeDatet
ShySo13REMCDReminderCGSg
SaySo11REMObjectIDCG_
SgAEt
ShySo11REMObjectIDCG11reminderIDs_
13showCompletedt
SaySo11REMObjectIDCG_
6filter_
13showCompletedt
So11REMObjectIDC08reminderB0_
13showCompletedt
So11REMObjectIDC04listB0_
13showCompletedt
SaySo11REMObjectIDCG_
Sg8dueStartAE0C3Endt
SaySo11REMObjectIDCG_
19completionPredicate
09concealedD0t
SaySSSgG
So22NSManagedObjectContextCSg
SaySo12REMCDAccountCG
SaySo17REMAccountStorageCG
So14REMListStorageC
SaySo14REMListStorageCG
SaySo11REMObjectIDCG_Sbt
ySo13REMCDReminderCG_Sbt
So11REMObjectIDC04listB0_Sb17includingSubtaskst
So11REMObjectIDC04listB0_Sb17includingSubtasksSu22creationDateWithinDayst
So11REMObjectIDC04listB0_Sb20includingUnsupportedt
13showCompleted_t
ShySo11REMObjectIDCG11reminderIDs_t
SaySSG_So11REMObjectIDCSgt
So17RDStoreControllerC
So9REMShareeCSg
_So24REMContactRepresentationCtGSg
So37RDStoreControllerManagedObjectContextCSay
_So24REMContactRepresentationCtG
_pIggrzo_
ySo13REMCDReminderCGG
ySo13REMCDReminderCG_G
_pSg
15dataSourceAlarm_
8fireDatetGSg
So37RDStoreControllerManagedObjectContextCSay
15dataSourceAlarm_
8fireDatetG
_pIggrzo_
ySo17REMCDAlarmTriggerCGG
So17REMCDAlarmTriggerC
ySo17REMCDAlarmTriggerCG
ySo17REMCDAlarmTriggerCG_G
So10REMCDAlarmCSg
So12REMCDAccountCSg
So12REMCDAccountC
So9REMCDListCSg
So9REMCDListC
ytSg
So37RDStoreControllerManagedObjectContextCyt
_pIggrzo_
tGSg
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCG_G
_So8CLRegionCtG
_So8CLRegionCtGSg
So37RDStoreControllerManagedObjectContextCSay
_So8CLRegionCtG
_pIggrzo_
ySo25REMCDAlarmLocationTriggerCGG
So25REMCDAlarmLocationTriggerC
_pSg
ySo25REMCDAlarmLocationTriggerCG_G
So37RDStoreControllerManagedObjectContextCSb
_pIggrzo_
So19REMFetchResultTokenCSg
So37RDStoreControllerManagedObjectContextCSo19REMFetchResultTokenC
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
SDySSSo31REMReplicaManagerSerializedDataCGSg
So37RDStoreControllerManagedObjectContextCSDySSSo31REMReplicaManagerSerializedDataCG
_pIggrzo_
_SDySo11REMObjectIDCypGtSg
So37RDStoreControllerManagedObjectContextC
_SDySo11REMObjectIDCypGt
_pIggrzo_
So24REMStoreInvocationResultCSg
So37RDStoreControllerManagedObjectContextCSo24REMStoreInvocationResultC
_pIggrzo_
So14REMFetchResultCSg
So37RDStoreControllerManagedObjectContextCSo14REMFetchResultC
_pIggrzo_
So11REMObjectIDCSgSg
So37RDStoreControllerManagedObjectContextCSo11REMObjectIDCSg
_pIggrzo_
ySo12REMCDAccountCG
ySo12REMCDAccountCG_G
SaySSGSg
So37RDStoreControllerManagedObjectContextCSaySSG
_pIggrzo_
ySo12REMCDHashtagCG_G
ySo34REMCDSharedToMeReminderPlaceholderCG_G
SaySS_SDySSSo8NSNumberCGtGSg
So37RDStoreControllerManagedObjectContextCSaySS_SDySSSo8NSNumberCGtG
_pIggrzo_
ySo9REMCDListCG
ySo9REMCDListCG_G
SaySo17REMAccountStorageCGSg
So37RDStoreControllerManagedObjectContextCSaySo17REMAccountStorageCG
_pIggrzo_
ySay
ySay
ySo9REMShareeCG
ySo9REMShareeC_GG
SDySSSbG
$s7remindd15CDIngestableKeyP
24CDIngestableCoreDataType
36CDIngestableOrderableRelationshipKey
27CDIngestableRelationshipKey
40CDIngestableRelationshipOrderingValueKey
20CDIngestableValueKey
So21REMCalDAVNotificationC
So23REMCDCalDAVNotificationC
$s7remindd39CollectAndCoalescedOutputWithInputCountP
So19NSEntityDescriptionC
ShySo19NSEntityDescriptionCG
ySo19NSEntityDescriptionC_G
SbShy
GIegyg_
GSgXw
yxGSgXwz_
_SHRzlXX
ShySo17NSManagedObjectIDCG
ACGG
ADGG
_So17OS_os_transaction_pSgtG
AEGG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCG
y_AAy_
AEGG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
AASo17OS_os_transaction_pSgIegnro_
_So17OS_os_transaction_pSgt
So17OS_os_transaction_pSgShy
GIegngo_
ySo8NSNumberCGSgXw
yxGSgXwz_So8NSNumberC_SHRzlXX
SbShySo8NSNumberCGIegyg_
SgXw
_ShySo19NSEntityDescriptionCGtSg
So12EKEventStoreC
So18NSValueTransformerC
SaySo14CKRecordZoneIDCG
So13NSFileManagerC
_pSg
ySo14CKRecordZoneIDCSo0aB0C_G
yS2S_G
$s7remindd43RDUserInteractionSessionManagerUserDefaultsP
yyXlXpG
SaySayyXlGG
ySo8NSObjectCG
$s7remindd28RDAccountInitializerObserverP
yytGG
SayytG
_pIeggzo_
ytIegn_
So10REMAccountC
So14NSNotificationCIeyBy_
$s7remindd42RDReminderManualSortIDCacheContextDelegateP
So7NSCacheCySo11REMObjectIDC
_pSgXw
$s7remindd42RDReminderManualSortIDCacheReadOnlyContextP
$s7remindd46RDReminderManualSortIDCacheReadAndWriteContextP
So9REMShareeC
So11REMCDShareeC
yXlSgXw
yxcSg
yx_G
ySo15REMCDAssignmentCGG
So13NSMergePolicyC
SaySo15NSManagedObjectCG
$s7remindd35REMAccountsListDataViewUserDefaultsP
ySo21NSPropertyDescriptionC_G
Se_SEp
_So19REMFetchResultTokenCtSg
3key_Si5valuetSg
3key_Shy
G5valuet
3key_Si5valuet
So19REMFetchResultTokenC
$s7remindd36RDApplicationShortcutEngineInterfaceP
_pSg
_pSg
So20NSNotificationCenterC
So17REMManualOrderingC
$s7remindd26REMAttachmentRepresentableP
So16REMURLAttachmentC
So18REMCDURLAttachmentC
So18REMImageAttachmentC
So20REMCDImageAttachmentC
So17REMFileAttachmentC
So19REMCDFileAttachmentC
_pSgXw
So15NSXPCConnectionC
$s7remindd26RDClientConnectionDelegateP
So12REMXPCClient_p
So23REMXPCIndexingPerformer_pSgSo7NSErrorCSgIeyByy_
So28REMXPCSyncInterfacePerformer_pSgSo7NSErrorCSgIeyByy_
So20REMXPCStorePerformer_pSgSo7NSErrorCSgIeyByy_
So20REMXPCDebugPerformer_pSgSo7NSErrorCSgIeyByy_
So29REMXPCChangeTrackingPerformer_pSgSo7NSErrorCSgIeyByy_
ypXp
So8NRDeviceCSgSbIeyByd_
So8NRDeviceCSgSbIggd_
$s7remindd33RDApplicationShortcutListProviderP
$s7remindd41RDApplicationShortcutListProviderDelegateP
$ss12IdentifiableP
ShySo8RDBMItemCG
So21RDBMBehaviorRetrieverCSg
So7NSTimerCSg
SDySSSDyS2dGG
ySSSo8RDBMRuleCG
ySSGSg
ySo12RDBMItemTypeCG
ySd_SdtG
Sd7support_Sd10confidenceSS11descriptiont
Sd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
ySuSd7support_Sd10confidenceSS11descriptiontG
ySSSd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
So14RDBMMiningTaskC
XDXMT
_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
Sb_Sd7supportSd10confidenceSS11descriptiont
Su_Sd7supportSd10confidenceSS11descriptiont
SS_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
SDyS2dG
$s7remindd32RDVehicleAlarmProducerDataSourceP
SgXw
SgXwz_Xx
Iegg_
$s7remindd17REMCDObjectFieldsP
$s7remindd32REMCDObjectResolutionTokenFieldsP
$s7remindd17REMCRSerializableP
So13CKRecordValue_pSg
ySo16CSSearchableItemCG
So14REMSaveRequestCSg
$s7remindd20RDReminderDataCopierP
SS3key_
5valuet
$s7remindd53RDDynamicSignificantTimeNotificationEngineEventSetterP
$s7remindd10CDFetchingP
SaySo28REMNullableObjectIDProviding_pG
$s7remindd25RDLocationManagerDelegateP
$s7remindd21RDLocationManagerTypeP
_pSgXw
So17CLLocationManagerCSg
So8CLRegionC
$s7remindd28RDAccountPropertiesObservingP
$s7remindd20ObservingAccountInfoP
So28RDAccountPropertiesObserving_pG
_pSg
GSo17OS_dispatch_queueCG
So28RDAccountPropertiesObserving_p
XDXMT
ySSG
ySSG
$s7remindd28RDUserNotificationPresentingP
$s7remindd32RDUserNotificationCenterDelegateP
_pSgXw
So24UNUserNotificationCenterC
SaySo14UNNotificationCGIegg_
SaySo14UNNotificationCG
So28UNMutableNotificationContentC
SaySo17NSManagedObjectIDCG
Si_SNy
ySo13REMCDReminderCSo9REMCDListCSgGG
SaySo13REMCDReminderCGG
So19REMCDReplicaManagerC
SaySo19REMCDReplicaManagerCG
So31REMReplicaManagerSerializedDataC
So17OS_dispatch_queueCGG
ShySo11REMCDShareeCGSg
So13DATransactionCSg
So27DADREMShareResponseDelegateC
SaySSG10accountIDs_t
SS11calendarURL_SS9accountIDy
_pSgc10completiont
So20ICCloudConfigurationC
So21REMDaemonUserDefaultsC
So7NSErrorCSgIeyByy_
_pSgIegyg_
AASo7NSErrorCSgIeyByyy_
_pSgIegyyg_
SaySo14INPersonHandleCG
_pSgSbIeggy_
So7CKShareCSgSo7NSErrorCSgIeyByy_
So7CKShareCSg
_pSgIeggg_
So25ICCollaborationControllerC
SaySo19REMSmartListStorageCG
ySo11REMObjectIDCSo31REMReplicaManagerSerializedDataC_G
SaySo14REMCDSmartListCG
SaySo23REMCDCalDAVNotificationCG
So24REMStoreInvocationResultCSgSo7NSErrorCSgIeyByy_
_pSg
_pSg
So15REMFetchRequestC
SaySo18REMCDURLAttachmentCG
SaySo20REMCDImageAttachmentCG
SaySo19REMCDFileAttachmentCG
SaySo29REMCDAlarmTimeIntervalTriggerCG
SaySo21REMCDAlarmDateTriggerCG
SaySo25REMCDAlarmLocationTriggerCG
SaySo24REMCDAlarmVehicleTriggerCG
ShySSSgG
$s7remindd24RDSyncPollerUserDefaultsP
$s7remindd25RDSyncPollerConfigurationP
SgXw
ySo17REMCDHashtagLabelCSSSgGG
SayxG
SDyxSayxGG
SDyxq_G
SDyq_SdG
Shyq_G
$s7remindd41RDICCloudConfigurationUpdaterUserDefaultsP
So32ICCloudConfigurationDownloadable_p
SgXw
_pIegzo_
SaySsG
$s7remindd33RDLocationAlarmProducerDataSourceP
$s7remindd16RDCLRegionSourceP
7remindd20ObservingAccountInfo_p
ySo6NSDataCc
ySo7NSErrorCc
ySo6NSDataC
So6NSDataCIeyBy_
So7NSErrorCIeyBy_
ySo6NSDataC
GSo17OS_dispatch_queueCG
So6NSDataCIegg_
So7NSErrorCIegg_
XDXMT
ySo6NSDataC
GIegg_
SgXw
$s7remindd30RDManualSortIDHashKeyProvidingP
SdSg
SgXw
SgXwz_Xx
So13OS_xpc_object_p
Iegy_
_pIegyzo_
SaySo30NSPersistentHistoryTransactionCG
So21DADBuddyStateObserverCSgz_Xx
So21DADBuddyStateObserverCXDXMT
GIegy_Iegg_
GIegn_
So21DADBuddyStateObserverC
GIegy_
So28DADSystemAvailabilityCheckerCXDXMT
So17NSPersistentStoreC
So22NSManagedObjectContextC
So17RDStoreControllerCSgXwz_Xx
XDXMT
yxq_G
So7NSCacheCyxq_G
$s7remindd22RDCacheReadOnlyContextP
$s7remindd26RDCacheReadAndWriteContextP
So19NSMutableOrderedSetCSgSg
SaySo12NSDictionaryCG
SaySDySS
$s7remindd16RDDaemonProtocolP
ShySo11REMCDShareeCG
ShySo23REMCDCalDAVNotificationCG
S2bSaySSG
_pSgIegyygg_
SuSgIegy_
SuSg
SuSgz_Xx
SaySo16NSSortDescriptorCG
So17REMCDAlarmTriggerCm
SDySSSiG
SS_SDySSSo8NSNumberCGtSg
$s7remindd49RDSuggestedAttributesAutoTrainerPersistentStorageP
SgXw
$s7remindd11RDInvocableP
$s7remindd26RDStoreControllerInvocableP
$s7remindd27AnyRDSwiftInvocableProtocolP
SDySSShy
y_SiG
So18REMResolutionTokenCSg
ShySo8NSStringCG
ySo8NSStringC_G
So24REMCRMergeableOrderedSetC
$s7remindd30RDClientAccessLevelTruthSourceP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
SDySSSDySSypGG
ySSSo18REMResolutionTokenCSgG
3key_yp5valuetSg
So11REMReminderC_
Ieg_Sg
SgXw
$s7remindd16RDAlarmProducingP
$s7remindd16RDAlarmConsumingP
$s7remindd23RDAlarmProducerDelegateP
SgXw
So8REMAlarmC_SSSgt
ySo14REMCDSmartListCG_So15NSManagedObjectCtG
ySo14REMCDSmartListCG_ACtG
ySo11REMCDObjectCG_So15NSManagedObjectCtG
ySo11REMCDObjectCG_ACtG
ySo13REMCDReminderCG_So15NSManagedObjectCtG
ySo13REMCDReminderCG_ACtG
ySo9REMCDListCG_So15NSManagedObjectCtG
ySo9REMCDListCG_ACtG
ySo11REMCDShareeCG_So15NSManagedObjectCtG
ySo11REMCDShareeCG_ACtG
SaySo21REMCalDAVNotificationCG
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCtG
ySo23REMCDCalDAVNotificationCG_ACtG
ySo12REMCDAccountCG_So15NSManagedObjectCtG
ySo12REMCDAccountCG_ACtG
SaySo8REMAlarmCG
ySo10REMCDAlarmCG_So15NSManagedObjectCtG
ySo10REMCDAlarmCG_ACtG
ySo15REMCDAssignmentCG_So15NSManagedObjectCtG
ySo15REMCDAssignmentCG_ACtG
SaySo16REMURLAttachmentCG
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCtG
ySo18REMCDURLAttachmentCG_ACtG
SaySo18REMImageAttachmentCG
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCtG
ySo20REMCDImageAttachmentCG_ACtG
SaySo17REMFileAttachmentCG
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCtG
ySo19REMCDFileAttachmentCG_ACtG
SaySo10REMHashtagCG
ySo12REMCDHashtagCG_So15NSManagedObjectCtG
ySo12REMCDHashtagCG_ACtG
SaySo17REMRecurrenceRuleCG
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCtG
ySo19REMCDRecurrenceRuleCG_ACtG
SaySo17REMManualOrderingCG
G_So15NSManagedObjectCtG
G_ABtG
SaySo27REMAlarmTimeIntervalTriggerCG
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCtG
ySo29REMCDAlarmTimeIntervalTriggerCG_ACtG
SaySo19REMAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCtG
ySo21REMCDAlarmDateTriggerCG_ACtG
SaySo23REMAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCtG
ySo25REMCDAlarmLocationTriggerCG_ACtG
SaySo22REMAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCtG
ySo24REMCDAlarmVehicleTriggerCG_ACtG
So32DADREMUserNotificationPresenting_p
So20DADREMLocalDBWatcherCSgXw
So7DADMainCSg
ySS_SStG
_pSgIegng_
$s15InvernessClient10HTTPClientP
SS7message_t
SS4line_t
SS3url_t
SS7message_
6toWrapt
q_Sg
_pSgIegng_
ySo13CKRequestInfoCSgcSg
_pSgIeggg_
$s15InvernessClient9InvocableP
_p5error_t
SSSg
_pSgIeggg_
SDySSypGSg
_pSgIeggg_
$s13SwiftProtobuf14ExtensionFieldP
Say8BaseType
$s13SwiftProtobuf17AnyExtensionFieldP
8RawValueSYQz
$s13SwiftProtobuf16SelectiveVisitorP
ySRy
ySJG
ySbG
ySfG
$s13SwiftProtobuf19_ProtoNameProvidingP
$s13SwiftProtobuf12ExtensionMapP
$s13SwiftProtobuf7MessageP
$s13SwiftProtobuf26_MessageImplementationBaseP
$ss25ExpressibleByFloatLiteralP
SaySJG
_pXpSg
_pSg
Si3key_
_p5valuetSg
SDySi
$s13SwiftProtobuf7DecoderP
$s13SwiftProtobuf19AnyMessageExtensionP
_pXp
_pSg
_pXmT
ySS_
_pXptG
$s13SwiftProtobuf9FieldTypeP
8BaseType
$s13SwiftProtobuf10MapKeyTypeP
$s13SwiftProtobuf12MapValueTypeP
$s13SwiftProtobuf7VisitorP
$s13SwiftProtobuf18_CustomJSONCodableP
_pXmTSg
_pSg
$s13SwiftProtobuf4EnumP
$s13SwiftProtobuf17ExtensibleMessageP
SDySi
ySi_
SDySiSay
_pGG
ySiSay
_pGG
_pSg
$ss30ExpressibleByDictionaryLiteralP
SaySRy
SDySi
5proto_t
5proto_AA4jsont
5proto_SayAAG7aliasest
SDySS
_pXpG
_pSg
_pSg
_os_unfair_lock_opaque
RawValue
_rawValue
location
length
_ObjectiveCType
RawValue
AllCases
unknownFields
_storage
archivePath
credential
embeddedTestData
dsID
baseURL
hostname
mmeAuthToken
partition
success
error
timeElapsed
isObserver
listsMigrated
remindersMigrated
message
retryCount
user
UNRECOGNIZED
none
dryRun
disableSharing
saveOriginalJson
userInitiated
noCleanup
defined
isTerminated
nextInvocationInSeconds
invocationCount
failureCount
options
result
invocable
_source
_disableCache
_state
_result
_log
_options
_userInitiated
_simulatedError
_nextStep
_logs
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
reminder
status
AllCases
RawValue
accountID
rem_accountObjectID
accountDescription
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
queue
userNotificationCenter
storeControllerNotificationCenter
daemonController
manualTestRun
storeControllerObservationToken
started
currentUserShareParticipantIDsOverrideByListID
windowSize
thresholdForNewWindow
averageInterval
numOfSamples
measurements
lastFire
queue
handler
debouncingPolicy
loadFactor
label
isEnabled
pendingWorkItem
pendingValues
pendingCompletionBlocks
coalescedUpdates
debouncer
interval
debounceFirstFire
constant
loadFunction
setPersonIDAuthor
storeController
delegate
personIDSaltObserver
pendingSystemAvailable
bootstrapCancellables
storeControllerEventCancellables
systemAvailabilityCheckerBlockingQueue
appleAccountUtilities
notSupported
missingKey
invalidData
RawValue
storeController
storeContainerToken
notificationCenter
locationManager
xpcDaemon
storeControllerByContainerURL
manualHashtagLabelUpdater
xpcListener
xpcListenerUserInteractive
xpcDaemon
listenerQueue
clientConnections
queue
storeController
discretionaryCloudKitThrottler
cloudKitThrottler
dataAccessThrottler
dataAccessRequestsWriter
storeProvider
clientIdentity
clientConnection
objectID
acknowledgedDate
alarmUID
originalAlarmUID
reminder
triggerID
AllCases
RawValue
accountID
alarmID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
timeInterval
dateComponents
structuredLocation
proximity
event
AllCases
RawValue
remindd
xctest
badgeEmblem
color
filterData
name
parentAccount
parentList
showingLargeAttachments
smartListType
sortingStyle
AllCases
RawValue
dicts
arrays
processingQueue
storeController
daemonController
timeGroupingStrategy
delegate
started
cloudAccountsDidChangeCancellable
hashtagInsertEventCancellables
highPrioritySubscriptionTransactionRegistrar
lowPrioritySubscriptionTransactionRegistrar
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
changeTrackingClientName
accountID
rem_accountObjectID
accountDescription
persistentStore
objectIdentifier
hashtagName
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
trigger
acknowledgedDate
alarmUID
originalAlarmUID
AllCases
RawValue
hashKeyProvider
cache
identifier
dispatchQueue
delegate
requestChannelReader
pendingRequests
primaryCKAccountID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
parentAccountID
parentListID
objectID
minimumSupportedVersion
smartListType
sortingStyle
manualOrdering
name
color
badgeEmblem
filterData
showingLargeAttachments
AllCases
RawValue
managedObjectContext
creationDate
name
reminder
sharedToMeReminderCKIdentifier
type
AllCases
RawValue
queue
configurationSource
cancellables
cachedList
cachedEditingSessionID
storePerformer
cachedMLModels
cachedContacts
contactStore
cloudTrainingOverridesSource
localTrainingOverridesSource
cloudHarvestingOverridesSource
localHarvestingOverridesSource
embeddingResult
sentenceEmbeddingModelResult
intentionalWordModelResult
coreBehaviorModelResult
coreSuggestionHandler
queue
started
alarmHandlers
eventInterface
token
name
body
uuid
userVisible
date
Performer
storeController
clientIdentity
salt
timezone
options
embeddingsURL
reminderTitleEmbeddings
accounts
systemLanguage
systemTimeZoneName
systemTimeZoneOffset
creationDate
creationDayOfWeek
completionDayOfWeek
dueDayOfWeek
displayDayOfWeek
titleSaltedHash
titleFuzzedEmbeddings
sentence2Vec
universalGrammar
filteredStopWords
title
displayDate
completionDate
alarmDates
isFlagged
priority
locationAlarmIdentifier
locationAlarmProximity
recurrenceDescription
attachmentUTIs
hasRemindMeWhenMessaging
isParentTask
isSubtask
hasUserActivity
embeddings
revision
language
isShared
isGroup
reminders
date
type
lists
eventHandler
notificationName
notifyToken
significantTimeChangeNotification
mobileKeyBagFirstUnlockNotification
RawValue
dataSource
delegate
queue
userInteractionSessionManager
shouldNotifyOfInteractionWithPeopleNotifyToken
shouldNotifyOfInteractionWithPeople
firstUnlock
unlock
notificationCenter
queue
beforeFirstUnlockNotificationEngine
daemonController
clientIdentity
doNothing
notificationCenterOnly
showBanner
storeController
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
listID
parentReminderID
subtaskIDsToUndelete
hashtagIDsToUndelete
siriFoundInAppsUserConfirmation
objectID
daCalendarItemUniqueIdentifier
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
minimumSupportedVersion
titleDocumentData
titleDocument
completed
completionDate
priority
flagged
creationDate
lastModifiedDate
recurrenceRules
startDateComponents
dueDateComponents
timeZone
allDay
notesDocumentData
notesDocument
attachments
alarms
assignments
hashtags
contactHandles
icsDisplayOrder
icsUrl
importedICSData
userActivity
siriFoundInAppsData
lastBannerPresentationDate
primaryLocaleInferredFromLastUsedKeyboard
AllCases
RawValue
separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
separatorInConcatenatedElementIDsWithLocalElementIDPrefix
predefinedSmartList
customSmartList
tagged
AllCases
RawValue
Performer
list
title
count
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
listIDsMergeableOrdering
listsDADisplayOrderChanged
lists
listIDsToUndelete
smartListIDsToUndelete
objectID
type
name
markedForRemoval
personID
personIDSalt
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
persistenceCloudSchemaVersion
inactive
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daConstraintsDescriptionPath
daAllowsCalendarAddDeleteModify
daSupportsSharedCalendars
daWasMigrated
minimumSupportedVersion
AllCases
RawValue
queue
notificationCenter
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
assigneeID
originatorID
assignedDate
objectID
status
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
AllCases
RawValue
storeController
accountID
state
completionHandlers
lock
migrationResult
invocationCount
failureCount
isTerminated
stateRestored
dismissed
disableCache
waitingForReachability
wasUserInitiated
idle
active
completed
failed
RawValue
queue
$__lazy_storage_$_wordTokenizer
clientConnection
applicationShortcutLists
delegate
queue
storeControllerNotificationCenter
storeControllerObservationToken
preferredDefaultListIDObservationToken
store
isStarted
badgeEmblem
color
isGroup
lastUserAccessDate
name
parentAccount
parentList
reminderIDsMergeableOrdering
reminderIDsMergeableOrderingAsset
reminderIDs
reminderIDsAsset
sortingStyle
AllCases
RawValue
alarmIDs
allDay
attachmentIDs
assignmentIDs
completed
completionDate
contactHandles
creationDate
dueDate
flagged
hashtagIDs
icsUrl
importedICSData
lastModifiedDate
list
notesDocument
notesDocumentAsset
parentReminder
priority
recurrenceRuleIDs
startDate
timeZone
titleDocument
titleDocumentAsset
userActivity
AllCases
RawValue
predicate
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
creationDate
name
objectID
type
AllCases
RawValue
queue
name
xpcEventStream
xpcEventStreamToken
eventHandler
rawValue
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
dayOfTheWeek
weekNumber
accountID
reminderID
objectID
recurrenceEnd
frequency
interval
firstDayOfTheWeek
daysOfTheWeek
daysOfTheMonth
daysOfTheYear
weeksOfTheYear
monthsOfTheYear
setPositions
AllCases
RawValue
reminder
AllCases
RawValue
height
width
fileName
fileSize
metadata
metadataAsset
lock
alreadyPosted
Performer
queue
storeControllerNotificationCenter
storeControllerNotificationCenterToken
widgetRefresh
implementation
applyCRDTsWithoutMerging
noSideEffectChanges
clientIdentity
differentialPrivacyRecorder
changedKeys
storeController
managedObjectContext
mode
syncToCloudKit
upsertBlocks
establishRelationshipBlocks
mutateRelationshipOrderingBlocks
afterSaveActionBlocks
fetchedObjectsMap
insertedObjectsMap
cdChangedValuesMap
queue
timeEventStream
dataSource
beforeFirstUnlockNotificationEngine
started
delegate
daemon
storeController
debugPerformer
syncInterfacePerformerFactory
dataAccessRequestsWriter
indexingPerformer
contactInteractionWriter
coreSuggestionsHandler
service
generic_fetchByObjectIDs
generic_fetchByPredicate
generic_fetchByList
generic_fetchByParentReminderIDs
generic_fetchByObjectIDsDue
export_fetchByList
remindersList_fetchAll
remindersList_fetchParentsOnly
remindersList_fetchSubtasks
smartListScheduled
smartListFlagged
smartListToday
smartListAllReminders
customSmartList_fetchAll
searchResults
searchResults_fetchOnlyCompleted
tagged
tagged_fetchAll
dataaccess_fetchByExternalIdentifiers
dataaccess_fetchByDACalendarItemUniqueIdentifiers
tipKit_fetchCompletedRemindersInList
eventKitBridging_fetchRemindersInLists
eventKitBridging_fetchIncompleteRemindersInLists
eventKitBridging_fetchCompletedRemindersInLists
withDateAlarmsCountExceeding
siriSearch
analytics_fetchAllRemindersInAccount
analytics_fetchAllIncompleteRemindersInAccount
analytics_fetchAllFlaggedRemindersInAccount
analytics_fetchRemindersWithSubtasksInAccount
batchDeleteCompleted
customSmartList_batchDeleteCompleted
reminders_batchDeleteCompleted
smartListScheduled_fetchOnlyCompleted
smartListFlagged_fetchAll
smartListToday_fetchOnlyCompleted
smartListToday_filterNearby
smartListAllReminders_fetchOnlyCompleted
smartListSiriFoundInApps
accountsList_allIncompleteReminders
spotlightIndexing_isEligible
complication
tipKit_fetchAllUncompletedReminders
tipKit_fetchAllCompletedReminders
alarmEngine_containingContactHandles
todayNotificationEngine_todayNotification
performance_dynamicSignificantTimeNotificationEngine
suggestedAttributes_all
suggestedAttributes_hasRecurrenceRules
debug_65046250_fetchPhantomReminders
incompleteOrCompletedAfter
completedBeforeOrOn
incompleteOrCompletedObjectIDs
incomplete
completed
notSpecified
excludeConcealed
includeConcealed
excludeConcealedExceptUnsupported
isUnsupported
list
parentReminder
alarmStorage
attachments
recurrenceRules
assignments
hashtags
AllCases
RawValue
queue
daemonController
storeController
debug_currentUserSharee
clientIdentity
Performer
endDate
frequency
interval
occurrenceCount
setPositions
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
firstDayOfTheWeek
monthsOfTheYear
weeksOfTheYear
reminder
AllCases
RawValue
nonExistentValue
nonExistentRelationship
AllCases
RawValue
accountID
listID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
uuidString
hostURL
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
AllCases
RawValue
storeController
label
lock
observers
debouncer
uuid
token
observeOption
queue
handler
entityDescription
qualityOfService
output
inputCount
allowedEntityNames
allREMCDObjects
Output
store
userDefaults
store
storeController
handler
queue
accountManualSortIDByAccountIDCache
reminderManualSortIDByReminderIDCache
delegate
accountID
listID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
displayName
firstName
middleName
lastName
namePrefix
nameSuffix
nickname
address
status
accessLevel
AllCases
RawValue
name
counter
osTransaction
lock
identifier
queue
target
eventHandler
reader
Performer
modelObject
listAndGroup
smartList
reminderCounts
token
queue
listProvider
shortcutUpdater
listType
accountID
notificationCenter
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
modifiedDate
AllCases
RawValue
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
reminderID
objectID
fileSize
fileURL
isTemporaryFileURL
width
height
metadata
AllCases
RawValue
delegate
clientIdentity
xpcDaemon
xpcConnection
notificationSubscriptionQueue
keepAliveTransaction
cancellables
allowedOperationsCount
throttleInterval
identifier
queue
throttleResetDate
currentIntervalAllowedOperationsCount
baseUrl
behaviorRetriever
trained
confidenceThreshold
timer
feedbackVersion
feedbackForRules
rules
trainingDataFrame
intentWords
metrics
minedRuleCount
filteredOutRulesCount
minRelativeSupport
completed
version
contact
listId
dueDayOfWeek
alarmLocation
titleIntent
isWeekend
flagged
priority
dayOfWeek
hourOfDay
listID
queue
dataSource
delegate
connectedToken
disconnectedToken
started
minimumSupportedVersion
AllCases
RawValue
cancellables
storeController
remindersBatchSize
accountDataMoverSaveRequestAuthorString
store
statistics
excludeSharedToMeLists
potentialDenylistItemIDs
_useSourceObjectIDAsExternalID
_copyListSharingStatus
currentSaveRequest
listsChanged
remindersChanged
queue
storeController
xpcEventSetter
currentStatus
queue
delegate
q_locationManager
names
value
range
lock
l_observers
l_cancellables
eTag
hintDataExcludingRemindersInLocalAccountAsAsset
hintDataExcludingRemindersInLocalAccountAsBytes
hintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
hintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
lastAccessed
listID
listType
serializationVersion
AllCases
RawValue
queue
reminderAlarmDelegate
beforeFirstUnlockReminderDelegate
assignmentNotificationDelegate
notificationCenter
ckContainerID
localUUID
accountType
Performer
identifier
ckServerShareData
manualWithSortHint
displayDate
priority
creationDate
title
manual
name
color
latitude
longitude
radius
locationUID
AllCases
RawValue
accountID
bundleID
serializedData
cacheQueue
cacheContext
accountChangesSubscription
xpcDaemon
clientIdentity
storeContainerToken
updateContentsOfAllFolders
acceptCalDAVShare
rejectCalDAVShare
storeController
clientIdentity
storeProvider
dataAccessRequestsWriter
contactInteractionWriter
coreSuggestionsHandler
queue
userDefaults
pollBlock
eventStream
configuration
Performer
Performer
missingContainerForTopLevelElement
missingLastModifiedForContainer
topLevelElements
secondaryLevelElementsByTopLevelElement
containerByTopLevelElement
lastModifiedByContainer
containers
downloadableCloudConfiguration
queue
userDefaults
xpcActivity
isUnitTest
queue
delegate
locationManager
dataSource
uuid
account
callbackQueue
successHandler
errorHandler
propertyName
currentValueSubject
cancellables
objectID
type
initialNilValue
invalid
unexpectedNilValue
accountAbsent
hashKeyForManualSortID
cdAccount
identifier
shouldDefer
asyncHandler
l_pendingCriteria
lock
SuggestedAttributesAutoTrainer
ICCloudConfigurationUpdater
UnitTests
complete
pendingWork
noWork
error
intervalInfo
priority
allowBattery
requireScreenSleep
shouldWakeDevice
expectedDuration
isCPUIntensive
isMemoryIntensive
isDiskIntensive
mayRebootDevice
requireSignificantUserInactivity
requireNetworkConnectivity
requireInexpensiveNetworkConnectivity
powerNap
communicatesWithPairedDevice
desiredMotionState
requiredProtectionClasses
AllCases
RawValue
interval
repeating
delay
gracePeriod
maintenance
utility
stationary
walking
running
cycling
automotive
automotiveMoving
automotiveStationary
classA
classB
classC
storeController
significantTimeNotificationStream
cacheQueue
cacheContext
cacheImplementation
KeyType
ObjectType
Performer
orderingByListID
listsWithOrdering
orderingChanged
needsSortReminders
data
$__lazy_storage_$_orderedSet
xpcDaemon
xpcClientConnectionListener
accountStoresRemovalEventHandler
alarmEngine
todayEngine
assignmentNotificationEngine
hashtagLabelUpdater
applicationShortcutEngine
coreSuggestionController
suggestedAttributesAutoTrainer
widgetRefresh
cloudConfigurationUpdater
manualSortHintUpdater
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
reminderIDsMergeableOrdering
remindersICSDisplayOrderChanged
reminders
accountID
childListIDsToUndelete
childSmartListIDsToUndelete
parentAccountID
parentListID
reminderIDsToUndelete
sharedOwnerID
objectID
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daExternalIdentificationTag
daBulkRequests
daDisplayOrder
daIsEventOnlyContainer
daIsReadOnly
daIsImmutable
daIsNotificationsCollection
minimumSupportedVersion
isGroup
lastUserAccessDate
name
color
badgeEmblem
showingLargeAttachments
reminderIDsMergeableOrderingData
reminderIDsOrderingHints
sharedOwnerName
sharedOwnerAddress
sharingStatus
sharees
calDAVNotifications
sortingStyle
AllCases
RawValue
xpcDaemon
storeController
storeContainerToken
store
objectID
didChooseToMigrate
didFinishMigration
identifier
name
type
active
delete
RawValue
smartListAssigned
smartListAssigned_fetchOnlyCompleted
identifier
status
ckAssigneeIdentifier
assignedDate
AllCases
RawValue
address
contactLabel
latitude
locationUID
longitude
mapKitHandle
proximity
radius
referenceFrameString
routing
title
AllCases
RawValue
q_fetchCounts
q_saveCounts
q_postEventWorkItem
enabled
queue
storeControllerReadWriteEventName
queue
storeControllerNotificationCenter
store
persistentStorage
storeControllerObserverToken
xpcActivity
started
didChooseToMigrate
didFinishMigration
listIDsMergeableOrdering
listIDsMergeableOrderingAsset
personIDSalt
sharedListIDsToOwnerNames
AllCases
RawValue
rawValue
ArrayLiteralElement
RawValue
Element
queue
bannerTimeEventStream
badgeEventStream
userNotificationCenter
storeControllerNotificationCenter
daemonController
dynamicSignificantTimeNotificationEngine
storeControllerObservationToken
started
todayNotificationTimeObserver
Performer
ckElementID
localUUID
accountID
hashKeyProvider
producers
consumers
queue
storeControllerNotificationCenter
storeControllerNotificationCenterToken
beforeFirstUnlockNotificationEngine
daemonController
started
temporal
location
vehicle
peopleInteraction
reminder
origin
type
firesBeforeFirstUnlock
alarm
active
passive
queue
storeController
mode
dataAccessRequestsQueue
remStoreProvider
userNotificationCenterProvider
storeControllerNotificationCenter
storeControllerNotificationCenterToken
rdDaemonController
storeController
userNotificationCenter
containerName
databaseType
apiToken
localServer
unknown
badHeaderLine
badURL
badRequest
badResponse
serverError
wrapped
RawValue
functionTimeout
functionError
internalError
unknownFields
_storage
push
database
sandbox
production
privateDatabase
publicDatabase
sharedDatabase
orgDatabase
_host
_port
_useTls
_corporateSharingEnabled
_userID
_containerName
_databaseEnvironment
_databaseType
_deviceID
_applicationBundleID
_databasePartition
_clientInfo
_dsid
_userAgent
_code
_message
_path
_environment
_success
_serviceName
_functionName
_serializedParameters
_serializationFormat
_clientConfig
_accountConfig
_requestContext
_serviceType
_config
_serializedResult
_error
invokeOperationFailedInitialization
invokeResponseMissing
invokeArgumentContainsUnattachedAssets
RawValue
unknownFields
_storage
_name
_environment
_version
_dsid
_ckUserID
privateDb
publicDb
sharedDb
_container
_database
_databasePartition
_owner
_user
_deviceID
_applicationBundleID
_synchronousMode
RawValue
proto
json
publicDatabase
privateDatabase
organizationDatabase
serviceName
containerName
databaseType
qualityOfService
sourceApplicationBundleIdentifier
requestCompletedBlock
RawValue
credentials
baseURL
signingError
notImplemented
httpError
unexpectedResponse
invalidContainerName
invalidDatabaseType
invalidURL
development
production
parseError
missingResult
fromErrorProtocol
noResponse
apiToken
webAuthToken
data
indentString
ValueType
value
protobufExtension
alwaysPrintEnumsAsInts
trailingGarbage
truncated
invalidUTF8
malformedProtobuf
missingRequiredFields
internalExtensionError
messageDepthLimit
source
index
numberFormatter
recursionLimit
recursionBudget
ignoreUnknownFields
messageDepthLimit
discardUnknownFields
seconds
nanos
unknownFields
anyTranscodeFailure
timestampRange
durationRange
fieldMaskConversion
missingFieldNames
missingValue
data
unknownField
failure
malformedNumber
numberRange
malformedMap
malformedBool
malformedString
invalidUTF8
missingFieldNames
schemaMismatch
unrecognizedEnumValue
illegalNull
unquotedMapKey
leadingZero
truncated
malformedDuration
malformedTimestamp
malformedFieldMask
trailingGarbage
conflictingOneOf
messageDepthLimit
scanner
options
fieldCount
isMapKey
fieldNameMap
RawValue
AllCases
UNRECOGNIZED
proto2
proto3
unknownFields
_storage
kind
cardinality
number
name
typeURL
oneofIndex
packed
options
jsonName
defaultValue
typeUnknown
typeDouble
typeFloat
typeInt64
typeUint64
typeInt32
typeFixed64
typeFixed32
typeBool
typeString
typeGroup
typeMessage
typeBytes
typeUint32
typeEnum
typeSfixed32
typeSfixed64
typeSint32
typeSint64
unknown
optional
required
repeated
_name
_fields
_oneofs
_options
_sourceContext
_syntax
_enumvalue
_value
doubleFormatString
work
unknownFields
separator
encoder
options
messageDepthLimit
ignoreUnknownFields
FloatLiteralType
encoder
typeMismatch
malformedWellKnownTypeJSON
malformedAnyField
scanner
fieldCount
terminator
fieldNameMap
messageType
varint
fixed64
lengthDelimited
startGroup
endGroup
fixed32
RawValue
values
fieldNumber
fieldName
messageType
value
unknownFields
available
fieldStartP
fieldEndP
consumed
fieldWireFormat
fieldNumber
extensions
groupFieldNumber
options
recursionBudget
unknownData
unknownOverride
malformedText
malformedNumber
trailingGarbage
truncated
invalidUTF8
schemaMismatch
missingFieldNames
unknownField
unrecognizedEnumValue
conflictingOneOf
internalExtensionError
hasher
anyTranscodeFailure
missingRequiredFields
BaseType
seconds
nanos
unknownFields
fileName
unknownFields
unknownFields
_storage
name
requestTypeURL
requestStreaming
responseTypeURL
responseStreaming
options
syntax
root
_name
_methods
_options
_version
_sourceContext
_mixins
_syntax
data
separator
doubleFormatter
_typeURL
state
binary
message
contentJSON
encoder
nameMap
options
paths
unknownFields
extensions
doubleFormatter
encoder
nameMap
nameResolver
extensions
ArrayLiteralElement
fields
serializedSize
Value
interned
internPool
numberToNameMap
protoToNumberMap
jsonToNumberMap
same
standard
unique
aliased
json
proto
utf8Buffer
nameString
string
staticString
RawValue
AllCases
UNRECOGNIZED
nullValue
fields
unknownFields
_storage
numberValue
stringValue
boolValue
structValue
listValue
values
_kind
pointer
unknownFields
_storage
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241115</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDisplayName</key>
<string>Reminders</string>
<key>CFBundleIdentifier</key>
<string>com.apple.remindd</string>
<key>CFBundleName</key>
<string>remindd</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>WatchSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>490</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>19R339</string>
<key>DTPlatformName</key>
<string>watchsimulator</string>
<key>DTPlatformVersion</key>
<string>8.0</string>
<key>DTSDKBuild</key>
<string>19R339</string>
<key>DTSDKName</key>
<string>watchsimulator8.0.internal</string>
<key>DTXcode</key>
<string>1300</string>
<key>DTXcodeBuild</key>
<string>13A191</string>
<key>MinimumOSVersion</key>
<string>8.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>4</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.remindd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>data-allowed-write</string>
<string>spi</string>
</array>
<key>com.apple.CoreRoutine.LocationOfInterest</key>
<true/>
<key>com.apple.application-identifier</key>
<string>com.apple.remindd</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.chronoservices</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.aps-environment</key>
<string>production</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.reminders</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<string></string>
<key>com.apple.locationd.effective_bundle</key>
<true/>
<key>com.apple.locationd.region_proxy_service</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.private.CacheDelete</key>
<array>
<string>PURGE_ENTITLEMENT</string>
<string>CLIENT_ENTITLEMENT</string>
</array>
<key>com.apple.private.DistributedEvaluation.RecordAccess-com.apple.reminders.des</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.calendar.changeIdTrackingOverride</key>
<true/>
<key>com.apple.private.calendar.syncclient</key>
<true/>
<key>com.apple.private.canGetAppLinkInfo</key>
<true/>
<key>com.apple.private.cloudkit.customAccounts</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.setEnvironment</key>
<true/>
<key>com.apple.private.cloudkit.spi</key>
<true/>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.corespotlight.internal</key>
<true/>
<key>com.apple.private.dark-wake-push</key>
<true/>
<key>com.apple.private.dprivacyd.allow</key>
<true/>
<key>com.apple.private.kernel.override-cpumon</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.push-to-wake</key>
<true/>
<key>com.apple.private.secure-apsclientv2</key>
<true/>
<key>com.apple.private.suggestions.reminders</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceCalendar</string>
<string>kTCCServiceAddressBook</string>
</array>
<key>com.apple.private.tcc.manager</key>
<true/>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.reminders</string>
<string>com.apple.NanoReminders</string>
</array>
<key>com.apple.private.xpc.domain-extension</key>
<true/>
<key>com.apple.security.application-groups</key>
<array>
<string>group.com.apple.reminders</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/usr/libexec</string>
<string>/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.lsd.iconscache/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array/>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<array>
<string>Library/Caches/com.apple.itunesstored/url-resolution.plist</string>
<string>Library/Caches/com.apple.AppleAccount/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>Library/Reminders/</string>
<string>Library/Caches/com.apple.remindd/</string>
<string>Library/Logs/CrashReporter/Reminders/</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.iconservices</string>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.siri-distributed-evaluation</string>
<string>com.apple.suggestd.reminders</string>
<string>com.apple.remindd</string>
<string>com.apple.cloudd</string>
<string>com.apple.apsd</string>
<string>com.apple.usernotifications.usernotificationservice</string>
<string>com.apple.analyticsd</string>
<string>com.apple.spotlight.IndexAgent</string>
<string>com.apple.managedconfiguration.profiled</string>
<string>com.apple.frontboard.systemappservices</string>
<string>com.apple.appconduitd.device-connection</string>
<string>com.apple.contactsd</string>
<string>com.apple.routined.registration</string>
<string>com.apple.mobileactivationd</string>
<string>com.apple.chronoservices</string>
<string>com.apple.cache_delete</string>
<string>com.apple.cache_delete.public</string>
<string>com.apple.SBUserNotification</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.UIKit</string>
<string>com.apple.nanobuddy</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.purplebuddy</string>
<string>com.apple.DataAccess.BehaviorOptions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.remindd.babysitter</string>
<string>com.apple.remindd</string>
<string>group.com.apple.reminders</string>
<string>com.apple.persistentconnection-mcc</string>
</array>
<key>com.apple.security.exception.sysctl.read-only</key>
<array>
<string>hw.perflevel0.physicalcpu_max</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
<array>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.routined.registration</string>
<string>com.apple.siri-distributed-evaluation</string>
<string>com.apple.suggestd.reminders</string>
<string>com.apple.cloudd</string>
<string>com.apple.apsd</string>
<string>com.apple.analyticsd</string>
<string>com.apple.dprivacyd</string>
</array>
<key>com.apple.security.ts.application-group-support</key>
<true/>
<key>com.apple.security.ts.asset-access</key>
<true/>
<key>com.apple.security.ts.cloudkit-client</key>
<true/>
<key>com.apple.security.ts.location-services</key>
<true/>
<key>com.apple.security.ts.power-assertions</key>
<true/>
<key>com.apple.security.ts.springboard-services</key>
<true/>
<key>com.apple.security.ts.tmpdir</key>
<string>com.apple.remindd</string>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.trial.client</key>
<array>
<string>120</string>
</array>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
Assignment
Assignment
Alarm
Alarm
SmartList
SmartList
name
Hashtag
Hashtag
name
children
List
List
Reminder
Reminder
Attachment
Attachment
alarm
alarm.reminder
alarm
alarm.reminder
alarm
alarm.reminder
zh-Hans
zh-Hant
RecurrenceRule
RecurrenceRule
Rappels 
ManualSortHint
AlarmTrigger
AlarmTrigger
Account
Account
ckCloudState
MigrateRequest
MigrateResponse
EmptyRequest
BasicResponse
PingRequest
PingResponse
Content-Type
Content-Type
codeagent.Error
null
false
true
alse
infinity
infinity
infinity
null
false
true
null
null
