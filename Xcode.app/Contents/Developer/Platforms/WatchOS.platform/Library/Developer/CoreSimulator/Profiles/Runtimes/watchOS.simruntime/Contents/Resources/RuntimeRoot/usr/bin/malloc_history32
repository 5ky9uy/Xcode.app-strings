Displays/aggregates allocation histories in a process
<pid | partial-process-name> [options] <mode> [<address> ... | <classes-pattern>]
'mode' should be one of {-callTree, -allBySize, -allByCount, -allEvents, or one or more addresses}
allBySize
[mode]
v4@?0
allByCount
allEvents
fullStacks
print backtraces with one line per frame
callTree
debug
uniquingTableStats
Print debug information about the stack uniquing table.
highWaterMark
Show information about allocations and VM regions that were live at the point of peak memory allocation, rather than currently alive. Not available for memory graphs.
machineReadableOutput
showContent
(-allEvents, -calltree only)
invert
(-calltree only)
ignoreThreads
collapseRecursion
chargeSystemLibraries
consolidateAllBySymbol
consolidateSystemFramesBySymbol
virtual
(-calltree only -- show virtual size of VM regions rather than dirty+swapped-purgableVolatile
forkCorpse
generate a corpse fork from process and run malloc_history on it
getCorpseFromParent
quiet
suppress the process description header and footer
showTiming
initialization
bad address %@ specified
v12@?0@"NSString"4^@8
no process id or name specified
specify only one mode (-callTree, -allBySize, -allByCount, -allEvents, or one or more addresses)
cannot use -showContent with -highWaterMark, since the malloc heap has probably changed since high water mark
<classes-pattern> is only supported by -callTree
do not pass specific addresses or <classes-pattern> with -allEvents
only call tree / all events mode support -showContent option
cannot use call tree options when not passing -callTree
no mode, address, or <classes-pattern> specified
can't use -highWaterMark with memory graph files since they only contain stack logs for active allocations, not full history
%s[%d]: [fatal] unable to read input graph: %s
The target process has no stack logs.  Run it with the MallocStackLogging environment variable set to get stack logs.
int main(int, char **)
<Unknown Function>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SamplingTools_Sim/SamplingTools-64511.120.1/malloc_history/malloc_history_main.m
<Unknown File>
expected no addresses to be passed with -allEvents
v8@?0^v4
generate corpse
create symbolicator for task
malloc_history was unable to acquire a symbolicator for the target process.
%s[%d]: Process %d is not debuggable.
Due to security restrictions, malloc_history cannot show memory contents of restricted processes.
Can't show high water mark when target process is run in lite mode of malloc stack logging.
create process description
finding high water mark
%s[%d]: [fatal] unable to introspect malloc zones to get allocation information
int main(int, char **)_block_invoke_2
v12@?0i4I8
VM Regions
v36@?0I4{?=Qb60b4@}8@"VMUVMRegion"28^B32
%d blocks in zone %s
%i: %#qx %s -- 
%ld stack frames
 -- NO STACK !!!
 -- SHORT STACK
  %s
  0x%qx 
%d total blocks
MallocStackLoggingLite
Nodes in Uniquing Table: %llu
step 1 -- build map table with live malloc block addresses as keys
VM: 
step 2 -- enumerate stack log records to record unique backtrace IDs for objects of interest
stack log enumeration callbacks
v32@?0I4Q8Q16{?=Q}24
skipping step 1 of building map table with live malloc block addresses as keys since we're looking for high water mark
step 2 -- enumerate stack log records to record unique backtrace IDs for objects that were live at high water mark
HighWaterMarkException
void printCallTree(__strong id<VMUCommonGraphInterface>, CSSymbolicatorRef, HighWaterMarkInfo *, VMUCallTreeOptions, BOOL, BOOL, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
Unexpected exception
step 3 -- from uniqueBacktraceToObjectsMap, create uniqueBacktraceToObjectsMap
step 4 -- build call tree by iterating the uniqueBacktraceToObjectsMap
%qu unique stacks
CONTENT:  
freeing up call-tree memory
releasing objectIdentifier
step 5 -- print call tree
VM region sizes shown as %s.
virtual size
dirty + swapped/compressed - purgableVolatile
Stack backtrace%s for allocation%s
Stack backtraces for allocations that match pattern '%s'
Malloc blocks with no stack: %6u   total size: %s
   VM regions with no stack: %6u   total size: %s
releasing call tree/autorelease pool
" PLUS %lu MORE LINES
%@  %@  %@
malloc<%llu>
NSString *generateContentAndTypeLabel(__strong id<VMUCommonGraphInterface>, uint32_t, BOOL)
expected to get vmRegionTypeString for VM region
    
error acquiring stack with identifier: %llu (frame count %u)
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)_block_invoke
unexpected stack logging event type
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
%d call%s for %qd bytes: 
v32@?0I4{?=Qb60b4@}8^B28
0x%qx
0x%qx
%s 0x%qx-0x%qx [size=%qu]: %s 
ALLOC
VM_ALLOC
FREE
VM_DEALLOC
0x%qx
%s  0x%qx: 
%s  0x%qx-0x%qx [size=%qu]: 
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, BOOL, BOOL)_block_invoke
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, BOOL, BOOL)
no stack logs found for 0x%qx
High water mark of allocated heap + VM memory: %*s  at malloc stack log record index %*s
     Current total allocated heap + VM memory: %*s  at malloc stack log record index %*s
  Cumulative total allocated heap + VM memory: %*s
            Total heap + VM memory operations: %*s  allocations: %*s  deallocations: %*s
High water mark of allocated heap memory
High water mark at malloc stack log record index
Current total allocated heap memory
Current total at malloc stack log record index
Cumulative total allocated heap memory
Total heap memory operations (count)
Total heap memory allocations (count)
Total heap memory deallocations (count)
not lite zone
Call graph:
Total number in stack -- this line is here to get the correct format for importing with the Sampler instrument in Instruments.app
Stack logging was dynamically enabled in target process, after it was launched,
so no backtraces are available for earlier allocations.
malloc_history Report Version:  2.0
----
error in %@ <classes> pattern '%@': %s
Region
Thread
.*%@
%@.*
error in % <region-description> pattern '%@': %s
%s[%d]: [fatal] %s
matchingKindOfClass
TB,N,GisMatchingKindOfClass
VMUOptionParserDomain
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SamplingTools_Sim/SamplingTools-64511.120.1/VMUOptionParser.m
Invalid parameter not satisfying: %@
block && (longName || shortName)
!longName || ([longName length] && [longName characterAtIndex:0] != '-')
Option's long-name '%@' is invalid or already in use.
Option's short-name '%c' is invalid or already in use.
%s%@
%c%c%@%c
[@@@spacing@@@]%@
com.apple.SamplingTools
%s flag supplied with no argument
unrecognized option '%s'
[invalid usage]: %s
%s: %s
Usage: %s %s
Apple-internal options:
[@@@spacing@@@]
purposeDescription
T@"NSString",C,N,V_purposeDescription
syntaxDescription
T@"NSString",C,N,V_syntaxDescription
discussion
T@"NSString",C,N,V_discussionDescription
singleHyphenLongNames
TB,N,V_singleHyphenLongNames
parametersShowAsAssignment
TB,N,V_parametersShowAsAssignment
optind
Ti,R
.memgraph
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
Target process of memgraph:  %@ [%u]
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: Unable to deallocate target task port: %d (%s)
launchd
coresymbolicationd
coreservicesd
UserEventAgent
rpc.lockd
launchservicesd
Activity Monitor
mdworker
spindump_agent
WindowServer
hidd
bluetoothd
logd
loginwindow
usbd
TouchBarServer
sysdiagnose
coreaudiod
kextd
notifyd
powerd
ReportCrash
ReportMemoryException
ReportPanic
watchdogd
cfprefsd
Process exists but has not started -- it is launched-suspended
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v16@?0I4I8I12
v8@?0I4
: terminated; resuming target task
: interrupted; resuming target task
%s[%d]: [fatal] 'pid_for_task' failed: %s (%d)
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
Target process is using %s so not generating corpse for better performance.
Failed to generate corpse from the process: %d (%s)
%s[%d]: [fatal] %s, exiting
%s[%d]: %s
%s[%d]: [fatal] Corpse generated for the process is incomplete, which can happen with processes that use a lot of memory
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v12@?0{_CSTypeRef=II}4
%s/usr/bin/%s
%s%s
setPurposeDescription:
setSyntaxDescription:
setDiscussion:
setSingleHyphenLongNames:
sharedTimer
startWithMessage:
hasPrefix:
UTF8String
length
initWithPattern:forArgument:error:
parseArgumentsWithBlock:
usage:
directedGraphWithData:error:
localizedDescription
stackLogReader
processDescriptionString
binaryImagesDescription
symbolicatorFromBinaryImagesDescription:
stringWithUTF8String:
currentHandler
handleFailureInFunction:file:lineNumber:description:
initWithTask:symbolicator:
usesLiteMode
initWithTask:getBinariesList:
description
initWithTask:options:
addRootNodesFromTask
addMallocNodesFromTask
zoneCount
setObject:atIndexedSubscript:
objectAtIndexedSubscript:
addRange:
zoneNameForIndex:
count
rangeAtIndex:
getFramesForAddress:size:inLiteZone:stackFramesBuffer:
functionNameForPCaddress:
nodesInUniquingTable
mapTableWithKeyOptions:valueOptions:
type
stringByAppendingString:
matchesNodeDetails:orNodeDescription:
enumerateMSLRecordsAndPayloads:
name
isEqualToString:
objectForKey:
init
setObject:forKey:
coldestFrameIsNotThreadId
initWithSymbolicator:sampler:options:
setStackLogReader:
nodeDetails:
getFramesForStackID:stackFramesBuffer:
addBacktrace:count:numBytes:
sort
addChildWithName:address:count:numBytes:toNode:
allBacktracesHaveBeenAdded
invertedNode
stringFromCallTreeIndentIfNoBranches:
stop
exceptionWithName:reason:userInfo:
labelForNode:
newlineCharacterSet
rangeOfCharacterFromSet:options:
componentsSeparatedByCharactersInSet:
stringByAppendingFormat:
displayName
typeName
binaryName
stringWithFormat:
vmuVMRegionForNode:
stringByReplacingOccurrencesOfString:withString:
member:
addObject:
symbolicatedBacktraceForStackID:options:
enumerateObjectsWithBlock:
setCountStyle:
stringFromByteCount:
setNumberStyle:
numberWithLongLong:
stringFromNumber:
hasSuffix:
dealloc
className
_regex:matchesName:
superclassInfo
_matchesClassInfo:
isMatchingKindOfClass
setMatchingKindOfClass:
_classesRegex
_vmRegionsRegex
_memoizedRegexResult
_matchingKindOfClass
initWithFormat:arguments:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
initWithString:
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:flags:handler:
handleFailureInMethod:object:file:lineNumber:description:
characterAtIndex:
rangeOfString:
appendString:
stringWithString:
appendFormat:
removeAllObjects
userInfo
code
printOptionDescriptions:
countByEnumeratingWithState:objects:count:
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:handler:
optind
.cxx_destruct
purposeDescription
syntaxDescription
discussion
singleHyphenLongNames
parametersShowAsAssignment
setParametersShowAsAssignment:
_purposeDescription
_syntaxDescription
_discussionDescription
_optionDescriptions
_appleInternalOptionDescriptions
_optionBlockByString
_longOptStructs
_shortOpts
_spacing
_singleHyphenLongNames
_parametersShowAsAssignment
containsString:
stringByResolvingSymlinksInPath
defaultManager
fileExistsAtPath:isDirectory:
isExecutableFileAtPath:
attributesOfItemAtPath:error:
fileSize
dataWithContentsOfFile:options:error:
string
processInfo
arguments
arrayWithArray:
lastPathComponent
componentsJoinedByString:
executablePath
parentPid
parentProcessPath
processName
intValue
arrayWithObjects:count:
initWithPid:
containsObject:
is64Bit
valueForEnvVar:
numberWithInt:
stringValue
sharedTimerIfCreated
reason
callStackSymbols
0"0E
VMUClassPatternMatcher
VMUOptionParser
B8@0:4
v12@0:4B8
@20@0:4@8@12^@16
v8@0:4
B16@0:4^{?=iI*^{re_guts}}8@12
B12@0:4@8
B32@0:4{?=Qb60b4@}8@28
^{?=iI*^{re_guts}}
^{__CFDictionary=}
@8@0:4
v32@0:4@8c12i16@20@24@?28
v36@0:4@8c12i16@20@24I28@?32
i8@0:4
@12@0:4@?8
v12@0:4@8
@"NSString"
@"NSMutableArray"
@"NSMutableDictionary"
^{__CFArray=}
@"NSMutableString"
examining %@ [%u]
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
@(#)PROGRAM:malloc_history  PROJECT:SamplingTools-64511.120.1
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>18A391019</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.SamplingTools.malloc-history32</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>WatchSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>17S5059b</string>
<key>DTPlatformName</key>
<string>watchsimulator</string>
<key>DTPlatformVersion</key>
<string>6.1</string>
<key>DTSDKBuild</key>
<string>17S5059b</string>
<key>DTSDKName</key>
<string>watchsimulator6.1.internal</string>
<key>DTXcode</key>
<string>1100</string>
<key>DTXcodeBuild</key>
<string>11L374m</string>
<key>MinimumOSVersion</key>
<string>6.1</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>safe</string>
</array>
<key>UIDeviceFamily</key>
<array>
<integer>4</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.iosurfaceinfo</key>
<true/>
<key>task_for_pid-allow</key>
<true/>
</dict>
</plist>
zPLR
zPLR
