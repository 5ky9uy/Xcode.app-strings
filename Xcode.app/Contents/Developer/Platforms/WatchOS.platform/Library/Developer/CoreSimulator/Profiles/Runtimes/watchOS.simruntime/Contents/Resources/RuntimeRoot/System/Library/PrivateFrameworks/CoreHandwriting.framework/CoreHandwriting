?333333
=17TriangleRegressor
9Regressor
10CHTriangle
R@333333
?fffff
?333333
N/@333333
Mb`?-C
6:?b2U0*
3?-C
MbP?
333333
 Bff
15CHManhattanLine
6CHLine
12CHChatBubble
19ChatBubbleRegressor
6MatrixIfE
6CHStar
?UUUUUU
E6MatrixIdE
ffffff
9CHEllipse
?333333
333333
@333333
@333333
333333
@333333
@333333
@333333
@ffffff
@333333
@333333
@333333
@333333
@ffffff
@ffffff
@333333
@ffffff
@333333
333333
?333333
?333333
?ffffff
15CHOutlinedArrow
11CHRectangle
12CHBasicShape
18RectangleRegressor
MbP?
UUUUUU
?UUUUUU
F@14CHStraightLine
12CHBezierLine
@7CHCloud
333333
A@ffffff
9SymbolMap
333333
?333333
?333333
?333333
?333333
?333333
?333333
?333333
?333333
?333333
p@7CHHeart
10CHPentagon
26CHRSketchRecognitionResult
CHTextInputTargetContentInfo.m
Invalid parameter not satisfying: %@
textInputTarget
referenceSubstring
selectedTextRange %@ beyond text length %ld
activePreviewRange %@ beyond text length %ld
Invalid referenceSubstringRange %@
referenceSubstringRange %@ beyond text length %ld
Invalid referenceSubstringRange %@, length doesn't match string length %ld
charRectsInReferenceSubstring cannot be NULL for referenceSubstringRange: %@
  %ld: origin: (%0.2f, %0.2f), size: (%0.2f, %0.2f)
@"NSString"24@?0@8q16
(none)
 textInputTarget: (%@), contentType: %@, textContentLength: %ld, referenceSubstring: "%@", referenceSubstringRange: %@, selectedRange: %@, isCursorStrong: %@, containsCommittedStrokes: %@, activePreviewRange: %@, strokeCoveredTextRange: %@, lastCharacterLevelPosition: %@, isSingleLine: %@, supportsAutoLineBreaks: %@, characterRectsInReferenceSubstring: {%@}, protectedCharacterIndexes: {%@}
v8@?0
aceimnorsuvwxz,.-_*+~<>
gjpqy
v24@?0q8^B16
v56@?0q8{CGRect={CGPoint=dd}{CGSize=dd}}16^B48
protectedCharacterIndexes
The referenceSubstring length must be equal to the range that it covers
CHLanguageUtilities.mm
minLength has to be > 0
.@#:/-_
%@%@
v24@?0^{_LXEntry=}8*16
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
!?();:
Lexicon correction requires non-empty token string.
The prefix length should be smaller than the candidate string length
The corrected entry string length must be greater than the length of the active prefix
The token prefix should be case-sensitive equal after lexicon correction
The token prefix should be case-insensitive equal after lexicon correction
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
encodedStrokeIdentifier
string
strokeIndexes
wordID
recognitionScore
combinedScore
alignmentScore
properties
substrokeCount
boundsOriginX
boundsOriginY
boundsWidth
boundsHeight
CHTokenizedTextResultToken.mm
The input string (%@) contains one or more ligature private code points
 '%@', strokes: %@, substrokeCount: %ld, wordID: %d, recognitionScore: %0.4f, combinedScore: %0.4f, alignmentScore: %0.4f, rare: %@, lexicon: %@, pattern: %@, inappropriate: %@, precedingSpace: %@, original: %@, bounds: [%0.4f, %0.4f, %0.4f, %0.4f]
imgData
featureData
softmax_output
+N9mZUAHooNvMiQnjeTJ8g
.codemap
vo_en
std::vector<std::vector<CHCandidateResult>> CHNeuralNetwork::ClassifyCHDrawingFromBatches(NSArray<CHClassifiableDrawing *> * _Nonnull __strong)
CHNeuralNetwork.mm
Error, the number of results doesn't match the model batch size (usesCPUOnly == %u)
Error, the number of results doesn't match the data batch size (usesCPUOnly == %u)
std::vector<CHCandidateResult> CHNeuralNetwork::filterCandidateResults(std::vector<CHCandidateResult> &, NSUInteger, NSCharacterSet * _Nullable __strong, BOOL)
Not-a-char codepoint (U+%04x) is being added to the filtered candidate results (activeCharacterSet is nil: %d)
std::vector<CHCandidateResult> CHNeuralNetwork::feedforward(MLDictionaryFeatureProvider * _Nullable __strong)
Error for model prediction in CHNeuralNetwork::feedforward: %@
std::vector<std::vector<CHCandidateResult>> CHNeuralNetwork::feedforwardFromBatches(MLDictionaryFeatureProvider * _Nullable __strong)
Error for model prediction in CHNeuralNetwork::feedforwardFromBatches: %@
Unexpected prediction tensor dimension: %lu
Prediction tensor must be of dimension %ld instead of %lu for batch size different from 1
CHRecognitionOptionTextBefore
CHRecognitionOptionTextAfter
CHRecognitionOptionPrecedingSpaceBehavior
CHRecognitionOptionFrameContext
CHRecognitionOptionDrawingAnchorPoint
CHRecognitionOptionShouldRefineCandidates
CHRecognitionOptionShouldPreserveCaseVariantCandidates
CHRecognitionOptionInferenceCache
CHRecognitionOptionAllowSecondaryLocale
CHRecognitionOptionIsRunningSecondaryLocale
012olzOLZ
Oval
Line
Outline Arrow
Triangle
Rectangle
Pentagon
Manhattan Line
Chat Bubble
Star
Heart
Cloud
Scribble
com.apple.CoreHandwriting
HWRTriangleAlignToAxisThreshold
HWRTriangleIsoscelesLengthRatioThreshold
HWRTriangleEquilateralLengthRatioThreshold
HWROvalFitToCircleRadiiRatioThreshold
HWROvalAlignToIncrementsOf
HWRRectangleFitToSquareLengthRatioThreshold
HWRRectangleAlignToIncrementsOf
HWROutlinedArrowAlignToIncrementsOf
HWRLineAlignToAxisThreshold
HWRLineLengthRatioThreshold
B24@?0@"CHTextRecognitionResult"8@"NSDictionary"16
v64@?0@"CHTokenizedTextResultToken"8q16{?=qqq}24{_NSRange=QQ}48
'.-/
-/._@
v28@?0r*8q16I24
d16@?0r^{NetworkEdge=QQQQddQQQ}8
d16@?0^v8
B32@?0@"CHTextRecognitionResult"8Q16^B24
Guess
d24@?0r^v8d16
'".-
%@%@%@
q24@?0@8@16
CHRecognizer.mm
The number of segments (%lu) must be the same as the number of sorted segment indexes (%lu)
The number of nodes in the candidate network (%lu) should match the number of generated segments (%lu)
We must add at least one candidate for each edge
Batch contains %lu non classified drawings
There must be at least one valid path
Incorrect index in segment decoding: index %ld (idx %ld + offset %ld) should be smaller than %ld, the number of segments on the group.
v24@?0Q8^B16
Next generation pipeline requires CVNLP framework.
The first stroke index must be non-negative
CHCTCRecognitionModel.mm
An error occurred in the %@ model when extracting features: %@
Using CVNLPActivationMatrix requires the CVNLP framework.
CHRemoteRecognizer.mm
locale
locales
CHRemoteRecognizer must be initialized with at least one locale
com.apple.handwritingd.remoterecognition
A locale is required to build the remote recognition request
drawing
v16@?0@"NSError"8
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
XPC connection must be non-nil
v24@?0@"CHTokenizedTextResult"8@"NSError"16
CHStrokeUtilities.mm
strokeProvider cannot be nil.
B32@?0@"<CHStroke>"8Q16^B24
StrokeProviderError: Inconsistency in stroke provider. Stroke with id %@ is exposed but this id can not be resolved by stroke provider version %@.
Stroke Grouping Logic Error: Failed to get stroke with id %@. The stroke is not exposed by stroke provider version %@.
stroke
block
timestep must be > 0
v40@?0{CGPoint=dd}8d24^B32
q16@?0q8
recognitionMode
options
minimumDrawingWidth
minimumDrawingHeight
contentType
autoCapitalizationMode
autoCorrectionMode
activeCharacterSetPerLocale
maxRecognitionResultCount
shouldUseTextReplacements
enableCachingIfAvailable
enableGen2ModelIfAvailable
enableGen2CharacterLMIfAvailable
hasBeenSubmitted
priority
The CHRemoteRecognitionRequest cannot be mutated after being submitted
CHRemoteRecognitionRequest.mm
CHRemoteRecognitionRequest must be initialized with at least one locale
hasBeenSubmitted state cannot be reverted after being set to YES
@"NSString"24@?0@"NSLocale"8q16
@"NSString"24@?0@"NSCharacterSet"8q16
Remote Recognition Request %p (locales=[%@], mode=%@, content type=%@, autocapitalization mode=%@, autocorrection mode=%@, option keys=%@, active character sets=[%@], drawing=%p, shouldUseTextReplacements=%@, enableCachingIfAvailable=%@, enableGen2ModelIfAvailable=%@, enableGen2CharacterLMIfAvailable=%@, hasBeenSubmitted=%@, priority=%ld)
CHTextInputScriptSpec.m
Method can only be called on a single character string
=== Insight Request ===
  request: %@
=== Recognizer Configuration ===
  recognizerLocale: %@
  recognizerRecognitionMode: %@
  recognizerContentType: %@
  autoCapitalizationMode: %@
  autoCorrectionMode: %@
  recognizerActiveCharacterSet: %@
  recognizerMaxRecognitionResultCount: %ld
  recognizerMinimumDrawingSize: {width: %0.2f, height: %0.2f}
    %@: %@,
v32@?0@"NSString"8@"NSObject"16^B24
  recognizerOptions: %@
=== Input Drawing ===
None captured
  inputDrawing: %@
=== Text Result ===
drawingStrokes
void CHDrawingStrokes::resampleStrokesEqualInSpace(CHDrawingStrokes &, const float, std::vector<std::map<NSInteger, NSInteger>> &)
CHDrawing.mm
Empty stroke detected during spatial resampling.
void CHDrawingStrokes::readCharacter(const char *)
Error: readCharacter: filename ptr = 0
Error: readCharacter: Empty filename
Error: readCharacter: Wrong filename :%s:
%d %d %d
channel
data
origin: (%0.2f, %0.2f), size: (%0.2f, %0.2f)
 strokes: %lu, points: %lu, %@
At least one stroke index must be passed
%d %d
Error: Degenerated drawing (empty stroke present)
q24@?0@"CHCutPoint"8@"CHCutPoint"16
B32@?0@8Q16^B24
UIImage
Class getUIImageClass()_block_invoke
CHSoftLinking.h
Unable to find class %s
void *UIKitLibrary()
/System/Library/Frameworks/UIKit.framework/UIKit
/System/Library/Frameworks/UIKit.framework/Contents/MacOS/UIKit
CHCornerDetector.mm
Could not find a point in the drawing to match that in the resampled drawing
General
Recognizer
RecognitionSession
StrokeGrouping
ClutterFiltering
RemoteRecognizer
TextCorrectionRecognizer
CoreHandwritingSignPosts
com.apple.corehandwriting
tokenRows
CHTokenizedTextResultColumn.m
@"NSString"24@?0@"NSArray"8q16
@"NSString"24@?0@"CHTokenizedTextResultToken"8q16
[%p "%@" %.2f, %.2f]
  %@
 rows: %ld {
v32@?0@"NSArray"8Q16^B24
token
Invalid index %ld when trying to replace a row from column with %lu rows.
Invalid index %ld when trying to remvove a row from column with %lu rows.
q24@?0@"NSArray"8@"NSArray"16
NSIndexPath *modifyIndexPath(NSIndexPath *__strong _Nonnull, NSUInteger, NSUInteger)
CHUtilities.mm
The length of the computed path must be the same as the input
%@-%@_%@
%@_%@
%@-%@
class: %@ score: %3.5f string: %@
Freeform
0x%x
tokenColumns
transcriptionPaths
transcriptionPathScores
recognizerGenerationIdentifier
precedingLineBreaks
changeableTokenColumns
trailingSeparator
CHTokenizedTextResult.mm
columns
paths
transcriptionPaths count (%ld) != scores count (%ld)
kBestPathsTokens
kBestPathsProb
transcriptionPaths count (%ld) != probabilities count (%ld)
B24@?0Q8^B16
transcriptionPaths count (%ld) != probabilities count (%ld) after tokenized result is built
column
@"NSString"24@?0@"CHTokenizedTextResultColumn"8q16
rows
%ld %@
transcriptionPath
@"NSString"24@?0@"NSIndexPath"8q16
Column %ld %@
 %ld (%ld changeable) %@ [%@], %ld %@ 
Unknown
Gen1
Gen2
B32@?0@"NSArray"8Q16^B24
Original token not found in column %ld
v48@?0@"CHTokenizedTextResultToken"8q16{?=qqq}24
The character range must be compatible with the top transcription
Error: Tokenized text result without any transcription path encountered when computing language fitness.
en_US
B32@?0@"NSIndexPath"8Q16^B24
v48@?0r^I8q16d24q32^B40
abcxyz
ErrorModel
%.10g
{%f, %f}
%@, 
v56@?0q8{CHLineSegment={CGPoint=dd}{CGPoint=dd}}16^B48
CHPolygon.mm
<div style="clear:both;margin:auto;font-size:250%%;" >
<p>WARNING : NOTHING WAS SAVED : YOU MUST CLICK ON THE FOLLOWING LINK !</p>
<p><a href="#" onclick="SendMail(%d);">Send via email to Antoine !</a></p>
</div>
<p>For information, here are the files you flagged:</p>
<p id="po-term%d" style="margin:0;" \>
</body>
</html>
input
output
masking_1/mul:0
time_distributed_1/Reshape_1:0
time_distributed_2/Reshape_1:0
time_distributed_3/Reshape_1:0
stroke_classification.espresso
v56@?0@"CHDrawing"8@"NSString"16^f24{_NSRange=QQ}32^v48
CHRecurrentNeuralNetwork.mm
An error occurred in the %@ model during prediction: %@
Invalid empty FST line entry
File not found: (
Node[
has out degree zero but is not marked as a final node
has in degree zero but is not marked as an initial node
void Network::mergeEquivalentEdges(vector<NetworkEdge> &)
Network.mm
Error when merging equivalent edges: index out of bounds
LatticePaths Network::kBestPaths(const NodeIndex, const NodeIndex, const NSUInteger, const LXLexiconRef, LXCursorRef, const LXMutableLexiconRef, LXCursorRef, CHPatternNetwork *__strong, NetworkCursor *__strong, CHRecognitionContentType, const LMLanguageModelRef, BOOL, double (^__strong)(const NetworkEdge &), double (^__strong)(LatticePath *), BOOL, BOOL, BOOL, BOOL)
Inconsistent network structure: edge with start node %zu belong in output edges of node %zu 
0x%zx
ctc_zh
ctc_latn
ctc_ja
ctc_ko
bundle
DecodingLexiconWeight
DecodingLexiconLowerBoundLogProbability
DecodingCharacterLMWeight
DecodingCharacterLMLowerBoundLogProbability
DecodingWordLMWeight
DecodingWordLMLowerBoundLogProbability
MultiCharacterOverlapped
SingleCharacter
Sketch
MultiCharacterInline
MultiCharacterCanvas
Default
Digits
PhoneNumber
Username
EmailAddress
ASCII
Equation
None
Words
Sentences
AllUppercase
AllLowercase
English
French
Spanish
Italian
German
Portuguese
Chinese
Cantonese
Japanese
Korean
SimplifiedChinese
TraditionalChinese
Roman
 Recognizer configuration with mode: %@, locale: %@, contentType: %@, autoCapitalizationMode: %@, autoCorrectionMode: %@, language: %@, script: %@
zh_Hans
zh_Hant
ja_Jpan
Latn
Hans
Hant
Hrkt
Hira
Kata
Jpan
Hani
Kore
CoreHandwriting
korean_support
none
%@-%ld-%@-%@
CHRecognizerConfiguration.mm
Recognizer configuration needs to be defined
zh_hant
Synchronization queue can not be nil when async loading language models.
Recognizer can not be nil when async loading language models.
com.apple.CoreHandwriting.LanguageModelLoadingQueue
v44@?0^{__CFURL=}8i16^{__CFLocale=}20^{__CFString=}28^B36
pt_BR
/System/Library/PrivateFrameworks/TextRecognition.framework/pt_BR.lm
corpus.wid
odat
P.bin
PP.bin
G.bin
R.bin
synthetics_
zh-Hans
zh-Hant
zh_compact
vo_en_compact
vo_de
vo_other
CHCharacterSetsRules.mm
Method can only be called on a single character string: %@
com.apple.CoreHandwriting.CHCharacterSetsRules
^*+=<>.,
:'"-/
apmAPM.
strdndth.
:;B=
)(pPDoOxX*
_-.+
_-.:/+&?%()$=
-/.@_
.,!?;:
!?:;
0x61a649a
0x34f55ec
0x7f7446f
0xe6b391a
0x08d4b39
0xbdde29e
0x633a6c7
0x346ff32
0xf9be5b7
0xf9dd946
0x27087b3
0x5fb9dc5
0xcf06682
0xcff9621
CHPostProcessingManager.mm
Number of corrected and raw tokens must match.
The best token index %ld is not contained in the returned tokens range %d, %ld
wordID count %lu should match wordRangesInString count %lu
growingToken should not be nil
CHIdentifyLowAlignmentConfidenceColumnsStep unexpectedly decreased the changeable token column count.
es_ES
fr_FR
+#*'",. 
@"CHTokenizedTextResultToken"40@?0@"CHTokenizedTextResultToken"8{?=qqq}16
CHMergeColumnsNoWhiteSpaceStep removed all columns.
CHMergeColumnsNoWhiteSpaceStep set unexpected changeable token column count.
At least one phrase should be returned in Mecabra tokenization and conversion step.
At least one candidate should be returned for each phrase in Mecabra tokenization and conversion step.
v32@?0@8Q16^B24
@24@?0@8q16
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
The strokeCoveredTextRange %@ must be within the referenceSubstringRange %@
%@ decoding failed. Token string and stroke indexes are required to be nonnull when constructing a result token
Model execution on CPU only: %d
Model batch size: %d
Falling back to a batch size of %u for usesCPUOnly == %d
Error loading recognition model: %@
Error model output data format not supported: %ld
Error creating MLFeatures: %@
Configuration for recognizer with mode=%@ and locale=%@ is not supported.
Error loading the static lexicon: %@
Error loading the phrase lexicon: %@
Processing input as single character drawing with %lu segments
CHRecognizer is running RNN recognition pipeline: %d
BEGIN "CHNextGenRecognition"
CHNextGenRecognition
END "CHNextGenRecognition"
BEGIN "CHPostProcessing"
CHPostProcessing
END "CHPostProcessing"
BEGIN "CHSegmentAndDecode"
CHSegmentAndDecode
END "CHSegmentAndDecode"
An error occurred when trying to create feature provider for the %@ model: %@
An error occurred when trying to allocate feature array for the %@ model: %@
Remote connection to handwritingd was interrupted
Remote connection to handwritingd was invalidated
An XPC proxy service error occurred: %@
Error during recognition: %@
  Stroke provider change added %ld strokes, removed %ld strokes.
  Ignoring %ld added strokes that cannot enumerate their points.
retrieving stroke identifier gave nil result. Encoded stroke identifier: %@
Stroke with no enumerable points found, recognition results may be affected. Stroke: %@
Drawing with no enumerable points found, recognition results may be affected. Drawing: %@
Removed %lu NaN-Points from %lu given points before calculating convex hull.
Removed %lu NaNs from %lu given values before calculating vector mean without outliers.
%@ decoding failed. Locale and drawing are required to be non-null and priority has to be valid.
isCharacterEmoji: character string doesn't match expectation of being single character with length (%lu)
isCharacterEmoji: codeCounts is 0 when data is encoded from character of length (%lu)
isCharacterEmoji: encoded data is invalid, null or empty, from character of length (%lu)
Warning: Less than %2.1f%% of the original points remain in the drawing after cleanup (before: %d, after: %d)
Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is larger than the original size (%u)
Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is equal to 0
%@ decoding failed. There was a problem decoding the stroke data.
%@ decoding failed. Result token rows are required to be nonnull when constructing a request
%@ decoding failed. Token columns, transcription paths, and scores are required to be nonnull and equal in size when constructing a text result
Incompatible index sets have no partition of common index sets.
Error: LMLanguageModelConditionalProbabilityVector returns false
Error: unable to mmap resource %s
Error: Index %lu out of bounds of the code map %lu symbols
An error occurred when loading model ("%@")
Model not found ("%@")
Canceling RNN recursive probability prediction
An error occurred running prediction with model: %@
An error occurred when loading a model: %@
found paths with incompatible number of segments covered from %zu to %zu: previous value %lu, value for new path %zu 
Unsupported Network Version %s
Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 3Gram!
Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 2Gram!
Error: unable to reallocate memory for path expansion.
decodingCharacterLMWeight from override weights: %@
decodingWordLMWeight from override weights: %@
decodingLexiconWeight from override weights: %@
decodingLexiconLowerBoundLogProbability from override weights: %@
characterLMLowerBoundLogProbability from override weights: %@
decodingWordLMLowerBoundLogProbability from override weights: %@
Failed to load n-gram model from TextRecognition.framework at location %@ with error %@
Resource for transliteration map not found for locale "%@" (script=%lu, language=%lu) with resource path "%s"
CHPreserveOriginalRecognitionStep is running
CHLexiconCorrectionStep is running with autoCapitalizationMode: %@
CHTransliterateHalfWidthPunctuationStep is running
CHOpeningClosingCharacterMatchingStep is running
CHSemanticTokenizerStep is running
CHIdentifyLowAlignmentConfidenceColumnsStep is running
CHCleanUpSpacesStep is running
CHCandidateRefinementStep is running
CHRemoveSpacesFromStrongURLsAndEmailsStep is running
CHRemoveSpacesFromStrongURLsStep range: %@ stringLength: %li isEmail: %i isUrl: %i
CHRemoveSpacesFromSpecialFieldsStep is running
CHRemoveSpacesFromHashtagsAndMentionsStep is running
CHTransliterateChineseStep is running
CHTransliterateConfusableCharactersStep is running
CHTransliterateIsolatedConfusableCharactersStep is running
CHTransliterateFrenchLigaturesStep is running
CHReorderSCTCConfusionStep is running
CHMultiWordOVSFilteringStep is running
CHNumberFieldResultReorderingStep is running
CHMergeColumnsNoWhiteSpaceStep is running
CHJapaneseTokenizationAndConversionStep is running
CHRemoveSpacesBetweenJapaneseCharactersStep is running
!`$a$b$c$d$e$f$g$h$
`"e"d"
softlink:r:path:/System/Library/Frameworks/UIKit.framework/UIKit
softlink:r:path:/System/Library/Frameworks/AppKit.framework/AppKit
softlink:r:path:/System/Library/PrivateFrameworks/InputContext.framework/InputContext
softlink:r:path:/System/Library/PrivateFrameworks/KeyboardServices.framework/KeyboardServices
softlink:r:path:/System/Library/Frameworks/CoreServices.framework/CoreServices
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
CHTextInputTargetContentInfo
NSMutableCopying
CHMutableTextInputTargetContentInfo
NSCopying
CHClassifiableDrawing
7 0E
CHLanguageUtilities
CHEncodedStrokeIdentifier
NSSecureCoding
NSCoding
CHTokenizedTextResultToken
Private
CHMutableTokenizedTextResultToken
CHRecognizerOptions
CHRecognizer
CHRecognizing
NSObject
Insight
CHDrawingContext
CHCTCRecognitionModel
CHRemoteRequestProtocol
CHRemoteRecognizer
CHStrokeUtilities
CHRemoteRecognitionRequest
CHTextInputScriptSpec
CHRecognitionInsightRequest
CHRecognitionInsight
Internal
CHDrawing
CHCutPoint
CHSegmentDescriptor
CHDrawingSegmentGroup
CHCornerDetector
CHTokenizedTextResultColumn
CHMutableTokenizedTextResultColumn
CHContextualCharacterTransliteration
CHPointFIFO
CHPointStrokeFIFO
CHBoxcarFilterPointFIFO
CHQuadCurvePointFIFO
CHRecognitionResult
CHTextRecognitionResult
CHSketchRecognitionResult
CHLineSketchRecognitionResult
CHManhattanLineSketchRecognitionResult
CHOutlinedArrowSketchRecognitionResult
CHRectangleSketchRecognitionResult
CHTriangleRecognitionResult
CHEllipseRecognitionResult
CHChatBubbleRecognitionResult
CHStarRecognitionResult
CHPentagonRecognitionResult
CHScribbleRecognitionResult
CHHeartRecognitionResult
CHCloudRecognitionResult
CHFreeformRecognitionResult
CHTokenizedTextResult
CHMutableTokenizedTextResult
CHSpellCheckerErrorModel
CHSpellChecker
CHPolygon
CHRecurrentNeuralNetwork
CHRecurrentNeuralNetworkMontreal
CHRecurrentNeuralNetworkCoreML
CHStrokeClassificationModel
CHContextualTextResult
CHContextualTextResults
CHTokenizedStrokeResult
CHStringOVSChecker
CHRecognizerConfiguration
CHCharacterSetRules
NetworkCursor
CHPatternNetwork
CHResultWithContext
CHPostProcessingManager
CHPostprocessingStep
CHTextFieldTypeSwitchStep
CHPreserveOriginalRecognitionStep
CHLexiconCorrectionStep
CHTransliterateHalfWidthPunctuationStep
CHOpeningClosingCharacterMatchingStep
CHSemanticTokenizerStep
CHIdentifyLowAlignmentConfidenceColumnsStep
CHCleanUpSpacesStep
CHCandidateRefinementStep
CHRemoveSpacesFromStrongURLsAndEmailsStep
CHRemoveSpacesFromSpecialFieldsStep
CHRemoveSpacesFromHashtagsAndMentionsStep
CHTransliterateChineseStep
CHTransliterateConfusableCharactersStep
CHTransliterateIsolatedConfusableCharactersStep
CHTransliterateFrenchLigaturesStep
CHReorderSCTCConfusionStep
CHMultiWordOVSFilteringStep
CHNumberFieldResultReorderingStep
CHMergeColumnsNoWhiteSpaceStep
CHJapaneseTokenizationAndConversionStep
CHRemoveSpacesBetweenJapaneseCharactersStep
CHMecabraWrapper
CoreHandwriting
CHExtensions
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
length
init
copy
_initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:autoCapitalizationMode:autoCorrectionMode:isSingleLine:lastCharacterLevelPosition:protectedCharacterIndexes:
initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:isSingleLine:lastCharacterLevelPosition:
dealloc
referenceSubstringRange
arrayWithCapacity:
characterRectsInReferenceSubstring
stringWithFormat:
addObject:
ch_descriptionWithSeparator:filterBlock:
contentType
stringForRecognitionContentType:
selectedTextRange
activePreviewRange
strokeCoveredTextRange
lastCharacterLevelPosition
description
textInputTarget
textContentLength
referenceSubstring
isCursorStrong
containsCommittedStrokes
protectedCharacterIndexes
stringByAppendingFormat:
setReferenceSubstring:range:characterRects:
setTextInputTarget:
setTextContentLength:
setStrokeCoveredTextRange:
setSelectedTextRange:
setIsCursorStrong:
setContainsCommittedStrokes:
setActivePreviewRange:
setContentType:
autoCapitalizationMode
setAutoCapitalizationMode:
autoCorrectionMode
setAutoCorrectionMode:
isSingleLine
setIsSingleLine:
supportsAutoLineBreaks
setSupportsAutoLineBreaks:
setLastCharacterLevelPosition:
setProtectedCharacterIndexes:
characterRectForCharacterIndex:
characterSetWithCharactersInString:
characterAtIndex:
characterIsMember:
enumerateCharacterRectsInRange:reverse:block:
substringWithRange:
rangeOfComposedCharacterSequenceAtIndex:
enumerateCharacterRectsInRange:block:
mutableCopyWithZone:
initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:autoCapitalizationMode:autoCorrectionMode:isSingleLine:lastCharacterLevelPosition:
initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:activePreviewRange:contentType:lastCharacterLevelPosition:
absoluteLocationFromRelativeLocation:
relativeLocationFromAbsoluteLocation:
visualCharacterRectForCharacterIndex:
referenceSubstringInRange:
referenceSubstringRangeOfComposedCharacterAtIndex:
unionCharacterRects
.cxx_destruct
_textInputTarget
_textContentLength
_referenceSubstring
_referenceSubstringRange
_characterRectsInReferenceSubstring
_strokeCoveredTextRange
_selectedTextRange
_isCursorStrong
_containsCommittedStrokes
_activePreviewRange
_contentType
_autoCapitalizationMode
_autoCorrectionMode
_isSingleLine
_supportsAutoLineBreaks
_lastCharacterLevelPosition
_protectedCharacterIndexes
T@"CHTextInputTarget",R,N,V_textInputTarget
Tq,R,N,V_textContentLength
T@"NSString",R,C,N,V_referenceSubstring
T{_NSRange=QQ},R,N,V_referenceSubstringRange
T{_NSRange=QQ},R,N,V_strokeCoveredTextRange
T{_NSRange=QQ},R,N,V_selectedTextRange
TB,R,N,V_isCursorStrong
TB,R,N,V_containsCommittedStrokes
T{_NSRange=QQ},R,N,V_activePreviewRange
Ti,R,N,V_contentType
Ti,R,N,V_autoCapitalizationMode
Ti,R,N,V_autoCorrectionMode
TB,R,N,V_isSingleLine
TB,R,N,V_supportsAutoLineBreaks
Tq,R,N,V_lastCharacterLevelPosition
T^{CGRect={CGPoint=dd}{CGSize=dd}},R,N,V_characterRectsInReferenceSubstring
T@"NSIndexSet",R,C,N,V_protectedCharacterIndexes
copyWithZone:
T@"CHTextInputTarget",&,D,N
Tq,D,N
T{_NSRange=QQ},D,N
TB,D,N
Ti,D,N
T@"NSIndexSet",C,D,N
initWithDrawing:characterSet:expandCodePoints:normalizationContext:maxCandidateCount:
drawing
characterSet
expandCodePoints
normalizationContext
maxCandidateCount
_expandCodePoints
_drawing
_characterSet
_maxCandidateCount
_normalizationContext
T@"CHDrawing",R,N,V_drawing
T@"NSCharacterSet",R,N,V_characterSet
TB,R,N,V_expandCodePoints
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N,V_normalizationContext
TQ,R,N,V_maxCandidateCount
lowercaseString
array
whitespaceCharacterSet
stringByTrimmingCharactersInSet:
rangeOfString:
numberWithUnsignedInteger:
valueWithRange:
normalizeLMTokenIDForWord:tokenID:isFromPattern:score:languageModel:
arrayWithArray:
componentsSeparatedByCharactersInSet:
countByEnumeratingWithState:objects:count:
properties
string
integerValue
objectForKeyedSubscript:
getCharacters:
stringWithCharacters:length:
isEqualToString:
mutableCopy
ch_basicAlphanumericCharacterSet
formUnionWithCharacterSet:
ch_hiraganaCharacterSet
ch_katakanaCharacterSet
ch_kanjiCharacterSet
ch_kanjiCompCharacterSet
count
isMecabraConversionCandidateAllowed:
punctuationCharacterSet
rangeOfCharacterFromSet:
localeIdentifier
arrayWithObjects:
dictionaryWithObjects:forKeys:count:
orthographyWithDominantScript:languageMap:
enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:
componentsJoinedByString:
expectedMinStrokeCount:
appendString:
compare:options:
stringWithString:
symbolCharacterSet
uppercaseStringWithLocale:
computeEditPenalizationFromString:toReferenceString:withSuffix:withCaseSensitivity:withFirstLetterCaseSensitivity:withDiacriticSensitivity:withDiacriticsCharSet:withConsumableStrokesCharSet:outputSuffix:lexiconExtraCharacters:firstLetterCaseFlipped:
tokenIDForString:withLexicon:
substringFromIndex:
hasPrefix:
caseInsensitiveCompare:
isInappropriateLexiconEntry:
combinedScore
compare:
rangeOfString:options:
objectForKey:
stringByReplacingCharactersInRange:withString:
singleScriptCodeForString:
lowercaseStringWithLocale:
strokeIndexes
recognitionScore
alignmentScore
substrokeCount
bounds
initWithString:strokeIndexes:wordID:recognitionScore:combinedScore:alignmentScore:properties:substrokeCount:bounds:
wordID
tokensRangesForString:outTokenIDs:languageModel:
splitStringIntoSubtokensForLexicon:minLength:
findPartialMatchInPhraseLexicon:token:contextBeforeToken:
transliterateStringUsingICUTransliterator:_icuTransliterator:
characterLMLogProbabilityForString:characterLM:
mecabraTokenizationAndKanaConversionForString:mecabraEngine:contextRef:leftCandidateRef:alternativeCandidateLimit:
shouldCapitalizeGivenHistory:shouldAutoCapitalizeSetting:locale:
lexiconCorrectionsForToken:locale:lexicon:lmVocabulary:ovsStringChecker:textReplacements:consumableStrokesSet:minimumTokenScore:activeHistoryRange:outBestTokenScore:shouldCapitalizeWord:shouldSkipEntryCorrection:allowFullCapsCorrections:minimalLengthForLowConfidenceCorrections:lowConfidenceThreshold:minimalLengthForCustomCapitalizationCorrections:outBestTokenIndex:outFoundTokenInLexicon:outFoundCaseMatchingTokenInLexicon:outCorrectionFromOutOfContextEntry:
dictionaryWithObjectsAndKeys:
pointCountForStrokeIndex:
pointForStrokeIndex:pointIndex:
subdataWithRange:
hash
isEqualToCHEncodedStrokeIdentifier:
encodedStrokeIdentifier
isEqual:
encodeObject:forKey:
decodeObjectOfClass:forKey:
initWithData:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
_savedHash
_encodedStrokeIdentifier
T@"NSData",R,N,V_encodedStrokeIdentifier
addPoint:
indexSet
characterSetWithRange:
decodeInt32ForKey:
decodeDoubleForKey:
decodeIntegerForKey:
encodeInt32:forKey:
encodeDouble:forKey:
encodeInteger:forKey:
isEqualToIndexSet:
isEqualToTokenizedTextResultToken:
tokenWithString:strokeIndexes:wordID:recognitionScore:combinedScore:alignmentScore:properties:substrokeCount:bounds:
isEquivalentToToken:
_string
_strokeIndexes
_wordID
_recognitionScore
_combinedScore
_alignmentScore
_properties
_substrokeCount
_bounds
TI,R,N,V_wordID
T@"NSString",R,C,N,V_string
T@"NSIndexSet",R,C,N,V_strokeIndexes
Td,R,N
TQ,R,N
Tq,R,N
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
setString:
addIndexes:
setStrokeIndexes:
setWordID:
setRecognitionScore:
setCombinedScore:
setAlignmentScore:
setProperties:
setSubstrokeCount:
setBounds:
appendToken:
T@"NSString",C,D,N
TI,D,N
Td,D,N
TQ,D,N
T{CGRect={CGPoint=dd}{CGSize=dd}},D,N
stringWithCString:encoding:
initWithComputeUnits:
fileURLWithPath:
modelWithContentsOfURL:configuration:error:
lastPathComponent
stringByDeletingPathExtension
stringByDeletingLastPathComponent
stringByAppendingString:
stringByAppendingPathComponent:
cStringUsingEncoding:
modelDescription
inputDescriptionsByName
multiArrayConstraint
shape
objectAtIndex:
unsignedIntValue
outputDescriptionsByName
dataType
numberWithInteger:
numberWithUnsignedInt:
arrayWithObjects:count:
initWithShape:dataType:error:
dataPointer
objectAtIndexedSubscript:
bitmapRepresentationForSize:
setObject:forKeyedSubscript:
initWithDictionary:error:
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
initWithUsesCPUOnly:
predictionFromFeatures:options:error:
localizedDescription
featureValueForName:
multiArrayValue
setMaxComputationBatchSize:
strides
enumerateSubstringsInRange:options:usingBlock:
enableCachingIfAvailable
setEnableCachingIfAvailable:
enableGen2ModelIfAvailable
setEnableGen2ModelIfAvailable:
enableGen2CharacterLMIfAvailable
setEnableGen2CharacterLMIfAvailable:
_enableCachingIfAvailable
_enableGen2ModelIfAvailable
_enableGen2CharacterLMIfAvailable
TB,N,V_enableCachingIfAvailable
TB,N,V_enableGen2ModelIfAvailable
TB,N,V_enableGen2CharacterLMIfAvailable
defaultLocaleForRecognitionType:withMode:
initWithMode:locale:learningDictionaryURL:recognizerOptions:
isLocaleSupported:withMode:
stringForRecognitionMode:
initWithMode:locale:contentType:enableCachingIfAvailable:enableGen2ModelIfAvailable:enableGen2CharacterLMIfAvailable:
defaultMinimumDrawingSize
_reloadEngineAndResources
initWithType:mode:locale:learningDictionaryURL:
numberWithDouble:
_defaultPunctuationStringsOutputScores:maxCandidateCount:
numberWithInt:
indexSetWithIndexesInRange:
doubleValue
numberWithBool:
initWithString:score:wordRanges:wordIDs:wordRecognitionScores:wordCombinedScores:wordStrokeSets:wordLexicalEntries:wordPatternEntries:rareWordIndexes:inappropriateWordIndexes:isTextReplacement:
indexPathWithIndex:
initWithTokenRows:
initWithTokenColumns:transcriptionPaths:scores:recognizerGenerationIdentifier:
isInappropriateString:
_transliterationVariantsForString:
shouldGenerateDigitLetterAlternatives
_alternativeInterpretationsForString:
substringToIndex:
shouldEnforceGrammarOnTransliterations
rootCursorForContentType:inNetwork:forFirstSegmentGroup:
newCursorByAdvancingWithString:fromCursor:inNetwork:
newCursorByAdvancingWithSymbol:fromCursor:inNetwork:
replaceOccurrencesOfString:withString:options:range:
mecabraInputMethodType
initMecabraIfNeededWithType:learningDictURL:
_unloadEngineAndResources
newRecognitionEngine
newFreeFormEngine
isMainThread
newLanguageModelForRecognizer:async:synchronizationQueue:
newSpellChecker
newStaticLexicon:
newPhraseLexicon:
newCJKStaticLexicon
newOVSStringCheckerWithStaticLexicon:customLexicon:
newPatternFST
newPostProcessingFST
newGrammarFST
newRadicalClusterFST
newTransliterationVariantMap
whitelistMecabraRareCharacters
newCharacterLanguageModelAndMap:force:
newCTCRecognitionModel
newMecabraWrapper
_initializeTextDecoder
_initializePostProcessor
mode
_loadMecabraIfNeeded
mecabra
shouldLoadCJKLexicons
shouldForwardMecabraOTAAssetsUpdate
newLanguageModel
removeAllObjects
setObject:forKey:
completionsForCandidate:candidateContext:prefix:option:
containsObject:
rangeValue
addIndex:
initWithType:mode:locale:
addCharactersInRange:
sketchDescriptionForCode:
sketchCodeForDescription:
orientationRepresentationForSampling:convolutionWidth:
strokeCount
initWithString:score:rotation:center:size:
initWithString:score:rotation:vertex1:vertex2:vertex3:
initWithString:score:rotation:center:size:stemLocation:stemWidth:
cumulativePointToPointDistance
distanceBetweenFirstAndLastPoint
initWithScore:
initWithString:score:rotation:upperLeftPoint:upperRightPoint:lowerLeftPoint:lowerRightPoint:size:
initWithString:score:rotation:center:size:controlPointLocation:
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:
pointCount
valueWithPoint:
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:pathPoints:
_effectiveMaxRecognitionResultCount
insertObject:atIndex:
chatBubbleCandidateResultForDrawing:candidate:rejectionResult:
ellipseCandidateResultForDrawing:candidate:
rectangleCandidateResultForDrawing:candidate:
triangleCandidateResultForDrawing:candidate:
starCandidateResultForDrawing:candidate:
lineCandidateResultForDrawing:candidate:
heartCandidateResultForDrawing:candidate:
pentagonCandidateResultForDrawing:candidate:
outlineArrowCandidateResultForDrawing:candidate:
manhattanLineCandidateResultForDrawing:candidate:rejectionResult:
cloudCandidateResultForDrawing:candidate:rejectionResult:
score
setScore:
exchangeObjectAtIndex:withObjectAtIndex:
removeLastObject
firstObject
inappropriateWordIndexes
predicateWithBlock:
filterUsingPredicate:
_initialContextRectFromRecognizerOptions:
shouldRefineChineseCharacterCandidates
_refineChineseCharacterCandidates:drawing:
shouldApplyLMRescoring
_rescoreCandidatesWithLanguageModel:history:
shouldTransliterateAndSynthetizeCandidates
_applyTransliterationAndSyntheticCandidates:
shouldPromoteCJKCommonCharacters
isRareChineseEntry:
segments
_resolvedStrokeIndexes:segmentGroup:segmentOffset:substrokeCount:
shouldTransformCharacterProbabilitiesIntoLogScores
mecabraRareWordIndexes:wordRanges:
indexSetWithIndex:
_textReplacementResultForLegacyRecognitionResult:
_removeOVSResults:withHistory:
wordStrokeSets
tokenColumnCount
transcriptionWithPath:columnRange:filterLowConfidence:excludeGibberish:rejectionRate:tokenProcessingBlock:
_calculateJointWordLMScoreForString:wordRanges:wordIDs:patternEntries:history:historyLength:
decimalDigitCharacterSet
letterCharacterSet
invertedSet
boolValue
rangeOfCharacterFromSet:options:range:
setObject:atIndexedSubscript:
indexOfObject:
_tokensUsingLMTokenizerForString:wordRanges:nonWordPatterns:outTokenIDs:
unsignedIntegerValue
maximumLengthOfBytesUsingEncoding:
getBytes:maxLength:usedLength:encoding:options:range:remainingRange:
locale
initWithBytes:length:encoding:
whitespaceAndNewlineCharacterSet
rangeOfString:options:range:
shouldPerformGlobalBestSearch
shouldPerformGlobalBestSearchWithSmallLattice
shouldPerformIntegratedLexiconExpansion
shouldPenalizeLetterInsertion
shouldApplyLexicalPenalty
shouldComputeStrokePenalties
shouldExpandCodePoints
shouldPenalizePrefixes
shouldApplyRomanPostProcessing
tokenizedTextResultForRomanLatticePaths:history:activeHistoryRange:startNode:segmentGroup:
shouldApplyChinesePostProcessing
tokenizedTextResultForChineseLatticePaths:maximumPathCount:network:mecabraIDs:startNode:endNode:segmentGroup:
indexOfObjectPassingTest:
tokenizedTextResultForRomanSingleWordLatticePaths:history:activeHistoryRange:startNode:segmentGroup:
shouldTransliterateSentences
_applySentenceTransliterationCandidates:codesLen:codesMax:
stringByReplacingOccurrencesOfString:withString:
rareWordIndexes
removeObjectAtIndex:
wordCombinedScores
floatValue
_tokenizedTextResultFromResults:segmentGroup:offsetSegment:decodedStrokeSets:spaceBehavior:
adjustColumns
alphanumericCharacterSet
correctionsForString:shouldUseErrorModel:forLocale:
transcriptionPaths
transcriptionPathScores
tokenColumns
indexAtPosition:
tokensInTranscriptionPath:atColumnIndex:
tokenRows
spellCheckerCorrectionsForToken:spellChecker:languageModel:locale:
replaceObjectAtIndex:withObject:
recognizerGenerationIdentifier
shouldAutoCapitalize
characterType:
_updateResults:string:score:recognitionScore:lexicalEntry:patternEntry:isInappropriateWord:wordID:wordStrokeSet:
shouldApplyDiacriticSensitivity
sortUsingComparator:
_filterNonHumanFriendlyCandidates:
_adjustResultsForConfusableCharacters:
wordLexicalEntries
lastObject
wordPatternEntries
shouldUseCaching
setCachedDrawing:
supportedSegmentationStrategy
strokeIndicesSortedByMinXCoordinate
totalSegmentCount
_historyStringFromRecognizerOptions:
precomposedStringWithCanonicalMapping
_precedingSpaceBehaviorFromRecognizerOptions:
lengthOfBytesUsingEncoding:
sortedDrawingUsingMinXCoordinate
shouldFallbackOnSingleCharacterExpansion
recognitionResultsForSingleCharacterDrawing:segmentGroup:options:history:
appendTokenColumns:
matchingStrokePrefixRangeForDrawing:
_cachingWithMatchingStrokeRange:drawing:
_sortedIndexesForSegmentGroup:drawing:
_createCandidateNetworkFromSegmentationNetwork:segmentGroup:drawing:boundsAtNode:matchingStrokeRange:sortedSegmentIndexes:shouldCancel:
shouldComposeLexiconWithNetwork
_textResultWithNetworkComposeFromCandidateNetwork:segmentGroup:drawing:maxRecognitionResultCount:history:totalStrokeCount:totalSubstrokeCount:
setTranscriptionPaths:scores:
shouldExpandLexiconInNetwork
_textResultWithLexiconExpansionFromCandidateNetwork:history:prefix:activeHistoryRange:rootStaticCursor:rootCustomCursor:rootPatternCursor:segmentGroup:maxRecognitionResultCount:precedingSpaceBehavior:shouldPerformNoSpaceRecognition:totalStrokeCount:totalSubstrokeCount:shouldCancel:
_calculateBestTranscriptionPaths:scores:fromTokenizedResult:pathCount:history:skipLMRescoring:
shouldKeepDuplicateTokenIDs
trimTokensToTranscriptionPathCount:
shouldKeepOutOfPatternCandidates
filterCandidatesWithOutOfPattern:duplicateTokenIDs:keepOutOfLexiconAlternatives:keepAlternativeLengths:keepSubstrings:shouldKeepOriginalSpelling:
_addAlternativeCandidatesForTokenizedResult:
_contextTokenIDsFromHistory:maxCharacterLength:maxTokenCount:
refineAlternativeTokens:historyTokenIDs:languageModel:
contentTypeForNoSpaceRecognition
_createNetworkTruncatedPrefixStringUsingPrefix:fullHistoryStringLength:hasLexiconCursor:prefixStringLength:hasComplexChars:activeHistoryRange:
_mininmumPathCount
bestPathsFromNetwork:pathCount:staticLexiconCursor:customLexiconCursor:patternCursor:history:activeHistoryRange:mecabraIDs:segmentGroup:precedingSpaceBehavior:effectiveContentType:totalStrokeCount:totalSubstrokeCount:
classifiableDrawing
edgeIndex
strokeGroup
_adjustCandidatesForConfusableCharacters:
shouldDetectChinesePunctuation
_adjustCandidatesForChinesePunctuation:segmentDrawing:completeDrawing:
shouldDetectRomanPunctuation
_adjustCandidatesForRomanPunctuation:segmentDrawing:
numberOfSegments
numberOfSubstrokes
_addEdgesFromCandidates:toEdges:referenceEdge:network:consumedSegmentCount:numSubstrokes:
engineCandidateCount
shouldApplyCandidatesThresholding
_candidateLatticePruningThresholdForEdgeType:
appendSegment:fromDrawing:
_computeLocalFrameWithLeftBounds:rightBounds:
initWithEdgeIndex:numberOfSubstrokes:numberOfSegments:classifiableDrawing:strokeGroup:
_classifyEdgeDrawingsFromContexts:allEdges:segmentationNetwork:candidateNetwork:cachedEdgeSet:completeDrawing:allowSmallerFinalBatch:shouldCancel:
removeObjectsInRange:
shouldRelaxFinalCandidatesThresholding
_stringForCode:
engine
shouldApplyLMSorting
wordRanges
wordIDs
intValue
wordRecognitionScores
containsIndex:
shouldUseTokenPrecedingSpaces
isTextReplacement
indexPathByAddingIndex:
_calculateJointWordLMScoreForTokenPath:tokenizedResult:history:historyLength:pathTranscription:
_lmRescoringWeightForPath:
UTF8String
arrayWithObject:
subarrayWithRange:
strokeIndexSet
enumerateIndexesUsingBlock:
_tokenFromLegacyResult:wordIndex:strokeSet:substrokeCount:
addTokenRowWithTokens:
setTokenColumns:
modelName
ch_sentenceEndPunctuationCharacterSet
shouldApplyLatinSpacingForLocale:
newlineCharacterSet
generateSegmentsFromDrawing:
removeAllIndexes
initWithSegmentGroupIndex:segments:
_recognitionResultsForMultipleCharacterDrawing:segmentGroup:options:shouldCancel:
addIndexesInRange:
shouldRunNextGenRecognizer
_resultUsingNextGenerationPipelineWithDrawing:options:
initWithResult:leftContext:contentType:
process:options:
result
_resultUsingSegmentAndDecodePipelineWithDrawing:insight:options:shouldCancel:
shouldFilterLowProbabilityTranscriptionPaths
tokenizedResultWithFilteredPaths:
_initializeOVSCleanupPostProcessor
_setupRecognitionInsightRecording
_shouldReturnDefaultResultsForDrawing:
_defaultPunctuationResultWithStrokeCount:
_tokenizedTextRecognitionResultForDrawing:options:shouldCancel:
recordConfigurationForRecognizer:options:
recordTextResult:recognitionError:
_defaultLegacyPunctuationResultsWithStrokeCount:
recognitionResultsForSketchDrawing:options:
_legacyTextRecognitionResultsForDrawing:options:shouldCancel:
legacyTextRecognitionResults
recognitionResultsForDrawing:options:shouldCancel:
indexesOfStrokesSmallerThanSize:
_refineCandidates:withAllowedCandidateCodes:
boundsForStrokeIndex:
expectedMaxDotCount:
shouldTreatAllSmallStrokesAsPunctuation
_penalizeCandidatesForRomanPunctuation:punctuationStrokeCount:
removeIndexes:
convexHullForStrokes:inDrawing:
enlargedConvexHull:withMargin:
threePointsOrientationWithOrigin:pointA:pointB:
distanceFromPoint:toRectangle:
distanceFromPoint:toSegmentFromPoint:toPoint:
lowercaseLetterCharacterSet
uppercaseLetterCharacterSet
shouldApplyCharacterLMRescoring
shouldReplaceInvalidTokenIDs
_tokenIDForUNKCharacterString:
precedingSpaceDefaultBehavior
getValue:
maxRecognitionResultDefaultCount
initWithMode:locale:contentType:autoCapitalizationMode:autoCorrectionMode:enableCachingIfAvailable:enableGen2ModelIfAvailable:enableGen2CharacterLMIfAvailable:
_setConfiguration:
isEqualToRecognizerConfiguration:
hasSameResourcesAsConfiguration:
hasSamePostProcessingAsConfiguration:
recordInsightRequest:
_updatePrecedingAndTrailingSeparatorsForTopCandidate:history:textAfter:locale:outTrailingSeparator:inFirstTokenHasPrecedingSpace:outFirstTokenHasPrecedingSpace:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
initWithMode:locale:
recognitionMode
maxRecognitionResultCount
setMaxRecognitionResultCount:
activeCharacterSet
setActiveCharacterSet:
minimumDrawingSize
setMinimumDrawingSize:
Ti,R,N
Ti,N
T@"NSLocale",R,C,N
TQ,N
T@"NSCharacterSet",&,N
T{CGSize=dd},N
TB,R,N
initWithMode:locale:recognizerOptions:
initWithMode:locale:learningDictionaryURL:
initWithType:mode:learningDictionaryURL:
isOVSString:
transliterationVariantsForString:
_isLocaleSupported:
updateAddressBookLexicon:
updateUserDictionaryLexicon:
updateMecabraWithRegionalOTAAssets:nonRegionalOTAAssets:
setCustomLexicon:customVocabulary:
setCustomPhraseLexicon:
setTextReplacements:
_updateLanguageModel:
candidatesCleared
candidateAccepted:
completionsForCandidate:prefix:option:
strokeIndexesForLastCharacter
initWithType:mode:
supportedCharacterSet
supportedStrings
characterSetForStrings:
endpointsForDrawing:startLocation:endLocation:
bestTranscriptionPathsForTokenizedResult:scores:history:
recognitionEngineCachingKey
_ovsCleanupRecognitionResult:options:
textRecognitionResultForDrawing:options:shouldCancel:
recognitionResultsForDrawing:options:
_textAfterFromRecognizerOptions:
_drawingAnchorPointFromRecognizerOptions:
setRecognitionType:
setRecognitionMode:
setLocale:
recognitionType
setEngine:
freeformEngine
setFreeformEngine:
recognitionModel
setRecognitionModel:
textDecoder
setTextDecoder:
recognitionQueue
setRecognitionQueue:
radicalClusterFST
setRadicalClusterFST:
formatGrammarFST
setFormatGrammarFST:
patternFST
setPatternFST:
postProcessingFST
setPostProcessingFST:
configuration
languageModel
setLanguageModel:
lmVocabulary
setLmVocabulary:
characterLanguageModel
setCharacterLanguageModel:
cjkStaticLexicon
setCjkStaticLexicon:
cjkDynamicLexicon
setCjkDynamicLexicon:
staticLexicon
setStaticLexicon:
phraseLexicon
setPhraseLexicon:
customLexicon
setCustomLexicon:
customPhraseLexicon
textReplacements
textReplacementLowercasedKeyMapping
setTextReplacementLowercasedKeyMapping:
spellChecker
setSpellChecker:
mecabraWrapper
setMecabraWrapper:
ovsStringChecker
setOvsStringChecker:
learningDictionaryURL
setLearningDictionaryURL:
cachedDrawing
cachedResults
setCachedResults:
characterIDMap
setCharacterIDMap:
transliterationVariantMap
setTransliterationVariantMap:
icuTransliterator
setIcuTransliterator:
lastCharacterSegmentCount
setLastCharacterSegmentCount:
lastCharacterSegmentIndexes
setLastCharacterSegmentIndexes:
postProcessor
setPostProcessor:
ovsCleanupPostProcessor
setOvsCleanupPostProcessor:
.cxx_construct
_nextRecognitionInsightRequest
_activeRecognitionInsight
_whitelistMecabraRareCharacters
_recognitionType
_maxRecognitionResultCount
_activeCharacterSet
_engine
_freeformEngine
_recognitionModel
_textDecoder
_recognitionQueue
_radicalClusterFST
_formatGrammarFST
_patternFST
_postProcessingFST
_configuration
_languageModel
_lmVocabulary
_characterLanguageModel
_cjkStaticLexicon
_cjkDynamicLexicon
_staticLexicon
_phraseLexicon
_customLexicon
_customPhraseLexicon
_textReplacements
_textReplacementLowercasedKeyMapping
_spellChecker
_mecabraWrapper
_ovsStringChecker
_learningDictionaryURL
_cachedDrawing
_transliterationVariantMap
_icuTransliterator
_lastCharacterSegmentCount
_lastCharacterSegmentIndexes
_postProcessor
_ovsCleanupPostProcessor
_minimumDrawingSize
_cachedResults
_characterIDMap
T^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}},N,V_engine
T^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}},N,V_freeformEngine
T@"CHCTCRecognitionModel",&,N,V_recognitionModel
T@"CVNLPCTCTextDecoder",&,N,V_textDecoder
T@"NSObject<OS_dispatch_queue>",&,N,V_recognitionQueue
T^v,N,V_radicalClusterFST
T^v,N,V_formatGrammarFST
T@"CHPatternNetwork",&,N,V_patternFST
T@"CHPatternNetwork",&,N,V_postProcessingFST
T@"CHRecognizerConfiguration",&,N,S_setConfiguration:,V_configuration
T^v,N,V_languageModel
T^v,N,V_lmVocabulary
T^v,N,V_characterLanguageModel
T^v,N,V_cjkStaticLexicon
T^v,N,V_cjkDynamicLexicon
T^{_LXLexicon=},N,V_staticLexicon
T^{_LXLexicon=},N,V_phraseLexicon
T^{_LXLexicon=},N,V_customLexicon
T^{_LXLexicon=},N,V_customPhraseLexicon
T@"NSDictionary",&,N,V_textReplacements
T@"NSMutableDictionary",&,N,V_textReplacementLowercasedKeyMapping
T@"CHSpellChecker",&,N,V_spellChecker
T@"CHMecabraWrapper",&,N,V_mecabraWrapper
T@"CHStringOVSChecker",&,N,V_ovsStringChecker
T@"NSURL",&,N,V_learningDictionaryURL
T@"CHDrawing",C,N,V_cachedDrawing
T{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>={__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>=Q}}},N,V_cachedResults
T{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>={__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>=Q}}},N,V_characterIDMap
T^{VariantMap=^i^i^ii^iQ},N,V_transliterationVariantMap
T^^v,N,V_icuTransliterator
TQ,N,V_lastCharacterSegmentCount
T@"NSMutableIndexSet",&,N,V_lastCharacterSegmentIndexes
T@"CHPostProcessingManager",&,N,V_postProcessor
T@"CHPostProcessingManager",&,N,V_ovsCleanupPostProcessor
T@"NSLocale",C,N
Ti,N,V_recognitionType
TB,N
TQ,N,V_maxRecognitionResultCount
T@"NSCharacterSet",&,N,V_activeCharacterSet
T{CGSize=dd},N,V_minimumDrawingSize
recordInsightWithRequest:
recordedInsightFromLastRequest
T@"CHRecognitionInsight",R,N
_edgeIndex
_numberOfSubstrokes
_numberOfSegments
_classifiableDrawing
_strokeGroup
TQ,R,N,V_edgeIndex
Tq,R,N,V_numberOfSubstrokes
Tq,R,N,V_numberOfSegments
T@"CHClassifiableDrawing",R,N,V_classifiableDrawing
T{set<long, std::less<long>, std::allocator<long>>={__tree<long, std::less<long>, std::allocator<long>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::less<long>>=Q}}},R,N,V_strokeGroup
directionalFeaturesInputName
_extractFeaturesFromDrawing:inputName:interpointDistance:initialVectorAnchorPoint:normalizeFeatures:padFeatures:error:
featureCounts
sequenceCompression
gapFeatureIndex
inputNames
distanceFeatureIndex
sinAlphaFeatureIndex
cosAlphaFeatureIndex
distMean
distStd
featureProviderForDrawing:initialVectorAnchorPoint:normalizeFeatures:padFeatures:outStrokeEndings:outInputSequenceLength:outOutputSequenceLength:
recognizeDrawing:minimumDrawingSize:initialVectorAnchorPoint:activeCharacterSet:outStrokeEndings:
_extractFeaturesFromDrawing:inputName:interpointDistance:error:
characterProbabilityOutputName
codeMap
blankIndex
spaceIndex
normalizeFeatures
setNormalizeFeatures:
setDistMean:
setDistStd:
interpointDistance
setInterpointDistance:
hasBatchFirstFeatureArrayShape
setHasBatchFirstFeatureArrayShape:
_stringCodeMap
_normalizeFeatures
_hasBatchFirstFeatureArrayShape
_sequenceCompression
_distanceFeatureIndex
_sinAlphaFeatureIndex
_cosAlphaFeatureIndex
_gapFeatureIndex
_directionalFeaturesInputName
_characterProbabilityOutputName
_codeMap
_blankIndex
_spaceIndex
_distMean
_distStd
_interpointDistance
__stringCodeMap
T@"NSOrderedSet",R,V__stringCodeMap
Tq,R,N,V_sequenceCompression
Tq,R,N,V_distanceFeatureIndex
Tq,R,N,V_sinAlphaFeatureIndex
Tq,R,N,V_cosAlphaFeatureIndex
Tq,R,N,V_gapFeatureIndex
T@"NSString",R,N,V_directionalFeaturesInputName
T@"NSString",R,N,V_characterProbabilityOutputName
T^{CHCodeMap=*Q^II},R,N,V_codeMap
Tq,R,N,V_blankIndex
Tq,R,N,V_spaceIndex
TB,N,V_normalizeFeatures
Td,N,V_distMean
Td,N,V_distStd
Td,N,V_interpointDistance
TB,N,V_hasBatchFirstFeatureArrayShape
initWithMode:locales:activeCharacterSetPerLocale:recognizerOptions:
removeObjectForKey:
initWithMachServiceName:options:
handleRecognitionRequest:withReply:
transcriptionPathsForTokenizedResult:recognitionRequest:withReply:
interfaceWithProtocol:
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
setRemoteObjectInterface:
_teardownXPCConnection
setInterruptionHandler:
setInvalidationHandler:
resume
invalidate
_recognitionRequestWithDrawing:options:
_recognitionResultForRequest:error:
endStroke
synchronousRemoteObjectProxyWithErrorHandler:
locales
priority
initWithLocales:recognitionMode:drawing:options:priority:
activeCharacterSetPerLocale
setActiveCharacterSetPerLocale:
shouldUseTextReplacements
setShouldUseTextReplacements:
_setupXPCConnectionIfNeeded
setHasBeenSubmitted:
isEqualToArray:
isEqualToDictionary:
isEqualToRemoteRecognizer:
drawingStrokeLimitForLocale:
maxRequestStrokeCountForLocale:
absoluteMaxStrokeCountPerRequest
textRecognitionResultForDrawing:options:error:
transcriptionPathsForTokenizedTextResult:withHistory:scores:error:
setPriority:
_connection
_shouldUseTextReplacements
_recognitionMode
_locales
_activeCharacterSetPerLocale
_priority
__connection
T@"NSXPCConnection",R,N,V__connection
T@"NSArray",R,C,N,V_locales
T@"NSDictionary",R,C,N,V_activeCharacterSetPerLocale
TB,N,V_shouldUseTextReplacements
Tq,N,V_priority
Ti,R,N,V_recognitionMode
Ti,N,V_contentType
Ti,N,V_autoCapitalizationMode
Ti,N,V_autoCorrectionMode
TB,R,N,V_enableCachingIfAvailable
TB,R,N,V_enableGen2ModelIfAvailable
TB,R,N,V_enableGen2CharacterLMIfAvailable
orderedStrokes
strokeGroups
strokeIdentifiers
unionSet:
removeObject:
isPointEnumerationSupportedForStroke:
indexesOfObjectsPassingTest:
removeObjectsAtIndexes:
strokeIdentifierFromData:
strokeForIdentifier:
strokeIdentifier
strokeProviderVersion
encodedStrokeIdentifier:
enumeratePointsWithDistanceStep:usingBlock:
enumeratePointsWithTimestep:usingBlock:
enumeratePointsForStroke:interpolationType:resolution:usingBlock:
firstStrokeIdentifier
lastStrokeIdentifier
endTimestamp
startTimestamp
convexHullForPoints:
getAddedStrokes:removedStrokeIdentifiers:inStrokeProvider:lastGroupingResult:
strokeForIdentifier:inStrokeProvider:
strokeIdentifiersForData:withStrokeProvider:
encodedStrokeIdentifiers:withStrokeProvider:
durationOfStrokesInStrokeGroup:strokeProvider:
speedForFinalTimeRange:stroke:
arcLengthForStroke:
boundingBoxOfPoints:rotatedAroundPoint:byAngle:
unionStrokeBounds:usingStrokeCountLimit:reverseOrder:
unionStrokeBounds:aroundXPosition:usingOneSideStrokeCountLimit:
convexHullForStroke:
circumferenceRatioOfCircleFittedToPoints:circleCenter:circleRadius:
vectorMeanWithoutOutliers:
lineOrientationForStrokePoints:error:
regularizedPathFromPoints:delta:gamma:outError:
setLocales:
setDrawing:
setOptions:
setWithArray:
decodeObjectOfClasses:forKey:
decodeFloatForKey:
decodeBoolForKey:
encodeFloat:forKey:
encodeBool:forKey:
configurationKey
isEqualToDrawing:
options
isEqualToRemoteRecognitionRequest:
stringForAutoCapitalizationMode:
stringForAutoCorrectionMode:
allValues
recognizerConfigurationKeyWithLocale:
hasBeenSubmitted
_hasBeenSubmitted
_options
T@"NSArray",C,N,V_locales
T@"NSDictionary",C,N,V_activeCharacterSetPerLocale
Ti,N,V_recognitionMode
T@"NSDictionary",C,N,V_options
T@"CHDrawing",C,N,V_drawing
TB,N,V_hasBeenSubmitted
isSkippableScriptCode:
dataUsingEncoding:
bytes
shouldCorrectionGesturesSnapToTokensForScriptCode:
isCharacterFullWidth:
isRightToLeftScriptForCharacter:
shouldRelaxCharacterBoundsPercentageOverlapForScript:
isCharacterEmoji:
appendFormat:
insightRequest
recognizerActiveCharacterSet
recognizerLocale
recognizerRecognitionModeDescription
recognizerContentTypeDescription
autoCapitalizationModeDescription
autoCorrectionModeDescription
recognizerMaxRecognitionResultCount
recognizerMinimumDrawingSize
recognizerOptions
enumerateKeysAndObjectsUsingBlock:
inputDrawing
textResult
recognizerRecognitionMode
recognizerContentType
setInsightRequest:
setRecognizerLocale:
setRecognizerRecognitionMode:
setRecognizerContentType:
setRecognizerActiveCharacterSet:
setRecognizerOptions:
setRecognizerMaxRecognitionResultCount:
setRecognizerMinimumDrawingSize:
setInputDrawing:
setTextResult:
recognitionError
setRecognitionError:
_recognizerRecognitionMode
_recognizerContentType
_insightRequest
_recognizerLocale
_recognizerActiveCharacterSet
_recognizerOptions
_recognizerMaxRecognitionResultCount
_inputDrawing
_textResult
_recognitionError
_recognizerMinimumDrawingSize
T@"CHRecognitionInsightRequest",&,N,V_insightRequest
T@"NSLocale",C,N,V_recognizerLocale
Ti,N,V_recognizerRecognitionMode
Ti,N,V_recognizerContentType
T@"NSCharacterSet",C,N,V_recognizerActiveCharacterSet
T@"NSDictionary",C,N,V_recognizerOptions
TQ,N,V_recognizerMaxRecognitionResultCount
T{CGSize=dd},N,V_recognizerMinimumDrawingSize
T@"CHDrawing",C,N,V_inputDrawing
T@"CHTokenizedTextResult",C,N,V_textResult
T@"NSError",C,N,V_recognitionError
T@"NSString",R,N
recordInputDrawing:
componentsSeparatedByString:
dataWithBytes:length:
dictionary
dataWithJSONObject:options:error:
initWithData:encoding:
drawingTransformedWithTranslation:scaleFactor:
startCutPoint
strokeIndex
endCutPoint
pointIndex
allocWithZone:
initWithCGImage:
initWithContentsOfFile:
initWithContentsOfXYString:
initWithContentsOfJSONDictionary:
drawingWithStrokesFromIndexSet:
centroidForStrokeIndexes:
boundsForStrokeIndexes:
strokeBoundsAtIndex:
clear
isPrefixForDrawing:
xyRepresentation
jsonStringRepresentation
drawingScaledByFactor:
drawingSpatiallyResampled:outputPointMap:
setLineHeight:
boundingBoxForDrawingSegmentFromCutPoint:toCutPoint:
averageCharacterHeightEstimation:minChunkHeight:
debugQuickLookObject
T{CHDrawingStrokes={vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}{vector<bool, std::allocator<bool>>=^QQ{__compressed_pair<unsigned long, std::allocator<unsigned long>>=Q}}{vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}qI{Matrix<double>=^^?^dII}d{vector<int, std::allocator<int>>=^i^i{__compressed_pair<int *, std::allocator<int>>=^i}}},N,V_drawing
sortedArrayUsingComparator:
sortedCHCutPointArray:
initWithStrokeIndex:pointIndex:isEndOfStroke:
isStartOfStroke
isEndOfStroke
_isEndOfStroke
_strokeIndex
_pointIndex
Tq,R,N,V_strokeIndex
Tq,R,N,V_pointIndex
TB,R,N,V_isEndOfStroke
isSinglePointSegment
initWithSegmentID:startCutPoint:endCutPoint:referenceDrawing:
segmentID
boundingBoxFromSegmentID:toSegmentID:withSegments:withSourceDrawing:
indexForSegmentID:fromSegments:
segmentBounds
contextBounds
setContextBounds:
_segmentID
_startCutPoint
_endCutPoint
_segmentBounds
_contextBounds
T@"NSNumber",R,N,V_segmentID
T@"CHCutPoint",R,N,V_startCutPoint
T@"CHCutPoint",R,N,V_endCutPoint
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N,V_segmentBounds
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_contextBounds
segmentGroupIndex
_segmentGroupIndex
_segments
Tq,R,N,V_segmentGroupIndex
T@"NSArray",R,N,V_segments
_detectCorners
initWithIndexSet:
cornerIndexes
firstIndex
resampledDrawing
_distance:p1:p2:
minimumSignificantSegmentLength
_resolveResampledDirectionChangePointIndexes:
_resampleDrawing:outputPointMap:
_cornerIndexSet
_strawSize
sortedArrayUsingSelector:
numberWithUnsignedLong:
_postProcessCorners:corners:straws:
_detectDirectionalChanges
_resamplingDistance:
shouldUseDynamicSampling
_isLine:usingThreshold:p1:p2:
_strokeHalfwayCorner:p1:p2:
_removeColinearCorners:usingThreshold:corners:
_removeColinearCorners:usingDistanceThreshold:usingLowerThreshold:usingUpperThreshold:corners:
_removeAdjacentCorners:corners:straws:
_pathDistance:p1:p2:
directionChangeCornerIndexes
setMinimumSignificantSegmentLength:
setShouldUseDynamicSampling:
directionChangeCount
highestDirectionChangeCount
_directionChangeCornerIndexes
_resampledDrawingPointMap
_shouldUseDynamicSampling
_minimumSignificantSegmentLength
_resampledDrawing
_directionChangeCount
_highestDirectionChangeCount
__strawSize
__cornerIndexSet
__directionChangeCornerIndexes
__resampledDrawingPointMap
TQ,R,N,V__strawSize
T@"NSMutableIndexSet",R,C,N,V__cornerIndexSet
T@"NSMutableIndexSet",R,C,N,V__directionChangeCornerIndexes
T{vector<std::map<long, long>, std::allocator<std::map<long, long>>>=^v^v{__compressed_pair<std::map<long, long> *, std::allocator<std::map<long, long>>>=^v}},R,N,V__resampledDrawingPointMap
TB,N,V_shouldUseDynamicSampling
Td,N,V_minimumSignificantSegmentLength
T@"CHDrawing",R,C,N,V_resampledDrawing
TQ,R,N,V_directionChangeCount
TQ,R,N,V_highestDirectionChangeCount
enumerateObjectsUsingBlock:
isEqualToTokenizedTextResultColumn:
indexOfEquivalentTokenRow:tokenRange:
containsStartingTokenEquivalentToToken:
_tokenRows
T@"NSArray",R,C,N,V_tokenRows
T@"NSIndexSet",R,N
_mutableTokenRows
mergeTokenRow:intoUniqueRows:
setTokenRows:
setTokenRowWithTokens:atIndex:
removeTokenRowAtIndex:
sortTokenRows
T@"NSArray",C,D,N
getIndexes:range:
indexPathWithIndexes:length:
stringByAppendingPathExtension:
languageCode
scriptCode
capitalizedString
countryCode
uppercaseString
replaceCharactersInRange:withString:
characterTypeFromString:
stringByApplyingTransform:reverse:
insertString:atIndex:
ch_emptyCharacterSet
isSupersetOfSet:
rangeOfCharacterFromSet:options:
initWithConfusion:correction:locales:leftContext:rightContext:requiresLexiconMatch:
meetsContextRequirementWithLeftContext:rightContext:
isValidForLocale:
confusion
correction
requiredLeftContext
requiredRightContext
requiresLexiconMatch
_requiresLexiconMatch
_confusion
_correction
_requiredLeftContext
_requiredRightContext
T@"NSString",R,C,N,V_confusion
T@"NSString",R,C,N,V_correction
T@"NSArray",R,N,V_locales
T@"NSCharacterSet",R,N,V_requiredLeftContext
T@"NSCharacterSet",R,N,V_requiredRightContext
TB,R,N,V_requiresLexiconMatch
nextFIFO
emitPoint:
flush
initWithFIFO:
setNextFIFO:
_nextFIFO
T@"CHPointFIFO",&,N,V_nextFIFO
strokes
setStrokes:
_strokes
T@"CHDrawing",&,N,V_strokes
T@"CHDrawing",&,N,V_drawing
initWithFIFO:width:spacing:
emitAveragedPoint
initWithFIFO:width:
width
setWidth:
spacing
setSpacing:
prevPoints
setPrevPoints:
_spacing
_width
_prevPoints
T{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}},N,V_prevPoints
TQ,N,V_width
Tf,N,V_spacing
setUnitScale:
drawingTarget
lineWidth
setNeedsDisplayInRect:
interpolateFromPoint:toPoint:controlPoint:time:
initWithFIFO:drawingTarget:
setUnitScaleForViewSize:normalizedSize:contentScaleFactor:
unitScale
emitInterpolatedPoints
setEmitInterpolatedPoints:
emissionHandler
setEmissionHandler:
path
setPath:
setLineWidth:
points
setPoints:
controlPoints
setControlPoints:
lastPoint
setLastPoint:
setDrawingTarget:
_emitInterpolatedPoints
_unitScale
_emissionHandler
_path
_lineWidth
_drawingTarget
_lastPoint
_points
_controlPoints
T{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}},N,V_points
T{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}},N,V_controlPoints
T,N,V_lastPoint
T@"<CHPointFIFODrawingTarget>",&,N,V_drawingTarget
Tf,N,V_unitScale
TB,N,V_emitInterpolatedPoints
T@?,C,V_emissionHandler
T^{CGPath=},N,V_path
Td,N,V_lineWidth
_score
Td,V_score
mecabraCandidate
_isTextReplacement
_wordRanges
_wordIDs
_wordRecognitionScores
_wordCombinedScores
_wordStrokeSets
_wordLexicalEntries
_wordPatternEntries
_rareWordIndexes
_inappropriateWordIndexes
T@"NSString",R,V_string
T@"NSArray",R,V_wordRanges
T@"NSArray",R,V_wordIDs
T@"NSArray",R,V_wordRecognitionScores
T@"NSArray",R,V_wordCombinedScores
T@"NSArray",R,V_wordStrokeSets
T@"NSArray",R,V_wordLexicalEntries
T@"NSArray",R,V_wordPatternEntries
T@"NSIndexSet",R,V_rareWordIndexes
T@"NSIndexSet",R,V_inappropriateWordIndexes
TB,R,V_isTextReplacement
initWithString:score:rotation:
rotation
_rotation
Td,R,V_rotation
startEndpointType
endEndpointType
startLocation
endLocation
midpointLocation
controlPoint
pathPoints
cornerLine
_cornerLine
_startEndpointType
_endEndpointType
_pathPoints
_startLocation
_endLocation
_midpointLocation
_controlPoint
Ti,R,V_startEndpointType
Ti,R,V_endEndpointType
T{CGPoint=dd},R,V_startLocation
T{CGPoint=dd},R,V_endLocation
T{CGPoint=dd},R,V_midpointLocation
T{CGPoint=dd},R,V_controlPoint
T@"NSArray",R,V_pathPoints
TB,R,V_cornerLine
center
size
_center
_size
T{CGPoint=dd},R,V_center
T{CGSize=dd},R,V_size
upperLeftPoint
upperRightPoint
lowerLeftPoint
lowerRightPoint
_upperLeftPoint
_upperRightPoint
_lowerLeftPoint
_lowerRightPoint
T{CGPoint=dd},R,V_upperLeftPoint
T{CGPoint=dd},R,V_upperRightPoint
T{CGPoint=dd},R,V_lowerLeftPoint
T{CGPoint=dd},R,V_lowerRightPoint
vertex1
vertex2
vertex3
_vertex1
_vertex2
_vertex3
T{CGPoint=dd},R,V_vertex1
T{CGPoint=dd},R,V_vertex2
T{CGPoint=dd},R,V_vertex3
stemLocation
stemWidth
_stemWidth
_stemLocation
T{CGPoint=dd},R,V_stemLocation
Td,R,V_stemWidth
initWithTokenColumns:transcriptionPaths:scores:trailingSeparator:recognizerGenerationIdentifier:changeableColumnCount:
initWithTokenColumns:transcriptionPaths:scores:trailingSeparator:recognizerGenerationIdentifier:
initWithBestPathTokens:pathProbabilities:trailingSeparator:recognizerGenerationIdentifier:changeableColumnCount:
indexesPassingTest:
lastIndex
setPrecedingLineBreaks:
changeableTokenColumnCount
transcriptionWithPath:columnRange:filterLowConfidence:
_rawPath
shouldFilterOutStringForToken:isGibberish:
precedingSeparatorForToken:
stringByPaddingToLength:withString:startingAtIndex:
enumerateTokensInTranscriptionPath:columnRange:tokenProcessingBlock:
_isGibberishToken:
precedingLineBreaks
topTranscription
enumerateTokensInTopTranscriptionPathWithBlock:
_rawLanguageFitnessForTranscriptionPath:locale:recognitionMode:
localeWithLocaleIdentifier:
exemplarCharacterSet
_scoreMeanAndStdForToken:forLocale:
_characterCountInToken:filteringCharacterSet:filteredCharacterCount:
_normalizedLanguageFitness:
_averageTokenRecognitionScoreInTranscriptionPath:
ch_occurrencesOfCharactersInSet:maxCount:
_legacyTextRecognitionResultForTranscriptionIndex:
numberWithFloat:
isEqualToTokenizedTextResult:
areTokenRowsEquivalent:otherRow:
_originalRowFromRow:
precedingSeparatorForTopTranscriptionPath
allKeys
trailingSeparator
addObjectsFromArray:
tokenizedTextResultWithString:strokeIndexes:bounds:trailingSeparator:recognizerGenerationIdentifier:
extendedToken:withStrokeIndexSet:alignmentScore:bounds:
tokenizedTextResultFromResults:shouldPerformStrictFiltering:
initWithBestPathTokens:pathProbabilities:trailingSeparator:recognizerGenerationIdentifier:
tokenRowsAtColumnIndex:
tokenAtLocation:
recognizerDebugDescription
rawTranscription
precedingSeparatorForRawTranscriptionPath
strokeIndexesForColumnsInRange:
isValid
tokensFromTopTranscriptionWithCharacterRange:
languageFitnessForLocale:recognitionMode:
phraseCaseCorrectedResultWithHistory:phraseLexicon:maxPhraseLength:
_tokenColumns
_transcriptionPaths
_transcriptionPathScores
_recognizerGenerationIdentifier
_precedingLineBreaks
_changeableCount
_trailingSeparator
T@"NSString",R,C,N,V_trailingSeparator
T@"NSArray",R,C,N,V_transcriptionPaths
T@"NSArray",R,C,N,V_transcriptionPathScores
T@"NSString",R,C,N
arrayByAddingObjectsFromArray:
containsIndexes:
commonStrokeSetsFromSets:tokenRow:
_columnStrokeSetsFromTokenRows:
initWithIndexes:length:
containsString:
setChangeableTokenColumnCount:
getCharIndex:
replacementErrorScoreForIntendedCharacter:actualCharacter:
transpositionErrorScoreForIntendedFirstCharacter:intendedSecondCharacter:
sharedSpellServer
newErrorModel
spellServer:findMisspelledWordInString:language:wordCount:countOnly:correction:
ch_sentenceStartPunctuationCharacterSet
spellServer:suggestGuessesForWordRange:inString:language:options:
spellServer:suggestGuessDictionariesForWordRange:inString:language:options:errorModel:
isWordInUserDictionaries:caseSensitive:
topCorrectionForString:contextBeforeToken:contextSeparator:shouldUseErrorModel:forLanguage:
errorModel
setErrorModel:
_spellServer
_errorModel
T@"CHSpellCheckerErrorModel",&,N,V_errorModel
initWithVertices:vertexCount:
_sutherlandHodgmanClipForSubjectPolygon:usingClipPolygon:
enumerateEdgesWithBlock:
vertexCount
vertices
_createClippedPolygonForPolygon:clippingLine:clippedPolygonVertexCount:
initWithRect:
area
polygonDrawing
polygonByIntersectingWithClipPolygon:
edgeCountIntersectingLineSegment:
setArea:
_area
_vertexCount
_vertices
Td,N,V_area
Tq,R,N,V_vertexCount
T^{CGPoint=dd},R,N,V_vertices
defaultManager
contentsAtPath:
JSONObjectWithData:options:error:
keysSortedByValueUsingComparator:
longLongValue
normalizedDrawing:scaleFactor:interpolationDistance:outputPointMap:
initWithModelName:
normalizedDrawing:targetHeight:minimumDrawingSize:interpolationDistance:outScaleFactor:outputPointMap:
_modelName
T@"NSString",R,N,V_modelName
initWithObjectsAndKeys:
maxSequenceLength
windowOverlap
_recursivelyPredictProbabilitiesForDrawing:features:pointRange:modelInputName:modelOutputNames:probabilities:probabilityPredictionBlock:error:cancellationBlock:
outputNames
classCounts
_model
_inputNames
_featureCounts
_outputNames
_classCounts
__model
T^{MontrealNeuralNetwork=},R,N,V__model
T@"NSArray",R,N,V_inputNames
T@"NSDictionary",R,N,V_featureCounts
T@"NSArray",R,N,V_outputNames
T@"NSDictionary",R,N,V_classCounts
initWithModelName:featureIndex:
model
resourcePath
_resourcePath
T@"MLModel",R,N,V_model
T@"NSString",R,N,V_resourcePath
normalizedDrawing:targetHeight:interpolationDistance:outputPointMap:
textStrokeProbabilityOutputName
classifyStrokesInDrawing:outTextStrokeProbabilities:cancellationBlock:
sinAngleFeatureIndex
cosAngleFeatureIndex
endpointFeatureIndex
_sinAngleFeatureIndex
_cosAngleFeatureIndex
_endpointFeatureIndex
_textStrokeProbabilityOutputName
Tq,R,N,V_sinAngleFeatureIndex
Tq,R,N,V_cosAngleFeatureIndex
Tq,R,N,V_endpointFeatureIndex
T@"NSString",R,N,V_textStrokeProbabilityOutputName
defaultWordTerminationCharacterForLocale:
initWithTextResult:terminatingSpecialCharacter:
terminatingSpecialCharacter
setTerminatingSpecialCharacter:
_terminatingSpecialCharacter
T@"CHTokenizedTextResult",&,N,V_textResult
T@"NSString",&,N,V_terminatingSpecialCharacter
initWithTextResults:
textResultToIndexMappingFromTopTranscriptionWithCharacterRange:intersectionRanges:
textResults
setTextResults:
_textResults
T@"NSArray",&,N,V_textResults
expectedMaxStrokeCount:
isCompletePattern
initWithStrokeIdentifiers:resultLevel:
resultLevel
_resultLevel
_strokeIdentifiers
Tq,R,N,V_resultLevel
T@"NSSet",R,C,N,V_strokeIdentifiers
obfuscateString:
_isInappropriateString:withLexicon:
_isInappropriateString:withTrie:
_isInappropriateTokenID:withLexicon:
initWithTrie:staticLexicon:customLexicon:flags:
isInappropriateTokenID:
_ovsTrie
_flagsFilter
_decodeLocale:supportedLanguage:supportedScript:
_stringForRecognitionLanguage:
_stringForRecognitionScript:
supportedScriptForLocale:
supportedLanguageForLocale:
isLanguageSupported:withMode:
recognitionEngineCachingKeyForRecognitionLocale:
shouldRunNextGenCharacterLM
effectiveEngineLanguage
shouldTransliterateHalfWidthPunctuations
shouldApplySemanticTokenization
shouldIdentifyChangeableColumns
shouldMergeNoPrecedingWhiteSpaceColumns
shouldAutoCorrect
isTextMode
linguisticResourcesFallbackLocale
dictionaryWithDictionary:
loadLanguageModelFromOptions:fallbackLocale:
URLWithString:
checkResourceIsReachableAndReturnError:
absoluteString
requiredInappropriateFilteringFlags
initWithFile:
shouldRemoveSpacesFromStrongURLs
initWithPatternFst:
initWithLocale:
shouldReorderSCTCConfusion
initWithMaxResultCount:
shouldConvertKanaInPostProcessing
initWithMecabra:languageModel:ovsStringChecker:promoteKanaConversion:
initWithLanguageModel:ovsStringChecker:
shouldTransliterateConfusableCharacters
initWithStaticLexicon:customLexicon:locale:
initWithAutoCapitalizationMode:shouldAutoCorrect:shouldAutoCapitalize:locale:staticLexicon:customLexicon:phraseLexicon:customPhraseLexicon:spellChecker:lmVocabulary:ovsStringChecker:textReplacements:
shouldAddAlternativeWidthCandidates
initShouldAddAlternatives:
shouldRefineCandidates
initWithShouldKeepOutOfPatternCandidates:shouldKeepDuplicateTokenIDs:shouldKeepOutOfLexiconAlternatives:shouldKeepAlternativeLengths:shouldKeepSubstrings:shouldKeepOriginalSpelling:
shouldMarkMultiWordOVS
initWithOVSStringChecker:
shouldRemoveSpacesFromHashtagsAndMentions
initWithSequence:
initWithPatternFst:patternType:capitalizationToSplit:convertToLowercase:
initForPhoneNumberFields
initForDigitFields
initProcessorDefault:processorDigits:processorPhone:processorUsername:processorEmail:processorURL:processorASCII:processorEquation:
initWithStep:
ch_latinCharacterSet
modelNameChinese
modelNameJapanese
modelNameKorean
forcedGen2ModelLocaleForLocale:
effectiveTextInputRecognitionLocales:allowFallbackSecondaryLocale:
localesByLanguageGroup:
shouldUseFullWidthSpaceBasedOnContextForLocale:
shouldSwapTopTwoResults:locales:
shouldPerformStrictCandidateFiltering:
spellCheckingLocaleForRecognitionLocale:string:
shouldAdjustGroupingForLocale:
shouldAdjustGroupingHeuristicsForVeryComplexCharacters:
modelNameLatin
allNonLatinModelNames
shouldRemoveSpaceBetweenPreviousChar:andNextChar:inLocale:
shouldInsertSpaceBetweenPreviousChar:andNextChar:inLocale:
shouldRefinePrefixQueryMatchesForLocale:
decodingCharacterLMWeight
decodingWordLMWeight
decodingLexiconWeight
decodingLexiconLowerBoundLogProbability
characterLMLowerBoundLogProbability
decodingWordLMLowerBoundLogProbability
shouldTransliterateFrenchLigatures
shouldPreserveLegacyTranscriptionPaths
newPostProcessorWithStaticLexicon:customLexicon:phraseLexicon:customPhraseLexicon:characterLM:textReplacements:postProcessingFST:languageModel:mecabraWrapper:ovsStringChecker:spellChecker:lmVocabulary:maxResultCount:
newOVSCleanupPostProcessorWithStringChecker:
_language
_script
_decoderWeightsOverride
_mode
_contentTypeForNoSpaceRecognition
_locale
Ti,R,N,V_mode
T@"NSLocale",R,C,N,V_locale
Ti,R,N,V_contentTypeForNoSpaceRecognition
sharedCharacterSetRules
_charSetRulesQueue
_expectedMaxStrokeCount:
_expectedMinStrokeCount:
_expectedMaxDotCount:
_characterType:
lowercaseCharSet
setLowercaseCharSet:
uppercaseCharSet
setUppercaseCharSet:
digitCharSet
setDigitCharSet:
startPunctuationCharSet
setStartPunctuationCharSet:
middlePunctuationCharSet
setMiddlePunctuationCharSet:
endOfWordPunctuationCharSet
setEndOfWordPunctuationCharSet:
endOfSentencePunctuationCharSet
setEndOfSentencePunctuationCharSet:
digitStartPunctuationCharSet
setDigitStartPunctuationCharSet:
digitEndPunctuationCharSet
setDigitEndPunctuationCharSet:
arithmeticOperatorCharSet
setArithmeticOperatorCharSet:
dateTimeSeparatorCharSet
setDateTimeSeparatorCharSet:
dateTimeEndLetterCharSet
setDateTimeEndLetterCharSet:
numeralEndLetterCharSet
setNumeralEndLetterCharSet:
lexiconSkipCharSet
setLexiconSkipCharSet:
containsDotCharSet
setContainsDotCharSet:
containsTwoDotsCharSet
setContainsTwoDotsCharSet:
prefixCapitalizationExceptionCharSet
setPrefixCapitalizationExceptionCharSet:
selfLoopPunctuationCharSet
setSelfLoopPunctuationCharSet:
emoticonTopCharSet
setEmoticonTopCharSet:
emoticonMiddleCharSet
setEmoticonMiddleCharSet:
emoticonBottomCharSet
setEmoticonBottomCharSet:
emailAtCharSet
setEmailAtCharSet:
emailPunctuationCharSet
setEmailPunctuationCharSet:
urlPunctuationCharSet
setUrlPunctuationCharSet:
nonSpaceSeparatorCharSet
setNonSpaceSeparatorCharSet:
punctuationThatNeedSpaceCleanup
setPunctuationThatNeedSpaceCleanup:
currencySymbols
setCurrencySymbols:
symbolsRequiringSpaceBeforeInFrench
setSymbolsRequiringSpaceBeforeInFrench:
sentenceStartPunctuationInSpanish
setSentenceStartPunctuationInSpanish:
commonJapaneseSymbols
setCommonJapaneseSymbols:
strokeMaxPenalties
setStrokeMaxPenalties:
signatureUniChar
setSignatureUniChar:
_lowercaseCharSet
_uppercaseCharSet
_digitCharSet
_startPunctuationCharSet
_middlePunctuationCharSet
_endOfWordPunctuationCharSet
_endOfSentencePunctuationCharSet
_digitStartPunctuationCharSet
_digitEndPunctuationCharSet
_arithmeticOperatorCharSet
_dateTimeSeparatorCharSet
_dateTimeEndLetterCharSet
_numeralEndLetterCharSet
_lexiconSkipCharSet
_containsDotCharSet
_containsTwoDotsCharSet
_prefixCapitalizationExceptionCharSet
_selfLoopPunctuationCharSet
_emoticonTopCharSet
_emoticonMiddleCharSet
_emoticonBottomCharSet
_emailAtCharSet
_emailPunctuationCharSet
_urlPunctuationCharSet
_nonSpaceSeparatorCharSet
_punctuationThatNeedSpaceCleanup
_currencySymbols
_symbolsRequiringSpaceBeforeInFrench
_sentenceStartPunctuationInSpanish
_commonJapaneseSymbols
__charSetRulesQueue
_strokeMaxPenalties
_signatureUniChar
T@"NSCharacterSet",&,N,V_lowercaseCharSet
T@"NSCharacterSet",&,N,V_uppercaseCharSet
T@"NSCharacterSet",&,N,V_digitCharSet
T@"NSCharacterSet",&,N,V_startPunctuationCharSet
T@"NSCharacterSet",&,N,V_middlePunctuationCharSet
T@"NSCharacterSet",&,N,V_endOfWordPunctuationCharSet
T@"NSCharacterSet",&,N,V_endOfSentencePunctuationCharSet
T@"NSCharacterSet",&,N,V_digitStartPunctuationCharSet
T@"NSCharacterSet",&,N,V_digitEndPunctuationCharSet
T@"NSCharacterSet",&,N,V_arithmeticOperatorCharSet
T@"NSCharacterSet",&,N,V_dateTimeSeparatorCharSet
T@"NSCharacterSet",&,N,V_dateTimeEndLetterCharSet
T@"NSCharacterSet",&,N,V_numeralEndLetterCharSet
T@"NSCharacterSet",&,N,V_lexiconSkipCharSet
T@"NSCharacterSet",&,N,V_containsDotCharSet
T@"NSCharacterSet",&,N,V_containsTwoDotsCharSet
T@"NSCharacterSet",&,N,V_prefixCapitalizationExceptionCharSet
T@"NSCharacterSet",&,N,V_selfLoopPunctuationCharSet
T@"NSCharacterSet",&,N,V_emoticonTopCharSet
T@"NSCharacterSet",&,N,V_emoticonMiddleCharSet
T@"NSCharacterSet",&,N,V_emoticonBottomCharSet
T@"NSCharacterSet",&,N,V_emailAtCharSet
T@"NSCharacterSet",&,N,V_emailPunctuationCharSet
T@"NSCharacterSet",&,N,V_urlPunctuationCharSet
T@"NSCharacterSet",&,N,V_nonSpaceSeparatorCharSet
T@"NSCharacterSet",&,N,V_punctuationThatNeedSpaceCleanup
T@"NSCharacterSet",&,N,V_currencySymbols
T@"NSCharacterSet",&,N,V_symbolsRequiringSpaceBeforeInFrench
T@"NSCharacterSet",&,N,V_sentenceStartPunctuationInSpanish
T@"NSCharacterSet",&,N,V_commonJapaneseSymbols
T{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>={__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>=Q}}},N,V_strokeMaxPenalties
T{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>={__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>=Q}}},N,V_signatureUniChar
T@"NSObject<OS_dispatch_queue>",R,N,V__charSetRulesQueue
nodeIndexCount
nodeIndexAtPosition:
stateType
addNodeIndex:withStateType:
cursorByAddingNodeIndex:toCursor:
setStateType:
_nodeIndexes
_stateType
TQ,N,V_stateType
unsignedLongValue
newCursorByAdvancingCursor:withSymbol:
stateTypeForNodeIndex:
patternToSymbolMap
scannerWithString:
scanHexInt:
numberWithLong:
contentTypesToPatternsMapping
rootCursorForPatternType:inNetwork:forFirstSegmentGroup:
isString:fullPattern:inNetwork:
_network
_symbols
_startNodes
_startCursorForContentTypes
leftContext
setLeftContext:
setResult:
_leftContext
_result
T@"NSString",&,N,V_leftContext
T@"CHMutableTokenizedTextResult",&,N,V_result
initWithObjects:
sequence
setSequence:
_sequence
T@"NSArray",&,N,V_sequence
applyTransform:toAllTokens:
expandPathsWithCorrectedTokens:fromTokens:correctedTokenPath:originalTokenPath:
process:
defaultProcessor
process:withProcessor:options:
digitProcessor
phoneProcessor
usernameProcessor
emailProcessor
urlProcessor
asciiProcessor
equationProcessor
setDefaultProcessor:
setDigitProcessor:
setPhoneProcessor:
setUsernameProcessor:
setEmailProcessor:
setUrlProcessor:
setAsciiProcessor:
setEquationProcessor:
_defaultProcessor
_digitProcessor
_phoneProcessor
_usernameProcessor
_emailProcessor
_urlProcessor
_asciiProcessor
_equationProcessor
T@"CHPostProcessingManager",&,N,V_defaultProcessor
T@"CHPostProcessingManager",&,N,V_digitProcessor
T@"CHPostProcessingManager",&,N,V_phoneProcessor
T@"CHPostProcessingManager",&,N,V_usernameProcessor
T@"CHPostProcessingManager",&,N,V_emailProcessor
T@"CHPostProcessingManager",&,N,V_urlProcessor
T@"CHPostProcessingManager",&,N,V_asciiProcessor
T@"CHPostProcessingManager",&,N,V_equationProcessor
getSpellCorrectedToken:contextBeforeToken:
applyLexiconCorrections:shouldCapitalizeWord:shouldSkipEntryCorrection:outBestTokenIndex:bestLexiconTokenScore:textReplacements:contextBeforeToken:allowSpellChecker:
createPseudoTokensFromToken:
applyCorrectionsOnSingleToken:isFirstToken:contextBeforeToken:shouldCapitalizeGivenHistory:textReplacements:isSingleIsolatedCharacter:allowSpellChecker:
applyCorrectionsAcrossToken:isFirstToken:contextBeforeToken:shouldCapitalizeGivenHistory:textReplacements:isSingleIsolatedCharacter:allowSpellChecker:
setShouldAutoCapitalize:
setShouldAutoCorrect:
consumableStrokesCharSet
setConsumableStrokesCharSet:
fullWidthPunctuationThatExpectsUppercaseAfter
setFullWidthPunctuationThatExpectsUppercaseAfter:
punctuationThatExpectsUppercaseAfter
setPunctuationThatExpectsUppercaseAfter:
_shouldAutoCapitalize
_shouldAutoCorrect
_consumableStrokesCharSet
_fullWidthPunctuationThatExpectsUppercaseAfter
_punctuationThatExpectsUppercaseAfter
TB,N,V_shouldAutoCapitalize
T@"NSLocale",&,N,V_locale
Tr^{_LXLexicon=},N,V_staticLexicon
Tr^{_LXLexicon=},N,V_customLexicon
Tr^{_LXLexicon=},N,V_phraseLexicon
Tr^{_LXLexicon=},N,V_customPhraseLexicon
TB,N,V_shouldAutoCorrect
T@"NSCharacterSet",&,N,V_consumableStrokesCharSet
T@"NSCharacterSet",&,N,V_fullWidthPunctuationThatExpectsUppercaseAfter
T@"NSCharacterSet",&,N,V_punctuationThatExpectsUppercaseAfter
removeCharactersInString:
addCharactersInString:
shouldAddAlternatives
setShouldAddAlternatives:
contextInvariantCharacterSet
setContextInvariantCharacterSet:
forwardLookingCharacterSet
setForwardLookingCharacterSet:
backwardLookingCharacterSet
setBackwardLookingCharacterSet:
widthAlternativeCharacterSet
setWidthAlternativeCharacterSet:
_shouldAddAlternatives
_contextInvariantCharacterSet
_forwardLookingCharacterSet
_backwardLookingCharacterSet
_widthAlternativeCharacterSet
TB,N,V_shouldAddAlternatives
T@"NSCharacterSet",&,N,V_contextInvariantCharacterSet
T@"NSCharacterSet",&,N,V_forwardLookingCharacterSet
T@"NSCharacterSet",&,N,V_backwardLookingCharacterSet
T@"NSCharacterSet",&,N,V_widthAlternativeCharacterSet
openingBracketCharacters
setOpeningBracketCharacters:
closingBracketCharacters
setClosingBracketCharacters:
openingQuoteCharacters
setOpeningQuoteCharacters:
closingQuoteCharacters
setClosingQuoteCharacters:
symmetricQuoteCharacters
setSymmetricQuoteCharacters:
_openingBracketCharacters
_closingBracketCharacters
_openingQuoteCharacters
_closingQuoteCharacters
_symmetricQuoteCharacters
T@"NSCharacterSet",&,N,V_openingBracketCharacters
T@"NSCharacterSet",&,N,V_closingBracketCharacters
T@"NSCharacterSet",&,N,V_openingQuoteCharacters
T@"NSCharacterSet",&,N,V_closingQuoteCharacters
T@"NSCharacterSet",&,N,V_symmetricQuoteCharacters
dictionaryWithCapacity:
setValue:forKey:
_updateTokenInappropriateFlag:
cleanUpSpacesInToken:leftContext:
setShouldKeepOutOfPatternCandidates:
setShouldKeepDuplicateTokenIDs:
shouldKeepOutOfLexiconAlternatives
setShouldKeepOutOfLexiconAlternatives:
shouldKeepAlternativeLengths
setShouldKeepAlternativeLengths:
shouldKeepSubstrings
setShouldKeepSubstrings:
shouldKeepOriginalSpelling
setShouldKeepOriginalSpelling:
_shouldKeepOutOfPatternCandidates
_shouldKeepDuplicateTokenIDs
_shouldKeepOutOfLexiconAlternatives
_shouldKeepAlternativeLengths
_shouldKeepSubstrings
_shouldKeepOriginalSpelling
TB,N,V_shouldKeepOutOfPatternCandidates
TB,N,V_shouldKeepDuplicateTokenIDs
TB,N,V_shouldKeepOutOfLexiconAlternatives
TB,N,V_shouldKeepAlternativeLengths
TB,N,V_shouldKeepSubstrings
TB,N,V_shouldKeepOriginalSpelling
patternType
setPatternType:
capitalizationToSplit
setCapitalizationToSplit:
convertToLowercase
setConvertToLowercase:
_capitalizationToSplit
_convertToLowercase
_patternType
Tq,N,V_patternType
TB,N,V_capitalizationToSplit
TB,N,V_convertToLowercase
characterTransliterations
handleConfusableCharactersInToken:previousContext:
wordIDForCandidateString:
setCharacterTransliterations:
_characterTransliterations
T@"NSArray",N,V_characterTransliterations
handleConfusableIsolatedCharacterToken:
_transliterationMap
handleFrenchLigaturesInToken:
initWithCharacterLM:staticLexicon:
characterLM
setCharacterLM:
_characterLM
T@"CVNLPDecodingLanguageModel",&,N,V_characterLM
maxResultCount
setMaxResultCount:
_maxResultCount
Tq,N,V_maxResultCount
T@"CHStringOVSChecker",N,V_ovsStringChecker
countUnallowedCharactersInString:
tokenRowAsString:
compareStringForPhoneNumberCompatibility:with:
allowedCharacters
setAllowedCharacters:
characterReplacements
setCharacterReplacements:
_allowedCharacters
_characterReplacements
T@"NSCharacterSet",&,N,V_allowedCharacters
T@"NSDictionary",&,N,V_characterReplacements
indexPathByRemovingLastIndex
_extendedConversionCandidates:withPhraseCandidates:
_updatedTokenFromToken:withString:
promoteKanaConversion
mecabraContextRef
_promoteKanaConversion
_mecabraContextRef
T@"CHMecabraWrapper",R,N,V_mecabraWrapper
T^{__MecabraContext=},R,N,V_mecabraContextRef
T^v,R,N,V_languageModel
TB,R,N,V_promoteKanaConversion
_mecabra
T^{__Mecabra=},R,V_mecabra
hasSubstringInSet:
ch_mappedArrayWithBlock:
@24@0:8^{_NSZone=}16
@148@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80B96{_NSRange=QQ}100i116i120i124B128q132@140
@140@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80B96{_NSRange=QQ}100i116i120i124B128q132
@132@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80B96{_NSRange=QQ}100i116B120q124
@124@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80{_NSRange=QQ}96i112q116
v16@0:8
@16@0:8
q24@0:8q16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8q16
v40@0:8{_NSRange=QQ}16@?32
v44@0:8{_NSRange=QQ}16B32@?36
@32@0:8{_NSRange=QQ}16
{_NSRange=QQ}24@0:8q16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
q16@0:8
{_NSRange=QQ}16@0:8
B16@0:8
i16@0:8
^{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@"CHTextInputTarget"
@"NSString"
{_NSRange="location"Q"length"Q}
^{CGRect={CGPoint=dd}{CGSize=dd}}
@"NSIndexSet"
v24@0:8@16
v24@0:8q16
v32@0:8{_NSRange=QQ}16
v20@0:8B16
v20@0:8i16
v48@0:8@16{_NSRange=QQ}24^{CGRect={CGPoint=dd}{CGSize=dd}}40
@76@0:8@16@24B32{CGRect={CGPoint=dd}{CGSize=dd}}36Q68
Q16@0:8
@"CHDrawing"
@"NSCharacterSet"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
I48@0:8@16I24B28^d32^v40
@40@0:8@16^@24^v32
@32@0:8@16q24
B40@0:8^{_LXLexicon=}16@24@32
@32@0:8@16^^v24
I32@0:8@16^{_LXLexicon=}24
d32@0:8@16@24
B24@0:8@16
@56@0:8@16^{__Mecabra=}24^{__MecabraContext=}32^v40q48
B36@0:8@16B24@28
d92@0:8@16@24@32B40B44B48@52@60^@68^@76^B84
@172@0:8@16@24^{_LXLexicon=}32^v40@48@56@64d72{_NSRange=QQ}80^d96B104B108B112q116d124q132^q140^B148^B156^B164
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"NSData"
@108@0:8@16@24I32d36d44d52Q60q68{CGRect={CGPoint=dd}{CGSize=dd}}76
I16@0:8
d16@0:8
v20@0:8I16
v24@0:8d16
v24@0:8Q16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
B28@0:8@16i24
@48@0:8@16@24^v32@40
v68@0:8@16@24@32@40^@48B56^B60
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@28@0:8i16@20
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
@28@0:8i16@"NSLocale"20
@"NSLocale"16@0:8
@"NSCharacterSet"16@0:8
v24@0:8@"NSCharacterSet"16
@40@0:8i16i20^{__CFLocale=}24@32
@36@0:8i16@20@28
@44@0:8i16@20@28@36
@32@0:8i16i20@24
@32@0:8^@16q24
@24@0:8Q16
v32@0:8@16@24
v32@0:8^{_LXLexicon=}16^v24
v24@0:8^{_LXLexicon=}16
v24@0:8^v16
{vector<const void *, std::allocator<const void *>>=^^v^^v{__compressed_pair<const void **, std::allocator<const void *>>=^^v}}40@0:8@16@24Q32
{vector<const void *, std::allocator<const void *>>=^^v^^v{__compressed_pair<const void **, std::allocator<const void *>>=^^v}}48@0:8@16@24@32Q40
@32@0:8@16@24
@24@0:8i16i20
@32@0:8i16i20^{__CFLocale=}24
@20@0:8i16
v40@0:8@16^{CGPoint=dd}24^{CGPoint=dd}32
@32@0:8@16^{CHCandidateResult=If}24
@40@0:8@16^{CHCandidateResult=If}24^@32
@48@0:8@16@24@32@40
d56@0:8@16@24^I32Q40^@48
d64@0:8@16@24@32@40^I48Q56
@48@0:8@16@24@32^@40
@124@0:8^v16Q24^{_LXCursor=}32^{_LXCursor=}40@48@56{_NSRange=QQ}64^v80@88q96i104q108q116
B72@0:8@16@24d32d40B48B52B56I60@64
@64@0:8r^v16@24{_NSRange=QQ}32q48@56
@72@0:8r^v16Q24^v32^v40q48q56@64
^I60@0:8@16q24B32^Q36^B44^{_NSRange=QQ}52
v40@0:8{_NSRange=QQ}16@32
{vector<long, std::allocator<long>>=^q^q{__compressed_pair<long *, std::allocator<long>>=^q}}32@0:8@16@24
@48@0:8@16@24@32@?40
@132@0:8^v16@24@32{_NSRange=QQ}40^{_LXCursor=}56^{_LXCursor=}64@72@80Q88q96B104q108q116@?124
@72@0:8^v16@24@32Q40@48q56q64
q76@0:8@16^v24^v32^v40^v48@56B64@?68
^v96@0:8^v16@24@32^v40{_NSRange=QQ}48{vector<long, std::allocator<long>>=^q^q{__compressed_pair<long *, std::allocator<long>>=^q}}64@?88
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{CGRect={CGPoint=dd}{CGSize=dd}}48
d20@0:8B16
v80@0:8{vector<CHCandidateResult, std::allocator<CHCandidateResult>>=^{CHCandidateResult}^{CHCandidateResult}{__compressed_pair<CHCandidateResult *, std::allocator<CHCandidateResult>>=^{CHCandidateResult}}}16^v40r^{NetworkEdge=QQQQddQQQ}48^v56q64q72
{basic_string<char, std::char_traits<char>, std::allocator<char>>={__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}20@0:8I16
@48@0:8@16Q24@32q40
d24@0:8@16
@40@0:8@16^@24@32
v60@0:8^@16^@24@32q40@48B56
@40@0:8@16Q24Q32
@48@0:8@16@24q32^q40
@52@0:8@16@24q32B40q44
@40@0:8@16@24@?32
v32@0:8^v16r^v24
v32@0:8^v16@24
v40@0:8^v16@24@32
v32@0:8^v16q24
@32@0:8^S16i24i28
I24@0:8@16
q24@0:8@16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
{CGPoint=dd}24@0:8@16
^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}}16@0:8
v24@0:8^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}}16
^v16@0:8
^{_LXLexicon=}16@0:8
{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>={__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>=Q}}}16@0:8
v40@0:8{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>={__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>=Q}}}16
{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>={__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>=Q}}}16@0:8
v40@0:8{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>={__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>=Q}}}16
^{VariantMap=^i^i^ii^iQ}16@0:8
v24@0:8^{VariantMap=^i^i^ii^iQ}16
^^v16@0:8
v24@0:8^^v16
@"CHRecognitionInsightRequest"
@"CHRecognitionInsight"
@"NSArray"
^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}}
@"CHCTCRecognitionModel"
@"CVNLPCTCTextDecoder"
@"NSObject<OS_dispatch_queue>"
@"CHPatternNetwork"
@"CHRecognizerConfiguration"
^{_LXLexicon=}
@"NSDictionary"
@"NSMutableDictionary"
@"CHSpellChecker"
@"CHMecabraWrapper"
@"CHStringOVSChecker"
@"NSURL"
^{VariantMap=^i^i^ii^iQ}
@"NSMutableIndexSet"
@"CHPostProcessingManager"
{CGSize="width"d"height"d}
{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>="__tree_"{__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>="__value_"Q}}}
{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>="__tree_"{__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>="__value_"Q}}}
@72@0:8Q16q24q32@40{set<long, std::less<long>, std::allocator<long>>={__tree<long, std::less<long>, std::allocator<long>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::less<long>>=Q}}}48
{set<long, std::less<long>, std::allocator<long>>={__tree<long, std::less<long>, std::allocator<long>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::less<long>>=Q}}}16@0:8
@"CHClassifiableDrawing"
{set<long, std::less<long>, std::allocator<long>>="__tree_"{__tree<long, std::less<long>, std::allocator<long>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<long>>="__value_"Q}}}
@72@0:8@16{CGPoint=dd}24B40B44^v48^q56^q64
@72@0:8@16{CGSize=dd}24{CGPoint=dd}40@56^v64
@48@0:8@16@24d32^@40
@72@0:8@16@24d32{CGPoint=dd}40B56B60^@64
^{CHCodeMap=*Q^II}16@0:8
^{CHCodeMap=*Q^II}
@"NSOrderedSet"
v32@0:8@16@?24
v40@0:8@16@24@?32
v32@0:8@"CHRemoteRecognitionRequest"16@?<v@?@"CHTokenizedTextResult"@"NSError">24
v40@0:8@"CHTokenizedTextResult"16@"CHRemoteRecognitionRequest"24@?<v@?@"NSArray"@"NSArray"@"NSError">32
@40@0:8@16@24^@32
@48@0:8@16@24^@32^@40
@32@0:8@16^@24
@"NSXPCConnection"
v48@0:8^@16^@24@32@40
v48@0:8@16q24q32@?40
d32@0:8d16@24
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8r^v16{CGPoint=dd}24d40
{CGRect={CGPoint=dd}{CGSize=dd}}36@0:8r^v16q24B32
{CGRect={CGPoint=dd}{CGSize=dd}}40@0:8r^v16d24q32
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}24@0:8@16
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}32@0:8@16@24
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}24@0:8^v16
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}32@0:8r^v16d24
d40@0:8r^v16^{CGPoint=dd}24^d32
d24@0:8^v16
d32@0:8r^v16^d24
d64@0:8{CGPoint=dd}16{CGPoint=dd}32{CGPoint=dd}48
d64@0:8{CGPoint=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}48@0:8r^v16d24d32^d40
@52@0:8@16i24@28@36q44
B20@0:8i16
i24@0:8@16
@"NSLocale"
@"CHTokenizedTextResult"
@"NSError"
v528@0:8{CHDrawingStrokes={vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}{vector<bool, std::allocator<bool>>=^QQ{__compressed_pair<unsigned long, std::allocator<unsigned long>>=Q}}{vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}qI{Matrix<double>=^^?^dII}d{vector<int, std::allocator<int>>=^i^i{__compressed_pair<int *, std::allocator<int>>=^i}}}16
Q24@0:8Q16
{CGPoint=dd}32@0:8Q16Q24
@32@0:8{CGSize=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8Q16
f16@0:8
v32@0:8{CGPoint=dd}16
{_NSRange=QQ}24@0:8@16
{Matrix<float>=^^?^fII}32@0:8{CGSize=dd}16
{Matrix<float>=^^?^fII}32@0:8Q16Q24
@24@0:8d16
@40@0:8{CGVector=dd}16d32
@32@0:8d16^v24
{vector<long, std::allocator<long>>=^q^q{__compressed_pair<long *, std::allocator<long>>=^q}}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8@16@24
d32@0:8d16d24
{CHDrawingStrokes={vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}{vector<bool, std::allocator<bool>>=^QQ{__compressed_pair<unsigned long, std::allocator<unsigned long>>=Q}}{vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}qI{Matrix<double>=^^?^dII}d{vector<int, std::allocator<int>>=^i^i{__compressed_pair<int *, std::allocator<int>>=^i}}}16@0:8
{CHDrawingStrokes="strokeBounds"{vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}}"strokeBoundsValidity"{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}"strokes"{vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}}"currentStrokeIndex"q"mSize"I"bitmap"{Matrix<double>="_vptr$Matrix"^^?"_data"^d"_w"I"_h"I}"lineHeight"d"sparseBitmap"{vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}}
@36@0:8q16q24B32
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8q16q24@32@40
q32@0:8@16@24
@"NSNumber"
@"CHCutPoint"
@32@0:8q16@24
@32@0:8@16^v24
d40@0:8@16q24q32
v40@0:8@16d24@32
v56@0:8@16d24d32d40@48
v40@0:8@16@24@32
@40@0:8@16@24@32
q40@0:8@16q24q32
B48@0:8@16d24q32q40
{vector<std::map<long, long>, std::allocator<std::map<long, long>>>=^v^v{__compressed_pair<std::map<long, long> *, std::allocator<std::map<long, long>>>=^v}}16@0:8
{vector<std::map<long, long>, std::allocator<std::map<long, long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::map<long, long> *, std::allocator<std::map<long, long>>>="__value_"^v}}
q40@0:8@16{_NSRange=QQ}24
v32@0:8@16q24
@60@0:8@16@24@32@40@48B56
B32@0:8@16@24
v32@0:816
@"CHPointFIFO"
@36@0:8@16Q24f32
@32@0:8@16Q24
v20@0:8f16
{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}}16@0:8
v40@0:8{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}}16
{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>="__value_"^}}
68@0:8163248f64
v56@0:8{CGSize=dd}16{CGSize=dd}32d48
@?16@0:8
v24@0:8@?16
^{CGPath=}16@0:8
v24@0:8^{CGPath=}16
16@0:8
^{CGPath=}
@"<CHPointFIFODrawingTarget>"
@108@0:8@16d24@32@40@48@56@64@72@80@88@96B104
@40@0:8@16d24d32
@120@0:8@16d24d32{CGPoint=dd}40i56{CGPoint=dd}60i76{CGPoint=dd}80{CGPoint=dd}96@112
@112@0:8@16d24d32{CGPoint=dd}40i56{CGPoint=dd}60i76{CGPoint=dd}80{CGPoint=dd}96
{CGPoint=dd}16@0:8
{CGPoint="x"d"y"d}
@88@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56{CGPoint=dd}72
@120@0:8@16d24d32{CGPoint=dd}40{CGPoint=dd}56{CGPoint=dd}72{CGPoint=dd}88{CGSize=dd}104
@88@0:8@16d24d32{CGPoint=dd}40{CGPoint=dd}56{CGPoint=dd}72
@72@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56
@96@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56{CGPoint=dd}72d88
{pair<double, double>=dd}32@0:8@16@24
q40@0:8@16@24^q32
@80@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32@64q72
@72@0:8@16@24d32{CGRect={CGPoint=dd}{CGSize=dd}}40
@28@0:8@16B24
@64@0:8@16@24@32@40q48q56
@56@0:8@16@24@32@40q48
@48@0:8@16@24@32q40
@56@0:8@16@24@32q40q48
@24@0:8q16
@40@0:8{?=qqq}16
@44@0:8@16{_NSRange=QQ}24B40
@64@0:8@16{_NSRange=QQ}24B40B44^d48@?56
B32@0:8@16^B24
{?=dd}28@0:8@16i24
d36@0:8@16@24i32
d24@0:8d16
v48@0:8@16{_NSRange=QQ}24@?40
@40@0:8@16^{_LXLexicon=}24q32
@40@0:8@16@24^v32
v40@0:8B16B20B24B28B32B36
Q20@0:8S16
d24@0:8S16S20
B28@0:8@16B24
@52@0:8@16@24@32B40@44
@36@0:8@16B24@28
@"AppleSpell"
@"CHSpellCheckerErrorModel"
^{CGPoint=dd}64@0:8@16{CHLineSegment={CGPoint=dd}{CGPoint=dd}}24^q56
@32@0:8^{CGPoint=dd}16q24
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
q48@0:8{CHLineSegment={CGPoint=dd}{CGPoint=dd}}16
^{CGPoint=dd}16@0:8
^{CGPoint=dd}
@48@0:8@16d24d32^v40
@72@0:8@16d24{CGSize=dd}32d48^d56^v64
{vector<float, std::allocator<float>>=^f^f{__compressed_pair<float *, std::allocator<float>>=^f}}48@0:8@16@24d32^@40
B96@0:8@16^v24{_NSRange=QQ}32@48@56^v64@?72^@80@?88
^{MontrealNeuralNetwork=}16@0:8
^{MontrealNeuralNetwork=}
@"MLModel"
B40@0:8@16^v24@?32
@40@0:8{_NSRange=QQ}16^@32
@"NSSet"
@44@0:8^{_CFBurstTrie=}16^{_LXLexicon=}24^{_LXLexicon=}32I40
B24@0:8^{_LXEntry=}16
B32@0:8@16^{_LXLexicon=}24
B32@0:8@16^{_CFBurstTrie=}24
B20@0:8I16
B28@0:8I16^{_LXLexicon=}20
^{_CFBurstTrie=}
v40@0:8@16^Q24^Q32
Q24@0:8@16
B28@0:8Q16i24
^v32@0:8@16@24
B40@0:8@16@24@32
@44@0:8i16@20i28B32B36B40
@52@0:8i16@20i28i32i36B40B44B48
r^{_LXLexicon=}24@0:8^@16
^v36@0:8@16B24@28
^v28@0:8^v16B24
@32@0:8^{_LXLexicon=}16^{_LXLexicon=}24
@120@0:8^{_LXLexicon=}16^{_LXLexicon=}24^{_LXLexicon=}32^{_LXLexicon=}40@48@56@64^v72@80@88@96^v104q112
Q20@0:8I16
{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>={__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>=Q}}}16@0:8
v40@0:8{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>={__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>=Q}}}16
{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>={__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>=Q}}}16@0:8
v40@0:8{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>={__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>=Q}}}16
{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>="__tree_"{__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>="__value_"Q}}}
{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>="__tree_"{__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>="__value_"Q}}}
@32@0:8Q16@24
v32@0:8Q16Q24
{vector<unsigned long, std::allocator<unsigned long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::allocator<unsigned long>>="__value_"^Q}}
@32@0:8i16@20B28
@36@0:8q16@24B32
@40@0:8Q16@24@32
B40@0:8@16q24@32
@36@0:8@16@24i32
@"CHMutableTokenizedTextResult"
@32@0:8@?16@24
v48@0:8@16@24@32@40
@80@0:8@16@24@32@40@48@56@64@72
@100@0:8i16B20B24@28^{_LXLexicon=}36^{_LXLexicon=}44^{_LXLexicon=}52^{_LXLexicon=}60@68^v76@84@92
@68@0:8@16B24B28^q32^d40@48@56B64
@56@0:8@16B24@28B36@40B48B52
r^{_LXLexicon=}16@0:8
v24@0:8r^{_LXLexicon=}16
r^{_LXLexicon=}
@20@0:8B16
@32@0:8^v16@24
@40@0:8B16B20B24B28B32B36
@40@0:8@16q24B32B36
@40@0:8^{_LXLexicon=}16^{_LXLexicon=}24@32
{map<std::string, std::pair<std::string, double>, std::less<std::string>, std::allocator<std::pair<const std::string, std::pair<std::string, double>>>>="__tree_"{__tree<std::__value_type<std::string, std::pair<std::string, double>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::pair<std::string, double>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::pair<std::string, double>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::pair<std::string, double>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::pair<std::string, double>>, std::less<std::string>, true>>="__value_"Q}}}
@32@0:8@16^{_LXLexicon=}24
@"CVNLPDecodingLanguageModel"
@44@0:8@16^v24@32B40
^{__MecabraContext=}16@0:8
^{__MecabraContext=}
v28@0:8i16@20
^{__Mecabra=}16@0:8
^{__Mecabra=}
q32@0:8@16q24
@24@0:8@?16
@32@0:8@16@?24
17TriangleRegressor
9Regressor
10CHTriangle
NW_hq
15CHManhattanLine
6CHLine
9SymbolMap
12CHChatBubble
6MatrixIfE
6CHStar
$0ss
)8\\
HVN6MatrixIdE
19ChatBubbleRegressor
9CHEllipse
333333
333333
@333333
@333333
333333
@333333
@333333
@333333
@ffffff
@333333
@333333
@333333
@333333
@ffffff
@ffffff
@333333
@ffffff
@333333
333333
?333333
?333333
?ffffff
?15CHOutlinedArrow
11CHRectangle
12CHBasicShape
18RectangleRegressor
14CHStraightLine
12CHBezierLine
7CHCloud
 +7tt
]mdhh
R||
333333
?333333
?333333
?333333
?333333
?333333
?333333
?333333
?333333
?333333
7CHHeart
9999
9999
999999
99999999999999999999999999999999999
99999999999999
9999999999999999999999999999999999999999999999999999999999999999999999999999999999
999999999999999999999999999999999999
?10CHPentagon
26CHRSketchRecognitionResult
 0@P`p
CHTextInputTargetContentInfo.m
Invalid parameter not satisfying: %@
textInputTarget
referenceSubstring
selectedTextRange %@ beyond text length %ld
activePreviewRange %@ beyond text length %ld
Invalid referenceSubstringRange %@
referenceSubstringRange %@ beyond text length %ld
Invalid referenceSubstringRange %@, length doesn't match string length %ld
charRectsInReferenceSubstring cannot be NULL for referenceSubstringRange: %@
  %ld: origin: (%0.2f, %0.2f), size: (%0.2f, %0.2f)
@"NSString"24@?0@8q16
(none)
 textInputTarget: (%@), contentType: %@, textContentLength: %ld, referenceSubstring: "%@", referenceSubstringRange: %@, selectedRange: %@, isCursorStrong: %@, containsCommittedStrokes: %@, activePreviewRange: %@, strokeCoveredTextRange: %@, lastCharacterLevelPosition: %@, isSingleLine: %@, supportsAutoLineBreaks: %@, characterRectsInReferenceSubstring: {%@}, protectedCharacterIndexes: {%@}
v8@?0
aceimnorsuvwxz,.-_*+~<>
gjpqy
v24@?0q8^B16
v56@?0q8{CGRect={CGPoint=dd}{CGSize=dd}}16^B48
protectedCharacterIndexes
The referenceSubstring length must be equal to the range that it covers
CHLanguageUtilities.mm
minLength has to be > 0
.@#:/-_
%@%@
v24@?0^{_LXEntry=}8*16
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
!?();:
Lexicon correction requires non-empty token string.
The prefix length should be smaller than the candidate string length
The corrected entry string length must be greater than the length of the active prefix
The token prefix should be case-sensitive equal after lexicon correction
The token prefix should be case-insensitive equal after lexicon correction
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
CHTriangle
encodedStrokeIdentifier
string
strokeIndexes
wordID
recognitionScore
combinedScore
alignmentScore
properties
substrokeCount
boundsOriginX
boundsOriginY
boundsWidth
boundsHeight
CHTokenizedTextResultToken.mm
The input string (%@) contains one or more ligature private code points
 '%@', strokes: %@, substrokeCount: %ld, wordID: %d, recognitionScore: %0.4f, combinedScore: %0.4f, alignmentScore: %0.4f, rare: %@, lexicon: %@, pattern: %@, inappropriate: %@, precedingSpace: %@, original: %@, bounds: [%0.4f, %0.4f, %0.4f, %0.4f]
imgData
featureData
softmax_output
+N9mZUAHooNvMiQnjeTJ8g
.codemap
vo_en
std::vector<std::vector<CHCandidateResult>> CHNeuralNetwork::ClassifyCHDrawingFromBatches(NSArray<CHClassifiableDrawing *> * _Nonnull __strong)
CHNeuralNetwork.mm
Error, the number of results doesn't match the model batch size (usesCPUOnly == %u)
Error, the number of results doesn't match the data batch size (usesCPUOnly == %u)
std::vector<CHCandidateResult> CHNeuralNetwork::filterCandidateResults(std::vector<CHCandidateResult> &, NSUInteger, NSCharacterSet * _Nullable __strong, BOOL)
Not-a-char codepoint (U+%04x) is being added to the filtered candidate results (activeCharacterSet is nil: %d)
std::vector<CHCandidateResult> CHNeuralNetwork::feedforward(MLDictionaryFeatureProvider * _Nullable __strong)
Error for model prediction in CHNeuralNetwork::feedforward: %@
std::vector<std::vector<CHCandidateResult>> CHNeuralNetwork::feedforwardFromBatches(MLDictionaryFeatureProvider * _Nullable __strong)
Error for model prediction in CHNeuralNetwork::feedforwardFromBatches: %@
Unexpected prediction tensor dimension: %lu
Prediction tensor must be of dimension %ld instead of %lu for batch size different from 1
CHRecognitionOptionTextBefore
CHRecognitionOptionTextAfter
CHRecognitionOptionPrecedingSpaceBehavior
CHRecognitionOptionFrameContext
CHRecognitionOptionDrawingAnchorPoint
CHRecognitionOptionShouldRefineCandidates
CHRecognitionOptionShouldPreserveCaseVariantCandidates
CHRecognitionOptionInferenceCache
CHRecognitionOptionAllowSecondaryLocale
CHRecognitionOptionIsRunningSecondaryLocale
012olzOLZ
Oval
Line
Outline Arrow
Triangle
Rectangle
Pentagon
Manhattan Line
Chat Bubble
Star
Heart
Cloud
Scribble
com.apple.CoreHandwriting
HWRTriangleAlignToAxisThreshold
HWRTriangleIsoscelesLengthRatioThreshold
HWRTriangleEquilateralLengthRatioThreshold
HWROvalFitToCircleRadiiRatioThreshold
HWROvalAlignToIncrementsOf
HWRRectangleFitToSquareLengthRatioThreshold
HWRRectangleAlignToIncrementsOf
HWROutlinedArrowAlignToIncrementsOf
HWRLineAlignToAxisThreshold
HWRLineLengthRatioThreshold
B24@?0@"CHTextRecognitionResult"8@"NSDictionary"16
v64@?0@"CHTokenizedTextResultToken"8q16{?=qqq}24{_NSRange=QQ}48
'.-/
-/._@
v28@?0r*8q16I24
d16@?0r^{NetworkEdge=QQQQddQQQ}8
d16@?0^v8
B32@?0@"CHTextRecognitionResult"8Q16^B24
Guess
d24@?0r^v8d16
'".-
%@%@%@
q24@?0@8@16
CHRecognizer.mm
The number of segments (%lu) must be the same as the number of sorted segment indexes (%lu)
The number of nodes in the candidate network (%lu) should match the number of generated segments (%lu)
We must add at least one candidate for each edge
Batch contains %lu non classified drawings
There must be at least one valid path
Incorrect index in segment decoding: index %ld (idx %ld + offset %ld) should be smaller than %ld, the number of segments on the group.
v24@?0Q8^B16
Next generation pipeline requires CVNLP framework.
The first stroke index must be non-negative
CHChatBubble
CHManhattanLine
CHCTCRecognitionModel.mm
An error occurred in the %@ model when extracting features: %@
Using CVNLPActivationMatrix requires the CVNLP framework.
CHRemoteRecognizer.mm
locale
locales
CHRemoteRecognizer must be initialized with at least one locale
com.apple.handwritingd.remoterecognition
A locale is required to build the remote recognition request
drawing
v16@?0@"NSError"8
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
XPC connection must be non-nil
v24@?0@"CHTokenizedTextResult"8@"NSError"16
CHStrokeUtilities.mm
strokeProvider cannot be nil.
B32@?0@"<CHStroke>"8Q16^B24
StrokeProviderError: Inconsistency in stroke provider. Stroke with id %@ is exposed but this id can not be resolved by stroke provider version %@.
Stroke Grouping Logic Error: Failed to get stroke with id %@. The stroke is not exposed by stroke provider version %@.
stroke
block
timestep must be > 0
v40@?0{CGPoint=dd}8d24^B32
q16@?0q8
recognitionMode
options
minimumDrawingWidth
minimumDrawingHeight
contentType
autoCapitalizationMode
autoCorrectionMode
activeCharacterSetPerLocale
maxRecognitionResultCount
shouldUseTextReplacements
enableCachingIfAvailable
enableGen2ModelIfAvailable
enableGen2CharacterLMIfAvailable
hasBeenSubmitted
priority
The CHRemoteRecognitionRequest cannot be mutated after being submitted
CHRemoteRecognitionRequest.mm
CHRemoteRecognitionRequest must be initialized with at least one locale
hasBeenSubmitted state cannot be reverted after being set to YES
@"NSString"24@?0@"NSLocale"8q16
@"NSString"24@?0@"NSCharacterSet"8q16
Remote Recognition Request %p (locales=[%@], mode=%@, content type=%@, autocapitalization mode=%@, autocorrection mode=%@, option keys=%@, active character sets=[%@], drawing=%p, shouldUseTextReplacements=%@, enableCachingIfAvailable=%@, enableGen2ModelIfAvailable=%@, enableGen2CharacterLMIfAvailable=%@, hasBeenSubmitted=%@, priority=%ld)
CHTextInputScriptSpec.m
Method can only be called on a single character string
=== Insight Request ===
  request: %@
=== Recognizer Configuration ===
  recognizerLocale: %@
  recognizerRecognitionMode: %@
  recognizerContentType: %@
  autoCapitalizationMode: %@
  autoCorrectionMode: %@
  recognizerActiveCharacterSet: %@
  recognizerMaxRecognitionResultCount: %ld
  recognizerMinimumDrawingSize: {width: %0.2f, height: %0.2f}
    %@: %@,
v32@?0@"NSString"8@"NSObject"16^B24
  recognizerOptions: %@
=== Input Drawing ===
None captured
  inputDrawing: %@
=== Text Result ===
drawingStrokes
void CHDrawingStrokes::resampleStrokesEqualInSpace(CHDrawingStrokes &, const float, std::vector<std::map<NSInteger, NSInteger>> &)
CHDrawing.mm
Empty stroke detected during spatial resampling.
void CHDrawingStrokes::readCharacter(const char *)
Error: readCharacter: filename ptr = 0
Error: readCharacter: Empty filename
Error: readCharacter: Wrong filename :%s:
%d %d %d
channel
data
origin: (%0.2f, %0.2f), size: (%0.2f, %0.2f)
 strokes: %lu, points: %lu, %@
At least one stroke index must be passed
%d %d
Error: Degenerated drawing (empty stroke present)
q24@?0@"CHCutPoint"8@"CHCutPoint"16
B32@?0@8Q16^B24
UIImage
Class getUIImageClass()_block_invoke
CHSoftLinking.h
Unable to find class %s
void *UIKitLibrary()
/System/Library/Frameworks/UIKit.framework/UIKit
/System/Library/Frameworks/UIKit.framework/Contents/MacOS/UIKit
CHCornerDetector.mm
Could not find a point in the drawing to match that in the resampled drawing
CHEllipse
General
Recognizer
RecognitionSession
StrokeGrouping
ClutterFiltering
RemoteRecognizer
TextCorrectionRecognizer
CoreHandwritingSignPosts
com.apple.corehandwriting
tokenRows
CHTokenizedTextResultColumn.m
@"NSString"24@?0@"NSArray"8q16
@"NSString"24@?0@"CHTokenizedTextResultToken"8q16
[%p "%@" %.2f, %.2f]
  %@
 rows: %ld {
v32@?0@"NSArray"8Q16^B24
token
Invalid index %ld when trying to replace a row from column with %lu rows.
Invalid index %ld when trying to remvove a row from column with %lu rows.
q24@?0@"NSArray"8@"NSArray"16
NSIndexPath *modifyIndexPath(NSIndexPath *__strong _Nonnull, NSUInteger, NSUInteger)
CHUtilities.mm
The length of the computed path must be the same as the input
%@-%@_%@
%@_%@
%@-%@
class: %@ score: %3.5f string: %@
Freeform
0x%x
tokenColumns
transcriptionPaths
transcriptionPathScores
recognizerGenerationIdentifier
precedingLineBreaks
changeableTokenColumns
trailingSeparator
CHTokenizedTextResult.mm
columns
paths
transcriptionPaths count (%ld) != scores count (%ld)
kBestPathsTokens
kBestPathsProb
transcriptionPaths count (%ld) != probabilities count (%ld)
B24@?0Q8^B16
transcriptionPaths count (%ld) != probabilities count (%ld) after tokenized result is built
column
@"NSString"24@?0@"CHTokenizedTextResultColumn"8q16
rows
%ld %@
transcriptionPath
@"NSString"24@?0@"NSIndexPath"8q16
Column %ld %@
 %ld (%ld changeable) %@ [%@], %ld %@ 
Unknown
Gen1
Gen2
B32@?0@"NSArray"8Q16^B24
Original token not found in column %ld
v48@?0@"CHTokenizedTextResultToken"8q16{?=qqq}24
The character range must be compatible with the top transcription
Error: Tokenized text result without any transcription path encountered when computing language fitness.
en_US
B32@?0@"NSIndexPath"8Q16^B24
v48@?0r^I8q16d24q32^B40
abcxyz
ErrorModel
CHOutlinedArrow
CHRectangle
%.10g
{%f, %f}
%@, 
v56@?0q8{CHLineSegment={CGPoint=dd}{CGPoint=dd}}16^B48
CHPolygon.mm
CHStraightLine
CHBezierLine
<div style="clear:both;margin:auto;font-size:250%%;" >
<p>WARNING : NOTHING WAS SAVED : YOU MUST CLICK ON THE FOLLOWING LINK !</p>
<p><a href="#" onclick="SendMail(%d);">Send via email to Antoine !</a></p>
</div>
<p>For information, here are the files you flagged:</p>
<p id="po-term%d" style="margin:0;" \>
</body>
</html>
CHPentagon
input
output
masking_1/mul:0
time_distributed_1/Reshape_1:0
time_distributed_2/Reshape_1:0
time_distributed_3/Reshape_1:0
stroke_classification.espresso
v56@?0@"CHDrawing"8@"NSString"16^f24{_NSRange=QQ}32^v48
CHRecurrentNeuralNetwork.mm
An error occurred in the %@ model during prediction: %@
Invalid empty FST line entry
File not found: (
Node[
has out degree zero but is not marked as a final node
has in degree zero but is not marked as an initial node
void Network::mergeEquivalentEdges(vector<NetworkEdge> &)
Network.mm
Error when merging equivalent edges: index out of bounds
LatticePaths Network::kBestPaths(const NodeIndex, const NodeIndex, const NSUInteger, const LXLexiconRef, LXCursorRef, const LXMutableLexiconRef, LXCursorRef, CHPatternNetwork *__strong, NetworkCursor *__strong, CHRecognitionContentType, const LMLanguageModelRef, BOOL, double (^__strong)(const NetworkEdge &), double (^__strong)(LatticePath *), BOOL, BOOL, BOOL, BOOL)
Inconsistent network structure: edge with start node %zu belong in output edges of node %zu 
0x%zx
ctc_zh
ctc_latn
ctc_ja
ctc_ko
bundle
DecodingLexiconWeight
DecodingLexiconLowerBoundLogProbability
DecodingCharacterLMWeight
DecodingCharacterLMLowerBoundLogProbability
DecodingWordLMWeight
DecodingWordLMLowerBoundLogProbability
MultiCharacterOverlapped
SingleCharacter
Sketch
MultiCharacterInline
MultiCharacterCanvas
Default
Digits
PhoneNumber
Username
EmailAddress
ASCII
Equation
None
Words
Sentences
AllUppercase
AllLowercase
English
French
Spanish
Italian
German
Portuguese
Chinese
Cantonese
Japanese
Korean
SimplifiedChinese
TraditionalChinese
Roman
 Recognizer configuration with mode: %@, locale: %@, contentType: %@, autoCapitalizationMode: %@, autoCorrectionMode: %@, language: %@, script: %@
zh_Hans
zh_Hant
ja_Jpan
Latn
Hans
Hant
Hrkt
Hira
Kata
Jpan
Hani
Kore
CoreHandwriting
korean_support
none
%@-%ld-%@-%@
CHRecognizerConfiguration.mm
Recognizer configuration needs to be defined
zh_hant
Synchronization queue can not be nil when async loading language models.
Recognizer can not be nil when async loading language models.
com.apple.CoreHandwriting.LanguageModelLoadingQueue
v44@?0^{__CFURL=}8i16^{__CFLocale=}20^{__CFString=}28^B36
pt_BR
/System/Library/PrivateFrameworks/TextRecognition.framework/pt_BR.lm
corpus.wid
odat
P.bin
PP.bin
G.bin
R.bin
synthetics_
zh-Hans
zh-Hant
zh_compact
vo_en_compact
vo_de
vo_other
CHCharacterSetsRules.mm
Method can only be called on a single character string: %@
com.apple.CoreHandwriting.CHCharacterSetsRules
^*+=<>.,
:'"-/
apmAPM.
strdndth.
:;B=
)(pPDoOxX*
_-.+
_-.:/+&?%()$=
-/.@_
.,!?;:
!?:;
0x61a649a
0x34f55ec
0x7f7446f
0xe6b391a
0x08d4b39
0xbdde29e
0x633a6c7
0x346ff32
0xf9be5b7
0xf9dd946
0x27087b3
0x5fb9dc5
0xcf06682
0xcff9621
CHPostProcessingManager.mm
Number of corrected and raw tokens must match.
The best token index %ld is not contained in the returned tokens range %d, %ld
wordID count %lu should match wordRangesInString count %lu
growingToken should not be nil
CHIdentifyLowAlignmentConfidenceColumnsStep unexpectedly decreased the changeable token column count.
es_ES
fr_FR
+#*'",. 
@"CHTokenizedTextResultToken"40@?0@"CHTokenizedTextResultToken"8{?=qqq}16
CHMergeColumnsNoWhiteSpaceStep removed all columns.
CHMergeColumnsNoWhiteSpaceStep set unexpected changeable token column count.
At least one phrase should be returned in Mecabra tokenization and conversion step.
At least one candidate should be returned for each phrase in Mecabra tokenization and conversion step.
v32@?0@8Q16^B24
@24@?0@8q16
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
The strokeCoveredTextRange %@ must be within the referenceSubstringRange %@
%@ decoding failed. Token string and stroke indexes are required to be nonnull when constructing a result token
Model execution on CPU only: %d
Model batch size: %d
Falling back to a batch size of %u for usesCPUOnly == %d
Error loading recognition model: %@
Error model output data format not supported: %ld
Error creating MLFeatures: %@
Configuration for recognizer with mode=%@ and locale=%@ is not supported.
Error loading the static lexicon: %@
Error loading the phrase lexicon: %@
Processing input as single character drawing with %lu segments
CHRecognizer is running RNN recognition pipeline: %d
BEGIN "CHNextGenRecognition"
CHNextGenRecognition
END "CHNextGenRecognition"
BEGIN "CHPostProcessing"
CHPostProcessing
END "CHPostProcessing"
BEGIN "CHSegmentAndDecode"
CHSegmentAndDecode
END "CHSegmentAndDecode"
An error occurred when trying to create feature provider for the %@ model: %@
An error occurred when trying to allocate feature array for the %@ model: %@
Remote connection to handwritingd was interrupted
Remote connection to handwritingd was invalidated
An XPC proxy service error occurred: %@
Error during recognition: %@
  Stroke provider change added %ld strokes, removed %ld strokes.
  Ignoring %ld added strokes that cannot enumerate their points.
retrieving stroke identifier gave nil result. Encoded stroke identifier: %@
Stroke with no enumerable points found, recognition results may be affected. Stroke: %@
Drawing with no enumerable points found, recognition results may be affected. Drawing: %@
Removed %lu NaN-Points from %lu given points before calculating convex hull.
Removed %lu NaNs from %lu given values before calculating vector mean without outliers.
%@ decoding failed. Locale and drawing are required to be non-null and priority has to be valid.
isCharacterEmoji: character string doesn't match expectation of being single character with length (%lu)
isCharacterEmoji: codeCounts is 0 when data is encoded from character of length (%lu)
isCharacterEmoji: encoded data is invalid, null or empty, from character of length (%lu)
Warning: Less than %2.1f%% of the original points remain in the drawing after cleanup (before: %d, after: %d)
Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is larger than the original size (%u)
Error: computeSpatialFeaturesWithNoOverlapFromSparseBitmap: new bitmap size (%u) is equal to 0
%@ decoding failed. There was a problem decoding the stroke data.
%@ decoding failed. Result token rows are required to be nonnull when constructing a request
%@ decoding failed. Token columns, transcription paths, and scores are required to be nonnull and equal in size when constructing a text result
Incompatible index sets have no partition of common index sets.
Error: LMLanguageModelConditionalProbabilityVector returns false
Error: unable to mmap resource %s
Error: Index %lu out of bounds of the code map %lu symbols
An error occurred when loading model ("%@")
Model not found ("%@")
Canceling RNN recursive probability prediction
An error occurred running prediction with model: %@
An error occurred when loading a model: %@
found paths with incompatible number of segments covered from %zu to %zu: previous value %lu, value for new path %zu 
Unsupported Network Version %s
Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 3Gram!
Error: LMLanguageModelConditionalProbabilityVector returns false in LMScoreVector 2Gram!
Error: unable to reallocate memory for path expansion.
decodingCharacterLMWeight from override weights: %@
decodingWordLMWeight from override weights: %@
decodingLexiconWeight from override weights: %@
decodingLexiconLowerBoundLogProbability from override weights: %@
characterLMLowerBoundLogProbability from override weights: %@
decodingWordLMLowerBoundLogProbability from override weights: %@
Failed to load n-gram model from TextRecognition.framework at location %@ with error %@
Resource for transliteration map not found for locale "%@" (script=%lu, language=%lu) with resource path "%s"
CHPreserveOriginalRecognitionStep is running
CHLexiconCorrectionStep is running with autoCapitalizationMode: %@
CHTransliterateHalfWidthPunctuationStep is running
CHOpeningClosingCharacterMatchingStep is running
CHSemanticTokenizerStep is running
CHIdentifyLowAlignmentConfidenceColumnsStep is running
CHCleanUpSpacesStep is running
CHCandidateRefinementStep is running
CHRemoveSpacesFromStrongURLsAndEmailsStep is running
CHRemoveSpacesFromStrongURLsStep range: %@ stringLength: %li isEmail: %i isUrl: %i
CHRemoveSpacesFromSpecialFieldsStep is running
CHRemoveSpacesFromHashtagsAndMentionsStep is running
CHTransliterateChineseStep is running
CHTransliterateConfusableCharactersStep is running
CHTransliterateIsolatedConfusableCharactersStep is running
CHTransliterateFrenchLigaturesStep is running
CHReorderSCTCConfusionStep is running
CHMultiWordOVSFilteringStep is running
CHNumberFieldResultReorderingStep is running
CHMergeColumnsNoWhiteSpaceStep is running
CHJapaneseTokenizationAndConversionStep is running
CHRemoveSpacesBetweenJapaneseCharactersStep is running
!`$a$b$c$d$e$f$g$h$
`"e"d"
softlink:r:path:/System/Library/Frameworks/UIKit.framework/UIKit
softlink:r:path:/System/Library/Frameworks/AppKit.framework/AppKit
softlink:r:path:/System/Library/PrivateFrameworks/InputContext.framework/InputContext
softlink:r:path:/System/Library/PrivateFrameworks/KeyboardServices.framework/KeyboardServices
softlink:r:path:/System/Library/Frameworks/CoreServices.framework/CoreServices
CHTextInputTargetContentInfo
NSMutableCopying
CHMutableTextInputTargetContentInfo
NSCopying
CHClassifiableDrawing
7 0E
CHLanguageUtilities
CHEncodedStrokeIdentifier
NSSecureCoding
NSCoding
CHTokenizedTextResultToken
Private
CHMutableTokenizedTextResultToken
CHRecognizerOptions
CHRecognizer
CHRecognizing
NSObject
Insight
CHDrawingContext
CHCTCRecognitionModel
CHRemoteRequestProtocol
CHRemoteRecognizer
CHStrokeUtilities
CHRemoteRecognitionRequest
CHTextInputScriptSpec
CHRecognitionInsightRequest
CHRecognitionInsight
Internal
CHDrawing
CHCutPoint
CHSegmentDescriptor
CHDrawingSegmentGroup
CHCornerDetector
CHTokenizedTextResultColumn
CHMutableTokenizedTextResultColumn
CHContextualCharacterTransliteration
CHPointFIFO
CHPointStrokeFIFO
CHBoxcarFilterPointFIFO
CHQuadCurvePointFIFO
CHRecognitionResult
CHTextRecognitionResult
CHSketchRecognitionResult
CHLineSketchRecognitionResult
CHManhattanLineSketchRecognitionResult
CHOutlinedArrowSketchRecognitionResult
CHRectangleSketchRecognitionResult
CHTriangleRecognitionResult
CHEllipseRecognitionResult
CHChatBubbleRecognitionResult
CHStarRecognitionResult
CHPentagonRecognitionResult
CHScribbleRecognitionResult
CHHeartRecognitionResult
CHCloudRecognitionResult
CHFreeformRecognitionResult
CHTokenizedTextResult
CHMutableTokenizedTextResult
CHSpellCheckerErrorModel
CHSpellChecker
CHPolygon
CHRecurrentNeuralNetwork
CHRecurrentNeuralNetworkMontreal
CHRecurrentNeuralNetworkCoreML
CHStrokeClassificationModel
CHContextualTextResult
CHContextualTextResults
CHTokenizedStrokeResult
CHStringOVSChecker
CHRecognizerConfiguration
CHCharacterSetRules
NetworkCursor
CHPatternNetwork
CHResultWithContext
CHPostProcessingManager
CHPostprocessingStep
CHTextFieldTypeSwitchStep
CHPreserveOriginalRecognitionStep
CHLexiconCorrectionStep
CHTransliterateHalfWidthPunctuationStep
CHOpeningClosingCharacterMatchingStep
CHSemanticTokenizerStep
CHIdentifyLowAlignmentConfidenceColumnsStep
CHCleanUpSpacesStep
CHCandidateRefinementStep
CHRemoveSpacesFromStrongURLsAndEmailsStep
CHRemoveSpacesFromSpecialFieldsStep
CHRemoveSpacesFromHashtagsAndMentionsStep
CHTransliterateChineseStep
CHTransliterateConfusableCharactersStep
CHTransliterateIsolatedConfusableCharactersStep
CHTransliterateFrenchLigaturesStep
CHReorderSCTCConfusionStep
CHMultiWordOVSFilteringStep
CHNumberFieldResultReorderingStep
CHMergeColumnsNoWhiteSpaceStep
CHJapaneseTokenizationAndConversionStep
CHRemoveSpacesBetweenJapaneseCharactersStep
CHMecabraWrapper
CoreHandwriting
CHExtensions
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
length
init
copy
_initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:autoCapitalizationMode:autoCorrectionMode:isSingleLine:lastCharacterLevelPosition:protectedCharacterIndexes:
initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:isSingleLine:lastCharacterLevelPosition:
dealloc
referenceSubstringRange
arrayWithCapacity:
characterRectsInReferenceSubstring
stringWithFormat:
addObject:
ch_descriptionWithSeparator:filterBlock:
contentType
stringForRecognitionContentType:
selectedTextRange
activePreviewRange
strokeCoveredTextRange
lastCharacterLevelPosition
description
textInputTarget
textContentLength
referenceSubstring
isCursorStrong
containsCommittedStrokes
protectedCharacterIndexes
stringByAppendingFormat:
setReferenceSubstring:range:characterRects:
setTextInputTarget:
setTextContentLength:
setStrokeCoveredTextRange:
setSelectedTextRange:
setIsCursorStrong:
setContainsCommittedStrokes:
setActivePreviewRange:
setContentType:
autoCapitalizationMode
setAutoCapitalizationMode:
autoCorrectionMode
setAutoCorrectionMode:
isSingleLine
setIsSingleLine:
supportsAutoLineBreaks
setSupportsAutoLineBreaks:
setLastCharacterLevelPosition:
setProtectedCharacterIndexes:
characterRectForCharacterIndex:
characterSetWithCharactersInString:
characterAtIndex:
characterIsMember:
enumerateCharacterRectsInRange:reverse:block:
substringWithRange:
rangeOfComposedCharacterSequenceAtIndex:
enumerateCharacterRectsInRange:block:
mutableCopyWithZone:
initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:autoCapitalizationMode:autoCorrectionMode:isSingleLine:lastCharacterLevelPosition:
initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:activePreviewRange:contentType:lastCharacterLevelPosition:
absoluteLocationFromRelativeLocation:
relativeLocationFromAbsoluteLocation:
visualCharacterRectForCharacterIndex:
referenceSubstringInRange:
referenceSubstringRangeOfComposedCharacterAtIndex:
unionCharacterRects
.cxx_destruct
_textInputTarget
_textContentLength
_referenceSubstring
_referenceSubstringRange
_characterRectsInReferenceSubstring
_strokeCoveredTextRange
_selectedTextRange
_isCursorStrong
_containsCommittedStrokes
_activePreviewRange
_contentType
_autoCapitalizationMode
_autoCorrectionMode
_isSingleLine
_supportsAutoLineBreaks
_lastCharacterLevelPosition
_protectedCharacterIndexes
T@"CHTextInputTarget",R,N,V_textInputTarget
Tq,R,N,V_textContentLength
T@"NSString",R,C,N,V_referenceSubstring
T{_NSRange=QQ},R,N,V_referenceSubstringRange
T{_NSRange=QQ},R,N,V_strokeCoveredTextRange
T{_NSRange=QQ},R,N,V_selectedTextRange
TB,R,N,V_isCursorStrong
TB,R,N,V_containsCommittedStrokes
T{_NSRange=QQ},R,N,V_activePreviewRange
Ti,R,N,V_contentType
Ti,R,N,V_autoCapitalizationMode
Ti,R,N,V_autoCorrectionMode
TB,R,N,V_isSingleLine
TB,R,N,V_supportsAutoLineBreaks
Tq,R,N,V_lastCharacterLevelPosition
T^{CGRect={CGPoint=dd}{CGSize=dd}},R,N,V_characterRectsInReferenceSubstring
T@"NSIndexSet",R,C,N,V_protectedCharacterIndexes
copyWithZone:
T@"CHTextInputTarget",&,D,N
Tq,D,N
T{_NSRange=QQ},D,N
TB,D,N
Ti,D,N
T@"NSIndexSet",C,D,N
initWithDrawing:characterSet:expandCodePoints:normalizationContext:maxCandidateCount:
drawing
characterSet
expandCodePoints
normalizationContext
maxCandidateCount
_expandCodePoints
_drawing
_characterSet
_maxCandidateCount
_normalizationContext
T@"CHDrawing",R,N,V_drawing
T@"NSCharacterSet",R,N,V_characterSet
TB,R,N,V_expandCodePoints
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N,V_normalizationContext
TQ,R,N,V_maxCandidateCount
lowercaseString
array
whitespaceCharacterSet
stringByTrimmingCharactersInSet:
rangeOfString:
numberWithUnsignedInteger:
valueWithRange:
normalizeLMTokenIDForWord:tokenID:isFromPattern:score:languageModel:
arrayWithArray:
componentsSeparatedByCharactersInSet:
countByEnumeratingWithState:objects:count:
properties
string
integerValue
objectForKeyedSubscript:
getCharacters:
stringWithCharacters:length:
isEqualToString:
mutableCopy
ch_basicAlphanumericCharacterSet
formUnionWithCharacterSet:
ch_hiraganaCharacterSet
ch_katakanaCharacterSet
ch_kanjiCharacterSet
ch_kanjiCompCharacterSet
count
isMecabraConversionCandidateAllowed:
punctuationCharacterSet
rangeOfCharacterFromSet:
localeIdentifier
arrayWithObjects:
dictionaryWithObjects:forKeys:count:
orthographyWithDominantScript:languageMap:
enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:
componentsJoinedByString:
expectedMinStrokeCount:
appendString:
compare:options:
stringWithString:
symbolCharacterSet
uppercaseStringWithLocale:
computeEditPenalizationFromString:toReferenceString:withSuffix:withCaseSensitivity:withFirstLetterCaseSensitivity:withDiacriticSensitivity:withDiacriticsCharSet:withConsumableStrokesCharSet:outputSuffix:lexiconExtraCharacters:firstLetterCaseFlipped:
tokenIDForString:withLexicon:
substringFromIndex:
hasPrefix:
caseInsensitiveCompare:
isInappropriateLexiconEntry:
combinedScore
compare:
rangeOfString:options:
objectForKey:
stringByReplacingCharactersInRange:withString:
singleScriptCodeForString:
lowercaseStringWithLocale:
strokeIndexes
recognitionScore
alignmentScore
substrokeCount
bounds
initWithString:strokeIndexes:wordID:recognitionScore:combinedScore:alignmentScore:properties:substrokeCount:bounds:
wordID
tokensRangesForString:outTokenIDs:languageModel:
splitStringIntoSubtokensForLexicon:minLength:
findPartialMatchInPhraseLexicon:token:contextBeforeToken:
transliterateStringUsingICUTransliterator:_icuTransliterator:
characterLMLogProbabilityForString:characterLM:
mecabraTokenizationAndKanaConversionForString:mecabraEngine:contextRef:leftCandidateRef:alternativeCandidateLimit:
shouldCapitalizeGivenHistory:shouldAutoCapitalizeSetting:locale:
lexiconCorrectionsForToken:locale:lexicon:lmVocabulary:ovsStringChecker:textReplacements:consumableStrokesSet:minimumTokenScore:activeHistoryRange:outBestTokenScore:shouldCapitalizeWord:shouldSkipEntryCorrection:allowFullCapsCorrections:minimalLengthForLowConfidenceCorrections:lowConfidenceThreshold:minimalLengthForCustomCapitalizationCorrections:outBestTokenIndex:outFoundTokenInLexicon:outFoundCaseMatchingTokenInLexicon:outCorrectionFromOutOfContextEntry:
dictionaryWithObjectsAndKeys:
pointCountForStrokeIndex:
pointForStrokeIndex:pointIndex:
subdataWithRange:
hash
isEqualToCHEncodedStrokeIdentifier:
encodedStrokeIdentifier
isEqual:
encodeObject:forKey:
decodeObjectOfClass:forKey:
initWithData:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
_savedHash
_encodedStrokeIdentifier
T@"NSData",R,N,V_encodedStrokeIdentifier
addPoint:
indexSet
characterSetWithRange:
decodeInt32ForKey:
decodeDoubleForKey:
decodeIntegerForKey:
encodeInt32:forKey:
encodeDouble:forKey:
encodeInteger:forKey:
isEqualToIndexSet:
isEqualToTokenizedTextResultToken:
tokenWithString:strokeIndexes:wordID:recognitionScore:combinedScore:alignmentScore:properties:substrokeCount:bounds:
isEquivalentToToken:
_string
_strokeIndexes
_wordID
_recognitionScore
_combinedScore
_alignmentScore
_properties
_substrokeCount
_bounds
TI,R,N,V_wordID
T@"NSString",R,C,N,V_string
T@"NSIndexSet",R,C,N,V_strokeIndexes
Td,R,N
TQ,R,N
Tq,R,N
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
setString:
addIndexes:
setStrokeIndexes:
setWordID:
setRecognitionScore:
setCombinedScore:
setAlignmentScore:
setProperties:
setSubstrokeCount:
setBounds:
appendToken:
T@"NSString",C,D,N
TI,D,N
Td,D,N
TQ,D,N
T{CGRect={CGPoint=dd}{CGSize=dd}},D,N
stringWithCString:encoding:
initWithComputeUnits:
fileURLWithPath:
modelWithContentsOfURL:configuration:error:
lastPathComponent
stringByDeletingPathExtension
stringByDeletingLastPathComponent
stringByAppendingString:
stringByAppendingPathComponent:
cStringUsingEncoding:
modelDescription
inputDescriptionsByName
multiArrayConstraint
shape
objectAtIndex:
unsignedIntValue
outputDescriptionsByName
dataType
numberWithInteger:
numberWithUnsignedInt:
arrayWithObjects:count:
initWithShape:dataType:error:
dataPointer
objectAtIndexedSubscript:
bitmapRepresentationForSize:
setObject:forKeyedSubscript:
initWithDictionary:error:
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
initWithUsesCPUOnly:
predictionFromFeatures:options:error:
localizedDescription
featureValueForName:
multiArrayValue
setMaxComputationBatchSize:
strides
enumerateSubstringsInRange:options:usingBlock:
enableCachingIfAvailable
setEnableCachingIfAvailable:
enableGen2ModelIfAvailable
setEnableGen2ModelIfAvailable:
enableGen2CharacterLMIfAvailable
setEnableGen2CharacterLMIfAvailable:
_enableCachingIfAvailable
_enableGen2ModelIfAvailable
_enableGen2CharacterLMIfAvailable
TB,N,V_enableCachingIfAvailable
TB,N,V_enableGen2ModelIfAvailable
TB,N,V_enableGen2CharacterLMIfAvailable
defaultLocaleForRecognitionType:withMode:
initWithMode:locale:learningDictionaryURL:recognizerOptions:
isLocaleSupported:withMode:
stringForRecognitionMode:
initWithMode:locale:contentType:enableCachingIfAvailable:enableGen2ModelIfAvailable:enableGen2CharacterLMIfAvailable:
defaultMinimumDrawingSize
_reloadEngineAndResources
initWithType:mode:locale:learningDictionaryURL:
numberWithDouble:
_defaultPunctuationStringsOutputScores:maxCandidateCount:
numberWithInt:
indexSetWithIndexesInRange:
doubleValue
numberWithBool:
initWithString:score:wordRanges:wordIDs:wordRecognitionScores:wordCombinedScores:wordStrokeSets:wordLexicalEntries:wordPatternEntries:rareWordIndexes:inappropriateWordIndexes:isTextReplacement:
indexPathWithIndex:
initWithTokenRows:
initWithTokenColumns:transcriptionPaths:scores:recognizerGenerationIdentifier:
isInappropriateString:
_transliterationVariantsForString:
shouldGenerateDigitLetterAlternatives
_alternativeInterpretationsForString:
substringToIndex:
shouldEnforceGrammarOnTransliterations
rootCursorForContentType:inNetwork:forFirstSegmentGroup:
newCursorByAdvancingWithString:fromCursor:inNetwork:
newCursorByAdvancingWithSymbol:fromCursor:inNetwork:
replaceOccurrencesOfString:withString:options:range:
mecabraInputMethodType
initMecabraIfNeededWithType:learningDictURL:
_unloadEngineAndResources
newRecognitionEngine
newFreeFormEngine
isMainThread
newLanguageModelForRecognizer:async:synchronizationQueue:
newSpellChecker
newStaticLexicon:
newPhraseLexicon:
newCJKStaticLexicon
newOVSStringCheckerWithStaticLexicon:customLexicon:
newPatternFST
newPostProcessingFST
newGrammarFST
newRadicalClusterFST
newTransliterationVariantMap
whitelistMecabraRareCharacters
newCharacterLanguageModelAndMap:force:
newCTCRecognitionModel
newMecabraWrapper
_initializeTextDecoder
_initializePostProcessor
mode
_loadMecabraIfNeeded
mecabra
shouldLoadCJKLexicons
shouldForwardMecabraOTAAssetsUpdate
newLanguageModel
removeAllObjects
setObject:forKey:
completionsForCandidate:candidateContext:prefix:option:
containsObject:
rangeValue
addIndex:
initWithType:mode:locale:
addCharactersInRange:
sketchDescriptionForCode:
sketchCodeForDescription:
orientationRepresentationForSampling:convolutionWidth:
strokeCount
initWithString:score:rotation:center:size:
initWithString:score:rotation:vertex1:vertex2:vertex3:
initWithString:score:rotation:center:size:stemLocation:stemWidth:
cumulativePointToPointDistance
distanceBetweenFirstAndLastPoint
initWithScore:
initWithString:score:rotation:upperLeftPoint:upperRightPoint:lowerLeftPoint:lowerRightPoint:size:
initWithString:score:rotation:center:size:controlPointLocation:
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:
pointCount
valueWithPoint:
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:pathPoints:
_effectiveMaxRecognitionResultCount
insertObject:atIndex:
chatBubbleCandidateResultForDrawing:candidate:rejectionResult:
ellipseCandidateResultForDrawing:candidate:
rectangleCandidateResultForDrawing:candidate:
triangleCandidateResultForDrawing:candidate:
starCandidateResultForDrawing:candidate:
lineCandidateResultForDrawing:candidate:
heartCandidateResultForDrawing:candidate:
pentagonCandidateResultForDrawing:candidate:
outlineArrowCandidateResultForDrawing:candidate:
manhattanLineCandidateResultForDrawing:candidate:rejectionResult:
cloudCandidateResultForDrawing:candidate:rejectionResult:
score
setScore:
exchangeObjectAtIndex:withObjectAtIndex:
removeLastObject
firstObject
inappropriateWordIndexes
predicateWithBlock:
filterUsingPredicate:
_initialContextRectFromRecognizerOptions:
shouldRefineChineseCharacterCandidates
_refineChineseCharacterCandidates:drawing:
shouldApplyLMRescoring
_rescoreCandidatesWithLanguageModel:history:
shouldTransliterateAndSynthetizeCandidates
_applyTransliterationAndSyntheticCandidates:
shouldPromoteCJKCommonCharacters
isRareChineseEntry:
segments
_resolvedStrokeIndexes:segmentGroup:segmentOffset:substrokeCount:
shouldTransformCharacterProbabilitiesIntoLogScores
mecabraRareWordIndexes:wordRanges:
indexSetWithIndex:
_textReplacementResultForLegacyRecognitionResult:
_removeOVSResults:withHistory:
wordStrokeSets
tokenColumnCount
transcriptionWithPath:columnRange:filterLowConfidence:excludeGibberish:rejectionRate:tokenProcessingBlock:
_calculateJointWordLMScoreForString:wordRanges:wordIDs:patternEntries:history:historyLength:
decimalDigitCharacterSet
letterCharacterSet
invertedSet
boolValue
rangeOfCharacterFromSet:options:range:
setObject:atIndexedSubscript:
indexOfObject:
_tokensUsingLMTokenizerForString:wordRanges:nonWordPatterns:outTokenIDs:
unsignedIntegerValue
maximumLengthOfBytesUsingEncoding:
getBytes:maxLength:usedLength:encoding:options:range:remainingRange:
locale
initWithBytes:length:encoding:
whitespaceAndNewlineCharacterSet
rangeOfString:options:range:
shouldPerformGlobalBestSearch
shouldPerformGlobalBestSearchWithSmallLattice
shouldPerformIntegratedLexiconExpansion
shouldPenalizeLetterInsertion
shouldApplyLexicalPenalty
shouldComputeStrokePenalties
shouldExpandCodePoints
shouldPenalizePrefixes
shouldApplyRomanPostProcessing
tokenizedTextResultForRomanLatticePaths:history:activeHistoryRange:startNode:segmentGroup:
shouldApplyChinesePostProcessing
tokenizedTextResultForChineseLatticePaths:maximumPathCount:network:mecabraIDs:startNode:endNode:segmentGroup:
indexOfObjectPassingTest:
tokenizedTextResultForRomanSingleWordLatticePaths:history:activeHistoryRange:startNode:segmentGroup:
shouldTransliterateSentences
_applySentenceTransliterationCandidates:codesLen:codesMax:
stringByReplacingOccurrencesOfString:withString:
rareWordIndexes
removeObjectAtIndex:
wordCombinedScores
floatValue
_tokenizedTextResultFromResults:segmentGroup:offsetSegment:decodedStrokeSets:spaceBehavior:
adjustColumns
alphanumericCharacterSet
correctionsForString:shouldUseErrorModel:forLocale:
transcriptionPaths
transcriptionPathScores
tokenColumns
indexAtPosition:
tokensInTranscriptionPath:atColumnIndex:
tokenRows
spellCheckerCorrectionsForToken:spellChecker:languageModel:locale:
replaceObjectAtIndex:withObject:
recognizerGenerationIdentifier
shouldAutoCapitalize
characterType:
_updateResults:string:score:recognitionScore:lexicalEntry:patternEntry:isInappropriateWord:wordID:wordStrokeSet:
shouldApplyDiacriticSensitivity
sortUsingComparator:
_filterNonHumanFriendlyCandidates:
_adjustResultsForConfusableCharacters:
wordLexicalEntries
lastObject
wordPatternEntries
shouldUseCaching
setCachedDrawing:
supportedSegmentationStrategy
strokeIndicesSortedByMinXCoordinate
totalSegmentCount
_historyStringFromRecognizerOptions:
precomposedStringWithCanonicalMapping
_precedingSpaceBehaviorFromRecognizerOptions:
lengthOfBytesUsingEncoding:
sortedDrawingUsingMinXCoordinate
shouldFallbackOnSingleCharacterExpansion
recognitionResultsForSingleCharacterDrawing:segmentGroup:options:history:
appendTokenColumns:
matchingStrokePrefixRangeForDrawing:
_cachingWithMatchingStrokeRange:drawing:
_sortedIndexesForSegmentGroup:drawing:
_createCandidateNetworkFromSegmentationNetwork:segmentGroup:drawing:boundsAtNode:matchingStrokeRange:sortedSegmentIndexes:shouldCancel:
shouldComposeLexiconWithNetwork
_textResultWithNetworkComposeFromCandidateNetwork:segmentGroup:drawing:maxRecognitionResultCount:history:totalStrokeCount:totalSubstrokeCount:
setTranscriptionPaths:scores:
shouldExpandLexiconInNetwork
_textResultWithLexiconExpansionFromCandidateNetwork:history:prefix:activeHistoryRange:rootStaticCursor:rootCustomCursor:rootPatternCursor:segmentGroup:maxRecognitionResultCount:precedingSpaceBehavior:shouldPerformNoSpaceRecognition:totalStrokeCount:totalSubstrokeCount:shouldCancel:
_calculateBestTranscriptionPaths:scores:fromTokenizedResult:pathCount:history:skipLMRescoring:
shouldKeepDuplicateTokenIDs
trimTokensToTranscriptionPathCount:
shouldKeepOutOfPatternCandidates
filterCandidatesWithOutOfPattern:duplicateTokenIDs:keepOutOfLexiconAlternatives:keepAlternativeLengths:keepSubstrings:shouldKeepOriginalSpelling:
_addAlternativeCandidatesForTokenizedResult:
_contextTokenIDsFromHistory:maxCharacterLength:maxTokenCount:
refineAlternativeTokens:historyTokenIDs:languageModel:
contentTypeForNoSpaceRecognition
_createNetworkTruncatedPrefixStringUsingPrefix:fullHistoryStringLength:hasLexiconCursor:prefixStringLength:hasComplexChars:activeHistoryRange:
_mininmumPathCount
bestPathsFromNetwork:pathCount:staticLexiconCursor:customLexiconCursor:patternCursor:history:activeHistoryRange:mecabraIDs:segmentGroup:precedingSpaceBehavior:effectiveContentType:totalStrokeCount:totalSubstrokeCount:
classifiableDrawing
edgeIndex
strokeGroup
_adjustCandidatesForConfusableCharacters:
shouldDetectChinesePunctuation
_adjustCandidatesForChinesePunctuation:segmentDrawing:completeDrawing:
shouldDetectRomanPunctuation
_adjustCandidatesForRomanPunctuation:segmentDrawing:
numberOfSegments
numberOfSubstrokes
_addEdgesFromCandidates:toEdges:referenceEdge:network:consumedSegmentCount:numSubstrokes:
engineCandidateCount
shouldApplyCandidatesThresholding
_candidateLatticePruningThresholdForEdgeType:
appendSegment:fromDrawing:
_computeLocalFrameWithLeftBounds:rightBounds:
initWithEdgeIndex:numberOfSubstrokes:numberOfSegments:classifiableDrawing:strokeGroup:
_classifyEdgeDrawingsFromContexts:allEdges:segmentationNetwork:candidateNetwork:cachedEdgeSet:completeDrawing:allowSmallerFinalBatch:shouldCancel:
removeObjectsInRange:
shouldRelaxFinalCandidatesThresholding
_stringForCode:
engine
shouldApplyLMSorting
wordRanges
wordIDs
intValue
wordRecognitionScores
containsIndex:
shouldUseTokenPrecedingSpaces
isTextReplacement
indexPathByAddingIndex:
_calculateJointWordLMScoreForTokenPath:tokenizedResult:history:historyLength:pathTranscription:
_lmRescoringWeightForPath:
UTF8String
arrayWithObject:
subarrayWithRange:
strokeIndexSet
enumerateIndexesUsingBlock:
_tokenFromLegacyResult:wordIndex:strokeSet:substrokeCount:
addTokenRowWithTokens:
setTokenColumns:
modelName
ch_sentenceEndPunctuationCharacterSet
shouldApplyLatinSpacingForLocale:
newlineCharacterSet
generateSegmentsFromDrawing:
removeAllIndexes
initWithSegmentGroupIndex:segments:
_recognitionResultsForMultipleCharacterDrawing:segmentGroup:options:shouldCancel:
addIndexesInRange:
shouldRunNextGenRecognizer
_resultUsingNextGenerationPipelineWithDrawing:options:
initWithResult:leftContext:contentType:
process:options:
result
_resultUsingSegmentAndDecodePipelineWithDrawing:insight:options:shouldCancel:
shouldFilterLowProbabilityTranscriptionPaths
tokenizedResultWithFilteredPaths:
_initializeOVSCleanupPostProcessor
_setupRecognitionInsightRecording
_shouldReturnDefaultResultsForDrawing:
_defaultPunctuationResultWithStrokeCount:
_tokenizedTextRecognitionResultForDrawing:options:shouldCancel:
recordConfigurationForRecognizer:options:
recordTextResult:recognitionError:
_defaultLegacyPunctuationResultsWithStrokeCount:
recognitionResultsForSketchDrawing:options:
_legacyTextRecognitionResultsForDrawing:options:shouldCancel:
legacyTextRecognitionResults
recognitionResultsForDrawing:options:shouldCancel:
indexesOfStrokesSmallerThanSize:
_refineCandidates:withAllowedCandidateCodes:
boundsForStrokeIndex:
expectedMaxDotCount:
shouldTreatAllSmallStrokesAsPunctuation
_penalizeCandidatesForRomanPunctuation:punctuationStrokeCount:
removeIndexes:
convexHullForStrokes:inDrawing:
enlargedConvexHull:withMargin:
threePointsOrientationWithOrigin:pointA:pointB:
distanceFromPoint:toRectangle:
distanceFromPoint:toSegmentFromPoint:toPoint:
lowercaseLetterCharacterSet
uppercaseLetterCharacterSet
shouldApplyCharacterLMRescoring
shouldReplaceInvalidTokenIDs
_tokenIDForUNKCharacterString:
precedingSpaceDefaultBehavior
getValue:
maxRecognitionResultDefaultCount
initWithMode:locale:contentType:autoCapitalizationMode:autoCorrectionMode:enableCachingIfAvailable:enableGen2ModelIfAvailable:enableGen2CharacterLMIfAvailable:
_setConfiguration:
isEqualToRecognizerConfiguration:
hasSameResourcesAsConfiguration:
hasSamePostProcessingAsConfiguration:
recordInsightRequest:
_updatePrecedingAndTrailingSeparatorsForTopCandidate:history:textAfter:locale:outTrailingSeparator:inFirstTokenHasPrecedingSpace:outFirstTokenHasPrecedingSpace:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
initWithMode:locale:
recognitionMode
maxRecognitionResultCount
setMaxRecognitionResultCount:
activeCharacterSet
setActiveCharacterSet:
minimumDrawingSize
setMinimumDrawingSize:
Ti,R,N
Ti,N
T@"NSLocale",R,C,N
TQ,N
T@"NSCharacterSet",&,N
T{CGSize=dd},N
TB,R,N
initWithMode:locale:recognizerOptions:
initWithMode:locale:learningDictionaryURL:
initWithType:mode:learningDictionaryURL:
isOVSString:
transliterationVariantsForString:
_isLocaleSupported:
updateAddressBookLexicon:
updateUserDictionaryLexicon:
updateMecabraWithRegionalOTAAssets:nonRegionalOTAAssets:
setCustomLexicon:customVocabulary:
setCustomPhraseLexicon:
setTextReplacements:
_updateLanguageModel:
candidatesCleared
candidateAccepted:
completionsForCandidate:prefix:option:
strokeIndexesForLastCharacter
initWithType:mode:
supportedCharacterSet
supportedStrings
characterSetForStrings:
endpointsForDrawing:startLocation:endLocation:
bestTranscriptionPathsForTokenizedResult:scores:history:
recognitionEngineCachingKey
_ovsCleanupRecognitionResult:options:
textRecognitionResultForDrawing:options:shouldCancel:
recognitionResultsForDrawing:options:
_textAfterFromRecognizerOptions:
_drawingAnchorPointFromRecognizerOptions:
setRecognitionType:
setRecognitionMode:
setLocale:
recognitionType
setEngine:
freeformEngine
setFreeformEngine:
recognitionModel
setRecognitionModel:
textDecoder
setTextDecoder:
recognitionQueue
setRecognitionQueue:
radicalClusterFST
setRadicalClusterFST:
formatGrammarFST
setFormatGrammarFST:
patternFST
setPatternFST:
postProcessingFST
setPostProcessingFST:
configuration
languageModel
setLanguageModel:
lmVocabulary
setLmVocabulary:
characterLanguageModel
setCharacterLanguageModel:
cjkStaticLexicon
setCjkStaticLexicon:
cjkDynamicLexicon
setCjkDynamicLexicon:
staticLexicon
setStaticLexicon:
phraseLexicon
setPhraseLexicon:
customLexicon
setCustomLexicon:
customPhraseLexicon
textReplacements
textReplacementLowercasedKeyMapping
setTextReplacementLowercasedKeyMapping:
spellChecker
setSpellChecker:
mecabraWrapper
setMecabraWrapper:
ovsStringChecker
setOvsStringChecker:
learningDictionaryURL
setLearningDictionaryURL:
cachedDrawing
cachedResults
setCachedResults:
characterIDMap
setCharacterIDMap:
transliterationVariantMap
setTransliterationVariantMap:
icuTransliterator
setIcuTransliterator:
lastCharacterSegmentCount
setLastCharacterSegmentCount:
lastCharacterSegmentIndexes
setLastCharacterSegmentIndexes:
postProcessor
setPostProcessor:
ovsCleanupPostProcessor
setOvsCleanupPostProcessor:
.cxx_construct
_nextRecognitionInsightRequest
_activeRecognitionInsight
_whitelistMecabraRareCharacters
_recognitionType
_maxRecognitionResultCount
_activeCharacterSet
_engine
_freeformEngine
_recognitionModel
_textDecoder
_recognitionQueue
_radicalClusterFST
_formatGrammarFST
_patternFST
_postProcessingFST
_configuration
_languageModel
_lmVocabulary
_characterLanguageModel
_cjkStaticLexicon
_cjkDynamicLexicon
_staticLexicon
_phraseLexicon
_customLexicon
_customPhraseLexicon
_textReplacements
_textReplacementLowercasedKeyMapping
_spellChecker
_mecabraWrapper
_ovsStringChecker
_learningDictionaryURL
_cachedDrawing
_transliterationVariantMap
_icuTransliterator
_lastCharacterSegmentCount
_lastCharacterSegmentIndexes
_postProcessor
_ovsCleanupPostProcessor
_minimumDrawingSize
_cachedResults
_characterIDMap
T^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}},N,V_engine
T^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}},N,V_freeformEngine
T@"CHCTCRecognitionModel",&,N,V_recognitionModel
T@"CVNLPCTCTextDecoder",&,N,V_textDecoder
T@"NSObject<OS_dispatch_queue>",&,N,V_recognitionQueue
T^v,N,V_radicalClusterFST
T^v,N,V_formatGrammarFST
T@"CHPatternNetwork",&,N,V_patternFST
T@"CHPatternNetwork",&,N,V_postProcessingFST
T@"CHRecognizerConfiguration",&,N,S_setConfiguration:,V_configuration
T^v,N,V_languageModel
T^v,N,V_lmVocabulary
T^v,N,V_characterLanguageModel
T^v,N,V_cjkStaticLexicon
T^v,N,V_cjkDynamicLexicon
T^{_LXLexicon=},N,V_staticLexicon
T^{_LXLexicon=},N,V_phraseLexicon
T^{_LXLexicon=},N,V_customLexicon
T^{_LXLexicon=},N,V_customPhraseLexicon
T@"NSDictionary",&,N,V_textReplacements
T@"NSMutableDictionary",&,N,V_textReplacementLowercasedKeyMapping
T@"CHSpellChecker",&,N,V_spellChecker
T@"CHMecabraWrapper",&,N,V_mecabraWrapper
T@"CHStringOVSChecker",&,N,V_ovsStringChecker
T@"NSURL",&,N,V_learningDictionaryURL
T@"CHDrawing",C,N,V_cachedDrawing
T{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>={__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>=Q}}},N,V_cachedResults
T{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>={__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>=Q}}},N,V_characterIDMap
T^{VariantMap=^i^i^ii^iQ},N,V_transliterationVariantMap
T^^v,N,V_icuTransliterator
TQ,N,V_lastCharacterSegmentCount
T@"NSMutableIndexSet",&,N,V_lastCharacterSegmentIndexes
T@"CHPostProcessingManager",&,N,V_postProcessor
T@"CHPostProcessingManager",&,N,V_ovsCleanupPostProcessor
T@"NSLocale",C,N
Ti,N,V_recognitionType
TB,N
TQ,N,V_maxRecognitionResultCount
T@"NSCharacterSet",&,N,V_activeCharacterSet
T{CGSize=dd},N,V_minimumDrawingSize
recordInsightWithRequest:
recordedInsightFromLastRequest
T@"CHRecognitionInsight",R,N
_edgeIndex
_numberOfSubstrokes
_numberOfSegments
_classifiableDrawing
_strokeGroup
TQ,R,N,V_edgeIndex
Tq,R,N,V_numberOfSubstrokes
Tq,R,N,V_numberOfSegments
T@"CHClassifiableDrawing",R,N,V_classifiableDrawing
T{set<long, std::less<long>, std::allocator<long>>={__tree<long, std::less<long>, std::allocator<long>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::less<long>>=Q}}},R,N,V_strokeGroup
directionalFeaturesInputName
_extractFeaturesFromDrawing:inputName:interpointDistance:initialVectorAnchorPoint:normalizeFeatures:padFeatures:error:
featureCounts
sequenceCompression
gapFeatureIndex
inputNames
distanceFeatureIndex
sinAlphaFeatureIndex
cosAlphaFeatureIndex
distMean
distStd
featureProviderForDrawing:initialVectorAnchorPoint:normalizeFeatures:padFeatures:outStrokeEndings:outInputSequenceLength:outOutputSequenceLength:
recognizeDrawing:minimumDrawingSize:initialVectorAnchorPoint:activeCharacterSet:outStrokeEndings:
_extractFeaturesFromDrawing:inputName:interpointDistance:error:
characterProbabilityOutputName
codeMap
blankIndex
spaceIndex
normalizeFeatures
setNormalizeFeatures:
setDistMean:
setDistStd:
interpointDistance
setInterpointDistance:
hasBatchFirstFeatureArrayShape
setHasBatchFirstFeatureArrayShape:
_stringCodeMap
_normalizeFeatures
_hasBatchFirstFeatureArrayShape
_sequenceCompression
_distanceFeatureIndex
_sinAlphaFeatureIndex
_cosAlphaFeatureIndex
_gapFeatureIndex
_directionalFeaturesInputName
_characterProbabilityOutputName
_codeMap
_blankIndex
_spaceIndex
_distMean
_distStd
_interpointDistance
__stringCodeMap
T@"NSOrderedSet",R,V__stringCodeMap
Tq,R,N,V_sequenceCompression
Tq,R,N,V_distanceFeatureIndex
Tq,R,N,V_sinAlphaFeatureIndex
Tq,R,N,V_cosAlphaFeatureIndex
Tq,R,N,V_gapFeatureIndex
T@"NSString",R,N,V_directionalFeaturesInputName
T@"NSString",R,N,V_characterProbabilityOutputName
T^{CHCodeMap=*Q^II},R,N,V_codeMap
Tq,R,N,V_blankIndex
Tq,R,N,V_spaceIndex
TB,N,V_normalizeFeatures
Td,N,V_distMean
Td,N,V_distStd
Td,N,V_interpointDistance
TB,N,V_hasBatchFirstFeatureArrayShape
initWithMode:locales:activeCharacterSetPerLocale:recognizerOptions:
removeObjectForKey:
initWithMachServiceName:options:
handleRecognitionRequest:withReply:
transcriptionPathsForTokenizedResult:recognitionRequest:withReply:
interfaceWithProtocol:
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
setRemoteObjectInterface:
_teardownXPCConnection
setInterruptionHandler:
setInvalidationHandler:
resume
invalidate
_recognitionRequestWithDrawing:options:
_recognitionResultForRequest:error:
endStroke
synchronousRemoteObjectProxyWithErrorHandler:
locales
priority
initWithLocales:recognitionMode:drawing:options:priority:
activeCharacterSetPerLocale
setActiveCharacterSetPerLocale:
shouldUseTextReplacements
setShouldUseTextReplacements:
_setupXPCConnectionIfNeeded
setHasBeenSubmitted:
isEqualToArray:
isEqualToDictionary:
isEqualToRemoteRecognizer:
drawingStrokeLimitForLocale:
maxRequestStrokeCountForLocale:
absoluteMaxStrokeCountPerRequest
textRecognitionResultForDrawing:options:error:
transcriptionPathsForTokenizedTextResult:withHistory:scores:error:
setPriority:
_connection
_shouldUseTextReplacements
_recognitionMode
_locales
_activeCharacterSetPerLocale
_priority
__connection
T@"NSXPCConnection",R,N,V__connection
T@"NSArray",R,C,N,V_locales
T@"NSDictionary",R,C,N,V_activeCharacterSetPerLocale
TB,N,V_shouldUseTextReplacements
Tq,N,V_priority
Ti,R,N,V_recognitionMode
Ti,N,V_contentType
Ti,N,V_autoCapitalizationMode
Ti,N,V_autoCorrectionMode
TB,R,N,V_enableCachingIfAvailable
TB,R,N,V_enableGen2ModelIfAvailable
TB,R,N,V_enableGen2CharacterLMIfAvailable
orderedStrokes
strokeGroups
strokeIdentifiers
unionSet:
removeObject:
isPointEnumerationSupportedForStroke:
indexesOfObjectsPassingTest:
removeObjectsAtIndexes:
strokeIdentifierFromData:
strokeForIdentifier:
strokeIdentifier
strokeProviderVersion
encodedStrokeIdentifier:
enumeratePointsWithDistanceStep:usingBlock:
enumeratePointsWithTimestep:usingBlock:
enumeratePointsForStroke:interpolationType:resolution:usingBlock:
firstStrokeIdentifier
lastStrokeIdentifier
endTimestamp
startTimestamp
convexHullForPoints:
getAddedStrokes:removedStrokeIdentifiers:inStrokeProvider:lastGroupingResult:
strokeForIdentifier:inStrokeProvider:
strokeIdentifiersForData:withStrokeProvider:
encodedStrokeIdentifiers:withStrokeProvider:
durationOfStrokesInStrokeGroup:strokeProvider:
speedForFinalTimeRange:stroke:
arcLengthForStroke:
boundingBoxOfPoints:rotatedAroundPoint:byAngle:
unionStrokeBounds:usingStrokeCountLimit:reverseOrder:
unionStrokeBounds:aroundXPosition:usingOneSideStrokeCountLimit:
convexHullForStroke:
circumferenceRatioOfCircleFittedToPoints:circleCenter:circleRadius:
vectorMeanWithoutOutliers:
lineOrientationForStrokePoints:error:
regularizedPathFromPoints:delta:gamma:outError:
setLocales:
setDrawing:
setOptions:
setWithArray:
decodeObjectOfClasses:forKey:
decodeFloatForKey:
decodeBoolForKey:
encodeFloat:forKey:
encodeBool:forKey:
configurationKey
isEqualToDrawing:
options
isEqualToRemoteRecognitionRequest:
stringForAutoCapitalizationMode:
stringForAutoCorrectionMode:
allValues
recognizerConfigurationKeyWithLocale:
hasBeenSubmitted
_hasBeenSubmitted
_options
T@"NSArray",C,N,V_locales
T@"NSDictionary",C,N,V_activeCharacterSetPerLocale
Ti,N,V_recognitionMode
T@"NSDictionary",C,N,V_options
T@"CHDrawing",C,N,V_drawing
TB,N,V_hasBeenSubmitted
isSkippableScriptCode:
dataUsingEncoding:
bytes
shouldCorrectionGesturesSnapToTokensForScriptCode:
isCharacterFullWidth:
isRightToLeftScriptForCharacter:
shouldRelaxCharacterBoundsPercentageOverlapForScript:
isCharacterEmoji:
appendFormat:
insightRequest
recognizerActiveCharacterSet
recognizerLocale
recognizerRecognitionModeDescription
recognizerContentTypeDescription
autoCapitalizationModeDescription
autoCorrectionModeDescription
recognizerMaxRecognitionResultCount
recognizerMinimumDrawingSize
recognizerOptions
enumerateKeysAndObjectsUsingBlock:
inputDrawing
textResult
recognizerRecognitionMode
recognizerContentType
setInsightRequest:
setRecognizerLocale:
setRecognizerRecognitionMode:
setRecognizerContentType:
setRecognizerActiveCharacterSet:
setRecognizerOptions:
setRecognizerMaxRecognitionResultCount:
setRecognizerMinimumDrawingSize:
setInputDrawing:
setTextResult:
recognitionError
setRecognitionError:
_recognizerRecognitionMode
_recognizerContentType
_insightRequest
_recognizerLocale
_recognizerActiveCharacterSet
_recognizerOptions
_recognizerMaxRecognitionResultCount
_inputDrawing
_textResult
_recognitionError
_recognizerMinimumDrawingSize
T@"CHRecognitionInsightRequest",&,N,V_insightRequest
T@"NSLocale",C,N,V_recognizerLocale
Ti,N,V_recognizerRecognitionMode
Ti,N,V_recognizerContentType
T@"NSCharacterSet",C,N,V_recognizerActiveCharacterSet
T@"NSDictionary",C,N,V_recognizerOptions
TQ,N,V_recognizerMaxRecognitionResultCount
T{CGSize=dd},N,V_recognizerMinimumDrawingSize
T@"CHDrawing",C,N,V_inputDrawing
T@"CHTokenizedTextResult",C,N,V_textResult
T@"NSError",C,N,V_recognitionError
T@"NSString",R,N
recordInputDrawing:
componentsSeparatedByString:
dataWithBytes:length:
dictionary
dataWithJSONObject:options:error:
initWithData:encoding:
drawingTransformedWithTranslation:scaleFactor:
startCutPoint
strokeIndex
endCutPoint
pointIndex
allocWithZone:
initWithCGImage:
initWithContentsOfFile:
initWithContentsOfXYString:
initWithContentsOfJSONDictionary:
drawingWithStrokesFromIndexSet:
centroidForStrokeIndexes:
boundsForStrokeIndexes:
strokeBoundsAtIndex:
clear
isPrefixForDrawing:
xyRepresentation
jsonStringRepresentation
drawingScaledByFactor:
drawingSpatiallyResampled:outputPointMap:
setLineHeight:
boundingBoxForDrawingSegmentFromCutPoint:toCutPoint:
averageCharacterHeightEstimation:minChunkHeight:
debugQuickLookObject
T{CHDrawingStrokes={vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}{vector<bool, std::allocator<bool>>=^QQ{__compressed_pair<unsigned long, std::allocator<unsigned long>>=Q}}{vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}qI{Matrix<double>=^^?^dII}d{vector<int, std::allocator<int>>=^i^i{__compressed_pair<int *, std::allocator<int>>=^i}}},N,V_drawing
sortedArrayUsingComparator:
sortedCHCutPointArray:
initWithStrokeIndex:pointIndex:isEndOfStroke:
isStartOfStroke
isEndOfStroke
_isEndOfStroke
_strokeIndex
_pointIndex
Tq,R,N,V_strokeIndex
Tq,R,N,V_pointIndex
TB,R,N,V_isEndOfStroke
isSinglePointSegment
initWithSegmentID:startCutPoint:endCutPoint:referenceDrawing:
segmentID
boundingBoxFromSegmentID:toSegmentID:withSegments:withSourceDrawing:
indexForSegmentID:fromSegments:
segmentBounds
contextBounds
setContextBounds:
_segmentID
_startCutPoint
_endCutPoint
_segmentBounds
_contextBounds
T@"NSNumber",R,N,V_segmentID
T@"CHCutPoint",R,N,V_startCutPoint
T@"CHCutPoint",R,N,V_endCutPoint
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N,V_segmentBounds
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_contextBounds
segmentGroupIndex
_segmentGroupIndex
_segments
Tq,R,N,V_segmentGroupIndex
T@"NSArray",R,N,V_segments
_detectCorners
initWithIndexSet:
cornerIndexes
firstIndex
resampledDrawing
_distance:p1:p2:
minimumSignificantSegmentLength
_resolveResampledDirectionChangePointIndexes:
_resampleDrawing:outputPointMap:
_cornerIndexSet
_strawSize
sortedArrayUsingSelector:
numberWithUnsignedLong:
_postProcessCorners:corners:straws:
_detectDirectionalChanges
_resamplingDistance:
shouldUseDynamicSampling
_isLine:usingThreshold:p1:p2:
_strokeHalfwayCorner:p1:p2:
_removeColinearCorners:usingThreshold:corners:
_removeColinearCorners:usingDistanceThreshold:usingLowerThreshold:usingUpperThreshold:corners:
_removeAdjacentCorners:corners:straws:
_pathDistance:p1:p2:
directionChangeCornerIndexes
setMinimumSignificantSegmentLength:
setShouldUseDynamicSampling:
directionChangeCount
highestDirectionChangeCount
_directionChangeCornerIndexes
_resampledDrawingPointMap
_shouldUseDynamicSampling
_minimumSignificantSegmentLength
_resampledDrawing
_directionChangeCount
_highestDirectionChangeCount
__strawSize
__cornerIndexSet
__directionChangeCornerIndexes
__resampledDrawingPointMap
TQ,R,N,V__strawSize
T@"NSMutableIndexSet",R,C,N,V__cornerIndexSet
T@"NSMutableIndexSet",R,C,N,V__directionChangeCornerIndexes
T{vector<std::map<long, long>, std::allocator<std::map<long, long>>>=^v^v{__compressed_pair<std::map<long, long> *, std::allocator<std::map<long, long>>>=^v}},R,N,V__resampledDrawingPointMap
TB,N,V_shouldUseDynamicSampling
Td,N,V_minimumSignificantSegmentLength
T@"CHDrawing",R,C,N,V_resampledDrawing
TQ,R,N,V_directionChangeCount
TQ,R,N,V_highestDirectionChangeCount
enumerateObjectsUsingBlock:
isEqualToTokenizedTextResultColumn:
indexOfEquivalentTokenRow:tokenRange:
containsStartingTokenEquivalentToToken:
_tokenRows
T@"NSArray",R,C,N,V_tokenRows
T@"NSIndexSet",R,N
_mutableTokenRows
mergeTokenRow:intoUniqueRows:
setTokenRows:
setTokenRowWithTokens:atIndex:
removeTokenRowAtIndex:
sortTokenRows
T@"NSArray",C,D,N
getIndexes:range:
indexPathWithIndexes:length:
stringByAppendingPathExtension:
languageCode
scriptCode
capitalizedString
countryCode
uppercaseString
replaceCharactersInRange:withString:
characterTypeFromString:
stringByApplyingTransform:reverse:
insertString:atIndex:
ch_emptyCharacterSet
isSupersetOfSet:
rangeOfCharacterFromSet:options:
initWithConfusion:correction:locales:leftContext:rightContext:requiresLexiconMatch:
meetsContextRequirementWithLeftContext:rightContext:
isValidForLocale:
confusion
correction
requiredLeftContext
requiredRightContext
requiresLexiconMatch
_requiresLexiconMatch
_confusion
_correction
_requiredLeftContext
_requiredRightContext
T@"NSString",R,C,N,V_confusion
T@"NSString",R,C,N,V_correction
T@"NSArray",R,N,V_locales
T@"NSCharacterSet",R,N,V_requiredLeftContext
T@"NSCharacterSet",R,N,V_requiredRightContext
TB,R,N,V_requiresLexiconMatch
nextFIFO
emitPoint:
flush
initWithFIFO:
setNextFIFO:
_nextFIFO
T@"CHPointFIFO",&,N,V_nextFIFO
strokes
setStrokes:
_strokes
T@"CHDrawing",&,N,V_strokes
T@"CHDrawing",&,N,V_drawing
initWithFIFO:width:spacing:
emitAveragedPoint
initWithFIFO:width:
width
setWidth:
spacing
setSpacing:
prevPoints
setPrevPoints:
_spacing
_width
_prevPoints
T{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}},N,V_prevPoints
TQ,N,V_width
Tf,N,V_spacing
setUnitScale:
drawingTarget
lineWidth
setNeedsDisplayInRect:
interpolateFromPoint:toPoint:controlPoint:time:
initWithFIFO:drawingTarget:
setUnitScaleForViewSize:normalizedSize:contentScaleFactor:
unitScale
emitInterpolatedPoints
setEmitInterpolatedPoints:
emissionHandler
setEmissionHandler:
path
setPath:
setLineWidth:
points
setPoints:
controlPoints
setControlPoints:
lastPoint
setLastPoint:
setDrawingTarget:
_emitInterpolatedPoints
_unitScale
_emissionHandler
_path
_lineWidth
_drawingTarget
_lastPoint
_points
_controlPoints
T{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}},N,V_points
T{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}},N,V_controlPoints
T,N,V_lastPoint
T@"<CHPointFIFODrawingTarget>",&,N,V_drawingTarget
Tf,N,V_unitScale
TB,N,V_emitInterpolatedPoints
T@?,C,V_emissionHandler
T^{CGPath=},N,V_path
Td,N,V_lineWidth
_score
Td,V_score
mecabraCandidate
_isTextReplacement
_wordRanges
_wordIDs
_wordRecognitionScores
_wordCombinedScores
_wordStrokeSets
_wordLexicalEntries
_wordPatternEntries
_rareWordIndexes
_inappropriateWordIndexes
T@"NSString",R,V_string
T@"NSArray",R,V_wordRanges
T@"NSArray",R,V_wordIDs
T@"NSArray",R,V_wordRecognitionScores
T@"NSArray",R,V_wordCombinedScores
T@"NSArray",R,V_wordStrokeSets
T@"NSArray",R,V_wordLexicalEntries
T@"NSArray",R,V_wordPatternEntries
T@"NSIndexSet",R,V_rareWordIndexes
T@"NSIndexSet",R,V_inappropriateWordIndexes
TB,R,V_isTextReplacement
initWithString:score:rotation:
rotation
_rotation
Td,R,V_rotation
startEndpointType
endEndpointType
startLocation
endLocation
midpointLocation
controlPoint
pathPoints
cornerLine
_cornerLine
_startEndpointType
_endEndpointType
_pathPoints
_startLocation
_endLocation
_midpointLocation
_controlPoint
Ti,R,V_startEndpointType
Ti,R,V_endEndpointType
T{CGPoint=dd},R,V_startLocation
T{CGPoint=dd},R,V_endLocation
T{CGPoint=dd},R,V_midpointLocation
T{CGPoint=dd},R,V_controlPoint
T@"NSArray",R,V_pathPoints
TB,R,V_cornerLine
center
size
_center
_size
T{CGPoint=dd},R,V_center
T{CGSize=dd},R,V_size
upperLeftPoint
upperRightPoint
lowerLeftPoint
lowerRightPoint
_upperLeftPoint
_upperRightPoint
_lowerLeftPoint
_lowerRightPoint
T{CGPoint=dd},R,V_upperLeftPoint
T{CGPoint=dd},R,V_upperRightPoint
T{CGPoint=dd},R,V_lowerLeftPoint
T{CGPoint=dd},R,V_lowerRightPoint
vertex1
vertex2
vertex3
_vertex1
_vertex2
_vertex3
T{CGPoint=dd},R,V_vertex1
T{CGPoint=dd},R,V_vertex2
T{CGPoint=dd},R,V_vertex3
stemLocation
stemWidth
_stemWidth
_stemLocation
T{CGPoint=dd},R,V_stemLocation
Td,R,V_stemWidth
initWithTokenColumns:transcriptionPaths:scores:trailingSeparator:recognizerGenerationIdentifier:changeableColumnCount:
initWithTokenColumns:transcriptionPaths:scores:trailingSeparator:recognizerGenerationIdentifier:
initWithBestPathTokens:pathProbabilities:trailingSeparator:recognizerGenerationIdentifier:changeableColumnCount:
indexesPassingTest:
lastIndex
setPrecedingLineBreaks:
changeableTokenColumnCount
transcriptionWithPath:columnRange:filterLowConfidence:
_rawPath
shouldFilterOutStringForToken:isGibberish:
precedingSeparatorForToken:
stringByPaddingToLength:withString:startingAtIndex:
enumerateTokensInTranscriptionPath:columnRange:tokenProcessingBlock:
_isGibberishToken:
precedingLineBreaks
topTranscription
enumerateTokensInTopTranscriptionPathWithBlock:
_rawLanguageFitnessForTranscriptionPath:locale:recognitionMode:
localeWithLocaleIdentifier:
exemplarCharacterSet
_scoreMeanAndStdForToken:forLocale:
_characterCountInToken:filteringCharacterSet:filteredCharacterCount:
_normalizedLanguageFitness:
_averageTokenRecognitionScoreInTranscriptionPath:
ch_occurrencesOfCharactersInSet:maxCount:
_legacyTextRecognitionResultForTranscriptionIndex:
numberWithFloat:
isEqualToTokenizedTextResult:
areTokenRowsEquivalent:otherRow:
_originalRowFromRow:
precedingSeparatorForTopTranscriptionPath
allKeys
trailingSeparator
addObjectsFromArray:
tokenizedTextResultWithString:strokeIndexes:bounds:trailingSeparator:recognizerGenerationIdentifier:
extendedToken:withStrokeIndexSet:alignmentScore:bounds:
tokenizedTextResultFromResults:shouldPerformStrictFiltering:
initWithBestPathTokens:pathProbabilities:trailingSeparator:recognizerGenerationIdentifier:
tokenRowsAtColumnIndex:
tokenAtLocation:
recognizerDebugDescription
rawTranscription
precedingSeparatorForRawTranscriptionPath
strokeIndexesForColumnsInRange:
isValid
tokensFromTopTranscriptionWithCharacterRange:
languageFitnessForLocale:recognitionMode:
phraseCaseCorrectedResultWithHistory:phraseLexicon:maxPhraseLength:
_tokenColumns
_transcriptionPaths
_transcriptionPathScores
_recognizerGenerationIdentifier
_precedingLineBreaks
_changeableCount
_trailingSeparator
T@"NSString",R,C,N,V_trailingSeparator
T@"NSArray",R,C,N,V_transcriptionPaths
T@"NSArray",R,C,N,V_transcriptionPathScores
T@"NSString",R,C,N
arrayByAddingObjectsFromArray:
containsIndexes:
commonStrokeSetsFromSets:tokenRow:
_columnStrokeSetsFromTokenRows:
initWithIndexes:length:
containsString:
setChangeableTokenColumnCount:
getCharIndex:
replacementErrorScoreForIntendedCharacter:actualCharacter:
transpositionErrorScoreForIntendedFirstCharacter:intendedSecondCharacter:
sharedSpellServer
newErrorModel
spellServer:findMisspelledWordInString:language:wordCount:countOnly:correction:
ch_sentenceStartPunctuationCharacterSet
spellServer:suggestGuessesForWordRange:inString:language:options:
spellServer:suggestGuessDictionariesForWordRange:inString:language:options:errorModel:
isWordInUserDictionaries:caseSensitive:
topCorrectionForString:contextBeforeToken:contextSeparator:shouldUseErrorModel:forLanguage:
errorModel
setErrorModel:
_spellServer
_errorModel
T@"CHSpellCheckerErrorModel",&,N,V_errorModel
initWithVertices:vertexCount:
_sutherlandHodgmanClipForSubjectPolygon:usingClipPolygon:
enumerateEdgesWithBlock:
vertexCount
vertices
_createClippedPolygonForPolygon:clippingLine:clippedPolygonVertexCount:
initWithRect:
area
polygonDrawing
polygonByIntersectingWithClipPolygon:
edgeCountIntersectingLineSegment:
setArea:
_area
_vertexCount
_vertices
Td,N,V_area
Tq,R,N,V_vertexCount
T^{CGPoint=dd},R,N,V_vertices
defaultManager
contentsAtPath:
JSONObjectWithData:options:error:
keysSortedByValueUsingComparator:
longLongValue
normalizedDrawing:scaleFactor:interpolationDistance:outputPointMap:
initWithModelName:
normalizedDrawing:targetHeight:minimumDrawingSize:interpolationDistance:outScaleFactor:outputPointMap:
_modelName
T@"NSString",R,N,V_modelName
initWithObjectsAndKeys:
maxSequenceLength
windowOverlap
_recursivelyPredictProbabilitiesForDrawing:features:pointRange:modelInputName:modelOutputNames:probabilities:probabilityPredictionBlock:error:cancellationBlock:
outputNames
classCounts
_model
_inputNames
_featureCounts
_outputNames
_classCounts
__model
T^{MontrealNeuralNetwork=},R,N,V__model
T@"NSArray",R,N,V_inputNames
T@"NSDictionary",R,N,V_featureCounts
T@"NSArray",R,N,V_outputNames
T@"NSDictionary",R,N,V_classCounts
initWithModelName:featureIndex:
model
resourcePath
_resourcePath
T@"MLModel",R,N,V_model
T@"NSString",R,N,V_resourcePath
normalizedDrawing:targetHeight:interpolationDistance:outputPointMap:
textStrokeProbabilityOutputName
classifyStrokesInDrawing:outTextStrokeProbabilities:cancellationBlock:
sinAngleFeatureIndex
cosAngleFeatureIndex
endpointFeatureIndex
_sinAngleFeatureIndex
_cosAngleFeatureIndex
_endpointFeatureIndex
_textStrokeProbabilityOutputName
Tq,R,N,V_sinAngleFeatureIndex
Tq,R,N,V_cosAngleFeatureIndex
Tq,R,N,V_endpointFeatureIndex
T@"NSString",R,N,V_textStrokeProbabilityOutputName
defaultWordTerminationCharacterForLocale:
initWithTextResult:terminatingSpecialCharacter:
terminatingSpecialCharacter
setTerminatingSpecialCharacter:
_terminatingSpecialCharacter
T@"CHTokenizedTextResult",&,N,V_textResult
T@"NSString",&,N,V_terminatingSpecialCharacter
initWithTextResults:
textResultToIndexMappingFromTopTranscriptionWithCharacterRange:intersectionRanges:
textResults
setTextResults:
_textResults
T@"NSArray",&,N,V_textResults
expectedMaxStrokeCount:
isCompletePattern
initWithStrokeIdentifiers:resultLevel:
resultLevel
_resultLevel
_strokeIdentifiers
Tq,R,N,V_resultLevel
T@"NSSet",R,C,N,V_strokeIdentifiers
obfuscateString:
_isInappropriateString:withLexicon:
_isInappropriateString:withTrie:
_isInappropriateTokenID:withLexicon:
initWithTrie:staticLexicon:customLexicon:flags:
isInappropriateTokenID:
_ovsTrie
_flagsFilter
_decodeLocale:supportedLanguage:supportedScript:
_stringForRecognitionLanguage:
_stringForRecognitionScript:
supportedScriptForLocale:
supportedLanguageForLocale:
isLanguageSupported:withMode:
recognitionEngineCachingKeyForRecognitionLocale:
shouldRunNextGenCharacterLM
effectiveEngineLanguage
shouldTransliterateHalfWidthPunctuations
shouldApplySemanticTokenization
shouldIdentifyChangeableColumns
shouldMergeNoPrecedingWhiteSpaceColumns
shouldAutoCorrect
isTextMode
linguisticResourcesFallbackLocale
dictionaryWithDictionary:
loadLanguageModelFromOptions:fallbackLocale:
URLWithString:
checkResourceIsReachableAndReturnError:
absoluteString
requiredInappropriateFilteringFlags
initWithFile:
shouldRemoveSpacesFromStrongURLs
initWithPatternFst:
initWithLocale:
shouldReorderSCTCConfusion
initWithMaxResultCount:
shouldConvertKanaInPostProcessing
initWithMecabra:languageModel:ovsStringChecker:promoteKanaConversion:
initWithLanguageModel:ovsStringChecker:
shouldTransliterateConfusableCharacters
initWithStaticLexicon:customLexicon:locale:
initWithAutoCapitalizationMode:shouldAutoCorrect:shouldAutoCapitalize:locale:staticLexicon:customLexicon:phraseLexicon:customPhraseLexicon:spellChecker:lmVocabulary:ovsStringChecker:textReplacements:
shouldAddAlternativeWidthCandidates
initShouldAddAlternatives:
shouldRefineCandidates
initWithShouldKeepOutOfPatternCandidates:shouldKeepDuplicateTokenIDs:shouldKeepOutOfLexiconAlternatives:shouldKeepAlternativeLengths:shouldKeepSubstrings:shouldKeepOriginalSpelling:
shouldMarkMultiWordOVS
initWithOVSStringChecker:
shouldRemoveSpacesFromHashtagsAndMentions
initWithSequence:
initWithPatternFst:patternType:capitalizationToSplit:convertToLowercase:
initForPhoneNumberFields
initForDigitFields
initProcessorDefault:processorDigits:processorPhone:processorUsername:processorEmail:processorURL:processorASCII:processorEquation:
initWithStep:
ch_latinCharacterSet
modelNameChinese
modelNameJapanese
modelNameKorean
forcedGen2ModelLocaleForLocale:
effectiveTextInputRecognitionLocales:allowFallbackSecondaryLocale:
localesByLanguageGroup:
shouldUseFullWidthSpaceBasedOnContextForLocale:
shouldSwapTopTwoResults:locales:
shouldPerformStrictCandidateFiltering:
spellCheckingLocaleForRecognitionLocale:string:
shouldAdjustGroupingForLocale:
shouldAdjustGroupingHeuristicsForVeryComplexCharacters:
modelNameLatin
allNonLatinModelNames
shouldRemoveSpaceBetweenPreviousChar:andNextChar:inLocale:
shouldInsertSpaceBetweenPreviousChar:andNextChar:inLocale:
shouldRefinePrefixQueryMatchesForLocale:
decodingCharacterLMWeight
decodingWordLMWeight
decodingLexiconWeight
decodingLexiconLowerBoundLogProbability
characterLMLowerBoundLogProbability
decodingWordLMLowerBoundLogProbability
shouldTransliterateFrenchLigatures
shouldPreserveLegacyTranscriptionPaths
newPostProcessorWithStaticLexicon:customLexicon:phraseLexicon:customPhraseLexicon:characterLM:textReplacements:postProcessingFST:languageModel:mecabraWrapper:ovsStringChecker:spellChecker:lmVocabulary:maxResultCount:
newOVSCleanupPostProcessorWithStringChecker:
_language
_script
_decoderWeightsOverride
_mode
_contentTypeForNoSpaceRecognition
_locale
Ti,R,N,V_mode
T@"NSLocale",R,C,N,V_locale
Ti,R,N,V_contentTypeForNoSpaceRecognition
sharedCharacterSetRules
_charSetRulesQueue
_expectedMaxStrokeCount:
_expectedMinStrokeCount:
_expectedMaxDotCount:
_characterType:
lowercaseCharSet
setLowercaseCharSet:
uppercaseCharSet
setUppercaseCharSet:
digitCharSet
setDigitCharSet:
startPunctuationCharSet
setStartPunctuationCharSet:
middlePunctuationCharSet
setMiddlePunctuationCharSet:
endOfWordPunctuationCharSet
setEndOfWordPunctuationCharSet:
endOfSentencePunctuationCharSet
setEndOfSentencePunctuationCharSet:
digitStartPunctuationCharSet
setDigitStartPunctuationCharSet:
digitEndPunctuationCharSet
setDigitEndPunctuationCharSet:
arithmeticOperatorCharSet
setArithmeticOperatorCharSet:
dateTimeSeparatorCharSet
setDateTimeSeparatorCharSet:
dateTimeEndLetterCharSet
setDateTimeEndLetterCharSet:
numeralEndLetterCharSet
setNumeralEndLetterCharSet:
lexiconSkipCharSet
setLexiconSkipCharSet:
containsDotCharSet
setContainsDotCharSet:
containsTwoDotsCharSet
setContainsTwoDotsCharSet:
prefixCapitalizationExceptionCharSet
setPrefixCapitalizationExceptionCharSet:
selfLoopPunctuationCharSet
setSelfLoopPunctuationCharSet:
emoticonTopCharSet
setEmoticonTopCharSet:
emoticonMiddleCharSet
setEmoticonMiddleCharSet:
emoticonBottomCharSet
setEmoticonBottomCharSet:
emailAtCharSet
setEmailAtCharSet:
emailPunctuationCharSet
setEmailPunctuationCharSet:
urlPunctuationCharSet
setUrlPunctuationCharSet:
nonSpaceSeparatorCharSet
setNonSpaceSeparatorCharSet:
punctuationThatNeedSpaceCleanup
setPunctuationThatNeedSpaceCleanup:
currencySymbols
setCurrencySymbols:
symbolsRequiringSpaceBeforeInFrench
setSymbolsRequiringSpaceBeforeInFrench:
sentenceStartPunctuationInSpanish
setSentenceStartPunctuationInSpanish:
commonJapaneseSymbols
setCommonJapaneseSymbols:
strokeMaxPenalties
setStrokeMaxPenalties:
signatureUniChar
setSignatureUniChar:
_lowercaseCharSet
_uppercaseCharSet
_digitCharSet
_startPunctuationCharSet
_middlePunctuationCharSet
_endOfWordPunctuationCharSet
_endOfSentencePunctuationCharSet
_digitStartPunctuationCharSet
_digitEndPunctuationCharSet
_arithmeticOperatorCharSet
_dateTimeSeparatorCharSet
_dateTimeEndLetterCharSet
_numeralEndLetterCharSet
_lexiconSkipCharSet
_containsDotCharSet
_containsTwoDotsCharSet
_prefixCapitalizationExceptionCharSet
_selfLoopPunctuationCharSet
_emoticonTopCharSet
_emoticonMiddleCharSet
_emoticonBottomCharSet
_emailAtCharSet
_emailPunctuationCharSet
_urlPunctuationCharSet
_nonSpaceSeparatorCharSet
_punctuationThatNeedSpaceCleanup
_currencySymbols
_symbolsRequiringSpaceBeforeInFrench
_sentenceStartPunctuationInSpanish
_commonJapaneseSymbols
__charSetRulesQueue
_strokeMaxPenalties
_signatureUniChar
T@"NSCharacterSet",&,N,V_lowercaseCharSet
T@"NSCharacterSet",&,N,V_uppercaseCharSet
T@"NSCharacterSet",&,N,V_digitCharSet
T@"NSCharacterSet",&,N,V_startPunctuationCharSet
T@"NSCharacterSet",&,N,V_middlePunctuationCharSet
T@"NSCharacterSet",&,N,V_endOfWordPunctuationCharSet
T@"NSCharacterSet",&,N,V_endOfSentencePunctuationCharSet
T@"NSCharacterSet",&,N,V_digitStartPunctuationCharSet
T@"NSCharacterSet",&,N,V_digitEndPunctuationCharSet
T@"NSCharacterSet",&,N,V_arithmeticOperatorCharSet
T@"NSCharacterSet",&,N,V_dateTimeSeparatorCharSet
T@"NSCharacterSet",&,N,V_dateTimeEndLetterCharSet
T@"NSCharacterSet",&,N,V_numeralEndLetterCharSet
T@"NSCharacterSet",&,N,V_lexiconSkipCharSet
T@"NSCharacterSet",&,N,V_containsDotCharSet
T@"NSCharacterSet",&,N,V_containsTwoDotsCharSet
T@"NSCharacterSet",&,N,V_prefixCapitalizationExceptionCharSet
T@"NSCharacterSet",&,N,V_selfLoopPunctuationCharSet
T@"NSCharacterSet",&,N,V_emoticonTopCharSet
T@"NSCharacterSet",&,N,V_emoticonMiddleCharSet
T@"NSCharacterSet",&,N,V_emoticonBottomCharSet
T@"NSCharacterSet",&,N,V_emailAtCharSet
T@"NSCharacterSet",&,N,V_emailPunctuationCharSet
T@"NSCharacterSet",&,N,V_urlPunctuationCharSet
T@"NSCharacterSet",&,N,V_nonSpaceSeparatorCharSet
T@"NSCharacterSet",&,N,V_punctuationThatNeedSpaceCleanup
T@"NSCharacterSet",&,N,V_currencySymbols
T@"NSCharacterSet",&,N,V_symbolsRequiringSpaceBeforeInFrench
T@"NSCharacterSet",&,N,V_sentenceStartPunctuationInSpanish
T@"NSCharacterSet",&,N,V_commonJapaneseSymbols
T{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>={__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>=Q}}},N,V_strokeMaxPenalties
T{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>={__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>=Q}}},N,V_signatureUniChar
T@"NSObject<OS_dispatch_queue>",R,N,V__charSetRulesQueue
nodeIndexCount
nodeIndexAtPosition:
stateType
addNodeIndex:withStateType:
cursorByAddingNodeIndex:toCursor:
setStateType:
_nodeIndexes
_stateType
TQ,N,V_stateType
unsignedLongValue
newCursorByAdvancingCursor:withSymbol:
stateTypeForNodeIndex:
patternToSymbolMap
scannerWithString:
scanHexInt:
numberWithLong:
contentTypesToPatternsMapping
rootCursorForPatternType:inNetwork:forFirstSegmentGroup:
isString:fullPattern:inNetwork:
_network
_symbols
_startNodes
_startCursorForContentTypes
leftContext
setLeftContext:
setResult:
_leftContext
_result
T@"NSString",&,N,V_leftContext
T@"CHMutableTokenizedTextResult",&,N,V_result
initWithObjects:
sequence
setSequence:
_sequence
T@"NSArray",&,N,V_sequence
applyTransform:toAllTokens:
expandPathsWithCorrectedTokens:fromTokens:correctedTokenPath:originalTokenPath:
process:
defaultProcessor
process:withProcessor:options:
digitProcessor
phoneProcessor
usernameProcessor
emailProcessor
urlProcessor
asciiProcessor
equationProcessor
setDefaultProcessor:
setDigitProcessor:
setPhoneProcessor:
setUsernameProcessor:
setEmailProcessor:
setUrlProcessor:
setAsciiProcessor:
setEquationProcessor:
_defaultProcessor
_digitProcessor
_phoneProcessor
_usernameProcessor
_emailProcessor
_urlProcessor
_asciiProcessor
_equationProcessor
T@"CHPostProcessingManager",&,N,V_defaultProcessor
T@"CHPostProcessingManager",&,N,V_digitProcessor
T@"CHPostProcessingManager",&,N,V_phoneProcessor
T@"CHPostProcessingManager",&,N,V_usernameProcessor
T@"CHPostProcessingManager",&,N,V_emailProcessor
T@"CHPostProcessingManager",&,N,V_urlProcessor
T@"CHPostProcessingManager",&,N,V_asciiProcessor
T@"CHPostProcessingManager",&,N,V_equationProcessor
getSpellCorrectedToken:contextBeforeToken:
applyLexiconCorrections:shouldCapitalizeWord:shouldSkipEntryCorrection:outBestTokenIndex:bestLexiconTokenScore:textReplacements:contextBeforeToken:allowSpellChecker:
createPseudoTokensFromToken:
applyCorrectionsOnSingleToken:isFirstToken:contextBeforeToken:shouldCapitalizeGivenHistory:textReplacements:isSingleIsolatedCharacter:allowSpellChecker:
applyCorrectionsAcrossToken:isFirstToken:contextBeforeToken:shouldCapitalizeGivenHistory:textReplacements:isSingleIsolatedCharacter:allowSpellChecker:
setShouldAutoCapitalize:
setShouldAutoCorrect:
consumableStrokesCharSet
setConsumableStrokesCharSet:
fullWidthPunctuationThatExpectsUppercaseAfter
setFullWidthPunctuationThatExpectsUppercaseAfter:
punctuationThatExpectsUppercaseAfter
setPunctuationThatExpectsUppercaseAfter:
_shouldAutoCapitalize
_shouldAutoCorrect
_consumableStrokesCharSet
_fullWidthPunctuationThatExpectsUppercaseAfter
_punctuationThatExpectsUppercaseAfter
TB,N,V_shouldAutoCapitalize
T@"NSLocale",&,N,V_locale
Tr^{_LXLexicon=},N,V_staticLexicon
Tr^{_LXLexicon=},N,V_customLexicon
Tr^{_LXLexicon=},N,V_phraseLexicon
Tr^{_LXLexicon=},N,V_customPhraseLexicon
TB,N,V_shouldAutoCorrect
T@"NSCharacterSet",&,N,V_consumableStrokesCharSet
T@"NSCharacterSet",&,N,V_fullWidthPunctuationThatExpectsUppercaseAfter
T@"NSCharacterSet",&,N,V_punctuationThatExpectsUppercaseAfter
removeCharactersInString:
addCharactersInString:
shouldAddAlternatives
setShouldAddAlternatives:
contextInvariantCharacterSet
setContextInvariantCharacterSet:
forwardLookingCharacterSet
setForwardLookingCharacterSet:
backwardLookingCharacterSet
setBackwardLookingCharacterSet:
widthAlternativeCharacterSet
setWidthAlternativeCharacterSet:
_shouldAddAlternatives
_contextInvariantCharacterSet
_forwardLookingCharacterSet
_backwardLookingCharacterSet
_widthAlternativeCharacterSet
TB,N,V_shouldAddAlternatives
T@"NSCharacterSet",&,N,V_contextInvariantCharacterSet
T@"NSCharacterSet",&,N,V_forwardLookingCharacterSet
T@"NSCharacterSet",&,N,V_backwardLookingCharacterSet
T@"NSCharacterSet",&,N,V_widthAlternativeCharacterSet
openingBracketCharacters
setOpeningBracketCharacters:
closingBracketCharacters
setClosingBracketCharacters:
openingQuoteCharacters
setOpeningQuoteCharacters:
closingQuoteCharacters
setClosingQuoteCharacters:
symmetricQuoteCharacters
setSymmetricQuoteCharacters:
_openingBracketCharacters
_closingBracketCharacters
_openingQuoteCharacters
_closingQuoteCharacters
_symmetricQuoteCharacters
T@"NSCharacterSet",&,N,V_openingBracketCharacters
T@"NSCharacterSet",&,N,V_closingBracketCharacters
T@"NSCharacterSet",&,N,V_openingQuoteCharacters
T@"NSCharacterSet",&,N,V_closingQuoteCharacters
T@"NSCharacterSet",&,N,V_symmetricQuoteCharacters
dictionaryWithCapacity:
setValue:forKey:
_updateTokenInappropriateFlag:
cleanUpSpacesInToken:leftContext:
setShouldKeepOutOfPatternCandidates:
setShouldKeepDuplicateTokenIDs:
shouldKeepOutOfLexiconAlternatives
setShouldKeepOutOfLexiconAlternatives:
shouldKeepAlternativeLengths
setShouldKeepAlternativeLengths:
shouldKeepSubstrings
setShouldKeepSubstrings:
shouldKeepOriginalSpelling
setShouldKeepOriginalSpelling:
_shouldKeepOutOfPatternCandidates
_shouldKeepDuplicateTokenIDs
_shouldKeepOutOfLexiconAlternatives
_shouldKeepAlternativeLengths
_shouldKeepSubstrings
_shouldKeepOriginalSpelling
TB,N,V_shouldKeepOutOfPatternCandidates
TB,N,V_shouldKeepDuplicateTokenIDs
TB,N,V_shouldKeepOutOfLexiconAlternatives
TB,N,V_shouldKeepAlternativeLengths
TB,N,V_shouldKeepSubstrings
TB,N,V_shouldKeepOriginalSpelling
patternType
setPatternType:
capitalizationToSplit
setCapitalizationToSplit:
convertToLowercase
setConvertToLowercase:
_capitalizationToSplit
_convertToLowercase
_patternType
Tq,N,V_patternType
TB,N,V_capitalizationToSplit
TB,N,V_convertToLowercase
characterTransliterations
handleConfusableCharactersInToken:previousContext:
wordIDForCandidateString:
setCharacterTransliterations:
_characterTransliterations
T@"NSArray",N,V_characterTransliterations
handleConfusableIsolatedCharacterToken:
_transliterationMap
handleFrenchLigaturesInToken:
initWithCharacterLM:staticLexicon:
characterLM
setCharacterLM:
_characterLM
T@"CVNLPDecodingLanguageModel",&,N,V_characterLM
maxResultCount
setMaxResultCount:
_maxResultCount
Tq,N,V_maxResultCount
T@"CHStringOVSChecker",N,V_ovsStringChecker
countUnallowedCharactersInString:
tokenRowAsString:
compareStringForPhoneNumberCompatibility:with:
allowedCharacters
setAllowedCharacters:
characterReplacements
setCharacterReplacements:
_allowedCharacters
_characterReplacements
T@"NSCharacterSet",&,N,V_allowedCharacters
T@"NSDictionary",&,N,V_characterReplacements
indexPathByRemovingLastIndex
_extendedConversionCandidates:withPhraseCandidates:
_updatedTokenFromToken:withString:
promoteKanaConversion
mecabraContextRef
_promoteKanaConversion
_mecabraContextRef
T@"CHMecabraWrapper",R,N,V_mecabraWrapper
T^{__MecabraContext=},R,N,V_mecabraContextRef
T^v,R,N,V_languageModel
TB,R,N,V_promoteKanaConversion
_mecabra
T^{__Mecabra=},R,V_mecabra
hasSubstringInSet:
ch_mappedArrayWithBlock:
@24@0:8^{_NSZone=}16
@148@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80B96{_NSRange=QQ}100i116i120i124B128q132@140
@140@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80B96{_NSRange=QQ}100i116i120i124B128q132
@132@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80B96{_NSRange=QQ}100i116B120q124
@124@0:8@16q24@32{_NSRange=QQ}40^{CGRect={CGPoint=dd}{CGSize=dd}}56{_NSRange=QQ}64{_NSRange=QQ}80{_NSRange=QQ}96i112q116
v16@0:8
@16@0:8
q24@0:8q16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8q16
v40@0:8{_NSRange=QQ}16@?32
v44@0:8{_NSRange=QQ}16B32@?36
@32@0:8{_NSRange=QQ}16
{_NSRange=QQ}24@0:8q16
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
q16@0:8
{_NSRange=QQ}16@0:8
B16@0:8
i16@0:8
^{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@"CHTextInputTarget"
@"NSString"
{_NSRange="location"Q"length"Q}
^{CGRect={CGPoint=dd}{CGSize=dd}}
@"NSIndexSet"
v24@0:8@16
v24@0:8q16
v32@0:8{_NSRange=QQ}16
v20@0:8B16
v20@0:8i16
v48@0:8@16{_NSRange=QQ}24^{CGRect={CGPoint=dd}{CGSize=dd}}40
@76@0:8@16@24B32{CGRect={CGPoint=dd}{CGSize=dd}}36Q68
Q16@0:8
@"CHDrawing"
@"NSCharacterSet"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
I48@0:8@16I24B28^d32^v40
@40@0:8@16^@24^v32
@32@0:8@16q24
B40@0:8^{_LXLexicon=}16@24@32
@32@0:8@16^^v24
I32@0:8@16^{_LXLexicon=}24
d32@0:8@16@24
B24@0:8@16
@56@0:8@16^{__Mecabra=}24^{__MecabraContext=}32^v40q48
B36@0:8@16B24@28
d92@0:8@16@24@32B40B44B48@52@60^@68^@76^B84
@172@0:8@16@24^{_LXLexicon=}32^v40@48@56@64d72{_NSRange=QQ}80^d96B104B108B112q116d124q132^q140^B148^B156^B164
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"NSData"
@108@0:8@16@24I32d36d44d52Q60q68{CGRect={CGPoint=dd}{CGSize=dd}}76
I16@0:8
d16@0:8
v20@0:8I16
v24@0:8d16
v24@0:8Q16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
B28@0:8@16i24
@48@0:8@16@24^v32@40
v68@0:8@16@24@32@40^@48B56^B60
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@28@0:8i16@20
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
@28@0:8i16@"NSLocale"20
@"NSLocale"16@0:8
@"NSCharacterSet"16@0:8
v24@0:8@"NSCharacterSet"16
@40@0:8i16i20^{__CFLocale=}24@32
@36@0:8i16@20@28
@44@0:8i16@20@28@36
@32@0:8i16i20@24
@32@0:8^@16q24
@24@0:8Q16
v32@0:8@16@24
v32@0:8^{_LXLexicon=}16^v24
v24@0:8^{_LXLexicon=}16
v24@0:8^v16
{vector<const void *, std::allocator<const void *>>=^^v^^v{__compressed_pair<const void **, std::allocator<const void *>>=^^v}}40@0:8@16@24Q32
{vector<const void *, std::allocator<const void *>>=^^v^^v{__compressed_pair<const void **, std::allocator<const void *>>=^^v}}48@0:8@16@24@32Q40
@32@0:8@16@24
@24@0:8i16i20
@32@0:8i16i20^{__CFLocale=}24
@20@0:8i16
v40@0:8@16^{CGPoint=dd}24^{CGPoint=dd}32
@32@0:8@16^{CHCandidateResult=If}24
@40@0:8@16^{CHCandidateResult=If}24^@32
@48@0:8@16@24@32@40
d56@0:8@16@24^I32Q40^@48
d64@0:8@16@24@32@40^I48Q56
@48@0:8@16@24@32^@40
@124@0:8^v16Q24^{_LXCursor=}32^{_LXCursor=}40@48@56{_NSRange=QQ}64^v80@88q96i104q108q116
B72@0:8@16@24d32d40B48B52B56I60@64
@64@0:8r^v16@24{_NSRange=QQ}32q48@56
@72@0:8r^v16Q24^v32^v40q48q56@64
^I60@0:8@16q24B32^Q36^B44^{_NSRange=QQ}52
v40@0:8{_NSRange=QQ}16@32
{vector<long, std::allocator<long>>=^q^q{__compressed_pair<long *, std::allocator<long>>=^q}}32@0:8@16@24
@48@0:8@16@24@32@?40
@132@0:8^v16@24@32{_NSRange=QQ}40^{_LXCursor=}56^{_LXCursor=}64@72@80Q88q96B104q108q116@?124
@72@0:8^v16@24@32Q40@48q56q64
q76@0:8@16^v24^v32^v40^v48@56B64@?68
^v96@0:8^v16@24@32^v40{_NSRange=QQ}48{vector<long, std::allocator<long>>=^q^q{__compressed_pair<long *, std::allocator<long>>=^q}}64@?88
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{CGRect={CGPoint=dd}{CGSize=dd}}48
d20@0:8B16
v80@0:8{vector<CHCandidateResult, std::allocator<CHCandidateResult>>=^{CHCandidateResult}^{CHCandidateResult}{__compressed_pair<CHCandidateResult *, std::allocator<CHCandidateResult>>=^{CHCandidateResult}}}16^v40r^{NetworkEdge=QQQQddQQQ}48^v56q64q72
{basic_string<char, std::char_traits<char>, std::allocator<char>>={__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}20@0:8I16
@48@0:8@16Q24@32q40
d24@0:8@16
@40@0:8@16^@24@32
v60@0:8^@16^@24@32q40@48B56
@40@0:8@16Q24Q32
@48@0:8@16@24q32^q40
@52@0:8@16@24q32B40q44
@40@0:8@16@24@?32
v32@0:8^v16r^v24
v32@0:8^v16@24
v40@0:8^v16@24@32
v32@0:8^v16q24
@32@0:8^S16i24i28
I24@0:8@16
q24@0:8@16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
{CGPoint=dd}24@0:8@16
^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}}16@0:8
v24@0:8^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}}16
^v16@0:8
^{_LXLexicon=}16@0:8
{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>={__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>=Q}}}16@0:8
v40@0:8{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>={__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>=Q}}}16
{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>={__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>=Q}}}16@0:8
v40@0:8{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>={__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>=Q}}}16
^{VariantMap=^i^i^ii^iQ}16@0:8
v24@0:8^{VariantMap=^i^i^ii^iQ}16
^^v16@0:8
v24@0:8^^v16
@"CHRecognitionInsightRequest"
@"CHRecognitionInsight"
@"NSArray"
^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}}
@"CHCTCRecognitionModel"
@"CVNLPCTCTextDecoder"
@"NSObject<OS_dispatch_queue>"
@"CHPatternNetwork"
@"CHRecognizerConfiguration"
^{_LXLexicon=}
@"NSDictionary"
@"NSMutableDictionary"
@"CHSpellChecker"
@"CHMecabraWrapper"
@"CHStringOVSChecker"
@"NSURL"
^{VariantMap=^i^i^ii^iQ}
@"NSMutableIndexSet"
@"CHPostProcessingManager"
{CGSize="width"d"height"d}
{map<std::set<long>, std::vector<CHCandidateResult>, std::less<std::set<long>>, std::allocator<std::pair<const std::set<long>, std::vector<CHCandidateResult>>>>="__tree_"{__tree<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>, std::allocator<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::set<long>, std::__value_type<std::set<long>, std::vector<CHCandidateResult>>, std::less<std::set<long>>, true>>="__value_"Q}}}
{map<unsigned int, unsigned int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>="__tree_"{__tree<std::__value_type<unsigned int, unsigned int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned int>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned int>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned int>, std::less<unsigned int>, true>>="__value_"Q}}}
@72@0:8Q16q24q32@40{set<long, std::less<long>, std::allocator<long>>={__tree<long, std::less<long>, std::allocator<long>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::less<long>>=Q}}}48
{set<long, std::less<long>, std::allocator<long>>={__tree<long, std::less<long>, std::allocator<long>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::less<long>>=Q}}}16@0:8
@"CHClassifiableDrawing"
{set<long, std::less<long>, std::allocator<long>>="__tree_"{__tree<long, std::less<long>, std::allocator<long>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<long, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<long>>="__value_"Q}}}
@72@0:8@16{CGPoint=dd}24B40B44^v48^q56^q64
@72@0:8@16{CGSize=dd}24{CGPoint=dd}40@56^v64
@48@0:8@16@24d32^@40
@72@0:8@16@24d32{CGPoint=dd}40B56B60^@64
^{CHCodeMap=*Q^II}16@0:8
^{CHCodeMap=*Q^II}
@"NSOrderedSet"
v32@0:8@16@?24
v40@0:8@16@24@?32
v32@0:8@"CHRemoteRecognitionRequest"16@?<v@?@"CHTokenizedTextResult"@"NSError">24
v40@0:8@"CHTokenizedTextResult"16@"CHRemoteRecognitionRequest"24@?<v@?@"NSArray"@"NSArray"@"NSError">32
@40@0:8@16@24^@32
@48@0:8@16@24^@32^@40
@32@0:8@16^@24
@"NSXPCConnection"
v48@0:8^@16^@24@32@40
v48@0:8@16q24q32@?40
d32@0:8d16@24
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8r^v16{CGPoint=dd}24d40
{CGRect={CGPoint=dd}{CGSize=dd}}36@0:8r^v16q24B32
{CGRect={CGPoint=dd}{CGSize=dd}}40@0:8r^v16d24q32
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}24@0:8@16
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}32@0:8@16@24
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}24@0:8^v16
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}32@0:8r^v16d24
d40@0:8r^v16^{CGPoint=dd}24^d32
d24@0:8^v16
d32@0:8r^v16^d24
d64@0:8{CGPoint=dd}16{CGPoint=dd}32{CGPoint=dd}48
d64@0:8{CGPoint=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32
{vector<CGPoint, std::allocator<CGPoint>>=^{CGPoint}^{CGPoint}{__compressed_pair<CGPoint *, std::allocator<CGPoint>>=^{CGPoint}}}48@0:8r^v16d24d32^d40
@52@0:8@16i24@28@36q44
B20@0:8i16
i24@0:8@16
@"NSLocale"
@"CHTokenizedTextResult"
@"NSError"
v528@0:8{CHDrawingStrokes={vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}{vector<bool, std::allocator<bool>>=^QQ{__compressed_pair<unsigned long, std::allocator<unsigned long>>=Q}}{vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}qI{Matrix<double>=^^?^dII}d{vector<int, std::allocator<int>>=^i^i{__compressed_pair<int *, std::allocator<int>>=^i}}}16
Q24@0:8Q16
{CGPoint=dd}32@0:8Q16Q24
@32@0:8{CGSize=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8Q16
f16@0:8
v32@0:8{CGPoint=dd}16
{_NSRange=QQ}24@0:8@16
{Matrix<float>=^^?^fII}32@0:8{CGSize=dd}16
{Matrix<float>=^^?^fII}32@0:8Q16Q24
@24@0:8d16
@40@0:8{CGVector=dd}16d32
@32@0:8d16^v24
{vector<long, std::allocator<long>>=^q^q{__compressed_pair<long *, std::allocator<long>>=^q}}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8@16@24
d32@0:8d16d24
{CHDrawingStrokes={vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}{vector<bool, std::allocator<bool>>=^QQ{__compressed_pair<unsigned long, std::allocator<unsigned long>>=Q}}{vector<std::vector<double>, std::allocator<std::vector<double>>>=^v^v{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>=^v}}qI{Matrix<double>=^^?^dII}d{vector<int, std::allocator<int>>=^i^i{__compressed_pair<int *, std::allocator<int>>=^i}}}16@0:8
{CHDrawingStrokes="strokeBounds"{vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}}"strokeBoundsValidity"{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}"strokes"{vector<std::vector<double>, std::allocator<std::vector<double>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<double> *, std::allocator<std::vector<double>>>="__value_"^v}}"currentStrokeIndex"q"mSize"I"bitmap"{Matrix<double>="_vptr$Matrix"^^?"_data"^d"_w"I"_h"I}"lineHeight"d"sparseBitmap"{vector<int, std::allocator<int>>="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::allocator<int>>="__value_"^i}}}
@36@0:8q16q24B32
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8q16q24@32@40
q32@0:8@16@24
@"NSNumber"
@"CHCutPoint"
@32@0:8q16@24
@32@0:8@16^v24
d40@0:8@16q24q32
v40@0:8@16d24@32
v56@0:8@16d24d32d40@48
v40@0:8@16@24@32
@40@0:8@16@24@32
q40@0:8@16q24q32
B48@0:8@16d24q32q40
{vector<std::map<long, long>, std::allocator<std::map<long, long>>>=^v^v{__compressed_pair<std::map<long, long> *, std::allocator<std::map<long, long>>>=^v}}16@0:8
{vector<std::map<long, long>, std::allocator<std::map<long, long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::map<long, long> *, std::allocator<std::map<long, long>>>="__value_"^v}}
q40@0:8@16{_NSRange=QQ}24
v32@0:8@16q24
@60@0:8@16@24@32@40@48B56
B32@0:8@16@24
v32@0:816
@"CHPointFIFO"
@36@0:8@16Q24f32
@32@0:8@16Q24
v20@0:8f16
{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}}16@0:8
v40@0:8{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>=^}}16
{vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>>="__value_"^}}
68@0:8163248f64
v56@0:8{CGSize=dd}16{CGSize=dd}32d48
@?16@0:8
v24@0:8@?16
^{CGPath=}16@0:8
v24@0:8^{CGPath=}16
16@0:8
^{CGPath=}
@"<CHPointFIFODrawingTarget>"
@108@0:8@16d24@32@40@48@56@64@72@80@88@96B104
@40@0:8@16d24d32
@120@0:8@16d24d32{CGPoint=dd}40i56{CGPoint=dd}60i76{CGPoint=dd}80{CGPoint=dd}96@112
@112@0:8@16d24d32{CGPoint=dd}40i56{CGPoint=dd}60i76{CGPoint=dd}80{CGPoint=dd}96
{CGPoint=dd}16@0:8
{CGPoint="x"d"y"d}
@88@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56{CGPoint=dd}72
@120@0:8@16d24d32{CGPoint=dd}40{CGPoint=dd}56{CGPoint=dd}72{CGPoint=dd}88{CGSize=dd}104
@88@0:8@16d24d32{CGPoint=dd}40{CGPoint=dd}56{CGPoint=dd}72
@72@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56
@96@0:8@16d24d32{CGPoint=dd}40{CGSize=dd}56{CGPoint=dd}72d88
{pair<double, double>=dd}32@0:8@16@24
q40@0:8@16@24^q32
@80@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32@64q72
@72@0:8@16@24d32{CGRect={CGPoint=dd}{CGSize=dd}}40
@28@0:8@16B24
@64@0:8@16@24@32@40q48q56
@56@0:8@16@24@32@40q48
@48@0:8@16@24@32q40
@56@0:8@16@24@32q40q48
@24@0:8q16
@40@0:8{?=qqq}16
@44@0:8@16{_NSRange=QQ}24B40
@64@0:8@16{_NSRange=QQ}24B40B44^d48@?56
B32@0:8@16^B24
{?=dd}28@0:8@16i24
d36@0:8@16@24i32
d24@0:8d16
v48@0:8@16{_NSRange=QQ}24@?40
@40@0:8@16^{_LXLexicon=}24q32
@40@0:8@16@24^v32
v40@0:8B16B20B24B28B32B36
Q20@0:8S16
d24@0:8S16S20
B28@0:8@16B24
@52@0:8@16@24@32B40@44
@36@0:8@16B24@28
@"AppleSpell"
@"CHSpellCheckerErrorModel"
^{CGPoint=dd}64@0:8@16{CHLineSegment={CGPoint=dd}{CGPoint=dd}}24^q56
@32@0:8^{CGPoint=dd}16q24
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
q48@0:8{CHLineSegment={CGPoint=dd}{CGPoint=dd}}16
^{CGPoint=dd}16@0:8
^{CGPoint=dd}
@48@0:8@16d24d32^v40
@72@0:8@16d24{CGSize=dd}32d48^d56^v64
{vector<float, std::allocator<float>>=^f^f{__compressed_pair<float *, std::allocator<float>>=^f}}48@0:8@16@24d32^@40
B96@0:8@16^v24{_NSRange=QQ}32@48@56^v64@?72^@80@?88
^{MontrealNeuralNetwork=}16@0:8
^{MontrealNeuralNetwork=}
@"MLModel"
B40@0:8@16^v24@?32
@40@0:8{_NSRange=QQ}16^@32
@"NSSet"
@44@0:8^{_CFBurstTrie=}16^{_LXLexicon=}24^{_LXLexicon=}32I40
B24@0:8^{_LXEntry=}16
B32@0:8@16^{_LXLexicon=}24
B32@0:8@16^{_CFBurstTrie=}24
B20@0:8I16
B28@0:8I16^{_LXLexicon=}20
^{_CFBurstTrie=}
v40@0:8@16^Q24^Q32
Q24@0:8@16
B28@0:8Q16i24
^v32@0:8@16@24
B40@0:8@16@24@32
@44@0:8i16@20i28B32B36B40
@52@0:8i16@20i28i32i36B40B44B48
r^{_LXLexicon=}24@0:8^@16
^v36@0:8@16B24@28
^v28@0:8^v16B24
@32@0:8^{_LXLexicon=}16^{_LXLexicon=}24
@120@0:8^{_LXLexicon=}16^{_LXLexicon=}24^{_LXLexicon=}32^{_LXLexicon=}40@48@56@64^v72@80@88@96^v104q112
Q20@0:8I16
{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>={__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>=Q}}}16@0:8
v40@0:8{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>={__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>=Q}}}16
{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>={__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>=Q}}}16@0:8
v40@0:8{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>={__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>=Q}}}16
{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>="__tree_"{__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>="__value_"Q}}}
{map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>>="__tree_"{__tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>>="__value_"Q}}}
@32@0:8Q16@24
v32@0:8Q16Q24
{vector<unsigned long, std::allocator<unsigned long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::allocator<unsigned long>>="__value_"^Q}}
@32@0:8i16@20B28
@36@0:8q16@24B32
@40@0:8Q16@24@32
B40@0:8@16q24@32
@36@0:8@16@24i32
@"CHMutableTokenizedTextResult"
@32@0:8@?16@24
v48@0:8@16@24@32@40
@80@0:8@16@24@32@40@48@56@64@72
@100@0:8i16B20B24@28^{_LXLexicon=}36^{_LXLexicon=}44^{_LXLexicon=}52^{_LXLexicon=}60@68^v76@84@92
@68@0:8@16B24B28^q32^d40@48@56B64
@56@0:8@16B24@28B36@40B48B52
r^{_LXLexicon=}16@0:8
v24@0:8r^{_LXLexicon=}16
r^{_LXLexicon=}
@20@0:8B16
@32@0:8^v16@24
@40@0:8B16B20B24B28B32B36
@40@0:8@16q24B32B36
@40@0:8^{_LXLexicon=}16^{_LXLexicon=}24@32
{map<std::string, std::pair<std::string, double>, std::less<std::string>, std::allocator<std::pair<const std::string, std::pair<std::string, double>>>>="__tree_"{__tree<std::__value_type<std::string, std::pair<std::string, double>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::pair<std::string, double>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::pair<std::string, double>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::pair<std::string, double>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::pair<std::string, double>>, std::less<std::string>, true>>="__value_"Q}}}
@32@0:8@16^{_LXLexicon=}24
@"CVNLPDecodingLanguageModel"
@44@0:8@16^v24@32B40
^{__MecabraContext=}16@0:8
^{__MecabraContext=}
v28@0:8i16@20
^{__Mecabra=}16@0:8
^{__Mecabra=}
q32@0:8@16q24
@24@0:8@?16
@32@0:8@16@?24
