<%@: %p; hour: %lu; minute: %lu>
hour
minute
supportsSecureCoding
TB,R
TQ,R,N,V_hour
TQ,R,N,V_minute
TQ,D,N
match schedule
schedule end
<invalid>
iPhone
iPod
iPad
Apple TV
Apple Watch
<unknown>
Lifetime expired
User changed state
Override ended by client
Override replaced by client
Server unresponsive
Client unresponsive
<%@: %p; UUID: %@; startDate: %@; details: %@; source: %@>
UUID
startDate
details
source
T@"NSUUID",R,C,N,V_UUID
T@"NSDate",R,C,N,V_startDate
T@"DNDModeAssertionDetails",R,C,N,V_details
T@"DNDModeAssertionSource",R,C,N,V_source
<%@: %p; interruptionBehaviorSetting: %@>
interruptionBehaviorSetting
TQ,R,N,V_interruptionBehaviorSetting
interruptionBehavior
TQ,R,D,N
v8@?0
com.apple.donotdisturb
BehaviorResolution
ModeAssertion
RemoteConnection
Settings
State
default
disabled
enabled
none
silence
delay delivery
None
<%@: %p; dateInterval: %@>
dateInterval
T@"NSDateInterval",R,C,N,V_dateInterval
telephony
<none>
<%@: %p; startTime: %@; endTime: %@>
startTime
endTime
T@"DNDScheduleTime",R,C,N,V_startTime
T@"DNDScheduleTime",R,C,N,V_endTime
T@"DNDScheduleTime",C,D,N
<%@: %p; assertion: %@; invalidationDate: %@; details: %@; source: %@; reason: %@; reasonOverride: %@>
assertion
invalidationDate
reason
reasonOverride
T@"DNDModeAssertionInvalidationDetails",R,C,N,V_details
TQ,R,N,V_reasonOverride
T@"DNDModeAssertion",R,C,N,V_assertion
T@"NSDate",R,C,N,V_invalidationDate
TQ,R,N,V_reason
<%@: %p; previousState: %@; state: %@; reason: %@>
previousState
state
T@"DNDState",R,C,N,V_previousState
T@"DNDState",R,C,N,V_state
DeviceClassNumber
<%@: %p; deviceClass: %@; deviceCapabilities: %@>
deviceClass
TQ,R,N,V_deviceClass
deviceCapabilities
TQ,R,N,V_deviceCapabilities
lifetimeType
favorite
contact
contact from group
%@:%@
<%@: %p; clientIdentifier: '%@'; auditUUID: %@; timestamp: %llu>
clientIdentifier
auditUUID
timestamp
T@"NSString",R,C,N,V_clientIdentifier
T@"NSUUID",R,C,N,V_auditUUID
TQ,R,N,V_timestamp
<%@: %p; eventUniqueID: '%@'; occurrenceDate: %@; onlyDuringEvent: %@>
eventUniqueID
occurrenceDate
onlyDuringEvent
T@"NSString",R,C,N,V_eventUniqueID
T@"NSDate",R,C,N,V_occurrenceDate
TB,R,N,GisOnlyDuringEvent,V_onlyDuringEvent
calendar event
date interval
location
schedule
never interrupt
interrupt when unlocked
com.apple.donotdisturb.DNDEventBehaviorResolutionService.service.lock
v24@?0@"DNDClientEventBehavior"8@"NSError"16
user action
client action
lifetime
system state
<%@: %p; eventDetails: %@; interruptionSuppression: %@>
eventDetails
interruptionSuppression
T@"DNDClientEventDetails",R,C,N,V_eventDetails
TQ,R,N,V_interruptionSuppression
<%@: %p; suppressionState: %@; activeModeAssertionMetadata: %@>
suppressionState
activeModeAssertionMetadata
TQ,R,N,V_suppressionState
T@"NSArray",R,C,N,V_activeModeAssertionMetadata
active
TB,R,D,N,GisActive
willSuppressInterruptions
TB,R,D,N
activeModeIdentifiers
T@"NSArray",R,C,D,N
<%@: %p; immediateBypassEventSourceType: %@; immediateBypassCNGroupIdentifier: '%@'; repeatEventSourceBehaviorEnabledSetting: %@>
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
repeatEventSourceBehaviorEnabledSetting
TQ,R,N,V_immediateBypassEventSourceType
T@"NSString",R,C,N,V_immediateBypassCNGroupIdentifier
TQ,R,N,V_repeatEventSourceBehaviorEnabledSetting
T@"NSString",C,D,N
<%@: %p; identifier: '%@'>
identifier
T@"NSString",R,C,N,V_identifier
inactive
always
while UI locked
com.apple.donotdisturb.mode.default
com.apple.donotdisturb.DNDStateService.service.lock
com.apple.donotdisturb.StateService
com.apple.donotdisturb.StateService.call-out
v24@?0@"DNDState"8@"NSError"16
v20@?0B8@"NSError"12
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
T@"NSString",R,C,N
<%@: %p; identifier: '%@'; source: %@; shouldAlwaysInterrupt: %@>
shouldAlwaysInterrupt
T@"DNDClientEventSource",R,C,N,V_source
TB,R,N,V_shouldAlwaysInterrupt
T@"DNDClientEventSource",C,D,N
TB,D,N
<%@: %p>
/System/Library/LocationBundles/DoNotDisturb.bundle
com.apple.donotdisturb.system
<%@: %p; clientIdentifier: '%@'; deviceIdentifier: '%@'>
deviceIdentifier
T@"NSString",R,C,N,V_deviceIdentifier
<%@: %p; scheduleEnabledSetting: %@; timePeriod: %@; bedtimeBehaviorEnabledSetting: %@>
scheduleEnabledSetting
timePeriod
bedtimeBehaviorEnabledSetting
TQ,R,N,V_scheduleEnabledSetting
T@"DNDScheduleTimePeriod",R,C,N,V_timePeriod
TQ,R,N,V_bedtimeBehaviorEnabledSetting
T@"DNDScheduleTimePeriod",C,D,N
<%@: %p; identifier: '%@'; modeIdentifier: '%@'; lifetime: %@; userVisibleEndDate: %@>
modeIdentifier
userVisibleEndDate
T@"NSDate",R,C,N,V_userVisibleEndDate
T@"NSString",R,C,N,V_modeIdentifier
T@"DNDModeAssertionLifetime",R,C,N,V_lifetime
T@"NSDate",C,D,N
T@"DNDModeAssertionLifetime",C,D,N
userRequested
TB,R,D,N,GisUserRequested
<%@: %p; scheduleIdentifier: '%@'; behavior: %@>
scheduleIdentifier
behavior
T@"NSString",R,C,N,V_scheduleIdentifier
TQ,R,N,V_behavior
<%@: %p; value: '%@'; type: %@>
value
type
TQ,R,N,V_type
T@"NSString",R,C,N,V_value
CNContact Identifier
Destination Identifier
com.apple.donotdisturb.ModeAssertionService.call-out
v24@?0@"DNDModeAssertion"8@"NSError"16
v24@?0@"DNDModeAssertionInvalidation"8@"NSError"16
com.apple.donotdisturb.schedule.default
<%@: %p; clientIdentifier: '%@'; modeIdentifier: '%@'; lifetimeType: %@; activeDateInterval: %@; userVisibleEndDate: %@>
activeDateInterval
TQ,R,N,V_lifetimeType
T@"NSDateInterval",R,C,N,V_activeDateInterval
v16@?0@"NSError"8
v24@?0@"DNDBehaviorSettings"8@"NSError"16
v24@?0@"DNDBypassSettings"8@"NSError"16
v24@?0@"DNDScheduleSettings"8@"NSError"16
com.apple.donotdisturb.service
com.apple.donotdisturb.SettingsService
com.apple.donotdisturb.SettingsService.call-out
@(#)PROGRAM:DoNotDisturb  PROJECT:DoNotDisturb-1
com.apple.donotdisturb.DNDEventBehaviorResolutionService.resolveEvent
[%{public}@] Resolving behavior for event, details=%{public}@
[%{public}@] Error when resolving behavior, error='%{public}@'
[%{public}@] Resolved event, details=%{public}@ behavior=%{public}@
com.apple.donotdisturb.DNDStateService.queryCurrentState
[%{public}@] Processing state request
[%{public}@] Error when getting state, error='%{public}@'
[%{public}@] Got current state, state=%{public}@
com.apple.donotdisturb.DNDStateService.addStateUpdateListener
Adding state update listener: listener=%{public}@
Registered for state updates: listener=%{public}@
Did not register for state updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDStateService.removeStateUpdateListener
Removing state update listener: listener=%{public}@
Remote service interrupted: service=%{public}@
Remote service invalidated: service=%{public}@
com.apple.donotdisturb.DNDStateService.registerForStateUpdates
[%{public}@] Registering state update listener
[%{public}@] Error when registering state update listener, error='%{public}@'
SERIOUS ERROR: We lost our XPC connection to DND server and could not reconnect
com.apple.donotdisturb.DNDModeAssertionService.takeModeAssertion
[%{public}@] Taking mode assertion; details=%{public}@
[%{public}@] Error when taking mode assertion, error='%{public}@'
[%{public}@] Took mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateActiveModeAssertion
[%{public}@] Invalidating active mode assertion
[%{public}@] Error when invalidating mode assertion, error='%{public}@'
[%{public}@] Invalidated mode assertion, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.activeModeAssertion
[%{public}@] Getting active mode assertion
[%{public}@] Error when requesting active mode assertion, error='%{public}@'
[%{public}@] Got mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.latestModeAssertionInvalidation
[%{public}@] Getting latest mode assertion invalidation
[%{public}@] Error when requesting latest mode assertion invalidation, error='%{public}@'
[%{public}@] Got invalidation, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateAllActiveModeAssertions
[%{public}@] Invalidating all active mode assertions
[%{public}@] Error when invalidating all active mode assertions, error='%{public}@'
[%{public}@] Invalidated all active mode assertions, success=%{BOOL}u
com.apple.donotdisturb.DNDModeAssertionService.addAssertionUpdateListener
[%{public}@] Adding assertion update listener: listener=%{public}@
[%{public}@] Registered for assertion updates: listener=%{public}@
[%{public}@] Did not register for assertion updates, will remove listener: listener=%{public}@, error=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.removeAssertionUpdateListener
[%{public}@] Removing assertion update listener: listener=%{public}@
[%{public}@] Remote service interrupted: service=%{public}@
[%{public}@] Remote service invalidated: service=%{public}@
[%{public}@] Remote service got assertion change: service=%{public}@, assertion=%{public}@, invalidation=%{public}@
[%{public}@] Will deliver assertion invalidation to listener: invalidation=%{public}@, listener=%{public}@
[%{public}@] Will deliver assertion change to listener: assertion=%{public}@, listener=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.registerForAssertionUpdates
[%{public}@] Registering assertion update listener
[%{public}@] SERIOUS ERROR: We lost our XPC connection to DND server and could not reconnect; error=%{public}@
Remote service connection got assertion update: assertion=%{public}@, invalidation=%{public}@, clientIdentifiers=%{public}@
XPC connection was interrupted: connection=%p
XPC connection was invalidated, cannot recover: connection=%p
com.apple.donotdisturb.DNDSettingsService.behaviorSettings
[%{public}@] Error when getting behavior settings, error='%{public}@'
[%{public}@] Got behavior settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setBehaviorSettings
[%{public}@] Set behavior settings, settings=%{public}@
[%{public}@] Error setting behavior settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.bypassSettings
[%{public}@] Error when getting bypass settings, error='%{public}@'
[%{public}@] Got bypass settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setBypassSettings
[%{public}@] Set bypass settings, settings=%{public}@
[%{public}@] Error setting bypass settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.scheduleSettings
[%{public}@] Error when getting schedule settings, error='%{public}@'
[%{public}@] Got schedule settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setScheduleSettings
[%{public}@] Set schedule settings, settings=%{public}@
[%{public}@] Error setting schedule settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.addSettingsUpdateListener
Adding settings update listener: listener=%{public}@
Registered for settings updates: listener=%{public}@
Did not register for settings updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.removeSettingsUpdateListener
Removing settings update listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.registerForSettingsUpdates
[%{public}@] Registering settings update listener
[%{public}@] Error when registering settings update listener, error='%{public}@'
zPLR
zPLR
zPLR
zPLR
zPLR
DNDScheduleTime
NSCopying
NSMutableCopying
NSSecureCoding
NSCoding
DNDMutableScheduleTime
DNDModeAssertion
DNDBehaviorSettings
DNDMutableBehaviorSettings
Deprecated
DNDModeAssertionDateIntervalLifetime
DNDScheduleTimePeriod
DNDMutableScheduleTimePeriod
DNDModeAssertionInvalidation
DNDStateUpdate
DNDDevice
DNDModeAssertionLifetime
DNDRequestDetails
DNDModeAssertionCalendarEventLifetime
DateComponents
DNDEventBehaviorResolutionService
DNDClientEventBehavior
DNDState
DNDBypassSettings
DNDMutableBypassSettings
DNDModeAssertionInvalidationDetails
DNDMutableModeAssertionInvalidationDetails
DNDStateService
DNDRemoteServiceConnectionEventListener
NSObject
DeprecatedUpdateListener
DNDClientEventDetails
DNDMutableClientEventDetails
DoNotDisturb
DNDModeAssertionLocationLifetime
DNDModeAssertionSource
DNDModeAssertionUserRequestedLifetime
DNDScheduleSettings
DNDMutableScheduleSettings
DNDModeAssertionDetails
DNDMutableModeAssertionDetails
DNDModeAssertionScheduleLifetime
DNDClientEventSource
DNDModeAssertionService
DNDStateModeAssertionMetadata
DNDRemoteServiceConnection
DNDRemoteServiceClientProtocol
DNDRemoteServiceClientModeAssertionProtocol
DNDRemoteServiceClientStateProtocol
DNDRemoteServiceClientSettingsProtocol
DNDRemoteServiceServerProtocol
DNDRemoteServiceServerBehaviorResolutionProtocol
DNDRemoteServiceServerModeAssertionProtocol
DNDRemoteServiceServerStateProtocol
DNDRemoteServiceServerSettingsProtocol
DNDSettingsService
alloc
_initWithHour:minute:
_initWithTime:
hour
minute
init
stringWithFormat:
decodeIntegerForKey:
encodeInteger:forKey:
defaultStartTime
defaultEndTime
supportsSecureCoding
copyWithZone:
mutableCopyWithZone:
encodeWithCoder:
initWithCoder:
hash
isEqual:
description
_hour
_minute
setHour:
setMinute:
copy
UUID
startDate
details
source
decodeObjectOfClass:forKey:
initWithUUID:startDate:details:source:
encodeObject:forKey:
.cxx_destruct
_UUID
_startDate
_details
_source
_initWithSettings:
interruptionBehaviorSetting
_initWithInterruptionBehaviorSetting:
_interruptionBehaviorSetting
setInterruptionBehaviorSetting:
interruptionBehavior
setInterruptionBehavior:
_init
containsDate:
endDate
compare:
dateInterval
initWithDateInterval:
isActiveForDate:
lifetimeType
_dateInterval
array
addObject:
count
componentsJoinedByString:
_initWithPeriod:
startTime
endTime
_initWithStartTime:endTime:
_startTime
_endTime
setStartTime:
setEndTime:
assertion
invalidationDate
reason
reasonOverride
initWithAssertion:invalidationDate:details:source:reason:reasonOverride:
_assertion
_invalidationDate
_reason
_reasonOverride
previousState
state
initWithPreviousState:state:reason:
_previousState
_state
deviceWithClass:deviceCapabilities:
_initWithClass:deviceCapabilities:
deviceClass
deviceCapabilities
currentDevice
_deviceClass
_deviceCapabilities
date
initWithStartDate:duration:
lifetimeWithDateInterval:
sharedInstance
initWithEventUniqueID:occurrenceDate:onlyDuringEvent:
initWithScheduleIdentifier:behavior:
doesNotRecognizeSelector:
setWithObjects:
lifetimeWithDuration:
lifetimeWithCurrentLocation
lifetimeUntilEndOfCalendarEventWithUniqueID:occurrenceDate:
lifetimeWithCalendarEventUniqueID:occurrenceDate:
lifetimeMatchingScheduleWithIdentifier:
lifetimeUntilEndOfScheduleWithIdentifier:
lifetimeForUserRequest
_secureCodingLifetimeClasses
initWithClientIdentifier:auditUUID:timestamp:
timestamp
clientIdentifier
auditUUID
decodeInt64ForKey:
encodeInt64:forKey:
detailsRepresentingNowWithClientIdentifier:
debugDescription
_clientIdentifier
_auditUUID
_timestamp
eventUniqueID
occurrenceDate
isOnlyDuringEvent
decodeBoolForKey:
encodeBool:forKey:
_onlyDuringEvent
_eventUniqueID
_occurrenceDate
setSecond:
dateComponents
mapTableWithKeyOptions:valueOptions:
objectForKey:
_initWithClientIdentifier:
setObject:forKey:
resolveBehaviorForEventDetails:requestDetails:completionHandler:
initialize
serviceForClientIdentifier:
resolveBehaviorForEventDetails:error:
eventDetails
interruptionSuppression
initWithEventDetails:interruptionSuppression:
_eventDetails
_interruptionSuppression
suppressionState
activeModeAssertionMetadata
decodeObjectOfClasses:forKey:
initWithSuppressionState:activeModeAssertionMetadata:
isActive
_suppressionState
_activeModeAssertionMetadata
countByEnumeratingWithState:objects:count:
modeIdentifier
allObjects
willSuppressInterruptions
activeModeIdentifiers
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
repeatEventSourceBehaviorEnabledSetting
_initWithImmediateBypassEventSourceType:immediateBypassCNGroupIdentifier:repeatEventSourceBehaviorEnabledSetting:
_immediateBypassEventSourceType
_immediateBypassCNGroupIdentifier
_repeatEventSourceBehaviorEnabledSetting
setImmediateBypassEventSourceType:
setImmediateBypassCNGroupIdentifier:
setRepeatEventSourceBehaviorEnabledSetting:
_initWithDetails:
identifier
_initWithIdentifier:
_identifier
setIdentifier:
hashTableWithOptions:
addEventListener:
queryStateWithRequestDetails:completionHandler:
_queue_registerForStateUpdatesIfRequired
removeObject:
_handleLostXPCConnection
stateService:didReceiveDoNotDisturbStateUpdate:
registerForStateUpdatesWithRequestDetails:completionHandler:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
didReceiveConnectionInterruptedEventForRemoteService:
didReceiveConnectionInvalidatedEventForRemoteService:
remoteService:didReceiveDoNotDisturbStateUpdate:
remoteService:didChangeActiveModeAssertion:invalidation:
remoteService:didReceiveUpdatedBehaviorSettings:
remoteService:didReceiveUpdatedPhoneCallBypassSettings:
remoteService:didReceiveUpdatedScheduleSettings:
queryCurrentStateWithError:
addStateUpdateListener:withCompletionHandler:
removeStateUpdateListener:
_queue
_calloutQueue
_stateUpdateListeners
_registeredForUpdates
addStateUpdateListener:error:
removeStateUpdateListener:error:
shouldAlwaysInterrupt
_initWithIdentifier:source:shouldAlwaysInterrupt:
UUIDString
_shouldAlwaysInterrupt
setSource:
setShouldAlwaysInterrupt:
dnds_privacyObfuscatedString
awakeAfterUsingCoder:
bundleWithPath:
dnd_locationBundle
deviceIdentifier
initWithClientIdentifier:deviceIdentifier:
_deviceIdentifier
scheduleEnabledSetting
timePeriod
bedtimeBehaviorEnabledSetting
initWithScheduleEnabledSetting:timePeriod:bedtimeBehaviorEnabledSetting:
_scheduleEnabledSetting
_timePeriod
_bedtimeBehaviorEnabledSetting
setScheduleEnabledSetting:
setTimePeriod:
setBedtimeBehaviorEnabledSetting:
_initWithIdentifier:modeIdentifier:lifetime:userVisibleEndDate:
lifetime
userVisibleEndDate
detailsWithIdentifier:modeIdentifier:lifetime:
_modeIdentifier
_lifetime
_userVisibleEndDate
setModeIdentifier:
setLifetime:
setUserVisibleEndDate:
isUserRequested
userRequestedAssertionDetailsWithIdentifier:modeIdentifier:lifetime:
scheduleIdentifier
behavior
_scheduleIdentifier
_behavior
_initWithValue:type:
sourceWithDestinationIdentifier:
value
type
sourceWithCNContactIdentifier:
sourceWithPhoneNumber:
_value
_type
takeModeAssertionWithDetails:requestDetails:completionHandler:
invalidateActiveModeAssertionWithInvalidationDetails:reasonOverride:error:
invalidateActiveModeAssertionWithDetails:reasonOverride:requestDetails:completionHandler:
getActiveModeAssertionWithRequestDetails:completionHandler:
getLatestModeAssertionInvalidationWithRequestDetails:completionHandler:
invalidateAllActiveModeAssertionsWithRequestDetails:completionHandler:
_registerForAssertionUpdatesIfRequiredWithCompletionHandler:
_handleXPCInterruption
_handleChangeActiveModeAssertion:invalidation:
modeAssertionService:didReceiveModeAssertionInvalidation:
modeAssertionService:didUpdateActiveModeAssertion:
activeModeAssertionWithError:
registerForAssertionUpdatesWithRequestDetails:completionHandler:
takeModeAssertionWithDetails:error:
invalidateActiveModeAssertionWithError:
latestModeAssertionInvalidationWithError:
invalidateAllActiveModeAssertionsWithError:
addAssertionUpdateListener:withCompletionHandler:
removeAssertionUpdateListener:
_assertionUpdateListeners
_activeAssertion
_activeAssertionLock
addAssertionUpdateListener:error:
removeAssertionUpdateListener:error:
activeDateInterval
initWithClientIdentifier:modeIdentifier:lifetimeType:activeDateInterval:userVisibleEndDate:
_lifetimeType
_activeDateInterval
initWithMachServiceName:options:
setExportedInterface:
setExportedObject:
setRemoteObjectInterface:
_handleRemoteConnectionInterrupted
setInterruptionHandler:
_handleRemoteConnectionInvalidated
setInvalidationHandler:
resume
synchronousRemoteObjectProxyWithErrorHandler:
remoteObjectProxyWithErrorHandler:
containsObject:
getBehaviorSettingsWithRequestDetails:completionHandler:
setBehaviorSettings:withRequestDetails:completionHandler:
getPhoneCallBypassSettingsWithRequestDetails:completionHandler:
setPhoneCallBypassSettings:withRequestDetails:completionHandler:
getScheduleSettingsWithRequestDetails:completionHandler:
setScheduleSettings:withRequestDetails:completionHandler:
registerForSettingsUpdatesWithRequestDetails:completionHandler:
deliverActiveModeAssertionUpdate:invalidation:clientIdentifiers:
deliverStateUpdate:
deliverUpdatedBehaviorSettings:
deliverUpdatedPhoneCallBypassSettings:
deliverUpdatedScheduleSettings:
removeEventListener:
_connection
_eventListeners
interfaceWithProtocol:
_queue_registerForSettingsUpdatesIfRequired
_handleLostXPCConnectionWithRetry:
settingsService:didReceiveUpdatedBehaviorSettings:
settingsService:didReceiveUpdatedPhoneCallBypassSettings:
settingsService:didReceiveUpdatedScheduleSettings:
behaviorSettingsReturningError:
setBehaviorSettings:error:
phoneCallBypassSettingsReturningError:
setPhoneCallBypassSettings:error:
scheduleSettingsReturningError:
setScheduleSettings:error:
addSettingsUpdateListener:withCompletionHandler:
removeSettingsUpdateListener:
_settingsUpdateListeners
setBehaviorSettings:returningError:
setPhoneCallBypassSettings:returningError:
setScheduleSettings:returningError:
addSettingsUpdateListener:error:
removeSettingsUpdateListener:error:
@16@0:8
B16@0:8
@24@0:8^{_NSZone=}16
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@32@0:8Q16Q24
Q16@0:8
B24@0:8@16
v24@0:8Q16
@48@0:8@16@24@32@40
v16@0:8
@"NSUUID"
@"NSDate"
@"DNDModeAssertionDetails"
@"DNDModeAssertionSource"
@24@0:8Q16
@"NSDateInterval"
@32@0:8@16@24
@"DNDScheduleTime"
@64@0:8@16@24@32@40Q48Q56
@"DNDModeAssertion"
@"DNDModeAssertionInvalidationDetails"
@40@0:8@16@24Q32
@"DNDState"
@24@0:8d16
@"NSString"
@36@0:8@16@24B32
@32@0:8@16^@24
@32@0:8@16Q24
@"DNDClientEventDetails"
@32@0:8Q16@24
@"NSArray"
@40@0:8Q16@24Q32
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v40@0:8@16@24@32
v24@0:8@"DNDRemoteServiceConnection"16
v32@0:8@"DNDRemoteServiceConnection"16@"DNDStateUpdate"24
v40@0:8@"DNDRemoteServiceConnection"16@"DNDModeAssertion"24@"DNDModeAssertionInvalidation"32
v32@0:8@"DNDRemoteServiceConnection"16@"DNDBehaviorSettings"24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDBypassSettings"24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDScheduleSettings"24
@24@0:8^@16
v32@0:8@16@?24
@"NSObject<OS_dispatch_queue>"
@"NSHashTable"
B32@0:8@16^@24
@"DNDClientEventSource"
v20@0:8B16
@"DNDScheduleTimePeriod"
@40@0:8@16@24@32
@"DNDModeAssertionLifetime"
@40@0:8@16Q24^@32
B24@0:8^@16
v24@0:8@?16
{atomic_flag="_Value"AB}
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@56@0:8@16@24Q32@40@48
v40@0:8@"DNDModeAssertion"16@"DNDModeAssertionInvalidation"24@"NSArray"32
v24@0:8@"DNDStateUpdate"16
v24@0:8@"DNDBehaviorSettings"16
v24@0:8@"DNDBypassSettings"16
v24@0:8@"DNDScheduleSettings"16
v40@0:8@16@24@?32
v40@0:8@"DNDClientEventDetails"16@"DNDRequestDetails"24@?<v@?@"DNDClientEventBehavior"@"NSError">32
v48@0:8@16Q24@32@?40
v40@0:8@"DNDModeAssertionDetails"16@"DNDRequestDetails"24@?<v@?@"DNDModeAssertion"@"NSError">32
v48@0:8@"DNDModeAssertionInvalidationDetails"16Q24@"DNDRequestDetails"32@?<v@?@"DNDModeAssertionInvalidation"@"NSError">40
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDModeAssertion"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDModeAssertionInvalidation"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?B@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDState"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDBehaviorSettings"@"NSError">24
v40@0:8@"DNDBehaviorSettings"16@"DNDRequestDetails"24@?<v@?B@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDBypassSettings"@"NSError">24
v40@0:8@"DNDBypassSettings"16@"DNDRequestDetails"24@?<v@?B@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDScheduleSettings"@"NSError">24
v40@0:8@"DNDScheduleSettings"16@"DNDRequestDetails"24@?<v@?B@"NSError">32
@"NSXPCConnection"
