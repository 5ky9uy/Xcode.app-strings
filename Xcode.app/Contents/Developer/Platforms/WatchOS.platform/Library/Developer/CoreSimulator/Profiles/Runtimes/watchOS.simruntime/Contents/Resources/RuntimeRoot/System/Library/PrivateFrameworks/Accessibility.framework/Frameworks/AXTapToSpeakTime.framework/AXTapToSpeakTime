v8@?0
domainAccessor
T@"NPSDomainAccessor",R,N,V_domainAccessor
com.apple.accessibility.AXTapticChimesScheduler.ChimeFire
com.apple.accessibility.AXTapticChimesScheduler
com.apple.accessibility.AXTapticChimesScheduler.Event.ChimeFired
com.apple.accessibility.TapticChimesScheduler
AssertType
PreventUserIdleSystemSleep
AssertName
taptic-chimes-setup-and-fire
FrameworkBundleID
com.apple.AXTapToSpeakTime
TimeoutAction
TimeoutActionRelease
TimeoutSeconds
expected_chime_to_actual_chime_start_time
wake_vs_expected_wake_time
wake_to_chime_start_time
chime_start_to_end_time
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
NTKTimeOffsetChangedNotification
/System/Library/PrivateFrameworks/NanoTimeKit.framework/NanoTimeKit
NTKTimeOffsetManager
com.apple.accessibility.AXTapToSpeakTimeManager
jjmm
v12@?0i8
PTQ+ABwag03BwO/CKvIK/A
Audio/Video
vsSpeechSynthesizer
T@"VSSpeechSynthesizer",R,N,V_vsSpeechSynthesizer
dateFormatter
T@"NSDateFormatter",R,N,V_dateFormatter
tapticTimeManager
T@"AXTapticTimeManager",R,N,V_tapticTimeManager
nowPlayingController
T@"NMRNowPlayingController",R,N,V_nowPlayingController
Default
Compact
Premium
Mickey
Minnie
com.apple.springboard.ringerstate
@ffffff
?333333
?333?
@(#)PROGRAM:AXTapToSpeakTime  PROJECT:Accessibility-1
Taptic Chimes enabled, will begin scheduling chimes
Taptic Chimes disabled, will stop scheduling chimes
Taptic Chimes frequency changed, will re-schedule chimes
Previewing chimes
Scheduling chime timer
Using face display time for start time: %@
Scheduling wake!! Wake time: %@ (%f seconds), Chime time: %@ (%f seconds)
chime wake timer fired: %@
checking DND state...
current DND state: %@
suppressing this chime - attempting to reschedule
failed to get current DND behavior due to %@. proceeding with chime
expected chime time: %@ (%f seconds away)
TapticChime-Complete
finished waiting. starting chime output now
chime starting
TapticChime-Output
chime did start
chime event: %@
wake to chime start took over %f seconds! actual time: %f seconds. wake delta: %f seconds
chime did complete
new wrist state: %@
Checking if can start time output for voice: %@
tap to speak time is enabled
availability = always
availability = respect mute, ringerIsMuted = %@
will start time output for voice: %@
tap to speak time is disabled
will NOT start time output for voice: %@
tapticTimeEnabled = %@
Attempting to start time output: %@, for preferredVoice: %@
Stopping (any) existing output
failed to speak time due to %@
canOutputPremiumVoice: %@
Normalizing audio from %f -> %f
Denormalizing audio to %f
Setting up audio session for %@
Speech output did complete
did start VSSpeechRequest: %@
did finish VSSpeechRequest: %@, successfully: %@, phonemesSpoken: %@, error: %@
did pause VSSpeechRequest: %@
did continue VSSpeechRequest: %@
will speak range: %@ for request %@
zPLR
zPLR
AXTimeOutputPreferences
AXTapticChimesScheduler
AXTapticTimeObserver
NSObject
CSLSOnWristMonitorDelegate
AXTapToSpeakTimeManager
VSSpeechSynthesizerDelegate
CSLSBacklightObserver
init
initialize
initWithDomain:
domainAccessor
synchronize
objectForKey:
setObject:forKey:
domain
arrayWithObjects:count:
setWithArray:
synchronizeNanoDomain:keys:
_npsValueForPreferenceKey:
boolValue
integerValue
voiceOverEnabled
tapToSpeakTimeEnabled
setTapToSpeakTimeEnabled:
numberWithBool:
_preferenceKeyForSelector:
_setNPSValue:preferenceKey:
tapToSpeakTimeAvailability
setTapToSpeakTimeAvailability:
numberWithInteger:
_voiceOverIsEnabled
voiceOverTapticTimeMode
_valueForPreferenceKey:
setVoiceOverTapticTimeMode:
voiceOverTapticTimeEncoding
setVoiceOverTapticTimeEncoding:
voiceOverTapticChimesEnabled
setVoiceOverTapticChimesEnabled:
voiceOverTapticChimesFrequencyEncoding
setVoiceOverTapticChimesFrequencyEncoding:
sharedInstance
_npsBoolValueForPreferenceKey:defaultValue:
_npsIntegerValueForPreferenceKey:defaultValue:
.cxx_destruct
_domainAccessor
_init
addObserver:
_previewChimes
_clearChimeTimer
registerUpdateBlock:forRetrieveSelector:withListener:
_scheduleChimeTimer
serviceForClientIdentifier:
defaultCenter
addObserver:selector:name:object:
setDelegate:
activate
removeObserver:
removeObserver:name:object:
dealloc
effectiveOnWristState
isDeviceOnCharger
canActivateTapticChimes
isCurrentlyOutputting
stopCurrentOutput
_outputTapticChime
invalidate
sharedManager
faceDisplayTime
date
timeIntervalUntilNextFireDateForStartDate:frequency:
dateWithTimeIntervalSinceNow:
_chimeWakeTimerFired:
initWithTimeInterval:serviceIdentifier:target:selector:userInfo:
setUserVisible:
mainRunLoop
scheduleInRunLoop:
_powerAssertionProperties
setIdentifier:
resolveBehaviorForEventDetails:error:
interruptionSuppression
timeIntervalSinceNow
numberWithDouble:
dictionaryWithObjects:forKeys:count:
outputChimeAnnouncement
timeIntervalSinceReferenceDate
dateWithTimeIntervalSinceReferenceDate:
timeIntervalSinceDate:
initializeIfNeeded
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
tapticTimeManagerDidBegin:
tapticTimeManagerDidComplete:
tapticTimeManager:willOutputSSID:hapticsDescriptions:
tapticTimeManager:didOutputSSID:
onWristMonitor:didUpdateOnWristState:fromState:
_chimeTimer
_schedulePreviewNext
_lastExpectedWakeTime
_lastActualWakeTime
_lastExpectedChimeTime
_lastActualChimeTime
_onWristMonitor
_lastOnWristState
_dndEventBehaviorResolutionService
autoupdatingCurrentLocale
dateFormatFromTemplate:options:locale:
setDateFormat:
_registerForNotifications
_ringerStateChanged
initWithOptions:
beginObservingOrigins
_unregisterForNotifications
endObservingOrigins
outputTime:preferredVoice:
_canSpeakTimeForPreferredVoice:
_speakTime:preferredVoice:
_canTapticTime
_outputTapticTime:
vsSpeechSynthesizer
isSpeaking
stopSpeakingAtNextBoundary:synchronously:error:
tapticTimeManager
_setupAudioSessionForVoice:
_normalizeVolumeIfNecessary
_currentLanguageCode
_getPremiumVoiceAsset
languages
firstObject
gender
footprint
type
dateFormatter
stringFromDate:
setText:
setVolume:
setLanguageCode:
setGender:
setFootprint:
setVoiceType:
startSpeakingRequest:
sharedPreferences
inProgressOutputVoice
outputVoice
VSVoiceAsset
outputHoursAndMinutes:
dialectForSystemLanguage
specificLanguageID
nowPlayingController
activeNowPlayingOrigin
nowPlayingStateForOrigin:
isPlaying
isLocal
sharedAVSystemController
getVolume:forCategory:
setVolumeTo:forCategory:
setCategory:withOptions:error:
setActive:error:
setActive:withOptions:error:
_denormalizeVolumeIfNecessary
speechOutputDidComplete
stopOutput
speechSynthesizer:didStartSpeakingRequest:
speechSynthesizer:withRequest:didReceiveTimingInfo:
speechSynthesizer:didFinishSpeakingRequest:successfully:phonemesSpoken:withError:
speechSynthesizer:didFinishSpeakingRequest:withInstrumentMetrics:
speechSynthesizer:didPauseSpeakingRequest:
speechSynthesizer:didContinueSpeakingRequest:
speechSynthesizer:willSpeakRangeOfSpeechString:forRequest:
speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error:
speechSynthesizer:didStartPresynthesizedAudioRequest:
speechSynthesizer:didStopPresynthesizedAudioRequest:atEnd:error:
speechSynthesizer:didFinishPresynthesizedAudioRequest:withInstrumentMetrics:error:
speechSynthesizer:didFinishSynthesisRequest:withError:
speechSynthesizer:didStopPresynthesizedAudioRequestAtEnd:error:
speechSynthesizerDidStartSpeaking:
speechSynthesizer:didFinishSpeaking:phonemesSpoken:withError:
speechSynthesizer:didFinishSpeaking:withError:
speechSynthesizer:didFinishSpeakingRequest:successfully:withError:
speechSynthesizerDidPauseSpeaking:
speechSynthesizerDidContinueSpeaking:
speechSynthesizer:willSpeakRangeOfSpeechString:
backlightDidChange:from:to:
backlightDidTurnOn:forReason:
backlightDidTurnOff:forReason:
outputTime:
_speakTime:withCharacterVoiceIdentifier:
_canOutputPremiumVoice
_ringerStateNotifyToken
_cachedRingerIsMuted
_lastMediaVolume
_queue
_vsSpeechSynthesizer
_dateFormatter
_tapticTimeManager
_nowPlayingController
@16@0:8
@24@0:8@16
v32@0:8@16@24
B28@0:8@16B24
q32@0:8@16q24
B16@0:8
v20@0:8B16
q16@0:8
v24@0:8q16
v16@0:8
@"NPSDomainAccessor"
d32@0:8@16q24
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@16
v40@0:8@16q24@32
v32@0:8@16q24
v24@0:8@"AXTapticTimeManager"16
v40@0:8@"AXTapticTimeManager"16q24@"NSArray"32
v32@0:8@"AXTapticTimeManager"16q24
v40@0:8@16@24@32
v40@0:8@"CSLSOnWristMonitor"16@"CSLSOnWristState"24@"CSLSOnWristState"32
@"PCSimpleTimer"
@"NSDate"
@"CSLSOnWristMonitor"
@"CSLSOnWristState"
@"DNDEventBehaviorResolutionService"
v52@0:8@16@24B32@36@44
v48@0:8@16{_NSRange=QQ}24@40
v48@0:8@16@24@32@40
v44@0:8@16@24B32@36
v36@0:8@16B24@28
v44@0:8@16B24@28@36
v40@0:8@16{_NSRange=QQ}24
v32@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24
v40@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"NSArray"32
v52@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24B32@"NSString"36@"NSError"44
v40@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"VSInstrumentMetrics"32
v48@0:8@"VSSpeechSynthesizer"16{_NSRange=QQ}24@"VSSpeechRequest"40
v48@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"VSInstrumentMetrics"32@"NSError"40
v32@0:8@"VSSpeechSynthesizer"16@"VSPresynthesizedAudioRequest"24
v44@0:8@"VSSpeechSynthesizer"16@"VSPresynthesizedAudioRequest"24B32@"NSError"36
v48@0:8@"VSSpeechSynthesizer"16@"VSPresynthesizedAudioRequest"24@"VSInstrumentMetrics"32@"NSError"40
v40@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24@"NSError"32
v36@0:8@"VSSpeechSynthesizer"16B24@"NSError"28
v24@0:8@"VSSpeechSynthesizer"16
v44@0:8@"VSSpeechSynthesizer"16B24@"NSString"28@"NSError"36
v44@0:8@"VSSpeechSynthesizer"16@"VSSpeechRequest"24B32@"NSError"36
v40@0:8@"VSSpeechSynthesizer"16{_NSRange=QQ}24
v40@0:8@16q24q32
v32@0:8@16Q24
v40@0:8@"NSString"16q24q32
v32@0:8@"NSString"16Q24
B24@0:8Q16
v24@0:8Q16
@"NSObject<OS_dispatch_queue>"
@"VSSpeechSynthesizer"
@"NSDateFormatter"
@"AXTapticTimeManager"
@"NMRNowPlayingController"
