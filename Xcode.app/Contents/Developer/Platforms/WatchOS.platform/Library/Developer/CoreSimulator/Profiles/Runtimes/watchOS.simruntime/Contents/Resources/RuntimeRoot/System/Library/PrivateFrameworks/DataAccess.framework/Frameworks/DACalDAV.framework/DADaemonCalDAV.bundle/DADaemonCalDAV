initWithAccount:
setConsumer:
setRefreshReason:
isWaitingForPassword
account
accountDescription
shouldAutodiscoverAccountProperties
discoverInitialPropertiesWithConsumer:
_refresh
refreshReason
setFullRefresh:
publicDescription
_validateAndSync
sharedDBWatcher
isMonitoring
reallyRefresh
registerConcernedCalParty:withChangedBlock:
preferredEventDaysToSync
setPreferredEventDaysToSync:
preferredToDoDaysToSync
setPreferredToDoDaysToSync:
domain
isEqualToString:
code
setIsWaitingForPassword:
handleValidationError:completion:
setShouldDoInitialAutodiscovery:
saveAccountProperties
setSafeToRefresh:
setSyncWhenReachable:
enabledForDADataclass:
setIsMonitoring:
observeReachabilityWithBlock:
shouldDoInitialAutodiscovery
_setupNotifications
stopObservingReachability
removeConcernedCalParty:
cancelRefreshWithCompletion:
setForcedRefresh:
preferredDaysToSyncDidChange
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
account:isValid:validationError:
startMonitoring
requestAgentStopMonitoringWithCompletionBlock:
refreshDidCompleteWithError:
refreshFolderListRequireChangedFolders:isUserRequested:
syncFolderIDs:forDataclasses:isUserRequested:
initWithConsumer:account:
requestID
grantedDelegatesListRequests
setObject:forKeyedSubscript:
performRequest
objectForKey:
cancel
countByEnumeratingWithState:objects:count:
removeAllObjects
removeObjectForKey:
requestGrantedDelegatesListWithConsumer:
cancelGrantedDelegatesListRequestWithID:
cancelAllGrantedDelegatesListRequests
grantedDelegatesListRequestIsGoingAway:
initWithStartDate:endDate:ignoredEventID:addresses:consumer:account:
calendarAvailabilityRequests
requestCalendarAvailabilityForStartDate:endDate:ignoredEventID:addresses:consumer:
cancelCalendarAvailabilityRequestWithID:
cancelAllCalendarAvailabilityRequests
calendarAvailabilityRequestIsGoingAway:
init
da_newGUID
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
shutdown
dealloc
mainPrincipal
principalURL
initWithAccountInfoProvider:principalURL:taskManager:
isExpandPropertyReportSupported
setServerSupportsExpandPropertyReport:
setFetchPrincipalDetails:
error
readOnlyPrincipalDetails
count
readWritePrincipalDetails
initWithCapacity:
_grantedDelegateFromCalDAVDetails:allowWrite:
addObject:
_finishedWithResults:error:
setCompletionBlock:
startTaskGroup
cancelAllTasks
errorWithDomain:code:userInfo:
grantedDelegatesListRequestFinishedWithResults:error:
CDVRawPath
setUri:
displayName
setDisplayName:
addresses
preferredAddresses
preferredAddress:
setPreferredUserAddress:
setPermission:
.cxx_destruct
_consumer
_account
_taskManager
_taskGroup
_waitingForGatekeeper
_holdingGatekeeperLock
_finished
_requestID
T@,R,N,V_requestID
initWithBackingAccountInfo:
copy
hostFromDataclassPropertiesForDataclass:
useSSLFromDataclassPropertiesForDataclass:
portFromDataclassPropertiesForDataclass:
addUsernameToURL:
backingAccountInfo
parentAccount
dataclassProperties
saveVerifiedAccount:withCompletionHandler:
aa_updatePropertiesForAppleAccount:completion:
additionalHeaderValues
sharedManager
APSEnv
pushTokenForEnvironment:
length
mutableCopy
da_lowercaseHexStringWithoutSpaces
setValue:forKey:
initWithIdentifier:
setHost:
host
setUseSSL:
useSSL
setPort:
port
noteHomeSetOnDifferentHost:
shouldHandleHTTPCookiesForURL:
shouldSendClientInfoHeaderForURL:
shouldUseCalendarHomeSyncReport
supportsReminders
getAppleIDSession
_host
_useSSL
_port
totalBytesReceived
_didShowProgressDownloadedByteCount:
URLSession:dataTask:didReceiveData:
addEntriesFromDictionary:
previousETag
downloader
setDownloader:
setPreviousETag:
_downloader
_previousETag
T@"MobileCalDAVAttachmentDownloader",W,N,V_downloader
T@"NSString",&,N,V_previousETag
stringWithFormat:
initWithOptions:capacity:
UTF8String
removeObject:
_didFinishDownloadingWithError:
sharedInstance
changeTrackingID
calOpenDBWithClientIdentifier:
calDB
calCloseDBAndSave:
sharedGateKeeper
relinquishLocksForWaiter:dataclasses:moreComing:
absoluteString
lastPathComponent
stringByRemovingPercentEncoding
transactionId
_reallySaveAttachmentDataToDatabase
registerWaiter:forDataclassLocks:completionHandler:
responseHeaders
DAObjectForKeyCaseInsensitive:
longLongValue
_saveAttachmentDataToDatabase
_reallyBeginDownload
scheme
lowercaseString
hasPrefix:
isFileURL
defaultManager
path
fileExistsAtPath:
stringByAppendingPathComponent:
stringWithUTF8String:
initWithFileDescriptor:closeOnDealloc:
initWithURL:destinationFile:
setAccountInfoProvider:
setDelegate:
submitIndependentTask:
unregisterWaiterForDataclassLocks:
downloadProgressDownloadedByteCount:totalByteCount:
downloadFinishedError:
_attachmentDownloadDidFinish:
progressQueue
waiterID
task:didFinishWithError:
initWithAttachmentUUID:forAccount:
addConsumer:
removeConsumer:
beginDownload
cancelDownload
attachmentUUID
consumers
_waiterID
_consumers
_attachmentUUID
_attachmentURL
_attachmentSize
_attachmentType
_localFilename
_etag
T@"NSString",R,N,V_attachmentUUID
T@"NSHashTable",R,N,V_consumers
initWithAttachmentUUID:consumer:
contextWithAttachmentUUID:consumer:
consumer
setAttachmentUUID:
T@"<DAEventsAttachmentDownloadConsumer>",W,N,V_consumer
T@"NSString",&,N,V_attachmentUUID
attachmentDownloadsByAttachmentUUID
objectForKeyedSubscript:
allValues
beginDownloadingAttachmentWithUUID:consumer:
cancelDownloadingInstance:error:
cancelAllAttachmentDownloads
useThunderhillBetaServers
_updateCalendarStoreProperties:
initWithFormat:
_reallyPerformRequest
_finishWithError:
initWithCalendarIdentifier:
timeZoneWithName:
setTimeZone:
successfulICS
calendar
calscale
components
_availabilitySpansForFreeBusyComponent:usingCalendar:
attendee
firstObject
value
setObject:forKey:
dtstart
dateFromComponents:
dtend
freebusy
initWithStartDate:endDate:type:
arrayWithObjects:count:
_availabilitySpansForFreeBusyProperties:usingCalendar:
fbtype
start
duration
timeInterval
dateByAddingTimeInterval:
compare:
supportsFreebusy
preferredCalendarUserAddress
outboxURL
initWithOrganizer:originator:attendees:start:end:outboxURL:maskedUID:extendedFreeBusy:prodID:
scheduleResponse
_parseResponse:
calendarAvailabilityRequestReturnedResults:
submitIndependentCoreDAVTask:
calendarAvailabilityRequestFinishedWithError:
_startDate
_endDate
_ignoredEventID
_addresses
_freeBusyLookupID
T@,R,N
_reallyPerformSearch
supportsCalendarUserSearch
setNewStyleSearchTypeFromRecordTypes
_performNewStyleSearch
_performOldStyleSearch
containsObject:
enumerateObjectsUsingBlock:
anyObject
_filterTermsForOldStyleSearch
collectionSetURL
_convertRecordTypesToSearchTypes:
searchPropertySet
initWithSearchStrings:searchTypes:serverSupportSet:atURL:
_handleResponseForTask:
tokensAreLegal:
initWithSearchStrings:atURL:
setSearchType:
setResultLimit:
multiStatus
calendarDirectorySearchReturnedResults:
responses
errorItem
numberOfMatchesWithinLimits
successfulPropertiesToValues
namespaceAndNameForWellKnownType:
resultFromResponse:
firstName
setFirstName:
lastName
setLastName:
principalPath
setPrincipalPath:
hrefs
calDAVUserAddressForItem:
address
payloadAsString
setPreferredAddress:
da_trimWhiteSpace
calendarDirectorySearchFinishedWithError:exceededResultLimit:
calendarDirectorySearchIsGoingAway:
initWithTerms:recordTypes:resultLimit:consumer:account:
searchID
performSearch
_terms
_recordTypes
_resultLimit
_exceededResultLimit
_searchID
_searchType
numberWithInteger:
CDVURLWithScheme:host:port:path:
permission
initWithAccountInfoProvider:addWriteURLs:addReadURLs:removeURLs:taskManager:
_finishedWithError:
updateGrantedDelegatePermissionFinishedWithError:
updateGrantedDelegatePermissionRequestIsGoingAway:
initWithGrantedDelegate:consumer:account:
_grantedDelegate
directorySearches
performCalendarDirectorySearchForTerms:recordTypes:resultLimit:consumer:
cancelCalendarDirectorySearchWithID:
cancelAllCalendarDirectorySearches
startFetchOfficeHoursRequest
_startOfficeHoursRequestWithConsumer:error:startRequestBlock:
startSetOfficeHoursRequest:
initWithAccount:consumer:
officeHoursRequests
officeHoursRequestWithIDFinished:
fetchOfficeHoursWithConsumer:error:
setOfficeHours:withConsumer:error:
cancelOfficeHoursRequestWithID:
inboxURL
taskManager
initWithAccountInfoProvider:inboxURL:taskManager:
calendarAvailability
officeHoursFromICS:
_doRequestWithTaskGroupCreationBlock:taskGroupCompletionBlock:
icsFromOfficeHours:
initWithAccountInfoProvider:inboxURL:calendarAvailability:taskManager:
cancelTaskGroup
officeHoursRequestWithID:finishedWithOfficeHours:error:
officeHoursRequestWithID:finishedWithError:
_fetchedOfficeHours
T@"NSString",R,N,V_requestID
T@"<DAEventsOfficeHoursRequestResponseConsumer>",R,W,N,V_consumer
T@"MobileCalDAVDaemonAccount",R,W,N,V_account
T@"DACoreDAVTaskManager",R,N,V_taskManager
initWithPrincipalPath:consumer:account:
groupExpansions
perform
performGroupExpansionForPrincipalPath:consumer:
cancelAllGroupExpansions
expandCDGroup:
calCollectionSetName
propertySearchItemForWellKnownType:
setMatchTypeAttribute:
setMatch:
initWithNameSpace:name:parseClass:
dictionaryWithObject:forKey:
setWithObject:
initWithPropertySearches:propertiesToFind:atURL:applyToPrincipalCollectionSet:extraAttributes:
_handleResponseForSearchTask:
parserMappingsWithServerSupportSet:includeEmail:
absoluteURL
initWithPropertiesToFind:atURL:expandedName:expandedNameSpace:
lastObject
emailAddress
successfulValueForNameSpace:elementName:
orderedResponses
resultType
resultFromCalDAVPrincipalResult:
groupExpansionFinishedWithResults:error:
_principalPath
_results
T@,R,N,V_searchID
initWithCalendarID:consumer:account:
finishWithError:
copyCalStore
notificationCollectionURL
da_absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:
initWithURL:
initWithPrincipal:
setCurrentOperation:
refreshCalendarProperties
submitQueuedCoreDAVTask:
_deleteSharingInvitationWithUID:
_reallyRespondToSharingRequestWithCreateReplyGroupBlock:
_createReplyGroupForShareInviteResponse:toCalendar:
_doSharingRequestResponseWithCreateReplyGroupBlock:
calendarHomeURL
relativePath
URLWithString:
calendarUserAddresses
initForReplyWithUID:href:hostURL:summary:
initWithInvitation:acceptInvitation:atCalendarHomeURL:accountInfoProvider:taskManager:
_createReplyGroupForReportingCalendarAsJunk:
initWithResourceURLs:accountInfoProvider:taskManager:
shareResponseFinishedWithError:
shareResponseIsGoingAway:
currentOperation
responseWithCalendarID:consumer:account:
taskGroup:didFinishWithError:
calendarRefreshForPrincipal:completedWithNewCTags:newSyncTokens:calendarHomeSyncToken:updatedCalendars:error:
calendarRefreshShouldRetryMkCalendarForPrincipal:calendar:error:
calendarRefreshFoundUpdatedContainerWithIgnoredEntityType:
calendarRefreshFoundUpdatedSpecialContainer:
calendarRefreshFoundDeletedContainerURL:
respondToSharingRequestWithResponse:
reportAsJunk
responseID
calendarID
setCalendarID:
_responseID
_calendarID
_currentOperation
T@"NSString",R,N,V_responseID
T@"<DAEventsCalendarSharingResponseConsumer>",W,N,V_consumer
T@"NSString",&,N,V_calendarID
T@"CoreDAVTaskGroup",&,N,V_currentOperation
shareResponses
respondToShareRequestForCalendar:withResponse:consumer:
reportShareRequestAsJunkForCalendar:consumer:
cancelShareResponseInstance:error:
cancelAllSharingRequests
optionsTimeoutTimer
invalidate
setOptionsTimeoutTimer:
cancelAllUpdateGrantedDelegatePermissionRequests
_cancelOptionsTimer
unregisterDelegate:
sharedBabysitter
unregisterAccount:forOperationWithName:
_reallyCancelAllSearchQueries
optionsProbe
finishCoreDAVTaskWithError:
calendars
pushKey
title
date
_updateWatchedCollections
registerDelegate:
shouldUpdatePushDelegate
APSTopic
APSTopicHasValidPrefix:
registerTopic:forDelegate:inEnvironment:
unregisterTopic:forDelegate:inEnvironment:
delegateDidCompleteRefresh:
refreshActor:didCompleteWithError:
userInfo
context
shouldRetry
extractDARefreshReasonFromContext:
doubleValue
watchedCollections
retryRefreshForDelegate:withCollections:after:originalRefreshReason:
supportsAuthentication
isAuthenticated
setAuthenticated:
subscribedCalendarsChanged
safeToRefresh
setSubscribedCalendarsChanged:
accountSyncDiagnostics
_persistAccountSyncDiagnostics:withContext:completionTime:willAttemptToRetry:hitInternalRefreshTimeout:error:
calOpenDBAsGenericClient
accountID
_reallyPerformSearchQuery:
searchString
searchQuery:finishedWithError:
setNeedsDefaultTimedAlarmUpdate:
setNeedsDefaultAllDayAlarmUpdate:
_hasChangesInStore:forChangesCall:
needsAccountPropertyRefresh
accountWithAccountID:
identifier
_shouldRefreshInResponseToDBChange
defaultContext
setIsForced:
setIsCalendarsOnly:
setWasUserRequested:
setWasDueToPush:
initWithClientIdentifier:
setChangeTracker:
setShouldUseOpportunisticSockets:
wasUserRequested
setWasUserInitiated:
refreshWithContext:
isEnabledForDataclass:
registerAccount:forOperationWithName:
_continueRefresh
activeModalTask
defaultDAVProbeTimeout
setOptionsProbe:
shouldRegisterWithRefreshManager
setShouldRegisterWithRefreshManager:
setShouldUpdatePushDelegate:
numberWithBool:
dictionaryWithObjects:forKeys:count:
_serverProbeTimedOut
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
convertToMobileCalDAVRefreshReason:
_validateAndSync:
_probeAndSync
APSSubscriptionURL
simulateCrashWithMessage:
wasDueToPush
isDelegateAccount
accountShouldContinue:
stateString
refreshCollections:withReason:
scheduleIdentifier
onBehalfOfBundleIdentifier
getDAAccount
saveXpcActivity:
trustHandler
serverTokenRegistrationURL
username
password
interfaceWentUp
interfaceWentDown
fetchInterval
pushDisabled
T@"DATrustHandler",R,N
_isEnabled
childAccountWithIdentifier:
monitorFoldersWithIDs:
_foundDuplicateCalendars:
fullRefresh
forcedRefresh
setAttachmentDownloadsByAttachmentUUID:
setCalendarAvailabilityRequests:
setDirectorySearches:
setGroupExpansions:
setShareResponses:
setGrantedDelegatesListRequests:
updateGrantedDelegatePermissionRequests
setUpdateGrantedDelegatePermissionRequests:
_validityCheckConsumer
_shouldRegisterWithRefreshManager
_safeToRefresh
_waitingForDiscoveryGatekeeper
_holdingDiscoveryGatekeeperLock
_forcedRefresh
_fullRefresh
_refreshReason
_lastRetryTimeout
_attachmentDownloadsByAttachmentUUID
_calendarAvailabilityRequests
_shareResponses
_directorySearches
_grantedDelegatesListRequests
_updateGrantedDelegatePermissionRequests
_groupExpansions
_optionsProbe
_optionsTimeoutTimer
_watchedCollections
_officeHoursRequests
T@"NSMutableDictionary",R,N,V_officeHoursRequests
T@"NSMutableSet",&,N,V_groupExpansions
T@"NSMutableDictionary",&,N,V_shareResponses
T@"NSMutableDictionary",&,N,V_directorySearches
T@"NSMutableArray",&,N,V_updateGrantedDelegatePermissionRequests
T@"NSMutableDictionary",&,N,V_grantedDelegatesListRequests
T@"NSMutableDictionary",&,N,V_calendarAvailabilityRequests
T@"NSMutableDictionary",&,N,V_attachmentDownloadsByAttachmentUUID
T@"CalDAVAgent",W,N,V_consumer
TB,N,V_safeToRefresh
TB,N,V_fullRefresh
TB,N,V_forcedRefresh
TB,N,V_shouldRegisterWithRefreshManager
Ti,N,V_refreshReason
T@"CoreDAVOptionsTask",&,N,V_optionsProbe
T@"NSTimer",&,N,V_optionsTimeoutTimer
updateGrantedDelegatePermission:consumer:
cancelUpdateGrantedDelegatePermissionRequestWithID:
Account "%@" is waiting for a password, so we're going to ignore this refresh request
Account doesn't have a principal URL. Running autodiscovery.
Account "%@" (%{public}@) is refreshing in response to a calendar database change
Registering %p for database change notifications
Calendar database changed. Refreshing account  "%@" (%{public}@)
Validation for account "%@" was cancelled, so we're not going to save the account properties we just discovered. Better luck next time.
Got a password from the user. Attempting autodiscovery again for "%@"
Account "%@" can't figure out its principalPath, and we couldn't get a password from the user 
Account "%@" can't figure out its principalPath. 
We'll refresh if we find a better network connection.
CalDAV has started monitoring for the account "%@"
reachability indicates that the network is reachable.  We're going to retry our folder sync.
The CalDAV agent was told to stop monitoring.
Unregistered %p for database change notifications
Refresh completed with this error: %@
We encountered a network error when refreshing. Scheduling a refresh for when the network reachability changes
Account "%@" was told to refresh its folder list
Account "%@" was told to sync the folders %@
Refreshing account "%@" because the days to sync setting changed
Stupid hack to keep %@ from getting released too early
Starting GetGrantedDelegatesTaskGroup: [%@]
[%@] finished with error %@
Home set is on a different host. Fetching new AppleAccount properties
Updated account properties are %@
Backing parent AppleAccount was %@saved successfully.
Error fetching AppleAccount properties: %@
The gatekeeper lock has been granted. Beginning save of attachment %@
Couldn't get an attachment to set our downloaded file on
Couldn't save attachment file in the database for attachment %@
Attachment has been saved. Releasing gatekeeper lock
DATransaction starting, ID: %@
Requesting gatekeeper lock to save attachment %@
The downloader's gatekeeper locks were aborted while it was waiting for a lock. Bummer.
Downloader %@ was told to save the attachment twice. Ignoring the second request
The attachment at %@ hasn't been modified since we last saw it.
Couldn't download the attachment at %@: %@
Finished downloading the file at %@. Saving to the database.
etag for attachment on the server is %@. Our etag is %@
Downloading attachment of size %lld
Acquired DBLock to download attachment.
Couldn't get a gatekeeper lock in order to download attachment.
We were told to download the attachment with UUID %@ but that attachment doesn't have a URL. We can't do anything
Refusing to download the attachment with URL %@ because it isn't http or https
Couldn't create a temporary file with the format %s
Downloading attachment at %@ to %@
Notifying consumers of progress: %lld/%lld
Done downloading attachment %@.%@%@
Stupid hack to get %@ retained
Starting new attachment download for consumer %p and attachment UUID %@
Cancelling new attachment download for consumer %p and attachment UUID %@
Cancelling All attachment downloads
Waiting on the gatekeeper before issuing a calendar availability request
Calendar scale unsupported: [%@].  Will not use iCalendar document in free/busy response: [%@]
No availability spans generated for component: [%@]
No attendee found on free/busy component [%@].  Will not save free/busy spans.
Free/busy window start date: [%@] end date: [%@].  Component: [%@]
No free/busy properties found.  Counting entire period as free.  Component: [%@]
No spans found in properties: [%@]
No spans generated.  The entire window from [%@] to [%@] will be counted as 'unknown.'
Period not valid.  Start: [%@]  End: [%@] Duration: [%@].  Property: [%@]
Could not generate start and end date for period: [%@].  Property: [%@]
The generated start date is after the generated end date.  Property: [%@]
The following principal indicates that free/busy is not supported, so no request will be sent: [%@]
Calendar availability (free/busy) task complete: [%@].  Error: [%@]
Starting calendar availability (free/busy) task: [%@]
Releasing gatekeeper lock
New-style search (%@) not supported.  Falling back to old-style search (%@).
Removing calendar directory search term because it is less than [%lu] characters in length: [%@]
Removing remaining calendar directory search term because it is less than [%lu] characters in length: [%@]
After filtering calendar directory search terms, none are left.  Will not proceed with search.
Starting calendar search task: [%@]
Calendar directory search terms are not legal.  Will not proceed with search.
Calendar search task complete: [%@].  Error: [%@]
Number of matches exceeded the limit of: [%lu]
Encountered result with displayName: [%@]
Unexpected parsing of calendar-user-address-set: %@
No href items found for calendar-user-address-set: [%@]
Found calendar user address: [%@]
Unable to parse user address: [%@]
Calendar user type: [%@]
Known calendar user type encountered but not handled: [%@]
Unrecognized calendar user type encountered during directory search: [%@]
Record type: [%@]
Unrecognized record type encountered during directory search: [%@]
Starting UpdateGrantedDelegatesTaskGroup: [%@]
Discovered principal path %@ from address %@
Calendar group expansion complete: [%@].  Error: [%@]
Done refreshing calendars. Saving the database
Delete task at %@ finished with error %@
Couldn't get an external id from the invite notification with uid %@
Couldn't find a sharing invite notification in the database with uid %@
Couldn't get a calendar store to delete the calendar sharing invitation from
Didn't send a delete for the sharing invitation with uid %@
Reply to shared calendar invitation task group %@ finished with error %@
Waiting on the gatekeeper before responding to a calendar share request
Sending shared calendar invite %@ for invite to "%@" of with uid %@ at URL %@
MobileCalDAVSharingResponse %p finished with error %@
MobileCalDAVDaemonAccount %p starting up.
MobileCalDAVDaemonAccount %p going away
Cancelling CalDAV refresh.
Cancel complete. Unregistering ourself as a gatekeeper waiter
Updating watched collections for %luu calendars
Push key for calendar "%@" is %@
Refresh complete. Releasing gatekeeper lock and notifying PersistentConnection
Notifying consumer about our refresh completion
Refusing to register for the topic "%@" because it has an invalid prefix.
The server returned precondition failure to our bulk upload. Retrying in a bit.
The server returned a 503 error and told us to try again in %f seconds
We'll retry again after %f seconds
We've already backed off for 7 minutes. Giving up and retrying again at our regularly scheduled time
Received a success response from server while account is not marked as authenticated. Set isAuthenticated flag and save account %@
Saving account properties to pick up on new subscribed calendars
Dropping search query "%@" because the agent is shut(ting) down.
Found event changes for account "%@" (%{public}@)
Found task changes for account "%@" (%{public}@)
Found alarm changes for account "%@" (%{public}@)
Found attendee changes for account "%@" (%{public}@)
Found attachment changes for account "%@" (%{public}@)
Found recurrence changes for account "%@" (%{public}@)
Found calendar changes for account "%@" (%{public}@)
Found notification changes for account "%@" (%{public}@)
Found sharee changes for account "%@"
Account Properties Need to Be Refreshed. Allowing Refresh to Continue..
[account %@] %@ Account Refresh as we %@ local DB changes or account properties need refresh
Gatekeeper gave us the goahead. Refreshing account %{public}@ with ID %@. Reason: %x
There's no need for us to refresh right now as there are no changes in our local database
Account "%@" (%{public}@) was told to refresh, but it is disabled for calendars. Refusing to refresh.
_refresh called for account %@. Forced:%d full:%d reason: %x
Refresh fired. Requesting lock from gatekeeper.
This account has been put in timeout by the babysitter. Failing this sync. %@
Dropping folder refresh request since a full sync is already in progress
Our gatekeeper locks were aborted while we were still waiting for a lock. What gives?
The options task timer fired, but the task manager is modal. We'll wait until it drops modal before tearing down this task.
We weren't able to reach the server at %@ within %lf seconds. Bailing out of this refresh early.
Already holding (or waiting for) a gatekeeper lock, so skipping this property discovery request
Ignoring probe request for "%@" as we're already in the middle of a refresh
Ignoring probe request for "%@" as we already have one outstanding
Probing the host at %@ to see if we have a good enough network connection. We'll wait up to %lf seconds.
Account "%@" (%{public}@) couldn't reach the server at %@: %@
We were able to reach the server at %@. Continuing with the refresh
Account "%@" (%{public}@) was told to refresh its collections with reason %d
Account "%@" (%{public}@) was told it is safe to refresh. Kicking off a refresh.
Account "%@" (%{public}@) is beginning to monitor these folders: %@
v8@?0
v24@?0q8@"NSError"16
MobileCalDAVGrantedDelegatesListRequest.m
Should be finished before we dealloc
v20@?0B8@"NSError"12
NOT 
CardDAViCloudDaemonAccount
com.apple.dataaccess.caldav.attachmentDownload
com.apple.dataaccess.caldav.attachmentDownload.%@
v20@?0q8B16
X-ANTICIPATED-CONTENT-LENGTH
http
DAAttachmentXXXXXX
 Error was: 
MobileCalDAVAttachmentSupport.m
You can't tell us to download an attachment without providing an attachment UUID
You can't download an attachment without setting a consumer
You must provide a download instance to cancel
Didn't find an attachment UUID in the download context
webdav.beta.facebook.com
MobileCalDAVCalendarAvailabilityRequest.m
startDate: [%@] endDate: [%@], ignoredEventID: [%@], addresses: [%@], consumer: [%p], account: [%p]
GREGORIAN
GROUP
INDIVIDUAL
RESOURCE
ROOM
UNKNOWN
MobileCalDAVDirectorySearch.m
terms: [%@], recordTypes: [%@] resultLimit: [%lu] consumer: [%p], account: [%p]
v24@?0@"NSString"8^B16
v24@?0@"NSString"8@"NSString"16
@"CoreDAVItem"12@?0i8
users
locations
groups
resources
v24@?0@"CoreDAVResponseItem"8^B16
MobileCalDAVUpdateGrantedDelegatePermissionRequest.m
v16@?0@"DACalDAVOfficeHoursRequest"8
@"CoreDAVTaskGroup"32@?0@"<CoreDAVAccountInfoProvider>"8@"NSURL"16^@24
v24@?0@"CoreDAVTaskGroup"8^@16
MobileCalDAVGroupExpansion.m
equals
anyof
test
MobileCalDAVSharingSupport.m
@"CoreDAVTaskGroup"16@?0^v8
accept
decline
You can't tell us to respond to a calendar share request without providing a calendar ID
You can't respond to a calendar share without setting a consumer
You must provide a share instance to cancel
com.me.
com.apple.calendar.
com.icloud.
CalDAVRefresh
retry-after
Starting
Blocking
have
do not have
calendars for 
CalDAVValidityCheck
CalDAVProbe
com.apple.dataaccess.caldav.ProbeComplete
success
host
@"NSDictionary"8@?0
DAAPSTokenURL
<rdar://problem/37173724>. Consumer class: [%@]
CalDAVAgent
DAPreferredDaysToSyncDidChangeObserver
DAValidityCheckConsumer
NSObject
GrantedDelegatesListSupport
CalendarAvailabilitySupport
MobileCalDAVGrantedDelegatesListRequest
MobileCalDAViCloudDaemonAccount
CalDAVGetToFileWithProgressTask
MobileCalDAVAttachmentDownloader
DADataclassLockWatcher
CoreDAVTaskDelegate
MobileCalDAVDownloadContext
AttachmentSupport
MobileCalDAVFacebookDaemonAccount
MobileCalDAVCalendarAvailabilityRequest
MobileCalDAVDirectorySearch
MobileCalDAVUpdateGrantedDelegatePermissionRequest
CalendarDirectorySearchSupport
OfficeHoursRequest
DACalDAVOfficeHoursRequest
GroupExpansionSupport
MobileCalDAVGroupExpansion
MobileCalDAVSharingResponse
CalDAVCalendarPropertyRefreshDelegate
CoreDAVTaskGroupDelegate
SharingSupport
MobileCalDAVDaemonAccount
DARefreshManagerDelegate
DABabysittable
UpdateGrantedDelegatePermissionSupport
v16@0:8
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v36@0:8@16B24@28
v36@0:8@"DAAccount"16B24@"NSError"28
@24@0:8@16
v24@0:8@?16
v24@0:8@16
v24@0:8B16B20
v36@0:8@16q24B32
@56@0:8@16@24@32@40@48
@28@0:8@16B24
@32@0:8@16@24
v32@0:8@16@24
@"<DAEventsGrantedDelegatesListResponseConsumer>"
@"MobileCalDAVDaemonAccount"
@"DACoreDAVTaskManager"
@"CalDAVGetGrantedDelegatesTaskGroup"
v20@0:8B16
v24@0:8q16
q16@0:8
@"NSString"
v40@0:8@16@24@32
@"MobileCalDAVAttachmentDownloader"
v32@0:8@"CoreDAVTask"16@"NSError"24
@"NSHashTable"
@"NSURL"
@"<DAEventsAttachmentDownloadConsumer>"
B24@0:8^v16
@64@0:8@16@24@32@40@48@56
@"NSDate"
@"NSArray"
@"<DAEventsCalendarAvailabilityResponseConsumer>"
@56@0:8@16@24Q32@40@48
@"NSSet"
@"<DAEventsCalendarDirectorySearchResponseConsumer>"
@40@0:8@16@24@32
@"DAEGrantedDelegate"
@"<DAEventsUpdateGrantedDelegatePermissionResponseConsumer>"
@"CalDAVUpdateGrantedDelegatesTaskGroup"
@48@0:8@16@24Q32@40
@32@0:8@16^@24
@40@0:8@16@24^@32
@40@0:8@16^@24@?32
v32@0:8@?16@?24
@"CoreDAVTaskGroup"
@"<DAEventsOfficeHoursRequestResponseConsumer>"
@"<DAEventsGroupExpansionResponseConsumer>"
@"NSMutableDictionary"
v32@0:8@"CoreDAVTaskGroup"16@"NSError"24
v64@0:8@16@24@32@40@48@56
B40@0:8@16@24@32
v64@0:8@"<CalDAVPrincipal>"16@"NSDictionary"24@"NSDictionary"32@"NSString"40@"NSSet"48@"NSError"56
B40@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24@"NSError"32
v24@0:8@"CalDAVContainer"16
v24@0:8@"NSURL"16
@32@0:8q16^v24
@24@0:8^v16
@"<DAEventsCalendarSharingResponseConsumer>"
@40@0:8@16q24@32
i24@0:8@16
i20@0:8i16
v28@0:8@16i24
v28@0:8@"NSSet"16i24
@"NSSet"16@0:8
@"DAAccount"16@0:8
v24@0:8@"NSObject<OS_xpc_object>"16
@"DATrustHandler"16@0:8
@"NSURL"16@0:8
v56@0:8@16@24@32B40B44@48
B32@0:8^v16^?24
v20@0:8i16
i16@0:8
@"CalDAVAgent"
@"<DAValidityCheckConsumer>"
@"NSMutableArray"
@"NSMutableSet"
@"CoreDAVOptionsTask"
@"NSTimer"
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
initWithAccount:
setConsumer:
setRefreshReason:
isWaitingForPassword
account
accountDescription
shouldAutodiscoverAccountProperties
discoverInitialPropertiesWithConsumer:
_refresh
refreshReason
setFullRefresh:
publicDescription
_validateAndSync
sharedDBWatcher
isMonitoring
reallyRefresh
registerConcernedCalParty:withChangedBlock:
preferredEventDaysToSync
setPreferredEventDaysToSync:
preferredToDoDaysToSync
setPreferredToDoDaysToSync:
domain
isEqualToString:
code
setIsWaitingForPassword:
handleValidationError:completion:
setShouldDoInitialAutodiscovery:
saveAccountProperties
setSafeToRefresh:
setSyncWhenReachable:
enabledForDADataclass:
setIsMonitoring:
observeReachabilityWithBlock:
shouldDoInitialAutodiscovery
_setupNotifications
stopObservingReachability
removeConcernedCalParty:
cancelRefreshWithCompletion:
setForcedRefresh:
preferredDaysToSyncDidChange
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
account:isValid:validationError:
startMonitoring
requestAgentStopMonitoringWithCompletionBlock:
refreshDidCompleteWithError:
refreshFolderListRequireChangedFolders:isUserRequested:
syncFolderIDs:forDataclasses:isUserRequested:
initWithConsumer:account:
requestID
grantedDelegatesListRequests
setObject:forKeyedSubscript:
performRequest
objectForKey:
cancel
countByEnumeratingWithState:objects:count:
removeAllObjects
removeObjectForKey:
requestGrantedDelegatesListWithConsumer:
cancelGrantedDelegatesListRequestWithID:
cancelAllGrantedDelegatesListRequests
grantedDelegatesListRequestIsGoingAway:
initWithStartDate:endDate:ignoredEventID:addresses:consumer:account:
calendarAvailabilityRequests
requestCalendarAvailabilityForStartDate:endDate:ignoredEventID:addresses:consumer:
cancelCalendarAvailabilityRequestWithID:
cancelAllCalendarAvailabilityRequests
calendarAvailabilityRequestIsGoingAway:
init
da_newGUID
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
shutdown
dealloc
mainPrincipal
principalURL
initWithAccountInfoProvider:principalURL:taskManager:
isExpandPropertyReportSupported
setServerSupportsExpandPropertyReport:
setFetchPrincipalDetails:
error
readOnlyPrincipalDetails
count
readWritePrincipalDetails
initWithCapacity:
_grantedDelegateFromCalDAVDetails:allowWrite:
addObject:
_finishedWithResults:error:
setCompletionBlock:
startTaskGroup
cancelAllTasks
errorWithDomain:code:userInfo:
grantedDelegatesListRequestFinishedWithResults:error:
CDVRawPath
setUri:
displayName
setDisplayName:
addresses
preferredAddresses
preferredAddress:
setPreferredUserAddress:
setPermission:
.cxx_destruct
_consumer
_account
_taskManager
_taskGroup
_waitingForGatekeeper
_holdingGatekeeperLock
_finished
_requestID
T@,R,N,V_requestID
initWithBackingAccountInfo:
copy
hostFromDataclassPropertiesForDataclass:
useSSLFromDataclassPropertiesForDataclass:
portFromDataclassPropertiesForDataclass:
addUsernameToURL:
backingAccountInfo
parentAccount
dataclassProperties
saveVerifiedAccount:withCompletionHandler:
aa_updatePropertiesForAppleAccount:completion:
additionalHeaderValues
sharedManager
APSEnv
pushTokenForEnvironment:
length
mutableCopy
da_lowercaseHexStringWithoutSpaces
setValue:forKey:
initWithIdentifier:
setHost:
host
setUseSSL:
useSSL
setPort:
port
noteHomeSetOnDifferentHost:
shouldHandleHTTPCookiesForURL:
shouldSendClientInfoHeaderForURL:
shouldUseCalendarHomeSyncReport
supportsReminders
getAppleIDSession
_host
_useSSL
_port
totalBytesReceived
_didShowProgressDownloadedByteCount:
URLSession:dataTask:didReceiveData:
addEntriesFromDictionary:
previousETag
downloader
setDownloader:
setPreviousETag:
_downloader
_previousETag
T@"MobileCalDAVAttachmentDownloader",W,N,V_downloader
T@"NSString",&,N,V_previousETag
stringWithFormat:
initWithOptions:capacity:
UTF8String
removeObject:
_didFinishDownloadingWithError:
sharedInstance
changeTrackingID
calOpenDBWithClientIdentifier:
calDB
calCloseDBAndSave:
sharedGateKeeper
relinquishLocksForWaiter:dataclasses:moreComing:
absoluteString
lastPathComponent
stringByRemovingPercentEncoding
transactionId
_reallySaveAttachmentDataToDatabase
registerWaiter:forDataclassLocks:completionHandler:
responseHeaders
DAObjectForKeyCaseInsensitive:
longLongValue
_saveAttachmentDataToDatabase
_reallyBeginDownload
scheme
lowercaseString
hasPrefix:
isFileURL
defaultManager
path
fileExistsAtPath:
stringByAppendingPathComponent:
stringWithUTF8String:
initWithFileDescriptor:closeOnDealloc:
initWithURL:destinationFile:
setAccountInfoProvider:
setDelegate:
submitIndependentTask:
unregisterWaiterForDataclassLocks:
downloadProgressDownloadedByteCount:totalByteCount:
downloadFinishedError:
_attachmentDownloadDidFinish:
progressQueue
waiterID
task:didFinishWithError:
initWithAttachmentUUID:forAccount:
addConsumer:
removeConsumer:
beginDownload
cancelDownload
attachmentUUID
consumers
_waiterID
_consumers
_attachmentUUID
_attachmentURL
_attachmentSize
_attachmentType
_localFilename
_etag
T@"NSString",R,N,V_attachmentUUID
T@"NSHashTable",R,N,V_consumers
initWithAttachmentUUID:consumer:
contextWithAttachmentUUID:consumer:
consumer
setAttachmentUUID:
T@"<DAEventsAttachmentDownloadConsumer>",W,N,V_consumer
T@"NSString",&,N,V_attachmentUUID
attachmentDownloadsByAttachmentUUID
objectForKeyedSubscript:
allValues
beginDownloadingAttachmentWithUUID:consumer:
cancelDownloadingInstance:error:
cancelAllAttachmentDownloads
useThunderhillBetaServers
_updateCalendarStoreProperties:
initWithFormat:
_reallyPerformRequest
_finishWithError:
initWithCalendarIdentifier:
timeZoneWithName:
setTimeZone:
successfulICS
calendar
calscale
components
_availabilitySpansForFreeBusyComponent:usingCalendar:
attendee
firstObject
value
setObject:forKey:
dtstart
dateFromComponents:
dtend
freebusy
initWithStartDate:endDate:type:
arrayWithObjects:count:
_availabilitySpansForFreeBusyProperties:usingCalendar:
fbtype
start
duration
timeInterval
dateByAddingTimeInterval:
compare:
supportsFreebusy
preferredCalendarUserAddress
outboxURL
initWithOrganizer:originator:attendees:start:end:outboxURL:maskedUID:extendedFreeBusy:prodID:
scheduleResponse
_parseResponse:
calendarAvailabilityRequestReturnedResults:
submitIndependentCoreDAVTask:
calendarAvailabilityRequestFinishedWithError:
_startDate
_endDate
_ignoredEventID
_addresses
_freeBusyLookupID
T@,R,N
_reallyPerformSearch
supportsCalendarUserSearch
setNewStyleSearchTypeFromRecordTypes
_performNewStyleSearch
_performOldStyleSearch
containsObject:
enumerateObjectsUsingBlock:
anyObject
_filterTermsForOldStyleSearch
collectionSetURL
_convertRecordTypesToSearchTypes:
searchPropertySet
initWithSearchStrings:searchTypes:serverSupportSet:atURL:
_handleResponseForTask:
tokensAreLegal:
initWithSearchStrings:atURL:
setSearchType:
setResultLimit:
multiStatus
calendarDirectorySearchReturnedResults:
responses
errorItem
numberOfMatchesWithinLimits
successfulPropertiesToValues
namespaceAndNameForWellKnownType:
resultFromResponse:
firstName
setFirstName:
lastName
setLastName:
principalPath
setPrincipalPath:
hrefs
calDAVUserAddressForItem:
address
payloadAsString
setPreferredAddress:
da_trimWhiteSpace
calendarDirectorySearchFinishedWithError:exceededResultLimit:
calendarDirectorySearchIsGoingAway:
initWithTerms:recordTypes:resultLimit:consumer:account:
searchID
performSearch
_terms
_recordTypes
_resultLimit
_exceededResultLimit
_searchID
_searchType
numberWithInteger:
CDVURLWithScheme:host:port:path:
permission
initWithAccountInfoProvider:addWriteURLs:addReadURLs:removeURLs:taskManager:
_finishedWithError:
updateGrantedDelegatePermissionFinishedWithError:
updateGrantedDelegatePermissionRequestIsGoingAway:
initWithGrantedDelegate:consumer:account:
_grantedDelegate
directorySearches
performCalendarDirectorySearchForTerms:recordTypes:resultLimit:consumer:
cancelCalendarDirectorySearchWithID:
cancelAllCalendarDirectorySearches
startFetchOfficeHoursRequest
_startOfficeHoursRequestWithConsumer:error:startRequestBlock:
startSetOfficeHoursRequest:
initWithAccount:consumer:
officeHoursRequests
officeHoursRequestWithIDFinished:
fetchOfficeHoursWithConsumer:error:
setOfficeHours:withConsumer:error:
cancelOfficeHoursRequestWithID:
inboxURL
taskManager
initWithAccountInfoProvider:inboxURL:taskManager:
calendarAvailability
officeHoursFromICS:
_doRequestWithTaskGroupCreationBlock:taskGroupCompletionBlock:
icsFromOfficeHours:
initWithAccountInfoProvider:inboxURL:calendarAvailability:taskManager:
cancelTaskGroup
officeHoursRequestWithID:finishedWithOfficeHours:error:
officeHoursRequestWithID:finishedWithError:
_fetchedOfficeHours
T@"NSString",R,N,V_requestID
T@"<DAEventsOfficeHoursRequestResponseConsumer>",R,W,N,V_consumer
T@"MobileCalDAVDaemonAccount",R,W,N,V_account
T@"DACoreDAVTaskManager",R,N,V_taskManager
initWithPrincipalPath:consumer:account:
groupExpansions
perform
performGroupExpansionForPrincipalPath:consumer:
cancelAllGroupExpansions
expandCDGroup:
calCollectionSetName
propertySearchItemForWellKnownType:
setMatchTypeAttribute:
setMatch:
initWithNameSpace:name:parseClass:
dictionaryWithObject:forKey:
setWithObject:
initWithPropertySearches:propertiesToFind:atURL:applyToPrincipalCollectionSet:extraAttributes:
_handleResponseForSearchTask:
parserMappingsWithServerSupportSet:includeEmail:
absoluteURL
initWithPropertiesToFind:atURL:expandedName:expandedNameSpace:
lastObject
emailAddress
successfulValueForNameSpace:elementName:
orderedResponses
resultType
resultFromCalDAVPrincipalResult:
groupExpansionFinishedWithResults:error:
_principalPath
_results
T@,R,N,V_searchID
initWithCalendarID:consumer:account:
finishWithError:
copyCalStore
notificationCollectionURL
da_absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:
initWithURL:
initWithPrincipal:
setCurrentOperation:
refreshCalendarProperties
submitQueuedCoreDAVTask:
_deleteSharingInvitationWithUID:
_reallyRespondToSharingRequestWithCreateReplyGroupBlock:
_createReplyGroupForShareInviteResponse:toCalendar:
_doSharingRequestResponseWithCreateReplyGroupBlock:
calendarHomeURL
relativePath
URLWithString:
calendarUserAddresses
initForReplyWithUID:href:hostURL:summary:
initWithInvitation:acceptInvitation:atCalendarHomeURL:accountInfoProvider:taskManager:
_createReplyGroupForReportingCalendarAsJunk:
initWithResourceURLs:accountInfoProvider:taskManager:
shareResponseFinishedWithError:
shareResponseIsGoingAway:
currentOperation
responseWithCalendarID:consumer:account:
taskGroup:didFinishWithError:
calendarRefreshForPrincipal:completedWithNewCTags:newSyncTokens:calendarHomeSyncToken:updatedCalendars:error:
calendarRefreshShouldRetryMkCalendarForPrincipal:calendar:error:
calendarRefreshFoundUpdatedContainerWithIgnoredEntityType:
calendarRefreshFoundUpdatedSpecialContainer:
calendarRefreshFoundDeletedContainerURL:
respondToSharingRequestWithResponse:
reportAsJunk
responseID
calendarID
setCalendarID:
_responseID
_calendarID
_currentOperation
T@"NSString",R,N,V_responseID
T@"<DAEventsCalendarSharingResponseConsumer>",W,N,V_consumer
T@"NSString",&,N,V_calendarID
T@"CoreDAVTaskGroup",&,N,V_currentOperation
shareResponses
respondToShareRequestForCalendar:withResponse:consumer:
reportShareRequestAsJunkForCalendar:consumer:
cancelShareResponseInstance:error:
cancelAllSharingRequests
optionsTimeoutTimer
invalidate
setOptionsTimeoutTimer:
cancelAllUpdateGrantedDelegatePermissionRequests
_cancelOptionsTimer
unregisterDelegate:
sharedBabysitter
unregisterAccount:forOperationWithName:
_reallyCancelAllSearchQueries
optionsProbe
finishCoreDAVTaskWithError:
calendars
pushKey
title
date
_updateWatchedCollections
registerDelegate:
shouldUpdatePushDelegate
APSTopic
APSTopicHasValidPrefix:
registerTopic:forDelegate:inEnvironment:
unregisterTopic:forDelegate:inEnvironment:
delegateDidCompleteRefresh:
refreshActor:didCompleteWithError:
userInfo
context
shouldRetry
extractDARefreshReasonFromContext:
doubleValue
watchedCollections
retryRefreshForDelegate:withCollections:after:originalRefreshReason:
supportsAuthentication
isAuthenticated
setAuthenticated:
subscribedCalendarsChanged
safeToRefresh
setSubscribedCalendarsChanged:
accountSyncDiagnostics
_persistAccountSyncDiagnostics:withContext:completionTime:willAttemptToRetry:hitInternalRefreshTimeout:error:
calOpenDBAsGenericClient
accountID
_reallyPerformSearchQuery:
searchString
searchQuery:finishedWithError:
setNeedsDefaultTimedAlarmUpdate:
setNeedsDefaultAllDayAlarmUpdate:
_hasChangesInStore:forChangesCall:
needsAccountPropertyRefresh
accountWithAccountID:
identifier
_shouldRefreshInResponseToDBChange
defaultContext
setIsForced:
setIsCalendarsOnly:
setWasUserRequested:
setWasDueToPush:
initWithClientIdentifier:
setChangeTracker:
setShouldUseOpportunisticSockets:
wasUserRequested
setWasUserInitiated:
refreshWithContext:
isEnabledForDataclass:
registerAccount:forOperationWithName:
_continueRefresh
activeModalTask
defaultDAVProbeTimeout
setOptionsProbe:
shouldRegisterWithRefreshManager
setShouldRegisterWithRefreshManager:
setShouldUpdatePushDelegate:
numberWithBool:
dictionaryWithObjects:forKeys:count:
_serverProbeTimedOut
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
convertToMobileCalDAVRefreshReason:
_validateAndSync:
_probeAndSync
APSSubscriptionURL
simulateCrashWithMessage:
wasDueToPush
isDelegateAccount
accountShouldContinue:
stateString
refreshCollections:withReason:
scheduleIdentifier
onBehalfOfBundleIdentifier
getDAAccount
saveXpcActivity:
trustHandler
serverTokenRegistrationURL
username
password
interfaceWentUp
interfaceWentDown
fetchInterval
pushDisabled
T@"DATrustHandler",R,N
_isEnabled
childAccountWithIdentifier:
monitorFoldersWithIDs:
_foundDuplicateCalendars:
fullRefresh
forcedRefresh
setAttachmentDownloadsByAttachmentUUID:
setCalendarAvailabilityRequests:
setDirectorySearches:
setGroupExpansions:
setShareResponses:
setGrantedDelegatesListRequests:
updateGrantedDelegatePermissionRequests
setUpdateGrantedDelegatePermissionRequests:
_validityCheckConsumer
_shouldRegisterWithRefreshManager
_safeToRefresh
_waitingForDiscoveryGatekeeper
_holdingDiscoveryGatekeeperLock
_forcedRefresh
_fullRefresh
_refreshReason
_lastRetryTimeout
_attachmentDownloadsByAttachmentUUID
_calendarAvailabilityRequests
_shareResponses
_directorySearches
_grantedDelegatesListRequests
_updateGrantedDelegatePermissionRequests
_groupExpansions
_optionsProbe
_optionsTimeoutTimer
_watchedCollections
_officeHoursRequests
T@"NSMutableDictionary",R,N,V_officeHoursRequests
T@"NSMutableSet",&,N,V_groupExpansions
T@"NSMutableDictionary",&,N,V_shareResponses
T@"NSMutableDictionary",&,N,V_directorySearches
T@"NSMutableArray",&,N,V_updateGrantedDelegatePermissionRequests
T@"NSMutableDictionary",&,N,V_grantedDelegatesListRequests
T@"NSMutableDictionary",&,N,V_calendarAvailabilityRequests
T@"NSMutableDictionary",&,N,V_attachmentDownloadsByAttachmentUUID
T@"CalDAVAgent",W,N,V_consumer
TB,N,V_safeToRefresh
TB,N,V_fullRefresh
TB,N,V_forcedRefresh
TB,N,V_shouldRegisterWithRefreshManager
Ti,N,V_refreshReason
T@"CoreDAVOptionsTask",&,N,V_optionsProbe
T@"NSTimer",&,N,V_optionsTimeoutTimer
updateGrantedDelegatePermission:consumer:
cancelUpdateGrantedDelegatePermissionRequestWithID:
Account "%@" is waiting for a password, so we're going to ignore this refresh request
Account doesn't have a principal URL. Running autodiscovery.
Account "%@" (%{public}@) is refreshing in response to a calendar database change
Registering %p for database change notifications
Calendar database changed. Refreshing account  "%@" (%{public}@)
Validation for account "%@" was cancelled, so we're not going to save the account properties we just discovered. Better luck next time.
Got a password from the user. Attempting autodiscovery again for "%@"
Account "%@" can't figure out its principalPath, and we couldn't get a password from the user 
Account "%@" can't figure out its principalPath. 
We'll refresh if we find a better network connection.
CalDAV has started monitoring for the account "%@"
reachability indicates that the network is reachable.  We're going to retry our folder sync.
The CalDAV agent was told to stop monitoring.
Unregistered %p for database change notifications
Refresh completed with this error: %@
We encountered a network error when refreshing. Scheduling a refresh for when the network reachability changes
Account "%@" was told to refresh its folder list
Account "%@" was told to sync the folders %@
Refreshing account "%@" because the days to sync setting changed
Stupid hack to keep %@ from getting released too early
Starting GetGrantedDelegatesTaskGroup: [%@]
[%@] finished with error %@
Home set is on a different host. Fetching new AppleAccount properties
Updated account properties are %@
Backing parent AppleAccount was %@saved successfully.
Error fetching AppleAccount properties: %@
The gatekeeper lock has been granted. Beginning save of attachment %@
Couldn't get an attachment to set our downloaded file on
Couldn't save attachment file in the database for attachment %@
Attachment has been saved. Releasing gatekeeper lock
DATransaction starting, ID: %@
Requesting gatekeeper lock to save attachment %@
The downloader's gatekeeper locks were aborted while it was waiting for a lock. Bummer.
Downloader %@ was told to save the attachment twice. Ignoring the second request
The attachment at %@ hasn't been modified since we last saw it.
Couldn't download the attachment at %@: %@
Finished downloading the file at %@. Saving to the database.
etag for attachment on the server is %@. Our etag is %@
Downloading attachment of size %lld
Acquired DBLock to download attachment.
Couldn't get a gatekeeper lock in order to download attachment.
We were told to download the attachment with UUID %@ but that attachment doesn't have a URL. We can't do anything
Refusing to download the attachment with URL %@ because it isn't http or https
Couldn't create a temporary file with the format %s
Downloading attachment at %@ to %@
Notifying consumers of progress: %lld/%lld
Done downloading attachment %@.%@%@
Stupid hack to get %@ retained
Starting new attachment download for consumer %p and attachment UUID %@
Cancelling new attachment download for consumer %p and attachment UUID %@
Cancelling All attachment downloads
Waiting on the gatekeeper before issuing a calendar availability request
Calendar scale unsupported: [%@].  Will not use iCalendar document in free/busy response: [%@]
No availability spans generated for component: [%@]
No attendee found on free/busy component [%@].  Will not save free/busy spans.
Free/busy window start date: [%@] end date: [%@].  Component: [%@]
No free/busy properties found.  Counting entire period as free.  Component: [%@]
No spans found in properties: [%@]
No spans generated.  The entire window from [%@] to [%@] will be counted as 'unknown.'
Period not valid.  Start: [%@]  End: [%@] Duration: [%@].  Property: [%@]
Could not generate start and end date for period: [%@].  Property: [%@]
The generated start date is after the generated end date.  Property: [%@]
The following principal indicates that free/busy is not supported, so no request will be sent: [%@]
Calendar availability (free/busy) task complete: [%@].  Error: [%@]
Starting calendar availability (free/busy) task: [%@]
Releasing gatekeeper lock
New-style search (%@) not supported.  Falling back to old-style search (%@).
Removing calendar directory search term because it is less than [%lu] characters in length: [%@]
Removing remaining calendar directory search term because it is less than [%lu] characters in length: [%@]
After filtering calendar directory search terms, none are left.  Will not proceed with search.
Starting calendar search task: [%@]
Calendar directory search terms are not legal.  Will not proceed with search.
Calendar search task complete: [%@].  Error: [%@]
Number of matches exceeded the limit of: [%lu]
Encountered result with displayName: [%@]
Unexpected parsing of calendar-user-address-set: %@
No href items found for calendar-user-address-set: [%@]
Found calendar user address: [%@]
Unable to parse user address: [%@]
Calendar user type: [%@]
Known calendar user type encountered but not handled: [%@]
Unrecognized calendar user type encountered during directory search: [%@]
Record type: [%@]
Unrecognized record type encountered during directory search: [%@]
Starting UpdateGrantedDelegatesTaskGroup: [%@]
Discovered principal path %@ from address %@
Calendar group expansion complete: [%@].  Error: [%@]
Done refreshing calendars. Saving the database
Delete task at %@ finished with error %@
Couldn't get an external id from the invite notification with uid %@
Couldn't find a sharing invite notification in the database with uid %@
Couldn't get a calendar store to delete the calendar sharing invitation from
Didn't send a delete for the sharing invitation with uid %@
Reply to shared calendar invitation task group %@ finished with error %@
Waiting on the gatekeeper before responding to a calendar share request
Sending shared calendar invite %@ for invite to "%@" of with uid %@ at URL %@
MobileCalDAVSharingResponse %p finished with error %@
MobileCalDAVDaemonAccount %p starting up.
MobileCalDAVDaemonAccount %p going away
Cancelling CalDAV refresh.
Cancel complete. Unregistering ourself as a gatekeeper waiter
Updating watched collections for %luu calendars
Push key for calendar "%@" is %@
Refresh complete. Releasing gatekeeper lock and notifying PersistentConnection
Notifying consumer about our refresh completion
Refusing to register for the topic "%@" because it has an invalid prefix.
The server returned precondition failure to our bulk upload. Retrying in a bit.
The server returned a 503 error and told us to try again in %f seconds
We'll retry again after %f seconds
We've already backed off for 7 minutes. Giving up and retrying again at our regularly scheduled time
Received a success response from server while account is not marked as authenticated. Set isAuthenticated flag and save account %@
Saving account properties to pick up on new subscribed calendars
Dropping search query "%@" because the agent is shut(ting) down.
Found event changes for account "%@" (%{public}@)
Found task changes for account "%@" (%{public}@)
Found alarm changes for account "%@" (%{public}@)
Found attendee changes for account "%@" (%{public}@)
Found attachment changes for account "%@" (%{public}@)
Found recurrence changes for account "%@" (%{public}@)
Found calendar changes for account "%@" (%{public}@)
Found notification changes for account "%@" (%{public}@)
Found sharee changes for account "%@"
Account Properties Need to Be Refreshed. Allowing Refresh to Continue..
[account %@] %@ Account Refresh as we %@ local DB changes or account properties need refresh
Gatekeeper gave us the goahead. Refreshing account %{public}@ with ID %@. Reason: %x
There's no need for us to refresh right now as there are no changes in our local database
Account "%@" (%{public}@) was told to refresh, but it is disabled for calendars. Refusing to refresh.
_refresh called for account %@. Forced:%d full:%d reason: %x
Refresh fired. Requesting lock from gatekeeper.
This account has been put in timeout by the babysitter. Failing this sync. %@
Dropping folder refresh request since a full sync is already in progress
Our gatekeeper locks were aborted while we were still waiting for a lock. What gives?
The options task timer fired, but the task manager is modal. We'll wait until it drops modal before tearing down this task.
We weren't able to reach the server at %@ within %lf seconds. Bailing out of this refresh early.
Already holding (or waiting for) a gatekeeper lock, so skipping this property discovery request
Ignoring probe request for "%@" as we're already in the middle of a refresh
Ignoring probe request for "%@" as we already have one outstanding
Probing the host at %@ to see if we have a good enough network connection. We'll wait up to %lf seconds.
Account "%@" (%{public}@) couldn't reach the server at %@: %@
We were able to reach the server at %@. Continuing with the refresh
Account "%@" (%{public}@) was told to refresh its collections with reason %d
Account "%@" (%{public}@) was told it is safe to refresh. Kicking off a refresh.
Account "%@" (%{public}@) is beginning to monitor these folders: %@
v8@?0
v24@?0q8@"NSError"16
MobileCalDAVGrantedDelegatesListRequest.m
Should be finished before we dealloc
v20@?0B8@"NSError"12
NOT 
CardDAViCloudDaemonAccount
com.apple.dataaccess.caldav.attachmentDownload
com.apple.dataaccess.caldav.attachmentDownload.%@
v20@?0q8B16
X-ANTICIPATED-CONTENT-LENGTH
http
DAAttachmentXXXXXX
 Error was: 
MobileCalDAVAttachmentSupport.m
You can't tell us to download an attachment without providing an attachment UUID
You can't download an attachment without setting a consumer
You must provide a download instance to cancel
Didn't find an attachment UUID in the download context
webdav.beta.facebook.com
MobileCalDAVCalendarAvailabilityRequest.m
startDate: [%@] endDate: [%@], ignoredEventID: [%@], addresses: [%@], consumer: [%p], account: [%p]
GREGORIAN
GROUP
INDIVIDUAL
RESOURCE
ROOM
UNKNOWN
MobileCalDAVDirectorySearch.m
terms: [%@], recordTypes: [%@] resultLimit: [%lu] consumer: [%p], account: [%p]
v24@?0@"NSString"8^B16
v24@?0@"NSString"8@"NSString"16
@"CoreDAVItem"12@?0i8
users
locations
groups
resources
v24@?0@"CoreDAVResponseItem"8^B16
MobileCalDAVUpdateGrantedDelegatePermissionRequest.m
v16@?0@"DACalDAVOfficeHoursRequest"8
@"CoreDAVTaskGroup"32@?0@"<CoreDAVAccountInfoProvider>"8@"NSURL"16^@24
v24@?0@"CoreDAVTaskGroup"8^@16
MobileCalDAVGroupExpansion.m
equals
anyof
test
MobileCalDAVSharingSupport.m
@"CoreDAVTaskGroup"16@?0^v8
accept
decline
You can't tell us to respond to a calendar share request without providing a calendar ID
You can't respond to a calendar share without setting a consumer
You must provide a share instance to cancel
com.me.
com.apple.calendar.
com.icloud.
CalDAVRefresh
retry-after
Starting
Blocking
have
do not have
calendars for 
CalDAVValidityCheck
CalDAVProbe
com.apple.dataaccess.caldav.ProbeComplete
success
host
@"NSDictionary"8@?0
DAAPSTokenURL
<rdar://problem/37173724>. Consumer class: [%@]
CalDAVAgent
DAPreferredDaysToSyncDidChangeObserver
DAValidityCheckConsumer
NSObject
GrantedDelegatesListSupport
CalendarAvailabilitySupport
MobileCalDAVGrantedDelegatesListRequest
MobileCalDAViCloudDaemonAccount
CalDAVGetToFileWithProgressTask
MobileCalDAVAttachmentDownloader
DADataclassLockWatcher
CoreDAVTaskDelegate
MobileCalDAVDownloadContext
AttachmentSupport
MobileCalDAVFacebookDaemonAccount
MobileCalDAVCalendarAvailabilityRequest
MobileCalDAVDirectorySearch
MobileCalDAVUpdateGrantedDelegatePermissionRequest
CalendarDirectorySearchSupport
OfficeHoursRequest
DACalDAVOfficeHoursRequest
GroupExpansionSupport
MobileCalDAVGroupExpansion
MobileCalDAVSharingResponse
CalDAVCalendarPropertyRefreshDelegate
CoreDAVTaskGroupDelegate
SharingSupport
MobileCalDAVDaemonAccount
DARefreshManagerDelegate
DABabysittable
UpdateGrantedDelegatePermissionSupport
v16@0:8
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v36@0:8@16B24@28
v36@0:8@"DAAccount"16B24@"NSError"28
@24@0:8@16
v24@0:8@?16
v24@0:8@16
v24@0:8B16B20
v36@0:8@16q24B32
@56@0:8@16@24@32@40@48
@28@0:8@16B24
@32@0:8@16@24
v32@0:8@16@24
@"<DAEventsGrantedDelegatesListResponseConsumer>"
@"MobileCalDAVDaemonAccount"
@"DACoreDAVTaskManager"
@"CalDAVGetGrantedDelegatesTaskGroup"
v20@0:8B16
v24@0:8q16
q16@0:8
@"NSString"
v40@0:8@16@24@32
@"MobileCalDAVAttachmentDownloader"
v32@0:8@"CoreDAVTask"16@"NSError"24
@"NSHashTable"
@"NSURL"
@"<DAEventsAttachmentDownloadConsumer>"
B24@0:8^v16
@64@0:8@16@24@32@40@48@56
@"NSDate"
@"NSArray"
@"<DAEventsCalendarAvailabilityResponseConsumer>"
@56@0:8@16@24Q32@40@48
@"NSSet"
@"<DAEventsCalendarDirectorySearchResponseConsumer>"
@40@0:8@16@24@32
@"DAEGrantedDelegate"
@"<DAEventsUpdateGrantedDelegatePermissionResponseConsumer>"
@"CalDAVUpdateGrantedDelegatesTaskGroup"
@48@0:8@16@24Q32@40
@32@0:8@16^@24
@40@0:8@16@24^@32
@40@0:8@16^@24@?32
v32@0:8@?16@?24
@"CoreDAVTaskGroup"
@"<DAEventsOfficeHoursRequestResponseConsumer>"
@"<DAEventsGroupExpansionResponseConsumer>"
@"NSMutableDictionary"
v32@0:8@"CoreDAVTaskGroup"16@"NSError"24
v64@0:8@16@24@32@40@48@56
B40@0:8@16@24@32
v64@0:8@"<CalDAVPrincipal>"16@"NSDictionary"24@"NSDictionary"32@"NSString"40@"NSSet"48@"NSError"56
B40@0:8@"<CalDAVPrincipal>"16@"<CalDAVCalendar>"24@"NSError"32
v24@0:8@"CalDAVContainer"16
v24@0:8@"NSURL"16
@32@0:8q16^v24
@24@0:8^v16
@"<DAEventsCalendarSharingResponseConsumer>"
@40@0:8@16q24@32
i24@0:8@16
i20@0:8i16
v28@0:8@16i24
v28@0:8@"NSSet"16i24
@"NSSet"16@0:8
@"DAAccount"16@0:8
v24@0:8@"NSObject<OS_xpc_object>"16
@"DATrustHandler"16@0:8
@"NSURL"16@0:8
v56@0:8@16@24@32B40B44@48
B32@0:8^v16^?24
v20@0:8i16
i16@0:8
@"CalDAVAgent"
@"<DAValidityCheckConsumer>"
@"NSMutableArray"
@"NSMutableSet"
@"CoreDAVOptionsTask"
@"NSTimer"
