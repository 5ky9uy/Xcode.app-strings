?33333
date
timeIntervalSinceDate:
expirationDate
init
_initPrivate
location
locationKeyHash
stringWithFormat:
cStringUsingEncoding:
forecastMediatorObserverQueue
forecastMediatorObservers
count
currentWeatherConditions
hourlyForecasts
dailyForecasts
containsObject:
addObject:
setUpdatable:
_locked_recalculateDesiredForecasts
removeObject:
forecastsLock
lock
copy
countByEnumeratingWithState:objects:count:
unlock
currentAirQualityConditions
forecastTypesDesired
enumerateByType:usingBlock:
forecastTypesInterestMask
setForecastTypesDesired:
decodeObjectOfClass:forKey:
initWithLocation:andLock:
setWithObjects:
updateToken
decodeIntegerForKey:
lastUpdateDate
decodeObjectOfClasses:forKey:
encodeObject:forKey:
encodeInteger:forKey:
nwk_bufferedExpirationDateWithDownloadDate:
distantPast
earlierDate:
distantFuture
isDateWithinBounds:givenConditions:forForecastType:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
description
addForecastMediatorObserver:
removeForecastMediatorObserver:
performActionOnEachMediatorObserverWhileForecastLocked:
performActionWhileForecastLocked:
recalculateDesiredForecasts
maskOfDesiredForecastsPresent
forecastExpirationDate
mediatorCount
isObserverFree
isUpdatable
.cxx_destruct
correspondsToLocalLocation
setCorrespondsToLocalLocation:
setForecastsLock:
setUpdateToken:
setLastUpdateDate:
setCurrentWeatherConditions:
setCurrentAirQualityConditions:
setHourlyForecasts:
setDailyForecasts:
isUpdating
setUpdating:
setForecastMediatorObservers:
setForecastMediatorObserverQueue:
_correspondsToLocalLocation
_updating
_updatable
_location
_forecastsLock
_updateToken
_lastUpdateDate
_currentWeatherConditions
_currentAirQualityConditions
_hourlyForecasts
_dailyForecasts
_forecastMediatorObservers
_forecastMediatorObserverQueue
_forecastTypesDesired
allKeys
setWithArray:
intersectsSet:
objectForKeyedSubscript:
doubleValue
initWithLatitude:longitude:
setGeoLocation:
setCity:
city
setDisplayName:
setWeatherDisplayName:
timeZoneWithName:
setTimeZone:
setCountry:
setCountryAbbreviation:
setCreationDate:
geoLocation
coordinate
displayName
numberWithDouble:
timeZone
name
dictionaryWithObjectsAndKeys:
country
setObject:forKeyedSubscript:
countryAbbreviation
creationDate
initWithNanoWeatherUserCityPrefsDictionaryRepresentation:
nanoWeatherCityPrefsDictionaryRepresentation
stringWithString:
appendFormat:
locationObserverInterface
setRemoteObjectInterface:
locationServerInterface
setExportedInterface:
setExportedObject:
connection
processIdentifier
remoteObjectProxy
locationServerUpdatedLocation:updatedDisplayName:
locationServerUpdatedLocation:updatedTimeZone:
locationServerUpdatedStaticLocations:
locationServerUpdatedSelectedLocation:
locationServerUpdatedLocalLocation:
locationKey
locationMediatorSource
addLocationToList:
refreshLocalLocation
removeLocationFromList:
sharedServer
addAppStateMonitorForConnection:
startObserving:monitorLocation:sendingImmediateUpdate:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
startObservingWithTrackedLocationSensitivity:andObserveInForegroundOnly:
locationManager:updateLocation:updatedDisplayName:
locationManager:updateLocation:updatedTimeZone:
locationManager:updateStaticLocations:
locationManager:setSelectedLocation:
locationManager:setLocalLocation:
initWithConnection:locationMediatorSource:
setLocationMediatorSource:
_connection
_locationMediatorSource
_activeCount
performIfIdleAfterDelay:onQueue:block:
routineForecastObserverInterface
routineForecastServerInterface
lastUpdateToken
routineForecast:
setLastUpdateToken:
mediatorSource
monitorRoutineForecastWithInterval:
routineManager:updatedRoutineForecast:
monitorRoutineForecastWithInterval:lastUpdateToken:
initWithConnection:mediatorSource:
setMediatorSource:
_mediatorSource
_lastUpdateToken
jsonFileURLFromBaseName:
_addStateHandler
delegate
gatherDiagnostics
dataWithPropertyList:format:options:error:
length
bytes
initWithDelegate:
setDelegate:
_delegate
interval
errorCount
initWithInterval:
lastCalculatedForecast
setLastCalculatedForecast:
setErrorCount:
_interval
_lastCalculatedForecast
_errorCount
initWithConnection:locationManager:forecastManager:
setMaxConcurrentOperationCount:
operationCount
addObserver:forKeyPath:options:context:
_registerForDebugRoutineUpdateIntervalPrefNotification
_readDebugRoutineUpdateIntervalPref
_checkinForMonitoredRoutine
removeObserver:forKeyPath:context:
dealloc
monitoredRoutineLock
monitoredRoutine
sharedCache
writeObject:toFileWithFileName:inCacheSubdirectory:completion:
deleteFileWithFileName:inCacheSubdirectory:completion:
standardUserDefaults
objectForKey:
initForReadingFromData:error:
finishDecoding
removeObjectForKey:
synchronize
_cacheCurrentlyMonitoredRoutine:
readDataFromFileWithFileName:inCacheSubdirectory:error:
_loadCachedCurrentlyMonitoredRoutine
setMonitoredRoutine:
_startMonitoringRoutineForecastForInterval:
_locked_startRoutineForecastUpdateForMonitoredRoutine:
setMonitoredRoutineScheduled:
isCancelled
error
_handleOperationCompletionForOperation:
setCompletionBlock:
routineForecastOperationQueue
addOperation:
_locked_scheduleRetryForFailedOperation:
routineForecast
_locked_stopOngoingQueueOperations
_locked_descheduleMonitoredRoutine
operations
cancel
routineUpdateInterval
_updateInterval
retryOperationFromFailedOperation:
_locked_enqueueRoutineForecastOperation:
_locked_stopMonitoringRoutineForecast
isMonitoredRoutineScheduled
timeIntervalSinceNow
_locked_scheduleMonitoredRoutine:delay:
createdDate
forecastManager
locationManager
routineManager
initWithInterval:connection:forecastManager:locationManager:routineManager:locationCache:
isMonitoringLocalLocation
addObserver:sendInitialUpdate:
setMonitoringLocalLocation:
observers
_notifyObserver:ofUpdatedRoutineForecast:
_notifyObserversWithSynchronizedBlock:
addObserver:
removeObserver:
acceptConnection:onDisconnect:
entryDate
exitDate
forecastsForRoutineLocations
interestingHourlyForecastedConditions
dictionaryWithObjects:forKeys:count:
_notifyObserversOfUpdatedRoutineForecast:
startDate
endDate
initWithEntryDate:exitDate:
nwk_hasBeenReverseGeocoded
selectedLocation
setSelectedLocation:
distanceFromLocation:
isSelectedLocationSetToLocalLocationKey
locationCache
dictionary
setLocationCache:
isEqualToString:
unsignedIntegerValue
transaction
setTransaction:
defaultCenter
_reloadDebugRoutineUpdateIntervalPref
addObserver:selector:name:object:
initWithSuiteName:
doubleForKey:
setRoutineUpdateInterval:
cacheLocation:forCoreLocation:
locationForCoreLocation:
listener:shouldAcceptNewConnection:
_forecastFromMonitoredRoutineForecast
observeValueForKeyPath:ofObject:change:context:
setForecastManager:
setLocationManager:
setRoutineManager:
setRoutineForecastOperationQueue:
setObservers:
setMonitoredRoutineLock:
_monitoredRoutineScheduled
_monitoringLocalLocation
_forecastManager
_locationManager
_routineManager
_locationCache
_routineForecastOperationQueue
_observers
_monitoredRoutine
_monitoredRoutineLock
_routineUpdateInterval
_selectedLocation
_transaction
setWithObject:
setLocation:
makeObjectsPerformSelector:withObject:
cacheFileNameForLocation:
forecastContainerFromData:error:
filesInCacheSubdirectory:error:
lastPathComponent
valueForKeyPath:
flushToDisk
clearForecastContainersFromDiskCacheForLocationKeyHashes:
forecastContainerFromDiskCacheFor:
forecastContainerLocationKeyHashesFromDiskCache
initWithLocationDictionary:forecastDataBlob:
locationDictionary
forecastDataBlob
_locationDictionary
_forecastDataBlob
boolValue
arrayWithCapacity:
UUIDString
defaultTimeZone
numberWithInt:
errorWithDomain:code:userInfo:
dataWithContentsOfURL:options:error:
_dataFromFile:withError:
JSONObjectWithData:options:error:
demoForecastDictionary
dataWithJSONObject:options:error:
firstObject
arrayWithObjects:count:
initWithCapacity:
dataLoader
enumerateObjectsUsingBlock:
demoLocationDictionary
_formattedLocationDictionariesFromLocationDictionaries:
_jsonFromFile:withError:
shouldUseSingleStaticLocation
initWithTemperatureUnit:value:
setValue:forComponent:
nwkDateComponentsForDate:
dateByAddingTimeInterval:
setHour:
setMinute:
setSecond:
setDay:
currentCalendar
dateByAddingComponents:toDate:options:
UUID
forecastContainers
initWithDataLoader:options:
loadForecastDataForLocationDictionaries:completion:
loadLocationPreferences:
loadForecastManagerWithKeynoteDemoData:
shouldLoadKeynoteDemoData
setDataLoader:
shouldAllowNetworkConnections
setAllowNetworkConnections:
shouldBypassCache
setBypassCache:
shouldIgnoreValidFullForecastCheck
setIgnoreValidFullForecastCheck:
shouldUseLookasideForecastCache
setUseLookasideForecastCache:
setUseSingleStaticLocation:
setDemoLocationDictionary:
setDemoForecastDictionary:
_allowNetworkConnections
_bypassCache
_ignoreValidFullForecastCheck
_useLookasideForecastCache
_useSingleStaticLocation
_dataLoader
_demoLocationDictionary
_demoForecastDictionary
interfaceLock
operationState
setForecastTypesMask:
setClientInterface:
setOperationState:
_locked_forecastUpdate
forecastTypesMask
forecastLocation
_locked_notifyObserverOfUpdatingState:
setLastError:
setCurrentConditions:
initWithArray:copyItems:
shouldQueryForAirQualityData
setCurrentAirQuality:
currentLocale
initWithLocation:locale:completionHandler:
enqueueRequest:
setTodayAirQualityRequest:
initWithLocation:date:completionHandler:
setTrackingParameter:
setNowForecastRequest:
initWithLocation:completionHandler:
setDailyForecastRequest:
setHourlyForecastRequest:
null
lastError
userInfo
clientInterface
forecastRequestCompleteStartTime:withError:
didChangeUpdatingStatus:error:
initWithLocation:forecastTypesMask:connection:clientSourceInterface:
tryChangingInterestMaskTo:
main
setForecastLocation:
currentConditions
currentAirQuality
setConnection:
nowForecastRequest
hourlyForecastRequest
dailyForecastRequest
todayAirQualityRequest
setInterfaceLock:
_forecastLocation
_forecastTypesMask
_lastError
_operationState
_currentConditions
_currentAirQuality
_nowForecastRequest
_hourlyForecastRequest
_dailyForecastRequest
_todayAirQualityRequest
_clientInterface
_interfaceLock
valueForComponent:
calendar
isDate:inSameDayAsDate:
nwk_sanitizeDateComponents
makeObjectsPerformSelector:
setAndSanitizeCurrentWeatherConditions:hourlyForecasts:dailyForecasts:currentAirQuality:
componentsJoinedByString:
populateHighLowsAndSanitize
nwk_ensureFutureExpirationDate
populateWithResponseFromOperation:
arrayWithObject:
persistedCompanionLocations
setPersistedCompanionLocations:
setCompanionLocations:
safelyUpdateCompanionLocations:
companionLocations
companionSelectedLocationIdentifier
_persistedCompanionLocations
latitude
longitude
preferredName
generateCLLocationRepresentation
generateWFLocationRepresentation
cache
locations
setLocations:
forecastMediatorObserver
_routineLocations
_reverseGeocodeRoutineLocations:
_fetchForecastDataForRoutineLocations:
setRoutineForecast:
start
confidence
nextEntryTime
locationOfInterest
fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withHandler:
fetchPredictedExitDatesFromLocation:onDate:withHandler:
compare:
localLocation
initWithLocation:entryDate:exitDate:
_predictedExitDateFromLocation:onDate:
_sync_locationOfInterestFromLocation:afterDate:handler:
isOnVacation
isInAirplaneMode
allObjects
routineMode
localizedDescription
fetchRoutineModeFromLocation:withHandler:
radiosPreferences
setRadiosPreferences:
airplaneMode
indexOfObjectPassingTest:
airQualityConditions
objectAtIndexedSubscript:
enumerateKeysAndObjectsUsingBlock:
setError:
initWithForecastsForRoutineLocations:currentRoutineLocation:
initWithForecastManager:
startForecastUpdatesForLocations:observedBlock:
setForecastMediatorObserver:
cleanup
initWithLocationList:connection:resultHandler:
setReverseGeocoderForLocations:
reverseGeocoderForLocations
setUseAutomaticRetryTimer:
startProcess
setInterval:
setRoutineMode:
_routineForecast
_locations
_error
_cache
_reverseGeocoderForLocations
_forecastMediatorObserver
_routineMode
_radiosPreferences
dateWithTimeIntervalSince1970:
parsedForecastModelFromData:forLocation:date:
setUpdater:
calendarWithIdentifier:
populateForecastsWithLocationForecastDataBlobs:
setCalendar:
updater
_calendar
_updater
identifier
gracePeriod
clientDispatchQueue
setActivityCriteria:
handler
invalidate
activityCriteria
initWithIdentifier:withDispatchQueue:withGracePeriod:onHandler:
scheduleTimerWithTimeInterval:
checkin
setGracePeriod:
isValid
setHandler:
setIdentifier:
setClientDispatchQueue:
_valid
_gracePeriod
_handler
_identifier
_activityCriteria
_clientDispatchQueue
initWithFormat:
UTF8String
initWithTimerIntervalGraph:numEntries:
taskQueue
locked_currentRequestOperation
taskShutdownState
_locked_clearStopUpdateDelayTimer
setTaskShutdownState:
taskState
setTaskState:
_locked_tryUpdateOrTimerAsNeeded
_locked_setStopUpdateDelayTimer
_locked_setNewForecastTypes:forceAirQuality:
baseForecastTypes
setCurrentForecastTypes:
forcedForecastTypes
setForcedForecastTypes:
setBaseForecastTypes:
currentForecastTypes
requestScheduler
errorTimeoutProgression
advanceSelectedInterval
scheduleForecastRequestTaskForLocation:forecastTypes:delay:taskInfo:activityHandler:
forecastRequestQueue
setLocked_currentRequestOperation:
logDurationOfRequestWithStart:
resetSelectedInterval
task:processResponseFromOperation:
calculateNextUpdateDateForTask:
setNextTimeToUpdate:
_locked_shutdownIfWaiting
task:isUpdating:error:
stopUpdateDelayTimer
setStopUpdateDelayTimer:
scheduleTimerWithTimeInterval:queue:handler:
currentInterval
nextTimeToUpdate
_locked_setUpdateTimerForDelay:
_locked_isRequestInProcess
shutdownTask:
initWithLocation:forecastTypesDesired:forecastExpiration:connection:operationQueue:onScheduler:
hasCurrentRequestOperation
forceUpdateOrTimerAsNeeded:
stopUpdates
didChangeForecastTypesDesired:
didChangeForecastLocationDetails:
setForecastRequestQueue:
setRequestScheduler:
setErrorTimeoutProgression:
setTaskQueue:
taskQueueName
setTaskQueueName:
_forecastRequestQueue
_requestScheduler
_locked_currentRequestOperation
_nextTimeToUpdate
_baseForecastTypes
_currentForecastTypes
_forcedForecastTypes
_stopUpdateDelayTimer
_errorTimeoutProgression
_taskQueue
_taskQueueName
_taskState
_taskShutdownState
initWithMediatorInterface:remoteObserver:
forecastObserverInterface
forecastServerInterface
setInvalidationHandler:
remoteObserver
connectionDescriptionsSetup
sourceIntfce
lockForecastsLock
responseAction
setResponseAction:
arrayByAddingObjectsFromArray:
shouldAcknowledgeUpdatesStarted
connectionAcknowledgedForBulkUpdateOfLocations:
updateTokens
setUpdateTokens:
addEntriesFromDictionary:
setWithCapacity:
setPendingForecastUpdateForLocations:
pendingForecastUpdateForLocations
connectionDescription
connectionDescriptionPrivate
locked_enableForecastUpdatesFor:atLocations:startUpdates:
unlockForecastsLock
setAcknowledgeUpdatesStarted:
_setupLocationsForUpdates:updateTokens:responseAction:startUpdates:
locationID
numberWithUnsignedInteger:
setSnapshotOnSingleForecastUpdates:
setDoDelayedInvalidateForSnapshotCompletion:
locked_disableForecastUpdatesFor:atLocations:
locked_didUpdateForecastTypesInterestMaskForMediator:atLocations:
_locked_snapshotDidUpdateForecast:matchingUpdateToken:withTypes:
_locked_clientUpdateDidUpdateForecast:matchingUpdateToken:withTypes:
location:isUpdating:error:
isolateForTest
wouldScheduleSnapshotContextForCities:
scheduleSnapshotContextForUpdatedForecastForLocationKeysAndForecastTokens:
doDelayedInvalidateForSnapshotCompletion
didDelayedInvalidateForSnapshotCompletion
wouldCallRemoteProxyWithLocation:token:updatedAt:current:hourly:daily:airQuality:
location:token:updatedAt:current:hourly:daily:airQuality:
shouldSnapshotOnSingleForecastUpdates
scheduleSnapshotContextForUpdatedForecastForLocationKey:forecastToken:
isEqualToArray:
setConnectionDescription:
setLocationsForUpdates:
setForecastTypes:
setLocationForCachedUpdates:lastUpdate:
setLocationForUpdates:forecastTypes:lastUpdate:onlyObserveInForegroundOnly:
setupSnapshotForLocations:onlyObserveInForegroundOnly:
locked_didUpdateForecast:withTypes:
locked_didChangeUpdatingStatus:forLocation:error:
setForecastTypesInterestMask:
initWithMediatorInterface:connection:
setRemoteObserver:
setSourceIntfce:
setIsolateForTest:
setConnectionDescriptionPrivate:
_forecastTypesInterestMask
_connectionDescription
_isolateForTest
_doDelayedInvalidateForSnapshotCompletion
_snapshotOnSingleForecastUpdates
_acknowledgeUpdatesStarted
_updateTokens
_pendingForecastUpdateForLocations
_remoteObserver
_sourceIntfce
_responseAction
_connectionDescriptionPrivate
_setSnapshotContextWithStaleDate:updateContextUserInfo:
updateSnapshotContextUserInfoBlockForLocationKey:updatedForecastToken:
updateSnapshotContextUserInfoBlockForLocationKeysAndForecastTokens:
updateSnapshotContextUserInfoBlockForLocalLocationUpdate
updateSnapshotContextUserInfoBlockForSelectedLocationUpdate:
updateSnapshotContextUserInfoBlockForStaticLocationListUpdate
mutableCopy
sharedInstance
snapshotContextWithStaleDate:userInfo:atGlanceableUI:
setSnapshotContext:forBundleID:
snapshotContextForBundleID:completion:
invalidateSnapshotContext
scheduleSnapshotContextForUpdatedLocalLocation
scheduleSnapshotContextForUpdatedSelectedLocation:
scheduleSnapshotContextForUpdatedStaticLocationList
locationKeyHashString
diskQueue
_cacheSubdirectoryURL:error:
_cacheFile:inSubdirectoryURL:
defaultManager
removeItemAtURL:error:
path
_enumerateCacheItemsInCacheDirectory:block:
_filesInCacheSubdirectory:error:
_readDataFromFileWithFileName:inCacheSubdirectory:error:
dataWithContentsOfURL:
_writeData:toFileWithFileName:inCacheSubdirectory:completion:
archivedDataWithRootObject:requiringSecureCoding:error:
URLForDirectory:inDomain:appropriateForURL:create:error:
URLByAppendingPathComponent:isDirectory:
URLByAppendingPathComponent:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
_cacheDirectoryURL:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
_cacheItemsInCacheDirectory:error:
writeToFile:atomically:
deleteFilesInCacheSubdirectory:completion:
filesInCacheSubdirectory:completion:
readDataFromFileWithFileName:inCacheSubdirectory:completion:
readDataFromFilesInCacheSubdirectory:dataHandler:completion:
writeData:toFileWithFileName:inCacheSubdirectory:completion:
setDiskQueue:
_diskQueue
remoteObjectInterface
nwd_reason
nwd_transactionDescription
alloc
initPrivate
initWithObject:
dictionaryWithCapacity:
_invalidatedConnection:transaction:
_connectionsChanged
synchronized:
resume
_remoteBundleIdentifierForConnection:
interestedBundleIDs
updateInterestedBundleIDs:states:
initWithBundleIDs:states:
unsignedIntValue
_invalidateAllMonitoredConnectionsForWrappedPID:
_locked_addMonitoredConnection:
removeAllObjects
countForObject:
_locked_removeMonitoredConnection:
cleanupIfUnconnectedAfterInterval:
applicationInfoForPID:completion:
addCleanupHandlerForKey:handler:
_appStateMonitor
_appStateMonitorQueue
_monitoredConnections
_connections
_cleanupHandlers
_connectionGuard
_idlePIDCondition
nwk_updateDisplayNameInformationFromLocation:
locked_updateForecastLocationWithGeocodeDataFromLocation:
timeZoneUpdateDate
setObject:forKey:
setTimeZoneUpdateDate:
setArray:
reverseGeoLock
_locked_stopProcess
_locked_startProcess
pendingRequests
_locked_handleGeocodeRequestResponse:error:
initWithCoordinate:resultHandler:
code
nwk_locationKeyTestForLocationKey:
setObject:atIndexedSubscript:
locationsProcessed
setLocationsProcessed:
handlerBlock
_locked_callHandlerBlockAsyncWithLocations:andError:
useAutomaticRetryTimer
currentIntervalIndex
_locked_scheduleRetryGeocodingTimer:
retryGeocodingTimer
_locked_invalidateRetryGeocodingTimer
dateWithTimeIntervalSinceNow:
_locked_startGeocodeRequestForLocation:locationKey:
objectEnumerator
initWithLocation:connection:resultHandler:
initWithCoordinate:connection:resultHandler:
stopProcess
setHandlerBlock:
setPendingRequests:
setRetryGeocodingTimer:
setReverseGeoLock:
_locationsProcessed
_useAutomaticRetryTimer
_handlerBlock
_pendingRequests
_retryGeocodingTimer
_reverseGeoLock
initWithConnection:managerInterface:
indexOfObject:
removeObjectAtIndex:
_locked_retrieveForecastContainerForLocation:createIfNoForecastContainer:
_locked_isForecastInContainer:validForForecastTypes:
lookasideForecastContainers
lookaside_updateForecastTypesDesired:
_locked_setForecastContainerActive:withListener:
forecastRequestScheduler
forecastManagerLocked_updateForecastTypesDesired:forLocation:
forecastManagerLocked_beginWindDownOfUpdatesForLocation:
nwk_isNotGeocodedButNewlocationIsGeocoded:
nwk_doesNotHaveCountryAbbreviationButNewLocationDoes:
forecastManagerLocked_updateAirQualityEligibilityForLocation:
shouldAvoidNetworkRequests
forecastManagerLocked_setupForecastRequestTaskForLocation:forecastTypesDesired:forecastExpiration:shouldForceUpdate:
currentDate
allValues
predicateWithFormat:
filteredArrayUsingPredicate:
cachedScheduledForecastRequestLocationCount
_locked_disableForecastUpdatesForMediator:atLocation:
locked_enableForecastUpdatesFor:atLocation:startUpdates:
locked_forecastContainerForLocation:
diskCacheMaintenanceIdleCondition
removeLocation:fromLocationKeyHashesToDeleteFromDiskCache:
staticLocations
setLocalLocation:
checkinStaticLocations:
setStaticLocations:
locked_cacheForecastContainerForLocationToDisk:
locked_clearForecastContainerForLocationFromInMemoryCache:
initWithConnection:preferences:
retrieveForecastContainerForLocation:createIfNoForecastContainer:
setForecastContainers:
setLookasideForecastContainers:
setForecastRequestScheduler:
preferences
setPreferences:
setAvoidNetworkRequests:
setDiskCacheMaintenanceIdleCondition:
_avoidNetworkRequests
_forecastContainers
_lookasideForecastContainers
_forecastRequestScheduler
_preferences
_diskCacheMaintenanceIdleCondition
_localLocation
_staticLocations
_timeZoneUpdateTimerFired
currentState
_updateLocationsTimeZones
reverseGeocoder
timeZoneUpdateTimer
setCurrentState:
stopMonitoringTimeZoneChanges
_updateLocationsWithGeocodeResults:doUpdateListener:
_updateTimeZoneForLocations:
_setTimeZoneTimerForOldestDate:
_startReverseGeocodeForLocations:
serviceConnection
setReverseGeocoder:
clientListening
timeZoneMonitor:updatedLocationsWithTimeZones:
initWithClientInterface:serviceConnection:andPreferences:
startMonitoringTimeZoneChanges
gleanFromNewlyUpdatedLocationList:
setClientListening:
setTimeZoneUpdateTimer:
_clientListening
_currentState
_timeZoneUpdateTimer
_reverseGeocoder
_serviceConnection
defaultWorkspace
applicationProxyForIdentifier:
appState
isInstalled
stopObservingAppInstallation
defaultAppWorkspace
applicationIdentifier
setInstallState:
actionOnInstall
actionOnUninstall
_weatherApplicationStateDidChange:forApplicationProxies:
sharedWorkspaceObserver
applicationInstallsDidStart:
applicationInstallsDidChange:
applicationInstallsDidUpdateIcon:
applicationsWillInstall:
applicationsDidInstall:
pluginsDidInstall:
applicationsDidFailToInstall:
applicationsWillUninstall:
pluginsWillUninstall:
applicationsDidUninstall:
pluginsDidUninstall:
applicationsDidFailToUninstall:
applicationInstallsArePrioritized:arePaused:
applicationInstallsDidPause:
applicationInstallsDidResume:
applicationInstallsDidCancel:
applicationInstallsDidPrioritize:
applicationStateDidChange:
applicationIconDidChange:
networkUsageChanged:
observeLaunchProhibitedApps
deviceManagementPolicyDidChange:
startObservingAppInstallation
setActionOnUninstall:
setActionOnInstall:
installState
setDefaultAppWorkspace:
_actionOnUninstall
_actionOnInstall
_installState
_defaultAppWorkspace
initWithFormat:arguments:
setCurrentIntervalIndex:
intervalProgression
lastObject
progressionCompleted
setIntervalProgression:
_currentIntervalIndex
_intervalProgression
xpcActivityIdentifier
types
initWithLocation:types:
setTypes:
_types
_loadDefaultsCachedScheduledForecastRequestMetadatas
_loadDefaultsCachedScheduledForecastRequests
_loadDiskCachedScheduledForecastRequests:
_loadDiskCachedScheduledForecastRequestLocation:error:
_loadDiskCachedScheduledForecastRequestMetadata:error:
_loadCachedScheduledForecastRequestMetadatas:
nwk_isLocalLocation
forecastManagerLocked_descheduleForecastRequestTaskForLocation:
_checkinForScheduledForecastRequestForLocation:forecastTypes:
sourceManagerInterface
_forecastManagerLocked_removeCachedScheduledForecastRequestForLocation:
connectionStatusQueue
setConnectionStatus:
forecastRequestTasks
addOperationWithBlock:
connectionStatus
stringWithUTF8String:
_cacheScheduledForecastRequestForLocation:forecastTypes:
forecastManagerLocked_removeForecastRequestTaskForLocation:
postNotificationName:object:userInfo:options:
connectionStatusDidChange:
wifiSignalStrengthBarsDidChange:
registrationStatusDidChange:
cellularSignalStrengthBarsDidChange:
lastKnownCountryCodeDidChange:
simActiveDidChange:
forecastManagerLocked_isLocationFreeOfActiveTasks:
setForecastRequestTasks:
setSourceManagerInterface:
setConnectionStatusQueue:
_forecastRequestTasks
_sourceManagerInterface
_connectionStatus
_connectionStatusQueue
_rollForecastTimestamps
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
_rollForecastTimestampsForContainer:calendar:now:
_pushConditionsTimes:outWithInterval:now:calendar:shouldMaintainHour:
sortedArrayUsingComparator:
array
nwk_safeAddObject:
nwk_safeAddObjectsFromArray:
components:fromDate:
component:fromDate:
timer
setTimer:
_timer
initWithLoader:
_selectedLocationIdentifier
initWithEffectiveBundleIdentifier:delegate:onQueue:
setDesiredAccuracy:
coreLocationAuthorizationStatus
_requestLocationAuthorizationIfNecessaryAndAppIsInstalled
_checkinForActivities
localLocationTimestamp
isPendingLocalLocationUpdateScheduled
isLocationChangeMonitoringOn
isLocationPollingScheduled
setLocalLocationTimestamp:
setLocalLocationErrorTimestamp:
_requestLocation
isLocationMonitoringAllowed
_shouldPollCurrentLocation
areAnyClientsConnected
_invalidateRefreshLocalLocationTimer
_stopMonitoringLocationChanges
_startPollingLocationChanges
coreLocationManager
_updateLocalLocationWithCoreLocation:
_startMonitoringLocationChanges
setState:
setStateAbbreviation:
_startReverseGeocodeForCurrentLocation:
_updateLocalLocationWithLocation:
_logLocationAuthorizationStateByAGGD:
setCoreLocationAuthorizationStatus:
_clearLocalLocationAndStopMonitoring
refreshMonitoringState
setPendingUpdateLocalLocation:
_scheduleTrailingLocationUpdate
setPendingLocalLocationUpdateScheduled:
requestLocation
requestWhenInUseAuthorization
significantLocationChangeMonitoringAvailable
_startMonitoringSignificantLocationChangesOfDistance:withPowerBudget:
setLocationChangeMonitoring:
stopMonitoringSignificantLocationChanges
setLocationPollingScheduled:
_scheduleRefreshLocalLocationTimerWithDelay:
localLocationErrorTimestamp
laterDate:
_scheduleRefreshLocalLocationTimerIfAuthorizedWithDelay:
pendingUpdateLocalLocation
_processLocationUpdate:
_loadCachedPendingUpdatedLocation
reverseGeocoderForCurrentLocation
setReverseGeocoderForCurrentLocation:
setReverseGeocoderIdentifier:
reverseGeocoderIdentifier
_handleGeocodeRequestResponse:error:
staticLocationNearLocation:
setLocationID:
manager:didUpdateLocalLocation:fromLocation:
_processAuthorizationStatusUpdate:
reverseObjectEnumerator
horizontalAccuracy
_cachePendingUpdatedLocation:
locationManager:didUpdateToLocation:fromLocation:
locationManager:didUpdateLocations:
locationManager:didUpdateHeading:
locationManagerShouldDisplayHeadingCalibration:
locationManager:didDetermineState:forRegion:
locationManager:didRangeBeacons:inRegion:
locationManager:rangingBeaconsDidFailForRegion:withError:
locationManager:didRangeBeacons:satisfyingConstraint:
locationManager:didFailRangingBeaconsForConstraint:error:
locationManager:didEnterRegion:
locationManager:didExitRegion:
locationManager:didFailWithError:
locationManager:monitoringDidFailForRegion:withError:
locationManager:didChangeAuthorizationStatus:
locationManager:didStartMonitoringForRegion:
locationManagerDidPauseLocationUpdates:
locationManagerDidResumeLocationUpdates:
locationManager:didFinishDeferredUpdatesWithError:
locationManager:didVisit:
reloadLocalLocationGeocodeData
_processTrailingLocationUpdate:
isCoreLocationAuthorized
_pendingLocalLocationUpdateScheduled
_locationChangeMonitoring
_locationPollingScheduled
_coreLocationAuthorizationStatus
_coreLocationManager
_pendingUpdateLocalLocation
_localLocationTimestamp
_localLocationErrorTimestamp
_reverseGeocoderForCurrentLocation
_reverseGeocoderIdentifier
localeIdentifier
setCurrentLocaleIdentifier:
_loadFromPreferences
_registerObservers
_deregisterObservers
_localeDidUpdate:
_weatherPreferencesDidUpdate:
_loadStaticLocationsFromPreferences
_loadSelectedLocation
_logUserSelectedCityPreferenceByAGGD
localLocationManager
setSelectedLocationSetToLocalLocationKey:
_convertDictionaries:
_convertLocations:
timeZoneMonitor
_replaceStaticListNotifyClients:
_locationKeysInStaticLocations
_loadStaticLocationsFromPreferencesResetTimezoneMonitor:
_startReverseGeocodeForStaticList
isEqualToSet:
_notifyListObserversOfUpdatedLocation:previousLocation:
_notifyListObserverOfSetLocalLocation:
_notifyListObserversWithSynchronizedBlock:
_notifyListObserverOfSetSelectedLocation:
_notifyListObserver:ofUpdatedLocation:previousLocation:
isEqualToTimeZone:
_notifyListObserverOfUpdatedLocations:
setReverseGeocoderForList:
_addNewObserver:
invalidateCache
currentLocaleIdentifier
objectsPassingTest:
shouldDisableLocationMonitoring
_notifyListObserversOfSetLocalLocation
_notifyListObserversOfSetSelectedLocation
_notifyListObserversOfUpdatedLocations
_removeAllObservers
setLocalLocationManager:
reverseGeocoderForList
setTimeZoneMonitor:
setDisableLocationMonitoring:
_selectedLocationSetToLocalLocationKey
_disableLocationMonitoring
_companionLocations
_currentLocaleIdentifier
_localLocationManager
_reverseGeocoderForList
_timeZoneMonitor
stringByAppendingPathComponent:
fileURLWithPath:
stringByAppendingPathExtension:
fileURLWithPath:relativeToURL:
mainRunLoop
runMode:beforeDate:
forecastMediator
setForecastMediator:
setForecastsObservedBlock:
forecastsObservedQueue
_cleanup
forecastsObservedBlock
setCurrentlyMonitoredLocationKeys:
forecastGroup
currentlyMonitoredLocationKeys
observedForecasts
initWithLocation:token:updatedAt:currentConditions:airQualityConditions:hourlyConditions:dailyConditions:
setForecastGroup:
setObservedForecasts:
setForecastsObservedQueue:
_forecastMediator
_forecastGroup
_currentlyMonitoredLocationKeys
_observedForecasts
_forecastsObservedQueue
_forecastsObservedBlock
cacheClass
stringForKey:
fileExistsAtPath:
initWithFileAtPath:
open
JSONObjectWithStream:options:error:
store
setLocationGeocodeForCoordinateRequestStartingCallback:
locationObserverServiceName
_startObserverService:delegate:
setLocationObserverListener:
forecastObserverServiceName
setForecastObserverListener:
routineForecastObserverServiceName
setRoutineObserverListener:
defaultConfigurationWithSourceBundleIdentifier:
initWithConfiguration:
setForecastRequestStartingCallback:
initWithStore:
setServiceProxy:
addClient:
setWeatherService:
setStore:
initWithMachServiceName:
endpoint
setLaunchDate:
_setupWeatherService
_createLocationManagerWithPreferences:dataLoader:
_createForecastManagerWithPreferences:dataLoader:
_setupRoutineManager
setDiagnosticsListener:
_loadPreferencesAndDataLoader:
launchDate
weatherService
locationObserverListener
forecastObserverListener
routineObserverListener
diagnosticsListener
_launchDate
_weatherService
_store
_locationObserverListener
_forecastObserverListener
_routineObserverListener
_diagnosticsListener
bundleWithPath:
URLForResource:withExtension:
initWithDomain:
_removeDuplicatesFromLocations:block:
defaults
synchronizeUserDefaultsDomain:keys:
arrayForKey:
sharedManager
defaultCitiesForLocaleCode:
countryCode
numberWithFloat:
countryName
localeCode
_synchronizePreferencesWithDisk
_synchronizePreferencesToCompanion
setDefaults:
shouldRunDuplicateRemoval
setShouldRunDuplicateRemoval:
_shouldRunDuplicateRemoval
_defaults
postNotificationName:object:
com.apple.weather.watchapp.forecast-container-%lu
[%@ <%p>] %lu observers; forecastTypesDesired? %lu; isUpdatable? %d; current conditions? %d, hourly conditions? %lu, daily conditions? %lu
v8@?0
v32@?0Q8@"NSObject"16^B24
supportsSecureCoding
TB,R
forecastMediatorObservers
T@"NSMutableSet",&,N,V_forecastMediatorObservers
forecastMediatorObserverQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_forecastMediatorObserverQueue
forecastTypesDesired
TQ,N,V_forecastTypesDesired
updatable
TB,N,GisUpdatable,V_updatable
location
T@"WFLocation",R,N,V_location
correspondsToLocalLocation
TB,N,V_correspondsToLocalLocation
forecastsLock
T@"NSLock",&,N,V_forecastsLock
updateToken
TQ,N,V_updateToken
lastUpdateDate
T@"NSDate",&,N,V_lastUpdateDate
currentWeatherConditions
T@"WFWeatherConditions",&,N,V_currentWeatherConditions
currentAirQualityConditions
T@"WFAirQualityConditions",&,N,V_currentAirQualityConditions
hourlyForecasts
T@"NSArray",&,N,V_hourlyForecasts
dailyForecasts
T@"NSArray",&,N,V_dailyForecasts
updating
TB,N,GisUpdating,V_updating
mediatorCount
TQ,R,N
observerFree
TB,R,N,GisObserverFree
forecastExpirationDate
T@"NSDate",R,N
-[WFLocation(NWDPreferences) initWithNanoWeatherUserCityPrefsDictionaryRepresentation:]
%f,%f
nanoWeatherCityPrefsDictionaryRepresentation
T@"NSDictionary",R,N
Flushing Cache
Loading
Forecast
Location
Routine Forecast
Unknown
com.apple.nanoweatherd.flushing-cache
com.apple.nanoweatherd.loading-cache
com.apple.nanoweatherd.forecast-monitoring
com.apple.nanoweatherd.location-monitoring
com.apple.nanoweatherd.routine-forecast-monitoring
com.apple.nanoweatherd.unknown
Dumping current transactions
Open Transactions:
 %@ %@(%llu)
%@ (PID: %u)
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
connection
T@"NSXPCConnection",R,N,V_connection
locationMediatorSource
T@"<NWDLocationMediatorSourceInterface>",W,N,V_locationMediatorSource
%@:[0x%x] PID:[%i]
mediatorSource
T@"<NWDRoutineForecastMediatorSourceInterface>",W,N,V_mediatorSource
lastUpdateToken
TQ,N,V_lastUpdateToken
com.apple.nanoweatherd
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
delegate
T@"<NWDAgentDiagnosticsDelegate>",W,N,V_delegate
interval
T@"NWKRoutineDateInterval",R,N,V_interval
lastCalculatedForecast
T@"NWKRoutineForecast",&,N,V_lastCalculatedForecast
errorCount
TQ,N,V_errorCount
com.apple.weather.watchapp.routine-forecast
CurrentlyMonitoredRoutine
v20@?0B8@"NSError"12
-[NWDRoutineManager _checkinForMonitoredRoutine]
v16@?0@"NSObject<OS_xpc_object>"8
-[NWDRoutineManager _handleOperationCompletionForOperation:]
-[NWDRoutineManager _locked_stopOngoingQueueOperations]
v16@?0@"NSObject<NWDRoutineForecastObservable>"8
No current routine being monitored
No last calculated forecast
Start: %@, End: %@
Forecast Count: %lu; Interesting Hourly Forecast Count: %lu
Monitored Interval
Last Calculated Forecast
-[NWDRoutineManager locationManager:setSelectedLocation:]_block_invoke
-[NWDRoutineManager _registerForDebugRoutineUpdateIntervalPrefNotification]
com.apple.NanoWeather.debugRoutineUpdateIntervalChanged
com.apple.NanoWeather
debugRoutineUpdateInterval
-[NWDRoutineManager _readDebugRoutineUpdateIntervalPref]
-[NWDRoutineManager _reloadDebugRoutineUpdateIntervalPref]
T@"WFServiceConnection",R,N,V_connection
forecastManager
T@"NWDForecastManager",W,N,V_forecastManager
locationManager
T@"NWDLocationManager",W,N,V_locationManager
routineManager
T@"RTRoutineManager",&,N,V_routineManager
locationCache
T@"NSMutableDictionary",&,N,V_locationCache
routineForecastOperationQueue
T@"NSOperationQueue",&,N,V_routineForecastOperationQueue
observers
T@"NSMutableSet",&,N,V_observers
monitoredRoutine
T@"NWDMonitoredRoutine",&,N,V_monitoredRoutine
monitoredRoutineLock
T@"NSLock",&,N,V_monitoredRoutineLock
monitoredRoutineScheduled
TB,N,GisMonitoredRoutineScheduled,V_monitoredRoutineScheduled
routineUpdateInterval
Td,N,V_routineUpdateInterval
monitoringLocalLocation
TB,N,GisMonitoringLocalLocation,V_monitoringLocalLocation
selectedLocation
T@"WFLocation",C,N,V_selectedLocation
transaction
T@"NSObject<OS_os_transaction>",&,N,V_transaction
com.apple.nanoweatherprefs
com.apple.nanoweatherd.PreferencesChangedNotification
NWMWeatherPreferencesDidUpdate
Cities
LastUpdated
UserSelected
Name
UUID
TimeZone
TimeZoneLastUpdated
Country
CountryAbbreviation
locationDictionary
T@"NSDictionary",R,N,V_locationDictionary
forecastDataBlob
T@"NSData",R,N,V_forecastDataBlob
B16@?0@"NSNumber"8
isNetworkTest
shouldBypassCache
demoLocation
demoForecast
city_name
country_abbreviation
timezoneHint
latitude
longitude
Unable to read file at %@
-[StaticWeatherDataLoader loadForecastDataForLocationDictionaries:completion:]
city%ld
v32@?0@"NSDictionary"8Q16^B24
-[StaticWeatherDataLoader loadLocationPreferences:]
manifest
cities
selected_city
-[StaticWeatherDataLoader loadForecastManagerWithKeynoteDemoData:]
d16@?0@"NSNumber"8
currentConditions
temp
high
code
tomorrowConditions
allowNetworkConnections
TB,N,GshouldAllowNetworkConnections,V_allowNetworkConnections
bypassCache
TB,N,GshouldBypassCache,V_bypassCache
ignoreValidFullForecastCheck
TB,N,GshouldIgnoreValidFullForecastCheck,V_ignoreValidFullForecastCheck
useSingleStaticLocation
TB,N,GshouldUseSingleStaticLocation,V_useSingleStaticLocation
useLookasideForecastCache
TB,N,GshouldUseLookasideForecastCache,V_useLookasideForecastCache
demoLocationDictionary
T@"NSDictionary",&,N,V_demoLocationDictionary
demoForecastDictionary
T@"NSDictionary",&,N,V_demoForecastDictionary
dataLoader
T@"<WeatherDataLoadable>",&,N,V_dataLoader
loadKeynoteDemoData
TB,R,N,GshouldLoadKeynoteDemoData
com.apple.nanoweatherd.weatherforecastretrieval.errordomain
nanoweatherd
v36@?0@"NSString"8@"NSError"16B24@?<v@?@"NWDForecastRequestOperation">28
Current %@
v16@?0@"NWDForecastRequestOperation"8
v24@?0@"WFWeatherConditions"8@"NSError"16
Daily %@
v24@?0@"NSArray"8@"NSError"16
Hourly %@
v24@?0@"WFAirQualityConditions"8@"NSError"16
lastError
T@"NSError",&,N,V_lastError
nowForecastRequest
T@"WFForecastRequest",&,N,V_nowForecastRequest
hourlyForecastRequest
T@"WFHourlyForecastRequest",&,N,V_hourlyForecastRequest
dailyForecastRequest
T@"WFDailyForecastRequest",&,N,V_dailyForecastRequest
todayAirQualityRequest
T@"WFAirQualityRequest",&,N,V_todayAirQualityRequest
clientInterface
T@"NSObject<NWDForecastRequestClientInterface>",&,N,V_clientInterface
T@"WFServiceConnection",W,N,V_connection
T@"WFWeatherConditions",&,N,V_currentConditions
currentAirQuality
T@"WFAirQualityConditions",&,N,V_currentAirQuality
interfaceLock
T@"NSLock",&,N,V_interfaceLock
forecastLocation
T@"WFLocation",W,N,V_forecastLocation
forecastTypesMask
TQ,N,V_forecastTypesMask
operationState
TQ,N,V_operationState
Current Conditions
Hourly
Daily
Air Quality
Nashville
America/Chicago
companionLocations
T@"NSArray",&,N
companionSelectedLocationIdentifier
T@"NSString",R,N
persistedCompanionLocations
T@"NSArray",&,N,V_persistedCompanionLocations
NWDRoutineForecast Download Error
-[NWDRoutineForecastOperation _routineLocations]
v32@?0@"WFLocation"8@"NSDate"16@"NSDate"24
v24@?0@"RTLocationOfInterest"8@"NSDate"16
v24@?0q8@"NSError"16
-[NWDRoutineForecastOperation _fetchForecastDataForRoutineLocations:]
B32@?0@"NWKRoutineLocation"8Q16^B24
v32@?0@"NSString"8@"NWKLocationForecast"16^B24
v16@?0@"NSMutableDictionary"8
-[NWDRoutineForecastOperation _reverseGeocodeRoutineLocations:]
B32@?0@"WFLocation"8Q16^B24
v24@?0^{NSArray=#}8@"NSError"16
T@"NWKRoutineDateInterval",&,N,V_interval
T@"RTRoutineManager",W,N,V_routineManager
cache
T@"<NWDRoutineLocationCachable>",R,W,N,V_cache
reverseGeocoderForLocations
T@"NWDReverseGeocoder",&,N,V_reverseGeocoderForLocations
forecastMediatorObserver
T@"NWDDaemonSideForecastObserver",&,N,V_forecastMediatorObserver
routineForecast
T@"NWKRoutineForecast",&,N,V_routineForecast
locations
T@"NSArray",&,N,V_locations
error
T@"NSError",&,N,V_error
onVacation
TB,R,N,GisOnVacation
routineMode
Tq,N,V_routineMode
inAirplaneMode
TB,R,N,GisInAirplaneMode
radiosPreferences
T@"RadiosPreferences",&,N,V_radiosPreferences
-[NWDForecastDataPopulator populateForecastsWithLocationForecastDataBlobs:]
conditionsshort
observation
valid_time_gmt
calendar
T@"NSCalendar",&,N,V_calendar
updater
T@"NWDForecastDataUpdater",&,N,V_updater
T@"NWDForecastManager",R,W,N,V_forecastManager
-[NWDXPCActivityTimer scheduleTimerWithTimeInterval:]
-[NWDXPCActivityTimer scheduleTimerWithTimeInterval:]_block_invoke
-[NWDXPCActivityTimer checkin]_block_invoke
handler
T@?,C,N,V_handler
identifier
Tr*,N,V_identifier
activityCriteria
T@"NSObject<OS_xpc_object>",&,N,V_activityCriteria
clientDispatchQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_clientDispatchQueue
gracePeriod
Td,N,V_gracePeriod
valid
TB,R,N,GisValid,V_valid
com.apple.TaskQueue.%lu
Regular
Error
Forecast types: %lu; task ID: %lu
forecastRequestQueue
T@"NSOperationQueue",W,N,V_forecastRequestQueue
requestScheduler
T@"NSObject<NWDForecastRequestSchedulerObservable>",W,N,V_requestScheduler
hasCurrentRequestOperation
TB,R,N
locked_currentRequestOperation
T@"NWDForecastRequestOperation",&,N,V_locked_currentRequestOperation
nextTimeToUpdate
T@"NSDate",&,N,V_nextTimeToUpdate
baseForecastTypes
TQ,N,V_baseForecastTypes
currentForecastTypes
TQ,N,V_currentForecastTypes
forcedForecastTypes
TQ,N,V_forcedForecastTypes
stopUpdateDelayTimer
T@"NWKTimer",&,N,V_stopUpdateDelayTimer
errorTimeoutProgression
T@"NWDTimerIntervalProgression",&,N,V_errorTimeoutProgression
taskQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_taskQueue
taskQueueName
T@"NSString",&,N,V_taskQueueName
taskState
TQ,N,V_taskState
taskShutdownState
TQ,N,V_taskShutdownState
[%lu], 
%@[%@], 
Mediator reference:[0x%x] processID:[%i] locations:[%@]
connection less mediator%@ Mediator reference:[0x%x] locations:[%@]
; remote observer
-[NWDForecastMediator setLocationsForUpdates:]
-[NWDForecastMediator setLocationForCachedUpdates:lastUpdate:]
-[NWDForecastMediator setupSnapshotForLocations:onlyObserveInForegroundOnly:]
connectionDescription
T@"NSString",&,N
forecastTypesInterestMask
TQ,N
updateTokens
T@"NSMutableDictionary",&,N,V_updateTokens
pendingForecastUpdateForLocations
T@"NSMutableSet",&,N,V_pendingForecastUpdateForLocations
T@"NSXPCConnection",&,N,V_connection
remoteObserver
T@"<NWKForecastObservable>",W,N,V_remoteObserver
sourceIntfce
T@"<NWDForecastMediatorSourceInterface>",W,N,V_sourceIntfce
responseAction
TQ,N,V_responseAction
isolateForTest
TB,N,V_isolateForTest
doDelayedInvalidateForSnapshotCompletion
TB,N,V_doDelayedInvalidateForSnapshotCompletion
snapshotOnSingleForecastUpdates
TB,N,GshouldSnapshotOnSingleForecastUpdates,V_snapshotOnSingleForecastUpdates
acknowledgeUpdatesStarted
TB,N,GshouldAcknowledgeUpdatesStarted,V_acknowledgeUpdatesStarted
connectionDescriptionPrivate
T@"NSString",&,N,V_connectionDescriptionPrivate
T@"NSString",&,N,V_connectionDescription
TQ,N,V_forecastTypesInterestMask
v16@?0@"CSLSSnapshotContext"8
NWDDiskCacheError
forecasts
scheduled_forecast_locations
routine_forecasts
com.apple.weather.watchapp.disk-cache-queue
-[NWDDiskCache deleteFileWithFileName:inCacheSubdirectory:completion:]_block_invoke
v24@?0Q8@"NSError"16
-[NWDDiskCache deleteFilesInCacheSubdirectory:completion:]_block_invoke
v32@?0@"NSURL"8Q16^B24
v16@?0@"NSError"8
-[NWDDiskCache readDataFromFilesInCacheSubdirectory:dataHandler:completion:]_block_invoke
-[NWDDiskCache _filesInCacheSubdirectory:error:]
-[NWDDiskCache _readDataFromFileWithFileName:inCacheSubdirectory:error:]
-[NWDDiskCache _writeData:toFileWithFileName:inCacheSubdirectory:completion:]
sharedCache
T@"NWDDiskCache",R,N
diskQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_diskQueue
%@-%u
nwd_reason
nwd_transactionDescription
com.apple.weather.watchapp.app-state-monitor
v16@?0^{NSMutableSet=#}8
-[NWDServer addAppStateMonitorForConnection:]_block_invoke
v16@?0@"NSDictionary"8
v32@?0@"NSString"8@?<v@?@?<v@?>>16^B24
Td,R,N
timeZone
T@"NSTimeZone",R,N
timeZoneUpdateDate
locationKey
T@"NSTimeZone",&,N
T@"NSDate",&,N
v24@?0@"WFLocation"8@"NSError"16
handlerBlock
T@?,C,N,V_handlerBlock
pendingRequests
T@"NSMutableDictionary",&,N,V_pendingRequests
retryGeocodingTimer
T@"NWKTimer",&,N,V_retryGeocodingTimer
reverseGeoLock
T@"NSLock",&,N,V_reverseGeoLock
T@"NSMutableArray",&,N,V_locations
locationsProcessed
TB,N,V_locationsProcessed
useAutomaticRetryTimer
TB,N,V_useAutomaticRetryTimer
v16@?0@"NWDForecastContainer"8
-[NWDForecastManager _locked_retrieveForecastContainerForLocation:createIfNoForecastContainer:]
B32@?0@"WFWeatherConditions"8Q16^B24
isObserverFree == NO
location.locationKeyHash
Forecast Containers
None
Active Forecast Containers
Cached Scheduled Forecast Requests
an updatable
a non-updatable
forecastContainers
T@"NSMutableDictionary",&,N,V_forecastContainers
lookasideForecastContainers
T@"NSMutableDictionary",&,N,V_lookasideForecastContainers
forecastRequestScheduler
T@"NWDForecastRequestScheduler",&,N,V_forecastRequestScheduler
preferences
T@"<NWDPreferences>",&,N,V_preferences
avoidNetworkRequests
TB,N,GshouldAvoidNetworkRequests,V_avoidNetworkRequests
diskCacheMaintenanceIdleCondition
T@"NWDIdleCondition",&,N,V_diskCacheMaintenanceIdleCondition
localLocation
T@"WFLocation",&,N,V_localLocation
staticLocations
T@"NSArray",&,N,V_staticLocations
currentDate
T@"NSDate",R
com.apple.weather.watchapp.timezone-monitor
-[NWDTimeZoneMonitor initWithClientInterface:serviceConnection:andPreferences:]
-[NWDTimeZoneMonitor startMonitoringTimeZoneChanges]
-[NWDTimeZoneMonitor stopMonitoringTimeZoneChanges]
-[NWDTimeZoneMonitor gleanFromNewlyUpdatedLocationList:]
-[NWDTimeZoneMonitor _updateLocationsTimeZones]
-[NWDTimeZoneMonitor _setTimeZoneTimerForOldestDate:]
-[NWDTimeZoneMonitor _updateTimeZoneForLocations:]
-[NWDTimeZoneMonitor _startReverseGeocodeForLocations:]
-[NWDTimeZoneMonitor _startReverseGeocodeForLocations:]_block_invoke
-[NWDTimeZoneMonitor _updateLocationsWithGeocodeResults:doUpdateListener:]
B32@?0@"NSDictionary"8Q16^B24
-[NWDTimeZoneMonitor _updateLocationsWithGeocodeResults:doUpdateListener:]_block_invoke
v32@?0@"WFLocation"8Q16^B24
clientListening
T@"<NWDTimeZoneMonitorClientInterface>",W,N,V_clientListening
currentState
TQ,N,V_currentState
timeZoneUpdateTimer
T@"NWDXPCActivityTimer",&,N,V_timeZoneUpdateTimer
reverseGeocoder
T@"NWDReverseGeocoder",&,N,V_reverseGeocoder
serviceConnection
T@"WFServiceConnection",R,W,N,V_serviceConnection
B32@?0@"LSApplicationProxy"8Q16^B24
defaultAppWorkspace
T@"LSApplicationWorkspace",&,N,V_defaultAppWorkspace
installState
TQ,N,V_installState
actionOnUninstall
T@?,C,N,V_actionOnUninstall
actionOnInstall
T@?,C,N,V_actionOnInstall
nanoweather.location
-[NWDTimerIntervalProgression resetSelectedInterval]
-[NWDTimerIntervalProgression advanceSelectedInterval]
-[NWDTimerIntervalProgression currentInterval]
intervalProgression
T@"NSArray",&,N,V_intervalProgression
currentIntervalIndex
Tq,N,V_currentIntervalIndex
currentInterval
%@-%lu
com.apple.weather.watchapp.forecast-download.%@
xpcActivityIdentifier
types
<%@: %p> locationKeyHash: %lu, forecastTypes: %lu
TQ,N,V_types
ScheduledForecastRequestLocations
ScheduledForecastRequestLocationsAndTypes
kNWDForecastRequestScheduler_XPC_ACTIVITY_TASK_INFO
com.apple.nanoweatherd.forecast-request-scheduler-connection-status
v24@?0@"NSData"8@"NSError"16
v16@?0@"NSSet"8
com.apple.weather.watchapp.forecast-download-latency-wifi
com.apple.weather.watchapp.forecast-download-latency-cellular
com.apple.weather.watchapp.forecast-download-latency-companion
<nil>
v24@?0@"NWDForecastContainer"8@"NSObject<NWDForecastMediatorInterface>"16
com.apple.weather.LocalLocationForecastUpdated
forecastRequestTasks
T@"NSMutableDictionary",&,N,V_forecastRequestTasks
T@"NSOperationQueue",&,N,V_forecastRequestQueue
sourceManagerInterface
T@"NSObject<NWDForecastSchedulerSourceInterface>",W,N,V_sourceManagerInterface
connectionStatus
TQ,N,V_connectionStatus
connectionStatusQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_connectionStatusQueue
T@"WFServiceConnection",R,W,N,V_connection
q24@?0@"WFWeatherConditions"8@"WFWeatherConditions"16
v32@?0@"WFWeatherConditions"8Q16^B24
timer
T@"NSTimer",&,N,V_timer
v24@?0@"NSArray"8@"NSString"16
PendingUpdateLocalLocation
com.apple.weather.watchapp.location-monitor
com.apple.weather.watchapp.trailing-location-update
kCLAuthorizationStatusNotDetermined
kCLAuthorizationStatusRestricted
kCLAuthorizationStatusDenied
kCLAuthorizationStatusAuthorizedAlways
kCLAuthorizationStatusAuthorizedWhenInUse
Location Auth Status
Current Local Location
Last Location Update
Has Pending Local Location Update
Is Currently SLC Monitoring
Is Polling Scheduled
Requesting location update (single update; type not specified) for local weather.
Requesting significant location change updates (continuous updates; type not specified) for local weather.
Obtained location update for local weather.
Failed to obtain location update for local weather.
T@"<NWDLocalLocationManagerDelegate>",R,W,N,V_delegate
coreLocationManager
T@"CLLocationManager",R,N,V_coreLocationManager
coreLocationAuthorizationStatus
Ti,N,V_coreLocationAuthorizationStatus
pendingUpdateLocalLocation
T@"CLLocation",C,N,V_pendingUpdateLocalLocation
pendingLocalLocationUpdateScheduled
TB,N,GisPendingLocalLocationUpdateScheduled,V_pendingLocalLocationUpdateScheduled
T@"WFLocation",&,V_localLocation
localLocationTimestamp
T@"NSDate",&,N,V_localLocationTimestamp
localLocationErrorTimestamp
T@"NSDate",&,N,V_localLocationErrorTimestamp
locationChangeMonitoring
TB,N,GisLocationChangeMonitoringOn,V_locationChangeMonitoring
locationPollingScheduled
TB,N,GisLocationPollingScheduled,V_locationPollingScheduled
reverseGeocoderForCurrentLocation
T@"NWDReverseGeocoder",&,N,V_reverseGeocoderForCurrentLocation
reverseGeocoderIdentifier
T@"NSUUID",&,N,V_reverseGeocoderIdentifier
isCoreLocationAuthorized
-[NWDLocationManager timeZoneMonitor:updatedLocationsWithTimeZones:]
v16@?0@"NSObject<NWDLocationListObservable>"8
-[NWDLocationManager _localeDidUpdate:]
-[NWDLocationManager _weatherPreferencesDidUpdate:]
Current Selected Location
Static Location Count
B24@?0@"NSObject<NWDLocationListObservable>"8^B16
-[NWDLocationManager addLocationToList:]
T@"NSArray",C,N,V_companionLocations
currentLocaleIdentifier
T@"NSString",C,N,V_currentLocaleIdentifier
localLocationManager
T@"NWDLocalLocationManager",&,N,V_localLocationManager
T@"WFLocation",R,N
reverseGeocoderForList
T@"NWDReverseGeocoder",&,N,V_reverseGeocoderForList
timeZoneMonitor
T@"NWDTimeZoneMonitor",&,N,V_timeZoneMonitor
disableLocationMonitoring
TB,N,GshouldDisableLocationMonitoring,V_disableLocationMonitoring
selectedLocationSetToLocalLocationKey
TB,N,GisSelectedLocationSetToLocalLocationKey,V_selectedLocationSetToLocalLocationKey
Preferences/WeatherDemo
json
com.apple.weather.watchapp.routine-forecast-observer-work-queue
-[NWDDaemonSideForecastObserver _cleanup]
-[NWDDaemonSideForecastObserver cancel]
-[NWDDaemonSideForecastObserver startForecastUpdatesForLocations:observedBlock:]
locationKeyHash
-[NWDDaemonSideForecastObserver connectionAcknowledgedForBulkUpdateOfLocations:]_block_invoke_2
forecastMediator
T@"NWDForecastMediator",&,N,V_forecastMediator
forecastGroup
T@"NSObject<OS_dispatch_group>",&,N,V_forecastGroup
currentlyMonitoredLocationKeys
T@"NSMutableSet",&,N,V_currentlyMonitoredLocationKeys
observedForecasts
T@"NSMutableDictionary",&,N,V_observedForecasts
forecastsObservedQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_forecastsObservedQueue
forecastsObservedBlock
T@?,C,N,V_forecastsObservedBlock
com.apple.demo-settings
FProgramNumber
com.apple.rootrobot
configuration
minimal
NanoWeatherKeynoteDemo
NanoWeatherDemo
PPTDevice
NanoWeatherNetworkLatency
Demo
Keynote Demo
Transmitting current location to CoreLocation for reverse geocode request.
v24@?0{CLLocationCoordinate2D=dd}8
v16@?0@"NSArray"8
v24@?0@"NSURL"8@"WFLocation"16
Transmitting current location to %@ for local weather forecast.
v24@?0@"<NWDPreferences>"8@"StaticWeatherDataLoader"16
Launched
launchDate
T@"NSDate",&,N,V_launchDate
weatherService
T@"WeatherService",&,N,V_weatherService
store
T@"WFWeatherStoreService",&,N,V_store
T@"WFServiceConnection",&,N,V_connection
T@"NWDLocationManager",&,N,V_locationManager
locationObserverListener
T@"NSXPCListener",&,N,V_locationObserverListener
T@"NWDForecastManager",&,N,V_forecastManager
forecastObserverListener
T@"NSXPCListener",&,N,V_forecastObserverListener
T@"NWDRoutineManager",&,N,V_routineManager
routineObserverListener
T@"NSXPCListener",&,N,V_routineObserverListener
diagnosticsListener
T@"NWDAgentDiagnosticsListener",&,N,V_diagnosticsListener
IPHONE_SIMULATOR_ROOT
CFFIXED_USER_HOME
%s/AppleInternal/Library/Bundles/NanoWeatherDemoData.bundle
v24@?0@"NSArray"8Q16
-[NWDDevicePreferences _synchronizePreferencesToCompanion]
-[NWDDevicePreferences _synchronizePreferencesWithDisk]
-[NWDDevicePreferences _removeDuplicatesFromLocations:block:]_block_invoke
-[NWDDevicePreferences _removeDuplicatesFromLocations:block:]
-[NWDDevicePreferences companionLocations]
defaults
T@"NPSDomainAccessor",&,N,V_defaults
shouldRunDuplicateRemoval
TB,N,V_shouldRunDuplicateRemoval
Performing action on %lu observers.
Returning earlier of Air Quality Observations (%@) or Current Observations (%@) Expiration.
Returning Air Quality Observations Expiration (%@).
Returning Current Observations Expiration (%@).
Unexpected situation. We expect the client to either be interested in air quality observations, current observations, or both. %lu does not conform to that assumption.
%s -- Failed to create WFLocation with dictionary missing min set of keys [%@].
%{public}@
External process has requested that we add %@[%lu] to user's location list.
External process has requested that the daemon refresh its local location.
External process has requested that we remove %@[%lu] from user's location list.
External process has requested that the daemon start observing location list updates trackedLocationSensitive[%{public}@] observeInForegroundOnly[%{public}@].
Skipping transmission of updated routine forecast (%lu) to (%{public}@) since it matches the local lastUpdateToken.
Sending updated routine forecast (%lu) to (%{public}@).
Monitor routine forecast for %{public}@ for (%{public}@); lastUpdateToken? %lu.
Processing os_state handler.
Error serializing state data: %{public}@
Caching monitored routine.
Cached monitored routine.
Cache monitored routine failed. Error? %{public}@.
Remove cached monitored routine.
Removed cached monitored routine.
Remove cached monitored routine failed. Error? %{public}@.
Loading currently monitored routine from NSUserDefaults.
Error loading currently monitored routine cached data: %{public}@
Loading currently monitored routine from disk.
Error loading currently monitored routine from disk: %{public}@.
Error loading cache from disk: %{public}@.
Loaded currently monitored routine.
No currently monitored routine to load from disk.
Checking in; current state is still check-in.
The criteria doesn't seem to be correct; do we have a cached currently monitored routine?
We have a cached currently monitored routine; start monitoring it again. This should schedule the xpc activity again.
Checking in; start a forecast update if necessary.
There is a cached currently monitored routine. Start a forecast update.
Deschedule the monitoring of the routine forecast for interval: %{private}@.
Operation complete: Interval? %{private}@, isCancelled? %{public}@, error? %{public}@
Error completing %{public}@: %{public}@
Successfully completed %{public}@: %{public}@
Attempting to cache forecast with interval(%{private}@} that doesn't match the monitored interval(%{private}@).
%s Posting notification of update of routine forecast
%s attempting to cancel operation of inteval[%{private}@] on queue of count[%lu]
%s cancelled operation of interval[%{private}@]
Schedule the monitoring of the routine forecast with interval (%f) with delay (%f) for routine interval: %{private}@.
Schedule a retry for the monitoring of the routine forecast.
Incoming interval seems to match existing monitored interval. Check if we have scheduled an update.
Incoming interval is different than existing monitored interval; start by stopping currently monitored routine forecast.
Next, setup new monitored routine.
Was getting ready to start the routine forecast update for %{public}@, but it has not expired yet: %{public}@ %f
Start updating the current routine.
Register for local location updates with our location manager.
Incoming connection %u
Disconnecting %{public}@.
Dropping %{public}@.
Monitor routine forecast for %{public}@.
Notify observer of existing routine forecast for %{public}@; lastUpdateToken? %lu.
%s: isSelectedLocationSetToLocalLocationKey[%{public}@].
Ending monitor of routine forecasts.
%s: Read in %f for routine update interval.
Deschedule and reschedule monitored routine XPC activity based on reloaded interval.
End deletion of %lu containers (Successfully deleted %lu).
Error loading cached forecast for %@[%lu]: %{public}@
End load for %@[%lu].
Loaded cached forecast for %@[%lu].
Found %lu items in the disk cache.
Error looking up cache items: %{public}@
Did not find any items in the disk cache.
End load of all disk cached paths.
End flush for [%@[%lu]].
Wrote cached forecast data [%@[%lu]] to disk.
Caching forecast data for %@[%lu] to disk failed. Error? %{public}@
Initializing %{public}@; isNetworkTest? %{public}@ shouldBypassCache? %{public}@ useSingleStaticLocation? %{public}@ useLookasideForecastCache? %{public}@
Read %lu bytes from %@
%s Location count? %lu
Error generating NSJSON Data object from demo forecast dictionary: %@
%@: Error reading file: %@
Error loading manifest for static content: %@
Created forecast request operation with types[%lu] for [%@[%lu]]
Setting up weather requests types[%lu] for [%@[%lu]]
Error downloading %{public}@ forecast data for [%@[%lu]]: %{public}@
Successfully downloaded %{public}@ forecast data for [%@[%lu]]
AQI Request status: isAQIDesired? %d; isAQIAvailable? %d; countryAbbreviation? %d
Timed out waiting for response for forecast request for [%@[%lu]]
Error response for forecast request for [%@[%lu]]: %{public}@
Calendar missing from a daily forecast object: %{public}@, %{public}@, %{public}@
Date missing from a daily forecast object: %{public}@
Finished transferring %{public}@ forecast data (token: %lu) to container [%@[%lu]]. Replaced previous update token %lu.
Received %lu predicted locations of interest (starting at %@[%lu] after %{public}@); first predicted location of interest's confidence level is %f, so we are using it. Expected entry time: %{public}@
Received %lu predicted locations of interest (starting at %@[%lu] after %{public}@); first predicted location of interest's confidence level is %f, so we are not using it.
Error retrieving predicted locations of interest (starting at %@[%lu] after %{public}@): %{public}@
Received no predicted locations of interest (starting at %@[%lu] after %{public}@).
Received %lu predicted exit dates (starting at %@[%lu] on %{public}@); first predicted exit date's confidence level is %f, so we are using it.
Received %lu predicted exit dates (starting at %@[%lu] on %{public}@); first predicted exit date's confidence level is %f, so we are not using it.
Error retrieving predicted exit dates (starting at %@[%lu] after %{public}@): %{public}@
Received no predicted exit dates (starting at %@[%lu] after %{public}@).
Asked to add routine location: %{private}@[%lu], entry? %{private}@, exit? %{private}@, but it already exists.
Add routine location: %{private}@[%lu], entry? %{private}@, exit? %{private}@
Using static location.
Succeeded in deducing routine with %lu locations.
Unable to deduce routine.
Failed to determine routineMode error[%{public}@].
Got a routine mode of [%ld].
Asked to fetch forecasts for an empty list of routine locations.
%s Starting download of forecast data for %ld locations.
Finishing routine forecast download. Retrieved forecasts (%lu) for %lu locations.
Unable to find matching NWKRoutineLocation for %@[%lu]
Contains air quality conditions? %{public}@
Unable to find a forecast for %@
Asked to reverse geocode an empty list of routine locations.
Reverse geocoding not required for the list of %lu routine locations.
Error reverse geocoding list of routine locations: %@
Finished reverse geocoding list. Update location list with geocoded data.
%s --Starting activity timer identifier[%s] with interval[%f]
%s --Got activity timer callback so calling handler
%s --Checkin acknowledged
%s --Got regular callback at checkin so calling handler
Asked to check update status of task for [%@[%lu]], but the taskShutdownState(%lu) was set to something other than kNWDForecastTaskShutdownNone. Reset shutdown state.
Asked to check update status of task for [%@[%lu]], but the taskState(%lu) dictates we should not do anything.
Forcing update of task for [%@[%lu]].
Asked to start stop update timer on task for [%@[%lu]], but the taskShutdownState[%lu] was something other than kNWDForecastTaskShutdownNone.
Task for %@[%lu] has received updated forecast location details. isNowAirQualityEligible? %d isClientInterestedInAirQuality? %d
Task for %@[%lu] has received updated forecast location details and we are now eligible and interested in Air Quality.
Task for %@[%lu] successfully updated the forecast interest mask for the current request operation.
Task for %@[%lu] was unsuccessful in trying to update the forecast interest mask for the current request operation. Add kNWKForecastTypeAirQualityForecast to forcedForecastTypes and set taskState to kNWDForecastTaskAwaitingForecastOperationButSubset
Task for %@[%lu] set the forced forecast types to force Air Quality and has set the taskState to kNWDForecastTaskAwaitingForecastOperationButForceRedo.
Task for %@[%lu] is awaiting shutdown, so we will do nothing.
Forcing air quality on task for [%@[%lu]].
Was able to update desired forecast [%lu] while awaiting forecast operation on task for [%@[%lu]].
Was unable to update desired forecast [%lu] while awaiting forecast operation on task for [%@[%lu]]. Force redo with %lu.
Update desired forecast [%lu] while awaiting forecast operation redo on task for [%@[%lu]]. Force redo with %lu.
Was able to update desired forecast [%lu] while awaiting forecast operation subset on task for [%@[%lu]].
Was unable to update desired forecast [%lu] while awaiting forecast operation subset on task for [%@[%lu]]. Force redo with %lu.
Was waiting on %{public}@ timer elapse on task for [%@[%lu]].
Update desired forecast [%lu] and trigger update on task for [%@[%lu]].
Asked to update desired forecast [%lu], but task for [%@[%lu]] is awaiting shutdown.
Setting update timer with delay of %f for [%@[%lu]].
Was preparing to run forecast update but we have a current operation already.
Was going to add a new %{public}@, but the state of this task is kNWDForecastTaskAwaitingForecastOperation. Is there a currentRequestOperation? %d. Abort.
Was going to add a new %{public}@, but the state of this task is %lu and there is a currentRequestOperation. Abort.
Was going to add a new %{public}@, but the state of this task is kNWDForecastTaskAwaitingShutdown. Abort.
Creating forecast request operation with types[%lu] for %@[%lu]
Flatten kNWDForecastTaskAwaitingForecastOperationButForceRedo or kNWDForecastTaskAwaitingForecastOperationButSubset taskState for [%@[%lu]]
Setting stop update timer on task for [%@[%lu]].
Forecast request task for [%@[%lu]] is eligible for shutdown.
Forecast request task for [%@[%lu]] is not eligible for shutdown. taskShutdownState? %lu isRequestInProcess? %d
Forecast connection has been invalidated.
Created forecast mediator for XPC service, reference[ox%x]
Created forecast mediator for direct observer, reference[ox%x]
Inserting 0 update token for: %@[%lu]
Setting up connection [%{public}@%@] for [%lu] locations. responseAction? %lu
Attempting to setup a %lu connection that was used for something else %lu [%{public}@]
%s --- locations count[%lu]
%s --- location[%@[%lu]] updateToken? %lu
Incoming location is not valid for forecast data updates: %@[%lu]
(%{public}@) Request from client (%{public}@) to setup forecast updates (%lu) for %@[%lu]. Cached client updateToken? %lu
%s --- snapshotLocations count[%lu]
Connection [%{public}@] is delaying the disabling of forecast updates due to client asking for snapshot updates.
Connection [%{public}@] is disabling forecast updates.
Just set the forecastTypesInterestMask on [%{public}@] to [%lu]
Got a forecast update [%{public}@%@] but this forecast is not one we want in [%@[%lu]]
Got a forecast update in mediator before response action type set [%{public}@]
Connection [%{public}@] is updating forecast for %@[%lu]. %{public}@
Connection [%{public}@] is no longer updating forecast for %@[%lu]. %{public}@
I'm here just to provide a hook for testing [%{public}@]
Connection [%{public}@] is preparing to schedule snapshot for updated forecasts for locations %{public}@.
Connection [%{public}@] is disabling forecast updates after delay due to client asking for snapshot updates.
Got a forecast update but we've already scheduled snapshot once [%{public}@]
Calling test hook with forecast/s [%{public}@]
Calling client with forecast/s [%{public}@]
Not sending data to app due to token issues. forecast.updateToken[%lu] matchedUpdateToken[%lu] on connection[%{public}@]
Scheduling a snapshot context that goes stale at %@.
Error finding cache directory (%s): %{public}@.
Deleting %@.
Unable to delete %{public}@ from disk cache: %{public}@
Deleted %lu items.
Error generating data to cache: %{public}@.
Error finding cache items within directory: %{public}@.
Reading from %@.
Error finding cache file (%{public}@) at %{public}@ when attempting to read.
Writing to %@.
Error finding cache file (%{public}@) at %{public}@ when attempting to write.
%@ connection invalidated.
Attempting to monitor nil bundleIdentifier for incoming connection %d; skip.
%s: bundleId? %{public}@
Existing monitor; are we already monitoring this bundle identifier? %{public}@.
Updating interested bundle identifiers...
Create monitor.
State changed to %u for %{public}@ (%{public}@)
Finished Cleaning up %@
No cleanup to be done. It's probably safe to exit.
Connected Processes: %@
Preparing to invalidate %lu connections.
Removing %@ connection from pid %u
[0x%lx] NWDReverseGeocoder created.
[0x%lx] started reverse geocode location [%@[%lu]] pendingRequests[%lu].
[0x%lx] Successfully reverse geocoded location name [%{private}@] ID [%@[%lu]] pendingRequests left[%lu].
[0x%lx] Unable to reverse geocoded location due to No Result, Partial Result, or Canceled [%ld]
[0x%lx] Finished Geocoding all locations. Updating client
[0x%lx] At least one reverse geocode failed so setting retry timer if use enabled [%d]
[0x%lx] Scheduling retry geocoding timer for %{public}@.
[0x%lx] Waking up from our retry geocoding timer.
[0x%lx] Starting process of reverse geocoding [%lu] locations
[0x%lx] Punting on reverse geocoding [%lu] locations here since we are already busy on it
[0x%lx] About to reverse geocode location [%{private}@] [%@[%lu]].
[0x%lx] One of the locations in NWDReverseGeocoder is invalid and so is being ignored. Part of a set of [%lu] locations
[0x%lx] Stopping process of reverse geocoding count [%lu] locations
Found cached valid weather forecast for new connection so sending to client[%{public}@]
Looking in lookaside cache for Weather forecast after failing in main cache client[%{public}@]
Asked to disable a forecast update for %@[%lu], but we don't have a container for that location!
disabling forecast updates for mediator [%{public}@] container.isUpdatable?[%d]
Forecast container is now interested in different forecast types after removal of observer: %lu (previous) v. %lu (current)
container is not updatable so there is nothing to disable for [%{public}@]
%s -- Non geocoded location in an existing container being replaced by geocoded location [%@[%lu]].
Loaded forecast container for [%@[%lu]] from disk cache.
Created new forecast container for [%@[%lu]].
%s -- isLocationNowReverseGeocoded? %d; targetContainer.location.countryAbbreviation? %{public}@; location.countryAbbreviation? %{public}@
We have determined that we should avoid network requests (PPT?); avoid scheduling updates for forecast data for %@[%lu].
Added first observer for forecast data for %@[%lu]. Interested forecast types? %lu. shouldForceUpdate? %d
Forcing forecast updates for %@[%lu]. isExpired[%d] shouldBypassCache[%d]
Forecast container for %@[%lu] is now interested in different forecast types after addition of observer: %lu (previous) v. %lu (current)
Not having to do anything for forecast updates for %@[%lu].
Asked to check if forecast in container for %@[%lu] is valid, but we should bypass the cache so we are returning NO.
Asked to check if forecast in container for %@[%lu] is valid, but we should ignore the valid check so we are returning YES.
Asked to check if forecast in container for %@[%lu] is valid for types %lu.
Interested in air quality observations and they are expired.
Interested in air quality observations and they are still valid.
Interested in current observations and they are still valid.
Are there enough hourly forecasted conditions? %s.
Dropping connection %u.
Cache forecast for [%@[%lu]] to disk.
Now is a good time to check if we should clean any objects from our disk cache.
Deleting %lu objects from our disk cache: %{public}@.
Forecast manager has received updated reverse geocode information for %@[%lu], for which we currently have %{public}@ forecast container.
%s -- initializing NWDTimeZoneMonitor
%s --
%s --oldestTimeZoneCheckedAt[%{public}@]
%s --locationDictionaries[%{public}@]
%s --locations[%{public}@]
%s --About to update clients with updated list error[%@].
%s -- About to update timezone info for location [%@[%lu]] timezone pref[%{public}@] update[%{public}@] updateDate pref[%{public}@] update[%{public}@]
Setting Weather Application installState to %lu
Start observing installation
Stop observing installation
Received state change %lu for %lu application proxies, but none of them were for %{public}@.
Received state change %lu for %{public}@.
Unable to process unknown state.
[%{public}@] %{public}@
%s -- Current interval set to [%f] index[%ld]
%s -- Current interval is invalid with index[%ld]
Cache scheduled forecast request for %@[%lu] with types %lu.
Cached scheduled forecast request.
Cache scheduled forecast request failed. Error? %{public}@.
Error loading defaults cached scheduled forecast requests metadata data: %{public}@.
Error loading defaults cached scheduled forecast requests data: %{public}@.
Loading scheduled forecast requests from disk.
Error loading scheduled forecast request locations data (%{public}@): %{public}@.
Delete cached scheduled forecast request for %@[%lu].
Deleted cached scheduled forecast.
Delete cached scheduled forecast failed. Error? %{public}@.
Asked to check-in for any cached scheduled forecast requests, but there were none.
Check-in for scheduled forecast requests (%{public}@) for %@[%lu]
Checking in, but the current state is still check-in for %@[%lu], so we will do nothing.
Checking in. The current state is still check-in for %@[%lu], but there is no criteria. Deschedule.
We checked-in and it's time to run a forecast request for %@[%lu].
Beginning wind down on updates for [%@[%lu]].
Asked to begin wind down on updates for [%@[%lu]], but we did not find a matching task.
Deschedule forecast request (%{public}@) for [%@[%lu]].
Removing forecast request task for [%@[%lu]]
Forecast request task for [%@[%lu]] has already been setup; force update or timer as needed. shouldForceUpdate? %d
Setup forecast request task for [%@[%lu]]. shouldForceUpdate? %d
Notify task that [%@[%lu]] is now eligible for air quality updates.
Asked to notify task that [%@[%lu]] is now eligible for air quality updates, but we did not find a matching task.
Notify task that the forecast types desired for [%@[%lu]] have been updated.
Asked to notify task that the forecast types desired for [%@[%lu]] have been updated, but we did not find a matching task.
Schedule forecast request (%{public}@) for %@[%lu] in %fs. taskInfo? %{public}@
Checked-in with a new activity for %@[%lu]. taskInfo? %{public}@
Checked-in with an existing activity for %@[%lu]. Existing taskInfo? %{public}@ New taskInfo? %{public}@
Running activity for %@[%lu]. taskInfo? %{public}@
Set next update time to forecast recommended (%{public}@) for [%@[%lu]]
Set next update time to most frequent allowed period (%{public}@) for [%@[%lu]]
Was about to shutdown forecast request task for [%@[%lu]], but the container is still updatable. Move taskState to kNWDForecastTaskIdle and taskShutdownState to kNWDForecastTaskShutdownNone.
Shutting down forecast request task for [%@[%lu]]. Move taskState to kNWDForecastTaskAwaitingShutdown.
Attempting to notify observers of updated forecast for %@[%lu].
Posted notification for updated forecast for user's current location: %@
Error attempting to roll forecast timestamps: %{public}@.
Attempting to roll forecast timestamps for %lu containers.
Attempting to roll forecast timestamps for %@[%lu].
Error attempting to roll forecast timestamps for specific container at %{public}@: %{public}@.
Reinstalled app so requesting location authorization!
Client asked to refresh local location.
Was about to refresh location observation state, but we should disable location monitoring so we are skipping.
While refreshing location observation state, we've detected no clients are currently connected; stop monitoring.
No current local location; check CoreLocation cache.
Received a location update but our previous update is less than 15m old (%f); delay the new one.
Received a location update, but it's close to our current location.
Requesting single location update.
Was going to request location authorization, but current status is %{public}@.
Was going to request location authorization, but there are no observers.
Was going to request location authorization, but first sync has not yet finished.
App is installed; request location authorization.
App is not installed; skip request for location authorization.
App state is unknown; skip request for location authorization.
Start monitoring significant location changes.
Stop monitoring significant location changes.
Error caching pending location update: %{public}@
Error loading pending location update data: %{public}@
Invalidating our polling timer.
Was asked to schedule our polling timer for updates, but it appears as though we are not authorized to do so. Current auth status? %{public}@
Scheduling our polling timer with fire date of %{public}@.
Servicing polling timer.
It's time to update our location. Start updating the user's location.
It's not quite time to update our location. Schedule our next location update.
Asked to schedule trailing update, but we already have an activity scheduled.
Process location update.
Servicing trailing update timer.
Attempting to service trailing update timer, but the state was invalid. isPendingLocalLocationUpdateScheduled? %{public}@, pendingUpdateLocalLocation? %{public}@
Checking in for any scheduled activities in our local location manager.
[Polling] Checking in; current state is still check-in.
[Polling] Checking in; it's time to start updating our location.
[Trailing Location Update] Checking in; current state is still check-in.
[Trailing Location Update] Checking in; it's time to update our clients with our cached location.
Successfully reverse geocoded current location.
Unable to reverse geocode current location: %{public}@
Start reverse geocode for current location.
New location %@[%lu] is significant enough from previous location.
New location matches a static location; we'll use the static location instead.
First, create a temporary local location object, then start a WFLocation query.
Updating local location from %@[%lu] to %@[%lu]
Updating local location to %@[%lu]
Changing CoreLocation authorization status: %{public}@
Supposedly received location updates, but the location array is empty? %ld
Failed to update location: %@
Received initial pair notification. If we were observing this, it means we have an interested client. Request location authorization.
Our static location list has been loaded, check for updated locations.
%s --locations [%@]
%s --Replacing static locations modified with updated timezones [%@]
Notify %{public}@ of updated local location %@[%lu].
Notify %{public}@ of updated selected location %@[%lu].
Notify %{public}@ of updated display name for %@[%lu].
Notify %{public}@ of updated timezone for %@[%lu].
Notify %{public}@ of updated static location list (%lu): %@ [%{public}@].
About to update clients with updated list error[%@].
Update current local location with new data.
Update local location. Previous? %@[%lu] Current? %@[%lu]
Nilling out previous local location %@[%lu].
New local location %@[%lu].
%s Adding %@[%lu] to list of static locations
Was asked to refresh local location, but we should disable location monitoring so we are skipping.
Asked to remove %@[%lu] from list of static locations, but it does not exist in our list.
Removing %@[%lu] from list of static locations.
Start observing location list updates. shouldMonitorLocation? %{public}@ sendImmediateUpdate? %{public}@
Update previous selected location [%@[%lu]] with new selected location [%@[%lu]].
Created NWDDaemonSideForecastObserver, reference[ox%x]
Waiting on updates for %lu locations: %{public}@.
%s Calling forecastsObservedBlock.
Received forecast data for %@[%lu].
Update status for %@[%lu]. isUpdating? %{public}@ error? %@
No longer waiting on updates for %@[%lu].
Running in %@ mode. Load demo data.
Loading options from %@.
Unable to read PPT Options: %{public}@
%@ started.
%@ failed to start.
Starting observer services...
%s -- Removing duplicate for location [%@[%lu]]
%s -- Finished remove duplicate process didRemoveLocation[%lu]
%s -- reading companion locations but de-duping the list in response to shouldRunDuplicateRemoval flag
Updating companion locations[%lu]
NWDForecastContainer
NSSecureCoding
NSCoding
NWDPreferences
NWDLocationListMediator
NWKLocationServable
NSObject
NWDLocationListObservable
NWDIdleCondition
NWDRoutineForecastMediator
NWDRoutineForecastObservable
NWKRoutineForecastServable
KeynoteDemoWeatherDataLoader
WeatherDataLoadable
NWDAgentDiagnosticsListener
NWDMonitoredRoutine
NWDRoutineManager
NWDRoutineForecastMediatorSourceInterface
NWDRoutineLocationCachable
NSXPCListenerDelegate
NWDAgentDiagnosticsDelegate
DiskCache
LocationForecastDataBlob
StaticWeatherDataLoader
NWDForecastRequestOperation
NWDForecastRequestOperationPopulation
NWDSimulatorPreferences
WFLocation
NWDRoutineForecastOperation
NWDForecastDataPopulator
NWDForecastDataPopulatable
NWDXPCActivityTimer
NWDForecastRequestTask
NWDForecastRequestClientInterface
NWDForecastMediator
NWDForecastServable
NWKForecastServable
NWDForecastMediatorInterface
NWDSnapshotManager
NWDDiskCache
XPCReason
NWDServer
NWDLockedActions
NWDReverseGeocoder
NWDForecastManager
NWDForecastMediatorSourceInterface
NWDForecastSchedulerSourceInterface
NWDTimeZoneMonitor
NWMAppWorkspaceObserver
LSApplicationWorkspaceObserverProtocol
NWDTimerIntervalProgression
XPCActivityIdentifier
NWDForecastDownloadMetadata
NWDForecastRequestScheduler
CSLSConnectionStatusObserver
NWDForecastRequestSchedulerObservable
NWDForecastDataUpdater
NWDDemoPreferences
NWDLocalLocationManager
CLLocationManagerDelegate
NWDLookasideActions
NWDLocationManager
NWDLocalLocationManagerDelegate
NWDLocationMediatorSourceInterface
NWDTimeZoneMonitorClientInterface
DemoWeatherDataLoader
NWDDaemonSideForecastObserver
NWKForecastObservable
NWDWeatherStoreServiceConfiguration
NWDAgent
PPTWeatherDataLoader
NWDDevicePreferences
B40@0:8@16@24Q32
B16@0:8
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@32@0:8@16@24
v16@0:8
@16@0:8
B24@0:8@16
v24@0:8@?16
v32@0:8Q16@?24
Q16@0:8
v20@0:8B16
v24@0:8Q16
@"WFLocation"
@"NSLock"
@"NSDate"
@"WFWeatherConditions"
@"WFAirQualityConditions"
@"NSArray"
@"NSMutableSet"
@"NSObject<OS_dispatch_queue>"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8B16B20
v24@0:8@"WFLocation"16
v40@0:8@16@24@32
v32@0:8@16@24
v40@0:8@"NWDLocationManager"16@"WFLocation"24@"NSString"32
v40@0:8@"NWDLocationManager"16@"WFLocation"24@"NSTimeZone"32
v32@0:8@"NWDLocationManager"16@"NSArray"24
v32@0:8@"NWDLocationManager"16@"WFLocation"24
@"NSXPCConnection"
@"<NWDLocationMediatorSourceInterface>"
^AI16@0:8
v40@0:8d16@24@?32
v32@0:8@"NWDRoutineManager"16@"NWKRoutineForecast"24
v32@0:8@16Q24
v32@0:8@"NSDateInterval"16Q24
@"<NWDRoutineForecastMediatorSourceInterface>"
@"NSURL"24@0:8@"NSString"16
@"<NWDAgentDiagnosticsDelegate>"
@"NWKRoutineDateInterval"
@"NWKRoutineForecast"
v24@0:8@"NSDateInterval"16
v32@0:8@"WFLocation"16@"CLLocation"24
@"WFLocation"24@0:8@"CLLocation"16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"NSDictionary"16@0:8
@40@0:8@16@24@32
d16@0:8
v32@0:8@16d24
v48@0:8@16@24@32^v40
v24@0:8d16
@"WFServiceConnection"
@"NWDForecastManager"
@"NWDLocationManager"
@"RTRoutineManager"
@"NSMutableDictionary"
@"NSOperationQueue"
@"NWDMonitoredRoutine"
@"NSObject<OS_os_transaction>"
@32@0:8@16^@24
@"NSDictionary"
@"NSData"
v32@0:8@16@?24
@"<WeatherDataLoadable>"
@48@0:8@16Q24@32@40
B24@0:8Q16
@"NSError"
@"WFForecastRequest"
@"WFHourlyForecastRequest"
@"WFDailyForecastRequest"
@"WFAirQualityRequest"
@"NSObject<NWDForecastRequestClientInterface>"
Q24@0:8@16
v48@0:8@16@24@32@40
v24@0:8@"NSArray"16
@"NSArray"16@0:8
@64@0:8@16@24@32@40@48@56
v40@0:8@16@24@?32
q16@0:8
v24@0:8q16
@"<NWDRoutineLocationCachable>"
@"NWDReverseGeocoder"
@"NWDDaemonSideForecastObserver"
@"RadiosPreferences"
@"NSCalendar"
@"NWDForecastDataUpdater"
@48@0:8r*16@24q32@?40
B24@0:8d16
@?16@0:8
r*16@0:8
v24@0:8r*16
@"NSObject<OS_xpc_object>"
v32@0:8Q16@24
v28@0:8B16@20
v32@0:8Q16@"NSError"24
v28@0:8B16@"NSError"20
@64@0:8@16Q24@32@40@48@56
v28@0:8Q16B24
@"NSObject<NWDForecastRequestSchedulerObservable>"
@"NWDForecastRequestOperation"
@"NWKTimer"
@"NWDTimerIntervalProgression"
@"NSString"
v44@0:8@16Q24Q32B40
v28@0:8@16B24
v32@0:8@"WFLocation"16Q24
v44@0:8@"WFLocation"16Q24Q32B40
v28@0:8@"NSArray"16B24
v36@0:8B16@20@28
v32@0:8@"NWDForecastContainer"16Q24
v36@0:8B16@"WFLocation"20@"NSError"28
v24@0:8@"NSString"16
v44@0:8@16@24Q32B40
v72@0:8@16Q24@32@40@48@56@64
v40@0:8@16Q24Q32
@"<NWKForecastObservable>"
@"<NWDForecastMediatorSourceInterface>"
@40@0:8@16@24^@32
v40@0:8@16@?24@?32
v48@0:8@16@24@32@?40
@24@0:8^@16
@32@0:8@16@?24
@"BKSApplicationStateMonitor"
^{NSMutableDictionary=#}
@"NWKSynchronizedObject"
@"NWDIdleCondition"
@40@0:8^{NSArray=#}16@24@?32
@40@0:8@16@24@?32
v32@0:8^{NSMutableArray=#}16@24
^{NSMutableArray=#}16@0:8
v24@0:8^{NSMutableArray=#}16
^{NSMutableArray=#}
v36@0:8@16@24B32
v36@0:8@"NSObject<NWDForecastMediatorInterface>"16@"NSArray"24B32
v32@0:8@"NSObject<NWDForecastMediatorInterface>"16@"NSArray"24
@"NWDForecastContainer"24@0:8@"WFLocation"16
@28@0:8@16B24
B32@0:8@16Q24
^{NSMutableDictionary=#}16@0:8
v24@0:8^{NSMutableDictionary=#}16
@"NWDForecastRequestScheduler"
@"<NWDPreferences>"
v24@0:8^{NSArray=#}16
v28@0:8^{NSArray=#}16B24
@"<NWDTimeZoneMonitorClientInterface>"
@"NWDXPCActivityTimer"
v32@0:8@"NSArray"16@"NSArray"24
@"LSApplicationWorkspace"
@32@0:8^d16q24
@32@0:8@16Q24
v20@0:8i16
v44@0:8@16Q24@32B40
v56@0:8@16Q24d32@40@?48
v36@0:8@16B24@28
B24@0:8@"WFLocation"16
v44@0:8@"WFLocation"16Q24@"NSDate"32B40
v32@0:8Q16@"WFLocation"24
v56@0:8@"WFLocation"16Q24d32@"NSString"40@?<v@?@"NSObject<OS_xpc_object>">48
@"NSDate"24@0:8@"NWDForecastRequestTask"16
B24@0:8@"NWDForecastRequestTask"16
v36@0:8@"NWDForecastRequestTask"16B24@"NSError"28
v32@0:8@"NWDForecastRequestTask"16@"NWDForecastRequestOperation"24
@"NSObject<NWDForecastSchedulerSourceInterface>"
v52@0:8@16d24@32@40B48
@"NSTimer"
v40@0:8@16q24@32
v28@0:8@16i24
v40@0:8@"CLLocationManager"16@"CLLocation"24@"CLLocation"32
v32@0:8@"CLLocationManager"16@"NSArray"24
v32@0:8@"CLLocationManager"16@"CLHeading"24
B24@0:8@"CLLocationManager"16
v40@0:8@"CLLocationManager"16q24@"CLRegion"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconRegion"32
v40@0:8@"CLLocationManager"16@"CLBeaconRegion"24@"NSError"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconIdentityConstraint"32
v40@0:8@"CLLocationManager"16@"CLBeaconIdentityConstraint"24@"NSError"32
v32@0:8@"CLLocationManager"16@"CLRegion"24
v32@0:8@"CLLocationManager"16@"NSError"24
v40@0:8@"CLLocationManager"16@"CLRegion"24@"NSError"32
v28@0:8@"CLLocationManager"16i24
v24@0:8@"CLLocationManager"16
v32@0:8@"CLLocationManager"16@"CLVisit"24
i16@0:8
@"<NWDLocalLocationManagerDelegate>"
@"CLLocationManager"
@"CLLocation"
@"NSUUID"
@"WFServiceConnection"16@0:8
v40@0:8@"NWDLocalLocationManager"16@"WFLocation"24@"WFLocation"32
v32@0:8@16B24B28
v32@0:8@"NSObject<NWDLocationListObservable>"16B24B28
v32@0:8@16^{NSArray=#}24
v32@0:8@"NWDTimeZoneMonitor"16^{NSArray=#}24
B20@0:8B16
@"NWDLocalLocationManager"
@"NWDTimeZoneMonitor"
v72@0:8@"WFLocation"16Q24@"NSDate"32@"WFWeatherConditions"40@"NSArray"48@"NSArray"56@"WFAirQualityConditions"64
v36@0:8@"WFLocation"16B24@"NSError"28
@"NWDForecastMediator"
@"NSObject<OS_dispatch_group>"
@"WeatherService"
@"WFWeatherStoreService"
@"NSXPCListener"
@"NWDRoutineManager"
@"NWDAgentDiagnosticsListener"
@"NPSDomainAccessor"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.nanoweatherd</string>
<key>com.apple.CoreRoutine.LocationOfInterest</key>
<true/>
<key>com.apple.CoreRoutine.Prediction</key>
<true/>
<key>com.apple.assertiond.app-state-monitor</key>
<true/>
<key>com.apple.locationd.authorizeapplications</key>
<true/>
<key>com.apple.locationd.effective_bundle</key>
<true/>
<key>com.apple.locationd.slc_configurer</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.security.network.client</key>
<true/>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
