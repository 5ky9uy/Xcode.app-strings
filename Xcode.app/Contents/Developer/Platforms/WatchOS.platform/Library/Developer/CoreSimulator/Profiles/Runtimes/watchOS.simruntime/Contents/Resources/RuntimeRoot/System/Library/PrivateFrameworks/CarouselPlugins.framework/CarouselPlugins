unknown
reason
T@"NSString",&,N,V_reason
v8@?0
com.apple.Carousel.CSLPIDuetSession
v32@?0@"NSArray"8@"NSArray"16^B24
queue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
clientDictionary
T@"NSMutableDictionary",&,N,V_clientDictionary
frames
startTimestamp
%@ to %@
currentRange
active
partialUpdate
reasons
TB,R,N,GisActive,V_active
frameCount
TI,R,N,V_frameCount
scheduleDate
T@"NSDate",R,N
referenceDate
T@"NSDate",R,N,V_referenceDate
startTime
TQ,R,N,V_startTime
currentAnimationStartDate
T@"NSDate",R,N,V_currentAnimationStartDate
currentAnimationEndDate
T@"NSDate",R,N,V_currentAnimationEndDate
lastFrameFromPreviousUpdate
T@"CSLPIFlipbookFrame",R,N,V_lastFrameFromPreviousUpdate
targetFlipbookSize
TQ,N,V_targetFlipbookSize
isPartialUpdate
TB,N,V_isPartialUpdate
aborted
TB,N,GwasAborted,V_aborted
T@"NSString",R,N
powerAssertion
T@"CSLPIPowerAssertion",&,N,V_powerAssertion
CSLPIDockDidDockNotification
CSLPIDockDidUndockNotification
com.apple.Carousel.CSLPIPowerAssertionPriorityRootQueue
%@.systemSleepObserver
v16@?0@8
%@ sleepImminent:%u obs:
v16@?0@"<CSLPISystemSleepGlobalObserverObserver>"8
systemSleepGlobalObserver
v12@?0B8
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
attemptingToSleep
TB,GisAttemptingToSleep,V_attemptingToSleep
sleepImminent
TB,GisSleepImminent,V_sleepImminent
%@ (%@) was not stopped before dealloc
(%@) canSleep
asserted
TB,R,N,GisAsserted
launchCompleted
TB,R,N,GisLaunchCompleted
<%@: %@ %@ %@, int:%0.1fs leeway:%.1fs>
wallclock 
NoIdleSleepAssertion
fireInterval
Td,N,V_fireInterval
leewayInterval
Td,N,V_leewayInterval
shouldWakeDevice
TB,N,V_shouldWakeDevice
serviceIdentifier
T@"NSString",C,N,V_serviceIdentifier
handler
T@?,C,N,V_handler
scheduled
TB,N,GisScheduled,V_scheduled
CSLPISharedWorkloop
v16@?0@"CSLPIWakeGestureMonitor"8
observers count
filteredObservers count
screenOffFilteredObservers count
observers
filteredObservers
screenOffFilteredObservers
called
TB,N,GisCalled,V_called
Failed to call block: %@
message
T@"NSString",C,N,V_message
CSLAssertionBlockTimeoutSentinel
timeout
Td,R,N,V_timeout
v28@?0B8@"NSError"12@"NSString"20
en_US_POSIX
HH:mm:ss.SSS MM/dd
<Distant Past>
%@ (in %@)
HH:mm MM/dd
HH:mm
%lf (in %.2lfs)
%llu (in %.3lfs)
<%@ %p: [%u] mach:%@ ca:%@ date:%@ {%@ to %@}> : <%@ %p:%@>}
presentationTime
fraction
Tf,R,N
animationStartDate
T@"NSDate",R,N,V_animationStartDate
animationEndDate
T@"NSDate",R,N,V_animationEndDate
index
TI,R,N,V_index
frameSpecifier
T@"<CSLSFrameSpecifier>",R,N,V_frameSpecifier
machContinuousTimeStamp
TQ,N,V_machContinuousTimeStamp
caMediaTimeStamp
Td,N,V_caMediaTimeStamp
CSLPIMedicalIDButtonPressed
CSLPIMedicalIDStayOnKey
AssertType
AssertName
TimeoutSeconds
TimeoutAction
TimeoutActionRelease
PowerAssertion_acquire
<CSLPIPowerAssertion %p name:'%@' type:%@ assertionID:%d isAsserted:%u>
CSLPIBacklightWillTurnOn
CSLPIBacklightDidTurnOn
CSLPIBacklightWillTurnOff
CSLPIBacklightDidTurnOff
priority
Td,N,V_priority
override
T@"<CSLPIButtonHandlerOverride>",W,N,V_override
q24@?0@"CSLPIButtonHandlerOverrider"8@"CSLPIButtonHandlerOverrider"16
v32@?0@"CSLPIButtonHandlerOverrider"8Q16^B24
<%@ : %p>
@"NSString"16@?0@8
success
FAILURE
HH:mm:ss MM/dd
screenOffAfterAlert
waitToEndAnimation
orientationSupported
nightstandEnabled
alertAndAnimate
willPerformVSH
TB,R,N,V_screenOffAfterAlert
TB,R,N,V_waitToEndAnimation
TB,R,N,V_orientationSupported
TB,R,N,V_nightstandEnabled
TB,R,N,V_alertAndAnimate
TB,R,N,V_willPerformVSH
options
stage
imageID
animationCompletionDate
iomfbPhase
delegate
T@"<CSLPIChargingPresentationDelegate>",W,N,V_delegate
Ti,N,V_iomfbPhase
TQ,R,N,V_stage
T@"CSLPIChargingAlertOptions",R,N,V_options
TI,R,N,V_imageID
T@"NSDate",R,N,V_animationCompletionDate
activePresentation
T@"CSLPIChargingPresentation",&,N
v24@?0@"CSLPIChargingAlertOptions"8@?<v@?@"NSDate">16
v16@?0@"NSDate"8
alertPresentationHandler
T@?,C,N,V_alertPresentationHandler
alertDismissHandler
T@?,C,N,V_alertDismissHandler
endAnimationHandler
T@?,C,N,V_endAnimationHandler
nightstandChangeHandler
T@?,C,N,V_nightstandChangeHandler
T@"CSLPIChargingPresentation",&,N,V_activePresentation
T@"<CSLPIChargingCoordinatorDelegate>",R,W,N,V_delegate
<%@:%p client:%@-%p flipbook:%p aotEnabled:%u isActiveProvider:%u>
T@"<CSLSScreenWakeProviderDelegate>",W,N
usesFlipbook
TB,R,N
client
T@"<CSLSAOTModeProvider>",&,N
T@"<CSLSAOTModeProvider>",&,N,V_client
aotEnabled
TB,N,V_aotEnabled
nil backlight assertion provider - assertion will fail to operate!!!
com.apple.ControlCenter
hideGraceSensitiveUI
%@ wake at %@ with %lds leeway
<%@: %@>
identifier
T@"NSString",C,N,V_identifier
leeway
Tq,N,V_leeway
TB,R,N,GisScheduled
%@ %p (%@ %p)
%@ %p
 (%@)
DebugFlipbookColorOverlay
DebugFlipbookLabelOverlay
flipbook
com.apple.system.prefs
disableFlipbookCapacityWorkaround
AOT Offscreen Window
updateFlipbook
flipbookDestroyed
TESTING
fract:%.3f
index:%u
%@-%@
index:%u
%@-%@
aotViewController changed
beginPresentation
begin:%d
v20@?0@"CSLPIFlipbookUpdate"8B16
endPresentation
specifiers
@16@?0@8
@"NSString"8@?0
flipbookFull
FlipbookTimerUpdate
timerFiredAndTimeDiscontinuous
timerFiredAndTimeDiscontinuous-inactive
timerFired
invalidation'%@':%u->update:%p
FlipbookInvalidation
debugFlipbookColorChanged
canSleepFlipbookTarget
canSleep
canSleep-fill
willSleep
willPowerOn
abortSleepTasks
AOTViewController
T@"UIViewController<CSLSAOTViewController>",&,N
kCSLClockBecameVisibleNotification
timer[%p]: %@, %.2f-%.2f seconds
reasonStr
<%@:%p reason:%d:'%@' 2m:%d 3m:%d 4m:%d 5m:%d 6m:%d>
supportsSecureCoding
TB,R
Ti,R,N,V_reason
T@"NSString",R,N,V_reasonStr
upToTwoMinCount
Ti,R,N,V_upToTwoMinCount
upToThreeMinCount
Ti,R,N,V_upToThreeMinCount
upToFourMinCount
Ti,R,N,V_upToFourMinCount
upToFiveMinCount
Ti,R,N,V_upToFiveMinCount
upToSixMinCount
Ti,R,N,V_upToSixMinCount
state
pendingCompletion
willNotSleep
systemWake
TQ,R,N
TQ,R,N,V_machContinuousTimeStamp
v32@?0@"CSLPIFlipbookFrame"8Q16^B24
q24@?0@"<CSLPIMachContinuousTimeStampProvider>"8@"<CSLPIMachContinuousTimeStampProvider>"16
lastFrame
T@"CSLPIFlipbookFrame",R,N
nextFrame
count
active in dealloc %@
tried to add observer for reason:%@ after update ended:%@
Swapped update has existing power assertion %@ and current update has existing power assertion %@
########## DBG_CODE: (%d)
system wake (%@)
sleep imminent (%@)
failed to start monitoring power
already monitoring power!
already stopped monitoring power!
unexpected powerChangedMessage:%u notificationID:%p
__systemPowerCallback called on %@ after _isStopped=YES
%p:%@ attempting to schedule timer %.2f seconds into the future (too far)
scheduling %p:%@ %stimer at %@, leeway:%.1fs
canceling %p:%@ %stimer at %@, leeway:%.1fs
%p:%@ %stimer fired: scheduled %@, leeway:%.1fs
rescheduling %p:%@ timer at %@, leeway:%.1fs, was scheduled at %@
defering sleep: %p:%@ at %@, leeway:%.1fs
Not deferring sleep with fire imminent for %p:%@ because leeway is too big: %.1fs
updated observers now hasUnfilteredObservers:%d withScreenOff:%d
addObserver:%@ observeFilteredGestures:NO includingWhenScreenOff:YES is invalid, observeFilteredGestures must be YES if includingWhenScreenOff is YES
addObserver:%@ observeFilteredGestures:%d includingWhenScreenOff:%d
removeObserver:%@
wakeGestureRecognized:%d, notifying %d observers
Error (%ld) creating power assertion {name=%@; type=%@}
%@ %@ handled by %{public}@ (firstResponder = %{public}@; keyWindow = %{public}@)
%@ %@ NOT handled (firstResponder = %{public}@; keyWindow = %{public}@)
%@ %@ NOT handled (firstResponder = %{public}@; keyWindow = %{public}@); %@; checked:%@
nil key window, using main window: %@
WORKAROUND: nil firstResponder, attempted to set to %@ (%@)
%@: nil firstResponder, nil rootViewController
nil responder, using %@
Crown tapped
Button tapped
Chord tapped
Crown held
Button held
Chord held
Crown long-held
Button long-held
Chord long-held
Crown double-tapped
Button double-tapped
Chord double-tapped
Crown held and released
Button held and released
Chord held and released
Crown down
Button down
System wake button
Rotate to wake scroll up
Rotate to wake scroll down
%@ handled %@ %@
there can be only one! (ChargingCoordinator): %@ will not be added, already have %@
presentChargingAlert:%@
CSLPIChargingCoordinatorBlockDelegate alloc (old SPI)
%p setIsActiveProvider:%{BOOL}u was:%{BOOL}u client:%p
%p !aotEnabled:%{BOOL}u or !isActiveProvider:%{BOOL}u, releasing flipbook
Change Screen Wake Client
%p Changing backlight client from %@ to %@, screenOn: %{BOOL}u, aotEnabled: %{BOOL}u 
%p Client change screen on complete
%p Client change screen off complete
%p provider will deactivate, releasing flipbook:%p
(%p:%p) didChangeActiveProvider:%{BOOL}u
handleScreenOn
%p handleScreenOnAnimated:%{BOOL}d flags:0x%x
%p Animation completed handleScreenOnAnimated:%{BOOL}d flags:0x%x
%p started handleScreenOnAnimated:%{BOOL}d flags:0x%x
handleScreenOff
%p handleScreenOffAnimated:%{BOOL}d flags:0x%x
%p completed handleScreenOffAnimated:%{BOOL}d flags:0x%x
%p Animation completed handleScreenOffAnimated:%{BOOL}d flags:0x%x
%p Finished first flipbook frame
%p No flipbook created, skipping generation
%p started handleScreenOffAnimated:%{BOOL}d flags:0x%x
scheduling system wake: %@
canceling system wake: %@
workaround for <rdar://problem/49047367> - increasing flipbook capacity by one
failed to get flipbook
flipbook:%p created with frameCapacity:%d viewController:%p context:%p viewHeirarchy:%@
flipbook:%p destroyed
%p showing debug color overlay
%p hiding debug color overlay
%p showing debug label overlay
%p hiding debug label overlay
%p begin flipbook presentation (removing %u frames)
%p beginPresentationForReason:%u newUpdate:%p expiring active oldUpdate:%p
%p endPresentationForReason:%u update:%p
%p cancelled %@
%p %.0fms waking elapsed for update<%p> to generate flipbook (%u new frames) didCompleteMinute:%{BOOL}u refreshTimer:%@
%p will not schedule next update (no longer current) update:%@ current:%@
%p generate next frames for update:%@ currentFrameCount:%u newFrames:%u capacity:%lu frames:%@
%p:%p [obsolete, oldUpdate] [%@ to %@] [%u]
%p:%p [skipped] [%@ to %@] [%u] %@ (%.2lfs after updateStart) previous:%@
########## DBG_CODE: (%d) [%lld, %lld, %lld, %lld]
%p:%p [%u:%llu] [%@ to %@] [%d] %@ (%.2lfs after updateStart - CA:%lf in %.2lfs)
%p:%p [error-aborted [%@ to %@] [%d] %@ (%.2lfs after updateStart - CA:in %.2fs) %@
%p:%p flipbook timer fired haveFrameOnGlassForCurrentMinute:%{BOOL}u didInvalidate:%{BOOL}u update:%@ frameOnGlass:%@
%p:%p flipbook timer fired but flipbook not active : update:%@
%p (deprecated, will ignore time)frameSpecifierOnScreenAtPresentationTime:%@
%p (deprecated, will ignore time) invalidateFramesOnOrAfterPresentationTime:%@ forReason:%@
%p invalidateAllFramesForReason:'%@':%u
%p invalidatedFrames cancelAtTime:%.2lf, onGlassFlipbookFrameTime=%.2lf reason:%@
%p invalidation newUpdate:%p expiring active oldUpdate:%p reason:%@
%p invalidation newUpdate:%p oldUpdate:%p didRemoveFrameOnGlass:%{BOOL}u reason:%@
%p began %@ at CA:%.2f (mach:%lld)
%p ended inactive update reason:"%{public}@" didComplete:%{BOOL}u update:%@ next:%@ timer:%@
%p %lldms to complete %u flipbook frames (%lu/%lu total : %llu) reason:"%{public}@" (refresh in %lf sec) didComplete:%{BOOL}u update:%@ next:%@ timer:%@
%p %lldms to complete %u flipbook frames (%lu/%lu total : %llu) reason:"%{public}@" (refresh in %lf sec) didComplete:%{BOOL}u update:%p next:%p
%p:%p update next animation from:'%@' to:'%@'
%p:%p update (new date) next animation from:'%@' to:'%@'
%p (canSleep) frameCount:%u target:%u update:%p timer:%@
%p canSleep:%{BOOL}u frameCount:%u target:%u update:%p timer:%@
NULL update for reason %@: %@
%p willUpdate (%{public}@) targetFlipbookSize:%u(%u) updateFrames:%u totalFrames:%u update:%p
%p willNotUpdate (%{public}@) targetFlipbookSize:%u(%u) updateFrames:%u totalFrames:%u update:%p
targetFlipbookSize zero for update:%@
%p:%p done, no more room, target:%u size:%u/%lu update:%@
%p:%p done, reached target:%u size:%u/%lu update:%@
%p:%p no longer current update (%p), will not check for room (%u/%lu), update:%@, current:%@
%p (willSleep) but update:%p not complete (%lu/%lu frames) update:%p timer:%lf sec
%p (willSleep) frameCount:%lu update:%p timer:%lf sec
%p (willPowerOn) frameCount:%lu update:%p wasActive:%{BOOL}u
%p (abortSleepTasks) frameCount:%lu update:%p wasActive:%{BOOL}u currentUpdate:%p
%p (abortSleepTasks) frameCount:%lu update:%p wasActive:%{BOOL}u
%p system activity assertion not reliquished before dealloc; id:%@ state:%u
%p system activity assertion reliquished twice; id:%@ state:%u
%p system activity assertion reliquished; id:%@ state:%u hadUncalledCompletion:%{BOOL}u
%p system activity assertion timed out: %@
(add) will remove invalidatedOnScreenFrame:%@ added:%@
no expired frames (only 1 frame):%@
search %{public}@ insertion index:%d/%d from frames:%@
removing expired frames (frameCount:%u) from range:%@ 
first:%@ 
rangeEnd:%@ 
last:%@
no expired frames (frameCount:%u) insertionIndex:%u, first:%@
invalidating frames reason:%u range:%@ frameCount:%u 2m:%d 3m:%d 4m:%d 5m:%d 6m:%d 
startingWith:%@ 
expired:%@ 
frames:%@
(removeall:%u) set invalidatedOnScreenFrame:%@
search all frames after:%{public}@  using invalidated frame instead:%@ frames:%@
search failed, all frames after:%{public}@ frames:%@
search all frames before:%{public}@, using last frame:%@ from frames:%@
search found %{public}@ is before %{public}@ (index:%d/%d) frame:%@ from frames:%@
search %{public}@ found no frame (frames empty)
?ffffff
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
CSLPIMinorDetentAssertion
CSLPIDuetSession
CSLPIFlipbookUpdate
CSLPIDock
CSLPISystemSleepGlobalObserver
CSLPISystemSleepObserverDelegate
NSObject
CSLPISystemSleepObserver
CSLPISystemSleepGlobalObserverObserver
CarouselPlugins
CSLPIRecursivePreventSleepAssertion
CSLPIStartupService
CSLPITimer
CSLPISharedWorkloop
CSLPIWakeGestureMonitor
BSDescriptionProviding
CSLAssertionBlockSentinelBase
CSLAssertionBlockSentinel
CSLAssertionBlockHandlerSentinel
CSLAssertionBlockTimeoutSentinel
CSLPIFlipbookFrame
CSLSFrameSpecifier
CSLPISoftWakeScheduler
CSLPISoftWakeSchedulerProtocol
CSLPIMedicalID
CSLPITimedPowerAssertion
CSLPIPowerAssertion
CSLPIBacklight
CSLPIButtonHandlerOverrider
CSLPIButtonHandler
CSLPIChargingAlertOptions
CSLPIChargingPresentation
Internal
CSLPIChargingCoordinating
CSLPIChargingCoordinatorBlockDelegate
CSLPIChargingCoordinatorDelegate
CSLPIChargingCoordinator
CSLPIChargingPresentationDelegate
CSLPIDetentManager
CSLPIScreenWakeProvider
CSLSScreenWakeProvider
CSLPIBacklightAssertion
CSLControlCenterPreferences
CSLPIScheduledSystemWake
CSLPIFlipbook
CSLPIFlipbookUpdateDelegate
CSLSFlipbookFrameCoordinator
CSLPILogoAssertion
CSLPIDispatchTimer
CSLFlipbookInvalidation
NSSecureCoding
NSCoding
CSLPISystemActivityAssertion
CSLPIMachContinuousTimeStampHolder
CSLPIMachContinuousTimeStampProvider
CSLPIFlipbookFrameStore
init
detentProvider
takeMinorDetentAssertion:
initWithReason:
dealloc
reason
setReason:
.cxx_destruct
_reason
_wrappedAssertion
copy
_setFocusedBundleIDs:forClient:
addObjectsFromArray:
enumerateKeysAndObjectsUsingBlock:
clientDictionary
setObject:forKeyedSubscript:
removeObjectForKey:
carouselDuetSession
setFocusedBundleIDs:forClient:
_allFocusedBundleIDs
queue
setQueue:
setClientDictionary:
_queue
_clientDictionary
date
array
autoupdatingCurrentCalendar
setMinute:
endUpdateDidCompleteAnimationFrames:
_relinquishPowerAssertion
isDate:equalToDate:toUnitGranularity:
relinquish
builderWithObject:
appendUnsignedInteger:withName:
loggingStringForPresentationTime:
appendString:withName:skipIfEmpty:
loggingStringForAnimationMinute:
stringWithFormat:
appendString:withName:
appendBool:withName:ifEqualTo:
count
componentsJoinedByString:
build
setSecond:
currentAnimationEndDate
dateByAddingComponents:toDate:options:
didStartUpdate:
countByEnumeratingWithState:objects:count:
didEndUpdate:wasActive:didCompleteAnimationFrames:notifyObserversBlock:
addObject:
nextDateAfterDate:matchingComponents:options:
updateDidAdvanceToNextMinute:wasInitialFrame:
mutableCopy
powerAssertion
setPowerAssertion:
isAsserted
components:fromDate:
hour
minute
second
nanosecond
initAsInitialUpdateWithDelegate:
initWithFirstAnimationStartDate:firstAnimationEndDate:lastFrameFromPreviousUpdate:delegate:
dateIsCurrentMinute:
description
reasons
scheduleDate
startUpdate
addDidEndUpdateObserverBlock:reason:
addReason:
incrementFrameCount
advanceToNextAnimationDates
swapEndUpdateObserversAndCopyReasonsFromUpdate:
encodePresentationTime:
isActive
frameCount
referenceDate
startTime
currentAnimationStartDate
lastFrameFromPreviousUpdate
targetFlipbookSize
setTargetFlipbookSize:
isPartialUpdate
setIsPartialUpdate:
wasAborted
setAborted:
_calendar
_oneMinute
_didEndUpdateObserverBlocks
_reasons
_delegate
_active
_isPartialUpdate
_aborted
_frameCount
_referenceDate
_startTime
_currentAnimationStartDate
_currentAnimationEndDate
_lastFrameFromPreviousUpdate
_targetFlipbookSize
_powerAssertion
isDocked
createDockStatusViewController
setProvider:
provider
mainBundle
bundleIdentifier
initWithServiceName:
_startObserving
_stopObserving
enumerateObserversWithBlock:
isSleepImminent
addObserver:
removeObserver:
_observeWithAction:completion:
canSleep
sleepImminent
willNotSleep
systemWake
abortSleepTasks
initForGlobalObserver:withQueue:identifier:delegate:
stop
setAttemptingToSleep:
setSleepImminent:
sharedInstance
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
systemSleepObserverWillPowerOn:
systemSleepObserverHasPoweredOn:
systemSleepObserver:canSleep:
systemSleepObserver:willSleepWithCompletion:
systemSleepObserverWillNotSleep:
systemSleepObserverAbortSleepTasks:
abortAllSleepTasks
isAttemptingToSleep
_systemSleepObserver
_observerStore
_attemptingToSleep
_sleepImminent
_startPowerMonitoring
raise:format:
_stopPowerMonitoring
initWithMessage:
setCalled:
initWithQueue:identifier:delegate:
_systemPowerChanged:notificationID:
_identifier
_systemPowerConnection
_systemPowerPort
_systemPowerNotifier
_isStopped
imageAsset
CSL_nonAssetCatalogCGImage
imageWithCGImage:
CGImage
CSL_nonAssetCatalogImage
initWithIdentifier:description:timeout:
releaseAssertion
takeAssertion
_description
_timeout
_count
lock
unlock
sharedStartupService
isLaunchCompleted
markLaunchCompleted
_launchCompleted
_launchCompletedLock
alloc
initWithFireInterval:leewayInterval:serviceIdentifier:queue:handler:
schedule
initWithFireInterval:leewayInterval:shouldWakeDevice:serviceIdentifier:queue:handler:
initWithIdentifier:leeway:
_fireTimer
cancel
_calculatedWallClockFireTime
scheduleInSeconds:
_scheduleWithFireTime:wallClockFireTime:rawScheduleTime:rawScheduleDelta:
timeIntervalSinceReferenceDate
timeIntervalSince1970
isScheduled
cancelWake
scheduleWithFireTime:
_scheduleWake
_unschedule
_rawTimeIntervalRemaining
_rawTimeRemaining
scheduleWake:
_rescheduleAfterSystemWake
initWithAssertionType:assertionName:
take
_manuallyFireTimer
_takePowerAssertion
scheduledTimerWithFireInterval:leewayInterval:serviceIdentifier:queue:handler:
scheduleWithDate:
timeRemaining
setScheduled:
fireInterval
setFireInterval:
leewayInterval
setLeewayInterval:
shouldWakeDevice
setShouldWakeDevice:
serviceIdentifier
setServiceIdentifier:
handler
setHandler:
_dispatchTimer
_schedulingMutex
_scheduledWake
_wallClockFireTime
_rawScheduleTime
_rawScheduleDelta
_scheduledWithWallTime
_scheduled
_shouldWakeDevice
_fireInterval
_leewayInterval
_serviceIdentifier
_handler
workloop
dispatchWithQOSClass:block:
serialQueueWithQOSClass:label:
initWithOptions:capacity:
_withObserversMutex_hasUnfilteredObservers
_withObserversMutex_hasUnfilteredObserversWhenScreenOff
wakeGestureMonitor:nowHasUnfilteredObservers:includingWhenScreenOff:
addObserver:observeFilteredGestures:includingWhenScreenOff:
removeObject:
_updateObserversWithBlockWhileHoldingMutexLock:
willChangeBacklight
allObjects
backlightWasOn
gestureType
wakeGestureRecognized:
succinctDescription
descriptionWithMultilinePrefix:
succinctDescriptionBuilder
descriptionBuilderWithMultilinePrefix:
appendArraySection:withName:skipIfEmpty:
delegate
setDelegate:
addObserver:observeFilteredGestures:
hasUnfilteredObservers
hasUnfilteredObserversWhenScreenOff
_screenOffFilteredObservers
_filteredObservers
_observers
_observersMutex
atomicTestAndSetCalled:
isCalled
_lock
_called
message
setMessage:
_message
initWithHandler:
initWithHandler:timeout:
timeout
_timer
_timerQueue
initWithLocaleIdentifier:
setLocale:
setDateFormat:
setUnitsStyle:
setAllowedUnits:
distantPast
isEqualToDate:
stringFromDate:
stringFromDate:toDate:
initWithAnimationStartDate:animationEndDate:index:frameSpecifier:
loggingStringForMachContinuousTime:
loggingStringForCAMediaTime:
presentationTime
shortLoggingStringForAnimationMinute:
frameWithAnimationStartDate:animationEndDate:index:frameSpecifier:
fraction
animationStartDate
animationEndDate
index
frameSpecifier
machContinuousTimeStamp
setMachContinuousTimeStamp:
caMediaTimeStamp
setCaMediaTimeStamp:
_index
_animationStartDate
_animationEndDate
_frameSpecifier
_machContinuousTimeStamp
_caMediaTimeStamp
scheduleSoftWake:
cancelSoftWake
sharedScheduler
initWithAssertionType:assertionName:timeout:
numberWithDouble:
dictionaryWithObjects:forKeys:count:
_assertionID
_assertionType
_assertionName
globalPowerAssertionSerialQueue
_assertionQueue
backlightProviderIsScreenOn
backlightProviderWillScreenBeOn
backlightProviderIsScreenBlanked
onForIdentifier:reason:isUserInitiated:pid:timestamp:
offForIdentifier:reason:isUserInitiated:pid:timestamp:
invalidateAllFramesForReason:
screenOn
willBeOn
screenBlanked
onForIdentifier:reason:isUserInitiated:
offForIdentifier:reason:isUserInitiated:
invalidateFramesOnOrAfterPresentationTime:forReason:
setOverride:
setPriority:
overriderWithOverride:andPriority:
priority
override
_priority
_override
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
enumerateObjectsUsingBlock:
removeObjectAtIndex:
activityForButtonMask:event:
reverseObjectEnumerator
preHandleButton:eventType:firstDownTime:lastUpTime:
keyWindow
_firstResponderForWindow:
walkResponderChainToHandleButton:eventType:firstDownTime:lastUpTime:handlersChecked:
postHandleButton:eventType:firstDownTime:lastUpTime:
uiStateDescription
mainWindow
firstResponder
rootViewController
becomeFirstResponder
addButtonHandlerOverride:withPriority:
removeButtonHandlerOverride:
postCSLButton:eventType:firstDownTime:lastUpTime:
handleButton:eventType:firstDownTime:lastUpTime:
handleButton:eventType:
nextResponder
dateWithTimeIntervalSinceReferenceDate:
_buildDescriptionWithBuilder:
appendBool:withName:
initWithScreenOffAfterAlert:waitToEndAnimation:orientationSupported:nightstandEnabled:alertAndAnimate:willPerformVSH:
screenOffAfterAlert
waitToEndAnimation
orientationSupported
nightstandEnabled
alertAndAnimate
willPerformVSH
_screenOffAfterAlert
_waitToEndAnimation
_orientationSupported
_nightstandEnabled
_alertAndAnimate
_willPerformVSH
appendObject:withName:
appendUnsignedInt:withName:
appendObject:withName:skipIfNil:
chargingPresentation:didAdvanceToStage:
initWithOptions:
animationStartedWithCompletionDate:
showingBlack
animatingFromBlackToStaticImage
showingStaticImage:
animatingAfterStaticImage
finishingAnimation
dismissed
stage
options
imageID
animationCompletionDate
iomfbPhase
setIomfbPhase:
_imageID
_iomfbPhase
_stage
_options
_animationCompletionDate
_withClassLock:
setActivePresentation:
chargingCoordinator:beginPresentation:
activePresentation
chargingCoordinator:dismissPresentation:
chargingCoordinator:endPresentationAnimation:
chargingCoordinator:nightstandEnabled:
presentChargingAlert:
dismissChargingAlert
endChargingAlertAnimation
nightstandChanged:
setManager:
getManager
addCoordinator:
removeCoordinator:
activeCoordinator
removeActiveCoordinator
dateWithTimeIntervalSinceNow:
initWithAlertPresentationHandler:alertDismissHandler:endAnimationHandler:nightstandChangeHandler:
alertPresentationHandler
setAlertPresentationHandler:
alertDismissHandler
setAlertDismissHandler:
endAnimationHandler
setEndAnimationHandler:
nightstandChangeHandler
setNightstandChangeHandler:
_alertPresentationHandler
_alertDismissHandler
_endAnimationHandler
_nightstandChangeHandler
initWithDelegate:
turnBacklightOn:
turnBacklightOff
addAssertionForAlertPolicy:
_strongDelegate
_activePresentation
__withDetentProviderLock:
setDetentProvider:
_lock_configureFlipbook
aotViewController
initWithFrameCapacity:aotViewController:telemetryDelegate:
setFrameCoordinator:
handleAOTEnabled:
setAOTViewController:
didChangeActiveProvider:completion:
handleScreenOnAnimated:flags:brightnessRamp:completion:
handleScreenOffAnimated:flags:brightnessRamp:completion:
setAotEnabled:
usesFlipbook
client
handleScreenBlanked
handleScreenUnblanked
setIsActiveProvider:
willBecomeInactiveProvider:
endPresentationForReason:completion:
setScreenOn:
setWillBeOn:
flush
synchronize
beginPresentationWithCompletion:
setClient:
initWithClient:telemetryDelegate:maximumFlipbookFrameCount:backlightProxy:
aotEnabled
_backlightProxy
_screenOn
_isActiveProvider
_telemetryDelegate
_flipbook
_maximumFlipbookFrameCount
_aotEnabled
_client
initWithIdentifier:reason:flags:timeoutSeconds:timeoutBlock:
takeAssertionWithCompletion:
takeAssertionWithIdentifier:reason:flags:timeoutSeconds:timeoutBlock:completion:
initWithSpecification:timeoutBlock:
logAction:ofType:
setAssertionProvider:
takeAssertionWithIdentifier:reason:flags:timeoutSeconds:timeoutBlock:
_cancelWake
timeIntervalSinceDate:
identifier
setIdentifier:
leeway
setLeeway:
_wakeDate
_leeway
isViewLoaded
view
layer
name
setName:
stringByAppendingFormat:
initWithTelemetryDelegate:
initWithSuiteName:
boolForKey:
mainDisplay
flipBookWithCapacity:
mainScreen
displayConfiguration
initWithDisplay:
setRootViewController:
setHidden:
blackColor
setBackgroundColor:
defaultCenter
deviceOrientationChanged
addObserver:selector:name:object:
updateOffscreenWindowRotation
context
recursiveDescription
setContext:
onWorkQueue_flipbookTimerFired
addObserver:forKeyPath:options:context:
setShowDebugColorOverlay:
setShowDebugLabelOverlay:
removeObserver:name:object:
removeAllFramesForReason:reasonStr:
bounds
setBounds:
setPosition:
colorWithRed:green:blue:alpha:
CGColor
setBorderColor:
setBorderWidth:
removeFromSuperlayer
setForegroundColor:
setFontSize:
scale
setRasterizationScale:
setContentsScale:
setAlignmentMode:
setString:
addSublayer:
_withLock_invalidateAllFramesforReason:reasonStr:
beginPresentationForReason:completion:
cancelAtTime:
withLock_endUpdate:didCompleteAnimationFrames:
onWorkQueue_performNextUpdateToTargetFlipbookSize:reason:completion:
sharedDeviceOrientation
isInverted
_rotation
setAdditionalRootLayerAffineTransform:
withLock_generationCompleteForUpdate:didCompleteAnimationFrames:
lastFrame
laterDate:
isCurrentUpdate:
framesForAnimationFromTime:toTime:
generateNextAnimationFramesForUpdate:frameSpecifiers:
appendArraySection:withName:skipIfEmpty:objectTransformer:
updateShouldAdvanceToNextMinute:
generateNextAnimationFramesForUpdate:
generationCompleteForUpdate:didCompleteAnimationFrames:
generateFrameForUpdate:frameSpecifiers:index:completion:
objectAtIndex:
compare:
begin
updateToFrame:
updateDebugOverlayForFrame:
commit
timeIntervalSinceNow
numberWithBool:
renderForTime:options:error:
addFrame:
code
localizedDescription
frameOnScreenAtMachContinousTime:
frameSpecifierOnScreenNow
setPurgeable
didRenderFlipbookFrames:
observeValueForKeyPath:ofObject:change:context:
objectForKey:
unsignedIntegerValue
removeExpiredFrames
withLock_updateShouldAdvanceToNextMinute:
onWorkQueue_hasRoomForAnotherMinute
frameSpecifierOnScreenAtPresentationTime:
AOTViewController
_workQueue
_aotViewController
_flipbookFrames
_updateFlipbookTimer
_update
_observedDefaults
_frameCapacity
_flipbookWillBeActive
_willSleep
_showDebugColorOverlay
_debugOverlayColorVarient
_debugColorOverlayLayer
_showDebugLabelOverlay
_debugLabelOverlayLayer
_offscreenWindow
initWithName:
newLogoHandle:
setLogoHandleVendor:
assertionWithName:
_logoHandle
navigateToClockAnimated:
_source
_didSuspend
decodeIntForKey:
decodeObjectOfClass:forKey:
initWithReason:reasonStr:upToTwoMinCount:upToThreeMinCount:upToFourMinCount:upToFiveMinCount:upToSixMinCount:
encodeInt:forKey:
encodeObject:forKey:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
reasonStr
upToTwoMinCount
upToThreeMinCount
upToFourMinCount
upToFiveMinCount
upToSixMinCount
_upToTwoMinCount
_upToThreeMinCount
_upToFourMinCount
_upToFiveMinCount
_upToSixMinCount
_reasonStr
initWithIdentifier:timeout:
takeWithCompletion:
_timeoutAssertion
_checkIfCompleteForAction:
takeWithIdentifier:timeout:completion:
_timeoutTimer
_state
_startMachTime
_startContinuousDeltaTime
_startKernelAPWakeTime
_wasAfterCanSleep
_wasAfterWillSleep
_completion
initWithMachContinousTimeTimeStamp:
lastObject
firstObject
_insertionIndexForMachContinousTime:
removeObjectsInRange:
indexSetWithIndexesInRange:
enumerateObjectsAtIndexes:options:usingBlock:
didInvalidateFlipbook:
logInvalidatedFramesInRange:forReason:reasonStr:
removeAllObjects
nextFrame
_invalidatedOnScreenFrame
@24@0:8@16
@16@0:8
v16@0:8
v24@0:8@16
@"NSString"
v32@0:8@16@24
@"NSObject<OS_dispatch_queue>"
@"NSMutableDictionary"
@48@0:8@16@24@32@40
B24@0:8@16
v20@0:8B16
v32@0:8@?16@24
Q24@0:8@16
B16@0:8
I16@0:8
Q16@0:8
v24@0:8Q16
@"NSCalendar"
@"NSDateComponents"
@"NSMutableArray"
@"<CSLPIFlipbookUpdateDelegate>"
@"NSDate"
@"CSLPIFlipbookFrame"
@"CSLPIPowerAssertion"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@?24
v24@0:8@"CSLPISystemSleepObserver"16
v32@0:8@"CSLPISystemSleepObserver"16@?<v@?B>24
v32@0:8@"CSLPISystemSleepObserver"16@?<v@?>24
v32@0:8Q16@?24
@"CSLPISystemSleepObserver"
@"CSLSConcurrentObserverStore<CSLPISystemSleepGlobalObserverObserver>"
@40@0:8@16@24@32
@44@0:8B16@20@28@36
v28@0:8I16^v20
@"<CSLPISystemSleepObserverDelegate>"
^{IONotificationPort=}
^{CGImage=}16@0:8
@40@0:8@16@24d32
@"NSLock"
@56@0:8d16d24@32@40@?48
@60@0:8d16d24B32@36@44@?52
v24@0:8d16
v48@0:8Q16d24Q32Q40
d16@0:8
@?16@0:8
v24@0:8@?16
@"CSLPIDispatchTimer"
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@"CSLPIScheduledSystemWake"
v28@0:8I16@?20
@28@0:8I16r*20
@"NSString"24@0:8@"NSString"16
@"BSDescriptionBuilder"24@0:8@"NSString"16
@"BSDescriptionBuilder"16@0:8
v28@0:8@16B24
v32@0:8@16B24B28
@"NSHashTable"
@"<CSLSWakeGestureMonitorDelegate>"
B20@0:8B16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@24@0:8@?16
@32@0:8@?16d24
@"NSObject<OS_dispatch_source>"
@24@0:8d16
@24@0:8Q16
@44@0:8@16@24I32@36
f16@0:8
@"NSDate"16@0:8
@"<CSLSFrameSpecifier>"
v24@0:8@"NSDate"16
@40@0:8^{__CFString=}16^{__CFString=}24d32
^{__CFString=}
@32@0:8^{__CFString=}16^{__CFString=}24
v32@0:8@16I24B28
@32@0:8@16d24
@"<CSLPIButtonHandlerOverride>"
v32@0:8@16d24
v48@0:8Q16Q24Q32Q40
@32@0:8Q16Q24
@56@0:8Q16Q24Q32Q40@48
@40@0:8B16B20B24B28B32B36
v20@0:8I16
i16@0:8
v20@0:8i16
@"CSLPIChargingAlertOptions"
@"<CSLPIChargingPresentationDelegate>"
v24@0:8@"CSLPIChargingAlertOptions"16
v32@0:8@"CSLPIChargingCoordinator"16@"CSLPIChargingPresentation"24
v28@0:8@"CSLPIChargingCoordinator"16B24
@48@0:8@?16@?24@?32@?40
v32@0:8@16Q24
v32@0:8@"CSLPIChargingPresentation"16Q24
@"<CSLPIChargingCoordinatorDelegate>"
@"CSLPIChargingPresentation"
v40@0:8B16I20@?24@?32
v28@0:8B16@?20
v40@0:8B16I20@?<v@?d>24@?<v@?>32
v24@0:8@"NSString"16
v24@0:8@?<v@?>16
v28@0:8B16@?<v@?>20
@"<CSLSScreenWakeProviderDelegate>"16@0:8
v24@0:8@"<CSLSScreenWakeProviderDelegate>"16
@"<CSLSAOTModeProvider>"16@0:8
v24@0:8@"<CSLSAOTModeProvider>"16
@48@0:8@16@24Q32@40
@"<CSLPIBacklightProxy>"
@"<CSLFlipbookTelemetryDelegate>"
@"CSLPIFlipbook"
@"<CSLSAOTModeProvider>"
@56@0:8@16I24I28d32@?40@?48
@48@0:8@16I24I28d32@?40
@32@0:8@16@?24
@32@0:8@16q24
q16@0:8
v24@0:8q16
v40@0:8@16B24B28@?32
v24@0:8@"CSLPIFlipbookUpdate"16
v40@0:8@"CSLPIFlipbookUpdate"16B24B28@?<v@?>32
v28@0:8@"CSLPIFlipbookUpdate"16B24
@"<CSLSFrameSpecifier>"16@0:8
@"<CSLSFrameSpecifier>"24@0:8@"NSDate"16
v32@0:8@"NSDate"16@"NSString"24
@40@0:8Q16@24@32
v28@0:8i16@?20
v44@0:8@16@24I32@?36
v28@0:8i16@20
v48@0:8@16@24@32^v40
v40@0:8Q16@24@?32
@"UIViewController<CSLSAOTViewController>"
@"CSLPIFlipbookFrameStore"
@"CADisplayFlipBook"
@"CSLPITimer"
@"CSLPIFlipbookUpdate"
@"NSUserDefaults"
@"CALayer"
@"CATextLayer"
@"_UIWatchFlipbookRootWindow"
@"CSLUILogoHandle"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@48@0:8i16@20i28i32i36i40i44
@40@0:8@16d24@?32
@44@0:8{_NSRange=QQ}16i32@36
@28@0:8i16@20
Q24@0:8Q16
