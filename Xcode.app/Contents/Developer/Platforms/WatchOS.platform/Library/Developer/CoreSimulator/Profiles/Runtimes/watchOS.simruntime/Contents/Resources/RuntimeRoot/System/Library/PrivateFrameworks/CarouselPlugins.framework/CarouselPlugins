unknown
reason
T@"NSString",&,N,V_reason
v8@?0
com.apple.Carousel.CSLPIDuetSession
v32@?0@"NSArray"8@"NSArray"16^B24
queue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
clientDictionary
T@"NSMutableDictionary",&,N,V_clientDictionary
CSLPIDockDidDockNotification
CSLPIDockDidUndockNotification
com.apple.Carousel.CSLPIPowerAssertionPriorityRootQueue
%@.systemSleepObserver
v16@?0@8
%@ sleepImminent:%u obs:
v16@?0@"<CSLPISystemSleepGlobalObserverObserver>"8
systemSleepGlobalObserver
v12@?0B8
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
sleepImminent
TB,GisSleepImminent,V_sleepImminent
%@ (%@) was not stopped before dealloc
(%@) canSleep
asserted
TB,R,N,GisAsserted
launchCompleted
TB,R,N,GisLaunchCompleted
<%@: %@ %@ %@, int:%0.1fs leeway:%.1fs>
wallclock 
NoIdleSleepAssertion
fireInterval
Td,N,V_fireInterval
leewayInterval
Td,N,V_leewayInterval
shouldWakeDevice
TB,N,V_shouldWakeDevice
serviceIdentifier
T@"NSString",C,N,V_serviceIdentifier
handler
T@?,C,N,V_handler
scheduled
TB,N,GisScheduled,V_scheduled
CSLPISharedWorkloop
v16@?0@"CSLPIWakeGestureMonitor"8
observers count
filteredObservers count
screenOffFilteredObservers count
observers
filteredObservers
screenOffFilteredObservers
Failed to call block: %@
message
T@"NSString",C,N,V_message
called
TB,N,GisCalled,V_called
v28@?0B8@"NSError"12@"NSString"20
CSLPIMedicalIDButtonPressed
CSLPIMedicalIDStayOnKey
AssertType
AssertName
TimeoutSeconds
TimeoutAction
TimeoutActionRelease
PowerAssertion_acquire
<CSLPIPowerAssertion %p name:'%@' type:%@ assertionID:%d isAsserted:%u>
CSLPIBacklightWillTurnOn
CSLPIBacklightDidTurnOn
CSLPIBacklightWillTurnOff
CSLPIBacklightDidTurnOff
priority
Td,N,V_priority
override
T@"<CSLPIButtonHandlerOverride>",W,N,V_override
q24@?0@"CSLPIButtonHandlerOverrider"8@"CSLPIButtonHandlerOverrider"16
v32@?0@"CSLPIButtonHandlerOverrider"8Q16^B24
<%@ : %p>
@"NSString"16@?0@8
success
FAILURE
en_US_POSIX
HH:mm:ss MM/dd
%@ (in %@)
screenOffAfterAlert
waitToEndAnimation
orientationSupported
nightstandEnabled
alertAndAnimate
TB,R,N,V_screenOffAfterAlert
TB,R,N,V_waitToEndAnimation
TB,R,N,V_orientationSupported
TB,R,N,V_nightstandEnabled
TB,R,N,V_alertAndAnimate
options
stage
imageID
animationCompletionDate
delegate
T@"<CSLPIChargingPresentationDelegate>",W,N,V_delegate
TQ,R,N,V_stage
T@"CSLPIChargingAlertOptions",R,N,V_options
TI,R,N,V_imageID
T@"NSDate",R,N,V_animationCompletionDate
activePresentation
T@"CSLPIChargingPresentation",&,N
v24@?0@"CSLPIChargingAlertOptions"8@?<v@?@"NSDate">16
v16@?0@"NSDate"8
alertPresentationHandler
T@?,C,N,V_alertPresentationHandler
alertDismissHandler
T@?,C,N,V_alertDismissHandler
endAnimationHandler
T@?,C,N,V_endAnimationHandler
nightstandChangeHandler
T@?,C,N,V_nightstandChangeHandler
T@"CSLPIChargingPresentation",&,N,V_activePresentation
T@"<CSLPIChargingCoordinatorDelegate>",R,W,N,V_delegate
<%@:%p client:%@-%p isActiveProvider:%u>
T@"<CSLSScreenWakeProviderDelegate>",W,N
client
T@"<CSLSScreenWakeProvider>",&,N
T@"<CSLSScreenWakeProvider>",&,N,V_client
nil backlight assertion provider - assertion will fail to operate!!!
com.apple.ControlCenter
hideGraceSensitiveUI
%@ wake at %@ with %lds leeway
<%@: %@>
identifier
T@"NSString",C,N,V_identifier
leeway
Tq,N,V_leeway
TB,R,N,GisScheduled
%@ %p (%@ %p)
%@ %p
 (%@)
kCSLClockBecameVisibleNotification
timer[%p]: %@, %.2f-%.2f seconds
########## DBG_CODE: (%d)
system wake (%@)
sleep imminent (%@)
failed to start monitoring power
already monitoring power!
already stopped monitoring power!
unexpected powerChangedMessage:%u notificationID:%p
__systemPowerCallback called on %@ after _isStopped=YES
%p:%@ attempting to schedule timer %.2f seconds into the future (too far)
scheduling %p:%@ %stimer at %@, leeway:%.1fs
canceling %p:%@ %stimer at %@, leeway:%.1fs
%p:%@ %stimer fired: scheduled %@, leeway:%.1fs
rescheduling %p:%@ timer at %@, leeway:%.1fs, was scheduled at %@
defering sleep: %p:%@ at %@, leeway:%.1fs
Not deferring sleep with fire imminent for %p:%@ because leeway is too big: %.1fs
updated observers now hasUnfilteredObservers:%d withScreenOff:%d
addObserver:%@ observeFilteredGestures:NO includingWhenScreenOff:YES is invalid, observeFilteredGestures must be YES if includingWhenScreenOff is YES
addObserver:%@ observeFilteredGestures:%d includingWhenScreenOff:%d
removeObserver:%@
wakeGestureRecognized:%d, notifying %d observers
Error (%ld) creating power assertion {name=%@; type=%@}
%@ %@ handled by %{public}@ (firstResponder = %{public}@; keyWindow = %{public}@)
%@ %@ NOT handled (firstResponder = %{public}@; keyWindow = %{public}@)
%@ %@ NOT handled (firstResponder = %{public}@; keyWindow = %{public}@); %@; checked:%@
nil key window, using main window: %@
WORKAROUND: nil firstResponder, attempted to set to %@ (%@)
%@: nil firstResponder, nil rootViewController
nil responder, using %@
Crown tapped
Button tapped
Chord tapped
Crown held
Button held
Chord held
Crown long-held
Button long-held
Chord long-held
Crown double-tapped
Button double-tapped
Chord double-tapped
Crown held and released
Button held and released
Chord held and released
Crown down
Button down
System wake button
Rotate to wake scroll up
Rotate to wake scroll down
%@ handled %@ %@
there can be only one! (ChargingCoordinator): %@ will not be added, already have %@
presentChargingAlert:%@
CSLPIChargingCoordinatorBlockDelegate alloc (old SPI)
Change Screen Wake Client
%p Changing backlight client from %@ to %@, 
%p Client change screen on complete
%p Client change screen off complete
(%p:%p) didChangeActiveProvider:%{BOOL}u
handleScreenOn
%p handleScreenOnAnimated:%{BOOL}d flags:0x%x
%p Animation completed handleScreenOnAnimated:%{BOOL}d flags:0x%x
%p started handleScreenOnAnimated:%{BOOL}d flags:0x%x
handleScreenOff
%p handleScreenOffAnimated:%{BOOL}d flags:0x%x
%p completed handleScreenOffAnimated:%{BOOL}d flags:0x%x
%p Animation completed handleScreenOffAnimated:%{BOOL}d flags:0x%x
%p started handleScreenOffAnimated:%{BOOL}d flags:0x%x
scheduling system wake: %@
canceling system wake: %@
System activity assertion already taken: %@ (%ld)
System activity assertion reliquished: %@
System activity assertion timed out: %@
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
CSLPIMinorDetentAssertion
CSLPIDuetSession
CSLPIDock
CSLPISystemSleepGlobalObserver
CSLPISystemSleepObserverDelegate
NSObject
CSLPISystemSleepObserver
CSLPIRecursivePreventSleepAssertion
CSLPIStartupService
CSLPITimer
CSLPISystemSleepGlobalObserverObserver
CSLPISharedWorkloop
CSLPIWakeGestureMonitor
BSDescriptionProviding
CSLAssertionBlockSentinel
CSLPISoftWakeScheduler
CSLPISoftWakeSchedulerProtocol
CSLPIMedicalID
CSLPITimedPowerAssertion
CSLPIPowerAssertion
CSLPIBacklight
CSLPIButtonHandlerOverrider
CSLPIButtonHandler
CSLPIChargingAlertOptions
CSLPIChargingPresentation
Internal
CSLPIChargingCoordinating
CSLPIChargingCoordinatorBlockDelegate
CSLPIChargingCoordinatorDelegate
CSLPIChargingCoordinator
CSLPIChargingPresentationDelegate
CSLPIDetentManager
CSLPIScreenWakeProvider
CSLSScreenWakeProvider
CSLPIBacklightAssertion
CSLControlCenterPreferences
CSLPIScheduledSystemWake
CSLPILogoAssertion
CSLPIDispatchTimer
CSLPISystemActivityAssertion
init
detentProvider
takeMinorDetentAssertion:
initWithReason:
dealloc
.cxx_destruct
reason
setReason:
_reason
_wrappedAssertion
alloc
copy
_setFocusedBundleIDs:forClient:
addObjectsFromArray:
enumerateKeysAndObjectsUsingBlock:
clientDictionary
setObject:forKeyedSubscript:
removeObjectForKey:
carouselDuetSession
setFocusedBundleIDs:forClient:
_allFocusedBundleIDs
queue
setQueue:
setClientDictionary:
_queue
_clientDictionary
isDocked
createDockStatusViewController
setProvider:
provider
mainBundle
bundleIdentifier
stringWithFormat:
initWithServiceName:
_startObserving
_stopObserving
array
description
addObject:
enumerateObserversWithBlock:
isSleepImminent
componentsJoinedByString:
addObserver:
removeObserver:
canSleep
sleepImminent
systemWake
initWithQueue:identifier:delegate:
stop
setSleepImminent:
_observeWithAction:completion:
sharedInstance
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
systemSleepObserverWillPowerOn:
systemSleepObserverHasPoweredOn:
systemSleepObserver:canSleep:
systemSleepObserver:willSleepWithCompletion:
systemSleepObserverWillNotSleep:
_systemSleepObserver
_observerStore
_sleepImminent
_startPowerMonitoring
raise:format:
_stopPowerMonitoring
initWithMessage:
setCalled:
_systemPowerChanged:notificationID:
_identifier
_delegate
_systemPowerConnection
_systemPowerPort
_systemPowerNotifier
_isStopped
initWithIdentifier:description:timeout:
releaseAssertion
isAsserted
takeAssertion
_description
_timeout
_count
lock
unlock
sharedStartupService
isLaunchCompleted
markLaunchCompleted
_launchCompleted
_launchCompletedLock
initWithFireInterval:leewayInterval:serviceIdentifier:queue:handler:
schedule
initWithFireInterval:leewayInterval:shouldWakeDevice:serviceIdentifier:queue:handler:
initWithIdentifier:leeway:
_fireTimer
cancel
_calculatedWallClockFireTime
scheduleInSeconds:
_scheduleWithFireTime:wallClockFireTime:rawScheduleTime:rawScheduleDelta:
timeIntervalSinceReferenceDate
timeIntervalSince1970
isScheduled
cancelWake
scheduleWithFireTime:
_scheduleWake
_unschedule
_relinquishPowerAssertion
_rawTimeIntervalRemaining
_rawTimeRemaining
scheduleWake:
_rescheduleAfterSystemWake
initWithAssertionType:assertionName:
take
relinquish
_manuallyFireTimer
_takePowerAssertion
scheduledTimerWithFireInterval:leewayInterval:serviceIdentifier:queue:handler:
scheduleWithDate:
timeRemaining
setScheduled:
fireInterval
setFireInterval:
leewayInterval
setLeewayInterval:
shouldWakeDevice
setShouldWakeDevice:
serviceIdentifier
setServiceIdentifier:
handler
setHandler:
_dispatchTimer
_schedulingMutex
_scheduledWake
_powerAssertion
_wallClockFireTime
_rawScheduleTime
_rawScheduleDelta
_scheduledWithWallTime
_scheduled
_shouldWakeDevice
_fireInterval
_leewayInterval
_serviceIdentifier
_handler
workloop
dispatchWithQOSClass:block:
serialQueueWithQOSClass:label:
initWithOptions:capacity:
_withObserversMutex_hasUnfilteredObservers
_withObserversMutex_hasUnfilteredObserversWhenScreenOff
wakeGestureMonitor:nowHasUnfilteredObservers:includingWhenScreenOff:
addObserver:observeFilteredGestures:includingWhenScreenOff:
removeObject:
_updateObserversWithBlockWhileHoldingMutexLock:
count
willChangeBacklight
allObjects
backlightWasOn
gestureType
countByEnumeratingWithState:objects:count:
wakeGestureRecognized:
succinctDescription
descriptionWithMultilinePrefix:
succinctDescriptionBuilder
build
builderWithObject:
appendUnsignedInteger:withName:
descriptionBuilderWithMultilinePrefix:
appendArraySection:withName:skipIfEmpty:
delegate
setDelegate:
addObserver:observeFilteredGestures:
hasUnfilteredObservers
hasUnfilteredObserversWhenScreenOff
_screenOffFilteredObservers
_filteredObservers
_observers
_observersMutex
isCalled
message
setMessage:
_called
_message
scheduleSoftWake:
cancelSoftWake
sharedScheduler
initWithAssertionType:assertionName:timeout:
numberWithDouble:
dictionaryWithObjects:forKeys:count:
_assertionID
_assertionType
_assertionName
backlightProviderIsScreenOn
backlightProviderWillScreenBeOn
backlightProviderIsScreenBlanked
onForIdentifier:reason:isUserInitiated:pid:timestamp:
offForIdentifier:reason:isUserInitiated:pid:timestamp:
screenOn
willBeOn
screenBlanked
onForIdentifier:reason:isUserInitiated:
offForIdentifier:reason:isUserInitiated:
invalidateFramesOnOrAfterPresentationTime:forReason:
setOverride:
setPriority:
overriderWithOverride:andPriority:
priority
override
_priority
_override
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
enumerateObjectsUsingBlock:
removeObjectAtIndex:
activityForButtonMask:event:
reverseObjectEnumerator
preHandleButton:eventType:firstDownTime:lastUpTime:
keyWindow
_firstResponderForWindow:
walkResponderChainToHandleButton:eventType:firstDownTime:lastUpTime:handlersChecked:
postHandleButton:eventType:firstDownTime:lastUpTime:
uiStateDescription
mainWindow
firstResponder
rootViewController
becomeFirstResponder
addButtonHandlerOverride:withPriority:
removeButtonHandlerOverride:
postCSLButton:eventType:firstDownTime:lastUpTime:
handleButton:eventType:firstDownTime:lastUpTime:
handleButton:eventType:
nextResponder
dateWithTimeIntervalSinceReferenceDate:
initWithLocaleIdentifier:
setLocale:
setDateFormat:
setUnitsStyle:
setAllowedUnits:
stringFromDate:
date
stringFromDate:toDate:
_buildDescriptionWithBuilder:
appendBool:withName:
initWithScreenOffAfterAlert:waitToEndAnimation:orientationSupported:nightstandEnabled:alertAndAnimate:
screenOffAfterAlert
waitToEndAnimation
orientationSupported
nightstandEnabled
alertAndAnimate
_screenOffAfterAlert
_waitToEndAnimation
_orientationSupported
_nightstandEnabled
_alertAndAnimate
appendObject:withName:
appendUnsignedInt:withName:
appendObject:withName:skipIfNil:
chargingPresentation:didAdvanceToStage:
initWithOptions:
animationStartedWithCompletionDate:
showingBlack
animatingFromBlackToStaticImage
showingStaticImage:
animatingAfterStaticImage
finishingAnimation
dismissed
stage
options
imageID
animationCompletionDate
_imageID
_stage
_options
_animationCompletionDate
_withClassLock:
setActivePresentation:
chargingCoordinator:beginPresentation:
activePresentation
chargingCoordinator:dismissPresentation:
chargingCoordinator:endPresentationAnimation:
chargingCoordinator:nightstandEnabled:
presentChargingAlert:
dismissChargingAlert
endChargingAlertAnimation
nightstandChanged:
setManager:
getManager
addCoordinator:
removeCoordinator:
activeCoordinator
removeActiveCoordinator
dateWithTimeIntervalSinceNow:
initWithAlertPresentationHandler:alertDismissHandler:endAnimationHandler:nightstandChangeHandler:
alertPresentationHandler
setAlertPresentationHandler:
alertDismissHandler
setAlertDismissHandler:
endAnimationHandler
setEndAnimationHandler:
nightstandChangeHandler
setNightstandChangeHandler:
_alertPresentationHandler
_alertDismissHandler
_endAnimationHandler
_nightstandChangeHandler
initWithDelegate:
turnBacklightOn:
turnBacklightOff
addAssertionForAlertPolicy:
_strongDelegate
_activePresentation
__withDetentProviderLock:
setDetentProvider:
didChangeActiveProvider:completion:
handleScreenOnAnimated:flags:brightnessRamp:completion:
handleScreenOffAnimated:flags:brightnessRamp:completion:
client
handleScreenBlanked
handleScreenUnblanked
setIsActiveProvider:
willBecomeInactiveProvider:
setScreenOn:
setWillBeOn:
flush
synchronize
setClient:
initWithClient:backlightProxy:
_lock
_backlightProxy
_screenOn
_isActiveProvider
_client
initWithIdentifier:reason:flags:timeoutSeconds:timeoutBlock:
takeAssertionWithCompletion:
takeAssertionWithIdentifier:reason:flags:timeoutSeconds:timeoutBlock:completion:
initWithSpecification:timeoutBlock:
logAction:ofType:
setAssertionProvider:
takeAssertionWithIdentifier:reason:flags:timeoutSeconds:timeoutBlock:
_cancelWake
timeIntervalSinceDate:
identifier
setIdentifier:
leeway
setLeeway:
_wakeDate
_leeway
isViewLoaded
view
layer
name
setName:
stringByAppendingFormat:
initWithName:
newLogoHandle:
setLogoHandleVendor:
assertionWithName:
_logoHandle
navigateToClockAnimated:
_source
_didSuspend
UTF8String
_timeoutAssertion
initWithIdentifier:timeout:
_timeoutTimer
@24@0:8@16
@16@0:8
v16@0:8
v24@0:8@16
@"NSString"
v32@0:8@16@24
@"NSObject<OS_dispatch_queue>"
@"NSMutableDictionary"
B16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@?24
v24@0:8@"CSLPISystemSleepObserver"16
v32@0:8@"CSLPISystemSleepObserver"16@?<v@?B>24
v32@0:8@"CSLPISystemSleepObserver"16@?<v@?>24
v32@0:8Q16@?24
v20@0:8B16
@"CSLPISystemSleepObserver"
@"CSLSConcurrentObserverStore<CSLPISystemSleepGlobalObserverObserver>"
@40@0:8@16@24@32
v28@0:8I16^v20
@"<CSLPISystemSleepObserverDelegate>"
^{IONotificationPort=}
@40@0:8@16@24d32
@"NSLock"
@56@0:8d16d24@32@40@?48
@60@0:8d16d24B32@36@44@?52
v24@0:8d16
v48@0:8Q16d24Q32Q40
d16@0:8
@?16@0:8
v24@0:8@?16
@"CSLPIDispatchTimer"
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@"CSLPIScheduledSystemWake"
@"CSLPIPowerAssertion"
v28@0:8I16@?20
@28@0:8I16r*20
@"NSString"24@0:8@"NSString"16
@"BSDescriptionBuilder"24@0:8@"NSString"16
@"BSDescriptionBuilder"16@0:8
v28@0:8@16B24
v32@0:8@16B24B28
@"NSHashTable"
@"<CSLSWakeGestureMonitorDelegate>"
v24@0:8@"NSDate"16
@40@0:8^{__CFString=}16^{__CFString=}24d32
^{__CFString=}
@32@0:8^{__CFString=}16^{__CFString=}24
v32@0:8@16I24B28
@32@0:8@16d24
@"<CSLPIButtonHandlerOverride>"
v32@0:8@16d24
v48@0:8Q16Q24Q32Q40
@32@0:8Q16Q24
@56@0:8Q16Q24Q32Q40@48
@36@0:8B16B20B24B28B32
v20@0:8I16
I16@0:8
@"CSLPIChargingAlertOptions"
@"NSDate"
@"<CSLPIChargingPresentationDelegate>"
v24@0:8@"CSLPIChargingAlertOptions"16
v32@0:8@"CSLPIChargingCoordinator"16@"CSLPIChargingPresentation"24
v28@0:8@"CSLPIChargingCoordinator"16B24
@48@0:8@?16@?24@?32@?40
v32@0:8@16Q24
v32@0:8@"CSLPIChargingPresentation"16Q24
@"<CSLPIChargingCoordinatorDelegate>"
@"CSLPIChargingPresentation"
v40@0:8B16I20@?24@?32
v28@0:8B16@?20
v40@0:8B16I20@?<v@?d>24@?<v@?>32
v24@0:8@?<v@?>16
v28@0:8B16@?<v@?>20
@"<CSLSScreenWakeProviderDelegate>"16@0:8
v24@0:8@"<CSLSScreenWakeProviderDelegate>"16
@"<CSLSScreenWakeProvider>"16@0:8
v24@0:8@"<CSLSScreenWakeProvider>"16
@32@0:8@16@24
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<CSLPIBacklightProxy>"
@"<CSLSScreenWakeProvider>"
@56@0:8@16I24I28d32@?40@?48
@48@0:8@16I24I28d32@?40
@32@0:8@16@?24
@32@0:8@16q24
q16@0:8
v24@0:8q16
@"CSLUILogoHandle"
v24@0:8Q16
@"NSObject<OS_dispatch_source>"
