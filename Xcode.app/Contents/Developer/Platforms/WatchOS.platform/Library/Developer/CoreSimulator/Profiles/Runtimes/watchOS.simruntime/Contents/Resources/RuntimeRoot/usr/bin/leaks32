.memgraph
%s[%d]: [fatal] unable to read input graph: %s
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
Target process of memgraph:  %@ [%u]
DYLD_INSERT_LIBRARIES=/usr/lib/libLeaksAtExit.dylib
%s[%d]: [fatal] --atExit must be followed by " -- <command>"
%s[%d]: [fatal] No command specified after '--atExit -- '
%s[%d]: [fatal] Unable to launch --atExit command '%s': %s
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: Unable to deallocate target task port: %d (%s)
launchd
coresymbolicationd
coreservicesd
UserEventAgent
rpc.lockd
launchservicesd
Activity Monitor
mdworker
spindump_agent
WindowServer
hidd
bluetoothd
logd
loginwindow
usbd
TouchBarServer
sysdiagnose
coreaudiod
kextd
notifyd
powerd
ReportCrash
ReportMemoryException
ReportPanic
watchdogd
cfprefsd
Process exists but has not started -- it is launched-suspended
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v4@?0
v16@?0I4I8I12
v8@?0I4
i12@?0r^v4r^v8
%s-%d-%s
/tmp/%s-allProcesses[%d].XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing output files into %s
Skipping process of wrong architecture:  %d %s
%5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
generate corpse in analyzeAllProcesses()
Exception '%s', reason: '%s'
v12@?0i4I8
v28@?0i4r*8B12I16I20^B24
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
%s[%d]: [fatal] 'pid_for_task' failed: %s (%d)
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
Target process is using %s so not generating corpse for better performance.
Failed to generate corpse from the process: %d (%s)
%s[%d]: [fatal] %s, exiting
%s[%d]: %s
%s[%d]: [fatal] Corpse generated for the process is incomplete, which can happen with processes that use a lot of memory
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v12@?0{_CSTypeRef=II}4
%s/usr/bin/%s
%s%s
error in %@ <classes> pattern '%@': %s
Region
Thread
.*%@
%@.*
error in % <region-description> pattern '%@': %s
%s[%d]: [fatal] %s
matchingKindOfClass
TB,N,GisMatchingKindOfClass
VMUOptionParserDomain
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SamplingTools_Sim/SamplingTools-64511.120.1/VMUOptionParser.m
<Unknown File>
Invalid parameter not satisfying: %@
block && (longName || shortName)
!longName || ([longName length] && [longName characterAtIndex:0] != '-')
Option's long-name '%@' is invalid or already in use.
Option's short-name '%c' is invalid or already in use.
%s%@
%c%c%@%c
[@@@spacing@@@]%@
com.apple.SamplingTools
%s flag supplied with no argument
unrecognized option '%s'
[invalid usage]: %s
%s: %s
Usage: %s %s
Apple-internal options:
[@@@spacing@@@]
purposeDescription
T@"NSString",C,N,V_purposeDescription
syntaxDescription
T@"NSString",C,N,V_syntaxDescription
discussion
T@"NSString",C,N,V_discussionDescription
singleHyphenLongNames
TB,N,V_singleHyphenLongNames
parametersShowAsAssignment
TB,N,V_parametersShowAsAssignment
optind
Ti,R
v12@?0@"NSString"4^@8
backtraceString
T@"NSString",C,N,V_backtraceString
v12@?0I4^B8
-[VMUObjectGraph(Extensions) isRootNode:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/SamplingTools_Sim/SamplingTools-64511.120.1/leaks/leaks.m
self.inverted
v20@?0I4I8I12^B16
Search through a process for leaked memory.
[options] pid | partial-process-name | memory-graph-file
       leaks [options] --atExit -- <command-and-arguments>
exclude
exclude leaked blocks whose backtraces include the specified symbol
help
show this helpful usage message!
showTiming
initialization
quiet
suppress the process description header and footer
list
print the leaks as a list ("classic"-style) rather than as a tree
groupByType
in leak trees, group children by type rather than showing individual instances
nocontext
do not print content descriptions of discovered leaks
nostacks
do not print backtraces or save them in the memory graph file, even when available
fullStacks
print backtraces with one line per frame
nosources
do not show sourceFile:lineNumber in backtraces
rawNames
show raw class names instead of display names.
fullStackHistory
collects all memory allocation call stacks that are available, including historical allocations that have been freed.
outputGraph
path
save a memory graph file into the given directory or file
/tmp
phys_footprint
collect phys_footprint statistics for memory regions
physFootprint
compress
fullContent
save allocation content descriptions into the memory graph file
excludePersonalInformation
nocontents
show the hex content of leaked allocations, if there is no description of content
conservative
don't attempt smart ivar-based scanning, go byte for byte
noScanOverlay
DT_NO_SCAN_OVERLAY
forkCorpse
generate a corpse fork from process and run leaks on it
getCorpseFromParent
trace
address
print chains of references from process 'roots' (e.g., global data) to the given block
traceTree
print a reverse tree of references, from the given block up to the process roots
-traceTree
referenceTree
print a reference tree of allocated memory starting at root nodes
virtual
show virtual size of referenced VM regions instead of dirty size
autoreleasePools
print contents of autorelease pools, by thread
debug
mode
enable additional debugging modes; list available modes with -debug=help
Modes of 'leaks <process> -debug'.  More than one different mode flag can be passed,
such as '-debug='.*Storage.*' -debug=references'.
    -debug            -- full output
    -debug=layout     -- full output, including object layout and values of ivars
    -debug=histogram  -- only show histogram of number of allocations having each reference count
    -debug=references -- only show references to the allocation (not content or layout), and only if reference count > 1
    -debug=contents   -- only show contents (reference from the allocation)
    -debug=<address>  -- only show the allocation at or containing <address>
    -debug=<classes-pattern>  -- show allocations whose class name matches pattern
    -debug=<region-description-pattern>  -- show non-malloc nodes (e.g. VM regions, threads) whose description matches pattern
    -debug=stacks     -- show stack backtraces for nodes
layout
histogram
references
contents
stacks
-debug
maxInteriorOffset
how far into large regions to scan to find outgoing references, in bytes
suppressOutput
outputFile
write output to given path instead of stdout
unable to open output file "%s" for writing: %s (%d)
ipsIncidentID
rateLimit
nonIPSMemgraphCount
vmalso
show leaked VM regions
novm
vmonly
vmPageStatistics
checkAbandoned
report abandoned memory
postprocessGraph
allProcesses
minimumPid
run leaks against all processes (or those >= minimumPid), with the given arguments
atExit
launch the specified command and run leaks when that process exits. This should be the last argument; use '--atExit -- <command-and-arguments>'
processInfo
show only process description header and binary images list
Cannot pass pid, process-name, or memgraph ('%@'), with '--atExit -- <command>'
unknown argument: %@
com.apple.leaks
at most one mode should be specified (--outputGraph, --autoreleasePools, --traceTree, --referenceTree, --debug, --processInfo)
at most one mode should be specified (--outputGraph, --traceTree)
Ignoring -fullContent flag because -excludePersonalInfo was specified.
--al
to generate memgraphs for all processes, use 'leaks -outputGraph -allProcesses <other arguments>'
no output graph path specified
no process specified
Saving all memgraph files into output directory (ignoring path %s)
generate corpse
%s[%d]: Process %d is not debuggable.
Due to security restrictions, leaks cannot show memory contents of restricted processes.
-[scanner processSnapshotGraph]
v8@?0^v4
completed setup of scanner and/or graph, proceeding to leaks analysis mode
%s[%d]: [fatal] ignoring --outputGraph option as path provided would overwrite the source graph file
leaks Report Version: 3.0
leaks Report Version: 4.0
, multi-line stacks
unable to instantiate a memory scanner.
%s[%d]: %s
%s[%d]: [fatal] %s
addRootNodesFromTask
addMallocNodesFromTask
%s[%d]: [fatal] target process no longer exists; abandoning...
archiving graph
%s[%d]: [fatal] cannot save a memgraph in IPS format and also save disk logs
length
bug_type
memgraph
name
displayName
incidentID
%s[%d]: [fatal] unable to write JSON header: %s
write graph to file
%@[%d].XXXXXX.%@
%s[%d]: [fatal] unable to create file "%s" for memory graph: %d %s
%s[%d]: [fatal] unable to write graph to output file "%s": %s
url= <<%s>>
%@_%@
LogType
Output graph successfully written to '%s' [%3.2f MB]
memgraph.%@
Will not upload memgraph. rate limits: global=%lf proc=%lf. rand=%lf
memgraph.CountLimit
memgraph.%@.CountLimit
Will not take memgraph, because the limit of %.0lf graphs has been reached
%@.t
%@.signal
%@.exponent
%@.numerator
%@.coef_denominator
com.apple.da
mobile
DISKLOGS
v8@?0@?<i@?^vL>4
v48@?0I4I8I12{?=^{?}{?=QIQ}^{?}}16^B44
SCANNING %s
Call stack: %s
REFERENCES TO THIS: %u
   STRONG: %u  CONSERVATIVE: %u  WEAK UU etc: %u
   SELF: %u
  SELF-REF
   %s
LAYOUT OF %s (%s)
%llu bytes into 
--> %@%@
%5u: %s%s%s  %s
v16@?0@"VMUFieldInfo"4I8^B12
v8@?0@"VMUClassInfo"4
%5u: <extra space>[%llu]
CONTENTS:
%u POINTERS FROM %s
v12@?0@"VMUVMRegion"4^B8
NODE COUNT:  %u   OWNING-REFS COUNT: %u   AVERAGE OWNING-REFS PER NODE: %.2f
    %10u %s references
SELF-REFERENCES:  %u
%26lu   %8lu
   leaked blocks and VM regions
   %s
MallocStackLoggingLite
v32@?0I4{?=Qb60b4@}8^B28
%s[%d]: [fatal] address provided for reference tracing (%#llx) not found in target process's heap
Tracing: %s
C12@?0I4C8
B20@?0I4I8I12*16
Found %u root%s referencing: %s
This is a reverse reference tree showing how the specified block is referenced.
The top node is the specified block, the next level down are blocks that reference that, and so on.
The number at the start of each line is the number of paths-to-roots going through that node.
This reverse reference tree can be imported into Instruments using Import Sample Data to allow data mining.
printReferenceTree identifying root regions
printReferenceTree building call tree from references
__DATA
%@ %@
Stack
Stack of %@
void printReferenceTree(VMUProcessObjectGraph *__strong)
<Unknown Function>
Malloc blocks should not be root nodes of reference graph
__DATA __objc
void printReferenceTree(VMUProcessObjectGraph *__strong)_block_invoke
expected dstCallTreeNode to be nil since dstNode wasn't marked reachable previously
%@ %@: '%@[]'
expected to get VMUVMRegion for VM region node
%@  dirty: %s  swapped: %s
%@  purgableVolatile: %s
printReferenceTree addChildCountsIntoNode
printReferenceTree printing call tree
printReferenceTree releasing tree
malloc<%s>
malloc-block
NSString *_nodeTypeDescription(__strong id<VMUCommonGraphInterface>, uint32_t, VMUObjectGraphNode *, BOOL)
VM: %@
kernel
thread
unknown VMUGraphNodeType
unaligned +%lld:  --> %@
Storage)
 + %llu
%@%@%s --> %@
no posix thread
unsigned int printAutoreleasePools(VMUProcessObjectGraph *__strong, VMUTaskMemoryScanner *__strong, __strong id<VMUStackLogReader>)_block_invoke
dyld
_main_thread
%*s  %8u
Total entries in autoreleasepools:
Unique entries in autoreleasepools:
%*s  %8u block%s  %8s bytes
Memory size of autoreleasepool content blocks:
Memory directly held only by autorelease pools:
Memory indirectly held only by autorelease pools:
%*s    ======           ======
Total memory of autorelease pools and content blocks:
Thread %u  %s
    %s
        %u:  
%@  %@
NSString *memoryTreeHeldByAutoreleasedNode(VMUProcessObjectGraph *__strong, VMUTaskMemoryScanner *__strong, VMUMarkingMap *, VMUCallTreeNode *__unsafe_unretained *, uint32_t)
Expected non-nil srcCallTreeNode
NSString *memoryTreeHeldByAutoreleasedNode(VMUProcessObjectGraph *__strong, VMUTaskMemoryScanner *__strong, VMUMarkingMap *, VMUCallTreeNode *__unsafe_unretained *, uint32_t)_block_invoke
uint32_t doNormalLeakDetection(task_t, VMUProcessObjectGraph *__strong, VMUTaskMemoryScanner *__strong, __strong id<VMUStackLogReader>)_block_invoke
expected leaked allocation or region to have (or be) a region
%s: %#llx  size=%llu  
VM: unknown region type
zone: %s
   %s  %s  %s
  %s
v40@?0r*4I8{?=Qb60b4@}12@"VMUVMRegion"32^B36
%s[%d]: [fatal] unable to inspect heap ranges of target process; it may be using a malloc replacement library without the required support
Process %d: %u nodes malloced for %llu KB
scan for leaks
Process %d: %u leak%s for %llu total leaked bytes.
Process %d: %u object%s abandoned for %llu total abandoned bytes.
Leak
Abandoned
v36@?0I4{?=Qb60b4@}8@"VMUVMRegion"28^B32
%u leak%s excluded (not printed)
  %@
0x%08x 
< content unavailable >
printLeakTree identifying strongly-connected-components (cycles) in the graph
v12@?0r^I4I8
printLeakTree identifying root leaks and cycles
printLeakTree enumerate stack logs to populate rootLeakAddressToStackIDMap
v32@?0I4Q8Q16{?=Q}24
printLeakTree invert rootLeakAddressToStackIDMap to produce stackID --> {size,count,root-leak-call-tree-root} map
ROOT LEAK: 
printLeakTree building call tree from references
unsigned int printLeakTree(VMUProcessObjectGraph *__strong, VMUTaskMemoryScanner *__strong, __strong id<VMUStackLogReader>)_block_invoke
Expected node name to have 'ROOT CYCLE' prefix
CYCLE BACK TO 
printLeakTree addChildCountsIntoNode
(ROOT LEAK|CYCLE): <*(VM: \w+|\w+).*
(ROOT LEAK|CYCLE): 0x\S+ \[(.*)\].*
printLeakTree printing call tree
: 0x
$1: malloc<$2>
$1: <$2>
i12@?0@4@8
STACK OF 
INSTANCES
INSTANCE
%u %s OF '%s'
NO STACK
====
printLeakTree releasing tree
COUNT OF OWNING REFERENCES   NUMBER OF NODES WITH THAT COUNT
Autorelease pool pages not associated with a thread
    no autorelease pool
No autorelease pools.
        Empty
      POOL BOUNDARY
containsString:
hasSuffix:
stringByResolvingSymlinksInPath
defaultManager
fileExistsAtPath:isDirectory:
isExecutableFileAtPath:
attributesOfItemAtPath:error:
fileSize
dataWithContentsOfFile:options:error:
localizedDescription
UTF8String
string
processInfo
arguments
arrayWithArray:
objectAtIndexedSubscript:
lastPathComponent
setObject:atIndexedSubscript:
componentsJoinedByString:
appendFormat:
initWithTask:getBinariesList:
executablePath
parentPid
parentProcessPath
processName
length
intValue
arrayWithObjects:count:
initWithPid:
name
containsObject:
is64Bit
valueForEnvVar:
stringWithFormat:
numberWithInt:
stringValue
sharedTimerIfCreated
startWithMessage:
reason
callStackSymbols
init
hasPrefix:
dealloc
className
_regex:matchesName:
displayName
isEqualToString:
superclassInfo
_matchesClassInfo:
isMatchingKindOfClass
setMatchingKindOfClass:
initWithPattern:forArgument:error:
matchesNodeDetails:orNodeDescription:
_classesRegex
_vmRegionsRegex
_memoizedRegexResult
_matchingKindOfClass
initWithFormat:arguments:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
initWithString:
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:flags:handler:
stringWithUTF8String:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
characterAtIndex:
objectForKey:
setObject:forKey:
rangeOfString:
appendString:
stringWithString:
addObject:
removeAllObjects
userInfo
code
printOptionDescriptions:
count
countByEnumeratingWithState:objects:count:
stringByReplacingOccurrencesOfString:withString:
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:handler:
optind
parseArgumentsWithBlock:
usage:
.cxx_destruct
purposeDescription
setPurposeDescription:
syntaxDescription
setSyntaxDescription:
discussion
setDiscussion:
singleHyphenLongNames
setSingleHyphenLongNames:
parametersShowAsAssignment
setParametersShowAsAssignment:
_purposeDescription
_syntaxDescription
_discussionDescription
_optionDescriptions
_appleInternalOptionDescriptions
_optionBlockByString
_longOptStructs
_shortOpts
_spacing
_singleHyphenLongNames
_parametersShowAsAssignment
backtraceString
setBacktraceString:
_backtraceString
enumerateMembersOfGroupNode:withBlock:
inverted
referenceInfoWithName:
enumerateEdgesOfNode:withBlock:
isGroupNode:
isRootNode:
sharedTimer
stringByExpandingTildeInPath
boolValue
copy
stringWithCString:encoding:
directedGraphWithData:error:
processDescriptionString
binaryImagesDescription
description
setDebugTimer:
setShowRawClassNames:
stackLogReader
initWithTask:symbolicator:
setExcludedFrames:
setScanner:
setScanningMask:
processSnapshotGraphWithOptions:
defaultOverlay
refineTypesWithOverlay:
refineEdges:withOptions:markingInvalid:
removeMarkedEdges:
withEdgeMarkingMap:
stop
initWithTask:options:
setExactScanningEnabled:
setAbandonedMarkingEnabled:
setMaxInteriorOffset:
addRootNodesFromTask
addMallocNodesFromTask
plistRepresentationWithOptions:
numberWithUnsignedInteger:
setValue:forKey:
dataWithJSONObject:options:error:
dataWithData:
appendBytes:length:
appendData:
stringByAppendingPathComponent:
fileSystemRepresentation
initWithFileDescriptor:closeOnDealloc:
closeFile
pathExtension
stringByAppendingPathExtension:
createFileAtPath:contents:attributes:
fileURLWithPath:
fileHandleForWritingToURL:error:
absoluteString
truncateFileAtOffset:
stringByStandardizingPath
numberWithDouble:
scannerWithString:
scanDouble:
isAtEnd
streamFullStackLogsToBlock:
encapsulateData:to:withSupplementalDataTag:dataGeneratorBlock:
writeData:
invertedGraph
mapTableWithKeyOptions:valueOptions:
nodeNamespaceSize
zoneNameForIndex:
usesLiteMode
nodeDetails:
nodeDescription:
enumerateReferencesOfNode:withBlock:
symbolicatedBacktraceForNode:nodeDetails:isLiteZone:options:
nodeDescription:withDestinationNode:referenceInfo:
stringByAppendingString:
instanceSize
pointerSize
contentForNode:
typeName
offset
bitfieldWidth
descriptionOfFieldValueInObjectMemory:scanner:
size
getLeafFieldAtOffset:leafOffset:
stride
scanType
infoType
fullIvarNameAtOffset:
typedDescription
enumerateTypeFieldsWithBlock:
enumerateClassHierarchyWithBlock:
referenceDescription:withSourceNode:destinationNode:alignmentSpacing:
enumerateRegionsWithBlock:
task
enumerateObjectsWithBlock:
invertEdges
breadthFirstSearch:nodeVisitBlock:edgeVisitBlock:
initWithSymbolicator:sampler:options:
addChildWithName:address:count:numBytes:toNode:
invertedNode
stringFromCallTreeIndentIfNoBranches:
withNodeMarkingMap:
vmuVMRegionForNode:
path
isSubmap
type
handleFailureInFunction:file:lineNumber:description:
binarySectionRangeContainingAddress:
binarySectionNameForAddress:
regionSymbolRangeContainingAddress:
addRange:
sort
addUniqueChildWithName:address:count:numBytes:toNode:
rangeForLocation:
regionSymbolNameForAddress:
is64bit
addChildCountsIntoNode
printCallTreeToFile:
fieldAtOrBeforeOffset:
ivarName
markReachableNodesFromRoots:inMap:options:
markReachableNodesFromRoots:inMap:
threadNameForAddress:
nodeIsAutoreleasePoolContentPage:
rangeForSymbolName:inRegion:
nodeDetailIsAutoreleasePoolContentPage:
numberWithUnsignedInt:
unsignedIntValue
removeObject:
componentsSeparatedByString:
nodeDescription:withOffset:showLabel:
shortLabelForNode:
stringFromCallTreeWithOptions:
descriptionWithOptions:maximumLength:
binaryName
copyUserMarked
enumerateMarkedObjects:withBlock:
subgraphWithMarkedNodes:
labelForNode:
addGroupNodeForNodes:count:
stronglyConnectedComponentSearch:withRecorder:
inspectingLiveProcess
zoneCount
binaryPath
liteMSLPayloadforMallocAddress:size:
enumerateMSLRecordsAndPayloads:
symbolicatedBacktraceForStackID:options:
parentGroupForNode:
parent
substringFromIndex:
numChildren
comparePuttingRetainCycleNodesAtTop:
sortUsingSelector:
regularExpressionWithPattern:options:error:
sortedChildren
stringByReplacingMatchesInString:options:range:withTemplate:
sumOfChildCounts
objectForKeyedSubscript:
setObject:forKeyedSubscript:
compare:
keysSortedByValueUsingComparator:
lastObject
printCallTreeToFile:options:
examining %@ [%u]
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
VMUClassPatternMatcher
VMUOptionParser
VMUCallTreeRootWithBacktrace
Extensions
MbP?
@(#)PROGRAM:leaks  PROJECT:SamplingTools-64511.120.1
B8@0:4
v12@0:4B8
@20@0:4@8@12^@16
v8@0:4
B16@0:4^{?=iI*^{re_guts}}8@12
B12@0:4@8
B32@0:4{?=Qb60b4@}8@28
^{?=iI*^{re_guts}}
^{__CFDictionary=}
@8@0:4
v32@0:4@8c12i16@20@24@?28
v36@0:4@8c12i16@20@24I28@?32
i8@0:4
@12@0:4@?8
v12@0:4@8
@"NSString"
@"NSMutableArray"
@"NSMutableDictionary"
^{__CFArray=}
@"NSMutableString"
B12@0:4I8
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>18A391012</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.SamplingTools.leaks32</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>WatchSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>11M392v</string>
<key>DTPlatformName</key>
<string>watchsimulator</string>
<key>DTPlatformVersion</key>
<string>6.1</string>
<key>DTSDKBuild</key>
<string>17S432</string>
<key>DTSDKName</key>
<string>watchsimulator6.1.internal</string>
<key>DTXcode</key>
<string>1100</string>
<key>DTXcodeBuild</key>
<string>11M392v</string>
<key>MinimumOSVersion</key>
<string>6.1</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>safe</string>
</array>
<key>UIDeviceFamily</key>
<array>
<integer>4</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.iosurfaceinfo</key>
<true/>
<key>task_for_pid-allow</key>
<true/>
</dict>
</plist>
zPLR
zPLR
