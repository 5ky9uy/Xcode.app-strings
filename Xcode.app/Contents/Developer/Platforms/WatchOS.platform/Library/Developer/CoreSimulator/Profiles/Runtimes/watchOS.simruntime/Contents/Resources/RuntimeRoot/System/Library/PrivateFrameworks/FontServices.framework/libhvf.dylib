MbP?
Mb`?
MbP?
MbP?
partLoader
T@?,R,N
^{HVF_Part=^^?}24@?0Q8^{HVF_PartCache=^^?}16
translation
T{CGVector=dd},N
rotation
Td,N
axisValues
T{HVFAxisValues=^{HVF_PartTransform}QQ},D,N
subpartTransforms
T{HVFSubpartTransforms=^{HVF_PartTransform}QQ},D,N
com.apple.typeservices.hvf
render
allocs %6zd hiwater %6zd
 LEAKED %6zd bytes %6zd
Small sizes:
align %2d size %6zd: 
align %2d: 
Large size (>%d):
loadPart
renderPart
zPLR
HVFLoader
HVFPartTransform
loader
initWithTableData:
countParts
partLoader
loadPartAtIndex:usingPartCache:
.cxx_destruct
.cxx_construct
length
bytes
init
partTransform
initForPartAtIndex:withLoader:
translation
setTranslation:
rotation
setRotation:
axisValues
subpartTransforms
renderToContext:
{LoaderCBF="_vptr$Loader"^^?"tableData"{BinaryReader="cur"^C"end"^C}"formatFlags"Q"versMajor"S"versMinor"S"partCount"Q"partIndexOffsets"{BinaryReader="cur"^C"end"^C}}
@24@0:8@16
Q16@0:8
@?16@0:8
^{HVF_Part=^^?}32@0:8Q16^{HVF_PartCache=^^?}24
v16@0:8
@16@0:8
{HVF_PartTransform="translation"{ReadWriteProperty<CGVector, void>="get"{function<CGVector ()>="__f_"{__value_func<CGVector ()>="__buf_"{type="__lx"[32C]}"__f_"^{__base<CGVector ()>}}}"set"{function<void (const CGVector &)>="__f_"{__value_func<void (const CGVector &)>="__buf_"{type="__lx"[32C]}"__f_"^{__base<void (const CGVector &)>}}}}"rotation"{ReadWriteProperty<double, void>="get"{function<double ()>="__f_"{__value_func<double ()>="__buf_"{type="__lx"[32C]}"__f_"^{__base<double ()>}}}"set"{function<void (const double &)>="__f_"{__value_func<void (const double &)>="__buf_"{type="__lx"[32C]}"__f_"^{__base<void (const double &)>}}}}"axisValues"{ReadWriteProperty<double, unsigned long>="get"{function<Util::ReadWriteProperty<double, void> (const unsigned long &)>="__f_"{__value_func<Util::ReadWriteProperty<double, void> (const unsigned long &)>="__buf_"{type="__lx"[32C]}"__f_"^{__base<Util::ReadWriteProperty<double, void> (const unsigned long &)>}}}}"subpartTransforms"{ReadWriteProperty<HVF::PartTransform, unsigned long>="get"{function<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)>="__f_"{__value_func<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)>="__buf_"{type="__lx"[32C]}"__f_"^{__base<Util::ReadWriteProperty<HVF::PartTransform, void> (const unsigned long &)>}}}}"cache"{FlatPartCache="_vptr$PartCache"^^?"loader"{function<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)>="__f_"{__value_func<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)>="__buf_"{type="__lx"[32C]}"__f_"^{__base<std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > (unsigned long, HVF::PartCache &)>}}}"parts"{vector<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > >="__begin_"^{pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >}"__end_"^{pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > *, std::__1::allocator<std::__1::pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > > > >="__value_"^{pair<unsigned long, std::__1::unique_ptr<const HVF::Part, std::__1::default_delete<const HVF::Part> > >}}}}"part"^{Part}"partIndex"Q"blendContext"{BlendContext="transform"{Transform="tx"d"tyFlipped"d"scaleX"d"scaleY"d"shearX"d"shearY"d}"axisBlendValues"{AxisBlendValues="_defaultValue"{shared_ptr<const double>="__ptr_"^d"__cntrl_"^{__shared_weak_count}}"vixmap"{SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > >="virtsize"Q"ixspan"{vector<unsigned short, Util::Allocator<unsigned short> >="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, Util::Allocator<unsigned short> >="__value_"^S"__value_"{Allocator<unsigned short>="mem"^{MemoryResource}}}}}"values"{vector<double, Util::Allocator<double> >="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, Util::Allocator<double> >="__value_"^d"__value_"{Allocator<double>="mem"^{MemoryResource}}}}}"allNSPTransforms"{AllNSPTransforms="__begin_"^{Transform}"__end_"^{Transform}"__end_cap_"{__compressed_pair<HVF::Transform *, Util::Allocator<HVF::Transform> >="__value_"^{Transform}"__value_"{Allocator<HVF::Transform>="mem"^{MemoryResource}}}}"allNSPBlendValues"{AllNSPBlendValues="__begin_"^{NSPBlendValues}"__end_"^{NSPBlendValues}"__end_cap_"{__compressed_pair<HVF::NSPBlendValues *, Util::Allocator<HVF::NSPBlendValues> >="__value_"^{NSPBlendValues}"__value_"{Allocator<HVF::NSPBlendValues>="mem"^{MemoryResource}}}"_defaultValue"{optional<HVF::NSPBlendValues>=""(?="__null_state_"c"__val_"{NSPBlendValues="_defaultValue"{shared_ptr<const double>="__ptr_"^d"__cntrl_"^{__shared_weak_count}}"vixmap"{SpanIndexMap<std::__1::vector<unsigned short, Util::Allocator<unsigned short> > >="virtsize"Q"ixspan"{vector<unsigned short, Util::Allocator<unsigned short> >="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, Util::Allocator<unsigned short> >="__value_"^S"__value_"{Allocator<unsigned short>="mem"^{MemoryResource}}}}}"values"{vector<double, Util::Allocator<double> >="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, Util::Allocator<double> >="__value_"^d"__value_"{Allocator<double>="mem"^{MemoryResource}}}}})"__engaged_"B}}}}
@32@0:8Q16@?24
{CGVector=dd}16@0:8
v32@0:8{CGVector=dd}16
d16@0:8
v24@0:8d16
{HVFAxisValues=^{HVF_PartTransform}QQ}16@0:8
{HVFSubpartTransforms=^{HVF_PartTransform}QQ}16@0:8
B24@0:8@?16
