N3HVF9LoaderCBFE
ZN17HVF_PartTransformC1EvEUlmRN3HVF9PartCacheEE_
NSt3__110__function6__funcIZN17HVF_PartTransformC1EvEUlmRN3HVF9PartCacheEE_NS_9allocatorIS6_EEFPKNS3_4PartEmS5_EEE
NSt3__110__function6__baseIFPKN3HVF4PartEmRNS2_9PartCacheEEEE
Z51-[HVFPartTransform3 initForPartAtIndex:withLoader:]E3$_0
NSt3__110__function6__funcIZ51-[HVFPartTransform3 initForPartAtIndex:withLoader:]E3$_0NS_9allocatorIS2_EEFPKN3HVF4PartEmRNS5_9PartCacheEEEE
N3HVF4PartE
NSt3__117bad_function_callE
N3HVF13FlatPartCacheE
N3HVF9PartCacheE
N3HVF6LoaderE
N3HVF5ShapeE
ZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbE3$_5
ZZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbENK3$_5clEmEUlRKNS_13PartTransformEE_
NSt3__110__function6__funcIZZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbENK3$_5clEmEUlRKNS2_13PartTransformEE_NS_9allocatorISG_EEFvSF_EEE
NSt3__110__function6__baseIFvRKN3HVF13PartTransformEEEE
ZZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbENK3$_5clEmEUlvE_
NSt3__110__function6__funcIZZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbENK3$_5clEmEUlvE_NS_9allocatorISD_EEFNS2_13PartTransformEvEEE
NSt3__110__function6__baseIFN3HVF13PartTransformEvEEE
NSt3__110__function6__funcIZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbE3$_5NS_9allocatorISC_EEFN4Util17ReadWritePropertyINS2_13PartTransformEvEERKmEEE
NSt3__110__function6__baseIFN4Util17ReadWritePropertyIN3HVF13PartTransformEvEERKmEEE
ZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbE3$_4
ZZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbENK3$_4clEmEUlRKdE_
NSt3__110__function6__funcIZZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbENK3$_4clEmEUlRKdE_NS_9allocatorISF_EEFvSE_EEE
NSt3__110__function6__baseIFvRKdEEE
ZZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbENK3$_4clEmEUlvE_
NSt3__110__function6__funcIZZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbENK3$_4clEmEUlvE_NS_9allocatorISD_EEFdvEEE
NSt3__110__function6__baseIFdvEEE
NSt3__110__function6__funcIZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbE3$_4NS_9allocatorISC_EEFN4Util17ReadWritePropertyIdvEERKmEEE
NSt3__110__function6__baseIFN4Util17ReadWritePropertyIdvEERKmEEE
ZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbE3$_3
NSt3__110__function6__funcIZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbE3$_3NS_9allocatorISC_EEFvRKdEEE
ZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbE3$_2
NSt3__110__function6__funcIZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbE3$_2NS_9allocatorISC_EEFdvEEE
ZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbE3$_1
NSt3__110__function6__funcIZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbE3$_1NS_9allocatorISC_EEFvRK8CGVectorEEE
NSt3__110__function6__baseIFvRK8CGVectorEEE
ZN3HVF21PartTransformRendererC1EmNSt3__18functionIFPKNS_4PartEmRNS_9PartCacheEEEEbE3$_0
NSt3__110__function6__funcIZN3HVF21PartTransformRendererC1EmNS_8functionIFPKNS2_4PartEmRNS2_9PartCacheEEEEbE3$_0NS_9allocatorISC_EEF8CGVectorvEEE
NSt3__110__function6__baseIF8CGVectorvEEE
N3HVF9CompositeE
N4Util16StackMemResourceE
N4Util14MemoryResourceE
^v24@?0Q8^{HVF_PartCache=^^?}16
hvgl table header too small
hvgl table is wrong version
hvgl part table malformed
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
allocs %6zd hiwater %6zd
 LEAKED %6zd bytes %6zd
Small sizes:
align %2d size %6zd: 
align %2d: 
Large size (>%d):
HVF font: glyph index %lud out of range
Could not load HVF font; reason: %{public}s
Could not load HVF font; reason unknown.
Could not load HVF font; hvgl missing data or bad version
renderPart
zPLR
HVFLoader3
HVFPartTransform3
T@?,R,N
loader
initWithTableData:
countParts
partLoader
loadPartAtIndex:usingPartCache:
.cxx_destruct
.cxx_construct
length
bytes
init
T{CGVector=dd},N
Td,N
T{HVFAxisValues=^{HVF_PartTransform}QB},D,N
T{HVFSubpartTransforms=^{HVF_PartTransform}QQQ},D,N
T{HVFBlendedValueBounds=dd},D,N
partTransform
initForPartAtIndex:withLoader:
translation
setTranslation:
rotation
setRotation:
axisValues
subpartTransforms
blendedAxisValueBounds
renderToContext:
{LoaderCBF="_vptr$Loader"^^?"table"{span<const unsigned char, 18446744073709551615>="__data"*"__size"Q}"versMajor"S"versMinor"S"formatFlags"I"partCount"Q"partTable"{span<const unsigned int, 18446744073709551615>="__data"^I"__size"Q}}
@24@0:8@16
Q16@0:8
@?16@0:8
^v32@0:8Q16^{HVF_PartCache=^^?}24
v16@0:8
@16@0:8
{HVF_PartTransform="translation"{ReadWriteProperty<CGVector, void>="get"{function<CGVector ()>="__f_"{__value_func<CGVector ()>="__buf_"{type="__lx"[32C]}"__f_"^v}}"set"{function<void (const CGVector &)>="__f_"{__value_func<void (const CGVector &)>="__buf_"{type="__lx"[32C]}"__f_"^v}}}"rotation"{ReadWriteProperty<double, void>="get"{function<double ()>="__f_"{__value_func<double ()>="__buf_"{type="__lx"[32C]}"__f_"^v}}"set"{function<void (const double &)>="__f_"{__value_func<void (const double &)>="__buf_"{type="__lx"[32C]}"__f_"^v}}}"axisValues"{ReadWriteProperty<double, unsigned long>="get"{function<Util::ReadWriteProperty<double> (const unsigned long &)>="__f_"{__value_func<Util::ReadWriteProperty<double> (const unsigned long &)>="__buf_"{type="__lx"[32C]}"__f_"^v}}}"subpartTransforms"{ReadWriteProperty<HVF::PartTransform, unsigned long>="get"{function<Util::ReadWriteProperty<HVF::PartTransform> (const unsigned long &)>="__f_"{__value_func<Util::ReadWriteProperty<HVF::PartTransform> (const unsigned long &)>="__buf_"{type="__lx"[32C]}"__f_"^v}}}"cache"{FlatPartCache="_vptr$PartCache"^^?"loader"{function<const HVF::Part *(unsigned long, HVF::PartCache &)>="__f_"{__value_func<const HVF::Part *(unsigned long, HVF::PartCache &)>="__buf_"{type="__lx"[32C]}"__f_"^v}}"parts"{map<unsigned long, std::variant<HVF::Shape, HVF::Composite>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::variant<HVF::Shape, HVF::Composite>>>>="__tree_"{__tree<std::__value_type<unsigned long, std::variant<HVF::Shape, HVF::Composite>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::variant<HVF::Shape, HVF::Composite>>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, std::variant<HVF::Shape, HVF::Composite>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::variant<HVF::Shape, HVF::Composite>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::variant<HVF::Shape, HVF::Composite>>, std::less<unsigned long>, true>>="__value_"Q}}}}"reusable"B"part"^{Part}"partIndex"Q"inputAxisValues"{vector<double, default_init_allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, default_init_allocator<double>>="__value_"^d}}"inputTransforms"{vector<simd::double3x3, std::allocator<simd::double3x3>>="__begin_"^{double3x3}"__end_"^{double3x3}"__end_cap_"{__compressed_pair<simd::double3x3 *, std::allocator<simd::double3x3>>="__value_"^{double3x3}}}"blendContext"{BlendContext="treeAxisValues"{vector<double, default_init_allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, default_init_allocator<double>>="__value_"^d}}"treeTransforms"{vector<simd::double3x3, std::allocator<simd::double3x3>>="__begin_"^{double3x3}"__end_"^{double3x3}"__end_cap_"{__compressed_pair<simd::double3x3 *, std::allocator<simd::double3x3>>="__value_"^{double3x3}}}"blendValues"{vector<double, default_init_allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, default_init_allocator<double>>="__value_"^d}}"blendedPointCoordinates"{vector<double, default_init_allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, default_init_allocator<double>>="__value_"^d}}}}
@32@0:8Q16@?24
{CGVector=dd}16@0:8
v32@0:8{CGVector=dd}16
d16@0:8
v24@0:8d16
{HVFAxisValues=^{HVF_PartTransform}QB}16@0:8
{HVFSubpartTransforms=^{HVF_PartTransform}QQQ}16@0:8
{HVFBlendedValueBounds=dd}16@0:8
B24@0:8@?16
