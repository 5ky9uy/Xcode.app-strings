ArtworkDeviceIdiom
idiom=%s
ArtworkHostedIdioms
hostedidioms=%s
ArtworkScaleFactor
scale=%s
ArtworkDeviceSubtype
subtype=%s
ArtworkDisplayGamut
display-gamut=%s
DevicePerformanceMemoryClass
memory=%s
GraphicsFeatureSetClass
graphicsclass=%s
GraphicsFeatureSetFallbacks
graphicsclassfallbacks=%s
ArtworkDynamicDisplayMode
1080pSDR
scale=1
display-gamut=sRGB
%10s = %s
Target
target=%s
TargetType
target-type=%s
TargetVariant
variant=%s
Platform
platform=%s
ProductType
product=%s
ProductDescription
product-description=%s
CompatibleDeviceFallback
compatible-device=%s
DeviceTraitSet
trait-set=%s
%s Unknown has_arg value %d
int getopt_longopts_tostring(const struct option *, char *, size_t)
version
device-traitset-id
device
deployment-target-name
table-format
format
compare-with
devicetraitset-for-comparison
usage: traitsutil
[-sdtV] [--version] [--device-traitset-id 'device-set-id'] [--device 'device name'] [--deployment-target-name 'deployment target name'] [--table-format] [path to device_traits.db]
[--device-traitset-id] lookup the values based on device traitset id
[--device] lookup the values based on device name
[--deployment-target-name] lookup the values based on the display name of deployment target
[--format=format] format can be one of short,table,command-line, if no format isn't given then prints the values in table form, in short form graphicsclassfallbacks and hostedidioms are skipped
[--compare-with=<path to other db>] comparison with another device_traits.db
[--devicetraitset-for-comparison] use device-trait-set id for comparison
traitsutil: version: %.1f
traitsutil: can't give option -s or --device-traitset-id manytimes
traitsutil: can't give option -d or --device manytimes
traitsutil: can't give option -n or --deployment-target-name manytimes
short
table
command-line
traitsuitls: doesn't understand --format=%s, only short,table,command-line are valid
traitsutil: can't give option -c or --compare-with many times
traitsutil: must specify option -c or --compare-with before -e or --devicetraitset-for-comparison
traitsutil: unknown option '%c'
%s/../../../usr/standalone/device_traits.db
SDKROOT
traitsutil: must specify one of the options --device-traitset-id, --device, --deployment-target-name OR --compare-with
Input file:
traitsutil: can't open sqlite db '%s' : %s
SELECT ArtworkDeviceIdiom AS idiom,ArtworkHostedIdioms AS hosted,ArtworkScaleFactor AS scale,ArtworkDeviceSubtype AS subtype,ArtworkDisplayGamut AS gamut,ArtworkDynamicDisplayMode AS display_mode,DevicePerformanceMemoryClass AS memory,GraphicsFeatureSetClass AS graphics,GraphicsFeatureSetFallbacks AS fallbacks FROM DeviceTraits WHERE DeviceTraitSetID = %d
SELECT ArtworkDeviceIdiom,ArtworkHostedIdioms,ArtworkScaleFactor,ArtworkDeviceSubtype,ArtworkDisplayGamut,ArtworkDynamicDisplayMode,DevicePerformanceMemoryClass,GraphicsFeatureSetClass,GraphicsFeatureSetFallbacks FROM DeviceTraits WHERE DeviceTraitSetID = %d
SELECT ArtworkDeviceIdiom AS idiom,ArtworkHostedIdioms AS hosted,ArtworkScaleFactor AS scale,ArtworkDeviceSubtype AS subtype,ArtworkDisplayGamut as gamut,ArtworkDynamicDisplayMode AS display_mode,DevicePerformanceMemoryClass AS memory,GraphicsFeatureSetClass AS graphics,GraphicsFeatureSetFallbacks AS fallbacks, DeviceTraitSetID AS traitset FROM Devices, DeviceTraits WHERE DeviceTraitSetID = DeviceTraitSet AND TargetType = '%s'
SELECT ArtworkDeviceIdiom,ArtworkHostedIdioms,ArtworkScaleFactor,ArtworkDeviceSubtype,ArtworkDisplayGamut,ArtworkDynamicDisplayMode,DevicePerformanceMemoryClass,GraphicsFeatureSetClass,GraphicsFeatureSetFallbacks,DeviceTraitSetID FROM Devices, DeviceTraits WHERE DeviceTraitSetID = DeviceTraitSet AND TargetType = '%s'
SELECT Target, TargetType, ProductType, ProductDescription, DeviceTraitSet FROM Devices WHERE Devices.Target in (SELECT DeploymentVariant.DeviceTarget FROM DeploymentVariant INNER JOIN DeploymentTarget ON DeploymentVariant.DeploymentTarget = DeploymentTarget.TargetVersion WHERE DeploymentTarget.DisplayName = '%s')
Executing the following query:
traitsutil: can't execute SQL statement '%s' error '%s'
traitsutil: can't find any records related to --device = '%s'
traitsutil: can't find any records related to --device-traitset-id = '%d'
traitsutil: can't find any records related to --deployment-target-name = '%s'
traitsutil: must give path to device_traits.db
[Target=%@, TargetType=%@,TargetVariant=%@,Platform=%@, ProductType=%@, ProductDescription=%@, CompatibleDeviceFallback=%@,DeviceTraitSet=%lu]
T@"NSString",&,N,V_Target
T@"NSString",&,N,V_TargetType
T@"NSString",&,N,V_TargetVariant
T@"NSString",&,N,V_Platform
T@"NSString",&,N,V_ProductType
T@"NSString",&,N,V_ProductDescription
T@"NSString",&,N,V_CompatibleDeviceFallback
TQ,N,V_DeviceTraitSet
[DeviceTraitSetID=%lu, PreferredArchitecture=%@, ArtworkDeviceIdiom=%@, ArtworkHostedIdiom=%@, ArtworkScaleFactor=%@, ArtworkDeviceSubtype=%@, ArtworkDisplayGamut=%@, ArtworkDynamicDisplayMode=%@, PerformanceMemory=%lu, GraphicsFeatureSetClass=%@, GraphicsFeatureSetFallbacks=%@]
DeviceTraitSetID
TQ,N,V_DeviceTraitSetID
PreferredArchitecture
T@"NSString",&,N,V_PreferredArchitecture
T@"NSString",&,N,V_ArtworkDeviceIdiom
ArtworkHostedIdiom
T@"NSString",&,N,V_ArtworkHostedIdiom
T@"NSString",&,N,V_ArtworkScaleFactor
T@"NSString",&,N,V_ArtworkDeviceSubtype
T@"NSString",&,N,V_ArtworkDisplayGamut
T@"NSString",&,N,V_ArtworkDynamicDisplayMode
PerformanceMemory
TQ,N,V_PerformanceMemory
T@"NSString",&,N,V_GraphicsFeatureSetClass
T@"NSString",&,N,V_GraphicsFeatureSetFallbacks
[TargetVersion=%@, DeploymentTarget=%lu, DisplayName=%@, HasSwiftRuntime=%lu]
TargetVersion
T@"NSString",&,N,V_TargetVersion
DeploymentTarget
TQ,N,V_DeploymentTarget
DisplayName
T@"NSString",&,N,V_DisplayName
HasSwiftRuntime
TQ,N,V_HasSwiftRuntime
[DeploymentTarget=%@, DeviceTarget=%@, DeviceTraitSet=%lu]
T@"NSString",&,N,V_DeploymentTarget
DeviceTarget
T@"NSString",&,N,V_DeviceTarget
query_devices_table
/BuildRoot/Library/Caches/com.apple.xbs/Sources/EmbeddedDeviceTraits/EmbeddedDeviceTraits-33.1/traitsutil/compare.m
SELECT * FROM Devices
Failed to read table 'Devices' at: %s. [Error: %s]
query_device_traits_table
SELECT * FROM DeviceTraits
Failed to read table 'DeviceTraits' at: %s. [Error: %s]
query_deployment_variant_table
SELECT * FROM DeploymentVariant
Failed to read table 'DeploymentVariant' at: %s. [Error: %s]
query_deployment_target_table
SELECT * FROM DeploymentTarget
Failed to read table 'DeploymentTarget' at: %s
Comparing records in table '%s'
LHS: %lu records
RHS: %lu records
Intersection: %lu
LHS diff: %lu
RHS diff: %lu
Performing comparison between the following two device traits databases:
Cannot open database at: %s
__read_devices_table
colName
__read_device_traits_table
__read_deployment_variant_table
__read_deployment_target_table
NSAutoreleasePool
_objc_autoreleasePoolPush
_objc_autoreleasePoolPop
__TEXT
__LINKEDIT
NSArray
NSMutableArray
NSDictionary
NSOrderedSet
NSMutableOrderedSet
NSMutableDictionary
_object_setInstanceVariable
_object_setIvar
_object_copy
_objc_retain
_objc_retainBlock
_objc_release
_objc_autorelease
_objc_retainAutorelease
_objc_autoreleaseReturnValue
_objc_retainAutoreleaseReturnValue
_objc_retainAutoreleasedReturnValue
_objc_storeStrong
NSUndoManagerProxy
_targetClass
NSManagedObject
NSConstantString
NSString
NSKnownKeysMappingStrategy1
NSKnownKeysDictionary1
_objc_readClassPair
_objc_allocateClassPair
_object_getIndexedIvars
_objc_getClass
_objc_getMetaClass
_objc_getRequiredClass
_objc_lookUpClass
_objc_getProtocol
_class_getName
_protocol_getName
_objc_copyClassNamesForImage
Swift
_Tt%cs%zu%.*s%s
_Tt%c%zu%.*s%zu%.*s%s
_TtP
_TtC
%.*s.%.*s
DeviceTraitsEntity
Devices
DeviceTraits
DeploymentTarget
DeploymentVariant
__ARCLite__
__ARCLiteIndexedSubscripting__
__ARCLiteKeyedSubscripting__
Target
TargetType
TargetVariant
Platform
ProductType
ProductDescription
CompatibleDeviceFallback
DeviceTraitSet
stringWithFormat:
class
isKindOfClass:
isEqualToString:
description
hash
isEqual:
.cxx_destruct
setTarget:
setTargetType:
setTargetVariant:
setPlatform:
setProductType:
setProductDescription:
setCompatibleDeviceFallback:
setDeviceTraitSet:
_Target
_TargetType
_TargetVariant
_Platform
_ProductType
_ProductDescription
_CompatibleDeviceFallback
_DeviceTraitSet
DeviceTraitSetID
PreferredArchitecture
ArtworkDeviceIdiom
ArtworkHostedIdiom
ArtworkScaleFactor
ArtworkDeviceSubtype
ArtworkDisplayGamut
ArtworkDynamicDisplayMode
PerformanceMemory
GraphicsFeatureSetClass
GraphicsFeatureSetFallbacks
setDeviceTraitSetID:
setPreferredArchitecture:
setArtworkDeviceIdiom:
setArtworkHostedIdiom:
setArtworkScaleFactor:
setArtworkDeviceSubtype:
setArtworkDisplayGamut:
setArtworkDynamicDisplayMode:
setPerformanceMemory:
setGraphicsFeatureSetClass:
setGraphicsFeatureSetFallbacks:
_DeviceTraitSetID
_PreferredArchitecture
_ArtworkDeviceIdiom
_ArtworkHostedIdiom
_ArtworkScaleFactor
_ArtworkDeviceSubtype
_ArtworkDisplayGamut
_ArtworkDynamicDisplayMode
_PerformanceMemory
_GraphicsFeatureSetClass
_GraphicsFeatureSetFallbacks
TargetVersion
DeploymentTarget
DisplayName
HasSwiftRuntime
setTargetVersion:
setDeploymentTarget:
setDisplayName:
setHasSwiftRuntime:
_TargetVersion
_DeploymentTarget
_DisplayName
_HasSwiftRuntime
DeviceTarget
setDeviceTarget:
_DeviceTarget
init
copy
count
objectAtIndex:
UTF8String
setWithArray:
intersectSet:
minusSet:
countByEnumeratingWithState:objects:count:
stringWithUTF8String:
integerValue
addObject:
load
drain
objectAtIndexedSubscript:
setObject:atIndexedSubscript:
objectForKeyedSubscript:
replaceObjectAtIndex:withObject:
objectForKey:
setObject:forKeyedSubscript:
setObject:atIndex:
setObject:forKey:
removeObjectForKey:
retain
release
autorelease
allocWithEntity:
allocBatch:withEntity:count:
fastIndexForKnownKey:
indexForKey:
addEntriesFromDictionary:
self
initialize
lengthOfBytesUsingEncoding:
getCString:maxLength:encoding:
alloc
initWithBytes:length:encoding:
keyEnumerator
nextObject
@16@0:8
c24@0:8@16
Q16@0:8
v16@0:8
v24@0:8@16
v24@0:8Q16
@"NSString"
@24@0:8Q16
v32@0:8@16Q24
@24@0:8@16
v32@0:8@16@24
@(#)PROGRAM:traitsutil  PROJECT:EmbeddedDeviceTraits-33.1
