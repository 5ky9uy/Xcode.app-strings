NSt3__110__function6__funcIZ37+[BoxedPhysicsShape boxPhysicsShape:]E3$_0NS_9allocatorIS2_EEFvffiEEE
NSt3__110__function6__baseIFvffiEEE
Z37+[BoxedPhysicsShape boxPhysicsShape:]E3$_0
NSt3__120__shared_ptr_emplaceI6PKPathNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP6PKPathNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI6PKPathEE
NSt3__120__shared_ptr_emplaceI12PKCFieldDragNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI14PKCFieldVortexNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI21PKCFieldLinearGravityNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI21PKCFieldRadialGravityNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI12PKCFieldUserNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI16PKCFieldVelocityNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI13PKCFieldNoiseNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI18PKCFieldTurbulenceNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI14PKCFieldSpringNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI16PKCFieldMagneticNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI16PKCFieldElectricNS_9allocatorIS1_EEEE
@14PKQueryHandler
15b2QueryCallback
16PKRayCastHandler
17b2RayCastCallback
17PKContactListener
17b2ContactListener
11PKDebugDraw
6b2Draw
VUU
VUU
i\)7.
blnOq
sy2-
i\)7.
blnOq
sy2-
NSt3__117bad_function_callE
15b2QuadtreeShape
7b2Shape
8PKCField
21PKCFieldLinearGravity
21PKCFieldRadialGravity
14PKCFieldSpring
16PKCFieldElectric
16PKCFieldMagnetic
12PKCFieldDrag
14PKCFieldVortex
13PKCFieldNoise
18PKCFieldTurbulence
12PKCFieldUser
16PKCFieldVelocity
12b2ChainShape
I@13b2CircleShape
11b2EdgeShape
14b2PolygonShape
26MechanicsCollisionCallback
9b2Fixture
23b2ChainAndCircleContact
24b2ChainAndPolygonContact
15b2CircleContact
22b2EdgeAndCircleContact
23b2EdgeAndPolygonContact
25b2PolygonAndCircleContact
9b2Contact
16b2PolygonContact
NSt3__120__shared_ptr_emplaceI7PKCGridNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI13PKCPathHolderNS_9allocatorIS1_EEEE
15b2DistanceJoint
7b2Joint
15b2FrictionJoint
11b2GearJoint
?25b2QuadtreeAndChainContact
26b2QuadtreeAndCircleContact
24b2QuadtreeAndEdgeContact
27b2QuadtreeAndPolygonContact
28b2QuadtreeAndQuadtreeContact
12b2MouseJoint
NSt3__120__shared_ptr_emplaceI8QuadTreeNS_9allocatorIS1_EEEE
16b2PrismaticJoint
Q8=13b2PulleyJoint
15b2RevoluteJoint
11b2RopeJoint
11b2WeldJoint
12b2WheelJoint
i\)7.
blnOq
sy2-
i\)7.
blnOq
sy2-
{CGPoint=ff}
PhysicsBody: Could not create physics body.
_shapeType
_radius
_size
_path
_compoundBodyCount
circle
edge
polygon
chain
quadtree
ENCODE ERROR
_outline
_edgeRadius
dynamic
needsContinuousCollsionDetection
allowRotation
pinned
friction
charge
restitution
density
affectedByGravity
categoryBitMask
collisionBitMask
intersectionTestBitMask
fieldBitMask
linearVelocity
angularVelocity
linearDamping
angularDamping
DECODE ERROR
Need to implement serialization for quadtree.
Need to implement copy for quadtree
PKPhysicsBody
<%@> type:%%@ representedObject:[%%@]
%luxp
<Circle>
<Rectangle>
<Edge>
<Polygon>
<EdgeChain>
<EdgeLoop>
<Compound>
<QuadTree>
<Unknown>
position
T{CGPoint=ff},N
rotation
Tf,N
TB,N,GisDynamic
usesPreciseCollisionDetection
TB,N
allowsRotation
outline
T{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}},N
volume
T^{PKPath=f{vector<PKPoint, std::__1::allocator<PKPoint> >=^{?}^{?}{__compressed_pair<PKPoint *, std::__1::allocator<PKPoint> >=^{?}}}^{CGPath}},R,N
resting
TB,N,GisResting
mass
area
Tf,R,N
radius
TI,N
contactTestBitMask
joints
T@"NSArray",R,N
representedObject
T@"<NSObject>",W,N
postStepBlock
T@?,C,N,V_postStepBlock
velocity
T{CGVector=ff},N
v4@?0
_shapes
T^{vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *> >=^^{PKPhysicsShape}^^{PKPhysicsShape}{__compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *> >=^^{PKPhysicsShape}}},R,N
_bodyDef
T{b2BodyDef=BIIIIi{b2Vec2=ff}f{b2Vec2=ff}ffffBBBBB^v},N
_body
T^{b2Body=BIIIIiSi{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Sweep={b2Vec2=ff}(b2Position={?={b2Vec2=ff}ff})(b2Position={?={b2Vec2=ff}ff})f}{b2Vec2=ff}f{b2Vec2=ff}f^{b2World}^{b2Body}^{b2Body}^{b2Fixture}i^{b2JointEdge}^{b2ContactEdge}ffffffff^v},N
{%g, %g}
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
bodyA
T@"PKPhysicsBody",R,&,N
bodyB
contactPoint
T{CGPoint=ff},R,N
contactNormal
T{CGVector=ff},R,N
collisionImpulse
didBegin
didEnd
_bodyA
_bodyB
_implicit
T@"PKPhysicsBody",&,N,V_bodyA
T@"PKPhysicsBody",&,N,V_bodyB
reactionForce
reactionTorque
_joint
T^{b2Joint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v},N
_jointDef
T^{b2JointDef=i^v^{b2Body}^{b2Body}B},R,N
_anchor
enableLimits
lowerAngleLimit
upperAngleLimit
frictionTorque
shouldEnableLimits
rotationSpeed
anchor
T{CGPoint=ff},R,V_anchor
_anchorA
_anchorB
damping
frequency
length
collideConnected
_axis
lowerDistanceLimit
upperDistanceLimit
maxLength
strength
falloff
enabled
TB,N,GisEnabled
override
TB,N,GisOverride,V_override
region
T@,&,N
direction
scale
minimumRadius
smoothness
animationSpeed
v12@?0@"PKPhysicsBody"4^B8
v28@?0@"PKPhysicsBody"4{CGPoint=ff}8{CGVector=ff}16^B24
_joints
_bodies
gravity
speedMultiplier
contactDelegate
Cant add body, already exists in a world
Cant add body %@, already exists in a world
Cant add joint, already exists in a world
Cant add joint %@, already exists in a world
speed
velocityThreshold
T@"<PKPhysicsContactDelegate>",N
_doSleep
T@"NSMutableArray",&,N
aether
T^{PKCAether={vector<std::__1::weak_ptr<PKCField>, std::__1::allocator<std::__1::weak_ptr<PKCField> > >=^{weak_ptr<PKCField>}^{weak_ptr<PKCField>}{__compressed_pair<std::__1::weak_ptr<PKCField> *, std::__1::allocator<std::__1::weak_ptr<PKCField> > >=^{weak_ptr<PKCField>}}}},R,N
_world
T^{b2World={b2StackAllocator=[102400c]iii[32{b2StackEntry=*iB}]i}i{b2ContactManager=^{b2ContactListener}i{b2DynamicTree=i^{b2TreeNode}iiiIi}{unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >={__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<int, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > >={__hash_node_base<std::__1::__hash_node<int, void *> *>=^{__hash_node_base<std::__1::__hash_node<int, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<int> >=L}{__compressed_pair<float, std::__1::equal_to<int> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> >={__hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > >={__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>=^{__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<b2Contact *> >=L}{__compressed_pair<float, std::__1::equal_to<b2Contact *> >=f}}}i}^{b2Body}^{b2Joint}ii^{PKCAether}B^{b2DestructionListener}^{b2Draw}fBBBBdf{PKCMechanics=^{b2World}{vector<QuadTree *, std::__1::allocator<QuadTree *> >=^^{QuadTree}^^{QuadTree}{__compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> >=^^{QuadTree}}}}},R,N
_gravity
T{b2Vec2=ff},N
--- %lu
width
Ti,R,N
height
gridPtr
T{shared_ptr<PKCGrid>=^{PKCGrid}^{__shared_weak_count}},N
_type
_isexclusive
_halfx
_halfy
_halfz
_cgpath
_type2
_halfx2
_halfy2
_halfz2
_cgpath2
path
T^{CGPath=},R,N
empty
infinite
ellipsoidal
cgpath
convexhull
union
difference
intersection
no-op
b2QuadtreeAndChainContact
b2QuadtreeAndEdgeContact
b2QuadtreeAndPolygonContact
b2QuadtreeAndQuadtreeContact
type
points
{[,]}
valueWithBytes:objCType:
alloc
init
arrayWithCapacity:
addObject:
boxPhysicsShape:
unboxShape
.cxx_destruct
shapeType
points
_body
initWithPolygonFromPath:
setDynamic:
count
objectAtIndex:
bodyWithBodies:
setOutline:
encodeInt:forKey:
encodeDouble:forKey:
encodeCGPoint:forKey:
encodeCGSize:forKey:
encodeObject:forKey:
encodeInt32:forKey:
encodeObject:
isDynamic
encodeBool:forKey:
usesPreciseCollisionDetection
allowsRotation
pinned
friction
charge
restitution
density
affectedByGravity
categoryBitMask
collisionBitMask
contactTestBitMask
fieldBitMask
velocity
encodeCGVector:forKey:
angularVelocity
linearDamping
angularDamping
decodeIntForKey:
containsValueForKey:
decodeDoubleForKey:
decodeCGPointForKey:
initWithCircleOfRadius:center:
decodeCGSizeForKey:
initWithRectangleOfSize:center:
initWithEdgeFromPoint:toPoint:
decodeObjectForKey:
initWithEdgeChainFromPath:
initWithEdgeLoopFromPath:
decodeInt32ForKey:
decodeObject
isEqualToString:
decodeBoolForKey:
setUsesPreciseCollisionDetection:
setAllowsRotation:
setPinned:
setFriction:
setCharge:
setRestitution:
setDensity:
setAffectedByGravity:
setCategoryBitMask:
setCollisionBitMask:
setContactTestBitMask:
setFieldBitMask:
decodeCGVectorForKey:
setVelocity:
setAngularVelocity:
setLinearDamping:
setAngularDamping:
array
dealloc
initWithArray:copyItems:
countByEnumeratingWithState:objects:count:
_shapes
initWithRectangleOfSize:center:edgeRadius:
set_allowSleep:
initWithBodies:
bodyWithCircleOfRadius:center:
bodyWithOutline:offset:
setResting:
_implicit
mass
class
allocWithZone:
_descriptionClassName
stringWithFormat:
description
respondsToSelector:
_descriptionFormat
initWithQuadTree:
initWithMarchingCubes:pixelFrame:
bodyWithCircleOfRadius:
bodyWithRectangleOfSize:
bodyWithRectangleOfSize:edgeRadius:
bodyWithRectangleOfSize:center:
bodyWithRectangleOfSize:center:edgeRadius:
bodyWithEdgeFromPoint:toPoint:
bodyWithPolygonFromPath:
bodyWithEdgeChainFromPath:
bodyWithEdgeLoopFromPath:
copyWithZone:
encodeWithCoder:
initWithCoder:
outline
volume
clearBox2DData
initWithCircleOfRadius:
initWithRectangleOfSize:
setRepresentedObject:
representedObject
setPosition:
position
_allowSleep
setRotation:
rotation
applyForce:atPoint:
applyForce:
applyTorque:
applyImpulse:atPoint:
applyImpulse:
applyAngularImpulse:
applyUnscaledForce:atPoint:
applyUnscaledForce:
applyUnscaledImpulse:atPoint:
applyUnscaledImpulse:
isResting
joints
setMass:
area
radius
reapplyScale:yScale:
setRadius:
allContactedBodies
.cxx_construct
postStepBlock
setPostStepBlock:
_representedObject
_bodyDef
_field
_dynamicType
_world
_joints
_inUse
_shapeType
_pathPtr
_quadTree
_size
_radius
_edgeRadius
_mask
_outline
_isPinned
_allowsRotation
_postStepBlock
_runBlockOutsideOfTimeStep:
active
setActive:
set_world:
set_joints:
set_inUse:
set_bodyDef:
set_body:
initWithCapacity:
appendBytes:length:
bytes
length
bodyA
bodyB
contactPoint
contactNormal
collisionImpulse
_bodyA
_bodyB
_contactPoint
_contactNormal
_impulse
_didBegin
_didEnd
setDidBegin:
setDidEnd:
didBegin
didEnd
setContactPoint:
setContactNormal:
setBodyA:
setBodyB:
setCollisionImpulse:
numberWithBool:
boolValue
reactionForce
reactionTorque
_baseJoint
_joint
set_joint:
set_implicit:
_jointDef
create
initWithBodyA:bodyB:anchor:
shouldEnableLimits
lowerAngleLimit
upperAngleLimit
frictionTorque
setShouldEnableLimits:
setLowerAngleLimit:
setUpperAngleLimit:
setFrictionTorque:
jointWithBodyA:bodyB:anchor:
rotationSpeed
setRotationSpeed:
anchor
_anchor
initWithBodyA:bodyB:localAnchorA:localAnchorB:
initWithBodyA:bodyB:anchorA:anchorB:
damping
frequency
setDamping:
setFrequency:
jointWithBodyA:bodyB:localAnchorA:localAnchorB:
jointWithBodyA:bodyB:anchorA:anchorB:
setLength:
collideConnected
setCollideConnected:
_anchorA
_anchorB
initWithBodyA:bodyB:anchor:axis:
lowerDistanceLimit
upperDistanceLimit
setLowerDistanceLimit:
setUpperDistanceLimit:
jointWithBodyA:bodyB:anchor:axis:
_axis
maxLength
setMaxLength:
setMinimumRadius:
isEnabled
setEnabled:
set_field:
region
setRegion:
strength
setStrength:
setDirection:
direction
falloff
setFalloff:
isActive
override
setIsOverride:
scale
setScale:
minimumRadius
isOverride
setOverride:
_region
_position
_rotation
_scale
_override
field
initWithCustomBlock:
initWithCustomBatchBlock:
fieldWithCustomBlock:
fieldWithCustomBatchBlock:
_batchBlock
_block
gridPtr
initWithGrid:
fieldWithGrid:
setGrid:
initWithField:
smoothness
setSmoothness:
animationSpeed
setAnimationSpeed:
enumerateBodiesAtPoint:usingBlock:
enumerateBodiesInRect:usingBlock:
enumerateBodiesAlongRayStart:end:usingBlock:
gravity
speed
contactDelegate
__init__
addBody:
addJoint:
setGravity:
setSpeed:
setContactDelegate:
removeAllJoints
removeAllBodies
removeAllFields
copy
archivedDataWithRootObject:
unarchiveObjectWithData:
raise:format:
removeObject:
removeJoint:
removeAllObjects
dataWithBytesNoCopy:length:
sampleFieldsAt:
aether
bodyAtPoint:
bodyInRect:
bodyAlongRayStart:end:
setVelocityThreshold:
velocityThreshold
hasBodies
hasFields
setCollisionDelegate:
collisionDelegate
bodies
removeBody:
addField:
removeField:
sampleFields:categories:dataSize:
sampleFields:
evalForce:point:
stepWithTime:velocityIterations:positionIterations:
_gravity
_doSleep
_accumulatedDt
_contactListener
_speed
_bodies
_postStepBlocks
drawPacket
_getWorldTransform:positionY:rotation:xScale:yScale:
_getBasePhysicsScale:yScale:
debugDraw:matrix:showsPhysics:showsOutlineInterior:showsFields:
debugDrawPacket
set_bodies:
set_doSleep:
world
set_gravity:
isKindOfClass:
numberWithUnsignedLong:
objectForKey:
setObject:forKey:
didContinueContact:
performSelector:withObject:
didBeginContact:
didEndContact:
allValues
dictionaryWithCapacity:
isInfinite
isEmpty
containsPoint:
gridFromOccupancyArray:bytePitch:width:height:
gridFromRGBAU8PixelData:imageWidth:imageHeight:alphaThreshold:accuracy:
vectorGridFromRGBAU8PixelData:imageWidth:imageHeight:accuracy:
isGridRegionOccupied:y:width:height:
gridDataAtX:y:z:
physicsBodyFromSmoothedOutline:size:
pathFromOutlineWithSmoothingThreshold:bounds:
physicsBodyFromLVS0:
width
height
setGridPtr:
grid
quadTree
decodeFloatForKey:
encodeFloat:forKey:
isMemberOfClass:
infiniteRegion
path
initWithRadius:
initWithSize:
initWithPath:
inverseRegion
regionByUnionWithRegion:
regionByDifferenceFromRegion:
regionByIntersectionWithRegion:
containsPoints:locationStride:results:resultsStride:count:
_shape
_isExclusive
_halfExtent
_path
_regionOp
_shape2
_halfExtent2
_path2
getValue:
CGPointValue
valueWithCGPoint:
intValue
dictionary
numberWithInt:
setValue:forKey:
BoxedPhysicsShape
PKPhysicsBody
NSCopying
NSCoding
Internal
PKPhysicsContact
PKPhysicsJoint
PKPhysicsJointRevolute
PKPhysicsJointDistance
PKPhysicsJointWeld
PKPhysicsJointPrismatic
PKPhysicsJointRope
Private
PKPhysicsField
PKPhysicsFieldDrag
PKPhysicsFieldVortex
PKPhysicsFieldLinearGravity
PKPhysicsFieldRadialGravity
PKPhysicsFieldCustomBlock
PKPhysicsFieldVelocity
PKPhysicsFieldNoise
PKPhysicsFieldTurbulence
PKPhysicsFieldSpring
PKPhysicsFieldMagnetic
PKPhysicsFieldElectric
PKPhysicsWorld
Debug
PKPhysicsGrid
PKRegion
PKQuadTree
PKPath
@12@0:4^{PKPhysicsShape={b2FixtureDef=^{b2Shape}^vfffff}^{b2Fixture}}8
^{PKPhysicsShape={b2FixtureDef=^{b2Shape}^vfffff}^{b2Fixture}}8@0:4
v8@0:4
@"NSArray"
@24@0:4{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}8{CGPoint=ff}16
@12@0:4@8
@28@0:4^{PKCGrid=iii{Range=ffffff}{vector<unsigned char, std::__1::allocator<unsigned char> >=**{__compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >=*}}{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}}{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}{vector<signed char, std::__1::allocator<signed char> >=**{__compressed_pair<signed char *, std::__1::allocator<signed char> >=*}}}8{CGRect={CGPoint=ff}{CGSize=ff}}12
@12@0:4f8
@20@0:4f8{CGPoint=ff}12
@16@0:4{CGSize=ff}8
@20@0:4{CGSize=ff}8f16
@24@0:4{CGSize=ff}8{CGPoint=ff}16
@28@0:4{CGSize=ff}8{CGPoint=ff}16f24
@24@0:4{CGPoint=ff}8{CGPoint=ff}16
@12@0:4^{CGPath=}8
@12@0:4^{_NSZone=}8
v12@0:4@8
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}8
^{PKPath=f{vector<PKPoint, std::__1::allocator<PKPoint> >=^{?}^{?}{__compressed_pair<PKPoint *, std::__1::allocator<PKPoint> >=^{?}}}^{CGPath}}8@0:4
@8@0:4
v12@0:4B8
B8@0:4
v16@0:4{CGPoint=ff}8
{CGPoint=ff}8@0:4
v12@0:4f8
f8@0:4
v24@0:4{CGPoint=ff}8{CGPoint=ff}16
v24@0:4{CGVector=ff}8{CGPoint=ff}16
v16@0:4{CGVector=ff}8
I8@0:4
v12@0:4I8
{CGVector=ff}8@0:4
v16@0:4f8f12
@?8@0:4
v12@0:4@?8
@"<NSObject>"
{b2BodyDef="_sk_affectedByGravity"B"_sk_fieldCategoryBitMask"I"_sk_categoryBitMask"I"_sk_collisionBitMask"I"_sk_intersectionCallbackBitMask"I"type"i"position"{b2Vec2="x"f"y"f}"angle"f"linearVelocity"{b2Vec2="x"f"y"f}"angularVelocity"f"charge"f"linearDamping"f"angularDamping"f"allowSleep"B"awake"B"fixedRotation"B"bullet"B"active"B"userData"^v}
^{b2Body=BIIIIiSi{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Sweep={b2Vec2=ff}(b2Position={?={b2Vec2=ff}ff})(b2Position={?={b2Vec2=ff}ff})f}{b2Vec2=ff}f{b2Vec2=ff}f^{b2World}^{b2Body}^{b2Body}^{b2Fixture}i^{b2JointEdge}^{b2ContactEdge}ffffffff^v}
^{PKCField=}
{vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *> >="__begin_"^^{PKPhysicsShape}"__end_"^^{PKPhysicsShape}"__end_cap_"{__compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *> >="__first_"^^{PKPhysicsShape}}}
@"PKPhysicsWorld"
@"NSMutableArray"
{shared_ptr<PKPath>="__ptr_"^{PKPath}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<QuadTree>="__ptr_"^{QuadTree}"__cntrl_"^{__shared_weak_count}}
{CGPoint="x"f"y"f}
{CGSize="width"f"height"f}
^{CGImage=}
^{vector<PKPhysicsShape *, std::__1::allocator<PKPhysicsShape *> >=^^{PKPhysicsShape}^^{PKPhysicsShape}{__compressed_pair<PKPhysicsShape **, std::__1::allocator<PKPhysicsShape *> >=^^{PKPhysicsShape}}}8@0:4
{shared_ptr<QuadTree>=^{QuadTree}^{__shared_weak_count}}8@0:4
{b2BodyDef=BIIIIi{b2Vec2=ff}f{b2Vec2=ff}ffffBBBBB^v}8@0:4
v80@0:4{b2BodyDef=BIIIIi{b2Vec2=ff}f{b2Vec2=ff}ffffBBBBB^v}8
^{b2Body=BIIIIiSi{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Sweep={b2Vec2=ff}(b2Position={?={b2Vec2=ff}ff})(b2Position={?={b2Vec2=ff}ff})f}{b2Vec2=ff}f{b2Vec2=ff}f^{b2World}^{b2Body}^{b2Body}^{b2Fixture}i^{b2JointEdge}^{b2ContactEdge}ffffffff^v}8@0:4
v12@0:4^{b2Body=BIIIIiSi{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Transform={b2Vec2=ff}{b2Rot=ff}}{b2Sweep={b2Vec2=ff}(b2Position={?={b2Vec2=ff}ff})(b2Position={?={b2Vec2=ff}ff})f}{b2Vec2=ff}f{b2Vec2=ff}f^{b2World}^{b2Body}^{b2Body}^{b2Fixture}i^{b2JointEdge}^{b2ContactEdge}ffffffff^v}8
@"PKPhysicsBody"
{CGVector="dx"f"dy"f}
^{b2Joint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v}
^{b2Joint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v}8@0:4
v12@0:4^{b2Joint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v}8
^{b2JointDef=i^v^{b2Body}^{b2Body}B}8@0:4
@24@0:4@8@12{CGPoint=ff}16
{b2RevoluteJointDef="type"i"userData"^v"bodyA"^{b2Body}"bodyB"^{b2Body}"collideConnected"B"localAnchorA"{b2Vec2="x"f"y"f}"localAnchorB"{b2Vec2="x"f"y"f}"referenceAngle"f"enableLimit"B"lowerAngle"f"upperAngle"f"enableMotor"B"motorSpeed"f"maxMotorTorque"f}
^{b2RevoluteJoint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v{b2Vec2=ff}{b2Vec2=ff}{b2Vec3=fff}fBffBfffii{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}ffff{b2Mat33={b2Vec3=fff}{b2Vec3=fff}{b2Vec3=fff}}fi}
@32@0:4@8@12{CGPoint=ff}16{CGPoint=ff}24
{b2DistanceJointDef="type"i"userData"^v"bodyA"^{b2Body}"bodyB"^{b2Body}"collideConnected"B"localAnchorA"{b2Vec2="x"f"y"f}"localAnchorB"{b2Vec2="x"f"y"f}"length"f"frequencyHz"f"dampingRatio"f}
^{b2DistanceJoint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^vfff{b2Vec2=ff}{b2Vec2=ff}fffii{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}fffff}
{b2WeldJointDef="type"i"userData"^v"bodyA"^{b2Body}"bodyB"^{b2Body}"collideConnected"B"localAnchorA"{b2Vec2="x"f"y"f}"localAnchorB"{b2Vec2="x"f"y"f}"referenceAngle"f}
^{b2WeldJoint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v{b2Vec2=ff}{b2Vec2=ff}f{b2Vec3=fff}ii{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}ffff{b2Mat33={b2Vec3=fff}{b2Vec3=fff}{b2Vec3=fff}}}
@32@0:4@8@12{CGPoint=ff}16{CGVector=ff}24
{b2PrismaticJointDef="type"i"userData"^v"bodyA"^{b2Body}"bodyB"^{b2Body}"collideConnected"B"localAnchorA"{b2Vec2="x"f"y"f}"localAnchorB"{b2Vec2="x"f"y"f}"localAxisA"{b2Vec2="x"f"y"f}"referenceAngle"f"enableLimit"B"lowerTranslation"f"upperTranslation"f"enableMotor"B"maxMotorForce"f"motorSpeed"f}
^{b2PrismaticJoint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}f{b2Vec3=fff}fffffBBiii{b2Vec2=ff}{b2Vec2=ff}ffff{b2Vec2=ff}{b2Vec2=ff}ffff{b2Mat33={b2Vec3=fff}{b2Vec3=fff}{b2Vec3=fff}}f}
{b2RopeJointDef="type"i"userData"^v"bodyA"^{b2Body}"bodyB"^{b2Body}"collideConnected"B"localAnchorA"{b2Vec2="x"f"y"f}"localAnchorB"{b2Vec2="x"f"y"f}"maxLength"f}
^{b2RopeJoint=^^?i^{b2Joint}^{b2Joint}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}{b2JointEdge=^{b2Body}^{b2Joint}^{b2JointEdge}^{b2JointEdge}}^{b2Body}^{b2Body}BB^v{b2Vec2=ff}{b2Vec2=ff}fffii{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}{b2Vec2=ff}fffffi}
{shared_ptr<PKCField>=^{PKCField}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<PKCField>=^{PKCField}^{__shared_weak_count}}8
v24@0:48
8@0:4
{shared_ptr<PKCField>="__ptr_"^{PKCField}"__cntrl_"^{__shared_weak_count}}
@"PKRegion"
@12@0:4@?8
@16@0:4{shared_ptr<PKCField>=^{PKCField}^{__shared_weak_count}}8
^{PKCAether={vector<std::__1::weak_ptr<PKCField>, std::__1::allocator<std::__1::weak_ptr<PKCField> > >=^{weak_ptr<PKCField>}^{weak_ptr<PKCField>}{__compressed_pair<std::__1::weak_ptr<PKCField> *, std::__1::allocator<std::__1::weak_ptr<PKCField> > >=^{weak_ptr<PKCField>}}}}8@0:4
v20@0:4{CGPoint=ff}8@?16
v28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8@?24
v28@0:4{CGPoint=ff}8{CGPoint=ff}16@?24
@16@0:4{CGPoint=ff}8
@24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
@36@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8I24{CGSize=ff}28
{CGVector=ff}16@0:4{CGPoint=ff}8
24@0:48
{CGVector=ff}20@0:4I8{CGPoint=ff}12
B24@0:4d8I16I20
^{b2World={b2StackAllocator=[102400c]iii[32{b2StackEntry=*iB}]i}i{b2ContactManager=^{b2ContactListener}i{b2DynamicTree=i^{b2TreeNode}iiiIi}{unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >={__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<int, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > >={__hash_node_base<std::__1::__hash_node<int, void *> *>=^{__hash_node_base<std::__1::__hash_node<int, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<int> >=L}{__compressed_pair<float, std::__1::equal_to<int> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> >={__hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > >={__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>=^{__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<b2Contact *> >=L}{__compressed_pair<float, std::__1::equal_to<b2Contact *> >=f}}}i}^{b2Body}^{b2Joint}ii^{PKCAether}B^{b2DestructionListener}^{b2Draw}fBBBBdf{PKCMechanics=^{b2World}{vector<QuadTree *, std::__1::allocator<QuadTree *> >=^^{QuadTree}^^{QuadTree}{__compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> >=^^{QuadTree}}}}}
{b2Vec2="x"f"y"f}
{PKContactListener="_vptr$b2ContactListener"^^?"_contacts"@"NSMutableDictionary""_contactDelegate"@"<PKPhysicsContactDelegate>"}
{PKDebugDrawPacket="_linePoints"{vector<PKPoint, std::__1::allocator<PKPoint> >="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<PKPoint *, std::__1::allocator<PKPoint> >="__first_"^{?}}}"_colors"{vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> >="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> >="__first_"^{?}}}}
v88@0:4f8(_GLKMatrix4={?=ffffffffffffffff}[16f])12B76B80B84
r^{PKDebugDrawPacket={vector<PKPoint, std::__1::allocator<PKPoint> >=^{?}^{?}{__compressed_pair<PKPoint *, std::__1::allocator<PKPoint> >=^{?}}}{vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> >=^{?}^{?}{__compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> >=^{?}}}}8@0:4
^{b2World={b2StackAllocator=[102400c]iii[32{b2StackEntry=*iB}]i}i{b2ContactManager=^{b2ContactListener}i{b2DynamicTree=i^{b2TreeNode}iiiIi}{unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >={__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<int, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > >={__hash_node_base<std::__1::__hash_node<int, void *> *>=^{__hash_node_base<std::__1::__hash_node<int, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<int> >=L}{__compressed_pair<float, std::__1::equal_to<int> >=f}}}{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >=L}{__compressed_pair<float, std::__1::equal_to<unsigned long long> >=f}}}{unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> >={__hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > >={__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>=^{__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<b2Contact *> >=L}{__compressed_pair<float, std::__1::equal_to<b2Contact *> >=f}}}i}^{b2Body}^{b2Joint}ii^{PKCAether}B^{b2DestructionListener}^{b2Draw}fBBBBdf{PKCMechanics=^{b2World}{vector<QuadTree *, std::__1::allocator<QuadTree *> >=^^{QuadTree}^^{QuadTree}{__compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> >=^^{QuadTree}}}}}8@0:4
{b2Vec2=ff}8@0:4
v16@0:4{b2Vec2=ff}8
@24@0:4r*8i12i16i20
@28@0:4r*8i12i16f20f24
@24@0:4r*8i12i16f20
B24@0:4i8i12i16i20
C20@0:4i8i12i16
@20@0:4f8{CGSize=ff}12
{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}28@0:4f8{?={?=ff}{?=ff}}12
i8@0:4
{shared_ptr<PKCGrid>=^{PKCGrid}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<PKCGrid>=^{PKCGrid}^{__shared_weak_count}}8
{shared_ptr<PKCGrid>="__ptr_"^{PKCGrid}"__cntrl_"^{__shared_weak_count}}
@"PKQuadTree"
^{CGPath=}8@0:4
B16@0:4{CGPoint=ff}8
v28@0:4r^f8i12*16i20i24
{vec4="v"}
{shared_ptr<PKCPathHolder>="__ptr_"^{PKCPathHolder}"__cntrl_"^{__shared_weak_count}}
v20@0:4{CGPoint=ff}8@16
v20@0:4{CGVector=ff}8@16
v20@0:4{CGSize=ff}8@16
{CGPoint=ff}12@0:4@8
{CGVector=ff}12@0:4@8
{CGSize=ff}12@0:4@8
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
