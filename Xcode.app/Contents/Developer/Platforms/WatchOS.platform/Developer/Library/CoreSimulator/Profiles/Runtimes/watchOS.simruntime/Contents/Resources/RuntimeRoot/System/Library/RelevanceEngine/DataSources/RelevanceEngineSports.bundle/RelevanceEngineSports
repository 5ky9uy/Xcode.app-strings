@@(#)PROGRAM:RelevanceEngineSports  PROJECT:RelevanceEngine-1
alloc
_init
class
initWithSuiteName:
dictionaryWithObjects:forKeys:count:
registerDefaults:
numberWithBool:
init
hashTableWithOptions:
array
copy
countByEnumeratingWithState:objects:count:
sportsGameMannagerDidUpdate:
addObject:
removeObject:
lastRefreshDate
timeIntervalSinceNow
_refresh
_fetchTeams
fetchingTeams
lastTeamFetchDate
setFetchingTeams:
sharedInstance
fetchQueue
setFavoriteTeams:
date
setLastTeamFetchDate:
setCaller:
code
makeRequestWithCompletion:
fetchConfiguration:
favoriteTeams
count
fetchedGames
removeAllObjects
setLastRefreshDate:
setGamesAndNotifyObservers:
lastAllGamesRefreshDate
timeIntervalSinceDate:
status
startDate
_refreshGames:
_refreshAllGames
arrayWithCapacity:
homeTeam
name
_refreshTeamsNamed:
isFetching
setFetching:
isEqualToString:
awayTeam
client
_handleCommand:fromUtterance:
numberWithUnsignedInteger:
startRequest
setUtterance:
handleCommand:afterCurrentRequest:commandHandler:completion:
stringWithFormat:
objectAtIndexedSubscript:
setFetchedGames:
setLastAllGamesRefreshDate:
arrayByAddingObjectsFromArray:
_fetchLogosForTeamsWithCompletion:
setCountLimit:
_cacheForLogoData
identifier
objectForKey:
logoURL
_cachedLogoDataForTeam:
setLogoData:
sharedSession
currentDevice
sizeClass
dataWithContentsOfURL:options:error:
numberWithDouble:
data
setObject:forKey:
downloadTaskWithURL:completionHandler:
resume
initWithStartDate:endDate:
containsDate:
logoData
isKindOfClass:
views
firstObject
speakableText
context
homeEntity
awayEntity
startTime
initWithMatchup:
sharedManager
initialize
games
refreshDateForGame:
addObserver:
removeObserver:
tickle
.cxx_destruct
observerQueue
observers
_fetching
_fetchingTeams
_games
_observerQueue
_observers
_lastRefreshDate
_lastAllGamesRefreshDate
_fetchQueue
_fetchedGames
_client
_lastTeamFetchDate
_favoriteTeams
dataSourceClassForKey:
decodeObjectOfClass:forKey:
decodeIntegerForKey:
encodeObject:forKey:
encodeInteger:forKey:
absoluteString
initWithEntity:
homeScore
homeTeamRecordSummary
awayScore
awayTeamRecordSummary
periodDescription
winningEntity
supportsSecureCoding
encodeWithCoder:
initWithCoder:
copyWithZone:
setIdentifier:
homeRecord
awayRecord
_identifier
_startDate
_status
_homeTeam
_awayTeam
_homeScore
_awayScore
_homeRecord
_awayRecord
_periodDescription
image
shortName
abbreviatedName
_name
_shortName
_abbreviatedName
_logoURL
_logoData
arrayWithObjects:count:
initWithIdentifier:content:action:relevanceProviders:
bundleIdentifier
overrideLocalizedDataSourceName
applicationBundleIdentifier
supportedSections
getElementsInSection:withHandler:
newWatchListKitUserDefaults
setDateStyle:
setTimeStyle:
addObserver:forKeyPath:options:context:
delegate
elementOperationQueue
invalidateElements
observeValueForKeyPath:ofObject:change:context:
dealloc
_punchOutForGame:
settingsConnection
startUIRequest:
initWithAction:
dateByAddingTimeInterval:
endDate
initWithEventInterval:becomesIrrelevantDate:
initWithDailyRoutineType:
initWithIdentifier:content:action:relevanceProviders:privacyBehavior:
_relevantGames
_elementFromGame:
scheduledGames
compare:
sortedArrayUsingComparator:
lastObject
length
minimumSupportedSystemVersion
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
setState:
refreshing
setRefreshing:
lastSuccessfulRefreshDate
setLastSuccessfulRefreshDate:
formatter
watchListKitDefaults
_refreshing
_lastSuccessfulRefreshDate
_formatter
_watchListKitDefaults
bundleForClass:
localizedStringForKey:value:table:
setStyle:
screenScale
imageWithData:scale:
sharedSettings
sportsScoreSpoilersAllowed
initWithHomeTeamImage:homeTeamName:homeTeamDetail:awayTeamImage:awayTeamName:awayTeamDetail:progress:startDate:status:dateFetched:
setMatchupAccessory:
imageNamed:inBundle:
v8@?0
com.apple.WatchListKit
APIBaseURL
https://uts-api.itunes.apple.com/
com.apple.tv
WLKSportsEnabledOverride
com.apple.relevanceengine.sports.mananger.observers
com.apple.relevanceengine.sports.mananger.fetching
RESportsDataSource
v24@?0@"NSArray"8@"NSError"16
v16@?0@"WLKServerConfigurationResponse"8
v16@?0@"SABaseCommand"8
v20@?0B8@"NSError"12
v24@?0@"NSString"8@?<v@?>16
%@ schedule
v32@?0@"NSURL"8@"NSURLResponse"16@"NSError"24
v24@?0@"RESportsTeam"8@?<v@?>16
observerQueue
T@"NSObject<OS_dispatch_queue>",R,N,V_observerQueue
observers
T@"NSHashTable",R,N,V_observers
lastRefreshDate
T@"NSDate",C,V_lastRefreshDate
lastAllGamesRefreshDate
T@"NSDate",C,V_lastAllGamesRefreshDate
fetchQueue
T@"NSObject<OS_dispatch_queue>",R,N,V_fetchQueue
fetching
TB,N,GisFetching,V_fetching
fetchedGames
T@"NSMutableArray",&,N,V_fetchedGames
client
T@"AFClientLite",R,N,V_client
lastTeamFetchDate
T@"NSDate",C,V_lastTeamFetchDate
favoriteTeams
T@"NSArray",C,V_favoriteTeams
fetchingTeams
TB,N,V_fetchingTeams
games
T@"NSArray",R,N,V_games
identifier
startDate
homeTeam
homeScore
homeRecord
awayTeam
awayScore
awayRecord
periodDescription
status
supportsSecureCoding
TB,R
T@"NSString",C,N,V_identifier
T@"NSDate",R,N,V_startDate
TQ,R,N,V_status
T@"RESportsTeam",R,N,V_homeTeam
T@"RESportsTeam",R,N,V_awayTeam
T@"NSString",R,N,V_homeScore
T@"NSString",R,N,V_awayScore
T@"NSString",R,N,V_homeRecord
T@"NSString",R,N,V_awayRecord
T@"NSString",R,N,V_periodDescription
name
shortName
abbreviatedName
logoURL
logoData
T@"NSData",&,N,V_logoData
T@"NSString",R,N,V_identifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_shortName
T@"NSString",R,N,V_abbreviatedName
T@"NSURL",R,N,V_logoURL
com.apple.siri.sports.sampleElement
SportsScoreSpoilersAllowed
v24@?0@"REElementAction"8@"NSDictionary"16
q24@?0@"RESportsGame"8@"RESportsGame"16
B16@?0@"RESportsGame"8
TEAM_SCORE
Score of the %@ game?
TEAM_SCHEDULE
What is the %@ schedule?
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
refreshing
TB,V_refreshing
lastSuccessfulRefreshDate
T@"NSDate",C,V_lastSuccessfulRefreshDate
formatter
T@"NSDateFormatter",R,N,V_formatter
watchListKitDefaults
T@"NSUserDefaults",R,N,V_watchListKitDefaults
com.apple.upnext.siri.sports
Sports
SPORTS_NAME
Favorite Teams
GAME_HIDDEN_SCORE
GAME_POSTPONED
Delayed
GAME_DELAYED
GAME_CANCELLED
Cancelled
GAME_FINAL
Final
GAME_LIVE
Live
Apple
Competition
Giants
11 - 13
Padres
9 - 17
sports
giants-logo
padres-logo
San Francisco Giants
RESportsGameManager
RESiriSportsBundleConfiguration
RESportsGame
NSSecureCoding
NSCoding
NSCopying
RESportsTeam
RESiriSportsSampleDataSource
RESiriSportsDataSource
RESportsGameManagerObserver
NSObject
RESiriSportsUtilities
RESiriSportsDemoDataSource
Error: Adding a nil observer to game manager
Error: Removing a nil observer from game manager
Game Manager: Enough time passed to start a refresh
Skipping tickle request: Not enough time passed
Sports will refresh teams.
Sports couldn't fetch teams %@.
Game Manager Refreshing Start
Game Manager - Not refreshing cached games
Game Manager Refreshing %lu games %@
Game Manager ALL games.
Game Manager Refreshing games for teams %@
Sports asking: %@
Sports could not handle command: %@
Sports could not handle command, but we do not know why. Found %@ games
%lu team
Matchups found. Loading logos
Skipping refresh request: Already fetching
Couldn't did not download data from %@
Couldn't read image data at %@ - %@
Q: %@.
AddViews Response: %@
Found matchup: %@ (%@) vs %@ (%@) at %@
Unknown Section for Sports - %@
@16@0:8
v16@0:8
@24@0:8@16
v24@0:8@16
Q16@0:8
v24@0:8@?16
@32@0:8@16@24
B16@0:8
v20@0:8B16
@"NSArray"
@"NSObject<OS_dispatch_queue>"
@"NSHashTable"
@"NSDate"
@"NSMutableArray"
@"AFClientLite"
#24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@"NSString"
@"RESportsTeam"
@"NSURL"
@"NSData"
v32@0:8@16@?24
{?=qqq}16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"RESportsGameManager"16
v48@0:8@16@24@32^v40
v24@0:8Q16
@"NSDateFormatter"
@"NSUserDefaults"
zPLR
zPLR
