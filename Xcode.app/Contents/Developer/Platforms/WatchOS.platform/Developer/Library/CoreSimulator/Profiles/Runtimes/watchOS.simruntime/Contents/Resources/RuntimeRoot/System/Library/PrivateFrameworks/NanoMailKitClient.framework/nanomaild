RDTemplate
com.apple.nanomail.retailDemoMigrationQueue
v4@?0
isMigrating
TB,N,V_isMigrating
migrationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_migrationQueue
demoContentMigrationCompletionBlock
T@?,C,N,V_demoContentMigrationCompletionBlock
messageDatesUpdatedCompletionBlock
T@?,C,N,V_messageDatesUpdatedCompletionBlock
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
delegate
T@"<NNMKMessageServiceDelegate>",W,N
syncReceiver
T@"NNMKSyncReceiver",&,N,V_syncReceiver
messageDataSource
T@"NNMKMessageDataSource",&,N,V_messageDataSource
databaseFactory
T@"NNMKDatabaseFactory",&,N,V_databaseFactory
database
T@"NNMKDatabase",&,N,V_database
executionQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_executionQueue
pendingFullSyncRequest
TB,N,V_pendingFullSyncRequest
executeFullSyncAfterFirstUnlock
TB,N,V_executeFullSyncAfterFirstUnlock
lastBatchFetchRequestDateByMailboxId
T@"NSMutableDictionary",&,N,V_lastBatchFetchRequestDateByMailboxId
connectionFailed
TB,N,V_connectionFailed
T@"<NNMKMessageServiceDelegate>",W,N,V_delegate
Message
ComposedMessage
MailboxSelection
B8@?0@"NSString"4
Trimming list of conversations so we don't send too many
We're not trimming the list of conversations
%lu|%@
v12@?0@"NSArray"4@"NNMKMailbox"8
@"NNMKMessage"8@?0@"NNMKProtoMessage"4
v8@?0@"NSArray"4
v12@?0@"NSArray"4B8
v16@?0@"NNMKMessageContent"4@"NSString"8@"NSString"12
v16@?0@"NSData"4@"NSString"8@"NSString"12
messagesSyncService
T@"NNMKMessagesSyncServiceClient",&,N,V_messagesSyncService
contentSyncService
T@"NNMKMessageContentSyncServiceClient",&,N,V_contentSyncService
accountsSyncService
T@"NNMKAccountsSyncServiceClient",&,N,V_accountsSyncService
fetchesSyncService
T@"NNMKFetchesSyncServiceClient",&,N,V_fetchesSyncService
protectedSyncService
T@"NNMKProtectedSyncServiceClient",&,N,V_protectedSyncService
protectedContentSyncService
T@"NNMKProtectedContentSyncServiceClient",&,N,V_protectedContentSyncService
lastFetchMoreMessagesIDSIdentifier
T@"NSString",&,N,V_lastFetchMoreMessagesIDSIdentifier
lastFetchRequestIDSIdentifier
T@"NSString",&,N,V_lastFetchRequestIDSIdentifier
messageIdsContentArrivedBeforeActualMessage
T@"NSMutableSet",&,N,V_messageIdsContentArrivedBeforeActualMessage
fullSyncRecoveredInThisSession
TB,N,V_fullSyncRecoveredInThisSession
messagesProcessedHandler
T@"NNMKMessagesProcessedHandler",&,N,V_messagesProcessedHandler
messagesProcessedConversationHandler
T@"NNMKMessagesProcessedHandler",&,N,V_messagesProcessedConversationHandler
dataSource
T@"<NNMKMessageDataSource>",&,N,V_dataSource
com.apple.NanoMailBulletinService
NMBCRemoteMessageBodyServerViewController
v12@?0@"_UIRemoteViewController"4@"NSError"8
v20@?0@"NSDictionary"4{_NSRange=II}8^B16
v16@?0{_NSRange=II}4^B12
index.sqlite
protected.sqlite
Journal
Database-Unprotected.sql
Database-Protected.sql
com.apple.nanomail.dbfactory
com.apple.nanomail.db
v12@?0@"NNMKRetailDemoUtility"4@"NSError"8
v8@?0@"NNMKRetailDemoUtility"4
PROTECTED
CONTROL
v8@?0@"NSString"4
/private/var/mobile/Library/Mail
databaseQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_databaseQueue
connection
T@"NNMKProtectedSQLiteConnection",&,N,V_connection
journal
T@"NNMKSQLJournal",&,N,V_journal
demoUtility
T@"NNMKRetailDemoUtility",&,N,V_demoUtility
observer
T@"<NNMKDatabaseLifecycleObserver>",W,N,V_observer
createdDatabaseFromScratch
TB,N,V_createdDatabaseFromScratch
machServiceName
T@"NSString",&,N,V_machServiceName
messagesAddedHandler
T@?,C,N,V_messagesAddedHandler
messagesUpdatedHandler
T@?,C,N,V_messagesUpdatedHandler
messagesDeletedHandler
T@?,C,N,V_messagesDeletedHandler
messageContentHandler
T@?,C,N,V_messageContentHandler
imageAttachmentHandler
T@?,C,N,V_imageAttachmentHandler
conversationOperationsHandler
T@?,C,N,V_conversationOperationsHandler
 FILTER_TYPE = ? 
 SYNC_ACTIVE = ? 
 SYNC_REQUESTED = ? 
 SYNC_ENABLED = ? 
 SET 
 SET CUSTOM_NAME = '%@' 
 SET CUSTOM_NAME = ? 
[filter_type: %@, 
syncActive: %@, 
syncRequested: %@, 
syncEnabled: %@, 
hasCustomName: %lu
filterType
T@"NSNumber",&,N,V_filterType
syncActive
T@"NSNumber",&,N,V_syncActive
syncRequested
T@"NSNumber",&,N,V_syncRequested
syncEnabled
T@"NSNumber",&,N,V_syncEnabled
customName
T@"NSString",&,N,V_customName
NNMKDeviceLockStatusChangedNotification
NNMKDeviceStoreDemoVideoDidStartNotification
NNMKDeviceStoreDemoVideoDidStopNotification
/Containers/Data/Application/
../../../../../Library/
NanoMailKit
isDeviceUnlocked
TB,R,N,V_isDeviceUnlocked
isClassCDataAvailable
TB,R,N,V_isClassCDataAvailable
registryBasePath
T@"NSString",R,N,V_registryBasePath
isRunningInStoreDemoMode
TB,R,N,V_isRunningInStoreDemoMode
screenWidth
Tf,R,N
screenScale
com.apple.NanoMail
com.apple.nanomaild.ProcessMonitor
v8@?0@"NSDictionary"4
queue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
accumulatedPoints
TI,N,V_accumulatedPoints
lastNanoMailSnapshotRequest
T@"NSDate",&,N,V_lastNanoMailSnapshotRequest
numberOfUnprocessedOperations
TI,N,V_numberOfUnprocessedOperations
interruptedConnectionWithNanoMail
TB,N,V_interruptedConnectionWithNanoMail
deviceLocked
TB,N,V_deviceLocked
nanoMailState
TI,N,V_nanoMailState
nanoMailStateMonitor
T@"BKSApplicationStateMonitor",&,N,V_nanoMailStateMonitor
T@"<NNMKNanoMailSnapshotRequesterDelegate>",W,N,V_delegate
DBSchemaVersion
FullSyncVersion
ReceivedFullSyncMessages
DatabaseRecentlyMigrated
AppLastLaunchedDate
NotificationSettingsEnabled
LastIDSIdentifierForFullSyncRequest
LastIDSIdentifierForHaltSyncRequest
kControlKeyMailboxFilterIds
kControlKeyMailboxFilterType
M.ID = ?
v12@?0^{sqlite3_stmt=}4^I8
M.MAILBOX_ID = ?
M.ACCOUNT_ID = ?
SELECT MAILBOX_ID FROM MESSAGE WHERE ID = ?
SELECT 1 FROM MESSAGE WHERE ID = ?
M.ID IN (%@)
OR (STATUS & ?)
AND M.ID NOT IN (%@)
(DATE_RECEIVED >= ?) AND (STATUS & ?) AND (CONTENT_SYNCED = ?) AND ((ACCOUNT_ID IN (%@)) %@ %@) %@
DATE_RECEIVED <= ?
SELECT IMAGE_ATTACHMENTS FROM MESSAGE WHERE ID = ?
SELECT ME.DATE_RECEIVED FROM CONVERSATION C LEFT OUTER JOIN MESSAGE ME ON ME.CONVERSATION_ID = C.ID 
WHERE ME.MAILBOX_ID IN (%@) 
 ORDER BY ME.date_received ASC limit 1
-[NNMKDatabase conversationsAtIndexRange:messagesByConversationId:mailboxFilter:]_block_invoke
W.DATE_RECEIVED <= ?
-[NNMKDatabase conversationsReceivedBefore:count:initialIndex:messagesByConversationId:mailboxFilter:]_block_invoke
W.ID IN (%@)
CONVERSATION
 ME.MAILBOX_ID IN  (%@) 
(SELECT DISTINCT W.* FROM CONVERSATION W LEFT OUTER JOIN MESSAGE ME ON ME.CONVERSATION_ID = W.ID WHERE %@)
LEFT OUTER JOIN MESSAGE ME ON ME.CONVERSATION_ID = C.ID
 AND 
SELECT DISTINCT C.ID,                          (SELECT COUNT(ID) FROM %@ WHERE (DATE_RECEIVED > C.DATE_RECEIVED) OR (DATE_RECEIVED = C.DATE_RECEIVED AND ID < C.ID)) AS C_INDEX                          FROM CONVERSATION C %@ WHERE C.ID IN (%@) %@
W.ID = ?
W.ID = (SELECT CONVERSATION_ID FROM MESSAGE WHERE ID = ?)
LEFT OUTER JOIN MESSAGE ME ON ME.CONVERSATION_ID = C.ID WHERE %@
SELECT COUNT(*) FROM (SELECT DISTINCT C.ID FROM CONVERSATION C %@)
A.ID = ?
v8@?0^{sqlite3_stmt=}4
 ACCOUNT_ID = ?
 M.ID = ? 
 SYNC_ACTIVE = 1 
 SYNC_ENABLED = 1 OR SYNC_REQUESTED = 1
SELECT SYNC_VERSION FROM MAILBOX_SYNC_VERSION WHERE MAILBOX_ID = ?
INSERT OR REPLACE INTO MAILBOX_SYNC_VERSION (MAILBOX_ID, SYNC_VERSION) VALUES (?, ?)
DELETE FROM MAILBOX_SYNC_VERSION 
INSERT INTO MESSAGE (ID, CONVERSATION_ID, ACCOUNT_ID, DATE_SENT, DATE_RECEIVED, MESSAGE_ID_HEADER, STATUS, VISIBLE_STATUS, STATUS_VERSION, CONTENT_SYNCED, NOTIFICATION_MESSAGE_ID, MAILBOX_ID, THREAD_SPECIFIC, SPECIAL_MAILBOX_SPECIFIC) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INSERT INTO PROTECTED.MESSAGE (ID, "FROM", SUBJECT, PREVIEW, "TO", CC, BCC) VALUES (?, ?, ?, ?, ?, ?, ?)
INSERT INTO PROTECTED.MESSAGE (ID, "FROM", SUBJECT, PREVIEW, "TO", CC, BCC) VALUES (%Q, %Q, %Q, %Q, %Q, %Q, %Q)
, STATUS_VERSION = ?
UPDATE MESSAGE SET THREAD_SPECIFIC = ?, SPECIAL_MAILBOX_SPECIFIC = ?,  VISIBLE_STATUS = ?, STATUS = ?%@ WHERE ID = ?
UPDATE PROTECTED.MESSAGE SET PREVIEW = ? WHERE ID = ?
UPDATE PROTECTED.MESSAGE SET PREVIEW = %Q WHERE ID = %Q
UPDATE MESSAGE SET DATE_RECEIVED = ? WHERE ID = ?
UPDATE MESSAGE SET VISIBLE_STATUS = STATUS WHERE VISIBLE_STATUS != STATUS
SELECT 1 FROM MESSAGE WHERE VISIBLE_STATUS != STATUS 
SELECT ID FROM MESSAGE WHERE DATE_RECEIVED < ? 
 AND MAILBOX_ID = ? 
UPDATE MESSAGE SET CONTENT_SYNCED = ?, IMAGE_ATTACHMENTS = ? WHERE ID = ?
INSERT INTO CONVERSATION (ID, DATE_RECEIVED) VALUES (?, ?)
UPDATE CONVERSATION SET DATE_RECEIVED = ? WHERE ID = ?
INSERT INTO ACCOUNT (ID) VALUES (?)
INSERT INTO PROTECTED.ACCOUNT (ID, DISPLAY_NAME, SHOULD_ARCHIVE, EMAIL_ADDRESSES) VALUES (?, ?, ?, ?)
INSERT INTO PROTECTED.ACCOUNT (ID, DISPLAY_NAME, SHOULD_ARCHIVE, EMAIL_ADDRESSES) VALUES (%Q, %Q, %i, %Q)
UPDATE PROTECTED.ACCOUNT SET DISPLAY_NAME = ?, SHOULD_ARCHIVE = ?, EMAIL_ADDRESSES = ? WHERE ID = ?
UPDATE PROTECTED.ACCOUNT SET DISPLAY_NAME = %Q, SHOULD_ARCHIVE = %i, EMAIL_ADDRESSES = %Q WHERE ID = %Q
DELETE FROM PROTECTED.MAILBOX WHERE ID in  (SELECT ID FROM MAILBOX WHERE ACCOUNT_ID = ?)
DELETE FROM PROTECTED.MAILBOX WHERE ID = %Q
DELETE FROM MAILBOX WHERE ACCOUNT_ID = ?
DELETE FROM MAILBOX WHERE ID = ?
DELETE FROM PROTECTED.MAILBOX WHERE ID = ?
DELETE FROM CONVERSATION WHERE NOT EXISTS (SELECT ID FROM MESSAGE WHERE CONVERSATION_ID = CONVERSATION.ID)
DELETE FROM ACCOUNT WHERE ID = ?
DELETE FROM PROTECTED.ACCOUNT WHERE ID = ?
DELETE FROM PROTECTED.ACCOUNT WHERE ID = %Q
INSERT INTO MAILBOX (ID, TYPE, FILTER_TYPE, ACCOUNT_ID, URL, SYNC_ENABLED, SYNC_REQUESTED, SYNC_ACTIVE) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
INSERT INTO PROTECTED.MAILBOX (ID, CUSTOM_NAME) VALUES (?, ?)
INSERT INTO PROTECTED.MAILBOX (ID, CUSTOM_NAME) VALUES (%Q, %Q)
UPDATE MAILBOX %@ WHERE ID = ?
UPDATE PROTECTED.MAILBOX %@ WHERE ID = ?
UPDATE PROTECTED.MAILBOX %@ WHERE ID = '%@'
INSERT INTO IDS_IDENTIFIER_NOT_YET_ACKD (IDS_IDENTIFIER, OBJECT_ID, OBJECT_TYPE, DATE_TO_RESEND, RESEND_INTERVAL) VALUES (?, ?, ?, NULL, ?)
SELECT OBJECT_ID, OBJECT_TYPE, RESEND_INTERVAL FROM IDS_IDENTIFIER_NOT_YET_ACKD WHERE IDS_IDENTIFIER = ?
DELETE FROM IDS_IDENTIFIER_NOT_YET_ACKD WHERE IDS_IDENTIFIER = ?
UPDATE IDS_IDENTIFIER_NOT_YET_ACKD SET RESEND_INTERVAL = ?, DATE_TO_RESEND = ? WHERE IDS_IDENTIFIER = ?
SELECT IDS_IDENTIFIER, DATE_TO_RESEND FROM IDS_IDENTIFIER_NOT_YET_ACKD WHERE DATE_TO_RESEND IS NOT NULL
INSERT INTO COMPOSED_MESSAGE (ID, REFERENCE_MESSAGE_ID, IDS_IDENTIFIER, PROGRESS, DATE_SENT) VALUES (?, ?, ?, ?, ?)
INSERT INTO PROTECTED.COMPOSED_MESSAGE (ID, SENDING_TYPE, "TO", CC, SUBJECT, BODY, REFERENCE_MESSAGE_ID, INCLUDE_ATTACHMENTS, DATE_SENT, IDS_IDENTIFIER) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INSERT INTO PROTECTED.COMPOSED_MESSAGE (ID, SENDING_TYPE, "TO", CC, SUBJECT, BODY, REFERENCE_MESSAGE_ID, INCLUDE_ATTACHMENTS, DATE_SENT, IDS_IDENTIFIER) VALUES (%Q, %lu, %Q, %Q, %Q, %Q, %Q, %i, datetime(%f, 'unixepoch'), %Q)
UPDATE COMPOSED_MESSAGE SET PROGRESS = ? WHERE ID = ?
DELETE FROM COMPOSED_MESSAGE WHERE ID = ?
DELETE FROM PROTECTED.COMPOSED_MESSAGE WHERE ID = ?
DELETE FROM PROTECTED.COMPOSED_MESSAGE WHERE ID = %Q
DELETE FROM COMPOSED_MESSAGE WHERE DATE_SENT < ?
DELETE FROM PROTECTED.COMPOSED_MESSAGE WHERE DATE_SENT < ?
DELETE FROM PROTECTED.COMPOSED_MESSAGE WHERE DATE_SENT < datetime(%f, 'unixepoch')
IDS_IDENTIFIER = ?
ID = ?
SELECT REFERENCE_MESSAGE_ID, ID, PROGRESS FROM COMPOSED_MESSAGE WHERE REFERENCE_MESSAGE_ID IS NOT NULL ORDER BY REFERENCE_MESSAGE_ID
SELECT ID, PROGRESS, REFERENCE_MESSAGE_ID FROM COMPOSED_MESSAGE WHERE IDS_IDENTIFIER = ?
SELECT ID, SUBJECT FROM PROTECTED.COMPOSED_MESSAGE
-[NNMKDatabase failedComposedMessageIdsAndSubjects]_block_invoke
SELECT REFERENCE_MESSAGE_ID FROM COMPOSED_MESSAGE WHERE ID = ?
SELECT COUNT(ID) FROM MESSAGE
M.ID is not null
SELECT MIN(DATE_RECEIVED) FROM MESSAGE WHERE MAILBOX_ID = ? AND THREAD_SPECIFIC = 0 
AND ((SPECIAL_MAILBOX_SPECIFIC & ? > 0) OR SPECIAL_MAILBOX_SPECIFIC = 0)
AND SPECIAL_MAILBOX_SPECIFIC = 0
 ORDER BY DATE_RECEIVED ASC 
DELETE FROM ACCOUNT
DELETE FROM PROTECTED.ACCOUNT
DELETE FROM MAILBOX
DELETE FROM PROTECTED.MAILBOX
v12@?0^{sqlite3_stmt=}4i8
SELECT KEY, VALUE FROM CONTROL
SELECT VALUE FROM %@CONTROL WHERE KEY = ?
PROTECTED.
INSERT OR REPLACE INTO %@CONTROL (KEY, VALUE) VALUES (?, ?)
INSERT OR REPLACE INTO PROTECTED.CONTROL (KEY, VALUE) VALUES (%s, %s)
SELECT ID FROM MAILBOX WHERE ACCOUNT_ID = ?
LIMIT ?, ?
 M.MAILBOX_ID IN (%@) 
SELECT %@ FROM MESSAGE M INNER JOIN PROTECTED.MESSAGE P ON M.ID == P.ID WHERE %@ ORDER BY %@ %@
SELECT %@ FROM MESSAGE M WHERE %@ ORDER BY %@ %@
CONVERSATION_ID
%@ID,                 %@ AS CONVERSATION_ID,                 %@ACCOUNT_ID,                 NULL AS "FROM",                 %@DATE_SENT,                 NULL AS SUBJECT,                 %@DATE_RECEIVED,                 %@MESSAGE_ID_HEADER,                 NULL AS PREVIEW,                 %@STATUS,                 %@VISIBLE_STATUS,                 NULL AS "TO",                 NULL AS CC,                 NULL AS BCC,                 %@NOTIFICATION_MESSAGE_ID,                 %@STATUS_VERSION,                 %@MAILBOX_ID,                 %@THREAD_SPECIFIC ,                 %@SPECIAL_MAILBOX_SPECIFIC
%@ID,                 %@ AS CONVERSATION_ID,                 %@ACCOUNT_ID,                 %@"FROM",                 %@DATE_SENT,                 %@SUBJECT,                 %@DATE_RECEIVED,                 %@MESSAGE_ID_HEADER,                 %@PREVIEW,                 %@STATUS,                 %@VISIBLE_STATUS,                 %@"TO",                 %@CC,                 %@BCC,                 %@NOTIFICATION_MESSAGE_ID,                 %@STATUS_VERSION,                 %@MAILBOX_ID,                 %@THREAD_SPECIFIC ,                 %@SPECIAL_MAILBOX_SPECIFIC
%@DATE_RECEIVED DESC, %@ID ASC
WHERE ID IN (%@)
DELETE FROM PROTECTED.MESSAGE %@
DELETE FROM PROTECTED.MESSAGE 
DELETE FROM MESSAGE %@
WHERE %@
LEFT OUTER JOIN MESSAGE ME ON ME.CONVERSATION_ID = W.ID
 WHERE %@ 
 AND %@ 
(SELECT DISTINCT X.* FROM CONVERSATION X LEFT OUTER JOIN MESSAGE ME ON ME.CONVERSATION_ID = X.ID WHERE %@)
, (SELECT COUNT(ID) FROM %@ WHERE (DATE_RECEIVED > C.DATE_RECEIVED) OR (DATE_RECEIVED = C.DATE_RECEIVED AND ID < C.ID)) AS C_INDEX 
 LEFT OUTER JOIN PROTECTED.MESSAGE P ON M.ID == P.ID 
SELECT %1$@ %2$@ FROM CONVERSATION C                          LEFT OUTER JOIN MESSAGE M ON M.CONVERSATION_ID = C.ID                          %3$@                          WHERE                          C.ID IN (SELECT DISTINCT W.ID FROM CONVERSATION W %4$@ %5$@ ORDER BY %6$@ LIMIT ?, ?)                            %7$@                          ORDER BY %8$@, %9$@
SELECT %@ FROM ACCOUNT A INNER JOIN PROTECTED.ACCOUNT P_ACCOUNT ON A.ID == P_ACCOUNT.ID %@
P_ACCOUNT
SELECT %@ FROM ACCOUNT A %@
SELECT %@ FROM MAILBOX M LEFT OUTER JOIN PROTECTED.MAILBOX P_MAILBOX ON M.ID == P_MAILBOX.ID %@
P_MAILBOX
SELECT %@ FROM MAILBOX M %@
%@ID, NULL, NULL, NULL
%@ID, %@DISPLAY_NAME, %@SHOULD_ARCHIVE, %@EMAIL_ADDRESSES
%@ID, %@TYPE, %@FILTER_TYPE, NULL, %@ACCOUNT_ID, %@URL, %@SYNC_ENABLED, %@SYNC_REQUESTED, %@SYNC_ACTIVE 
%@ID, %@TYPE, %@FILTER_TYPE, %@CUSTOM_NAME, %@ACCOUNT_ID, %@URL, %@SYNC_ENABLED, %@SYNC_REQUESTED, %@SYNC_ACTIVE 
SELECT ID, SENDING_TYPE, "TO", CC, SUBJECT, BODY, REFERENCE_MESSAGE_ID, INCLUDE_ATTACHMENTS FROM PROTECTED.COMPOSED_MESSAGE WHERE %@
SELECT ID, NULL, NULL, NULL, NULL, NULL, REFERENCE_MESSAGE_ID, NULL FROM COMPOSED_MESSAGE WHERE %@
DELETE FROM IDS_IDENTIFIER_NOT_YET_ACKD
%@DATE_RECEIVED >= %f
(%@VISIBLE_STATUS & %lu) > 0
"%@"
 %@.MAILBOX_ID IN (%@) 
loadedSyncedMailboxProtectedData
TB,N,V_loadedSyncedMailboxProtectedData
protectedDatabaseAttached
TB,R,N
waitingForMigration
TB,N,V_waitingForMigration
currentDatabaseSchemaVersion
TI,N,V_currentDatabaseSchemaVersion
expectedDatabaseVersion
TI,R,N
fullSyncVersion
TI,N,V_fullSyncVersion
receivedFullSyncMessages
TB,N,V_receivedFullSyncMessages
lastIDSIdentifierForFullSyncRequest
T@"NSString",&,N,V_lastIDSIdentifierForFullSyncRequest
lastIDSIdentifierForHaltSyncRequest
T@"NSString",&,N,V_lastIDSIdentifierForHaltSyncRequest
databaseRecentlyMigrated
TB,N,V_databaseRecentlyMigrated
mailboxFilter
T@"NNMKMailboxFilter",&,N,V_mailboxFilter
appLastLaunchedDate
T@"NSDate",&,N,V_appLastLaunchedDate
notificationSettingsEnabled
TB,N,V_notificationSettingsEnabled
NNMKMessageDataSourceResetMailboxFilterNotification
v8@?0@"<NNMKMessageDataSourceObserver>"4
@"NNMKConversationOperation"20@?0@"NSString"4@"NSMutableArray"8@"NNMKConversation"12@"NSArray"16
@"NNMKConversationOperation"20@?0@"NSString"4@"NSArray"8@"NNMKConversation"12@"NSArray"16
@8@?0@"<NNMKMessageUpdate>"4
@8@?0@"<NNMKMessageDeletion>"4
v16@?0@"NNMKMessage"4I8^B12
B8@?0@"NNMKMessage"4
T@"NNMKMailboxFilter",&,N
compactDatabaseProcedureContext
TI,N,V_compactDatabaseProcedureContext
observers
T@"NSHashTable",&,N,V_observers
com.apple.nanomail.receiverServerQueue
NanoMail's Main Transaction
v8@?0B4
v8@?0@"<NNMKNanoMailServiceXPCBasicClientInterface>"4
v8@?0@"<NNMKNanoMailServiceXPCAdHocClientInterface>"4
v8@?0@"<NNMKNanoMailServiceXPCMessageUpdatesBasedClientInterface>"4
v8@?0@"<NNMKNanoMailServiceXPCConversationsBrowsingBasedClientInterface>"4
v8@?0@"NSError"4
serviceCoordinator
T@"NNMKServiceCoordinator",&,N,V_serviceCoordinator
mainTransaction
T@"NSObject<OS_os_transaction>",&,N,V_mainTransaction
serverQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serverQueue
xpcClientConnections
T@"NSMutableSet",&,N,V_xpcClientConnections
xpcConversationBrowsingBasedConnections
T@"NSMutableSet",&,N,V_xpcConversationBrowsingBasedConnections
xpcMessageUpdatesBasedConnections
T@"NSMutableSet",&,N,V_xpcMessageUpdatesBasedConnections
nanoMailSnapshotRequester
T@"NNMKNanoMailSnapshotRequester",&,N,V_nanoMailSnapshotRequester
connectionsWaitingForConversationsFromFetch
T@"NSMutableSet",&,N,V_connectionsWaitingForConversationsFromFetch
connectionListeners
T@"NSSet",&,N,V_connectionListeners
connectionLookup
T@"<NNMKXPCConnectionLookup>",&,N,V_connectionLookup
init
defaultCenter
_watchDidStartPlayingDemoMovie
addObserver:selector:name:object:
_watchDidStopPlayingDemoMovie
removeObserver:name:object:
dealloc
forceDatabaseReplace
isMigrating
setIsMigrating:
sharedInstance
registryBasePath
stringByAppendingPathComponent:
defaultManager
contentsOfDirectoryAtPath:error:
countByEnumeratingWithState:objects:count:
removeItemAtPath:error:
copyItemAtPath:toPath:error:
demoContentMigrationCompletionBlock
date
messagesReceivedBefore:mailboxFilter:
count
objectAtIndexedSubscript:
dateReceived
timeIntervalSinceNow
dateByAddingTimeInterval:
setDateReceived:
dateSent
setDateSent:
updateMessageDatesForMessage:
messageDatesUpdatedCompletionBlock
shiftContentDatesForDatabase:
.cxx_destruct
setDemoContentMigrationCompletionBlock:
setMessageDatesUpdatedCompletionBlock:
migrationQueue
setMigrationQueue:
_isMigrating
_demoContentMigrationCompletionBlock
_messageDatesUpdatedCompletionBlock
_migrationQueue
alloc
initWithExecutionQueue:
database
initWithQueue:database:
initWithQueue:dataSource:database:
initWithQueue:delegate:syncReceiver:messageDataSource:databaseFactory:
setObserver:
registerObserver:
setDelegate:
requestFullSyncIfNeeded
checkForMailSyncUsage
_deviceLockStateChanged
_nanoMailAppUninstalled
databaseRecentlyMigrated
createdDatabaseFromScratch
receivedFullSyncMessages
setCreatedDatabaseFromScratch:
setDatabaseRecentlyMigrated:
requestFullSync
reportFullSyncRequestedFromWatch:corruptionDetected:migrationRelated:idsFailureRelated:fullSyncVersionMatchRelated:
hasFilter
messageDataSource
setMailboxFilter:
conversations:shouldFetchMoreMessages:
requestOlderMessages
mailboxFilter
mailboxIds
hasMailboxSyncActiveForMailbox:
errorWithDomain:code:userInfo:
conversationsBeforeDate:count:shouldFetchMoreMessages:
lastObject
conversation
oldestMessageDateForMailboxId:
compare:
syncReceiver
arrayWithObjects:count:
initWithMailboxIds:
requestOlderMessagesWithFilter:
reportFetchOlderMessages
mailboxSelection
accounts
initWithAccounts:
isEqual:
mailboxChangesApplyingSelection:previousSelection:
mailboxesToUpdate
mailboxesToReSync
mailboxesToDisableSync
mailboxId
mailboxWithId:
syncEnabled
syncRequested
filterType
updatesWithSyncEnabled:syncRequested:filterType:
updateMailboxWithId:mailboxUpdates:
updatesWithSyncEnabled:syncRequested:
resetMailboxAndContentForMailboxId:applyingUpdates:
resetMailboxAndContentForMailboxId:
updateMailboxSelection:
messageWithId:
unreadMessagesWithContentAtIndexRange:sinceDate:fromAccountsWithIds:orVIPs:orNotifyConversation:excludingMessageIds:
totalNumberOfConversationsWithMailboxFilter:
messagesCount
deleteAllMessages
initWithFilterType:
setMailboxId:
setCustomName:
setAccountId:
setSyncEnabled:
setSyncRequested:
setSyncActive:
addMailboxResetingPreviousContent:
messagesProcessedHandler
handleMessagesAdded:handler:
allMessages
resetVisibleStatusForMessages
messageService:didRequireReloadCacheWithFirstConversations:
isClassCDataAvailable
requestFetchManuallyTriggered:filteredConversationId:mailboxIds:forceBatchResponse:
dictionary
setWithArray:
objectForKeyedSubscript:
timeIntervalSince1970
removeObject:
setObject:forKeyedSubscript:
allObjects
networkLatencyTestMode
requestMoreMessagesForConversationId:
requestMessageContentForMessageId:onlyIfNotAvailable:highPriority:
isConnected
updateMessageStatus:
deleteMessages:
preferredService:
sendComposedMessage:
deleteComposedMessageWithId:
resendComposedMessageWithId:
composedMessageIdsByReferenceMessageIdsAndProgress:
failedComposedMessageIdsAndSubjects
connectionFailed
delegate
messageService:didChangeConnectivity:
setAppLastLaunchedDate:
setNotificationSettingsEnabled:
notificationSettingsEnabled
appLastLaunchedDate
requestHaltSync
reportHaltSyncRequestedFromWatch:
requestFetchManuallyTriggered:filteredConversationId:forceBatchResponse:
requestCompactMessagesBeforeDate:
startDelayedDatabaseCompactProcedure
cancelDelayedDatabaseCompactProcedure
messageService:didAddMessages:containsNewMessages:
messageService:didUpdateMessages:
messageService:didDeleteMessages:
messageService:didExecuteConversationOperations:
messageService:didReceiveImageData:forImageAttachmentOfMessageWithId:contentId:
messageService:didReceiveMessageContent:preview:messageId:
messageService:didChangeSendingProgressForComposeMessage:composedMessageWithId:referenceMessageId:
messageService:didFailSendingComposedMessageWithId:subject:
messageService:didStartSendingComposedMessageWithId:referenceMessageId:
messageService:didFailSyncingMessagesWithError:
messageService:didReplyWithMessageContentLoadFailedForMessageWithId:
setReceivedFullSyncMessages:
messageService:didFinishSyncingMessages:isInitialSync:
isMailboxVisible:
messageServiceDidReceiveOldMessageAvailableNotification:forMailboxId:
messageServiceDidCompleteFetchRequest:batchResponse:
setConnectionFailed:
messageServiceDidDeleteAllMessages:
messageService:didAddAccount:
messageService:didUpdateAccount:
messageService:didDeleteAccount:
containsMailboxFilter:
messageService:didChangeMailboxSelection:
resendReadyIDSIdentifiers
notifyMailboxSelectionChanged
deleteDatabaseDirectoryCompletely
recreateConnection
databaseFactory
isProtectedDatabaseAttached
attemptToLoadProtectedData
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
messageDataSource:didInsertMessages:
messageDataSource:didUpdateMessages:
messageDataSource:didRemoveMessages:
messageDataSourceDidRemoveAllMessages:
messageDataSourceDidUpdateDatabaseDates:
messageDataSourceDidRecreateDatabase:
messageDataSourceDidDeleteDatabaseDirectory:
messageDataSource:didFinishCompactingDatabaseWithDateForCap:
handleDatabaseUnlocked
handleDatababaseChangedForRetailDemo
handleDatababaseDirectoryRecreated
handleDatababaseMigrated
messageService:didSucceedToCommunicate:
requestMessageContentForMessageIds:onlyIfNotAvailable:highPriority:
initWithQueue:delegate:
serviceForMessage:
preferredServiceForMessageWithId:
retrieveFirstConversations:fetchIfNotAvailable:willFetchMoreMessages:forMailboxFilter:error:
conversationsReceivedBefore:count:fetchIfNotAvailable:willFetchMoreMessages:error:
totalNumberOfConversations
addMessage:
addMailbox:
cleanUpMessagesForFilteredMailbox
accountsWithError:
pauseNetworkActivity
resumeNetworkActivity
updateAppLastLaunchedDate
dispatchAfterProtectedDatabaseAttached:
waitUntilDone
setSyncReceiver:
setMessageDataSource:
setDatabaseFactory:
setDatabase:
executionQueue
setExecutionQueue:
pendingFullSyncRequest
setPendingFullSyncRequest:
executeFullSyncAfterFirstUnlock
setExecuteFullSyncAfterFirstUnlock:
lastBatchFetchRequestDateByMailboxId
setLastBatchFetchRequestDateByMailboxId:
_pendingFullSyncRequest
_executeFullSyncAfterFirstUnlock
_connectionFailed
_delegate
_syncReceiver
_messageDataSource
_databaseFactory
_database
_executionQueue
_lastBatchFetchRequestDateByMailboxId
source
messageId
initWithQueue:
datesForIDSIdentifiersScheduledToBeResent
enqueueIDSIdentifiersForResend:
connectivityState
_sendComposedMessage:resendInterval:
composedMessageWithId:
copyWithNewId
composedMessageId
syncActiveMailboxes
requestCompactMessagesBeforeDate:mailbox:
fullSyncVersion
setFullSyncVersion:
archivedDataWithRootObject:
setBeforeDateReceived:
requestCompactMessages:
isPossiblyConnected
_requestContentFromProviderForMessageWithIds:highPriority:
dataSource
containsMessageContentAndAttachmentsForMessageId:
nnmk_filter:
setMessageId:
setHighPriority:
_isPossiblyConnectedToPhoneThroughCloudMessaging
requestContent:highPriority:
_isPossiblyConnectedToPhoneThroughMagnetOrWifi
setWantsBatchedResponse:
_fetchRequestProtobufFilteredConversationId:mailboxId:batchResponse:
addFetchRequest:
requestFetch:
numberWithBool:
setConversationId:
allMessagesWithMailboxFilter:
subarrayWithRange:
setWillTrimDatabaseAfterResults:
string
status
appendFormat:
dataUsingEncoding:
compressedData
setCurrentMessageIdsAndStatus:
setCurrentDateForRequestingMoreMessages:
isFilteredByType
mailboxType
oldestMessageDateForMailboxId:specialMailboxFilterType:
setFilterType:
addMoreMessagesRequest:
moreMessagesRequestsCount
requestMoreMessagesInBatch:
messageIdsFromMessages:
statusVersion
setStatusVersion:
setUpdatedStatus:
addMessageStatusUpdate:
updateMessagesStatus:
addObjectId:objectType:resendInterval:forIDSIdentifierNotYetAckd:
handleMessagesUpdated:handler:
arrayWithCapacity:
setDeletionState:
addMessageDeletion:
addObject:
_deleteMessages:
warnMessagesFilteredOut:mailbox:
_groupMessagesByMailbox:block:
addRemovedMessageId:
warnMessagesFilteredOut:
conversationWithId:messages:index:
firstObject
lastMessageDateOfConversationWithId:
requestMoreMessagesForConversation:
_verifyDatabaseOkForFullSyncVersion:
activeMailboxIds
enabledMailboxIds
deleteAllAccounts
deleteAllMailboxes
initialAccounts
accountId
displayName
setDisplayName:
shouldArchive
setShouldArchive:
emails
setEmailAddresses:
mailboxes
mailbox
containsObject:
addAccount:
mailboxesWithAccountId:
setMailboxes:
_notifyDelegateThatAccountWasReceived:
accountWithId:
removeObjectForKey:
customName
isEqualToString:
updatesWithCustomName:
updatesWithSyncEnabled:
allValues
deleteMailboxWithId:
updateAccount:
_notifyDelegateThatAccountWasUpdated:
deleteMailboxesWithAccountId:
deleteAccountWithId:
_notifyDelegateThatAccountWasDeleted:
objectIdForIDSIdentifierNotYetAckd:objectType:resendInterval:
newResendIntervalForPreviousResendInterval:errorCode:
_resendObjectId:objectType:resendInterval:idsIdentifier:
_scheduleIdsIdentifierForResend:currentResendInterval:newResendInterval:
markIDSIdentifierAsAckd:
dequeueIDSIdentifierForResend:
composedMessageIdForIDSIdentifier:progress:referenceMessageId:
_updateProgress:forComposedMessageWithId:referenceMessageId:
initialMessagesSyncs
initWithMailboxes:
_handleMailboxMessageSync:
mailboxSyncVersion
initialMessages
_verifyDatabaseOkForMailboxId:mailboxSyncVersion:
syncActive
updatesWithSyncActive:syncEnabled:
initialMessagesCount
_messageFromMessageProtobuf:
messageIdHeader
_handleMessagesAdded:shouldHandleOnlyConversationOperationUpdates:
_notifyDelegateThatFinishedSyncingMessagesSuccessfullyReceivingMessages:isInitialSync:
_verifyDatabaseOkForFullSyncVersion:mailboxId:mailboxSyncVersion:
messageAdditions
messagesAreNew
dateSynced
unarchiveObjectOfClass:withData:
reportMessageReceivedWithId:willGenerateNotification:fullSyncVersion:dateSynced:
nnmk_map:
reportMoreMessagesReceivedConversationSpecific:fullSyncVersion:dateSynced:
addedMessagesCount
addedMessages
conversationId
messageStatusUpdates
reportMessageUpdateReceivedForMessageWithId:fullSyncVersion:dateSynced:
messageDeletions
reportMessageDeletionReceivedForMessageWithId:fullSyncVersion:dateSynced:
fetchResults
shouldTrimDatabase
hasDateForRequestingMoreMessages
_handleBatchedFetchResult:isProtectedData:handler:
syncVersionForMailboxId:
updateSyncVersion:forMailboxId:
messageUpdates
dateForRequestingMoreMessages
deleteMessagesOlderThan:mailboxId:
_messageIdsForMessageProtobufs:
addObjectsFromArray:
messagesWithIds:
updatedStatus
handleMessagesDeleted:handler:
updatesWithSyncEnabled:filterType:
resetMailboxForMailboxId:applyingUpdates:
hasNotificationMessage
notificationMessage
containsMessageWithId:
containsMessageContentForMessageId:
mainAlternativeValid
setMainAlternativeValid:
partiallyLoaded
setPartiallyLoaded:
attachmentsCount
attachments
contentId
type
renderOnClient
setRenderOnClient:
imageWidth
imageHeight
setImageSize:
setContentId:
fileName
setFileName:
fileSize
setFileSize:
mimePartNumber
setMimePartNumber:
setType:
setAttachments:
text
decompressedData
length
reportContentReceivedForMessageWithId:sizeInBytes:fullSyncVersion:dateSynced:
classesForUnarchivingTextData
unarchiveObjectOfClasses:withData:
mutableCopy
mailboxIdForMessageId:
prepareAttributedStringForDisplay:messageId:mailboxId:attachments:
setTextData:
preview
initWithData:encoding:
handleMessageContentAdded:preview:messageId:handler:
imageData
reportImageAttachmentReceivedForMessageWithId:contentId:sizeInBytes:fullSyncVersion:dateSynced:
handleImageDataAdded:forImageAttachmentOfMessageWithId:contentId:handler:
notifyInitialSyncFinished:
_errorWithCode:
_notifyDelegateThatFailedSyncingMessagesWithError:
lastIDSIdentifierForFullSyncRequest
lastIDSIdentifierForHaltSyncRequest
setLastIDSIdentifierForFullSyncRequest:
setLastIDSIdentifierForHaltSyncRequest:
progress
referenceMessageIdForComposedMessageId:
dateWithTimeIntervalSinceNow:
rescheduleIDSIdentifier:resendInterval:withDateToResend:
enqueueIDSIdentifierForResend:atDate:silent:
_resendPendingMessagesWithIds:forIDSIdentifier:newResendInterval:
_resendPendingComposedMessageForIDSIdentifier:newResendInterval:
sendMailboxSelection:resendInterval:
isDeviceUnlocked
composedMessageWithIDSIdentifier:
_scheduleIdsIdentifierForResendAfterUnlock:resendInterval:
referenceMessageId
hasPrefix:
isRunningInStoreDemoMode
setComposedMessageId:
sendingType
setSendingType:
addTo:
subject
setSubject:
body
setBody:
setReferenceMessageId:
includeAttachments
setIncludeAttachments:
sendMessage:
null
recordComposedMessage:IDSIdentifier:
updateProgress:forComposedMessageWithId:
messagesProcessedConversationHandler
waitingForMigration
resetRepeatPreventionHistory
resetMailboxSyncVersions
removeAllMessages
removeAllObjects
requestFullSync:
requestHaltSync:
protoMailboxSelectionFromMailboxSelection:fullSyncVersion:
setStatus:
from
setFrom:
setTo:
setCc:
bccs
setBcc:
setMessageIdHeader:
notificationMessageId
setNotificationMessageId:
isThreadSpecific
setIsThreadSpecific:
isSpecialMailboxSpecific
setIsSpecialMailboxSpecific:
setConversationOperationsHandler:
setMessagesAddedHandler:
setMessagesUpdatedHandler:
setMessagesDeletedHandler:
setMessageContentHandler:
setImageAttachmentHandler:
_groupMessagesByMailboxId:
allKeys
array
setWithObjects:
currentInstance
messagesSyncServiceClient:didFailSendingProtobufWithIDSIdentifier:errorCode:
messagesSyncServiceClient:didSendProtobufSuccessfullyWithIDSIdentifier:
messagesSyncServiceClientConnectivityDidChange:
messagesSyncServiceClient:didAddMessages:
messagesSyncServiceClient:didSendInitialMessagesSync:
messagesSyncServiceClient:didFetchMoreMessages:
messagesSyncServiceClient:didFetchMoreMessagesForConversation:
messagesSyncServiceClient:didReceivedCoalescedBatchedFetchResult:
messagesSyncServiceClient:didUpdateMessagesStatus:
messagesSyncServiceClient:didDeleteMessages:
messagesSyncServiceClient:didUpdateMailboxSelection:
messageContentSyncServiceClient:didSyncMessageContent:
messageContentSyncServiceClient:didSyncImageAttachment:
messageContentSyncServiceClient:didNotifyInitialContentSyncCompleted:
accountsSyncServiceClient:didAddOrUpdateAccount:
accountsSyncServiceClient:didDeleteAccount:
accountsSyncServiceClient:didSyncInitialAccounts:
fetchesSyncServiceClient:didFailSendingProtobufWithIDSIdentifier:errorCode:
fetchesSyncServiceClient:didSendProtobufSuccessfullyWithIDSIdentifier:
fetchesSyncServiceClient:didRequestPrepareForFullSync:
fetchesSyncServiceClient:didWarnErrorDownloadingContentForMessage:
fetchesSyncServiceClient:didNotifyOldMessagesAvailable:
fetchesSyncServiceClient:didNotifyFetchRequestCompleted:
fetchesSyncServiceClient:didReportComposedMessageSendingProgress:
requestFetchManuallyTriggered:filteredConversationId:mailboxIds:
resendObjectsForIDSIdentifier:
syncServiceEndpoints
setDataSource:
messagesSyncService
setMessagesSyncService:
contentSyncService
setContentSyncService:
accountsSyncService
setAccountsSyncService:
fetchesSyncService
setFetchesSyncService:
protectedSyncService
setProtectedSyncService:
protectedContentSyncService
setProtectedContentSyncService:
lastFetchMoreMessagesIDSIdentifier
setLastFetchMoreMessagesIDSIdentifier:
lastFetchRequestIDSIdentifier
setLastFetchRequestIDSIdentifier:
messageIdsContentArrivedBeforeActualMessage
setMessageIdsContentArrivedBeforeActualMessage:
fullSyncRecoveredInThisSession
setFullSyncRecoveredInThisSession:
setMessagesProcessedHandler:
setMessagesProcessedConversationHandler:
_fullSyncRecoveredInThisSession
_dataSource
_messagesSyncService
_contentSyncService
_accountsSyncService
_fetchesSyncService
_protectedSyncService
_protectedContentSyncService
_lastFetchMoreMessagesIDSIdentifier
_lastFetchRequestIDSIdentifier
_messageIdsContentArrivedBeforeActualMessage
_messagesProcessedHandler
_messagesProcessedConversationHandler
pidForApplication:
disconnect
requestViewController:fromServiceWithBundleIdentifier:connectionHandler:
didRenderMessage
didFailRenderingMessage
didUpdateAccountEmailAddresses:
didRequestDismissIfNotYetShowing
didAnimateInQuickLook:
didAnimateInLongLook:
didAnimateToLongLook:
didAnimateDismissLongLook:
didAnimateSlideDownDismissLongLook:
didTapIconInHeaderView
didTapQuickLookInHeaderView
didTapLongLookContentInHeaderView
didExecuteAction
didDismissInActionMenu
didDismissDragging
didTapAttachment:
didTapURL:
didScrollToYPosition:
didEndScrollingAtYPosition:
willBeginDragging
didStartSendingMessageRelatedToCurrentMessage
didRequestReplyOptionsActionSheetForMultipleRecipients
didCancelMessageComposerViewController
interfaceWithProtocol:
prepareForBulletin
showMessageWithID:fallbackFrom:fallbackSubject:fallbackMessageSnippet:fallbackAccountId:contentToBeSynced:
showFakeMessageWithID:from:subject:messageBody:
setPresentationMode:
animateInQuickLookWithDuration:
animateInLongLookWithDuration:
animateToLongLook
animateDismissLongLook
animateSlideDownDismissLongLook
configureBackgroundImage:
markMessageAsRead
notifyForcingDisplay
handleWheelRotationDelta:eventSourceTimestamp:
respondWithSelectedReplyOption:
launchBulletinService
exportedInterface
serviceViewControllerInterface
__shouldHostRemoteTextEffectsWindow
errorWithCode:
initWithCapacity:
orderedSetWithArray:
defaultParagraphStyle
setHyphenationFactor:
setQuoteLevel:
setFirstLineHeadIndent:
setHeadIndent:
setAlignment:
addAttribute:value:range:
nnmlTextForegroundColorForQuoteLevel:
indexSet
copy
nnmlAppBackgroundColor
unsignedIntegerValue
attributesAtIndex:effectiveRange:
setSpacingBeforeLeadingOfBody:
setSpacingAfterLeadingOfBody:
colorWithRed:green:blue:alpha:
nnmlTextWarningColor
_bestForegroundColorForForegroundColor:backgroundColor:
attribute:atIndex:longestEffectiveRange:inRange:
nnmlTextForegroundColorLinks
numberWithInteger:
_textAttachmentForAttachment:messageId:mailboxId:
containsIndex:
attribute:atIndex:effectiveRange:
addIndexesInRange:
enumerateAttributesInRange:options:usingBlock:
replaceCharactersInRange:withString:
nnmlCollapsedURLColor
dictionaryWithObjects:forKeys:count:
addAttributes:range:
enumerateRangesWithOptions:usingBlock:
attributedStringWithAttachment:
appendAttributedString:
imageSize
setBounds:
currentConnection
currentRunLoop
_checkCurrentDeviceLockStatus
isNanoMailInstalled
performDatabaseMigrationIfNeeded
removeObserver:
_setupDatabases
observer
_handleDeviceLockStatusChanged:
_setupDatabaseForRetailDemo
_doSetupDatabase
setupConnection
_checkForDatabaseCorruptionFromErrorCode:
notifyProtectionDataAvailable:
errorCodeMeansCorruptedDatabase:
_recreateDatabaseFromScratch:
demoUtility
setDemoUtility:
databaseDirectory
initWithUnprotectedDatabaseFileName:protectedDatabaseFileName:inDirectory:protectedDatabaseName:errorCode:
tableExists:inDatabase:
_createTablesUsingFile:
lastErrorMessage
initWithPath:
initWithConnection:journal:queue:
setNewConnection:journal:
loadControlValues
setSchemaVersionToExpected
currentDatabaseSchemaVersion
protectedDatabaseAttached
attachProtectedDatabase
_mergeJournal
dettachProtectedDatabase
beginTransaction
preparedStatementForPattern:cacheStatement:
stepPreparedStatement:
closeExecutedPreparedStatement:
mergeUsingBlock:
commitTransaction
bundleForClass:
bundlePath
stringWithContentsOfFile:encoding:error:
executeSQL:
messageFrameworkDatabaseDiretory
currentDatabase
databaseQueue
setDatabaseQueue:
connection
setConnection:
journal
setJournal:
_createdDatabaseFromScratch
_observer
_databaseQueue
_connection
_journal
_demoUtility
initWithMachServiceName:
machServiceName
setMachServiceName:
_machServiceName
handlerWithMessagesAddedHandler:messagesUpdatedHandler:messagesDeletedHandler:messageContentHandler:imageAttachmentHandler:conversationOperationsHandler:
messagesAddedHandler
messagesUpdatedHandler
messagesDeletedHandler
messageContentHandler
imageAttachmentHandler
conversationOperationsHandler
_messagesAddedHandler
_messagesUpdatedHandler
_messagesDeletedHandler
_messageContentHandler
_imageAttachmentHandler
_conversationOperationsHandler
numberWithUnsignedInteger:
appendString:
hasUnprotectedChanges
insertString:atIndex:
bindUnsignedInteger:intoStatement:paramIndex:
boolValue
bindBool:intoStatement:paramIndex:
bindString:intoStatement:paramIndex:
updatesWithSyncActive:
updatesWithSyncEnabled:customName:
hasProtectedChanges
unprotectedFieldsSqlUpdate
bindUnprotectedValuesIntoStatement:paramIndex:
bindProtectedValuesIntoStatement:paramIndex:
protectedFieldsSqlUpdateWithValues
protectedFieldsSqlUpdate
_filterType
_syncActive
_syncRequested
_syncEnabled
_customName
_defaultRegistryBasePath
_updateDeviceUnlockedState
rangeOfString:
postNotificationName:object:
mainScreen
bounds
scale
setRegistryBasePath:
setIsDeviceUnlocked:
setIsRunningInStoreDemoMode:
screenWidth
screenScale
_isDeviceUnlocked
_isClassCDataAvailable
_isRunningInStoreDemoMode
_registryBasePath
initWithBundleIDs:states:
applicationStateForApplication:
_resetAccumulatedPoints
queue
nanoMailState
_isApplicationStateActive:
accumulatedPoints
setNanoMailState:
setHandler:
invalidate
_requestSnapshotUpdateIfNeeded
_incrementPointsIfAllowed:includeTimeExtraPoints:
_isApplicationStateLaunched:
nanoMailSnapshotRequesterDidRequestNanoMailConnectionInterruption:
isDocked:
initWithPreferredDate:userString:
submitBackgroundTaskRequest:forBundleID:
notifyDeviceLocked:
notifyOperationsProcessed
notifyNewMessageReceived
setQueue:
setAccumulatedPoints:
lastNanoMailSnapshotRequest
setLastNanoMailSnapshotRequest:
numberOfUnprocessedOperations
setNumberOfUnprocessedOperations:
interruptedConnectionWithNanoMail
setInterruptedConnectionWithNanoMail:
deviceLocked
setDeviceLocked:
nanoMailStateMonitor
setNanoMailStateMonitor:
_interruptedConnectionWithNanoMail
_deviceLocked
_queue
_accumulatedPoints
_lastNanoMailSnapshotRequest
_numberOfUnprocessedOperations
_nanoMailState
_nanoMailStateMonitor
_loadControlValues
expectedDatabaseVersion
setCurrentDatabaseSchemaVersion:
_selectMessagesWhere:limitRange:mailboxFilter:blockForBinding:
_messagesForMailboxId:
_messagesForAccountId:
_mailboxIdForMessageId:
initWithString:
preparedStatementForPattern:
isResponseOkFromPreparedStatementExecution:
stringFromStatement:columnIndex:
dictionaryWithCapacity:
_paramsStringWithString:count:
stringWithFormat:
bindDate:intoStatement:paramIndex:
componentsSeparatedByString:
_selectConversationWhere:limitRange:index:messagesByConversationId:mailboxFilter:blockForBinding:
_sqlFilterForMailboxType:tablePrefix:
_appendContent:toWhereClause:
dateFromStatement:columnIndex:
_selectConversationsWhere:limitRange:messagesByConversationId:indexesByConversationId:mailboxFilter:blockForBinding:
_indexForConversation:mailboxFilter:
_indexesForConversationsWithIds:mailboxFilter:
stringWithString:
unsignedIntegerFromStatement:columnIndex:
conversationsCountWithMailboxFilter:
_selectAccountsWhere:blockForBinding:
_selectMailboxesWhere:blockForBinding:
integerFromStatement:columnIndex:
visibleStatus
componentsJoinedByString:
UTF8String
stringWithUTF8String:
appendSQLStatement:
flushIfNeeded
rollbackTransaction
_containsMessagesWithVisibleStatusDifferentThanStatus
_deleteMessagesWithIds:
_deleteMessagesAndContentForMailboxId:
urlForMessageContentWithId:mailboxId:
_storeProtectedData:atURL:
emailAddresses
_mailboxIdsWithAccountId:
urlForMessageContentsFolderForMailboxId:
urlForImageAttachmentsFolderForMailboxId:
path
fileExistsAtPath:isDirectory:
removeItemAtURL:error:
_deleteMessagesWithMailboxId:
_deleteMessagesWithIdsWithoutTransaction:
urlForImageAttachmentOfMessageWithId:mailboxId:contentId:
bindInteger:intoStatement:paramIndex:
absoluteString
_updateUnprotectedFieldsForMailboxWithId:mailboxUpdates:
_updateProtectedFieldsForMailboxWithId:mailboxUpdates:
bindData:intoStatement:paramIndex:
dataFromStatement:columnIndex:
unarchiveObjectWithData:
_selectComposedMessageWhere:blockForBinding:
allMessagesWithMailboxFilter:limit:
_shouldWaitForMigration
_deleteAllIDSIdentifiers
_setControlObjectForKey:protected:protectedBoundValue:withBlockForBinding:
boolFromStatement:columnIndex:
initWithMailboxIds:mailboxType:
_sqlFilterForMailboxType:
_messageFieldsInExpectedOrderWithUnprotectedPrefix:protectedPrefix:conversationPrefix:nullifyProtected:
_messageOrderByWithPrefix:
_messageFromCurrentRowInStatement:
stringByAppendingString:
setPreview:
setVisibleStatus:
_deleteEmptyConversations
urlForMessageContentsFolder
urlForImageAttachmentsFolder
urlForImageAttachmentsFolderForMessageWithId:mailboxId:
whereStatementWithMailboxFilter:messageTablePrefix:
_conversationOrderByWithPrefix:
addMessageId:dateReceived:
setObject:forKey:
_accountFieldsInExpectedOrderWithPrefix:nullifyProtected:
_accountFromCurrentRowInStatement:
_mailboxFieldsInExpectedOrderWithPrefix:nonProtectedPrefix:nullifyProtected:
_mailboxFromCurrentRowInStatement:
URLWithString:
setUrl:
writeToURL:options:error:
stringByPaddingToLength:withString:startingAtIndex:
nnmk_startOfCurrentDay
messageStateForMailboxFilterType:
messagesForMailboxId:
messagesForAccountId:
imageAttachmentContentIdsForMessageWithId:
conversationAtIndex:messages:mailboxFilter:
oldestConversationDateWithMailboxFilter:
conversationsAtIndexRange:messagesByConversationId:mailboxFilter:
conversationsReceivedBefore:count:initialIndex:messagesByConversationId:mailboxFilter:
conversationsWithIds:indexesByConversationId:messagesByConversationId:mailboxFilter:
indexesForConversationsWithIds:mailboxFilter:
conversationForMessageWithId:messages:index:mailboxFilter:
conversationsCount
syncEnabledMailboxes
updateMessageStatusForMessageWithId:newStatus:newVisibleStatus:statusVersion:threadSpecific:specialMailboxSpecific:
updateMessagePreviewForMessageWithId:newPreview:
deleteMessageWithId:
deleteMessagesFromMailbox:
deleteMessagesWithIds:
addMessageContent:
addConversation:
updateConversation:
addImageData:forImageAttachmentOfMessageWithId:contentId:
deleteComposedMessagesOlderThan:
_controlValueForKey:protected:withBlockForColumn:
setWaitingForMigration:
loadedSyncedMailboxProtectedData
setLoadedSyncedMailboxProtectedData:
_waitingForMigration
_receivedFullSyncMessages
_databaseRecentlyMigrated
_notificationSettingsEnabled
_loadedSyncedMailboxProtectedData
_currentDatabaseSchemaVersion
_fullSyncVersion
_lastIDSIdentifierForFullSyncRequest
_lastIDSIdentifierForHaltSyncRequest
_mailboxFilter
_appLastLaunchedDate
nameForMailboxFilter:
setName:
initWithOptions:capacity:
resetMailboxFilter
observers
messageContentHasBeenDownloadedForMessageWithId:mailboxId:
imageHasBeenDownloadedForMessageWithId:mailboxId:contentId:
_removeAllMessages
enumerateObservers:
_insertMessageOnDatabases:
removeObjectsInArray:
updateConversationCalculatedFieldsWithMessages:
conversationAddOperationForConversation:index:messages:
setWithCapacity:
indexOfMessageId:
addIndex:
removeMessageWithId:
_updateMessageOnDatabase:
conversationUpdateOperationForConversation:previousIndex:newIndex:messagesAdded:messagesAddedIndexes:messagesUpdated:messagesUpdatedIndexes:messagesDeleted:messagesDeletedIndexes:messagesUnchanged:
runDatabaseCompactProcedure
deleteMessagesOlderThan:
_filterMessageAdditions:messagesToAdd:messagesToUpdate:
_processMessagesAdded:handler:
_processMessagesUpdated:handler:
_filterMessageUpdates:
_filterMessageDeletions:
_processMessagesDeleted:handler:
indexSetWithIndex:
_filterOperation:forMailboxFilter:dateReceivedBeforeUpdate:
_addMessagesOnLocalDatabase:toNewConversationWithId:
_addOrUpdateMessagesOnLocalDatabase:toExistingConversation:existingMessagesOnConversation:
_processConversationsFromMessages:handler:processor:
indexesOfMessages:
_deleteMessageWithId:fromMessagesArray:
_removeMessagesOnDatabases:
conversationDeleteOperationForConversationId:previousIndex:messagesDeleted:
setSource:
objectForKey:
_mapMessages:byConversationId:
_processConversationIds:messagesByConversationId:handler:processor:
removeObjectsInRange:
_mapConversationsByIds:
_updateMessageVisibleStatusIfNeeded:existingMessages:mailboxFilter:
messagesAdded
messagesUpdated
messagesDeleted
_convertOperationIfNeeded:dateReceivedBeforeUpdate:newMessagesBasedOnMailboxFilter:mailboxFilter:
_setIndexesForConversationOperations:newIndexesByConversationId:previousIndexesByConversationId:handler:
messagesUnchanged
checkState:
nnmk_isToday
convertUpdateOperationToAddOperation:
convertUpdateOperationToDeleteOperation:
messagesByIdsForMessages:
checkStatus:stateToCheck:
addState:toStatus:
enumerateObjectsUsingBlock:
setWithObject:
intersectSet:
previousIndex
newIndex
setNewIndex:
setPreviousIndex:
_handleConversationFromDatabase:initialIndex:messagesByConversationId:shouldFetchMoreMessages:
conversationAtRange:messagesByConversationId:mailboxFilter:
_resetMailboxAndContentForMailboxId:applyingUpdates:deleteContent:
removeObjectAtIndex:
name
hasSelection
defaultMailboxFilter
messagesReceivedBefore:
firstMessages:mailboxId:
attachmentIdsNotSyncedYetForMessageId:
filterForFirstMailboxActive
compactDatabaseProcedureContext
setCompactDatabaseProcedureContext:
setObservers:
_compactDatabaseProcedureContext
_observers
initWithServiceCoordinatorCreationBlock:
_handleDeviceLockStatusChangedNotification:
serviceCoordinator
_initializeConnectionListeners
_connectionHasRequiredEntitlement:
setExportedInterface:
setExportedObject:
setRemoteObjectInterface:
addBasicConnection:
addMessageUpdatesBasedConnection:
addConversationBrowsingBasedConnection:
addAdHocConnection:
setInvalidationHandler:
resume
isNanoMailRunningInForeground
_doRequestFirstConversations:connectionToReply:forMailboxFilter:
_doRequestConversationsReceivedBefore:count:connectionToReply:
receiverXPCServerDidReplyWithMessage:
_replyToClientConnection:notificationBlock:
receiverXPCServerDidReplyWithMessageContentLoadFailedForMessageWithId:
receiverXPCServerDidReplyWithAccounts:error:
receiverXPCServerDidReplyWithMailboxSelection:
receiverXPCServerDidReplyWithComposedMessageIds:progress:
receiverXPCServerDidReplyWithFailedComposedMessageIdsAndSubjects:
receiverXPCServerDidReplyWithFirstUnreadMessages:
receiverXPCServerDidReplyWithIsConnected:
receiverXPCServerDidReplyWithMessagesCount:
receiverXPCServerDidReplyWithAllMessages:
_ensureBulletinServiceIsRunning
receiverXPCServerDidAddNewMessage:
_notifyMessageUpdatesBasedClients:
receiverXPCServerDidUpdateMessage:
receiverXPCServerDidDeleteMessageWithId:
receiverXPCServerDidExecuteConversationOperations:
_notifyConversationBrowsingBasedClients:
receiverXPCServerDidReceiveImageAttachmentForMessageWithId:contentId:
_notifyAllClients:
receiverXPCServerDidReceiveContentForMessageWithId:
receiverXPCServerDidReportProgress:forComposedMessageWithId:referenceMessageId:
receiverXPCServerDidReportFailureSendingComposedMessageWithId:subject:
receiverXPCServerDidReportSendingComposedMessageStartedWithId:referenceMessageId:
receiverXPCServerDidFailSyncingMessagesWithError:
receiverXPCServerDidNotifyOldMessagesAvailable
receiverXPCServerDidNotifyFetchRequestCompleted:
receiverXPCServerDidFinishSyncingMessagesSuccessfullyReceivingMessages:initialMessages:
receiverXPCServerConnectivityDidChange:
receiverXPCServerDidRequestReloadCache
receiverXPCServerDidReplyWithConversationOperations:totalConversationsCount:willFetch:error:reloadCache:
receiverXPCServerDidDeleteAllMessages
receiverXPCServerDidAddNewAccount:
receiverXPCServerDidUpdateAccount:
receiverXPCServerDidDeleteAccountWithId:
receiverXPCServerDidChangeMailboxSelection:
_notifyClientConnection:notificationBlock:
remoteObjectProxyWithErrorHandler:
requestFirstConversations:forMailboxFilter:
requestConversationsReceivedBefore:count:
requestMoreMessagesForConversationWithId:
requestMessageWithId:
notifyOpenedMessageWithId:
requestAccounts
requestMailboxSelection
requestSendingProgress
requestFailedComposedMessages
requestFirstUnreadMessagesWithContent:sinceDate:fromAccountsWithIds:orVIPs:orNotifyConversation:excludingMessageIds:
requestIsConnected
requestSyncOfPreviewForMessageWithId:
requestFetchResume
requestFetchManualForceBatchResponse:
requestFetchManualForConversationWithId:
removeMessagesBasedOnCurrentMailboxType
permitDatabaseCompactingProcedure
preventDatabaseCompactingProcedure
recordEventAppLaunched
recordNotificationSettingsEnabled:
discardComposedMessageWithId:
ping
requestMessagesCount
requestAllMessages
requestFetchOldMessages
listener:shouldAcceptNewConnection:
nanoMailProcessMonitor:didChangeNanoMailApplicationState:
setServiceCoordinator:
mainTransaction
setMainTransaction:
serverQueue
setServerQueue:
xpcClientConnections
setXpcClientConnections:
xpcConversationBrowsingBasedConnections
setXpcConversationBrowsingBasedConnections:
xpcMessageUpdatesBasedConnections
setXpcMessageUpdatesBasedConnections:
nanoMailSnapshotRequester
setNanoMailSnapshotRequester:
connectionsWaitingForConversationsFromFetch
setConnectionsWaitingForConversationsFromFetch:
connectionListeners
setConnectionListeners:
connectionLookup
setConnectionLookup:
_serviceCoordinator
_mainTransaction
_serverQueue
_xpcClientConnections
_xpcConversationBrowsingBasedConnections
_xpcMessageUpdatesBasedConnections
_nanoMailSnapshotRequester
_connectionsWaitingForConversationsFromFetch
_connectionListeners
_connectionLookup
Watch started playing demo movie.
Watch stopped playing demo movie.
Starting to replace retail database...
Error replacing database (%{public}@).
Finished replacing database.
Starting to refresh messages dates (Fetched %lu messages)...
Shifting dates by interval of %ld seconds...
Finished refreshing message dates.
Requesting full sync. (Pending full sync: %lu), (Created database from scratch: %lu), (Database recently migrated: %lu), (Received full sync messages: %lu)
It won't request full sync. (ResquestPending: %lu, Recently Migrated: %lu)
App requested first conversations for mailbox filter: %{public}@ - count: %lu
Requesting more messages %lu before data %{public}@.
Mailbox selection changed from App. New Selection: [%{public}@], Previous Selection: [%{public}@]
Mailboxes to udpate. %{public}@
Mailboxes to re-sync. %{public}@
Mailboxes to disable sync. %{public}@
Ignoring mailbox selection update from app because it has not changed.
Requesting total number of conversation, but no mailbox filter was passed. It will count all conversations on database.
Deleting all message requested from adhoc service
Requesting reload cache due to reseting visible status
Ignoring fetch request because it was already requested. %{public}@
It will not fetch older messages becase network latency test mode is enabled.
User hasn't been using NanoMail for a while and notifications are disabled. Halting Mail sync... (Date: %{public}@)
Resuming Mail sync...
Suppressing "received old message" notification for mailbox not visible. %{public}@
#Connectivity Reseting connection failed because connectivity changed. Connection failed: %lu
#Connectivity Updating connection failed state. Succeed to communicate: %lu, Connected: %lu
Requesting reload cache due to database unlocked
handleDatababaseDirectoryRecreated
Waiting for device to unlock to perform requested operation...
We couldn't unlock the device and attach the protected database before executing an operation that requires protected data. This might affect the UI.
Companion Sync Service Created (Connectivity: %lu)...
Resending composed message (Original Id: %{public}@ - New Id: %{public}@).
User requested to resend composed message that doesn't exist (Id: %{public}@).
No mailbox selected - Ignoring request to compact messages before date
Database Compact Procedure requested for messages older than %{public}@.
Requesting Content (Message Ids: %{public}@ - High Priority: %d - IDS Identifier: %{public}@)...
Fetch requested (IDS Identifier: %{public}@). manuallyTriggered - %{public}@. filteredConversationId - %{public}@. mailboxId - %{public}@
Preparing to request a Fetch from Companion. We've detected we're connected over Cloud, so we'll send our list of conversations for the Companion to decide what changes to send back. %@ (Message count: %lu). We expect Companion to send us a batch of grouped updates and new messages.
Preparing to request a Fetch from Companion. We've detected we're NOT connected over Cloud. Companion will trigger a fetch and will send messages as new messages/updates, instead of batching them all together.
No filter to fetch older messages.
Assuming the mailbox is empty. Requesting messages older than now. (Mailbox Id: %{public}@, Filter: %lu)
Will fetch older from companion for mailbox Id: %{public}@, Date Cap: %{public}@).
Fetching older messages from Companion (Mailbox Ids: %{public}@, Filter: %lu - IDS Identifier: %{public}@).
Message UPDATED (Id: %{public}@ - Status: %lu - Status Version: %lu).
Sending message udpates to companion. IDS Identifier: %{public}@
Message DELETED (Id: %{public}@ - Status: %lu).
Will warn messages filtered out
There is no message for conversation with id - %{public}@ - It won't fetch more messages
Fetching older messages from Companion for Specific Conversation (Last Date Received: %{public}@ - Conversation Id: %{public}@).
Could not find mailbox for conversation with id %{public}@
Initial Accounts Sync Received.
Mailbox Synced from Provider (Id: %{public}@)
Initial Account Synced from Provider (Id: %{public}@)
Account ADDED from Provider (Id: %{public}@)
Adding Mailbox from Provider (Id: %{public}@, Account Id: %{public}@)
Account UPDATED from Provider (Id: %{public}@)
Account DELETED from Provider (Id: %{public}@)
Error sending IDS Messages (IDS Identifier: %{public}@ - Object Type: %{public}@ - Resend Interval: %lu - Error code: %li).
IDS Message sent successfully by IDS (IDS Identifier: %{public}@).
Changing progress (Composed message Id: %{public}@ - Progress: %li).
Connectivity did change (Is connected: %i - Connectivity type: %lu).
Received initial sync batch from provider. Mailbox count: %lu
Full Sync Received for mailbox. (Mailbox id: %{public}@, mailbox-sync-version: %lu, Filter Type: %lu, Count: %lu)
Ignoring mailbox full sync.
Message ADDED as Initial Sync from Provider (Message Id: %{public}@ - Message Id Header: %{public}@ - Account Id: %{public}@ - Date Received: %{public}@)
Received new messages. (Mailbox: %{public}@, mailbox-sync-version: %lu)
'Add messages' response ignored.
Message received from Provider (Message Id: %{public}@ - Message Id Header: %{public}@ - Account Id: %{public}@ - Date Received: %{public}@ - Protected Channel: %d)
Received didFetchMoreMessages.
'Fetch More Messages' response ignored.
More Messages Fetch Received
Message ADDED as More Messages Fetched from Provider (Message Id: %{public}@ - Message Id Header: %{public}@ - Account Id: %{public}@ - Date Received: %{public}@)
Fetching finished successfully.
Received didFetchMoreMessagesForConversation
'didFetchMoreMessagesForConversation' response ignored.
More Messages Fetch Received for Conversation (Conversation Id: %{public}@)
Message ADDED as More Messages Fetched for Conversation from Provider (Message Id: %{public}@ - Message Id Header: %{public}@ - Account Id: %{public}@ - Date Received: %{public}@ - Conversation Id: %{public}@)
Message Status UPDATED from Provider (Id: %{public}@ - Status: %lu - Protected Channel: %d)
Message DELETED from Provider (Id: %{public}@ - Date Received: %{public}@ - Protected Channel: %d)
Requesting reload cache due to batch request response. Trimming database
Received didSendBatchedFetchResult
'didSendBatchedFetchResult' response ignored.
Updating mailbox-sync-version because we received a batchedFetchResult with a higher version. LMSV:%lu, NMSV:%lu
'didSendBatchedFetchResult' response ignored because mailbox-sync-version is lower.
Batched fetch result received (Additions: %lu - Updates: %lu - Deletions: %lu.
Trimming database. Deleting messages older than %{public}@...
Message ADDED from Provider in Batched Result (Message Id: %{public}@ - Message Id Header: %{public}@ - Account Id: %{public}@ - Date Received: %{public}@ - Protected Channel: %d)
Message Status UPDATED from Provider in Batched Result (Id: %{public}@ - Date Received: %{public}@ - Status: %lu - Protected Channel: %d)
Message Status UPDATED from Provider in Batched Result but message did not exist. Ignoring... (Id: %{public}@ - Protected Channel: %d)
Message Status UPDATE in Batched Result ignored, as it's outdated... (Id: %{public}@ - Existing Status Version: %lu - Request Status Version: %lu - Protected Channel: %d)
Message Status UPDATED from Provider in Batched Result (Id: %{public}@ - Date Received: %{public}@ - Status: %lu - Status Version: %lu - Protected Channel: %d)
Message DELETED from Provider in Batched Result but message did not exist. Ignoring... (Id: %{public}@ - Protected Channel: %d)
Message DELETED from Provider in Batched Result (Id: %{public}@ - Date Received: %{public}@ - Protected Channel: %d)
Mailbox selection changed from Companion. New Selection: [%{public}@], Previous Selection: [%{public}@]
Ignoring mailbox selection update from companion because it has not changed. %{public}@
Notification Message ADDED from Provider along with Message Content (Message Id: %{public}@ - Message Id Header: %{public}@ - Account Id: %{public}@ - Date Received: %{public}@ - Protected Channel: %d)
Message Content Received before actual message. Will request again when message arrives... (Id: %{public}@ - Protected Channel: %d)
Message Content Received from Provider but had already been received. Discarding... (Id: %{public}@ - Protected Channel: %d)
Error unarchiving content. Will assume message has no content. (Message Id: %{public}@ - Exception: %{public}@).
Message Content Received from Provider (Id: %{public}@ - String Length: %lu - Compressed Data: %lu - Decompressed Data: %lu - Protected Channel: %d)
Notifying clients we failed saving content (Message Id: %{public}@)...
Image Attachment Received before actual message. Will request full content again when message arrives... (Id: %{public}@)
Image Attachment ADDED from Provider (Message Id: %{public}@ - Content Id: %{public}@)
Notification that all content has been sync'ed received (Full sync version: %lu - Callback IDS Identifier: %{public}@).
Error sending IDS Messages (IDS Identifier: %{public}@ - Error code: %li).
Last Fetch More Messages Request Failed being sent by IDS. Will inform NanoMail... (IDS Identifier: %{public}@ - Error code: %li)
Last Fetch Request Failed being sent by IDS. Will inform NanoMail... (IDS Identifier: %{public}@ - Error code: %li)
Last Full Sync Request Failed being sent by IDS. Will re-try... (IDS Identifier: %{public}@ - Error code: %li)
Last Halt Sync Request Failed being sent by IDS. Will re-try... (IDS Identifier: %{public}@ - Error code: %li)
Last Fetch More Messages Request sent successfully by IDS (IDS Identifier: %{public}@)
Last Fetch Request sent successfully by IDS. (IDS Identifier: %{public}@)
Full Sync Request sent successfully by IDS (IDS Identifier: %{public}@)
Halt Sync Request sent successfully by IDS (IDS Identifier: %{public}@)
Requested to prepare for version: %lu.
Companion responded with error for downloading message (Message id: %{public}@)... informing client.
Companion notified old messages are available. Mailbox Id: %{public}@
Fetch Request Completed.
Received progress (Composed Message Id: %{public}@ - Progress: %li - Reference Message Id: %{public}@).
Resending Message... (Id: %{public}@ - IDS Identifier: %{public}@ - Operation: Update).
Resending Message... (Id: %{public}@ - IDS Identifier: %{public}@ - Operation: Delete).
Resending Composed Message... (IDS Identifier: %{public}@).
Requested to send reply to a UITrigger message. Ignoring....
Sending message (Composed Message Id %{public}@ - IDS Identifier: %{public}@).
Ignoring messages because mailbox-sync-version is lower than local version. (Id: %{public}@ - MSV:%lu - Local MSV:%lu)
Received higher mailbox sync version. Reseting mailbox... (Id:%{public}@ - MSV:%lu - Local MSV:%lu)
Message discarded because database is waiting for migration.
Message discarded because fullSyncVersion is different (Local: %lu - Companion: %lu).
Received new Sync Version: %lu.
Requesting Full Sync... (IDS Identifier: %{public}@)
Incrementing Full Sync version to ignore other messages from Provider...
Sending mailbox selection. (resend interval: %lu)
Could not find mailbox for messages arrived %{public}@
Grouping message with default mailbox id. Multiple mailboxes is not supported with paired device
Requesting fake remote view controller to initialize View Service...
View service initialized.
Deleting database directory on startup because NanoMail app is not installed.
#Migration Starting now.
#Migration FullSyncVersion to migrate loaded (%lu).
#Migration Deleting database directory and recreating Database. (instance: %{public}@)
#Migration Full sync version set. %lu
#Migration Recently migrated set. %lu
#Migration Database migrated. (waiting for migration: %lu)
Database corrupted
Found corrupted database. %d
Attempting to recover by recreating database from scratch...
Attempting to recover by replacing demo content...
Database created successfully
Couldn't handle protection database.
Couldn't recreate database.
Creating tables.
Error creating unprotected database Database-Unprotected.sql (%{public}@)
Creating new database instance.
Database was not created from scratch: (Schema version: %lu)
Lock state changed (Unlocked: %i)
Error creating protected database. (%{public}@)
Error executing SQL statement from journal (Error: %{public}@).
Journal merged sucessfully.
Reseting connection and deleting database directory
Database directory deleted (Path: %{public}@).
NanoMail's state changed. (State: %lu - Previous state: %lu - Foreground running: %d - Previously foreground running: %d - Number of accumulated points: %lu)
Interrupting the connection with NanoMail... (Number of unprocessed operations: %lu - Accumulated points: %lu)
Requesting NanoMail to process enqueued messages and take a snapshot. Reason: NanoMail is running in background and we're still XPC Connected with it. (Number of accumulated points: %lu)
Requesting NanoMail to process enqueued messages and take a snapshot. Reason: NanoMail is in the Dock. (Number of accumulated points: %lu)
We currently have enough accumulated points to request NanoMail to process messages and take a snapshot. However, NanoMail is not running in background and is not in the Dock. Ignoring and reseting counters... (Number of accumulated points: %lu)
Setting Database schema version - %lu
Error fetching mailbox id for message (Id: %{public}@, %{public}@).
Error checking if message exists (%{public}@).
Error getting attachment content ids (Message Id: %{public}@, Error: %{public}@).
Error getting oldest conversation date (Error: %{public}@).
%s Line: %d - Tried to access protected when it's unavailable (device is probably locked).
Error selecting indexes for conversations (%{public}@).
Error getting conversations count (%{public}@).
Error selecting sync version for mailbox. (%{public}@).
Error updating/adding sync version for mailbox (%{public}@).
Error deleting mailbox_sync_versions. %{public}@
Deleting mailbox_sync_versions.
Message ADDED to SQLite database (Id: %{public}@ - Date Received: %{public}@).
Error ADDING Message to SQLite database (%{public}@).
Message status UPDATED on SQLite database (Id: %{public}@ - Status: %lu).
Error UPDATING Message status on SQLite database (Id: %{public}@ - Error: %{public}@).
Message preview UPDATED on SQLite database (Id: %{public}@).
Error UPDATING Message preview on SQLite database (Id: %{public}@ - Error: %{public}@).
Message dateRecieved UPDATED on SQLite database (Id: %{public}@).
Error UPDATING dateRecieved for Message on SQLite database (%{public}@).
Updated visibleStatus for messages
Error UPDATING visibleStatus for messages. %{public}@
Error selecting messages where visibleStatus != status. %{public}@
Error retrieving messages for deletion (%{public}@).
Message Content ADDED to SQLite database (Id: %{public}@).
Error ADDING Message Content to SQLite database (%{public}@).
Conversation ADDED to SQLite database (Id: %{public}@).
Error ADDING Conversation to SQLite database (%{public}@).
Conversation UPDATED on SQLite database (Id: %{public}@).
Error UPDATING Conversation on SQLite database (%{public}@).
Account ADDED to SQLite database (Id: %{public}@).
Error ADDING Account to SQLite database (%{public}@).
Account UPDATED on SQLite database (Id: %{public}@).
Error UPDATING Account on SQLite database (%{public}@).
Mailboxes for account DELETED from SQLite database (Account Id: %{public}@).
Error DELETING Mailboxes for account from SQLite database (%{public}@).
Mailbox can not be nil.
Mailbox DELETED from SQLite database (Id: %{public}@).
Error DELETING Mailbox from SQLite database (%{public}@).
Can not delete mailbox with empty id.
Error trying to delete message content for mailbox. (Id: %{public}@, Content Error: %{public}@, Attachments Error: %{public}@)
Error selecting deleting messages for mailbox id. %{public}@
Error deleting empty conversations. %{public}@
Account DELETED from SQLite database (Id: %{public}@).
Error DELETING Account from SQLite database (%{public}@).
Mailbox ADDED OR UPDATED to SQLite database (Id: %{public}@).
Error ADDING Mailbox to SQLite database (%{public}@).
Mailbox UPDATED on SQLite database (Id: %{public}@ - Status: %{public}@).
Error UPDATING Mailbox on SQLite database (Id: %{public}@ - Error: %{public}@).
Protected Mailbox UPDATED on SQLite database (Id: %{public}@ - Status: %{public}@).
Error UPDATING Protected Mailbox on SQLite database (Id: %{public}@ - Error: %{public}@).
Error adding Object for IDS Identifier (%{public}@).
Error retrieving Object for IDS identifier (%{public}@).
Error marking IDS Identifier as Ack'd (IDS Identifier: %{public}@ - Error: %{public}@).
Error rescheduling Object for IDS Identifier (IDS Identifier: %{public}@ - Error: %{public}@).
Error selecting IDS Identifiers scheduled to be resent (%{public}@).
Error ADDING Composed Message to Protected SQLite database (%{public}@).
Error ADDING Composed Message to SQLite database (%{public}@).
Error UPDATING Composed Message to SQLite database (%{public}@).
Error DELETING Composed Message from Protected SQLite database (%{public}@).
Error DELETING Composed Message from SQLite database (%{public}@).
Error DELETING Composed Message from Protected SQLite database before date (%{public}@).
Error selecting progress for Composed Message from IDS Identifier (%{public}@).
Error selecting message id for Composed Message (%{public}@).
Error getting messages count (%{public}@).
Error getting oldest message date (Mailbox Id: %{public}@, Mailbox Specific: %lu).
All Accounts deleted successfully.
Error deleting all accounts (%{public}@).
All mailboxes deleted successfully.
Error deleting all mailboxes (%{public}@).
Updating received full sync: %lu
Error loading control values (%{public}@).
Error getting Control Object from SQLite database (Key: %{public}@ - Error: %{public}@).
Connection is nil!
Control Object CHANGED in SQLite database (Key: %{public}@).
Error CHANGING Control Object in SQLite database (Key: %{public}@ - Error: %{public}@).
Error feching mailbox ids for account. (%{public}@).
Error selecting messages where %{public}@ (%{public}@).
Messages deleted successfully. %lu
Error deleting messages (Error: %{public}@).
Ignoring mailbox filter type for querying messages for conversation.
Error selecting messages and conversations where %{public}@ (%{public}@).
Error selecting accounts where %{public}@ (%{public}@).
Error selecting mailboxes where %{public}@ (%{public}@).
Error selecting Composed Message from IDS Identifier (%{public}@).
Error DELETING All IDS Identifiers from SQLite database (%{public}@).
Error writing protected file to disk (URL: %{public}@ - Data Length: %lu - Error: %{public}@).
New Conversation ADDED (Id: %{public}@ - Messages Count: %lu)
Conversation UPDATED (Id: %{public}@ - Messages Count: %lu - Status: %lu)
Compact database procedure started delayed.
Compact database procedure cancelled.
Compact database procedure will now run.
Compacting messages in database. (Date: %@)
Compact database procedure didn't compact messages because database doesn't have messages to compact (Count: %lu).
Dropping message content. It could not find message in conversation. (Message Id: %{public}@, Conversation Id: %{public}@, Index: %lu, Conversation message count: %lu, Existing message count: %lu)
Message Preview UPDATED in Conversation (Conversation Id: %{public}@)
Conversation DELETED (Id: %{public}@)
Conversation UPDATED (Id: %{public}@ - Messages Count: %lu)
Ignoring message update (Id: %{public}@, Message exist: %lu, Status changed: %lu, Status version: %lu, Local status version: %lu)
Ignoring message deletion, message does not exist. - (Id: %{public}@)
Message will update (Thread Specific: %lu)
Message will update (Special Mailbox Specific: [previous: %lu, new: %lu])
Converting conversation operation of type "update" to type "add" based on visible mailbox type. (Conversation Id: %{public}@, Mailbox Type: %lu)
Converting conversation operation of type "update" to type "delete" based on visible mailbox type. (Conversation Id: %{public}@, Mailbox Type: %lu)
Updated visible status for message. (Message Id: %{public}@, Visible status: %lu, Status: %lu)
Marking "message with updates" to be converted to "new message". (Message Id: %{public}@, Visible status: %lu, Status: %lu, Visible mailbox state type: %lu)
Filtering conversation operation out because it does not belong to visible mailbox type. (Conversation Id: %{public}@, Mailbox Type: %lu)
Filtering message out of conversation operations because it does not belong to visible mailbox. (Message Id: %{public}@, Visible Mailboxes id: %{public}@)
Adding mailbox. %{public}@
Deleting all message for mailbox. %{public}@
Reseting mailbox: %{public}@ - updates: %{public}@ - delete content: %lu
Updating mailbox. (Id: %{public}@, updates: %{public}@)
Will respond with conversations to client (Count: %lu - Initial Index: %lu - Will Fetch: %d).
Resetting "status visible" from messages in database
Setting mailbox filter: %{public}@
No mailbox filter selected. Setting default filter from current mailbox selection: %{public}@
Dealloc'ed...
XPC Connection invalidated.
XPC Connection added...
XPC Connection does NOT have required entitlements.
Reseting conections waiting for fetch response.
Fetch resume requested.
Requested to send Composed Message (Id: %{public}@ - Reference Message Id: %{public}@).
Deleting composed message (Id: %{public}@).
Ping received successfully.
Adding ad-hoc message (Id: %{public}@).
Adding ad-hoc mailbox (Id: %{public}@).
Replying with mailbox-selection (Id: %{public}@).
Notifying client messages was added - count: %{public}@
Notifying client messages was updated - count: %{public}@
Notifying client messages was deleted - count: %{public}@
Notifying client conversation operations was executed - count: %{public}@
Notifying client message finished syncing - isInitialSync %{public}@
Error retrieving Remote Object Proxy: %{public}@
Adding connection to wait for fetch response. Request First conversations
Adding connection to wait for fetch response. Request more message before date.
NNMKRetailDemoUtility
NNMKServiceCoordinator
NNMKMessageDataSourceObserver
NSObject
NNMKDatabaseLifecycleObserver
NNMKMessageServiceDelegate
NNMKMessageService
MessageDataSource
NNMKMessageDeletion
NNMKSyncReceiver
NNMKMessagesSyncServiceClientDelegate
NNMKMessageContentSyncServiceClientDelegate
NNMKAccountsSyncServiceClientDelegate
NNMKFetchesSyncServiceClientDelegate
NNMKBulletinContentViewServiceClient
NNMKBulletinContentViewServiceServer
NNMKNanoMailBulletinServiceLauncher
NanoMail
NNMKBodyContentPreparer
NNMKXPCConnectionLookup
NNMKDatabaseFactory
NNMKMessageUpdate
NNMKXPCListener
NNMKMessagesProcessedHandler
NNMKMailboxUpdates
NNMKDevice
NNMKNanoMailSnapshotRequester
NNMKDatabase
NNMKMessageDataSource
NNMKXPCServer
NNMKNanoMailSnapshotRequesterDelegate
NNMKNanoMailServiceXPCServerInterface
NSXPCListenerDelegate
@8@0:4
v8@0:4
v12@0:4@8
@?8@0:4
v12@0:4@?8
B8@0:4
v12@0:4B8
@"NSObject<OS_dispatch_queue>"
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v16@0:4@8@12
v16@0:4@"NNMKMessageDataSource"8@"NSArray"12
v12@0:4@"NNMKMessageDataSource"8
v16@0:4@"NNMKMessageDataSource"8@"NSDate"12
v20@0:4@8@12B16
v24@0:4@8@12@16@20
v24@0:4@8i12@16@20
v20@0:4@8@12@16
v16@0:4@8B12
v20@0:4@8B12B16
v20@0:4@"<NNMKMessageService>"8@"NSArray"12B16
v16@0:4@"<NNMKMessageService>"8@"NSArray"12
v24@0:4@"<NNMKMessageService>"8@"NSData"12@"NSString"16@"NSString"20
v24@0:4@"<NNMKMessageService>"8@"NNMKMessageContent"12@"NSString"16@"NSString"20
v24@0:4@"<NNMKMessageService>"8i12@"NSString"16@"NSString"20
v20@0:4@"<NNMKMessageService>"8@"NSString"12@"NSString"16
v16@0:4@"<NNMKMessageService>"8@"NSError"12
v16@0:4@"<NNMKMessageService>"8@"NSString"12
v16@0:4@"<NNMKMessageService>"8B12
v20@0:4@"<NNMKMessageService>"8B12B16
v16@0:4@"<NNMKMessageService>"8@"NNMKAccount"12
v16@0:4@"<NNMKMessageService>"8@"NNMKMailboxSelection"12
v12@0:4@"<NNMKMessageService>"8
v24@0:4B8@12@16B20
B20@0:4@8B12B16
v24@0:4B8@"NSString"12@"NSArray"16B20
v12@0:4@"NSString"8
B20@0:4@"NSString"8B12B16
B20@0:4@"NSArray"8B12B16
B12@0:4@"NNMKMailboxFilter"8
v12@0:4@"NSArray"8
v12@0:4@"NNMKComposedMessage"8
@"<NNMKMessageServiceDelegate>"8@0:4
v12@0:4@"<NNMKMessageServiceDelegate>"8
@16@0:4@8@12
@28@0:4@8@12@16@20@24
@12@0:4@8
@28@0:4I8B12o^B16@20o^@24
@28@0:4@8I12B16o^B20o^@24
@36@0:4{_NSRange=II}8@16@20B24B28@32
v20@0:4B8@12B16
@12@0:4^@8
@12@0:4o^@8
@"<NNMKMessageServiceDelegate>"
@"NNMKSyncReceiver"
@"NNMKMessageDataSource"
@"NNMKDatabaseFactory"
@"NNMKDatabase"
@"NSMutableDictionary"
v20@0:4@8@12i16
v20@0:4@"NNMKMessagesSyncServiceClient"8@"NSString"12i16
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NSString"12
v12@0:4@"NNMKMessagesSyncServiceClient"8
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoMessageAdditions"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoInitialMessagesSyncBatch"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoMoreMessages"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoMoreMessagesForConversation"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoCoalescedBatchedFetchResult"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoMessageStatusUpdates"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoMessageDeletions"12
v16@0:4@"NNMKMessagesSyncServiceClient"8@"NNMKProtoMailboxSelection"12
v16@0:4@"NNMKMessageContentSyncServiceClient"8@"NNMKProtoMessageContentSync"12
v16@0:4@"NNMKMessageContentSyncServiceClient"8@"NNMKProtoImageAttachmentSync"12
v16@0:4@"NNMKMessageContentSyncServiceClient"8@"NNMKProtoInitialContentSyncCompletedNotification"12
v16@0:4@"NNMKAccountsSyncServiceClient"8@"NNMKProtoAccountAdditionOrUpdate"12
v16@0:4@"NNMKAccountsSyncServiceClient"8@"NNMKProtoAccountDeletion"12
v16@0:4@"NNMKAccountsSyncServiceClient"8@"NNMKProtoInitialAccountsSync"12
v20@0:4@"NNMKFetchesSyncServiceClient"8@"NSString"12i16
v16@0:4@"NNMKFetchesSyncServiceClient"8@"NSString"12
v16@0:4@"NNMKFetchesSyncServiceClient"8@"NNMKProtoPrepareForFullSyncRequest"12
v16@0:4@"NNMKFetchesSyncServiceClient"8@"NNMKProtoErrorDownloadingContentForMessageWarning"12
v16@0:4@"NNMKFetchesSyncServiceClient"8@"NNMKProtoOldMessagesAvailableNotification"12
v16@0:4@"NNMKFetchesSyncServiceClient"8@"NNMKProtoFetchRequestCompletedNotification"12
v16@0:4@"NNMKFetchesSyncServiceClient"8@"NNMKProtoComposedMessageSendingProgressReport"12
@20@0:4@8@12@16
v20@0:4B8@12@16
@20@0:4@8@12B16
v20@0:4@8B12@16
v20@0:4@8I12I16
v16@0:4@8I12
v24@0:4@8@12I16@20
v20@0:4@8@12I16
v20@0:4i8@12@16
v16@0:4B8B12
B20@0:4I8@12I16
B16@0:4@8I12
B12@0:4I8
@12@0:4i8
v16@0:4@8@?12
@"<NNMKMessageDataSource>"
@"NNMKMessagesSyncServiceClient"
@"NNMKMessageContentSyncServiceClient"
@"NNMKAccountsSyncServiceClient"
@"NNMKFetchesSyncServiceClient"
@"NNMKProtectedSyncServiceClient"
@"NNMKProtectedContentSyncServiceClient"
@"NSString"
@"NSMutableSet"
@"NNMKMessagesProcessedHandler"
v12@0:4f8
v12@0:4@"NSTextAttachment"8
v12@0:4@"NSURL"8
v32@0:4@8@12@16@20@24B28
v12@0:4I8
v16@0:4d8
v20@0:4f8d12
v32@0:4@"NSString"8@"NSString"12@"NSString"16@"NSString"20@"NSString"24B28
v24@0:4@"NSString"8@"NSString"12@"NSString"16@"NSString"20
v12@0:4@"UIImage"8
@"NSXPCConnection"8@0:4
B12@0:4i8
i8@0:4
i12@0:4B8
@"<NNMKDatabaseLifecycleObserver>"
@"NNMKProtectedSQLiteConnection"
@"NNMKSQLJournal"
@"NNMKRetailDemoUtility"
@32@0:4@?8@?12@?16@?20@?24@?28
@12@0:4B8
@16@0:4B8B12
@16@0:4B8I12
@20@0:4B8B12I16
@16@0:4B8@12
v16@0:4^{sqlite3_stmt=}8^i12
@"NSNumber"
f8@0:4
v16@0:4I8B12
@"<NNMKNanoMailSnapshotRequesterDelegate>"
@"NSDate"
@"BKSApplicationStateMonitor"
@20@0:4I8^@12@16
@24@0:4{_NSRange=II}8^@16@20
@28@0:4@8I12^I16^@20@24
@24@0:4@8^@12^@16@20
@20@0:4@8^@12^I16
@24@0:4@8^@12^I16@20
I12@0:4@8
v16@0:4I8@12
v32@0:4@8I12I16I20B24I28
v20@0:4@8I12@16
v16@0:4i8@12
@20@0:4@8^i12^@16
@20@0:4@8{_NSRange=II}12
@16@0:4@8I12
v20@0:4@8B12@?16
v24@0:4@8B12*16@?20
@28@0:4@8{_NSRange=II}12@20@?24
@24@0:4@8@12@16B20
@12@0:4^{sqlite3_stmt=}8
@36@0:4@8{_NSRange=II}12^I20^@24@28@?32
@36@0:4@8{_NSRange=II}12^@20^@24@28@?32
I16@0:4@8@12
@16@0:4@8@?12
@16@0:4@8B12
B16@0:4@8@12
@12@0:4I8
@16@0:4I8@12
@"NNMKMailboxFilter"
@16@0:4I8o^B12
@20@0:4@8I12o^B16
B24@0:4@8@12@16@20
v12@0:4@"<NNMKMessageDataSourceObserver>"8
v12@0:4@"NSDate"8
v16@0:4@"NSDate"8@"NSString"12
@"NNMKMessage"12@0:4@"NSString"8
@"NSDictionary"12@0:4@"NSArray"8
B12@0:4@"NSString"8
@"NSArray"12@0:4@"NSDate"8
@"NSArray"8@0:4
@"NSArray"12@0:4@"NNMKMailboxFilter"8
@"NSDate"12@0:4@"NSString"8
@"NSDate"16@0:4@"NSString"8I12
@"NSArray"16@0:4I8@"NSString"12
@"NSArray"12@0:4@"NSString"8
@"NSArray"36@0:4{_NSRange=II}8@"NSDate"16@"NSArray"20B24B28@"NSArray"32
@"NSArray"24@0:4{_NSRange=II}8^@16@"NNMKMailboxFilter"20
I12@0:4@"NNMKMailboxFilter"8
@"NSArray"16@0:4I8o^B12
@"NSArray"20@0:4@"NSDate"8I12o^B16
v12@0:4@"NNMKMailbox"8
v16@0:4@"NSString"8@"NNMKMailboxUpdates"12
@"NNMKMailbox"12@0:4@"NSString"8
@"NSSet"8@0:4
v16@0:4@"NSArray"8@"NNMKMessagesProcessedHandler"12
B24@0:4@"NNMKMessageContent"8@"NSString"12@"NSString"16@"NNMKMessagesProcessedHandler"20
v24@0:4@"NSData"8@"NSString"12@"NSString"16@"NNMKMessagesProcessedHandler"20
@"NNMKMailboxFilter"8@0:4
v12@0:4@"NNMKMailboxFilter"8
v20@0:4@8^@12^@16
v20@0:4@8@12@?16
v24@0:4@8@12@16@?20
@24@0:4@8I12@16^B20
@"NSHashTable"
v12@0:4@"NNMKNanoMailSnapshotRequester"8
Vv16@0:4I8@12
Vv16@0:4@8I12
Vv12@0:4@8
Vv32@0:4I8@12@16B20B24@28
Vv12@0:4B8
Vv16@0:4I8@"NNMKMailboxFilter"12
Vv16@0:4@"NSDate"8I12
Vv12@0:4@"NSString"8
Vv12@0:4@"NNMKMailboxSelection"8
Vv32@0:4I8@"NSDate"12@"NSArray"16B20B24@"NSArray"28
Vv12@0:4@"NSArray"8
Vv12@0:4@"NNMKComposedMessage"8
Vv12@0:4@"NNMKMessage"8
Vv12@0:4@"NNMKMailbox"8
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
@12@0:4@?8
v20@0:4I8@12@16
@"NNMKServiceCoordinator"
@"NSObject<OS_os_transaction>"
@"NNMKNanoMailSnapshotRequester"
@"NSSet"
@"<NNMKXPCConnectionLookup>"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.messages.supportsattachments</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.mail.sync.messages</string>
<string>com.apple.private.alloy.mail.sync.content</string>
<string>com.apple.private.alloy.mail.sync.protected</string>
<string>com.apple.private.alloy.mail.sync.protected.content</string>
<string>com.apple.private.alloy.mail.sync.accounts</string>
<string>com.apple.private.alloy.mail.fetches</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.mail.sync.messages</string>
<string>com.apple.private.alloy.mail.sync.content</string>
<string>com.apple.private.alloy.mail.sync.protected</string>
<string>com.apple.private.alloy.mail.sync.protected.content</string>
<string>com.apple.private.alloy.mail.sync.accounts</string>
<string>com.apple.private.alloy.mail.fetches</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>keychain-access-groups</key>
<array>
<string>com.apple.gstore</string>
<string>apple</string>
<string>appleaccount</string>
<string>com.apple.mobilemail.smime</string>
<string>com.apple.identities</string>
<string>com.apple.certificates</string>
</array>
<key>seatbelt-profiles</key>
<array>
<string>nanomaild</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
