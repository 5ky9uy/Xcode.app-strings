alloc
init
copy
_setFocusedBundleIDs:forClient:
addObjectsFromArray:
enumerateKeysAndObjectsUsingBlock:
allObjects
clientDictionary
setObject:forKeyedSubscript:
removeObjectForKey:
carouselDuetSession
setFocusedBundleIDs:forClient:
_allFocusedBundleIDs
.cxx_destruct
queue
setQueue:
setClientDictionary:
_queue
_clientDictionary
isDocked
createDockStatusViewController
setProvider:
provider
mainBundle
bundleIdentifier
stringWithFormat:
initWithServiceName:
_startObserving
array
description
addObject:
enumerateObserversWithBlock:
componentsJoinedByString:
isSleepImminent
addObserver:
removeObserver:
canSleep
sleepImminent
systemWake
_observeWithAction:
_canSleep
_sleepImminent
_systemWake
initWithQueue:canSleepBlock:sleepImminentBlock:wakeBlock:
sharedInstance
_stopObserving
_systemSleepObserver
_observerStore
initWithQueue:canSleepBlock:sleepImminentBlock:willWakeBlock:wakeBlock:
_startPowerMonitoring
_stopPowerMonitoring
dealloc
setSleepImminent:
setSleepImminentAndCallBlocksIfNecessary:
_systemPowerChanged:notificationID:
canSleepBlock
setCanSleepBlock:
sleepImminentBlock
setSleepImminentBlock:
wakeBlock
setWakeBlock:
willWakeBlock
_systemPowerConnection
_systemPowerPort
_systemPowerNotifier
_canSleepBlock
_sleepImminentBlock
_wakeBlock
_willWakeBlock
restrictedApps
_restrictedApps
initWithIdentifier:description:timeout:
releaseAssertion
isAsserted
takeAssertion
_identifier
_description
_timeout
_count
lock
unlock
sharedStartupService
isLaunchCompleted
markLaunchCompleted
_launchCompleted
_launchCompletedLock
class
initWithFireInterval:leewayInterval:serviceIdentifier:queue:handler:
schedule
initWithFireInterval:leewayInterval:shouldWakeDevice:serviceIdentifier:queue:handler:
initWithIdentifier:leeway:
_fireTimer
cancel
_calculatedWallClockFireTime
scheduleInSeconds:
_scheduleWithFireTime:wallClockFireTime:rawScheduleTime:rawScheduleDelta:
timeIntervalSinceReferenceDate
timeIntervalSince1970
isScheduled
cancelWake
scheduleWithFireTime:
_scheduleWake
_unschedule
_relinquishPowerAssertion
_rawTimeIntervalRemaining
_rawTimeRemaining
scheduleWake:
_rescheduleAfterSystemWake
initWithAssertionType:assertionName:
take
relinquish
_manuallyFireTimer
_takePowerAssertion
scheduledTimerWithFireInterval:leewayInterval:serviceIdentifier:queue:handler:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
scheduleWithDate:
timeRemaining
setScheduled:
fireInterval
setFireInterval:
leewayInterval
setLeewayInterval:
shouldWakeDevice
setShouldWakeDevice:
serviceIdentifier
setServiceIdentifier:
handler
setHandler:
_dispatchTimer
_schedulingMutex
_scheduledWake
_powerAssertion
_wallClockFireTime
_rawScheduleTime
_rawScheduleDelta
_powerAssertionTaken
_scheduledWithWallTime
_scheduled
_shouldWakeDevice
_serviceIdentifier
_handler
_fireInterval
_leewayInterval
initWithOptions:capacity:
removeObject:
willChangeBacklight
countByEnumeratingWithState:objects:count:
wakeGestureRecognized:
gestureType
defaultCenter
postNotificationName:object:
addObserver:observeFilteredGestures:
_filteredObservers
_observers
_observersMutex
scheduleSoftWake:
cancelSoftWake
sharedScheduler
initWithAssertionType:assertionName:timeout:
numberWithDouble:
dictionaryWithObjects:forKeys:count:
_assertionID
_assertionType
_assertionName
assertionID
_assertionCount
currentDevice
puic_deviceVariant
edgeInsets
_edgeInsets
backlightProviderIsScreenOn
backlightProviderWillScreenBeOn
backlightProviderIsScreenBlanked
screenOn
willBeOn
screenBlanked
setOverride:
setPriority:
overriderWithOverride:andPriority:
priority
override
_priority
_override
count
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
enumerateObjectsUsingBlock:
removeObjectAtIndex:
activityForButtonMask:event:
reverseObjectEnumerator
preHandleButton:eventType:firstDownTime:lastUpTime:
keyWindow
_firstResponderForWindow:
_walkResponderChainToHandleButton:eventType:firstDownTime:lastUpTime:firstResponder:
postHandleButton:eventType:firstDownTime:lastUpTime:
firstResponder
rootViewController
becomeFirstResponder
handleButton:eventType:firstDownTime:lastUpTime:
handleButton:eventType:
nextResponder
addButtonHandlerOverride:withPriority:
removeButtonHandlerOverride:
postCSLButton:eventType:firstDownTime:lastUpTime:
dateWithTimeIntervalSinceReferenceDate:
initWithLocaleIdentifier:
setLocale:
setDateFormat:
setUnitsStyle:
setAllowedUnits:
stringFromDate:
date
stringFromDate:toDate:
_cancelWake
timeIntervalSinceDate:
identifier
setIdentifier:
leeway
setLeeway:
_wakeDate
_leeway
initWithName:
newLogoHandle:
setLogoHandleVendor:
assertionWithName:
_logoHandle
navigateToClockAnimated:
_source
_didSuspend
UTF8String
_timeoutAssertion
initWithIdentifier:timeout:
_timeoutTimer
v4@?0
com.apple.Carousel.CSLPIDuetSession
v16@?0@"NSArray"4@"NSArray"8^B12
queue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
clientDictionary
T@"NSMutableDictionary",&,N,V_clientDictionary
CSLPIDockDidDockNotification
CSLPIDockDidUndockNotification
com.apple.Carousel.CSLPIPowerAssertionPriorityRootQueue
%@.systemSleepObserver
v8@?0@4
%@ :
v8@?0@"<CSLPISystemSleepGlobalObserverObserver>"4
B4@?0
sleepImminent
TB,R,GisSleepImminent
-[CSLPISystemSleepObserver init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Timer/CSLPISystemSleepObserver.m
false
CSLPISystemSleepObserver-IOPowerManagement
TB,GisSleepImminent,V_sleepImminent
canSleepBlock
T@?,C,N,V_canSleepBlock
sleepImminentBlock
T@?,C,N,V_sleepImminentBlock
wakeBlock
T@?,C,N,V_wakeBlock
willWakeBlock
T@?,R,N,V_willWakeBlock
restrictedApps
T@"NSSet",R,N,V_restrictedApps
-[CSLPIRecursivePreventSleepAssertion init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Power/CSLPIRecursivePreventSleepAssertion.m
asserted
TB,R,N,GisAsserted
launchCompleted
TB,R,N,GisLaunchCompleted
-[CSLPITimer initWithFireInterval:leewayInterval:shouldWakeDevice:serviceIdentifier:queue:handler:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Timer/CSLPITimer.m
serviceIdentifier != nil
handler != nil
-[CSLPITimer init]
<%@: %@ %@ %@, int:%0.1fs leeway:%.1fs>
wallclock 
NoIdleSleepAssertion
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
fireInterval
Td,N,V_fireInterval
leewayInterval
Td,N,V_leewayInterval
shouldWakeDevice
TB,N,V_shouldWakeDevice
serviceIdentifier
T@"NSString",C,N,V_serviceIdentifier
handler
T@?,C,N,V_handler
scheduled
TB,N,GisScheduled,V_scheduled
CSLPIMedicalIDButtonPressed
CSLPIMedicalIDStayOnKey
AssertType
AssertName
TimeoutSeconds
TimeoutAction
TimeoutActionRelease
-[CSLPIBalancedPowerAssertion initWithAssertionType:assertionName:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Power/CSLPIBalancedPowerAssertion.m
assertionType != NULL
assertionName != NULL
BalancedPowerAssertion_acquire
edgeInsets
T{UIEdgeInsets=ffff},R,N,V_edgeInsets
CSLPIBacklightWillTurnOn
CSLPIBacklightDidTurnOn
CSLPIBacklightWillTurnOff
CSLPIBacklightDidTurnOff
priority
Tf,N,V_priority
override
T@"<CSLPIButtonHandlerOverride>",W,N,V_override
i12@?0@"CSLPIButtonHandlerOverrider"4@"CSLPIButtonHandlerOverrider"8
v16@?0@"CSLPIButtonHandlerOverrider"4I8^B12
<%@ : %p>
@"NSString"8@?0@4
success
FAILURE
en_US_POSIX
HH:mm:ss MM/dd
%@ (in %@)
-[CSLPIScheduledSystemWake init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Power/CSLPIScheduledSystemWake.m
%@ wake at %@ with %lds leeway
<%@: %@>
identifier
T@"NSString",C,N,V_identifier
leeway
Ti,N,V_leeway
TB,R,N,GisScheduled
kCSLClockBecameVisibleNotification
-[CSLPIDispatchTimer init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Timer/CSLPIDispatchTimer.m
timer[%p]: %@, %.2f-%.2f seconds
-[CSLPISystemActivityAssertion init]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CarouselFrameworks_Sim/Carousel-829.330/CarouselPlugins/Power/CSLPISystemActivityAssertion.m
CSLPIDuetSession
CSLPIDock
CSLPISystemSleepGlobalObserver
CSLPISystemSleepObserver
CSLPIRestrictedApplications
CSLPIRecursivePreventSleepAssertion
CSLPIStartupService
CSLPITimer
CSLPISystemSleepGlobalObserverObserver
NSObject
CSLPIWakeGestureMonitor
CSLPISoftWakeScheduler
CSLPISoftWakeSchedulerProtocol
CSLPIMedicalID
CSLPITimedPowerAssertion
CSLPIBalancedPowerAssertion
CSLPIControlCenterPageLayoutAttributes
CSLPIBacklight
CSLPIButtonHandlerOverrider
CSLPIButtonHandler
CSLPIScheduledSystemWake
CSLPILogoAssertion
CSLPIDispatchTimer
CSLPISystemActivityAssertion
@8@0:4
v16@0:4@8@12
v8@0:4
v12@0:4@8
@"NSObject<OS_dispatch_queue>"
@"NSMutableDictionary"
B8@0:4
B12@0:4I8
@"CSLPISystemSleepObserver"
@"CSLSConcurrentObserverStore<CSLPISystemSleepGlobalObserverObserver>"
@24@0:4@8@?12@?16@?20
@28@0:4@8@?12@?16@?20@?24
v12@0:4B8
v16@0:4I8^v12
@?8@0:4
v12@0:4@?8
^{IONotificationPort=}
@"NSSet"
@24@0:4@8@12d16
@"NSString"
@"NSLock"
@36@0:4d8d16@24@28@?32
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
@40@0:4d8d16B24@28@32@?36
v16@0:4d8
v40@0:4Q8d16Q24Q32
d8@0:4
Q8@0:4
@"CSLPIDispatchTimer"
{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}
@"CSLPIScheduledSystemWake"
@"CSLPIBalancedPowerAssertion"
v16@0:4@8B12
@"NSHashTable"
v12@0:4@"NSDate"8
@24@0:4^{__CFString=}8^{__CFString=}12d16
^{__CFString=}
@16@0:4^{__CFString=}8^{__CFString=}12
{UIEdgeInsets=ffff}8@0:4
{UIEdgeInsets="top"f"left"f"bottom"f"right"f}
@16@0:4@8f12
f8@0:4
v12@0:4f8
@"<CSLPIButtonHandlerOverride>"
v16@0:4@8f12
v32@0:4I8I12Q16Q24
@12@0:4@8
@36@0:4I8I12Q16Q24@32
@16@0:4I8I12
@16@0:4@8i12
i8@0:4
v12@0:4i8
@"NSDate"
@"CSLUILogoHandle"
v16@0:4Q8
@"NSObject<OS_dispatch_source>"
@20@0:4@8d12
sleep imminent (%@)
system wake (%@)
########## DBG_CODE: (%d)
%p:%@ attempting to schedule timer %.2f seconds into the future (too far)
scheduling %p:%@ %stimer at %@, leeway:%.1fs
canceling %p:%@ %stimer at %@, leeway:%.1fs
%p:%@ %stimer fired: scheduled %@, leeway:%.1fs
rescheduling %p:%@ timer at %@, leeway:%.1fs, was scheduled at %@
defering sleep: %p:%@ at %@, leeway:%.1fs
Not deferring sleep with fire imminent for %p:%@ because leeway is too big: %.1fs
Error (%ld) creating power assertion {name=%@; type=%@}
%@ %@ handled by %{public}@ (firstResponder = %{public}@; keyWindow = %{public}@)
button event not handled! button: %@, type: %@, firstResponder: %@
WORKAROUND: nil firstResponder, attempted to set to %@ (%@)
ERROR: nil firstResponder, nil rootViewController
%@ handled %@ %@
Crown tapped
Button tapped
Chord tapped
Crown held
Button held
Chord held
Crown long-held
Button long-held
Chord long-held
Crown double-tapped
Button double-tapped
Chord double-tapped
Crown held and released
Button held and released
Chord held and released
Crown down
Button down
System wake button
Rotate to wake scroll up
Rotate to wake scroll down
scheduling system wake: %@
canceling system wake: %@
System activity assertion already taken: %@ (%ld)
System activity assertion reliquished: %@
System activity assertion timed out: %@
zPLR
zPLR
zPLR
zPLR
