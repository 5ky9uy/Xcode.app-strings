class
currentPlatform
migratorFromVersion:toVersion:platform:
autorelease
setPlatform:
setPreviousVersion:
setCurrentVersion:
release
dealloc
previousVersion
currentVersion
length
dictionary
platform
arrayWithObjects:count:
setWithArray:
countByEnumeratingWithState:objects:count:
setObject:forKeyedSubscript:
setPreferencesBeforeMigration:
performMigrationForPreferences:
setPreferencesAfterMigration:
allKeys
addObjectsFromArray:
objectForKeyedSubscript:
isEqual:
isEqualToString:
isKindOfClass:
count
componentsJoinedByString:
setPreferredLanguages:
setLocaleOnly:
mutableCopy
compare:options:
importPreferredLanguagesForPreferences:
localeWithLocaleIdentifier:
objectForKey:
appendRegionalVariantsToLanguageIdentifiers:regionCode:
firstObject
languageCode
countryCode
baseSystemLanguages
setWithCapacity:
addObject:
containsObject:
preferredLocalizationsFromArray:forPreferences:
languageIdentifierFromIdentifier:withRegion:
arrayByAddingObject:
canonicalLocaleIdentifier:withNewLanguageIdentifier:
orderedSet
componentsFromLocaleIdentifier:
array
importPreferredLanguages_macOS_10_9_forPreferences:
objectAtIndexedSubscript:
normalizedLanguageIDFromString:
unsignedIntegerValue
subarrayWithRange:
setArray:
setObject:atIndexedSubscript:
migratorFromVersion:toVersion:
performMigration
preferencesBeforeMigration
preferencesAfterMigration
_platform
_previousVersion
_currentVersion
_preferencesBeforeMigration
_preferencesAfterMigration
allValues
dictionaryWithObjects:forKeys:
invertedDictionary
dictionaryWithObjects:forKeys:count:
retain
nativeKeyNameToCanonicalKeyName
canonicalKeyToValueIdentifierToNumericValueMap
numberWithInt:
domain
canonicalNameToNativeKeyName
valueIdentifierToValueMapFromCanonicalKey:
valueToValueIdentifierMapFromCanonicalKey:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retainCount
zone
hash
superclass
description
debugDescription
numberWithInteger:
_syncronizeGizmoDefaultWithKey:value:
_postPreferencesChangedNotification
_defaultDisplayNameOrder
_setPreference:toValue:usingExistingGetter:
_defaultShortNameFormat
_shouldPreferNicknames
_shortNameIsEnabled
infoClassFromPreferencesSource:
enumerateKeysAndObjectsUsingBlock:
setDefaultDisplayNameOrder:
setShortNameFormat:
setPreferNicknamesDefault:
setShortNameIsEnabled:
mappedPreferencesForPreferences:from:to:
supportedLanguages
allObjects
systemLanguages
baseLanguageIdentifierFromIdentifier:
localeIdentifierFromComponents:
addLikelySubtagsForLocaleIdentifier:
removeObjectForKey:
stdLanguageIDs
canonicalLanguageIdentifierFromString:
bundleForClass:
URLForResource:withExtension:
dictionaryWithContentsOfURL:
arrayWithCapacity:
arrayWithArray:
indexOfObject:
objectAtIndex:
getCharacters:range:
UTF8String
substringToIndex:
capitalizedStringWithLocale:
substringFromIndex:
stringByAppendingString:
dictionaryWithObjectsAndKeys:
stringWithUTF8String:
arrayWithContentsOfURL:
arrayWithObjects:
hasPrefix:
enumeratePreferredCalendarsForLocaleID:usingBlock:
replaceObjectAtIndex:withObject:
lunarCalendarsForLocaleID:
currentLocale
localeForCalendarID:andLocale:
localeIdentifier
dictionaryWithDictionary:
removeObjectsForKeys:
addEntriesFromDictionary:
canonicalLocaleIdentifierFromString:
preferredLanguages
isLunarCalendarDefaultOnForLanguage:locale:
preferredLunarCalendarForLocaleID:
defaultCalendarForLocaleID:
supportedCalendars
calendarIdentifier
year
calendar
month
yearlessYearForMonth:withCalendar:
setEra:
setYear:
localizedStringForKey:value:table:
localizations
arrayWithObject:
pathForResource:ofType:inDirectory:forLocalization:
dictionaryWithContentsOfFile:
numberingSystemsForLocaleID:
indexesOfObjectsPassingTest:
objectsAtIndexes:
setLocale:
stringFromNumber:
displayNameForNumberingSystemWithIdentifier:localeIdentifier:short:
numberingSystemForLocaleID:
alloc
initWithCapacity:
displayNameForLanguage:displayLanguage:context:
capitalizeFirstWordOfName:accordingToLanguage:
mainBundle
preferredLocalizations
uppercaseLetterCharacterSet
rangeOfCharacterFromSet:
UDisplayContextForIUDisplayNameContext:
ICUdisplayNameForLanguage:capitalization:
stringWithCharacters:length:
uppercaseString
stringByReplacingOccurrencesOfString:withString:
removeObject:
insertObject:atIndex:
removeObjectAtIndex:
preferredLanguagesForRegionWithoutFiltering:
filterLanguageList:forRegion:fromLanguages:
stringWithFormat:
parentLocaleIdentifierForIdentifier:
exemplarForLanguage:
displayNameForLanguage:context:displayLanguage:
formattingContextFromIUDisplayNameContext:
displayNameForRegion:displayLanguage:capitalization:short:
displayNameForRegion:displayLanguage:context:short:
sharedIntlUtility
alternateContinentOfRegion:
localeForCalendarID:
isLunarCalendarDefaultOn
isYearlessDate:forCalendar:
setYearlessYear:forCalendar:
numberingSystemsFromArray:forLocaleID:
displayNameForNumberingSystemWithIdentifier:localeIdentifier:
shortDisplayNameForNumberingSystemWithIdentifier:localeIdentifier:
defaultNumberingSystemForLocaleID:
forceCapitalizationInLanguageLists
preferredLanguagesForRegion:
preferredLanguagesFromLanguages:byAddingFallbacksForRegion:
restrictedCountryCodes
upgradeAppleLanguagesFrom:to:
displayNameForLabelForLunarCalendarID:displayLanguage:
languageList
displayNameForDialect:context:displayLanguage:
displayNameForLocale:displayLanguage:capitalization:short:
canRenderLanguage:
localizedNameForScript:
localizedLanguageForLanguage:
displayNameForNormalizedLanguage:context:displayLanguage:
displayNameForRegion:displayLanguage:capitalization:
mDisplayLanguageCachePtr
mDisplayLanguageCacheUsed
mBidiLanguagesArray
mBidiTestedLanguagesArray
stringWithString:
rangeOfString:options:range:
replaceCharactersInRange:withString:
deviceLanguageIdentifier
bundleWithIdentifier:
rangeOfString:
canonicalLocaleIdentifierFromComponents:
renderableLanguagesFromList:
availableLocaleIdentifiers
canonicalLanguageAndScriptCodeIdentifierForIdentifier:
resetTimeFormat
validateLocale:
canonicalLocaleIdentifierWithValidCalendarForComponents:
isEqualToArray:
updateShouldShowPreferredLanguages:
setLocaleAndResetTimeFormat:
boolValue
languageArrayAfterSettingLanguage:fallback:toLanguageArray:
sharedInputModeController
suggestedInputModesForCurrentLocale
enabled
identifier
normalizedEnabledInputModeIdentifiers
supportedInputModeIdentifiers
activeInputModeIdentifiers
sharedPreferencesController
saveInputModes:
renderableUILanguages
bundleIdentifier
registerPreferredLanguage:usage:confidence:
dictionaryWithCapacity:
localeByChangingLanguageTo:
languageIdentifier
deviceLanguageLocale
supportedCJLanguageIdentifiers
string:withCapitalizedDisplayNamesForFirstLanguageIdentifier:secondLanguageIdentifier:thirdLanguageIdentifier:
renderableLocaleLanguages
setLocaleAfterLanguageChange:
setLocaleAfterRegionChange:
localeLanguageMatchesPrimaryLanguage
shouldShowPreferredLanguages
setLanguageToPreferredLanguages:fallback:
enableDefaultKeyboardForPreferredLanguages
registerPreferredLanguageForAddedKeyboardLanguage:
archivedPreferences
setArchivedPreferences:
%s: previousVersion='%@', currentVersion='%@'
%s: failed to retrieve previousVersion or currentVersion; bailing...
%s: oldPreferences = %@, migratedPreferences = %@
%s: [NSLocale setPreferredLanguages:@[ %@ ]]
%s: CFPreferencesSetValue(%@ 
 %@)
%s: (1) previousVersion=%@, currentVersion=%@, upgradeThreshold=%@
%s: (1) { %@, %@, %@ } qualifies for AppleLanguages migration
%s: (1) `regionCode` is nil/empty; skipping appendRegionalVariantsToLanguageIdentifiers:regionCode:
%s: (1) current AppleLanguages is nil/empty; skipping migration
%s: (2) AppleLanguages = [ %@ ] qualifies for AppleLanguages repair
%s: (2) AppleLanguages = [ %@ ] 
 [ %@ ]
%s: (3) AppleLocale = %@
%s: (3) AppleLocale = %@ 
%s: (3) new AppleLocale is nil/empty; skipping migration
%s: (3) current AppleLanguages or AppleLocale is nil/empty; skipping migration
%s: regionCode=%@, preferredLanguages = [ %@ ] 
 [ %@ ]
%s: Possible upgrade from macOS 10.9
%s: Upgrade from macOS 10.9
%s: Possible upgrade from iOS 8
%s: Upgrade from iOS 8; preferredLanguages = [ %@ ] 
 [ %@ ]
%s: Upgrade from pre-{ macOS 10.9, iOS 8 }; preferredLanguages = [ %@ ] 
 [ %@ ]
%s: Upgrade from post-{ macOS 10.9, iOS 8 }; preferredLanguages = [ %@ ] 
 [ %@ ]
%s: preferredLanguagesIndex=%u
%s: Normalizing %@ 
%s: Upgrade from macOS 10.9; preferredLanguages = [ %@ ] 
 [ %@ ]
-[ISMigrator performMigration]
AppleLanguages
AppleLocale
AppleUserLanguages
PreferredLanguages
AppleLanguagesDidMigrate
10.12
-[ISMigrator performMigrationForPreferences:]
-[ISMigrator appendRegionalVariantsToLanguageIdentifiers:regionCode:]
es-ES
es-419
-[ISMigrator importPreferredLanguagesForPreferences:]
10.9
10.10
-[ISMigrator importPreferredLanguages_macOS_10_9_forPreferences:]
platform
TI,N,V_platform
previousVersion
T@"NSString",C,N,V_previousVersion
currentVersion
T@"NSString",C,N,V_currentVersion
preferencesBeforeMigration
T@"NSDictionary",C,N,V_preferencesBeforeMigration
preferencesAfterMigration
T@"NSDictionary",C,N,V_preferencesAfterMigration
v4@?0
InternationalSupportMigrator
com.apple.InternationalSupport
/System/Library/Frameworks/UIKit.framework/UIKit
UIKeyboardInputModeController
UIKeyboardPreferencesController
UIKeyboardInputModeGetIdentifierWithKeyboardLayouts
UIKeyboardInputModeGetBaseLanguage
UIKeyboardCanonicalInputModeName
UIKeyboardInputModeGetLanguageWithRegion
UIKeyboardInputModeGetNormalizedIdentifier
UIKeyboardInputMode_intl
NSPersonNamePreferencesDidChangeNotification
NSPersonNameDefaultDisplayNameOrder
NSPersonNameDefaultShortNameEnabled
NSPersonNameDefaultShortNameFormat
NSPersonNameDefaultShouldPreferNicknamesPreference
.GlobalPreferences
com.apple.PeoplePicker
personNameOrdering
nameOrder
personShortNameFormat
shortNameFormat
personShortNamePreferNicknames
preferNicknames
personShortNameFormatEnabled
shortNameEnabled
givenFirst
familyFirst
givenNameFamilyInitial
familyNameGivenInitial
givenOnly
familyOnly
preferNicknamesEnabled
preferNicknamesDisabled
shortNamesEnabled
shortNamesDisabled
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
com.apple.AddressBook
ABNameDisplay
ABShortNameStyle
ABShortNamePrefersNickname
unset
v16@?0@"NSString"4@"NSNumber"8^B12
LanguageCodeExceptions
plist
calendar
LunarCalendars
chinese
hebrew
islamic
islamic-civil
islamic-
v12@?0@"NSString"4^B8
zh-Hans
zh-Hant
zh-HK
hebr
numbers
LocalizedLunarCalendar
strings
default
B16@?0@4I8^B12
native
traditional
finance
latn
ForceCapitalizationInLanguageLists
%@-%@
root
LastResort
Script-%d
CTFontCreateUIFontForLanguage
/System/Library/Frameworks/CoreText.framework/CoreText
CTFontCreateForString
CTFontCopyName
kCTFontPostScriptNameKey
com.apple.UIKit
B16@?0@"NSString"4I8^B12
AppleDatePreferencesChangedNotification
AppleTimePreferencesChangedNotification
AppleNumberPreferencesChangedNotification
AppleICUForce12HourTime
AppleICUForce24HourTime
KeyboardLastUsed
com.apple.Preferences
com.apple.purplebuddy
languageIdentifier
T@"NSString",R,N
ISMigrator
IPDictionaryExtensions
IPiOSABNamePreferenceInfoProvider
IPNamePreferenceInfoProvider
NSObject
IPOSXABNamePreferenceInfoProvider
IPFoundationNamePreferenceInfoProvider
NSPersonNameComponentsFormatterPreferences
IntlUtility
IntlPreferencesAdditions
I8@0:4
@16@0:4@8@12
@20@0:4@8@12I16
v8@0:4
B8@0:4
@12@0:4@8
v12@0:4I8
@8@0:4
v12@0:4@8
@"NSString"
@"NSDictionary"
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
@"NSDictionary"8@0:4
@"NSDictionary"12@0:4@"NSString"8
v20@0:4@8i12:16
v12@0:4i8
v12@0:4B8
v16@0:4@8i12
@20@0:4@8I12I16
@12@0:4I8
v16@0:4@8@?12
B16@0:4@8@12
i16@0:4i8@12
v16@0:4@8@12
@20@0:4@8@12B16
i12@0:4I8
@20@0:4@8@12@16
@20@0:4@8I12@16
@16@0:4@8^{ULocaleDisplayNames=}12
@24@0:4@8@12I16B20
@12@0:4s8
@"NSMutableArray"
@24@0:4@8@12@16@20
@(#)PROGRAM:IntlPreferences  PROJECT:IntlPreferences-227.15.2
zPLR
