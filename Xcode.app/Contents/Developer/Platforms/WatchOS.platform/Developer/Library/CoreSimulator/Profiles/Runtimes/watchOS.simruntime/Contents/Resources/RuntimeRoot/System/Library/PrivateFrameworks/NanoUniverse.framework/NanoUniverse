?@(#)PROGRAM:NanoUniverse  PROJECT:NanoTimeKit-1
init
position
_updateCamera
_updatePositionFromAngle
date:toRotation:toAngle:toLight:toDistance:
orbit
alloc
initWithDate:body:
longitude
calculateGeocentricDirectionForSunX:Y:Z:date:
alCity
latitude
setCenterCoordinate:animated:
initWithAnimatable:value:key:
addAnimation:
removeAllAnimationsFor:withKeys:
focus
isAnimating:forKeys:
spheroidOfType:
homeCoordinate
setCamera:target:up:roll:
setCenterCoordinate:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
animatedFloatForKey:
setAnimatedFloat:forKey:
setHomeCoordinate:
centerCoordinate
initWithScene:parent:type:
distanceScale
setDistanceScale:
date:toCameraPosition:toCameraTarget:
updateSunLocationForDate:
centerOnCity:
setCenter:
.cxx_destruct
type
parent
distance
setDistance:
angle
setAngle:
radius
opacity
setOpacity:
colorize
setColorize:
radiusScale
setRadiusScale:
light
rotation
setRotation:
programType
spriteType
setSpriteType:
visible
setVisible:
facing
setFacing:
_type
_programType
_parent
_distance
_angle
_radius
_rotation
_radiusScale
_opacity
_distanceScale
_colorize
_position
_light
_spriteType
_homeCoordinate
_centerCoordinate
_visible
_facing
_scene
addObject:
setSnap:
setDate:
date
countByEnumeratingWithState:objects:count:
frameInterval
update:
indexOfObject:
addIndex:
observer
universeAnimationFinished:
count
removeObjectsAtIndexes:
animatable
removeAnimation:
removeObject:
initWithAnimatable:from:to:key:
updateSunLocationForDate:animated:
initWithSphereoids:currentDateBlock:
snap
acceptableFrameInterval
updateSunLocation
updateFromDateIfNeeded
updatable
setUpdatable:
setOrbit:
yearsSince1970
minFrameInterval
setMinFrameInterval:
target
roll
setRoll:
setFocus:
spheroids
projectionType
setProjectionType:
backgroundType
setBackgroundType:
currentDateBlock
setCurrentDateBlock:
_orbit
_roll
_yearsSince1970
_minFrameInterval
_spheroids
_focus
_target
_snap
_backgroundType
_projectionType
_animations
_date
_currentDateBlock
_isUpdateNeeded
_isUpdatable
timeIntervalSince1970
_stopAnimation
window
_startAnimation
layer
setOpaque:
numberWithBool:
dictionaryWithObjectsAndKeys:
setDrawableProperties:
setAsynchronous:
mainScreen
scale
setContentScaleFactor:
sharedInstance
shareGroup
initWithAPI:sharegroup:
createVertexArray
initWithFrame:
_init
initWithCoder:
stopAnimation
dealloc
drawView:
_resizeFramebuffer
setAnimationFrameInterval:
renderWithScene:viewport:
scene
viewport
presentRenderbuffer:
renderbufferStorage:fromDrawable:
displayLinkWithTarget:selector:
setPreferredFramesPerSecond:
mainRunLoop
addToRunLoop:forMode:
invalidate
discardContents
defaultCenter
_backgrounded:
addObserver:selector:name:object:
_foregrounded:
removeObserver:name:object:
bounds
snapshot:size:
layerClass
willMoveToWindow:
addPortal:
drawRect:
layoutSubviews
animationFrameInterval
renderSynchronouslyWithImageQueueDiscard:
startAnimation
snapshot
isAnimating
setScene:
backingWidth
backingHeight
_context
_frameInterval
_displayLink
_isAnimated
_isAnimating
_backingWidth
_backingHeight
_vertexArray
_defaultFramebuffer
_colorRenderbuffer
_depthRenderbuffer
_portals
_baseTime
initWithAnimatable:from:to:ctrl1:ctrl2:key:
initWithAnimatable:values:count:key:
pause
setPause:
startTime
setStartTime:
duration
setDuration:
from
setFrom:
setTo:
delay
setDelay:
setKey:
setAnimatable:
function
setFunction:
setObserver:
setFrameInterval:
repeat
setRepeat:
_from
_ctrl1
_ctrl2
_values
_valuesCount
_startTime
_duration
_prevTime
_pauseTime
_delay
_key
_animatable
_repeat
_paused
_observer
_function
dictionary
numberWithInteger:
setObject:forKey:
objectForKey:
bundleForClass:
initWithAPI:
sharegroup
_initPrograms
_initHemi
_initTextures
_asyncDeallocInstance
addObserver:selector:notificationName:
removeObserver:notificationName:
_renderWithScene:viewport:prime:
_requireTexture:sync:
imageWithCGImage:
atlasBackingWithArt:uuid:
path
atlasBackingWithBytes:length:mmapFile:uuid:
structure
_loadTexture:
stringWithFormat:
pathForResource:ofType:
isMainThread
_deallocInstance
performSelectorOnMainThread:withObject:waitUntilDone:
_purge
_prime
prime
purge
_shareGroup
_bundle
_resources
_initalizedProgams
_initalizedHemi
_initalizedTextures
_initalized
setFrame:boundSize:contentScaleFactor:
initWithFrame:boundSize:contentScaleFactor:
frame
setViewport:
_viewport
NUSpheroid
NUAnimatable
NSObject
NURotatable
NUScene
NUView
NUAnimation
NURenderer
NUPortal
B12@0:4@8
#8@0:4
@8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
12@0:4I8
v28@0:48I24
v28@0:4{CLLocationCoordinate2D=dd}8B24
{CLLocationCoordinate2D=dd}8@0:4
v24@0:4{CLLocationCoordinate2D=dd}8
@20@0:4@8@12I16
v8@0:4
f8@0:4
v12@0:4f8
v20@0:4@8^12^16
v28@0:4@8^f12^f16^20^f24
v12@0:4@8
v16@0:4{CGPoint=ff}8
8@0:4
v24@0:48
v12@0:4I8
v12@0:4B8
@"NUSpheroid"
{CLLocationCoordinate2D="latitude"d"longitude"d}
@"NUScene"
@16@0:4I8@?12
i8@0:4
B16@0:4@8I12
v16@0:4@8I12
v16@0:4@8B12
@12@0:4I8
v60@0:482440f56
v12@0:4i8
@?8@0:4
v12@0:4@?8
@"NSMutableArray"
@"NSDate"
@24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
@12@0:4@8
v24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
@20@0:4@8{CGSize=ff}12
@"EAGLContext"
@"CADisplayLink"
@24@0:4@8^12i16I20
@80@0:4@812284460I76
@48@0:4@81228I44
@32@0:4@812I28
B12@0:4f8
[75]
@"<NUAnimatable>"
@"<NUAnimationObserver>"
v28@0:4@8{NUViewport=iiII}12
v32@0:4@8{NUViewport=iiII}12B28
v16@0:4I8B12
@"EAGLSharegroup"
@"NSBundle"
{NURendererResources="programs"[7{NUProgram="program"I"uniforms"[11i]}]"vertexBuffer"I"indexBuffer"I"atlasTexture"I"loadedTexturesSet"Q"priTextures"[29I]"secTextures"[29I]"dummyCubeTexture"I"dummy2dTexture"I}
@36@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8{CGSize=ff}24f32
{CGRect={CGPoint=ff}{CGSize=ff}}8@0:4
v36@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8{CGSize=ff}24f32
{NUViewport=iiII}8@0:4
v24@0:4{NUViewport=iiII}8
{NUViewport="x"i"y"i"width"I"height"I}
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
homeCoordinate
T{CLLocationCoordinate2D=dd},N
centerCoordinate
type
TI,R,N,V_type
parent
T@"NUSpheroid",R,N,V_parent
distance
Tf,N,V_distance
distanceScale
Tf,D,N
angle
Tf,N,V_angle
rotation
Tf,N,V_rotation
opacity
Tf,N,V_opacity
colorize
T,N,V_colorize
radius
Tf,R,N,V_radius
radiusScale
Tf,N,V_radiusScale
position
T,R,N,V_position
light
T,R,N,V_light
programType
TI,R,N,V_programType
spriteType
TI,N,V_spriteType
T{CLLocationCoordinate2D=dd},N,V_homeCoordinate
T{CLLocationCoordinate2D=dd},N,V_centerCoordinate
visible
TB,N,V_visible
facing
TB,N,V_facing
target
T,R,N,V_target
T,R,N,V_up
focus
T@"NUSpheroid",&,N,V_focus
orbit
Tf,N,V_orbit
roll
Tf,N,V_roll
minFrameInterval
Ti,N,V_minFrameInterval
acceptableFrameInterval
Ti,R,N
snap
TI,D,N
backgroundType
TI,N,V_backgroundType
projectionType
TI,N,V_projectionType
spheroids
T@"NSArray",R,N,V_spheroids
date
T@"NSDate",&,D,N
currentDateBlock
T@?,C,N,V_currentDateBlock
updatable
TB,N,V_isUpdatable
yearsSince1970
Tf,R,N,V_yearsSince1970
v4@?0
animating
TB,R,N,GisAnimating,V_isAnimating
animationFrameInterval
Ti,D,N
scene
T@"NUScene",&,N,V_scene
backingWidth
Ti,R,N,V_backingWidth
backingHeight
Ti,R,N,V_backingHeight
-[NUAnimation initWithAnimatable:values:count:key:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoTimeKit_Sim/NanoTimeKit-959.3.69/NanoUniverse/NUAnimation.m
false
startTime
Tf,N,V_startTime
duration
Tf,N,V_duration
delay
Tf,N,V_delay
frameInterval
Ti,N,V_frameInterval
from
T,N,V_from
T,N,V_to
repeat
TB,N,V_repeat
pause
TB,D,N
function
TI,N,V_function
TI,N,V_key
animatable
T@"<NUAnimatable>",&,N,V_animatable
observer
T@"<NUAnimationObserver>",W,N,V_observer
uPrimaryTexture
uSecondaryTexture
uRotationMatrix
uPositionMatrix
uCloudMatrix
uLightDirection
uViewDirection
uSprite
uOpacity
uColorize
uMixer
NanoUniverse
nanouniverse
c%dd
c%dn
@"NSDate"4@?0
shareGroup
T@"EAGLSharegroup",R,N,V_shareGroup
com.apple.nu.queue
attribute vec3 aPosition; uniform mediump mat3 uRotationMatrix; uniform mediump mat3 uCloudMatrix; uniform mediump mat4 uPositionMatrix; uniform mediump vec3 uLightDirection; uniform mediump vec3 uViewDirection; varying mediump vec3 vPrimaryCoord; varying mediump vec3 vSecondaryCoord; varying mediump vec3 vPack; void main() { mediump vec3 tc = uRotationMatrix * aPosition; mediump vec3 cc = uCloudMatrix * aPosition; mediump vec3 absTexCoord = abs(tc); mediump float tmax = max(max(absTexCoord.x, absTexCoord.y), absTexCoord.z); mediump vec3 absCloudCoord = abs(cc); mediump float cmax = max(max(absCloudCoord.x, absCloudCoord.y), absCloudCoord.z); mediump vec3 normal = normalize(tc); mediump float NdotL = dot(normal, uLightDirection); mediump vec3 rfl = normal*(2.0*NdotL) - uLightDirection; mediump vec3 lightReflect = normalize(rfl); mediump float specularFactor = max(dot(uViewDirection, lightReflect), 0.0); vPrimaryCoord = tc / tmax; vSecondaryCoord = cc / cmax; vPack = vec3(NdotL, specularFactor*max(NdotL, 0.0), smoothstep(0.17364817766693033, 0.17364817766693033 + 0.35, aPosition.z)); gl_Position = uPositionMatrix * vec4(aPosition, 1); }
uniform samplerCube uPrimaryTexture; uniform samplerCube uSecondaryTexture; uniform mediump vec4 uColorize; uniform mediump float uOpacity; varying mediump vec3 vPrimaryCoord; varying mediump vec3 vSecondaryCoord; varying mediump vec3 vPack; void main() { mediump vec3 tc = vPrimaryCoord; mediump vec3 atc = abs(tc); if (atc.x > atc.y) { if (atc.x > atc.z) { tc.yz *= 254.0 / 256.0; } else { tc.xy *= 254.0 / 256.0; } } else { if (atc.y > atc.z) { tc.xz *= 254.0 / 256.0; } else { tc.xy *= 254.0 / 256.0; } } mediump vec3 albedoRGB = textureCube(uPrimaryTexture, tc).rgb; mediump vec2 albedoSI = textureCube(uSecondaryTexture, vPrimaryCoord).rb; mediump float clouds = textureCube(uSecondaryTexture, vSecondaryCoord).g; mediump vec3 albedoBaseColor = albedoRGB*3.0; mediump float specularAmt = albedoSI.r; mediump float illumAmt = albedoSI.g; mediump float NdotL = vPack.x; mediump float maxNdotL0 = max(NdotL, 0.0); mediump float specularFac = vPack.y*vPack.y*vPack.y; mediump float ambient = specularAmt*0.01 + 0.01; mediump vec3 albedo = albedoBaseColor*(maxNdotL0*(1.0 - ambient) + ambient) + vec3(illumAmt, illumAmt*(0.75*illumAmt + 0.25), 0.0)*max(-NdotL, 0.0) + vec3(0.2, 0.3, 0.4)*(specularAmt*specularFac*specularFac); albedo = mix(albedo, vec3(maxNdotL0*0.95 + 0.05), clouds*clouds); albedo = mix(albedo, uColorize.rgb, uColorize.a); mediump float alpha = vPack.z*uOpacity; gl_FragColor = vec4(albedo*alpha, alpha); }
attribute vec3 aPosition; uniform mat3 uRotationMatrix; uniform mat4 uPositionMatrix; varying mediump vec4 vTexCoord; void main() { vTexCoord = vec4(uRotationMatrix * aPosition, aPosition.z); gl_Position = uPositionMatrix * vec4(aPosition, 1); }
uniform samplerCube uPrimaryTexture; uniform mediump vec3 uLightDirection; uniform mediump float uOpacity; varying mediump vec4 vTexCoord; void main() { mediump vec3 normal = normalize(vTexCoord.xyz); mediump vec3 absTexCoord = abs(vTexCoord.xyz); mediump float tmax = max(max(absTexCoord.x, absTexCoord.y), absTexCoord.z); mediump vec3 texcoord = vTexCoord.xyz / tmax; mediump float NdotL = dot(normal, uLightDirection); mediump vec3 albedo = textureCube(uPrimaryTexture, texcoord).rgb * (max(NdotL, 0.0) * (1.0 - 0.15) + 0.15); mediump float alpha = smoothstep(0.5, 0.7, vTexCoord.w) * uOpacity; gl_FragColor = vec4(albedo * alpha, alpha); }
uniform mediump float uOpacity; uniform samplerCube uPrimaryTexture; varying mediump vec4 vTexCoord; void main() { mediump vec3 absTexCoord = abs(vTexCoord.xyz); mediump float tmax = max(max(absTexCoord.x, absTexCoord.y), absTexCoord.z); mediump vec3 texcoord = vTexCoord.xyz / tmax; mediump float alpha = smoothstep(0.1, 0.4, vTexCoord.w) * uOpacity; mediump vec3 albedo = textureCube(uPrimaryTexture, texcoord).rgb; gl_FragColor = vec4(albedo*alpha, alpha); }
attribute vec3 aPosition; uniform mat3 uRotationMatrix; uniform mat4 uPositionMatrix; varying mediump vec3 vTexCoord; varying mediump vec3 vPosition; void main() { vPosition = aPosition; vTexCoord = uRotationMatrix * aPosition; gl_Position = uPositionMatrix * vec4(aPosition, 1); }
uniform mediump float uOpacity; uniform samplerCube uPrimaryTexture; varying mediump vec3 vTexCoord; varying mediump vec3 vPosition; void main() { mediump vec3 absTexCoord = abs(vPosition); mediump float tmax = max(max(absTexCoord.x, absTexCoord.y), absTexCoord.z); mediump vec3 texcoord = vPosition / tmax; mediump vec3 albedo = textureCube(uPrimaryTexture, texcoord).rgb; mediump float alpha = smoothstep(0.1, 0.4, vPosition.z) * uOpacity; absTexCoord = abs(vTexCoord); tmax = max(max(absTexCoord.x, absTexCoord.y), absTexCoord.z); texcoord = vTexCoord / tmax; gl_FragColor = vec4(mix(vec3(1.0), vec3(0.15), smoothstep(-0.05, 0.05, texcoord.x))*albedo*alpha, alpha); }
attribute vec3 aPosition; uniform mat4 uPositionMatrix; uniform mediump vec4 uSprite; varying mediump vec2 vTexCoord; void main() { vTexCoord = uSprite.xy + (aPosition.xy*0.5+0.5)*uSprite.zw; gl_Position = uPositionMatrix * vec4(aPosition.xy, 0.0, 1); }
uniform sampler2D uPrimaryTexture; uniform mediump float uOpacity; varying mediump vec2 vTexCoord; void main() { mediump vec4 albedo = texture2D(uPrimaryTexture, vTexCoord); gl_FragColor = albedo * uOpacity; }
attribute vec3 aPosition; uniform mat4 uPositionMatrix; uniform mat3 uRotationMatrix; varying mediump vec4 vTexCoord; void main() { mediump float dist = aPosition.z; mediump vec3 pos = vec3(aPosition.xy*0.9396926207859084, 0.3420201433256687); vTexCoord = vec4(uRotationMatrix * pos, dist); pos.xy += (0.075 * (dist*2.0 - 1.0)) * aPosition.xy; gl_Position = uPositionMatrix * vec4(pos, 1); }
uniform mediump vec3 uLightDirection; uniform mediump float uOpacity; varying mediump vec4 vTexCoord; void main() { mediump float dist = vTexCoord.w; mediump vec3 normal = normalize(vTexCoord.xyz); mediump float inten = smoothstep(-1.0, 1.0, dot(normal, uLightDirection) - dist*dist)*0.75 + 0.25; mediump float blend = (1.0 - abs(dist*2.0 - 1.0)); mediump float alpha = blend * inten; alpha *= alpha; alpha *= alpha; alpha *= 0.65 * uOpacity; gl_FragColor = vec4(mix(vec3(0.1, 0.25, 0.4), vec3(0.2, 1.0, 1.0), blend*blend*blend)*alpha, alpha); }
attribute vec3 aPosition; uniform mediump mat3 uRotationMatrix; uniform mediump mat4 uPositionMatrix; varying mediump vec3 vPrimaryCoord; varying mediump float vAlpha; void main() { mediump vec3 tc = uRotationMatrix * aPosition; mediump vec3 absTexCoord = abs(tc); mediump float tmax = max(max(absTexCoord.x, absTexCoord.y), absTexCoord.z); vPrimaryCoord = tc / tmax; vAlpha = smoothstep(0.17364817766693033, 0.17364817766693033 + 0.35, aPosition.z); gl_Position = uPositionMatrix * vec4(aPosition, 1); }
uniform samplerCube uPrimaryTexture; uniform samplerCube uSecondaryTexture; uniform mediump vec3 uLightDirection; uniform mediump vec4 uColorize; uniform mediump float uOpacity; varying mediump vec3 vPrimaryCoord; varying mediump float vAlpha; void main() { mediump vec3 normalRGB = textureCube(uSecondaryTexture, vPrimaryCoord).rgb; mediump vec3 normal = normalize(normalRGB*2.0 - 1.0); mediump float NdotL = dot(normal, uLightDirection); mediump float RdotL = dot(normalize(vPrimaryCoord), uLightDirection); mediump float inten = max(NdotL, 0.0)*smoothstep(-0.1, 0.1, RdotL); mediump vec3 albedo = textureCube(uPrimaryTexture, vPrimaryCoord).rgb*(inten*(1.0 - 0.04) + 0.04); mediump float alpha = vAlpha*uOpacity; albedo = mix(albedo, uColorize.rgb, uColorize.a); gl_FragColor = vec4(albedo * alpha, alpha); }
atlas
viewport
T{NUViewport=iiII},N,V_viewport
Program validate log:
Failed to validate program %d
Failed to compile shader:
Failed to link program %d
t not at right position
snapshot begin
Failed to make complete framebuffer object %x
snapshot end
_requireTexture:%lu sync:%d
_loadTexture:%lu
purge texture %d
purge texture %lu
Failed to make complete framebuffer object for warmup %x
zPLR
zPLR
