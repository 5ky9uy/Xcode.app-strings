init
alloc
defaultCenter
_clientCanBeNowPlayingAppNotification:
addObserver:selector:name:object:
release
removeObserver:
dealloc
sendRemoteControlCommand:completion:
playerPath
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
broadcastRemoteControlCommand:completion:
remoteControlClients
bundleIdentifier
initWithPID:bundleIdentifier:responseData:
autorelease
arrayWithObjects:count:
server
clientWithRegisteredCustomOrigin:
count
sendRemoteControlCommand:toClients:completion:
clientForBundleIdentifier:
initWithCapacity:
countByEnumeratingWithState:objects:count:
lock
addObject:
unlock
_sendRemoteControlCommand:toDestinationClient:withCompletion:
currentSettings
broadcastCommandWaitDuration
_shouldIgnoreCommand:completion:
originatingAppDisplayID
isEqualToString:
enumerateKeysAndObjectsUsingBlock:
removeObjectsForKeys:
allClients
canBeNowPlayingApplication
_handleSendCommandMessage:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
setEnqueuedCommands:
allValues
setRemoteControlContexts:
protobufData
length
bytes
nowPlayingServer
queryExistingPlayerPathForXPCMessage:
playerClient
supportedRemoteControlCommandsData
error
queryPlayerPathForXPCMessage:fromClient:
nowPlayingClient
setSupportedRemoteControlCommandsData:
object
_sendQueuedCommandsForDestinationClient:
commandType
mutableCopy
resolveContextualCommandForCurrentNowPlaying:
setCommandType:
appOptions
routeUID
routingServer
pickCachedRouteWithUID:
processName
createNowPlayingClient
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localActiveClientDisplayID
localOriginClient
nowPlayingDataSource
nowPlayingApplicationDisplayID
destinationAppDisplayID
resolveExistingPlayerPath:
setPlayerPath:
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
propertyListWithData:options:format:error:
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_applicationIsRunning:
initWithType:bundleID:
isValid
invalidate
_clearQueuedCommandsForApplicationWithDisplayID:
setDestinationAppDisplayID:
objectForKey:
setObject:forKey:
copy
removeObjectForKey:
_sendQueuedCommands:toClient:retry:
dateCreated
timeIntervalSinceNow
indexOfObject:
subarrayWithRange:
_sendQueuedPlayCommand:remainingCommands:client:
_completionHandler
mainQueue
localActivePlayerIsPlaying
localNowPlayingClient
isEqual:
addObserverForName:object:queue:usingBlock:
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
systemMediaClient
retain
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
isAVRCPCommand
shouldSendCommandsDuringPhoneCall
shouldSendCommand:
numberOfActivePhoneCalls:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retainCount
zone
hash
superclass
description
debugDescription
handleXPCMessage:fromClient:
collectDiagnostic:
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
isProcessingPlayCommand
_serialQueue
_commandQueuesForDisplayIDs
_remoteControlContexts
_playCommandsBeingProcessed
_callObserver
dataWithBytes:length:
initWithCommandType:player:senderAppDisplayID:optionsData:
stringWithUTF8String:
setAppOptions:
setDestinationAppProcessID:
arrayWithCapacity:
unsignedIntValue
componentsJoinedByString:
stringWithFormat:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
routingDataSource
currentVolume
volumeWarningEnabled
volumeLimit
warningState
setWarningState:
_volumeWarningEnabled
_routingDataSource
_currentVolume
_volumeLimit
_warningState
standardUserDefaults
dictionaryForKey:
boolForKey:
setBool:forKey:
synchronize
removeAllObjects
numberWithUnsignedInt:
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
clearRoutedCommands
_routedCommands
_contextID
_originatingAppDisplayID
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRouteForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
discoveryMode
setDiscoveryMode:
pickedRoute
externalScreenType
currentRouteSupportsVolumeControl
_currentRouteSupportsVolumeControl
_discoveryMode
_pickedRoute
_externalScreenType
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_bundleID
_processID
initWithBundleIDs:states:
weakRefWithObject:
_frontmostApplicationDidChange:
setHandler:
_registerNotifications
_reloadCachedNowPlayingClients
_reloadCachedNowPlayingItem
_unregisterNotifications
_mostRecentlyUpdatedClient
nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
_nowPlayingClientDidRegisterNotification:
_nowPlayingClientDidUnregisterNotification:
_activeNowPlayingClientDidChangeNotification:
removeObserver:name:object:
_notifyDelegateNowPlayingApplicationDidChange
allLocalNowPlayingInfoClients
setCachedNowPlayingClients:
setCachedNowPlayingContentItem:
_notifyDelegateNowPlayingPlaybackStateDidChange
delegate
nowPlayingDataSourceNowPlayingApplicationDidChange:
nowPlayingDataSourceAnyApplicationPlaybackStateDidChange:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
activePlayerClient
playbackQueue
dateWithTimeIntervalSinceReferenceDate:
compare:
nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
appStateMonitor
setAppStateMonitor:
cachedNowPlayingClients
cachedNowPlayingContentItem
serialQueue
setSerialQueue:
_appStateMonitor
_cachedNowPlayingClients
_cachedNowPlayingContentItem
initWithPlayerPath:queue:
_registerCallbacks
_onQueue_supportedRemoteControlCommands
isEqualToData:
_onQueue_supportedCommandsDidChange:
_onQueue_pushState
_onQueue_playbackQueueDidChange:
_onQueue_popState
_onQueue_playbackState
_onQueue_playbackQueueCapabilitiesDidChange:
_onQueue_isPlaying
nowPlayingPlayerClient:isPlayingDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackStateDidChange:forPlayerPath:
nowPlayingPlayerClient:supportedCommandsDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackQueueDidChange:forPlayerPath:
nowPlayingPlayerClient:playbackQueueCapabilitiesDidChange:forPlayerPath:
setPushStateIsPlaying:
setPushStatePlaybackState:
pushStateIsPlaying
pushStatePlaybackState
_onQueue_isPlayingDidChange:
_onQueue_playbackStateDidChanged:
userInfo
_contentItemArtworkChanged:
sharedManager
playerClientRequestsForPlayerPath:
name
daemonClient
playbackQueueRequests
playbackQueueClientForPlayerPath:
subscribedContentItemsIdentifiers:forRequest:
identifier
data
dictionaryWithObjects:forKeys:count:
postNotificationName:object:userInfo:
unpacketize:completion:
addTransactionCallback:forName:
initWithPlayerPath:
inferredPlaybackState
supportedRemoteControlCommands
setPlaybackQueue:
setInferredPlaybackState:
setPlaybackState:
playbackState
setPlaybackQueueCapabilities:
isPlaying
hasNowPlayingData
nowPlayingState
updatePlayerPath:
playbackQueueCapabilities
player
playbackQueueClient
setDelegate:
_supportedRemoteControlCommands
_supportedRemoteControlCommandsData
_playbackQueue
_playbackQueueCapabilities
_playbackState
_inferredPlaybackState
_pushStateIsPlaying
_player
_playerPath
_playbackQueueClient
_delegate
_pushStatePlaybackState
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_anyApplicationIsPlaying
_nowPlayingApplicationDisplayID
_nowPlayingApplicationPID
initWithDeviceFeatures:
_activeSystemContext
outputDevice
canSetVolume
availableOutputDevices
initWithOutputDevice:
uniqueIdentifier
setOutputDevice:options:
isSpeakerRoute
initWithOutputDeviceUIDs:features:
firstObject
avOutputDevice
removeObject:
beginSearchWithTimeout:completion:
sharedAudioPresentationOutputContext
_discoverySession
_activeReconnaissanceSessions
componentsSeparatedByString:
lastObject
numberWithInt:
objectForKeyedSubscript:
sharedSystemAudioContext
sharedSystemScreenContext
iTunesAudioContext
auxiliaryOutputContext
closeAll
closeForClient:userCancelled:
pinPairingToken
pinPairingDialogDidClose:forClient:userCancelled:
setPinPairingToken:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
_routingDataSourcePickableRoutesDidChange:
cancelSearch
setCallback:
_timeoutTimerFired:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setTimeoutTimer:
callback
_endSearch
matchesUniqueIdentifier:
_concludeSearchWithRoute:
timeInterval
timeoutTimer
initWithRouteUID:
_searchInProgress
_routeUID
_callback
_timeoutTimer
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleRequestPlaybackQueueInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
setQueuedInitiatePlaybackMessages:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
relayXPCMessage:andReply:resultCallback:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
initForWritingWithMutableData:
encodeWithCoder:
finishEncoding
_handleSupportedAPIsDidChangeForClient:
dataWithPropertyList:format:options:error:
_messageRequiresMediaServerBlessing:
initWithType:pid:
relayXPCMessage:andReply:
_messageCanLaunchApp:
_takeProcessAssertionForClient:
indexPathData
UTF8String
connection
_scheduleEndProcessAssertionForClient:
initWithBytes:length:
localizedDescription
domain
code
numberWithInteger:
postClientNotificationNamed:userInfo:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
initWithUTF8String:
initWithBundleID:indexPathData:
initWithInputStream:outputStream:runLoop:
initWithQueue:
unregisterAllVirtualVoiceInputDevices
numberWithUnsignedLongLong:
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
shortValue
externalDeviceClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
setDeviceInfo:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
addVolumeEvent:
flushVolumeEvents:
credentials
setCredentials:
deviceInfo
supportedMessages
setSupportedMessages:
sessionPeer
serverDelegate
setServerDelegate:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyricsEvents
_lastVolumeIncrementEvent
_lastVolumeDecrementEvent
_credentials
_deviceInfo
_supportedMessages
_playbackQueueRequests
_sessionPeer
_pinPairingToken
_serverDelegate
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
timeIntervalSince1970
expirationDate
date
defaultManager
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
path
_dbHandle
_tokenRecords
_path
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
_query:
transactionWaitDurationOnOutOfMemory
_transactionEnded
transaction:didReceivePackets:receivedSize:requestedSize:queue:completion:
_calculateMemory
outOfMemoryWaitDuration
_processMessage:
transactionDidEnd:bytesRemaining:
transactionRequestingMemorySize:
initWithName:fromMessage:withDelegate:
initWithName:playerPath:
send:toConnection:completion:
cancel
_bytesInUse
_taskAssertion
_name
start
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
setTransactions:
setUsedTransactionMemory:
setAllowedTransactionMemory:
setTransactionWaitDuration:
adjustMemory:
handleContentItemTransaction:packets:group:
handlePlaybackQueueRequestTransaction:packets:group:
hasRequest:
allKeys
_sendContentItemTransaction:request:playerPath:
archivedDataWithRootObject:
setIdentifier:
setUserData:
initWithData:forKey:
sendContentItemTransaction:request:playerPath:
transactions
_queue
_usedMemory
_allowedMemory
_transactionWaitDuration
_transactions
userData
null
valueWithBytes:objCType:
objCType
getValue:
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
UUID
UUIDString
writeToFile:options:error:
fileURLWithPath:
numberWithBool:
setResourceValue:forKey:error:
unarchiveObjectWithFile:
archiveRootObject:toFile:
_deviceInfoDidChange
sharedConnection
addObserver:
effectiveBoolValueForSetting:
observer:didObserveNewDeviceInfo:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_gestaltNotificationToken
client
nowPlayingOriginClient:currentRouteHasVolumeControl:
_onQueue_activeNowPlayingClient
_onQueue_existingNowPlayingClientForClient:
allObjects
setNowPlayingClient:
_onQueue_nowPlayingClientForClient:
primaryApplicationDisplayID
_onQueue_anyAppIsPlaying
anyPlayerIsPlaying
_onQueue_setNowPlayingClient:
displayID
_onQueue_setOverrideClient:
nowPlayingClientForClient:
_onQueue_addNowPlayingClient:
nowPlayingOriginClient:clientDidRegister:forPlayerPath:
_reloadNowPlayingClientFromDataSource
playerClientForPlayer:
existingNowPlayingClientForClient:
nowPlayingOriginClient:clientDidUnregister:forPlayerPath:
setPushStateNowPlayingClient:
setPushStateAnyAppIsPlaying:
pushStateNowPlayingClient
nowPlayingOriginClient:activeNowPlayingAppDidChangeFrom:toPlayerPath:
pushStateAnyAppIsPlaying
nowPlayingOriginClient:anyAppIsPlayingDidChange:forOrigin:
initWithOrigin:
currentRouteHasVolumeControl
setCurrentRouteHasVolumeControl:
nowPlayingClients
setActiveNowPlayingClient:
activeNowPlayingClient
anyAppIsPlaying
setOverrideClient:
setActivity:
setNowPlayingDisplayID:
existingNowPlayingClientForPlayerPath:
existingNowPlayingClientForPid:
existingNowPlayingClientForDisplayID:
removeNowPlayingClientForClient:
setNowPlayingDataSource:
origin
activity
overrideClient
nowPlayingDisplayID
_origin
_nowPlayingClients
_currentRouteHasVolumeControl
_pushStateAnyAppIsPlaying
_activity
_overrideClient
_nowPlayingDataSource
_nowPlayingDisplayID
_nowPlayingClient
_pushStateNowPlayingClient
isEqualToDictionary:
extendedInfo
boolValue
matchesUID:
initWithDictionary:
type
isPicked
canBeDefaultSystemRoute
dictionary
_routeDescription
stopReceivingUpdatesForSource:
_setReceiveUpdates:forSource:
_shouldNotifyChange:
stateObserver:didReceiveNowPlayingClientChange:
stateObserver:didReceiveNowPlayingPlayerChange:
queryPlayerPath:
isActivePlayer
stateObserver:didReceiveSupportedCommandsChange:isActivePlayer:
stateObserver:didReceivePlayStateChange:isActivePlayer:
stateObserver:didReceivePlaybackQueueChange:isActivePlayer:
stateObserver:didReceivePlaybackQueueCapabilitiesChange:isActivePlayer:
stateObserver:didReceiveNowPlayingInfoChange:isActivePlayer:
stateObserver:didReceiveNotification:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveArtworkUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_handleNowPlayingClientDidChange:
_addNowPlayingNotification:selector:
_handleNowPlayingPlayerDidChange:
_handleSupportedCommandsDidChange:
_handleNowPlayingPlaybackStateChanged:
_handlePlaybackQueueChanged:
_handlePlaybackQueueCapabilitiesChanged:
_handleNowPlayingInfoChanged:
_handleNotification:
_removeNowPlayingNotifications
containsObject:
beginReceivingUpdatesForSource:
_digest:
_coalescingNowPlayingUpdates
_coalescingArtworkUpdates
_observedNowPlayingNotifications
_registeredForNowPlayingCount
_registeredForNowPlayingArtworkCount
_registeredForVolumeAvailabilityCount
_registerAVSystemControllerNotifications
_unregisterAVSystemControllerNotifications
sharedCoordinator
clearDiscoveryModeForDataSource:
setDiscoveryMode:forDataSource:
_mediaServerController
attributeForKey:
uppercaseString
valueForKeyPath:
_oddsShimDataSource
didCancelRoutePicking:
setAttribute:forKey:error:
_notifyDelegateRoutesDidChange
postNotificationName:object:
intValue
sharedAVSystemController
_currentRouteHasVolumeControlDidChangeNotification:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_avSessionMediaServicesResetNotification:
sharedInstance
_descriptionForDiscoveryMode:
numberWithUnsignedInteger:
setObject:forKeyedSubscript:
_updateMediaServerDiscoveryMode
objectEnumerator
currentDiscoveryMode
_dataSourceHashesToDiscoveryModes
_currentDiscoveryMode
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
initWithOptions:
presentWithCompletion:
initWithURL:
shouldInitializeTelevisionBonjourService
mainRunLoop
transactionWaitDurationOnNetworkSend
stop
cryptoSession
_handleClientConnection:
setCryptoEnabled:
supportedProtocolMessages
_verifyClientVersionCompatibility:withError:
encryptionType
cryptoEnabled
_handleDeviceInfoRequest:fromClient:
_handleCryptoPairingMessage:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
event
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handlePlaybackQueueRequestMessage:fromClient:
initWithConnectionState:
clientConnection:didReceiveMessage:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeDevice:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
_handleModifyOutputContextRequestMessage:fromClient:
initWithUnderlyingCodableMessage:identifier:error:
_disconnectClient:
_sendStateUpdateMessageFromSource:predicate:trueCreateBlock:falseCreateBlock:
initWithClient:
localActivePlayerClient
initWithNowPlayingState:
nowPlayingStateDidChange:createMessageBlock:createLegacyMessageBlock:
clients
addPlaybackQueue:forRequest:
initWithName:object:userInfo:
initWithNotification:
registeredToNowPlayingArtworkUpdates
initWithPlaybackQueue:forPlayerPath:
_sendStateUpdateMessageFromSource:usingCreateBlock:
initWithAvailableFlag:
_clientForPairingSession:
initWithPairingData:status:
shouldLogPairingSetupCode
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
_notifyAndDisconnectClients:withError:completion:
setConnectedExternalDevices:
setTelevisionEndpoints:
externalDeviceSleepAssertionOnClientConnectDuration
initWithName:timeout:
registeredToNowPlayingUpdates
registeredVolumeControlAvailabilityUpdates
postClientNotificationNamed:
_findClientIf:
minimumSupportedProtocolVersion
integerValue
minimumSupportedHangdogApplicationVersion
_shouldSendStateUpdateMessageFromSource:toClient:
registeredKeyboardUpdates
encryptedMessageWithState:text:attributes:usingCryptoSession:
initWithInputMode:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
sendMessage:queue:reply:
externalDeviceDisconnectWaitDuration
externalDeviceDisconnectSleepDuration
_handleDeviceInfoChangedNotifcation:
gameControllerConnectionDidInterrupt:
initWithName:packets:playerPath:
messageSentCallbacks
callbackWithBlock:queue:
addCallback:
messagePurgedCallbacks
setTransactionCallback:forName:
localOriginClientRequests:
pairingManager
setDispatchQueue:
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
deleteIdentityWithError:
pairedDevices
stringWithCString:encoding:
_unpair:
sharedLogger
setShouldLog:
initWithKey:data:
initWithDeviceInfo:
isRetrying
isUsingSystemPairing
state
openInState:
isPaired
close
setCryptoSession:
status
pairingData
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
initWithProtocolMessage:
externalDeviceServer:didReceiveCommand:completion:
initWithSendError:results:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
setRegisteredToNowPlayingUpdates:
artworkUpdates
setRegisteredToNowPlayingArtworkUpdates:
volumeUpdates
setRegisteredVolumeControlAvailabilityUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
playerClients
displayName
descriptor
initWithDeviceID:errorCode:
buffer
time
gain
request
addRequest:
initWithDevice:
updatePeer
initWithHiliteMode:
endpoints
contextType
addingOutputDeviceUIDs
removingOutputDeviceUIDs
arrayByAddingObjectsFromArray:
stream:handleEvent:
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
airPlayRemoteControlService:didAcceptConnectionWithInputStream:outputStream:
stateObserver:didReceiveVolumeControlReadyChange:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
connectionBrowser:didAcceptConnectionWithInputStream:outputStream:
textEditingService:textEditingDidBegin:withAttributes:
textEditingService:textDidChange:
textEditingService:attributesDidChange:
textEditingServiceTextEditingDidEnd:
clientDidDisconnect:
clearEndpointForClient:
_broadcastKeyboardMessageWithState:text:attributes:
_handleHiliteModeChanged:
_tvConnectionBrowser
_airPlayRemoteControlService
_streamsRunloop
_connectedClients
_tvEndpoints
_activeReconSessions
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_hidEventManager
_stateObserver
_pinPairingDialog
_sleepObserver
_pairingManager
_clientInvalidatedNotification:
_clientCanBeNowPlayingAppDidChangeNotification:
_playbackQueueCapabilitiesDidChangeNotification:
_addOrigin:emitNotification:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleRequestNowPlayingPlaybackQueue:fromClient:
_handleSetPlaybackQueue:fromClient:
_handleRequestPlaybackQueueCapabilties:fromClient:
_handleSetPlaybackQueueCapabilties:fromClient:
_handleSetHardwareRemoteBehaviorMessage:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
_handleSetNowPlayingAppDisplayIDMessage:fromClient:
_handleSetNowPlayingAppDisplayNameMessage:fromClient:
_handleGetNowPlayingAppPropertiesMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetNowPlayingAppPlaybackStateMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleSetParentApplicationMessage:fromClient:
_handleSetNowPlayingClientVisibilityMessage:fromClient:
_handleSetNowPlayingClientTintColorMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResolvePlayerPath:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleRegisterCustomOriginMessage:fromClient:
_handleRemoveCustomOriginMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleSetNowPlayingClientMessage:fromClient:
_handleGetNowPlayingClientMessage:fromClient:
_handleRemoveNowPlayingClientMessage:fromClient:
_handleGetNowPlayingPlayersMessage:fromClient:
_handleSetNowPlayingPlayerMessage:fromClient:
_handleGetNowPlayingPlayerMessage:fromClient:
_handleRemoveNowPlayingPlayerMessage:fromClient:
_handleContentItemArtworkChangedMessage:fromClient:
activeOriginClient
_onQueue_activeOriginClient
_onQueue_allNowPlayingInfoClients
_onQueue_originClientForOrigin:
addObjectsFromArray:
_onQueue_availableOrigins
resolvePlayerPath:fromClient:
_onQueue_queryPlayerPath:
setOriginClient:
originClient
setIsActiveOrigin:
isActiveOrigin
setIsActiveClient:
existingPlayerClientForPlayerPath:
setPlayerClient:
isActiveClient
setIsActivePlayer:
xpcClientForPlayerPath:
setXpcClient:
xpcClient
availableOrigins
setActiveOrigin:
addRegisteredCustomOrigin:
removeRegisteredCustomOrigin:
_clientsWithRegisteredOrigin:
_removeOrigin:
setCanBeNowPlayingApplication:
transactionServer
removeRequest:
setHardwareRemoteBehavior:
readData:
isLocalOrigin
setDisplayID:
setDisplayName:
postNowPlayingApplicationDisplayNameDidChange:forPlayerPath:
setParentDisplayID:
setVisibility:
setTintColor:
setActivePlayerClient:
removePlayerClientForPlayer:
subscribedContentItems:forRequest:
initWithNotification:userInfo:queue:
postNotification:
postNowPlayingAppIsPlayingDidChange:forPlayerPath:
postNowPlayingAppPlaybackStateDidChange:forPlayerPath:
postSupportedCommandsDidChange:forPlayerPath:
postPlaybackQueueDidChange:forPlayerPath:
postPlaybackQueueCapabilitiesDidChange:forPlayerPath:
postNowPlayingClientStateDidChange:forPlayerPath:
postNowPlayingApplicationDidChangeForPlayerPath:
postActivePlayerDidChangeForPlayerPath:
postPlayerDidRegisterForPlayerPath:
postPlayerDidUnregisterForPlayerPath:
postAnyPlayerIsPlayingDidChange:forPlayerPath:
postAnyAppIsPlayingDidChange:forOrigin:
postClientDidRegisterForPlayerPath:
postClientDidUnregisterForPlayerPath:
postCurrentRouteHasVolumeControl:forPlayerPath:
setOriginClients:
postClientNotificationNamed:forPlayerPath:userInfo:
registeredCustomOrigins
arrayWithArray:
localActiveNowPlayingClient
_removeNowPlayingClient:forOrigin:
setLocalOriginClient:
postOriginsDidRegister:
_onQueue_setActiveOrigin:saveState:
postOriginsDidUnRegister:
setActiveOriginClient:
postActiveOriginDidChange:
_onQueue_savePersistentActiveOrigin:
hasRegisteredCustomOrigin:
nowPlayingClient:clientStateDidChange:forPlayerPath:
nowPlayingClient:displayNameDidChange:forPlayerPath:
nowPlayingClient:displayIDDidChange:forPlayerPath:
nowPlayingClient:activePlayerDidChange:forPlayerPath:
nowPlayingClient:playerDidRegister:forPlayerPath:
nowPlayingClient:playerDidUnregister:forPlayerPath:
nowPlayingClient:anyPlayerIsPlayingDidChange:forPlayerPath:
activeClientPID
localActiveClientPID
activeClientDisplayID
activePlayerIsPlaying
activePlayerPlaybackState
localActivePlayerPlaybackState
activePlayerPath
localActivePlayerPath
allNowPlayingInfoClients
_onQueue_allNowPlayingInfoClientsForOrigin:
isOriginAvailable:
_onQueue_restoredActiveOrigin
_originClients
_nowPlayingApplicationIsPlayingStates
_activeOriginClient
_localOriginClient
stringByAppendingFormat:
_isActiveOrigin
_isActiveClient
_isActivePlayer
_xpcClient
_playerClient
_originClient
_error
_onQueue_displayIDDidChange:
_onQueue_displayNameDidChange:
_onQueue_clientStateDidChange
_onQueue_playerPath
_onQueue_client:
_onQueue_setActivePlayerClient:
setNowPlayingPlayerClient:
_onQueue_activePlayerClient
_onQueue_existingPlayerClientForPlayer:
_onQueue_anyPlayerIsPlaying
_onQueue_playerClientForPlayer:
_onQueue_addPlayer:
existingPlayerClientForPlayer:
setPushStateActivePlayerClient:
setPushStateAnyPlayerIsPlaying:
pushStateActivePlayerClient
pushStateAnyPlayerIsPlaying
parentDisplayID
visibility
tintColor
isSystemApp
nowPlayingPlayerClient
_displayID
_displayName
_parentDisplayID
_pid
_visibility
_tintColor
_systemAppFlagInitialized
_isSystemApp
_playerClients
_pushStateAnyPlayerIsPlaying
_nowPlayingPlayerClient
_pushStateActivePlayerClient
_init
deviceSupportsExternalRemoteControl
_loadMostRecentlyPicked
_restoreNowPlayingClientState
makeObjectsPerformSelector:
_clientDidOpenConnection:
_saveClientsList
keepAlive
setConnectedClientPIDs:
canBeNowPlayingTimestamp
sortedArrayUsingComparator:
insertObject:atIndex:
clientForPlayerPath:
_endApplicationActivity:
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
_beginApplicationActivity:withCompletion:
_postAppActivityNotificationNamed:withActivity:
runAssertionWithName:
initWithConnection:bundleIdentifier:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetCurrentApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleGetCurrentDeviceInfo:fromClient:
_handleGetMediaAppIsInstalledMessage:fromClient:
_handlePing:fromClient:
_handleSetRecentAVOutputDeviceUIDMessage:fromClient:
_handleGetRecentAVOutputDeviceUIDsMessage:fromClient:
_handleSetActiveSystemEndpointUIDMessage:fromClient:
_handleGetActiveSystemEndpointUIDMessage:fromClient:
_handleGetSupportsSystemPairingMessage:fromClient:
_handleCollectDiagnosticMessage:fromClient:
setKeepAlive:
setValue:forKey:
_internalMediaRemoteNotificationIsLegal:
setCurrentApplicationActivity:withCompletion:
currentApplicationActivity
hasPrefix:
applicationProxyForIdentifier:
isInstalled
indexOfObject:inRange:
removeObjectAtIndex:
removeObjectsInRange:
_saveMostRecentlyPicked
createDiagnosticInfo
creatorProcessID
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
removeClientForPID:
applicationStateForApplication:
setActiveClients:
setRunAssertions:
setCurrentAppActivity:
setLocalNowPlayingClient:
setSystemMediaClient:
setFrontmostClient:
setDaemonClient:
initWithObjects:
initWithArray:
setStatus:
_prepareRemoteControlInterfacesForStartedActivity:
shouldPrepareAppPlaybackQueue
_prepareRemoteControlInterfacesForStartingActivity:
_teardownRemoteControlInterfacesForEndedActivity:
connectedClientPIDs
mediaRemoteClientInvalidated:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
mostRecentCanBeNowPlayingClient
postClientNotificationNamed:forPlayerPath:
observeValueForKeyPath:ofObject:change:context:
addRunAssertionWithName:
removeRunAssertion:
_sendMediaRemoteCommand:withOrigin:
remoteControlServer
_listenerConnection
_connectionQueue
_localRoutingDataSource
_nowPlayingServer
_volumeController
_remoteControlServer
_browsableContentServer
_externalDeviceServer
_routingServer
_deviceInfoObserver
_virtualAudioInputServer
_transactionServer
_tasks
_activeClients
_applicationStateMonitors
_runAssertions
_currentAppActivity
_currentAppActivityLock
_mostRecentlyPickedDevices
_shouldSendCommandsDuringPhoneCall
_availableOrigins
initWithBundleIdentifier:flags:reason:name:withHandler:
initWithPID:flags:reason:name:withHandler:
setInvalidationHandler:
_initWithType:bundleID:orPID:
_cancelInvalidationTimer
valid
setName:
_invalidationTimer
_acquired
_processAssertion
_type
initWithFormat:
strongToWeakObjectsMapTable
_channelIDsToInputStreamsMap
_channelIDsToOutputStreamsMap
_started
appendString:
appendFormat:
_appendDescribableArray:toString:withTitle:indentLevel:usingDebugDescription:
_appendDescribableArray:toString:withTitle:
_appendNullableObjectDescription:toString:withTitle:
_appendSubheader:toString:
_appendNullableObjectDescription:toString:withTitle:usingDebugDescription:
string
setAirplaySecuritySettings:
_appendDescribableArray:toString:withTitle:indentLevel:
activeClients
runAssertions
currentAppActivity
nowPlayingPlaybackState
setNowPlayingPlaybackState:
originClients
activeOrigin
enqueuedCommands
remoteControlContexts
queuedInitiatePlaybackMessages
connectedExternalDevices
televisionEndpoints
systemDiscoveryMode
setSystemDiscoveryMode:
airplaySecuritySettings
localReceiverPairingIdentity
setLocalReceiverPairingIdentity:
recordingEndpointClients
setRecordingEndpointClients:
registeredVirtualAudioDevices
setRegisteredVirtualAudioDevices:
usedTransactionMemory
allowedTransactionMemory
transactionWaitDuration
_dateCreated
_localNowPlayingClient
_systemMediaClient
_frontmostClient
_daemonClient
_nowPlayingPlaybackState
_activeOrigin
_enqueuedCommands
_connectedExternalDevices
_televisionEndpoints
_systemDiscoveryMode
_airplaySecuritySettings
_localReceiverPairingIdentity
_recordingEndpointClients
_registeredVirtualAudioDevices
_usedTransactionMemory
_allowedTransactionMemory
addIdentifiersFromContentItems:
addIdentifiers:
setWithArray:
intersectSet:
addIdentifiersFromPlaybackQueue:
subscribedIdentifiers:
clear
_identifiers
setDelegate:queue:
phoneCallDidChangeNotification:
_notifyDelegate:
phoneCallObserver:callDidChange:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
_assertionID
sharedAuthorizationSession
_updateSystemRouteDiscoveryMode
_setPickedRoute:withPassword:options:
applicationPickedRoutes
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
_handleGetLocalReceiverPairingIdentityMessage:fromClient:
_handleGetAirPlaySecuritySettingsMessage:fromClient:
_createAirPlaySecuritySettings
_shouldIgnorePortStatusFailureForRouteWithUID:previouslyCachedRouteUID:
_postRouteStatusDidChangeNotificationForRoute:newStatus:
authorizationTokenType
_passwordDialogForRouteWithName:usingInputType:
buttonIdentifier
textFieldValues
respondWithAuthorizationToken:completionHandler:
setActivePasswordDialog:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
useDebugAVRouteWithoutVolumeControl
_setApplicationPickedRoutes:updateRoutes:forClient:
_postExternalScreenDidChange
_handleAuthenticationFailureForRoute:withOptions:
_handleErrorStatus:forRoute:withOptions:
_routingDataSourcePickableRoutesDidChangeNotification:
_routingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification:
_routingDataSourceExternalScreenDidChangeNotification:
_routingDataSourceRouteStatusDidChangeNotification:
_failedToConnectToOutputDeviceNotification:
outputContextManagerForAllOutputContexts
setAlternateButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
discoveryRunAssertion
setDiscoveryRunAssertion:
containsString:
_presentPasswordDialogForRoute:withOptions:
outputDeviceAuthorizationSession:didProvideAuthorizationRequest:
outputDeviceAuthorizationSession:shouldRetryAuthorizationRequest:reason:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
activePasswordDialog
_routeUIDsToIgnorePortStatusFailures
_reconnaissanceSessions
_mostRecentStatus
_activePasswordDialog
_discoveryRunAssertion
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
port
_connection
_identifier
_port
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
registeredDeviceWithID:
setRecordingState:
registeredDevices
_registeredDevices
_setupNotifications
_tearDownNotifications
_initializeVolumeLimitDataIfNecessary
_internalSetVolumeValue:
_systemVolumeDidChange:
_systemMuteDidChange:
_EUVolumeLimitDidChange:
_EUVolumeLimitEnforcedDidChange:
_volumeFromAVController
floatValue
_updateVolumeValueCache
getVolumeForRoute:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
setVolumeForRouteTo:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
_volumeValue
_volumeLimitDataInitialized
setLastKnownBluetoothAddress:
_txtDataChanged
setBluetoothAddressChangedHandler:
_initializeBonjourServiceWithDeviceInfo:withDelay:
_handleDeviceInfoChangedNotification:
_handleRestrictionChangedNotification:
activate
publishWithOptions:
_txtDataChangedWithUserInfo:
_txtDataChangedWithDeviceInfo:
lastKnownBluetoothAddress
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerExternalDeviceConnections
setIncludesPeerToPeer:
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
_bluetoothClient
_networkService
_lastKnownBluetoothAddress
_handleXPCMessage:
_invalidate
notification
xpcMessage
_createNotificationMessage:userInfo:
setXpcMessage:
queue
optionsData
isActive
setApplicationPickedRoutes:
_runAssertionName
messageHandler
hardwareRemoteBehavior
routeDiscoveryCount
_source
_registeredCustomOrigins
_applicationPickedRoutes
_canBeNowPlayingApplication
_keepAlive
_messageHandler
_bundleIdentifier
_currentTaskAssertion
_hardwareRemoteBehavior
_canBeNowPlayingTimestamp
_routeDiscoveryCount
_routeDiscoveryMode
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_ioDevice
_uniqueIdentifier
initWithName:
errorWithDomain:code:userInfo:
systemApplicationBundleIdentifier
initWithString:
localizedName
command
options
remoteControlInterfaceID
_optionsDictionary
_copyWithZone:usingConcreteClass:
setCommand:
setOptions:
setOriginUID:
setSenderAppDisplayID:
setRemoteControlInterfaceID:
optionValueForKey:
setWithObjects:
copyWithZone:
mutableCopyWithZone:
originatedFromAccessory
originatedFromHID
_commandType
_optionsData
_senderAppDisplayID
_appOptions
_parsedOptionsDict
_cachedProtobufData
setOptionsData:
setOptionValue:forKey:
_routedAppDisplayID
exceptionWithName:reason:userInfo:
sampleRate
_picked
_speakerRoute
_modelName
_dictionary
_indexPathData
_deviceID
_token
_expirationDate
deviceType
deviceSubType
modelID
outputDevices
sharedLocalDevice
requiresAuthorization
_outputDevice
com.apple.mediaremote.MRDRemoteControlServer
v12@?0I4^{__CFData=}8
v16@?0I4^{__CFData=}8@"MRDMediaRemoteClient"12
v4@?0
v8@?0B4
v16@?0@"NSString"4@"MRDRemoteControlContext"8^B12
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
MRXPC_COMMAND_STATUSES_DATA_KEY
v12@?0I4^{__CFArray=}8
v8@?0@"NSObject<OS_xpc_object>"4
v8@?0@"NSNotification"4
com.apple.Fuse
v8@?0I4
v8@?0i4
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
processingPlayCommand
TB,R,N,GisProcessingPlayCommand
remoteControlClients
T@"NSArray",R,N
MRXPC_COMMAND_KEY
MRXPC_COMMAND_OPTIONS_KEY
MRXPC_NOWPLAYING_DISPLAYID_KEY
MRXPC_COMMAND_APP_OPTIONS_KEY
MRXPC_NOWPLAYING_PID_KEY
{%s%@%s}
    
    
routingDataSource
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
currentVolume
Tf,R,N,V_currentVolume
volumeWarningEnabled
TB,R,N,V_volumeWarningEnabled
volumeLimit
Tf,R,N,V_volumeLimit
warningState
TI,N,V_warningState
MRDBrowsableContentAPICoordinatorPersistence
MRDBrowsableContentAPICoordinatorStoredCaseSensitive
v16@?0@"NSString"4@"NSNumber"8^B12
contextID
T@"NSString",R,N,V_contextID
originatingAppDisplayID
T@"NSString",R,N,V_originatingAppDisplayID
routedCommands
MRDAVRoutingDataSourcePickableRoutesDidChangeNotification
MRDAVRoutingDataSourcePickedRouteVolumeControlAvailabilityDidChangeNotification
MRDAVRoutingDataSourceExternalScreenDidChangeNotification
MRDAVRoutingDataSourceRouteStatusDidChangeNotification
MRDAVRoutingDataSourceRouteStatusUserInfoKey
MRDAVRoutingDataSourceAVRouteUserInfoKey
MRDAVRoutingDataSourceVolumeControlAvailableUserInfoKey
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
discoveryMode
TI,N,V_discoveryMode
pickedRoute
T@"MRDAVRoute",R,N,V_pickedRoute
externalScreenType
TI,R,N,V_externalScreenType
currentRouteSupportsVolumeControl
TB,R,N,V_currentRouteSupportsVolumeControl
subclass must implement
bundleID
T@"NSString",R,N,V_bundleID
processID
Ti,R,N,V_processID
v8@?0@"NSDictionary"4
v12@?0^v4^{__CFError=}8
appStateMonitor
T@"BKSApplicationStateMonitor",&,N,V_appStateMonitor
cachedNowPlayingClients
T@"NSSet",&,N,V_cachedNowPlayingClients
cachedNowPlayingContentItem
T^v,N,V_cachedNowPlayingContentItem
serialQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
com.apple.mediaremote.MRDNowPlayingPlayerClient
%@ %p {
  playerPath = %@
  playbackState = %@
  inferredPlaybackState = %@
  supportedCommands = %@
  capabilities = %@
  playbackQueue = %@
  playbackQueueClient = %@
^v8@?0^{__CFData=}4
true
false
v8@?0@"NSArray"4
v20@?0@"MRTransactionDestination"4@"NSArray"8^v12@?<v@?I>16
pushStateIsPlaying
TB,N,V_pushStateIsPlaying
pushStatePlaybackState
TI,N,V_pushStatePlaybackState
playbackState
TI,N
inferredPlaybackState
supportedRemoteControlCommands
supportedRemoteControlCommandsData
T@"NSData",C,N
playbackQueue
T^v,N
playbackQueueCapabilities
T^v,N,V_playbackQueueCapabilities
isPlaying
TB,R,N
hasNowPlayingData
player
T^v,R,N,V_player
playerPath
T^v,R,N,V_playerPath
nowPlayingState
T^v,R,N
playbackQueueClient
T@"MRPlaybackQueuePlayerClient",R,N,V_playbackQueueClient
delegate
T@"<MRDNowPlayingPlayerClientDelegate>",N,V_delegate
T@"<MRDNowPlayingDataSourceDelegate>",N,V_delegate
nowPlayingApplicationDisplayID
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
nowPlayingApplicationPID
Ti,R,N,V_nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
TB,R,N,V_nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
TB,R,N,V_anyApplicationIsPlaying
MediaPlayback
v16@?0@"NSArray"4@"MRAVEndpoint"8@"NSError"12
AVOutputDeviceDiscoverySession
/System/Library/Frameworks/AVFoundation.framework/AVFoundation
AVOutputContextSetOutputDevicePasswordKey
AVOutputContext
airplay
tacl
tsco
screen
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
callback
T@?,C,N,V_callback
timeoutTimer
T@"NSTimer",&,N,V_timeoutTimer
routeUID
T@"NSString",R,N,V_routeUID
MRXPC_INDEXPATH_DATA_KEY
v8@?0@"MRDMediaRemoteClient"4
MRXPC_CLIENT_ERROR_DATA_KEY
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
MRXPC_BUNDLE_ID_KEY
apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
v12@?0I4I8
v16@?0@"NSNumber"4@"MREmulatedGameController"8^B12
credentials
T@"MRPasscodeCredentials",&,N,V_credentials
deviceInfo
T^v,N,V_deviceInfo
supportedMessages
T@"MRSupportedProtocolMessages",&,N,V_supportedMessages
virtualTouchDevices
registeredVirtualVoiceInputDevices
playbackQueueRequests
T@"MRPlaybackQueueClient",R,N,V_playbackQueueRequests
sessionPeer
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
pinPairingToken
T@,&,N,V_pinPairingToken
serverDelegate
T@"<MRDExternalDeviceServerClientConnectionDelegate>",N,V_serverDelegate
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
path
T@"NSString",R,N,V_path
tokenRecords
owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
model
deviceID
AirPlayPortExtendedInfo
route
T@"NSDictionary",R,N,V_route
requiresPIN
modelName
T@"NSString",R,N
deviceIdentifier
canBeDefaultRoute
TB,R,N,V_canBeDefaultRoute
canBeSystemDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
MRXPC_TRANSACTION_DATA
MRXPC_TRANSACTION_NAME
MRXPC_TRANSACTION_DATA_REQUESTED_SIZE
MRXPC_TRANSACTION_ENDED
T@"<MRTransactionDelegate>",N,V_delegate
name
TQ,R,N,V_name
MR_WAIT_FOR_DEBUGGER
com.apple.MediaRemote.transactionServer
transactions
T@"NSMutableArray",R,N,V_transactions
T@"<MRDPinPairingDialogDelegate>",N,V_delegate
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
UserAssignedDeviceName
v12@?0^{__CFString=}4^{__CFDictionary=}8
T@"<MRDDeviceInfoObserving>",N,V_delegate
com.apple.mediaremote.MRDNowPlayingOriginClient
<%@ %p origin=%@ %llu nowPlayingClient%s>
%@ %p {
    origin = %@
    app activity = %@
    override client = %@
    now playing client = %@
    all now playing clients = %@
nowPlayingClient
T@"MRDNowPlayingClient",&,N,V_nowPlayingClient
pushStateNowPlayingClient
T@"MRDNowPlayingClient",&,N,V_pushStateNowPlayingClient
pushStateAnyAppIsPlaying
TB,N,V_pushStateAnyAppIsPlaying
origin
T^v,R,N,V_origin
anyAppIsPlaying
currentRouteHasVolumeControl
TB,N
activeNowPlayingClient
T@"MRDNowPlayingClient",&,N
nowPlayingClients
activity
T@"MRApplicationActivity",&,N,V_activity
overrideClient
T@"MRDMediaRemoteClient",&,N,V_overrideClient
nowPlayingDataSource
T@"MRDNowPlayingDataSource",&,N,V_nowPlayingDataSource
T@"<MRDNowPlayingOriginClientDelegate>",N,V_delegate
nowPlayingDisplayID
T@"NSString",N,V_nowPlayingDisplayID
<%@ %p: %@>
Speaker
AVController_RouteDescriptionKey_RouteUID
/System/Library/PrivateFrameworks/Celestial.framework/Celestial
AVController_RouteDescriptionKey_RouteName
AVController_RouteDescriptionKey_RouteType
AVController_RouteDescriptionKey_IsCurrentlyPickedOnPairedDevice
AVController_RouteDescriptionKey_RouteCurrentlyPicked
AVController_RouteDescriptionKey_AVAudioRouteName
T@"<MRDNowPlayingStateObserverDelegate>",N,V_delegate
Audio/Video
Default
AirPlayPortExtendedInfo.deviceID
AVAudioRoute_Speaker
AVAudioRoute_Headphone
currentDiscoveryMode
TI,R,N,V_currentDiscoveryMode
AVSystemController_CurrentExternalScreenAttribute
AVController_PickableRoutesAttribute
AVSystemController_RouteAwayFromAirPlayAttribute
AVSystemController_CurrentRouteHasVolumeControlNotificationParameter
AVController_RouteDescriptionKey_PortStatusChangeReason
AVSystemController
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_ExternalScreenDidChangeNotification
AVController_PickableRoutesDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVAudioSessionMediaServicesWereResetNotification
AVAudioSession
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
AVSystemController_DiscoveryMode_PresenceScan
AVSystemController_DiscoveryMode_DetailedDiscovery
AVSystemController_DiscoveryMode_None
AVSystemController_DiscoveryModeAttribute
EXTERNAL_DEVICE_AUTHENTICATION_PIN_DIALOG_HEADER
%@ is invalid.
com.apple.MediaRemote.MRExternalDeviceRemoteServer.SerialQueue
B8@?0@"MRDExternalDeviceServerClientConnection"4
@"MRProtocolMessage"4@?0
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
v8@?0^v4
v16@?0{_MRHIDButtonEvent=IIB}4
com.apple.TVRemote
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
com.apple.tvremotecore.xpc
v8@?0@"MRProtocolMessage"4
SBSUndimScreen
SpringBoardServices
v8@?0@"MRTransactionMessage"4
v12@?0@"MRNowPlayingOriginClientRequests"4^{__CFError=}8
v12@?0@"CUPairedPeer"4I8
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_PAIRED_EXTERNAL_DEVICES_DATA
MRXPC_PAIRED_EXTERNAL_DEVICE
MRXPC_EXTERNAL_DEVICE_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
v8@?0@"NSError"4
v12@?0I4^{__CFError=}8
v8@?0^{__CFError=}4
clients
endpoints
T@"<MRDExternalDeviceDelegate>",N,V_delegate
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
enable
disable
<unknown>
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_ERROR_CODE_KEY
MRXPC_HARDWARE_REMOTE_BEHAVIOR_KEY
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
MRXPC_NOWPLAYING_DISPLAYNAME_KEY
MRXPC_PLAYBACK_STATE_KEY
MRXPC_APP_IS_PLAYING_KEY
MRXPC_NOWPLAYING_CLIENT_VISIBILITY_KEY
MRXPC_COLOR_DATA_KEY
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_NOWPLAYING_PLAYER_ARRAY_DATA_KEY
LastNowPlayingAppIsPlayingState
_MRDActiveOriginDataDefaultsKey
activeOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_activeOriginClient
localOriginClient
T@"MRDNowPlayingOriginClient",&,N,V_localOriginClient
activeClientPID
Ti,R,N
localActiveClientPID
activeClientDisplayID
localActiveClientDisplayID
activePlayerIsPlaying
localActivePlayerIsPlaying
activePlayerPlaybackState
TI,R,N
localActivePlayerPlaybackState
activePlayerClient
T@"MRDNowPlayingPlayerClient",R,N
localActivePlayerClient
T@"MRDNowPlayingClient",R,N
localActiveNowPlayingClient
activePlayerPath
localActivePlayerPath
availableOrigins
allNowPlayingInfoClients
T@"NSSet",R,N
allLocalNowPlayingInfoClients
xpcClient
T@"MRDMediaRemoteClient",&,N,V_xpcClient
playerClient
T@"MRDNowPlayingPlayerClient",&,N,V_playerClient
originClient
T@"MRDNowPlayingOriginClient",&,N,V_originClient
T^v,N,V_playerPath
isActiveOrigin
TB,N,V_isActiveOrigin
isActiveClient
TB,N,V_isActiveClient
isActivePlayer
TB,N,V_isActivePlayer
error
TI,N,V_error
localOrigin
TB,R,N,GisLocalOrigin
com.apple.mediaremote.MRDNowPlayingClient
<%@ %p playerPath="%@" playerClients=%@>
%@ %p {
    player path = %@
    display ID = %@
    parent display ID = %@
    pid = %ld
    visibility = %@
    tint color = %@
    current route has volume control = %s
    system app = %s
    any player is playing = %s
    has now playing data = %s
    active player client = %@
    player clients = %@
nowPlayingPlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_nowPlayingPlayerClient
pushStateActivePlayerClient
T@"MRDNowPlayingPlayerClient",&,N,V_pushStateActivePlayerClient
pushStateAnyPlayerIsPlaying
TB,N,V_pushStateAnyPlayerIsPlaying
displayName
T@"NSString",C,N
displayID
parentDisplayID
visibility
tintColor
T(_MRColor={?=ffff}[4f]),N
isSystemApp
anyPlayerIsPlaying
client
T@"MRDNowPlayingPlayerClient",&,N
playerClients
T@"<MRDNowPlayingClientDelegate>",N,V_delegate
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
MostRecentlyUsedAVOutputDeviceUIDs
MRDMediaRemoteActiveSystemEndpointUID
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
com.apple.MRMediaRemote.didLaunch
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v16@?0@"NSNumber"4@"MRDMediaRemoteClient"8^B12
i12@?0@"MRDMediaRemoteClient"4@"MRDMediaRemoteClient"8
com.apple.mediaremote.mediaremoted.notificationQueue
com.apple.mediaremoted
mediaremoted
MRXPC_SOURCE_ID_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_APPLICATION_ACTIVITY_DATA_KEY
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
enabled
disabled
MRXPC_PAIRED_EXTERNAL_DEVICE_ID
com.apple.
MRXPC_APP_INSTALLED_KEY
MRXPC_ROUTE_UID_KEY
MRXPC_OUTPUT_DEVICE_UID_ARRAY_DATA_KEY
com.apple.mediaremote
com.apple.security.exception.mach-lookup.global-name
com.apple.PairingManager
com.apple.PairingManager.RemovePeer
com.apple.PairingManager.Read
com.apple.PairingManager.Write
v16@?0@4@8^B12
_DECNowPlayingRecommendationStarted
_DECNowPlayingRecommendationEnded
T@"NSArray",R,N,V_availableOrigins
nowPlayingServer
T@"MRDNowPlayingServer",R,N,V_nowPlayingServer
remoteControlServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
routingServer
T@"MRDAVRoutingServer",R,N,V_routingServer
transactionServer
T@"MRDTransactionServer",R,N,V_transactionServer
shouldSendCommandsDuringPhoneCall
TB,R,N,V_shouldSendCommandsDuringPhoneCall
localNowPlayingClient
T@"MRDMediaRemoteClient",R,N
systemMediaClient
frontmostClient
daemonClient
%@ is invalid. You must provide a type and bundleID with %@.
<%@ %p "%@"
<%@ %p
%@, type = %@, bundleID = %@, valid = %@>
type
Ti,R,N,V_type
valid
TB,R,N,GisValid
T@"NSString",C,N,V_name
SendCommand
RelayServerMessage
BrowsableContent
Transaction
RestoreState
UnknownAssertionType
com.apple.mediaremoted.%@
BrowsableContentMessage
UnknownType
T@"<MRDAirPlayRemoteControlServiceDelegate>",N,V_delegate
MediaRemote Diagnostic
Collected at: %@
================================================================================
Active Clients
Run Assertions
Current App Activity
Local Now Playing Client
System Media Client
Frontmost Client
Daemon Client
Now Playing Server
Origin Clients
Active Origin
Remote Control Server
Enqueued Commands
Remote Control Contexts
Browsable Content Server
Queued "Initiate Playback" Messages
External Device Server
Connected Devices
Television Endpoints
Routing Server
System Discovery Mode
AirPlay Security Settings
Local Receiver Pairing Identity
Virtual Audio Server
Recording Endpoint Clients
Registered Virtual Audio Devices
Transaction Server
Transactions
Used Transaction Memory: %llu bytes
Allowed Transaction Memory: %llu bytes
Transaction Wait Duration: %f seconds
--------------------------------------------------------------------------------
(None)
%@: %@
    
%@%@:
%@%@
%@(None)
dateCreated
T@"NSDate",R,N,V_dateCreated
activeClients
T@"NSArray",C,N,V_activeClients
runAssertions
T@"NSArray",C,N,V_runAssertions
currentAppActivity
T@"MRApplicationActivity",C,N,V_currentAppActivity
T@"MRDMediaRemoteClient",&,N,V_localNowPlayingClient
T@"MRDMediaRemoteClient",&,N,V_systemMediaClient
T@"MRDMediaRemoteClient",&,N,V_frontmostClient
T@"MRDMediaRemoteClient",&,N,V_daemonClient
nowPlayingPlaybackState
TI,N,V_nowPlayingPlaybackState
originClients
T@"NSArray",C,N,V_originClients
activeOrigin
T^v,N,V_activeOrigin
enqueuedCommands
T@"NSDictionary",C,N,V_enqueuedCommands
remoteControlContexts
T@"NSArray",C,N,V_remoteControlContexts
queuedInitiatePlaybackMessages
T@"NSArray",C,N,V_queuedInitiatePlaybackMessages
connectedExternalDevices
T@"NSArray",C,N,V_connectedExternalDevices
televisionEndpoints
T@"NSArray",C,N,V_televisionEndpoints
systemDiscoveryMode
TI,N,V_systemDiscoveryMode
airplaySecuritySettings
T^v,N,V_airplaySecuritySettings
localReceiverPairingIdentity
T@"NSString",C,N,V_localReceiverPairingIdentity
recordingEndpointClients
T@"NSArray",C,N,V_recordingEndpointClients
registeredVirtualAudioDevices
T@"NSArray",C,N,V_registeredVirtualAudioDevices
T@"NSArray",C,N,V_transactions
usedTransactionMemory
TI,N,V_usedTransactionMemory
allowedTransactionMemory
TI,N,V_allowedTransactionMemory
transactionWaitDuration
Td,N,V_transactionWaitDuration
CXCallObserver
MediaRemote
T@"<MRDPhoneCallObserverDelegate>",N,V_delegate
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
com.apple.airplay.password
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v8@?0@"MSVSystemDialogResponse"4
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_PASSWORD_KEY
MRXPC_ROUTE_OPTIONS_KEY
v12@?0@"MRDAVRoute"4@"NSError"8
Just Got Splash Beats!
MRXPC_ROUTE_HAS_VOLUME_CONTROL_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
MRXPC_PAIRING_IDENTITY_STRING_KEY
MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
Route Discovery
<Unknown>
AppleTV
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
activePasswordDialog
T@"MSVSystemDialog",&,N,V_activePasswordDialog
discoveryRunAssertion
T@"MRDRunAssertion",&,N,V_discoveryRunAssertion
AVOutputDeviceAuthorizationSession
AVOutputDeviceAuthorizationTokenTypePIN
AVOutputContextManagerOutputDeviceKey
AVOutputContextManagerFailureReasonKey
AVOutputContextDeviceConnectionFailureReasonDeviceInUse
AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
AVOutputContextManager
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
connection
TI,R,N,V_connection
identifier
TI,R,N,V_identifier
port
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",N,V_delegate
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
T@"NSArray",R,C,N
registeredDevices
T@"<MRDVirtualAudioInputServerDelegate>",N,V_delegate
RegionalBehaviorEUVolumeLimit
CannotExceedEUVolumeLimit
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_EUVolumeLimitDidChangeNotification
AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
AVSystemController_EUVolumeLimitAttribute
AVSystemController_EUVolumeLimitEnforcedAttribute
AVSystemController_AudioVolumeNotificationParameter
AVSystemController_AudioCategoryNotificationParameter
AVSystemController_AudioVolumeChangeReasonNotificationParameter
AVSystemController_EUVolumeLimitNotificationParameter
AVSystemController_EUVolumeLimitEnforcedNotificationParameter
AVController_RouteDescriptionKey_RouteSubtype
AVSystemController_FullMuteAttribute
CUBluetoothClient
CoreUtils
v8@?0@"NSData"4
local.
lastKnownBluetoothAddress
T@"NSData",C,N,V_lastKnownBluetoothAddress
T@"<MRDTelevisionServerNetworkServiceDelegate>",N,V_delegate
MRDMediaRemoteClientCanBeNowPlayingAppDidChange
MRDMediaRemoteClientDidInvalidateNotification
com.apple.mediaremote.MRDMediaRemoteClient
<%@ %p, bundleIdentifier = %@, pid = %ld, processName = %@>
%@ %p {
    bundle identifier = %@
    pid = %ld
    xpc connection = %@
    current task assertion = %@
    registered custom origins = %@
    playback queue requests = %@
    can be now playing app = %s
    can be now playing timestamp = %@
    route discovery mode = %@
    application picked routes = %@
    hardware remote behavior = %@
    keep alive = %s
Sending remote control command %@
Relaying XPC message %llu to client %@
%@-%@
messageHandler
T@"<MRDXPCMessageHandling>",N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",N,V_delegate
T@"NSObject<OS_xpc_object>",R,N,V_connection
bundleIdentifier
T@"NSString",R,N,V_bundleIdentifier
processName
currentTaskAssertion
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
canBeNowPlayingApplication
TB,N,V_canBeNowPlayingApplication
hardwareRemoteBehavior
TI,N,V_hardwareRemoteBehavior
canBeNowPlayingTimestamp
T@"NSDate",R,N,V_canBeNowPlayingTimestamp
routeDiscoveryCount
TI,R,N,V_routeDiscoveryCount
routeDiscoveryMode
TI,N,V_routeDiscoveryMode
applicationPickedRoutes
T@"NSArray",C,N
isActive
keepAlive
TB,N,V_keepAlive
v16@?0@"NSNumber"4@"NSValue"8^B12
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
deviceDescriptor
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
uniqueIdentifier
TQ,R,N,V_uniqueIdentifier
ioDevice
T^{__IOHIDUserDevice=},R,N,V_ioDevice
<%@ %p '%@'>
B12@?0r*4@"NSObject<OS_xpc_object>"8
A reply object could not be created.
A reply connection could not be obtained.
SBSCopyFrontmostApplicationDisplayIdentifier
CPCopyBundleIdentifierFromAuditToken
AppSupport
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
com.apple.mediaremoted.systemServiceAvailability
<%@ %p, command = %@, playerPath = %@,  remote control interface = %@>
<%@ %p, command = %@, playerPath = %@, remote control interface = %@, options = %@>
iapd
iap2d
BTAvrcp
com.apple.rcd
com.apple.AVRCP
commandType
TI,R,N,V_commandType
optionsData
T@"NSData",R,N
senderAppDisplayID
T@"NSString",R,N,V_senderAppDisplayID
destinationAppDisplayID
destinationAppProcessID
remoteControlInterfaceID
appOptions
TI,R,N,V_appOptions
protobufData
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
shouldImplicitlyLaunchApplication
originatedFromAccessory
originatedFromHID
avrcpCommand
TB,R,N,GisAVRCPCommand
TI,D,N
T@"NSData",C,D,N
T^v,D,N
T@"NSDate",&,D,N
T@"NSString",C,D,N
Ti,N
<%@ %p, command = %@, routedToApp = %@>
routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
%@ is abstract
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_type
T@"NSString",R,N,V_modelName
picked
TB,R,N,GisPicked,V_picked
speakerRoute
TB,R,N,GisSpeakerRoute,V_speakerRoute
extendedInfo
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
dictionary
T@"NSDictionary",R,N,V_dictionary
indexPathData
T@"NSData",R,N,V_indexPathData
T@"NSString",R,N,V_deviceID
token
T@"NSString",R,N,V_token
expirationDate
T@"NSDate",R,N,V_expirationDate
T@"NSDate",C,D,N
<%@ %p outputDevice = %@>
RouteUID
RouteName
RouteRequiresAirPlayPIN
PortHasPassword
Wireless
AirTunes
Bluetooth
CarPlay
RouteType
AVAudioRouteName
outputDevice
T@"AVOutputDevice",R,N,V_outputDevice
AVOutputDevice
AirPlay
BuiltIn
Wired
Standard
Headphones
Headset
Receiver
LineOut
DisplayPort
HDMI
LowEnergy
SPDIF
Command ignored because of device state: %{public}@
Broadcasting command to client: <%@>
Broadcast command timedout after %lf seconds
Broadcast command timed out
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Command details: %{mediaremote:command}.*P
Received broadcast command from client %{public}@: %{public}@
Setting supported commands for %{public}@
ERROR: now playing client could not be found for setting supported commands
Error setting up playback initiation for %@.
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
The client that registered the custom origin %{public}@ no longer exists, so this command will be ignored.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ replied to command with statuses: %{public}@
Client %{public}@ failed to reply to command (SendCommandErr = %u)
Destination app %{public}@ is available but not ready for command %{public}@ -- Enqueueing command for later execution.
Destination app %{public}@ not available for command %{public}@, and command requested a launch. Enqueueing command for later execution.
Launch successful. Creating task assertion for %{public}@ to ensure command handler registration on launch.
Task assertion %{public}@ for post-launch setup is invalid.
Failed to launch application %{public}@. Clearing queued commands.
Failed to launch application %{public}@ instead launching %{public}@
Attempting to send previously queued play command %{public}@ to client %{public}@.
Sending previously queued command %{public}@ to client %{public}@.
Skipping previously queued command %{public}@ because it timed out (enqueued for %f seconds)
Playback state changed after play command: sending previously queued commands
A different app started playing. Cancelled timer to send queued play command to %{public}@
Sending queued command has timed out after %ld attempts.
Attempt #%ld to send previously queued command to client %{public}@
Using previously routed app %{public}@ for context %{public}@
No context for context-sensitive command %{public}@
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because a phone call or FaceTime is active.
[iOSSim Data Source] Failed to load playback queue: %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is deserializing SupportedCommands: %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is setting SupportedCommands
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is setting PlaybackQueue %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is setting inferred playback state from %{public}@ to %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" setting playback state from %{public}@ to %{public}@
[MRDNowPlayingPlayerClient] Client at path "%{public}@" is setting PlaybackQueueCapabilities with: %{public}@
[MRDNowPlayingPlayerClient] Updating playerPath: %{public}@ -> %{public}@
[MRDNowPlayingPlayerClient] %@ isPlayingState changed to %@
[MRDNowPlayingPlayerClient] %@ playbackState changed from %{public}@ to %{public}@
[MRDNowPlayingPlayerClient] Artwork changed for %@ requesting new artwork for cache
[MRDNowPlayingPlayerClient] %{public}@ updating cache with delta %{public}@
[ODDSRouting] Setting system discovery mode to %{public}@
[ODDSRouting] Setting picked system route to: %{public}@ with password "%@"
[ODDSRouting] Route is an output device-based route. Setting the following device on the output context: %{public}@
[ODDSRouting] Route is not an output device-based route. Beginning search for device matching UID "%{public}@"
[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@
[ODDSRouting] Could not find output device for route %{public}@ - error = %{public}@
[ODDSRouting] Requested to pick speaker route. Clearing output devices from context %{public}@
[ODDSRouting] Route is not an output device-based route and a route UID is not available. Cannot pick route.
[ReconnaissanceSession] Beginning search with timeout %f
[ReconnaissanceSession] Cancelling search for session %{public}@
[ReconnaissanceSession] Session timed out after %f seconds
[ReconnaissanceSession] Found route matching query: %@
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[ExternalDeviceConnection(Server)] Added gamecontroller with deviceID: %llu
[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDTransaction] New Transaction: %p %@ for playerPath %@
[MRDTransaction] Dealloc Transaction: %p %@ for playerPath %@
[MRDTransaction] Canceling %@ transaction for playerPath %@
[MRDTransaction] %@ %@ received interrupted/invalid connection
[MRDTransaction] %p %@ received bytes %ld
[MRDTransaction] %p %@ received end signal received
%p No memory available, waiting %lf and requesting again
%p Checking for available memory
[MRDTransaction] %p %@ could not extract connection to query
[MRDTransaction] %p %@ could not create reply to qeury
[MRDTransaction] %p %@ querying for %ld bytes
[MRDTransaction] %p %@ ending with %ld bytes remaining
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %llu
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] Memory Usage: %ld + %ld -> %ld
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ sending client %@ subscribed packets %@
Attempting to migrate legacy identifier %@
Creating deviceInfo file %@
Generated deviceID %@
Failed to create deviceInfo file %@: %@
Failed to create deviceInfo file %@
DeviceID already exists but replacing with legacy %@ -> %@
Changing currentRouteHasVolumeControl to %{public}@ for client %{public}@
Setting client %{public}@ (pid = %d) as inferred now playing application.
Setting client %{public}@ (pid = %d) as now playing application override.
Setting application activity %{public}@
Creating MRDNowPlayingClient for "%{public}@"
ActiveNowPlayingClient changed from %{public}@ to %{public}@
Reloaded now playing app from datasource: %{public}@
Found now playing app %{public}@
[TelevisionStateObserver] supportedCommands changed but could not query %{public}@
[TelevisionStateObserver] playbackState changed but could not query %{public}@
[TelevisionStateObserver] playbackQueue changed but could not query %{public}@
[TelevisionStateObserver] playbackQueueCapabilities changed but could not query %{public}@
[TelevisionStateObserver] nowPlayingInfo changed but could not query %{public}@
[TelevisionStateObserver] Registering for Now Playing Updates
[TelevisionStateObserver] Unregistering for Now Playing Updates
[TelevisionStateObserver] Registering for Now Playing Artwork Updates
[TelevisionStateObserver] Unregistering for Now Playing Artwork Updates
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %i for route %@
[MediaServerAVRoutingDataSource] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications and resetting cache
Updating media server route discovery mode to %{public}@
Error setting AVSystemController discovery mode. %{public}@
[ExternalDeviceServer] Removing television endpoint for client %{public}@
Received device info: %{public}@
[ExternalDeviceServer] ERROR: client is incompatible
[ExternalDeviceServer] ERROR: client not authorized
[ExternalDeviceServer] Unknown message attempting to be handled
[ExternalDeviceServer] MRExternalClientConnection did disconnect client: %{public}@
[ExternalDeviceServer] Sending nowPlayingClient Did Change %@
[ExternalDeviceServer] Sending nowPlayingPlayer Did Change %@
[ExternalDeviceServer] Sending playbackQueue Did Change %@
[ExternalDeviceServer] Sending playbackQueueArtwork Did Change %@
[ExternalDeviceServer] Sending nowPlayingInfo Did Change %@
[ExternalDeviceServer] Sending PlaybackQueueCapabilities Did Change %@
[ExternalDeviceServer] Sending supportedCommands Did Change %@
[ExternalDeviceServer] Sending playbackState Did Change %@
[ExternalDeviceServer] Sending notification Did Change %@
[ExternalDeviceServer] Sending volumeControlReady Did Change %@
[ExternalDeviceServer] Exchanging %llu bytes of crypto pairing data with client "%{public}@"
[ExternalDeviceServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Remote Passcode: %@
[ExternalDeviceServer] Returning OSStatus code %d back to %{public}@
[ExternalDeviceServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %{public}@
[ExternalDeviceServer] Successfully opened security session with peer %{public}@
[ExternalDeviceServer] Client connected: %{public}@
[ExternalDeviceServer] Attempting to disconnect client: %{public}@
[ExternalDeviceServer] Removing client: %{public}@
[ExternalDeviceServer] Unregistering client dependencies: %{public}@
[ExternalDeviceServer] Client %{public}@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Client %{public}@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[ExternalDeviceServer] Setting game controller input mode to %{public}@
[ExternalDeviceServer] Error unpairing device: %{public}@ error: %{public}@
[ExternalDeviceServer] Client retain count is %lu
[ExternalDeviceServer] Notifying and Disconnecting client %{public}@. Error: %{public}@
[ExternalDeviceServer] Notify and disconnect notifying client %{public}@
[ExternalDeviceServer] Notify and disconnect response from client %{public}@
[ExternalDeviceServer] Notify and Disconnect timeout after %lf seconds
[ExternalDeviceServer] Sleeping for %lf seconds
[ExternalDeviceServer] Continuing after %lf second sleep
[ExternalDeviceServer] %@Transaction received packets %@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ to playerPath: %{public}@
[ExternalDeviceServer] %{public}@ Transaction sending client %{public}@ subscribed packets %{public}@ for playerPath: %{public}@
[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...
[ExternalDeviceServer] No active connection to disconnect
[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing
[ExternalDeviceServer] Error deleting pairing identity. %{public}@
[ExternalDeviceServer] Adding television endpoint %{public}@
[ExternalDeviceServer] Removing television endpoint %{public}@
[ExternalDeviceServer] Creating new PairingSession for client %{public}@ from message %{public}@
[ExternalDeviceServer] Processing %lld bytes of crypto pairing data from client %{public}@
[ExternalDeviceServer] Error processing pairing exchange data. %{public}@
[ExternalDeviceServer] Handling pairing failure with OSStatus = %d
[ExternalDeviceServer] Received command: %{public}@ with identifier %{public}@
[ExternalDeviceServer] Command details: %{mediaremote:command}.*P
[ExternalDeviceServer] Responding to command: %{public}@ with identifier %{public}@ with statuses %{public}@
[ExternalDeviceServer] Registering HID device with descriptor: %{public}@
[ExternalDeviceServer] Registered new virtual touch device with ID %llu
[ExternalDeviceServer] Begin nowPlayingState Sync for client %@
[ExternalDeviceServer] Begin nowPlayingArtwork Sync for client %@
[ExternalDeviceServer] Registering new virtual voice input device with descriptor: %{public}@
[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@
[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u
[ExternalDeviceServer] Changing name to %{public}@
[ExternalDeviceServer] Could not set device name to %{public}@
[ExternalDeviceServer] Sending custom data %{public}@ to endpoint %{public}@
[ExternalDeviceServer] Received request to modify output context: %{public}@
[ExternalDeviceServer] Invalid context type for modify request: Auxiliary
[ExternalDeviceServer] Invalid context type for modify request: iTunesAudio
[ExternalDeviceServer] Error adding devices to output context: %{public}@
[ExternalDeviceServer] Error removing devices from output context: %{public}@
[ExternalDeviceServer] Successfully executed output context modification.
[ExternalDeviceServer] Failed to search for devices pertinent to output context modification: %{public}@
Recieved Now Playing message %llu from client %@ : %@
Now Playing message with id %llu not handled.
Resolving %{public}@ -> %{public}@ for client %@
Resolving Exisiting %{public}@ -> %{public}@
Client %{public}@ requesting available origins to %{public}@
Client %{public}@ requesting to set active origin to %{public}@
Client %{public}@ requesting active origin to %{public}@
Client %{public}@ requesting to register origin %{public}@
Client %{public}@ requesting to unregister origin %{public}@
Not unregistering origin because is local origin
Not unregistering origin because other clients have a reference %{public}@
Client %{public}@ requesting to %{public}@ itself as now playing app override
Client %{public}@ requesting to %{public}@ now playing app override to %{public}@
Could not set override client. Client %{public}@ not found.
Added %{public}@ as possible now playing application.
Cleared %{public}@ as possible now playing application.
%{public}@ is requesting playbackQueue for %{public}@ with request %{public}@
PlaybackQueue request %{public}@ being handled by cache
PlaybackQueue request %{public}@ being handled as is
PlaybackQueue request %{public}@ relaying to client %{public}@
PlaybackQueue response received for request %{public}@
PROFILE: took %lf seconds to decode playbackQueue
PlaybackQueue request %{public}@ received Error: %{public}@
Setting hardware remote behavior to %{public}@ for client %{public}@
Error: attempted to set the now playing app for the local origin. The local now-playing app is read-only, and determined by mediaserverd.
Error: attempted to set now playing app for an origin that wasn't registered. %@
Tried to set display name for the local origin. Ignoring.
Unable to set playback state. No now playing client found for %@
Could not set parent application for client %@. Failed to find or create now playing client.
Could not set now playing client visibility for client %@. Failed to find or create now playing client.
Could not set app tint color for client %@. Failed to find or create now playing client.
Received video thumbnails request from %{public}@ for %{public}@
Relaying video thumbnails request to %{public}@
Client not found for video thumbnails request
Received audio amplitude samples request from %{public}@ for %{public}@
Relaying audio amplitude samples request to %{public}@
Client not found for audio amplitude samples request
Received lyrics event from client %{public}@ and sending to %{public}@
Relaying lyrics event to %{public}@
No client available for lyrics event
%{public}@ is requesting to resolve playerPath %{public}@ -> %{public}@
Tried to set now playing app for the local origin. Ignoring.
Adding new origin %@
Removing Origin %@
Removing active origin %@. Setting local origin to active origin
Setting active origin from %@ to %@
Persisting active origin %@
Changing now playing display ID from %{public}@ to %{public}@ for client %{public}@
Changing now playing display name from %{public}@ to %{public}@ for client %{public}@
Changing now playing parent display ID from %{public}@ to %{public}@ for client %{public}@
Creating MRDNowPlayingPlayerClient for "%{public}@"
ActiveNowPlayingPlayer did change from %{public}@ to %{public}@
XPC Error: %s
Stopping MediaRemote server
Adding client %@
Removing client %@
Posting Notification %{public}@
UserInfo %{public}@
App activity status did change: %@
Remaining run assertions: %@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Received message %llu from client %@ : %@
Server message with id %llu not handled.
NULL source ID string sent to %@
Received request to distribute notification "%{public}@" from %{public}@
Client %{public}@ attempted to post an illegal notification (%{public}@); ignoring.
Warning: attempted to begin a non-existent app activity.
Warning: Ignoring activity because a Play Command is being processed
Ending activity %@
Warning: attempted to end non-existent app activity.
Get system volume: returning %f from volume controller %{public}@
Set system volume: overriding volume warning
Set system volume: setting volume to %f (warning state = %{public}s)
Adjust system volume: stepping volume by %f (warning state = %{public}s)
Disallowed bundle ID requested for installation status: %{public}@
No app bundle ID provided in call to GetMediaAppIsInstalled message
** Beginning Diagnostic Collection **
** Collecting Diagnostic for Main Server **
** Collecting Diagnostic for Now Playing Server **
** Collecting Diagnostic for Remote Control Server **
** Collecting Diagnostic for Browsable Content Server **
** Collecting Diagnostic for External Device Server **
** Collecting Diagnostic for Routing Server **
** Collecting Diagnostic for Virtual Audio Input Server **
** Collecting Diagnostic for Transaction Server **
** Diagnostic Complete **
Client %@ invalidated.
Ending app activity for invalidated client %{public}@
Beginning new app activity %{public}@...
New app activity has begun. %{public}@
Error preparing application activity. %{public}@
Ending app activity %{public}@
Restoring client pids %@
Failed to acquire process assertion for task %@.
Task assertion %@ was invalidated.
Timed out while waiting to acquire process assertion for task %@.
Began task assertion: %@
Invalidating task assertion: %@
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
[AVRoutingServer] Route change requested for AV server's cached routes with UID %{public}@
[AVRoutingServer] Switching to route with UID %{public}@
[AVRoutingServer] Received output device authorization request: %{public}@
[AVRoutingServer] Responding to authorization request with password: %@
[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.
[AVRoutingServer] Authorization token failed for %{public}@
[AVRoutingServer] User cancelled authorization request for %{public}@
[AVRoutingServer] Ignoring authorization request because a password dialog is already being shown.
[AVRoutingServer] Ignoring authorization request because the request to pick indicated that we should ignore authorization failures.
[AVRoutingServer] Client %{public}@ changed route discovery mode to %{public}@.
[AVRoutingServer] %{public}@ requesting to pick route: %{public}@, options: %{public}@
[AVRoutingServer] %{public}@ requesting to pick route with UID: %{public}@, options: %{public}@
[AVRoutingServer] Beginning AV reconnaissance session for route with UID: %{public}@
[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ -- %{public}@
[AVRoutingServer] AV reconnaissance session failed to find route with UID %{public}@ (unknown error)
[AVRoutingServer] Did not receive any pickable route information from the XPC message.
[AVRoutingServer] Requesting to unpick AirPlay routes
[AVRoutingServer] Received SetApplicationPickedRoutes message with route descriptions: %{public}@
[AVRoutingServer] Ignoring VAD port authentication failure.
[AVRoutingServer] Output device connection failure: %{public}@
[AVRoutingServer] Updating system route discovery mode to %{public}@
[AVRoutingServer] Discovery enabled. Starting run assertion: %{public}@
[AVRoutingServer] Discovery ended. Clearing run assertion %{public}@
[AVRoutingServer] AirPlay Error %d: %{public}@: %{public}@
[AVRoutingServer] AirPlay Error %d: Ignoring because error for "%{public}@" because the status code has not changed and already prompted user.
[AVRoutingServer] RouteUIDs ignored for port status failures: %{public}@
[AVRoutingServer] Failed to pick route %{public}@
Did receive System will Sleep notification.
Did receive System Did Wake notification.
Did recieve any power callback.
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
[MediaServerVolumeController] AVAudioSessionMediaServicesWereReset notification received -- re-registering notifications
[MRDTelevisionServerNetworkService] Bluetooth address changed to %@
[MRDTelevisionServerNetworkService] Starting network service: %@
[MRDTelevisionServerNetworkService] Stopping network service %@
[MRDTelevisionServerNetworkService] Did accept connection with service: %{public}@ input: %@ output: %@
[MRDTelevisionServerNetworkService] Remote server advertisement success with service: %@
[MRDTelevisionServerNetworkService] Remote server advertisement failed with service: %@
[MRDTelevisionServerNetworkService] %@
[MRDTelevisionServerNetworkService] Retrying after 30s...
[MRDTelevisionServerNetworkService] Updating txtData because deviceInfo changed...
[MRDTelevisionServerNetworkService] Updating txtData because device restrictions changed...
[MRDTelevisionServerNetworkService] Updating txtData: %{public}@
[MRDTelevisionServerNetworkService] Initializing Bonjour Service in %lf seconds
[MRDTelevisionServerNetworkService] Stopping Bonjour Service
[MRDTelevisionServerNetworkService] Initializing Bonjour Service
Configuring Television NetService with includesPeerToPeer = %s
Client switched route discovery mode to: %lu
Taking process assertion for client %@.
Failed to acquire task assertion for client %@.
Error sending remote control command to %{public}@. %{public}s
Failed to acquire process assertion for client %@.
Invalidating process assertion %@
Custom origin registered: %@
Custom origin removed: %@
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
Error launching application. %@
Error blessing %@ for playback initialization. %@
System service availability check timed out.
MRDRemoteControlServer
MRDXPCMessageHandling
NSObject
MRDDiagnosticCollecting
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDiOSSimulatorNowPlayingDataSource
MRDNowPlayingPlayerClient
MRDNowPlayingDataSource
MRDOutputDeviceRoutingDataSource
MRDPinPairingDialog_ATV
MRDAVReconnaissanceSession
MRDBrowsableContentServer
MRDExternalDeviceServerClientConnection
MREmulatedGameControllerDelegate
MRDExternalDeviceCredentialDatabase
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDBackgroundTasks
MRTransaction
MRDTransactionServer
MRTransactionDelegate
MRDPinPairingDialog
MRHID
MRDDeviceInfoObserver
MCProfileConnectionObserver
MRDNowPlayingOriginClient
MRDNowPlayingDataSourceDelegate
MRDMediaServerAVRoute
MRDNowPlayingStateObserver
MRDMediaServerAVRoutingDataSource
_MRDMediaServerStateCoordinator
MRDPinPairingDialog_CFUN
MRDAirPlayInputStream
MRDAirPlayOutputStream
MRDExternalDeviceRemoteServer
NSStreamDelegate
MRCryptoPairingSessionDelegate
MRDAirPlayRemoteControlServiceDelegate
MRDExternalDeviceServerClientConnectionDelegate
MRDNowPlayingStateObserverDelegate
MRDPinPairingDialogDelegate
MRDSleepObserverDelegate
MRDTelevisionServerNetworkServiceDelegate
MRDTextEditingServiceDelegate
MRExternalClientConnectionDelegate
MRDNowPlayingServer
MRDNowPlayingClientDelegate
MRDNowPlayingOriginClientDelegate
MRDNowPlayingPlayerClientDelegate
MRDNowPlayingServerResult
MRDNowPlayingClient
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDExternalDeviceDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDDeviceInfoObserving
MRDTaskAssertion
MRDAirPlayRemoteControlService
MRDDiagnostic
MRDContentItemClient
MRDPhoneCallObserver
CXCallObserverDelegate
MRDSleepAssertion
MRDAVRoutingServer
AVOutputDeviceAuthorizationSessionDelegate
MRDSleepObserver
MRDVirtualAudioInputServer
MRDMediaServerVolumeController
MRDTelevisionServerNetworkService
NSNetServiceDelegate
MRDMediaRemoteClient
MRDVirtualTouchDevice
MRDRunAssertion
MRDRemoteControlCommand
NSCopying
NSMutableCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDExternalDeviceAuthTokenRecord
MRDMutableExternalDeviceAuthTokenRecord
MRDAVOutputDeviceRoute
B12@0:4@8
#8@0:4
@8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v16@0:4@8@12
v16@0:4@"NSObject<OS_xpc_object>"8@"MRDMediaRemoteClient"12
v12@0:4@8
v12@0:4@"MRDDiagnostic"8
v8@0:4
v16@0:4@8@?12
v20@0:4@8@12@?16
v20@0:4@8@12B16
v20@0:4@8@12@16
@12@0:4@8
@"NSObject<OS_dispatch_queue>"
@"NSMutableDictionary"
@"MRDPhoneCallObserver"
@12@0:4^{_NSZone=}8
B16@0:4f8^@12
f8@0:4
v12@0:4I8
@"MRDAVRoutingDataSource"
I12@0:4@8
v16@0:4I8@12
@12@0:4I8
@16@0:4@8@12
@"NSMutableArray"
@"NSString"
@16@0:4@8I12
B16@0:4@8@12
B20@0:4@8@12I16
B12@0:4I8
@"MRDAVRoute"
v12@0:4^{__IOHIDEvent=}8
v16@0:4I8I12
^{__IOHIDEventSystemClient=}
@16@0:4@8i12
i8@0:4
v12@0:4^v8
^v8@0:4
@"BKSApplicationStateMonitor"
@"NSSet"
@12@0:4^v8
v12@0:4B8
@"NSArray"
@"NSData"
@"MRPlaybackQueuePlayerClient"
@"<MRDNowPlayingPlayerClientDelegate>"
@"<MRDNowPlayingDataSourceDelegate>"
@"AVOutputDeviceDiscoverySession"
v16@0:4@8B12
v20@0:4d8@?16
@?8@0:4
v12@0:4@?8
@"NSTimer"
v16@0:4@?8@12
v24@0:4@8{?=^QI}12@20
@"MRDBrowsableContentAPICoordinator"
v16@0:4@8^v12
v16@0:4@"MREmulatedGameController"8^v12
@20@0:4@8@12@16
Q12@0:4@8
@16@0:4Q8
v16@0:4Q8
Q16@0:4Q8
v20@0:4{_MRHIDButtonEvent=IIB}8
{_MRHIDButtonEvent="usagePage"I"usage"I"down"B}
@"MRPasscodeCredentials"
@"MRSupportedProtocolMessages"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDExternalDeviceServerClientConnectionDelegate>"
^{sqlite3=}
@"MRDMediaRemoteClient"
@"NSDictionary"
@24@0:4Q8@16@20
@20@0:4Q8^v16
d8@0:4
Q8@0:4
@"MRDTaskAssertion"
@"<MRTransactionDelegate>"
v32@0:4@8@12I16I20@24@?28
v16@0:4@8I12
v32@0:4@"MRTransaction"8@"NSArray"12I16I20@"NSObject<OS_dispatch_queue>"24@?<v@?>28
v16@0:4@"MRTransaction"8I12
I12@0:4@"MRTransaction"8
v12@0:4i8
v20@0:4^v8^v12^v16
v20@0:4@8^v12^v16
@"<MRDPinPairingDialogDelegate>"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8@0:4
@32@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8
v16@0:4@"MCProfileConnection"8@"NSDictionary"12
^{MGNotificationTokenStruct=}
@"<MRDDeviceInfoObserving>"
v12@0:4@"MRDNowPlayingDataSource"8
@12@0:4i8
@"MRApplicationActivity"
@"MRDNowPlayingDataSource"
@"<MRDNowPlayingOriginClientDelegate>"
@"MRDNowPlayingClient"
@"MRDAVRouteExtendedInfo"
v16@0:4B8i12
v16@0:4@8:12
@"<MRDNowPlayingStateObserverDelegate>"
@"MRDOutputDeviceRoutingDataSource"
v16@0:4@"NSStream"8I12
v24@0:4@8d12@?20
v16@0:4@"MRCryptoPairingSession"8@"NSData"12
v16@0:4@"MRCryptoPairingSession"8@"NSString"12
v12@0:4@"MRCryptoPairingSession"8
v24@0:4@"MRCryptoPairingSession"8d12@?<v@?@"NSString">20
v16@0:4@"MRCryptoPairingSession"8@"NSError"12
v20@0:4@"MRDAirPlayRemoteControlService"8@"NSInputStream"12@"NSOutputStream"16
v24@0:4@8Q12^v20
v24@0:4@"MRDExternalDeviceServerClientConnection"8Q12^v20
v20@0:4@8^v12B16
v16@0:4@"MRDNowPlayingStateObserver"8^v12
v20@0:4@"MRDNowPlayingStateObserver"8^v12B16
v16@0:4@"MRDNowPlayingStateObserver"8@"NSNotification"12
v16@0:4@"MRDNowPlayingStateObserver"8B12
v16@0:4@"MRDPinPairingDialog"8@"MRDExternalDeviceServerClientConnection"12
v20@0:4@"MRDPinPairingDialog"8@"MRDExternalDeviceServerClientConnection"12B16
v16@0:4@"MRDSleepObserver"8@?<v@?>12
v12@0:4@"MRDSleepObserver"8
v20@0:4@"MRDTelevisionServerNetworkService"8@"NSInputStream"12@"NSOutputStream"16
v20@0:4@"MRDTextEditingService"8@"NSString"12@"MRTextEditingAttributes"16
v16@0:4@"MRDTextEditingService"8@"NSString"12
v16@0:4@"MRDTextEditingService"8@"MRTextEditingAttributes"12
v12@0:4@"MRDTextEditingService"8
v16@0:4@"MRExternalClientConnection"8@"MRProtocolMessage"12
v12@0:4@"MRExternalClientConnection"8
v20@0:4^v8@?12@?16
@12@0:4@?8
B16@0:4@8^@12
v24@0:4i8@?12@?16@?20
v16@0:4i8@?12
B16@0:4i8@12
v20@0:4I8@12@16
v16@0:4B8B12
v24@0:4{_MRHIDButtonEvent=IIB}8@20
v44@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8Q32@40
@"MRDTelevisionServerNetworkService"
@"MRDAirPlayRemoteControlService"
@"NSRunLoop"
@"NSMutableSet"
@"MRDSystemHIDEventManager"
@"MRDNowPlayingStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"CUPairingManager"
@"<MRDExternalDeviceDelegate>"
v20@0:4@8@12^v16
v20@0:4@8B12^v16
v20@0:4@"MRDNowPlayingClient"8^v12^v16
v20@0:4@"MRDNowPlayingClient"8@"NSString"12^v16
v20@0:4@"MRDNowPlayingClient"8B12^v16
v20@0:4@"MRDNowPlayingOriginClient"8^v12^v16
v20@0:4@"MRDNowPlayingOriginClient"8B12^v16
v20@0:4@"MRDNowPlayingOriginClient"8@"MRDNowPlayingClient"12^v16
v16@0:4@"MRDNowPlayingOriginClient"8B12
v20@0:4@8I12^v16
v20@0:4@"MRDNowPlayingPlayerClient"8B12^v16
v20@0:4@"MRDNowPlayingPlayerClient"8I12^v16
v20@0:4@"MRDNowPlayingPlayerClient"8@"NSData"12^v16
v20@0:4@"MRDNowPlayingPlayerClient"8^v12^v16
^v16@0:4^v8@12
^v12@0:4^v8
v16@0:4B8^v12
v16@0:4I8^v12
v16@0:4^v8^v12
B16@0:4^v8B12
B12@0:4^v8
v16@0:4^v8B12
@"MRDNowPlayingOriginClient"
@"MRDNowPlayingPlayerClient"
(_MRColor={?=ffff}[4f])8@0:4
v24@0:4(_MRColor={?=ffff}[4f])8
^v12@0:4B8
(_MRColor=""{?="red"f"green"f"blue"f"alpha"f}"data"[4f])
@"<MRDNowPlayingClientDelegate>"
v12@0:4@"MRDMediaRemoteClient"8
v20@0:4@"MRDExternalDeviceRemoteServer"8@"MRDRemoteControlCommand"12@?<v@?I^{__CFArray=}>16
v20@0:4@8I12@16
v20@0:4@"MRDVirtualAudioInputServer"8I12@"MRDVirtualAudioInputServerDevice"16
v16@0:4@"MRDPhoneCallController"8@"MRDRemoteControlCommand"12
v16@0:4@"MRDDeviceInfoObserver"8^v12
I12@0:4I8
v20@0:4@8^v12@16
v24@0:4@8@12@16^v20
@"NSObject<OS_xpc_object>"
@"MRDNowPlayingServer"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDExternalDeviceRemoteServer"
@"MRDAVRoutingServer"
@"MRDDeviceInfoObserver"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"MRMutableApplicationActivity"
@"NSLock"
@20@0:4i8@12i16
@16@0:4i8@12
@16@0:4i8i12
@"NSObject<OS_dispatch_source>"
@"BKSProcessAssertion"
^{NSMapTable=#}
@"<MRDAirPlayRemoteControlServiceDelegate>"
v24@0:4@8@12@16B20
v24@0:4@8@12@16I20
v28@0:4@8@12@16I20B24
v16@0:4d8
@"NSDate"
v16@0:4@"CXCallObserver"8@"CXCall"12
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
@20@0:4@8d12
B20@0:4@8@12@16
v16@0:4@"AVOutputDeviceAuthorizationSession"8@"AVOutputDeviceAuthorizationRequest"12
B20@0:4@"AVOutputDeviceAuthorizationSession"8@"AVOutputDeviceAuthorizationRequest"12@"NSString"16
v16@0:4@8i12
v20@0:4i8@12I16
v20@0:4@8B12@16
@"MSVSystemDialog"
@"MRDRunAssertion"
^{IONotificationPort=}8@0:4
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDVirtualAudioInputServerDelegate>"
v12@0:4f8
v12@0:4@"NSNetService"8
v16@0:4@"NSNetService"8@"NSDictionary"12
v16@0:4@"NSNetService"8@"NSData"12
v20@0:4@"NSNetService"8@"NSInputStream"12@"NSOutputStream"16
v20@0:4^v8d12
@"CUBluetoothClient"
@"NSNetService"
@"<MRDTelevisionServerNetworkServiceDelegate>"
v20@0:4@8B12@?16
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
B32@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8
^{__IOHIDUserDevice=}8@0:4
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
@24@0:4I8^v12@16@20
@12@0:4^{__CFString=}8
@16@0:4^{_NSZone=}8#12
v16@0:4@8^{__CFString=}12
@"AVOutputDevice"
bplist00
BuildMachineOSBuild_
CFBundleAllowMixedLocalizations_
CFBundleDevelopmentRegion_
CFBundleExecutable_
CFBundleIdentifier_
CFBundleInfoDictionaryVersion_
CFBundleSupportedPlatformsZDTCompiler_
DTPlatformBuild^DTPlatformName_
DTPlatformVersionZDTSDKBuildYDTSDKNameWDTXcode\DTXcodeBuild_
MinimumOSVersion^UIDeviceFamilyW16B2657
WEnglish\mediaremoted_
com.apple.mediaremotedS6.0
^WatchSimulator_
"com.apple.compilers.llvm.clang.1_0P^watchsimulatorS4.0W15R344a_
watchsimulator4.0T0900V9M189u
#$%&'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.airplay.receiver.mediaremote.services</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.avfoundation.allow-system-wide-context</key>
<true/>
<key>com.apple.avfoundation.allows-access-to-device-list</key>
<true/>
<key>com.apple.avfoundation.allows-set-output-device</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string></string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.PairingManager</string>
</array>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
