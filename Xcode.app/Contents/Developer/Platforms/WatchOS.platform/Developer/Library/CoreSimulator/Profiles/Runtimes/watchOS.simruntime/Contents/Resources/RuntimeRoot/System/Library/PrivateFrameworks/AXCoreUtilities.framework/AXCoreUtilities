mutableCopy
allKeys
copy
countByEnumeratingWithState:objects:count:
objectForKeyedSubscript:
copyWithZone:
respondsToSelector:
setObject:forKeyedSubscript:
ax_deepMutableCopy
alloc
mainAccessQueue
initWithTargetAccessQueue:
init
setState:
class
initWithParentClass:description:appendUUIDToLabel:
setAccessQueue:
setAccessQueueIsExternal:
accessQueue
_reallyCancel
performSynchronousWritingBlock:
dealloc
state
canOnlyReadInCurrentExecutionThread
methodForSelector:
performAsynchronousWritingBlock:
afterDelay:processWritingBlock:
_afterDelay:processBlock:shouldTreatAsWritingBlock:
automaticallyCancelPendingBlockUponSchedulingNewBlock
isActive
setActive:
_didFinishProcessingBlock
performAsynchronousReadingBlock:
setDispatchTimer:
accessQueueIsExternal
_warnAboutAsynchronousScheduling
_performEnqueuedWritingBlock:asynchronousExecutionWarningHandler:
canWriteInCurrentExecutionThread
_warnAboutAsynchronousCancelling
dispatchTimer
label
stringWithFormat:
timerTargettingMainAccessQueue
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
afterDelay:processBlock:
cancel
isPending
afterDelay:processReadingBlock:
.cxx_destruct
setLabel:
setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:
_automaticallyCancelPendingBlockUponSchedulingNewBlock
_active
_accessQueueIsExternal
_label
_state
_accessQueue
_dispatchTimer
insertObject:atIndex:
lastObject
removeLastObject
objectAtIndex:
ax_enqueueObject:
ax_dequeueObject
ax_lastEnqueuedObject
ax_nextDequeuedObject
initWithTargetSerialQueue:
setDispatchQueue:
mainBundle
bundleIdentifier
initWithFormat:
UTF8String
afterDelay:processBlock:cancelBlock:
setCancelled:
setPending:
setCancelBlock:
setProcessBlock:
dispatchQueue
isCancelled
useWallTime
cancelBlock
setUseWallTime:
processBlock
_pending
_cancelled
_useWallTime
_dispatchQueue
_processBlock
_cancelBlock
stringByAppendingPathComponent:
objectsPassingTest:
count
setWithCapacity:
addObject:
ax_filteredSetUsingBlock:
ax_mappedSetUsingBlock:
ax_flatMappedSetUsingBlock:
member:
removeObject:
ax_replaceWithMatchingObject:updatingWithBlock:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
dictionaryFromXPCMessage:error:
copyXPCMessageFromDictionary:inReplyToXPCMessage:error:
indexesOfObjectsPassingTest:
objectsAtIndexes:
arrayWithCapacity:
ax_filteredArrayUsingBlock:
ax_mappedArrayUsingBlock:
ax_flatMappedArrayUsingBlock:
ax_containsObjectUsingBlock:
ax_errorWithDomain:code:description:arguments:
initWithFormat:arguments:
initWithObjectsAndKeys:
domain
code
numberWithInteger:
localizedDescription
ax_nonRedundantDescription
ax_errorWithDomain:description:
ax_errorWithDomain:code:description:
currentThread
isMainThread
name
isEqualToString:
_initWithLabel:appendUUIDToLabel:specialBehaviors:
initWithLabel:appendUUIDToLabel:
setSpecialBehaviors:
UUID
UUIDString
setThreadLocalStorageKey:
setConcurrentQueue:
bundleForClass:
behavesAsMainQueue
concurrentQueue
stringWithUTF8String:
specialBehaviors
_performBlock:withDispatchFunction:synchronously:accessQueueContext:
_accessQueueContextInCurrentExecutionThread
behavesWithoutErrorReporting
threadDictionary
threadLocalStorageKey
objectForKey:
unsignedIntegerValue
raise:format:
numberWithUnsignedInteger:
setObject:forKey:
removeObjectForKey:
backgroundAccessQueue
performSynchronousReadingBlock:
canReadInCurrentExecutionThread
_threadLocalStorageKey
_concurrentQueue
_specialBehaviors
AXExtras
AXAccessQueueTimer
NSObject
AXQueue
AXDispatchTimer
AXXPCUtilities
AXExtensions
AXAccessQueue
@8@0:4
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
B12@0:4@"Protocol"8
@"NSString"8@0:4
v20@0:4d8@?16
v8@0:4
v20@0:4d8@?<v@?>16
@12@0:4@8
v16@0:4@?8:12
v24@0:4d8@?16B20
v12@0:4@8
v12@0:4B8
i8@0:4
v12@0:4i8
@"NSString"
@"AXAccessQueue"
@"NSObject<OS_dispatch_source>"
v24@0:4d8@?16@?20
@?8@0:4
v12@0:4@?8
@"NSObject<OS_dispatch_queue>"
@12@0:4@?8
v16@0:4@8@?12
@16@0:4@8^@12
@20@0:4@8@12^@16
B12@0:4@?8
@16@0:4@8@12
@20@0:4@8i12@16
@24@0:4@8i12@16*20
@16@0:4@8B12
@20@0:4@8B12I16
@20@0:4#8@12B16
v24@0:4@?8^?12B16I20
v12@0:4I8
A@(#)PROGRAM:AXCoreUtilities  PROJECT:Accessibility-1
TimerAccessQueue
v4@?0
 on access queue: 
idle
pending
processing
cancelling
<%@: %p%@%@%@; state = %@; active = %@%@>
; label = "
; automaticallyCancelPendingBlockUponSchedulingNewBlock = YES
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
active
TB,R,N,GisActive
TB,R,N,GisPending
TB,N,GisActive,V_active
state
Ti,N,V_state
accessQueue
T@"AXAccessQueue",&,N,V_accessQueue
accessQueueIsExternal
TB,N,V_accessQueueIsExternal
dispatchTimer
T@"NSObject<OS_dispatch_source>",&,N,V_dispatchTimer
label
T@"NSString",C,V_label
automaticallyCancelPendingBlockUponSchedulingNewBlock
TB,N,V_automaticallyCancelPendingBlockUponSchedulingNewBlock
%@.%@.TimerQueue
%@ - %@
TB,N,GisPending,V_pending
cancelled
TB,N,GisCancelled,V_cancelled
dispatchQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_dispatchQueue
processBlock
T@?,C,N,V_processBlock
cancelBlock
T@?,C,N,V_cancelBlock
T@"NSString",&,N,V_label
useWallTime
TB,N,V_useWallTime
System/Library/AccessibilityBundles
AppleInternal/Library/AccessibilityBundles
System/Library/PrivateFrameworks/Accessibility.framework/Frameworks
System/Library/PrivateFrameworks/VoiceServices.framework/TTSResources
AXCoreUtilitiesXPCError
Converted XPC object is not a dictionary; instead it has the following type ID: %lu.
Failed converting XPC object to a Foundation level dictionary
Unexpected error: %s.
Unexpected type for XPC object
XPC object was NULL
No XPC dictionary
Failed to allocate new XPC dictionary
B12@?0r*4@"NSObject<OS_xpc_object>"8
Unexpected type for XPC object after conversion from Foundation level dictionary
Failed converting Foundation level dictionary to an XPC object
Domain:%@ Code:%@ Reason:%@
com.apple.Accessibility
AXCommon
AXRuntimeCommon
AXRuntimePID
AXRuntimeNotifications
AXRuntimeSerialization
AXTTSCommon
AXTTSRange
AXEventTap
AXIPC
AXUserInterfaceService
AXUIViewService
AXBrokenHomeButton
AXMIDI
AXDataMigrator
AXDragging
AXSettings
AXAssertions
AXTimeProfile
AXMemoryProfile
AXLookingGlass
AXLookingGlassUI
AXAccessories
AXUI
AXBackboardServer
AXSpringboardServer
AXSystemApp
AXAudioRouting
ASTCommon
AXAggregate
AXUIA
AXLocCaptionPanel
AXContextKit
AXPronunciations
AXBrailleHW
GAXCommon
GAXTimeRestrictions
GAXIntegrity
GAXAppLaunching
AXInvertColors
AXAppAccessibility
AXAppCompareGeometry
AXValidations
AXElementTraversal
AXFirstElement
AXHitTest
AXScrollToVisible
AXVisibleFrame
AXOpaqueElements
AXLoading
AXVectorKit
AXRemoteElement
MAGCommon
MAGBrightness
AXSpeechAssetDownload
AXCharacterVoices
AXSpeechSynthesis
AXOrator
AXSpeakSelection
AXSpeakTyping
AXSpeakScreen
AXSpeakFingerManager
SWCHCommon
SWCHElementNav
SWCHPauseResume
SWCHHW
AXTouchAccommodations
VOTCommon
VOTLayoutChange
VOTHandwriting
VOTSpeech
VOTICloud
VOTAudio
VOTElement
VOTEvent
VOTBrailleGestures
VOTNotifications
VOTKeyboard
VOTTVFocus
VOTTVExplorer
VOTIAP
VOTLifeCycle
VOTMagicTap
VOTRotor
AXVisualAlerts
ZOOMCommon
AXUnitTesting
AXPerfTesting
AXMediaCommon
AXMediaSettings
AXMediaService
AXMediaEngineCache
AXMediaEnginePriority
AXMediaScreenGrab
AXMediaOCR
AXMediaTextProcessing
AXMediaTextLayout
AXMediaResults
AXMediaTracking
AXMediaOutput
AXMediaSpeech
AXMediaSounds
AXMediaHaptics
AXMediaCaptionDescriptions
AXMediaDiagnostics
AXPlatformTranslationCommon
AXTemp
_AXBackgroundLoggingQueue
GlobalBackgroundQueue
%@-%@
%@-%@-%@
%@.%@.%@
%@.%@
Main access queue
<%@: %p; label = "%@">
Trying to synchronously execute a writing block from within a reading block. This is illegal.
threadLocalStorageKey
T@"NSString",C,N,V_threadLocalStorageKey
concurrentQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_concurrentQueue
specialBehaviors
TI,N,V_specialBehaviors
behavesAsMainQueue
TB,R,N
behavesWithoutErrorReporting
T@"NSString",R,C,N
Timer unexpectedly deallocated early or what??
%@: Attempted to schedule new block for execution %.2f seconds from now%@%@ onto a timer that already has a pending block; ignoring new block. Please consider whether you should call -cancel before scheduling this block.
Can't wrap up processing of %@ unless running within a writing block of %@.
Can't schedule timer %@ synchronously; scheduling it asynchronously instead. To avoid this, break on -[%@ %s], find the call site initiating a reading block onto %@, and change that to a writing block.
Can't actually cancel %@ unless running within a writing block of %@.
Can't cancel timer %@ synchronously; cancelling it asynchronously instead. To avoid this, break on -[%@ %s], find the call site initiating a reading block onto %@, and change that to a writing block.
Expected to be called on the main thread
Executing on unexpected thread
%s makes no sense with the main access queue.
zPLR
