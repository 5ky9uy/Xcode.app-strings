NOT IMPLEMENTED YET
ASSERTION FAILED: %s
SHOULD NEVER BE REACHED
ARGUMENT BAD: %s, %s
Unknown logging level: %s
Unknown logging channel: %s
%s(%d) : %s
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringBuilder.h
WTF::String WTF::StringBuilder::toString()
xmlns
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/AutomaticThread.cpp
void WTF::AutomaticThread::start(const WTF::AbstractLocker &)
WTF::AutomaticThread
auto WTF::AutomaticThread::start(const WTF::AbstractLocker &)::(anonymous class)::operator()() const
*** WebKit discarding exception: <%@> %@
Wall
Monotonic
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/ClockType.cpp
void WTF::printInternal(WTF::PrintStream &, WTF::ClockType)
AppleCollationOrder
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/ConcurrentPtrHashSet.cpp
bool WTF::ConcurrentPtrHashSet::addSlow(WTF::ConcurrentPtrHashSet::Table *, unsigned int, unsigned int, unsigned int, void *)
void WTF::ConcurrentPtrHashSet::resizeIfNecessary()
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::addImpl(void *)
Lock not held!
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/LockAlgorithmInlines.h
static void WTF::LockAlgorithm<unsigned int, 1, 2, WTF::CountingLock::LockHooks>::lockSlow(Atomic<LockType> &) [LockType = unsigned int, isHeldBit = 1, hasParkedBit = 2, Hooks = WTF::CountingLock::LockHooks]
Lock not parked!
Invalid value for lock: 
static void WTF::LockAlgorithm<unsigned int, 1, 2, WTF::CountingLock::LockHooks>::unlockSlow(Atomic<LockType> &, WTF::LockAlgorithm::Fairness) [LockType = unsigned int, isHeldBit = 1, hasParkedBit = 2, Hooks = WTF::CountingLock::LockHooks]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/cocoa/CPUTimeCocoa.cpp
static WTF::Seconds WTF::CPUTime::forCurrentThread()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/text/CString.cpp
static Ref<WTF::CStringBuffer> WTF::CStringBuffer::createUninitialized(size_t)
%pid
*** DataLog output to "%s" ***
Warning: Could not open DataLog file %s for writing.
janfebmaraprmayjunjulaugsepoctnovdec
Infinity
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/FastBitVector.cpp
void WTF::FastBitVectorWordOwner::resizeSlow(size_t)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/Gigacage.cpp
void *Gigacage::malloc(Gigacage::Kind, size_t)
void *Gigacage::mallocArray(Gigacage::Kind, size_t, size_t)
null
true
false
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/JSONValues.cpp
RefPtr<WTF::JSONImpl::Value> WTF::JSONImpl::ArrayBase::get(size_t) const
\u%04X
static void WTF::LockAlgorithm<unsigned char, '\x01', '\x02', WTF::EmptyLockHooks<unsigned char> >::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '\x01', hasParkedBit = '\x02', Hooks = WTF::EmptyLockHooks<unsigned char>]
static void WTF::LockAlgorithm<unsigned char, '\x01', '\x02', WTF::EmptyLockHooks<unsigned char> >::unlockSlow(Atomic<LockType> &, WTF::LockAlgorithm::Fairness) [LockType = unsigned char, isHeldBit = '\x01', hasParkedBit = '\x02', Hooks = WTF::EmptyLockHooks<unsigned char>]
unique_lock::unlock: not locked
unique_lock::lock: references null mutex
unique_lock::lock: already locked
start
value
POSITIVE_INFINITY
NEGATIVE_INFINITY
numerator
denominator
flags
MemoryPressure
com.apple.WebKit
Unable to shrink memory footprint of process (%zu MB) below the kill thresold (%zu MB). Killed
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/MemoryPressureHandler.cpp
void WTF::MemoryPressureHandler::shrinkOrDie()
Total
void WTF::MemoryPressureHandler::setDispatchQueue(dispatch_queue_t)
Unrestricted
Conservative
Strict
Received memory pressure event %lu vm pressure %d
v4@?0
org.WebKit.lowMemory
v8@?0i4
org.WebKit.lowMemory.begin
org.WebKit.lowMemory.end
Monotonic(
 sec)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+.-
IDNScriptWhiteList.txt
Common
Inherited
Arabic
Armenian
Bopomofo
Canadian_Aboriginal
Devanagari
Deseret
Gujarati
Gurmukhi
Hangul
Hebrew
Hiragana
Katakana_Or_Hiragana
Katakana
Latin
Tamil
Thai
 #%*[^
]%*[
 %32[^# 
]%*[^# 
mailto
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.
:/?#
WTF_numberOfProcessorCores
WARNING: failed to parse WTF_numberOfProcessorCores=%s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/ParallelHelperPool.cpp
WTF::ParallelHelperClient::ParallelHelperClient(RefPtr<WTF::ParallelHelperPool> &&)
void WTF::ParallelHelperClient::setTask(RefPtr<SharedTask<void ()> > &&)
void WTF::ParallelHelperClient::runTask(const RefPtr<SharedTask<void ()> > &)
WTF::ParallelHelperPool::~ParallelHelperPool()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/ParkingLot.cpp
static ParkingLot::ParkResult WTF::ParkingLot::parkConditionallyImpl(const void *, const ScopedLambda<bool ()> &, const ScopedLambda<void ()> &, const WTF::TimeWithDynamicClockType &)
void WTF::(anonymous namespace)::ensureHashtableSize(unsigned int)
StringView
String
(null StringImpl*)
StringImpl*
%lld
%llu
(Out of memory while converting 
 to utf8)
(failed to convert 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/RandomDevice.cpp
void WTF::RandomDevice::cryptographicallyRandomValues(unsigned char *, size_t)
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::RunLoop::Holder, WTF::CanBeGCThread::False>::set() [T = WTF::RunLoop::Holder, canBeGCThread = WTF::CanBeGCThread::False]
 sec
%02X
We should not have called catch_exception_raise(), please file a bug at bugs.webkit.org
We should not have called catch_mach_exception_raise_state_identity, please file a bug at bugs.webkit.org
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/threads/Signals.cpp
kern_return_t WTF::catch_mach_exception_raise_state(mach_port_t, exception_type_t, const mach_exception_data_t, mach_msg_type_number_t, int *, const thread_state_t, mach_msg_type_number_t, thread_state_t, mach_msg_type_number_t *)
thread set port failed due to 
auto WTF::startMachExceptionHandlerThread()::(anonymous class)::operator()() const
auto WTF::startMachExceptionHandlerThread()::(anonymous class)::operator()() const_block_invoke
exception_mask_t WTF::toMachMask(WTF::Signal)
auto WTF::installSignalHandler(WTF::Signal, WTF::SignalHandler &&)::(anonymous class)::operator()() const
We somehow got called for an unknown signal 
, halp.
Unable to restore the default handler while proccessing signal 
 the process is probably deadlocked. (errno: 
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/threads/Signals.h
std::tuple<int, Optional<int> > WTF::toSystemSignal(WTF::Signal)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/SixCharacterHash.cpp
unsigned int WTF::sixCharacterHashStringToInteger(const char *)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/StackTrace.cpp
static std::unique_ptr<StackTrace> WTF::StackTrace::captureStackTrace(int, int)
%s%-3d %p %s
%s%-3d %p
unsigned int WTF::StringBuilder::capacity() const
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/text/StringImpl.cpp
WTF::CString WTF::StringImpl::utf8(WTF::ConversionMode) const
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringImpl.h
unsigned int WTF::lengthOfNullTerminatedString(const CharacterType *) [CharacterType = unsigned short]
WTF::String-based allocator
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/text/StringView.cpp
WTF::CString WTF::StringView::utf8(WTF::ConversionMode) const
T *WTF::ThreadSpecific<WTF::LineBreakIteratorPool, WTF::CanBeGCThread::False>::set() [T = WTF::LineBreakIteratorPool, canBeGCThread = WTF::CanBeGCThread::False]
loose
normal
strict
AppleTextBreakLocale
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/Threading.cpp
static Ref<WTF::Thread> WTF::Thread::create(const char *, Function<void ()> &&)
Thread:
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/ThreadingPthreads.cpp
Expected<void, WTF::Thread::PlatformSuspendError> WTF::Thread::suspend()
size_t WTF::Thread::getRegisters(WTF::PlatformRegisters &)
JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/TimeWithDynamicClockType.cpp
static WTF::TimeWithDynamicClockType WTF::TimeWithDynamicClockType::now(WTF::ClockType)
WTF::WallTime WTF::TimeWithDynamicClockType::wallTime() const
WTF::MonotonicTime WTF::TimeWithDynamicClockType::monotonicTime() const
WTF::WallTime WTF::TimeWithDynamicClockType::approximateWallTime() const
WTF::MonotonicTime WTF::TimeWithDynamicClockType::approximateMonotonicTime() const
WTF::Seconds WTF::TimeWithDynamicClockType::operator-(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator<(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator>(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator<=(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator>=(const WTF::TimeWithDynamicClockType &) const
%s: %u calls, mean duration: %.6fms
javascript
about:blank
text/plain
webkit-fake-url://
file:///
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringConcatenate.h
WTF::StringTypeAdapter<const unsigned char *, void>::StringTypeAdapter(const LChar *)
file
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/URLParser.cpp
bool WTF::URLParser::copyBaseWindowsDriveLetter(const WTF::URL &)
void WTF::URLParser::copyASCIIStringUntil(const WTF::String &, size_t)
void WTF::URLParser::syntaxViolation(const CodePointIterator<CharacterType> &) [CharacterType = unsigned char]
void WTF::URLParser::syntaxViolation(const CodePointIterator<CharacterType> &) [CharacterType = unsigned short]
void WTF::URLParser::parse(const CharacterType *, const unsigned int, const WTF::URL &, const WTF::URLTextEncoding *) [CharacterType = unsigned char]
bool WTF::URLParser::parseHostAndPort(CodePointIterator<CharacterType>) [CharacterType = unsigned char]
bool WTF::URLParser::parsePort(CodePointIterator<CharacterType> &) [CharacterType = unsigned char]
/BuildRoot/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/Expected.h
void std::experimental::fundamentals_v3::__expected_detail::__expected_terminate()
uint64_t WTF::pow256(size_t)
void WTF::URLParser::parse(const CharacterType *, const unsigned int, const WTF::URL &, const WTF::URLTextEncoding *) [CharacterType = unsigned short]
bool WTF::URLParser::parseHostAndPort(CodePointIterator<CharacterType>) [CharacterType = unsigned short]
bool WTF::URLParser::parsePort(CodePointIterator<CharacterType> &) [CharacterType = unsigned short]
auto WTF::URLParser::internationalDomainNameTranscoder()::(anonymous class)::operator()() const
Wall(
/BuildRoot/Library/Caches/com.apple.xbs/Sources/WTF_Sim/WTF-7607.1.39/wtf/text/WTFString.cpp
WTF::CString WTF::String::utf8(WTF::ConversionMode) const
static void bmalloc::PerProcess<bmalloc::PerHeapKind<bmalloc::Heap> >::coalesce() [T = bmalloc::PerHeapKind<bmalloc::Heap>]
static void bmalloc::PerProcess<bmalloc::Scavenger>::coalesce() [T = bmalloc::Scavenger]
static void bmalloc::PerProcess<bmalloc::ARC4RandomNumberGenerator>::coalesce() [T = bmalloc::ARC4RandomNumberGenerator]
WebKit Using System Malloc
Malloc
MallocLogFile
MallocGuardEdges
MallocDoNotProtectPrelude
MallocDoNotProtectPostlude
MallocStackLogging
MallocStackLoggingNoCompact
MallocStackLoggingDirectory
MallocScribble
MallocCheckHeapStart
MallocCheckHeapEach
MallocCheckHeapSleep
MallocCheckHeapAbort
MallocErrorAbort
MallocCorruptionAbort
MallocHelp
DYLD_INSERT_LIBRARIES
libgmalloc
static void bmalloc::PerProcess<bmalloc::Environment>::coalesce() [T = bmalloc::Environment]
static void bmalloc::PerProcess<bmalloc::DebugHeap>::coalesce() [T = bmalloc::DebugHeap]
static void bmalloc::PerProcess<bmalloc::VMHeap>::coalesce() [T = bmalloc::VMHeap]
static void bmalloc::PerProcess<bmalloc::AllIsoHeaps>::coalesce() [T = bmalloc::AllIsoHeaps]
static void bmalloc::PerProcess<bmalloc::IsoTLSLayout>::coalesce() [T = bmalloc::IsoTLSLayout]
bmalloc failed to mmap %lu bytes
SimulateCrash
/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport
WebKit Malloc Memory Pressure Handler
JavaScriptCore bmalloc scavenger
thread constructor failed
static void bmalloc::PerProcess<bmalloc::Zone>::coalesce() [T = bmalloc::Zone]
WebKit Malloc
bmalloc: error reading remote process: 0x%x
JSAPIWrapperObject
v12@?0@"JSContext"4@"JSValue"8
globalObject
T@"JSValue",R
exception
T@"JSValue",&
exceptionHandler
T@?,C,V_exceptionHandler
virtualMachine
T@"JSVirtualMachine",R
name
T@"NSString",C
JSManagedValue is opaque root
writable
enumerable
configurable
v12@?0@"JSValue"4@"JSValue"8
Object
defineProperty
context
T@"JSContext",R,V_context
isUndefined
TB,R
isNull
isBoolean
isNumber
isString
isObject
isArray
isDate
location
width
height
Cannot convert primitive to NSArray
Cannot convert primitive to NSDictionary
%sPrototype
constructor
prototype
v12@?0@"Protocol"4^B8
JavaScriptCore
JSExport
NSBlock
CallbackFunction
./API/ObjCCallbackFunction.mm
JSValueRef JSC::ObjCCallbackFunctionImpl::call(JSContext *, JSObjectRef, size_t, const JSValueRef *, JSValueRef *)
self type check failed for Objective-C instance method
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator5.2.sdk/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::containsImpl(void *) const
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocateNonVirtual(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
length
valueWith
:inContext:
v8@?0^{objc_method=}4
%sConstructor
v12@?0:4r*8
ERROR: Class %@ exported more than one init family method via JSExport. Class %@ will not have a callable JavaScript constructor function.
init
v8@?0^{objc_property=}4
__JS_EXPORT_AS__
Cannot call a class constructor without |new|
Objective-C blocks called as constructors must return an object.
Malformed type encoding
@"NSString"8@?0@"NSString"4
NSString
static ArgumentTypeDelegate::ResultType ArgumentTypeDelegate::typeVoid()
Argument does not match Objective-C Class
./API/JSCallbackObjectFunctions.h
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::call(JSC::ExecState *) [Parent = JSC::JSAPIWrapperObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::construct(JSC::ExecState *) [Parent = JSC::JSAPIWrapperObject]
Property did get replaced
numberOfSlotsForLastOffset doesn't match totalSize
inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForLastOffset
Detected offset inconsistency: 
this = 
m_offset = 
m_inlineCapacity = 
propertyTable = 
numberOfSlotsForLastOffset = 
totalSize = 
inlineOverflowAccordingToTotalSize = 
numberOfOutOfLineSlotsForLastOffset = 
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator5.2.sdk/usr/local/include/wtf/Assertions.h
void UNREACHABLE_FOR_PLATFORM()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/PropertyMapHashTable.h
std::pair<PropertyTable::find_iterator, bool> JSC::PropertyTable::add(const JSC::PropertyTable::ValueType &, JSC::PropertyOffset &, JSC::PropertyTable::EffectOnPropertyOffset)
hasProperty callback returned true for a property that doesn't exist.
Static function property defined with NULL callAsFunction callback.
(function (syncIterator, nextMethod)
"use strict";
@putByIdDirectPrivate(this, "syncIterator", syncIterator);
@putByIdDirectPrivate(this, "nextMethod", nextMethod);
(function (string, index, unicode)
"use strict";
if (!unicode)
return index + 1;
if (index + 1 >= string.length)
return index + 1;
let first = string.@charCodeAt(index);
if (first < 0xD800 || first > 0xDBFF)
return index + 1;
let second = string.@charCodeAt(index + 1);
if (second < 0xDC00 || second > 0xDFFF)
return index + 1;
return index + 2;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not a object");
var promiseCapability = @newPromiseCapability(this);
var values = [];
var index = 0;
var remainingElementsCount = 1;
function newResolveElement(index)
var alreadyCalled = false;
return function @resolve(argument)
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(values, index, argument);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
try {
for (var value of iterable) {
@putByValDirect(values, index, @undefined);
var nextPromise = this.resolve(value);
var resolveElement = newResolveElement(index);
++remainingElementsCount;
nextPromise.then(resolveElement, promiseCapability.@reject);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
promiseCapability.@resolve.@call(@undefined, values);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (length)
return new @Float32Array(length);
(function (length)
return new @Float64Array(length);
(function (length)
return new @Int16Array(length);    
(function (length)
return new @Int32Array(length);   
(function (length)
return new @Int8Array(length);
(function (length)
return new @Uint16Array(length);   
(function (length)
return new @Uint32Array(length);
(function (length)
return new @Uint8Array(length);   
(function (length)
return new @Uint8ClampedArray(length);
(function (url)
"use strict";
return @createHTML("String.prototype.link", this, "a", "name", url)
(function (thisValue, argumentValues)
"use strict";
return this.@apply(thisValue, argumentValues);
(function (target, thisArgument, argumentsList)
"use strict";
if (typeof target !== "function")
@throwTypeError("Reflect.apply requires the first argument be a function");
if (!@isObject(argumentsList))
@throwTypeError("Reflect.apply requires the third argument be an object");
return target.@apply(thisArgument, argumentsList);
(function ()
"use strict";
var done = true;
var value;
var array = @getByIdDirectPrivate(this, "iteratedObject");
if (!@getByIdDirectPrivate(this, "arrayIteratorIsDone")) {
var index = @getByIdDirectPrivate(this, "arrayIteratorNextIndex");
var length = array.length >>> 0;
if (index >= length)
@putByIdDirectPrivate(this, "arrayIteratorIsDone", true);
else {
@putByIdDirectPrivate(this, "arrayIteratorNextIndex", index + 1);
done = false;
value = index;
return { value, done };
(function ()
"use strict";
var done = true;
var value;
var array = @getByIdDirectPrivate(this, "iteratedObject");
if (!@getByIdDirectPrivate(this, "arrayIteratorIsDone")) {
var index = @getByIdDirectPrivate(this, "arrayIteratorNextIndex");
var length = array.length >>> 0;
if (index >= length)
@putByIdDirectPrivate(this, "arrayIteratorIsDone", true);
else {
@putByIdDirectPrivate(this, "arrayIteratorNextIndex", index + 1);
done = false;
value = [ index, array[index] ];
return { value, done };
(function ()
"use strict";
var done = true;
var value;
var array = @getByIdDirectPrivate(this, "iteratedObject");
if (!@getByIdDirectPrivate(this, "arrayIteratorIsDone")) {
var index = @getByIdDirectPrivate(this, "arrayIteratorNextIndex");
var length = array.length >>> 0;
if (index >= length)
@putByIdDirectPrivate(this, "arrayIteratorIsDone", true);
else {
@putByIdDirectPrivate(this, "arrayIteratorNextIndex", index + 1);
done = false;
value = array[index];
return { value, done };
(function (array, length)
"use strict";
if (!@isArray(array))
return @newArrayWithSize(length);
var constructor = array.constructor;
var arrayConstructorInRealm = @Array;
if (arrayConstructorInRealm !== constructor && @isArrayConstructor(constructor))
return @newArrayWithSize(length);
if (@isObject(constructor)) {
constructor = constructor.@speciesSymbol;
if (constructor == null)
return @newArrayWithSize(length);
if (constructor === arrayConstructorInRealm || constructor === @undefined)
return @newArrayWithSize(length);
return new constructor(length);
(function (generator, promiseCapability, sentValue, resumeMode)
"use strict";
let state = @getByIdDirectPrivate(generator, "generatorState");
let value = @undefined;
if (state === @GeneratorStateCompleted || (resumeMode !== @GeneratorResumeModeNormal && resumeMode !== @GeneratorResumeModeThrow))
@throwTypeError("Async function illegally resumed");
try {
@putByIdDirectPrivate(generator, "generatorState", @GeneratorStateExecuting);
value = @getByIdDirectPrivate(generator, "generatorNext").@call(@getByIdDirectPrivate(generator, "generatorThis"), generator, state, sentValue, resumeMode, @getByIdDirectPrivate(generator, "generatorFrame"));
if (@getByIdDirectPrivate(generator, "generatorState") === @GeneratorStateExecuting) {
@putByIdDirectPrivate(generator, "generatorState", @GeneratorStateCompleted);
promiseCapability.@resolve(value);
return promiseCapability.@promise;
} catch (error) {
@putByIdDirectPrivate(generator, "generatorState", @GeneratorStateCompleted);
promiseCapability.@reject(error);
return promiseCapability.@promise;
let wrappedValue = @newPromiseCapability(@Promise);
wrappedValue.@resolve.@call(@undefined, value);
wrappedValue.@promise.@then(
function(value) { @asyncFunctionResume(generator, promiseCapability, value, @GeneratorResumeModeNormal); },
function(error) { @asyncFunctionResume(generator, promiseCapability, error, @GeneratorResumeModeThrow); });
return promiseCapability.@promise;
(function (generator)
"use strict";
const queue = @getByIdDirectPrivate(generator, "asyncGeneratorQueue");
@assert(!@asyncGeneratorQueueIsEmpty(generator), "Async genetator's Queue is an empty List.");
return @asyncGeneratorQueueDequeue(generator);
(function (generator, value, resumeMode)
"use strict";
const promiseCapability = @newPromiseCapability(@Promise);
if (!@isObject(generator) || typeof @getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") !== 'number') {
promiseCapability.@reject.@call(@undefined, new @TypeError('|this| should be an async generator'));
return promiseCapability.@promise;
@asyncGeneratorQueueEnqueue(generator, {resumeMode, value, promiseCapability, @asyncGeneratorQueueItemNext: null, @asyncGeneratorQueueItemPrevious: null});
if (!@isExecutionState(generator))
@asyncGeneratorResumeNext(generator);
return promiseCapability.@promise;
(function (generator)
"use strict";
const result = @getByIdDirectPrivate(generator, "asyncGeneratorQueueFirst");
if (result === null)
return null;
var updatedFirst = @getByIdDirectPrivate(result, "asyncGeneratorQueueItemNext");
@putByIdDirectPrivate(generator, "asyncGeneratorQueueFirst", updatedFirst);
if (updatedFirst === null)
@putByIdDirectPrivate(generator, "asyncGeneratorQueueLast", null);
return result;
(function (generator, item)
"use strict";
@assert(@getByIdDirectPrivate(item, "asyncGeneratorQueueItemNext") === null && @getByIdDirectPrivate(item, "asyncGeneratorQueueItemPrevious") === null);
if (@getByIdDirectPrivate(generator, "asyncGeneratorQueueFirst") === null) {
@assert(@getByIdDirectPrivate(generator, "asyncGeneratorQueueLast") === null);
@putByIdDirectPrivate(generator, "asyncGeneratorQueueFirst", item);
@putByIdDirectPrivate(generator, "asyncGeneratorQueueLast", item);
} else {
var last = @getByIdDirectPrivate(generator, "asyncGeneratorQueueLast");
@putByIdDirectPrivate(item, "asyncGeneratorQueueItemPrevious", last);
@putByIdDirectPrivate(last, "asyncGeneratorQueueItemNext", item);
@putByIdDirectPrivate(generator, "asyncGeneratorQueueLast", item);
(function (generator)
"use strict";
return @getByIdDirectPrivate(generator, "asyncGeneratorQueueLast") === null;
(function (generator, exception)
"use strict";
@assert(typeof @getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") === "number", "Generator is not an AsyncGenerator instance.");
const { promiseCapability } = @asyncGeneratorDequeue(generator);
promiseCapability.@reject.@call(@undefined, exception);
return @asyncGeneratorResumeNext(generator);
(function (generator, value, done)
"use strict";
@assert(typeof @getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") === "number", "Generator is not an AsyncGenerator instance.");
const { promiseCapability } = @asyncGeneratorDequeue(generator);
promiseCapability.@resolve.@call(@undefined, { value, done });
return @asyncGeneratorResumeNext(generator);
(function (generator)
"use strict";
@assert(typeof @getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") === "number", "Generator is not an AsyncGenerator instance.");
let state = @getByIdDirectPrivate(generator, "generatorState");
@assert(state !== @AsyncGeneratorStateExecuting, "Async generator should not be in executing state");
if (state === @AsyncGeneratorStateAwaitingReturn)
return @undefined;
if (@asyncGeneratorQueueIsEmpty(generator))
return @undefined;
const next = @getByIdDirectPrivate(generator, "asyncGeneratorQueueFirst");
if (next.resumeMode !== @GeneratorResumeModeNormal) {
if (state === @AsyncGeneratorStateSuspendedStart) {
@putByIdDirectPrivate(generator, "generatorState", @AsyncGeneratorStateCompleted);
state = @AsyncGeneratorStateCompleted;
if (state === @AsyncGeneratorStateCompleted) {
if (next.resumeMode === @GeneratorResumeModeReturn) {
@putByIdDirectPrivate(generator, "generatorState", @AsyncGeneratorStateAwaitingReturn);
const promiseCapability = @newPromiseCapability(@Promise);
promiseCapability.@resolve.@call(@undefined, next.value);
const throwawayCapabilityPromise = promiseCapability.@promise.@then(
function (result) { generator.@generatorState = @AsyncGeneratorStateCompleted; @asyncGeneratorResolve(generator, result, true); },
function (error) { generator.@generatorState = @AsyncGeneratorStateCompleted; @asyncGeneratorReject(generator, error); });
@putByIdDirectPrivate(throwawayCapabilityPromise, "promiseIsHandled", true);
return @undefined;
@assert(next.resumeMode === @GeneratorResumeModeThrow, "Async generator has wrong mode");
return @asyncGeneratorReject(generator, next.value);;
} else if (state === @AsyncGeneratorStateCompleted)
return @asyncGeneratorResolve(generator, @undefined, true);
@assert(state === @AsyncGeneratorStateSuspendedStart || @isSuspendYieldState(generator), "Async generator has wrong state");
@doAsyncGeneratorBodyCall(generator, next.value, next.resumeMode);
return @undefined;
(function (generator, value, resumeMode)
"use strict";
function asyncGeneratorYieldAwaited(result)
@putByIdDirectPrivate(generator, "asyncGeneratorSuspendReason", @AsyncGeneratorSuspendReasonYield);
@asyncGeneratorResolve(generator, result, false);
@putByIdDirectPrivate(generator, "asyncGeneratorSuspendReason", @AsyncGeneratorSuspendReasonAwait);
@awaitValue(generator, value, asyncGeneratorYieldAwaited);
return @undefined;
(function (generator, value, onFullfiled)
"use strict";
const wrappedValue = @newPromiseCapability(@Promise);
const onRejected = function (result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeThrow); };
wrappedValue.@resolve.@call(@undefined, value);
wrappedValue.@promise.@then(onFullfiled, onRejected);
return wrappedValue;
(function ()
"use strict";
return @createHTML("String.prototype.big", this, "big", "", "");
(function (thisValue)
"use strict";
let target = this;
if (typeof target !== "function")
@throwTypeError("|this| is not a function inside Function.prototype.bind");
let argumentCount = arguments.length;
let boundArgs = null;
let numBoundArgs = 0;
if (argumentCount > 1) {
numBoundArgs = argumentCount - 1;
boundArgs = @newArrayWithSize(numBoundArgs);
for (let i = 0; i < numBoundArgs; i++)
@putByValDirect(boundArgs, i, arguments[i + 1]);
let length = 0;
if (@hasOwnLengthProperty(target)) {
let lengthValue = target.length;
if (typeof lengthValue === "number") {
lengthValue = lengthValue | 0;
if (lengthValue > numBoundArgs)
length = lengthValue - numBoundArgs;
let name = target.name;
if (typeof name !== "string")
name = "";
return @makeBoundFunction(target, arguments[0], boundArgs, length, name);
(function ()
"use strict";
return @createHTML("String.prototype.blink", this, "blink", "", "");
(function ()
"use strict";
return @createHTML("String.prototype.bold", this, "b", "", "");
(function (thisArgument)
"use strict";
let argumentValues = [];
for (let i = 1; i < arguments.length; i++)
@putByValDirect(argumentValues, i-1, arguments[i]);
return this.@apply(thisArgument, argumentValues);
(function (onRejected)
"use strict";
return this.then(@undefined, onRejected);
(function (argument) {
"use strict";
return @Promise.@resolve(argument).@then(@webAssemblyCompileStreamingInternal);
(function (first)
"use strict";
if (@argumentCount() === 1
&& @isJSArray(this)
&& this.@isConcatSpreadableSymbol === @undefined
&& (!@isObject(first) || (!@isProxyObject(first) && first.@isConcatSpreadableSymbol === @undefined))) {
let result = @concatMemcpy(this, first);
if (result !== null)
return result;
return @tailCallForwardArguments(@concatSlowPath, this);
(function (arg )
"use strict";
if (this == null)
@throwTypeError("String.prototype.concat requires that |this| not be null or undefined");
if (@argumentCount() === 1)
return @toString(this) + @toString(arg);
return @tailCallForwardArguments(@stringConcatSlowPath, this);
(function ()
"use strict";
var currentElement = @toObject(this, "Array.prototype.concat requires that |this| not be null or undefined");
var constructor;
if (@isArray(currentElement)) {
constructor = currentElement.constructor;
if (@Array !== constructor && @isArrayConstructor(constructor))
constructor = @undefined;
else if (@isObject(constructor)) {
constructor = constructor.@speciesSymbol;
if (constructor === null)
constructor = @Array;
var argCount = arguments.length;
var result;
if (constructor === @Array || constructor === @undefined)
result = @newArrayWithSize(0);
else
result = new constructor(0);
var resultIsArray = @isJSArray(result);
var resultIndex = 0;
var argIndex = 0;
do {
let spreadable = @isObject(currentElement) && currentElement.@isConcatSpreadableSymbol;
if ((spreadable === @undefined && @isArray(currentElement)) || spreadable) {
let length = @toLength(currentElement.length);
if (length + resultIndex > @MAX_ARRAY_INDEX)
@throwRangeError("Length exceeded the maximum array length");
if (resultIsArray && @isJSArray(currentElement)) {
@appendMemcpy(result, currentElement, resultIndex);
resultIndex += length;
} else {
for (var i = 0; i < length; i++) {
if (i in currentElement)
@putByValDirect(result, resultIndex, currentElement[i]);
resultIndex++;
} else {
if (resultIndex >= @MAX_ARRAY_INDEX)
@throwRangeError("Length exceeded the maximum array length");
@putByValDirect(result, resultIndex++, currentElement);
currentElement = arguments[argIndex];
} while (argIndex++ < argCount);
result.length = resultIndex;
return result;
(function (target, source, excludedSet)
"use strict";
if (!@isObject(target))
@throwTypeError("target needs to be an object");
if (source == null) 
return target;
let from = @toObject(source);
let keys = @Reflect.@ownKeys(from); 
let keysLength = keys.length;
for (let i = 0; i < keysLength; i++) {
let nextKey = keys[i];
if (!excludedSet.@has(nextKey)) {
if (@propertyIsEnumerable(from, nextKey)) {
let propValue = from[nextKey];
@defineEnumerableWritableConfigurableDataProperty(target, nextKey, propValue);
return target;
(function (target, source)
"use strict";
if (!@isObject(target))
@throwTypeError("target needs to be an object");
if (source == null) 
return target;
let from = @toObject(source);
let keys = @Reflect.@ownKeys(from); 
let keysLength = keys.length;
for (let i = 0; i < keysLength; i++) {
let nextKey = keys[i];
if (@propertyIsEnumerable(from, nextKey)) {
let propValue = from[nextKey];
@defineEnumerableWritableConfigurableDataProperty(target, nextKey, propValue);
return target;
(function (target, start )
"use strict";
function maxWithPositives(a, b)
return (a < b) ? b : a;
function minWithMaybeNegativeZeroAndPositive(maybeNegativeZero, positive)
return (maybeNegativeZero < positive) ? maybeNegativeZero : positive;
var array = @toObject(this, "Array.prototype.copyWithin requires that |this| not be null or undefined");
var length = @toLength(array.length);
var relativeTarget = @toInteger(target);
var to = (relativeTarget < 0) ? maxWithPositives(length + relativeTarget, 0) : minWithMaybeNegativeZeroAndPositive(relativeTarget, length);
var relativeStart = @toInteger(start);
var from = (relativeStart < 0) ? maxWithPositives(length + relativeStart, 0) : minWithMaybeNegativeZeroAndPositive(relativeStart, length);
var relativeEnd;
var end = @argument(2);
if (end === @undefined)
relativeEnd = length;
else
relativeEnd = @toInteger(end);
var finalValue = (relativeEnd < 0) ? maxWithPositives(length + relativeEnd, 0) : minWithMaybeNegativeZeroAndPositive(relativeEnd, length);
var count = minWithMaybeNegativeZeroAndPositive(finalValue - from, length - to);
var direction = 1;
if (from < to && to < from + count) {
direction = -1;
from = from + count - 1;
to = to + count - 1;
for (var i = 0; i < count; ++i, from += direction, to += direction) {
if (from in array)
array[to] = array[from];
else
delete array[to];
return array;
(function (iteratedObject, kind, iterationFunction)
"use strict";
@putByIdDirectPrivate(this, "iteratedObject", iteratedObject);
@putByIdDirectPrivate(this, "arrayIteratorKind", kind);
@putByIdDirectPrivate(this, "arrayIteratorNextIndex", 0);
@putByIdDirectPrivate(this, "arrayIteratorNext", iterationFunction);
@putByIdDirectPrivate(this, "arrayIteratorIsDone", false);
(function (syncIterator, nextMethod)
"use strict";
if (!@isObject(syncIterator))
@throwTypeError('Only objects can be wrapped by async-from-sync wrapper');
return new @AsyncFromSyncIteratorConstructor(syncIterator, nextMethod);
(function (func, string, tag, attribute, value)
"use strict";
if (string == null)
@throwTypeError(`${func} requires that |this| not be null or undefined`);
let S = @toString(string);
let p1 = "<" + tag;
if (attribute) {
let V = @toString(value);
let escapedV = V.@replaceUsingRegExp(/"/g, '&quot;');
p1 = p1 + " " + @toString(attribute) + '="' + escapedV + '"'
let p2 = p1 + ">"
let p3 = p2 + S;
let p4 = p3 + "</" + tag + ">";
return p4;
(function (iteratedObject, kind)
"use strict";
@assert(@isMap(iteratedObject));
@putByIdDirectPrivate(this, "iteratedObject", iteratedObject);
@putByIdDirectPrivate(this, "mapIteratorKind", kind);
@putByIdDirectPrivate(this, "mapBucket", @mapBucketHead(iteratedObject));
(function (promise)
"use strict";
var alreadyResolved = false;
function @resolve(resolution) {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
if (resolution === promise)
return @rejectPromise(promise, new @TypeError("Resolve a promise with itself"));
if (!@isObject(resolution))
return @fulfillPromise(promise, resolution);
var then;
try {
then = resolution.then;
} catch (error) {
return @rejectPromise(promise, error);
if (typeof then !== 'function')
return @fulfillPromise(promise, resolution);
@enqueueJob(@promiseResolveThenableJob, [promise, resolution, then]);
return @undefined;
function @reject(reason) {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
return @rejectPromise(promise, reason);
return { @resolve, @reject };
(function (iteratedObject, kind)
"use strict";
@assert(@isSet(iteratedObject));
@putByIdDirectPrivate(this, "iteratedObject", iteratedObject);
@putByIdDirectPrivate(this, "setIteratorKind", kind);
@putByIdDirectPrivate(this, "setBucket", @setBucketHead(iteratedObject));
(function (target, propertyKey)
if (!@isObject(target))
@throwTypeError("Reflect.deleteProperty requires the first argument be an object");
return delete target[propertyKey];
(function (generator, resumeValue, resumeMode)
"use strict";
let value = @undefined;
let state = @getByIdDirectPrivate(generator, "generatorState");
@putByIdDirectPrivate(generator, "generatorState", @AsyncGeneratorStateExecuting);
@putByIdDirectPrivate(generator, "asyncGeneratorSuspendReason", @AsyncGeneratorSuspendReasonNone);
try {
value = @getByIdDirectPrivate(generator, "generatorNext").@call(@getByIdDirectPrivate(generator, "generatorThis"), generator, state, resumeValue, resumeMode, @getByIdDirectPrivate(generator, "generatorFrame"));
if (@getByIdDirectPrivate(generator, "generatorState") === @AsyncGeneratorStateExecuting)
@putByIdDirectPrivate(generator, "generatorState", @AsyncGeneratorStateCompleted);
} catch (error) {
@putByIdDirectPrivate(generator, "generatorState", @AsyncGeneratorStateCompleted);
@putByIdDirectPrivate(generator, "asyncGeneratorSuspendReason", @AsyncGeneratorSuspendReasonNone);
return @asyncGeneratorReject(generator, error);
if (@getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") === @AsyncGeneratorSuspendReasonAwait) {
const onFulfilled = function(result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeNormal); };
@awaitValue(generator, value, onFulfilled);
return @undefined;
if (@getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") === @AsyncGeneratorSuspendReasonYield)
return @asyncGeneratorYield(generator, value, resumeMode);
if (@getByIdDirectPrivate(generator, "generatorState") === @AsyncGeneratorStateCompleted) {
@putByIdDirectPrivate(generator, "asyncGeneratorSuspendReason", @AsyncGeneratorSuspendReasonNone);
return @asyncGeneratorResolve(generator, value, true);
return @undefined;
(function (key)
"use strict";
var entry = this.registry.@get(key);
if (entry)
return entry;
entry = @newRegistryEntry(key);
this.registry.@set(key, entry);
return entry;
(function ()
"use strict";
return new @createArrayIterator(@toObject(this, "Array.prototype.entries requires that |this| not be null or undefined"), "key+value", @arrayIteratorKeyValueNext);
(function ()
"use strict";
if (!@isMap(this))
@throwTypeError("Map.prototype.entries requires that |this| be Map");
return new @createMapIterator(this, @iterationKindKeyValue);
(function (object)
"use strict";
var obj = @toObject(object, "Object.entries requires that input parameter not be null or undefined");
var names = @getOwnPropertyNames(obj);
var properties = [];
for (var i = 0, length = names.length; i < length; ++i) {
var name = names[i];
if (@propertyIsEnumerable(obj, name))
properties.@push([name, obj[name]]);
return properties;
(function ()
"use strict";
if (!@isSet(this))
@throwTypeError("Set.prototype.entries requires that |this| be Set");
return new @createSetIterator(this, @iterationKindKeyValue);
(function ()
"use strict";
@typedArrayLength(this);
return new @createArrayIterator(this, "key+value", @arrayIteratorKeyValueNext);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.every requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.every callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
if (!callback.@call(thisArg, array[i], i, array))
return false;
return true;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.every callback must be a function");
for (var i = 0; i < length; i++) {
if (!callback.@call(thisArg, this[i], i, this))
return false;
return true;
(function (value )
"use strict";
var array = @toObject(this, "Array.prototype.fill requires that |this| not be null or undefined");
var length = @toLength(array.length);
var relativeStart = @toInteger(@argument(1));
var k = 0;
if (relativeStart < 0) {
k = length + relativeStart;
if (k < 0)
k = 0;
} else {
k = relativeStart;
if (k > length)
k = length;
var relativeEnd = length;
var end = @argument(2);
if (end !== @undefined)
relativeEnd = @toInteger(end);
var final = 0;
if (relativeEnd < 0) {
final = length + relativeEnd;
if (final < 0)
final = 0;
} else {
final = relativeEnd;
if (final > length)
final = length;
for (; k < final; k++)
array[k] = value;
return array;
(function (value )
"use strict";
let length = @typedArrayLength(this);
let start = @argument(1);
let end = @argument(2);
start = @typedArrayClampArgumentToStartOrEnd(start, length, 0);
end = @typedArrayClampArgumentToStartOrEnd(end, length, length);
for (let i = start; i < end; i++)
this[i] = value;
return this;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.filter requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.filter callback must be a function");
var thisArg = @argument(1);
var result;
var constructor;
if (@isArray(array)) {
constructor = array.constructor;
if (@Array !== constructor && @isArrayConstructor(constructor))
constructor = @undefined;
if (@isObject(constructor)) {
constructor = constructor.@speciesSymbol;
if (constructor === null)
constructor = @undefined;
if (constructor === @Array || constructor === @undefined)
result = @newArrayWithSize(0);
else
result = new constructor(0);
var nextIndex = 0;
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
var current = array[i]
if (callback.@call(thisArg, current, i, array)) {
@putByValDirect(result, nextIndex, current);
++nextIndex;
return result;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.filter callback must be a function");
var thisArg = @argument(1);
var kept = [];
for (var i = 0; i < length; i++) {
var value = this[i];
if (callback.@call(thisArg, value, i, this))
kept.@push(value);
var constructor = this.constructor;
var result;
var resultLength = kept.length;
if (constructor === @undefined)
result = new (@typedArrayGetOriginalConstructor(this))(resultLength);
else {
var speciesConstructor = constructor.@speciesSymbol;
if (speciesConstructor === null || speciesConstructor === @undefined)
result = new (@typedArrayGetOriginalConstructor(this))(resultLength);
else {
result = new speciesConstructor(resultLength);
@typedArrayLength(result);
for (var i = 0; i < kept.length; i++)
result[i] = kept[i];
return result;
(function (onFinally)
"use strict";
if (!@isPromise(this))
@throwTypeError("|this| is not a Promise");
const constructor = @speciesConstructor(this, @Promise);
@assert(@isConstructor(constructor));
let thenFinally;
let catchFinally;
if (typeof onFinally !== "function") {
thenFinally = onFinally;
catchFinally = onFinally;
} else {
thenFinally = @getThenFinally(onFinally, constructor);
catchFinally = @getCatchFinally(onFinally, constructor);
return this.then(thenFinally, catchFinally);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.find requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.find callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
var kValue = array[i];
if (callback.@call(thisArg, kValue, i, array))
return kValue;
return @undefined;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.find callback must be a function");
for (var i = 0; i < length; i++) {
let elem = this[i];
if (callback.@call(thisArg, elem, i, this))
return elem;
return @undefined;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findIndex requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.findIndex callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, array[i], i, array))
return i;
return -1;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.findIndex callback must be a function");
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, this[i], i, this))
return i;
return -1;
(function ()
"use strict";
return @createHTML("String.prototype.fixed", this, "tt", "", "");
(function ()
"use strict";
var array = @toObject(this, "Array.prototype.flat requires that |this| not be null or undefined");
var length = @toLength(array.length);
var depthNum = 1;
var depth = @argument(0);
if (depth !== @undefined)
depthNum = @toInteger(depth);
var result = @arraySpeciesCreate(array, 0);
@flatIntoArray(result, array, length, 0, depthNum);
return result;
(function (target, source, sourceLength, targetIndex, depth)
"use strict";
for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = source[sourceIndex];
if (depth > 0 && @isArray(element))
targetIndex = @flatIntoArray(target, element, @toLength(element.length), targetIndex, depth - 1);
else {
if (targetIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("flatten array exceeds 2**53 - 1");
@putByValDirect(target, targetIndex, element);
++targetIndex;
return targetIndex;
(function (target, source, sourceLength, targetIndex, callback, thisArg)
"use strict";
for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = callback.@call(thisArg, source[sourceIndex], sourceIndex, source);
if (@isArray(element))
targetIndex = @flatIntoArray(target, element, @toLength(element.length), targetIndex, 0);
else {
if (targetIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("flatten array exceeds 2**53 - 1");
@putByValDirect(target, targetIndex, element);
++targetIndex;
return target;
(function (callback)
"use strict";
var array = @toObject(this, "Array.prototype.flatMap requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.flatMap callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, 0);
return @flatIntoArrayWithCallback(result, array, length, 0, callback, thisArg);
(function (color)
"use strict";
return @createHTML("String.prototype.fontcolor", this, "font", "color", color);
(function (size)
"use strict";
return @createHTML("String.prototype.fontsize", this, "font", "size", size);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.forEach requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.forEach callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (i in array)
callback.@call(thisArg, array[i], i, array);
(function (callback )
"use strict";
if (!@isMap(this))
@throwTypeError("Map operation called on non-Map object");
if (typeof callback !== 'function')
@throwTypeError("Map.prototype.forEach callback must be a function");
var thisArg = @argument(1);
var bucket = @mapBucketHead(this);
do {
bucket = @mapBucketNext(bucket);
if (bucket === @sentinelMapBucket)
break;
callback.@call(thisArg, @mapBucketValue(bucket), @mapBucketKey(bucket), this);
} while (true);
(function (callback )
"use strict";
if (!@isSet(this))
@throwTypeError("Set operation called on non-Set object");
if (typeof callback !== 'function')
@throwTypeError("Set.prototype.forEach callback must be a function");
var thisArg = @argument(1);
var bucket = @setBucketHead(this);
do {
bucket = @setBucketNext(bucket);
if (bucket === @sentinelSetBucket)
break;
var key = @setBucketKey(bucket);
callback.@call(thisArg, key, key, this);
} while (true);
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.forEach callback must be a function");
for (var i = 0; i < length; i++)
callback.@call(thisArg, this[i], i, this);
(function (promise, value)
"use strict";
if (@getByIdDirectPrivate(promise, "promiseState") === @promiseStatePending)
@fulfillPromise(promise, value);
(function (items )
"use strict";
var thisObj = this;
var mapFn = @argument(1);
var thisArg;
if (mapFn !== @undefined) {
if (typeof mapFn !== "function")
@throwTypeError("Array.from requires that the second argument, when provided, be a function");
thisArg = @argument(2);
var arrayLike = @toObject(items, "Array.from requires an array-like object - not null or undefined");
var iteratorMethod = items.@iteratorSymbol;
if (iteratorMethod != null) {
if (typeof iteratorMethod !== "function")
@throwTypeError("Array.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
var result = @isConstructor(thisObj) ? new thisObj() : [];
var k = 0;
var iterator = iteratorMethod.@call(items);
var wrapper = {}
wrapper.@iteratorSymbol = function() { return iterator; };
for (var value of wrapper) {
if (mapFn)
@putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(result, k, value);
k += 1;
result.length = k;
return result;
var arrayLikeLength = @toLength(arrayLike.length);
var result = @isConstructor(thisObj) ? new thisObj(arrayLikeLength) : @newArrayWithSize(arrayLikeLength);
var k = 0;
while (k < arrayLikeLength) {
var value = arrayLike[k];
if (mapFn)
@putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(result, k, value);
k += 1;
result.length = arrayLikeLength;
return result;
(function (items )
"use strict";
let mapFn = @argument(1);
let thisArg;
if (mapFn !== @undefined) {
if (typeof mapFn !== "function")
@throwTypeError("TypedArray.from requires that the second argument, when provided, be a function");
thisArg = @argument(2);
let arrayLike = @toObject(items, "TypedArray.from requires an array-like object - not null or undefined");
let iteratorMethod = items.@iteratorSymbol;
if (iteratorMethod != null) {
if (typeof iteratorMethod !== "function")
@throwTypeError("TypedArray.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
let accumulator = [];
let k = 0;
let iterator = iteratorMethod.@call(items);
let wrapper = {};
wrapper.@iteratorSymbol = function() { return iterator; }
for (let value of wrapper) {
if (mapFn)
@putByValDirect(accumulator, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(accumulator, k, value);
k++;
let constructFunction = @getByIdDirectPrivate(this, "allocateTypedArray");
if (constructFunction === @undefined)
@throwTypeError("TypedArray.from requires its this argument subclass a TypedArray constructor");
let result = constructFunction(k);
for (let i = 0; i < k; i++) 
result[i] = accumulator[i];
return result;
let arrayLikeLength = @toLength(arrayLike.length);
let constructFunction = @getByIdDirectPrivate(this, "allocateTypedArray");
if (constructFunction === @undefined)
@throwTypeError("this does not subclass a TypedArray constructor");
let result = constructFunction(arrayLikeLength);
let k = 0;
while (k < arrayLikeLength) {
let value = arrayLike[k];
if (mapFn)
result[k] = thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k);
else
result[k] = value;
k++;
return result;
(function (iterable)
"use strict";
let object = {};
for (let entry of iterable) {
if (!@isObject(entry))
@throwTypeError("Object.fromEntries requires the first iterable parameter yields objects");
let key = entry[0];
let value = entry[1];
@putByValDirect(object, key, value);
return object;
(function (entry, source)
"use strict";
if (!entry.fetch)
entry.fetch = @newPromiseCapability(@InternalPromise).@promise;
this.forceFulfillPromise(entry.fetch, source);
@setStateToMax(entry, @ModuleInstantiate);
(function (promise, value)
"use strict";
var reactions = @getByIdDirectPrivate(promise, "promiseReactions");
@putByIdDirectPrivate(promise, "promiseResult", value);
@putByIdDirectPrivate(promise, "promiseReactions", @undefined);
@putByIdDirectPrivate(promise, "promiseState", @promiseStateFulfilled);
@InspectorInstrumentation.promiseFulfilled(promise, value, reactions);
@triggerPromiseReactions(@promiseStateFulfilled, reactions, value);
(function (generator, state, generatorThis, sentValue, value, resumeMode)
"use strict";
var done = state === @GeneratorStateCompleted;
if (!done) {
try {
@putByIdDirectPrivate(generator, "generatorState", @GeneratorStateExecuting);
value = @getByIdDirectPrivate(generator, "generatorNext").@call(generatorThis, generator, state, sentValue, resumeMode, @getByIdDirectPrivate(generator, "generatorFrame"));
if (@getByIdDirectPrivate(generator, "generatorState") === @GeneratorStateExecuting) {
@putByIdDirectPrivate(generator, "generatorState", @GeneratorStateCompleted);
done = true;
} catch (error) {
@putByIdDirectPrivate(generator, "generatorState", @GeneratorStateCompleted);
throw error;
return { value, done };
(function (onFinally, constructor)
"use strict";
return function(reason)
@assert(typeof onFinally === "function");
const result = onFinally();
@assert(@isConstructor(constructor));
const resultCapability = @newPromiseCapability(constructor);
resultCapability.@resolve.@call(@undefined, result);
const promise = resultCapability.@promise;
const thrower = function () { throw reason; };
return promise.then(thrower);
(function ()
"use strict";
return @getDefaultCollator.collator || (@getDefaultCollator.collator = new @Collator());
(function (onFinally, constructor)
"use strict";
return function(value)
@assert(typeof onFinally === "function");
const result = onFinally();
@assert(@isConstructor(constructor));
const resultCapability = @newPromiseCapability(constructor);
resultCapability.@resolve.@call(@undefined, result);
const promise = resultCapability.@promise;
const valueThunk = function () { return value; };
return promise.then(valueThunk);
(function (target, propertyKey)
"use strict";
if (!@isObject(target))
@throwTypeError("Reflect.has requires the first argument be an object");
return propertyKey in target;
(function (regexp)
"use strict";
if (!@isRegExpObject(regexp))
return true;
let regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
let regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
let regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (regexp)
"use strict";
if (!@isRegExpObject(regexp))
return true;
let regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
let regexpFlags = @tryGetById(regexp, "flags");
if (regexpFlags !== @regExpProtoFlagsGetter)
return true;
let regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
let regexpIgnoreCase = @tryGetById(regexp, "ignoreCase");
if (regexpIgnoreCase !== @regExpProtoIgnoreCaseGetter)
return true;
let regexpMultiline = @tryGetById(regexp, "multiline");
if (regexpMultiline !== @regExpProtoMultilineGetter)
return true;
let regexpSticky = @tryGetById(regexp, "sticky");
if (regexpSticky !== @regExpProtoStickyGetter)
return true;
let regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
let regexpSource = @tryGetById(regexp, "source");
if (regexpSource !== @regExpProtoSourceGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (regexp, replacer)
"use strict";
if (!@isRegExpObject(regexp))
return true;
if (replacer !== @regExpPrototypeSymbolReplace)
return true;
let regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
let regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
let regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (searchElement )
"use strict";
var array = @toObject(this, "Array.prototype.includes requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (length === 0)
return false;
var fromIndex = 0;
var from = @argument(1);
if (from !== @undefined)
fromIndex = @toInteger(from);
var index;
if (fromIndex >= 0)
index = fromIndex;
else
index = length + fromIndex;
if (index < 0)
index = 0;
var currentElement;
for (; index < length; ++index) {
currentElement = array[index];
if (searchElement === currentElement || (searchElement !== searchElement && currentElement !== currentElement))
return true;
return false;
(function (executor)
"use strict";
if (typeof executor !== 'function')
@throwTypeError("Promise constructor takes a function argument");
@putByIdDirectPrivate(this, "promiseState", @promiseStatePending);
@putByIdDirectPrivate(this, "promiseReactions", []);
@putByIdDirectPrivate(this, "promiseIsHandled", false);
var resolvingFunctions = @createResolvingFunctions(this);
try {
executor(resolvingFunctions.@resolve, resolvingFunctions.@reject);
} catch (error) {
return resolvingFunctions.@reject.@call(@undefined, error);
return this;
(function (argument) {
"use strict";
return @Promise.@resolve(argument).@then(@webAssemblyInstantiateStreamingInternal);
(function (array)
"use strict";
var promiseCapability = @newPromiseCapability(@InternalPromise);
var values = [];
var index = 0;
var remainingElementsCount = 0;
function newResolveElement(index)
var alreadyCalled = false;
return function (argument)
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(values, index, argument);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
try {
if (array.length === 0)
promiseCapability.@resolve.@call(@undefined, values);
else {
for (var index = 0, length = array.length; index < length; ++index) {
var value = array[index];
@putByValDirect(values, index, @undefined);
var nextPromiseCapability = @newPromiseCapability(@InternalPromise);
nextPromiseCapability.@resolve.@call(@undefined, value);
var nextPromise = nextPromiseCapability.@promise;
var resolveElement = newResolveElement(index);
++remainingElementsCount;
nextPromise.then(resolveElement, promiseCapability.@reject);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (array)
"use strict";
if (@isJSArray(array) || @isDerivedArray(array))
return true;
if (!@isProxyObject(array))
return false;
return @isArraySlow(array);
(function (object)
"use strict";
return object == null || typeof object === "object";
(function (generator)
"use strict";
var state = @getByIdDirectPrivate(generator, "generatorState");
var reason = @getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason");
return (state > 0 && reason === @AsyncGeneratorSuspendReasonNone)
|| state === @AsyncGeneratorStateExecuting
|| reason === @AsyncGeneratorSuspendReasonAwait;
(function (value)
"use strict";
var numberValue = @toNumber(value);
if (numberValue !== numberValue)
return false;
return numberValue !== @Infinity && numberValue !== -@Infinity;
(function (value)
"use strict";
if (typeof value !== "number")
return false;
if (value !== value)
return false;
return value !== @Infinity && value !== -@Infinity;
(function (value)
"use strict";
var numberValue = @toNumber(value);
return numberValue !== numberValue;
(function (value)
"use strict";
return value !== value;
(function (promise)
"use strict";
return @isObject(promise) && !!@getByIdDirectPrivate(promise, "promiseState");
(function (generator)
"use strict";
var state = @getByIdDirectPrivate(generator, "generatorState");
return (state > 0 && @getByIdDirectPrivate(generator, "asyncGeneratorSuspendReason") === @AsyncGeneratorSuspendReasonYield)
|| state === @AsyncGeneratorStateSuspendedYield;
(function ()
"use strict";
return @createHTML("String.prototype.italics", this, "i", "", "");
(function ()
"use strict";
return new @createArrayIterator(@toObject(this, "Array.prototype.keys requires that |this| not be null or undefined"), "key", @arrayIteratorKeyNext);
(function ()
"use strict";
if (!@isMap(this))
@throwTypeError("Map.prototype.keys requires that |this| be Map");
return new @createMapIterator(this, @iterationKindKey);
(function ()
"use strict";
@typedArrayLength(this);
return new @createArrayIterator(this, "key", @arrayIteratorKeyNext);
(function (entry, fetcher)
"use strict";
if (!entry.linkSucceeded)
throw entry.linkError;
if (entry.state === @ModuleReady)
return;
@setStateToMax(entry, @ModuleReady);
try {
var dependencies = entry.dependencies;
for (var i = 0, length = dependencies.length; i < length; ++i)
this.link(dependencies[i], fetcher);
this.moduleDeclarationInstantiation(entry.module, fetcher);
} catch (error) {
entry.linkSucceeded = false;
entry.linkError = error;
throw error;
(function (url)
"use strict";
return @createHTML("String.prototype.link", this, "a", "href", url)
(function (key, fetcher)
"use strict";
var entry = this.ensureRegistered(key);
if (entry.state < @ModuleLink)
@throwTypeError("Requested module is not instantiated yet.");
this.link(entry, fetcher);
return this.moduleEvaluation(entry, fetcher);
(function (moduleName, parameters, fetcher)
"use strict";
return this.loadModule(moduleName, parameters, fetcher).then((key) => {
return this.linkAndEvaluateModule(key, fetcher);
(function (moduleName, parameters, fetcher)
"use strict";
return this.resolve(moduleName, @undefined, fetcher).then((key) => {
return this.requestSatisfy(this.ensureRegistered(key), parameters, fetcher, new @Set);
}).then((entry) => {
return entry.key;
(function (that)
"use strict";
if (this == null)
@throwTypeError("String.prototype.localeCompare requires that |this| not be null or undefined");
var thisString = @toString(this);
var thatString = @toString(that);
var locales = @argument(1);
var options = @argument(2);
if (locales === @undefined && options === @undefined)
return @getDefaultCollator().compare(thisString, thatString);
var collator = new @Collator(locales, options);
return collator.compare(thisString, thatString);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.map requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.map callback must be a function");
var thisArg = @argument(1);
var result;
var constructor;
if (@isArray(array)) {
constructor = array.constructor;
if (@Array !== constructor && @isArrayConstructor(constructor))
constructor = @undefined;
if (@isObject(constructor)) {
constructor = constructor.@speciesSymbol;
if (constructor === null)
constructor = @undefined;
if (constructor === @Array || constructor === @undefined)
result = @newArrayWithSize(length);
else
result = new constructor(length);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
var mappedValue = callback.@call(thisArg, array[i], i, array);
@putByValDirect(result, i, mappedValue);
return result;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.map callback must be a function");
var thisArg = @argument(1);
var constructor = this.constructor;
var result;
if (constructor === @undefined)
result = new (@typedArrayGetOriginalConstructor(this))(length);
else {
var speciesConstructor = constructor.@speciesSymbol;
if (speciesConstructor === null || speciesConstructor === @undefined)
result = new (@typedArrayGetOriginalConstructor(this))(length);
else {
result = new speciesConstructor(length);
@typedArrayLength(result);
for (var i = 0; i < length; i++) {
var mappedValue = callback.@call(thisArg, this[i], i, this);
result[i] = mappedValue;
return result;
(function (bucket, kind)
"use strict";
var value;
bucket = @mapBucketNext(bucket);
@putByIdDirectPrivate(this, "mapBucket", bucket);
var done = bucket === @sentinelMapBucket;
if (!done) {
var key = @mapBucketKey(bucket);
value = @mapBucketValue(bucket);
if (kind === @iterationKindKeyValue)
value = [ key, value ]
else if (kind === @iterationKindKey)
value = key;
return { value, done };
(function (strArg)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@match requires that |this| be an Object");
let str = @toString(strArg);
if (!@hasObservableSideEffectsForRegExpMatch(this))
return @regExpMatchFast.@call(this, str);
return @matchSlow(this, str);
(function (regexp)
"use strict";
if (this == null)
@throwTypeError("String.prototype.match requires that |this| not be null or undefined");
if (regexp != null) {
var matcher = regexp.@matchSymbol;
if (matcher != @undefined)
return matcher.@call(regexp, this);
let thisString = @toString(this);
let createdRegExp = @regExpCreate(regexp, @undefined);
return createdRegExp.@matchSymbol(thisString);
(function (regexp, str)
"use strict";
if (!regexp.global)
return @regExpExec(regexp, str);
let unicode = regexp.unicode;
regexp.lastIndex = 0;
let resultList = [];
const maximumReasonableMatchSize = 100000000;
while (true) {
let result = @regExpExec(regexp, str);
if (result === null) {
if (resultList.length === 0)
return null;
return resultList;
if (resultList.length > maximumReasonableMatchSize)
@throwOutOfMemoryError();
if (!@isObject(result))
@throwTypeError("RegExp.prototype.@@match call to RegExp.exec didn't return null or an object");
let resultString = @toString(result[0]);
if (!resultString.length)
regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
resultList.@push(resultString);
(function (entry, fetcher)
"use strict";
if (entry.evaluated)
return;
entry.evaluated = true;
var dependencies = entry.dependencies;
for (var i = 0, length = dependencies.length; i < length; ++i)
this.moduleEvaluation(dependencies[i], fetcher);
this.evaluate(entry.key, entry.module, fetcher);
(function (error)
"use strict";
let promise = @Promise.@reject(error);
@putByIdDirectPrivate(promise, "promiseIsHandled", true);
return promise;
(function (constructor)
"use strict";
if (!@isConstructor(constructor))
@throwTypeError("promise capability requires a constructor function");
var promiseCapability = {
@promise: @undefined,
@resolve: @undefined,
@reject: @undefined
function @executor(resolve, reject)
if (promiseCapability.@resolve !== @undefined)
@throwTypeError("resolve function is already set");
if (promiseCapability.@reject !== @undefined)
@throwTypeError("reject function is already set");
promiseCapability.@resolve = resolve;
promiseCapability.@reject = reject;
var promise = new constructor(@executor);
if (typeof promiseCapability.@resolve !== "function")
@throwTypeError("executor did not take a resolve function");
if (typeof promiseCapability.@reject !== "function")
@throwTypeError("executor did not take a reject function");
promiseCapability.@promise = promise;
return promiseCapability;
(function (capability, onFulfilled, onRejected)
"use strict";
return {
@capabilities: capability,
@onFulfilled: onFulfilled,
@onRejected: onRejected,
(function (key)
"use strict";
return {
key: key,
state: @ModuleFetch,
fetch: @undefined,
instantiate: @undefined,
satisfy: @undefined,
dependencies: [],
module: @undefined,
linkError: @undefined,
linkSucceeded: true,
evaluated: false,
(function ()
"use strict";
if (this == null)
@throwTypeError("%ArrayIteratorPrototype%.next requires that |this| not be null or undefined");
let next = @getByIdDirectPrivate(this, "arrayIteratorNext");
if (next === @undefined)
@throwTypeError("%ArrayIteratorPrototype%.next requires that |this| be an Array Iterator instance");
return next.@call(this);
(function (value)
"use strict";
const promiseCapability = @newPromiseCapability(@Promise);
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator is not an object.'));
return promiseCapability.@promise;
const syncIterator = @getByIdDirectPrivate(this, "syncIterator");
try {
const { value: nextValue, done: nextDone } = @getByIdDirectPrivate(this, "nextMethod").@call(syncIterator, value);
const valueWrapperCapability = @newPromiseCapability(@Promise);
valueWrapperCapability.@resolve.@call(@undefined, nextValue);
valueWrapperCapability.@promise.@then(
function (result) { promiseCapability.@resolve.@call(@undefined, { value: result, done: !!nextDone }); },
function (error) { promiseCapability.@reject.@call(@undefined, error); });
} catch(e) {
promiseCapability.@reject.@call(@undefined, e);
return promiseCapability.@promise;
(function (value)
"use strict";
return @asyncGeneratorEnqueue(this, value, @GeneratorResumeModeNormal);
(function (value)
"use strict";
var state = @getByIdDirectPrivate(this, "generatorState");
if (typeof state !== "number")
@throwTypeError("|this| should be a generator");
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
return @generatorResume(this, state, @getByIdDirectPrivate(this, "generatorThis"), value, @undefined, @GeneratorResumeModeNormal);
(function ()
"use strict";
if (this == null)
@throwTypeError("%MapIteratorPrototype%.next requires that |this| not be null or undefined");
var bucket = @getByIdDirectPrivate(this, "mapBucket");
if (bucket === @undefined)
@throwTypeError("%MapIteratorPrototype%.next requires that |this| be a Map Iterator instance");
return @mapIteratorNext.@call(this, bucket, @getByIdDirectPrivate(this, "mapIteratorKind"));
(function ()
"use strict";
if (this == null)
@throwTypeError("%SetIteratorPrototype%.next requires that |this| not be null or undefined");
var bucket = @getByIdDirectPrivate(this, "setBucket");
if (bucket === @undefined)
@throwTypeError("%SetIteratorPrototype%.next requires that |this| be a Set Iterator instance");
return @setIteratorNext.@call(this, bucket, @getByIdDirectPrivate(this, "setIteratorKind"));
(function ()
"use strict";
if (this == null)
@throwTypeError("%StringIteratorPrototype%.next requires that |this| not be null or undefined");
var position = @getByIdDirectPrivate(this, "stringIteratorNextIndex");
if (position === @undefined)
@throwTypeError("%StringIteratorPrototype%.next requires that |this| be a String Iterator instance");
var done = true;
var value = @undefined;
var string = @getByIdDirectPrivate(this, "iteratedString");
if (string !== @undefined) {
var length = string.length >>> 0;
if (position >= length)
@putByIdDirectPrivate(this, "iteratedString", @undefined);
else {
done = false;
var first = string.@charCodeAt(position);
if (first < 0xD800 || first > 0xDBFF || position + 1 === length)
value = string[position];
else {
var second = string.@charCodeAt(position + 1);
if (second < 0xDC00 || second > 0xDFFF)
value = string[position];
else
value = string[position] + string[position + 1];
@putByIdDirectPrivate(this, "stringIteratorNextIndex", position + value.length);
return { value, done };
(function ()
"use strict";
var length = arguments.length;
var array = @isConstructor(this) ? new this(length) : @newArrayWithSize(length);
for (var k = 0; k < length; ++k)
@putByValDirect(array, k, arguments[k]);
array.length = length;
return array;
(function ()
"use strict";
let len = arguments.length;
let constructFunction = @getByIdDirectPrivate(this, "allocateTypedArray");
if (constructFunction === @undefined)
@throwTypeError("TypedArray.of requires its this argument to subclass a TypedArray constructor");
let result = constructFunction(len);
for (let i = 0; i < len; i++)
result[i] = arguments[i];
return result;
(function (maxLength)
"use strict";
if (this == null)
@throwTypeError("String.prototype.padEnd requires that |this| not be null or undefined");
var string = @toString(this);
maxLength = @toLength(maxLength);
var stringLength = string.length;
if (maxLength <= stringLength)
return string;
var filler;
var fillString = @argument(1);
if (fillString === @undefined)
filler = " ";
else {
filler = @toString(fillString);
if (filler === "")
return string;
if (maxLength > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var fillLength = maxLength - stringLength;
var truncatedStringFiller;
if (filler.length === 1)
truncatedStringFiller = @repeatCharacter(filler, fillLength);
else
truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
return string + truncatedStringFiller;
(function (maxLength)
"use strict";
if (this == null)
@throwTypeError("String.prototype.padStart requires that |this| not be null or undefined");
var string = @toString(this);
maxLength = @toLength(maxLength);
var stringLength = string.length;
if (maxLength <= stringLength)
return string;
var filler;
var fillString = @argument(1);
if (fillString === @undefined)
filler = " ";
else {
filler = @toString(fillString);
if (filler === "")
return string;
if (maxLength > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var fillLength = maxLength - stringLength;
var truncatedStringFiller;
if (filler.length === 1)
truncatedStringFiller = @repeatCharacter(filler, fillLength);
else
truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
return truncatedStringFiller + string;
(function (iterable)
"use strict";
let result = [];
let iterator = iterable.@iteratorSymbol();
let next = iterator.next;
let item;
let index = 0;
while (true) {
item = next.@call(iterator);
if (!@isObject(item))
@throwTypeError("Iterator result interface is not an object");
if (item.done)
return result;
@putByValDirect(result, index++, item.value);
(function (promise, value, reactions)
"use strict";
if (!this.isEnabled)
return;
(function (state, reaction, argument)
"use strict";
var promiseCapability = reaction.@capabilities;
var result;
var handler = (state === @promiseStateFulfilled) ? reaction.@onFulfilled: reaction.@onRejected;
try {
result = handler(argument);
} catch (error) {
return promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@resolve.@call(@undefined, result);
(function (promise, reason, reactions)
"use strict";
if (!this.isEnabled)
return;
(function (promiseToResolve, thenable, then)
"use strict";
var resolvingFunctions = @createResolvingFunctions(promiseToResolve);
try {
return then.@call(thenable, resolvingFunctions.@resolve, resolvingFunctions.@reject);
} catch (error) {
return resolvingFunctions.@reject.@call(@undefined, error);
(function (key, value)
"use strict";
var entry = this.ensureRegistered(key);
if (entry.state > @ModuleFetch)
@throwTypeError("Requested module is already fetched.");
this.fulfillFetch(entry, value);
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not a object");
var promiseCapability = @newPromiseCapability(this);
try {
for (var value of iterable) {
var nextPromise = this.resolve(value);
nextPromise.then(promiseCapability.@resolve, promiseCapability.@reject);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (template)
"use strict";
var cookedSegments = @toObject(template, "String.raw requires template not be null or undefined");
var rawSegments = @toObject(cookedSegments.raw, "String.raw requires template.raw not be null or undefined");
var numberOfSubstitutions = arguments.length - 1;
var segmentCount = @toLength(rawSegments.length);
if (segmentCount <= 0)
return '';
var stringElements = '';
for (var i = 0; ; ++i) {
var segment = @toString(rawSegments[i]);
stringElements += segment;
if ((i + 1) === segmentCount)
return stringElements;
if (i < numberOfSubstitutions) {
var substitutionIndexInArguments = i + 1;
var next = @toString(arguments[substitutionIndexInArguments]);
stringElements += next;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.reduce requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.reduce callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("reduce of empty array with no initial value");
var accumulator, k = 0;
if (argumentCount > 1)
accumulator = @argument(1);
else {
while (k < length && !(k in array))
k += 1;
if (k >= length)
@throwTypeError("reduce of empty array with no initial value");
accumulator = array[k++];
while (k < length) {
if (k in array)
accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
k += 1;
return accumulator;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.reduce callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("TypedArray.prototype.reduce of empty array with no initial value");
var accumulator, k = 0;
if (argumentCount > 1)
accumulator = @argument(1);
else
accumulator = this[k++];
for (; k < length; k++)
accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
return accumulator;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.reduceRight requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.reduceRight callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("reduceRight of empty array with no initial value");
var accumulator, k = length - 1;
if (argumentCount > 1)
accumulator = @argument(1);
else {
while (k >= 0 && !(k in array))
k -= 1;
if (k < 0)
@throwTypeError("reduceRight of empty array with no initial value");
accumulator = array[k--];
while (k >= 0) {
if (k in array)
accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
k -= 1;
return accumulator;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.reduceRight callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("TypedArray.prototype.reduceRight of empty array with no initial value");
var accumulator, k = length - 1;
if (argumentCount > 1)
accumulator = @argument(1);
else
accumulator = this[k--];
for (; k >= 0; k--)
accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
return accumulator;
(function (regexp, str)
"use strict";
let exec = regexp.exec;
let builtinExec = @regExpBuiltinExec;
if (exec !== builtinExec && typeof exec === "function") {
let result = exec.@call(regexp, str);
if (result !== null && !@isObject(result))
@throwTypeError("The result of a RegExp exec must be null or an object");
return result;
return builtinExec.@call(regexp, str);
(function (reason)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not a object");
var promiseCapability = @newPromiseCapability(this);
promiseCapability.@reject.@call(@undefined, reason);
return promiseCapability.@promise;
(function (promise, reason)
"use strict";
var reactions = @getByIdDirectPrivate(promise, "promiseReactions");
@putByIdDirectPrivate(promise, "promiseResult", reason);
@putByIdDirectPrivate(promise, "promiseReactions", @undefined);
@putByIdDirectPrivate(promise, "promiseState", @promiseStateRejected);
@InspectorInstrumentation.promiseRejected(promise, reason, reactions);
if (!@getByIdDirectPrivate(promise, "promiseIsHandled"))
@hostPromiseRejectionTracker(promise, @promiseRejectionReject);
@triggerPromiseReactions(@promiseStateRejected, reactions, reason);
(function (count)
"use strict";
if (this == null)
@throwTypeError("String.prototype.repeat requires that |this| not be null or undefined");
var string = @toString(this);
count = @toInteger(count);
if (count < 0 || count === @Infinity)
@throwRangeError("String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity");
if (string.length === 1)
return @repeatCharacter(string, count);
return @repeatSlowPath(string, count);
(function (string, count)
"use strict";
var repeatCount = (count / string.length) | 0;
var remainingCharacters = count - repeatCount * string.length;
var result = "";
var operand = string;
while (true) {
if (repeatCount & 1)
result += operand;
repeatCount >>= 1;
if (!repeatCount)
break;
operand += operand;
if (remainingCharacters)
result += @stringSubstrInternal.@call(string, 0, remainingCharacters);
return result;
(function (string, count)
"use strict";
if (count === 0 || string.length === 0)
return "";
if (count === 1)
return string;
if (string.length * count > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var result = "";
var operand = string;
while (true) {
if (count & 1)
result += operand;
count >>= 1;
if (!count)
return result;
operand += operand;
(function (strArg, replace)
"use strict";
function getSubstitution(matched, str, position, captures, replacement)
"use strict";
let matchLength = matched.length;
let stringLength = str.length;
let tailPos = position + matchLength;
let m = captures.length;
let replacementLength = replacement.length;
let result = "";
let lastStart = 0;
for (let start = 0; start = replacement.indexOf("$", lastStart), start !== -1; lastStart = start) {
if (start - lastStart > 0)
result = result + replacement.substring(lastStart, start);
start++;
let ch = replacement.charAt(start);
if (ch === "")
result = result + "$";
else {
switch (ch)
case "$":
result = result + "$";
start++;
break;
case "&":
result = result + matched;
start++;
break;
case "`":
if (position > 0)
result = result + str.substring(0, position);
start++;
break;
case "'":
if (tailPos < stringLength)
result = result + str.substring(tailPos);
start++;
break;
default:
let chCode = ch.charCodeAt(0);
if (chCode >= 0x30 && chCode <= 0x39) {
start++;
let n = chCode - 0x30;
if (n > m)
break;
if (start < replacementLength) {
let nextChCode = replacement.charCodeAt(start);
if (nextChCode >= 0x30 && nextChCode <= 0x39) {
let nn = 10 * n + nextChCode - 0x30;
if (nn <= m) {
n = nn;
start++;
if (n == 0)
break;
if (captures[n] != @undefined)
result = result + captures[n];
} else
result = result + "$";
break;
return result + replacement.substring(lastStart);
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@replace requires that |this| be an Object");
let regexp = this;
let str = @toString(strArg);
let stringLength = str.length;
let functionalReplace = typeof replace === 'function';
if (!functionalReplace)
replace = @toString(replace);
let global = regexp.global;
let unicode = false;
if (global) {
unicode = regexp.unicode;
regexp.lastIndex = 0;
let resultList = [];
let result;
let done = false;
while (!done) {
result = @regExpExec(regexp, str);
if (result === null)
done = true;
else {
resultList.@push(result);
if (!global)
done = true;
else {
let matchStr = @toString(result[0]);
if (!matchStr.length)
regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
let accumulatedResult = "";
let nextSourcePosition = 0;
let lastPosition = 0;
for (let i = 0, resultListLength = resultList.length; i < resultListLength; ++i) {
let result = resultList[i];
let nCaptures = result.length - 1;
if (nCaptures < 0)
nCaptures = 0;
let matched = @toString(result[0]);
let matchLength = matched.length;
let position = result.index;
position = (position > stringLength) ? stringLength : position;
position = (position < 0) ? 0 : position;
let captures = [];
for (let n = 1; n <= nCaptures; n++) {
let capN = result[n];
if (capN !== @undefined)
capN = @toString(capN);
captures[n] = capN;
let replacement;
if (functionalReplace) {
let replacerArgs = [ matched ].concat(captures.slice(1));
replacerArgs.@push(position);
replacerArgs.@push(str);
let replValue = replace.@apply(@undefined, replacerArgs);
replacement = @toString(replValue);
} else
replacement = getSubstitution(matched, str, position, captures, replace);
if (position >= nextSourcePosition && position >= lastPosition) {
accumulatedResult = accumulatedResult + str.substring(nextSourcePosition, position) + replacement;
nextSourcePosition = position + matchLength;
lastPosition = position;
if (nextSourcePosition >= stringLength)
return  accumulatedResult;
return accumulatedResult + str.substring(nextSourcePosition);
(function (search, replace)
"use strict";
if (this == null)
@throwTypeError("String.prototype.replace requires that |this| not be null or undefined");
if (search != null) {
let replacer = search.@replaceSymbol;
if (replacer !== @undefined) {
if (!@hasObservableSideEffectsForStringReplace(search, replacer))
return @toString(this).@replaceUsingRegExp(search, replace);
return replacer.@call(search, this, replace);
let thisString = @toString(this);
let searchString = @toString(search);
return thisString.@replaceUsingStringSearch(searchString, replace);
(function (entry, parameters, fetcher)
"use strict";
if (entry.fetch) {
var currentAttempt = entry.fetch;
if (entry.state !== @ModuleFetch)
return currentAttempt;
return currentAttempt.catch((error) => {
if (currentAttempt === entry.fetch)
entry.fetch = @undefined;
return this.requestFetch(entry, parameters, fetcher);
var fetchPromise = this.fetch(entry.key, parameters, fetcher).then((source) => {
@setStateToMax(entry, @ModuleInstantiate);
return source;
entry.fetch = fetchPromise;
return fetchPromise;
(function (key, parameters, fetcher)
"use strict";
return this.requestSatisfy(this.ensureRegistered(key), parameters, fetcher, new @Set).then((entry) => {
this.linkAndEvaluateModule(entry.key, fetcher);
return this.getModuleNamespaceObject(entry.module);
(function (entry, parameters, fetcher)
"use strict";
if (entry.instantiate)
return entry.instantiate;
var instantiatePromise = this.requestFetch(entry, parameters, fetcher).then((source) => {
if (entry.instantiate)
return entry.instantiate;
entry.instantiate = instantiatePromise;
var key = entry.key;
return this.parseModule(key, source).then((moduleRecord) => {
var dependenciesMap = moduleRecord.dependenciesMap;
var requestedModules = this.requestedModules(moduleRecord);
var dependencies = @newArrayWithSize(requestedModules.length);
for (var i = 0, length = requestedModules.length; i < length; ++i) {
var depName = requestedModules[i];
var depKey = this.resolveSync(depName, key, fetcher);
var depEntry = this.ensureRegistered(depKey);
@putByValDirect(dependencies, i, depEntry);
dependenciesMap.@set(depName, depEntry);
entry.dependencies = dependencies;
entry.module = moduleRecord;
@setStateToMax(entry, @ModuleSatisfy);
return entry;
return instantiatePromise;
(function (entry, parameters, fetcher, visited)
"use strict";
if (entry.satisfy)
return entry.satisfy;
visited.@add(entry);
var satisfyPromise = this.requestInstantiate(entry, parameters, fetcher).then((entry) => {
if (entry.satisfy)
return entry.satisfy;
var depLoads = @newArrayWithSize(entry.dependencies.length);
for (var i = 0, length = entry.dependencies.length; i < length; ++i) {
var depEntry = entry.dependencies[i];
var promise;
if (visited.@has(depEntry))
promise = this.requestInstantiate(depEntry, @undefined, fetcher);
else {
promise = this.requestSatisfy(depEntry, @undefined, fetcher, visited);
@putByValDirect(depLoads, i, promise);
return @InternalPromise.internalAll(depLoads).then((entries) => {
if (entry.satisfy)
return entry;
@setStateToMax(entry, @ModuleLink);
entry.satisfy = satisfyPromise;
return entry;
return satisfyPromise;
(function (value)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not a object");
if (@isPromise(value)) {
var valueConstructor = value.constructor;
if (valueConstructor === this)
return value;
var promiseCapability = @newPromiseCapability(this);
promiseCapability.@resolve.@call(@undefined, value);
return promiseCapability.@promise;
(function (value)
"use strict";
const promiseCapability = @newPromiseCapability(@Promise);
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator is not an object.'));
return promiseCapability.@promise;
const syncIterator = @getByIdDirectPrivate(this, "syncIterator");
let returnMethod;
try {
returnMethod = syncIterator.return;
} catch (e) {
promiseCapability.@reject.@call(@undefined, e);
return promiseCapability.@promise;
if (returnMethod === @undefined) {
promiseCapability.@resolve.@call(@undefined, { value, done: true });
return promiseCapability.@promise;
try {
const returnResult = returnMethod.@call(syncIterator, value);
if (!@isObject(returnResult)) {
promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator result interface is not an object.'));
return promiseCapability.@promise;
const { value: resultValue, done: resultDone } = returnResult;
const valueWrapperCapability = @newPromiseCapability(@Promise);
valueWrapperCapability.@resolve.@call(@undefined, resultValue);
valueWrapperCapability.@promise.@then(
function (result) { promiseCapability.@resolve.@call(@undefined, { value: result, done: resultDone }); },
function (error) { promiseCapability.@reject.@call(@undefined, error); });
} catch (e) {
promiseCapability.@reject.@call(@undefined, e);
return promiseCapability.@promise;
(function (value)
"use strict";
return @asyncGeneratorEnqueue(this, value, @GeneratorResumeModeReturn);
(function (value)
"use strict";
var state = @getByIdDirectPrivate(this, "generatorState");
if (typeof state !== "number")
@throwTypeError("|this| should be a generator");
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
return @generatorResume(this, state, @getByIdDirectPrivate(this, "generatorThis"), value, value, @GeneratorResumeModeReturn);
(function (strArg)
"use strict";
let regexp = this;
if (@isRegExpObject(regexp)
&& @tryGetById(regexp, "exec") === @regExpBuiltinExec
&& typeof regexp.lastIndex === "number")
return @regExpSearchFast.@call(regexp, strArg);
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@search requires that |this| be an Object");
let str = @toString(strArg)
let previousLastIndex = regexp.lastIndex;
if (previousLastIndex !== 0)
regexp.lastIndex = 0;
let result = @regExpExec(regexp, str);
if (regexp.lastIndex !== previousLastIndex)
regexp.lastIndex = previousLastIndex;
if (result === null)
return -1;
return result.index;
(function (regexp)
"use strict";
if (this == null)
@throwTypeError("String.prototype.search requires that |this| not be null or undefined");
if (regexp != null) {
var searcher = regexp.@searchSymbol;
if (searcher != @undefined)
return searcher.@call(regexp, this);
var thisString = @toString(this);
var createdRegExp = @regExpCreate(regexp, @undefined);
return createdRegExp.@searchSymbol(thisString);
(function (bucket, kind)
"use strict";
var value;
bucket = @setBucketNext(bucket);
@putByIdDirectPrivate(this, "setBucket", bucket);
var done = bucket === @sentinelSetBucket;
if (!done) {
value = @setBucketKey(bucket);
if (kind === @iterationKindKeyValue)
value = [ value, value ]
return { value, done };
(function (entry, newState)
"use strict";
if (entry.state < newState)
entry.state = newState;
(function ()
"use strict";
return @createHTML("String.prototype.small", this, "small", "", "");
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.some requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (typeof callback !== "function")
@throwTypeError("Array.prototype.some callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
if (callback.@call(thisArg, array[i], i, array))
return true;
return false;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (typeof callback !== "function")
@throwTypeError("TypedArray.prototype.some callback must be a function");
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, this[i], i, this))
return true;
return false;
(function (comparator)
"use strict";
function min(a, b)
return a < b ? a : b;
function stringComparator(a, b)
let aString = a.string;
let bString = b.string;
let aLength = aString.length;
let bLength = bString.length;
let length = min(aLength, bLength);
for (let i = 0; i < length; ++i) {
let aCharCode = aString.@charCodeAt(i);
let bCharCode = bString.@charCodeAt(i);
if (aCharCode == bCharCode)
continue;
return aCharCode - bCharCode;
return aLength - bLength;
function compactSparse(array, dst, src, length)
let values = [ ];
let seen = { };
let valueCount = 0;
let undefinedCount = 0;
for (let i = dst; i < src; ++i)
delete array[i];
for (let object = array; object; object = @Object.@getPrototypeOf(object)) {
let propertyNames = @Object.@getOwnPropertyNames(object);
for (let i = 0; i < propertyNames.length; ++i) {
let index = propertyNames[i];
if (index < length) {
if (seen[index])
continue;
seen[index] = 1;
let value = array[index];
delete array[index];
if (value === @undefined) {
++undefinedCount;
continue;
array[valueCount++] = value;
for (let i = valueCount; i < valueCount + undefinedCount; ++i)
array[i] = @undefined;
return valueCount;
function compactSlow(array, length)
let holeCount = 0;
let dst = 0;
let src = 0;
for (; src < length; ++src) {
if (!(src in array)) {
++holeCount;
if (holeCount < 256)
continue;
return compactSparse(array, dst, src, length);
let value = array[src];
if (value === @undefined)
continue;
array[dst++] = value;
let valueCount = dst;
let undefinedCount = length - valueCount - holeCount;
for (let i = valueCount; i < valueCount + undefinedCount; ++i)
array[i] = @undefined;
for (let i = valueCount + undefinedCount; i < length; ++i)
delete array[i];
return valueCount;
function compact(array, length)
for (let i = 0; i < array.length; ++i) {
if (array[i] === @undefined)
return compactSlow(array, length);
return length;
function merge(dst, src, srcIndex, srcEnd, width, comparator)
let left = srcIndex;
let leftEnd = min(left + width, srcEnd);
let right = leftEnd;
let rightEnd = min(right + width, srcEnd);
for (let dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
if (right < rightEnd) {
if (left >= leftEnd) {
dst[dstIndex] = src[right++];
continue;
let comparisonResult = comparator(src[right], src[left]);
if ((typeof comparisonResult === "boolean" && !comparisonResult) || comparisonResult < 0) {
dst[dstIndex] = src[right++];
continue;
dst[dstIndex] = src[left++];
function mergeSort(array, valueCount, comparator)
let buffer = [ ];
buffer.length = valueCount;
let dst = buffer;
let src = array;
for (let width = 1; width < valueCount; width *= 2) {
for (let srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
merge(dst, src, srcIndex, valueCount, width, comparator);
let tmp = src;
src = dst;
dst = tmp;
if (src != array) {
for(let i = 0; i < valueCount; i++)
array[i] = src[i];
function bucketSort(array, dst, bucket, depth)
if (bucket.length < 32 || depth > 32) {
mergeSort(bucket, bucket.length, stringComparator);
for (let i = 0; i < bucket.length; ++i)
array[dst++] = bucket[i].value;
return dst;
let buckets = [ ];
for (let i = 0; i < bucket.length; ++i) {
let entry = bucket[i];
let string = entry.string;
if (string.length == depth) {
array[dst++] = entry.value;
continue;
let c = string.@charCodeAt(depth);
if (!buckets[c])
buckets[c] = [ ];
buckets[c][buckets[c].length] = entry;
for (let i = 0; i < buckets.length; ++i) {
if (!buckets[i])
continue;
dst = bucketSort(array, dst, buckets[i], depth + 1);
return dst;
function comparatorSort(array, length, comparator)
let valueCount = compact(array, length);
mergeSort(array, valueCount, comparator);
function stringSort(array, length)
let valueCount = compact(array, length);
let strings = @newArrayWithSize(valueCount);
for (let i = 0; i < valueCount; ++i)
strings[i] = { string: @toString(array[i]), value: array[i] };
bucketSort(array, 0, strings, 0);
let sortFunction;
if (typeof comparator == "function")
sortFunction = comparatorSort;
else if (comparator === @undefined)
sortFunction = stringSort;
else
@throwTypeError("Array.prototype.sort requires the comparsion function be a function or undefined");
let array = @toObject(this, "Array.prototype.sort requires that |this| not be null or undefined");
let length = @toLength(array.length);
if (length < 2)
return array;
sortFunction(array, length, comparator);
return array;
(function (comparator)
"use strict";
function min(a, b)
return a < b ? a : b;
function merge(dst, src, srcIndex, srcEnd, width, comparator)
var left = srcIndex;
var leftEnd = min(left + width, srcEnd);
var right = leftEnd;
var rightEnd = min(right + width, srcEnd);
for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
if (right < rightEnd) {
if (left >= leftEnd || comparator(src[right], src[left]) < 0) {
dst[dstIndex] = src[right++];
continue;
dst[dstIndex] = src[left++];
function mergeSort(array, valueCount, comparator)
var buffer = [ ];
buffer.length = valueCount;
var dst = buffer;
var src = array;
for (var width = 1; width < valueCount; width *= 2) {
for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
merge(dst, src, srcIndex, valueCount, width, comparator);
var tmp = src;
src = dst;
dst = tmp;
if (src != array) {
for(var i = 0; i < valueCount; i++)
array[i] = src[i];
var length = @typedArrayLength(this);
if (length < 2)
return;
if (typeof comparator == "function")
mergeSort(this, length, comparator);
else
@typedArraySort(this);
return this;
(function (obj, defaultConstructor)
"use strict";
var constructor = obj.constructor;
if (constructor === @undefined)
return defaultConstructor;
if (!@isObject(constructor))
@throwTypeError("|this|.constructor is not an Object or undefined");
constructor = constructor.@speciesSymbol;
if (constructor == null)
return defaultConstructor;
if (@isConstructor(constructor))
return constructor;
@throwTypeError("|this|.constructor[Symbol.species] is not a constructor");
(function ()
"use strict";
return this;
(function (string, limit)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@split requires that |this| be an Object");
let regexp = this;
let str = @toString(string);
let speciesConstructor = @speciesConstructor(regexp, @RegExp);
if (speciesConstructor === @RegExp && !@hasObservableSideEffectsForRegExpSplit(regexp))
return @regExpSplitFast.@call(regexp, str, limit);
let flags = @toString(regexp.flags);
let unicodeMatching = @stringIncludesInternal.@call(flags, "u");
let newFlags = @stringIncludesInternal.@call(flags, "y") ? flags : flags + "y";
let splitter = new speciesConstructor(regexp, newFlags);
if (!@hasObservableSideEffectsForRegExpSplit(splitter))
return @regExpSplitFast.@call(splitter, str, limit);
let result = [];
limit = (limit === @undefined) ? 0xffffffff : limit >>> 0;
if (!limit)
return result;
let size = str.length;
if (!size) {
let z = @regExpExec(splitter, str);
if (z != null)
return result;
@putByValDirect(result, 0, str);
return result;
let position = 0;
let matchPosition = 0;
while (matchPosition < size) {
splitter.lastIndex = matchPosition;
let matches = @regExpExec(splitter, str);
if (matches === null)
matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
else {
let endPosition = @toLength(splitter.lastIndex);
endPosition = (endPosition <= size) ? endPosition : size;
if (endPosition === position)
matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
else {
let subStr = @stringSubstrInternal.@call(str, position, matchPosition - position);
@putByValDirect(result, result.length, subStr);
if (result.length == limit)
return result;
position = endPosition;
let numberOfCaptures = matches.length > 1 ? matches.length - 1 : 0;
let i = 1;
while (i <= numberOfCaptures) {
let nextCapture = matches[i];
@putByValDirect(result, result.length, nextCapture);
if (result.length == limit)
return result;
i++;
matchPosition = position;
let remainingStr = @stringSubstrInternal.@call(str, position, size);
@putByValDirect(result, result.length, remainingStr);
return result;
(function (separator, limit)
"use strict";
if (this == null)
@throwTypeError("String.prototype.split requires that |this| not be null or undefined");
if (separator != null) {
var splitter = separator.@splitSymbol;
if (splitter != @undefined)
return splitter.@call(separator, this, limit);
return @stringSplitFast.@call(this, separator, limit);
(function ()
"use strict";
return @createHTML("String.prototype.strike", this, "strike", "", "");
(function ()
"use strict";
var result = @toString(this);
for (var i = 0, length = arguments.length; i < length; ++i)
result += @toString(arguments[i]);
return result;
(function ()
"use strict";
return @createHTML("String.prototype.sub", this, "sub", "", "");
(function (begin, end)
"use strict";
if (!@isTypedArrayView(this))
@throwTypeError("|this| should be a typed array view");
let start = @toInteger(begin);
let finish;
if (end !== @undefined)
finish = @toInteger(end);
let constructor = @typedArraySpeciesConstructor(this);
return @typedArraySubarrayCreate.@call(this, start, finish, constructor);
(function ()
"use strict";
return @createHTML("String.prototype.sup", this, "sup", "", "");
(function (value)
"use strict";
if (typeof this !== "function")
return false;
if (@isBoundFunction(this))
return @hasInstanceBoundFunction(this, value);
let target = this.prototype;
return @instanceOf(value, target);
(function (strArg)
"use strict";
let regexp = this;
if (@isRegExpObject(regexp)
&& @tryGetById(regexp, "exec") === @regExpBuiltinExec
&& typeof regexp.lastIndex === "number")
return @regExpTestFast.@call(regexp, strArg);
if (!@isObject(regexp))
@throwTypeError("RegExp.prototype.test requires that |this| be an Object");
let str = @toString(strArg);
let match = @regExpExec(regexp, str);
if (match !== null)
return true;
return false;
(function (onFulfilled, onRejected)
"use strict";
if (!@isPromise(this))
@throwTypeError("|this| is not a object");
var constructor = @speciesConstructor(this, @Promise);
var resultCapability = @newPromiseCapability(constructor);
if (typeof onFulfilled !== "function")
onFulfilled = function (argument) { return argument; };
if (typeof onRejected !== "function")
onRejected = function (argument) { throw argument; };
var reaction = @newPromiseReaction(resultCapability, onFulfilled, onRejected);
var state = @getByIdDirectPrivate(this, "promiseState");
if (state === @promiseStatePending) {
var reactions = @getByIdDirectPrivate(this, "promiseReactions");
@putByValDirect(reactions, reactions.length, reaction);
} else {
if (state === @promiseStateRejected && !@getByIdDirectPrivate(this, "promiseIsHandled"))
@hostPromiseRejectionTracker(this, @promiseRejectionHandle);
@enqueueJob(@promiseReactionJob, [state, reaction, @getByIdDirectPrivate(this, "promiseResult")]);
@putByIdDirectPrivate(this, "promiseIsHandled", true);
return resultCapability.@promise;
(function (exception)
"use strict";
const promiseCapability = @newPromiseCapability(@Promise);
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator is not an object.'));
return promiseCapability.@promise;
const syncIterator = @getByIdDirectPrivate(this, "syncIterator");
let throwMethod;
try {
throwMethod = syncIterator.throw;
} catch (e) {
promiseCapability.@reject.@call(@undefined, e);
return promiseCapability.@promise;
if (throwMethod === @undefined) {
promiseCapability.@reject.@call(@undefined, exception);
return promiseCapability.@promise;
try {
const throwResult = throwMethod.@call(syncIterator, exception);
if (!@isObject(throwResult)) {
promiseCapability.@reject.@call(@undefined, new @TypeError('Iterator result interface is not an object.'));
return promiseCapability.@promise;
const { value: throwValue, done: throwDone } = throwResult;
const valueWrapperCapability = @newPromiseCapability(@Promise);
valueWrapperCapability.@resolve.@call(@undefined, throwValue);
valueWrapperCapability.@promise.@then(
function (result) { promiseCapability.@resolve.@call(@undefined, { value: result, done: throwDone }); },
function (error) { promiseCapability.@reject.@call(@undefined, error); });
} catch (e) {
promiseCapability.@reject.@call(@undefined, e);
return promiseCapability.@promise;
(function (exception)
"use strict";
return @asyncGeneratorEnqueue(this, exception, @GeneratorResumeModeThrow);
(function (exception)
"use strict";
var state = @getByIdDirectPrivate(this, "generatorState");
if (typeof state !== "number")
@throwTypeError("|this| should be a generator");
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
if (state === @GeneratorStateCompleted)
throw exception;
return @generatorResume(this, state, @getByIdDirectPrivate(this, "generatorThis"), exception, @undefined, @GeneratorResumeModeThrow);
(function (target)
"use strict";
var numberValue = +target;
if (numberValue !== numberValue)
return 0;
return @trunc(numberValue);
(function (target)
"use strict";
var length = @toInteger(target);
return +(length > 0 ? (length < @MAX_SAFE_INTEGER ? length : @MAX_SAFE_INTEGER) : 0);
(function ()
"use strict";
function toDateTimeOptionsDateDate(opts)
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.weekday === @undefined &&
options.year === @undefined &&
options.month === @undefined &&
options.day === @undefined
if (needsDefaults) {
options = @Object.@create(options);
options.year = "numeric";
options.month = "numeric";
options.day = "numeric";
return options;
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = toDateTimeOptionsDateDate(@argument(1));
var locales = @argument(0);
var dateFormat = new @DateTimeFormat(locales, options);
return dateFormat.format(value);
(function ()
"use strict";
function toDateTimeOptionsAnyAll(opts)
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.weekday === @undefined &&
options.year === @undefined &&
options.month === @undefined &&
options.day === @undefined &&
options.hour === @undefined &&
options.minute === @undefined &&
options.second === @undefined
if (needsDefaults) {
options = @Object.@create(options);
options.year = "numeric";
options.month = "numeric";
options.day = "numeric";
options.hour = "numeric";
options.minute = "numeric";
options.second = "numeric";
return options;
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = toDateTimeOptionsAnyAll(@argument(1));
var locales = @argument(0);
var dateFormat = new @DateTimeFormat(locales, options);
return dateFormat.format(value);
(function ()
"use strict";
var number = @thisNumberValue.@call(this);
var numberFormat = new @NumberFormat(@argument(0), @argument(1));
return numberFormat.format(number);
(function ()
"use strict";
var length = @typedArrayLength(this);
if (length == 0)
return "";
var string = this[0].toLocaleString(@argument(0), @argument(1));
for (var i = 1; i < length; i++)
string += "," + this[i].toLocaleString(@argument(0), @argument(1));
return string;
(function ()
"use strict";
function toDateTimeOptionsTimeTime(opts)
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.hour === @undefined &&
options.minute === @undefined &&
options.second === @undefined
if (needsDefaults) {
options = @Object.@create(options);
options.hour = "numeric";
options.minute = "numeric";
options.second = "numeric";
return options;
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = toDateTimeOptionsTimeTime(@argument(1));
var locales = @argument(0);
var dateFormat = new @DateTimeFormat(locales, options);
return dateFormat.format(value);
(function (state, reactions, argument)
"use strict";
for (var index = 0, length = reactions.length; index < length; ++index)
@enqueueJob(@promiseReactionJob, [state, reactions[index], argument]);
(function (value, length, undefinedValue)
"use strict";
if (value === @undefined)
return undefinedValue;
let int = @toInteger(value);
if (int < 0) {
int += length;
return int < 0 ? 0 : int;
return int > length ? length : int;
(function (value)
"use strict";
let constructor = value.constructor;
if (constructor === @undefined)
return @typedArrayGetOriginalConstructor(value);
if (!@isObject(constructor))
@throwTypeError("|this|.constructor is not an Object or undefined");
constructor = constructor.@speciesSymbol;
if (constructor == null)
return @typedArrayGetOriginalConstructor(value);
return constructor;
(function ()
"use strict";
return new @createArrayIterator(@toObject(this, "Array.prototype.values requires that |this| not be null or undefined"), "value", @arrayIteratorValueNext);
(function ()
"use strict";
if (!@isMap(this))
@throwTypeError("Map.prototype.values requires that |this| be Map");
return new @createMapIterator(this, @iterationKindValue);
(function ()
"use strict";
if (!@isSet(this))
@throwTypeError("Set.prototype.values requires that |this| be Set");
return new @createSetIterator(this, @iterationKindValue);
(function ()
"use strict";
@typedArrayLength(this);
return new @createArrayIterator(this, "value", @arrayIteratorValueNext);
com.apple.JavaScriptCore.remote-inspector-xpc
WIRPageIdentifierKey
WIRAutomaticInspectionCandidateMessage
WIRRawDataKey
WIRConnectionIdentifierKey
WIRDestinationKey
WIRRawDataMessage
com.apple.webinspectord.available
com.apple.webinspectord.availability_check
com.apple.webinspector
WIRPermissionDenied
WIRSocketDataMessage
WIRSocketSetupMessage
WIRWebPageCloseMessage
WIRApplicationGetListingMessage
WIRIndicateMessage
WIRProxyApplicationSetupMessage
WIRConnectionDiedMessage
WIRAutomaticInspectionConfigurationMessage
WIRAutomaticInspectionRejectMessage
WIRAutomationSessionRequestMessage
Unrecognized RemoteInspector XPC Message: %@
WIRTitleKey
WIRTypeJavaScript
WIRTypeKey
WIRURLKey
WIRTypeServiceWorker
WIRTypeWeb
WIRHasLocalDebuggerKey
WIRSessionIdentifierKey
WIRTypeAutomation
WIRAutomationTargetIsPairedKey
WIRAutomationTargetNameKey
WIRAutomationTargetVersionKey
WIRListingKey
WIRRemoteAutomationEnabledKey
WIRListingMessage
WIRSenderKey
WIRAutomaticallyPause
WIRSocketDataKey
WIRIndicateEnabledKey
WIRProxyApplicationSetupResponseMessage
WIRProxyApplicationParentPID
WIRProxyApplicationParentAuditData
WIRAutomaticInspectionEnabledKey
WIRSessionCapabilitiesKey
org.webkit.webdriver.webrtc.allow-insecure-media-capture
org.webkit.webdriver.webrtc.suppress-ice-candidate-filtering
v8@?0@"NSObject<OS_xpc_object>"4
msgData
messageName
userInfo
mach-lookup
com.apple.webinspectord.automatic_inspection_enabled
API Wrapper
CallbackConstructor
CallbackObject
CallbackGlobalObject
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator5.2.sdk/usr/local/include/wtf/text/StringBuilder.h
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSDestructibleObject>::call(JSC::ExecState *) [Parent = JSC::JSDestructibleObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSDestructibleObject>::construct(JSC::ExecState *) [Parent = JSC::JSDestructibleObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSGlobalObject>::call(JSC::ExecState *) [Parent = JSC::JSGlobalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSGlobalObject>::construct(JSC::ExecState *) [Parent = JSC::JSGlobalObject]
() at 
API Marking Constraint #
anonymous
./API/JSScriptRef.cpp
JSValueRef JSScriptEvaluate(JSContextRef, JSScriptRef, JSValueRef, JSValueRef *)
JSObjectMakeTypedArrayWithArrayBuffer expects buffer to be an Array Buffer object
Cannot get the backing buffer for a WebAssembly.Memory
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/IndexingHeader.h
void JSC::IndexingHeader::setVectorLength(uint32_t)
Unexpected error compiling builtin: 
Parsed #
Failed to parse #
 in 
 ms.
./API/JSTypedArray.cpp
JSTypedArrayType toJSTypedArrayType(JSC::TypedArrayType)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/TypedArrayType.h
unsigned int JSC::logElementSize(JSC::TypedArrayType)
JSC::TypedArrayType toTypedArrayType(JSTypedArrayType)
JSC::JSObject *createTypedArray(JSC::ExecState *, JSTypedArrayType, RefPtr<JSC::ArrayBuffer> &&, size_t, size_t)
Length out of range of buffer
Byte offset is not aligned
./API/JSWeakValue.cpp
void JSC::JSWeakValue::clear()
bool JSC::JSWeakValue::isClear() const
(null)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/JSObject.h
JSC::JSValue JSC::JSObject::tryGetIndexQuickly(unsigned int) const
./builtins/BuiltinExecutables.cpp
static JSC::SourceCode JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)
static JSC::UnlinkedFunctionExecutable *JSC::BuiltinExecutables::createExecutable(JSC::VM &, const JSC::SourceCode &, const JSC::Identifier &, JSC::ConstructorKind, JSC::ConstructAbility)
use strict
Metadata of parser and hand rolled parser don't match
[Symbol.match]
[Symbol.replace]
[Symbol.search]
get [Symbol.species]
[Symbol.split]
[Symbol.asyncIterator]
[Symbol.hasInstance]
[Symbol.iterator]
Symbol.hasInstance
Symbol.isConcatSpreadable
Symbol.asyncIterator
Symbol.iterator
Symbol.match
Symbol.replace
Symbol.search
Symbol.species
Symbol.split
Symbol.toPrimitive
Symbol.toStringTag
Symbol.unscopables
PrivateSymbol.AsyncFromSyncIteratorConstructor
PrivateSymbol.advanceStringIndex
PrivateSymbol.all
PrivateSymbol.allocateFloat32Array
PrivateSymbol.allocateFloat64Array
PrivateSymbol.allocateInt16Array
PrivateSymbol.allocateInt32Array
PrivateSymbol.allocateInt8Array
PrivateSymbol.allocateUint16Array
PrivateSymbol.allocateUint32Array
PrivateSymbol.allocateUint8Array
PrivateSymbol.allocateUint8ClampedArray
PrivateSymbol.anchor
PrivateSymbol.apply
PrivateSymbol.arrayIteratorKeyNext
PrivateSymbol.arrayIteratorKeyValueNext
PrivateSymbol.arrayIteratorValueNext
PrivateSymbol.arraySpeciesCreate
PrivateSymbol.asyncFunctionResume
PrivateSymbol.asyncGeneratorDequeue
PrivateSymbol.asyncGeneratorEnqueue
PrivateSymbol.asyncGeneratorQueueDequeue
PrivateSymbol.asyncGeneratorQueueEnqueue
PrivateSymbol.asyncGeneratorQueueIsEmpty
PrivateSymbol.asyncGeneratorReject
PrivateSymbol.asyncGeneratorResolve
PrivateSymbol.asyncGeneratorResumeNext
PrivateSymbol.asyncGeneratorYield
PrivateSymbol.awaitValue
PrivateSymbol.big
PrivateSymbol.bind
PrivateSymbol.blink
PrivateSymbol.bold
PrivateSymbol.call
PrivateSymbol.catch
PrivateSymbol.compileStreaming
PrivateSymbol.concat
PrivateSymbol.concatSlowPath
PrivateSymbol.copyDataProperties
PrivateSymbol.copyDataPropertiesNoExclusions
PrivateSymbol.copyWithin
PrivateSymbol.createArrayIterator
PrivateSymbol.createAsyncFromSyncIterator
PrivateSymbol.createHTML
PrivateSymbol.createMapIterator
PrivateSymbol.createResolvingFunctions
PrivateSymbol.createSetIterator
PrivateSymbol.deleteProperty
PrivateSymbol.doAsyncGeneratorBodyCall
PrivateSymbol.ensureRegistered
PrivateSymbol.entries
PrivateSymbol.every
PrivateSymbol.fill
PrivateSymbol.filter
PrivateSymbol.finally
PrivateSymbol.find
PrivateSymbol.findIndex
PrivateSymbol.fixed
PrivateSymbol.flat
PrivateSymbol.flatIntoArray
PrivateSymbol.flatIntoArrayWithCallback
PrivateSymbol.flatMap
PrivateSymbol.fontcolor
PrivateSymbol.fontsize
PrivateSymbol.forEach
PrivateSymbol.forceFulfillPromise
PrivateSymbol.from
PrivateSymbol.fromEntries
PrivateSymbol.fulfillFetch
PrivateSymbol.fulfillPromise
PrivateSymbol.generatorResume
PrivateSymbol.getCatchFinally
PrivateSymbol.getDefaultCollator
PrivateSymbol.getThenFinally
PrivateSymbol.has
PrivateSymbol.hasObservableSideEffectsForRegExpMatch
PrivateSymbol.hasObservableSideEffectsForRegExpSplit
PrivateSymbol.hasObservableSideEffectsForStringReplace
PrivateSymbol.includes
PrivateSymbol.initializePromise
PrivateSymbol.instantiateStreaming
PrivateSymbol.internalAll
PrivateSymbol.isArray
PrivateSymbol.isDictionary
PrivateSymbol.isExecutionState
PrivateSymbol.isFinite
PrivateSymbol.isNaN
PrivateSymbol.isPromise
PrivateSymbol.isSuspendYieldState
PrivateSymbol.italics
PrivateSymbol.keys
PrivateSymbol.link
PrivateSymbol.linkAndEvaluateModule
PrivateSymbol.loadAndEvaluateModule
PrivateSymbol.loadModule
PrivateSymbol.localeCompare
PrivateSymbol.map
PrivateSymbol.mapIteratorNext
PrivateSymbol.match
PrivateSymbol.matchSlow
PrivateSymbol.moduleEvaluation
PrivateSymbol.newHandledRejectedPromise
PrivateSymbol.newPromiseCapability
PrivateSymbol.newPromiseReaction
PrivateSymbol.newRegistryEntry
PrivateSymbol.next
PrivateSymbol.of
PrivateSymbol.padEnd
PrivateSymbol.padStart
PrivateSymbol.performIteration
PrivateSymbol.promiseFulfilled
PrivateSymbol.promiseReactionJob
PrivateSymbol.promiseRejected
PrivateSymbol.promiseResolveThenableJob
PrivateSymbol.provideFetch
PrivateSymbol.race
PrivateSymbol.raw
PrivateSymbol.reduce
PrivateSymbol.reduceRight
PrivateSymbol.regExpExec
PrivateSymbol.reject
PrivateSymbol.rejectPromise
PrivateSymbol.repeat
PrivateSymbol.repeatCharactersSlowPath
PrivateSymbol.repeatSlowPath
PrivateSymbol.replace
PrivateSymbol.requestFetch
PrivateSymbol.requestImportModule
PrivateSymbol.requestInstantiate
PrivateSymbol.requestSatisfy
PrivateSymbol.resolve
PrivateSymbol.return
PrivateSymbol.search
PrivateSymbol.setIteratorNext
PrivateSymbol.setStateToMax
PrivateSymbol.small
PrivateSymbol.some
PrivateSymbol.sort
PrivateSymbol.speciesConstructor
PrivateSymbol.speciesGetter
PrivateSymbol.split
PrivateSymbol.strike
PrivateSymbol.stringConcatSlowPath
PrivateSymbol.sub
PrivateSymbol.subarray
PrivateSymbol.sup
PrivateSymbol.symbolAsyncIteratorGetter
PrivateSymbol.symbolHasInstance
PrivateSymbol.symbolIteratorGetter
PrivateSymbol.test
PrivateSymbol.then
PrivateSymbol.throw
PrivateSymbol.toInteger
PrivateSymbol.toLength
PrivateSymbol.toLocaleDateString
PrivateSymbol.toLocaleString
PrivateSymbol.toLocaleTimeString
PrivateSymbol.triggerPromiseReactions
PrivateSymbol.typedArrayClampArgumentToStartOrEnd
PrivateSymbol.typedArraySpeciesConstructor
PrivateSymbol.values
PrivateSymbol.argument
PrivateSymbol.argumentCount
PrivateSymbol.getByIdDirect
PrivateSymbol.getByIdDirectPrivate
PrivateSymbol.idWithProfile
PrivateSymbol.isObject
PrivateSymbol.isJSArray
PrivateSymbol.isProxyObject
PrivateSymbol.isDerivedArray
PrivateSymbol.isRegExpObject
PrivateSymbol.isMap
PrivateSymbol.isSet
PrivateSymbol.tailCallForwardArguments
PrivateSymbol.throwTypeError
PrivateSymbol.throwRangeError
PrivateSymbol.throwOutOfMemoryError
PrivateSymbol.tryGetById
PrivateSymbol.putByIdDirect
PrivateSymbol.putByIdDirectPrivate
PrivateSymbol.putByValDirect
PrivateSymbol.toNumber
PrivateSymbol.toString
PrivateSymbol.toObject
PrivateSymbol.newArrayWithSize
PrivateSymbol.defineEnumerableWritableConfigurableDataProperty
PrivateSymbol.undefined
PrivateSymbol.Infinity
PrivateSymbol.iterationKindKey
PrivateSymbol.iterationKindValue
PrivateSymbol.iterationKindKeyValue
PrivateSymbol.MAX_ARRAY_INDEX
PrivateSymbol.MAX_STRING_LENGTH
PrivateSymbol.MAX_SAFE_INTEGER
PrivateSymbol.ModuleFetch
PrivateSymbol.ModuleTranslate
PrivateSymbol.ModuleInstantiate
PrivateSymbol.ModuleSatisfy
PrivateSymbol.ModuleLink
PrivateSymbol.ModuleReady
PrivateSymbol.promiseRejectionReject
PrivateSymbol.promiseRejectionHandle
PrivateSymbol.promiseStatePending
PrivateSymbol.promiseStateFulfilled
PrivateSymbol.promiseStateRejected
PrivateSymbol.sentinelMapBucket
PrivateSymbol.sentinelSetBucket
PrivateSymbol.GeneratorResumeModeNormal
PrivateSymbol.GeneratorResumeModeThrow
PrivateSymbol.GeneratorResumeModeReturn
PrivateSymbol.GeneratorStateCompleted
PrivateSymbol.GeneratorStateExecuting
PrivateSymbol.AsyncGeneratorStateCompleted
PrivateSymbol.AsyncGeneratorStateExecuting
PrivateSymbol.AsyncGeneratorStateAwaitingReturn
PrivateSymbol.AsyncGeneratorStateSuspendedStart
PrivateSymbol.AsyncGeneratorStateSuspendedYield
PrivateSymbol.AsyncGeneratorSuspendReasonYield
PrivateSymbol.AsyncGeneratorSuspendReasonAwait
PrivateSymbol.AsyncGeneratorSuspendReasonNone
PrivateSymbol.add
PrivateSymbol.arrayIteratorNextIndex
PrivateSymbol.arrayIterationKind
PrivateSymbol.arrayIteratorNext
PrivateSymbol.arrayIteratorIsDone
PrivateSymbol.arrayIteratorKind
PrivateSymbol.assert
PrivateSymbol.charCodeAt
PrivateSymbol.executor
PrivateSymbol.isView
PrivateSymbol.iteratedObject
PrivateSymbol.iteratedString
PrivateSymbol.stringIteratorNextIndex
PrivateSymbol.promise
PrivateSymbol.Object
PrivateSymbol.Number
PrivateSymbol.Array
PrivateSymbol.ArrayBuffer
PrivateSymbol.String
PrivateSymbol.RegExp
PrivateSymbol.Map
PrivateSymbol.Promise
PrivateSymbol.Reflect
PrivateSymbol.InternalPromise
PrivateSymbol.abs
PrivateSymbol.floor
PrivateSymbol.trunc
PrivateSymbol.create
PrivateSymbol.defineProperty
PrivateSymbol.getPrototypeOf
PrivateSymbol.getOwnPropertyDescriptor
PrivateSymbol.getOwnPropertyNames
PrivateSymbol.ownKeys
PrivateSymbol.Error
PrivateSymbol.RangeError
PrivateSymbol.Set
PrivateSymbol.TypeError
PrivateSymbol.typedArrayLength
PrivateSymbol.typedArraySort
PrivateSymbol.typedArrayGetOriginalConstructor
PrivateSymbol.typedArraySubarrayCreate
PrivateSymbol.BuiltinLog
PrivateSymbol.BuiltinDescribe
PrivateSymbol.homeObject
PrivateSymbol.templateRegistryKey
PrivateSymbol.enqueueJob
PrivateSymbol.hostPromiseRejectionTracker
PrivateSymbol.promiseIsHandled
PrivateSymbol.promiseState
PrivateSymbol.promiseReactions
PrivateSymbol.promiseResult
PrivateSymbol.onFulfilled
PrivateSymbol.onRejected
PrivateSymbol.push
PrivateSymbol.repeatCharacter
PrivateSymbol.capabilities
PrivateSymbol.starDefault
PrivateSymbol.InspectorInstrumentation
PrivateSymbol.get
PrivateSymbol.set
PrivateSymbol.shift
PrivateSymbol.allocateTypedArray
PrivateSymbol.Int8Array
PrivateSymbol.Int16Array
PrivateSymbol.Int32Array
PrivateSymbol.Uint8Array
PrivateSymbol.Uint8ClampedArray
PrivateSymbol.Uint16Array
PrivateSymbol.Uint32Array
PrivateSymbol.Float32Array
PrivateSymbol.Float64Array
PrivateSymbol.exec
PrivateSymbol.generator
PrivateSymbol.generatorNext
PrivateSymbol.generatorState
PrivateSymbol.generatorFrame
PrivateSymbol.generatorValue
PrivateSymbol.generatorThis
PrivateSymbol.syncIterator
PrivateSymbol.nextMethod
PrivateSymbol.asyncGeneratorState
PrivateSymbol.asyncGeneratorSuspendReason
PrivateSymbol.asyncGeneratorQueue
PrivateSymbol.asyncGeneratorQueueFirst
PrivateSymbol.asyncGeneratorQueueLast
PrivateSymbol.asyncGeneratorQueueItemNext
PrivateSymbol.asyncGeneratorQueueItemPrevious
PrivateSymbol.generatorResumeMode
PrivateSymbol.Collator
PrivateSymbol.DateTimeFormat
PrivateSymbol.NumberFormat
PrivateSymbol.PluralRules
PrivateSymbol.intlSubstituteValue
PrivateSymbol.thisTimeValue
PrivateSymbol.thisNumberValue
PrivateSymbol.newTargetLocal
PrivateSymbol.derivedConstructor
PrivateSymbol.isTypedArrayView
PrivateSymbol.isBoundFunction
PrivateSymbol.hasInstanceBoundFunction
PrivateSymbol.instanceOf
PrivateSymbol.isArraySlow
PrivateSymbol.isArrayConstructor
PrivateSymbol.isConstructor
PrivateSymbol.concatMemcpy
PrivateSymbol.appendMemcpy
PrivateSymbol.regExpCreate
PrivateSymbol.replaceUsingRegExp
PrivateSymbol.replaceUsingStringSearch
PrivateSymbol.mapBucket
PrivateSymbol.mapBucketHead
PrivateSymbol.mapBucketNext
PrivateSymbol.mapBucketKey
PrivateSymbol.mapBucketValue
PrivateSymbol.mapIteratorKind
PrivateSymbol.setBucket
PrivateSymbol.setBucketHead
PrivateSymbol.setBucketNext
PrivateSymbol.setBucketKey
PrivateSymbol.setIteratorKind
PrivateSymbol.regExpBuiltinExec
PrivateSymbol.regExpMatchFast
PrivateSymbol.regExpProtoFlagsGetter
PrivateSymbol.regExpProtoGlobalGetter
PrivateSymbol.regExpProtoIgnoreCaseGetter
PrivateSymbol.regExpProtoMultilineGetter
PrivateSymbol.regExpProtoSourceGetter
PrivateSymbol.regExpProtoStickyGetter
PrivateSymbol.regExpProtoUnicodeGetter
PrivateSymbol.regExpPrototypeSymbolReplace
PrivateSymbol.regExpSearchFast
PrivateSymbol.regExpSplitFast
PrivateSymbol.regExpTestFast
PrivateSymbol.stringIncludesInternal
PrivateSymbol.stringSplitFast
PrivateSymbol.stringSubstrInternal
PrivateSymbol.makeBoundFunction
PrivateSymbol.hasOwnLengthProperty
PrivateSymbol.importModule
PrivateSymbol.propertyIsEnumerable
PrivateSymbol.WebAssembly
PrivateSymbol.Module
PrivateSymbol.Instance
PrivateSymbol.Memory
PrivateSymbol.Table
PrivateSymbol.CompileError
PrivateSymbol.LinkError
PrivateSymbol.RuntimeError
PrivateSymbol.meta
PrivateSymbol.webAssemblyCompileStreamingInternal
PrivateSymbol.webAssemblyInstantiateStreamingInternal
PrivateSymbol.$vm
PrivateSymbol.PolyProto
AsyncFromSyncIteratorConstructor
advanceStringIndex
allocateFloat32Array
allocateFloat64Array
allocateInt16Array
allocateInt32Array
allocateInt8Array
allocateUint16Array
allocateUint32Array
allocateUint8Array
allocateUint8ClampedArray
anchor
apply
arrayIteratorKeyNext
arrayIteratorKeyValueNext
arrayIteratorValueNext
arraySpeciesCreate
asyncFunctionResume
asyncGeneratorDequeue
asyncGeneratorEnqueue
asyncGeneratorQueueDequeue
asyncGeneratorQueueEnqueue
asyncGeneratorQueueIsEmpty
asyncGeneratorReject
asyncGeneratorResolve
asyncGeneratorResumeNext
asyncGeneratorYield
awaitValue
bind
blink
bold
call
catch
compileStreaming
concat
concatSlowPath
copyDataProperties
copyDataPropertiesNoExclusions
copyWithin
createArrayIterator
createAsyncFromSyncIterator
createHTML
createMapIterator
createResolvingFunctions
createSetIterator
deleteProperty
doAsyncGeneratorBodyCall
ensureRegistered
entries
every
fill
filter
finally
find
findIndex
fixed
flat
flatIntoArray
flatIntoArrayWithCallback
flatMap
fontcolor
fontsize
forEach
forceFulfillPromise
from
fromEntries
fulfillFetch
fulfillPromise
generatorResume
getCatchFinally
getDefaultCollator
getThenFinally
hasObservableSideEffectsForRegExpMatch
hasObservableSideEffectsForRegExpSplit
hasObservableSideEffectsForStringReplace
includes
initializePromise
instantiateStreaming
internalAll
isDictionary
isExecutionState
isFinite
isNaN
isPromise
isSuspendYieldState
italics
keys
link
linkAndEvaluateModule
loadAndEvaluateModule
loadModule
localeCompare
mapIteratorNext
match
matchSlow
moduleEvaluation
newHandledRejectedPromise
newPromiseCapability
newPromiseReaction
newRegistryEntry
next
padEnd
padStart
performIteration
promiseFulfilled
promiseReactionJob
promiseRejected
promiseResolveThenableJob
provideFetch
race
reduce
reduceRight
regExpExec
reject
rejectPromise
repeat
repeatCharactersSlowPath
repeatSlowPath
replace
requestFetch
requestImportModule
requestInstantiate
requestSatisfy
resolve
return
search
setIteratorNext
setStateToMax
small
some
sort
speciesConstructor
speciesGetter
split
strike
stringConcatSlowPath
subarray
symbolAsyncIteratorGetter
symbolHasInstance
symbolIteratorGetter
test
then
throw
toInteger
toLength
toLocaleDateString
toLocaleString
toLocaleTimeString
triggerPromiseReactions
typedArrayClampArgumentToStartOrEnd
typedArraySpeciesConstructor
values
argument
argumentCount
getByIdDirect
getByIdDirectPrivate
idWithProfile
isJSArray
isProxyObject
isDerivedArray
isRegExpObject
isMap
isSet
tailCallForwardArguments
throwTypeError
throwRangeError
throwOutOfMemoryError
tryGetById
putByIdDirect
putByIdDirectPrivate
putByValDirect
toNumber
toString
toObject
newArrayWithSize
defineEnumerableWritableConfigurableDataProperty
undefined
iterationKindKey
iterationKindValue
iterationKindKeyValue
MAX_ARRAY_INDEX
MAX_STRING_LENGTH
MAX_SAFE_INTEGER
ModuleFetch
ModuleTranslate
ModuleInstantiate
ModuleSatisfy
ModuleLink
ModuleReady
promiseRejectionReject
promiseRejectionHandle
promiseStatePending
promiseStateFulfilled
promiseStateRejected
sentinelMapBucket
sentinelSetBucket
GeneratorResumeModeNormal
GeneratorResumeModeThrow
GeneratorResumeModeReturn
GeneratorStateCompleted
GeneratorStateExecuting
AsyncGeneratorStateCompleted
AsyncGeneratorStateExecuting
AsyncGeneratorStateAwaitingReturn
AsyncGeneratorStateSuspendedStart
AsyncGeneratorStateSuspendedYield
AsyncGeneratorSuspendReasonYield
AsyncGeneratorSuspendReasonAwait
AsyncGeneratorSuspendReasonNone
arrayIteratorNextIndex
arrayIterationKind
arrayIteratorNext
arrayIteratorIsDone
arrayIteratorKind
assert
charCodeAt
executor
isView
iteratedObject
iteratedString
stringIteratorNextIndex
promise
Number
Array
ArrayBuffer
RegExp
Promise
Reflect
InternalPromise
floor
trunc
create
getPrototypeOf
getOwnPropertyDescriptor
getOwnPropertyNames
ownKeys
Error
RangeError
TypeError
typedArrayLength
typedArraySort
typedArrayGetOriginalConstructor
typedArraySubarrayCreate
BuiltinLog
BuiltinDescribe
homeObject
templateRegistryKey
enqueueJob
hostPromiseRejectionTracker
promiseIsHandled
promiseState
promiseReactions
promiseResult
onFulfilled
onRejected
push
repeatCharacter
capabilities
starDefault
InspectorInstrumentation
shift
allocateTypedArray
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
exec
generator
generatorNext
generatorState
generatorFrame
generatorValue
generatorThis
syncIterator
nextMethod
asyncGeneratorState
asyncGeneratorSuspendReason
asyncGeneratorQueue
asyncGeneratorQueueFirst
asyncGeneratorQueueLast
asyncGeneratorQueueItemNext
asyncGeneratorQueueItemPrevious
generatorResumeMode
Collator
DateTimeFormat
NumberFormat
PluralRules
intlSubstituteValue
thisTimeValue
thisNumberValue
newTargetLocal
derivedConstructor
isTypedArrayView
isBoundFunction
hasInstanceBoundFunction
instanceOf
isArraySlow
isArrayConstructor
isConstructor
concatMemcpy
appendMemcpy
regExpCreate
replaceUsingRegExp
replaceUsingStringSearch
mapBucket
mapBucketHead
mapBucketNext
mapBucketKey
mapBucketValue
mapIteratorKind
setBucket
setBucketHead
setBucketNext
setBucketKey
setIteratorKind
regExpBuiltinExec
regExpMatchFast
regExpProtoFlagsGetter
regExpProtoGlobalGetter
regExpProtoIgnoreCaseGetter
regExpProtoMultilineGetter
regExpProtoSourceGetter
regExpProtoStickyGetter
regExpProtoUnicodeGetter
regExpPrototypeSymbolReplace
regExpSearchFast
regExpSplitFast
regExpTestFast
stringIncludesInternal
stringSplitFast
stringSubstrInternal
makeBoundFunction
hasOwnLengthProperty
importModule
propertyIsEnumerable
WebAssembly
Module
Instance
Memory
Table
CompileError
LinkError
RuntimeError
meta
webAssemblyCompileStreamingInternal
webAssemblyInstantiateStreamingInternal
hasInstanceSymbol
isConcatSpreadableSymbol
asyncIteratorSymbol
iteratorSymbol
matchSymbol
replaceSymbol
searchSymbol
speciesSymbol
splitSymbol
toPrimitiveSymbol
toStringTagSymbol
unscopablesSymbol
(function () { })
(function (...args) { super(...args); })
./bytecode/AdaptiveInferredPropertyValueWatchpointBase.cpp
JSC::AdaptiveInferredPropertyValueWatchpointBase::AdaptiveInferredPropertyValueWatchpointBase(const JSC::ObjectPropertyCondition &)
void JSC::AdaptiveInferredPropertyValueWatchpointBase::install(JSC::VM &)
Int32
Int52Overflow
BigInt
NonArray
NonArrayWithInt32
NonArrayWithDouble
NonArrayWithContiguous
NonArrayWithArrayStorage
NonArrayWithSlowPutArrayStorage
ArrayClass
ArrayWithUndecided
ArrayWithInt32
ArrayWithDouble
ArrayWithContiguous
ArrayWithArrayStorage
ArrayWithSlowPutArrayStorage
CopyOnWriteArrayWithInt32
CopyOnWriteArrayWithDouble
CopyOnWriteArrayWithContiguous
OutOfBounds
: %lu instructions (%lu wide instructions, %lu instructions with metadata); %lu bytes (%lu metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)
; scope at 
[%4u] %-18s 
Identifiers:
  id%u = %s
Constants:
: in source as double
: in source as integer
   k%u = %s%s
Exception Handlers:
 %d: { start: [%4d] end: [%4d] target: [%4d] } %s
Switch Jump Tables:
  %1d = {
%4d => %04d
      }
String Switch Jump Tables:
"%s" => %04d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/JSGlobalObject.h
JSC::LazyClassStructure &JSC::JSGlobalObject::lazyTypedArrayStructure(JSC::TypedArrayType)
synthesized catch
synthesized finally
./bytecode/CodeBlock.h
JSC::HandlerInfo &JSC::CodeBlock::exceptionHandler(int)
JSC::SimpleJumpTable &JSC::CodeBlock::switchJumpTable(int)
JSC::StringJumpTable &JSC::CodeBlock::stringSwitchJumpTable(int)
*create_this
*tail_call
*call_eval
*call_varargs
*tail_call_varargs
*tail_call_forward_arguments
*construct
*construct_varargs
*to_this
*jneq_ptr
*get_argument
*resolve_scope
*get_from_scope
*put_to_scope
*get_from_arguments
*in_by_val
*new_object
*get_by_id
*get_by_id_with_this
*catch
*get_by_val_with_this
*get_by_id_direct
*try_get_by_id
*call
*profile_type
*profile_control_flow
*new_array
*has_indexed_property
*add
OperandTypes(
*get_by_val
*get_direct_pname
*put_by_val
*mul
*put_by_val_direct
*div
*sub
*bitand
*bitor
*to_object
*to_number
*negate
*bitxor
*bitnot
*new_array_with_size
*new_array_buffer
*put_by_id
*is_cell_with_type
*in_by_id
*put_by_id_with_this
*del_by_id
*put_by_val_with_this
*del_by_val
*put_getter_by_id
*put_setter_by_id
*put_getter_setter_by_id
*put_getter_by_val
*put_setter_by_val
*define_data_property
*define_accessor_property
*jmp
*jtrue
*jfalse
*jeq_null
*jneq_null
*jeq
*jstricteq
*jneq
*jnstricteq
*jless
*jlesseq
*jgreater
*jgreatereq
*jnless
*jnlesseq
*wide
*jngreatereq
*jbelow
*jbeloweq
*loop_hint
*switch_imm
*switch_char
*switch_string
*new_func
*new_func_exp
*new_generator_func
*new_generator_func_exp
*new_async_func
*new_async_func_exp
*new_async_generator_func
*new_async_generator_func_exp
*set_function_name
*ret
*strcat
*to_primitive
*put_to_arguments
*push_with_scope
*create_lexical_environment
*get_parent_scope
*throw
*throw_static_error
*debug
*end
*get_enumerable_length
*has_structure_property
*has_generic_property
*get_property_enumerator
*enumerator_structure_pname
*enumerator_generic_pname
*to_index_string
*unreachable
*create_rest
*get_rest_length
*yield
*check_traps
*log_shadow_chicken_prologue
*log_shadow_chicken_tail
*resolve_scope_for_hoisting_func_decl_in_eval
*nop
*super_sampler_begin
*super_sampler_end
*jngreater
*enter
*get_scope
*create_direct_arguments
*create_scoped_arguments
*create_cloned_arguments
*argument_count
*check_tdz
*new_array_with_spread
*spread
*new_regexp
*mov
*neq
*stricteq
*nstricteq
*less
*lesseq
*greater
*greatereq
*below
*beloweq
*mod
*pow
*lshift
*rshift
*urshift
*eq_null
*neq_null
*to_string
*unsigned
*is_empty
*is_undefined
*is_boolean
*is_number
*is_object
*is_object_or_null
*is_function
*inc
*dec
*not
*identity_with_profile
*overrides_has_instance
*instanceof
*instanceof_custom
*typeof
Dumping bytecode liveness for 
Bytecode basic block %u: %p (offset: %u, length: %u)
Predecessors:
Successors:
Entry block %p
Exit block: %p
Live variables:
Call
Construct
./bytecode/BytecodeUseDef.h
void JSC::computeDefsForBytecodeOffset(Block *, JSC::OpcodeID, const JSC::Instruction *, const Functor &) [Block = JSC::UnlinkedCodeBlock, Functor = (lambda at ./bytecode/BytecodeLivenessAnalysisInlines.h:86:9)]
void JSC::computeUsesForBytecodeOffset(Block *, JSC::OpcodeID, const JSC::Instruction *, const Functor &) [Block = JSC::UnlinkedCodeBlock, Functor = (lambda at ./bytecode/BytecodeLivenessAnalysisInlines.h:93:9)]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/SymbolTable.h
void JSC::SymbolTable::set(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry]
void JSC::SymbolTableEntry::pack(JSC::VarOffset, bool, bool, bool)
void JSC::computeDefsForBytecodeOffset(Block *, JSC::OpcodeID, const JSC::Instruction *, const Functor &) [Block = JSC::CodeBlock, Functor = (lambda at ./bytecode/BytecodeLivenessAnalysisInlines.h:86:9)]
void JSC::computeUsesForBytecodeOffset(Block *, JSC::OpcodeID, const JSC::Instruction *, const Functor &) [Block = JSC::CodeBlock, Functor = (lambda at ./bytecode/BytecodeLivenessAnalysisInlines.h:93:9)]
CodeBlock
<global>
<eval>
<module>
./bytecode/CodeBlock.cpp
JSC::CodeBlockHash JSC::CodeBlock::hash() const
function 
<no-hash>
 (ShouldAlwaysBeInlined)
 (NeverInline)
 (NeverOptimize)
 (NeverFTLOptimize)
 (DidTryToEnterInLoop)
 (StrictMode)
 (JITFail)
 (FTLFail)
 (HadFTLReplacement)
bool JSC::CodeBlock::finishCreation(JSC::VM &, JSC::ScriptExecutable *, JSC::UnlinkedCodeBlock *, JSC::JSScope *)
Clearing LLInt property access.
Clearing LLInt put transition.
Clearing LLInt to_this with structure %p.
Clearing LLInt create_this with cached callee %p.
Clearing dead symbolTable %p.
JSC::HandlerInfo *JSC::CodeBlock::handlerForBytecodeOffset(unsigned int, JSC::RequiredHandler)
void JSC::CodeBlock::ensureCatchLivenessIsComputedForBytecodeOffsetSlow(const JSC::OpCatch &, InstructionStream::Offset)
unsigned int JSC::CodeBlock::lineNumberForBytecodeOffset(unsigned int)
jettison
void JSC::CodeBlock::jettison(Profiler::JettisonReason, JSC::ReoptimizationMode, const JSC::FireDetail *)
Noticing call link from 
 to 
unsigned int JSC::CodeBlock::frameRegisterCount()
this
arguments[%3d]
    Wrong number of bits in result!
    Result: 
    Bit count: 
    Variable 
 is expected to be dead.
    entrypoint not allowed inside a try block.
Validation failure in 
Validation failure.
void JSC::CodeBlock::endValidationDidFail()
void JSC::CodeBlock::insertBasicBlockBoundariesForControlFlowProfiler()
Optional<unsigned int> JSC::CodeBlock::bytecodeOffsetFromCallSiteIndex(JSC::CallSiteIndex)
<null codeBlock>
./bytecode/CodeOrigin.cpp
Vector<JSC::CodeOrigin> JSC::CodeOrigin::inlineStack() const
<none>
 --> 
(closure) 
Global
Eval
Function
Linking put_to_scope in 
 for 
Clearing scope access with structure %p.
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/HashMapImpl.h
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKey> >::rehash(JSC::ExecState *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKey>]
Clearing LLInt call from 
due to 
, counting = 
, detail = 
 at 
EvalCodeBlock
ExecutableToCodeBlockEdge
None
Int52
Cell
Boolean
Unset
BadType
BadCell
BadIdent
BadExecutable
BadCache
BadConstantCache
BadIndexingType
BadTypeInfoFlags
Overflow
NegativeZero
StoreToHole
LoadFromHole
InadequateCoverage
ArgumentsEscaped
ExoticObjectMode
VarargsOverflow
TDZFailure
HoistingFailed
Uncountable
UncountableInvalidation
WatchdogTimerFired
DebuggerEvent
ExceptionCheck
GenericUnwind
./bytecode/ExitKind.cpp
const char *JSC::exitKindToString(JSC::ExitKind)
FunctionCodeBlock
./bytecode/LLIntPrototypeLoadAdaptiveStructureWatchpoint.cpp
JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::LLIntPrototypeLoadAdaptiveStructureWatchpoint(const JSC::ObjectPropertyCondition &, OpGetById::Metadata &)
void JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::install(JSC::VM &)
ModuleProgramCodeBlock
<invalid>
./bytecode/ObjectPropertyConditionSet.cpp
op_create_this
op_tail_call
op_call_eval
op_call_varargs
op_tail_call_varargs
op_tail_call_forward_arguments
op_construct
op_construct_varargs
op_to_this
op_jneq_ptr
op_get_argument
op_resolve_scope
op_get_from_scope
op_put_to_scope
op_get_from_arguments
op_in_by_val
op_new_object
op_get_by_id
op_get_by_id_with_this
op_catch
op_get_by_val_with_this
op_get_by_id_direct
op_try_get_by_id
op_call
op_profile_type
op_profile_control_flow
op_new_array
op_has_indexed_property
op_add
op_get_by_val
op_get_direct_pname
op_put_by_val
op_mul
op_put_by_val_direct
op_div
op_sub
op_bitand
op_bitor
op_to_object
op_to_number
op_negate
op_bitxor
op_bitnot
op_new_array_with_size
op_new_array_buffer
op_put_by_id
op_is_cell_with_type
op_in_by_id
op_put_by_id_with_this
op_del_by_id
op_put_by_val_with_this
op_del_by_val
op_put_getter_by_id
op_put_setter_by_id
op_put_getter_setter_by_id
op_put_getter_by_val
op_put_setter_by_val
op_define_data_property
op_define_accessor_property
op_jmp
op_jtrue
op_jfalse
op_jeq_null
op_jneq_null
op_jeq
op_jstricteq
op_jneq
op_jnstricteq
op_jless
op_jlesseq
op_jgreater
op_jgreatereq
op_jnless
op_jnlesseq
op_wide
op_jngreatereq
op_jbelow
op_jbeloweq
op_loop_hint
op_switch_imm
op_switch_char
op_switch_string
op_new_func
op_new_func_exp
op_new_generator_func
op_new_generator_func_exp
op_new_async_func
op_new_async_func_exp
op_new_async_generator_func
op_new_async_generator_func_exp
op_set_function_name
op_ret
op_strcat
op_to_primitive
op_put_to_arguments
op_push_with_scope
op_create_lexical_environment
op_get_parent_scope
op_throw
op_throw_static_error
op_debug
op_end
op_get_enumerable_length
op_has_structure_property
op_has_generic_property
op_get_property_enumerator
op_enumerator_structure_pname
op_enumerator_generic_pname
op_to_index_string
op_unreachable
op_create_rest
op_get_rest_length
op_yield
op_check_traps
op_log_shadow_chicken_prologue
op_log_shadow_chicken_tail
op_resolve_scope_for_hoisting_func_decl_in_eval
op_nop
op_super_sampler_begin
op_super_sampler_end
op_jngreater
op_enter
op_get_scope
op_create_direct_arguments
op_create_scoped_arguments
op_create_cloned_arguments
op_argument_count
op_check_tdz
op_new_array_with_spread
op_spread
op_new_regexp
op_mov
op_eq
op_neq
op_stricteq
op_nstricteq
op_less
op_lesseq
op_greater
op_greatereq
op_below
op_beloweq
op_mod
op_pow
op_lshift
op_rshift
op_urshift
op_eq_null
op_neq_null
op_to_string
op_unsigned
op_is_empty
op_is_undefined
op_is_boolean
op_is_number
op_is_object
op_is_object_or_null
op_is_function
op_inc
op_dec
op_not
op_identity_with_profile
op_overrides_has_instance
op_instanceof
op_instanceof_custom
op_typeof
llint_cloop_did_return_from_js_23
getHostCallReturnValue
llint_return_to_host
llint_vm_entry_to_javascript
llint_vm_entry_to_native
llint_cloop_did_return_from_js_1
llint_cloop_did_return_from_js_2
llint_cloop_did_return_from_js_3
llint_cloop_did_return_from_js_4
llint_cloop_did_return_from_js_5
llint_cloop_did_return_from_js_6
llint_cloop_did_return_from_js_7
llint_cloop_did_return_from_js_8
llint_cloop_did_return_from_js_9
llint_cloop_did_return_from_js_10
llint_cloop_did_return_from_js_11
llint_cloop_did_return_from_js_12
llint_cloop_did_return_from_js_13
llint_cloop_did_return_from_js_14
llint_cloop_did_return_from_js_15
llint_cloop_did_return_from_js_16
llint_cloop_did_return_from_js_17
llint_cloop_did_return_from_js_18
llint_cloop_did_return_from_js_19
llint_cloop_did_return_from_js_20
llint_cloop_did_return_from_js_21
llint_cloop_did_return_from_js_22
llint_entry
handleUncaughtException
llint_eval_prologue
llint_module_program_prologue
llint_function_for_call_prologue
llint_function_for_construct_prologue
llint_function_for_call_arity_check
llint_function_for_construct_arity_check
llint_generic_return_point
llint_throw_from_slow_path_trampoline
llint_throw_during_call_trampoline
llint_native_call_trampoline
llint_native_construct_trampoline
llint_internal_function_call_trampoline
llint_internal_function_construct_trampoline
llint_program_prologue
JSC::ObjectPropertyCondition JSC::(anonymous namespace)::generateCondition(JSC::VM &, JSC::JSCell *, JSC::JSObject *, WTF::UniquedStringImpl *, PropertyCondition::Kind)
ProgramCodeBlock
 of 
 with attributes 
 with prototype 
 with 
./bytecode/PropertyCondition.cpp
void JSC::PropertyCondition::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
bool JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(JSC::Structure *, JSC::JSObject *) const
bool JSC::PropertyCondition::isWatchableWhenValid(JSC::Structure *, JSC::PropertyCondition::WatchabilityEffort) const
Presence
Absence
Equivalence
HasPrototype
void WTF::printInternal(WTF::PrintStream &, JSC::PropertyCondition::Kind)
IsDirect
CallFunction
ApplyFunction
ObjectConstructor
ArrayConstructor
TableSize
OtherCell
OtherObj
Final
Float32array
DirectArguments
ScopedArguments
StringObject
RegExpObject
MapObject
SetObject
WeakMapObject
WeakSetObject
ProxyObject
DerivedArray
DataView
StringIdent
StringVar
Symbol
BoolInt32
NonBoolInt32
BytecodeDouble
AnyIntAsDouble
NonIntAsdouble
DoublePureNan
DoubleImpureNan
Bool
Other
Empty
./bytecode/SpeculatedType.cpp
JSC::SpeculatedType JSC::speculationFromTypedArrayType(JSC::TypedArrayType)
SpecNone
SpecFinalObject
SpecArray
SpecFunction
SpecInt8Array
SpecInt16Array
SpecInt32Array
SpecUint8Array
SpecUint8ClampedArray
SpecUint16Array
SpecUint32Array
SpecFloat32Array
SpecFloat64Array
SpecTypedArrayView
SpecDirectArguments
SpecScopedArguments
SpecStringObject
SpecRegExpObject
SpecMapObject
SpecSetObject
SpecWeakMapObject
SpecWeakSetObject
SpecProxyObject
SpecDerivedArray
SpecDataViewObject
SpecObjectOther
SpecObject
SpecStringIdent
SpecStringVar
SpecString
SpecSymbol
SpecBigInt
SpecCellOther
SpecCell
SpecBoolInt32
SpecNonBoolInt32
SpecInt32Only
SpecInt52Only
SpecAnyInt
SpecAnyIntAsDouble
SpecNonIntAsDouble
SpecDoubleReal
SpecDoublePureNaN
SpecDoubleImpureNaN
SpecDoubleNaN
SpecBytecodeDouble
SpecFullDouble
SpecBytecodeRealNumber
SpecFullRealNumber
SpecBytecodeNumber
SpecFullNumber
SpecBoolean
SpecOther
SpecMisc
SpecHeapTop
SpecPrimitive
SpecEmpty
SpecBytecodeTop
SpecFullTop
SpecCellCheck
JSC::SpeculatedType JSC::speculationFromString(const char *)
JSC Super Sampler
Percent time behind super sampler flag: 
./bytecode/ToThisStatus.cpp
JSC::ToThisStatus JSC::merge(JSC::ToThisStatus, JSC::ToThisStatus)
UnlinkedCodeBlock
./bytecode/UnlinkedCodeBlock.cpp
JSC::BytecodeLivenessAnalysis &JSC::UnlinkedCodeBlock::livenessAnalysisSlow(JSC::CodeBlock *)
void JSC::UnlinkedCodeBlock::addOutOfLineJumpTarget(InstructionStream::Offset, int)
UnlinkedEvalCodeBlock
UnlinkedFunctionCodeBlock
UnlinkedFunctionExecutable
UnlinkedModuleProgramCodeBlock
Failed to compile #
Compiled #
 into bytecode 
 instructions in 
WARNING: Super sampler undercount detected!
UnlinkedProgramCodeBlock
./bytecode/ValueRecovery.cpp
JSC::JSValue JSC::ValueRecovery::recover(JSC::ExecState *) const
Write to 
head
const
./bytecode/Watchpoint.cpp
void JSC::WatchpointSet::fireAllWatchpoints(JSC::VM &, const JSC::FireDetail &)
<null property name>
./bytecompiler/BytecodeGenerator.cpp
int JSC::BoundLabel::target()
JSC::ParserError JSC::BytecodeGenerator::generate()
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::ProgramNode *, JSC::UnlinkedProgramCodeBlock *, JSC::DebuggerMode, const JSC::VariableEnvironment *)
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::ModuleProgramNode *, JSC::UnlinkedModuleProgramCodeBlock *, JSC::DebuggerMode, const JSC::VariableEnvironment *)
void JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(JSC::SymbolTable *, bool)
void JSC::BytecodeGenerator::initializeParameters(JSC::FunctionParameters &)
void JSC::BytecodeGenerator::initializeVarLexicalEnvironment(int, JSC::SymbolTable *, bool)
void JSC::BytecodeGenerator::emitProfileControlFlow(int)
void JSC::BytecodeGenerator::initializeBlockScopedFunctions(JSC::VariableEnvironment &, JSC::BytecodeGenerator::FunctionStack &, JSC::RegisterID *)
void JSC::BytecodeGenerator::hoistSloppyModeFunctionIfNecessary(const JSC::Identifier &)
void JSC::BytecodeGenerator::popLexicalScopeInternal(JSC::VariableEnvironment &)
void JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(JSC::VariableEnvironmentNode *, JSC::RegisterID *)
Trying to add variable called 
 as 
 but it was already added as 
void JSC::BytecodeGenerator::createVariable(const JSC::Identifier &, JSC::VarKind, JSC::SymbolTable *, JSC::BytecodeGenerator::ExistingVariableMode)
JSC::RegisterID *JSC::BytecodeGenerator::emitResolveScope(JSC::RegisterID *, const JSC::Variable &)
JSC::RegisterID *JSC::BytecodeGenerator::emitGetFromScope(JSC::RegisterID *, JSC::RegisterID *, const JSC::Variable &, JSC::ResolveMode)
JSC::RegisterID *JSC::BytecodeGenerator::emitPutToScope(JSC::RegisterID *, const JSC::Variable &, JSC::RegisterID *, JSC::ResolveMode, JSC::InitializationMode)
JSC::RegisterID *JSC::BytecodeGenerator::initializeVariable(const JSC::Variable &, JSC::RegisterID *)
void JSC::BytecodeGenerator::emitTDZCheckIfNecessary(const JSC::Variable &, JSC::RegisterID *, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeGenerator::emitNewArrayWithSpread(JSC::RegisterID *, JSC::ElementNode *)
Cannot return a non-object type in the constructor of a derived class.
JSC::RegisterID *JSC::BytecodeGenerator::emitConstruct(JSC::RegisterID *, JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &)
void JSC::BytecodeGenerator::emitPopWithScope()
void JSC::BytecodeGenerator::emitWillLeaveCallFrameDebugHook()
Out of memory
void JSC::BytecodeGenerator::beginSwitch(JSC::RegisterID *, SwitchInfo::SwitchType)
void JSC::BytecodeGenerator::endSwitch(uint32_t, const Vector<Ref<JSC::Label>, 8> &, JSC::ExpressionNode **, JSC::Label &, int32_t, int32_t)
Iterator result interface is not an object.
Delegated generator does not have a 'throw' method.
'super()' can't be called more than once in a constructor.
Postfix ++ operator applied to value that is not a reference.
Postfix -- operator applied to value that is not a reference.
Cannot delete a super property
Prefix ++ operator applied to value that is not a reference.
Prefix -- operator applied to value that is not a reference.
./bytecompiler/NodesCodegen.cpp
virtual JSC::RegisterID *JSC::BinaryOpNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Right hand side of instanceof is not an object
Left side of assignment is not a reference.
virtual void JSC::EmptyStatementNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
void JSC::ForInNode::emitLoopHeader(JSC::BytecodeGenerator &, JSC::RegisterID *)
Left side of for-in statement is not a reference.
Left side of for-of statement is not a reference.
The superclass is not an object.
The value of the superclass's prototype property is not an object.
virtual JSC::RegisterID *JSC::ClassExprNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Right side of assignment cannot be destructured
virtual void JSC::RestParameterNode::bindValue(JSC::BytecodeGenerator &, JSC::RegisterID *) const
virtual JSC::RegisterID *JSC::SpreadExpressionNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
ProfileTypeBytecodeClosureVar
ProfileTypeBytecodeLocallyResolved
ProfileTypeBytecodeDoesNotHaveGlobalID
ProfileTypeBytecodeFunctionArgument
ProfileTypeBytecodeFunctionReturnStatement
Disabling watching in symbol table
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/JSImmutableButterfly.h
static JSC::JSImmutableButterfly *JSC::JSImmutableButterfly::create(JSC::VM &, JSC::IndexingType, unsigned int)
JSC::RegisterID *JSC::emitReadModifyAssignment(JSC::BytecodeGenerator &, JSC::RegisterID *, JSC::RegisterID *, JSC::ExpressionNode *, JSC::Operator, JSC::OperandTypes, JSC::ReadModifyResolveNode *)
void JSC::SymbolTable::set(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry &]
void JSC::SymbolTable::add(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry &]
auto JSC::BytecodeGenerator::addBigIntConstant(const JSC::Identifier &, uint8_t, bool)::(anonymous class)::operator()() const
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpCall]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpTailCall]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpCallEval]
boolean
number
string
symbol
bigint
object
function
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/bytecode/BytecodeUseDef.h
void JSC::computeDefsForBytecodeOffset(Block *, JSC::OpcodeID, const JSC::Instruction *, const Functor &) [Block = JSC::UnlinkedCodeBlock, Functor = (lambda at ./bytecompiler/BytecodeGenerator.cpp:4822:78)]
./debugger/Debugger.cpp
void JSC::Debugger::resolveBreakpoint(JSC::Breakpoint &, JSC::SourceProvider *)
JSC::BreakpointID JSC::Debugger::setBreakpoint(JSC::Breakpoint &, bool &)
./debugger/DebuggerCallFrame.cpp
static Ref<JSC::DebuggerCallFrame> JSC::DebuggerCallFrame::create(JSC::VM &, JSC::CallFrame *)
DebuggerScope
./debugger/DebuggerScope.cpp
JSC::JSValue JSC::DebuggerScope::caughtValue(JSC::ExecState *) const
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/ExceptionScope.h
void JSC::ExceptionScope::releaseAssertNoException()
%sdisassembly not available for range %p...%p
Asynchronous Disassembler
0x%x-0x%x
./heap/AlignedMemoryAllocator.cpp
void JSC::AlignedMemoryAllocator::registerDirectory(JSC::BlockDirectory *)
void JSC::AlignedMemoryAllocator::registerSubspace(JSC::Subspace *)
./heap/BlockDirectory.cpp
void JSC::BlockDirectory::prepareForAllocation()
./heap/CodeBlockSet.cpp
void JSC::CodeBlockSet::add(JSC::CodeBlock *)
void JSC::CodeBlockSet::remove(JSC::CodeBlock *)
Eden
Full
./heap/CollectionScope.cpp
const char *JSC::collectionScopeName(JSC::CollectionScope)
./heap/CollectorPhase.cpp
bool JSC::worldShouldBeSuspended(JSC::CollectorPhase)
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator5.2.sdk/usr/local/include/wtf/SinglyLinkedListWithTail.h
void WTF::SinglyLinkedListWithTail<JSC::BlockDirectory>::append(SetNextFunc &&, T *) [T = JSC::BlockDirectory, SetNextFunc = std::__1::__mem_fn<void (JSC::BlockDirectory::*)(JSC::BlockDirectory *)>]
void WTF::SinglyLinkedListWithTail<JSC::Subspace>::append(SetNextFunc &&, T *) [T = JSC::Subspace, SetNextFunc = std::__1::__mem_fn<void (JSC::Subspace::*)(JSC::Subspace *)>]
Live
Allocated
CanAllocateButNotEmpty
Destructible
Unswept
MarkingNotEmpty
MarkingRetired
    
./heap/CompleteSubspace.cpp
void *JSC::CompleteSubspace::allocateSlow(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
FATAL: attampting to allocate small object using large allocation.
Requested allocation size: 
void *JSC::CompleteSubspace::tryAllocateSlow(JSC::VM &, size_t, JSC::GCDeferralContext *)
FastMalloc
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/heap/CompleteSubspace.h
JSC::Allocator JSC::CompleteSubspace::allocatorForNonVirtual(size_t, JSC::AllocatorForMode)
./heap/ConservativeRoots.cpp
void JSC::ConservativeRoots::genericAddSpan(void *, void *, MarkHook &) [MarkHook = JSC::CompositeMarkHook]
./heap/GCConductor.cpp
const char *JSC::gcConductorShortName(JSC::GCConductor)
Basic
Verbose
./heap/GCLogging.cpp
static const char *JSC::GCLogging::levelAsString(JSC::GCLogging::Level)
Gigacage
InferredValue clean-up during GC
[GC<
>: shutdown 
./heap/Heap.cpp
void JSC::Heap::lastChanceToFinalize()
...]
FATAL: Shared collector mark stack not empty! It has 
 elements.
FATAL: Shared mutator mark stack not empty! It has 
void JSC::Heap::assertMarkStacksEmpty()
void JSC::Heap::endMarking()
void JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)
void JSC::Heap::deleteAllUnlinkedCodeBlocks(JSC::DeleteAllCodeEffort)
void JSC::Heap::addToRememberedSet(const JSC::JSCell *)
Full sweep: 
kb, 
void JSC::Heap::collect(JSC::Synchronousness, JSC::GCRequest)
void JSC::Heap::collectNow(JSC::Synchronousness, JSC::GCRequest)
bool JSC::Heap::shouldCollectInCollectorThread(const WTF::AbstractLocker &)
void JSC::Heap::collectInCollectorThread()
void JSC::Heap::checkConn(JSC::GCConductor)
bool JSC::Heap::runBeginPhase(JSC::GCConductor)
>: START 
Collection scope already set during GC: 
Fatal: SlotVisitor should think that GC should terminate before constraint solving, but it does not think this.
slotVisitor.isEmpty(): 
slotVisitor.collectorMarkStack().isEmpty(): 
slotVisitor.mutatorMarkStack().isEmpty(): 
m_numberOfActiveParallelMarkers: 
m_sharedCollectorMarkStack->isEmpty(): 
m_sharedMutatorMarkStack->isEmpty(): 
slotVisitor.didReachTermination(): 
bool JSC::Heap::runFixpointPhase(JSC::GCConductor)
kb (
) o=
ms (max 
)...]
bool JSC::Heap::runConcurrentPhase(JSC::GCConductor)
), cycle 
ms END]
bool JSC::Heap::finishChangingPhase(JSC::GCConductor)
FATAL: world already stopped.
void JSC::Heap::stopThePeriphery(JSC::GCConductor)
Fatal: collector does not believe that the world is stopped.
void JSC::Heap::resumeThePeriphery()
bool JSC::Heap::stopTheMutator()
Fatal: hasAccess = 
, stopped = 
void JSC::Heap::resumeTheMutator()
Fatal: mutator has the conn.
void JSC::Heap::stopIfNecessarySlow()
bool JSC::Heap::stopIfNecessarySlow(unsigned int)
void JSC::Heap::acquireAccessSlow()
FATAL: Attempting to release access but the mutator does not have access.
void JSC::Heap::releaseAccessSlow()
FATAL: Attempting to release access but the mutator is stopped.
bool JSC::Heap::relinquishConn(unsigned int)
bool JSC::Heap::handleGCDidJIT(unsigned int)
bool JSC::Heap::handleNeedFinalize(unsigned int)
>: finalize 
Heap::Ticket JSC::Heap::requestCollection(JSC::GCRequest)
FullCollection, 
EdenCollection, 
void JSC::Heap::didFinishCollection()
Conservative Scan
Misc Small Roots
Strong Handles
Debugger
Weak Sets
Output
CodeBlocks
>: starting 
JSC DEBUG Continuous GC
void JSC::Heap::preventCollection()
Primitive
JSValue
JSC Heap Collector Thread
<nullopt>
auto JSC::Heap::lastChanceToFinalize()::(anonymous class)::operator()(const WTF::AbstractLocker &) const
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/WeakMapImplInlines.h
void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey> >::finalizeUnconditionally(JSC::VM &) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>]
void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue> >::finalizeUnconditionally(JSC::VM &) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>]
FATAL: Visitor 
 is not empty!
[unknown]
auto JSC::Heap::runBeginPhase(JSC::GCConductor)::(anonymous class)::operator()() const
auto JSC::Heap::collectInMutatorThread()::(anonymous class)::operator()(JSC::CurrentThreadState &) const
Cell %p is a root but no root marking reason was supplied
<root>
"version":1
"type":
"nodes":
0,0,0,0,0,"0x0","0x0"
0,0,0,0
"nodeClassNames":
"edges":
"edgeTypes":
"edgeNames":
"roots":
Failed to find snapshot node for cell %p
"labels":
./heap/IsoAlignedMemoryAllocator.cpp
virtual void *JSC::IsoAlignedMemoryAllocator::tryAllocateAlignedMemory(size_t, size_t)
virtual void JSC::IsoAlignedMemoryAllocator::freeAlignedMemory(void *)
Iso(
Inspector
GCDebugging
"%p"
Internal
Property
Index
Variable
Conservative scan
Strong references
Protected values
Mark list set
VM exceptions
Strong handles
JIT stub routines
Weak sets
DFG work lists
Code blocks
DOM GC output
./heap/MarkedBlockInlines.h
auto JSC::MarkedBlock::Handle::finishSweepKnowingHeapCellType(JSC::FreeList *, const JSC::DefaultDestroyFunc &)::(anonymous class)::operator()() const
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::DefaultDestroyFunc]
Block 
: marks not empty!
Block lock is held: 
Marking version of block: 
Marking version of heap: 
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
Heap Helper Thread
Failed to find node for from-edge cell %p
Failed to find node for to-edge cell %p
./heap/IsoCellSet.cpp
void JSC::IsoCellSet::sweepToFreeList(MarkedBlock::Handle *)
FATAL: for block index 
Blocks with bits says: 
Bits says: 
FATAL: 
->~LocalAllocator has non-empty free-list.
->~LocalAllocator has non-null current block.
->~LocalAllocator has non-null last active block.
./heap/LocalAllocator.cpp
JSC::LocalAllocator::~LocalAllocator()
void *JSC::LocalAllocator::allocateSlowCase(JSC::GCDeferralContext *, JSC::AllocationFailureMode)
void *JSC::LocalAllocator::tryAllocateWithoutCollecting()
void *JSC::LocalAllocator::allocateIn(MarkedBlock::Handle *)
./heap/MachineStackMarker.cpp
bool JSC::MachineThreads::tryCopyOtherThreadStacks(const WTF::AbstractLocker &, void *, size_t, size_t *, WTF::Thread &)
JavaScript garbage collection encountered an invalid thread (err 0x%x): Thread [%d/%d: %p].
./heap/MarkStack.cpp
void JSC::MarkStackArray::transferTo(JSC::MarkStackArray &)
size_t JSC::MarkStackArray::transferTo(JSC::MarkStackArray &, size_t)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/heap/IsoSubspace.h
JSC::Allocator JSC::IsoSubspace::allocatorForNonVirtual(size_t, JSC::AllocatorForMode)
./heap/AllocatingScope.h
JSC::AllocatingScope::AllocatingScope(JSC::Heap &)
JSC::AllocatingScope::~AllocatingScope()
void JSC::copyMemory(void *, const void *, size_t)
auto JSC::LocalAllocator::tryAllocateIn(MarkedBlock::Handle *)::(anonymous class)::operator()() const
Mark Stack Merging
./heap/MarkedBlock.cpp
void JSC::MarkedBlock::Handle::unsweepWithNoNewlyAllocated()
void JSC::MarkedBlock::Handle::didAddToDirectory(JSC::BlockDirectory *, size_t)
->sweep: block is free-listed.
void JSC::MarkedBlock::Handle::sweep(JSC::FreeList *)
->sweep: block is allocated.
./heap/MarkedSpace.cpp
void JSC::MarkedSpace::sweepLargeAllocations()
./heap/MarkingConstraintSolver.cpp
void JSC::MarkingConstraintSolver::execute(JSC::MarkingConstraintSolver::SchedulerPreference, ScopedLambda<Optional<unsigned int> ()>)
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:456:260)]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:459:254)]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:482:217)]
Block size: 
Footer size: 
    Marked block payload size: 
    Next size class as a double: 
    Next size class as bytes: 
auto JSC::(anonymous namespace)::sizeClasses()::(anonymous class)::operator()() const
    Size class: 
    Possibly better size class: 
    Original wastage: 
, new wastage: 
    Choosing size class: 
JSC Heap MarkedSpace size class dump: 
Adding JSC MarkedSpace size class: 
auto JSC::(anonymous namespace)::sizeClasses()::(anonymous class)::operator()()::(anonymous class)::operator()(size_t) const
./heap/SlotVisitor.cpp
void JSC::SlotVisitor::reset()
FATAL: attempting to drain when not in parallel mode.
void JSC::SlotVisitor::drain(WTF::MonotonicTime)
size_t JSC::SlotVisitor::performIncrementOfDraining(size_t)
SlotVisitor::SharedDrainResult JSC::SlotVisitor::drainFromShared(JSC::SlotVisitor::SharedDrainMode, WTF::MonotonicTime)
FATAL: Attempting to donate when not in parallel mode.
void JSC::SlotVisitor::donate()
GC visit race: 
void JSC::SlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::SlotVisitor &)> >)
./heap/SpaceTimeMutatorScheduler.cpp
virtual void JSC::SpaceTimeMutatorScheduler::beginCollection()
virtual void JSC::SpaceTimeMutatorScheduler::didStop()
virtual void JSC::SpaceTimeMutatorScheduler::willResume()
virtual WTF::MonotonicTime JSC::SpaceTimeMutatorScheduler::timeToStop()
virtual WTF::MonotonicTime JSC::SpaceTimeMutatorScheduler::timeToResume()
%.0lf
%.3lf
./heap/StochasticSpaceTimeMutatorScheduler.cpp
virtual void JSC::StochasticSpaceTimeMutatorScheduler::beginCollection()
kb h=
virtual void JSC::StochasticSpaceTimeMutatorScheduler::didStop()
virtual void JSC::StochasticSpaceTimeMutatorScheduler::willResume()
virtual WTF::MonotonicTime JSC::StochasticSpaceTimeMutatorScheduler::timeToStop()
virtual WTF::MonotonicTime JSC::StochasticSpaceTimeMutatorScheduler::timeToResume()
./heap/SynchronousStopTheWorldMutatorScheduler.cpp
virtual void JSC::SynchronousStopTheWorldMutatorScheduler::beginCollection()
virtual void JSC::SynchronousStopTheWorldMutatorScheduler::endCollection()
GC scan found corrupt object: structureID is zero!
GC scan found object in bad state: structureID is nuked!
GC type: 
Object at: 
Structure: 
Object contents:
0x%016llx
Is marked: 
Is newly allocated: 
Block: 
Is marked raw: 
Marking version: 
Heap marking version: 
Is newly allocated raw: 
Newly allocated version: 
Heap newly allocated version: 
console
<message collected>
/\*[#@][ 
]sourceMappingURL=[ 
]*([^\s'"]*)[ 
]*\*/
com.apple.JavaScriptCore.remote-inspector-runloop-mode
InjectedScript
evaluate
awaitPromise
callFunctionOn
evaluateOnCallFrame
getFunctionDetails
Internal error
functionDetails
getPreview
getProperties
getDisplayableProperties
getInternalProperties
getCollectionEntries
saveResult
wrapCallFrames
wrapObject
wrapJSONString
wrapTable
previewValue
setExceptionValue
clearExceptionValue
findObjectById
inspectObject
releaseObject
releaseObjectGroup
Exception while making a call.
Object has too long reference chain (must not be longer than %d)
Internal error: result value is empty
Internal error: result is not an Object
result
Internal error: result is not a pair of value and wasThrown flag
wasThrown
savedResultIndex
truncated
topCallFrameIsBoundary
parentStackTrace
unsigned int WTF::StringBuilder::length() const
type
line
column
repeatCount
networkRequestId
parameters
stackTrace
lineNumber
lineContent
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator5.2.sdk/usr/local/include/wtf/text/StringConcatenate.h
callFrames
source
level
text
injectedScriptId
Failed to parse/execute InjectedScriptSource.js!
./inspector/InjectedScriptManager.cpp
Inspector::InjectedScript Inspector::InjectedScriptManager::injectedScriptFor(JSC::ExecState *)
module
injectModule
Message must be in JSON format
Message must be a JSONified object
'id' property was not found
The type of 'id' property must be integer
method
'method' property wasn't found
The type of 'method' property must be string
The 'method' property was formatted incorrectly. It should be 'Domain.method'
' domain was not found
code
message
data
error
Integer
Value
ApplicationCache
params
getFramesWithManifests
enable
getManifestForFrame
getApplicationCacheForFrame
'ApplicationCache.
' was not found
frameIds
frameId
Some arguments of method 'ApplicationCache.getManifestForFrame' can't be processed
manifestURL
Some arguments of method 'ApplicationCache.getApplicationCacheForFrame' can't be processed
applicationCache
disable
getMatchedStylesForNode
getInlineStylesForNode
getComputedStyleForNode
getAllStyleSheets
getStyleSheet
getStyleSheetText
setStyleSheetText
setStyleText
setRuleSelector
createStyleSheet
addRule
getSupportedCSSProperties
getSupportedSystemFontFamilyNames
forcePseudoState
'CSS.
nodeId
includePseudo
includeInherited
Some arguments of method 'CSS.getMatchedStylesForNode' can't be processed
matchedCSSRules
pseudoElements
inherited
Some arguments of method 'CSS.getInlineStylesForNode' can't be processed
inlineStyle
attributesStyle
Some arguments of method 'CSS.getComputedStyleForNode' can't be processed
computedStyle
headers
styleSheetId
Some arguments of method 'CSS.getStyleSheet' can't be processed
styleSheet
Some arguments of method 'CSS.getStyleSheetText' can't be processed
Some arguments of method 'CSS.setStyleSheetText' can't be processed
styleId
Some arguments of method 'CSS.setStyleText' can't be processed
style
ruleId
selector
Some arguments of method 'CSS.setRuleSelector' can't be processed
rule
Some arguments of method 'CSS.createStyleSheet' can't be processed
Some arguments of method 'CSS.addRule' can't be processed
cssProperties
fontFamilyNames
forcedPseudoClasses
Some arguments of method 'CSS.forcePseudoState' can't be processed
Canvas
requestNode
requestContent
requestCSSCanvasClientNodes
resolveCanvasContext
setRecordingAutoCaptureFrameCount
startRecording
stopRecording
requestShaderSource
updateShader
setShaderProgramDisabled
setShaderProgramHighlighted
'Canvas.
canvasId
Some arguments of method 'Canvas.requestNode' can't be processed
Some arguments of method 'Canvas.requestContent' can't be processed
content
Some arguments of method 'Canvas.requestCSSCanvasClientNodes' can't be processed
clientNodeIds
objectGroup
Some arguments of method 'Canvas.resolveCanvasContext' can't be processed
count
Some arguments of method 'Canvas.setRecordingAutoCaptureFrameCount' can't be processed
frameCount
memoryLimit
Some arguments of method 'Canvas.startRecording' can't be processed
Some arguments of method 'Canvas.stopRecording' can't be processed
programId
shaderType
Some arguments of method 'Canvas.requestShaderSource' can't be processed
Some arguments of method 'Canvas.updateShader' can't be processed
disabled
Some arguments of method 'Canvas.setShaderProgramDisabled' can't be processed
highlighted
Some arguments of method 'Canvas.setShaderProgramHighlighted' can't be processed
Console
clearMessages
getLoggingChannels
setLoggingChannelLevel
'Console.
channels
Some arguments of method 'Console.setLoggingChannelLevel' can't be processed
getDocument
requestChildNodes
querySelector
querySelectorAll
setNodeName
setNodeValue
removeNode
setAttributeValue
setAttributesAsText
removeAttribute
getSupportedEventNames
getEventListenersForNode
setEventListenerDisabled
setBreakpointForEventListener
removeBreakpointForEventListener
getAccessibilityPropertiesForNode
getOuterHTML
setOuterHTML
insertAdjacentHTML
performSearch
getSearchResults
discardSearchResults
setInspectModeEnabled
highlightRect
highlightQuad
highlightSelector
highlightNode
highlightNodeList
hideHighlight
highlightFrame
pushNodeByPathToFrontend
resolveNode
getAttributes
moveTo
undo
redo
markUndoableState
focus
setInspectedNode
'DOM.
root
depth
Some arguments of method 'DOM.requestChildNodes' can't be processed
Some arguments of method 'DOM.querySelector' can't be processed
Some arguments of method 'DOM.querySelectorAll' can't be processed
nodeIds
Some arguments of method 'DOM.setNodeName' can't be processed
Some arguments of method 'DOM.setNodeValue' can't be processed
Some arguments of method 'DOM.removeNode' can't be processed
Some arguments of method 'DOM.setAttributeValue' can't be processed
Some arguments of method 'DOM.setAttributesAsText' can't be processed
Some arguments of method 'DOM.removeAttribute' can't be processed
eventNames
Some arguments of method 'DOM.getEventListenersForNode' can't be processed
listeners
eventListenerId
Some arguments of method 'DOM.setEventListenerDisabled' can't be processed
Some arguments of method 'DOM.setBreakpointForEventListener' can't be processed
Some arguments of method 'DOM.removeBreakpointForEventListener' can't be processed
Some arguments of method 'DOM.getAccessibilityPropertiesForNode' can't be processed
properties
Some arguments of method 'DOM.getOuterHTML' can't be processed
outerHTML
Some arguments of method 'DOM.setOuterHTML' can't be processed
position
html
Some arguments of method 'DOM.insertAdjacentHTML' can't be processed
query
Some arguments of method 'DOM.performSearch' can't be processed
searchId
resultCount
fromIndex
toIndex
Some arguments of method 'DOM.getSearchResults' can't be processed
Some arguments of method 'DOM.discardSearchResults' can't be processed
objectId
Some arguments of method 'DOM.requestNode' can't be processed
enabled
highlightConfig
Some arguments of method 'DOM.setInspectModeEnabled' can't be processed
color
outlineColor
usePageCoordinates
Some arguments of method 'DOM.highlightRect' can't be processed
quad
Some arguments of method 'DOM.highlightQuad' can't be processed
selectorString
Some arguments of method 'DOM.highlightSelector' can't be processed
Some arguments of method 'DOM.highlightNode' can't be processed
Some arguments of method 'DOM.highlightNodeList' can't be processed
contentColor
contentOutlineColor
Some arguments of method 'DOM.highlightFrame' can't be processed
path
Some arguments of method 'DOM.pushNodeByPathToFrontend' can't be processed
Some arguments of method 'DOM.resolveNode' can't be processed
Some arguments of method 'DOM.getAttributes' can't be processed
attributes
targetNodeId
insertBeforeNodeId
Some arguments of method 'DOM.moveTo' can't be processed
Some arguments of method 'DOM.focus' can't be processed
Some arguments of method 'DOM.setInspectedNode' can't be processed
DOMDebugger
setDOMBreakpoint
removeDOMBreakpoint
setEventBreakpoint
removeEventBreakpoint
setXHRBreakpoint
removeXHRBreakpoint
'DOMDebugger.
Some arguments of method 'DOMDebugger.setDOMBreakpoint' can't be processed
Some arguments of method 'DOMDebugger.removeDOMBreakpoint' can't be processed
breakpointType
eventName
Some arguments of method 'DOMDebugger.setEventBreakpoint' can't be processed
Some arguments of method 'DOMDebugger.removeEventBreakpoint' can't be processed
isRegex
Some arguments of method 'DOMDebugger.setXHRBreakpoint' can't be processed
Some arguments of method 'DOMDebugger.removeXHRBreakpoint' can't be processed
DOMStorage
getDOMStorageItems
setDOMStorageItem
removeDOMStorageItem
'DOMStorage.
storageId
Some arguments of method 'DOMStorage.getDOMStorageItems' can't be processed
Some arguments of method 'DOMStorage.setDOMStorageItem' can't be processed
Some arguments of method 'DOMStorage.removeDOMStorageItem' can't be processed
Database
getDatabaseTableNames
executeSQL
'Database.
databaseId
Some arguments of method 'Database.getDatabaseTableNames' can't be processed
tableNames
columnNames
sqlError
Some arguments of method 'Database.executeSQL' can't be processed
setAsyncStackTraceDepth
setBreakpointsActive
setBreakpointByUrl
setBreakpoint
removeBreakpoint
continueUntilNextRunLoop
continueToLocation
stepOver
stepInto
stepOut
pause
resume
searchInContent
getScriptSource
setPauseOnExceptions
setPauseOnAssertions
setPauseForInternalScripts
setOverlayMessage
'Debugger.
Some arguments of method 'Debugger.setAsyncStackTraceDepth' can't be processed
active
Some arguments of method 'Debugger.setBreakpointsActive' can't be processed
urlRegex
columnNumber
options
Some arguments of method 'Debugger.setBreakpointByUrl' can't be processed
breakpointId
locations
Some arguments of method 'Debugger.setBreakpoint' can't be processed
actualLocation
Some arguments of method 'Debugger.removeBreakpoint' can't be processed
Some arguments of method 'Debugger.continueToLocation' can't be processed
scriptId
caseSensitive
Some arguments of method 'Debugger.searchInContent' can't be processed
Some arguments of method 'Debugger.getScriptSource' can't be processed
scriptSource
functionId
Some arguments of method 'Debugger.getFunctionDetails' can't be processed
details
state
Some arguments of method 'Debugger.setPauseOnExceptions' can't be processed
Some arguments of method 'Debugger.setPauseOnAssertions' can't be processed
shouldPause
Some arguments of method 'Debugger.setPauseForInternalScripts' can't be processed
callFrameId
expression
includeCommandLineAPI
doNotPauseOnExceptionsAndMuteConsole
returnByValue
generatePreview
Some arguments of method 'Debugger.evaluateOnCallFrame' can't be processed
Some arguments of method 'Debugger.setOverlayMessage' can't be processed
Heap
snapshot
startTracking
stopTracking
getRemoteObject
'Heap.
timestamp
snapshotData
heapObjectId
Some arguments of method 'Heap.getPreview' can't be processed
preview
Some arguments of method 'Heap.getRemoteObject' can't be processed
IndexedDB
requestDatabaseNames
requestDatabase
requestData
clearObjectStore
'IndexedDB.
databaseNames
securityOrigin
Some arguments of method 'IndexedDB.requestDatabaseNames' can't be processed
databaseWithObjectStores
databaseName
Some arguments of method 'IndexedDB.requestDatabase' can't be processed
objectStoreDataEntries
hasMore
objectStoreName
indexName
skipCount
pageSize
keyRange
Some arguments of method 'IndexedDB.requestData' can't be processed
Some arguments of method 'IndexedDB.clearObjectStore' can't be processed
initialized
'Inspector.
LayerTree
layersForNode
reasonsForCompositingLayer
'LayerTree.
Some arguments of method 'LayerTree.layersForNode' can't be processed
layers
layerId
Some arguments of method 'LayerTree.reasonsForCompositingLayer' can't be processed
compositingReasons
'Memory.
Network
setExtraHTTPHeaders
getResponseBody
setResourceCachingDisabled
loadResource
getSerializedCertificate
resolveWebSocket
'Network.
Some arguments of method 'Network.setExtraHTTPHeaders' can't be processed
requestId
Some arguments of method 'Network.getResponseBody' can't be processed
body
base64Encoded
Some arguments of method 'Network.setResourceCachingDisabled' can't be processed
mimeType
status
Some arguments of method 'Network.loadResource' can't be processed
Some arguments of method 'Network.getSerializedCertificate' can't be processed
serializedCertificate
Some arguments of method 'Network.resolveWebSocket' can't be processed
Page
reload
navigate
getCookies
deleteCookie
getResourceTree
getResourceContent
searchInResource
searchInResources
setShowRulers
setShowPaintRects
setEmulatedMedia
setForcedAppearance
getCompositingBordersVisible
setCompositingBordersVisible
snapshotNode
snapshotRect
archive
'Page.
ignoreCache
revalidateAllResources
Some arguments of method 'Page.reload' can't be processed
Some arguments of method 'Page.navigate' can't be processed
cookies
cookieName
Some arguments of method 'Page.deleteCookie' can't be processed
frameTree
Some arguments of method 'Page.getResourceContent' can't be processed
Some arguments of method 'Page.searchInResource' can't be processed
Some arguments of method 'Page.searchInResources' can't be processed
Some arguments of method 'Page.setShowRulers' can't be processed
Some arguments of method 'Page.setShowPaintRects' can't be processed
media
Some arguments of method 'Page.setEmulatedMedia' can't be processed
appearance
Some arguments of method 'Page.setForcedAppearance' can't be processed
visible
Some arguments of method 'Page.setCompositingBordersVisible' can't be processed
Some arguments of method 'Page.snapshotNode' can't be processed
dataURL
coordinateSystem
Some arguments of method 'Page.snapshotRect' can't be processed
Runtime
parse
getRuntimeTypesForVariablesAtOffsets
enableTypeProfiler
disableTypeProfiler
enableControlFlowProfiler
disableControlFlowProfiler
getBasicBlocks
'Runtime.
Some arguments of method 'Runtime.parse' can't be processed
range
contextId
Some arguments of method 'Runtime.evaluate' can't be processed
promiseObjectId
Some arguments of method 'Runtime.awaitPromise' can't be processed
functionDeclaration
arguments
Some arguments of method 'Runtime.callFunctionOn' can't be processed
Some arguments of method 'Runtime.getPreview' can't be processed
ownProperties
Some arguments of method 'Runtime.getProperties' can't be processed
internalProperties
Some arguments of method 'Runtime.getDisplayableProperties' can't be processed
startIndex
numberToFetch
Some arguments of method 'Runtime.getCollectionEntries' can't be processed
Some arguments of method 'Runtime.saveResult' can't be processed
Some arguments of method 'Runtime.releaseObject' can't be processed
Some arguments of method 'Runtime.releaseObjectGroup' can't be processed
Some arguments of method 'Runtime.getRuntimeTypesForVariablesAtOffsets' can't be processed
types
sourceID
Some arguments of method 'Runtime.getBasicBlocks' can't be processed
basicBlocks
ScriptProfiler
'ScriptProfiler.
includeSamples
Some arguments of method 'ScriptProfiler.startTracking' can't be processed
ServiceWorker
getInitializationInfo
'ServiceWorker.
info
Target
exists
sendMessageToTarget
'Target.
targetId
Some arguments of method 'Target.sendMessageToTarget' can't be processed
Timeline
stop
setAutoCaptureEnabled
setInstruments
'Timeline.
maxCallStackDepth
Some arguments of method 'Timeline.start' can't be processed
Some arguments of method 'Timeline.setAutoCaptureEnabled' can't be processed
instruments
Some arguments of method 'Timeline.setInstruments' can't be processed
Worker
sendMessageToWorker
'Worker.
workerId
Some arguments of method 'Worker.initialized' can't be processed
Some arguments of method 'Worker.sendMessageToWorker' can't be processed
ApplicationCache.applicationCacheStatusUpdated
ApplicationCache.networkStateUpdated
isNowOnline
CSS.mediaQueryResultChanged
CSS.styleSheetChanged
CSS.styleSheetAdded
header
CSS.styleSheetRemoved
Canvas.canvasAdded
canvas
Canvas.canvasRemoved
Canvas.canvasMemoryChanged
memoryCost
Canvas.extensionEnabled
extension
Canvas.cssCanvasClientNodesChanged
Canvas.recordingStarted
initiator
Canvas.recordingProgress
frames
bufferUsed
Canvas.recordingFinished
recording
Canvas.programCreated
Canvas.programDeleted
Console.messageAdded
Console.messageRepeatCountUpdated
Console.messagesCleared
Console.heapSnapshot
title
DOM.documentUpdated
DOM.inspect
DOM.setChildNodes
parentId
nodes
DOM.attributeModified
DOM.attributeRemoved
DOM.inlineStyleInvalidated
DOM.characterDataModified
characterData
DOM.childNodeCountUpdated
childNodeCount
DOM.childNodeInserted
parentNodeId
previousNodeId
node
DOM.childNodeRemoved
DOM.shadowRootPushed
hostId
DOM.shadowRootPopped
rootId
DOM.customElementStateChanged
customElementState
DOM.pseudoElementAdded
pseudoElement
DOM.pseudoElementRemoved
pseudoElementId
DOM.didAddEventListener
DOM.willRemoveEventListener
DOM.didFireEvent
DOM.videoLowPowerChanged
isLowPower
DOMStorage.domStorageItemsCleared
DOMStorage.domStorageItemRemoved
DOMStorage.domStorageItemAdded
newValue
DOMStorage.domStorageItemUpdated
oldValue
Database.addDatabase
database
Debugger.globalObjectCleared
Debugger.scriptParsed
startLine
startColumn
endLine
endColumn
isContentScript
sourceURL
sourceMapURL
Debugger.scriptFailedToParse
errorLine
errorMessage
Debugger.breakpointResolved
Debugger.paused
reason
asyncStackTrace
Debugger.resumed
Debugger.didSampleProbe
sample
Debugger.playBreakpointActionSound
breakpointActionId
Heap.garbageCollected
collection
Heap.trackingStart
Heap.trackingComplete
Inspector.evaluateForTestInFrontend
script
Inspector.inspect
hints
Inspector.activateExtraDomains
domains
LayerTree.layerTreeDidChange
Memory.memoryPressure
severity
Memory.trackingStart
Memory.trackingUpdate
event
Memory.trackingComplete
Network.requestWillBeSent
loaderId
documentURL
request
walltime
redirectResponse
Network.responseReceived
response
Network.dataReceived
dataLength
encodedDataLength
Network.loadingFinished
metrics
Network.loadingFailed
errorText
canceled
Network.requestServedFromMemoryCache
resource
Network.webSocketWillSendHandshakeRequest
Network.webSocketHandshakeResponseReceived
Network.webSocketCreated
Network.webSocketClosed
Network.webSocketFrameReceived
Network.webSocketFrameError
Network.webSocketFrameSent
Page.domContentEventFired
Page.loadEventFired
Page.frameNavigated
frame
Page.frameDetached
Page.frameStartedLoading
Page.frameStoppedLoading
Page.frameScheduledNavigation
delay
Page.frameClearedScheduledNavigation
Page.defaultAppearanceDidChange
Runtime.executionContextCreated
ScriptProfiler.trackingStart
ScriptProfiler.trackingUpdate
ScriptProfiler.trackingComplete
samples
ScriptProfiler.programmaticCaptureStarted
ScriptProfiler.programmaticCaptureStopped
Target.targetCreated
targetInfo
Target.targetDestroyed
Target.dispatchMessageFromTarget
Timeline.eventRecorded
record
Timeline.recordingStarted
startTime
Timeline.recordingStopped
endTime
Timeline.autoCaptureStarted
Timeline.programmaticCaptureStarted
Timeline.programmaticCaptureStopped
Worker.workerCreated
Worker.workerTerminated
Worker.dispatchMessageFromWorker
implicit
parsedOk
priority
children
user
user-agent
inspector
regular
inactive
mediaRule
importRule
linkedSheet
inlineSheet
canvas-2d
bitmaprenderer
webgl
webgl2
webmetal
fragment
vertex
network
console-api
storage
appcache
rendering
security
content-blocker
webrtc
other
basic
verbose
warning
debug
dirxml
table
trace
clear
startGroup
startGroupCollapsed
endGroup
timing
profile
profileEnd
before
after
open
closed
builtin
custom
waiting
failed
additions
removals
mixed
page
step
date
time
grammar
spelling
assertive
polite
subtree-modified
attribute-modified
node-removed
animation-frame
listener
timer
sound
probe
global
with
closure
functionName
globalLexicalEnvironment
nestedLexical
full
partial
array
images
unknown
memory-cache
disk-cache
service-worker
medium
high
Document
Stylesheet
Image
Font
Script
Fetch
Ping
Beacon
WebSocket
parser
Viewport
Light
Dark
canvas-bitmaprenderer
canvas-webgl
frontend
auto-capture
regexp
weakmap
weakset
iterator
class
proxy
accessor
none
irrecoverable
unterminated-literal
recoverable
Microtask
worker
serviceworker
EventDispatch
ScheduleStyleRecalculation
RecalculateStyles
InvalidateLayout
Layout
Paint
Composite
RenderingFrame
TimerInstall
TimerRemove
TimerFire
EvaluateScript
TimeStamp
Time
TimeEnd
FunctionCall
ProbeSample
ConsoleProfile
RequestAnimationFrame
CancelAnimationFrame
FireAnimationFrame
ObserverCallback
AnimationFrame
EventListener
Timer
CSPViolation
DebuggerStatement
Breakpoint
PauseOnNextStatement
critical
non-critical
uncaught
'params' object must contain required parameter '%s' with type '%s'.
Parameter '%s' with type '%s' was not found.
Parameter '%s' has wrong type. It must be '%s'.
Unnamed Profile already exists
Profile "
" already exists
No profiles exist
" does not exist
console.timeStamp
 is currently ignored in JavaScript context inspection.
[native code]
InjectedScriptHost
InjectedScriptHost.evaluateWithScopeExtension first argument must be a string.
displayName
pending
resolved
rejected
./inspector/JSInjectedScriptHost.cpp
JSC::JSValue Inspector::JSInjectedScriptHost::getInternalProperties(JSC::ExecState *)
targetFunction
boundThis
boundArgs
target
handler
kind
key+value
queryObjects first argument must be an object.
queryObjects cannot be called with a Proxy.
queryObjects cannot be called with Object.
queryObjects cannot be called with Function.
queryObjects cannot be called with Array.
queryObjects cannot be called with Map.
queryObjects cannot be called with Set.
queryObjects cannot be called with Promise.
subtype
internalConstructorName
isHTMLAllCollection
proxyTargetValue
weakMapSize
weakMapEntries
weakSetSize
weakSetEntries
iteratorEntries
queryObjects
evaluateWithScopeExtension
JavaScriptCallFrame
JSJavaScriptCallFrame.evaluateWithScopeExtension first argument must be a string.
program
scopeDescriptions
caller
scopeChain
thisObject
isTailDeleted
auto JSC::JSObject::putDirectIndex(JSC::ExecState *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
void JSC::JSObject::setIndexQuickly(JSC::VM &, unsigned int, JSC::JSValue)
[object Proxy]
%d console messages are not shown.
Timer "
: %.3fms
No such channel to enable
backtrace
depth must be a positive number.
BreakpointAction of incorrect type, expected object
BreakpointAction had type missing
BreakpointAction had unknown type
Either url or urlRegex must be specified.
Breakpoint at specified location already exists.
condition
autoContinue
actions
ignoreCount
No script for id: 
Could not resolve breakpoint
Breakpoint at specified location already exists
Function object id is obsolete
Was not paused or waiting to pause
Unknown pause on exceptions mode: 
Internal error. Could not change pause on exceptions state
Not paused
Could not find InjectedScript for callFrameId
Can only perform operation while paused.
No heap snapshot
No object for identifier, it may have been collected
Unable to get object details - Structure
Unable to get object details - GlobalObject
Unable to get object details - InjectedScript
Unable to get object details
Could not find InjectedScript for promiseObjectId
Could not find InjectedScript for objectId
The VM does not currently have Type Information.
User Query
Array of TypeLocation objects has an object that does not have type of TypeLocation.
typeInformationDescriptor
divot
The VM does not currently have a Control Flow Profiler.
Target not found.
Execution context id is not supported for JSContext inspection as there is only one execution context.
Internal error: main world execution context not found.
scriptId and lineNumber are required.
breakpoint-action-
directive
__InjectedScript_
startOffset
endOffset
leastCommonAncestor
structures
typeSet
isTruncated
probeId
batchId
sampleId
payload
isValid
hasExecuted
executionCount
./interpreter/CallFrame.cpp
bool JSC::ExecState::callSiteBitsAreBytecodeOffset() const
eval code
module code
global code
 bc#
./interpreter/Interpreter.cpp
unsigned int JSC::sizeOfVarargs(JSC::CallFrame *, JSC::JSValue, uint32_t)
JSC::JSValue JSC::Interpreter::executeProgram(const JSC::SourceCode &, JSC::CallFrame *, JSC::JSObject *)
JSC::JSObject *JSC::Interpreter::executeConstruct(JSC::CallFrame *, JSC::JSObject *, JSC::ConstructType, const JSC::ConstructData &, const JSC::ArgList &, JSC::JSValue)
JSC::JSValue JSC::Interpreter::execute(JSC::EvalExecutable *, JSC::CallFrame *, JSC::JSValue, JSC::JSScope *)
Can't create duplicate global variable in eval: '
Executed eval, fired VarInjection watchpoint
Can't create duplicate variable in eval: '
JSC::JSValue JSC::Interpreter::executeModuleProgram(JSC::ModuleProgramExecutable *, JSC::CallFrame *, JSC::JSModuleEnvironment *)
WillExecuteProgram
DidExecuteProgram
DidEnterCallFrame
DidReachBreakpoint
WillLeaveCallFrame
WillExecuteStatement
WillExecuteExpression
[wasm code]
frame 0x0
frame 
name: 
sourceURL: 
callee: 
returnPC: 
callerFrame: 
rawLocationBits: 
codeBlock: 
bytecodeOffset: 
line: 
column: 
EntryFrame: 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/bytecode/CodeBlock.h
JSC::Register &JSC::ExecState::uncheckedR(int)
bool JSC::JSObject::canGetIndexQuickly(unsigned int)
JSC::JSValue JSC::JSObject::getIndexQuickly(unsigned int)
./interpreter/ShadowChicken.cpp
auto JSC::ShadowChicken::update(JSC::VM &, JSC::ExecState *)::(anonymous class)::operator()(JSC::StackVisitor &) const
<null>
Host
LLInt
Baseline
./jit/JITCode.cpp
virtual DFG::CommonData *JSC::JITCode::dfgCommon()
virtual DFG::JITCode *JSC::JITCode::dfg()
virtual FTL::JITCode *JSC::JITCode::ftl()
virtual FTL::ForOSREntryJITCode *JSC::JITCode::ftlForOSREntry()
Destroying JIT code at 
virtual void *JSC::JITCodeWithCodeRef::executableAddressAtOffset(size_t)
virtual void *JSC::JITCodeWithCodeRef::dataAddressAtOffset(size_t)
virtual unsigned int JSC::JITCodeWithCodeRef::offsetOf(void *)
virtual size_t JSC::JITCodeWithCodeRef::size()
virtual bool JSC::JITCodeWithCodeRef::contains(void *)
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::DirectJITCode::addressForCall(JSC::ArityCheckMode)
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::NativeJITCode::addressForCall(JSC::ArityCheckMode)
In call frame 
 for code block 
./jit/JITExceptions.cpp
void JSC::genericUnwind(JSC::VM *, JSC::ExecState *)
LLIntSlowPaths
Detected poly proto opportunity.
./llint/LLIntSlowPaths.cpp
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_by_val_direct(JSC::ExecState *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_size_frame_for_varargs(JSC::ExecState *, const JSC::Instruction *)
LLIntSlowPaths/call
Executed op_put_scope<LocalClosureVar>
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_check_if_exception_is_uncatchable_and_notify_profiler(JSC::ExecState *, const JSC::Instruction *)
bool JSC::JSObject::canSetIndexQuickly(unsigned int)
JSC::JSRopeString *JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::release() [OverflowHandler = WTF::RecordOverflow]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/GetPutInfo.h
bool JSC::needsVarInjectionChecks(JSC::ResolveType)
Multiline comment was not closed properly
Non-number found after exponent indicator
No identifiers allowed directly after numeric literal
No hexadecimal digits after '0x'
No space between hexadecimal literal and identifier
No binary digits after '0b'
No space between binary literal and identifier
No octal digits after '0o'
No space between octal literal and identifier
Decimal integer literals with a leading zero are forbidden in strict mode
./parser/Lexer.cpp
JSC::JSTokenType JSC::Lexer<unsigned char>::lex(JSC::JSToken *, unsigned int, bool) [T = unsigned char]
Unterminated regular expression literal '
Invalid character: '\0'
Invalid character: '\n'
Invalid character: '\v'
Invalid character: '\r'
Invalid character: '#'
Invalid character: '@'
Invalid character: '`'
Invalid character '\u%04x'
Unexpected EOF
JSC::JSTokenType JSC::Lexer<unsigned short>::lex(JSC::JSToken *, unsigned int, bool) [T = unsigned short]
./parser/Parser.h
JSC::DestructuringKind JSC::Parser<JSC::Lexer<LChar> >::destructuringKindFromDeclarationType(JSC::DeclarationType) [LexerType = JSC::Lexer<LChar>]
variable name
lexical variable name
const char *JSC::Parser<JSC::Lexer<LChar> >::declarationTypeToVariableKind(JSC::DeclarationType) [LexerType = JSC::Lexer<LChar>]
void JSC::Parser<JSC::Lexer<LChar> >::popScope(JSC::Parser::AutoCleanupLexicalScope &, bool) [LexerType = JSC::Lexer<LChar>]
./parser/Parser.cpp
WTF::String JSC::Parser<JSC::Lexer<LChar> >::parseInner(const JSC::Identifier &, JSC::SourceParseMode, JSC::ParsingContext, Optional<int>) [LexerType = JSC::Lexer<LChar>]
Parser error
Unexpected end of script
Incomplete unicode escape in identifier: '
Unterminated multiline comment
Unterminated numeric literal '
Unterminated string literal '
Invalid escape in identifier: '
Unexpected escaped characters in keyword token: '
Invalid unicode escape in identifier: '
Invalid numeric literal: '
Invalid use of octal: '
Invalid string literal: '
Unrecognized token '
Unexpected string literal 
Unexpected number '
Unexpected use of reserved word '
' in strict mode
Invalid private name '
Unexpected identifier '
Unexpected keyword '
Unexpected token '
Unparseable script
Cannot destructure to a parameter name '
Cannot declare a parameter named '
' as it shadows the name of a strict mode function
Cannot use the reserved word '
' as a 
parameter name
 in strict mode
Cannot use the keyword '
Cannot use 'let' as a 
Cannot use 'await' as a 
Cannot use 'yield' as a 
' in strict mode as it has already been declared
in strict mode
in an async function
in a module
const char *JSC::Parser<JSC::Lexer<LChar> >::disallowedIdentifierAwaitReason() [LexerType = JSC::Lexer<LChar>]
in a generator function
const char *JSC::Parser<JSC::Lexer<LChar> >::disallowedIdentifierYieldReason() [LexerType = JSC::Lexer<LChar>]
JSC::DestructuringKind JSC::Parser<JSC::Lexer<UChar> >::destructuringKindFromDeclarationType(JSC::DeclarationType) [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar> >::declarationTypeToVariableKind(JSC::DeclarationType) [LexerType = JSC::Lexer<UChar>]
void JSC::Parser<JSC::Lexer<UChar> >::popScope(JSC::Parser::AutoCleanupLexicalScope &, bool) [LexerType = JSC::Lexer<UChar>]
WTF::String JSC::Parser<JSC::Lexer<UChar> >::parseInner(const JSC::Identifier &, JSC::SourceParseMode, JSC::ParsingContext, Optional<int>) [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar> >::disallowedIdentifierAwaitReason() [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar> >::disallowedIdentifierYieldReason() [LexerType = JSC::Lexer<UChar>]
./parser/SourceProvider.cpp
void JSC::SourceProvider::getID()
await
break
case
default
extends
instanceof
continue
void
delete
while
else
super
switch
typeof
debugger
yield
enum
export
import
implements
interface
package
private
protected
public
static
\x can only be followed by a hex character sequence
\u can only be followed by a Unicode character sequence
The only valid numeric escape in strict mode is '\0'
Unterminated string constant
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar> >::parseFunctionParameters(TreeBuilder &, JSC::SourceParseMode, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
 name
Expected an arrow function input parameter
Cannot parse parameters for this 
Expected a ')' or a ',' after a parameter declaration
Cannot parse parameter pattern
Expected an opening '(' before a 
's parameter list
getter functions must have no parameters
setter functions must have one parameter
Duplicate parameter '
' not allowed in function with non-simple parameter list
Expected a ')' after a parameter declaration
getter
setter
generator function
arrow function
async function
async method
async arrow function
async generator function
async generator method
const char *JSC::stringForFunctionMode(JSC::SourceParseMode)
Cannot use 'await' as a parameter name in an async function
Rest parameter should be the last parameter in a function declaration
' not allowed in function with default parameter values
' not allowed in function with destructuring parameters
' not allowed in function with a rest parameter
' not allowed in an arrow function
' not allowed in a method
Stack exhausted
Cannot parse this destructuring pattern
Expected a closing ']' following a rest element destructuring pattern
Expected either a closing ']' or a ',' following an element destructuring pattern
Cannot use 'let' as an identifier name for a LexicalDeclaration
Cannot modify '
Cannot parse computed property name
Expected ']' to end end a computed property name
Expected a property name
Cannot use abbreviated destructuring syntax for reserved name '
Cannot use abbreviated destructuring syntax for keyword '
Expected a ':' prior to a named destructuring property
Expected a closing '}' following a rest element destructuring pattern
Expected either a closing '}' or an ',' after a property destructuring pattern
Expected a parameter pattern or a ')' in parameter list
Invalid destructuring assignment target
Cannot use new with 
new.target is only valid inside functions
new.target is not valid inside arrow functions in global code
"new." can only followed with target
super is not valid in this context
import.meta is only valid inside modules
"import." can only followed with meta
import call expects exactly one argument
Cannot parse expression
Cannot parse base expression
Cannot parse subscript expression
Expected '
' to 
subscript expression
Cannot parse call arguments
Expected a property name after '.'
Cannot use super as tag for tagged templates
Cannot parse template literal
compound expression
Cannot use await expression within parameters
Invalid regular expression
Cannot parse function expression
bool JSC::Parser<JSC::Lexer<LChar> >::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, JSC::SourceParseMode, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, Optional<int>) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
Expected a '=>' after arrow function parameter declaration
Cannot declare function named 'await' 
Cannot declare 
 named 'await'
Cannot declare generator function named 'yield'
' is not a valid 
 name in strict mode
Function statements must have a name
Async function statements must have a name
Expected an opening '{' at the start of a 
 body
Parameters should match arguments offered as parameters in Function constructor
Cannot parse the body of this 
' is not a valid function name in strict mode
Expected a closing '}' after a 
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar> >::parseFunctionParameters(TreeBuilder &, JSC::SourceParseMode, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<LChar> >::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, JSC::SourceParseMode, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, Optional<int>) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar> >::parseFunctionParameters(TreeBuilder &, JSC::SourceParseMode, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::SyntaxChecker>]
Cannot parse body of this arrow function
Cannot parse body of this function
Cannot parse the arrow function expression
Cannot name a function 'arguments' in strict mode
Cannot name a function 'eval' in strict mode
Cannot declare a variable named 'arguments' in strict mode
Cannot declare a variable named 'eval' in strict mode
'use strict' directive not allowed inside a function with a non-simple parameter list
Invalid parameters or function name in strict mode
Expected ';' after variable declaration
Cannot declare a variable named 
Cannot declare a let variable twice: '
Cannot declare a const variable twice: '
Cannot declare a var variable that shadows a let/const/class variable: '
Cannot export a duplicate name '
Expected expression as the intializer for the variable '
const declared variable '
 must have an initializer
Expected an initializer in destructuring variable declaration
Cannot parse expression statement
Cannot use 'await' as a label 
Cannot use 'yield' as a label 
Labels must be followed by a ':'
Attempted to redeclare the label '
Cannot find scope for the label '
Cannot parse statement
Failed to parse class
Cannot declare a class twice: '
Cannot export a duplicate class name: '
' is not a valid class name
Class statements must have a name
class name
Cannot parse the parent class name
Expected opening '{' at the start of a class body
computed property name
Cannot parse this method
 named 'prototype'
 named 'constructor'
Cannot declare multiple constructors in a single class
Cannot declare a static method named 'prototype'
Cannot declare a getter or setter named 'constructor'
Expected a parameter list for getter definition
Cannot parse getter definition
Expected a parameter list for setter definition
Cannot parse setter definition
const char *JSC::stringArticleForFunctionMode(JSC::SourceParseMode)
Cannot parse this function
Cannot declare a function named '
Cannot declare a function that shadows a let/const/class/function variable '
Cannot export a duplicate function name: '
Cannot parse this async function
Cannot declare an async function named '
Cannot declare an async function that shadows a let/const/class/function variable '
Cannot parse the body of the block statement
Expected a closing '}' at the end of a block statement
Function declarations are only allowed inside blocks or switch statements in strict mode
Function declarations are only allowed inside block statements or at the top level of a program
Expected valid function statement after 'function' keyword
 an 
'if' condition
Expected a expression as the condition for an if statement
Expected a statement as the body of an if block
Expected a statement as the body of an else block
Expected a statement following 'do'
do-while loop
do-while loop condition
Must provide an expression as a do-while loop condition
Unable to parse do-while loop condition
while loop condition
Must provide an expression as a while loop condition
Unable to parse while loop condition
Expected a statement as the body of a while loop
for-await-of can't be used only in async function or async generator.
for-loop header
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar> >::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
can only declare a single variable in an enumeration
Expected either 'in' or 'of' in enumeration syntax
Expected 'of' in for-await syntax
Cannot assign to the loop variable inside a for-of loop header
Cannot assign to the loop variable inside a for-in loop header
Expected expression to enumerate
for-of header
for-in header
Expected statement as body of for-
 statement
Cannot parse for loop declarations
Unexpected a ';' in for-await-of header
const variables in for loops must have initializers
Cannot parse for loop condition expression
Expected a ';' after the for loop condition expression
Cannot parse for loop iteration expression
Expected a statement as the body of a for loop
Expected a reference on the left hand side of an enumeration statement
Cannot parse subject for-
Expected a statement as the body of a for-
loop
'continue' is only valid inside a loop statement
Expected an identifier as the target for a continue statement
Cannot use the undeclared label '
Cannot continue to the label '
' as it is not targeting a loop
Expected a ';' following a targeted continue statement
'break' is only valid inside a switch or loop statement
Expected an identifier as the target for a break statement
Expected a ';' following a targeted break statement
Return statements are only valid inside functions
Cannot parse the return expression
Expected a ';' following a return statement
'with' statements are not valid in strict mode
subject of a 'with' statement
Cannot parse 'with' subject expression
A 'with' statement must have a body
subject of a 'switch'
Cannot parse switch subject expression
body of a 'switch'
Cannot parse switch clause
Expected a ':' after switch clause expression
Cannot parse the body of a switch clause
Cannot parse switch case expression
Expected a ':' after switch default clause
Cannot parse the body of a switch default clause
Expected expression after 'throw'
Cannot have a newline after 'throw'
Cannot parse expression for throw statement
Expected a ';' after a throw statement
Expected a block statement as body of a try statement
Cannot parse the body of try block
Unable to parse 'catch' block
'catch' target
Cannot declare a catch variable named '
Expected exception handler to be a block statement
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar> >::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
Expected block statement for finally body
Cannot parse finally body
Try statements must have at least a catch or finally block
Debugger keyword must be followed by a ';'
'class' declaration is not directly within a block statement
Parse error
Expected opening '{' at the start of an object literal
Cannot parse object literal property
Attempted to redefine __proto__ property
object literal
Expected a property name following keyword 'async'
Cannot parse expression for property declaration
Expected a parenthesis for argument list
Expected an identifier as property name
shorthand property name
Expected a ':' following the property name '
Expected ':' after property name
Cannot parse subject of a spread operation
Cannot parse assignment pattern
Expected '=' following assignment pattern
Left hand side of operator '
' must be a reference
 can't be the left hand side of an assignment expression
Cannot modify 'eval' in strict mode
Cannot modify 'arguments' in strict mode
Cannot parse the right hand side of an assignment expression
Cannot use yield expression out of generator
Cannot use yield expression within parameters
Cannot parse left hand side of ternary operator
Expected ':' in ternary operator
Cannot parse right hand side of ternary operator
Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to disambiguate the expression
The 
 operator requires a reference expression
Cannot parse subexpression of 
operator
Cannot parse member expression
 can't come after a prefix operator
 can't come before a postfix operator
' cannot be modified in strict mode
Cannot delete unqualified property '
prefix-decrement
decrement
prefix-increment
increment
logical-not
bitwise-not
const char *JSC::operatorString(bool, unsigned int)
Cannot parse arrow function expression
new.target
import.meta
const char *JSC::Parser<JSC::Lexer<LChar> >::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
Cannot parse array literal element
Expected either a closing ']' or a ',' following an array element
The '...' operator should come before a target expression
Failed to parse await expression
Cannot parse async function expression
Cannot parse async generator function expression
Cannot parse expression in a comma expression
Expected opening '(' at start of argument list
Cannot parse function argument
The '...' operator should come before the target expression
argument list
Cannot parse head template element
Template literal expression cannot be empty
Cannot parse expression in template literal
Cannot parse template element
Expected a closing '}' following an expression in template literal
Expected an template element
Expected a binding element
Cannot declare a variable named '
Cannot destructure to a variable named '
Cannot declare a lexical variable twice: '
const char *JSC::Parser<JSC::Lexer<LChar> >::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
catch parameter name
expression name
const char *JSC::destructuringKindToVariableKindName(JSC::DestructuringKind)
Cannot parse the body of async arrow function
Cannot parse the body of async function
Exported binding '
' needs to refer to a top-level declared variable
Expected 'from' before exported module name
Cannot parse the 'from' clause
Expected a ';' following a targeted export declaration
Only one 'default' export is allowed
Cannot parse the declaration
Expected a variable name for the export declaration
Cannot parse the named export
export list
Cannot use keyword as exported variable name
Expected 'function' keyword following 'async' keyword with no preceding line terminator
Expected either a declaration or a variable statement
Imported modules names must be string literals
Expected an exported name for the export declaration
Cannot parse the module name
Expected a ';' following a targeted import declaration
Cannot parse the default import
Cannot parse the namespace import
Expected an imported name for the import declaration
Cannot parse the named import
import list
Expected namespace import or import list
Expected 'from' before imported module name
Expected 'as' before imported binding name
Expected a variable name for the import declaration
Cannot use 'await' as an imported binding name
Cannot use keyword as imported binding name
Cannot declare an imported binding named 
Cannot declare an imported binding name twice: '
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar> >::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar> >::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
Cannot parse the body of a generator
Cannot parse the async function
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar> >::parseFunctionParameters(TreeBuilder &, JSC::SourceParseMode, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<UChar> >::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, JSC::SourceParseMode, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, Optional<int>) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar> >::parseFunctionParameters(TreeBuilder &, JSC::SourceParseMode, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<UChar> >::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, JSC::SourceParseMode, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, Optional<int>) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar> >::parseFunctionParameters(TreeBuilder &, JSC::SourceParseMode, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::SyntaxChecker>]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar> >::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar> >::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
const char *JSC::Parser<JSC::Lexer<UChar> >::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
const char *JSC::Parser<JSC::Lexer<UChar> >::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar> >::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar> >::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
./parser/VariableEnvironment.cpp
void JSC::VariableEnvironment::markVariableAsCaptured(const RefPtr<WTF::UniquedStringImpl> &)
void JSC::VariableEnvironment::markVariableAsExported(const RefPtr<WTF::UniquedStringImpl> &)
JSC::CompactVariableMap::Handle::~Handle()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/parser/VariableEnvironment.h
JSC::CompactVariableEnvironment &JSC::CompactVariableMapKey::environment()
FTLForOSREntry
predicting 
NotJettisoned
WeakReference
DebuggerBreakpoint
DebuggerStepping
BaselineLoopReoptimizationTrigger
BaselineLoopReoptimizationTriggerOnOSREntryFail
OSRExit
ProfiledWatchpoint
UnprofiledWatchpoint
JettisonDueToOldAge
JettisonDueToVMTraps
./profiler/ProfilerJettisonReason.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::Profiler::JettisonReason)
AbstractModuleRecord
dependenciesMap
Exported binding name '
' is not found.
Exported binding name 'default' cannot be resolved by star export entries.
./runtime/AbstractModuleRecord.cpp
void JSC::AbstractModuleRecord::link(JSC::ExecState *, JSC::JSValue)
JSC::JSValue JSC::AbstractModuleRecord::evaluate(JSC::ExecState *)
Analyzing ModuleRecord key(
    Dependencies: 
 modules
      module(
    Import: 
 entries
      import(
), local(
), module(
    Export: 
      [Local] 
export(
      [Indirect] 
), import(
      [Star] module(
./runtime/ArrayBuffer.cpp
JSC::ArrayBufferContents::ArrayBufferContents(void *, unsigned int, JSC::ArrayBufferDestructorFunction &&)
void JSC::ArrayBufferContents::tryAllocate(unsigned int, unsigned int, JSC::ArrayBufferContents::InitializationPolicy)
void JSC::ArrayBufferContents::transferTo(JSC::ArrayBufferContents &)
void JSC::ArrayBufferContents::copyTo(JSC::ArrayBufferContents &)
void JSC::ArrayBufferContents::shareWith(JSC::ArrayBufferContents &)
void JSC::ArrayBuffer::setSharingMode(JSC::ArrayBufferSharingMode)
Cannot transfer a SharedArrayBuffer
Cannot transfer a WebAssembly.Memory
Cannot transfer an ArrayBuffer whose backing store has been accessed by the JavaScriptCore C API
ArrayBufferNeuteringWatchpoint
Array buffer was neutered
Array size is not a small enough positive integer.
Array Iterator
./runtime/ExceptionScope.h
./runtime/IndexingHeader.h
Array.isArray cannot be called on a Proxy that has been revoked
reverse
splice
unshift
indexOf
lastIndexOf
[object 
Cannot shift to offset greater than (2 ** 53) - 1
./runtime/ArrayPrototype.cpp
void JSC::ArrayPrototype::tryInitializeSpeciesWatchpoint(JSC::ExecState *)
Set up array species watchpoint.
ArrayPrototype adaption of 
 failed: 
AsyncFromSyncIterator
AsyncFunction
AsyncGeneratorFunction
AsyncGenerator
AsyncIterator
./runtime/JSObject.h
./runtime/JSArrayInlines.h
void JSC::JSArray::pushInline(JSC::ExecState *, JSC::JSValue)
Species construction did not get a valid constructor
Was not able to set up array species watchpoint.
void JSC::shift(JSC::ExecState *, JSC::JSObject *, unsigned int, unsigned int, unsigned int, unsigned int) [shiftCountMode = JSC::JSArray::ShiftCountForShift]
void JSC::shift(JSC::ExecState *, JSC::JSObject *, unsigned int, unsigned int, unsigned int, unsigned int) [shiftCountMode = JSC::JSArray::ShiftCountForSplice]
void JSC::unshift(JSC::ExecState *, JSC::JSObject *, unsigned int, unsigned int, unsigned int, unsigned int) [shiftCountMode = JSC::JSArray::ShiftCountForSplice]
void JSC::unshift(JSC::ExecState *, JSC::JSObject *, unsigned int, unsigned int, unsigned int, unsigned int) [shiftCountMode = JSC::JSArray::ShiftCountForShift]
BasicBlock: [%d, %d] hasExecuted: %s, executionCount:
asUintN
asIntN
Not safe integer
Invalid argument type in ToBigInt operation
valueOf
'this' value must be a BigInt or BigIntObject
./runtime/CallData.cpp
JSC::JSValue JSC::call(JSC::ExecState *, JSC::JSValue, JSC::CallType, const JSC::CallData &, JSC::JSValue, const JSC::ArgList &, NakedPtr<JSC::Exception> &)
Arguments
./runtime/ClonedArguments.cpp
void JSC::ClonedArguments::materializeSpecials(JSC::ExecState *)
./runtime/CodeCache.cpp
JSC::UnlinkedFunctionExecutable *JSC::CodeCache::getUnlinkedGlobalFunctionExecutable(JSC::VM &, const JSC::Identifier &, const JSC::SourceCode &, JSC::DebuggerMode, Optional<int>, JSC::ParserError &)
__proto__
ArrayIterator
BYTES_PER_ELEMENT
Credential
Date
DataTransferItem
DataTransferItemList
EvalError
GeneratorFunction
Intl
JSON
Loader
MapIterator
Math
Proxy
ReferenceError
SetIterator
SharedArrayBuffer
SyntaxError
URIError
WeakMap
WeakSet
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
additionalJettisonReason
assign
async
back
buffer
byteLength
byteOffset
bytecode
bytecodeIndex
bytecodes
bytecodesID
calendar
callee
caseFirst
collation
compilationKind
compilationUID
compilations
compile
counters
description
descriptions
detail
done
dotAll
eval
events
exitKind
fetch
formatMatcher
formatToParts
forward
fromCharCode
groups
hasOwnProperty
hash
hour
hourCycle
hour12
href
ignoreCase
ignorePunctuation
index
inferredName
input
instructionCount
isEnabled
isPrototypeOf
isWatchpoint
jettisonReason
join
lastIndex
locale
localeMatcher
minute
month
multiline
numInlinedCalls
numInlinedGetByIds
numInlinedPutByIds
numberingSystem
numeric
opcode
origin
osrExitSites
osrExits
parseInt
parseFloat
profiledBytecodes
second
sensitivity
size
slice
sourceCode
stack
stackTraceLimit
sticky
summary
timeZone
timeZoneName
toExponential
toFixed
toISOString
toJSON
toPrecision
unicode
usage
weekday
year
CommonSlowPaths
Invalid mix of BigInt and other type in subtraction.
Invalid mix of BigInt and other type in division.
Invalid mix of BigInt and other type in remainder operation.
Invalid mix of BigInt and other type in left shift operation.
Invalid mix of BigInt and other type in signed right shift operation.
Invalid mix of BigInt and other type in bitwise 'and' operation.
Invalid mix of BigInt and other type in bitwise 'or' operation.
Invalid mix of BigInt and other type in bitwise 'xor' operation.
LLInt log full.
./runtime/CommonSlowPaths.cpp
JSC::SlowPathReturnType JSC::slow_path_throw_static_error(JSC::ExecState *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::slow_path_new_array_with_spread(JSC::ExecState *, const JSC::Instruction *)
Invalid mix of BigInt and other type in multiplication.
./runtime/JSString.h
Allocated a scope
./runtime/GetPutInfo.h
./runtime/Completion.cpp
bool JSC::checkSyntax(JSC::ExecState *, const JSC::SourceCode &, JSC::JSValue *)
bool JSC::checkSyntax(JSC::VM &, const JSC::SourceCode &, JSC::ParserError &)
bool JSC::checkModuleSyntax(JSC::ExecState *, const JSC::SourceCode &, JSC::ParserError &)
EntryPointModule
JSC::JSValue JSC::evaluate(JSC::ExecState *, const JSC::SourceCode &, JSC::JSValue, NakedPtr<JSC::Exception> &)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::ExecState *, const WTF::String &, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::ExecState *, const JSC::SourceCode &, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadModule(JSC::ExecState *, const WTF::String &, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadModule(JSC::ExecState *, const JSC::SourceCode &, JSC::JSValue)
JSC::JSValue JSC::linkAndEvaluateModule(JSC::ExecState *, const JSC::Identifier &, JSC::JSValue)
JSC::JSInternalPromise *JSC::importModule(JSC::ExecState *, const JSC::Identifier &, JSC::JSValue, JSC::JSValue)
Error in JSC Config file on or near line %u, parsing '%s'
(unknown)
warn
timeEnd
timeStamp
takeHeapSnapshot
group
groupCollapsed
groupEnd
recordEnd
SourceID: 
Failed to open file JSC Config file '%s'.
jscOptions
logFile
%s/%s
processName
parentProcessName
build
Release
NETWORK
CONSOLE
STORAGE
APPCACHE
RENDERING
SECURITY
OTHER
UNKNOWN
DEBUG
INFO
WARN
ERROR
TRACE
TABLE
./runtime/ControlFlowProfiler.cpp
JSC::BasicBlockRange JSC::findBasicBlockAtTextOffset(int, const Vector<JSC::BasicBlockRange> &)
CustomGetterSetter
DOMAttributeGetterSetter
 GMT
toUTCString
toGMTString
[Symbol.toPrimitive]
Invalid Date
%+07d-%02d-%02dT%02d:%02d:%02d.%03dZ
%04d-%02d-%02dT%02d:%02d:%02d.%03dZ
Date.prototype[Symbol.toPrimitive] expected |this| to be an object.
Date.prototype[Symbol.toPrimitive] expected a first argument.
toISOString is not a function
toISOString did not return a primitive value
./runtime/DirectArguments.cpp
void JSC::DirectArguments::overrideThings(JSC::VM &)
toDateString
toTimeString
getTime
getFullYear
getUTCFullYear
getMonth
getUTCMonth
getDate
getUTCDate
getDay
getUTCDay
getHours
getUTCHours
getMinutes
getUTCMinutes
getSeconds
getUTCSeconds
getMilliseconds
getUTCMilliseconds
getTimezoneOffset
setTime
setMilliseconds
setUTCMilliseconds
setSeconds
setUTCSeconds
setMinutes
setUTCMinutes
setHours
setUTCHours
setDate
setUTCDate
setMonth
setUTCMonth
setFullYear
setUTCFullYear
setYear
getYear
short
long
Primitive hint is not a string.
Expected primitive hint to match one of 'default', 'number', 'string'.
./runtime/GenericArgumentsInlines.h
void JSC::GenericArguments<JSC::DirectArguments>::initModifiedArgumentsDescriptor(JSC::VM &, unsigned int) [Type = JSC::DirectArguments]
capturedArgumentInvalid
capturedArgument
Not enough arguments
calling 
 constructor without new is invalid
Syntax error
 getter can only be used on instances of 
Type error
Out of memory: 
./runtime/ErrorHandlingScope.cpp
JSC::ErrorHandlingScope::ErrorHandlingScope(JSC::VM &)
JSC::ErrorHandlingScope::~ErrorHandlingScope()
EvalExecutable
Exception
JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.
Exception Fuzz
TerminatedExecutionError
JavaScript execution terminated.
Maximum call stack size exceeded.
Can't find private variable: @
Can't find variable: 
 (evaluating '
second argument to Function.prototype.apply must be an Array-like object
is not an Object.
 is not a function
[Symbol.hasInstance] is not a function, undefined, or null
is not a constructor
is not a function
is not an object
Cannot access uninitialized variable.
 (near '...
...')
 is not an Object. (evaluating '
./runtime/ExceptionHelpers.cpp
WTF::String JSC::invalidParameterInstanceofSourceAppender(const WTF::String &, const WTF::String &, const WTF::String &, JSC::RuntimeType, ErrorInstance::SourceTextWhereErrorOccurred)
. (evaluating '
WTF::String JSC::notAFunctionSourceAppender(const WTF::String &, const WTF::String &, JSC::RuntimeType, ErrorInstance::SourceTextWhereErrorOccurred)
 is not a function. (In '
', '
' is 
a Symbol
an instance of 
Executable
function *
async function 
async function*
() {
() {
FunctionExecutable
./runtime/FunctionExecutable.cpp
JSC::FunctionExecutable::FunctionExecutable(JSC::VM &, const JSC::SourceCode &, JSC::UnlinkedFunctionExecutable *, unsigned int, unsigned int, JSC::Intrinsic)
JSC::FunctionCodeBlock *JSC::FunctionExecutable::baselineCodeBlockFor(JSC::CodeSpecializationKind)
<nogen>
FunctionRareData
AllocationProfileClearingWatchpoint fired.
() {
    [native code]
function* 
async 
async function* 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/bytecode/ObjectAllocationProfileInlines.h
void JSC::ObjectAllocationProfile::initializeProfile(JSC::VM &, JSC::JSGlobalObject *, JSC::JSCell *, JSC::JSObject *, unsigned int, JSC::JSFunction *, JSC::FunctionRareData *)
Generator
GetterSetter
./runtime/HashMapImpl.h
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue> >::finishCreation(JSC::ExecState *, JSC::VM &, HashMapImpl<HashMapBucketType> *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>]
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue> >::rehash(JSC::ExecState *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>]
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKey> >::finishCreation(JSC::ExecState *, JSC::VM &, HashMapImpl<HashMapBucketType> *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKey>]
HashMapBucket
<null identifier>
Unknown!
%s%s
|MayHaveIndexedAccessors
ThrowIfNotFound
DoNotThrowIfNotFound
GlobalProperty
GlobalVar
GlobalLexicalVar
ClosureVar
LocalClosureVar
ModuleVar
GlobalPropertyWithVarInjectionChecks
GlobalVarWithVarInjectionChecks
GlobalLexicalVarWithVarInjectionChecks
ClosureVarWithVarInjectionChecks
UnresolvedProperty
UnresolvedPropertyWithVarInjectionChecks
Dynamic
Initialization
ConstInitialization
NotInitialization
./runtime/GetterSetter.h
static bool JSC::GetterSetter::put(JSC::JSCell *, JSC::ExecState *, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot &)
static bool JSC::GetterSetter::putByIndex(JSC::JSCell *, JSC::ExecState *, unsigned int, JSC::JSValue, bool)
static bool JSC::GetterSetter::deleteProperty(JSC::JSCell *, JSC::ExecState *, JSC::PropertyName)
static bool JSC::GetterSetter::getOwnPropertySlot(JSC::JSObject *, JSC::ExecState *, JSC::PropertyName, JSC::PropertySlot &)
static bool JSC::GetterSetter::defineOwnProperty(JSC::JSObject *, JSC::ExecState *, JSC::PropertyName, const JSC::PropertyDescriptor &, bool)
static bool JSC::GetterSetter::setPrototype(JSC::JSObject *, JSC::ExecState *, JSC::JSValue, bool)
InferredValue
./runtime/InternalFunction.cpp
JSC::InternalFunction::InternalFunction(JSC::VM &, JSC::Structure *, JSC::NativeFunction, JSC::NativeFunction)
usage must be either "sort" or "search"
lookup
best fit
localeMatcher must be either "lookup" or "best fit"
upper
lower
caseFirst must be either "upper", "lower", or "false"
failed to initialize Collator due to invalid locale
base
accent
variant
sensitivity must be either "base", "accent", "case", or "variant"
Failed to compare strings.
hourCycle must be "h11", "h12", "h23", or "h24"
failed to initialize DateTimeFormat due to invalid locale
gregorian
gregory
islamicc
islamic-civil
ethioaa
ethiopic-amete-alem
dataLocale
invalid time zone: %s
narrow
2-digit
weekday must be "narrow", "short", or "long"
EEEEE
EEEE
era must be "narrow", "short", or "long"
GGGGG
GGGG
year must be "2-digit" or "numeric"
month must be "2-digit", "numeric", "narrow", "short", or "long"
MMMMM
MMMM
day must be "2-digit" or "numeric"
hour must be "2-digit" or "numeric"
minute must be "2-digit" or "numeric"
second must be "2-digit" or "numeric"
timeZoneName must be "short" or "long"
zzzz
formatMatcher must be either "basic" or "best fit"
failed to initialize DateTimeFormat
date value is not finite in DateTimeFormat format()
failed to format date value
dayPeriod
date value is not finite in DateTimeFormat formatToParts()
failed to open field position iterator
literal
standard
dictionary
dict
gb2312han
gb2312
phonebook
phonebk
traditional
trad
supportedLocalesOf
compare
resolvedOptions
Intl.Collator.prototype.compare called on value that's not an object initialized as a Collator
Intl.Collator.prototype.resolvedOptions called on value that's not an object initialized as a Collator
Etc/UTC
Etc/GMT
failed to initialize NumberFormat due to invalid locale
decimal
percent
currency
style must be either "decimal", "percent", or "currency"
currency is not a well-formed currency code
currency must be a string
currencyDisplay
currencyDisplay must be either "code", "symbol", or "name"
minimumIntegerDigits
minimumFractionDigits
maximumFractionDigits
minimumSignificantDigits
maximumSignificantDigits
useGrouping
failed to initialize NumberFormat
Intl.NumberFormat.prototype.format called on value that's not an object initialized as a NumberFormat
Failed to format a number.
infinity
integer
fraction
percentSign
minusSign
plusSign
Intl.NumberFormat.prototype.formatToParts called on value that's not an object initialized as a NumberFormat
failed to format a number.
getCanonicalLocales
 is out of range
locale value must be a string or object
invalid language tag: %s
failed to initialize PluralRules due to invalid locale
cardinal
ordinal
type must be "cardinal" or "ordinal"
failed to initialize PluralRules
Intl.PluralRules.prototype.resolvedOptions called on value that's not an object initialized as a PluralRules
pluralCategories
Intl.PluralRules.prototype.select called on value that's not an object initialized as a PluralRules
failed to select plural value
format
Intl.DateTimeFormat.prototype.format called on value that's not an object initialized as a DateTimeFormat
Intl.DateTimeFormat.prototype.resolvedOptions called on value that's not an object initialized as a DateTimeFormat
Intl.DateTimeFormat.prototype.formatToParts called on value that's not an object initialized as a DateTimeFormat
Intl.NumberFormat.prototype.resolvedOptions called on value that's not an object initialized as a NumberFormat
art-lojban
cel-gaulish
en-gb-oed
en-GB-oxendict
i-ami
i-bnn
i-default
i-enochian
i-hak
i-klingon
i-lux
i-mingo
i-navajo
i-pwn
i-tao
i-tay
i-tsu
no-bok
no-nyn
sgn-be-fr
sgn-be-nl
sgn-ch-de
zh-guoyu
zh-hakka
zh-min
zh-min-nan
zh-xiang
hy-arevela
hy-arevmda
ja-Latn-hepburn-heploc
ja-Latn-alalc97
sgn-BR
sgn-CO
sgn-DE
sgn-DK
sgn-ES
sgn-FR
sgn-GB
sgn-GR
sgn-IE
sgn-IT
sgn-JP
sgn-MX
sgn-NI
sgn-NL
sgn-NO
sgn-PT
sgn-SE
sgn-US
sgn-ZA
zh-cmn-Hans
cmn-Hans
zh-cmn-Hant
cmn-Hant
./runtime/IntlObject.cpp
JSC::MatcherResult JSC::lookupMatcher(JSC::ExecState &, const HashSet<WTF::String> &, const Vector<WTF::String> &)
./runtime/IteratorOperations.cpp
JSC::Structure *JSC::createIteratorResultObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
Symbol.iterator property should be callable
Iterator
Length exceeded the maximum array length
Invalid array length
Attempting to define numeric property on array with non-writable length property.
./runtime/JSArray.cpp
bool JSC::JSArray::unshiftCountSlowCase(const WTF::AbstractLocker &, JSC::VM &, JSC::DeferGC &, bool, unsigned int)
JSC::JSValue JSC::JSArray::pop(JSC::ExecState *)
bool JSC::JSArray::shiftCountWithArrayStorage(JSC::VM &, unsigned int, unsigned int, JSC::ArrayStorage *)
bool JSC::JSArray::shiftCountWithAnyIndexingType(JSC::ExecState *, unsigned int &, unsigned int)
bool JSC::JSArray::unshiftCountWithArrayStorage(JSC::ExecState *, unsigned int, unsigned int, JSC::ArrayStorage *)
ArrayBufferPrototype
select
bool JSC::JSObject::hasSparseMap()
JSC::JSArray *JSC::constructArray(JSC::ObjectInitializationScope &, JSC::Structure *, unsigned int)
void JSC::JSObject::initializeIndex(JSC::ObjectInitializationScope &, unsigned int, JSC::JSValue, JSC::IndexingType)
./runtime/ArrayBufferSharingMode.h
WTF::ASCIILiteral JSC::arrayBufferSharingModeName(JSC::ArrayBufferSharingMode)
 cannot be negative
 too large
Receiver of slice must be an ArrayBuffer.
Receiver should be an array buffer but was not an object
Receiver should be an array buffer
Receiver should not be a shared array buffer
Receiver should be a shared array buffer
ArrayBufferView
./runtime/JSArrayBufferView.cpp
void JSC::JSArrayBufferView::finishCreation(JSC::VM &)
static void JSC::JSArrayBufferView::visitChildren(JSC::JSCell *, JSC::SlotVisitor &)
JSC::ArrayBuffer *JSC::JSArrayBufferView::unsharedBuffer()
void JSC::JSArrayBufferView::neuter()
JSC::ArrayBuffer *JSC::JSArrayBufferView::slowDownAndWasteMemory()
RefPtr<JSC::ArrayBufferView> JSC::JSArrayBufferView::possiblySharedImpl()
FastTypedArray
OversizeTypedArray
WastefulTypedArray
DataViewMode
void WTF::printInternal(WTF::PrintStream &, JSC::TypedArrayMode)
Allocating an async function
JSAsyncGeneratorFunction
Allocating an async generator
JSBigInt
0 is an invalid divisor value.
BigInt generated from this operation is too big
0123456789abcdefghijklmnopqrstuvwxyz
Conversion from 'BigInt' to 'number' is not allowed.
./runtime/JSBoundFunction.cpp
JSC::EncodedJSValue JSC::boundThisNoArgsFunctionCall(JSC::ExecState *)
JSC::EncodedJSValue JSC::boundThisNoArgsFunctionConstruct(JSC::ExecState *)
<JSValue()>
Int32: %d
Double: %08x:%08x, %lf
 (rope)
 (atomic)
 (identifier)
 (symbol)
 (unresolved)
RegExp: 
Symbol: 
Object: 
 with butterfly 
 (Structure 
Cell: 
True
False
Null
Undefined
INVALID
(unresolved string)
Structure[ 
Cell[
Cannot convert a symbol to a string
Callee
./runtime/JSCallee.cpp
JSC::JSCallee::JSCallee(JSC::VM &, JSC::JSGlobalObject *, JSC::Structure *)
./runtime/ButterflyInlines.h
static JSC::Butterfly *JSC::Butterfly::create(JSC::VM &, JSC::JSObject *, size_t, size_t, bool, const JSC::IndexingHeader &, size_t)
Failed to parse String to BigInt
<%p, %s>
./runtime/JSCell.cpp
static JSC::JSValue JSC::JSCell::defaultValue(const JSC::JSObject *, JSC::ExecState *, JSC::PreferredPrimitiveType)
static bool JSC::JSCell::getOwnPropertySlot(JSC::JSObject *, JSC::ExecState *, JSC::PropertyName, JSC::PropertySlot &)
static bool JSC::JSCell::getOwnPropertySlotByIndex(JSC::JSObject *, JSC::ExecState *, unsigned int, JSC::PropertySlot &)
static void JSC::JSCell::getOwnPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static void JSC::JSCell::getOwnNonIndexPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static WTF::String JSC::JSCell::className(const JSC::JSObject *, JSC::VM &)
static WTF::String JSC::JSCell::toStringName(const JSC::JSObject *, JSC::ExecState *)
static void JSC::JSCell::getPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static bool JSC::JSCell::customHasInstance(JSC::JSObject *, JSC::ExecState *, JSC::JSValue)
static bool JSC::JSCell::defineOwnProperty(JSC::JSObject *, JSC::ExecState *, JSC::PropertyName, const JSC::PropertyDescriptor &, bool)
static uint32_t JSC::JSCell::getEnumerableLength(JSC::ExecState *, JSC::JSObject *)
static void JSC::JSCell::getStructurePropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static void JSC::JSCell::getGenericPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static bool JSC::JSCell::preventExtensions(JSC::JSObject *, JSC::ExecState *)
static bool JSC::JSCell::isExtensible(JSC::JSObject *, JSC::ExecState *)
static bool JSC::JSCell::setPrototype(JSC::JSObject *, JSC::ExecState *, JSC::JSValue, bool)
static JSC::JSValue JSC::JSCell::getPrototype(JSC::JSObject *, JSC::ExecState *)
get 
set 
Attempting to write to read-only typed array property.
Attempting to define read-only typed array property.
DataViewPrototype
DataView.prototype.buffer expects |this| to be a DataView object
JSFixedArray
<%p, %s, [%u], [
Allocating a function
Function.caller used to retrieve generator body
Function.caller used to retrieve async function body
Function.caller used to retrieve strict caller
./runtime/JSFunction.cpp
static JSC::EncodedJSValue JSC::JSFunction::callerGetter(JSC::ExecState *, JSC::EncodedJSValue, JSC::PropertyName)
Store to prototype property of a function
bound 
getInt8
getUint8
getInt16
getUint16
getInt32
getUint32
getFloat32
getFloat64
setInt8
setUint8
setInt16
setUint16
setInt32
setUint32
setFloat32
setFloat64
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator5.2.sdk/usr/local/include/wtf/LockAlgorithmInlines.h
static void WTF::LockAlgorithm<unsigned char, '@', '\x80', WTF::EmptyLockHooks<unsigned char> >::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '@', hasParkedBit = '\x80', Hooks = WTF::EmptyLockHooks<unsigned char>]
static void WTF::LockAlgorithm<unsigned char, '@', '\x80', WTF::EmptyLockHooks<unsigned char> >::unlockSlow(Atomic<LockType> &, WTF::LockAlgorithm::Fairness) [LockType = unsigned char, isHeldBit = '@', hasParkedBit = '\x80', Hooks = WTF::EmptyLockHooks<unsigned char>]
Receiver of DataView method must be a DataView
Out of bounds access
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/heap/MarkedBlockInlines.h
auto JSC::MarkedBlock::Handle::finishSweepKnowingHeapCellType(JSC::FreeList *, const JSC::JSDestructibleObjectDestroyFunc &)::(anonymous class)::operator()() const
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
Allocating a generator function
JSGlobalLexicalEnvironment
GlobalObject
./runtime/JSGlobalObject.cpp
void JSC::JSGlobalObject::addGlobalVar(const JSC::Identifier &)
Having a bad time
void JSC::JSGlobalObject::addStaticGlobals(JSC::JSGlobalObject::GlobalPropertyInfo *, int)
void JSC::slowValidateCell(JSC::JSGlobalObject *)
JSContext
Object.prototype.__proto__ called on null or undefined
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$&'()*+,-./:;=?@_~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!'()*-._~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*+-./@_
'arguments', 'callee', and 'caller' cannot be accessed in this context.
./runtime/JSGlobalObjectFunctions.cpp
JSC::EncodedJSValue JSC::globalFuncImportModule(JSC::ExecState *)
JSC::EncodedJSValue JSC::globalFuncPropertyIsEnumerable(JSC::ExecState *)
Immutable Butterfly
escape
unescape
decodeURI
decodeURIComponent
encodeURI
encodeURIComponent
globalThis
./runtime/ProxyObject.h
static JSC::Structure *JSC::ProxyObject::createStructure(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, bool)
auto JSC::JSGlobalObject::init(JSC::VM &)::(anonymous class)::operator()(JSC::JSObject *, const JSC::Identifier &) const
./runtime/SymbolTable.h
pa-Arab-PK
pa-PK
zh-Hans-CN
zh-CN
zh-Hant-HK
zh-HK
zh-Hans-SG
zh-SG
zh-Hant-TW
zh-TW
double JSC::jsStrDecimalLiteral(const CharType *&, const CharType *) [CharType = unsigned char]
double JSC::jsStrDecimalLiteral(const CharType *&, const CharType *) [CharType = unsigned short]
URI error
String contained an illegal UTF-16 sequence.
./runtime/LazyPropertyInlines.h
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:435:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:439:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:444:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:454:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:458:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:462:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:467:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:472:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter, Func = (lambda at ./runtime/JSGlobalObject.cpp:479:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype, Func = (lambda at ./runtime/JSGlobalObject.cpp:505:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:512:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/LazyClassStructureInlines.h:37:9)]
ArrayBuffer length minus the byteOffset is not a multiple of the element size
Underlying ArrayBuffer has been detached from the view
./runtime/JSGenericTypedArrayViewInlines.h
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor]
Range consisting of offset and length are out of bounds
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::set(JSC::ExecState *, unsigned int, JSC::JSObject *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::ExecState *, unsigned int, JSGenericTypedArrayView<OtherAdaptor> *, unsigned int, unsigned int, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
DataView constructor requires at least one argument.
Expected ArrayBuffer for the first argument.
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:539:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:544:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:548:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:555:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:562:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:566:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:572:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:576:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::NativeErrorConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::NativeErrorConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:709:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::NativeErrorConstructor>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::NativeErrorConstructor]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::NativeErrorConstructor>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::NativeErrorConstructor]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::NativeErrorConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::NativeErrorConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:714:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::NativeErrorConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::NativeErrorConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:718:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::NativeErrorConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::NativeErrorConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:723:9)]
./runtime/ObjectPropertyChangeAdaptiveWatchpoint.h
JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::ObjectPropertyChangeAdaptiveWatchpoint(const JSC::ObjectPropertyCondition &, Watchpoint &) [Watchpoint = JSC::InlineWatchpointSet]
Object Property is changed.
void JSC::SymbolTable::add(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry]
JSInternalPromiseDeferred
InternalPromisePrototype
JSLexicalEnvironment
./runtime/JSLock.cpp
void JSC::JSLock::didAcquireLock()
void JSC::JSLock::unlock(intptr_t)
JSC::JSLock::DropAllLocks::DropAllLocks(JSC::VM *)
Map Iterator
JSModuleEnvironment
Primitive gigacage disabled asynchronously
ModuleLoader
registry
Loader [import] 
Could not import the module '
Loader [resolve] 
Loader [fetch] 
Could not open the module '
Loader [evaluate] 
ModuleNamespaceObject
./runtime/JSModuleNamespaceObject.cpp
bool JSC::JSModuleNamespaceObject::getOwnPropertySlotCommon(JSC::ExecState *, JSC::PropertyName, JSC::PropertySlot &)
ModuleRecord
Indirectly exported binding name '
' cannot be resolved due to ambiguous multiple bindings.
Indirectly exported binding name 'default' cannot be resolved by star export entries.
Importing binding name '
Importing binding name 'default' cannot be resolved by star export entries.
JSON.stringify cannot serialize BigInt.
JSON.stringify cannot serialize cyclic structures.
JSON.parse requires at least one parameter
./runtime/JSObject.cpp
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::ExecState *, unsigned int, JSC::JSValue) [indexingShape = '\x04']
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::ExecState *, unsigned int, JSC::JSValue) [indexingShape = '\x06']
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::ExecState *, unsigned int, JSC::JSValue) [indexingShape = '\x08']
Attempting to define property on object that is not extensible.
Attempted to assign to readonly property.
Attempting to change value of a readonly property.
Unable to delete property.
Attempting to change access mechanism for an unconfigurable property.
Attempting to change configurable attribute of unconfigurable property.
Attempting to change enumerable attribute of unconfigurable property.
Attempting to change writable attribute of unconfigurable property.
static bool JSC::JSObject::getOwnPropertySlotByIndex(JSC::JSObject *, JSC::ExecState *, unsigned int, JSC::PropertySlot &)
static bool JSC::JSObject::putByIndex(JSC::JSCell *, JSC::ExecState *, unsigned int, JSC::JSValue, bool)
JSC::ArrayStorage *JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(JSC::VM &, JSC::ArrayStorage *)
static JSC::Butterfly *JSC::JSObject::createArrayStorageButterfly(JSC::VM &, JSC::JSObject *, JSC::Structure *, unsigned int, unsigned int, JSC::Butterfly *)
JSC::ArrayStorage *JSC::JSObject::ensureArrayStorageSlow(JSC::VM &)
void JSC::JSObject::switchToSlowPutArrayStorage(JSC::VM &)
Cannot set prototype of immutable prototype object
cyclic __proto__ value
static bool JSC::JSObject::deletePropertyByIndex(JSC::JSCell *, JSC::ExecState *, unsigned int)
No default value
instanceof called on an object with an invalid prototype property.
static void JSC::JSObject::getOwnPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
bool JSC::JSObject::defineOwnIndexedProperty(JSC::ExecState *, unsigned int, const JSC::PropertyDescriptor &, bool)
Attempting to change the setter of an unconfigurable property.
Attempting to change the getter of an unconfigurable property.
bool JSC::JSObject::putByIndexBeyondVectorLength(JSC::ExecState *, unsigned int, JSC::JSValue, bool)
bool JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(JSC::ExecState *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)
static uint32_t JSC::JSObject::getEnumerableLength(JSC::ExecState *, JSC::JSObject *)
moduleDeclarationInstantiation
getModuleNamespaceObject
parseModule
requestedModules
resolveSync
Loader [link] 
./runtime/ArgList.h
void JSC::MarkedArgumentBuffer::appendWithAction(JSC::JSValue) [action = JSC::MarkedArgumentBuffer::CrashOnOverflow]
UChar WTF::StringBuilder::operator[](unsigned int) const
stringify
bool JSC::JSObject::ensureLength(JSC::VM &, unsigned int)
JSObject::visitButterfly
auto JSC::JSObject::convertFromCopyOnWrite(JSC::VM &)::(anonymous class)::operator()() const
bool JSC::JSObject::inSparseIndexingMode()
static JSC::Butterfly *JSC::Butterfly::createOrGrowPropertyStorage(JSC::Butterfly *, JSC::VM &, JSC::JSObject *, JSC::Structure *, size_t, size_t)
JSON Parse error: 
JSON Parse error: Unable to parse JSON string
Symbol.toPrimitive returned an object
Symbol.toPrimitive is not a function, undefined, or null
JSPromiseDeferred
PromisePrototype
JSPropertyNameEnumerator
JSProxy
./runtime/JSRunLoopTimer.cpp
void JSC::JSRunLoopTimer::Manager::PerVMData::setRunLoop(JSC::JSRunLoopTimer::Manager *, CFRunLoopRef)
void JSC::JSRunLoopTimer::Manager::registerVM(JSC::VM &)
void JSC::JSRunLoopTimer::Manager::unregisterVM(JSC::VM &)
void JSC::JSRunLoopTimer::Manager::scheduleTimer(JSC::JSRunLoopTimer &, WTF::Seconds)
void JSC::JSRunLoopTimer::Manager::cancelTimer(JSC::JSRunLoopTimer &)
Optional<WTF::Seconds> JSC::JSRunLoopTimer::Manager::timeUntilFire(JSC::JSRunLoopTimer &)
void JSC::JSRunLoopTimer::Manager::didChangeRunLoop(JSC::VM &, CFRunLoopRef)
Scope
JSScriptFetchParameters
JSScriptFetcher
SegmentedVariableObject
./runtime/JSSegmentedVariableObject.cpp
JSC::JSSegmentedVariableObject::~JSSegmentedVariableObject()
Set Iterator
JSSourceCode
./runtime/JSString.cpp
void JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::expand() [OverflowHandler = WTF::RecordOverflow]
<%p, %s, [%u], 
[rope]
[8 %p]
[16 %p]
String Iterator
auto JSC::MarkedBlock::Handle::finishSweepKnowingHeapCellType(JSC::FreeList *, const JSC::JSSegmentedVariableObjectDestroyFunc &)::(anonymous class)::operator()() const
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSSegmentedVariableObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSSegmentedVariableObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSSegmentedVariableObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSSegmentedVariableObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSSegmentedVariableObjectDestroyFunc]
auto JSC::MarkedBlock::Handle::finishSweepKnowingHeapCellType(JSC::FreeList *, const JSC::JSStringDestroyFunc &)::(anonymous class)::operator()() const
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSStringDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSStringDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSStringDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSStringDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSStringDestroyFunc]
SymbolTableObject
TemplateObjectDescriptor
CellType
StringType
SymbolType
BigIntType
CustomGetterSetterType
APIValueWrapperType
ProgramExecutableType
ModuleProgramExecutableType
EvalExecutableType
FunctionExecutableType
UnlinkedFunctionExecutableType
UnlinkedProgramCodeBlockType
UnlinkedModuleProgramCodeBlockType
UnlinkedEvalCodeBlockType
UnlinkedFunctionCodeBlockType
CodeBlockType
JSFixedArrayType
JSImmutableButterflyType
JSSourceCodeType
JSScriptFetcherType
JSScriptFetchParametersType
ObjectType
FinalObjectType
JSCalleeType
JSFunctionType
InternalFunctionType
NumberObjectType
ErrorInstanceType
PureForwardingProxyType
ImpureProxyType
DirectArgumentsType
ScopedArgumentsType
ClonedArgumentsType
ArrayType
DerivedArrayType
ArrayBufferType
Int8ArrayType
Uint8ArrayType
Uint8ClampedArrayType
Int16ArrayType
Uint16ArrayType
Int32ArrayType
Uint32ArrayType
Float32ArrayType
Float64ArrayType
DataViewType
GetterSetterType
GlobalObjectType
GlobalLexicalEnvironmentType
LexicalEnvironmentType
ModuleEnvironmentType
StrictEvalActivationType
WithScopeType
RegExpObjectType
ProxyObjectType
JSMapType
JSSetType
JSWeakMapType
JSWeakSetType
WebAssemblyToJSCalleeType
StringObjectType
MaxJSType
Prototype
Int8ArrayPrototype
Int16ArrayPrototype
Int32ArrayPrototype
Uint8ArrayPrototype
Uint8ClampedArrayPrototype
Uint16ArrayPrototype
Uint32ArrayPrototype
Float32ArrayPrototype
Float64ArrayPrototype
TypedArray
Receiver should be a typed array view
./runtime/JSTypedArrayViewPrototype.cpp
JSC::EncodedJSValue JSC::typedArrayViewPrivateFuncSort(JSC::ExecState *)
Receiver should be a typed array view but was not an object
JSC::EncodedJSValue JSC::typedArrayViewPrivateFuncSubarrayCreate(JSC::ExecState *)
get [Symbol.toStringTag]
%TypedArray% should not be called directly
./runtime/JSGlobalObject.h
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncBuffer(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncByteLength(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncByteOffset(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncCopyWithin(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncIncludes(JSC::ExecState *)
./runtime/JSGenericTypedArrayViewPrototypeFunctions.h
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncIndexOf(JSC::ExecState *)
Expected at least one argument
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncJoin(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncLastIndexOf(JSC::ExecState *)
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncLength(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncReverse(JSC::ExecState *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncSet(JSC::ExecState *)
Offset should not be negative
First argument should be an object
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncSlice(JSC::ExecState *)
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
constructor Property should not be null
species is not a constructor
species constructor did not return a TypedArray View
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncToStringTag(JSC::ExecState *)
./runtime/JSGenericTypedArrayView.h
void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sort() [Adaptor = JSC::Float64Adaptor]
void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sort() [Adaptor = JSC::Float32Adaptor]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::ExecState *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
WithScope
./runtime/LazyClassStructure.cpp
void JSC::LazyClassStructure::Initializer::setPrototype(JSC::JSObject *)
void JSC::LazyClassStructure::Initializer::setStructure(JSC::Structure *)
void JSC::LazyClassStructure::Initializer::setConstructor(JSC::PropertyName, JSC::JSObject *)
void JSC::LazyClassStructure::Initializer::setConstructor(JSC::JSObject *)
Single quotes (') are not allowed in JSON
Unterminated string
\u must be followed by 4 hex digits
" is not a valid unicode escape
Invalid escape character 
Invalid number
Invalid digits after decimal point
Exponent symbols should be followed by an optional '+' or '-' and then by at least one number
Unexpected comma at the end of array expression
Expected ']'
Expected ':' before value in object property definition
Expected '}'
Property name must be a string literal
Expected ':'
Unexpected token ']'
Unexpected token '}'
Unexpected identifier "
Unexpected token ':'
Unexpected token '('
Unexpected token ')'
Unexpected token ','
Unexpected token '.'
Unexpected token '='
Unexpected token ';'
Could not parse value expression
Unexpected token '{'
Unexpected identifier
Unexpected token 'true'
Unexpected token 'false'
Unexpected token 'null'
Could not parse statement
Unexpected content at end of JSON literal
./runtime/LiteralParser.cpp
JSC::JSValue JSC::LiteralParser<unsigned char>::parse(JSC::ParserState) [CharType = unsigned char]
JSC::JSValue JSC::LiteralParser<unsigned short>::parse(JSC::ParserState) [CharType = unsigned short]
Static hashtable initialiation for 
 did not produce a property.
./runtime/Lookup.cpp
bool JSC::setUpStaticFunctionSlot(JSC::VM &, const JSC::ClassInfo *, const JSC::HashTableValue *, JSC::JSObject *, JSC::PropertyName, JSC::PropertySlot &)
static void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Int8Adaptor]
Attempting to store accessor property on a typed array at index: 
Attempting to configure non-configurable property on a typed array at index: 
Attempting to store non-enumerable or non-writable property on a typed array at index: 
static void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Int16Adaptor]
static void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Int32Adaptor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Uint8Adaptor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Uint8ClampedAdaptor]
static void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Uint16Adaptor]
static void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Uint32Adaptor]
static void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Float32Adaptor]
static void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildren(JSC::JSCell *, JSC::SlotVisitor &) [Adaptor = JSC::Float64Adaptor]
LN10
LOG2E
LOG10E
SQRT1_2
SQRT2
acos
asin
atan
acosh
asinh
atanh
atan2
cbrt
ceil
clz32
cosh
expm1
fround
hypot
log10
log1p
log2
random
round
sign
sinh
sqrt
tanh
imul
ModuleProgramExecutable
Map operation called on non-Map object
NativeExecutable
NativeStdFunctionCell
EPSILON
MAX_VALUE
MIN_VALUE
MIN_SAFE_INTEGER
isInteger
Setting a property that has only a getter
isSafeInteger
0123456789abcdefghijklmnopqrstuvwxyz
thisNumberValue called on incompatible 
toString() radix argument must be between 2 and 36
Cannot set prototype of undefined or null
Prototype value can only be an object or null
Object.assign requires that input parameter not be null or undefined
Object.values requires that input parameter not be null or undefined
Property description must be an object.
Getter must be a function.
Setter must be a function.
Invalid property.  'value' present on property with getter or setter.
Invalid property.  'writable' present on property with getter or setter.
Properties can only be defined on Objects.
Object prototype may only be an Object or null.
Property descriptor list must be an Object.
Unable to prevent extension in Object.seal
Unable to prevent extension in Object.freeze
Invalid mix of BigInt and other type in addition.
WARNING: failed to parse %s=%s
 %u:%u
validateOptions
crashes if mis-typed JSC options were passed to the VM
dumpOptions
dumps JSC options (0 = None, 1 = Overridden only, 2 = All, 3 = Verbose)
configFile
file to configure JSC options and logging location
useLLInt
allows the LLINT to be used if true
useJIT
allows the executable pages to be allocated for JIT and thunks if true
useBaselineJIT
allows the baseline JIT to be used if true
useDFGJIT
allows the DFG JIT to be used if true
useRegExpJIT
allows the RegExp JIT to be used if true
useDOMJIT
allows the DOMJIT to be used if true
reportMustSucceedExecutableAllocations
maxPerThreadStackUsage
Max allowed stack usage by the VM
softReservedZoneSize
A buffer greater than reservedZoneSize that reserves space for stringifying exceptions.
reservedZoneSize
The amount of stack space we guarantee to our clients (and to interal VM code that does not call out to clients).
crashIfCantAllocateJITMemory
jitMemoryReservationSize
Set this number to change the executable allocation size in ExecutableAllocatorFixedVMPool. (In bytes.)
useSeparatedWXHeap
forceCodeBlockLiveness
forceICFailure
repatchCountForCoolDown
initialCoolDownCount
repatchBufferingCountdown
dumpGeneratedBytecodes
dumpBytecodeLivenessResults
validateBytecode
forceDebuggerBytecodeGeneration
dumpBytecodesBeforeGeneratorification
useFunctionDotArguments
useTailCalls
optimizeRecursiveTailCalls
alwaysUseShadowChicken
shadowChickenLogSize
shadowChickenMaxTailDeletedFramesSize
dumpDisassembly
dumps disassembly of all JIT compiled code upon compilation
asyncDisassembly
dumpDFGDisassembly
dumps disassembly of DFG function upon compilation
dumpFTLDisassembly
dumps disassembly of FTL function upon compilation
dumpRegExpDisassembly
dumps disassembly of RegExp upon compilation
dumpAllDFGNodes
logJITCodeForPerf
bytecodeRangeToJITCompile
bytecode size range to allow compilation on, e.g. 1:100
bytecodeRangeToDFGCompile
bytecode size range to allow DFG compilation on, e.g. 1:100
bytecodeRangeToFTLCompile
bytecode size range to allow FTL compilation on, e.g. 1:100
jitWhitelist
file with list of function signatures to allow compilation on
dfgWhitelist
file with list of function signatures to allow DFG compilation on
ftlWhitelist
file with list of function signatures to allow FTL compilation on
dumpSourceAtDFGTime
dumps source code of JS function being DFG compiled
dumpBytecodeAtDFGTime
dumps bytecode of JS function being DFG compiled
dumpGraphAfterParsing
dumpGraphAtEachPhase
dumpDFGGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation (note this excludes DFG graphs during FTL compilation)
dumpDFGFTLGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation when compiling FTL code
dumpB3GraphAtEachPhase
dumps the B3 graph at each phase of compilation
dumpAirGraphAtEachPhase
dumps the Air graph at each phase of compilation
verboseDFGBytecodeParsing
safepointBeforeEachPhase
verboseCompilation
verboseFTLCompilation
logCompilationChanges
useProbeOSRExit
printEachOSRExit
validateGraph
validateGraphAtEachPhase
verboseValidationFailure
verboseOSR
verboseDFGOSRExit
verboseFTLOSRExit
verboseCallLink
verboseCompilationQueue
reportCompileTimes
dumps JS function signature and the time it took to compile in all tiers
reportBaselineCompileTimes
dumps JS function signature and the time it took to BaselineJIT compile
reportDFGCompileTimes
dumps JS function signature and the time it took to DFG and FTL compile
reportFTLCompileTimes
dumps JS function signature and the time it took to FTL compile
reportTotalCompileTimes
reportParseTimes
dumps JS function signature and the time it took to parse
reportBytecodeCompileTimes
dumps JS function signature and the time it took to bytecode compile
verboseExitProfile
verboseCFA
verboseDFGFailure
verboseFTLToJSThunk
verboseFTLFailure
alwaysComputeHash
testTheFTL
verboseSanitizeStack
useGenerationalGC
useConcurrentBarriers
useConcurrentGC
collectContinuously
collectContinuouslyPeriodMS
forceFencedBarrier
verboseVisitRace
optimizeParallelSlotVisitorsForStoppedMutator
largeHeapSize
smallHeapSize
smallHeapRAMFraction
smallHeapGrowthFactor
mediumHeapRAMFraction
mediumHeapGrowthFactor
largeHeapGrowthFactor
miniVMHeapGrowthFactor
criticalGCMemoryThreshold
percent memory in use the GC considers critical.  The collector is much more aggressive above this threshold
minimumMutatorUtilization
maximumMutatorUtilization
epsilonMutatorUtilization
concurrentGCMaxHeadroom
concurrentGCPeriodMS
useStochasticMutatorScheduler
minimumGCPauseMS
gcPauseScale
gcIncrementBytes
gcIncrementMaxBytes
gcIncrementScale
scribbleFreeCells
sizeClassProgression
largeAllocationCutoff
dumpSizeClasses
useBumpAllocator
stealEmptyBlocksFromOtherAllocators
tradeDestructorBlocks
eagerlyUpdateTopCallFrame
useOSREntryToDFG
useOSREntryToFTL
useFTLJIT
allows the FTL JIT to be used if true
useFTLTBAA
validateFTLOSRExitLiveness
defaultB3OptLevel
b3AlwaysFailsBeforeCompile
b3AlwaysFailsBeforeLink
ftlCrashes
clobberAllRegsInFTLICSlowPath
enableJITDebugAssertions
useAccessInlining
maxAccessVariantListSize
usePolyvariantDevirtualization
usePolymorphicAccessInlining
maxPolymorphicAccessInliningListSize
usePolymorphicCallInlining
usePolymorphicCallInliningForNonStubStatus
maxPolymorphicCallVariantListSize
maxPolymorphicCallVariantListSizeForTopTier
maxPolymorphicCallVariantListSizeForWebAssemblyToJS
maxPolymorphicCallVariantsForInlining
frequentCallThreshold
minimumCallToKnownRate
createPreHeaders
useMovHintRemoval
usePutStackSinking
useObjectAllocationSinking
useArityFixupInlining
logExecutableAllocation
useConcurrentJIT
allows the DFG / FTL compilation in threads other than the executing JS thread
numberOfDFGCompilerThreads
numberOfFTLCompilerThreads
priorityDeltaOfDFGCompilerThreads
priorityDeltaOfFTLCompilerThreads
priorityDeltaOfWasmCompilerThreads
useProfiler
disassembleBaselineForProfiler
useArchitectureSpecificOptimizations
breakOnThrow
maximumOptimizationCandidateInstructionCount
maximumFunctionForCallInlineCandidateInstructionCount
maximumFunctionForClosureCallInlineCandidateInstructionCount
maximumFunctionForConstructInlineCandidateInstructionCount
maximumFTLCandidateInstructionCount
maximumInliningDepth
maximum allowed inlining depth.  Depth of 1 means no inlining
maximumInliningRecursion
maximumInliningCallerSize
maximumVarargsForInlining
useMaximalFlushInsertionPhase
Setting to true allows the DFG's MaximalFlushInsertionPhase to run.
maximumBinaryStringSwitchCaseLength
maximumBinaryStringSwitchTotalLength
jitPolicyScale
scale JIT thresholds to this specified ratio between 0.0 (compile ASAP) and 1.0 (compile like normal).
forceEagerCompilation
thresholdForJITAfterWarmUp
thresholdForJITSoon
thresholdForOptimizeAfterWarmUp
thresholdForOptimizeAfterLongWarmUp
thresholdForOptimizeSoon
executionCounterIncrementForLoop
executionCounterIncrementForEntry
thresholdForFTLOptimizeAfterWarmUp
thresholdForFTLOptimizeSoon
ftlTierUpCounterIncrementForLoop
ftlTierUpCounterIncrementForReturn
ftlOSREntryFailureCountForReoptimization
ftlOSREntryRetryThreshold
evalThresholdMultiplier
maximumEvalCacheableSourceLength
randomizeExecutionCountsBetweenCheckpoints
maximumExecutionCountsBetweenCheckpointsForBaseline
maximumExecutionCountsBetweenCheckpointsForUpperTiers
likelyToTakeSlowCaseMinimumCount
couldTakeSlowCaseMinimumCount
osrExitCountForReoptimization
osrExitCountForReoptimizationFromLoop
reoptimizationRetryCounterMax
minimumOptimizationDelay
maximumOptimizationDelay
desiredProfileLivenessRate
desiredProfileFullnessRate
doubleVoteRatioForDoubleFormat
structureCheckVoteRatioForHoisting
checkArrayVoteRatioForHoisting
maximumDirectCallStackSize
minimumNumberOfScansBetweenRebalance
numberOfGCMarkers
useParallelMarkingConstraintSolver
opaqueRootMergeThreshold
minHeapUtilization
minMarkedBlockUtilization
slowPathAllocsBetweenGCs
force a GC on every Nth slow path alloc, where N is specified by this option
percentCPUPerMBForFullTimer
percentCPUPerMBForEdenTimer
collectionTimerMaxPercentCPU
forceWeakRandomSeed
forcedWeakRandomSeed
useZombieMode
debugging option to scribble over dead objects with 0xbadbeef0
useImmortalObjects
debugging option to keep all objects alive forever
sweepSynchronously
debugging option to sweep all dead objects synchronously at GC end before resuming mutator
maxSingleAllocationSize
debugging option to limit individual allocations to a max size (0 = limit not set, N = limit size in bytes)
logGC
debugging option to log GC activity (0 = None, 1 = Basic, 2 = Verbose)
useGC
gcAtEnd
If true, the jsc CLI will do a GC before exiting
forceGCSlowPaths
If true, we will force all JIT fast allocations down their slow paths.
gcMaxHeapSize
forceRAMSize
recordGCPauseTimes
logHeapStatisticsAtExit
forceCodeBlockToJettisonDueToOldAge
If true, this means that anytime we can jettison a CodeBlock due to old age, we do.
useEagerCodeBlockJettisonTiming
If true, the time slices for jettisoning a CodeBlock due to old age are shrunk significantly.
useTypeProfiler
useControlFlowProfiler
useSamplingProfiler
sampleInterval
Time between stack traces in microseconds.
collectSamplingProfilerDataForJSCShell
This corresponds to the JSC shell's --sample option.
samplingProfilerTopFunctionsCount
Number of top functions to report when using the command line interface.
samplingProfilerTopBytecodesCount
Number of top bytecodes to report when using the command line interface.
samplingProfilerPath
The path to the directory to write sampiling profiler output to. This probably will not work with WK2 unless the path is in the whitelist.
sampleCCode
Causes the sampling profiler to record profiling data for C frames.
alwaysGeneratePCToCodeOriginMap
This will make sure we always generate a PCToCodeOriginMap for JITed code.
verifyHeap
numberOfGCCyclesToRecordForVerification
exceptionStackTraceLimit
Stack trace limit for internal Exception object
defaultErrorStackTraceLimit
The default value for Error.stackTraceLimit
useExceptionFuzz
fireExceptionFuzzAt
validateDFGExceptionHandling
Causes the DFG to emit code validating exception handling for each node that can exit
dumpSimulatedThrows
Dumps the call stack of the last simulated throw if exception scope verification fails
validateExceptionChecks
Verifies that needed exception checks are performed.
unexpectedExceptionStackTraceLimit
Stack trace limit for debugging unexpected exceptions observed in the VM
useExecutableAllocationFuzz
fireExecutableAllocationFuzzAt
fireExecutableAllocationFuzzAtOrAfter
verboseExecutableAllocationFuzz
useOSRExitFuzz
fireOSRExitFuzzAtStatic
fireOSRExitFuzzAt
fireOSRExitFuzzAtOrAfter
logPhaseTimes
rareBlockPenalty
airLinearScanVerbose
airLinearScanSpillsEverything
airForceBriggsAllocator
airForceIRCAllocator
airRandomizeRegs
coalesceSpillSlots
logAirRegisterPressure
useB3TailDup
maxB3TailDupBlockSize
maxB3TailDupBlockSuccessors
useDollarVM
installs the $vm debugging tool in global objects
functionOverrides
file with debugging overrides for function bodies
useSigillCrashAnalyzer
logs data about SIGILL crashes
watchdog
watchdog timeout (0 = Disabled, N = a timeout period of N milliseconds)
usePollingTraps
use polling (instead of signalling) VM traps
useMachForExceptions
Use mach exceptions rather than signals to handle faults and pass thread messages. (This does nothing on platforms without mach)
useICStats
prototypeHitCountForLLIntCaching
Number of prototype property hits before caching a prototype in the LLInt. A count of 0 means never cache.
dumpCompiledRegExpPatterns
dumpModuleRecord
dumpModuleLoadingState
exposeInternalModuleLoader
expose the internal module loader object to the global space for debugging
useSuperSampler
useSourceProviderCache
If false, the parser will not use the source provider cache. It's good to verify everything works when this is false. Because the cache is so successful, it can mask bugs.
useCodeCache
If false, the unlinked byte code cache will not be used.
useWebAssembly
Expose the WebAssembly global object.
enableSpectreMitigations
Enable Spectre mitigations.
enableSpectreGadgets
enable gadgets to test Spectre mitigations.
usePoisoning
Poison is randomized at load time when true, and initialized to 0 if false which defeats some Spectre and type confusion mitigations, but allows tools such as leak detectors to function better.
zeroStackFrame
Zero stack frame on entry to a function.
failToCompileWebAssemblyCode
If true, no Wasm::Plan will sucessfully compile a function.
webAssemblyPartialCompileLimit
Limit on the number of bytes a Wasm::Plan::compile should attempt before checking for other work.
webAssemblyBBQOptimizationLevel
B3 Optimization level for BBQ Web Assembly module compilations.
webAssemblyOMGOptimizationLevel
B3 Optimization level for OMG Web Assembly module compilations.
useBBQTierUpChecks
Enables tier up checks for our BBQ code.
webAssemblyOMGTierUpCount
The countdown before we tier up a function to OMG.
webAssemblyLoopDecrement
The amount the tier up countdown is decremented on each loop backedge.
webAssemblyFunctionEntryDecrement
The amount the tier up countdown is decremented on each function entry.
useWebAssemblyFastMemory
If true, we will try to use a 32-bit address space with a signal handler to bounds check wasm memory.
logWebAssemblyMemory
webAssemblyFastMemoryRedzonePages
WebAssembly fast memories use 4GiB virtual allocations, plus a redzone (counted as multiple of 64KiB WebAssembly pages) at the end to catch reg+imm accesses which exceed 32-bit, anything beyond the redzone is explicitly bounds-checked
crashIfWebAssemblyCantFastMemory
If true, we will crash if we can't obtain fast memory for wasm.
maxNumWebAssemblyFastMemories
useFastTLSForWasmContext
If true, we will store context in fast TLS. If false, we will pin it to a register.
useWebAssemblyStreamingApi
Allow to run WebAssembly's Streaming API
useCallICsForWebAssemblyToJSCalls
If true, we will use CallLinkInfo to inline cache Wasm to JS calls.
useEagerWebAssemblyModuleHashing
Unnamed WebAssembly modules are identified in backtraces through their hash, if available.
useBigInt
If true, we will enable BigInt support.
useIntlNumberFormatToParts
If true, we will enable Intl.NumberFormat.prototype.formatToParts
useIntlPluralRules
If true, we will enable Intl.PluralRules.
useArrayAllocationProfiling
If true, we will use our normal array allocation profiling. If false, the allocation profile will always claim to be undecided.
forcePolyProto
If true, create_this will always create an object with a poly proto structure.
forceMiniVMMode
If true, it will force mini VM mode on.
useTracePoints
traceLLIntExecution
traceLLIntSlowPath
traceBaselineJITExecution
thresholdForGlobalLexicalBindingEpoch
Threshold for global lexical binding epoch. If the epoch reaches to this value, CodeBlock metadata for scope operations will be revised globally. It needs to be greater than 1.
Overridden JSC options:
All JSC options:
All JSC options with descriptions:
'=' not found in option string: %p
Missing trailing '"' in option string: %p
Failed to set option : %s
enableFunctionDotArguments
enableTailCalls
showDisassembly
showDFGDisassembly
showFTLDisassembly
showAllDFGNodes
alwaysDoFullCollection
enableOSREntryToDFG
enableOSREntryToFTL
enableAccessInlining
enablePolyvariantDevirtualization
enablePolymorphicAccessInlining
enablePolymorphicCallInlining
enableMovHintRemoval
enableObjectAllocationSinking
enableConcurrentJIT
enableProfiler
enableArchitectureSpecificOptimizations
enablePolyvariantCallInlining
usePolyvariantCallInlining
enablePolyvariantByIdInlining
usePolyvariantByIdInlining
enableMaximalFlushInsertionPhase
objectsAreImmortal
showObjectStatistics
dumpObjectStatistics
disableGC
enableExceptionFuzz
enableExecutableAllocationFuzz
enableOSRExitFuzz
enableDollarVM
enableWebAssembly
verboseDFGByteCodeParsing
 (default: 
   ... 
INCOHERENT OPTIONS: at least one of useLLInt or useJIT must be true
ProgramExecutable
./runtime/ProgramExecutable.cpp
JSC::JSObject *JSC::ProgramExecutable::initializeGlobalProperties(JSC::VM &, JSC::CallFrame *, JSC::JSScope *)
Proxy is not allowed in the global prototype chain.
Can't create duplicate variable: '
Can't create duplicate variable that shadows a global property: '
toFixed() argument must be between 0 and 20
toExponential() argument must be between 0 and 20
toPrecision() argument must be between 1 and 21
setPrototypeOf
getOwnPropertyDescriptors
getOwnPropertySymbols
defineProperties
seal
freeze
preventExtensions
isSealed
isFrozen
isExtensible
./runtime/ObjectConstructor.cpp
JSC::JSValue JSC::defineProperties(JSC::ExecState *, JSC::JSObject *, JSC::JSObject *)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/JavaScriptCore-7607.1.39/runtime/JSArray.h
static JSC::JSArray *JSC::JSArray::create(JSC::VM &, JSC::Structure *, unsigned int)
invalid getter usage
invalid setter usage
JSC_
ERROR: invalid option: 
JSC_enableFunctionDotArguments
JSC_enableTailCalls
JSC_showDisassembly
JSC_showDFGDisassembly
JSC_showFTLDisassembly
JSC_showAllDFGNodes
JSC_alwaysDoFullCollection
JSC_enableOSREntryToDFG
JSC_enableOSREntryToFTL
JSC_enableAccessInlining
JSC_enablePolyvariantDevirtualization
JSC_enablePolymorphicAccessInlining
JSC_enablePolymorphicCallInlining
JSC_enableMovHintRemoval
JSC_enableObjectAllocationSinking
JSC_enableConcurrentJIT
JSC_enableProfiler
JSC_enableArchitectureSpecificOptimizations
JSC_enablePolyvariantCallInlining
JSC_enablePolyvariantByIdInlining
JSC_enableMaximalFlushInsertionPhase
JSC_objectsAreImmortal
JSC_showObjectStatistics
JSC_disableGC
JSC_enableTypeProfiler
JSC_enableControlFlowProfiler
JSC_enableExceptionFuzz
JSC_enableExecutableAllocationFuzz
JSC_enableOSRExitFuzz
JSC_enableDollarVM
JSC_enableWebAssembly
JSC_verboseDFGByteCodeParsing
PropertyTable
revocable
A Proxy's 'target' should be an Object
If a Proxy's handler is another Proxy object, the other Proxy should not have been revoked
A Proxy's 'handler' should be an Object
./runtime/ProxyObject.cpp
void JSC::ProxyObject::finishCreation(JSC::VM &, JSC::ExecState *, JSC::JSValue, JSC::JSValue)
'getOwnPropertyDescriptor' property of a Proxy's handler should be callable
result of 'getOwnPropertyDescriptor' call should either be an Object or undefined
When the result of 'getOwnPropertyDescriptor' is undefined the target must be configurable
When 'getOwnPropertyDescriptor' returns undefined, the 'target' of a Proxy should be extensible
Result from 'getOwnPropertyDescriptor' fails the IsCompatiblePropertyDescriptor test
Result from 'getOwnPropertyDescriptor' can't be non-configurable when the 'target' doesn't have it as an own property or if it is a configurable own property on 'target'
'has' property of a Proxy's handler should be callable
Proxy 'has' must return 'true' for non-configurable properties
Proxy 'has' must return 'true' for a non-extensible 'target' object with a configurable property
'preventExtensions' property of a Proxy's handler should be callable
Proxy's 'preventExtensions' trap returned true even though its target is extensible. It should have returned false
'isExtensible' property of a Proxy's handler should be callable
Proxy object's 'isExtensible' trap returned false when the target is extensible. It should have returned true
Proxy object's 'isExtensible' trap returned true when the target is non-extensible. It should have returned false
'defineProperty' property of a Proxy's handler should be callable
Proxy's 'defineProperty' trap returned true even though getOwnPropertyDescriptor of the Proxy's target returned undefined and the target is non-extensible
Proxy's 'defineProperty' trap returned true for a non-configurable field even though getOwnPropertyDescriptor of the Proxy's target returned undefined
Proxy's 'defineProperty' trap did not define a property on its target that is compatible with the trap's input descriptor
Proxy's 'defineProperty' trap did not define a non-configurable property on its target even though the input descriptor to the trap said it must do so
'ownKeys' property of a Proxy's handler should be callable
Proxy handler's 'ownKeys' method must return an array-like object containing only Strings and Symbols
Proxy object's 'target' has the non-configurable property '
' that was not in the result from the 'ownKeys' trap
Proxy object's non-extensible 'target' has configurable property '
Proxy handler's 'ownKeys' method returned a key that was not present in its non-extensible target
static void JSC::ProxyObject::getOwnNonIndexPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static void JSC::ProxyObject::getStructurePropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
static void JSC::ProxyObject::getGenericPropertyNames(JSC::JSObject *, JSC::ExecState *, JSC::PropertyNameArray &, JSC::EnumerationMode)
'setPrototypeOf' property of a Proxy's handler should be callable
Proxy 'setPrototypeOf' returned false indicating it could not set the prototype value. The operation was expected to succeed
Proxy 'setPrototypeOf' trap returned true when its target is non-extensible and the new prototype value is not the same as the current prototype value. It should have returned false
'getPrototypeOf' property of a Proxy's handler should be callable
Proxy handler's 'getPrototypeOf' trap should either return an object or null
Proxy's 'getPrototypeOf' trap for a non-extensible target should return the same value as the target's prototype
void JSC::ProxyObject::revoke(JSC::VM &)
ProxyRevoke
revoke
Can't JIT this regular expression: "
Proxy.revocable needs to be called with two arguments: the target and the handler
Proxy.revocable cannot be constructed. It can only be called
new.target of Proxy construct should not be undefined
'get' property of a Proxy's handler object should be callable
Proxy handler's 'get' result of a non-configurable and non-writable property should be the same value as the target's property
Proxy handler's 'get' result of a non-configurable accessor property without a getter should be undefined
Proxy has already been revoked. No more operations are allowed to be performed on it
'apply' property of a Proxy's handler should be callable
JSC::EncodedJSValue JSC::performProxyCall(JSC::ExecState *)
construct
'construct' property of a Proxy's handler should be constructible
JSC::EncodedJSValue JSC::performProxyConstruct(JSC::ExecState *)
Result from Proxy handler's 'construct' method should be an object
Reflect.construct requires the first argument be a constructor
Reflect.construct requires the third argument be a constructor if present
Reflect.construct requires the second argument be an object
This error must not be raised
./runtime/JSObjectInlines.h
void JSC::createListFromArrayLike(JSC::ExecState *, JSC::JSValue, JSC::RuntimeTypeMask, const WTF::String &, AddFunction) [AddFunction = (lambda at ./runtime/ReflectObject.cpp:119:112)]
Reflect.defineProperty requires the first argument be an object
Reflect.get requires the first argument be an object
Reflect.getPrototypeOf requires the first argument be an object
Reflect.isExtensible requires the first argument be an object
Reflect.preventExtensions requires the first argument be an object
Reflect.set requires the first argument be an object
Reflect.setPrototypeOf requires the first argument be an object
Reflect.setPrototypeOf requires the second argument be either an object or null
Reflect.getOwnPropertyDescriptor requires the first argument be an object
Reflect.ownKeys requires the first argument be an object
'set' property of a Proxy's handler should be callable
Proxy handler's 'set' on a non-configurable and non-writable property on 'target' should either return false or be the same value already on the 'target'
Proxy handler's 'set' method on a non-configurable accessor property without a setter should return false
'deleteProperty' property of a Proxy's handler should be callable
Proxy handler's 'deleteProperty' method should return false when the target's property is not configurable
void JSC::createListFromArrayLike(JSC::ExecState *, JSC::JSValue, JSC::RuntimeTypeMask, const WTF::String &, AddFunction) [AddFunction = (lambda at ./runtime/ProxyObject.cpp:943:24)]
./runtime/RegExpMatchesArray.cpp
JSC::JSArray *JSC::createEmptyRegExpMatchesArray(JSC::JSGlobalObject *, JSC::JSString *, JSC::RegExp *)
./runtime/RegExpMatchesArray.h
JSC::JSArray *JSC::createRegExpMatchesArray(JSC::VM &, JSC::JSGlobalObject *, JSC::JSString *, const WTF::String &, JSC::RegExp *, unsigned int, JSC::MatchResult &)
void JSC::JSRopeString::finishCreationSubstringOfResolved(JSC::VM &, JSC::JSString *, unsigned int, unsigned int)
void JSC::JSRopeString::finishCreation(JSC::VM &, JSC::ExecState *, JSC::JSString *, unsigned int, unsigned int)
lastMatch
lastParen
leftContext
rightContext
Invalid flags supplied to RegExp constructor.
void JSC::JSObject::initializeIndexWithoutBarrier(JSC::ObjectInitializationScope &, unsigned int, JSC::JSValue, JSC::IndexingType)
Builtin RegExp exec can only be called on a RegExp object
Cannot supply flags when constructing one RegExp from another.
The RegExp.prototype.global getter can only be called on a RegExp object
The RegExp.prototype.ignoreCase getter can only be called on a RegExp object
The RegExp.prototype.multiline getter can only be called on a RegExp object
The RegExp.prototype.dotAll getter can only be called on a RegExp object
The RegExp.prototype.sticky getter can only be called on a RegExp object
The RegExp.prototype.unicode getter can only be called on a RegExp object
The RegExp.prototype.flags getter can only be called on an object
(?:)
The RegExp.prototype.source getter can only be called on a RegExp object
u2028
u2029
scopeInvalid
scope
./runtime/ScopedArguments.cpp
void JSC::ScopedArguments::overrideThings(JSC::VM &)
ScopedArgumentsTable
ScriptExecutable
installCode
./runtime/ScriptExecutable.cpp
void JSC::ScriptExecutable::installCode(JSC::VM &, JSC::CodeBlock *, JSC::CodeType, JSC::CodeSpecializationKind)
Installing 
JSC::CodeBlock *JSC::ScriptExecutable::newCodeBlockFor(JSC::CodeSpecializationKind, JSC::JSFunction *, JSC::JSScope *, JSC::JSObject *&)
Forced Failure
Set operation called on non-Set object
void JSC::GenericArguments<JSC::ScopedArguments>::initModifiedArgumentsDescriptor(JSC::VM &, unsigned int) [Type = JSC::ScopedArguments]
JSArrayBuffer is opaque root
[object Null]
[object Undefined]
SparseArrayValueMap
fromCodePoint
Arguments contain a value that is out of range of code points
charAt
codePointAt
substr
substring
toLowerCase
toUpperCase
toLocaleLowerCase
toLocaleUpperCase
trim
startsWith
endsWith
normalize
trimStart
trimEnd
trimLeft
trimRight
./runtime/StringPrototype.cpp
JSC::EncodedJSValue JSC::stringProtoFuncRepeatCharacter(JSC::ExecState *)
JSC::EncodedJSValue JSC::stringProtoFuncIndexOf(JSC::ExecState *)
JSC::EncodedJSValue JSC::stringProtoFuncSlice(JSC::ExecState *)
JSC::EncodedJSValue JSC::stringProtoFuncSubstring(JSC::ExecState *)
Argument to String.prototype.startsWith cannot be a RegExp
Argument to String.prototype.endsWith cannot be a RegExp
Argument to String.prototype.includes cannot be a RegExp
NFKC
NFKD
argument does not match any normalization form
Structure
./runtime/Structure.cpp
static JSC::Structure *JSC::Structure::nonPropertyTransitionSlow(JSC::VM &, JSC::Structure *, JSC::NonPropertyTransition)
void JSC::Structure::didCachePropertyReplacement(JSC::VM &, JSC::PropertyOffset)
Did cache property replacement
Structure transition from 
, PolyProto offset:
, Proto:
, Has been dictionary
, Dictionary
, UncacheableDictionary
, Leaf
, Shady leaf
StructureChain
StructureRareData
./runtime/StructureRareData.cpp
JSC::ObjectToStringAdaptiveStructureWatchpoint::ObjectToStringAdaptiveStructureWatchpoint(const JSC::ObjectPropertyCondition &, JSC::StructureRareData *)
void JSC::ObjectToStringAdaptiveStructureWatchpoint::install(JSC::VM &)
Cannot convert a symbol to a number
Symbol(
UChar32 JSC::codePointAt(const WTF::String &, unsigned int, unsigned int)
./runtime/StructureCache.cpp
JSC::Structure *JSC::StructureCache::createEmptyStructure(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::TypeInfo &, const JSC::ClassInfo *, JSC::IndexingType, unsigned int, bool, JSC::FunctionExecutable *)
auto JSC::Structure::create(JSC::Structure::PolyProtoTag, JSC::VM &, JSC::JSGlobalObject *, JSC::JSObject *, const JSC::TypeInfo &, const JSC::ClassInfo *, JSC::IndexingType, unsigned int)::(anonymous class)::operator()(const JSC::GCSafeConcurrentJSLocker &, JSC::PropertyOffset, JSC::PropertyOffset) const
Detected in materializePropertyTable.
Found structure = 
structures = 
hasInstance
isConcatSpreadable
asyncIterator
species
toPrimitive
toStringTag
unscopables
SymbolTable
./runtime/SymbolTable.cpp
JSC::GlobalVariableID JSC::SymbolTable::uniqueIDForVariable(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, JSC::VM &)
RefPtr<JSC::TypeSet> JSC::SymbolTable::globalTypeSetForVariable(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, JSC::VM &)
keyFor
Symbol.keyFor requires that the first argument be a symbol
Symbol.prototype.description requires that |this| be a symbol or a symbol object
Symbol.prototype.toString requires that |this| be a symbol or a symbol object
Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object
[Start, End]::[%u, %u]
[Entry IS in System]
[Entry IS NOT in system]
[Return Statement]
[Normal Statement]
#Local#
#Global#
"globalTypeSet":
"instructionTypeSet":
"isOverflown":
(Unreached Statement)
Function 
Undefined 
Null 
Boolean 
AnyInt 
Number 
String 
Object 
Symbol 
Structures:[ 
Least Common Ancestor: 
Function?
Boolean?
Integer?
Number?
String?
Symbol?
Object?
(many)
"displayTypeName":
"primitiveTypeNames":
"Undefined"
"Null"
"Boolean"
"Integer"
"Number"
"String"
"Symbol"
"structures":
__proto__ [
"constructorName":
"isInDictionaryMode":
"fields":
"optionalFields":
"proto":
./runtime/TypeSet.cpp
static Ref<JSC::StructureShape> JSC::StructureShape::merge(Ref<JSC::StructureShape> &&, Ref<JSC::StructureShape> &&)
Primitive Gigacage Auxiliary
JSValue Gigacage Auxiliary
ImmutableButterfly Gigacage JSCellWithInteriorPointers
JSCell JSValueOOB
JSCell DangerousBits
JSValue Gigacage JSCell
Destructible JSCell
JSString
JSDestructibleObject
Eagerly Swept JSDestructibleObject
JSSegmentedVariableObjectSpace
Isolated JSArrayBufferConstructor Space
Isolated JSAsyncFunction Space
Isolated JSAsyncGeneratorFunction Space
Isolated JSBoundFunction Space
Isolated JSCallbackFunction Space
Isolated JSCustomGetterSetterFunction Space
Isolated ErrorConstructor Space
Isolated ExecutableToCodeBlockEdge Space
Isolated JSFunction Space
Isolated JSGeneratorFunction Space
Isolated InferredValue Space
Isolated InternalFunction Space
Isolated IntlCollatorConstructor Space
Isolated IntlDateTimeFormatConstructor Space
Isolated IntlNumberFormatConstructor Space
Isolated IntlPluralRulesConstructor Space
Isolated NativeErrorConstructor Space
Isolated NativeExecutable Space
Isolated JSNativeStdFunction Space
Isolated ObjCCallbackFunction Space
Isolated PropertyTable Space
Isolated ProxyRevoke Space
Isolated RegExpConstructor Space
Isolated StrictModeTypeErrorFunction Space
Isolated StructureRareData Space
Isolated Structure Space
Isolated JSWeakSet Space
Isolated JSWeakMap Space
Isolated ErrorInstance Space
Isolated EvalCodeBlock Space
Isolated FunctionCodeBlock Space
Isolated ModuleProgramCodeBlock Space
Isolated ProgramCodeBlock Space
Isolated DirectEvalExecutable Space
Isolated FunctionExecutable Space
Isolated IndirectEvalExecutable Space
Isolated ModuleProgramExecutable Space
Isolated ProgramExecutable Space
Isolated UnlinkedFunctionExecutable Space
JSC_PROFILER_PATH
JSCProfile-
.json
Throwing exception in call frame 
Sanitizing stack for VM = 
 with top call frame at 
, current stack pointer at 
, in 
, last code origin = 
, last stack top = 
, in stack range [
Impure property added
VM Dump Types
./runtime/VM.cpp
fields
optionalFields
constructorName
isImprecise
prototypeStructure
void JSC::VM::updateStackLimits()
isFunction
isSymbol
bool JSC::disableProfilerWithRespectToCount(unsigned int &, const Func &) [Func = (lambda at ./runtime/VM.cpp:1083:32)]
bool JSC::disableProfilerWithRespectToCount(unsigned int &, const Func &) [Func = (lambda at ./runtime/VM.cpp:1102:39)]
 on pid 
 received NeedDebuggerBreak trap
./runtime/VMTraps.cpp
void JSC::VMTraps::handleTraps(JSC::ExecState *, VMTraps::Mask)
invalid
./runtime/VarOffset.cpp
void JSC::VarOffset::dump(WTF::PrintStream &) const
Invalid
Stack
DirectArgument
void WTF::printInternal(WTF::PrintStream &, JSC::VarKind)
jsc.watchdog.queue
./runtime/WeakMapImpl.h
bool JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue> >::remove(JSC::JSObject *) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>]
bool JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey> >::remove(JSC::JSObject *) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>]
Called WeakMap function on non-object
Called WeakMap function on a non-WeakMap object
Attempted to set a non-object key in a WeakMap
Called WeakSet function on non-object
Called WeakSet function on a non-WeakSet object
Attempted to add a non-object key to a WeakSet
[[EngineCode]]
[[GlobalThunk]]
[[RegExpCode]]
[[DFGJIT]]
[[BaselineOnly]]
[[BaselineProfile]]
[[BaselineOSR]]
[[EngineFrame]]
./tools/CodeProfile.cpp
void JSC::CodeProfile::sample(void *, void **)
<CodeProfiling %s:%d>
<unknown>
Total samples: %lld
</CodeProfiling %s:%d>
functionOverrides 
IO ERROR
Failed to open file 
. Did you add the file-read-data entitlement to WebProcess.sb?
override
Failed to close file %s: %s
./tools/HeapVerifier.cpp
JSC::HeapVerifier::HeapVerifier(JSC::Heap *, unsigned int)
BeforeGC
BeforeMarking
AfterMarking
AfterGC
static const char *JSC::HeapVerifier::phaseName(HeapVerifier::Phase)
END 
JSC::CellList *JSC::HeapVerifier::cellListForGathering(HeapVerifier::Phase)
void JSC::HeapVerifier::printVerificationHeader()
Verifying heap in [p
] vm 
 on 
 GC @ 
    cell 
 is ZAPPED
 is zapped
 is from a different VM: expected:
 actual:
 with structureID 
 maps to a NULL Structure pointer
 has ZAPPED structure 
 has structure 
 whose structureID is NULL
 from a different VM: expected:
 NOT found in the live cell list
 has DEAD structure 
 with a NULL structureID
 whose structure 
 is NOT found in the live cell list
 is DEAD
void JSC::HeapVerifier::verify(HeapVerifier::Phase)
FOUND
 LIVE
 DEAD
 HeapCell 
 JSCell 
 structure:
 butterfly:
 (base:
 GC[
] in '
' list in VM 
 recorded at time 
Checking 
 GC<
>, cycle [
Cycle [
' list: 
cell NOT found
cell 
 NOT FOUND
ERROR: Timed out while waiting to iterate VMs.
DollarVM
abort
crash
breakpoint
dfgTrue
ftlTrue
cpuMfence
cpuRdtsc
cpuCpuid
cpuPause
cpuClflush
llintTrue
jitTrue
noInline
edenGC
callFrame
codeBlockFor
codeBlockForFrame
dumpSourceFor
dumpBytecodeFor
dataLog
print
dumpCallFrame
dumpStack
dumpRegisters
dumpCell
indexingMode
inlineCapacity
getpid
haveABadTime
isHavingABadTime
createGlobalObject
createProxy
createRuntimeArray
createImpureGetter
createCustomGetterObject
createDOMJITNodeObject
createDOMJITGetterObject
createDOMJITGetterComplexObject
createDOMJITFunctionObject
createDOMJITCheckSubClassObject
createDOMJITGetterBaseJSObject
createBuiltin
getPrivateProperty
setImpureGetterDelegate
Root
Element
getElement
SimpleObject
getHiddenValue
setHiddenValue
shadowChickenFunctionsOnStack
setGlobalConstRedeclarationShouldNotThrow
findTypeForExpression
returnTypeFor
flattenDictionaryObject
dumpBasicBlockExecutionRanges
hasBasicBlockExecuted
basicBlockExecutionCount
enableDebuggerModeWhenIdle
disableDebuggerModeWhenIdle
globalObjectCount
globalObjectForObject
getGetterSetter
loadGetterFromGetterSetter
createCustomTestGetterSetter
deltaBetweenButterflies
totalGCTime
JSC::BytecodeGenerator::generate()
JSC::Parser<JSC::Lexer<unsigned char>>::parseInner()
WTF::fastMalloc(unsigned long)
WTF::calculateUTCOffset()
JSC::DFG::ByteCodeParser::parseCodeBlock()
% 8lld: %s (%lld stack top)
<overridden>
SYNTAX ERROR
Expecting '
' clause:
Cannot have any characters before '
' must be followed by a ' ':
Missing { after '
' clause start delimiter:
Delimiter '
' cannot have '{', '}', or whitespace:
Unexpected characters after '
' clause end delimiter '
' not found:
Are you missing a '}' before the delimiter?
CallFrame
valid
codeBlock
unlinkedCodeBlock
executable
Invalid codeBlock: 
RuntimeArray
./tools/JSDollarVM.cpp
static bool (anonymous namespace)::RuntimeArray::put(JSC::JSCell *, JSC::ExecState *, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot &)
static bool (anonymous namespace)::RuntimeArray::deleteProperty(JSC::JSCell *, JSC::ExecState *, JSC::PropertyName)
ImpureGetter
CustomGetter
customGetter
customGetterAccessor
shouldThrow
DOMJITNode
DOMJITGetter
DOMJITGetterComplex
enableException
DOMJITGetterComplex slow call exception
DOMJITFunctionObject
func
DOMJITCheckSubClassObject
DOMJITGetterBaseJSObject
static JSC::EncodedJSValue (anonymous namespace)::DOMJITGetterBaseJSObject::customGetter(JSC::ExecState *, JSC::EncodedJSValue, JSC::PropertyName)
Unknown private name.
argument is not an ImpureGetter
Cannot create Element without a Root.
JSC::Element is opaque root
Invalid use of getHiddenValue test function
Invalid use of setHiddenValue test function
JSC::EncodedJSValue JSC::functionFindTypeForExpression(JSC::ExecState *)
jsc Testing API: functionFindTypeForExpression
JSC::EncodedJSValue JSC::functionReturnTypeFor(JSC::ExecState *)
jsc Testing API: functionReturnTypeFor
JSC::EncodedJSValue JSC::functionFlattenDictionaryObject(JSC::ExecState *)
JSC::EncodedJSValue JSC::functionDumpBasicBlockExecutionRanges(JSC::ExecState *)
JSC::EncodedJSValue JSC::functionHasBasicBlockExecuted(JSC::ExecState *)
JSC::EncodedJSValue JSC::functionBasicBlockExecutionCount(JSC::ExecState *)
JSC::EncodedJSValue JSC::functionGlobalObjectForObject(JSC::ExecState *)
Invalid use of loadGetterFromGetterSetter test function: argument is not a GetterSetter
JSC::EncodedJSValue JSC::functionLoadGetterFromGetterSetter(JSC::ExecState *)
customValue
customAccessor
JSC::EncodedJSValue (anonymous namespace)::customGetValue(JSC::ExecState *, JSC::EncodedJSValue, JSC::PropertyName)
JSTestCustomGetterSetter
bool (anonymous namespace)::customSetValue(JSC::ExecState *, JSC::EncodedJSValue, JSC::EncodedJSValue)
bool (anonymous namespace)::customSetAccessor(JSC::ExecState *, JSC::EncodedJSValue, JSC::EncodedJSValue)
./tools/TieredMMapArray.h
void JSC::TieredMMapArray<JSC::CodeProfile::CodeRecord>::append(const T &) [T = JSC::CodeProfile::CodeRecord]
Before Marking
After Marking
 @ phase 
: FAILED in cell list '
' (size 
CodeBlock 
 has ZAPPED ValueProfile cell 
Search for cell 
 in VM 
Dumping host frame registers not supported.
Register frame: 
-----------------------------------------------------------------------------
            use            |   address  |                value               
[r% 3d %14s]      | %10p | 0x%-16llx %s
[ArgumentCount]            | %10p | %lu 
[Callee]                   | %10p | 0x%-16llx %s
[CodeBlock]                | %10p | 0x%-16llx 
[CallerFrame]              | %10p | %p 
CalleeSaveReg
[r% 3d]                     | %10p | 0x%-16llx %s
<%p, %s>
structureID 
%d 0x%x
 structure 
indexingTypeAndMisc 
%d 0x%hhx
type 
flags 
cellState 
butterfly
base 
hasIndexingHeader 
 hasAnyArrayStorage 
publicLength 
 vectorLength 
 indexBias 
preCapacity 
 propertyCapacity 
preCapacity
propertyCapacity
indexingHeader
./tools/VMInspector.cpp
static void JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *, WTF::PrintStream &)
arrayStorage
indexedProperties
unallocated capacity
ERROR: current thread does not own the JSLock
%p : 0x%016llx
<--- 
[ReturnVPC]                | %10p | %d (line %d)
wasm-stub
.wasm-function[
Invalid regular expression: regular expression too large
Invalid regular expression: numbers out of order in {} quantifier
Invalid regular expression: nothing to repeat
Invalid regular expression: number too large in {} quantifier
Invalid regular expression: missing )
Invalid regular expression: unmatched parentheses
Invalid regular expression: unrecognized character after (?
Invalid regular expression: invalid group specifier name
Invalid regular expression: duplicate group specifier name
Invalid regular expression: missing terminating ] for character class
Invalid regular expression: range out of order in character class
Invalid regular expression: \ at end of pattern
Invalid regular expression: invalid unicode {} escape
Invalid regular expression: invalid backreference for unicode pattern
Invalid regular expression: invalid escaped character for unicode pattern
Invalid regular expression: invalid property expression
Invalid regular expression: too many nested disjunctions
Invalid regular expression: pattern exceeds string length limits
Invalid regular expression: invalid flags
'%c'
0x%04x
<any character>
<newline>
<digits>
<whitespace>
<word>
<unicode word ignore case>
<non-digits>
<non-whitespace>
<non-word>
<unicode non-word ignore case>
ASCII
Unicode
minimum size: 
,fixed size
,once through
,starts with ^
,contains ^
,...
 greedy
 non-greedy
not 
word boundary
character 
inputPosition %u 
,frame location 
character class 
back reference to subpattern #
forward reference
captured 
non-captured 
inverted 
subpattern
assertion
,copy
,terminal
alternative list,frame location 
.* enclosure,frame location 
alternative #
RegExp pattern for 
ignore case
    callframe size: 
 ranges:(
./yarr/YarrInterpreter.cpp
unsigned int JSC::Yarr::Interpreter<unsigned char>::interpret() [CharType = unsigned char]
JSC::Yarr::Interpreter::DisjunctionContext *JSC::Yarr::Interpreter<unsigned char>::allocDisjunctionContext(JSC::Yarr::ByteDisjunction *) [CharType = unsigned char]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(JSC::Yarr::ByteDisjunction *, JSC::Yarr::Interpreter::DisjunctionContext *, bool) [CharType = unsigned char]
int JSC::Yarr::Interpreter<unsigned char>::InputStream::readChecked(unsigned int) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::InputStream::atEnd(unsigned int) [CharType = unsigned char]
int JSC::Yarr::Interpreter<unsigned char>::InputStream::readSurrogatePairChecked(unsigned int) [CharType = unsigned char]
void JSC::Yarr::Interpreter<unsigned char>::InputStream::uncheckInput(unsigned int) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::matchCharacterClass(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::matchBackReference(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
./yarr/YarrCanonicalize.h
bool JSC::Yarr::areCanonicallyEquivalent(UChar32, UChar32, JSC::Yarr::CanonicalMode)
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::matchParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
JSC::Yarr::Interpreter::ParenthesesDisjunctionContext *JSC::Yarr::Interpreter<unsigned char>::allocParenthesesDisjunctionContext(JSC::Yarr::ByteDisjunction *, unsigned int *, JSC::Yarr::ByteTerm &) [CharType = unsigned char]
static void JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext(JSC::Yarr::Interpreter::BackTrackInfoParentheses *) [CharType = unsigned char]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::backtrackParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::backtrackParenthesesTerminalEnd(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
unsigned int JSC::Yarr::Interpreter<unsigned short>::interpret() [CharType = unsigned short]
JSC::Yarr::Interpreter::DisjunctionContext *JSC::Yarr::Interpreter<unsigned short>::allocDisjunctionContext(JSC::Yarr::ByteDisjunction *) [CharType = unsigned short]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned short>::matchDisjunction(JSC::Yarr::ByteDisjunction *, JSC::Yarr::Interpreter::DisjunctionContext *, bool) [CharType = unsigned short]
int JSC::Yarr::Interpreter<unsigned short>::InputStream::readChecked(unsigned int) [CharType = unsigned short]
bool JSC::Yarr::Interpreter<unsigned short>::InputStream::atEnd(unsigned int) [CharType = unsigned short]
int JSC::Yarr::Interpreter<unsigned short>::InputStream::readSurrogatePairChecked(unsigned int) [CharType = unsigned short]
void JSC::Yarr::Interpreter<unsigned short>::InputStream::uncheckInput(unsigned int) [CharType = unsigned short]
bool JSC::Yarr::Interpreter<unsigned short>::matchCharacterClass(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned short]
bool JSC::Yarr::Interpreter<unsigned short>::matchBackReference(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned short]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned short>::matchParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned short]
JSC::Yarr::Interpreter::ParenthesesDisjunctionContext *JSC::Yarr::Interpreter<unsigned short>::allocParenthesesDisjunctionContext(JSC::Yarr::ByteDisjunction *, unsigned int *, JSC::Yarr::ByteTerm &) [CharType = unsigned short]
static void JSC::Yarr::Interpreter<unsigned short>::popParenthesesDisjunctionContext(JSC::Yarr::Interpreter::BackTrackInfoParentheses *) [CharType = unsigned short]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned short>::backtrackParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned short]
bool JSC::Yarr::Interpreter<unsigned short>::backtrackParenthesesTerminalEnd(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned short]
UChar32 JSC::Yarr::getCanonicalPair(const JSC::Yarr::CanonicalizationRange *, UChar32)
^$\.*+?()[]{}|/
Script_Extensions
General_Category
Tangut
Tang
Thaana
Thaa
Adlam
Adlm
Telugu
Telu
Cyrillic
Cyrl
Zanabazar_Square
Zanb
Hang
Old_South_Arabian
Sarb
Ethiopic
Ethi
Zinh
Qaai
Meroitic_Cursive
Merc
Bhaiksuki
Bhks
Ahom
Hani
Old_North_Arabian
Narb
Armn
Taml
Bopo
Bassa_Vah
Bass
Sundanese
Sund
Osage
Osge
Old_Sogdian
Sogo
Tagalog
Tglg
Malayalam
Mlym
Marchen
Marc
Carian
Cari
Hira
Tagbanwa
Tagb
Meetei_Mayek
Mtei
Hanifi_Rohingya
Rohg
Pahawh_Hmong
Hmng
Tai_Le
Tale
Kayah_Li
Kali
Buginese
Bugi
Kharoshthi
Khar
Tai_Tham
Lana
Old_Italic
Ital
Old_Persian
Xpeo
Warang_Citi
Wara
Latn
Saurashtra
Saur
Shavian
Shaw
Georgian
Geor
Grantha
Gran
Duployan
Dupl
Batak
Batk
Deva
Tibetan
Tibt
Tifinagh
Tfng
Ugaritic
Ugar
Braille
Brai
Anatolian_Hieroglyphs
Hluw
Greek
Grek
Lycian
Lyci
Mende_Kikakui
Mend
Tai_Viet
Tavt
Vaii
Ogham
Ogam
Inscriptional_Parthian
Prti
Cham
Syriac
Syrc
Runic
Runr
Gothic
Goth
Mahajani
Mahj
Kana
Osmanya
Osma
New_Tai_Lue
Talu
Ol_Chiki
Olck
Newa
Limbu
Limb
Pau_Cin_Hau
Pauc
Cherokee
Cher
Miao
Plrd
Oriya
Orya
Medefaidrin
Medf
Sharada
Shrd
Gujr
Nushu
Nshu
Modi
Gunjala_Gondi
Gong
Inscriptional_Pahlavi
Phli
Manichaean
Mani
Khmer
Khmr
Cuneiform
Xsux
Khudawadi
Sind
Mandaic
Mand
Hatran
Hatr
Syloti_Nagri
Sylo
Nkoo
Cans
Meroitic_Hieroglyphs
Mero
Phoenician
Phnx
Nabataean
Nbat
Bengali
Beng
Kaithi
Kthi
Glagolitic
Glag
Imperial_Aramaic
Armi
Sora_Sompeng
Sora
Guru
Javanese
Java
Old_Permic
Perm
Phags_Pa
Phag
Cypriot
Cprt
Kannada
Knda
Khojki
Khoj
Mongolian
Mong
Sinhala
Sinh
Brahmi
Brah
Elbasan
Elba
Dsrt
Rejang
Rjng
SignWriting
Sgnw
Multani
Mult
Yiii
Balinese
Bali
Laoo
Hanunoo
Hano
Masaram_Gondi
Gonm
Linear_B
Linb
Linear_A
Lina
Dogra
Dogr
Old_Turkic
Orkh
Lepcha
Lepc
Lydian
Lydi
Egyptian_Hieroglyphs
Egyp
Sogdian
Sogd
Caucasian_Albanian
Aghb
Makasar
Maka
Old_Hungarian
Hung
Samaritan
Samr
Lisu
Buhid
Buhd
Palmyrene
Palm
Tirhuta
Tirh
Mroo
Zyyy
Coptic
Copt
Qaac
Chakma
Cakm
Arab
Bamum
Bamu
Myanmar
Mymr
Siddham
Sidd
Soyombo
Soyo
Avestan
Avst
Hebr
Psalter_Pahlavi
Phlp
Takri
Takr
Spacing_Mark
Modifier_Symbol
Punctuation
punct
Decimal_Number
digit
Other_Number
Mark
Combining_Mark
Nonspacing_Mark
Connector_Punctuation
Private_Use
Format
Line_Separator
Close_Punctuation
Cased_Letter
Letter
Titlecase_Letter
Dash_Punctuation
Open_Punctuation
Enclosing_Mark
Lowercase_Letter
Letter_Number
Surrogate
Currency_Symbol
Separator
Other_Symbol
Final_Punctuation
Paragraph_Separator
Modifier_Letter
Control
cntrl
Initial_Punctuation
Other_Letter
Assigned
Unassigned
Other_Punctuation
Uppercase_Letter
Math_Symbol
Space_Separator
Grapheme_Extend
Gr_Ext
Extended_Pictographic
Emoji_Presentation
Pattern_White_Space
Pat_WS
Emoji_Component
Changes_When_Uppercased
Ideographic
Ideo
IDS_Binary_Operator
IDSB
Regional_Indicator
Alphabetic
Alpha
Changes_When_Casemapped
CWCM
IDS_Trinary_Operator
IDST
Changes_When_NFKC_Casefolded
CWKCF
Bidi_Control
Bidi_C
ASCII_Hex_Digit
AHex
Cased
Soft_Dotted
Case_Ignorable
Extender
Changes_When_Titlecased
Lowercase
Lower
Sentence_Terminal
STerm
Deprecated
Pattern_Syntax
Pat_Syn
Emoji_Modifier_Base
Join_Control
Join_C
Logical_Order_Exception
XID_Start
XIDS
Emoji_Modifier
Terminal_Punctuation
Term
Variation_Selector
ID_Continue
Hex_Digit
Grapheme_Base
Gr_Base
Diacritic
Uppercase
Upper
ID_Start
Unified_Ideograph
UIdeo
Bidi_Mirrored
Bidi_M
Dash
XID_Continue
XIDC
Changes_When_Lowercased
Changes_When_Casefolded
CWCF
Noncharacter_Code_Point
NChar
Radical
Quotation_Mark
QMark
White_Space
WSpace
space
Default_Ignorable_Code_Point
Emoji
%-3d %p %{public}s
%-3d %p
Process is above the memory kill threshold. Trying to shrink down.
New memory footprint: %zu MB
Shrank below memory kill threshold. Process gets to live.
Memory usage policy changed: %s -> %s
Current memory footprint: %zu MB
Memory pressure relief: %{public}s: (Unable to get dirty memory information for process)
Memory pressure relief: %{public}s: res = %zu/%zu/%ld, res+swap = %zu/%zu/%ld
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
                
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_
?456789:;<=
 !"#$%&'()*+,-./0123
456789:;<=
 !"#$%&'()*+,-./0123
UUUUUUUUUUUUUUUU3333333333333333
-;eU
U1(\Q
mSx@
b}$l
~)p$w
11eU%
z^KD
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
@wKA
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
aCoc
vH7B
W4vC
O8M2
=uuuuuuuubtnufruuuuuuuuuuuuuuuuuu
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
          
                          
                          
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
0123456789ABCDEF
/libclang_rt.
asan_
tsan_
?UUUUUU
[](){}+-*.,?\^$|
//# sourceURL=__InjectedScript_InjectedScriptSource.js
(function(InjectedScriptHost,inspectedGlobalObject,injectedScriptId){var Object={}.constructor;function toString(obj)
{return String(obj);}
function toStringDescription(obj)
{if(obj===0&&1/obj<0)
return"-0";return toString(obj);}
function isUInt32(obj)
{if(typeof obj==="number")
return obj>>>0===obj&&(obj>0||1/obj>0);return""+(obj>>>0)===obj;}
function isSymbol(obj)
{return typeof obj==="symbol";}
function isEmptyObject(object)
{for(let key in object)
return false;return true;}
function isDefined(value)
{return!!value||InjectedScriptHost.isHTMLAllCollection(value);}
function isPrimitiveValue(value)
{switch(typeof value){case"boolean":case"number":case"string":return true;case"undefined":return!InjectedScriptHost.isHTMLAllCollection(value);default:return false;}}
let InjectedScript=class InjectedScript
{constructor()
{this._lastBoundObjectId=1;this._idToWrappedObject={};this._idToObjectGroupName={};this._objectGroups={};this._modules={};this._nextSavedResultIndex=1;this._savedResults=[];} 
evaluate(expression,objectGroup,injectCommandLineAPI,returnByValue,generatePreview,saveResult)
{return this._evaluateAndWrap(InjectedScriptHost.evaluateWithScopeExtension,InjectedScriptHost,expression,objectGroup,false,injectCommandLineAPI,returnByValue,generatePreview,saveResult);}
awaitPromise(promiseObjectId,returnByValue,generatePreview,saveResult,callback)
{let parsedPromiseObjectId=this._parseObjectId(promiseObjectId);let promiseObject=this._objectForId(parsedPromiseObjectId);let promiseObjectGroupName=this._idToObjectGroupName[parsedPromiseObjectId.id];if(!isDefined(promiseObject)){callback("Could not find object with given id");return;}
if(!(promiseObject instanceof Promise)){callback("Object with given id is not a Promise");return;}
let resolve=(value)=>{let returnObject={wasThrown:false,result:RemoteObject.create(value,promiseObjectGroupName,returnByValue,generatePreview),};if(saveResult){this._savedResultIndex=0;this._saveResult(returnObject.result);if(this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;}
callback(returnObject);};let reject=(reason)=>{callback(this._createThrownValue(reason,promiseObjectGroupName));};promiseObject.then(resolve,reject);}
evaluateOnCallFrame(topCallFrame,callFrameId,expression,objectGroup,injectCommandLineAPI,returnByValue,generatePreview,saveResult)
{let callFrame=this._callFrameForId(topCallFrame,callFrameId);if(!callFrame)
return"Could not find call frame with given id";return this._evaluateAndWrap(callFrame.evaluateWithScopeExtension,callFrame,expression,objectGroup,true,injectCommandLineAPI,returnByValue,generatePreview,saveResult);}
callFunctionOn(objectId,expression,args,returnByValue,generatePreview)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return"Could not find object with given id";let resolvedArgs=[];if(args){let callArgs=InjectedScriptHost.evaluate(args);for(let i=0;i<callArgs.length;++i){try{resolvedArgs[i]=this._resolveCallArgument(callArgs[i]);}catch(e){return String(e);}}}
try{let func=InjectedScriptHost.evaluate("("+expression+")");if(typeof func!=="function")
return"Given expression does not evaluate to a function";return{wasThrown:false,result:RemoteObject.create(func.apply(object,resolvedArgs),objectGroupName,returnByValue,generatePreview)};}catch(e){return this._createThrownValue(e,objectGroupName);}}
getFunctionDetails(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);if(typeof object!=="function")
return"Cannot resolve function by id.";return this.functionDetails(object);}
functionDetails(func)
{let details=InjectedScriptHost.functionDetails(func);if(!details)
return"Cannot resolve function details.";return details;}
getPreview(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);return RemoteObject.createObjectPreviewForValue(object,true);}
getProperties(objectId,ownProperties,generatePreview)
{let nativeGettersAsValues=false;let collectionMode=ownProperties?InjectedScript.CollectionMode.OwnProperties:InjectedScript.CollectionMode.AllProperties;return this._getProperties(objectId,collectionMode,generatePreview,nativeGettersAsValues);}
getDisplayableProperties(objectId,generatePreview)
{let nativeGettersAsValues=true;let collectionMode=InjectedScript.CollectionMode.OwnProperties|InjectedScript.CollectionMode.NativeGetterProperties;return this._getProperties(objectId,collectionMode,generatePreview,nativeGettersAsValues);}
getInternalProperties(objectId,generatePreview)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return false;if(isSymbol(object))
return false;let descriptors=this._internalPropertyDescriptors(object);if(!descriptors)
return[];for(let i=0;i<descriptors.length;++i){let descriptor=descriptors[i];if("value"in descriptor)
descriptor.value=RemoteObject.create(descriptor.value,objectGroupName,false,generatePreview);}
return descriptors;}
getCollectionEntries(objectId,objectGroupName,startIndex,numberToFetch)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);objectGroupName=objectGroupName||this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return;if(typeof object!=="object")
return;let entries=this._entries(object,InjectedScriptHost.subtype(object),startIndex,numberToFetch);return entries.map(function(entry){entry.value=RemoteObject.create(entry.value,objectGroupName,false,true);if("key"in entry)
entry.key=RemoteObject.create(entry.key,objectGroupName,false,true);return entry;});}
saveResult(callArgumentJSON)
{this._savedResultIndex=0;try{let callArgument=InjectedScriptHost.evaluate("("+callArgumentJSON+")");let value=this._resolveCallArgument(callArgument);this._saveResult(value);}catch(e){}
return this._savedResultIndex;}
wrapCallFrames(callFrame)
{if(!callFrame)
return false;let result=[];let depth=0;do{result.push(new InjectedScript.CallFrameProxy(depth++,callFrame));callFrame=callFrame.caller;}while(callFrame);return result;}
wrapObject(object,groupName,canAccessInspectedGlobalObject,generatePreview)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(object);return RemoteObject.create(object,groupName,false,generatePreview);}
wrapJSONString(jsonString,groupName,generatePreview)
{try{return this.wrapObject(JSON.parse(jsonString),groupName,true,generatePreview);}catch{return null;}}
wrapTable(canAccessInspectedGlobalObject,table,columns)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(table);
let columnNames=null;if(typeof columns==="string")
columns=[columns];if(InjectedScriptHost.subtype(columns)==="array"){columnNames=[];for(let i=0;i<columns.length;++i)
columnNames.push(toString(columns[i]));}
return RemoteObject.create(table,"console",false,true,columnNames);}
previewValue(value)
{return RemoteObject.createObjectPreviewForValue(value,true);}
setExceptionValue(value)
{this._exceptionValue=value;}
clearExceptionValue()
{delete this._exceptionValue;}
findObjectById(objectId)
{let parsedObjectId=this._parseObjectId(objectId);return this._objectForId(parsedObjectId);}
inspectObject(object)
{if(this._commandLineAPIImpl)
this._commandLineAPIImpl.inspect(object);}
releaseObject(objectId)
{let parsedObjectId=this._parseObjectId(objectId);this._releaseObject(parsedObjectId.id);}
releaseObjectGroup(objectGroupName)
{if(objectGroupName==="console"){delete this._lastResult;this._nextSavedResultIndex=1;this._savedResults=[];}
let group=this._objectGroups[objectGroupName];if(!group)
return;for(let i=0;i<group.length;i++)
this._releaseObject(group[i]);delete this._objectGroups[objectGroupName];} 
module(name)
{return this._modules[name];}
injectModule(name,source,host)
{delete this._modules[name];let moduleFunction=InjectedScriptHost.evaluate("("+source+")");if(typeof moduleFunction!=="function"){if(inspectedGlobalObject.console)
inspectedGlobalObject.console.error("Web Inspector error: A function was expected for module %s evaluation",name);return null;}
let module=moduleFunction.call(inspectedGlobalObject,InjectedScriptHost,inspectedGlobalObject,injectedScriptId,this,RemoteObject,host);this._modules[name]=module;return module;} 
isPrimitiveValue(value)
{return isPrimitiveValue(value);} 
_parseObjectId(objectId)
{return InjectedScriptHost.evaluate("("+objectId+")");}
_objectForId(objectId)
{return this._idToWrappedObject[objectId.id];}
_bind(object,objectGroupName)
{let id=this._lastBoundObjectId++;let objectId=`{"injectedScriptId":${injectedScriptId},"id":${id}}`;this._idToWrappedObject[id]=object;if(objectGroupName){let group=this._objectGroups[objectGroupName];if(!group){group=[];this._objectGroups[objectGroupName]=group;}
group.push(id);this._idToObjectGroupName[id]=objectGroupName;}
return objectId;}
_releaseObject(id)
{delete this._idToWrappedObject[id];delete this._idToObjectGroupName[id];}
_fallbackWrapper(object)
{let result={};result.type=typeof object;if(isPrimitiveValue(object))
result.value=object;else
result.description=toString(object);return result;}
_resolveCallArgument(callArgumentJSON)
{if("value"in callArgumentJSON)
return callArgumentJSON.value;let objectId=callArgumentJSON.objectId;if(objectId){let parsedArgId=this._parseObjectId(objectId);if(!parsedArgId||parsedArgId["injectedScriptId"]!==injectedScriptId)
throw"Arguments should belong to the same JavaScript world as the target object.";let resolvedArg=this._objectForId(parsedArgId);if(!isDefined(resolvedArg))
throw"Could not find object with given id";return resolvedArg;}
return undefined;}
_createThrownValue(value,objectGroup)
{let remoteObject=RemoteObject.create(value,objectGroup);try{remoteObject.description=toStringDescription(value);}catch(e){}
return{wasThrown:true,result:remoteObject};}
_evaluateAndWrap(evalFunction,object,expression,objectGroup,isEvalOnCallFrame,injectCommandLineAPI,returnByValue,generatePreview,saveResult)
{try{this._savedResultIndex=0;let returnObject={wasThrown:false,result:RemoteObject.create(this._evaluateOn(evalFunction,object,objectGroup,expression,isEvalOnCallFrame,injectCommandLineAPI,saveResult),objectGroup,returnByValue,generatePreview)};if(saveResult&&this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;return returnObject;}catch(e){return this._createThrownValue(e,objectGroup);}}
_evaluateOn(evalFunction,object,objectGroup,expression,isEvalOnCallFrame,injectCommandLineAPI,saveResult)
{let commandLineAPI=null;if(injectCommandLineAPI){if(this.CommandLineAPI)
commandLineAPI=new this.CommandLineAPI(this._commandLineAPIImpl,isEvalOnCallFrame?object:null);else
commandLineAPI=new BasicCommandLineAPI(isEvalOnCallFrame?object:null);}
let result=evalFunction.call(object,expression,commandLineAPI);if(saveResult)
this._saveResult(result);return result;}
_callFrameForId(topCallFrame,callFrameId)
{let parsedCallFrameId=InjectedScriptHost.evaluate("("+callFrameId+")");let ordinal=parsedCallFrameId["ordinal"];let callFrame=topCallFrame;while(--ordinal>=0&&callFrame)
callFrame=callFrame.caller;return callFrame;}
_getProperties(objectId,collectionMode,generatePreview,nativeGettersAsValues)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return false;if(isSymbol(object))
return false;let descriptors=this._propertyDescriptors(object,collectionMode,nativeGettersAsValues);for(let i=0;i<descriptors.length;++i){let descriptor=descriptors[i];if("get"in descriptor)
descriptor.get=RemoteObject.create(descriptor.get,objectGroupName);if("set"in descriptor)
descriptor.set=RemoteObject.create(descriptor.set,objectGroupName);if("value"in descriptor)
descriptor.value=RemoteObject.create(descriptor.value,objectGroupName,false,generatePreview);if(!("configurable"in descriptor))
descriptor.configurable=false;if(!("enumerable"in descriptor))
descriptor.enumerable=false;if("symbol"in descriptor)
descriptor.symbol=RemoteObject.create(descriptor.symbol,objectGroupName);}
return descriptors;}
_internalPropertyDescriptors(object,completeDescriptor)
{let internalProperties=InjectedScriptHost.getInternalProperties(object);if(!internalProperties)
return null;let descriptors=[];for(let i=0;i<internalProperties.length;i++){let property=internalProperties[i];let descriptor={name:property.name,value:property.value};if(completeDescriptor){descriptor.writable=false;descriptor.configurable=false;descriptor.enumerable=false;descriptor.isOwn=true;}
descriptors.push(descriptor);}
return descriptors;}
_propertyDescriptors(object,collectionMode,nativeGettersAsValues)
{if(InjectedScriptHost.subtype(object)==="proxy")
return[];let descriptors=[];let nameProcessed=new Set;function createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,possibleNativeBindingGetter)
{try{let fakeDescriptor={name,value:object[name],writable:descriptor.writable||false,configurable:descriptor.configurable||false,enumerable:descriptor.enumerable||false};if(possibleNativeBindingGetter)
fakeDescriptor.nativeGetter=true;if(isOwnProperty)
fakeDescriptor.isOwn=true;if(symbol)
fakeDescriptor.symbol=symbol;if(fakeDescriptor.value instanceof Promise)
fakeDescriptor.value.catch(function(){});return fakeDescriptor;}catch(e){let errorDescriptor={name,value:e,wasThrown:true};if(isOwnProperty)
errorDescriptor.isOwn=true;if(symbol)
errorDescriptor.symbol=symbol;return errorDescriptor;}}
function processDescriptor(descriptor,isOwnProperty,possibleNativeBindingGetter)
{if(collectionMode&InjectedScript.CollectionMode.AllProperties){descriptors.push(descriptor);return;}
if(collectionMode&InjectedScript.CollectionMode.OwnProperties&&isOwnProperty){descriptors.push(descriptor);return;}
if(collectionMode&InjectedScript.CollectionMode.NativeGetterProperties){if(possibleNativeBindingGetter){descriptors.push(descriptor);return;}}}
function processProperties(o,properties,isOwnProperty)
{for(let i=0;i<properties.length;++i){let property=properties[i];if(nameProcessed.has(property)||property==="__proto__")
continue;nameProcessed.add(property);let name=toString(property);let symbol=isSymbol(property)?property:null;let descriptor=Object.getOwnPropertyDescriptor(o,property);if(!descriptor){let fakeDescriptor=createFakeValueDescriptor(name,symbol,{writable:false,configurable:false,enumerable:false},isOwnProperty);processDescriptor(fakeDescriptor,isOwnProperty);continue;}
if(nativeGettersAsValues){if(String(descriptor.get).endsWith("[native code]\n}")||(!descriptor.get&&descriptor.hasOwnProperty("get")&&!descriptor.set&&descriptor.hasOwnProperty("set"))){let fakeDescriptor=createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,true);processDescriptor(fakeDescriptor,isOwnProperty,true);continue;}}
descriptor.name=name;if(isOwnProperty)
descriptor.isOwn=true;if(symbol)
descriptor.symbol=symbol;processDescriptor(descriptor,isOwnProperty);}}
function arrayIndexPropertyNames(o,length)
{let array=[];for(let i=0;i<length;++i){if(i in o)
array.push(""+i);}
return array;}
let isArrayLike=false;try{isArrayLike=RemoteObject.subtype(object)==="array"&&isFinite(object.length)&&object.length>0;}catch(e){}
for(let o=object;isDefined(o);o=Object.getPrototypeOf(o)){let isOwnProperty=o===object;if(isArrayLike&&isOwnProperty)
processProperties(o,arrayIndexPropertyNames(o,Math.min(object.length,100)),isOwnProperty);else{processProperties(o,Object.getOwnPropertyNames(o),isOwnProperty);if(Object.getOwnPropertySymbols)
processProperties(o,Object.getOwnPropertySymbols(o),isOwnProperty);}
if(collectionMode===InjectedScript.CollectionMode.OwnProperties)
break;}
try{if(object.__proto__)
descriptors.push({name:"__proto__",value:object.__proto__,writable:true,configurable:true,enumerable:false,isOwn:true});}catch(e){}
return descriptors;}
_getSetEntries(object,skip,numberToFetch)
{let entries=[];for(let value of object){if(skip>0){skip--;continue;}
entries.push({value});if(numberToFetch&&entries.length===numberToFetch)
break;}
return entries;}
_getMapEntries(object,skip,numberToFetch)
{let entries=[];for(let[key,value]of object){if(skip>0){skip--;continue;}
entries.push({key,value});if(numberToFetch&&entries.length===numberToFetch)
break;}
return entries;}
_getWeakMapEntries(object,numberToFetch)
{return InjectedScriptHost.weakMapEntries(object,numberToFetch);}
_getWeakSetEntries(object,numberToFetch)
{return InjectedScriptHost.weakSetEntries(object,numberToFetch);}
_getIteratorEntries(object,numberToFetch)
{return InjectedScriptHost.iteratorEntries(object,numberToFetch);}
_entries(object,subtype,startIndex,numberToFetch)
{if(subtype==="set")
return this._getSetEntries(object,startIndex,numberToFetch);if(subtype==="map")
return this._getMapEntries(object,startIndex,numberToFetch);if(subtype==="weakmap")
return this._getWeakMapEntries(object,numberToFetch);if(subtype==="weakset")
return this._getWeakSetEntries(object,numberToFetch);if(subtype==="iterator")
return this._getIteratorEntries(object,numberToFetch);throw"unexpected type";}
_saveResult(result)
{this._lastResult=result;if(result===undefined||result===null)
return;let existingIndex=this._savedResults.indexOf(result);if(existingIndex!==-1){this._savedResultIndex=existingIndex;return;}
this._savedResultIndex=this._nextSavedResultIndex;this._savedResults[this._nextSavedResultIndex++]=result;if(this._nextSavedResultIndex>=100)
this._nextSavedResultIndex=1;}
_savedResult(index)
{return this._savedResults[index];}}
InjectedScript.CollectionMode={OwnProperties:1<<0,NativeGetterProperties:1<<1,AllProperties:1<<2,};var injectedScript=new InjectedScript;let RemoteObject=class RemoteObject
{constructor(object,objectGroupName,forceValueType,generatePreview,columnNames)
{this.type=typeof object;if(this.type==="undefined"&&InjectedScriptHost.isHTMLAllCollection(object))
this.type="object";if(isPrimitiveValue(object)||object===null||forceValueType){if(this.type!=="undefined")
this.value=object;if(object===null)
this.subtype="null";if(this.type==="number")
this.description=toStringDescription(object);return;}
this.objectId=injectedScript._bind(object,objectGroupName);let subtype=RemoteObject.subtype(object);if(subtype)
this.subtype=subtype;this.className=InjectedScriptHost.internalConstructorName(object);this.description=RemoteObject.describe(object);if(subtype==="array")
this.size=typeof object.length==="number"?object.length:0;else if(subtype==="set"||subtype==="map")
this.size=object.size;else if(subtype==="weakmap")
this.size=InjectedScriptHost.weakMapSize(object);else if(subtype==="weakset")
this.size=InjectedScriptHost.weakSetSize(object);else if(subtype==="class"){this.classPrototype=RemoteObject.create(object.prototype,objectGroupName);this.className=object.name;}
if(generatePreview&&this.type==="object"){if(subtype==="proxy"){this.preview=this._generatePreview(InjectedScriptHost.proxyTargetValue(object));this.preview.lossless=false;}else
this.preview=this._generatePreview(object,undefined,columnNames);}} 
static create(object,objectGroupName,forceValueType,generatePreview,columnNames)
{try{return new RemoteObject(object,objectGroupName,forceValueType,generatePreview,columnNames);}catch(e){let description;try{description=RemoteObject.describe(e);}catch(ex){alert(ex.message);description="<failed to convert exception to string>";}
return new RemoteObject(description);}}
static createObjectPreviewForValue(value,generatePreview,columnNames)
{let remoteObject=new RemoteObject(value,undefined,false,generatePreview,columnNames);if(remoteObject.objectId)
injectedScript.releaseObject(remoteObject.objectId);if(remoteObject.classPrototype&&remoteObject.classPrototype.objectId)
injectedScript.releaseObject(remoteObject.classPrototype.objectId);return remoteObject.preview||remoteObject._emptyPreview();}
static subtype(value)
{if(value===null)
return"null";if(isPrimitiveValue(value)||isSymbol(value))
return null;if(InjectedScriptHost.isHTMLAllCollection(value))
return"array";let preciseType=InjectedScriptHost.subtype(value);if(preciseType)
return preciseType;try{if(typeof value.splice==="function"&&isFinite(value.length))
return"array";}catch(e){}
return null;}
static describe(value)
{if(isPrimitiveValue(value))
return null;if(isSymbol(value))
return toString(value);let subtype=RemoteObject.subtype(value);if(subtype==="regexp")
return toString(value);if(subtype==="date")
return toString(value);if(subtype==="error")
return toString(value);if(subtype==="proxy")
return"Proxy";if(subtype==="node")
return RemoteObject.nodePreview(value);let className=InjectedScriptHost.internalConstructorName(value);if(subtype==="array")
return className;if(subtype==="iterator"&&Symbol.toStringTag in value)
return value[Symbol.toStringTag];if(typeof value==="function")
return value.toString();if(className==="Object"){let constructorName=value.constructor&&value.constructor.name;if(constructorName)
return constructorName;}
return className;}
static nodePreview(node)
{let isXMLDocument=node.ownerDocument&&!!node.ownerDocument.xmlVersion;let nodeName=isXMLDocument?node.nodeName:node.nodeName.toLowerCase();switch(node.nodeType){case 1: if(node.id)
return"<"+nodeName+" id=\""+node.id+"\">";if(node.classList.length)
return"<"+nodeName+" class=\""+node.classList.toString().replace(/\s+/," ")+"\">";if(nodeName==="input"&&node.type)
return"<"+nodeName+" type=\""+node.type+"\">";return"<"+nodeName+">";case 3: return nodeName+" \""+node.nodeValue+"\"";case 8: return"<!--"+node.nodeValue+"-->";case 10: return"<!DOCTYPE "+nodeName+">";default:return nodeName;}} 
_initialPreview()
{let preview={type:this.type,description:this.description||toString(this.value),lossless:true,};if(this.subtype){preview.subtype=this.subtype;if(this.subtype!=="null"){preview.overflow=false;preview.properties=[];}}
if("size"in this)
preview.size=this.size;return preview;}
_emptyPreview()
{let preview=this._initialPreview();if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator"){if(this.size){preview.entries=[];preview.lossless=false;preview.overflow=true;}}
return preview;}
_generatePreview(object,firstLevelKeys,secondLevelKeys)
{let preview=this._initialPreview();let isTableRowsRequest=secondLevelKeys===null||secondLevelKeys;let firstLevelKeysCount=firstLevelKeys?firstLevelKeys.length:0;let propertiesThreshold={properties:isTableRowsRequest?1000:Math.max(5,firstLevelKeysCount),indexes:isTableRowsRequest?1000:Math.max(10,firstLevelKeysCount)};try{if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator")
this._appendEntryPreviews(object,preview);preview.properties=[];let internalPropertyDescriptors=injectedScript._internalPropertyDescriptors(object,true);if(internalPropertyDescriptors){this._appendPropertyPreviews(object,preview,internalPropertyDescriptors,true,propertiesThreshold,firstLevelKeys,secondLevelKeys);if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0)
return preview;}
if(preview.entries)
return preview;let nativeGettersAsValues=true;let descriptors=injectedScript._propertyDescriptors(object,InjectedScript.CollectionMode.AllProperties,nativeGettersAsValues);this._appendPropertyPreviews(object,preview,descriptors,false,propertiesThreshold,firstLevelKeys,secondLevelKeys);if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0)
return preview;}catch(e){preview.lossless=false;}
return preview;}
_appendPropertyPreviews(object,preview,descriptors,internal,propertiesThreshold,firstLevelKeys,secondLevelKeys)
{for(let i=0;i<descriptors.length;++i){let descriptor=descriptors[i];if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0)
break;if(descriptor.wasThrown){preview.lossless=false;continue;}
let name=descriptor.name;if(name==="__proto__"){if(descriptor.value&&descriptor.value.constructor&&descriptor.value.constructor!==Object&&descriptor.value.constructor!==Array&&descriptor.value.constructor!==RegExp)
preview.lossless=false;continue;}
if(this.subtype==="array"&&!isUInt32(name))
continue;if(!descriptor.enumerable&&!descriptor.isOwn&&!(this.subtype==="array"||(this.subtype!=="regexp"&&descriptor.nativeGetter)))
continue;if(firstLevelKeys&&!firstLevelKeys.includes(name))
continue;if(!("value"in descriptor)){preview.lossless=false;this._appendPropertyPreview(preview,internal,{name,type:"accessor"},propertiesThreshold);continue;}
let value=descriptor.value;if(value===null){this._appendPropertyPreview(preview,internal,{name,type:"object",subtype:"null",value:"null"},propertiesThreshold);continue;}
let type=typeof value;if(!descriptor.enumerable&&type==="function")
continue;if(InjectedScriptHost.isHTMLAllCollection(value))
type="object";const maxLength=100;if(isPrimitiveValue(value)){if(type==="string"&&value.length>maxLength){value=this._abbreviateString(value,maxLength,true);preview.lossless=false;}
this._appendPropertyPreview(preview,internal,{name,type,value:toStringDescription(value)},propertiesThreshold);continue;}
if(isSymbol(value)){let symbolString=toString(value);if(symbolString.length>maxLength){symbolString=this._abbreviateString(symbolString,maxLength,true);preview.lossless=false;}
this._appendPropertyPreview(preview,internal,{name,type,value:symbolString},propertiesThreshold);continue;}
let property={name,type};let subtype=RemoteObject.subtype(value);if(subtype)
property.subtype=subtype;if((secondLevelKeys===null||secondLevelKeys)||this._isPreviewableObject(value,object)){let subPreview=RemoteObject.createObjectPreviewForValue(value,value!==object,secondLevelKeys);property.valuePreview=subPreview;if(!subPreview.lossless)
preview.lossless=false;if(subPreview.overflow)
preview.overflow=true;}else{let description="";if(type!=="function"||subtype==="class"){let fullDescription;if(subtype==="class")
fullDescription="class "+value.name;else if(subtype==="node")
fullDescription=RemoteObject.nodePreview(value);else
fullDescription=RemoteObject.describe(value);description=this._abbreviateString(fullDescription,maxLength,subtype==="regexp");}
property.value=description;preview.lossless=false;}
this._appendPropertyPreview(preview,internal,property,propertiesThreshold);}}
_appendPropertyPreview(preview,internal,property,propertiesThreshold)
{if(toString(property.name>>>0)===property.name)
propertiesThreshold.indexes--;else
propertiesThreshold.properties--;if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0){preview.overflow=true;preview.lossless=false;return;}
if(internal)
property.internal=true;preview.properties.push(property);}
_appendEntryPreviews(object,preview)
{let entries=injectedScript._entries(object,this.subtype,0,6);if(!entries)
return;if(entries.length>5){entries.pop();preview.overflow=true;preview.lossless=false;}
function updateMainPreview(subPreview){if(!subPreview.lossless)
preview.lossless=false;}
preview.entries=entries.map(function(entry){entry.value=RemoteObject.createObjectPreviewForValue(entry.value,entry.value!==object);updateMainPreview(entry.value);if("key"in entry){entry.key=RemoteObject.createObjectPreviewForValue(entry.key,entry.key!==object);updateMainPreview(entry.key);}
return entry;});}
_isPreviewableObject(value,object)
{let set=new Set;set.add(object);return this._isPreviewableObjectInternal(value,set,1);}
_isPreviewableObjectInternal(object,knownObjects,depth)
{if(depth>3)
return false;if(isPrimitiveValue(object)||isSymbol(object))
return true;if(object===null)
return true;if(knownObjects.has(object))
return false;++depth;knownObjects.add(object);let subtype=RemoteObject.subtype(object);if(subtype==="array"){let length=object.length;if(length>5)
return false;for(let i=0;i<length;++i){if(!this._isPreviewableObjectInternal(object[i],knownObjects,depth))
return false;}
return true;}
if(object.__proto__&&object.__proto__.__proto__)
return false;let ownPropertyNames=Object.getOwnPropertyNames(object);if(ownPropertyNames.length>3)
return false;for(let i=0;i<ownPropertyNames.length;++i){let propertyName=ownPropertyNames[i];let descriptor=Object.getOwnPropertyDescriptor(object,propertyName);if(descriptor&&!("value"in descriptor))
return false;if(!this._isPreviewableObjectInternal(object[propertyName],knownObjects,depth))
return false;}
return true;}
_abbreviateString(string,maxLength,middle)
{if(string.length<=maxLength)
return string;if(middle){let leftHalf=maxLength>>1;let rightHalf=maxLength-leftHalf-1;return string.substr(0,leftHalf)+"\u2026"+string.substr(string.length-rightHalf,rightHalf);}
return string.substr(0,maxLength)+"\u2026";}}
InjectedScript.CallFrameProxy=function(ordinal,callFrame)
{this.callFrameId=`{"ordinal":${ordinal},"injectedScriptId":${injectedScriptId}}`;this.functionName=callFrame.functionName;this.location={scriptId:String(callFrame.sourceID),lineNumber:callFrame.line,columnNumber:callFrame.column};this.scopeChain=this._wrapScopeChain(callFrame);this.this=RemoteObject.create(callFrame.thisObject,"backtrace");this.isTailDeleted=callFrame.isTailDeleted;}
InjectedScript.CallFrameProxy.prototype={_wrapScopeChain(callFrame)
{let scopeChain=callFrame.scopeChain;let scopeDescriptions=callFrame.scopeDescriptions();let scopeChainProxy=[];for(let i=0;i<scopeChain.length;i++)
scopeChainProxy[i]=InjectedScript.CallFrameProxy._createScopeJson(scopeChain[i],scopeDescriptions[i],"backtrace");return scopeChainProxy;}}
InjectedScript.CallFrameProxy._scopeTypeNames={0:"global", 1:"with", 2:"closure", 3:"catch", 4:"functionName", 5:"globalLexicalEnvironment", 6:"nestedLexical",};InjectedScript.CallFrameProxy._createScopeJson=function(object,{name,type,location},groupId)
{let scope={object:RemoteObject.create(object,groupId),type:InjectedScript.CallFrameProxy._scopeTypeNames[type],};if(name)
scope.name=name;if(location)
scope.location=location;if(isEmptyObject(object))
scope.empty=true;return scope;}
function bind(func,thisObject,...outerArgs)
{return function(...innerArgs){return func.apply(thisObject,outerArgs.concat(innerArgs));};}
function BasicCommandLineAPI(callFrame)
{this.$_=injectedScript._lastResult;this.$exception=injectedScript._exceptionValue; for(let i=1;i<=injectedScript._savedResults.length;++i)
this.__defineGetter__("$"+i,bind(injectedScript._savedResult,injectedScript,i));for(let i=0;i<BasicCommandLineAPI.methods.length;++i){let method=BasicCommandLineAPI.methods[i];this[method.name]=method;}}
BasicCommandLineAPI.methods=[function dir(){return inspectedGlobalObject.console.dir(...arguments);},function clear(){return inspectedGlobalObject.console.clear(...arguments);},function table(){return inspectedGlobalObject.console.table(...arguments);},function profile(){return inspectedGlobalObject.console.profile(...arguments);},function profileEnd(){return inspectedGlobalObject.console.profileEnd(...arguments);},function keys(object){return Object.keys(object);},function values(object){let result=[];for(let key in object)
result.push(object[key]);return result;},function queryObjects(){return InjectedScriptHost.queryObjects(...arguments);},];for(let i=0;i<BasicCommandLineAPI.methods.length;++i){let method=BasicCommandLineAPI.methods[i];method.toString=function(){return"function "+method.name+"() { [Command Line API] }";};}
return injectedScript;})
 !"#$%&'()*+,-./
:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a
cdeghijklm
yz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 3@KSZ`fkoswz~
0123456789abcdef
name
reason
call
alloc
init
performSelectorOnMainThread:withObject:waitUntilDone:
performSelector:onThread:withObject:waitUntilDone:
currentThread
length
bytes
URLWithString:
dataWithBytes:length:
data
appendBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
stringWithUTF8String:
precomposedStringWithCanonicalMapping
UTF8String
rangeOfString:
characterSetWithCharactersInString:
invertedSet
rangeOfCharacterFromSet:options:range:
rangeOfString:options:range:
substringWithRange:
getCharacters:range:
stringWithCharacters:length:
count
objectAtIndex:
stringByAppendingPathComponent:
fileSystemRepresentation
canBeConvertedToEncoding:
mutableCopy
rangeValue
replaceCharactersInRange:withString:
valueWithRange:
addObject:
characterAtIndex:
dataUsingEncoding:
dataWithBytesNoCopy:length:
getCFRunLoop
initWithBytes:length:encoding:
initWithCharacters:length:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithCharactersNoCopy:length:freeWhenDone:
initWithString:
_web_looksLikeIPAddress
retain
JSGlobalContextRef
initWithGlobalContextRef:
release
autorelease
initWithVirtualMachine:
setException:
setExceptionHandler:
ensureWrapperMap
addContext:forGlobalContextRef:
dealloc
evaluateScript:withSourceURL:
absoluteString
valueFromNotifyException:
valueWithJSValueRef:inContext:
currentContext
initWithObjects:count:
currentThis
currentCallee
currentArguments
evaluateScript:
exception
wrapperMap
globalObject
virtualMachine
setName:
_remoteInspectionEnabled
_setRemoteInspectionEnabled:
_includesNativeCallStackWhenReportingExceptions
_setIncludesNativeCallStackWhenReportingExceptions:
_debuggerRunLoop
_setDebuggerRunLoop:
.cxx_destruct
.cxx_construct
exceptionHandler
m_virtualMachine
m_context
m_exception
_exceptionHandler
objectForKeyedSubscript:
setObject:forKeyedSubscript:
virtualMachineWithContextGroupRef:
notifyException:
valueWithUndefinedInContext:
jsWrapperForObject:inContext:
objcWrapperForJSValueRef:inContext:
contextForGlobalContextRef:
boolFromNotifyException:
beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:
endCallbackWithData:
wrapperForObjCObject:
wrapperForJSObject:
contextWithJSGlobalContextRef:
initWithValue:
context
addManagedReference:withOwner:
initWithKeyOptions:valueOptions:capacity:
JSValueRef
value
copy
keyEnumerator
countByEnumeratingWithState:objects:count:
removeManagedReference:withOwner:
disconnectValue
managedValueWithValue:
managedValueWithValue:andOwner:
didAddOwner:
didRemoveOwner:
m_globalObject
m_lock
m_weakValue
m_owners
description
toString
arrayWithObjects:count:
callWithArguments:
valueWithNewPromiseInContext:fromExecutor:
toObject
isKindOfClass:
toDouble
invokeMethod:withArguments:
valueWithDouble:inContext:
valueForProperty:
setValue:forProperty:
valueWithObject:inContext:
valueWithBool:inContext:
valueWithInt32:inContext:
valueWithUInt32:inContext:
valueWithNewObjectInContext:
valueWithNewArrayInContext:
valueWithNewRegularExpressionFromPattern:flags:inContext:
valueWithNewErrorFromMessage:inContext:
valueWithNullInContext:
valueWithNewSymbolFromDescription:inContext:
valueWithNewPromiseResolvedWithResult:inContext:
valueWithNewPromiseRejectedWithReason:inContext:
toObjectOfClass:
toBool
toInt32
toUInt32
toNumber
toDate
toArray
toDictionary
deleteProperty:
hasProperty:
defineProperty:descriptor:
valueAtIndex:
setValue:atIndex:
isUndefined
isNull
isBoolean
isNumber
isString
isObject
isSymbol
isArray
isDate
isEqualToObject:
isEqualWithTypeCoercionToObject:
isInstanceOf:
constructWithArguments:
m_value
_context
unsignedIntegerValue
toPoint
toSize
numberWithFloat:
dictionaryWithObjects:forKeys:count:
numberWithUnsignedInteger:
toRange
toRect
valueWithPoint:inContext:
valueWithRange:inContext:
valueWithRect:inContext:
valueWithSize:inContext:
objectAtIndexedSubscript:
setObject:atIndexedSubscript:
class
numberWithBool:
numberWithDouble:
dateWithTimeIntervalSince1970:
array
dictionary
objectForKey:
selectorForStructToValue:
signatureWithObjCTypes:
invocationWithMethodSignature:
setSelector:
selectorForValueToStruct:
initWithValue:inContext:
addWrapper:forJSContextGroupRef:
wrapperForJSContextGroupRef:
initWithContextGroupRef:
setObject:forKey:
isOldExternalObject:
addExternalRememberedObject:
removeObjectForKey:
m_group
m_externalDataMutex
m_contextCache
m_externalObjectGraph
m_externalRememberedSet
externalDataMutex
externalObjectGraph
externalRememberedSet
shrinkFootprintWhenIdle
removeAllObjects
isSubclassOfClass:
classInfoForClass:
stringWithFormat:
prototypeInContext:
structureInContext:
allocateConstructorAndPrototypeInContext:
initForClass:
wrapperForObject:inContext:
constructorInContext:
m_class
m_block
m_classRef
m_prototype
m_constructor
m_structure
m_classMap
m_cachedJSWrappers
m_cachedObjCWrappers
setTarget:
invoke
null
boolValue
doubleValue
timeIntervalSince1970
uppercaseLetterCharacterSet
characterIsMember:
substringToIndex:
target
getReturnValue:
exceptionWithName:reason:userInfo:
setArgument:atIndex:
invokeWithTarget:
isMainThread
numberWithUnsignedInt:
isEqualToString:
stringValue
unsignedIntValue
initWithData:encoding:
numberWithInt:
isEqual:
JSWTFMainThreadCaller
JSContext
SubscriptSupport
Internal
JSManagedValue
JSValue
StructSupport
JSVMWrapperCache
JSVirtualMachine
JSObjCClassInfo
JSWrapperMap
JSExport
v8@0:4
@8@0:4
^{OpaqueJSContext=}8@0:4
@12@0:4@8
@16@0:4@8@12
v12@0:4@8
B8@0:4
v12@0:4B8
^{__CFRunLoop=}8@0:4
v12@0:4^{__CFRunLoop=}8
@?8@0:4
v12@0:4@?8
@"JSVirtualMachine"
^{OpaqueJSContext=}
{Strong<JSC::JSObject>="m_slot"^{JSValue}}
v16@0:4@8@12
@12@0:4^{OpaqueJSContext=}8
v12@0:4^{OpaqueJSValue=}8
@12@0:4^{OpaqueJSValue=}8
B12@0:4^{OpaqueJSValue=}8
v28@0:4^{CallbackData=^{CallbackData}@@^{OpaqueJSValue}^{OpaqueJSValue}I^^{OpaqueJSValue}@}8^{OpaqueJSValue=}12^{OpaqueJSValue=}16L20r^^{OpaqueJSValue}24
v12@0:4^{CallbackData=^{CallbackData}@@^{OpaqueJSValue}^{OpaqueJSValue}I^^{OpaqueJSValue}@}8
{Weak<JSC::JSGlobalObject>="m_impl"^{WeakImpl}}
{RefPtr<JSC::JSLock, WTF::DumbPtrTraits<JSC::JSLock> >="m_ptr"^{JSLock}}
{JSWeakValue="m_tag"i"m_value"(WeakValueUnion="primitive"{JSValue="u"(EncodedValueDescriptor="asInt64"q"asDouble"d"asBits"{?="payload"i"tag"i})}"object"{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}"string"{Weak<JSC::JSString>="m_impl"^{WeakImpl}})}
@"NSMapTable"
@16@0:4B8@12
@20@0:4d8@16
@16@0:4i8@12
@16@0:4I8@12
@20@0:4@8@12@16
@16@0:4@8@?12
^{OpaqueJSValue=}8@0:4
@12@0:4#8
d8@0:4
i8@0:4
I8@0:4
B12@0:4@8
@12@0:4I8
v16@0:4@8I12
^{OpaqueJSValue=}
@"JSContext"
{CGPoint=ff}8@0:4
{_NSRange=II}8@0:4
{CGRect={CGPoint=ff}{CGSize=ff}}8@0:4
{CGSize=ff}8@0:4
@20@0:4{CGPoint=ff}8@16
@20@0:4{_NSRange=II}8@16
@28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8@24
@20@0:4{CGSize=ff}8@16
@16@0:4^{OpaqueJSValue=}8@12
:12@0:4r*8
v16@0:4@8^{OpaqueJSContextGroup=}12
@12@0:4^{OpaqueJSContextGroup=}8
^{OpaqueJSContextGroup=}
{Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"AC}}}
v16@0:4@8^{OpaqueJSContext=}12
^{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}8@0:4
{pair<JSC::JSObject *, JSC::JSObject *>=^{JSObject}^{JSObject}}12@0:4@8
^{JSObject=^{Structure}CCCC{AuxiliaryBarrier<JSC::Butterfly *>=^{Butterfly}}I}16@0:4@8@12
^{JSObject=^{Structure}CCCC{AuxiliaryBarrier<JSC::Butterfly *>=^{Butterfly}}I}12@0:4@8
^{Structure=^{Structure}CCCC{StructureIDBlob=(?={?=^{Structure}CCCC}{?=ii}q)}SC{NoLock=}I{WriteBarrier<JSC::JSGlobalObject, WTF::DumbPtrTraits<JSC::JSGlobalObject> >=^{JSGlobalObject}}{WriteBarrier<JSC::Unknown, WTF::DumbValueTraits<JSC::Unknown> >=q}{WriteBarrier<JSC::StructureChain, WTF::DumbPtrTraits<JSC::StructureChain> >=^{StructureChain}}{WriteBarrier<JSC::JSCell, WTF::DumbPtrTraits<JSC::JSCell> >=^{JSCell}}{RefPtr<WTF::UniquedStringImpl, WTF::DumbPtrTraits<WTF::UniquedStringImpl> >=^{UniquedStringImpl}}{Poisoned<WTF::Poison<&JSC::g_GlobalDataPoison>, const JSC::ClassInfo *, void>=I}{StructureTransitionTable=i}{WriteBarrier<JSC::PropertyTable, WTF::DumbPtrTraits<JSC::PropertyTable> >=^{PropertyTable}}{InlineWatchpointSet=I}iI}12@0:4@8
^{OpaqueJSClass={atomic<unsigned int>=AI}^{OpaqueJSClass}^{OpaqueJSClass}^?^?^?^?^?^?^?^?^?^?^?{String={RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}{unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > >, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > > >={__compressed_pair<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > *, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > > > >=^{HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticValueEntry, std::__1::default_delete<StaticValueEntry> > > >}}}{unique_ptr<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > >, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > > >={__compressed_pair<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > *, std::__1::default_delete<WTF::HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > > > >=^{HashMap<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >, std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> >, WTF::StringHash, WTF::HashTraits<WTF::RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > >, WTF::HashTraits<std::__1::unique_ptr<StaticFunctionEntry, std::__1::default_delete<StaticFunctionEntry> > > >}}}}
{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}
{Weak<JSC::Structure>="m_impl"^{WeakImpl}}
@"NSMutableDictionary"
{unique_ptr<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> >, std::__1::default_delete<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> > > >="__ptr_"{__compressed_pair<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> > *, std::__1::default_delete<JSC::WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> > > >="__value_"^{WeakGCMap<id, JSC::JSObject, WTF::PtrHash<id>, WTF::HashTraits<id> >}}}
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
lUO8
@UO8
luG-
@uG-
,%K&
lJa/
@Ja/
,WX/
l7t.
@7t.
l[F9
@[F9
,.s 
,.;8
,r85
